.!** Quadtree processing

.!** set things up
.REQUIRE	"COORDLIB.HD"

.!** first the chapter heading
.CHAPTER ^&Quadtree Processing\&

.!** and the titles
.TITLE COORDLIB Reference Manual
.SUBTITLE Quadtree Processing

.HL 1 ^&Introduction\&

.P 0
The routine QUADSCAN uses a quadtree based technique (outlined below) to
select from a set of N (two dimensional) points each pair of points
which are within a given small distance (relative to the maximum
overall coordinate range), in a time which is proportional to N, rather
than to N squared (as would be the case if every point was checked for
proximity with every other). Each pair of points selected is passed on
to a user provided routine for processing. 
.s1
The speed advantage over simple order N squared processing is approx:
.lit

N	  :     50       100       1000      10000      100000
advantage :    0.5       1.0         50        500        5000

.el
QUADSCAN works by dividing the original point set bounding rectangular
box into four quarters, each overlapping by the given point separation
tolerance. Each quarter box is then divided in exactly the same
way. This process of recursive subdivision continues untill a box
contains less than a given number of points. The box is then processed
(i_.e_. every point is checked for proximity with every other and pairs
within the sepcified tolerance are passed through to the user routine
for processing) and the scan moves on to the next box. 

.page
.lit
	status = QUADSCAN(	user_routine,
     &				max_pts,pt,n_pts,xmin,xmax,ymin,ymax,
     &				linked_list,max_next,next_pt,touch_tol,
     &				n_lines,line_ends,line_fc,point_strings,
     &				check_fcs,check,max_fcs,self_check,
     &				max_work,workspace,show_progress)

Notes
12	out - long	function return
1	in  - long	user_routine	user routine.
	in  - long	max_pts		'pt' dimension.
13	i/o - real	pt		all points in image to be processed.
11	i/o - long	n_pts		number of points in 'pt'.
	in -  real	xmin,xmax	'pt' x-coordinate range.
	in -  real	ymin,ymax	'pt' y-coordinate range.
2,10	in  - logical	linked_list	is 'pt' linked list or contiguous?
	in  - long	max_next	'nxt_pt' dimension.
2	i/o - long	next_pt		'pt' linked list pointers.
7	in  - real	touch_tol	points/vector touch tolerance.
	in  - long	n_lines		number of lines in 'line'.
11	i/o - long	line_ends	line start/end point 'pt' indices.
3	in  - short	line_fc		feature code for each line.
	in  - logical	point_strings	'line' holds point_strings or vectors?
5	in  - logical	check_fcs	use feature code check?
4	in  - short logical check	which fc pairs to process?
	in  - long	max_fcs		'check' dimension.
6	in  - logical	self_check	check points/vectors from same feature?
9	ws  - long	max_work	'workspace' dimension.
8	in  - long	workspace	internal workspace for QUADSCAN
14	in  - logical	show_progress	show running % completion?

.el
Notes:
.ls
.tp 18
.le;The user routine must have the form:
.lit

	INTEGER FUNCTION userprocess(ilin,jlin,ipt,jpt)

	in -  long	ilin		line index for point IPT
	in -  long	jlin		line index for point JPT
	in -  long	ipt		'pt' index for some point
	in -  long	jpt		'pt' index for some other point

.el
It must return SS$__NORMAL for success and some other error condition code on
failure. 
.s1
This routine may also communicate with routines outside QUADSCAN via common
blocks. 

.tp 8
.le;It is often required to insert points into a point string during
processing. This calls for the use of a linked list - i_.e_. the sequence of
points along the line is no longer pt(i)->pt(i+1), but pt(i)->pt(nxt__pt(i)). If
this "one way linked list" structure is to be used then max__next must =
max__pts. If it is not used, then max__next may = 1. 

.tp 6
.le;Dimension line__fc(2,n__lines); By giving each line a "feature code", it is
possible to use the 'check' array as a mechanism for selecting only a
restricted set of line-pairs for co-processing. If 'check__fcs' is false, then
these feature codes are not used, and max__fcs may = 1. 

.tp 7
.le;Dimension check(max__fcs,max__fcs); Determines which fc pairs to process
when 'check__fcs' is true. If a point/vector pair is within tolerance then they
will only be passed to the user routine for processing if 'check__fcs' is false
or if 'check__fcs' is true and they are from lines with feature codes
line__fc(i) and line__fc(j) where both check(i,j) and check(j,i) are true. 

.tp 4
.le;If no feature code pair check is required, then no feature codes will be
used, so max__fcs may = 1, and 'line__fc' and 'check' need not be set. 

.tp 5
.le;This mechanism for deciding whether points/vectors within the same feature
should ever be passed to the user routine is entirely independant of feature
code checking. 

.tp 8
.le;'Touch__tol' is the distance within which points/vectors will be passed to
the user routine for processing. The larger this tolerance, the longer QUADSCAN
will take. As a rough guide, this tolerance should not be greater than about
1/50th of the greatest coordinate interval, unless the number of points in the
image is very low - in which case you should not be using QUADSCAN in any case.

.tp 10
.le;Dimension workspace(12,max__work); During processing, QUADSCAN must keep a
record of the start and end 'pt' indices, and 'line' index, of every section of
'line' contained by the quarter box at every level of subdivision at any time
during processing. 'max__work' is the max__imum total number of such line
sections. The exact value for 'max__work' required depends on the density and
distribution of the point data. As a general rule, 'max__work' should be >=
n__lines, but it is safer if 'max__work' is larger than this. 

.tp 7
.le;Vector closed loops for contiguous arrays must have start 'pt' = end 'pt'
(i_.e_. line__ends(1,iline) = line__ends(2,iline)), but vector closed loops for
linked lists must have last point index = index of 'pt' before start/end 'pt',
and the linked list must be circular (i_.e_. line__ends(1,iline) = ipt;
line__ends(2,iline) = jpt; nxt__pt(jpt) = ipt). 

.tp 7
.le;If the linked-list data structure is used then the user routine may create
new points to be inserted between existing points, so the number of points
'n__pts' in 'pt' may be increased. Also, while n__pts may at no stage be
decreased, points may be 'deleted' by the user routine by bridging them out of
the linked list, so that the line's end point 'pt' indices in 'line__ends' will
also be changed if any line end points are deleted. 

.tp 5
.le;Dimension line__ends(2,n__lines); At any stage during processing,
QUADSCAN will assume that lines for which line__ends(1,iline) = 0 have been
deleted (by the user routine) and will subsequently be ignored. 

.tp 7
.le;If successful, the QUADSCAN function result returns SS$__NORMAL, otherwise
it returns the condition code returned by the last call to the user routine if
a problem was encountered there, or else a COORDLIB condition code to the
effect that some other problem was encountered within the QUADSCAN routine
itself. 

.tp 3
.le;Dimension(2,max__pts); 2D coords of all points in all lines in image to be
processed. 

.tp 3
.le;Percent progress will not be displayed unless process is interactive.

.els

.page
.lit

	PROGRAM EXAMPLE
C
	IMPLICIT NONE
C
C Parameters
	INTEGER*4	MAX_PTS
	INTEGER*4	MAX_NEXT
	INTEGER*4	MAX_LINES
	INTEGER*4	MAX_FCS
	INTEGER*4	MAX_WORK
	PARAMETER(	MAX_PTS = 9, MAX_NEXT = 1)
	PARAMETER(	MAX_FCS = 2, MAX_LINES = 10)
	PARAMETER(	MAX_WORK = MAX_LINES)
C
C Workspace
	INTEGER*4	N_PTS
	INTEGER*4	N_LINES
	INTEGER*4	NEXT_PT(MAX_NEXT)
	INTEGER*4	LINE_ENDS(2,MAX_LINES)
	INTEGER*4	WORKSPACE(12,MAX_WORK)
C
	INTEGER*2	LINE_FC(MAX_LINES)
C
	LOGICAL*4	POINT_STRINGS
	LOGICAL*4	LINKED_LIST
	LOGICAL*4	CHECK_FCS
	LOGICAL*1	CHECK(MAX_FCS,MAX_FCS)
	LOGICAL*4	SELF_CHECK
	LOGICAL*4	SHOW_PROGRESS
C
	REAL*4		PT(2,MAX_PTS)
	REAL*4		TOUCH_TOL
	REAL*4		XMIN,XMAX,YMIN,YMAX
C
C Functions
	LOGICAL*4	QUADSCAN
C
C Common blocks
	INCLUDE 'LSL$CMNLSL:STATUS.CMN'
	COMMON/EXAMPLE/	PT
C
C External routines
	LOGICAL*4	CHECK_VECTORS
	EXTERNAL	CHECK_VECTORS
C
C Data - coordinates for 9 points, and coordinate range limits
	DATA PT/-10, 10,   10, 10,   10,-10,  -10,-10,  -10, 10,
     &	        -20,  0,   20,  0,
     &	          0,-20,    0, 20/
	DATA XMIN,XMAX,YMIN,YMAX/-20, 20,-20, 20/
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C Initialise LSLLIB
C
	CALL LSL_INIT(.TRUE.)
C
C Do points in PT represent strings of isolated points or of vectors?
C
	POINT_STRINGS = .FALSE.		! points represent vector ends
C
C Are points in PT sequenced by PT index, or by linked-list?
C
	LINKED_LIST = .FALSE.		! contig.array, not linked_list
C
C Set up line-end PT indices for each line
C
	N_LINES = 3			! there are just 3 lines
	N_PTS = 9			! there are 9 points altogether
	LINE_ENDS(1,1) = 1		! line 1 starts at point 1
	LINE_ENDS(2,1) = 5		! line 1 ends at point 5
	LINE_ENDS(1,2) = 6		! line 2 starts at point 6
	LINE_ENDS(2,2) = 7		! line 2 ends at point 7
	LINE_ENDS(1,3) = 8		! line 3 starts at point 8
	LINE_ENDS(2,3) = 9		! line 3 ends at point 9
C
C Use feature-code check?
C
	CHECK_FCS = .TRUE.
C
C Set up a "feature code" for each line
C
	LINE_FC(1) = 1
	LINE_FC(2) = 2
	LINE_FC(3) = 2
C
C Set up CHECK array so that only lines with different FCs are processed
C
	CHECK(1,1) = .FALSE.		! don't check type 1s with same
	CHECK(1,2) = .TRUE.		! do check type 1s with type 2s
	CHECK(2,1) = .TRUE.		! do check type 2s with type 1s
	CHECK(2,2) = .FALSE.		! don't check type 2s with same
C
C Decide on a suitable "touch tolerance"
C
	TOUCH_TOL = 0			! check is for crossing vectors
C
C Don't check any vector against another vector in the same line (they
C won't be anyway here, because the FC check would preclude this).
C
	SELF_CHECK = .FALSE.
C
C Don't bother to show % completion
C
	SHOW_PROGRESS = .FALSE.
C
C Call QUADSCAN, passing it the routine CHECK_VECTORS, to find every
C intersection between vectors from features with different FCs
C
	LSL_STATUS = QUADSCAN(	CHECK_VECTORS,
     &				MAX_PTS,PT,N_PTS,XMIN,XMAX,YMIN,YMAX,
     &				LINKED_LIST,MAX_NEXT,NEXT_PT,TOUCH_TOL,
     &				N_LINES,LINE_ENDS,LINE_FC,POINT_STRINGS,
     &				CHECK_FCS,CHECK,MAX_FCS,SELF_CHECK,
     &				MAX_WORK,WORKSPACE,SHOW_PROGRESS)
C
	CALL LSL_EXIT
	END
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
	LOGICAL FUNCTION CHECK_VECTORS(ILIN,JLIN,IPT,JPT)
C
	IMPLICIT NONE
C
C Common block data
	INTEGER*4	MAX_PTS
	PARAMETER(	MAX_PTS = 9)
	REAL*4		PT(2,MAX_PTS)
	COMMON/EXAMPLE/	PT
C
C Parameters
	INTEGER*4	SS$_NORMAL
	EXTERNAL	SS$_NORMAL
	REAL*4		SMALLREAL	! smallest accurate real
	PARAMETER(	SMALLREAL = 1E-5)
C
C Data in
	INTEGER*4	ILIN,JLIN	! LINE indices
	INTEGER*4	IPT,JPT		! PT indices
C
C Workspace
	REAL*4		P1X,P1Y,P2X,P2Y	! point coords at ends of vec P
	REAL*4		Q1X,Q1Y,Q2X,Q2Y	! point coords at ends of vec Q
	REAL*4		DXP,DYP		! vector P12
	REAL*4		DXQ,DYQ		! vector Q12
	REAL*4		PF,QF		! dist ratio of int along P & Q
	REAL*4		X,Y		! intersection point coords
	REAL*4		D1P		! dist of P1 from Q12
	REAL*4		D1Q		! dist of Q1 from P12
	REAL*4		DET		! a matrix determinant
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	If vectors intersect, intersection point is found and printed.
C
C	Function result always returns SS$_NORMAL here.
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
	CHECK_VECTORS = %LOC(SS$_NORMAL)
C
	P1X = PT(1,IPT)			! point at start of vec P
	P1Y = PT(2,IPT)
	P2X = PT(1,IPT+1)
	P2Y = PT(2,IPT+1)
	Q1X = PT(1,JPT)
	Q1Y = PT(2,JPT)
	Q2X = PT(1,JPT+1)
	Q2Y = PT(2,JPT+1)
C
C Check for edge-box ontersection as most wont intersect at all
C
	IF (MAX(P1X,P2X).LT.MIN(Q1X,Q2X)-SMALLREAL) GOTO 10
	IF (MIN(P1X,P2X).GT.MAX(Q1X,Q2X)+SMALLREAL) GOTO 10
	IF (MAX(P1Y,P2Y).LT.MIN(Q1Y,Q2Y)-SMALLREAL) GOTO 10
	IF (MIN(P1Y,P2Y).GT.MAX(Q1Y,Q2Y)+SMALLREAL) GOTO 10
C
	DXQ = Q2X-Q1X
	DYQ = Q2Y-Q1Y
	DXP = P2X-P1X
	DYP = P2Y-P1Y
C
	DET = DXQ*DYP-DYQ*DXP
	IF (ABS(DET).LT.SMALLREAL) GOTO 10	! vectors parallel?
C
	D1P = (P1Y-Q1Y)*DXQ-(P1X-Q1X)*DYQ
	D1Q = (Q1Y-P1Y)*DXP-(Q1X-P1X)*DYP
C
	PF = -D1P/DET
	QF =  D1Q/DET
C
	IF (PF.LT.-SMALLREAL.OR.PF.GT.1+SMALLREAL) GOTO 10
	IF (QF.LT.-SMALLREAL.OR.QF.GT.1+SMALLREAL) GOTO 10
C
	X = P1X+PF*DXP
	Y = P1Y+PF*DYP
C
	WRITE(*,'('' Intersection between lines '',I2,'' and '',I2,
     &	'' at ('',F6.2,'','',F6.2,'')'')') ILIN,JLIN,X,Y
C
10	RETURN
	END

This produces the following output:

Intersection between lines  1 and  3 at (  0.00, 10.00)
Intersection between lines  1 and  2 at ( 10.00,  0.00)
Intersection between lines  1 and  3 at (  0.00,-10.00)
Intersection between lines  1 and  2 at (-10.00,  0.00)
 ELAPSED:    0 00:00:00.50  CPU: 0:00:00.10  BUFIO: 0  DIRIO: 0  FAULTS: 39 

.el
This is a trivial example. QUADSCAN should not be used unless the number
of points in the dataset is at least 100.
