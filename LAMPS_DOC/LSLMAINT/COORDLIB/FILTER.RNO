.!** Filtering

.!** set things up
.REQUIRE	"COORDLIB.HD"

.!** first the chapter heading
.CHAPTER ^&Filtering\&

.!** and the titles
.TITLE COORDLIB Reference Manual
.SUBTITLE Filtering

.HL 1 ^&Filtering Algorithms\&

.P 0
Two filtering algorithms are available, namely

.LIST
.DISPLAY ELEMENTS ,RL,")"
.LE ;a least squares "BUNCH" filter, and
.INDEX BUNCH filter
.INDEX Filters> BUNCH
.LE ;the Douglas-Peuker filter
.INDEX DOUGLAS-PEUKER filter
.INDEX Filters> DOUGLAS-PEUKER
.END LIST

The former was originally developed by Laser-Scan for the LASERAID software, 
while the latter is based on an implementation of a line reduction algorithm by 
D. H. Douglas of the University of Ottawa. The algorithm is attributed to 
himself and T. K. Peucker.

.HL 1 ^&Bunch Filter\&

.P 0
The BUNCH filter uses tolerances related to chords on the incoming point
strings. The filter performs a least squares fit through all the existing
data points, and when a point lies more than the ^*^&lateral\&\* threshold 
distance from the
trend line it is considered to be a provisional master point. A new fit is then
conducted forwards from the last master point, until again the threshold
deviation is exceeded. The last provisional point is taken to be the
next master point and the intervening points are rejected. The process is
repeated until the end of the line is reached. If the lateral threshold 
distance is large, it will rarely be exceeded and many points will be
thrown away. 

.P 0
The number of points which are kept as master points or are
thrown away may be additionally controlled by the minimum and maximum  
separation.
.LIST 0,"*"
.BLANK
.LE; the minimum separation is the shortest distance allowed between successive 
master points ^*^&along\&\* the line. If this is set to a large value,
more points will be thrown away giving increasingly angular linework. 
.LE; the maximum separation is the distance travelled ^*^&along\&\* the line 
before forcing out a master point. A large value will result in very 
sparse points along straight and nearly straight lines. A maximum separation 
of 0.0 is equivalent to one of infinity, and means that no points will be 
forced out on distance criteria.
.END LIST

The maximum separation must be greater than or equal to the minimum separation 
which must be greater than or equal to the lateral threshold distance. 

.P 0
As the BUNCH filter 
uses a least squares algorithm, all new points will be placed to 
the ^*outside\* of the original curve of the line being filtered.

.HL 2 ^&Initialisation\&

.TP 5
.P 5 
^*call BUNCH__INIT( toler, res, sf )\*

.LM +30
.P -25
in##-#real####^*toler\*######a 3 element real array containing tolerances, in 
the coordinate units
.LM +3
.I -3
#-#^*toler(1)\* is the minimum point separation
.I -3
#-#^*toler(2)\* is the maximum point separation
.I -3
#-#^*toler(3)\* is the lateral tolerance
.LM -3
.I -25
in##-#real####^*res\*########the resolution of the coordinate units
.I -25
in##-#real####^*sf\*#########a scale factor (which should be 1.0 if dealing 
with IFF units)
.LM -30

.P 0
Prior to filtering any lines, BUNCH__INIT should be called to perform the 
necessary initialisation. It should also be called if any of the tolerances 
change.

.HL 2 ^&Filtering a whole line\&

.TP 5
.P 5 
^*call BUNCH__LINE( numpts, line )\*

.LM +30
.P -25
in##-#long####^*numpts\*#####the number of points in the line
.I -25
in##-#real####^*line\*#######the line to be filtered, in the form of a 
2_*^*numpts\* array
.LM -30

.P 0
This routine applies the bunch filter to the whole line, calling BUNCH__POINT 
to deal with each point in turn. This in turn calls ADDPTS to output the 
filtered line (see next section and the chapter dealing with interpolation). 

.P 0
Note that if the line is a 
closed loop, the first and last points will probably not 
coincide after filtering. In such cases, the first point should 
then be dragged onto the last by the user's calling routine.

.HL 2 ^&Filtering a line point by point\&

.TP 5
.P 5 
^*call BUNCH__POINT( x, y, forced )\*

.LM +30
.P -25
in##-#real####^*x\*##########X coordinate
.I -25
in##-#real####^*y\*##########Y coordinate
.TP 10
.I -25
in##-#long####^*forced\*#####a flag with one of the following values, 
indicating the action to take :-
.LM +4
.I -4
0#-#examine the point to see if a new master point has to be created. If not, 
the point is used to calculate a new straight line approximation to the line 
segment being followed.
.I -4
1#-#tidy up, probably producing a new master point, taking account of the 
given point.
.I -4
2#-#tidy up, probably producing a new master point, but ignoring the 
given point.
.LM -4
.LM -30

.P 0
Some users might prefer the flexibility of dealing with points individually,
for instance when it is not known that the end of the line has been 
reached until after the last point has been dealt with. This would be the 
case if the input line was being dealt with section by section.

.P 0
BUNCH__POINT calls the user-supplied subroutine ADDPTS to 
output filtered points as and when necessary. The specification of ADDPTS is 
given in the chapter on interpolation.
Note that display on the screen is not relevant to filtering, 
so the last argument to ADDPTS is always false.

.HL 1 ^*Douglas-Peucker Filter\*

.P 0
The Douglas-Peucker filter works by joining the first and last points of the 
line being filtered with a straight line. The longest perpendicular to this 
straight line which cuts the line being filtered is then found. The two parts 
of the original line are then treated separately and the same process applied 
to each of them. This is repeated for successively smaller sections of the 
original line until any further perpendiculars which might be derived would be 
shorter than a specified lateral tolerance. The new 
line consists of the succession of points where the perpendiculars cut the 
original line.

.P 0
The lateral tolerance is the shortest distance by which the new line will 
deviate laterally from the original line. It must be greater than 0.005, 
otherwise that constant will be used instead. 

.HL 2 ^&Initialisation\&

.TP 5
.P 5 
^*call DP__INIT( toler, sf )\*

.LM +30
.P -25
in##-#real####^*toler\*######the lateral tolerance, in the coordinate units
.I -25
in##-#real####^*sf\*#########a scale factor (which should be 1.0 if dealing 
with IFF units)
.LM -30

.P 0
Prior to filtering any lines, DP__INIT should be called to perform the 
necessary initialisation. It should also be called if the tolerance changes.

.HL 2 ^&Filtering a whole line\&

.TP 5
.P 5 
^*call DP__LINE( numpts, line )\*

.LM +30
.P -25
in##-#long####^*numpts\*#####the number of points in the line
.I -25
in##-#real####^*line\*#######the line to be filtered, in the form of a 
2_*^*numpts\* array
.LM -30

.P 0
This routine transfers points into the format required for
filtering, and on completion, calls the user-supplied subroutine ADDPTS to 
output the filtered points. Note that the number of points which can be 
processed is limited, and if a line has more than the maximum, the extra 
points will be ignored. Note also that in this case ADDPTS is passed points 
from the original line which was passed to DP__LINE.

.P 0
The specification of ADDPTS is given in the chapter 
on interpolation. Note that display on the screen is not relevant to filtering, 
so the last argument to ADDPTS is always false.

.HL 2 ^&Line String Size\&

.P 0
The parameter file LSL$CMNCOORD:MAXPTS.PAR contains a parameter used in the 
declaration of point arrays in the Douglas-Peucker filtering routines, as 
follows :-

.LM +25
.P -20
long####^*MAXPTS\*####-#the maximum number of points in a line string, 
currently 10000
.LM -25

.P 0
This parameter file is available to users for their own programs.

