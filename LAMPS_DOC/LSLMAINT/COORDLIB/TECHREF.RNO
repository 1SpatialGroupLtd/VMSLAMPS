.HL1^&QUADSCAN TECHNICAL REFERENCE\&

The routine QUADSCAN uses a quadtree based technique (outlined below) to
select from a set of N (two dimensional) points each pair of points
which are within a given small distance (relative to the maximum
overall coordinate range), in a time which is proportional to N, rather
than to N squared (as would be the case if every point was checked for
proximity with every other). Each pair of points selected is passed on
to a user provided routine for processing. 
.s1
The speed advantage over simple order N squared processing is approx:
.lit

N	  :     50       100       1000      10000      100000
advantage :    0.5       1.0         50        500        5000

.el
QUADSCAN works by dividing the original point set bounding rectangular
box into four quarters, each overlapping by the given point separation
tolerance. Each quarter box is then divided in exactly the same
way. This process of recursive subdivision continues untill a box
contains less than a given number of points, or the maximum permitted
depth of subdivision is reached (see below). The box is then processed
(i_.e_. every point is checked for proximity with every other and pairs
within the specified tolerance are passed through to the user routine
for processing) and the scan moves on to the next box. 
.s1
The maximum permitted depth of image subdivision is that which results
in boxes with minimum dimension smaller than touch-tolerance/2. It is
essential that such a limit is imposed, as at this level, the overlap
border of depth touch-tolerance/2 (which must always added to every box
at every level so that all point pairs within touch tolerance will
always be present in one or more box when it comes to be processed) will
completely contain all of its neighbouring boxes at the same level.
.s1
Further subdivision would not result in any reduction in the number of
points in each box. If the depth of subdivision was not checked,
and a box existed with minimum dimension less than touch-tolerance/2
which contained sufficient points to appear to warrent further division,
division would continue until the data store for box contents at each
level ran out of space. 
.s1
Since each depth of subdivision decreases box dimension by a factor of 2,
a maximum maximum-depth of 15 is imposed, as it is felt unlikely that
many cases will arrise where dividing the image into 4_^15=1073741800
boxes will leave many boxes containing more than 50 points!
.s1
.tp 32
Identifiers used in the genuinely recursive (Pascal like) version of the
QUADSCAN algorithm which follows (included here only for the sake of
illustrating what the non recursive Fortran routine which follows is actually
doing) are as follows: 
.ls
.le;DEP#########: depth of subdivision.
.le;IBX#########: quadrant index at depth DEP.
.le;PT##########: coords for each point in image.
.le;NPTS########: number of points in image.
.le;FEWPTS######: minimum number of points to bother dividing.
.le;TOL#########: point separation tolerance.
.le;MAXDEP######: maximum depth of subdivision.
.le;CHECK__BOX###: routine which checks the number of points in the
current box, and the current box depth, then either 1) calls a routine
to divide the current box, or 2) calls a routine to process every pair
within tolerance within the current box and then calls itself to check
the next box at the current level of subdivision in the same way, if
there is one. 
.le;PROCESS__PAIR: user provided routine to be applied to each pair
within tolerance.
.le;PROCESS__BOX#: routine which passes every point/vector pair within
tolerance to the user provided routine, PROCESS__PAIR.
.le;DIVIDE__BOX##: routine which divides the current box into four
quarter boxes, which overlap by TOL.
.els
.page
.lit

	PROCEDURE QUADSCAN(PROCESS_PAIR,PT,NPTS,TOL)
	BEGIN
	  [set MAXDEP - see notes above for how this is determined)
	  DEP = 0		/* starting at level of subdivision 0 */
	  IBX = 1		/* starting at box number 1 */
	  CHECK_BOX(PROCESS_PAIR,DEP,IBX,MAXDEP)
	END

	PROCEDURE CHECK_BOX(PROCESS_PAIR,DEP,IBX,MAXDEP)
	BEGIN
	  IF (> FEWPTS points in box IBX at depth DEP, and DEP < MAXDEP)
	  THEN
	    DIVIDE_BOX(DEP,IBX)
	  ELSE
	    PROCESS_BOX(PROCESS_PAIR)
	    IF (B <> 4) THEN
	      CHECK_BOX(PROCESS_PAIR,DEP,IBX+1)
	    END IF
	  END IF
	END

	PROCEDURE PROCESS_BOX(PROCESS_PAIR)
	BEGIN
	  FOR I = 1 TO NPTS-1 DO
	    FOR J = I+1 TO NPTS DO
	      IF (dist from PT(I) to PT(j) is < TOL) THEN
	        PROCESS_PAIR(I,J)
	      END IF
	    END DO
	  END DO
	END

.EL
.page
As QUADSCAN is written in Fortran 77, the same effect is achieved as
follows (with routines now communicating via a Fortran common block):
.lit

	SUBROUTINE QUADSCAN(PROCESS_PAIR)
	(set MAXDEP - see notes above for how this is determined)
	DEP = 0
10	IBOX(DEP) = 0
20	IBOX(DEP) = IBOX(DEP)+1		! boxes are numbered 1 to 4
	IF (IBOX(DEP).GT.4) THEN	! if no more boxes at this depth
	  DEP = DEP-1			! pop depth
	  IF (DEP.GT.0) GOTO 20		! until stack empty
	  RETURN
	END IF
	IBX = IBOX(DEP)
	IF (> FEWPTS points in box IBX at depth DEP, and DEP < MAXDEP)
	THEN
	  CALL DIVIDE_BOX()		! divide into 4 quarter boxes
	  DEP = DEP+1			! push box depth
	  GOTO 10			! start over at new depth
	ELSE
	  CALL PROCESS_BOX(PROCESS_PAIR)! process all close pairs in box
	END IF
	IF (DEP.GT.0) GOTO 20		! move on to next box
	END

.el
Of cource, the actual code is considerably more extensive than this,
due mainly to the following extra facilities which have been included to
make QUADSCAN suitable for general use:

.ls
.tp 10
.le;It is often required that not every line should be processed with
every other. A mechanism is provided which, if selected, allows you to
give a class to each line and to specify which class of line is to be
processed with which others.
.s1
The class or "feature code index" of line ILINE is given by
LINE__FC(ILINE); whether classes IFC and JFC are processed together is
given by (CHECK(IFC,JFC) or CHECK(JFC,IFC)). 

.tp 11
.le;The point array PT may hold points such that point sequence is given
by:
.br;####[point after PT(i) is PT(i+1)]
.br;However, if it is required to insert new points between existing
points during processing, then it is advantageous to use a linked-list
instead, where point sequence is given by:
.br;####[point after PT(i) is PT(NEXT__PT(i))]
.br;Here a separate array of "pointers", one pointer for each point,
must be provided. Which of these structures is being used is given by
the value in LINKED__LIST. 

.tp 8
.le;Points in the point array PT may represent either sequences of discrete
points (such as electricity pylons) or sequences of vectors between points
(such as roads). When QUADSCAN divides up these point strings in the process of
dividing one box of strings into its four (overlapping) quarters, it has to
know which of these representations is being used. This is given by the value
in POINT__STRINGS. 

.tp 4
.le;It is the four possible combinations of values in LINKED__LIST and
POINT__STRINGS which give rise to the four different DIVIDE__BOX and four
different PROCESS__BOX routines which may be called by QUADSCAN. 

.tp 7
.le;One or two other refinements are also present in the code (such as the
option for specifying whether any line should have any point in it processed
together with any other point in the same line, or for a display of percentage
process completion) but these should be sufficiently well documented in the
source code to be self explanatory.

.els
