.!** Bezier Interpolation

.!** set things up
.REQUIRE	"COORDLIB.HD"

.!** first the chapter heading
.CHAPTER ^&Bezier Interpolation\&

.!** and the titles
.TITLE COORDLIB Reference Manual
.SUBTITLE Bezier Interpolation

.HL 1 ^&Introduction\&

.P 0
.INDEX Bezier interpolation
.INDEX Interpolation> Bezier

Bezier is a polynomial interpolation algorithm - it has been used widely in
interactive graphics to obtain approximate solutions to curve fitting problems.
Instead of using the data points directly to specify a polynomial, a set of
guide points is first generated from data points. 

.P 0
It resides in this seperate chapter because it utilitises a different mechanism
from other interpolation routines in COORDLIB.

.P 0
The routine BEZIER INTERPOLATION is the library routine that should be called 
by an applications program.

.TP 5
.LM +5
.P 5
^*call BEZIER__INTERPOLATION( ncoords__in, xy__in, ncoords__out, xy__out,\*
^*#################################looped, do__average, bezier__tolerances,\*
^*#################################do__change__tol, error)\*

.LM +38
.P -33
in##-#long####^*ncoords__in\*#########the number of points in the input line
.I -33
in##-#real####^*xy__in\*##############the line to be interpolated, in the form 
of a 2_*^*n\* array 
.I -33
in##-#long####^*ncoords__out\*########the number of points in the output
(interpolated) line 
.I -33
in##-#real####^*xy__out\*#############the line after interpolation, in the form 
of a 2_*^*n\* array 
.I -33
in##-#byte####^*looped\*#############TRUE if the line is looped (ie. first point
equals the last point)
.I -33
in##-#byte####^*do__average\*#########TRUE if the AVERAGE sub-qualifier is 
to be used)
.I -33
in##-#real####^*bezier__tolerances\*##the lateral and corner tolerance values
.I -33
in##-#byte####^*do__change__tol\*######TRUE if the tolerance for the
sub-division of long segments is to be incremented automatically
.I -33
out#-#long####^*error\*##############set to 0 if the operation is success
.LM -38

.P 0
BEZIER__INTERPOLATION calls the following library routines:

.LIST
.LM 5
.LE; ^*SPCPTS##\* - removes consecutive coincident points, and inserts
additional points in long line segments. If DO__CHANGE__TOL is set to TRUE
and the intermediate buffer is full, the program will automatically 
increment the segment tolerance for sub-dividing long segments by a 
factor of one until the total number of intermediate points is less than
that allowed in the buffer(i.e. 15000 points).
.LE; ^*AVPTS###\* - generates guide points to be used to specify the
bezier polynomial
.LE; ^*THIN####\* - removes surplus guide points.  As many points as
possible are removed so that the distance between points is never greater
than the lateral tolerance specified in BEZIER__TOLERANCES(1)
.LE; ^*BEZIER##\* - interpolates using Bezier polynomial interpolation
formula using generated guide points.  The routine is passed BEZIER__TOLERANCES.
.LM -5
.END LIST

.P 0
BEZIER__TOLERANCES contains the two tolerance values used by the interpolation
algotithm.

.LIST
.LE; ^*BEZIER__TOLERANCES(1)\* is the lateral deviation tolerance.  It is the
distance from a straight line joining consecutive points to a true curve.
.LE; ^*BEZIER__TOLERANCES(2)\* is the corner hug tolerance.  It is the
distance of the curve from the guide points.
.END LIST
