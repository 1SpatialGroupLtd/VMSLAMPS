.!** Interpolation

.!** set things up
.REQUIRE	"COORDLIB.HD"

.!** first the chapter heading
.CHAPTER ^&Interpolation\&

.!** and the titles
.TITLE COORDLIB Reference Manual
.SUBTITLE Interpolation

.HL 1 ^&Introduction\&

.P 0
Three interpolation algorithms are available, namely

.LIST
.DISPLAY ELEMENTS ,RL,")"
.LE ;Akima cubic interpolation,
.INDEX Akima interpolation
.INDEX Interpolation> Akima
.LE ;McConalogue cubic interpolation, and
.INDEX McConalogue interpolation
.INDEX Interpolation> McConalogue
.LE ;linear interpolation
.INDEX Linear interpolation
.INDEX Interpolation> linear
.END LIST

Akima is a bicubic spline method which preserves linearity if possible, while
McConalogue is a circular arc pair method. Each of has been used by Laser-Scan 
since 1976, Akima having been based on an algorithm in CACM (433). 

.P 0
The linear interpolation algorithm was originally intended simply for adding 
extra points to lines, and is a much later addition.

.P 0
Whichever algorithm is being used, it is a general routine which controls the 
interpolation; this is passed the appropriate routine to interpolate a single 
span of the line.

.HL 1 ^&Initialisation\&

.TP 5
.P 5 
^*call INTRPL__INIT( toler, sf, draw )\*

.LM +30
.P -25
in##-#real####^*toler\*######a 3 element real array containing tolerances, in 
the coordinate units
.LM +3
.I -3
#-#^*toler(1)\* is the constant separation for curve and linear interpolation
.I -3
#-#^*toler(2)\* is the arc to chord distance for curve interpolation
.I -3
#-#^*toler(3)\* is the angular deviation for curve interpolation
.LM -3
.I -25
in##-#real####^*sf\*#########a scale factor (which should be 1.0 if dealing 
with IFF units)
.I -25
in##-#byte####^*draw\*#######TRUE if the interpolated line is being drawn on 
the screen
.LM -30

.P 0
Prior to interpolating any lines, INTRPL__INIT should be called to perform the 
necessary initialisation. It should subsequently be called again if any of the 
tolerances change or if there is a scale change.

.P 0
A detailed explanation of the tolerances follows.

.HL 2 ^&Curve Interpolation Tolerances\*

.P 0
In the formula below, 
The three coefficients (a,b,c) control the spacing of interpolated points.
The approximate separation of points (d) is given by:

.P +5
d = a + 2_*SQRT(2br) + cr######(r is radius of curvature)

.P 0
which means (if other coefficients were zero) that

.LIST 0," "
.BLANK
.LE; a  gives a constant separation of a IFF units 
.LE; b  gives a constant 'arc to chord' distance of b IFF units 
.LE; c  gives a constant angular deviation of c radians 
.END LIST

.HL 2 ^&Linear Interpolation Tolerance\*

.P 0
The constant separation represents the minimum distance required between data 
points. If this is 0.0, one point will be inserted in the middle of the line 
segment regardless of segment length.

.HL 1 ^&Interpolating a whole line\&

.TP 5
.P 5 
^*call INTRPL( n, xy, first, last, looped, extra, polate )\*

.LM +30
.P -25
in##-#long####^*n\*##########the number of points in the line
.I -25
in##-#real####^*xy\*#########the line to be interpolated, in the form of a 
2_*^*n\* array
.I -25
in##-#byte####^*first\*######TRUE if the line includes the first point
.I -25
in##-#byte####^*last\*#######TRUE if the line includes the last point
.I -25
in##-#byte####^*looped\*#####TRUE if the line is looped
.I -25
in##-#byte####^*extra\*######TRUE if extra points have to be extrapolated for 
each section of the line (this is the case for Akima but not for the other 
methods)
.I -25
in##-#long####^*polate\*#####the actual interpolation routine to use
.LM -30

.P 0
INTRPL interpolates points between given master points in array ^*xy\*,
calling routine ^*polate\* to do the interpolation. The actual subroutines used 
should be declared as EXTERNAL in the calling routine (the example in Appendix 
A illustrates how to do this). The interpolation routines currently available 
are AKIMA, MCONAL, and LINEAR, but users could of course supply their own;  
the specification for ^*polate\* is given in the next section.

.P 0
INTRPL, AKIMA, MCONAL and LINEAR all call the user-supplied subroutine ADDPTS 
to output interpolated points. The specification of ADDPTS is given in the 
next section; note that it may be called using part of the original line 
string passed to INTRPL.

.P 0
The argument ^*extra\* controls whether or not additional points are 
extrapolated for each section of the line as it is interpolated. Care should 
be taken to ensure that it is compatible with ^*polate\* (i.e. TRUE for AKIMA).

.P 0
Note that a call with ^*n\* = 0 is valid, and can be used with ^*last\* = TRUE
to finish off a feature without adding more points.

.P 0
After interpolation, closed loops start at the original third point, the first 
two appearing at the end. This is of no consequence if drawing on the screen.

.P 0
Note that interpolation will not be carried out on two-point lines or 
three-point loops; this is an anomaly if linear interpolation is being 
performed.

.HL 1 ^^^&Routines Supplied by Users\&

.P 0
These routines are called by the library routines and should be linked with 
the library and other modules of the user's program.

.HL 2 ^&Output of points\&

.P 0
Both the filtering and interpolation routines require a subroutine named
ADDPTS to be supplied by the user. This routine is called to output points, 
and its specification is as follows :-

.BLANK
.NOFILL
	SUBROUTINE ADDPTS(NPTS,XY,DRAW)

	INTEGER*4	NPTS		! number of points
	REAL		XY(2,NPTS)	! line string
	LOGICAL*1	DRAW		! draw line on screen ?
.FILL

.P 0
It is referenced by

.BLANK
.NOFILL
 	CALL ADDPTS(NPTS,XY,DRAW)
.FILL

.P 0
and can allow the points either to be buffered up for subsequent 
output or passed to a graphics library for display on a screen.

.P 0
Thus it is possible to start with a complete line and simply 
add the filtered points to an output buffer as in IFILTER. 
Alternatively, as in LITES2, the original line could be read in and dealt with
section by section with the filtered or interpolated being points copied 
either to the output item using the normal flushing mechanism, or to the 
graphics output buffer. 

.HL 2 ^&Interpolation of a line segment\&

.P 0
The dummy subroutine POLATE is supplied by the user as an actual 
argument to INTRPL. As mentioned above, the library already contains three 
routines for this purpose, namely AKIMA, MCONAL and LINEAR. It will therefore 
not normally be necessary to supply any separate versions. The specification 
is :-

.BLANK
.NOFILL
	SUBROUTINE POLATE(XY)

	REAL XY(2,6)		! XY holds the master points
.FILL

.P 0
POLATE is passed the start of an array of six points. It interpolates
between the third and fourth, putting in the last point but not the first. 
It is referenced by

.BLANK
.NOFILL
	CALL POLATE(XY)
.FILL

.P 0
and should call ADDPTS to output interpolated points.
