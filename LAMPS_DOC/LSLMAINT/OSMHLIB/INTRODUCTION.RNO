.!*
.!* Introduction
.!*

.HL 1 ^^^&Introduction\&

.P 0
OSMHLIB is Laser-Scan's Ordnance Survey Map Header subroutine library.

.P 0
It provides a set of routines which are of general use to Laser-Scan
programmers in application programs when manipulating OS map headers.

.P 0
OSMHLIB was formed by bringing together the existing routines prefixed by
'OSMH__' and the new routines prefixed by 'OSMH__NEW__'.

.P 0
The original set of routines described briefly in Chapter 2 are used to
manipulated type 2 OS map headers. These are used in conjunction with the
common block LSL$CMNIFF:MHDMB.CMN which is described in Appendix A.

.P 0
The new routines were implemented to handle type 3 and 4 OS map headers and
are described in Chapter 3. Type 3 and 4 headers are accessed from application
programs by including the common block LSL$CMNIFF:MHOSGB.CMN which is
described in Appendix A.

.P 0 
The library may be found in LSL$LIBRARY:OSMHLIB.OLB, and its public common
parameter files are in LSL$CMNOSMH:

.P 0
The library sources are in LSL$SOURCE__ROOT:[LSLMAINT.OSMHLIB...], and the
documentation sources are in LSL$DOC__ROOT:[LSLMAINT.OSMHLIB].

.BL 2
OSMHLIBV is a version of OSMHLIB which references VIOLIB and CMDLIB and is
intended for DIGSYS only. Some of the routines in OSMHLIB are not present in
OSMHLIBV as DIGSYS does not require them.
.P 0
Chapter 4 describes the OSMHLIBV routines which are prefixed 'OSMH__VIO__'.
The library, its sources and the associated common blocks are located in the
same place as those for OSMHLIB.

.!
.! ***************************************************************************
.!
.PAGE
.HL 1 ^^^&Documentation Notation\&

.P 0
The following conventions are followed:

.LIST "*"

.LE; all arguments are fully declared for each routine.

.LE; the following input/output declarations are made:

.LM +6
.P -6
out#-#this variable will be written to by the routine.
.P -6
#in#-#this variable is read by the routine - it is not written to.
.P -6
i/o#-#this variable may be both read by the routine, and written to.
.LM -6

.LE; the following argument types are used:

.LM +12
.P -12
word######-#this is a Fortran INTEGER_*2, a 16 bit variable.
.P -12
long######-#this is a Fortran INTEGER_*4, a 32 bit variable. Note that this 
is the default integer size on the VAX, and is assumed unless there are good 
reasons for using a word.
.P -12
logical###-#this is a Fortran LOGICAL variable
.P -12
byte######-#this is a Fortran BYTE or LOGICAL_*1 variable
.P -12
real######-#this is a Fortran REAL variable
.P -12
dreal#####-#this is a Fortran REAL_*8, or DOUBLE PRECISION variable
.P -12
char######-#this is a Fortran CHARACTER variable
.LM -12

.LE; arguments are compulsory, unless enclosed in brackets (the characters 
'[' and ']'). Note that the specification of optional arguments is not always 
formally correct - for instance, if this documentation describes

.P 12
^*call FRED( arg1, [arg2], [arg3], [arg4] )\*

.P 0
then it ^&really\& means

.P 12
^*call FRED( arg1 [, [arg2] [, [arg3] [, [arg4]]]] )\*

.END LIST
