.!*
.!* OSMHLIBV - VIOLIB versions of OSMH_NEW routines for DIGSYS
.!*

.HL 1 ^^^&Introduction\&

.P 0
The routines described in this chapter are in a library of their own called
OSMHLIBV and are prefixed with 'OSMH__VIO'. They are intended for use for
DIGSYS only as they access VIOLIB and CMDLIB and they behave in the same way
as their corresponding 'OSMH__NEW__' routines. Hence this chapter is almost
identical to the previous one.

.P 0
The routines are designed to allow access to OSTF (type 3) and CITF (type 4)
OS IFF map headers. These headers are ASCII character blocks which can be
interfaced with OS developed map header editors. CITF is the proposed new OS
Common Internal Transfer Format and is not yet implemented, but facilities have
been included to aid this.
.P 0
The library has been designed for expansion as and when necessary. So, for
example, it is only possible to insert integers or strings into the header. If
a future requirement dictates that reals are required, an appropriate routine
can then be written.
.P 0

.HL 1 ^^^&Use_ of_ OSMHLIBV_ routines_ for_ type_ 3_ and_ 4_ map_ headers\&

.P 0
Type 3 and 4 ASCII headers are held in a new common array, MH2ARR, which can be
found in LSL$CMNIFF:MHOSGB.CMN. This array has a similar format to that of
MHARR in MHDMB.CMN, but has been expanded to accomodate a header of 5000 bytes.
This excludes 4 bytes for MH2DESC, which is a byte array equivalenced onto the
beginning of MH2ARR.
.P 0
Appendix A describes LSL$CMNIFF:MHOSGB.CMN and the other interface blocks
needed for use with the OSMHLIBV routines. These include the common block,
LSL$CMNOSMH:OSMH__NEW__MH.CMN, that will hold any values extracted from the
header and a parameter file, LSL$CMNOSMH:OSMH__NEW.PAR, needed to define the
field names for access.
.P 0
Appendix B describes the translation table pointed to by the logical 
LSL$OS__MH__TABLE and Appendix C lists the OSMHLIB error codes which are almost
identical to those for OSMHLIBV.
.P 0
The OSMHLIBV routines can be used in DIGSYS by including the following:
.LM +30
.P -25
INCLUDE#'LSL$CMNOSMH:OSMH__NEW__MH.CMN'
.I -25
INCLUDE#'LSL$CMNOSMH:OSMH__NEW.PAR'
.LM -30

.P 0
Type 3 and 4 headers can be accessed by including the following:
.LM +30
.P -25
INCLUDE#'LSL$CMNIFF:MHOSGB.CMN'
.LM -30

.P 0
OSMHLIBV error messages are hard coded into a routine call OSMH__VIO__OUTMSG
because DIGSYS does not access LSLLIB and hence cannot use LSL__PUTMSG or
LSL__ADDMSG. The routines still require the OSMHLIB message numbers to be
included by using the following:
.LM +30
.P -25
INCLUDE#'LSL$CMNOSMH:OSMHLIBMSG.PAR'
.LM -30
.P 0
The OSMH__VIO__OUTMSG routine takes the message ID and outputs a similar
message to those used by the OSMHLIB routines. This routine is used to provide
the output of messages in the same format as the LSLLIB routine LSL__PUTMSG.
Any new messages should be added to OSMH__VIO__MSG and the library rebuilt to
be relinked with the application (DIGSYS).

.P 0
The OSMHLIBV routines are linked with application programs (DIGSYS) using:
.P 5
_$##link/map##program,sub1,sub2,etc,#_-
##################lsl$library:osmhlibv/lib


.P 0
.page
.HL 2 ^^^&Test_ if_ translation_ table_ exists\&
.P 5
^*ok = OSMH__VIO__INQTABLE()\*
.LM +30
.P -25
out#-#long#####^*ok\*########error return
.LM -30
.P 0
OSMH__VIO__INQTABLE is used to test if the logical LSL$OS__MH__TABLE has been
defined and that the file it points to actually exists. If either of these
conditions are not met, then the appropriate error message number is returned.

.P 0
This routine may be called from an application program and the success of
finding the translation table is left in the common variable MH__FOUNDFILE.

.P 0
If the routine is not called from an application program then it is
automatically done so from within OSMH__VIO__INI.

.P 0
No error messages are output from this routine but the message number returned
will be used within the OSMH__VIO__INI routine if messages are enabled.

.P 0
The values of ^*ok\* may be:
.blank
.LM +25
.I -25
OSMHLIB____NOLOG#########-#error
.I -25
OSMHLIB____NOFILE########-#error
.LM -25

.P 0
.HL 2 ^^^&Open_ and_ read_ translation_ table\&
.P 5
^*ok = OSMH__VIO__INI( [nomess] )\*
.LM +30
.P -25
out#-#long#####^*ok\*########error return
.I -25
in##-#logical##^*nomess\*####disable messages if .TRUE. (optional)
.LM -30
.P 0
OSMH__VIO__INI is used to read and store the contents of the translation table
which defines the positions and sizes of the fields within an OSTF (type 3) or
a CITF (type 4) OS map header.
.P 0
It therefore requires that the logical LSL$OS__MH__TABLE is defined to point to
the translation table, a description of which is given in Appendix B.

.P 0
OSMH__VIO__INI must be called before an attempt to use any other OSMHLIBV
routines (except OSMH__VIO__INQTABLE) as these use the values extracted from
the table. It should only be called once from an application program.

.P 0
If .FALSE. or nothing is given as an argument, appropriate error messages are
given if a problem occurs when reading the translation table and a list of
these can be found in Appendix C.
If .TRUE. is given as an argument, no error messages will be output so that the
application may do so itself using the value of ^*ok\*.

.P 0
This enabling or disabling of messages applies to the OSMHLIBV routine calls
that follow and may not be revoked.

.P 0
OSMH__VIO__INI will call OSMH__VIO__INQTABLE unless it was called from within an
application program and failed. (ie. MH__FOUNDFILE is FALSE)

.P 0
The values of ^*ok\* may be:
.blank
.LM +25
.I -25
OSMHLIB____UNKCMD########-#warning
.I -25
OSMHLIB____ERRCLOPAR#####-#error
.I -25
OSMHLIB____ERRFMT########-#error
.I -25
OSMHLIB____ERRINI########-#error
.I -25
OSMHLIB____ERROPNPAR#####-#error
.I -25
OSMHLIB____ERRRDPAR######-#error
.I -25
OSMHLIB____NOLOG#########-#error
.LM -25


.P 0
.HL 2 ^^^&Extract_ a_ header_ field\&
.P 5
^*ok = OSMH__VIO__GETFLD( field )\*
.LM +30
.P -25
out#-#long#####^*ok\*########error return
.I -25
in##-#long#####^*field\*#####the field required
.LM -30
.P 0
The ^*field\* argument to OSMH__VIO__GETFLD is a parameter from
LSL$CMNOSMH:OSMH__NEW.PAR.

.P 0
The routine must only be called for use with type 3 or 4 map headers and an
error message will be given if this is not the case. A valid call to
OSMH__VIO__GETFLD can be made when MH2DESC(2) is set to 3 or 4.

.P 0
For type 3, the field will be extracted using the position and size defined
in the OSTF section of the translation table. Similarly for type 4, the field
is extracted using the position and size defined in the CITF section of the
table.

.P 0
The extracted value is left in one of the common variables in
LSL$CMNOSMH:OSMH__NEW__MH.CMN depending on its type. This type is defined by the
<format> entry of the translation table.

.P 0
An extracted integer value will be left in the common variable MH__I__VALUE and
MH__DATATYPE will be set to OSMH__INTEGER.

.P 0
Extracted strings are left in the common variable MH__A__VALUE and MH__STRLEN
will contain the string length. MH__DATATYPE will be set to OSMH__STRING.

.P 0
The size of the field is left in variable MH__SIZE and its position within the
header is left in variable MH__POSN

.P 0
Use of OSMH__VIO__GETFLD must be preceded by a call to OSMH__VIO__INI. Error
messages will be output from this routine unless they are suppressed when
calling OSMH__VIO__INI.

.P 0
The values of ^*ok\* may be:
.blank
.LM +25
.I -25
OSMHLIB____BADCALL#######-#error
.I -25
OSMHLIB____ERRGETFLD#####-#error
.I -25
OSMHLIB____ERRRDCH#######-#error
.I -25
OSMHLIB____ERRRDINT######-#error
.I -25
OSMHLIB____NOSUCHFIELD###-#error
.LM -25

.page
.P 0
.HL 2 ^^^&Insert_ an_ integer_ field\&
.P 5
^*ok = OSMH__VIO__PUTINT( field, value )\*
.LM +30
.P -25
out#-#long#####^*ok\*########error return
.I -25
in##-#long#####^*field\*#####the field into which ^*value\* is to be inserted
.I -25
in##-#long#####^*value\*#####the value to be inserted
.LM -30
.P 0
The ^*field\* argument to OSMH__VIO__PUTINT is a parameter from
LSL$CMNOSMH:OSMH__NEW.PAR.
.P 0
This routine must only be called for use with type 3 or 4 map headers and an
error message will be given if this is not the case. A valid call to
OSMH__VIO__PUTINT can be made when MH2DESC(2) is set to 3 or 4.

.P 0
For type 3, ^*value\* will be inserted into the header at the position and
size of ^*field\* which are held in the OSTF section of the translation table.
Similarly for type 4, ^*value\* will be inserted into the header at the
position and size of ^*field\* which are held in the CITF section of the
table.

.P 0
If the value is too large, a warning message is given and it will be truncated
to fit.

.P 0
Use of OSMH__VIO__PUTINT must be preceded by a call to OSMH__VIO__INI. Error
messages will be output from this routine unless they are suppressed when
calling OSMH__VIO__INI.

.P 0
The values of ^*ok\* may be:
.blank
.LM +25
.I -25
OSMHLIB____INTSIZ########-#warning
.I -25
OSMHLIB____BADCALL#######-#error
.I -25
OSMHLIB____ERRPUTINT#####-#error
.I -25
OSMHLIB____FLDNOTINT#####-#error
.I -25
OSMHLIB____NOSUCHFIELD###-#error
.LM -25


.P 0
.HL 2 ^^^&Insert_ flag_ field\&
.P 5
^*ok = OSMH__VIO__PUTFLG( field )\*
.LM +30
.P -25
out#-#long#####^*ok\*########error return
.I -25
in##-#long#####^*field\*#####the field
.LM -30
.P 0
The ^*field\* argument to OSMH__VIO__PUTINT is a parameter from
LSL$CMNOSMH:OSMH__NEW.PAR.
.P 0
This routine must only be called for use with type 3 map headers and an
error message will be given if this is not the case. A valid call to
OSMH__VIO__PUTFLG can be made when MH2DESC(2) is set to 3.

.P 0
The flags required to define the type 3 map header block are -1 and -20.
Thus the only values of ^*field\* allowed are MH__ONE and MH__TWENTY otherwise
an error occurs.

.P 0
Use of OSMH__VIO__PUTFLG must be preceded by a call to OSMH__VIO__INI. Error
messages will be output from this routine unless they are suppressed when
calling OSMH__VIO__INI.

.P 0
The values of ^*ok\* may be:
.blank
.LM +25
.I -25
OSMHLIB____BADCALL#######-#error
.I -25
OSMHLIB____NOSUCHFIELD###-#error
.I -25
OSMHLIB____UNKFLG########-#error
.LM -25
