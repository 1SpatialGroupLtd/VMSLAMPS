.!*
.!* OSMH - Type 2 OS map header routines
.!*

.HL 1 ^^^&Introduction\&

.P 0
The header routines described in this chapter are designed to ease the
manipulation of VAX words to and from ICL words.
.P 0

.HL 1 ^^^&Use_ of_ OSMHLIB_ routines_ for_ type_ 2_ map_ headers\&

.P 0
Type 2 OS map headers are held in a common array, MHARR, which can be found in
LSL$CMNIFF:MHDMB.CMN. This array can hold 174 longwords and has many variables
equivalenced onto it for use in an application program.
MHARR also has 4 bytes for MHDESC, which is a byte array equivalenced onto the
beginning used to hold the header type and header length.
.P 0
A description of LSL$CMNIFF:MHDMB.CMN and the associated header variables can
be found in Appendix A.

.P 0
Type 2 headers can be accessed in application programs by including the
following:
.LM +30
.P -25
INCLUDE#'LSL$CMNIFF:MHDMB.CMN'
.LM -30

.P 0
The OSMHLIB routines are linked with application programs using:
.P 5
_$##link/map##program,sub1,sub2,etc,#_-
##################lsl$library:osmhlib/lib


.page
.HL 2 ^^^&Conversion_ to_ and_ from_ a_ binary_ date\&

.P 5
^*ok = OSMH__FROM__BINDAY( binday, day, month, year )\*
.LM +30
.P -25
out#-#logical##^*ok\*########success or failure of call
.I -25
in##-#word#####^*binday\*####the binary date to convert
.I -25
out#-#word#####^*day\*#######the day that results
.I -25
out#-#word#####^*month\*#####the month that results
.I -25
out#-#word#####^*year\*######the year that results
.LM -30
.P 0
The ICL binary date (days since 1900, where 1 Jan 1900 is day 1) is converted
into day,month,year. It returns TRUE if it succeeds, FALSE otherwise.
.P 5



^*ok = OSMH__TO__BINDAY( binday, day, month, year )\*
.LM +30
.P -25
out#-#logical##^*ok\*########success or failure of call
.I -25
in##-#word#####^*binday\*####the binary date that results
.I -25
out#-#word#####^*day\*#######the day to convert
.I -25
out#-#word#####^*month\*#####the month to convert
.I -25
out#-#word#####^*year\*######the year to convert
.LM -30
.P 0
Converts the date into the ICL form of binary date - ie days since 1900
(where 1 Jan 1900 counts as day 1, so it's really the number of days since
31 Dec 1899). Returns TRUE if all goes well, FALSE if it doesn't.
.P 5


.HL 2 ^^^&Extracting_ parts_ of_ ICL_ words_ into_ VAX_ words\&
.P 5
^*call OSMH__GETBITS( from, start, end, value )\*
.LM +30
.P -25
in##-#word#####^*from\*######the ICL source word to extract from
.I -25
in##-#word#####^*start\*#####the ICL start bit
.I -25
in##-#word#####^*end\*#######the ICL end bit
.I -25
out#-#word#####^*value\*#####the result of the extraction
.LM -30
.P 0
OSMH__GETBITS extracts bits ^*start\* to ^*end\* (in OS/ICL bit order) from
^*from\*, and returns them (appropriately shifted) in ^*value\*.
.P 0
Note that the relevant ICL machines number their bits with bit 0 as most
significant, in a 24 bit word - ie the relationship between ICL and VAX
bits is:
.P 0
.lt
 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
23 22 21 20 19 18 17 16 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0
.el
.P 0
This routine should not normally be called from application programs.
.P 5


^*call OSMH__GETCHAR( output, input, nchs )\*
.LM +30
.P -25
out#-#byte#####^*output(nchs)\*##the ASCII byte array
.I -25
in##-#word#####^*input(_*)\*######the packed input array
.I -25
in##-#word#####^*nchs\*##########the number of characters
.LM -30
.P 0
Takes an array of ICL characters in ^*input\*, and outputs them as ASCII
characters in ^*output\*. There are 4 6_-bit ICL characters in the bottom
24 bits of each 32_-bit VAX longword in ^*input\*, which is thus an array
of length (^*nchs\*+1)/4 longwords. ^*output\* is an array of ^*nchs\* bytes.
.P 5


^*call OSMH__GETHALVES( pair, half1, half2 )\*
.LM +30
.P -25
in##-#word#####^*pair\*######what to extract from
.I -25
out#-#word#####^*half1\*#####first half of result
.I -25
out#-#word#####^*half2\*#####second half of result
.LM -30
.P 0
Extracts the two values (^*half1\*, ^*half2\*) from ^*pair\*.
.P 5


^*call OSMH__GETMY( from, month, year )\*
.LM +30
.P -25
in##-#word#####^*from\*######what to extract from
.I -25
out#-#word#####^*month\*#####the month that results
.I -25
out#-#word#####^*year\*######the year that results
.LM -30
.P 0
Extracts the ^*month\* and ^*year\* from ^*from\*.
.P 5



.HL 2 ^^^&Inserting_ parts_ of_ VAX_ words_ into_ ICL_ words\&
.P 5
^*call OSMH__PUTBITS( to, start, end, value )\*
.LM +30
.P -25
out#-#word#####^*to\*########the word to insert into
.I -25
in##-#word#####^*start\*#####the ICL start bit
.I -25
in##-#word#####^*end\*#######the ICL end bit
.I -25
in##-#word#####^*value\*#####the value to insert
.LM -30
.P 0
OSMH__PUTBITS inserts ^*value\* into bits ^*start\* to ^*end\* (in OS/ICL bit
order) of ^*to\*.
.P 0
Note that the relevant ICL machines number their bits with bit 0 as most
significant, in a 24 bit word - ie the relationship between ICL and VAX
bits is:
.P 0
.lt
 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
23 22 21 20 19 18 17 16 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0
.el
.P 0
This routine should not normally be called from application programs.
.P 5



^*call OSMH__PUTCHAR( input, output, nchs )\*
.LM +30
.P -25
in##-#byte#####^*input(nchs)\*###the ASCII byte array
.I -25
out#-#word#####^*output(_*)\*#####the packed output array
.I -25
in##-#word#####^*nchs\*##########the number of characters
.LM -30
.P 0
OSMH__PUTCHAR takes an array of ASCII characters in ^*input\*, and place them
into ^*output\* as ICL characters. 
We insert 4 6_-bit ICL characters into the bottom 24 bits of each 32_-bit VAX
longword. Thus ^*output\* must be an array of (^*nchs\*+1)/4 longwords.
^*input\* is an array of ^*nchs\* bytes.
.P 5



^*call OSMH__PUTHALVES( pair, half1, half2 )\*
.LM +30
.P -25
out#-#word#####^*pair\*######the result
.I -25
in##-#word#####^*half1\*#####first half to insert
.I -25
in##-#word#####^*half2\*#####second half to insert
.LM -30
.P 0
Inserts the two values (^*half1\*, ^*half2\*) into ^*pair\*.
.P 5


.TP 5
^*call OSMH__PUTMY( result, month, year )\*
.LM +30
.P -25
out#-#word#####^*result\*####the result
.I -25
in##-#word#####^*month\*#####the month to insert
.I -25
in##-#word#####^*year\*######the year to insert
.LM -30
.P 0
Inserts the ^*month\* and ^*year\* into ^*result\*.
.P 5



.HL 2 ^^^&Check_ if_ Contractor_ ID_ is_ zero\&
.P 5
^*ok = OSMH__CID__ZERO(id__icl)\*
.LM +30
.P -25
out#-#logical##^*ok\*########success or failure of call
.I -25
in##-#long#####^*id__icl\*####contractors ID (ICL chars)
.LM -30
.P 0
Given an ICL character string representing the contractors 
identity, check for zero codes. The ID consists of a primary 
code and a secondary code, each of which consists of 2 
characters (numeric or alphabetic). Blanks count as zero.
.P 5



.HL 2 ^^^&Upgrade_ map_ header\&
.P 5
^*ok = OSMH__UPGRADE()\*
.LM +30
.P -25
out#-#logical##^*ok\*########success or failure of call
.LM -30
.P 0
This routine upgrades a type 2 map header from the old format by transferring
things to new fields. If the new field is empty, we assume we have an old
format header, and transfer things from the appropriate places. Then clear the
old field, to ensure that it doesn't get transferred again (e.g. if after
updating, the new field is then cleared by OSMHED).
.P 5
