.!*
.!* /EXPC/ - the output common block
.!*
.ENTRY /EXPC/ > see EXPC
.ENTRY EXPC > see also Common blocks

.INDEX ^^EXPC output common block

.HL 1 ^^^&Introduction\&
.INDEX ^^Common blocks> EXPC
.INDEX ^^EXPC output common block> introduction

.P 0
This chapter describes the text output common block

.HL 1 ^^^&/EXPC/_ -_ the_ output_ common_ block\&

.P 0
Those LSLLIB routines that perform output, or encode data, use the 
output common block by default. This common block is defined in Fortran 
in

.P 10
.INDEX ^^EXPC output common block> FORTRAN definition
LSL$CMNLSL:EXPC.CMN

.P 0
and in Macro in

.P 10
.INDEX ^^EXPC output common block> MACRO definition
LSL$CMNLSL:EXPC.MAR

.P 0
The common block contains the following:

.INDEX ^^EXPC output common block> contents

.LM +10
.P -10
public##-#long#parameter#^*MAX__EXPMAX\*
.BR
the maximum length of EXPBUF (ignoring the extra byte), thus the maximum value
to which EXPMAX may be set. This is currently 1024, which is the maximum
buffer size that the DCL routines will write. 

.P -10
public##-#long#parameter#^*DEF__EXPMAX\*
.BR
the default length of EXPBUF (ignoring the extra byte), thus the default value
to which EXPMAX is set. This is currently 255.

.P -10
public##-#word####^*EXPLEN\*
.BR
the number of characters placed in ^*EXPBUF\* so far 

.P -10
public##-#word####^*EXPMAX\*
.BR
the maximum number of characters which may be inserted into ^*EXPBUF\*. This is
set to DEF__EXPMAX by LSL__INIT, and may be changed using the routine 
SET__EXPMAX. 

.P -10
private#-#word####^*EXPCTF\*
.BR
holds control flags for EXPAND and APPEND.

.P -10
public##-#byte####^*EXPBUF(MAX__EXPMAX+1)\*
.BR
the buffer in which the expanded characters are stored. Note that it is always
one byte longer than expected from the value in ^*EXPMAX\*. This is to allow a
null (zero) byte to be added to the end of any string in EXPBUF. Byte strings
produced by EXPAND/APPEND are normally terminated by a zero byte. 

.P -10
public##-#alias###^*EXPDSC\*
.BR
equivalenced onto the common block to produce
a fake string. It is made up of ^*EXPLEN\*,^*EXPTYP\*,^*EXPCLA\* and
^*EXPPTR\*. For further explanation, see the section on "Fake strings" in
Chapter 1.

.P -10
private#-#long####^*EXPPTR\*
.BR
the address of ^*EXPBUF\*. This is set by LSL__INIT

.P -10
private#-#byte####^*EXPTYP\*, ^*EXPCLA\*
.BR
the type and class fields of ^*EXPDSC\*. These are initially zero, and should
be left so.

.LM -10


.HL 2 ^^^&Manipulating_ the_ size_ of_ EXPBUF\&

.INDEX ^^EXPC output common block> extending EXPBUF
.INDEX ^^SET__EXPMAX

.P 5
^*call SET__EXPMAX( [length] )\*

.INDEX ^^SET__EXPMAX

.LM +30
.P -25
in##-#word#####^*length\*####the new length for EXPBUF
.LM -30

.P 0
SET__EXPMAX will change the value of EXPMAX, and hence the size of EXPBUF, to 
the given ^*length\*. Note that EXPAND and APPEND will write a null byte
after the last character output to EXPBUF, and may thus write to the
^*length\*+1th byte.

.P 0
If ^*length\* is omitted, then EXPMAX is set back to the 
default value of DEF__EXPMAX. If ^*length\* is less than 1, or greater than 
MAX__EXPMAX, then the call is ignored.

.INDEX ^^EXPC output common block> saving EXPMAX
.INDEX ^^SAVE__EXPMAX

.P 5
^*call SAVE__EXPMAX( length )\*

.INDEX ^^SAVE__EXPMAX

.LM +30
.P -25
out#-#word#####^*length\*####the current length of EXPBUF
.LM -30

.P 0
SAVE__EXPMAX returns the current value of EXPMAX, and hence the current size of
EXPBUF, in ^*length\*. 



.HL 2 ^^^&Saving_ and_ restoring_ EXPBUF_ and_ EXPLEN\&
.INDEX ^^EXPC output common block> saving and restoring EXPBUF and EXPLEN
.INDEX ^^EXPC output common block> saving EXPBUF

.P 5
^*call SAVE__EXPC( buffer, bufptr, bufmax )\*

.INDEX ^^SAVE__EXPC

.LM +30
.P -25
out#-#byte####^*buffer\*#####the buffer to save EXPBUF in
.I -25
out#-#word####^*bufptr\*#####how many characters were saved
.I -25
in##-#word####^*bufmax\*#####maximum number of characters to save
.LM -30

.P 0
SAVE__EXPC saves the contents of EXPBUF in ^*buffer\*, and EXPLEN in 
^*bufptr\*. The number of characters actually saved will be the minimum of 
EXPLEN and ^*bufmax\*.

.P 0
It is assumed that ^*buffer\* is at least ^*bufmax\* bytes long.

.INDEX ^^EXPC output common block> restoring EXPBUF
.P 5
^*call RESTORE__EXPC( buffer, bufptr, bufmax )\*

.INDEX ^^RESTORE__EXPC

.LM +30
.P -25
in##-#byte####^*buffer\*#####the buffer to copy into EXPBUF
.I -25
in##-#word####^*bufptr\*#####how many characters to copy in
.I -25
in##-#word####^*bufmax\*#####maximum number of characters to copy
.LM -30

.P 0
RESTORE__EXPC is used to restore the contents of EXPLEN and EXPBUF. The number 
of characters copied from ^*buffer\* into EXPBUF is the minimum of ^*bufptr\* 
and EXPMAX, and EXPLEN is set to ^*bufptr\* regardless.

.P 0
It is assumed that ^*buffer\* is at least ^*bufmax\* bytes long.
