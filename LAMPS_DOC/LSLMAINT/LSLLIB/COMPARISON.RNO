.!*
.!* APPENDIX - How to upgrade from VIOLIB/CMDLIB
.!*

.INDEX ^^VIOLIB
.INDEX ^^CMDLIB
.INDEX ^^Differences_ from_ VIOLIB/CMDLIB
.HL 1 ^^^&Introduction\&

.P 0
LSLLIB is intended to replace both VIOLIB and CMDLIB, and is essentially the
result of merging the two libraries and then producing a VAX style library,
rather than a rather ad-hoc RSX style library. 

.P 0
This appendix attempts to describe the differences between VIOLIB/CMDLIB and 
LSLLIB, and is thus intended as a guide in both updating programs to use the 
newer library, and in deciding what routine to use in the first place.

.P 0
The document includes:

.LIST "*"
.LE; a general discussion of major differences between the libraries
.LE; a note on changes from CMDLIB routines, including details for each of the 
number reading routines
.LE; a routine by routine discussion of VIOLIB, with notes on what to 
use from LSLLIB instead
.LE; a discussion of the changes to common blocks
.LE; some general notes on other changes
.END LIST

.P 0
It does not discuss things that are ^&new\& in LSLLIB - see the rest of the
LSLLIB reference manual for these! 

.PAGE
.HL 1 ^^^&Major_ differences\&

.LIST "*"
.LE; Before using LSLLIB, a call must be made to the LSL__INIT routine. This 
sets up various things, including the link to the LSLLIB error messages. Every
call of EXPAND makes a simple check that LSL__INIT has been called. 
.LE; System style error handling has been introduced, and is intended to be 
used in all future LSL programs.
.LE; Most routines are now functions returning LSL____ error codes, rather 
than positive/negative values. Specifically, end-of-file is no longer 
signalled by returning -10.
.LE; Command line handling is provided to allow VAX style line processing 
(using system supplied routines) to be performed. The old routines TXTCML and
TXTCLI have been withdrawn. 
.LE; TXTBUF and EXPBUF are increased to a maximum of 1024 meaningful characters
in length (the maximum that DCL is likely to handle), and parameters are set up
for the maximum length of these buffers. EXPMAX and TXTLIM now default to 255
characters initially, instead of 80, and new routines are provided to change
them - it is not envisaged that users will alter them explicitly (in the same
way that they don't normally touch DCPTR explicitly). 
.LE; Anything that was included purely for compatibility with LIOLIB or RSX 
has been removed (note that WFLOR has been retained, as being genuinely 
useful).
.LE; All common blocks, and all internal routines (those which are globally 
defined, but are not described in the LSLLIB reference manual) have names that 
start with the characters "LSL__"
.END LIST

.HL 1 ^^^&CMDLIB_ -_ comments\&

.P 0
The changes in placing CMDLIB into LSLLIB are fairly minor.

.LIST "*"
.LE; The command reading and and manipulating routines are basically the same,
except that they now reference different common blocks.
.LE; The routine CMDERR has been replaced by LSL__CMDERR, which takes no
arguments.
.LE; The number reading routines (which superceded the previous VIOLIB 
versions) now have extended functionality in some cases, and they also 
reference different common blocks. Changes in number syntax are :-
.LIST 
.DISPLAY ELEMENTS RL,")"
.LE; the "_&" character is no longer supported as a 'power of 10' notation - 
this was only retained in VIOLIB for compatibility with PDP-11 libraries.
.LE; all of the integer reading routines now accept numbers to different 
bases, through the use of ^B, ^O, ^D, or ^X as prefixes - previously RDLONG 
was the only routine which supported this.
.END LIST
Changes in the routine specifications are :-
.LIST 
.DISPLAY ELEMENTS RL,")"
.LE; the real number reading routines do not now allow the second optional 
"had-dot" argument.
.LE; RDLONG does not now allow a default base as an optional second argument.
.END LIST
.END LIST

.P 0
For changes in common blocks, see below.

.P 0
See the relevant chapter in the main body of the LSLLIB Reference Manual for
full details of number reading routines. 

.HL 1 ^^^&VIOLIB_ -_ comments_ by_ routine\&

.P 0
This section itemises each VIOLIB routine, and how the corresponding LSLLIB
routine differs.

.LM +15
.P -15
APPEND#########see EXPAND
.P -15
BSCH###########no change
.P -15
BSLN###########no change
.P -15
CMLTIT#########withdrawn - use the new DCL command line routines to fetch and 
process the initial (foreign) command line
.P -15
CMLTWO#########see CMLTIT
.P -15
DCPSAV#########no change
.P -15
DCPSET#########no change
.P -15
DEFGBLSYM######withdrawn - use the appropriate LIB$ routine
.P -15
DEFLOCSYM######withdrawn - use the appropriate LIB$ routine
.P -15
EDIV###########withdrawn
.P -15
ERRFLN#########withdrawn - use LSL__PUTMSG or LSL__ADDMSG
.P -15
EXPFLN#########routine is the same, but filenames are now V4 syntax, and the
common blocks are different 
.P -15
EXPAND#########(1) the default integer size is now longword (%_^L), rather than
word (%_^W), as the VAX default integer is longword 
.BR; (2) the default length for string output (%S,%A) is now 255, rather 
than 72
.BR; (3) the 'power of 10' indicator '_&' is withdrawn - use 'E' or 'e'
.BR; (4) vertical format controls, which are not supported on the VAX, have 
been withdrawn
.BR; (5) the maximum length of EXPBUF has been increased - see EXPC below
.P -15
FILEIO#########the routines have been changed to return LSL____ error codes,
and FLRSTR has a new argument to allow it to return the length of the string
read. Various new routines have been added.
.P -15
FILE__PARSE#####this now recognises VMS version 4 filename syntax
(including#;-0#!) 
.P -15
FLTERR#########withdrawn - use LSL__PUTMSG or LSL__ADDMSG
.P -15
GEN__SYSMSG####withdrawn - use LSL__PUTMSG or LSL__ADDMSG
.P -15
GETCLI#########withdrawn - use the LSL DCL routines to get and process the
command line 
.P -15
HAVE__I__AN__ARG#no change
.P -15
ICL#tape#routines#are withdrawn from LSLLIB - specialist tape routines should 
eventually be collected in a separate library
.P -15
JPINFO#########no change
.P -15
LTH############withdrawn - Laseraid help facilities are not kept in LSLLIB
.P -15
Magtape#routines#- the low level magtape routines (MTIV and MTOV) have been
enhanced to return LSL____ error codes, and to maintain internal variables in a
more sensible manner
.P -15
RDCH###########no change
.P -15
RDCHS##########no change
.P -15
RDDBLE#########see CMDLIB changes
.P -15
RDFILN#########this routine is now called PARFILN (parse file name), and
returns LSL____ error codes 
.P -15
RDFILT#########withdrawn - use GETFILNAM
.P -15
RDHEX##########see CMDLIB changes
.P -15
RDINT##########see CMDLIB changes
.P -15
RDLHEX#########see CMDLIB changes
.P -15
RDLOCT#########see CMDLIB changes
.P -15
RDLONG#########see CMDLIB changes
.P -15
RDOCT##########see CMDLIB changes
.P -15
RDREAL#########see CMDLIB changes
.P -15
RDSWCH#########withdrawn - use the LSL DCL routines to handle command line
switches 
.P -15
RDSWVI#########as for RDSWCH
.P -15
RDSWVR#########as for RDSWCH
.P -15
RREAL8#########see CMDLIB changes
.P -15
SUBQUAD########withdrawn
.P -15
Tek#drawing#routines##(TX...) are not included in LSLLIB
.P -15
TMRINI#########now called LSL__TMRINI, and called automatically by LSL__INIT 
.P -15
TTATT##########withdrawn
.P -15
TTATC##########withdrawn
.P -15
TTDET##########withdrawn
.P -15
TTRLIN#########returns LSL____ error code (thus not number of characters read)
.P -15
TTRSTR#########returns LSL____ error codes now (thus not number of characters
read); has a new argument to return length of string read 
.P -15
TTWLIN#########returns LSL___ error codes now
.P -15
TTWSTR#########returns LSL___ error codes now
.P -15
Unsolicited#input#routines are superseded by various system functions, 
and are not included in LSLLIB
.P -15
VAXRSX#########the following 'RSX mimics' have been withdrawn -
.BR; ALTPRI, AZTOAD, CLREF, DSASTR, ENASTR, READEF, SETEF, WAITFR
.P -15
VIO$1ST########no change
.P -15
VIO$xxxx__SEC###the mapped section routines are identical to the VIOLIB versions
.P -15
VIO$GET__INPUT##no change
.P -15
VIO$GNA########no change
.P -15
VIO$PUT__OUTPUT#no change
.P -15
VIOCLR#########no change
.P -15
VIOMV3#########no change
.P -15
VT52#drawing#routines##(VT...) are not included in LSLLIB
.P -15
WAIT###########no change
.P -15
WFLOR##########no change
.P -15
WRITAP#########no change, except that the only alias supplied is WRTAPP
.P -15
WRITEF#########no change, except that there are no aliases for this routine
.LM -15

.HL 1 ^^^&Common_ blocks\&
.P 0
The following is a list of VIOLIB/CMDLIB common block filenames, and notes on
their corresponding LSLLIB files (which all live in LSL$CMNLSL:) 

.LIST "*"
.LE; EXPC### EXPC - but note that the length of EXPBUF is vastly increased, 
and the default length is not the same. Routines are provided to change and
save EXPMAX and to save and restore TXTBUF/TXTPTR. 
.LE; TXTC######TXTC - but note that the length of TXTBUF is vastly increased, 
and the default length is not the same. Routines are provided to change and
save TXTLIM and to save and restore EXPBUF/EXPLEN. 
.LE; CMDCOM####CMDCOM - but note that the variables ERRNUM and RDCOMM__EXCP
have been replaced by variables ERRNUM and LSL__EXCP in common file EXCEPTION,
and the parameters defining error numbers are replaced by LSL____ error codes
.LE; MTIVCM####MTIVCM - all variables are now longwords
.LE; MTOVCM####MTOVCM - all variables are now longwords
.LE; RDFILN####FILENAME - lengths of fields is greater (to fit version 4)
.END LIST

.P 0
EXPC, TXTC, and CMDCOM all retain their macro definitions, as well,
with the same caveats as above. 

.HL 1 ^^^&Specific_ routines\&

.HL 2 ^^^&Comparison_ of_ GETFILNAM_ with_ RDFILT\&
.P 0
The main differences are:

.LIST "o"
.LE; GETFILNAM is able to cope with a full VMS version 4 filename, whereas 
RDFILT would only cope with version 3 and below (new versions of VIOLIB
may improve their file parsing).

.LE; GETFILNAM reads the filename as a string, and then 
parses it, whereas RDFILT read the filename as it parsed it.

.P 0
Thus GETFILNAM parses a filename after reading it from the line, whilst RDFILT 
parsed the filename as it read it from the line. It is conceivable that this 
could produce different results from the two routines, but only in 
pathological cases.

.END LIST

.HL 2 ^^^&Using_ READSTR_ instead_ of_ RDSTR\&

.P 0
It is possible to produce the effects of using the RDSTR function with 
READSTR. The equivalent calls are as follows:

.LIST "o"

.LE; length = RDSTR(string_,char), or RDSTR(string_,char_,.TRUE_.)

.P 0
Terminate a string on a particular character, with double that character
inserting it once - use a call of

.P 10
length = READSTR( string, char, ON__CHAR2, .FALSE. )

.LE; length = RDSTR(string_,char_,.FALSE_.)

.P 0
Terminate a string as soon as a particular character is found - use a call of

.P 10
length = READSTR( string, char, ON__CHAR, .FALSE. )

.LE; length = RDSTR(string_,0)

.P 0
Terminate a string as if it were a CMDLIB command - use a call of

.P 10
length = READSTR( string, 0, ON__CMD, .TRUE. )

.LE; length = RDSTR(string_,' ')

.P 0
Terminate a string at the first space or tab - use a call of

.P 10
length = READSTR( string, 0, ON__SPACE, .TRUE. )

.LE; RDSTR(string_,-1)

.P 0
Terminate a string at the end of the line - use a call of

.P 10
length = READSTR( string, 0, ON__EOL, .TRUE. )

.END LIST
