.!*
.!* /EXCEPTION/ - exception handling
.!*
.ENTRY /EXCEPTION/ > see EXCEPTION
.ENTRY EXCEPTION > see also Exception handling
.ENTRY EXCEPTION > see also Common blocks
.ENTRY /STATUS/ > see STATUS
.ENTRY STATUS > see also Common blocks

.INDEX ^^EXCEPTION> errors and exceptions
.INDEX ^^Exception handling routines
.INDEX ^^Exception handling routines> introduction
.HL 1 ^^^&Introduction\&

.INDEX ^^Common blocks> EXCEPTION
.P 0
The /EXCEPTION/ common block is used to report errors that occur whilst 
reading things from the current input buffer - via the number and command 
reading routines, which do not explicitly return an error themselves.

.INDEX ^^Common blocks> STATUS
.INDEX STATUS

.P 0
The /STATUS/ common block is used to provide a default exit status - see 
below.

.INDEX ^^Exception handling routines> common block
.INDEX ^^Common blocks> EXCEPTION

.HL 1 ^^^&The_ exception_ common_ block\&

.P 0
The exception handling common block is in LSL$CMNLSL:EXCEPTION.CMN, and 
contains:

.LM +10
.P -10
public##-#long####^*ERRNUM\*
.BR
The LSL error code for the latest error is placed here. If no error has 
occurred, then it is set to LSL____NORMAL. Note that all operations which 
might produce an error will unset ERRNUM before doing anything which might 
cause an error

.P -10
public##-#long####^*LSL__EXCP\*
.BR
If a numeric exception occurs, then the error code LSL__HADEXCP is placed into
ERRNUM, and a code specifying the error is placed here.

.LM -10

.INDEX ^^Exception handling routines> numeric errors
.HL 1 ^^^&Numeric_ errors\&

.INDEX ^^Exception handling routines> numeric errors> condition handler
.HL 2 ^^^&The_ condition_ handler\&

.INDEX ^^LIB$ESTABLISH> use in LSLLIB
.P 0
Numeric exceptions are detected by the condition handler LSL__NUM__CHAND. This 
is declared as an exception handler (using LIB$ESTABLISH) at the start of each 
number reading routine. If a numeric exception occurs, then it sets ERRNUM to 
LSL__HADEXCP, and LSL__EXCP to an appropriate error.

.P 0
Note that the exception handler is only declared within the number reading 
routines, so will not detect numeric exceptions in the calling program. 
However, if the user wishes, they may establish LSL__NUM__CHAND themselves.

.P 0
The following conditions are handled by LSL__NUM__CHAND (and reduced in 
severity to informational, so that the program continues without complaint):

.LM +5
.LITERAL

SS$__FLTDIV, SS$__FLTDIV__F, SS$__FLTOVF, SS$__FLTOVF__F,
SS$__FLTUND, SS$__FLTUND__F, SS$__INTDIV, SS$__INTOVF
.END LITERAL
.LM -5

.P 0
For a list of the error codes returned in LSL__EXCP, see the list of errors 
whilst reading numbers, below.

.P 0
For more details on reading numbers, see the relevant chapter.

.INDEX ^^Exception handling routines> numeric errors> exceptions reading numbers

.HL 2 ^^^&Errors_ whilst_ reading_ numbers\&

.P 0
The variable ERRNUM in /EXCEPTION/ is set by the number reading routines.
The following values may be found:

.LM +18

.P -18
LSL____NORMAL#####-#success-#number read successfully

.I -18
LSL____BASECH#####-#failure#-#unrecognised base character (integers only), the 
"_^" signifying change of base for an integer was found, but the character 
after it was not one of the allowed ones. The unrecognised character is unread, 
and will be read by the next RDCH 

.I -18
LSL____UNEXPEOL###-#failure#-#the end of the line (or input buffer) was found 
before starting to read the numeric part of a number 

.I -18
LSL____NONUM######-#failure#-#there was no number to read - a non-numeric 
character was found when a number was expected. The unexpected character is 
unread 

.I -18
LSL____HADEXCP####-#failure#-#a numeric exception occurred whilst reading the 
number - a more precise definition of the error is in LSL__EXCP, which may 
have one of the values:

.LM +18
.P-18; LSL____NORMAL#####-#no error in reading the last number
.I-18; LSL____FLTDIV#####-#floating divide by zero, reading a number of the form
a/b
.I-18; LSL____FLTOVF#####-#floating overflow
.I-18; LSL____FLTUND#####-#floating underflow
.I-18; LSL____INTDIV#####-#integer divide by zero
.I-18; LSL____INTOVF#####-#integer overflow
.LM -18

.LM -18


.HL 1 ^^^&Errors_ whilst_ reading_ commands\&

.INDEX ^^Exception handling routines> errors reading commands

.P 0
The command reading routine RDCOMM also uses ERRNUM to return errors. Note 
that, since it can read numeric arguments, all of the numeric error codes may 
be found, for the same reasons.

.INDEX ^^RDCOMM
.INDEX ^^Common blocks> CMDCOM
.INDEX ^^LSL__PUTMSG
.P 0
By default, RDCOMM will produce its own error messages for each of the errors 
using LSL__PUTMSG of the appropriate error code - this may be disabled by
setting /CMDCOM/NOMESS to be true. There is also a routine LSL__CMDERR which
will output an appropriate error message for the following errors.

.P 0
For more details on command reading and command error reporting, see Chapter 15.

.P 0
The following values may be placed in ERRNUM by RDCOMM :

.LM +18

.P -18
LSL____NORMAL#####-#success#-#command read successfully

.P -18
LSL____UNEXPEOL###-#failure#-#the end of the line (or input buffer) was found 
before starting to read the command, or whilst looking for compulsory arguments 

.P -18
LSL____UNEXPCH####-#failure#-#an unexpected character was found whilst 
attempting to read a command name. The character is placed in /CMDCOM/UNXCHR, 
and the character ^&after\& it will be read by the next call of RDCH

.P -18
LSL____UNEXPCMD###-#failure#-#an unexpected (ie unrecognised) primary command 
name was found - one that is not in the primary command table. The string read 
is held in the descriptor /CMDCOM/CMDNST

.P -18
LSL____UNEXPCMD2##-#failure#-#an unexpected (ie unrecognised) secondary command 
name was found - one that is not in the secondary command table. The string 
read is held in the descriptor /CMDCOM/SECNST

.P -18
LSL____AMBIG######-#failure#-#the primary command name given is ambiguous. A 
descriptor for the command name read is in /CMDCOM/CMDNST, and descriptors for 
(a sample of) the names in the table evincing the ambiguity are in CMDFST and 
CMDAST (not necessarily in alphabetical order)

.P -18
LSL____AMBIG2#####-#failure#-#the secondary command name given is ambiguous. A 
descriptor for the command name read is in /CMDCOM/SECNST, and descriptors for 
(a sample of) the names in the table evincing the ambiguity are in CMSFST and 
CMDAST (not necessarily in alphabetical order)

.P -18
LSL____BADINEQ####-#failure#-#a bad Fortran style inequality name was found.
A descriptor for the inequality name read is in /INEQUAL/INEQ_NAME.

.P -18
LSL____AMBINEQ####-#failure#-#ambiguous Fortran style inequality name was
found. A descriptor for the inequality name read is in /INEQUAL/INEQ_NAME, and
descriptors for (a sample of) the names in the table evincing the ambiguity are
in CMDFST and CMDAST (not necessarily in alphabetical order) 

.LM -18


.HL 1 ^^^&The_ STATUS_ common_ block\&
.INDEX ^^Exception handling routines> STATUS common block
.INDEX ^^Common blocks> STATUS
.P 0
This is held in LSL$CMNLSL:STATUS.CMN, and contains the following:

.INDEX ^^Common blocks> STATUS> LSL_QUIET
.LM +10
.P -10
public##-#long##parameter##^*LSL__QUIET\*
.BR
This is set to the value '10000000'X, and is the value that must be OR'ed with 
a $STATUS value to stop the system printing the appropriate message when 
$STATUS is set.

.P -10
public##-#long####^*LSL__STATUS\*
.BR
This is initially set to LSL____NORMAL_.OR_.LSL__QUIET by LSL__INIT, and is
then altered by LSL__PUTMSG or LSL__SIGNAL to the value that they have been
passed (again, OR'ed with LSL__QUIET). This value is then used by LSL__EXIT
in determining how to set the return code ($STATUS) for the program.

.LM -10

.P 0
For instance, if a program calls

.INDEX ^^LSL__PUTMSG
.P 5
CALL LSL__PUTMSG( LSL____EOF )

.INDEX ^^Common blocks> STATUS> LSL__STATUS
.P 0
to output the "End of file" message, then LSL__STATUS will be set to

.P 5
LSL____EOF_.OR_.LSL__QUIET

.P 0
.INDEX ^^LSL__EXIT
.INDEX ^^FORTRAN EXIT call

The program could then exit with the call

.P 5
CALL LSL__EXIT

.P 0
which would set $STATUS to SS$_ABORT with the same severity as LSL____EOF
(and with the QUIET bit set, so that the 
system does not give a message as the program exits). A command file running 
the program could then check for this status value.

.P 0
Although it is not standard LSL practice, it might also be required to output
the LSL message itself to $STATUS, and in that case the program would exit
with

.P 5
CALL EXIT( LSL__STATUS )
