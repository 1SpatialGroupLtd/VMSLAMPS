.!*
.!* Sorting routines
.!*

.INDEX ^^Sort routines
.HL 1 ^^^&Introduction\&
.INDEX ^^Sort routines> introduction

.P 0
.INDEX ^^Sort routines> data types
These routines are designed for sorting non-specific forms of data. That is, 
the user supplies the routines that actually compare and move elements of 
the data. The sort routine can then just call these as appropriate, without 
needing to know the actual form of the data.

.HL 2 ^^^&Routines_ supplied_ by_ the_ user\&

.INDEX ^^Sort routines> routines supplied by user

.P 0
All three of the sort routines require that the user supply a comparison 
routine, which is defined as follows:

.P 5
^*ret = CF( table, index1, index2 )\*

.INDEX ^^Sort routines> CF

.INDEX ^^CF

.LM +30
.P -25
out#-#long#####^*ret\*#######the result of the comparison - see below
.I -25
i/o#-##########^*table\*#####the array to be sorted. This is passed through 
from the sort routine, and must be declared as the relevant type
.I -25
#in#-#long#####^*index1\*####the number of the first element to be compared
.I -25
#in#-#long#####^*index2\*####the number of the second element to be compared
.LM -30

.P 0
^*cf\* then compares the two elements, and returns the following values:

.LM +10
.P -5
-1###if  element ^*index1\* _< element ^*index2\*
.I -5
#0###if  element ^*index1\* _= element ^*index2\*
.I -5
#1###if  element ^*index1\* _> element ^*index2\*
.LM -10

.INDEX ^^Sort routines> quicksort
.INDEX ^^Sort routines> Shell's sort


.P 0
Quicksort and Shell's sort also require a routine to swap two elements of the
input array, ^*table\*. This is defined as: 

.P 5
^*call SWAP( table, index1, index2 )\*
.INDEX ^^SWAP

.INDEX ^^Sort routines> SWAP
.P 0
where the arguments are as for ^*cf\*, but the two elements are swapped rather 
than compared.

.P 0
Heapsort requires a routine to copy an element of the array to be sorted,
^*table\*, from somewhere to somewhere else. This is defined as:

.P 5
^*call COPY( table1, index1, table2, index2 )\*

.LM +30
.P -25
#in#-##########^*table1\*####the 'array' to take the element from. This is
passed through from the sort routine, and must be declared as the relevant
type 
.I -25
#in#-#long#####^*index1\*####the number of the element to be taken from
^*array1\*
.I -25
out#-##########^*table2\*####the 'array' to move the element to. This is
passed through from the sort routine, and must be declared as the relevant
type 
.I -25
#in#-#long#####^*index2\*####the number of the element to be overwritten in
^*array2\*
.LM -30

.P 0
.INDEX ^^Sort routines> HEAP__SORT
.INDEX ^^HEAP__SORT
The routine is used in the following ways (where ^*store\* is described in the 
definition of HEAP__SORT):

.LIST " "
.LE; ^*call COPY( table, index1, table, index2 )\*
.INDEX ^^Sort routines> COPY
.INDEX ^^COPY
.P 0
to move the element in position ^*index1\* in ^*table\* to position ^*index2\*
in ^*table\*
.LE; ^*call COPY( table, index1, store, 1 )\*
.P 0
to store the element of ^*table\* at position ^*index1\* in the workspace 
variable ^*store\*
.LE; ^*call COPY( store, 1, table, index2 )\*
.P 0
to recover an element from ^*store\* and place it in position ^*index2\* of
^*table\* 
.END LIST



.HL 1 ^^^&Quick_ sort\&    
.INDEX ^^Sort routines> QUICK__SORT
.INDEX ^^Hoare method, see sort routines
.INDEX ^^Sort routines> Hoare method
.INDEX ^^Sort routines> partition exchange

.P 0
Quicksort - otherwise known as partition exchange, or Hoare's method

.P 5
^*call QUICK__SORT( table, count, cf, swap, stack )\*
.INDEX ^^QUICK__SORT

.LM +31
.P -26
i/o#-##########^*table\*######the array to be sorted
.I -26
#in#-#long#####^*count\*######the number of elements in ^*table\*
.I -26
#in#-#external#^*cf\*#########longword function to compare two elements of
^*table\*
.I -26
#in#-#external#^*swap\*#######routine to swap two elements of ^*table\*
.I -26
####-#long#####^*stack\*######array to use as workspace
.LM -31

.P 0
The data to be sorted is held in the array ^*table^*, and there are ^*count\*
elements in that array.

.P 0
The longword function ^*cf\* and the routine ^*swap\* must be provided by the
user, and they are described above.

.P 0
^*stack\* is a stack or workspace supplied by the calling routine, and must be 
of length 2_*log2(^*count\*), in order to prevent overflow.

.! ***************************************************************************

.P 0
For an explanation and discussion of Quicksort (CA Hoare's method),
see
.INDEX ^^Sort routines> bibliography

.P 5
Knuth - The Art of Computer Programming,  vol 3, p114 sqq
.I 5
Wirth - Algorithms + Data Structures = Programs, p76  sqq

.P 0
Comments on quicksort:
.INDEX ^^Sort routines> quicksort> comments
.INDEX ^^quicksort> comments
.BLANK
.LIST 0,"*"
.LE; the average running time is very good, but the worst case is very bad!
.LE; it needs a stack of size##   longword( 2,log2(^*count\*) )
.LE; equal keys will be swapped
.END LIST

.P 0
Also note that this version doesn't do a straight insertion sort for
(sufficiently) small partitions - instead it just Quicksorts all the way down.


.HL 1 ^^^&Heap_ sort\&
.INDEX ^^Sort routines> HEAP__SORT
.INDEX ^^HEAP__SORT

.P 5
^*call HEAP__SORT( table, count, cf, copy, store )\*

.LM +31
.P -26
i/o#-##########^*table\*######the array to be sorted.
.I -26
#in#-#long#####^*count\*######the number of elements in ^*table\*
.I -26
#in#-#external#^*cf\*#########longword function to compare two elements of
^*table\*
.I -26
#in#-#external#^*copy\*#######routine to copy an element of ^*table\* 
elsewhere
.I -26
####-##########^*store\*######this is used to hold a single element of
^*table\*, and should be declared appropriately
.LM -31

.P 0
The data to be sorted is held in the array ^*table\*, and there are ^*count\*
elements in that array.

.P 0
The longword function ^*cf\* and the routine ^*copy\* must be provided by the
user, and are described above.

.P 0
^*store\* is a single element version of ^*table\*, used to temporarily
remember one element during the sort.

.! ***************************************************************************

.P 0
For an explanation and discussion of Heapsort, see
.INDEX ^^Sort routines> HEAP__SORT> explanation
.INDEX ^^Sort routines> HEAP__SORT> bibliography
.INDEX ^^HEAP__SORT> bibliography

.P 5
Knuth - The Art of Computer Programming,  vol 3, p145 sqq
.I 5
Wirth - Algorithms + Data Structures = Programs, p73  sqq

.P 0
Comments on heap sort:
.INDEX ^^HEAP__SORT> comments
.BLANK
.LIST 0,"*"
.LE; the average and worst cases take about the same time
.LE; it takes about twice the average time of Quicksort
.LE; equal keys will be swapped
.LE; it needs workspace of one element of whatever is being sorted
.END LIST

.TP 10
.P 0
This sort works by creating a HEAP - an ordered tree of data,
for instance:

.TP 7
.LITERAL

			e1

		e2		e3

	   e4	    e5	   e6	    e7
.END LITERAL

.P 0
such that

.P 5
e(j/1) _>= ej####for 1 _<= (j/2) _< j _<= ^*count\*

.P 0
ie we have ####e1 _>= e2,   e1 _>= e3,   e2 _>= e4,   etc

.P 0
This can then be traversed to determine the correct sorting.

.P 0
Thus this algorithm first rearranges the data into a heap, and
then repeatedly removes the top of the heap and transfers it to its
proper final position

.HL 1 ^^^&Shell_ sort\&
.INDEX ^^Sort routines> SHELL__SORT> explanation

.P 0
Shell's sort - otherwise known as a diminishing increment sort


.P 5
^*call SHELL__SORT( table, count, cf, swap )\*
.INDEX ^^SHELL__SORT

.LM +31
.P -26
i/o#-##########^*table\*######the array to be sorted
.I -26
#in#-#long#####^*count\*######the number of elements in ^*table\*
.I -26
#in#-#external#^*cf\*#########longword function to compare two elements of
^*table\*
.I -26
#in#-#external#^*swap\*#######routine to swap two elements of ^*table\*
.LM -31

.! ***************************************************************************

.P 0
For an explanation and discussion of Shell's sort, see
.INDEX ^^Sort routines> SHELL__SORT> bibliography
.INDEX ^^SHELL__SORT> bibliography
.P 5
Knuth - The Art of Computer Programming,  vol 3, p84 sqq
.I 5
Wirth - Algorithms + Data Structures = Programs, p68 sqq

.P 0
Comments on Shell's sort:
.INDEX ^^SHELL__SORT> comments

.BLANK
.LIST 0,"*"
.LE; reasonably efficient for a moderately large ^*count\*
(say less than or around 1000)
.LE; equal keys will be swapped
.LE; doesn't require any extra elements to use as workspace
.END LIST
