.!*
.!* terminal I/O
.!*

.INDEX ^^Terminal I/O
.INDEX ^^Terminal I/O> introduction
.HL 1 ^^^&Introduction

.P 0
The terminal I/O routines provide the ability to read with prompt, and perform
simple output to the terminal. Their main advantages are

.INDEX ^^Common blocks> TXTC
.INDEX ^^Common blocks> EXPC
.LIST "*"
.LE; They use the common blocks defined in /TXTC/ and /EXPC/ by default
.LE; They provide a constant interface in a simple manner
.LE; Their i/o can be redirected by redefining the low level routines that 
they call
.END LIST


.HL 1 ^&^^Reading_ from_ the_ terminal\& 
.INDEX ^^Terminal I/O> reading from terminal

.INDEX ^^Terminal read routines
.INDEX ^^Terminal I/O> TTRSTR

.INDEX ^^TTRSTR 
.P 5
^*ok = TTRSTR( [string], [nchs], [prompt], [ierr] )\*

.LM +30
.P -25
out#-#long####^*ok\*#########returns LSL____NORMAL if the read succeeds, 
otherwise see below
.I -25
out#-#char####^*string\*#####where to place the line read. Defaults to TXTDSC
.I -25
out#-#long####^*nchs\*#######the number of characters read
.I -25
#in#-#char####^*prompt\*#####the string to prompt the user with. If this is not 
given, then no prompt string is used
.I -25
out#-#long####^*ierr\*#######the system error code - not used if the routine
succeeds 
.LM -30

.P 0 
TTRSTR reads a line from the terminal, into either ^*string\* or /TXTC/ (as
TXTDSC). If ^*string\* is given explicitly, then the line length to be read is
limited by the string length. If TXTDSC is defaulted, then the line length to
be read is TXTLIM characters. Trailing spaces are ignored in the length
returned in ^*nchs\*. 

.P 0
Note that the string read is padded with spaces.

.INDEX ^^Terminal I/O> TTRLIN
.INDEX ^^TTRLIN
.P 5
^*ok = TTRLIN( [buffer], [nchs], [lim], [prompt], [ierr] )\*

.LM +30
.P -25
out#-#long####^*ok\*#########returns LSL____NORMAL if the read succeeds, 
otherwise see below
.I -25
out#-#byte####^*buffer\*#####where to place the line read. Defaults to TXTBUF
.I -25
out#-#word####^*nchs\*#######the number of characters read into ^*buffer\*. 
Defaults to TXTPTR
.I -25
#in#-#word####^*lim\*########the length of ^*buffer\*. Defaults to TXTLIM
.I -25
#in#-#char####^*prompt\*#####the string to prompt the user with. If this is not 
given, then no prompt string is used.
.I -25
out#-#long####^*ierr\*#######the system error code - not used if the routine
succeeds 
.LM -30

.P 0 
TTRLIN reads a line from the terminal, into either ^*buffer\* or /TXTC/ (as
TXTBUF and TXTPTR). Trailing spaces are ignored in the length returned in
^*nchs\*. The line read is NOT padded with spaces - the characters after the
^*nchs\*th byte are undefined. 

.HL 2 ^^^&Error_ returns\&
.INDEX ^^Terminal I/O> error returns

.P 0
The following values are returned in ^*ok\* for TTRSTR and TTRLIN:

.LM +18

.P -18
LSL____NORMAL#####-#success#-#the line was read successfully
.I -18
LSL____EOF########-#warning#-#end of file was read (ie the user typed control-Z)
.I -18
LSL____SYSERR#####-#error#-#an error occurred within the routine. If given,
^*ierr\* will hold an appropriate system error code

.LM -18

.HL 1 ^&^^Writing_ to_ the_ terminal\& 
.INDEX ^^Terminal I/O> writing to a terminal

.INDEX ^^Terminal write routines

.INDEX ^^TTWSTR

.P 5
^*ok = TTWSTR( [string], [ierr] )\*

.LM +30
.P -25
out#-#long####^*ok\*#########returns LSL____NORMAL if the write succeeds, 
otherwise see below
.I -25
#in#-#char####^*string\*#####the string to be output. Defaults to EXPDSC
.I -25
out#-#long####^*ierr\*#######the system error code - not used if the routine
succeeds 
.LM -30

.P 0 
TTWSTR writes a character string to the terminal. If no string is given, then 
the contents of /EXPC/ is written out.

.INDEX ^^TTWLIN

.P 5
^*ok = TTWLIN( [buffer], [nchs], [ierr] ) \*

.LM +30
.P -25
out#-#long####^*ok\*#########returns LSL____NORMAL if the write succeeds, 
otherwise see below
.I -25
#in#-#byte####^*buffer\*########the buffer to be output. Defaults to EXPBUF
.I -25
#in#-#word####^*nchs\*#######the number of byte to output. Defaults to EXPLEN
.I -25
out#-#long####^*ierr\*#######the system error code - not used if the routine
succeeds 
.LM -30

.P 0 
TTWLIN writes a byte array to the terminal. If no arguments are given, then it
writes out the contents of /EXPC/. 

.TP 10
.HL 2 ^^^&Error_ returns\&

.P 0
The following values are returned in ^*ok\* for TTWSTR and TTWLIN:

.LM +18

.P -18
LSL____NORMAL#####-#success#-#the line was written successfully
.I -18
LSL____SYSERR#####-#error#-#an error occurred within the routine. If given,
^*ierr\* will hold an appropriate system error code

.LM -18


.HL 1 ^&^^Changing_ the_ terminal_ I/O_ routines\&
.INDEX ^^Terminal I/O> changing I/O routines

.P 0
The user may supply routines to be used by LSLLIB for all its terminal
input and output, in place of its defaults. This may be required in
order to perform input/output to alternate devices, or to perform
special carriage control facilities.

.HL 2 ^&^^Changing_ the_ terminal_ input_ routine\&
.INDEX ^^Terminal read routines

.P 5
^*call LSL__SET__INPUT( routine )\*
.INDEX ^^LSL__SET__INPUT

.LM +30
.P -25
#in#-#external#^*routine\*###the routine to be used for terminal input,
declared EXTERNAL in the calling program
.LM -30

.P 0 
By default, LSLLIB terminal input uses the routine LIB$GET__INPUT.
.INDEX ^^LIB$GET__INPUT
The user may substitute their own routine by calling LSL__SET__INPUT.
The supplied routine must accept the same arguments as LIB$GET__INPUT,
though at present it is only ever called with one or two arguments.
Refer to the documentation for the LIB$ routines.

.HL 2 ^&^^Changing_ the_ terminal_ output_ routine\&
.INDEX ^^Terminal write routines

.P 5
^*call LSL__SET__OUTPUT( routine )\*
.INDEX ^^LSL__SET__OUTPUT

.LM +30
.P -25
#in#-#external#^*routine\*###the routine to be used for terminal output,
declared EXTERNAL in the calling program
.LM -30

.P 0 
By default, LSLLIB terminal output uses the routine LIB$PUT__OUTPUT.
.INDEX ^^LIB$PUT__OUTPUT
The user may substitute their own routine by calling LSL__SET__OUTPUT.
The supplied routine must accept the same arguments as LIB$PUT__OUTPUT.
Refer to the documentation for the LIB$ routines.

.HL 1 ^^^&Low_ level_ routines\&

.INDEX ^^Terminal I/O> low level routines

.P 0 
The TTxLIN and TTxSTR routines call VIO$GET__INPUT and VIO$PUT__OUTPUT to read
or write a line.

.P 0
LSLLIB itself supplies these routines, to read from SYS$INPUT and write to
SYS$OUTPUT using LIB$GET__INPUT and LIB$PUT__OUTPUT. Programs used to
redirect terminal input/output by substituting their own routines for
VIO$GET__INPUT and/or VIO$PUT__OUTPUT. This will not work if the
shareable image form of LSLLIB is used, so LSL__SET__INPUT, and
.INDEX ^^LSL__SET__INPUT
.INDEX ^^LSL__SET__OUTPUT
LSL__SET__OUTPUT should be used in preference.

.P 0
The user may call VIO$GET__INPUT and VIO$PUT__OUTPUT directly, with the
same argument lists as for LIB$GET__INPUT and LIB$PUT__OUTPUT. The result
will be either a call to the LIB$ routine, or to the user's own routine if
LSL__SET__INPUT or LSL__SET__OUTPUT have been called. It is not normal
practice to call VIO$GET__INPUT and VIO$PUT__OUTPUT directly - TTRSTR,
TTWSTR etc. should normally be used.
