.!*
.!* Introduction
.!*
.INDEX ^^LSLLIB
.INDEX ^^LSLLIB> introduction
.P 0
LSLLIB is Laser-Scan's VAX native mode standard subroutine library.
.INDEX ^^LSLLIB> features
.P 0
It provides a set of I/O routines, generally used in Laser-Scan in preference 
to Fortran I/O. These include terminal, file and magnetic tape read/write
utilities, flexible encode/decode facilities, and command reading facilities.

.P 0
LSLLIB also includes various other routines which are of general use to
Laser-Scan programmers.

.P 0
LSLLIB is descended from two previous VAX libraries, VIOLIB and CMDLIB. These
in turn are descended from LIOLIB, which was the RSX Laser-Scan I/O library.
However LSLLIB has only limited compatibility with any of the previous
libraries. The appendix "Differences from VIOLIB/CMDLIB" discusses this in more
detail. 

.INDEX ^^LSLLIB> history

.P 0 
The library may be found in LSL$LIBRARY:LSLLIB.OLB, and its common and
parameter files are in LSL$CMNLSL:
.INDEX ^^LSLLIB> library location

.P 0
Note that in general LSLLIB should be the last library in any link instructions
as some of the basic routines such as WRITEF are referenced from other
libraries. LSLLIB should not be included with VIOLIB and CMDLIB, as many
routines have the same name, but different arguments. 
.INDEX ^^LSLLIB> linking instructions
.INDEX ^^LINK> instructions for LSLLIB
.P 0
The library sources are in LSL750::LSL$SOURCE__ROOT:[LSLMAINT.LSLLIB...],
and the documentation sources are in LSL$DOC__ROOT:[LSLMAINT.LSLLIB].
.INDEX ^^LSLLIB> location of sources


.!
.! ***************************************************************************
.!
.PAGE
.HL 1 ^^^&Documentation Notation\&
.INDEX ^^LSLLIB> documentation notation

.P 0
The following conventions are followed:
.INDEX ^^LSLLIB> documentation conventions

.LIST "*"

.LE; all arguments are fully declared for each routine.

.LE; the following input/output declarations are made:

.LM +6
.P -6
out#-#this variable will be written to by the routine.
.P -6
#in#-#this variable is read by the routine - it is not written to.
.P -6
i/o#-#this variable may be both read by the routine, and written to.
.LM -6

.LE; the following argument types are used:

.LM +10
.P -10
word#####-#this is a Fortran INTEGER_*2, a 16 bit variable.
.P -10
long#####-#this is a Fortran INTEGER_*4, a 32 bit variable. Note that this 
is the default integer size on the VAX, and is assumed unless there are good 
reasons for using a word.
.P -10
logical##-#this is a Fortran LOGICAL variable
.P -10
byte#####-#this is a Fortran BYTE or LOGICAL_*1 variable
.P -10
real#####-#this is a Fortran REAL variable
.P -10
dreal####-#this is a Fortran REAL_*8, or DOUBLE PRECISION variable
.P -10
char#####-#this is a Fortran CHARACTER variable, but see the section on
'Fake strings' in the System chapter
.P -10
external#-#this is a routine declared as EXTERNAL in the calling routine
.LM -10

.LE; arguments are compulsory, unless enclosed in brackets (the characters 
'[' and ']'). Note that the specification of optional arguments is not always 
formally correct - for instance, if this documentation describes

.P 10
^*call FRED( arg1, [arg2], [arg3], [arg4] )\*

.P 0
then it ^&really\& means

.P 10
^*call FRED( arg1 [, [arg2] [, [arg3] [, [arg4]]]] )\*

.LE; VAX FORTRAN allows functions to be CALLed - that is, the return code
from a function can be discarded by using CALL _<function_>. It is thus not
uncommon to find programs which ignore return codes documented in this manual,
assuming that the relevant function has succeeded - common examples include
EXPAND, LSL__PUTMSG, FLWSTR/FLWLIN. 

.LE; Occasionally, variable values are represented in angle brackets - for 
instance in the declaration of EXPAND, the description of the arguments talks 
about ^*arg_<n_>\* where ^*_<n_>\* represents an appropriate integer.

.INDEX ^^LSLLIB> common blocks
.INDEX ^^Common blocks> LSLLIB> general introduction to
.LE; some common blocks are essentially used as extra I/O to routines (for 
instance /CMDCOM/ for RDCOMM), and the variables in these are declared as for
routine arguments (see above). However, others (such as /TXTC/) are used in a
less predictable fashion. In these cases, the following common block
declarations are made: 

.LM +10

.P -10
public##-#the variable being described is one which the user is free to refer 
to. In some cases, the user may wish (or need) to set this variable.

.P -10
private#-#it is not expected that the user will wish to refer to this 
variable. However, there is nothing to stop the user doing so, providing they 
are sure of the consequences!

.LM -10

.LE; parameter files are described using the same data-types as used for 
variables (long, word, real, etc)

.LE; common blocks are normally referred to by enclosing a name in slashes - 
this name is that of the file which contains the common block under discussion. 
For example, /EXPC/ means the INCLUDEd file LSL$CMNLSL:EXPC.CMN which 
actually contains the common block COMMON /LSL__EXPC/

.END LIST


.HL 1 ^^^&Naming_ Conventions\&
.INDEX ^^LSLLIB> naming conventions

.LIST "*"

.INDEX ^^LSLLIB> naming conventions> common blocks
.INDEX ^^Common blocks> LSLLIB> naming conventions
.LE;all common block names are prefixed by 'LSL__', e.g. COMMON /LSL__EXPC/. The 
filenames are not prefixed and will normally be called after the standard 
(i.e. non-character) common block in the file, e.g. LSL$CMNLSL:EXPC.CMN

.INDEX ^^LSLLIB> naming conventions> routines
.LE;all undocumented routine names are prefixed by 'LSL__'. Note that this 
prefix is also used for some of the documented routine names, as there is no 
specific naming convention for them.

.LE; the source code for every Fortran routine is contained in its own separate 
file, filenames being the same as the routine names.

.END LIST

.!
.! ***************************************************************************
.!
.PAGE

.HL 1 ^^^&Testing_ the_ severity_ of_ errors\&
.INDEX ^^LSLLIB> error severity
.INDEX ^^LSLLIB> error severity> testing

.P 0
.INDEX ^^LSLLIB> error codes
The error codes returned by LSLLIB routines are either LSL____ error codes, 
or system error codes. In either case, the bottom three bits of an 
error code indicate its severity.

.P 0
.INDEX ^^LSLLIB> error codes> bit patterns
The value of the bottom three bits will be one of

.LM +16
.P 0
STS$K__SUCCESS#-#success
.BR
STS$K__INFO####-#information
.BR
STS$K__WARNING#-#warning
.BR
STS$K__ERROR###-#error
.BR
STS$K__SEVERE##-#fatal#error
.LM -16

.P 0
The bottom three bits may be extracted using the mask STS$M__SEVERITY, and the 
bottom single bit may be extracted using the mask STS$M__SUCCESS.

.P 0
The STS$ values are declared for Fortran in the FORSYSDEF module ($STSDEF),
which can be included by the statement

.P 5
^*INCLUDE####'($STSDEF)'\*

.P 0
Alternatively, note that errors all test as ^*false\*, and successes as
^*true\* (ie they are respectively even and odd).

.P 0
Further information can be found in the "Guide to Programming on VAX/VMS
(FORTRAN Edition)", Chapter 10. For an explanation of when different severities
are conventionally used in LaserScan programs, see the "Error messages"
chapter in this document. 

.!
.!****************************************************************************
.!
.PAGE

.HL 1 ^^^&Creating_ and_ using_ 'Fake_ strings'\&
.INDEX ^^Fake Strings
.INDEX ^^LSLLIB> creating and using Fake Strings

.P 0
On the VAX, strings are implemented as follows:

.BLANK
.TP 18
.LITERAL

	+------+------+-------------+
	|class | type |   length    |  DESCRIPTOR
	+------+------+-------------+
	|     address of BUFFER     |
	+---------------------------+


	+------+------+
	|  T   |  S   |  BUFFER
	+------+------+
	|  I   |  R   |
	+------+------+
	|  G   |  N   |
	+------+------+

	         etc

.END LITERAL

.P 0
DESCRIPTOR is the character descriptor for the string -
length is the size of the BUFFER, in bytes, and class and type are
zero for this form of string. It is the character descriptor that is referred 
to when talking about a string.

.P 0
In Macro, this could be represented as:
.INDEX ^^LSLLIB> creating and using Fake Strings> MACRO32

.BLANK
.TP 7
.LITERAL
DESCRIPTOR:
LENGTH:		.WORD	0		; no of chars in BUFFER
TYPE:		.BYTE	0		; type  information
CLASS:		.BYTE	0		; class information
POINTER:	.LONG	BUFFER		; address of the buffer

BUFFER:		.BLKB	80		; the buffer itself
.END LITERAL

.P 0
.INDEX ^^LSLLIB> creating and using Fake Strings> FORTRAN
It is possible to create a character descriptor in FORTRAN - this is done by 
mimicking the above structure. For instance:

.BLANK
.TP 12
.LM +8
.LITERAL
INTEGER         MAX_BUFLEN
PARAMETER      (MAX_BUFLEN=255) ! maximum buffer size
INTEGER*2       STRLEN          ! length field
INTEGER*4       DESCR(2)        ! descriptor
EQUIVALENCE    (DESCR(1),STRLEN)
BYTE            BUFFER(MAX_BUFLEN)

 ... 

DESCR(1) = 0                    ! zero the type/class fields
DESCR(2) = %LOC(BUFFER)         ! set up the address field
STRLEN   = MAX_BUFLEN           ! and set the length correctly
.END LITERAL
.LM -8

.P 0
Note that although this character descriptor may be passed to a subroutine, 
and used as a character string within that subroutine, the level at which it 
is declared 'knows' that it is only an integer. Thus it is not possible to do 
things such as LEN(DESCR), or REAL__STRING#=#DESCR in the declaring routine.

.P 0
Also, care must be taken when passing it to routines that will write to
the 'string' - for instance, if routine COPY__STRING is defined as follows:

.BLANK
.TP 11
.LITERAL
        SUBROUTINE COPY__STRING( FROM, TO )
C
        IMPLICIT NONE
C
        CHARACTER*(*)   FROM    ! source string
        CHARACTER*(*)   TO      ! destination
C
        TO = FROM
C
        RETURN
        END
.END LITERAL

.P 0
and we are to copy into a 'fake string', then the length of the fake string
must be carefully manipulated - for instance

.BLANK
.TP 9
.LITERAL
C
C set the 'fake string' length - preferably to the length of the
C string we are copying, but not to more than the buffer length!
C
        STRLEN = MIN( LEN(TEXT), MAX_BUFLEN )
C
C and copy the TEXT string into our 'fake' string
C
        CALL COPY__STRING( TEXT, DESCR )
.END LITERAL

.P 0
This method of declaring 'fake strings' is used with /TXTC/ and
/EXPC/, as described above, to produce TXTDSC and EXPDSC. It is also used 
in /CMDCOM/ (the RDCOMM common block file).


.!
.!****************************************************************************
.!
.PAGE

.HL 1 ^^^&Linking_ with_ LSLLIB\*
.INDEX ^^Linking with LSLLIB
.INDEX ^^LSLLIB> linking with
.INDEX ^^Shared LSLLIB

.p0; There are two versions of LSLLIB available - the normal library and the
shared version. Programs may be linked with either. The advantages of using
the shared library are that the image will be smaller, that image startup
should be quicker, and that LSLLIB bug fixes will take effect without having
to relink the program. Much of Laser-Scan's standard software is now standardly
linked with the shared version of LSLLIB - in particular, IMP and LITES2.

.p0; In order to link with the library ^&unshared\&, a normal link statement
of the form:

.literal

	$  link/map  program,sub1,sub2,etc, -
	             lsl$library:lsllib/lib
.end literal

.p0; In order to link with the shared library, a command of the form

.literal

	$  link/map  program,sub1,sub2,etc, -
	             lsl$library:lslshr/opt
.end literal

.p0; must be used - this uses a link options file to tell the linker what to
do. If sharable IFFLIB is also being used, then we have to use:

.literal

	$  link/map  program,sub1,sub2,etc, -
	             lsl$library:iffshr/opt, -
	             lsl$library:lslshr/opt
.end literal

.p0; Note that the linker requires that options files are specified last - that
is, any other libraries, etc, must be specified before the options files.
