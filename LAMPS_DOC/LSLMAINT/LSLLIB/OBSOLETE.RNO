.!*
.!* OBSOLETE - outdated routines
.!*

.CHAPTER  ^^Outdated or no longer recommended routines
.INDEX ^^Obsolete routines
.INDEX ^^Obsolete routines> introduction
.HL 1 ^^^&Introduction\&

.P 0
The routines documented in this chapter are no longer recommended for use.
No new programs should use them, and they are documented here only for the 
benefit of people trying to understand or modify old programs that do use 
them.

.INDEX ^^Obsolete routines> VIOLIB withdrawal
.P 0
Notice is hereby given that support for these routines in VIOLIB may be 
withdrawn at some time in the future.

.P 0
Where new routines have been provided in VIOLIB to perform the same function,
the names of these routines are given.

.Hl 1 ^^^&RDFILT_ -_ file_ parsing\&

.INDEX ^^File parsing routines> obsolete
.INDEX ^^Obsolete routines> RDFILT
.INDEX ^^RDFILT

.P 0
RDFILT has now been replaced by GETFILNAM.
.INDEX ^^GETFILNAM
.P 5
^*haderr = RDFILT( string, strlen, defstr, allnum, allver,
.I 5
###### # ####### allblk, irc)\*

.LM +30
.P -25
out#-#logical#^*haderr\*#####true if the routine failed
.I -25
out#-#char####^*string\*#####string to receive file name
.I -25
####-#########^*strlen\*#####ignored - included only to match LIOLIB
.I -25
in##-#char####^*defstr\*#####default filename (usually a literal string) 
.I -25
####-#########^*allnum\*#####ignored - included only to match LIOLIB
.I -25
in##-#logical#^*allver\*#####true if to allow version numbers in filename 
.I -25
in##-#logical#^*allblk\*#####true if to allow blank filenames
.I -25
out#-#word####^*irc\*########error return code 
.LM -30

.P 0 
RDFILT reads a file name from /TXTC/, using RDCH, and filling in missing
parts of the name from the default file name in ^*defstr\*.
.INDEX ^^Common blocks> TXTC
.P 0 
The values returned in ^*irc\* may be:

.LM +5
.P -5
+_<len_> - number of characters in read into ^*string\*
.I -5
##0### - blank filename read (will only arise if ^*allblk\* set) 
.I -5
-_<err_> - error in filename (only if ^*haderr\* is set true). The values
returned are: 

.LM +5
.P -5
-1 - illegal character found in reading the filename in /TXTC/
.I -5
-2 - illegal character found in the default name in ^*defstr\*
.I -5
-3 - the filename read or produced was too long to fit into ^*string\*
.LM -5

.LM -5

.HL 2 ^^^&RDFILT_ error_ routine\&
.INDEX ^^Obsolete routines> RDFILT error routine

.P 5
^*call FLTERR( irc )\*
.INDEX ^^FLTERR

.P 0
This routine takes the error code returned by RDFILT (above) and uses WRITEF 
to produce an appropriate error message.

.HL 2 ^^^&Comparison of GETFILNAM with RDFILT\&
.INDEX ^^Obsolete routines> comparison of RDFILT with GETFILNAM

.P 0
The main differences are:

.LIST
.LE; GETFILNAM is able to cope with a full VMS version 4 filename, whereas 
RDFILT will only cope with version 3 and below.
.INDEX ^^GETFILNAM

.LE; GETFILNAM reads the filename as a string, and then 
parses it, whereas RDFILT reads the filename as it parses it.

.P 0
Thus GETFILNAM parses a filename after reading it from the line, whilst RDFILT 
parses the filename as it reads it from the line. It is conceivable that this 
could produce different results from the two routines.

.END LIST


.HL 1 ^&^^Reading_ a_ string\&
.INDEX ^^Obsolete routines> reading strings
.INDEX ^^Obsolete routines> RDSTR

.P 0
RDSTR has now been replaced by READSTR.
.INDEX ^^READSTR
.P 0
The read string routine RDSTR was originally developed for use in RDCOMM.
The routine takes a string descriptor
as argument - see the Common blocks chapter for a description of how to declare
'fake' character strings in Fortran.

.P 5
^*len = RDSTR( string, term )\*
.INDEX ^^RDSTR

.LM +30
.P -25
out#-#long####^*len\*########number of characters that were read into
^*string\* 
.I -25
out#-#char####^*string\*#####the string to read into
.I -25
in##-#byte####^*term\*#######the termination condition for reading
.LM -30

.P 0
RDSTR reads a string from the input buffer. The condition on which the string 
ends is determined by ^*term\*, which has the following values:

.LM +10
.P -6
_>0#_=_> terminate on ASCII term, or on end-of-line. The character ^*term\*
may be included in the string by repeating it. The next call of RDCH will
return the character after ^*term\*. Generally used when ^*term\* was read as
an opening quote character. 

.P -6
=_<space_> (which is, of course, _>0) is a special value - the routine
skips leading spaces or tabs, reads the string, and terminates on _<space_> or
_<tab_> characters.

.P -6
=0#_=_> terminate as for a RDCOMM command name string (though leading spaces
will be skipped). The string ends when a non-alphabetic, non-underline 
character is read. That character will be returned by the next call of RDCH.

.P -6
<0#_=_> terminate at end-of-line only. Both leading and trailing spaces will be
ignored.

.LM -10


.HL 2 ^^^&Using READSTR instead of RDSTR\&
.INDEX ^^Obsolete routines> using READSTR instead of RDSTR

.P 0
It is possible to produce the effects of using the RDSTR function with 
READSTR. The equivalent calls are as follows:

.LIST "*"

.LE; RDSTR(string_,char), or RDSTR(string_,char_,.TRUE_.)

.P 0
Use a call of READSTR( string, char, 3, .FALSE. )

.LE; RDSTR(string_,char_,.FALSE_.)

.P 0
Use a call of READSTR( string, char, 2, .FALSE. )

.LE; RDSTR(string_,0)

.P 0
Use a call of READSTR( string, 0, 1, .TRUE. )

.LE; RDSTR(string_,' ')

.P 0
Use a call of READSTR( string, 0, 4, .TRUE. )

.LE; RDSTR(string_,-1)

.P 0
Use a call of READSTR( string, 0, 5, .TRUE. )

.END LIST

.!*
.!* things with no other home
.!*

.CHAPTER  ^^^&Miscellaneous\&

.INDEX ^^Obsolete routines> miscellaneous
.INDEX ^^Obsolete routines> miscellaneous> CMLTIT

.P 10 

.INDEX ^^CMLTIT see obsolete routines

CMLTIT 

.P 0 

Uses TXTCML and RDFILT to read an IFF file title and single-letter switches
into COMMON /SWITCH/. 
.INDEX ^^Common blocks> VIOLIB SWITCH

.HL 2 ^&^^Define DCL Symbols.\& 
.INDEX ^^Obsolete routines> miscellaneous> DEFGBLSYM
.INDEX ^^Obsolete routines> miscellaneous> defining global symbols

.P 0 

These routines are believed superseded by v3.0 system library facilities. 

.P 10 

.INDEX ^^DEFGBLSYM

ierr = DEFGBLSYM(name,value) 

.I 10 

.INDEX ^^DEFGBLSYM

ierr = DEFLOCSYM(name,value) 

.P 10 

CHARACTER*(*) name ! of symbol to set 

.I 10 

CHARACTER*(*) value ! string to set NAME to 

.P 0 

Defines a DCL symbol. DEFGBLSYM defines a global symbol; DEFLOCSYM defines a
global symbol. Example of use: 

.P 10 

ierr = DEFLOCSYM('GREETING', 'Hello there !') 
.INDEX ^^DEFLOCSYM
.INDEX ^^Obsolete routines> miscellaneous> DEFLOCSYM
.INDEX ^^Obsolete routines> miscellaneous> defining local symbols

.HL 2 ^&^^Super-Arithmetic.\& 
.INDEX ^^Obsolete routines> miscellaneous> super arithmetic
.INDEX ^^Super arithmetic> now obsolete
.P 10 

SUBQUAD(A,B,C) 
.INDEX ^^Obsolete routines> miscellaneous> SUBQUAD
.INDEX ^^SUBQUAD
.I 10 

INTEGER*4 a(2),b(2),c(2) ! quadword arguments 

.P 0 

Subtracts B from A and puts the result in C. 

.P 10 

EDIV(a,b,c) 
.INDEX ^^Obsolete routines> miscellaneous> EDIV
.INDEX ^^EDIV
.I 10 

INTEGER*4 a(2),b(2),c(2) ! quadword arguments 

.P 0 

Divides A by B and puts the quotient in C. 

.HL 2 ^&^^VT52 'Plotting' Routines.\& 
.INDEX ^^Obsolete routines> miscellaneous> VT52 plotting

.P 0 

These routines provide duplicates of facilities now available in the
LIB$SCREEN package. 

.P 10 
.INDEX ^^Obsolete routines> miscellaneous> VT52 plotting> INIT52

INIT52(devnam) 

.I 10 

CHARACTER*(*) devnam ! name of device to use 

.P 0 

Initialises DEVNAME ready for using the VT52 routines PLOT52, CHRS52, MOVE52. 

.P 10 

.INDEX ^^Obsolete routines> miscellaneous> VT52 plotting> PLOT52
PLOT52(ifunc) 

.I 10 

INTEGER*4 ifunc ! function code 

.P 0 
.INDEX ^^VT52 control functions (see obsolete routines)
Sends control functions to a VT52 display. Available function codes are: 

.P 10 

ifunc = 1 -> move cursor up (A) 

.I 10 

ifunc = 2 -> down " (B) 

.I 10 

ifunc = 3 -> right " (C) 

.I 10 

ifunc = 4 -> left " (D) 

.I 10 

ifunc = 5 -> home " (H) 

.I 10 

ifunc = 6 -> clear screen from cursor (J) 

.I 10 

ifunc = 7 -> clear rest of line (K) 

.I 10 

ifunc = 8 -> graphics on (F) 

.I 10 

ifunc = 9 -> graphics off (G) 

.I 10 

ifunc =10 -> clear whole screen (H,J) 

.I 10 

ifunc =11 -> sound bell 

.P 10 

.INDEX ^^Obsolete routines> miscellaneous> VT52 plotting> CHRS52

CHRS52(string) 

.INDEX ^^CHRS52

CHARACTER*(*) string ! typically a literal 

'Plots' STRING at the current cursor position. 

.P 10 

MOVE52(ix, iy) 

.INDEX ^^Obsolete routines> miscellaneous> VT52 plotting> MOVE52
.INDEX ^^MOVE52

.I 10 

INTEGER*4 ix, iy ! coordinates. 

.P 0 

Moves the cursor to screen position IX, IY. The screen is 80 characters wide
in X (numbered left to right), and 24 deep in Y (numbered from top to bottom).

.HL 2 ^&^^ Terminal Single Character Routines.\& 

.INDEX ^^Obsolete routines> miscellaneous> terminal single character routines 

.P 10 

.INDEX ^^Obsolete routines> miscellaneous> UTWINI
.INDEX ^^UTWINI
.INDEX Event flags
UTWINI([devname][, efn]) 

.I 10 

CHARACTER*(*) devname ! device to use 

.I 10 

INTEGER*4 efn ! event flag to use 

.P 0 

Initialises device DEVNAME for unformatted terminal output using UTWCHS. The
default device name is 'TT:'; in default of EFN, one is dynamically acquired
by use of LIB$GET_EF. 

.P 10 

.INDEX ^^Obsolete routines> miscellaneous> UTWCHS
.INDEX ^^UTWCHS
UTWCHS(string) 

.I 10 

CHARACTER*(*) string ! for output 

.P 0 

Outputs STRING to the device defined by a call to UTWINI. No formatting is
done; any carriage control characters required must be in the string. 


.P 10 

.INDEX ^^Obsolete routines> miscellaneous> UTRINI
.INDEX ^^UTRINI
UTRINI([devname][, efn]) 

.I 10 

CHARACTER*(*) devname ! device to use 

.I 10 

INTEGER*4 efn ! event flag to use 

.P 0 

Initialises device DEVNAME for unsolicited terminal input using UTRCH. The
default device name is 'TT:'; in default of EFN, one is dynamically acquired
by use of LIB$GET_EF. 

.P 10 

.INDEX ^^Obsolete routines> miscellaneous> UTRCH
.INDEX ^^UTRCH
UTRCH(ich) 

.I 10 

BYTE ich ! returned character 

.P 0 

Returns in ICH the ASCII code of the last character typed since UTRCH was last
called. If no characters have been typed then 0 is returned. This routine uses
the MAILBOX feature of the VAX terminal driver to get any characters typed
without having a read request outstanding to the terminal. It is capable of
getting confused by type-ahead: beware. 

