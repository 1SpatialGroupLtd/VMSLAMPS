.!*
.!* Mapped section files
.!*

.INDEX ^^Mapped section files

.HL 1 ^&^^Introduction\&
.INDEX ^^Mapped section files> introduction
.INDEX ^^Mapped files
.INDEX ^^Virtual memory mapping> see mapped section files

.P 0
The mapped section routines allow a program to map a file into its virtual
memory space. This means that the file can be accessed as if it were an array,
rather than by conventional record or block access methods.

.P 0
Note that the terms "page" and "block" both refer to units of 512 bytes
- the first is normally used for virtual memory, and the second for disk
based data.

.P 0
The current routines support up to 9 sections being mapped (not necessarily
all from different files). Unit numbers in the range 0 to 8 are used to
identify which section is relevant to a routine, and an internal table is
used to relate that number to the actual channel used. Negative unit numbers
will be treated as 0.

.P 0
.INDEX ^^Mapped section files> examples
.INDEX Examples
For examples of the use of these routines, see the sources of DTILIB.

.HL 1 ^^^&Opening_ and_ mapping_ a_ file\&
.INDEX ^^Mapped section files> opening and mapping a file
.INDEX ^^Mapped section files> VIO$OPEN__SEC

.INDEX ^^^^VIO$OPEN__SEC

.P 5
^*ok = VIO$OPEN__SEC( file, pagcnt, write, create,
.I 5
  ## # ############# array, bytlen, [unit], [cluster], [vbn] )\*

.LM +30

.P -25
out#-#long####^*ok\*#########returns SS$__NORMAL if the routine works,
otherwise an appropriate system error - see below 

.I -25
in##-#char####^*file\*#######the name of the file to be mapped

.I -25
in##-#long####^*pagcnt\*#####the number of pages we want, ignored if the file
already exists and ^*vbn\* is not specified 

.I -25
in##-#logical#^*write\*######true if write access is allowed to the file

.I -25
in##-#logical#^*create\*#####true if a new file is to be created - note that
this implies write access 

.I -25
out#-#long####^*array\*######the address in program (P0) space of the "array"
that the file has been mapped to 

.I -25
out#-#long####^*bytlen\*#####the number of bytes that were mapped

.I -25
in##-#long####^*unit\*#######the unit number, between 0 and 8 - defaults to 0 

.I -25
in##-#long####^*cluster\*####page fault cluster size - number of pages to be
brought in on a page fault - defaults to 0 

.I -25
in##-#long####^*vbn\*########virtual block number of the first block to be
mapped - defaults to 0 

.LM -30

.P 0
VIO$OPEN__SEC opens the given file, and maps it into memory, returning the
address of the mapped part of the file in ^*array\*. The user may then access
the file by passing its address to a routine - ie as %VAL(^*array\*) 

.P 0
There are three ways of using VIO$OPEN__SEC

.LIST "o"

.LE; If ^*create\* is true, then a new file is created with ^*pagcnt\* blocks.
The file is created "contiguous best try" - that is, contiguous if possible.
The file is then mapped demand-zero - all of its pages are set to zero as they
are first read into memory. Note that a file created by VIO$OPEN__SEC will be
mapped as writable, regardless of the value of ^*write\*.

.LE; If ^*create\* is false and the ^*vbn\* argument is specified, then the
first ^*pagcnt\* blocks starting at block ^*vbn\* will be mapped. This allows a
program to map part of a file into memory. 

.LE; If ^*create\* is false but the ^*vbn\* argument is not specified, then
the whole file will be mapped.

.END LIST

.P 0
The file is mapped into the first available space in the P0 (program) region,
to a temporary, private section, with no name. Thus no other process may access
this mapped section. 

.INDEX ^^Mapped section files> VIO$OPEN__SEC> condition codes

.P 0
The routine itself may fail with any of the following values of ^*ok\*:

.LM +15
.P -15
SS$__INSFARG##-#if any of the compulsory arguments are missing.
.P -15
SS$__IVCHAN###-#if the unit chosen is already in use - another file has been 
mapped on this unit. A unit is detected as being in use if a previous call of 
VIO$OPEN__SECTION has set the internal record of the files mapped address 
range (by a call of $CRMPSC).
.P -15
SS$__BADPARAM#-#if ^*create\* is true and the ^*vbn\* argument is present.
.LM -15

.P 0
A full list of the system values which may be returned in ^*ok\* is not given
here, but may be obtained by looking up the following system services: 

.LM +16
.P -16
$FAB__STORE####-#used to store file characteristics in the file's FAB (file
access block) 
.I -16
$CREATE#######-#used to create the file if ^*create\* is true
.I -16
$OPEN#########-#used to open the file if ^*create\* is false. If the file does 
not exist, then ^*ok\* will be set to RMS$__FNF (file not found)
.I -16
$CRMPSC#######-#used to map the file to a global section
.LM -16

.INDEX ^^Mapped section files> VIO$OPEN__SEC> note on errors

.P 0
Note that if an error occurs in creating/mapping the section (ie in $CRMPSC),
then the channel associated with that unit will be deassigned before the
routine returns. 

.TP 10
.HL 1 ^^^&Extending_ a_ mapped_ file\&
.INDEX ^^Mapped section files> extending a mapped file
.INDEX ^^Mapped section files> VIO$EXTEND__SEC

.INDEX ^^^^VIO$EXTEND__SEC

.P 5
^*ok = VIO$EXTEND__SEC( pages, array, bytcnt, [unit] )\*

.LM +30

.P -25
out#-#long####^*ok\*#########returns SS$__NORMAL if the routine works,
otherwise an appropriate system error - see below 

.I -25
in##-#long####^*pages\*######how many pages we want to add to the file 

.I -25
out#-#long####^*array\*######the new address in program (P0) space of the mapped
file. Note that the file is remapped, so that the address will change 

.I -25
out#-#long####^*bytlen\*#####the number of bytes mapped in the (extended) file

.I -25
in##-#long####^*unit\*#######the unit number, between 0 and 8 - defaults to 0 

.LM -30

.P 0
VIO$EXTEND__SEC extends an already open mapped section file. Note that:

.LIST

.LE; The file is unmapped, extended, and then remapped. Thus the address of
the mapped section will change. 

.LE; The requested extension is rounded up to the next multiple of the cluster
size (_#1), and this number of blocks is added to the current extent. This
means 

.INDEX ^^Mapped section files> extending a mapped file> disk cluster size

.FOOTNOTE
--------------------------------------------------------------------------------
.BR
_#1#-#the cluster size for a disk is the number of blocks that will be 
allocated when any number between 1 and the cluster size is requested - that 
is it is the 'granularity' of block allocation. Thus, if the cluster size is 
3, then files will have allocated block sizes of 3, 6, 9, etc
.END FOOTNOTE

that the file can end with up to 
.P 5
_<cluster__size-1_>#_*#_<number#of#extends#done_> blocks

.P 0
of 'wasted' space at the end.

.END LIST

.INDEX ^^Mapped section files> VIO$EXTEND__SEC> condition codes

.P 0
Apart from SS$_NORMAL, the following values of ^*ok\* can be returned by the 
routine itself:

.LM +15
.P -15
SS$__INSFARG##-#if any of the compulsory arguments are missing
.P -15
SS$__IVCHAN###-#if the unit chosen is not in use - no file has been 
mapped on this unit. 
.I -15
SS$_BADPARAM##-#if the number of pages is invalid - less than 1 block was 
requested. 
.LM -15

.P 0
Other system values which may be returned in ^*ok\* may be obtained by looking 
up the following system services: 

.LM +15
.P -15
$DELTVA#######-#used to delete the global section containing the mapped file
.I -15
$QIOW#########-#used to access and modify the file attributes 
.I -15
$CRMPSC#######-#used to map the extended file to a global section
.LM -15

.INDEX ^^Mapped section files> VIO$EXTEND__SEC> note on errors

.P 0
Note that as in VIO$OPEN_SEC,if an error occurs in creating/mapping the section 
(ie in $CRMPSC), then the channel associated with that unit will be deassigned 
before the routine returns. 


.TP 10
.HL 1 ^^^&Updating_ a_ mapped_ file\&
.INDEX ^^Mapped section files> updating a mapped section file
.INDEX ^^Mapped section files> VIO$UPDATE__SEC

.INDEX ^^VIO$UPDATE__SEC

.P 5
^*ok = VIO$UPDATE__SEC( [unit] )\*

.LM +30

.P -25
out#-#long####^*ok\*#########returns SS$__NORMAL if the routine works,
otherwise an appropriate system error - see below 

.I -25
in##-#long####^*unit\*#######the unit number, between 0 and 8 - defaults to 0 

.LM -30

.P 0
VIO$UPDATE__SEC updates the mapped section to disk - it uses SYS$UPDSEC to 
force a write of the section.

.P 0
Normally, a section is written back to disk when a page fault requires it, when
the section is deleted (so VIO$CLOSE__SEC and VIO$UPDATE__SEC will both update
it), or when the process creating the section exits. Sometimes it is necessary
to update the section more frequently, for instance to ensure that information
is not lost if the system crashes. 


.P 0
If the routine does not work, the only error it sets itself is:

.LM +15
.P -15
SS$__IVCHAN###-#if the unit chosen is not in use - no file has been 
mapped on this unit. 
.LM -15

.P 0
Other system values which may be returned in ^*ok\* may be obtained by looking 
up the following system service: 

.LM +15
.P -15
$UPDSECW######-#used to update the section
.LM -15



.HL 1 ^^^&Closing_ a_ mapped_ file\&

.INDEX ^^Mapped section files> closing a mapped file
.INDEX ^^Mapped section files> VIO$CLOSE__SEC

.INDEX ^^VIO$CLOSE__SEC

.P 5
^*ok = VIO$CLOSE__SEC( [unit] )\*

.LM +30

.P -25
out#-#long####^*ok\*#########returns SS$__NORMAL if the routine works,
otherwise an appropriate system error - see below 

.I -25
in##-#long####^*unit\*#######the unit number, between 0 and 8 - defaults to 0 

.LM -30

.P 0
VIO$CLOSE__SEC closes the section down by deleting the virtual addresses to
which it is mapped, and then deassigning the channel associated with the file.
The addresses are then deleted from the internal record associated with that 
unit number.

.INDEX ^^Mapped section files> VIO$CLOSE__SEC> condition codes

.P 0
If the routine does not work, the only error it sets itself is:

.LM +15
.P -15
SS$__IVCHAN###-#if the unit chosen is not in use - no file has been 
mapped on this unit. 
.LM -15

.P 0
Other system values which may be returned in ^*ok\* may be obtained by looking 
up the following system services: 

.LM +15
.P -15
$DELTVA#######-#used to delete the global section containing the mapped file
.I -15
$DASSGN#######-#used to deassign the i/o channel associated with the file
.LM -15

.INDEX ^^Mapped section files> VIO$CLOSE__SEC> note on errors

.P 0
Note that if an error occurs while trying to delete the global section, the i/o 
channel will not be deassigned.
