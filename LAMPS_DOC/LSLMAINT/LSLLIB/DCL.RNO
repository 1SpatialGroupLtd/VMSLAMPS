.ENTRY /CLD/ > see Common blocks

.INDEX ^^DCL command line interpretation
.INDEX ^^DCL command line interpretation> introduction
.INDEX ^^CLI 
.INDEX ^^Command line interpreter
.HL 1 ^^^&Introduction\&

.P 0
These routines enable the user to obtain a foreign command line using the VMS
Command Line Interpreter (CLI) and to parse that command line against the
definition contained in a related Command Language Definition (CLD) module.
This means that Laser-Scan utilities can appear to the user with full VMS
command syntax. 

.P 0
Routines are provided to
.INDEX ^^DCL command lines> parsing
.INDEX ^^DCL command lines> detection of qualifiers
.INDEX ^^DCL command lines> collection of arguments
.LIST " "
.LE; get and parse the command line (DCL__STARTUP)
.LE; just parse a command line (DCL__PARSE)
.LE; detect the presence of qualifiers (DCL__QUAL)
.LE; get arguments (DCL__DBL, DCL__INT, DCL__REAL, DCL__FILE, and DCL__STR)
.END LIST

.P 0
DCL__REAL provides an extension to normal VMS command decoding as it collects
real numbers from a command line. Similarly DCL__INT automatically expands
integer ranges specified with the syntax ^*n:m\*, where ^*n\* is the start
number and ^*m\* the stop number (inclusive). These routines (collectively
referred to here as the DCL__ routines) set up a common block to contain
the results of command decoding. 

.P 0
All the routines are longword functions which return with SS$__NORMAL if
they succeed and a system error code if they fail. Local error reporting within
the routines (using LIB$SIGNAL) may be invoked if desired, or, the status
of the function may be tested on return and errors reported using the users
own output routines.

.INDEX ^^DCL__STARTUP
.INDEX ^^DCL__PARSE
.INDEX ^^DCL__STARTUP> order of invocation
.INDEX ^^DCL__PARSE> order of invocation

.P 0
One of the initial routines DCL__STARTUP or DCL__PARSE must be invoked BEFORE
any of the other DCL__ routines can be used. 

.P 0
NOTE - for conducting command dialogues within a program (as for LITES2 or 
ISELAC) use the terminal I/O and command reading routines documented in other 
chapters.

.P 0
For details of how to create a CLD module, see the "Command Definition Utility"
chapter in the VMS Utilities Reference Manual. 

.P 0
.INDEX ^^DCL command line interpretation> examples
.INDEX Examples
For examples of programs using CLD modules and the DCL routines, see the
sources for the IMP utilties ISTART and IFILTER. 


.INDEX ^^DCL command line description
.HL 2 ^^^&Brief_ description_ of_ a_ command_ line\&
.INDEX ^^DCL command lines> description

.P 0
This section establishes the terminology used to describe command lines in the 
rest of this chapter.

.P 0
An example command line might have the form:
.INDEX ^^DCL routines> example command line
.INDEX ^^DCL command lines> example command line

.P 5
$# ICLIP## /OUTPUT=FRED_.IFF## BILL_.IFF

.P 0
In this example,

.LM +10
.P -10
ICLIP#####is the ^*verb\* - it specifies the action to be performed. For LSL 
programs, this will normally be a foreign command (ie ICLIP is defined as the 
symbol "$#LSL$EXE:ICLIP")
.P -10
/OUTPUT###is a ^*qualifier\* - it modifies the action of the program invoked 
by the ^*verb\*. It has the filename "FRED_.IFF" as its argument.
.P -10
BILL_.IFF##is a ^*parameter\* - it specifies what the program invoked by the
^*verb\* should act upon.
.LM -10

.P 0
A more complex example is:
.INDEX ^^DCL routines> example command line

.P 5
$# IMERGE## /LOG## /OUTPUT=OUTFILE.IFF## INFILE1.IFF/LAYER=(1,2) -
.I 5
$__# INFILE2.IFF/LAYER=3

.P 0
In this case, both INFILE1.IFF and INFILE2.IFF are parameters. However, 
each parameter has qualifiers associated with itself alone - the /LAYER 
qualifiers are ^*positional qualifiers\*, in that their meaning depends upon 
where they are found. Also note that the first /LAYER qualifier has a list of 
arguments, enclosed in parentheses and separated by commas.

.PAGE
.HL 1 ^^^&/CLD/_ -_ the_ common_ block\&
.INDEX ^^Common blocks> CLD
.INDEX ^^DCL routines> CLD common block

.P 0
The DCL__ common block is kept in the file
.P 10
LSL$CMNLSL:CLD.CMN
.P 0
and is defined as follows:


.LM +10

.P -10
public##-#long#parameter#^*MAX__FIL\*
.BR
the maximum number of filenames, either from command parameters or from the 
arguments for qualifiers - thus the length of the FILARY and FIL__LEN arrays
.P -10
public##-#long####^*NUMFIL\*
.BR
the number of filename arguments or parameters found
.P -10
public##-#char####^*FILARY(MAX__FIL)\*
holds the ^*NUMFIL\* filenames
.P -10
public##-#word####^*FIL__LEN(MAX__FIL)\*
.BR
holds the length of each filename in FILARY

.P -10
public##-#long#parameter#^*MAX__LONG\*
.BR
the maximum number of arguments that may be present for integer
arguments - thus the length of the IARRAY array
.P -10
public##-#long#parameter#^*MAX__REAL\*
.BR
the maximum number of arguments that may be present for real or real_*8
arguments - thus the length of the RARRAY and DBLRAY arrays
.P -10
public##-#long####^*NUMINT\*
.BR
the number of integer arguments found
.P -10
public##-#long####^*IARRAY(MAX__LONG)\*
.BR
holds the ^*NUMINT\* integer arguments

.P -10
public##-#long####^*NUMREA\*
.BR
the number of real arguments found
.P -10
public##-#long####^*RARRAY(MAX__REAL)\*
.BR
holds the ^*NUMREA\* real arguments

.P -10
public##-#long####^*NUMDBL\*
.BR
the number of real_*8 arguments found
.P -10
public##-#long####^*DBLRAY(MAX__REAL)\*
.BR
holds the ^*NUMDBL\* real_*8 arguments

.P -10
public##-#long#parameter#^*MAX__STR\*
.BR
the maximum number of arguments that may be present for string
arguments - thus the length of the CARRAY array
.P -10
public##-#long####^*NUMSTR\*
.BR
the number of string or character arguments found
.P -10
public##-#char####^*CARRAY(MAX__STR)\*
.BR
holds the ^*NUMSTR\* string or character arguments, each containing up to
128 characters
.P -10
public##-#word####^*STR__LEN(MAX__STR)\*
.BR
holds the length of each string in CARRAY

.LM -10

.PAGE
.HL 1 ^^^&The_ routines\&
.INDEX ^^DCL routines> description

.HL 2 ^^^&Get_ and_ parse_ the_ command_ line\&

.INDEX ^^DCL__STARTUP

.P 5
^*ok = DCL__STARTUP( verb, burst, cldname, report )\*

.LM +30
.P -25
out#-#long####^*ok\*#########SS$__NORMAL if it succeeds, and an appropriate
CLI$__ or LSL____ message if it fails
.I -25
#in#-#char####^*verb\*#######the command verb used to invoke this program
.I -25
#in#-#logical#^*burst\*######this is for use with positional qualifiers,
and should normally be false. Otherwise, see below.
.I -25
#in#-#long####^*cld_name\*###this is the 'name' of the CLD
module referred to by all the routines described here. It must be
declared EXTERNAL in the main program.
.I -25
#in#-#logical#^*report\*#####true if to allow DCL__STARTUP to report its own 
errors via LSL__PUTMSG
.LM -30

.P 0
Thus a typical call might be:

.P 10
RET = DCL__STARTUP( 'ICLIP', .FALSE., ICLIP__CLD, .TRUE. )

.P 0
The function works as follows:

.LIST
.LE; Calling LIB$GET__FOREIGN to get the command line.
.P 0
If no arguments were specified on the command line, then CLI$__PARSE prompts
for input, using the prompt specified in the CLD module.

.LE; If ^*burst\* is true, then DCL__COMMA is called to substitute spaces for
any commas separating the elements of the parameter lists (note - DCL__COMMA 
is an internal routine and is not further documented)

.LE; ^*verb\* is concatenated to the start of the command line
.P 0
The symbol used to invoke the program is removed from the beginning of the
line returned by LIB$GET__FOREIGN. However, the CLD requires that the command
verb be present at the start of a line to be parsed

.INDEX ^^CLI$DCL__PARSE
.LE; CLI$DCL__PARSE is called to parse the command line against 
the contents of the CLD module ^*cld__name\*

.LE; If any parameters are missing from the command string, then CLI$DCL__PARSE
will prompt for them with LIB$GET__INPUT, using the prompt specified for that
parameter in the CLD module
.INDEX ^^LIB$GET__INPUT
.END LIST

.P 0
A completely parsed command line is now available for decoding. In general,
the user has no need to see the actual command line, but if necessary the 
routine DCL__CML may be used to retrieve it.

.TP 10
.HL 3 ^^^&Bursting_ positional_ parameters\&

.INDEX ^^DCL command lines> parameters
.INDEX ^^DCL routines> bursting positional parameters

.P 0
If positional parameters are being used, then ^*burst\* can be used to control 
the decoding environment(s) returned.

.P 0
If ^*burst\* is true, then the commas separating the components of a parameter
list are replaced with spaces. This breaks the list into its component
parameters, each of which will then have a unique decoding environment for
decoding positionally dependent qualifiers. 

.P 0
If ^*burst\* is left false, then the unburst parameter list presents only one
decoding environment, which means that only the first of multiple qualifiers
which occur between the parameters will be read and decoded. 

.P 0
Note that although the command line will be typed by the user as a parameter
list, the CLD module should define one 'REQUIRED' and then up to 7 optional
parameters, none of which should be of VALUE (LIST). Also, if ^*burst\* is
true, then no output file parameter may be specified on the command line,
unless a fixed number of input files can be used. 

.HL 2 ^^^&Parse_ a_ command_ line_ provided_ by_ the_ program\&

.INDEX ^^DCL__PARSE

.P 5
^*ok = DCL__PARSE( string, verb, burst, cldname, report )\*

.LM +30
.P -25
out#-#long####^*ok\*#########SS$__NORMAL if it succeeds, and an appropriate
CLI$__ or LSL____ message if it fails
.I -25
#in#-#char####^*string*\#####the command line to be parsed
.I -25
#in#-#char####^*verb\*#######the command verb used to invoke this program
.I -25
#in#-#logical#^*burst\*######this is for use with positional qualifiers,
and should normally be false. Otherwise, see below.
.I -25
#in#-#long####^*cldname\*####this is the 'name' of the CLD
module referred to by all the routines described here. It must be
declared EXTERNAL in the main program.
.I -25
#in#-#logical#^*report\*#####true if to allow DCL__PARSE to report its own 
errors via LSL__PUTMSG
.LM -30

.P 0
Thus a typical call might be:

.P 10
RET = DCL__PARSE( TXTDSC, 'I2OSTF__2', .FALSE., ICLIP__CLD, .TRUE. )

.P 0
This routine is identical in its action to DCL__STARTUP, except step#1 of the
list of actions is omitted. That is, DCL__PARSE does not call LIB$GET__FOREIGN
to obtain a command line (however, note that if any parameters are missing,
CLI$DCL__PARSE will still prompt the user for them).

.P 0
Instead, it uses ^*string\* as the line to be parsed. DCL__PARSE is therefore
useful for parsing lines built by the program itself, or perhaps lines read
from other sources than SYS$INPUT: 

.P 0
If ^*string\* contains no significant characters, then CLI$__PARSE prompts
for input, using the prompt specified in the CLD module. This can be useful
in programs which must loop and obtain a new command line, rather than
exiting.

.TP 10
.HL 2 ^^^&Retrieve_ a_ parsed_ command_ line\&
.INDEX ^^DCL command lines> retrieval of parsed command line

.P 5
^*ok = DCL__CML( cmlstr, cmlen,  report )\*
.INDEX ^^DCL__CML
.LM +30
.P -25
out#-#long####^*ok\*#########SS$__NORMAL if it succeeds, and an appropriate
CLI$__ or LSL____ message if it fails
.I -25
out#-#char####^*cmlstr\*#####the command line, after parsing.
This must be a 1024 character variable
.I -25
out#-#long####^*cmlen\*######the length of the command line returned in
^*cmlstr\*
.I -25
#in#-#logical#^*report\*#####true if to allow DCL__CML to report its own 
errors via LSL__PUTMSG
.LM -30

.P 0
Thus a typical call might be:

.P 5
RET = DCL__CML( CMLSTR, CMLEN, .TRUE. )

.P 0
The function works by calling CLI$GET__VALUE, with key '$LINE', to retrieve 
the command line as typed by the user.


.TP 8
.HL 2 ^^^&Check_ presence_ of_ a_ command_ qualifier\&
.INDEX ^^DCL command lines> checking presence of qualifiers

.P 5
^*ok = DCL__QUAL( qualifier, had__qual, present, negated, report)\*
.INDEX ^^DCL__QUAL
.LM +30
.P -25
out#-#long####^*ok\*#########SS$__NORMAL if it succeeds, and an appropriate
CLI$__ or LSL____ message if it fails
.I -25
#in#-#char####^*qualifier\*##the name of the qualifier as defined in the CLD 
module - for example 'FEATURE__CODES' for /FEATURE_CODES
.I -25
out#-#logical#^*had__qual\*###true if the qualifier us present, or present by 
default, and false if it is absent or negated (eg /NOLOG)
.I -25
out#-#logical#^*present\*####true if the qualifier was detected within the
decoding environment of a parameter. 
.I -25
out#-#logical#^*negated\*####true if the qualifier was detected in a negated
form within the decoding environment of a parameter.
.I -25
#in#-#logical#^*report\*#####true if to allow DCL__CML to report its own 
errors via LSL__PUTMSG
.LM -30

.P 0
Thus a typical call might be:

.P 5
RET = DCL__QUAL( 'LOG', HAD__LOG, LOCPRES, LOCNEG, .TRUE. )

.P 0
The function works by:

.LIST
.LE; Calling CLI$PRESENT to determine whether the qualifier (eg /LOG)
is present
.INDEX ^^CLI$__PRESENT
.LE ;Setting HAD__LOG to true if the qualifier found or defaulted.

.END LIST

.P 0
Note that ^*present\* and ^*negated\* will only be set if the CLD module
definition for the qualifier contains the 'PLACEMENT=LOCAL' or
'PLACEMENT=POSITIONAL' conditionals. If qualifiers are to have local meaning
then a call to DCL__FILE should be made before the call to DCL__QUAL to detect
the presence and position of the parameter (it is assumed that this will
normally be a filename!) and so define the decoding environment of that
parameter. 


.TP 8
.HL 2 ^^^&Get_ integer_ arguments\&
.INDEX ^^DCL routines> integer arguments

.P 5
^*ok = DCL__INT( qualifier, report )\*
.INDEX ^^DCL__INT
.LM +30
.P -25
out#-#long####^*ok\*#########SS$__NORMAL if it succeeds, and an appropriate
CLI$__ or LSL____ message if it fails
.I -25
#in#-#char####^*qualifier\*##the name of the qualifier as defined in the CLD 
module - for example 'FEATURE__CODES' for /FEATURE_CODES=
.I -25
#in#-#logical#^*report\*#####true if to allow DCL__INT to report its own 
errors via LSL__PUTMSG
.LM -30

.P 0
Thus a typical call might be:

.P 5
RET = DCL__INT( 'FEATURE__CODES', .TRUE. )

.P 0
The function works as follows:

.LIST
.LE; CLI$GET__VALUE is called to determine whether any arguments are present
for this qualifier

.LE; For each argument, it checks that the argument is a valid integer, or 
integer value range. An integer value range has the syntax ^*n:m\*, where
^*n\* is the start number and ^*m\* the stop number (inclusive). 

.LE; The argument is read as a character string using an internal read - this
is done to facilitate the flexible range decoding mechanism employed in 
DCL__INT. Note that it must thus be specified with "TYPE=$QUOTED__STRING" in
the CLD module. 

.LE; Any value ranges are expanded.

.LE; The results are placed in /CLD/ IARRAY() and the number of integers
read (or expanded from range specifications) is held in /CLD/ NUMINT. 

.LE; DCL__INT continues to read and expand arguments in a qualifier
argument list until it is exhausted.

.END LIST

.P 0;DCL__INT expands ranges by reference to the following rules:
.LIST " "
.LE ;Storage exists for only MAX__LONG integers (currently 1024) 
.LE ;The values defining the range are included in the expansion.
.LE ;The syntax :n is permissible, DCL__INT will assume that the range starts at
zero and will expand upwards to n.
.LE ;The syntax n: is not permissible, the MAX__LONG parameter is currently 
set to 1024, not infinity!
.LE ;If negative values are specified then the most negative (!) must be 
specified first.
.END LIST

.P 0;As an example our "typical call" above used on:
.LM +5
.NOFILL
.B
/FEATURE__CODES=(17,:3,11:13,91)
.B
.I -5
would yield:
.B
NUMINT=9
.B
IARRAY(1)=17##IARRAY(2)=0###IARRAY(3)=1  
IARRAY(4)=2###IARRAY(5)=3###IARRAY(6)=11
IARRAY(7)=12##IARRAY(8)=13##IARRAY(9)=91
.B
.FILL
.LM -5

.TP 8
.HL 2 ^^^&Get_ real_ arguments\&
.INDEX ^^DCL routines> real arguments

.P 5
^*ok = DCL__REAL( qualifier, report)\*
.INDEX ^^DCL__REAL
.LM +30
.P -25
out#-#long####^*ok\*#########SS$__NORMAL if it succeeds, and an appropriate
CLI$__ or LSL____ message if it fails
.I -25
#in#-#char####^*qualifier\*##the name of the qualifier as defined in the CLD 
module - for example 'TOLERANCE' for /TOLERANCE=
.I -25
#in#-#logical#^*report\*#####true if to allow DCL__REAL to report its own 
errors via LSL__PUTMSG
.LM -30

.P 0
Thus a typical call might be:

.P 5
RET = DCL__REAL( 'TOLERANCE', .TRUE. )

.P 0
The function works by:

.LIST
.LE; Calling CLI$GET__VALUE to determine whether any argument(s) is present
on the qualifier.

.LE; Taking each of the arguments in turn and checking that they contain
valid numeric values (D floating, E floating and G floating numbers are 
NOT supported).

.LE; Performing an internal read on the arguments which are treated as character
strings (and must be specified with "TYPE=$QUOTED__STRING" in the CLD module).
This is because DCL does not currently support the real number type.

.LE; Continues to read and decode arguments in a qualifier argument list until
the list is exhausted. 

.LE; Places the results in /CLD/RARRAY() and the number of reals
read in /CLD/NUMREA

.END LIST

.P 0;As an example our "typical call" above used on:
.LM +5
.NOFILL
.B
/TOLERANCE=17.8
.B
.I -5
would yield:
.B
NUMREA=1
.B
RARRAY(1)=17.8
.B
.FILL
.LM -5

.P 0
Up to MAX__REAL (currently 128) real numbers may be read from a single
qualifier and placed in RARRAY() 
.FILL

.TP 8
.HL 2 ^^^&Get_ real_*8_ arguments\&
.INDEX ^^DCL routines> real_*8 arguments

.P 5
^*ok = DCL__DBL( qualifier, report)\*
.INDEX ^^DCL__DBL
.LM +30
.P -25
out#-#long####^*ok\*#########SS$__NORMAL if it succeeds, and an appropriate
CLI$__ or LSL____ message if it fails
.I -25
#in#-#char####^*qualifier\*##the name of the qualifier as defined in the CLD 
module - for example 'OFFSET' for /OFFSET=
.I -25
#in#-#logical#^*report\*#####true if to allow DCL__DBL to report its own 
errors via LSL__PUTMSG
.LM -30

.P 0
Thus a typical call might be:

.P 5
RET = DCL__DBL( 'OFFSET', .TRUE. )

.P 0
The function works by:

.LIST
.LE; Calling CLI$GET__VALUE to determine whether any argument(s) is present
on the qualifier.

.LE; Taking each of the arguments in turn and checking that they contain
valid numeric values (D floating, E floating and G floating numbers are 
NOT supported).

.LE; Performing an internal read on the arguments which are treated as character
strings (and must be specified with "TYPE=$QUOTED__STRING" in the CLD module).
This is because DCL does not currently support the real_*8 number type.

.LE; Continues to read and decode arguments in a qualifier argument list until
the list is exhausted. 

.LE; Places the results in /CLD/DBLRAY() and the number of real_*8 numbers
read in /CLD/NUMDBL

.END LIST

.P 0;As an example our "typical call" above used on:
.LM +5
.NOFILL
.B
/OFFSET=95634451217.84337
.B
.I -5
would yield:
.B
NUMDBL=1
.B
DBLRAY(1)=95634451217.84337
.B
.FILL
.LM -5

.P 0
Up to MAX__REAL (currently 128) real_*8 numbers may be read from a single
qualifier and placed in DBLRAY() 

.TP 8
.HL 2 ^^^&Get_ string_ arguments\&
.INDEX ^^DCL routines> string arguments

.P 5
^*ok = DCL__STR( qualifier, report)\*
.INDEX ^^DCL__STR
.LM +30
.P -25
out#-#long####^*ok\*#########SS$__NORMAL if it succeeds, and an appropriate
CLI$__ or LSL____ message if it fails
.I -25
#in#-#char####^*qualifier\*##the name of the qualifier as defined in the CLD 
module - for example 'LOOK__FOR' for /LOOK__FOR=
.I -25
#in#-#logical#^*report\*#####true if to allow DCL__STR to report its own 
errors via LSL__PUTMSG
.LM -30

.P 0
Thus a typical call might be:

.P 5
RET = DCL__STR( 'LOOK__FOR', .TRUE. )

.P 0
The function works by:

.LIST
.LE; Calling CLI$GET__VALUE to determine whether any argument(s) is present
on the qualifier.

.LE; Performing an internal read on the arguments which are treated as character
strings (and must be specified with "TYPE=$QUOTED__STRING" in the CLD module).

.LE; continuing to read arguments in a qualifier argument list 
until the list is exhausted.

.LE; Placing the results in /CLD/CARRAY() and the number of strings
read in /CLD/NUMSTR. The length of each string is stored in STR__LEN().

.END LIST

.P 0
As an example our "typical call" above used on:
.LM +5
.NOFILL
.B
/LOOK__FOR=(GOOD__PUBS,WINE,WOMEN,SONG)
.B
.I -5
would yield:
.B
NUMSTR=4
.B
CARRAY(1)(1:STR__LEN(1)) = "GOOD__PUBS"
CARRAY(2)(1:STR__LEN(2)) = "WINE"
CARRAY(3)(1:STR__LEN(3)) = "WOMEN"
CARRAY(4)(1:STR__LEN(4)) = "SONG"
.B
STR__LEN(1) = 9
STR__LEN(2) = 4
STR__LEN(3) = 5
STR__LEN(4) = 4
.B
.FILL
.LM -5

.P 0
Up to MAX__STR (currently 16) strings may be read from a single
qualifier and placed in CARRAY() 


.TP 8
.HL 2 ^^^&Get_ filename_ arguments\&
.INDEX ^^DCL routines> filename arguments

.P 5
^*ok = DCL__FILE( label, default, absent, list, report )\*

.INDEX ^^DCL__FILE

.LM +30
.P -25
out#-#long####^*ok\*#########SS$__NORMAL if it succeeds, and an appropriate
CLI$__ or LSL____ message if it fails
.I -25
#in#-#char####^*label\*######the name of the the name of the qualifier or
parameter as defined in the CLD module - for example 'OUTPUT' for
/OUTPUT=file-spec, or perhaps 'INPUT__FILE__SPEC' for an input file parameter. 
.I -25
#in#-#char####^*default\*####the default file specification
against which the first file-spec detected by DCL__FILE will be parsed. A typical
value for this argument might be 'LSL$IF:IFF.IFF;0'. 
If the default file is to be that with the latest version 
number, version ';0' should be specified eg 'LSL$IF:IFF.IFF;0'
The default "rolls through" the list of files - that is, the first file
is used as the default for the second, etc. This matches the normal VMS
approach.
.I -25
out#-#logical#^*absent\*#####returned true if only a single file-spec was
expected for parameter ^*label\* (or qualifier ^*label\*), but after searching
was found to be absent
.I -25
#in#-#logical#^*list\*#######controls how DCL__FILE parses the filenames - see 
below
.I -25
#in#-#logical#^*report\*#####true if to allow DCL__CML to report its own 
errors via LSL__PUTMSG
.LM -30

.P 0
Thus a typical call might be:

.P 0
##### RET = DCL__FILE ( 'OUTPUT', 'LSL780::LSL$IF:IFF.IFF;0',
.BR
####_& ### # ######## # #ABSENT, .TRUE., .TRUE. )

.P 0
The function works by:

.LIST
.LE; Calling CLI$GET__VALUE to determine whether any argument(s) is present
on the qualifier, the parameter is present (it had better be to have got 
this far!).

.LE; Performing an internal read on the arguments which are treated as character
strings (and must be specified with "TYPE=$FILE" in the CLD module).

.LE; Parsing the string read against the default string supplied (if any) - 
default version numbers are allowed and should be supplied. If the default
file is to be that with the latest version number, version ';0' should be
specified eg 'LSL$IF:IFF.IFF;0'

.LE; continuing to read file-spec arguments in a qualifier argument 
list until the list is exhausted.

.LE; Placing the results in /CLD/FILARY() and the number of file-specs
read in /CLD/NUMFIL. The length of each file-spec is stored in FIL__LEN().

.END LIST

.P 0
As an example our "typical call" above used on:
.LM +5
.NOFILL
.B
/OUTPUT=DESTITUTION.MER
.B
.I -5
would yield:
.B
NUMFIL=1
.B
FILARY(1)(1:FIL__LEN(1)) = "LSL780::LSL$IF:DESTITUTION.MER;0"
FIL__LEN(1)=32
.B                               
.FILL
.LM -5

.P 0
Up to MAX__FIL (currently 16) file-specs may be read from a single
qualifier or parameter and placed in FILARY() 

.HL 3 ^^^&Controlling_ parsing_ with_ ^*list\*\&

.P 0
If ^*list\* is true then DCL__FILE will attempt to read and parse all the
files in the parameter list or qualifier argument list specified by ^*label\*.

.P 0
If this action is required, then the CLD module entry for the parameter or
qualifier pointed to by ^*label\* should contain the 'VALUE(LIST)' conditional.

.P 0
If ^*list\* is specified as false then DCL__FILE will only attempt to read and
parse one file-spec (or the first file-spec only in a parameter list or list
of qualifier arguments). 

.P 0
^*list\* should be set .FALSE. if reading a file parameter for which
positionally dependent qualifiers may be available. 


.HL 1 ^^^&Creating_ a_ CLD_ file_ object_ module.\&
.INDEX ^^DCL routines> creating a CLD object module

.P 0
In order to use the LSL__DCL routines your program must be linked with a
CLD object module containing the definitions of the command structure of the
program. To create this use the commands: 
.INDEX ^^CLD file> compiling
.INDEX ^^CLD file> ident
.INDEX ^^CLD file> using ADC
.INDEX ^^ADC pre-compiler> use with CLD files
.NO FILL
.B 
$ ADC _<file_>.TMP=_<file_>.CLD
$ SET COMMAND/OBJECT=_<object-file_>  _<file_>.TMP
$ PVV _<object-file_>
$ DELETE ADC.IDE;*, _<file_>.TMP;*
.FILL

.P 0
Where _<file_>.CLD is the name of the file containing your command language
definitions for the program.


.HL 1 ^^^&User_ interface_ service_ routines\&

.P 0;This section contains service routines which are often needed during or
immediately after interpretation of the DCL command line. They are
designed to ensure that a common style of user interface is maintained between
Laser-Scan programs.

.P 0;Two qualifiers which are standard features of Laser-Scan utility program
command lines are /OUTPUT and /LITES2. Both require a file to be opened and an
explanatory header to be written to the file. 

.P 0;Two routines are provided to facilitate log and LCM file opening and 
header construction. They have two purposes:

.LIST
.LE ;to simplify and standardise the process of opening the files and
then gathering and formatting standard header information. 

.LE ;to standardise the messages output by programs which are opening log
and LCM files.
.END LIST 
.TP 8
.HL 2 ^^^&Open_ and_ then_ write_ header_ into_ a_ /LITES2_ LCM_ file\*

.INDEX ^^DCL routines> LCM__OPEN

.P 5
^*ok = LCM__OPEN( lun, file-spec, range, log )\*
.INDEX ^^LCM__OPEN
.LM +30
.P -25
out#-#long####^*ok\*#########LSL$__NORMAL if it succeeds, and an appropriate
CLI$__ or LSL____ message if it fails. (All error reporting is ^*always\* done
by LCM__OPEN itself).
.I -25
#in#-#word####^*lun\*########the lun to be assigned to the LCM file
when it is opened using FLWOPN
.I -25
#in#-#char####^*file-spec\*##the specification of the LCM file to be opened
.I -25
#in#-#real####^*range(4)\*###the coordinate range of the data to be written to
the LCM file. Used subsequently to define the extent of the sectors produced by
the LITES2 LCMORG utility. 
.I -25
#in#-#logical#^*log\*########if .TRUE. causes LCM__OPEN to report the
successful opening of the LCM file.
.LM -30

.P 0
Thus a typical call might be:

.P 5
RET = LCM__OPEN( 2, 'LSL$LITES2CMD:EXAMPLE.LCM;0', RANGE, LOG )

.P 0
The function works as follows:

.LIST
.LE ;Calling FLWOPN to create and open the LCM file

.LE ;Calling DCL__CML to get the whole command line string.

.LE ;Calling SYS$GETJPIW to get the process information required for the header.

.LE ;Selecting the newly created LCM file for write using FLWSEL.

.LE ;Writing the values held in RANGE in LCMORG format to the LCM file.

.LE ;Writing the header information to the LCM file using FLWRTF and FLWSTR

.LE ;Chopping the command line string into _<80 byte records at
appropriate command element positions such as commas, solidi and spaces.

.LE ;Writing the command line records to the LCM file using FLWRTF and FLWSTR.

.END LIST 
.P 0
As an example, our "typical call" above used in conjunction with the
command line:
.LM +5
.NOFILL
.B
$#EXAMPLE JOES__FILE.IFF;9 JOEFILE/LAYER=12/LITES2=LSL$LITES2CMD:EG.LCM
.LM -5
.FILL
.P 0;will result in the creation of the LITES2 LCM file LSL$LITES2CMD:EG.LCM;0
which will typically contain a header of the form: 
.B 2
.TP 15
.LITERAL
%POSITION     0.000     0.000
%POSITION 15014.115 15002.576
%ABANDON
%MESSAGE 
%MESSAGE                L I T E S 2   C O M M A N D   F I L E
%MESSAGE 
%MESSAGE                              created by
%MESSAGE 
%MESSAGE =========================== E X A M P L E ============================ 
%MESSAGE 
%MESSAGE EXAMPLE invoked by TIM using terminal TTE4: at 16-APR-1987 09:25:34.2
%MESSAGE  
%MESSAGE Command line:
%MESSAGE  
%MESSAGE $ EXAMPLE JOES__FILE.IFF;9 JOEFILE/LAYER=12/LITES2=LSL$LITES2CMD:EG.LCM
%MESSAGE 
%MESSAGE ======================================================================
%MESSAGE 
%ABANDON
%ABANDON

.END LITERAL
.FILL
.JUSTIFY
.P 0;This header may subsequently be followed by any valid LITES2 commands. For
a description of LITES2 commands available see the LITES2 Reference Manual.

.P 0;Note that LCM__OPEN will leave FILEIO write selection directed to
the LCM file. Use the FILEIO FLWSEL routine to select an alternative file for
write.

.P 0;Be warned that LCM__OPEN will report all errors itself. The user need
only test that the return value is LSL__NORMAL.

.TP 8
.HL 2 ^^^&Open_ and_ then_ write_ header_ into_ a_ /OUTPUT_ log_ file\*

.INDEX ^^DCL routines> LOG__OPEN

.P 5
^*ok = LOG__OPEN( lun, file-spec, log )\*
.INDEX ^^LOG__OPEN
.LM +30
.P -25
out#-#long####^*ok\*#########LSL$__NORMAL if it succeeds, and an appropriate
CLI$__ or LSL____ message if it fails. (All error reporting is ^*always\* done
by LOG__OPEN itself).
.I -25
#in#-#word####^*lun\*########the lun to be assigned to the LOG file
when it is opened using FLWOPN
.I -25
#in#-#char####^*file-spec\*##the specification of the log file to be opened
.I -25
#in#-#logical#^*log\*########if .TRUE. causes LOG__OPEN to report the
successful opening of the log file.
.LM -30

.P 0
Thus a typical call might be:

.P 5
RET = LOG__OPEN( 2, 'HERE:EXAMPLE.LIS;0', LOG )

.P 0
The function works as follows:

.LIST
.LE ;Calling FLWOPN to create and open the log file

.LE ;Calling DCL__CML to get the whole command line string.

.LE ;Calling SYS$GETJPIW to get the process information required for the header.

.LE ;Selecting the newly created LCM file for write using FLWSEL.

.LE ;Writing the header information to the log file using FLWRTF and FLWSTR

.LE ;Chopping the command line string into <80 byte records at
appropriate command element positions such as commas, solidi and spaces.

.LE ;Writing the command line records to the LOG file using FLWRTF and FLWSTR

.END LIST 
.P 0
As an example our "typical call" above used in conjunction with the
command line:
.LM +5
.NOFILL
.B
$#EXAMPLE JOES__FILE.IFF;9 JOEFILE/LAYER=12/OUTPUT=HERE:EG.LIS
.LM -5
.FILL
.P 0;will result in the creation of the /OUTPUT LOG file HERE:EG.LIS;0 which
will typically contain a header of the form: 
.B 2
.TP 10
.LITERAL
=============================== E X A M P L E =================================

EXAMPLE invoked by TIM using terminal LTA85: at 16-APR-1987 15:47:57.96        

Command line:

$ EXAMPLE JOES__FILE.IFF;9 JOEFILE/LAYER=12/OUTPUT=HERE:EG.LIS

===============================================================================

.END LITERAL
.FILL
.P 0;Note that LOG__OPEN will leave FILEIO write selection directed to
the log file. Use the FILEIO FLWSEL routine to select an alternative file for
write.

.P 0;Be warned that LOG__OPEN will report all errors itself. The user need
only test that the return value is LSL__NORMAL.
