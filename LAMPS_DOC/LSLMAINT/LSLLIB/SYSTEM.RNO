.!*
.!* 'System' routines
.!*

.INDEX ^^System routines
.INDEX ^^System facilities, see system routines

.HL 1 ^^^&Setting_ up_ a_ control-C_ AST\&
.INDEX ^^CONTROL-C AST
.INDEX ^^System routines> CONTROL-C AST

.P 5
^*call SET__CTRLC__AST( [routine], [input] )\*
.INDEX ^^SET__CTRLC__AST
.INDEX ^^System routines> SET__CTRLC__AST

.LM +31
.P -25
#in#-#external#^*routine\*###the routine to set up. Defaults to the last 
used AST__routine
.I -25
#in#-#char#####^*input\*#####the name of the input channel to place the QIO 
on. Defaults to SYS$INPUT, or the last ^*input\*
.LM -31

.P 0
SET__CTRLC__AST places a control-C AST routine on an input channel. Then, if 
control-C is received on that channel, the AST routine will be called.

.P 0
If ^*routine\* is given, then it is used as the AST routine, and must be 
declared EXTERNAL in the calling Fortran routine. If it is not given, then 
the value given in the last call of SET__CTRLC__AST is used. If this is the 
first call, then address zero (an unset AST) is used.

.P 0
If ^*input\* is given, then that is the name of the input channel to place the 
QIO request for the AST on. If it is not given, then the value given in the 
last call of SET__CTRLC__AST is used. If this is the first call, then 
SYS$INPUT is used. ^*input\* should be omitted when re-enabling an AST
on a channel - if it is given, then another channel will be needlessly
assigned.

.P 0
If an error occurs within SET__CTRLC__AST, then it will use LIB$SIGNAL to 
output the appropriate system error message, and will then return.

.P 0
.INDEX ^^System routines> SET__CTRLC__AST> operation
The following points should be noted:

.LIST
.LE; ASTs will queue up. Thus, if more than one control-C AST is defined, they 
will all be called (in last in, first out order) when a control-C is received
.LE; It is not possible to place a control-C AST on an input channel which
is not a terminal. Routine TEST__TERM may be used to test whether a channel
is a terminal or not.
.LE; Control-C ASTs are one-shot. Once triggered, the AST must be re-enabled,
possibly by calling SET__CTRLC__AST with no arguments. This can conveniently
be done in the AST routine itself.
.END LIST

.TP 10
.HL 1 ^^^&Setting_ up_ an_ out-of-band_ character_ AST\&
.INDEX ^^OUT-OF-BAND CHARACTER AST
.INDEX ^^System routines> OUT-OF-BAND CHARACTER AST

.P 5
^*call SET__OUTBAND__AST( [routine], [mask], [include], [input] )\*
.INDEX ^^SET__OUTBAND__AST
.INDEX ^^System routines> SET__OUTBAND__AST

.LM +31
.P -25
#in#-#external#^*routine\*###the routine to set up. If omitted, then the
AST is cancelled (provided that ^*input\* is omitted also).
.I -25
#in#-#long#####^*mask\*######a mask containing bits set corresponding to the
control characters to trap. For example, to trap Control-C and Control-D, set
bits 3 and 4, giving a value of 8+16=24. Defaults to zero, which is only
useful if cancelling the AST.
.I -25
#in#-#logical##^*include\*###if true then any trapped control character is
still included in the input stream from the device. If omitted or false, then
the character is not included.
.I -25
#in#-#char#####^*input\*#####the name of the input channel to place the QIO 
on. Defaults to SYS$INPUT, or the last ^*input\*
.LM -31

.P 0
SET__OUTBAND__AST places an out-of-band character AST routine on an input
channel. If any of the selected control characters are received, then the AST
routine will be called. The particular characters are passed to the AST
routine as the AST parameter. This parameter value (0-31) may be accessed as
_%LOC(first argument) within the AST routine.

.P 0
One reason for using SET__OUTBAND__AST is to prevent control-C from
aborting any input/output operations in progress on the channel. This
can cause certain graphics devices to hang because partial commands are
received.
Provided that ^*include\* is false, then the control characters are not seen by
any control-C handlers, or system handlers. See the DEC VMS system
programming (IO Part 1) manual (terminal drivers) for details.

.P 0
If ^*routine\* is given, then it is used as the AST routine, and must be 
declared EXTERNAL in the calling Fortran routine. If it is not given, and
^*input\* is not given either, then any AST is cancelled.

.P 0
If ^*input\* is given, then that is the name of the input channel to place the 
QIO request for the AST on. If it is not given, then the value given in the 
last call of SET__OUTBAND__AST is used. If this is the first call, then 
SYS$INPUT is used.

.P 0
If an error occurs within SET__OUTBAND__AST, then it will use LIB$SIGNAL to 
output the appropriate system error message, and will then return.

.P 0
.INDEX ^^System routines> SET__OUTBAND__AST> operation
The following points should be noted:

.LIST
.LE; Only one AST may be declared on a given channel, but more than one
can be enabled by explicitly giving the ^*input\* argument.
.LE; It is not possible to place an out-of-band character AST on an input
channel which is not a terminal. Routine TEST__TERM may be used to test whether
a channel is a terminal or not. 
.END LIST

.TP 10
.HL 1 ^^^&GETID_ -_ get_ LSL_ standard_ date_ stamp\&
.INDEX ^^LSL standard date stamp
.INDEX ^^Date stamp
.P 5
^*call GETID( date )\*
.INDEX ^^System routines> GETID
.INDEX ^^GETID

.LM +30
.P -25
out#-#char####^*date\*#######receives the date stamp - 6 characters long
.LM -30

.P 0
This routine produces the LSL standard 6 character IDENT for today. This is in 
the form ^*ddMMyy\*, where
.INDEX ^^IDENT
.LIST " "
.LE; ^*dd\* is from 01 to 31 (as appropriate for the month!)
.LE; ^*MM\* is one of JA, FE, MR, AP, MY, JN, JL, AU, SE, OC, NO or DE
.LE; ^*yy\* is up to 73 (representing a year between 1974 and 2073)
.END LIST



.HL 1 ^^^&Testing_ a_ device's_ status\&
.INDEX ^^Device status
.INDEX ^^System routines> Device status

.HL 2 ^^^&Is_ device_ mounted_ /FOREIGN?\&
.INDEX ^^Device status> is it /FOREIGN
.INDEX ^^System routines> Device status> is it /FOREIGN

.P 5
^*ok = TEST__FOREIGN( file, yes, ierr )\*
.INDEX ^^TEST__FOREIGN
.INDEX ^^System routines> TEST__FOREIGN

.LM +30
.P -25
out#-#long####^*ok\*######LSL____NORMAL if routine succeeds, otherwise see
below
.I -25
#in#-#char####^*file\*####the name of the file/device to check
.I -25
out#-#logical#^*yes\*#####set true if the device is mounted /FOREIGN
.I -25
out#-#long####^*ierr\*####system error code from $GETDVI call
.LM -30

.P 0
TEST__FOREIGN uses the $GETDVI system service to find out if the device
name in ^*file\* is mounted foreign. It looks for the characteristic DVI$__FOR.

.P 0
$GETDVI will logically translate ^*file\*, and treat the translation as
a device name. Note that if there is a colon (":") in the filename, then
any characters after the colon are ignored. If ^*file\* starts with an
underline ("__") then it will be treated as a physical device name, and
will not be logically translated.

.P 0
If the device is mounted foreign (ie by the MOUNT/FOREIGN command) then
^*yes\* is returned as true, and otherwise it is returned as false.

.P 0
The following values of ^*ok\* may be returned

.LM +18
.P -18
LSL____NORMAL#####-#success#-#an appropriate value will be returned in ^*yes\*
(but see below).
.I -18
LSL____NOSUCHDEV##-#failure#-#the device does not exist. ^*yes\* is undefined.
.I -18
LSL____SYSERR#####-#failure#-#the actual error returned by $GETDVI is returned
in ^*ierr\*. ^*yes\* is undefined.
.LM -18

.P 0
The result of calling the $GETDVI system service is always returned in
^*ierr\*. Note that if ^*file\* does not contain a device name, then ^*ierr\*
will be set to SS$__IVDEVNAM (invalid device name).

.P 0
The function interprets this condition to mean that it should 

.BLANK
.LIST 0,"*"
.LE; set ^*yes\* to false
.LE; return ^*ok\* as LSL____NORMAL
.END LIST

.P 0
assuming that a filename was specified, which did not contain a device name
and was therefore on the current device (presumably a disk).

.HL 2 ^^^&Is_ device_ a_ terminal?\&
.INDEX ^^Device status> is it a terminal
.INDEX ^^System routines> Device status> is it a terminal

.P 5
^*ok = TEST__TERM( file, yes, ierr )\*
.INDEX ^^TEST__TERM
.INDEX ^^System routines> TEST__TERM

.LM +30
.P -25
out#-#long####^*ok\*######LSL____NORMAL if routine succeeds, otherwise see
above
.I -25
#in#-#char####^*file\*####the name of the file/device to check
.I -25
out#-#logical#^*yes\*#####set true if the device is a terminal
.I -25
out#-#long####^*ierr\*####system error code from $GETDVI call
.LM -30

.P 0
TEST__TERM uses the $GETDVI system service to find out if the device
name in ^*file\* is a terminal device. It is identical to TEST__FOREIGN,
except that it looks for the characteristic DVI$__TRM.


.TP 10
.HL 1 ^^^&Check_ for_ presence_ of_ an_ argument\&
.INDEX ^^System routines> checking for presence of arguments
.INDEX ^^Argument presence checks

.HL 2 ^^^&Optional_ arguments_ in_ Fortran\&
.INDEX ^^System routines> checking for presence of arguments> Fortran
.INDEX ^^Argument presence checks> Fortran

.P 0
This routine can be used to check for an absent argument, allowing Fortran 
routines to implement optional arguments.

.P 5
^*yes = HAVE__I__AN__ARG( argnum )\*

.INDEX ^^System routines> HAVE__I__AN__ARG
.INDEX ^^HAVE__I__AN__ARG

.LM +30
.P -25
out#-#logical#^*yes\*########true if argument present, false otherwise
.I -25
#in#-#long####^*argnum\*#####number of the argument to check
.LM -30

.P 0
This routine checks the calling routines argument pointer, to see if argument 
number ^*argnum\* was supplied to the routine. The value of ^*yes\* is set as 
follows:

.LIST " "
.LE; false if ^*argnum\* is zero - argument zero is always absent (!)
.LE; false if the ^*argnum\*th argument is missing
.LE; true# if the ^*argnum\*th argument is present
.END LIST

.P 0
.INDEX ^^System routines> HAVE__I__AN__ARG> problems
The following problem should be noted:

.LIST "*"
.LE; If the argument is declared as a character string, then the Fortran 
optimiser performs actions which assume that the argument is present. If the 
argument is then not passed, the program will fall over.
.END LIST 0

.P 0
It is possible that future versions of Fortran might extend this problem to
other data-types. For maximum safety, restrict optional arguments to byte, word
or longword quantities (ie BYTE, LOGICAL, INTEGER, REAL), and do not use it for
arrays. 

.TP 10
.HL 2 ^^^&Optional_ arguments_ in_ MACRO-32\&
.INDEX ^^System routines> checking for presence of arguments> MACRO-32
.INDEX ^^Argument presence checks> MACRO-32

.P 5
^*JSB VIO$1ST\*
.INDEX ^^System routines> VIO$1ST
.INDEX ^^VIO$1ST

.P 0
This routine initialises the argument handling interface, and must be called 
before the presence of any arguments is checked. Register R11 is used to hold 
a count of the number of arguments found so far, and VIO$1ST simply 
clears that register.

.P 5
^*JSB VIO$GNA\*
.INDEX ^^System routines> VIO$GNA
.INDEX ^^VIO$GNA

.P 0
This is the routine which is used to get the next argument. Before calling it, 
VIO$1ST must have been used to initialise argument handling, and R11 must 
contain the number of arguments so far obtained. The routine first increments 
R11, and if the current argument is present, the carry bit in the Program 
Status Word is cleared and the address of the argument is returned in R0. If 
there are no arguments left, or if the current argument is missing, the carry 
bit in the Program Status Word is set and R0 is left untouched. It is 
imperative that the contents of R11 are not disturbed between calls to VIO$GNA.

.HL 3 ^^^&Example\&

.INDEX ^^System routines> VIO$1ST> example
.INDEX ^^System routines> VIO$GNA> example

.BLANK
.NOFILL
	JSB	G_^VIO$1ST		; basic initialisation
	MOVAL	DEFAULT,R0		; address of default
	JSB	G_^VIO$GNA		; get first argument
	PUSHL	R0			; save it 
	JSB	G_^VIO$GNA		; and next arg (no default)
	BCS	ERROR			; missing arg error
	...
.FILL

.P 0
In this example, DEFAULT is the default to use in lieu of an argument, so it 
is put into R0 after argument handling initialisation. The first argument is 
requested, and if there isn't one, R0 will still contain the default. R0 can 
therefore be saved for later use with no further tests necessary. The next 
argument is then requested, and this time the carry bit is tested to see if it 
was actually there. If the carry bit is set, indicating that the argument was 
missing, execution branches to the label ERROR.

.P 0
Note that general mode addressing (G_^) should be used when calling all
LSLLIB routines from Macro, and also when referencing LSLLIB common
variables.

.TP 10
.HL 1 ^&^^JPINFO_ -_ print_ process_ information\&
.INDEX ^^Process information
.INDEX ^^System routines> JPINFO

.P 5
^*call JPINFO\*
.INDEX ^^JPINFO
.INDEX ^^SYS$GETJPI
.P 0
This subroutine will call the SYS$GETJPI system service to get the current
user name, process name, terminal name, and image name. It then prints these
out using WRITEF.

.TP 10
.HL 1 ^&^^LSL__TMRINI_ -_ set_ up_ a_ timer_ exit_ handler\&

.INDEX ^^System routines> TMRINI
.INDEX ^^Timer exit handler
.INDEX ^^Exit handler> timer
.P 5
^*call LSL__TMRINI\*
.INDEX ^^LSL__TMRINI

.P 0
This subroutine calls LIB$INIT__TIMER, and then declares an
exit handler which will print timer statistics using LIB$SHOW__TIMER
when the program exits.

.P 0
The exit handler will get called on image exit unless the program is killed by
CTRL/Y followed by STOP.

.INDEX ^^Common EXIT__HANDLER
.INDEX ^^Exit handler> common block
.P 0
The common file LSL$CMNLSL:EXIT__HANDLER.CMN contains the four longword
description block DESBLK and the longword EXIT__STATUS. The former is required
if the exit handler is to be cancelled, and the latter is where the exit
handler will return its exit status.

.P 0
NOTE that LSL__TMRINI is called by LSL__INIT (unless the ^*timer\* argument is 
false).

.TP 10
.HL 1 ^&^^TRNALL_ -_ recursively_ translate_ a_ logical_ name\&
.INDEX ^^System routines> TRNALL
.INDEX ^^Logical names> translation
.INDEX ^^Logical names> and TRNALL
.INDEX ^^Logical names
.P 5
^*ret = TRNALL( lognam , translation )\*
.INDEX ^^TRNALL

.LM +30
.P -25
out#-#long##^*ret\*##########SS$__NORMAL if the logical name translation succeeds, otherwise see below
.I -25
#in#-#char##^*lognam\*#######the logical name to be translated
.I -25
out#-#char##^*translation\*##contains the result of logical name 
translation
.LM -30

.P 0
Translates a logical name recursively until it will translate no further.

.P 0
The following values of ^*ret\* may be returned:
.LM +18
.P -18
SS$__NORMAL######-#success#-#the translation of the logical name will be
returned in ^*translation\* 
.I -18
SS$__INSFARG#####-#failure#-#insufficient arguments supplied to TRNALL
.I -18
SS$__NOLOGNAM####-#failure#-#the logical name doesn't translate at all
.I -18
SS$__RESULTOVF###-#failure#-#the result of logical name translation overflowed
the supplied character string ^*translation\*
.LM -18
.TP 10
.HL 1 ^&^^VIOCLR_ -_ clear_ or_ set_ an_ array\&
.INDEX ^^System routines> VIOCLR
.INDEX ^^Clearing arrays
.INDEX ^^Arrays> clearing
.P 5
^*ret = VIOCLR( array, size, [fill] )\*
.INDEX ^^VIOCLR

.LM +30
.P -25
out#-#long####^*ret\*########returns either SS$__NORMAL, or SS$__INSFARG if 
required arguments are missing
.I -25
i/o#-#byte####^*array\*######the array to be initialised
.I -25
#in#-#long####^*size\*#######the number of bytes to initialise, offset from 
the beginning of ^*array\*
.I -25
#in#-#byte####^*fill\*#######the value to fill with
.LM -30

.P 0
VIOCLR will set an area of memory to all zero (the default if ^*fill\* is not 
given), or to a byte value. The latter case is only normally useful for
^*fill\*#=#-1, or an ASCII character.

.INDEX ^^System routines> VIOCLR> advantages of
.INDEX ^^VIOCLR> advantages of
.P 0
The only advantage that this routine has over LIB$MOVC5 is that it takes a 
longword length, rather than a word. It will use MOVC5 sufficient times to 
fill the space requested.

.TP 10
.HL 1 ^&^^VIOMV3_ -_ move_ an_ array\&
.INDEX ^^System routines> VIOMV3
.INDEX ^^Arrays> moving
.P 5
^*ret = VIOMV3( source, size, destn )\*
.INDEX ^^VIOMV3
.LM +30
.P -25
out#-#long####^*ret\*########returns either SS$__NORMAL, or SS$__INSFARG if 
required arguments are missing
.I -25
#in#-#byte####^*source\*#####the array to be copied
.I -25
#in#-#long####^*size\*#######the number of bytes to copy
.I -25
out#-#byte####^*destn\*######the array to copy to
.LM -30

.P 0
VIOMV3 will copy one array into another.

.INDEX ^^VIOMV3> advantages of
.INDEX ^^System routines> VIOMV3> advantages of

.P 0
The only advantage that this routine has over LIB$MOVC3 is that it takes a 
longword length, rather than a word. It will use MOVC3 sufficient times to 
copy the number of bytes requested.

.TP 10
.HL 1 ^^^&LSL__WAIT_ -_ wait_ for_ a_ time\&

.INDEX ^^System routines> LSL__WAIT
.INDEX ^^System routines> WAIT

.P 5
^*call LSL__WAIT( time, units ) _[routine used to be called WAIT_]\*
.INDEX ^^LSL__WAIT
.INDEX ^^WAIT

.LM +30
.P -25
#in#-#word####^*time\*#######the length of time to wait for
.I -25
#in#-#word####^*units\*######the units of ^*time\* - see below
.LM -30

.P 0
.INDEX ^^LSL__WAIT> operation
LSL__WAIT causes the calling process to wait for ^*time\* units, where the 
units depend upon the value of ^*units\* as follows:

.BLANK
.LIST 0
.DISPLAY ELEMENTS D," "
.NUMBER LIST 0
.TP 5
.LE; ticks, 50 per second
.LE; milliseconds
.LE; seconds
.LE; minutes
.LE; hours
.END LIST

.P 0
The routine uses the system $HIBER routine to hibernate for a specified period 
of time. 

.INDEX ^^System routines> LSL__WAIT> maximum wait
.INDEX ^^LSL__WAIT> maximum wait
.P 0
The maximum time for a wait is 2_*_*31-1 milliseconds (ie 23 days).

.INDEX ^^System routines> LSL__WAIT> advantages of
.INDEX ^^LSL__WAIT> advantages of
.P 0
This routine has little advantage over LIB$WAIT, which takes a real
time in seconds.


.TP 10
.HL 1 ^^^&WFLOR_ -_ wait_ for_ event_ flags\&
.INDEX ^^System routines> WFLOR
.INDEX ^^Event flags
.INDEX ^^Event flags> wait for

.P 5
^*ret = WFLOR( efn1, [efn2], [efn3], ... )\*
.INDEX ^^WFLOR

.LM +30
.P -25
out#-#long####^*ret\*########returns the result of calling $WFLOR to wait - 
not normally used
.I -25
#in#-#word####^*efn_<n_>\*#####an event flag to wait for
.LM -30

.P 0
WFLOR provides a simplified interface to the system routine $WFLOR. It takes 
each event flag number specified, and forms the mask required to call $WFLOR. 
It then waits for one of the event flags to be set (ie it performs a wait for 
the logical OR of one of the event flags).

.P 0
WFLOR mimics the RSX-11M library routine WFLOR.


.TP 10
.HL 1 ^^^&LSLLIB's_ condition_ handler\&
.INDEX ^^System routines> condition handling
.INDEX ^^Condition handling


.P 5
^*call LIB$ESTABLISH( LSL__NUM__CHAND )\*
.INDEX ^^System routines> LSL__NUM__CHAND
.INDEX ^^LSL__NUM__CHAND
.INDEX ^^LIB$ESTABLISH

.P 0
Numeric exceptions are detected by the LSLLIB condition handler
LSL__NUM__CHAND. This is declared as an exception handler (using
LIB$ESTABLISH) at the start of each number reading routine. If a numeric
exception occurs, then it sets ERRNUM to LSL__HADEXCP, and LSL__EXCP to an
appropriate error. 

.P 0
Note that the exception handler is only declared within the number reading
routines by LSLLIB, so it will not detect numeric exceptions in the calling
program. However, it may be established within a user program if required - 
declare it as EXTERNAL, and use LIB$ESTABLISH.

.P 0
The following conditions are handled by LSL__NUM__CHAND (and reduced in 
severity to informational, so that the program continues without complaint):

.LM +5
.P 0
SS$__FLTDIV, SS$__FLTDIV__F, SS$__FLTOVF, SS$__FLTOVF__F,
.BR
SS$__FLTUND, SS$__FLTUND__F, SS$__INTDIV, SS$__INTOVF
.LM -5

.P 0
For a list of the error codes returned in LSL__EXCP, see the list of errors 
whilst reading numbers, documented in the chapter on exceptions.

.P 0
For more details on reading numbers, see the chapter on reading numbers.

.TP 10
.HL 1 ^&^^Date_ and_ time_ conversions\&
.INDEX ^^Date and time
.INDEX ^^CVT__DATE
.INDEX ^^System routines> Date and time

.P 0
Dates and times are stored as integers. There are routines to convert from
standard VMS date/time strings to these numbers and vice versa. There are also 
routines to convert from day, month and year to day number and vice versa.

.LIST
.LE;Dates are either the number of days since 17-NOV-1858 (up to 31-DEC-9999)
stored as a positive integer, or are the number of days from today - the
"delta date" - which is stored as a negative integer and is in the range
000 - 9999.
.LE;Times are the number of 10s of milliseconds since midnight.
.END LIST

.HL 2 ^^^&Convert_ from_ date/time_ string\&
.INDEX ^^Convert from date/time string
.INDEX ^^System routines> Convert from date/time string
.P 5
^*ret = CVT__DATE(date, day, time)\*
.INDEX ^^CVT__DATE

.LM +30
.P -25
out#-#long##^*ret\*##########SS$__NORMAL if the conversion succeeds, otherwise
see below 
.I -25
#in#-#char##^*date\*#########a standard DEC VMS date/time string (see VMS 
documentation for details)
.I -25
out#-#long##^*day\*##########the day number (-ve for a delta date)
.I -25
out#-#long##^*time\*#########the time (in 10s of milliseconds)
translation
.LM -30

.P 0
Converts from a standard DEC VMS date/time string to integers representing 
date and time.

.P 0
The following values of ^*ret\* may be returned:
.LM +18
.P -18
SS$__NORMAL######-#success#-#the conversion completed successfully
.I -18
SS$__IVTIME######-#failure#-#The syntax of the specified date/time string is 
invalid, or the time component is out of range
.LM -18


.HL 2 ^^^&Convert_ from_ date_ to_ string\&
.INDEX ^^Convert from date to string
.INDEX ^^System routines> Convert from date to string
.P 5
^*ret = CVT__DAY__STR(date, length, date__str)\*
.INDEX ^^CVT__DAY__STR

.LM +30
.P -25
out#-#long##^*ret\*##########SS$__NORMAL if the conversion succeeds, otherwise
see below 
.I -25
#in#-#long##^*date\*#########an integer representing a date
.I -25
out#-#long##^*length\*#######the length of the date__str
.I -25
out#-#char##^*date__str\*#####the ASCII representation of the date
translation
.LM -30

.P 0
Converts from an integer representing a date to a standard DEC VMS ASCII date.

.P 0
The following values of ^*ret\* may be returned:
.LM +18
.P -18
SS$__NORMAL######-#success#-#the conversion completed successfully
.I -18
SS$__IVTIME######-#failure#-#The specified delta time is equal or greater
than 10,000 days
.I -18
SS$__BUFFEROVF###-#success#-#date__str is too short to receive the string. It
has been truncated.
.LM -18


.HL 2 ^^^&Convert_ from_ time_ to_ string\&
.INDEX ^^Convert from time to string
.INDEX ^^System routines> Convert from time to string
.P 5
^*ret = CVT__TIME__STR(time, length, date__str)\*
.INDEX ^^CVT__TIME__STR

.LM +30
.P -25
out#-#long##^*ret\*##########SS$__NORMAL if the conversion succeeds, otherwise
see below 
.I -25
#in#-#long##^*date\*#########an integer representing a time
.I -25
out#-#long##^*length\*#######the length of the time__str
.I -25
out#-#char##^*time__str\*#####the ASCII representation of the time
translation
.LM -30

.P 0
Converts from an integer representing a time to a standard DEC VMS ASCII time.

.P 0
The following values of ^*ret\* may be returned:
.LM +18
.P -18
SS$__NORMAL######-#success#-#the conversion completed successfully
.I -18
SS$__BUFFEROVF###-#success#-#time__str is too short to receive the string. It
has been truncated.
.LM -18


.HL 2 ^^^&Convert_ from_ day,month,year_ to_ date\&
.INDEX ^^Convert from day,month,year to date
.INDEX ^^System routines> Convert from day,month,year to date
.P 5
^*ret = CVT__DMY__DAY(date, day, month, year)\*
.INDEX ^^CVT__DMY__DAY

.LM +30
.P -25
out#-#long##^*ret\*##########SS$__NORMAL if the conversion succeeds, otherwise
see below 
.I -25
out#-#long##^*date\*#########an integer representing a date
.I -25
#in#-#long##^*day\*##########the day of the month (in the range 1-31)
.I -25
#in#-#long##^*month\*########the month number (in the range 1-12)
.I -25
#in#-#long##^*year\*#########the year (in the range 1858-9999)
.LM -30

.P 0
Converts from day,month,year to an integer representing the date. If either 
the day of the month or the month number are out of range, they are set to 1

.P 0
The following values of ^*ret\* may be returned:
.LM +18
.P -18
SS$__NORMAL######-#success#-#the conversion completed successfully
.I -18
SS$__IVTIME######-#failure#-#The year as input is out of range, 
causing the syntax of the date/time string used internally to be invalid.
.I -18
SS$__INTOVF######-#failure#-#The input arguments represent a date past the 
year 8600
.LM -18


.HL 2 ^^^&Convert_ from_ date_ to_ day,month,year\&
.INDEX ^^Convert from date to day,month,year
.INDEX ^^System routines> Convert from date to day,month,year
.P 5
^*ret = CVT__DAY__DMY(date, day, month, year)\*
.INDEX ^^CVT__DAY__DMY

.LM +30
.P -25
out#-#long##^*ret\*##########SS$__NORMAL if the conversion succeeds, otherwise
see below 
.I -25
#in#-#long##^*date\*#########an integer representing a date
.I -25
out#-#long##^*day\*##########the day of the month (in the range 1-31)
.I -25
out#-#long##^*month\*########the month number (in the range 1-12)
.I -25
out#-#long##^*year\*#########the year (in the range 1858-9999)
.LM -30

.P 0
Converts from an integer representing a date to the equivalent day,month,year

.P 0
The following values of ^*ret\* may be returned:
.LM +18
.P -18
SS$__NORMAL######-#success#-#the conversion completed successfully
.I -18
SS$__IVTIME######-#failure#-#The specified delta time is equal or greater
than 10,000 days
.I -18
SS$__ACCVIO######-#failure#-#The 64-bit time value cannot be read internally, 
or the buffer used internally for the result cannot be written.
.LM -18
