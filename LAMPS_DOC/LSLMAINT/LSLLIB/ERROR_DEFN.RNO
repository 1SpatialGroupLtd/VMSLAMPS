.!*
.!* Error definition - error message files, etc
.!*

.INDEX ^^Error messages	
.INDEX ^^Error message definition
.HL 1 ^^^&Introduction\&
.INDEX ^^Error message definition> introduction	

.P 0
This chapter describes how to define error message files.

.P 0
Error messages are defined in a text file in a standard format, and 
processed by a supplied program to produce the various necessary files.

.INDEX ^^Error messages> groupings
.P 0
There are two 'groupings' of error message -

.LIST

.LE; Those provided by a library (for instance LSLLIB). These are always 
available when the library is linked with a program.

.LE; Those provided for an individual program. Each program will have its own 
message definition file, which is kept in its source directory. 

.END LIST 0

.HL 1 ^^^&The_ message_ definition_ file\&
.INDEX ^^Error messages> message definition file
.INDEX ^^Message definition file> contents
.P 0
The error message definition file describes the messages available for a 
particular library, package or individual program.

.HL 2 ^^^&General_ layout_ rules\&
.INDEX ^^Error messages> message definition file> layout
.INDEX ^^Error messages> message definition file> comments
.INDEX ^^Message definition file> layout
.INDEX ^^Message definition file> comments

.P 0
Blank lines are ignored (except within explanatory texts).  Comments start with
an exclamation mark ("!") and may be freely used throughout the file. Note that
exclamation marks in message and explanatory texts do not start comments.

.P 0
Spaces and tabs may be used as delimiters between different data fields, and 
are otherwise ignored (except within message and explanatory texts). Also,
the case of the data fields is irrelevant (again, except within message and
explanatory texts).

.TP 10
.HL 2 ^^^&Message_ definition\&
.INDEX ^^Error messages> message definition file> message severity
.INDEX ^^Error messages> message definition file> message mnemonics
.INDEX ^^Error messages> message definition file> message basic text 
.INDEX ^^Error messages> message definition file> message format text 
.INDEX ^^Message definition file> message severity
.INDEX ^^Message definition file> message mnemonics
.INDEX ^^Message definition file> message basic text 
.INDEX ^^Message definition file> message format text 

.P 0
Each message is defined by the sequence (_#1):

.FOOTNOTE
.BLANK
--------------------------------------------------------------------------------
.BR; _#1: Early message definition files may be found to have two text
fields defined for some messages. In such cases, the first text is plain text,
with no EXPAND formats, and the second text is the one that should be passed to
LSL__PUTMSG, etc. This form of message definition file is now obsolete. The
message generation utility NEWMSG will output an explanatory error message if
it encounters such a message definition, and the file should be corrected.
.END FOOTNOTE

.P 5
_<severity_>####_<spc_>##_<ident_>##_<gap_>##_\_<message text_>_\
.i 5
REPLACE#######_<spc_>##_%_<expand sequence_>#=#_\_<replacement text_>_\
.i 5
EXPLANATION###_<gap_>##_\_<explanatory text_>_\
.i 5
USERACTION####_<gap_>##_\_<explanatory text_>_\

.P 0
where:

.LM +20
.P -20
_<severity_>##########is the severity of this message - it may be any one of
SUCCESS, INFORMATIONAL, WARNING, ERROR, SEVERE or FATAL (the last two are
equivalent). 

.P -20
_<ident_>#############is the identifying mnemonic for this error message - this
should be an  abbreviation of the message text. Abbreviations should be made
in a consistent manner - for instance, TOOMNYPTS for "Too many points",
UNEXPEOF for "Unexpected end of file". 

.INDEX ^^LIB$PUTMSG
.P -20
_<message text_>######is the format statement used when outputting a message
with LSL__PUTMSG or LSL__ADDMSG - it is processed by EXPAND before being
output.

.p -20
_<expand sequence_>###is any sequence of charaters that might follow a percent
("_%") symbol in an EXPAND format.

.p -20
_<replacement text_>##is the text with which to replace the first occurrence of
that expand sequence in _<message text_> when outputting it to the RUNOFF file.

.p -20
_<explanatory text_>##is the EXPLANATION or USERACTION text, which is output
to the RUNOFF file to explain the message.

.p -20
_<spc_>###############is a sequence of spaces and/or tabs.

.p -20
_<gap_>###############is a (possibly empty) sequence of _<spc_> and new lines.

.LM -20

.P 0
The following general notes apply to the message and explanatory texts :- 

.LIST "o"

.LE; Message, replacement and explanatory texts must be enclosed by backward
slashes - to include a backward slash in the text itself, type it twice
(ie "_\_\").

.LE; The triangular bracket characters ("_<" and "_>") are used to delimit
the message texts internally, and thus may not be used within a message text.
They may, however, be used within the replacement or explanatory texts.

.le; No line in the message file may contain more than 132 characters.

.le; The "=" sign in a REPLACE clause may have spaces or tabs on either side.

.le; Explanatory texts are copied directly to the runoff file. They may thus
be split over several lines, and may include runoff commands.

.LE; Where a message quotes something the user typed, this should
conventionally be enclosed in double quotes. 

.END LIST 0

.p0; The REPLACE command is only necessary if there are EXPAND escape sequences
in the message text. Several REPLACE clauses may be specified after the
command, separated by _<spc_>. When the message text is being output to the
RUNOFF file, each REPLACE clause will be read, and the expand sequence will be
found and replaced by the corresponding replacement text.

.p0; Technically, the EXPLANATION and USERACTION fields are also optional, in
that the NEWMSG program will still process the file succesfully if they are
absent.  This allows older message files without runoff generation text to be
processed.  However, all new files should include these commands.

.TP 25
.INDEX ^^Error messages> message definition file> example file
.INDEX ^^Message definition file> example file
.HL 2 ^^^&Example\&

The following is a very simple message definition file.

.lm +5
.LITERAL

! define messages for the IMPOSSIBLE program

INFORM   MISSION   \Your mission, should you choose to accept it, is\
EXPLANATION        \This message is output before the MISSTEXT message.\
USERACTION         \As for the MISSTEXT message.\

INFORM   MISSTEXT  \%S\
REPLACE  %S = \'mission text'\
EXPLANATION
\This message is a short text describing the mission that is being 
offered. There is no compulsion to accept it, although we know you will.\
USERACTION
\Reply immediately, with acceptance or rejection of the mission.\

WARNING  DESTRUCT  \This message will self-destruct in %N second%m\
REPLACE  %N = \'integer'\ %m = \s\
EXPLANATION        \This message is self-explanatory.\
USERACTION         \None.\

FATAL    BANG	   \*** %S ***\
REPLACE  %S = \'loud noise'\
EXPLANATION
\This message is used to indicate that a loud noise, 'bang', has
been made.\
USERACTION         \Duck.\
.END LITERAL
.lm -5

.P 0
Processing this file with NEWMSG will define five messages, which might be
referred to as IMP____MISSION, IMP____MISSTEXT, IMP____DESTRUCT
and IMP____BANG from within a program.  Thus

.P 5
CALL LSL__PUTMSG( IMP____MISSION )
.I 5
CALL LSL__ADDMSG( IMP____MISSTEXT, 'to use this library' )

.P 0
will output the following messages:

.LM +5
.P0; _%IMPOSSIBLE-I-MISSION, Your mission, should you choose to accept it, is
.BR; _-IMPOSSIBLE-I-MISSTEXT, to use this library
.LM -5

.p0; NEWMSG can also be used to generate a runoff file which describes the
messages, and can be .REQUIREd in the documentation for the utility or library
using these messages. See the description of the NEWMSG program below for more
details.

.HL 2 ^^^&Message_ Severities\&
.INDEX ^^Error messages> message definition file> message severity
.INDEX ^^Error messages> severity
.INDEX ^^Message definition file> message severity

.P 0
The message severities used in Laser-Scan programs should normally follow
the following conventions:

.LM +16

.P -16        
Success#######-#the message is reporting that the program has performed
normally and succeeded.

.P -16
Informational#-#the message is for information only, and does not affect
the program's successful completion. Informational messages are used to
report on the current state of the utility, or to provide further information
after an error message.

.P -16
Warning#######-#the message is to warn the user of something strange happening.
The program will attempt to continue, but the results should be checked.

.P -16
Error#########-#the message is to report a definite error in processing. The
program will give up processing the input data, and the output data produced
so far is thus suspect - the program may delete it as it exits.

.P -16
Fatal#########-#the message is to report a very severe error - this normally
reflects program failure, or possibly some sort of system failure. This
sort of error may need to be reported to Laser-Scan. 

.LM -16

.HL 1 ^^^&Building_ a_ program_ with_ user_ defined_ messages\&

.INDEX ^^Error messages> building a program 

.P 0;The following example assumes that the user is creating a new program
IMPOSSIBLE. All the steps required to prepare a message definition source file
and to generate the required object modules and parameter files (using 
LSL$EXE:NEWMSG.EXE) are shown. For full details of the use of the NEWMSG
utility, see the NEWMSG documentation later in this chapter.

.LIST

.LE; The FORTRAN source file for the program should include the message 
parameter file IMPOSSIBLE.PAR ie:

.TP 6
.P 0;########INCLUDE 'LSL$CMNIMPOSSIBLE:IMPOSSIBLEMSG.PAR'
.P 0;or if an ADC include statement is preferred:
.P 0;_*_*_*#####PARAMETER/LSL$CMNIMPOSSIBLE:IMPOSSIBLEMSG/

.LE; A Laser-Scan format message definition file should be prepared using the
layout defined in "Message definition" above. For our example, this is called
IMPOSSIBLE.MES

.LE; Consult the Facility Number Manager before specifying the facility number.
The name of the current FCM is printed on the title page
of this document. It is important that numbers are allocated uniquely, because
if several programs or libraries had the same facility number, then the wrong
error messages could be generated. 

.LE; Run the NEWMSG program. This may be done using the following commands:

.INDEX ^^Error messages> NEWMSG utility
.INDEX ^^NEWMSG utility
.LM +3
.LITERAL

$ NEWMSG IMPOSSIBLE /NUMBER=1234/PREFIX=IMP____/PARAM=(FORTRAN,C)/RUNOFF
$ @IMPOSSIBLE.TEMP__COM
.END LITERAL
.LM -3

.P 0; The facility number assigned to this program is 1234, we are using a
facility prefix of IMP____ (since IMPOSSIBLE____ would be rather cumbersome),
and we are generating parameter files for FORTRAN and C programs, as well as
producing a runoff file, IMPOSSIBLEMSG.RNO

.p0; After the command file has been run, we will have parameter files
IMPOSSIBLEMSG.PAR and IMPOSSIBLEMSG.H, and we will also have a message object
file IMPOSSIBLE.PROMSG__OBJ. This should then be linked with the rest of the
program:

.LM +3
.LITERAL

$   link'debug' impossible,subroutines,-
                impossible.promsg_obj,-
                lsl$library:lsllib/lib
.END LITERAL
.LM -3

.END LIST


.!* include the NEWMSG documentation
.page
.save
.require "NEWMSG.RNO"
.restore

.!* reset the default header level constraints - .SAVE and .RESTORE don't
.!* seem to cope with them properly, although they used to before v4.6
.!*	n1=3	lowest  level to have 'run-in' format
.!*	n2=1	highest level to have title in uppercase - ie 1 will have
.!*	n4=7	lowest  level not to have section number at left
.!*	n6=2	number of blank lines before header
.STYLE HEADERS 3,1,,7,,2
