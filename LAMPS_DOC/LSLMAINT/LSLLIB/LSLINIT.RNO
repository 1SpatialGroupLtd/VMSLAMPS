.!*
.!* LSLINIT - initialisation of the library
.!*
.HL 1 ^^^&Initialising_ the_ library\&

.INDEX ^^LSLLIB
.INDEX ^^LSLLIB> library initialisation
.INDEX ^^LSL__INIT
.INDEX ^^Initialisation of LSLLIB
.P 0
Before using any of the routines in LSLLIB, the library must be initialised by 
a call of LSL__INIT. Failure to do this will result in obscure and fairly 
unpredictable errors when trying to use other routines, or a specific complaint
when EXPAND is used.

.P 5
^*call LSL__INIT( [timer], [tracing] )\*
.INDEX ^^LSL__INIT

.LM +30
.P -25
#in#-#logical#^*timer\*######false if not to call LSL__TMRINI
.I -25
out#-#logical#^*tracing\*####true if logical name LSL$DEBUG__TRACE exists
.LM -30
.INDEX ^^LSL__TMRINI

.P 0
LSL__INIT performs the following actions:
.INDEX ^^LSL__INIT> functions
.INDEX ^^LSL__INIT> calls LSL__TMRINI

.LIST "*"

.LE; references the LSLLIB messages, so that they will be available for the 
rest of the program
.INDEX LIB$GET__INPUT
.INDEX LIB$PUT__OUTPUT
.LE; sets the default input and output routines to be LIB$GET__INPUT and
LIB$PUT__OUTPUT respectively.
.LE; sets all the address values in the LSLLIB common blocks - this includes 
creating the 'fake descriptors' in various blocks.
.LE; sets the default lengths for the 'descriptors'
.LE; sets the /STATUS/LSL__STATUS value to be LSL____NORMAL
.LE; if ^*timer\* is true or absent, calls LSL__TMRINI to set up an exit handler
which will use WRITEF to report on the times used by the program when it exits
.INDEX LSL__INIT > calls LSL__DEBUG__TRACE
.INDEX LSL$DEBUG__TRACE
.INDEX LSL__PUTMSG
.LE; calls LSL__DEBUG__TRACE. If the logical name LSL$DEBUG__TRACE is defined,
then all calls to LSL__PUTMSG will be converted to calls of LSL__SIGNAL. If
^*tracing\* is present, it will be set true if LSL$DEBUG__TRACE exists, and
false otherwise. 

.END LIST


.P 0
The following specific problems result from not calling LSL__INIT:
.INDEX ^^LSL__INIT> necessity for calling

.LIST "*"

.LE; any call of EXPAND will result in the message:
.INDEX ^^EXPAND> checks if LSL__INIT called
.INDEX ^^LSL__INIT> EXPAND checks if called
.INDEX ^^EXPAND
.INDEX ^^WRITEF
.INDEX ^^FLWRTF

.P 5
EXPMAX is zero - LSL__INIT has not been called

.P 0
which is output using LIB$PUT__OUTPUT, and LSL__STATUS will be set to
SS$__ABORT.

.P 0
Note that WRITEF and FLWRTF also call EXPAND.

.LE; any attempt to read input or write output using the LSLLIB routines
will result in an access violation error.

.LE; calls of LSL__PUTMSG, LSL__ADDMSG and LSL__SIGNAL will fail to recognise
the LSLLIB error numbers.
.INDEX ^^LSL__PUTMSG
.INDEX ^^LSL__ADDMSG
.INDEX ^^LSL__SIGNAL

.LE; any attempt to use TXTDSC, EXPDSC or any other supplied 'descriptor' will 
fail - firstly because the address part is not set up, and secondly because 
the length part is not set


.INDEX ^^Common blocks> STATUS

.LE; the value in /STATUS/LSL__STATUS will probably be zero, rather than
LSL____NORMAL. Note that if EXPAND has been called, then it will be set
to SS$__ABORT
.END LIST


.HL 1 ^^^&Exiting_ from_ the_ program\&

.INDEX ^^LSL__EXIT
.INDEX ^^Exiting from the program
.INDEX ^^EXIT
.INDEX ^^FORTRAN EXIT

.P 5
^*call LSL__EXIT( [status] )\*
.INDEX ^^LSL__EXIT

.LM +30
.P -25
#in#-#long####^*status\*#####the final success/error code
.LM -30

.P 0
LSL__EXIT is used instead of the normal Fortran EXIT routine. It works as
follows:

.TP 20
.LM +8

.P0; ^&if\& ^*status\* is supplied
.BR; ^&then\&
.BR; ###^*internal__status\* := ^*status\*
.BR; ^&else\&
.BR; ###^*internal__status\* := /STATUS/LSL__STATUS
.BR; ^&endif\&

.P0; ^&if\& ^*internal__status\* is a customer code
.BR; ^&then\&
.BR; ###remember its severity
.BR; ###^&if\& ^*internal__status\* is a success or informational message
.BR; ###^&then\&
.BR; ######^*internal__status\* := SS$__NORMAL
.BR; ###^&else\&
.BR; ######^*internal__status\* := SS$__ABORT
.BR; ######set the severity of ^*internal__status\* to what we remembered
.BR; ###^&endif\&
.BR; ^&endif\&

.P0; ^&call\& ^*EXIT( internal__status )\*

.LM -8

.P 0                             
The effect is thus always to exit with a DEC defined success/error code.
If the program would have done that anyway, then LSL__EXIT is equivalent
to a direct call of EXIT. Otherwise, it converts the exit status to the
simplest form of DEC exit status.
