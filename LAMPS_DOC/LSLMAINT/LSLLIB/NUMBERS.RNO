.!*
.!* NUMBERS - reading numbers
.!*

.INDEX ^^Reading numbers
.INDEX ^^Reading numbers> introduction
.HL 1 ^^^&Introduction\&

.P 0
.INDEX ^^Common blocks> TXTC
.INDEX ^^Reading numbers> common block
The routines described in this chapter are used to read numbers from 
the current input buffer. This latter defaults to /TXTC/


.HL 2 ^^^&Errors_ whilst_ reading_ numbers\&
.INDEX ^^Reading numbers> errors

.P 0
.INDEX ^^Common blocks> EXCEPTION
Each number reading routine checks for various forms of error, including 
numeric overflow and underflow (as appropriate). The errors occurring are
reported in ERRNUM and LSL__EXCP, both in /EXCEPTION/. See the chapter
on errors and exceptions for more details. 

.P 0
If an error occurs whilst reading a number, such that no sensible result is 
available, then the routine will return zero (0).

.HL 1 ^&^^Reading_ an_ integer\&
.INDEX ^^Reading numbers> integers

.P 0
The integer reading  routines read an integer from the current buffer, using
RDCH. Note that leading spaces and tabs are ignored. 

.HL 2 ^^^&Reading_ to_ different_ bases\&
.INDEX ^^Reading numbers> reading to different bases

.P 0
Although each routine has a defined base in which it reads (usually
decimal, octal or hexadecimal), it is possible to accept numbers in
other bases. This is done by prefixing the number with a radix escape
sequence. These are 
.INDEX ^^Reading numbers> hexadecimal
.INDEX ^^Reading numbers> binary
.INDEX ^^Reading numbers> decimal
.INDEX ^^Reading numbers> octal


.TP 5
.LM +5
.P 0
_^B##the number is in binary
.BR
_^O##the number is in octal
.BR
_^D##the number is in decimal
.BR
_^X##the number is in hexadecimal
.LM -5

.INDEX ^^Reading numbers> restrictions
.P 0
Upper and lower-case are both acceptable (in the escape sequences, and
also in hexadecimal numbers). The sign of a number (if any) should
precede the radix escape sequence (if any). 

.HL 2 ^^^&Reading_ word_ length_ integers\&
.INDEX ^^Reading numbers> word length integers
.INDEX ^^Reading numbers> RDINT

.TP 5
.P 5 
^*nodig = RDINT( num ) \*

.INDEX ^^RDINT

.LM +30
.P -25
out#-#logical#^*nodig\*######true if doesn't read a legal number
.I -25
out#-#word####^*num\*########the integer that is found
.LM -30

.P 0 
Reads a signed decimal integer, returning the value in ^*num\*.

.P 0
The result of the function is true if no number was read, or if overflow
was encountered while reading the number; in either case, ^*num\* is set
to zero, and /EXCEPTION/ERRNUM and LSL__EXCP are set appropriately. If
reading the number succeeds, the function result is false. 


.TP 5
.P 5 
^*nodig = RDOCT(num)\*

.INDEX ^^Reading numbers> RDOCT
.INDEX ^^RDOCT

.LM +30
.P -25
out#-#logical#^*nodig\*######true if doesn't read a legal number
.I -25
out#-#word####^*num\*########the integer that is found
.LM -30

.P 0 
Octal version of RDINT - reads an octal number

.P 5 
^*nodig = RDHEX(num)\*

.INDEX ^^Reading numbers> RDHEX
.INDEX ^^RDHEX

.LM +30
.P -25
out#-#logical#^*nodig\*######true if doesn't read a legal number
.I -25
out#-#word####^*num\*########the integer that is found
.LM -30

.P 0 
Hexadecimal version of RDINT - reads a hexadecimal number.

.HL 2 ^^^&Reading_ longword_ length_ integers\&
.INDEX ^^Reading numbers> longword integers

.P 5 
^*nodig = RDLONG(lnum)\*

.INDEX ^^Reading numbers> RDLONG
.INDEX ^^RDLONG

.LM +30
.P -25
out#-#logical#^*nodig\*######true if doesn't read a legal number
.I -25
out#-#long####^*lnum\*#######the integer that is found
.LM -30

.P 0 
This routine behaves as RDINT, except that it reads a long integer.

.P 5 
^*nodig = RDLOCT(lnum)\*

.INDEX ^^Reading numbers> RDLOCT
.INDEX ^^RDLOCT

.LM +30
.P -25
out#-#logical#^*nodig\*######true if doesn't read a legal number
.I -25
out#-#long####^*lnum\*#######the integer that is found
.LM -30

.P 0 
Octal version of RDLONG - reads a long octal number

.P 5 
^*nodig = RDLHEX(lnum)\*

.INDEX ^^Reading numbers> RDLHEX
.INDEX ^^RDLHEX

.LM +30
.P -25
out#-#logical#^*nodig\*######true if doesn't read a legal number
.I -25
out#-#long####^*lnum\*#######the integer that is found
.LM -30

.P 0 
Hexadecimal version of RDLONG - reads a long hexadecimal number.

.TP 10
.P 5 
^*nodig = RDNUM(lnum, base)\*

.INDEX ^^Reading numbers> RDNUM
.INDEX ^^RDNUM

.LM +30
.P -25
out#-#logical#^*nodig\*######true if doesn't read a legal number
.I -25
out#-#long####^*lnum\*#######the integer that is found
.I -25
in##-#long####^*base\*#######the default base in which to read
.LM -30

.P 0 
This routine behaves as RDLONG, except that any default base can be 
specified. Thus a call of

.P 5
NOTHING = RDNUM( NUMBER, 10)

.P 0
is equivalent to

.P 5
NOTHING = RDLONG( NUMBER )


.HL 1 ^&^^Reading_ a_ real_ number\&
.INDEX ^^Reading numbers> real numbers


.P 5 
^*nodig = RDREAL(rnum)\*

.INDEX ^^Reading numbers> RDREAL
.INDEX ^^RDREAL

.LM +30
.P -25
out#-#logical#^*nodig\*######true if doesn't read a legal number
.I -25
out#-#real####^*rnum\*#######the real number that is found
.LM -30

.INDEX ^^Reading numbers> format of real numbers
.P 0 
Reads a real number into ^*rnum\*. The real number may be in any of the
following forms (described more formally further on) 

.LM +15
.P -10
a#############standard integer - coerced to a real
.I -10
a.b###########standard real format
.I -10
a.bEc#########standard exponential format
.I -10
a.b/c.d#######rational format
.LM -15

.P 0 
The function result is true if no number was found, or if floating
overflow or underflow, or integer overflow was encountered while the
number was being read; in any of these cases, the value ^*rnum\* is set
to 0.0, and /EXCEPTION/ERRNUM and LSL__EXCP are set appropriately.  The
function result is otherwise false. 



.P 5 
^*nodig = RDDBLE(dnum)\*
.INDEX ^^Reading numbers> RDDBLE
.I 5
^*nodig = RREAL8(dnum)\*

.INDEX ^^Reading numbers> RREAL8
.INDEX ^^RDDBLE
.INDEX ^^RREAL8

.LM +30
.P -25
out#-#logical#^*nodig\*######true if doesn't read a legal number
.I -25
out#-#dreal###^*dnum\*#######the real number that is found
.LM -30

.P 0 
Reads a double precision real number (a Fortran REAL_*8) into ^*dnum\*. The
real number may be in any of the following forms (described more formally
further on) 

.LM +15
.P -10
a#############standard integer - coerced to a real
.I -10
a.b###########standard real format
.I -10
a.bEc#########standard exponential format
.I -10
a.bDc#########standard double precision exponential format
.I -10
a.b/c.d#######rational format
.LM -15

.P 0 
The function result is true if no number was found, or if floating
overflow or underflow, or integer overflow was encountered while the
number was being read; in any of these cases, the value ^*dnum\* is set
to 0.0, and /EXCEPTION/ERRNUM and LSL__EXCP are set appropriately. The
function result is otherwise false. 


.P 5 
^*nodig = LSL__RDREAL__WHOLE(rnum,is__real)\*
.I 5
^*nodig = LSL__RDDBLE__WHOLE(dnum,is__real)\*

.INDEX ^^Reading numbers> LSL__RDREAL__WHOLE
.INDEX ^^LSL__RDREAL__WHOLE
.INDEX ^^Reading numbers> LSL__RDDBLE__WHOLE
.INDEX ^^LSL__RDDBLE__WHOLE

.LM +30
.P -25
out#-#logical#^*nodig\*######true if doesn't read a legal number
.I -25
out#-#real####^*rnum\*#######the real number that is found
.I -25
out#-#dreal###^*dnum\*#######the (double) real number that is found
.I -25
i/o#-#logical#^*is__real\*####set true if number was definitely real
.LM -30

.P 0 
Both functions read a real number of the appropriate size into ^*rnum\*
or ^*dnum\*.

.P 0
These functions are identical to RDREAL and RDDBLE, with the addition of
the ^*is__real\* argument. This is set to TRUE if the number read was
definitely a real - that is, if it contained any of the symbols '.'
(decimal point), 'E',#'e', 'D'#or#'d' (exponentiation), or '/'
(division). The argument ^*is__real\* will not be altered in any other
way, so a calling routine should take care to initialise it to FALSE
before using LSL__RDREAL__WHOLE or LSL__RDDBLE__WHOLE. 
                                                                    

.TP 10
.HL 2 ^&^^Syntax_ of_ a_ real_ number\&
.INDEX ^^Reading numbers> syntax of a real number

.TP 20
.P 0
The syntax of a real number may be defined as:

.TP 18
.NOFILL
.P 0
##########_<real number_>#::= _<unsigned real number_> | 
.BR
############################_<sign_>_<unsigned real number_> 
.BR
#_<unsigned real number_>#::= _<basic real number_> | 
.BR
############################_<basic real number_>_<exponent_> | 
.BR
############################_<basic real number_>'/'_<basic real number_> 
.BR
#################_<sign_>#::= '+' | '-' 
.BR
####_<basic real number_>#::= _<whole part_> | 
.BR
############################_<fraction part_> | 
.BR
############################_<whole part_>_<fraction part_> 
.BR
############_<exponent_>##::= 'E'_<signed decimal number_>
.BR
###########_<whole part_>#::= _<decimal number_> 
.BR
########_<fraction part_>#::= '.'_<decimal number_> 
.BR
_<signed decimal number_>#::= _<decimal number_> | 
.BR
############################_<sign_>_<decimal number_> 
.BR
#######_<decimal number_>#::= _<digit_> | 
.BR
############################_<decimal number_>_<digit_> 
.BR
################_<digit_>#::= '0' | '1' | '2' | '3' | '4' |
.BR
########################### '5' | '6' | '7' | '8' | '9' 

.FILL

.TP 6
.P 0
The double length real numbers read by RDDBLE/RREAL8 require the modification:

.NOFILL
.P 0
############_<exponent_>##::= 'E'_<signed decimal number_> |
.BR
############################'D'_<signed decimal number_> 
.FILL

.TP 10
.HL 1 ^&^^Reading_ angles\&
.INDEX ^^Reading numbers> angles


.P 5 
^*nodig = READANG(secs,flg)\*

.INDEX ^^Reading numbers> READANG
.INDEX ^^READANG

.LM +30
.P -25
out#-#logical#^*nodig\*######true if doesn't read a legal angle; see 
below for formats of angles
.I -25
out#-#real_*8##^*secs\*#######the number of seconds that are read from 
the angle
.I -25
out#-#integer#^*flg\*########one of the parameters defined in 
LSL_$CMNLSL:READANG.PAR; see below
.BL 2
.LM -30
This routine is designed to read an angle, or a geographical latitude or
longitude, from the current position in the input buffer. The angle is 
expressed in degrees, minutes and seconds, followed by an optional "N",
"S","E" or "W" to represent the hemisphere. Angles with an absolute value
greater than 360 degrees are invalid, as are latitudes greater than 90
degrees and longitudes greater than 180 degrees.
.P 0
It returns the angle, as a REAL_*8, as seconds of arc.
.P 0
The value of ^*flg\* is one of the following values, as defined in 
LSL_$CMNLSL:READANG.PAR
.BL
.LM +30
.I -25
Values of ^*flg\* when READANG is _.TRUE_. are:-
.BL 
.I -20
READANG__EOL#########end of line
.I -20
READANG__ILLEGDECPT##error in format of angle (only last element is
allowed a "_.") 
.I -20
READANG__SGNHANDEMI##sign and hemisphere present
.I -20
READANG__ILLEGANGVAL#error in value of an element (eg degrees _> 360,
min _> 60 etc) 
.I -20
READANG__ILLEGCHAR###unexpected character at start of number
.BL
.I -25
Values of ^*flg\* when READANG is .FALSE. are:-
.BL
.I -20
READANG__ANGLE#######for angle with no hemisphere
.I -20
READANG__LONGITUDE###for angle represents a longitude
.I -20
READANG__LATITUDE####for angle represents a latitude
.LM -30

.TP 10
.HL 2 ^&^^Syntax_ of_ an_ angle\&
.INDEX ^^Reading numbers> syntax of an angle
.INDEX ^^Reading numbers> format of angles
.B
Angles are specified in the format sDDD#MM#SS.SSS or DDD#MM#SS.SSSh
where:
.NOFILL
.P 0
.LEFT MARGIN +15
.I-15;#######s#######is + , - or <blank>
.I-15;#######h#######is N, n, S, s, E, e, W or w; representing a
hemisphere 
.I-15;#######DDD#####is an integer value for the degrees, or a
real number, if there are no minutes or seconds.
.I-15;#######MM######is an integer value for the minutes, or a
standard real number if there are no seconds
.I-15;#######SS.SSS##is a standard real value for the seconds.
.LEFT MARGIN -15
.FILL
.NOTE NOTES
.LIST
.DISPLAY ELEMENT RL,")"
.LE;In angles the exponential and rational real number formats are not
permitted. 
.LE;Elements can be excluded from the left of an angle, but not from the
right. That is the seconds (and minutes) need not be present, but the
degrees must always be. 
.LE;The value in the signed format must be less than 360 degrees. The
maximum value of an angle in the E/W hemisphere is 180 degrees and in
the N/S hemisphere is 90 degrees. 
.LE;The value of the minutes and seconds must be less than 60.0.
.LE;Sign and hemisphere are mutually exclusive. When the hemisphere form 
is used, south and west are taken as negative.
.LE;Angles are terminated by:
.LM +5
.LIST
.LE;the occurrence of three elements of an angle
.LE;the occurrence of a hemisphere sign
.LE;the end of line
.LM -5
.END LIST
.LEFT MARGIN -3
.END LIST
.END NOTE
.TP 10
EXAMPLE
.NOFILL

The following all represent the same angular value:

         -00 00 30.00
          00 00 30.00 S
          00 00 30 s
          00 00.5  W
          0.00833333 w
.FILL
