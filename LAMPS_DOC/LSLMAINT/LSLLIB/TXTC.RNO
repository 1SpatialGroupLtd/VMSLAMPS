.!*
.!* /TXTC/ - using text input
.!*
.ENTRY /TXTC/ > see TXTC
.ENTRY TXTC > see also Common blocks

.INDEX ^^TXTC input common block
.INDEX ^^TXTC input common block> introduction
.INDEX ^^Common blocks> TXTC
.HL 1 ^^^&Introduction\&

.P 0
This chapter describes the text input common block.

.HL 1 ^^^&/TXTC/_ -_ the_ input_ common_ block\&

.P 0
Those LSLLIB routines that perform input, or process input, from within a 
program, use the text input common block by default. This common block is
defined in both Fortran and Macro. The Fortran definition is kept as 
.INDEX ^^TXTC input common block> location of FORTRAN common block
.P 10
LSL$CMNLSL:TXTC.CMN
.P 0
.INDEX ^^TXTC input common block> location of MACRO32 common block
and the macro definition as
.P 10
LSL$CMNLSL:TXTC.MAR

.P 0
The common block contains the following:
.INDEX ^^TXTC input common block> common block contents
.INDEX ^^Common blocks> TXTC> contents
.LM +10
.P -10
public##-#long#parameter#^*MAX__TXTLIM\*
.BR
the maximum length of TXTBUF, thus the maximum value to which TXTLIM may be 
set. This is currently 1024, which is the maximum buffer size that the DCL 
routines will read.

.P -10
public##-#long#parameter#^*DEF__TXTLIM\*
.BR
the default length of TXTBUF, thus the default value to which TXTLIM is
set. This is currently 255.

.P -10
private#-#word####^*DCPTR\*
.BR
the decoding pointer into ^*TXTBUF\* - it is
used by RDCH (and hence all other /TXTC/ reading routines) to determine
which character is to be read next. If you want to manipulate the decoding
position within ^*TXTBUF\*, see the section "Manipulating the decoding
pointer" in Chapter#9

.P -10
public##-#word####^*TXTPTR\*
.BR
holds the number of characters currently in
^*TXTBUF\*, and can thus also be regarded as an "end of line" indicator 

.P -10
public##-#word####^*TXTLIM\*
.BR
the maximum number of characters which may be held in ^*TXTBUF\*. This is set 
by LSL__INIT to be DEF__TXTLIM, but the user may reset it to any value up to 
MAX__TXTLIM, using SET__TXTLIM.

.P -10
public##-#alias###^*TXTDSC\*
.BR
equivalenced onto the common block to produce a
fake string. It is made up of ^*TXTPTR\*,^*TXTTYP\* and ^*TXTADD\*.  See the
section on fake strings in Chapter#1 for an explanation of this. 

.P -10
private#-#byte####^*TXTTYP\*
.BR
the type of the /TXTC/ fake string

.P -10
private#-#byte####^*TXTCLA\*
.BR
the class of the /TXTC/ fake string

.P -10
private#-#long####^*TXTADD\*
.BR
the address of ^*TXTBUF\*. ^*TXTADD\* is set by the initial call to LSL__INIT.

.P -10
public##-#byte####^*TXTBUF(MAX__TXTLIM)\*
.BR
the buffer to hold the actual characters in /TXTC/. Note that only TXTLIM 
of it will be used at any one time.

.LM -10

.HL 2 ^^^&Manipulating_ the_ size_ of_ TXTBUF\&

.INDEX ^^TXTC input common block> extending TXTBUF
.INDEX ^^TXTC input common block> SET__TXTLIM
.INDEX ^^TXTBUF extension
.INDEX ^^SET__TXTLIM

.P 5
^*call SET__TXTLIM( [length] )\*

.LM +30
.P -25
in##-#word#####^*length\*####the new length for TXTBUF
.LM -30

.P 0
SET__TXTLIM will change the value of TXTLIM, and hence the size of TXTBUF, to 
the given ^*length\*. If ^*length\* is omitted, then TXTLIM is set back to the 
default value of DEF__TXTLIM. If ^*length\* is less than 1, or greater than 
MAX__TXTLIM, then the call is ignored.

.INDEX ^^TXTC input common block> saving TXTLIM
.INDEX ^^TXTC input common block> SAVE__TXTLIM
.INDEX ^^SAVE__TXTLIM

.P 5
^*call SAVE__TXTLIM( length )\*

.LM +30
.P -25
in##-#word#####^*length\*####the current length of TXTBUF
.LM -30

.P 0
SAVE__TXTLIM returns the current value of TXTLIM, and hence the current size of
TXTBUF, in ^*length\*. 


.HL 2 ^^^&Saving_ and_ restoring_ TXTBUF_ and_ TXTPTR\&
.INDEX ^^TXTC input common block> saving and restoring TXTBUF and TXTPTR
.INDEX ^^TXTPTR restoring
.INDEX ^^TXTPTR saving
.INDEX ^^TXTBUF saving
.INDEX ^^TXTBUF restoring
.INDEX ^^TXTC input common block> SAVE__TXTC
.P 5
^*call SAVE__TXTC( buffer, bufptr, bufmax )\*
.INDEX ^^SAVE__TXTC
.LM +30
.P -25
out#-#byte####^*buffer\*#####the buffer to save TXTBUF in
.I -25
out#-#word####^*bufptr\*#####how many characters were saved
.I -25
in##-#word####^*bufmax\*#####maximum number of characters to save
.LM -30

.P 0
SAVE__TXTC saves the contents of TXTBUF in ^*buffer\*, and TXTPTR in 
^*bufptr\*. However, if TXTPTR is greater than ^*bufmax\*, then only ^*bufmax\* 
characters are stored, but ^*bufptr\* is still set to TXTPTR.

.P 0
It is assumed that ^*buffer\* is at least ^*bufmax\* bytes long.

.P 5
^*call RESTORE__TXTC( buffer, bufptr, bufmax )\*
.INDEX ^^TXTC input common block> RESTORE__TXTC
.INDEX ^^RESTORE__TXTC
.LM +30
.P -25
in##-#byte####^*buffer\*#####the buffer to copy into TXTBUF
.I -25
in##-#word####^*bufptr\*#####how many characters to copy in
.I -25
in##-#word####^*bufmax\*#####maximum number of characters to copy
.LM -30

.P 0
RESTORE__TXTC is used to restore the contents of TXTPTR and TXTBUF. If 
^*bufptr\* is greater than ^*bufmax\*, then only ^*bufmax\* characters are 
restored, but TXTPTR is set to ^*bufptr\*

.P 0
It is assumed that ^*buffer\* is at least ^*bufmax\* bytes long.

