.!*
.!* Basic routines for reading from /TXTC/
.!*

.INDEX ^^TXTC> reading from

.HL 1 ^^^&Initialising_ the_ input_ buffer\&

.INDEX ^^Input buffer> initialisation

.HL 2 ^^^&Initialising_ /TXTC/_ for_ read\&

.INDEX ^^Common blocks> ^^TXTC
.INDEX ^^TXTC> initialising for read

.P 0
By default, the input buffer is that in /TXTC/. Before
it is used, the decoding pointer must be reset: 

.P 5 
^*call BSLN \*

.INDEX ^^BSLN
.INDEX ^^Decode pointer> resetting
.INDEX ^^TXTC> Decode pointer> resetting

.P 0 
BSLN resets the decode pointer to the start of TXTBUF. It should thus always
be called before starting to decode a line held in /TXTC/

.INDEX ^^TXTBUF
.INDEX ^^TXTC> decode pointer
.INDEX ^^Decode pointer

.P 0
Note that since BSLN resets the pointer to the beginning of TXTBUF, it
unsets the effect of any previous call of SETAUX

.HL 2 ^^^&Choosing_ to_ read_ from_ another_ buffer\&

.INDEX ^^TXTC> Reading from alternative buffers
.INDEX ^^Reading from alternative buffers

.P 5 
^*call SETAUX( buffer, length )\*

.INDEX ^^SETAUX

.LM +30
.P -25
in##-#byte####^*buffer\*#####new text input buffer
.I -25
in##-#word####^*length\*#####the length of buffer required
.LM -30

.INDEX ^^RDCH

.INDEX ^^TXTC> input buffer reading routines
.INDEX ^^Input buffer reading routines

.P 0 
SETAUX defines a new text input buffer. All calls of RDCH and the other input
buffer reading routines will now refer to this new buffer. The end-of-line is 
defined by ^*length\* - there are ^*length\* characters available to be read
in ^*buffer\*.

.INDEX ^^TXTC> decode pointer> effect of SETAUX
.INDEX ^^Decode pointer> effect of SETAUX

.P 0
Note that SETAUX has the effect of BSLN on the new buffer; BSLN cancels the
effect of SETAUX. BSCH and RDCH, and hence all the other decoding routines,
are unchanged in their application to the auxiliary buffer. 

.HL 2 ^^^&Choosing_ part_ of_ TXTBUF_ to_ read\&

.INDEX ^^TXTC> TXTBUF> windowing
.INDEX ^^TXTBUF> windowing
.INDEX ^^Windowing
.P 5 
^*call SETWIN( [ptr], [length] )\*

.INDEX ^^SETWIN

.LM +30
.P -25
in##-#word####^*ptr\*########the position to start reading at 
.I -25
in##-#word####^*length\*#####number of characters that may be read 
.LM -30

.P 0 

.P 0 
SETWIN offers facilities for use when decoding fixed or partially fixed format
records.  It defines a sub-window of the current buffer (either TXTBUF or one
defined by SETAUX). The end-of-line is effectively at the position defined by
^*length\*. In the current implementation, however, BSCH can go back beyond the
start of the window.

.P 0
If ^*ptr\* is not given, then it defaults to the current position in the
buffer. 
If ^*length\* is not given, then it defaults to the rest of the current line.

.P 0
Note that BSLN or SETAUX must still be used to initialise reading from a new
buffer before using SETWIN.

.HL 1 ^^^&Manipulating_ the_ decode_ pointer\&

.INDEX ^^TXTC> decode pointer> manipulation
.INDEX ^^Decode pointer> manipulation

.P 0
The following routines are supplied to change the position from which the next 
character (in the current input buffer) will be read.

.HL 2 ^^^&Backspacing_ by_ one_ character\&

.INDEX ^^TXTC> decode pointer> back spacing
.INDEX ^^Decode pointer> back spacing

.P 5 
^*call BSCH \*

.INDEX ^^BSCH

.P 0 
BSCH backspaces the buffer pointer one space. If the pointer is
already at the beginning of the line, then it does nothing.

.P 0
Thus the next call of RDCH will return the same character as the last one.

.HL 2 ^^^&Saving_ and_ restoring_ the_ decode_ pointer\&

.INDEX ^^TXTC> decode pointer> saving
.INDEX ^^TXTC> decode pointer> restoring
.INDEX ^^Decode pointer> saving
.INDEX ^^Decode pointer> restoring

.P 0 
DCPSET and DCPSAV are provided to allow users of the command routines to
remember where decoding had reached, attempt to read more of the buffer, and 
then return to the original position.

.P 0
Thus the actual explicit value of DCPTR (the buffer decoding pointer) should
never normally be needed. 

.P 5 
^*call DCPSAV( ptr )\*

.INDEX ^^DCPSAV

.LM +30
.P -25
out#-#word####^*ptr\*########to save the pointer in
.LM -30

.P 0 
DCPSAV saves the current value of the buffer decoding pointer. The value may 
then be reset at a later stage using DCPSET

.P 5 
^*call DCPSET( ptr )\*

.INDEX ^^DCPSET

.LM +30
.P -25
in##-#word####^*ptr\*########pointer saved by DCPSAV
.LM -30

.P 0 
DCPSET restores the buffer decoding pointer to the position current when 
DCPSAV was used to save ^*ptr\*.


.HL 1 ^^^&Reading_ a_ single_ character\&

.INDEX ^^TXTC> reading single characters
.INDEX ^^Reading single characters

.P 5 
^*end = RDCH( ich )\*

.INDEX ^^RDCH

.LM +30
.P -25
out#-#logical#^*end\*########true if no more characters to be read
.I -25
out#-#byte####^*ich\*########the ASCII value of the character read
.LM -30

.P 0 
RDCH puts the next character from the buffer into ^*ich\*. If there is no next 
character, then it returns true, and sets ^*ich\* to zero. Otherwise, it
returns false. 

.P 5 
^*end = RDCHS( ich )\*

.INDEX ^^RDCHS

.LM +30
.P -25
out#-#logical#^*end\*########true if no more characters to be read
.I -25
out#-#byte####^*ich\*########the ASCII value of the character read
.LM -30

.P 0 
RDCHS behaves as RDCH, except that it will ignore any spaces or tabs.

