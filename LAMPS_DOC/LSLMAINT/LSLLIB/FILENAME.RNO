.!*
.!* Filename reading routines
.!*
.ENTRY /FILENAME/ > see FILENAME
.ENTRY FILENAME > see also Common blocks

.INDEX ^^Filename parsing routines

.HL 1 ^^^&Introduction\&
.INDEX ^^Filename parsing routines> introduction

.P 0
The routines described in this chapter are used to recognise and parse 
filenames.

.HL 1 ^^^&The_ filename_ common_ block\&
.INDEX ^^Filename parsing routines> FILENAME common block
.INDEX ^^Common blocks> FILENAME
.P 0
This is kept in the file LSL$CMNLSL:FILENAME.CMN

.P 0
All variables and parameters are public, and the user is free to alter values 
within the common block. It is defined as follows:

.LM +10
.P -10
parameters#-#file name components sizes
.BR
The following integer (longword) parameters define the maximum lengths of the
various components of a filename
.LIST " "
.LE; ^*C__NOD__SIZ\*#=###6#-#the node name
.LE; ^*C__DEV__SIZ\*#=##20#-#the device specification
.LE; ^*C__DIR__SIZ\*#=#100#-#the directory specification
.LE; ^*C__NAM__SIZ\*#=##39#-#the actual file name
.LE; ^*C__EXT__SIZ\*#=##39#-#the file extension or file type
.LE; ^*C__VER__SIZ\*#=###6#-#the version number
.LE; ^*C__MAX__SIZ\*#-#the total file name - the sum of the above values, plus 
seven, to allow for "::", ":", "[]", "." and ";"
.END LIST

.P -10
character variables - the actual file name components
.BR
Each is of the appropriate size defined above
.LIST " "
.LE; ^*STR__NOD\*#-#the node name - does not include username or password
.LE; ^*STR__DEV\*#-#the device name
.LE; ^*STR__DIR\*#-#the directory specification - may include embedded periods
.LE; ^*STR__NAM\*#-#the file name
.LE; ^*STR__EXT\*#-#the file extension or type
.LE; ^*STR__VER\*#-#the version number, as a string - may be negative 
.END LIST

.P -10
logical variables - was each part present
.BR
These are set TRUE if the relevant entry was present, or is required (see 
routine documentation for their use). There is one for each file name
component, thus ^*HAD__NOD, HAD__DEV, HAD__DIR, HAD__NAM, HAD__EXT\* and
^*HAD__VER\* 

.P -10
longword variables - the lengths
.BR
For each component, the actual length of the component is recorded (which may 
be less than the permitted length). There is a longword for each component, 
thus ^*LEN__NOD, LEN__DEV, LEN__DIR, LEN__NAM, LEN__EXT\* and ^*LEN__VER\*

.LM -10

.PAGE

.HL 1 ^^^&Reading_ filenames_ from_ the_ current_ buffer\&
.INDEX ^^Filename parsing routines> reading current buffer

.P 0
GETFILNAM is the general filename reading function, and reads from the current 
position in the input buffer (thus normally TXTBUF, unless it has been 
reassigned).  It uses the READSTR function (qv) to read the string in,
and then the PARFILN (see below) function to parse the filename and check that
it is valid. 
.INDEX ^^Filename parsing routines> using TXTBUF
.INDEX ^^Filename parsing routines> GETFILNAM
.INDEX ^^Filename parsing routines> PARFILN
.INDEX ^^GETFILNAM
.INDEX ^^PARFILN
.P 0
Note that this ensures that /FILENAME/ is set up for the final 
filename.


.P 5
.INDEX ^^GETFILNAM
^*ok = GETFILNAM( name, namlen, default, allow__ver,
.I 5
### # ########## [term__char], [devour] )\*

.LM +30
.P -25
out#-#long####^*ok\*#########LSL____NORMAL if the filename is read 
successfully, otherwise see below
.I -25
out#-#char####^*name\*#######character string to receive the resulting filename
.I -25
out#-#word####^*namlen\*#####the number of characters placed into ^*name\*
.I -25
in##-#char####^*default\*####a template to build the filename against
.I -25
in##-#logical#^*allow__ver\*##true if to allow version numbers on the 
filename
.I -25
in##-#byte####^*term__char\*##termination character for the filename
.I -25
in##-#logical#^*devour\*#####true if to 'eat up' the termination character
.LM -30

.P 0
The function reads the filename, ignoring leading spaces or tabs. It will end
the filename on a space, tab, end-of-line, or ^*term__char\* if it is given.

.P 0
If ^*devour\* is true, or absent, then the next call of RDCH will return the 
character after the terminating character, but if ^*devour\* is false, then
the next RDCH will return the terminating character.

.P 0
Having obtained the string, the function uses PARFILN to parse it against the 
default, and then returns with the final filename in ^*name\*.

.P 0
The following values of ^*ok\* may be returned
.INDEX ^^Filename parsing routines> GETFILNAM> condition codes

.LM +18

.P-18; LSL____NORMAL#####-#filename successfully read into ^*name\*
.I-18; LSL____BADTCOND###-#failure#-#an invalid value was given for
the termination condition to READSTR, called internally. This should not
happen.
.I-18; LSL____STRTOOLONG#-#failure#-#the string to be read was longer than
^*name\*, and reading was terminated when ^*name\* was filled, rather than
when the termination condition was satisfied. 
.I-18; LSL____DEFTOOBIG##-#warning#-#one of the components of ^*default\*
was too long - the component will have been truncated 
.I-18; LSL____BADPARSE###-#failure#-#too few arguments were supplied to
FILE__PARSE - this reflects a bug in the routine - please report it! 
.I-18; LSL____DEFFILNAM##-#failure#-#an error occurred in parsing ^*default\*
.I-18; LSL____DEFVERNUM##-#failure#-#a version number was supplied in
^*default\*, although ^*allow__ver\* is false 
.I-18; LSL____SRCTOOBIG##-#warning#-#one of the components of the filename read
was too long - the component will have been truncated 
.I-18; LSL____SRCFILNAM##-#failure#-#an error occurred in parsing the filename 
read
.I-18; LSL____SRCVERNUM##-#failure#-#a version number was supplied in
the filename read, although ^*allow__ver\* is false 
.I-18; LSL____FILTOOLONG#-#warning#-#the resulting filename was too long to fit
into ^*name\*

.LM -18

.HL 2 ^^^&Examples_ of_ reading_ a_ filename\&
.INDEX ^^Filename parsing routines> examples

.P 0
These examples demonstrate the use of ^*devour\*. If we have a filename 
presented as

.P 10
"FILENAME.SRC"

.P 0
then we would detect the first quote with RDCH(ich), and our call might then 
be

.P 10
ok = GETFILNAM( name, namlen, default, .TRUE.,
.INDEX ^^GETFILNAM
.I 10
## # ########## ich, .TRUE. )

.P 0
which reads the filename and the final quote.

.P 0
If our filename was presented as

.P 10
/FILE=FILENAME.SRC/FRED=BILL

.P 0
then we would have used RDCOMM to read the FILE= part of the command, and 
might then call

.P 10
ok = GETFILNAM( name, namlen, default, .TRUE.,
.I 10
### # ########## '/', .FALSE. )

.P 0
This would leave us ready to detect the next slash with RDCH


.HL 1 ^^^&PARFILN_ -_ parse_ a_ file_ name\&
.INDEX ^^Filename parsing routines> PARFILN

.P 0
PARFILN is used to parse a filename, filling it in from a default string
if required.

.P 5
^*ok#=#PARFILN( result, reslen, source, default, allow__ver )\*

.LM +30
.P -25
out#-#long####^*ok\*#########LSL____NORMAL if the filename is parsed 
successfully, otherwise see below
.I -25
out#-#char####^*result\*#####the final result of the parse is placed here
.I -25
out#-#word####^*reslen\*#####the total length of the filename in result (NB if
the filename is too long to fit into ^*result\*, the length of ^*result\* is
returned) 
.I -25
in##-#char####^*source\*#####this is the filename as supplied by the user
.I -25
in##-#char####^*default\*####this is the default or template filename
.I -25
in##-#logical#^*allow__ver\*##true if to allow version numbers, false if not to.
NB - if this is false, they are not allowed in ^*default\* either. If true
then a version number must be supplied in ^*default\*. If the default file is 
to be that with the latest version number, version ';0' should be specified
eg 'LSL$IF:IFF.IFF;0'.

.LM -30

.P 0
Thus a typical call might be:

.P 5
.INDEX ^^PARFILN
OK = PARFILN( RESULT, RESLEN,
.I 5
## # ######## TXTDSC, 'LSL$IF:IFF.IFF;0', .TRUE. )

.P 0
The function works by

.BLANK

.LIST 0

.LE; Unsetting all elements in /FILENAME/ - that is all
lengths are set to zero, and all logicals are set false 
.INDEX ^^Common blocks> FILENAME
.LE; Calling FILE__PARSE on ^*default\* - this parses the default string into
the common block 

.LE; Checking ^*allow__ver\* - if HAD__VER is true, and ^*allow__ver\* is
false, then exit with LSL____DEFVERNUM 

.LE; Calling FILE__PARSE on ^*source\* - this parses the source string into
the common block as well 

.LE; Checking ^*allow__ver\* - if HAD__VER is true, and ^*allow__ver\* is
false, then exit with LSL____DEFVERNUM 

.LE; Calling EXPFLN to expand the combined filename into
^*result\* and ^*reslen\*
.INDEX ^^EXPFLN

.LE; If ^*reslen\* greater than len(^*result\*)
.BR
then ^*reslen\*#:=#len(^*result\*), and return with LSL____FILTOOLONG

.LE; success#=>#return#LSL____NORMAL

.END LIST

.P 0
Possible values returned in ^*ok\* are:
.INDEX ^^Filename parsing routines> PARFILN> condition codes

.LM +18

.P-18; LSL____NORMAL#####-#success#-#filename successfully parsed
.I-18; LSL____DEFTOOBIG##-#warning#-#one of the components of ^*default\*
was too long - the component will have been truncated 
.I-18; LSL____BADPARSE###-#failure#-#too few arguments were supplied to
FILE__PARSE - this reflects a bug in the routine - please report it! 
.I-18; LSL____DEFFILNAM##-#failure#-#an error occurred in parsing ^*default\*
.I-18; LSL____DEFVERNUM##-#failure#-#a version number was supplied in
^*default\*, although ^*allow__ver\* is false 
.I-18; LSL____SRCTOOBIG##-#warning#-#one of the components of ^*source\*
was too long - the component will have been truncated 
.I-18; LSL____SRCFILNAM##-#failure#-#an error occurred in parsing ^*source\*
.I-18; LSL____SRCVERNUM##-#failure#-#a version number was supplied in
^*source\*, although ^*allow__ver\* is false 
.I-18; LSL____FILTOOLONG#-#warning#-#the resulting filename was too long to fit 
into ^*result\*

.LM -18


.PAGE
.HL 1 ^^^&EXPFLN_ -_ expand_ a_ filename_ from_ its_ parts\&
.INDEX ^^Filename parsing routines> EXPFLN

.P 0
EXPFLN is used to expand a full filename from the parts in /FILENAME/. 
It does not write anything to the common block. 
.INDEX ^^Common blocks> FILENAME
.P 5
^*ok = EXPFLN( string, strlen )\*
.INDEX ^^EXPFLN

.LM +30
.P -25
out#-#long####^*ok\*#########LSL____NORMAL if the filename is expanded 
successfully, otherwise see below
.I -25
out#-#char####^*string\*#####the string to put the filename into
.I -25
out#-#word####^*strlen\*#####the length of the filename
.LM -30

.P 0
Note that if the resultant filename is too long to fit into ^*string\*, then
^*strlen\* will hold the full length, but ^*string\* will hold only a truncated
form of the name.

.P 0
^*ok\* may return either of the values
.INDEX ^^Filename parsing routines> EXPFLN> condition codes

.LM +18
.P -18
LSL____NORMAL#####-#success#-#filename expanded successfully
.I -18
LSL____FILTOOLONG#-#warning#-#the filename was too long, and has been truncated
.I -18
LSL____NOFIELD####-#warning#-#either the device or node field was flagged
as present, but had zero length. Note that the other fields MAY be present
and null (eg as in [].;)
.I -18
LSL____FILNOLEN###-#error###-#the assembled filename has zero length. This
presumably reflects a mismatch between the HAD__xxx flags and the LEN__xxx
sizes.
.LM -18

.HL 1 ^^^&PUTFLN_ -_ parse_ a_ filename_ into_ the_ common_ block\&
.INDEX ^^Filename parsing routines> PUTFLN

.P 0
PUTFLN places a filename into /FILENAME/, using FILE__PARSE

.P 5
^*ok = PUTFLN( name )\*
.INDEX ^^PUTFLN
.P 0
where we have:

.LM +30
.P -25
out#-#long####^*ok\*#########LSL____NORMAL if the filename is parsed 
correctly, otherwise see below
.I -25
in##-#char####^*name\*#######the filename to parse
.LM -30

.P 0
Where ^*ok\* may have one of the values
.INDEX ^^Filename parsing routines> PUTFLN> condition codes

.LM +18
.P-18; LSL____NORMAL#####-#success#-#^*name\* parsed successfully, and placed
into the common block 
.I-18; LSL____SRCTOOBIG##-#warning#-#some component of the filename was too
long, and has been truncated 
.I-18; LSL____BADPARSE###-#failure#-#too few arguments to FILE__PARSE - 
this reflects a bug in the routine, and should be reported!
.I-18; LSL____SRCFILNAM##-#failure#-#some error occurred parsing ^*name\*
.LM -18

.PAGE
.HL 1 ^^^&FILE__PARSE - the filename parsing routine\&
.INDEX ^^Filename parsing routines> FILE__PARSE

.P 0
Although not really intended to be called from outside PARFILN, this routine is
documented for completeness. FILE__PARSE uses LIB$TPARSE to parse the filename
handed to it (see next section for the filename definition it uses).

.LM +5
.P 0
.INDEX ^^FILE__PARSE
^*ierr = FILE__PARSE(
.BR
#### # ##########FILE__NAME,
.BR
#### # ##########HAD__NOD, STR__NOD, LEN__NOD,
.BR
#### # ##########HAD__DEV, STR__DEV, LEN__DEV,
.BR
#### # ##########HAD__DIR, STR__DIR, LEN__DIR,
.BR
#### # ##########HAD__NAM, STR__NAM, LEN__NAM,
.BR
#### # ##########HAD__EXT, STR__EXT, LEN__EXT,
.BR
#### # ##########HAD__VER, STR__VER, LEN__VER
.BR
#### # ##########)\*
.LM -5

.LM +30
.P -25
out#-#long####^*ierr\*#######system error return - LSL____NORMAL for success
.I -25
in##-#char####^*FILE__NAME\*##the file name to be parsed
.I -25
out#-#logical#^*HAD__xxx\*####true if field ^*xxx\* is present
.I -25
out#-#char####^*STR__xxx\*####field ^*xxx\* is returned here
.I -25
out#-#long####^*LEN__xxx\*####length of field in ^*STR__xxx\*
.LM -30

.P 0
Note that all arguments must be present. The ^*HAD__xxx\*, ^*STR__xxx\* and
^*LEN__xxx\* arguments would normally be the appropriate variables from 
/FILENAME/.
.INDEX ^^Common blocks> FILENAME

.P 0
FILE__PARSE parses the file name given, and sets the appropriate logicals,
strings and lengths. If a filename field is not present, the arguments
relating to it are not touched, thus allowing the usage of FILE__PARSE in
PARFILN, where the ^*default\* filename is read into the common block, and the
^*source\* filename is then superimposed on it. 

.P 0
Note that all defining punctuation is omitted - eg the brackets around a 
directory name (although not the dots inside it), the colon after a device
name, the semicolon before a version number. Also, blank fields are allowed,
so that a filename such as

.P 5
FRED.IFF;

.P 0
will still cause HAD__VER to be set (since the ';' was present) although
LEN__VER will be zero, and STR__VER will be empty (full of spaces).

.P 0
The values normally returned in ^*ierr\* are:
.INDEX ^^Filename parsing routines> FILE__PARSE> condition codes

.LM +18
.P -18
LSL____NORMAL#####-#success#-#filename parsed successfully
.I -18
LSL____SYNTAXERR##-#failure#-#there was a syntax error in the filename being 
parsed - parsing was abandoned. As much of the filename as was parsed correctly 
will have been placed into the arguments.
.I -18
LSL____RESULTOVF##-#failure#-#resultant string overflow.
One of the fields of the filename was too long - parsing was abandoned, after 
placing a truncated version of the field into the appropriate string argument.
The length argument for that field will be set to the full (untruncated) 
length of the field.
.I -18
LSL____BADPARSE###-#failure#-#too few arguments were supplied to
FILE__PARSE - this reflects a bug in the routine and should be reported.
.I -18
LSL____INTPARSERR#-#failure#-#internal parsing error - should never occur, and
should be reported if it does.
.LM -18


.PAGE
.HL 1 ^^^&Definition of a filename\&
.INDEX ^^Filename> definition of
.INDEX ^^Filename parsing routines> definition of a filename

.P 0
FILE__PARSE parses the source string into its constituent elements,
using the following (rather informal) definition of a file.

.P 0
A filename is a _<FILE_> where:

.P 0
_<file_>###########::=##_<node_>#_<device_>#_<directory_>#_<name_>
.BR
######################_<extension_>_<version_>

.P 0
_<node_>###########::=##null#|#_<alphan_>#':'#':'

.P 0
_<device_>#########::=##null#|#_<symbol_>#':'

.P 0
_<directory_>######::=##null#|#'['#_<dir__text_>#']'#|
.BR
#############################'_<'#_<dir__text_>#'>'

.P 0
_<dir__text_>#######::=##_<ndot_>#_<dir__start_>#_<dir__rest_>

.P 0
_<ndot_>###########::=##null#|#'.'

.P 0
_<dir__start_>######::=##null#|#'-'#|#_<name_>

.P 0
_<dir__rest_>#######::=##null#|#'.'#_<name_>#_<dir__rest_>

.P 0
_<name_>###########::=##null#|#_<string_>

.P 0
_<extension_>######::=##null#|#'.'#_<ext__text_>

.P 0
_<ext__text_>#######::=##null#|#_<string_>

.P 0
_<version_>########::=##null#|#';'#_<ver__text_>#|#'.'#_<ver__text_>

.P 0
_<ver__text_>#######::=##null#|#_<signed__number_>

.P 0
_<signed__number_>##::=##_<sign_>##_<number_>

.P 0
_<sign_>###########::=##null#|#'+'#|#'-'

.BLANK
.P 0
and, informally, we have

.P 0
_<alphan_>#########::=##sequence of _<letter_>s and digits

.P 0
_<symbol_>#########::=##sequence of _<letter_>s, digits, '__' and '$'

.P 0
_<number_>#########::=##sequence of digits

.P 0
_<letter_>#########::=##upper or lower case alphabetic

