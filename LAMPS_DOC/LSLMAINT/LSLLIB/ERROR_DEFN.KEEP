.!*
.!* Error definition - error message files, etc
.!*

.CHAPTER  ^^Error message definition

.INDEX ^^Error messages	
.INDEX ^^Error message definition
.HL 1 ^^^&Introduction\&
.INDEX ^^Error message definition> introduction	

.P 0
This chapter describes how to define error message files.

.P 0
Error messages are defined in a text file in a standard format, and 
processed by a supplied program to produce the various necessary files.

.INDEX ^^Error messages> groupings
.P 0
There are two 'groupings' of error message -

.LIST

.LE; Those provided by a library (for instance LSLLIB). These are always 
available when the library is linked with a program.

.LE; Those provided for an individual program. Each program will have its own 
message definition file, which is kept in its source directory. 

.END LIST

.HL 1 ^^^&The_ message_ definition_ file\&
.INDEX ^^Error messages> message definition file
.INDEX ^^Message definition file> contents
.P 0
The error message definition file describes the messages available for a 
particular library, package or individual program.

.HL 2 ^^^&General_ layout_ rules\&
.INDEX ^^Error messages> message definition file> layout
.INDEX ^^Error messages> message definition file> comments
.INDEX ^^Message definition file> layout
.INDEX ^^Message definition file> comments

.P 0
Blank lines, and comment lines (which must start with "!") are 
ignored, and may be freely used in the file. Note that comments may also
be included at the end of lines, but the comment character will terminate
the line read by the message programs.

.P 0
Spaces and tabs may be used as delimiters between different data fields, and 
are otherwise ignored (except within message texts). Also, the case of the 
data fields is irrelevant (except within message texts).

.TP 10
.HL 2 ^^^&Message_ definition\&
.INDEX ^^Error messages> message definition file> message severity
.INDEX ^^Error messages> message definition file> message mnemonics
.INDEX ^^Error messages> message definition file> message basic text 
.INDEX ^^Error messages> message definition file> message format text 
.INDEX ^^Message definition file> message severity
.INDEX ^^Message definition file> message mnemonics
.INDEX ^^Message definition file> message basic text 
.INDEX ^^Message definition file> message format text 

.P 0
Each message is defined by the sequence:

.P 5
_<severity_>###_<mnemonic_>###_\_<basic text_>_\###_\_<format text_>_\

.P 0
where:

.LM +15
.P -15
_<severity_>#####is the severity of this message - it may be any one of
SUCCESS, INFORMATIONAL, WARNING, ERROR, SEVERE or FATAL (the last two are
equivalent). 

.P -15
_<mnemonic_>#####is the mnemonic for this error message - this should be an 
abbreviation of the message text. Abbreviations should be made in a consistent 
manner.

.P -15
_<basic text_>###this is the text that would be output by a call of
.P 5
LIB$PUTMSG(#error-number#)
.P 0
It should be a plain text message, with no _% escape sequences.

.INDEX ^^LIB$PUTMSG
.P -15
_<format text_>##this is the format statement used when outputting a message 
with LSL__PUTMSG - it is processed by EXPAND before being output. If this field
is omitted, then it is assumed to be the same as _<basic text_>.

.LM -15

.P 0
The fields may be separated by spaces or tabs. The following notes apply to the
message texts :- 

.LIST
.DISPLAY ELEMENTS D,")"

.LE; The message texts must be enclosed by backward slashes - to include a 
backward slash in the text itself, insert it twice.

.LE; The texts (with their backward slashes) may start on new lines if required

.LE; The triangular bracket characters ("_<" and "_>") are used to delimit
the message texts internally. They may not be used within a message.

.LE; Where a message quotes something the user typed, this should be enclosed
in double quotes. 

.END LIST

.TP 25
.INDEX ^^Error messages> message definition file> example file
.INDEX ^^Message definition file> example file
.HL 2 ^^^&Example\&

.LITERAL

! define messages for the IMPOSSIBLE program

SUCCESS  NORMAL    \Mission successful\

INFORM   MISSION   \Your mission, should you choose to accept it, is\
INFORM   MISSTEXT  \- mission text -\
		   \"%S"\

WARNING  DESTRUCT  \This message will self-destruct\
		   \This message will self-destruct in %N second%m\

FATAL    BANG	   \*** Bang ***\	\*** %S ***\

.END LITERAL

.P 0
Processing this file will result in the definition of five messages.

.P 0
Within a program, they may be referred to as IMP____SUCCESS, IMP____MISSION,
IMP____MISSTEXT, IMP____DESTRUCT and IMP____BANG.

.P 0
A call of

.P 5
LSL__PUTMSG( IMP____MISSTEXT, 'to use this library' )

.P 0
will output the following message:

.P 5
_%IMPOSSIBLE-I-MISSTEXT, to use this library

.HL 2 ^^^&Message_ Severities\&
.INDEX ^^Error messages> message definition file> message severity
.INDEX ^^Error messages> severity
.INDEX ^^Message definition file> message severity

.P 0
The message severities used in LaserScan programs should normally follow
the following conventions:

.LM +16

.P -16        
Success#######-#the message is reporting that the program has performed
normally and succeeded.

.P -16
Informational#-#the message is for information only, and does not affect
the program's successful completion.

.P -16
Warning#######-#the message is to warn the user of something strange happening.
The program will attempt to continue, but the results should be checked.

.P -16
Error#########-#the message is to report a definite error in processing. The
program will give up processing the input data, and the output data produced
so far may well be suspect.

.P -16
Fatal#########-#the message is to report a very severe error - this normally
reflects program failure, or possibly some sort of system failure. This
sort of error may need to be reported to LaserScan. 

.LM -16
                                    
.HL 1 ^^^&Processing_ the_ message_ file\&
.INDEX ^^Message definition file> processing

.P 0
Once the message text file has been prepared, it must be processed by the 
NEWMESSAGE utility, which may be found as LSL$SYS:NEWMESSAGE.COM

.P 0
The command file will prompt for
.BLANK
.LIST 0,"*"
.LE; the input file #####(_<infile_>.MES)
.LE; the facility name ##(_<fac-name_>)
.LE; the facility number
.LE; the facility prefix
.END LIST

.P 0
Note that _<infile_> and _<fac-name_> will normally be the same,
and that the facility prefix is normally _<fac-name_>____

.P 0
The procedure will then read the message file _<infile_>.MES, and produce the
following outputs: 

.LIST "*"

.INDEX ^^Error messages> FORTRAN parameter file
.LE; A Fortran parameter file, _<fac-name_>MSG.PAR, defining the message values 
as parameters

.INDEX ^^Error messages> MACRO parameter file
.LE; A Macro parameter file, _<fac-name_>MSG.MAR, defining the message values 
as constants

.INDEX ^^Error messages> MESSAGE utility
.LE; Intermediate files for input to the MESSAGE utility - these are normally 
deleted after use. The main ones are _<infile_>.GENMSG and _<infile_>.PROMSG

.LE; An object file, _<infile_>.PROMSG__OBJ, produced by the VMS MESSAGE 
utility. This should be linked with all images which want to output the 
messages, or which want to reference the message numbers as EXTERNAL symbols.

.LE; An object file called _<infile_>.GENMSG__OBJ, which is used to look up 
the format texts outside of the program to which the message definitions apply. 
The _<infile_>.GENMSG__OBJ file should be linked as a sharable image, ie:
.SKIP
.BR
#$#LINK/SHARE _<infile_>.GENMSG__OBJ /EXE=_<infile_>.MSG__EXE
.SKIP
.BR
The contents of the sharable image may then be appended to the system message
definition tables with the command: 
.SKIP
.BR
.INDEX ^^Error messages> SET MESSAGE command
#$#SET MESSAGE _<infile_>.MSG__EXE
.SKIP
.END LIST
.P 0;For Laser-Scan standard packages of programs (eg IMP) the general message 
object files, _<infile_>.GENMSG__OBJ, should be concatenated into a single 
shareable image, ie:
.SKIP
.NF
$#LINK/SHARE/EXE=IMP.MSG__EXE#<infile1_>.GENMSG__OBJ, -
__$#<infile2_>.GENMSG__OBJ, -
__$#<infile3_>.GENMSG__OBJ,<infile4_>.GENMSG__OBJ

.FILL
.P 0;This unified package shareable image which will contain the message
definitions for all the programs which constitute the package should be copied
to LSL$MSG:.

.P 0;A package initialisation command file should then be prepared for public
use. This will allow the user to select the package message definitions that 
will need to be appended to the system message definition tables for the 
current session.

.P 0;It is important that a specific initialisation file be used. If
LOGDEFNS.COM had to set up the message definitions for all possible packages,
then this would place an unacceptable time penalty on logins for sessions which
did not require the messages.

.P 0;It is also important to ensure that the
message definitions have been appended to the system message definition tables
before the user attempts to use a program which may require definition of those
messages. It is therefore recommended that all the symbol and logical name 
assignments for the package are included in the initialisation file. For 
example: 

.TP 15
.INDEX ^^Program message initialisation file
.INDEX ^^Error messages> program message initialisation file
.LM +8
.LITERAL

$ ! Initialisation file for Laser-Scan IFF Manipulation Package  - IMP
$ !
$ VER_STATUS=F$VERIFY(0)
$ !
$ ! Install package message definitions
$ SET MESSAGE LSL$MSG:IMP
$ !
$ ! Define symbols:
$ ILAYFC   :==  $LSL$EXE:ILAYFC
$ IMEND    :==  $LSL$EXE:IMEND
$ IPATCH   :==  $LSL$EXE:IPATCH
$ IREPORT  :==  $LSL$EXE:IREPORT
   etc...

$ TYPE SYS$INPUT

The following IMP programs are now available:

ILAYFC   IMEND   IPATCH   IREPORT

$ !
$ IF VER_STATUS THEN SET VERIFY
.END LITERAL
.LM -8

.P 0;This command file would be invoked by the user with a command like :

.P 5
$#IMPINI

.P 0;where IMPINI is defined as @LSL$INI:IMPINI.COM

.NOTE
The current SET MESSAGE will only install one message definition file -
if another is specified then the original is replaced. The package message
definition files are thus not currently being used, until such time as it
is possible to install several message definitions at once.
.END NOTE

.HL 1 ^^^&Building_ a_ program_ with_ user_ defined_ messages.\&

.INDEX ^^Error messages> building a program 

.P 0;The following example assumes that the user is creating a new program
IMPOSSIBLE. All the steps required to prepare a message definition source file
and to generate the required object modules and parameter files (using 
LSL$SYS:NEWMESSAGE) are shown.

.LIST

.LE; The FORTRAN source file for the program should include the message 
parameter file IMPOSSIBLE.PAR ie:

.TP 6
.SKIP
.P 0;########INCLUDE 'LSL$CMNIMPOSSIBLE:IMPOSSIBLE.PAR'
.P 0;or if an ADC include statement is preferred:
.P 0;_*_*_*#####PARAMETER/LSL$CMNIMPOSSIBLE:IMPOSSIBLE/

.LE; A Laser-Scan format message definition file should be prepared using the
layout defined in section 3.2.2 and following sections.

.LE; Consult the VAX system manager before specifying the facility number in the
message file. If several programs or libraries had the same facility number,
then the wrong error messages could be generated. 

.LE; Invoke the NEWMESSAGE command file and answer the questions. This may
be done interactively as follows:

.INDEX ^^Error messages> NEWMESSAGE utility
.INDEX ^^NEWMESSAGE utility
.LM +3
.LITERAL

$ NEWMESSAGE
What is the name of the message definition file? IMPOSSIBLE.MES

DISK1:[MISSION.IMPOSSIBLE]

What is the facility name?   (eg LSLLIB) IMPOSSIBLE
What is the facility number? (eg 1)      1024
What is the facility prefix? (eg LSL__)  IMPOSSIBLE__
Do you want the message names and texts reflecting? NO
Do you want a shareable image of the xxx.GENMSG_OBJ file
in your local directory? YES

Creating IMPOSSIBLEMSG.PAR
Creating IMPOSSIBLEMSG.PAR

You can now use
	 SET MESSAGE IMPOSSIBLE.MSG_EXE
to install the message definitions for your process.

The module IMPOSSIBLE.PROMSG_OBJ
should be linked with your program to define the messages
$
.END LITERAL
.LM -3

.P 0; As the NEWMESSAGE command file says, you can now compile your program
(which will lead to the inclusion of IMPOSSIBLE.PAR) and link it with
IMPOSSIBLE.PROMSG__OBJ and LSLLIB

.LE; Alternatively, a command file would include lines of the form:

.LM +3
.LITERAL

$   newmessage impossible.mes impossible 1024 impossible__ n y
$   set message impossible.msg_exe
		:::::
$   link'debug' impossible,subroutines,-
                impossible.promsg_obj,-
                lsl$library:lsllib/lib
.END LITERAL
.LM -3

.LE; If you asked for it, the object module containing the message definitions
without EXPLODE escape sequences (<infile_>.GENMSG__OBJ;) will have been linked
as a shareable image by the NEWMESSAGE utility.

.P 0
This shareable image may now be copied to LSL$MSG:, and if required the
necessary SET MESSAGE command added to an appropriate user initialisation file.
If the messages relate to a program which is part of a larger Laser-Scan
program package eg IMP, then do not select to link the general message object
file (<infile_>.GENMSG__OBJ;) into a shareable image but instead relink all the
package <infile_>.GENMSG__OBJ; files into a single shareable image, and place
the whole package shareable image in LSL$MSG:. 

.END LIST
