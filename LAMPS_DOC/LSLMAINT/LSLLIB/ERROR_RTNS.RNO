.!*
.!* Error message routines - error message routines, etc
.!*

.INDEX ^^Error messages	
.INDEX ^^Error message routines
.HL 1 ^^^&Introduction\&
.INDEX ^^Error message routines> introduction	

.P 0
This chapter describes how to output the error messages defined using the
LSLLIB message definition procedure (see the previous chapter), and how
to perform other forms of diagnostic message outputting.

.INDEX ^^Error message routines> general routines 

.HL 1 ^^^&General_ error_ message_ routines\&

.P 0
LSL__PUTMSG and LSL__ADDMSG are the recommended routines to use when outputting
messages from a program.
             
.BLANK
.TP 10
.P 5 
^*ok = LSL__PUTMSG( errnum, [arg1], [arg2], ... )\*

.INDEX ^^LSL__PUTMSG

.LM +30
.P -25
out#-#long#####^*ok\*########return code from getting the message string
.I -25
in##-#long#####^*errnum\*####LSL utility error number
.I -25
in##-#variable#^*arg_<n_>\*####arguments as for EXPAND
.LM -30

.INDEX ^^LSL$DEBUG__TRACE
.INDEX ^^LSL__PUTMSG > LSL$DEBUG__TRACE
.INDEX LSL__INIT
.INDEX LSL__DEBUG__TRACE
.P 0
If the logical name LSL$DEBUG__TRACE was defined when LSL__INIT was called, or
when LSL__DEBUG__TRACE was last called, then all calls of LSL__PUTMSG are
converted into calls of LSL__SIGNAL. This is intended to help in debugging
programs. 

.P 0 
Otherwise, LSL__PUTMSG looks up the error number ^*errnum\* in the list of error
message formats, and calls EXPAND on the result, using the given arguments. The
resulting string is then assembled into a system style message (according to
the severity of ^*errnum\*), and output by VIO$PUT__OUTPUT. 

.P 0
If ^*errnum\* is not found in the supplied list, then it is looked up as a 
system error number, and the corresponding text is output instead. If it is 
still not found, then the error LSL____NOMESSAGE is output.

.P 0
In addition to outputting the appropriate message, LSL__PUTMSG sets
LSL__STATUS in /STATUS/ to (^*errnum\*.OR.LSL__QUIET).

.P 0
The following values of ^*ok\* may be returned:

.LM +16
.P -16
LSL____NORMAL#####-#the message text was successfully found, EXPANDed
and output
.I -16
LSL____BUFFEROVF##-#the message text was too long to fit into the internal
buffers used by the routine.
A warning message (SS$__BUFFEROVF) is output, and then the message is truncated
and the truncated version is output
.I -16
LSL____MSGNOTFND##-#the message text cannot be found. The function does
not output anything.
.LM -16

.BLANK
.TP 10
.P 5 
^*ok = LSL__ADDMSG( errnum, [arg1], [arg2], ... )\*

.INDEX ^^LSL__ADDMSG

.LM +30
.P -25
out#-#long#####^*ok\*########return code from getting the message string
.I -25
in##-#long#####^*errnum\*####LSL utility error number
.I -25
in##-#variable#^*arg_<n_>\*####arguments as for EXPAND
.LM -30

.P 0 
LSL__ADDMSG is identical to LSL__PUTMSG, except that

.LIST
.LE; it does not set LSL__STATUS
.LE; it prefixes its message with "-" (hyphen), rather than "%"
.LE; it is never converted into a call of LSL__SIGNAL
.END LIST

.TP 10
.P 0
An example of use of these routines might be:

.LITERAL

	OK = LSL_PUTMSG( EXAMPLE__UNEXPEOL )
	IF ( .NOT.OK ) CALL MSGERR( OK )
	OK = LSL_ADDMSG( EXAMPLE__READCNT, LINENO )
	IF ( .NOT.OK ) CALL MSGERR( OK )
	CALL LSL__EXIT
.END LITERAL

.TP 5
.P 0
which would output the messages:

.LITERAL

	%EXAMPLE-E-UNEXPEOL, unexpected end of line
	-EXAMPLE-I-READCNT, read 2500 lines of text
.END LITERAL

.P 0
and, since EXAMPLE__UNEXPEOL is of severity E (Error), would set $STATUS to
SS$__ABORT with a severity of Error.

.TP 10
.P 0
A more usual piece of code is:

.LITERAL

	OK = TTRSTR( ,, '> ', IERR )
	IF ( .NOT.OK ) THEN
	   CALL LSL_PUTMSG( EXAMPLE__READLINE )
	   CALL LSL_ADDMSG( OK )
	   IF ( OK.EQ.LSL__SYSERR ) CALL LSL_ADDMSG( IERR )
	   GOTO 9999
	ENDIF
.END LITERAL

.P 0
which produces the normal message sequence for most Laser-Scan utiltiies.


.BLANK
.TP 10
.P 5 
^*call LSL__SETMSG( facility-name, severity, message-name )\*

.INDEX ^^LSL__SETMSG

.LM +30
.P -25
in##-#logical##^*facility-name\*#
.I -25
in##-#logical##^*severity\*######
.I -25
in##-#logical##^*message-name\*##
.LM -30

.P 0
LSL__SETMSG is used to set the format of the message string which is output
by LSL__PUTMSG or LSL__ADDMSG. Each of the arguments should be TRUE if that
field of the message should be present, and FALSE if it should be absent.
The default state is as if LSL__SETMSG had been called with all arguments
TRUE.

.P 0
Using the same definition of message EXAMPLE__UNEXPEOL as above, the code

.LITERAL

	call LSL_SETMSG( .FALSE., .TRUE., .TRUE. )
	call LSL_PUTMSG( EXAMPLE__UNEXPEOL )
	call LSL_SETMSG( .FALSE., .FALSE., .TRUE. )
	call LSL_PUTMSG( EXAMPLE__UNEXPEOL )
	call LSL_SETMSG( .FALSE., .FALSE., .FALSE. )
	call LSL_PUTMSG( EXAMPLE__UNEXPEOL )
.END LITERAL

.P 0
will output the message sequence

.LITERAL

	%E-UNEXPEOL, unexpected end of line
	%UNEXPEOL, unexpected end of line
	Unexpected end of line
.END LITERAL

.TP 20
.HL 1 ^^^&Outputting_ an_ erroneous_ text_ string\&

.P 0
LSL__ADDSTR and LSL__ADDBUF are used to output a text string or buffer between
backslash (_\) characters.

.P 5
^*ok = LSL__ADDSTR( [string], [start], [end], [ierr] )\*

.P 5
^*ok = LSL__ADDBUF( [buffer], [buflen], [start], [end], [ierr] )\*

.INDEX ^^LSL__ADDSTR
.INDEX ^^LSL__ADDBUF
 
.LM +30
.P -25
out#-#long#####^*ok\*########return code
.I -25
in##-#char#####^*string\*####the string to output
.I -25
in##-#byte#####^*buffer\*####the buffer to output
.I -25
in##-#word#####^*buflen\*####the length of ^*buffer\*
.I -25
in##-#word#####^*start\*#####index of the first character
.I -25
in##-#word#####^*end\*#######index of the last character
.I -25
out#-#long#####^*ierr\*######system error code
.LM -30

.P 0
In both routines, the actual text to be output defaults to that in /TXTC/
 - that is, ^*string\* defaults to TXTDSC, ^*buffer\* defaults to TXTBUF
and ^*buflen\* defaults to TXTPTR.

.P 0
^*start\* and ^*end\* are used to specifiy that a substring should be output.
^*start\* defaults to 1 (start with the first character) and ^*end\* defaults
to either LEN(^*string\*) or to ^*buflen\* (ie end with the last character).

.P 0
Thus a typical example of use would be:

.LITERAL

	ok = LSL_PUTMSG( EXAMPLE__UNEXPEOL )
	.......
	ok = LSL_ADDSTR()
.END LITERAL

.P 0
producing the following output:

.LITERAL

	%EXAMPLE-E-UNEXPEOL, unexpected end of line
	\This line ends unexpect\
.END LITERAL

.P 0
^*ok\* returns LSL__NORMAL if the output succeeded, and otherwise
LSL__SYSERR if the output failed. In the latter case, ^*ierr\* contains
the relevant system error code.


.TP 20
.HL 1 ^^^&Producing_ a_ traceback\&

.P 0
LSL__SIGNAL is used to produce a traceback when some very severe error occurs,
and LSL__DEBUG__TRACE is called by LSL__INIT to establish whether calls
of LSL__PUTMSG should be converted to calls of LSL__SIGNAL.

.BLANK
.P 5 
^*ok = LSL__SIGNAL( errnum, [arg1], [arg2], ... )\*

.INDEX ^^LSL__SIGNAL
 
.LM +30
.P -25
out#-#long#####^*ok\*########return code
.I -25
in##-#long#####^*errnum\*####LSL utility error number
.I -25
in##-#variable#^*arg_<n_>\*####arguments as for EXPAND
.LM -30

.P 0 
LSL__SIGNAL calls LSL__PUTMSG with the supplied arguments. It then 
provokes a traceback by calling LIB$SIGNAL with the message LSL____SIGNAL,
with its severity code set to be the same as the severity of the original 
message.

.P 0
Note that this routine is not generally recommended for use in message
production, as tracebacks can be very confusing to ordinary users.

.P 0
^*ok\* returns LSL____MSGNOTFND if the message text cannot be found (in
which case no message is output), and otherwise the return code from
the call of LIB$SIGNAL.

.BLANK
.P 5 
^*ok = LSL__DEBUG__TRACE( [tracing] )\*

.INDEX ^^LSL__SIGNAL
 
.LM +30
.P -25
out#-#long#####^*ok\*########return code
.I -25
out#-#logical##^*tracing\*###true if LSL$DEBUG__TRACE is defined
.LM -30

.P 0
This routine uses the system function SYS$TRNLNM to determine whether the
logical name LSL$DEBUG__TRACE is defined. If it is, then future calls
of LSL__PUTMSG will be converted to calls of LSL__SIGNAL. If it is not defined,
then calls will not be converted.

.P 0
If ^*tracing\* is present, then it returns true if the logical name was
found, and false if it was not. ^*ok\* returns the return code from
the call of SYS$TRNLNM - see the DEC system services documentation for a
list of the possible system return codes.

.p0; Note that LSL__INIT calls LSL__DEBUG__TRACE when the library is
initialised.

.HL 1 ^^^&Extracting_ the_ message_ text\&

.P 0
LSL__GETMSG and LSL__GETFORMAT are used to get the message string, or message
format string, so that the user program can process them further.

.BLANK
.P 5 
^*ok = LSL__GETMSG( errnum, string [,strlen])\*

.INDEX ^^LSL__GETMSG

.LM +30
.P -25
out#-#long####^*ok\*#########return code from getting message string
.I -25
in##-#long####^*errnum\*#####error number
.I -25
out#-#char####^*string\*#####basic text string corresponding to the error
.I -25
out#-#char####^*strlen\*#####length of text string 
.LM -30

.P 0 
LSL__GETMSG looks up the error number ^*errnum\* in the error message symbols,
and returns the appropriate message text in ^*string\*.

.P 0
Note that this string may include EXPAND escapes (ie %_<character_>), but that
the initial '%' character will NOT be doubled. If you intend to use this string
as a format string to EXPAND, then you must prefix it with an additional '%'. 

.P 0                        
The length of the text string is optionally returned in ^*strlen\*. 

.P 0
For instance,

.P 5
ok = LSL__GETMSG( LSL____NORMAL, string, length )

.P 0
would return the string '%LSLLIB-S-NORMAL_,#normal_,#successful#completion'.

.P 0
If this function is used on a system error number, the appropriate system
message is returned in ^*string\*. 

.P 0
The following values of ^*ok\* may be returned:

.LM +16
.P -16
LSL____NORMAL#####-#the message text was successfully found, EXPANDed
and output
.I -16
LSL____BUFFEROVF##-#the message text was too long to fit into ^*string\*.
A warning message (SS$__BUFFEROVF) is output, and then the message is truncated
and the truncated version is output
.I -16
LSL____MSGNOTFND##-#the message text cannot be found. The function does
not output anything.
.LM -16

.BLANK
.P 5 
^*ok = LSL__GETFORMAT( errnum, string [,string__length])\*

.INDEX ^^LSL__GETFORMAT

.LM +30
.P -25
out#-#long####^*ok\*#########return code from getting message string
.I -25
in##-#long####^*errnum\*#####LSL utility error number
.I -25
out#-#char####^*string\*#####format string string corresponding to the error
.I -25
out#-#char####^*string__length\*##length of text string 
.LM -30

.P 0 
LSL__GETFORMAT looks up the error number ^*errnum\* in the list of error
message formats, and returns the EXPAND format string for the message text in
^*string\*. The length of the text string is optionally returned in
^*string__length\*. 

.P 0
For instance,

.P 5
ok = LSL__GETFORMAT( LSL____NORMAL, string, length )

.P 0
would return the string 'normal_,#successful#completion'.

.P 0
If this function is used on a system error number, the appropriate system
message text is returned in ^*string\*. 


.P 0
The following values of ^*ok\* may be returned:

.LM +16
.P -16
LSL____NORMAL#####-#the message text was successfully found, EXPANDed
and output
.I -16
LSL____BUFFEROVF##-#the message text was too long to fit into ^*string\*.
A warning message (SS$__BUFFEROVF) is output, and then the message is truncated
and the truncated version is output
.I -16
LSL____MSGNOTFND##-#the message text cannot be found. The function does
not output anything.
.LM -16



.INDEX ^^Error message routines> marking position in TXTBUF
.HL 1 ^^^&Marking_ current_ position_ in_ TXTBUF\&

.P 5 
^*call MARK__POSN( [prompt], [offset], pointer )\*

.INDEX ^^MARK__POSN

.LM +30
.P -25
in##-#char####^*prompt\*#####the prompt used when requesting the string at 
fault - only required to ascertain its length
.I -25
in##-#long####^*offset\*#####the offset to use from the current position - an 
offset of zero will point directly to the last character read
.I -25
in##-#char####^*pointer\*####the character(s) to use as a pointer, typically _^
.LM -30

.P 0 
MARK__POSN can be used to point to an error in a string typed by a user - to
highlight where in the input an error occurred.

.P 0
The default action is to point at the last character read (using the value of
DCPTR to establish where this is). If ^*prompt\* is specified, then it is
assumed that the ^*pointer\* must be moved LEN(^*prompt\*) characters to the
right. If ^*offset\* is specified, then the pointer will be output at the
default position plus ^*offset\*.

.P 0
If either of these results in the pointer being before the beginning or after
the end of the line, then no line is output and a warning message (either
LSL____NEGPOSNMK or LSL____POSNMKOVF) is issued. 

.P 0
For example:

.LITERAL

1000	OK = TTRSTR( ,, 'Next line> ', IERR )
	......
	IF ( READ_ERROR ) THEN
	   OK = MARK_POSN( 'Next line> ',, '^error' )
	   CALL EXPAND('Expression ends before end of line')
	   CALL WRITAP(' - too many brackets?')
	   GOTO 1000
	ENDIF
	......
.END LITERAL

.P 0
which might result in the following conversation:

.LITERAL

    	Next line> (ADD (MULT 2 3)) (DIV 5 2))
	                          ^error
	Expression ends before end of line - too many brackets?
    	Next line> (ADD (MULT 2 3) (DIV 5 2))
	Result is 8
	Next line>
.END LITERAL
