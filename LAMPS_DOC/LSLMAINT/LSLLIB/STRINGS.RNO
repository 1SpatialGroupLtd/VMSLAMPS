.!*
.!* STRINGS - reading strings
.!*

.INDEX ^^Reading strings
.INDEX ^^Reading strings> introduction
.HL 1 ^^^&Introduction\&

.P 0
The routine described in this chapter is used to read strings
from the current input buffer. This latter defaults to /TXTC/

.HL 1 ^^^&Reading strings\&
.INDEX ^^Reading strings> READSTR

.P 0
READSTR is the general string reading function, and reads from the current 
position in the input buffer (thus normally TXTBUF, unless it has been 
reassigned). 

.P 5
^*len = READSTR( string, [term__char], [term__cond], [skip], [retval] )\*
.INDEX ^^READSTR

.LM +30
.P -25
out#-#long####^*len\*########the number of characters read into ^*string\*,
or zero if none were read
.I -25
out#-#char####^*string\*#####the destination character string
.I -25
in##-#byte####^*term__char\*##character to end reading the string on
.I -25
in##-#long####^*term__cond\*##condition to end reading the string on
.I -25
in##-#logical#^*skip\*#######true if to skip leading spaces/tabs
.I -25
out#-#long####^*retval\*#####error code
.LM -30

.P 0
The following notes apply:
.INDEX ^^Reading strings> READSTR> notes

.LIST "*"

.LE; if ^*term__char\* is present, then it may be regarded as a "closing quote"
character, depending upon the value of ^*term__cond\*. Note that zero and
negative values will be accepted as legitimate "characters".

.LE; if ^*term__cond\* is present, then it must be one of the following
values, as defined in LSL$CMNLSL:READSTR.PAR

.LM +12
.P-12; ON__CMD####-#terminate as for RDCOMM commands - ie on any character that
is not alphabetic or "__". ^*term__char\* will be ignored.
.I-12; ON__CHAR###-#if ^*term__char\* is present, then terminate on that
character, otherwise treat as ON__EOL
.I-12; ON__CHAR2##-#as for ON__CHAR, but the sequence
^*term__char\*#^*term__char\* inserts ^*term__char\* into ^*string\*
.I-12; ON__SPACE##-#terminate on space or tab (as well as on ^*term__char\*,
if it is present)
.I-12; ON__EOL####-#terminate at end of line only
.LM -12

.P0; String reading will always terminate at end of line. If ^*term__cond\* is
absent, then the default termination condition is ON__CHAR if ^*term__char\* is
present, and ON__EOL if it is not.

.LE; ^*skip\* is true if to skip leading spaces and tabs before the string,
and false if to read them into the string. If this argument is omitted, then
it is assumed true. 

.LE; ^*retval\* is set to one of the following values:

.LM +18
.P-18; LSL____BADTCOND###-#failure#-#an invalid value was given for
^*term__cond\*. The routine returns at once, and does not read any characters.
.I-18; LSL____STRTOOLONG#-#failure#-#the string to be read was longer than
^*string\*, and reading was terminated when ^*string\* was filled, rather than
when the termination condition was satisfied. A call of RDCH will read
the character that would not fit into ^*string\*.
.I-18; LSL____STREOL#####-#success#-#the string was terminated by end of line.
A call of RDCH will return TRUE (ie end of line).
.I-18; LSL____STRSPACE###-#success#-#the string was terminated by a space.
A call of RDCH will read the space.
.I-18; LSL____STRCHAR####-#success#-#the string was terminated by reading
^*term__char\*. A call of RDCH will read the character after ^*term__char\*.
.I-18; LSL____STRCMD#####-#success#-#the string was terminated under the
ON__CMD condition. A call of RDCH will read the character that stopped string
reading.
.LM -18

.END LIST

.HL 1 ^^^&Reading_ Yes_ or_ No\&

.INDEX ^^Reading strings> RDYES

.INDEX ^^RDYES
.P 5
^*ret = RDYES( prompt, yesno, [default], [ierr] )\*

.LM +30
.P -25
out#-#long####^*ret\*########returns LSL____NORMAL if the read succeeds, 
otherwise see below
.I -25
in##-#char####^*prompt\*#####the question to ask
.I -25
out#-#logical#^*yesno\*######true if the answer is yes, false if the answer is 
no
.I -25
in##-#logical#^*default\*####what _<return_> means
.I -25
out#-#long####^*ierr\*#######the system error code - not used if the routine
succeeds 
.LM -30

.LIST "*"
.LE; if ^*default\* is present, then it is one of the longword parameters
defined in
.P 10
LSL$CMNLSL:RDYES.PAR
.P 0
with meaning as follows:

.LM +14

.P -14
ASSUME__NONE#-#no default is accepted - a reply of _<return_> will cause the
routine to reprompt with ^*prompt\* 

.P -14
ASSUME__YES##-#a reply of _<return_> means yes

.P -14
ASSUME__NO###-#a reply of _<return_> means no

.LM -14

.LE
if ^*default\* is absent, it defaults to ASSUME__NONE
.LE
The following values are returned in ^*ret\* 

.LM +18

.P -18
LSL____NORMAL#####-#success#-#the line was read successfully
.I -18
LSL____EOF########-#warning#-#end of file was read (ie the user typed control-Z)
.I -18
LSL____SYSERR#####-#error#-#an error occurred within the routine. If given,
^*ierr\* will hold an appropriate system error code
.END LIST
.P 0
The routine works as follows:

.LIST 
.LE; if ^*default\* is absent or not a value defined in LSL$CMNLSL:RDYES.PAR,
 then it is regarded as being ASSUME__NONE
.LE; it uses EXPAND to append '?#' to ^*prompt\*
.LE; it uses TTRSTR to ask the user for a reply, using EXPDSC as the 
prompt
.LE; it uses RDCHS to read the first character of the reply, and interprets it 
as follows:
.LM +15
.P -10
Y#or#y####the answer is Yes - it returns true in ^*yesno\*
.I -10
N#or#n####the answer is No - it returns false in ^*yesno\*
.I -10
_<return_>##if ^*default\* is ASSUME__NO, then the answer is No - it returns 
false in ^*yesno\*
.I -10
_<return_>##if ^*default\* is ASSUME__YES, then the answer is Yes - it returns 
true in ^*yesno\*
.I -10
otherwise#it asks the user to reply with one of the valid answers, prompting
with the appropriate one of:
.BLANK
.LM -15
.LIST 0," "
.LE; Please answer with Y for Yes, N for No
.LE; Please answer with Y for Yes, N or _<return_> for No
.LE; Please answer with N for No,##Y or _<return_> for Yes
.END LIST
.LM +15
and asking the question again
.LM -15
.END LIST

.P 0
Note that each time the question is asked, EXPAND is used to append '?#' to 
^*prompt\*. Thus, if ^*prompt\* is EXPDSC, confusing results may ensue.

.P 0
Any errors in TTRSTR will result in the errors being returned in ^*ret\*
and perhaps ^*ierr\*.
.HL 1 ^^^&The_ number_ of_ characters_ in_ a_ string\&

.INDEX ^^Reading strings> SIGCHS

.INDEX ^^SIGCHS
.P 5
^*len = SIGCHS(string)\*

.LM +30
.P -25
out#-#long####^*len\*########returns the number of significant characters in a 
character string
.I -25
in##-#char####^*string\*#####the string to test

.LM -30

.p0; This function finds the last character in ^*string\* that is not a space
or tab, and returns its position in ^*length\*. It thus works out the number
of 'significant' characters in ^*string\*.
