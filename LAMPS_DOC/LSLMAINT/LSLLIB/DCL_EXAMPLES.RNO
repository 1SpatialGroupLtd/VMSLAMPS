
.PAGE

.HL 1 ^^^&Fortran_ example_ 1\&
.INDEX ^^DCL routines> FORTRAN example usage

.P 0
This program will handle a foreign command line of the form:

.P 0
$ EXAMPLE/LOG/TOLERANCE=real/LOOK__FOR=(string,...)/FEATURE__CODES=(int,...) -
.BR
# file-spec1,...  out-file-spec

.P 0
It will prompt for missing parameters with:

.P 10
__From:
.BR
and
.I 10
__To:

.P 0
It has defaults of /NOLOG /TOLERANCE=1.0 /LOOK__FOR="PUBLIC__HOUSES"
and can handle up to 16 input filenames. The CLD module used to define 
the commands for this program is presented after the FORTRAN source.

.LITERAL

	PROGRAM	EXAMPLE
C
***	MODULE	EXAMPLE
***	IDENT	21NO85
C
C
C	Copyright Laser-Scan Ltd., Cambridge, England
C
C	Author						TJH  21-Nov-1985
C
C EXAMPLE header for a LSL utility showing use of new LSLLIB DCL 
C command handling routines.
C
	IMPLICIT NONE
C
	INCLUDE 	'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE 	'LSL$CMNLSL:CLD.CMN'
	INCLUDE 	'LSL$CMNLSL:STATUS.CMN'
C
C Command Language Definitions
	EXTERNAL       EXAMPLE_CLD
C W/S
	LOGICAL*4	ABSENT		! .T. if file param. not found
	INTEGER*4	CMLEN		! the length of parsed cmd. line
	CHARACTER*1024  CMLSTR		! show off the parsed cmd. line
	INTEGER*2	FCODE(1024)	! qualifier argument 
	INTEGER*4	I		! tmp. var.
	LOGICAL		LOCAL		! .T. if qual. is local
	LOGICAL		LOCNEG		! set .TRUE. if qual. is 
C					! locally negated
	INTEGER*4	NUM_FC		! our record of number of FCs
	LOGICAL*4	OK		! for error return another way
	CHARACTER*128	P2_FIL		! output file-spec
	INTEGER*4	P2_LEN		! length of output file-spec
	CHARACTER*128	STR_ARG		! argument for /LOOK_FOR
	REAL		TOLER		! qualifier argument 
	LOGICAL*4	WHINGE		! .T. if local error reporting
C
C Qualifier flags
	LOGICAL		HAD_FC		! set .TRUE. if /FEATURE_CODE
	LOGICAL		HAD_LOG		! set .TRUE. if /LOG
	LOGICAL		HAD_LOO		! set .TRUE. if /LOOK_FOR
	LOGICAL		HAD_TOL		! set .TRUE. if /TOLERANCE
C
C Functions called
	INTEGER*4	DCL_FILE	! reads and parses file title 
C					  from DCL command line
	INTEGER*4	DCL_INT		! gets qualifier args. (integer)
	INTEGER*4	DCL_QUAL	! looks for specified qualifier
	INTEGER*4	DCL_REAL	! gets qualifier args. (real)
	INTEGER*4	DCL_STARTUP	! gets and parses the DCL 
C					  command line	
	INTEGER*4	DCL_STR		! gets qualifier args. (strings)
	INTEGER*4	DCL_CML	
C
C LSL_PUTMSG outputs a message associated with a specified condition 
C code. It also sets LSL_STATUS (held in /STATUS/ common block) masked 
C with LSL_QUIET.
	INTEGER*4	LSL_PUTMSG
C
C ......................................................................
C
C Initialise things.
C
	CALL LSL_INIT		! start the library up
	WHINGE = .TRUE.		! DCL routine's local error reporting
	HAD_LOG = .FALSE. 	! set .TRUE. if /LOG
	HAD_TOL = .FALSE.	! set .TRUE. if /TOLERANCE
	HAD_FC = .FALSE.	! set .TRUE. if /FEATURE_CODE
	HAD_LOO = .FALSE.	! set .TRUE. if /LOOK_FOR
	LOCAL = .FALSE.		! set .TRUE. if qual. is local
	LOCNEG = .FALSE.	! set .TRUE. if qual. is 
				! locally negated
	NUM_FC = 0		! number of feature codes selected
C	
C
C ......................................................................
C
C Get command line for our command verb EXAMPLE. DCL_STARTUP will return
C set to SS$_NORMAL if all is well. 
C
	OK=DCL_STARTUP('EXAMPLE'	! command verb
     &			   ,.FALSE.	! don't split parameter lists
     &			   ,EXAMPLE_CLD ! CLD module name
     &			   ,WHINGE)	! .T. - local error reporting
C
C If something went wrong LSL_STATUS will carry the same condition code as OK. 
C we must give up NOW. 
        IF (.NOT.OK) GOTO 40            ! call exit
C
C Purely for the purpose of showing the use of DCL_CML we shall use it 
C here, quite unnecessarily!
C
	OK=DCL_CML(CMLSTR, CMLEN, .FALSE.)
        IF (.NOT.OK) GOTO 40            ! call exit
	TYPE *,'Parsed command line = ',CMLSTR(:CMLEN)
C
C ......................................................................
C
C Check for qualifiers, we could have /LOG, /FEATURE_CODES=(int,...),
C /TOLERANCE=real and /LOOK_FOR=(string,...)
C
C
C First /LOG
C
	OK=DCL_QUAL('LOG'	 	! qualifier name
     &			,HAD_LOG	! returned .T. if qual. found
     &			,LOCAL	 	! .T. if qual local to parameter
     &			,LOCNEG  	! .T. if qual. negated locally
     &			,WHINGE) 	! .T. - local error reporting
        IF (.NOT.OK) GOTO 40            ! call exit
C
C Now /FEATURE_CODES
C
	OK=DCL_QUAL('FEATURE_CODES'	! qualifier name
     &			,HAD_FC 	! returned .T. if qual. found
     &			,LOCAL	 	! .T. if qual local to parameter
     &			,LOCNEG  	! .T. if qual. negated locally
     &			,WHINGE) 	! .T. - local error reporting
C
	IF (.NOT.OK) THEN
           GOTO 40                       ! call exit
	ELSE IF (HAD_FC) THEN		 ! get the arguments
C
	   OK=DCL_INT('FEATURE_CODES'! qualifier name
     &			  ,WHINGE) 	! .T. - local error reporting
	   IF (.NOT.OK) CALL EXIT (LSL_STATUS)
C
C Transfer the args. to our local array
C
	   IF (NUMINT.GE.1) THEN
	       DO 10 I=1,NUMINT		
	           FCODE(I)=IARRAY(I)
10	       CONTINUE
	       NUM_FC=NUMINT
	   ENDIF
	ENDIF
C
C
C Now /LOOK_FOR (This time we will turn error reporting off down in
DCL_QUAL and handle any error reporting ourselves on return to our main
program.)
	OK = DCL_QUAL ( 'LOOK_FOR'	! qualifier name
     &			,HAD_LOO	! returned .T. if qual. found
     &			,LOCAL	 	! .T. if qual local to parameter
     &			,LOCNEG  	! .T. if qual. negated locally
     &			,.FALSE.) 	! .F. - no local error reporting
C
C Now get the string argument(s) for /LOOK_FOR (and we can leave them 
C in /LSL_CLDCHR/ since this is only qualifier which has string args.)
	IF (OK) THEN
	   OK=DCL_STR('LOOK_FOR'	! qualifier name
     &		      ,WHINGE) 		! .T. - local error reporting
C
	   IF (.NOT.OK) GOTO 40         ! call exit
C
C For the purposes of example we will use LSL_PUTMSG to report any error
C detected while scanning for the /LOOK_FOR qualifier. LSL_PUTMSG sets
C LSL_STATUS for you.
	   CALL LSL_PUTMSG(OK)
	   CALL LSL_EXIT
	ENDIF
C
C Now /TOLERANCE
C
	OK=DCL_QUAL('TOLERANCE'		! qualifier name
     &			,HAD_TOL	! returned .T. if qual. found
     &			,LOCAL	 	! .T. if qual local to parameter
     &			,LOCNEG  	! .T. if qual. negated locally
     &			,WHINGE) 	! .T. - local error reporting
C
	IF (.NOT.OK) THEN
	   IF (.NOT.OK) GOTO 40         ! call exit
	ELSE IF(HAD_TOL) THEN		! get the arguments
	   OK=DCL_REAL('TOLERANCE'	! qualifier name
     &			   ,WHINGE)	! .T. - local error reporting
C
	   IF (.NOT.OK) GOTO 40         ! call exit
C
C Transfer the args. to our local variable by way of example
C
	   IF (NUMREA.EQ.1) TOLER=RARRAY(1)
	ENDIF
C
C
C ......................................................................
C
C Now get the command parameters, in our example they are the input 
C file(s) and the output file. First the output file, so that we may
C leave the possible multiple input file-spec(s) in the /LSL_CLDCHR/ 
C common block for later reference without recourse to copying them 
C around un-necessarily.
C
	OK=DCL_FILE('OUT_FILESPEC'	! parameter or qualifier label
     &		   ,'LSL$IF:IFF.IFF;0'	! default filename
     &		   ,ABSENT		! .T. if no filename found
     &		   ,.FALSE.		! don't expect list of filenames
     &		   ,WHINGE)		! .T. - local error reporting
C
C Transfer the file-spec to our local variable
C
	IF (OK) THEN
	    P2_FIL=FILARY(1)(:FIL_LEN(1))	   	    	   
	    P2_LEN=FIL_LEN(1)
	ELSE		
	   IF (.NOT.OK) GOTO 40         ! call exit
	ENDIF
C
C Finally get the input file(s)
C
	OK=DCL_FILE('IN_FILESPEC'	! parameter or qualifier label
     &		   ,'LSL$IF:IFF.IFF;0'	! default filename
     &		   ,ABSENT		! .T. if no filename found
     &		   ,.TRUE.		! expect list of filenames
     &		   ,WHINGE)		! .T. - local error reporting
C
	 IF (.NOT.OK) GOTO 40           ! call exit
C
C ......................................................................
C
C And now, purely for the purposes of example... 
C (but normally useful code goes in here which does things with the 
C information gleaned from the command line).
C 
	IF (HAD_LOG) TYPE *,'/LOG'
C
	IF (HAD_FC) THEN
	    TYPE *, '/FEATURE_CODES set with the following args. -'
	    DO 20 I=1,NUM_FC
	       TYPE *, FCODE(I)
20	    CONTINUE
	ENDIF
C
	IF (HAD_TOL) TYPE *,'/TOLERANCE = ', TOLER
C
	IF (HAD_LOO) THEN
	    TYPE *, '/LOOK_FOR set with the following args. -'
	    DO 25 I=1,NUMSTR
	        TYPE *, CARRAY(I)(:STR_LEN(I))
25	    CONTINUE
	ENDIF
C
	DO 30 I=1,NUMFIL
	    TYPE *, 'Input file (',I,') = ', FILARY(I)(:FIL_LEN(I))
30 	CONTINUE
	TYPE *, 'Output file = ', P2_FIL(:P2_LEN)
C
C ......................................................................
C
C Now exit, setting $STATUS to the value held in LSL_STATUS. LSL_STATUS 
C will be masked with LSL_QUIET to prevent the message being output on image
C exit.
40	CALL LSL_EXIT
	END
.END LITERAL

.PAGE

.HL 1 ^^^&CLD_ file_ for_ Fortran_ example_ 1\&

.INDEX ^^DCL routines> example CLD file
.INDEX Command definition file> example
.INDEX CLD file> example
.LITERAL
***     IDENT  28OC85
***     MODULE EXAMPLE_CLD

	MODULE 		EXAMPLE_CLD

	DEFINE VERB 	EXAMPLE

	ROUTINE		EXAMPLE

	PARAMETER	P1, LABEL=IN_FILESPEC, VALUE(LIST,REQUIRED, 
					TYPE=$FILE), PROMPT="From"

	PARAMETER	P2, LABEL=OUT_FILESPEC, VALUE(REQUIRED, 
					TYPE=$FILE), PROMPT="To"

	QUALIFIER	LOG, NEGATABLE

	QUALIFIER	TOLERANCE, NEGATABLE, 
				VALUE (TYPE=$QUOTED_STRING,
					DEFAULT="1.0")
						DEFAULT

	QUALIFIER	FEATURE_CODES, VALUE (REQUIRED, LIST, 
				TYPE=$QUOTED_STRING)

	QUALIFIER	LOOK_FOR, NEGATABLE, 
				VALUE (LIST, TYPE = $QUOTED_STRING, 
					DEFAULT="PUBLIC_HOUSE")
							DEFAULT
.END LITERAL

.PAGE

.TP 15
.HL 1 ^^^&Fortran_ example_ 2_ -_ positional_ qualifiers\&

.INDEX ^^DCL routines> FORTRAN example usage

.P 0
The second example, listed below, demonstrates the use of DCL__ routines
for decoding positionally dependent qualifiers (as required for example by the 
IMP utility IMERGE).


.LITERAL

	PROGRAM	EXAMPLE2
C
***	MODULE	EXAMPLE2
***	IDENT	11SE85
C
C
C	Copyright Laser-Scan Ltd., Cambridge, England
C
C	Author						TJH  11-Sep-1985
C
C Another example header for a LSL utility showing use of new LSLLIB 
C DCL command handling routines with particular regard to use of 
C positional qualifiers for a utility such as IMERGE.
C
C This header will handle a command line of the form:
C
C $ EXAMPLE2/LOG/SINGLE_LAYER=int/OUTPUT=file-spec -
C	_infile1/LAYER=(int,...),infile2/LAYER=(int,...), -
C 	_infileN/INLAYER=(int,...)
C
C Where specific layer number selections may be made for each individual
C infile.
C
C Or, alternatively:
C
C $ EXAMPLE2/LOG/SINGLE_LAYER=int/LAYER=(int,...)/OUTPUT=file-spec -
C	_infile1,infile2,infile3,infile4
C
C Where the layer selections made with /LAYER are applied globally to
C all the input files. In both sample command lines output is made to 
C the file specified with the /OUTPUT qualifier 
 
C ......................................................................
C
	IMPLICIT NONE
C
	INCLUDE 	'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE 	'LSL$CMNLSL:CLD.CMN'
	INCLUDE 	'LSL$CMNLSL:STATUS.CMN'
C
C Command Language Definitions
	EXTERNAL        EXAMPLE2_CLD
C W/S
	LOGICAL*4	ABSENT		! .T. if file param. not found
	INTEGER*4	G_LAYRS(1024)	! for global layer selections
	INTEGER*4	GLONUM		! number of layers globally sel.
	INTEGER*4	I,J		! tmp. vars.
	CHARACTER*128	INFILE(8)	! input file-specs
	INTEGER*4	ILAYRS(1024,8)	! input file layer selections
	INTEGER*4	LENFIL(8)	! length of input file-spec
	LOGICAL*4	LIST		! controls search of file lists
	LOGICAL		LOCAL		! .T. if qual. is local
	LOGICAL		LOCNEG		! .T. if qual. locally negated
	INTEGER*4	NUM_LAY(8)	! number of layers selected
	INTEGER*4	NUMPAR		! no. input parameters specified
	LOGICAL*4	OK		! for error return another way
	INTEGER*4	SLAYER		! output file layer
	INTEGER*4	OUFILN		! length of output file spec
	CHARACTER*2	PARAMS(8) 	! parameter names
	LOGICAL*4	WHINGE		! .T. if local error reporting
C
C Qualifier flags
	LOGICAL		GLOB_LAY	! .TRUE. if /LAYER is global
	LOGICAL		HAD_ILAY	! set .TRUE. if /LAYER
	LOGICAL		HAD_LOG		! set .TRUE. if /LOG
	LOGICAL		HAD_SLAY	! set .TRUE. if /SINGLE_LAYER
	LOGICAL		HAD_OUT		! set .TRUE. if /OUTPUT
C
C Functions called
	INTEGER*4	DCL_FILE	! reads and parses file title 
C					  from DCL command line
	INTEGER*4	DCL_INT		! gets qualifier args. (integer)
	INTEGER*4	DCL_QUAL	! looks for specified qualifier
	INTEGER*4	DCL_REAL	! gets qualifier args. (real)
	INTEGER*4	DCL_STARTUP	! gets and parses the DCL 
C					  command line	
	INTEGER*4	DCL_STR		! gets qualifier args. (strings)
C
	DATA PARAMS/'P1','P2','P3','P4','P5','P6','P7','P8'/
C
C ......................................................................
C
C Initialise things.
C
	CALL LSL_INIT		! start the library up
C
	LIST	=	.FALSE. ! parameters are single files not lists
	WHINGE 	= 	.TRUE.	! DCL routine's local error reporting
	HAD_LOG = 	.FALSE.	! set .TRUE. if /LOG
	GLOB_LAY = 	.FALSE.	! .TRUE. if /LAYER is global
	HAD_SLAY = 	.FALSE.	! set .TRUE. if /SINGLE_LAYER
	HAD_ILAY = 	.FALSE.	! set .TRUE. if /LAYER
	LOCAL 	= 	.FALSE.	! set .TRUE. if qual. is local
	LOCNEG 	= 	.FALSE.	! set .TRUE. if qual. is 
C				! locally negated
C
C ......................................................................
C
C Get command line for our command verb EXAMPLE2. DCL_STARTUP will 
C return set to SS$_NORMAL if all is well. 
C
	OK=DCL_STARTUP('EXAMPLE2'	! command verb
     &		      ,.TRUE.		! split parameter list
     &		      ,EXAMPLE2_CLD 	! CLD module name
     &		      ,WHINGE)	 	! .T. - local error reporting
C
C If something went wrong we must give up NOW. (LSL_STATUS will carry the 
C same condition code as OK).  LSL_STATUS (defined in /STATUS/) is set 
C by all LSLDCL routines. It is also set automatically by LSL_PUTMSG 
C and LSL_SIGNAL. 
C In the present example LSL_STATUS has been set within DCL_STARTUP and 
C masked for you with LSL_QUIET to prevent the echoing of the condition 
C code message on exit. You may choose to set the value of your exit 
C condition code yourself eg.
C
C 	IF (.NOT.OK) CALL LSL_EXIT(CONDITION_CODE.OR.LSL_QUIET)
C
C By calling exit with an argument of LSL_STATUS (or your own code) you
C can control the value assumed by DCL symbol $STATUS which is
C used in command procedures to determine the success, or failure, of 
C a program run by that procedure.
C
	IF (OK) THEN
C
C Check for qualifiers, we could have /LOG, /LAYER=(int,...),
C /SINGLE_LAYER=(int,...) and /OUTPUT=file-spec
C
C First /LOG - if present HAD_LOG will be returned .T.
C
	   OK = DCL_QUAL ('LOG'	 	! qualifier name
     &			,HAD_LOG	! returned .T. if qual. found
     &			,LOCAL	 	! .T. if qual local to parameter
     &			,LOCNEG  	! .T. if qual. negated locally
     &			,WHINGE) 	! .T. - local error reporting

	ENDIF
C
C Now /SINGLE_LAYER - if present HAD_SLAY will be returned .T.
C
	IF (OK) THEN
	   OK = DCL_QUAL ('SINGLE_LAYER'! qualifier name
     &			,HAD_SLAY	! returned .T. if qual. found
     &			,LOCAL	 	! .T. if qual local to parameter
     &			,LOCNEG  	! .T. if qual. negated locally
     &			,WHINGE) 	! .T. - local error reporting

	ENDIF
	IF (OK) THEN
	   IF (HAD_SLAY) THEN			! get the arguments
	      OK=DCL_INT('SINGLE_LAYER',WHINGE)
	      IF (.NOT.OK) GOTO 90                 ! call exit
C
C Transfer the output layer to a local variable
	      SLAYER=IARRAY(1)
	   ENDIF
	ENDIF
C
C Now try /LAYER in a global sense (ie after the verb but BEFORE
C the parameters) If is is in this position then we may assume the
C user wishes the selection arguments to apply to all the input files
C Our call to DCL_QUAL will return LOCAL as .F. if we have a global
C usage of /LAYER.
C
	IF (OK) THEN
	   OK = DCL_QUAL ( 'LAYER'	! qualifier name
     &			,HAD_ILAY	! returned .T. if qual. found
     &			,LOCAL	 	! .T. if qual local to parameter
     &			,LOCNEG  	! .T. if qual. negated locally
     &			,WHINGE) 	! .T. - local error reporting
C
	   IF (OK.AND.(HAD_ILAY.AND..NOT.LOCAL)) THEN	! get the arguments
	   OK = DCL_INT('LAYER'		! qualifier name
     &			,WHINGE) 	! .T. - local error reporting
C
	   ENDIF
	   IF (.NOT.OK) GOTO 90         ! call exit
C
C Transfer the args. to our local array ...
C
	    DO 10 I=1,NUMINT		
	        G_LAYRS(I)=IARRAY(I)
10	    CONTINUE
	    GLONUM=NUMINT
C
C ... and set the flag to say we have a global layer selection
	   GLOB_LAY=.TRUE.
	ENDIF
C
C Now get the infiles which if GLOB_LAY is not set .TRUE. will probably 
C have /LAYER qualifiers interspersed between them.
C
C Get the required first infile 'P1', all the others are optional.
C
	OK=DCL_FILE(PARAMS(1)		! parameter or qualifier label
     &		   ,'LSL$IF:IFF.IFF;0'	! default filename
     &		   ,ABSENT		! .T. if no filename found
     &		   ,.FALSE.		! don't expect list of filenames
     &		   ,WHINGE)		! .T. - local error reporting
C
	IF (.NOT.OK) GOTO 90            ! call exit
C
C Transfer the file-spec to a local variable 
	INFILE(1)=FILARY(1)(:FIL_LEN(1))
	LENFIL(1)=FIL_LEN(1)
	NUMPAR=1	! store the number of input file parameters read
C
C Now see if there is a /LAYER qualifier in the environment of this
C parameter (/LAYER was declared with "PLACEMENT=POSITIONAL" in the 
C EXAMPLE2.CLD module). Only bother if an overriding global selection 
C has not been set.
C
	IF (.NOT.GLOB_LAY) THEN
	   OK = DCL_QUAL ('LAYER'	! qualifier name
     &			,HAD_ILAY	! returned .T. if qual. found
     &			,LOCAL	 	! .T. if qual local to parameter
     &			,LOCNEG  	! .T. if qual. negated locally
     &			,WHINGE) 	! .T. - local error reporting
C
	   IF (.NOT.OK) THEN
              GOTO 90                   ! call exit
C
C get the arguments
	   ELSE IF (HAD_ILAY.AND.LOCAL) THEN	
	      OK=DCL_INT('LAYER'	! qualifier name
     &			,WHINGE) 	! .T. - local error reporting
C
	      IF (.NOT.OK) GOTO 90            ! call exit
C
C Transfer the args. to our local array ...
C
	       DO 20 J=1,NUMINT		
	           ILAYRS(J,1)=IARRAY(J)
20	       CONTINUE
	       NUM_LAY(1)=NUMINT
	   ENDIF
	ENDIF
C
C No loop for any other input file specs, we can have up to 8 infiles.
C
	DO 40 I=2,3
C
	   OK=DCL_FILE(PARAMS(I)	! parameter or qualifier label
     &		     ,'LSL$IF:IFF.IFF;0'	! default filename
     &		     ,ABSENT		! .T. if no filename found
     &		     ,.FALSE.		! don't expect list of filenames
     &		     ,WHINGE)		! .T. - local error reporting
C
	   IF (.NOT.OK) GOTO 90         ! call exit
C
	   IF (ABSENT) GOTO 50	! no more input file parameters
C
C If we get here we will have got a file-spec in FILARY(1) which we must
C copy into a local variable.
C
	   INFILE(I)=FILARY(1)(:FIL_LEN(1))
	   LENFIL(I)=FIL_LEN(1)	
	   NUMPAR=I	! increment number of input file parameters read
C
C As with P1 see if there is a /LAYER qualifier in the environment of
C this parameter. Only bother if an overriding global selection 
C has not been set
C
	IF (.NOT.GLOB_LAY) THEN
C
	OK = DCL_QUAL ( 'LAYER'	 	! qualifier name
     &			,HAD_ILAY	! returned .T. if qual. found
     &			,LOCAL	 	! .T. if qual local to parameter
     &			,LOCNEG  	! .T. if qual. negated locally
     &			,WHINGE) 	! .T. - local error reporting
C
	   IF (.NOT.OK) THEN
	       GOTO 90                          ! call exit
C
	   ELSE IF (HAD_ILAY.AND.LOCAL) THEN	! get the arguments
	      OK=DCL_INT('LAYER'		! qualifier name
     &			,WHINGE) 	        ! .T. - local error reporting
C
	      IF (.NOT.OK) GOTO 90              ! call exit
C
C Transfer the args. to our local array ...
C
	       DO 30 J=1,NUMINT		
	           ILAYRS(J,I)=IARRAY(J)
30	       CONTINUE
	       NUM_LAY(I)=NUMINT
	   ENDIF
	ENDIF
40	CONTINUE	
C
C ......................................................................
C
C
C Finally /OUTPUT=file-spec
C
C Now get the file-spec argument for /OUTPUT. /OUTPUT must be "present"
C as it is a default qualifier. If the user doesn't supply /OUTPUT
C explicitly then the name of the first input file will be used.
C As this is the last call to DCL_FILE we can leave the output 
C file-spec lying in FILARY() 
C
50	OK = DCL_QUAL ( 'OUTPUT' 	! qualifier name
     &			,HAD_OUT	! returned .T. if qual. found
     &			,LOCAL	 	! .T. if qual local to parameter
     &			,LOCNEG  	! .T. if qual. negated locally
     &			,WHINGE) 	! .T. - local error reporting
C
	IF (OK) THEN
	   OK=DCL_FILE('OUTPUT'		! parameter or qualifier label
     &		     ,INFILE(1)(:LENFIL(1)) ! default filename
     &		     ,ABSENT		! .T. if no filename found
     &		     ,.FALSE.		! don't expect list of filenames
     &		     ,WHINGE)		! .T. - local error reporting
C
	   IF (.NOT.OK) GOTO 90         ! call exit
	ELSE		
	   GOTO 90
	ENDIF
C
C ......................................................................
C
C And now, purely for the purposes of example... 
C (but normally useful code goes in here which does things with the 
C information gleaned from the command line).
C 
	IF (GLOB_LAY) THEN
	   TYPE *, 'Global selection of input file layers:'
	   DO 60 J=1,GLONUM
	   TYPE *, G_LAYRS(J)	! input file layer selections
60	   CONTINUE
	ENDIF
C
	IF (HAD_LOG) TYPE *,'/LOG set'
C
	IF (HAD_SLAY) THEN
	    TYPE *, '/SINGLE_LAYER set to: ' ,SLAYER
	ENDIF
C
C
	IF (HAD_OUT) THEN
	    TYPE *, '/OUTPUT set to: ',FILARY(1)(:FIL_LEN(1))
	ENDIF
C
	DO 80 I=1,NUMPAR
	    TYPE *, 'Input file (',I,') = ', INFILE(I)(:LENFIL(I))
	     IF (NUM_LAY(I).GE.1) THEN	! number of layers selected
		TYPE *, 'With the following layer selections:'
		DO 70 J=1,NUM_LAY(I)
		   TYPE *, ILAYRS(J,I)	! input file layer selections
70	        CONTINUE
	      ELSE
		TYPE *, '(With no layers selected.)'		
	     ENDIF
80	CONTINUE
C
C ......................................................................
C
C Now exit, setting $STATUS to the value held in LSL_STATUS. LSL_STATUS 
C will be masked with LSL_QUIET to prevent the message being output on image
C exit.
90	CALL LSL_EXIT
	END
.END LITERAL

.PAGE

.HL 1 ^^^&CLD_ file_ for_ Fortran_ example_ 2\&

.INDEX ^^DCL routine> example CLD file
.INDEX Command definition file> example
.INDEX CLD file> example

.LITERAL
***     IDENT  28OC85
***     MODULE EXAMPLE2_CLD

	MODULE 		EXAMPLE2_CLD

	DEFINE VERB 	EXAMPLE2

	ROUTINE		EXAMPLE2

	PARAMETER	P1, VALUE(REQUIRED,
				  TYPE=$FILE), PROMPT="Input-file1"

	PARAMETER	P2, VALUE(TYPE=$FILE), PROMPT="Input-file2"

	PARAMETER	P3, VALUE(TYPE=$FILE), PROMPT="Input-file3"

	PARAMETER	P4, VALUE(TYPE=$FILE), PROMPT="Input-file4"

	PARAMETER	P5, VALUE(TYPE=$FILE), PROMPT="Input-file5"

	PARAMETER	P6, VALUE(TYPE=$FILE), PROMPT="Input-file6"

	PARAMETER	P7, VALUE(TYPE=$FILE), PROMPT="Input-file7"

	PARAMETER	P8, VALUE(TYPE=$FILE), PROMPT="Input-file8"

	QUALIFIER	OUTPUT
				VALUE (LIST, TYPE=$FILE, DEFAULT=.IFF)
						DEFAULT
	QUALIFIER	LAYER
				VALUE (LIST, TYPE=$QUOTED_STRING)
					PLACEMENT=POSITIONAL

	QUALIFIER	SINGLE_LAYER
				VALUE (LIST, TYPE=$QUOTED_STRING)

	QUALIFIER	LOG, NEGATABLE

.END LITERAL

.PAGE

.TP 15
.HL 1 ^^^&Fortran_ example_ 3_ -_ qualifier_ keyword_ arguments\&

.INDEX ^^DCL routines> FORTRAN example usage

.P 0
The third example, listed below, demonstrates the use of DCL__ routines
for decoding a qualifier (/FILES) having keyword arguments.

.PAGE
.LITERAL

	PROGRAM EXAMPLE_3
C
***	MODULE	EXAMPLE_3
***	IDENT	01OC86
C
C	Copyright Laser-Scan Ltd., Cambridge, England
C
CMod	Created 					WJJ 01-Oct-1986
C
C	Plot tape format to IFF translator
C	==================================
C
C	EXAMPLE_3 reads various formats of plotter data on magtape, and
C	creates an IFF file and a plot tape content (PTC) file. It will
C	deal with labelled and unlabelled tapes and identify the plot
C	format automatically.
C
C	Command line
C	============
C
C	$ EXAMPLE_3=="$LSL$EXE:EXAMPLE_3"
C	$ EXAMPLE_3[/qualifiers] magtape_unit output_filename
C
C	where	magtape_unit	has the input data tape mounted foreign
C
C		output_filename	is the location and name of the IFF file
C				  and the .PTC file
C
C	command qualifiers:
C
C		/LOG		copy PTC output to the terminal
C
C		/FORMAT=format	data format is <format>
C					 (see below for allowed formats)
C
C		/FILES=(START=n,END=m) only process files <n> to <m>
C
C		/END=n		assume that unlabelled tapes are terminated
C				 with <n> tapemarks.
C
C
C	
C	Operation of EXAMPLE_3
C	======================
C
C	EXAMPLE_3 decodes the command line, prompting for input as necessary
C	using LSLLIB's DCL routines. The presence of the tape is verified,
C	and the first block is read to see if it is a labelled tape.
C
C	The first data block is located and inspected to determine the data
C	format. This can be verified against any specified format.
C
C	The first file to be processed is then found. The IFF and PTC files
C	are then opened, and preliminary records written to them.
C
C	A format dependent routine is called to interpret the data and write
C	the IFF and PTC files.
C
C	IFF file structure
C	==================
C
C	The IFF file is relatively simple. No significance will be attached
C	to MH, MD, NS, CC, CP entries. Each plot within a tape is contained
C	within a single overlay. A new feature is constructed whenever the
C	plotting representation (pen/weight, linestyle, graphical type, colour)
C	is changed, and also on a pen-up if sufficient points have been 
C	accumulated. Pen-ups/downs are generally reflected by new strings of
C	points. Each new (distinct) plotting representation is recorded in
C	the PTC file, along with the feature code used to designate it in the 
C	IFF file.
C	Coordinates are recorded as absolute values and the range of each
C	plot is stored in the PTC file. For incremental plot formats, each plot
C	is deemed to start at (0,0) and the final pen position is stored in the 
C	PTC file.
C
C	PTC file structure
C	==================
C
C	The plot tape content file will be used to record the details of the
C	tape and the files and plots that it contains. In particular it holds
C	the overlay number, feature codes used, and the range for each plot
C	in the IFF file.
C
C	The format is text, suitable for reading by programs which must deduce
C	scales and offsets, and generate FRT files for plotting.
C
C	It should look like this:
C
C	TAPE	UNLABELLED/LABELLED[,<identifier>]	!
C	FORMAT	<format>				!
C
C	FILE	n[,<filename>]				! sequential
C
C	PLOT	m[,<plotname>]				! sequential
C	OVERLAY	o					! sequential
C	PRT	pen/weight, style, graph_type, colour	!
C	PRT	...					! repeat as nec.
C	 "						!
C	RANGE	xlo, xhi, ylo, yhi [,xend, yend]	! plotter coords
C	SIZE	s					! IFF Kbytes
C
C	PLOT	m
C	 ...
C	FILE	n			
C	PLOT	m
C	 ...
C	<EOF>
C
C
C so here goes ...
C
	IMPLICIT	NONE
C
C definitions
	INCLUDE		'($SSDEF)'
	INCLUDE		'LSL$CMNLSL:LSLLIBMSG.PAR'
C
C common blocks
	INCLUDE		'LSL$CMNLSL:CLD.CMN'
	INCLUDE		'LSL$CMNLSL:STATUS.CMN'
	INCLUDE		'LSL$CMNLSL:FILENAME.CMN'
C
C command line definition
	EXTERNAL	EXAMPLE_3_CLD
C
C functions called
	INTEGER*4	DCL_STARTUP	! for command line acquisition
	INTEGER*4	DCL_QUAL	!   in LSLLIB
	INTEGER*4	DCL_INT		!	"
	INTEGER*4	DCL_STR		!	"
	INTEGER*4	DCL_FILE	!	"
	INTEGER*4	EXPFLN		! expand parsed file-name
	
C w/s
	LOGICAL*4	WHINGE		! error report flag
	LOGICAL*4	ABSENT		! set if parameter/qual absent
	LOGICAL*4	LOCAL		! set if local qualifier
	LOGICAL*4	LOCNEG		! set if local and negative qual
	LOGICAL*4	OK		! result of lots of functions
	LOGICAL		HAD_LOG		! set if /LOG switch present
	LOGICAL		HAD_FORMAT	! set if /FORMAT switch present
	LOGICAL		HAD_FILES	! set if /FILES switch present
	LOGICAL		HAD_END		! set if /END switch present
C
	INTEGER		FILES_START	! first file to read
	INTEGER		FILES_END	! last file to read
	INTEGER		END_MARKS	! no. of tapemarks at 'EOT'
	INTEGER		IFF_LEN		! length of IFF_NAME
	INTEGER		PTC_LEN		! length of PTC_NAME
C
	CHARACTER*20	FORMAT_ID	! format identifier
	CHARACTER*40	TAPE_UNIT	! where the tape is mounted
	CHARACTER*100	IFF_NAME	! output IFF filename
	CHARACTER*100	PTC_NAME	! output PTC filename


C Initialise for command line decoding
	CALL LSL_INIT(.FALSE.)	! No timing info.
	WHINGE = .TRUE.		! LSLDCL local error reporting
	HAD_LOG = .FALSE.	! Preset flags
	HAD_FORMAT = .FALSE.
	HAD_FILES = .FALSE.
	HAD_END = .FALSE.
	FILES_START = 1		! default to start at file 1
	FILES_END = 1000000000	! and to finish at the last one.
C
C get command line for MLOAD
C
	OK = DCL_STARTUP('EXAMPLE_3'	! command verb
     &			 ,.FALSE.	! do not split parameter list
     &			 ,EXAMPLE_3_CLD	! command line description
     &			 ,WHINGE)	! local error reporting
C
C check OK, exit if not
	IF (.NOT.OK) GOTO 90		! call exit
C
C now look for a /LOG switch
	OK = DCL_QUAL('LOG', HAD_LOG, LOCAL, LOCNEG, WHINGE)
	IF (.NOT.OK) GOTO 90		! call exit
C
C now look for a /FORMAT=<format>
	OK = DCL_QUAL('FORMAT', HAD_FORMAT, LOCAL, LOCNEG, WHINGE)
C
	IF (.NOT.OK) THEN
	   GOTO 90			! call exit
C
C get the format descriptor
	ELSE IF (HAD_FORMAT) THEN
	    OK = DCL_STR('FORMAT', WHINGE)
	    IF (.NOT.OK) GOTO 90	! call exit
	    FORMAT_ID = CARRAY(1)(1:STR_LEN(1))
	ENDIF
C
C now look for /FILES=(START=m)
	OK = DCL_QUAL('FILES.START', HAD_FILES, LOCAL, LOCNEG, WHINGE)
C
	IF (.NOT.OK) THEN
	  GOTO 90			! call exit
C
C get the start file number
	ELSE IF (HAD_FILES) THEN
	    OK = DCL_INT('FILES.START', WHINGE)
	    IF (.NOT.OK) CALL EXIT(LSL_STATUS)
	    FILES_START = IARRAY(1)
	ENDIF
C
C now look for /FILES=(END=n)
	OK = DCL_QUAL('FILES.END', HAD_FILES, LOCAL, LOCNEG, WHINGE)
C
	IF (.NOT.OK) THEN
	  GOTO 90			! call exit
C
C get the end file number
	ELSE IF (HAD_FILES) THEN
	    OK = DCL_INT('FILES.END', WHINGE)
	    IF (.NOT.OK) CALL EXIT(LSL_STATUS)
	    FILES_END = IARRAY(1)
	    IF (FILES_START .GT. FILES_END) FILES_END = FILES_START
	ENDIF
C
C now look for /END=n
	OK = DCL_QUAL('END', HAD_END, LOCAL, LOCNEG, WHINGE)
C
	IF (.NOT.OK) THEN
	  GOTO 90			! call exit
C
C get the number of tapemarks for 'end-of-tape'
	ELSE IF (HAD_END) THEN
	    OK = DCL_INT('END', WHINGE)
	    IF (.NOT.OK) GOTO 90		! call exit
	    END_MARKS = IARRAY(1)
	ENDIF
C
C now get the name of the magtape
	OK = DCL_STR('MAGTAPE', WHINGE)
	IF (OK) THEN
	  TAPE_UNIT = CARRAY(1)(1:STR_LEN(1))
	ELSE 
	  GOTO 90				! call exit
	ENDIF
C
C and now get the name of the output files
	OK = DCL_FILE('OUTFILE', '.IFF;0', ABSENT, .TRUE., WHINGE)
	IF (.NOT.OK) GOTO 90		! call exit
C now FORCE the file to be .IFF by patching
C   the parsed file-name in COMMON/FILENAME/
	STR_EXT = 'IFF'
	LEN_EXT = 3
	OK = EXPFLN(IFF_NAME, IFF_LEN)
C and do it again to make a PTC name
	STR_EXT = 'PTC'
	OK = EXPFLN(PTC_NAME, PTC_LEN)
C
C print confirmatory info
	TYPE *, 'EXAMPLE_3 called with :'
	IF (HAD_LOG) TYPE *, '/LOG switch'
	IF (HAD_FORMAT) TYPE *,'/FORMAT=',FORMAT_ID
	TYPE *,'/FILES_START=',FILES_START
	TYPE *,'/FILES_END=  ',FILES_END
	IF (HAD_END) TYPE *,'/END=',END_MARKS
	TYPE *,'Magtape input from ',TAPE_UNIT
	TYPE *,'IFF output to ', IFF_NAME(:IFF_LEN)
	TYPE *,'PTC output to ', PTC_NAME(:PTC_LEN)
C
C
C ......................................................................
C
C Now exit, setting $STATUS to the value held in LSL_STATUS. LSL_STATUS 
C will be masked with LSL_QUIET to prevent the message being output on image
C exit.
90	CALL LSL_EXIT
	END

.END LITERAL

.HL 1 ^^^&CLD_ file_ for_ Fortran_ example_ 3\&

.INDEX ^^DCL routine> example CLD file
.INDEX Command definition file> example
.INDEX CLD file> example

.LITERAL
***	MODULE	EXAMPLE_3_CLD
***	IDENT	01OC86

	MODULE		EXAMPLE_3_CLD

	DEFINE VERB	EXAMPLE_3

	ROUTINE		EXAMPLE_3

	PARAMETER	P1, LABEL=MAGTAPE, VALUE(REQUIRED,
				TYPE=$QUOTED_STRING), 
				PROMPT="Input magtape unit "

	PARAMETER	P2, LABEL=OUTFILE, VALUE(REQUIRED, TYPE=$FILE)
				PROMPT="Output filename "

	QUALIFIER	LOG

	QUALIFIER	FORMAT, VALUE (REQUIRED, TYPE=$QUOTED_STRING)

	QUALIFIER	FILES, VALUE (REQUIRED, LIST, TYPE=FILE_NUMBER)

	QUALIFIER	END, VALUE (REQUIRED, TYPE=$NUMBER)

	DEFINE TYPE	FILE_NUMBER
		KEYWORD START, VALUE (REQUIRED, TYPE=$NUMBER) 
		KEYWORD END, VALUE (REQUIRED, TYPE=$NUMBER) 

.END LITERAL
