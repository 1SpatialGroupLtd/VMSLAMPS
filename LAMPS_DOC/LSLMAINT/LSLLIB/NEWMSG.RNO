
.!* change the way .HL works, to make this chapter into "program" style
.!* - thus use .SAVE before including this, and .RESTORE afterwards
.!*	n1=6	lowest  level to have 'run-in' format
.!*	n2=2	highest level to have title in uppercase - ie 1 & 2 will have
.!*	n4=0	lowest  level not to have section number at left
.!*	n6=0	number of blank lines before header
.STYLE HEADERS 6,2,,0,,0
.!*****************************************************************************
.!* the documentation for the NEWMSG message creation/documentation program   *
.!*****************************************************************************
.PAGE
.TP 10
.P 0
^*--------------------------------------------------------------------------------\*
.HL 1 ^^^*PROGRAM NEWMSG\*


.TP 10
.P 0
^*--------------------------------------------------------------------------------\*
.HL 2 ^^^*FUNCTION\*

.LM +10

.P 0
NEWMSG reads a user supplied message definition file, and can be used to
produce:

.blank
.list 0,"o"
.le; a runoff file describing the messages for inclusion in program
documentation
.le; an object module which is linked with a program to make the messages
available
.le; parameter files defining parameters (constants) for each message's
identifying number, for inclusion in program sources
.end list


.LM -10

.TP 10
.P 0
^*--------------------------------------------------------------------------------\*
.HL 2 ^^^*FORMAT\*

.LM +10

.P 0
$ NEWMSG input-message-file

.KEEP
.NOFILL
.P 0
^*Command qualifiers                      Defaults\*

/DESTINATION=directory                  /DESTINATION=SYS$DISK:[]
/DTILIB                                 No DTILIB references produced
/HL=integer                             /HL=1
/KEEP                                   Do not keep temporary files
/[NO]LOG                                Minimal logging
/NAME=string                            See below
/NOOBJECT                               Generate message object file
/NUMBER=integer                         Required
/[NO]PARAMETERS=(type,...)              /PARAMETERS=FORTRAN
/PREFIX=string                          See below
/RUNOFF                                 No RUNOFF file produced

.FILL
.NOKEEP

.LM -10

.TP 10
.P 0
^*--------------------------------------------------------------------------------\*
.HL 2 ^^^*PROMPTS\*

.LM +10

.P 0
Input message file: input-message-file

.LM -10


.TP 10
.P 0
^*--------------------------------------------------------------------------------\*
.HL 2 ^^^*PARAMETERS\*

.LM +10

.TP 10
.P -10
input-message-file
.P -2
- specifies the message definition file that is to be read. The contents of
this file is described below. Any parts of the filespec that are omitted
will be filled out from the default of SYS$DISK:[].MES

.LM -10

.TP 10
.P 0
^*--------------------------------------------------------------------------------\*
.HL 2 ^^^*COMMAND QUALIFIERS\*

.LM +10

.TP 10
.P -10
/DESTINATION=directory
.I -2
 - specifies the directory in which the parameter and runoff files should be
created.  All temporary files (including the .TEMP__COM command file)
will also be created in this directory. If /DESTINATION is not specified, then
the current directory will be used.  Any parts of a full directory
specification that are omitted will be taken from the default of SYS$DISK:[]

.p0; Note that only a device and directory may be specified. Node names are
not supported, and file names, extensions and version numbers are obviously
not allowed.

.tp 5
.p -10
/DTILIB
.p-2
- specifies that a runoff file is to be produced with references to the Matrix
DTILIB library messages, instead of to the default IFFLIB messages. This is
useful for the automatic message generation for those programs that use mainly
DTI files, such as those in the Matrix or TVES packages.

.TP 10
.P -10
/HL=integer
.I -2
- specifies that the header level (.HL) commands output to the /RUNOFF file
should use the level number specified. This qualifier is ignored if /RUNOFF
is not present. The header level defaults to 1.

.TP 10
.P -10
/KEEP
.I -2
- specifies that all temporary files should be kept, rather than being deleted.
This qualifier is useful when trying to diagnose a problem with the program.
The effect of /KEEP is as follows

.list "o"
.le; both the sequential and indexed /RUNOFF workfiles (.TEMP__SEQ
and .TEMP__IDX) will be kept
.le; the temporary command file (.TEMP__COM) will not delete
.blank
.list 0,"o"
.le; itself
.le; the output message definition file (.PROMSG and .PROMSG__TEMP)
and its ADC.IDE
.le; the GENPAR program files, GENPAR.FOR, .OBJ and .EXE
.end list 0
.end list 0

.TP 5
.P -10
/LOG
.I -10
/NOLOG
.I -2

- if the /LOG qualifier is specified, then a message will be output to the
terminal whenever any file is opened, closed or otherwise manipulated. Also,
each message written to the output message definition file (.PROMSG file) will
be reflected. If the /NOLOG qualifier is specified, then no information will be
output (apart from the timing information presented when the program
terminates). If neither qualifier is specified, minimal information about what
the program is doing will be output as it starts.

.TP 5
.P -10
/NAME=string
.I -2
- specifies the facility name to be used for the messages being defined.
This defaults to the first 9 characters of the message definition file name,
and should normally be the same as the program or utility name.

.TP 5
.P -10
/NOOBJECT
.I -2
- specifies that the message object file is not to be generated. If both
/NOOBJECT and /NOPARAMETERS are specified, then the temporary command file
will not be generated. The default is to produce the message object file.

.TP 5
.P -10
/NUMBER=integer
.I -2
- specifies the facility number to be used for the messages being defined.
This is a required qualifier - the facility number must always be specified.

.p0
The facility number must be unique for each message definition file. Consult
the Facility Number Manager (see the title page of the LSLLIB manual) for
an appropriate number. 

.tp 5
.p-10
/PARAMETERS=(choice,...)
.i-10
/NOPARAMETERS
.i-2
- specifies which parameter files are to be generated. The possible choices
are:

.blank
.list 0,"o"
.le; FORTRAN - generate a .PAR file for inclusion in FORTRAN programs.
.br; ####### # This is the default.
.le; MACRO32 - generate a .MAR file for assembling with MACRO programs.
.le; C###### - generate a .H file for inclusion in C programs
.end list 0

.p0; The parameter files will be created in the destination directory,
and will have a file name obtained by appending "MSG" to the message
definition file's name.

.p0; By default, the program will produce a .PAR file for inclusion in
FORTRAN programs.
If /NOPARAMETERS is specified, then the program will not generate any
parameter files. If both /NOPARAMETERS and /NOOBJECT are specified, then
the temporary command file will not be generated.

.tp 5
.p -10
/PREFIX=string
.p-2
- specifies the facility prefix. This is the prefix used for all message names.
For non-DEC messages it is conventionally the program name followed by two
underlines, and thus the default prefix is the message definition file name
(truncated to 14 characters if necessary) followed by two underlines. This
qualifier is normally used for programs like IDIFFERENCE, where the program
name is rather long, and a prefix such as IDIFF____ is preferred.

.note
Currently, a bug in the system MESSAGE utility restricts the prefix string to
9 characters. This problem may be fixed in later versions of VMS (eg,
version#5).
.end note

.tp 5
.p -10
/RUNOFF
.p-2
- specifies that a runoff file is to be produced, documenting the messages
defined in the message file. The file produced will be placed in the
destination directory. Its file name will be produced by appending "MSG" to the
message definition file's name, and it will have extension .RNO

.p0; In creating the runoff file, NEWMSG uses a temporary workfile, which is
converted from sequential to indexed sequential form. In order to perform this
conversion, the file LSL$LOOKUP:MESSAGE__INDEX.FDL is required. This file is
supplied with the program.

.LM -10

.TP 20
.P 0
^*--------------------------------------------------------------------------------\*
.HL 2 ^^^*DESCRIPTION\*

.LM +10

.HL 3 ^^^*Files produced\*

.P 0
NEWMSG reads a message definition file and produces various other files
as output. One of these files is a temporary command file, which can then
be obeyed to generate the actual parameter files.

.p0; The following files are generated in order to create the message object
file and the parameter files:

.list "o"

.le; ^*intermediate message file\* - extension .PROMSG
.br; This is the input for the MESSAGE utility, and is thus not created if
/NOOBJECT is specified.

.le; ^*message generation program\* - called GENPAR.FOR (temporary)
.br; This is the source file for a program to create the parameter
files requested, and is thus not generated if /NOPARAMETERS is specified.

.le; ^*command file\* - extension .TEMP__COM (temporary)
.br; This command file is created to run the MESSAGE utility on the .PROMSG
file, creating a .PROMSG__OBJ file, and to compile, link and run the GENPAR.FOR
file, creating the required parameter files. Its file name is the same as
that of the input message file.
It is not created if both /NOOBJECT and /NOPARAMETERS are specified.

.p0; After it has created the .PROMSG__OBJ file, it will purge it, and after
it has run the GENPAR program, it will purge the parameter files that it has
created. It will also, unless /KEEP is specified,
delete the .PROMSG file,  GENPAR._* and itself.

.end list

.p0; The following files are created in order to create the .RNO output file
(and are thus not created if /RUNOFF is not specified):

.list "o"

.le; ^*sequential runoff workfile\* - extension .TEMP__SEQ (temporary)
.br; Contains messages and their descriptions

.le; ^*indexed runoff workfile\* - extension .TEMP__IDX (temporary)
.br; This is an indexed sequential version of the sequential runoff workfile,
and is used for looking up the text associated with each message. The FDL
file LSL$LOOKUP:MESSAGE__INDEX.FDL is used to specify the form of this file.

.le; ^*runoff file\* - extension .RNO
.br; This is the file documenting the messages in the input file, and can be
included in the documentation for the utility to which the messages belong.

.end list

.hl 3 ^^^*How the program works\*

.p0; The sequence of operations performed by the program is:

.list "o"

.le; Open the message definition file

.le; For each message in the file:
.lm +4
.i-2; -#Output the message severity, ident and text to the .PROMSG file
.i-2; -#Output code for the message to the GENPAR.FOR file
.i-2; -#Output the message severity, ident, text and descriptions to the
sequential runoff workfile
.i-2; -#Place the message ident and severity into an internal array
.lm-4

.le; Create the temporary command file:
.lm +4
.i-2; -#Write the DCL to produce the .PROMSG__OBJ file from the .PROMSG file
.i-2; -#Write the DCL to compile, link and run GENPAR.FOR
.lm -4

.le; Produce the runoff file:
.lm +4
.i-2; -#Convert the sequential runoff workfile into indexed form
.i-2; -#Sort the internal array of message severities and idents
.i-2; -#For each message, in order of increasing severity, and then
alphabetical ident order:
.lm +4
.i-2; -#Read the message text from the indexed workfile
.i-2; -#Convert any underlines in the message text to double underlines
.i-2; -#Perform any _%string replacements indicated for this message text
.i-2; -#Write the amended message text to the .RNO file
.i-2; -#Read each line of explanatory text from the indexed workfile,
and write it to the .RNO file
.lm -4
.lm -4
.end list 0

.LM -10

.page
.p0;^*--------------------------------------------------------------------------------\*
.hl 2 ^^^*EXAMPLES - THE MESSAGE DEFINITION FILE\*

.p0; The following is an extract from the message definition file used to
produce the messages for NEWMSG. The result of running NEWMSG/RUNOFF on
the full file (followed by suitable editing of the actual message texts)
can be seen in the MESSAGE documentation for NEWMSG, below.

.blank
.literal
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! E R R O R  messages
!
ERROR	BADFACNUM	\facility number %N is not in the range %N to %N\
REPLACE	%N = \'integer'\   %N = \'integer'\   %N = \'integer'\
EXPLANATION
\Only a certain range of facility numbers is supported. Any numbers below
1025 or above 2047 will not be allowed.\
USERACTION
\All facility numbers should have been approved or assigned by the facility 
numbers manager. Do not try to invent your own number - this could cause all
sorts of problems.\

ERROR	CONVCONV	\error in CONV$CONVERT - converting runoff workfile\
EXPLANATION
\An error occurred when trying to convert the sequential runoff workfile into
an indexed file, so that the .RNO file can be created. This message should
be preceded by a message from the CONVERT utility itself, explaining what
went wrong.\
USERACTION	\Dependant upon the associated CONVERT error message.\

ERROR	CONVERROR	\%I4 message records rejected\
REPLACE	%I4 = \'integer'\
EXPLANATION
\This message indicates that some of the records in the sequential runoff
workfile could not be converted to the indexed form. A message from the
CONVERT utility may precede this message, giving more details. The offending
records will have been written to a file for inspection - the EXCEPTION 
message will follow, indicating the name of that file.\
USERACTION
\Inspect the original message file, and the exception file. The records in
the exception file ^*should\\* be of the form
.blank
	_<severity_> _<type_> _<count_> _<ident_> _<text_>
.blank
where these fields are (respectively) one of S,I,W,E or F, one of M,E or U,
a two digit number, a fifteen character message name and a line of text.
If the record in the exception file is not of this form, then report the
problem, with as many details as possible.\
.end literal


.page
.p0;^*--------------------------------------------------------------------------------\*
.hl 2 ^^^*EXAMPLES - USING THE PROGRAM\*

.nofill
.keep
$ ^*NEWMSG NEWMSG /NUMBER=1026/RUNOFF_<CR_>\*
Message file:     NEWMSG.MES
Facility number:  1026
Facility name:    NEWMSG
Facility prefix:  NEWMSG____
Generating output for FORTRAN RUNOFF
Generating output for message object module
$ ^*SET VERIFY_<CR_>\*
$ ^*@NEWMSG.TEMP__COM_<CR_>\*
$!
$! Temporary command file generated by NEWMSG
$!
$	on error then continue
$!
$	adc  SYS$DISK:[]NEWMSG.PROMSG__TEMP/co=SYS$DISK:[]NEWMSG.PROMSG
$	message/nolist/obj=SYS$DISK:[]NEWMSG.PROMSG__OBJ  SYS$DISK:[]NEWMSG.PROM
SG__TEMP
$	if .not.$status then goto had__an__error
$	pvv  SYS$DISK:[]NEWMSG.PROMSG__OBJ
$	purge/nolog  SYS$DISK:[]NEWMSG.PROMSG__OBJ
$	delete/noconfirm  SYS$DISK:[]NEWMSG.PROMSG;
$	delete/noconfirm  SYS$DISK:[]NEWMSG.PROMSG__TEMP;
$	delete/noconfirm  ADC.IDE;
$!
$	fortran/nolist  GENPAR
$	if .not.$status then goto had__an__error
$	link/nomap	GENPAR,SYS$DISK:[]NEWMSG.PROMSG__OBJ
$	if .not.$status then goto had__an__error
$	run  GENPAR
$!
$	purge/nolog  SYS$DISK:[]NEWMSGMSG.PAR
$!
$	delete/noconfirm  GENPAR.FOR;
$	delete/noconfirm  GENPAR.OBJ;
$	delete/noconfirm  GENPAR.EXE;
$!
.literal
$! ****************************************************
.end literal
$!
$	delete/noconfirm  LSL$SOURCE__ROOT:[LSLMAINT.LSLLIB.MESSAGE]NEWMSG.TEMP__C
OM;1
$	exit 1
$ ^*DIR_<CR_>\*

Directory LSL$SOURCE__ROOT:[LSLMAINT.LSLLIB.MESSAGE]

NEWMSG.PROMSG__OBJ;2
                         12/12      28-JUL-1987 15:17  [LSL,TONY]          
NEWMSGMSG.PAR;1          15/16      28-JUL-1987 15:18  [LSL,TONY]          
NEWMSGMSG.RNO;1          46/48      28-JUL-1987 15:17  [LSL,TONY]          

Total of 6 files, 76/116 blocks.
$
.fill
.nokeep
.lm +10
.p0; This example shows the use of NEWMSG to generate its own message
definitions. It has not specified which parameter files are required, and
has thus obtained .PAR files for inclusion in FORTRAN sources. The command
file NEWMSG.TEMP__COM has then been obeyed, and DIRECTORY used to show what
files have been created. Using NEWMSG and then obeying the command file
produced in this manner is the normal way that the message utility would
be used in command files.
.lm -10


.blank
.keep
.nofill
$ ^*NEWMSG SMALL /NUMBER=1234/PREFIX=SML____/PARAM=(FORT,C)/LOG_<CR_>\*
Message file:     SMALL.MES
Facility number:  1234
Facility name:    SMALL
Facility prefix:  SML____
Generating output for FORTRAN C
Generating output for message object module
%NEWMSG-I-MESOPN, opened  input message file "SMALL.MES"
%NEWMSG-I-PROOPN, opened output message file "SYS$DISK:[]SMALL.PROMSG"
_.SEVERITY INFORMATIONAL
 SMALL          	<This is SMALL - type HELP for help>
_.SEVERITY WARNING      
 PARDON         	<Please type that again, correctly>
 BADVALUE       	<The value %N is not allowed>
_.SEVERITY ERROR        
 NOFILE         	<You have not specified a file to SMALLify>
_.SEVERITY FATAL        
 BUG            	<Internal error - please report error %S to Laser-Scan>
%NEWMSG-I-MESCLO, closed  input message file
%NEWMSG-I-PROCLO, closed output message file
%NEWMSG-I-FOROPN, opened output FORTRAN file "SYS$DISK:[]GENPAR.FOR"
-NEWMSG-I-CREFOR, writing FORTRAN program to generate parameter files
%NEWMSG-I-FORCLO, closed output FORTRAN file
%NEWMSG-I-COMOPN, opened output command file "SYS$DISK:[]SMALL.TEMP__COM"
-NEWMSG-I-CRECOM, writing DCL command file to use MESSAGE and GENPAR
%NEWMSG-I-COMCLO, closed output command file
$ ^*@SMALL.TEMP__COM_<CR_>\*
$
.fill
.nokeep
.lm +10
.p0; In this example, a message file called SMALL.MES has been read. The
facility prefix has been changed to "SML____", and parameter files for
FORTRAN and C are requested. The /LOG qualifier has been used to produce
extra output describing the progress of the program. Since SET VERIFY has
not been used, no messages are produced by execuing the .TEMP__COM command
file.
.lm -10

.blank
.nofill
.keep
$ ^*NEWMSG_<CR_>\*
_Input message file: SMALL_<CR_>\*
%NEWMSG-E-NOFACNUM, facility number must be specified - use /NUMBER
$
.nokeep
.fill
.lm +10
.p0; In this example, the program has prompted the user for a message
definition file. The user has not specified the facility number for the
messages, and thus the program has aborted.
.lm -10

.blank
.nofill
.keep
$ ^*NEWMSG SMALL /NUMBER=1234/RUNOFF/NOPARAM/NOOBJ/LOG_<CR_>\*
Message file:     SMALL.MES
Facility number:  1234
Facility name:    SMALL
Facility prefix:  SMALL____
Generating output for RUNOFF
%NEWMSG-I-MESOPN, opened  input message file "SMALL.MES"
%NEWMSG-I-SEQOPN, opened sequential runoff workfile "SYS$DISK:[]SMALL.TEMP__SEQ"
%NEWMSG-I-MESCLO, closed  input message file
%NEWMSG-I-SEQCLO, closed sequential runoff workfile
%NEWMSG-I-SORTING, sorting messages
%NEWMSG-I-CONVERT, converting runoff workfile to indexed form
%NEWMSG-I-CONVERTED,   15 message records converted
%NEWMSG-I-SEQDEL, deleted sequential runoff workfile
%NEWMSG-I-IDXOPN, opened indexed runoff workfile "SYS$DISK:[]SMALL.TEMP__IDX"
%NEWMSG-I-RNOCRE, opened output runoff file "SYS$DISK:[]SMALLMSG.RNO"
%NEWMSG-I-RNOCLO, closed output runoff file
%NEWMSG-I-IDXDEL, deleted indexed runoff workfile
$
.fill
.nokeep
.lm +10
.p0; In this example, only the runoff file is required. Note the use of both
/NOPARAMETERS and /NOOBJECT to suppress all other files. Also note that,
because /NOOBJECT has been specified, the /LOG does not reflect the message
texts from the file.
.lm -10

.blank
.nofill
.keep
$ ^*NEWMSG WRONG /NUMBER=1111/NOLOG_<CR_>\*
%NEWMSG-W-RUBBISH, found an unexpected '_\' on line 5 - may be an old form file
-NEWMSG-I-OLDFORM, the old NEWMSG program used two texts for each message
-NEWMSG-I-NOTEXT2, this one doesn't - it only uses the second one
%NEWMSG-W-MISSEXPL,   6 messages had no EXPLANATION text
%NEWMSG-W-MISSUSER,   6 messages had no USERACTION text
$
.nokeep
.fill
.lm +10
.p0; The message file used in this example appears to have included a message
description in the old form. This seems plausible, since six messages are
reported not to have EXPLANATIONs, and six not to have USERACTIONs (in fact,
the same six). Note the use of /NOLOG to suppress the normal informational
output.
.lm -10


.!*****************************************************************************
.!* Require the documentation of our messages (produced by ourselves...)

.REQUIRE "NEWMSGMSG.RNO"

