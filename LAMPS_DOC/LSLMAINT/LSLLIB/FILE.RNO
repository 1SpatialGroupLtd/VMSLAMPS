.!*
.!* File I/O
.!*
.INDEX ^^FILEIO> file read and write facilities
.INDEX ^^File read and write facilities

.HL 1 ^^^&Introduction\&
.INDEX ^^FILEIO> introduction
.P 0
These routines are provided for file oriented I/O. That is, they enable the
user to read and write any file structured device (note that this includes
terminals).

.P 0
.INDEX ^^FILEIO> exmaples
.INDEX ^^Examples
For examples of their use, see the conversion utility I2MOSS.

.HL 1 ^^^&Unit_ numbers\&
.INDEX ^^FILEIO> unit numbers
.INDEX ^^FILEIO> and RMS
.P 0
These routines do not use Fortran I/O, but interface directly with RMS (Record
Management System, see the appropriate DIGITAL manuals). Thus the 'unit
number' in use here is not related to the LUN (Logical Unit Number) that would
be used for reading or writing a file in Fortran. A file opened with the FILEIO
routines cannot be accessed by Fortran using that number, and vice-versa.

.P 0 
Each file is accessed via its own FAB and RAB, and these are associated with a
particular unit number. A FAB is a File Access Block, which describes the
particular file being dealt with, and a RAB is a Record Access Block, which is
associated with a particular FAB and specifies how each record in the file will
be dealt with. 

.P 0
Within the library, a table is built up, associating a unit number with each
pair of FAB and RAB, and noting whether the unit is being used for input or 
output:

.TP 10
.NOFILL
.P 0
	  row    unit	 FAB	RAB   i/o    file
		=====================================
	    0   |  2   |  1  |   1  |  i |   FRED.DAT
	    1   |  4   |  2  |   2  |  o |   MICK.LEG
	    2   |  -   |  -  |   -  |  - |   no file, unit unassigned
	    3   |  -   |  -  |   -  |  - |   "  "     "      "

.FILL

.INDEX ^^FILEIO> unit numbers> maximum number
.P 0
This example shows a table holding up to four units open at any one time
(LSLLIB FILEIO will currently deal with up to fifteen, although this number
may be increased by a simple amendment to the sources).

.INDEX ^^FILEIO> unit numbers> restrictions
.P 0
Unit numbers may be any values in the range 1 to 32767 - the actual values 
chosen are not significant. FILEIO will not allow an active unit number (one 
with an open file on it) to be reassigned - the file must be closed first.


.HL 1 ^^^&The_ routines\&
.INDEX ^^FILEIO> routines


.! ***************************************************************************
.HL 2 ^^^&Opening_ files\&
.INDEX ^^FILEIO> routines> opening files

.P 0
In the current version of LSLLIB FILEIO, no more than fifteen
files may be open for FILEIO read/write at any one time.

.P 0
The file open routines are:

.P 5
^*ok = FLROPN( unit, filename, [ierr], [alq] )\*
.INDEX ^^FLROPN

.P 5
^*ok = FLROPB( unit, filename, [ierr], [alq] )\*
.INDEX ^^FLROPB

.P 5
^*ok = FLWOPN( unit, filename, [ierr], [alq] )\*
.INDEX ^^FLWOPN

.P 5
^*ok = FLWOPB( unit, filename, [ierr], [alq] )\*
.INDEX ^^FLWOPB

.P 5
^*ok = FLWEXT( unit, filename, [ierr], [alq] )\*
.INDEX ^^FLWEXT

.P 5
^*ok = FLWOVW( unit, filename, [ierr], [alq] )\*
.INDEX ^^FLWOVW

.P 5
^*ok = FLWUPD( unit, filename, [ierr], [alq] )\*
.INDEX ^^FLWUPD
.LM +30

.P -25
out#-#long####^*ok\*#########LSL____NORMAL if the file is successfully opened, 
otherwise a relevant error code - see below.

.I -25
in##-#long####^*unit\*#######is the unit number, a value between 1 and 32767.

.I -25
in##-#char####^*filename\*###a string specifying the name of the file to
be opened. 

.I -25
out#-#long####^*ierr\*#######for some values of ^*ok\*, this returns a 
supplementary system error code.

.I -25
out#-#long####^*alq\*########allocation file size - the allocated file size
in blocks.

.LM -30

.LM +10

.P -10
FLROPN####The file is opened for reading. It may not be written to. It may be
sequential or indexed sequential (both are sensible). 
.INDEX ^^FLROPN

.P -10
FLROPB####The file is opened for block reading. It may not be written to.
It may only be read block by block by routine FLRBLK.
.INDEX ^^FLROPB

.P -10
FLWOPN####A new file of the given name is created and opened for writing. This
should only be used for sequential files; the file it creates is a sequential
file.
.INDEX ^^FLWOPN

.P -10
FLWOPB####A new file of the given name is created and opened for writing in
block mode. It may be written block by block by routine FLWBLK, and the
blocks may then be read using FLRBLK.
.INDEX ^^FLWOPB

.P -10
.INDEX ^^FLWEXT
FLWEXT####The file is opened for extending. If the given file does not exist,
an error is given and the file open is abandoned. This should be used to open
files for extending - the file may be sequential or indexed sequential, but
for sequential files data may only be added to the end of the file, and for
indexed sequential files only records with an unduplicated key may be
inserted. 

.P -10
FLWOVW####The file is opened for overwriting. If the file does not exist, an
error is given and the file open is abandoned.
.INDEX ^^FLWOVW

.P 0
For a sequential file, all data in the file is lost, and the effect is of
starting a new file with the same version number as the old file.

.P 0
For an indexed sequential file, this open allows the overwriting of records -
if the key of the record to be inserted is unmatched, then the record is just
inserted, but if the key is duplicated, then the record is overwritten and the
old value lost.

.P -10
.INDEX ^^FLWUPD
FLWUPD####The file is opened for updating. If the given file does not exist,
an error is given and the file open is abandoned. 

.LM -10

.P 0
If a file is opened for read then it is automatically selected as the current
file for read, and similarly a file selected for write is automatically
selected as the current file for write. For a discussion of how selection
of files is dependent upon how the file was opened, see the section on
"Selecting files" below.

.P 0
The following values of ^*ok\* may be returned:
.INDEX ^^FILEIO> routines> opening files> condition codes

.LM +18

.P-18; LSL____NORMAL#####-#success#-#file opened successfully

.I-18; LSL____MISSARGS###-#failure#-#one or more required arguments are
missing - the routine is abandoned 

.I-18; LSL____LUNINUSE###-#failure#-#a file has already been opened with this
unit number - the file is not opened 

.I-18; LSL____NOSUCHFILE#-#failure#-#the file could not be found - the open has
been abandoned. This will never be returned by FLWOPN

.I-18; LSL____NOLUNS#####-#failure#-#there is no room for another record in
the unit table, so the file is not opened 

.I-18; LSL____FILINUSE###-#failure#-#the file has already been opened
(probably by someone else), and is locked - the open is abandoned

.I-18; LSL____SYSOPEN####-#failure#-#an error occurred during the open process
- a system error which should give more details will be found in ^*ierr\* (for
instance, if the _$OPEN or _$CREATE failed) 

.LM -18


.! ***************************************************************************
.HL 2 ^^^&Selecting_ files\&
.INDEX ^^FILEIO> routines> selecting files

.P 0
These routines allow the selection of a particular file for reading or writing.
They do not check that the file selected was actually opened in a relevant
manner.

.P 0
The file select routines are:

.P 5
^*ok = FLRSEL( unit )\*
.INDEX ^^FLRSEL

.P 5
^*ok = FLWSEL( unit )\*
.INDEX ^^FLWSEL

.LM +30

.P -25
out#-#long####^*ok\*#########LSL____NORMAL if the file on the required unit is 
selected successfully, otherwise a relevant error code - see below

.I -25
in##-#long####^*unit\*#######is the unit number, a value between 1 and 32767.

.LM -30

.LM +10

.P -10
FLRSEL####The file associated with the given unit is selected for reading - the
FAB/RAB combination associated with this unit will be used for future calls of
the read routines. This is sensible if the file was opened for read with FLROPN
or FLROPB, if it is an indexed sequential file opened for write with FLWEXT or
FLWOVW, or if it is a block oriented file created with FLWOPB.

.INDEX ^^FLRSEL

.P -10
FLWSEL####The file associated with the given unit is selected for writing - the
FAB/RAB combination associated with this unit will be used for future calls of
the write routines. This is sensible if the file was created with FLWOPN
or FLWOPB, or if it was opened with FLWEXT, FLWOVW or FLWUPD.
.INDEX ^^FLWSEL

.LM -10

.P 0
The following values of ^*ok\* may be returned:

.INDEX ^^FILEIO> routines> selecting files> condition codes

.LM +18

.P-18; LSL____NORMAL#####-#success#-#file selected successfully

.I-18; LSL____NOSUCHLUN##-#failure#-#the unit number requested is not present in
the unit/FAB/RAB table. 

.I-18; LSL____MISSARGS###-#failure#-#one or more required arguments are
missing - the routine is abandoned 

.LM -18

.! ***************************************************************************
.HL 2 ^^^&Saving_ current_ file_ selection\&
.INDEX ^^FILEIO> routines> saving current file selection

.P 0
These routines allow the user to save the unit number of the currently selected
file, so that it may be reselected at a later time. 

.P 0
The save unit routines are:

.P 5
^*ok = FLRSVL( savunit )\*
.INDEX ^^FLRSVL

.P 5
^*ok = FLWSVL( savunit )\*
.INDEX ^^FLWSVL

.LM +30

.P -25
out#-#long#####^*ok\*#########LSL____NORMAL if there was a currently selected
file, otherwise a relevant error code - see below.

.I -25
out##-#long####^*savunit\*###is the saved unit number.

.LM -30

.LM +10

.P -10
FLRSVL####The unit number of the file currently selected for reading is
returned. 
.INDEX ^^FLRSVL

.P -10
FLWSVL####The unit number of the file currently selected for writing is
returned. 
.INDEX ^^FLWSVL

.LM -10

.P 0
The following values of ^*ok\* may be returned:

.INDEX ^^FILEIO> routines> saving current file selection> condition codes

.LM +18

.P-18; LSL____NORMAL#####-#success#-#the currently selected file unit number
was returned in ^*savunit\*.

.I-18; LSL____NOSUCHLUN##-#failure#-#there was no currently selected file.
^*savunit\* will be zero.

.I-18; LSL____MISSARGS###-#failure#-#one or more required arguments are
missing - the routine is abandoned 

.LM -18

.! ***************************************************************************
.HL 2 ^^^&Finding_ records_ in_ indexed_ sequential_ files\&
.INDEX ^^FILEIO> routines> indexed file records

.P 0
Four routines are provided for finding records by key in indexed sequential
files. They are:

.P 5
^*ok = FLRFND( string, [key__of__ref], [greater], [ierr] )\*
.INDEX ^^FLRFND

.P 5
^*ok = FLWFND( string, [key__of__ref], [greater], [ierr] )\*
.INDEX ^^FLWFND

.P 5
^*ok = FLRFNB( buffer, buflen, [key__of__ref], [greater], [ierr] )\*
.INDEX ^^FLRFNB

.P 5
^*ok = FLWFNB( buffer, buflen, [key__of__ref], [greater], [ierr] )\*
.INDEX ^^FLWFNB

.LM +30

.P -25
out#-#long####^*ok\*#########LSL____NORMAL if the search is successful,
otherwise a relevant error code - see below

.I -25
in##-#char####^*string\*#####the string to search for.

.I -25
in##-#byte####^*buffer\*#####the buffer containing the string to search for.

.I -25
in##-#long####^*buflen\*#####the number of characters in ^*buffer\*

.I -25
in##-#long####^*key__of__ref\*#which key to search on. 0 (zero) is the default,
and means the primary key. 1 would mean the first alternate key, and so on.

.I -25
in##-#long####^*greater\*####if this argument is zero (the default) then a
match will only occur if the string being searched for matches a key exactly.
If it is 1 then the search will be satisfied if the key is greater than the
string, and if it is 2 then it will be satisfied if the key is greater than or
equal to the string. 

.I -25
out#-#long####^*ierr\*#######for some values of ^*ok\*, this returns a 
supplementary system error code

.LM -30

.LM +10

.P -10
FLRFND####finds a particular record in the file selected for reading
.INDEX ^^FLRFND
.I -10
FLRFNB####finds a particular record in the file selected for reading
.INDEX ^^FLRFNB

.P -10
FLWFND####finds a particular record in the file selected for writing.
.INDEX ^^FLWFND
.I -10
FLWFNB####finds a particular record in the file selected for writing.
.INDEX ^^FLWFNB

.LM -10

.P 0
The following values of ^*ok\* may be returned:
.INDEX ^^FILEIO> routines> indexed file records> condition codes

.LM +18

.P-18; LSL____NORMAL#####-#success#-#record found successfully

.I-18; LSL____MISSARGS###-#failure#-#one or more required arguments are
missing - the routine is abandoned 

.I-18; LSL____ILLEGLUN###-#failure#-#the unit number requested is not allowed, 
i.e. it is 0 or less.

.I-18; LSL____SYSFIND####-#failure#-#an error occurred during the find. 
^*ierr\* should contain a system error code, which may give more details.

.LM -18

.P 0
These routines will only work for indexed sequential files. They assume
that any key being searched is a string key, but allow any level of key to be
searched. Success is returned on finding a record with a key which matches the
equal/greater condition passed in ^*greater\*, and the current record in the
file becomes the found record.  The key supplied must be shorter than or of
equal length to the key being searched. If it is shorter, then the comparison
is made on only that number of characters in each key.

.P 0
If the file is selected for read (whether it was opened for read or for write)
then FLRLIN or FLRSTR will return the current (ie found) record after an FLxFND
.INDEX ^^FLRLIN
.INDEX ^^FLRSTR

.P 0
If the file is selected for write, then FLULIN or FLUSTR may be used to update 
the current record after an FLxFND.
.INDEX ^^FLULIN
.INDEX ^^FLUSTR

.P 0
For a file opened with FLWEXT, the key specified in a record handed to FLWLIN
or FLWSTR must be greater than the key of the current record, and
unduplicated, for insertion to occur. For a file opened with FLWOVW, the
situation is similar, except that a duplicated key will cause the record
concerned to be overwritten (as if the relevant FLUxxx routine had been used).
.INDEX ^^FLWEXT
.INDEX ^^FLWOVW

.! ***************************************************************************
.HL 2 ^^^&Rewinding_ files\&

.INDEX ^^FILEIO> routines> rewinding files

.P 5
^*ok = FLRREW( [unit], [ierr] )\*
.INDEX ^^FLRREW

.LM +30

.P -25
out#-#long####^*ok\*#########LSL____NORMAL if the file is successfully rewound,
otherwise a relevant error code - see below

.I -25
in##-#long####^*unit\*#######is the unit number, a value between 1 and 32767.
If specified, the given unit is selected for read, otherwise the current unit 
is used.

.I -25
out#-#long####^*ierr\*#######for some values of ^*ok\*, this returns a 
supplementary system error code

.LM -30

.LM +10

.P -10
FLRREW####rewinds the file currently selected for read. The next read will
find the first record in the file. 
.INDEX ^^FLRREW

.P 0
This routine may also be used for files opened for write which have been
selected for read. Note that the latter is only really useful for an indexed
sequential file (when movement about the file is natural) or for a sequential
file opened with FLWOVW (which will allow records to be overwritten again). If
a sequential file is rewound and overwritten, everything after the current
record (ie the one which has been most recently been written) will be lost on
closing the file. 

.LM -10

.INDEX ^^FILEIO> routines> rewinding files> condition codes

.P 0
The following values of ^*ok\* may be returned:

.LM +18

.P-18; LSL____NORMAL#####-#success#-#file rewound successfully

.I-18; LSL____NOSUCHLUN##-#failure#-#the unit number requested is not present in
the unit/FAB/RAB table. 

.I-18; LSL____ILLEGLUN###-#failure#-#the unit number requested is not allowed, 
i.e. it is 0 or less.

.I-18; LSL____SYSREW#####-#failure#-#an error occurred during the rewind.
^*ierr\* should contain a system error code, which may give more details 

.LM -18

.! ***************************************************************************
.HL 2 ^^^&Reading_ a_ record\&
.INDEX ^^FILEIO> routines> reading a record

.P 0
These routines operate on the file currently selected for read. Defaults are
taken from the common block /TXTC/.

.P 5
^*ok = FLRLIN( [buffer], [nchs], [buflen], [ierr] )\*
.INDEX ^^FLRLIN

.P 5
^*ok = FLRSTR( [string], [nchs], [ierr] )\*
.INDEX ^^FLRSTR

.LM +30

.P -25
out#-#long####^*ok\*#########LSL____NORMAL is the line is read successfully, 
otherwise a relevant error code - see below

.I -25
out#-#byte####^*buffer\*#####a byte array to receive the record which is being
read. ^*buffer\* defaults to TXTBUF. 

.I -25
out#-#word####^*nchs\*#######the number of characters read, but see below.
^*nchs\* defaults to TXTPTR. 

.I -25
in##-#word####^*buflen\*#####the maximum length of ^*buffer\*.
^*buflen\* defaults to TXTLIM. 

.I -25
out#-#char####^*string\*#####the string into which to read the record.
^*string\* defaults to TXTDSC. 

.I -25
out#-#long####^*ierr\*#######for some values of ^*ok\*, this returns a 
supplementary system error code

.LM -30

.LM +10

.P -10
FLRLIN####This reads a record into ^*buffer\*, of maximum length
^*buflen\*. If ^*buffer\* is TXTBUF, then BSLN should be called before
using LSLLIB routines to read from the buffer. If ^*buffer\* is not filled,
then it is padded with spaces. Note that this does not affect the value of
^*nchs\*. 
.INDEX ^^FILEIO> routines> reading a record> using TXTDSC
.INDEX ^^FILEIO> routines> reading a record> using BSLN
.INDEX ^^FLRLIN

.P -10
FLRSTR####This reads a record into ^*string\*, padding after with spaces
up to the string length. Note that if ^*string\* is TXTDSC and ^*nchs\*
is TXTPTR (the defaults) then the string returned in TXTDSC is not padded
- the string has effectively shrunk in length, instead.

.P 0
If ^*string\* is TXTDSC, then BSLN should be called before using
LSLLIB routines to read from the buffer.
.INDEX ^^FILEIO> routines> reading a record> using TXTDSC
.INDEX ^^FILEIO> routines> reading a record> using BSLN
.INDEX ^^FLRSTR

.LM -10

.P 0
The following values of ^*ok\* may be returned:
.INDEX ^^FILEIO> routines> reading a record> condition values

.LM +18

.P-18; LSL____NORMAL#####-#success#-#record read successfully

.I-18; LSL____EOF########-#warning#-#end of file was read

.I-18; LSL____RECTOOBIG##-#warning#-#the record being read was too long to fit
into the buffer supplied (whether a string or line read). The length read is
returned correctly (as supplied by the system routine) in ^*nchs\* 

.I-18; LSL____SYSREAD####-#failure#-#an error occurred during the read.
^*ierr\* should contain a system error code, which may give more details 

.LM -18

.! ***************************************************************************
.HL 2 ^^^&Reading_ a_ block\&
.INDEX ^^FILEIO> routines> reading a block

.P 0
This routine reads a block from a file opened with FLROPB or FLWOPB.

.P 5
^*ok = FLRBLK( vbn, buffer, [read], [ierr] )\*
.INDEX ^^FLRBLK

.LM +30

.P -25
out#-#long####^*ok\*#########returns LSL____NORMAL if the block is read 
successfully, otherwise a relevant error code - see below

.I -25
in##-#long####^*vbn\*########the virtual block number of the block to be
read. If this is 0 then the next block will be read. 

.I -25
out#-#byte####^*buffer\*#####the buffer to receive the record which is being
read. This must be 512 bytes long. 

.I -25
out#-#long####^*read\*#######the virtual block number of the block that was
read

.I -25
out#-#long####^*ierr\*#######for some values of ^*ok\*, this returns a 
supplementary system error code

.LM -30

.LM +10

.P -10
FLRBLK####This routine reads a requested block into a user-defined buffer.
Note that /TXTC/ is NOT involved.
.INDEX ^^FLRBLK

.LM -10

.P 0
The following values of ^*ok\* may be returned:
.INDEX ^^FILEIO> routines> reading a block> condition codes

.LM +18

.P-18; LSL____NORMAL#####-#success#-#block read successfully

.I-18; LSL____EOF########-#warning#-#end of file was read

.I-18; LSL____MISSARGS###-#failure#-#one or more required arguments are
missing - the routine is abandoned 

.I-18; LSL____SYSREAD####-#failure#-#an error occurred during the read.
^*ierr\* should contain a system error code, which may give more details 

.LM -18

.! ***************************************************************************
.HL 2 ^^^&Writing_ a_ record\&
.INDEX ^^FILEIO> routines> writing a record

.P 0
These routines operate on the file currently selected for write. Defaults are
taken from the common block /EXPC/.
.INDEX ^^FILEIO> routines> writing a record> use of EXPC common block

.P 5
^*ok = FLWLIN( [buffer], [nchs], [ierr] )\*
.INDEX ^^FLWLIN

.P 5
^*ok = FLWSTR( [string], [ierr] )\*
.INDEX ^^FLWSTR

.LM +30

.P -25
out#-#long####^*ok\*#########LSL____NORMAL if the line is written successfully,
otherwise a relevant error code - see below

.I -25
out#-#byte####^*buffer\*#####the buffer from which to output characters.
^*buffer\* defaults to EXPBUF. 

.I -25
out#-#word####^*nchs\*#######the number of characters to output from
^*buffer\*. ^*nchs\* defaults to EXPLEN. 

.I -25
out#-#char####^*string\*#####the string to be output. ^*string\* defaults to
EXPDSC. 

.I -25
out#-#long####^*ierr\*#######for some values of ^*ok\*, this returns a 
supplementary system error code

.LM -30

.LM +10

.P -10
FLWLIN####this routine outputs ^*nchs\* characters from ^*buffer\*.
.INDEX ^^FLWLIN

.P -10

FLWSTR####this routine outputs ^*string\*.
.INDEX ^^FLWSTR

.LM -10

.P 0
The following values of ^*ok\* may be returned:
.INDEX ^^FILEIO> routines> writing a record> condition codes

.LM +18

.P-18; LSL____NORMAL#####-#success#-#record written successfully

.I-18; LSL____SYSWRITE###-#failure#-#an error occurred during the write.
^*ierr\* should contain a system error code, which may give more details 

.LM -18

.! ***************************************************************************
.HL 2 ^^^&Writing_ a_ block\&
.INDEX ^^FILEIO> routines> writing a block

.P 0
This routine writes a block to a file opened with FLWOPB.
.INDEX ^^FLWOPB

.P 5
^*ok = FLWBLK( vbn, buffer, [read], [ierr] )\*
.INDEX ^^FLWBLK

.LM +30

.P -25
out#-#long####^*ok\*#########returns LSL____NORMAL if the block is written
successfully, otherwise a relevant error code - see below

.I -25
in##-#long####^*vbn\*########the virtual block number of the block to be
written. If this is 0 then the next block will be written. 

.I -25
in##-#byte####^*buffer\*#####the buffer containing the block which is to be
written. This must be 512 bytes long. 

.I -25
out#-#long####^*read\*#######the virtual block number of the block that was
written

.I -25
out#-#long####^*ierr\*#######for some values of ^*ok\*, this returns a 
supplementary system error code

.LM -30

.LM +10

.P -10
FLWBLK####This routine writes a specified block from a user-defined buffer.
Note that /EXPC/ is NOT involved.
.INDEX ^^FLWBLK

.LM -10

.P 0
The following values of ^*ok\* may be returned:
.INDEX ^^FILEIO> routines> writing a block> condition codes

.LM +18

.P-18; LSL____NORMAL#####-#success#-#block written successfully

.I-18; LSL____MISSARGS###-#failure#-#one or more required arguments are
missing - the routine is abandoned 

.I-18; LSL____SYSWRITE###-#failure#-#an error occurred during the write.
^*ierr\* should contain a system error code, which may give more details 

.LM -18

.! ***************************************************************************
.HL 2 ^^^&Updating_ a_ record\&
.INDEX ^^FILEIO> routines> record updating

.P 0
These routines operate on the file currently selected for write, which is 
assumed to be an indexed sequential file.  Defaults are
taken from the common block /EXPC/.
.INDEX ^^FILEIO> routines> record updating> use of EXPC common block

.P 5
^*ok = FLULIN( [buffer], [nchs], [ierr] )\*
.INDEX ^^FLULIN

.P 5
^*ok = FLUSTR( [string], [ierr] )\*
.INDEX ^^FLUSTR

.LM +30

.P -25
out#-#long####^*ok\*#########LSL____NORMAL if the record is updated
successfully, otherwise a relevant error code - see below 

.I -25
out#-#byte####^*buffer\*#####the buffer from which to output characters.
^*buffer\* defaults to EXPBUF. 

.I -25
out#-#word####^*nchs\*#######the number of characters to output from
^*buffer\*. ^*nchs\* defaults to EXPLEN. 

.I -25
out#-#char####^*string\*#####the string to be output. ^*string\* defaults to
EXPDSC. 

.I -25
out#-#long####^*ierr\*#######for some values of ^*ok\*, this returns a 
supplementary system error code

.LM -30

.LM +10

.P -10
FLULIN####this routine outputs ^*nchs\* characters from ^*buffer\* into the 
current record of an indexed sequential file

.P -10

FLUSTR####this routine outputs ^*string\* into the current record of an 
indexed sequential file

.LM -10

.P 0
The following values of ^*ok\* may be returned:
.INDEX ^^FILEIO> routines> record updating> condition codes

.LM +18

.P-18; LSL____NORMAL#####-#success#-#record updated  successfully

.I-18; LSL____SYSUPD#####-#failure#-#an error occurred during the update.
^*ierr\* should contain a system error code, which may give more details 

.LM -18

.! ***************************************************************************
.HL 2 ^^^&Deleting_ a_ record\&
.INDEX ^^FILEIO> routines> record deleting
.INDEX ^^FILEIO> routines> deleting records

.P 0
This routine operates on the file currently selected for write, which is 
assumed to be an indexed sequential file.

.P 5
^*ok = FLWRDL( [ierr] )\*
.INDEX ^^FLWRDL

.LM +30

.P -25
out#-#long####^*ok\*#########LSL____NORMAL if the record is deleted
successfully, otherwise a relevant error code - see below 

.I -25
out#-#long####^*ierr\*#######for some values of ^*ok\*, this returns a 
supplementary system error code

.LM -30

.LM +10

.P -10
FLWRDL####this routine deletes the currently selected record of an indexed
sequential file.

.LM -10

.P 0
The following values of ^*ok\* may be returned:
.INDEX ^^FILEIO> routines> record deleting> condition codes

.LM +18

.P-18; LSL____NORMAL#####-#success#-#record updated  successfully

.I-18; LSL____SYSUPD#####-#failure#-#an error occurred during the deletion.
^*ierr\* should contain a system error code, which may give more details 

.LM -18


.! ***************************************************************************
.HL 2 ^^^&Flushing buffers\&
.INDEX ^^FILEIO> routines> flushing buffers

.P 0
This routine allows the internal buffers for a file to be flushed out to
disc, ensuring that the disc file is up to date.

.P 0
The routine is:

.P 5
^*ok = FLWUSH( [unit], [ierr] )\*
.INDEX ^^FLWUSH

.LM +30

.P -25
out#-#long####^*ok\*#########LSL____NORMAL if the buffers are flushed
successfully, otherwise a relevant error code - see below 

.I -25
in##-#long####^*unit\*#######is the unit number, a value between 1 and 32767.
If specified, the given unit is flushed, otherwise the current unit 
is used.

.I -25
out#-#long####^*ierr\*#######for some values of ^*ok\*, this returns a 
supplementary system error code

.LM -30

.LM +10

.P -10
FLWUSH####The file associated with the given unit is flushed, ensuring that
all data written so far is actually on the disc. This can be useful when
it is important that data is protected against system failure.

.INDEX ^^FLWUSH

.LM -10

.P 0
The following values of ^*ok\* may be returned:

.INDEX ^^FILEIO> routines> flushing buffers> condition codes

.LM +18

.P-18; LSL____NORMAL#####-#success#-#file flushed successfully

.I-18; LSL____NOSUCHLUN##-#failure#-#the unit number requested is not present in
the unit/FAB/RAB table. 

.I-18; LSL____ILLEGLUN###-#failure#-#the unit number requested is not allowed, 
i.e. it is 0 or less.

.I-18; LSL____SYSFLUSH###-#failure#-#an error occurred during the flush.
^*ierr\* should contain a system error code, which may give more details 

.LM -18

.! ***************************************************************************
.HL 2 ^^^&Closing_ files\&
.INDEX ^^FILEIO> routines> closing files

.P 0
These routines close the specified file, which defaults to that currently
selected, possibly performing some action on the file first. They then remove
the file's entry in the unit/FAB/RAB table. 

.P 0
.INDEX ^^FILEIO> routines> closing files> sequential file warning 
Note that closing a sequential file opened for write will truncate it - that
is, the last record in the file will be that which was written last before the
close. This is relevant if a file is opened with FLWOVW, rewound and then more
data inserted - the original data is lost.

.P 5
^*ok = FLRCLO( [unit], [ierr] )\*
.INDEX ^^FLRCLO

.P 5
^*ok = FLWCLO( [unit], [ierr] )\*
.INDEX ^^FLWCLO

.P 5
^*ok = FLWPRT( [unit], [ierr] )\*
.INDEX ^^FLWPRT

.P 5
^*ok = FLWDEL( [unit], [ierr] )\*
.INDEX ^^FLWDEL

.P 5
^*ok = FLWSPL( [unit], [ierr] )\*
.INDEX ^^FLWSPL

.P 5
^*ok = FLWSUB( [unit], [ierr] )\*
.INDEX ^^FLWSUB

.LM +30

.P -25
out#-#long####^*ok\*#########LSL____NORMAL if the file is closed successfully,
otherwise a relevant error code - see below

.I -25
in##-#long####^*unit\*#######is the unit number, a value between 1 and 32767.
If specified, the given unit is selected before attempting the close, 
otherwise the file on the current unit is closed.

.I -25
out#-#long####^*ierr\*#######for some values of ^*ok\*, this returns a 
supplementary system error code

.LM -30

.LM +10

.P -10
FLRCLO####closes the file currently selected for read. The file must have
been opened for read.
.INDEX ^^FLRCLO

.P -10
FLWCLO####closes the file currently selected for write. The file must have
been opened for write.
.INDEX ^^FLWCLO

.P -10
FLWPRT####closes the file currently selected for write, and prints it on the
printer (SYS$SYSPRINT). The file must have been opened for write. 
.INDEX ^^FLWPRT


.P -10
FLWDEL####closes the file currently selected for write, and deletes it. The
file must have been opened for write. 
.INDEX ^^FLWDEL

.P -10
FLWSPL####closes the file currently selected for write, and 'spools' it - the
file is printed (as for FLWPRT) and then deleted. The file must have been open
for write. 
.INDEX ^^FLWSPL

.P -10
FLWSUB####closes the file currently selected for write, and submits it to the
batch queue. The file must have been opened for write. Don't forget that in
order to charge the batch job to an account, the file must start with a CHARGE
command. 
.INDEX ^^FLWSUB

.LM -10

.P 0
The following values of ^*ok\* may be returned:
.INDEX ^^FILEIO> routines> closing files> condition codes

.LM +18

.P-18; LSL____NORMAL#####-#success#-#file closed successfully

.I-18; LSL____NOSUCHLUN##-#failure#-#the unit number requested is not present in
the unit/FAB/RAB table. 

.I-18; LSL____ILLEGLUN###-#failure#-#the unit number requested is not allowed, 
i.e. it is 0 or less.

.I-18; LSL____FAC########-#failure#-#file access conflict - an attempt has
been made to close a file open for read with a write routine, or vice versa 

.I-18; LSL____SYSCLOSE###-#failure#-#an error occurred during the close.
^*ierr\* should contain a system error code, which may give more details 

.LM -18

.! ***************************************************************************
.HL 2 ^^^&WRITEF_ routines\&
.INDEX ^^FILEIO> routines> WRITEF routines

.P 0
The following routines are also supplied:

.P 5
^*call FLWRTF( format, arg1, arg2, ... )\*
.INDEX ^^FLWRTF

.P 5
^*call FLWAPP( format, arg1, arg2, ... )\*
.INDEX ^^FLWAPP

.LM +10

.P -10
FLWRTF####has the same effect as WRITEF, except that output is to the file
currently selected for writing. The arguments are passed to EXPAND, and then
FLWLIN is called to output them.
.INDEX ^^FLWRTF

.P -10

FLWAPP####has the same effect as WRITAP (aka WRTAPP), except that output is to
the file currently selected for writing. The arguments are passed to APPEND,
and then FLWLIN is called to output them. 
.INDEX ^^FLWAPP

.LM -10
