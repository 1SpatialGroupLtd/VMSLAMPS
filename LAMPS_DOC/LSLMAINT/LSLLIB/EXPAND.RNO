.!*
.!* using /EXPC/ - text output
.!*

.INDEX ^^EXPC text expansion

.INDEX ^^EXPC text expansion> introduction
.HL 1 ^^^&Introduction\&

.P 0
These routines will carry out formatted expansion of binary data into
character form. This is usually in order to produce an output line, and is 
often done by calling a routine (such as WRITEF or WRITAP) which uses them.

.INDEX ^^EXPC text expansion> encoding into output buffer
.HL 1 ^^^&Encoding_ into_ the_ output_ buffer\&

.INDEX ^^EXPAND

.P 5
^*len = EXPAND ( format, arg1, arg2, arg3, arg4, ... ) \*

.LM +30
.P -25
out#-#word#####^*len\*#######the length of the expanded string
.I -25
in##-#char#####^*format\*####the format describing the required output
.I -25
in##-#variable#^*arg_<n_>\*####the arguments to fill out the format
.LM -30

.INDEX ^^Common blocks> EXPC
.P 0 
The string format (usually a literal string) is copied into /EXPC/
character by character. If the escape character ^*_%\* is found, then the
action determined by the sequence ^*_%_<escape sequence_>\* is obeyed - this
may use an argument from the argument list following ^*format\*.

.P 0
Calling EXPAND with no arguments sets up a null line in /EXPC/ - a line of 
zero length.
Calls to EXPAND reset the default state of the ^*_%_^\* mode switches.

.P 0
NOTE that EXPAND will check whether LSL__INIT has been called - see the
description in Chapter 2 for details.

.INDEX ^^APPEND

.P 5
^*call APPEND( format, arg1, arg2, ... )\*

.P 0
APPEND is the same as EXPAND, but appends the text to the end of the string
already in /EXPC/.

.P 0 
Calling APPEND with no arguments produces undefined results.
Calls to APPEND continue to use the values of the ^*_%_^\* mode switches
set up in earlier calls of EXPAND/APPEND. 

.HL 1 ^^^&How the string in /EXPC/ is ended\&

.P 0
/EXPC/ is fully described in Chapter 6. As mentioned
there, the actual text buffer, EXPBUF, is declared as one byte longer than
would be expected from the maximum length of line. This allows EXPAND/APPEND
to output a final null byte at the end of any string. 

.P 0
Thus the string placed into /EXPC/ will always terminate in a zero byte,
which will not be included in the count of characters held in EXPLEN. 

.P 0
Note that this zero terminating byte is not output when output is redirected 
to another destination (with %W or %WS - see below).


.HL 1 ^^^&EXPAND_ escape_ sequences\&

.INDEX ^^EXPC text expansion> escape sequences

.P 0
The escape sequences allowed in the format string to EXPAND/APPEND are 
described below. Note that (unless otherwise stated) alphabetic escape 
sequences must be upper-case.


.HL 2 ^^^&Expanding_ a_ text_ string\&
.INDEX ^^EXPC text expansion
.INDEX ^^EXPC text expansion> expanding a text string

.P 0
The following expand a byte buffer or string argument in place of the escape
sequence. 

.LM +10

.P -10
%A_<n_>#####Synonym of %AZ 
.P -10
%AC_<n_>####Includes the given ASCII byte array, assuming that the 1st byte is
a count of the number of characters. Maximum length expanded is _<n_>,
default 255
.P -10
%AZ_<n_>####Includes the given ASCII byte array, assuming that it is
terminated by a zero byte. Maximum length expanded is _<n_>, default 255
.P -10
%AD_<n_>####Synonym of %S 
.P -10
%S_<n_>#####Includes the given ASCII string, assuming it is a character 
string. Maximum length expanded is _<n_>, default 255
.P -10
%C########Includes 1-4 ASCII characters (depending on current mode) from
the argument - the characters are stored as bytes. Terminated by zero byte
.P -10
%R########Includes three radix-50 characters from the word argument
.P -10
%5########Synonym of %R 
.P -10
%RZ_,%5Z###Effect as for %R or %5, but trailing spaces are suppressed 

.LM -10

.HL 2 ^^^&Expanding_ integers\&
.INDEX ^^EXPC text expansion> expanding integers

.P 0
The following expand an integer argument in place of the escape sequence.

.P 0
If the output is signed (the default) then negative numbers are preceded by a
minus sign. If the output is unsigned (set by the %U flag) then the number is
output as an unsigned number - ie it is always positive. Positive numbers are
never preceded by a plus sign.

.P 0
A minus sign is included in the count of characters for the field width, and
is always output adjacent to and immediately preceding the first digit output.

.LM +10

.P -10
%I_<n_>#####Includes a decimal integer, field width _<n_> (default 6). If the 
integer won't fit in the field width, then it is output in the minimum field 
width that it will fit in.
.P -10
%N_<n_>#####As %I, except that the default field width is 0
.P -10
%O_<n_>#####Includes an octal number (default field 0). This is always assumed 
unsigned.
.P -10
%X_<n_>#####Includes a# hexadecimal number (default field 0). This is always 
assumed unsigned.

.LM -10

.HL 2 ^^^&Expanding_ real_ numbers\&
.INDEX ^^EXPC text expansion> expanding real numbers

.P 0
The following expand a real (floating point) number in place of the escape
sequence. 

.LM +10

.P -10
%F_<f_>._<d_>#Includes a floating decimal, where _<f_>
is the total field width to use (including the decimal point), and _<d_> is
the number of digits to be output after the decimal point. The default field
values are 9.3 

.P 0
Note that there will always be at least one digit output before the decimal
point, although there need not be any digits output after the decimal point. 
The sequence %F0._<n_> can be useful for outputting in the minimum field width
- compare with %I0 for integers.

.P 0
Provided that the field (f) is large enough to contain the number, the
number will be right justified in the field, and trailing zeroes will not
be truncated. This means that the decimal points of numbers will always
appear in the same character position.

.P 0
If the field is insufficient to contain the number, then the number will
be left justified, and will take up as many characters as required.
Trailing zeroes may be truncated or not, depending on the use of %_^T or
%_^P (default).

.P 0
Thus the number 1234.5678 can be output as follows

.LM +5
.P 0
with###%F### ### #1234.568
.BR
with###%F0.3 ### 1234.568
.BR
with###%F7.0 ### ##1235.
.BR
with###%F0.0 ### 1235.
.LM -5

.P -10
%E_<d_>#####Includes a real number with decimal exponent,
where _<d_> is the number of significant digits to output - that is the number 
of digits between the decimal point and the 'E' delimiting the exponent.
The default field value is 4.

.P 0
Thus the number 1234.5678 can be output as follows

.LM +5
.P 0
with###%E# ### .1235E#004
.BR
with###%E0 ### .E#004
.BR
with###%E1 ### .1E#004
.BR
with###%E2 ### .12E#004
.BR
with###%E8 ### .12345678E#004
.P -5
and for the number -1234.5678
.BR
with###%E# ### -.1235E#004
.LM -5

.P -10
%G_<f_>._<d_>#Includes a general floating decimal. _<d_> significant figures
are always output. Zero is output using %F_<f_>._<d_>, numbers with absolute
value less than 0.1 or greater than 10_*_*_<d_> are output using %E_<d_>, while
numbers within this range are output using %F_<f_>._<x_>, where _<x_>
(between 0 and _<d_>) is chosen to give _<d_> significant figures.
The default field values are 9.3 

.P 0
%G is useful for outputting numbers where significance must not be lost,
but greater readability than that provided by %E is desired.
The sequence %G0._<n_> can be useful for outputting in the minimum field width.

.P 0
Thus the number 1234.5678 can be output as follows

.LM +5
.P 0
with###%G### ### .123E#005
.BR
with###%G0.4 ### 1235.
.BR
with###%G7.5 ### #1234.6
.LM -5

.LM -10

.HL 2 ^^^&Expanding_ dates_ and_ times\&
.INDEX ^^EXPC text expansion> expanding dates and times

.P 0
The following expand an (integer) argument representing a date or time
in place of the escape sequence. There are routines to convert from
standard VMS date/time strings to these date and time representations (see
chapter 20).

.P 0
A date is either the number of days since 17-NOV-1858, or if it is negative
then it is a "delta date" i_.e_. the number of days from today.

.P 0
A time is the number of 10 millisecond units since midnight.

.LM +10

.P -10
%DD#######Translates the argument to a date, and includes it in standard VMS
date format, e_.g_. either "22-OCT-1987" (for standard dates) or "54" (for
delta dates)  
.P -10
%DT#######Translates the argument to a time since midnight, and includes it in
standard VMS time format, e_.g_. "14:04:23.56"

.LM -10

.HL 2 ^^^&Expanding_ into_ a_ different_ destination\&

.INDEX ^^EXPC text expansion> expanding into a different destination

.P 0
The following redirect text expansion into a different buffer or string,
instead of the default /EXPC/ 

.LM +10

.P -10
%W########Further output will be expanded into a user-specified buffer.
The argument is the address of the required byte array. 

.P 0
Note that no overflow checking is performed - thus EXPAND/APPEND will quite
happily attempt to write off the end of the buffer. This is accomplished by
assuming that the destination buffer is of the same maximum length as EXPBUF - 
ie 1024 characters.
.P -10
%WS#######As %W but the argument is the address of a string descriptor.
Overflow checking is enabled - the expansion will stop when the string is 
full, and the string is padded with spaces (if necessary)

.LM -10

.HL 2 ^^^&Repetition\&

.INDEX ^^EXPC text expansion> repetition

.P 0
The following cause a piece of text to be repeated in the expansion.

.P 0
The enclosing repetition brackets must be matched within any call of EXPAND or
APPEND (that is, %( with %) and %[ with %]). There may be up to 64 repetition
sequences (!) in any one call of EXPAND/APPEND, and these may be nested. If 
the number of repetition sequences is exceeded, then the string %_<_*_> will 
be output instead of the offending repetition sequence.

.LM +10

.P -10
%[_._._.%]###The enclosed section ("_._._.") will be repeated. The argument 
is a word specifying how many times the section should occur in the expanded 
result. If the argument is less than 1, then 1 is assumed.
.P -10
%(_<n_>_._._.%)#The enclosed section ("_._._.") is expanded _<n_> times
(default number of times is 1)

.LM -10


.HL 2 ^^^&Formatting\&

.INDEX ^^EXPC text expansion> formatting

.P 0
The following influence how further escape sequence arguments will be output
or interpreted

.LM +10

.P -10
%P_<c_>#####Sets the padding char to _<c_> (default space). This character 
will be used in padding fixed field integers from now on. Note that it does 
not affect the placement of the '-' sign for negative numbers - these are 
still output directly preceding the integer.
.P -10
%U########Set unsigned mode for next integer - the next integer (only) output
with %I or %N is output as an unsigned number.
.P -10
%_^B#######Set Byte mode - integer arguments are assumed to be bytes (BYTE or 
LOGICAL_*1) from now on 
.P -10
%_^W#######Set Word mode - integer arguments are assumed to be words
(INTEGER_*2) from now on
.P -10
%_^L#######Set Long mode (default) - integer arguments are assumed to be
longwords (INTEGER or INTEGER_*4) from now on 
.P -10
%_^F#######Set single precision floating point mode (default) - real arguments 
are assumed to be single precision reals (REAL or REAL_*4) from now on
.P -10
%_^D#######Set double precision floating point mode - real arguments are 
assumed to be double precision reals (REAL_*8) from now on
.P -10
%_^P#######Set padding of numbers output using %F - numbers will always
have the requested number of decimal places, including trailing zeroes.
.P -10
%_^T#######Set truncation of numbers output using %F (default) - numbers
for which the specified field is insufficient will have any trailing
zeroes after the decimal point truncated. The first digit after the point
will never be truncated.

.LM -10

.HL 2 ^^^&Miscellaneous\&

.INDEX ^^EXPC text expansion> miscellaneous

.P 0
The following escape sequences do not take an argument

.LM +10

.P -10
%M########Multiplicity - if the last integer output with %I, %N, %O, or %X was
not 1, then an 'S' is expanded, otherwise this sequence is ignored. The 
multiplicity is singular immediately after EXPAND or APPEND has been called - 
that is the default situation is as if 1 had been expanded.
.P -10
%m########As %M, but produces 's' (lower case letter) 
.P -10
%T########Expands a tab character
.P -10
%%########Expands a single '%' character
.P -10
%#########%_<space_> is ignored and may be used as a terminator 

.LM -10

.HL 2 ^^^&Unrecognised_ escape_ sequences\&

.INDEX ^^EXPC text expansion> unrecognised escape sequences

.P 0
The following are used if an escape sequence is not recognised

.LM +10

.P -10
%_<unexpected char_>### is expanded as ?_<unexpected char_> 
.P -10
%_^_<unexpected char_>## is expanded as %_^_<unexpected char_> 

.LM -10

.HL 1 ^^^&Output_ routines_ using_ EXPAND/APPEND\&

.INDEX ^^EXPC text expansion> output routines

.INDEX ^^WRITEF
.P 5 
^*call WRITEF( _<args as for EXPAND_> )\*

.P 0
This routine calls EXPAND on its arguments, and then calls TTWSTR.
This latter call writes the contents of /EXPC/ to SYS$OUTPUT
using VIO$PUT__OUTPUT. 

.INDEX ^^WRITAP
.INDEX ^^WRTAPP

.P 5
^*call WRITAP( _<args as for APPEND_> )\*

.P 0
This routine calls APPEND on its arguments, and then calls TTWSTR.
This latter call writes the contents of /EXPC/ to SYS$OUTPUT, using
VIO$PUT__OUTPUT.

.P 0
The alias ^*WRTAPP\* is provided for WRITAP.
.HL 1 ^^^&Routine_ to_ output_ angles\&

.P 5 
^*char = DISPANG( secs, flg ) \*
.INDEX ^^DISPANG
.P 5 
.LM +35
.P -30
out#-#character_*14#^*char\*#######the angle in DD MM SS_.SSS format.
The format depends on the value of ^*flg\* 
.I -30
in##-#real_*8#######^*secs\*#######the angle to output in second
.I -30
in##-#integer######^*secs\*#######output format to use; see below
.LM -35
.BL
This routine is used to output an angle in the format that the routine
READANG can read. See the chapter on reading numbers for details of 
these formats.
.BL
The value of ^*flg\* should be one of the following values, as defined
in LSL_$CMNLSL:READANG.PAR 
.BL
.LM +30
.I -20
READANG__ANGLE#######for angle with no hemisphere
.I -20
READANG__LONGITUDE###for angle represents a longitude
.I -20
READANG__LATITUDE####for angle represents a latitude
.LM -30



