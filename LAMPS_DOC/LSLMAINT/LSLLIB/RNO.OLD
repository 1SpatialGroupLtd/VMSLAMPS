$	set noverify
$!
$! RNO - a command file to runoff the LSLLIB documentation
$!	 It supports running off one or several chapters, the index,
$!	 the contents, or even the title page, separately or in
$!	 combination
$!
$! Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
$!
$! Author TJ Ibbs, 10 June 1986
$!
$! *****************************************************************************
$! modification	- Tony J Ibbs, 23 September 1986
$!	add "to Qume" option - uses /BACKSPACE
$! modification	- Tony J Ibbs, 3 November 1986
$!	add IFF, COMPARISON change ERRORS to ERROR_DEFN and ERROR_RTNS
$! modification	- Tony J Ibbs, 4 November 1986
$!	chapter 8 becomes chapter 5; new option to create LSLLIB.RNO
$! *****************************************************************************
$! set up our error action
$!
$	on control then goto end_it
$	on error   then continue
$!
$! define some truth variables
$!
$	TRUE  = 1
$	FALSE = 0
$!
$! and some useful abbreviations
$!
$	ws  = "write sys$output"
$	wsb = "write sys$output """""
$!
$! and some defaults
$! - the default use of this command file is to prepare the whole document
$!
$ 	do_whole    = TRUE
$	do_contents = TRUE
$	do_index    = TRUE
$	to_terminal = FALSE
$	to_Qume     = FALSE
$!
$! and whether to use /BACKSPACE
$!
$	backspace = ""
$!
$! and no output file open
$!
$	o_is_open = FALSE
$!
$! and announce ourselves
$!
$	type sys$input

LSLLIB documentation command file - version 2.4, 4-Nov-1986

$!
$! *****************************************************************************
$! now, find out what wants doing
$!
$ask_if_whole:
$	inquire/nopunct  answ  "Assemble whole document?       "
$	if .not.answ then do_whole = FALSE
$!
$! and is it for output to the Qume?
$!
$	inquire/nopunct  answ  "For output to the LQP?         "
$	if .not.answ then goto not_to_Qume
$	   to_Qume     = TRUE
$	   to_terminal = FALSE
$	   backspace   = "/BACKSPACE"
$not_to_Qume:
$!
$! if we are doing the whole document, we can skip the main sections of
$! this command file
$!
$	if do_whole then goto runoff_files
$!
$! *****************************************************************************
$! do we want to preview chapters to the terminal?
$!
$	if to_Qume then goto not_ask_terminal
$	   inquire/nopunct  answ  "Preview chapters at terminal? "
$	   to_terminal = answ
$not_ask_terminal:
$!
$! *****************************************************************************
$! otherwise, we are making up a temporary file, which can be runoff to
$! generate whatever they want to print
$!
$	wsb
$ask_if_index:
$	inquire/nopunct  answ  "Produce a new index?           "
$	if .not.answ then do_index = FALSE
$!
$ask_if_contents:
$	inquire/nopunct  answ  "Produce a new contents?        "
$	if .not.answ then do_contents = FALSE
$!
$ask_if_changes:
$	inquire/nopunct  answ  "Produce a new change record?   "
$	do_changes = answ
$!
$! *****************************************************************************
$! create and open the temporary runoff file
$!
$	copy  LSLLIB.HDR  PART_OF_LSLLIB.RNO
$	open/append  o  PART_OF_LSLLIB.RNO
$!
$	o_is_open = TRUE
$!
$! and an abbreviation for writing
$!
$	wo = "write  o"
$!
$! and if we are having a contents, then we must place it there now
$!                              
$ 	if .not.do_contents then goto check_changes
$!
$	   wo  ""
$	   wo  ".SAVE"
$	   wo  ".SUBTITLE Contents"
$	   wo  ".REQUIRE	""LSLLIB.RNT"""
$	   wo  ".RESTORE"
$	   wo  ".PAGE"
$!
$! and similarly with the changes record
$!
$check_changes:
$ 	if .not.do_changes then goto define_chapters
$!
$	   wo  ""
$	   wo  ".REQUIRE	""CHANGES.RNO"""
$	   wo  ".PAGE"
$!
$! *****************************************************************************
$! define the various chapter files:
$!
$define_chapters:
$!
$!	<<Qume header>>			- define the page size, etc
$!	TITLE_PAGE			- standard first page
$!	<<contents>>			- contents pages
$!	CHANGES				- record of changes to document
$!                 
$	Chapter1  = "INTRO"
$	Chapter2  = "LSLINIT"
$	Chapter3  = "ERROR_DEFN"
$	Chapter4  = "ERROR_RTNS"
$	Chapter5  = "EXCEPTION"
$	Chapter6  = "EXPC"
$	Chapter7  = "EXPAND"
$	Chapter8  = "TXTC"
$	Chapter9  = "CHARACTER"
$	Chapter10 = "NUMBERS"
$	Chapter11 = "STRINGS"
$	Chapter12 = "FILENAME"
$	Chapter13 = "TERMINAL"
$	Chapter14 = "FILE"
$	Chapter15 = "DCL"
$	Chapter16 = "COMMANDS"
$	Chapter17 = "IFF"
$	Chapter18 = "MAPPED"
$	Chapter19 = "MAGTAPE"
$	Chapter20 = "SYSTEM"
$	Chapter21 = "SORT"
$	Chapter22 = "MESSAGES"		! really an appendix
$	Chapter23 = "COMPARISON"	! really an appendix
$	number_of_chapters = 23
$!	<<Index>>			- index pages
$!
$! and tell the user about them - first, partition the screen
$!
$ 	ws "[2J"  		! erase screen
$	ws "[0;1HThe following chapters are available:"
$	wsb
$	tab = "	"
$	num     = 0
$	nlines  = 2
$	max_num = number_of_chapters
$!
$! start the first line of output
$!
$	line[0,80] := " "
$	char = 0
$!
$! get the next chapter description
$!
$next_name:	num = num+1
$		if num.gt.max_num then goto no_next_name
$		numc = "''num'"
$		if f$len(numc).lt.2 then numc=" ''numc'"
$		name = "''numc'   "+Chapter'num
$!
$! work out the length of the name, and thus how much space we need to
$! write it out in - always leave at least one space after the name,
$! so add one to 'length' before using it
$!
$	 	length = f$len(name)
$		twenties = (length+1+19) /20
$		total_length = 20*twenties
$		if char+total_length.le.80 then goto output_name
$!
$		   ws line
$		   nlines = nlines+1
$		   line[0,80] := " "
$		   char = 0
$!
$output_name:
$		line[char,length] := "''name'"
$		char = char+total_length
$		goto next_name
$!
$! the last line - output it as it is
$!
$no_next_name:	if char.gt.0 then ws line
$!
$! now, finish off that part of the display
$!
$	wsb
$	ws "------------------------------------------" + -
  	   "--------------------------------------"
$	nlines = nlines+2
$!
$! and we will scroll in the section of the screen below that display
$!
$	nlines = nlines+1
$	ws "[''nlines';24r"
$	ws "[''nlines';1H"	! move cursor to be in that section
$!
$! *****************************************************************************
$! find out which chapters are wanted
$!
$	fn = "First"
$	how_many = 0
$!
$next_chapter:
$	inquire chapt "''fn' chapter to include"
$ 	if chapt.eqs."" then goto no_more_chapters
$!
$	fn = " Next"
$!
$	if f$type(chapt).eqs."INTEGER" then goto is_an_integer
$!
$! the answer is a string - work out which chapter it is
$! (note that we will allow abbreviations)
$!                                  
$	num = 0
$next_chapter_to_check:
$	num = num+1
$	if num.gt.number_of_chapters then goto no_such_chapter
$	   if f$locate(chapt,Chapter'num).eq.0 then goto got_chapter_num
$	   goto next_chapter_to_check
$!
$no_such_chapter:
$	   ws "There is no chapter called ""''chapt'"""
$	   goto next_chapter
$!
$! the answer is an integer - use that as the chapter number
$!
$is_an_integer:
$	num = chapt
$	if num.gt.0 .and. num.le.number_of_chapters then goto got_chapter_num
$	   ws "Chapter number must be between 0 and ",number_of_chapters
$	   goto next_chapter
$!
$! so we have the chapter number
$!
$got_chapter_num:
$!
$! now, confirm it to the user and add that chapter into the runoff file
$!
$	how_many = how_many+1
$	ws  "Adding chapter ",num,":  ",Chapter'num
$	wo  ""
$	wo  ".NUMBER CHAPTER  ",num
$	wo  ".REQUIRE         """,Chapter'num,".RNO"""
$!
$! and go to ask for another chapter
$!
$	goto next_chapter
$!
$! *****************************************************************************
$! no more chapters
$!
$no_more_chapters:
$!
$! ensure that we scroll in the whole of the screen, but move the cursor
$! to the bottom line
$!
$	ws "[1;24r[24;1H"
$!
$! and if we are having an index, then we must place it there now
$!
$ 	if .not.do_index then goto close_file
$!
$	   wo  ""
$	   wo  ".PAGE"
$	   wo  ".TITLE Index"
$	   wo  ".REQUIRE	""LSLLIB.RNX"""
$!
$! and close the file
$!
$close_file:
$	close o
$	o_is_open = FALSE
$!
$! *****************************************************************************
$! if they asked for everything, are they trying to create a new LSLLIB.RNO?
$!
$	if .not.( how_many.eq.number_of_chapters .and. do_contents -
						 .and. do_index -
						 .and. do_changes ) -
	then goto runoff_files
$!
$	type sys$input:

*** You have asked for all the chapters, the contents, changes and index
*** I guess that you might be trying to create a new master runoff file,
*** which will therefore be reanamed to LSLLIB.RNO and not runoff...

$	inquire/nopunct new_rno_file "*** Is this a new LSLLIB.RNO? "
$	if .not.new_rno_file then goto runoff_files
$	   rename PART_OF_LSLLIB.RNO LSLLIB.RNO
$	   wsb
$	   ws "*** New master LSLLIB.RNO generated"
$	   purge/log LSLLIB.RNO
$	   goto final_exit
$!
$! *****************************************************************************
$! now, do the actual running off
$!
$runoff_files:
$!
$! do we want to do a contents or index?
$!
$	if .not.do_contents .and. .not.do_index then goto actual_files
$!
$! check now whether we actually have an old contents/index to be included
$! - in the current version of DSR, it must have an old one for the .REQUIRE
$!   so if there isn't one, we create a dummy file
$!
$	contents = ""
$	index    = ""
$	if .not.do_contents then goto check_index
$	   contents = "/contents"
$	   if f$search("LSLLIB.RNT").nes."" then goto check_index
$	      create LSLLIB.RNT
Dummy CONTENTS file
$!
$check_index:
$	if .not.do_index then goto end_check_index
$	   index = "/index"
$	   if f$search("LSLLIB.RNX").nes."" then goto end_check_index
$	      create LSLLIB.RNX
Dummy INDEX file
$!
$end_check_index:
$!
$! output a message as to what we are doing
$!
$	line = "Producing "
$	if do_contents then line = line+"contents "
$	if do_contents .and. do_index then line = line+"and "
$	if do_index    then line = line+"index "
$	ws line,"for LSLLIB"
$!
$! produce the .BRN intermediate file
$!
$	   runoff LSLLIB /intermediate/nolog/nooutput
$	   if $status then goto done_BRN
$!
$rno_err:     ws "*** Error running file off"
$	      ws "*** Attempting to runoff whole file, to display the error"
$	      goto actual_files
$!
$! ***************************************************************************
$! so, shall we prepare a contents?
$!
$done_BRN:
$	if .not.do_contents then goto dont_do_contents
$!
$	   runoff LSLLIB /contents/nolog
$	   if .not.$status then goto rno_err
$!
$	   purge  LSLLIB.rnt
$!
$dont_do_contents:
$!
$! ***************************************************************************
$! and similarly, should we prepare an index?
$!
$	if .not.do_index then goto dont_do_index
$!
$	   runoff LSLLIB /index/nolog
$	   if .not.$status then goto rno_err
$!
$	   purge  LSLLIB.rnx
$!
$dont_do_index:
$!
$! ***************************************************************************
$! now, run off our file
$!
$actual_files:
$!
$	if do_whole then goto runoff_whole
$!
$! decide whether we are outputting to the terminal...
$!
$	   where = ""
$	   if to_terminal then where = "/output=tt:"
$!
$	   ws "Running PART_OF_LSLLIB off now"
$	   runoff  PART_OF_LSLLIB'where'/log'backspace'
$!
$	   if to_terminal then goto end_of_runoff
$	      wsb
$	      ws "You may now print PART_OF_LSLLIB.MEM"
$	      wsb
$	      goto end_of_runoff
$!
$runoff_whole:
$	   ws "Running LSLLIB off now"
$	   runoff LSLLIB/log'backspace'
$!
$	   wsb
$	   ws "You may now print LSLLIB.MEM"
$	   wsb
$!
$end_of_runoff:
$!
$! ***************************************************************************
$! come here to tidy up at the end
$!
$end_it:
$!
$! close any open files
$!
$	if o_is_open then close o
$!
$! delete any temporary runoff files
$!
$	if .not.do_whole then delete PART_OF_LSLLIB.RNO;*
$	if .not.do_whole .and. .not.to_terminal then -
			      purge  PART_OF_LSLLIB.MEM
$	if      do_whole then purge  LSLLIB.MEM
$!
$! delete any intermediate files
$!
$ 	if .not.do_contents .and. .not.do_index then goto final_exit
$	   t$rno = f$search("LSLLIB.BRN")
$	   if $status .and. t$rno.nes."" then delete LSLLIB.BRN;*
$!
$final_exit:	exit
