.!** Qume page format
.LEFT MARGIN  0;.RIGHT MARGIN 80;.PAGE SIZE    60,80
.KEEP

.!** title page
.FIGURE 14
.CENTRE ;^&Laser-Scan Ltd.\& 
.FIGURE 2
.CENTRE ;^&Table Monitor\&
.BLANK
.CENTRE ;^&Technical Reference\&
.FIGURE 2
.CENTRE ;^&Issue 1.8 - 16-December-1989\&

.FOOT
.FLAGS SUBSTITUTE
.NOFILL
Copyright (C) $$year Laser-Scan Ltd
Science Park, Milton Road, Cambridge, England CB4 4BH  tel: (0223) 420414

Document "Table Monitor Technical"		Category "TECHNICAL"
Document Issue 1.3	Tony J Ibbs		3-September-1984
     .
     .
     .
Document Issue 1.7	Ron Russell		12-February-1988
Document Issue 1.8	Clarke Brunt		16-December-1989
.FILL
.NOFLAGS SUBSTITUTE
.END FOOT

.!* state the title for the top of each page
.TITLE Table Monitor Technical Reference
.PAGE

.HL 1 ^^^&Introduction\&

.P 0
This is the user documentation for the LSL table monitor system.

.P 0
The table monitor system is formed of 3 parts

.LIST "*"

.LE; STARTMON

.P 0
This is a privileged image which is intended to be run during system startup.
It creates a detached image which performs the actual 
work of the system. This image is either called TABLE__MONITOR or
MONITOR___<terminal_> depending on whether the "named monitor" option
is selected.

.LE; TABLE MONITOR

.P 0
The table monitor itself watches the digitising table in real time,
processes the table strings it receives, and updates the relevant fields
in the global section that it uses to communicate with the library. It
also 'debounces' buttons and handles streamed mode. 

.P 0
Whilst the library is not using the table, the table monitor process 
hibernates, thus not loading the system any more than necessary.

.LE; TABLIB

.P 0
This is the table monitor library. It contains routines for waking up
and putting to sleep the TABLE MONITOR, and routines for interrogating
the current state of the digitising table. 

.END LIST

.PAGE
.HL 1 ^^^&STARTMON - starting up the TABLE MONITOR\&


.HL 2 ^^^&Use\&

.P 0
The STARTMON image is LSL$EXE:STARTMON.EXE and must be installed with the
following privileges 

.LIST "*"

.LE; DETACH#-#to allow it to create the table monitor as a detached
process. The table monitor will thus not stop when the process running
STARTMON exits 

.LE; ALTPRI#-#to allow it to create the table monitor process with a
high priority, so that it can easily deal with digitising table input as
it arrives in streamed mode 

.END LIST

.P 0
STARTMON expects the following arguments

.LIST
.LE; the first is the device name of the digitising table the user is
interested in. This device name is upper-cased and fully logically
translated by STARTMON before use. 

.P 0
The table monitor is created with its input from the digitising table
and its outputs are directed to an error file in the directory LSL$MGMT.

.LE; the second argument is the priority at which the table monitor
should run. For a normal system, this should be given as 16 - the lowest
real-time priority. This means that the table monitor will not be
competing with user processes for processor time. 

.LE; the third argument is the (octal) UIC group within which the table
monitor should run. This is important because the process(es) using
TABLIB must be in the same group as the table monitor itself. This will
normally be 100 

.LE; the fourth argument is optional; entering "YES" or just "Y"  allows
the use of a named table monitor.  The use of this option allows
multiple table monitors to be used. 

.END LIST

.P 0
For example

.TP 12
.LM +10
.NOFILL
.KEEP

$!
$! set up the START image
$!
$ STARTMON := "$LSL$EXE:STARTMON"
$!
$! now start the table monitor on the line TXA3
$! - at priority 16 and in group 100
$!
$ STARTMON  TXA3  16  100 Y
$!
.NOKEEP
.FILL
.LM -10


.P 0
The STARTMON program produces the following messages

.P 10
Creating TABLE__MONITOR  or Creating MONITOR___<terminal_>
.I 10
In UIC [_<group_>,001], at priority _<priority_>
.I 10
Input is _<digitising table_>, output is _<error file_>
.I 10
Waiting
.I 10

.I 10
###.
.I 10
###.
.I 10

.I 10
Created table monitor, process ID _<hex ID number_>

.P 0
The "Waiting" messages occur as the program waits for the table monitor
to initialise and reach its stable hibernating state.

.HL 2 ^^^&Error messages\&

.P 0
The following errors may be produced by STARTMON

.LM +10

.TP 8
.P -10
No table input name found

.P 0
There were no arguments on the STARTMON command line. STARTMON exits -
the table monitor is not created. 

.TP 8
.P -10
No priority found

.P 0
No priority number was given. STARTMON exits - the table monitor is not 
created.

.TP 8
.P -10
Priority out of range (0-31)

.P 0
The priority number was given, but is unacceptable. STARTMON exits - the
table monitor is not created. 

.TP 8
.P -10
No UIC group number found

.P 0
The third argument is missing, or is not octal. STARTMON exits - the
table monitor is not created. 

.TP 8
.P -10
Error upper-casing "_<input device name_>"
.I -10
_<system interpretation of error_>

.P 0
STARTMON upper-cases the input device name before logical name
translating it. This message is given if that fails - this should never
happen. The table monitor is not created. 

.TP 8
.P -10
Error translating _<input device name_>
.I -10
_<system interpretation of error_>

.P 0
Some error occurred in translating the input device name. The table
monitor is not created. 

.TP 8
.P -10
Error creating the table monitor process
.I -10
_<system interpretation of error_>

.P 0
As the message says. The system version of the error should give more
information.

.TP 8
.P -10
Error running the table monitor process
.I -10; Check:-
.LM -5
.LS
.LE; there is an image LSL$EXE:TABMON
.LE; the terminal name was specified correctly
.LE; the logical name LSL$MGMT is set up in the group or system logical
name table 
.LE; you have adequate quotas/privilege
.ELS
.LM +5
.I -10

.P 0
As the message says. The table monitor has been aborted.

.LM -10


.PAGE
.HL 1 ^^^&TABMON - the table monitor\&

.P 0
The table monitor image is LSL$EXE:TABMON.EXE, and the actual process is 
created with name TABLE__MONITOR or MONITOR___<terminal_> by the 
STARTMON program.

.HL 2 ^^^&How the table monitor works\&

.HL 3 ^^^&Communication with TABLIB\&

.P 0
The table monitor communicates with TABLIB by three means

.LIST "*"

.NJ
.LE; Shared global section - LSL$MGMT:LSLTABLE_.SEC or
LSLMGMT:TABLE___<terminal_>_.SEC
.J

.P 0
The actual information about cursor position, and so on, is passed via a 
shared global section. This is a piece of the program's storage which is 
mapped onto an ordinary disk file.

.P 0
Information may be written to, or read from, the section by any process
which has mapped to it. 

.NJ
.LE; Lock management - resource LSL__TABLE__LOCK or T__LOCK___<terminal_>
.J

.P 0
The reading/writing of the global section is managed by use of the lock
manager. A 'resource' called LSL__TABLE__LOCK or T__LOCK__<terminal_>is
used - the processes mapped to the global section use a lock on this
resource to signify that they are reading or writing the section. The
other process cannot then lock the resource for writing or reading
(respectively), so is forced not to access the section. 

.NJ
.LE; Lock management - resource TABLIB__TABLE__NAME or TAB__LOCK___<terminal_>
.J

.P 0
TABLIB gets an exclusive lock on this resource to ensure that another
process cannot also gain control of the table monitor. This lock is also
used to signal from TABMON to TABLIB that an event has happened.

.NJ
.LE; Common event flags - cluster LSL__TABLE__EFC or T__EFC__<terminal_>
.J

.P 0
Various event flags are held in common by the table monitor and TABLIB.
These are the first few event flags in the cluster LSL__TABLE__EFC or
T__EFC__<terminal_>. They are used to tell TABLIB when a new button has
been pressed, when the streamed coordinate has changed, to tell the
table monitor that it should HIBERNATE again, and that the library is
ready for the next button press. 

.NJ
.LE; Decode routine
.J
.
.P0
If the logical name LSL$TABMON__ROUTINE (or
.BR
LSL$TABMON__ROUTINE___<terminal_> if the named version of the table
monitor is being used) has been set up at group or system level before
the table monitor was started with STARTMON, and a shared image with an
UNIVERSAL entry point "DECODE" exists where it points to, then this
shared routine will be used to decode the strings that are received from
the table. Otherwise the table monitor will assume that an ALTEK table
is being used which produces strings in the format $n,xxxxx,yyyyy. 
.P0
The specification for the decoding routine is as follows:
.NOFILL
.P0
	LOGICAL FUNCTION DECODE(BUFF,BUFLEN,BUT,X,Y)
C
	IMPLICIT NONE
C
C TABMON function to decode string from table
C Return TRUE if fail, FALSE if succeed
C
C arguments
	BYTE		BUFF(*)		! (input) string from table
	INTEGER*2	BUFLEN		! (input) number of chars in string
	INTEGER		BUT		! (output) button number
	INTEGER		X		! (output) x coordinate
	INTEGER		Y		! (output) y coordinate
.FILL
.P 0
If the table monitor is to be asked by TABLIB to probe the table (see 
below), then it requires a prompt string to send to the table. By 
default this is the string 'V' - the prompt required by ALTEK tables.
.P 0
If the external decoding routine is being used, then it is possible to
define another entry point in the shared image that allows this prompt 
string to be specified. This entry point is "GET__TABLE__PROMPT", and
the name GET__TABLE__PROMPT must be defined as UNIVERSAL in the shared
image.
.P0
The specification for the routine is as follows:
.NOFILL
.P0
C
	SUBROUTINE GET_TABLE_PROMPT(PBUF,PBUFMAX,PBUFL)
C
	IMPLICIT NONE
C
	INTEGER		PBUFMAX		! maximum length of buffer
	BYTE		PBUF(PBUFMAX)
	INTEGER*4	PBUFL
C
.FILL
.END LIST

.HL 3 ^^^&What the table monitor does\&

.P 0
After waking up, the table monitor assigns the digitising table as input.
It then places a read request on the table, and waits for one of three events 
to happen -

.LIST "*"

.LE
The user may press a button on the puck. This itself causes one of the
following:

.LIST

.LE
If this is a 'new' button press then the transition from no button pressed to
streaming is noted. One of the following actions is taken, to deal with
the _<button_> (the data generated by the button press)

.LIST
.DISPLAY ELEMENTS " ",LL,"."

.LE; If there are no _<button_>s in the table monitor's type-ahead
buffer, and if TABLIB has signalled that it is ready for a new button,
then the _<button_> is written to the global section, and the 'received
a new button' event flag is set. 

.LE; If there are no _<button_>s in the table monitor's type-ahead
buffer, and TABLIB is not yet ready for a new button, then the _<button_>
is added to the buffer.

.LE; If there are _<button_>s in the buffer, and TABLIB is ready for a
new button, then the first _<button_> is popped from the buffer and
written to the global section, the 'received a new button' event flag is
set, and the latest _<button_> is added to the buffer. 

.LE; If there are _<button_>s in the type-ahead buffer, but TABLIB is not
ready, then the latest _<button_> is added to the buffer. 

.END LIST

.LE
Whilst a button is depressed, the digitising table produces a stream of
output, effectively multiple button presses. The table monitor does not
stack this up, but whenever the coordinates of this streamed data
changes, it writes the new X,Y position to the global section, and sets
the 'streamed data changed' event flag. Note that this is regardless of
whether TABLIB has read the last X,Y position. 

.LE
If a gap of more than _<time-out_> (a value which defaults to 1/10
second) intervenes between two (notional) button presses, or if the
button number changes, then a new button is considered to have been
depressed, and the 'new button' sequence at (1) above is entered again. 

.NOTE

The mechanism described above means that TABLIB will receive all
_<button_>s, but will only receive the latest streamed position, since
no type-ahead is performed for streamed output. 

.END NOTE

.END LIST

.LE
TABLIB may set the 'require a new button' flag. The actions are similar
to those for pressing a button: 

.LIST
.DISPLAY ELEMENTS " ",LL,"."

.LE; If there are _<button_>s in the table monitor's type_ahead buffer,
then the first _<button_> is popped from the buffer and written to the
global section. 

.LE; If the table monitor's type-ahead buffer is empty, then no action
is taken. 

.END LIST
.LE
TABLIB may set the 'probe the table' event flag. The actions in this case
are:

.LIST
.DISPLAY ELEMENTS " ",LL,"."

.LE; Clears the 'probe the table' event flag and the 'had an error'
event flag 

.LE; Throws away any outstanding button presses, and purges the buffer

.LE; reads the table with the required prompt, and a time out of 10 
seconds.

.LE; If the read succeeds, then 
.LIST
.LE; the string returned from the table is interpreted and the result
written into the global section 
.LE; the 'wait for table' table event flag is set
.END LIST
If the read fails then
.LIST
.LE; the 'had an error' event flag is set
.LE; an error message is written to the global section
.END LIST

.END LIST

.LE;  Finally, TABLIB may set the 'go back to sleep' event flag, and
this causes the table monitor to relinquish the digitising table (so
that other programs may use it) and to HIBERNATE again. 

.END LIST

.HL 3 ^^^&Errors and error messages\&

.P 0
The table monitor may produce three sorts of errors:

.LIST
.LE
an ABANDON aborts the table monitor process. The message text is written
to the error output file, LSL$MGMT:TABMON.ERR, or
LSL$MGMT:TABLE___<terminal_>.ERR

.LE
system tracebacks (which notionally should never occur) are also written
to the error output file

.LE
run time errors are written to the global section for TABLIB to detect
(using HAD__ERROR and READ__ERROR)
.END LIST

.HL 4 ^^^&ABANDON errors\&

.P 0
These errors are produced during the initial startup of the table
monitor, and are fatal. The error messages are written to
the error output file.

.LM +10

.P -10
Abandoning TABLE__MONITOR - no global section
.I -10
_<system interpretation of error_>

.P 0
The table monitor was unable to map to the global section file
LSLTABLE.SEC, or possibly unable to create it if it didn't already
exist. 

.P -10
Abandoning TABLE__MONITOR - no lock
.I -10
_<system interpretation of error_>

.P 0
The table monitor was unable to establish a null lock on either
LSL__TABLE__LOCK (T__LOCK__<terminal_>) or TABLIB__TABLE__NAME
(TAB__LOCK__<terminal_>)
.P -10
Abandoning TABLE__MONITOR - no common event flag cluster
.I -10
_<system interpretation of error_>

.P 0
The table monitor was unable to associate the common event flag cluster
LSL__TABLE__EFC (T__EFC___<terminal_>)

.LM -10

.HL 4 ^^^&Run-time errors\&

.P 0
These errors are non-fatal, and are written into the global section as a
byte string, a length and an error number. This error number will be
either the system error code (which will give a more precise indication
of what went wrong), or possibly -1 if no error code is applicable. 

.P 0
The TABLIB routine HAD__ERROR is used to check for an error, and
READ__ERROR to read it back. 

.LM +10

.P -10
Bad table string "_<bad string_>"

.P 0
Occasionally the digitising table returns a garbled coordinate string.
If this happens frequently then it should be reported to LSL. This error
message allows the user to detect such an event, and returns the _<bad
string_> that was received. 

.P 0
The error number is returned as -1 in this case.


.P -10
Button push event flag not cleared?

.P 0
When a new button press is detected, and the 'Ready for a new button'
event flag is set, the table monitor checks that the 'New button press'
event flag is unset before writing to the global section. This message
occurs if that event flag was indeed not set. This error should never
occur. The table monitor attempts to continue. 

.P -10
Corrupt type-ahead - invalid length record

.P 0
The table monitor's type-ahead buffer has become corrupt. The buffer is 
reinitialised, and thus any type-ahead is lost.

.P 0
The error number is returned as -1 in this case.

.P -10
Error assigning table input

.P 0
On waking up (after a TABLIB call of INIT__TAB or RESUME__TAB) the table
monitor attempts to assign the digitising table. This message indicates
some failure in that. The table monitor attempts to continue, but a
TABLIB call of CLOSE__TAB is the only sensible action. 

.P -10
Error clearing button request event flag

.P 0
After writing a new button press to the global section, the table
monitor clears the event flag which TABLIB sets to indicate readiness
for another button press. This error indicates something went wrong with
that process. 

.P -10
Error deassigning table input

.P 0
After a TABLIB call of STOP__TAB or CLOSE__TAB, the table monitor
deassigns the digitising table, before HIBERNATEing. This error
indicates some difficulty in that (although there is no way of detecting
it after CLOSE__TAB!). The table monitor will attempt to HIBERNATE,
anyway. 

.P -10
Error during lock

.P 0
The table monitor and TABLIB synchronises access to the global section
via the lock manager. This error is given if something goes wrong in a
call to the lock management system routines. The table monitor will
attempt to continue. (It will not write to the global section if it
cannot gain an exclusive lock before doing so, though). 

.P -10
Error hibernating TABLE__MONITOR

.P 0
This error is given if the table monitor is unable to HIBERNATE after a
TABLIB call of STOP__TAB or CLOSE__TAB. The table monitor will continue,
as if INIT__TAB had been called again. Note that if this error was
provoked by a call of STOP__TAB, then this message MAY be perceived by
the process using TABLIB, since STOP__TAB doesn't unmap from the global
section or event flag cluster. Regardless, it should never happen. 

.P -10
Error in reading from table

.P 0
This indicates that an error occurred in the QIO used to read the
digitising table input. This error should be reported to LSL, but unless
it recurs is unlikely to be serious. One possible cause is that the VAX
is heavily loaded, and the table monitor is getting insufficient time to
be able to 'keep up' with the streamed output from the table. 

.P 0
The table monitor will attempt to continue.

.P -10
Error purging TABLE__MONITOR's working set

.P 0
Before hibernating, the table monitor attempts to shrink its working
set, and this error reflects some problem with that. The table monitor
will attempt to continue (ie to HIBERNATE). 

.P -10
Error setting button push event flag

.P 0
After a new button has been written to the global section, the table
monitor sets an event flag so that TABLIB can detect this. This error
shows that something went wrong with that process. The table monitor
will attempt to continue. 

.P -10
Error submitting lock request

.P 0
This error is similar to the error 'Error during lock' described above,
except that in this case the request for a change in the lock could not
be submitted. The table process will attempt to continue. (It will not
write to the global section if it cannot gain an exclusive lock before
doing so, though). 

.P -10
Error waiting for table input

.P 0
This indicates that an error occurred whilst the table monitor was
waiting for something to happen (either an input from the digitising
table, or an indication from TABLIB that it should HIBERNATE again, or a
request for another button press from TABLIB's READ__PUCK). The table
monitor will attempt to continue. 

.P -10
Type-ahead buffer is full

.P 0
This should not occur, as the type-ahead currently has room for around 20
button presses.

.P -10
Want another button flag not set?

.P 0
This error occurs in the same situation as 'Error clearing button
request event flag', if the event flag was already clear. This should
never happen. 

.P -10
Error submitting position inquiry to table

.P 0
This error occurs when submitting a QIO to probe the table. This error
should not occur, but is not fatal if it does. The table monitor sets
the 'had an error' event flag and continues.

.P -10
Error while inquiring position from table

.P 0
This error occurs when receiving the result of the  QIO used to to probe
the table. This error should not occur, but is not fatal if it does. The
table monitor sets the 'had an error' event flag and continues 

.P -10
Error submitting table lock request

.P 0
The request for a change in the lock TABLIB__TABLE__NAME
(TAB__LOCK___<terminal_>) to inform TABLIB of an event could not
be submitted. The table process will attempt to continue.

.P -10
Error dequeuing table lock

.P 0
Similar to 'Error submitting lock request' above, except the error
occurred while trying to cancel the request.

.P -10
Error during table lock

.P 0
Similar to 'Error submitting lock request' above. The lock request was
submitted successfully, but subsequently gave an error.

.P -10
Unknown error

.P 0
The error generated internally by the table monitor is unknown. This
should never occur - please report it to LSL. Note that there may or may
not be a system error number associated with this error. 

.LM -10

.PAGE
.HL 1 ^^^&TABLIB - the table monitor library\&

.P 0
This section describes the routines available to the user via TABLIB,
the library used by user processes to interact with the table monitor
itself. 

.P 0
TABLIB is to be found in LSL$LIBRARY

.HL 2 ^^^&Restrictions\&

.P 0
The following restrictions are associated with use of the table monitor
and TABLIB 

.LIST "*"

.LE; The user process must be in the same group as the table monitor -
the various communication methods (specifically the common event flags)
will not function across group boundaries. 

.LE; Only one user process may be using TABLIB for any particular table
monitor at any one time - a call of INIT__TAB 'locks' the library, and
CLOSE__TAB frees it again. 

.END LIST

.HL 2 ^^^&The routines\&

.P 0
Note that in the routines, the following conventions are observed:

.LIST "*"
.LE; declarations - the following notations are observed in describing 
variables

.LIST " "

.LE; long### xxx#-#xxx is a longword, a Fortran integer*4
.LE; word### xxx#-#xxx is a word, a Fortran integer*2
.LE; logical xxx#-#xxx is a logical
.LE; byte### xxx#-#xxx is a byte

.END LIST

.LE; also, values passed to the routine are declared as IN, and values 
returned are declared as OUT

.LE; arguments surrounded by square brackets ( [ and ] ) are optional.

.LE; the following standard variables are referred to

.LIST " "

.LE; logical error - OUT - this is a logical return from many of the
routines. It is set TRUE if an error occurred in the routine, FALSE
otherwise. 

.LE; long### ierr# - OUT - this is a further error return. In the
event of an error in a routine, this contains an appropriate system error
code. 

.END LIST

.END LIST

.HL 3 ^^Starting things up, and closing them down

.P 0
In these routines, 'ierr' may return with the special error values -2 or
-4, as well as the more normal system error codes (which are positive).
An error of -2 means that the TABLE__MONITOR was in an unexpected state,
and -4 means that someone else is already using TABLIB, and has thus
locked the system. 

.LM +8

.SKIP
.I -8
error = INIT__TAB( [time_out], ierr, [ast] )

.SKIP
.LM +10
.I -10
long time_out#-#IN#-#the minimum time between two button 'presses' of
the same button for them to be regarded as different presses. This is in
units of hundredths of a second, and defaults to one tenth of a second. 
.I -10
external ast#-#IN#-#a subroutine (declared external) which will be called
whenever a table event (button, stream, or error) occurs. Once called,
the routine will not be called again until one of READ__PUCK, READ__STREAM,
or READ__ERROR is called. This provides an alternative to waiting for
the event flags when awaiting the next event.
.LM -10

.P 0
INIT__TAB is called to initialise the table monitor system, and must be
called before any other TABLIB routines are used. It performs the
following actions 

.LIST
.LE; checks whether the logical name LSL$MONITOR__TABLE has been
defined. If it has, it uses its translation to use the named version
of the table monitor. 
.LE; checks whether the TABLE MONITOR is hibernating. Note that the
routine will attempt to carry on, even if the table monitor process was
not hibernating 
.LE; locks the table monitor system - this prevents any other process
using TABLIB at the same time 
.LE; maps to the shared global section - it can now read and write it
.LE; checks that the table monitor and library share a common interface 
version number - that is that the format of the global section, the 
event flags in use, etc, are from the same version of the interface 
definition - if not, fails with 'ierr'#=#-4
.LE; establishes a null lock on the global section
.LE; associates to the common event flag cluster which is used to signal
button presses, etc
.LE; establishes a write lock on the global section
.LE; writes the time out value into the global section
.LE; unlocks the section again (back to a null lock)
.LE; sets the 'ready for a button' event flag
.LE; if the table monitor was hibernating, then issues a wake request -
this causes it to come out of hibernation. If the table monitor was not
hibernating then it tries to set it hibernating, and then wakes it up as 
above. It attempts this 5 times, then it sets 'ierr'#=#-2 (but note that
this does not cause it to fail) 
.END LIST

.P 0
NOTE that although the routine will succeed if the TABLE MONITOR was not
hibernating, this is still an error condition. Specifically, the various
state flags and the current positions are only cleared when the TABLE
MONITOR is woken up. This situation should only occur if a previous
program using the library exited without calling CLOSE__TAB 

.SKIP
.I -8
error = STOP__TAB( ierr )

.P 0
STOP__TAB is used to put the TABLE MONITOR back to sleep, when the
current process expects to use the library again later. Note that it
does not unmap the global section, disassociate from the common event
flag cluster, or release the locks on the section and the use of the
table monitor system. 

.P 0
It DOES perform the following actions

.LIST
.LE; checks that TABLE MONITOR is not hibernating - if it is, fails with 
'ierr'#=#-2
.LE; sets the event flag which requests TABLE MONITOR to hibernate once again.
.END LIST

.SKIP
.I -8
error = RESUME__TAB( [timeout], ierr )

.SKIP
.LM +10
.I -10
long time_out#-#IN#-#the minimum time between two button 'presses' of
the same button for them to be regarded as different presses. This is in
units of hundredths of a second, and defaults to one tenth of a second. 
.LM -10

.P 0
RESUME__TAB is used to wake the TABLE MONITOR again, after a call of STOP__TAB

.P 0
It performs the following actions

.LIST
.LE; checks that the TABLE MONITOR is hibernating - if not, fails with 
'ierr'#=#-2
.LE; wakes the TABLE MONITOR up again
.END LIST


.SKIP
.I -8
error = CLOSE__TAB( ierr )

.P 0
CLOSE__TAB is the final shutdown routine for TABLIB. To use the library
again after this, a new call to INIT__TAB is required. 

.P 0
It performs the following actions

.LIST
.LE; call STOP__TAB (results may thus be as from STOP__TAB above)
.LE; unmaps from the global section
.LE; disassociates from the common event flag cluster
.LE; releases the (null) lock on the global section
.LE; releases the lock on the table monitor system - other processes are now 
free to use TABLIB
.END LIST 

.LM -8

.HL 3 ^^Wait routines

.P 0
In all of these routines, if the relevant event flag(s) are already set, then 
the routine returns immediately.

.LM +8

.SKIP
.I -8
error = WAIT__TAB( ierr )

.P 0
WAIT__TAB waits for the next event - it waits for the table monitor to
set any one of the event flags to which the library is sensitive - 
.LIST "*"
.LE; a new puck button has been depressed
.LE; the streamed coordinate has changed
.LE; an error has occurred
.END LIST

.SKIP
.I -8
error = WAIT__PUCK( ierr )

.P 0
WAIT__PUCK waits for a new puck button to be depressed, or for an error
to occur. 

.SKIP
.I -8
error = WAIT__STREAM( ierr )

.P 0
WAIT__STREAM waits for the streamed coordinate to change, or for an
error to occur. 

.LM -8

.HL 3 ^^Event flag routines

.P 0
These routines are used to enquire what it was that happened at the table

.P 0
The following return is made from all of the routines

.SKIP
.LM +10
.I -10
logical was__set - OUT - TRUE if the relevant event flag was set, FALSE
if it was not. 
.LM -10

.P 0
Note that in general the routines may be assumed to have succeeded, but
that the 'ierr' argument will always be set to SS$__NORMAL for success,
and a relevant system error code otherwise. 


.LM +8

.SKIP
.I -8
was__set = HAD__PUCK( ierr )

.P 0
HAD__PUCK tests whether the PUCK event flag was set - that is whether a
new button press is waiting to be read. 

.SKIP
.I -8
was__set = HAD__STREAM( ierr )

.P 0
HAD__STREAM tests whether the STREAM event flag was set - that is
whether the streamed coordinate has changed. 

.SKIP
.I -8
was__set = HAD__ERROR( ierr )

.P 0
HAD__ERROR tests whether the ERROR event flag was set - that is whether
a new error message has been signalled by the table monitor. 

.LM -8

.HL 3 ^^Asking for a response

.P 0
This routine is used ask the table monitor to probe the table. It waits
until either the data is available in the global section, or the error 
flag has been set.

.P 0
Before probing the table the table monitor clears the error event flag,
so after a call to ASKTAB if HAD__ERROR is .FALSE., then a call of
READ__TABLE will give the probed coordinates

.LM +8

.SKIP
.I -8
SUBROUTINE ASKTAB


.LM -8

.HL 3 ^^Reading the responses

.P 0
These routines are used to read the relevant data from the global
section. Note that each routine will unset the relevant event flag
(although it will not complain if the flag is not set), and that
repeated calls are allowed. 

.LM +8

.SKIP
.I -8
error = READ__TABLE( x, y, ierr )

.SKIP
.LM +10
.I -10
long x##### - OUT - the X coordinate at which the button was pressed
.I -10
long y##### - OUT - the equivalent Y coordinate
.LM -10

.P 0
READ__TABLE reads the coordinates of the point that was returned
when a call to ASKTAB has been made.


.SKIP
.I -8
error = READ__PUCK( button, x, y, ierr )

.SKIP
.LM +10
.I -10
byte button - OUT - the hexadecimal button number
.I -10
long x##### - OUT - the X coordinate at which the button was pressed
.I -10
long y##### - OUT - the equivalent Y coordinate
.LM -10

.P 0
READ__PUCK reads the next button press - it returns the number of the
button (in the range 0 to F) and the X and Y coordinates of the table
position at which the button was pressed. 

.P 0
Since the table monitor provides its own type-ahead, this is not
necessarily the latest button pressed. 

.SKIP
.I -8
error = READ__STREAM( x, y, ierr )

.SKIP
.LM +10
.I -10
long x - OUT - the X coordinate that the streamed button has reached
.I -10
long y - OUT - the Y coordinate for the same
.LM -10

.P 0
READ__STREAM returns the current position of the streamed button (or the
final position, if no button is currently depressed). 

.SKIP
.I -8
error = READ__ERROR( errbuf, errlen, errnum, ierr )

.SKIP
.LM +10
.I -10
byte errbuf - OUT - the buffer into which the error message will be
written. This should be at least 80 bytes long. 
.I -10
word errlen - OUT - the length of the message placed into 'errbuf'
.I -10
long errnum - OUT - the system code of the error, or -1 if the error is
a bad table string. 
.LM -10

.P 0
READ__ERROR is used to read the error message and system error code of
an error in the table monitor. For a description of the possible error
messages, see the section on the table monitor itself. 

.LM -8


.HL 3 ^^Corner point routines

.LM +8

.SKIP
.I -8
error = WRITE__CPTS( cpts__array, ierr )

.SKIP
.LM +10
.I -10
long cpts__array(8)#-#IN#-#an array of data to be written
.LM -10

.P 0
WRITE__CPTS is used to store the corner points of the map in the global
section, so that they may be used by later programs. The data is assumed to be
an array of eight longwords, presumably integer table coordinates for X,Y at
each corner. This sets a logical in the global section to indicate that the 
field has been set up.

.SKIP
.I -8
error = READ__CPTS( cpts__array, ierr )

.SKIP
.LM +10
.I -10
long cpts__array(8)#-#OUT#-#an array of data to be read
.LM -10

.P 0
READ__CPTS is used to read the corner points of the map from the global
section, as stored by a call of WRITE__CPTS. No check is made that they exist 
before reading them, so garbage can result.

.SKIP
.I -8
was__set = HAD__CPTS( ierr )

.SKIP
.LM +10
.I -10
logical was__set#-#OUT#-#true is returned if WRITE__CPTS has been called for 
this global section.
.LM -10

.P 0
HAD__CPTS is used to check whether corner points have actually been written to 
the global section (although it doesn't check WHEN).

.LM -8

.HL 3 ^^Other routines

.LM +8

.SKIP
.I -8
RETURN__EFN( puck, stream, error, free, last )

.SKIP
.LM +10
.I -10
long puck## - OUT - event flag number used to signal a new button press
.I -10
long stream - OUT - event flag number used to signal that the streamed 
coordinate has changed
.I -10
long error# - OUT - event flag number used to signal a new error message
.I -10
long free## - OUT - the first free event flag number in the common event flag 
cluster containing the above flags
.I -10
long last## - OUT - the last event flag number contained in the common event 
flag cluster
.LM -10

.P 0
RETURN__EFN is used to determine which event flags in the TABLIB cluster are 
set when an event occurs, and which event flags the process using TABLIB may 
safely use within that cluster.

The latter allows 
the process to wait for the logical OR of the table monitor events with events 
which are not related to the table (for instance something typed at a
terminal).

.P 0
The table monitor itself will never use event flags above 'free'-1

.LM -8
