.!** set up Qume page format
.LEFT MARGIN  0
.RIGHT MARGIN 80
.PAGE SIZE    60,80

.!* ensure that .NO FILL also retains blank lines
.KEEP

.!* enable the use of ^*...\* and * as bolding flags
.ENABLE BOLDING;.FLAGS  BOLD

.!* change the way .HL works
.!*	n1=6	lowest  level to have 'run-in' format
.!*	n2=2	highest level to have title in uppercase - ie 1 & 2 will have
.!*	n4=0	lowest  level not to have section number at left
.!*	n6=0	number of blank lines before header
.STYLE HEADERS 6,2,,0,,0

.!* Set the page layout for double sided copying, ie page numbers at bottom
.!* centre and title switching sides according to odd or even page number
.LAYOUT 2,2

.!* ensure that .INDEX entries will be transmitted as they were typed
.XLOWER

.!** title page
.FIGURE 14
.CENTRE ;^*Laser-Scan Ltd.\*
.FIGURE 2
.CENTRE ;^*LSL Software Product Documentation\*
.BLANK
.CENTRE ;^*Issue 0.0 - 07-Jan-1987\*

.FOOT
.FLAGS SUBSTITUTE
.NOFILL
Copyright (C) $$year Laser-Scan Ltd
Science Park, Milton Road, Cambridge, England CB4 4FY  tel: (0223) 420414

Document "LSL Software Product Documentation"		Category "Internal"
Document Issue 0.0	Tim Hartnall			07-Jan-1987
.FILL
.NOFLAGS SUBSTITUTE
.END FOOT

.TITLE LSL Software Product Documentation

.PAGE
.SAVE
.!.REQUIRE "DOCUMENT.RNT"
.RESTORE

.PAGE
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 1 ^^^*INTRODUCTION\*
.LEFT MARGIN +10
.P 0;This document attempts to define a standard for LSL software product
documentation. As no coherent documentation standard previously existed other
than in people's heads, exceptions to rules are standard! 

.P 0;This document describes the following software product documentation
components: 
.LIST
.DISPLAY ELEMENTS "(",RL,")"
.LE
Directories, both those needed as the master copies of LSL standard package 
documentation, and others needed for internal LSL use (for Sales, proposals,
software development and maintenance). 
.LE
A detailed description of the format, purpose and content of a LSL software
product documentation set, to include:
.LIST "o"
.LE ;types of packages of LSL software and associated document sets 
.LE ;content and layout of the product SPS (Software Product Specification),
.LE ;content and layout of the product User Guide
.LE ;content and layout of the product User Reference Manual
.LE ;content and layout of the product on-line help file
.END LIST 

.END LIST

.PAGE
.LEFT MARGIN -10
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 1 ^^^*Aims of the documentation standard\*
.LEFT MARGIN +10
.P 0
The general aims of any software documentation standard are to simplify the
task of understanding and maintaining the structure of the documentation. 
The particular aims of the current LSL conventions include:
.LIST
.DISPLAY ELEMENTS "(",RL,")"

.LE ;Minimising and rationalisation of root level documentation directories and
specific customer documents. 

.LE ; Modularity of software documentation so that only the required components
can be selected simply for installation at a customer site. 

.LE ; Generality of naming so that customer-specific references do not appear
in the required environment for standard software documentation. 

.LE ; Generality of documentation format to enable cheap and rapid "shuffling"
of software package contents between and within packages as market forces
dictate. 

.LE ;Specification of the ^*minimum\* standard of documentation content. Too
much of the historic LSL software documentation is totally inadequate,
containing insufficient information to enable the user to use the software
without further input from already experienced personnel. 

.END LIST

.BLANK 2
.TEST PAGE 10
.LEFT MARGIN -10
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 1 ^*THE SOFTWARE PRODUCT DOCUMENTATION TREE*\
.LEFT MARGIN +10
.P 0;A major aim of the LSL naming conventions for directories is to avoid the
problem of the user becoming lost or confused in a maze of customer specific
directories. The concept of a software product package was introduced to help
simpify software distribution by placing all components of a generally
distributed LSL software product package in the same directory on the public
distribution tree. This tree is referenced via logical name LSL$PUBLIC__ROOT: 

.P 0;An integral part of a software package is its documentation. Documentation
source files are stored in a directory tree structure pointed at by
LSL$DOC__ROOT:, parallel in structure to the software tree LSL$PUBLIC__ROOT:. 
User documentation relating to each LSL software package is contained in
directories of the form: LSL$DOC__ROOT:[packagename...].
Subdirectories should be created for each type of documentation that exists
with the following subdirectory names (examples given for package IMP):
LSL$DOC__ROOT:[IMP.GUIDE], [IMP.REFERENCE], [IMP.SPS], [IMP.ACCEPT],
[IMP.HELP], [IMP.TRAINING].

.P 0;Documentation relating to the internal maintenance of software, sales
proposals, release notes etc., should ^*not\* be put in LSL$DOC__ROOT:. Such
files should be kept in directories of the form LSL$DOC_DISK:[DOC...]. This
information should never be needed by a customer.

.P 0;Documentation sources should never be released to a customer. Documentation
is distributed as paper copy only, preferably from a master set held by
the drawing office.

.PAGE
.LEFT MARGIN -10
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 1 ^^^*DOCUMENTATION CONTENT\*
.LEFT MARGIN +10

.P 0;Traditionally LSL has met customer needs for special purpose "one-off"
software products. These are written in addition to the Company's mainline
packages of supported products which usually have more general distribution to
many different customers. Unfortunately, because "one-off" customer specific
programs have usually been written to a tight budget by different personnel the
documentation for such products lacks a consistent format and content. Indeed,
some customer specific programs are not documented at all. Others are so poorly
documented that the only method of determining the full functionality of the
program is to examine the source code. This is not an acceptable state of
affairs either for LSL or the customer. Natural staff wasteage, staff
forgetfulness and temporary disuse of the program all result in the user being
unable to continue to run the program on the basis of the documentation alone. 

.P 0;Traditionally documentation has been regarded as a bore to write and
maintain. Documentation is nearly always left to do at the end of a programs
development, often when time and budget are exhausted. Without documentation
written to the minimum standards outlined below the program must be considered
to be incomplete. The standards set out below shall apply to all new LSL
software products. These products may be divided into two broad classes:
.LIST 
.LE ;"one-off" customer specific programs, which may lie outside of an existing
customer package and,
.LE ;multi-module software product packages.

.END LIST 
.P 0;The following 2 sections attempt to define the minimum content for
both classes of LSL software product.

.LEFT MARGIN -10
.BLANK 2
.TEST PAGE 10
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^^^*The content of a single, non-package program software document set\*
.LEFT MARGIN +10

.P 0;In the past such software products have often been very badly documented.
The new documentation standard requires that the following documents be
produced even for a customer "jiffy" program. Such "jiffies" have often become
a kingpin in the customers software environment and have subsequently found
their way to other customer sites. 

.LIST
.LE ;^*An SPS (Software Product Specification)\*. Ideally this should be
written ^*before\* the code. It is a wonderful tool for clarifying the mind of
both programmer and the customer who has requested the software. The SPS
represents the formal (and legal) description of the product, what it does,
what it cannot do and what it expects to have available. The Sales and
Marketing Department use an SPS as their brief. It is used as the detailed
technical backup to the relevant glossy sales brochure. No-one would
contemplate posting a sales brochure containing spelling mistakes and
grammatical and factual inaccuracies. However, the product SPS is often rushed
out with little consideration to presentation or potential customer impact. An
SPS should always be written in close liaison with the relevant Salesman and
the package officer from the Software Department. It is likely that because of
the legal implication and the technical nature of an SPS, creation and update
of this document should continue to be the joint responsibility of the Software
package officer and the Sales department. In practice the Software package
officer should actually write the SPS and seek approval of the draft copy from
the Sales department. The Company cannot afford to distribute SPS documents
which are factually inaccurate. 

.P 0;AN SPS should contain the following sections:
.LIST "o"
.LE ;program function, described in general terms
.LE ;description of options and limitations
.LE ;hardware prerequisites
.LE ;growth considerations
.LE ;software prerequisites
.LE ;support level
.LE ;a brief resume of any related LSL software packages which are available
.END LIST

.LE ;A User Reference manual. This is the definitive "how to use it, "what it
does" and "what it cannot do" document. It should contain the following
sections: 
.LIST "o"
.LE ;name
.LE ;function - a brief outline of what the program does,
.LE ;format - describes the format of the command line,
.LE ;prompts - describes the prompts issued,
.LE ;parameters - describes the command line parameters,
.LE ;restrictions - describes any restrictions of use,
.LE ;qualifiers - describes any command qualifiers, and/or:
.LE ;commands - describes the commands of a command driven program,
.LE ;description - detailed description of usage, options and limitations,
how to install or define a symbol for the image,
.LE ;examples - clearly annotated examples of program usage,
.LE ;all messages output by the program, divided into distinct sections within
which the messages are ordered alphabetically on the basis of message mnemonic:
.LIST "o"
.LE ;messages (informational)
.LE ;messages (warning)
.LE ;messages (error)
.LE ;messages (fatal)
.LE ;messages (other)
.LE ;an index
.LE ;a documentation SPR form
.END LIST
.END LIST 
.END LIST 

.LEFT MARGIN -10
.BLANK 2
.TEST PAGE 10
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^^^*The content of a multi-module software package document set\*
.LEFT MARGIN +10

.P 0;An LSL software package embraces a group of programs which offer related
functionality. Often the programs interlock, the output of one supplying the
input data to another.
.LIST
.LE ;An SPS (Software Product Specification) (see above)

.LE ;A User Guide. This is a document containing brief introduction to the
package content, and includes a definition of component program command syntax
and any command qualifiers. It should be ^*readable\*, and be read before
operating the program package. It is an aid memoir for experienced staff and
acts as a resume of the User Reference manual. It is often used for flowline
planning. 

.LE ;A User Reference manual. This is similar to that provided for a
single module software product. It is the definitive "how to use it, "what it
does" and "what it cannot do" document. It can be less "readable" than a User
Guide but it ^*must\* be well indexed to make it easy to find a particular
item. It is the product ^*reference\* document. 

.P 0;It should contain the following sections: 

.LIST "o"
.LE ;a standard header page (see below)
.LE ;a contents page
.LE ;a documentation change record
.LE ;a preface explaining the scope of the document, structure and nomenclature
.LE ;an introduction to the package. To include:
.LIST "o"
.LE ;description of package
.LE ;description of package environment
.LE ;how to define symbols for the images,
.LE ;support level, eg: what to do in the event of total failure
.END LIST

.LE ;and then for each package component program in turn:
.LIST "o"
.LE ;name of program
.LE ;function - a brief outline of what the program does,
.LE ;format - describes the format of the command line,
.LE ;prompts - describes the prompts issued,
.LE ;parameters - describes the command line parameters,
.LE ;restrictions - describes any restrictions of use,
.LE ;qualifiers - describes any command qualifiers, and/or:
.LE ;commands - describes the commands of a command driven program,
.LE ;description - detailed description of usage, options and limitations,
.LE ;examples - clearly annotated examples of program usage,
.LE ;all messages output by the program, divided into distinct sections within
which the messages are ordered alphabetically on the basis of message mnemonic:
.LIST "o"
.LE ;messages (informational)
.LE ;messages (warning)
.LE ;messages (error)
.LE ;messages (fatal)
.LE ;messages (other)
.END LIST
.LE ;appendices describing look-up files etc.
.LE ;a detailed index
.LE ;a documentation SPR form
.END LIST 
.END LIST 
.END LIST 

.LEFT MARGIN -10
.BLANK 2
.TEST PAGE 10
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 1 ^^^*DOCUMENTATION FORMAT\*
.LEFT MARGIN +10
.P 0;The documentation standard lays down for the first time a Company
preferred format for documentation. Only by using this format over time on
new documentation the Company will achieve a uniform documentation set. It
is clearly uneconomic to bring existing documentation up to the new
standard. However, in the event of a major re-write of an existing document
it would be advantageous to budget for the time required too bring the
document to the new standard of content and format.

.P 0;The format chosen is loosely based on DECs VMS version 4 manual set.

.LEFT MARGIN -10
.BLANK 2
.TEST PAGE 10
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^^^*The need for standardisation of the LSL software documentation format\*
.LEFT MARGIN +10

.P 0;The benefits of a standard document content are obvious; the user can
rely on clearly defined classes information always being present in the
document. The immediate benefits of a uniform format for the documentation
are less obvious. However, the following advantages do result:
.LIST 
.LE ;Improvement of Company image. No-one (ourselves included) likes getting
unstructured, out of date, difficult to read, incomplete and badly presented
documentation. Unfortunately, these are the attributes of most of our existing
documentation. Partly as a result of poor on-line help, the software product
document set is the the users key to most of our software products. LSL manuals
are left lying around at all customer sites for all to see. The current lack of
professionalism is thus in our shop window. 

.LE ;With the advent of the Micro-VAX based LSL system sales have become
cheaper and have attracted a new generation of LSL customer. No longer are LSL
system sales the preserve of the governmental mapping agencies with public
money to fund user training. This new generation of customer have minimal
training budgets. The documentation therefore now has to be more complete and
better presented than ever before. It is being used as the primary training
medium. By loosely standardising on DECs manual format the customers staff have
to become familiar with the idiosyncracies of only one document style and
format; not DEC's and the 893 Laser_scan ones! 

.LE ;At a purely practical level, by adopting a unified format for
documentation, the document author is less inclined to leave out information. It
is obvious when an obligatory section of a document is missing (see examples
below). It should become possible to cheaply plagiarise sections from existing
documents to form the basis of new ones, changing only names as appropriate. 

.LE ;The Sales and Marketing Department sometimes perceive the need to
reorganise the content of Laser-Scan standard packages, perhaps as a result of
the development of new programs or the perception of a new market requirement.
Without a unified document format it is a very expensive process to converge a
ragbag of documents from different packages and make then appear to represent a
coherent package. 

.LE ;With the advent of LSLLIB we now have a mechanism to make our programs
look like VMS utilities, with VMS command line decoding and message generation.
We are now writing all new programs to the new LSLLIB standard and so no longer
have to support a style of documentation appropriate to RSX utility behaviour. 
.END LIST


.P 0;The IMP SPS contained in LSL$DOC__ROOT:[IMP.SPS] is an example showing the
basic format for an SPS specifying a multi-program product package. 

.BLANK 2
.TEST PAGE 10
.LEFT MARGIN -10
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^^^*Format of documentation component - SPS\*
.LEFT MARGIN +10

.P 0;The content of an SPS has been defined above. This section defines
the format of the document; layout of the text on the pages. This
is best done by refering the reader to the IMP package SPS,
the document sources for which are kept in LSL$DOC__ROOT:[IMP.SPS].
A printed copy of the document is available in the Drawing Office.
Many customers will be given several SPSs at the same time. It does
little for the Company's professional image if all the SPSs have a different
presentation format. It is recommended that the DSR (Digital Standard RUNOFF)
commands similar to those used in the example SPS are employed in future
documents. 

.LEFT MARGIN -10
.BLANK 2
.TEST PAGE 10
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^^^*Format of documentation component - User Guide\*
.LEFT MARGIN +10

.P 0;A User Guide is not only a document containing a brief introduction to the
package. Sales and Marketing will sometimes send a potential customer a copy of
the User Guide to provide support for an SPS (Software Product Specification).
It will therefore often represent the potential customer contact with "proper"
Laser-Scan documentation. The format adopted for both User Guide and User
Reference documents is loosely based on the format used by Digital in VMS
version 4 user manuals. The standard format of a User Guide is presented in
Appendix A. 

.P 0;This represents the ^*minimum\* standard for User Guide documentation.
None of the sections present should be omitted, the author may add any which
are cosidered necessary. The page layout used for the various sections should
be followed exactly. If in doubt, consider how a DEC manual page would be
formatted under the circumstanaces. 

.P 0;An example User Guide is that produced for the IMP package, the
document sources for which are kept in LSL$DOC__ROOT:[IMP.GUIDE]. A printed copy
of the document is available in the Drawing Office. 


.BLANK 2
.TEST PAGE 8
.LEFT MARGIN -10
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^^^*Format of documentation component - User Reference Manual\*
.LEFT MARGIN +10
.P 0;The user reference manual is by far the biggest document relating to a
Software product. The reader is referred to the IMP User Reference Manual as
the pattern for a User Reference Manual for a multi-program software product
package. 

.P 0;A typical single module User Reference manual is presented in Appendix B.
As such a program has no User Guide, this represents the ^*minimum\* standard
for User Reference Documentation. None of the defined sections should be
omitted, the author may add any which are necessary due to the specialised
nature of the program. The page layout used for the various sections should be
followed exactly. None of the sections present should be omitted. The page
layout used for the various sections should be followed exactly. If in doubt,
consider how a DEC manual page would be formatted under the circumstanaces.

.P 0;Multi-module user reference manuals consist of component module 
documents having two distinct formats:
.LIST "o"
.LE ;The first format is for programs which take all command input from the DCL
command line, for example IMERGE. See LSL$DOC__ROOT:[IMP.REFERENCE]IMERGE.RNO.
.LE ;The second format is for programs which are command driven, for example
IPATCH or ISELAC. See LSL$DOC__ROOT:[IMP.REFERENCE]ISELAC.RNO.

.END LIST

.P 0;A typical structure for a whole multi-module User Reference Manual is
provided by LSL$DOC__ROOT:[IMP.REFERENCE].


.BLANK 2
.TEST PAGE 8
.LEFT MARGIN -10
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^^^*Format of documentation component - On-line help file\*
.LEFT MARGIN +10

.P 0;Most LSL software packages are issued with on-line help accessed via the
VMS HELP utility, or LBR$OUTPUT__HELP system service. It is important
that LSL online help shares the same format and structure as VMS help.

.P 0;See LSL$DOC__ROOT:[IMP.HELP] for an example of on-line help files and a
command file used to create the help library. 

.P 0;Help libraries are as much a part of a software package as the
executable images themselves. Like executable images, they should only be
placed on the public distribution tree (LSL$PUBLIC__ROOT:) via the PUBLISH
utility. 


.BLANK 2
.TEST PAGE 10
.LEFT MARGIN -10
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 1 ^^^*Documentation maintenance\*
.LEFT MARGIN +10
.P 0;Documentation maintenance is as important as program development. If
the documentation does not contain instructions on how to use a new program
option then the new program option might as well not exist.

.P 0;By using looseleaf binding single chapter (or even page) updates may
be distributed for customer insertion into an existing spine. All
updates should be formally released together with change notes (see below). 
Each release of a document should be given a version number to identify
the version of the documentation. The release information on the title
page should be accurate. The date in the title page window shold be
the date of the version release.

.P 0;Version identification should follow the pattern:
.P 10;Version n.m
.P 0;Where:
.P 10;n is the major (complete document) release number, and
.P 10;m is used to indicate a minor release.

.P 0;No more than 10 minor releases of the same version should occur before a
complete re-release of the documentation occurs. When a major release occurs
the release history on the title page should be deleted and a single line
specified to start the new version "n.0".

.P 0;Draft and pre-public releases of customer documentation should begin at
version 0.0.  The first public release should be version 1.0. 

.P 0;Customers should be encouraged to use the version identification number
in all correspondence.

.BLANK 2
.TEST PAGE 10
.LEFT MARGIN -10
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^^^*The Documentation Change Record\*
.LEFT MARGIN +10
.P 0;Though time, software modifications necessitate the update of
documentation. It is courteous to draw the users attention to such changes in a
re-released document. Change bars located in a margin are a common mechanism
used for high-lighting changed text. Unfortunately DSR boes not offer
particularly flexible change bar control. An alternative to using change bars
is to provide a resume of all changes in a document change record at the start
of the document, immediately following the preface. 

.P 0;This would take the typical form:

.LEFT MARGIN -10
.PAGE
.TITLE EXAMPLE DOCUMENT PAGE
.SUBTITLE Change record
.PAGE
^*--------------------------------------------------------------------------------\*
.HL 1 ^^^*MISS__PIGGY User_ Guide_ documentation_ change_ record\*
.BLANK
^*--------------------------------------------------------------------------------\*
.P 0;^*Version 1.0    Tim Hartnall                               05-May-1986\*
.LEFT MARGIN +10
.P 0; First public issue of MISS__PIGGY User Guide.
.LEFT MARGIN -10
^*--------------------------------------------------------------------------------\*
.P 0;^*Version 1.0    Arthur Daley                               05-January-1987\*
.P 0;.LEFT MARGIN +10
.P 0;/EXAMPLE qualifier added to MISS__PIGGY command. New messages documented.
Worked examples revised to show use of new command qualifier. Index enlarged.
.LEFT MARGIN -10
^*--------------------------------------------------------------------------------\*

.TITLE LSL Software Product Documentation
.NO SUBTITLE
.PAGE 
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 1 ^^^*Documentation distribution\*
.LEFT MARGIN +10

.P 0;The old mechanism of documentation distribution suffered from a number of
pitfalls. The new documentation distribution standard is designed to overcome 
these. 

.P 0;The new documentation distribution standard provides:
.LIST 

.LE ;A mechanism for the Drawing Office to check that the paper copy of
the documentation is the same as that held on magnetic disk.

.LE ;A mechanism for the Drawing office to runoff any document written to the
new documentation standards, (including title and update pages, contents,
appendix and index) without recourse to Software.

.LE ;Provision of ring binding for all software product package documentation.

.LE ;Limitation of the distribution of binders, and multiple copies of
documentation to avoid confusion between versions of documents at customer
sites. 

.LE ;Provision of runoff procedures for component parts of a large document (in
a package document for example the component program documents). This saves
running off the entire document because a few pages have changed.

.LE ;Drawing Office to store documentation in the same modular form.

.LE ;No software product may be issued without accompanying documentation
without authorisation by the product package officer. 
.END LIST 

.P 0;These measures have been made necessary because:

.LIST 
.LE ;Traditionally documentation received minimal emphasis as a component of
the software product, inadequate time was usually assigned to write or revise
documentation at the end of a programming assignment. As a result the
documentation was often not done or not done properly. New code was released
into the field without up to date documentation.

.LE ;The documentation held by the Drawing Office in paper form did not always
(in fact often!) reflect the status of the documentation sources on disk.
Hence out of date documentation would be distributed even though more up to date
information existed, because there was no mechanism to ensure that DO could
check the status of the disk copy.

.LE ;Because of the Company's documentation binding policy it was not possible
to revise part of large document by substituting pages in existing
documentation. A whole new document had to be issued. Ring binding used in
conjunction with an updates page, allows more frequent release of updates
to large (and expensive) documents.

.LE ;Multiple copies of documentation were distributed to single customer
sites. Again due to the Company's document binding policy the release of
complete, bound, new documents led to confusion at the customer site when
many different versions of the same manual obtained. By only releasing a single
copy (or updated parts) of documentation, without a binder, the customer is
obliged to replace the pages of the existing document with the new ones at the
earliest possible date. Multiple copies of the documentation should be made
available only at the customers request and expense. 

.END LIST 

.LM -10
.PAGE
.APPENDIX
.CENTRE ; ^^^*User Guide Format\*
.SEND TOC User Guide Format
.PAGE
^*--------------------------------------------------------------------------------\*
.BREAK;^*User guide format\*
.LEFT MARGIN +10
.P 0;The following example shows the DSR source used to create the IMP User
Guide. All the file included with DSR ".REQUIRE" commands are in 
LSL$DOC__ROOT:[IMP.GUIDE]. These shuld be used as format patterns for other
documents. Items like the PREFACE coild be "stolen" for other documents with
little modification. LSL$DOC__ROOT:[IMP.GUIDE] also conatins a command file to
generate the documentaion (including contents and index sections) which
could be similarly "stolen" for use elsewhere.

.LEFT MARGIN -10
.LITERAL
.!** set up Qume page format
.LEFT MARGIN  0
.RIGHT MARGIN 80
.PAGE SIZE    60,80

.!* ensure that .NO FILL also retains blank lines
.KEEP

.!* enable the use of ^*...\* and * as bolding flags
.ENABLE BOLDING;.FLAGS  BOLD

.!* change the way .HL works
.!*	n1=6	lowest  level to have 'run-in' format
.!*	n2=2	highest level to have title in uppercase - ie 1 & 2 will have
.!*	n4=0	lowest  level not to have section number at left
.!*	n6=0	number of blank lines before header
.STYLE HEADERS 6,2,,0,,0

.!* Set the page layout for double sided copying, ie page numbers at bottom
.!* centre and title switching sides according to odd or even page number
.LAYOUT 2,2

.!* ensure that .INDEX entries will be transmitted as they were typed
.XLOWER

.!* and get the actual title page
.REQUIRE	"TITLE_PAGE.RNO"

.!* and the title to go at the top of each page
.TITLE IMP User Guide

.!* and ensure that we start on a new page, if necessary
.PAGE

.SAVE
.NO NUMBER
.SUBTITLE Contents
.REQUIRE	"IMP_USER_GUIDE.RNT"
.RESTORE
.PAGE

.!* change our page numbering practices
.!* use lower-case Roman numbers, and start at 1
.DISPLAY NUMBER RL
.NUMBER PAGE 1
.SUBTITLE Changes
.REQUIRE	"CHANGES.RNO"
.PAGE

.!* restore normal numbering practices
.!* use decimal numbers, and start again at 1
.DISPLAY NUMBER RL
.NUMBER PAGE 1
.SUBTITLE Preface
.REQUIRE "PREFACE.RNO"
.PAGE

.DISPLAY NUMBER D
.NUMBER PAGE 1
.PAGE

.!
.!* we include the chapters, one by one
.!
.SUBTITLE Introduction
.REQUIRE        "INTRODUCTION.RNO"
.NOHEADERS
.NOSUBTITLE
.NF
.B
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^*MODULE####ICHECK\*
.INDEX ICHECK
.INDEX IMP> modules> ICHECK
.NO FILL;.NO JUSTIFY
^*--------------------------------------------------------------------------------\*
.FILL
^*FUNCTION\*
.LEFT MARGIN +10;.JUSTIFY
.INDEX IMP> module functions> geometry checking
.P 0;ICHECK is an IFF geometry checking utility. It scans the coordinates of an 
IFF file and reports on the following potential errors within features or 
between features:

.LIST "o"
.LE ;Loops within features, for example where the digitiser has looped back
upon itself, 

.LE ;Crossing features or touching features,

.LE ;Open features which do not intersect with a user defined sheet neatline 
and which start, or end, within a border zone offset from the neatline.

.LE ;Feature characteristics at variance with the graphical type of that
feature. The graphical types are read from a FRT (Feature Representation Table)
file.

.END LIST 
.INDEX LITES2
An option to output a LITES2 command file is provided.

.P 0;For a complete description of the ICHECK utility, including information
about the ICHECK command and its qualifiers, and an explanation of ICHECK
messages, see the IMP Reference Manual. 

.BLANK;.LEFT MARGIN -10;.NO FILL
^*--------------------------------------------------------------------------------\*
^*FORMAT\*
.LEFT MARGIN +10
$ ICHECK file-spec

^*Command qualifiers                         Defaults\*

/BASE__FC=integer                           See IMP Reference
                                           Manual.
/[NO]CROSS                                 /CROSS
/[NO]DUPLICATES[='EXACT' or 'NINT']        No duplicate point checks.
/[NO]LITES2=file-spec                      No LITES2 file output.
.INDEX LITES2
/[NO]LOG                                   /NOLOG
/[NO]OUTPUT=file-spec                      /OUTPUT=SYS$OUTPUT:
/FRT=file-spec                             No checks against
                                           graphical types.
.INDEX FRT (Feature Representation Table)
/[NO]MARKERS=file-spec                     No marker file output.
/[NO]NEATLINE                              No neatline checking.
/[NO]PRINTER                               /NOPRINTER
/[NO]TOUCH[=real]                          No touch check.

^*Neatline definition qualifiers\*

/BORDER                                    No border.
/EAST                                      None.
/NORTH                                     None.
/SOUTH                                     None.
/WEST                                      None.
.!
.!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
.!
.LEFT MARGIN -10;.PAGE;.NO FILL;
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^*MODULE####IDIFFERENCE\*
.INDEX IMP> module functions> IFF comparison
.INDEX IDIFFERENCE
.INDEX IMP> modules> IDIFFERENCE
                                        .
                                        .
                                        .
                                        .
                <<<<<< further module descriptions follow >>>>>>
                                        .
                                        .
                                        .
                                        .

.!*
.!* and ensure that we have an index at the end
.!*
.Index
.PAGE
.SEND TOC      INDEX
.SUBTITLE Index
.REQUIRE	"IMP_USER_GUIDE.RNX"
.!*
.!* and finish with documentation SPR forms!!
.!*
.NO NUMBER
.NO HEADERS
.PAGE
.REQUIRE	"SPR_FORM.RNO"
.PAGE
.REQUIRE	"SPR_FORM.RNO"
.PAGE
.REQUIRE	"SPR_FORM.RNO"
.PAGE
.END LITERAL

.PAGE
.APPENDIX
.CENTRE ; ^^^*User Reference Manual Formats\*
.SEND TOC User Reference Manual Formats
.PAGE
^*--------------------------------------------------------------------------------\*
.BREAK;^^^*User Reference Manual Format\*
.LM +10
.P 0;An example of the standard format for a User Reference Manual is
presented below.

.TP 10
.P 0;None of the sections present should be omitted. The page layout used for
the various sections should be followed exactly. If in doubt, consider how a
DEC manual page would be formatted under the circumstanaces. 
.LM -10
.BLANK
^*--------------------------------------------------------------------------------\*
.PAGE
.REQUIRE "LSL$DOCDISK:[DOC.LKB]I2MOSS.RNO"
