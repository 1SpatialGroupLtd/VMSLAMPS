.!* This is an example of some of the stuff that you might want in your
.!* introduction chapter. Add bits you need, remove those you don't.
.!* Replace all occurrences of <PACKAGE> with the appropriate text.


.PAGE
^*--------------------------------------------------------------------------------\*
.HL 2 ^^^*INTRODUCTION\*
^*--------------------------------------------------------------------------------\*
.LM +10

.P 0
<PACKAGE> is the Laser-Scan ...


.BLANK
.TP 10
.LM -10
^*--------------------------------------------------------------------------------\*
.HL 2 ^^^*<PACKAGE>#-#FEATURES\*
.LM +10



.BLANK
.TP 10
.LM -10
^*--------------------------------------------------------------------------------\*
.HL 2 ^^^*<PACKAGE> and IFF\*

.LM +10

.P 0
Within the VAX/VMS system IFF files can be treated as any other file type for
file management purposes. To enable the user to distinguish an IFF file from a
file of another type IFF files have by default the file extension '.IFF'. To
provide great flexibility in the production environment IFF files are
referenced by all the <PACKAGE> modules using logical name LSL$IF:. (For an
explanation of logical names see the VAX/VMS document set). Logical name
LSL$IF: is assigned to a device and directory specification either using the
VMS DEFINE command or the Laser-Scan SI utility. 


.BLANK
.TP 10
.LM -10
^*--------------------------------------------------------------------------------\*
.HL 2  ^^^*<PACKAGE> and DCL symbol $STATUS\*

.LM +10

.P 0
Like VMS utilities, all <PACKAGE> modules generate VMS format messages and set
VMS DCL symbol $STATUS on image exit. This is a valuable feature as a
non-interactive process can test the success of a preceding <PACKAGE> module
before proceeding. $STATUS will always be set to a VMS 32#bit condition code.
Successful program execution will result in $STATUS being set to SS$__NORMAL.
If an error occurred during <PACKAGE> processing, SS$__ABORT of varying
severities, or a VMS System or CLI (Command Line Interpreter) condition code
will be used. The user may simply test $STATUS for TRUE or FALSE within a DCL
command procedure. If $STATUS is TRUE then processing was successful. If it is
FALSE, an error occurred during processing. For a detailed description of the
uses of $STATUS see the VAX VMS document set.


.BLANK
.TP 10
.LM -10
^*--------------------------------------------------------------------------------\*
.HL 2 ^^^*Getting started with <PACKAGE>\*

.LM +10

.P 0;Once logged in the user must give two commands to initialise the <PACKAGE>
package. Before the <PACKAG> package can be used DCL symbols and logical names
must be assigned to enable the user to invoke the modules. This is dome using a
command procedure <PACKAGE>INI.COM which is supplied as part of the <PACKAGE>
package. <PACKAGE>INI itself will be defined as a DCL symbol at your site and
should be invoked thus: (see the PREFACE for explanation of presentation
conventions) 

.LM +6
.BLANK
.NO FILL
$ ^*<PACKAGE>INI_<CR_>\*
.FILL
.LM -6

.P 0
The <PACKAGE>INI command invokes a command procedure which defines a DCL symbol
(the module name) for each of the <PACKAGE> modules. After using <PACKAGE>INI
the user need only type the symbol name to activate the required module. 

.P 0
As an alternative to explicitly typing the <PACKAGE>INI command each time the
user wishes to use the <PACKAGE> package, the <PACKAGE>INI command may be
placed in the users login file, or in the site dependent default login file. 

.INDEX SI command
.INDEX LSL$IF:

.P 0
The second command which must be given before using the <PACKAGE> package is
the SI command. The SI command assigns the logical name LSL$IF: (or IF: for
short) to the device-directory specification which contains the IFF file(s)
that are to be manipulated. For example: 

.P 10
$ ^*SI DUA3:[BUREAU.TRIALS.DIGITISING]\* 

.P 0
This will assign logical name LSL$IF: to the device and directory specification
DUA3:[BUREAU.TRIALS.DIGITISING] 



.BLANK
.TP 10
.LM -10
^*--------------------------------------------------------------------------------\*
.HL 2 ^^^*Opening IFF file with <PACKAGE>\*

.LM +10

.P 0
All <PACKAGE> modules open IFF files using the Laser-Scan LSLLIB library of
service routines. This results in a standard set of four messages for
successful IFF file opening and three primary messages for IFF opening errors: 

.BLANK
.P 0;^*Messages to indicate that the IFF file was successfully opened:\*
.LM +4
.BLANK
.P -4;IFFOPENED, 'file-spec' opened for read
.P 0;^*Explanation:\* The indicated file was successfully opened, readonly,
for input.
.P 0;^*User action:\* None, other than to check that the correct file has been
opened. 

.P -4;IFFOPENED, 'file-spec' opened for write
.P 0;^*Explanation:\* The indicated file was successfully created and opened 
for output.
.P 0;^*User action:\* None, other than to check that the correct file has been
opened. 

.P -4;IFFOPENED, 'file-spec' opened for update
.P 0;^*Explanation:\* The indicated file was successfully opened 
for in-situ modification or extension. Beware that the original status of the
file will now be irrevocably changed.
.P ;^*User action:\* None, other than to check that the correct file has been
opened.

.LM -4
.P 0;^^^*Messages to indicate that the IFF file could not be opened:\*
.P 0
All the messages in this category will be supported by supplementary Laser-Scan
and VMS System or RMS (Record Management Services) messages. These
supplementary messages will normally convey all the information required to
determine ^*why\* the file could not be opened. It is recommended that the user
becomes familiar with the location of the VMS error message explanations within
the VMS documentation set. 

.LM +4
.P -4;IFFOPEN, IFF error opening file 'file-spec' for read
.P 0;^*Explanation:\* An error occurred while attempting to open the
specified file for readonly input.
.P 0;^*User action:\* The supplementary Laser-Scan, VMS system or RMS messages
which are output in support of this message will facilitate diagnosis. 
One common mistake is to forget to assign the logical name LSL$IF: to the
directory containing the desired file. If the RMS message "file not found" is
issued check the assignment of LSL$IF:. 
.P 0;Possible causes for the error are:
.LIST "o"
.LE ;the file-spec was mis-typed,
.LE ;logical name LSL$IF: was incorrectly assigned, 
.LE ;the file does not exist.
.END LIST

.P -4;IFFCREATE, IFF error creating file 'file-spec'
.P 0;^*Explanation:\* An error occurred while attempting to create and open the
specified file for output.
.P 0;^*User action:\* The supplementary Laser-Scan, VMS system or RMS messages
which are output in support of this message will facilitate diagnosis. 
.P 0;Possible causes for the error are:
.LIST "o"
.LE ;the file-spec was invalid
.LE ;logical name LSL$IF: was incorrectly assigned to a non-existent
device or directory
.LE ;the device, directory or file is write protected
.LE ;the device is full
.END LIST

.P -4;IFFMODIFY, IFF error opening file 'file-spec' for update
.P 0;^*Explanation:\* An error occurred while attempting to open the
specified file for modification.
.P 0;^*User action:\* The supplementary Laser-Scan, VMS system or RMS messages
which are output in support of this message will facilitate diagnosis. 
.P 0;Possible causes for the error are:
.LIST "o"
.LE ;the file-spec was mis-typed
.LE ;logical name LSL$IF: was incorrectly assigned
.LE ;the file does not exist
.LE ;the device, directory or file is write protected
.LE ;the device is full
.END LIST


.TP 10
.LM 0
^*--------------------------------------------------------------------------------\*
.HL 2 ^^^*How to specify <PACKAGE> command qualifier arguments\*

.LM +10

.P 0
<PACKAGE> utilities use the VMS Command Line Interpreter (CLI) to get and parse
the program command line. <PACKAGE> utilities thus offer a VMS emulating user
interface. As many <PACKAGE> utilities require floating point arguments to
command, qualifiers Laser-Scan have developed an enhanced CLI based command
line decoding mechanism. This enables the interpretation of numbers as either
"real" or "integer". 

.P 0;The CLI allows the user to specify single and lists of integer qualifier
arguments. If a list of arguments is specified, each argument must be separated
by a comma and the whole list enclosed within parentheses, for example: 

.P 0;Single argument:
.P 8;$ ^*EXAMPLE/QUALIFIER=7_<CR_>\*
.LM +8
.P 0;Where "EXAMPLE" is the command and /QUALIFIER is a qualifier to that
command. There is one qualifier argument #-##7
.LM -8
.P 0;Argument list:
.P 8;$ ^*EXAMPLE/QUALIFIER=(2,5,8,9,10,11,12,13,14)_<CR_>\*
.LM +8
.P 0;Where "EXAMPLE" is the command and /QUALIFIER is a qualifier to that
command.  There are 9 qualifier arguments within the argument list.
.LM -8
.HL 3 ^^^*Integer value ranges\*
.P 0;While developing the floating point command line data type (see Preface)
it was recognised that there is a need for numeric range decoding within a VMS
emulating command line. Argument ranges are specified with the syntax: 

.P 8;^*n:m\*
.LM +8
.P 0;Where n is the lower limit of the range and m is the upper limit of the
range (inclusive).
.LM -8
.P 0;Such ranges are expanded in full. A maximum of 1024 arguments can be
specified to any one command qualifier. 

.P 0;If we take our example argument list used above, i.e:
.P 8;$ ^*EXAMPLE/QUALIFIER=(2,5,8,9,10,11,12,13,14)_<CR_>\*

.P 0;and now use the Laser-Scan argument range decoding mechanism:

.P 8;$ ^*EXAMPLE/QUALIFIER=(2,5,8:14)_<CR_>\*

.P 0;we see that a more compact command line results but yields the same
arguments. This is clearly an advantage in an IFF map processing environment
where a single file could contain hundreds of attributes which the user may
wish to reference via command line arguments.
.P 0;Other examples are:

.P 8;$ ^*EXAMPLE/QUALIFIER=2:9_<CR_>\*
.LM +8
.P 0;This yields 8 integer arguments: 2, 3, 4, 5, 6, 7, 8, and 9
.BLANK
.P 0;$ ^*EXAMPLE/QUALIFIER=:8_<CR_>\*
.P 0;This yields 9 integer arguments: 0, 1, 2, 3, 4, 5, 6, 7, and 8

.LM -8
.P 0;If when ranges are decoded, a qualifier has more than 1024 arguments
the Laser-Scan LSLLIB library issues the error message:

.P 3;%LSLLIB-E-RESPARSOVF, result of parse overflowed buffer

.P 0;and program execution is terminated.

.BLANK
.HL 3 ^^^*Floating point value ranges\*
.P 0;Floating point value ranges are decoded in a different manner to
integer value ranges. Instead of expanding the range to yield all its component
integer values the command decoder merely leaves the range as a lower limit and
an upper limit. Processing then takes account of any possible value lying
between these limits (inclusive).

.P 0;For example:
.LM +8
.P 0;$ ^*ISELECT/HEIGHT=(23.5:110.2)_<CR_>\*
.P 0;Select all features having a height which lies within the range
23.5 to 110.2 inclusive.
.LM 0
^*--------------------------------------------------------------------------------\*
