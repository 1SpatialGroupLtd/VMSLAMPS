.!* enable the use of ^*...\* and * as bolding flags
.ENABLE BOLDING;.FLAGS BOLD
.KEEP
.CHAPTER ^^^*HP-GL plotters\*
.INDEX FPPHP
.INDEX FPPHPGL2
.INDEX HP-GL
.INDEX HP-GL/2

HP-GL is the Hewlett-Packard Graphics Language. It is understood by plotters 
manufactured by Hewlett-Packard (HP), and by plotters produced by various
other manufacturers which claim compatibility with the HP-GL language.
.P 0
There have been two versions of HP-GL. The original was designed for handling 
only pen plotters. The later version (HP-GL/2) is a superset of HP-GL, but
has extensions suitable for handling some raster plotters.

.P 0
The FPP image for HP-GL plotters is FPPHP.EXE. 
.P 0
The FPP image for HP-GL/2 plotters is FPPHPGL2.EXE. Support for HP-GL/2 in general
is still under development by Laser-Scan. This interim version has been
produced as a testbed to drive the NOVAjet A0 colour inkjet. It has not been
tested on other HP-GL/2 plotters. 

.HL 1 ^^^*Mode of operation\*
The programs produce HP-GL output on logical name LSL$HP.
The is usually assigned directly to the plotter serial line, but
may under some circumstances be assigned to a file for transmission
to the plotter later. For example
.P 0
.NOFILL

$ Define LSL$HP TXA1:
or
$ Define LSL$HP HP.DAT
.FILL
.P 0
Both programs can attempt to read back the paper size from the plotter.
They do this by sending an 'OH;' command and then attempting to
read back the reply on logical name LSL$HPINPUT. If you are sending
output direct to the plotter, and the plotter supports the 'OH;' command,
then assign LSL$HPINPUT to be the plotter line (the same as LSL$HP). For
example
.P 0
.NOFILL

$ Define LSL$HPINPUT LSL$HP
.FILL
.P 0
The HP version requires this input. Therefore, if the plotter does not
support the 'OH;' command, or you are sending output to a file, then
LSL$HPINPUT must be assigned to a file containing a single line with the
numbers that 'OH;' would have output. For example
.NOFILL
.KEEP

$Define LSL$HPINPUT HPSIZE.DAT

where HPSIZE.DAT contains the single line

0 0 10900 7650

.NOKEEP
.FILL
.P 0
The 4 numbers are xmin ymin xmax ymax in plotter units which are
assumed to be 0.025 mm.
.P 0
The HP-GL/2 version does not require the OH; information. It will attempt
to read back the size from an online plotter (i.e_. both LSL$HP and
LSL$HPINPUT are a terminal line) but if plotting is not online, then
there is no need to define LSL$HPINPUT at all. Note that it is not
usually necessary to set the paper size correctly. It is only needed
if either auto-scaling, or FPP/LITES2 commands are used to locate the
plot somewhere other than the bottom left of the paper, are used.
See below for the HP-GL/2 method of determining the size.
.P 0
The plotter serial line must be set to the correct baud rate for the
plotter, but otherwise the default characteristics are usually satisfactory.

.HL 1 ^^^*HP-GL/2 Differences\*
.P 0
The data format used by the HP-GL/2 driver includes 8-bit character values
in the range 191-254, in addition to printable characters in the range
32-126. It must be sent down a communication channel capable of
transmitting these values unchanged.
.P 0
The colours used for the picture are defined using a text file on logical name
LSL$HP__COLOUR (if this is set up). See Appendix A for the format of this
file. Colours 0 to 255 may be defined.
.P 0
The HP-GL/2 driver is able to draw raster images when used via LITES2.
These image are drawn as lines using a pen with width equal to the
pixel size. Logical name LSL$HP__BACKGROUND may be defined as 0 or 1.
The default is 1, which means to draw all colours in images, including the
background colour 0. If the logical name is defined as 0, then only
non-zero pixels are drawn.
.P 0
There is no control available for whether graphics are opaque or
transparent. As far as is known, on raster plotters all drawing is opaque,
so anything drawn will obscure things drawn previously. Obviously, on
a pen plotter, marks already made will remain.
.P 0
LSL$HP__NOMLW may be defined to be a real number - the nominal line width
in millimetres. The default is 0.1. The nominal line width is used for
any features whose line width is specified as 0 in the FRT and also as the
width and separation of the hatch lines used to render any solid filled area
which does not use hardware fill.
.P 0
LSL$HP__MAXPATH may be defined to be an integer. Solid filled areas with more
points than this limit will be rendered by close hatch lines (see
LSL$HP__NOMLW) rather than using hardware filling. 
.P 0
The maximum number of points allowed in a filled area is 8192 by default, but
may be altered by defining logical name LSL$FILL__POINTSMAX to be the desired
number. Similarly, the maximum number of times which a hatch line (for hatched
fill) may cut the polygon is 100 by default, but may be altered by defining
logical name LSL$FILL__CUTSMAX to be the desired number - exceeding this limit
results in the message 'FILL__SIDE - Too many intersections found - ignored'. 
.P 0
LSL$HP__HW__FILL may be defined to be 0 or 1. By default, solid filled areas
with less than LSL$HP__MAXPATH points will use hardware fill, while those
with more will use close hatching. If the logical name is defined as 0, then
all filling will use close hatching (thickness and spacing equal to
LSL$HP__NOMLW).
.P 0
Logical name LSL$HP__SIZE may be set to to point to a file containing
a single line with 4 real numbers defining the x size (metres), y size
(metres), x number of pixels, and y number of pixels, thus to give the
same effect as the defaults, the file would have the single line:
.NOFILL
.BL
1.189 0.841 1448 1024
.BL
.FILL
Although all four numbers must be given, either pair may be set to
zero, in which case they are ignored.
The pixel numbers are not relevant to FPP, but control the number of
pixels assumed to cover the area for LITES2 raster images. LITES2 is
able to set the number of pixels and their size itself, but will never
draw more than the specified number of pixels across a plot. The number
may be altered within LITES2 using the PLOT PIXELS command, so there is
little need to bother with the pixel numbers in the LSL$HP__SIZE file.
.P 0
The maximum number of pixels which may be specified in either direction
for LITES2 depends on the format of the raster data.
For DTI files, the limit is
32768 for byte data, 16384 for word data, and 8192 for long data. There is no
limit for LSI or LSR format files. All of these limits
are proportional to the maximum number of points in filled areas
and hence may be increased using logical name LSL$FILL__POINTSMAX. The values
given here are for the default of 8192.
.P 0
If an LSL$HP__SIZE file is specified, then the sizes obtained from it are
sent to the plotter in a 'PS' command, and will therefore affect the
amount of paper used on roll-feed plotters. According to the HP-GL/2
Reference Guide, a 'PS' with width greater than length will result in
the plot being rotated so that the X-axis is across the width, rather
than the length as usual. To counteract this, an 'RO90' command is
added to return the axes to their normal position.
.P 0
Logical name LSL$HP__ROTATE may be defined to be an integer from 0-3.
It defines a number of right-angles by which to rotate the plot
anti-clockwise. This amount is added to the 'RO90' mentioned above.
.P 0
Logical name LSL$HP__SCALE may be defined to be an integer, either
1, 10, or 100. 1 is the default, and does not do anything. The other
values cause the coordinate values sent to the plotter to be scaled
up by this amount, but an 'SC' command is inserted at the start of the
plot to scale the plot back to the correct size. The purpose of this is
to improve the resolution of the coordinates if the final output device
is capable of steps smaller than 40 per mm (the default device coordinates
in HP-GL). There will be some increase in the amount of plot data generated
if scale factors of 10 or 100 are used.

.HL 1 ^^^*HP-GL Commands Used\*
The following table indicates which HP-GL instructions are used in the
two drivers:
.KEEP
.NOFILL

Instruction	HPGL?	HPGL2?	Comments

IN		x	x	Initialise
OH		x	x	Output hard-clip limits, see above
SPn		x	x	Select pen
PU		x	x	Pen up
PD		x		Pen down
PAx y...;	x		Plot absolute, multiple coordinates
PE			x	Polyline encoded
BP1,"Title"		x	Begin plot
PS			x	Plot size, see LSL$HP__SIZE above
RO			x	Rotate, see LSL$HP__ROTATE above
SC			x	Scale, see LSL$HP__SCALE above
NP256			x	Number of pens, always 256
PG			x	Advance full page
PM			x	Polygon mode, uses PM, PM1, and PM2
FP			x	Fill polygon, used after PM2
PC			x	Pen colour assignment
PW			x	Pen width, mm, 3 decimal places
LA			x	Line attributes, sets ends and joins
TR			x	Transparency, always off, TR0

Notes:

.FILL
.NOKEEP
The HPGL driver includes the following instructions at the start to set the
communications
.BL;<esc>.Y<esc>.I81;;17:<esc>.N;19:
.BL;and the following at the end
.BL;<esc>.Z
.P 0
The 'PE' (polyline encoded) instructions used by the HP-GL/2 driver use
base 64 relative coordinates only, with no fractional data. The only
flags used are ':' (select pen) and '<' (pen up). This data format uses
character values 191-254 in addition to printable characters in the range
63-126.
