.!* enable the use of ^*...\* and * as bolding flags
.ENABLE BOLDING;.FLAGS BOLD
.CHAPTER ^^^*PostScript\*
.INDEX FPPPOSTSCRIPT
The image FPPPOSTSCRIPT.EXE produces output using the Adobe PostScript page
description language. This is usually stored on disc for subsequent
transmission to a device which supports PostScript, though it may be
possible to transmit direct to the device. As part of the PLOTTING package,
the program PSEXPORT is provided to convert Laser-Scan PostScript files
into other formats, such as Adobe Illustrator. See the PSEXPORT User Guide
for details.

.HL 1 ^^^*Features available\*
FPPPOSTSCRIPT offers most of the hardware facilities currently available in the
FRT system (circles, curves, text, and pecked lines). If the flag values
in the FRT do not request the hardware facility, then it will be emulated
in software, which gives more control at the expense of efficiency. For
example, the various TOLERANCE commands will not affect hardware circles
and curves, and hardware text will use a built in text font, rather than
using the TRI file. Note that unless an AFM file is used (see below),
the TRI file must still contain all the
fonts and characters used, but merely for the character widths to
calculate the lengths of strings - the line detail is irrelevant if
hardware text is used. Even the character widths are irrelevant if all text
is at location point 0, 1, or 2.
.P 0
The setting of the hardware field in the FRT is used to indicate
what style of line caps and joins are required. The CAP style is
a number in the range 0-2. 0 means butt caps (square ends), 1 means round caps,
and 2 means extended caps (square but extended by half the line thickness. The
JOIN style is also a number in the range 0-2. 0 means miter
.FOOT
.BLANK
.REPEAT 15 "-"
.BR
The spelling 'miter' is used, rather than 'mitre' so as to agree with
X-Windows and PostScript documentation.
.END FOOT
joins (the sides of the thick lines extended to meet), 1 means round joins, and
2 means bevel joins (each segment has a square end, but the missing triangle is
filled in). Miter joins are changed to bevel if the resulting spike would be
'too long' - this is taken to be when there is an acute corner in the line with
an angle of less than about 11 degrees (this could be changed by using the
PostScript 'setmiterlimit' operator in a header file - the default is 10).
Boundaries of area features will use the join style at the start/end point, and
will not have a cap at all (provided that they can be drawn as a single path -
see below). The FRT hardware field is built up as 10_*JOIN#_+#CAP, so for
instance 21 would mean JOIN = 2 = bevel, CAP = 1 = round. If omitted, the
hardware field defaults to 0, meaning miter joins and butt caps. Remember that
the hardware field in the SCT entry (if present) will override that in the FRT.
.P 0
Note that all drawing using PostScript is opaque. Any marks on the paper are
completely hidden by anything drawn subsequently, independent of colour.
.P 0
Raster images are supported when GKSPOSTSCRIPTSHR is used from within
LITES2. By default these are rendered in greyscale, but may optionally use
colour (see below).

.HL 1 ^^^*Logical names\*
Several logical names are used to control the operation of FPPPOSTSCRIPT.
.P 0
LSL$PS should be defined to be the output file or device to which the
PostScript is to be written. If it is not defined, then a file PLOTFILE.PS
in the current directory will be produced.
.P 0
If it is desired to plot raster images in colour on a colour PostScript
plotter, then logical name LSL$PS__COLORIMAGE (note the spelling) should be
defined as 1. If the resulting plot is sent to a device which does not support
the 'colorimage' operator, then the 'image' operator is used instead and the
output will still be greyscale. If the logical name is not defined, or is
defined as 0, then 'image' will be used, and the output will be greyscale. If a
PostScript file has been produced in greyscale, and it is desired to plot it in
colour, then either edit the file, or prepend another file which defines
'USECOLOR' as 'true' using the sequence of PostScript "_/USECOLOR true def".
Note the the above applies only to raster images - vector data will always be
drawn in colour if plotted on suitable hardware.
.P 0
LSL$PS__NOMLW may be defined to be a real number - the nominal line width in
millimetres. The default is 0.0635 (1/400 inch). The nominal line width is used
for any features whose line width is specified as 0 in the FRT and also as the
width and separation of the hatch lines used to render any solid filled area
which does not use PostScript fill.
.P 0
LSL$PS__MAXPATH may be defined to be an integer. This is the maximum number of
points that will be put into a PostScript path before it is rendered onto the
paper. Each PostScript interpreter will have a limit for this which may not be
exceeded. The default value is 1000. Any attempt to set a value less than 100
will result in 100 being used. 
Ordinary lines are broken
automatically at this limit, which may produce an untidy join if thick lines
are used, though attempts are made to minimise this effect.
Solid filled areas with more points than this
limit will be rendered by close hatch lines (see LSL$PS__NOMLW) rather than
using PostScript filling. 
The maximum number of points allowed in a filled
area is 8192 by default, but may be altered by defining logical name
LSL$FILL__POINTSMAX to be the desired number. Similarly, the maximum
number of times which a hatch line (for hatched fill) may cut the
polygon is 100 by default, but may be altered by defining logical name
LSL$FILL__CUTSMAX to be the desired number - exceeding this limit results
in the message 'FILL__SIDE - Too many intersections found - ignored'.
.P 0
LSL$PS__HW__FILL may be defined to be 0 or 1. By default, solid filled areas
with less than LSL$PS__MAXPATH points will use PostScript fill, while those
with more will use close hatching. If the logical name is defined as 0, then
all filling will use close hatching (thickness and spacing equal to
LSL$PS__NOMLW).
.P 0
LSL$PS__FILL__INVIS may be defined to be 0 or 1. If PostScript solid fill
is used, then by default all lines forming the boundary of a polygon
(including any flagged as invisible in the IFF file) will be passed to
PostScript. If the logical name is defined as 1, then the invisible segments
will be omitted.
.P 0
LSL$PS__SIGFIG may be defined to be an integer - the number of significant
figures to be used for all numbers written to the PostScript file. The
default is 6. The value may be in the range 1-8. Smaller values will produce
smaller files, while too small a value will degrade the resolution. The
sensible value depends on the size and resolution of the output device.
.P 0
LSL$PS__FONTLIST is used to define which
PostScript fonts are to be used. It need not be specified if hardware text is
not used. The logical name should be defined to point to a file (default
filespec LSL$FRT:_*.PSFONTLIST) containing directives defining the fonts.
The format of this file is documented in the FRT User Guide (MAPPING package).
Previous releases of FPP allowed the logical name to be defined as a
search list, specifying the fonts. This still works, but the new mechanism
is preferred - it allows several facilities not previously available.
Note that attempts to italicise a font using a negative font number in the FRT
does not work for hardware text. If hardware
text is used, then the character shapes in the TRI file are
ignored. The widths from the TRI file will still be used for justification
unless an AFM file (containing character widths) is specified in the
_.PSFONTLIST file, in which case the TRI is not used at all - it
must still be supplied, but need not contain any fonts. Note that attempts to
italicise a font using a negative font number in the FRT does not work for
hardware text.
.P 0
Instead of using the logical name LSL$PS__FONTLIST, it is
possible to define the fonts in a PostScript header file (see below),
but this is not recommended except in special circumstances.
.P 0
LSL$PS__DOCUMENTFONTS is used supply a value for the DocumentFonts header
comment in the PostScript file. It may be omitted, but if present should be
a list (separated by space) of the fonts used in the file. For example:
.BL
.NOFILL
	$ Define LSL$PS__DOCUMENTFONTS "Times-Roman Helvetica"
.FILL
.P 0
LSL$PS__COMPRESS may be defined to be an integer in the range 0-1. It specifies
how image data is to be encoded in the PostScript file. 1, the default, uses
run length encoding, whilst 0 causes each pixel value to be stored. The former
will result in a smaller plot file if the data has large areas of the same
colour. The plot file may be up to 128 (16 for bit data) times smaller if the
data was all one colour, but up to 2 (8 for bit data) times larger if every
pixel was different from its neighbours.
.P 0
LSL$COMPOSITE__CHARACTERS may be defined to be an integer in the range 0-1.
It specifies whether to attempt to interpret composite characters in text
strings. 1 enables the mechanism, 0 (or not defined) disables it. Composite
characters are made up by superimposing two or more existing characters
in a font. They are defined in the AFM file, specified in the PSFONTLIST
file. All characters in the font (including the composites) have a name,
such as Zcaron. 
If enabled, then a composite character is plotted by including its
name, surrounded by braces (e.g_. {Zcaron}) in a text string. An opening
brace must then be represented by two opening braces. Any character
may be included by this mechanism, even non-composite ones. This is
of little benefit for ordinary characters (e.g_. {A} is the same as A),
but may be of benefit for a character encoded in the range 128-255 as
an alternative to the '$' escape mechanism. If the name inside
the braces is not recognised, or an attempt is made to plot a composite
character when TRI text fonts are in use, then the first letter of
the name will be plotted instead (e.g_. {Zcaron} plots as Z).
If the mechanism is disabled, then braces are treated as normal
characters.

.HL 1 ^^^*Colour table\*
The colours used for the picture are defined using a text file on logical name
LSL$PS__COLOUR (if this is set up). See Appendix A for the format of this
file. Colours 0 to 255 may be defined.
If the colour table is not set up, or contains insufficient entries,
then any undefined colours will appear in black. Instead of using the
colour table, it is possible to define the colours in a PostScript header
file (see below).

.HL 1 ^^^*Paper size and pixel size\*
FPP always has the concept of a sheet, in which it positions the plot
according to the commands given by the user. When using FPPPOSTSCRIPT, the sheet
is assumed by default to be 1.189x0.841 metres (A0 size). It is normally
advisable to use FPP plot position 0 (POSITION command) to draw into the
bottom left of this area. Some Postscript printers or plotters may be
unable to plot near to the edge of the paper. In this case the OFFSET
command (for example) should be used in FPP to move into the usable area.
A means is provided to change the assumed paper
size, but there should be no need to use this unless other plot positions
(for examples POSITION 4, the default, which means centred) are to be
used.
.P 0
Logical name LSL$PS__SIZE may be set to to point to a file containing
a single line with 4 real numbers defining the x size (metres), y size
(metres), x number of pixels, and y number of pixels, thus to give the
same effect as the defaults, the file would have the single line:
.NOFILL
.BL
1.189 0.841 1448 1024
.BL
.FILL
The pixel numbers are not relevant to FPP, but control the number of
pixels assumed to cover the area for LITES2. LITES2 sets
the number of pixels and their size itself, but will never draw more than
the specified number of pixels across a plot. The number may be altered
within LITES2 using the PLOT PIXELS command.
.P 0
The maximum number of pixels which may be specified in either direction
for LITES2 depends on the format of the raster data.
For DTI files, the limit is
32768 for byte data, 16384 for word data, and 8192 for long data. There is no
limit for LSI or LSR format files. All of these limits (except ROVER's
10000) are proportional to the maximum number of points in filled areas
and hence may be increased using logical name LSL$FILL__POINTSMAX. The values
given here are for the default of 8192.

.HL 1 ^^^*Header file\*
Logical name LSL$PS__HEADER may be defined to be a file of PostScript commands.
The contents of this file will be copied into the output PostScript file in the
Setup section, before the start of the first page. There is no
restriction on what the commands in the file may do - though it is of course
most important that they are valid PostScript. The intention is that the
various defaults in the PostScript Graphics State (such as mitre limit) can be
altered (this is not changed by FPPPOSTSCRIPT). _#copies could be defined to
cause multiple copies of each page to be printed. Other possibilities are to
define a clipping path, or to change the CTM (current transformation matrix) so
as to scale or rotate the plot. Another possibility is to change the filling
rule for polygons. The default is to use the even/odd rule fill. FPPPOSTSCRIPT
uses "FL" as an abbreviation for "eofill", so to change to non-zero winding
rule fill, then define FL as fill. At the point in the PostScript file that the
header is included, the user coordinate system is in its default state,
assumed to be 1/72 inch units with the origin at bottom left.
The header file could even print pages of output itself.
.P 0
If desired, the colours and fonts may be defined in the header file, instead
of using the table and font list. To define FRT colour N, you need to
put a procedure which sets this colour into the Nth element of array COLTAB,
for example:
.BL
.NOFILL
	COLTAB 3 {0.0 1.0 0.0 setrgbcolor} put
.BL
.FILL
will define colour 3 to be green. There is no reason why the other
colour setting operators, sethsbcolor or setgray, should not be used instead.
.P 0
To define FRT font N, you need to
define a name F_<N_> which corresponds to a procedure
which finds the desired font. The name should preferably be defined in the
dictionary FNTDICT, for example:
.BL
.NOFILL
	FNTDICT begin /F3 {
	/Times-Roman findfont
	} def end
.BL
.FILL
will define font 3 to be Times-Roman.

.HL 1 ^^^*Filled areas\*
Any areas described as hatched in the FRT file use a software algorithm to
generate the hatch lines - this is limited to 8192 points, and a maximum of
100 intersections of any hatch line with the polygon. Note that solid filling
can be achieved by specifying equal hatch thickness and spacing in the FRT.
.P 0
For solid filled areas, it is best to take advantage of PostScript's own
filling algorithm if possible, but the maximum number of points which
PostScript will allow to be solid filled may be somewhat limited for some
applications (see LSL$PS__MAXPATH above). By default, PostScript fill will
be used if there are less than LSL$PS__MAXPATH points, and close hatching
(thickness and spacing LSL$PS__NOMLW) if there are more. Note that if hatching
is used, then the quality of the PostScript output becomes dependent on the
resolution of the output device used. By defining LSL$PS__HW__FILL as 0, it
is possible to prevent any use of PostScript fill.
.P 0
Complex polygons (e.g_. with holes) should be defined using identical pairs
of 'connecting lines' to attach the components. These lines may be flagged
as 'invisible' in the IFF file. For hatched areas, this has no effect on the
filling algorithm (which is designed not to draw anything when a hatch line
crosses an identical pair of lines), but it affects whether the segments are
drawn if the area is outlined. Solid areas are never outlined, but it has
been observed that PostScript tends to produce a visible line of filling along
pairs of identical lines when these lie outside the polygon. In order to
overcome this problem, if LSL$PS__FILL__INVIS is defined as 1, then segments
flagged as invisible will not be inserted into the PostScript path to be
filled. This has not been made the default because of the way that PostScript
fills a composite area. Each sub-path (delimited by invisible segments) will
be closed before filling, which will only give the correct result for some
arrangements of invisible segments - those in which all invisible segments
connecting to a component, are attached to the same point on that component.

.HL 1 ^^^*Features and groups\*
The PostScript output produced by LITES2 or FPP contains markers to delimit
the start and end of IFF features. These markers ('u' and 'U') are defined
to do nothing if the file is plotted on a PostScript printer, but are
useful if the PSEXPORT program is used to export the file to another
format. They allow features to be identified as objects in the output.
.P 0
These same markers may be used to delimit groups of features. The FPP
command ESCAPE 1, or the LITES2 command PLOT ESCAPE 1, cause a new group
to be started. Used 'manually', this is only useful if the plot is
produced in several passes, each with different feature selections, beginning
a new group for each. If the 'sort by priority' mechanism is used, then
FPP and LITES2 can automatically perform the ESCAPE 1 function between
each level of priority. FPP will do this by default, unless turned off by
a SEPARATOR ESCAPE 0 commands, whereas LITES2 requires the command
PLOT SEPARATOR ESCAPE 1 to turn it on. (This same mechanism is used in
some of the other Laser-Scan plotter drivers to begin a new opaque layer,
but this is not needed in PostScript because everything is opaque anyway.)

.HL 1 ^^^*CMYK separations\*
The PostScript plot files produced by FPPPOSTSCRIPT includes a facility to
plot CMYK (cyan, magenta, yellow, and black) separations, instead of a
full colour plot. This facility is not enabled by default. In order to
plot a separation, you must define the PostScript name /SEPARATION to be
one of /C, /M, /Y, or /K. The fragment of PostScript required to do this
is e.g_. (to plot the magenta separation)
.P 10;/SEPARATION /M def
.P 0
The best way to achieve this depends on the mechanism for transmitting the
plot file to the plotter, but a typical method is to create a series of
one-line files containing lines like the example above, and to
concatenate one of these with the actual plot file (with a '+' sign) in
the PRINT or COPY command.
.P 0
For the benefit of those with a knowledge of PostScript, this separation
mechanism tests whether the PostScript interpreter supports the
'currentcmykcolor' operator. If it does, then this is used to derive the
separation colours, otherwise the behaviour of the operator is emulated. When
plotting a separation, the colour is eventually set using the 'setgray'
operator, with 0 representing the maximum amount of the separation ink, and 1
representing none. If 'currentcmykcolor', a PostScript Level 2 operator, has to
be emulated, then the behaviour of 'blackgeneration' and 'undercolorremoval'
are emulated by calls to procedures BG and UCR respectively. These are by
default null procedures, but appropriate ones may be defined at the same time
as defining /SEPARATION.

.HL 1 ^^^*Spot Colour separations\*
It is possible to produce PostScript output in which parts of the
plot are drawn into named colour separations (for use with PostScript
Level 2 printers capable of producing separations, or with separating
software which understands Level 2 PostScript). The user must choose
which objects to draw into each separation, and make the plot in
several passes selecting just the appropriate groups of objects.
.P 0
Within a separation, the amount of colour (the 'tint') is calculated
from the grey-level of the appropriate numbered colour in the colour
table. A means is provided to set a new colour table for each
separation. Whilst it may be easier to create a table consisting entirely
of grey shades, this is not compulsory - the shade of grey corresponding
to a given RGB value will be calculated.
.P 0
The FPP command:
.P0;ESCAPE#10#filename
.P0;or the LITES2 command:
.P0;PLOT#ESCAPE#10#filename
.P0;cause a new colour table to be read
from the given filename or logical name. The format is the
same as the table read initially (see above), as described in
Appendix A.
.P 0
The FPP command:
.P0;ESCAPE#11#name#overprint#model#colour
.P0;or the LITES2 command:
.P0;PLOT#ESCAPE#11#name#overprint#model#colour
.P0;cause the new named separation to be started. If no arguments are
given after 'ESCAPE 11', then plotting reverts to normal composite
colours.
.P 0
The arguments to this command are:
.LM +6
.BL
.I-3;name - the name of the separation to be produced, enclosed in double-quotes
if it contains spaces.
.BL
.I-3;overprint - the value 0 or 1. 0 means that drawing into this separation
will erase the corresponding area in other separations. 1 means to 'overprint',
i.e. other separations are not affected. Whether this option has any effect
depends on the output device in use.
.BL
.I-3;model - either RGB or CMYK, the colour model of the colour to be used
to represent this spot-colour, if separations are ^*not\* being produced.
.BL
.I-3;colour - 3 (RGB) or 4 (CMYK) numbers in the range 0-1 describing the
colour of this spot-colour (at maximum tint) to be used as a backup
if separations are ^*not\* being produced.
.LM -6
