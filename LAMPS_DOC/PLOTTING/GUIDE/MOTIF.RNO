.!* enable the use of ^*...\* and * as bolding flags
.ENABLE BOLDING;.FLAGS BOLD
.CHAPTER ^^^*X-Windows display (MOTIF)\*
.INDEX FPPMOTIF
The image FPPMOTIF.EXE produces output on a workstation running X-Windows.

.HL 1 ^^^*Display\*
Although the output from this version of FPP may in principle be directed to
any workstation or terminal running X-Windows, Laser-Scan only support
interaction via a DEC VMS workstation running DECwindows and the Motif window
manager (mwm). FPPMOTIF may be run from a terminal emulating window on the
display screen, or from a separate terminal, possibly on another network node,
in which case an appropriate (DCL) SET DISPLAY command will be required to
direct the output to the workstation.
.P 0
By default,
on an 8 plane system, colours 0-127 may be used for the plot (0 is the
background).
.P 0
On a 4 plane system, colours 0-7 may be used for the plot.
.P 0
On a monochrome system, only colours 0 and 1 are available. In all cases,
features specified with colours out of range will be drawn in colour 1.
.P 0
The number of colours used may be modified to some extent by the use
of the WORKSTATION command.
.BR
WORKSTATION 7000 is relevant to both 4 and 8 plane systems. The
number of colours used is then allowed to reach the maximum for the
particular number of planes (16 and 256 respectively), the defaults being
determined from the number that appear to be free, often around 240 on the
8 plane display.
If logical name LSL$DECW__MAX__COLOUR is defined to be an integer,
then this number of colours will be used instead. This could be used for
example to use the full 256 colours of an 8 plane display.
.P 0
When attempting to use the full number of planes on a display, then
there is inevitably contention for the available colours, as the
window manager and other applications will have already allocated
some cells, for example for window borders and banners. The
default action is to use as many cells as possible in the default
colour map. This means that the colours corresponding to
the cells which were already allocated will be displayed incorrectly.
The colours are used in such a way that the incorrect
colours are the high-numbered ones, and hopefully the effect
is not noticeable, or at least isn't serious. If you really must have
more, or even all, colours displayed correctly, then logical name
LSL$DECW__MAX__COLOUR may be set all the way up to 256.
.P 0
Two other logical names control whether the number of free cells in
the default colour map is considered adequate when LSL$DECW__MAX__COLOUR
is not defined. These are LSL$DECW__MIN__COLOUR - the minimum number
of cells which must be free (defaults to half the number requested,
for example 128 when requesting all the cells on an 8 plane display),
and LSL$DECW__FREE__COLOUR - the number of cells to leave free for
subsequent use, for example for menus (defaults to 0).
.P 0
If there are not enough free cells in the default colour map, then
a private colour map must be created. Whenever this is done, it is likely
that the colours
of existing (e.g_. terminal emulator) windows will be altered, and you
might for example have to click in the banner of a window in order to
get the window manager to install that window's colour map. The particular
action needed to do this will depend on your window manager settings.
.P 0
If logical name LSL$DECW__INVERT is defined (as anything) then the colours
will be used in reverse order (this is sometimes done automatically in
order to minimise contention over colours).
The only obvious use of this is on a monochrome
display with a read-only colour map - it may be used to switch round black
and white between background and foreground.
.P 0
Whenever a display window is created, some diagnostic information is printed
regarding allocation of a colour map, for example:
.LITERAL

...allocating 8 planes
...trying default colormap
...using colours 0-241
...except 236-239
...first allocated colour 0, plane offset 0
...colours used in inverted order

.END LITERAL
.P 0
The interpretation of this information is: Command WORKSTATION 7000
has been used, so an attempt is being made to allocate all 8 planes, or
256 colours; The default colormap is tried first; There are enough free
cells here to be able to use colours 0-235 and 240-241, so
colours 236-239 and 242-255 will be displayed incorrectly; The 'first
allocated colour' and 'plane offset' information gives which X-windows
cells are being used - this need not concern the user; The colours
are being used in inverted order to ensure that only high numbered ones
are displayed incorrectly (again this need not concern the user).
.P 0
The setting of the hardware field in the FRT is used to indicate
what style of line caps and joins are required. The CAP style is
a number in the range 0-2. 0 means butt caps (square ends), 1 means round caps,
and 2 means extended caps (square but extended by half the line thickness. The
JOIN style is also a number in the range 0-2. 0 means miter
.FOOT
.BLANK
.REPEAT 15 "-"
.BR
The spelling 'miter' is used, rather than 'mitre' so as to agree with
X-Windows and PostScript documentation.
.END FOOT
joins (the sides of the thick lines extended to meet), 1 means round joins, and
2 means bevel joins (each segment has a square end, but the missing triangle is
filled in). Miter joins are changed to bevel if the resulting spike would be
'too long' - this is taken to be when there is an acute corner in the line with
an angle of less than about 11 degrees. Closed features will use the join style
at the start/end point, and will not have a cap at all. The FRT hardware field
is built up as 10_*JOIN#_+#CAP, so for instance 21 would mean JOIN = 2 =
bevel, CAP = 1 = round. If omitted, the hardware field defaults to 0,
meaning miter joins and butt caps. Remember that the hardware field in the SCT
entry (if present) will override that in the FRT.
.P 0
FPPMOTIF provides support for hardware text, if the option is enabled and the
appropriate bit is set in the flags entry of the FRT file. By default,
X-Windows text is used. X-Windows text is not very versatile - it can only be
drawn horizontal and at a limited range of sizes. The intention is that Display
PostScript is used, but not all X-Servers support it. To attempt to use Display
PostScript, define the logical name LSL$DECW__DPS as 1. If you do this, but the
X-Server does not support Display PostScript, then a message to that effect
will be produced. Logical name LSL$DPS__FONTLIST is used to define which
PostScript fonts are to be used. It need not be specified if hardware text is
not used. The logical name should be defined to point to a file (default
filespec LSL$FRT:_*.PSFONTLIST) containing directives defining the fonts.
The format of this file is documented in the FRT User Guide (MAPPING package).
Previous releases of FPPMOTIF allowed the logical name to be defined as a
search list, specifying the fonts. This still works, but the new mechanism
is preferred - it allows several facilities not previously available.
Note that attempts to italicise a font using a negative font number in the FRT
does not work for hardware text. If Display
PostScript is used, then the character shapes and widths in the TRI file are
ignored - a TRI file must still be supplied, but it need not contain any
fonts.

.HL 1 ^^^*Colour table\*
The colours used for the picture are defined using a text file on logical name
LSL$DECW__COLOUR. See Appendix A for the format of this file.

.HL 1 ^^^*Control options\*
Several logical names are available to control the way in which drawing
on the X-Windows workstation takes place.
.P 0
Hardware area filling facilities are used for solid fill areas by default. If
logical name LSL$DECW__HW__FILL is defined as 0, or if there are too many
points for hardware fill (the limit is inquired from the X-server but is
normally at least 4092), close horizontal hatch lines generated by the
software are used. Hardware filling may well be faster than the software fill.
Filled areas are limited to 8192 points by default. The limit may be altered by
defining logical name LSL$FILL__POINTSMAX to be the desired number. Similarly,
the maximum number of times which a hatch line (for software fill) may cut the
polygon is 100 by default, but may be altered by defining logical name
LSL$FILL__CUTSMAX to be the desired number - exceeding this limit results in
the message 'FILL__SIDE - Too many intersections found - ignored'.
.P 0
If logical name LSL$DECW__SYNC is defined (as anything), then all X-Windows
operations will be completed immediately, rather than being buffered up.
This can be very inefficient, and is only intended as a debugging aid.
.P 0
Logical name LSL$DECW__MODE and LSL$DECW__UPDATE are used to control the method
used to keep the screen picture up to date. The current picture is kept in
backing store (called a 'PIXMAP') and is repainted from here when the window is
uncovered, or de-iconised etc. By default, vectors are drawn only into the
PIXMAP, which is painted onto the screen after 1000 vectors have been drawn
(in order that the user sees signs of progress) and also when drawing has
been completed. This default state corresponds to LSL$DECW__MODE being
defined as 0, and LSL$DECW__UPDATE as 1000. By defining LSL$DECW__UPDATE
to be a different number, the screen updates can be made more or less
frequent. If they are too frequent then drawing will take longer, while
if they are too infrequent, the user if left wondering what is happening.
If LSL$DECW__MODE is defined as 1, then all drawing is performed twice -
once into the PIXMAP and once onto the screen. The picture is now always
up to date and LSL$DECW__UPDATE is irrelevant, but at the expense of
everything being drawn twice. The intention is that the settings of these
logical names be adjusted to produce the fastest, or most pleasing result.
.P 0
LSL$COMPOSITE__CHARACTERS may be defined to be an integer in the range 0-1.
It specifies whether to attempt to interpret composite characters in text
strings. 1 enables the mechanism, 0 (or not defined) disables it. Composite
characters are made up by superimposing two or more existing characters
in a font. They are defined in the AFM file, specified in the PSFONTLIST
file. All characters in the font (including the composites) have a name,
such as Zcaron. 
If enabled, then a composite character is plotted by including its
name, surrounded by braces (e.g_. {Zcaron}) in a text string. An opening
brace must then be represented by two opening braces. Any character
may be included by this mechanism, even non-composite ones. This is
of little benefit for ordinary characters (e.g_. {A} is the same as A),
but may be of benefit for a character encoded in the range 128-255 as
an alternative to the '$' escape mechanism. If the name inside
the braces is not recognised, or an attempt is made to plot a composite
character when TRI text fonts are in use, then the first letter of
the name will be plotted instead (e.g_. {Zcaron} plots as Z).
If the mechanism is disabled, then braces are treated as normal
characters.
