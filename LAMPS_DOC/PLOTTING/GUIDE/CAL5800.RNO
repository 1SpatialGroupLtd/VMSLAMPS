.!* enable the use of ^*...\* and * as bolding flags
.ENABLE BOLDING;.FLAGS BOLD
.CHAPTER ^^^*Calcomp electrostatic plotters\*
.INDEX FPPCAL5800
The Calcomp 5800 series electrostatic plotters may be used by Laser-Scan
programs FPPCAL5800 (package PLOTTING), ROVERCAL5800 (package TVES), and
LITES2MOTIF (package LITES2).
.HL 1 ^^^*Colour table\*
The Calcomp 5800 series colour electrostatic plotters differ from normal
pen plotters in that the colours produced by a particular colour index
(from an FRT file, for instance) may be defined by the user. In this
respect, the plotter resembles a colour display terminal. The Laser-Scan
programs initially define the colours by reading a disc file on logical name
LSL$CALCOMP__COLOUR. The format of this file is the same as that used
for the VAXstation and Tektronix displays, and the same file may be used,
although it will probably be found that changes are necessary to get
the desired colours on the Calcomp. Also white should not normally
be used on the Calcomp, as it will be invisible against the white paper
background. FPP and LITES2 will use the colours defined by the file on logical
name LSL$CALCOMP__COLOUR for the plot, while ROVER always reads in
another table subsequently (LSL$LOOKUP:ROVER5.DAT by default, or others
by use of the PLANES command, or explicitly by use of the LUT command).
An example colour table file is given in Appendix A.

.HL 1 ^^^*Area filling\*
The Calcomp's hardware fill is used for solid areas with up to 4095
points, unless logical name LSL$CALCOMP__HW__FILL is defined as 0, in which
case it is never used.
Otherwise software filling consisting of close hatch lines
is used, but this cannot guarantee to render all colours identically
to the hardware fill. The maximum number of points allowed in a filled
area is 8192 by default, but may be altered by defining logical name
LSL$FILL__POINTSMAX to be the desired number. Similarly, the maximum
number of times which a hatch line (for software fill) may cut the
polygon is 100 by default, but may be altered by defining logical name
LSL$FILL__CUTSMAX to be the desired number - exceeding this limit results
in the message 'FILL__SIDE - Too many intersections found - ignored'.

.HL 1 ^^^*Paper size and pixel size\*
FPP always has the concept of a sheet, in which it positions the plot
according to the command given by the user. On the Calcomp, the sheet
is assumed by default to be 1.189x0.841 metres (A0 size). It is normally
advisable to use FPP plot position 0, 1 or 2 (POSITION command) to avoid
wastage of paper.
.P 0
ROVER always fills the whole sheet, which is assumed to consist of
1448x1024 pixels for the purpose of displaying a raster image. Since
this may produce a plot which is too large, a means is provided to
change the sheet size, and the number of pixels.
.P 0
Logical name LSL$CALCOMP__SIZE may be set to to point to a file containing
a single line with 4 real numbers defining the x size (metres), y size
(metres), x number of pixels, and y number of pixels, thus to give the
same effect as the defaults, the file would have the single line:
.NOFILL
1.189 0.841 1448 1024
.BR
.FILL
The pixel numbers are not relevant to FPP, but control the number of
pixels assumed to cover the area for ROVER and LITES2. LITES2 sets
the number of pixels and their size itself, but will never draw more than
the specified number of pixels across a plot. The number may be altered
within LITES2 using the PLOT PIXELS command.
.P 0
The maximum number of pixels which may be specified in either direction
is 16384. Programs may impose other limits of their own e.g_.
10000 for ROVER. The limit for LITES2 depends on the format of the raster data.
For DTI files, the limit is
32768 for byte data, 16384 for word data, and 8192 for long data. There is no
limit for LSI or LSR format files. All of these limits (except ROVER's
10000) are proportional to the maximum number of points in filled areas
and hence may be increased using logical name LSL$FILL__POINTSMAX. The values
given here are for the default of 8192.

.HL 1 ^^^*Calcomp specific plotting\*
By default, FPPCAL5800 assumes that the plotter is set to a step size
of 2032 steps/inch (800 steps/cm). If it is not, then plots will be the wrong
size. This particularly applies to the small format plotters, whose step size
is equal to the resolution (200 or 300 steps/inch). These plotters may however
be set to scale the plot to the correct size. The step size expected by
FPPCAL5800 may be altered by defining logical name LSL$CALCOMP__STEPS to be
the number of steps per inch. For example, by defining LSL$CALCOMP__STEPS to
be 400, and setting the plotter to match (perhaps by the command STEPSIZE=400
at the local terminal) the amount of plot data will be reduced without
degrading the plot, since the resolution of the plotter is 400 dots per inch
in any case.
.P 0
Logical name LSL$CALCOMP__SCALE has a similar function. It may be defined to
be an integer in the range 0-32. 0 is the default and has no effect (the same
as 1). Other numbers cause the plotter moves to be scaled down by the given
number, but instructs the plotter to scale them back up again. This can again
reduce the amount of data which needs to be transmitted to the plotter.
Too large a number will cause the plotted lines to be inaccurate, but on
a 400 dpi plotter, numbers up to 5 should not produce any visible difference
(since 400 is approximately 5 times smaller than the default step size of
2032 steps/inch).
.P 0
The Calcomp 5800 by default plots in transparent mode, which means that
where parts of the plot overlap, the inks will be combined, generally
giving darker colours. It also has the ability to put plot data in up
to 255 _'levels_', each of which, in this implementation, is plotted
in order and in an opaque mode (underlying colours do not show through).
.P 0
Several mechanisms are provided to select the drawing mode, to satisfy the
needs of the programs FPP, ROVER, and LITES2.
.LIST "o"
.LE
By default FPPCAL5800 plots in transparent mode. The command ESCAPE 1
will cause the next higher opaque level to be used for subsequent plotting,
while ESCAPE 2 will revert to putting data in the bottom transparent level.
ESCAPE 3 begins a new transparent layer above all the layers used so far.
Thus, to draw using several opaque levels, repeat the ESCAPE 1 command before
making selections and plotting each level of data.
.LE
By default, ROVERCAL5800 draws the vector overlay using opaque mode, so that
the colours replace any underlying colour. In order to allow the overlay to
be transparent, define the logical name LSL$CALCOMP__TRANSPARENT (as anything).
.LE
By default, LITES2 will draw any data in overlays whose base plane is greater
than zero in opaque mode. If it is required to draw everything in transparent
mode, then either define the logical name LSL$CALCOMP__TRANSPARENT (as
anything), or give the command PLOT TYPE 1000 (before PLOT OPEN). Any number
other than 1000 will revert to the original behaviour.
.P 0;As an alternative to the above mechanisms, the PLOT ESCAPE command may
be used, in the same way as for FPPCAL5800. The command PLOT ESCAPE 1 will
cause the next higher opaque level to be used for subsequent plotting, while
PLOT ESCAPE 2 will revert to putting data in the bottom transparent level.
PLOT ESCAPE 3 begins a new transparent layer above all the layers used so far.
Thus, to draw using several opaque levels, repeat the PLOT ESCAPE 1 command
before making selections and drawing each level of data.
.END LIST
.P 0
A Calcomp colour electrostatic plotter usually has four coloured toners,
yellow, magenta, cyan, and black. Any dot on the paper is either toned, or
left blank - the toners cannot be applied at less than full intensity.
This means that colours which are not fully saturated can only be achieved
using a screen pattern with some dots on and some dots off. The particular
screen pattern used is chosen by the Calcomp library. These patterns are
used for filled areas. For lines, a dot pattern is laid out along the
length of the line, which can give the appearance of a line pattern for
some colours. For solid filled areas, the default is to use 4x4 dot patterns
to represent colours, so 16 gradations of each toner are available. Logical
name LSL$CALCOMP__DOTSIZE may be assigned to be an integer (2, 4, 8, or 16)
to specify the size of dot pattern to use instead. For instance, a setting
of 8 will give 8x8#=#64 gradations of each toner, at the expense of using
larger dots.
.P 0
Lines up to 16 nibs wide (i.e_. up to 1mm on a 400dpi plotter) are drawn using
hardware thick lines. Thicker lines switch to using software thick lines, where
each line segment is drawn as a filled area. The hardware thick lines always
have ends which are squared off parallel to the sides of the paper, whereas the
software lines have the ability to use different join and cap styles. Logical
name LSL$CALCOMP__HWTHK may be set to be an integer, denoting the maximum width
in nibs for which hardware lines will be used, thus 0 always uses software
lines, while a large number will always use hardware lines. The default is 16.
.P 0
For software thick lines, the setting of the hardware field in the FRT is used
to indicate what style of line caps and joins are required. The CAP style is a
number in the range 0-2. 0 means butt caps (square ends), 1 means round caps,
and 2 means extended caps (square but extended by half the line thickness. The
JOIN style is also a number in the range 0-2. 0 means mitre joins (the sides of
the thick lines extended to meet), 1 means round joins, and 2 means bevel joins
(each segment has a square end, but the missing triangle is filled in). Mitre
joins are changed to bevel if the resulting spike would be 'too long' - this is
taken to be when there is an acute corner in the line with an angle of less
than about 11 degrees. Closed line features will use the join style at the
start/end point, and will not have a cap at all. The FRT hardware field is
built up as 10_*JOIN#_+#CAP, so for instance 21 would mean JOIN = 2 = bevel,
CAP = 1 = round. If omitted, the hardware field defaults to 0, meaning mitre
joins and butt caps. Remember that the hardware field in the SCT entry (if
present) will override that in the FRT.
.P 0
A side effect of using software thick lines is that the area colour is used.
The colours of hardware thick lines are not as versatile, and sometimes have
difficulty in producing the same colour as for areas of the same colour index.
This sometimes leads to unexpected colour changes in solid area fill when the
maximum number of points for hardware fill is reached and close hatching is
used instead. Using software thick lines throughout (LSL$CALCOMP__HWTHK set to
0) may well avoid this problem. Very thin lines may produce unexpected effects
if the area colours are used, such as if a 1 nib horizontal or vertical line
completely misses the toned dots in the area pattern. To avoid this, either
give all lines a sensible thickness in the FRT (rather than 0), or define
LSL$CALCOMP__HWTHK to a number such as 3, so that the thinnest lines still use
hardware lines.
.P 0
Note that the use of software thick lines is likely to increase the plot file
size by a factor of around 4, and so it should only be used if high quality
thick lines are essential.
.P 0
Since hardware thick lines are specified to the plotter in terms of its
resolution, they will only be the correct thickness if the plot is drawn on a
plotter of the same resolution as intended by the software. The default is 400
dots per inch, but logical name LSL$CALCOMP__DPI is provided to specify an
alternative resolution in dots per inch.

.HL 1 ^^^*Plotter interface\*
The plotter will be connected to the computer by a serial line. The baud
rate should be set as high as possible on plotter and computer for
fastest data transfer (e.g. 19200 baud). The plotter will usually
have a terminal attached. If the terminal line has the TYPEAHEAD
characteristic, it will be possible to log on to the VAX on this terminal,
though it is not expected that users will normally do so.
.P 0
When powered up, after initialising, the terminal will be communicating
with the VAX. Hitting carriage return will produce a login prompt.
Use CTRL/P to switch to local communication with the plotter (the
terminal should normally be left in this mode). The local Calcomp prompt
is "$" (without a space after it), as opposed to "$ " from the VAX.
Give the command EXIT to return to VAX communication.
See the Calcomp manuals for the various commands which may be issued
locally to the plotter.

.HL 1 ^^^*Producing plots\*
The plotting programs send their output to logical name LSL$CAL5800. This
may be assigned either directly to the plotter or to a disc file, thus
for example
.NOFILL
$ Define LSL$CAL5800 TXA0:
.FILL
This will send output directly to the plotter on serial line TXA0:, or
.NOFILL
$ Define LSL$CAL5800 CALCOMP.PLT
.FILL
This will send output to the disc file CALCOMP.PLT in the current
directory. The file may subsequently be plotted by
.NOFILL
$ COPY CALCOMP.PLT TXA0: (assuming plotter is on TXA0:)
or
.FILL
$ TYPE CALCOMP.PLT if you are logged on to the Calcomp local terminal.

.HL 1 ^^^*Use of ROVER\*
ROVER was originally designed for interactive use on colour graphics
screens. When used on a hardcopy plotter no attempt should be made
to clear parts of the picture, or to use the editing facilities.
The aim should be to produce the desired picture using the minimum
number of commands.
