\documentstyle[duplex20]{lsarticle}

\begin{document}

\project{LAMPS PostScript Plotting}
\title {Format Description}
\author{Paul Hardy, Clarke Brunt}
\division{Geographic Systems}
\issue{1.2}
\date{13th April 1994}
\makefrontpage

\section{Introduction}
Laser-Scan has for some time had a hardcopy driver for the Adobe PostScript
language as part of its VMS-based LAMPS mapping and GIS software. 
This can be used to drive PostScript printers and plotters to produce
hardcopy from our PLOTTING (FPP) and LITES2 applications.

This technical note summarises the way in which the PostScript language is used
by the LSL LAMPS plotter driver.

\section {General Notes}
\begin{itemize}
\item
PostScript is a special purpose programming language with powerful graphics
operators. It is often described as a Page Description Language (PDL).
PostScript is a stack-based language with a `Reverse Polish' structure, so a
program has to give the items to be operated on and then the operator to be
applied. 
\item
With a very few exceptions noted below, the PostScript programs produced as
data by the LSL driver are believed to conform to the PostScript language and
Document Structuring Conventions (DSC) as described in the Adobe ``PostScript
Language Reference Manual'' First Edition, ISBN 0 201 10174-2, published by
Addison-Wesley 1985, reprinted 1990 (commonly known as the ``Red Book''). 
It is strongly recommended that the Red Book is read and understood before 
continuing with this document.
\item
The PostScript language has been enhanced over time, eg by addition of
operators for handling colour. There has recently been issued a Second Edition
of the Adobe ``PostScript Language Reference Manual'' (ISBN 0-201-18127-4)
which formalises a `Level 2' of the language. It describes the original
language as `Level 1' PostScript. Level 2 is (largely) a superset of Level 1,
so that PostScript programs conforming to Level 1 should operate on Level 2
devices. 
\item
The PostScript output from the LSL driver can in theory be plotted on any
conforming PostScript plotter, within the abilities of the plotter.
This is because the PostScript code produced by LSL tests at plot execution
time for the presence of optional facilities such as colour image operators.
If they are not present, it falls back on using the basic facilities such as
monochrome image operators.
\item
The particular style of PostScript produced by the LSL driver is based on the
reviseable PostScript subset (AI88) handled by DTP systems such as Adobe
Illustrator and Aldus Freehand. See Adobe Systems document "Adobe Illustrator
Document Format, Specification", available on request from Adobe Systems Inc.
for a description of this format. LSL provide a post-processing program
called PSEXPORT to convert the output of the driver to actual AI88 or
EPS format.
\item
Note that the example outputs given below give an indication of the way that
the current release of the driver handles different elements. The precise
PostScript produced by later versions of the driver may change substantially,
as we enhance the driver. For example, the recent addition of the ability to
produce CMYK colour separations required changes to the way that colour
definitions were handled.
\item
A PostScript file is ASCII and is human readable (not binary). So a good way of
learning PostScript is to examine with a text editor the actual PostScript
output produced by plotting various simple datasets (vectors, areas, texts,
images).
\item
Further information on the LSL LAMPS PostScript driver is available in the 
documentation for the PLOTTING package, particularly in the PostScript chapter 
of the ``FPP Plotters User Guide''.
\end{itemize}

\section {Overall Structure}
\begin{itemize}
\item
The PostScript program starts with a character sequence `\%!PS' identifying
this as PostScript file (`\%') is the PostScript comment character).
\item
In fact the first line is `\%!PS-Adobe 3.0', identifying as a PostScript
program conforming to version 3.0 of the Document Structuring Conventions
(DSC). The DSC describes a PostScript program in terms of a `prologue'
and a body.
\item
The prologue follows, starting with a series of DSC header comments, giving
extra information which is not needed by a PostScript plotter or printer, but
might be needed by an host-based application which processed PostScript (eg in
order to preview it on a screen).
\begin{verbatim}
%!PS-Adobe-3.0
%%DocumentFonts: Times-Roman Helvetica
%%Title: PLOTFILE.PS
%%Creator: Laser-Scan GKSPSLIB V2.1 28-March-1994 User CLARKE
%%CreationDate: 13-APR-1994 12:16:15.35
%%DocumentSuppliedResources: procset LSL-GKS 1.1 0
%%Pages: (atend)
%%BoundingBox: (atend)
%%EndComments
%%BeginProlog
%%BeginResource procset LSL-GKS 1.1 0
\end{verbatim}
\item
Then follows the definition of the procedure set LSL-GKS, which is used
in the body of the plot. First a dictionary large enough to contain
the definition is created.
\begin{verbatim}
userdict /LSL-GKS 44 dict dup begin put
\end{verbatim}
\item
Then follows the definition of an `initialize' procedure which is called from
the Setup part of the plot. This is for the parts of the procedure set which
are not fixed, but depend, for example, on whether colour images are being
used, or whether CMYK colour separate plots are being produced. The PostScript
variable /SEPARATION is tested, and if set, the colour procedures are redefined
to do monochrome intensity based on the level of the selected component. Also a
`terminate' procedure is defined, called from the Trailer part of the plot,
which merely pops from the dictionary stack the dictionaries pushed by the
initialize procedure.
\begin{verbatim}
/initialize
{
  LSL-GKS begin
  userdict /LSL-GKS-VARS 22 dict dup begin put
  /COLTAB MAXCOL 1 add array def
  /SEP -1 def
  /SEPARATION where
  { pop SEPDICT SEPARATION known
    { /SEP SEPDICT SEPARATION get def }
    { (Unknown separation\n) print } ifelse
  } if
  /FNTDICT MAXFNT dict def
  /UCR dup where {pop pop} { {} def} ifelse
  /BG dup where {pop pop} { {} def} ifelse
  /currentcmykcolor where
    {pop /CMYK /currentcmykcolor load def} if
  SEP 0 lt
  { /CL dup load dup length 10 sub
    0 exch getinterval def } if
  /k /CL load def
  /K /CL load def
  /colorimage where { pop } { pop false } ifelse
  {
    /IM { false 3 colorimage } bind def
    /NCOL 3 def
    /CISTR /C3STR load def
  } {
    /IM /image load def
    /NCOL 1 def
    /CISTR /C1STR load def
  } ifelse
  /IMGMAT 6 array def
  /IMGSTR 1024 NCOL mul string def
  /IMG24 8 NCOL mul string def
  /IMGBYT 1 string def
  /IMG3 NCOL string def
  /BF [ NCOL dup string exch string ] def
  /BW [ 1024 NCOL mul dup string exch string ] def
  /IMGODD false def
  /IMGWID 0 def
  /IMGCNT 0 def
  end end
  LSL-GKS begin
  LSL-GKS-VARS begin
} def
/terminate { end end } def
\end{verbatim}
\item
Then follow abbreviations for operations used frequently in the body
of the plot.
\begin{verbatim}
/MAX { 2 copy lt { exch } if pop } bind def
/u /null load cvx def
/U /null load cvx def
/l /lineto load def
/m /moveto load def
/c /curveto load def
/AA /arc load def
/AC /arcn load def
/d /setdash load def
/w /setlinewidth load def
/j /setlinejoin load def
/J /setlinecap load def
/s {closepath stroke} bind def
/S /stroke load def
/F /eofill load def
/e { gsave translate rotate } bind def
/t { 0 0 moveto show grestore } bind def
\end{verbatim}
\item
Then follow the definitions to do with colours and separations.
\begin{verbatim}
/MAXCOL 255 def
/SEPDICT 8 dict def
SEPDICT begin
  /C 3 def /c 3 def
  /M 2 def /m 2 def
  /Y 1 def /y 1 def
  /K 0 def /k 0 def
currentdict readonly pop end
/CMYK
{ currentrgbcolor 3 copy MAX MAX neg 1 add
  dup BG 5 1 roll UCR
  3 { exch 1 index add neg 1 add 5 1 roll
    } repeat pop
} bind def
/CL
{ dup COLTAB exch get
  dup null eq
  { pop 0 eq {1} {0} ifelse setgray }
  { exec pop }
  ifelse
  CMYK SEP index neg 1 add setgray
  4 {pop} repeat
} bind def
\end{verbatim}
\item
Then follows definitions associated with loading fonts and with re-encoding
fonts to handle multinational (eg ISOLatin1) characters.
\begin{verbatim}
/MAXFNT 127 def
/z
{ dup FNTDICT begin where
  { pop dup load dup type /dicttype eq
    { exch pop }
    { exec dup 3 1 roll def } ifelse }
  { /Courier findfont dup 3 1 roll def } ifelse end
  exch scalefont setfont
} bind def
/ReENCODE
{ 3 -1 roll
  dup length dict dup 3 -1 roll
  { 1 index /FID ne
    { put dup }
    { pop pop }
    ifelse
  } forall
  3 -1 roll /Encoding exch put
  definefont
} bind def
\end{verbatim}
\item
Then follows definitions of procedures for image handling, including selection
of colour or monochrome images and bit or byte data. These procedures read rows
of of pixel values from the input stream, unpacking as necessary.
\begin{verbatim}
/C3STR
{ CL currentrgbcolor
  4 -1 roll
  2 -1 0
  { 2 copy 5 -1 roll
    255 mul cvi put pop
  } for
} bind def
/C1STR
{ CL currentgray
  255 mul cvi exch dup 0 4 -1 roll put
} bind def
/RDCH
{ currentfile IMGBYT readhexstring pop 0 get
} bind def
/MAT
{ IMGMAT astore } bind def
/FILLSTR
{
  dup length exch
  2 index exch 0 exch putinterval
  { dup 3 index ge { pop exit } if
    2 copy 2 copy
    0 exch
    getinterval
    putinterval
    2 mul
  } loop
} bind def
/IBYTE
{ IMG3 RDCH CISTR } bind def
/IBYTEC
{
  RDCH
  dup
  127 and NCOL mul
  exch 128 and
  0 eq
  { IMGSTR IBYTE
    FILLSTR
  }
  {
    IMGSTR 0 NCOL 3 index 1 sub
    {
      1 index exch
      IBYTE putinterval 
    } for
  } ifelse
  exch 0 exch getinterval
} bind def
/IBIT
{
  IMG24 RDCH
  0 NCOL dup 7 mul
  { exch dup 1 bitshift exch
    128 and -7 bitshift BF exch get
    exch 3 index exch
    5 2 roll putinterval
  } for pop
  IMGODD
  {
    /IMGCNT IMGCNT 8 NCOL mul add dup IMGWID gt
    {
      IMGWID sub
      neg 8 NCOL mul add
      3 -1 roll exch 0 exch getinterval exch
      0
    } if
    def
  } if
} bind def
/IBI
{
  IMG24 RDCH
  0 NCOL dup 7 mul
  { exch dup 1 bitshift exch
    128 and -7 bitshift BF exch get
    exch 3 index exch
    5 2 roll putinterval
  } for pop
} bind def
/IBITC
{
  currentfile IMGBYT readhexstring pop 0 get
  dup
  -7 bitshift
  exch 127 and
  dup 0 eq
  { pop 0 eq
    { IBI }
    { currentfile IMGBYT readhexstring pop 0 get
      dup
      127 and NCOL mul 8 mul
      exch -7 bitshift
      0 eq
      {
        IMGSTR
        IBI
        FILLSTR
      }
      {
        IMGSTR 0 NCOL 8 mul 3 index 1 sub
        {
          1 index exch
          IBI putinterval 
        } for
      } ifelse
      exch 0 exch getinterval
    } ifelse
  }
  { NCOL mul 8 mul
    exch BW exch get exch
    0 exch getinterval
  } ifelse
  IMGODD
  {
    /IMGCNT IMGCNT 2 index length add dup IMGWID gt
    {
      IMGWID sub
      neg 2 index length add
      3 -1 roll exch 0 exch getinterval exch
      0
    } if
    def
  } if
} bind def
/IBITM
{
  currentfile IMGBYT readhexstring pop
} bind def
/IBITCM
{
  currentfile IMGBYT readhexstring pop 0 get
  dup
  -7 bitshift
  exch 127 and
  dup 0 eq
  { pop 0 eq
    { currentfile IMGBYT readhexstring pop }
    { currentfile IMGBYT readhexstring pop 0 get
      dup
      127 and
      exch -7 bitshift
      0 eq
      {
        IMGSTR
        currentfile IMGBYT readhexstring pop
        FILLSTR
        exch 0 exch getinterval
      }
      {
        IMGSTR exch 0 exch getinterval
        currentfile exch readhexstring pop
      } ifelse
    } ifelse
  }
  { exch BW exch get exch
    0 exch getinterval
  } ifelse
} bind def
/IM0
{ MAT 8 exch /IBYTE load IM } bind def
/IM1
{ MAT 8 exch /IBYTEC load IM } bind def
/IMB0
{ BF 0 get 0 CISTR pop BF 1 get exch CISTR pop
  MAT 8 exch /IBIT load
  4 index dup 8 mod 0 ne dup /IMGODD exch def
  { /IMGWID exch NCOL mul def /IMGCNT 0 def }
  { pop } ifelse
  IM
} bind def
/IMB1
{ BF 0 get 0 CISTR BW 0 get 0 NCOL getinterval ne {
    BW 0 get dup length exch BF 0 get
    FILLSTR pop pop } if
  BF 1 get exch CISTR BW 1 get 0 NCOL getinterval ne {
    BW 1 get dup length exch BF 1 get
    FILLSTR pop pop } if
  MAT 8 exch /IBITC load
  4 index dup 8 mod 0 ne dup /IMGODD exch def
  { /IMGWID exch NCOL mul def /IMGCNT 0 def }
  { pop } ifelse
  IM
} bind def
/IMM0
{ pop
  MAT 1 exch /IBITM load image
} bind def
/IMM1
{ pop
  BW 0 get 0 get 0 ne {
    BW 0 get dup length exch IMGBYT dup 0 0 put
    FILLSTR pop pop } if
  BW 1 get 0 get 255 ne {
    BW 1 get dup length exch IMGBYT dup 0 255 put
    FILLSTR pop pop } if
  MAT 1 exch /IBITCM load image
} bind def
\end{verbatim}
\item
That concludes the definition of the procedure set. It, and the prologue,
are ended, after making the procedure dictionary read only.
\begin{verbatim}
currentdict readonly pop end
%%EndResource
%%EndProlog
\end{verbatim}
\item
Then follows the Setup section of the plot. First the procedure set is
initialised.
\begin{verbatim}
%%BeginSetup
/USECOLOR where { pop USECOLOR} { false } ifelse
LSL-GKS /initialize get exec
\end{verbatim}
\item
Then follows a colour table giving RGB values for the numbered colours used in
the LSL applications. This is derived from the colour table file read on
logical name LSL\$PS\_COLOUR.
\begin{verbatim}
COLTAB 0 {1.0 1.0 1.0 setrgbcolor} put
COLTAB 1 {1.0 1.0 1.0 setrgbcolor} put
COLTAB 2 {1.0 0.6 0.0 setrgbcolor} put
COLTAB 3 {1.0 0.0 0.0 setrgbcolor} put
COLTAB 4 {1.0 1.0 0.0 setrgbcolor} put
COLTAB 5 {0.502 0.502 0.502 setrgbcolor} put
COLTAB 6 {0.0 0.0 1.0 setrgbcolor} put
...
COLTAB 60 {1.0 0.702 1.0 setrgbcolor} put
COLTAB 61 {1.0 1.0 1.0 setrgbcolor} put
COLTAB 62 {1.0 1.0 1.0 setrgbcolor} put
COLTAB 63 {1.0 1.0 1.0 setrgbcolor} put
\end{verbatim}
\item
Then follow the definitions of any fonts used. This section will change
according to the contents of the particular .PSFONTLIST file provided to the
application to specify the mapping from application font numbers to PostScript
font names.
\begin{verbatim}
FNTDICT begin /F1 {
/Times-Roman findfont
1.5 scalefont
/Times-Roman-ReENC
ISOLatin1Encoding
ReENCODE
} def end
\end{verbatim}
\item
At this point, the header file read on logical name LSL\$PS\_HEADER (if any)
is included, and then the Setup section is ended.
\begin{verbatim}
%%EndSetup
\end{verbatim}
\item
Then follow the DSC comments indicating the start of the first page of the
plot. In the PageSetup section, a save of context for this page is performed.
\begin{verbatim}
%%Page: 1 1
%%BeginPageSetup
save
%%EndPageSetup
\end{verbatim}
\item
The body of the plot follows, described in sections below for each data type.
\item
Then follows the restore of context for the page, and the showpage command
which produces the plot.
\begin{verbatim}
restore
showpage
\end{verbatim}
\item
Finally, there is a DSC trailer. The procedure set is terminated, and comments
deferred at the start of the plot, which give information such as the number of
pages plotted, and the bounding box of the complete plot, are included. The
file ends with the \%\%EOF comment.
\begin{verbatim}
%%Trailer
LSL-GKS /terminate get exec
%%Pages: 1
%%BoundingBox: 28 28 1163 1163
%%EOF
\end{verbatim}
\end{itemize}

\section {Vector Data}
\begin{itemize}
\item
Each IFF feature begins with a `u'. This is also used to mark the start
of priority layers if drawing by priority is used.
\begin{verbatim}
u
\end{verbatim}
\item
The type of linework is specified using procedures (defined in the prologue)
to set colour (K for lines, or k for filled areas), Line Width (w),
Line Join (j), Line Cap (J), etc.
\begin{verbatim}
0.18 w
1 K
0 j 0 J
\end{verbatim}
\item
Vector data consists largely of coordinates in the default coordinate system
(1/72 inches, or points) with `m' (Move To) and `l'
(Line To) procedures to define a new `path'
\begin{verbatim}
177.728 340.459 m
174.619 337.35 l
173.119 341.506 l
174.932 343.319 l
171.505 345.549 m
173.445 347.489 l
\end{verbatim}
\item
Each path will end with
an `S' to `stroke' the current path to write it into the picture, and a
`U' if this is the end of a feature.
\begin{verbatim}
S
U
\end{verbatim}
\item
Fill area items will be very similar, but will contain a fill procedure
\begin{verbatim}
F
\end{verbatim}
\end{itemize}

\section {Text Data}
\begin{itemize}
\item
Text data will only be present if the PostScript text capabilities have
been invoked (by setting the hardware bit in the FRT, and providing a
.PSFONTLIST file to translate LSL font numbers to PostScript fonts.
\item
If these new facilities have not been invoked, then text features will have
been reduced to lines and fill areas by the LSL TRI font mechanism.
\item
If enabled, selection of a font will result in PostScript procedures to set
colour, size, etc.
\begin{verbatim}
1 k
3.11811 /F1 z
\end{verbatim}
\item
Actual texts will contain an angle and position, followed by e, then
a literal text, followed by t:
\begin{verbatim}
-0.0000173 634.199 1003.64 e
(Hello World)t
\end{verbatim}
\end{itemize}

\section {Image Data}
\begin{itemize}
\item
All image data is written encoded as ASCII Hexadecimal, which only uses the
characters `0' to `9' and `A' to `F', and it suitable to be read with the
PostScript operator `readhexstring'.
Image data is written by default in a run-length encoded compressed form, which
is unpicked by the image procedures (eg IMB1) defined in the prologue.
It starts with numbers of pixels in the two axes, followed by a 6 element
matrix defining pixel sizes and origin. In the case of bit data, the colour
index for the foreground pixels follows. The procedure name used is built up
from `IM', followed by `B' for bit data, or `M' for monochrome bit data
(or nothing for byte data), then `0' for un-compressed, or `1' for compressed
data.
\item
Both byte and bit data are finally presented to the PostScript `image'
(or `colorimage') operators with 8 bits per pixel, so each pixel is
one of 256 shades of grey (or made up from 256 shades each of red, green,
and blue). Monochrome data is presented to `image' with one bit per
pixel, and can only be black and white.
\item
Uncompressed data is just a stream of bytes representing colour indices
in the range 0-255, or bits packed into bytes with the most significant bit
first. Bit data is padded so that each scan line contains a multiple of
8 bits. The extra bits are ignored, either by PostScript itself for
monochrome data, or by the image procedure.
\item
The compression schemes employed are designed to be simple enough that
de-compressing does not slow the interpreter down unduly, while not
significantly expanding non-compressible data, and giving a good compression
for large areas of the same colour.
\item
For byte data, a single byte is read. If it is in the range 1-127, then
the following byte is repeated that many times. If it is greater than
128, then 128 is subtracted, and that many bytes follow literally.
\item
For bit data, then again a single byte is read. Values 1-127 represent
that many bytes of 0 bits, so the number is multiplied by 8 to get
the number of bits. Values 129-255 have 128 subtracted and represent runs
of 1 bits. The value 0 means that the next byte (8 bits) is to be
taken literally. The value 128 means to read the next byte and to treat
it as for the byte compression scheme discussed above.
\item
An example for bit data might be:
\begin{verbatim}
43008 48 14.11111 0.0 0.0 -14.11111 -2149.85 29576.05 1 IMM1
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE98082E03F
8300FC04007F8200800480831FFFC004000F878082E007838084E007FFF804808301FFFC0580841F
FE007F848082F003848082803F8300F804808301FFFC040003898082F007858084803FFF8004007F
...
000F8E8082000F828082E00183008F968082F0078D8082E03FA88082F03F9A8082F01F850000F3
\end{verbatim}
\end{itemize}
\section {Conclusion}
\begin{itemize}
\item
The LSL LAMPS PostScript driver can produce high quality plots containing
vector, area, text, and image data on a wide variety of PostScript devices.
\item
If you want to discuss the technical basis for this note, feel free to 
telephone us on 0223 420414.
\end{itemize}

\vspace{20mm}
{\em Paul Hardy, Chief Programmer\\
Clarke Brunt, Principal Software Engineer\\
Issue 1.2 of 13/4/94, describing LAMPS V4.3}
\end{document}
