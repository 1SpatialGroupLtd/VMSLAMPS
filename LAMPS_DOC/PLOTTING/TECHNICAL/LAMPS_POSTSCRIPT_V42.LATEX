\documentstyle[duplex20]{lsarticle}

\begin{document}

\project{LAMPS PostScript Plotting}
\title {Format Description}
\author{Paul Hardy}
\division{Geographic Systems}
\issue{1.0}
\date{20th August 1993}
\makefrontpage

\section{Introduction}
Laser-Scan has for some time had a hardcopy driver for the Adobe PostScript
language as part of its VMS-based LAMPS mapping and GIS software. 
This can be used to drive PostScript printers and plotters to produce
hardcopy from our PLOTTING (FPP) and LITES2 applications.

This technical note summarises the way in which the PostScript language is used
by the LSL LAMPS plotter driver.

\section {General Notes}
\begin{itemize}
\item
PostScript is a special purpose programming language with powerful graphics
operators. It is often described as a Page Description Language (PDL).
PostScript is a stack-based language with a `Reverse Polish' structure, so a
program has to give the items to be operated on and then the operator to be
applied. 
\item
With a very few exceptions noted below, the PostScript programs produced as
data by the LSL driver are believed to conform to the PostScript language and
Document Structuring Conventions (DSC) as described in the Adobe ``PostScript
Language Reference Manual'' First Edition, ISBN 0 201 10174-2, published by
Addison-Wesley 1985, reprinted 1990 (commonly known as the ``Red Book''). 
It is strongly recommended that the Red Book is read and understood before 
continuing with this document.
\item
The PostScript language has been enhanced over time, eg by addition of
operators for handling colour. There has recently been issued a Second Edition
of the Adobe ``PostScript Language Reference Manual'' (ISBN 0-201-18127-4)
which formalises a `Level 2' of the language. It describes the original
language as `Level 1' PostScript. Level 2 is (largely) a superset of Level 1,
so that PostScript programs conforming to Level 1 should operate on Level 2
devices. 
\item
The PostScript output from the LSL driver can in theory be plotted on any
conforming PostScript plotter, within the abilities of the plotter.
This is because the PostScript code produced by LSL tests at plot execution
time for the presence of optional facilities such as colour image operators.
If they are not present, it falls back on using the basic facilities such as
monochrome image operators
\item
Note that the example outputs given below give an indication of the way that
the current release of the driver handles different elements. The precise
PostScript produced by later versions of the driver may change substantially,
as we enhance the driver. For example, the recent addition of the ability to
produce CMYK colour separations required changes to the way that colour
definitions were handled.
\item
A PostScript file is ASCII and is human readable (not binary). So a good way of
learning PostScript is to examine with a text editor the actual PostScript
output produced by plotting various simple datasets (vectors, areas, texts,
images).
\item
Further information on the LSL LAMPS PostScript driver is available in the 
documentation for the PLOTTING package, particularly in the PostScript chapter 
of the ``FPP Plotters User Guide''.
\end{itemize}

\section {Overall Structure}
\begin{itemize}
\item
The PostScript program starts with a character sequence `\%!PS' identifying
this as PostScript file (`\%') is the PostScript comment character).
\item
In fact the first line is `\%!PS-Adobe 1.0', identifying as a PostScript
program conforming to version 1.0 of the Document Structuring Conventions
(DSC). The DSC describes a PostScript program in terms of a `prologue'
and a body.
\item
The prologue follows, starting with a series of DSC header comments, giving
extra information which is not needed by a PostScript plotter or printer, but
might be needed by an host-based application which processed PostScript (eg in
order to preview it on a screen).
\begin{verbatim}
%!PS-Adobe-1.0
%%DocumentFonts:  Times-Roman Helvetica
%%Title: PLOTFILE.PS
%%Creator: Laser-Scan GKSPSLIB V1.7 26-July-1992 User PAUL
%%CreationDate:  6-AUG-1993 11:18:29.85
%%Pages: (atend)
%%BoundingBox: (atend)
%%EndComments
\end{verbatim}
\item
Then follows a save of context, and a change of units from points into mm.
\begin{verbatim}
/JBSAVE save def
72 25.4 div dup scale
\end{verbatim}
\item
Then follows definitions of various operators and abbreviations for standard
operators which will be used in the body of the plot.
\begin{verbatim}
/USECOLOR where { pop } { /USECOLOR false def } ifelse
/MAX { 2 copy lt { exch } if pop } bind def
/LT /lineto load def
/MT /moveto load def
/MB /rmoveto load def
/CT /curveto load def
/AA /arc load def
/AC /arcn load def
/LW /setlinewidth load def
/LJ /setlinejoin load def
/LC /setlinecap load def
/CP /closepath load def
/ST /stroke load def
/FL /eofill load def
/SH /show load def
/MAXCOL 255 def
/COLTAB MAXCOL 1 add array def
\end{verbatim}
\item
Then follows some definitions relating to producing CMYK colour separate plots.
These test the definition of the PostScript variable /SEPARATION, and if set,
then redefine the colour operators to do monochrome intensity based on the
level of the selected component.
\begin{verbatim}
/SEP -1 def
/SEPDICT 4 dict def
SEPDICT begin
  /C 3 def
  /M 2 def
  /Y 1 def
  /K 0 def
end
/SEPARATION where
  { pop SEPDICT SEPARATION known
    { /SEP SEPDICT SEPARATION get def }
    { (Unknown separation\n) print } ifelse
  } if
/UCR dup where {pop pop} { {} def} ifelse
/BG dup where {pop pop} { {} def} ifelse
/CMYK
  { currentrgbcolor 3 copy MAX MAX neg 1 add
    dup BG 5 1 roll UCR
    3 { exch 1 index add neg 1 add 5 1 roll
      } repeat pop
  } bind def
/currentcmykcolor where
  {pop /CMYK /currentcmykcolor load def} if
/CL
  { COLTAB exch get
    dup null eq
    { pop 0 setgray }
    { exec }
    ifelse
    CMYK SEP index neg 1 add setgray
    4 {pop} repeat
  } bind def
SEP 0 lt 
  { /CL dup load dup length 10 sub
    0 exch getinterval def } if
\end{verbatim}
\item
Then follows definitions associated with loading fonts and with re-encoding
fonts to handle multinational (eg ISOLatin1) characters. This section will
change according to the contents of the particular .PSFONTLIST file provided to
the application to specify the mapping from application font numbers to
PostScript font names.
\begin{verbatim}
/FNTMAT matrix def
/MAXFNT 127 def
/FNTDICT MAXFNT dict def
/FN
  { dup FNTDICT begin where
    { pop dup load dup type /dicttype eq
      { exch pop }
      { exec dup 3 1 roll def } ifelse }
    { /Courier findfont dup 3 1 roll def } ifelse end
    exch scalefont exch FNTMAT rotate
    makefont setfont
  } bind def
/ReENCODE
  { 3 -1 roll
    dup length dict dup 3 -1 roll
    { 1 index /FID ne
      { put dup }
      { pop pop }
      ifelse
    } forall
    3 -1 roll /Encoding exch put
    definefont
  } bind def
FNTDICT begin /F1 {
/Times-Roman findfont
/Times-Roman-ReENC
ISOLatin1Encoding
ReENCODE
} def end
\end{verbatim}
\item
Then follows some definitions about dashed line handling.
\begin{verbatim}
/MAXDSH 10 def
/DSHARR MAXDSH array def
/DS
  { DSHARR exch 0 exch getinterval astore 0 setdash
  } bind def
\end{verbatim}
\item
Then follows definitions of procedures for image handling, including selection
of colour or monochrome images and bit or byte data. These procedures read rows
of of pixel values from the input stream, unpacking as necessary.
\begin{verbatim}
/colorimage where { pop USECOLOR } { false } ifelse
{
  /IM { false 3 colorimage } bind def
  /NCOL 3 def
  /CISTR
    { CL currentrgbcolor
      4 -1 roll
      2 -1 0
      { 2 copy 5 -1 roll
        255 mul cvi put pop
      } for
    } bind def
} {
  /IM /image load def
  /NCOL 1 def
  /CISTR
    { CL currentgray
      255 mul cvi exch dup 0 4 -1 roll put
    } bind def
} ifelse
/IMGMAT 6 array def
/IMGSTR 256 NCOL mul string def
/IMG24 IMGSTR 0 8 NCOL mul getinterval def
/IMGBYT 1 string def
/IMG3 NCOL string def
/BF [ NCOL string NCOL string ] def
/RDCH
  { currentfile IMGBYT readhexstring pop 0 get
  } bind def
/MAT
  { IMGMAT astore
  } bind def
/IBYTE
  { IMG3 RDCH CISTR } bind def
/IBYTEC
  {
    RDCH NCOL mul
    IMGSTR IMG3 RDCH CISTR
    0 NCOL 4 index
    { 3 copy exch putinterval pop }
    for pop
    exch 0 exch NCOL add getinterval
  } bind def
/IBIT
  {
    IMG24 RDCH
    0 NCOL dup 7 mul
    { exch dup -1 bitshift exch
      1 and BF exch get
      exch 3 index exch
      5 2 roll putinterval
    } for pop
  } bind def
/IBITC
  {
    RDCH dup
    -7 bitshift BF exch get exch
    127 and NCOL mul
    exch IMGSTR exch 2 index
    0 NCOL 3 -1 roll
    { 3 copy exch putinterval pop }
    for pop
    exch 0 exch NCOL add getinterval
  } bind def
/IM0
  { MAT 8 exch {IBYTE} IM } bind def
/IM1
  { MAT 8 exch {IBYTEC} IM } bind def
/IMB0
  { BF 0 get 0 CISTR pop BF 1 get exch CISTR pop
    MAT 8 exch {IBIT} IM
  } bind def
/IMB1
  { BF 0 get 0 CISTR pop BF 1 get exch CISTR pop
    MAT 8 exch {IBITC} IM
  } bind def
\end{verbatim}
\item
Then follows a colour table giving RGB values for the numbered colours used in
the LSL applications.
\begin{verbatim}
COLTAB 0 {1.0 1.0 1.0 setrgbcolor} put
COLTAB 1 {1.0 1.0 1.0 setrgbcolor} put
COLTAB 2 {1.0 0.6 0.0 setrgbcolor} put
COLTAB 3 {1.0 0.0 0.0 setrgbcolor} put
COLTAB 4 {1.0 1.0 0.0 setrgbcolor} put
COLTAB 5 {0.502 0.502 0.502 setrgbcolor} put
COLTAB 6 {0.0 0.0 1.0 setrgbcolor} put
...
COLTAB 60 {1.0 0.702 1.0 setrgbcolor} put
COLTAB 61 {1.0 1.0 1.0 setrgbcolor} put
COLTAB 62 {1.0 1.0 1.0 setrgbcolor} put
COLTAB 63 {1.0 1.0 1.0 setrgbcolor} put
\end{verbatim}
\item
Then follows DSC comments indicating the end of the prologue, and the start of
the body of the plot. This is followed by a save of context for this page.
\begin{verbatim}
%%EndProlog
%%Page: 1 1
/PGSAVE save def
\end{verbatim}
\item
The body of the plot follows, described in sections below for each data type.
\item
Then follows the showpage command which produces the plot, followed by a
restore of context in case another plot follows.
\begin{verbatim}
showpage
PGSAVE restore
\end{verbatim}
\item
Finally, there is a DSC trailer which gives information such as the number of
pages plotted, and the bounding box of the complete plot.
\begin{verbatim}
%%Trailer
JBSAVE restore
%%Pages: 1
%%BoundingBox: 1118 625 2252 1759
\end{verbatim}
\end{itemize}

\section {Vector Data}
\begin{itemize}
\item
Vector data consists largely of coordinates (in mm) with MT (Move To) and LT
(Line To) operators to define a new `path'
\begin{verbatim}
177.728 340.459 MT
174.619 337.35 LT
173.119 341.506 MT
174.932 343.319 LT
171.505 345.549 MT
173.445 347.489 LT
\end{verbatim}
\item
These will be interspersed with operators (defined in the prologue)
to set colour (CL), Line Width, Line Join, Line Cap, etc.
\begin{verbatim}
9 CL 1.0 LW 0 LJ 0 LC
\end{verbatim}
\item
Each path will end with
an ST to `stroke' the current path to write it into the picture.
\begin{verbatim}
ST
\end{verbatim}
\item
Fill area items will be very similar, but will contain a fill operator
\begin{verbatim}
FL
\end{verbatim}
\end{itemize}

\section {Text Data}
\begin{itemize}
\item
Text data will only be present if the new PostScript text capabilities have
been invoked (by setting the hardware bit in the FRT, and providing a
.PSFONTLIST file to translate LSL font numbers to PostScript fonts.
\item
If these new facilities have not been invoked, then text features will have
been reduced to lines and fill areas by the LSL TRI font mechanism.
\item
If enabled, selection of a font will result in PostScript operators to set
colour, size, etc.
\begin{verbatim}
1 CL 78.5156 1.0 /F1 FN 
\end{verbatim}
\item
Actual texts will contain a position, a literal text, and a `show' operator:
\begin{verbatim}
428.644 614.11 MT
(Hello World) SH
\end{verbatim}
\end{itemize}

\section {Image Data}
\begin{itemize}
\item
Image data is written by default in a run-length encoded compressed form, which
is unpicked by the image operators (eg IMB1) defined in the prologue.
It starts with numbers of pixels in the two axes, followed by pixel sizes and 
origin.
\item
An example for bit data might be:
\begin{verbatim}
1034 252 0.0 5.916887 5.916887 0.0 0.8593748 0.6516498 1 IMB1
7F7F7F0B884884078323820A8233826E8E2C823A8D728F7F7F7F4088488407842184088432826E8E
2C82358E70907F7F7F4588488506842085088432826E8D2D832F8D70927F7F7F4988488506842085
...
0688088609825A820D8310827F57847F7F238278893E8A0B8A558A068905880789068459820C8312
817F56855F
\end{verbatim}
\end{itemize}

\section {Conclusion}
\begin{itemize}
\item
The LSL LAMPS PostScript driver can produce high quality plots containing
vector, area, text, and image data on a wide variety of PostScript devices.
\item
If you want to discuss the technical basis for this note, feel free to 
telephone me on 0223 420414.
\end{itemize}


\vspace{20mm}
{\em Paul Hardy, Chief Programmer\\
Issue 1.0 of 20/8/93, describing LAMPS V4.2}
\end{document}
