.PAGE

.!******************************************************************************
.!*** First page, introduction						     ***
.!******************************************************************************

.BR
^*--------------------------------------------------------------------------------\*
.BR
^*MODULE#####IPATCH\*
.INDEX IPATCH

.P0
^*--------------------------------------------------------------------------------\*
.BR
^*REPLACES\*###DAMP module IED
.INDEX DAMP
.INDEX DAMP > IED

.P0
^*--------------------------------------------------------------------------------\*
.HL 2 ^*FUNCTION\*
.INDEX IMP > module functions > IPATCH
.INDEX IPATCH > function

.LM +10

.P0; IPATCH is the IFF file patch editor. It allows the user to inspect,
edit or delete the various entries in the file. The file is not copied, and 
changes made in write mode are performed in-situ. Thus it is not possible to
add extra information.

.P0
.INDEX IPATCH > default mode
The default mode of operation is to open the IFF file for reading only.

.LM -10

.TP 17
.P0
^*--------------------------------------------------------------------------------\*
.HL 2 ^*FORMAT\*

.LM +10

.P0
$ IPATCH IFF-file-spec

.P0;^*Command#qualifiers######################Defaults\*

.INDEX IPATCH > command qualifiers
.INDEX IPATCH > command qualifiers > /COMMANDS
.INDEX IPATCH > command qualifiers > /FRT
.INDEX IPATCH > command qualifiers > /JOURNAL
.INDEX IPATCH > command qualifiers > /LOG
.INDEX IPATCH > command qualifiers > /REVISION__LEVEL
.INDEX IPATCH > command qualifiers > /STATUS
.INDEX IPATCH > command qualifiers > /WRITE

.P0;  /[NO]COMMANDS[=file-spec]###############/NOCOMMANDS
.BR;  /[NO]FRT[=file-spec]####################/NOFRT
.BR;  /[NO]JOURNAL[=file-spec]################/NOJOURNAL
.BR;  /[NO]LOG################################/NOLOG
.BR;  /[NO]REVISION__LEVEL=integer#############/REVISION__LEVEL=-1
.BR;  /[NO]STATUS#############################/STATUS
.BR;  /WRITE##################################Open file for read only

.LM -10

.TP 10
.P0
^*--------------------------------------------------------------------------------\*
.HL 2 ^*PROMPTS\*

.INDEX IPATCH > prompts

.LM +10

.P0; __IFF file: IFF-file-spec

.P0
IPATCH is an interactive, command driven utility. Command input is expected
when the following prompt is issued:

.P+12
IPATCH_>

.P0
Editing commands may also prompt for values - the prompt used depends upon
the answer required.

.LM -10

.TP 10
.P0
^*--------------------------------------------------------------------------------\*
.HL 2 ^*PARAMETER\*
.INDEX IPATCH > parameter

.LM +10

.P-10
IFF-file-spec

.P-2
-#specifies the IFF file to be edited.

.P0
.INDEX IPATCH > and LSL$IF:
.INDEX IPATCH > default file-specs > IFF file
Any part of the file-spec that is not specified will be completed from the 
default of "LSL$IF_:IFF.IFF;0"

.LM -10

.!******************************************************************************
.!*** Command line switches (qualifiers)				     ***
.!******************************************************************************

.TP 10
.P0
^*--------------------------------------------------------------------------------\*
.HL 2 ^*QUALIFIERS\*

.INDEX IPATCH > command qualifiers

.LM +10

.P-10;/COMMANDS [=file-spec]
.I-10;/NOCOMMANDS
.INDEX IPATCH > command qualifiers > /COMMANDS
.INDEX IPATCH > default file-specs > command file

.P-2;-#specifies that commands will be taken from a file, instead of from
prompts to the user. The file-spec defaults to 'IFF-name'.IPATCH, where
'IFF-name' is the name of the IFF file being edited.

.P0; If the last command in the command file is not EXIT, then a warning
message will be given, and IPATCH will start to prompt for commands.

.P0; Great care should be taken when using the /COMMANDS switch, as IPATCH
will not stop editing when an error occurs. This can mean that a command
file could have disastrous effects due to a small difference between the
file on which the commands were journalled and the file on which /COMMANDS
is used.

.P-10;/FRT=file-spec
.I-10;/NOFRT
.INDEX IPATCH > command qualifiers > /FRT
.INDEX IPATCH > default file-specs > FRT file

.P-2;-#specifies an FRT (Feature Representation File) to be read.
Missing parts of the file-spec are taken from 'LSL$FRT:.FRT'.

.P0; Only the ACD (Attribute Code Definition) part of the FRT is
relevant to IPATCH. If no FRT file is given, then only the default
attribute codes will be known to IPATCH.

.P-10;/JOURNAL [=file-spec]
.I-10;/NOJOURNAL
.INDEX IPATCH > command qualifiers > /JOURNAL
.INDEX IPATCH > default file-specs > journal file

.P-2;-#specifies that commands will be journalled to a file. The file-spec
defaults to 'IFF-name'.IPATCH, where 'IFF-name' is the name of the IFF file
being edited.

.P0; Note that everything that the user types is journalled, before the
program attempts to obey the line. Thus the journal file contains a complete
record of the IPATCH session. The journal file can be very valuable
documentation when a problem with IPATCH is being reported to Laser-Scan.

.P0
.INDEX IPATCH > journalling of _<CTRL/Z_>
If _<CTRL/Z_> is used to exit from IPATCH, this will be journalled as
if the EXIT command had been used. Therefore all normal journal files will
end with EXIT.

.P-10;/LOG
.I-10;/NOLOG
.INDEX IPATCH > command qualifiers > /LOG

.P-2;-#specifies that extra information is to be written to the terminal.

.P0; When the program starts up, the name of the IFF file, and of any command
or journal files, are logged. When the program exits, a message containing
the IFF file name is output.

.P0; If /COMMAND has been used to specify that commands be taken from a
file, the /LOG command makes IPATCH reflect each command line to the terminal as
it is read.

.P-10;/REVISION__LEVEL=integer
.I-10;/NOREVISION__LEVEL
.INDEX IPATCH > command qualifiers > /REVISION__LEVEL

.P-2;-#specifies the IFF input revision level to be used for reading the
IFF file. The default of -1 causes all entries to be displayed exactly
as they are in the file, but 0 may be used to force CB entries to be
displayed as ST or ZS entries, while 1 may be used to force ST or ZS
entries to be displayed as CB entries.

.P-10;/STATUS
.I-10;/NOSTATUS
.INDEX IPATCH > command qualifiers > /STATUS
.INDEX IPATCH > status lines
.INDEX IPATCH > STATUS ON command

.P-2;-#specifies that the program should write and maintain the status area
at the top of the screen. This is more or less the effect that would be
gained if the command STATUS ON could be given as soon as the program starts
up.

.P0; This is the default state when the program is running with its
output directed to a terminal. To suppress the status area, use the /NOSTATUS
switch.

.P-10;/WRITE
.INDEX IPATCH > command qualifiers > /WRITE

.P-2;-#specifies that the IFF file is to be opened for writing. The default is
to open the IFF file for reading only, which means that it can be
inspected but not edited. When /WRITE is specified, entries may be edited or
deleted. Note that all edits take effect immediately - they are not buffered up
for execution later. 

.LM -10

.!******************************************************************************
.!*** Description             						     ***
.!******************************************************************************

.TP 10
.P0
^*--------------------------------------------------------------------------------\*
.HL 2 ^*DESCRIPTION\*
.INDEX IPATCH > description

.LM +10

.HL 3 ^^^*General\*

.P 0
IPATCH is the primary means of inspecting an IFF file at the entry level,
and of altering the data in that form. It thus provides a sophisticated
set of movement and search commands to allow movement within the file, and
editing commands tailored to each entry to facilitate alteration of data.
It is also possible to delete an entry or a series of entries.

.TP 10
.P 0
.INDEX IPATCH > limitations
The things that IPATCH will not do are:

.LIST "o"
.LE; edit the HI entry - the history entry is maintained by utility programs
as a record of an IFF file's life, and may not be altered.
.LE; edit the MH entry - apart from amending the customer number. The format
of the map header is customer dependent, so a program tailored for the
particular customer should be used.
.LE; edit the MD entry - the map descriptor describes the current form of
the positional data in the IFF file, and is only changed when the data itself
is changed. Use the ITRANS utility to transform the IFF file.
.LE; edit a broken file - use the IMEND utility to mend an improperly
terminated IFF file. IMEND should always be used on a broken file before
an attempt is made to do anything with it.
.END LIST

.TP 10
.P 0
.INDEX IPATCH > dangers of use
The dangers of using IPATCH are:

.LIST "o"
.LE; editing is performed in-situ, so that any edit performed is permanent.
Always take a copy of the IFF file before editing it with IPATCH.
.LE; it is possible to move to a random position in the IFF file, using
the FIND command. Editing at such a random position can then scramble the
entries that enclose the position.
.LE; if an editing session has been journalled to a file, great care should
be taken when replaying it, as IPATCH will almost always continue after
a problem.
.END LIST

.LM -10
     
.!******************************************************************************
.!*** General discussion      						     ***
.!******************************************************************************

.TP 10
.P0
^*--------------------------------------------------------------------------------\*
.HL 3 ^^^*How the PREVIOUS command works\*
.INDEX IPATCH > PREVIOUS command > how it works
.INDEX IPATCH > file scanning
.LM +10

.P0; The PREVIOUS command allows movement backwards in the IFF file.
Unfortunately, the IFF library does not support sequential backwards movement -
it provides a next-entry call and a go-to-this-position call, but not a
previous-entry call. Therefore IPATCH has to maintain some sort of list of
where the entries before the current one are.

.P0
.INDEX IPATCH > NEXT command > and PREVIOUS
.INDEX IPATCH > TYPE command > and PREVIOUS
What IPATCH actually does is keep a list of the addresses of NF
entries, starting at the start of file. This list is updated every time the
NEXT or TYPE commands are used to move beyond its end - effectively the list is
'stretched' by successive NEXT commands.

.LM -10
.TP 5
.FLAGS OVERSTRIKE
.NO FILL

_<------------scanned-area----------_>
RA..........NF..........NF..........NF..........NF..........NF..........NF..
                             _^%|
                      current position
.FILL
.NO FLAGS OVERSTRIKE
.LM +10
       
.P0
.INDEX IPATCH > 'feature' and NFs
Whilst the current position is between two NF entries in the list,
IPATCH also reads in the addresses of all the entries in the relevant
'feature', where a 'feature' is considered to start at one
NF entry and end just before the next.

.P0;The program can thus move backwards within the current 'feature' very
quickly. If it needs to move further back, it will read each previous 'feature'
in as it goes, until it reaches the required entry.

.LM -10
.TP 5
.FLAGS OVERSTRIKE
.NO FILL

_<------------scanned-area----------_>
RA..........NF..........NF..........NF..........NF..........NF..........NF..
                                                      _^%|
                                               current position
.FILL
.NO FLAGS OVERSTRIKE
.LM +10

.P0
.INDEX IPATCH > FIND command > and PREVIOUS
.INDEX IPATCH > EOF command > and PREVIOUS
However, searching for an entry, or using the FIND or EOF commands,
can move the current position beyond the end of the area that IPATCH has
in its list. In this case, the status area will note that "PREVIOUS will
have to scan". If the PREVIOUS command is given, IPATCH will have to extend
the list by scanning from the last NF it knows about up to the NF after
the current position.

.LM -10
.TP 5
.FLAGS OVERSTRIKE
.NO FILL

_<----------------------scanned-area------------------------_>
RA..........NF..........NF..........NF..........NF..........NF..........NF..
                                                      _^%|
                                               current position
.FILL
.NO FLAGS OVERSTRIKE
.LM +10

.P0; The list can now be used to move backwards. However, it should be realized
that in a large IFF file the new current position could easily be a very long
way beyond the scanned area. In these circumstances, the PREVIOUS command could
involve quite a long delay as IPATCH looks for all the intermediate NF entries. 

.P0
.INDEX IPATCH > FIND command > and PREVIOUS
A side effect of having the PREVIOUS list is encountered when using
the FIND command to position within the IFF file. If the address moved to
is within the scanned area, then IPATCH will be able to tell if the entry
found is reachable by a sequence of NEXT commands from the start of the
file. If this is not the case, then the entry is "not simply reachable",
and a warning message will be output to that effect. In this case, it is
likely that the entry is not real, but just a coincidental bit pattern that
looks superficially like an IFF entry.                   
 
.LM -10

.TP 10
.P0
^*--------------------------------------------------------------------------------\*
.HL 3 ^^^*Wildcarding\*
.INDEX IPATCH > wildcards
.INDEX IPATCH > _* > as a wildcard

.LM +10

.P0; The wildcard character, _*, may be used as a placeholder when searching
and when editing in line mode. It allows the specification of a  value when
earlier values are not required. For instance, to search for an AC with a
particular text, give the command 

.P8;IPATCH_> ^*AC _* _* "Text that is wanted by the user"_<CR_>\*

.P0; This says that the AC type and value may take any value, and that it
is only the text that is important.

.P0; Similarly, editing the AC when it is found could use wildcards - for
instance

.P8;IPATCH_> ^*/ _* _* "Text that was wanted"_<CR_>\*

.P0; edits the text, ignoring the AC type and value.

.LM -10

.TP 10
.P0
^*--------------------------------------------------------------------------------\*
.HL 3 ^^^*Comments\*
.INDEX IPATCH > comments
.INDEX IPATCH > comments > delimitor
.INDEX IPATCH > _! > comment delimitor
.ENTRY IPATCH > _! > see comments

.LM +10

.P0; The _! character (exclamation mark) introduces a comment - anything
after the comment character is not to be obeyed by the program.
The comment character may occur at the start of a line, or after
a valid command.

.P0
.INDEX IPATCH > comments > journalling of
If journalling is in progress (due to the /JOURNAL switch) then comments
are journalled like any other input.
 
.LM -10

.TP 10
.P0
^*--------------------------------------------------------------------------------\*
.HL 3 ^^^*Searching\*
.INDEX IPATCH > searching

.LM +10

.P0; It is possible to ask IPATCH to find the next occurrence of a particular
entry, possibly specifying values for the contents of that entry.

.P0; IPATCH will move forwards through the IFF file until it either finds
an entry which satisfies the search request, or reaches the end of file.
If it finds an entry, then it makes that entry current. If it reaches end
of file, it gives a warning message and does not move the current position
- ie the entry that was current before the search is still current.
     
.P0; The basic search request is simply the name of the entry - for instance

.P8; IPATCH_> ^*AC_<CR_>\*

.P0; will look for the next AC entry, and

.P8; IPATCH_> ^*FS 245_<CR_>\*

.P0; will look for the next FS entry, with feature code 245. Note that this
search request is equivalent to the (unnecessarily) wildcarded request

.P8; IPATCH_> ^*FS 245 _* _* _*_<CR_>\*

.P0; Finally, the search request

.P8; IPATCH_> ^*NF _* 701_<CR_>\*

.P0; will search forwards for an NF entry with internal sequence number
701, and any feature serial number.

.LM -10

.!******************************************************************************
.!*** Commands                						     ***
.!******************************************************************************

.PAGE
.SUBTITLE
.FIGURE 5
.STYLE HEADERS ,,,,1
.HL 2 ^*IPATCH_ commands\*
.STYLE HEADERS ,,,,7

.!******************************************************************************
.PAGE
.SUBTITLE _* command
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*_*\*
.INDEX IPATCH > _* command
.INDEX IPATCH > _* > as a command
.ENTRY IPATCH > rewind file > see _* command

.LM +8
.P0; Moves the current position back to the start of the file.
.LM -8

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*FORMAT:		_*\*

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION:\*

.P0; The _* command moves the current position back to the start
of the IFF file, before the first entry.

.P0; This command is the only command which may be followed by another command
on the same line. This second command will be obeyed after moving to the start
of the file - for instance _*NEXT would move to the first entry in the file.
Note that it is not necessary to separate the _* and the succeeding command
with spaces. 

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Examples:\*
             
.P0;IPATCH_> ^*_*_<CR_>\*
.BR;00000000: Start of file
.BR;IPATCH_> 

.P0;IPATCH_> ^*_*NEXT 5_<CR_>\*
.BR;000011D6:#NS##"created by IFROMTEXT at 15:39:49 on 30-OCT-85"
.BR;IPATCH_> 

.!******************************************************************************
.PAGE
.SUBTITLE _? command
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*_?\*
.INDEX IPATCH > _? command
.ENTRY IPATCH > print current entry > see _? command

.LM +8
.P0; Prints the current entry out again.
.LM -8

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*FORMAT:		_?\*

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION:\*
.P0; The _? command prints the current entry out again, in
the same format as produced by NEXT. It does not change the current entry.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Examples:\*

.P0;0000123B:#NF####170######1
.BR;IPATCH_> ^*?_<CR_>\*
.BR;0000123B:#NF####170######1
.BR;IPATCH_> 

.!******************************************************************************
.PAGE
.SUBTITLE _/ command
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*_/\*
.INDEX IPATCH > _/ command
.INDEX IPATCH > edit mode
.ENTRY IPATCH > _/ command > see edit mode
.ENTRY IPATCH > edit mode > see _/ command

.LM +8
.P0; Introduces edit mode.
.LM -8

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*FORMAT:		_/ \*
.BR;^*#######		_/ values\*
.BR;^*#######		_/ command value\*

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION:\*
.P0; The _/ command introduces edit mode.

.P0; There are three forms of edit mode:
.INDEX IPATCH > edit mode > forms of

.LIST "o"
.LE; Prompt mode, where the program prompts for values
.LE; Line mode, where the new values are presented on the command line in
the appropriate order (possibly including wildcards)
.LE; Command mode, where the field to be edited is identified by a command
followed by the new value
.END LIST

.P0; Note that it is only possible to edit an entry when the IFF file has
been opened /WRITE.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Prompt mode\*
.P8; _/
.INDEX IPATCH > edit mode > prompt mode

.P0; If the _/ command is given on a line by itself, then prompt mode
is entered. A prompt is given for each field of the current entry, and a
new value may be given as reply. A reply of _<CR_> is taken to mean
that the original value should be used. _<CTRL/Z_> is treated as _<CR_>

.P0; Prompt mode is not supported for the CP, CC, ST, ZS, or CB entries.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Line mode\*
.P8; _/ values
.INDEX IPATCH > edit mode > line mode

.P0; If the _/ command is immediately followed by appropriate values
on the command line, then those values will be used to replace the fields
of the current entry, in the relevant order. The wildcard character (_*)
may be used as a position holder for a field which is not to be changed.

.P0; Line mode is not supported for the CP, CC, ST, ZS, or CB entries.

.TP 10
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Command mode\*
.P8; _/ command value
.INDEX IPATCH > edit mode > command mode

.P0; Almost all entries may be edited in command mode. For each such entry,
a series of command mnemonics are supplied to allow individual fields (or
parts of fields) to be altered. For instance, the FS entry edit command
/FC#5 sets the feature code to 5.

.P0; See the documentation for each IFF entry for a definition of the edit
commands available.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Examples:\*

.P0;00001236:#NO######1###0000##00000000
.BR;IPATCH_> ^*/ LAYER 2_<CR_>\*
.BR;00001236:#NO######2###0000##00000000
.BR;IPATCH_> ^*/ _* _* 1714_<CR_>\*
.BR;00001236:#NO######1###0000##00001714
.BR;IPATCH_> ^*NEXT_<CR_>\*
.BR;0000123B:#NF####170######1
.BR;IPATCH_> ^*/_<CR_>\*
.BR;FSN:#
.BR;ISN:#170
.BR;0000123B:#NF####170####170
.BR;IPATCH_> ^*NEXT_<CR_>\*
.BR;0000123E:#FS####123###0000###0000###0000
.BR;IPATCH_> ^*/ TEXT_<CR_>\*
.BR;0000123E:#FS####123###0000###8000###0000
.BR;IPATCH_> ^*/ POSITION 3_<CR_>\*
.BR;0000123E:#FS####123###0000###8003###0000
.BR;IPATCH_> ^*NEXT_<CR_>\*
.BR;00001243:#AC#Height#(3)#=#67.9##"This#text#belongs#to#a#type#3#AC.."
.BR;IPATCH_> ^*/ Contour 70 "This#text#belongs#to#a#type#2#AC.."_<CR_>\*
.BR;00001243:#AC#Contour#(2)#=#70##"This#text#belongs#to#a#type#2#AC.."
.BR;IPATCH_> 

.!******************************************************************************
.PAGE
.SUBTITLE DELETE command
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DELETE\*
.INDEX IPATCH > DELETE command

.LM +8
.P0; Deletes the current entry
.LM -8

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*FORMAT:		DELETE\*

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION:\*
.P0; The DELETE command deletes the current entry, replacing it by a void
(VO) entry of the appropriate size. This command does not do anything if
the file is not opened for write.

.P0
.INDEX IPATCH > DELETE command > and marks
Note that if there is a current mark (see the MARK command), the DELETE
command will have removed it.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Warning messages:\*

.P0; The following warning messages are specific to the DELETE command:

.LM +4
.P0;GOTOVO, error returning to just deleted entry (void)
.BR;NEXTDEL, error moving to next entry, to delete this one
.BR;NOCURDEL, no current entry to delete
.BR;NOTWRITE, IFF file has not been opened for write
.LM -4

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Examples:\*

.LIST
.LE; an attempt to delete an entry in a file that has been opened for read:

.P0;0000123B:#NF####170######1
.BR;IPATCH_> ^*DELETE_<CR_>\*
.BR;%IPATCH-W-NOTWRITE, IFF file has not been opened for write
.BR;0000123B:#NF####170######1
.BR;IPATCH_> 

.LE; deleting the same entry when the file has been opened for write:

.P0;0000123B:#NF####170######1
.BR;IPATCH_> ^*DELETE_<CR_>\*
.BR;0000123B:#VO######2
.BR;IPATCH_> 

.END LIST

.!******************************************************************************
.PAGE
.SUBTITLE DELETE MARK command
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DELETE MARK\*
.INDEX IPATCH > DELETE MARK command

.LM +8
.P0; Delete entries from the marked entry to the previous entry.
.LM -8

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*FORMAT:		DELETE MARK\*

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION:\*
.P0; The DELETE MARK command deletes all entries from (and including) the
marked entry to the previous entry. The deleted entries are replaced by
a void (VO) entry of the appropriate size. The current entry is not deleted.

.P 0
.INDEX IPATCH > DELETE MARK command > and marks
The marked entry (at which deletion starts) is indicated with the MARK command.
Note that after DELETE MARK, there is no longer any mark on the (now voided)
entry.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Warning messages:\*

.P0; The following warning messages are specific to the DELETE MARK command:

.LM +4
.P0;DELORDER, current entry is before the marked entry - can't delete to
the mark
.BR;MARKDEL, no marked entry to delete from
.BR;NOTWRITE, IFF file has not been opened for write
.LM -4

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Examples:\*

.P0;0000123B:#NF####170######1
.BR;IPATCH_> ^*DELETE MARK_<CR_>\*
.BR;0000123B:#NF####170######1
.BR;IPATCH_> ^*PREVIOUS_<CR_>\*
.BR;00001224:#VO#####22
.BR;IPATCH_> 

.!******************************************************************************
.PAGE
.SUBTITLE DISPLAY OFF command
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DISPLAY OFF\*
.INDEX IPATCH > DISPLAY OFF command
.INDEX IPATCH > DISPLAY OFF command > and NEXT

.LM +8
.P0; Stop NEXT command displaying intermediate entries
.LM -8

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*FORMAT:		DISPLAY OFF\*

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION:\*
.P0; After this command, NEXT will only print out the destination entry.
Thus the command NEXT 5 would not print out the intermediate entries (entries
1 to 4), but only the 5th entry, which becomes current.

.P0; This is the default state.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Information messages:\*

.P0; The following information messages are specific to the DISPLAY OFF
command:

.LM +4
.P0;DISPLAYOFF, NEXT will now only display the destination entry
.LM -4

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Examples:\*

.P0;IPATCH_> ^*DISPLAY OFF_<CR_>\*
.BR;%IPATCH-I-DISPLAYOFF, NEXT will now only display the destination entry
.BR;IPATCH_> ^*NEXT 5_<CR_>\*
.BR;0000126B:#EF
.BR;IPATCH_> 
   
.!******************************************************************************
.PAGE
.SUBTITLE DISPLAY ON command
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DISPLAY ON\*
.INDEX IPATCH > DISPLAY ON command
.INDEX IPATCH > DISPLAY ON command > and NEXT

.LM +8
.P0; Enable the display of intermediate entries by NEXT
.LM -8

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*FORMAT:		DISPLAY ON\*

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION:\*
.P0; After this command, NEXT will print out all entries that it passes
over. Thus the command NEXT 5 would print out the intermediate entries (entries
1 to 4), as well as the 5th entry, which becomes current. 

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Information messages:\*

.P0; The following information messages are specific to the DISPLAY ON command:

.LM +4
.P0;DISPLAYON, NEXT will now display intermediate entries
.LM -4

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Examples:\*

.P0;IPATCH_> ^*DISPLAY ON_<CR_>\*
.BR;%IPATCH-I-DISPLAYON, NEXT will now display intermediate entries
.BR;IPATCH_> ^*NEXT 5_<CR_>\*
.BR;0000126C:#NF####170######2
.BR;0000126F:#FS####123###0000###0000###0000
.BR;00001274:#AC#Height#(3)#=#67.9##"This text belongs to a type 3 AC.."
.BR;00001289:#TH#####30
.BR;0000128B:#ST######4###0000
.BR;IPATCH_> 

.!******************************************************************************
.PAGE
.SUBTITLE EOF command
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*EOF\*
.INDEX IPATCH > EOF command
.INDEX IPATCH > EOF command > and PREVIOUS

.LM +8
.P0; Move current position to the end of file
.LM -8

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*FORMAT:		EOF\*

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION:\*
.P0; The EOF command moves the current position to the end of the IFF file,
after the last entry. Note that the first attempt to PREVIOUS from the end of
file will cause IPATCH to scan up to the end, which can take a while for a
large file. 

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Examples:\*

.P0;0000128B:#ST######4###0000
.BR;IPATCH_> ^*EOF_<CR_>\*
.BR;00006199:#End#of#file
.BR;IPATCH_> 

.!******************************************************************************
.PAGE
.SUBTITLE EXIT command
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*EXIT\*
.INDEX IPATCH > EXIT command
.ENTRY IPATCH > _<CTRL/Z_> > see EXIT command

.LM +8
.P0; Exit from the IPATCH program
.LM -8

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*FORMAT:		EXIT\*

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION:\*
.P0; The EXIT command causes IPATCH to exit. Note that any editing performed
by IPATCH was done at the time it was requested, not at the time of EXIT.

.P0; _<CTRL/Z_> (pressing the Ctrl and Z keys together) may also be used
to exit the program.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Examples:\*

.P0;IPATCH_> ^*EXIT_<CR_>\*
.BR;#ELAPSED: 00:05:25.84  CPU: 0:00:05.71  BUFIO: 281  DIRIO: 46  FAULTS: 263 
.BR;_$

.!******************************************************************************
.PAGE
.SUBTITLE EXPLAIN command
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*EXPLAIN\*
.INDEX IPATCH > EXPLAIN command

.LM +8
.P0; Explain the current entry
.LM -8

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*FORMAT:		E\*
.BR;^*#######		EXPLAIN\*

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION:\*
.P0; The EXPLAIN command causes IPATCH to explain the meaning of the current
entry. The fields of the entry will be named, and any bit-set fields will
be explained.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Examples:\*

.P0;0000128B:#ST######4###0000
.BR;IPATCH_> ^*EXPLAIN_<CR_>\*
.BR;0000128B:#ST######4###0000
.BR;2-dimensional#point#string#entry
.BR;-#size#of#entry#=##16#words
.BR;-#number#of#points#=#4
.BR;-#flag#bits#=#0000#-#ie#pen###UP#to#first#point
.BR;IPATCH_> ^*FS_<CR_>\*
.BR;000012A0:#FS####123###0000###0000###0000
.BR;IPATCH_> ^*EXPLAIN_<CR_>\*
.BR;000012A0:#FS####123###0000###0000###0000
.BR;Feature#Status#entry
.BR;-#size#of#entry#=###4#words
.BR;-#FC#(feature#code)####123
.BR;-#word#2#=#0000#hex
.BR;####CLOSED###=#0####(feature#is#open)
.BR;####NOTEDGE##=#0####(feature#is#an#edge,#not#a#line)
.BR;####REVERSE##=#0####(feature#is#not#reversed)
.BR;####TWOPART##=#0####(feature#is#not#two-part)
.BR;####PAINTOUT#=#0####(feature#is#not#paintout#-#keep#it)
.BR;####SQUARE###=#0####(squaring#flag#clear)
.BR;####INVERSE##=#0####(normal#polarity)
.BR;####SUPPRESS#=#0####(no#paintout#suppress)
.BR;-#word#3#=#0000#hex
.BR;####text/symbol#bits#=##0###(linear#feature)
.BR;####PC#=#####0######(process#code)
.BR;-#word#4#=#0000#hex#-#user#specific#data
.BR;IPATCH_> 

.!******************************************************************************
.PAGE
.SUBTITLE FIND command
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*FIND\*
.INDEX IPATCH > FIND command
.INDEX IPATCH > FIND command > problems with
.INDEX IPATCH > FIND command > and NEXT
.ENTRY IPATCH > FIND command > see also file scanning

.LM +8
.P0; Move to a given address in the file
.LM -8

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*FORMAT:		F### address\*
.BR;^*#######		FIND address\*

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Command parameters:\*

.LM +8
.P-8;address
.P0; The hexadecimal address within the IFF file which is to be made the
new current position
.LM -8

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION:\*
.P0; The FIND command changes the current position to the given hexadecimal
address in the IFF file, and takes in hand any entry there. 

.P0; If the program has scanned past that address (for instance by using
NEXT to move past it), then IPATCH will report if it does not believe that
the entry that you have positioned to is 'real' - that is, reachable by
a sequence of NEXT commands from the start of file.

.P0; The FIND command is mainly intended to allow inspection of an IFF file
after a corrupted area, which may stop the NEXT command from working over
that area. It can also be useful for finding a problem reported by a utility
program, when the error message contained an IFF file address.

.P0; You should realize, however, that using a series of NEXT entries from
a random position in the file can sometimes provide a superficially sensible
set of entries, even though they are only due to the accidental bit patterns
caused by the real entries in that area.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Warning messages:\*

.P0; The following warning messages are specific to the FIND command:

.LM +4
.P0;BADFIND, cannot find before 00000001 or after 'end-of-file' - nothing
there
.BR;NOADDRESS, no (hexadecimal) address given after FIND
.BR;NOENTRY, no entry at that position
.BR;NOTENTRY, entry 'entry' at 'hex-address' is not simply reachable
.LM -4

.TP 15
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Examples:\*
    
.P0;IPATCH_> ^*FIND 128B_<CR_>\*
.BR;0000128B:#ST######4###0000
.BR;IPATCH_> ^*FIND 123_<CR_>\*
.BR;%IFF-E-IFFERR, IFF error BINC on LUN 1
.BR;%IFF-E-IFFERR, IFF error BINC on LUN 1
.BR;%IPATCH-W-NOTENTRY, entry XX at 00000123 is not simply reachable
.BR;00000123:#XX####249
.BR;IPATCH_> 

.!******************************************************************************
.PAGE
.SUBTITLE FRT command
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*FRT\*
.INDEX IPATCH > FRT command

.LM +8
.P0; Read in an FRT file
.LM -8

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*FORMAT:		FRT file-spec\*

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Command parameters:\*

.LM +8
.P-8;file-spec
.P0; The name of the FRT file to be read.
Missing parts of the file-spec are taken from 'LSL$FRT:.FRT'.
.LM -8

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION:\*
.P0; The FRT command causes an FRT file to be read, possibly as a
replacement for one specified on the IPATCH command line. The FRT
library may produce messages concerning any errors in the FRT file.

.P0; Only the ACD (Attribute Code Definition) part of the FRT is
relevant to IPATCH.

.!******************************************************************************
.PAGE
.SUBTITLE HELP command
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*HELP\*
.INDEX IPATCH > HELP command

.LM +8
.P0; Give help on a subject
.LM -8

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*FORMAT:		H### subject\*
.BR;^*#######		HELP subject\*

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Command parameters:\*

.LM +8
.P-8;subject
.P0; The subject on which help is required
.LM -8

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION:\*
.P0; The HELP command looks the rest of the line up in the IPATCH HELP library.
This library contains a brief summary of the operation of each command, and
examples of the operation of each.

.P0; The information is looked up in the IPATCH section of the IMP help
library, LSL$HELP:IMP.HLB.


.!******************************************************************************
.PAGE
.SUBTITLE LINE command
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*LINE\*
.INDEX IPATCH > LINE command

.LM +8
.P0; Look for the next FS with text and symbol bits unset in word 3
.LM -8

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*FORMAT:		LINE\*

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION:\*
.P0; The LINE command performs a search for the next FS entry with the text
and symbol bits both unset in the third word. See the FS entry documentation
for further details. 

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Warning messages:\*

.P0; The following warning messages are specific to the LINE command:

.LM +4
.P0;FSBITS, cannot find linear FS
.LM -4

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Examples:\*

.P0;IPATCH_> ^*LINE_<CR_>\*
.BR;000001F1:#FS######1###0000###0000###0000
.BR;IPATCH_> 


.!******************************************************************************
.PAGE
.SUBTITLE LIST command
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*LIST\*
.INDEX IPATCH > LIST command

.LM +8
.P0; List the points in the current point string (ST,ZS,CB) entry
.LM -8

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*FORMAT:		L### [from [to]]\*
.BR;^*#######		LIST [from [to]]\*

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Command parameters:\*

.LM +8
.P-8;from
.P0; The lower limit of the sequence of points to be listed.
.P-8;to
.P0; The upper limit of the sequence of points to be listed
.LM -8

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION:\*

.P0; The LIST command types the specified points from the current ST, ZS,
or CB entry.

.P0; If no parameters are specified, then all of the points will be listed.
If only one parameter is specified, then all the points starting with the
from'th will be listed. If both parameters are specified, then the from'th
to to'th points will be listed.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Warning messages:\*

.P0; The following warning messages are specific to the LIST command:

.LM +4
.P0;INTRANGE, 'integer' is out of range - should be between 1 and 'npts'
.BR;NOTSTRING, LIST will only work for an ST, ZS, or CB
.BR;ORDER, cannot work from 'from' to 'to' - try again in the other
order
.LM -4

.P0                                         
^*--------------------------------------------------------------------------------\*
.BR;^*Examples:\*

.P0;0000125A:#ST######4###0000
.BR;IPATCH_> ^*LIST 2 3_<CR_>\*
.BR;0000125A:#ST######4###0000
.BR;##2:##########0.8506,######16.8394
.BR;##3:##########2.2290,######18.8454
.BR;IPATCH_> 

.!******************************************************************************
.PAGE
.SUBTITLE MARK command
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*MARK\*
.INDEX IPATCH > MARK command
.ENTRY IPATCH > MARK command > see also RETURN
.ENTRY IPATCH > MARK command > see also DELETE
.ENTRY IPATCH > MARK command > see also DELETE MARK

.LM +8
.P0; Mark the current entry
.LM -8

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*FORMAT:		M\*
.BR;^*#######		MARK\*

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION:\*
.P0; The MARK command is used to mark the current entry.

.P0; The RETURN command can then be used at any time to reposition to the
marked entry, and the DELETE MARK command can be used to delete from it.

.P0; The DELETE and DELETE MARK commands both remove the mark from the marked
entry.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Warning messages:\*

.P0; The following warning messages are specific to the MARK command:

.LM +4
.P0;NOCURMARK, no current entry to MARK
.LM -4

.P0;Information messages:

.P0; The following information messages are specific to the MARK command:

.LM +4
.P0;MARKED, current entry now marked
.LM -4

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Examples:\*

.P0;0000126C:#NF####170######2
.BR;IPATCH_> ^*MARK_<CR_>\*
.BR;%IPATCH-I-MARKED, current entry now marked
.BR;0000126C:#NF####170######2
.BR;IPATCH_> 

.!******************************************************************************
.PAGE
.SUBTITLE NEXT command
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*NEXT\*
.INDEX IPATCH > NEXT command
.ENTRY IPATCH > NEXT command > see also DISPLAY ON
.ENTRY IPATCH > NEXT comamnd > see also PREVIOUS
.ENTRY IPATCH > NEXT command > see also file scanning

.LM +8
.P0; Move to the next entry
.LM -8

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*FORMAT:		N### [count]\*
.BR;^*#######		NEXT [count]\*
.BR;^*#######		NEXT _*\*

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Command parameters:\*

.LM +8
.P-8; count
.P0; The number of entries by which to move forwards. This defaults to 1.
.LM -8
           
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION:\*
.P0; The NEXT command is used to move to the next entry in the IFF file,
and make it current. If an integer argument is given, then the effect is as of
repeating the NEXT command that number of times. If NEXT _* is used, then the
effect is as of repeating the NEXT command until the end of file is reached
(and made current). 

.P0; If the DISPLAY ON command has been given, then the intermediate entries
will be displayed. Otherwise only the final entry (the one which is made
current) will be displayed. 

.P0; Note that the NEXT _* command is only obeyed when DISPLAY is ON -
otherwise an error message is given and the command ignored. If you just want
to move to the end of file, use the EOF command. 

.P0; See also the discussion of IFF file scanning.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Warning messages:\*

.P0; The following warning messages are specific to the NEXT command:

.LM +4
.P0;BADNEXT, argument to NEXT must be greater than zero
.BR;NEXTEOF, you can't NEXT off the end of the file
.BR;NEXTERR, NEXT command abandoned after 'integer' entries
.BR;NEXTONE, NEXT command abandoned after 1 entry
.BR;WILDNEXT, DISPLAY is OFF - attempt to do "NEXT _*" ignored
.LM -4

.TP 12
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Examples:\*

.TP 8
.P0;IPATCH_> ^*NEXT 5_<CR_>\*
.BR;00001243:#AC#Height#(3)#=#67.9##"This text belongs to a type 3 AC.."
.BR;00001258:#TH#####30
.BR;0000125A:#ST######4###0000
.BR;0000126B:#EF
.BR;0000126C:#NF####170######2
.BR;IPATCH_> 

.!******************************************************************************
.PAGE
.SUBTITLE PREVIOUS command
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*PREVIOUS\*
.INDEX IPATCH > PREVIOUS command
.ENTRY IPATCH > PREVIOUS command > see also file scanning

.LM +8
.P0; Move to the previous entry
.LM -8

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*FORMAT:		P####### [count]\*
.BR;^*#######		PREVIOUS [count]\*

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Command parameters:\*

.LM +8
.P-8; count
.P0; The number of entries to move backwards by. This defaults to 1.
.LM -8

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION:\*
.P0; The PREVIOUS command is used to move to the previous entry in the IFF file,
and make it current. If an argument is given, then the effect is as of
repeating the PREVIOUS command that number of times, although without
displaying the intermediate entries. 

.P0; See also the discussion of IFF file scanning.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Warning messages:\*

.P0; The following warning messages are specific to the PREVIOUS command:

.LM +4
.P0;DISABOVE, PREVIOUS is disabled above 'address'
.BR;PREVBETWEEN, PREVIOUS will not work between 'address' and 'address'
.BR;PREVBOF, you can't PREVIOUS off the start of the file
.BR;PREVERR, PREVIOUS command abandoned
.BR;PREVNF, error looking for NF entry, during PREVIOUS scan
.BR;PREVXX, error looking for start-of-file entry, during PREVIOUS scan
.LM -4

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Examples:\*

.P0;IPATCH_> ^*NEXT 5_<CR_>\*
.BR;00001243:#AC#Height#(3)#=#67.9##"This text belongs to a type 3 AC.."
.BR;00001258:#TH#####30
.BR;0000125A:#ST######4###0000
.BR;0000126B:#EF
.BR;0000126C:#NF####170######2
.BR;IPATCH_> ^*PREVIOUS_<CR_>\*
.BR;0000126B:#EF
.BR;IPATCH_> ^*PREVIOUS 2_<CR_>\*
.BR;00001258:#TH#####30
.BR;IPATCH_> 

.!******************************************************************************
.PAGE
.SUBTITLE RETURN command
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*RETURN\*
.INDEX IPATCH > RETURN command
.ENTRY IPATCH > RETURN command > see also MARK

.LM +8
.P0; Return to the marked entry
.LM -8

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*FORMAT:		RETURN\*

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION:\*
.P0; The RETURN command makes the marked entry the current entry again.

.P0; The MARK command is used to mark an entry.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Warning messages:\*

.P0; The following warning messages are specific to the RETURN command:

.LM +4
.P0;MARKERR, error in positioning back to MARKed entry
.BR;NOMARK, no marked entry to RETURN to
.LM -4

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Examples:\*

.P0;00001307:#AC#Height#(3)#=#67.9##"This text belongs to a type 3 AC.."
.BR;IPATCH_> ^*RETURN_<CR_>\*
.BR;0000126C:#NF####170######2
.BR;IPATCH_> 

.!******************************************************************************
.PAGE
.SUBTITLE REVISION__LEVEL command
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*REVISION__LEVEL\*
.INDEX IPATCH > REVISION__LEVEL command

.LM +8
.P0; Alter the IFF input revision level.
.LM -8

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*FORMAT:		REVISION__LEVEL level

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Command parameters:\*

.LM +8
.P-8; level
.P0; The new IFF input revision level to use. This must be -1, 0, or 1.
.LM -8

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION:\*
.P0; The REVISION__LEVEL command is used to alter the IFF input revision
level used for reading the file. The original level used defaults to
-1, but may be set using the /REVISION__LEVEL command qualifier.
The default of -1 causes all entries to be displayed exactly
as they are in the file, but 0 may be used to force CB entries to be
displayed as ST or ZS entries, while 1 may be used to force ST or ZS
entries to be displayed as CB entries.
.P0;  After a REVISION__LEVEL command, the current entry is displayed.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Warning messages:\*

.P0; The following warning messages are specific to the REVISION__LEVEL command:

.LM +4
.P0;BADREV, unknown revision level 'integer', must be -1, 0, or 1
.LM -4

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Examples:\*

.P0;IPATCH_> ^*NEXT_<CR_>\*
.BR;0000029E:#ZS######5##0001
.BR;IPATCH_> ^*REVISION__LEVEL#1_<CR_>\*
.BR;0000029E:#CB######5#####01######1######7######5
.BR;IPATCH_> 

.!******************************************************************************
.PAGE
.SUBTITLE STATUS command
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*STATUS\*
.INDEX IPATCH > STATUS command
.ENTRY IPATCH > STATUS command > see also STATUS ON
.INDEX IPATCH > status lines

.LM +8
.P0; Print current status information
.LM -8

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*FORMAT:		STATUS\*

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION:\*
.P0; The STATUS command prints a summary of the current file status. This
is the same information as would be output in the status area if the STATUS
ON command had been given.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Examples:\*

.P0;IPATCH_> ^*STATUS_<CR_>\*
.BR;Reading#file#DUA0:[LSL.IFF]WINNIE__THE__POOH.IFF;2
.BR;current#0000126C###NF###170,#####2#at#0000126C###mark#at#0000126C
.BR;eof#####00006199###revision#levels:#input#-1#output#1
.BR;####5#features#scanned#(below#00001330)
.BR;NEXT#will#not#display#intermediate#entries
.BR;IPATCH_> ^*DISPLAY ON_<CR_>\*
.BR;%IPATCH-I-DISPLAYON, NEXT will now display intermediate entries
.BR;IPATCH_> ^*FS 123_<CR_>\*
.BR;00001368:#FS####123###0000###0000###0000
.BR;IPATCH_> ^*STATUS_<CR_>\*
.BR;Reading#file#DUA0:[LSL.IFF]WINNIE__THE__POOH.IFF;2
.BR;current#00001368###no#previous#known#NF##########mark#at#0000126C
.BR;eof#####00006199###revision#levels:#input#-1#output#1
.BR;####5#features#scanned#(below#00001330)#-#PREVIOUS#will#have#to#scan
.BR;NEXT#will#display#intermediate#entries
.BR;IPATCH_> 

.!******************************************************************************
.PAGE
.SUBTITLE STATUS OFF command
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*STATUS OFF\*
.INDEX IPATCH > STATUS OFF command
.INDEX IPATCH > status lines

.LM +8
.P0; Remove the status area from the screen
.LM -8

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*FORMAT:		STATUS OFF\*

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION:\*
.P0; The STATUS OFF command switches off the status area at the top of the
screen, and clears the screen. The default is to have a status area.

.!******************************************************************************
.PAGE
.SUBTITLE STATUS ON command
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*STATUS ON\*
.INDEX IPATCH > STATUS ON command
.INDEX IPATCH > status lines

.LM +8
.P0; Request the display of a status area
.LM -8

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*FORMAT:		STATUS ON\*

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION:\*
.P0; The STATUS ON command causes IPATCH to write and maintain a status
area at the top of the screen.

.P0; The status area is only supported on ANSI terminals (ie VT100 and VT200
series).

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Warning messages:\*

.P0; The following warning messages are specific to the STATUS ON command:

.LM +4
.P0;CHKTERM, error checking to see if SYS$OUTPUT_: is an ANSI terminal
.BR;NOTANSI, SYS$OUTPUT_: is not an ANSI terminal
.LM -4

.!******************************************************************************
.PAGE
.SUBTITLE SYMBOL command
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*SYMBOL\*
.INDEX IPATCH > SYMBOL command

.LM +8
.P0; Look for the next FS with symbol bit set in word 3
.LM -8

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*FORMAT:		SYMBOL\*

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION:\*
.P0; The SYMBOL command performs a search for the next FS entry with the symbol
bit set and the text bit unset in the third word. See the FS entry
documentation for further details. 

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Warning messages:\*

.P0; The following warning messages are specific to the SYMBOL command:

.LM +4
.P0;FSBITS, cannot find symbol FS
.LM -4

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Examples:\*

.P0;IPATCH_> ^*SYMBOL_<CR_>\*
.BR;00000221:#FS#####54###0000###4000###0000
.BR;IPATCH_> 


.!******************************************************************************
.PAGE
.SUBTITLE TEXT command
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*TEXT\*
.INDEX IPATCH > TEXT command

.LM +8
.P0; Look for the next FS with text bit set in word 3
.LM -8

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*FORMAT:		TEXT\*

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION:\*
.P0; The TEXT command performs a search for the next FS entry with the text
bit set and the symbol bit unset in the third word. See the FS entry
documentation for further details. 

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Warning messages:\*

.P0; The following warning messages are specific to the TEXT command:

.LM +4
.P0;FSBITS, cannot find text FS
.LM -4

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Examples:\*

.P0;IPATCH_> ^*TEXT_<CR_>\*
.BR;00000209:#FS#####28###0000###8083###0000
.BR;IPATCH_> 


.!******************************************************************************
.PAGE
.SUBTITLE TO DECIMAL command
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*TO DECIMAL\*
.INDEX IPATCH > TO DECIMAL command
.INDEX IPATCH > integers > conversion of

.LM +8
.P0; Convert a hexadecimal number to decimal
.LM -8

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*FORMAT:		TO DECIMAL hex-number\*

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Command parameters:\*

.LM +8
.P-8; hex-number
.P0; The hexadecimal number which is to be converted to decimal.
.LM -8

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION:\*
.P0; The TO DECIMAL command translates the given integer value from hexadecimal
to decimal, and prints it out.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Examples:\*

.P0;IPATCH_> ^*TO DECIMAL 123B_<CR_>\*
.BR;123B#hexadecimal#is#4667#decimal
.BR;IPATCH_>

.!******************************************************************************
.PAGE
.SUBTITLE TO DEGREES command
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*TO DEGREES\*
.INDEX IPATCH > TO DEGREES command
.INDEX IPATCH > angles > conversion of

.LM +8
.P0; Convert an angle from radians to degrees
.LM -8

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*FORMAT:		TO DEGREES radians\*

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Command parameters:\*

.LM +8
.P-8; radians
.P0; The real number representing the desired angle in radians.
.LM -8

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION:\*
.P0; The TO DEGREES command translates the given angle from radians to degrees,
and prints it out.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Examples:\*

.P0;IPATCH_> ^*TO DEGREES 3.1415_<CR_>\*
.BR;####3.141#radians#is###179.995#degrees
.BR;IPATCH_>

.!******************************************************************************
.PAGE
.SUBTITLE TO HEXADECIMAL command
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*TO HEXADECIMAL\*
.INDEX IPATCH > TO HEXADECIMAL command
.INDEX IPATCH > integers > conversion of

.LM +8
.P0; Converts a decimal number to hexadecimal
.LM -8

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*FORMAT:		TO HEXADECIMAL integer\*

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Command parameters:\*

.LM +8
.P-8; integer
.P0; The decimal integer which is to be converted to hexadecimal.
.LM -8

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION:\*
.P0; The TO HEXADECIMAL command translates the given integer value from decimal
to hexadecimal, and prints it out.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Examples:\*

.P0;IPATCH_> ^*TO HEX 1234_<CR_>\*
.BR;1234#decimal#is#4D2#hexadecimal
.BR;IPATCH_>

.!******************************************************************************
.PAGE
.SUBTITLE TO RADIANS command
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*TO RADIANS\*
.INDEX IPATCH > TO RADIANS command
.INDEX IPATCH > angles > conversion of

.LM +8
.P0; Converts an angle from degrees to radians
.LM -8

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*FORMAT:		TO RADIANS degrees\*

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Command parameters:\*

.LM +8
.P-8; degrees
.P0; The real number representing the desired angle in degrees.
.LM -8

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION:\*
.P0; The TO RADIANS command translates the given angle from degrees to radians,
and prints it out.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Examples:\*

.P0;IPATCH_> ^*TO RADIANS 89.0_<CR_>\*
.BR;###89.000#degrees#is#####1.553#radians
.BR;IPATCH_>

.!******************************************************************************
.PAGE
.SUBTITLE TYPE command
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*TYPE\*
.INDEX IPATCH > TYPE command

.LM +8
.P0; Types the current entry, or a sequence of entries
.LM -8

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*FORMAT:		T### [count]\*
.BR;^*#######		TYPE [count]\*
.BR;^*#######		TYPE _*\*

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Command parameters:\*

.LM +8
.P-8; count
.P0; The number of entries to type out. This value defaults to 0, which
means type the current entry only. If the value is greater than zero, then
the current entry is not typed, but the next count entries are.
.LM -8

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION:\*
.P0; The TYPE command types out the contents of an entry.

.P0; If no argument is given, then the effect is as of TYPE 0, and the current
entry is typed out. If an integer argument greater than zero is given, then
each of the next count entries (but not the current entry) is typed out, and
the last one is left current. If TYPE _* is used, then the effect is as of
specifying an argument great enough to TYPE to the end of file, which is
left current.

.P0; The typed information is as follows:

.BLANK
.LIST 0,"o"
.LE; RA - as for EXAMINE
.LE; HI - as for EXAMINE
.LE; MH - the map header in hexadecimal words (for type 2 MH entries) or
ASCII (for type 3 or 4 MH entries)
.LE; MD - the map descriptor in hexadecimal words
.LE; CC - as for EXAMINE
.LE; CP - as for EXAMINE
.LE; ST - as for LIST
.LE; ZS - as for LIST
.LE; CB - as for LIST
.LE; all other entries are as for NEXT
.END LIST

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Warning messages:\*

.P0; The following warning messages are specific to the TYPE command:

.LM +4
.P0;BADTYPE, argument to TYPE must be zero or greater
.BR;NEXTEOF, you can't NEXT off the end of the file
.BR;TYPEERR, TYPE command abandoned after 'integer' entries
.BR;TYPEONE, TYPE command abandoned after 1 entry
.LM -4

.!******************************************************************************
.!*** Entry descriptions      						     ***
.!******************************************************************************

.PAGE
.SUBTITLE
.FIGURE 5
.STYLE HEADERS ,,,,1
.HL 2 ^*IFF_ entries\*
.STYLE HEADERS ,,,,7
.CENTRE; ^&Descriptions,_ searching_ and_ editing\&

.BLANK 5

.NOTE Display of values
.INDEX IPATCH > display of values

.P0; The type of a numeric value is indicated by the way in which it is
displayed. Thus an integer will be displayed in the minimum width possible, a
hexadecimal number will always be 2, 4, or 8 digits, padded on the left with
zeroes, and a real number will have a decimal point or be in engineering
format. 

.P0; Texts are displayed within double quotation marks (except within an
EXPLAIN).

.END NOTE

.!******************************************************************************
.PAGE
.SUBTITLE AC entry
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*AC - Ancillary code entry\* 
.INDEX IPATCH > AC entry

.P8; address: AC ## name (type)#=#value ## ["text"]

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION\*

.P0; AC entries are used to hold miscellaneous information. They are composed
of a word (integer_*2) type, a longword (integer_*4, real, date, time,
or character) value and an optional text.

.P0; The type of information held in an AC is determined by the AC type.
Names and data types are associated with the numerical AC type by means
of an FRT file (though some default types are always present).
For a list of currently default AC types, and the method for adding
user defined types via and FRT file, see the IFF and FRT User guides.

.P0; AC types may take values in the range 0-32767. Negative ACs are not
allowed in normal use of IFF files, although IPATCH does not enforce this.
The name of an AC (if defined in the FRT file) may be used in place
of the numerical AC type. If the type is not present in the FRT file,
then the name is displayed as ?, and the datatype is assumed to be
integer.

.P0; AC values are printed in the format defined by the FRT file.
A value may be 'absent'. The absent value is printed as ? (or "" for
a text value). Values should be entered in the same format as that
in which they are printed (including the absent value).

.P0; AC texts may be up to 255 characters in length. However, note that
IPATCH itself can never change the length of a text.

.TP 10
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*SEARCHING\*
.INDEX IPATCH > AC entry > searching
.INDEX IPATCH > searching > AC entry

.P8; AC ## [values required]

.P0; If the search is to be qualified by the contents of the AC, then the
relevant values may be specified. Any values not required may be wildcarded
if necessary. The AC type may be specified either as an integer, or by
using the associated name.

.P0; If the AC type is wildcarded, and the AC value is specified, then IPATCH
has to decide the data type of the desired AC. Only real or integer values are
allowed, and if a real is intended, then it must be unambiguous - it should
contain a decimal point or be in E notation. For instance, AC#_*#100 will
search for an integer value, but AC#_*#100.0 will search for a real. If a date,
time, or character value is required, then the AC type may not be wildcarded. 

.P0; If a specific text is being searched for, IPATCH will stop at the first
AC entry which contains the requested text as a sub-string. Note that the
case of the letters must match exactly. For instance, AC#_*#_*#"UP _& down"
would match the AC

.P8;AC##?#(1234)#=#27##"This text goes UP _& down"

.TP 10
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*EDITING\*
.INDEX IPATCH > AC entry > editing
.INDEX IPATCH > editing > AC entry

.P0; The AC type, value and text (if present) may all be changed independently
or together. If the AC type is changed such that the data-type of the value
(integer, real, date, time, character) should also change, but a new value is
not requested, then in the case of conversion between integer and real, IPATCH
will convert the value. In other cases, IPATCH leaves the value unchanged (i.e.
keeps the same bit pattern), but checks whether the value is in the valid range
for the new AC type. If not the value is changed to 'absent'. For instance: 

.TP 8
.P0;00001243:#AC#Height#(3)#=#67.9##"This#text#belongs#to#a#type#3#AC.."
.BR;IPATCH_> ^*/ TYPE 2_<CR_>\*
.BR;%IPATCH-I-ACNOWINT, value has been converted from real to integer
.BR;00001243:#AC#Contour#(2)#=#68##"This#text#belongs#to#a#type#3#AC.."
.BR;IPATCH_> ^*/ TYPE 3_<CR_>\*
.BR;%IPATCH-I-ACNOWREAL, value has been converted from integer to real
.P0;00001243:#AC#Height#(3)#=#68.0##"This#text#belongs#to#a#type#3#AC.."

.P0; Since IPATCH cannot add new data to the file, it is not possible to
add text data to an AC that does not already contain it.

.P0; If a new text is specified, then if it is too long IPATCH will truncate
it before using it, and if it is too short IPATCH will pad it to the right
with spaces. For instance:

.TP 7
.P0;00001243:#AC#Height#(3)#=#68.0##"This#text#belongs#to#a#type#3#AC.."
.BR;IPATCH_> ^*/ TEXT "This text has been changed to a longer string"_<CR_>\*
.BR;%LSLLIB-E-STRTOOLONG, string is too long - truncated
.P0;00001243:#AC#Height#(3)#=#68.0##"This#text#has#been#changed#to#a#lo"
.BR;IPATCH_> ^*/ TEXT "This text is too short"_<CR_>\*
.P0;00001243:#AC#Height#(3)#=#68.0##"This#text#is#too#short############"

.TP 10
.P0   
^*--------------------------------------------------------------------------------\*
.BR;^*Prompt mode\*

.P0; The following prompts will be made:

.LM +8
.P0; AC type:
.BR; AC value (_<data-type_>):
.BR; AC text:
.LM -8

.P0; where _<data-type_> is either "integer", "real", "date", "time", or
"character", depending on the AC type.

.P0; If a text is specified, it should not be enclosed in quotation
marks. Note that this means that it is not possible to define a text of
all spaces in prompt mode, as the 'trailing' spaces on a response are ignored.
Use line mode or command mode for this purpose.

.P0; A reply of _<CR_> will leave the relevant value
unaltered.

.TP 10
.P0   
^*--------------------------------------------------------------------------------\*
.BR;^*Line mode\*

.P0; The / may also be followed immediately by the new values to be inserted
into the AC. Wildcards may be used as placeholders - for instance

.P8; IPATCH_> ^*/ 2_<CR_>\*

.P0; will change the AC type, and

.P8; IPATCH_> ^*/ _* 80.0 "This is a new text"_<CR_>\*

.P0; changes the value and text field.

.TP 10
.P0   
^*--------------------------------------------------------------------------------\*
.BR;^*Command mode\*

.LM +8
.P-8; / TYPE integer
.BR; Sets the AC type.

.P-8; / VALUE value
.BR; Sets the AC value. The value must be of a datatype appropriate to the
AC type.

.P-8; / TEXT "text"
.BR; Changes the AC text. It is not possible to insert a text longer than the
text already present. The text inserted will be padded with spaces on the
right if necessary.
.LM -8

.!******************************************************************************
.PAGE
.SUBTITLE CB entry
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*CB - Coordinate block entry\* 
.INDEX IPATCH > CB entry

.P8; address: CB ## nrow ## flags ## gtype ## ncol ## natt

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION\*

.P0; The CB entry contains the point data defining the feature. There may
be more than one CB entry in a feature. The CB entry supercedes the ST
and ZS entries. In addition to X and Y coordinates, it may contain
other attributes (ncol in total) on a per-point basis, and also attributes
(natt of them) considered fixed for the entire CB. Attributes may contain
a value indicating 'absent' (equivalent to not present at all) and this
is represented by a question mark '?', or for a character value "".

.LIST
.LE; Each CB should contain no more than 200 points, so a new CB with the
flags set to 1 (ie keep pen down when drawing to the start of this new
CB) will be started for the remaining points.
.LE; If an invisible line is to be coded in the feature, then this is
represented by starting a new CB with the flags set to 0 (ie keep pen
up when moving to the start of this new CB).
.END LIST

.P0; Note that the pen is always considered to be up for the first CB
in a feature - that is the pen is always kept up to move to the start of
a new feature.

.TP 10
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*SEARCHING\*
.INDEX IPATCH > CB entry > searching
.INDEX IPATCH > searching > CB entry

.P8; CB ## [values required]

.P0; If the search is to be qualified by the contents of the CB, then the
relevant values may be specified (in the order in which they are printed
above). Any values not required may be wildcarded if necessary.

.TP 10
.P0
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*EDITING\*
.INDEX IPATCH > CB entry > editing
.INDEX IPATCH > editing > CB entry

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Prompt mode\*

.P0; Prompt mode is not supported for the CB entry.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Line mode\*

.P0; Line mode is not supported for the CB entry.

.TP 10
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Command mode\*

.LM +8

.TP 5
.P-8; / CHANGE from to
.BR; Change the specified points. If only one number is given,
then that one point will be changed. IPATCH will prompt for the new values. If
there is only one point, then no argument is necessary. 

.TP 5
.P-8; / DELETE from to
.BR; Deletes the specified points (rows). If only one number is given,
then that one point will be deleted. If there is only one point, then no
argument is needed. 

.P-8; / FLAGS hex-value
.BR; Specifies a new value for the flags field of the CB. Currently
only the bottom bit (bit 0) is significant, and is used to indicate pen
up or down.

.P-8; / GTYPE value
.BR; Specifies a new value for the gtype field of the CB. This should
be in the range 1-12 (see FRT User's Guide).

.TP 5
.P-8; / ATTRIBUTE name or code
.BR; Change the fixed attribute with the specified name or attribute code.
IPATCH will prompt for a new name/code and value. The same comments as
for AC entries apply if the datatype is changed but a new value is not 
specified.

.LM -8

.!******************************************************************************
.PAGE
.SUBTITLE CC entry
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*CC - Cubic coefficients entry\*
.INDEX IPATCH > CC entry

.P8; address: CC

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION\*

.P0; The CC entry occurs once per section, and is a matrix of size (10_,2)
real numbers (indexed as for Fortran). It defines a transformation between two
coordinate systems to be used by a post-processing program to transform all
points in the file into the same coordinate space. This is necessary when (for
instance) data has been digitised on a Lasertrak. 

.P0; The matrix may be represented as

.LITERAL

			a	k
			b	l
			c	m
			d	n
			e	o
			f	p
			g	q
			h	r
			i	s
			j	t
.END LITERAL

.P0; which represents the transformation

.P5;X' = a + bX + cY + dXX + eXY + fYY + gXXX + hXXY + iXYY + jYYY
.I5;Y' = k + lX + mY + nXX + oXY + pYY + qXXX + rXXY + sXYY + tYYY

.P0; The unit matrix specifies a unit transformation - ie no transformation
is necessary. The unit matrix has all terms 0.0, except for those at (2_,1) and
(3_,2) which are 1.0. In the convention adopted by IPATCH these are the b and m
terms. 

.TP 10
.P0   
^*--------------------------------------------------------------------------------\*
.BR;^*SEARCHING\*
.INDEX IPATCH > CC entry > searching
.INDEX IPATCH > searching > CC entry

.P8; CC

.P0; It is not possible to modify the search by the CC contents.

.P0   
.TP 10
^*--------------------------------------------------------------------------------\*
.BR;^*EDITING\*
.INDEX IPATCH > CC entry > editing
.INDEX IPATCH > editing > CC entry

.TP 10
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Prompt mode\*

.P0; Prompt mode is not supported for the CC entry.

.TP 6
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Line mode\*

.P0; Line mode is not supported for the CC entry.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Command mode\*

.LM +8

.P-8; / letter  value
.BR; 'letter' specifies one of the 20 matrix values, from A to T.
'value' then specifies a real number to replace that position in the CC matrix. 

.P-8; / UNIT
.BR; The UNIT command resets the CC matrix to the unit transformation. All
entries are set to 0.0, except B and M which are set to 1.0. The unit
transformation is the norm for files which have been digitised by
non-distorting hardware (for instance a digitising table via DIGSYS).

.LM -8

.!******************************************************************************
.PAGE
.SUBTITLE CH entry
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*CH - Literal character entry\*
.INDEX IPATCH > CH entry

.P8; address: CH ## "text"

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION\*

.P0; This entry is obsolete, and should not be used in new IFF files.

.P0; Its only current use is for storing the data in Laseraid patch files.

.P0; Note that CH entries must be outside features, and may also be outside
layers (Laseraid patch files do not contain layers or features).

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*SEARCHING\*
.INDEX IPATCH > CH entry > searching
.INDEX IPATCH > searching > CH entry

.P8; CH ## ["text"]

.P0; If a specific text is being searched for, IPATCH will stop at the first
CH entry which contains the requested text as a sub-string. Note that the
case of the letters must match exactly. For instance, CH##"UP _& down"
would match the CH
       
.P8;CH###"This text goes UP _& down"

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*EDITING\*
.INDEX IPATCH > CH entry > editing
.INDEX IPATCH > editing > CH entry

.P0; If a new text is specified, then if it is too long IPATCH will truncate
it before using it, and if it is too short IPATCH will pad it to the right
with spaces. For instance:

.TP 7
.P0;00001243:#CH####"This#text#belongs#to#a#CH#entry"
.BR;IPATCH_> ^*/ TEXT "This text has been changed to a longer string"_<CR_>\*
.BR;%LSLLIB-E-STRTOOLONG, string is too long - truncated
.BR;00001243:#CH####"This#text#has#been#changed#to#a"
.BR;IPATCH_> ^*/ TEXT "This text is too short"_<CR_>\*
.BR;00001243:#CH####"This#text#is#too#short#########"

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Prompt mode\*

.P0; The following prompt will be made:

.LM +8
.P0; Text:
.LM -8

.P0; If a text is specified, it should not be enclosed in quotation
marks. Note that this means that it is not possible to define a text of
all spaces in prompt mode, as the 'trailing' spaces on a response are ignored.
Use line mode or command mode for this purpose.

.P0; A reply of _<CR_> will leave the text unaltered.

.TP 10
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Line mode\*

.P0; The / may also be followed immediately by the new text to be inserted
into the CH - for instance

.P8; IPATCH_> ^*/ "This is a new text"_<CR_>\*

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Command mode\*

.LM +8

.P-8; / TEXT "text"
.BR;Replaces the text for the entry with the specified string. If the string
is longer than that already in the file, it will be truncated. If the string
is shorted than that already in the file, it will be padded with spaces
on the right.

.LM -8

.!******************************************************************************
.PAGE
.SUBTITLE CP entry
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*CP - Control points entry\*
.INDEX IPATCH > CP entry

.P8; address: CP

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION\*

.P0; The CP entry occurs once for each section. It defines the control points
for the section, in both original (input) and destination (output) space.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*SEARCHING\*
.INDEX IPATCH > CP entry > searching
.INDEX IPATCH > searching > CP entry

.P8; CP

.P0; It is not possible to modify the search by the CP contents.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*EDITING\*
.INDEX IPATCH > CP entry > editing
.INDEX IPATCH > editing > CP entry

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Prompt mode\*

.P0; Prompt mode is not supported for the CP entry.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Line mode\*

.P0; Line mode is not supported for the CP entry.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Command mode\*

.LM +8

.P-8; / BOTH
.BR; The user is prompted for replacement values for each of the original
control points (the 'left hand side' control points), and then for replacement
values for the target control points (the 'right hand side' control points).
A response of _<CR_> to a prompt tells the program to retain the original
value.

.P-8; / REPEAT
.BR; If the previous CP edit operation was /ROTATE or /TARGET then it will
be repeated on the current CP entry. Care should be taken not to
unintentionally repeat the /ROTATE command on the same CP entry.

.P-8; / ROTATE corner
.BR; The control points (both original and target) are rotated so that the
named corner is at the north-west position. The corners (in standard Laser-Scan
order) are NW,SW,SE,NE.

.P-8; / TARGET
.BR; The user is prompted for replacement values for each of the target
control points (the 'right hand side' control points).
A response of _<CR_> to a prompt tells the program to retain the original
value.

.LM -8

.!******************************************************************************
.PAGE
.SUBTITLE CS entry
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*CS - Character size entry\*
.INDEX IPATCH > CS entry

.P8; address: CS ## height ## spacing

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION\*

.P0
This entry is obsolete, and should not be used in new IFF files.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*SEARCHING\*
.INDEX IPATCH > CS entry > searching
.INDEX IPATCH > searching > CS entry

.P8; CS ## [values required]

.P0; If the search is to be qualified by the contents of the CS, then the
relevant values may be specified. Any values not required may be wildcarded
if necessary.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*EDITING\*
.INDEX IPATCH > CS entry > editing
.INDEX IPATCH > editing > CS entry

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Prompt mode\*

.P0; The following prompts will be made:

.LM +8
.P0; Height:
.BR; Spacing
.LM -8

.P0; Note that a reply of _<CR_> will leave the relevant value unaltered.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Line mode\*

.P0; The / may also be followed immediately by the new values to be inserted
into the CS. Wildcards may be used as placeholders - thus

.P8; IPATCH_> ^*/ 2  4_<CR_>\*

.P0; will change both the height and the spacing, but

.P8; IPATCH_> ^*/ _* 8_<CR_>\*

.P0; changes only the spacing.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Command mode\*

.P0; Command mode is not supported for the CS entry.

.!******************************************************************************
.PAGE
.SUBTITLE EF entry
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*EF - End of feature entry\*
.INDEX IPATCH > EF entry

.P8; address: EF             

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION\*

.P0; The EF entry flags the end of a feature, and balances the NF entry
at the start of the feature.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*SEARCHING\*
.INDEX IPATCH > EF entry > searching
.INDEX IPATCH > searching > EF entry

.P8; EF

.P0; The EF entry does not have any contents, so has no search modifiers.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*EDITING\*

.P0; It is not possible to edit the EF entry.

.!******************************************************************************
.PAGE
.SUBTITLE EJ entry
.P0  
^*--------------------------------------------------------------------------------\*
.BR;^*EJ - End of job (data) entry\*
.INDEX IPATCH > EJ entry

.P8; address: EJ

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION\*

.P0; The EJ entry should always be the last entry in the IFF file. It signifies
the end of data, and is used to provide a tidy end to the file, rather than
requiring programs to detect the end-of-file explicitly.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*SEARCHING\*
.INDEX IPATCH > EJ entry > searching
.INDEX IPATCH > searching > EJ entry

.P8; EJ

.P0; The EJ entry does not have any contents, so has no search modifiers.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*EDITING\*

.P0; It is not possible to edit the EJ entry.

.!******************************************************************************
.PAGE
.SUBTITLE EM entry
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*EM - End of map entry\*
.INDEX IPATCH > EM entry

.P8; address: EM

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION\*

.P0; The EM entry is the last entry of a map or sheet, and flags its end.
It should be the last entry before the EJ entry.

.P0; Historically, IFF files were permitted to contain several maps, and
the EM entry was then required to mark the end of each.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*SEARCHING\*
.INDEX IPATCH > EM entry > searching
.INDEX IPATCH > searching > EM entry

.P8; EM

.P0; The EM entry does not have any contents, so has no search modifiers.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*EDITING\*

.P0; It is not possible to edit the EM entry.

.!******************************************************************************
.PAGE
.SUBTITLE EO entry
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*EO - End of layer (overlay) entry\*
.INDEX IPATCH > EO entry

.P8; address: EO

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION\*

.P0; The EO entry flags the end of a layer, and balances the matching NO
entry at the start of the layer. That NO entry should contain a pointer field
which holds the address of this EO - this allows fast chaining through
a file when particular layers are being ignored.

.P0; Note that some entries are legal between an EO and an NO - particularly
the new section entries (NS,CC,CP) and also the (obsolete) CH entry.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*SEARCHING\*
.INDEX IPATCH > EO entry > searching
.INDEX IPATCH > searching > EO entry

.P8; EO

.P0; The EO entry does not have any contents, so has no search modifiers.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*EDITING\*

.P0; It is not possible to edit the EO entry.

.!******************************************************************************
.PAGE
.SUBTITLE FS entry
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*FS - Feature status entry\*
.INDEX IPATCH > FS entry

.P8; address: FS ## fc ## status ## pc/text ## user-word

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION\*

.P0; The FS entry contains data which describes the feature containing it.
It should be the first entry after the NF entry.

.P0; The FS entry includes the feature code in word 1, which is the primary
descriptive code for a feature. The second word contains flag data used by
Laseraid and its post-processing programs. The third word states whether this
feature is text, symbol or line, and also holds either a process code or a
description of the type of text. The fourth word is reserved for use by users,
although beware that not all processing programs will preserve this word from
input to output. 

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*SEARCHING\*
.INDEX IPATCH > FS entry > searching
.INDEX IPATCH > searching > FS entry

.P8; FS ## [values required]

.P0; If the search is to be qualified by the contents of the FS, then the
relevant values may be specified. Any values not required may be wildcarded
if necessary.

.P0; See also the TEXT, SYMBOL and LINE commands, which can be used to search
for an FS entry with the relevant bit set in word 3.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*EDITING\*
.INDEX IPATCH > FS entry > editing
.INDEX IPATCH > editing > FS entry

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Prompt mode\*

.P0; The following prompts will be made:

.LM +8
.P0; FC:
.BR; status flags ###### (hex):
.BR; text/symbol/PC word (hex):
.BR; user dependent word (hex):
.LM -8

.P0; A reply of _<CR_> will leave the relevant value unaltered.

.TP 10
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Line mode\*

.P0; The / may also be followed immediately by the new values to be inserted
into the FS. Wildcards may be used as placeholders - for instance

.P8; IPATCH_> ^*/ 2_<CR_>\*

.P0; will change the feature code, and

.P8; IPATCH_> ^*/ _* _* 8012 1234_<CR_>\*

.P0; changes the text/symbol/PC word and the user specific word.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Command mode\*

.LM +16

.TP 5
.P-16; editing word 1:
.P-8; / FC integer
.BR; Sets the feature code to an integer in the range 0-32767

.TP 5
.P-16; editing word 2:
.P-8; / STATUS hex-value
.BR; Sets the whole of word 2 to the given value.

.TP 15
.P0; The individual bits of the status word may be set to 0 or 1 using the
following commands. Consult the LAPROCESS documentation for the meaning
of the bits.

.LM +4
.P0; / CLOSED###bit
.BR; / NOTEDGE##bit
.BR; / REVERSE##bit
.BR; / TWOPART##bit
.BR; / PAINTOUT#bit
.BR; / SQUARE###bit
.BR; / INVERSE##bit
.BR; / SUPPRESS#bit
.LM -4

.TP 10
.P-16; editing word 3:
.P-8; / TEXT
.BR; Sets the text bit, clears the symbol bit - the feature is thus flagged
as a text.

.TP 5
.P-8; / SYMBOL
.BR; Sets the symbol bit, clears the text bit - the feature is thus flagged
as a symbol.

.TP 5
.P-8; / LINE
.BR; Clears both the text and symbol bits - the feature is thus flagged
as a linear feature.

.TP 5
.P-8; / POSITION integer
.BR; Sets the text position to a value in the range 0-8. The number encodes
the point at which the text's position was digitised, relative to a rectangle
enclosing the text. This command is only allowed if the text bit is set.

.TP 5
.P-8; / TYPE__STYLE integer
.BR; Sets the type style to a value in the range 0-3. This command is only
allowed if the text bit is set.

.TP 5
.P-8; / CATEGORY integer
.BR; Sets the text's name category to a value in the range 0-63. This command
is only allowed if the text bit is set.

.TP 5
.P-8; / PC integer
.BR; Sets the process code. This command is only allowed if the text bit
is not set.

.TP 10
.P-16; editing any word:
.P-8; / WORD word hex-value
.BR; Sets the the specified word to the given hexadecimal value.

.LM -16

.!******************************************************************************
.PAGE
.SUBTITLE HI entry
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*HI - History entry\*
.INDEX IPATCH > HI entry

.P8; address: HI

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION\*

.P0; The HI record contains a history of which programs have been run on
the current data, when they were run, and whether they succeeded. It thus
provides a history of how the current file was produced, which can be very
useful in trying to track down problems.

.P0; The HI entry occurs once at the beginning of the file, after the RA
entry.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*SEARCHING\*
.INDEX IPATCH > HI entry > searching
.INDEX IPATCH > searching > HI entry

.P8; HI

.P0; It is not possible to modify the search by the HI contents.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*EDITING\*

.P0; It is not possible to edit the HI entry. The entry is intended as a
record of a file's lifetime, so editing it to change the record of that
lifetime is not allowed.

.!******************************************************************************
.PAGE
.SUBTITLE JB entry
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*JB - Junction block entry\*
.INDEX IPATCH > JB entry

.P8; address: JB

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION\*

.P0; The JB entry defines a series of junctions.

.P0; Within each sector of the IFF file, a chain of JB entries is maintained
to hold the details of all junctions within that sector.

.P0; Each JB entry contains the number of the sector that it is in, a pointer
to the next JB entry in this JB chain, and details of each junction.

.P0; For each junction, the JB contains

.BLANK
.LIST 0,"o"
.LE; the number of arms at that junction
.LE; the X,Y position of the junction
.LE; the address of each ST corresponding to a junction arm
.LE; the number of the vertex (either 1 or the index of the last point in
the ST) corresponding to the junction in that ST
.END LIST

.P0; See also the JP (Junction Pointer) and SH (Sector Header) entries.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*SEARCHING\*
.INDEX IPATCH > JB entry > searching
.INDEX IPATCH > searching > JB entry

.P8; JB

.P0; It is not currently possible to modify the search by the JB contents.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*EDITING\*

.P0; Editing of junction entries is not currently supported.

.!******************************************************************************
.PAGE
.SUBTITLE JP entry
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*JP - Junction pointer entry\*
.INDEX IPATCH > JP entry

.P8; address: JP

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION\*

.P0; The JP entry is a pointer back to a JB entry. A JP entry is inserted
before or after (as appropriate) each ST that starts or ends at a junction.

.P0; The point in the ST corresponding to the junction is either the first (in
which case the JP occurs before the ST) or the last (the JP occurs after the
ST). 

.P0; Each JP entry contains the address of the relevant JB entry, and the
sequence number of the junction within that JB.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*SEARCHING\*
.INDEX IPATCH > JP entry > searching
.INDEX IPATCH > searching > JP entry

.P8; JP

.P0; It is not currently possible to modify the search by the JP contents.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*EDITING\*

.P0; Editing of junction entries is not currently supported.

.!******************************************************************************
.PAGE
.SUBTITLE MD entry
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*MD - Map descriptor entry\*
.INDEX IPATCH > MD entry

.P8; address: MD ## version ## size

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION\*

.P0; The MD entry contains data describing the origin, projection and
coordinate system of the IFF file. It occurs once at the beginning of the
file, after the MH entry.

.P0; An unset map descriptor has its first word set to -1 (or FFFF in hex).

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*SEARCHING\*
.INDEX IPATCH > MD entry > searching
.INDEX IPATCH > searching > MD entry

.P8; MD

.P0; It is not possible to modify the search by the MD contents.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*EDITING\*
.INDEX IPATCH > MD entry > and ITRANS

.P0; It is not possible to edit the MD entry using IPATCH. The map descriptor
describes the current origin, projection and units of the IFF file, and a
change to the map descriptor must thus be accompanied by the appropriate
changes to all point data in the file. The IMP utility ITRANS is provided to
perform such transformations, and it will modify the map descriptor correctly. 

.!******************************************************************************
.PAGE
.SUBTITLE MH entry
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*MH - Map header entry\*
.INDEX IPATCH > MH entry

.P8; address: MH ## customer ## size

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION\*

.P0; The MH entry contains customer specific data about the IFF file. The
customer number determines which format of data is present.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*SEARCHING\*
.INDEX IPATCH > MH entry > searching
.INDEX IPATCH > searching > MH entry

.P8; MH

.P0; It is not possible to modify the search by the MH contents.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*EDITING\*
.INDEX IPATCH > MH entry > editing
.INDEX IPATCH > editing > MH entry

.P0; IPATCH supports editing of the map header's customer number. For editing
the actual value within the map header itself, use the relevant customer
specific map header editing program - that is:

.LM +8
.P0;####0###map header is unset
.BR;####1###MCE specific map header #################-# edit with MCEHED
.BR;####2###OSGB specific type 2 map header #########-# edit with OMHED
.BR;####3###OSGB specific type 3 (OSTF) map header ##-# edit with OS editor
.BR;####4###OSGB specific type 4 (CITF) map header ##-# edit with OS editor
.LM -8

.P 0; MCEHED is a utility supplied with the customer-specific package MCE.
OSMHED is a utility in the IFFOSTF module of the CONVERT package.

.P 0; Type 3 and 4 OS map headers are intended for use by Ordnance Survey
(Great Britain) only and will be edited using OS developed header editors.

.P0; The map header occurs once in the file, after the HI entry. Note that
historically IFF files could contain more than one map, and such maps each
started with a separate map header, and ended with an EM entry.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Prompt mode\*

.P0; Prompt mode is not supported for the MH entry.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Line mode\*

.P0; Line mode is not supported for the MH entry.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Command mode\*

.LM +8

.P-8; / CUSTOMER integer
.BR; Changes the customer number in the descriptor of the map header to
be the given integer. Note that this will change the interpretation of any
data in the map header by utility programs.

.LM -8

.!******************************************************************************
.PAGE
.SUBTITLE NF entry
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*NF - New feature entry\*
.INDEX IPATCH > NF entry

.P8; address: NF ## fsn ## isn

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION\*

.P0; The NF entry starts a new feature. It contains two identifying numbers,
both in the range 0-65535.

.P0; The feature serial number (FSN) is generally
used as the 'name' of the feature. There are three main conventions about
when or whether FSNs are unique:

.LIST
.LE; FSNs unique within the IFF file. This mechanism has traditionally been
used by OS, and may be used by other customers as well.
.LE; FSNs unique within a particular layer. Thus a feature could be identified
by its layer and FSN. This mechanism has traditionally been used by MCE.
.LE; FSNs not unique. The main example of this now is in TRI and SRI files,
where single symbols may be made up of multiple features, all with the same
FSN. In these cases the FSN is the ASCII code of the text, or the identifying
number of the symbol.
.END LIST

.P0; Note that historically FSN 0 was considered special by many programs.
It was used to flag an empty feature used as a place-holder in the IFF file,
generally to hold TCs which applied to the entire layer. Thus it was possible to
come across multiple FSN 0s even when FSNs are notionally unique within a
file. In modern IFF files, the trailing TCs are no longer used.

.P0; The internal sequence number (ISN) is unique within the IFF file, and
can be used as a single unique identifier for a feature. It may, but need
not, be the same as the FSN. The ISN is generally assigned starting at 1
and incremented as a file is digitised.
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*SEARCHING\*
.INDEX IPATCH > NF entry > searching
.INDEX IPATCH > searching > NF entry

.P8; NF ## [values required]

.P0; If the search is to be qualified by the contents of the NF, then the
relevant values may be specified. Any values not required may be wildcarded
if necessary.

.TP 10
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*EDITING\*
.INDEX IPATCH > NF entry > editing
.INDEX IPATCH > editing > NF entry

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Prompt mode\*

.P0; The following prompts will be made:

.LM +8
.P0; FSN:
.BR; ISN:
.LM -8

.P0; A reply of _<CR_> will leave the relevant value unaltered.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Line mode\*

.P0; The / may also be followed immediately by the new values to be inserted
into the NF. A wildcard may be used as a placeholder - for instance

.P8; IPATCH_> ^*/ 2  2_<CR_>\*

.P0; will change the feature serial number and the internal sequence number,
but

.P8; IPATCH_> ^*/ _* 80_<CR_>\*

.P0; just changes the internal sequence number

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Command mode\*

.LM +8

.P-8; / FSN integer
.BR; Sets the feature serial number. The value may be in the range 0-65535.

.P-8; / ISN integer
.BR; Sets the internal sequence number. The value may be in the range 0-65535.
Note that many programs use the internal sequence number as a unique identifier
for features, and therefore care should be taken when editing this field.

.LM -8

.!******************************************************************************
.PAGE
.SUBTITLE NO entry
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*NO - New layer (overlay) entry\*
.INDEX IPATCH > NO entry

.P8; address: NO ## layer ## status ## EO-address

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION\*

.P0; The NO entry starts a layer. It contains the number identifying this
layer, and a status word. It may also contain the address of the corresponding
EO entry.

.P0; IFF files are generally divided up into multiple layers, where data
of a common sort or source is grouped in the same layer. Note that 
a layer may be split into several parts, identified by all having the same
layer number.

.P0; Layer 0 is conventionally reserved for 'non-essential' data - for instance
a grid, symbols at control points, or MCE DFAD accuracy polygons. The
assumption is that the IFF file would not be significantly degraded in terms
of information content by throwing layer 0 away. If layer 0 is present,
some programs expect it to be the first layer in the file.

.P0; Historically, layers 11 and 32 were also used for the same sort of
purpose as layer 0.

.P0; The status flag is not currently used, and should be set to zero.

.P0; If the EO pointer field is present, it should contain the hexadecimal
address of the EO entry which matches this NO. This is used by programs
which must ignore layers to 'jump' from the NO to the EO. Thus take great
care when editing the EO pointer field, as an incorrect value could cause
a processing program to abort.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*SEARCHING\*
.INDEX IPATCH > NO entry > searching
.INDEX IPATCH > searching > NO entry

.P8; NO ## [values required]

.P0; If the search is to be qualified by the contents of the NO, then the
relevant values may be specified. Any values not required may be wildcarded
if necessary.

.TP 10
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*EDITING\*
.INDEX IPATCH > NO entry > editing
.INDEX IPATCH > editing > NO entry

.TP 10
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Prompt mode\*

.P0; The following prompts will be made:

.LM +8
.P0; Layer:
.BR; Status:
.LM -8

.TP 5
.P0; and if the NO entry contains an EO address field, then

.LM +8
.P0; EO pointer:
.LM -8

.P0; A reply of _<CR_> will leave the relevant value unaltered.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Line mode\*

.P0; The / may also be followed immediately by the new values to be inserted
into the NO. Wildcards may be used as placeholders - for instance

.P8; IPATCH_> ^*/ 2_<CR_>\*

.P0; will change the layer, and

.P8; IPATCH_> ^*/ 5 _* 8013_<CR_>\*

.P0; changes the layer and the EO pointer field.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Command mode\*

.LM +8

.P-8; / LAYER integer
.BR; Sets the layer (overlay) to a new value. The number is in the range
0-32767.

.P-8; / STATUS hex-value
.BR; Sets the second word of the NO entry. Note that this entry is not
currently used or transferred by Laser-Scan programs.
The value is conventionally zero.

.P-8; / POINTER hex-address
.BR; Sets the pointer to the next EO entry, which terminates this layer.
This field can only be changed if the NO entry contained it already - older IFF
files contain NO entries without the EO pointer field. 

.LM -8
                    
.!******************************************************************************
.PAGE
.SUBTITLE NS entry
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*NS - New section entry\*
.INDEX IPATCH > NS entry

.P8; address: NS ## "text"

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION\*

.P0; The NS entry is used to flag the start of a new digitising session.
The text written in it conventionally contains the initials of the digitising
operator, the program being used and the date and time at which digitising
was started.

.P0; The entry is necessary because IFF files are often digitised in several
sessions. The NS entry will be followed by a CC and a CP entry, defining
the transformations and control points applying from now on. Post-processing
programs used to transform all data into the same coordinate system will
normally also reduce the whole IFF file down to one section.

.P0; The NS entry will follow either an MD entry (for the first section)
or an EO entry (for later sections).

.P0; The maximum number of characters in the text is 255, but note that
IPATCH cannot itself change the length of the text string.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*SEARCHING\*
.INDEX IPATCH > NS entry > searching
.INDEX IPATCH > searching > NS entry

.P8; NS ## ["text"]

.P0; If a specific text is being searched for, IPATCH will stop at the first
NS entry which contains the requested text as a sub-string. Note that the
case of the letters must match exactly. For instance, NS##"UP _& down"
would match the NS

.P8;NS###"This text goes UP _& down"

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*EDITING\*
.INDEX IPATCH > NS entry > editing
.INDEX IPATCH > editing > NS entry

.P0; If a new text is specified, then if it is too long IPATCH will truncate
it before using it, and if it is too short IPATCH will pad it to the right
with spaces. For instance:

.TP 7
.P0;00001243:#NS####"This#text#belongs#to#an#NS#entry"
.BR;IPATCH_> ^*/ TEXT "This text has been changed to a longer string"_<CR_>\*
.BR;%LSLLIB-E-STRTOOLONG, string is too long - truncated
.BR;00001243:#NS####"This#text#has#been#changed#to#a#"
.BR;IPATCH_> ^*/ TEXT "This text is too short"_<CR_>\*
.BR;00001243:#NS####"This#text#is#too#short##########"

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Prompt mode\*

.P0; The following prompt will be made:

.LM +8
.P0; Text:
.LM -8

.P0; If a text is specified, it should not be enclosed in quotation
marks. Note that this means that it is not possible to define a text of
all spaces in prompt mode, as the 'trailing' spaces on a response are ignored.
Use line mode or command mode for this purpose.

.P0; A reply of _<CR_> will leave the text unaltered.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Line mode\*

.P0; The / may also be followed immediately by the new text to be inserted
into the NS - for instance

.P8; IPATCH_> ^*/ "This is a new text"_<CR_>\*

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Command mode\*

.LM +8

.P-8; / TEXT "text"
.BR;Replaces the text for the entry with the specified string. If the string
is longer than that already in the file, it will be truncated. If the string
is shorter than that already in the file, it will be padded with spaces
on the right.

.LM -8

.!******************************************************************************
.PAGE
.SUBTITLE RA entry
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*RA - Range entry\*
.INDEX IPATCH > RA entry

.P8; address: RA ## minX ## maxX ## minY ## maxY

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION\*

.P0; The RA entry records the maximum extent of the data in the IFF file.
It is used by plot and display programs to work out whether to clip the
file, and what scale it can be displayed at.

.P0; The range entry is always the first entry in the IFF file.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*SEARCHING\*
.INDEX IPATCH > RA entry > searching
.INDEX IPATCH > searching > RA entry

.P8; RA ## [values required]

.P0; If the search is to be qualified by the contents of the RA, then the
relevant values may be specified. Any values not required may be wildcarded
if necessary.


.P0
^*--------------------------------------------------------------------------------\*
.BR;^*EDITING\*

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Prompt mode\*

.P0; The following prompts will be made:

.LM +8
.P0; Min X:
.BR; Max X:
.BR; Min Y:
.BR; Max Y:
.LM -8

.P0; A reply of _<CR_> will leave the relevant value unaltered.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Line mode\*

.P0; The / may also be followed immediately by the new values to be inserted
into the RA. Wildcards may be used as placeholders - thus

.P8; IPATCH_> ^*/ 200.0 # 0.0 # 300.0 # 0.0_<CR_>\*

.P0; will change the entire RA, but

.P8; IPATCH_> ^*/ _* 80.0_<CR_>\*

.P0; just changes the minimum X value.

.TP 10
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Command mode\*

.LM +8

.P-8; / MAXX real-value
.BR; Changes the maximum X value in the range entry to the specified real.

.P-8; / MINX real-value
.BR; Changes the minimum X value in the range entry to the specified real.

.P-8; / MAXY real-value
.BR; Changes the maximum Y value in the range entry to the specified real.

.P-8; / MINY real-value
.BR; Changes the minimum Y value in the range entry to the specified real.

.LM -8

.!******************************************************************************
.PAGE
.SUBTITLE RO entry
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*RO - Rotation entry\*
.INDEX IPATCH > RO entry

.P8; address: RO ## angle

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION\*

.P0; The RO entry defines the angle at which an oriented symbol or a text
is to be drawn. The angle is in radians, measured counterclockwise from
the positive horizontal axis.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*SEARCHING\*
.INDEX IPATCH > RO entry > searching
.INDEX IPATCH > searching > RO entry

.P8; RO ## [angle]

.P0; If the search is to be qualified by the contents of the RO, then the
angle may be specified. 


.P0
^*--------------------------------------------------------------------------------\*
.BR;^*EDITING\*
.INDEX IPATCH > RO entry > editing
.INDEX IPATCH > editing > RO entry

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Prompt mode\*

.P0; The following prompt will be made:

.LM +8
.P0; Angle:
.LM -8

.P0; A reply of _<CR_> will leave the angle unaltered.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Line mode\*

.P0; The / may also be followed immediately by the new angle to be inserted
into the RO - for instance

.P8; IPATCH_> ^*/ 2.0_<CR_>\*

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Command mode\*

.LM +8

.P-8; / ANGLE radians
.BR; Changes the angle stored in the RO entry to the given number of real
radians.

.LM -8

.!******************************************************************************
.PAGE
.SUBTITLE SH entry
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*SH - Sector header entry\*
.INDEX IPATCH > SH entry

.P8; address: SH

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION\*

.P0; The SH entry contains the addresses of the start of the JB chain for
each sector in the IFF file.

.P0; When an IFF file contains junction structure, the map is divided into
rectangular sectors. A chain of JB entries is maintained for each sector,
containing the junction information. The SH entry provides the address of
the start of each of these chains.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*SEARCHING\*
.INDEX IPATCH > SH entry > searching
.INDEX IPATCH > searching > SH entry

.P8; SH

.P0; It is not currently possible to modify the search by the SH contents.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*EDITING\*

.P0; Editing of junction entries is not currently supported.

.!******************************************************************************
.PAGE
.SUBTITLE SL entry
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*SL - Select symbol library entry\*
.INDEX IPATCH > SL entry

.P8; address: SL ## symbol-library

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION\*

.P 0
This entry is obsolete, and should not be used in new IFF files.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*SEARCHING\*
.INDEX IPATCH > SL entry > searching
.INDEX IPATCH > searching > SL entry

.P8; SL ## [symbol-library]

.P0; If the search is to be qualified by the contents of the SL, then the
symbol library may be specified. 


.P0
^*--------------------------------------------------------------------------------\*
.BR;^*EDITING\*
.INDEX IPATCH > SL entry > editing
.INDEX IPATCH > editing > SL entry

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Prompt mode\*

.P0; The following prompt will be made:

.LM +8
.P0; Integer:
.LM -8

.P0; A reply of _<CR_> will leave the value unaltered.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Line mode\*

.P0; The / may also be followed immediately by the new value to be inserted
into the SL - for instance

.P8; IPATCH_> ^*/ 2_<CR_>\*

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Command mode\*

.P0; Command mode is not supported for the SL entry.

.!******************************************************************************
.PAGE
.SUBTITLE SS entry
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*SS - Symbol select entry\*
.INDEX IPATCH > SS entry

.P8; address: SS ## symbol

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION\*

.P 0
This entry is obsolete, and should not be used in new IFF files.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*SEARCHING\*
.INDEX IPATCH > SS entry > searching
.INDEX IPATCH > searching > SS entry

.P8; SS ## [values required]

.P0; If the search is to be qualified by the contents of the SS, then the
symbol may be specified.


.P0
^*--------------------------------------------------------------------------------\*
.BR;^*EDITING\*
.INDEX IPATCH > SS entry > editing
.INDEX IPATCH > editing > SS entry

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Prompt mode\*

.P0; The following prompt will be made:

.LM +8
.P0; Integer:
.LM -8

.P0; A reply of _<CR_> will leave the value unaltered.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Line mode\*

.P0; The / may also be followed immediately by the new value to be inserted
into the SS - for instance

.P8; IPATCH_> ^*/ 2_<CR_>\*

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Command mode\*

.P0; Command mode is not supported for the SS entry.

.!******************************************************************************
.PAGE
.SUBTITLE ST entry
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*ST - 2-dimensional point string entry\*
.INDEX IPATCH > ST entry

.P8; address: ST ## npts ## pen

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION\*

.P0; The ST entry contains the point data defining the feature. There may
be more than one ST entry in a feature.

.LIST
.LE; Each ST should contain no more than 200 points, so a new ST with the
pen flag set to 1 (ie keep pen down when drawing to the start of this new
ST) will be started for the remaining points.
.LE; If an invisible line is to be coded in the feature, then this is
represented by starting a new ST with the pen flag set to 0 (ie keep pen
up when moving to the start of this new ST).
.END LIST

.P0; Note that the pen flag is always considered to be 0 for the first ST
in a feature - that is the pen is always kept up to move to the start of
a new feature.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*SEARCHING\*
.INDEX IPATCH > ST entry > searching
.INDEX IPATCH > searching > ST entry

.P8; ST ## [values required]

.P0; If the search is to be qualified by the number of points or pen code
of the ST, then the
relevant values may be specified. Any values not required may be wildcarded
if necessary.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*EDITING\*
.INDEX IPATCH > ST entry > editing
.INDEX IPATCH > editing > ST entry

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Prompt mode\*

.P0; Prompt mode is not supported for the ST entry.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Line mode\*

.P0; Line mode is not supported for the ST entry.

.TP 10
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Command mode\*

.LM +8

.TP 5
.P-8; / CHANGE from to
.BR; Change the specified points. If only one number is given,
then that one point will be changed. IPATCH will prompt for the new values. If
there is only one point, then no argument is necessary. 

.TP 5
.P-8; / DELETE from to
.BR; Deletes the specified points. If only one number is given,
then that one point will be deleted. If there is only one point, then no
argument is needed. 

.P-8; / PEN__POSITION hex-value
.BR; Specifies a new value for the pen up/down field of the ST. Note that
IFFLIB will truncate this value to 3 bits (ie the range 0-7). Currently
only the bottom bit (bit 0) is significant, and is used to indicate pen
up or down.

.LM -8

.!******************************************************************************
.PAGE
.SUBTITLE TC entry
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*TC - Transmitted comment entry\*
.INDEX IPATCH > TC entry

.P8; address: TC ## "text"

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION\*

.P0; A TC entry is used to label the following feature. It is used by MCE
to hold specialised plotting instructions.

.P0; Interpretation of a TC requires the IFF file to be regarded as a
sequential file, since the TC applies either to the following feature, or
to the layer as a whole (in which case it appears after the last feature
- in old format IFF files before a special empty feature with FSN 0).

.P0; The TC entry is not allowed inside a feature, but must be inside a
layer.

.P0; The maximum number of characters in a TC is 255, but note that IPATCH
cannot itself change the length of that text.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*SEARCHING\*
.INDEX IPATCH > TC entry > searching
.INDEX IPATCH > searching > TC entry

.P8; TC ## ["text"]

.P0; If a specific text is being searched for, IPATCH will stop at the first
TC entry which contains the requested text as a sub-string. Note that the
case of the letters must match exactly. For instance, TC##"UP _& down"
would match the TC

.P8;TC###"This text goes UP _& down"

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*EDITING\*
.INDEX IPATCH > TC entry > editing
.INDEX IPATCH > editing > TC entry

.P0; If a new text is specified, then if it is too long IPATCH will truncate
it before using it, and if it is too short IPATCH will pad it to the right
with spaces. For instance:

.TP 7
.P0;00001243:#TC####"This#text#belongs#to#a#TC#entry"
.BR;IPATCH_> ^*/ TEXT "This text has been changed to a longer string"_<CR_>\*
.BR;%LSLLIB-E-STRTOOLONG, string is too long - truncated
.BR;00001243:#TC####"This#text#has#been#changed#to#a"
.BR;IPATCH_> ^*/ TEXT "This text is too short"_<CR_>\*
.BR;00001243:#TC####"This#text#is#too#short#########"

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Prompt mode\*

.P0; The following prompt will be made:

.LM +8
.P0; Text:
.LM -8

.P0; If a text is specified, it should not be enclosed in quotation
marks. Note that this means that it is not possible to define a text of
all spaces in prompt mode, as the 'trailing' spaces on a response are ignored.
Use line mode or command mode for this purpose.

.P0; A reply of _<CR_> will leave the text unaltered.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Line mode\*

.P0; The / may also be followed immediately by the new text to be inserted
into the TC - for instance

.P8; IPATCH_> ^*/ "This is a new text"_<CR_>\*

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Command mode\*

.LM +8

.P-8; / TEXT "text"
.BR;Replaces the text for the entry with the specified string. If the string
is longer than that already in the file, it will be truncated. If the string
is shorted than that already in the file, it will be padded with spaces
on the right.

.LM -8

.!******************************************************************************
.PAGE
.SUBTITLE TH entry
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*TH - Text height / line thickness entry\*
.INDEX IPATCH > TH entry

.P8; address: TH ## integer

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION\*

.P0; The TH entry is used

.LIST
.LE; to hold the line thickness for displays which are capable of displaying
multiple thickness lines
.LE; to hold the size of text for a text feature. In this case the integer
is interpreted as either:
.LIST "o"
.LE; the height of the text in hundredths of a millimetre
.LE; the size of the text as a point size
.END LIST
.END LIST

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*SEARCHING\*
.INDEX IPATCH > TH entry > searching
.INDEX IPATCH > searching > TH entry

.P8; TH ## [height/thickness]

.P0; If the search is to be qualified by the contents of the TH, then the
relevant value may be specified. 


.P0
^*--------------------------------------------------------------------------------\*
.BR;^*EDITING\*
.INDEX IPATCH > TH entry > editing
.INDEX IPATCH > editing > TH entry

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Prompt mode\*

.P0; The following prompt will be made:

.LM +8
.P0; Thickness/height:
.LM -8

.P0; A reply of _<CR_> will leave the value unaltered.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Line mode\*

.P0; The / may also be followed immediately by the new value to be inserted
into the TH - for instance

.P8; IPATCH_> ^*/ 20_<CR_>\*

.TP 10
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Command mode\*

.LM +8

.TP 3
.P-8; / HEIGHT integer
.BR; Changes the value stored in the TH entry to the given integer.

.TP 3
.P-8; / THICKNESS integer
.BR; Changes the value stored in the TH entry to the given integer.

.LM -8

.!******************************************************************************
.PAGE
.SUBTITLE TS entry
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*TS - Text status entry\*
.INDEX IPATCH > TS entry

.P8; address: TS ## tcc ## reserved ## textcode ## reserved

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION\*

.P0; The TS entry introduces a text component, and contains data which
describes the text component following it.

.P0; Text features may contain one text string, with associated location
and descriptive data, or they may be ^*composite\* - that is composed of
several sub-texts or text components, which may be manipulated independently
or as a single entity.

.P0; Each text component starts with a TS entry, and ends with the next TS
entry, or the final EF of the feature. The first TS entry occurs immediately
after the FS entry and any AC entries. Text components may not include FS
or AC entries, but may contain any other entries that are legal within a
normal text feature.

.P0; Word 1 of the TS entry is the text component code (TCC), which is
the primary descriptive code for a text component - it is effectively the
feature code for this component of the composite text, and is used in the
same manner.

.P0; Word 3 of the TS entry is the text word, and is identical in form to
word#3 of a text's FS entry - it holds a description of the type of text
component. Note that the top two bits (what would be the text/symbol bits in an
FS) should always be set to '10' binary, as they would in an FS entry. These
bits are referred to as redundancy bits, since they are not strictly necessary. 

.P0; The second and fourth words are reserved for later definition, and should
always be zero.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*SEARCHING\*
.INDEX IPATCH > TS entry > searching
.INDEX IPATCH > searching > TS entry

.P8; TS ## [values required]

.P0; If the search is to be qualified by the contents of the TS, then the
relevant values may be specified. Any values not required may be wildcarded
if necessary.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*EDITING\*
.INDEX IPATCH > TS entry > editing
.INDEX IPATCH > editing > TS entry

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Prompt mode\*

.P0; The following prompts will be made:

.LM +8
.P0; TCC#:
.BR; word#2####(hex):#
.BR; text#word#(hex):#
.BR; word#4####(hex):#
.LM -8

.P0; A reply of _<CR_> will leave the relevant value unaltered.

.TP 10
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Line mode\*

.P0; The / may also be followed immediately by the new values to be inserted
into the TS. Wildcards may be used as placeholders - for instance

.P8; IPATCH_> ^*/ 2_<CR_>\*

.P0; will change the text component code, and

.P8; IPATCH_> ^*/ _* _* 8012_<CR_>\*

.P0; changes the text word.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Command mode\*

.LM +16

.TP 5
.P-16; editing word 1:
.P-8; / TCC integer
.BR; Sets the text component code to an integer in the range 0-32767

.TP 10
.P-16; editing word 3:
.P-8; / POSITION integer
.BR; Sets the text position to a value in the range 0-8. The number encodes
the point at which the text's position was digitised, relative to a rectangle
enclosing the text.

.TP 5
.P-8; / TYPE__STYLE integer
.BR; Sets the type style to a value in the range 0-3.

.TP 5
.P-8; / CATEGORY integer
.BR; Sets the text's name category to a value in the range 0-63.

.TP 10
.P-16; editing any word:
.P-8; / WORD word hex-value
.BR; Sets the the specified word to the given hexadecimal value.

.LM -16

.!******************************************************************************
.PAGE
.SUBTITLE TX entry
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*TX - Text entry\*
.INDEX IPATCH > TX entry

.P8; address: TX ## "text"

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION\*

.P0; The TX entry holds the text for a text feature. It should be the last
entry before the EF entry.

.P0; The maximum number of characters in a TX is 255, but note that IPATCH
cannot itself change the length of a text.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*SEARCHING\*
.INDEX IPATCH > TX entry > searching
.INDEX IPATCH > searching > TX entry

.P0; If a specific text is being searched for, IPATCH will stop at the first
TX entry which contains the requested text as a sub-string. Note that the
case of the letters must match exactly. For instance, TX##"UP _& down"
would match the TX

.P8;TX###"This text goes UP _& down"

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*EDITING\*
.INDEX IPATCH > TX entry > editing
.INDEX IPATCH > editing > TX entry

.P0; If a new text is specified, then if it is too long IPATCH will truncate
it before using it, and if it is too short IPATCH will pad it to the right
with spaces. For instance:

.TP 7
.P0;00001243:#TX####"This#text#belongs#to#a#TX#entry"
.BR;IPATCH_> ^*/ TEXT "This text has been changed to a longer string"_<CR_>\*
.BR;%LSLLIB-E-STRTOOLONG, string is too long - truncated
.BR;00001243:#TX####"This#text#has#been#changed#to#a"
.BR;IPATCH_> ^*/ TEXT "This text is too short"_<CR_>\*
.BR;00001243:#TX####"This#text#is#too#short#########"

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Prompt mode\*

.P0; The following prompt will be made:

.LM +8
.P0; Text:
.LM -8

.P0; If a text is specified, it should not be enclosed in quotation
marks. Note that this means that it is not possible to define a text of
all spaces in prompt mode, as the 'trailing' spaces on a response are ignored.
Use line mode or command mode for this purpose.

.P0; A reply of _<CR_> will leave the text unaltered.

.TP 10
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Line mode\*

.P0; The / may also be followed immediately by the new text to be inserted
into the TX - for instance

.P8; IPATCH_> ^*/ "This is a new text"_<CR_>\*

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Command mode\*

.LM +8

.P-8; / TEXT "text"
.BR;Replaces the text for the entry with the specified string. If the string
is longer than that already in the file, it will be truncated. If the string
is shorted than that already in the file, it will be padded with spaces
on the right.
                                                                 
.LM -8

.!******************************************************************************
.PAGE
.SUBTITLE VO entry
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*VO - Void entry\*
.INDEX IPATCH > VO entry

.P8; address: VO ## size

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION\*

.P0; The VO entry is used to replace a series of deleted IFF entries. Since
it is not possible to 'compress' an IFF file, a deleted entry or series
of entries is overwritten with a void area or the requisite size.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*SEARCHING\*
.INDEX IPATCH > VO entry > searching
.INDEX IPATCH > searching > VO entry

.P8; VO ## [size]

.P0; The search may optionally be qualified by the size of the VO entry
required, as it would be reported by IPATCH.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*EDITING\*

.P0; It is not possible to edit a VO entry.

.!******************************************************************************
.PAGE
.SUBTITLE XX entry
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*XX - Invalid entry\*
.INDEX IPATCH > XX entry

.P8; address: XX ## size

.P0   
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION\*

.P0; IFFLIB returns the entry mnemonic XX when it has found an entry that
it cannot identify as a valid IFF entry. This generally occurs because either
the IFF file is corrupt in some manner, or because the FIND command has
been used to position to an address which does not appear to contain an
entry.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*SEARCHING\*

.P0; It is not possible to search for an XX entry.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*EDITING\*

.P0; It is not possible to edit an XX entry.

.!******************************************************************************
.PAGE
.SUBTITLE ZS entry
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*ZS - 3-dimensional point string entry\*
.INDEX IPATCH > ZS entry

.P8; address: ZS ## npts ## pen

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION\*

.P0; The ZS entry contains the three-dimensional point data defining the
feature. There may be more than one ZS entry in a feature:

.LIST
.LE; Each ZS should contain no more than 200 points, so a new ZS with the
pen flag set to 1 (ie keep pen down when drawing to the start of this new
ZS) will be started for the remaining points.
.LE; If an invisible line is to be coded in the feature, then this is
represented by starting a new ZS with the pen flag set to 0 (ie keep pen
up when moving to the start of this new ZS).
.END LIST

.P0; Note that the pen flag is always considered to be 0 for the first ZS
in a feature - that is the pen is always kept up to move to the start of
a new feature.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*SEARCHING\*
.INDEX IPATCH > ZS entry > searching
.INDEX IPATCH > searching > ZS entry

.P8; ZS ## [values required]

.P0; If the search is to be qualified by the number of points or pen code
of the ZS, then the relevant values may be specified. Any values not required
may be wildcarded if necessary. 


.P0
^*--------------------------------------------------------------------------------\*
.BR;^*EDITING\*
.INDEX IPATCH > ZS entry > editing
.INDEX IPATCH > editing > ZS entry

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Prompt mode\*

.P0; Prompt mode is not supported for the ZS entry.

.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Line mode\*

.P0; Line mode is not supported for the ZS entry.

.TP 10
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*Command mode\*

.LM +8

.TP 5
.P-8; / CHANGE from to
.BR; Change the specified points. If only one number is given,
then that one point will be changed. IPATCH will prompt for the new values. If
there is only one point, then no argument is necessary. 

.P-8; / DELETE from to
.BR; Deletes the specified points. If only one number is given,
then that one point will be deleted. If there is only one point, then no
argument is needed. 

.P-8; / PEN__POSITION hex-value
.BR; Specifies a new value for the pen up/down field of the ZS. Note that
IFFLIB will truncate this value to 3 bits (ie the range 0-7). Currently
only the bottom bit (bit 0) is significant, and is used to indicate pen
up or down.

.LM -8


.!******************************************************************************
.!*** Example editing session 						     ***
.!******************************************************************************

.!******************************************************************************
.SUBTITLE Example editing session
.PAGE
.P0
^*--------------------------------------------------------------------------------\*
.HL 2 ^*EXAMPLE EDITING SESSION\*
.INDEX IPATCH > example session

.!*** enforce the subtitle
.SUBTITLE Example editing session

.P0;$ ipatch winnie_the_pooh/write/nostatus
.BR;00000000: Start of file
.BR;IPATCH_> ^*NEXT_<CR_>\*
.BR;00000001:#RA###-225.114###9241.125#####-0.145###9081.765
.BR;IPATCH_> ^*/MINX 200.01_<CR_>\*
.BR;00000001:#RA####200.010###9241.125#####-0.145###9081.765
.BR;IPATCH_> ^*TYPE 1_<CR_>\*
.BR;0000000A:#HI
.BR;History#entry
.BR;-#size#of#entry#=#4001#words
.BR;Date########Time##Username#####Program###Function#####Elapsed##CPU######STATUS  
.BR;18-JUL-1986#17:16#TIM##########IFROMTEXT#Create#######00:01:41#00:00:47#00000001
.BR;25-JUL-1986#17:28#TONY#########IPATCH####Patch########00:09:45#00:00:11#00000001
.BR;IPATCH_> ^*NEXT 2_<CR_>\*
.BR;0000110D:#MD######2####200
.BR;IPATCH_> ^*/_<CR_>\*
.BR;%IPATCH-W-NOEDIT, MD entries cannot be edited
.BR;0000110D:#MD######2####200
.BR;IPATCH_> ^*EXPLAIN_<CR_>\*
.BR;0000110D:#MD######2####200
.BR;Map#descriptor#entry
.BR;-#size#is#200#words
.BR;-#map#descriptor#version#2
.BR;-#Local#origin:#######0.0000,######90.0000
.BR;-#Map#scale:#######1000.0000
.BR;-#Projection:####100#(Geographic##(ie#Lat#and#Long))
.BR;-#Spheroid:########0#(Clarke#1866)
.BR;-#Units:###########5#(radians)
.BR;_*#use#the#TYPE#command#to#type#the#contents#of#the#map#descriptor#in#_*
.BR;_*#hexadecimal,#or#use#the#ITRANS#utility#to#edit#the#map#descriptor##_*
.BR;IPATCH_> ^*NEXT_<CR_>\*
.BR;000011D6:#NS##"created#by#IFROMTEXT#at#15:39:49#on#30-OCT-85"
.BR;IPATCH_> ^*/_<CR_>\*
.BR;Text: ^*This NS has been edited_<CR_>\*
.BR;000011D6:#NS##"This#NS#has#been#edited###################"
.BR;IPATCH_> ^*/TEXT "Fred"_<CR_>\*
.BR;000011D6:#NS##"Fred######################################"
.BR;IPATCH_> ^*NEXT_<CR_>\*
.BR;000011EC:#CC
.BR;IPATCH_> ^*/_<CR_>\*
.BR;%IPATCH-W-EDITCC, use the form 'letter' 'value' to change CC entries
.BR;000011EC:#CC
.BR;IPATCH_> ^*EXPLAIN_<CR_>\*
.BR;000011EC:#CC
.BR;Cubic#coefficients#entry
.BR;-#size#of#entry#=##40#words
.BR;-#matrix#of#the#form:
.BR;	a#=##.000000E#000		k#=##.000000E#000
.BR;	b#=##.100000E#001		l#=##.000000E#000
.BR;	c#=##.000000E#000		m#=##.100000E#001
.BR;	d#=##.000000E#000		n#=##.000000E#000
.BR;	e#=##.000000E#000		o#=##.000000E#000
.BR;	f#=##.000000E#000		p#=##.000000E#000
.BR;	g#=##.000000E#000		q#=##.000000E#000
.BR;	h#=##.000000E#000		r#=##.000000E#000
.BR;	i#=##.000000E#000		s#=##.000000E#000
.BR;	j#=##.000000E#000		t#=##.000000E#000
.BR;IPATCH_> ^*/A 10.0_<CR_>\*
.BR;000011EC:#CC
.BR;IPATCH_> ^*TYPE_<CR_>\*
.BR;000011EC:#CC
.BR;Cubic#coefficients#entry
.BR;-#size#of#entry#=##40#words
.BR;-#matrix#of#the#form:
.BR;	a#=##.100000E#002		k#=##.000000E#000
.BR;	b#=##.100000E#001		l#=##.000000E#000
.BR;	c#=##.000000E#000		m#=##.100000E#001
.BR;	d#=##.000000E#000		n#=##.000000E#000
.BR;	e#=##.000000E#000		o#=##.000000E#000
.BR;	f#=##.000000E#000		p#=##.000000E#000
.BR;	g#=##.000000E#000		q#=##.000000E#000
.BR;	h#=##.000000E#000		r#=##.000000E#000
.BR;	i#=##.000000E#000		s#=##.000000E#000
.BR;	j#=##.000000E#000		t#=##.000000E#000
.BR;IPATCH_> ^*NEXT_<CR_>\*
.BR;00001215:#CP
.BR;IPATCH_> ^*/_<CR_>\*
.BR;%IPATCH-W-CPEDIT, to edit a CP use /TARGET, /BOTH, /ROTATE or /REPEAT
.BR;00001215:#CP
.BR;IPATCH_> ^*EXPLAIN_<CR_>\*
.BR;00001215:#CP
.BR;Control#point#entry
.BR;-#size#of#entry#=##32#words
.BR;######corner###original###############target
.BR;	NW#######400.000,#####0.000#####400.000,#####0.000
.BR;	SW#######400.000,###400.000#####400.000,###400.000
.BR;	SE#########0.000,###400.000#######0.000,###400.000
.BR;	NE#########0.000,#####0.000#######0.000,#####0.000
.BR;IPATCH_> ^*/ROTATE SE_<CR_>\*
.BR;00001215:#CP
.BR;IPATCH_> ^*TYPE_<CR_>\*
.BR;00001215:#CP
.BR;Control#point#entry
.BR;-#size#of#entry#=##32#words
.BR;######corner###original###############target
.BR;	NW#########0.000,###400.000#######0.000,###400.000
.BR;	SW#########0.000,#####0.000#######0.000,#####0.000
.BR;	SE#######400.000,#####0.000#####400.000,#####0.000
.BR;	NE#######400.000,###400.000#####400.000,###400.000
.BR;IPATCH_> ^*/TARGET_<CR_>\*
.BR;Now give a new value for each of the target control points
.BR;NW#corner#(was#######0.0000,#####400.0000)#:#^*800,#0##_<CR_>\*
.BR;SW#corner#(was#######0.0000,#######0.0000)#:#^*800,#800_<CR_>\*
.BR;SE#corner#(was#####400.0000,#######0.0000)#:#^*0,###800_<CR_>\*
.BR;NE#corner#(was#####400.0000,#####400.0000)#:#^*0,###0##_<CR_>\*
.BR;IPATCH_> ^*TYPE_<CR_>\*
.BR;00001215:#CP
.BR;Control#point#entry
.BR;-#size#of#entry#=##32#words
.BR;######corner###original###############target
.BR;	NW#########0.000,###400.000#####800.000,#####0.000
.BR;	SW#########0.000,#####0.000#####800.000,###800.000
.BR;	SE#######400.000,#####0.000#######0.000,###800.000
.BR;	NE#######400.000,###400.000#######0.000,#####0.000
.BR;IPATCH_> ^*NEXT_<CR_>\*
.BR;00001236:#NO######1###0000##00FFFFFF
.BR;IPATCH_> ^*EO_<CR_>\*
.BR;00001714:#EO
.BR;IPATCH_> ^*FIND 1236_<CR_>\*
.BR;00001236:#NO######1###0000##00FFFFFF
.BR;IPATCH_> ^*/ _* _* 1714_<CR_>\*
.BR;00001236:#NO######1###0000##00001714
.BR;IPATCH_> ^*NEXT_<CR_>\*
.BR;0000123B:#NF####170######1
.BR;IPATCH_> ^*/_<CR_>\*
.BR;FSN:#^*171_<CR_>\*
.BR;ISN:#^*171_<CR_>\*
.BR;0000123B:#NF####171####171
.BR;IPATCH_> ^*NEXT_<CR_>\*
.BR;0000123E:#FS####123###0001###4000###0000
.BR;IPATCH_> ^*/TEXT_<CR_>\*
.BR;0000123E:#FS####123###0001###8000###0000
.BR;IPATCH_> ^*/CATEGORY 4_<CR_>\*
.BR;0000123E:#FS####123###0001###8100###0000
.BR;IPATCH_> ^*/POSITION 3_<CR_>\*
.BR;0000123E:#FS####123###0001###8103###0000
.BR;IPATCH_> ^*/STATUS 0_<CR_>\*
.BR;0000123E:#FS####123###0000###8103###0000
.BR;IPATCH_> ^*/WORD 4 512_<CR_>\*
.BR;0000123E:#FS####123###0000###8103###0512
.BR;IPATCH_> ^*NEXT_<CR_>\*
.BR;00001243:#AC#Height#(3)#=#67.9##"This#text#belongs#to#a#type#3#AC.."
.BR;IPATCH_> ^*/TYPE 2_<CR_>\*
.BR;%IPATCH-I-ACNOWINT, value has been converted from real to integer
.BR;00001243:#AC#Contour#(2)#=#68##"This#text#belongs#to#a#type#3#AC.."
.BR;IPATCH_> ^*/TYPE 3_<CR_>\*
.BR;%IPATCH-I-ACNOWREAL, value has been converted from integer to real
.BR;00001243:#AC#Height#(3)#=#68.0##"This#text#belongs#to#a#type#3#AC.."
.BR;IPATCH_> ^*NEXT_<CR_>\*
.BR;00001258:#TH#####30
.BR;IPATCH_> ^*/ 25_<CR_>\*
.BR;00001258:#TH#####25
.BR;IPATCH_> ^*NEXT_<CR_>\*
.BR;0000125A:#ST######4###0000
.BR;IPATCH_> ^*TYPE_<CR_>\*
.BR;0000125A:#ST######4###0000
.BR;##1:	#####-0.5344,######14.8308
.BR;##2:	######0.8506,######16.8394
.BR;##3:	######2.2290,######18.8454
.BR;##4:	######3.4641,######23.9534
.BR;IPATCH_> ^*NEXT 2_<CR_>\*
.BR;0000126B:#EF
.BR;IPATCH_> ^*/_<CR_>\*
.BR;%IPATCH-W-NOEDIT, EF entries cannot be edited
.BR;0000126B:#EF
.BR;IPATCH_> ^*NEXT_<CR_>\*
.BR;0000126C:#NF####170######2
.BR;IPATCH_> ^*RO_<CR_>\*
.BR;00001F38:#RO######0.000
.BR;IPATCH_> ^*/ANGLE 0.8_<CR_>\*
.BR;00001F38:#RO######0.800
.BR;IPATCH_> ^*TO DEGREES 12.0_<CR_>\*
.BR;####0.800#radians#is####45.837#degrees
.BR;IPATCH_> ^*NEXT 3_<CR_>\*
.BR;00001F56:#TC##"This#TC#is#outside#a#feature.."
.BR;IPATCH_> ^*NEXT_<CR_>\*
.BR;00001F66:#NF####330#####44
.BR;IPATCH_> ^*PREVIOUS_<CR_>\*
.BR;Scanning file to establish where we are
.BR;00001F56:#TC##""This#TC#is#outside#a#feature""
.BR;IPATCH_> ^*/"Hello there"_<CR_>\*
.BR;00001F56:#TC##"Hello#there###################"
.BR;IPATCH_> ^*DISPLAY ON_<CR_>\*
.BR;%IPATCH-I-DISPLAYON, NEXT will now display intermediate entries
.BR;IPATCH_> ^*NEXT 15_<CR_>\*
.BR;00001F66:#NF####330#####44
.BR;00001F69:#FS####123###0000###8080###0000
.BR;00001F6E:#TH#####30
.BR;00001F70:#ST######1###0000
.BR;00001F75:#EF
.BR;00001F76:#TC##""This#is#a#pointless#line#of#text#.....""
.BR;00001F8B:#NF####422#####45
.BR;00001F8E:#FS######0###0000###0000###0000
.BR;00001F93:#ST######4###0000
.BR;00001FA4:#EF
.BR;00001FA5:#NF####190#####46
.BR;00001FA8:#FS######5###0000###0000###0000
.BR;00001FAD:#ST######1###0000
.BR;00001FB2:#EF
.BR;00001FB3:#CH##""This#text#came#from#a#CH#entry""
.BR;IPATCH_> ^*/_<CR_>\*
.BR;Text: ^*_<CR_>\*
.BR;00001FB3:#CH##""This#text#came#from#a#CH#entry""
.BR;IPATCH_> ^*/TEXT "fredddy"_<CR_>\*
.BR;00001FB3:#CH##"fredddy#########################"
.BR;IPATCH_> ^*EIT_<CR_>\*
.BR;%LSLLIB-E-UNEXPCMD, unexpected 'EIT' found instead of command
.BR;IPATCH_> ^*EXIT_<CR_>\*
.BR; ELAPSED: 00:05:25.84  CPU: 0:00:05.71  BUFIO: 281  DIRIO: 46  FAULTS: 263 
.BR;$

.!******************************************************************************
.!*** Messages                						     ***
.!******************************************************************************

.PAGE
.SUBTITLE
.FIGURE 5

.CENTRE; ^*IPATCH_ messages\*


.!******************************************************************************
.PAGE
.P0
^*--------------------------------------------------------------------------------\*
.HL 2 ^*MESSAGES (INFORMATIONAL)\*
.INDEX IPATCH > informational messages
.INDEX IPATCH > messages > informational

.P0; These messages provide information on the current state of the program,
or follow from a more serious message to help explain it.

.LM +4

.P-4
ACNOWINT, value has been converted from real to integer

.P0;^*Explanation:\* The current AC entry or CB fixed attribute has had its
type changed. The original type specified a real value, but the new type
specifies an integer value. The real value has been converted to an integer.

.P0;^*User action:\* None.

.P-4
ACNOWREAL, value has been converted from integer to real

.P0;^*Explanation:\* The current AC entry or CB fixed attribute has had its
type changed. The original type specified an integer value, but the new type
specifies a real value. The integer value has been converted to a real.

.P0;^*User action:\* None.

.P-4
COMMAND, commands are being read from 'file-spec'

.P0;^*Explanation:\* Both the /LOG and  the /COMMANDS switches have been
used in starting IPATCH. This message confirms which file commands will
be read from.

.P0;^*User action:\* None.


.P-4
DISPLAYOFF, NEXT will now only display the destination entry

.P0;^*Explanation:\* The DISPLAY OFF command has been given. This message
confirms its action.

.P0;^*User action:\* None.


.P-4
DISPLAYON, NEXT will now display intermediate entries

.P0;^*Explanation:\* The DISPLAY ON command has been given. This message
confirms its action.

.P0;^*User action:\* None.


.P-4
JOURNAL, commands are being journalled to 'file-spec'

.P0;^*Explanation:\* Both the /LOG and  the /JOURNAL switches have been
used in starting IPATCH. This message confirms which file commands will
be journalled to.

.P0;^*User action:\* None.


.P-4
LOOKFOR, when looking for entry 'entry', at address 'hex-address'

.P0;^*Explanation:\* This message follows a WARNING message reporting some
error in positioning back to a known entry within the IFF file. It is intended
to provide extra help in diagnosing the error.

.P0;^*User action:\* As for the WARNING message.


.P-4
MARKED, current entry now marked

.P0;^*Explanation:\* The MARK command has been given, and this message confirms
that the current entry has been marked successfully.

.P0;^*User action:\* None.


.P-4
NOCHANGE, no change made to the entry

.P0;^*Explanation:\* This message is given after an error has occurred in
the routines which prompt for new values for an ST or ZS. It indicates that
all changes for that ST or ZS in this sequence of prompts have been thrown
away.

.P0;^*User action:\* As indicated by the original error messages.


.P-4
NOPTS, no points read in for this entry

.P0;^*Explanation:\* This message indicates that no points were read in
for the current ST, ZS, or CB entry. The message follows the WARNING message
MAXPTS.

.P0;^*User action:\* As for the MAXPTS message.


.P-4
NOROTATE, no rotation - NW corner is already at the NW

.P0;^*Explanation:\* An attempt has been made to rotate the current CP entry so
that the NW corner is at the NW. The program need not do anything, but points
this out in case it was a mistake.

.P0;^*User action:\* None.


.P-4
PARTPREV, PREVIOUS will only work over the first part of the file

.P0;^*Explanation:\* This message follows an error in scanning the NF entries
in the IFF file, to allow backwards movement with the PREVIOUS command.
The error has been such that the scan has not been extended successfully,
so the PREVIOUS command will only be available over part of the file.

.P0;^*User action:\* As for the preceding WARNING message. In general, report
this error to Laser-Scan, together with a copy of the IFF file, and a log
of the commands obeyed by IPATCH before the error.


.P-4
READINGFRT, reading FRT file 'file-spec'

.P0;^*Explanation:\* This message if output if the /LOG switch has been
used, and an FRT file is specified.

.P0;^*User action:\* None.


.P-4
READONLY, the IFF file is not open for writing

.P0;^*Explanation:\* This message if output if the /LOG switch has been
used, and the /WRITE switch is absent.

.P0;^*User action:\* None.


.P-4
REPORTLSL, please report this problem to Laser-Scan

.P0;^*Explanation:\* The previous WARNING message reflects a bug or problem
in the IPATCH program, and should be reported to Laser-Scan.

.P0;^*User action:\* Report the error to Laser-Scan.


.P-4
REPROTATE, repeating rotation to put 'corner' corner at NW

.P0;^*Explanation:\* This message is output by the CP edit command /REPEAT
if the operation being repeated is a /ROTATE command.

.P0;^*User action:\* None.


.P-4
REPTARGET, repeating setting of target values

.P0;^*Explanation:\* This message is output by the CP edit command /REPEAT
if the operation being repeated is a /TARGET command.

.P0;^*User action:\* None.

.P-4
Scanning file to establish where we are

.P0;^*Explanation:\* This message (which is not prefixed by the normal
%IPATCH-x-mnemonic string) is output before IPATCH starts to scan the file
for a PREVIOUS command which is beyond the current NF list. It should be
taken as a warning that the program may be occupied for a while, depending
upon the size of the file and the distance to be scanned.

.P0;^*User action:\* Wait.


.P-4
WRITING, the IFF file is open for WRITE

.P0;^*Explanation:\* This message if output if the /LOG switch has been
used, and the file is opened with the /WRITE switch.

.P0;^*User action:\* None.

.LM -4

.!******************************************************************************
.PAGE
.P0
^*--------------------------------------------------------------------------------\*
.HL 2 ^*MESSAGES (WARNING)\*
.INDEX IPATCH > warning messages
.INDEX IPATCH > messages > warning

.P0;These messages indicate that something has gone wrong, or that the
operation requested is not possible.

.LM +4

.P-4
ACDRANGE,#'value' is outside valid range for 'name' ('code')
.I -4
##########valid range is 'value'#:#'value'

.P0;^*Explanation:\* The value entered for an AC or CB attribute value
is outside the valid range for the attribute code.

.P0;^*User action:\* Specify a value within the valid range.


.P-4
ACNOTEXT, AC does not have a text entry

.P0;^*Explanation:\* An attempt has been made to edit the text of the current
AC entry, but the entry does not contain a text field. The edit is ignored.

.P0;^*User action:\* If a text must be added to an AC entry, use a program
that can add data to an IFF file - for instance LITES2.


.P-4
ACNOWABSENT, value has been set to absent because of datatype change

.P0;^*Explanation:\* The current AC entry or CB fixed attribute has had its
type changed. The old value is not within the valid range for the new type,
so the value has been set to absent.

.P0;^*User action:\* Unless the absent value is desired, then set a new value
appropriate to the new datatype.

.P-4
BADCORNER, there is no corner 'corner' - it should be NW,SW,SE or NE

.P0;^*Explanation:\* The corner name used for the CP edit command /ROTATE
is not one of the four recognised corners. The command is ignored.

.P0;^*User action:\* Try again with one of the valid corner names, as listed
in the error message.


.P-4
BADDATE, bad date format "'string'"

.P0;^*Explanation:\* Dates must be given in the system date format dd-mmm-yyyy.

.P0;^*User action:\* Specify date correctly.


.P-4
BADFIND, cannot FIND before 00000001 or after 'end-of-file' - nothing there

.P0;^*Explanation:\* The FIND command will only move to an address within
the IFF file (after the start of file, and up to the end of file). The address
given was outside that range. The command is ignored.

.P0;^*User action:\* Check the address given. Note that it should be a
hexadecimal value.


.P-4
BADNEXT, argument to NEXT must be greater than zero

.P0;^*Explanation:\* It is not possible to use NEXT to move backwards, or
to stay on the same entry. Thus NEXT 0 or NEXT -1 are illegal commands.

.P0;^*User action:\* Use PREVIOUS to move backwards, ? to show the current
entry again, or specify a positive value for the distance to NEXT forwards.


.P-4
BADPREV, argument to PREVIOUS must be greater than zero

.P0;^*Explanation:\* It is not possible to use PREVIOUS to move forwards, or
to stay on the same entry. Thus PREVIOUS 0 or PREVIOUS -1 are illegal commands.

.P0;^*User action:\* Use NEXT to move forwards, ? to show the current
entry again, or specify a positive value for the distance to PREVIOUS backwards.


.P-4
BADPRJ, unknown projection code 'integer'

.P0;^*Explanation:\* The EXPLAIN command is trying to explain the contents
of the current MD entry, but it does not recognise the projection code.
Either the current version of IPATCH is not up to date with respect to legal
values in the MD, or the MD is corrupt.

.P0;^*User action:\* The utility ITRANS can be used to report on the MD
entry more fully, and its documentation lists legal projection codes and
their meanings. ITRANS should also be used to repair a corrupt MD entry,
although the cause of the error should also be established.


.P-4
BADREV, unknown revision level 'integer', must be -1, 0, or 1

.P0;^*Explanation:\* An illegal IFF input revision level has been
specified, either by the /REVISION__LEVEL qualifier, or by the
REVISION__LEVEL command.

.P0;^*User action:\* Specify correct revision level.


.P-4
BADSPH, unknown spheroid code 'integer'

.P0;^*Explanation:\* The EXPLAIN command is trying to explain the contents
of the current MD entry, but it does not recognise the spheroid code.
Either the current version of IPATCH is not up to date with respect to legal
values in the MD, or the MD is corrupt.

.P0;^*User action:\* The utility ITRANS can be used to report on the MD
entry more fully, and its documentation lists legal spheroid codes and
their meanings. ITRANS should also be used to repair a corrupt MD entry,
although the cause of the error should also be established.


.P-4
BADTIME, bad time format "'string'"

.P0;^*Explanation:\* Times must be given in the system time format hh:mm:ss.cc.

.P0;^*User action:\* Specify time correctly.


.P-4
BADTYPE, argument to TYPE must be zero or greater

.P0;^*Explanation:\* It is not possible to use TYPE to move backwards.
Thus TYPE -1 is an illegal command.

.P0;^*User action:\* Use PREVIOUS to move backwards. Use TYPE or TYPE 0
to type the current entry, or a value larger than zero to type the next
several entries.


.P-4
BADUNT, unknown units code 'integer'

.P0;^*Explanation:\* The EXPLAIN command is trying to explain the contents
of the current MD entry, but it does not recognise the units code.
Either the current version of IPATCH is not up to date with respect to legal
values in the MD, or the MD is corrupt.

.P0;^*User action:\* The utility ITRANS can be used to report on the MD
entry more fully, and its documentation lists legal units codes and
their meanings. ITRANS should also be used to repair a corrupt MD entry,
although the cause of the error should also be established.


.P-4
BINCHOPERR, internal error looking for start of current feature

.P0;^*Explanation:\* When IPATCH moves the current position to an entry
within the list of addresses which it has scanned for the PREVIOUS list,
it looks for the start of the feature containing this entry. This error
means that the binary chop that it uses to perform that search has failed
- the top and bottom limits have crossed over each other.

.P0;^*User action:\* Unless something obviously strange has already occurred
earlier in the IPATCH session, which would quite sensibly have corrupted
the internal list of NF positions, then report this error to Laser-Scan
with as much detail as possible (eg the file and a log of the commands obeyed).


.P-4
CANTEDIT, you cannot edit the 'string' of the file

.P0;^*Explanation:\* 'string' will be either "start" or "end". The start
of the IFF file (address 00000000) and the end of the IFF file are not entries,
so cannot be edited. Thus the preceding / command will be ignored.

.P0;^*User action:\* None.


.P-4
CBEDIT, to edit a CB use /FLAGS /CHANGE /DELETE /GTYPE or /ATTRIBUTE


.P0;^*Explanation:\* Line mode and prompt mode edit commands are not provided
for CB entries. The command is ignored.

.P0;^*User action:\* Use one of the command mode edit commands specified.


.P-4
CHKTERM, error checking to see if SYS$OUTPUT is an ANSI terminal

.P0;^*Explanation:\* When the STATUS ON command is given, IPATCH checks
to see if the terminal is an ANSI terminal. If it is not, then the status
area will not work. If an error occurs establishing this fact, then various
system error messages may result, followed by this message. The status area
will not be established.

.P0;^*User action:\* Dependent upon the system errors. If in doubt, report
this error to the system manager or to Laser-Scan, with the results of the
DCL SHOW TERMINAL command.


.P-4
CONVWHAT, missing arguments to TO - convert what to what?

.P0;^*Explanation:\* The TO command was not followed by one of DECIMAL,
DEGREES, HEXADECIMAL or RADIANS.

.P0;^*User action:\* Repeat the command with the rest of the line correct.


.P-4
CPBOTH, it is not possible to repeat the /BOTH operation

.P0;^*Explanation:\* The CP edit /REPEAT command cannot be used to repeat
the /BOTH command, as this would involve changing the original side of the
CP without any checks.

.P0;^*User action:\* If the original side of the CP must be changed, use
the /BOTH command on each occasion.


.P-4
CPEDIT, to edit a CP use /TARGET, /BOTH, /ROTATE or /REPEAT

.P0;^*Explanation:\* This message is given if line mode or prompt mode editing
is attempted on a CP entry. These edit modes are not supported for the CP.

.P0;^*User action:\* Use one of the command mode edit commands, as suggested.


.P-4
CPNONE, no previous CP edit to repeat

.P0;^*Explanation:\* The /REPEAT command has been used on a CP, but there
has not been a previous CP edit.

.P0;^*User action:\* Use the appropriate CP edit command.


.P-4
CRESTATUS, error creating status area - status is now OFF

.P0;^*Explanation:\* In order to maintain the status area on the screen,
IPATCH uses binary writes to the relevant lines. This error is given if
the program fails to open the terminal for binary writing. The status area
will not be written.

.P0;^*User action:\*  If in doubt, report
this error to the system manager or to Laser-Scan, with the results of the
DCL SHOW TERMINAL command.


.P-4
DELORDER, current entry is before the marked entry - can't delete to the mark

.P0;^*Explanation:\* To perform a DELETE MARK, the marked entry must precede
the current entry. The command is ignored.

.P0;^*User action:\* Ensure that the entry at the start of the range to
be deleted is the one marked, and that the current entry when you give the
command is the one AFTER the range to be deleted. Then try again.


.P-4
DISABOVE, PREVIOUS is disabled above 'hex-address'

.P0;^*Explanation:\* This message should not occur in the current version
of IPATCH. It is a historical message from earlier development versions.

.P0;^*User action:\* Report the message to Laser-Scan, with as much data
as possible - preferably the IFF file and a log of the commands used to
produce the message.


.P-4
EDITCC, use the form 'letter' 'value' to change CC entries

.P0;^*Explanation:\* Line mode and prompt mode are not supported for editing
CC entries. The command is ignored.

.P0;^*User action:\* Use the /UNIT command to set the CC to the unit
transformation, or one of the commands  /A to /T to edit individual values.


.P-4
EDITCS, there are no /commands to edit a CS - try prompt mode

.P0;^*Explanation:\* Command mode is not supported for editing the CS entry,
as it is considered obsolete. The command is ignored.

.P0;^*User action:\* Use line or prompt mode.


.P-4
EDITSSL, there are no /commands to edit an SS or SL - try prompt mode

.P0;^*Explanation:\* Command mode is not supported for editing the SS or
SL entries, as they are considered obsolete. The command is ignored. 

.P0;^*User action:\* Use line or prompt mode.


.P-4
ENDOFCOM, unexpected end of command file - now prompting

.P0;^*Explanation:\* If the command file specified with the /COMMANDS switch
does not end with an EXIT command, then IPATCH will give this message and
look for commands from SYS$INPUT:.

.P0;^*User action:\* Either give the EXIT command to the first prompt, or
proceed to use the program interactively.


.P-4
ENDSCAN, error moving back to current entry after scanning file

.P0;^*Explanation:\* After scanning the IFF file to update the PREVIOUS
list (for instance, after a NEXT command which moves off the end of the
list), an error has occurred in going back to the entry that should be current.
This probably reflects a bug or problem in either IPATCH or the IFF library.

.P0;^*User action:\* Report the problem to Laser-Scan, with as much detail
as possible - preferably the IFF file and a log of the commands which provoked
the message.


.P-4
FSBITS, cannot find 'type' FS

.P0;^*Explanation:\* This message is given if one of the LINE, SYMBOL or
TEXT commands has been used to search for an FS entry with the appropriate
bits set in word 3, and IPATCH has not been able to find such an entry after
the current entry. 'type' is one of "linear", "symbol" or "text". The program
will position back to the current entry - the effect is as if the command
had never been given.

.P0;^*User action:\* None.

.P-4
GOBACK, error going back to current entry, after PREVIOUS scan

.P0;^*Explanation:\* When moving backwards during the PREVIOUS command,
IPATCH has to take various other entries into hand before making the
destination entry current. This message indicates that some error occurred in
that final step. This probably reflects a bug or problem in either IPATCH or
the IFF library. 
                
.P0;^*User action:\* Report the problem to Laser-Scan, with as much detail
as possible - preferably the IFF file and a log of the commands which provoked
the message.


.P-4
GOTOEOF, error moving to end of file

.P0;^*Explanation:\* The EOF command has been given, but the program is
unable to reach the place that it considers end of file. This probably
reflects a bug or problem in either IPATCH or the IFF library. 
                

.P0;^*User action:\* Report the problem to Laser-Scan, with as much detail
as possible - preferably the IFF file and a log of the commands which provoked
the message.


.P-4
GOTOVO, error returning to just deleted entry (void)

.P0;^*Explanation:\* In order to delete an entry (using DELETE), IPATCH
must effectively perform the sequence

.P8;MARK
.I8;NEXT
.I8;DELETE MARK
.I8;PREVIOUS

.P0; This message indicates that an error occurred in the final stage,
equivalent to a PREVIOUS command. Other error messages should indicate more
about the problem. This probably reflects a bug or problem in either IPATCH or
the IFF library. 

.P0;^*User action:\* Report the problem to Laser-Scan, with as much detail
as possible - preferably the IFF file and a log of the commands which provoked
the message.


.P-4
HANDST, error taking ST/ZS/CB into hand again, after editing it

.P0;^*Explanation:\* Editing an ST, ZS, or CB entry can involve deleting it and
then overwriting it with the new values (specifically, the /PEN and /DELETE
commands must follow this sequence). This error indicates that after the new
entry has been written out to the file, IPATCH tried to take it back into hand,
but failed. Other error messages should indicate more about the problem. This
probably reflects a bug or problem in either IPATCH or the IFF library. 

.P0;^*User action:\* Report the problem to Laser-Scan, with as much detail
as possible - preferably the IFF file and a log of the commands which provoked
the message.


.P-4
HEXRANGE, 'hex-number' is out of range - should be between 'hex-number' and
'hex-number'

.P0;^*Explanation:\* The previous command contained a hexadecimal value
which was outside the range permitted for the particular application. The
permitted range is indicated in the message. The command is ignored. 

.P0;^*User action:\* Specify the command again with a corrected value.


.P-4
IFFPKE, error in positioning to entry

.P0;^*Explanation:\* This error indicates that IPATCH tried to position
to a given address, but failed to find an entry there. The unrecognised entry
type, XX, will be indicated. The normal cause of this message is using FIND to
move to a wrong address, or trying to read a corrupt area of an IFF file.

.P0;^*User action:\* If the error was caused by FIND, then check the argument
- the address should be a hexadecimal number. If the error does not seem to be
caused by the commands given or by the file itself, then report the problem to
Laser-Scan, with as much detail as possible - preferably the IFF file and a log
of the commands which provoked the message. 

.P-4
INTRANGE, 'integer' is out of range - should be between 'integer' and
'integer'

.P0;^*Explanation:\* The previous command contained a number which was outside
the range permitted for the particular application. The permitted range
is indicated in the message. The command is ignored.

.P0;^*User action:\* Specify the command again with a corrected value.


.P-4
MARKDEL	, no marked entry to delete from

.P0;^*Explanation:\* The DELETE MARK command has been given, but there is
no marked entry. This means that either the MARK command has not been used
to mark an entry, or that a previous command has removed the MARK. The commands
DELETE and DELETE MARK both remove any existing marks.

.P0;^*User action:\* Mark the required entry and try again.


.P-4
MARKERR, error in positioning back to MARKed entry

.P0;^*Explanation:\* This message follows an error in the RETURN command.
It probably reflects a bug or problem in either IPATCH or the IFF library. 

.P0;^*User action:\* Report the problem to Laser-Scan, with as much detail
as possible - preferably the IFF file and a log of the commands which provoked
the message.

.P-4
MAXENTRIES, more than 200 entries from the current NF to the next

.P0;^*Explanation:\* The list of entries in the current 'feature' that is
maintained to allow the PREVIOUS command can only contain up to 200 addresses.
Thus if there are more than that number of entries between the two NFs under
consideration, this message will appear. The MAXENTRIES message is followed by
the PREVBETWEEN message (qv), which explains over which area of the file
PREVIOUS will be disabled. 

.P0;^*User action:\* If this is a problem, request Laser-Scan to rebuild
IPATCH with a larger limit for the number of entries between NFs.


.P-4
MAXPTS, 'entry' contains 'integer' points, but maximum storable is 200

.P0;^*Explanation:\* Conventionally, no ST, ZS, or CB entry may contain more
than 200 points, and this is the maximum that IPATCH can read in. This message
is given when an ST, ZS, or CB entry with more than that number of points is
made current. If the IFF file is corrupt, then it is possible that this
is not a true ST, ZS, or CB entry, but just a bit pattern that looks like such.

.P0;^*User action:\* If applicable, correct the program producing the ST, ZS,
or CB entries with too many points.


.P-4
MD2LEN, version 2 MD entry should be 'integer' words long

.P0;^*Explanation:\* IPATCH knows how many words there should be in a version#2
MD entry. If the definition of an MD entry has been changed to make the
entry longer, or if a corrupt MD entry which appears longer is found, then
this message will be given.

.P0;^*User action:\* Report the error to Laser-Scan, with as much detail
as possible, including the date of release of the IPATCH image, the exact
text of the message(s), and the IFF file.


.P-4
MDVERSION, unknown map descriptor version 'integer'

.P0;^*Explanation:\* A map descriptor with an unrecognised version number
has been found. Either the version of IPATCH has not been updated to recognise
a new form of descriptor, or the MD entry is corrupt.

.P0;^*User action:\* Report the error to Laser-Scan, with as much detail
as possible, including the date of release of the IPATCH image, the exact
text of the message(s), and the IFF file.


.P-4
MHEDIT, use the /CUSTOMER command to edit the MH customer number

.P0;^*Explanation:\* Line and prompt modes are not available for editing
the MH entry, and the only command available is to edit the customer number.
The edit command is ignored.

.P0;^*User action:\* If the customer number is to be changed, use the /CUSTOMER
command, otherwise use the appropriate utility to edit the map header.


.P-4
NEXTDEL	, error moving to next entry, to delete this one

.P0;^*Explanation:\* The DELETE command must effectively perform the sequence

.P8; MARK
.I8; NEXT
.I8; DELETE MARK
.I8; PREVIOUS

.P0; This message indicates that the 'NEXT' stage has failed. This
probably reflects a bug or problem in either IPATCH or the IFF library. 

.P0;^*User action:\* Report the problem to Laser-Scan, with as much detail
as possible - preferably the IFF file and a log of the commands which provoked
the message.


.P-4
NEXTEOF, you can't NEXT off the end of the file

.P0;^*Explanation:\* The current position is at the end of file, and a NEXT
command has been given. It is ignored. Note that a NEXT 'count' command
which tries to move over the end of the file will give this error and stop
at the end of file.

.P0;^*User action:\* None.


.P-4
NEXTERR, NEXT command abandoned after 'integer' entries

.P0;^*Explanation:\* This follows an error message from the IFF library,
reflecting a problem in taking the next entry into hand. This
probably reflects a bug or problem in either IPATCH or the IFF library. 

.P0;^*User action:\* Report the problem to Laser-Scan, with as much detail
as possible - preferably the IFF file and a log of the commands which provoked
the message.


.P-4
NEXTONE, NEXT command abandoned after 1 entry

.P0;^*Explanation:\* This follows an error message from the IFF library,
reflecting a problem in taking the next entry into hand. This
probably reflects a bug or problem in either IPATCH or the IFF library. 

.P0;^*User action:\* Report the problem to Laser-Scan, with as much detail
as possible - preferably the IFF file and a log of the commands which provoked
the message.


.P-4
NFGONE, no NF where expected, when attempting PREVIOUS scan

.P0;^*Explanation:\* When an entry is made current, and it is within the
area of the file that has been scanned to allow PREVIOUS to operate there,
then a routine is called to determine which entry within the current 'feature'
this one is. If the initial NF entry of the 'feature' is not found where
it is expected, then this error is given.

.P0;^*User action:\* Unless a sequence of actions which might have corrupted
the NF entry has been taken (for instance using FIND to move near the NF and
editing the 'apparent' entry there), this is probably an error in either IPATCH
or the IFF library. In that case, report the problem to Laser-Scan, with as
much detail as possible - preferably the IFF file and a log of the commands
which provoked the message. 


.P-4
NOADDRESS, no (hexadecimal) address given after FIND

.P0;^*Explanation:\* The FIND command must be followed by the address of
the entry it is to find. The command is ignored.

.P0;^*User action:\* Give the FIND command with the required address.


.P-4
NOATT, fixed attribute 'name' ('code') not present in CB

.P0;^*Explanation:\* The attribute specified in a /ATTRIBUTE command is
not present in the current CB entry, and can not therefore be edited.

.P0;^*User action:\* Specify an attribute which is present in the CB.


.P-4
NOCORNER, no corner given - say which corner should be at the NW

.P0;^*Explanation:\* The CP edit command /ROTATE has been given without
following it by the name of a corner which should be placed at the NW corner.

.P0;^*User action:\* Give the command again, with one of the corners
NW,SW,SE,NE.


.P-4
NOCURDEL, no current entry to delete

.P0;^*Explanation:\* The DELETE command has been given when there is no
current entry. It is ignored.

.P0;^*User action:\* Make sure that the entry that is to be deleted is current
before trying to delete it.


.P-4
NOCURMARK, no current entry to MARK

.P0;^*Explanation:\* The MARK command has been given when there is no
current entry. It is ignored.

.P0;^*User action:\* Make sure that the entry that is to be marked is current
before trying to mark it.


.P-4
NOEDIT, 'entry' entries cannot be edited

.P0;^*Explanation:\* An attempt has been made to edit an entry that cannot
be edited - for instance an EF. The command is ignored.

.P0;^*User action:\* None.


.P-4
NOENTRY, no entry at that position

.P0;^*Explanation:\* The FIND command has been used to move to an address
that does not contain a recognisable entry. Other messages will help to
clarify the problem.

.P0;^*User action:\* Check that the address given to FIND was correct, and
that it was hexadecimal.


.P-4
NOEOPTR, this NO entry does not contain an EO pointer

.P0;^*Explanation:\* An attempt has been made to edit the pointer field
of an NO entry which does not include one. The command is ignored.

.P0;^*User action:\* If an EO pointer field must be added, then use a utility
which can add new data to the IFF file - for instance LITES2.


.P-4
NOMARK, no marked entry to RETURN to

.P0;^*Explanation:\* The RETURN command has been given, but there is no
marked entry to move back to. Either the MARK command has not been used,
or a DELETE or DELETE MARK command has removed the mark.

.P0;^*User action:\* Find the required entry by some other method.


.P-4
NOSEARCH, error returning to old entry after search failed

.P0;^*Explanation:\* If a search for a particular entry reaches the end
of file without finding the entry, then IPATCH makes the entry that was current
before the search be current again. This message indicates that that operation
failed. This probably reflects a bug or problem in either IPATCH or the IFF
library. 

.P0;^*User action:\* Report the problem to Laser-Scan, with as much detail
as possible - preferably the IFF file and a log of the commands which provoked
the message.


.P-4
NOTANSI, SYS$OUTPUT_: is not an ANSI terminal

.P0;^*Explanation:\* The STATUS ON command outputs this message if the terminal
will not support a status area. The status area is created and maintained
using ANSI escape sequences, so the terminal must support them for a status
area to be possible.

.P0;^*User action:\* None.


.P-4
NOTBIT, 'integer' is out of range - should be 0 or 1 (bit unset or set)

.P0;^*Explanation:\* The various bit setting commands used to edit the second
word of the FS entry take an argument which is either 0 or 1. This message
is given if some other value is found.

.P0;^*User action:\* Try the command again with the correct value.


.P-4
NOTENTRY, entry 'entry' at 'hex-address' is not simply reachable

.P0;^*Explanation:\* If the FIND command is used to position to an entry
which is within the area of the file scanned for PREVIOUS, but could not
be reached by using successive NEXT commands from the start of file, then
this warning is given. It is probable that the apparent current entry is
really just a bit pattern that looks like an entry to the IFF library.

.P0;^*User action:\* Check that the correct argument was given to FIND -
it should be a hexadecimal address. Take great care in using or amending
the entry.


.P-4
NOTIFTEXT, cannot do that for text features (text bit is set)

.P0;^*Explanation:\* An attempt has been made to use the /PC edit command
on an FS with the text bit set in word 3. Text features do not have a process
code. The command is ignored.

.P0;^*User action:\* If the command was correct, use the /SYMBOL or /LINE
command to change the FS and then try the /PC command again. Otherwise,
perform an edit appropriate to a text.


.P-4
NOTSTRING, LIST will only work for an ST, ZS, or CB

.P0;^*Explanation:\* The LIST command was used on a current entry that is
not an ST or a ZS. The command is ignored.

.P0;^*User action:\* To show the contents of an entry that is not an ST
or ZS, use one of the EXPLAIN or TYPE commands.


.P-4
NOTWRITE, IFF file has not been opened for write

.P0;^*Explanation:\* An edit or delete command was given on a file which
was not opened /WRITE. The command is ignored.

.P0;^*User action:\* If the file is to be edited, specify the /WRITE switch
on the initial command line.


.P-4
OPENCOM, error opening command file 'file-spec'

.P0;^*Explanation:\* The /COMMANDS switch was used to designate a file from
which commands should be taken. However, the file could not be opened -
other messages should explain why not. This message repeats the name of
the file that IPATCH thought was being opened.

.P0; The program will continue with prompts to SYS$INPUT_:.

.P0;^*User action:\* Either EXIT and try with a correct file specification,
or continue editing interactively.


.P-4
OPENJOU, error opening journal file 'file-spec'

.P0;^*Explanation:\* The /JOURNAL switch was used to designate a file to
which commands should be journalled. However, the file could not be opened -
other messages should explain why not. This message repeats the name of
the file that IPATCH thought was being opened.

.P0; The program will continue without journalling commands.

.P0;^*User action:\* Either EXIT and try with a correct file specification,
or continue editing without journalling the commands.


.P-4
ORDER, cannot work from 'integer' to 'integer' - try again in the other
order

.P0;^*Explanation:\* A range was specified to a command such as LIST or
/DELETE, with the first number being higher than the second. The range must
be specified from low end to high end.

.P0;^*User action:\* Repeat the command with the numbers in the other order.


.P-4
OUTRANGE, 'number' is out of range - should be between 'integer' and
'integer' 

.P0;^*Explanation:\* The previous command contained a number which was outside
the range permitted for the particular application. The permitted range
is indicated in the message. The command is ignored.

.P0;^*User action:\* Specify the command again with a corrected value.


.P-4
PREVBETWEEN, PREVIOUS will not work between 'hex-address' and 'hex-address'

.P0;^*Explanation:\* This message follows the MAXENTRIES message (qv). Since
only the first 200 entries between the previous and next NF can be remembered,
PREVIOUS will not work for the 201st entry through to the entry before the
next NF. This message specifies which addresses the PREVIOUS command will
thus not work between.

.P0;^*User action:\* If this is a problem, request Laser-Scan to rebuild
IPATCH with a larger limit for the number of entries between NFs.


.P-4
PREVBOF, you can't PREVIOUS off the start of the file

.P0;^*Explanation:\* The current position is at the start of file, and a
PREVIOUS command has been given. It is ignored. Note that a PREVIOUS 'count'
command which tries to move over the start of the file will give this error and
stop at the start of file. 

.P0;^*User action:\* None.


.P-4
PREVERR, PREVIOUS command abandoned

.P0;^*Explanation:\* This follows an error message from the program or
IFF library, reflecting a problem in taking the previous entry into hand. This
probably reflects a bug or problem in either IPATCH or the IFF library. 

.P0;^*User action:\* Report the problem to Laser-Scan, with as much detail
as possible - preferably the IFF file and a log of the commands which provoked
the message.


.P-4
PREVNF, error looking for NF entry, during PREVIOUS scan

.P0;^*Explanation:\* If moving backwards beyond the start of the current
'feature', PREVIOUS makes previous NF entries temporarily current whilst
it is moving back. This message indicates that an NF entry was not where
one was expected, which indicates corruption of the list of NF entries.

.P0;^*User action:\* Unless the previous actions are likely to have confused
IPATCH about the positions of NF entries (such as using FIND to move somewhere
strange and editing over an actual NF), then this indicates a problem in either
the IFF library or the program. Report the problem to Laser-Scan, with as much
detail as possible - preferably the IFF file and a log of the commands which
provoked the message. 



.P-4
PREVXX, error looking for start-of-file entry, during PREVIOUS scan

.P0;^*Explanation:\* This error is similar to the PREVNF error, but occurs
when IPATCH is trying to move back between the start of file and the first
NF. It indicates that the first entry is now what was expected.

.P0;^*User action:\* As for the PREVNF error.


.P-4
READCOM, error reading from command file 'file-spec' - abandoning file

.P0;^*Explanation:\* This message follows LSLLIB messages describing the
problem with reading from the file specified by the /COMMANDS switch. IPATCH
will start to prompt for input from SYS$INPUT_:.

.P0;^*User action:\* Dependent upon the LSLLIB errors.


.P-4
REMARK, error restoring the MARK after replacing an ST/ZS/CB

.P0;^*Explanation:\* Some ST, ZS, and CB edit operations have
to delete and then rewrite the entry. This has the side-effect of removing
the current mark. However, they then attempt to reinstate the mark so that
the operation is transparent to the user. This message indicates some problem
in restoring the mark, and represents a bug.

.P0;^*User action:\* Report the problem to Laser-Scan, with as much detail
as possible - preferably the IFF file and a log of the commands which provoked
the message.


.P-4
RESCAN, error moving to last known NF to continue PREVIOUS scan

.P0;^*Explanation:\* When the PREVIOUS command is given at a position above
the area of the file that was already scanned, IPATCH must scan up to the
current entry. This message follows IFF messages about problems repositioning
to the last NF that was in the scanned list - ie the position at which IPATCH
wishes to start its new scan.

.P0;^*User action:\* Unless the previous actions are likely to have confused
IPATCH about the positions of NF entries (such as using FIND to move somewhere
strange and editing over an actual NF), then this indicates a problem in either
the IFF library or the program. Report the problem to Laser-Scan, with as much
detail as possible - preferably the IFF file and a log of the commands which
provoked the message. 


.P-4
RETST, error returning to ST/ZS/CB entry after restoring the MARK

.P0;^*Explanation:\* Some ST, ZS, and CB edit operations have
to delete and then rewrite the entry. This has the side-effect of removing
the current mark. However, they then attempt to reinstate the mark so that
the operation is transparent to the user. This message indicates some problem
in returning to the ST/ZS/CB after restoring the mark, and represents a bug.

.P0;^*User action:\* Report the problem to Laser-Scan, with as much detail
as possible - preferably the IFF file and a log of the commands which provoked
the message.


.P-4
RUBBISH, unexpected "'character'" - line ignored

.P0;^*Explanation:\* An unexpected character was found at the end of a command
line which otherwise made sense. Lines must either end with a _<CR_>
or be terminated by a comment character (!). The line is ignored.

.P0;^*User action:\* Repeat the line without the extraneous character, or
prefix the character(s) by a comment symbol.


.P-4
SCANERR, error scanning file for PREVIOUS

.P0;^*Explanation:\* This message is given when the IFF library has an error
finding the next NF entry during a scan of the IFF file to allow the PREVIOUS
command. It should follow IFF error messages explaining the problem.

.P0;^*User action:\* If the errors are not sensible from context, then
report the problem to Laser-Scan, with as much detail as possible - preferably
the IFF file and a log of the commands which provoked the message. 


.P-4
SEARCH, cannot find 'entry' 'details'

.P0;^*Explanation:\* This message is given if an entry search command (eg AC)
has been given, and IPATCH has been unable to find such an entry after the
current entry. 'entry' is the type of entry being searched for, and 'details'
is the rest of the entry search specification (for instance, what AC type was
requested). IPATCH repositions to the current entry - the effect is as if
the search command had not been given.

.P0;^*User action:\* None.


.P-4
SEARCHEOF, you can't search off the end of the file

.P0;^*Explanation:\* This message is given if you are positioned at the
end of the file and attempt to search for an entry - that is, using
the TEXT,LINE or SYMBOL commands, or one of the entry search commands.
The command is ignored.

.P0;^*User action:\* If you want to search from the start of the file, then
use the _* command to move there. Otherwise, reconsider what effect is wanted.

.P-4
STCHANGE, which points are to be changed?

.P0;^*Explanation:\* If the /CHANGE edit command is used on an ST, ZS, or CB
without arguments, and the entry has more than one point, then it is not
obvious which points are to be changed. The command is ignored.

.P0; Note that if there is only one point in the ST, ZS, or CB, then IPATCH
deduces correctly which point to change. 

.P0;^*User action:\* Repeat the command specifying which point(s) to change.


.P-4
STDELETE, which points are to be deleted?

.P0;^*Explanation:\* If the /DELETE edit command is used on an ST, ZS, or CB
without arguments, and the entry has more than one point, then it is not
obvious which points are to be deleted. The command is ignored.

.P0; Note that if there is only one point in the ST, ZS, or CB, then IPATCH
deduces correctly which point to delete. 

.P0;^*User action:\* Repeat the command specifying which point(s) to delete.


.P-4
STEDIT, to edit an ST or ZS use /PEN, /CHANGE or /DELETE

.P0;^*Explanation:\* Line mode and prompt mode edit commands are not provided
for ST and ZS entries. The command is ignored.

.P0;^*User action:\* Use one of the command mode edit commands specified.


.P-4
TEXTONLY, can only do that for text features (text bit is not set)

.P0;^*Explanation:\* One of /CATEGORY, /TYPE_STYLE or /POSITION edit commands
was used on an FS which has not got the text bit set. These commands are
not applicable to lines or symbols.

.P0;^*User action:\* If the command was correct, then use the /TEXT edit
command to change the FS to have the text bit set in word 3. Otherwise,
use the /PC edit command to edit the process code.


.P-4
TOOMANYNF, error in PREVIOUS scan - more than 65535 NF entries found in file

.P0;^*Explanation:\* The list of NF entries maintained by IPATCH to allow
the PREVIOUS command can only hold up to 65535 NF entries. This message
is given if an attempt is made to scan more than that. In fact, a correct
IFF file cannot have more than 65535 NF entries in it, as the internal sequence
number must be between 1 and 65535, and unique within the file.

.P0;^*User action:\* None.


.P-4
TYPEERR, TYPE command abandoned after 'integer' entries

.P0;^*Explanation:\* This follows an error message from the IFF library,
reflecting a problem in taking the next entry into hand. This
probably reflects a bug or problem in either IPATCH or the IFF library. 

.P0;^*User action:\* Report the problem to Laser-Scan, with as much detail
as possible - preferably the IFF file and a log of the commands which provoked
the message.


.P-4
TYPEONE, TYPE command abandoned after 1 entry

.P0;^*Explanation:\* This follows an error message from the IFF library,
reflecting a problem in taking the next entry into hand. This
probably reflects a bug or problem in either IPATCH or the IFF library. 

.P0;^*User action:\* Report the problem to Laser-Scan, with as much detail
as possible - preferably the IFF file and a log of the commands which provoked
the message.


.P-4
UNEXPENT, unexpected entry 'entry' found

.P0;^*Explanation:\* This message is given when the program has moved to
an address expecting to find one type of entry, and has instead found the type
mentioned. It will be followed by other messages which detail the
circumstances. 

.P0;^*User action:\* Dependent upon the accompanying messages.


.P-4
UNKENTRY, unknown entry type 'entry' at address 'hex-address'

.P0;^*Explanation:\* This message is output whenever the program attempts
to print out an entry type that it does not recognise. This indicates that
the program is not up to date with respect to the possible entries within
an IFF file.

.P0;^*User action:\* Report the problem to Laser-Scan, with a note of the
unrecognised entry type. Laser-Scan will either update IPATCH to recognise
the entry, or request further details if the entry really does not exist.


.P-4
UNKSEARCH, attempt to search for unknown entry type 'entry'

.P0;^*Explanation:\* This error should not occur, as it indicates that the
searching section of the program has been asked to look for an entry that
it does not know about.

.P0;^*User action:\* Report the problem to Laser-Scan, with a note of the
unrecognised entry type. Laser-Scan will provide a corrected version of
IPATCH.


.P-4
UNMARK, the MARK is now removed

.P0;^*Explanation:\* This message follows the REMARK message, and acts as
a reminder that the marked entry is no longer marked.

.P0;^*User action:\* As for the REMARK message.


.P-4
WILDNEXT, DISPLAY is OFF - attempt to do "NEXT _*" ignored

.P0;^*Explanation:\* This message is given if the NEXT _* command has been
used when the NEXT command will not display intermediate entries. Since
the EOF command is provided to move immediately to the end of the IFF file,
this is faulted.

.P0;^*User action:\* Either switch DISPLAY ON and try again, or use the
EOF command.


.P-4
WRITEJOU, error writing to journal file 'file-spec' - stopping journal

.P0;^*Explanation:\* This message follows LSLLIB messages describing the
problem with writing to the file specified by the /JOURNAL switch. Journalling
of commands will cease.

.P0;^*User action:\* Dependent upon the LSLLIB errors.


.P-4
XXGONE, no entry where expected, when attempting scan for PREVIOUS

.P0;^*Explanation:\* The error is identical to the NFGONE error, except
that the program was looking for the first entry in the file, rather than
an NF entry.

.P0;^*User action:\* As for NFGONE.

.LM -4



.!******************************************************************************
.PAGE
.P0
^*--------------------------------------------------------------------------------\*
.HL 2 ^*MESSAGES (FATAL)\*
.INDEX IPATCH > fatal messages
.INDEX IPATCH > messages > fatal

.P0; These messages reflect a problem with the program itself, and should
be reported to Laser-Scan.

.LM +4

.P-4
BADREPEAT, unknown operation 'integer' to REPEAT

.P0;^*Explanation:\* None.

.P0;^*User action:\* Report problem to Laser-Scan, together with a note
of which command was just given. A new version of IPATCH will be issued.


.P-4
NOSUCHCMD, command number 'integer' not recognised


.P0;^*Explanation:\* None.

.P0;^*User action:\* Report problem to Laser-Scan, together with a note
of which command was just given. A new version of IPATCH will be issued.


.P-4
NOSUCHCMD2, secondary command number 'integer' not recognised


.P0;^*Explanation:\* None.

.P0;^*User action:\* Report problem to Laser-Scan, together with a note
of which command was just given. A new version of IPATCH will be issued.

.LM -4

.!******************************************************************************
.PAGE
.P0
^*--------------------------------------------------------------------------------\*
.HL 2 ^*MESSAGES (OTHER)\*
.INDEX IPATCH > other messages
.INDEX IPATCH > messages > other

.P0; In addition to those which are generated by IPATCH itself, messages may be
produced by the command line interpreter (CLI) and by Laser-Scan libraries. 

.P0; In particular, messages may be generated by the IFF library and by the
Laser-Scan I/O library, LSLLIB.

.P0; IFF library messages are introduced by '%IFF' and are documented in the IFF
library user's guide. In most cases IFF errors will be due to a corrupt input
file, and this should be the first area of investigation. If the cause of the
error cannot be traced by the user, and Laser-Scan are consulted, then the
input file should be preserved to facilitate diagnosis. 

.P0; LSLLIB messages are introduced by '%LSLLIB' and are generally
self-explanatory. They are used to explain the details of program generated
errors. 
