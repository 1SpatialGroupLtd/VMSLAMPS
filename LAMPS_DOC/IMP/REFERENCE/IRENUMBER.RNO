.NO FILL
.NO JUSTIFY
^*--------------------------------------------------------------------------------\*
^*MODULE####IRENUMBER\*
.INDEX IRENUMBER
.BLANK
^*--------------------------------------------------------------------------------\*
^*REPLACES##DAMP module IFSN\*
.INDEX DAMP
.INDEX DAMP> IFSN
.BLANK
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^*FUNCTION\*
.INDEX IRENUMBER> FUNCTION
.INDEX IMP> module functions> feature renumbering
.LEFT MARGIN +10

.P 0;IRENUMBER reallocates Feature Serial Numbers (FSNs) in monotonically
increasing order. IRENUMBER does ^*not\* reallocate Internal Sequence Numbers
(ISNs). By default IRENUMBER creates a new output file but the /IN__SITU
qualifier is available to modify an IFF file in-situ. IRENUMBER is intended
mainly for recovery from error situations which have resulted in multiply
allocated FSNs within an IFF file. 

.BLANK
.LEFT MARGIN -10
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^*FORMAT\*
.INDEX IRENUMBER> FORMAT
.NO FILL
.LEFT MARGIN +10
.P 0;$ IRENUMBER  input-file-spec [output-file-spec]

^*Command qualifiers                Defaults\*
.INDEX IRENUMBER> command qualifiers

/BASE=integer                     /BASE=1
.INDEX IRENUMBER> command qualifiers> /BASE
/INCREMENT=integer                /INCREMENT=1
.INDEX IRENUMBER> command qualifiers> /INCREMENT
/IN__SITU                          Create a new output file.
.INDEX IRENUMBER> command qualifiers> /IN__SITU
/[NO]LOG                          /NOLOG
.INDEX IRENUMBER> command qualifiers> /LOG
/LOWER__LIMIT=integer              /LOWER__LIMIT=1
.INDEX IRENUMBER> command qualifiers> /LOWER__LIMIT
/UPPER__LIMIT=integer              /UPPER__LIMIT=65535
.INDEX IRENUMBER> command qualifiers> /UPPER__LIMIT

.BLANK
.TEST PAGE 9
.LEFT MARGIN 0
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^*PROMPTS\*
.INDEX IRENUMBER> PROMPTS
.LEFT MARGIN +10
.NO FILL
.NO JUSTIFY
__Input-File:      input-file-spec

.P 4;If /IN__SITU is not specified, then

__Output-File:     output-file-spec

.BLANK
.TP 13
.LM -10
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^*PARAMETERS\*
.LM +10
.INDEX IRENUMBER> PARAMETERS

.P -10;input-file-spec
.JUSTIFY
.P -2;-#specifies the IFF file which is to be recoded. Any part of the file
specification which is not supplied will be taken from the default specification
'LSL$IF:IFF.IFF'. 
.NO JUSTIFY

.TEST PAGE 10
.P -10;[output-file-spec]
.JUSTIFY	      
.P -2;-#specifies the IFF file which is to be created. By default, IRENUMBER
creates an output IFF file to contain the altered data. Alternatively, changes
to the input file may be made in-situ by specifying the /IN__SITU qualifier. No
output file specification should be supplied on an IRENUMBER command line
containing the /IN__SITU qualifier. 

.P 0;Any part of the output file specification which is not explicitly given
will be taken from the parsed input specification. Note that a version number
must  ^*not\* be specified for the output file. If a file with the specified
name already exists, a new file will be created with the version number
incremented by one. 
.NO JUSTIFY
.LM -10
.BLANK
.TP 10
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^*COMMAND QUALIFIERS\*
.INDEX IRENUMBER> COMMAND QUALIFIERS
.LEFT MARGIN +10
.TEST PAGE 8

.P -10;/BASE=integer
.INDEX IRENUMBER> command qualifiers> /BASE
.P -2;- sets the base for the new number allocation. The integer argument to
/BASE must lie in the range 1 to 65535. The default base is 1. 


.TEST PAGE 8
.P -10;/INCREMENT=integer
.INDEX IRENUMBER> command qualifiers> /INCREMENT
.P -2;- sets the increment for the new number allocation. The increment
must be a positive, non-zero integer. The default increment is 1.


.TEST PAGE 8
.P -10;/IN__SITU           
.INDEX IRENUMBER> command qualifiers> /IN__SITU
.P -2;- the default mode of IRENUMBER operation is to create a new IFF file to
receive the modified data. The /IN__SITU qualifier forces modification to occur
in-situ, thus destroying the original FSNs. Qualifiers on the command line
preceding /IN__SITU are ignored by the command line interpreter (CLI) and a
warning message given. 

.TEST PAGE 8
.P -10;/LOG               
.INDEX IRENUMBER> command qualifiers> /LOG
.P -2;- this will result in supplementary messages being sent to SYS$OUTPUT.
Supplementary messages are generated when a file is successfully opened, and a
reassuring message output each time a new IFF layer is encountered in the IFF
file. The new and old FSNs are listed as they are changed. On large files the
output produced can be voluminous. 


.TEST PAGE 8
.P -10;/LOWER__LIMIT=integer
.INDEX IRENUMBER> command qualifiers> /LOWER__LIMIT
.P -2;- sets the lower limit below which feature numbers in the input file will 
not be modified. The integer argument to /LOWER__LIMIT must be in the range
1 to 65535. The default lower limit is 1.


.TEST PAGE 8
.P -10;/UPPER__LIMIT=integer   
.INDEX IRENUMBER> command qualifiers> /UPPER__LIMIT
.P -2;- sets the upper limit above which feature numbers in the output file will
not be modified. The integer argument to /UPPER__LIMIT must be in the range
1 to 65535. The default upper limit is 65535.

.BLANK 2
.NO FILL
.LEFT MARGIN 0
.TEST PAGE 15
.NO JUSTIFY
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^*DESCRIPTION\*
.INDEX IRENUMBER> DESCRIPTION

.LEFT MARGIN +10
.P 0;IRENUMBER reallocates IFF Feature Serial Numbers (FSNs) in monotonically
increasing order. IRENUMBER is intended mainly for recovery from error
situations which have resulted in multiply allocated FSNs within an IFF file. 
IRENUMBER does not change the Internal Sequence Number (ISN) of the feature.

.INDEX IRENUMBER> default action 
.P 0;By default IRENUMBER will produce a new IFF file as output. An option
to work on the input file in-situ is provided with the /IN__SITU qualifier.
If /IN__SITU is specified and IRENUMBER is used incorrectly there is no
route for the recovery of the original form of the data. Use /IN__SITU with
great care.

.INDEX IRENUMBER> default action> if no command qualifiers
.P 0;In the absence of any command qualifiers IRENUMBER will reallocate all
FSNs found in the IFF file using a replacement base value of 1. The default
increment is 1.

.INDEX IRENUMBER> and FSN 0
.P 0;Features having an FSN of 0 will not be renumbered. Such features
historically have a special context in IFF files which have TC (Transmitted
Comment) entries which lie ^*outside\* of IFF features.

.P 0;IRENUMBER may be used to reallocate a subset of the FSNs within the IFF
file. Lower and upper FSN values may be specified with the /LOWER__LIMIT and
/UPPER__LIMIT qualifiers respectively. If these qualifiers are specified
IRENUMBER takes the following action: 
.BLANK
.LIST "o" 

.LE ;/LOWER__LIMIT only#- IRENUMBER renumbers all FSNs whose current values lie
between the specified lower limit and 65535, (inclusive).

.LE ;/UPPER__LIMIT only#- IRENUMBER renumbers all FSNs whose current values lie
between 1 and the specified upper limit, (inclusive).

.LE ;/LOWER__LIMIT and /UPPER__LIMIT - IRENUMBER renumbers all FSNs whose
current values lie between the specified lower limit and the specified upper
limit, (inclusive).


.END LIST

.INDEX IRENUMBER> /BASE> a warning
.P 0;The value for /BASE should be chosen with care.  If the result of the
formula:
.P 10;BASE#+#('number of features'#_*#INCREMENT)
.P 0;is greater than 65536 IRENUMBER issues a warning message and ignores
subsequent features. The output IFF file will be only partly renumbered.
.BLANK 2
.NO FILL
.LEFT MARGIN 0
.TEST PAGE 15
.NO JUSTIFY
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^*EXAMPLES\*
.NO FILL
.INDEX IRENUMBER> EXAMPLES
.NO JUSTIFY
.BLANK
$ ^*IRENUMBER/IN__SITU/LOG/BASE=10 W153.IFF<CR>\*
%LSLLIB-I-IFFOPENED, DUA0:[IFF.IMP.TEST]W153.IFF;4 opened for update
%IREN-I-FSNINCBAS, renumbering FSNs in increments of 1 from base 10
between LOWER__LIMIT 1 and UPPER__LIMIT 65535
%IREN-I-LAYER, layer 0 found
%IREN-I-LAYER, layer 10 found
%IREN-I-LAYER, layer 12 found
%IREN-I-RENFSN, renumbered FSN 1 to 10
%IREN-I-RENFSN, renumbered FSN 1 to 11
%IREN-I-RENFSN, renumbered FSN 1 to 12
%IREN-I-RENFSN, renumbered FSN 1 to 13
%IREN-I-LAYER, layer 101 found
%IREN-I-RENFSN, renumbered FSN 1 to 14
%IREN-I-RENFSN, renumbered FSN 2 to 15
%IREN-I-RENFSN, renumbered FSN 3 to 16
%IREN-I-RENFSN, renumbered FSN 4 to 17
%IREN-I-RENFSN, renumbered FSN 5 to 18
%IREN-I-RENFSN, renumbered FSN 6 to 19
%IREN-I-RENFSN, renumbered FSN 7 to 20
%IREN-I-RENFSN, renumbered FSN 8 to 21
%IREN-I-RENFSN, renumbered FSN 9 to 22
%IREN-I-RENFSN, renumbered FSN 10 to 23
%IREN-I-RENFSN, renumbered FSN 11 to 24
%IREN-I-RENFSN, renumbered FSN 12 to 25
%IREN-I-RENFSN, renumbered FSN 13 to 26
%IREN-I-RENFSN, renumbered FSN 14 to 27
%IREN-I-RENFSN, renumbered FSN 15 to 28
%IREN-I-RENFSN, renumbered FSN 16 to 29
%IREN-I-RENFSN, renumbered FSN 17 to 30
%IREN-I-RENFSN, renumbered FSN 18 to 31
%IREN-I-RENFSN, renumbered FSN 19 to 32
%IREN-I-RENFSN, renumbered FSN 20 to 33
%IREN-I-RENFSN, renumbered FSN 21 to 34
%IREN-I-RENFSN, renumbered FSN 22 to 35
%IREN-I-RENFSN, renumbered FSN 23 to 36
%IREN-I-RENFSN, renumbered FSN 24 to 37
%IREN-I-RENFSN, renumbered FSN 25 to 38
%IREN-I-RENFSN, renumbered FSN 26 to 39
%IREN-I-RENFSN, renumbered FSN 27 to 40
%IREN-I-RENFSN, renumbered FSN 28 to 41
%IREN-I-RENFSN, renumbered FSN 29 to 42
%IREN-I-RENFSN, renumbered FSN 30 to 43
%IREN-I-RENFSN, renumbered FSN 31 to 44
%IREN-I-RENFSN, renumbered FSN 32 to 45
%IREN-I-RENFSN, renumbered FSN 33 to 46
%IREN-I-RENFSN, renumbered FSN 34 to 47
%IREN-I-RENFSN, renumbered FSN 35 to 48
%IREN-I-LAYER, layer 111 found
%IREN-I-RENFSN, renumbered FSN 36 to 49
%IREN-I-RENFSN, renumbered FSN 37 to 50
%IREN-I-NUMFTREN, 41 features renumbered
%IREN-I-NUMFTIGN, 0 features ignored
 ELAPSED: 00:00:06.26  CPU: 0:00:02.67  BUFIO: 2  DIRIO: 57  FAULTS: 79 
$
.LEFT MARGIN +10
.FILL
.P 0;This example demonstrates the /LOG, /IN__SITU, and /BASE qualifiers. The
/IN__SITU qualifier means that the file W153.IFF is modified in-situ rather
than a new IFF file being created. As /LOG has been specified after /IN__SITU,
information is output about the input file being opened, the parameters that
the program is using, each layer as it is encountered, and each FSN as it is
renumbered. Finally the total number of features renumbered and the total
number ignored are output. The /BASE qualifier has the effect of renumbering
the FSN's from 10. As no other qualifiers were given the default INCREMENT,
LOWER__LIMIT and UPPER__LIMIT were used by the program. 

.TEST PAGE 10
.NO FILL
.LEFT MARGIN -10
.BLANK
$ ^*IRENUMBER/LOG NEBRASKA<CR>\*
_Output file: ^*TEST.IFF<CR>\*
%LSLLIB-E-IFFOPEN, IFF error opening file "LSL$IF:NEBRASKA.IFF;" for read
%IFF-E-OPEN, error opening IFF file
-RMS-E-FNF, file not found
 ELAPSED: 00:00:03.52  CPU: 0:00:00.15  BUFIO: 1  DIRIO: 0  FAULTS: 63 
$
.LEFT MARGIN +10
.FILL
.P 0;In this example the user specified LSL$IF:NEBRASKA.IFF as the input
file-spec and the /LOG qualifier. As no output file was given on the command
line, and the /IN__SITU qualifier was not given IRENUMBER prompts for an output
filename. The user then specified LSL$IF:TEST.IFF. However, the input file
NEBRASKA.IFF could not be found in LSL$IF: so program execution ends with
suitable error messages. Either the filename has been mis-typed or the logical
name LSL$IF set to an inappropriate device and directory. 

.P 0;Had the input file been found the program would have created
LSL$IF:TEST.IFF as ouput. 

.NO FILL
.LEFT MARGIN -10
.BLANK
.TEST PAGE 10
$ ^*IRENUMBER TEST1/LOWER__LIMIT=10/INCREMENT=2<CR>\*
_Output file: ^*TEST1.REN<CR>\*
 ELAPSED: 00:01:56.05  CPU: 0:00:50.85  BUFIO: 8  DIRIO: 436  FAULTS: 141 
$
.FILL
.LEFT MARGIN +10
.P 0;In this example the user specified LSL$IF:TEST1.IFF as input with a
LOWER__LIMIT of 10 and INCREMENT of 2. As no output file was given on the
command line, and the /IN__SITU qualifier was not given the program prompts for
an ouput filename. The user typed TEST1.REN to specify the output file In the
output file features with feature numbers less than 10 would not be modified.
Features with feature numbers greater than 10 would have been renumbered in
increments of 2 from the default BASE of 1 to an UPPER__LIMIT of 65535. 

.NO FILL
.LEFT MARGIN 0
.PAGE
^*--------------------------------------------------------------------------------\*
.NOFILL
.KEEP
.HEADER LEVEL 2 ^*MESSAGES (informational)\*

.J
.BLANK
These messages give information only, and require no immediate action by the
user. They are often used to supply explanatory information in support of a
warning or error message. 
.BLANK
.LEFT MARGIN 4

.BLANK
.TEST PAGE 7
.INDENT -4;FSNINCBAS, renumbering FSNs in increments of 'integer' from base 
'integer' between LOWER__LIMIT 'integer' and UPPER__LIMIT 'integer'
.P 0;^*Explanation:\* The specified increment, base and upper and lower limits
are being used.
.P 0;^*User action:\* None.

.BLANK
.TEST PAGE 7
.INDENT -4;RENFSN, renumbered FSN 'integer' to 'integer'.
.P 0;^*Explanation:\* The specified FSN 'integer' has been renumbered to 
the indicated value.
.P 0;^*User action:\* None.

.BLANK
.TEST PAGE 7
.INDENT -4;IGNFSN, ignoring FSN 'integer'.
.P 0;^*Explanation:\* FSN 'integer' has been ignored.
.P 0;^*User action:\* None.

.BLANK
.TEST PAGE 7
.INDENT -4;LAYER, layer 'integer' found
.P 0;^*Explanation:\* Layer 'integer' has been found in the input file.
.P 0;^*User action:\* None.


.NO JUSTIFY
.PAGE
.LEFT MARGIN 0
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^*MESSAGES (warning)\*
.LEFT MARGIN +4
.BLANK
These messages are output when an error has occurred that can be corrected 
immediately by the user or that continued processing will result in a valid IFF
output file. 

.BLANK
.TEST PAGE 7
.INDENT -4;RCHMAXFSN, reached maximum valid FSN number 'integer'
.P 0;^*Explanation:\* The renumbering of features has reached the maximum 
valid FSN number 65535. No further renumbering will take place.
.P 0;^*User action:\* If a large increment is the cause of this message and
unique FSN numbers are required then a smaller increment should be specified.
If the default increment has been used then the file is likely to be too
large for most IMP utilites and other LSL software.

.BLANK
.LEFT MARGIN 0
.PAGE
.BLANK
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^*MESSAGES (error)\*
.BLANK
These messages indicate an error in processing which has caused the program to
terminate. The most likely causes are a corrupt or otherwise invalid input IFF
file, or an error related to command line processing and file manipulation.
It is most unlikely that any output file produced will be correctly processed.
.LEFT MARGIN +4
.BLANK
.NO JUSTIFY
.TEST PAGE 12
.INDENT -4;ERRCLOINP, error closing input file 'file-spec'.
.INDENT -4;ERRCLOUT, error closing output file 'file-spec'.

.P 0;^*Explanation:\* An error has occured in closing the specified IFF file.
.P 0;^*User action:\* The accompanying messages should help you to interpret the
cause of this error. Check that there is sufficient disk space for the file and
that the disk is functioning properly. If the problem continues, notify the 
system manager. 

.BLANK
.INDENT -4;INVBASE, invalid BASE 'integer' specified.
.P 0;^*Explanation:\* An invalid base has been specified either less than 1
or greater than 65535. 
.P 0;^*User action:\* Re-run the program with a valid base specified.


.BLANK
.INDENT -4;INVINCRMT, invalid increment 'integer' specified.
.P 0;^*Explanation:\* An invalid increment has been specified either less than 1
or greater than 65535. 
.P 0;^*User action:\* Re-run the program with a valid increment specified.

.BLANK
.INDENT -4;INVLOWLMT, invalid LOWER__LIMIT 'integer' specified.
.P 0;^*Explanation:\* An invalid lower limit has been specified either less 
than 1 or greater than 65535. 
.P 0;^*User action:\* Re-run the program with a valid lower limit specified.

.BLANK
.INDENT -4;INVUPLMT, invalid UPPER__LIMIT 'integer' specified.
.P 0;^*Explanation:\* An invalid upper limit has been specified either less 
than 1 or greater than 65535. 
.P 0;^*User action:\* Re-run the program with a valid upper limit specified.

.BLANK
.INDENT -4;LOWGTRUP, LOWER__LIMIT 'integer' greater than UPPER__LIMIT 'integer'.
.P 0;^*Explanation:\* The specified lower limit is greater than the specified 
upper limit.
.P 0;^*User action:\* Re-run the program with a lower limit less than the 
upper limit.

.BLANK
.INDENT -4;LOWEQUP, LOWER__LIMIT 'integer' equal to UPPER__LIMIT 'integer'.
.P 0;^*Explanation:\* The specified lower limit is equal to the specified 
upper limit.
.P 0;^*User action:\* Re-run the program with a lower limit less than the 
upper limit.

.BLANK
.INDENT -4;UNEXPEOF, Unexpected end of IFF file
.P 0;^*Explanation:\* This message indicates there is something seriously wrong 
with the IFF file which has caused immediate termination of the program. IRENUMBER 
has detected the end of the IFF file, but has not detected an IFF 'integer' entry.

.P 0;^*User action:\* Use IMEND on the file, which will correctly position the
EOF marker and insert an EJ entry at the end of the file.  Re-run  IRENUMBER on 
the corrected file.


.NO JUSTIFY 
.BLANK 2
.TEST PAGE 17
.LEFT MARGIN 0
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^*MESSAGES (other)\*
.J
.BLANK
.P 0;In addition to the above messages which are generated by IRENUMBER 
itself, other messages may be produced by the command line interpreter (CLI)
and by Laser-Scan libraries. In particular, messages may be generated by the
IFF library. These are introduced by '%IFF' and are documented in the IFF
library users' guide. In most cases IFF errors will be due to a corrupt input
file, and this should be the first area of investigation. If the cause of the
error cannot be traced by the user and Laser-Scan are consulted, then the input
file should be preserved to facilitate diagnosis. 
.NO JUSTIFY
