.LM0
.RM80
.FLAGS BOLD
.NO FILL
^*--------------------------------------------------------------------------------\*
^*MODULE####IRECODE\*
.INDEX IRECODE
.BLANK
^*--------------------------------------------------------------------------------\*
^*REPLACES\*##Nothing, IRECODE is a new IMP utility.
.BLANK
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^*FUNCTION\*   
.LM +10
.INDEX IMP>module functions> IFF entry recoding
.FILL
.P 0;IRECODE enables change of selected layer, feature code, text component
code or AC numbers in an existing IFF file to specified new values. By
default, IRECODE creates an output IFF file to contain the altered data.
Alternatively, changes to the input file may be made in-situ. 
.LM 0
.BLANK
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^*FORMAT\*
.INDEX IRECODE> Command format
.NO FILL
.NO JUSTIFY
.LM +10
.P 0;$ IRECODE input-file-spec [output-file-spec]


^*Command qualifiers                  Defaults\*
.INDEX IRECODE>command qualifiers
.BLANK 2
/[NO]ALPHABETIC=filename              /NOALPHABETIC
.INDEX IRECODE>command qualifiers>/ALPHABETIC
/AC[=(integer>integer,...)]           None.
.INDEX IRECODE>command qualifiers>/AC
/FC[=(integer>integer,...)]           IRECODE prompts for feature 
                                      codes.
.INDEX IRECODE>command qualifiers>/FC
/TCC[=(integer>integer,...)]          None.
.INDEX IRECODE>command qualifiers>/TCC
/IN__SITU                              Create a new file.
.INDEX IRECODE>command qualifiers>/IN__SITU
/LAYER[=(integer>integer,...)]        None.
.INDEX IRECODE>command qualifiers>/LAYER
/[NO]LOG                              /NOLOG
.INDEX IRECODE>command qualifiers>/LOG

.BLANK
.NOTE
IRECODE (like ILAYFC) is primarily intended as an interactive
program. By necessity its command line syntax is complex. Great care should be
taken if using it non-interactively as it will ^*prompt\* for input if the
command line contains errors.

.P 0;If, for example, the user issues this IRECODE command line within a command
file and supplies the arguments for /LAYER as if they were to be prompted for:

.P 8;$ ^*IRECODE/AC=(1>g)/LAYER<CR>\*
.LM +8
.NO FILL
^*2>3<CR>\*
^*4>6<CR>\*
^*5>8<CR>\*
^*<CR>\*
$ 
.FILL
.LM -8

.P 0;IRECODE will detect the erroneous "g" in the argument list for /AC
and enter prompt mode. What had been intended as arguments for the /LAYER
qualifier will now be read as arguments for /AC. Fortunately, in this example,
IRECODE will detect end-of-input-file (the dollar of the next DCL command line)
when trying to get arguments for /LAYER. IRECODE will then abort execution.
If, however, the user had mistakenly specified 2 blank lines in the input file
before the dollar, /LAYER argument input would be considered complete and
entirely erroneous recoding would have occurred. $STATUS would be set to
SS$__NORMAL and the errors would continue through the command file.
.END NOTE 
.TEST PAGE 10
.LM 0
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^*PROMPTS\*
.INDEX IRECODE>Prompts
.LM +10
.NO FILL
.NO JUSTIFY
__Input-File:      input-file-spec

.P 0;If /IN__SITU is not specified, then:

__Output-File:     output-file-spec

.BLANK
.TP 13
.LM -10
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^*PARAMETERS\*
.LM +10
.INDEX IRECODE> Parameters

.P -10;input-file-spec
.JUSTIFY	      
.P -2;-#specifies the IFF file which is to be recoded. Any part of the file
specification which is not supplied will be taken from the default specification
'LSL$IF:IFF.IFF;0'. 
.NO JUSTIFY

.TEST PAGE 10
.P -10;output-file-spec
.JUSTIFY	      
.P -2;-#specifies the IFF file which is to be created. By default, IRECODE
creates an output IFF file to contain the altered data. Alternatively, changes
to the input file may be made in-situ by specifying the /IN__SITU qualifier. No
output file specification should be supplied on an IRECODE command line
containing the /IN__SITU qualifier. 

.P 0;Any part of the output file specification which is not explicitly given
will be taken from the parsed input specification. Note that a version number
must  ^*not\* be specified for the output file. If a file with the specified
name already exists, a new file will be created with the version number
incremented by one. 
.NO JUSTIFY
.LM -10
.BLANK
.TP 10
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^*COMMAND QUALIFIERS\*
.INDEX IRECODE>command qualifiers
.!
.!............................................................................
.!
.JUSTIFY
.LM +10
.P -10;/ALPHABETIC=filename
.INDEX IRECODE>command qualifiers>/ALPHABETIC
.p 0;This qualifier allows the optional text field contained in the Laser Scan
default AC entry of type 1 (Secondary__FC), to be used to change the feature
codes of features taken from the input IFF file. 
.p 0;The file which /ALPHABETIC takes as its argument contains a list of 
entries which specify the text (to be compared with that from the AC entry) and 
their corresponding feature codes. These entries must be of the form:
.Centre;Definition__string Output__feature__code.
.Note
.p 0;Entries which have an exclamation mark '!' as their first non-space
character will be assumed to be comments and will be ignored.
.p 0;A Definition__string which consists of more than one word must be enclosed 
in quotes.
.p 0;The Definition__string and Output__feature__code may be separated by an 
optional comma (',') or a greater-than sign ('>').
.end note
.p 0; IRECODE will read the entries from the file and compare the 
Definition__strings with the optional text contained in the AC type 1 entries.
If the strings match, the current feature code in the output file will be
modified using the Output__feature__code associated with the string. 
.LM-10
.!
.!............................................................................
.!
.JUSTIFY
.LM +10
.P -10;/AC[=(integer>integer[,...])]
.INDEX IRECODE>command qualifiers>/AC
.JUSTIFY
.P -2;-#where the first integer of each pair of integers is the old AC type
number, the second the new AC type number which is to replace the old one.
.TEST PAGE 10
.P 0;If a syntax error is made in the command string, or /AC is specified with
no arguments then IRECODE will prompt for input: 
.LIT

		Old AC type number, New AC type number ?
                                  .
                                  .
                                  .
.END LIT
.P 0;This prompt will be repeated for additional arguments until IRECODE detects
a blank line.
.TP 8
.BLANK
.INDEX IRECODE>command qualifiers>/AC>WARNING
.CENTRE;^*W#A#R#N#I#N#G\*
.LITERAL
+--------------------------------------------------------------------+
|  Beware that if the /AC qualifier is used on an AC type having     |
|  a floating point value in the AC longword field then the longword |
|  will be rounded to the nearest integer (via FORTRAN NINT). If     |
|  used to change an integer longword AC to an AC type having a      |
|  floating point longword field the integer will be floated.        |
|                                                                    |
|  All AC types have an integer value stored in their longword field |
|  except type 3 and type 80 through 99 ACs) which have a floating   |
|  point number.                                                     |
+--------------------------------------------------------------------+
.END LITERAL
.TEST PAGE 10
.!
.!............................................................................
.!
.NOJUSTIFY
.P -10;/FC[=(integer>integer[,...])]
.INDEX IRECODE>command qualifiers>/FC
.JUSTIFY
.P -2;-#where the first integer of each pair of integers is the old feature
code, the second the new feature code which is to replace the old code. This is
the default mode of IRECODE. Failure to specify any qualifiers will result in
IRECODE prompting for input. Similarly, if a syntax error is made in the 
/FC argument list, or /FC is specified with no arguments, then IRECODE will 
enter prompt mode:
.LIT

		Old Feature Code, New Feature Code ?  
                                 .
                                 .
                                 .

.END LIT
.P 0;This prompt will be repeated for additional arguments until IRECODE detects
a blank line.



.TEST PAGE 10
.NOJUSTIFY
.!
.!............................................................................
.!
.P -10;/TCC[=(integer>integer[,...])]
.INDEX IRECODE>command qualifiers>/TCC
.JUSTIFY
.P -2;- where the first integer of each pair of integers is the old TCC (Text
Component Code), the second the new TCC which is to replace it. If a syntax
error is made in the /TCC argument list, or /TCC is specified with no arguments,
then IRECODE will enter prompt mode: 
.LIT

		Old Text Component Code, New Text Component Code ?  
                                       .
                                       .
                                       .

.END LIT
.P 0;This prompt will be repeated for additional arguments until IRECODE detects
a blank line.

.!
.!............................................................................
.!
.NOJUSTIFY
.TEST PAGE 10
.P -10;/IN__SITU
.I -10;/NOIN__SITU
.INDEX IRECODE>command qualifiers>/IN__SITU
.JUSTIFY
.P -2;-#the default mode of IRECODE operation is to create a new IFF file to
receive the modified data. The /IN__SITU qualifier forces modification to occur
in-situ, thus destroying the original data. /IN__SITU is not available if an
output file is specified. Qualifiers on the command line preceding the
/IN__SITU qualifier are ignored by the Command Line Interpreter (CLI) and a
warning message is given. 
.!
.!............................................................................
.!
.TEST PAGE 10
.NOJUSTIFY
.P -10;/LAYER[=(integer>integer[,...])]
.INDEX IRECODE>command qualifiers>/LAYER
.JUSTIFY
.P -2;-#where the first integer of each pair of integers is the old layer
number, the second the new layer number which is to replace the old one. If a
syntax error is made in the /LAYER argument string, or /LAYER is specified with
no arguments, then IRECODE will prompt for input: 
.LIT

		Old Layer Number, New Layer Number ?
                                .
                                .
                                .
.END LIT
.P 0;This prompt will be repeated for additional arguments until IRECODE detects
a blank line.

.!
.!............................................................................
.!
.NOJUSTIFY
.TEST PAGE 10
.P -10;/LOG               
.I -10;/NOLOG               
.INDEX IRECODE>command qualifiers>/LOG
.JUSTIFY
.P -2;-#this will result in supplementary messages being sent to SYS$OUTPUT.
Supplementary messages are generated when a file is successfully opened,
and a reassuring message output each time a new IFF layer is encountered in the
IFF file. 
.NOJUSTIFY

.LM -10
.BLANK
.TP 10
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^*DESCRIPTION\*
.LM +10
.JUSTIFY
.FILL
.INDEX IRECODE>description

.P 0;Used on an existing IFF file, IRECODE enables the global change of
the following IFF entry values within the file:
.LIST "o"
.INDEX IRECODE> and feature codes
.LE ;feature codes, (the first word of an FS (Feature Status) entry), and/or,
.INDEX IRECODE> and text component codes
.LE ;text component codes, (the first word of a TS (Text Status) entry), and/or,
.INDEX IRECODE> and layers
.LE ;layer numbers, and/or,
.INDEX IRECODE> and ancillary codes
.LE ;AC type numbers.
.END LIST
.P 0;The IFF entry type which is to be changed is specified with the qualifier
of the corresponding name. The 'old' and 'replacement' values for the specified
IFF entry may be specified as arguments to the IFF entry qualifier. An
argument pair, 'old' and 'replacement', is separated by a closing angle
bracket. Multiple argument pairs are separated by
commas and the whole list of argument pairs is enclosed in parentheses. In the
event of a command decoding error or in the event of no arguments being
supplied to an IFF entry qualifier IRECODE will enter prompt mode and
explicitly request argument pairs from the user. Exit from prompt mode is
achieved by specifying a blank line. 

.P 0;An option to change the input file in-situ is provided with the /IN__SITU
qualifier. Only one file-spec parameter should be specified on the command line
if the in-situ mode of operation is selected. It is very dangerous to work on an
IFF file in situ as some changes are irrevocable. Such changes fall into two
classes: 
.LIST
.LE ;changes of AC types involving ACs with floating point numbers in the
longword field. If truncated to an integer during an AC type number change
there is no mechanism for the restoration of the floating point precision. 

.LE ;Changes which result in the concatenation of diverse feature types.
Features may be differentiated by being assigned different feature
codes or IFF layer numbers. Thus if multiple layers are assigned the same layer
number, or diverse feature codes are made the same, feature segregation is lost.
There is no mechanism available for re-segregating the combined data other than
manually reassigning values with reference to the digitising source using
LITES2. 
.END LIST
.HEADER LEVEL 2 ^^^*Implications of changing IFF entry values\*
.INDEX IRECODE> implications of use

.P 0;Changing the value of IFF entries with IRECODE can have implications
beyond the immediate value change. These implications are outlined below
for each of the IRECODE IFF entry code qualifiers.

.BLANK
.P 0;^*/AC\*
.INDEX IRECODE> implications of use> on ACs
.P 0;A number of AC types are reserved by Laser-Scan for special applications.
IFF applications programs (such as those of IMP!) are written with awareness of
the specialist nature of some of these AC types. AC entries are used to hold
miscellaneous information. They are composed of a word (integer_*2) type, a
longword (integer_*4 or real) code and an optional text. 

.P 0; The type of information held in an AC is determined by the AC type.
Current type values are defined in the IFF User Guide.

.P 0; AC types may take values in the range 0-32767. Negative types are
not allowed.

.P 0; The range of the AC code is implicitly specified by the use of the AC.
Note that AC type 3 and types 80 to 99 (inclusive) are currently the only ACs
to have a real value in the AC longword field.

.P 0;If an AC type number is changed from one associated with a real (floating
point number) longword field to an AC type number associated with an integer
value in the longword field the floating point number will rounded.

.P 0;The length of the text field is limited to 255 characters.

.BLANK
.P 0;^*/FC\*
.INDEX IRECODE> implications of use> on FCs
.P 0;The Feature Code of a feature is carried in the first word of the FS
entry of each feature. IRECODE only changes the first (feature code) word of the
FS entry. As the feature code is stored as a word (16 bit integer) its
value must lie in the range -32768 to 32767. In practice negative feature codes
are not allowed. The other 3 words of the IFF FS entry remain unaltered. Be
very careful to ensure that by changing the feature code, conflicts with
Words 2 to 4 of an IFF FS entry are defined in the IFF User Guide.

.BLANK
.P 0;^*/LAYER\*
.INDEX IRECODE> implications of use> on layers

.JUSTIFY
.P 0; IFF files are generally divided up into multiple layers, where data
of a common sort or source is grouped in the same layer. Note that 
a layer may be split into several parts, identified by all having the same
layer number.

.P 0; Layer 0 is conventionally reserved for 'non-essential' data - for
instance a grid, symbols at control points, or MCE DFAD accuracy polygons. The
assumption is that the IFF file would not be significantly degraded in terms of
information content by throwing layer 0 away. If layer 0 is present, some
programs expect it to be the first layer in the file. 

.P 0; Historically, layers 11 and 32 were also used for the same sort of
purpose as layer 0. If working with an IFF file belonging to an historical
database this should be taken into consideration.

.BLANK
.P 0;^*/TCC\*
.INDEX IRECODE> implications of use> on TCCs

.P 0; Text features may contain one text string, with associated location
and descriptive data, or they may be ^*composite\* - that is composed of
several sub-texts or text components, which may be manipulated independently
or as a single entity.

.P 0; Each text component starts with a TS entry, and ends with the next TS
entry, or the final EF of the feature. The first TS entry occurs immediately
after the FS entry and any AC entries. Text components may not include FS
or AC entries, but may contain any other entries that are legal within a
normal text feature.

.P 0; Word 1 of the TS entry is the text component code (TCC), which is
the primary descriptive code for a text component - it is effectively the
feature code for this component of the composite text, and is used in the
same manner. IRECODE enables the user to alter only the first word of a TS
entry, i.e_._the TCC. Alteration of the TCC should, however, take account of
the third word of the TS entry. 

.P 0; Word 3 of the TS entry is the text word, and is identical in form to
word#3 of a text's FS entry - it holds a description of the type of text
component.

.P 0; The second and fourth words are reserved for later definition.
For a detailed description of the IFF TS entry see the IFF User Guide.
.NOJUSTIFY

.LM 0
.PAGE
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^*EXAMPLES\*
.INDEX IRECODE> examples
.BL 2
.TP 14
.NOFILL
$ ^*IRECODE<CR>\*
Input-file: ^*S320480SW.IFF/LOG<CR>\*
Output-File: ^*TEST.IFF<CR>\*
Old Feature Code, New Feature Code ? ^*123,4<CR>\*
Old Feature Code, New Feature Code ? ^*<CR>\*
%LSLLIB-I-IFFOPENED, DUA0:[LSL.ACCEPTANCE]S320480SW.IFF;4 opened for read
%LSLLIB-I-IFFOPENED, DUA0:[LSL.ACCEPTANCE]TEST.IFF;1 opened for write
%IRECODE-I-LAYER, layer 1 found
%IRECODE-I-LAYER, layer 80 found
 ELAPSED: 00:00:27.67  CPU: 0:00:05.50  BUFIO: 9  DIRIO: 155  FAULTS: 247 
$
.BL
.FILL
.LM +10
This example shows the default mode of IRECODE operation. No parameters are 
specified and so IRECODE prompts for input and output files. None of the
/FC, /AC, /TCC or /LAYER qualifiers are specified so IRECODE prompts for feature
codes. In this example all input file features with a feature code of 123 will
be given a feature code of 4 in the output file LSL$IF:TEST.IFF;1.
The /LOG qualifier provides messages indicating the full file
specifications of the files opened and each layer found in the input IFF file.
.BL 2 
.TP 14
.NOFILL
.LM -10
$ ^*IRECODE S320480SW.IFF/AC=(3>J8)/LOG<CR>\*
Output File: ^*TEST.IFF<CR>\*
%IRECODE-W-BADARGFMT, bad format for arguments
Old AC type number, New AC type number ? ^*5, D<CR>\*
%IRECODE-W-BADARGFMT, bad format for arguments
Old AC type number, New AC type number ? ^*3<CR>\*
%IRECODE-W-TWOARGS, two arguments required
Old AC type number, New AC type number ? ^*3,5<CR>\*
Old AC type number, New AC type number ? ^*<CR>\*
%LSLLIB-I-IFFOPENED, DUA0:[LSL.ACCEPTANCE]S320480SW.IFF;4 opened for read
%LSLLIB-I-IFFOPENED, DUA0:[LSL.ACCEPTANCE]TEST.IFF;2 opened for write
%IRECODE-I-LAYER, layer 0 found
%IRECODE-I-LAYER, layer 1 found
%IRECODE-I-LAYER, layer 4 found
%IRECODE-I-LAYER, layer 5 found
%IRECODE-I-LAYER, layer 6 found
 ELAPSED: 00:00:53.51  CPU: 0:00:03.68  BUFIO: 9  DIRIO: 112  FAULTS: 250 
$
.FILL
.LM +10
.P 0;This example illustrates IRECODE behaviour when an error is detected while
decoding qualifier code change pair arguments. A 'J' has been included in the
/AC argument string. IRECODE abandons decoding of the argument list for the /AC
qualifier and prompts for the correct input. The user should enter each code
change pair on a new line. In the example the user make two further errors
while specifying the code change pairs in response to the prompt for input.
In each case IRECODE issues a warning message and re-prompts. When the whole
list of code change pairs for the /AC qualifier is re-entered the user should
enter a blank line. Processing will then begin. In the example IRECODE detects
no processing errors and the run completes normally. $STATUS is set to
SS$__NORMAL. 
.BL 2
.TP 14
.NOFILL
.LM -10
$ ^*IRECODE S320480SWF.IFF/AC=(3>5)/LAYER=(1>77,88>2)/IN__SITU  TEST.IFF<CR>\*
%CLI-I-IGNQUAL, qualifiers appearing before this item were ignored
 _\IN__SITU_\
%CLI-W-MAXPARM, too many parameters - reenter command with fewer parameters
 _\TEST_\
 ELAPSED: 00:00:00.74  CPU: 0:00:00.13  BUFIO: 2  DIRIO: 0  FAULTS: 42 
$
$ ^*IRECODE S320480SWF.IFF/AC=(3>5)/LAYER=(1>77,88>2)/IN__SITU<CR>\*  
%CLI-I-IGNQUAL, qualifiers appearing before this item were ignored
 _\IN__SITU_\
%LSLLIB-I-IFFOPENED, DUA0:[LSL.ACCEPTANCE]S320480SWF.IFF;4 opened for modification
Old Feature Code, New Feature Code ? <CTRL/Z>
 ELAPSED: 00:00:04.86  CPU: 0:00:00.54  BUFIO: 2  DIRIO: 14  FAULTS: 87 
$
.TEST PAGE 14
.FILL
.LM +10
.P 0;The first example here shows an attempt to run IRECODE specifying both the
/IN__SITU qualifier and an output file parameter. The Command Line Interpreter
(CLI) issues error messages and IRECODE aborts execution. The command line is
respecified without the output parameter. Unfortunately the user has specified
qualifiers on the command line which occur ^*before\* the /IN__SITU qualifier.
The CLI ignores these. This results in the CLI interpreting the command line
as if no code change qualifiers were specified. IRECODE therefore prompts for
Feature Code change pairs by default. The user, realising the error, responds
with <CTRL/Z> and IRECODE aborts. 
.TP 14
.NOFILL
.LM -10
.BLANK 2
$ ^*IRECODE S320480SW.IFF/TCC/FC/LAYER<CR>\*
Output File: ^*TEST.IFF<CR>\*
Old Feature Code, New Feature Code ? ^*3,5<CR>\*
Old Feature Code, New Feature Code ? ^*4,6<CR>\*
Old Feature Code, New Feature Code ? ^*3,6<CR>\*
%IRECODE-W-REPCHANGE, repeated change specified - latest will be applied
_\3>5 and 3>6_\
Old Feature Code, New Feature Code ? ^*7,9<CR>\*
Old Feature Code, New Feature Code ? ^*8,10<CR>\*
Old Feature Code, New Feature Code ? ^*12,11<CR>\*
Old Feature Code, New Feature Code ? ^*<CR>\*
Old Text Component Code, New Text Component Code ? ^*2 4<CR>\*
Old Text Component Code, New Text Component Code ? ^*3 4<CR>\*
Old Text Component Code, New Text Component Code ? ^*<CR>\*
Old Layer Number, New Layer Number ? ^*1,8<CR>\*
Old Layer Number, New Layer Number ? ^*<CR>\*
 ELAPSED: 00:00:35.64  CPU: 0:00:04.43  BUFIO: 9  DIRIO: 138  FAULTS: 169 
$
.LM +10
.FILL
.P 0;This example shows IRECODE prompting for code change pairs for the /FC,
/TCC and /LAYER qualifiers. The user specified 2 valid Feature Code change
pairs. A third feature Code change pair was then specified. IRECODE detected
that a change to feature code 3 had already been specified (change feature code
3 to 5 on prompt line 1). A warning message is issued and the most recent
feature code change for feature code 3 is substituted. Feature code 3 will now
be changed to 4 not 5. A further three feature code changes were then specified
followed by a blank line. IRECODE then prompted for TCC (Text Component Code)
change pairs. The user specified  TCC change pairs and then specified a blank
line. Finally, IRECODE prompted for Layer change pairs. The user specified one
Layer change pair and then specified a blank line. IRECODE then successfully
processed the file, writing the modified feature codes and layer numbers to
LSL$IF:TEST.IFF;0. 
.LM -10
.PAGE
^*--------------------------------------------------------------------------------\*
.NOKEEP
.FILL
.JUSTIFY
.HEADER LEVEL 2 ^*MESSAGES (informational)\*
.BLANK
These messages give information only, and require no immediate action by the
user (except perhaps to verify that the correct options have been selected).
Most will only appear if /LOG has been specified on the command line, unless
they are used to provide supplementary information after an error has occurred.
.NO JUSTIFY
.LEFT MARGIN +4
.TEST PAGE 12
.P -4;ARGRANGE, IRECODE qualifier arguments must lie in the range 0 - 32767
.P 0;^*Explanation:\* The specified argument value (or value typed in response
to a prompt) is outside the specified range.
.P 0;^*User action:\*Specify values that lie within the specified range.
.!
.!........................................................................
.!
.P -4;LAYER, Layer 'integer' found
.P 0;^*Explanation:\* The specified layer has been encountered in the IFF file.
.P 0;^*User action:\* None.
.!
.!........................................................................
.!
.P -4;LINESKIP, skipping over line due to warning
.P 0;^*Explanation:\* A warning condition occurred while reading a line from 
the file given with the /ALPHABETIC qualifier
.P 0;^*User action:\*The warning message which preceded this message 
identifies what the problem was. Check the file given as the argument for the 
/ALPHABETIC qualifier.
.!
.!........................................................................
.!
.P -4;CANALPHA, cancelling /ALPHABETIC qualifier
.P 0;^*Explanation:\*An error occurred while reading from entries in the file 
specified with the /ALPHABETIC qualifier.
.P 0;^*User action:\*This error suggests that the entries in the file were 
corrupt. Check that the file contained text only and that it was not corrupt.
.!
.!........................................................................
.!
.P -4;NOMATCH, text from ACD1 "string" unmatched
.P 0;^*Explanation:\*The "string" read from the optional text field an AC
entry of type 1 (ACD1) ,was not matched with text entries read from the file
specified with the /ALPHABETIC qualifier. As a result the feature code (FC) of
the feature containing that AC entry will not be modified. 
.P 0;^*User action:\*If the user wished to modify the FC of the feature 
which had an ACD1 with the specified text entry, then an appropriate entry
should be made in the file specified with the /ALPHABETIC qualifier. 
.!
.LEFT MARGIN 0
.PAGE
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^*MESSAGES (warning)\*
.NO JUSTIFY
.TEST PAGE 12
.BLANK
.JUSTIFY
These messages are output when an error has occurred that can be corrected 
immediately by the user.
.LEFT MARGIN +4
.NO JUSTIFY
.TP 10
.P -4;ARGSREQ, at least one argument pair required.

.P 0;^*Explanation:\* The user has failed to provide any 'OLD','REPLACEMENT'
code pairs and has pressed carriage return in response to one of the prompts:
.LITERAL

        Old Feature Code, New Feature Code? 
or:
        Old Text Component Code, New Text Component Code? 
or:
        Old AC type number, New AC type number?
or:
        Old Layer Number, New Layer Number ?

.END LITERAL

.P 0;^*User action:\* IRECODE expects at least one AC, Layer, Feature or TCC
code pair to work with and will persist in reprompting until one is provided.
Use <CTRL/Z> to abort the IRECODE run if you are unsure of the correct
response. 

.TP 10
.P -4;BADARGFMT, bad format for arguments

.P 0;^*Explanation:\* The parameters have been entered in an incorrect format
(see command qualifiers section), the user must enter them all again. 

.P 0;^*User action:\* IRECODE cannot read the supplied arguments. Instead it 
will prompt for input.

.P 0;The user should supply the arguments in the form requested. Further
arguments can be supplied, if desired, and the argument list terminated by
specifying a blank line. 

.TP 10
.P -4;BADARGRA, qualifier argument out of range

.P 0;^*Explanation:\* The specified argument value (or value typed in response
to a prompt) is outside the specified range.

.P 0;^*User action:\* Specify values that lie within the specified range.

.TP 10
.P -4;BADCHR, bad character in string

.P 0;^*Explanation:\* A bad character is present in the argument list,
IRECODE will prompt for input which should be supplied using the format:
.LITERAL

	'integer', 'integer'<CR>
.END LITERAL

.P 0;^*User action:\* Supply the arguments in the form requested. Further
arguments can be supplied, if desired, and the argument list terminated by
specifying a blank line. 

.TP 10
.P -4;TOOMNYPAR, too many argument pairs - maximum 'integer'

.P 0;^*Explanation:\* Too many code change argument pairs were supplied in
prompt mode.

.P 0;^*User action:\* The maximum number of code change argument pairs allowed
is large. Ensure that you are quite certain that you really want to
change so many code values. If you do, you will have to run IRECODE twice. The
first time you should specify an output file and change up to the maximum
number of codes only. The second time you may wish to modify the output file of
the first IRECODE run using IRECODE in /IN__SITU mode. You can then change all
remaining codes to specified new values. Should you wish to change such large
numbers of IFF entry code values on a regular production basis please contact
Laser-Scan. 
.!
.!............................................................................
.!
.TP 10
.P -4;TWOARGS, two integer arguments required.

.P 0;^*Explanation:\* Only one integer argument was specified either as a
qualifier argument or in response to a prompt for input. 

.P 0;^*User action:\* Supply the arguments in the form requested. Further
arguments can be supplied, if desired, and the argument list terminated by
specifying a blank line. 
.!
.!............................................................................
.!
.TP 10
.P-4;The following messages are self-explanatory and relate to entries being 
read from the file specified with the /ALPHABETIC qualifier:
.List "o"
.le;UNEXPEOL, unexpected end of line while reading from file.
.le;NOALPSUCC, no entries successfully read from file.
.le;NOINTPOSS, error in reading string, no integer possible.
.le;NOINT, error while attempting to read integer.
.le;INTARGRNG, integer in string is out of range.
.End list
.PAGE
.LM 0
.BL
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^*MESSAGES (error)\*
.JUSTIFY
These messages indicate an error in processing which has caused IRECODE to
terminate. The most likely causes are a corrupt or otherwise invalid input IFF
file, or an error related to command line processing and file manipulation.
It is most unlikely that any output file produced will be correctly processed.
.LEFT MARGIN +4
.NO JUSTIFY
.BLANK
.!
.!............................................................................
.!
.P -4;ERRSSNVIO, successive syntax violations - please read manual
.P 0;^*Explanation:\* The user has failed to enter the argument pair in the 
correct format, in four successive attempts. IRECODE exits.
.P 0;^*User action:\* Read the documentation before trying again.
.!
.!............................................................................
.!
.P -4;UNEXPEOF, unexpected end of IFF file.
.P 0;^*Explanation:\* The specified input IFF file ended before an EJ entry was
encountered. The valid part of the input IFF file was processed, but upon
detection of this error condition IRECODE deletes the output file and aborts
execution. 
.P 0;^*User action:\* Use IMEND to correctly terminate the input file before
re-specifying the IRECODE command line. 
.!
.!............................................................................
.!
.P -4;UNEXPERR, unexpected error while reading from file.
.P -4;FILERR, unexpected file error.
.p 0;^*Explanation:\* These errors relate to the file specified with the 
_/ALPHABETIC qualifier.
.p 0;^*User action:\*Check that the file contains only text entries and that 
it is not damaged.
.!
.!............................................................................
.!
.BLANK
.LEFT MARGIN-4
.PAGE
.BLANK
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^*MESSAGES (other)\*
.BLANK
.JUSTIFY
.FILL
.P 0;In addition to the above messages which are generated by IRECODE itself,
other messages may be produced by the command line interpreter (CLI) and by
Laser-Scan libraries. In particular, messages may be generated by the IFF
library. These are introduced by '%IFF' and are documented in the IFF library
users' guide. In most cases IFF errors will be due to a corrupt input file, and
this should be the first area of investigation. If the cause of the error
cannot be traced by the user and Laser-Scan are consulted, then the input file
should be preserved to facilitate diagnosis. 
