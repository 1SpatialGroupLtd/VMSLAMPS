.PAGE

.BR;^*--------------------------------------------------------------------------------\*
.BR;^*MODULE####IDIFFERENCE\*
.INDEX IDIFFERENCE                  
.P 0
^*--------------------------------------------------------------------------------\*
.BR;^*REPLACES\*##DAMP module CMPIFF
.INDEX DAMP
.INDEX DAMP > CMPIFF

.P 0
^*--------------------------------------------------------------------------------\*
.HL 2 ^*FUNCTION\*

.INDEX IMP > module functions > IFF file comparison
.LM +10

.INDEX IDIFFERENCE > FUNCTION
.P 0;IDIFFERENCE is the IMP IFF file comparison utility. It compares
the file header entries (the RA,HI,etc), and then for each layer that is
present in both files, it compares the features. Features are compared if they
have the same FSN (Feature Serial Number). If several features in one layer
have the same FSN, only the last encountered is compared. Note that layers and
features within the files need not be sorted. 

.LM -10

.P 0
^*--------------------------------------------------------------------------------\*
.HL 2 ^*FORMAT\*
.INDEX IDIFFERENCE > FORMAT

.LM +10
.NO FILL
.NO JUSTIFY
$ IDIFFERENCE master-file-spec revision-file-spec
    
^*Command qualifiers                              Defaults\*
.INDEX IDIFFERENCE > command qualifiers

/DEBUG                                          No debug information
.INDEX IDIFFERENCE > command qualifiers > /DEBUG
/FRT=file-spec                                  No FRT
.INDEX IDIFFERENCE > command qualifiers > /FRT
/[NO]IGNORE=([FSFC],[FSSTATUS],[FSPCTEXT],      /NOIGNORE
#############[FSUSERWORD],[HI],[MD],[NS],
#############[TH])
.INDEX IDIFFERENCE > command qualifiers > /IGNORE
/LOG                                            No logging
.INDEX IDIFFERENCE > command qualifiers > /LOG
/LOOKAHEAD=integer                              /LOOKAHEAD=20
.INDEX IDIFFERENCE > command qualifiers > /LOOKAHEAD
/[NO]OS                                         /NOOS
.INDEX IDIFFERENCE > command qualifiers > /OS
/OUTPUT=file-spec                               Output to SYS$OUTPUT
.INDEX IDIFFERENCE > command qualifiers > /OUTPUT
/[NO]PLOT=([COORDINATES],[ATTRIBUTES],[OTHER])  /NOPLOT
.INDEX IDIFFERENCE > command qualifiers > /PLOT
/PRINTER                                        Output is not printed
.INDEX IDIFFERENCE > command qualifiers > /PRINTER
/SUMMARY                                        See text
.INDEX IDIFFERENCE > command qualifiers > /SUMMARY
/TOLERANCE=([DEFAULT=real],[FACTOR=real])       See text
.INDEX IDIFFERENCE > command qualifiers > /TOLERANCE
.FILL
.JUSTIFY
.LM -10

.P 0
^*--------------------------------------------------------------------------------\*
.HL 2 ^*PROMPTS\*
.INDEX IDIFFERENCE > PROMPTS

.P 10
__File1: master-file-spec
.I10
__File2: revision-file-spec

.P 0
^*--------------------------------------------------------------------------------\*
.HL 2 ^*PARAMETERS\*
.INDEX IDIFFERENCE > PARAMETERS

.LM +10

.P-10;master-file-spec
.P-2;-#specifies the master IFF file with which comparison is to be made. Any
part of the file specification which is not supplied will be taken from the
default specification LSL$IF:IFF.IFF;0
.INDEX IDIFFERENCE > and LSL$IF:

.INDEX IDIFFERENCE > definition of "master" file
.P0; The master IFF file is referred to as "file 1" by the program, and
is regarded as the 'correct' file.

.TP 5
.P-10;revision-file-spec
.INDEX IDIFFERENCE > definition of "revision" file
.P-2;-#specifies the IFF file which is to be compared with the master file.
Any part of the file specification which is not explicitly given will be taken
from the parsed master file specification.

.P0; If the revision-file-spec is ommitted, then IDIFFERENCE will attempt to
use the previous version of the master file as the revision file. It generates
the revision-file-spec by subtracting 1 from the master file's version number.
If no version number is given in the master-file-spec, then IDIFFERENCE will
look for version ";-1", which is VMS short-hand for the previous version.

.P0; The revision file is referred to as "file 2" by the program.
.LM -10

.P0
^*--------------------------------------------------------------------------------\*
.HL 2 ^*COMMAND QUALIFIERS\*
.INDEX IDIFFERENCE > COMMAND QUALIFIERS

.LM +10

.TP 8
.P-10;/DEBUG=integer
.INDEX IDIFFERENCE > command qualifiers > /DEBUG

.P-2;-#this qualifier requests various types of debugging messages.  It is
documented here for completeness, but is not recommended for use by customers
as it will produce voluminous output.

.TP 10
.P-10;/FRT=file-spec
.INDEX IDIFFERENCE > command qualifiers > /FRT

.P-2;-#this qualifier specifies an FRT file which will be read to provide
ACD definitions. These specify customer or application specific AC and CB 
column types and names. If no FRT file is read, then only the Laser-Scan
default ACD definitions will be understood by IDIFFERENCE. This means that
only AC and CB data with these ACD types will be compared according to their
datatype, and labelled correctly in difference listings. If an FRT file is
specified, its specification will be filled out from the default file-spec
LSL$FRT:.FRT;0

.TP 10
.P-10;/IGNORE=(FSFC,FSSTATUS,FSPCTEXT,FSUSERWORD,HI,MD,NS,TH)
.I-10;/NOIGNORE				(default)
.INDEX IDIFFERENCE > command qualifiers > /IGNORE

.P-2;-#this qualifier specifies whether an entry/or list of entries 
in the input IFF files is/are to be ignored during the comparison 
process of IDIFFERENCE. 
.B
The following keyword arguments to the /IGNORE qualifier specify the
IFF entries, or part entries, which are to be excluded from the file comparison:
.LM +5
.LIST "o"
.P -3;Part-entry keywords:
.LE;FSFC#-#ignore the feature code (FC) field of the FS entry of all features.
.LE;FSSTATUS#-#ignore the status field of the FS entry of all features.
.LE;FSPCTEXT#-#ignore the process code/text field of the FS entry of 
all features.
.LE;FSUSERWORD#-#ignore the user-word field
of the FS entry of all features.
.P -3;File level entry keywords:
.LE;HI#-#ignore the history entries (HI) of the IFF files.
.LE;MD#-#ignore the Map Descriptor (MD) entries of the two IFF files.
.LE;NS#-#ignore the New Section entries (NS) of the two IFF files.
.P -3;Feature level entry keywords:
.LE;TH#-#ignore the thickness entry (TH) of all features in the two IFF files.
.END LIST 0
.LM -5
.P 0
The default value for this qualifier is /NOIGNORE. 

.TP 10
.P-10;/LOG
.INDEX IDIFFERENCE > command qualifiers > /LOG

.P-2;-#this qualifier results in supplementary messages being sent to
SYS$OUTPUT. Messages are produced when files are successfully opened. 

.TP 10
.P-10;/LOOKAHEAD=integer
.INDEX IDIFFERENCE > command qualifiers > /LOOKAHEAD

.P-2;-#this qualifier sets the acceptance window for point comparison
within a feature.  If there are no more than the given number of different
points between equal points, then the feature being compared is
considered to match (compare with the /MAXIMUM__DIFFERENCES and /WINDOW
qualifiers of the VMS DIFFERENCE utility). The default value for /LOOKAHEAD is
20.

.TP 10
.P-10;/OS
.I-10;/NOOS		(default)
.INDEX IDIFFERENCE > command qualifiers > /OS
.INDEX IDIFFERENCE > Ordnance Survey (U.K.) mode
.P-2;-#this qualifier forces IDIFFERENCE into Ordnance Survey (UK) mode.
This differs from the default mode of IDIFFERENCE in that: 
.INDEX IDIFFERENCE > Ordnance Survey (U.K.) mode > functions

.LM +5
.LIST "o"
.LE; the contents of the HI (HIstory), MD (Map Descriptor), CC (Cubic
Coefficient) and CP (Control Point) entries are ignored. Absence of these
entries is still diagnosed, however.
.LE; the first few entries in the MH (Map Header) entry will be treated
as if the MH is in OS format. This means that differences in the OS job
number, map reference and source scale fields will be diagnosed as such.
.LE; the contents of layers 0, 11 and 32 are ignored - a message is output
if any of these are encountered.
.END LIST 0

.LM -5

.TP 10
.P-10;/OUTPUT=file-spec
.INDEX IDIFFERENCE > command qualifiers > /OUTPUT

.P-2;-#by default all output is to SYS$OUTPUT. This qualifier specifies that
output should be redirected to the named file, with an additional header at the
start of the file noting the command line, etc. If 'file-spec' is ommitted,
then a file IDIFFERENCE.LIS will be generated. Note that /LOG messages are
still output to SYS$OUTPUT, and not to the /OUTPUT file.

.TP 10
.P-10;/PLOT=(COORDINATES,ATTRIBUTES,OTHER)
.I-10;/NOPLOT				(default)
.INDEX IDIFFERENCE > command qualifiers > /PLOT

.P-2;-#this qualifier requests that IDIFFERENCE produce three IFF files to
reflect the differences between the master and revision files. The plot IFF
files have the same file-spec as the master file, except that the file name
of each file has extra characters added to it:

.INDEX IDIFFERENCE > command qualifiers > /PLOT  > file-specs used
.LM +5
.LIST "o"
.LE ;"__DEL" - features deleted - that is, present in the master file but
not in the revision file                
.LE ;"__CRE" - features created - that is, present in the revision file but
not in the master file
.LE ;"__DIF" - features present in both the revision and master files,
 but different from each other
.END LIST 0

.LM -5
.P 0
The arguments to the /PLOT qualifier are used to specify which
features are to be output to the third (difference) file.
.INDEX IDIFFERENCE > command qualifiers > /PLOT  > options

.LM +5
.LIST "o"

.LE; If the COORDINATES option is selected, then it outputs features
.LIST 0,"o"
.LE; with differing X, Y or Z coordinates
.LE; with differing visibility (ie where a line segment is visible in one file,
and invisible in the other)
.LE; with differing numbers of points
.END LIST 0

.LE;If the ATTRIBUTES option is selected, then it outputs features
.LIST 0,"o"
.LE; with differing point attributes (other than X, Y or Z)
.LE; with differing numbers of point attributes (ie CB columns)
.LE; with differing ACs
.END LIST 0

.LE;If the OTHER option is selected, then it outputs features with any other
difference.

.LE;If no options are specified (ie /PLOT by itself) then the effect is as if
all options had been selected - features differing in any way will be output.

.END LIST 0
.LM -5

.P 0;In addition to any features which are found to be different, the plot
files also contain a frame representing the area covered by the two files. The
frame is placed in a separate layer. The number of this layer is determined
using the maximum layer number from the 2 input files, plus one.

.TP 10
.P-10;/PRINTER
.INDEX IDIFFERENCE > command qualifiers > /PRINTER

.P-2;-#if this qualifier is specified, then program output will be written
to a file, which will be queued for printing on SYS$PRINT and then deleted when
IDIFFERENCE finishes. If /OUTPUT has also been specified, then the file
concerned is the /OUTPUT file. Otherwise, a default file called IDIFFERENCE.LIS
will be used. 

.TP 10
.P-10;/SUMMARY

.INDEX IDIFFERENCE > command qualifiers > /SUMMARY
.P-2;-#if this qualifier is specified, then only the final summary of
differences will be output.

.TP 10
.P-10;/TOLERANCE=(DEFAULT=real,FACTOR=real)
.INDEX IDIFFERENCE > command qualifiers > /TOLERANCE

.P-2;-#this qualifier specifies the tolerances to be used in determining
whether real (floating point) attributes (including X and Y) are to be
considered as identical. The numbers specified may not be negative. If an
attribute has an interval defined in its ACD, then the tolerance used for
comparison is the FACTOR value multiplied by that interval. Otherwise, the
DEFAULT value is used.  If the user does not specify the FACTOR value, then a
default of 1.0 is used.  If the user does not specify the DEFAULT value, then
IDIFFERENCE uses the maximum coordinate range divided by 10000. The maximum
coordinate range is deduced by taking the range entries of both input files
into consideration. 

.INDEX IDIFFERENCE > comparing line strings
.INDEX IDIFFERENCE > comparing real attributes

.P0;When comparing real attributes (and for line strings this
includes the X and Y coordinates), two values a1 and a2 are considered equal if
ABS(a1-a2) is less than or equal to the relevant tolerance.

.LM -10

.TP 20
.P0
^*--------------------------------------------------------------------------------\*
.HL 2 ^*DESCRIPTION\*
.INDEX IDIFFERENCE  > DESCRIPTION

.LM +10

.HL 3 ^*General\*
.INDEX IDIFFERENCE > DESCRIPTION> General

.P0;IDIFFERENCE takes two IFF files as input, and detects
.BLANK
.LM +5
.LIST 0,"o"
.LE;differences in the file header entries,
.LE;missing layers,
.LE;missing features,
.LE;differences in features, including
.LIST 0,"o"
.LE;changes in feature code,
.LE;differing ancillary codes,
.LE;differing texts and text classifications,
.LE;differing rotations, and
.LE;changes in the coordinates and coordinate attributes within features. 
.END LIST 0
.END LIST 0
.LM -5

.P0;Depending on the command qualifiers all the information regarding these
differences will be output to SYS$OUTPUT or to a listing file. If there is more
than one map in either input file, only the first will be compared. 
IDIFFERENCE expects FSNs (Feature Serial Numbers) to be unique within each
layer.

.BLANK
.HL 3 ^^^*What is compared\*
.INDEX IDIFFERENCE > DESCRIPTION > What is compared

.P0; IDIFFERENCE compares the

.BLANK
.LIST 0,"o"
.LE; RA (RAnge),
.LE; HI (HIstory),
.LE; MH (Map Header),
.LE; CP (Control Points),
.LE; CC (Cubic Coefficients),
.LE; first NS (New Section),
.LE; features within layers that occur in both files
.END LIST 0

.INDEX IDIFFERENCE > and junction entries
.P0; IDIFFERENCE ignores junction entries. Specifically, it does not look for
SH or JB entries amongst the file header entries, and it ignores any JP entries
found within a feature.

.INDEX IDIFFERENCE > unrecognised entries
.INDEX IDIFFERENCE > entries it does not know
.P0; Various obsolete entries are not recognised - these are

.BLANK
.LIST 0,"o"
.LE; TC (Transmitted Comment)
.LE; CH (literal CHaracter),
.LE; SS (Symbol Select),
.LE; SL (Symbol Library)
.END LIST 0

.INDEX IDIFFERENCE > and voids
.P0; Voids (VO entries) are always ignored.

.INDEX IDIFFERENCE > and 'file header' entry order
.P0; Note that when comparing the 'file header' entries (ie everything before
the first layer of the files - the RA,HI,etc), the order of the entries is not
relevant to IDIFFERENCE. Before reading in each header entry, IDIFFERENCE
rewinds to the start of the file and then searches forwards for the entry.

.P0; IDIFFERENCE also ignores those entry/list of entries that are explicitly
specified in the /IGNORE qualifier - these are 

.BLANK
.LIST 0,"o"
.LE; FSFC (Feature Code),
.LE; FSSTATUS (Feature Status),
.LE; FSPCTEXT (Feature PC/TEXT),
.LE; FSUSERWORD (Feature User-Word),
.LE; HI (Map History),
.LE; MD (Map Descriptor),
.LE; NS (New Section),
.LE; TH (Thinkness)
.END LIST 0

.BLANK
.TP 5
.HL 4 ^^^*Comparing real values\*
.INDEX IDIFFERENCE > DESCRIPTION > Comparing real values
.INDEX IDIFFERENCE > and real value comparison
.INDEX IDIFFERENCE > and real value comparison > standard tolerance
.INDEX IDIFFERENCE > and real value comparison > default tolerance
.INDEX IDIFFERENCE > and real value comparison > factor tolerance
.INDEX IDIFFERENCE > standard real tolerance
.INDEX IDIFFERENCE > default real tolerance
.INDEX IDIFFERENCE > factor real tolerance
.INDEX IDIFFERENCE > and real value comparison > effect of /TOLERANCE

.P0; When comparing floating point quantities, a direct check for equality
is not sensible. Instead, IDIFFERENCE checks that real values are the same
within a tolerance. Three tolerances are used:

.LIST "o"

.LE; The ^*standard real tolerance\* is 10_*_*-6 (ten to the power of minus
six), and is used when comparing real quantities in the file
header entries, and in the RO entry.

.LE; The ^*default real tolerance\* is used for comparing X, Y and Z coordinate
values. It is used for all CB and AC real values where there is no interval
specified in the ACD for that quantity (which is why it is used for
X, Y and Z). It is either specified by the user with the /TOLERANCE qualifier,
or is taken as being 1/1000th of the maximum range of the data.

.LE; The ^*factor real tolerance\* is used for comparing CB and AC real values
where an interval was specified in the ACD for that quantity. It is defined as
a multiple of that interval, where the multiple is either specified by the
user with the /TOLERANCE qualifier, or is taken as being 1.0.

.END LIST 0

.BLANK
.TP 5
.HL 4 ^^^*The RA (RAnge) entries\*
.INDEX IDIFFERENCE > DESCRIPTION > RA (RAnge) entries
.INDEX IDIFFERENCE > and RA (RAnge) entries

.P0;The RA entries are compared to see whether the range of coordinates
described is the same. Range elements are considered equal if they differ
by less than the standard real tolerance.

.BLANK
.TP 5
.HL 4 ^^^*The HI (HIstory) entries\*
.INDEX IDIFFERENCE > DESCRIPTION > HI (HIstory) entries
.INDEX IDIFFERENCE > and HI (HIstory) entries

.P0;The HI entries are checked to see whether they contain the same
number of history records, and whether the history records within each entry
are identical. If they do not match then the complete HI entry from
each file is output. 

.P0;HI entries are ignored only when the qualifier /IGNORE=HI is specified.

.BLANK
.TP 5
.HL 4 ^^^*The MH (Map Header) entries\*
.INDEX IDIFFERENCE > DESCRIPTION > MH (Map Header) entries
.INDEX IDIFFERENCE > and MD (Map Header) entries
.P0;The fields of the MH are compared in turn.
Differences are reported on the basis of which longword field of the
MH does not match, and each mismatched field is output as a hexadecimal
quantity. 

.INDEX IDIFFERENCE > command qualifiers > /OS qualifier
.INDEX IDIFFERENCE > and MD (Map Header) entries > effect of /OS
.P0;Note that if the /OS qualifier is selected, then the first four fields in
the MH (job number, scale and SW corner easting and northing) are
recognised separately, and output in an appropriate form.

.BLANK
.TP 5
.HL 4 ^^^*The MD (Map Descriptor) entries\*
.INDEX IDIFFERENCE > DESCRIPTION > MD (Map Descriptor) entries
.INDEX IDIFFERENCE > and MD (Map Descriptor) entries

.P0;The MD entries are checked to ensure that they are of a valid type,
and that they are both the same length. If they are compatible, then their
contents are compared, and if any of the fields vary then the complete map
descriptor will be output. Real MD elements are considered equal if they differ
by less than the standard real tolerance, integer elements are required
to match exactly. 

.P0;MD entries are ignored only when the qualifier /IGNORE=MD is specified.

.BLANK
.TP 5
.HL 4 ^^^*The NS (New Section) entries\*
.INDEX IDIFFERENCE > DESCRIPTION > NS (New Section) entries
.INDEX IDIFFERENCE > and NS (New Section) entries
.INDEX IDIFFERENCE > and unconcatenated digitising files

.P0;IDIFFERENCE (like most of the other IMP utilities) is not intended
to deal with files that have just been digitised, and are thus split into
multiple sections. Files produced by LASERAID should be processed with
LAPROCESS
to perform any transformations necessary, and all new files should
be processed by IMERGE or LITES2 to consolidate the separate sections in
which files are normally digitised.
.INDEX LAPROCESS
.INDEX LASERAID
.INDEX IMERGE
.INDEX LITES2

.P0;IDIFFERENCE assumes that there is only one section in
the IFF files being compared, and only compares the first NS entry
in each file. If the entries do not match, then they will both be output.
                                  
.P0;NS entries are ignored only when the qualifier /IGNORE=NS is specified.

.BLANK
.TP 5
.HL 4 ^^^*The CC (Cubic Coefficients) entries\*
.INDEX IDIFFERENCE > DESCRIPTION > CC (Cubic Coefficients) entries
.INDEX IDIFFERENCE > and CC (Cubic Coefficients) entries

.P0;Again, it is assumed that the file has been processed to consolidate
sections. Thus IDIFFERENCE will only look for one CC entry in each file. The
entries for the two maps are compared. If any differences are found the whole
of the CC entry for each file is output. Coefficients are considered equal if
they differ by less than the standard real tolerance. 

.BLANK
.TP 5
.HL 4 ^^^*The CP (Control Point) entries\*
.INDEX IDIFFERENCE > DESCRIPTION > CP (Control Point) entries
.INDEX IDIFFERENCE > and CP (Control Point) entries

.P0;Again, it is assumed that the file has been processed to consolidate
sections. Thus IDIFFERENCE will only look for one CP entry in each file. If the
control points of the two files are different in any respect then the complete
CP entry for each file is output. Control points are considered equal if they
differ by less than the standard real tolerance. 

.BLANK
.TP 5
.HL 4 ^^^*The Layers\*
.INDEX IDIFFERENCE > DESCRIPTION > IFF layers
.INDEX IDIFFERENCE > and IFF layers

.P0;IDIFFERENCE does not require that layers be in order within the IFF
files being compared, nor does it require that they be 'continuous'. That
is, if a file has several layers with the same layer number (which is stored
in the NO entry),
then IDIFFERENCE will recognise the data within them as all being part of
the same layer.

.P0;After comparing the file header entries (above), IDIFFERENCE scans
the input files to establish where all of the NO (New Overlay) entries are.
It then compares the layers in ascending numerical order. If a layer is
only present in one file, then this is reported (and no comparison is made
of the features within that layer).

.BLANK
.TP 5
.HL 4 ^^^*The Features\*
.INDEX IDIFFERENCE > DESCRIPTION > IFF features
.INDEX IDIFFERENCE > and IFF features

.P0; Within each layer, features are compared according to their FSN (Feature
Serial Number). That is, if a feature in layer 3 in one file has FSN 77, it
will be compared with the feature with FSN 77 in layer 3 in the other file.
Internal sequence numbers are ignored by IDIFFERENCE.

.P0; IDIFFERENCE does not require that features be sorted into FSN order
 - when it starts comparing a layer, it builds an internal table of the
addresses of each feature. It can then compare them in ascending order of
FSN by looking up the location of the relevant feature in each file.

.P0; If there are several features with the same FSN in a layer, then
IDIFFERENCE will use the last of the features (that is, the one nearest
the end of the IFF file) as the one to be compared. Each time that a duplicate
FSN is encountered, IDIFFERENCE outputs a message warning that it is using
the latest version of the feature.

.P0; When features are compared, they may be counted as ^*identical\*,
^*different\* or ^*unmatched\*. The summary of differences
at the end of the program lists how many features were in each category. A
single feature is only counted once, and if it is found to be both
^*different\* and ^*unmatched\* then it is counted as ^*unmatched\*.

.P0; For each feature, the FS (Feature Status), AC (Ancillary Code), 
TS (Text Status), TH (Text Height or THickness), RO (ROtation), TX (TeXt) and
CB, ST or ZS (coordinate block or string) entries are compared.
A feature is rejected as
malformed if it does not contain an FS and at least one CB (or ST/ZS) entry,
and if it does not end with an EF entry. 


.INDEX IDIFFERENCE > feature comparison 

.P0; The entries are compared as follows:

.LIST "o"

.LE;FS (Feature Status)
.INDEX IDIFFERENCE > feature comparison > FS (Feature Status)

.P0;The text/symbol bits in word three of the FS entry are decoded for each
feature to determine if it is a text, a symbol or a line. If both features do
not have the same bits set, they are considered ^*unmatched\*, and comparison
of the FS entry is abandoned. User must note that this comparison will be 
performed only when the command qualifier /IGNORE=FSPCTEXT is not specified.

.P0;If the text/symbol bits match, then the rest of the FS entries are
compared. Any differences result in the features being considered
^*different\*.

.blank
.list 0,"o"
.le; The first word is the feature code. This word is ignored when the
qualifier /IGNORE=FSFC is specified.     
.le; The second word contains status bits, and is only compared for line
features - it is displayed in hexadecimal if it fails to match. This word 
is ignored when the qualifier /IGNORE=FSSTATUS is specified.     
.le; For text features, the third word contains the text position code, type
style and name category. These are compared as separate items. For linear and
symbol features, the third word contains the process code. This word is 
ignored when the qualifier /IGNORE=FSPCTEXT is specified.     
.le; The fourth word is not normally used, but is checked just in case,
and displayed in hexadecimal if it differs. This word is ignored when the
qualifier /IGNORE=FSUSERWORD is specified.     
.end list 0

.LE;ACs (Ancillary Codes)
.INDEX IDIFFERENCE > feature comparison > AC (Ancillary Code)

.P0; If only one feature has AC entries, then a warning message is output and
the features are considered ^*different\*.

.P0; If both features contain the same number of ACs, these are compared in
the order that they occur. If any difference is found, or if the features
have a different number of ACs, then all the ACs for both features are printed
out, and the features are ^*different\*.

.TP 6
.LE;TS (Text Status)
.INDEX IDIFFERENCE > feature comparison > TS (Text Status)

.P0; The TS entry starts a text component. This is effectively a
'sub-text-feature', and may contain all of the entries found within a normal
text feature, except for FS and AC entries. A text component is terminated by
the next TS or by the EF (End of Feature) entry, and is compared as if it were
indeed a sub-feature - that is, each text component is compared in turn, in the
order that they are encountered in the features.

.P0;If only one of the features being compared has a text component, then a
warning is given and the features are considered ^*different\*. Note that in
this case, the feature without a text component will be compared to the entries
before the text components in the other.  This will generally produce a series
of "entry 'entry' missing" messages, as the feature with text components should
only have an FS and possibly ACs before its first TS entry.

.P0;If the features contain differing numbers of text components, then as
many as possible are compared. The features will be considered ^*different\*.

.P0; For each text component, the TS entry is compared, and then the rest
of the text component is compared, in the same way as a normal feature.
Words one and three of the TS entry are compared in the same way as words
one and three of an FS entry (qv), except that word three must have the
text bit set. Words two and four are reserved, and should be zero.

.TP 6
.LE;TH (THickness or Text Height)
.INDEX IDIFFERENCE > feature comparison > TH (THickness or Text Height)

.P0;If only one feature has a TH entry, then a warning message is output,
and the features are considered ^*different\*

.P0;If both features contain TH entries, they are compared. If they do not
match, then the features are considered ^*different\*.

.P0;TH entries are ignored only when the qualifier /IGNORE=TH is specified.

.TP 6
.LE;RO (ROtation)
.INDEX IDIFFERENCE > feature comparison > RO (ROtation)

.P0;If only one feature has an RO entry, then a warning message is output, and
the features are considered ^*different\*.

.P0;Otherwise, the two RO entries are compared, and if they do not match the
feature is considered ^*different\*. Note that the rotations are considered to
match if they differ no more than the standard real tolerance.

.TP 6
.LE;TX (TeXt)
.INDEX IDIFFERENCE > feature comparison > TX (TeXt)

.P0;If only one feature has a TX entry, then a warning message is output,
and the features are considered ^*different\*.

.P0;Otherwise, if the texts have a different number of characters, or if the
characters in the texts do not match, then the differing texts are printed
out, and the features are considered to be ^*different\*.

.TP 6
.LE;CB (Coordinate Block) and ST or ZS (coordinate strings)
.INDEX IDIFFERENCE > feature comparison > ST (coordinate STring)
.INDEX IDIFFERENCE > feature comparison > ZS (3d coordinate string)
.INDEX IDIFFERENCE > feature comparison > CB (Coordinate Block)

.P0;Every feature must contain at least one X,Y coordinate pair, held in
a CB, ST or ZS entry.

.P0;IFF revision level 0 files hold their coordinates in ST or ZS (2d or 3d
coordinate string) entries. IFF revision level 1 files use CB (Coordinate
Block) entries instead. IDIFFERENCE converts all ST and ZS entries to CB
entries internally - it thus never actually sees any of the older type of
entry.

.P0; The actual distribution of points within coordinate blocks is not
important - that is, if one feature has two CBs of 150 and 30 points, and
the other has one CB containing 180 points, IDIFFERENCE will still
compare each point with its corresponding point in the other file.

.P0; Before comparing the CB entries for a feature (or text-component),
IDIFFERENCE scans the relevant CB entries, to determine how many columns
(attributes) are used within the feature, what they are, and how many points
there actually are. If the columns (attributes) in the two features differ,
a warning will be output, and the features will be considered ^*different\*.

.P0;Each point x1,y1,..._ from file 1 is compared with the
corresponding point x2,y2,..._ in file 2, and they are considered to match
if all of the attributes (including the X and Y coordinates) are found to
match. Real attributes are compared using the appropriate tolerance - for
X, Y and Z coordinates this will be the ^*default real tolerance\*.

.P0;If the two points match, but their visibility does not (that is, there
is an invisible line segment ending at one, and a visible line segment ending
at the other), then they will be output, and the feature will be considered
^*different\*.

.P0;If the points do not match, then the point in file 1 is compared with the
next point in file 2, and so on until 'lookahead' points from file 2 have
been compared. 'lookahead' is the value specified with the /LOOKAHEAD
qualifier, and defaults to 20. If the points have still not matched, the
next point from file 1 is checked against these same 'lookahead' points from
file 2 (note that this includes the point in file 2 which did not match
initially). This too is repeated until 'lookahead' points from file 1 have been
tried. 

.P0;If at any stage in this process a match is found, then comparison of the
feature continues from the matched points, and a list of the unmatched
points (and the first matched point) is output. In this case the
features are considered ^*different\*.

.P0;If a match is not found, the comparison is abandoned and a list of the
unmatched points tried is output. The features are considered ^*unmatched\*.
Features are also considered ^*unmatched\* if all of their points fail to
match, even if the number of points is less than 'lookahead'.

.P0;Difference in CBs are counted slightly differently than differences in
other entries within a feature. Four separate counts are kept:

.blank
.list 0,"o"
.le; features that have differing columns (attributes) in their CBs.
.le; features that differ in geometry - this is taken to mean that their
CBs differed in X, Y or Z, or in visibility.
.le; features that differ in the other attributes of a point.
.le; features that differ because one feature has more points left,
after all other comparisons have been completed.
.end list 0

.p0; Note that comparison of one feature might be counted towards more than one
of these totals.

.END LIST 0

.TP 35
.HL 3 ^^^*Summary of differences\*
.INDEX IDIFFERENCE > DESCRIPTION > Summary of differences
.INDEX IDIFFERENCE > Summary of differences

.P0
When the comparison is complete a summary of the differences found is output.
This takes the form:

.TP 23
.INDEX IDIFFERENCE > Summary of differences > sample output
.LM +5
.NOFILL

Summary of differences
_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*

The following header entries did not match:_              ^*(1)\*
   RA (RAnge)
   MD (Map Descriptor)

'integer' different layers were found                    ^*(2)\*
   Number of layers compared            'integer'        ^*(3)\*
   Missing layers in file 1             'integer'        ^*(4)\*
   Missing layers in file 2             'integer'        ^*(5)\*

'integer' features required comparison:_                  ^*(6)\*
   Identical                            'integer'        ^*(7)\*
   Different                            'integer'        ^*(8)\*
   Unmatched                            'integer'        ^*(9)\*

How features differed by entry type:_                    ^*(10)\*
   FS entry                             'integer'
   CB entries - geometry                'integer'
   CB entries - attributes              'integer'

Missing features in file 1              'integer'       ^*(11)\*
Missing features in file 2              'integer'       ^*(12)\*

Duplicated FSNs in file 1               'integer'       ^*(13)\*
Duplicated FSNs in file 2               'integer'       ^*(14)\*
.FILL
.LM -5
.BLANK 2                  
.P0; If any of the file header entries was not matched, then line ^*(1)\* is
output, followed by a list of those entries that were different. In this
example, the RA and MD entries differed. 

.P0; Line ^*(2)\* notes how many different layers were present in the files.
Line ^*(3)\* then records how many of these were present in both files, and
lines ^*(4)\* and ^*(5)\* indicate how many layers were in one file but not the
other. Note that the quantities in lines ^*(3)\* to ^*(5)\* sum to the number
in line ^*(2)\*. 

.P0; Line ^*(6)\* indicates how many features were actually compared. This does
not include any features in layers that were ignored, nor does it include
features that were missing, or ignored because of duplicated FSNs. Line ^*(7)\*
shows how many features were considered to be ^*identical\* - ie no differences
at all. Line ^*(8)\* shows the number of ^*different\* features, and line
^*(9)\* the number of ^*unmatched\* features.

.P0; If any of the features differed, then line ^*(10)\* will be output,
followed by an indication of how many features differed by each entry type.
Note that difference within CB entries (and thus also ST or ZS entries) are
counted in four ways - see the section on the comparison of CB entries above.
In this example, the only differences observed were in FS entries, and in the
actual geometry and attributes of CB entries.

.P0; Lines ^*(11)\* and ^*(12)\* record how many features were present in one
file, but not in the other. Note that if a layer in a file contained several
features with the same FSN (Feature Serial Number), and there are no features
with that FSN in that layer in the other file, then this only contributes a
count of 1 to the 'missing' total. 

.P0; Lines ^*(13)\* and ^*(14)\* record how many features were ignored because
they had the same FSN as another feature in the same layer. 

.LM -10

.PAGE
.BR
^*--------------------------------------------------------------------------------\*
.HL 2 ^*EXAMPLES\*
.INDEX IDIFFERENCE  > EXAMPLES

.!!! start of examples !!!

.NOFILL
.BLANK
$ ^*IDIFFERENCE TJI1 TJI2 /FRT=RONACD_<CR_>\*
File 1 is LSL750$DUA0:[LSL.IFF]TJI1.IFF;4
File 2 is LSL750$DUA0:[LSL.IFF]TJI2.IFF;15

Comparing with lookahead 20, point tolerances: default 0.03412, factor  1.00

HI (HIstory) entry missing in file 1
HI (HIstory) entry missing in file 2

Comparing layer 1
_*_*_*_*_*_*_*
Feature 1		 line feature
=======
CB data - differences for file 1
Point                X              Y
  200:         17.4755      87.266922
  201:        18.21361       91.21772
  202:       18.247231      96.905792
       ...equal
-------
CB data - differences for file 2
Point                X              Y
  200:       18.247231      96.905792
       ...equal
_*_*_*_*_*_*_*
Feature 2		 line feature
CB entries - some columns will not be compared
Column Z                    (   93) is only present in file 2
_*_*_*_*_*_*_*
Feature 3		 line feature
FS entry: Feature Code - in file 1 = 0, file 2 = 1
=======
TH entry: file 1 = 0, file 2 = 5
=======
CB data - differences for file 1
Point                X              Y     CAPTURE__XY
    6:       50.737034      164.85843             62
    7:       50.983398      164.81369             62
    8:       51.230087      164.77017             62
    9:       51.477097      164.72789             62
   10:       51.724419      164.68683             62
   11:       51.972038      164.64699             62
       ...equal
-------
CB data - differences for file 2
Point                X              Y     CAPTURE__XY
    6:       50.737034      164.85843             61
    7:       50.983398      164.81369             61
    8:       51.230087      164.77017             61
    9:       51.477097      164.72789             61
   10:       51.724419      164.68683             61
   11:       51.972038      164.64699             62
       ...equal
=======
CB data - differences for file 1
Point                X              Y     CAPTURE__XY
   23:       54.963589      164.26456             62
   24:       55.214287      164.24066             62
   25:       55.465157      164.21799             62
   26:       55.716187      164.19653             62
       ...equal
-------
CB data - differences for file 2
Point                X              Y     CAPTURE__XY
   23:       54.963589      164.26456             57
   24:       55.214287      164.24066             57
   25:       55.465157      164.21799             57
   26:       55.716187      164.19653             62
       ...equal
=======
CB data - differences for file 1
Point                X              Y     CAPTURE__XY
   27:       55.967377      164.17632             62
   28:       56.218708      164.15732             62
       ...equal
-------
CB data - differences for file 2
Point                X              Y     CAPTURE__XY
   27:       55.967377      164.17632             57
   28:       56.218708      164.15732             62
       ...equal
_*_*_*_*_*_*_*
Feature 5		 symbol feature
FS entry: differing text/symbol codes - in file 1 =  symbol, in file 2 = line
=======
--- unmatched ---
_*_*_*_*_*_*_*
Feature 6		 symbol feature
=======
AC entries: in file 1
 AC Name                 ( Type)           Value Text
 AC CHANGE__DATE          ( 1002)     10-DEC-1987 ""
 AC DATE__EXAMPLE         (12007)      1-JAN-1900 ""
-------
AC entries: in file 2
 AC Name                 ( Type)           Value Text
 AC CHANGE__DATE          ( 1002)     10-DEC-1987 ""
 AC DATE__EXAMPLE         (12007)      1-JAN-1988 ""
 AC ?                    ( 2009)               8 "K200/3/4-B"
_*_*_*_*_*_*_*
Feature 7		 line feature
=======
CB data - differences for file 1
Point                X              Y              Z    SURVEY__DATE
    1:             5.0            3.0            0.0    23-DEC-1962
    2:             6.0            4.0            1.0    14-NOV-1965
       ...equal
-------
CB data - differences for file 2
Point                X              Y              Z    SURVEY__DATE
    1:             5.0            3.0            0.0     5-JAN-1988
    2:             6.0            4.0            1.0    14-NOV-1965
       ...equal
=======
CB data - differences for file 1
Point                X              Y              Z    SURVEY__DATE
    4:             1.0            9.0            8.0     5-MAY-1966
    5:             9.0            1.0            2.0     7-JUL-1945
       (ends unequal)
-------
CB data - differences for file 2
Point                X              Y              Z    SURVEY__DATE
    4:             8.0            9.0            8.0     5-JAN-1988
    5:             9.0           10.0           10.0     5-JAN-1988
       (ends unequal)
_*_*_*_*_*_*_*
Feature 8		 line feature
=======
CB data - differences for file 1
       21 points left in file 1
=======
--- unmatched ---
_*_*_*_*_*_*_*
Feature 9		 line feature
=======
CB data - differences for file 1
       18 points left in file 1

Summary of differences
_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*

1 layer was found
   Number of layers compared           1
   Missing layers in file 1            0
   Missing layers in file 2            0

9 features required comparison:
   Identical                           1
   Different                           6
   Unmatched                           2

How features differed by entry type:
   FS entry                            2
   AC entries                          1
   CB entries - columns                1
   CB entries - geometry               3
   CB entries - attributes             2
   CB entries - point count            2
   TH entry                            1

Missing features in file 1             0
Missing features in file 2             0

Duplicated FSNs in file 1              0
Duplicated FSNs in file 2              0

 ELAPSED:    0 00:00:17.53  CPU: 0:00:12.63  BUFIO: 171  DIRIO: 179  FAULTS: 168
8
.FILL
.LM +10

.P0; This example illustrates various types of difference between the features
in these two IFF files.

.blank
.list 0,"o"

.le; In feature 1, file 1 contains two extra points (numbered as 200 and 201).
All points before these are equal, and all points afterwards are also equal.

.le; In feature 2, only one file contains a Z column, and this is therefore not
compared. Apparently, the X and Y coordinate data matches.

.le; In feature 3, there are several differences. The feature code does not
match, the contents of the TH entry differs, and two blocks of coordinate
data have had their CAPTURE__XY attribute changed.

.le; In feature 5, the FS entries contained differing text/symbol bits. The
features are thus regarded as being of different graphical type, and
therefore ^*unmatched\*. The rest of the feature seems to match.

.le; In feature 6, an extra AC is found. Note that all of the ACs are reported.

.le; In feature 7, there are various differences in the CB entry. Note that the
last point of the feature is different, and thus the "(ends unequal)" message
is used, rather than "etc..."

.le; In feature 8, the initial points match, but there are 21 more points in
file 1. Since this is more than the lookahead (which defaults to 20), the
feature is considered ^*unmatched\*

.le; In feature 9, there are only 18 extra points, so although the features
are different, they are not unmatched.

.end list 0

.p0; The summary then reports on the file in general. One layer was
compared, and 9 features. Of these, 1 matched, 2 were considered unmatched,
and 6 differed in less severe ways. The differences are then itemised according
to entries within a feature. Note that the CB differences are split up - one
feature had differing numbers of columns between the files, 3 features had
differences in the geometry (ie X,Y,Z or visibility), 2 features had
differences in CB attributes (all other columns), and 2 features differed in
the number of points (or rows) left after the CBs had been compared. Note that
although the matched/unmatched/different values add up to the number of
feature compared, the entry summary does not, as one feature may differ in
several ways.

.LM -10
.NOFILL
.BLANK 2
.TP 10
$ ^*IDIFFERENCE RWRB RWRD /OUTPUT=RWR_<CR_>\*
 ELAPSED:    0 00:00:20.26  CPU: 0:00:10.42  BUFIO: 64  DIRIO: 295  FAULTS: 1896
$ ^*TYPE RWR.LIS_<CR_>\*
============================ I D I F F E R E N C E =============================

IDIFFERENCE invoked by TONY using terminal RTA1: at  5-JAN-1988 14:03:05.29     

Command line:

IDIFFERENCE RWRB RWRD/OUTPUT=RWR 

================================================================================

File 1 is LSL750$DUA0:[LSL.IFF]RWRB.IFF;2
File 2 is LSL750$DUA0:[LSL.IFF]RWRD.IFF;1

Comparing with lookahead 20, point tolerances: default 0.10000, factor  1.00

RA (RAnge) entry in file 1
       0.0000    1000.0001      -0.0000    1000.0001
RA (RAnge) entry in file 2
       0.0000    1000.0001      -0.0000    1000.0001

HI (HIstory) entry missing in file 1
HI (HIstory) entry missing in file 2

MH (Map Header) entry
longword 4 in file 1 = 00079D38, file 2 = 0007A120  (hex)
longword 23 in file 1 = 00079D38, file 2 = 0007A120  (hex)

Map descriptors - type 2 MDs do not match
File 1:
- Local origin:  599500.0000,  499000.0000
- Map scale:       1250.0000
- Projection:    101 (UK national grid)
- Spheroid:        9 (Airy)
- Units:           2 (metres)
File 2:
- Local origin:  599500.0000,  499500.0000
- Map scale:       2500.0000
- Projection:    101 (UK national grid)
- Spheroid:        9 (Airy)
- Units:           2 (metres)

Comparing layer 1

Comparing layer 11

Summary of differences
_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*

The following header entries did not match:
   RA (RAnge)
   MH (Map Header)
   MD (Map Descriptor)

2 different layers were found
   Number of layers compared           2
   Missing layers in file 1            0
   Missing layers in file 2            0

53 features required comparison:
   Identical                          53
   Different                           0
   Unmatched                           0

Missing features in file 1             0
Missing features in file 2             0

Duplicated FSNs in file 1              0
Duplicated FSNs in file 2              0
.FILL
.LM +10

.P0; In this example, the output is directed to a file, and this file is then
typed. The files differed in their range, map header and map descriptor entries
only, as reported in the summary at the end. Note that, for the map descriptor,
all of the information compared is reported, even though it is only the scale
and local origin that differ.

.LM -10
.NOFILL
.BLANK 2
.TP 5
$ ^*IDIFFERENCE FILE1 FILE2 /LOG/PLOT=COORDINATES/OUTPUT=FILE_<CR_>\*
%LSLLIB-I-IFFOPENED, LSL750$DUA0:[LSL.IFF]FILE1.IFF;2 opened for read
%LSLLIB-I-IFFOPENED, LSL750$DUA0:[LSL.IFF]FILE2.IFF;1 opened for read
%LSLLIB-I-LOGOPNOUT, log file FILE.LIS opened for write
%LSLLIB-I-IFFOPENED, LSL750$DUA0:[LSL.IFF]FILE2__DEL.IFF;2 opened for write
%LSLLIB-I-IFFOPENED, LSL750$DUA0:[LSL.IFF]FILE2__CRE.IFF;2 opened for write
%LSLLIB-I-IFFOPENED, LSL750$DUA0:[LSL.IFF]FILE2__DIF.IFF;2 opened for write
 ELAPSED:    0 00:01:28.09  CPU: 0:01:17.63  BUFIO: 35  DIRIO: 912  FAULTS: 1720
.FILL
.LM +10

.P0; In this example, the user has specified /LOG, and thus the opening of
all files is reported. The /PLOT=COORDINATES qualifier means that coordinate
differences will be output to the output IFF files FILE2__DEL, FILE2__CRE
and FILE2__DIF. The /OUTPUT qualifier redirects the actual difference output
to the text file FILE.LIS

.LM -10
.NOFILL
.BLANK 2
.TP 5
$ ^*IDIFFERENCE TL1659NE.IFF1 TL1659NE__AFTER.IFF1 /SUMMARY_<CR_>\*

Summary of differences
_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*

The following header entries did not match:
   HI (HIstory)

1 layer was found
   Number of layers compared           1
   Missing layers in file 1            0
   Missing layers in file 2            0

427 features required comparison:
   Identical                         422
   Different                           4
   Unmatched                           1

How features differed by entry type:
   CB entries - geometry               5
   CB entries - attributes             5

Missing features in file 1             0
Missing features in file 2             0

Duplicated FSNs in file 1              0
Duplicated FSNs in file 2              0

 ELAPSED:    0 00:01:23.27  CPU: 0:01:14.67  BUFIO: 33  DIRIO: 905  FAULTS: 1526
.FILL
.LM +10

.P0; In this example, the /SUMMARY qualifier is used to suppress the main
difference output, so that only the final summary is produced.

.LM -10
.NOFILL
.BLANK 2
.TP 5
$ ^*IDIFFERENCE CODETEST CODESORT /OS_<CR_>\*
File 1 is LSL750$DUA0:[OS.IFF]CODETEST.IFF;3
File 2 is LSL750$DUA0:[OS.IFF]CODESORT.IFF;1

Comparing with lookahead 20, point tolerances: default 0.10000, factor  1.00

HI (HIstory) entry missing in file 1
HI (HIstory) entry missing in file 2

Comparing layer 1

Ignoring layer 11

Summary of differences
_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*

2 different layers were found
   Number of layers compared           2
   Missing layers in file 1            0
   Missing layers in file 2            0

706 features required comparison:
   Identical                         706
   Different                           0
   Unmatched                           0

Missing features in file 1             0
Missing features in file 2             0

Duplicated FSNs in file 1              0
Duplicated FSNs in file 2              0

 ELAPSED:    0 00:01:26.54  CPU: 0:01:16.78  BUFIO: 35  DIRIO: 1394  FAULTS: 194
5
.FILL
.LM +10

.P0; This example illustrates the result of comparing two files with identical
contents. Note that we do not know that the order of occurrence of features
within the file is the same, since comparison is by feature serial number
within each layer.

.LM -10
.NOFILL
.BLANK 2
.TP 5
$ ^*IDIFFERENCE TJI1 TJI3_<CR_>\*
File 1 is LSL750$DUA0:[LSL.IFF]TJI1.IFF;4
File 2 is LSL750$DUA0:[LSL.IFF]TJI3.IFF;1

Comparing with lookahead 20, point tolerances: default 0.03412, factor  1.00

HI (HIstory) entry missing in file 1
HI (HIstory) entry missing in file 2

Comparing layer 1
_*_*_*_*_*_*_*
Feature 1		 line feature
=======
CB data - differences for file 1
Point                X              Y
    2:       2.8696361       20.28903
    3:       4.7384071      28.668381
       ...equal
-------
CB data - differences for file 2
Point                X              Y
    2:       2.8729999      20.188999
    3:       4.7371998      28.669201
       ...equal

Summary of differences
_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*

1 layer was found
   Number of layers compared           1
   Missing layers in file 1            0
   Missing layers in file 2            0

9 features required comparison:
   Identical                           8
   Different                           1
   Unmatched                           0

How features differed by entry type:
   CB entries - geometry               1

Missing features in file 1             0
Missing features in file 2             0

Duplicated FSNs in file 1              0
Duplicated FSNs in file 2              0

 ELAPSED:    0 00:00:12.60  CPU: 0:00:05.82  BUFIO: 51  DIRIO: 178  FAULTS: 1480
.FILL
.LM +10

.P0; In this example, one feature is found to differ. Compare it with the next
example.

.LM -10
.NOFILL
.BLANK 2
.TP 5
$ ^*IDIFFERENCE TJI1 TJI3 /TOLERANCE=(DEFAULT=0.001)_<CR_>\*
File 1 is LSL750$DUA0:[LSL.IFF]TJI1.IFF;4
File 2 is LSL750$DUA0:[LSL.IFF]TJI3.IFF;1

Comparing with lookahead 20, point tolerances: default 0.00100, factor  1.00

HI (HIstory) entry missing in file 1
HI (HIstory) entry missing in file 2

Comparing layer 1
_*_*_*_*_*_*_*
Feature 1		 line feature
=======
CB data - differences for file 1
Point                X              Y
    2:       2.8696361       20.28903
    3:       4.7384071      28.668381
    4:        4.315804      32.933281
       ...equal
-------
CB data - differences for file 2
Point                X              Y
    2:       2.8729999      20.188999
    3:       4.7371998      28.669201
    4:           4.316        32.9333
       ...equal
=======
CB data - differences for file 1
Point                X              Y
    7:       5.1894598       39.32761
    8:       7.4283938       43.95649
       ...equal
-------
CB data - differences for file 2
Point                X              Y
    7:       5.1894999      39.330101
    8:       7.4278998        43.9566
       ...equal

Summary of differences
_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*

1 layer was found
   Number of layers compared           1
   Missing layers in file 1            0
   Missing layers in file 2            0

9 features required comparison:
   Identical                           8
   Different                           1
   Unmatched                           0

How features differed by entry type:
   CB entries - geometry               1

Missing features in file 1             0
Missing features in file 2             0

Duplicated FSNs in file 1              0
Duplicated FSNs in file 2              0

 ELAPSED:    0 00:00:13.93  CPU: 0:00:05.95  BUFIO: 64  DIRIO: 175  FAULTS: 1513
.FILL
.LM +10

.P0; In this example the user has specified the DEFAULT tolerance, to be used
for comparing real attributes that do not have an explicit interval in their
ACD definition. In the previous example the same two files were
compared using the default value of 0.03412, or 1/1000th of the maximum sheet
extent. In this example, several more points are discovered to be 'different',
due to the finer tolerance.

.LM -10

.!!! end of examples !!!


.PAGE
.BR
^*--------------------------------------------------------------------------------\*
.HL 2 ^*MESSAGES (general)\*

.P 0
IDIFFERENCE message output differs from the other IMP utilities in two ways:

.LIST
.LE; most of its messages are (by definition) informational, since it will
normally succeed in comparing two files
.LE; most of its messages are output as simple lines of text, rather than
in the %'utility'-'severity'-'message' format
.END LIST 0

.P0;Thus in the following sections, only those messages that are produced in
unusual circumstances, or that might be puzzling, are listed. Also, all
messages are presented as they would appear - that is, the full message
text is shown, including the %'utility'... message header when appropriate.


.PAGE
.BR
^*--------------------------------------------------------------------------------\*
.HL 2 ^*MESSAGES (informational)\*

.P0; Most IDIFFERENCE messages may be regarded as informational. Apart from
messages arising directly from the succesful comparison of two files, the
following may be produced:

.LM +4

.TP 5
.P-4;FSN 'integer' duplicated in file 'integer' - first occurrence ignored

.P0;^*Explanation:\*#Whilst scanning the current layer for features to be
compared, IDIFFERENCE has found a feature with the same FSN as a previous
feature in that layer. As the message indicates, the program will use this
latest feature for comparison.

.P0;^*User action:\*#None.

.TP 5
.P-4;_*_*COMPMD_*_* Type 'integer' MD in file 'integer' has invalid length

.P0;^*Explanation:\*#The program has attempted to read in an MD (Map
Descriptor) entry, but the entry is of the wrong length for the indicated
version (1 or 2) of MD. The entry will not be compared.

.P0;^*User action:\*#Investigate why the entry is the wrong length using
IPATCH - it may be that the MD type field is set incorrectly, since type#1 and
type#2 MD entries have different sizes. 

.TP 5
.P-4;_*_*GETCOD_*_* Unexpected end of file while searching for FS
.BR;##feature 'integer' in file 'integer'

.P0;^*Explanation:\*#IDIFFERENCE was looking for the FS entry of a feature
that only occurs in one of the IFF files, so that it could determine its
graphical type. Unfortunately, the feature did not contain an FS entry,
and IDIFFERENCE found the end-of-file instead. This indicates that the file
is incorrectly terminated in some way. IPATCH will not output a correct
message for this feature.

.P0;^*User action:\*#Use IPATCH to examine the end of the file, and use
IMEND or LITES2 to correct the file.

.TP 5
.P-4;_*_*GETEF_*_* Unexpected end of feature 'integer' in file 'integer'

.P0;^*Explanation:\*#IDIFFERENCE was scanning a feature before comparing
it, and found end-of-file before it had encountered an EF entry. IDIFFERENCE
will abandon comparison of this feature.

.P0;^*User action:\*#Use IPATCH to examine the end of the file, and use
IMEND or LITES2 to correct the file.

.TP 5
.P-4;_*_*GETEF_*_* Unrecognised code 'entry' in feature 'integer', file 'integer'

.P0;^*Explanation:\*#IDIFFERENCE found an IFF entry that it did not expect
whilst scanning a feature before comparing it. The entry will be ignored.

.P0;^*User action:\*#Dependent upon the entry reported. If you believe that
the entry is correct, and that IDIFFERENCE should compare it, then please
consult Laser-Scan. Otherwise, determine why the entry occurred within that
feature.

.TP 5
.P-4;_*_*GETEF_*_* more than 'integer' AC entries in feature 'integer' in
file 'integer'

.P0;^*Explanation:\*#When scanning a feature before comparing it, IDIFFERENCE
remembers all the feature's AC entries in an internal buffer. This message
indicates that that buffer is now full, and further ACs in that feature
will be ignored.

.P0;^*User action:\*#Consult Laser-Scan about increasing the size of the
internal buffer.

.TP 5
.P-4;_*_*READCB_*_* Too many rows (points) in 'entry' at 'address' in file 'integer'
(found 'integer', max is 200)

.P0;^*Explanation:\*#A CB (or ST or ZS) entry with more than 200 points has
been encountered. IDIFFERENCE will attempt to use the first 200 points for the
purposes of comparison - this is the standard maximum number of points in a
single coordinate block.

.P0;^*User action:\*#Use ITOTEXT and IFROMTEXT to correct this particular
file, and correct the program that produced the coordinate string.

.TP 5
.P-4;_*_*READIN_*_*  Non-empty feature with FSN 0 in file 'integer'
.BR;- feature ignored

.P0;^*Explanation:\*#IDIFFERENCE has encountered a feature with FSN 0, which
does not immediately end with an EF. Historically, features with FSN 0 are
'empty' features, used as place-holders for TC entries. The feature is ignored.

.P0;^*User action:\*#If the feature is meaningful, correct its FSN using
IPATCH, IRENUMBER, etc. If the feature is intended as an empty feature 0,
then use ITOTEXT and IFROMTEXT to remove its contents.

.TP 5
.P-4;_*_*READIN_*_*  Unexpected end-of-file in file 'integer'
.BR; scanning layer 'integer' which starts at 'address'
.BR; attempting to continue

.P0;^*Explanation:\*#This error should never occur - it probably reflects an
internal consistency error in the program.

.P0;^*User action:\*#Please report this problem to Laser-Scan with as many
details as possible.

.TP 5
.P-4;_*_*SCANSUB_*_* Unexpected end of feature 'integer' in file 'integer'

.P0;^*Explanation:\*#IDIFFERENCE was scanning a text component before comparing
it, and found end-of-file before it had encountered an EF entry. IDIFFERENCE
will attempt to compare as much of the component as it has read.

.P0;^*User action:\*#Use IPATCH to examine the end of the file, and use
IMEND or LITES2 to correct the file.

.TP 5
.P-4;_*_*SCANSUB_*_* Unknown code 'entry' in feature 'integer', file 'integer'

.P0;^*Explanation:\*#IDIFFERENCE found an IFF entry that it did not expect
whilst scanning a text component before comparing it. The entry will be ignored.

.P0;^*User action:\*#Dependent upon the entry reported. If you believe that
the entry is correct, and that IDIFFERENCE should compare it, then please
consult Laser-Scan. Otherwise, determine why the entry occurred within that
text-component.

.TP 5
.P-4;_*_*SCANSUB_*_* No CB entry in component

.P0;^*Explanation:\*#IDIFFERENCE has not found any coordinate entries in
a text component. This means that the component is erroneous. The program
will compare those entries it did find.

.P0;^*User action:\*#Investigate why the text component does not contain a CB
(or ST or ZS) entry. If the file was produced by a user written program,
correct the program; if it was produced by a Laser-Scan program, please consult
us with as many details as possible.

.TP 5
.P-4;_*_*SCANSUB_*_* Unexpected end-of-file in feature 'integer' in
file 'integer'

.P0;^*Explanation:\*#IDIFFERENCE was scanning a text component to locate
all of its entries, and found end-of-file before finding an EF. THe program
will attempt to continue comparison, as if it had found and EF.

.P0;^*User action:\*#Use IPATCH to examine the end of the file, and use
IMEND or LITES2 to correct the file.

.TP 5
.P-4;_*_*SCANTS_*_* Unexpected end of file scanning feature 'integer' in
file 'integer'

.P0;^*Explanation:\*#IDIFFERENCE was scanning a composite text to locate
all of the TS entries, and found end-of-file before finding an EF. THe program
will attempt to continue comparison, as if it had found and EF.

.P0;^*User action:\*#Use IPATCH to examine the end of the file, and use
IMEND or LITES2 to correct the file.

.TP 5
.P-4;_*_*SCANTS_*_* more than 'integer' TS entries in feature 'integer' in file
'integer'

.P0;^*Explanation:\*#When comparing composire text features, IDIFFERENCE
remebers the start of each text component in an internal buffer. This error
indicates that the program has found more text components than it can remember.
It will compare the components that it has room for. 

.P0;^*User action:\*#Consult Laser-Scan about increasing the size of the
internal buffer.

.TP 5
.P-4;_*_*WRPLOT_*_* Layer mismatch

.P0;^*Explanation:\*#This message indicates that an error has occurred whilst
outputting data to one of the IFF plot files. It should never occur, and
indicates that the program has become confused as to which layer it is
outputting - an internal array has not been sorted correctly. IDIFFERENCE
will continue outputting data.

.P0;^*User action:\*#Please report this problem to Laser-Scan, with as much
information as possible.

.LM -4

.PAGE
.BR
^*--------------------------------------------------------------------------------\*
.HL 2 ^*MESSAGES (error)\*

.P 0
These messages indicate an error in processing which has caused the program to
terminate. The normal cause is an error related to command line processing and
file manipulation. 

.LM +4

.TP 5
.P-4;%IDIFF-E-2NDNAME, cannot parse file 'file-spec' to deduce a second
file

.P0;^*Explanation:\*#If the user has only specified the master file-spec,
then IDIFFERENCE will try to compare it with the previous version of the
file. This message indicates that something went wrong with that process,
and will be accompanied by appropriate LSLLIB error messages.

.P0;^*User action:\*#Dependent upon the associated messages.

.TP 7
.P-4;%IDIFF-E-LOOKAHEAD, /LOOKAHEAD value 'integer' should be in range 1
to 'integer'

.P0;^*Explanation:\*#An invalid number was specified with the /LOOKAHEAD
qualifier.

.P0;^*User action:\*#Specify a value in the range shown by the message.

.TP 7
.P-4;%IDIFF-E-NEGTOL, /TOLERANCE value 'real' should not be negative

.P0;^*Explanation:\*#A negative tolerance value has been specified with
the /TOLERANCE qualifier. This does not make sense.

.P0;^*User action:\*#Specify a non-negative value.

.TP 5
.P-4;%IDIFF-E-NOPREV, cannot produce the previous version of file 'file-spec'

.P0;^*Explanation:\*#This message is essentially the same as the
%IDIFF-E-2NDNAME message above - the same comments apply.

.P0;^*User action:\*#As for the 2NDNAME error.

.TP 5
.P-4;%IDIFF-E-NORANGE, cannot compare IFF files without RA entries

.P0;^*Explanation:\*#Since IDIFFERENCE may use the range entries to establish
a tolerance for comparing real numbers, it requires that all files to be
compared contain a range. The most likely cause of this error is an attempt
to compare two Laseraid patch files.

.P0;^*User action:\*#Do not use IDIFFERENCE on these files. If they are indeed
patch files, use ITOTEXT and compare the resultant text files with DIFFERENCE.

.TP 5
.P-4;%IDIFF-E-OUTOPEN, error opening text output file 'file-spec'

.P0;^*Explanation:\*#The program could not open the /OUTPUT file. The LSLLIB
messages output with this error should clarify the problem.

.P0;^*User action:\*#Dependent upon the LSLLIB messages.

.TP 5
.P-4;%IDIFF-E-PLOTCRE, cannot parse plot IFF file spec 'file-spec'

.P0;^*Explanation:\*#To produce a file-spec for the /PLOT IFF files,
IDIFFERENCE must parse the master file-spec. This message indicates that
it failed to do so. Associated LSLLIB error messages should clarify the
situation.

.P0;^*User action:\*#Dependent upon the LSLLIB messages.

.TP 5
.P-4;%IDIFF-E-PLOTSPEC, cannot parse file-spec 'file-spec' to produce plot
IFF file-spec

.P0;^*Explanation:\*#To produce a file-spec for the /PLOT IFF files,
IDIFFERENCE adds four characters to the end of the file name. This message
indicates that it could not do this. Associated LSLLIB messages should help
clarify the situation, but it is probable that the original file name was
too long to have four characters added.

.P0;^*User action:\*#Dependent upon the LSLLIB messages.

.TP 5
.P-4;%IDIFF-E-SCANCB, error scanning CB entries in feature 'integer' in file 'integer'

.P0;^*Explanation:\*#Before comparing them, IDIFFERENCE scans the CB entries
for each feature or text component to work out how many columns are present,
what they are, etc. This message indicates that the scanning process has
failed. It will be followed by another message indicating the nature of the
problem.

.P0;^*User action:\*#Dependent upon the following messages.

.LM -4

.PAGE
.BR
^*--------------------------------------------------------------------------------\*
.HL 2 ^*MESSAGES (fatal)\*

.P 0
These messages indicate that the program has failed in some catastrophic
manner. IDIFFERENCE fatal error messages will always be followed by one
of the following sequences of text:

.LM +8
.NOFILL

_*_*_* FATAL EXIT _*_*_*

This is almost certainly due to a bug in the program.
Please report it to Laser-Scan with as many details as possible

.P -8
or
.NOFILL

_*_*_* FATAL EXIT _*_*_*

This is due to some limitation in the program.
If this causes serious problems, consult Laser-Scan about increasing the limit.
.FILL
.LM -8

.LM +4

.TP 5
.P-4;%IDIFF-F-GETNOV, cannot find next layer - DIFNOS is 'integer'

.P0;^*Explanation:\*#An internal error has occurred in the mechanism which
locates the next layer in the IFF file.

.P0;^*User action:\*#Report the problem to Laser-Scan, with as much information
as possible.

.TP 5
.P-4;%IDIFF-F-MAXNOS, more than 'integer' NO entries, after 'address' in
file 'integer'

.P0;^*Explanation:\*#The specified input file contains more NO (start
of layer) entries than will fit into the internal buffers. This does not
necessarily mean that the file contains too many ^*layers\*, but rather
that it is too fragmented.

.P0;^*User action:\*#Use IMERGE to consolidate the layers. If the problem
continues, then either there is a bug in the program, or the IFF file has
a very large number of layers. In either case, consult Laser-Scan.

.TP 5
.P-4;_*_*'name'_*_* lost position in input IFF file 'integer' at address 'address'
.BR;abandoning comparison

.P-4;_*_*'name'_*_* lost position in output IFF file 'file-spec' at address 'address'
.BR;abandoning comparison

.P-4;_*_*'name'_*_* lost position in IFF file on lun 'integer' at address 'address'
.BR;abandoning comparison

.P0;^*Explanation:\*#IDIFFERENCE was trying to move to a known position
in the relevant IFF file, and for some reason arrived at the wrong place.
This represents a bug in the program, specifically a problem in the IDIFFERENCE
routine 'name'.

.P0;^*User action:\*#Report the problem to Laser-Scan, with as much information
as possible.

.TP 5
.P-4;_*_*GETEF_*_* Entry read as 'entry' - should be seen as a CB

.P0;^*Explanation:\*#All ST and ZS entries should be translated into the
corresponding CB entry by the IFFLIB library before reaching IDIFFERENCE
itself. This message indicates that the translation has failed.

.P0;^*User action:\*#Report the problem to Laser-Scan, with as much information
as possible.

.TP 5
.P-4;_*_*READIN_*_* found FSN 'integer' in file 'integer' - bigger than 65535 !

.P0;^*Explanation:\*#It should not be possible for the program to encounter
an FSN of this size - something has gone wrong internally.

.P0;^*User action:\*#Report the problem to Laser-Scan, with as much information
as possible.

.TP 5
.P-4;_*_*READIN_*_* found FSN 'integer' in file 'integer' - less than zero !

.P0;^*Explanation:\*#It should not be possible for the program to encounter
a negatibe FSN - something has gone wrong internally.

.P0;^*User action:\*#Report the problem to Laser-Scan, with as much information
as possible.

.TP 5
.P-4;_*_*SCANSUB_*_* Entry read as 'entry' - should be seen as a CB

.P0;^*Explanation:\*#All ST and ZS entries should be translated into the
corresponding CB entry by the IFFLIB library before reaching IDIFFERENCE
itself. This message indicates that the translation has failed.

.P0;^*User action:\*#Report the problem to Laser-Scan, with as much information
as possible.

.LM -4


.PAGE
.BR
^*--------------------------------------------------------------------------------\*
.HL 2 ^*MESSAGES (other)\*

.P 0
In addition to the above messages which are generated by IDIFFERENCE itself,
other messages may be produced by the command line interpreter (CLI) and by
Laser-Scan libraries. In particular, messages may be generated by the IFF
library. These are introduced by '%IFF' and are documented in the IFF library
users' guide. In most cases IFF errors will be due to a corrupt input file, and
this should be the first area of investigation. If the cause of the error
cannot be traced by the user and Laser-Scan are consulted, then the input file
should be preserved to facilitate diagnosis. 
 
