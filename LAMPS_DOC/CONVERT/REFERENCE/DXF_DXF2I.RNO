
.SUBTITLE UTILITY DXF2I
.PAGE
.B
^*--------------------------------------------------------------------------------\*
.HL 1 ^^^*UTILITY DXF2I\*

^*--------------------------------------------------------------------------------\*
.HL 2 ^^^*FUNCTION\*
.FILL
.LM +10
.P 0;DXF2I is an Auto-CAD DXF ASCII format to IFF converter. It produces a
standard IFF file with output directed to disc. For a particular DXF 
file, it may instead produce a basic parameter file to be used in future 
runs of DXF2I on this and similar DXF files.

.BLANK
.NO JUSTIFY
.NOFILL
.LM -10
^*--------------------------------------------------------------------------------\*
.HL 2 ^^^*FORMAT\*
.LM +10
.NO FILL

$ DXF2I   input-file-spec   [output-file-spec]

.BLANK
.NOFILL
^*Command qualifiers                      Defaults\*

/[NO]ABSOLUTE                           /NOABSOLUTE
/FRT=file-spec                          No defaults
/[NO]HEADER                             /NOHEADER
/[NO]LOG                                /NOLOG
/PARAMETER=file-spec                    No defaults
/[NO]POINTSIZE                          /NOPOINTSIZE
/[NO]QUIET                              /NOQUIET
/[NO]SCAN=file-spec                     No defaults
.FILL

.BLANK

.LM -10
^*--------------------------------------------------------------------------------\*
.HL 2 ^^^*PROMPTS\*
.LM +10
.NO FILL

_Input DXF filename  :   input-file-spec
_Output IFF filename :   output-file-spec/qualifiers

.LM -10
^*--------------------------------------------------------------------------------\*
.HL 2 ^^^*PARAMETERS\*
.LM +10
.P -10;input-file-spec 
.JUSTIFY
.P -2;- specifies the DXF file which is to be converted into IFF format. Any
part of the file name which is not specified will be taken from the default
specification 'LSL$DXF:DXF.DXF'. 

.TP 10
.P -10;output-file-spec
.P -2;- specifies the IFF file which is to be created. Any part of the file
name which is not explicitly given will be taken from the default
specification 'LSL$IF:IFF.IFF'. 

.P 0; If the /SCAN qualifier is used to produce a default parameter file, with
no IFF output, the output IFF filespec parameter is not required. (In this case
the /PARAMETER qualifier is also forbidden).

.P -2;##Note that both logical names, 'LSL$IF:' and 'LSL$DXF:' must
be defined, or overridden.
.LM -10
.BLANK
.TP 12
.P 0
^*--------------------------------------------------------------------------------\*
.HL 2 ^^^*COMMAND QUALIFIERS\*
.LM +10

.TP 8
.P -10;/[NO]ABSOLUTE
.P -2;-#enables the output of DXF coordinates as local values in the IFF file
with respect to the origin contained in the $EXTMIN header variable.
The default action is to output the DXF coordinates as local IFF coordinates.

.TP 8
.P -10;/FRT=file-spec
.P -2;-#specifies an FRT file containing definitions of feature codes to be 
read in. These definitions will then be used to identify the features
read in the IFF file. The default is LSL$FRT:DXF.FRT. This qualifier is 
mandatory.

.TP 8
.P -10;/[NO]HEADER
.P -2;-#enables the creation of an area feature in layer 0 from the DXF file 
header variables $EXTMIN/$EXTMAX (also defining the IFF range) to which 
certain DXF header variables are output to text fields of AC entries.

.TP 8
.P -10;/[NO]LOG
.P -2;-#enables a range of informational messages concerning the progress of the
data translation to be displayed at the terminal. 

.TP 8
.P -10;/PARAMETER=file-spec
.P -2;-#specifies the parameter file which defines the 
transformation of entity types, line type/text style/block name and colour in
DXF to feature codes in the IFF file.
It also defines the transformation of layer names in DXF to layer numbers in
IFF.

The parameter file-spec is parsed from the default 
LSL$LOOKUP:DXF.PAR. Any part of the file name which is not specified
by the /PARAMETER qualifier will be taken from the above default 
specification.

This qualifier is forbidden with the /SCAN qualifier.


.TP 8
.P -10;/[NO]POINTSIZE
.P -2;-#specifies that the DXF text heights (in mm.) are converted to point
sizes for the TH (text height) entries, instead of the usual mm./100 for the 
default of /NOPOINTSIZE.

.TP 8
.P -10;/[NO]QUIET
.P -2;-#enables the suppression of a range of warning messages output during
the data translation, eg. RANGEUPDATE warning that a coordinate exceeded the 
header range, MISENTCOL warning about the absence of a colour entry in an 
entity, COLNOTMAT warning that the colour given in the parameter file does not 
match that of the specified FC in the FRT file, and DEFLINTYP and DEFTEXSTY 
indicating that a default line type (from $CELTYPE or 'CONTINUOUS'), text 
style (from $TEXTSTYLE or 'STANDARD') or layer name (from $CLAYER)
is being used, and should be present in the parameter file, or a default text
height (from $TEXTSIZE or 5 mm.) will be used.


.TP 8
.P -10;/SCAN=file-spec
.P -2;-#specifies an output parameter file to be created from the DXF file,
with default values for the IFF settings. This scan file can then be used as
the parameter file for further runs of DXF2I with the specified FRT file.

The scan file-spec is parsed from the default 
LSL$LOOKUP:DXF.SCAN. Any part of the file name which is not specified
by the /SCAN qualifier will be taken from the above default specification.

This qualifier is forbidden with the /PARAMETER qualifier, or with an output
IFF file parameter on the command line.

.LM -10

.TP 10
.P 0
^*--------------------------------------------------------------------------------\*
.NOKEEP
.FILL
.JUSTIFY
.HL 2 ^^^*DESCRIPTION\*
.LM +10

.P 0
After the command line has been decoded, relevant files will be opened.
The mode of operation of DXF2I depends mainly on the presence of the /SCAN
qualifier, ie. whether to create an output IFF file using an existing parameter
file, or to create a default parameter (or scan) file from the contents of the
DXF file. The /SCAN mode of operation is described in detail later. The 
following description relates to the normal operation of creating an IFF file.

.P 0;
The program first scans through the parameter file to extract the definitions
of the lookup mapping between the two formats. Lookup mapping of IFF/DXF
layers and that of IFF features/DXF entities will then be defined and 
stored. If a /LOG qualifier is included, informational messages will be
displayed to inform the user of the number of layers, features/entities,
symbols/blocks, line types and text styles found in the parameter file. 
Any illegal command entry will cause a warning message to be issued. 
Other errors detected at this stage will cause the program to abort. 

.P 0
After the mapping between the two formats is successfully defined, the 
program then accesses the Feature Representation Table (FRT) file to check
for the validity of Feature Code (FC) and Colour entries in the ENTITY 
lookup table. Again, the program will warn if any of the feature codes
specified in the parameter file cannot be found in the FRT file.

Otherwise, the Graphical Type (GT) of the feature code will be stored for later 
matching purposes. The program will also cross check the colours specified
in the parameter file and those found in the FRT file. In case of any
difference, a warning message will be displayed. Users should note that
colours explicitly specified in the parameter file will have a higher
priority over those in the FRT file for a given feature code.

.P 0
The next stage of the conversion is the scanning of the HEADER section 
in the DXF file. The entries $EXTMIN and $EXTMAX are used
to set up the 'RA' range and 'CP' entries of the IFF file. The range
values will be updated by the coordinate values from the ENTITIES or BLOCKS 
sections as they are encountered in the DXF file (with a warning message), 
and the 'RA' entry updated at the end of the program run. 
The $CECOLOR entry (if there is one) will be read for any colour by layer 
flag, and is stored for later use (see below), and the @CELTYPE entry for any
linetype by layer flag. Any other default settings are stored.

.P 0
If the DXF file for any reason does not contain a HEADER section, default 
header IFF entries will be written and a suitable warning message given.
This means that any parameter file will be meaningless for a DXF file that
was supposed to be colour-by-layer, for example, as the layers and flags will
be missing.

.P 0
By default, a type 2 map descriptor entry (MD2) is created with all fields 
unset, with a map scale MD2SCL field set to 1.0 and the MD2LOC local origin
set to (0,0).

.P 0
If the /HEADER qualifier was given, a bounding area 
feature is created in layer 0 with FC 0, FSN 1 from the DXF header extents, and
certain header variables are output to AC entries for this feature. The header
variables transferred to AC's (type 6) at present are:

.BLANK
.BLANK
.NOFILL


      $CECOLOR    Entity colour number: 0 = BYBLOCK, 256 = BYLAYER
      $CELTYPE    Entity linetype name or BYBLOCK or BYLAYER
      $CLAYER     Current layer name
      $LUNITS     Units format for coordinates and distances
      $LUPREC     Units precision for coordinates and distances
      $PDMODE     Point display mode
      $PDSIZE     Point display size
      $TDCREATE   Date/time of drawing creation
      $TDINDWG    Cumulative editing time for this drawing 
      $TDUPDATE   Date/time of last drawing update
      $TDUSRTIMER User elapsed timer
      $TEXTSIZE   Default text height
      $TEXTSTYLE  Current text style name
      $UCSNAME    Name of current UCS
      $UCSORG     Origin of current UCS (in WCS)
      $UCSXDIR    Direction of current UCS X axis (in World coords)
      $UCSYDIR    Direction of current UCS Y axis (in World coords)

.FILL
.BLANK

.P 0
The text fields of the AC entries will be in the following format:

.BLANK
.BLANK
.NOFILL

     '$CECOLOR 256'
     '$TEXTSIZE 3.0'
     '$TEXTSTYLE STANDARD'
     '$UCSXDIR 1.0 0.0 0.0'

.FILL
.BLANK

.P 0
If it is desired to enter different HEADER values into DXF with I2DXF, this
format must be observed, with spaces between the variable name and its value 
or values.

.P 0
The next section to be scanned is the TABLES section. At present, only three
tables, LTYPE, LAYER and STYLE, are used.
Data from the parameter file is used to check 
if there are any undefined LTYPE, LAYER or STYLE entries, with warnings given
if there were any absences. If the entities
are coloured or line-typed by layer, the colour index (62 group) and line type
(6 group) of the LAYER table will be stored. Any error encountered at this 
stage will cause the program to abort.

.P 0
The next section to be scanned is the BLOCKS section. Each BLOCK has 
a unique name and is referenced by DXF INSERT entities. These BLOCK names 
should be referenced to symbol FC's in the parameter file.
The program will cross check these BLOCK names found against
those entries in the parameter file, with warnings given
if there were any absences. 

.P 0
The BLOCKS may be composed of entities, building
up a complex symbol, referenced to their local coordinates, and would be
output at the defining location and scale of the INSERT entity later.
These BLOCKS may also be composed of other BLOCKS in a hierarchy of symbol 
definitions. Because there is at present no mechanism in DXF2I of storing 
these complex arrangements of entities in a symbol, the BLOCKS entities may be
output to the IFF file as they are read here as if they were normal entities. 
This is achieved by specifying an EXPAND entry in the parameter file for the 
BLOCK (symbol) name, together with x,y,z offsets and scalings used to convert
the internal symbol coordinates to world coordinates. These would be the
INSERTion point coordinates for a single level of BLOCK nesting. For a 
multiply nested hierarchy of blocks, these offsets and scalings should 
represent the combination of the individual INSERT positions.

.P 0
If the offsets or scalings in the DXF file are not known, put an EXPAND entry
in the  parameter file with default offsets of 0 and default scalings of 1, 
together with an INSERT entry for all known BLOCKS in the file, and wait for 
the warning messages DIFFEXPOFF, DIFFEXPZOFF, DIFFEXPSCALE or DIFFEXPZSCALE 
which will give out any offsets and scalings that are different from the 
defaults.

.P 0
The whole symbol may still be represented by an IFF symbol with an INSERT
symbol__name  in the parameter  file to derive the FC in the normal way.

.P 0
For complex hierarchies of BLOCKS, several symbols may be output to the IFF
file, representing different levels of the hierarchy at each INSERT point,
and may it may be better to leave out the higher levels from the parameter 
file which will only generate the message UNDEFBLK, without processing the
symbol, relying on the lower level BLOCK entities being output as features
through the EXPAND mechanism.
This is illustrated in the example parameter file below.

.P 0
It is possible for entities to be coloured BYBLOCK. This is not supported by
DXF2I, and is overridden by any colouring by layer. It is also possible to 
set the line type BYBLOCK, and in this case the line type 'BYBLOCK' must be
present in the parameter file for a FC match to be found. Here again the layer
colour (if any) will override the colour entry of '0' (equivalent to BYBLOCK).


.P 0
The ENTITIES section contains the graphical data of the 
drawing. The graphical entities supported by DXF2I are LINE, POINT, CIRCLE, 
ARC, TRACE, SOLID, TEXT, INSERT and POLYLINE. 
The program then reads the DXF input file sequentially to extract each
entity's type, name, colour and, according to the entity types, their
other individual characteristics. If the entities are coloured by LAYER, 
the colour index value of the entity's resident layer will override its 
individual colour index, and the layer colour must be present in the parameter
file for the particular entity type/line type combination for a IFF feature 
code to be found.

.p 0
If the group 62 entity colour field is absent without colouring by layer, the
feature code will be derived 
from the parameter file using the first occurrence of entity type and line 
style, so that the coordinate data may still be transferred.

.P 0
Text heights in mm. in the DXF file are converted to the default units of 
mm./100 for TH entries, unless the /POINTSIZE qualifier is given, when they
will be converted into point sizes.

.P 0
If present, the group 30 z coordinate fields will be converted into ZS 
entries. Any group 38 elevation fields will be converted to type 3 AC
entries.

.P 0
Users are strongly advised to refer to 'DATA PREPARATION' section 
about the mapping restrictions from DXF entities to IFF features.

.P 0
Informational messages about the conversion will be displayed at various 
stages of the process provided the /LOG qualifier is included in the user
command line. Some warning messages may be turned off with the /QUIET 
qualifier.

.P 0
In the /SCAN mode of operation of DXF2I, a default parameter file is to be
created from the DXF file, and no output IFF file created.
/SCAN is intended to be of use in cases where a DXF file has been received
without a description of the entities or layers within it. It allows the 
operator to produce a useable template parameter file.

.P 0;
The messages output are essentially the same as for a normal run of DXF2I,
mainly to inform on the validity of the input DXF file, without the output of
any concerning the mismatch of entities to parameter file. Apart from the 
/SCAN = scan-file, the command line is the same as for
the normal run of DXF2I except that the output IFF file is not required, and 
the /PARAMETER file qualifier is forbidden. The FRT file must still  be provided
for the scan to find a suitable feature code to be output to the SCAN file.

.P 0;
After conversion using this template, the resultant IFF file can be viewed
using LITES2. The template file can then be edited to choose more appropriate
feature codes, and the DXF data converted again to obtain the required IFF file.
When /SCAN has been used on an unknown DXF file, it is important to consider 
the scale of the data, as this affects the representation. Program IINFO in 
the IMP package will report the range of coordinates encountered, and
programs IPATCH or ITRANS/DESCRIPTOR in the IMP package can be used to set the 
scale  in the IFF MD entry, which will be used by display programs such as
LITES2. Command SHOW SCALE in LITES2 is useful to check that the scale is set
sensibly (eg. that "Extent of working area" is a valid paper size).

.P 0;
First the DXF layer names are read from the TABLES section LAYERs or BLOCKs
and output to the SCAN file, with the IFF layer number increased by one for 
each output. Then the ENTITIES section is read. For each combination of entity
type, line type/text style/block name and colour, a new line is output to the
SCAN file with a suitable feature code obtained from the FRT file (the first
feature code in the file for the relevant graphical type contained in the FRT
file). If there is no suitable FC available, a value of -1 will be used to flag
an unset FC value, which must be edited before the scan file can be used as the
parameter file for subsequent normal runs of DXF2I on this DXF file.

.P 0;
Each entity line and layer line output to the SCAN file is stored for later
comparison to ensure that they are all unique combinations. A message
TOOMNYENTS or TOOMNYLAYS will be
output if either array limit is about to be exceeded, after which no more 
comparisons are possible and the entity lines are output regardless of their
uniqueness.

.P 0;
One important message to be noted is ERRSCANLAY, where a
layer is referenced in the entities section that was not present in the LAYER 
TABLEs or BLOCKs sections. As the program is now writing the entities to the
scan file, it is too late to output the missing layers, and the user must edit
the scan file to replace these missing layers before using it as the parameter
file for the DXF file.

.P 0
.LM -10

.B

.PAGE
.TEST PAGE 12
^*-------------------------------------------------------------------------------\*
.NOFILL
.KEEP
.HL 2 ^^^*EXAMPLE PARAMETER FILE\*

.FILL
.P 0
This example parameter illustrates the use of INSERT entities for a complex
hierarchy of BLOCKS, avoiding the output of a symbol ay every INSERT, relying
only on the output of the lower level BLOCK entities to define the features.

.NOFILL

!
!*************************************************************************************************************
!*************************************************************************************************************
!***Parameter lookup file to transform a file_spec.dxf to a file_spec.iff*******************
!


!*** NOTE that COLOUR-BY-LAYER overrides COLOUR-BY-BLOCK, and the layer colours
!*** as defined in the LAYER TABLES must be used for the ENTITIES to FC section
!*** of this parameter file 
!
!*** Some entities use the BYBLOCK linetype which must also be present with the
!*** respective layer colour
!
!*************************************************************************************************************
!*************************************************************************************************************
!
!	DXF_LAYER_NAME		IFF_LAYER_ID
!
LAYER	0				0
LAYER	8				8
LAYER	FRAME				1
LAYER   GRID				2
LAYER   SPOT-LEVEL-MARKERS		3
LAYER   GROUND-MODEL			4
LAYER   SPOT-LEVELS			5
LAYER   PROMINENT_CONTOUR-LEVELS	6
LAYER   CONTOUR-LEVELS			7
!
!ENTITY_LOOKUP_TABLE
!					FRT
!	ENTITY_TYPE	NAME		COLOUR	IFF_FC
!
ENTITY  POLYLINE	CONTINUOUS	1	1
ENTITY  LINE		CONTINUOUS	6	2
ENTITY  POINT				2	5
ENTITY  TEXT		STANDARD	4	11
!
ENTITY  LINE		CONTINUOUS	1	1
!
!
! for CONTOURS.DXF
!
! prominent contour levels
ENTITY  TEXT		STANDARD	7	11
!
! contour levels/grid
ENTITY  TEXT		STANDARD	8	40
!
! contours/frame
ENTITY  LINE		BYBLOCK		7	1
ENTITY  LINE		CONTINUOUS	7	1
ENTITY  POLYLINE	BYBLOCK		7	1
ENTITY  POLYLINE	CONTINUOUS	7	1
!
! grid
ENTITY  POLYLINE	CONTINUOUS	8	2
ENTITY  LINE		CONTINUOUS	8	2
!
! spot level points
ENTITY  POINT				7	5
!
! spot levels
ENTITY  TEXT		STANDARD	1	50
!
! spot level markers - Use symbol, do not EXPAND
ENTITY  INSERT	        CENTRED		9	8
!ENTITY  EXPAND	        CENTRED		0 0 0 	1 1 1
!
!
! do not expand CONTOURS ( = PROMINENT,MAJOR and MINOR-CONTOURS INSERTS) 
!ENTITY  INSERT	     	      CONTOURS	255	20
!ENTITY  EXPAND	              CONTOURS	-6004 -1011 0 20 20 1
!
! expand SPOT-LEVEL-POINTS to POINT entities
!ENTITY  INSERT	     SPOT-LEVEL-POINTS	255	31 
ENTITY  EXPAND	     SPOT-LEVEL-POINTS	-6004 -1011 0 20 20 1
!
!
! give the BLOCK names to be referenced by later INSERT entities
! the INSERT entities are translated by DXF2I as symbols, and 
! translating all these would leave a lot of symbols at (0,0)
!
! EXPAND all contours
!
!ENTITY  INSERT		 25_M-CONTOURS	7	33
ENTITY  EXPAND		 25_M-CONTOURS	-6004 -1011 0 20 20 1

!ENTITY  INSERT		 50_M-CONTOURS	7	5
ENTITY  EXPAND		 50_M-CONTOURS	-6004 -1011 0 20 20 1

!ENTITY  INSERT		200_M-CONTOURS	7	5
ENTITY  EXPAND		200_M-CONTOURS	-6004 -1011 0 20 20 1

!ENTITY  INSERT		225_M-CONTOURS	7	5
ENTITY  EXPAND		225_M-CONTOURS	-6004 -1011 0 20 20 1

!ENTITY  INSERT	    PROMINENT-CONTOURS	7	34
!ENTITY  EXPAND	    PROMINENT-CONTOURS	-6004 -1011 0 20 20 1
!
!
!ENTITY  INSERT		 30_M-CONTOURS	7	33
ENTITY  EXPAND		 30_M-CONTOURS	-6004 -1011 0 20 20 1

!ENTITY  INSERT		 40_M-CONTOURS	7	5
ENTITY  EXPAND		 40_M-CONTOURS	-6004 -1011 0 20 20 1

!ENTITY  INSERT		220_M-CONTOURS	7	5
ENTITY  EXPAND		220_M-CONTOURS	-6004 -1011 0 20 20 1

!ENTITY  INSERT		230_M-CONTOURS	7	5
ENTITY  EXPAND		230_M-CONTOURS	-6004 -1011 0 20 20 1

!ENTITY  INSERT	        MAJOR-CONTOURS	7	34
!ENTITY  EXPAND	        MAJOR-CONTOURS	-6004 -1011 0 20 20 1
!
!
!ENTITY  INSERT		 35_M-CONTOURS	7	33
ENTITY  EXPAND		 35_M-CONTOURS	-6004 -1011 0 20 20 1

!ENTITY  INSERT		 45_M-CONTOURS	7	5
ENTITY  EXPAND		 45_M-CONTOURS	-6004 -1011 0 20 20 1

!ENTITY  INSERT		215_M-CONTOURS	7	5
ENTITY  EXPAND		215_M-CONTOURS	-6004 -1011 0 20 20 1

!ENTITY  INSERT		235_M-CONTOURS	7	5
ENTITY  EXPAND		235_M-CONTOURS	-6004 -1011 0 20 20 1

!ENTITY  INSERT		MINOR-CONTOURS	7	34
!ENTITY  EXPAND	        MINOR-CONTOURS	-6004 -1011 0 20 20 1

!
!
! The BLOCK structures in CONTOURS.DXF
!
! Final ENTITIES contain INSERTS for 'CONTOURS' BLOCK
!                                and 'SPOT-LEVEL-POINTS' BLOCK
!                                and frame/grid ENTITIES
!
!
!			    CONTOURS
!				|
!				|
!   MINOR-CONTOURS       MAJOR-CONTOURS   PROMININENT-CONTOURS
!	  |			|		|
!	  |			|		|
!    35_M-CONTOURS	  30_M-CONTOURS	     25_M-CONTOURS
!
!
! Contours consist of TEXT in their respective 'CONTOUR-LEVEL' layer
! and POLYLINES in layer '0'
!
! CENTRED05 = symbol at INSERT
!
!
!

.PAGE
.TEST PAGE 12
^*-------------------------------------------------------------------------------\*
.NOFILL
.KEEP
.HL 2 ^^^*EXAMPLES\*
.NO FILL
.BLANK
$ ^*DXF2I CONTOURS CONTOURS2/FRT=TERRAIN/PARAMETER=TEST.DXF2I_PAR\*
 ELAPSED: 00:01:32.06  CPU: 0:00:53.65  BUFIO: 29  DIRIO: 126  FAULTS: 108 
$
.B
.JUSTIFY
.LM +10
.FILL
.P 0;This example demonstrates the use of DXF2I. DXF file LSL$DXF:CONTOURS.DXF
has been successfully processed and an IFF format disk file LSL$IF:CONTOURS2.IFF
has been produced.
.NOFILL
.LM -10


.NO FILL
.BLANK
$ ^*DXF2I\*
 __Input#DXF#file#:#^*HERE:CULTURE/LOG/FRT=HERE:CITY\*
 __Output#IFF#file:#^*HERE:CULTURE2/PARAMETER=HERE:TRANSFORM.DXF__PAR\*
 %DXF2I-I-FRTOPNREAD, FRT file: HERE:CITY.FRT opened for read
 %DXF2I-I-IFFOPNWRIT, IFF file: HERE:CULTURE2.IFF opened for write
 %DXF2I-I-DXFOPNREAD, DXF file: HERE:CULTURE.DXF opened for read
 %DXFPAR-I-OPNPAR, PARAMETER file: HERE:TRANSFORM.DXF__PAR opened for read
 %DXFPAR-I-LAYERFND, LAYERs found: 3
 %DXFPAR-I-ENTITYFND, ENTITYs found: 13
 %DXFPAR-I-BLOCKFND, BLOCK(symbol)s found: 2
 %DXFPAR-I-LTYPEFND, LTYPEs found: 4
 %DXFPAR-I-STYLEFND, STYLEs found: 3
 %DXF2I-I-RDHDSC, Reading HEADER of DXF file
 %DXF2I-I-MAPEXTENT, Map extents: X 100.0 2000.0, Y 10.0 3000.0
 %DXF2I-I-RDTBSC, Reading TABLES of DXF file
 %DXF2I-I-RDBKSC, Reading BLOCKS of DXF file
 %DXF2I-I-RDENSC, Reading ENTITIES of DXF file
 %DXF2I-I-FEAFND, number of ENTITIES found: 123
 %DXF2I-I-PROCSUCC, number of entities SUCCESSFULLY processed: 123
 ELAPSED: 00:01:32.06  CPU: 0:00:53.65  BUFIO: 29  DIRIO: 126  FAULTS: 108 
$
.B
.JUSTIFY
.LM +10
.FILL
.P 0;This example demonstrates the use of DXF2I with /LOG qualifier to 
enable more information about the conversion to be displayed. It also 
demonstrates the use of a pre-defined logical name 'HERE:' to re-direct 
input/output. 
.NOFILL
.LM -10



.!* include the error messages for this program

.REQUIRE	"DXF_DXF2IMSG.RNO"


