
.SUBTITLE DATA PREPARATION
.PAGE
.TP 10
.P 0
^*--------------------------------------------------------------------------------\*
.HL 1 ^^^*DATA PREPARATION\*

.LM +10

.TP 10
.P 0
In order to facilitate a flexible transfer of data between IFF and DXF
formats, lookup tables are used. These determine how IFF features are
translated into DXF entities and vice versa. 
It will be possible to use the same lookup table for
both programs if a one-to-one translation is maintained.

.P 0
It is also possible to use the same lookup table to define a conversion
between DXF text height (in mms.) and point sizes.

.TP 10
.P 0
^*----------------------------------------------------------------------\*
.HL 2 ^^^*The I2DXF and DXF2I parameter file

.P 0
The parameter file contains two lookup tables :-

.BLANK
.LIST 0
.DISPLAY ELEMENTS LL,")"
.LE; the layer description table
.LE; the entity description table
.LE; the text size description table
.END LIST 0

.P 0
Each line of a particular table is prefixed with a command which identifies
the line as belonging to that table. The lines are free-format, so the order
of entries matters, but the actual position of entries on the line is not
important. Commands may be in upper or lower case.

.P 0
A maximum of 10000 entries will be allowed per parameter file.

.P 0
Any text starting with the "!" character is regarded as a comment, and is 
ignored. Comments can appear on the same lines as commands, or on 
separate lines.

.TP 10
.BLANK
.HL 3 ^^^*The layer description table\*

.P 0
The layer description table defines the mapping between DXF layers and
IFF layers. The DXF layer is identified by a character 
string representing the layer name while the IFF layer is identified 
by a unique integer. Each line is prefixed with the LAYER command.

.P 0
A line has the following form:-

.P 5; ^*LAYER###name###number\*

.P 0
where the fields are:-

.LM +14

.P -9
^*name###\*-#the DXF layer name, a character string, as defined in the 
LAYER table of the TABLES section in the DXF file.

.I -9
^*number#\*-#the IFF layer number, an integer, as defined in the IFF file.

.LM -14

.P 0
The character string format does not allow the use of the space character and 
is case sensitive. 

.P 0
All numerical entries must be non-negative, and all fields must be present.


.BLANK
.BLANK
.HL 3 ^^^*The entity description table\*

.P 0
The entity description table describes the translations required to produce
DXF entities from IFF features or vice versa. Each line is prefixed 
with the ENTITY command, which has one of the secondary commands 
illustrated below. The secondary commands correspond to DXF entity types,
except for the EXPAND secondary command, which signifies that any entities
constituting a BLOCK (symbol) in the BLOCKS section of the DXF file should be
output to IFF using the current entity conversions present. This expansion
will use the specified offsets and scalings to alter the internal symbol 
coordinates to get the world coordinates (using x__new = Xscale_*x _+ Xoff).
These offsets and scalings will be in the final INSERT for the symbol, unless
there is a hierarchy of BLOCKS within BLOCKS each with different scalings/
offsets, in which case the final scaling and offset must be calculated and 
used in the parameter file. This EXPAND entry is only used for DXF2I, as there
is no mechanism to reconstruct a BLOCK structure from IFF.

.TP 16
.P 0
A line has one of the following forms :-

.P 5; ^*ENTITY###LINE#######line__type#############colour###fc\*
.I 5; ^*ENTITY###POINT############################colour###fc\*
.I 5; ^*ENTITY###CIRCLE#####line__type#############colour###fc\*
.I 5; ^*ENTITY###ARC########line__type#############colour###fc\*
.I 5; ^*ENTITY###TRACE######line__type#############colour###fc\*
.I 5; ^*ENTITY###SOLID######line__type#############colour###fc\*
.I 5; ^*ENTITY###TEXT#######text__style############colour###fc\*
.I 5; ^*ENTITY###POLYLINE###line__type#############colour###fc\*
.I 5; ^*ENTITY###INSERT#####block__name############colour###fc\*
.I 5; ^*ENTITY###EXPAND#####block__name##Xoff#Yoff#Zoff##Xscale#Yscale#Zscale\*

.P 0
where the fields are :-

.LM +14

.P -13
^*line__type##\*-#the line type name, a character string, as defined in the 
LTYPE table of the TABLES section in the parameter file.
.I -13
^*text__style#\*-#the text style name, a character string, as defined in the 
STYLE table of the TABLES section in the parameter file.
.I -13
^*block__name#\*-#the block (symbol) name, a character string, as defined in 
the BLOCKS section in the parameter file.
.I -13
^*colour#####\*-#the colour index, integer.
.I -13
^*fc#########\*-#the IFF feature code, integer.
.LM -14

.P 0
Note that the colour index specified in the parameter file overrides
those in the FRT file if there is any difference.

.P 0
The character string format does not allow the use of the space character and 
is case sensitive.

.P 0
All numerical entries must be non-negative, (except for the colour,
group 62 entry, which can use negative values) and all fields must be present.

.P 0
There is no individual entry field for VERTEX as VERTEX is considered as
part of the definition of POLYLINE.

.P 0
Text heights will be read from/written to IFF TH entries, (ENABLE HEIGHT will be
required in LITES2). DXF uses mms. in the text height fields, whereas IFF TH
entries may represent mms./100, or point sizes, and the translation to use is
set by a /POINT__SIZE qualifier in both programs DXF2I or I2DXF.

.P 0
If the point size option is enabled in either program, there is a facility to
translate between mms. and point sizes. The ENTITY TEXT line may have an
optional font number assigned to the FC/text style/colour combination.
This font number must lie between 1 and 100, and refers to the font number used
in the TEXT SIZE entries which set up assignments between mms. and point sizes
for each font. If the font exists on the entity line, the TEXT SIZE entries are
read and used, otherwise some program defaults are used.

.P 0
The following reserved names must be specified in the parameter file when
converting from DXF to IFF format, if their relevant fields are not 
explicitly specified in the DXF file:

.LM +5
.LIST "o"
.LE;LTYPE 'CONTINUOUS' for all DXF linear entities, LINE, CIRCLE, ARC, 
TRACE, SOLID and POLYLINE.
.LE;STYLE 'STANDARD' for DXF TEXT entities.
.END LIST 0
.LM -5

.P 0
Note that upper case should be used for these values in order to 
denote their default nature (i.e. 'CONTINUOUS' and 'STANDARD').

.P 0
There are nine default line types supplied by I2DXF. They are:

.LM +5
.LIST "o"
.LE;'CONTINUOUS'#__________________________________________________
.LE;'DASHED'#####____#____#____#____#____#____#____#____#__ 
.LE;'HIDDEN'#####__#__#__#__#__#__#__#__#__#__#__#__#__
.LE;'CENTRE'#####________#__#________#__#________#__#________
.LE;'PHANTOM'####__________#__#__#__________#__#__#__________
.LE;'DOT'########.........................
.LE;'DASHDOT'####____#.#____#.#____#.#____#.#____#.# 
.LE;'BORDER'#####____#____#.#____#____#.#____#____#.#__ 
.LE;'DIVIDE'#####____#.#.#____#.#.#____#.#.#____#. 
.END LIST 0
.LM -5

.P 0
There are also three default text styles supplied by I2DXF. They are:

.LM +5
.LIST "o"
.LE;'STANDARD'
.LE;'ROMANC' 
.LE;'ROMANT' 
.END LIST 0
.LM -5

.P 0
For users who wish to output a line type other than the nine provided by
I2DXF (see above), they can do so by specifying their user-specific line 
type in the appropriate column of the parameter file. However, as the graphical 
representation for this user-specific line type is not supported by I2DXF, 
the graphical representation of the default line type CONTINUOUS is used
instead. Any DXF entities with this user-specific line type are therefore
graphically indistinguishable from those entities with CONTINUOUS line type.
Users who are interested in customising their line types are advised to refer
to Section B5 of the AutoCad Reference Manual.

.P 0
Similarly, any DXF text entities with text style other than the three provided 
by I2DXF (see above) are graphically indistinguishable from those entities 
with STANDARD text style. Users who are interested in customising their 
text styles are advised to refer to Section B7 of the AutoCad Reference Manual.


.TP 10
.BLANK
.HL 3 ^^^*The text size description table\*

.P 0
The text size description table defines the mapping between DXF text heights
(in mms.) and point sizes. It requires the /POINT__SIZE qualifier to be used,
so that any IFF TH entries are interpreted as points, instead of mms./100.

.P 0
A line has the following form:-

.P 5; ^*TEXT SIZE###font__number###point__size###mm__size\*

.P 0
where the fields are:-

.LM +14

.P -9
^*font__number###\*-#the font number, a number between 1 and 100, representing
the particular font assigned to the particular FC/text style/colour combination
in the ENTITY TEXT line.

.I -9
^*point__size#\*-#the IFF point size number, an integer between 1 and 100, used
in the IFF TH entry.

.I -9
^*mm__size#\*-#the DXF mm. size , a real number used in the DXF text height
entry.

.LM -14

.P 0
All numerical entries must be positive and in their stated ranges, and all
fields must be present. Any mm. text heights will be interpolated to the nearest
point value given in the table. If none exists, the last mm. size read is used
as a default, with an appropriate message given.

.P 0
An example use of these fields is given below:

.LITERAL

!       type            style           col     fc    font

ENTITY	TEXT		STANDARD	2	28    3


!		font    point   mm.s

TEXT SIZE	3	1 	0.12
TEXT SIZE	3	2	0.33
TEXT SIZE	3	3 	0.52
TEXT SIZE	3	4 	0.92
TEXT SIZE	3	5 	1.00
TEXT SIZE	3	6 	1.25
TEXT SIZE	3	7 	1.55
TEXT SIZE	3	8 	2.00

.END LITERAL

.LM -10
.PAGE
.TP 10

.LM +10
.P 0
^*----------------------------------------------------------------------\*
.HL 2 ^^^*Mapping restrictions between DXF entities and IFF features\* 

.P 0
The mapping between DXF entities and IFF features is restricted
by the nature of the DXF entity types and their associated IFF graphical types. 

.P 0
It is possible to define a many-to-one mapping for the conversion
between some IFF graphical types and DXF entity types, 
i.e. when converting from IFF to DXF format, 
allowing more than one IFF graphical type to map onto 
only one DXF entity type, and when converting from DXF to IFF format,
allowing more than one DXF entity type to map onto only one IFF 
graphical type.

.P 0
For example, when converting from IFF to DXF format, 
an IFF UNORIENTED SYMBOL feature can either map onto a DXF POINT entity 
or a DXF INSERT entity.
However, when converting in the reverse direction, a DXF POINT entity 
can only map onto an IFF UNORIENTED SYMBOL feature.

.TP 20
.P 0
The following is the summary of the mapping restrictions from
IFF graphical types to DXF entity types:-

.LM -10

.LM +10
.P 5; ^*IFF#Graphical#Types################DXF Entities\*
.BLANK
.I 5; 1#=#LINEAR#########################LINE
.I 5; ###################################TRACE
.I 5; ###################################SOLID
.I 5; ###################################POLYLINE
.I 5; 2#=#CLOCKWISE#ARC##################ARC
.I 5; 3#=#ANTICLOCKWISE#ARC##############ARC
.I 5; 4#=#CIRCUMCIRCLE#ARC###############ARC
.I 5; 5#=#FULL#CIRCUMCIRCLE##############CIRCLE
.I 5; 6#=#INTERPOLATED#CURVE#############POLYLINE
.I 5; 7#=#UNORIENTED#SYMBOL##############POINT
.I 5; ###################################INSERT
.I 5; 8#=#ORIENTED#SYMBOL################INSERT
.I 5; 9#=#SCALED#SYMBOL##################INSERT
.I 5; 10#=#TEXT##########################TEXT
.I 5; 11#=#SYMBOL#STRING#################POLYLINE
.I 5; 12#=#FILL#AREA#####################POLYLINE
.I 5; ###################################TRACE
.I 5; ###################################SOLID

.LM -10
.BLANK

.LM +10

.TP 20
.P 0
The following is the summary of the mapping restrictions from
DXF entity types to IFF graphical types:-

.LM -10

.LM +10
.P 5; ^*DXF#Entities#######################IFF Features(GT)\*
.BLANK
.I 5; LINE###############################LINEAR (1)
.I 5; POINT##############################UNORIENTED SYMBOL (7)
.I 5; CIRCLE#############################FULL CIRCUMCIRCLE (5)
.I 5; ARC################################CLOCKWISE ARC (2)
.I 5; ###################################ANTICLOCKWISE ARC (3)
.I 5; ###################################CIRCUMCIRCLE ARC (4)
.I 5; TRACE##############################LINEAR (1)
.I 5; ###################################FILL AREA (12)
.I 5; SOLID##############################LINEAR (1)
.I 5; ###################################FILL AREA (12)
.I 5; TEXT###############################TEXT (10)
.I 5; INSERT#############################UNORIENTED SYMBOL (7)
.I 5; ###################################ORIENTED SYMBOL (8)
.I 5; ###################################SCALED SYMBOL (9)
.I 5; POLYLINE###########################LINEAR (1)
.I 5; ###################################INTERPOLATED CURVE (6)
.I 5; ###################################SYMBOL STRING (11)
.I 5; ###################################FILL AREA (12)
.LM -10

.LM +10

.P 0
It is also possible to define a many-to-one mapping for the conversion
between the IFF features and DXF entities of the same type, 
i.e. when converting from IFF to DXF format, 
allowing more than one IFF feature code to map onto 
only one DXF entity, and when converting from DXF to IFF format,
allowing more than one DXF entity to map onto only one IFF feature code.

.P 0
For example, given the following ENTITY lookup table :-

.LM -10

.LM +14
.P 5; ^*ENTITY###DXF__type###line__type#############Colour###FC\*
.BLANK
.I 5; ^*ENTITY###POLYLINE###DASHED################3########20\*
.I 5; ^*ENTITY###POLYLINE###DASHED################3########21\*
.LM -14

.LM +10

.P 0
If feature code(FC) 20 and feature code (FC) 21 both represent
fill areas (IFF graphical type 12),
the conversion from IFF to DXF format is unambiguous 
since they bear a many-to-one mapping relationship, i.e. more than one
IFF feature code is mapped onto only one DXF entity.
The only resulting DXF entity is POLYLINE bearing
linetype 'DASHED' and a colour index of 3. 

.P 0
The use of this many-to-one mapping method does allow a certain degree
of flexibility but it is not without a problem. In the above example,
problems will occur if we try to convert data from DXF 
format back to IFF format using the same parameter file. Since the
two POLYLINE entities have the same characteristics, i.e. linetype 'DASHED'
and colour index 3, the program will not be able to uniquely identify
their corresponding feature code entries. When ambiguities of this kind
occur, the program will use the first feature code entry, i.e. FC 20
in this particular example.

.P 0
In summary, when converting from IFF to DXF format, the feature code (FC) entry
should be unique, otherwise the first of the duplicated feature codes will be
used. Similarly, when converting from DXF to IFF format, the entities' 
characteristics combination, i.e. DXF entity type, DXF entity name (depends
on entity type) and colour should be unique, otherwise only
the first of the duplicated combinations will be used.

.LM -10

.B
.LM +10
.HL 3 ^^^*IFF LINEAR graphical type and DXF LINE/POLYLINE\*
.LM -10

.LM +10
.P 0
There is no distinction in IFF format between line features
with only two points and those with more than two. In DXF format,
line entities with only two data points are stored as LINE while
those entities with more than two data points are stored as POLYLINE.
Problems will occur when converting from IFF to DXF format 
since the IFF feature code(FC) entries in the parameter file 
should be unique, i.e. the user cannot specify both DXF LINE and 
POLYLINE entity types for the same IFF feature code. 

.P 0
As a result of this, for I2DXF, the following rules then apply :-

.LM +5
.LIST "o"
.LE;If the input IFF feature has only two data points, I2DXF will convert 
the feature into DXF LINE format provided the entity type specified by the 
user in the parameter file is either LINE or POLYLINE. 
.LE;If the input IFF feature has more than two data points, I2DXF will 
convert it into DXF POLYLINE format provided the entity type specified by the 
user in the PARAMETER file is either LINE or POLYLINE.
.END LIST 0
.LM -5


.P 0
For example, given an IFF file with only two linear features,
FSN 1 with only two data points and FSN 2 with three data points (both
with feature code 30), and the following parameter file:

.LM -10
.LM +14
.P 5; ^*ENTITY###LINE#######DASHED################3########30\*
.LM -14
.LM +10

.P 0
When converting from IFF to DXF format, I2DXF will convert FSN 1 into
DXF LINE and FSN 2 into DXF POLYLINE.

.P 0
Problems will occur when converting the so-generated DXF file back into
IFF format using the same parameter file. Errors will be encountered since the
DXF POLYLINE entity type is not specified in the original parameter file. 
To account for the DXF POLYLINE, a new command line has to be 
added to the parameter file to define the mapping between DXF POLYLINE 
and IFF feature code (FC) 30. The new parameter file will be in the 
following form:

.LM -10
.LM +14
.P 5; ^*ENTITY###LINE#######DASHED################3########30\*
.I 5; ^*ENTITY###POLYLINE###DASHED################3########30\*
.LM -14
.LM +10

.P 0
Users are advised to design the mapping in the parameter file 
carefully if the parameter file is to be used in both directions
and the integrity of the data is to be preserved.

.LM -10

.PAGE
.TP 10
.LM +10
.P 0
^*----------------------------------------------------------------------\*
.HL 2 ^^^*Example of parameter file\*
.LM -10

.LM +5
.P 5; ^*!\* 
.I 5; ^*!#Layer#lookup#table#\*
.I 5; ^*!\*
.I 5; ^*!#######DXF__LAYER__NAME##########IFF__LAYER__ID\*
.I 5; ^*!\*
.I 5; LAYER####DXF__Road#################1
.I 5; LAYER####DXF__Culture##############2
.I 5; LAYER####DXF__Pipeline#############3
.I 5; ^*!\* 
.I 5; ^*!#Entity#lookup#table#\*
.I 5; ^*!\*
.I 5; ^*!########ENTITY__TYPE###NAME#########Colour####IFF__FC\*
.I 5; ^*!\*
.I 5; ENTITY###LINE##########DASHED########3########20\*
.I 5; ENTITY###POLYLINE######DASHED########3########20\*
.I 5; ENTITY###LINE##########CONTINUOUS####4########1\*
.I 5; ENTITY###POLYLINE######CONTINUOUS####4########1\*
.I 5; ENTITY###TRACE#########DASHED########5########40\*
.I 5; ENTITY###SOLID#########HIDDEN########8########21\*
.I 5; ENTITY###POLYLINE######DASHED########16#######12\*
.I 5; ENTITY###ARC###########CONTINUOUS####2########49\*
.I 5; ENTITY###ARC###########DASHED########2########55\*
.I 5; ENTITY###CIRCLE########CENTRE########7########67\*
.I 5; ENTITY###POINT#######################6########189\*
.I 5; ENTITY###INSERT########petrol__stn####3########201\*
.I 5; ENTITY###INSERT########church########2########223\*
.I 5; ENTITY###TEXT##########STANDARD######10#######78\*
.I 5; ENTITY###POLYLINE######DASHED########11#######34\*
.I 5; ENTITY###ARC###########User__defined##10#######48\*
.I 5; ENTITY###POINT#######################13#######180\*
.I 5; ENTITY###TEXT##########ROMANC########3########89\*
.LM -5

.B
.B

.LM +10
.P 0
Note that the ARC with 'User__defined' line type is
graphically indistinguishable from those ARC with
'CONTINUOUS' line type.

.P 0
Note that the INSERTs (symbols) 'petrol__stn' and 'church'
are represented by two single points as I2DXF/DXF2I
do not support the conversion of symbol definitions.
.LM -10

.TP 10
.LM +10
.P 0
^*----------------------------------------------------------------------\*
.HL 2 ^^^*Reading of parameter file\*
.LM -10

.LM +10
.P 0
I2DXF and DXF2I utilise the same library, DXFPARLIB, for reading
the parameter file. Messages output from this library are prefixed by
'%DXFPAR__'. These messages are documented at the end of the DATA 
PREPARATION section.
.LM -10
.REQUIRE "DXF_DXFPARMSG.RNO"
