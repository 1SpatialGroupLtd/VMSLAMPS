.SUBTITLE DATA PREPARATION
.PAGE
.TP 10
.P 0
^*--------------------------------------------------------------------------------\*
.HL 1 ^^^*DATA PREPARATION\*

.LM +10

.TP 10
.P 0
^*----------------------------------------------------------------------\*
.HL 2 ^^^*Comparison of SIF and IFF\*

.P 0
IFF is a feature oriented data format - data is separated into features, and 
each feature represents one 'thing' on the map. An integer feature code is used
to say what type of thing it is that the feature represents. A feature might
thus be a contour, or a house, or a river, depending on the type of map
being digitised, and the way that the data is to be used.

.P 0
In contrast, SIF has no concept of a 'feature', and the simple form of SIF we 
produce is essentially just a picture of the map - sequences of 'all following 
data looks like this' followed by the actual map data.

.P 0
Of course, line colour, line thickness, text size and so on do describe the 
data, in the same manner that this is done on an ordinary paper map. Also, on 
the final Intergraph system, more linkages and non-graphical information can 
be inserted into the data, if the customer wishes.


.TP 10
.P 0
^*----------------------------------------------------------------------\*
.HL 2 ^^^*Preparation for digitising data to be output to SIF\*

.P 0
The customer should supply a list of how the various forms of data on the
map(s) are to be output. This should describe what overlay (level) should be
used for each data-type, what line weight, style and colour should be used, what
text fonts and sizes are required, what symbols (cells) are to be used, and
how to digitise them, and so on. 

.P 0
For digitising within IFF, feature codes must be assigned to all of these
data-types, and an FRT file (together with SRI and TRI files) created.

.P 0
Care should be taken in considering what graphical type the  IFF features 
should have - see the section 'Comparison of SDF and FRT files' below.

.P 0
In some cases, there may not be an obvious linkage between the way the
data-type is specified in the customer specification, and the way it would 
most naturally be digitised. For instance, we might have

.TP 7
.BLANK
.LITERAL
Description	Level			Weight	Code	Feature-type

Intermediate	1 (for 10,110,210,...)	0	0	LINE
     contour	2 (for 20,120,220,...)
		3 (for 30,130,230,...)
		etc
.END LITERAL

.P 0
In this case, there are two choices. The first is to treat all intermediate 
contours as being of one feature code, with a height AC, and process them in 
some way before outputting to SIF. The second is to provide a separate feature 
code for each contour height. 

.P 0
The sensible choice (taken in this particular case) is to choose one feature 
code, and use a small program to post-process the data before outputting to 
SIF. It is clearly much easier to digitise and edit the data using this 
approach. The small program is written purely for this application, and just 
takes the appropriate contour features and allocates a feature code to 
each according to its height.

.P 0
Since customer requirements for SIF are likely to vary by quite a lot, care
must be taken in designing the flowline for producing the data to be output
to SIF, and small programs to process the data before output may often be
required.


.TP 10
.P 0
^*----------------------------------------------------------------------\*
.HL 2 ^^^*Three-dimensional and contour data\*

.TP 10
.BLANK
.HL 3 ^^^*Three-dimensional SIF output\*

.P 0
IFF2SIF is normally used to output two dimensional data, but it can also output
SIF data in three dimensional mode. The data output uses true three dimensional
coordinates - that is, an X,Y and Z value for each data point. 

.P 0
If three dimensional output is specified, then every IFF feature being output
must contain explicit height data. If the feature contains ZS entries, then
these will be used directly. If the feature contains ST entries, then a
height must be supplied in a type 2 or 3 contour height AC.

.TP 10
.BLANK
.HL 3 ^^^*Contour data\*

.P 0
If there is only a single height associated with each feature, then the
data can be output in two dimensional mode (the default). SIF provides an
"active Z" (ACZ) command, which is similar in application to an IFF height AC.
Thus IFF2SIF in two dimensional mode translates any height ACs found in
the IFF file into ACZ commands. In this mode, the Z coordinates of any ZS
entries are simply ignored.


.TP 10
.P 0
^*----------------------------------------------------------------------\*
.HL 2 ^^^*Offsetting data\*

.P 0
Within the IFF file, coordinates are stored relative to the bottom left hand
corner of the sheet, the local origin. This allows more accuracy within the IFF
file. In modern IFF files, the coordinates of that local origin are then stored
in the map descriptor (MD) entry, and the absolute coordinates of a feature can
be obtained by adding the value stored in the IFF file to the value taken
from the map descriptor.

.P 0
The default action of IFF2SIF is to output coordinates relative to the local
origin of the sheet, as they are stored in the IFF file.  However, in some
cases the customer may want the absolute coordinates instead.  If the
MAPDESCRIPTOR OFFSET command is used, then IFF2SIF will add the local origin to
each coordinate to produce the absolute coordinate. Alternatively, the user can
specify a particular offset for each sheet, in IFF units, using the OFFSET
command.

.P 0
Z units can also need offsetting - here the most common reason is to make
all Z values positive, as IFF2SIF does not output negative height values.
The ZOFFSET command can be used for this purpose.


.TP 10
.P 0
^*----------------------------------------------------------------------\*
.HL 2 ^^^*Digitising texts - composite text features\*

.P 0
IFF2SIF will output composite text features (text features which contain
more than one text component). It outputs such text components as if they
were separate text features, using the feature code and descriptive data
in the TS entry for each component, instead of the data in the FS entry
for the feature as a whole.


.TP 10
.P 0
^*----------------------------------------------------------------------\*
.HL 2 ^^^*Digitising texts - text size\*

.P 0
There are three possible ways of handling text sizes. These are:

.LIST
.LE; Each text font has a different feature code - no separate size coding
.LE; Each individual text has a size in points (as for OS text)
.LE; Each individual text has a size in millimetres on the sheet
.END LIST


.TP 10
.BLANK
.HL 3 ^^^*Feature code separated text\*

.P 0
The first method of handling text sizes is to assign each type or size of text
a different feature code, using the SDF text definition. The size of a
particular text is then determined by the size given in the SDF feature code
definition for that feature code. 


.TP 10
.BLANK
.HL 3 ^^^*Text size in points\*

.P 0
The second method requires that the SDF contain definitions of various point 
sizes. The actual size of a particular text is then determined by looking the 
point size up in the IFF TH entry. The size defined in the SDF feature code 
definition for the text is only used if the TH cannot be used.

.P 0
This method has the advantage of allowing all texts to be digitised with a few
feature codes, and is useful if the only difference between the texts is their 
size.

.TP 10
.BLANK
.HL 3 ^^^*Text size in millimetres\*

.P 0
The third method stores the text size in the IFF TH, in hundredths of a sheet 
millimetre. The size defined in the SDF feature code definition for the text
is only used if the TH cannot be used. 

.P 0
This method is similar to the second method, but allows a very wide range of 
text sizes to be represented, with only a few feature codes.


.TP 10
.P 0
^*----------------------------------------------------------------------\*
.HL 2 ^^^*Digitising texts - text level\&

.P 0
There are three possible ways of handling text level. These are:

.LIST
.LE; Use the level given by the SDF which corresponds to the text feature's own
feature code, or
.LE; Use the level which corresponds to the feature code of the feature with
which the text feature is to be associated. 
.LE; Use the level given by the SDF for texts of that category.
.END LIST

.TP 10
.BLANK
.HL 3 ^^^*Text level by own feature code\*

.P 0
The first method is suitable when all text features with a particular feature
code are to be output on the same level. The feature code is
held in the IFF FS entry (or TS entry for composite texts) as usual, and is
looked up in the SDF to determine the level required.

.TP 10
.BLANK
.HL 3 ^^^*Text level by associated feature code\*

.P 0
The second method is required whenever text features are to be output on
the same level as some other feature. In this case, a secondary feature
code AC (AC type 1) is inserted into the feature, with the AC code set to
the feature code of the feature that the text is associated with. This
secondary feature code will be looked up in the SDF to decide which level
the text should be placed on.

.P 0
Note that if there is more than one secondary AC in a text feature, the
first one is the one used for determining text level, and the rest are used
for repeating the text feature (see below).

.TP 10
.BLANK
.HL 3 ^^^*Text level by category\*

.P 0
The third method allows texts to be output to different levels according to
their categories. The text category is a value between 0 and 63 which is held
in the FS entry within the IFF file, and the SDF command CATEGORY can be used
to specify that all texts with a particular category will be output on a
particular level.


.TP 10
.P 0
^*----------------------------------------------------------------------\*
.HL 2 ^^^*Repeated features\*

.P 0
Sometimes it is necessary to output several different versions of an IFF
feature. For instance, one linear feature might represent the path of an
electricity line and also that of a telephone line. It is not desirable to
store the IFF data several times, with only the feature code changing, so
a mechanism is supplied to specify that a feature is to be output as if
it had been so stored.

.P 0
If IFF2SIF finds secondary feature code ACs (AC type 1) in a feature, it forms
a "repetition list" of these feature codes. After the feature has been output
to SIF (using the feature code from the FS entry), IFF2SIF then outputs the
feature again for each feature code from the repetition list. Thus the same
point data may be output in several different ways, depending on what the
relevant line of the SDF specifies for each feature code.

.P 0
Note that if the feature is a text feature, and the text level is being taken
from the secondary feature code (see above), then the first AC type 1 is used
for that purpose, and does not count towards repetition of the feature. 

.TP 10
.P 0
^*----------------------------------------------------------------------\*
.HL 2 ^^^*Attributes\*

.p 0
If there are ACs in a feature, IFF2SIF translates them into SIF associative
values by outputting the IDE command followed by the ASV command. IFF2SIF
will use the standard ACD definitions in the translation if the is no
ACD table in the FRT. For
each attribute in a feature the attribute name followed by the attribute
value is output in the ASV command. An IFF AC  can have a value and 
an optional text string, but the SIF attribute value can only be either
a number or a text string. If there is a value and an optional text string
in the AC  then the text string is ignored except if
the value is set to either: 0 if its an integer, 0.0 if
real, '    ' if a character string.

.p 0
ACs are not translated if the /SCITEX qualifier is specified.

.p 0
IFF2SIF is restricted to a limit of 200 ACs in a feature that can be
translated to associative values. If a feature contains more than this
a warning message is given and the excess ACs are not translated.

.PAGE

.TP 10
.P 0
^*----------------------------------------------------------------------\*
.HL 2 ^^^*The SIF Definition File (SDF)\*

.P 0
The SDF tells IFF2SIF what each feature code in the IFF file means in terms of 
SIF data. It may also contain point size and text category/level definitions.

.TP 10
.BLANK
.HL 3 ^^^*Feature code definitions\*

.P 0   
The SDF contains one line for each feature code used in the IFF file, and 
these are composed as follows:

.P 0
For ordinary feature types, we have:

.P 5
^*fc##type##level##style##weight##colour\*

.P 0
For texts, we have

.P 5
^*fc##TEXT##level##style##weight##colour##font##height##width\*

.P 0
For symbol cells we have

.P 5
^*fc##CELL##level##style##weight##colour##cell__name\*

.P 0
where:

.P 0
.LM +13
.I -8
^*fc\*######is the feature code
.I -8
^*type\*####is the type of feature - this may be any of

.LIST 0," "
.LE;LINE###-#an open linear feature
.LE;SHAPE##-#a closed linear feature
.LE;HOLE###-#a closed linear 'hole' - not normally used
.LE;CURVE##-#interpolated curve - not normally used
.LE;TEXT###-#a text
.LE;CELL###-#a symbol cell
.LE;CIRCLE#-#a circle
.LE;ARC####-#a circle arc
.END LIST 0

.I -8
^*level\*###is the SIF 'overlay' or level to place the feature on, from
1_ to_ 63
.I -8
^*style\*###is the line style to use - possible values are

.LIST 0," "
.LE; 0 - solid
.LE; 1 - dotted
.LE; 2 - medium dashes
.LE; 3 - long dashes
.LE; 4 - dash, dot
.LE; 5 - short dashes
.LE; 6 - dash, dot, dot
.LE; 7 - long dash, short dash
.END LIST 0

.I -8
^*weight\*##is the line weight to use, from 0 to 31
.I -8
^*colour\*##is the line colour, or line code, from 0 to 255

.LM -13

.P 0
If the style, weight or colour is not specified by the customer, then set it to
zero (0).

.P 0
For features of type TEXT, the additional values are

.BLANK
.LM +13

.I -8
^*font\*####is the text font to use, from 0 to 126
.I -8
^*height\*##is the text height, in metres on the ground
.I -8
^*width\*###is the text width, in metres on the ground

.LM -13

.P 0
For features of type CELL, we have

.BLANK
.LM +13

.I -8
^*cell__name\*###is the name of the cell, used by the Intergraph system to 
identify the symbol. The cell name is ended by the end of the line, or a '!' 
character, and may not contain spaces. If the name is longer than 12
characters (or 10 for SCITEX), it will be truncated.

.LM -13

.TP 10
.BLANK
.HL 3 ^^^*Point size definitions\*

.P 0
It can be useful to determine text size by point size (as for OS text, for 
example). Point sizes 1 to 30 may be defined, although only those required 
need be given. A point size is defined by:

.P 5
^*POINTSIZE##size##height##width\*

.P 0
where

.LM +13
.P -8
^*size\*####is the point size being defined (between 1 and 30)
.I -8
^*height\*##is the text height for that point size (a real number in the
current units) 
.I -8
^*width\*###is the text width for that point size (a real number in the 
current units)
.LM -13

.P 0
Note that the sizes in the feature code definition of the text should still be 
given, as they will be used if the point size contained in the IFF file is 
unacceptable for some reason.

.TP 10
.BLANK
.HL 3 ^^^*Choosing the size units\*

.P 0
By default, all sizes in the SDF are in ground units - ie assumed to be metres 
on the ground. However, it can sometimes be more convenient to work in sheet 
millimetres, and the UNITS command allows the user to select what units sizes 
will be read in.

.P 5
^*UNITS##MM__ON__SHEET\*

.P 0
After this command, all sizes will be read in sheet millimetres. This is 
generally more convenient for defining point sizes, where the text is measured 
on the sheet.

.P 5
^*UNITS##METRES__ON__GROUND\*

.P 0
This command restores the default state. After this command, all sizes will be 
in read in ground metres.

.TP 10
.BLANK
.HL 3 ^^^*Specifying level by category\*

.P 0
If text features are to be written to a level according to their text
category, then the CATEGORY command is used to indicate which level each
category of text should go to.

.P 5
CATEGORY##categ##level

.P 0
where

.LM +13
.P -8
^*categ\*###is the text category, between 0 and 63
.I -8
^*level\*###is the level on which all texts with that category should be
written, from 1 to 63
.LM -13

.TP 10
.BLANK
.HL 3 ^^^*Comments\*

.P 0
Comment lines are indicated by a '!' character - any line starting with this 
is ignored. Also, any data on the end of a line (except for CELL lines) is 
currently ignored, although it is still good practice to start a comment
at the end of the line with a comment character.

.TP 10
.BLANK
.HL 3 ^^^*Example SDF layout\*

.P 0
For example:

.TP 10
.LM -10
.LITERAL

!
! some example SDF lines:
!						comment
!fc	type	level	style	weight	colour	cell_name
!						font	height	width
!
10	line	2	2	1	0		! line - roadway
11	cell	3	0	1	2	BLDG1	! cell - house
12	text	4	0	1	27	2	3.4	2.6
!
! define our point sizes
!
UNITS  MM_ON_SHEET
!
POINTSIZE  4  4.5  4.0
POINTSIZE  8  8.5  8.0
.END LITERAL
.LM +10


.P 0
In general the above three SDF graphical types are probably the only ones
needed. 


.TP 10
.P 0
^*----------------------------------------------------------------------\*
.HL 2 ^^^*Comparison of SDF and FRT graphical types\*

.P 0
There is a rough relationship between the feature types in the SDF file, and 
the graphical types in the FRT file. This is as follows:

.LM +10

.P -10
LINE######corresponds to FRT GT 1 (linear).

.P -10
SHAPE#####corresponds to FRT GT 12 (fill area) or to GT 1 (linear).

.P 0
Note that a SHAPE must be closed (first point and last point the same). This
type may be requested for certain building features, but otherwise LINE is
probably better. 

.P -10
HOLE######basically as for SHAPE.

.P 0
This type is similar to SHAPE. It must also be closed, but is unlikely
to be required. 

.P -10
CURVE#####corresponds to FRT GT 6 (curve).

.P 0
However, in general it is better to output LINE type, as we do not know what
form of interpolation the customer will use on the curve points - this may
mean that they get different results from the same data! Check with the
customer whether LINE is acceptable instead of CURVE. 

.P -10
TEXT######corresponds to FRT GT 10 (text).

.P 0
Note that text size may be taken directly from the SDF definition, or from the 
IFF TH entry. In the latter case, it may be in points or in sheet millimetres.

.P -10
CELL######corresponds to FRT GTs 7,8,9 (symbols).

.P 0
SIF symbols are always output with origin, angle, and scale. IFF2SIF uses the
FRT GT to determine what data it requires from the IFF file. Check carefully
how each symbol should be digitised, and set the FRT GT appropriately.
If scaled symbols are to be output, then IFF2SIF will need to calculate
the size of the symbol, and will thus require an SRI file.

.P -10
CIRCLE####corresponds to FRT GT 5 (circle).

.P 0
It may be easier to digitise these using LINE (ie as a circle interpolated
when digitised). Check if the customer will accept this. IFF2SIF will not
convert a 'linear' circle to CIRCLE type.

.P -10
ARC#######corresponds to FRT GTs 2,3,4 (arc).

.P 0
The direction of arc for GTs 3 and 4 is deduced from the FRT GT. Comments are
as for CIRCLE.

.LM -10

.PAGE
.TP 10
.P 0
^*--------------------------------------------------------------------\*
.HL 2 ^^^*SIF2IFF data preparation\*

.P 0
The SIF2IFF program requires that the correlation between 
IFF feature codes and SIF graphical types and 
characteristics must be defined. For this an FRT must be created.
The FRT should be consulted when creating a parameter file 
containing a Feature code Description table,
which defines IFF feature codes in terms of combinations 
of SIF graphical types and graphical characteristics. The user must
have already prepared an FRT file defining the feature codes to be
used. The associated TRI and SRI files must also be prepared.

.P 0
Note: text features will contain TH entries holding the text height. 
All features will have the text/symbol bit in the FS entry set 
to the appropriate value to indicate the feature type. 

.PAGE
.TP 10
.P 0
^*--------------------------------------------------------------------\*
.HL 2 ^^^*The SIF2IFF parameter file\*

.P 0
Before creating the parameter file the following must be deduced:

.lm +4
.LIST
.LE
All the line styles and/or line patterns used in the SIF file. A SIF line
or pattern must correspond to an appropriate secondary code for graphical
types 1 (line), 2 (clockwise arc), 3 (anticlockwise arc), 4 (circumcircle arc), 
5 (circle), 6 (interpolated curve) , or 12 (area fill) in the FRT. Note 
that a SIF file can use either LAC or the PTN
commands to specify line or area patterns. For the LAC command a number
specifies the pattern, whereas for the PTN command a name string specifies
the pattern.

.LE 
All the SIF line weights used in the SIF file. For every line weight
there should be a corresponding width value in millimetres in the FRT.

.LE 
All the SIF line colours used. For every colour there should be a corresponding
colour value in the FRT.

.LE 
All the SIF symbols used. The name of each symbol must be known and whether
it is scaled or oriented. All SIF symbols have an orientation point so
there are no unoriented symbols. Those symbols which have a scale factor
should correspond with graphical type 9 in the FRT while those that do not 
should correspond with graphical type 8.

.LE 
All the SIF text fonts used. For every text font there should be a corresponding
combination of size and secondary code in the FRT relating to a font 
in the TRI file.
.le 
All the types of arc used. SIF arcs are either clockwise, anticlockwise or
circumcircle. An anticlockwise arc corresponds with graphical type 3, a
clockwise arc with graphical type 2 and a circumcircle arc with graphical
type 4 in the FRT. 
.le 
If it is required that the IFF 'TH' entry should contain pointsizes, then
all the combinations of SIF text heights and widths must be known so that
each combination can be assigned to a pointsize.
.end list
.lm -4

.P 0
Ideally the FRT should be prepared first so that the above criteria
can be deduced.

.P 0
When the above has been deduced, appropriate combinations of the SIF 
graphical types must be arranged in the parameter file to correspond
with the feature codes in the FRT. Also if pointsizes are required,
all the pointsize definitions must be set up in the parameter file.

.P 0
Note: When displaying in LITES2 the IFF file which SIF2IFF produces,
HEIGHT must be ENABLEd so that text sizes are taken from the IFF
file instead of the FRT. If the heights in the IFF file are pointsizes
the PSIZE must also be ENABLEd.

.P 0
Each line of the parameter file is prefixed with the FDF command, except
when text pointsizes are  specified where the prefix is POINTSIZE.
The order of entries on a line
is in a fixed format, but the actual order of lines in the file is not
important. 
Any text starting with the "!" character is regarded as a comment, and is 
ignored. Comments can appear on the same lines as commands, or on 
separate lines. Note that commands may be in upper or lower case,
but cannot be abbreviated.

.P 0
A line has the form :-

.P 5
^*FDF###gtype###[lsty###lcol###lwgt###lpat###apat###patn#\*
^*###adir###symt###symn###font]###fc#\*

.P 0
and for specifying pointsizes:-

.P 5
^*POINTSIZE###size###height###width#\*

.P 0
where the fields are :-

.LM +4

.P -9
^*FDF####\*-#the command FDF which states that this line is an entry in 
the Feature code Description table.

.P -9
^*gtype##\*-#a keyword indicating a type of graphic. The valid keywords
are: LINE, CIRCLE, CURVE, ARC, SYMBOL, AREA, TEXT

.I -9
^*lsty###\*-#a SIF line style, an integer in the range 0 to 7.

.I -9
^*lcol###\*-#a SIF line colour, an integer in the range 0 to 255.

.I -9
^*lwgt###\*-#a SIF line weight, an integer in the range 0 to 31.

.I -9
^*lpat###\*-#a SIF line pattern, an integer in the range 0 to 100.

.I -9
^*apat###\*-#a SIF area pattern, an integer in the range 0 to 100.
The upper limit for both the lpat and apat range can be extended by 
defining the logical name LSL$SIF2IFF__MAX__PATTERN, but note that
upper limit of pattern numbers in a standard SIF file is 100.

.I -9
^*symt###\*-#type of symbol, a value of 1 for a scaled symbol
or 0 for an oriented symbol.

.I -9
^*symn###\*-#a SIF symbol name, an unquoted string of up to 12 characters.

.I -9
^*patn##\*-#a SIF line or area pattern name, a unquoted string of up to 6
characters. If there is to be no pattern name, the string must be ^*NOPAT\*.
This is to be used only if the SIF file contains the PTN command. When it
is used the ^*apat\*_\^*lpat\* field should be set to 0.

.I -9
^*adir###\*-#direction specifier for a a SIF arc, a value of 1 for
clockwise, -1 for anti-clockwise or 0 for a circumcircle arc.

.I -9
^*font###\*-#a SIF font number, an integer between 0 and 255.

.I -9
^*fc#####\*-#the IFF feature code, a value in the range 0 to 32767.

.P -9
^*POINTSIZE\*-#the command POINTSIZE which states that this line gives a
pointsize specification.

.I -9
^*size###\*-#the pointsize value which will represent the SIF height and 
width combination of a text.

.I -9
^*height#\*-#the SIF height of a text in UORs

.I -9
^*width#\*-#the SIF width of a text in UORs

.LM -4

.P 0
The ^*FDF\* and ^*gtype\* entries are required on every line of the
table (except lines beginning with POINTSIZE), but thereafter the 
required entries depend on the ^*gtype\*
entry. The required entries for each ^*gtype\* are as follows:-

.BLANK
.NOFILL
^*LINE\*   - lsty lcol lwgt lpat patn fc
.BLANK
^*CIRCLE\* - lsty lcol lwgt lpat patn fc
.BLANK
^*CURVE\*  - lsty lcol lwgt lpat patn fc
.BLANK
^*ARC\*    - lsty lcol lwgt lpat patn adir fc
.BLANK
^*SYMBOL\* - symt symn fc
.BLANK
^*AREA\*   - lsty lcol lwgt apat patn fc
.BLANK
^*TEXT\*   - font lcol fc
.BLANK
.FILL

.P 0
The ^*POINTSIZE\* entry is required for pointsizes only and
must be followed by the ^*size\*, ^*height\* and ^*width\* entries
as follows:-

.BLANK
.NOFILL
^*POINTSIZE\*   - size height width
.BLANK
.FILL

.P 0
Note that the required entries for each ^*gtype\* or ^*POINTSIZE\* 
must be present and
in the order specified above. If more than the required entries are
present, the surplus will be ignored. If less than the required entries
are present an error message will be generated. Every entry on a line must be
separated by at least one blank or tab.

.P 0
When the program is run, if it finds any combinations of SIF graphical
types which have not been assigned to a feature code in the parameter
file, then it will output error messages which show the missing combinations.
Also if the program finds any combinations of SIF text height and width which
have not been assigned to a pointsize in the parameter file, then it will 
output error messages which show the missing combinations.
The user must put these missing combinations in the parameter file, then
re-run the program.

.P 0
An example showing a parameter file and a corresponding FRT follows :-

.le; FRT file:
.BLANK
.NOFILL
!
!   	FC	GT	Colour	Width	Size	SC	Description
FRT	0	1	1	0.2	0	0	Unknown feature type
FRT	1	1	3	0.25	0	0	B Class Road
FRT	3	1	2	0.2	0	0	Main Through Road
FRT	11	8	3	0.5	0.5	1	Parking
FRT	25      8	2	0.5	0.5	1       School
FRT     27	8	3	0.5	0.5	1	strange symbol
!
!symbols
!
FRT	57	8	4	0.5	0.5     1	Telephone
!
! 	TEXT
!   	FC	GT	Colour	Width	Size	SC	Description
!
FRT	60  	10	1	0.15	1.4	1	 B Class Road
FRT	62	10	1	0.15	1.0	1	 Minor Road
FRT	64	10	1	0.15	6	1	 Grid 
FRT	65	10	1	0.2	6	1	 District
!
!fill
!
FRT  	98	12	1	0	0.25	-1	Playing Field
FRT	321	8	3	0.1	0.1	1	Playing Field Seed
!
!SYMBOL COMPONENTS TABLE
!   	FC	GT	Colour	Width	Size	SC	Description
SCT	0	1	1	1	0	0
SCT	1	1	1	1	0	0
SCT	2	2	1	1	0	0
SCT	3	3	1	1	0	0
SCT	4	4	1	1	0	0
SCT	12	12	1	1	0	0
!
!
.FILL

.le; Parameter file:
.BLANK
.NOFILL
!
!############lsty#lcol#lwgt#lpat##patn####fc
!
FDF#####LINE####0###0###0###0#####NOPAT###0
FDF#####LINE####0###0###1###0#####NOPAT###1
FDF#####LINE####0###0###0###0#####NOPAT###3
!
!############lsty#lcol#lwgt#apat##patn####fc
!
FDF#####AREA####0###0###1###0#####NOPAT###98
!
!############font#lcol####################fc
!
FDF#####TEXT####1###0#####################60
FDF#####TEXT####2###0#####################62
FDF#####TEXT####3###0#####################64
FDF#####TEXT####4###0#####################65
!
!##############symt##symn#################fc
!
FDF#####SYMBOL##0###Cross#################27
FDF#####SYMBOL##0###Telephone#############57
FDF#####SYMBOL##0###Parking###############11
FDF#####SYMBOL##0###Sch###################25
FDF#####SYMBOL##0###Fieldseed#############321
!
POINTSIZE####6##60000#####50000
.FILL

.P 0
In the above example line widths 0.2 and 0.25 in the FRT have been
designated to correspond with SIF line weights 0 and 1 respectively 
in the parameter file. For texts there are four combinations of
width, size, and secondary code, and these have been designated to correspond 
with SIF fonts 1, 2, 3, and 4. Secondary code -1 for graphical type 12 in the
FRT has been designated to correspond with SIF area pattern number 0.
For symbols width and size values in the FRT cannot be used to influence the
feature code of a symbol in the parameter file. The parameter file allows only
the symbol type (scaled or oriented) and the SIF symbol name to determine
the feature code.

.P 0
Note: CCG ( Canadian Centre for Geomatics ) users must prepare
a version of the parameter file in their own special format using
CCSM codes. The following is an example of the format of a 
CCG parameter file:
.BLANK
.NOFILL
25	BA 31758 490	! BARN SYMBOL
20	BR 03555 290	! BUILDING SYMBOL
30	BM 15607 090	! CHURCH POINT SYMBOL
31	BM 35500 020	! CHURCH CROSS
59	BF 11330 040	! FIRE STATION SYMBOL
35	BA 12000 190	! GREENHOUSE SYMBOL
50	BR 11123 213	! DOME SYMBOL
46	BG 88750 390	! POWER HOUSE SYMBOL
53	EA 99400 490	! TANK
51	EA 87126 111	! TOWER
55	AQ 18347 230	! SEA PLANE ANCHORAGE
58	AL 94389 010	! FORT SYMBOL
!
.FILL
.LM -10
