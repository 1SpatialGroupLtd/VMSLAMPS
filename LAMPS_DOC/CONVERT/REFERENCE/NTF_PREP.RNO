.!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
.!! Those items which should be checked when changing the programs due to new
.!! versions of NTF are flagged with the comment
.!!
.!!		.!! NTF version
.!!
.!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
.SUBTITLE DATA PREPARATION
.PAGE
.TP 10
.P 0
^*--------------------------------------------------------------------------------\*
.HL 1 ^^^*DATA PREPARATION\*

.LM +10

.TP 10
.P 0
^*----------------------------------------------------------------------\*
.HL 2 ^^^*Comparison of NTF and IFF\*

.p0; It is possible to represent IFF files fairly closely in NTF. Each IFF
file to be transferred is treated as an NTF section, and features are mapped
onto the relevant [LINEREC], [POINTREC], [NAMEREC] or [TEXTREC] records, with
their associated data. Layers are not present in NTF, but if necessary an IFF
file could be split by layer before output.

.p0; NTF identifies the form of an item by feature code, which means that
IFF feature codes can generally be used for this purpose.

.TP 10
.P 0
^*----------------------------------------------------------------------\*
.HL 2 ^^^*Requirements for outputting IFF files to NTF\*

.p0; All IFF files to be translated must include a fully set type 2 map
descriptor (MD) entry. If this is not the case, use the IMP utility
ITRANS/DESCRIPTOR to set the map descriptor.

.p0; If OS map header data is required by the customer, then the IFF file must
include a correctly set OS style map header (MH) entry, and the /OS qualifier
must be specified when using I2NTF. The CONVERT utility OSMHED may be used to
set the OS map header correctly. Use of the /OS qualifier will also cause all 
text heights to be read as OS point sizes and to be converted to mm as 
required in NTF.

.p0;
NTF does not support IFF layers. Any data in layer 0 will be ignored, and
the data in all other layers will be output in the order in which it is
found, ignoring the layer structure.

.p0;
IFF feature serial numbers (FSNs) are not used within the NTF output. NTF
identity numbers are generated for each feature as it is output. This means
that the IFF file does not need to be sorted or otherwise processed before
outputting to NTF.

.p0;
I2NTF distinguishes graphical type by the bits set in the feature status (FS)
entry. This allows it to recognise lines, symbols and text. Other forms of
data should not be present in the IFF file being output, or they will be
incorrectly transferred.

.p0;
.p0; Per point attributes are not supported, and will be
ignored - IFF files are read at IFF revision level 0.

.p0; Texts longer than 99 characters will be truncated.

.p0; Composite texts may be present, but they will be split into separate
text features on output to NTF.

.TP 10
.P 0
^*----------------------------------------------------------------------\*
.HL 2 ^^^*The IFF files produced from NTF\*

.p0; The IFF file names will be taken from the section reference field in the
section header.

.p0; The file created will have a history (HI) entry, and a type 2 map
descriptor, with the spheroid set to "Airy" and the projection to 101 (UK
National grid). If this is not correct, then use ITRANS/DESCRIPTOR to change
it.

.p0; If the /OS qualifier was used, then the NTF section header will be
assumed to contain OS map header data, and an OS map header (MH) entry will
be created. Otherwise, the map header will be unset.

.p0; All data will be output to layer 1 - NTF does not provide the concept
of layers.

.p0; Feature serial numbers (FSNs) will be generated from 1 upwards - the
ID numbers within the NTF data will not be used. 

.p0; Only lines, symbols and texts will be created. The text/symbol bits in
the feature status (FS) entry will be set appropriately. Note that
3 dimensional coordinates are not supported.

.p0; Line features may not contain more than 10,000 points.  Symbols will have
a rotation (RO) entry if it is defined in the FRT as being of the appropriate
graphical type. For text features, the text category is taken from the NTF
font field, and may thus be inappropriate.

.p 0;At version 2.0, all attributes which are present in the NTF that are
required in the output IFF should be defined in the attribute description
record in the NTF header and in the NTF2I attribute definition file. The are
no default attributes as for version 1.1 (eg 'FC', 'OR', 'HT' etc).

.LM -10

.TP 10
.P 0
^*----------------------------------------------------------------------\*
.HL2 ^^^*Support for Ordnance Survey's Common Internal Transfer Format (CITF)\*
.LM +10
.P 0
I2NTF and NTF2I have the ability to read and write CITF files (as defined in
the OS document Mod 7/C dated October 1992) which are based on level 5,
revision 2.0 NTF as defined by BS 7567.
.P 0
This includes the need to copy map headers to and from IFF as ASCII character
blocks which can be interfaced with map header editors developed by Ordnance
Survey (Great Britain).
.P 0
Refer to the I2NTF and NTF2I documentation for details of the conversion
to and from CITF.

.NOTE ^*Warning\*
Map headers in this form are not intended to be used outside OS, and Laser-Scan
recommend that other users use type 2 map headers which can be edited using
OSMHED.
.END NOTE

.P 0

NTF2I also has the facility to change CITF feature codes which would be
invalid in IFF (i.e. greater than 32767) into valid IFF feature codes. I2NTF
has the opposite facility. These facilities are invoked through the use of a
feature code lookup table, which lists the corresponding NTF/CITF and IFF
feature code pairs.

.P 0
The conversion facility may also be used with conventional NTF data should
users wish to change feature codes during translation, so long as valid IFF and
NTF feature codes are listed in the lookup table.

.LM -10
.TP 10
.P 0
^*----------------------------------------------------------------------\*
.HL 2 ^^^*OS Map Header Translation Table\*
.LM +10
.P 0
In order to facilitate the future expansion of OS map header fields, a
translation table in the form of a parameter file is used which contains two
sections. These sections define the positions and sizes of various fields
within a type 3 (OSTF) or type 4 (CITF) OS Map Header. Type 4 map headers only
are interpretted and written by I2NTF/CITF and NTF2I/CITF.

.P 0
Each line of the file is prefixed with a command which identifies the line as
belonging to that section. The lines are free format and their position within
the file is not important. However, entries on a given line must occur in a
fixed order. Commands may be in upper or lower case.

.P 0
A maximum of 255 commands will be allowed per parameter file.

.P 0
Any text starting with the "!" character is regarded as a comment, and is 
ignored. Comments can appear on the same lines as commands, or on 
separate lines.

.P 0
The header positions and sizes given in the table must accurately reflect that
of the actual map header, particularly when converting between IFF and
OSTF/CITF.

.P 0
In OSTF, note that the field positions start at character position 1 and are
continuous through both the -1 and -20 headers. ie. the -20 header positions
do not begin from character position 1 but follow on from the -1 header.
Note also that the character positions within the header are equivalent to those
within the file; position 1 is the first space in the OSTF record containing the
-1 entry and is the same position as that used for the byte count.

.P 0
Note also that, in CITF, the character positions within the header are not
equivalent to those within the file as other records precede the header. The
offsets for CITF are within the Section Header (SECHREC) record of a CITF file.

.P0
The logical LSL$OS__MH__TABLE must be defined to point to the translation table
and any part of the file specification not defined will be taken from the
default file specification LSL$LOOKUP:OSMH__NEW__TABLE.DAT

.P0
The translation table will take the form:
.TP 26
.BLANK
.LM -10
.LM +4
.NOFILL
^*OSTF__MH__ONE############_<fileposn_>###_<size_>\*
^*OSTF__MH__TWENTY#########_<fileposn_>###_<size_>\*
^*!\*
^*OSTF__MD__X__ORIG#########_<posn_>#######_<size_>#######_<format_>\*
^*OSTF__MD__Y__ORIG#########_<posn_>#######_<size_>#######_<format_>\*
^*OSTF__MD__SCALE##########_<posn_>#######_<size_>#######_<format_>\*
^*!\*
^*OSTF__MH__BGI############_<posn_>#######_<size_>#######_<format_>\*
^*OSTF__MH__CAP__SCALE######_<posn_>#######_<size_>#######_<format_>\*
^*OSTF__MH__JOB__NUMBER#####_<posn_>#######_<size_>#######_<format_>\*
^*OSTF__MH__CHANGE__IND__A###_<posn_>#######_<size_>#######_<format_>\*
^*OSTF__MH__CHANGE__IND__B###_<posn_>#######_<size_>#######_<format_>\*
^*OSTF__MH__CHANGE__IND__C###_<posn_>#######_<size_>#######_<format_>\*
^*OSTF__MH__CHANGE__IND__D###_<posn_>#######_<size_>#######_<format_>\*
^*OSTF__MH__CHANGE__IND__E###_<posn_>#######_<size_>#######_<format_>\*
^*OSTF__MH__CHANGE__IND__F###_<posn_>#######_<size_>#######_<format_>\*
^*OSTF__MH__CHANGE__IND__G###_<posn_>#######_<size_>#######_<format_>\*
^*OSTF__MH__CHANGE__IND__H###_<posn_>#######_<size_>#######_<format_>\*
^*OSTF__MH__CHECK__VALUES###_<posn_>#######_<size_>#######_<format_>\*
^*OSTF__MH__BYTE__COUNT#####_<posn_>#######_<size_>#######_<format_>\*
^*!\*
^*CITF__MH__LENGTH#########_<size_>\*
^*!\*
^*CITF__MD__X__ORIG#########_<line_>###_<offset>###_<size_>###_<format_>\*
^*CITF__MD__Y__ORIG#########_<line_>###_<offset>###_<size_>###_<format_>\*
^*CITF__MD__SCALE##########_<line_>###_<offset>###_<size_>###_<format_>\*
^*!\*
^*CITF__MH__DIFF__HT__LEN####_<divs_>###_<offset>###_<size_>###_<format_>\*
^*CITF__MH__CHANGE__IND__A###_<divs_>###_<offset>###_<size_>###_<format_>\*
^*CITF__MH__CHANGE__IND__B###_<divs_>###_<offset>###_<size_>###_<format_>\*
^*CITF__MH__CHANGE__IND__C###_<divs_>###_<offset>###_<size_>###_<format_>\*
^*CITF__MH__CHANGE__IND__D###_<divs_>###_<offset>###_<size_>###_<format_>\*
^*CITF__MH__CHANGE__IND__E###_<divs_>###_<offset>###_<size_>###_<format_>\*
^*!\*
.FILL
.LM -4
.P0; where
.LM +16
.P-12; ^*_<fileposn_>##\*is a character position of the OSTF or CITF header
within the file and must be a positive integer\*
.I-12; ^*_<posn_>######\*is a character position of a field within the OSTF
or CITF header and must be a positive integer\*
.I-12; ^*_<size_>######\*is the number of characters this value occupies and
must be a positive integer\*
.I-12; ^*_<format_>####\*is the datatype in OSTF or CITF (uppercase I or A)of
the field\*
.I-12; ^*_<line_>######\*is the line number within the Section Header Record
(SECHREC) of a CITF header in which the field is to go. Since the header size
is 10000 bytes, the maximum line number is 125 (ie 10000/80) and should
ideally be a multiple of 80.\*
.I-12; ^*_<divs_>######\*is the number of CITF DIVIDER characters (usually a
backslash '_\') after which the field is to be located. This only applies to
the variable change indicator fields CITF__MH__CHANGE__IND__n and the 
CITF__MH__DIFF__HT__LEN field.\*
.I-12; ^*_<offset_>####\*is the number of countable characters after the number
of CITF DIVIDERs defined by ^*_<divs_>\* at which the field is to be located.
This also only applies to the variable change indicator fields
CITF__MH__CHANGE__IND__n and the CITF__MH__DIFF__HT__LEN field.\*
.LM -16
.P0; and the commands ^*OSTF__MH__ONE\* and ^*OSTF__MH__TWENTY\* define where
the map header block fits into an OSTF file. The order
of these commands is important and must be as specified above. Hence these
commands do not have a ^*_<format_>\* entry.

.page
.P 0
^*----------------------------------------------------------------------\*
.HL 2 ^^^*Example OS Map Header Translation Table\*
.P0; An example of the translation table, LSL$OS__MH__TABLE, is given here:
.blank
.LM 0
.P0
.literal

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!                                                                             !
!	OS Map Header Translation Table                                       !
!                                                                             !
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!
!	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
!
!	Created					ST	20-Oct-1992
!
! Field               Offset  Size    Type
!
OSTF_MH_ONE              1     56
OSTF_MH_TWENTY          57    440
!
OSTF_MD_X_ORIG           9      8       I
OSTF_MD_Y_ORIG          17      8       I
OSTF_MD_SCALE           33      8       I
!
OSTF_MH_BGI             25      8       I
OSTF_MH_CAP_SCALE       49      8       I
OSTF_MH_JOB_NUMBER      41      8       I
OSTF_MH_CH_IND_A       161      1       A	! OSTF Change indicator flags
OSTF_MH_CH_IND_B       162      1       A	! must be of format A1 and
OSTF_MH_CH_IND_C       163      1       A	! contiguous for compatibility
OSTF_MH_CH_IND_D       164      1       A
OSTF_MH_CH_IND_E       165      1       A
OSTF_MH_CH_IND_F       166      1       A
OSTF_MH_CH_IND_G       167      1       A
OSTF_MH_CH_IND_H       168      1       A
OSTF_MH_CHECK_VALUES   137      8       A
OSTF_MH_BYTE_COUNT     145      8       I
!
!
CITF_MH_LENGTH        4000			! Minimum 320, Maximum 10000
!
! Field                Line  Offset   Size     Type
!
CITF_MD_X_ORIG           1     47      10       I
CITF_MD_Y_ORIG           1     57      10       I
CITF_MD_SCALE            3     31       9       I
!
! Field             Number of  Offset  Size    Type
!                   Dividers   
CITF_MH_DIFF_HT_LEN      8      1       5       I
CITF_MH_CH_IND_A         8     34       1       A       ! posn of NONEXT_FLAG
CITF_MH_CH_IND_B         8     35       1       A       ! posn of OSCAR_FLAG
CITF_MH_CH_IND_C         8     36       1       A       ! posn of CA_FLAG
CITF_MH_CH_IND_D         8     37       1       A       ! posn of APP_FLAG
CITF_MH_CH_IND_E         8     38       1       A       ! posn of SUPPLY_FLAG
!
! The above CITF_MH_CH_IND field positions are used by the LITES2 OPERATION
! command thus:
!
! CITF_MH_CH_IND_A position is used for LITES2 OPERATION flag 1
! CITF_MH_CH_IND_B position is used for LITES2 OPERATION flag 2
! CITF_MH_CH_IND_C position is used for LITES2 OPERATION flag 3
! CITF_MH_CH_IND_D position is used for LITES2 OPERATION flag 4
! CITF_MH_CH_IND_E position is used for LITES2 OPERATION flag 5
!!
.el
.LM +10
.P 0
It is suggested that this layout is adhered to as closely as possible to avoid
spurious errors caused by accessing incorrect header fields, although some
flexibility is permitted as described earlier.

.TP 10
.P 0
^*----------------------------------------------------------------------\*
.HL 2 ^^^*OS Map Header Translation Table Error Messages\*

.P 0
The following is a list of error messages which may occur in utilities that
access type 3 or 4 map headers or in reading the translation table.

.P 0
For each message, the message name and text are listed. The message
name is the name of the message parameter, without the OSMHLIB____ prefix.

.LM 0
.REQUIRE "LSL$DOC_ROOT:[CONVERT.REFERENCE]OSTF_OSMHLIBMSG.RNO"
.LM 10

.SUBTITLE DATA PREPARATION
.page
.LM 0
.P 0
^*----------------------------------------------------------------------\*
.HL 2 ^^^*Feature Code Conversion Lookup Table\*
.LM +10

.P 0
I2NTF and NTF2I both have the facility to change feature codes on a one-to-one
basis through the use of a feature code lookup table read from a parameter
file. The facility is invoked by using the /FC_LOOKUP qualifier with either
I2NTF or NTF2I.

.P 0
Each line of the lookup file should start with "FC", followed by two feature
codes. Any text starting with the "!" character is regarded as a comment, and
is ignored. Comments can appear on the same lines as commands, or on 
separate lines.

.P 0
The first of the pair of feature codes to appear on the line is the NTF/CITF
feature code, the second is the IFF feature code.

.P 0
When using I2NTF with a feature code lookup table, any instances of the IFF
feature codes listed in the table will be converted into the corresponding
NTF/CITF feature code when they appear in the output file. The converse is true
when using NTF2I.

.P 0
^*----------------------------------------------------------------------\*
.HL 2 ^^^*Example Feature Code Lookup Table\*
.P0; An example of a feature code lookup table follows:
.blank
.LM 0
.P0
.literal

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!                                                                             !
!	Example Feature Code Lookup Table                                     !
!                                                                             !
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!
!	NTF FC		IFF FC
!
FC	101234		1234
FC	101235		1235
FC	101236		1236
FC	101237		1237
FC	101238		1238
FC	101239		1239
FC	101240		1240
FC	101241		1241
.el
