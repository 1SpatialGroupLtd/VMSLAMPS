





*--------------------------------------------------------------------------------*



1  *FORMAT DESCRIPTION*

          


          *----------------------------------------------------------------------*



          1.1  *Introduction*

          TDST is the term used by Laser-Scan to  describe  SysScan's,
          otherwise  unnamed,  ASCII  version of DST.  DST is the file
          extension used by SysScan  to  identify  GINIS  data  files,
          their main data format.  TDST is produced by SysScan program
          UNLDST and is converted to DST by SysScan program LOADST.  A
          brief  comparison  of  the  way  IFF and TDST regard data is
          given below.

          The format produced is an ASCII text format, as described in
          the  document  *GINIS  I/O* of August 1988 (SysScan document
          "Reference Manual RM-025 Release 4.1").

          For more information on the IFF file structure see the  *IFF
          User's    Guide*   of   the   Laser-Scan   MAPPING   package
          documentation.

          


          *----------------------------------------------------------------------*



          1.2  *File output*

          TDST output is to disc file.  The record length is variable.
          Each disc file contains the output from one IFF file.

          These files may then be output to magnetic tape using either
          of  the VAX programs BACKUP or COPY - the former is intended
          for transfer between VAXes, and the latter provides an  ANSI
          standard  tape format.  Consult the relevant Digital manuals
          for more details of these utilities.

                                                                Page 2
*FORMAT DESCRIPTION*


          


          *----------------------------------------------------------------------*



          1.3  *The TDST subset supported*

          The TDST data expected by TDST2I and produced by I2TDST is a
          subset  of  the  complete  format.  I2TDST and TDST2I do not
          support the following parameters:  GEOLINK, AREA, OBJECT and
          MULTIPOINT.    This   means   that   all  IFF  features  are
          represented by, or converted to, one of four feature  types:
          POLYGON,  ARC,  TEXT  and  POINT.   The  data  fields of the
          unsupported parameters are simply read through  and  ignored
          by TDST2I so that the program run is not affected.

          This section describes what may be expected in the output.




          1.3.1  *Summary of TDST format* -

          TDST files start with a master level  section.   The  format
          for a master level block is:

                                                              (Fortran format)
          MASTER                                                    10A1
          <name> <user-ID>                                          10A1,I11
          <XLL> <YLL> <XUR> <YUR>                                   4F16.4
          EOS                                                       10A1

            Where <name>      is the name of the master block,
                  <user-ID>   is the user identification number,
                  <XLL> <YLL> is the coordinate of the lower left corner and
                  <XUR> <YUR> is the coordinate of the upper right corner. 


          This master level block is then  parent  to  any  number  of
          general  logic level blocks.  The format for a general logic
          level block is:

                                                              (Fortran format)
          LOGIC                                                     10A1
          <name> <user-ID> <HL-name> <HL-ID>                        2(10A1,I11)
          <ident for 2nd subsection>                                10A1
          .
          .
          .
          <ident for nth subsection>                                10A1
          .
          .
          .
          EOS                                                       10A1

                                                                Page 3
*FORMAT DESCRIPTION*



            Where <name>    is the name of the logic block,
                  <user-ID> is the user identification number of the logic block,
                  <HL-name> is the name of the higher level block (i.e. the
                            master block, or some other logic block),
                  <HL-ID>   is the user identification number of the higher level
                            block and
                  <ident>   is the identifier of additional subsections.



          Four different types of additional subsections are accepted:

              1) POLYGON - any linear feature
              2) ARC     - arc or circle feature
              3) TEXT    - text feature
              4) POINT   - point or symbol features



          The polygon feature type  is  used  for  IFF  features  with
          Graphical  Types  of  1,  6, 11 and 12.  The format for this
          subsection is:

                                                              (fortran format)
          POLYGON                                                   10A1
          <nlev>                                                    I5
          <nobj>                                                    I5
          <np> <colour> <thick> <type> <height>                     4I5,F16.4
          <x1> <y1> <x2> <y2>                                       4F16.4
          <x3> <y3> .....
              ....  <xnp> <ynp>

            Where <nlev>    is the number of other logic levels this element 
                            belongs to, followed by the level names and ids,
                            (I2TDST and TDST2I DO NOT SUPPORT THIS ENTITY).
                  <nobj>    is the number of other objects/areas this element 
                            belongs to, followed by the object names,
                  <np>      is the number of points (there is a maximum of 70 points),
                  <colour>  is the colour number of the polygon,
                  <thick>   is the line thickness in pixels,
                  <type>    is the line type,
                  <height>  is the height value of the line and
                  <xi> <yi> is the coordinate of point i (where i= 1 to np)



                                                                Page 4
*FORMAT DESCRIPTION*


          The arc feature type is used for IFF features with Graphical
          Types of 2, 3, 4 and 5.  The format for this subsection is:

                                                             (fortran format)
          ARC                                                       10A1
          <nlev>                                                    I5
          <nobj>                                                    I5
          <colour> <thick> <type> <height>                          3I5,F16.4
          <xc> <yc> <rad> <alpha1> <alpha2>                         5F16.4

            Where <nlev>    is the number of other logic levels this element 
                            belongs to, followed by the level names and ids,
                            (I2TDST and TDST2I DO NOT SUPPORT THIS ENTITY).
                  <nobj>    is the number of other objects/areas this element 
                            belongs to, followed by the object names,
                  <colour>  is the colour number of the arc,
                  <thick>   is the line thickness in pixels,
                  <type>    is the line type,
                  <height>  is the height value of the arc,
                  <xc> <yc> is the coordinate of the centre of the arc,
                  <rad>     is the radius of the arc,
                  <alpha1>  is the start angle in degrees relative to the x-axis and
                  <alpha2>  is the angle from start to end point (the arc size)


            All angles are in degrees and a positive angle is measured 
            counterclockwise.



          The text feature type  is  used  for  IFF  features  with  a
          Graphical Type of 10.  The format for this subsection is:

                                                              (fortran format)
          TEXT                                                      10A1
          <nlev>                                                    I5
          <nobj>                                                    I5
          <colour> <T-size> <isl> <iun> <nlin> <xt> <yt> <t-alpha>  5I5,3F16.4
          <nch1>                                                    I5
          <line1>                                                   40A1
          .
          .
          .
          <nch nlin>
          <line nlin>

            Where <nlev>    is the number of other logic levels this element 
                            belongs to, followed by the level names and ids,
                            (I2TDST and TDST2I DO NOT SUPPORT THIS ENTITY).
                  <nobj>    is the number of other objects/areas this element 
                            belongs to, followed by the object names,
                  <colour>  is the colour number of the arc,
                  <T-size>  is the size of the text in 1.10mm.,
                  <isl>     is the index of inclination,

                                                                Page 5
*FORMAT DESCRIPTION*


                  <iun>     is the index of underlining,
                  <nlin>    is the number of lines in the text (maximum is 5),
                  <xt> <yt> is the coord of the lower left corner of the first 
                            text line,
                  <t-alpha> is the start angle in degrees relative to the x-axis,
                  <nch i>   is the number of characters in line i (maximum 40) and
                  <line i>  is the text string in line i.

            Positive angles are measured counterclockwise.



          The point  feature  type  is  used  for  IFF  features  with
          Graphical  Types  of  7,  8  and  9.   The  format  for this
          subsection is:

                                                                (fortran format)
          POINT                                                        10A1
          <nlev>                                                       I5
          <nobj>                                                       I5
          <sno> <colour> <xs> <ys> <height> <alpha>                    2I5,4F16.4

            Where <nlev>    is the number of other logic levels this element 
                            belongs to, followed by the level names and ids,
                            (I2TDST and TDST2I DO NOT SUPPORT THIS ENTITY).
                  <nobj>    is the number of other objects/areas this element 
                            belongs to, followed by the object names,
                  <sno>     is the symbol number,
                  <colour>  is the colour number of the point/symbol,
                  <xs> <ys> is the coord of the point/symbol,
                  <height>  is the height value in metres for the point/symbol and
                  <alpha>   is the rotation of the symbol in degrees relative to 
                            the x-axis.

            Positive rotation is measured counterclockwise.


          


          *----------------------------------------------------------------------*



          1.4  *Comparison of TDST and IFF*

          IFF is a feature oriented data format -  data  is  separated
          into  features,  and  each feature represents one 'thing' on
          the map.  An integer feature code is used to say  what  type
          of thing it is that the feature represents.  A feature might
          thus be a contour, or a house, or a river, depending on  the
          type of map being digitised, and the way that the data is to
          be used.

                                                                Page 6
*FORMAT DESCRIPTION*


          TDST format shares this concept of a 'feature', however  the
          features  are  not  uniquely feature coded.  Each individual
          feature has coding relating to its graphical appearance such
          as  colour and line type.  The features are notionally coded
          by grouping similar features in a logic block  which  has  a
          name   describing   its   contents.   If  this  grouping  is
          maintained by the conversion, by forcing all the features in
          a  logic block to have the same feature coding, then graphic
          differences between features within the block will be  lost,
          and  also  there is no guaranteeing that this feature coding
          will be unique.  Alternatively  each  separate  logic  block
          could be put into a separate IFF layer.  However, this would
          mean the possible creation of an unmanageable number of  IFF
          layers.

          Therefore all output from TDST2I is  written  into  one  IFF
          layer   with  a  feature  code  representing  the  graphical
          information as specified in the TDST file.  It  is  unlikely
          that  an  existing  FRT  file  will be able to cope with the
          information  presented   in   a   TDST   file   because   of
          non-compatibility  of  symbol  numbers  or  line  types etc.
          between the two formats.  Also, every combination of all the
          attributes  would  have  to  be  anticipated.  The coding is
          therefore controlled by the  conversion  program  to  comply
          with  a  standard  FRT  table:   LSL$FRT:TDST.FRT.   It will
          ensure  that  all  features  having   the   same   attribute
          information  as  each  other  in the TDST file will have the
          same feature code in the IFF file.  However,  it  will  not,
          for  example,  ensure that all red lines in a TDST file will
          appear as red when converted to IFF because there is no  way
          of  knowing what symbol numbers or line types etc.  refer to
          in the TDST definition.  If the colour or the  symbology  of
          the   features   is   particularly   important   then   some
          post-conversion editing will have to be done using LITES2 to
          restore the features to their intended appearance.
