





  *--------------------------------------------------------------------------------*



  1  *DATA PREPARATION*

            In order to facilitate a flexible transfer of  data  between
            IFF   and  DXF  formats,  lookup  tables  are  used.   These
            determine how IFF features are translated into DXF  entities
            and  vice versa.  It will be possible to use the same lookup
            table for both  programs  if  a  one-to-one  translation  is
            maintained.

            It is also possible to use the same lookup table to define a
            conversion  between  DXF  text  height  (in  mms.) and point
            sizes.

            
            *----------------------------------------------------------------------*



            1.1  *The I2DXF and DXF2I parameter file

            The parameter file contains two lookup tables :-

            a)  the layer description table
            b)  the entity description table
            c)  the text size description table

            Each line of a particular table is prefixed with  a  command
            which  identifies  the line as belonging to that table.  The
            lines are free-format, so the order of entries matters,  but
            the actual position of entries on the line is not important.
            Commands may be in upper or lower case.

            A maximum of 10000 entries will  be  allowed  per  parameter
            file.

            Any text starting with the "!" character is  regarded  as  a
            comment,  and  is  ignored.  Comments can appear on the same
            lines as commands, or on separate lines.




            1.1.1  *The layer description table* -

            The layer description table defines the mapping between  DXF
            layers  and  IFF  layers.   The DXF layer is identified by a
            character string representing the layer name while  the  IFF
            layer  is  identified  by  a  unique  integer.  Each line is
            prefixed with the LAYER command.


                                                                  Page 2
  *DATA PREPARATION*


            A line has the following form:-

                 *LAYER   name   number*

            where the fields are:-

                 *name   *- the DXF layer name, a character  string,  as
                          defined  in  the  LAYER  table  of  the TABLES
                          section in the DXF file.
                 *number *- the IFF layer number, an integer, as defined
                          in the IFF file.

            The character string format does not allow the  use  of  the
            space character and is case sensitive.

            All numerical entries must be non-negative, and  all  fields
            must be present.





            1.1.2  *The entity description table* -

            The entity  description  table  describes  the  translations
            required  to  produce DXF entities from IFF features or vice
            versa.  Each line is prefixed with the ENTITY command, which
            has  one  of  the secondary commands illustrated below.  The
            secondary commands correspond to DXF  entity  types,  except
            for  the  EXPAND secondary command, which signifies that any
            entities constituting a BLOCK (symbol) in the BLOCKS section
            of  the  DXF  file should be output to IFF using the current
            entity conversions present.  This  expansion  will  use  the
            specified  offsets and scalings to alter the internal symbol
            coordinates to get the  world  coordinates  (using  x_new  =
            Xscale*x + Xoff).  These offsets and scalings will be in the
            final INSERT for the symbol, unless there is a hierarchy  of
            BLOCKS  within BLOCKS each with different scalings/ offsets,
            in  which  case  the  final  scaling  and  offset  must   be
            calculated  and  used  in  the  parameter file.  This EXPAND
            entry is only used for DXF2I, as there is  no  mechanism  to
            reconstruct a BLOCK structure from IFF.


                                                                  Page 3
  *DATA PREPARATION*


            A line has one of the following forms :-

                 *ENTITY   LINE       line_type             colour   fc*
                 *ENTITY   POINT                            colour   fc*
                 *ENTITY   CIRCLE     line_type             colour   fc*
                 *ENTITY   ARC        line_type             colour   fc*
                 *ENTITY   TRACE      line_type             colour   fc*
                 *ENTITY   SOLID      line_type             colour   fc*
                 *ENTITY   TEXT       text_style            colour   fc*
                 *ENTITY   POLYLINE   line_type             colour   fc*
                 *ENTITY   INSERT     block_name            colour   fc*
                 
            *ENTITY   EXPAND     block_name  Xoff Yoff Zoff  Xscale Yscale Zscale*

            where the fields are :-

             *line_type  *- the line type name, a character  string,  as
                          defined  in  the  LTYPE  table  of  the TABLES
                          section in the parameter file.
             *text_style *- the text style name, a character string,  as
                          defined  in  the  STYLE  table  of  the TABLES
                          section in the parameter file.
             *block_name *- the block (symbol) name, a character string,
                          as  defined  in  the  BLOCKS  section  in  the
                          parameter file.
             *colour     *- the colour index, integer.
             *fc         *- the IFF feature code, integer.

            Note that the colour index specified in the  parameter  file
            overrides those in the FRT file if there is any difference.

            The character string format does not allow the  use  of  the
            space character and is case sensitive.

            All numerical entries must be non-negative, (except for  the
            colour,  group  62 entry, which can use negative values) and
            all fields must be present.

            There is no individual entry field for VERTEX as  VERTEX  is
            considered as part of the definition of POLYLINE.

            Text heights will be read from/written to  IFF  TH  entries,
            (ENABLE  HEIGHT  will be required in LITES2).  DXF uses mms.
            in the text  height  fields,  whereas  IFF  TH  entries  may
            represent  mms./100,  or point sizes, and the translation to
            use is set by a /POINT_SIZE qualifier in both programs DXF2I
            or I2DXF.

            If the point size option is enabled in either program, there
            is  a  facility  to translate between mms.  and point sizes.
            The ENTITY TEXT  line  may  have  an  optional  font  number
            assigned to the FC/text style/colour combination.  This font
            number must lie between 1 and 100, and refers  to  the  font
            number   used   in  the  TEXT  SIZE  entries  which  set  up


                                                                  Page 4
  *DATA PREPARATION*


            assignments between mms.  and point sizes for each font.  If
            the  font  exists  on the entity line, the TEXT SIZE entries
            are read and used, otherwise some program defaults are used.

            The following  reserved  names  must  be  specified  in  the
            parameter  file  when  converting from DXF to IFF format, if
            their relevant fields are not explicitly  specified  in  the
            DXF file:

                  o  LTYPE 'CONTINUOUS' for  all  DXF  linear  entities,
                     LINE, CIRCLE, ARC, TRACE, SOLID and POLYLINE.

                  o  STYLE 'STANDARD' for DXF TEXT entities.

            Note that upper case should be  used  for  these  values  in
            order to denote their default nature (i.e.  'CONTINUOUS' and
            'STANDARD').

            There are nine default line types supplied by  I2DXF.   They
            are:

                  o  'CONTINUOUS' _________________________

                  o  'DASHED'     __ __ __ __ __ __ __ __ _

                  o  'HIDDEN'     _ _ _ _ _ _ _ _ _ _ _ _ _

                  o  'CENTRE'     ____ _ ____ _ ____ _ ____

                  o  'PHANTOM'    _____ _ _ _____ _ _ _____

                  o  'DOT'        .........................

                  o  'DASHDOT'    __ . __ . __ . __ . __ . 

                  o  'BORDER'     __ __ . __ __ . __ __ . _

                  o  'DIVIDE'     __ . . __ . . __ . . __ .

            There are also three default text styles supplied by  I2DXF.
            They are:

                  o  'STANDARD'

                  o  'ROMANC'

                  o  'ROMANT'

            For users who wish to output a line type other than the nine
            provided  by I2DXF (see above), they can do so by specifying
            their user-specific line type in the appropriate  column  of
            the    parameter    file.    However,   as   the   graphical
            representation for  this  user-specific  line  type  is  not
            supported  by  I2DXF,  the  graphical  representation of the


                                                                  Page 5
  *DATA PREPARATION*


            default line type  CONTINUOUS  is  used  instead.   Any  DXF
            entities  with  this  user-specific  line type are therefore
            graphically  indistinguishable  from  those  entities   with
            CONTINUOUS   line   type.    Users  who  are  interested  in
            customising their line types are advised to refer to Section
            B5 of the AutoCad Reference Manual.

            Similarly, any DXF text entities with text style other  than
            the  three  provided  by  I2DXF  (see above) are graphically
            indistinguishable from those  entities  with  STANDARD  text
            style.   Users  who are interested in customising their text
            styles are advised to refer to Section  B7  of  the  AutoCad
            Reference Manual.




            1.1.3  *The text size description table* -

            The text size description table defines the mapping  between
            DXF text heights (in mms.) and point sizes.  It requires the
            /POINT_SIZE qualifier to be used, so that any IFF TH entries
            are interpreted as points, instead of mms./100.

            A line has the following form:-

                 *TEXT SIZE   font_number   point_size   mm_size*

            where the fields are:-

                 *font_number   *- the font number, a number  between  1
                          and  100,  representing  the  particular  font
                          assigned    to    the    particular    FC/text
                          style/colour  combination  in  the ENTITY TEXT
                          line.
                 *point_size *- the IFF point size  number,  an  integer
                          between 1 and 100, used in the IFF TH entry.
                 *mm_size *- the DXF mm.  size , a real number  used  in
                          the DXF text height entry.

            All numerical entries must be positive and in  their  stated
            ranges,  and  all  fields  must  be  present.  Any mm.  text
            heights will be interpolated  to  the  nearest  point  value
            given in the table.  If none exists, the last mm.  size read
            is used as a default, with an appropriate message given.

            An example use of these fields is given below:

            !       type            style           col     fc    font

            ENTITY        TEXT            STANDARD        2       28    3


            !             font    point   mm.s


                                                                  Page 6
  *DATA PREPARATION*



            TEXT SIZE     3       1       0.12
            TEXT SIZE     3       2       0.33
            TEXT SIZE     3       3       0.52
            TEXT SIZE     3       4       0.92
            TEXT SIZE     3       5       1.00
            TEXT SIZE     3       6       1.25
            TEXT SIZE     3       7       1.55
            TEXT SIZE     3       8       2.00



                                                                  Page 7
  *DATA PREPARATION*


            
            *----------------------------------------------------------------------*



            1.2  *Mapping restrictions  between  DXF  entities  and  IFF
                 features*

            The  mapping  between  DXF  entities  and  IFF  features  is
            restricted  by  the nature of the DXF entity types and their
            associated IFF graphical types.

            It is possible to  define  a  many-to-one  mapping  for  the
            conversion  between  some IFF graphical types and DXF entity
            types,  i.e.   when  converting  from  IFF  to  DXF  format,
            allowing  more  than one IFF graphical type to map onto only
            one DXF entity type, and when converting  from  DXF  to  IFF
            format,  allowing  more than one DXF entity type to map onto
            only one IFF graphical type.

            For example, when converting from IFF to DXF format, an  IFF
            UNORIENTED  SYMBOL  feature  can either map onto a DXF POINT
            entity or a DXF INSERT entity.  However, when converting  in
            the  reverse direction, a DXF POINT entity can only map onto
            an IFF UNORIENTED SYMBOL feature.

            The following is the summary  of  the  mapping  restrictions
            from IFF graphical types to DXF entity types:-

                 *IFF Graphical Types                DXF Entities*

                 1 = LINEAR                         LINE
                                                    TRACE
                                                    SOLID
                                                    POLYLINE
                 2 = CLOCKWISE ARC                  ARC
                 3 = ANTICLOCKWISE ARC              ARC
                 4 = CIRCUMCIRCLE ARC               ARC
                 5 = FULL CIRCUMCIRCLE              CIRCLE
                 6 = INTERPOLATED CURVE             POLYLINE
                 7 = UNORIENTED SYMBOL              POINT
                                                    INSERT
                 8 = ORIENTED SYMBOL                INSERT
                 9 = SCALED SYMBOL                  INSERT
                 10 = TEXT                          TEXT
                 11 = SYMBOL STRING                 POLYLINE
                 12 = FILL AREA                     POLYLINE
                                                    TRACE
                                                    SOLID



                                                                  Page 8
  *DATA PREPARATION*


            The following is the summary  of  the  mapping  restrictions
            from DXF entity types to IFF graphical types:-

                 *DXF Entities                       IFF Features(GT)*

                 LINE                               LINEAR (1)
                 POINT                              UNORIENTED    SYMBOL
            (7)
                 CIRCLE                             FULL    CIRCUMCIRCLE
            (5)
                 ARC                                CLOCKWISE ARC (2)
                                                    ANTICLOCKWISE    ARC
            (3)
                                                    CIRCUMCIRCLE ARC (4)
                 TRACE                              LINEAR (1)
                                                    FILL AREA (12)
                 SOLID                              LINEAR (1)
                                                    FILL AREA (12)
                 TEXT                               TEXT (10)
                 INSERT                             UNORIENTED    SYMBOL
            (7)
                                                    ORIENTED SYMBOL (8)
                                                    SCALED SYMBOL (9)
                 POLYLINE                           LINEAR (1)
                                                    INTERPOLATED   CURVE
            (6)
                                                    SYMBOL STRING (11)
                                                    FILL AREA (12)

            It is also possible to define a many-to-one mapping for  the
            conversion  between the IFF features and DXF entities of the
            same type, i.e.  when converting from  IFF  to  DXF  format,
            allowing more than one IFF feature code to map onto only one
            DXF entity, and when converting  from  DXF  to  IFF  format,
            allowing  more  than one DXF entity to map onto only one IFF
            feature code.

            For example, given the following ENTITY lookup table :-

                     
                *ENTITY   DXF_type   line_type             Colour   FC*

                     
                *ENTITY   POLYLINE   DASHED                3        20*
                     
                *ENTITY   POLYLINE   DASHED                3        21*

            If feature  code(FC)  20  and  feature  code  (FC)  21  both
            represent fill areas (IFF graphical type 12), the conversion
            from IFF to DXF format is  unambiguous  since  they  bear  a
            many-to-one  mapping  relationship,  i.e.  more than one IFF
            feature code is mapped onto only one DXF entity.   The  only
            resulting  DXF  entity is POLYLINE bearing linetype 'DASHED'
            and a colour index of 3.


                                                                  Page 9
  *DATA PREPARATION*


            The use of this many-to-one  mapping  method  does  allow  a
            certain  degree  of  flexibility  but  it  is  not without a
            problem.  In the above example, problems will  occur  if  we
            try to convert data from DXF format back to IFF format using
            the same parameter file.  Since the  two  POLYLINE  entities
            have  the  same characteristics, i.e.  linetype 'DASHED' and
            colour index 3, the program will not  be  able  to  uniquely
            identify  their  corresponding  feature  code entries.  When
            ambiguities of this kind occur, the  program  will  use  the
            first  feature  code  entry,  i.e.  FC 20 in this particular
            example.

            In summary, when converting from  IFF  to  DXF  format,  the
            feature  code  (FC)  entry  should  be unique, otherwise the
            first  of  the  duplicated  feature  codes  will  be   used.
            Similarly,  when  converting  from  DXF  to  IFF format, the
            entities'  characteristics  combination,  i.e.   DXF  entity
            type,  DXF  entity  name (depends on entity type) and colour
            should be unique, otherwise only the first of the duplicated
            combinations will be used.




            1.2.1  *IFF LINEAR graphical type and DXF LINE/POLYLINE* -

            There is no distinction in IFF format between line  features
            with  only  two points and those with more than two.  In DXF
            format, line entities with only two data points  are  stored
            as  LINE while those entities with more than two data points
            are stored as POLYLINE.  Problems will occur when converting
            from  IFF  to  DXF  format  since  the  IFF feature code(FC)
            entries in the parameter file should be  unique,  i.e.   the
            user  cannot specify both DXF LINE and POLYLINE entity types
            for the same IFF feature code.

            As a result of this, for I2DXF,  the  following  rules  then
            apply :-

                  o  If the input IFF feature has only two data  points,
                     I2DXF will convert the feature into DXF LINE format
                     provided the entity type specified by the  user  in
                     the parameter file is either LINE or POLYLINE.

                  o  If the input IFF feature has  more  than  two  data
                     points,  I2DXF  will  convert  it into DXF POLYLINE
                     format provided the entity type  specified  by  the
                     user  in  the  PARAMETER  file  is  either  LINE or
                     POLYLINE.

            For  example,  given  an  IFF  file  with  only  two  linear
            features,  FSN  1  with  only two data points and FSN 2 with
            three data points (both  with  feature  code  30),  and  the
            following parameter file:


                                                                 Page 10
  *DATA PREPARATION*


                     
                *ENTITY   LINE       DASHED                3        30*

            When converting from IFF to DXF format, I2DXF  will  convert
            FSN 1 into DXF LINE and FSN 2 into DXF POLYLINE.

            Problems will occur when  converting  the  so-generated  DXF
            file  back  into  IFF  format using the same parameter file.
            Errors will be encountered since  the  DXF  POLYLINE  entity
            type  is  not  specified in the original parameter file.  To
            account for the DXF POLYLINE, a new command line has  to  be
            added  to  the  parameter file to define the mapping between
            DXF  POLYLINE  and  IFF  feature  code  (FC)  30.   The  new
            parameter file will be in the following form:

                     
                *ENTITY   LINE       DASHED                3        30*
                     
                *ENTITY   POLYLINE   DASHED                3        30*

            Users are advised to design the  mapping  in  the  parameter
            file  carefully  if the parameter file is to be used in both
            directions and the integrity of the data is to be preserved.


                                                                 Page 11
  *DATA PREPARATION*


            
            *----------------------------------------------------------------------*



            1.3  *Example of parameter file*

            *!*
            *! Layer lookup table *
            *!*
            *!       DXF_LAYER_NAME          IFF_LAYER_ID*
            *!*
            LAYER    DXF_Road                 1
            LAYER    DXF_Culture              2
            LAYER    DXF_Pipeline             3
            *!*
            *! Entity lookup table *
            *!*
            *!        ENTITY_TYPE   NAME         Colour    IFF_FC*
            *!*
            ENTITY   LINE          DASHED        3        20*
            ENTITY   POLYLINE      DASHED        3        20*
            ENTITY   LINE          CONTINUOUS    4        1*
            ENTITY   POLYLINE      CONTINUOUS    4        1*
            ENTITY   TRACE         DASHED        5        40*
            ENTITY   SOLID         HIDDEN        8        21*
            ENTITY   POLYLINE      DASHED        16       12*
            ENTITY   ARC           CONTINUOUS    2        49*
            ENTITY   ARC           DASHED        2        55*
            ENTITY   CIRCLE        CENTRE        7        67*
            ENTITY   POINT                       6        189*
            ENTITY   INSERT        petrol_stn    3        201*
            ENTITY   INSERT        church        2        223*
            ENTITY   TEXT          STANDARD      10       78*
            ENTITY   POLYLINE      DASHED        11       34*
            ENTITY   ARC           User_defined  10       48*
            ENTITY   POINT                       13       180*
            ENTITY   TEXT          ROMANC        3        89*



            Note  that  the  ARC  with  'User_defined'  line   type   is
            graphically    indistinguishable   from   those   ARC   with
            'CONTINUOUS' line type.

            Note that the INSERTs (symbols)  'petrol_stn'  and  'church'
            are  represented  by two single points as I2DXF/DXF2I do not
            support the conversion of symbol definitions.


                                                                 Page 12
  *DATA PREPARATION*


            
            *----------------------------------------------------------------------*



            1.4  *Reading of parameter file*

            I2DXF and DXF2I utilise the  same  library,  DXFPARLIB,  for
            reading  the  parameter  file.   Messages  output  from this
            library are prefixed  by  '%DXFPAR_'.   These  messages  are
            documented at the end of the DATA PREPARATION section.


                                                                 Page 13
  MESSAGES (SUCCESS)


  *--------------------------------------------------------------------------------*



  1.5  *MESSAGES (SUCCESS)*

  These messages are used to indicate that the program has succeeded  in
  performing some action, and do not require any user action.

  NORMAL, successful function return

      *Explanation:* This message is used internally by the program  for
      debugging purposes and will not normally appear to users.

      *User action:* None.


                                                                 Page 14
  MESSAGES (INFORMATIONAL)


  *--------------------------------------------------------------------------------*



  1.6  *MESSAGES (INFORMATIONAL)*

  These messages give information only, and require no immediate  action
  by  the  user.   They  are  used to provide information on the current
  state of the program, or to supply explanatory information in  support
  of a warning or error message.

  BLOCKFND, number of BLOCK(symbol)s found:  'number'

      *Explanation:* This message informs the user of the  total  number
      of BLOCKs(symbols) found in the parameter file.  This message will
      be displayed when the /LOG qualifier is selected.

      *User action:* None.

  ENTITYFND, number of ENTITYs found:  'number'

      *Explanation:* This message informs the user of the  total  number
      of  ENTITYs  found  in  the  parameter file.  This message will be
      displayed when the /LOG qualifier is selected.

      *User action:* None.

  LAYERFND, number of LAYERs found:  'number'

      *Explanation:* This message informs the user of the  total  number
      of  LAYERs  found  in  the  parameter  file.  This message will be
      displayed when the /LOG qualifier is selected.

      *User action:* None.

  LTYPEFND, number of LTYPEs found:  'number'

      *Explanation:* This message informs the user of the  total  number
      of  LTYPEs  found  in  the  parameter  file.  This message will be
      displayed when the /LOG qualifier is selected.

      *User action:* None.

  OPNPAR, PARAMETER file 'name' opened for read

      *Explanation:* This message informs the user  that  the  parameter
      file  has been successfully opened for read.  This message will be
      displayed when the /LOG qualifier is selected.

      *User action:* None.


                                                                 Page 15
  MESSAGES (INFORMATIONAL)


  RDFRTERR, error reading FRT data

      *Explanation:* There was a problem reading the  FRT  data  in  the
      parameter  file.   This message is used internally and not seen by
      the the user.

      *User action:* Check the FRT or  parameter  file  and  correct  as
      necessary.

  STYLEFND, number of STYLEs found:  'number'

      *Explanation:* This message informs the user of the  total  number
      of  STYLEs  found  in  the  parameter  file.  This message will be
      displayed when the /LOG qualifier is selected.

      *User action:* None.


                                                                 Page 16
  MESSAGES (WARNING)


  *--------------------------------------------------------------------------------*



  1.7  *MESSAGES (WARNING)*

  These messages are output when an  error  has  occurred  that  can  be
  corrected  immediately by the user or that the program will attempt to
  overcome.

  COLNOTMAT, colours in PARAMETER and FRT files do not match, FC
      'number', colour 'number'

      *Explanation:* The colour specified by the entry in the  parameter
      file does not match that found in the FRT file.  The FC and colour
      number will be given in the message.  The  program  will  use  the
      colour  index  in  the  parameter  file  (i.e.   the  colour index
      explicitly specified by the  user)  for  that  particular  entity.
      This message may be turned off by use of the /QUIET qualifier.

      *User action:* Check the consistency  of  colour  fields  in  both
      PARAMETER and FRT file.

  ERRFNDFC, error finding FC 'number' in FRT file

      *Explanation:* Error finding IFF feature code (FC) in the FRT file
      having,  having  read  the FC from the parameter file.  This error
      may be caused either by having the wrong FC entry in the parameter
      file, or specifying the wrong FRT file.  The program will continue
      upon the detection of this error, but may incur other errors later
      when  trying  to  translate  this FC on encountering it in the IFF
      file.

      *User action:* Check the FC in the ENTITY entry in  the  parameter
      file, and the specification of the FRT file.

  UNKPRICMD, unknown primary command parameter at line 'number'

      *Explanation:* The primary command read from the parameter file is
      not  recognised.   Valid  primary  parameter entries are LAYER and
      ENTITY.  The program will continue ignoring the current line.

      *User action:* Check the parameter file.

  UNKSECCMD, unknown secondary command parameter at line 'number'

      *Explanation:* The secondary command read from the parameter  file
      is  not  recognised.   Valid secondary parameter entries are LINE,
      POINT, CIRCLE, ARC, TRACE, SOLID, TEXT, INSERT, and POLYLINE.  The
      program will continue ignoring the current line.

      *User action:* Check the parameter file.


                                                                 Page 17
  MESSAGES (WARNING)


  UNKTEXTCMD, unknown second TEXT command parameter at line 'number'

      *Explanation:* The secondary command read from the parameter  file
      for the TEXT command is not recognised.  Valid secondary parameter
      entries are SIZE.

      *User action:* Check the parameter file, and rerun the program.


                                                                 Page 18
  MESSAGES (ERROR)


  *--------------------------------------------------------------------------------*



  1.8  *MESSAGES (ERROR)*

  These messages indicate an error in processing which  will  cause  the
  program  to  terminate.   The  most  likely  causes  are  a corrupt or
  otherwise invalid input file, or an  error  related  to  command  line
  processing and file manipulation.

  ERROPNPAR, error opening parameter file:  'filename'

      *Explanation:* The  parameter  file  could  not  be  opened.   The
      program  will  not  be able to continue upon the detection of this
      error.

      *User action:* Check the existence and  status  of  the  parameter
      file.

  ERRRDENT, error reading ENTITY entry at line 'number'

      *Explanation:* Error encountered when reading ENTITY entry in  the
      parameter file.  This may be caused either by a missing field or a
      negative numerical  entry.   The  program  will  not  be  able  to
      continue upon the detection of this error.

      *User action:* Check the ENTITY entry in the parameter file.

  ERRRDLAY, error reading LAYER entry at line 'number'

      *Explanation:* Error encountered when reading LAYER entry  in  the
      parameter file.  This may be caused either by a missing field or a
      negative IFF LAYER number.   The  program  will  not  be  able  to
      continue upon the detection of this error.

      *User action:* Check the LAYER entry in the parameter file.

  ERRRDPAR, error reading parameter file at line 'number'

      *Explanation:* The indicated line number  of  the  parameter  file
      could  not be read.  The program will not be able to continue upon
      the detection of this error.

      *User action:* Check the parameter file at the indicated location.


                                                                 Page 19
  MESSAGES (ERROR)


  ERRRDTEXT, error reading TEXT entry at line 'number'

      *Explanation:* Error encountered when reading TEXT SIZE  entry  in
      the  parameter file.  This may be caused either by a missing field
      or a negative number.  The program will not be  able  to  continue
      upon the detection of this error.

      *User action:* Check the TEXT SIZE entry in the parameter file.

  ERRTEXTFONT, error in font entry in TEXT entry at line 'number'

      *Explanation:* There was an error in  the  font  supplied  in  the
      ENTITY  TEXT  entry.   This  may be caused either by a negative or
      unreadable number.  The program will not be able to continue  upon
      the detection of this error.

      *User action:* Check the TEXT entry in the parameter file.

  PARFILERR, error reading DXF parameter file

      *Explanation:* There was an error in the specified parameter  file
      rendering   it  unreadable.   Other  messages  will  give  further
      information and the line number.

      *User action:* Check the parameter file and correct the error.


                                                                 Page 20
  MESSAGES (OTHER)


  *--------------------------------------------------------------------------------*



  1.9  *MESSAGES (OTHER)*

  In addition to the above messages which are generated by  the  program
  itself, other messages may be produced by the command line interpreter
  (CLI) and by Laser-Scan libraries.  In  particular,  messages  may  be
  generated  by  the  IFF  library  and  by  the Laser-Scan I/O library,
  LSLLIB.  IFF  library  messages  are  introduced  by  '%IFF'  and  are
  documented  in the IFF library users' guide.  In most cases IFF errors
  will be due to a corrupt input file, and this should be the first area
  of  investigation.   If the cause of the error cannot be traced by the
  user, and Laser-Scan are consulted, then the  output  file  should  be
  preserved  to facilitate diagnosis.  LSLLIB messages are introduced by
  '%LSLLIB' and  are  generally  self-explanatory.   They  are  used  to
  explain the details of program generated errors.
