.!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
.!! Those items which should be checked when changing the programs due to new
.!! versions of NTF are flagged with the comment
.!!
.!!		.!! NTF version
.!!
.!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
.FLAGS BOLD
.subtitle UTILITY NTF2I
.page
.lm 0
.rm 80
.tp 10
.p0
^*--------------------------------------------------------------------------------\*
.hl 1 ^^^*UTILITY NTF2I\*

.tp 10
.p0
^*--------------------------------------------------------------------------------\*
.hl 2 ^^^*FUNCTION\*

.lm +10

.p0; NTF2I reads NTF/CITF data from a file or magnetic tape, and outputs an
IFF file for each section.

.lm -10

.tp 10
.p0
^*--------------------------------------------------------------------------------\*
.hl 2 ^^^*FORMAT\*

.lm +10

.p0
$ NTF2I input-file-spec

.blank
.tp 25
.nofill
^*Command qualifiers                        Defaults\*
.blank
/ATTRIBUTE__FILE='file-spec'              See description below
/[NO]CITF='integer'                      /NOCITF
/[NO]CONTINUE                            /NOCONTINUE
/FC__LOOKUP='file-spec'                   No lookup file
/FRT='file-spec'                         See description below
/[NO]IFF__POINTSIZE                       /IFF__POINTSIZE
/[NO]LOG                                 /NOLOG
/[NO]LOWER__LEFT                          /NOLOWER__LEFT
/[NO]OS                                  /NOOS
/[NO]OSCAR                               /NOOSCAR
/OSCAR__START__AC=integer                  Undefined
/OSCAR__END__AC=integer                    Undefined
/[NO]OUTPUT='file-spec'                  /NOOUTPUT
/[NO]SERIAL__MAGTAPE                      /NOSERIAL__MAGTAPE
.fill

.lm -10

.tp 10
.p0
^*--------------------------------------------------------------------------------\*
.hl 2 ^^^*PROMPT\*

.lm +10

.nofill
__Input NTF file:          input-file-spec
.fill

.lm -10

.tp 10
.p0
^*--------------------------------------------------------------------------------\*
.hl 2 ^^^*PARAMETERS\*

.lm +10

.tp 10
.p-10;input-file-spec

.p-2;-#specifies where the NTF data is to be read from.  This may be either the
name of a magnetic tape  drive  (e.g_. MTA0:), or  the  name of a  file on disk
(e.g_. TEST.NTF).  If the input is from tape then the colon at  the end  of the
device name must be provided. The default input file-spec is SYS$DISK:[].NTF

.lm -10

.tp 10
.p0
^*--------------------------------------------------------------------------------\*
.hl 2 ^^^*COMMAND QUALIFIERS\*

.lm +10

.tp 6
.p-10;/ATTRIBUTE__FILE='file-spec'

.p-2;-#gives the file in which NTF attribute mnemonics are associated with
IFF AC names. The qualifier can only be used in conjunction will the /FRT
qualifier and if it is not given then no attributes are transferred.

.tp 6
.p-10;/CITF='integer'
.i-10;/NOCITF (default)

.p-2;-#specifies to the program that the input file is an Ordnance Survey
Common Internal Transfer Format (CITF) file. This qualifier should not be used
with /OS and requires the /ATTRIBUTE__FILE and /FRT qualifiers. See the section
below on the conversion of CITF files.

.p0;The optional integer specifies which version of CITF date is to be read.

.p0;/CITF=93 specifies that the CITF file uses OS93 data structures.

.p0;/CITF=96 specifies that the CITF file uses OS96 data structures.

.p0;The use of /CITF with no parameter defaults to /CITF=96.

.tp 6
.p-10;/CONTINUE
.i-10;/NOCONTINUE (default)

.p-2;-#specifies that if an input CITF file of DATA__MODEL other than 2 is
being read, then continue processing as far as possible. Since NTF2I will only
convert CITF files where the {DATA__MODEL} field in the [DBHREC] record is set
to 2, the default action is abort if this is not the case. This qualifier is
only value when /CITF is used.

.tp6
.p-10;/FC__LOOKUP='file-spec'

.p-2;-#specifies the feature code lookup table parameter file to be used. If
this qualifier is not given, all feature codes are translated verbatim.

.tp 6 
.p-10;/FRT='file-spec'

.p-2;-#this qualifier gives the name of the Feature Representation Table (FRT) 
which hold information about IFF attributes. If this is not given no attributes
are transferred and a rotation (RO) entry will be written to all point features
in the output IFF file. This may produce inconsistencies if, for example, a
feature is intended to be an unoriented symbol but has an orientation. In this
instance, LITES2 will give a warning messages reporting that the feature has an
unexpected RO entry and the RO will be ignored. The /FRT qualifier is
compulsory with /CITF.

.tp9
.p-10;/IFF__POINTSIZE (default)
.i-10;/NOIFF__POINTSIZE

.p-2;-#specifies that text heights will be output to the IFF file as point
sizes or in 1/100ths of a millimetre, the default being in point sizes. If the
/OS qualifier is used, the heights will be output in points sizes anyway unless
overridden using /NOIFF__POINTSIZE. Non-Ordnance Survey data will always be
output in 1/100ths of a millimetre and this qualifier will have no effect.

.tp9
.p-10;/LOG
.i-10;/NOLOG  (default)

.p-2;-#specifies that additional information is to be written  to the terminal.
When the program starts up, the name of the device from  which the NTF  data is
being read, and the names of the  IFF files being  written, are logged. Various
messages summarising the form of NTF being read will also be produced.

.tp9
.p-10;/LOWER__LEFT
.i-10;/NOLOWER__LEFT  (default)

.p-2;-#specifies that all text features should be output by transferring their 
lower left (i.e. position 0) coordinates. If these coordinates are not present 
they will be calculated as per the Ordnance Survey digitising specification 
and a warning message will be output.

.tp 9
.p-10;/OS
.i-10;/NOOS (default)

.p-2;-#specifies that OS(GB) map header information is to be found  in the free
text area of the section header relating to each  file.  The layout of  the map
header information in the free text area is defined by  OS.  Note that this use
of free text space is allowable within the standard. The use of this qualifier
will also force the Basic Grid Interval (BGI) to be calculated for Ordnance
Survey data and written to the IFF map header. The BGI is specific to OSTF but
is acceptable in an OS map header.

.tp 9
.p-10;/OSCAR
.i-10;/NOOSCAR (default)

.p-2;-#specifies that the file or tape being read contains Ordnance Survey's
OSCAR data. The data can be read as normal without the qualifier but any
[NODEREC] records will be ignored. If the qualifier is given, the level
information present in the [NODEREC] record is transferred onto the relevant
links at that node. This information is attached to the link as attributes
(IFF AC entries) which are defined by qualifiers /OSCAR__START__AC and
/OSCAR__END__AC.

The presence of these level attributes is particularly useful to distinguish
between valid road junctions and over/under situations. In this situation
a LITES2 macro could be written to reconnect those over/under cases at the
same level while leaving road junctions unaltered.

.tp 9
.p-10;/OSCAR__START__AC = integer

.p-2;-#specifies the Attribute Code (AC) used to hold the OSCAR level
information that is extracted from the [NODEREC] record for the start of a
line. If this qualifier is not specified or given an AC out of range, then
all [NODEREC] records will be ignored and the data will not be treated as
OSCAR.

.tp 9
.p-10;/OSCAR__END__AC = integer

.p-2;-#specifies the Attribute Code (AC) used to hold the OSCAR level
information that is extracted from the [NODEREC] record for the end of a line.
If this qualifier is not specified or given an AC out of range, then all
[NODEREC] records will be ignored and the data will not be treated as OSCAR.

.tp9
.p-10;/OUTPUT='file-spec'
.i-10;/NOOUTPUT  (default)

.p-2;-#specifies that information about the files being read from NTF, together
with the  form of NTF  being produced, should be  written to  the specified log
file.  All   NTF comment  records  encountered will be  written to  the   file,
prefixed with "//". Also, the when the following records are found, information
is written to the log file:

.blank
.list 0 "o"

.le; [VOLHDREC]# - the volume header record is summarised.
.le; [DBHREC]### - the database header record is summarised.
.le; [FEATCLASS] - the contents is presented as a table.
.le; [DBQUAL]### - the contents is reflected.
.le; [SECQUAL]## - the contents is reflected.
.le; [VOLTERM]## - the contents is reflected.

.end list 0

.p0; The default file-spec for the log file is SYS$DISK:[]NTF2I.LOG

.tp 10
.p-10;/SERIAL__MAGTAPE
.i-10;/NOSERIAL__MAGTAPE  (default)

.p-2;-#indicates that the standard input for the program is a magnetic
tape  drive connected via   a DIL serial   controller interface.   The
qualifier is  ignored  if  input is  from  a  device  which is mounted
/FOREIGN (in which case input is from a standard magnetic tape drive).
If input is requested from  a terminal device  then it will be assumed
that this is the DIL controller.

.lm -10

.tp 10
.p0
.page
^*--------------------------------------------------------------------------------\*
.hl 2 ^^^*RESTRICTIONS\*

.lm +10

.list "o"

.!! NTF version
.le; Only NTF version 1.1 and 2.0 data at levels 1, 2 and 3 and CITF version
1.0 may be read.

.!! NTF version
.le; The NTF version is also identified by a version date in the database 
header record. This program will cope with any version up to and including the 
one released in April 1989 for NTF v1.1 and May 1992 for NTF v2.0, any later
versions will cause a warning message to be generated although the program
will attempt to continue.

.le; The IFF files created have the spheroid and projection (in the map
descriptor) set to Airy and 101 (UK National Grid) respectively. If this is
incorrect, then use ITRANS/DESCRIPTOR to change the IFF file's map descriptor.

.le; All data other than collect and complex polygon records are written to IFF
layer 1.

.le; Collect and Complex Polygon data is written to layer 2.

.le; At NTF level 3 the feature code of any point or line feature must occur 
in an [ATTREC] associated with that feature. It should be specified using one 
of the default NTF attribute mnemonics FC, LC or ST. Feature codes are assumed 
to be numerical.

.le; In the event of the NTF file containing alphanumeric or alphabetic
feature codes, the feature code of the feature being generated will be set to
0 (for line and point records) and 28 (for text records).

.le; The feature code read from the NTF file will, in addition to the feature 
code in the FS entry, be stored as the optional text field of an AC entry of
type 1. The correct feature codes associated with the text entry can be set by
using the IMP utility IRECODE.

.le; No feature may have more than 10,000 points.

.le; Curved text - [CURVTEXT] records are not understood. If such a record is 
found a warning message will be output.

.le; Invisible line sections (indicated by the _{QPLAN_} field in [GEOMETRY_*] 
records) are not understood. All lines will be output as visible lines, with a 
warning message if an invisible section is detected.

.le; Polygons - [POLY] records are output as line features

.le; Complex -Polygon - [CPOLY] records are output as line features with 
invisible line sections joining the constituent polygons.

.le; All attributes which are to be transferred - including NTF default 
attributes - must be specified in [ATTDESC] records, otherwise they will be 
ignored. The exception to this is CITF default attributes.

.le; Only the contour height (HT) and orientation (OR) _{VALUE_} fields are
recognised at NTF level 1. At level 2 any NTF mnemonic used in the _{VALUE_} 
field must be given in the attribute file. At version 2.0, the contours height
(HT) must be defined in the attribute file and can be used to direct it to
the default AC 2 (Contour) or AC 3 (Height) attribute, depending on the
name in the attribute file.

.le; If no FRT is given, all symbol features created will have a rotation (RO)
entry if an OR _{VALUE_} attribute was present. If the FRT is specified, the
Graphical Type of the output feature is examined to determine whether a
rotation is required. No RO entry is output for unoriented symbols (GT 7),
oriented symbols (GT 8) will received an RO entry (with a default value of 0.0
if it has no value in NTF) and scaled symbols (GT 9) will not receive an RO
entry.

.le; At level 2, [NAMEREC] records associated with linear data will be output
as type 12 ACs.

.le;  The original  NTF  feature    ID  numbers ({LINE__ID},  {POINT__ID},  
{NAME__ID} etc.) are not used in the IFF files being produced.

.le; The program does not support raster data - only vector sections may be
present on the tape.

.le;When using NTF2I to directly read from unformatted tape, the program will
prompt the user to mount any continuation volumes when the tape mark after
each volume is detected. If separate volumes are supplied on formatted media,
the individual files should be appended together into one large disk file.
Here is an example of the join between two volumes:
.blank
.lm -10
.lit
[lines deleted]
000000014412 00000001420000014336 00000001000000014270 00000000610000014224 1%
0000000000410000014204 00000000260000014195 00000000000000014183 0%
23000477HT00009002010%
99End of Volume 01 Transfer Set Continues on Volume 02 1%
01ORDNANCE SURVEY     SAMPLE_CONTOUR_DATA 1993030500000210200V \0%
210000002000400000000800000014274 00000000420000014233 00000000150000014211 1%
0000000000000000014204 0%
23000478HT00009002010%
210000002001300000003000000014504 00000003390000014523 00000003750000014537 1%
[lines deleted]
.end lit
.lm+10

.le; NTF 1.1 attributes do not contain a 'date' datatype so if a date is
required from an NTF attribute it is assumed that it is written in an NTF text 
attribute in standard VMS format. If a date conversion fails a warning will be
given and it will not attempt any more.

.le;The following restrictions apply to version 2.0 NTF, in addition to the
restrictions that exist for 1.1 NTF:
.list "-"
.le;No mechanism at present exists to convert level 1 and 2 [LINEREC],
[POINTREC] and [NAMEREC] attributes, CHG__TYPE and CHG__DATE into ACs.
.le;Combined attributes ([ATTCOM] records) are not supported. Therefore each
attribute must be defined and used individually.
.le;IFF Coordinate Block structures (CBs) not supported, although [GEOMETRY2]
records can be read and interpreted.
.le;[CHAIN], [COLLECT] and [CPOLY] records are not interpreted. This means that
NTF2I will not currently read Ordnance Survey's Boundary-Line data.
.le;Only attributes 'HT' and 'OR' can be read from the {VALUE} field of a
[POINTREC] and [LINEREC] record.
.le;Unlike version 1.1 NTF, there are no default attributes and so any
that are present in the NTF file must be defined in [ATTDESC] records,
the attribute file and the FRT in order to carry them into IFF.
.end list 0
.end list 0

.lm -10

.tp 15
.p0
^*--------------------------------------------------------------------------------\*
.hl 2 ^^^*DESCRIPTION\*

.lm +10

.!! NTF version
.p0; NTF2I reads NTF data at levels 1, 2 or 3 and CITF version 1.0 from file
or magnetic tape into a series of IFF files, one for each section of the NTF.

.p0; Any [FEATCLASS] records are read and the contents written to the log 
file. At level 3 the fields in these records are used to convert feature codes 
stored as LC or ST attributes to the FC form required in IFF features. If a 
[FEATCLASS] record does not contain a value in the _{FEAT__CODE_} field the 
[FEATCLASS] record number will be used.

.p0; For each section, the [SECHREC] (section header) record is read. The  name
of  the IFF  file  to be created is taken  from the  _{SECT__REF_} field,  with
characters that are not allowed in a VMS filename replaced  by underlines (__).
If the /OS qualifier has been specified, then the IFF file is created with an 
OSGB style map header entry with any available data written to it. 
The map descriptor created is type  2, with the details
taken from the section header. The X,Y offset is taken from the _{X__ORIG_} and
_{Y__ORIG_} fields, and the units is deduced from the  _{XY__UNIT_} field.  The
spheroid  and  projection are  set    to Airy  and   101 (UK   National   Grid)
respectively.

.p0; The data for the section is output to layer 1 of the IFF file. Point
features are output as symbols, line features as lines, and name features
as texts. Note that

.list "o"

.le; all    X and  Y coordinates   are  multiplied by    the   section header's
_{XY__MULT_} value before being output.

.le; all Z values are multiplied by the section header's _{Z__MULT_} value, and
then have the _{Z__DATUM_} added, before being output.

.le; the _{SECURITY_} and  _{CHANGE_} fields are never used.

.le; the _{FEAT__CODE_} fields are read as integer values, and these values are
then used as the feature code (FC) in the output IFF file's feature status (FS)
entry.

.le; the feature serial numbers for each file start at 1, and are incremented
for each feature output. Thus each FSN is unique within the whole file.

.le; the text/symbol bits in the FS entry will be correctly set to indicate
whether the feature is a point (symbol), line or name (text) feature.

.le; the _{GTYPE_} field in [GEOMETRY_*] records is ignored - all linear
features are assumed to be simple lines.

.le; when a [NAMPOSTN] record is encountered, the _{FONT_} field is extracted
and stored as the category for the text feature. If the font value is outside
the range 0-63, a category of 1 will be used. The [TEXTREP] record is treated
in the same way.

.le; the [NAMPOSTN]  _{TEXT__HT_} field  will  be extracted   and converted  to
hundredths of a mm - unless /OS is specified, in which case it will be 
converted to an OS point size - and stored in a TH entry. The [TEXTREP] record
is treated in the same way.

.le; the [NAMPOSTN] _{ORIENT_} field will be used to calculate the orientation
of the text, and this will be output to an RO entry (in radians, as is usual).
The [TEXTREP] record is treated in the same way.

.le; [NODEREC], records will be ignored.

.end list 0

.lm -10
.page
.p0
^*--------------------------------------------------------------------------------\*
.hl 2 ^^^*Attributes\*

.lm +10
.p0; NTF version 1.1 and above now has a coherent definition of how attributes
are transferred so now IFF AC values can be easily ported to and from NTF.
Firstly an IFF attribute must be associated with an NTF mnemonic. This is 
done via the new attribute file ( given with the /ATTRIBUTE__FILE qualifier ),
this file should contain IFF AC names together with the NTF mnemonic. There
are also 3 flags which should be added to the end of each line to specify 
whether :

.blank
.list 0

.le; the AC's optional text field should be read rather than the attribute value
.le; the AC is used to link a text to a linear feature so that the text can be 
used to annotate the feature - only valid at level 3
.le; the AC is used to group several features together so that a [COLLECT] 
record may be output - only valid at level 3

.end list 0

.p0; Each flag should have the value T or F to indicate true or false 
respectively, though the latter two flags are specific to the conversion I2NTF 
and may be omitted here. An example of an attribute file is shown below.
.lm +5
.nofill

!
! Command procedure to tell I2NTF/NTF2I which attributes to 
! associate with which NTF mnemonic. The IFF name must be 
! present in the FRT file.
!
!   Format is:
! 
!ATTRIBUTE IFF__ATT__NAME  NTF__MNEMONIC  TEXT  ANNOTATE  COLLECT
!
ATTRIBUTE   LH__BOUNDARY		LH	T	F	F
ATTRIBUTE   RH__BOUNDARY		RH	T	F	F
ATTRIBUTE   CONTOUR		CO	F	F	T
ATTRIBUTE   TEXT			TX	F	T	F
ATTRIBUTE   COUNTY__LEFT		CL	T	F	F
ATTRIBUTE   COUNTY__RIGHT		CR	T	F   	F
ATTRIBUTE   COUNTY__LEFT		CA	F	F	F
ATTRIBUTE   COUNTY__RIGHT		CB	F	F	F

.fill
.lm -5
.p0;In the above attribute file the NTF attributes CO and TX are written to 
the value fields of IFF AC's CONTOUR and TEXT whilst the others are written to 
the optional text field of the IFF AC. Note that COUNTY__LEFT and 
COUNTY__RIGHT have both text and value written. The interpretation of the 
attribute is taken from both the [ATTDESC] record and the IFF FRT file. If the 
two definitions of the attribute type differ then, if possible, the data will 
be converted. Any non-standard AC types must be declared in ACD entries in the 
FRT file. Note also that NTF mnemonics must be 2 characters long.

.lm -10
.page
.p0
^*--------------------------------------------------------------------------------\*
.hl 2 ^^^*Conversion of Ordnance Survey CITF data\*

.lm +10
.P 0
NTF2I will convert version 1.0 CITF files which are based upon level 5 of NTF
Version 2 as defined by BS7567. Only CITF files whose {DATA__MODEL} field in
the [SECHREC] record is equal to 2 will be converted, although the /CONTINUE
qualifier will override this.
.BL 
.HL 3 ^*The IFF MH entry and CITF header records\*
.P 0
If they are present, the [FEATCLASS], [SECHREC], [TRANSFORM], [MANINFREC]
and [EXTREC] CITF header records will be copied to a type 4 IFF Map Header
which will be created to accomodate them.
.P 0
The size allocated to this header will be taken from the lookup table pointed
to by the logical LSL$OS__MH__TABLE. The field is CITF__LENGTH and must be
at least 320 bytes long to accomodate the first 3 lines of a [SECHREC] record
and not exceed 10000 bytes. If the size defined in this field is not sufficient
for all the records to fit into, then a warning will be given and it will be
increased to the size required. If the number of CITF header lines means that
the header size will exceed 10000 bytes, then the remaining lines will be lost.
.P 0
Each line of the CITF header records that is to be copied to the Map Header
will be padded with spaces after the {EOR} character (%) in order to locate
the record descriptor in the first characters of each line.
.P0
Certain values are required to be read from the [SECHREC] record to be used
when interpreting the CITF file such as {XYLEN}, {XY__UNIT}, {XY__MULT},
{ZLEN}, {Z__UNIT}, {Z__MULT} and {SCALE}. These fields must contain correct 
values reflecting the true format of the data for successful conversion.
.P 0
The {DIFF__HT__LEN} size is also required and is in the variable part of the
[SECHREC] as so must be precisely defined as the program works under the
assumption that there will be sufficient divider (/) characters after which it
is located. Refer to the DATA PREPARATION section for details of how to set up
a correct map header lookup table.
.BL 
.HL 3 ^*Combined Attributes\*
.P 0
Combined attributes are handled providing the components of the [ATTCOM] record
have previously been defined in [ATTDESC] or [ATTCOM] records, or are in the
list of default CITF attributes which need not be present in the file.
.P 0
Since combined attributes can consist of components which are themselves
combined attributes, there is limit of how many components a combined attribute
may have, once fully expanded. This limit is 20 components but if this is
insufficient, please contact Laser-Scan to arrange for it to be increased.
.P 0
All CITF attributes which appear in [ATTREC] or [ACRDREC] records must be
separated by a DIVIDER which differs from NTF where DIVIDERs are only present
after variable length text fields.
.P 0
However, when combined attributes appear in [ATTREC] or [ACRDREC] records they
should not have DIVIDERs between their component values, except when the
value is a variable length string.
.BL 
.HL 3 ^*Feature Level Attributes\*
.P 0
CITF feature records, [LINEREC], [POINTREC] and [NAMEREC] have provision for
attributes which, if present, will be written as AC entries to the IFF feature.
These attributes are UPDATE__DATE, UPDATE__STATUS, SPEC, PROCESS,
DATE__OF__PROCESS, PHYS__STAT and MARGINAL__TXT which must be defined in the
ACD section of the FRT if they are to be transferred. These features should not
be present in the attribute file as this intended for attributes which are
held in [ATTREC] or [ACRDREC] records.

.P 0
The alphanumeric feature level attributes UPDATE__STATUS, PROCESS, PHYS__STAT
and MARGINAL__TXT will be placed into the value field of the AC as characters
and the datatype definition in the ACD part of the FRT is ignored by the
program. This is so that the LITES2 OPERATION command can be used to update
these ACs and this action if performed on the value field.

.P 0
These attributes will always be treated as character values and should
be defined as datatype 'C' in the ACD so that programs such as LITES2 and
IPATCH will show their true representation. The SPEC attribute which is a
variable length alphanumeric string will be written to the optional text
string of the AC and the datatype will not matter. The UPDATE__DATE and
DATE__OF__PROCESS attributes will be placed in the value field of the AC and
should be defined as datatype 'D' in the ACD.

.BL 
.HL 3 ^*Per-point Attributes and CBs\*
.P 0
IFF Coordinate Blocks (CB) entries are able to hold 20 columns to represent
each point in a feature, which includes the X, Y and Z coordinates.
.P 0
[GEOMETRY_*] records have various data quality fields attached to every point
which are maintained by transferring them to the columns of the CB of the
feature. The AC codes of these attributes must be known and so they must be
defined in the ACD part of the FRT in the same way as for the feature level
attributes and should not be present in the attribute file.
.P 0
The X__COORD, Y__COORD and Z__COORD should not be defined in the ACD as they
have standard AC codes of 91, 92 and 93 respectively.
.P 0
[GEOMETRY1] records have fields X__COORD, Y__COORD, XY__ACQ__METH, QPLAN
which are written to the first 4 fields of a CB.
.P 0
[GEOMETRY2] record have fields X__COORD, Y__COORD, XY__ACQ__METH, QPLAN,
Z__COORD, DIFF__HT, Z__ACQ__METH, QHT and QDIFF__HT all of which are maintained
in the conversion.
.P 0
Attributes held in Attribute Coordinate [ACRDREC] records are also attached to
points in the CB, after those derived from the [GEOMETRY_*] records.
.P 0
Since [GEOMETRY1] records result in 4 fields of a CB being used, the other 16
may be used to hold [ACRDREC] attributes. This is limit must take into account
any combined attributes when expanded.
.P 0
Similarly, [GEOMETRY2] records result in 9 fields of a CB being used, which
leaves 11 which may be used to hold [ACRDREC] attributes. Again, this is limit
must take into account any combined attributes when expanded.
.P 0
When attaching [ACRDREC] attributes to CB entries, the superset of all
attributes held in all the [ACRDREC] records in the feature must be determined
to define all the columns in the CB. The attributes of each [ACRDREC] record
will be written to correct column for the point number to which they belong and
the other columns not containing values will be absent. Absent values are
represented in IFF with the value IFF__ABSENT and I2NTF will check for this
when determining the output of [ACRDREC] records to the CITF file.
.P 0
Any [ACRDREC] records which have alphanumeric attributes of more than 4
characters will be truncated as only columns of 4 bytes each may be attached
to a row in a CB.
.BL 
.HL 3 ^*Symbol Features\*
.P 0
The feature code of point features will be looked up in the FRT to find it's
Graphical Type (GT) in order to determine if an IFF RO entry is	required.
Any distance (DT) or orientation (OR) attributes found in point features will
not be written as IFF ACs under the assumption that their values will be used
for scaled symbols or in the IFF RO entry.
.P 0
If a point feature has a GT of 9 and a distance (DT) and orientation (OR)
attribute it is treated as a scalable symbol and the second point will
calculate using these values. This second point will not have any per-point
attributes present in the CB as it was not captured. The DT and OR attributes
themselves have been used and will not be written to an AC in the feature.
.P 0
If a point feature has a GT of 9 but a missing distance (DT) attribute then it
will be treated as an orientated symbol (GT 8) if the OR attribute was
present, but as a non-orientated symbol GT 7 if not.
.P 0
All point feature with a GT of 8 will have an IFF RO entry output containing
the value held in the orientation (OR) attribute if it was present, or 0.0 if
it was not.
.P 0
Point features with a GT of 7 will have no IFF RO entry and any DT or OR
attributes attached to the feature will be lost.
.BL 
.HL 3 ^*Text Features\*
.P 0
CITF text features which contain two points in the [GEOMETRY_*] record 
will be transferred into IFF using the first coordinate tuple (the digitised
position) only. The plotting position will be lost since it can be calculated
from the {DIG__POSTN} by I2NTF if transferred back to CITF.
.P 0
All text features will be given a feature code of 28 as done with NTF2I/OS.
Text features whose feature code conform to the OS 1991 feature code list (ie
lie between 1000 and 1013) will be given a feature code of 28 and the number
in excess of 1000 will be held in the Category field of the Feature Status
entry. (eg. text feature code 1006 will be given a feature of 28 in IFF and
the FS Category will contain 6). I2NTF can then use the FS entry to generate
the original feature code if needed.
.BL 
.HL 3 ^*Date Attributes\*
.P 0
Any CITF date attributes of format A8 (eg SD and SY) should be defined
in the ACD as of type date ('D') and in the ATTRIBUTE__FILE with the 'TEXT'
option set to false. This will ensure they are converted into 4 byte VAX dates
and will therefore fit into a column of a CB.
.P 0
Any dates which have the day component set to zero (eg 19930200) can not be
converted to a VAX date and so the 1st of the month is assumed. (eg 19930201).

.BL 
.HL 3 ^*Attribute File\*
It is intended that all of the CITF default attributes listed in the CITF
Specification Mod 7/C are defined in the ATTRIBUTE__FILE and ACD section of
the FRT. This will ensure that a stable list of attribute definitions exists
so that all CITF files read will have consistent attribute translation.
Any CITF/IFF attributes undefined in the ATTRIBUTE__FILE and FRT will not be
converted.
.P 0
Only [ATTREC] and [ACRDREC] attribute mnemonics should be defined in the
attribute file. The feature level (UPDATE__DATE, UPDATE__STATUS, etc) and
per-point level (XY__ACQ__METH, QPLAN, etc) attributes should not be defined,
since they are looked up directly in the ACD part of the FRT file.
.P 0
Here is an example of an attribute file defining the default attributes
intended for use with CITF. Note that any text attributes have the 'TEXT'
option defined as true, denoting that value is to placed into the optional
text string of the AC. In this case, the type of the AC as defined in the ACD
part of the FRT is irrelevant.
.P 0
Any integer, real, or date attributes should have the 'TEXT' option set to
false. Note also that the 'ANNOTATE' and 'COLLECT' options are not used for
CITF and are set to false.
.TP 8
.LIT

!
! Default CITF attributes
!
!ATTRIBUTE  IFF_ATT_NAME  NTF_MNEM  TEXT  ANNOTATE  COLLECT
!
ATTRIBUTE	ADDR_ONE 	A1	T	F	F
ATTRIBUTE	ADDR_TWO 	A2	T	F	F
ATTRIBUTE	POSTAL_ADDR	AD	T	F	F
ATTRIBUTE	ACCENTS_MASK 	AM	T	F	F
ATTRIBUTE	ADDR_QUAL 	AQ	F	F	F
ATTRIBUTE	ADDR_STAT 	AS	F	F	F
ATTRIBUTE	BUILD_NAME 	BD	T	F	F
ATTRIBUTE	BUILD_NUM 	BN	F	F	F
ATTRIBUTE	CONCAT_FLAG	CF	T	F	F
ATTRIBUTE	COUNTY_NAME	CN	T	F	F
ATTRIBUTE	CHANGE_TYPE	CT	T	F	F
..
..
[lines deleted]
..
..
ATTRIBUTE	SETTLEMENT	SN	T	F	F
ATTRIBUTE	DATE_OF_SURV 	SY	F	F	F
ATTRIBUTE	TYPE_OF_CONSTR	TC	T	F	F
ATTRIBUTE	THOROUGHFARE	TN	T	F	F
ATTRIBUTE	CITFTEXT	TX	T	F	F
ATTRIBUTE	UORN		UN	T	F	F

.END LIT
.TP 8
.BL 
.HL 3 ^*FRT ACD Section\*

Here is an example of the ACD part of an FRT suitable for use with CITF data
whose ACD TABLE 4 reflects the IFF__ATT__NAME field of the above attribute
file.
.P 0
The feature level attributes in ACD TABLE 2 must be defined exactly as shown
and should not be defined in the attribute file. While NTF2I ignores the
datatype of ACs in the ACD (except for dates, which should be 'D'), it is
advised that attributes are defined to be of the correct type so that programs
such as LITES2 and IPATCH will display their true representation.

.P 0
The per-point attributes in ACD TABLE 3 must also be defined exactly as shown
and should not be defined in the attribute file. The AC codes of the X, Y and
Z coordinates that will appear in the CB entry will be the default ones of
91, 92 and 93 respectively and should not be present in the ACD section.
.TP 8
.BLANK
.LIT
!
! Feature level attributes
!
ACD TABLE 2
!
ACD D 1 UPDATE_DATE
ACD C 2 UPDATE_STATUS
ACD C 3 SPEC
ACD C 4 PROCESS
ACD D 5 DATE_OF_PROCESS
ACD C 6 PHYS_STAT
ACD C 7 MARGINAL_TXT
!
! Per-point attributes
!
ACD TABLE 3
!
ACD C 1 XY_ACQ_METH
ACD C 2 QPLAN
ACD R 3 DIFF_HT
ACD C 4 Z_ACQ_METH
ACD C 5 QHT
ACD C 6 QDIFF_HT
!
! Default attribute codes
!
ACD TABLE 4
!
ACD C  1 ADDR_ONE
ACD C  2 ADDR_TWO
ACD C  3 POSTAL_ADDR
ACD C  4 ACCENTS_MASK
ACD I  5 ADDR_QUAL
ACD I  6 ADDR_STAT
ACD C  7 BUILD_NAME
ACD I  8 BUILD_NUM
ACD C  9 CONCAT_FLAG
ACD C 10 COUNTY_NAME
..
..
[lines deleted]
..
..
ACD C 60 SETTLEMENT
ACD C 61 DATE_OF_SURV
ACD C 62 TYPE_OF_CONSTR
ACD C 63 THOROUGHFARE
ACD C 64 CITFTEXT
ACD C 65 UORN

.END LIT
.TP 8
.BL
.HL 3 ^*Changing Feature Codes During Translation\*
.P 0
NTF2I allows feature codes to be changed during translation through the use of
a feature code lookup table parameter file. This facility is invoked by using
the /FC_LOOKUP qualifier. It is useful for converting CITF feature codes which
are invalid in IFF (i.e. greater than 32767) into valid IFF feature codes.
Refer to the DATA PREPARATION section for details of how to set up a feature
code lookup table.

.lm -10
.page
.p0
^*--------------------------------------------------------------------------------\*
.hl 2 ^^^*EXAMPLES\*

.lm +10
.blank
.nofill
.tp10
.lm -10
$ ^*MOUNT/FOREIGN MSA0:_<CR_>\*
$ ^*NTF2I/LOG/OUTPUT=TRANSYL MSA0:_<CR_>\*
%NTF2I-I-NTFOPEN, NTF file MSA0 opened
%LSLLIB-I-LOGOPNOUT, log file TRANSYL.LOG opened for write

%NTF2I-I-MISC, creating temporary files
%NTF2I-I-MISC, closing temporary files
%NTF2I-I-MISC,     18 records read
%NTF2I-I-MISC, reading from temporary files
%NTF2I-I-NTFDATA, NTF data at level 1, version  1.1
%NTF2I-I-MISC, closing and deleting temporary files

%NTF2I-I-MISC, creating temporary files
%NTF2I-I-MISC, closing temporary files
%NTF2I-I-MISC,   1304 records read
%NTF2I-I-MISC, reading from temporary files
%LSLLIB-I-IFFOPENED, LSL$DATA_ROOT:[CONVERT.IFF]SHEET1.IFF;1 opened for write
%NTF2I-I-MISC, closing and deleting temporary files

%NTF2I-I-MISC, creating temporary files
%NTF2I-I-MISC, closing temporary files
%NTF2I-I-MISC,   2243 records read
%NTF2I-I-MISC, reading from temporary files
%LSLLIB-I-IFFOPENED, LSL$DATA_ROOT:[CONVERT.IFF]SHEET2.IFF;1 opened for write
%NTF2I-I-MISC, closing and deleting temporary files

%NTF2I-I-MISC, creating temporary files
%NTF2I-I-MISC, closing temporary files
%NTF2I-I-MISC,    445 records read
%NTF2I-I-MISC, reading from temporary files
%LSLLIB-I-IFFOPENED, LSL$DATA_ROOT:[CONVERT.IFF]SHEET3.IFF;1 opened for write
%NTF2I-I-MISC, closing and deleting temporary files

 ELAPSED:    0 00:04:03.68  CPU: 0:01:23.11  BUFIO: 20  DIRIO: 981  FAULTS: 191
$ ^*TYPE TRANSYL.LOG_<CR_>\*
================================== N T F 2 I ===================================

NTF2I invoked by TONY using terminal RTA2: at  3-JUL-1989 11:59:12.52

Command line:

NTF2I/LOG/OUTPUT=TRANSYL MSA0: 

================================================================================

Volume header record:
	Data sent by     "Laser-Scan Labs     "
	Data sent to     "Transylvanian Water "
	Date of transfer "19890703" (ie 03/7/1989)
	NTF level          1
	NTF version        1.1
// NTF data output by Laser-Scan's CONVERT utility I2NTF                       
Database header data:
	Database name         "Transylvanian Water "
	Data dictionary       "DEFAULT_01.10       "
	Database date         "19890401" (ie 01/04/1989)
	Classification scheme "                    "
	Classification date   "00000000" (ie 00/00/0000)
	Data quality report   "                    "
	Data quality date     "00000000" (ie 00/00/0000)
//                                                                             
// IFF file        LSL$IF:SHEET1.IFF;0                                        
// Spheroid        Airy                                                        
// Projection        UK national grid                                          
// Scale           2500                                                        
// Units           metres                                                      
// Height data     feet                                                        
//                                                                             
// IFF file        LSL$IF:SHEET2.IFF;0                                    
// Spheroid        Airy                                                        
// Projection        UK national grid                                          
// Scale           2500                                                        
// Units           metres                                                      
// Height data     feet                                                        
//                                                                             
// IFF file        LSL$IF:SHEET3.IFF;0                                     
// Spheroid        Airy                                                        
// Projection        UK national grid                                          
// Scale           1250                                                        
// Units           metres                                                      
// Height data     feet                                                        
Volume termination record:
	End of volume                                                       
.fill
.lm +10

.p0; In this example the user mounts the magnetic tape on drive MSA0:, and runs
NTF2I. The program reads the sections from tape into temporary files which are
then processed to produce IFF files with names taken from the section
header's section reference. The temporary files are deleted after they have been
processed. 
An output log file is produced in TRANSYL.LOG, and this is typed to show its
contents.

.blank
.nofill
.tp10
.lm -10
$ ^*NTF2I/OS/LOG/OUTPUT=SYS$OUTPUT: MSA0:_<CR_>\*
%LSLLIB-I-LOGOPNOUT, log file SYS$OUTPUT:NTF2I.LOG opened for write
================================== N T F 2 I ===================================

NTF2I invoked by TONY using terminal RTA2: at  3-JUL-1989 11:54:01.80

Command line:

NTF2I/OS/LOG/OUTPUT=SYS$OUTPUT: MSA0: 

================================================================================

%NTF2I-I-NTFOPEN, NTF file MSA0 opened
%NTF2I-I-MISC, creating temporary files
%NTF2I-I-MISC, closing temporary files
%NTF2I-I-MISC,   25 records read
%NTF2I-I-MISC, reading from temporary files
%NTF2I-I-NTFDATA, NTF data at level 1, version  1.1

Volume header record:
	Data sent by     "Laser-Scan Labs     "
	Data sent to     "Ordnance Survey (GB)"
	Date of transfer "1989703" (ie 03/07/1989)
	NTF level          1
	NTF version        1.1
// NTF data output by Laser-Scan's CONVERT utility I2NTF                       
Database header data:
	Database name         "Ordnance Survey (GB)"
	Data dictionary       "DEFAULT_01.10       "
	Database date         "19890401" (ie 01/04/1989)
	Classification scheme "                    "
	Classification date   "00000000" (ie 00/00/0000)
	Data quality report   "                    "
	Data quality date     "00000000" (ie 00/00/0000)
%NTF2I-I-MISC, closing and deleting temporary files

%NTF2I-I-MISC, creating temporary files
%NTF2I-I-MISC, closing temporary files
%NTF2I-I-MISC,   2243 records read
%NTF2I-I-MISC, reading from temporary files
//                                                                             
// IFF file        LSL$IF:COSCODES.IFF;0                                     
// Spheroid        Airy                                                       
// Projection        UK national grid                                          
// Scale           1250                                                        
// Units           metres                                                      
// Height data     metres                                                      
// Section header record contains OS(GB) map header data                       

%LSLLIB-I-IFFOPENED, LSL$DATA_ROOT:[CONVERT.IFF]OSCODES.IFF;1 opened for write
Volume termination record:
	End of volume                                                         
%NTF2I-I-MISC, closing and deleting temporary files
 ELAPSED:    0 00:00:45.81  CPU: 0:00:35.65  BUFIO: 44  DIRIO: 360  FAULTS: 100
.fill
.lm +10

.p0; In this example, the /OS qualifier has been used to indicate that OS (GB)
map header data is expected in the section header record, and is to be used to
create an OS style map header entry in the IFF file. Note the use of /OUTPUT to
produce the descriptive data about the tape interleaved with the /LOG
informational messages.

.blank
.nofill
.tp10
.lm -10
$ ^*NTF2I/LOG LSL$DATA__ROOT:[CONVERT.NTF]TEXT_<CR_>\*
%NTF2I-I-NTFOPEN, NTF file LSL$DATA__ROOT:[CONVERT.NTF]TEXT.NTF opened

%NTF2I-I-MISC, creating temporary files
%NTF2I-I-MISC, closing temporary files
%NTF2I-I-MISC,   15 records read
%NTF2I-I-MISC, reading from temporary files
%NTF2I-I-NTFDATA, NTF data at level 1, version  1.1
%NTF2I-I-MISC, closing and deleting temporary files

%NTF2I-I-MISC, creating temporary files
%NTF2I-I-MISC, closing temporary files
%NTF2I-I-MISC,   2243 records read
%NTF2I-I-MISC, reading from temporary files
%LSLLIB-I-IFFOPENED, LSL$DATA_ROOT:[CONVERT.IFF]CCB2MD.IFF;1 opened for write
%NTF2I-I-MISC, closing and deleting temporary files
 ELAPSED:    0 00:00:32.94  CPU: 0:00:08.59  BUFIO: 7  DIRIO: 133  FAULTS: 138 
.fill
.lm +10

.p0; In this example, the NTF data is in a text file on disk. 

.lm -10

.page
.require  "NTF_NTF2IMSG.RNO"
