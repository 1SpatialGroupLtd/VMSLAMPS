.c;I3D Technical Reference Notes ##-#by Andrew.C.Morris, 16-Feb-1989
.s1
.c;----------
.s1

.hl1^&I3D Terminology\&

.ls '*'
.le;A "ONEARM" node is an end-point node (not a junction node).

.le;A "SOURCE" node is a river node from which there is a flow out
and no flow in.

.le;A "SINK" node is a river node into which there is a flow in and
no flow out.

.le;A "TERMINAL" node is a source node or a sink node.
.els


.hl1^&Checks made to the terrain-intersected river/ridgeline data\&

During the INTERPOLATE (and FLOW) process(es), the following checks
are made to the terrain-intersected river/ridgeline data:
.ls
.le;All river and ridgeline one-arm (end-point, not junction-) nodes
must be heighted. 

.le;No river links may contain a height inflection.

.le;The river network must not contain any impicit height inflections.

.le;The river network must not contain any implicit flow loops.

.le;All river sources and sinks must be at terminal nodes. 

.le;All river terminal links must have their direction of flow uniquely
determined by heighted points within the river network, together with
rule#5 above. 

.le;Min and max heights in each river network component must be at
terminal nodes. 

.le;The max height must be significatly greater than the min height in
each river network component. 
.els


.hl1^&The River flow-direction and node-height estimation algorithm\&

The only part of the code for I3D which is at all difficult to follow is the
river flow-direction and node-height estimation algorithm. This complexity
arises because:
.ls
.le;Before heights can be interpolated along each link in the river network, a
height must be found for every node (junction or end point) in the network. 

.le;River junction heights must themselves be estimated by interpolating accross
river junctions. This cannot be done untill the direction of flow is known in
the river links being interpolated along. 

.le;The direction of flow in each river link depends in turn on the height at
river junctions. 
.els

The strategy used to find a complete set of node heights and link directions
which is both consistent with the common sense rules about the way rivers
can flow, and also reasonably likely to be "the correct solution" which the
user requires (when there is more than one possible solution, which is very
common), is to try every possible set of river-link flow directions, choosing
the "most likely" directions first according to the heuristic rule that river
flow is more likely to be into a junction than out if any of the links already
flow out from the junction (though commonsensical, this rule was in fact
developed by bitter experience, more or less by trial and error, but has been
very successfull) .
.s1
The details of this algorithm are faily complex. You will have to look at the
code itself to see what is going on exactly, but the following should serve as
a useful introduction to anyone who has been condemned to having to work out
how I3D is SUPPOSED to work: 
.lit

SUBROUTINE FIND_LEGAL_FLOW
.
CALL SUBROUTINE SET_INITIAL_FLOW
.	All river links having two or more unequal heights along them
.	are directed downhill from max height to min height. 
.
CALL SUBROUTINE CHECK_FLOW
A:	Repeat
.	.  For each river node do
.	.     If all but one link, which is undirected, flows into the
.	.        node, or all but one flow out, the remaining undirected
.	.        link is directed so that the node is not a source or a
.	.        sink. 
.	.     end do
.	untill no new link directions have been set. 
.	.
.	If it has not already been established that use of the following
.	.  rule means that no legal complete river network flow is
.	.  possible, then
.	.  For each river node do
.	.    If there is a flow out, any undirected links are directed
.	.       so as to flow into the node. 
.	.  end do
.	.  If any new link directions have been set, goto A above.
.	end if
.	.
The above rule is important because in the case where the river network
flow is not unique (which is very common) if it is not used, the first
legal flow found (which is the one that I3D will use) is much less
likely to be a flow which the user will consider correct - even though
all flows found by I3D are legal, only one of these will be "correct". 
.	.
River node heights are now set whever possible as follows:
.	.
.	CALL SUBROUTINE HEIGHT_RIVER_NODES
.	.	For each unheighted river node do
.	.	.  Find path to lowest heighted point upstream from this
.	.       .     point, and path to highest heighted point
.	.	.     downsream from this point. Undirected links are
.	.	.     not traversed during this process. 
.	.	.  If both of these heights are defined, every node
.	.	.     along the path connecting these two heighted
.	.	.     points has a height set by linearly interpolating
.	.	.     along this path.
.	.	end do
.	.
Now scan all possible flow paths within the river network to check that
there are no flow cycles or implicit height inflections. If there are
then undo all flow directions and node heights set within CHECK_FLOW so
far, and repeat the process, skipping the optional flow setting step.
If the resulting flow is still illegal, then complain that there is an
inconsistancy in the input data and skip to the end of the routine. 
.	.
If all river network nodes are now be heighted and all links directed
and the flow is legal, then the job is done so jump to the end of the
routine, otherwise a flow direction must be guessed for each remaining
undirected river link: 
.	.
.	CALL GUESS_COMPLETE_FLOW
.	Remaining undirected river links are now directed one at a
.	time. The flow direction is guessed first according to the rule
.	that if the node at either link end has a flow away from this
.	link, then set the flow into this node, else guess that flow is
.	uphill first. 
.	.
.	The resulting partial river network flow is then checked for
.	consistency by calling the above routine CHECK_FLOW to add any
.	further flow directions determined by this new flow direction,
.	interpolate node heights wherever possible, and check the
.	resulting flow for legality. 
.	.
.	If the flow is legal, then push the last guess onto a
.	guess-stack, and guess a flow direction for the next undirected
.	link. Else try the opposite flow direction for this link, else
.	pop the link stack as far down as necessary untill you can push
.	it again. Continue in this way, scanning all possible
.	combinations of flow direction guesses, untill either a
.	complete legal flow is found, or no futher combination exists. 
.	.
.	If no complete legal flow exists, fail; else now continue the
.	scan to see if a different complete legal flow can be found. If
.	all possibilities are exhausted and none is found then the
.	original flow was the only complete legal flow possible (and is
.	therefore very likely to be the flow which the user wanted). If
.	another legal flow is found the the first flow found was not
.	unique, so give the user a warning to this effect. In either
.	case, now unset all guessed link flow directions and dependent
.	node heights and start the scan again at the beginning to find
.	the first solution again, then return. 

.el
Note that the complexity of the overall flow guessing algorithm
described above rises exponentially with the number of river links.
However, this number is not usually very high, and in any case in any
realistic river network, as opposed to a simple "scribble", the flow
rules, together with the extra heuristic described above (to the effect
that a river flow is more likely to be into a junction than out, if
there is already a flow out) often determine every link flow direction
so that GUESS__COMPLETE__FLOW has very few, if any, link directions left
to guess. 
.s1
Once FIND__LEGAL__FLOW has sucessfully completed, so that a consistent
river network flow has been determined and every river node has a
height set, a height is then estimated for every ridgeline node
(HEIGHT__RIDGE__NODES). This is done by finding any path connecting two
heighted nodes through each unheighted node, and interpolating. This is
very straightforward as there is no concept of ridgeline flow
direction. Once all river and ridgeline nodes are heighted, the process
of interpolating a height along each link is trivial. 
