.!** Qume page format
.LEFT MARGIN  0;.RIGHT MARGIN 80;.PAGE SIZE    60,80
.KEEP
.PAGE
.! We need DSR ".HEADER LEVEL 1 " for table of contents but don't want to
.! have the section numbers coming out in our text. Produce content page
.! with
.! $ RUNOFF/NOSECTION_NUMBERS
.STYLE HEADERS 6,6,,0,,0
.FLAGS BOLD
.FIGURE 10
.CENTRE; ^*SECTION I\*
.SEND TOC .BLANK
.SEND TOC      SECTION I
.SEND TOC .BLANK
.BL
.STYLE HEADERS 6,6,,0
.CENTRE; ^*INTRODUCTION\*
.INDEX Introduction to User Guide
.PAGE
^*-------------------------------------------------------------------------------
\*
.HL 1 ^*INTRODUCTION\*

^*-------------------------------------------------------------------------------\*
.HL 2 ^*GENERAL\*
.LEFT MARGIN +10
.FILL
.JUSTIFY
.INDEX STRUCTURE content
.INDEX $STATUS
.INDEX STRUCTURE Messages
.P 0;The STRUCTURE package consists of independent modules which together form
a powerful structured IFF data manipulation system within the LAMPS automated
mapping environment. LAMPS is the *Laser-Scan *Automated *Map *Production
*System. Readers are also referred to the collection of manuals on VMS produced
by Digital Equipment Corporation for the detailed command structure and
facilities. 
.INDEX LAMPS Environment Guide
.INDEX LAMPS

.P 0;It is recommended that the user becomes familiar with the LAMPS
Environment Guide which outlines in some detail the hardware and software
environment required by the LAMPS package as a whole (of which STRUCTURE is but
a part). 

.P 0;All the STRUCTURE modules have common command
syntax which is decoded using the Command Line Interpreter used by the
VAX/VMS utilities. STRUCTURE modules all generate VMS format messages
and set $STATUS on image exit. In command files the success of a
preceding STRUCTURE module may be tested using $STATUS before
proceeding. All STRUCTURE modules are comprehensively documented in the
STRUCTURE Reference Manual and the documentation includes an explanation
of all messages output by the modules together with suggested user
action. Not all STRUCTURE modules handle IFF ZS entries (three
dimensional strings).

.INDEX DAMP
.INDEX VMS HELP
.INDEX STRUCTURE HELP
.INDEX IFF>definition
.INDEX LASERAID
.P 0;IFF stands for *Internal *Feature *File and is the Laser-Scan vector
file format generated by LASERAID and other Laser-Scan mapping systems.
IFF is used as the data structure throughout the Laser-Scan LAMPS system.
IFF files are binary and cannot be manipulated directly using a text
editor. The STRUCTURE package enables the user to perform a wide range
of structured data manipulation tasks related to the requirements of the
automated mapping industry. Within the VAX/VMS system IFF files can be treated
as any other file type for file management purposes. To enable the user to
instantly distinguish an IFF file from a file of another type IFF files have by
default the file extension '.IFF'. 

.INDEX LAMPS
.INDEX IFF>default file extension

.P 0;To provide great flexibility in the production environment IFF
files are referenced by all the STRUCTURE modules using logical name
LSL$IF:. (For an explanation of logical names see volume 2 of the
VAX/VMS document set). Logical name LSL$IF: is assigned to a device and
directory specification either using the VMS ASSIGN command or the
Laser-Scan SI utility. Use of the SI utility is described in detail in
the IFF User Guide. If a device and directory are not included in a command
line file specification, all the STRUCTURE modules will look for the file
in the device and directory pointed to by the logical name LSL$IF:. The
assignment made to LSL$IF: at login time is site dependent and may not
point to the location of your IFF files. It is most important that
the user remembers this and becomes familiar with the SI command. 

.INDEX LSL$IF:
.INDEX IF:
.INDEX Logical names
.INDEX VMS ASSIGN

.NO FILL
.NO JUSTIFY
.LEFT MARGIN -10
.BLANK 3
.TP 12
^*-------------------------------------------------------------------------------\*
.HL 2 ^*GETTING STARTED\*
.INDEX Getting started with STRUCTURE
.INDEX STRUCTURE package initialisation
.INDEX STRUCTUREINI
.LEFT MARGIN +10
.P 0;Once logged in the user must give two commands to initialise the
STRUCTURE package before any IFF manipulation can take place. The
first command is STRUCTUREINI and should be issued thus: (see footnote
for explanation of presentation conventions) 

.FOOTNOTE 
.NO FILL
.FILL
.JUSTIFY
.B 3
^*-------------------------------------------------------------------------------\*
.P 0;The dollar symbol '$' is the default DCL prompt and signifies to
the user that the computer is prompting for DCL commands. At this stage,
any legal VMS command or appropriate Laser-Scan command can be entered
as required. 

.P 0;The convention in all STRUCTURE documents is that ^*bold\* type
which follows the dollar prompt in an example command line indicates
text that the user has typed. For a full description of the nomenclature
and presentation conventions used in the STRUCTURE documentation see
SECTION I of the STRUCTURE Reference Manual. 

.NO FILL
.NO JUSTIFY
.END FOOTNOTE
.NO JUSTIFY

.P 10;$ ^*STRUCTUREINI\*
.INDEX STRUCTUREINI
.INDEX STRUCTUREINI>DCL symbols
.INDEX $STATUS
.INDEX STRUCTURE>message definitions
.INDEX STRUCTUREINI>in login file
.JUSTIFY
.P 0;The STRUCTUREINI command invokes a command procedure which
defines a DCL symbol (the module name) for each of the STRUCTURE
modules. After using STRUCTUREINI the user need only type the symbol
name to activate the chosen module. STRUCTUREINI also installs
process dependent STRUCTURE message definitions. These allow the user to
examine the text represented by the condition code placed in DCL symbol
$STATUS by all STRUCTURE modules on image exit. 

.P 0;As an alternative to explicitly typing the STRUCTUREINI command
each time the user wishes to use the STRUCTURE package, the
STRUCTUREINI command may be placed in the users login file, or in the
site dependent default login file. 

.INDEX SI command
.INDEX LSL$IF:

.P 0;The second command which must be given before using the STRUCTURE
package is the SI command. The SI command assigns the logical name
LSL$IF: (or IF: for short) to the device-directory specification which
contains the IFF file(s) that are to be manipulated. For example: 

.INDEX SI>example
.NJ
.P 10;$ ^*SI DUA3:[BUREAU.TRIALS.DIGITISING]\* 
.J
.P 0;This will assign logical name LSL$IF: to the device and directory
specification DUA3:[BUREAU.TRIALS.DIGITISING] 
.B 3
.LEFT MARGIN -10
.NJ
^*-------------------------------------------------------------------------------\*
.HL 2 ^*SCOPE OF THIS DOCUMENT\*
.LEFT MARGIN +10
.INDEX Scope of STRUCTURE User Guide
.INDEX STRUCTURE>command qualifiers
.J
.FILL
.P 0;The STRUCTURE User Guide is not intended to be a definitive
reference manual describing in detail all the qualifiers to each
STRUCTURE command, each module's functionality or restrictions etc. This
role is met by the STRUCTURE Reference Manual. Instead, this document
describes only the salient features of each STRUCTURE module. It should
be regarded as a statement of package scope and content. The STRUCTURE
User Guide should be used for the initial stages of production flowline
planning or as an aid memoir for skilled STRUCTURE users. 

.P 0;The modules are described in alphabetical order. Each module has a
very brief section outlining its functionality, the format of the
command used to invoke the module and a list of any command qualifiers. 

.LEFT MARGIN -10
.NO FILL
.NO JUSTIFY
.PAGE
.FIGURE 15
.CENTRE; SECTION II\*
.SEND TOC .BLANK
.SEND TOC      SECTION II
.SEND TOC .BLANK
.BL
.CENTRE; ^*MODULE DESCRIPTIONS\*
.SEND TOC            MODULE DESCRIPTIONS
.SEND TOC .BLANK
.INDEX STRUCTURE>Module description

