.lit
ACM						Oct 1986


+---------------------------------+
|                                 |
|    ILINK TECHNICAL REFERENCE    |
|                                 |
+---------------------------------+

.EL

.HL1^&WHAT ILINK DOES\&

ILINK is for the "idealisation" and/or link/node structuring of
graphical data held in IFF format.
.s1
It has several independant functions. The routines which change feature
geometry are as follows:
.ls
.le;ALIGN
.br;Brings close feature sections together into exact alignment

.le;Brings close points together into junctions, either:
.ls
.le;JOIN
.br;where any point comes close to any other
.le;LPJOIN
.br;where feature-ends come close to any other point along a feature
.le;PPJOIN
.br;where feature-ends (or point features) come close to feature-ends
(or point features) only
.els
.els

The routine which changes feature topology is:
.ls
.le;BREAK
.br;Breaks features into separate features at every junction
.els

The qualifier which specifies that IFF output is to be Junction
Structured is:
.ls
.le;STRUCTURE
.br;Writes IFF Junction Structure entries. In this structure, each
separate feature is a link and each junction and free end-point is a
node. 
.els

Only one of the geometry changing functions can be selected for each run
of ILINK.
.s1
BREAK can be selected on its own, or together with any of ALIGN, JOIN,
LPJOIN or PPJOIN. When BREAK is used together with another operation,
features will be broken only at junctions determined by that operation.
When BREAK is used on its own, junctions will be created and features
broken wherever features touch or cross. 
.s1
STRUCTURE can also be selected on its own or with any of ALIGN, JOIN,
LPJOIN, PPJOIN or BREAK. When STRUCTURE is used on its own, the only
nodes in the resulting structure will be at feature ends. In this case
an implicit PPJOIN process will be carried out with a join-tolerance of
zeroplus to determine which end points are shared by more than one
feature. When STRUCTURE is used together with BREAK, the nodes in
the Junction Structure will be free feature-ends and junctions
determined as above. When STRUCTURE is used with ALIGN, JOIN, LPJOIN
or PPJOIN, but without BREAK, then the nodes in the Junction Struture
will be only at junctions determined by that operation.


.page
.hl1^&HOW ILINK DOES IT\&

The sequence in which routines are called is as follows:
.lit


	GET_CMDS	Get DCL-command lines parameters and qualifiers
			and read in any data associated with these

	SHOW_CMDS	Show command interpretation

	GET_FTRS	Read through input file setting data into data
			structure

if PPJOIN is to be used then

	LN2LKND		find link/node structure with NSTOL = JNTOL

	PPJOIN		determine final node positions

else
	ALIGN, JOIN, LPJOIN (or BREAK, when BREAK is specified on its
	own)		Process feature geometry

	BREAK_FTRS	Break features apart at each node

	LN2LKND		Determine link/node structure
end if

	PUT_FTRS	Write output file, transfering features not
			processed from input file and writing processed
			features using both on-line processed data and 
			data from input file, if necessary
			reconstructing whole features from the parts
			which they may have been split up into.

.el

.hl2SETTING UP THE DATA STRUCTURE

Most of the operations in ILINK, BREAK for example, require random
access to every point in every feature being processed simultaneously. 
.s1
The simplest way to achieve this is to read every point into on-line
(virtual) memory. This does have some disadvantages, such as limiting
the maximum number of points which can be processed together to around
100,000 and swamping the system with page-faulting (even when only a
small number of points is actually beiing processed). However, this is
what ILINK does because this is what the QUADSCAN routine, which is
used extensively by ILINK, requires.
.s1
It is not generally required to process every feature in a file.
Features to be processed can be selected by layer (/LAYERS = layer
list) and/or by feature code (/FCP=filename, where file contains
a list of feature-code pairs, specifying explicitly which features
are to be processed with which).
.s1
The FCP file also serves as a means of specifying relative feature
priority when the process in use uses feature priority, such as ALIGN
which moves lower priority features onto higher ones (unless the
MIDPOINT qualifier is active), or ENDS, which moves lower priority
feature ends onto higher ones (unless the MIDPOINT qualifier is
active). If no FCP file is given then feature priority is in proportion
to internal feature sequence number. If an FCP file is given then
features are only processed together if their feature-codes occur in
a pair in the FCP file, and the feature with the higher priority is
taken to be the feature with the code on the right.
.s1
One GET_CMDS has read in every qualifier and any data associated with
these, GET_FTRS reads through each feature in the input file. Each
feature is given a label TRANSFER, REJECT or PROCESS in FTR_STATUS, and
has its file address stored in ADDR, which will be used during output
to relocate input features as necessary. 
.s1
Features selected for processing (every feature from every layer if no
/FCP or /LAYERS qualifier was used) are set into the data structure as
follows:
.ls
.le;All of its points are appended to the PT array
.br;PT(1..2,IPTSTA..IPTFIN) = (x1,y1), (x2,y2), ...

.le;The first and last point indices for feature I_PR_FTR are held in
.br;FTR_PTS(1..2,I_PR_FTR) = IPTSTA, IPTFIN

.le;The PT array is set up as a two way linked list
.br;PRV(IPT) = IPT-1; NXT(IPT) = IPT+1;
.br;PRV(IPTSTA) = NIL; NXT(IPTFIN) = NIL

.le;Each point has access to the feature to which it belongs
.br;PT_PR_FTR(IPTSTA..IPTFIN) = I_PR_FTR

.le;Each processed feature has access to the corresponding input feature
.br;FTR_INFTR(I_PR_FTR) = IN_FTR

.le;Each processed feature has access to the original processed feature.
(This will later be used as an original-processed-feature identifier
when a processed feature is broken into separate parts at nodes).
.br;FTR_ORIG_PR_FTR(I_PR_FTR) = I_PR_FTR
.els

Closed-loop features have first point = last point. All features have
PRV for first point and NXT for last point = NIL (the "null pointer"
value, actually = 0).
.s1
One-point features are treated as zero length one-vector features
(ie. they are held as two separate points with equal coordinates).
This may seem wasteful, but it does allow point-features to be processed
by the same vector-processing routines which process all other
features. This makes the code both more simple and more robust, since
non-point features can easily contain zero-length vectors (duplicate
points).
.s1
Point-features are identified as such on input:
.br;	PNT_FTR(I_PR_FTR) = .TRUE.
.br;Any other features which become single-point features during
processing, for any reason, are ^&deleted\&. 


.hl2GEOMETRY PROCESSING

.lit
+---------+
|  ALIGN  |
+---------+

.el
Brings close feature sections into perfect alignment as follows:
.ls
.le;Wherever the closest points onany two vectors eligible for alignment
(which may ^&not\& be from the same feature) come within alignment
tolerance, the closest point on each vector to the end points on the
other vector are inserted into the vector. If the vectors intersect
then the intersection point is also inserted into both vectors (points
are not inserted where they are very close to points which already
exist on a vector).

.le;Every point is then pointed to the nearest point within alignment
tolerance with the lowest feature priority higher than its own.

.le;Every point is then pointed through any points it may point to
which point to further points, to a point which points no further - a
"base" point. 

.le;After some fiddling around attempting to ensure that the resulting
alignment is sensible (which does not yet always seem to be 100%
successful), every base point is then pointed back to the point pointing
to it which is nearest.

.le;After creating new points to pair with base-points which are not yet
paired (because it is important that base-points are not deleted),
all points which have been pointed to at any stage, or point to other
points, but are are not now paired, are deleted (except for points
which point to a point which is paired with another point, neither of
which are in the same feature as the original point, such as occur
near to junctions and where more than two features are aligned onto
the same section os base feature). 

.le;All points in point/base-point pairs are moved to the same position
as the base point.

.le;All points which point to a base point but are not paired and have
not been deleted are now moved to the same position as the base point.
Note that this could not be done in the stage before this because if
the MIDPOINT qualfier is active the base-point does not have its
position fixed until all points in point-pairs have been moved to their
mid-point. 

.le;Each feature is traversed, marking both points in each pair where
base-point feature index changes as points which are at nodes.
.els

ALIGN ends here. Further processing is in common with other procedures
and is described later.


.lit


+----------+
|  LPJOIN  |
+----------+

.el 
Joins point and feature-end points to features, anywhere along the
feature length (carefully avoids joining end-points to end-points, which
is a job for PPJOIN, described below). LPJOIN works as follows:
.ls
.le;Wherever a feature-end vector comes within max(EXTOL,JNTOL) of any
other vector from any eligible feature (which may be the same feature),
if the free end of the end-vector can be projected onto the other vector
by a distance < EXTOL, or truncated by a distance < min(EXTOL,
vecor-length), then a point is inserted into the other vector at this
postition. Otherwise a point is inserted  into the other vector at the
nearest position to the free end point (if a point does not already
exist at this position on the other vector). 

.le;Every end-point is then pointed to the nearest point to it (or to
the nearest original point within JNTOL if the VERTEX qualifier is
active). 

.le;Every end-point is now moved to the position of the point it points
to (if any) - except when the point pointed to is on the same feature as
the end point, when the end-point will only be moved if the separation
^&along the feature\& between the two points is < JNTOL. All points
moved onto are marked as being at a node. 

.els

.lit


+----------+
|  PPJOIN  |
+----------+

.el 
Joins points and feature-end points to the same.
.s1
After points and end-points have been assigned to nodes by the LN2LKND
process described below, the final position of these nodes is determined
as follows: Any junction formed by the joining of exactly two
end-vectors (irrespective of any point-features which may also be drawn
into this junction), is located by projecting the end-vectors together
where possible (as in LPJOIN). Otherwise the junction is located at the
centre of gravity of all the points and end-points meeting there (the
position already set by LN2LKND).


.hl2TOPOLOGY PROCESSING

.lit
+---------+
|  BREAK  |
+---------+

.el 
If BREAK is specified as a process on its own then this routine is used
to breaks features into separate parts at every point where they touch
or cross, as follows: 
.ls
.le;At every point where any two eligible vectors touch or cross, a new
point is inserted into both vectors (if a point is not already at this
position) and in marked as being at a node. 
.els

.lit
+--------------+
|  BREAK_FTRS  |
+--------------+

.el 
After geometry processing, the next stage is to break features at every
point now marked as being at a node - except for the PPJOIN process,
where this process does not apply as the only nodes to be found are all
at points or feature end points. 
.s1
BREAK_FTRS works as follows:
.ls
.le;Each feature is traversed, terminating the current feature and
creating a new feature at every point along the original feature which
is now marked as being at a node. Each feature must start and end with
its own independant end points, becausea shared point would not be able
to link into more than one feature's pointlist simultaneously. So, for
each point marked as at a node, a new point is created with the same
position as the original node point This point is used to close the
current feature, while the original node point is used to start the new
continuation feature.
.s1
Every new feature I_PR_FTR which is created as a part of an original
feature ORIG_PR_FTR has the original processed-feature index recorded
.br;	FTR_ORIG_PR_FTR(I_PR_FTR) = ORIG_PR_FTR
.br;This gives access from every feature to the original feature from
which it originated. Later on this is used in order to reassemble
whole features from the parts they may have been broken into;
to provide each part-feature with a unique parent-feature identifier;
and to obtain the parent-feature's input IFF address so that its
original contents can be transfered to each part feature output.
.els
.lit


+-----------+
|  LN2LKND  |
+-----------+

.el
LN2LKND (LiNe to LiNk-NoDe structure conversion) locates nodes and
creates a link/node structure of data giving access from each link to
the nodes at both ends, and from each node to all of the links which
join there, and to the direction in which they run. 
.s1
The tolerance NSTOL (Node Separation TOLerance) used here = ZEROPLUS
(= 1E-4) for (BREAK, ALIGN, JOIN, LPJOIN), but = JNTOL for PPJOIN.
.s1
This is done as follows:
.ls
.le;The position of each point and feature-end point is checked for
being within NSTOL (Nodes Separation TOLerance) of the position of
every node record so far created.
.s1
The image is divided into 10x10 node sectors to speed up this N**2
process, though this is complicated internally by the fact that nodes
within NSTOL of more than one node sector must be included in every
such sector - ie. all sectors must effectively overlap by NSTOL.

.le;If no existing node is found within NSTOL within the sector into
which the point or end-point falls, then e new node record is created
with the position of this point and inserted into this sector (and also
into any other sector overlapping this sector which it may also fall
within). Otherwise, if an existing node is found within NSTOL of this
point in this sector, then this node will have itsposition adjusted to
be the centre-of-gravity of all of the points falling into it so far. 

.le;Whether the node is new or not, the node index for the start and
end of each feature is recorded in FTR_NDS(1..2,I_PR_FTR), and as the
node is identified for each feature-end, the feature index is recorded
in a linked-list of arms connected to this node. This arm list is
accessed from each node by a pointer to the head of the list, HEADARM.
Each arm in the arm list is a record with two fields. ARM(ARM_FTR,IARM)
is the processed-feature index, signed positive if the feature is
leaving the node; negative if entering. ARM(ARM_NXT,IARM) is a pointer
to the next arm in the arm list for this node. The list is terminated
by a nul-pointer (NIL). 
.s1
Note that point features are connected to a node by ^&one arm only\&.
.els

This results in a structure in which every feature has access to the
node at its start and end (point- and closed- features pointing to the
same node at each end), and every node has access to all of the
features which join there - and whether they are ariving or leaving. 

.PAGE
.hl1^&SORTING NODE-ARMS and DUPLICATE-FEATURE IDENTIFICATION\&

After the link/node structure has been created by LN2LKND, the
arms for each node are always sorted so that the angle which each arm
leaves the node (measured anticlockwise from the positive X-direction),
is increasing.
.s1
Angles are calculated from the vector which joins to the node. Angles
of zero are treated as 2*PI instead, so that the angle zero can be
reserved to signify that the angle is undefined because the vector is
a single point and had no direction.
.s1
Duplicate features are identified during this process as described
below. 

.lit


+-------------+
|  SORT_ARMS  |
+-------------+

.el
Node arms are sorted and duplicate-features identiied as follows:
.ls
.le;For each node the (signed) feature indices in the arm list for this
node are set into an array. The angle (as defined above) at which each
of these features leaves this node are then set into another array.
These two arrays are then sorted together by arm angle so that the
angle array is sorted into increasing order. 

.le;Whenever the sorted list contains arms angles which are ^&exactly\&
equal, this means that the corresponding two features must be
geometrically identical along their entire length - because if they were
not, they would have to part at some point, at which there should
already be a node, between this node and the next. If features have
already been broken into separate parts at every node implicit in their
geometry, then there cannot be such a node along any feature.
.s1
This test for duplicate point-strings is only valid when features have
been broken at every implicit node, which is not the case when the
processing routine used was LPJOIN or PPJOIN, so these processes will
not identify any duplicate feature sections which may be present in
features input for processing, or which may arise during processing -
and will allow such sections to overlap. 
.s1
Where two features are found to be identical, the feature with lower
feature-priority is "taken into" the feature with higher priority, and
its arms are deleted at both ends. This is achieved by providing each
feature with a linked list of features which share it. The list is
accessed from the feature via HEADSHR. Each sharing feature record
has two fields. SHR(SHR_FTR,ISHR) holds the processed-feature index;
SHR(SHR_NXT,ISHR) holds a pointer to the next SHR record. The list
is terminated by a nul-pointer.
.s1
The feature which is taken in to the other is marked with
.br;	FTR_PTS(1,I_PR_FTR) = NIL
.s1
Having sorted these two arrays together - eliminating from them any
reference to features which are now taken into other features - the
arms list for this node is reassembled from these sorted arrays. 
.els

.hl1^&OUTPUT\&

All output is done by PUT_FTRS. Each original input-feature (as opposed
to each processed-feature, which is all features taken in for
processing, together with features resulting from breaking these
features into parts), is processed in turn. Every feature is now marked
either for TRANSFERing, REJECTing, or having been PROCESSed.
.s1
If it is to be rejected then it is just counted.
.s1
If it is to be transfered then TRANSFER_FTR uses the original-feature
IFF address to locate the feature in the input IFF file, from where all
of itss original entries are transfered, except that it gets a new NF
entry and AC-type-9 entries (parent-feature identifiers from a previous
run of ILINK) and JP entries are ignored, as these are no longer
meaningful.
.s1
If the feature has been processed then it is output by WRITE_FTR.

.lit


+-------------+
|  WRITE_FTR  |
+-------------+

.el
WRITE_FTR accesses all of the parts into which the original feature may
have been broken by starting with the original processed-feature index
to access the first part, and then using GET_NEXT_PT_FTR to search
from N_ORIG_PR_FTRS+1 upwards for a continuation feature with a matching
original-feature index recorded in FTR_ORIG_PR_FTR (all continuation
features arising from original feature I_PR_FTR have processed-feature
indices which are contiguous and start above N_ORIG_PR_FTRS).
.s1
If the original feature is to be output whole then WRITE_FTR
reassembles a feature from its parts, acessed as above, using
APPEND_FTR, and the uses WRITE_WHOLE_FTR to output the whole feature.
Otherwise it passes each part of this original feature to
WRITE_PART_FTR. 

.lit


+------------------+
|  WRITE_PART_FTR  |
+------------------+

.el
WRITE_PART_FTR first looks to see how many features share this feature.
If none share then the feature-code is taken from the input file. It is
is shared then, if the FCC (Feature Code Combination) qualifier has
been used then an array containingthe feature codes from each of the
sharing features is set up, sorted into increasing order with
duplicates removed and then matched against all of the feature-code
combinations taken from the FCC file. If the combination matches then
the special feature code for this combination of shared features is
used. If the combination does not match, or if the FCC qualifier has
not been used, then the shared-feature feature code SHRFC set by the
SHRFC qualifier (default=999) is used. 
.s1
If the feature is not shared, but has been broken, then an AC-type-9
entry is (optionally) written next (if the /PARENT qualifier is active)
holding the parent-feature processed-feature index as a unique
identifier for the parent feature from which this broken section of
feature arises. 
.s1
If the feature is shared then for each sharing feature (including
this feature) an AC-type-1 (secondary feature-code) entry is written
holding the feature code from the parent feature from which the shared
feature originated; followed (optionally) by an AC-type-9 parent
identifier entry (as above); followed by every AC entry which may
have been present in the original feature - except for AC-type-9's
which are ignored as no longer meaningful.
.s1
If the /STRUCTURE qualifier is active then, before the ST entry,
a JP (Junction Pointer) entry is written. This will eventually
point to the Junction Block and give the offset from the start of this
block of the node which the start of this feature is connected to. But
as the Junction Block is not written untill after the last feature has
been written, the JP entry here is used only to reserve space for this
data which can then be filled in later on, and to hold in the mean time
the node index for this node in memory.
.s1
Next the ST entry is written. The output file IFF address of the start
of this ST entry is stored in FTR_DAT(FTR_ST,I_PR_FTR) = LPOSE, and the
number of points in the ST is stored in FTR_DAT(FTR_NP,I_PR_FTR) =
NLPTS, so that when it comes to write the JB (Junction Block) entries,
the data to be inserted in the JB is available.
.s1
If the feature is not a point-feature and the /STRUCTURE qualifier is
active then another JP entry is written after the ST which will
eventually point to the node which the end of this feature is connected
to.
.s1
Then an EF entry is written as usual.

...
