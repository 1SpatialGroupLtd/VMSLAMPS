.PAGE
.NOFILL
^*--------------------------------------------------------------------------------\*
.FILL

.BR;^*MODULE####ICASE\*

.NOFILL
^*--------------------------------------------------------------------------------\*
.FILL

.HL 2 ^*FUNCTION\*

.LM +10
ICASE is suited to the production of large scale schematic road casings and
area fills as often seen in road atlases. Given a junction structured IFF file
containing road centrelines, a table of feature codes, priorities and road
widths, the program will create an output IFF file containing road casings and
area fills for the selected features. It is important to realise that the input
road centreline data must be geometrically clean to prevent spurious results
occurring.
.BL
Note that for small scales work, it is often easier to generate road casings
'on the fly' during display and plotting, using the prioritised multiple
representation capabilities of FRTLIB now used in LITES2 and FPP.
.LM -10
.BLANK
.NOFILL
^*--------------------------------------------------------------------------------\*
.FILL

.HL 2 ^*FORMAT\*

.LM +10
.NOFILL
$ ICASE file-spec file-spec

^*Command qualifiers                   Defaults\*

/[NO]CASINGS                         /CASINGS
/[NO]FILLS                           /FILLS
/FRT=file-spec                       No FRT
/PARAMETER=file-spec                 Parameter compulsory
/TOLERANCE=real                      Minimum casing width

.FILL
.LM -10

.TP 9
.NOFILL
^*--------------------------------------------------------------------------------\*
.FILL

.HL 2 ^*PROMPT\*

.LM +10
.NOFILL
From:     Input-IFF-file
To:       Output-IFF-file

.FILL

.LM -10
.TP 9
.NOFILL
^*--------------------------------------------------------------------------------\*
.FILL

.HL 2 ^*PARAMETERS\*

.LM +10
.P -10;Input-IFF-file
.P -2;-#Specifies the IFF file which is to be processed. Any part of the 
filename which is not specified will be taken from the default specification
'LSL$IF:IFF.IFF;0'. 

.TP 10
.P -10;Output-IFF-file
.P -2;-#Specifies the IFF file which is to be created to contain all the
road casings and area fills corresponding to the selected input centreline
features. The input road centrelines are not copied to the output file.
Any part of the filename which is not explicitly given will be taken
from the parsed input specification.

.LM -10
.BLANK
.TP 10
.NOFILL
^*--------------------------------------------------------------------------------\*
.FILL

.HL 2 ^*COMMAND QUALIFIERS\*

.LM +10

.BLANK
.TP 6
.I -10
/[NO]CASINGS
.P -2
-#this qualifier is used to select the output of road casings. Each input
feature declared in the parameter file will be used to create two casings
in the output file with the specified width and feature code.

.BLANK 2
.TP 6
.I -10
/[NO]FILLS
.P -2;
-#this qualifier is used to select the output of fill areas. Each input
feature declared in the parameter file will be used to create a corresponding
area feature in the output file with the specified width and feature code.
Appropriate road ends at junctions will be generated depending on the
priorities attached to the input road centreline features.

.BLANK 2
.TP 6
.I -10
/FRT=file-spec
.P -2
-#allows the user to specify an FRT file which is used to verify the graphical
types of the feature codes given in the parameter file. An error message will
occur if any input road centreline or output casing feature codes are not of
graphical type 1 or if any output fill areas are not of graphical type 12.

.BLANK 2
.TP 6
.I -10
/PARAMETER=file-spec
.P -2
-#this compulsory qualifier specifies a file containing a Road Casing Table.
This table declares which features of the input file will be processed and
what their respective casings and fills will look like. An example parameter
file follows with an explanation of its contents.
.BL
.TP 12
.LITERAL
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Example parameter file containing the                          !
! Road Casing Table for use with ICASE                           !
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!                                                                !
!                                                                !
!     FC   Priority  CaseFC  FillFC  CaseWid  FillWid            !
!                                                                !
RCT   404     5       1       800     105.0    100.0             !
RCT   405     1       3       802      55.0     50.0             !
!                                                                !
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
.END LITERAL
.TP 10
.BL
The columns of the table are all compulsory and are as follows:
.LM +7
.LIST
.P-11;^*RCT\*######-#Denotes a line as belonging to the Road Casing Table.
.P-11;^*FC\*#######-#The feature code of input road centrelines. If /FRT is
used to verify the parameter file, this feature code must be of graphical
type 1.
.P-11;^*Priority\*#-#The priority of the input road centrelines which is used
to determine how the roads should be terminated when roads of differing feature
codes meet. The values in this field can be any positive integer and only
needs to reflect the priority of roads relative to each other. The road with
the highest priority will have all other roads give way to it and will never be
broken at junctions unless it terminates. 
.P-11;^*CaseFC\*###-#The feature code of output road casings. If /FRT is used
to verify the parameter file, this feature code must be of graphical type 1.
.P-11;^*FillFC\*###-#The feature code of output area fills. If /FRT is used
to verify the parameter file, this feature code must be of graphical type 12.
.P-11;^*CaseWid\*##-#The width (in IFF units) of the output road casings. This
value is the total road width from casing to casing. It should typically be
slightly larger than the fill width so that the casing touches the area fill.
.P-11;^*FillWid\*##-#The width (in IFF units) of the output area fills and
should typically be slightly less than the casing width taking into account
the width of the casing line.
.END LIST
.LM-7
.BL
Lines starting with exclamation marks are comment lines and will be ignored.
.BLANK 2
.TP 6
.I -10
/TOLERANCE=real
.P -2
-#allows the user to specify the warning tolerance. If part of a line segment
is smaller that this tolerance, a warning message will be given to help
identify the feature as potentially causing a problem. If this qualifier is
not given, the tolerance will default to the minimum casing width of all
entries held in the parameter file.

.LM -10

.BLANK
.TP 10
.P 0
^*--------------------------------------------------------------------------------\*
.HL 2 ^^^*RESTRICTIONS\*

.LM +10

.P 0
The parameter file specified using /PARAMETER is compulsory.
.P 0
ICASE will not simulate bridges and so heighted data cannot be used to
determine if a road crossed another.
.LM -10

.BLANK
.TP 10
.NOFILL
^*--------------------------------------------------------------------------------\*
.FILL

.HL 2 ^*DATA PREPARATION\*
.LM +10

.BLANK
It is ^*ESSENTIAL\* that at least the following three ILINK processes are
performed (in the order given) before the program is run:
.BLANK
.LM+4
^*
.BR;ILINK/BREAK######TEST.IFF TEST.IFJ
.BR;ILINK/STRUCTURE##TEST.IFJ TEST.IFJ
.BR;ILINK/SORTARMS###TEST.IFJ TEST.IFJ\*
.LM-4
.BLANK
Other ILINK processes (such as /PPJOIN, /LLJOIN or /LPJOIN) may be useful in
order to snap points together or onto other lines. Refer to the ILINK
reference manual for details.

.BLANK
Remember that the reported FSNs of any input features causing spurious results
will be in the junction structured IFJ file, not in the original IFF file.
In order to eradicate these short line segments, it is recommended that the
^*structured\* file be edited using LITES2. This is because the original
file may not have the erroneous points since ILINK may have introduced them. 

.BLANK
When saving the file from LITES2, any structure in the file will be corrupted.
Therefore it is vital to ^*REMEMBER TO RE-STRUCTURE THE IFF FILE USING THE 3
COMPULSORY STAGES OF ILINK\* mentioned above.

.BLANK
Even though post editing is likely to be necessary anyway it is probably
quicker and more efficient to correct as many problems in the input file as
possible. This way, the program can do most of the work and the amount of
post-editing can be kept to a minimum.

.BLANK
Until experience is gained in how 'clean' the input data should be, it is
likely that spurious result will occur.
The first time the program is run on a data set, it is recommended that road
fills are disabled to make it easier to see any problems with the casings. This
could be done using LITES2 so that the area features are not present to obscure
the casings. Once satisfied that all spurious errors have been removed from the
casings, the program should be run again to generate both casings and area
fills. Once the casings are error free it is likely that the road fills will
also be clean since they are narrower than the casings.

.BLANK
In order to prevent the omission of any steps, an example command file is
given below. Clearly, the tolerances in the example should be adjusted to
reflect the resolution of the particular data set.

.TP 15
.BLANK
.BR;_$! Example command file for use with ICASE
.BR;_$!
.BR;_$#######SI LSL$DATA__ROOT:[TEMP]
.BR;_$!
.BR;_$#######ILINK/BREAK####################TEST.IFF TEST.IFJ
.BR;_$#######ILINK/LPJ/JNTOL=2.0/EXTOL=2.0##TEST.IFJ TEST.IFJ
.BR;_$#######ILINK/PPJ/JNTOL=2.0/EXTOL=2.0##TEST.IFJ TEST.IFJ
.BR;_$#######ILINK/STRUCTURE################TEST.IFJ TEST.IFJ
.BR;_$#######ILINK/SORTARMS#################TEST.IFJ TEST.IFJ
.BR;_$!
.BR;_$#######ICASE#/PARAMETER=LSL$DATA__ROOT:[TEMP]TEST.PAR -
.BR;##############/CASINGS -
.BR;##############/FILLS -
.BR;##############/FRT=LSL$FRT:TEST.FRT - 
.BR;##############TEST.IFJ -
.BR;##############TEST__CASED.IFF
.BR;_$!
.BR;_$#######PURGE#TEST._*
.BR;_$!

.LM -10

.BLANK
.NOFILL
^*--------------------------------------------------------------------------------\*
.FILL
.HL 2 ^*DESCRIPTION\*
.LM +10

.BL
When the program is invoked, the command line is interpreted and the parameter
and FRT file (if specified) are read in. After decoding the command line, an
initial pass of the IFF file is performed to check the file contents and store
its junction structure internally.

.BL
A second pass of the input file is then performed to produce casing and/or
area fills corresponding to the input road centrelines specified in the
parameter file.

.BL
When producing casings, each line segment is considered in turn and casing
features generated for each side. To do this, the centrelines joining the
junction nodes at each end are used to determine the casing intersection
points. It is therefore essential that the node arms have first been sorted
using ILINK/SORTARMS in order to determine which centrelines are adjacent to
the current one.

.BL
Producing area fills is more involved. Priorities assigned to features are used
to determine how roads fills will join others that they meet at junction nodes.
.P 0
Roads joining others with equal priority will have area fills that are
'spliced'. (ie both road area fills taper to a point and join at the junction
node). This will look acceptable if the two road fills are of the same colour.
An example of this is shown in Figure 1 with road fills of different colours
to show the effect. This effect will not occur if all road priorities in the
parameter file are different.
.P 0
When two roads of differing priorities meet, the fill of the lesser priority
road will give way to the other and be butted up to it. This is shown by the
diagram in Figure 2. This is the more acceptable way of joining road fills
and can be achieved if all the priorities in the parameter file are different.

.BL
Figure 3 shows examples of erroneous road casings generated because of the
presence of short line segments, often at road junctions. It is not always
enough for the input road centreline data to be geometrically clean, but must
also be devoid of line segments which are shorter than at least the minimum
casing width. Usually, this only applies to short line segments at road 
junctions, but the first diagram in Figure 3 shows and example of a sharp
angle containing a short line.

.BL
These short lines cause problems because every point in a feature is used to
generate the casing and area fill, and if the perpendicular distance of a
point from a junction node is less than an adjacent road width, the casing
generated from this erroneous point will overshoot the intersection point.
Roads joining at an acute angle often cause this effect. An example of this
can seen in the right hand diagram of Figure 3.

.BL
The output file can now be examined in LITES2 to check for any problems. If
these are relatively minor, the output file could be edited to remove them.
Severe errors may involve examining the input file for the source of the
problem(s) as described above.

.LM -10
.PAGE
.NOFILL
^*--------------------------------------------------------------------------------\*
.FILL
.HL 2 ^^^*FIGURES\*
.LM+10
.BL -1
###################Figure 1.
.PAGE
.BL -1
###################Figure 2.
.PAGE
.BL -1
###################Figure 3.
.LM-10
.PAGE
.P 0
^*--------------------------------------------------------------------------------\*
.HL 2 ^^^*EXAMPLES\*
.BL
$#^*ICASE/NOFILLS/CASINGS/PAR=TEST4.PAR/FRT=HERE:TEST TEST4.IFJ TEST4__CASED.IFF\*
.literal
FRT file:          LSL$DATA_ROOT:[TEMP]TEST.FRT;1
Parameter file:    LSL$DATA_ROOT:[TEMP]TEST4.PAR;14
Warning Tolerance: 5.0
Road Casings:      Selected  
Road Fills:        Deselected  
Performing initial pass of IFF file...
Generating output features...
%ICASE-W-SHORTSEG, short line segment in FSN 23 may give spurious results
%ICASE-W-SHORTSEG, short line segment in FSN 54 may give spurious results
%ICASE-W-SHORTSEG, short line segment in FSN 56 may give spurious results
Operation successful.
 ELAPSED:    0 00:00:11.14  CPU: 0:00:02.10  BUFIO: 7  DIRIO: 166  FAULTS: 121 
$
.end lit
.BL
.LM +10
This examples shows the warning messages produced because three features
contained line segments which were shorter that the warning tolerance. It is
recommended that the output file be examined around these features to see if
any spurious result occurred. This could be done by reading both the input and
output file into LITES2 to see what effect these features had. If there is
an obvious problems the input file, TEST4.IFJ, it should be edited and saved.
It must then be restructured before running the program again.

.LM -10
.BLANK

.!******************************************************************************
.! get the messages
.!
.REQUIRE "ICASEMSG.RNO"
