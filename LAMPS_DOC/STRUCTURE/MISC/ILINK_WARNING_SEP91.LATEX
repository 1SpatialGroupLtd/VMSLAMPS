\documentstyle[11pt,a4wide,parskip,ital,memo]{ukart}
\begin{document}
\memo{All users of program ILINK in Laser-Scan STRUCTURE package.}
{Paul Hardy, Chief Programmer, Laser-Scan Ltd.}
{ILINK -- Warning about rounding tolerance.}
{27-Sep-1991}
\section {Introduction}
At the recent Laser-Scan User Group meeting at Reading, a customer reported a
problem with program ILINK in the STRUCTURE software package. It arose during
checking of  some network data supplied by a third party also using LSL
software.

The data had been checked by using ILINK with the /FREE\_ENDS qualifier which
had not reported any free ends. However, when checked with their own program,
it had small gaps at some junctions.

\section {Analysis}
More discussion and investigation at LSL showed that the data in question
had been digitised as spaghetti, but with start and end points of features
`snapped' to existing features using the FIND command of the LSL LITES2
cartographic editor. It had then been processed using ILINK, but only using
the /BREAK qualifier. 

Data for geometry idealisation and network structuring is normally run through
three of the main phases of ILINK geometry processing, ie:
\begin{enumerate}
\item
/LPJOIN processing will move endpoints of features onto neighbouring features,
extending or truncating the end vector as needed. Tolerances JNTOL and EXTOL
control the distance moved.
\item
/PPJOIN processing will  move endpoints of neighbouring features to form a
common junction position. Tolerances JNTOL and EXTOL control the
distance moved.
\item
/BREAK processing will break features where they cross or touch, inserting
new points in the broken features. No points are moved by /BREAK processing.
No specific tolerance is available to control /BREAK processing.
\end{enumerate}

The other ILINK geometry processing phase available is /LLJOIN which moves lines
sideways onto other lines. It is only needed if two original overlapping
datasets have been merged, or if double digitising is suspected.

The data in question had had only the third of the above phases applied.

The user who supplied the data thought that /LPJOIN and /PPJOIN
processing was not needed because the end points had been snapped onto the
lines
by LITES2. However, snapped positions in LITES2 will have been through
very different computation than ILINK, involving calculating and writing a
position in screen coordinates for the screen cursor as part of the FIND
command, then reading it back as part of the START command.

\section {Precision of computer arithmetic}
To a human, working with a mental model based on the infinite precision of
mathematics, it is perfectly reasonable to say ``The start point of this line,
lies exactly on the straight line between point A and point B on this other
feature''. To a computer program however, regardless of how it is written,
in what language or for what hardware, things are not so black and white.

The coordinates of a point are held and manipulated on a computer as floating
point values which are approximations to the ideal mathematical concept. In the
same way as $\frac{1}{3}$ or $\pi$ cannot be written down as an exact decimal
fraction (they are approximately 0.333333333 and 3.141592653), then any
coordinate in floating point must be rounded to some storable value. 

When arithmetic is done on floating point numbers in a computer, then things
get worse. In mathematics, the order of operations is irrelevant. $A \times B
\times C$ is the same as $C \times B \times A$. However any computer
implementation of floating point may well come up with different answers for
these expressions. 

Hence computer programs never
test for equality between floating point values which result from floating
point expressions. Instead, the values are subtracted and the result checked
against a small tolerance. This tolerance however may need to vary according to
the magnitude of the numbers being compared.

ILINK is aware of this problem, and hence {\em all} comparisons are made
using a rounding tolerance. In versions of the program before V4.5
of 9-Sep-1991, there was no user control over this tolerance, and it was
calculated by ILINK as 1/500,000th of the map range. V4.5 introduced a new
tolerance qualifier /MINTOL to allow the user to control this. ILINK V4.5
is available in the next LAMPS release, being shipped by LSL from November
1991.

\section {Problem Statement}
The ILINK option /FREE\_ENDS will not report free ends where the distance
between the end point in question and the nearest other end point is less than
the rounding tolerance.

These small gaps can arise through use of /BREAK without /LPJOIN and /PPJOIN,
as /BREAK processing does not move any existing points, and the calculated break
position may not exactly match the existing end point.

\newpage
\section {Example}
The following drawing shows, much magnified, a typical example of problem data.

\begin{picture}(400,150)
\put (200,100){\line(+6,-1){180}}
\put (200,100){\circle{4}}
\put (200,100){\line(-6,+1){180}}
\put (196,93){\circle*{4}}
\put (196,93){\circle{40}}
\put (196,93){\line(-1,-6){18}}
\put (220,120){\vector(-1,-1){10}}
\put (220,120){Rounding tolerance radius}
\put (10,13){\circle*{4}}
\put (12,10){ = line end position}
\put (10,23){\circle{4}}
\put (12,20){ = /BREAK position}
\end{picture}

\section {Solutions}
There are several ways to overcome these problems:
\begin{enumerate}
\item
If the data is put through full ILINK processing including /LPJOIN and /PPJOIN,
even with a very small tolerance, then the problem does not occur, because the
junction points will already have been snapped to unique values.
\item
Exporting the data to a transfer format such as NTF will usually solve the
problem by rounding coordinates to nearest integer values. It is always
possible however to get pathological cases which are very close but round in
different directions.
\item
Using the latest version of ILINK, you can specify MINTOL as a very small
value, which will force /FREE\_ENDS to report all gaps. If MINTOL is zero
however, then occasional spurious gaps may be reported due to floating point
expression precision.
\end{enumerate}

\section{Conclusions}
\begin{enumerate}
\item
The reported problem is an artefact of the finite precision of computer
arithmetic. 
\item
The particular case was provoked by an assumption about
the validity of using only part of the ILINK processing suite. 
The implications however should be noted by all users of ILINK. 
\item
There are a set of simple solutions available, using the current
version of ILINK.
\item
The next version of ILINK (V4.5) which gives further controls will be shipping
from November. It is available from Laser-Scan now at $\beta$ test level upon
request.
\end{enumerate}
\vspace{10mm}
\center{Paul Hardy}
\end{document}
