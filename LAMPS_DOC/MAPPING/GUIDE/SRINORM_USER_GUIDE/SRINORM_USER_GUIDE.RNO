.!** set up Qume page format
.LEFT MARGIN  0
.RIGHT MARGIN 80
.PAGE SIZE    60,80

.!* ensure that .NO FILL also retains blank lines
.KEEP

.!* enable the use of ^*...\* and * as bolding flags
.ENABLE BOLDING;.FLAGS  BOLD

.!* change the way .HL works
.!*	n1=6	lowest  level to have 'run-in' format
.!*	n2=2	highest level to have title in uppercase - ie 1 & 2 will have
.!*	n4=0	lowest  level not to have section number at left
.!*	n6=0	number of blank lines before header
.STYLE HEADERS 6,2,,0,,0

.!* Set the page layout for double sided copying, ie page numbers at bottom
.!* centre and title switching sides according to odd or even page number
.LAYOUT 2,2

.!* ensure that .INDEX entries will be transmitted as they were typed
.XLOWER

.!
.! Define the title for the document
.!
.TITLE SRINORM User Guide
.NO SUBTITLE
.!** title page
.!
.!******************************************************************************
.FIGURE 14
.CENTRE ;^*Laser-Scan Ltd.\* 
.BLANK 2
.CENTRE ;^*SRINORM\*
.BLANK 2
.CENTRE ;^*SRI and TRI file normalisation\*
.BLANK
.CENTRE ;^*Version 1.1  3-April-1990\*

.FOOT
.FLAGS SUBSTITUTE
.NOFILL
Copyright (C) $$year Laser-Scan Ltd.
Science Park, Milton Road, Cambridge, England CB4 4FY  tel: (0223) 420414

Document "SRINORM User Guide"					Category "USER"
Document Issue 0.0	T. Hartnall				27-Jan-1987
Document Issue 1.0	T. Hartnall				29-Jan-1987
Document Issue 1.1	R.W. Russell				 3-Apr-1990
.FILL
.NOFLAGS SUBSTITUTE
.END FOOT
.!******************************************************************************
.!
.!*
.!* Change record
.!*
.PAGE
^*--------------------------------------------------------------------------------\*
.HL 1 ^^^*SRINORM_ user_ guide_ change_ record\*
.BLANK
^*--------------------------------------------------------------------------------\*
.P0;^*Version 0.0    Tim Hartnall                               27-January-1987\*
.LM +10
.P0; Provisional issue of SRINORM User Guide.
.LM -10
^*--------------------------------------------------------------------------------\*
.P0;^*Version 1.0    Tim Hartnall                               29-January-1987\*
.LM +10
.P0; First issue of SRINORM User Guide.
.LM -10
^*--------------------------------------------------------------------------------\*
.P0;^*Version 1.1    Ron Russell                                3-April-1990\*
.LM +10
.P0; Add information about processing files with 'ZS' entries
.LM -10
^*--------------------------------------------------------------------------------\*
.PAGE
^*--------------------------------------------------------------------------------\*
.HL 1 ^^^*PREFACE\*
.BLANK 2
^*--------------------------------------------------------------------------------\*
.HL 2 ^^^*Intended audience\*
.LM +10
.P 0;This manual is intended for the flowline manager of the Laser-Scan MAPPING
package under the VAX/VMS operating system. 
.LM -10
^*--------------------------------------------------------------------------------\*
.HL 2 ^^^*Associated documents\*
.LM +10
.P 0;For details of the role of SRI (Symbol Representation IFF) and TRI
Text Representation IFF) files see the FRT User Guide. For information about
IFF (*Internal *Feature *Format) files see the IFF User Guide. 
.BLANK
.TP 20
.LM -10
^*--------------------------------------------------------------------------------\*
.HL 2 ^^^*Conventions used in this document\*
.NO FILL
.BLANK
.LEFT MARGIN +10
----------------------------------------------------------------------
Convention            Meaning
----------------------------------------------------------------------
_<CR_>                  The user should press the carriage control key
                      on the terminal
.BLANK
_<CTRL/x_>              The phrase _<CTRL/x_> indicates that the user must
                      press the key labelled CTRL while simultaneously
                      pressing another key, for example, <CTRL/Z>.
.BLANK
$ ^*SRINORM JIM<CR>\*       Command examples show all user entered
                      commands in ^*bold\* type.
.BLANK
$ ^*SRINORM JIM<CR>\*     Vertical series of periods, or ellipsis, mean
        .             either that not all the data that SRINORM would
        .             display in response to the particular command is
        .             shown or that not all the data that the user
                      would enter is shown.
.BLANK
file-spec...          Horizontal ellipsis indicates that additional
                      parameters, values or information can be
                      entered.
.BLANK
[logical-name]        Square brackets indicate that the enclosed item
                      is optional. (Square brackets are not, however,
                      optional in the syntax of a directory name in
                      a file-specification, or in the syntax of a
                      substring specification in a VMS assignment
                      statement).
.BLANK
'integer'             An integer number is expected in the specified
                      input or output field.
.PAGE
----------------------------------------------------------------------
Convention            Meaning
----------------------------------------------------------------------
.BLANK
'real'                A real number is expected in the specified input
                      or output field.

FSN 'integer' ('integer')
                      FSN followed by two integer arguments indicates
                      an IFF feature serial number. The integer number
                      enclosed in round brackets is the feature
                      internal sequence number.
.BLANK
00003DE7              A hexadecimal address of a location within an
                      IFF file. Laser-Scan IFF utilities express all
                      IFF addresses using hexadecimal radix. The
                      address is always padded with leading zeros to
                      a standard field width of 8 characters.
.BLANK
.LM -10
^*--------------------------------------------------------------------------------\*
.HL 2 ^^^*Command line interpretation\*
.LM +10
.P 0;SRINORM uses the VMS Command Line Interpreter (CLI) to get and
parse the program command line. SRINORM thus offers a VMS emulating user
interface.

.P 0;SRINORM command line decoding operates in decimal radix. 

.BLANK
.LM -10
.NO FILL
^*--------------------------------------------------------------------------------\*
.FILL
.PAGE
^*--------------------------------------------------------------------------------\*
^*UTILITY#####SRINORM\*

^*--------------------------------------------------------------------------------\*
^*FUNCTION\*
.FILL
.LM +10
.NO JUSTIFY
.BLANK
SRINORM is used to normalise IFF feature coordinates to lie within a square
defined by the coordinates (-1.0,1.0),(-1.0,-1.0),(1.0,-1.0),(1.0,1.0).
The normalised features comprise either an SRI (Symbol Representation IFF) or
TRI (Text Representation IFF). These files are referenced by Laser-Scan
plotting software using the FRT (Feature Representation Table) mechanism. 
.NOFILL

.LM -10
^*--------------------------------------------------------------------------------\*
.NOFILL
^*FORMAT\*
.LM +10

$ SRINORM input-file-spec output-file-spec

^*Command Qualifiers		             Defaults\*

/CHARACTER=integer                         See text.
/[NO]DEBUG                                 /NODEBUG
/[NO]LOG                                   /NOLOG
/WIDTH[=integer]                           Do not adjust width
                                           AC value.

.LM -10
^*--------------------------------------------------------------------------------\*
^*PROMPTS\*
.LM +10

__SRI/TRI-input-file:	input-file-spec
__Output-file:          output-file-spec

.LM -10
^*--------------------------------------------------------------------------------\*
^*PARAMETERS\*
.FILL
.LM +10
.P -10;input-file-spec 
.JUSTIFY
.P -2;- specifies the SRI or TRI file file which is to be normalised.
Any part of the file name which is not specified will be taken from the
default specification 'LSL$IF:SRI.SRI'. 
.TP 10
.P -10;output-file-spec
.P -2;- specifies the SRI or TRI file which is  to  be  created to contain the
results of the normalising process. Any part of the file-spec which is not
explicitly given will be taken from the parsed input specification. 
.TP 12
.LM -10
.BLANK
^*--------------------------------------------------------------------------------\*
^*QUALIFIERS\*
.FILL
.LEFT MARGIN +10
.P -10;/CHARACTER=integer

.P -2;-#for use with TRI files only. In TRI files all features which constitute
the parts of a single character within a font should be assigned the same FSN
(Feature Serial Number). The FSN should be chosen which represents the ASCII
code of that character. Hence all TRI file features having a FSN of 65 will
together form the component segments of a capital letter "A" - ASCII code 65. 

.P 0;The integer argument to the /CHARACTER qualifier enables the user to
specify the ASCII code (and thus FSN) of the character in a TRI file is to be
used as the standard against which all other features will be normalised. 
This is to allow the relative sizes of characters within a font to be retained
during normalisation.
.BLANK
.TEST PAGE 10
.I -10;/DEBUG
.I -10;/NODEBUG
.INDEX SRINORM> command qualifiers> /DEBUG
.P -2;-#reserved for Laser-Scan use. /DEBUG provides screeds of output relating
to such things as IFF entries found and what is done with them. It is
intended as a debugging aid for use by LSL personnel only. 
.BLANK
.P -10;/LOG
.I -10;/NOLOG
.P -2;- this will  result in  supplementary messages being sent to SYS$OUTPUT.
Supplementary messages are generated when a file is successfully opened and a
reassuring message output each time a new IFF layer is found in the IFF file. 
.BLANK
.P -10;/WIDTH=[integer]
.P -2;-#for use with TRI files only. The /WIDTH qualifier specifies that all
width AC (Ancillary Code) values are to be normalised.

.P 0;The /WIDTH qualifier is useful if the user has a font in which the width
value in the AC entry reflects the width of the character only and no account
is taken of the inter-character space. In this case characters printed
successively will touch. If the optional /WIDTH argument is specified width AC
values are normalised and then n/1000 is added to the normalised width value,
where n is the integer argument supplied. 

.P 0;The distance n/1000 represents the blank space added to the width of the
character. It thus enables the user to define a constant inter-character
spacing to be added to each character width. Assuming that a character has a
normalised width value of 1.0, a /WIDTH argument of 1000 will double the width
of the character when the surrounding blank is taken into consideration. 
.BLANK
.TP 8
.LEFT MARGIN -10
^*--------------------------------------------------------------------------------\*
.NOKEEP
.FILL
.JUSTIFY
^*DESCRIPTION\*
.LEFT MARGIN +10
.P 0;SRINORM is used to normalise the coordinates of IFF features to lie within
a square defined by the coordinates (-1.0,1.0),(-1.0,-1.0),(1.0,-1.0),(1.0,1.0).

.P 0;The normalised features form either an SRI (Symbol Representation
IFF) or TRI (Text Representation IFF) file. These files are referenced by
Laser-Scan plotting software using the FRT (Feature Representation Table)
mechanism. 

.P 0;An SRI file contains the graphical definitions of symbols used for plotting
and display purposes. TRI files contain graphical definitions of characters
comprising different fonts. For a detailed explanation of the contents of SRI
and TRI files and their use in a feature representation scheme see the FRT User
Guide. 

.P 0;As SRI and TRI feature coordinates must lie within the
square defined by the coordinates (-1.0,1.0),(-1.0,-1.0),(1.0,-1.0),(1.0,1.0),
this clearly imposes a restriction on the method of symbol or text character
digitising. This may be unacceptable in some applications. SRINORM enables the
user to normalise or "rescale" IFF features which represent a symbol or
character regardless of the source digitising coordinate system used. Thus
characters or symbols may be digitised at a scale at which it is easy to
digitise. The user must, however, digitise the symbols with the coordinate
origin (0.0,0.0) at the required symbol locating point. 

.P 0;Although called SRINORM, the utility is designed to be used with both SRI
and TRI files. Two of the SRINORM command qualifiers; /CHARACTER and /WIDTH,
are provided for use with TRI files exclusively. 

.P 0;SRINORM always creates a new output file which contains all normalised
features and also features upon which the normalisation process has failed.
This file will contain coordinate entries that contain only X and Y
coordinates. Any Z coordinates (or other point attributes) will be
discarded.

.BLANK 2
.TP 10
.LEFT MARGIN -10
^*##########----------------------------------------------------------------------\*
.LEFT MARGIN +10
.HL 2 ^^^*SRINORM and the content and structure of an SRI file\*

.P 0;An SRI file is a normal IFF file but its contents must accord to the 
following scheme:

.LIST "o"
.LE ;Features in layer 0 will be ignored.

.LE ;Features which have a zero coordinate extent will be ignored and will be
copied unmodified to the output file. 

.LE ;ALL features which define parts of a single symbol must share the same FSN
(Feature Serial Number).

.LE ;Features sharing the same FSN, (that is to say, forming parts of the same
symbol), should be contiguous within the IFF file. 

.LE ;Features within the file should be in ascending order of FSN.

.LE ;Symbols may be differentiated by segregation into different layers.

.LE ;Layer numbers should lie in the range 0-32767. Layer 0 is reserved
for registration marks and grids and will be copied, unmodified, to the output
file. Laser-Scan FRT based plotting software will ignore layer 0 in SRI files.

.END LIST 

.BLANK 2
.TP 10
.LEFT MARGIN -10
^*##########----------------------------------------------------------------------\*
.LEFT MARGIN +10
.HL 2 ^^^*SRINORM and the content and structure of a TRI file\*

.P 0;Like an SRI file a TRI file is a normal IFF file but its contents must
accord to the following scheme: 

.LIST "o"
.LE ;Features in layer 0 will be ignored.

.LE ;Features which have a zero coordinate extent relative to the coordinate
origin will be ignored and will be copied unmodified to the output file.

.LE ;ALL features which define parts of a single character must share the same
FSN (Feature Serial Number). 

.LE ;Features sharing the same FSN, (that is to say, forming parts of the same
character), should be contiguous within the IFF file. 

.LE ;FSN (Feature Serial Numbers) should be allocated to reflect the ASCII
code of the font character which is being graphically defined.

.LE ;Features within the file should be in ascending order.

.LE ;For each character defined in the TRI file one (and only one) component
feature should contain a type 3 AC (Ancillary Code) entry. The code field of
a type 3 AC is interpreted as a real (floating point) number. This real
value defines the width of the character for type spacing purposes.


.LE ;Characters relating to different fonts must be differentiated by
segregation into different layers. Layer fragments are not allowed. Use the IMP
utility IMERGE to concatenate layer fragments. 

.LE ;Layer numbers (i.e. font numbers) should lie in the range 1-32. As
in SRI files layer 0 is reserved for registration marks and grids and will be
copied, unmodified, to the output file. Laser-Scan FRT based plotting software
will ignore layer 0 in TRI files. 

.LE ;A TRI file may contain a maximum of 5 different layer numbers (i.e. 5
fonts). SRINORM doe not check either the number of layers processed or the the
layer numbers used. 
.END LIST

.BLANK 2
.TP 10
.LEFT MARGIN -10
^*##########----------------------------------------------------------------------\*
.LEFT MARGIN +10
.HL ^^^*SRINORM and output file range entry values\*

.P 0;After processing with SRINORM the range entry of the output file
will reflect the coordinate range of the normalised IFF features. If all
features were successfully normalised the range will not exceed -1 to +1 in X
and Y. However, the range may also reflect the values of coordinates of
features not normalised. 

.P 0;Failure to normalise features may be due to:
.LIST "o"
.LE ;Feature location within layer 0,
.LE ;The feature FSN lying outside the range 1-32767.
.END LIST 

.P 0;If any feature is unsuitable for normalisation SRINORM will issue warning
messages. 

.BLANK 2
.TP 10
.LEFT MARGIN -10
^*##########----------------------------------------------------------------------\*
.LEFT MARGIN +10
.HL ^^^*The Normalisation process\*
.P 0;After the input and output files are opened, SRINORM performs two passes
over the data in an SRI or TRI file. The default mode of operation is as
follows. 
.BLANK
.P 0;^^^*Pass 1 (Scanning phase)\*
.P 0;The entries from the input file are read in turn and copied to the output
file. All ST (STring) entries are scanned and the maximum absolute (X,Y) 
coordinate value determined and stored for each symbol (in an SRI file) or
character (in a TRI file). If a symbol or character is composed of several IFF
features then the maximum absolute coordinate value is determined from all the
STs of all the features sharing the same FSN. At this stage all ZS
entries are converted to ST entries.

.BLANK
.P 0;^^^*Pass 2 (Normalisation phase)\*
.P 0;The output file is rewound and each IFF feature is read again. The
contents of the ST entries of all the features which share the same FSN (and
therefore comprise the same symbol or character) are divided by the coordinate
maximum determined in pass 1 for that FSN. The resulting rescaled coordinates
are written back into the output file. The output file range is updated as
necessary.

.P 0;Each feature is thus rescaled in isolation and the coordinates of
all features will lie in the range -1 to +1 in X and Y.

.BLANK
.TP 10
.LEFT MARGIN -10
^*##########----------------------------------------------------------------------\*
.LEFT MARGIN +10
.P 0;^^^*Special treatment of TRI files\*

.P 0;The normalisation or "rescaling" of  TRI files will be treated differently
to the default used for SRI files if the user specifies the /CHARACTER
qualifier. In TRI files all features which constitute
the parts of a single character within a font should share the same FSN
(Feature Serial Number). The FSN should be chosen which represents the ASCII
code of that character. Hence all TRI file features having a FSN of 65 will
together form the component segments of a capital letter "A" - ASCII code 65. 

.P 0;The integer argument to the /CHARACTER qualifier enables the user to
specify the ASCII code (and thus FSN) of the character in a TRI file is to be
used as the standard against which all other features will be normalised. 
The maximum absolute (X,Y) coordinate value is determined from all
the component features of the nominated character. The scaling factor
calculated from this is then applied to all the coordinates of all features in
the file. 

.P 0;Unlike the default mode of operation described above, each feature is thus
rescaled using a constant scaling factor. (That of the feature nominated by the
user with the argument to the /CHARACTER qualifier). The coordinates of all
features need not lie in the range -1 to +1 in X and Y. The TRI characters
thus reflect a size which is in proportion to the nominated character.

.P 0;Another SRINORM processing option available for TRI files is provided by
the /WIDTH qualifier. The /WIDTH qualifier specifies that all width AC
(Ancillary Code) values are to be normalised. If the optional integer argument
is specified, width AC values are normalised and then n/1000 is added to the
normalised width value, where n is the integer argument supplied. The distance
n/1000 represents the blank space added to the width of the character. It thus
enables the user to define the inter-character spacing when the characters are
printed successively to form a word. Thus a /WIDTH argument of 1000 will double
the width of the character when the surrounding blank is taken into
consideration. 
.TEST PAGE 14
.BLANK
.LEFT MARGIN -10
^*--------------------------------------------------------------------------------\*
.NOFILL
^*EXAMPLES\*
.BLANK 2
$ ^*SRINORM PALM__TREES.IFF LSL$FRT:PALM__TREES.SRI_<CR_>\*
 
Starting pass 1
Scanning coordinates in layer 1
Starting pass 2
Normalising coordinates in layer 1
167 features normalised
 ELAPSED:    0 00:00:45.09  CPU: 0:00:20.53  BUFIO: 18  DIRIO: 1312  FAULTS: 400
$
.LEFT MARGIN +10
.FILL
.P 0;This example shows SRINORM in default mode of operation. Notice that the
input file specification lacks a device-name, a directory-name and version
number. These are taken from the default LSL$IF:SRI.SRI;0. The user has
supplied the input file-spec extension '.IFF' as the file presumably still
contains non-normalised IFF features and is thus just an ordinary IFF file
residing in the users IFF working directory.

.P 0;After successful processing with SRINORM the user will have a valid SRI
file and so he wishes to identify it with the '.SRI' file extension. The '.SRI'
file extension must be specified on the output file as missing components of
the output file-spec are taken from the input file-spec. Similarly, the
user has specified the device and directory defined by logical LSL$FRT: as the
target location for the output file. The default input file device and directory
are defined by logical name LSL$IF:.

.P 0;No errors were detected during processing. In default mode all the symbols
defined within this file are normalised independently. $STATUS is set to
SS$__NORMAL, normal successful completion. 
.NO FILL 
.LEFT MARGIN -10
.BLANK 2
.TP 10
$ ^*SRINORM/LOG RUNWAY__SYMBOLS RUNWAY__SYMBOLS_<CR_>\*
%LSLLIB-I-IFFOPENED, DUA0:[PROJECT.AIRPORT]RUNWAY__SYMBOLS.SRI;5 opened for read
%LSLLIB-I-IFFOPENED, DUA0:[PROJECT.AIRPORT]RUNWAY__SYMBOLS.SRI;6 opened for write
 
Starting pass 1
%SRINORM-I-SKIPLAY, skipping layer 0
Scanning coordinates in layer 24
Starting pass 2
%SRINORM-I-SKIPLAY, skipping layer 0
Normalising coordinates in layer 24
Symbol 2. Extent was     1.540
Symbol 3. Extent was     3.972
Symbol 75. Extent was     1.340
Symbol 76. Extent was     2.009
Symbol 77. Extent was     2.885
Symbol 78. Extent was     3.672
Symbol 79. Extent was     1.001
7 features normalised
 ELAPSED:    0 00:00:35.38  CPU: 0:00:21.08  BUFIO: 187  DIRIO: 1284  FAULTS: 357 
$
.LEFT MARGIN +10
.TP 10
.FILL
.P 0;In this example the user has specified the /LOG qualifier and
supplementary messages have been generated. These messages include an
indication of which files have been opened and also a listing of the maximum
absolute coordinate (X,Y) extent for the symbol before normalisation. No errors
were detected during processing, although layer 0 was encountered and its
contents merely copied to the output file. A message indicating that layer 0
was being skipped is issued during each pass through the SRI file. In default
mode all the symbols defined within this file are normalised independently.
$STATUS is set to SS$__NORMAL, normal successful completion. 
.NO FILL
.LEFT MARGIN -10

.BLANK 2
.TP 12
$ ^*SRINORM FONT12.TRI FONT12/CHARACTER=77/WIDTH=250_<CR_>\*
 
Starting pass 1
Looking for feature with /CHARACTER=77 ASCII code in layer 12
Starting pass 2
(Normalising to feature 77)
Normalising coordinates in layer 12
Symbol 65 - normalised width AC
Symbol 66 - normalised width AC
Symbol 67 - normalised width AC
Symbol 68 - normalised width AC
Symbol 69 - normalised width AC
Symbol 70 - normalised width AC
Symbol 71 - normalised width AC
Symbol 72 - normalised width AC
Symbol 73 - normalised width AC
Symbol 74 - normalised width AC
Symbol 75 - normalised width AC
Symbol 76 - normalised width AC
Symbol 77 - normalised width AC
Symbol 78 - normalised width AC
Symbol 79 - normalised width AC
Symbol 80 - normalised width AC
Symbol 81 - normalised width AC
Symbol 82 - normalised width AC
Symbol 83 - normalised width AC
Symbol 84 - normalised width AC
Symbol 85 - normalised width AC
Symbol 86 - normalised width AC
Symbol 87 - normalised width AC
Symbol 88 - normalised width AC
Symbol 89 - normalised width AC
Symbol 90 - normalised width AC
26 features normalised
 ELAPSED:    0 00:00:40.09  CPU: 0:00:21.67  BUFIO: 182  DIRIO: 1311  FAULTS: 368 
$
.BLANK
.LEFT MARGIN +10
.FILL
.P 0;In this example SRINORM is being used to normalise a TRI file. The
characters in the file are being normalised relative to the character with
ASCII code 77, a capital "M". The user has also specified that the character
width (held in the type 3 AC found once among the features defining a
character) is also to be rescaled. As the /WIDTH qualifier was specified with
the optional argument set to 250 a constant addition of 250/1000 will be added
to the character width value held in the type 3 AC for each character. This
will increase character spacing by a quarter of the scaling character ("M")
width. No errors were detected during processing. $STATUS is set to
SS$__NORMAL, normal successful completion. 
.NO FILL
.PAGE
.LEFT MARGIN -10
^*--------------------------------------------------------------------------------\*
^*MESSAGES (informational)\*
.FILL
.P 0;These messages give information only, and require no immediate action by
the user (except perhaps to verify that the correct options have been
selected). 
.BLANK 2
.LEFT MARGIN +4
.TEST PAGE 12
.I -4;SKPLAY, skipping layer 'integer'

.P 0;^*Explanation:\* The input SRI or TRI file contains a layer which is
invalid for FRTLIB use. The IFF entries which lie within the specified layer
(usually layer 0) will be copied to the output file without modification. 

.P 0; ^*User action:\* If all layers within the input file are required for
use, and were merely assigned incorrect layer numbers, use the IMP non-graphic
IFF editor IPATCH to find and change the offending layer numbers. Re-run
SRINORM on the corrected file. 


.LEFT MARGIN -4
.PAGE
^*--------------------------------------------------------------------------------\*
^*MESSAGES (warning)\*
.BLANK
These messages indicate that SRINORM has been unable to guarantee that a
specified feature has been correctly processed.
.BLANK
.LEFT MARGIN+4
.TEST PAGE 12
.I -4;BADFSN, invalid FSN 'integer' detected (maximum allowed is 32767) - ignored
.P 0;^*Explanation:\* A feature having a FSN
(Feature Serial Number) greater than the maximum value allowed by FRTLIB has
been found. The feature will be excluded from the normalisation process but
will be copied to the output file. It will almost certainly have an incorrect
coordinate range and should be corrected.

.P 0; ^*User action:\* Use the IMP non-graphic IFF editor IPATCH to find and
change the offending FSN. Re-run SRINORM on the corrected file. 

.BLANK
.TEST PAGE 12
.I -4;BADEXTENT, feature with FSN 'integer' has bad extent ('real') - ignored
.P 0;^*Explanation:\* The specified feature has zero or near zero coordinate 
range or "extent". It will be excluded from the process of normalisation but
will be copied to the output file. 
.P 0; ^*User action:\* Use LITES2 to find and change the feature. Re-run
SRINORM on the corrected file. 


.BLANK
.LEFT MARGIN -4
.PAGE
.BLANK
^*--------------------------------------------------------------------------------\*
^*MESSAGES (error)\*
.BLANK
These messages indicate an error in processing which has caused the program to
terminate. The most likely causes are a corrupt or otherwise invalid input IFF
file, or an error related to command line processing and file manipulation.
It is most unlikely that any output file produced will be correctly processed.
In the event of a processing error SRINORM will delete the output
file before calling exit.
.LEFT MARGIN+4
.BLANK
.TEST PAGE 12
.I -4;BADCHEXT, feature with /CHARACTER ASCII code has bad extent - aborting
.P 0;^*Explanation:\* The user has specified that all the features in the input
TRI file are to be normalised relative to the coordinate extent of a specified
feature. This feature is identified by its FSN which should match the ASCII
code of the character which the TRI feature represents. Unfortunately the last
feature found in the input TRI file whose FSN matched the specified ASCII code
has a zero or near zero coordinate extent. It is therefore unsuitable for use
as the normalisation standard. SRINORM aborts and no output file is produced.
.P 0;^*User action:\* Use LITES2 to determine why a feature with the FSN
value specified with the /CHARACTER='integer' qualifier has a zero coordinate
extent. Re-run SRINORM on the corrected TRI file.
.BLANK

.TEST PAGE 12
.I -4;INVALCH, /CHARACTER='integer' is an invalid ASCII character value - must lie in range 0-255
.P 0;^*Explanation:\* With /CHARACTER the user has specified that all the
features in the input TRI file are to be normalised relative to the coordinate
extent of a specified feature. This feature is identified by its FSN which
should match the ASCII code of the character which the IFF feature represents.
ASCII codes are in the range 0 to 255. The argument specified for the
/CHARACTER qualifier does not lie within this range. 
.P 0;^*User action:\* If the TRI input really does contain features with FSN
values outside the range 0 to 255 then the TRI file is invalid. Change the FSNs
and ensure that the FSN of each feature within the input TRI file matches the
ASCII code of the font character which the feature represents (either in full
or as a component part). Re-specify the SRINORM command line.
.BLANK 

.TEST PAGE 12
.I -4;INVALWID, 'integer' is an invalid /WIDTH value - must lie in range 1-1000
.P 0;^*Explanation:\* The /WIDTH qualifier specifies that TRI file 
width AC (Ancillary Code) values are to be normalised. As the optional integer
argument has been specified, n/1000 is added to the normalised AC width value,
where n is the integer argument supplied. The /WIDTH argument value must lie in
the range 1-1000. 
.P 0;^*User action:\* Respecify the SRINORM command line and ensure that
the /WIDTH qualifier argument lies within the range 1-1000.
.BLANK

.TEST PAGE 12
.I -4;MISSASCII, no feature found with /CHARACTER ASCII code  - aborting
.P 0;^*Explanation:\* The user has specified that all the features in the input
TRI file are to be normalised relative to the coordinate extent of a specified
feature. This feature is identified by its FSN which should match the ASCII
code of the character which the TRI feature represents. Unfortunately no
feature with the specified FSN can be found in the input TRI file.
It is therefore impossible to use it as the normalisation standard. SRINORM
aborts and no output file is produced. 
.P 0;^*User action:\* Examine the SRINORM command line. Check the argument
value supplied for the /CHARACTER qualifier. If the wrong value was supplied
respecify the SRINORM command line using the correct /CHARACTER argument value. 
If, however, the command line is correct, use LITES2 to determine why a
feature with the FSN value specified with the /CHARACTER='integer' qualifier is
missing from the TRI file. Re-run SRINORM on the corrected TRI file. 
.BLANK

.TEST PAGE 12
.I -4;UNEXPEOF, unexpected end of IFF file 'file-spec'
.P 0;^*Explanation:\* SRINORM has detected the end of the IFF file, but has not
detected an IFF 'EJ' entry.
.P 0;^*User action:\* Use IMEND on the file, which will correctly position the
EOF marker and insert an EJ entry at the end of the file.  Re-run SRINORM on 
the corrected file.
.LEFT MARGIN -4
.PAGE
^*--------------------------------------------------------------------------------\*
MESSAGES (other):
.BLANK
.P 0;In addition to the above messages which are generated by SRINORM itself,
other messages may be produced by the command line interpreter (CLI) and by
Laser-Scan libraries. In particular, messages may be generated by the IFF
library. These are introduced by '%IFF' and are documented in the IFF library
users' guide. In most cases IFF errors will be due to a corrupt input file, and
this should be the first area of investigation. If the cause of the error
cannot be traced by the user and Laser-Scan are consulted, then the input file
should be preserved to facilitate diagnosis.
