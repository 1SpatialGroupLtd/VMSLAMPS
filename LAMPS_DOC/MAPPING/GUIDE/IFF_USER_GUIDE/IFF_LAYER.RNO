^*--------------------------------------------------------------------------------\*
.BR;^^^*LAYER LEVEL ENTRIES\*
.INDEX Layer level entries
.BLANK
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^^^*General\*
.LM +10
.INDEX Layer
.INDEX Layer level entries> general
.ENTRY Overlay> see layer
.P 0;The name of the IFF layer has evolved through time. Traditionally
the division of IFF data provided by the NO "New Overlay" and EO "End Overlay"
entries was referred to as either an "overlay", or alternatively, as a "layer".
Laser-Scan have now standardised on the term "layer" and all modern IFF based
documentation will use this term. 

.INDEX LAMPS
.INDEX FPP
.INDEX SPM
.INDEX LITES
.INDEX LITES2

.P 0;The role of the IFF layer has also varied through time. Historically,
layers have been used for data division purposes which are no longer
necessary in the modern LAMPS environment. For example, the replacement
of SPM based plotting packages by the LAMPS FPP (Fast Plotter Program)
has meant that plotter pens may now be selected by feature code rather
than data division by layer. The replacement of the LITES editor by the
powerful LITES2 editor enables IFF files containing many layers to be
edited. Released from the constraints of plotting requirements and
capacity restrictions in the IFF graphical editor layers offer the user
great flexibility in data classification and division within a single IFF
file. The feature codes contained in all IFF features may be used
to further subdivide the data within the layers. 

.INDEX Layer 0
.INDEX Reserved layers
.INDEX Layers> reserved
.P 0;Laser-Scan reserve layer 0 for registration mark features and grids. All
other layers may be assigned for any purpose. Historically,
however, several layers were assigned special functions by both Laser-Scan
and the Ordnance Survey (GB):
.LIST "o"
.LE ;^*Layer 0.\* Although now reserved for registration mark features and grids
this layer was at one time available for general data storage. Modern LAMPS
utilities treat layer 0 as a special layer. The user should check the relevant
documentation to determine the precise behaviour of each utility on
encountering layer 0. The user should be aware that: 
.LIST
.LE ;data processing utilities often ignore layer 0,
.LE ;data selection utilities will often copy layer 0 to the output file
even if it is not explicitly asked for.
.END LIST

.LE ;^*Layer 1.\* Historically this is the Ordnance Survey data layer. All data
were differentiated by feature code and only 3 predefined layers were used.
.LE ;^*Layer 11.\* Historically this is the Ordnance Survey grid layer. All OS
IFF files contain a grid which was defined by line features contained in layer
11. This layer is now available for general data storage. 
.LE ;^*Layer 32.\* Until 1986 the Laser-Scan LASERAID digitiser put registration
ticks into layer 32. These are now placed in layer 0. Layer 32 is now used for
general data storage. 
.END LIST
.P 0;All IFF features must lie within an IFF layer.

.INDEX Layers> value range
.P 0;All layer numbers must lie within the range 0 to 32767.
.FILL
.LM -10
.BLANK
.TP 10
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^^^*Layer level entry order\*
.INDEX Layer level entry order
.LM +10
.P 0;The order in which IFF entries occur at the map level is given below.
An entry printed in ^*bold\* type is obligatory. Vertical ellipsis indicate
that multiple occurrences of the preceding entry are permissible.
.BLANK 
.LIST " "
.LE ;^*NO#-#New "Overlay"#-#includes layer number and status.\*
.LE ;^*EO#-#End "Overlay" marker.\*
.END LIST
.BLANK
There is no specific order for the following optional (and obsolete)
entries, which occur within layers but outside features. These
entries are documented in the special "Miscellaneous and obsolete entries"
section of this document. 
.BLANK
.NO FILL
CH#-#Character data.
 .
 .
 .
CS#-#Character Size and spacing.
SL#-#Symbol Library select.
SS#-#Symbol Select.
TC#-#Transmitted Comment.
 .
 .
 .
.LM -10
.P 0
^*--------------------------------------------------------------------------------\*
.FILL

.PAGE
.!******************************************************************************
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^^^*EO\*########End of layer marker
.INDEX EO entry
.INDEX IFF entries>EO
.NO FILL
^*--------------------------------------------------------------------------------\*
.NO JUSTIFY
^*FORMAT\*

.LEFT MARGIN +10
EO
.P 0;The EO entry does not have any contents.

.LEFT MARGIN -10
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION\*
.LEFT MARGIN +10
.FILL
.JUSTIFY

.INDEX EO entry>position in IFF file
.INDEX IFF entries>EO> position in IFF file
.P0; The EO entry flags the end of a layer, and balances the matching NO
entry at the start of the layer. That NO entry should contain a pointer field
which holds the address of this EO#-#this allows fast chaining through
a file when particular layers are being ignored.
.LM -10
.BLANK
^*--------------------------------------------------------------------------------\*
^*NOTES\*
.LM +10
.INDEX EO entry> and section level entries
.INDEX IFF entries>EO> and section level entries
.P0;Although primarily used to group IFF features, some non-feature based
entries are legal between an EO and an NO#-#particularly
the new section entries (NS,CC,CP) and also the (obsolete) CH entry.

.LEFT MARGIN -10
.P0
^*--------------------------------------------------------------------------------\*
.PAGE
.!******************************************************************************
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^^^*NO\*########New#layer#(overlay)#entry
.INDEX NO entry
.INDEX IFF entries>NO
^*--------------------------------------------------------------------------------\*
.LEFT MARGIN +10

.INDEX EO entry> historical legacy
.INDEX IFF entries>EO>historical legacy
For historical reasons the user should be aware of 2 types of NO entry:
.P -10;^*FORMAT\*#-#old pattern NO entry
.P 0;NO layer-number   status
.NO FILL
where:

.BR;layer-number#-#is the layer number in the range 0 to 32767
.BR;status#######-#is a status flag field. The status flag is
###############not currently used, and should be set to zero. 
.FILL

.P -10;^*FORMAT\*#-#modern pattern NO entry
.P 0;NO##layer-number###status###pointer
.NO FILL

where:
.BR;layer-number#-#is the layer number in the range 0 to 32767
.BR;status#######-#is a status flag field. The status flag is
###############not currently used, and should be set to zero. 
.BR;pointer######-#is the address of the matching EO entry which
###############flags the end of the layer.
.FILL
.LM -10
.BLANK
^*--------------------------------------------------------------------------------\*
^*DESCRIPTION\*
.LM +10
.P0; The NO entry starts a layer. It contains the number identifying this
layer, and a status word. It may also contain the address of the corresponding
EO entry.

.P0; IFF files are generally divided up into multiple layers, where data
of a common sort or source is grouped in the same layer. Note that 
a layer may be split into several parts, identified by all having the same
layer number.

.INDEX NO entry>significance of layer 0
.INDEX IFF entries>NO>significance of layer 0
.INDEX Layer 0
.INDEX MCE DFAD
.INDEX DFAD
.INDEX Layer 0
.P0; Layer 0 is conventionally reserved for 'non-essential' data#-#for instance
a grid, symbols at control points, or MCE DFAD accuracy polygons. The
assumption is that the IFF file would not be significantly degraded in terms
of information content by throwing layer 0 away. If layer 0 is present,
some programs expect it to be the first layer in the file.

.INDEX Layer 11
.INDEX Layer 32

.P0; Historically, layers 11 and 32 were also used for the same sort of
purpose as layer 0. (See General introduction at the start of this section).

.LM -10
.P 0
^*--------------------------------------------------------------------------------\*
^*NOTES\*
.LM +10
.INDEX NO entry>relationship to EO entry
.INDEX IFF entries>NO>relationship to EO entry
.P0; If the EO pointer field is present, it should contain the 
address of the EO entry which matches this NO. This is used by programs
which must ignore layers to 'jump' from the NO to the EO. Thus take great
care when editing the EO pointer field, as an incorrect value could cause
a processing program to abort.

.INDEX NO entry>correction of bad EO address
.INDEX IFF entries>NO>correction of bad EO address
.P 0;In the unlikely event that an NO entry contains an incorrect EO
pointer address the file may be repaired using one of the following
procedures:
.LIST "o"
.INDEX IMP> IPATCH
.INDEX IPATCH

.LE ;Use the IMP patch editor IPATCH. For safety make a copy of the IFF file.
Specify the /WRITE qualifier on the IPATCH command line. Use the find by entry
command: 
.P 0;IPATCH> ^*NO_<CR_>\*
.P 0;to find the first NO entry in the file. Note the hexadecimal
address of the NO entry. Does the NO entry have a pointer field? If not then
try one of the other strategies listed below. 

.P 0;If the NO entry does contain an EO pointer field use the IPATCH find by
entry command:
.P 0;IPATCH> ^*EO_<CR_>\*
.P 0;to find the next EO entry. Note the address of the EO entry.
If the address of the EO matches the address in the pointer field of the NO
that you have just left then find the next NO. There is nothing wrong with the
current NO-EO pair. 

.P 0;If the address of the EO entry does not match the address in the pointer
field of the EO entry that you have just left, use the find by address command:

.P 0;IPATCH> ^*FIND 'address'_<CR_>\*
.P 6;where 'address' is the hexadecimal address of the NO entry
that you last found. Issue the NO entry edit command:

.P 0;IPATCH> ^*/POINTER_<CR_>\*

.P 0;to edit the NO entry pointer field. Specify the address of the EO that you
have just left. Repeat for any other NO-EO pairs within the IFF file. 

.INDEX LITES2
.LE ;As an alternative to IPATCH read the IFF file into LITES2 and then issue
the "EXIT" command. LITES2 will correct any wrong pointer addresses and
restore any missing ones. This strategy will succeed even if the NO entries
contained no pointer address field. The IFF file will now have the modern
pattern NO entries containing a pointer address field.

.INDEX IMP>ITOTEXT
.INDEX IMP>IFROMTEXT
.INDEX ITOTEXT
.INDEX IFROMTEXT
.INDEX LITES2


.LE ;Use the IMP ITOTEXT utility followed by the IMP IFROMTEXT utility. Like the
LITES2 strategy, this approach will succeed even if the NO entries
contained no pointer address field. The IFF file will now have the modern
pattern NO entries containing a pointer address field. Beware that this
approach, while suitable for batch operation, may require a considerable amount
of disk storage for the text file created by ITOTEXT. 
.END LIST
.LM -10
.BLANK
^*--------------------------------------------------------------------------------\*

