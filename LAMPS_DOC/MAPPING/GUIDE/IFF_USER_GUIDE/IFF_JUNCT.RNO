^*--------------------------------------------------------------------------------\*
.BR; ^^^*IFF JUNCTION STRUCTURE\*
.INDEX IFF junction structure
.INDEX Junction structure
.BLANK
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^^^*General\*
.LM +10
.INDEX Junction structure> general
.P 0
Within the IFF structure a junction is defined as a single coordinate together
with one or more 'arms'. An arm consists of a pointer to the position in the
file of an ST (string) entry, together with a vertex number within that string
to indicate which end of the string is attached to the junction. The vertex
number will either be 1 or the number of points in the string (junctions
may not occur in the middle of an ST).

.INDEX Junction structure> availability with 3D strings
.INDEX IFF entries> ZS
.INDEX IFF entries> ST
.P 0;At present junction structure is available for use only with 2-dimensional
coordinate strings held in ST (STring) entries. Junction structure for
3-dimensional strings held in ZS entries is not supported.

.INDEX Junction structure> sectors
.INDEX IFF entries> JB
.P 0;To enable fast location of junctions within the file, all junctions whose
identifying points lie within a given rectangular area of the coordinate range
of the file (a sector) are gathered together in one or more Junction Block (JB)
entries. All JB entries for a given sector are chained together, and the head
of each such chain is referenced in a Sector Header (SH) entry near the
beginning of the file (see section describing file level entries). The number
of sectors is specified in the SH entry. 
.INDEX Junction structure> SH entry
.INDEX IFF entries> SH
.P 0;The sector concept may be visualised by means of the following diagram: 
.TP 24
.LM -10
.LITERAL


                             +----+
                             | SH |
                             +----+
                               |
        +------------+---------+--+-----------+----------- - - -
        |            |            |           |
     ---+--       ---+--       ---+--      ---+--
     | JB |       | JB |       | JB |      | JB |
     ---+--       ---+--       ---+--      ---+--
        |            |            |           |
     ---+--       ---+--       ---+--      ---+--
     | JB |       | JB |       | JB |      | JB |      ---------------------
     ---+--       ---+--       ---+--      ---+--  /---| XY, arm, arm, arm |
        |            |            |           |   /    ---------------------
     ---+--       ---+--       ---+--      ---+--/      ---------------------
     | JB |       | JB |       | JB |      | JB |------| XY, arm, arm, arm |
     ---+--       ---+--       ---+--      ---+--      ------------+--------
        |            |            |           |                    |
                                                                ---+--
        |            |            |           |                 | ST |
                                                                ------
.END LITERAL
.LM +10
.P 0
.INDEX IFF entries> ST
.INDEX IFF entries> JP
The ST pointers within the junction block enable the junction arms to be easily
related back to the coordinate strings which form them (and also, although much
less easily, to the features which contain the arms). In order to refer to the
junction data from within a feature, the Junction Pointer (JP) entry is
provided (see below). Note that although the position of the JP entry within a
feature is not formally defined in IFF, in order that processing programs
should not need to be too complex a logical ordering should be adopted with JPs
between STs as appropriate. 
.TP 9
.P 0
For example, the geometrical arrangement:
.LM -10
.LITERAL

                     A                               B
                     --------*------------*-----------
                             |            |
                             |            |
                             |            |

.END LITERAL
.LM +10
.P 0
.INDEX Junction structure> IFF feature layout
should have the horizontal feature AB represented by the IFF sequence:
.BL
######NF FS ... ST JP ST JP ST EF
.BL
rather than, for example:
.BL                     
######NF FS ... ST ST ST JP JP EF
.BL
.P 0
Similarly, although JB entries may in theory occur anywhere in the IFF file,
to accord with current practice they should not appear within features. This
means that when the feature is created, all junctions implicated in that
feature must be remembered until the EF has been generated.

.TP 11
.P 0
It should be noted that this scheme preserves the integrity of the coordinate
data and the file as a whole. The junction structure can be stripped out at any
time and the resulting file will be geometrically complete; only the
relationship between the junction arms will be lost.

.LM -10
.BLANK
^*--------------------------------------------------------------------------------\*

.!******************************************************************************
.PAGE
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^^^*JB\*########Junction Block
.INDEX IFF entries> JB
.INDEX JB entry
^*--------------------------------------------------------------------------------\*
.P 0;^*FORMAT\*
.LEFT MARGIN +10
.NO FILL

JB##nsect#next-jb
offset  narms  x-coordinate y-coordinate
     armno     pntno  string-address
       .         .      .       .
       .         .      .       .
       .         .      .       .
.P 0;Where:
.LITERAL

nsect          - is the sector number as defined within the SH entry
next-jb        - the pointer to the next JB in the sector (zero
                 if none)
offset         - offset of the junction within the JB
narms          - number of arms at junction
x-coordinate   - the X coordinate of the junction
y-coordinate   - the Y coordinate of the junction
armno          - the arm ident
pntno          - string vertex number which lies at the junction
string-address - address of the ST entry forming the arm
.END LITERAL
.P -10;^*Example\*
.LITERAL

JB  5 00000000
0005:   3 52838.900  159.628
     1:     1 000005D2
     2:    17 00000956
     3:    37 00000C7E

.END LITERAL
.FILL
.LM -10
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION\*

.LM +10
.P0; The JB entry defines a series of junctions.

.P0; Within each sector of the IFF file, a chain of JB entries is maintained
to hold the details of all junctions within that sector.

.P0; Each JB entry contains the number of the sector that it is in, a pointer
to the next JB entry in this JB chain, and details of each junction.

.P0; For each junction, the JB contains

.BLANK
.LIST 0,"o"
.LE; the number of arms at that junction
.LE; the X,Y position of the junction
.LE; the address of each ST corresponding to a junction arm
.LE; the number of the vertex (either 1 or the index of the last point in
the ST) corresponding to the junction in that ST
.END LIST

.INDEX IFF entries> SH
.INDEX SH entry
.INDEX IFF entries> JP
.INDEX JP entry
.P0; See also the JP (Junction Pointer) and SH (Sector Header) entries.
.LM -10
.P0
^*--------------------------------------------------------------------------------\*

.!******************************************************************************
.PAGE
.P0
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^^^*JP\*########Junction Pointer
.INDEX IFF entries> JP
.INDEX JP entry
^*--------------------------------------------------------------------------------\*
.P 0;^*FORMAT\*
.LEFT MARGIN +10

.NO FILL
JP jb-address#jb-offset

Where:
jb-address##-#address of the JB entry describing this junction
jb-offset###-#start position of the data relating to present
##############junction within the JB entry

.FILL
.P -10;^*Example\*

.P 0;JP 0000056D 0005

.LEFT MARGIN -10
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION\*

.LM +10
.INDEX IFF entries> JB
.INDEX JB entry
.INDEX IFF entries> ST
.INDEX ST entry
.P0; The JP entry is a pointer back to a JB entry. A JP entry is inserted
before or after (as appropriate) each ST that starts or ends at a junction.

.P0; The point in the ST corresponding to the junction is either the first (in
which case the JP occurs before the ST) or the last (the JP occurs after the
ST). 

.TP 10
.P0; Each JP entry contains the address of the relevant JB entry, and the
sequence number of the junction within that JB.
.LM -10
.P0
^*--------------------------------------------------------------------------------\*
.PAGE
.!******************************************************************************
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^^^*SH\*########Sector Header
.INDEX IFF entries> SH
.INDEX SH entry
^*--------------------------------------------------------------------------------\*
^*FORMAT\*
.LM +10
.INDEX IPATCH
.INDEX IMP> IPATCH
.P 0;The SH entry is from necessity a complex entry. It contains information
defining the position and size of the sectors into which the data are divided.
In addition it references information which is not directly accessible to the
user (other than by IFF library common blocks). The contents of a typical SH
entry is thus best explained by use of an example, using the format produced
by the IMP utility IPATCH:
.LM -10
.P 0;^*Example\*
.BLANK
.NO FILL
SH
Sector Header entry
- size of entry = 200 words
- there are 100 sectors, 10 in X and 10 in Y
- sector origin:  .5038E 005, .1558E 005
- sector size:          581.6,       459.4
- JB entry chains start at the following addresses:
 00000000  00000000  00000000  00000000  00000568  00000000  00000000  00000000 
 00000000  00000000  00000000  00000000  00000000  0000031C  00000737  00000A15 
 00000B5E  00000DE5  00000000  00000000  00000000  00000000  00000F36  0000041B 
 00000836  000017EA  00001B80  00001F87  00001E56  00000000  00000000  000010CD 
 000024E0  00001350  00001603  000019E3  00001CF5  00000000  00003903  00000000 
 0000214A  000022B3  0000266B  00002858  00002AF9  000030F4  000032F5  0000362E 
 00000000  00000000  00000000  00004144  00003FF7  000043AB  0000490A  00004B7F 
 00004FE8  00003B28  00006F43  00000000  00000000  00003CC5  00005545  00005970 
 00005BD1  000061F0  000064F9  00006AFD  00006D1E  00000000  00003E86  0000708C 
 00007418  0000764F  0000602F  00005E84  00006798  000083F4  0000861B  00000000 
 00000000  00000000  00007261  00000000  00007B72  00007DE5  00007FA8  0000829F 
 00008B97  00000000  00000000  00000000  00000000  00008888  00000000  00000000 
 00000000  00000000  00000000  00000000 
.FILL
.LM +10
.P 0;Each hexadecimal value is the address of the JB entry for a sector within
the file. JB entries may be 'chained'. Thus if a sector requires more than one
JB entry then the address of the second and any subsequent JB entries for that
sector will be held within the previous JB. 
.TP 10
.LM -10
.P0
^*--------------------------------------------------------------------------------\*
.BR;^*DESCRIPTION\*
.LM +10
.FILL
.JUSTIFY
.INDEX IFF entries> HI
.INDEX HI entry
.INDEX IFF entries> RA
.INDEX RA entry
.P 0;The Sector Header entry is always placed immediately ^*after\* the 
HI (HIstory) entry in the IFF file. If the file does not have an HI entry
then the SH entry will come immediately after the RA (RAnge) entry.

.TP 10
.INDEX IFF entries> JB
.INDEX JB entry
.P0; The SH entry contains the addresses of the start of the JB (Junction Block)
chain for each sector in the IFF file.

.TP 10
.P0; When an IFF file contains junction structure, the map is divided into
rectangular sectors. A chain of JB entries is maintained for each sector,
containing the junction information. The SH entry provides the address of
the start of each of these chains.

.TP 10
.LM -10
.BLANK
^*--------------------------------------------------------------------------------\*
^*NOTES\*
.LM +10
.INDEX IFF entries> RA
.INDEX RA entry
.P 0;The origin of the sectors and the area covered by them need not reflect
the coordinate range of the file expressed in the RA (RAnge) entry.

.TP 10
.P 0;On many maps not all sectors will contain junctions. There will therefore
be no JB entry start address for such sectors.

.LM -10
^*--------------------------------------------------------------------------------\*
