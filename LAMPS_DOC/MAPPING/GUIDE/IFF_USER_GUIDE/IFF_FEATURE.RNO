^*--------------------------------------------------------------------------------\*
.BR; ^^^*FEATURE LEVEL ENTRIES\*
.INDEX Feature level entries
.BLANK
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^^^*General\*
.LEFT MARGIN +10
.INDEX IFF features
.INDEX IFF features> as building blocks
.P 0;Features are the building blocks of IFF (*Internal *Feature *Format)
files.

.P 0;Individual features are held at the feature level (a feature being
synonymous with a cartographic feature such as a particular line, symbol or
piece of text, etc). 

.BLANK
.LEFT MARGIN -10
.TP 10
^*--------------------------------------------------------------------------------\*
.HL 2 ^^^*Definition of an IFF feature\*
.LEFT MARGIN +10
.INDEX IFF features> definition
.P 0;Although historically IFF files could contain empty features, all IFF
features must now contain a FS entry and a minimum of one (X,Y) coordinate
point. The (X,Y) coordinate point can be held either in an ST entry (2
dimensional string), in a ZS entry (3 dimensional string), or in a CB entry
(coordinate block). A feature ^*cannot contain a mix of ST, ZS, and CB entries.\* 

.TEST PAGE 12
.INDEX IFF features> minimum structure
.P 0;The minimum structure of a single IFF feature may thus be defined:

.NO FILL

     NF       - start of new feature
     FS       - feature status
     ST/ZS/CB - string of coordinates
     EF       - end of feature

.FILL

.TEST PAGE 18
.INDEX IFF features> and ancillary codes
.P 0;Using this basic building block other IFF feature types may be
constructed. Ancillary codes and large numbers of coordinate points
may be added, for example:

.NO FILL

     NF       - start of new feature
     FS       - feature status
^*     AC       - ancillary code
      .
      .
      .\*
     ST/ZS/CB - string of coordinates
^*      .
      .
      .\*
     EF       - end of feature

.FILL
.P 0;Note that ACs are found immediately after the FS entry, before any other
feature entries. 

.TEST PAGE 15
.INDEX IFF features> and text
.INDEX IFF features> text and ancillary codes
.P 0;Simple text features may be defined using our feature building block.
Text is located by a single point in an ST, ZS, or CB entry. Thus features with
multi-point strings cannot have a TX entry within them, but they can, however,
contain ACs which have an optional text field.
.NO FILL

     NF       - start of new feature
     FS       - feature status
     ST/ZS/CB - locating point
     ^*TX       - text string\*
     EF       - end of feature

.FILL
.TEST PAGE 14
.INDEX IFF features> text rotation
.P 0;And the text may be rotated counterclockwise relative to the X axis:
.NO FILL

     NF       - start of new feature
     FS       - feature status
     ST/ZS/CB - locating point
     ^*RO       - rotation\*
     TX       - text string
     EF       - end of feature

.FILL

.TEST PAGE 13
.INDEX IFF features> text size
.P 0;The text size may be defined within the feature itself:

.NO FILL

     NF       - start of new feature
     FS       - feature status
     ^*TH       - text height\*
     ST/ZS/CB - locating point
     RO       - rotation
     TX       - text string
     EF       - end of feature

.FILL

.TEST PAGE 13
.INDEX IFF features> multi-banked texts
.INDEX IFF features> and text components
.P 0;Multi-banked texts may be created by adding a text component for each
piece of text. A text component takes the form: 

.NO FILL

        ^*TS       - text status
        TH       - text height
        ST/ZS/CB - locating point
        RO       - rotation
        TX       - text string\*
.FILL
.TEST PAGE 18
.P 0;Thus a feature with 2 text strings would take the form:

.NO FILL

     NF       - start of new feature
     FS       - feature status
        ^*TS       - text status
        TH       - text height
        ST/ZS/CB - locating point
        RO       - rotation
        TX       - text string
        TS       - text status
        TH       - text height
        ST/ZS/CB - locating point
        RO       - rotation
        TX       - text string\*
     EF       - end of feature

.NO FILL

.NOTE
Note that although text features may contain ACs (Ancillary Codes), a text
component may not (as ACs must occur immediately after the FS entry).
.END NOTE
.LM -10

.BLANK
.TEST PAGE 12
.INDEX IFF features> and TCs
^*--------------------------------------------------------------------------------\*
.HL 2 ^^^*A note on IFF features and transmitted comments\*
.LM +10
.INDEX IFF features> historical TC usage
.P 0;Historically IFF structure definition has presented a liberal view of
the use of TC (transmitted comment) entries. For several years some customers
used TCs to carry the sort of information today contained in ACs. The
TCs were allowed to lie outside of features but the context of the TC was
considered to apply to any feature which followed the TC. Thus the following
feature construction resulted:

.TEST PAGE 12
.NO FILL

         ^*2D feature only\*

     ^*TC - transmitted comment\*
     NF - start of new feature
     FS - feature status
     ST - 2D string
     EF - end of feature

.FILL

.INDEX IFF features> empty
.INDEX empty features
.INDEX SOL
.INDEX LITES
.P 0;As TCs lay outside features but inside the layer level a problem arose
if a TC lay between the EF of the last feature in the layer and the EO (end of
layer). There would be no feature to attach the TC to for editing purposes
within the (now obsolete) SOL and LITES editors. To overcome this problem an
empty feature having a feature serial number of zero was invented. This
was used in the following manner:

.TEST PAGE 13
.NO FILL

         ^*2D feature only\*

        .
        EF - end of last real feature in layer
        TC - transmitted comment
        ^*NF - start of empty feature with an FSN of 0\*
        ^*EF - end of feature\*
        EO - end of layer

.FILL

.P 0;This construction is now obsolete and preservation of empty features
is no longer guaranteed. For further details about TCs see the section
devoted to obsolete IFF entries.

.INDEX IFF features> maximum number in file
.INDEX LITES2
.P 0;A single layer, or a single IFF file, may contain a maximum of 65535
features. In practice this figure need rarely worry the user. As file sizes
increase file manipulation becomes less efficient. The i/o overhead for a
LITES2 editing session, for example, may exceed the time taken to do the edits!

.TP 8
.INDEX IFF features> and RA entry
.P 0;The (X,Y) coordinates from all features are used in the calculation
of the RA (RAnge) entry values for the whole file.
.BLANK
.LEFT MARGIN -10
^*--------------------------------------------------------------------------------\*

.PAGE
.!******************************************************************************
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^^^*AC\*########Ancillary Code
.INDEX IFF entries> AC
.INDEX AC entry
^*--------------------------------------------------------------------------------\*
.P 0;^*FORMAT\*

.LEFT MARGIN +10
.P 0;AC ## type ## value ## ["text"]

.P -10;^*Example\*
.P 0;Two examples of ACs are given. The first illustrates use of the optional
text field. The second shows a real value AC which does not have text.

.P 0;AC ## 5 ## 570 ## "GPO inspection pit, cast cover, depth 2.1m, 110v"
.P 0;AC ## 3 ## 384.2
.LEFT MARGIN -10
.TEST PAGE 10
.P 0
^*--------------------------------------------------------------------------------\*
.BREAK;^*DESCRIPTION\*

.LEFT MARGIN +10
.P 0;AC entries are used to hold miscellaneous information. They are composed
of a type word, a longword value and an optional text.

.INDEX AC entry> types of data storage
.INDEX AC entry> definition of types
.P 0;The type of information held in an AC is determined by the AC type.
.INDEX FRT>ACD
.INDEX ACD
Using the ACD section of an FRT file (see the FRT User's Guide), a name,
datatype (integer, real, character, date, time), and range of legal values
may be associated with the numerical AC type. Some default types are always
defined, whether or not an FRT file is used:
.NOFILL
.KEEP

^*Data type AC type Name               Minimum    Maximum\*
Integer   1       Secondary__FC       0          32767
Integer   2       Contour           -2147483647 2147483647
Real      3       Height            -1.0E37     1.0E37
Integer   4       LH__boundary       0           32767
Integer   5       RH__boundary       0           32767
Integer   6       Text              0           32767
Integer   7       DFAD__FADT         0           0
Integer   8       DFAD__ACC          0           0
Integer   9       Parent__FSN        0           65535
Integer  10       RELHT__START       0           100
Integer  11       RELHT__END         0           100
Real     80       Cliff__left        -1.0E37     +1.0E37
Real     81       Cliff__right       -1.0E37     +1.0E37
Real     82       Polygon__info      -1.0E37     +1.0E37
Real     91       X                 -1.0E37     +1.0E37
Real     92       Y                 -1.0E37     +1.0E37
Real     93       Z                 -1.0E37     +1.0E37
Real     94       ZB                -1.0E37     +1.0E37
Real     95       ZC                -1.0E37     +1.0E37
Real     96       ZD                -1.0E37     +1.0E37
Real     97       Dheight           -1.0E37     +1.0E37

.NOKEEP
.FILL
.P-8;##0#####reserved for future assignment by LSL
.I-8;##1#####secondary feature code. The AC value holds a subsidiary feature
code. The AC text is not used.
.I-8;##2#####integer contour height. The AC value holds a contour height,
as an integer. The AC text is not used.
.I-8;##3#####real contour height. The AC value holds a contour height,
as a real number. The AC text is not used.
.I-8;##4#####left hand boundary definition. The AC value holds a secondary
feature code, the AC text holds a boundary text.
.I-8;##5#####right hand boundary definition. The AC value holds a secondary
feature code, the AC text holds a boundary text.
.I-8;##6#####text. THe AC value is not used.
.I-8;##7#####MCE DFAD data. The AC value is not used, the AC text holds DFAD
commands specifying typing information.
.I-8;##8#####MCE DFAD accuracy data. The AC value is not used, the AC text holds
DFAD commands specifying accuracy information.
.I-8;##9#####ID number of parent feature. The AC value is a number which
is the same for all features formed by splitting the parent feature. The
AC text is not used.
.I-8;#10#####'relative height' at start. The AC value is a sequence number
(0 or higher) used to identify the height ordering of a series of features
meeting at a junction. A type 10 AC refers to the ordering of the start of
the feature. The AC text is not used.
.I-8;#11#####'relative height' at end. The AC value is used as for type 10,
but relates to the end of the feature. The AC text is not used.
.I-8;#12-79##reserved for future assignment by LSL
.I-8;#80#####real height at left of cliff line. The AC value holds the height
to the left of a cliff feature. The AC text is not used.
.I-8;#81#####real height at right of cliff line.The AC value holds the height
to the right of a cliff feature. The AC text is not used.
.I-8;#82#####real area of a polygon. The AC text contains the polygon 
code.
.I-8;#83-90##reserved for future assignment by LSL. Note that these ACs
will have real values in their AC values.
.I-8;#91-97##these definitions are not expected to occur in AC entries. They
define columns (including the X, Y, and Z coordinates) which occur in
CB entries.
.I-8;#98-99##reserved for future assignment by LSL. Note that these ACs
will have real values in their AC values.
.I-8;100-119#MCE specific codes. For internal use by MCE.
.I-8;120-139#USGS specific codes. The AC type number and AC value are
used for typing information. The AC text is not used.
.I-8;140-999#reserved by LSL.
.I-8;1000-32767#user-defined ACs specified by ACD records in the FRT file.

.INDEX AC entry> type value range
.P 0;AC types may take values in the range 0-32767.

.P 0;Note that AC type 3 and AC types 80 through 99 are currently the only
default ACs to have a real value. Any AC type which is not defined by default
or in the FRT file will be treated as having an integer value.

.INDEX AC entry> maximum text length
.P 0;AC texts may be up to 255 characters in length.

.LEFT MARGIN -10
.TEST PAGE 10
.P 0
^*--------------------------------------------------------------------------------\*
.BREAK;^*NOTES\*
.LEFT MARGIN +10
If the ancillary code type number is changed, the user should be most careful
to ensure that undesirable alteration of the value field does not
occur. ACs with type value 3 and ACs with type values in the range 80 to 99
have floating point numbers in the value field. If the AC type value is
changed to a an AC type which has an integer value in the value field, the
floating point value will be interpreted as an integer value. Similarly, if an
AC type having an integer value in the value field is changed to an AC type
having a floating point number in the value field the value field will be
interpreted as a floating point number. 

.LEFT MARGIN -10
.P 0
^*--------------------------------------------------------------------------------\*
.PAGE
.!******************************************************************************
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^^^*CB\*########Coordinate Block
.INDEX IFF entries> CB
.INDEX CB entry
^*--------------------------------------------------------------------------------\*
.P 0;^*FORMAT\*
.LEFT MARGIN +10
.LITERAL
CB nrow flags gtype ncol natt

    (code value
natt(  .    .        fixed attributes
    (  .    .

      code_1  code_2 ...  code_ncol
    (value_1 value_2 ... value_ncol
nrow(   .       .    ...    .
    (   .       .    ...    .

.END LITERAL
.P 0;where:
.LIST " "
.LE ;nrow#####-#the number of coordinates in the CB entry
.LE ;flags####-#pen down (1) /pen up (0) control flag
.LE ;gtype####-#graphical type represented by this CB (1-12)
.LE ;ncol#####-#number of attributes per point
.LE ;natt#####-#number of fixed attributes
.END LIST 
.LEFT MARGIN -10
.BLANK
.TEST PAGE 10
^*--------------------------------------------------------------------------------\*
.BREAK;^*DESCRIPTION\*
.LEFT MARGIN +10
.P 0;The CB entry contains the point data defining the feature. There may
be more than one CB entry in a feature. The CB entry allows attributes other
.INDEX CB entry> types of data storage
.INDEX CB entry> definition of types
than X, Y, or Z coordinates to be defined on a per-point basis. These 
attributes may be 'fixed' i.e. constant for all points in the CB, or
'varying' i.e. defined for each point. In either case, a particular
attribute is identified by an integer code which is looked up exactly
.INDEX FRT>ACD
.INDEX ACD
as for AC type in the ACD section of an FRT file to obtain a name, data type
and range of permissible values. Even X, Y, and Z are dealt with in this
way, being codes 91, 92, and 93 respectively. As with AC entries, some codes
are defined by default, whether or not an FRT file is used.
.INDEX CB entry> absent value
.P 0
If an attribute in a CB has the integer value '80000000' hexadecimal
(-2147483648 decimal), then it is treated exactly as if the attribute
was not present at all. This allows for the case when a particular
attribute is only present at some of the points within a CB. 

.INDEX IFF revision levels
.INDEX IFF>revision levels
.P 0;CB is the only possible coordinate string entry in an output revision
level 1 IFF file.

.P 0;Each CB should contain no more than 200 points, so a new CB with the
flags set to 1 (ie keep pen down when drawing to the start of this new
CB) will be started for the remaining points.

.P 0;If an invisible line is to be coded in the feature, then this is
represented by starting a new CB with the flags set to 0 (ie keep pen
up when moving to the start of this new CB).

.P 0;CB X and Y coordinate values may optionally be offset using the origin
offset facility in a type 2 MD (Map descriptor). 
.LEFT MARGIN -10
.TEST PAGE 10
.P 0
^*--------------------------------------------------------------------------------\*
.BREAK;^*NOTES\*
.LEFT MARGIN +10

.P 0;Note that the pen flag is always considered to be 0 for the first CB
in a feature - that is the pen is always kept up to move to the start of
a new feature.

.P 0;A CB entry must contain at least X and Y columns in order to be sensible.
.LEFT MARGIN -10
.BLANK
^*--------------------------------------------------------------------------------\*

.PAGE
.!******************************************************************************
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^^^*EF\*########End#of#Feature
.INDEX IFF entries> EF
.INDEX EF entry
^*--------------------------------------------------------------------------------\*
.P 0;^*FORMAT\*
.LEFT MARGIN +10
.P 0;EF
.P 0;The EF entry does not have any contents.
.FILL
.LEFT MARGIN -10
.BLANK
.TEST PAGE 10
^*--------------------------------------------------------------------------------\*
.BREAK;^*DESCRIPTION\*
.LEFT MARGIN +10
.P 0;The EF entry flags the end of a feature, and balances the NF entry
at the start of the feature.

.LEFT MARGIN -10
.BLANK
.P 0
^*--------------------------------------------------------------------------------\*

.PAGE
.!******************************************************************************
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^^^*FS\*########Feature#Status
.INDEX IFF entries> FS
.INDEX FS entry
^*--------------------------------------------------------------------------------\*
.P 0;^*FORMAT\*
.LEFT MARGIN +10
.P 0;FS ## fc ## status ## pc/text ## user-word
.P 0;where:
.LIST 0," "
.LE ;fc############-#is the feature code
.LE ;status########-#flag data
.LE ;pc/text#######-#feature type or process code 
.LE ;user-word#####-#ephemeral user dependent data.
.END LIST 
.P -10;^*Example\*
.P 0;FS 23 0000 0000 0000
.LEFT MARGIN -10
.BLANK
^*--------------------------------------------------------------------------------\*
.BREAK;^*DESCRIPTION\*
.LEFT MARGIN +10
.P 0;The FS entry contains data which describes the feature containing it.
It should be the first entry after the NF entry.

.INDEX FS entry> definition of fields
.P 0;The FS entry has 4 word length fields, the contents of which may be
summarised as follows: 

.LIST

.INDEX FS entry> feature code
.LE ;The ^*feature code\* is in field 1, and is the primary descriptive code
for a feature. 

.INDEX FS entry> status word
.LE ;The second, ^*status\*, field is used by Laseraid and its post-processing
programs. 

.INDEX FS entry> pc/text word
.LE ;The third ^*pc/text\* field states whether this
feature is text, symbol or line, and also holds either a process code or a
description of the type of text. 

.INDEX FS entry> user word
.LE ;The fourth ^*user-word\* field is reserved for use by users.
Beware that not all processing programs will preserve this word from
input to output. 
.END LIST 

.INDEX FS entry> historical types
.INDEX LAMPS
.P 0;Within the modern LAMPS environment the first field of the feature status
entry is called the feature code. Historically, this has not always been the
case as the first field has been interpreted in one of two ways, depending on
the degree of attribute coding required.
.P 0
.INDEX FS entry> historical IT code
.LIST
.LE
Interpolation Type - a direct indication of how the feature is to be drawn:
.LEFT MARGIN +5
.BLANK
IT0##- straight lines
.BREAK
IT1##- single symbol at each point
.BREAK
IT5##- cubic interpolation
.BREAK
IT64#- text feature
.LEFT MARGIN -5
.P 0;Interpolation Type was sometimes historically referred to as
Graphical Code (GC).

.LE
Feature Code (FC) - the value is looked up, either in a Legenda file, or an FRT
file to yield a Graphical Type for the code, along with details of line style,
symbol definitions, colour, line thickness and so on (see FRTLIB, FPP and
LITES2 documentation).

.P 0;Modern Laser-Scan usage and documentation always refers
to "feature code". 
.INDEX Feature Code
.INDEX FC
.INDEX Graphical Code
.INDEX GC
.END LIST
.P 0
The ^*status\* field of the feature status contains status bits used by the
Laser-Scan Laseraid digitiser. The status bits are defined currently as
follows: 
.BL
.NOFILL
.KEEP

Bit number   Value	Meaning when set	  Meaning when clear

     0		 1	feature is closed	  feature is open
     1		 2	feature is a line	  feature is an edge
     2		 4	REVersed feature	  non-REVersed feature
     3		 8	two-part (FINd) feature	  not a two-part feature
     4		16	Paintout-Only feature	  normal feature (keep)
     5		32	squaring flag set	  squaring flag clear
     6		64	INVerse polarity used	  normal polarity
    15	     32768	PaintOut Suppress used	  no PaintOut Suppress

All other bits are undefined at present.
.NOKEEP
.FILL
.P 0
The ^*pc/text\* word contains flags, interpreted according to the value of top
two bits: 
.P 0
.NOFILL
.BLANK
Bits	Values	Meaning
d14-15  0       line, circle, area or symbol string feature
        1       symbol feature
        2       text feature
        3       value reserved
.BLANK
For text features, the rest of the word is interpreted as follows:
.BLANK
.INDEX Text Position
d0-3	0-8	text position code
d4-5	0-3	type style    (O.S. only)
d6-11	0-63	name category (O.S. only)
.BLANK
For other feature types, the rest of the word contains the process
code.
.FILL
.TP 5
.LEFT MARGIN -10
.TEST PAGE 10
.P 0
^*--------------------------------------------------------------------------------\*
.BREAK;^*NOTES\*
.LEFT MARGIN +10
.P 0;Words 2 and 3 of an FS entry are always decoded bitwise. The individual
bits of these words may be edited using the IMP patch editor IPATCH.

.TP 10
.P 0
The ^*user-word\* word of the feature status contains user dependent data about
the feature. The user should be aware that data stored in the ^*user-word\*
field of the feature status may be lost during LAMPS processing.
.LEFT MARGIN -10
.P 0
^*--------------------------------------------------------------------------------\*

.PAGE
.!******************************************************************************
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^^^*NF\*########Start#of#New#Feature
.INDEX IFF entries> NF
.INDEX NF entry
^*--------------------------------------------------------------------------------\*
.P 0;^*FORMAT\*
.LEFT MARGIN +10
.P 0;NF ## fsn ## isn
.P 0;where:
.LITERAL

     fsn     - the feature serial number, duplicates are allowed.
     isn     - feature internal sequence number. This should be
               unique and reflects digitising order.

.END LITERAL
.P -10;^*Example\*
.P 0;NF#38#38

.LEFT MARGIN -10
.TEST PAGE 10
.BLANK
^*--------------------------------------------------------------------------------\*
.BREAK;^*DESCRIPTION\*
.LEFT MARGIN +10

.P 0;The NF entry starts a new feature. It contains two identifying numbers,
both in the range 0-65535.

.P 0;The feature serial number (FSN) is generally
used as the 'name' of the feature. There are three main conventions about
when or whether FSNs are unique:

.LIST
.LE; FSNs unique within the IFF file. This mechanism has traditionally been
used by OS, and may be used by other customers as well.
.LE; FSNs unique within a particular layer. Thus a feature could be identified
by its layer and FSN. This mechanism has traditionally been used by MCE.
.LE; FSNs not unique. The main example of this now is in TRI and SRI files,
where single symbols may be made up of multiple features, all with the same
FSN. In these cases the FSN is the ASCII code of the text, or the identifying
number of the symbol.
.END LIST

.P 0;The internal sequence number (ISN) is unique within the IFF file, and
can be used as a single unique identifier for a feature. It may, but need
not, be the same as the FSN. The ISN is generally assigned starting at 1
and incremented as a file is digitised.

.LEFT MARGIN -10
.TEST PAGE 10
.P 0
^*--------------------------------------------------------------------------------\*
.BREAK;^*NOTES\*
.LEFT MARGIN +10
.P 0;Note that historically FSN 0 was considered special by many programs.
It was used to flag an empty feature used as a place-holder in the IFF file,
generally to hold TCs which applied to the entire layer. Thus it was possible to
come across multiple FSN 0s even when FSNs were notionally unique within a
file. In modern IFF files, the trailing TCs are no longer used.

.P 0;Note that many programs use the internal sequence number as a unique
identifier for features, and therefore care should be taken when editing this
field using the IMP patch editor IPATCH.

.LEFT MARGIN -10
.P 0
^*--------------------------------------------------------------------------------\*

.PAGE
.!******************************************************************************
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^^^*RO\*########ROtation#entry
.INDEX IFF entries> RO
.INDEX RO entry
^*--------------------------------------------------------------------------------\*
.P 0;^*FORMAT\*
.LEFT MARGIN +10
.P 0;RO ## angle
.P 0;where:
.LIST " "
.LE ;angle####-#is the angle of rotation.
.END LIST 

.P -10;^*Example\*
.P 0;RO 0.72

.LEFT MARGIN -10
.BLANK
.TEST PAGE 10
^*--------------------------------------------------------------------------------\*
.BREAK;^*DESCRIPTION\*

.LM +10
.P0; The RO entry defines the angle at which an oriented symbol or a text
is to be drawn. The angle is in radians, measured counterclockwise from
the positive horizontal axis.

.P0;The RO entry should occur after the ST, ZS, or CB entry of a feature, and
before any TX entry.
.LEFT MARGIN -10
.P0
^*--------------------------------------------------------------------------------\*

.PAGE
.!******************************************************************************
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^^^*ST\*########2 dimensional point string entry
.INDEX IFF entries> ST
.INDEX ST entry
^*--------------------------------------------------------------------------------\*
.P 0;^*FORMAT\*
.LEFT MARGIN +10
.LITERAL
ST npts pen
  x-coordinate y-coordinate
        .            .
        .            .
        .            .

.END LITERAL
.P 0;where:
.LIST " "
.LE ;npts#####-#the number of coordinates in the ST entry
.LE ;pen######-#pen down (1) /pen up (0) control flag
.END LIST 
.LEFT MARGIN -10
.BLANK
.TEST PAGE 10
^*--------------------------------------------------------------------------------\*
.BREAK;^*DESCRIPTION\*
.LEFT MARGIN +10
.P 0;The ST entry contains the point data defining the feature. There may
be more than one ST entry in a feature.

.INDEX IFF revision levels
.INDEX IFF>revision levels
.P 0;It is illegal to have both ST and ZS entries within the same IFF feature.
ST entries only occur in IFF output revision level 0 files. In a revision
level 1 file, the same effect is achieved by a CB entry with at least
X and Y columns.

.P 0;Each ST should contain no more than 200 points, so a new ST with the
pen flag set to 1 (ie keep pen down when drawing to the start of this new
ST) will be started for the remaining points.

.P 0;If an invisible line is to be coded in the feature, then this is
represented by starting a new ST with the pen flag set to 0 (ie keep pen
up when moving to the start of this new ST).

.P 0;An ST is suitable for data which does not have an inherent height,
or which is all at one height (in which case the feature will also have
a contour height AC). For truly three-dimensional data, a ZS entry is more
appropriate.

.P 0;ST coordinate values may optionally be offset using the origin offset
facility in a type 2 MD (Map descriptor). 
.LEFT MARGIN -10
.TEST PAGE 10
.P 0
^*--------------------------------------------------------------------------------\*
.BREAK;^*NOTES\*
.LEFT MARGIN +10

.P 0;Note that the pen flag is always considered to be 0 for the first ST
in a feature - that is the pen is always kept up to move to the start of
a new feature.
.LEFT MARGIN -10
.BLANK
^*--------------------------------------------------------------------------------\*

.PAGE
.!******************************************************************************
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^^^*TH########Text height#/#line#THickness#entry\*
.INDEX IFF entries> TH
.INDEX TH entry
^*--------------------------------------------------------------------------------\*
.P 0;^*FORMAT\*
.LEFT MARGIN +10
.LITERAL

TH thickness

.END LITERAL
.P 0;where:
.LIST " "
.LE ;thickness#-#is an integer defining line thickness or text size.
.END LIST 
.LEFT MARGIN -10
.BLANK
.TEST PAGE 10
^*--------------------------------------------------------------------------------\*
.BREAK;^*DESCRIPTION\*
.LEFT MARGIN +10
.P 0;The TH entry is used for the following purposes:

.LIST
.LE; to hold the line thickness for displays which are capable of displaying
multiple thickness lines
.LE; to hold the size of text for a text feature. In this case the integer
is interpreted as either:
.LIST "o"
.LE; the height of the text in hundredths of a millimetre
.LE; the size of the text as a point size
.END LIST
.END LIST

.P 0
The TH entry should occur before the ST or ZS entry, and after any ACs.
.LEFT MARGIN -10
.TEST PAGE 12
.P 0
^*--------------------------------------------------------------------------------\*
.BREAK;^*NOTES\*
.LEFT MARGIN +10
.P 0;On obsolete legenda based LAMPS systems a negative TH entry value 
determined line styles. The negative TH value was used to index a line
pattern table. Negative TH values are no longer supported. Line styles
are now determined by reference to an FRT (Feature Representation Table)
which is indexed on the basis of the features feature code alone. The TH entry
value now determines text height or line thickness only. 

.LM -10
.BLANK
^*--------------------------------------------------------------------------------\*
.PAGE
.!******************************************************************************
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^^^*TS########Text Status entry
.INDEX IFF entries> TS
.INDEX TS entry
^*--------------------------------------------------------------------------------\*
.P 0;^*FORMAT\*
.LEFT MARGIN +10
.LITERAL

TS  tcc  reserved  textcode  reserved

.END LITERAL
.P 0;where:
.LIST " "
.LE ;tcc##########-#is the text component code
.LE ;reserved#####-#reserved for future Laser-Scan allocation
.LE ;textcode#####-#text word: describes the type of text
.END LIST 
.LEFT MARGIN -10
.BLANK
.TEST PAGE 10
^*--------------------------------------------------------------------------------\*
.BREAK;^*DESCRIPTION\*
.LEFT MARGIN +10
.P 0;The TS entry introduces a text component, and contains data which
describes the text component following it.

.P 0;Text features may contain one text string, with associated location
and descriptive data, or they may be ^*composite\* - that is composed of
several sub-texts or text components, which may be manipulated independently
or as a single entity. It is thus possible to have a "multi-banked text"
or text paragraph contained within a single IFF feature.

.P 0;Each text component starts with a TS entry, and ends with the next TS
entry, or the final EF of the feature. The first TS entry occurs immediately
after the FS entry and any AC entries. Text components may not include FS
or AC entries, but may contain any other entries that are legal within a
normal text feature.

.P 0;Word 1 of the TS entry is the text component code (TCC), which is
the primary descriptive code for a text component - it is effectively the
feature code for this component of the composite text, and is used in the
same manner.

.P 0;Word 3 of the TS entry is the text word, and is identical in form to
word#3 of a text's FS entry - it holds a description of the type of text
component. Note that the top two bits (what would be the text/symbol bits in an
FS) should always be set to '10' binary, as they would in an FS entry. These
bits are referred to as redundancy bits, since they are not strictly necessary. 

.P 0;The second and fourth words are reserved for later definition, and should
always be zero.
.LEFT MARGIN -10

.TEST PAGE 10
.P 0
^*--------------------------------------------------------------------------------\*
.BREAK;^*NOTES\*
.LEFT MARGIN +10
.P 0;The user should be aware that the banked text functionality provided by
TS entries may not be available throughout a LAMPS system. Multi-banked text
editing is a licensed option in the LAMPS LITES2 graphical editor. For details
of LAMPS licensing arrangements please refer to Laser-Scan.
.LEFT MARGIN -10
.P 0
^*--------------------------------------------------------------------------------\*
.PAGE
.!******************************************************************************
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^^^*TX########TeXt#entry
.INDEX IFF entries> TX
.INDEX TX entry
^*--------------------------------------------------------------------------------\*
.P 0;^*FORMAT\*
.LEFT MARGIN +10
.LITERAL

TX "text string"

.END LITERAL
.P 0;where:
.LIST " "
.LE ;text-string##-#is a text string
.END LIST 
.LEFT MARGIN -10
.BLANK
.TEST PAGE 10
^*--------------------------------------------------------------------------------\*
.BREAK;^*DESCRIPTION\*
.LEFT MARGIN +10
.P 0;The TX entry holds the text for a text feature. It should be the last
entry before the EF entry.

.P 0;The maximum number of characters in a TX is 255.
.LEFT MARGIN -10
.P 0
^*--------------------------------------------------------------------------------\*


.PAGE
.!******************************************************************************
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^^^*ZS\*########3 dimensional point string entry
.INDEX IFF entries> ZS
.INDEX ZS entry
^*--------------------------------------------------------------------------------\*
.P 0;^*FORMAT\*
.LEFT MARGIN +10
.LITERAL
ZS  npts  pen
  x-coordinate y-coordinate z-coordinate
        .            .            .
        .            .            .
        .            .            .

.END LITERAL
.P 0;where:
.LIST " "
.LE ;npts#####-#the number of coordinates in the ZS entry
.LE ;pen######-#pen down/pen up control flag
.END LIST 
.LEFT MARGIN -10
.BLANK
.TEST PAGE 10
^*--------------------------------------------------------------------------------\*
.BREAK;^*DESCRIPTION\*
.LEFT MARGIN +10
.P 0;The ZS entry contains the three-dimensional point data defining the
feature. There may be more than one ZS entry in a feature:

.INDEX IFF revision levels
.INDEX IFF>revision levels
.P 0;It is illegal to have both ST and ZS entries within the same IFF feature.
ZS entries only occur in IFF output revision level 0 files. In a revision
level 1 file, the same effect is achieved by a CB entry with at least
X, Y, and Z columns.

.LIST
.LE; Each ZS should contain no more than 200 points, so a new ZS with the
pen flag set to 1 (ie keep pen down when drawing to the start of this new
ZS) will be started for the remaining points.

.LE; If an invisible line is to be coded in the feature, then this is
represented by starting a new ZS with the pen flag set to 0 (ie keep pen
up when moving to the start of this new ZS).
.END LIST

.P 0;A ZS entry is used when the data to be held is inherently
three-dimensional - for instance in digitising a river bed, where the river
flows downhill. For data at a constant height, an ST with a contour height
AC is more appropriate.
.LEFT MARGIN -10
.TEST PAGE 10
.P 0
^*--------------------------------------------------------------------------------\*
.BREAK;^*NOTES\*
.LEFT MARGIN +10
.P 0;Note that the pen flag is always considered to be 0 for the first ZS
in a feature - that is the pen is always kept up to move to the start of
a new feature.

.P 0;The user should be aware that 3D string manipulation may not be available
throughout a LAMPS system. It is supported in the Basic LAMPS packages of
MAPPING, IMP, LITES2, and PLOTTING, but other packages may not support ZS
entries.
.LEFT MARGIN -10
.BREAK;^*--------------------------------------------------------------------------------\*
