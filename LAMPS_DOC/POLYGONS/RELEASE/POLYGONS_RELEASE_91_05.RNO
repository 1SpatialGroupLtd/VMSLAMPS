.LEFT MARGIN  0;.RIGHT MARGIN 80;.PAGE SIZE    60,80
.KEEP
.FLAGS BOLD
.!** title page
.FIGURE 14
.CENTRE ;^&Laser-Scan Ltd.\& 
.FIGURE 2
.CENTRE ;^&POLYGONS\&
.BLANK
.CENTRE ;^&Release Notes\&
.FOOT
.FLAGS SUBSTITUTE
.NOFILL
Copyright (C) $$year Laser-Scan Ltd
Science Park, Milton Road, Cambridge, England CB4 4FY  tel: (0223) 420414

Document "POLYGONS Release"				Category "Release Notes"
Document Issue 2.6	Tim Hartnall			19-Nov-1990
Document Issue 2.7	Martin Wickett			25-Mar-1991
.FILL
.NOFLAGS SUBSTITUTE
.END FOOT

.!* and the title to go at the top of each page
.TITLE POLYGONS Release notes
.PAGE
.HL 1 ^&CONTENT\&
This document describes recent changes to the Laser-Scan LAMPS software package
POLYGONS. This package provides vector polygon generation and manipulation 
functionality.

.P 0
Details of POLYGONS functionality and commands can be found in the
latest edition of the POLYGONS User's Guide. 

.P 0
This document covers changes to package POLYGONS since the previous general
release of LAMPS software, which was frozen ready for issue on 01-Aug-1990. At
that time, the extant version of POLYGONS was described as V2.5 of
27-Mar-1990. See the POLYGONS release notes for the previous LAMPS release for
information about earlier changes. 


.HL 1 ^&NEW OR CHANGED FACILITIES\&

In the specified version of the POLYGONS package programs, libraries or
documentation, the following changes were made.
.LIST
.DISPLAY ELEMENTS "(",LU,")"

.le;10-Oct-1989 - Release Notes

.list

.le;These release notes have been trimmed back to the previous release.

.end list 0

.le;10-Oct-1990 - Module IPOLYGON
.list
.LE ;The AC type specified by the /PIP=(CONTAIN__LABEL__AC='integer') 
qualifier keyword is now used correctly. Formerly, due to a bug in the
point-in-polygon output routine, AC 0 was output instead of the specified 
AC type.

.lE ;Chapter 2 of the Polygons Reference Manual has been amended to show
correct references to /PIP=LABEL__AC and /PIP=IDENT__AC which has been changed
to /PIP=CONTAIN__LABERL__AC and /PIP=CONTAIN__IDENT__AC.  These changes have
been duplicated in these Release Notes as Appendix A.

.end list 0
.le;19-Nov-1990 - Module IPOLYGON
.list
.LE ;Bug fix. /SEED=FC:'integer'[,...] now takes multiple seed point FC
arguments as documented. 
.end list 0
.le;25-Mar-1991 - User Guide
.list
.LE ;Correction to layout of page.
.end list 0
.le;25-Mar-1991 - SPS
.list
.LE ;Section 3 Facilities: Spelling correction
.LE ;Section 3.1 Hardware Prerequisites: Memory minimum requirements raised to 
at least 4000 pages, 10000 pages preferred.
.end list 0
.le;25-Mar-1991 - Reference Manual
.list
.LE ;Last sentence on page 2-33 changed to read: "Those segments that do not 
form the boundary between two different polygons do not occur in either loop."
.end list 0

.end list

.APPENDIX

.flags bold
.enable bold
.keep
.!* ensure that we start on a new page
.PAGE
.NOJUST
.P ;/PIP=([FC:'integer'],
.I ;######[[NO]IDENT],
.I ;######[CONTAIN__IDENT__AC:'integer'],
.I ;######[ITERATE:'integer'],
.I ;######[[NO]LABEL],
.I ;######[CONTAIN__LABEL__AC:'integer'],
.I ;######[LAYER:'integer'],
.I ;######[OUTPUT:'file-spec'])
.I ;/NOPIP##^*(default)\*
.JUST
.P ;-#indicates that one point feature per polygon are to be output to an
IFF file. The coordinates of the point features are calculated to lie within
the polygon. If /PIP is specified without any of the keyword arguments the
following defaults are assumed: 

.P 0;^*/PIP=(FC:1,
.I 0;######NOIDENT,
.I 0;######ITERATE:1,
.I 0;######NOLABEL,
.I 0;######LAYER:1)\*

.p 0;The point-in-polygon features will be output with FC (Feature Code) 1 to 
layer 1. By default polygon labels and identifiers will not be copied to the 
output features. 

.NO JUST
.TP 10
.p ;/PIP=OUTPUT:'file-spec'
.JUST
.P ;-#specifies the IFF file that the points-in-polygons are output
to. In the absence of the /PIP=OUTPUT qualifier the output file
specification is taken from that of the segment input file but with the file
extension '.IFF'. This default mechanism may be overriden by use of the
/PIP=OUTPUT:'file-spec' combination. Any file-spec argument given will be
used as the output file specification. Any parts found to be missing from the
file-spec OUTPUT will be taken from the input file-spec with a '.IFF' extension.

.NO JUSTIFY 
.TEST PAGE 10
.P ;/PIP=LAYER:'integer'
.I ;/PIP=LAYER:1##^*(default)\*
.JUSTIFY
.P ;-#enables the user to specify the layer to be used for IFF
point-in-polygon output. By default the point features will be placed in layer
1 and will be given a feature code of 1. 

.NO JUSTIFY 
.TEST PAGE 10
.P ;/PIP=FC:'integer'
.I ;/PIP=FC:1##^*(default)\*
.JUSTIFY
.P ;-#enables
the user to specify the FC (Feature Code) to be used for IFF
point-in-polygon output. By default the point features will be placed in
layer 1 and will be given a feature code of 1. 

.NOJUST
.TP 10
.p ;/PIP=IDENT
.i ;/PIP=NOIDENT##^*(default)\*
.JUST
.P ;-#indicates that the internally generated polygon identifiers 
are to be copied to the point-in-polygon features. The identifier is 
transferred as the string part of the AC type specified by the 
/PIP=CONTAIN__IDENT__AC:'integer' combination.

.p 0;The numeric field of the AC will contain the polygon area if the
/OPTIONS=AREA qualifier is present.

.p 0;By default identifiers are not added to the output point-in-polygon features.

.NOJUST
.TP 10
.p ;/PIP=CONTAIN__IDENT__AC:'integer'
.i ;/PIP=CONTAIN__IDENT__AC:82##^*(default)\*
.JUST
.P ;-#specifies which AC type is to be used to copy the polygon identifiers 
to the point-in-polygon 
features. The /PIP=CONTAIN__IDENT__AC:'integer' combination cannot be 
used unless the /PIP=IDENT combination is present.
.p 0;By default labels are copied to point-in-polygon features using AC type 
82.


.PAGE
.NOJUST
.P ;/SEED=([AC:'integer',
.i ;#######[FC:'integer'[,...]],
.I ;#######[FILE:'file-spec'],
.I ;#######[LAYER:'integer'[,...]],
.I ;#######[PAIR:'file-spec'],
.I ;#######[SURROUND:'text-string'],
.I ;#######[USE:'keyword'])
.I ;/NOSEED##^*(default)\*
.JUSTIFY
.P ;-#indicates that labelling information is to be extracted from seed 
points. The various options allow the user to specify where the seed points 
are to be read from, how they are to be identified and how a label can be 
obtained from them.

.NOJUST
.p 0;/SEED cannot be used with the /LRCODE qualifier. 

.NO JUSTIFY 
.TEST PAGE 10
.P ;/SEED=AC:'integer'
.I ;/SEED=AC:82##^*(default)\*
.JUSTIFY
.P ;-#specifies which AC (Ancillary Code) the text is to be taken from for 
labelling if the /SEED=USE:AC combination has been used. 

.p 0;By default seed points are expected to have an type 82 AC entry when the 
/SEED=USE:AC combination is used.


.NO JUSTIFY 
.TEST PAGE 10
.P ;/SEED=FC:'integer'[,...]
.I ;/SEED=FC:1##^*(default)\*
.JUSTIFY
.P ;-#specifies the FC (Feature Code) of the polygon seed points. The seed
points may either be in the junction structured input IFF file or in a separate
file specified using the /SEED=FILE qualifier. All features in the input file 
(or in the file specified with /SEED=FILE) which have the specified FC 
are considered to be seed points. The maximum number of feature
codes which may be specified is 32. The feature codes must lie in
the range 0 to 32767. All features which lie within IFF layer 0 will be
ignored.

.P 0;By default seed points are expected to have a feature code of 1.

.NO JUSTIFY 
.TEST PAGE 10
.P ;/SEED=FILE:'file-spec'
.JUSTIFY
.P ;-#specifies a separate IFF file containing the polygon seed point 
features. Any parts of the file specification which are not supplied will
be taken from the default specification LSL$IF:IFF.IFF;0.

.P 0;It is most important that the /SEED=FILE:'file-spec' argument is
omitted if the seed points are included within the junction structured
segments file. IPOLYGON checks that any /SEED=FILE:'file-spec' argument
does not clash with the input segment file specification.

.P 0;All features in the seed file will be treated as seed points, and must
accord with the rules for seed points, unless the seed point features are
differentiated from other data in the file with /SEED=FC and/or /SEED=LAYER
keyword arguments. The rules for IFF polygon seed point features are listed
in the Description Section below. All features which lie within IFF layer 0
will be ignored. 

.p 0;If either the /SEED=LAYER or /SEED=FC combinations are present then seed
points (whether they come from the input segment or a separate seed point
file) are identified as those features that either belong to one of the
specified layers or have one of the specified FCs (Feature Codes). It should be
noted that these tests are complementary - that is a feature need only pass
one of the tests to qualify as a seed point. 

.p 0;The default behaviour in the absence of both the /SEED=LAYER and /SEED=FC 
combinations depends on whether there is a separate seed point file or not. If 
there is a separate seed point file then all features within it are taken to 
be seed points. If there is not a separate seed point file then only features 
with FC 1 are deemed to be seed points.

see
.NO JUSTIFY
.TEST PAGE 10
.P ;/SEED:LAYER='integer'[,...]
.JUSTIFY
.P ;-#specifies the layers containing the polygon seed points. The seed points
may either be in the junction structured input IFF file or in a separate file
specified using the /SEED=FILE qualifier keyword. All features in the input
file (or in the file specified with /SEED=FILE) which lie within the specified
layer are considered to be seed points. The maximum number of layer numbers
which may be specified is 32. The layer numbers must lie in the range 1 to
32767. All features which lie within IFF layer 0 will be ignored. 

.P 0;By default no layers are assigned for seed points.

.NO JUSTIFY
.TEST PAGE 10
.P ;/SEED=PAIR:'file-spec'
.JUSTIFY
.P ;-#specifies a FC (Feature Code) pair file which contains one or more FC
pairs. Any parts of the file specification which are not supplied will be
taken from the default specification LSL$IF:IFF.FCP;0. 

.p0;The contents of the FC pair file is used to dynamically select the FC of
the output polygon boundaries. The FC of the polygon boundary is determined
from the FC of the corresponding polygon seed point. If seed point FC can be
found in the first column of the FC pair file then the polygon boundary will
have the FC given in the second column. If the seed point FC cannot be found,
or no seed point has been assigned, then the FC specified by the
/SEED=FC:'integer' combination will be used instead. It should be noted that
this latter case always applies to the bounding polygon. 

.p0;The FC pair file is an ASCII file containing pairs of FCs - one pair per 
line. Comment lines may be included in the file providing they begin with a 
'!'. The FC pairs must be ordered so that the seed point FCs (first column) 
are arranged in ascending order. Seed point FCs must be unique. 

.p 0;The /SEED=PAIR option can only be used when the /POLYGONS qualifier is 
present.

.NO JUSTIFY
.TEST PAGE 10
.P ;/SEED=SURROUND:'text-string'
.I ;/SEED=SURROUND:"Surrounding void"##^*(default)\*
.JUSTIFY
.P ;-#specifies the label to be assigned to the bounding polygon. By default
IPOLYGON uses the label "Surrounding void". The text-string may have a maximum
length of 255 characters. 

.NO JUSTIFY 
.TEST PAGE 10
.P ;/SEED=USE:AC
.I ;/SEED=USE:FSN 
.I ;/SEED=USE:TEXT##^*(default)\*

.JUSTIFY
.P ;-#specifies how a text field is to be extracted from the seed point to provide
the polygon label. 

.p 0;The default behaviour is specified by the /SEED=USE:TEXT combination.
Seed points are expected to be an IFF text
feature and hence to contain a TX (TeXt entry). The contents of this TX entry
are used as the label for the polygon which encloses the seed point. 

.P 0;The /SEED=USE:AC combination indicates that the label is to be taken from 
the string part of an AC (Ancillary Code) entry on the seed point feature. The 
relevant AC type can be specified using the /SEED=AC:'integer' qualifier.

.P 0;When the /SEED=USE:FSN combination is used the seed
points are expected to be unorientated point symbol features.
The FSN (Feature Serial Number) of the seed point will be
used as the label of the polygon which encloses the seed point. 

.P 0;If the /SEED=USE:TEXT combination is superceded then the presence of TX 
entries will be issue a warning. 
