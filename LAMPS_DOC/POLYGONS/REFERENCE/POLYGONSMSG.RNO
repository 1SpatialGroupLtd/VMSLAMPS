.SUBTITLE MESSAGES (SUCCESS)

.!******************************************************************************
.PAGE
^*--------------------------------------------------------------------------------\*
.HL     1 ^^^*MESSAGES (SUCCESS)\*

These messages are used to   indicate that the program   has
succeeded in performing some action, and  do not require any
user action.

.LM +4

.NOJUSTIFY;.TP 10;.P -4
NORMAL, normal successful completion.
.JUSTIFY

.P0; ^*Explanation:\*
The current POLYGONS library routine has completed successfully.
.P0; ^*User action:\*
None.
.LM -4
.SUBTITLE MESSAGES (INFORMATIONAL)

.!******************************************************************************
.PAGE
^*--------------------------------------------------------------------------------\*
.HL     1 ^^^*MESSAGES (INFORMATIONAL)\*

These   messages  give information   only,    and require no
immediate action by  the  user.  They  are  used to  provide
information on  the  current  state  of the  program, or  to
supply explanatory  information in support  of  a warning or
error message.

.LM +4

.NOJUSTIFY;.TP 10;.P -4
ALLOCD, Allocated 'integer' Bytes before failure.
.JUSTIFY

.P0; ^*Explanation:\*
Additional message to POLY__F__MEMORY.
.P0; ^*User action:\*
None.

.NOJUSTIFY;.TP 10;.P -4
DEFPOL, Maximum number of polygons set to a default of 'integer'
.JUSTIFY

.P0; ^*Explanation:\*
The logical name LSL$POLYGONS__POLMAX was either undefined or bad. POLYGONS is
setting the maximum number of polygons to the specified default value.
.P0; ^*User action:\*
None.

.NOJUSTIFY;.TP 10;.P -4
DEFSID, Average number of sides per polygons set to a default of 'integer'
.JUSTIFY

.P0; ^*Explanation:\*
The logical name LSL$POLYGONS__AVERAGE__SIDES  was either undefined or bad.
POLYGONS is setting the maximum number of polygons to the specified default
value.
.P0; ^*User action:\*
None.

.NOJUSTIFY;.TP 10;.P -4
POLVAL, Maximum number of polygons set to 'integer'
.JUSTIFY

.P0; ^*Explanation:\*
The logical name LSL$POLYGONS__POLMAX was successfully parsed to the specified 
value
.P0; ^*User action:\*
None.

.NOJUSTIFY;.TP 10;.P -4
SIDVAL, Average number of sides per polygon set to 'integer'
.JUSTIFY

.P0; ^*Explanation:\*
The logical name LSL$POLYGONS__AVERAGE__SIDES was successfully parsed to the
specified value
.P0; ^*User action:\*
None.

.NOJUSTIFY;.TP 10;.P -4
SUGGEST, Suggested maximum value for LSL$____POLYGONS____POLMAX = 'integer'.
.JUSTIFY

.P0; ^*Explanation:\*
Additional message to POLY__F__MEMORY.
.P0; ^*User action:\*
set the logical name LSL$__POLYGONS__POLMAX to a number less-than or equal-to
the suggested value.
.LM -4
.SUBTITLE MESSAGES (WARNING)

.!******************************************************************************
.PAGE
^*--------------------------------------------------------------------------------\*
.HL     1 ^^^*MESSAGES (WARNING)\*

These messages are  output when an error has   occurred that
can be corrected immediately by the user or that the program
will attempt to overcome.

.LM +4

.NOJUSTIFY;.TP 10;.P -4
BADJUN, 'integer' arm junction detected at ('x coord','y coord').
.JUSTIFY

.P0; ^*Explanation:\*
A zero or one arm junction has been detected at the specified location.
Warnings relating to one arm junctions are only issued if the user has specified
the /ONEARM=WARN command qualifier. 
.P0; ^*User action:\*
A zero arm junction would cause serious problems to the POLYGONS library
routines. Program execution is normally abandoned after one (or more) zero arm
junctions have been detected. Such junctions should not occur. Examine all
stages of the flowline used to create the junction structured input file. Check
the HI (HIstory) record of the input file for signs of abnormal processing
termination earlier in the flowline. If the problem cannot be traced, please
contact Laser-Scan. One arm junctions are quite acceptable to the POLYGONS
library polygon formation routines. The presence of an unwanted one arm junction
may indicate poor quality control in the production flowline.

.NOJUSTIFY;.TP 10;.P -4
DBLDIG, double digitising suspected.
.JUSTIFY

.P0; ^*Explanation:\*
Evidence of double-digitising has been discovered. This has been more
specifically located in previous warnings. Execution will probably be aborted
soon after this warning is detected.
.P0; ^*User action:\*
Investigate the segments specified in earlier warnings for possible overlap or
coincidence. If double-digitising is found then the offending segment(s) should
be edited out using LITES2 and junction-structure rebuilt using ILINK.

.NOJUSTIFY;.TP 10;.P -4
DUPSEGFSN, duplicate segment FSN found.
.JUSTIFY

.P0; ^*Explanation:\*
Two or more input file features (segments) share the same FSN (Feature Serial
Number). As the POLYGONS library routines use the segment FSN to uniquely
identify segments, this would cause later processing problems. Processing will
usually be terminated after these duplicate FSN warnings.
.P0; ^*User action:\*
Use the IMP utility IRENUMBER to reallocate the input feature FSNs to unique
values.

.NOJUSTIFY;.TP 10;.P -4
INVFEAT, invalid IFF segment feature.
.JUSTIFY

.P0; ^*Explanation:\*
Problems have been found in one or more of the input IFF segments. These will
have been detailed in previous warnings. Execution will probably be aborted soon
after this warning is given.
.P0; ^*User action:\*
Correct the problems detailed by previous warnings and re-run IPOLYGON.

.NOJUSTIFY;.TP 10;.P -4
LOSTARM, unable to find current arm in feature with FSN 'integer'.
.JUSTIFY

.P0; ^*Explanation:\*
The program has come along the specified segment to a junction in which it
cannot locate the current arm. This problem may be caused by double digitising,
whereby two arms lie at exactly the same angle within the junction.
.P0; ^*User action:\*
Use LITES2 to examine the input segment file, either use LITES2 or ILINK/LLJOIN
followed by ILINK/MERGE to remove all traces of double digitising. Use
ILINK/STRUCTURE to re-create junction structure and the re-run the POLYGONS
utility. 

.NOJUSTIFY;.TP 10;.P -4
MDDEFAULT, MD error: origin defaulted to (0,0).
.JUSTIFY

.P0; ^*Explanation:\*
The /ABSOLUTE qualifier has been given, but there was some error in the MD (map
descriptor) entry, either not type 2 or not a valid MD type 2 entry. The origin
offset has been set to a default value of (0,0) and the /ABSOLUTE qualifier
ignored.
.P0; ^*User action:\*
Check the MD entry, and check that it is type 2 and of the correct 
length.

.NOJUSTIFY;.TP 10;.P -4
MULTIDUF, polygon 'integer' multiply flagged as duff.
.JUSTIFY

.P0; ^*Explanation:\*
POLYGONS utilities usually attempt to continue processing even if polygon
formation fails due to bad input IFF junction structure. The incomplete polygon
is flagged as being duff and is carefully avoided throughout the remaining
processing stages. The input IFF junction structure is corrupt in such a way
that recursive polygon formation has occurred.
.P0; ^*User action:\*
While the POLYGONS utility will make every effort to ensure that the output
files will not contain corrupt polygons, the output files should be checked very
carefully. Ideally, the cause of the junction structure corruption should be
traced and remedied, and then the POLYGONS utility should be re-run. 

.NOJUSTIFY;.TP 10;.P -4
MULTISEG, segment with FSN 'integer' used to form multiple polygons.
.JUSTIFY

.P0; ^*Explanation:\*
POLYGONS utilities attempt to continue processing even if polygon formation
fails due to bad input IFF junction structure. The incomplete polygon is flagged
as being duff and is carefully avoided throughout the remaining processing
stages. One result of such action is that segments cannot properly be flagged as
'used' in a given direction#-#the polygon which used the segment is flagged as
duff and invalid. Segments may thus be used several times near the site of a
corrupt polygon and this message is output to warn the user that the output
files may contain spurious polygon features.
.P0; ^*User action:\*
While the POLYGONS utility will make every effort to ensure that the output
files will not contain corrupt polygons the output files should be checked very
carefully. Ideally, the cause of the junction structure corruption should be
traced and remedied, and then the POLYGONS utility should be re-run. 

.NOJUSTIFY;.TP 10;.P -4
NOARM, no junction arms to follow in feature with FSN 'integer'.
.JUSTIFY

.P0; ^*Explanation:\*
The program has encountered a junction in which there are no arms, or no arms
left unused to follow. This should not normally happen, as zero arm junctions
are trapped prior to polygon formation.
.P0; ^*User action:\*
Use LITES2 to examine and correct the input segment file. Use
ILINK/STRUCTURE to re-create junction structure and the re-run the POLYGONS
utility. 

.NOJUSTIFY;.TP 10;.P -4
PIPFAIL, unable to generate a point inside polygon with ID 'integer' and coordinate ('x coord','y coord').
.JUSTIFY

.P0; ^*Explanation:\*
an attempt was made to automatically generate a point that was guaranteed to
lie inside a specified polygon. The routine has unexpectedly failed for this
particular polygon. 
.P0; ^*User action:\*
please make a copy of the dataset and command line being used for possible
later analysis and submit an SPR. 

.NOJUSTIFY;.TP 10;.P -4
TOOMNYNODES, too many nodes.
.JUSTIFY

.P0; ^*Explanation:\*
An attempt has been made to add extra arms to a node.
.P0; ^*User action:\*
Check for previous errors.

.NOJUSTIFY;.TP 10;.P -4
UNEXPSEC, unexpected sector 'integer' found.
.JUSTIFY

.P0; ^*Explanation:\*
The program has calculated that an output file junction lies in a junction
sector that does not lie within the sector header.
.P0; ^*User action:\*
Use LITES2 to check the output file very carefully.
.LM -4
.SUBTITLE MESSAGES (ERROR)

.!******************************************************************************
.PAGE
^*--------------------------------------------------------------------------------\*
.HL     1 ^^^*MESSAGES (ERROR)\*

These  messages indicate an  error in processing  which will
cause  the program to terminate. The most likely  causes are
a   corrupt or otherwise  invalid  input file,  or an  error
related to command line processing and file manipulation.

.LM +4

.NOJUSTIFY;.TP 10;.P -4
BOUNDING, unable to determine bounding polygon.
.JUSTIFY

.P0; ^*Explanation:\*
The program cannot identify a unique bounding polygon.
.P0; ^*User action:\*
Use LITES2 to ensure that all junctions are properly formed around the
periphery of the polygon area. There should be a single boundary. Attempts to
run IPOLYGON on groups of islands will fail in this way. (See the IPOLYGON
chapter  "IPOLYGON treatment of the Bounding Polygon" section.) If necessary add
an artificial bounding polygon away from the original linework using LITES2,
then use ILINK/STRUCTURE to re-create the junction structure and the re-run the
POLYGONS utility. 

.NOJUSTIFY;.TP 10;.P -4
FORMPOLY, previous warnings invalidate polygon formation - aborting
.JUSTIFY

.P0; ^*Explanation:\*
warnings have been issued during polygon formation. Execution has continued in
an attempt to find all the causes. Now the polygon formation phase has completed
and is known to be corrupt, execution will cease.
.P0; ^*User action:\*
Take what action is suggested by the previous warnings.

.NOJUSTIFY;.TP 10;.P -4
MDABSENT, MD (map descriptor) entry missing.
.JUSTIFY

.P0; ^*Explanation:\*
The /ABSOLUTE qualifier has been given, but there was no MD (map descriptor)
entry.
.P0; ^*User action:\*
Check the IFF file for a valid MD entry.

.NOJUSTIFY;.TP 10;.P -4
POLPTS, too many points in polygon coordinate buffer - max. allowed is 'integer'.
.JUSTIFY

.P0; ^*Explanation:\*
To facilitate seed point assignment and nested polygon determination, the
program must place all the coordinates which define each polygon in turn into a
temporary buffer. At least one polygon is defined by more than the permitted
number of coordinates. 
.P0; ^*User action:\*
Check the input segment IFF file. Do the polygons need to have so many defining
points? If so, then use LITES2 to split the segment data into  two or more files
to ensure that no polygon will be defined by more than the permitted number of
coordinates. Re-run ILINK on the divided segment files and then re-run IPOLYGON.

.NOJUSTIFY;.TP 10;.P -4
POSNEST, too many possible nested polygons - maximum allowed is 'integer'
.JUSTIFY

.P0; ^*Explanation:\*
IPOLYGON can only process up to the specified maximum number of nested
polygons. If the polygon structure is too complicated IPOLYGON runs out of
internal storage for candidate nested polygons during the nested polygon
identification phase of execution.
.P0; ^*User action:\*
Check the input segment IFF file. Do the polygons need to be so complex? If so,
then use LITES2 to split the segment data into two or more files to ensure that
no polygon will contain no more than the permitted number of nested polygons.
Re-run ILINK on the divided segment files and then re-run IPOLYGON. 

.NOJUSTIFY;.TP 10;.P -4
SEGPTS, too many points in segment coordinate buffer - max. allowed is 'integer'
.JUSTIFY

.P0; ^*Explanation:\*
To facilitate seed point assignment and nested polygon determination IPOLYGON
must be able to read all the coordinates which define each segment forming a
polygon into a temporary buffer. At least one segment is defined by more than
the permitted number of coordinates. 
.P0; ^*User action:\*
Check the input segment IFF file. Do the segments need to have so many defining
points? If so, then use LITES2 to split segments which have more than the
permitted number of coordinates into two or more segments to ensure that no
single segment feature is defined by more than the permitted number of
coordinates. Re-run ILINK on the divided segment files and then re-run IPOLYGON.
IPOLYGON is designed to cope with the "2 arm" IFF junctions which result from
such division of features.

.NOJUSTIFY;.TP 10;.P -4
TABBUILD, previous warnings invalidate lookup tables - aborting
.JUSTIFY

.P0; ^*Explanation:\*
IPOLYGON has detected errors in the input IFF segment and/or seed point
features that make further processing pointless. 
.P0; ^*User action:\*
Use the warnings output by IPOLYGON and the LITES2 command file (if specified)
to correct the input IFF files using LITES2. When all the edits are complete
(and if necessary ILINK run on the segment IFF file), re-run IPOLYGON using the
corrected IFF files.

.NOJUSTIFY;.TP 10;.P -4
TOOMNYNEST, too many nested polygons - maximum allowed is 'integer'
.JUSTIFY

.P0; ^*Explanation:\*
IPOLYGON can only process up to the specified maximum number of nested
polygons.
.P0; ^*User action:\*
Check the input segment IFF file. Do the polygons need to be so complex? If so,
then use LITES2 to split the segment data into two or more files to ensure that
no polygon will contain no more than the permitted number of nested polygons.
Re-run ILINK on the divided segment files and then re-run IPOLYGON. 

.NOJUSTIFY;.TP 10;.P -4
TOOMNYPOL, too many polygons formed - maximum allowed is 'integer'
.JUSTIFY

.P0; ^*Explanation:\*
IPOLYGON can only process up to the specified maximum number of polygons. This
value must also include 'fake' polygons caused by isolated polygons leading to
polygon duplication within IPOLYGON workspace. Such 'fake' polygons are stored
twice: once as the inner boundary of a "doughnut" shaped outer polygon and once
as the isolated polygon in its own right. Thus polygon maps which contain many
isolated polygons will significantly increase demands on IPOLYGON internal
workspace. 
.P0; ^*User action:\*
Use LITES2 to split seed point and the segment IFF files into two or more
files. Ensure that there will be no more than the permitted number of polygons
in any sub-file created from the original file. Re-run ILINK on the divided
segment files and then re-run IPOLYGON. 

.NOJUSTIFY;.TP 10;.P -4
TOOMNYPS, too many polygons segments - maximum allowed is 'integer'
.JUSTIFY

.P0; ^*Explanation:\*
IPOLYGON can only process up to the specified maximum number of segments
involved in polygon boundaries.
.P0; ^*User action:\*
Use LITES2 to split seed point and the segment IFF files into two or more
files. Re-run ILINK on the divided segment files and then re-run IPOLYGON. 

.NOJUSTIFY;.TP 10;.P -4
TOOMNYRING, too many rings extracted - maximum allowed is 'integer'
.JUSTIFY

.P0; ^*Explanation:\*
Internally IPOLYGON traces round a polygon boundary using all connected
segments regardless of the setting of /ONEARM. If /ONEARM=USE is not specified
then these boundaries are analysed into loops. This multiple pass operation can
only deal with a maximum number of extracted loops.
.P0; ^*User action:\*
Check to see that IPOLYGON runs with the /ONEARM=USE combination present.

.NOJUSTIFY;.TP 10;.P -4
TOOMNYSEED, too many seed point features read - maximum allowed is 'integer'
.JUSTIFY

.P0; ^*Explanation:\*
IPOLYGON can only process up to the specified maximum number of seed points.
.P0; ^*User action:\*
Use LITES2 to split seed point and the segment IFF files into two or more
files. Ensure that there will be no more than the permitted number of segments
in any sub-file created from the original file. Re-run ILINK on the divided
segment files and then re-run IPOLYGON. 

.NOJUSTIFY;.TP 10;.P -4
TOOMNYSEG, too many segment features read - maximum allowed is 'integer'
.JUSTIFY

.P0; ^*Explanation:\*
IPOLYGON can only process up to the specified maximum number of segments.
.P0; ^*User action:\*
Use LITES2 to split seed point and the segment IFF files into two or more
files. Ensure that there will be no more than the permitted number of segments
in any sub-file created from the original file. Re-run ILINK on the divided
segment files and then re-run IPOLYGON. 

.NOJUSTIFY;.TP 10;.P -4
TOOMNYTREE, too many trees formed - maximum allowed is 'integer'
.JUSTIFY

.P0; ^*Explanation:\*
IPOLYGON can only process up to the specified maximum number of trees -
zero-area nested polygons.
.P0; ^*User action:\*
Check the input segment IFF file. Are trees required? They can be eliminated by
not specifying /ONEARM=USE. If they are required, then use LITES2 to split the
segment data into two or more files to ensure that no polygon will contain no
more than the permitted number of trees. Re-run ILINK on the divided segment
files and then re-run IPOLYGON. 

.NOJUSTIFY;.TP 10;.P -4
UNEXPEOF, unexpected end of IFF file 'file-spec'
.JUSTIFY

.P0; ^*Explanation:\*
specified input IFF file terminated before an IFF EJ entry was encountered.
.P0; ^*User action:\*
Use IMEND to correctly terminate the file. Re-run the POLYGONS program on the
repaired IFF file. If the problem persists try reading the file into LITES2 and
then exit. Re-run the POLYGONS program. 
.LM -4
.SUBTITLE MESSAGES (FATAL)

.!******************************************************************************
.PAGE
^*--------------------------------------------------------------------------------\*
.HL     1 ^^^*MESSAGES (FATAL)\*

These messages indicate  a severe   error in processing,  or
some form of system failure, which has caused the program to
terminate.

.LM +4

.NOJUSTIFY;.TP 10;.P -4
BADFLAG, bad internal segment flags
.JUSTIFY

.P0; ^*Explanation:\*
Internal flags have become incorrectly set, possibly as a result of the use of
an input segment file containing invalid IFF junction structure.
.P0; ^*User action:\*
It is possible that the input segment file contains corrupt junction structure
and this should be investigated before contacting Laser-Scan. Use the IMP
utility IPATCH to examine the file or ITOTEXT/ADDRESS, (if the file is not too
big)! If the junction structure is believed correct, or is incorrect but
produced by a Laser-Scan utility, please save the input files and submit an SPR
to Laser-Scan.

.NOJUSTIFY;.TP 10;.P -4
FATAL, Unspecified fatal error
.JUSTIFY

.P0; ^*Explanation:\*
The current POLYGONS library routine has failed in a bad way. This
message should not normally be seen by the user.
.P0; ^*User action:\*
Contact Laser Scan and describe in detail the steps which led to this message.

.NOJUSTIFY;.TP 10;.P -4
LOST, failed to locate IFF entry at recorded address - position lost
.JUSTIFY

.P0; ^*Explanation:\*
IPOLYGON has incorrectly stored the address of an entry within one of the input
IFF files and has now attempted to locate that IFF entry. This is a very severe
error. IPOLYGON is irrevocably lost.
.P0; ^*User action:\*
Try reading the input IFF files into LITES2. If this is successful then the
problem lies within IPOLYGON itself; please make a copy of the input IFF files
and report the problem to Laser-Scan.

.NOJUSTIFY;.TP 10;.P -4
MEMORY, *** ERROR allocating virtual memory.
.JUSTIFY

.P0; ^*Explanation:\*
The polygons package dynamically memory handling routines were not able to 
allocate the memory that it required.
.P0; ^*User action:\*
Reduce the values of LSL$_POLYGONS_POLMAX and LSL$_POLYGONS_SIDES.

.NOJUSTIFY;.TP 10;.P -4
STACKOVER, polygon formation stack overflow
.JUSTIFY

.P0; ^*Explanation:\*
The polygon library routines form each polygon on a stack which is only flushed
into the programs polygon storage when the polygon is complete. The current
polygon has more segments than there is room on the formation stack. This should
never happen.
.P0; ^*User action:\*
Please save the input files and submit an SPR to Laser-Scan.
.LM -4
.SUBTITLE MESSAGES (OTHER)

.!******************************************************************************
.PAGE
^*--------------------------------------------------------------------------------\*
.HL     1 ^^^*MESSAGES (OTHER)\*

In addition to the above messages which are generated by the
program itself,   other messages  may  be   produced by  the
command line interpreter (CLI) and by  Laser-Scan libraries.
In particular, messages may be  generated by the IFF library
and  by the  Laser-Scan  I/O library,  LSLLIB.  IFF  library
messages are introduced by   '%IFF' and are  documented in
the IFF library users' guide. In most cases IFF errors will
be due to a corrupt input file, and this should be the first
area of investigation. If the  cause of  the error cannot be
traced by the  user, and  Laser-Scan are consulted, then the
output  file should  be  preserved to  facilitate diagnosis.
LSLLIB  messages  are  introduced  by    '%LSLLIB' and are
generally self-explanatory.  They are  used  to  explain the
details of program generated errors.
