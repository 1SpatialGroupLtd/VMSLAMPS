.!
.! Define the title for the document
.!
.TITLE POLMERGE - IFF polygon merging utility
.PAGE
.NO FILL
^*--------------------------------------------------------------------------------\*
^*MODULE####POLMERGE\*
.INDEX POLMERGE
.BLANK
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^*FUNCTION\*
.INDEX POLMERGE> Function
.LEFT MARGIN +10
.P 0;POLMERGE is the Laser-Scan automatic IFF ^*POL\*YGON ^*MERG\*ing and 
elimination utility. It forms part of the 
Laser-Scan POLYGONS Package. 
.INDEX POLMERGE> and BATCH mode
.P 0;POLMERGE is designed to be run in batch mode and all options may
be specified on  the command line. No user interaction is required during
processing.
.p0
POLMERGE operates on an IFF junction structured (IFJ) file containing left/right
coded links. Because output is
also to an IFJ file the program may be used as a pre-processor before polygon
creation using IPOLYGON. 
.P0
Polygon merging takes place by means of user-defined rules. Both a look up 
table and command line qualifiers may be incorporated in their definition.

.TEST PAGE 10
.BLANK;.LEFT MARGIN -10;.NO FILL
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^*FORMAT\*
.INDEX POLMERGE> Command Format
.NO FILL
.LM +10
$ POLMERGE in-file-spec out-file-spec

^*Command qualifiers                           Defaults\*
.INDEX POLMERGE> command qualifiers
/[NO]ACCHECK                                    /ACCHECK
.INDEX POLMERGE> command qualifiers> /ACCHECK
/[NO]AREA=(tolerance-spec[...])                 See text
.INDEX POLMERGE> command qualifiers> /AREA
.INDEX POLMERGE> command qualifiers> /BOUNDING
/[NO]BOUNDING                                   /NOBOUNDING
/[NO]ELIMINATE(elimination-option)              See text
.INDEX POLMERGE> command qualifiers> /ELIMINATE
/[NO]LIST[='file-spec']                         /NOLIST
.INDEX POLMERGE> command qualifiers> /LIST
/[NO]LOG                                        /NOLOG
.INDEX POLMERGE> command qualifiers> /LOG
/LOOKUP = file-spec                             No lookup file used.
.INDEX POLMERGE> command qualifiers> /LOOKUP
/[NO]MERGE = (merging-option)                   See text
.INDEX POLMERGE> command qualifiers> /MERGE
/[NO]RATIO=(tolerance-spec[...])                /NORATIO
.INDEX POLMERGE> command qualifiers> /RATIO 
.LM -10
.BLANK
.TEST PAGE 10
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^*PROMPTS\*
.INDEX POLMERGE> Prompt
.LM +10
.NO FILL
.NO JUSTIFY
__Input-IFJ-file:       input-file-spec
__Merged-IFJ-file:      output-file-spec
.LM -10
.BLANK
.TEST PAGE 10
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^*PARAMETERS\*
.INDEX POLMERGE> Parameters
.BLANK
.LM +10
.NO JUSTIFY
.P -10;input-file-spec
.JUSTIFY
.INDEX POLMERGE> and LSL$IF:
.INDEX POLMERGE> default file-specs> input file
.P -2;-#specifies the junction structured IFF file to be processed.
 Any part of the file specification which is not supplied will be
taken from the default specification 'LSL$IF:IFF.IFJ'. 
.P -10;output-file-spec
.INDEX POLMERGE> default file-specs> output file
.p -2;-#specifies the junction structured IFF file to be created. Any
part of the file specification which is not explicitly given will be taken 
from the parsed input specification. Note that a version number must not be 
specified for the output IFJ file. If a file with the specified name already
 exists a new file will be created with the version number incremented by one.
.TEST PAGE 12
.BLANK
.LM -10
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^*COMMAND QUALIFIERS\*
.LM +10
.INDEX POLMERGE> command qualifiers
.NO JUSTIFY
.TEST PAGE 10
.P -10;/ACCHECK (default)
.I -10;/NOACCHECK#
.INDEX POLMERGE command qualifiers> /ACCHECK
.INDEX POLMERGE> Checks
.JUSTIFY
.P -2;-#determines whether POLMERGE checks each polygon for consistent 
left right AC coding. In some cases this check is not necessary - eg.
if the input file is derived from the other Laser-scan programs IPOLYGON or
VECTORISE or if the merging mechanism used does not depend on the 
presence of such codes (eg. MERGE  =(BY__SMALL).
.p0
An error message is output for each inconsistency and program execution 
will be terminated. 
.NO JUSTIFY
.TEST PAGE 10
.P -10;/AREA#=([[NO]MERGE__TOL:'real'],[[NO]ELIM__TOL:'real']) (default)
.I -10;/NOAREA
.INDEX POLMERGE> command qualifiers> /AREA
.INDEX POLMERGE> Tolerances
.JUSTIFY
.P -2;-#determines whether polygon area is taken into account in polygon merge
and elimination operations. Only polygons which have area less than or equal to 
the supplied  tolerances are eliminated or merged. 
.p0
.INDEX POLMERGE> Neighbour 
.INDEX POLMERGE> Isolated Polygons
Both the tolerances below which isolated polygons are eliminated and below
which a polygon is merged into its neighbour may be specified. If only one
is specified then the other defaults to the same value.
.p0
The default area tolerances are calculated arbitrarily from the range entry in
 the IFJ file:-
.lit

	TOLERANCE = (XMAX-XMIN)*(YMAX-YMIN)/100
.end lit
.p0
If /NOAREA  is specified then polygon merging and elimination takes place 
regardless of polygon area. 
The two tolerances may also be negated individually. 
This allows area of polygons to be taken into account for elimination, but 
not merging - or vice versa.
.NO JUSTIFY
.TEST PAGE 10
.P -10;/BOUNDING 
.I -10;/NOBOUNDING#(default)
.INDEX POLMERGE command qualifiers> /BOUNDING
.JUSTIFY
.P -2;-#determines whether those polygons which have a common link with the
bounding polygon are merged. If /BOUNDING is specified then  such polygons
are preserved in the output file.
.INDEX POLMERGE> and the Bounding polygon 
.INDEX POLMERGE> and IMERGE
.p 0;This option is useful if files processed by POLMERGE are to be merged
with adjacent files using the IMP utility IMERGE. Polygons which straddle 
the  boundary between map sheets will be preserved.
.NO JUSTIFY
.TEST PAGE 10
.P -10;/ELIMINATE = ([BY__LOOKUP],[BY__UPPER],[BY__LOWER])# (default)
.I -10;/NOELIMINATE
.INDEX POLMERGE> command qualifiers> /ELIMINATE
.JUSTIFY
.INDEX POLMERGE> Elimination
.INDEX POLMERGE> Isolated Polygons
.P -2;-#specifies that isolated polygons are to be removed from the data. 
The basis of the elimination is specified by one of three mutually 
exclusive keywords.
.LIST "o"
.LE ;BY__LOOKUP#-#A polygon is eliminated on the basis of coding rules specified
in a lookup file.  
.le ;BY__UPPER##-#A polygon is eliminated only if the surrounding polygon has a
higher numeric code.
.LE ;BY__LOWER##-#A polygon is eliminated only if the surrounding polygon has a
lower numeric code.
.END LIST 
.INDEX POLMERGE> Lookup File
.INDEX POLMERGE> Isolated Polygons
If /ELIMINATE is specified with no keyword arguments (or is not supplied at all)
then the default operation is to eliminate all isolated polygons according to 
the current /AREA and /RATIO tolerances. If /LOOKUP is specified 
then isolated polygons are eliminated on the basis of primary codes in 
the lookup table (see Lookup File section). 
.p0
If /NOELIMINATE is specified, then all isolated polygons are retained 
in the output file.
.NO JUSTIFY
.TEST PAGE 10
.P -10;/LIST[=file-spec]
.I -10;/NOLIST#(default)
.INDEX POLMERGE> command qualifiers> /LIST
.INDEX POLMERGE>command qualifiers>/LIST> default file-spec
.JUSTIFY
.P -2;-#by default, message and diagnostic output will be to SYS$OUTPUT. This
option allows the user to redirect output to the specified text file. If the
optional file-spec argument is omitted, POLMERGE directs output to a file named
SYS$DISK:[]POLMERGE.LIS. If the user supplies only a partial file-spec, the
missing file specification components are taken from the default specification
SYS$DISK:[]POLMERGE.LIS;0. 
.NO JUSTIFY
.TEST PAGE 10
.P -10;/LOG 
.I -10;/NOLOG#(default)
.INDEX POLMERGE> command qualifiers> /LOG
.JUSTIFY
.P -2;-#this will result in supplementary messages being sent to SYS$OUTPUT.
Supplementary messages are generated when a file is successfully opened, and 
messages indicating the progress of POLMERGE processing are also output.
.NO JUSTIFY
.TEST PAGE 10
.P -10;/LOOKUP = file-spec
.I -10;/NOLOOKUP
.INDEX POLMERGE> command qualifiers> /LOOKUP
.INDEX POLMERGE> command qualifiers> /LOOKUP > default file-spec
.INDEX POLMERGE> Lookup File
.JUSTIFY
.p -2;-#specifies a look-up file which is used to define rules for 
polygon merging. Any part of the file specification not supplied is
taken from the default LSL$LOOKUP:LOOKUP.DAT. 
.P0
The lookup file is used to specify the action to be taken for specific 
left/right AC codes (defining polygon attributes)  which are encountered in the
file. 
.p0
The description section contains details of the way the look-up file
should should be constructed.
.NO JUSTIFY
.TEST PAGE 10
.P -10;/MERGE= ([BY__LOOKUP],[BY__UPPER],[BY__LOWER],[BY__LARGE],[BY__SMALL] (default)
.I -10;/NOMERGE 
.INDEX POLMERGE> command qualifiers> /MERGE
.INDEX POLMERGE> Merging
.JUSTIFY
.P -2;-#specifies that polygons are to be merged and defines the basis of
the merging process. The /MERGE qualifier takes 5 
keyword arguments.    

.LIST "o"
.LE ;BY__LOOKUP#-#Polygons to be merged on the basis of coding rules specified
in a lookup file.  
.le ;BY__LARGE##-#A polygon is merged into the largest of the neighbouring
 polygons
.le ;BY__SMALL##-#A polygon is merged into the smallest of the neighbouring 
polygons.
.le ;BY__UPPER##-#A polygon is merged into the neighbouring polygon with a
higher numeric code.
.LE ;BY__LOWER##-#A polygon is merged into the neighbouring polygon with a
lower numeric code.
.END LIST 
.p 0
.INDEX POLMERGE> Lookup File
If /MERGE is specified with no keyword arguments (or is not supplied at all)
then the default operation is to use BY__LARGER. If, however the /LOOKUP
qualifier  is also present then the default operation is BY__LOOKUP. 
Some combinations of keywords are not allowed (see restrictions).
.p0; Whether a polygon is considered for merging depends on the current /AREA 
and /RATIO tolerances. IF both /NORATIO and  /NOAREA are specified, then merging
/BY__LOOKUP is still possible. In this case polygons are merged purely on the
basis of the coding rules set up in the look-up file. 
.p0
If /NOMERGE is specified then non-isolated polygons are not merged into 
neighbouring polygons.

.NO JUSTIFY
.TEST PAGE 10
.P -10;/RATIO = ([LARGER],[SMALLER],[[NO]MERGE__TOL:'real'],[[NO]ELIM__TOL:'real']
,[NO]AREA__TOL:'real'])
.I -10;/NORATIO#(default)
.INDEX POLMERGE> command qualifiers> /RATIO
.JUSTIFY
.P -2;-#causes polygons to be merged or eliminated on the basis of their 
perimeter - area ratio (see description section for ratio definition). 
If /RATIO = (LARGER) is specified, then  
any polygon which is larger than the supplied ratio tolerances is merged or 
eliminated. This is useful for  eliminating long thin areas. This is the
default mode if /RATIO is specified with neither the LARGER or SMALLER 
keyword arguments.
If /RATIO = (SMALLER) is specified then any polygon which has a ratio 
tolerance smaller than the supplied tolerance is eliminated or merged. This is
useful for preserving long thin areas. 
.P0
.INDEX POLMERGE> Tolerances
The default tolerances are defined arbitrarily to be 8. See Figure 3 for a
guide to ratio definition.
If only one tolerance is supplied then the other is assumed to be the same.
.p0
The AREA__TOL keyword allows a separate area tolerance to be specified for the
/RATIO test. In order to be merged or eliminated   a polygon with ratio that
falls  above (or below if /RATIO = (SMALLER) is set) the ratio tolerance  must
also  be smaller than the AREA__TOL tolerance. This tolerance is by default set
to the /AREA = (MERGE__TOL) tolerance. For merging on the basis of ratio alone,
/RATIO = (NOAREA__TOL) should be set.

.p0
Ratio consideration may also be negated individually for elimination or 
merging by using the NOMERGETOL or NOELIMTOL keyword options.

.BLANK
.TEST PAGE 6
.LM 0
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^*RESTRICTIONS\*
.INDEX POLMERGE> Restrictions
.FILL
.LM +10
.LIST "o"
.LE; Any two of /MERGE = (BY__UPPER), /MERGE = (BY__LOWER) or /MERGE = 
(BY__LOOKUP) are invalid.  
.le; /MERGE = (BY__LARGE) is invalid with /MERGE = (BY__SMALL)
.LE ;Only one keyword argument may be specified with the /ELIMINATE qualifier.
.LE ;/MERGE = (BY__UPPER) or /MERGE = (BY__LOWER) require that link left/right
codes held in the AC text field are numeric. 
.LE ;ELIMINATE = (BY__UPPER) or ELIMINATE = (BY__LOWER) require that link 
left/right codes held in the AC text field are numeric. 
.LE ; /MERGE = (BY__LOOKUP) requires that /LOOKUP is specified.
.LE ; /ELIMINATE = (BY__LOOKUP) requires that /LOOKUP is specified.
.le ; /NOELIMINATE is invalid with use with /NOMERGE
.LE ; /RATIO = (LARGER) and /RATIO = (SMALLER) are mutually exclusive.
.LE ; If AC left/right coding is not present in the input file, then only
/MERGE = (BY__LARGE), /MERGE = (BY__SMALL), /ELIMINATE = (BY__LARGE),
or /ELIMINATE = (BY__SMALL) processing is valid.
.LE ;All IFF segment features must have unique feature serial numbers.
.INDEX POLMERGE> maximum number of polygons
.INDEX POLMERGE> LSL$POLYGONS__POLMAX
.LE ;The maximum number of polygons (POLMAX) that may be processed in a single
POLMERGE run defaults to 10000, but can be increased by assigning a value to the
logical name LSL$POLYGONS__POLMAX.
.INDEX POLMERGE> average number of sides per polygon
.INDEX POLMERGE> LSL$POLYGONS__AVERAGE__SIDES
.LE ;The average number of sides per polygon is initially set to 5, but can be 
increased by assigning a value to the logical name LSL$POLYGONS__AVERAGE__SIDES.
.INDEX POLMERGE> maximum number of input segments
.LE ;The maximum of input segments that may be processed in a single POLMERGE
run is calculated by multiplying the "maximum number of polygons" by "the 
average number of sides per polygon".
.LE ;A single polygon ring may have a maximum of 100000 coordinates.
.LE ;A single input segment may have a maximum of 20000 coordinates.
.INDEX POLMERGE> maximum label size
.LE ;Polygon labels are restricted to a maximum of 255 characters.
.LE ;At most 4 coverages may be propagated in a single POLMERGE run.
.LE ;A polygon may have only one label.
.LE ;In the lookup file  a maximum of 127 primary codes may be specified.
.LE ;In the lookup file  a maximum of 127 secondary codes may be specified for
each definition set.
.END LIST

.NOFILL
.LM -10
.TEST PAGE 10
.BLANK

^*-------------------------------------------------------------------------------\*
.HEADER LEVEL 2 ^*DESCRIPTION\*
.INDEX POLMERGE> Description
.LM +10
.JUSTIFY
.FILL
.P0;POLMERGE is the Laser-Scan automatic IFF ^*POL\*YGON ^*MERG\*ing and 
elimination utility. It forms part of the 
Laser-Scan POLYGONS Package. 
.INDEX POLMERGE> and BATCH mode
.P0;POLMERGE is designed to be run in batch mode and all options may
be specified on the command line. No user interaction is required during
processing.
.p0
Polygons may be eliminated or merged by means of user-supplied rules, and
it is to be stressed that good results depend on careful selection of 
qualifiers and lookup file criteria.
.p0
.LEFT MARGIN -10 
.BLANK 2
.TEST PAGE 10
^*##########----------------------------------------------------------------------\*
.LM +10
.HEADER LEVEL 3 ^^^*Input and output file characteristics.\*
.INDEX POLMERGE> File Characteristics
.p0
The input file for POLMERGE is an IFF junction structured (IFJ) file. Such
files will normally have been produced by other Laser-scan  programs such
as VECTORISE, ILINK or IPOLYGON. Within the program polygons are first formed .
.INDEX POLMERGE> Merging
.INDEX POLMERGE> and IPOLYGON
Merging is then carried out by selectively deleting the links which form  the
boundaries of the polygons to be formed. Output is also to an IFF junction
structured file. If required IPOLYGON may then be run on the merged file to
produce a variety of polygon output options. 
.p0
.INDEX POLMERGE> Lookup File
The presence of left/right codes held in the text field of AC 4 and 5 
entries in the IFF file
allow merging to take place by means of a lookup file.  These codes
are preserved correctly in the output file regardless of the merging or 
elimination mechanism used. 
.LEFT MARGIN -10 
.BLANK 2
.TEST PAGE 10
^*##########----------------------------------------------------------------------\*
.LM +10
.HEADER LEVEL 3 ^^^*File Checking.\*
.INDEX POLMERGE> Checks
.p0
POLMERGE carries out checks on the fidelity of the input file geometry 
and attribute coding. 
The following checks are carried out :-
.LIST " "
.LE ;Checks that segments in the input IFF file have junctions at each end.

.LE ;Checks that all segments in the input IFF file have a minimum of two
coordinates. 

.LE ;Checks that all junctions in the input IFF file have at least two arms.

.LE ;Checks that all segments in the input IFF file have a unique FSN.


.le; If the /ACCHECK qualifier is specified, the first type 4 and type 5 AC
codes in each segment are checked for consistency in polygon formation.
.END LIST 
.p0
 
.p0
.LEFT MARGIN -10 
.BLANK 2
.TEST PAGE 10
^*##########----------------------------------------------------------------------\*
.LM +10
.HEADER LEVEL 3 ^^^*POLMERGE and IPOLYGON.\*
.P0
.INDEX POLMERGE> and IPOLYGON
Before polygon merging POLMERGE forms polygons internally from the junction
structured IFJ file  in a similar way to IPOLYGON . 
The user is therefore guided to the IPOLYGON chapter for  further information on
 polygon formation and on data preparation procedures prior to processing. 
.p0
.INDEX POLMERGE> Checks
IPOLYGON also provides checking facilities and in addition provides 
a /LITES2 qualifier which produces a LITES2 guidance file to take the user 
to those places where errors in the input data exist. It may in some cases,
therefore, be useful to run IPOLYGON prior to POLMERGE processing. 
.p0
.LEFT MARGIN -10 
.BLANK 2
.TEST PAGE 10
^*##########----------------------------------------------------------------------\*
.LM +10
.HEADER LEVEL 3 ^^^*Polygon Merging and Elimination.\*
.P0
.INDEX POLMERGE> Merging
.INDEX POLMERGE> Elimination
.INDEX POLMERGE> Isolated Polygons
POLMERGE distinguishes isolated polygons, which it handles separately.
 Such polygons are dealt with only by the /ELIMINATE qualifier.
.INDEX POLMERGE> Nested Polygons
An
isolated polygon is nested inside another and contains no common 
boundaries with any other polygons. In figure 1 polygon A is isolated
and therefore may be eliminated whereas polygon B has a common boundary 
with C and is not eliminated but is a candidate for merging.
.p0
Both merging and elimination take place by default, but may be switched 
off with the /NOMERGE and /NOELIMINATE qualifiers. If both options are
enabled then elimination takes place after merging. In this way it may 
be possible for isolations which are created as a result of the merging process
to then be eliminated. A different result is therefore likely if the 
program is first run with /ELIMINATE and then /MERGE than if both options
are enabled in the same run.  
.P0
.LEFT MARGIN -10 
.BLANK 2
.TEST PAGE 10
^*##########----------------------------------------------------------------------\*
.LM +10
.HEADER LEVEL 3 ^^^*POLMERGE Tolerances.\*
.INDEX POLMERGE> Tolerances
.P0
Both eliminate and merge tolerances may be specified independently, although
if only one is supplied then the other is assumed to be the same. The choice
of tolerance is particularly important for the production of good results. 
An overlarge area tolerance may result in unpredictable results whereas a
tolerance which is too small will produce an output file which is little
different from the input file. 
.p0
.INDEX POLMERGE> Neighbour
Any polygon which has an area greater than the area tolerance will not be
merged into its neighbour regardless of its coding.
.p0
The ratio tolerance gives the user control over the shape of the polygons 
which are to be merged or eliminated. It is defined by
.lit
	      Ratio = P / A
    where 
	      P  is the perimeter of the polygon
	      A  is the square root of the area
.end lit
.p0
.INDEX POLMERGE> Nested Polygons
In all area and perimeter measurements, nested polygon are taken into account.
Thus in Figure 2 the polygon area of polygon A is represented by the shaded
area and the perimeter includes both the inside and outside boundaries. Figure
3 provides a guide for ratio definition for various shapes. 
.p0
In some circumstances it is preferable to preserve long thin areas at the
expense of those with with a smaller ratio - and vice versa. To enable
this there are /RATIO = LARGER  and /RATIO = SMALLER options available.

.p0
.LEFT MARGIN -10 
.BLANK 2
.TEST PAGE 10
^*##########----------------------------------------------------------------------\*
.LM +10
.HEADER LEVEL 3 ^^^*Polygon Selection.\*
.P0
.INDEX POLMERGE> Polygon selection
.INDEX POLMERGE> Merging
.INDEX POLMERGE> Elimination
POLMERGE operates by first forming polygons internally. Each polygon is
then passed through a series of tests which determine if the polygon 
is to be considered for merging as follows: -
.list
.le; Is the polygon below the merge tolerance 
(if /AREA = (MERGE__TOL is specified)?
.le; Is the polygon above or below the ratio tolerance (if /RATIO = (MERGE__TOL,
LARGER) or /RATIO = (MERGE__TOL,SMALLER) are specified)?
.INDEX POLMERGE> Lookup File > primary code
.le; Does the polygon have a code which corresponds to any of the primary 
polygon labels in the lookup file (if /LOOKUP is specified)?
.end list
.p0
Only if the above tests are passed is the polygon considered for merging - 
although it should be noted that not all tests need be applied. Thus if
/NOAREA and /NORATIO are set then only the /LOOKUP test would apply.
Exactly analagous selection is applicable for polygon elimination. 
.p0
.INDEX POLMERGE> Tolerances
It may be desirable to be able to specify a different area tolerance
for those polygons which would be merged on the basis of the ratio test
alone. Thus if it was required that all polygons be removed which 
are smaller than 3 units in area, but that long thin areas of up to 20 units 
in area were also removed then the following qualifier combination would achieve
this.
.lit

  /AREA = (MERGE_TOL:3,ELIM_TOL:3) 
  /RATIO =(MERGE_TOL:7,ELIM_TOL:7,AREA_TOL:20)
.END LIT
.p0
Note that the presence of the /LOOKUP qualifier restricts considerably the
number of polygons considered for merging or elimination. Thus an empty lookup 
file would result in no polygons being merged or eliminated. 
.LEFT MARGIN -10 
.BLANK 2
.TEST PAGE 10
^*##########----------------------------------------------------------------------\*
.LM +10
.HEADER LEVEL 3 ^^^*The Merging Process.\*
.P0
.INDEX POLMERGE> Merging
.INDEX POLMERGE> Neighbour
.INDEX POLMERGE> Nested Polygons
.INDEX POLMERGE> and the Bounding polygon 
Once a polygon has been selected for merging, POLMERGE builds a list of
all neighbouring polygons. Only those polygons with a common boundary
to the candidate polygon are added to the neighbour list. This includes nested
polygons, but not those polygons touching at only one point. Thus in Figure 4
the neighbours of polygon A are C,D,E and F. The file's bounding polygon is
never considered as a neighbour.
.p0
The options specified with the /MERGE qualifier determine into which of the
polygons neighbours it is merged. 

/MERGE = (BY__SMALL) and /MERGE = (BY__LARGE) merge the polygon into its 
smallest or largest neighbours by area. It is to be noted that 
neither of these mechanisms require the existence of AC left right codes
in the input file. 
.p0
/MERGE = (BY__UPPER) and /MERGE = (BY__LOWER)  make use of numeric codes
in the AC 4 and 5 left right codes.
.p0
With /MERGE = (BY__UPPER) specified a polygon is merged into a neighbour
if it has a higher numeric  code. If more than one of 
the neighbours has a higher value than the candidate polygon then the
polygon with the value closest to it will be selected. If none of
the neighbouring codes is greater then no merging takes place.
/MERGE = (BY__LOWER) is analagous but with the lower numeric codes
being considered. 
.p0
.INDEX POLMERGE> Lookup File
/MERGE = (BY__LOOKUP) require that the input file contains valid AC 4 or 5
left right codes which are consistent for polygon generation. (see Lookup 
File section)
.p0
Normally only one merging option will be specified on the command line, 
and most combinations are disallowed (and undesirable). However it is
possible for example to specify /MERGE =(BY__LOOKUP,BY__LARGE). In this 
case the largest neighbouring polygon is first determined. Merging only
then takes place if this polygon is matched by one of the secondary codes 
in the appropriate definition set of the lookup file. In general, therefore,
geometric constraints take priority over those based on coding.

.LEFT MARGIN -10 
.BLANK 2
.TEST PAGE 10
^*##########----------------------------------------------------------------------\*
.LM +10
.HEADER LEVEL 3 ^^^*The Elimination Process.\*
.P0
.INDEX POLMERGE> Elimination
Once a polygon has been selected as a candidate for elimination the options
specified with the /ELIMINATE qualifier determine whether the polygon is
eliminated or not. If no keyword arguments are specified then elimination 
will always take place.
.p0
.INDEX POLMERGE> Lookup File > definition set
.INDEX POLMERGE> Lookup File > secondary code
If /ELIMINATE = (BY__LOOKUP) is set then the polygon will only be eliminated
if the code of the polygon's "mother" polygon corresponds to one of the
secondary codes in the appropriate definition set of the lookup file.
If /ELIMINATE =(BY__UPPER) or /ELIMINATE = (BY__LOWER) are set then the polygon
is only eliminated if the "mother" has a higher or lower numeric code.
.p0
.LEFT MARGIN -10 
.BLANK 2
.TEST PAGE 10
^*##########----------------------------------------------------------------------\*
.LM +10
.HEADER LEVEL 3 ^^^*The Lookup File.\*
.INDEX POLMERGE> Lookup File
.P0
A POLMERGE Lookup file consists of a series of definition sets which defines
polygon merging and elimination on the basis of polygon codes held in the 
text field of the AC 4 or 5 entries.  Definition sets are separated by at
least one blank line in the file.
.INDEX POLMERGE> Lookup File> definition set
.INDEX POLMERGE> Lookup File> primary code
.INDEX POLMERGE> Lookup File> secondary code
.p0
.INDEX POLMERGE> Neighbour
A definition set is made up of one primary code and a number of subsequent 
secondary codes each placed on a separate line in the file. In the case of
polygon merging if a polygon's code matches any of the primary codes in the
 file then it is considered for merging. If any of the neighbour polygons
match the first secondary  code  in the same definition set then merging takes 
place. The new merged polygon will retain the secondary code.
If none of the neighbours matches the first secondary code then the search 
is repeated for the next secondary code. Thus
the order of the secondary codes in the definition set represent their
priority.
If no matches are found for any of the neighbours with any of the secondary
codes then merging does not take place.
.p0
In the following small lookup file the primary codes are "AAA",
"BBB", and  "CCC"
.tp 12
.lit

! Definition set 1
AAA
ccc
FFF
A B C

! Definition set 2
BBB
ccc

! Definition set 3
CCC
.end lit

.p0
The last definition set only contains only a primary code. In this case 
merging will take place, but the neighbouring polygon with which it is merged
will be selected arbitrarily. Using a definition set with only one code 
is useful for constraining the coding of those polygons which are 
considered for merging, while allowing a different merging mechanism 
to be specified.  For elimination it is even more useful because those 
polygons with the specified codes may be eliminated regardless of the 
coding of the "mother" polygon in which they lie. This would be achieved 
by specifying the /LOOKUP qualifier and the /ELIMINATE qualifier with 
no keyword arguments.
.p0
The following rules are used to determine whether polygon codes match 
with those in the definition sets.:-
.list
.le; One space in a code is significant, but two are not :- 
.lit
       "ABC" does not match "A BC"
but    "A BC" matches  "A  BC"
.end lit
.le; Matching is case sensitive :-  
.lit
       "aBC" does not match "ABC"
.end lit
.END LIST 
.p0
The "!" character may be used to include comment lines in the lookup file. It
should only be placed at the beginning of a line.
.LM 0
.PAGE
.BLANK 2
.NOJUSTIFY
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 1 ^*EXAMPLES\*
.INDEX POLMERGE> EXAMPLES


.NO FILL
$ ^*POLMERGE TEST50/LOG EXAMPLE1_<CR_>\*
%LSLLIB-I-IFFOPENED, LSL$SOURCE_ROOT:[POLYGONS.POLMERGE]TEST50.IFJ;1 opened for read
%LSLLIB-I-IFFOPENED, LSL$SOURCE_ROOT:[POLYGONS.POLMERGE]EXAMPLE1.IFJ;3 opened for write
 
 
.TP 12 

%POLY-I-POLVAL, Maximum number of polygons set to a default of 40000
%POLY-I-DEFSID, Average number of sides per polygons set to a default of 5

+----------------------------------------------------------------+
|                                                                |
|                     Building IFF address tables                |
|                                                                |
+----------------------------------------------------------------+
 
Number of IFF segment feature addresses tabulated ... 465
Segment coordinate range is:
X-min ...............................................     0.000
X-max ...............................................    50.000
Y-min ...............................................     0.000
Y-max ...............................................    50.000
 
 
.TP 12 
+----------------------------------------------------------------+
|                                                                |
|                         Forming polygons                       |
|                                                                |
+----------------------------------------------------------------+
 
Number of polygons formed (including isolations) ... 229
Number of segments used to form polygons ........... 465
Minimum number of segments used to form a polygon .. 1
Maximum number of segments used to form a polygon .. 88
Direction of polygon formation ..................... ANTICLOCKWISE
 
 
.TP 12 
+----------------------------------------------------------------+
|                                                                |
|          Setting up sectored spatial index for polygons        |
|                                                                |
+----------------------------------------------------------------+
 
Number of boxes in X direction....................... 3
Number of boxes in Y direction....................... 3
Mean number of boxes per polygon ....................     0.039
Mean number of polygons per box .....................    25.444
 
 
.TP 8
+----------------------------------------------------------------+
|                                                                |
|                 Identifying isolated polygons                  |
|                                                                |
+----------------------------------------------------------------+
 
Number of polygons examined ......................... 229
Number of isolated polygons ......................... 18
 
 
.TP 12 
+----------------------------------------------------------------+
|                                                                |
|                    Identifying nested polygons                 |
|                                                                |
+----------------------------------------------------------------+
 
Number of polygons examined ......................... 229
Number of polygons containing nested polygons ....... 4
Number of polygons nested inside others ............. 75
 
 
.TP 6 
+----------------------------------------------------------------+
|                                                                |
|                   Checking Polygon Consistency                 |
|                                                                |
+----------------------------------------------------------------+
 
 
 
.TP 8
+----------------------------------------------------------------+
|                                                                |
|                      Calculating Polygon Areas                 |
|                                                                |
+----------------------------------------------------------------+
 
Maximum Polygon area ...   751.000
Minimum Polygon area ...     1.000
 
 
.TP 12 
+----------------------------------------------------------------+
|                                                                |
|                      Merging Polygons                          |
|                                                                |
+----------------------------------------------------------------+
 
Area Tolerance .................................... 25.000
Number of polygons considered for merging ......... 123
Number of polygons merged ......................... 123
 
 
.tp 12 
+----------------------------------------------------------------+
|                                                                |
|                      Eliminating Polygons                      |
|                                                                |
+----------------------------------------------------------------+
 
Area Tolerance ........................................ 25.000
Number of polygons considered for elimination ......... 52
Number of polygons eliminated ......................... 52
 
 
.tp 12 
+----------------------------------------------------------------+
|                                                                |
|                      Writing output IFJ file                   |
|                                                                |
+----------------------------------------------------------------+
 
Number of segments written to output file ......... 24
 
 
 ELAPSED:    0 00:04:12.96  CPU: 0:03:40.90  BUFIO: 17  DIRIO: 204  FAULTS: 843 
 
.LEFT MARGIN +10
.FILL
.TP 6
.BLANK 2
.P 0;This example shows a successful run of POLMERGE in default mode. 
Both polygon merging and elimination has taken place and a default area 
tolerance of 25 square units has been calculated from the range entry of 
the input file. 
The polygons are first checked for consistency of left/right coding.
Non-isolated polygons with an area less then the area tolerance are merged 
into their largest neighbours and all isolated polygons with an area less
than the area tolerance are eliminated.
.p0
 Note that the number of polygons eliminated is greater
than the number of isolations first identified. This happens because 
isolated polygons are created as a result of the merging process.

.P 0;The user has specified the /LOG qualifier which results in
the output of run time statistics to SYS$OUTPUT. 

.P 0;$STATUS is set to SS$_NORMAL - normal successful completion.
.LEFT MARGIN -10
.bl 2
.NO FILL
 
^* $ POLMERGE TEST50/MER=(BY_LOOKUP)/ELIM/AREA=(MER:5,ELIM:5) - 
 EXAMPLE2/LOG/RATIO=(MER:7,ELIM:7,AREA:25)/LOOKUP=POLMERGE.DAT_<CR_>\*
%LSLLIB-I-IFFOPENED, LSL$SOURCE_ROOT:[POLYGONS.POLMERGE]TEST50.IFJ;1 opened for read
%LSLLIB-I-IFFOPENED, LSL$SOURCE_ROOT:[POLYGONS.POLMERGE]EXAMPLE2.IFJ;5 opened for write
%PMERGE-I-LKPOPNREAD, Lookup file LSL$LOOKUP:POLMERGE.DAT opened for reading 
 
.P0; (For the sake of clarity all the log information has not been included
here or in the following examples because the polygon formation statistics
are the same as in the first example.)

               [ POLYGON FORMATION STATISTICS HERE ]
 
.TP 12 
+----------------------------------------------------------------+
|                                                                |
|                      Merging Polygons                          |
|                                                                |
+----------------------------------------------------------------+
 
Area Tolerance ....................................  5.000
Ratio Tolerance ...................................  7.000
Ratio Area Tolerance ..............................  25.000
Lookup File ....LSL$LOOKUP:POLMERGE.DAT
Number of polygons considered for merging .........  112
Number of polygons merged .........................  112
 
 
.TP 12 
+----------------------------------------------------------------+
|                                                                |
|                      Eliminating Polygons                      |
|                                                                |
+----------------------------------------------------------------+
 
Area Tolerance ........................................   5.000
Ratio Tolerance .......................................   7.000
Ratio Area Tolerance ..................................  25.000
Lookup File.....LSL$LOOKUP:POLMERGE.DAT
Number of polygons considered for elimination .........   38
Number of polygons eliminated .........................   38
 
 
.TP 8 
+----------------------------------------------------------------+
|                                                                |
|                      Writing output IFJ file                   |
|                                                                |
+----------------------------------------------------------------+
 
Number of segments written to output file ......... 72
 
 
 ELAPSED:    0 00:51:12.80  CPU: 0:03:27.71  BUFIO: 27  DIRIO: 424  FAULTS: 830 
 
.LEFT MARGIN +10
.FILL
.TP 6
.BLANK 2
.P 0;This example shows  POLMERGE used with both /LOOKUP and /RATIO
qualifiers set. The user has also set all the tolerances explicitly.
/RATIO =(LARGE) operation has been assumed so all polygons with a 
ratio larger then 7 and area less than 25 units are merged or eliminated,
as well as all polygons less then the area tolerances of 5 units.
.P 0;$STATUS is set to SS$_NORMAL - normal successful completion.
.LEFT MARGIN -10
.bl 2
.NO FILL
^*$ POLMERGE TEST50/LOG/NOMERGE/ELIM=(BY__LOOKUP)/LOOKUP=POLMERGE.DAT 
EXAMPLE3_<CR_>\*
%LSLLIB-I-IFFOPENED, LSL$SOURCE_ROOT:[POLYGONS.POLMERGE]TEST50.IFJ;1 opened for read
%LSLLIB-I-IFFOPENED, LSL$SOURCE_ROOT:[POLYGONS.POLMERGE]EXAMPLE3.IFJ;5 opened for write
%PMERGE-I-LKPOPNREAD, Lookup file LSL$LOOKUP:POLMERGE.DAT opened for reading 
 
               [ POLYGON FORMATION STATISTICS HERE ]
 
.tp 12 
+----------------------------------------------------------------+
|                                                                |
|                      Eliminating Polygons                      |
|                                                                |
+----------------------------------------------------------------+
 
Area Tolerance ........................................   25.000
Lookup File .....LSL$LOOKUP:POLMERGE.DAT
Number of polygons considered for elimination ......... 18
Number of polygons eliminated ......................... 10
 
 
.tp 12 
+----------------------------------------------------------------+
|                                                                |
|                      Writing output IFJ file                   |
|                                                                |
+----------------------------------------------------------------+
 
Number of segments written to output file ......... 447
 
 ELAPSED:    0 00:07:27.07  CPU: 0:04:10.41  BUFIO: 23  DIRIO: 2344  FAULTS: 794 
.LEFT MARGIN +10
.FILL
.TP 6
.BLANK 2
.P 0;This example shows  POLMERGE used to eliminate isolated polygons only
(because NOMERGE is specified) using the lookup table.
Note that all the isolated polygons formed fall below the default area 
tolerance. Their codes must also all appear as primary codes in the lookup
table because all of the 18 isolated polygons are considered for elimination.
However not every one of the polygons is eliminated because all their "mother"
polygons do not appear as secondary codes in the appropriate definition sets of
the lookup file.
.P 0;$STATUS is set to SS$_NORMAL - normal successful completion.
.LEFT MARGIN -10
.NO FILL
.bl 2
^* $ POLMERGE TEST20.DUFF/LOG EXAMPLE4_<CR_>\*
%POLMERGE-E-ACINCON, polygon labels in AC texts inconsistent in feature with FSN 13 (13)
\Current segment: 3\
\Previous segment: 2\
Polygon labels in AC texts inconsistent in feature with FSN 13 - polygon abandoned
%POLMERGE-E-ACINCON, polygon labels in AC texts inconsistent in feature with FSN 15 (15)
\Current segment: 1\
\Previous segment: 4\
Polygon labels in AC texts inconsistent in feature with FSN 15 - polygon abandoned
 ELAPSED:    0 00:00:21.61  CPU: 0:00:19.43  BUFIO: 8  DIRIO: 21  FAULTS: 920 
.LEFT MARGIN +10
.FILL
.TP 6
.BLANK 2
.P 0;This example shows  a run of POLMERGE which fails during the polygon 
consistency checking phase. The specified AC labels are inconsistent for the
polygons which have been formed. 
POLMERGE processing stops after this run with $STATUS set to SS$ABORT. 
Polygon consistency checking can be negated with the /NOACCHECK qualifier, but
is dangerous if /LOOKUP is used and the input data has not been produced 
directly from an other utility such as VECTORISE or IPOLYGON.
.LEFT MARGIN -10
.NO FILL
.bl 2
^*$  POLMERGE TEST50/AREA=(MER:10,NOELIM)/ELIM=(BY_LOOKUP)  -
 /MER=(BY_LARGE)/LOOKUP=POLMERGE.DAT EXAMPLE5/LOG_<CR_>\*
%LSLLIB-I-IFFOPENED, LSL$SOURCE_ROOT:[POLYGONS.POLMERGE]EXAMPLE5.IFJ;1 opened for read
%LSLLIB-I-IFFOPENED, LSL$SOURCE_ROOT:[POLYGONS.POLMERGE]EXAMPLE5.IFJ;11 opened for write
 
                [ POLYGON FORMATION STATISTICS HERE]

 
.TP 12 
+----------------------------------------------------------------+
|                                                                |
|                      Merging Polygons                          |
|                                                                |
+----------------------------------------------------------------+
 
Area Tolerance ...................................   10.000
Lookup File ....LSL$LOOKUP:POLMERGE.DAT
Number of polygons considered for merging ......... 121
Number of polygons merged ......................... 121
 
 
.TP 12 
+----------------------------------------------------------------+
|                                                                |
|                      Eliminating Polygons                      |
|                                                                |
+----------------------------------------------------------------+
 
Lookup File ....LSL$LOOKUP:POLMERGE.DAT
Number of polygons considered for elimination ......... 48
Number of polygons eliminated ......................... 40
 
 
.TP 8 
+----------------------------------------------------------------+
|                                                                |
|                      Writing output IFJ file                   |
|                                                                |
+----------------------------------------------------------------+
 
Number of segments written to output file ......... 50

 ELAPSED:    0 00:04:15.21  CPU: 0:03:34.31  BUFIO: 22  DIRIO: 347  FAULTS: 1055 
.LEFT MARGIN +10
.FILL
.TP 6
.BLANK 2
.P0
This example demonstrates the way in which the rules for merging and elimination
 can be different.  An area tolerance of 10 is applied for merging, but the 
NOELIM keyword with the /AREA qualifier specifies that no area tolerance is 
to be applied to isolated polygons for elimination. Polygons for merging are 
merged into their largest neighbours whereas polygons for elimination are 
merged according to the definition sets in the lookup file. Note, however,
that even although merging is not by means of the lookup table, those polygons
which are considered for merging are limited to those having  codes which 
match one of the primary polygon labels in the lookup file.
.P 0;$STATUS is set to SS$_NORMAL - normal successful completion.
.LEFT MARGIN -10
.NO FILL

.TP 6
.page
.NOFILL
.NOKEEP
.REQUIRE "POLMERGEMSG.RNO"
