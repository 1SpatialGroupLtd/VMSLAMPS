.PAGE
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 1 ^^^*INTRODUCTION\*
^*--------------------------------------------------------------------------------\*
.LM +10
.INDEX POLYGONS> definition of acronym
.INDEX POLYGONS> role within automated mapping

POLYGONS is the Laser-Scan IFF polygon creation and processing package. IFF
stands for *Internal *Feature *Format and is the Laser-Scan vector file format
generated by LASERAID and other Laser-Scan mapping systems and used as the
data POLYGONS throughout the Laser-Scan LAMPS system. IFF files are binary and
cannot be manipulated directly using a text editor. The POLYGONS package
enables the user to perform a wide range of polygon creation and manipulation
tasks related to the requirements of the automated mapping industry. 

.BLANK
.TEST PAGE 10
.LM -10
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 1 ^^^*POLYGONS#-#FEATURES\*
.LM +10
.INDEX POLYGONS> features

.P 0;The POLYGONS package consists of independent modules which together
form a polygon creation and manipulation system within an automated mapping
environment. The modules which form the POLYGONS package offer:

.LIST "o"

.LE ;common command syntax. Module command lines are decoded
using the Command Line Interpreter as used by the VAX/VMS utilities. 

.LE ;VMS format messages referenced using 32 bit condition 
code symbols.

.INDEX POLYGONS> and $STATUS
.INDEX $STATUS
.LE ;VMS DCL symbol $STATUS on image exit.

.LE ;comprehensive documentation in this reference manual using a style
consistent with that used by Digital Equipment Corporation in their VMS
utility manuals. The POLYGONS User Reference documentation includes an
explanation of the messages output by the modules together with
suggested user action. 


.END LIST

.BLANK
.TEST PAGE 10
.LM -10
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 1 ^^^*POLYGONS and Existing LSL Utilities.\*
.LM +10
.P 0;POLYGONS is designed to replace the existing Laser-Scan utilities
POLCHK and CODSEG, as well as to create new facilities for the creation and
manipulation of polygon data.

.BLANK
.TEST PAGE 10
.LM -10
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 1 ^^^*POLYGONS and IFF\*
.INDEX POLYGONS> and IFF
.INDEX IFF> and POLYGONS

.LM +10
.INDEX POLYGONS and logical name LSL$IF:
.INDEX logical name LSL$IF:
.INDEX LSL$IF:
.INDEX LSL$IF:> and POLYGONS
.INDEX POLYGONS> and default IFF file extension

.P 0;Within the VAX/VMS system IFF files can be treated as any other
file type for file management purposes. To enable the user to
distinguish an IFF file from a file of another type IFF files have by
default the file extension '.IFF'. To provide great flexibility in the
production environment IFF files are referenced by all the POLYGONS
modules using logical name LSL$IF:. (For an explanation of logical names
see the VAX/VMS document set). Logical name LSL$IF: is assigned to a
device and directory specification either using the VMS DEFINE command
or the Laser-Scan SI utility, (see the "IFF User Guide" for details). 

.INDEX SI utility
.INDEX POLYGONS> and the SI utility

.BLANK
.TEST PAGE 10
.LM -10
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 1  ^^^*POLYGONS and DCL symbol $STATUS\*
.INDEX POLYGONS> and DCL symbol $STATUS
.INDEX $STATUS
.LM +10
.INDEX POLYGONS> values set in $STATUS

.P 0;Like VMS utilities, all POLYGONS modules generate VMS format
messages and set VMS DCL symbol $STATUS on image exit. This is a
valuable feature as a non-interactive process can test the success of a
preceding POLYGONS module before proceeding. $STATUS will always be set
to a VMS 32#bit condition code. Successful program execution will result
in $STATUS being set to SS$__NORMAL. If an error occurred during
POLYGONS processing, SS$__ABORT of varying severities, or a VMS System
or CLI (Command Line Interpreter) condition code will be used. The user
may simply test $STATUS for TRUE or FALSE within a DCL command
procedure. If $STATUS is TRUE then processing was successful. If it is
FALSE, an error occurred during processing. For a detailed description
of the uses of $STATUS see the VAX VMS document set. 

.INDEX CLI
.BLANK
.TEST PAGE 10
.LM -10
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 1 ^^^*POLYGONS and three dimensional strings.\*
.INDEX POLYGONS> and three dimensional strings
.LM +10
.P 0;None of the POLYGONS modules handle 3 dimensional strings held in IFF ZS
entries. Feature containing ZS entries will be copied unprocessed to the
output file (if appropriate).

.BLANK
.TEST PAGE 10
.LM -10
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 1 ^^^*Getting started with POLYGONS\*
.INDEX POLYGONS> getting started
.LM +10
.INDEX Getting started with POLYGONS
.INDEX POLYGONS package initialisation
.INDEX POLYGONSINI

.P 0;Once logged in the user must give two commands to initialise the
POLYGONS package. Before the POLYGONS package can be used DCL symbols
and logical names must be assigned to enable the user to invoke the
modules. This is dome using a command procedure POLYGONSINI.COM which
is supplied as part of the POLYGONS package. POLYGONSINI itself will
be defined as a DCL symbol at your site and should be invoked thus: (see
PREFACE for explanation of presentation conventions) 

.NO FILL
.LM +6
.BLANK
$ ^*POLYGONSINI_<CR_>\*
.INDEX POLYGONSINI
.INDEX POLYGONSINI> DCL symbols
.INDEX $STATUS
.INDEX POLYGONS> message definitions
.INDEX POLYGONSINI> in login file
.JUSTIFY

.FILL
.LM -6

.P 0;The POLYGONSINI command invokes a command procedure which defines
a DCL symbol (the module name) for each of the POLYGONS modules. After
using POLYGONSINI the user need only type the symbol name to activate
the module of his choice. 

.P 0;As an alternative to explicitly typing the POLYGONSINI command
each time the user wishes to use the POLYGONS package, the
POLYGONSINI command may be placed in the users login file, or in the
site dependent default login file. 

.INDEX SI command
.INDEX LSL$IF:

.P 0;The second command which must be given before using the POLYGONS
package is the SI command. The SI command assigns the logical name
LSL$IF: (or IF: for short) to the device-directory specification which
contains the IFF file(s) that are to be manipulated. For example: 

.INDEX SI> example
.NJ
.P 10;$ ^*SI DUA3:[BUREAU.TRIALS.DIGITISING]\* 
.J
.P 0;This will assign logical name LSL$IF: to the device and directory
specification DUA3:[BUREAU.TRIALS.DIGITISING] 

.P 0;For further details of the SI command see the IFF User Guide.
.BLANK 2
.TEST PAGE 10
.LM -10
^*--------------------------------------------------------------------------------\*
.HEADER LEVEL 1 ^^^*How to specify POLYGONS command qualifier arguments\*
.INDEX POLYGONS> specification of POLYGONS command lines
.LM +10

.P 0;POLYGONS utilities use the VMS Command Line Interpreter (CLI) to
get and parse the program command line. POLYGONS utilities thus offer a
VMS emulating user interface. As many POLYGONS utilities require
floating point arguments to command, qualifiers Laser-Scan have
developed an enhanced CLI based command line decoding mechanism. This
enables the interpretation of numbers as either "real" or "integer". 

.P 0;The CLI allows the user to specify single and lists of integer
qualifier arguments. If a list of arguments is specified, each argument
must be separated by a comma and the whole list enclosed within
parentheses, for example: 

.P 0;Single argument:
.P 8;$ ^*EXAMPLE/QUALIFIER=7_<CR_>\*
.LM +8
.P 0;Where "EXAMPLE" is the command and /QUALIFIER is a qualifier to that
command. There is one qualifier argument #-##7
.LM -8
.P 0;Argument list:
.P 8;$ ^*EXAMPLE/QUALIFIER=(2,5,8,9,10,11,12,13,14)_<CR_>\*
.LM +8
.P 0;Where "EXAMPLE" is the command and /QUALIFIER is a qualifier to that
command.  There are 9 qualifier arguments within the argument list.
.LM -8
.TP 6
.BLANK
.LM -10
^*##########----------------------------------------------------------------------\*
.LM +10
.HL 2 ^^^*Integer value ranges\*
.P 0;While developing the floating point command line data type (see Preface)
it was recognised that there is a need for numeric range decoding within a VMS
emulating command line. Argument ranges are specified with the syntax: 

.P 8;^*n:m\*
.LM +8
.P 0;Where n is the lower limit of the range and m is the upper limit of the
range (inclusive).
.LM -8
.P 0;Such ranges are expanded in full. A maximum of 1024 arguments can be
specified to any one command qualifier. 

.P 0;If we take our example argument list used above, i.e:
.P 8;$ ^*EXAMPLE/QUALIFIER=(2,5,8,9,10,11,12,13,14)_<CR_>\*

.P 0;and now use the Laser-Scan argument range decoding mechanism:

.P 8;$ ^*EXAMPLE/QUALIFIER=(2,5,8:14)_<CR_>\*

.P 0;we see that a more compact command line results but yields the same
arguments. This is clearly an advantage in an IFF map processing environment
where a single file could contain hundreds of attributes which the user may
wish to reference via command line arguments.
.P 0;Other examples are:

.P 8;$ ^*EXAMPLE/QUALIFIER=2:9_<CR_>\*
.LM +8
.P 0;This yields 8 integer arguments: 2, 3, 4, 5, 6, 7, 8, and 9
.BLANK
.P 0;$ ^*EXAMPLE/QUALIFIER=:8_<CR_>\*
.P 0;This yields 9 integer arguments: 0, 1, 2, 3, 4, 5, 6, 7, and 8

.LM -8
.P 0;If when ranges are decoded, a qualifier has more than 1024 arguments
the Laser-Scan LSLLIB library issues the error message:

.P 3;%LSLLIB-E-RESPARSOVF, result of parse overflowed buffer

.P 0;and program execution is terminated.

.TP 6
.BLANK
.LM -10
^*##########----------------------------------------------------------------------\*
.LM +10
.HL 2 ^^^*Floating point value ranges\*
.P 0;Floating point value ranges are decoded in a different manner to
integer value ranges. Instead of expanding the range to yield all its component
integer values the command decoder merely leaves the range as a lower limit and
an upper limit. Processing then takes account of any possible value lying
between these limits (inclusive).

.P 0;For example:
.LM +8
.P 0;$ ^*EXAMPLE/HEIGHT=(23.5:110.2)_<CR_>\*
.P 0;Select all features having a height which lies within the range
23.5 to 110.2 inclusive.
.LM 0
^*--------------------------------------------------------------------------------\*
