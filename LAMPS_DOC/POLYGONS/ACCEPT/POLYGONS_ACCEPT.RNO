.!** Qume page format
.LEFT MARGIN  0
.RIGHT MARGIN 80
.PAGE SIZE    60,80
.FLAGS BOLD
.FLAGS SUBSTITUTE
.KEEP

.!** title page
.FIGURE 14
.CENTRE ;^*Laser-Scan Ltd_.\* 
.FIGURE 2
.CENTRE ;^*POLYGONS - Acceptance Tests\*
.FIGURE 2
.CENTRE ;^*Issue 2.0 (mod)  - 02-Oct-1992

.FOOT
.NOFILL
Copyright (C) $$year Laser-Scan Ltd
Science Park, Milton Road, Cambridge, England CB4 4FY  tel: (0223) 420414

"POLYGONS Acceptance"				Category: Acceptance Tests
Issue 2.0	Adrian Cuthbert 		19-Sep-1988
Issue 1.0	Tim Hartnall, Martin Reid	15-Oct-1987
Issue 1.0 (mod)	K M Sutherland			02-Oct-1992
.FILL
.END FOOT
.NOFLAGS SUBSTITUTE
.TITLE ^*POLYGONS Acceptance tests\*
.PAGE
.REQUIRE "POLYGONS_ACCEPT.RNT"
.PAGE
.HL 1 ^^^*Introduction\*

.P 0;This document describes the acceptance test procedure for the Laser-Scan
POLYGONS (IFF polygons package) which is part of the Laser-Scan LAMPS
automated mapping system. It assumes that the user is familiar with digital
cartography, with the POLYGONS modules, with the LITES2 map editor, the
STRUCTURE package module ILINK, with LAMPS and with the VMS operating system.
See the "POLYGONS User Guide", and the "POLYGONS Reference Manual" for further
information on POLYGONS. 

.P 0; The relevant data files and command files for the acceptance tests are
supplied by Laser-Scan on installation of the package. 

.P 0; Note that Laser-Scan reserve the right to make minor modifications to
this acceptance procedure to match their policy of continued software
development. 

.TP 12
.HL 1 ^^^*Preparing for the Acceptance Tests\*

.P 0; Check that the Laser-Scan-supplied package initialisation command file
LSL$COM:POLYGONSINI.COM has been invoked. This has probably been done
automatically on your behalf at login time. 
A good check is to use the DCL command:
.B
	$ SHOW SYMBOL POLMERGE
.B
to verify that the DCL symbol for one of the POLYGONS package modules, POLMERGE,
exists and points to the program image file of the main POLYGONS module
"LSL$EXE:POLMERGE.EXE". If symbol POLMERGE is not defined then invoke the
package initialisation command file by giving the DCL command: 
.B
	$ @LSL$COM:POLYGONSINI

.B
then repeat the check for the existence of DCL symbol POLMERGE.

.P 0; The acceptance test command procedure will check for the existence of the
required acceptance test data files in the directory defined by logical name 
LSL$IF. Checks will also be made for the existence of other required
acceptance test data files in their usual directory on the Laser-Scan software
distribution directory tree. It will set up a logical name
LSL$POLYGONS__ACCEPT to point to the public tree directory. It will also copy
the initial IFF data file into the working directory pointed at by LSL$IF.

.P 0;The files used for the POLYGONS acceptance tests are:
.LIST
.LE ;LSL$IF:POLYGONS_ACCEPT.IFJ
.P 0;This file contains junction-structured linework defining a set of polygon 
boundaries. The links within this file are unlabelled.
.LE ;LSL$IF:POLYGONS_ACCEPT.SEED
.P 0;This file contains single point text features used by the 
POLYGONS utility IPOLYGON as polygon seed points, from which polygon labels
are derived.
.END LIST 

.TP 10
.HL 1 ^^^*Invoking the Acceptance Tests\*

.P 0;Invoke the acceptance test command procedure by giving the DCL command
.B
	$ @LSL$COM:POLYGONS__ACCEPT

.P 0;The test command procedure explains briefly the various phases of
the acceptance procedure.

.P 0;After copying the relevant IFF files to LSL$IF:, it
offers you the option of using the LITES2 map editor to inspect the initial
data. This is a set of unlabelled links. 
After each phase it offers you the option of using the LITES2 map
editor to inspect the results of the processing. Remember to EXIT LITES2 in order
to rejoin the acceptance tests.

.TP 10
.HL 1 ^^^*The Acceptance Sequence\*
.P 0;At the start of these tests, the original data file contains junction
structured links. The acceptance procedure steps exercise all three POLYGONS
package modules in 4 stages.
.LIST
.LE
^*IPOLYGON\* - creates polygons and assigns seed points to output links
having left/right polygon labels.
.LE
^*ISTSEL\* - selectively relabels left/right labelled links and removes
left/right labelled links on the basis of user specified label combinations.
.LE
^*POLMERGE\* - internally generates polygons from left/right labelled 
links. These polygons are then selectively eliminated and merged on the basis
of polygon area and user specified polygon label combinations.
.LE
^*IPOLYGON\* - creates closed polygon features, which include first order
nested polygons, from the left/right labelled links output by POLMERGE

.END LIST

.TP 10
.HL 2 ^*IPOLYGON - generation of left/right labelled links\*

.P 0;In this phase, IPOLYGON is used to combine the junction structured
links file with the data in the seed point file to create junction structured
links having left/right polygon labels.

.P 0;The command line specified is:^*
.NOFILL
.KEEP
	
$ IPOLYGON/LOG/LITES2/SEGMENTS=(JUNCTIONS,LABEL, -
__$########OUTPUT:POLYGONS__ACCEPT.LNK)#-
__$########/SEED=(FC:28,FILE:POLYGONS__ACCEPT.SEED)#-
__$########POLYGONS__ACCEPT.IFJ\*
.FILL

.P 0;Note that IPOLYGON offers a LITES2 guidance file option to facilitate
semi-automatic correction of data errors.

.P 0;Note the output from IPOLYGON showing progress through the operation, and
the polygon formation statistics. 86 segments and 33 seed points are read in. 
One of these seed points is disregarded because of multiple seed points in the 
same polygon. All polygons contain at least one seed point. Three passes are 
required to resolve polygon nesting.

.P 0;Note that $STATUS is returned as "%SYSTEM-S-NORMAL, normal
successful completion". 

.TP 6
.P 0; You are then asked if you wish to inspect the results of this phase
using LITES2. If you answer yes, then the IFF data file is read in to LITES2
and displayed (assuming LITES2 and suitable graphics hardware are available).

.P 0;To facilitate verification, the source seed point features are displayed
in conjunction with the left/right labelled links. The disgarded seed point is 
located using the LITES2 guidance file. This can be invoked by typing 
"@POLYGONS__ACCEPT" at the LITES2 command line.

.P 0;All the links in the links IFF file will now have type 4 and 5 ACs
(Ancillary Codes) which contain the polygon labels for the left and right side
of the link respectively. The left/right polygon labels match the source seed 
point texts.
.BLANK;.RIGHT;^*Pass#[#]/Fail#[#]\*

.TP 10
.HL 2 ^*ISTSEL - selective re-labelling and elimination of links\*

.P 0;In this phase, ISTSEL is used to change the left/right labels of links 
which have the polygon codes "Lk" and "Kx" to "Replaced code". Where this
process results in a link having the same polygon label on both the left and
right hand side, the link is omitted form the output file. IFF junction 
structure is not preserved by this simple, but very quick program.

.P 0;The command line specified is:^*
.NOFILL
.KEEP
	
$ ISTSEL/LOG/DEF__FILE=LSL$POLYGONS__ACCEPT:POLYGONS__ACCEPT.DAT -
__$# POLYGONS__ACCEPT.LNK POLYGONS__ACCEPT.SEL\*
.FILL

.P 0;Note the speed of execution. 86 segments are analysed, 3 of which are 
deleted.

.P 0;Note that $STATUS is returned as "%SYSTEM-S-NORMAL, normal
successful completion". 

.TP 6
.P 0; You are then asked if you wish to inspect the results of this phase
using LITES2. If you answer yes, then the IFF data file is read in to LITES2
and displayed (assuming LITES2 and suitable graphics hardware are available).

.P 0;To facilitate verification, the original left/right labelled links are
displayed in conjunction with the re-labelled left/right links. 

.BLANK;.RIGHT;^*Pass#[#]/Fail#[#]\*

.TP 10
.HL 2 ^*POLMERGE - selective polygon elimination and merging\*

.P 0;In this phase, POLMERGE is used to selectively eliminate and merge 
polygons defined by the left/right labelled links produced by IPOLYGON.
The Lookup file specified defines that polygons with codes "Lk" and "Kx"
are merged into neighbouring polygons with codes "Ab" and "Eq" respectively, 
provided they have an area less than the merge tolerance of 150000 square 
IFF units.
Isolated polygons with codes "Lk" and "Kx" are eliminated if they have area 
less than 60000 square  IFF units.
.P 0;The command line specified is:^*
.NOFILL
.KEEP

$ POLMERGE/LOG/LOOKUP=LSL$POLYGONS__ACCEPT:PMERGE__LOOKUP.DAT- 
__$ /ELIMINATE/MERGE=(BY__LOOKUP)/AREA=(MERGE__TOL:150000,ELIM__TOL:60000)-
__$ POLYGONS__ACCEPT.LNK POLYGONS__ACCEPT.PMG
\*
.FILL

.P 0;Note the log of progress through the operation, and the statistics. One 
isolation is a candidate for elimination, and is removed. 8 polygons are 
candidates for merging but coding constraints specified in the lookup file 
mean that only 7 are actually merged. 62 segments are written to the output 
junction-structured IFF file.

.P 0;Note that $STATUS is returned as "%SYSTEM-S-NORMAL, normal
successful completion". 

.TP 6
.P 0; You are then asked if you wish to inspect the results of this phase
using LITES2. If you answer yes, then the IFF data file is read in to LITES2
and displayed (assuming LITES2 and suitable graphics hardware are available).

.P 0;To facilitate verification, the original left/right labelled links are
displayed in conjunction with the re-labelled left/right links after 
polygon merging and elimination.

.BLANK;.RIGHT;^*Pass#[#]/Fail#[#]\*
.TP 10
.HL 2 ^*IPOLYGON - generation of closed polygon features\*

.P 0;In this phase, IPOLYGON is used to form complete closed polygon features
from the left/right labelled links produced by POLMERGE. Nested polygons
are joined to their 'parent' by means of invisible (or "pen-up") moves.


.P 0;The command line specified is:^*
.NOFILL
.KEEP

$ IPOLYGON/LOG/LRCODE/POLYGONS=(LABEL,FC:4,LAYER:100#-
__$########OUTPUT:POLYGONS__ACCEPT.POL)#-
__$########POLYGONS__ACCEPT.PMG\*
.FILL

.P 0;Note the log of progress through the operation, and the statistics.
25 polygons boundary features are written to the output IFF file.

.P 0;Note that $STATUS is returned as "%SYSTEM-S-NORMAL, normal
successful completion". 

.TP 6
.P 0; You are then asked if you wish to inspect the results of this phase
using LITES2. If you answer yes, then the IFF data file is read in to LITES2
and displayed (assuming LITES2 and suitable graphics hardware are available).

.P 0;To facilitate verification, the polygon boundaries are displayed (in a 
different colour) on top 
of the original left/right labelled links. This allows the links that have 
been lost during polygon merging to be identified.

.BLANK;.RIGHT;^*Pass#[#]/Fail#[#]\*

.PAGE 
.HL 1 ^*Final Verification\*

.P 0;This is the end of the formal  acceptance test command procedure.
The following files have been created from the original links IFF file: 

.NOFILL

Original links IFF filename:		LSL$IF:POLYGONS__ACCEPT.IFJ
Original seed point IFF filename:	LSL$IF:POLYGONS__ACCEPT.SEED

+-----------------------------------------------------------------------+
| PHASE      |  FILE CHARACTERISTIC             |      FILE             |
+------------+----------------------------------+-----------------------+
| IPOLYGON   |  links given left/right labels   |  POLYGONS__ACCEPT.LNK  |
| ISTSEL     |  links re-labelled, some removed |  POLYGONS__ACCEPT.SEL  |
| POLMERGE   |  links selectively removed       |  POLYGONS__ACCEPT.PMG  |
| IPOLYGON   |  complete closed polygons        |  POLYGONS__ACCEPT.POL  |
+-----------------------------------------------+-----------------------+

.FILL
.P 0
These files are available in the directory pointed to by logical name LSL$IF:
for further verification, if required. 

.P 0
The following files can be used to view the output of the acceptance test
using LITES2. These can be found in the directory pointed to by the logical name
LSL$POLYGONS__ACCEPT:.

.NOFILL

	FRT  (feature representation table)    	POLYGONS__ACCEPT.FRT
	SRI  (feature representation IFF file) 	POLYGONS__ACCEPT.SRI
	TRI  (text representation IFF file)    	POLYGONS__ACCEPT.TRI

.FILL

.PAGE
.HL 1 ^^^*Conclusions\*
.P 0
This completes the acceptance tests for the Laser-Scan POLYGONS software
package. 
.P 0
^*Overall Pass#[#]/Fail#[#]\*

.P 0
^*Comments:\*
.FIG 4
.P 0
^*Customer Representative:				Date:\*

.P 0
^*Laser-Scan Representative:				Date:\*
