.!** page format
.LEFT MARGIN  0;.RIGHT MARGIN 80;.PAGE SIZE    60,80;.KEEP
.! enable the use of ^*...\* and * as bolding flags
.ENABLE BOLDING;.FLAGS BOLD

.!** title page
.FIGURE 14
.CENTRE ;^&Laser-Scan Ltd.\& 
.FIGURE 2
.CENTRE ;^*UILMENUS User Guide\*
.FIGURE 2
.CENTRE ;^*Issue 1.7\*

.FOOT
.FLAGS SUBSTITUTE
.NOFILL
Copyright (C) $$year Laser-Scan Ltd
Science Park, Milton Road, Cambridge, England CB4 4FY  tel: +44 (0) 1223 420414

Document "UILMENUS User Guide"			Category "USER"
Document Issue 1.1	Clarke Brunt		29-Oct-1990
Document Issue 1.2	Clarke Brunt		15-Feb-1991
Document Issue 1.3	Andy Brown		26-Feb-1991
Document Issue 1.4	Clarke Brunt		22-Jan-1992
Document Issue 1.5	Clarke Brunt		12-Feb-1992
Document Issue 1.6	Clarke Brunt		 6-Apr-1992
Document Issue 1.7	Clarke Brunt		 9-Jul-1992
.FILL
.NOFLAGS SUBSTITUTE
.END FOOT

.!* and the title to go at the top of each page
.TITLE UILMENUS - User Guide
 

.! ensure that .INDEX entries will be transmitted as they were typed
.XLOWER

.! change the way .HL works
.!   n1=6  lowest  level to have `run-in' format
.!   n2=2  highest level to have title in uppercase - 1 & 2 will
.!   n4=0  lowest  level not to have section number at left
.!   n6=0  number of blank lines before header
.STYLE HEADERS 6,2,,0,,0
.PAGE
.REQUIRE "UILMENUS.RNT"
.PAGE

.!*****************************************************************************

.BR;^*--------------------------------------------------------------------------------\*
.BR;^*MODULE UILMENUS\*
.INDEX UILMENUS               

.P 0
^*--------------------------------------------------------------------------------\*
.HL 1 ^*FUNCTION\*

.LM +10

.INDEX UILMENUS > Function
.P 0;UILMENUS is a suite of two programs which together enable the user to
produce a menu driven graphics application interface for a workstation running
the DECwindows windowing system. The programs provide mechanisms for defining
'widgets' such as  labelled buttons, icons, toggle switches, slider bars etc,
and for associating actions with each widget. DCL symbols should be set up
to run the programs, i_.e_.
.BR
.LM+6
$#UILGEN#==#"$LSL$EXE:UILGENMOTIF" and
.BR
$#UILMENUS#==#"$LSL$EXE:UILMENUSMOTIF"
.LM-6

.P 0
The UILGEN program takes as input _.UIM files created by the user, and produces
as output a _.UIL file. This is compiled by the VAX UIL compiler to produce a
_.UID file which is then used by the UILMENUS program to produce the menus on
the screen. Note that the command UIL/MOTIF may be required unless it has been
arranged that the MOTIF (rather than XUI) qualifier for UIL is the default. The
generated _.UIL files include some header files from the LSL$UIL directory.
These files are supplied in LSL$PUBLIC__ROOT:[LITES2.UIL], so LSL$UIL will
normally be defined as a search list, passing through LSL$SITE__ROOT:[LSL.UIL],
LSL$PUBLIC__ROOT:[LITES2.UIL] and possibly other directories.

.P 0;Used in conjunction with LAMPS utilities that accept mailbox input, such
as LITES2, UILMENUS allows input from a screen-based set of menus in addition
to the normal use of the keyboard.

.P 0;UILMENUS has a mode of operation which can accept as input existing
_.DAT and _.CDL files intended for the UISMENUS utility.

.P 0;UILMENUS is restricted to use on VAX graphics workstations
that are running DECwindows. Anyone who wishes to design a new menu
interface using UILMENUS should first read the introductory sections of the
DEC documentation on the DECwindows system, to familiarise themselves with the
concepts of X windows and DECwindows.

.LM -10

.PAGE
.P 0
^*--------------------------------------------------------------------------------\*
.HL 1 ^*FORMAT\*
.INDEX UILGEN > Format

.LM +10
.NO FILL
.NO JUSTIFY
$ UILGEN uim-file-name uil-file-name
    
^*Command qualifiers                    Default\*
.INDEX UILGEN > Command qualifiers

.blank
.nofill
/CDL                                  /NOCDL
/CONVERT                              /NOCONVERT
/DEFINE                               /NODEFINE
.FILL
.JUSTIFY

.LM -10

.tp 10
.P 0
^*--------------------------------------------------------------------------------\*
.HL 1 ^*PROMPTS\*
.INDEX UILGEN > Prompts

.tp 5
.P 10
__UIM input file: uim-input-file-name
.P 10
__CDL Data file: dat-file-name (if /CDL or /CONVERT used)
.P 10
__UIL output file: uil-file-name
.P 10
__UIM output file: uim-output-file-name (if /CONVERT used)
.tp 10
.P 0
^*--------------------------------------------------------------------------------\*
.HL 1 ^*PARAMETERS\*
.INDEX UILGEN > Parameters

.LM +10

.P-10;uim-input-file-name

.P-2;-#specifies an ASCII file that contains UILGEN commands.
The name is parsed against LSL$UIL:---.UIM. This file may include
other files using the FILE command.

.P-10;dat-file-name

.P-2;-#specifies an ASCII file that contains UILGEN commands.
This parameter replaces the uim-input-file-name parameter if the /CDL
or /CONVERT qualifier is used. The file should be in the format expected for
a _.DAT file by the UISMENUS utility.
The name is parsed against LSL$CDL:---.DAT. This file may include
other files by using the FILE command.

.P-10;uil-file-name

.P-2;-#specifies the name of the output UIL file.
The name is parsed against LSL$UIL:---.UIL.

.P-10;uim-output-file-name

.P-2;-#specifies the name of the output UIM file

The name is parsed against LSL$UIL:---.UIM.
This parameter replaces the uil-file-name parameter if the /CONVERT
qualifier is used.

.LM -10

.tp 10
.P0
^*--------------------------------------------------------------------------------\*
.HL 1 ^*COMMAND QUALIFIERS\*
.INDEX UILGEN > Command qualifiers

.LM +10

.tp 8
.index UILGEN > Command qualifiers > /CDL
.p-10;/CDL
.i-10;/NOCDL####^*(default)\*

.p-2;-#this qualifier is used to specify that the input files use the
syntax of the UISMENUS program, in particular, coordinates are measured
from the bottom left. It is intended to provide a degree of compatibility
with menu files written for the UISMENUS utility.
When the /CDL qualifier is used, different header files are
included in the generated _.UIL file, which attempt to adjust the appearance
of the menus to match the UISMENUS style. It is normally recommended that the
/CONVERT qualifier is used instead of /CDL (see below).
.tp 8
.index UILGEN > Command qualifiers > /CONVERT
.p-10;/CONVERT
.i-10;/NOCONVERT#^*(default)\*

.p-2;-#this qualifier is also used to specify that the input files use the
syntax of the UISMENUS program, but in this case the input files are
translated into a _.UIM file (the native input file for UILGEN).
Once the UILMENUS files have been translated in this way, the resulting
UIM file may be further developed and used with UILGEN without the
/CDL or /CONVERT qualifiers. This method of converting UISMENUS files may
not initially give results which appear identical to when UISMENUS was used,
but is preferred to using the /CDL qualifier, which does not allow any
development of the menus except by altering the old _.CDL and _.DAT files.

.tp 8
.index UILGEN > Command qualifiers > /DEFINE
.index UILGEN > Conditional compilation
.p-10;/DEFINE=(symbol1,symbol2...)
.i-10;/NODEFINE#^*(default)\*

.p-2;-#this qualifier is used to define a list of symbols which may
be used to conditionally process parts of the input file. The intention
is that a single input file may be used to produce different menus
depending on the values used in the /DEFINE qualifier.

.LM -10

.PAGE
.P 0
^*--------------------------------------------------------------------------------\*
.HL 1 ^*FORMAT\*
.INDEX UILMENUS > Format

.LM +10
.NO FILL
.NO JUSTIFY
$ UILMENUS uid-file-name[,uid-file-name...]
    
^*Command qualifiers                    Default\*
.INDEX UILMENUS > Command qualifiers

.blank
.nofill
/ABORT                                /NOABORT
/CLASSNAME                            /CLASSNAME=LSLUILMENUS
/COMMAND                              /NOCOMMAND
/INPUT                                /NOINPUT
/LOGICAL                              /LOGICAL=LSL$UILMENUSTEXT
/OUTPUT                               /OUTPUT=LSL$LITES2AUX:
/SYMBOL                               /SYMBOL=LSL$UILMENUSTEXT
.FILL
.JUSTIFY

.LM -10

.tp 10
.P 0
^*--------------------------------------------------------------------------------\*
.HL 1 ^*PROMPTS\*
.INDEX UILMENUS > Prompts

.tp 5
.P 10
__UID file: uid-file-name
.tp 10
.P 0
^*--------------------------------------------------------------------------------\*
.HL 1 ^*PARAMETERS\*
.INDEX UILMENUS > Parameters

.LM +10

.P-10;uid-file-name

.P-2;-#specifies a list of files (up to 16) containing the output of the UIL
compiler. These are produced by running UIL on the _.UIL file produced by
UILGEN. The names are parsed against LSL$UIL:---.UID.

.LM -10

.tp 10
.P0
^*--------------------------------------------------------------------------------\*
.HL 1 ^*COMMAND QUALIFIERS\*
.INDEX UILMENUS > Command qualifiers

.LM +10

.tp 8
.index UILMENUS > Command qualifiers > /ABORT
.p-10;/ABORT[=abort__mailbox]

.p-2;-#this qualifier is used to specify the name of the file to which
UILMENUS is to send commands using the 'ABORT' action. The default name,
if /ABORT is given, is LSL$LITES2ABORT:. The name is most
likely to be the logical name for a mailbox, though TT: (for example)
may be used while testing to type the commands at the terminal.

.tp 8
.index UILMENUS > Command qualifiers > /CLASSNAME
.p-10;/CLASSNAME=string

.p-2;-#this qualifier is used to specify the class name for this Motif
application. The default is LSLUILMENUS. The class name is used in forming
the name of the application specific resource file (name.DAT in
DECW$USER__DEFAULTS or DECW$SYSTEM__DEFAULTS) and also as the first
component of the resources specified in these or other resource files.
A resource file may be used to customise the general appearance of the menu
interface. See below for a description of resource files.

.tp 8
.index UILMENUS > Command qualifiers > /COMMAND
.p-10;/COMMAND=string

.p-2;-#this qualifier is used to specify a string of commands which
UILMENUS will obey initially. It may, for instance, be used to display
a particular set of boxes initially.

.tp 8
.index UILMENUS > Command qualifiers > /INPUT
.p-10;/INPUT=input__mailbox

.p-2;-#this qualifier is used to specify the name of a device from which
UILMENUS is to read commands. It is most
likely to be the logical name for a mailbox, though TT: (for example)
may be used while testing to in order to give commands at the terminal.

.tp 8
.index UILMENUS > Command qualifiers > /LOGICAL
.p-10;/LOGICAL=logical__name
.i-10;/LOGICAL=LSL$UILMENUSTEXT####^*(default)\*

.p-2;-#this qualifier is used to specify the name of the job logical name to
be set using the 'DEFINE' action.

.tp 8
.index UILMENUS > Command qualifiers > /OUTPUT
.p-10;/OUTPUT=output__file
.i-10;/OUTPUT=LSL$LITES2AUX:####^*(default)\*

.p-2;-#this qualifier is used to specify the name of the file to which
UILMENUS is to send commands using the 'SEND' action. It is most
likely to be the logical name for a mailbox, though TT: (for example)
may be used while testing to type the commands at the terminal.

.tp 8
.index UILMENUS > Command qualifiers > /SYMBOL
.p-10;/SYMBOL=symbol__name
.i-10;/SYMBOL=LSL$UILMENUSTEXT####^*(default)\*

.p-2;-#this qualifier is used to specify the name of the DCL symbol to
be set using the 'SET' action.

.LM -10

.tp 12
.P0
^*--------------------------------------------------------------------------------\*
.HL 1 ^*DESCRIPTION\*
.INDEX UILMENUS > Description

.LM +10

.TP 5

.P 0;^*General\*

.p0; UILMENUS is a LAMPS utility that creates a tree of boxes on the screen.
These boxes may contain menus, buttons, informational text, and several
other widgets available in the DECwindows toolkit.
When a button is probed one or more of several actions are performed.

.LIST "o"
.LE;another box in the tree is made visible
.LE;a command is sent to another process
.LE;a DCL symbol is set
.LE;the utility is terminated
.END LIST

.TP 5
.P 0;^*Actions\*

.p0; The action which takes place when a button is pressed, or a widget
activated, depends on the command string given by the user in a DO command.
These same commands may also be sent to UILMENUS by writing them to the /INPUT
device (most likely a mailbox being written by another process). The command
string consists of a series of commands separated by ';'. For widgets returning
a value, the value will be substituted for any '?' characters e.g_. the command
typed into a command window, or the value from a scale widget. If '?' appears
in the DO string for a widget that does not return a value, or in a command
from the /INPUT device, then it will be ignored. The commands available are
listed above. To get ';' or '?' into a command, duplicate the character. Note
that commands which take a box name, or widget name, will not work until the
box has been fetched from the UID file. Root boxes are fetched automatically,
others may be fetched by the use of ADD, DISPLAY, FETCH, POSITION, or REMOVE
commands.
.BR;
The following commands are available:

.TP 6
.list "o"

.le;ABORT string:##the string is sent to the /ABORT file, which will
usually be a mailbox being read by another process.
.le;ADD name:##The name given may be either the name of a box, or an
individual named widget. The item is added to the display. Items may be
added to boxes even when the box is not currently displayed.
.le;BOTH:##following commands are obeyed unconditionally - cancels previous
ON or OFF.
.le;COLOUR RGB r g b box: the original and new colours in the COLOUR__MIX
box are set to the given red, green, and blue components (in the range 0.0 to
1.0).
.le;DEFINE string:##the job logical name is defined to the specified
string - this can be used as a secondary mechanism for communicating
to an associated process which has established a mailbox link to
UILMENUS.
.le;DISPLAY box:##the given box is displayed. All those boxes above it in
the tree and including
the specified box will be displayed, all other boxes are removed.
.le;EXIT:##UILMENUS terminates
.le;FETCH box:##the given box is fetched from the UID file but not displayed.
.le;FILE SEARCH ["file__spec"] box: the file list in the given FILE__SELECT
box is regenerated. If a file__spec is given, then the file filter is changed
to this.
.le;LABEL LABEL "string" name: sets the label in the given named LABEL widget
(created by ADD TEXT). This action may also be used to set the label in a
push button (BUTTON TEXT), toggle button (TOGGLE TEXT), pulldown menu
(PULLDOWN__MENU), or option menu (OPTION__MENU).
.le;LIST ADD "item__name" "do__string" name: a new item is added to the
named LIST widget.
.le;LIST CLEAR name: all items are removed from the named LIST widget.
.le;LIST DESELECT ["item__name"] name: the given item (all items if not
given) are deselected in the named LIST widget.
.le;LIST MOVE "item__name" name1 name2: the given item is removed from list
name1, and added (at the end) to list name2. Its DO string,
and current selected state, are preserved. The source and destination list
may be the same, in which case the item is just moved to the end.
.le;LIST REMOVE "item__name" name: the given item is removed from the
named LIST widget.
.le;LIST SELECT ["item__name"] name: the given item (all items if not
given) are selected in the named LIST widget. This is not useful in
a SINGLE type of LIST (only the last item will remain selected).
.le;TEXT VALUE ["string"] name: the current string in the given TEXT widget
is changed. If the string is omitted, an empty string is used.
.le;OFF:##following commands are only obeyed if the widget is turned off.
.le;ON:##used as part of a DO string for a toggle button, a button
within a multiple list, a BOX PROMPT,  a BOX FILE__SELECT, or a BOX COLOUR__MIX
- the following commands are only obeyed if the button is turned on, or in the
case of the boxes, the OK (rather than CANCEL) button was pressed. If neither
ON nor OFF appears, the commands are obeyed regardless.
.le;POSITION [x y] box:##the given box is moved to the given position.
If the position is omitted, the box is moved to the current position of
the screen pointer. The box need not be visible at the time it is moved.
.le;PROMPT LABEL "string" box:##sets the prompt label in the given prompt box.
.le;REMOVE name:##The name given may be either the name of a box, or an
individual named widget. The item is removed from the display. Items may be
removed from boxes even when the box is not currently displayed. If a composite
widget, such as a menu, is removed, then all the buttons contained in it
will disappear also.
.le;RESET box:##all the buttons in the given box are reset to their initial
states. This is 'off' for all TOGGLEs, but 'on' for the first TOGGLE in a
RADIO__BOX. An OPTION__MENU displays the name of its first button.
The command strings for the buttons are not obeyed.
.le;SCALE VALUE value name:##set the value of the named SCALE widget.
.le;SEND string:##the string is sent to the /OUTPUT file, which will
usually be a mailbox being read by another process.
.le;SET string:##the DCL symbol is set to the specified string - this
is normally followed by EXIT so that the symbol can be utilised.
.le;TOGGLE ON name:##turns on a named TOGGLE widget. If, instead, the name
is the name of a box, then all the buttons defined as TOGGLEs in the given
box are set to 'on'. This does not change the state of buttons within a
RADIO__BOX. The command strings for the buttons are not obeyed.
.le;TOGGLE OFF name:##turns off a named TOGGLE widget. If, instead, the name
is the name of a box, then all the buttons defined as TOGGLEs in the given
box are set to 'off'. This does not change the state of buttons within a
RADIO__BOX. The command strings for the buttons are not obeyed.
.end list

.TP 5
.P 0;^*Hierarchy\*

.p0;Each box has a name, and a parent box. The hierarchy is used by the
DISPLAY command to determine which boxes should be made visible.
For example, a tree might be of the form: 

.tp 18
.nofill


			 box__1
			   |
		+----------+------------+
		|			|
	      box__2 		      box__3
		|
	+-------+-------+
	|		|
      box__4	      box__5


.fill

.p0; This example has just one root box. It is possible to have several roots
(each has the parent "none"). When UILMENUS starts up, just the root
boxes will be displayed. The boxes may be defined in any order, but all boxes
must ultimately be connected to a root box.
.P0;The first root box defined in any UID file is treated specially and will
always have window manager borders (regardless of the use of BOX NOBORDER), and
will include an iconise button which iconises all windows of the UILMENUS
application. If several _.UID files are to be used as input to UILMENUS, then
only root boxes defined in the first UID file will be initially displayed - any
root boxes defined in the other _.UID files may be displayed by the use of
DISPLAY or ADD commands. The first root box in the subsequent _.UID files
cannot be displayed at all - a good way to avoid a problem here is to include
the same initial root box in all the _.UID files - in this way the box will
appear regardless of which of the _.UID files are passed to UILMENUS.

.TP 5
.P 0;^*Resource files\*

.p0;The general appearance of a Motif application may be tailored by
specifications contained in a resource file. The description here is brief
but there is DEC documentation and other books on the subject. The DEC Session
Manager loads resources from several files (called DECW$_*.DAT - these would
be called _.Xdefaults on some other systems) when it starts
up, and these provide defaults for all applications. When UILMENUS starts up,
it looks for a file called LSLUILMENUS.DAT in the directory
DECW$SYSTEM__DEFAULTS or DECW$USER__DEFAULTS. The name LSLUILMENUS is the
default application class for UILMENUS, and may be changed using the
/CLASSNAME qualifier. The lines within this file consist of specifications
such as
.bl
LSLUILMENUS_*background:	red
.bl
which would specify that the background colour of all widgets not otherwise
specified in the UIL file be red. The lists of resources which may be set may
be found in the Motif documentation. In addition to widget resources,
UILMENUS allows the user to override colour and font specifications produced
by DEFINE FONT or DEFINE COLOUR in the UIM file. For example, if you had
defined and used a colour named my__back, then the specification
.bl
LSLUILMENUS_*my__back:		green
.bl
would override the definition in the UIM file and set it to green.

.lm -10
.tp 12
.P0
^*--------------------------------------------------------------------------------\*
.HL 1 ^*UIM Files\*

.LM +10
.INDEX UILGEN > UIM files

.p0; The input to UILGEN is in the form of UIM (User Interface Menu) files.
The entire input may be contained within one file, but if required, the initial
file may contain FILE commands, to include others. An individual box is defined
by BOX commands, followed by the other UIM commands, and terminated by an END
command, or the end of the file. Each box must be contained entirely within one
file. For all commands expecting a position, or a size, these are measured in
pixels. For this purpose, the screen is assumed to be 1024 by 864 pixels. The
position of boxes is given relative to a corner of the screen, while the
position of other object are relative to a corner of their containing box. By
default positions are measured from the top left of the screen or box, and give
the position of the top left of the box or other item. If the /CDL qualifier is
used, positions are measured from the bottom left, and give the position of the
bottom left of the object. When displayed on screens with different numbers of
pixels, the menus will scale proportionally to the number of screen pixels.

.p0;^*Conditional commands\*
.INDEX UILGEN > Conditional compilation
.p0;These may appear anywhere within the file. They control conditional
compilation of sections of the input file, and are modelled on a subset of
the commands used by the preprocessor for the 'C' language. The commands all
begin with the character '_#', and may not be abbreviated. The symbols used
in these commands are defined on the UILGEN command line using the /DEFINE
qualifier, and are always converted to upper case. The conditional commands
may be nested (up to a level of 8). Any UIM file must contain a matched set
of conditional commands, i.e_. an included file may not have _#ELSE or _#ENDIF
commands which match _#IFDEF or _#IFNDEF commands in the outer file.
.lm +10

.p-10;^*_#IFDEF symbol\*
.i-3;#-#the UIM code following (until an _#ELSE or _#ENDIF)
is only processed if the given symbol is one of those defined on the command
line.

.p-10;^*_#IFNDEF symbol\*
.i-3;#-#the UIM code following (until an _#ELSE or _#ENDIF)
is only processed if the given symbol was ^*not\* defined on the
command line.

.p-10;^*_#ELSE\*
.i-3;#-#this command matches the last preceding _#IFDEF or _#IFNDEF.
The UIM code following (until an _#ENDIF)
is only processed if the code before was not being processed (and vice-versa).

.p-10;^*_#ENDIF\*
.i-3;#-#this command matches the last preceding _#IFDEF or _#IFNDEF.
The processing of UIM code following reverts to that in force before the
matching _#IFDEF or _#IFNDEF.

.lm -10

.p0;^*General commands\*
.p0;These may appear anywhere within the file.
.lm +10

.p-10;^*FILE#filename\*
.i-3;#-#the given UIM file is included in the input. This command
may only occur in the initial UIM file, and must not occur in the
middle of the definition of a box. The filename is parsed against
LSL$UIL:---.UIM, or LSL$CDL:---.CDL if the /CDL qualifier is used.

.p-10;^*UIL#"string"\*
.i-3;#-#the string is written to the _.UIL file, and should therefore
be valid UIL. This could be used to include a user-written UIL file,
or to define a value for future use.

.p-10;^*DEFINE#FONT#name#"string"\*
.i-3;#-#allows a user-defined font. The name given may then be used in
FONT commands. The string must be the name of a valid DECwindows font.
This command actually defines the value font__'name' to be the given
font. A font defined in this way may be redefined without rebuilding
the menus by including the resource
.bl
LSLUILMENUS_*name:	string
.bl
in a resource file. LSLUILMENUS is the default application class - it may
be altered by using the /CLASSNAME qualifier on UILMENUS.

.p-10;^*DEFINE#COLOUR#NAME#name##"string"\*
.i-3;#-#allows a user-defined colour. The name given may then be used in
COLOUR commands. The string must be the name of a valid DECwindows colour.
This command actually defines the value color__'name' to be the given
colour. The colour names available may be found by examining the file
SYS$MANAGER:DECW$RGB.COM - just the parts of the name after DECW$RGB__.
(COLOR is a synonym for COLOUR.) A colour defined in this way may be redefined
without rebuilding the menus by including the resource
.bl
LSLUILMENUS_*name:	string
.bl
in a resource file. LSLUILMENUS is the default application class - it may
be altered by using the /CLASSNAME qualifier on UILMENUS.


.tp 6
.p-10;^*COLOUR#BACKGROUND#[name]\*
.i-10;^*COLOUR#FOREGROUND#[name]\*
.i-10;^*COLOUR#HIGHLIGHT##[name]\*
.i-3;#-#specifies the colours to be used for future objects. The name
should have been defined in a DEFINE COLOUR command. The actual colour
name used is color__'name'. COLOR is a synonym for COLOUR, and HILITE
for HIGHLIGHT. If the name is omitted, the default colour is used. The
HIGHLIGHT colour is used when a button is activated.

.p-10;^*FONT#[name]\*
.i-3;#-#specify the font to be used to display 
subsequent informational and button texts. The name should have been
defined by a DEFINE FONT command. If name is omitted, the default font
will be used. The actual name used is font__'name'.
Fonts 0 to 11 are predefined in a header file - these are monospaced fonts
and are included for compatibility with CDL and UISMENUS.
The default is FONT 0 if the /CDL qualifier is used, otherwise the default
font.

.lm -10

.p0;^*Box definition commands\*

.p0;These commands must come at the start of the definition of a box.
The box is defined once all four of SIZE, POSITION, NAME, and PARENT
have been given.
.P0;The default type of 'box' is (in DECwindows terms) a dialog box,
which may contain such sub-menus, buttons, etc as as required. UILGEN presently
supports three other types of 'box' - the file selection box, the prompt box,
and the colour mixing box - if one of these is required, the BOX FILE__SELECT,
BOX PROMPT, or BOX COLOUR__MIX, and any DO command pertaining to it must be
given before the four compulsory commands are completed.
.p0;The BOX NAME and BOX PARENT commands are used to define the structure of
the tree. The  box names so defined are used to establish connections between
boxes and some applications use them to indicate which box is to be made
visible. 

.lm +10
.p-10;^*BOX COLOUR__MIX\*
.i-3;#-#the next box is to be a colour mixing box. It will display an original
colour and a new colour, together with various means of choosing the new
colour, and 5 buttons - OK, APPLY, RESET, CANCEL, and HELP. RESET sets the new
colour to be the original colour again. HELP gives information on how to use
the box. Any action specified after ON in a DO command will be obeyed when the
OK or APPLY buttons are pressed. Any '?' characters in the DO string will be
replaced by a string containing 3 numbers, the red, green, and blue components
of the new colour in the range 0.0 to 1.0. Any commands after OFF will be
obeyed when the CANCEL button is pressed. The box is automatically removed when
OK or CANCEL are pressed, but remains displayed if APPLY is used. In the
absence of ON or OFF, the commands will be obeyed when whichever button is
pressed. The colour mixing box may contain other buttons, labels, etc. as
required.

.p-10;^*BOX DIALOG\*
.i-3;#-#the next box is to be a dialog box. This is the default.

.p-10;^*BOX FILE__SELECT#"file__spec"\*
.i-3;#-#the next box is to be a file selection box. It will display
all files fitting the file-spec (which may include wildcards). Any
action specified after ON in a DO command will be obeyed when a file is
selected (by double-clicking on a filename, or clicking on a file
name and then using the OK button). Alternatively, a filename may
be typed in. Any '?' characters in the DO string will be replaced
by the filename. Any commands after OFF will be obeyed when the
CANCEL button is pressed. In the absence of ON or OFF, the commands
will be obeyed when either button is pressed.
The file-selection box may contain other buttons, labels, etc. as
required.

.p-10;^*BOX PROMPT#"prompt__text"\*
.i-3;#-#the next box is to be a prompt box. It allows the user to enter a text
string. Any action specified after ON in a DO command will be obeyed when the
text is terminated by carriage return, with '?' characters being replaced by
the text. The box includes an OK button (which functions the same as carriage
return), and a CANCEL button which obeys any commands after OFF. In the absence
of ON or OFF, the commands will be obeyed when either button is pressed. The
box is automatically removed from the screen when either button is operated.
The prompt box may contain one other user defined button if required.

.p-10;^*BOX MODAL\*
.i-10;^*BOX MODELESS\*
.i-3;#-#specifies whether the next box is to be modal, or modeless (default).
If a modal box is displayed, then only this box will accept button presses and
keyboard input until the box is removed.

.p-10;^*BOX#NOBORDER\*
.i-3;#-#indicate that the next box is not to have a frame around it.
This means that the box cannot be moved, or pushed behind other windows.
The first box to be defined will always have a frame regardless.

.p-10;^*BOX#POSITION#xpos#ypos\*
.i-3;#-#specify the position of the box.

.p-10;^*BOX#SIZE#xsize#ysize\*
.i-3;#-#specify the size of the box window.

.p-10;^*BOX#NAME#"text"\*
.i-3;#-#give a name to the box that is being 
defined. This name will appear as the title of the box, and is used in
some of the DO commands.

.p-10;^*BOX#PARENT#"text"\*
.i-3;#-#give the name to the box that is this 
box's parent in the tree. Note that if this is a root box,
then the parent name "none" should be given instead. Note that the name
"cdl$none" is interpreted as "none" for compatibility with _.CDL files.

.lm-10
.TP 8
.p0;^*Box contents commands\*
.p0; Commands defining the contents of a box - with certain limitations,
these may be given in any order. Positions are relative to the containing
dialog box. Any items included in a MENU, RADIO__BOX, PULLDOWN__MENU, or
OPTION__MENU will be positioned automatically, and any position arguments
should normally be omitted.
.lm+10
.p-10;^*ADD#LINE#[xstart#ystart#xend#yend]\*
.i-3;#-#add a line to the box.
The line is drawn from a start position to an end position. If the line is part
of a MENU, RADIO__BOX, PULLDOWN__MENU, or OPTION__MENU, then the positions are
not required - the line will be positioned automatically. The line is actually
a 'separator' widget, which restricts it to being either horizontal or
vertical.

.p-10;^*ADD#TEXT#[xoff#yoff]#"text"\*
.i-3;#-#add the specified informational text, in the current font. The text
is displayed using a 'label' widget.

.p-10;^*ADD#ICON#[xoff#yoff]#[name]\*
.i-3;#-#draw an icon at the given position.
If name is given, then icon__'name' is used as the name of the icon.
This should have been defined elsewhere, possibly using the UIL command.
For compatibility with CDL files and UISMENUS, if the name is omitted,
the name taken from an ICON FILE command is used.

.p-10;^*BUTTON#TEXT#[xoff#yoff]#"text"\*
.i-3;#-#create a button, labelled with the specified text.

.p-10;^*BUTTON#ICON#[xoff#yoff]#name\*
.i-3;#-#create a button represented by an icon.
If name is given, then icon__'name' is used as the name of the icon.
This should have been defined elsewhere, possibly using the UIL command.
For compatibility with CDL files and UISMENUS, if the name is omitted,
the name taken from an ICON FILE command is used.

.p-10;^*COMMAND__WINDOW#xoff#yoff#width#lines#"prompt"\*
.i-3;#-#creates a command input window. The width in pixels, number
of command lines displayed, and a prompt are specified. The DO
commands for this widget may use the '?' character in place
of the command input.

.p-10;^*DO#"string"\*
.i-3;#-#gives a list of commands to be obeyed when buttons or other
widgets are activated. The string consists of a series of commands
separated by ';'. For widgets returning a value, the value will
be substituted for any '?' characters. The commands available are listed
above. To get ';', '?', or '"' into a command, duplicate the character.
.br;e.g.#DO "SEND %tol find ?" for a scale widget
.br;or###DO "ON;SEND %select fc 10;OFF;SEND %deselect fc 10" for a toggle button
.br;These same strings of commands may be sent to UILMENUS from an external
source by writing them to the device specified in the /INPUT qualifier.

.p-10;^*END\*
.i-3;#-#terminates the definition of a MENU, RADIO__BOX, PULLDOWN__MENU,
OPTION__MENU, LIST, or the box itself. Any text after the END command is
ignored, so it is permitted to put e.g_. END MENU for clarity.

.p-10;^*LIST#type#xoff#yoff#[width]#visible__items\*
.i-3;#-#creates a list widget within the box.
Only BUTTON TEXT widgets may occur within the list. They will be placed in
order in the list (their positions should not be given). If the width argument
is given, the list will be a fixed width, with a horizontal scroll bar being
added if the items are longer than the width. If omitted, the list will vary in
size to accomodate long items. The type of list may be either SINGLE or
MULTIPLE. In a SINGLE list, only one item may be selected at a time - if
another is selected, the first selected item is deselected. In a MULTIPLE list,
any number of items may be selected, and a selected item may be
deselected by clicking on it again, so it is useful to include ON and OFF
commands in the DO string for the buttons. The list need not contain any items
initially, if the intention is to add them at run time using the UILMENUS
action LIST ADD. The definition of the list is terminated by an END command, or
the end of the file.

.p-10;^*MENU#orientation#xoff#yoff\*
.i-10;^*RADIO__BOX#orientation#xoff#yoff\*
.i-3;#-#creates a menu within the box. The menu is a container for buttons.
Following buttons will be placed in order within the menu (their
positions should not be given). A RADIO__BOX is intended to contain
a series of TOGGLE buttons, only one of which is on at any given time -
when a button is activated, any other button is turned off, and both
obey their command strings. VERTICAL or HORIZONTAL may be given
for orientation. The definition of the menu is terminated by an END
command, or the end of the file.

.p-10;^*MENU#BAR#xoff#yoff\*
.i-3;#-#creates a menu bar within the box. A menu bar is a container for
pulldown menus, which are always arranged horizontally within it.

.p-10;^*OFFSET#xoff#yoff\*
.i-3;#-#specify an offset which is applied to all subsequent positions
in this file.

.p-10;^*OPTION__MENU#[xoff#yoff]#"text"\*
.i-3;#-#creates an option menu labelled with the given text. This
must occur either as a separate item in the box (when a position must be
given), or be in a horizontal
or vertical MENU. Subsequent buttons become
part of the option menu. The option menu will initially display the
name of its first button. The definition of the OPTION__MENU is
terminated by an END command, or the end of the file.

.p-10;^*PULLDOWN__MENU#"text"\*
.i-3;#-#creates a pulldown menu labelled with the given text. This
must occur within a MENU BAR, OPTION__MENU, or another PULLDOWN__MENU.
Subsequent buttons become
part of the pulldown menu. The definition of the PULLDOWN__MENU is
terminated by an END command, or the end of the file.

.p-10;^*SCALE#orientation#xoff#yoff#width#decimal__points#min#max#"title"\*
.i-3;#-#creates a scale widget. The width in pixels (height for a vertical
scale), number of decimal places in the value, minimum and maximum values (real
numbers if required), and a title are specified. The DO commands for this
widget may use the '?' character in place of the value. VERTICAL or HORIZONTAL
may be given for orientation.

.p-10;^*TEXT#xoff#yoff#width#["initial__string"]\*
.i-3;#-#creates a text input widget. The width in pixels, and an optional
initial string are specified. The widget is triggered by pressing the return
key. The DO commands for this widget may use the '?' character in place of the
text input.

.p-10;^*TOGGLE#TEXT#[xoff#yoff]#"text"\*
.i-3;#-#create a toggle button. The button contains a marker to indicate
whether it is currently on or off. The default is off except for the
first button in a RADIO__BOX.

.p-10;^*TOGGLE#ICON#[xoff#yoff]#name\*
.i-3;#-#create a toggle button represented by an icon.
If name is given, then icon__'name' is used as the name of the icon.
This should have been defined elsewhere, possibly using the UIL command.
For compatibility with CDL files and UISMENUS, if the name is omitted,
the name taken from an ICON FILE command is used.The button contains a marker
to indicate whether it is currently on or off. The default is off except for
the first button in a RADIO__BOX.

.p-10;^*WIDGET#NAME#"string"\*
.i-3;#-#gives a name to the next widget to be defined. The name can then
be used in some of the DO commands to identify the widget.

.lm -10
.TP 10
.p0;^*UISMENUS and CDL compatibility commands\*
.p0; The following commands have been superceded by other UILGEN commands
but are available for compatibility with _.CDL files and the UISMENUS utility.
.lm+10

.p-10;^*DEFINE#COLOUR#RGB#name#r#g#b\*
.i-3;#-#allows a user-defined colour given in terms of its red, green, and blue
components (in the range 0.0 to 1.0). The name given may then be used in COLOUR
commands. This command actually defines the value color__'name' to be the given
colour. (COLOR is a synonym for COLOUR.) This command will only work in the
first of a list of _.UID files given to UILMENUS. The DEFINE COLOUR NAME
command is preferred.

.p-10;^*FOREGROUND#r#g#b\&
.i-10;^*BACKGROUND#r#g#b\&
.i-10;^*HILITE#####r#g#b\*
.i-3;#-#These combine the function of a DEFINE COLOUR RGB command and a
COLOUR command, which should be used instead. They use colour names
color__'n', where n is a number incremented for each command.

.p-10;^*WINDOW#POSITION#xpos#ypos\*
.i-3;#-#synonym for BOX POSITION.

.p-10;^*WINDOW#SIZE#xsize#ysize\*
.i-3;#-#synonym for BOX SIZE.

.p-10;^*WINDOW#NOFRAME\*
.i-3;#-#synonym for BOX NOBORDER

.p-10;^*NAME#CONSOLE#"text"\*
.i-3;#-#synonym for BOX NAME.

.p-10;^*NAME#PARENT#"text"\*
.i-3;#-#synonym for BOX PARENT.

.p-10;^*ICON#FILE#"filename"\*
.i-3;#-#specify the name of the file defining an icon. The filename is parsed
against LSL$CDL:---.ICON. This file is converted to LSL$UIL:name.ICON__UIL
which is included in the output _.UIL file.
Subsequent ADD ICON and BUTTON ICON commands without an icon name will use
this icon. This command may be used to convert a UISMENUS _.ICON file to
UIL. Users are expected to design new icons using UIL from scratch.

.p-10;^*ON#BORDER\*
.i-10;^*OFF#BORDER\*
.i-3;#-#these have no effect in UILGEN.

.p-10;^*CHOICE#TEXT#[xoff#yoff]#"text"\*
.i-3;#-#create a toggle button, labelled with the specified text.
The button forms one of a group of at least two where probing a button
will turn it on, and turn all other buttons in the
group off. The buttons turned off will not obey their
DO commands. One button in a group of choices
must always be on and when the box is first invoked this will be the first
button defined in the group. A series of CHOICE commands must be indicated by
a prior GROUP command. 
Similar functionality is now provided by the RADIO__BOX and TOGGLE TEXT
commands.

.p-10;^*CHOICE#ICON#[xoff#yoff]#name\*
.i-3;#-#create a toggle button represented by an icon, otherwise as for
CHOICE TEXT. Similar functionality is now provided by the RADIO__BOX and TOGGLE
ICON commands.

.p-10;^*GROUP\*
.i-3;#-#indicate that the subsequent CHOICE buttons are to be considered as a
group. Additional groups of choices are indicated by subsequent GROUP commands.
A GROUP command must prefix at least one CHOICE commands. Similar functionality
is now provided by the RADIO__BOX command.

.p-10;^*RETURN#CODE#number\*
.i-3;#-#specify the 'return code' for subsequent buttons.
The DO command should now be used to specify actions instead.

.p-10;^*RETURN#TEXT#"text"\*
.i-3;#-#specify the 'return text' for subsequent buttons.
The DO command should now be used to specify actions instead.

.lm -10
.lm -10
.tp 12
.P0
^*--------------------------------------------------------------------------------\*
.HL 1 ^*ICON Files\*

.LM +10
.INDEX UILGEN > ICON files
.P 0;Users requiring to use icons (bitmap pictures) in the ADD ICON, BUTTON
ICON, and TOGGLE ICON commands should define the icon named in these commands
using the UIL language. The definition may be put in a separate file, which may
be included in the UIL file generated by UILGEN using the UILGEN command
'UIL#"include#file#'filename';"'. Alternatively, the entire definition may be
included in the UIL file using a series of UIL commands. Note that in simple
use, single and double quotes are equivalent in UIL (see UIL manual for
details), but double quote must be duplicated if it is to be included in a
UILGEN command string which is already in double quotes.
.P 0;An example of the UIL commands required to define a simple icon
follows:
.nofill
.noflags bold

value
   icon__square : icon (
      "          ",
      " ******** ",
      " *      * ",
      " *      * ",
      " *      * ",
      " *      * ",
      " *      * ",
      " *      * ",
      " ******** ",
      "          "
   );

.flags bold
.fill
.P 0;The name of the icon (as used in the ADD ICON, BUTTON ICON, or TOGGLE ICON
commands) is 'square'. The actual name must be prefixed by 'icon__'. Each
character in the quoted strings represents a pixel on the screen. By default
"#" (space) is background colour, and "_*" is foreground colour. Note that this
icon is only 10 pixels square, which is very small.
.P 0;In order to use other colours, some other UIL commands are required.
The colours used must be defined using the UIL color function - those defined
defined using the UILGEN command DEFINE COLOUR may not be used. The following
example defines a coloured icon:
.nofill

value
   rg : color__table( background color = " ",
                      color("red")     = "r",
                      color("green")   = "g");

   icon__color__square : icon ( color__table = rg,
      "          ",
      " rrrrrrrr ",
      " rggggggr ",
      " rggggggr ",
      " rggggggr ",
      " rggggggr ",
      " rggggggr ",
      " rggggggr ",
      " rrrrrrrr ",
      "          "
   );

.fill
.P 0;"rg" is your chosen name for a color__table. This defines which
characters are to represent which colours. "background color" and "foreground
color" may always be used.
.P 0;To convert a UISMENUS icon file (_.ICON) to the new format (by default
_.ICON__UIL), run UILGEN just giving an ICON FILE command in its input (_.UIM
or _.DAT) file.
.lm -10
.PAGE
.P0
^*--------------------------------------------------------------------------------\*
.HL 1 ^*Examples\*

.LM +10
.INDEX UILMENUS > Examples
.P 0;The following is a simple example of a UIM file for input to UILGEN.
.lm -10
.BL
.noflags accept
.noflags bold
.nofill
.require "LSL$UIL:SIMPLE_EXAMPLE.UIM"
.fill
.flags accept
.flags bold
.page
.fig 30
XXXXXX Replace this page by Figure 1 (Simple Example) XXXXXX
.lm +10
.PAGE
.lm -10
.P0
^*--------------------------------------------------------------------------------\*
.HL 1 ^*Example 2\*

.lm +10
.P 0;The following is a more complex example of a UIM file for input to UILGEN.
.lm -10
.BL
.noflags accept
.noflags bold
.nofill
.require "LSL$UIL:COMPLEX_EXAMPLE.UIM"
.fill
.flags accept
.flags bold
.page
.fig 30
XXXXXX Replace this page by Figure 2 (Complex Example) XXXXXX
.PAGE
.P0
^*--------------------------------------------------------------------------------\*
.HL 1 ^*LITES2 Example\*

.lm +10
.P 0;The following gives some hints on using UILMENUS with LITES2. LITES2
commands are preceded by '_*' in the example.
.P 0;LITES2 is usually started first. Any mailboxes to be used are created
using LITES2 commands, and then UILMENUS is started as a subprocess. e.g.
.bl
.nofill
$ LITES2 ...	! start LITES2
!
! create LSL$LITES2AUX for LITES2 command input
_* CREATE MAILBOX 1
!
! if required, create a mailbox to send commands to UILMENUS
_* CREATE MAILBOX LSL$UILMENUSINPUT
!
! create an abort mailbox (default name LSL$LITES2ABORT)
_* CREATE ABORT__MAILBOX
!
! run UILMENUS (output and abort default to our mailboxes)
_* SPAWN/NOWAIT UILMENUS/INPUT=LSL$UILMENUSINPUT/ABORT MY__UID
!
! if you want to send commands from LITES2 to UILMENUS then...
! open UILMENUS input mailbox as a LITES2 file
_* FILE APPEND 1 LSL$UILMENUSINPUT:
!
! send any required command to UILMENUS e.g. add a box
_* FILE WRITE ADD MY__BOX
.fill
.lm -10
.page
.require "UILGENMSG.RNO"
.page
.require "UILMENUS.RNX"
