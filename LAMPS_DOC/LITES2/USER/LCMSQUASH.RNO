.!** page format
.LEFT MARGIN  0;.RIGHT MARGIN 80;.PAGE SIZE    60,80
.ENABLE BOLDING;.FLAGS BOLD
.KEEP

.!** title page
.FIGURE 14
.CENTRE ;^*Laser-Scan Ltd.\* 
.FIGURE 2
.CENTRE ;^*LITES2\*
.FIGURE 2
.CENTRE ;^*LCMSQUASH User Guide\*

.FOOT
.FLAGS SUBSTITUTE
.NOFILL
Copyright (C) $$year Laser-Scan Ltd
Science Park, Milton Road, Cambridge, England CB4 4FY  tel: +44 (0) 1223 420414

Document "LITES2 - LCMSQUASH User Guide"		Category "USER"

Document Issue 1.0	Sunil Gupta			 2-Jul-1992
Document Issue 1.1	Clarke Brunt			20-Oct-1992
Document Issue 1.2	Paul Hardy			 3-Feb-1993
Document Issue 1.3	Clarke Brunt			 3-Jun-1994
.FILL
.NOFLAGS SUBSTITUTE
.END FOOT

.!* and the title to go at the top of each page
.TITLE LITES2 - LCMSQUASH User Guide
.PAGE


.HL 1 ^*FUNCTION\*

This document describes the LCMSQUASH utility. It is to be read as a supplement
to the LITES2 Reference Manual and the LITES2 User's Guide. 
.P 0
LCMSQUASH is a LITES2 utility to preprocess LCM (LITES command)
files. This reduces the time taken for LITES2 to load the files, and can
also provide a distinction between the 'source code' (the unprocessed file,
which is easily readable) and the 'executable code' (the processed file, which
is much less easily read by humans).

.P 0;LCMSQUASH provides the following functions:
.LIST "o"
.LE ;removal of all comments from LCM files.
.LE ;truncation of LITES2 primary commands to 4 characters.
.LE ;reduction of multiple-white space.
.LE ;compression of multiple commands to fit onto lines of 255 characters or 
less.
.LE ;optional encryption of the output LCM file.
.LE ;optional decompression of LCM files to one command per line.
.LE ;production of a listing file to enable debugging.
.LE ;simple syntax checking.
.LE ;summary of all macro and variable names declared and used.
.LE ;diagnostic warnings.
.END LIST

.HL 1 ^*FORMAT\*
.NO FILL
.LEFT MARGIN +10
$ LCMSQUASH input-file-spec  [output-file-spec]
.BLANK
^*Command qualifiers                          Defaults\*
.INDEX LCMSQUASH>command qualifiers
.BLANK
/[NO]CHECK=QUOTE                        /NOCHECK
.INDEX LCMSQUASH>command qualifiers>/CHECK
/[NO]CODE=integer                       /NOCODE
.INDEX LCMSQUASH>command qualifiers>/CODE
/[NO]COMMENT=string                     /NOCOMMENT
.INDEX LCMSQUASH>command qualifiers>/COMMENT
/[NO]EXPLODE=file                       /NOEXPLODE
.INDEX LCMSQUASH>command qualifiers>/EXPLODE
/[NO]KEY=string                         /NOKEY
.INDEX LCMSQUASH>command qualifiers>/KEY
/[NO]LOG                                /NOLOG
.INDEX LCMSQUASH>command qualifiers>/LOG
/[NO]LIST=file                          /NOLIST
.INDEX LCMSQUASH>command qualifiers>/LIST
/[NO]QUIET                              /NOQUIET
.INDEX LCMSQUASH>command qualifiers>/QUIET

.LEFT MARGIN -10
.BLANK
.TEST PAGE 10
.lm 0
.rm 80

.HL 1 ^*PROMPT\*
.INDEX LCMSQUASH>prompt
.LEFT MARGIN +10
.NO FILL
.NO JUSTIFY
__Input__file:             input-file-spec
__Output__file:            output-file-spec
.LEFT MARGIN -10
.BLANK
.TEST PAGE 10
.lm 0
.rm 80
.HL 1 ^*PARAMETERS\*
.INDEX LCMSQUASH>parameter
.BLANK
.LEFT MARGIN +10
.NO JUSTIFY
.P -10;Input-file-spec
.JUSTIFY
.INDEX LCMSQUASH>and LSL$LITES2CMD:
.INDEX LCMSQUASH>default file-specs>input file
.P -2;-#specifies the LCM file which is processed.
Any part of the file specification which is not supplied will be taken
from the default specification 'LSL$LITES2CMD:.LCM'. The input file is required.

.TEST PAGE 5
.NO JUSTIFY
.P -10;Output-file-spec
.JUSTIFY
.INDEX LCMSQUASH>default file-specs>output file
.P -2;-#specifies the LCM file which is to be output. The default file name
is the name part of the input file, with the extension '.LCM'. By default,
the output file is written to the current directory.
LCMSQUASH attempts to prevent the creation of an output file which is just
a higher version of the input file, since it is usually important that the
original file is kept intact. An error will be generated under these
circumstances, unless explicit version numbers are included on the file names.

.BLANK
.LEFT MARGIN -10
.lm 0
.rm 80
.HL 1 ^*COMMAND QUALIFIERS\*
.INDEX LCMSQUASH>command qualifiers
.LEFT MARGIN +10


.BLANK
.TEST PAGE 8
.NO JUSTIFY 
.P -10;/CHECK=QUOTE
.I -10;/NOCHECK#(default)
.INDEX LCMSQUASH>command qualifiers>/CHECK
.JUSTIFY
.P -2;-#outputs warning messages if a substituted variable does not
have a quote after it. This check is not performed by default, since LITES2
accepts variables without the closing quote.

.BLANK
.TEST PAGE 8
.NO JUSTIFY 
.P -10;/CODE=integer
.I -10;/NOCODE#(default)
.INDEX LCMSQUASH>command qualifiers>/CODE
.JUSTIFY
.P -2;-#specifies an encryption code, which is a small integer allocated
to users by Laser-Scan. The code is written into the first line of the
encrypted output file and identifies the particular encryption to LITES2.

.P -2; This qualifier must be used in conjunction with the /KEY qualifier.

.BLANK
.TEST PAGE 8
.NO JUSTIFY 
.P -10;/COMMENT=string
.I -10;/NOCOMMENT#(default)
.INDEX LCMSQUASH>command qualifiers>/COMMENT
.JUSTIFY
.P -2;-#specifies a comment string which is written into the first line of
the output LCM file following a "!". It may be used, for example, to include
a copyright notice in the output file. If the string contains lower case
letters, or spaces, then it must be enclosed in double quotation marks.
Within double quotes, use two double quotes to represent a single one.

.BLANK
.TEST PAGE 8
.NO JUSTIFY 
.P -10;/EXPLODE=filename
.I -10;/NOEXPLODE#(default)
.INDEX LCMSQUASH>command qualifiers>/EXPLODE
.JUSTIFY
.P -2;-#generates a file with commands taken from the input LCM file, such that 
only one command is on each line.

.P -2; The default file name is the name part of the input file, with the
extension '.EXP'. By default, the explode file is written to the current
directory. The normal output file is still produced in addition to the
explode file. If this is not required, then the null device (NL:) may
be specified as the output.

.BLANK
.TEST PAGE 8
.NO JUSTIFY 
.P -10;/KEY=string
.I -10;/NOKEY#(default)
.INDEX LCMSQUASH>command qualifiers>/KEY
.JUSTIFY
.P -2;-#specifies an encryption key, which is a string chosen by application
developers to go with the encryption code allocated to them by Laser-Scan.
Once chosen, and communicated to Laser-Scan, the same key must always be
used with a particular code. The key string can contain up to 20 characters
in the ASCII range 32-126 (the printable characters). If it contains lower case
letters, or spaces, then it must be enclosed in double quotation marks.
Within double quotes, use two double quotes to represent a single one.

.P -2; This qualifier must be used in conjunction with the /CODE qualifier.

.BLANK
.TEST PAGE 8
.NO JUSTIFY 
.P -10;/LIST=filename
.I -10;/NOLIST#(default)
.INDEX LCMSQUASH>command qualifiers>/LIST
.JUSTIFY
.P -2;-#generates a listing file containing numbered source lines with LCMSQUASH
warning messages placed in context. 

.P 0; The default file name is the name part of the input file, with the
extension '.LIS'. By default, the listing file is written to the current
directory.

.BLANK
.TEST PAGE 8
.NO JUSTIFY 
.P -10;/LOG
.I -10;/NOLOG#(default)
.INDEX LCMSQUASH>command qualifiers>/LOG
.JUSTIFY
.P -2;-#causes the output from LCMSQUASH to include the input source lines
as well as any warning messages.

.BLANK
.TEST PAGE 8
.NO JUSTIFY 
.P -10;/QUIET=filename
.I -10;/NOQUIET#(default)
.INDEX LCMSQUASH>command qualifiers>/QUIET
.JUSTIFY
.P -2;-#suppresses warning messages from being output.

.NOFILL
.PAGE
.LEFT MARGIN 0
.BLANK 3
.lm 0
.rm 80
.HL 1 ^*DESCRIPTION\*
.INDEX LCMSQUASH>description
.JUSTIFY
.FILL
.INDEX pre-processing.

.P 0;LCMSQUASH is an LCM file pre-processing utility.

.P 0;The following pre-processing operations are used:

.LIST "o"


.INDEX LCMSQUASH>available operations
.INDEX LCMSQUASH>available operations>truncation

.LE;All commands which are preceded by a percent symbol % are assumed to be
valid LITES2 primary commands and are truncated to 4 characters in length. These
are guaranteed to be unique within LITES2. Commands not preceded by a "%" are
assumed to be macro calls and are not truncated. 

.INDEX LCMSQUASH>available operations>removal of comments

.LE; The output LCM file contains no comments. Any text after "!" on a line is
removed. For this reason, it is usually desirable to keep the original LCM
files, in addition to the output files from LCMSQUASH.

.INDEX LCMSQUASH>available operations>reduction of white space

.LE; All lines containing only white-space (spaces and TABs) are removed.
White-space at the start or end of a command is removed.

.INDEX LCMSQUASH>available operations>compression
.LE; The truncation, removal of white-space and comments reduces the length of 
LITES2 command constructs. Multiple commands are concatenated with a hash 
"_#" separator so that the resultant line length is less than 256 characters.

.INDEX LCMSQUASH>available operations>encryption

.LE;LCMSQUASH can optionally encrypt LCM files, so that end users cannot
trivially understand or modify them. This facility is accessed using the
/CODE and /KEY qualifiers. Users developing LCM applications who wish to
take advantage of this facility should apply to Laser-Scan to be allocated
one or more encryption codes for their applications. These are small
integers, a register of which will be maintained by Laser-Scan. For each
code, the developer should choose a unique encryption key, which is a
string of up to 20 characters (spaces are allowed). The chosen keys must
be communicated to Laser-Scan. In order for a user to use the encrypted
application, a special LITES2 licence file must be issued to them by
Laser-Scan, which allows LITES2 to decrypt the files.
.P 0
Encrypted LCM files begin with the characters "_#%_#", followed by the
encryption code. The rest of the first line may consist of a comment,
preceded by "!". LCMSQUASH can include such a comment by the use of the
/COMMENT qualifier. The comment part of the first line may be changed
after encryption, but any changes whatsoever to the encrypted lines following
will prevent decryption of the file by LITES2.

.INDEX LCMSQUASH>available operations>syntax

.LE;LCMSQUASH keeps an internal list of all variable and macro names that it
encounters. These are used to generate warnings when names are used before
declaration. A summary of the names that were used and those that were
declared is output at the end of processing. Note that LCM files may
reference other LCM files using the @ command. Names that were not defined in
input LCM file may well have been declared in other referenced LCM files.
LCMSQUASH does not currently process referenced files. This feature
may be added at a later date.
.P 0
LCMSQUASH will only recognise the declaration of a variable or macro if the
DECLARE or MACRO command is preceded by the "%" escape character.

.LE;LCMSQUASH checks for leading and trailing quotes in variable substitutions.
The warning message about the trailing quote being missing is suppressed by
default, since this is still valid LITES2 syntax. LCMSQUASH does not know
whether substitution is currently enabled, nor whether a variable is an array
or not. This could lead to occasional spurious warnings. The output file will
not however be affected.

.INDEX LCMSQUASH>available operations>decompression
.LE; The /EXPLODE qualifier may be used to expand an LCM file (possibly one
already squashed) so that each command is on a separate line.
This essentially converts hash-separators in the input file to <CR>s in the
explode file, which allows squashed files to be presented in a more readable
form. This cannot be used with files which are already encrypted.

.INDEX LCMSQUASH>available operations>summary
.LE; The summary typed at the end of the run displays the variable and macro
names which were declared in the input LCM file, and also any that were used
without being declared. Note that system variables which
are preceded by a dollar "$" character are not included in these lists.

.INDEX LCMSQUASH>available operations>diagnostic warnings
.LE; All warning that are generated by LCMSQUASH are diagnostic. It is up to the
user to decide whether to take and action. This non-corrective approach ensure 
that the context and structure of the input LCM data is maintained in the 
output.

.END LIST

.PAGE
.LEFT MARGIN 0
.HL 1 ^*EXAMPLES\*
.INDEX LCMSQUASH>EXAMPLES
.NO JUSTIFY
.LEFT MARGIN +10

.P 0;In the following LCMSQUASH processing example, LCMSQUASH is being used in 
its default mode to `squash' and report possibly useful information about a
file containing a substantial LITES2 macro.

.LEFT MARGIN -10
.BLANK

.LITERAL
$ LCMSQUASH HERE:XGIS_AP_HAR_ANNO HERE:XGIS_AP_HAR_ANNO_SQUASHED
%LCM-W-WARN, Name not declared: UT_SCREEN_HEIGHT
%LCM-W-WARN, Name not declared: I
%LCM-W-WARN, Name not declared: STRING
%LCM-W-WARN, Name not declared: _REAL
%LCM-W-WARN, Name not declared: W
%LCM-W-WARN, Name not declared: Z
%LCM-W-WARN, Name not declared: _INT
%LSLLIB-W-EOF, end of file
%LCM-I-TXT,  
%LCM-I-TXT, ------------------------------------------------------------------
%LCM-I-TXT,                              DIAGNOSTICS
%LCM-I-TXT, ------------------------------------------------------------------
%LCM-I-TXT, The following variable or macro names were not declared.
%LCM-I-TXT, Some may be primary commands used without a %.
%LCM-I-TXT, If the some of the names are present in the lists following this
%LCM-I-TXT,  one, then the names were used prior to declaration.
			I
			STRING
			UT_SCREEN_HEIGHT
			W
			Z
			_INT
			_REAL
%LCM-I-TXT, ------------------------------------------------------------------
%LCM-I-TXT, The following macro names were defined:
			_HA_ANNOTATION
%LCM-I-TXT, ------------------------------------------------------------------
%LCM-I-TXT, The following variable names were declared:
			HA_FH
			HA_FX
			HA_FY
			HA_H
			HA_I
			HA_J
			HA_JMINX
			HA_JMINY
			HA_L
			HA_LFC
			HA_MAXX
			HA_MAXY
			HA_MINX
			HA_MINY
			HA_TX
			HA_TY
			HA_X
			HA_Y
%LCM-I-TXT, ------------------------------------------------------------------
 ELAPSED:    0 00:00:00.84  CPU: 0:00:00.27  BUFIO: 7  DIRIO: 9  FAULTS: 176 
.END LITERAL

.FILL
.LEFT MARGIN +10

.LEFT MARGIN 0
.REQUIRE "LSL$SOURCE_ROOT:[LITES2.LCMSQUASH.SOURCE]LCMMSG.RNO"

