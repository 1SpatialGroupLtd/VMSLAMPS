.!
.! AUXILIARY INPUT
.! This part of the LITES2 Reference manual talks about
.! using auxiliary input lines
.!
.REQUIRE "REF.HD"
.!
.INDEX Auxiliary Input
.HL 1 ^^^*Auxiliary Input to LITES2\*
LITES2 accepts interactive input from a variety of devices. The devices 
available depend on the hardware that LITES2 is being run on and always
include a terminal and possibly one or more of:
.LIST '*'
.LE; bitpad (attached to the graphics device)
.LE; button box (on a separate serial line)
.LE; digitising table (either on a separate serial line or multiplexed
on the graphics device serial line with a LSL muart) 
.LE; keyboard (attached to the graphics device)
.LE; mouse (attached to the graphics device)
.LE; screen menu
.LE; tracker ball (attached to the graphics device)
.LE; Kern DSR photogrammetric plotter
.END LIST
.P0
In addition facilities are available to accept LITES2 commands from
additional serial devices. These could be additional terminals,
mailboxes or even some other physical device attached by a serial line.
At present there are 4 of these auxiliary input lines available, and
they are accessed by the logical 
names:
.LIST '*'
.LE; LSL$LITES2AUX
.LE; LSL$LITES2AUX__2
.LE; LSL$LITES2AUX__3
.LE; LSL$LITES2AUX__4
.END LIST
.P0
If any of these logical names are set up when LITES2 is activated, then
when interactive input is required, the program will accept LITES2
commands (as ASCII strings of up to 255 characters) from any of these
devices. 
.P0
Reading of interactive input is initiated by the triggering of an event
flag, at which point all the interactive devices are checked to see if
there has been any input. The auxiliary input devices are checked last,
and they are all serviced before any more input is accepted. This means
that no one input device can have exclusive control of LITES2; the input
from the devices is generally interleaved. 
.BR
There are obviously situations where it is necessary for a series of
LITES2 commands to be executed sequentially, with no possibility of
interruption from other devices.  In this case the commands should be
concatenated (with the concatenation character _#) into one line.  If a
series of commands is required that when concatenated would make more
than 255 characters, then a command file must be written, and then this
can be read by using the file reading command @filename. 
