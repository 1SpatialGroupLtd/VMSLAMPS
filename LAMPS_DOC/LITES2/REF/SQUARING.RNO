
.!
.! SQUARING
.! This part of the LITES2 Reference manual talks about
.! squaring algorithms
.!
.REQUIRE "REF.HD"
.INDEX Squaring
.!

.HL 1 ^^^*Squaring within LITES2\*
.P 0
The SQUARE command allows the geometry of features to be constrained so
as to produce a "neat" appearance. LITES2 implements two different
algorithms which are known as "angle squaring" and "OS squaring" 
.BR; This section of the user manual explains in detail how squaring is
achieved and how to use the commands. 

.HL 2 ^*Comparison of Squaring algorithms\*
.P 0
.INDEX Angle squaring
The angle squaring command has only one tolerance (an angle), and is
totally independent of the units or size of either the map (IFF data),
or the sheet. It can however only sensibly cope with features having a
single orientation of corners to be squared. As it has no distance
tolerance, corners can be moved by significant amounts if the feature is
off-square. 
.P 0
.INDEX OS squaring
The OS squaring algorithm was a direct implementation of the D14
algorithm as used in the ICL mainframe DMB system at OS Southampton.
It has been enhanced to include facilities from the algorithm used by
OS in their later programs. These additional facilities are selected by
the ENABLE FIXED command (on by default) and include:
.INDEX ENABLE FIXED
.LIST '*'
.LE;The ability to hold points with specific attributes fixed. These
attributes are specified by the PRIVILEGE ATTRIBUTE command.
.LE;When squaring to external base(s), parts of the feature not
perpendicular or parallel to the base(s) are squared internally
.LE;Redundant points are removed between nearly parallel adjacent lines.
.END LIST
It has several tolerances expressed as sheet mm, but has inbuilt
assumptions about the map units (IFF data). It will only work sensibly
if the IFF units are ground metres, and the map scale is in the range
1:1250 to 1:10000. It uses an iterative approach, and can cope with
multiple squaring orientations. It also has a facility for based
squaring of features to predetermined orientation lines.

.HL 2 ^*Angle Squaring Algorithm\*
.INDEX Angle squaring
.P 0
The angle squaring algorithm is invoked by the SQUARE ANGLE command. It
requires that a linear feature has already been found at a corner vertex
that is to become a right angle. This nominated corner defines the
orientations for parallel and perpendicular for the rest of the feature.
The actions of the algorithm are as follows: 
.LIST
.LE
The feature is scanned for sides which fall within angle tolerance
(given by TOLERANCE DEGREES or TOLERANCE RADIANS of parallel and
perpendicular as defined by the nominated corner. All sides are
classified as Parallel, Perpendicular, or Other. 
.LE
Refined orientations are defined for the orientations of parallel and
perpendicular by taking the mean of the directions all such classified
sides, weighted by length. 
.LE
All sides previously classified as parallel and perpendicular are
rotated about their midpoints to the new 'normal' orientations. 
.LE
All sides are linearly extended/contracted as needed to intersect their
neighbours.
.LE
The modified feature is highlighted and is deposited in place of the
original feature when an END command is given. 
.END LIST

.TP 10
.HL 2 ^*OS Squaring Algorithm\*
.INDEX OS squaring
.P 0
The OS D14 squaring algorithm is invoked by the SQUARE WHOLE or SQUARE
PART commands. Both these commands require that a linear feature has
already been found. The position on the feature by which it was found is
immaterial. The only difference between SQUARE WHOLE and SQUARE PART is
that for SQUARE WHOLE the value of the tolerance parameter SQMT is
ignored and assumed to be infinite.
.BR
The actions of the basic algorithm are as follows: 
.LIST
.LE
The feature is scanned for the longest side not yet processed. This
defines the orientation base for this iteration. Note that for based
squaring this step is skipped and the predetermined baseline defined by
the BASE SQUARE command is used instead. 
.LE
Each side is examined, and if it is an invisible step, or less than the
minimum length tolerance (SQLT), then it is marked as processed and its
orientation is fixed. 
.LE
The feature is scanned and each unprocessed side is classified as
parallel, perpendicular, or other, according to whether its endpoints
would have to be moved more than tolerance SQMT if it were rotated about
its midpoint to the orientation base. 
.LE
When not using an external base, this base orientation is refined by
taking the mean of the orientations of all parallel and perpendicular
classified sides, weighted by length. 
.LE
Each side is examined, and if it has not previously been processed, and
fits the constraints of move tolerance (SQMT), then it is rotated to be
parallel or perpendicular to the base. Any side so moved is marked as
processed. 
.LE
If there remain any sides which have not been processed after this pass,
then loop back to 1 to get a new base orientation and start another
pass. Note that this can only occur on SQUARE PART, as for SQUARE WHOLE
all sides will have been processed on the single pass as SQMT is
infinite. 
.LE
Checks are made for closure of the feature using the tolerance SQCT, and
if necessary, the start and endpoints are forced together.
.LE
All sides are linearly extended/contracted through their mid-point as
needed to intersect their neighbours. If adjacent lines are parallel
(within the parallel tolerance SQPL), then the original point between the
lines is used. (This can alter the calculated orientation of the line). 
.P 0
A warning is given if any vertex is moved by more than the
warning tolerance (SQWT).
.LE
The modified feature is highlighted and is deposited in place of the
original feature when an END command is given. 
.END LIST
In the enhanced squaring algorithm (with ENABLE FIXED) the steps are
modified as follows: 
.LIST '*'
.LE; If squaring to external bases, after all the bases have been used,
the algorithm does loop through step 1
.LE; In step 1, lines that have both end points fixed, are used as
bases before the rest of the unsquared lines in a feature.
.LE; If there are any fixed points in a feature, the orientation
of the base is not refined in step 4
.LE; Between steps 6, and 7, unfixed points that lie between sides
that are within the parallel tolerance (SQPL) are removed from the
feature.
.LE; In step 7, if an unfixed point is forced onto a fixed one, the
former inherits the attributes of the latter.
.LE; In step 8, the sides are only extended through their mid-points
if neither of their end points are fixed, otherwise they are extended
through their fixed points.
.NOTE
This forcing of sides through fixed points may cause points to be
finally moved by more than the movement tolerance SQMT, which is only
used to select the sides to be squared.
.P 0
More significant movements of points can occur when the opening
and closing sides of a feature are parallel. In this case the last
point (and perhaps others) will be removed, and the first point may
be moved a long way in the direction of the closing side, to close
the feature.
.END NOTE
.END LIST
.TP 15
.HL 2 ^*Controlling Squaring\*
.P 0
Default settings of things that control squaring may need to be 
altered. These are:-
.NOFILL

TOLERANCE DEGREES real 	- Angle squaring tolerance in degrees
TOLERANCE RADIANS real	- Angle squaring tolerance in radians
TOLERANCE SQDEF 	- restore to default setting all OS SQxx parameters
TOLERANCE SBMT  real	- as SQMT but for based squaring
TOLERANCE SBLT  real	- as SQLT but for based squaring
TOLERANCE SQBT  real	- length of base must be longer than this distance (mm)
TOLERANCE SQCT  real	- distance (mm) to be used when comparing the end
                          points of a feature for closure
TOLERANCE SQMT  real	- distance (mm) to be used when deciding if a
                          side is to be included in this squaring pass.
                          It is the maximum lateral distance a point
                          might be expected to move
TOLERANCE SQLT  real	- minimum length of line to be moved (mm)
TOLERANCE SQPL  real	- angle (degrees) to be used in OS squaring
                          to test if two sides are parallel
TOLERANCE SQWT  real	- warning issued when point moved more than this (mm)
.FILL
