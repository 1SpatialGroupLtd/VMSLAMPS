.!
.! COMMANDS.RNO
.! This part of the LITES2 Reference manual talks about
.! each command in detail
.!

.REQUIRE "REF.HD"
.KEEP
.HL 1 ^^^*>Commands\*
.P 0
Each command of LITES2 is described below, grouped approximately by
function. The classifications used are; initialisation, option, command
handling, general, identification, construction, constraint,
positioning, editing, joining, text and symbol, attribute, ancillary
coding, interrogation, windowing, exiting, and miscellaneous. Use the
index to locate the description of a particular command. 
.P 0
The primary commands of LITES2 in alphabetic order are as follows.
.INDEX Primary command
.P 0
.NOJUST
ABANDON#### ABORT###### ABSOLUTE### ADD######## AFTER###### ALIGN###### 
ALTER###### ANCILLARY## AND######## ANNOTATION# ARC######## ASK######## 
BASE####### BEND####### BRIDGE##### 
CANCEL##### CHANGE##### CIRCLE##### CLIP####### CLOSE###### COLLAPSE### 
CONTINUE### COPY####### CREATE##### CURVE###### 
DEBUG###### DECLARE#### DELETE##### DEPOSIT#### DESCRIBE### DESELECT### 
DISABLE#### DISPLAY#### DISTANCE### DRAW####### DUMP####### 
EDGEMATCH## EDIT####### ENABLE##### END######## ENDMACRO### EXAMINE#### 
EXIT####### EXTEND#####
FEATURE#### FIDUCIAL### FILE####### FILTER##### FIND####### FIRST###### 
FOLLOW##### FORCE###### FRACTION### FREE####### FRT########
GEOGRAPHICAL########### GEOMETRY### GET######## 
HELP####### 
IFF######## IMAGE###### INCLUDE#### INQUIRE#### INSERT##### INSITU#####
INTERPOLATE INVISIBLE## 
JFALSE##### JOIN####### JTRUE###### JUMP#######
LABEL###### LARGER##### LAST####### LATLONG#### LET######## LOCATE#####
LOOP#######
MACRO###### MAPS####### MARGIN##### MATCH###### MEND####### MENU#######
MERGE###### MESSAGE#### MIDDLE##### MODIFY##### MOVE####### 
NEXT####### NULL####### 
OFFSET##### ON######### OPERATION## OR######### ORIENT##### OSSETUP####
OVERLAY####
PARAGRAPH## PICTURE#### PING####### PLOT####### POLARC##### POLYGON####
POINT###### POSITION### PREVIOUS### PRIORITY### PRIVILEGE## PROJECTION#
PROMPT##### PROPAGATE## PTOLERANCE# PUCK####### PUT########
QUIT#######
RANGE###### RASPBERRY## READONLY### RECOVER#### RECTANGLE## REFRESH####
REGION##### REMOVE##### RENAME##### REPEAT##### REPLACE#### RESPOND####
REVERSE#### ROTATE##### ROUTINE#### 
SAVE####### SCALE###### SCROLL##### SEARCH##### SECTOR##### SELECT##### 
SET######## SETUP###### SHEET###### SHOW####### SMALLER#### SORT#######
SPAWN###### SPLIT###### SQUARE##### SRI######## START###### STRETCH####
SUBSTITUTE# SUPPRESS### 
TAKE####### TEST####### TEXT####### THIS####### TIE######## TIME####### 
TOGGLE##### TOLERANCE## TRACK###### TRAIL###### TRANSFORM## TRI######## 
TURN####### 
UNITS###### UNSET###### USER####### 
VERIFY##### VIEW####### 
WAIT####### WARP####### WHOLE###### WINDOW##### WORKSTATION WRITE######
ZOOM####### 
.JUST
.SUBTITLE Initialisation Commands
.PAGE
.HL 2 ^^^*Initialisation Commands\*
.INDEX Initialisation Commands

.HL 3 ^^^*>FRT\*
.FILL
Specifies FRT file name and causes it to be read in.
An FRT file contains a Feature Representation Table which tells the
program how to draw features according to their Feature Codes (FCs).
Default filename is LSL$FRT:---.FRT;0
.P 0
If used in READY state to read a new FRT, then great care should be
taken that the feature codes in the file are compatible with any maps
which are in use at the time. This means that all the feature codes
are present, and any changes of graphical type are to a similar type. It
is reasonable to change between line, curve, symbol string, and area, and also
from one type of symbol to another. Note that LITES2's spatial index for
a feature is not recalculated, so for instance if a symbol or text is changed to
one of a different size, then attempts to find it by a point on its bounding
box may fail.
.P 0
If the new FRT file has missing codes, or codes which have graphical types
inconsistent with the old ones (e_.g_. text instead of line), then LITES2 may
fail and enter its "collapse" routine when these feature codes are used.
.NOFILL

Format:  FRT  filename

eg       FRT DR1:[LSL.FRT]TESTCARD
or       FRT OS

Valid in states  INITIAL READY
.HL 3 ^^^*>SRI\*
.FILL
Specifies SRI file name.
An SRI (Symbol Representation IFF) file holds the shapes of symbols.
Default filename is the FRT filename (qv) with .SRI substituted
for .FRT
.P 0
If used in READY state to read a new SRI, then great care should be
taken that the symbols in the file are compatible with those in any
maps which are in use at the time.
.NOFILL

Format:  SRI  filename

eg       SRI DR1:[LSL.FRT]TESTCARD
or       SRI OS

Valid in states  INITIAL READY
.HL 3 ^^^*>TRI\*
.FILL
Specifies TRI file name.
A TRI (Text Representation IFF) file holds the shapes of characters.
Default filename is the FRT filename (qv) with .TRI substituted
for .FRT
.P 0
If used in READY state to read a new TRI, then great care should be
taken that the characters in the file are compatible with the text
features in any maps which are in use at the time.
.NOFILL

Format:  TRI  filename

eg       TRI DR1:[LSL.FRT]TESTCARD
or       TRI OS

Valid in states  INITIAL READY
.HL 3 ^^^*>MAPS\*
.FILL
Specify number of IFF files to be read in, or the number of IFF files
that can be open at once.
.NOFILL

Format:  MAPS [subcommand] integer

Valid in state  INITIAL
.LIST '*'
.LE ;^^^*>MAPS [IN]\*
.FILL
Allows a number of IFF files to be specified in INITIAL state.
Default is 1 so command is only needed if more than one map is
to be read using IFF, READONLY, or INSITU commands.
.BR
Note that only maps specified in INITIAL state can be set up on
a digitising table.
.BR
The command MAPS 0 may be used, provided that at least one image file
has been specified using IMAGE commands, to cause LITES2 to move into
READY state without any IFF files. The image files can then be
displayed as required.
.NO FILL

Format:  MAPS [IN]  integer

eg       MAPS 4
or       MAPS IN 4

.LE ;^^^*>MAPS OPEN\*
.FILL
Specifies number of IFF files that LITES2 can keep open at once when
multiple maps are being used.
.BR
LITES2 opens and closes IFF files as they are accessed, and if dealing
with a large number of files (eg when using LITES2 in a "continuous
mapping" mode) it may be advantageous to allow more than a maximum of 3
(the default) to be open at once.
.BR
Users should note that there is a limit to the number of files (of all
kinds) that they can have open at once. As the MAPS OPEN command only
takes effect when LITES2 accesses files (after they have been read in)
unrecoverable errors can occur if this number of open files is exceeded
at this stage.
.BL
Note that it is NOT necessary to allow LITES2 to open all the IFF
files it is accessing at once. Unless the MAPS OPEN command shows an
obvious performance improvement, it is recommended that it should not be
used.
.NOFILL

Format:  MAPS OPEN  integer
.END LIST
.HL 3 ^^^*>IFF\*
.FILL
Specifies name of IFF file to be edited.
Use READONLY command (qv) if file is not to be amended.
The IFF file will be allocated the lowest available map number.
Default filename is LSL$IF:---.IFF;0
.NOFILL

Format:  IFF  filename

eg       IFF DU3:[LSL.IFF]TESTCARD
or       IFF J5012

Valid in states  INITIAL READY
.HL 3 ^^^*>INSITU\*
.FILL
Specifies IFF file to be edited in situ.
Not recommended for normal use as original data can be lost if
the session is aborted for any reason.
EXIT, DUMP, and QUIT commands all have the same effect: the edits are
still preserved.
See IFF command for syntax.
.NOFILL

Format:  INSITU  filename

Valid in states  INITIAL READY
.HL 3 ^^^*>READONLY\*
.FILL
Specifies IFF file to be read in and inspected without amendment. A subset
of the file can still be written out using SELECT and WRITE commands, and
features in the map can be copied to another (not read-only) file.
.BR
See IFF command for syntax, and for amending files.
.NOFILL

Format:  READONLY  filename

Valid in states  INITIAL READY
.HL 3 ^^^*>MENU\*
.FILL
Specifies the dimensions and name of a menu.
Menu names must consist of up to 16 alphabetic characters (including
underline).
.BR 
This information is used to define the shape and size of the menu,
and also the reserved macro names which are used to program the menu.
.BR
The operator will be prompted to digitise the corners of the menu
when all the IFF files to be read have been specified, or if in READY
state, then when a SETUP AGAIN command is given.
.NOFILL

Format:  MENU  x y name

eg       MENU 9 14 CMDMEN

Valid in states  INITIAL READY
.HL 3 ^^^*>PUCK\*
.FILL
Specifies device number, number of buttons or boxes and name of a
digitising puck, screen menu, function buttons or mouse (or tracker
ball). Puck names must consist of up to 16 alphabetic characters (including
underline). 
.BR
This information is used to define the reserved macro names which are
used to program the puck buttons using the MACRO command (qv). 
.BR
A puck can only be defined once in any run of LITES2
.BL
Device numbers are 0 for keyboard function buttons, 1 for screen, 2 for
bitpad, 3 for the digitising table, 4 for tracker ball or mouse, 5 for
separate function buttons, and 6 for a stereo digitising instrument.
Other numbers may be available in some LITES2 implementations - see the
appropriate Workstation Guide for details. Device numbers with no
corresponding physical device may be used, but in this case the puck
macros may only be used as normal commands - they will never be
generated automatically by the interactive controls.
.BL
The devices are initialised using the appropriate ENABLE command (qv),
except for the keyboard function buttons which are always enabled.
.NOFILL

Format:  PUCK  devno buttons name

eg       PUCK 3 16 ALTEKPUCK

Valid in states  INITIAL READY
.HL 3 ^^^*>TRACK\*
.FILL
Specifies the device number for a tracking area to be set up on a digitising
surface.
.BR
See the PUCK command for information on device numbers.
.NOFILL

Format:  TRACK  integer

eg       TRACK  2

Valid in states  INITIAL READY
.HL 3 ^^^*>DESCRIBE\*
.FILL
Describe certain entities to allow them to be displayed.
.NOFILL

Format:  DESCRIBE subcommand

Valid in states  INITIAL READY
.LIST '*'
.LE ;^^^*>DESCRIBE MACRO\*
.FILL
Describe the annotation for a macro.
This description is used to annotate screen menu boxes when they are
available, and any macro so described will have the annotation output by
the SHOW MACRO and SHOW MENU commands (qv).
.NOFILL

Format:  DESCRIBE MACRO macroname description

eg       DESCRIBE MACRO SCREEN7 "Zoom 3"
.LE ;^^^*>DESCRIBE SCREENMENU\*
.FILL
Describe the layout for a screen menu (when available).
This command only has any effect if the hardware allows screen menus.
The screen menu must have previously defined as a PUCK on line 1 (the  
screen).
.P 0
The arguments give:
.LIST
.LE;the number of columns in the menu
.LE;the number of rows in the menu
.LE;the location of the menu with respect to the locating point
(in the range 0 - 8, as for text justification)
.LE;the x size of the menu (in mm on the screen or as a fraction of the
screen if in the range 0.0 to 1.0)
.LE;the y size of the menu (in mm on the screen or as a fraction of the
screen if in the range 0.0 to 1.0)
.LE;the x position of the locating point of the menu (as a fraction
between 0.0 and 1.0 of the X extent of the screen)
.LE;the y position of the locating point of the menu (as a fraction
between 0.0 and 1.0 of the Y extent of the screen)
.LE;the name of the menu
.LE;the label to be written into the top of the menu when it is
displayed
.END LIST
.P 0
The menu is displayed on the screen by the ENABLE SCREENMENU command
(qv).
.NOFILL

Format:  DESCRIBE SCREENMENU integer integer integer real real real
                             real menuname label

eg   DESCRIBE SCREENMENU 2 16 6 50.0 100.0 1.0 0.0 screen Our menu
or   DESCRIBE SCREENMENU 2 16 6 0.15  0.3  1.0 0.0 screen Our menu

.FILL
This command describes a screen menu that is 2 columns by 16  rows, 50.0 mm
wide and 100mm long (or in the second case 0.15 times the screen width by 0.3
times the screen height), located at the bottom right of the screen, that had
previously been defined by a PUCK command to be called SCREEN.  It will have
the header "Our menu".

.END LIST
.HL 3 ^^^*>SCALE\*
.FILL
Specifies drawing scale to be used for texts, symbols etc. As these are
specified in the FRT in sheet mm, a correspondence between IFF file
units and sheet mm must be specified somehow.
.P 0
The default action is to take the SHEET scale from the IFF Map
Descriptor (MD) entry. If this is unset, or DISABLE DESCRIPTOR is used,
then a scale from the IFF Map Header (MH) entry is used. If this is also
unset, or if DISABLE EXTERNAL is used, then SCALE FACTOR 1 is assumed. 
.P 0
If the IFF units are related to the map sheet (eg inches, table units
etc) then SCALE FACTOR should be used to relate them to sheet mm.
.P 0
If the IFF units are related to the ground (eg map projection 
coordinates)  SCALE IFF should be used to relate these units to ground
mm (the default is SCALE IFF 1000 - ie IFF units are metres) and
SCALE SHEET relates ground mm to map sheet mm.
.P 0
If the nature of the IFF units is unknown, SCALE AUTO will produce
a scale factor such that 1mm on the screen represents 1mm on the map
.P 0
If the SCALE SHEET command has been given, but it is subsequently
required to revert to the default action of taking the scale from the
map header or map descriptor, this may be achieved by giving a SCALE
FACTOR or SCALE AUTO command, followed by an appropriate SCALE IFF
command. 
.NOFILL

Format:  SCALE  subcommand

Valid in state  INITIAL
.LIST '*'
.LE ;^^^*>SCALE AUTO\*
.FILL
Automatic scaling with whole sheet equal to whole screen.
.NOFILL

Format:  SCALE AUTO
.LE ;^^^*>SCALE FACTOR\*
.FILL
Number of sheet mm represented by one IFF file unit.
.NOFILL

Format:  SCALE FACTOR  real
.LE ;^^^*>SCALE IFF\*
.FILL
Number of ground mm represented by one IFF file unit.
.NOFILL

Format:  SCALE IFF  real
.LE ;^^^*>SCALE SHEET\*
.FILL
Number of ground units represented by one sheet unit. (eg 50000 for a
1:50000 sheet)
.NOFILL

Format:  SCALE SHEET  real
.END LIST

.HL 3 ^^^*>FIDUCIAL\*
.FILL
Defines which features are fiducial features (grid, tick marks etc)
and which should not be taken into account when calculating FSNs for new
features.
.NOFILL

Format:  FIDUCIAL  subcommand

Valid in state  INITIAL
.LIST '*'
.LE ;^^^*>FIDUCIAL LAYERS\*
.FILL
All features in these layers are ignored when calculating FSNs for new
features. The default is layer 0.
.BL
To add to the current list of fiducial layers, specify the layers in the
range argument.
.BL                                    
If no argument is given, all the existing layers are removed from the
list (including layer 0, the default).
.NOFILL

Format:  FIDUCIAL LAYERS  [range]

eg       FIDUCIAL LAYERS 11-12,32
.END LIST

.HL 3 ^^^*>SETUP\*
.FILL
Specifies type of digitising table setup.
.BL
Maps can be set up on the table using several procedures to determine
the position of the control points of the map on the table. The control
points of the map are taken from the right hand side of the CP entry in
the IFF file. 
.BL
Having determined the position of the control points, several different
transformations can be used to relate any point digitised on the table
to the map coordinate system.
.BL
By default, all the maps specified while in INITIAL state are set up
on the table when the workstation is initialised (on going from INITIAL
state to READY state) or after a SETUP AGAIN command.  The commands
SETUP CANCEL and SETUP MAP allow a selection of the maps that have been
read in to be set up. SETUP INITIAL returns to the default action
outlined above.
.BL
There is a limit of 9 maps that can be set up at any one time.
.NOFILL

Format:  SETUP  subcommand

Valid in states  INITIAL READY
.LIST '*'
.LE ;^^^*>SETUP AGAIN\*
.FILL
Set up maps and menus on table again.
.NOFILL

Format:  SETUP AGAIN
.LE ;^^^*>SETUP CANCEL\*
.FILL
Cancels all the maps currently on the list to be set up, either when the
workstation is initialised or after a SETUP AGAIN command. After this
command has been given, only maps specified with a SETUP MAP command are
put on this list.
.NOFILL

Format:  SETUP CANCEL
.LE ;^^^*>SETUP EDGE\*
.FILL
This setup uses points digitised along the neat edges of the map sheet
to determine where the control points lie.
.BR
For this setup the right hand side of the CP entry in the IFF file must
represent a true rectangle.
.P 0
The operator is requested to digitise points along each map edge in turn.
The number of points to be digitised on each edge can be set by the
PTOLERANCE EDGESETUP command.
.P 0
The digitised points are used to define 4 straight lines, using a least
squares regression, and if the Root Mean Square (RMS) of the residuals
for any line is greater than a limit (that can be set by the PTOLERANCE
EDGESETUP command) then the operator is required to digitise points
along that edge again.
.P 0
The 4 lines are then used to calculate the corners of the map. Having
done this it is possible to check if the digitised points are well
enough distributed along the edges. This is done using the concept of
an "ideal gap" for each edge. This is the gap that would be left
between points if they were evenly distributed along the edge. Points
must be greater than a minimum factor of this gap apart, and less than
a maximum factor of this gap apart. These factors can be set by the
PTOLERANCE EDGESETUP command. If the points on any edge do not conform
to this spacing, the operator is required to redigitise points
along that edge again.
.P 0
Several sets of observations can be made, the number being set by the
PTOLERANCE EDGESETUP command. In this case the maximum range of the
positions of the derived corner points at any corner must not exceed
a specified tolerance, and the sum of the ranges must also not
exceed a specified tolerance. These tolerances are given in the
PTOLERANCE EDGESETUP command. If either of these criteria are not
met, then the operator is requested to reobserve sets, until there
are the required number of sets that fulfil the criteria. Where
there are more than one acceptable group of sets, the group that
gives the minimum sum of the ranges is accepted.
.P 0
The mean of the accepted sets of map corners is used as the values
for the transformation.
.NOFILL

Format:  SETUP EDGE
.LE ;^^^*>SETUP FOUR\*
.FILL
4-point setup (default).
.BR
Corners are requested in the order NW, SW, SE, NE.
.NOFILL

Format:  SETUP FOUR
.LE ;^^^*>SETUP INITIAL\*
.FILL
Cancels the effect of SETUP CANCEL, so that maps specified while in
INITIAL state will be added to the list of maps to be set up on the
table at the appropriate time.
.NOFILL

Format:  SETUP INITIAL
.LE ;^^^*>SETUP MAP\*
Add the specified map to the list of maps that will be set up on the
table at the appropriate time.
.FILL
.NOFILL

Format:  SETUP MAP n
.LE ;^^^*>SETUP NONE\*
.FILL
No setup i.e. no document on table.
.NOFILL

Format:  SETUP NONE
.LE ;^^^*>SETUP OSMULTI\*
.FILL
OS multiple point or piecemeal setup
.P 0
For this setup the right hand side of the CP entry in the IFF file must
represent a true rectangle.
.P 0
The map is divided into boxes, and the corner of each box is digitised
on the table. Each point is digitised several times, and a mean taken.
Observations that fall outside a predefined tolerance must be repeated.
The number of boxes, number of repetitions and acceptance criteria are
set by the OSSETUP command. 
.P 0
Grid intersections are requested from the SW corner, going E.
.P 0
A transformation is set up for the whole map, and also one for each
individual box. When a point is digitised on the table then the whole 
map transformation is used to determine which box the point falls in, 
and it is the transformation for this box that is used to determine the 
coordinates of the digitised point in the map coordinate system
.NOFILL

Format:  SETUP OSMULTI
.LE ;^^^*>SETUP TABLE__COUNT\*
.FILL
Used to specify the size of the counts returned by the digitising
table in mm. The default value is 0.02 mm, the setting Laser-Scan
recommend for ALTEK digitising tables.
.NOFILL

Format:  SETUP TABLE__COUNT real
.LE ;^^^*>SETUP TRANSFORM\*
.FILL
Determines the type of transformation used to relate table coordinates 
(x,y) to map coordinates (X,Y). 
.P 0
Where the transformation is overdetermined, a least squares solution is
employed to determine the best fit and  there will be residuals left at
the control points. A warning is given if the maximum residual is
greater than RESID__WARN times the range of the map, and the
transformation will not be accepted if the maximum residual is greater
than RESID__LIMIT of the range of the map. RESID__WARN and RESID__LIMIT
are set by the PTOLERANCE RESIDUAL command (qv).
.P 0
These residuals can be a result of observational errors (which the least
squares solution should deal with sensibly). They can also occur when
the control points on the source document do not define the same shape
as the control points in the IFF file, perhaps because of paper
distortion. (Note that in this case none of the transformations will
solve the problem with any degree of certainty).
.NOFILL

Format:  SETUP TRANSFORM type

         where type = AFFINE (default)
                    = EXTENDED
                    = ORTHOGONAL
                    = PROJECTIVE

.LIST 'o'
.FILL
.LE;Affine
.LM +9
.I -6;This transformation is of the form
.BR;X = a0 + a1_*x + a2_*y
.BR;Y = b0 + b1_*x + b2_*y
.P 0
It corrects for scaling, rotation, shearing  and
translation. Shapes may be altered, but in a predictable
way (eg a square may become a parallelogram).
It only requires three points to define it, so there will
be residuals left at the control points. 
.P 0
This is the default transformation.
.LM -9
.LE;Extended
.LM +9
.I -6;This transformation is of the form
.BR;X = a0 + a1_*x + a2_*y + a3_*x_*y
.BR;Y = b0 + b1_*x + b2_*y + b3_*x_*y
.P 0
It will force the 4 control points to fit (so there is
no checking carried out), but it is not obvious how other
points in the map sheet will be distorted.
This transformation is used by some other Laser-Scan
programs, for example LASERAID.
.LM -9
.LE;Orthogonal - sometimes known as the HELMERT transformation
.LM +9
.I -6;This is of the form
.BR;X = a0 + a1_*x - a2_*y
.BR;Y = a3 + a2_*x + a1_*y
.P 0
This transformation corrects for scaling, rotation and 
translation. Shapes are maintained. It only requires two
points to define it, so there will be residuals left at
the control points.
.LM -9
.LE;Projective
.LM +9
.I -6;This is of the form
.BR;X = (a0_*x + a1_*y + a2) / (a6_*x + a7_*y +1)
.BR;Y = (a3_*x + a4_*y + a5) / (a6_*x + a7_*y +1)
.P 0
This transformation uses a projective algorithm to relate
table coordinates to map coordinates. It forces the 4
control points to fit (so there is no checking carried
out). This transformation is often used with the EDGE
setup procedure.
.LM -9
.END LIST
.NO FILL
.LE ;^^^*>SETUP TWO\*
.FILL
2-point setup (SW and NE corners).
This is a fast setup. It has the effect of forcing the use of the 
orthogonal transformation (with no checking)
.NOFILL

Format:  SETUP TWO
.END LIST
.HL 3 ^^^*>OSSETUP\*
.FILL
This command has been superceded by the PTOLERANCE OSSETUP command.
When used in conjunction with the SETUP TABLE__COUNTS command, then
this command must be given after the SETUP TABLE__COUNTS command.
.P 0
Overrides the default settings for doing a multiple point setup.
It defines the number of boxes the map is to be split into along
with the number of observations required at each point, the number
of observations at each point that must fall within the tolerance
of the mean, and that tolerance.
.NOFILL

Format:  OSSETUP fulx fuly repeat numok tolerance

where fulx      is the number of boxes in the X direction (integer)
      fuly      is the number of boxes in the Y direction (integer)
      repeat    number of observations of each point      (integer)
      numok     number that must be within tolerance      (integer)
      tolerance tolerance in table units                  (real)

The defaults are: 5  5  4  2  19.05

Valid in state  INITIAL (privileged command; 
                         only valid in initialisation file)
.HL 3 ^^^*>AFTER\*
.FILL
Defines a command (possibly a macro or an @file command) which will be 
obeyed immediately after some definable event.
.BR

.NOFILL

Format:  AFTER  subcommand

Valid in states  INITIAL READY
.LIST '*'
.LE ;^^^*>AFTER ERROR\*
.FILL
Defines a command which will be obeyed after an error has caused
LITES2 to return to interactive input, while executing a macro
or obeying a command read from a command file.
.BL
If the argument is omitted, then any existing command will be removed, and 
no extra actions will be taken after an error occurs.
.BL
The current command that is set up can be shown with the SHOW AFTER 
command.
.NOFILL

Format:  AFTER ERROR [command]

eg       AFTER ERROR CLEAR__UP
.LE ;^^^*>AFTER INPUT\*
.FILL
Defines a command which will be obeyed after the last map is read in,
just after LITES2 enters READY state from INITIAL state. If there are
any errors during input (such as "feature code not found"), then the
command will only be obeyed if ENABLE CONTINUE is in force.
The is useful for commands such as WORKSTATION COLOUR which are not
valid in INITIAL state.
.BL
If the argument is omitted, then any existing command will be removed, and 
no extra actions will be taken after reading the maps.
.BL
The current command that is set up can be shown with the SHOW AFTER 
command.
.NOFILL

Format:  AFTER INPUT [command]

eg       AFTER INPUT @SET__OPERATION.LCM
.END LIST
.SUBTITLE Option Commands
.PAGE
.HL 2 ^^^*Option Commands\*
.INDEX Option Commands
.HL 3 ^^^*>ENABLE\*
.FILL
Activates specified optional facilities.
Use DISABLE (qv) to deactivate facilities.
.NOFILL

Format:  ENABLE  subcommand

Valid in all states (except where specified)
.LIST '*'
.LE ;^^^*>ENABLE AND\*
.FILL
Use a logical AND of whatever regions have been selected.
.BR
(ie to be considered, a feature must be in all the selected regions)
The default setting is DISABLE AND, when a logical OR of the selected
regions is carried out.
.BR
(ie to be considered, a feature must be in at least one of the selected
regions) 
.NOTE
If any one region has more than one area selected (eg INREGION and
CUTREGION) and ENABLE AND has been given, no features are selected
because the three areas of a region (INREGION, CUTREGION and OUTREGION)
define mutually exclusive features.
.END NOTE
.NOFILL

Format:  ENABLE AND
.LE ;^^^*>ENABLE APPEND\*
.FILL
When writing a edge matching problem file, append to existing file (if
one exists). If disabled (default) an existing file is overwritten by
the new information.
.NOFILL

Format:  ENABLE APPEND
.LE ;^^^*>ENABLE BALL\*
.FILL
Tracker ball (or mouse) to be used to control the cursor.
.NOFILL

Format:  ENABLE BALL
.LE ;^^^*>ENABLE BELL\*
.FILL
Audible warning when "moan" messages are output.

.NOFILL

Format:  ENABLE BELL
.LE ;^^^*>ENABLE BIG\*
.FILL
Use a big cursor (default is small cursor).
.NOFILL

Format:  ENABLE BIG
.LE ;^^^*>ENABLE BITPAD\*
.FILL
Bitpad to be used.
.NOFILL

Format:  ENABLE BITPAD

Valid in state  INITIAL
.LE ;^^^*>ENABLE BLANK\*
.FILL
Blank out the data behind texts with the specified colour.
This command is only effective on hardware with a raster display and
affects both text features and text in annotation.
.BL
The size of the area blanked out is controlled by the TOLERANCE EXPAND
command.
.BL
The default colour is 0 (background). If another colour is specified
then it becomes the default. The current blanking colour is shown with
the SHOW ANNOTATION command. This default can be overridden in any
particular overlay by the OVERLAY BLANK command.
.NOFILL

Format:  ENABLE BLANK [colour]
.LE ;^^^*>ENABLE BLINK\*
.FILL
Blink the cursor (default is not to blink).
.NOFILL

Format:  ENABLE BLINK
.LE ;^^^*>ENABLE BOX\*
.FILL
Draw text features as their bounding box, rather than as characters.
This may speed up the display of map data.
.NOFILL

Format:  ENABLE BOX
.LE ;^^^*>ENABLE BRIEF\*
.FILL
Only commands actually executed are written to the journal file
(default).
.BR
If disabled, then other commands which change the flow of
control, such as JUMP, macro names, @filename, are also journalled, but
are preceded by the comment character '!'. 
.NOFILL

Format:  ENABLE BRIEF
.LE ;^^^*>ENABLE BUTTON\*
.FILL
Use function buttons.
.BR
Function buttons are not supported on all hardware.  See hardware
dependent reference manual.
.BR
The buttons are defined using the PUCK command on line 5.
.NOFILL

Format:  ENABLE BUTTON
.LE ;^^^*>ENABLE CHECKS\*
.FILL
When defining macros and user variables, check that the name does not
already exist.
.BL
If CHECKS are disabled, the user is allowed to multiply define macros
and variables, but every time the user defined macro table and variable
table is accessed then a warning message is output (even if the multiply
defined entity is not being accessed). If a multiply defined entity is
accessed its value is undefined.
.BL
The purpose of this command is to speed up reading large, proven
initialisation files in production environments by disabling checks
while they are being read. To get the maximum benefit the following
guidelines should be followed:
.LIST
.LE;All primitive LITES2 commands should be preceded by a "_%"
.LE;Initialisation of variables (with LET commands) should be grouped
together at the end of the initialisation after all the variables have
been declared.
.LE;Checks should be ENABLEd before returning to interactive mode. There
is no advantage in having checks disabled while not declaring macros and
variables.
.END LIST
.NOFILL

Format:  ENABLE CHECKS
.LE ;^^^*>ENABLE CLEAR\*
.FILL
Clear the screen on initial draw (default).
.NOFILL

Format:  ENABLE CLEAR
.LE ;^^^*>ENABLE COMPOSITE\*
.FILL
An appropriate licence is required to use this command.
.BR
Allow use of composite text. Composite text is text which may contain
more than one text string; each text string has its own locating point,
orientation, text status etc, which can be edited individually, but
the whole feature can also be edited as an entity.
.NOFILL

Format:  ENABLE COMPOSITE

Valid in state  INITIAL
.LE ;^^^*>ENABLE CONTINUE\*
.FILL
When an error occurs, continue execution with the next command.
.BR
If disabled (default) then if an error occurs during expansion of
a macro command or command file, the macro or file is abandoned and
control returns to interactive.
.NOFILL

Format:  ENABLE CONTINUE
.LE ;^^^*>ENABLE DATE\*
.FILL
Update ACs holding "date of last edit" information if the feature has
been edited. If no AC of the required type is present then one is 
inserted. 
.br
The optional argument specifies the AC type which has to be updated. 
(current default 110).
This option is only valid if FLAGS is enabled.
.NOFILL

Format:  ENABLE DATE [integer]
.LE ;^^^*>ENABLE DESCRIPTOR\*
.FILL
The origin (and scale, when EXTERNAL is enabled) of maps are to be taken
from the map descriptor (MD) in the IFF file, rather than from the map
header (MH) (default). 
.BR
If there is no type 2 map descriptor, or if the entries in it are zero
then the values from the map header are used if they seem to be set.
.NOFILL

Format:  ENABLE DESCRIPTOR
.LE ;^^^*>ENABLE DIAGNOSTICS\*
.FILL
Program development diagnostics to be output.
.NOFILL

Format:  ENABLE DIAGNOSTICS
.LE ;^^^*>ENABLE DSR\*
.FILL
See the description of the command ENABLE SD (stereo digitiser).
.NOFILL

Format:  ENABLE DSR
.LE ;^^^*>ENABLE ECHO\*
.FILL
Type out all commands as they are executed. Useful to trace the progress
of command files or macros.
.NOFILL

Format:  ENABLE ECHO
.LE ;^^^*>ENABLE ENCLOSING\*
.FILL
Draw centre of fill areas, even when their borders do not impinge on the
screen.
.BL
Default action is to only draw areas whose boundaries impinge on the
screen.
.NOFILL

Format:  ENABLE ENCLOSING

Valid in state  INITIAL
.LE ;^^^*>ENABLE ENDS\*
.FILL
Find only on ends of line features.
.NOFILL

Format:  ENABLE ENDS
.LE ;^^^*>ENABLE EXIT\*
.FILL
Exit from program after an EXIT, DUMP, or QUIT command (default).
.BR
If EXIT is disabled, then LITES2 will return to INITIAL state after these
commands, in preparation for reading in new map(s). Note that QUIT in
INITIAL state will always terminate the program.
.NOFILL

Format:  ENABLE EXIT
.LE ;^^^*>ENABLE EXTERNAL\*
.FILL
Use map scale in IFF header (default).
.BR
See SCALE command for further information.
.NOFILL

Format:  ENABLE EXTERNAL

Valid in state  INITIAL
.LE;^^^*>ENABLE FILL\*
.FILL
Draw area features (graphical type 12) filled according to the FRT
(default). If disabled, then all area features are drawn hollow
(just outlined).
.NOFILL

Format:  ENABLE FILL
.LE;^^^*>ENABLE FIXED\*
.FILL
Implements an enhanced squaring algorithm for SQUARE PART
and SQUARE WHOLE. When this option is enabled (default) the
following features are included in the squaring algorithm:
.LIST 'o'
.LE;Points specified with the PRIVILEGE POINT command are held fixed
.LE;When base squaring, after all the bases have been used as data,
the remaining unsquared lines are part squared.
.LE;Redundant points are removed from parallel lines
.END LIST

.LE;^^^*>ENABLE FLAGS\*
.FILL
Flag edited and constructed features during editing.
.br
Preserve edit and deleted flags on read in.
.br
Preserve edited and deleted flags on output if SELECT OUTPUT deselected 
.br.
Activate selection by flags. (SELECT EDITED,DELETED,UNEDITED)
.br
For detailed description of the effect of this option consult 
the chapter on "Flagging of Edited Features".
.NOFILL

Format:  ENABLE FLAGS
.LE ;^^^*>ENABLE GRAPHICS\*
.FILL
Use graphic and other interactive devices.
.BR
If graphics are disabled, then only the alphanumeric terminal is used.
In order to use interactive devices with no display, then ENABLE GRAPHICS
but DISABLE PRIMARY/SECONDARY displays.
.NOFILL

Format:  ENABLE GRAPHICS

Valid in state  INITIAL
.LE ;^^^*>ENABLE HEIGHT\*
.FILL
Use text height from TH entry in IFF file, not from FRT.
.NOFILL

Format:  ENABLE HEIGHT

Valid in state  INITIAL
.LE ;^^^*>ENABLE HWTEXT\*
.FILL
Use hardware text facilities on display. This option is only effective on
certain types of display.
.BL
The SIG6000 display will be loaded with the character shapes from the
TRI file, so that they are drawn much faster subsequently.
.BL
The MOTIF version will use either Display PostScript, or X-Windows
itself draw draw text if the FRT includes a hardware bit in the flags
entry for a text feature code. (See Workstation Guide.)
.BL
Attempts to use hardware text on a device which does not support it
may result in text not appearing at all.
.NOFILL

Format:  ENABLE HWTEXT
.LE ;^^^*>ENABLE IFFLOCK\*
.FILL
Lock IFF files to ensure that the same file is not edited by more than
one LITES2 user simultaneously (default).
.BR
Checks that the IFF file specified by an IFF or INSITU (not READONLY)
command is not already being edited by another LITES2 user. An error
message gives some details of the user accessing the file. No checking
is performed if the option is disabled.
.BR
The checking works across all the nodes in a VAXcluster for users in
the same group, but not for files accessed using DECnet (with node::
at the start of the file name).
.NOFILL

Format:  ENABLE IFFLOCK
.LE ;^^^*>ENABLE IFFMAP\*
.FILL
Access workspace IFF files by mapping them into computer memory.
.BL
The setting of the option at the time when each IFF file is specified
(using IFF, INSITU, or READONLY commands) is taken to apply to that
particular file. This option can give faster access, but needs a certain
amount of care in use. It cannot be used to access workspace files over
DECNET, and is not advisable when more maps than the number specified by
MAPS OPEN (3 by default) are in use
simultaneously. Extending the file as a result of editing may lead to
fragmentation of the program address space, as might a series of returns
to INITIAL state followed by reading in of more maps. The ideal use is
for a READONLY background map. If this option is used inappropriately, a
"Virtual address space full" error may eventually occur, which means
that the number of virtual pages (as displayed by
$SHOW#PROCESS/CONTINUOUS) has exceeded the SYSGEN parameter
VIRTUALPAGECNT. 
.NOFILL

Format:  ENABLE IFFMAP
.LE ;^^^*>ENABLE INFORM\*
.FILL
Allow output of INFORM and LEARNER messages.
.BR
Note: when disabled, commands like SHOW and EXAMINE will produce no
output.
.NOFILL

Format:  ENABLE INFORM
.LE ;^^^*>ENABLE INTERPOLATION\*
.FILL
Draw time interpolation of curves (default).
.BR
Disable to speed up drawing of curved features (eg contour maps).
.NOFILL

Format:  ENABLE INTERPOLATION
.LE ;^^^*>ENABLE KRISS\*
.FILL
See the description of the command ENABLE SI (superimposition).
.NOFILL

Format:  ENABLE KRISS [subcommand]
.LE ;^^^*>ENABLE LEARNER\*
.FILL
Extra messages to be output to aid a learner.
.NOFILL

Format:  ENABLE LEARNER
.LE ;^^^*>ENABLE MESSAGE\*
.FILL
Allow output from MESSAGE commands even when INFORM is disabled.
This allows LITES2 informational messages to be suppressed while
still displaying messages from macros and command files. Disabled
by default.
.NOFILL

Format:  ENABLE MESSAGE
.LE ;^^^*>ENABLE MONITOR\*
.FILL
Use table monitor to obtain data from digitising table
.NOFILL

Format:  ENABLE MONITOR

Valid in state  INITIAL
.LE ;^^^*>ENABLE NARROW\*
.FILL
If disabled (default), then the window defined using the WINDOW command
is adjusted to fill the screen. 
.BR
If disabled, then only features within the defined window are drawn,
possibly leaving a blank area of screen in which it is nevertheless
possible to find features. This facility may be used to speed up
redrawing if the exact area required is known. 
.NOFILL

Format:  ENABLE NARROW
.LE ;^^^*>ENABLE NOW\*
.FILL
"Now in XXX state" message is output at every change of state
.NOFILL

Format:  ENABLE NOW
.LE ;^^^*>ENABLE PATTERN\*
.FILL
Drawing of line patterns, including pattern filled areas.
.BR
If disabled then all lines are drawn solid.
.NOFILL

Format:  ENABLE PATTERN
.LE ;^^^*>ENABLE POSITIONING\*
.FILL
Text positioning by 9 possible locating points (default).
.BR
If disabled then all texts are positioned by bottom left corner.
.NOFILL

Format:  ENABLE POSITIONING
.LE ;^^^*>ENABLE PRIMARY\*
.FILL
Primary display to be used (default).
.NOFILL

Format:  ENABLE PRIMARY

Valid in state  INITIAL
.LE ;^^^*>ENABLE PSIZE\*
.FILL
Height of text is in points, not mm (default).
.NOFILL

Format:  ENABLE PSIZE

Valid in state  INITIAL
.LE ;^^^*>ENABLE QUIET\*
.FILL
Suppress acknowledgement of button presses with a bell (default).
.NOFILL

Format:  ENABLE QUIET
.LE ;^^^*>ENABLE SAME__REVISION\*
.FILL
Create output files with the same output revision level as the
corresponding input files.
.BL
When this option is disabled (the default state) output files are
created with the output revision level set by the logical name
LSL$IFF__OUTPUT__REVISION.  When files are merged on output, the type of
file output always depends on the setting of this logical name.
.NOFILL

Format:  ENABLE SAME__REVISION
.LE ;^^^*>ENABLE SCREENMENU\*
.FILL
Use screen menu (when using suitable hardware). The screen menu can be
ENABLED/DISABLED as required. If the definition of the menu is changed
by DESCRIBE SCREENMENU, then ENABLE SCREENMENU will draw the new menu.
.BR
The screen menu must previously have been defined using the PUCK command
on line 1 (the screen) (qv) and must also have been described using the
DESCRIBE SCREENMENU command (qv).
.BR
The boxes on the screen menu can be defined using a series of DESCRIBE
MACRO commands (qv).
.NOFILL

Format:  ENABLE SCREENMENU
.LE ;^^^*>ENABLE SCRUB\*
.FILL
Deleted (but recoverable) features are to be 'scrubbed out' if the
display allows this (default). If disabled, deleted features remain
displayed until a re-draw is performed. At present, this option applies
only to the TEK4014 display.
.NOFILL

Format:  ENABLE SCRUB
.LE ;^^^*>ENABLE SD\*
.FILL
Allow 3D input from a stereo digitising instrument.
The stereo digitising instrument is to be used to control the cursor.
The instrument is initialised and driven to the LITES2 cursor
position. If the ENABLE SD command is given while in INITIAL state,
then the instrument will be initialised when the map(s) are read in.
While active, the floating mark will follow the LITES2 cursor
position, and pressing any button on the instrument will move the
LITES2 cursor to the position of the floating mark. SD may be enabled
or disabled at any time.
.BL
This option is only available with some versions of LITES2, and the
user should refer to the hardware dependent reference manual for
the possibilities available with his hardware.
.BL
.INDEX LSL$LITES2__KERN__ROUTINES
Use of a stereo digitiser depends on a shared image pointed at by the
logical name LSL$LITES2__KERN__ROUTINES. This image is supplied by
Laser-Scan. The name of this image depends on what type of instrument
is to be used, and whether it is used with an image superimposition
system. 
.NOFILL

Format:  ENABLE SD
.LE ;^^^*>ENABLE SECONDARY\*
.FILL
Secondary display to be used.
.NOFILL

Format:  ENABLE SECONDARY

Valid in state  INITIAL
.LE ;^^^*>ENABLE SI\*
.FILL
A stereo superimposition device is to be used to display
data in a stereo digitising instrument. This command is only
valid in conjunction with the ENABLE SD command.
The superimposition device is initialised and any subsequent LITES2 graphics
will be drawn on it. If the ENABLE SI command is given while in
INITIAL state, then the device will be initialised when the map(s) are
read in. If the device is already initialised, then any ENABLE/DISABLE
SI commands will just make the superimposition image visible/invisible. 
.BL
The subcommands (if given) control further SI options.
.BL
This option is only available with some versions of LITES2, and the
user should refer to the hardware dependent reference manual for
the possibilities available with his hardware.
.BL
.INDEX LSL$LITES2__KERN__ROUTINES
Use of a stereo digitiser and superimposition device depends on a
shared image pointed at by the logical name LSL$LITES2__KERN__ROUTINES.
This image is supplied by Laser-Scan.  The name of this image depends
on what type of instrument is to be used, and whether it is used with
an image superimposition system.
.NOFILL

Format:  ENABLE SI [subcommand]
.LIST 'o'
.LE ;^^^*>ENABLE SI DIALOG\*
.FILL
Specifies an area on the superimposition device to be used as a one line
dialogue area. Messages may be written to this area using the
ENABLE SI MESSAGE command. The arguments specify the position
of the bottom left of the area, and also its height and length, all
in pixels in the range 0-1023. The maximum allowed height is 100.
The default dialogue area is at position 0,61 with height 20 and
length 1023.
.NOFILL

Format:  ENABLE SI DIALOG xpos ypos height length
.LE ;^^^*>ENABLE SI MESSAGE\*
.FILL
Displays the given text in the superimposition dialogue area. If no text is
given, the area is cleared.
If the text is to have leading spaces or tabs, then it must be enclosed
in double quotes.
.NOFILL

Format:  ENABLE SI MESSAGE  [text]
.LE ;^^^*>ENABLE SI REGISTRATION\*
.FILL
Performs a manual registration of the superimposition image with the
photographs. The command is only used with certain devices. On a KERN
DSR instrument, the user is prompted to move the photographs until
registration is achieved, and then press the right DSR button to
accept, or the left button to leave the registration unchanged. Once
set, the registration will be maintained for the duration of the
LITES2 session.  If the argument n is given as zero, then the effect
of any manual registration is removed.
.NOFILL

Format:  ENABLE SI REGISTRATION [n]
.LE ;^^^*>ENABLE SI SIDE\*
.FILL
Specifies which eye is to see the superimposition screen menu, status area, and
dialogue area. The argument should be 1#for left (default), 2#for
right, 3#for both, or 0#to make the menu invisible.
.NOFILL

Format:  ENABLE SI SIDE side
.LE ;^^^*>ENABLE SI STATUS\*
.FILL
Specifies an area on the superimposition device to be used as a status area.
When enabled, the area will continuously display the current state,
plus the currently set map, layer, and feature code.
The optional arguments specify the position of the bottom left of the
area, and also its height, all in pixels in the range 0-1023. The maximum
allowed height is 100. If the arguments are omitted, the command just
enables/disables the status area without changing its position.
The default status area is at position 0,30 with height 20.
.NOFILL

Format:  ENABLE SI STATUS [xpos ypos height]
.END LIST
.LE ;^^^*>ENABLE SEGMENTS\*
.FILL
Use segments on displays for which this is possible (default).
.BR
The use of segments enables fast redraw of the picture, but may be
disabled if the map is too large for the display's segment store. If
ENABLE SEGMENTS is given while in READY state, then the next re-draw will
clear the segment store and re-load it, possibly with only part of the
data if selections have been made or the display is zoomed in. Any
features not loaded will not become visible until another ENABLE SEGMENTS
is given followed by a re-draw.
.NOFILL

Format:  ENABLE SEGMENTS
.LE ;^^^*>ENABLE SORT\*
.FILL
Re-draw features sorted in IFF or FSN order. Sorting is not usually
relevant on a display which supports ENABLE SEGMENTS. In this case
it should remain disabled.
.BR
Use the SORT command (qv) to specify type of sorting.
.NOFILL

Format:  ENABLE SORT
.LE ;^^^*>ENABLE STATUS\*
.FILL
Inverse video status lines to be written on VDU screen.
.BR
This option requires a DEC VT100 VDU or equivalent, and reduces
the available scroll area. The position of the status line may also 
be specified by including an optional argument. The default position is
the bottom two lines of the screen.
.BR
DISABLE STATUS will increase the scroll area which has been set.
.NOFILL

Format:  ENABLE STATUS [integer]
.LE ;^^^*>ENABLE SUBSTITUTION\*
.FILL
Substitute the values of any variables enclosed in single quotation marks
into command lines. If disabled (default), then single quote is treated
as a normal character and may be inserted into texts, for instance.
Note that variables are never substituted while defining a macro.
.NOFILL

Format:  ENABLE SUBSTITUTION
.LE ;^^^*>ENABLE TABLE\*
.FILL
Digitising table to be used (default).
.NOFILL

Format:  ENABLE TABLE

Valid in state  INITIAL
.LE ;^^^*>ENABLE THICK\*
.FILL
Draw using line thickness if hardware permits.
.BR
If disabled then all segments are drawn minimum thickness.
.NOFILL

Format:  ENABLE THICK
.LE ;^^^*>ENABLE TRACEBACK\*
.FILL
Traceback of routine calls is output for system errors (diagnostic).
.BR
If disabled (default) then just error message is output.
.NOFILL

Format:  ENABLE TRACEBACK
.LE ;^^^*>ENABLE VECTOR\*
.FILL
Draw vectors as well as raster.
.BR
This command only has any effect when using raster images. By DISABLing
VECTOR the raster images can be redrawn without the vector data being
displayed.
.NOFILL

Format:  ENABLE VECTOR
.LE ;^^^*>ENABLE VERIFY\*
.FILL
Allows verification of found features (default).
.BR
The style of verification is set by the VERIFY command (qv).
.NOFILL

Format:  ENABLE VERIFY
.LE ;^^^*>ENABLE Z\*
Allows LITES2 to be used as a 3 dimensional editor.
An appropriate licence is required to use this command.
.BL
See the chapter about using LITES2 as a 3 dimensional editor for more
details on the effect of this command. 
.NOFILL

Format:  ENABLE Z

Valid in states  INITIAL READY
.END LIST
.HL 3 ^^^*>DISABLE\*
.FILL
Deactivates specified optional facilities.
.BR
See ENABLE command.
.NOFILL

Format:  DISABLE  subcommand

Takes same subcommands as ENABLE (qv)
.HL 3 ^^^*>TOGGLE\*
.FILL
If the selected facility is currently activated, then TOGGLE deactivates
it, and if it is currently deactivated, TOGGLE activates it. This is most
useful when programmed as a menu box or puck button.
.NOFILL

Format:  TOGGLE  subcommand

Takes same subcommands as ENABLE (qv)
.HL 3 ^^^*>INTERPOLATE\*
.FILL
Sets drawing _& construction interpolation method.
.NOFILL

Format:  INTERPOLATE subcommand

Valid in states  INITIAL READY
.LIST '*'
.LE ;^^^*>INTERPOLATE AKIMA\*
Akima curve interpolation (default).
.BR
Akima is a bicubic spline method which preserves linearity if possible.

Format:  INTERPOLATION AKIMA
.LE ;^^^*>INTERPOLATE MCCONALOGUE\*
McConalogue curve interpolation.
.BR
McConalogue is a circular arc pair method.

Format:  INTERPOLATION MCCONALOGUE
.END LIST
.HL 3 ^^^*>SORT\*
.FILL
Sets type of sorting used for re-drawing (if ENABLE SORT is set).
.NOFILL

Format:  SORT subcommand

Valid in all states
.LIST '*'
.LE ;^^^*>SORT FSN\*
.FILL
Re-draw sorted in order of increasing Feature Serial Number. This may be
used to ensure that features such as filled areas are drawn first.
.NOFILL

Format:  SORT FSN
.LE ;^^^*>SORT GT\*
.FILL
Re-draw sorted by graphical type of features.
.BR
Features are drawn in the following order:
.LIST
.LE; Fill#areas#(graphical#type##12)
.LE; Line#work##(graphical#types#1#-#6)
.LE; Symbols####(graphical#types#7#-#9#and#11)
.LE; Texts######(graphical#type##10)
.END LIST
Within each of these groups, features are drawn in order of their feature
code.

.NOFILL

Format:  SORT GT
.LE ;^^^*>SORT IFF\*
.FILL
Re-draw sorted in IFF file order. This will often give a considerable
speed increase for the re-draw (default).
.NOFILL

Format:  SORT IFF
.LE ;^^^*>SORT PRIORITY\*
.FILL
Re-draw features according to the priority defined for feature
codes in the PRIORITY entries in the FRT table that is being used.
If a feature code's priority is not defined in a PRIORITY record,
then it will be drawn at the default priority.
.BL
For features with the same priority, features are drawn in order of
their feature code.
.BL
The use of this sorting allows features to be drawn in a predictable
order, so that for example, one type of road will always lie over
another one. It also allows features to be drawn several times with
different representations, allowing complex line types to be
constructed, for example cased roads drawn by drawing a thick line
in the casing colour, followed by a thinner line in the fill colour.
.BL
Note that the components of a single feature may be drawn at different
times, so that road junctions, for example, will be correctly cased.
.BL
When drawing in this mode, colour 0 in the FRT table will be drawn in
background colour, allowing parts of features to blank out what is
below them.
.BL
When drawing texts in this mode, ENABLE BLANK will cause all but the
text representation with the highest priority to be invisible.
.NOFILL

Format:  SORT PRIORITY
.END LIST
.HL 3 ^^^*>REFRESH\*
.FILL
Changes the characteristics of the refresh (or highlighted) picture.
.NOFILL

Format:  REFRESH  subcommand

Valid in states  INITIAL READY LINE CIRCLE EDIT ON CONSTRUCT
.LIST '*'
.LE;^^^*>REFRESH BITS\*
.FILL
Sets the bit planes used for refresh (if the display allows it).
This command may be used when the allocation of colours to overlays
makes the cursor and other highlighting difficult or impossible
to see. Refresh works by inverting the bits in the display, then
inverting them back again to turn it off. By default all bit planes
are inverted. The integer given in this command is a bit set mask
specifying the particular planes to be inverted. If the argument
is omitted, then the default is used. In the MOTIF version of LITES2,
the default may be set by defining logical name LSL$DECW__REFRESH__BITS.
.P 0
.P 0
For example: If you had an 8 plane overlay using colours 0 to 255,
then by default the cursor would display in colour 255 when over
an area of the screen with colour 0 (background). If you used the
command REFRESH BITS 1, then the cursor would display in colour 1
instead.
.NOFILL

Format:  REFRESH BITS  [integer]
.LE;^^^*>REFRESH CURSOR\*
.FILL
Sets the shape of the cursor (if the display allows it).
This command allows the cursor to be set to the same shape as
the 'brush' used by the IMAGE PAINT and IMAGE ERASE commands.
.NOFILL

Format:  REFRESH CURSOR  subcommand
.LIST 'o'
.LE;^^^*>REFRESH CURSOR CIRCLE\*
.FILL
Use a circle or ellipse as the cursor.
The first argument gives the diameter of the circle.
If it is positive, then it is measured in IFF units (or mm if a
UNITS command has been given), and the cursor changes size if the
picture is zoomed. If it is negative, then it is measured in
screen mm, and the cursor will be of constant size.
If the second argument is given, it specifies a height, allowing
an ellipse to be used.
.NOFILL

Format:  REFRESH CURSOR CIRCLE  width [height]
.LE;^^^*>REFRESH CURSOR CROSS\*
.FILL
Use a simple cross as the cursor.
The first argument gives the size.
If it is positive, then it is measured in IFF units (or mm if a
UNITS command has been given), and the cursor changes size if the
picture is zoomed. If it is negative, then it is measured in
screen mm, and the cursor will be of constant size.
If the second argument is given, then a second cross with this
size if drawn on top of the first, cancelling out where the
two overlap. This is used to achieve a cross with the centre
missing.
.NOFILL

Format:  REFRESH CURSOR CROSS  size [size2]
.LE;^^^*>REFRESH CURSOR DEFAULT\*
.FILL
Restores the cursor to its default appearance.
.NOFILL

Format:  REFRESH CURSOR DEFAULT
.LE;^^^*>REFRESH CURSOR RECTANGLE\*
.FILL
Use a rectangle or square as the cursor.
The first argument gives the width.
If it is positive, then it is measured in IFF units (or mm if a
UNITS command has been given), and the cursor changes size if the
picture is zoomed. If it is negative, then it is measured in
screen mm, and the cursor will be of constant size.
The second argument specifies a height, allowing a rectangle
to be used. If omitted, the result is a square.
.NOFILL

Format:  REFRESH CURSOR RECTANGLE  width [height]
.END LIST
.LE ;^^^*>REFRESH LINE\*
.FILL
Sets maximum refresh line length (not yet implemented).
.NOFILL

Format:  REFRESH LINE  integer
.LE ;^^^*>REFRESH POINTS\*
.FILL
Sets maximum number of refreshed points (range 2 to 1000, default 50).
.BL
When refreshing composite text each component takes 5 vertices. At least
one component is refreshed.
.NOFILL

Format:  REFRESH POINTS integer
.END LIST
.HL 3 ^^^*>SCROLL\*
.FILL
Sets the size and position of the scroll area on the terminal.
.BR
SCROLL 0 0 will use the maximum amount of screen area depending on 
the position of the status line.
.NOFILL

Format:  SCROLL numlines startline

where numlines  is the number of lines in the scroll area (integer)
      startline is the first line of the scrolling area (integer)

Valid in all states
.HL 3 ^^^*>TOLERANCE\*
.FILL
Specifies various tolerances.
.BR
Distances are specified in sheet mm, unless otherwise stated. This
behaviour may be overridden if the TOLERANCE command is preceded by
a UNITS command.

.NOFILL

Format:  TOLERANCE  subcommand [argument]

Valid in states  INITIAL READY
.LIST '*'
.LE ;^^^*>TOLERANCE BUNCH\*
.FILL
Sets the tolerances to be used in filtering, using the BUNCH algorithm.
.BL
The three coefficients (a,b,c) control the spacing of filtered points. 
.BR
.TP 9
They represent:
.LIST
.DISPLAY ELEMENTS LL, ''
.LE;the minimum separation between successive master points
.LE;the lateral threshold distance from the trend line
.LE;the maximum separation between successive master points.
.BR
A maximum separation of 0.0 is equivalent to one of infinity. 
.END LIST
Note: c must be greater than or equal to a, which must be greater than or
equal to b.  If this condition is not met, then the default values are
reset.
.BL
Trailing arguments may be omitted (the setting is unchanged).
.NOFILL

Format:  TOLERANCE BUNCH  a b c
.LE ;^^^*>TOLERANCE CIRDRAW\*
.FILL
Sets the point density for drawn circles (graphical types 2-5). The
three coefficients (a,b,c) control the spacing of interpolated points. 
.BR
The approximate separation of points (d) is given by:
.NOFILL

      d = a + 2_*SQRT(2br) + cr      (r is radius)

which means (if other coefficients were zero) that
.FILL
.LIST
.DISPLAY ELEMENTS LL,''
.LE;gives a constant separation of a mm
.LE;gives a constant 'arc to chord' distance of b mm
.LE;gives a constant angular deviation of c radians (2_*PI/c points in a
circle) 
.END LIST
Trailing arguments may be omitted (the setting is unchanged).
.P 0
The default setting is a=0, b=0.05, c=0, which gives an 'arc to chord'
distance of 0.05mm, or approximately 30 points in a circle of radius
10mm, with the number proportional to the square root of the radius. 
.NOFILL

Format:  TOLERANCE CIRDRAW  a b c
.LE ;^^^*>TOLERANCE CIRGEN\*
.FILL
Sets the point density for generated circles (CIRCLE and ARC commands).
The three coefficients (a,b,c) control the spacing of interpolated
points as for the TOLERANCE CIRDRAW command. 
.P 0
The default setting is a=0, b=0.05, c=0, which gives an 'arc to chord'
distance of 0.05mm, or approximately 30 points in a circle of radius
10mm, with the number proportional to the square root of the radius. 
.NOFILL

Format:  TOLERANCE CIRGEN  a b c
.LE ;^^^*>TOLERANCE CURDRAW\*
.FILL
Sets the point density for drawn curves (graphical type 6). The three
coefficients (a,b,c) control the spacing of interpolated points as for
the TOLERANCE CIRDRAW command, with r being an approximation to the
radius of curvature for each span of the curve. 
.P 0
The default setting is a=0.25, b=c=0, which gives 4 points per mm.
.NOFILL

Format:  TOLERANCE CURDRAW  a b c
.LE ;^^^*>TOLERANCE CURGEN\*
.FILL
Sets the point density for generated curves (CURVE command). The three
coefficients (a,b,c) control the spacing of interpolated points as for
the TOLERANCE CIRDRAW command, with r being an approximation to the
radius of curvature for each span of the curve. 
.P 0
The default setting is a=0.25, b=c=0, which gives 4 points per mm.
.NOFILL

Format:  TOLERANCE CURGEN  a b c
.LE ;^^^*>TOLERANCE DEGREES\*
.FILL
Angle squaring tolerance in degrees (for SQUARE ANGLES).
.NOFILL

Format:  TOLERANCE DEGREES  real
.LE ;^^^*>TOLERANCE EDGE\*
.FILL
Edge matching tolerance in mm on the nominal sheet.
.NOFILL

Format:  TOLERANCE EDGE  real
.LE ;^^^*>TOLERANCE EXPAND\*
.FILL
Sets the proportion of the character height that regions defined by 
texts will be expanded beyond the limits of the text itself. If the 
expansion is greater than the average character width, oddities in the 
region boundary may occur.
.BR
By default the value of 0.1 is used.
.NOFILL

Format:  TOLERANCE EXPAND  real
.LE ;^^^*>TOLERANCE FAR__MOVE\*
.FILL
Sets the distance that is to be used as the criterion for the 
OPERATION FAR__MOVE__POINT command (qv).
.NOFILL

Format:  TOLERANCE FAR__MOVE  real
.LE ;^^^*>TOLERANCE FIND\*
.FILL
Sets the find radius to be used in the FIND command.
.BR
The value is in screen mm.  If there is no display, then the screen size
is assumed to be 360 mm. It is not possible to set a find radius of more
than half the screen width. 
.BR
When the find radius is specified in screen mm, then it gets larger and
smaller as the picture is zoomed in and out. To specify a fixed find
radius in IFF units, sheet mm, or other UNITS, then precede this command
with a UNITS command. The find radius will then be fixed until it is
again specified in screen mm. 
.NOFILL

Format:  TOLERANCE FIND  real
.LE ;^^^*>TOLERANCE FOLLOW\*
.FILL
Sets the tolerances to be used in following, using the BUNCH algorithm.
.BL
The four coefficients (a,b,c,d) control the spacing of points added
while following.
.BR
.TP 11
They represent:
.LIST
.DISPLAY ELEMENTS LL,''
.LE;the time interval at which to inquire the position
from the device being followed
.LE;the minimum separation between successive master points
.LE;the lateral threshold distance from the trend line
.LE;the maximum separation between successive master points.
.BR
A maximum separation of 0.0 is equivalent to one of infinity. 
.END LIST
These arguments are specified in sheet millimetres. To set them in other
units, precede this command with a UNITS command.
.BL
Note: d must be greater than or equal to b, which must be greater than or
equal to c.  If this condition is not met, then the default values are
reset.
.BL
Trailing arguments may be omitted (the setting is unchanged).
.NOFILL

Format:  TOLERANCE FOLLOW  a b c d
.LE ;^^^*>TOLERANCE JUSTIFY\*
.FILL
The width of text characters specified in the TRI file usually allows
some blank space after each character. The space after the final
character in a string must be allowed for when centre or right
justification is used. 
.P 0;The TOLERANCE JUSTIFY command sets the amount to be subtracted from
a text string to represent this space. The amount is specified as a
fraction of the text height. 
.P 0;By default the value 0.333333 is used.
.NOFILL

Format:  TOLERANCE JUSTIFY  real
.LE ;^^^*>TOLERANCE OFFSET\*
.FILL
Sets the proportion of the height that texts/symbols will be offset if
no argument is given to the OFFSET command.  If the argument is -ve,
then the text/symbol will be offset above the original. 
.NOFILL

Format:  TOLERANCE OFFSET  real
.LE ;^^^*>TOLERANCE PROPAGATE\*
.FILL
Distance along the features to propagate a mismatch during edgematching
or when the PROPAGATE command has been given during a TIE or JOIN
operation. The distance is specified in mm on the nominal sheet. 
.BR
Note: to avoid propagation when edgematching, this tolerance should be
set to 0.0 
.NOFILL

Format:  TOLERANCE PROPAGATE  real
.LE ;^^^*>TOLERANCE RADIANS\*
.FILL
Angle squaring tolerance in radians (for SQUARE ANGLES).
.NOFILL

Format:  TOLERANCE RADIANS  real
.LE ;^^^*>TOLERANCE SQDEF\*
.FILL
OS squaring tolerance - default setting used for all SQxx parameters
.NOFILL

Format:  TOLERANCE SQDEF
.LE ;^^^*>TOLERANCE SBMT\*
.FILL
OS squaring tolerance - as SQMT but for based squaring
.NOFILL

Format:  TOLERANCE SBMT  real
.LE ;^^^*>TOLERANCE SBLT\*
.FILL
OS squaring tolerance - as SQMT but for based squaring
.NOFILL

Format:  TOLERANCE SBLT  real
.LE ;^^^*>TOLERANCE SQBT\*
.FILL
OS squaring tolerance - length of base must be longer than this
distance (mm)
.NOFILL

Format:  TOLERANCE SQBT  real
.LE ;^^^*>TOLERANCE SQCT\*
.FILL
OS squaring tolerance - SQCT is used by the OS squaring algorithm to
test if a feature forms a closed loop. If the distance between the first
and last point is less than SQCT sheet mm, then the feature is
considered to be closed. 

.NOFILL

Format:  TOLERANCE SQCT  real
.LE ;^^^*>TOLERANCE SQLT\*
.FILL
OS squaring tolerance - minimum length of line (mm)
.NOFILL

Format:  TOLERANCE SQLT  real
.LE ;^^^*>TOLERANCE SQMT\*
.FILL
OS squaring tolerance - maximum lateral distance a point will be moved,
for a line to be included in this squaring pass (mm) 
.NOTE
Points may finally be moved by more than this amount, especially when
points have been removed from the feature. 
.END NOTE
.NOFILL

Format:  TOLERANCE SQMT  real
.LE ;^^^*>TOLERANCE SQPL\*
.FILL
OS squaring tolerance - maximum angle (in degrees) that two lines may
differ by (after adjustment) and still be considered parallel 
.NOFILL

Format:  TOLERANCE SQPL  real
.LE ;^^^*>TOLERANCE SQWT\*
.FILL
OS squaring tolerance - warning issued when point moved more than
this distance (mm)
.NOFILL

Format:  TOLERANCE SQWT  real
.END LIST
.HL 3 ^^^*>PTOLERANCE\*
.FILL
Specifies the various tolerances, that are privileged (ie can only be
given in initialisation files).
.NOFILL

Format:  PTOLERANCE  subcommand [argument]

Valid in state  INITIAL (privileged command;
                         only valid in initialisation file)
.LIST '*'

.LE ;^^^*>PTOLERANCE EDGESETUP\*
.FILL
Overrides the default settings for doing an EDGE setup.
.BR
It defines the number of pointings to be made to each edge of the map,
the number of complete sets of observations to be made, and the limits
and tolerances for acceptance of the results. See SETUP EDGE for details
of how these tolerances are used.
.NOFILL

Format:
  PTOLERANCE EDGESETUP numpts numsets sidetol tolmax tolsum mingap maxgap

where 
  numpts  - number of pointings to each side (maximum 5)
  numsets - number of sets that must be within tolerance (maximum 5)
  sidetol - maximum RMS of points from lines they define (mm)
  tolmax  - range between points at any one corner (mm)
  tolsum  - sum of the ranges between points at the corners (mm)
  mingap  - factor of ideal gap that points must be apart
  maxgap  - factor of ideal gap that points must be closer than

The defaults are: 5  2  0.075  0.2  0.425  0.2  2.0

.LE ;^^^*>PTOLERANCE OSSETUP\*
.FILL
Overrides the default settings for doing a multiple point setup.
.BR
It defines the number of boxes the map is to be split into  along
with the number of observations required at each point, the number
of observations at each point that must fall within the tolerance of the
mean, and that tolerance.
.NOFILL

Format:  PTOLERANCE OSSETUP fulx fuly repeat numok tolerance

where fulx         is the number of boxes in the X direction (integer)
      fuly         is the number of boxes in the Y direction (integer)
      repeat       number of observations of each point      (integer)
      numok        number that must be within tolerance      (integer)
      tolerance    tolerance in table mm                     (real)

The defaults are: 5  5  4  2  0.381

.LE ;^^^*>PTOLERANCE RESIDUAL\*
.FILL
Specifies the tolerances for residuals (in x and y) after a least squares
solution to a set up. These numbers are in terms of the range in x and y
of the distances between the control points.
.BL
The first argument is the limit at which a setup will be accepted, the
second is the level at which a warning will be output
.NOFILL

Format:  PTOLERANCE RESIDUAL limit warn

The defaults are: 0.0025 0.00025

.END LIST
.HL 3 ^^^*>VERIFY\*
.FILL
Sets the style of verification of found features. Whether features are
verified or not is controlled by the VERIFY option, set by ENABLE VERIFY,
DISABLE VERIFY or TOGGLE VERIFY (qv)
.NOFILL

Format:  VERIFY  subcommand

Valid in all states
.LIST '*'
.LE ;^^^*>VERIFY AC\*
.FILL
Verify any AC, TC, or CH entries for each found feature.
.NOFILL

Format:  VERIFY AC
.LE ;^^^*>VERIFY FEATURE\*
.FILL
Verify FSN, Map, Layer, Feature code, and Point number for each found
feature. 
.BR
If the process code (PC) is not 0, then it is also shown.
.NOFILL

Format:  VERIFY FEATURE
or       VERIFY
.LE ;^^^*>VERIFY GROUP\*
.FILL
Shows the group(s) that the feature code of the found feature is in.
.BR
This is only effective if VERIFY FEATURE is also set.
.NOFILL

Format:  VERIFY GROUP
.LE ;^^^*>VERIFY OFF\*
.FILL
Disable all verification of found features.
.NOFILL

Format:  VERIFY OFF
.LE ;^^^*>VERIFY TEXT\*
.FILL
Verify the text of each found text feature.
.NOFILL

Format:  VERIFY TEXT
.END LIST
.SUBTITLE Command Handling Commands
.PAGE
.HL 2 ^^^*Command Handling Commands\*
.INDEX Command Handling Commands
.HL 3 ^^^*>@FILE\*
.FILL
Take commands from the specified command file until end-of-file, or error. The
default filename is LSL$LITES2CMD:---.LCM. The filename may be followed by a
series of parameters, each delimited by one or more spaces or tabs, or enclosed
in double quotes. Within the command file, the values of these parameters are
available as system variables $P1, $P2 etc. The number of parameters is
available in $PCOUNT, and the whole line of parameters in $PLINE.

.NOFILL

Format:  @filename _[p1 p2..._]

Valid in all states
.HL 3 ^^^*>RESPOND\*
.FILL
Suspends a command file or macro and obtains input from the interactive
controls (terminal, table, or bitpad) until a CONTINUE command (resume
command file or macro) or CANCEL RESPOND command (abandon command file
or macro and return to interactive) is given.
.NOFILL

Format:  RESPOND

Valid in all states
.HL 3 ^^^*>CONTINUE\*
.FILL
Continue execution of a command file or macro which has been suspended with
RESPOND (qv) after interactive input is complete. 
.NOFILL

Format:  CONTINUE

Valid in all states
.HL 3 ^^^*>MACRO\*
.FILL
Enter MACRO state to define a macro.
All commands will be stored rather than obeyed until ENDMACRO (qv)
Macro names must consist of up to 16 alphabetic characters (including
underline), followed by a box or button number in the case of a PUCK
or MENU macro.
.NOFILL

Format:  MACRO  name

eg       MACRO FRED

Valid in states  INITIAL READY

N.B. This command is not valid in MACRO state
.HL 3 ^^^*>ENDMACRO\*
.FILL
End the definition of a macro started with a MACRO command (qv).
This is the only command actually obeyed, rather than stored,
while in MACRO state.
.NOFILL

Format:  ENDMACRO

Valid in state  MACRO
.HL 3 ^^^*>JUMP\*
.FILL
Transfers control to the specified macro (which may be the one currently
executing), or to a label.
.BL
In the case of a jump to a macro, any remaining
commands at the present level (ie in the current command file) are
lost, as are any remaining commands on the current line, or in the current
macro. The macro name may be followed by a series of parameters, each delimited
by one or more spaces or tabs, or enclosed in double quotes. Within the macro,
the values of these parameters are available as system variables $P1, $P2 etc.
The number of parameters is available in $PCOUNT, and the whole line of
parameters in $PLINE.
.BL
In the case of a jump to a label (which must include its leading "."),
the label must be found in the current line or macro. The case of
letters in the label is not significant.
.NOTE
The command sequence THEN JUMP macro or ELSE JUMP macro has the same effect as
THEN macro or ELSE macro. The commands in the macro will be executed,
and then the remaining commands in the current line or macro will be
executed. The commands THEN JUMP _.label or ELSE JUMP _.label will be unable
to find the label. To achieve the desired effect use the JTRUE or JFALSE
commands.
.END NOTE
.NOFILL

Format:  JUMP macro [p1 p2...]
or       JUMP .label

eg       JUMP FRED

Valid in all states
.HL 3 ^^^*>JTRUE\*
.FILL
As JUMP (qv), but only transfers control if the condition flag is set
to TRUE.
.BR
The condition flag can be set by the TEST, OR and AND commands and
also by the user routines.
.NOFILL

Format:  JTRUE macro [p1 p2...]

eg       JTRUE FRED

Valid in all states
.HL 3 ^^^*>JFALSE\*
.FILL
As JUMP (qv), but only transfers control if the condition flag is set
to FALSE.
.BR
The condition flag can be set by the TEST, OR and AND commands and
also by the user routines.
.NOFILL

Format:  JFALSE macro [p1 p2...]

eg       JFALSE FRED

Valid in all states
.HL 3 ^^^*>ELSE\*
.FILL
Obeys the command-line only if the condition flag is FALSE.
.BR
The condition flag is set by the TEST, OR and AND commands (qv) and also
by the user routines.
.BL
Several ELSE and THEN commands may be given in any order without
re-setting the condition flag, as long as the condition flag is not
altered by the macro that is called.
.NOTE
Due to the nature of the command separator _#, it is not possible to put
more than one command in this command line (the _# would be taken as the
separator between the ELSE command and the next command), however the
command line can consist of a macro or a @filename directive.
.BL
Note also that this command should not be followed by a JUMP, JTRUE,
JFALSE, ABORT ALWAYS, ABORT TRUE, or ABORT FALSE command.
.END NOTE
.NOFILL

Format:  ELSE command-line

eg       TEST $FOUND         ! (is there a found feature)
         ELSE MESSAGE "No found feature"

Valid in all states
.HL 3 ^^^*>THEN\*
.FILL
Obeys the command-line only if the condition flag is TRUE.
.BR
The condition flag is set by the TEST, OR and AND commands (qv) and also
by the user routines.
.BL
Several ELSE and THEN commands may be given in any order without
re-setting the condition flag, as long as the condition flag is not
altered by the macro that is called.
.NOTE
Due to the nature of the command separator _#, it is not possible to put
more than one command in this command line (the _# would be taken as the
separator between the THEN command and the next command), however the
command line can consist of a macro or a @filename directive.
.BL
Note also that this command should not be followed by a JUMP, JTRUE,
JFALSE, ABORT ALWAYS, ABORT TRUE, or ABORT FALSE command.
.END NOTE
.NOFILL

Format:  THEN command-line

eg       TEST $LAYER_>3 _# AND $FC=4 ! layer above 3, and feature code 4
         THEN DELETE

Valid in all states
.HL 3 ^^^*>ABORT\*
.FILL
Causes the current input stream to be aborted. There are several levels
of severity of ABORT
.NOFILL

Format:  ABORT subcommand

Valid in all states
.LIST '*'
.LE ;^^^*>ABORT ALWAYS\*
.FILL
Abort the current input line or macro (default).
This has the effect of ignoring the rest of the commands on the line or
in the macro. It is the equivalent of JUMP to an empty macro.
.NOTE
Note that this command should not be used as the argument to a THEN or
ELSE command.
.END NOTE
.NOFILL

Format:  ABORT ALWAYS
or       ABORT
.LE ;^^^*>ABORT FALSE\*
.FILL
Abort the current input line or macro, if the condition flag is FALSE.
This has the effect of ignoring the rest of the commands on the line or
in the macro. It is the equivalent of JFALSE to an empty macro.
.NOTE
This command should not be used as the argument to a THEN or ELSE
command.
.END NOTE
.NOFILL

Format:  ABORT FALSE
.LE ;^^^*>ABORT FILE\*
.FILL
Abort the current input line or macro and all the rest of the lines in
the current command file.
.NOFILL

Format:  ABORT FILE
.LE ;^^^*>ABORT INPUT\*
.FILL
Aborts all current command input and returns to first level interactive
input. This means that all commands on command lines or macros are
ignored as are all unread lines in any command files. These command
files are closed. The effect of any RESPOND command is cancelled.
.BL
This command is the equivalent to entering CTRL/C while reading
commands. After this command has aborted all current input, any command
line specified by the AFTER ABORT command is executed.
.NOFILL

Format:  ABORT INPUT
.LE ;^^^*>ABORT RESPOND\*
.FILL
Cancels a previous RESPOND command.
.BL
Returns input from second level interactive input (ie after a RESPOND
command has been given, and awaiting a CONTINUE command), to first level
interactive input. 
.NOFILL

Format:  ABORT RESPOND
.LE ;^^^*>ABORT TRUE\*
.FILL
Abort the current input line or macro, if the condition flag is TRUE.
This has the effect of ignoring the rest of the commands on the line or
in the macro. It is the equivalent of JTRUE to an empty macro.
.NOTE
This command should not be used as the argument to a THEN or ELSE
command.
.END NOTE
.NOFILL

Format:  ABORT TRUE
.END LIST
.HL 3 ^^^*>TEST\*
.! ***************
.NOFILL;.!******************** NOTE difference in format for this command
.! ***************
Sets the condition flag depending on the result of the test.
The condition flag is used by the JTRUE, JFALSE, THEN, and ELSE commands.
The variable may be any system or user-declared variable.
The inequality may be any of:     =     _>    _>=     _<    _<=    _<_>
               with synonyms:   .EQL. .GTR. .GEQ. .LSS. .LEQ. .NEQ.
                         and:                     .LT.
Inequality names may be abbreviated.
If the inequality is absent, but expression is present, then = is assumed. 
If both inequality and expression are absent, then the variable is tested
as a logical.
For CHARACTER variables, the result of a comparison is determined according
to the ASCII collating sequence, assuming that the shorter string is padded
with spaces to the length of the longer.

Format:  TEST variable [ [inequality] expression]

eg       TEST NAME=Fred         True if CHARACTER variable NAME is "Fred"
         TEST $FOUND            True if there is a found feature
         TEST R_>3.14            True if REAL variable R is greater than 3.14

Valid in all states
.FILL
.HL 3 ^^^*>OR\*
.FILL
ORs the existing value of the condition flag with the result of the test.
.BR
If the condition flag is already TRUE, the test is not performed.
.BR
Syntax is exactly as for TEST.
.NOFILL

Format:  OR variable [ [inequality] expression]

Valid in all states
.HL 3 ^^^*>AND\*
.FILL
ANDs the existing value of the condition flag with the result of the
test. 
.BR
If the condition flag is already FALSE, the test is not performed, so a
sequence such as TEST#$FOUND#_##AND#$FC=3 will not test $FC (which would
cause an error) if $FOUND was FALSE.
.BR
Syntax is exactly as for TEST.
.NOFILL

Format:  AND variable [ [inequality] expression]

Valid in all states
.HL 3 ^^^*>CANCEL\*
.FILL
Allows macros, regions, variables, RESPOND input and lists of operations
to be cancelled. 
.NOFILL

Format:  CANCEL  subcommand

Valid in states  INITIAL READY
.LIST '*'
.LE ;^^>CANCEL ADD__FEATURE
.BL
.FILL
Cancels the list of ACs set up by the OPERATION ADD__FEATURE command.
.NOFILL

Format:  CANCEL ADD__FEATURE
.LE ;^^>CANCEL ANGLESQ__POINT
.BL
.FILL
Cancels the list of point attributes set up by the OPERATION
ANGLESQ__POINT command. 
.NOFILL

Format:  CANCEL ANGLESQ__POINT
.LE ;^^>CANCEL BREAK__POINT
.BL
.FILL
Cancels the list of point attributes set up by the OPERATION BREAK__POINT
command. 
.NOFILL

Format:  CANCEL BREAK__POINT
.LE ;^^>CANCEL CIRCLE__POINT
.BL
.FILL
Cancels the list of point attributes set up by the OPERATION
CIRCLE__POINT command. 
.NOFILL

Format:  CANCEL CIRCLE__POINT
.LE ;^^>CANCEL CODE__CH__FEATURE
.BL
.FILL
Cancels the list of ACs set up by the OPERATION CODE__CH__FEATURE
command. 
.NOFILL

Format:  CANCEL CODE__CH__FEATURE
.LE ;^^>CANCEL CURVE__POINT
.BL
.FILL
Cancels the list of point attributes set up by the OPERATION CURVE__POINT
command. 
.NOFILL

Format:  CANCEL CURVE__POINT
.LE ;^^>CANCEL DIGITISE__POINT
.BL
.FILL
Cancels the list of point attributes set up by the OPERATION
DIGITISE__POINT command. 
.NOFILL

Format:  CANCEL DIGITISE__POINT
.LE ;^^>CANCEL FAR__MOVE__POINT
.BL
.FILL
Cancels the list of point attributes set up by the OPERATION
FAR__MOVE__POINT command. 
.NOFILL

Format:  CANCEL FAR__MOVE__POINT
.LE ;^^>CANCEL FILTER__POINT
.BL
.FILL
Cancels the list of point attributes set up by the OPERATION
FILTER__POINT command. 
.NOFILL

Format:  CANCEL FILTER__POINT
.LE ;^^>CANCEL GEO__CH__FEATURE
.BL
.FILL
Cancels the list of ACs set up by the OPERATION GEO__CH__FEATURE command.
.NOFILL

Format:  CANCEL GEO__CH__FEATURE
.LE ;^^>CANCEL JOIN__POINT
.BL
.FILL
Cancels the list of point attributes set up by the OPERATION JOIN__POINT
command. 
.NOFILL

Format:  CANCEL JOIN__POINT
.LE ;^^^*>CANCEL MACRO\*
.FILL
Deletes the specified macro. The storage is freed and becomes available
for re-use.
A macro must be deleted using this command before it can be redefined.
.NOFILL

Format:  CANCEL MACRO  name

eg       CANCEL MACRO FRED
or       CANCEL MACRO CMDMEN23 (in the case of a menu box)
.LE ;^^>CANCEL MOVE__POINT
.BL
.FILL
Cancels the list of point attributes set up by the OPERATION MOVE__POINT
command. 
.NOFILL

Format:  CANCEL MOVE__POINT
.LE ;^^>CANCEL OFFSET__POINT
.BL
.FILL
Cancels the list of point attributes set up by the OPERATION
OFFSET__POINT command. 
.NOFILL

Format:  CANCEL OFFSET__POINT
.LE ;^^>CANCEL OS__MH__FLAGS
.BL
.FILL
Cancels the group of feature codes and the corresponding flag character
associated with the specified flag number by the OPERATION OS__MH__FLAGS
command.
.NOFILL

Format:  CANCEL OS__MH__FLAGS flagno
.LE ;^^>CANCEL OS__MH__TEXTCAT
.BL
.FILL
Cancels all the text categories that are currently set to modify the
flag setting action of texts for the specified flag.
.NOFILL

Format:  CANCEL OS__MH__TEXTCAT flagno
.LE ;^^>CANCEL OTHER__POINT
.BL
.FILL
Cancels the list of point attributes set up by the OPERATION OTHER__POINT
command. 
.NOFILL

Format:  CANCEL OTHER__POINT
.LE ;^^>CANCEL PARTSQ__POINT
.BL
.FILL
Cancels the list of point attributes set up by the OPERATION
PARTSQ__POINT command. 
.NOFILL

Format:  CANCEL PARTSQ__POINT
.LE ;^^^*>CANCEL REGION\*
.FILL
Removes the specified region from the currently defined list of regions.
This frees the storage, and allows the region to be redefined.
.NOFILL

Format:  CANCEL REGION integer

eg       CANCEL REGION 3
.LE ;^^^*>CANCEL RESPOND\*
.FILL
Returns input from second level interactive input (ie after a RESPOND
command has been given, and awaiting a CONTINUE command), to first level
interactive input. 
.BL
This command is a synonym for ABORT RESPOND.
.NOFILL

Format:  CANCEL RESPOND
.LE ;^^>CANCEL SQUARE__POINT
.BL
.FILL
Cancels the list of point attributes set up by the OPERATION
SQUARE__POINT command. 
.NOFILL

Format:  CANCEL SQUARE__POINT
.LE ;^^>CANCEL TRANSFORM__POINT
.BL
.FILL
Cancels the list of point attributes set up by the OPERATION
TRANSFORM__POINT command. 
.NOFILL

Format:  CANCEL TRANSFORM__POINT
.LE ;^^>CANCEL USER__FEATURE
.FILL
Cancels the list of point attributes set up by the OPERATION
USER__FEATURE command. 
.NOFILL

Format:  CANCEL USER__FEATURE
.LE ;^^>CANCEL USER__POINT
.FILL
Cancels the list of point attributes set up by the OPERATION
USER__POINT command. 
.NOFILL

Format:  CANCEL USER__POINT
.LE ;^^^*>CANCEL VARIABLE\*
.FILL
Deletes the specified variable. The storage is freed and becomes
available for re-use. The variable may be declared again if required,
possibly with a different type. In the case of an array variable, the
whole array is cancelled - no subscript may be given.
.NOFILL

Format:  CANCEL VARIABLE  name

eg       CANCEL VARIABLE X
.END LIST
.HL 3 ^^^*>DECLARE\*
.FILL
Declares a variable, which may be set by the LET or INQUIRE commands,
tested by the TEST, AND, and OR commands, or substituted into commands
by enclosing its name in single quotation marks. Variable names must
consist of up to 16 alphabetic characters (including underline). An array
variable may be declared by following the name by an integer in the
range 1 to 65535, thus the command DECLARE INTEGER I20 would allow the
use of integer variables I1, I2, .._. , I20. Caution should be exercised
in declaring large arrays, as the computer memory may be insufficient.
.NOFILL

Format:  DECLARE subcommand

Valid in all states
.LIST '*'
.LE ;^^^*>DECLARE CHARACTER\*
.FILL
Declare a character variable, or array of character variables,
and initialise to null (zero characters). The variable may
used to contain a string characters.
.NOFILL

Format:  DECLARE CHARACTER  name[n]

eg       DECLARE CHARACTER NAME
or       DECLARE CHARACTER NAME3
.LE ;^^^*>DECLARE DOUBLE\*
.FILL
Declare a double precision real variable or array and initialise to 0.0.
The variable may contain real values with absolute value in the range
0.29E-38 to 1.7E38, with a precision of 15 decimal digits.
.NOFILL

Format:  DECLARE DOUBLE  name[n]

eg       DECLARE DOUBLE D
or       DECLARE DOUBLE D20
.LE ;^^^*>DECLARE INTEGER\*
.FILL
Declare an integer variable or array and initialise to 0. The variable may
contain integers in the range -2147483648 to 2147483647.
.NOFILL

Format:  DECLARE INTEGER  name[n]

eg       DECLARE INTEGER I
or       DECLARE INTEGER I2048
.LE ;^^^*>DECLARE REAL\*
.FILL
Declare a real variable or array and initialise to 0.0. The variable may
contain real values with absolute value in the range 0.29E-38 to 1.7E38,
with a precision of 7 to 8 decimal digits.
.NOFILL

Format:  DECLARE REAL  name[n]

eg       DECLARE REAL R
or       DECLARE REAL R24
.END LIST
.HL 3 ^^^*>LET\*
.FILL
Allows the value of a variable to be set. The variable must have been
declared using a DECLARE command (qv). System variables may not be set.
See the section on the LITES2 command language for further information
on expressions. 
.NOFILL

Format:  LET  variable [=] expression

eg       LET NAME=Building      Sets CHARACTER variable NAME to "Building"
         LET NAME               Sets CHARACTER variable NAME to the null string
         LET I=3                Sets INTEGER variable I to 3
         LET I=(3+4)/2          Sets INTEGER variable I to 3
         LET R=(3+4)/2          Sets REAL variable R to 3.5
         LET RR23=3.14          Sets the 23rd element of REAL array RR
                                to 3.14

Valid in all states
.HL 3 ^^^*>INQUIRE\*
.FILL
Obtains the value for a variable from the interactive controls (keyboard, or
pucks, or menus). INQUIRE is most useful in command files or macros.
The prompt string is displayed at the terminal. If prompt is omitted, a
default of "Enter TYPE VARIABLE: " e.g. "Enter Real R: " is used.
.BR
If the prompt is to have leading spaces or tabs, then it must be enclosed
in double quotes.
.BR
The string entered by the user may be any expression which would have been
valid in a LET command for the variable. It is quite possible to respond with a
button press or menu probe - the puck or menu macro name will be returned. The
cursor may be tracked before the response is entered. If a blank line is
entered, a character variable is set to the null string, while for other types
the user is reprompted for a valid answer. Pressing CTRL/Z will leave the
variable unchanged.
.NOFILL

Format:  INQUIRE variable [prompt]

eg       INQUIRE NAME "What is your name? "

Valid in all states
.HL 3 ^^^*>HELP\*
.FILL
Gives information about LITES2 commands and other subjects.
If no subject given then a list of subjects will be printed.
If HELP is entered interactively (i.e. not from a command file
or macro), the user is prompted for further
topics. The possible responses are the same as in the DCL HELP utility.
CTRL/Z will exit from help and return to the LITES2 prompt (as will a
sufficient number of blank lines).
.NOFILL

Format:  HELP  [text]

eg       HELP
or       HELP FIND

Valid in all states
.HL 3 ^^^*>MESSAGE\*
.FILL
Outputs the given string to the terminal, or a blank line if none given.
Useful in command files to let the operator know what is going on.
If the text is to have leading spaces or tabs, then it must be enclosed
in double quotes.
.NOFILL

Format:  MESSAGE  [text]

Valid in all states
.HL 3 ^^^*>PING\*
.FILL
Sounds a bell at the terminal to attract the operator's attention.
.NOFILL

Format:  PING

Valid in all states
.HL 3 ^^^*>RASPBERRY\*
.FILL
Sounds a distinctive noise ("raspberry") at the terminal. The is usually
two bells unless the hardware permits anything else.
.BR
Useful to signal errors.
.NOFILL

Format:  RASPBERRY

Valid in all states
.HL 3 ^^^*>WAIT\*
.FILL
Pauses execution for the given time (up to 60 seconds).
.BR
Useful in command files to allow the operator time to think.
.BR
The wait may be terminated prematurely by CTRL/C.
.NOFILL

Format:  WAIT  real

Valid in all states
.HL 3 ^^^*>PROMPT\*
.FILL
Allows control of the interactive command prompt.
.NOFILL

Format:  PROMPT  subcommand

Valid in all states
.LIST '*'
.LE ;^^^*>PROMPT OFF\*
.FILL
Disable all prompting.
.NOFILL

Format:  PROMPT OFF
.LE ;^^^*>PROMPT ON\*
.FILL
Enable prompting using last specified prompt type (default).
If no prompt has been specified then default is prompt with '_*'.
.NOFILL

Format:  PROMPT ON
or       PROMPT
.LE ;^^^*>PROMPT STATES\*
.FILL
Enable prompting using current command state as prompt.
.NOFILL

Format:  PROMPT STATES
.LE ;^^^*>PROMPT TEXT\*
.FILL
Set prompt string to given text.
.BR
If the text is to have leading spaces or tabs, then it must be enclosed
in double quotes.
.NOFILL

Format:  PROMPT TEXT textstring
eg:      PROMPT TEXT Yes, Oh Master ?
.END LIST
.HL 3 ^^^*>PRIORITY\*
.FILL
Set priority of puck buttons when pressed over a menu area.
.NOFILL

Format:  PRIORITY  subcommand

Valid in all states
.LIST '*'
.LE ;^^^*>PRIORITY POSITION\*
.FILL
Instructs the specified puck buttons to do an implicit POSITION command
to move the LITES2 cursor to the device position before executing the
command on the button. This POSITION command will not be executed if the
previous command specifically positioned the LITES2 cursor (eg a FIND,
SEARCH, POINT or NEXT commands).
.BL
The default action is for table pucks to have PRIORITY POSITION commands
on all buttons (if they are pressed while in a map or tracking area), as
do buttons on a stereo digitising instrument. Bitpads and mice do not have
PRIORITY POSITION commands on their buttons by default.
.BL
The command cancels any previous priority position settings for the
puck, and if the range is omitted, no buttons will execute an implicit
POSITION command. 
.NOFILL

Format:  PRIORITY POSITION  puckname [range]

eg       PRIORITY POSITION ALTEKPUCK 13-16
.LE ;^^^*>PRIORITY PUCK\*
.FILL
Set priority for the buttons on a particular puck. The given buttons
will obey their puck function even if pressed over a menu area. The
command cancels any previous priority puck settings for the puck, and if
the range is omitted, no buttons have priority. 
.NOFILL

Format:  PRIORITY PUCK  puckname [range]

eg       PRIORITY PUCK ALTEKPUCK 4,13-16
.END LIST
.HL 3 ^^^*>OPERATION\*
.FILL
Defines operations that will produce automatic updating of ACs 
(ancillary codes) of features, attributes of points and parts of the map
header when features are edited.
.INDEX AC
.INDEX point attribute
.BL
When features are to be updated, the AC or attribute to be updated can
be specified by its name  or by the corresponding integer. This integer
is referred to as the  "type" when considering ACs, and the "code" when
considering point  attributes.
.BL
See the section on LITES2 command language for details of the format
of the value for this type of command argument.
.BL
More than one AC or attribute can be specified to be updated by each
operation. The currently set operations can be displayed with the SHOW 
OPERATION command.
.BL
If when defining an operation to update features, the AC or attribute to
be updated is specified without a value, then on completion of the
operation, that AC or attribute will be deleted from the feature or
point rather than the value being updated or inserted.
.BL
When elements of the map header are to be updated, the syntax is
different - see OPERATION OS__MH__FLAGS and OPERATION OS__MH__TEXTCAT
below.
.BL
Operations can be cancelled with the CANCEL command (qv).
.NOTE
If the form of the output file is not set to output revision level 1,
either by setting the logical name LSL$IFF__OUTPUT__REVISION
.INDEX LSL$IFF__OUTPUT__REVISION
to 1 or by the use of the ENABLE REVISION__LEVEL command, any point
attributes (apart from Z) will be lost on completion of editing. Points
with the attribute Z will produce ZS  entries in the IFF file, rather
than ST entries.
.BR
See the IFF user guide for more information on IFF files and
LSL$IFF__OUTPUT__REVISION
.END NOTE
.NOFILL

Format:  OPERATION  subcommand

Valid in states  INITIAL (after FRT has been read) READY
.LIST '*'
.LE ;^^>OPERATION ADD__FEATURE
.BL
.FILL
When a feature is constructed, it will have the ACs and values specified
by this OPERATION command, in addition to any specified in the current
set of construction attributes.  As the ACs in the construction
attributes are deleted whenever a new feature code is set, the use of
OPERATION ADD__FEATURE allows all features (whatever their feature code)
to have the ACs specified by this command. 
.NOFILL

Format:  OPERATION ADD__FEATURE  type [value]

eg       OPERATION ADD__FEATURE  Secondary__FC 24
.LE ;^^>OPERATION ANGLESQ__POINT
.BL
.FILL
Points in features generated by the >SQUARE ANGLE command will
inherit the attributes specified by this OPERATION command.
.NOFILL

Format:  OPERATION ANGLESQ__POINT  type [value]

eg       OPERATION ANGLESQ__POINT  Z -999.9
.LE ;^^>OPERATION BREAK__POINT
.BL
.FILL
When points are inserted in features during a LITES2 edit, eg >PART 
operations, >CLIP commands or the >BRIDGE command, then the point will
take the attributes specified by THIS OPERATION.
.NOFILL

Format:  OPERATION BREAK__POINT  type [value]

eg       OPERATION BREAK__POINT  Z -999.9
.LE ;^^>OPERATION CIRCLE__POINT
.BL
.FILL
Any point that is generated with the CIRCLE, ARC, POLYGON or POLARC
.INDEX CIRCLE
.INDEX ARC
.INDEX POLYGON
.INDEX POLARC
commands will inherit the attributes specified by this OPERATION command
in addition to those attributes specified in the construction attribute
set at the point when END was entered to complete the feature. 
.NOFILL

Format:  OPERATION CIRCLE__POINT  type [value]

eg       OPERATION CIRCLE__POINT  Z -999.9
.LE ;^^>OPERATION CODE__CH__FEATURE
.BL
.FILL
Any feature that has an AC of the type specified by this OPERATION
command, will have the value of that AC replaced by the specified value
whenever the feature undergoes an edit that alters its feature code,
feature serial number, AC or the attribute of a point. 
.BR
Note that this operation will not insert an AC in a feature.

.NOFILL

Format:  OPERATION CODE__CH__FEATURE  type [value]

eg       OPERATION CODE__CH__FEATURE  Secondary__FC 24
.LE ;^^>OPERATION CURVE__POINT
.BL
.FILL
Any point that is generated with the >CURVE command will inherit the
attributes specified by this OPERATION command in addition to those
attributes specified in the construction attribute set. 
.NOFILL

Format:  OPERATION CURVE__POINT  type [value]

eg       OPERATION CURVE__POINT  Z -999.9
.LE ;^^>OPERATION DIGITISE__POINT
.BL
.FILL
Any point that is digitised with the >START or >INSERT commands will
inherit the attributes specified by this OPERATION command in addition
to those attributes specified in the construction attribute set. 
.NOFILL

Format:  OPERATION DIGITISE__POINT  type [value]

eg       OPERATION DIGITISE__POINT  Z 23.6
.LE ;^^>OPERATION FILTER__POINT
.BL
.FILL
Points in features generated by the >FILTER (FEATURE) command will
inherit the attributes specified by this OPERATION command. Note that the
attributes of the original points will not be transferred to the new
feature. 
.NOFILL

Format:  OPERATION FILTER__POINT  type [value]

eg       OPERATION FILTER__POINT  Z -999.9
.LE ;^^>OPERATION FAR__MOVE__POINT
.BL
.FILL
Mark points that have been moved, during an editing operation, by more
than a specified horizontal distance. This distance criterion is set by
the TOLERANCE FAR_MOVE command (qv).
.BL
The attributes affected by this operation are set after any others
controlled by other (more specific) OPERATION commands. Thus, for
example, if the following OPERATIONS are set up:
.NOFILL

     OPERATION MOVE__POINT     text  -9
     OPERATION FAR__MOVE__POINT text  -8

.FILL
a point that is edited, and moved by less than TOLERANCE FAR_MOVE, will
have its `text' attribute set to -9, while one that is moved by more
than TOLERANCE FAR_MOVE will have its `text' attribute set to -8.
.NOFILL

Format:  OPERATION FAR__MOVE__POINT  type [value]

eg       OPERATION FAR__MOVE__POINT  Z
.LE ;^^>OPERATION GEO__CH__FEATURE
.BL
.FILL
Any feature that has an AC of the type specified by this OPERATION
command, will have the value of that AC replaced by the specified value
whenever the feature undergoes an edit that alters its position or
geometry. 
.BR
Note that this operation will not insert an AC in a feature.
.NOFILL

Format:  OPERATION GEO__CH__FEATURE  type [value]

eg       OPERATION GEO__CH__FEATURE  Secondary__FC 24
.LE ;^^>OPERATION JOIN__POINT
.BL
.FILL
.INDEX JOIN
When two linear features are joined together, then the new point that 
replaces the two end points takes the attributes of the point from the 
first feature found. These attributes are updated by the attributes 
specified by this OPERATION command.
.BR
Note that the attributes of the corresponding point in the second 
feature are lost.
.NOFILL

Format:  OPERATION JOIN__POINT  type [value]

eg       OPERATION JOIN__POINT  Z -999.9
.LE ;^^>OPERATION MOVE__POINT
.BL
.FILL
Points in features altered by the MOVE, TIE, EDIT, EXTEND or LOOP
.INDEX MOVE
.INDEX TIE
.INDEX EDIT
.INDEX EXTEND
.INDEX LOOP
commands will inherit the attributes specified by this OPERATION command;
if the point has this attribute already, then the value will be updated, 
otherwise the attribute will be added.
.NOFILL

Format:  OPERATION MOVE__POINT  type [value]

eg       OPERATION MOVE__POINT  Z -999.9
.LE ;^^>OPERATION OFFSET__POINT
.BL
.FILL
Points in linear features generated by the >OFFSET command will inherit
the attributes specified by this OPERATION command. Note that the
attributes of the original points will not be transferred to the new
feature. 
.BR
Note that when symbols and texts are offset the OPERATION
TRANSFORM__POINT is the operation that is effective. 
.NOFILL

Format:  OPERATION OFFSET__POINT  type [value]

eg       OPERATION OFFSET__POINT  Z -999.9
.LE ;^^>OPERATION OS__MH__FLAGS
.BL
.FILL
Set the specified flag in the (OS type) map header with the specified
character, when a feature with a feature code in the specified FRT group
has been edited, added or deleted.
.BL
This operation is rather different from all the others:
.BL
.LIST 0
.LE;It is specific to files with an OS type map header
.LE;Only one FRT group and character can be specified for each flag
.LE;The updating of the map header only takes place when the file is
finally written out (after an EXIT or WRITE command), so if the
operation is cancelled before this, the flag will not be changed.
.END LIST
.NOTE NOTES
.LIST
.LE;The present definition of the OS map header limits the number of
flags to 8, and insists that the character must be an upper case letter
or a digit.
.LE;If files with new OS map headers (ie those with customer number
3 or 4) are to be updated, then the logical name >LSL$OS__MH__TABLE must
have been set up to point to a translation table before LITES2 was
invoked. See CONVERT package for details of the file that this logical
name should point to.
.END LIST
.END NOTE
.NOFILL
Format:  OPERATION OS__MH__FLAGS  flagno group char

eg       OPERATION OS__MH__FLAGS  8 WATER A
.LE ;^^>OPERATION OS__MH__TEXTCAT
.BL
.FILL
Refine the effect of the OPERATION OS__MH__FLAGS command, by allowing
specific categories of texts to trigger the flag setting.
.BL
By default, if a text feature code is in a group specified by a
OPERATION OS__MH__FLAGS command, edits to any feature with that feature
code will cause the corresponding flag to be updated. When the command
OPERATION OS__MH__TEXTCAT has been given for a specific flag and text
feature code, only texts with the specified category will cause the flag
to be updated. The command may be repeated for any flag and feature
code, to allow several different text categories of text to be set.
.NOFILL

Format:  OPERATION OS__MH__TEXTCAT  flagno fc category

eg       OPERATION OS__MH__TEXTCAT  8 28 2

.LE ;^^>OPERATION OTHER__POINT
.BL
.FILL
If a point has been edited, but the relevant OPERATION xxxx__POINT
command has not been given, then this OPERATION command takes effect. 
.NOFILL

Format:  OPERATION OTHER__POINT  type [value]

eg       OPERATION OTHER__POINT  Z -999.9
.LE ;^^>OPERATION PARTSQ__POINT
.BL
.FILL
Points in features generated by the >SQUARE PART command will
inherit the attributes specified by this OPERATION command.
.NOFILL

Format:  OPERATION PARTSQ__POINT  type [value]

eg       OPERATION PARTSQ__POINT  Z -999.9
.LE ;^^>OPERATION SQUARE__POINT
.BL
.FILL
Points in features generated by the >SQUARE (WHOLE) and the RECTANGLE
command will inherit the attributes specified by this OPERATION command.
.NOFILL

Format:  OPERATION SQUARE__POINT  type [value]

eg       OPERATION SQUARE__POINT  Z -999.9
.LE ;^^>OPERATION TRANSFORM__POINT
.BL
.FILL
Points in features altered by the >TRANSFORM 
command will inherit the attributes specified by this OPERATION command;
if the point has this attribute already, then the value will be updated, 
otherwise the attribute will be added.
.BR
.INDEX ROTATE
.INDEX TURN
.INDEX LARGER
.INDEX SMALLER
.INDEX OFFSET
.INDEX ALIGN
.INDEX STRETCH
Note that texts and symbols manipulated by the ROTATE, TURN, LARGER,
SMALLER, OFFSET, ALIGN and STRETCH commands will also
inherit the attributes specified by the OPERATION TRANSFORM__POINT
command updated. 
.NOFILL

Format:  OPERATION TRANSFORM__POINT  type [value]

eg       OPERATION TRANSFORM__POINT  Z -999.9
.LE ;^^>OPERATION USER__FEATURE
.FILL
Any feature generated by the USER (or ROUTINE) command that has an AC of
the type specified by this OPERATION command, will have the value of
that AC replaced by the specified value.
.BR
This would allow user routines to create features with an AC that
contains a date or a time that may otherwise be difficult to construct
in a user routine. The user routine would produce a feature with the
appropriate AC with a dummy value, whose correct value would be
inserted by this OPERATION. 
.P 0
Note that this operation will not insert an AC in a feature. 
.NOFILL

Format:  OPERATION USER__FEATURE  type [value]

eg       OPERATION USER__FEATURE  Secondary__FC 24

.LE ;^^>OPERATION USER__POINT
.FILL
Points in features generated by the USER 
command will inherit the attributes specified by this OPERATION command;
if the point has this attribute already, then the value will be updated, 
otherwise the attribute will be added.
.NOFILL

Format:  OPERATION USER__POINT  type [value]

eg       OPERATION USER__POINT  Z -999.9
.END LIST
.HL 3 ^^^*>PRIVILEGE\*
.FILL
Defines commands that cannot subsequently be given, attributes that
may not be altered and points that are held fixed while squaring.
.NOFILL

Format:  PRIVILEGE  subcommand

Valid in state  INITIAL (privileged command;
                         only valid in initialisation file)
.LIST '*'
.LE ;^^^*>PRIVILEGE ATTRIBUTE\*
.FILL
Defines point attributes and ACs that may not be edited during the
current LITES2 session.
.P0
Note that this does not inhibit the editing of the position of a point
with the specified attributes, or of a feature with the specified AC.
.P0
It will not be possible to subsequently give an OPERATION command that
will alter privileged attributes, but any OPERATION command given
before the PRIVILEGE ATTRIBUTE command will be honoured.
.P0
The AC or attribute to be privileged can be specified by its name 
or by the corresponding integer. This integer is referred to as the 
"type" when considering ACs, and the "code" when considering point 
attributes.
.NOFILL

Format:  PRIVILEGE ATTRIBUTE type

eg       PRIVILEGE ATTRIBUTE Z
.LE ;^^^*>PRIVILEGE COMMAND\*
.FILL
Defines commands that may not subsequently be given during the
current LITES2 session.
.P 0
If a primary and secondary command are given, then only the specified
secondary command will be inhibited; if however only a primary command
is given then none of the secondary commands associated with the primary
command will be subsequently accepted in the current LITES2 session.

.NOFILL

Format:  PRIVILEGE COMMAND primary [secondary]

eg       PRIVILEGE COMMAND TOLERANCE SQMT

.LE ;^^^*>PRIVILEGE POINT\*
.FILL
Defines points that are to be held fixed during PART and WHOLE
squaring operations. Points cannot be held fixed during ANGLE
squaring.

.NOTE
This command is only effective if the FIXED option is switched
on with the ENABLE FIXED command (on by default). See the chapter
"Squaring within LITES2" for details of the squaring algorithm used.
.END NOTE

Points with the given attribute and value will be held fixed during 
PART and WHOLE squaring of features.
.P 0
The attribute to be tested can be specified by its name or by the
corresponding integer.
.P 0
The format of the value depends on the data type of the specified
attribute code, either defined by Laser-Scan or defined by the user
in his FRT. 
.NOFILL

Format:  PRIVILEGE POINT attribute value

eg       PRIVILEGE POINT CAPTURE__XY 6

.END LIST
.HL 3 ^^^*>PROJECTION\*
.FILL
Controls the use of projection information in LITES2
.BL
LITES2 has the ability to work on several IFF files which are in
different projections at the same time. It does this by specifying the
projection to display the files in, called LITES2 space, and
transforming the coordinates in the individual files to this space
before they are used by LITES2. It should be noted that the data files
remain in their original projection throughout the LITES2 session.
.BL
This facility depends on all the files being used having a valid
projection set up in their map descriptor and these projections  all
being referred to the same spheroid.  See the Documentation for the
program ITRANS for more information about map descriptors.
.NOTE
When using this mode, and setting maps up to be digitised on a
digitising table, the paper maps should be in the same projection as the
LITES2 space.
.END NOTE
.NOFILL

Format:  PROJECTION  subcommand
.LIST '*'
.LE ;^^^*>PROJECTION IFF\*
.FILL
To select the projection for the LITES2 coordinate space, a map
descriptor is required. This is supplied as the map descriptor in any
IFF file that is in the required projection. When an IFF file with a
valid map descriptor representing a valid projection is given with this
command, all subsequent files that are read in will be displayed in this
projection.
.BL
If the command is given with no file name, then LITES2 reverts to the
default action of assuming all the files are in the same projection.

.NOFILL
Format:  PROJECTION IFF [filename]

eg       PROJECTION IFF testcard

Valid in state  INITIAL 
.LE ;^^^*>PROJECTION OUTPUT\*
.FILL
When working with "transformations on the fly", when individual maps are
output (with either the WRITE or EXIT commands with no filename) the
files are written back to their original coordinate system. If more than
one map is selected for output and WRITE or EXIT is given with a file
name, the maps are combined in LITES2 coordinate space, and the combined
map is output in this space. When only one map is selected and it is
output to a named file, whether it is output in its original projection
or in LITES2 coordinate space is controlled by the PROJECTION OUTPUT
command.
.NOFILL

Valid in states  INITIAL READY
.LIST 'o'
.LE ;^^^*>PROJECTION OUTPUT OFF\*
.FILL
Select the (default) mode where individual maps being output to a named
file are output in the coordinate system of the original map.
.NOFILL

Format:  PROJECTION OUTPUT OFF
.LE ;^^^*>PROJECTION OUTPUT ON\*
.FILL
Select the mode where individual maps being output to a named file are
transformed into LITES2 coordinate space while being output.
.NOFILL

Format:  PROJECTION OUTPUT ON
.END LIST
.LE ;^^^*>PROJECTION RANGE\*
.FILL
When working with a LITES2 space that is different from that of the IFF
files that hold the data, it is necessary for LITES2 to work out the
range of the data in each file in LITES2 space. There are three possible
ways of calculating this range.
.BL
Unfortunately, it is not possible to know if the range has been
calculated correctly before the IFF data has been read, but if while
inputting the data LITES2 detects a possible problem an informational
message is output and the system variable $RANGE__PROBLEM is set to TRUE.
.NOFILL

Valid in states  INITIAL READY
.LIST 'o'
.LE ;^^^*>PROJECTION RANGE CORNER\*
.FILL
Transform the corners of the minimum bounding rectangle defined by the
Range entry in the IFF file, and take the minimum and maximum of the x
and y of these transformed points. This is fast, but may not give an
accurate (or indeed any) result for data that is being transformed into
a radically different size or shape.
.NOFILL

Format:  PROJECTION RANGE CORNER
.LE ;^^^*>PROJECTION RANGE DATA\*
.FILL
Transform all the coordinate data in the file and calculate a new range
in LITES2 space. This provides the most accurate solution, with a 
genuine minimum range, but it may be time consuming if the data files
are large.
.NOFILL

Format:  PROJECTION RANGE DATA
.LE ;^^^*>PROJECTION RANGE SIDE\*
.FILL
Transform a selection of points along the boundaries of the minimum
bounding rectangle as defined by the range entry, and use the
transformed points to calculate the range of the data in LITES2 space.
This method will give a correct result if enough points are selected
between the corners of the minimum bounding rectangle. If no number
is given, then the current specified number is used.
.BL
This is the default setting, with the number of intermediate points
along each edge being set to 20.
.NOFILL

Format:  PROJECTION RANGE SIDE [number]
.END LIST
.END LIST
.SUBTITLE General Commands
.PAGE
.HL 2 ^^^*General Commands\*
.INDEX General Commands
.HL 3 ^^^*>ABANDON\*
.FILL
Abandons current operation.
.BR
Drops any found feature and returns to READY state.
.NOFILL

Format:  ABANDON

Valid in all states
.HL 3 ^^^*>END\*
.FILL
Ends editing or construction type operation.
.NOFILL

Format:  END

Valid in states  EDIT MODIFY ON WINDOW CONSTRUCT AC RECOVER PAINT
.HL 3 ^^^*>CREATE\*
.FILL
Creates a new entity.
.NOFILL

Format:  CREATE  subcommand

Valid in states  INITIAL READY
.LIST '*'
.LE ;^^^*>CREATE ABORT__MAILBOX\*
.FILL
Creates a mailbox which can be used by other processes to abort LITES2
operations. When a process writes a message to the mailbox, LITES2
behaves as though CTRL/C had been pressed, aborting certain commands,
or returning to interactive input. The message written to the mailbox
is output by LITES2 after the "Operation aborted" message.
.P 0
If the message begins with the digit 0, 1, or 2, then this controls the
"severity" of the abort. 0 (or no digit at all) means the same as a
keyboard CTRL/C - it will abort commands such as DRAW if any are in progress,
but if not will abort the reading of any macros and command files. 1 will
abort commands such as DRAW, but will not affect command decoding. 2 will
abort certain commands, and also abort command decoding. The digit is
removed from the message before it is printed.
.P 0
If the name argument is given, then a mailbox with the given name will
be created. The name is converted to upper case. It should
not contain spaces or other punctuation marks. If the name argument is
omitted, the default name LSL$LITES2ABORT will be used.
.P 0
By default, the logical name for the mailbox goes into the JOB logical
name table, so that it will be visible to any subprocesses.
If it was required, for example, that the logical name for the mailbox
was placed in the group logical name table, then give the DCL command
.P 0
##$ Define/table=LNM$PROCESS__DIRECTORY _-
.BR
#################LNM$TEMPORARY__MAILBOX LNM$GROUP
.P 0
before starting LITES2.
.NOFILL

Format:  CREATE ABORT__MAILBOX
or       CREATE ABORT__MAILBOX  name
.LE ;^^^*>CREATE LAYER\*
.FILL
Create a new layer.
.NOFILL

Format:  CREATE LAYER  integer

Valid in state  READY
.LE ;^^^*>CREATE LOGICAL\*
.FILL
Creates (defines) a logical name.
If either the logical name or the equivalence string contains spaces then it
should be enclosed in double quotes. Both strings are converted to upper case
unless enclosed in double quotes. If the equivalence string is omitted, then
the logical name is deassigned.
.P 0
The logical name is defined in the process table (LNM$PROCESS) at user mode.
This means that it will automatically be deassigned when LITES2 exits, and is
therefore only useful during the run of LITES2. A particular use is to define
logical names for use by hardcopy plotting output routines.
.NOFILL

Format:  CREATE LOGICAL  logical__name equivalence__string
or       CREATE LOGICAL  logical__name ! (deassign)

eg       CREATE LOGICAL LSL$PS TTA2:
.LE ;^^^*>CREATE MAILBOX\*
.FILL
Creates a mailbox which can be used for communication between LITES2 and
other processes. The command has two forms, taking either an integer
in the range 1-4, or a name.
.P 0
The integer argument is the auxiliary input number, thus CREATE MAILBOX 1
creates a mailbox with logical name LSL$LITES2AUX, while CREATE
MAILBOX n for n = 2, 3, or 4 creates a mailbox with logical name
LSL$LITES2AUX__n. LITES2 will attempt to read interactive commands from
these mailboxes. The logical name should not already exist when the
CREATE MAILBOX command is given - LITES2 will automatically attempt to
read commands from these logical names if they exist.
.P 0
If the name argument is given instead of the integer, then a mailbox
with the given name will be created, but LITES2 will not automatically
attempt to read from it. The name is converted to upper case. It should
not contain spaces or other punctuation marks. Once created, the mailbox
may be treated as a file by any of the LITES2 commands which use text
files (e.g. the FILE commands, or @). For example, one could use CREATE
MAILBOX OUTPUT, then FILE CREATE 1 OUTPUT:, and FILE WRITE string to send
text strings to another process. Note that attempts to read or write
the mailboxes will not complete until the cooperating process writes or
reads, so care must be taken not to hang LITES2 in a permanent wait
state.
.P 0
By default, the logical name for the mailbox goes into the JOB logical
name table, so that it will be visible to any subprocesses.
If it was required, for example, that the logical name for the mailbox
was placed in the group logical name table, then give the DCL command
.P 0
##$ Define/table=LNM$PROCESS__DIRECTORY _-
.BR
#################LNM$TEMPORARY__MAILBOX LNM$GROUP
.P 0
before starting LITES2.
.NOFILL

Format:  CREATE MAILBOX  integer
or       CREATE MAILBOX  name
.LE ;^^^*>CREATE MEMORY\*
.FILL
Reserves the specified number of pages of virtual memory for use by
LITES2 dynamic memory allocation. It is intended that this command be
used when image files are to be repeatedly opened and closed. If LITES2
has to allocate memory at a higher address than currently open images,
then when an image is closed, the memory used by it will not be able to
be reused, and the next image opened will use up more memory. Use the
CREATE MEMORY command to reserve enough space for the expected use of
dynamic memory.
.NOFILL

Format:  CREATE MEMORY  integer
.END LIST
.HL 3 ^^^*>UNITS\*
.FILL
Overrides the type of units expected for the following command.
.NOFILL

Format:  UNITS  subcommand

Valid in all states except INITIAL
.LIST '*'
.LE ;^^^*>UNITS FACTOR\*
.FILL
Specifies a temporary conversion factor for coordinate units. The given
number multiplies IFF units to give the required units, thus if IFF
units were metres, then the command UNITS FACTOR 0.001 would allow the
argument to the next command to be specified in kilometres. A
descriptive string may be given after the factor. This appears in the
output from some EXAMINE commands. The last specified factor is
available in the system variable $UNIT__FACTOR, and the descriptive
string in $UNIT__DESC.
.NOFILL

Format:  UNITS FACTOR  real [string]

eg       UNITS FACTOR 0.001 kilometres
         OFFSET 0.2    (offsets by 200 IFF units rather then 0.2)

.LE ;^^^*>UNITS IFF\*
.FILL
Commands that expect their arguments in sheet mm will accept them as
IFF units if preceded by this command
.NOFILL

Format:  UNITS IFF

eg       UNITS IFF
         TOLERANCE SQMT 10    (takes 10 as 10 IFF units, not 10 mm)

.LE ;^^^*>UNITS MMS\*
.FILL
Commands that expect their arguments in IFF units will accept them as
sheet mm if preceded by this command
.NOFILL

Format:  UNITS MMS

eg       UNITS MMS
         OFFSET 1.2    (offsets by 1.2 sheet mm, not 1.2 IFF units)

.LE ;^^^*>UNITS NORMAL\*
.FILL
Cancel the effect of a previous UNITS command.
The effect of UNITS is cancelled automatically by the first command
to use it, but UNITS NORMAL may be used to cancel the effect before use.
.NOFILL

Format:  UNITS NORMAL

.END LIST
.HL 3 ^^^*>MERGE\*
.FILL
Merges two entities
.NOFILL

Format:  MERGE  subcommand

Valid in state  READY
.LIST '*'
.LE ;^^^*>MERGE LAYER\*
.FILL
Merges one layer into another, which must already exist
.NOFILL

Format:  MERGE LAYER  old new
.END LIST
.HL 3 ^^^*>RENAME\*
.FILL
Renames an entity.
.NOFILL

Format:  RENAME  subcommand

Valid in state  READY
.LIST '*'
.LE ;^^^*>RENAME LAYER\*
.FILL
Renames one layer as another, which must not already exist
.NOFILL

Format:  RENAME LAYER  old new
.END LIST
.HL 3 ^^^*>USER\*
.FILL
Specifies that a particular user-supplied operation is to be performed.
If there is a found feature it is passed from LITES2 to the user-routine
image, which can interrogate aspects of the feature, or modify it and
pass it back. 
.P 0
Other information which is passed to the user-routine includes an
identifying integer and an optional string (as input with the command),
the current cursor position, the current state and the value of the
condition flag (used for JUMP etc (qv)).
.P 0
Data that can be passed from the user-routine to LITES2, as well as a
feature, includes the condition flag and a LITES2 command string which
will be the next command string to be obeyed.
.P 0
The shareable image to be used is pointed to by the logical name
LSL$LITES2ROUTINES
.P 0
For information about writing user-routines, see section 8.
.NOFILL

Format:  USER  integer [string]

Valid in states:
INITIAL READY LINE CIRCLE TEXT SYMBOL EDIT MODIFY ON WINDOW CONSTRUCT AC
.HL 3 ^^^*>ROUTINE\*
.FILL
An extended version of the USER command that allows up to 10 external
images to be accessed. (see USER command).
.P 0
There are two sets of ROUTINE commands available -
.NOFILL

     ROUTINE 1   to ROUTINE 5   are for images supplied by the user,

     ROUTINE 101 to ROUTINE 105 are reserved for additional images
                                supplied by Laser-Scan.

.FILL

The shareable image to be used is pointed to by the logical name
LSL$LITES2ROUTINES__n, where n is the first argument to the command.

.NOFILL

     ROUTINE 0 is an alias for the command USER

.FILL
See the section 8 for more information, and details of how to write user
routines. 
.NOFILL

Format:  ROUTINE integer integer [string]

Valid in states:
INITIAL READY LINE CIRCLE TEXT SYMBOL EDIT MODIFY ON WINDOW CONSTRUCT AC
.HL 3 ^^^*>BASE\*
.FILL
Specifies that the current segment of the found feature
is to be used as a baseline.
The currently set bases can be examined with the SHOW BASES command.(qv)
.NOFILL

Format:  BASE subcommand

Valid in state  LINE
.LIST '*'
.LE ;^^^*>BASE EDGE\*
.FILL
The baseline is used when the next EDGEMATCH command is given.
Only lines that are longer than the tolerance SQBT will be accepted
as bases for edgematching.
.BR
On completion of the command, LITES2 returns to READY state.
.NOFILL

Format:  BASE EDGE
.LE ;^^^*>BASE ORIENT\*
.FILL
The baseline is used when the next ORIENT command is given.
Only lines that are longer than the tolerance SQBT will be accepted
as bases for orienting.
.BR
On completion of the command, LITES2 returns to READY state.
.NOFILL

Format:  BASE ORIENT
.LE ;^^^*>BASE SQUARE\*
.FILL
The current line is added to the list of bases to be used for OS type squaring.
.BR
Only lines that are longer than the tolerance SQBT will be accepted for
squaring.
.BR
Up to five of these bases can be defined before any SQUARE command is given and
the definitions are lost when either an explicit or an implicit ABANDON command
is given. On completion of this command, the program remains in LINE state. 
.NOFILL

Format:  BASE SQUARE
or       BASE
.END LIST
.HL 3 ^^^*>ASK\*
.FILL
A command that places information in associated system variables.
.BL
Commands that return integers, place the information in the variables
$ASK__INT n, those that return real values place them in the variables
$ASK__REAL n and those that return character (string) values place them
in $ASK__CHAR n.
.BL
Commands may return values in one or more of these variables.
.BL
For upwards compatibility, the integer variable $MAP__NUMBER is a synonym
for $ASK__INT 1 and the real variables $TABLEXY are synonyms for $ASK__REAL.
.NOFILL

Format:  ASK subcommand

Valid in all states (where appropriate)
.LIST '*'
.LE ;^^^*>ASK CHARACTER\*
.FILL
Takes the argument as an ascii value, and returns the corresponding
character in the variable $ASK__CHAR 1. The length of $ASK__CHAR 1 is
itself returned in the variable $ASK__INT 1.
.NOFILL

Format:  ASK CHARACTER n

eg       ASK CHARACTER 65
         SHOW VARIABLE $ASK__CHAR 1
         SHOW VARIABLE $ASK__INT  1
.LE ;^^^*>ASK GEOMETRY\*
.FILL
Returns information about geometries
.NOFILL

Format:  ASK GEOMETRY subcommand
.LIST 'o'
.LE ;^^^*>ASK GEOMETRY POINT\*
.FILL
Returns the coordinate of a point that is guaranteed to lie on the
specified geometry in the variables $ASK__REAL 1 and $ASK__REAL 2.
.BL
For point type geometries this will be (one of) the point(s)
.BR;For line  type geometries this will be a point on a line (not a vertex)
.BR;For area  type geometries this will be a point that lies within the
bounding line work of the area.
.NOFILL

Format:  ASK GEOMETRY POINT integer
.END LIST

.LE ;^^^*>ASK HLS\*
.FILL
Returns the Hue Lightness and Saturation of the specified colour in the
current display and overlay in the variables $ASK__REAL 1, $ASK__REAL 2
and $ASK__REAL 3. It also returns its attribute in the system variable
$ASK__CHAR 1, and the number of characters of this string in the variable
$ASK__INT 1.
.BL
This command is only available on versions with suitable hardware
facilities.
.NOFILL

Format:  ASK HLS n
.LE ;^^^*>ASK HSV\*
.FILL
Returns the Hue Saturation and Value of the specified colour in the
current display and overlay in the variables $ASK__REAL 1, $ASK__REAL 2
and $ASK__REAL 3. It also returns its attribute in the system variable
$ASK__CHAR 1, and the number of characters of this string in the variable
$ASK__INT 1.
.BL
This command is only available on versions with suitable hardware
facilities.
.NOFILL

Format:  ASK HSV n
.LE ;^^^*>ASK IDENTIFIER\*
.FILL
Returns TRUE (-1) in the variable $ASK__INT 1 if the user has the 
specified identifier in his rights identifier list, and FALSE (0) if
not.  If the string does not represent a valid rights identifier or if
it does not exist as a rights identifier, then the command will moan,
and the variable will be unset.
.NOFILL

Format:  ASK IDENTIFIER string

eg       ASK IDENTIFIER INTERACTIVE
         SHOW VARIABLE $ASK__INT  1

.LE ;^^^*>ASK LEGEND__SIZE\*
.FILL
Returns the size (length and height as a proportion of the screen) that
the legend would take up when drawn with a DRAW LEGEND command
on the current screen with the current annotation settings. The length
is returned in $ASK__REAL 1 and the height in $ASK__REAL 2. The number of
boxes in the menu is returned in $ASK__INT 1.
.BL
Note that the height ($ASK__REAL 2) may be more than 1.0. In this case
a subsequent DRAW LEGEND command will fail. (The width may also be
greater than 1.0, but in this case the DRAW LEGEND command will not fail,
but will simply truncate the legend).
.BL
This command is not available in INITIAL state.
.NOFILL

Format:  ASK LEGEND__SIZE
.LE ;^^^*>ASK MAP__NUMBER\*
.FILL
If the optional string argument is present then this command fills in
the system variable $ASK__INT 1 ($MAP__NUMBER) with the number of the
first map that contains the string in its name; if no string is present
then the variable will contain the number of the next map that contains
the string given in the last ASK MAP__NUMBER command that had an
argument.
.BL
In either case, if the string is not found in any map name, the
variable will contain 0.
.NOFILL

Format:  ASK MAP__NUMBER [string]

eg       ASK MAP__NUMBER .IFF
         SHOW VARIABLE $ASK__INT 1

                     1                        for example
         ASK MAP__NUMBER
         SHOW VARIABLE $ASK__INT 1

                     2                        for example
         ASK MAP__NUMBER
         SHOW VARIABLE $ASK__INT 1

                     0                        for example

.LE ;^^^*>ASK POSITION\*
.FILL
Converts a position between LITES2 coordinate space and the coordinate
space of any specified map. LITES2 space is the coordinate system that
the command POSITION and SHOW POSITION work with.
.BR
The result of the conversion is put in the system variables $ASK__REAL 1
and $ASK__REAL 2.
.BL
This command is not available in INITIAL state.
.NOFILL

Format:  ASK POSITION subcommand
.LIST 'o'
.LE ;^^^*>ASK POSITION FROM__MAP\*
.FILL
Converts between the point `x,y' in the coordinate space of the
specified map and the LITES2 coordinate space.
.NOFILL

Format:  ASK POSITION FROM__MAP map x y
.LE ;^^^*>ASK POSITION TO__MAP\*
.FILL
Converts between the point `x,y' in LITES2 space and the coordinate
system of the specified map.
.NOFILL

Format:  ASK POSITION TO__MAP map x y
.END LIST

.LE ;^^^*>ASK RGB\*
.FILL
Returns the Red Green and Blue values of the specified colour in the
current display and overlay in the variables $ASK__REAL 1, $ASK__REAL 2
and $ASK__REAL 3. It also returns its attribute in the system variable
$ASK__CHAR 1, and the number of characters of this string in the variable
$ASK__INT 1.
.BL
This command is only available on versions with suitable hardware
facilities.
.NOFILL

Format:  ASK RGB n
.LE ;^^^*>ASK STATUS\*
.FILL
Returns status information about the specified entity.
.NOFILL

Format:  ASK STATUS subcommand
.LIST 'o'
.LE ;^^^*>ASK STATUS MACRO\*
.FILL
Returns information about the specified macro, menu or puck.
.BL
In this context a subscripted puck or menu name is treated as a macro.
Also note that, as when using macro names in other contexts, the name
may be abbreviated until it becomes ambiguous.
.BL
If the name does not represent a macro, menu or puck 0 is returned in
$ASK__INT 1 and no other $ASK variables are set.
.BL
If the name represents a macro, then 1 is returned in $ASK__INT 1 and the
number of characters in the macro is returned in $ASK__INT 2 (this can be
used to test if a menu square or puck button can be redefined without
cancelling first); if the name represents a menu or a puck then 2 is
returned in $ASK__INT 1 and the number of boxes in the menu or buttons on
the puck is returned in $ASK__INT 2. In both these cases the full
(non-abbreviated) name is returned in $ASK__CHAR 1.
.NOFILL

Format:  ASK STATUS MACRO name
.LE ;^^^*>ASK STATUS VARIABLE\*
.FILL
Returns information about the specified variable.
.BL
The type of the variable is returned in $ASK__INT 1 as follows:
.NOFILL

     = 0 - variable does not exist
     = 1 - integer
     = 2 - real
     = 3 - character
     = 4 - double

.FILL
If the variable exists and if it represents a variable array, then the
number of elements in the array is returned in $ASK__INT 2. Simple
variables return 0 in $ASK__INT 2.
.BL
Note that subscripts are not allowed in the variable name in this
command.
.NOFILL

Format:  ASK STATUS VARIABLE name
.END LIST
.LE ;^^^*>ASK STRING\*
.FILL
Returns information and carries out lexical operations on the specified
string.
.BL
Where a string is returned in the variable $ASK__CHAR n, then the length
of this string is generally returned in the variable $ASK__INT n.
.NOFILL

Format:  ASK STRING subcommand
.LIST 'o'
.LE ;^^^*>ASK STRING ANNOTATION__SIZE\*
.FILL
Returns the size (length and height in IFF units) that the specified string
would take up when drawn with a DRAW TITLE or DRAW TEXT command on the
current screen with the current annotation settings. The length is returned
in $ASK__REAL 1 and the height in $ASK__REAL 2.
.BL
This command is not available in INITIAL state.
.BL
.NOFILL

Format:  ASK STRING ANNOTATION__SIZE string
.LE ;^^^*>ASK STRING ASCII\*
.FILL
Converts the first character in the specified string to an 8 bit ASCII
character and returns in in $ASK__INT 1
.NOFILL

Format:  ASK STRING ASCII string
.LE ;^^^*>ASK STRING COLLAPSE\*
.FILL
Removes all spaces and tabs from a string and returns the resultant
string in the variable $ASK__CHAR 1
.NOFILL

Format:  ASK STRING COLLAPSE string
.LE ;^^^*>ASK STRING COMPRESS\*
.FILL
Replaces all occurrences of multiple spaces and tabs by single spaces
and returns the resultant string in the variable $ASK__CHAR 1
.NOFILL

Format:  ASK STRING COMPRESS string
.LE ;^^^*>ASK STRING DCLSYMBOL\*
.FILL
Returns the value of the specified DCL symbol in the variable $ASK__CHAR 1.
If the symbol does not exist, then a null string is returned.
.NOFILL

Format:  ASK STRING DCLSYMBOL string
.LE ;^^^*>ASK STRING ELEMENT\*
.FILL
Extracts a specified element from a string in which the elements are
separated by a specified delimiter. The result is returned in the
variable $ASK__CHAR 1.
.BL
The delimiter must only be 1 character long
.BL
If the delimiter does not exist in the string, or there are less
elements in the string than the one specified, then the delimiter is
returned in $ASK__CHAR 1.
.BL
Note that the element is the substring after the specified delimiter,
thus the command :
.NOFILL

      ASK STRING ELEMENT 2 /   MON/TUE/WED/THUR/FRI/SAT/SUN

will return the string "WED"  while the command :

      ASK STRING ELEMENT 2 /  /MON/TUE/WED/THUR/FRI/SAT/SUN

will return the string "TUE"
      
Format:  ASK STRING ELEMENT n delimiter string
.LE ;^^^*>ASK STRING EXTRACT\*
.FILL
Extracts a substring, denoted by its start and end position, from a
string and returns it in the variable $ASK__CHAR 1.
.BL
If the end position is less than the start position, the null string
is returned.
.NOFILL

Format:  ASK STRING EXTRACT start__pos end__pos string

eg       ASK STRING EXTRACT 2 4 Freddy

will return the string "red"

.LE ;^^^*>ASK STRING FILE__FIND\*
.FILL
Returns a character string containing the expanded file specification
for the file-spec argument in the variable $ASK__CHAR 1. If the
FIND__FILE function does not find the file in the directory, a null ("")
string is returned.
.BL
If the device or directory names are omitted from the input file-spec,
defaults are supplied from the current default disk and directory.
Defaults for a file name or type are not supplied and if the version
number is omitted, the specification for the file with the highest
version number is returned.
.BL
Wildcards can be used in the file-spec argument. In this case repeated
calls with the same input file-spec will return all the file
specifications that match the input. When all the files have been found,
a null ("") string is returned.
.NOFILL

Format:  ASK STRING FILE__FIND filespec

eg       ASK STRING FILE__FIND lsl$com:lites2ini.com

may return the string "LSL$SITE__ROOT:[LSL.COM]LITES2INI.COM;23"

while repeated calls of the command

         ASK STRING FILE__FIND lsl$com:lites2ini.com;_*   

may return the strings "LSL$SITE__ROOT:[LSL.COM]LITES2INI.COM;23"
                       "LSL$SITE__ROOT:[LSL.COM]LITES2INI.COM;22"
                       ""

.LE ;^^^*>ASK STRING INDEX\*
.FILL
Returns the starting position of string2 in string1 in the variable
$ASK__INT 1.
.BL
If string1 does not contain string2, 0 is returned; if string2 occurs
more than once in string1, the position of the first occurrence is
returned.
.NOFILL

Format:  ASK STRING INDEX string1 string2
.LE ;^^^*>ASK STRING ISALPHA\*
.FILL
Returns TRUE (-1) in the variable $ASK__INT 1 if all the characters in
the string are alphabetic (ie if they all lie between 'A' and 'Z' or
between 'a' and 'z'). Otherwise FALSE (0) is returned.
.NOFILL

Format:  ASK STRING ISALPHA string
.LE ;^^^*>ASK STRING ISDATETIME\*
.FILL
Returns TRUE (-1), in the variable $ASK__INT#1, if the string represents
a valid DEC VMS date/time string, otherwise FALSE (0) is returned.

If the string is a valid date, then the date part is returned in 
$ASK__CHAR#1 (and its length in $ASK__INT#2) and the time in
$ASK__CHAR#2 (with its length in $ASK__INT#3)
.NOFILL

Format:  ASK STRING ISDATETIME string
.LE ;^^^*>ASK STRING ISDIGIT\*
.FILL
Returns TRUE (-1) in the variable $ASK__INT 1 if all the characters in
the string are numeric (ie if they all lie between '0' and '9').
Otherwise FALSE (0) is returned.
.NOFILL

Format:  ASK STRING ISDIGIT string
.LE ;^^^*>ASK STRING ISINTEGER\*
.FILL
Returns TRUE (-1) in the variable $ASK__INT 1 if the characters in the
string form a valid integer. Otherwise FALSE (0) is returned.
.NOFILL

Format:  ASK STRING ISINTEGER string
.LE ;^^^*>ASK STRING ISREAL\*
.FILL
Returns TRUE (-1) in the variable $ASK__INT 1 if the characters in the
string form a valid real number. Otherwise FALSE (0) is returned.
.NOFILL

Format:  ASK STRING ISREAL string
.LE ;^^^*>ASK STRING LEFT\*
.FILL
Extracts a substring, denoted by its end position, from a string and
returns the result in the variable $ASK__CHAR 1.
.BL
If the end position is less than the start position, the null string
is returned.
.NOFILL

Format:  ASK STRING LEFT end__position string

eg       ASK STRING LEFT 4 Freddy

will return the string "Fred"

.LE ;^^^*>ASK STRING LENGTH\*
.FILL
Returns the length of the string in the variable $ASK__INT 1.
.NOFILL

Format:  ASK STRING LENGTH string
.LE ;^^^*>ASK STRING LOWERCASE\*
.FILL
Converts any upper case alphabetic characters in the string to lower
case, and returns the string in $ASK__CHAR 1.
.NOFILL

Format:  ASK STRING LOWERCASE string
.LE ;^^^*>ASK STRING NO__DOLLAR\*
.FILL
Converts any "$ escape" sequences as used in Laser-Scan's FRTLIB text
drawing routines (see the MAPPING package for details) in the string to
the corresponding 8 bit ASCII character, and returns the result in the
variable $ASK__CHAR 1.
.BL
Note that for this to work satisfactorily, the TRI must contain the
appropriate characters from the DEC multinational character set.
.NOFILL

Format:  ASK STRING NO__DOLLAR string
.LE ;^^^*>ASK STRING PAD\*
.FILL
Pad the given string to the specified length by adding the appropriate
number of spaces, and return the new string in the variable $ASK__CHAR 1.
.BL
Note that to use this variable in subsequent LITES2 commands, it must
usually be surrounded by quotation marks ("), as trailing spaces are
generally stripped off LITES2 commands.
.NOFILL

Format:  ASK STRING PAD length string
.LE ;^^^*>ASK STRING PARSE\*
.FILL
Parses the given file name and returns the specified field in the variable
$ASK__CHAR 1.
.BL
No punctuation is included in the fields (except for '.' in directories).
If the specified field does not exist, a null string is returned.
.NOFILL

Valid fields are :

      NODE
      DEVICE		
      DIRECTORY
      NAME
      TYPE or EXTENSION
      VERSION

These may all be truncated until they become ambiguous.

Format:  ASK STRING PARSE filename field
.LE ;^^^*>ASK STRING RIGHT\*
.FILL
Extracts a substring, denoted by its starting position, from a string
and returns the result in the variable $ASK__CHAR 1.
.BL
If the start position is greater than the length of the string, the null
string is returned.
.NOFILL

Format:  ASK STRING RIGHT position string

eg       ASK STRING RIGHT 4 Freddy

will return the string "ddy"

.LE ;^^^*>ASK STRING TEXT__SIZE\*
.FILL
Returns the size (length and height in IFF units) that the specified
string would be if constructed with a TEXT command. The size
depends on the values in the attribute set (as set with the SET
command). The length is returned in $ASK__REAL 1 and the height in
$ASK__REAL 2.
.BL
This command is not available in INITIAL state.
.BL
.NOFILL

Format:  ASK STRING TEXT__SIZE string
.LE ;^^^*>ASK STRING TRIM\*
.FILL
Trims any trailing spaces and tabs off the end of the string, and
returns it in the variable $ASK__CHAR 1.
.BL
Note that to enter the string in the command line in the first place, it
must be surrounded by quotation marks (").
.NOFILL

Format:  ASK STRING TRIM string
.LE ;^^^*>ASK STRING TRNALL\*
.FILL
Does a recursive translation on the string as a logical name (in the
logical name table LNM$FILE__DEV) and returns the result in the variable
$ASK__CHAR 1.
.BL
If the logical name does not translate, or is not resolved by 10
translations, then the null string is returned.
.NOFILL

Format:  ASK STRING TRNALL string
.LE ;^^^*>ASK STRING TRNLNM\*
.FILL
Does a single translation on the string as a logical name (in the
logical name table LNM$FILE__DEV) and returns the result in the variable
$ASK__CHAR 1.
.BL
If the logical name does not translate then the null string is returned.
.NOFILL

Format:  ASK STRING TRNLNM string
.LE ;^^^*>ASK STRING UPCASE\*
.FILL
Converts any lower case alphabetic characters in the string to upper
case, and returns the string in $ASK__CHAR 1.
.NOFILL

Format:  ASK STRING UPCASE string
.END LIST
.LE ;^^^*>ASK TABLE\*
.FILL
Returns the position of the table cursor in the system variables
$ASK__REAL 1 and $ASK__REAL 2. It does this without the operator pressing
any button on the puck. The cursor must be lying within the area of a
map or tracking area that has been set up on the table, for the command
to succeed.
.BL
.NOTE
This command is not available when the table is accessed through a
LSL MUART (ie ENABLE MONITOR must have been given). The table must also
be of a type that responds to requests from the host computer. In
particular, if using an ALTEK 90 controller, the "ENABLE HOST" switch
must be set to the on position.
.END NOTE
.BL
When using non-ALTEK tables, it is possible to specify the string that
is used to inquire the position from the table, in the shared image that
is used to decode the table string. See the documentation on the TABLE
MONITOR for details of this decoding routine, or the example supplied
in LSL$PUBLIC__ROOT:[TABLE.EXE]EXAMPLE.FOR. This routine can be compiled
and linked using the command file DECODE.COM in the same directory.
.NOFILL

Format   ASK TABLE

eg       ASK TABLE
         SHOW VARIABLE $ASK__REAL 1
         SHOW VARIABLE $ASK__REAL 2
.END LIST

.HL 3 ^^^*>FILE\*
.FILL
Specifies an action on a user specified text file. Files may be opened 
for both reading and writing.
Each text file opened has an associated file-number which is used to 
reference the file for selection and closing.
.BR 
Up to three text files may be open at one time.
.NOFILL

Format:  FILE subcommand

Valid in all states
.LIST '*'
.LE ;^^^*>FILE APPEND\*
.FILL
Specifies an existing text file, to which data is to be appended, with the 
given file-number and file name. The file is automatically selected.
The default file specification 
is the current directory, with file extension ".DAT". 
.NOFILL

Format:  FILE APPEND file-number filename

eg       FILE APPEND 2 FRED
or       FILE APPEND 2 DUA1:[FRED.DEMO]TEST.DAT
.LE ;^^^*>FILE CLOSE\*
.FILL
The file with the given file number is closed.
.NOFILL

Format:  FILE CLOSE file-number 

eg       FILE CLOSE 3 
.LE ;^^^*>FILE CREATE\*
.FILL
Specifies a text file to be created with the given file-number
and file name. The file is automatically selected.
By default files are created in the current directory with extension ".DAT".
.NOFILL

Format:  FILE CREATE file-number filename

eg       FILE CREATE 1 FRED
or       FILE CREATE 1 DUA1:[FRED.DEMO]TEST.DAT
.LE ;^^^*>FILE OPEN\*
.FILL
Opens an existing file for reading, with the given file-number and file name.
 The file is automatically selected. The default file specification 
is the current directory, with file extension ".DAT". 
.NOFILL

Format:  FILE OPEN file-number filename

eg       FILE OPEN 1 FRED
or       FILE OPEN 1 DUA1:[FRED.DEMO]TEST.DAT
.LE ;^^^*>FILE READ\*
.FILL
Reads the next record from the currently selected file into the system 
variable $FILELINE. If the end of the text file is reached then the system
variable $EOF is set to -1. Otherwise it is 0.
.NOFILL

Format:  FILE READ
.LE ;^^^*>FILE SELECT\*
.FILL
Specifies that the file with the given file-number is selected for 
reading or writing.
.NOFILL

Format:  FILE SELECT file-number 

eg       FILE SELECT 1 
.LE ;^^^*>FILE WRITE\*
.FILL
Writes the given text string to the currently selected file. If no text string 
is supplied then  a blank line is written.
If the text is to have leading spaces or tabs, then it
must be enclosed in double quotes. This command may not be used on files
opened for read access with FILE OPEN.
.NOFILL

Format:  FILE WRITE [text]
.end list
.SUBTITLE Identification Commands
.PAGE
.HL 2 ^^^*Identification Commands\*
.INDEX Identification Commands
.HL 3 ^^^*>FIND\*
.FILL
Searches for nearest feature to cursor position.
.BR
Finds up to 4 features nearest to cursor and highlights the best fit
which becomes the FOUND FEATURE and the subject for editing operations.
If FIND is given again without moving the cursor, then the program will
cycle round the 4 best hits.
.P 0
The behaviour of FIND can by modified by various other commands,
including ENABLE ENDS and TOLERANCE FIND (qv). If there is a cursor
constraint in operation, either explicitly using ON or FORCE (qv), or
implicitly by COPY and MODIFY commands, then FIND will locate the
nearest intersections of features with the constraint. 
.INDEX Intersections
.NOFILL

Format:  FIND

Valid in states:
READY LINE CIRCLE TEXT SYMBOL EDIT MODIFY ON WINDOW CONSTRUCT
.HL 3 ^^^*>RECOVER\*
.FILL
Searches for nearest feature in limbo.
.BR
Works as FIND (qv) but only finds deleted features. The END command must
be used to accept the feature. If RECOVER is given again without moving
the cursor, the program will cycle round up to 4 nearest candidates.
.NOFILL

Format:  RECOVER

Valid in states  READY LINE CIRCLE TEXT SYMBOL RECOVER
.HL 3 ^^^*>SEARCH\*
.FILL
Searches whole IFF file using spiral search for feature matching
given specification. The SEARCH command should normally only be used
when the intention is to use SEARCH NEXT to find several features
in turn. If only one feature is required, then the LOCATE (qv) command
is more efficient.
.P 0
The order in which features are found by SEARCH is not very well defined
except for SEARCH NEAREST. 
.NOFILL

Format:  SEARCH  subcommand

Valid in states:
READY LINE CIRCLE TEXT SYMBOL EDIT MODIFY WINDOW CONSTRUCT RECOVER
.LIST '*'
.LE ;^^^*>SEARCH ALL\*
.FILL
Search for any feature matching current SELECT constraints.
.NOFILL

Format:  SEARCH ALL
.LE ;^^^*>SEARCH DELETED\*
.FILL
Search for feature in limbo. Same as SEARCH ALL but finds only deleted
features.
.NOFILL

Format:  SEARCH DELETED
.LE ;^^^*>SEARCH FSN\*
.FILL
Search for feature with given FSN, optionally in a particular map.
.NOFILL

Format:  SEARCH FSN  fsn [map]
.LE ;^^^*>SEARCH LAST\*
.FILL
Search for the last feature that was found (using FIND or SEARCH),
constructed, or edited, and make it the found feature again. A SEARCH
NEXT sequence is unaffected by this command.
.NOFILL

Format:  SEARCH LAST
.LE ;^^^*>SEARCH NEAREST\*
.FILL
Search for the nearest feature matching current SELECT constraints.
This command is similar to SEARCH ALL (qv), but the features are found
in strict order of increasing distance. The cursor will snap onto a
point of a feature if one is within the current find tolerance.
SEARCH NEAREST is likely to take longer than SEARCH ALL, especially
at large distances from the cursor.
.NOFILL

Format:  SEARCH NEAREST
.LE ;^^^*>SEARCH NEXT\*
.FILL
Continue current search for next candidate (default).
.NOFILL

Format:  SEARCH NEXT
or       SEARCH
.LE ;^^^*>SEARCH TEXT\*
.FILL
Search for text feature containing given sub-string.
.BR
If the text is to have leading spaces or tabs, then it must be enclosed
in double quotes.
.NOFILL

Format:  SEARCH TEXT  text
.END LIST
.HL 3 ^^^*>LOCATE\*
.FILL
Searches whole IFF file using spiral search for feature matching
given specification. LOCATE is similar to SEARCH (qv) but finds only
the first matching feature. LOCATE may be used in the middle of a
SEARCH NEXT sequence without destroying the search context.
.NOFILL

Format:  LOCATE  subcommand

Valid in states:
READY LINE CIRCLE TEXT SYMBOL EDIT MODIFY WINDOW CONSTRUCT RECOVER
.LIST '*'
.LE ;^^^*>LOCATE ALL\*
.FILL
Locate any feature matching current SELECT constraints.
.NOFILL

Format:  LOCATE ALL
or       LOCATE
.LE ;^^^*>LOCATE DELETED\*
.FILL
Locate feature in limbo. Same as LOCATE ALL but finds only deleted
features.
.NOFILL

Format:  LOCATE DELETED
.LE ;^^^*>LOCATE FSN\*
.FILL
Locate feature with given FSN, optionally in a particular map.
.NOFILL

Format: LOCATE FSN  fsn [map]
.LE ;^^^*>LOCATE TEXT\*
.FILL
Locate text feature containing given sub-string.
.BR
If the text is to have leading spaces or tabs, then it must be enclosed
in double quotes.
.NOFILL

Format:  LOCATE TEXT  text
.END LIST
.SUBTITLE Construction Commands
.PAGE
.HL 2 ^^^*Construction Commands\*
.INDEX Construction Commands
.HL 3 ^^^*>START\*
.FILL
Starts line or symbol feature construction using current attribute set
as selected by GET (qv) and modified by SET (qv).
If a construction is already started then just adds the given point.
.BR
The construction is finished by giving the END command (qv) at the
final position. In the case of symbol string features (graphical type
11) features, START then END without moving the cursor will construct
a single point feature.
.BR
To create a text feature use the TEXT command (qv).
.BR
In SETUP state, the START command is used to digitise a corner point.
.NOFILL

Format:  START

Valid in states  READY LINE CIRCLE TEXT SYMBOL WINDOW CONSTRUCT SETUP
.HL 3 ^^^*>CURVE\*
.FILL
Adds data point to construction but sets curve interpolation on either
side of given point.
.NOFILL

Format:  CURVE

Valid in state  CONSTRUCT
.HL 3 ^^^*>INVISIBLE\*
.FILL
Adds data point to construction with an invisible segment up to the
given point.
.NOFILL

Format:  INVISIBLE

Valid in state  CONSTRUCT
.HL 3 ^^^*>ARC\*
.FILL
The next constructed feature is to be a generated arc.
.NOFILL

Format:  ARC  subcommand

Valid in states  READY LINE CIRCLE TEXT SYMBOL
.LIST '*'
.LE ;^^^*>ARC CENTRED\*
.FILL
Construct generated arc.
.BR
Defined by the centre point and two points on the circumference
.NOFILL

Format:  ARC CENTRED
.LE ;^^^*>ARC CIRCUM\*
.FILL
Construct generated arc.
.BR
Defined by three points on the circumference
.NOFILL

Format:  ARC CIRCUM
.END LIST
.HL 3 ^^^*>CIRCLE\*
.FILL
The next constructed feature is to be a generated circle.
.NOFILL

Format:  CIRCLE  subcommand

Valid in states  READY LINE CIRCLE TEXT SYMBOL
.LIST '*'
.LE ;^^^*>CIRCLE CENTRED\*
.FILL
Construct generated circle.
.BR
Defined by the centre point and a point on the circumference
.NOFILL

Format:  CIRCLE CENTRED
.LE ;^^^*>CIRCLE CIRCUM\*
.FILL
Construct generated circle.
.BR
Defined by three points on the circumference
.NOFILL

Format:  CIRCLE CIRCUM
.END LIST
.HL 3 ^^^*>POLARC\*
.FILL
The next constructed feature is to be a generated polygon arc.
The integer gives the number of sides.
.NOFILL

Format:  POLARC  subcommand integer

eg       POLARC CENTRED 5

Valid in states  READY LINE CIRCLE TEXT SYMBOL
.LIST '*'
.LE ;^^^*>POLARC CENTRED\*
.FILL
Defined by the centre point and two points on polygon arc.
.NOFILL

Format:  POLARC CENTRED integer
.LE ;^^^*>POLARC CIRCUM\*
.FILL
Defined by three points on polygon arc
.NOFILL

Format:  POLARC CIRCUM integer
.END LIST
.HL 3 ^^^*>POLYGON\*
.FILL
The next constructed feature is to be a generated polygon.
The integer gives the number of sides.
.NOFILL

Format:  POLYGON subcommand integer

eg       POLYGON CENTRED 5

Valid in states  READY LINE CIRCLE TEXT SYMBOL
.LIST '*'
.LE ;^^^*>POLYGON CENTRED\*
.FILL
Defined by the centre point and a point on the polygon.
.NOFILL

Format:  POLYGON CENTRED integer
.LE ;^^^*>POLYGON CIRCUM\*
.FILL
Defined by three points on polygon.
.NOFILL

Format:  POLYGON CIRCUM integer
.END LIST
.HL 3 ^^^*>RECTANGLE\*
.FILL
The next constructed feature is to be a generated rectangle.
.NOFILL

Format:  RECTANGLE  subcommand

Valid in states  READY LINE CIRCLE TEXT SYMBOL
.LIST '*'
.LE ;^^^*>RECTANGLE DIAGONAL\*
.FILL
Construct a generated rectangle by digitising one corner, a point on an
adjacent side and the corner diagonally opposite the first one. 
.NOFILL

Format:  RECTANGLE DIAGONAL
.LE ;^^^*>RECTANGLE SIDE\*
.FILL
Construct a generated rectangle by digitising two adjacent corners and a
point on the opposite side. 
.NOFILL

Format:  RECTANGLE SIDE
.END LIST
.HL 3 ^^^*>CLOSE\*
.FILL
Closes a feature currently being constructed to form a loop.
The cursor is moved to the correct position ready for the END
command. If given after the BRIDGE command, and the bridge starts
at one end of a feature, then the CLOSE command will locate the
other end of the original feature, and END will generate a closed
feature from the original plus the bridge.
Use END without further cursor movement to create a closed feature.
.NOFILL

Format:  CLOSE  subcommand

Valid in state  CONSTRUCT
.LIST '*'
.LE ;^^^*>CLOSE NORMAL\*
.FILL
Positions cursor on first point of construction (default).
.BR
An END command will then result in a closed feature.
.NOFILL

Format:  CLOSE NORMAL
or       CLOSE
.LE ;^^^*>CLOSE SQUARE\*
.FILL
Extends the current segment or construction to a point such that the
line back to the start point forms a right angle. A point is added here,
and the cursor is left on the first point of feature. Useful, in conjunction
with FORCE CORNER (qv), for adding the final points of a squared
construction.
.NOFILL

Format:  CLOSE SQUARE
.END LIST
.HL 3 ^^^*>INCLUDE\*
.FILL
Allows all or some of an existing feature to be included in the current
construction.
The original feature remains unaltered.
.NOFILL

Format:  INCLUDE  subcommand

Valid in states  LINE CONSTRUCT
.LIST '*'
.LE ;^^^*>INCLUDE PART\*
.FILL
Includes the part of the found feature from the current cursor position
to the point when the next END command is given.
.BR
After the INCLUDE PART command has been given the cursor is constrained
on the found feature until an END (or an ABANDON) command.
.NOFILL

Format:  INCLUDE PART
.LE ;^^^*>INCLUDE WHOLE\*
.FILL
Includes the whole of the found feature in the current
construction (default).
.BR
The cursor must be on one end of the found feature, and 
after this command it will be located at the other end.
.NOFILL

Format:  INCLUDE WHOLE
or       INCLUDE
.END LIST
.HL 3 ^^^*>FOLLOW\*
.FILL
Add points to a construction by continuously polling the position from
the specified device.
.BL
Note that not all versions of LITES2 support the devices that can be
specified by this command.
.BL
Filtering of the points is achieved using a modified form of the BUNCH
algorithm that is used by the FILTER command, the main difference being
that while the BUNCH filter algorithm computes new master points, the
algorithm used by FOLLOW outputs points that have been digitised. 
.BL
The rate at which the devices are polled and the tolerances for this
filtering are set by the TOLERANCE FOLLOW command. 
.BL
The filtering algorithm uses tolerances related to chords on the
incoming point strings. The first point received from the input stream
is accepted as a master point. As subsequent points are received, they
are added to the backlog buffer, unless one of the following conditions
are met. 
.LIST
.LE;if the point is less than the minimum distance from the last master
point or the last point in the buffer, it is ignored.
.LE;if the maximum distance tolerance is not set to 0.0 (infinity) and
the distance from the last master point to the current point is
greater than this tolerance, then the last point in the backlog
buffer is output as a master point, the buffer is emptied and the
current point is added as the first point in the buffer.
.LE;if the perpendicular distance from any of the points in the backlog
buffer to the line joining the last master point to the current
point exceeds the lateral tolerance, then the last point in the
backlog buffer is output as a master point, the buffer is emptied
and the current point is added as the first point in the buffer.
.LE;if the backlog buffer is full, then it is compressed to leave the
points farthest to the right and to the left of the line between
the last master point and the current point, before the current
point is added to the backlog buffer.
.END LIST
See the FILTER command for more information on the effect of altering
the tolerances.
.BL
LITES2 will complete any processing that it is engaged in when it is
time to poll the device for a coordinate, before reading the position
from the device and doing the above filtering. This may mean that on
busy systems, FOLLOWing may be somewhat uneven. This problem may be
alleviated by reducing the amount of refresh drawing that LITES2 has
to do by giving the REFRESH VERTICES command.
.BL
FOLLOWing mode is left by giving the END or START command. FOLLOWing
will also be abandoned if an error occurs while retrieving a coordinate.
If many of these errors occur then the following time interval is
probably set too small.
.NOFILL

Format:  FOLLOW  subcommand

Valid in states  READY LINE CIRCLE TEXT SYMBOL WINDOW CONSTRUCT
.LIST '*'
.LE ;^^^*>FOLLOW DSR\*
See the description of the command FOLLOW SD (stereo digitiser).
.NOFILL

Format:  FOLLOW DSR
.LE ;^^^*>FOLLOW SCREEN\*
.FILL
Gets coordinates from the position of the workstation cursor on the
screen. Note that this is not the LITES2 cursor, but the cursor that
is controlled by the movement of the mouse or bitpad.
.NOFILL

Format:  FOLLOW SCREEN
.LE ;^^^*>FOLLOW SD\*
Gets coordinates from the stereo digitising instrument, if it has
been initialised.
.NOFILL

Format:  FOLLOW SD
.LE ;^^^*>FOLLOW TABLE\*
.FILL
Gets coordinates from the digitising table (default).
.BL
NOTE: This command is not available when the table is accessed through a
LSL MUART (ie ENABLE MONITOR must have been given). The table must also
be of a type that responds to requests from the host computer. In
particular, if using an ALTEK 90 controller, the "ENABLE HOST" switch
must be set to the on position.
.BL
When using non-ALTEK tables, it is possible to specify the string that
is used to inquire the position from the table, in the shared image that
is used to decode the table string. See the documentation on the TABLE
MONITOR for details of this decoding routine, or the example supplied
in LSL$PUBLIC__ROOT:[TABLE.EXE]EXAMPLE.FOR. This routine can be compiled
and linked using the command file DECODE.COM in the same directory.
.NOFILL

Format:  FOLLOW TABLE
.END LIST
.SUBTITLE Constraint Commands
.PAGE
.HL 2 ^^^*Constraint Commands\*
.INDEX Constraint Commands
The following commands are available to constrain the movement of the
cursor along lines or features. While the cursor is constrained, the
FIND command will locate intersections of the constraint with linear
features. 
.HL 3 ^^^*>FORCE\*
.FILL
Force constraint on cursor movement, 
or move cursor on to a surface or a line. The FREE command may be
used to restore free cursor movement.

Format:  FORCE  subcommand

Valid in states  LINE TEXT SYMBOL MODIFY CIRCLE EDIT CONSTRUCT
.LIST '*'
.LE ;^^^*>FORCE ANGLE\*
.FILL
Next line segment to be at given angle (measured anti-clockwise from
horizontal).
.BR
If given after FORCE LINE or FORCE DISTANCE, then the cursor position
is fixed at the given angle and distance.
.BR
Note that movement is possible in either direction along constraining line.
.NOFILL

Format:  FORCE ANGLE  real
.LE ;^^^*>FORCE BEARING\*
.FILL
Next line segment to be at given bearing (measured clockwise from
grid north).
.BR
If given after FORCE LINE or FORCE DISTANCE, then the cursor position
is fixed at the given angle and distance.
.BR
Note that movement is possible in either direction along constraining line.
.NOFILL

Format:  FORCE BEARING  real
.LE ;^^^*>FORCE CORNER\*
.FILL
A corner of the given angle (default 90 degrees) at the current point.
.BR
If given after FORCE LINE or FORCE DISTANCE, then the cursor position
is fixed at the given angle and distance.
.BR
Note that movement is possible in either direction along constraining line.
.NOFILL

Format:  FORCE CORNER  [real]
.LE ;^^^*>FORCE DISTANCE\*
.FILL
Force the total length of a construction to be a given distance.
.BR
The distance is specified in IFF units (unless a UNITS command
has been given), and must be greater than the current length of the
construction.
.BR
The cursor is constrained onto a circle around the previous point.
If given when a linear constraint is already in force, for example
FORCE ANGLE, then the cursor position is fixed at the given angle
and distance.
.NOFILL

Format:  FORCE DISTANCE  real
.LE ;^^^*>FORCE EDGE\*
.FILL
Moves cursor onto currently defined base for edgematching.
.NOFILL

Format:  FORCE EDGE
.LE ;^^^*>FORCE FLAT\*
.FILL
Moves cursor onto horizontal plane through the point that the cursor was
moved to when the particular editing command was given. For example, if
the editing command EXTEND is given, at any time before a subsequent
ABANDON or END command, FORCE FLAT will make the Z value of the cursor
the same as the height of the point being extended.
.BL
This command is only valid if Z has been ENABLED.
.NOFILL

Format:  FORCE FLAT

Valid in state  EDIT
.LE ;^^^*>FORCE LINE\*
.FILL
Force the length of the current segment of a construction.
.BR
The length is specified in IFF units (unless a UNITS command
has been given).
.BR
The cursor is constrained onto a circle around the previous point.
If given when a linear constraint is already in force, for example
FORCE ANGLE, then the cursor position is fixed at the given angle
and distance.
.NOFILL

Format:  FORCE LINE  real
.LE ;^^^*>FORCE ORTHOGONAL\*
.FILL
Horizontal or vertical line only (not yet implemented).
.NOFILL

Format:  FORCE ORTHOGONAL
.LE ;^^^*>FORCE PARALLEL\*
.FILL
Parallel to the current segment of the found feature.
.BR
The cursor is constrained to the right of the found feature if the
command argument is positive, and to the left if the argument is
negative. If no argument is given, the cursor position is used.
.NOFILL

Format:  FORCE PARALLEL  [real]
.LE ;^^^*>FORCE PERPENDICULAR\*
.FILL
Perpendicular to the current segment of the found feature.
.BR
The cursor position is used to determine the placement of the 
perpendicular. The initial position of the cursor is to the right of 
the found feature if the command argument is positive, and to the left 
if the argument is negative.
.BR
Note that movement is possible in either direction along constraining line.
.NOFILL

Format:  FORCE PERPENDICULAR  [real]
.LE ;^^^*>FORCE RADIAL\*
.FILL
On a radius of the found feature.
.NOFILL

Format:  FORCE RADIAL
.LE ;^^^*>FORCE SLOPE\*
.FILL
Moves cursor onto the plane through the 2 points used to determine the
cursor position and any constraint when the editing command took effect.
For example, if the editing command EXTEND is given, at any time before
a subsequent ABANDON or END command, FORCE SLOPE will move the the
cursor so that it lies on the plane through the last two points of the
feature. 
.BL
This command is only valid if Z has been ENABLED.
.NOFILL

Format:  FORCE SLOPE

Valid in state  EDIT
.LE ;^^^*>FORCE TANGENTIAL\*
.FILL
On a tangent to the found feature.
.NOFILL

Format:  FORCE TANGENTIAL
.END LIST
.HL 3 ^^^*>FREE\*
.FILL
Frees cursor from constrained movement.
.NOFILL

Format:  FREE

Valid in states  READY LINE CIRCLE EDIT MODIFY CONSTRUCT
.HL 3 ^^^*>ON\*
.FILL
Constrains cursor to move only on found feature. FIND will then locate
intersections of the found feature with other linear features. The
feature intersected with is merely used to locate the cursor, and does
not become the found feature. 
.NOFILL

Format:  ON

Valid in states  LINE CIRCLE EDIT MODIFY CONSTRUCT
.SUBTITLE Positioning Commands
.PAGE
.HL 2 ^^^*Positioning Commands\*
.INDEX Positioning Commands
.HL 3 ^^^*>POSITION\*
.FILL
Positions cursor to given IFF coordinates.
.BL
If all the arguments are omitted the cursor is positioned to the centre
of the screen. 
.NOFILL

Format:  POSITION  [ x y [z] ]

eg       POSITION 100 121.6
or       POSITION

Valid in all states except INITIAL
.HL 3 ^^^*>ABSOLUTE\*
.FILL
Positions cursor to given coordinates. The coordinates are specified
as full projection coordinates i_.e_. coordinates that include any
origin offset specified in the IFF files.
.BL
If all the arguments are omitted, the cursor is positioned to the centre
of the screen. 
.NOFILL

Format:  ABSOLUTE  [ x y [z]]

eg       ABSOLUTE 327100.34 6734121.62
or       ABSOLUTE

Valid in all states except INITIAL
.HL 3 ^^^*>GEOGRAPHICAL\*
.FILL
Positions cursor to given latitude and longitude.
.BL
This command is only valid if at least one  map read in has valid type 2
map descriptor, specifying a valid projection.
.BL
The latitude and longitude are specified in degrees, minutes and seconds.
.BL
If the arguments are omitted, the cursor is positioned to the centre
of the screen.
.BL
.INDEX LSL$LITES2__GEOG__ROUTINES
Geographical conversions make use of a shared image pointed at by the
logical name LSL$LITES2__GEOG__ROUTINES. This image is supplied by
Laser-Scan. It is called LSL$EXE:LITES2GEOGSHR.EXE. 
.NOFILL

Format:	 GEOGRAPHICAL [ lat long ]

eg       GEOGRAPHICAL 56 30 00.000   -3 20 00.000
         GEOGRAPHICAL 56 30 00.000N   3 20 00.000W
         GEOGRAPHICAL 56 30N          3 20W
         GEOGRAPHICAL 56.5N           3.333333333W
         GEOGRAPHICAL  3 20 00.000W   56 30 00.000N

these examples are all valid angles that will position the cursor to the
same point.

Valid in all states except INITIAL
.HL 3 ^^^*>LATLONG\*
.FILL
Positions cursor to given latitude and longitude, where the latitude
and longitude are specified as double precision numbers.
.BL
This command is only valid if at least one  map read in has valid type 2
map descriptor, specifying a valid projection.
.BL
If the arguments are omitted, the cursor is positioned to the centre
of the screen.
.BL
.INDEX LSL$LITES2__GEOG__ROUTINES
Geographical conversions make use of a shared image pointed at by the
logical name LSL$LITES2__GEOG__ROUTINES. This image is supplied by
Laser-Scan. It is called LSL$EXE:LITES2GEOGSHR.EXE. 
.NOFILL

Format:  LATLONG [ lat long ]

eg       LATLONG 56.0 -3.0

Valid in all states except INITIAL
.HL 3 ^^^*>SHEET\*
.FILL
Positions cursor to given coordinates (given in sheet mm).
.BL
 If the arguments are omitted, the cursor is positioned to the centre of
the screen. 
.NOFILL

Format:  SHEET  [ x y ]

eg       SHEET 352.6 222
or       SHEET

Valid in all states except INITIAL
.HL 3 ^^^*>FIRST\*
.FILL
Positions to first point, AC, TC, CH or text component.
.BR
Only operates on composite texts if there is no other linear found
object. 
.BR
If in MODIFY state, goes into MODIFY (part) state.
.NOFILL

Format:  FIRST

Valid in states  LINE CIRCLE EDIT TEXT MODIFY ON CONSTRUCT AC
.HL 3 ^^^*>LAST\*
.FILL
Positions to last point, AC, TC, CH or text component.
.BR
Only operates on composite texts if there is no other linear found
object. 
.BR
If in MODIFY state, goes into MODIFY (part) state.
.NOFILL

Format:  LAST

Valid in states  LINE CIRCLE EDIT TEXT MODIFY ON CONSTRUCT AC
.HL 3 ^^^*>MIDDLE\*
.FILL
Positions cursor midway between 2 points
.NOFILL

Format:  MIDDLE

Valid in states  LINE CIRCLE EDIT MODIFY ON CONSTRUCT
.HL 3 ^^^*>NEXT\*
.FILL
Positions to next point, AC, TC, CH or text component.
.BR
Only operates on composite texts if there is no other linear found
object. 
.BR
If in MODIFY state, goes into MODIFY (part) state.
.NOFILL

Format:  NEXT

Valid in states  LINE CIRCLE EDIT TEXT MODIFY ON CONSTRUCT AC
.HL 3 ^^^*>PREVIOUS\*
.FILL
Positions to previous point, AC, TC, CH or text component.
.BR
Only operates on composite texts if there is no other linear found
object. 
.BR
If in MODIFY state, goes into MODIFY (part) state.
.NOFILL

Format:  PREVIOUS

Valid in states  LINE CIRCLE EDIT TEXT MODIFY ON CONSTRUCT AC
.HL 3 ^^^*>THIS\*
.FILL
Positions to current AC, TC, CH or text component.
.BR
If in TEXT or MODIFY state, goes into MODIFY (part) state.
.NOFILL

Format:  THIS

Valid in states  TEXT MODIFY AC
.HL 3 ^^^*>POINT\*
.FILL
Positions cursor on the given point of the found feature.
.NOFILL

Format:  POINT integer

Valid in states  LINE CIRCLE EDIT TEXT MODIFY ON CONSTRUCT
.HL 3 ^^^*>FRACTION\*
.FILL
Positions cursor fractionally between 2 points
.NOFILL

Format:  FRACTION  real

eg       FRACTION 0.4

Valid in states  LINE CIRCLE EDIT MODIFY ON CONSTRUCT
.HL 3 ^^^*>DISTANCE\*
.FILL
Positions the cursor a given distance along a feature.
The distance is specified in IFF units (unless a UNITS command
has been given).
The distance may be measured from either end of the feature, or
from the current cursor position.
.NOFILL

Format:  DISTANCE [subcommand]  real

Valid in states  LINE CIRCLE EDIT MODIFY ON CONSTRUCT
.LIST '*'
.LE ;^^^*>DISTANCE [ABSOLUTE]\*
.FILL
The cursor is positioned to the given distance from the start of the
feature (or backwards from the end if the distance is negative). An
attempt to move beyond the end of the feature will result in the
cursor being positioned at the end.
.NO FILL

Format:  DISTANCE [ABSOLUTE]  real

eg       DISTANCE 10.0
or       DISTANCE ABSOLUTE 10.0

.LE ;^^^*>DISTANCE RELATIVE\*
.FILL
.NOFILL
The cursor is positioned to the given distance along the feature
from the current cursor position. The direction of movement is
towards the end of the feature if the distance is positive.
An attempt to move beyond the end of the feature will result in the
cursor being positioned at the end.

Format:  DISTANCE RELATIVE  real

eg       DISTANCE RELATIVE 10.0
.END LIST
.SUBTITLE Editing Commands
.PAGE
.HL 2 ^^^*Editing Commands\*
.INDEX Editing Commands
.HL 3 ^^^*>COPY\*
.FILL
Creates a copy of a feature and allows changes to be made to it.
Several changes can be made using CHANGE, DELETE, MOVE, OFFSET, and
REVERSE. An END command completes the operation.
.BR
Compare with MODIFY command.
.NOFILL

Format:  COPY  subcommand

Valid in states  LINE TEXT SYMBOL
.LIST '*'
.LE ;^^^*>COPY PART\*
.FILL
Copies part of line features. The old feature is unaffected.
See MODIFY PART for details of specifying part features.
.NOFILL

Format:  COPY PART
.LE ;^^^*>COPY WHOLE\*
.FILL
Copies the whole feature (default).
.NOFILL

Format:  COPY WHOLE
or       COPY
.END LIST
.HL 3 ^^^*>MODIFY\*
.FILL
Allows multiple changes to be made to a feature.
Several changes can be made using CHANGE, DELETE, MOVE, OFFSET, and
REVERSE. An END command completes the operation.
If given without COPY or MODIFY, then these commands in general
behave as though MODIFY WHOLE had been used, but for line features the
operation is completed immediately.
.BR
Compare with COPY command.
.NOFILL

Format:  MODIFY  subcommand

Valid in states  LINE TEXT SYMBOL CIRCLE
.LIST '*'
.LE ;^^^*>MODIFY PART\*
.FILL
Modifies part of line features. The initial cursor position is taken as one
end of the part to be modified. The program enters ON state and the cursor
is constrained to move on the line. Commands may now be given to alter the
part feature. After moving the cursor to the end of the part, the END command
completes the operation. If no commands to alter the part are given, the
effect is merely to split the feature into (up to) three parts.
.NOFILL

Format:  MODIFY PART
.LE ;^^^*>MODIFY WHOLE\*
.FILL
Modifies the whole feature (default).
.NOFILL

Format:  MODIFY WHOLE
or       MODIFY
.END LIST
.HL 3 ^^^*>DEPOSIT
.FILL
Deposits the text or symbol that is currently being modified.
The feature may still be further modified and DEPOSITed again or the original
operation can be ended with the appropriate number of END commands. 
Alternatively, ABANDON may be used to terminate the original operation.
.BR
A new feature serial number is automatically generated for features
that are deposited.
.NOFILL

Format:  DEPOSIT

Valid in state  MODIFY
.HL 3 ^^^*>BRIDGE
.FILL
Replaces part of a feature, or adds additional points to the end of a feature.
The part of the feature removed may be RECOVERed
and possibly JOINed up again, if BRIDGE is used in error.
.P 0
The sequence of commands involved will normally be
.NOFILL
FIND
PREVIOUS/NEXT/FRACTION etc. as needed to get to first point of change
BRIDGE
START at all the new points of the changed part.
FIND again to locate last point of change
END
.FILL
.P 0
If the BRIDGE command is given while on the end of a feature, then it is
not necessary to FIND the feature again before giving the END command.
The additional points are added to the end of the feature.
.P 0
If the END command if given while on the end of a feature, then this point
is ^*not\* included in the bridge. This allows the end section of a feature
to be replaced completely.
.P 0
A common mistake is to bridge all the way from one end of a
feature to the other, hoping to make a closed loop. Instead, the original
feature is deleted and replaced by the bridge. To get the desired effect,
use the CLOSE command (qv) - this will automatically locate the
opposite end of the feature from where the bridge was started, and END
will then produce a closed loop.
.NOFILL

Format:  BRIDGE

Valid in state  LINE
.HL 3 ^^^*>TAKE\*
.FILL
Transfers attributes from the current attribute set to the found feature.
.NOFILL

Format:  TAKE  subcommand

Valid in states  LINE CIRCLE TEXT SYMBOL
.LIST '*'
.LE ;^^^*>TAKE AC\*
.FILL
Transfers the ancillary codes (ACs) from the current attribute set to the
found feature (in addition to any it may have already).
.NOFILL

Format:  TAKE AC
.LE ;^^^*>TAKE ATTRIBUTES\*
.FILL
This command is only valid if the cursor is on a point.
.BR
Transfers the point attributes from the current attribute set to the
current point of the found feature (in addition to any it may have
already). 
.NOFILL

Format:  TAKE ATTRIBUTES
.END LIST

.HL 3 ^^^*>CHANGE\*
.FILL
Changes characteristics of found feature. For linear features, the change
will be completed immediately, unless a COPY or MODIFY command has been
given first. For text or symbol features, MODIFY state will be entered,
allowing other changes to be made until END is given. 
.BL
When dealing with composite texts and in MODIFY (part) state, then only
the characteristics of the current text component will be altered; when
in MODIFY (or TEXT) state, all the component texts will take the
specified attribute. 
.NOFILL

Format:  CHANGE  subcommand

Valid in states  LINE CIRCLE TEXT SYMBOL MODIFY ON
.LIST '*'
.LE ;^^^*>CHANGE CATEGORY\*
.FILL
Changes  category field for text.
.NOFILL

Format:  CHANGE CATEGORY integer
.LE ;^^^*>CHANGE CC\*
.FILL
Changes component code of current text component.
.NOFILL

Format:  CHANGE CC  integer
.LE ;^^^*>CHANGE CROSSREF\*
.FILL
Changes text cross reference (not yet implemented).
.NOFILL

Format:  CHANGE CROSSREF  integer
.LE ;^^^*>CHANGE DIRECTION\*
.FILL
Changes "reversed feature flag" of found feature (not yet implemented).
See REVERSE to change the direction of digitising of a feature.
.NOFILL

Format:  CHANGE DIRECTION
.LE ;^^^*>CHANGE EDITED\*
.FILL
Changes the edit flag of the found feature to the specified setting.
This is normally set automatically as a result of editing, and is used
for example in SELECT EDITED.
.NOFILL

Format:  CHANGE EDITED integer
eg.
         CHANGE EDIT 1    sets the flag
         CHANGE EDIT 0    clears the flag
.LE ;^^^*>CHANGE FC\*
.FILL
Changes feature code of found feature.
.NOFILL

Format:  CHANGE FC  integer
.LE ;^^^*>CHANGE FSN\*
.FILL
Changes feature serial number of found feature.
If no argument is given a new FSN is generated automatically.
.NOFILL

Format:  CHANGE FSN  [integer]
.LE ;^^^*>CHANGE HEIGHT\*
.FILL
Changes height of found text feature (mm).
.NOFILL

Format:  CHANGE HEIGHT real
.LE ;^^^*>CHANGE LAYER\*
.FILL
Changes layer of found feature.
.NOFILL

Format:  CHANGE LAYER  integer
.LE ;^^^*>CHANGE LOCATION\*
.FILL
Changes text location field for text.
.NOFILL

Format:  CHANGE LOCATION  integer
.LE ;^^^*>CHANGE MAP\*
.FILL
Changes map of found feature.
.NOFILL

Format:  CHANGE MAP  integer
.LE ;^^^*>CHANGE PC\*
.FILL
Changes process code of found feature
.NOFILL

Format:  CHANGE PC  integer
.LE ;^^^*>CHANGE PSIZE\*
.FILL
Changes text height in points.
.NOFILL

Format:  CHANGE PSIZE  integer
.LE ;^^^*>CHANGE STYLE\*
.FILL
Changes text style for text.
.NOFILL

Format:  CHANGE STYLE  integer
.END LIST
.HL 3 ^^^*DELETE\*
.FILL
Deletes found feature, AC, TC or CH
.NOFILL

Format:  DELETE  subcommand

Valid in states  LINE CIRCLE TEXT SYMBOL AC
.LIST '*'
.LE ;^^^*>DELETE PART\*
Deletes part of a line feature. Move to end of part then END.
This command is equivalent to:
MODIFY PART
DELETE
See MODIFY PART command for details.

Format:  DELETE PART
.LE ;^^^*>DELETE WHOLE\*
.FILL
Deletes a whole feature, or an AC, TC, CH (default).
For features, the feature is marked as deleted and remains in limbo.
It may be found only using the RECOVER command (qv), or SEARCH DELETED (qv).
.BR
The feature will finally be deleted and removed from the IFF file when the
EXIT command is given.
.NOFILL

Format:  DELETE WHOLE
or       DELETE
.END LIST

.HL 3 ^^^*>EDIT\*
.FILL
Amends a single data point or line segment.
.NOFILL

Format:  EDIT  subcommand
.LIST '*'
.LE ;^^^*>EDIT ATTRIBUTE\*
.FILL
Edits the specified attribute of the current point.
.BR
If no value is given, then the specified attribute is deleted from the 
point, otherwise the specified attribute and value is added to the point
or, if the point already has the attribute then its value is updated.
.BL
The attribute code can either be an integer, or the corresponding
name defined by Laser-Scan or one defined by the user in his FRT. 
.BL
See the section on LITES2 command language for details of the format
of the value for this type of command argument.
.NOTE
If the logical name LSL$IFF__OUTPUT__REVISION
.INDEX LSL$IFF__OUTPUT__REVISION
is not set to 1, any point attributes (apart from Z) will be lost on
completion of editing. Points with the attribute Z will produce ZS 
entries in the IFF file, rather than ST entries.
.BR
See the IFF user guide for more information on IFF files and
LSL$IFF__OUTPUT__REVISION
.END NOTE

.NOFILL

Format:  EDIT ATTRIBUTE attribute [value]

Valid in states  LINE SYMBOL TEXT
.LE ;^^^*>EDIT CP\*
.FILL
Edits the specified control point of the specified map. If no 
map is specified, the control point in map 1 is edited.
.BL
The x and y values are interpreted as IFF units (unless a UNITS command
has been given).
.BL
The new value will be used when the SETUP AGAIN command is next given.
.NOFILL

Format:  EDIT CP [map] corner x y

         where corner = NW
                      = SW
                      = SE
                      = NE,

         map is an integer and
         x and y are real numbers
	 
eg       EDIT CP 2 NW 0.0 1000.0

Valid in state  READY
.LIST 'o'
.FILL
.LE;NE
.BR
Edit the North East (upper right) control point. This is the last
point in the CP entry in the IFF file.

.LE;NW
.BR
Edit the North West (upper left) control point. This is the first
point in the CP entry in the IFF file.

.LE;SE
.BR
Edit the South East (lower right) control point. This is the third
point in the CP entry in the IFF file.

.LE;SW
.BR
Edit the South West (lower left) control point. This is the second
point in the CP entry in the IFF file.
.END LIST
.LE ;^^^*>EDIT POINT\*
.FILL
Edits the position of a data point (default).
The current point is attached to the cursor, and can be moved around
until the END command is given.
.NOFILL

Format:  EDIT POINT
or       EDIT

Valid in state  LINE
.LE ;^^^*>EDIT VISIBILITY\*
.FILL
Edits the visibility of a line segment.
.BR
The cursor must be positioned between points. The line segment is set
visible (1) or invisible (0).
.NOFILL

Format:  EDIT VISIBILITY  integer

Valid in state  LINE
.END LIST
.HL 3 ^^^*>EXTEND\*
.FILL
Extends (or shortens) the end segment of a line feature.
.BR
The cursor is constrained to move in either direction along the final
segment of the feature until END is given. 
.BR
Often used in combination with FIND to extend one line until it exactly
touches another. If FREE is given, the effect becomes identical to
EDIT POINT.
.NOFILL

Format:  EXTEND

Valid in state  LINE
.HL 3 ^^^*>INSERT\*
.FILL
When in LINE state adds a data point.
.BR
A new point is created, attached to the cursor, and can be moved around
until the END command is given.
.BL
If in CONSTRUCT state, then an intersected point can be inserted in the
construction. The effect is shown in the following diagram:
.TP 15
.LITERAL

       1              2              I
----X--------------X- - - - - - - X       The INSERT command is given at
                                  !       point 2. INVISIBLE, START or
                                  !       END commands are given at point
                                  ! 3     3 and 4, with the result that
                                  X       points 2 and 3 are replaced by
                                  |       point I.
                                  |
                                  |       If an INVISIBLE command is
                                  | 4     given at point 3, the vector
                                  X       1 - I is invisible; if an
                                  |       INVISIBLE command is given
                                  |       at point 4, the vector I - 4
                                  |       is invisible.

.END LITERAL
.NOFILL

Format:  INSERT

Valid in states  LINE CONSTRUCT
.HL 3 ^^^*>LOOP\*
.FILL
Makes the found feature a loop (closed feature). Both end points are
attached to the cursor, and may be moved around until END is given.
.NOFILL

Format:  LOOP  subcommand

Valid in states  LINE CIRCLE
.LIST '*'
.LE ;^^^*>LOOP EXTEND\*
.FILL
Extends first and last spans of feature to new meeting point.
.NOFILL

Format:  LOOP EXTEND
.LE ;^^^*>LOOP NORMAL\*
.FILL
Moves first and last points to their mean position (default).
.NOFILL

Format:  LOOP NORMAL
or       LOOP
.END LIST

.HL 3 ^^^*>OFFSET\*
.FILL
Generates a new feature parallel to the found feature. The offset
distance is specified in IFF units (unless a UNITS command has been
given). If the old feature is to be replaced by the offset feature, then
give the MODIFY command first. 

.B
For linear features the new feature is offset to the right if the
command argument is positive, and to the left if the argument is
negative. For whole feature operations the argument need not be given,
and the cursor position is used to calculate the offset distance. To
offset part of a feature, give the OFFSET command after COPY PART or
MODIFY PART (qv) in which case OFFSET is not allowed after REVERSE,
MOVE, FILTER or TRANSFORM. 
.B
For texts and symbols the new feature is offset below if the command
argument is positive and above if it is negative. If no argument is
given, then the feature is offset by a fixed proportion of the height of
the text or symbol. This value can be set by the TOLERANCE OFFSET
command. If it is negative, then the OFFSET command without an argument
will offset the feature above the original. 
.BR
Any rotating, moving, stretching or aligning of texts or symbols is lost
after giving this command. 
.NOFILL

Format:  OFFSET  [real]

Valid in states  LINE CIRCLE ON
.HL 3 ^^^*>MOVE\*
.FILL
Moves a feature to a new position.
.BR
This command attaches the feature to the cursor and allows it to be
moved around until END is given. For line features, the effect is as if
MODIFY WHOLE had been given first. To retain the old feature, use COPY
WHOLE. To move part of a feature, use COPY PART or MODIFY PART, in which
case the part will only be attached to the cursor after END is given to
delimit the part. In this case, MOVE is not allowed after OFFSET, FILTER
or TRANSFORM. 
.BR
For text or symbol features, MODIFY state is entered and the
feature is attached to the cursor until END is given. A further END is
required to complete the edit, and leave 
MODIFY state. 
.NOFILL

Format:  MOVE

Valid in states  LINE TEXT SYMBOL MODIFY ON
.HL 3 ^^^*>REMOVE\*
.FILL
Deletes a data point.
.BR
The current point is removed from the feature.
.NOFILL

Format:  REMOVE

Valid in states  LINE CONSTRUCT
.HL 3 ^^^*>REVERSE\*
.FILL
Digitising direction of the found feature is reversed. See MOVE for
details of operations on part features. This command is not allowed
after OFFSET, FILTER or TRANSFORM. 
.NOFILL

Format:  REVERSE

Valid in states  LINE ON
.HL 3 ^^^*>ORIENT\*
.FILL
Moves the found (linear) feature onto the previously defined orienting
base.
.BR
The selected edge of the found feature is moved onto the orienting base,
and the rest of the feature is moved correspondingly. The selected edge
is moved so that its centre is projected perpendicularly onto the base. 
.BR
If the feature has been found by a point, and not between points, then
the edge out of that point that makes the smaller angle with the base is
used.
.BR
The oriented feature (or part of it when dealing with long features) is
displayed in refresh and EDIT state is entered. To accept the oriented
feature enter END; otherwise ABANDON will cancel the operation. 
.BR
After orienting, the original feature is deleted but can be recovered.
.NOFILL

Format:  ORIENT

Valid in state  LINE
.HL 3 ^^^*>TRANSFORM\*
.FILL
Sets up and uses an orthogonal transformation. This is a transformation
of the form:
.NOFILL
        X = ax - by + c1
        Y = bx + ay + c2 

.FILL
This applies a rotation, a scale change and a translation to points in
the current coordinate system (x,y) to give the points in the target
coordinate system (X,Y).
.BL
The transformation can either be set up by giving the coordinates of two
points in both systems, using the TRANSFORM FROM and TRANSFORM TO
commands, or by specifying the rotation, scale factor, point of rotation
and translation explicitly, using the TRANSFORM COEFFICIENTS command.
.BL
Features and regions can be transformed using the TRANSFORM FEATURE
and TRANSFORM REGION commands.
.BL
.NOTE
It is possible to transform features so that they lie outside
the limits of the map.  These features cannot be displayed or found,
but they may be located using the LOCATE or SEARCH commands (qv).
.END NOTE
.NOFILL

Format:  TRANSFORM  subcommand
.LIST '*'
.LE ;^^^*>TRANSFORM AC\*
.FILL
This is an alias for TAKE AC (qv), and is included here for historical
reasons.  The command will be withdrawn in a future release of LITES2.

.LE ;^^^*>TRANSFORM COEFFICIENTS\*
.FILL
Define the transformation, by giving the angle, scale factor, rotation
point and required x and y translations.
.BR
The angle is given in degrees.
.BR
The scale factor must be in the range .001 to 1000
.BR
The rotation point is the point about which the rotation takes place.
.BL
The transformation is carried out in the order:
.NOFILL

         rotation
         scale change
         translation

.FILL
The coordinates of the rotation point and the X and Y translations are
in IFF units (unless a UNITS command has been given).
.NOFILL

Format:  TRANSFORM COEFFICIENTS angle scale x y dx dy

Valid in states  READY LINE CIRCLE ON TEXT SYMBOL MODIFY
.LE ;^^^*>TRANSFORM FEATURE\*
.FILL
Transform the current feature according to the current transformation
parameters. (default)
.BL
It is possible to transform part features if the MODIFY PART or COPY
PART commands (qv) have been given. In this case TRANSFORM is not
allowed after REVERSE, MOVE, FILTER or OFFSET. 
.BL
The height or point size of texts will be altered if HEIGHT is enabled,
but this can only be done to the nearest .01 mm (if POINT is disabled)
or to the nearest valid point size. In these cases subsequent editing
of the feature may be required.
.BL
The size and orientation of scaled symbols will be altered, but only the
orientation of oriented symbols will be altered, their size being
retained. Unoriented symbols will have their position altered, but will
be drawn horizontal and will be the size specified in the FRT. 
.NOFILL

Format:  TRANSFORM FEATURE
or       TRANSFORM

Valid in states  LINE CIRCLE ON TEXT SYMBOL MODIFY
.LE ;^^^*>TRANSFORM FROM\*
.FILL
Define the current coordinate system, by giving the coordinates of two
points. The two points must define a vector.
If the command TRANSFORM TO has been given, then the transformation
between the two coordinate systems will be set up.
.BL
The coordinates are in IFF units (unless a UNITS command
has been given).
.NOFILL

Format:  TRANSFORM FROM xa ya xb yb

Valid in states  READY LINE CIRCLE ON TEXT SYMBOL MODIFY
.LE ;^^^*>TRANSFORM REGION\*
.FILL
Transform the specified region according to the current transformation
parameters.
.NOFILL

Format:  TRANSFORM REGION reg

Valid in states  READY LINE CIRCLE ON TEXT SYMBOL MODIFY
.LE ;^^^*>TRANSFORM TO\*
.FILL
Define the target coordinate space, by giving the coordinates of two
points. The two points must define a vector.
If the command TRANSFORM FROM has been given, then the transformation
between the two coordinate systems will be set up.
.BL
The coordinates are in IFF units (unless a UNITS command
has been given).
.NOFILL

Format:  TRANSFORM TO xa ya xb yb

Valid in states  READY LINE CIRCLE ON TEXT SYMBOL MODIFY
.END LIST
.HL 3 ^^^*>FILTER\*
.FILL
Filters the points in an entity according to the BUNCH filtering
algorithm. 
.BL
The BUNCH filter uses tolerances related to chords on the incoming point
strings. The filter performs a least squares fit through all the
existing data points, and when a point lies more than the lateral
threshold distance from the trend line it is considered to be a
provisional master point. A new fit is then conducted forwards from the
last master point, until again the threshold deviation is exceeded. The
last provisional point is taken to be the next master point and the
intervening points are rejected. The process is repeated until the end
of the line is reached. If the lateral threshold distance is large, it
will rarely be exceeded and many points will be thrown away. 
.BL
The number of points which are kept as master points or are
thrown away may be additionally controlled by the minimum and maximum  
separation.
.BL
The minimum separation is the shortest distance allowed between
successive master points along the line. If this is set to a large
value, more points will be thrown away giving increasingly angular
linework. 
.BL
The maximum separation is the distance travelled along the line before
forcing out a master point. A large value will result in very sparse
points along straight and nearly straight lines. A maximum separation of
0.0 is equivalent to one of infinity, and means that no points will be
forced out on distance criteria. 
.BL
The maximum separation must be greater than or equal to the minimum
separation which must be greater than or equal to the lateral threshold
distance. 
.BL
As the BUNCH filter uses a least squares algorithm, all new points will
be placed to the outside of the original curve of the line being
filtered. 
.NOFILL

Format:  FILTER  subcommand

Valid in states  LINE ON
.FILL
.LIST '*'
.LE ;^^^*>FILTER FEATURE\*
.FILL
Filters the found feature.
.BL
It is possible to FILTER part features if the MODIFY PART or COPY
PART commands (qv) have been given.  In this case FILTER is not
allowed after REVERSE, MOVE, TRANSFORM or OFFSET. 

.NOFILL
Format:  FILTER FEATURE
or       FILTER

.END LIST
.HL 3 ^^^*>FEATURE\*
.FILL
Construct a feature from some entity
.NOFILL

Format:  FEATURE subcommand

Valid in states  READY
.FILL
.LIST '*'
.LE ;^^^*>FEATURE GEOMETRY\*
.FILL
Construct a feature from the specified geometry. If the geometry has
several parts, each part will produce a separate feature.
.BL
Area type geometries will produce features with invisible lines connecting
inner rings. These are in a form that can be converted back into area
geometries with the GEOMETRY FEATURE command.
.BL
The feature is constructed with the attributes in the current attribute
set (and so this must be compatible with the type of the geometry).
.BL
If Z is enabled, features will be constructed with all the points at the
height of the cursor.
.NOFILL

Format:  FEATURE GEOMETRY n

.LE ;^^^*>FEATURE REGION\*
.FILL
Construct a feature from the specified region.
.BL
The feature is constructed with the attributes in the current attribute
set (and so the current feature code must be linear).
.BL
If Z is enabled, features will be constructed with all the points at the
height of the cursor.
.NOFILL

Format:  FEATURE REGION n
.END LIST
.HL 3 ^^^*>SPLIT\*
.FILL
Splits a linear feature in two, or splits a text into two or more text
components. 
.NOFILL

Format:  SPLIT subcommand
.FILL
.LIST '*'
.LE ;^^^*>SPLIT AFTER\*
.FILL
This command is only valid if COMPOSITE has been enabled.
.BL
Replaces the text component containing the specified string "text" with
two components. The split is made after "text" and the current component
becomes the one that does not contain this string. 
.BL
If "text" is at the end of a text component, then a warning is
given; the following text component becomes the current one. This is a
way of moving directly to a particular text component in a composite text
feature without NEXTing or PREVIOUSing over the intervening components.
.BL
If in MODIFY or TEXT state, then the whole text is scanned for the first
occurrence of "text"; if in MODIFY (part) state then only the current
text component is examined
.BL
If the text is to have leading or trailing spaces or tabs, then it must be
enclosed in double quotes. 
.NOFILL

Format:  SPLIT AFTER text
 
Valid in states  TEXT MODIFY
.LE ;^^^*>SPLIT APART\*
.FILL
This command is only valid if COMPOSITE has been enabled.
.BL
Splits the current composite text into two separate features, before
the current text component.
.BL
Texts can be joined together again using the JOIN command.
.BL
This command returns LITES2 to READY state.

.NOFILL

Format:  SPLIT APART
 
Valid in states  TEXT MODIFY
.LE ;^^^*>SPLIT AROUND\*
.FILL
This command is only valid if COMPOSITE has been enabled.
.BL
Replaces the text component containing the specified string "text" with
three components. The splits are made before and after "text" and the
current component becomes the one containing this string. 
.BL
If "text" is already a complete text component, then a warning is given
and this text component becomes the current one. This is a way of moving
directly to a particular text component in a composite text feature
without NEXTing or PREVIOUSing over the intervening components. 
.BL
If in MODIFY or TEXT state, then the whole text is scanned for the first
occurrence of "text"; if in MODIFY (part) state then only the current
text component is examined.
.BL
If the text is to have leading or trailing spaces or tabs, then it must be
enclosed in double quotes. 
.BL
This command leaves LITES2 in MODIFY (part) state.
.NOFILL

Format:  SPLIT AROUND text
 
Valid in states  TEXT MODIFY
.LE ;^^^*>SPLIT BEFORE\*
.FILL
This command is only valid if COMPOSITE has been enabled.
.BL
Replaces the text component containing the specified string "text" with
two components. The split is made before "text" and the current component
becomes the one that contains this string. 
.BL
If "text" is at the beginning of a text component, then a warning is
given; this text component becomes the current one. This is a way of
moving directly to a particular text component in a composite text
feature without NEXTing or PREVIOUSing over the intervening components. 
.BL
If in MODIFY or TEXT state, then the whole text is scanned for the first
occurrence of "text"; if in MODIFY (part) state then only the current
text component is examined.
.BL
If the text is to have leading or trailing spaces or tabs, then it must be
enclosed in double quotes. 
.NOFILL

Format:  SPLIT BEFORE text
 
Valid in states  TEXT MODIFY
.LE ;^^^*>SPLIT LINE\*
.FILL
The feature is split at the current cursor position (default). 
.NOFILL

Format:  SPLIT LINE
or       SPLIT
 
Valid in states  LINE CIRCLE
.END LIST
.HL 3 ^^^*>CLIP\*
.FILL
Divides the current feature, where it cuts the specified region
boundary, to create one or more new features.
.BL
The original feature is deleted.
.BL
An error occurs if the feature does not cross the region boundary.
.NOFILL

Format:  CLIP  subcommand

Valid in states  LINE CIRCLE
.LIST '*'
.LE ;^^^*>CLIP CUTREGION\*
.FILL
Divides the current feature into features that lie completely inside
and completely outside the specified region.
.NOFILL

Format:  CLIP CUTREGION

eg       CLIP CUTREGION 4

.LE ;^^^*>CLIP INREGION\*
.FILL
Divides the current feature into features that lie completely inside
the specified region.
.BL
The parts of the original feature that lie outside the region can be
recovered using the RECOVER or SEARCH DELETED commands.
.NOFILL

Format:  CLIP INREGION

eg       CLIP INREGION 4
.LE ;^^^*>CLIP OUTREGION\*
.FILL
Divides the current feature into features that lie completely outside
the specified region.
The parts of the original feature that lie inside the region can be
recovered using the RECOVER or SEARCH DELETED commands.
.NOFILL

Format:  CLIP OUTREGION

eg       CLIP OUTREGION 4
.END LIST
.HL 3 ^^^*>SQUARE\*
.FILL
Squares the found (linear) feature, using either simple or OS
algorithms. The squared feature (or part of it when dealing with long
features) is displayed in refresh and EDIT state is entered. To accept
the squared feature enter END; otherwise ABANDON will cancel the
operation. 
.P0
After squaring, the original feature is deleted but can be recovered;
the squared feature has the appropriate process code set. 
.P0
When the FIXED option is enabled (default) then an enhanced squaring
algorithm for SQUARE PART and SQUARE WHOLE is used. 
The following features are then included in the squaring algorithm: 
.LIST 'o'
.LE;Points specified with the PRIVILEGE POINT command are held fixed
.LE;When base squaring, after all the bases have been used as data,
the remaining unsquared lines are part squared.
.LE;Redundant points are removed from parallel lines
.END LIST
.BL
See also TOLERANCE command, and the chapter on squaring at the end of 
this manual.
.NOFILL

Format:  SQUARE  subcommand

Valid in state  LINE
.LIST '*'
.LE ;^^^*>SQUARE ANGLES\*
.FILL
Forces all angles within angle tolerance to be right angles.
.NOFILL

Format:  SQUARE ANGLES
.LE ;^^^*>SQUARE PART\*
.FILL
Applies OS squaring algorithm using distance and length tolerances.
Only sides within tolerance are squared.
.NOFILL

Format:  SQUARE PART
.LE ;^^^*>SQUARE WHOLE\*
.FILL
Applies OS squaring algorithm to all sides (default).
.NOFILL

Format:  SQUARE WHOLE
or       SQUARE
.END LIST
.SUBTITLE Joining Commands
.PAGE
.HL 2 ^^^*Joining Commands\*
.INDEX Joining Commands
.HL 3 ^^^*>JOIN\*
.FILL
.LIST 'o'
.LE;For linear features:
Merges two features into one.
.BL
The MATCH command (qv) can be used to specify which attributes of
features to be joined must match. 
.NOFILL

Normal sequence is:

FIND first feature at an end
JOIN
FIND second feature (can only find ends)
adjust position of join if required
END
.FILL
.LE;For text features:
If there is a found object that is a text, then the found feature
is logically joined to the end of the feature being modified. The
second feature retains its old position. A PARAGRAPH command will
position the second feature at the end of the first.
.END LIST
.NOFILL

Format:  JOIN

Valid in states  LINE MODIFY
.HL 3 ^^^*>MATCH\*
.FILL
Match conditions for JOIN, TIE, MEND and EDGEMATCH.
.NOFILL

Format:  MATCH  subcommand

Valid in states  INITIAL READY LINE EDIT ON
.LIST '*'
.LE ;^^^*>MATCH AC\*
.FILL
Ancillary codes must match.
The set of AC types to match may be given as names, numbers, or ranges
of numbers. The range of ACs given in this command replace any given
in a previous MATCH AC command.
If the command is used without giving any AC types, perhaps after a
MATCH NONE command, then it just turns on AC matching with the same
set of ACs as previously, or if this is the first use of the command,
then ACs of types 2 3 4 _& 5 (CONTOUR, HEIGHT, LH__BOUNDARY, and
RH__BOUNDARY) must match. 
.NOFILL

Format:  MATCH AC  [range]

eg       MATCH AC 20-30,40-50,55,78
or       MATCH AC LH__BOUNDARY,RH__BOUNDARY
or       MATCH AC HEIGHT,23

.LE ;^^^*>MATCH FC\*
.FILL
FC must match (default).
.NOFILL

Format:  MATCH FC
.LE ;^^^*>MATCH FSN\*
.FILL
FSN must match.
.NOFILL

Format:  MATCH FSN
.LE ;^^^*>MATCH LAYER\*
.FILL
LAYER must match (default).
.NOFILL

Format:  MATCH LAYER
.LE ;^^^*>MATCH MAP\*
.FILL
MAP must match (default).
.NOFILL

Format:  MATCH MAP
.LE ;^^^*>MATCH NONE\*
.FILL
No attributes need match, for alignment only.
.NOFILL

Format:  MATCH NONE
.LE ;^^^*>MATCH PC\*
.FILL
Process Code must match.
.NOFILL

Format:  MATCH PC
.END LIST

.HL 3 ^^^*>EDGEMATCH\*
.FILL
An appropriate licence is required to use this command.
.BR
Carry out automatic edgematching of features along a baseline defined
using the BASE EDGE command (qv).
.BR
For more information about edgematching, see separate section of manual below.
Edgematching can be aborted with CTRL/C, but any features that have
been altered at this point cannot be recovered. The REVIEW command (qv) may
be used after EDGEMATCH to allow areas where problems occurred to be
examined individually.
.NOFILL

Format:  EDGEMATCH  subcommand

Valid in state  READY 
.LIST '*'
.LE ;^^^*>EDGEMATCH JOIN\*
.FILL
EDGEMATCH and JOIN the features together
.NOFILL

Format:  EDGEMATCH JOIN
.LE ;^^^*>EDGEMATCH TIE\*
.FILL
EDGEMATCH and TIE the features together
.NOFILL

Format:  EDGEMATCH TIE
.LE ;^^^*>EDGEMATCH EXTEND\*
.FILL
EXTEND or truncate features to the baseline
.NOFILL

Format:  EDGEMATCH EXTEND
.END LIST
.HL 3 ^^^*>REVIEW\*
.FILL
Runs a command file generated by EDGEMATCH (qv) which allows areas where
problems occurred to be examined and amended individually.
.NOFILL

Format:  REVIEW

Valid in state  READY
.HL 3 ^^^*>MEND\*
.FILL
Merges several features into one. Acts as JOIN (qv), but jumps to
other end of second feature to try to find a plausible connection.
The MATCH command (qv) can be used to specify which attributes of
features to be joined must match.
.NOFILL

Normal sequence is:
FIND first feature at the end near join to second feature
MEND [MANUAL or AUTOMATIC (default)]
If operation pauses then:
FIND next feature to MEND to, adjust position of join if required, then
END

.FILL
ABANDON will terminate the operation, including the feature in hand in
the mended feature, but not any found feature.
.NOFILL

Format:  MEND  subcommand

Valid in state  LINE
.LIST '*'
.LE ;^^^*>MEND AUTOMATIC\*
.FILL
Performs whole operation automatically (default). The operation will
pause only if there is more than one possible candidate to MEND to.
CTRL/C may be used to pause the operation.
.NOFILL

Format:  MEND AUTOMATIC
or       MEND
.LE ;^^^*>MEND MANUAL\*
.FILL
Allows operator intervention at each break.
.NOFILL

Format:  MEND MANUAL
.END LIST
.HL 3 ^^^*>PROPAGATE\*
.FILL
Smooths feature(s) on either side of point.
Used during JOIN or TIE to smooth out the effects of the edit.
The PROPAGATE must be given after JOIN or TIE each time an operation
is performed.
.NOFILL

Format:  PROPAGATE

Valid in state  EDIT (while TIEING and JOINING)
.HL 3 ^^^*>TIE\*
.FILL
Does a simultaneous edit of the end points of two features to produce
a graphical match.
Acts as JOIN (qv) but leaves the two features independent.
.NOFILL

Format:  TIE

Valid in state  LINE
.SUBTITLE Text and Symbol Commands
.PAGE
.HL 2 ^^^*Text and Symbol Commands\*
.INDEX Text and Symbol Commands
.HL 3 ^^^*>TEXT\*
.FILL
Creates a text feature. MODIFY state is entered, allowing the text to be
amended before being entered into the file by END or DEPOSIT.
Uses the current text attribute set as defined by SET commands (qv).
If the text is to have leading spaces or tabs, then it must be enclosed
in double quotes. 
.BL
NOTE: An implied TEXT or REPLACE command is inserted before any command
that is terminated by a Control/Z (that is the CTRL and Z keys pressed
together). REPLACE is used if it is valid, and otherwise TEXT is used. 
.BL
If a character within the text is preceded by _$, then 128 is added to
the ASCII value of the character. This allows access to ASCII characters
128 to 255, provided that these are defined in the TRI file. To obtain
the _$ character itself, use _$_$. If the keyboard allows ASCII
characters in the range 128-255 to be entered directly, for instance by
using the Compose Character key, then this mechanism may also be used.
See the FRTLIB User Guide, in the Mapping Package documentation, for
details of defining a TRI file. 

.NOFILL

Format:  TEXT  text
or       text_^Z

eg       TEXT High St.
or       High St._^Z

Valid in states  READY LINE CIRCLE TEXT SYMBOL MODIFY
.HL 3 ^^^*>LARGER\*
.FILL
Makes text or scaled symbol larger.
For texts with height in pointsize units it uses the next available
pointsize. Otherwise the text or symbol is increased in size by 10%.
.NOFILL 

Format:  LARGER

Valid in states  TEXT SYMBOL MODIFY
.HL 3 ^^^*>SMALLER\*
.FILL
Makes text or scaled symbol smaller.
For texts with height in pointsize units it uses the next available
pointsize. Otherwise the text or symbol is decreased in size by 10%. 
.NOFILL

Format:  SMALLER

Valid in states  TEXT SYMBOL MODIFY
.HL 3 ^^^*>MARGIN\*
.FILL
Shifts text to specified OS marginal position.
.NOFILL

Format:  MARGIN  integer

Valid in states  TEXT MODIFY
.HL 3 ^^^*>ROTATE\*
.FILL
Rotates text or symbol in terms of angles measured anticlockwise from
the horizontal.
.NOFILL

Format:  ROTATE  subcommand

Valid in states  TEXT SYMBOL MODIFY
.LIST '*'
.LE ;^^^*>ROTATE BY\*
.FILL
Rotate the subject anticlockwise by the given angle in degrees.
.NOFILL

Format:  ROTATE BY  real
.LE ;^^^*>ROTATE CURSOR\*
.FILL
Rotate the subject using the cursor (default).
When the feature is suitably orientated, disconnect the cursor
with an END.
.NOFILL

Format:  ROTATE CURSOR
or       ROTATE
.LE ;^^^*>ROTATE TO\*
.FILL
Rotate subject to lie at the given angle in degrees. The angle is measured
anticlockwise from the right (East).
.NOFILL

Format:  ROTATE TO  real
.END LIST

.HL 3 ^^^*>TURN\*
.FILL
Rotates text or symbol in terms of bearings measured clockwise from
grid north.
.NOFILL

Format:  TURN  subcommand

Valid in states  TEXT SYMBOL MODIFY
.LIST '*'
.LE ;^^^*>TURN BY\*
.FILL
Rotate the subject clockwise by the given angle in degrees.
.NOFILL

Format:  TURN BY  real
.LE ;^^^*>TURN CURSOR\*
.FILL
Rotate the subject using the cursor (default).
When the feature is suitably orientated, disconnect the cursor
with an END.
.NOFILL

Format:  TURN CURSOR
or       TURN
.LE ;^^^*>TURN TO\*
.FILL
Rotate subject to lie at the given bearing in degrees. The bearing is
measured clockwise from grid north.
.NOFILL

Format:  TURN TO  real
.END LIST

.HL 3 ^^^*>ALIGN\*
.FILL
Define size and rotation of a scaled symbol with cursor.
When symbol is suitably aligned, disconnect cursor with an END.
.NOFILL

Format:  ALIGN

Valid in states  SYMBOL MODIFY
.HL 3 ^^^*>STRETCH\*
.FILL
Define size of a scaled symbol with cursor.
When symbol is of a suitable size, disconnect cursor with an END.
.NOFILL

Format:  STRETCH

Valid in states  SYMBOL MODIFY
.HL 3 ^^^*>BEND\*
.FILL
Bends a text around a linear feature.
.B
Each character of the text string becomes an individual text component, with
its locating point positioned on the linear found feature and its orientation
parallel to the found feature at this point. Any characters
with zero width are taken to represent diacritical marks (such as
accents) and are put together with the following character in a single
component.
.B
When BENDing around circles or circle arcs, then the direction (i_.e_. 
clockwise or anticlockwise) that the text takes is determined by the
original orientation of the text, and the tangent of the arc at the first
point used to define the BEND.
.B
This command is only valid if the COMPOSITE option has been enabled and the
existing text consists of a single text component. (If text is already 
composed of multiple components, then use the COLLAPSE command to achieve
a single text component)
.NOFILL

Format:  BEND  subcommand

Valid in state  MODIFY
.LIST '*'
.LE ;^^^*>BEND NORMAL\*
.FILL
BEND the subject around the found object at the cursor position (default).
.BR
The original justification of the text is maintained.
.NOFILL

Format:  BEND NORMAL
or       BEND
.LE ;^^^*>BEND STRETCH\*
.FILL
BEND the subject between two points of a linear found object.
.B
The initial cursor position is taken as the first point, and the cursor is
restrained to lie on the found object. The cursor can then be moved to the
second point and the END command given to complete the operation. 
.NOFILL

Format:  BEND STRETCH
.END LIST
.HL 3 ^^^*>COLLAPSE\*
.FILL
This command is only valid if COMPOSITE has been ENABLED.
.BL
Converts two or more component texts into a single text component.
If any of the component texts within the feature contain more than one letter,
then they are assumed to be words, and a space is added between each
collapsed component. If all the components consist of one letter,
then no extra spaces are added (this would be the case if the composite
text was produced by the BEND command).
.BL
When in TEXT or MODIFY state, all the text components are collapsed into
one subtext. The resulting text takes its attributes from the first text
component. 
.BL
When in MODIFY (part) state the current text component has the following
text component added to it. This combined text component takes its
attributes from the current text component. 
.NOFILL

Format:  COLLAPSE

Valid in states  TEXT MODIFY
.HL 3 ^^^*>PARAGRAPH\*
.FILL
This command is only valid if COMPOSITE has been ENABLED.
.BL
Treats a text feature as a paragraph of text, and allows word processing
operations on it.
.BL
The text is reformatted as a paragraph. This paragraph is positioned with
the locating point of its first component text positioned so that the
first line of the formatted paragraph is as close as possible to the
first line of the original feature.
.BR
The first component of the original text feature also provides the
orientation and the line spacing of the paragraph. The line spacing
uses the TOLERANCE OFFSET, to provide an offset for each succeeding
line of text (see OFFSET command for details).
.BL
This command leaves LITES2 in MODIFY state, with the first text component
as the current component.

.NOTE
In all PARAGRAPH commands, any per point attributes are lost.
.END NOTE
.NOFILL

Format:  PARAGRAPH  subcommand

Valid in states  TEXT MODIFY
.LIST '*'
.LE ;^^^*>PARAGRAPH FILL\*
.FILL
Fill a paragraph of text so that no line is longer than the specified
length. The text components are split at spaces or tabs, and spaces may
be inserted if necessary when two text components are collapsed. Text
components are never collapsed if they have different component codes
or different heights.
.BR
Leading and trailing spaces and tabs are stripped off text components.
.BL 
The length is specified in sheet mm, unless a UNITS command has
previously been given.
If no length is specified, then the length of the first component is used. 
.NOFILL

Format:  PARAGRAPH FILL [length]
.LE ;^^^*>PARAGRAPH JUSTIFY\*
.FILL
Justifies a paragraph of text so that each line is the same length. It
does this by putting each word in a text component of its own, and
positioning them so that extra space in the line is evenly distributed
between the individual components. If a line is already longer than
the specified length, then it is allowed to overhang the margins of the
text, so it is usual to precede this command with a PARAGRAPH FILL
command.
.BL
The last line of the paragraph is never filled.
.BL
Leading and trailing spaces and tabs are stripped off text components.
.BL 
The length is specified in sheet mm, unless a UNITS command has
previously been given.
If no length is specified, then the length of the first component is used. 
.NOFILL

Format:  PARAGRAPH JUSTIFY [length]
.LE ;^^^*>PARAGRAPH NORMAL\*
.FILL
Tidies a paragraph of text.
.BL 
Text features that have been paragraphed can be upset by several
LITES2 commands. For example:
.LIST 'o'
.LE;changing the size of a subtext means that the subtext takes up
more or less space in the line, with subsequent overwriting or
unwanted space
.LE;changing the locating code of the paragraph as a whole, where
there is more than one subtext per line, leads to overwriting
of these subtexts (although other lines are justified as required)
.END LIST
This command corrects such paragraphs, by repositioning the text
components on their own lines to form a correct paragraph. The number
of spaces to place between each text component may be specified
(default 1). It may be useful to specify zero spaces if there are
text components which form only part of a word, and hence do not
require spaces around them.
.BL
Leading and trailing spaces and tabs are stripped off text components,
unless the optional number of spaces is given as 0.
.NOFILL

Format:  PARAGRAPH NORMAL [spaces]
.END LIST
.HL 3 ^^^*>WHOLE\*
.FILL
Changes from MODIFY (part) state to MODIFY state; i_.e_. change from editing
individual text components to editing the whole text feature.
.NOFILL

Format:  WHOLE

Valid in state  MODIFY
.HL 3 ^^^*>REPLACE\*
.FILL
Replaces existing text or AC text with the given string. For an AC, the
string may be absent, in which case the AC text is removed. If the string
is to have leading spaces or tabs, then it must be enclosed in double quotes.
.B
If editing a composite text feature as a whole, all the individual text 
components are replaced by one single component.
.BL
NOTE: An implied TEXT or REPLACE command is inserted before any
command that is terminated by a control Z. REPLACE is used if it
is valid, and otherwise TEXT is used.
.NOFILL

Format:  REPLACE  text
or       text_^Z

Valid in states  TEXT MODIFY AC
.HL 3 ^^^*>SUBSTITUTE\*
.FILL
Substitutes new substring for existing one in text feature or ancillary
code. If either the old or new text contains spaces then it should be enclosed
in double quotes.
.BL
Note: if in MODIFY (part) state, then only the current text component is 
searched for the existing text string.  If dealing with whole texts, then the
first occurrence will be changed.
.NOFILL

Format:  SUBSTITUTE  oldtext newtext

eg       SUBSTITUTE FRED JIM
or       SUBSTITUTE "Ford Prefect" "Zaphod Beeblebrox"

Valid in states  TEXT MODIFY AC
.SUBTITLE Attribute Commands
.PAGE
.HL 2 ^^^*Attribute Commands\*
.INDEX Attribute Commands
.HL 3 ^^^*>GET\*
.FILL
Copy the specified attribute set into the current attribute set.
These can then be modified using the SET command (qv) and saved using
the PUT command.
.BR
Attribute sets contain values of feature code (FC), process code (PC),
PROCESS (for use at end of construction), and ACs.
.BR
There are 16 attribute sets.
.NOFILL

Format:  GET  integer

Valid in states  INITIAL READY LINE CIRCLE TEXT SYMBOL EDIT ON WINDOW AC
.HL 3 ^^^*>PUT\*
.FILL
Copy the current attribute set into the specified attribute set.
.BR
Attribute sets contain values of feature code (FC), process code (PC),
PROCESS (for use at end of construction), and ancillary codes (ACs).
.BR
There are 16 attribute sets.
.BR
See also GET and SET.
.NOFILL

Format:  PUT  integer

Valid in states  INITIAL READY LINE CIRCLE TEXT SYMBOL EDIT ON WINDOW AC
.HL 3 ^^^*>SET\*
.FILL
Sets values for various attributes in the current attribute set, which
is used for new constructions. Values for FC, PC, PROCESS, point
attributes and ACs, can be saved by PUT, and restored by GET, whereas
global attributes cannot. 
.NOFILL

Format:  SET  subcommand

Valid in states  INITIAL READY LINE CIRCLE TEXT SYMBOL MODIFY EDIT ON WINDOW AC
.LIST '*'
.LE ;^^^*>SET AC\*
.FILL
Sets an ancillary code in the current attribute set to be used for new
constructions. Any number of ACs may be set. The ACs in the current
attribute may be edited using the ANCILLARY command when there is no
found feature. The SET FC command clears any ACs in the current attribute set. 
.BR
The type of AC can either be an integer, or the corresponding name from 
the FRT.
.BL
See the section on LITES2 command language for details of the format
of the value for this type of command argument.
.BL
Text is optional. It must be enclosed in double quotes if it is to have
any leading spaces or tabs.
.NOFILL

Format:  SET AC  type value [text] (as for ADD AC qv)

eg       SET AC PIPE 1234 pressure 19.4
.LE ;^^^*>SET ARC\*
.FILL
Sets the feature code to be used for the features produced when doing
PART operations on full circum-circles (graphical type 5). It must
represent a circum-circle arc (graphical type 4) in the current FRT. 
.NOFILL

Format:  SET ARC  integer

eg       SET ARC 100 
.LE ;^^^*>SET ATTRIBUTE\*
.FILL
Sets a point attribute in the current attribute set to be used for new
constructions. Any number of point attributes may be set. 
.BR
The attribute code can either be an integer, or the corresponding
name defined by Laser-Scan or one defined by the user in the FRT file. 
.BL
See the section on LITES2 command language for details of the format
of the value for this type of command argument.
.BL
Point attributes are removed from the construction attribute set with
the UNSET ATTRIBUTE command. 
.NOTE
If the logical name LSL$IFF__OUTPUT__REVISION
.INDEX LSL$IFF__OUTPUT__REVISION
is not set to 1, any point attributes (apart from Z) will be lost on
completion of editing. Points with the attribute Z will produce ZS 
entries in the IFF file, rather than ST entries.
.BR
See the IFF user guide for more information on IFF files and
LSL$IFF__OUTPUT__REVISION
.END NOTE
.NOFILL

Format:  SET ATTRIBUTE  code value

eg       SET ATTRIBUTE Z  24.3
or       SET ATTRIBUTE 93 24.3
.LE ;^^^*>SET CATEGORY\*
.FILL
Sets the text category for text constructions (global).
.NOFILL

Format:  SET CLASS  integer
.LE ;^^^*>SET FC\*
.FILL
Sets the feature code for the current attribute set.
.BR
Any process and ACs in the current attribute set are cleared by this
command. 
.NOFILL

Format:  SET FSN  integer
.LE ;^^^*>SET FSN\*
.FILL
Sets the feature serial number for the next constructed feature (global).
.BR
The setting is cleared by ABANDON, or by SET FSN 0.
.NOFILL

Format:  SET FC  integer
.LE ;^^^*>SET HEIGHT\*
.FILL
Sets height of text (mm) for text constructions (global).
.NOFILL

Format:  SET HEIGHT  real
.LE ;^^^*>SET INCREMENT\*
.FILL
Sets the increment (in mm) to be used when using the LARGER and SMALLER
commands on text features (when the HEIGHT option has been enabled, and the
POINT option disabled). 
If no argument is given to this command, then the height will be
increased/decreased by 10%.  This is the default setting.
.NOFILL

Format:  SET INCREMENT  [real]

eg       SET INCREMENT 2.5
.LE ;^^^*>SET LAYER\*
.FILL
Sets the layer to be used for new constructions (global).
.NOFILL

Format:  SET LAYER  integer
.LE ;^^^*>SET LOCATION\*
.FILL
Sets the text location field for text constructions (global).
.NOFILL

Format:  SET LOCATION  integer
.LE ;^^^*>SET MAP\*
.FILL
Sets the map to be used for new constructions (global)
.NOFILL

Format:  SET MAP  integer
.LE ;^^^*>SET PSIZE\*
.FILL
Sets the text height in points for text constructions (global).
.NOFILL

Format:  SET PSIZE  integer
.LE ;^^^*>SET PROCESS\*
.FILL
Sets a process for the current attribute set.
.BR
The process is a command (possibly a macro) which will be obeyed
automatically on completion of any construction. 
.BR
The commands invoked may for instance use SEARCH LAST (qv) to perform
some editing operation on the new feature. 
.BR
The process can be cleared by giving a blank string, and is cleared
automatically whenever SET FC is used. 
.NOTE
This process is only carried out after an END command. It will
not be executed if a text or symbol is DEPOSITed.
.END NOTE
.NOFILL

Format:  SET PROCESS  string
.LE ;^^^*>SET STYLE\*
.FILL
Sets the text style for text constructions (global).
.NOFILL

Format:  SET STYLE  integer
.LE ;^^^*>SET TEXT\*
.FILL
Sets the feature code to be used for constructing text features (global).
.NOFILL

Format:  SET TEXT  integer
.END LIST
.HL 3 ^^^*>UNSET\*
.FILL
Unsets values for various attributes in the current attribute set.
.NOFILL

Format:  UNSET  subcommand

Valid in states  INITIAL READY LINE CIRCLE TEXT SYMBOL MODIFY EDIT ON WINDOW AC
.LIST '*'
.LE ;^^^*>UNSET ATTRIBUTE\*
.FILL
If an argument is given, removes the specified attribute from the list
of point attributes in the current construction attribute set. 
.BR
If no argument is given then all the attributes in the list are removed.
.BR
The argument (attribute code) can either be an integer, or the
corresponding name from the FRT. 
.NOFILL

Format:  UNSET ATTRIBUTE  [code]

eg       UNSET ATTRIBUTE Z
or       UNSET ATTRIBUTE 93
or       UNSET ATTRIBUTE
.END LIST
.HL 3 ^^^*>REPEAT\*
.FILL
Set the values in the current attribute set to the values of the found
feature. Enables future constructions to have the same attributes as the
found feature. 
.BR
See also GET and SET.
.NOFILL

Format:  REPEAT subcommand

Valid in states  LINE CIRCLE TEXT SYMBOL
.LIST '*'
.LE ;^^^*>REPEAT ATTRIBUTE\*
.FILL
Sets the point attributes in the current attribute set to be 
the same as those of the current point of the current feature.
.BL
This command is only valid if the cursor is on a point of a feature.
.NOFILL

Format:  REPEAT ATTRIBUTE
.LE ;^^^*>REPEAT FEATURE\*
.FILL
Sets the feature wide attributes of the current feature in the attribute
set (default).
.BL
These are (for all features) the Map, Layer, Feature Code and any ACs
and (for text features) the Category, Font, Location and Text Size. 
.NOFILL

Format:  REPEAT
or       REPEAT FEATURE
.END LIST
.HL 3 ^^^*>SELECT\*
.FILL
Makes feature selections by various criteria.
Selections may be applied to windowing and FIND and SEARCH operations,
and can be activated for output. After SELECT ALL, the first SELECT
command for a given attribute implies the deselection of all non-selected
values for that attribute.
.NOFILL

Format:  SELECT  subcommand

Valid in states  INITIAL READY SETUP
.LIST '*'
.LE ;^^^*>SELECT AC\*
.FILL
Allows selection by ancillary code (AC) entries in features. 
The AC type may be either an integer, the corresponding name defined by
Laser-Scan, or a name defined by the user in the FRT file.
AC selections may be stored in up to 10 separate groups (see the
SELECT ACGROUP command). A feature will be selected if its ACs
satisfy the criteria in any one or more of the groups. Within a group,
selections for different AC types are logically ANDed together, so a
feature must satisfy all the selection criteria to be selected. For
example, to select ^*all\* features with either a type 2 or a type 3 AC, one
might use the commands:
.NOFILL

SELECT ACGROUP 1	! first group of AC selections (default)
SELECT AC 2		! want all type 2 ACs
SELECT ACGROUP 2	! another group of selections
SELECT AC 3		! and all type 3 ACs also

.FILL
If the SELECT ACGROUP commands were not used, then only features with
both the AC types would be selected.
.NOFILL

Format:  SELECT AC type [subcommand]
.LIST 'o'
.LE ;^^^*>SELECT AC type CANCEL\*
.FILL
Cancels all selections based on the given AC type. The DESELECT command
may not be used with CANCEL.
.NOFILL

Format:  SELECT AC type CANCEL
.LE ;^^^*>SELECT AC type PRESENT\*
.FILL
Features must have an AC of the specified type. The value and text of
the AC are not considered. PRESENT is the default subcommand for the
SELECT AC command, and may therefore be omitted. 
.BR;The command DESELECT AC type PRESENT implies that features must
^*not\* have an AC of the specified type. 
.NOFILL

Format:  SELECT AC type [PRESENT]
.LE ;^^^*>SELECT AC type TEXT\*
.FILL
Allows selection according to the contents of the AC text. If just a
text string is specified (in double quotes if it contains spaces), then
features will be selected if they contain an AC of the specified type
whose text contains the given string (or does not contain the string for
a DESELECT command). If an inequality and value(s) are given (as for the
SELECT AC type VALUE command), then the given text string within the AC
text must be followed immediately by a numerical value in the selected
range. The datatype of the value may only be integer. A null text string
(specified by "") followed by a value or range of values indicates that
the numerical value occurs at the start of the AC text. 
.NOFILL

Format:  SELECT AC type TEXT text [ [inequality] val1 [val2] ]

eg       SELECT AC DFAD__FADT TEXT fid 25
.FILL
.LM+9
Features must contain a DFAD__FADT type AC in which the text
contains the string "fid" followed by a value 25.
.LM-9

.LE ;^^^*>SELECT AC type VALUE\*
.FILL
Allows selection according to the value contained in AC entries. Values
must be specified in the correct format (integer, real, date, time,
character) for the data type of the AC. 
.NOFILL
The inequality may be any of:     =     _>    _>=     _<    _<=    _<_>
               with synonyms:   .EQL. .GTR. .GEQ. .LSS. .LEQ. .NEQ.
                         and:                     .LT.
.FILL
Inequality names may be abbreviated. If the inequality is omitted, then
= is assumed. A range of values may be specified by giving two values
(omitting the inequality, or specifying =), which will be taken to mean
the range between and including the two values. The command may be
repeated to specify additional values or ranges of values. 
.NOFILL

Format:  SELECT AC type VALUE [inequality] val1 [val2]

eg       SELECT AC HEIGHT VALUE _>30.0 (height AC, value _>30)
         SELECT AC HEIGHT VALUE 10.0 20.0 (height AC, values 
                                             10 to 20)
.END LIST
.LE ;^^^*>SELECT ACGROUP\*
.FILL
Specifies a group number (1-10) in which to store subsequent SELECT AC
commands. The selections in different groups are logically ORed together.
.NOFILL

Format:  SELECT ACGROUP n
.LE ;^^^*>SELECT ALL\*
.FILL
Return selections to default state.
.BL
If no subcommand is given, then all selections are reset to default
state, ie all maps, layers, feature codes, feature serial numbers, ACs,
text categories and text styles are selected and any selections based on
regions are cancelled. Selection of features flagged as edited, unedited
and deleted is also cancelled. I_.e_. edited and unedited features are
selected, while deleted features are not selected. 
.BL
If a subcommand is given, then only one of classes of selections is
reset. 
.NOFILL

Format:  SELECT ALL [subcommand]
.LIST 'o'
.LE ;^^^*>SELECT ALL AC\*
.FILL
All ACs are selected.
.NOFILL

Format:  SELECT ALL AC
.LE ;^^^*>SELECT ALL CATEGORY\*
.FILL
All text categories are selected.
.NOFILL

Format:  SELECT ALL CATEGORY
.LE ;^^^*>SELECT ALL FCS\*
.FILL
All feature codes are selected.
.NOFILL

Format:  SELECT ALL FCS
.LE ;^^^*>SELECT ALL FLAGS\*
.FILL
Selection of features flagged as edited, unedited and deleted is
cancelled. ie Edited and unedited features are selected, while deleted
features are not selected
.NOFILL

Format:  SELECT ALL FLAGS
.LE ;^^^*>SELECT ALL FSNS\*
.FILL
All feature serial numbers are selected.
.NOFILL

Format:  SELECT ALL FSNS
.LE ;^^^*>SELECT ALL GEOMETRIES\*
.FILL
Any selections by geometry are cancelled.
.NOFILL

Format:  SELECT ALL GEOMETRIES
.LE ;^^^*>SELECT ALL LAYERS\*
.FILL
All layers are selected.
.NOFILL

Format:  SELECT ALL LAYERS
.LE ;^^^*>SELECT ALL MAPS\*
.FILL
All maps are selected.
.NOFILL

Format:  SELECT ALL MAPS
.LE ;^^^*>SELECT ALL PRIORITIES\*
.FILL
All representation priority levels are selected for display.
.NOFILL

Format:  SELECT ALL PRIORITIES
.LE ;^^^*>SELECT ALL REGIONS\*
.FILL
Any selections by region are cancelled.
.NOFILL

Format:  SELECT ALL REGIONS
.LE ;^^^*>SELECT ALL STYLE\*
.FILL
All text styles are selected.
.NOFILL

Format:  SELECT ALL STYLE
.END LIST
.LE ;^^^*>SELECT CATEGORY\*
.FILL
Select text features with a category in the given range.
.BR
Values for text categories are in the range 0 - 63.
.NOTE
Only text features are subject to this selection; other features
may also be displayed / found / output 
.END NOTE
.NOFILL

Format:  SELECT CATEGORY range

eg       SELECT CATEGORY 0-12,15,30-35
.LE ;^^^*>SELECT CUTGEOMETRY\*
.FILL
Select all features that cut the specified geometry.
.BL
Note that only one geometry may be used for selection at a time, and
that it must be an area geometry.
.NOFILL

Format:  SELECT CUTGEOMETRY integer

eg       SELECT CUTGEOMETRY 4

.LE ;^^^*>SELECT CUTREGION\*
.FILL
Select all features that cut the boundary of the specified region.
.BL
See also ENABLE AND
.NOFILL

Format:  SELECT CUTREGION integer

eg       SELECT CUTREGION 4
.LE ;^^^*>SELECT DELETED\*
Select all features that have been deleted.
Only operational if FLAGS are enabled.

Format:  SELECT DELETED
.LE ;^^^*>SELECT EDITED\*
Select all features that have been flagged as edited.
Only operational if FLAGS are enabled.

Format:  SELECT EDITED
.LE ;^^^*>SELECT FCS\*
.FILL
Feature codes in given range.
.BR
Range may be numeric or feature code groups.
.BR
See the FRTLIB documentation for information about setting up groups.
.NOFILL

Format:  SELECT FCS  range

eg       SELECT FC 20-30,40-50,55,78
or       SELECT FC ROADS,RIVERS
or       SELECT FC 3-13,ROADS
.LE ;^^^*>SELECT FSNS\*
.FILL
Select Feature Serial Numbers in given range.
.NOFILL

Format:  SELECT FSNS  range

eg       SELECT FSNS 20-30,40-50,55,78
.LE ;^^^*>SELECT INGEOMETRY\*
.FILL
Select all features that lie inside the specified geometry.
.BL
Note that only one geometry may be used for selection at a time, and
that it must be an area geometry.
.NOFILL

Format:  SELECT INGEOMETRY integer

eg       SELECT INGEOMETRY 4

.LE ;^^^*>SELECT INREGION\*
.FILL
Select all features that lie completely within the specified region.
.BL
See also ENABLE AND
.NOFILL

Format:  SELECT INREGION integer

eg       SELECT INREGION 4
.LE ;^^^*>SELECT LAYERS\*
.FILL
Select by layer.
.NOFILL

Format:  SELECT LAYERS  range

eg       SELECT LAYERS 2-4,10-24
.LE ;^^^*>SELECT MAPS\*
.FILL
Maps in given range.
.NOFILL

Format:  SELECT MAPS  range

eg       SELECT MAPS 2-4
.LE ;^^^*>SELECT OUTPUT\*
.FILL
Only selected features are output on EXIT or WRITE (default is DESELECT
OUTPUT).
.NOFILL

Format:  SELECT OUTPUT
.LE ;^^^*>SELECT OUTGEOMETRY\*
.FILL
Select all features that lie outside the specified geometry.
.BL
Note that only one geometry may be used for selection at a time, and
that it must be an area geometry.
.NOFILL

Format:  SELECT OUTGEOMETRY integer

eg       SELECT OUTGEOMETRY 4

.LE ;^^^*>SELECT OUTREGION\*
.FILL
Select all features that lie completely outside the specified region.
.BL
See also ENABLE AND
.NOFILL

Format:  SELECT OUTREGION integer

eg       SELECT OUTREGION 4
.LE ;^^^*>SELECT PRIORITIES\*
.FILL
Select representation priority levels for display.
Note that priority selections do not affect feature operations
such as FIND, nor file operations such as WRITE.
.NOFILL

Format:  SELECT PRIORITIES range
or       SELECT PRIORITY range

eg       SELECT PRIORITIES 2-4,10-24
.LE ;^^^*>SELECT STYLE\*
.FILL
Select text features with a style in the given range.
.BR
Values for text styles are in the range 0 - 3.
.NOTE
Only text features are subject to this selection; other features
may also be displayed / found / output 
.END NOTE
.NOFILL

Format:  SELECT STYLE range

eg       SELECT STYLE 0,2
.LE ;^^^*>SELECT UNEDITED\*
Select all features that have not been flagged as edited.
Only operational if FLAGS are enabled.

Format:  SELECT UNEDITED
.LE ;^^^*>SELECT WINDOW\*
.FILL
Only selected features are drawn on the screen, and may be found using
FIND or SEARCH (default).
.NOFILL

Format:  SELECT WINDOW
.END LIST
.HL 3 ^^^*>DESELECT\*
.FILL
Specifies features which are not to participate in future operations.
See SELECT.
.NOFILL

Format:  DESELECT  subcommand

Valid in states  INITIAL READY SETUP

.FILL
Takes same subcommands as SELECT (qv), but DESELECT ALL and DESELECT
ACGROUP are not valid.

.HL 3 ^^^*>GEOMETRY\*
.FILL
Geometries are dynamic data structures (ie they are only available while
LITES2 is running) that represent 2 dimensional geometric data. They can
be manipulated in more complex ways than features, for example they can be 
combined together and buffer zones can be created around them. Their
main advantage is that they represent areas in a more coherent manner
than either IFF features or LITES2 regions.
.BL
There are three types of geometry - point (dimension 0), line (dimension 1)
and area (dimension 2). Each of these types may consist of one or more
parts, thus, for example a river network which in an IFF file consists
of several line features, would produce one multi part line type geometry.
Where a geometry consists of only one part it is called a simple geometry
and when it consists of more than one part it is considered to be complex.
.BL
A simple area consists of a single outer boundary or ring (digitised in
a counter clockwise direction) and possibly one or more inner boundaries
or rings (digitised in a clockwise direction). These boundaries must not
self-intersect or intersect each other. Inner boundaries must all lie
within the outer boundary and must not lie within another inner
boundary.
.BL
Features can be selected by geometry, where the geometry is of area type.
To do this selection, the features are converted to geometries so they
must be representable by valid geometries of their default type. See the
GEOMETRY FEATURE command for details of these default types.
.BL
There are 32 geometries available.
.BL
An appropriate licence is required to use this command. 
.BL
Geometry manipulations make use of a shared image pointed at by the
logical name LSL$LITES2__GEOM__ROUTINES. This image is supplied by
Laser-Scan. It is called LSL$EXE:LITES2GEOMSHR.EXE.
.BR
This shared image in turn makes use of the image pointed at by the
logical name LSL$LSLGOTHICSHR. This is normally LSL$LIBRARY:LSLGOTHICSHR 
in the LSLSYSTEM package.
.NOFILL

Format:  GEOMETRY subcommand

Valid in states:
READY LINE CIRCLE TEXT SYMBOL EDIT MODIFY ON CONSTRUCT
.LIST '*'
.LE ;^^^*>GEOMETRY AND\*
.FILL
To combine two geometries together to produce a third using a mathematical
AND of the input geometries. This command may produce a complex geometry.
.NOFILL

If geom1 is an area  and geom2 is an  area, geom3 will be an area.
If geom1 is a  line  and geom2 is an  area, geom3 will be a  line.
If geom1 is a  point and geom2 is an  area, geom3 will be a point.
If geom1 is a  line  and geom2 is a   line, geom3 will be a point.

.FILL
All other combinations of geometry types are invalid.
.NOFILL

Format:  GEOMETRY AND geom1 geom2 geom3

.LE ;^^^*>GEOMETRY ANDNOT\*
.FILL
To combine two geometries together to produce a third using a mathematical
AND of the input geometry 1 with the area outside geometry 2. This
command may produce a complex geometry.
.NOFILL

If geom1 is an area  and geom2 is an  area, geom3 will be an area.
If geom1 is a  line  and geom2 is an  area, geom3 will be a  line.
If geom1 is a  point and geom2 is an  area, geom3 will be a point.

.FILL
All other combinations of geometry types are invalid.
.NOFILL

Format:  GEOMETRY ANDNOT geom1 geom2 geom3

.LE ;^^^*>GEOMETRY ADD\*
.FILL
To add a simple geometry to another geometry. If the second geometry does
not exist, one of an appropriate type will be created.
.BL
When adding a geometry to an existing geometry, both geometries must be
of the same type.
.NOFILL

Format:  GEOMETRY ADD geom1 geom2

.LE ;^^^*>GEOMETRY BUFFER\*
.FILL
To produce a buffer of a specified radius around a geometry. The resulting
geometry will be of area type.
.BL
By default, the radius is specified in IFF units (unless a UNITS command
has been given).
.BL
The number of points used to generate arcs around external angles in the
original geometry is controlled by the CIRGEN tolerance setting.
.BL
The algorithm to produce buffer zones is theoretically correct, but because
when it produces circle arcs around external angles it generates them
as a series of vectors, it occasionally fails to produce a valid geometry.
When this happens, LITES2 divides the vector length by 2 and tries to
generate the buffer zone again. It does this 4 times before failing.
If this happens more than very occasionally, the TOLERANCE CIRGEN
setting should be altered to produce shorter vectors for the required
offset.
.NOFILL

Format: GEOMETRY BUFFER geom1 geom2 radius

.LE ;^^^*>GEOMETRY CANCEL\*
.FILL
To cancel the specified geometry.
.NOFILL

Format: GEOMETRY CANCEL geom1

.LE ;^^^*>GEOMETRY COPY\*
.FILL
To copy one geometry into another geometry. This leaves the original
geometry as it was.
.NOFILL

Format: GEOMETRY COPY input__geom output__geom

.LE ;^^^*>GEOMETRY FEATURE \*
.FILL
To create a geometry from the current found feature. The type of
geometry created, by default, depends on the feature's graphical type:
.NOFILL

  Graphical types 7 - 10 produce point type geometries.
  Graphical types 1 - 6 and 11 produce line type geometries.
  Graphical type  12 produces area type geometries.

.FILL
These default types can be overridden by using the dimension argument to
the command. This can take a value of 1 or 2.
.BL
If, in this case the found object is a text or symbol, then a box (or boxes)
will be generated around the feature (expanded using the TOLERANCE EXPAND
setting) to produce the line or area type geometry.
.BL
If the found feature is a circle or circle arc, then the number of points
generated to produce the line or area geometry is controlled by the
TOLERANCE CIRGEN setting.
.BL
Curves and symbol strings (graphical types 6 and 11) are treated as
lines (graphical type 1).
.BL
When creating line type geometries, invisible lines in the feature are
ignored (ie they are treated as visible lines).
.BL
When creating area geometries, the IFF data must conform to certain rules
that are not normally enforced by LITES2. Polygons that are produced
by other programs (eg IPOLYGON) do conform to these rules. They are:
.NOFILL

     1) Invisible moves imply a jump to another ring.
     2) Invisible moves to and from a ring must be coincident.
     3) The direction of digitising of the rings is irrelevant,
        but the ring with the largest area is taken to be the
        outer boundary, and all the other rings must lie inside
        this boundary.
     4) The visible line work must not intersect.

Format:  GEOMETRY FEATURE geom1 [dimension]

.LE ;^^^*>GEOMETRY NOTAND\*
.FILL
To combine two geometries together to produce a third using a
mathematical AND of the area outside input geometry 1 with geometry 2.
.BR;This command may produce a complex geometry.
.BL
This command is only valid for area type geometries.
.NOFILL

Format:  GEOMETRY NOTAND geom1 geom2 geom3

.LE ;^^^*>GEOMETRY OR\*
.FILL
To combine two geometries together to produce a third using a
mathematical OR of input geometry 1 with geometry 2. This means that
the resultant geometry will consist of all the area covered by either
of the input geometries.
.BL
This command may produce a complex geometry.
.BL
This command is only valid for area type geometries.
.NOFILL

Format:  GEOMETRY OR geom1 geom2 geom3

.LE ;^^^*>GEOMETRY REGION\*
.FILL
To create a (area) geometry from the specified region.
.BL
The input region must conform to the rules for data being used for
an area type geometry. See GEOMETRY FEATURE for details.
.NOFILL

Format:  GEOMETRY REGION geom region

.LE ;^^^*>GEOMETRY RENAME\*
.FILL
To rename a geometry to another geometry. This command has the effect
of cancelling the original geometry.
.NOFILL

Format: GEOMETRY RENAME input__geom output__geom

.LE ;^^^*>GEOMETRY XOR\*
.FILL
To combine two geometries together to produce a third using a
mathematical XOR of input geometry 1 with geometry 2. This means that
the resultant geometry will consist of all the area covered by either
of the input geometries, but excluding the area covered by both.
.BL
This command may produce a complex geometry.
.BL
This command is only valid for area type geometries.
.NOFILL

Format:  GEOMETRY XOR geom1 geom2 geom3
.END LIST
.HL 3 ^^^*>REGION\*
.FILL
An appropriate licence is required to use this command.
.BL
Creates or adds points to the specified region.
There are 32 regions available.
.BL
The command REGION n
defines the found linear, text or symbol feature, or the current text
component or symbol when in MODIFY state with no found feature, to be
the specified region. 
.BR
For text features, the region consists of the joined up boxes around 
each character (qv TOLERANCE EXPAND); for symbols it consists of 
its bounding box.
.BL
Regions are always taken to be closed areas. A closing line is assumed.
Once defined, a region can be used for feature selection, using SELECT
and DESELECT, and also via the $INREGION, $OUTREGION, and $CUTREGION
system variables. Features can also be clipped to regions (qv CLIP 
command).
.BR
Regions can be cancelled with the CANCEL REGION command, transformed 
with the TRANSFORM REGION command, their vertices listed with the SHOW 
REGION command and they can be displayed on the screen with the DRAW
REGION and DRAW AREAREGION commands. 
.NOFILL

Format:  REGION  integer [subcommand]

eg       REGION 5
or       REGION 5 POINT 10.0 20.0

Valid in states:
READY LINE CIRCLE TEXT SYMBOL EDIT MODIFY ON CONSTRUCT
.LIST '*'
.LE ;^^^*>REGION n BOX\*
.FILL
Creates a rectangular region around the limits of the found feature (or
text or symbol being modified).
.NOFILL

Format:  REGION  integer BOX
.LE ;^^^*>REGION n FEATURE\*
.FILL
The command REGION n FEATURE is a synonym for the REGION n command (see
above).
.NOFILL

Format:  REGION  integer FEATURE

.LE;^^^*>REGION n GEOMETRY m\*
.FILL
Creates a region from the specified geometry.
.BL
This command is only valid for area geometries with a single part. If
the geometry has any inner rings, then these will be discarded, as regions
cannot satisfactorily cope with this concept.
.NOFILL

Format:  REGION  integer GEOMETRY integer

.LE;^^^*>REGION n IMAGE\*
.FILL
Creates a region around pixels of the same colour.
The cursor must be pointing within a raster image specified using
the IMAGE SELECT command (the highest numbered image will be
used if there is more than one). The colour of the pixel containing
the cursor is identified, and a region created around all contiguous
pixels of the same colour. Note that the region may contain holes
of other colours (not containing the cursor). This command may be
terminated prematurely by CTRL/C.
.NOFILL

Format:  REGION  integer IMAGE
.LE ;^^^*>REGION n POINT\*
.FILL
The command REGION n POINT x y adds data point x y to region n, 
creating the region if it does not already exist. The region cannot
be used until it has at least 3 points. 
.NOFILL

Format:  REGION  integer POINT x y
.LE;^^^*>REGION WINDOW\*
.FILL
Defines a rectangular region using the cursor.
The current cursor position becomes the bottom left of the region,
and WINDOW state is entered. The cursor may then be moved to the
top right of the region and the END command given. The START command
may be used to set the bottom left to a new position. ABANDON may
be used to cancel the operation.
.NOFILL

Format:  REGION  integer WINDOW
.LE ;^^^*>REGION n ZONE\*
.FILL
Creates a buffer zone around the found linear feature (or text or symbol
being modified). If the feature is closed, then a positive offset will
create a region outside the feature while a negative offset will create
a region inside the feature. Negative offsets greater than the extent of
the closed feature produce invalid regions. If the feature is open, a
region will be created around the whole feature, like a sausage.
.BL
Note that for complex features, buffer zones may be reentrant and will
cause problems when testing features against them. However the variable
$CURSINREGION will give the correct result for these regions.
.BL
When creating buffer zones, circle arcs are generated around the outside
of angles in the original feature. The number of points produced in
these arcs is controlled by the CIRGEN tolerance setting. The points in
the region are then filtered, and the number of points produced in this
stage is controlled by the BUNCH tolerance setting.
.BL
By default, the offset distance is specified in IFF units (unless a UNITS
command has been given).
.NOFILL

Format:  REGION  integer ZONE offset
.END LIST
.FILL
.SUBTITLE Ancillary Coding Commands
.PAGE
.HL 2 ^^^*Ancillary Coding Commands\*
.INDEX Ancillary Coding Commands
.HL 3 ^^^*>ANCILLARY\*
.FILL
Allows ancillary code manipulation. If in INITIAL or READY state (no
found feature), then the ACs in the current attribute set are edited,
otherwise the ACs of the found feature are edited.
.BR
AC state is entered, and commands PREVIOUS/NEXT/FIRST/LAST (qv)
will move between the TCs/CHs/ACs.
DELETE will delete the current TC/CH/AC, ADD will add new ones,
ALTER will change the current AC, while REPLACE and SUBSTITUTE will allow
the text only to be changed.
.BR
To display the current list of ACs, use EXAMINE AC (for feature), or
SHOW ATTRIBUTE (for current attribute set).
.BR
END or ABANDON will revert to READY state. The ACs belonging to a feature
will be unchanged of ABANDON is used, but changes to the current attribute
set cannot be 'undone'.
.NOFILL

Format:  ANCILLARY

Valid in states  LINE CIRCLE TEXT SYMBOL
.HL 3 ^^^*>AC\*
.FILL
Alias for ANCILLARY command (qv).
.NOFILL
.HL 3 ^^^*>ADD\*
.FILL
Add a new AC, TC or CH to the found feature, or to the current attribute
set. 
.NOFILL

Format:  ADD  subcommand

Valid in state  AC
.LIST '*'
.LE ;^^^*ADD AC\*
.FILL
Standard type AC entry. Any type of AC may be added by this command,
but some types still have their own command (such as ADD HEIGHT) for
historical reasons.
.BR
The type of AC can either be an integer, or the corresponding name from 
the FRT.
.BL
See the section on LITES2 command language for details of the format
of the value for this type of command argument.
.BL
Text is optional. It must be enclosed in double quotes if it is to have
any leading spaces or tabs.
.NOFILL

Format:  ADD AC  type value [text]

eg       ADD AC HEIGHT 24.53 pressure 19.4
or       ADD AC 3######24.53
.LE ;^^^*ADD CH\*
.FILL
CH entry (used to carry non-IFF information).
.NOFILL

Format:  ADD CH  text

eg       ADD CH LI 0 0
.LE ;^^^*ADD CONTOUR\*
.FILL
Contour (integer height) AC entry (type 2).
.NOFILL

Format:  ADD CONTOUR  integer

eg       ADD CONTOUR 200
.LE ;^^^*ADD CROSSREF\*
.FILL
Feature cross reference AC entry (not yet implemented).
.NOFILL

Format:  ADD CROSSREF  integer
.LE ;^^^*>ADD HEIGHT\*
.FILL
Height (real) AC entry (type 3).
.NOFILL

Format:  ADD HEIGHT  real

eg       ADD HEIGHT 34.6
.LE ;^^^*>ADD LH\*
.FILL
Left hand boundary text AC entry (type 4).
.NOFILL

Format:  ADD LH  integer text

eg       ADD LH 23 Bedfordshire
.LE ;^^^*ADD REALAC\*
.FILL
Standard real type AC entry. Superceded by ADD AC which can also deal
with reals.
.BR
AC type must be 3 or 80 - 99.
.BR
AC value is any real number.
.BR
Text is optional. It must be enclosed in double quotes if it is to have
any leading spaces or tabs.
.NOFILL

Format:  ADD REALAC  type value [text]

eg       ADD REALAC 99 22.6  Height of pylon
.LE ;^^^*>ADD RH\*
.FILL
Right hand boundary text AC entry (type 5).
.NOFILL

Format:  ADD RH  integer text

eg       ADD RH 23 Cambridgeshire
.LE ;^^^*>ADD SECONDARY\*
.FILL
Secondary feature code AC entry (type 1).
.NOFILL

Format:  ADD SECONDARY  integer

eg       ADD SECONDARY 23
.LE ;^^^*>ADD TC\*
.FILL
TC (transmitted comment) entry
.NOFILL

Format:  ADD TC  text

eg       ADD TC this is a transmitted comment
.END LIST
.HL 3 ^^^*>ALTER\*
.FILL
Amend the current AC, TC or CH.
.NOFILL

Format:  ALTER  subcommand

Valid in state  AC

Subcommands as ADD (qv)
.HL 3 ^^^*>TRAIL\*
Not yet implemented.
.FILL
Allows alteration of trailing TC/CH entries for the current layer.
.NOFILL

Format:  TRAIL

Valid in state  READY
.SUBTITLE Interrogation Commands
.PAGE
.HL 2 ^^^*Interrogation Commands\*
.INDEX Interrogation Commands
.HL 3 ^^^*>EXAMINE\*
.FILL
Displays attributes of found feature.
.NOFILL

Format:  EXAMINE  subcommand

Valid in states:
LINE CIRCLE TEXT SYMBOL EDIT MODIFY ON WINDOW CONSTRUCT AC RECOVER
.LIST '*'
.LE ;^^^*>EXAMINE AC\*
.FILL
Displays AC, TC, CH entries.
.NOFILL

Format:  EXAMINE AC
.LE ;^^^*>EXAMINE ALL\*
.FILL
Displays all information about found feature.
.NOFILL

Format:  EXAMINE ALL
.LE ;^^^*>EXAMINE ANGLE\*
.FILL
Displays the angle (anti-clockwise from horizontal) in degrees          
of the current feature. For linear features this is the angle          
of the current vector.
.BR
This information is not available for circle arcs. 
.NOFILL

Format:  EXAMINE ANGLE
.LE ;^^^*>EXAMINE AREA\*
.FILL
Displays the area enclosed by a linear feature. If the feature is not
closed, an imaginary vector between the first and last points is 
assumed.
.BR
A positive area indicates that the feature has been digitised in a
clockwise direction, negative areas indicate counter clockwise
digitising.
.BR
Degenerate features (with two or less points) give an area of 0.0
.NOFILL

Format:  EXAMINE AREA
.LE ;^^^*>EXAMINE ATTRIBUTES\*
.FILL
The cursor must be on a point for this command.
.BR
Displays the ATTRIBUTES of the current point in the feature.
.NOFILL

Format:  EXAMINE ATTRIBUTES
.LE ;^^^*>EXAMINE BEARING\*
.FILL
Displays the bearing (clockwise from grid north) in degrees          
of the current feature. For linear features this is the bearing          
of the current vector.
.BR
This information is not available for circle arcs. 
.NOFILL

Format:  EXAMINE BEARING
.LE ;^^^*>EXAMINE BOX\*
.FILL
Displays the coordinates of the limits of the box surrounding          
the current feature.
.NOFILL

Format:  EXAMINE BOX
.LE ;^^^*>EXAMINE CATEGORY\*
.FILL
Displays category for text.
.NOFILL

Format:  EXAMINE CATEGORY
.LE ;^^^*>EXAMINE CROSSREF\*
.FILL
Displays any cross reference FSN's (not yet implemented).
.NOFILL

Format:  EXAMINE CROSSREF
.LE ;^^^*>EXAMINE DISTANCE\*
.FILL
Displays the distance along the found feature of the current cursor
position, measured from the start.
.NOFILL

Format:  EXAMINE DISTANCE
.LE ;^^^*>EXAMINE FC\*
.FILL
Displays feature code of found feature.
.BL
For subtexts of a composite text, the FC displayed is the FC (or text
component code - TCC) of the current subtext.
.NOFILL

Format:  EXAMINE FC
.LE ;^^^*>EXAMINE FSN\*
.FILL
Displays serial number of found feature.
.NOFILL

Format:  EXAMINE FSN
.LE ;^^^*>EXAMINE GT\*
.FILL
Displays graphical type of found feature.
.NOFILL

Format:  EXAMINE GT
.LE ;^^^*>EXAMINE HEIGHT\*
.FILL
Displays height of found text feature (mm).
.NOFILL

Format:  EXAMINE HEIGHT
.LE ;^^^*>EXAMINE LAYER\*
.FILL
Displays layer of found feature.
.NOFILL

Format:  EXAMINE LAYER
.LE ;^^^*>EXAMINE LENGTH\*
.FILL
Displays the total length of the found feature, if it is of a linear
nature.
.NOFILL

Format:  EXAMINE LENGTH
.LE ;^^^*>EXAMINE LINE\*
.FILL
Displays the length and direction of the segment of a linear feature.
.NOFILL

Format:  EXAMINE LINE
.LE ;^^^*>EXAMINE LOCATION\*
.FILL
Displays text location field for text.
.NOFILL

Format:  EXAMINE MAP
.LE ;^^^*>EXAMINE MAP\*
.FILL
Displays name of IFF file containing found feature.
.NOFILL

Format:  EXAMINE MAP
.LE ;^^^*>EXAMINE PATTERN\*
.FILL
Displays line pattern of found feature.
.NOFILL

Format:  EXAMINE PATTERN
.LE ;^^^*>EXAMINE PC\*
.FILL
Displays process code of found feature.
.NOFILL

Format:  EXAMINE PC
.LE ;^^^*>EXAMINE POINT\*
.FILL
Displays point number(s) for cursor position.
.NOFILL

Format:  EXAMINE POINT
.LE ;^^^*>EXAMINE POSITION\*
.FILL
The cursor must be on a point for this command.
.BR
Displays the X and Y coordinates of the current point in the feature.
.NOFILL

Format:  EXAMINE POSITION
.LE ;^^^*>EXAMINE PSIZE\*
.FILL
Displays text height in points.
.NOFILL

Format:  EXAMINE PSIZE
.LE ;^^^*>EXAMINE SECONDARY\*
.FILL
Displays FRT secondary code for found feature. This is the pattern index
for lines, the symbol number for symbols, the font for texts, and the
fill style for areas. 
.NOFILL

Format:  EXAMINE SECONDARY
.LE ;^^^*>EXAMINE SIZE\*
.FILL
Displays size of found symbol (mm).
.NOFILL

Format:  EXAMINE SIZE
.LE ;^^^*>EXAMINE STYLE\*
.FILL
Displays typeface field for text.
.NOFILL

Format:  EXAMINE STYLE
.LE ;^^^*>EXAMINE SUMMARY\*
.FILL
Displays found feature map, layer, FSN, FC, GT (default).
.NOFILL

Format:  EXAMINE SUMMARY
or       EXAMINE
.LE ;^^^*>EXAMINE WIDTH\*
.FILL
Displays line width of found feature (mm).
.NOFILL

Format:  EXAMINE WIDTH
.END LIST
.HL 3 ^^^*>SHOW\*
.FILL
Displays information requested.
.NOFILL

Format:  SHOW  subcommand

Valid in all states
.LIST '*'
.LE ;^^^*>SHOW ABSOLUTE\*
.FILL
Gives current cursor position in full projection units.
.BL
While SHOW POSITION gives the position in terms of the coordinates in
the IFF files being edited, SHOW ABSOLUTE gives the position taking into
account any origin offset specified in the IFF files 
.BL
If Z has been enabled and the cursor has no Z value, a "?" is displayed.
.NOFILL

Format:  SHOW ABSOLUTE
.LE ;^^^*>SHOW ACD\*
.FILL
If no argument, lists all the ACDs defined in the current FRT;
.BR
with argument,  lists details of the specified ACD.
.BL
The argument can either be a number (the AC type or attribute code) or
the corresponding name.
.NOFILL

Format:  SHOW ACD [argument]
.LE ;^^^*>SHOW AFTER\*
.FILL
Lists the commands that have been set up by the AFTER command.
.NOFILL

Format:  SHOW AFTER
.LE ;^^^*>SHOW ANNOTATION\*
.FILL
Lists the characteristics that will be used for annotating features when
the DRAW LABEL command is given.
.NOFILL

Format:  SHOW ANNOTATION
.LE ;^^^*>SHOW ATTRIBUTE\*
.FILL
Lists the current attribute set, or the requested attribute set.
If no argument is given then the current attribute set is listed.
.NOFILL

Format:  SHOW ATTRIBUTE  [integer]
.LE ;^^^*>SHOW BASES\*
.FILL
Lists the BASES that have been set up for squaring, edgematching, or
orienting. 
.NOFILL

Format:  SHOW BASES
.LE ;^^^*>SHOW COLOURS\*
.FILL
Show the specified colours in the current overlay and display.
.BR
If no range of colour indices is given all the available colours
are listed. The colours may be listed using the RGB (default),
HLS, or HSV scheme.
.BL
This command is only available on versions with suitable hardware
facilities.
.NOFILL

Format:  SHOW COLOURS [range] [scheme]

eg       SHOW COLOURS 1,3,5,7-11
or       SHOW COLOURS 1 HLS
.LE ;^^^*>SHOW COMMANDS\*
.FILL
Lists all the primary commands available in the current state.
.NOFILL

Format:  SHOW COMMANDS
.LE ;^^^*>SHOW CP\*
.FILL
Lists the control points currently set in the specified map. If no
map is specified, the control points of all the maps are displayed.
.BL
The control points may be set using the EDIT CP command.
.BL
Note that the values given are the actual values in the IFF files.
The values given by the system variables $CPXxx and $CPYxx
are the values in the LITES2 coordinate space, and may contain an
appropriate offset if multiple maps have been read in.
.NOFILL

Format:  SHOW CP [integer]
.LE ;^^^*>SHOW DISPLAYS\*
.FILL
Gives details of displays.
If a display number is specified, gives details of that display,
otherwise gives details of all displays.
.NOFILL

Format:  SHOW DISPLAYS  [integer]
.LE ;^^^*>SHOW FCS\*
.FILL
If no argument, lists all the FCs defined in the current FRT;
with argument,  lists details of the specified FC.
.NOFILL

Format:  SHOW FCS [integer]
.LE ;^^^*>SHOW FC_PRIORITIES\*
.FILL
Shows details of priorities used when drawing with ENABLE SORT and
SORT PRIORITY.
.BL
If no argument, lists all the priorities defined in the current FRT,
along with all the feature codes that have been assigned priorities
and the representations to be used.
.BL
With an argument, lists details of the priorities and representations
for the specified FC.
.NOFILL

Format:  SHOW FC_PRIORITIES [integer]
.LE ;^^^*>SHOW FILL\*
.FILL
If an argument is given, gives details of the direction and pattern of
lines used to fill areas; if no argument is given, gives details of all
the patterned areas in the current FRT. 
.BL
Note:  fill numbers must be less than -1.
.NOFILL

Format:  SHOW FILL  [integer]
.LE ;^^^*>SHOW GEOGRAPHICAL\*
.FILL
Shows the latitude and longitude of the current cursor position.
.BL
This command is only valid if at least one  map read in has valid type 2
map descriptor, specifying a valid projection.
.BL
.INDEX LSL$LITES2__GEOG__ROUTINES
Geographical conversions make use of a shared image pointed at by the
logical name LSL$LITES2__GEOG__ROUTINES. This image is supplied by
Laser-Scan. It is called LSL$EXE:LITES2GEOGSHR.EXE. 
.NOFILL

Format:  SHOW GEOGRAPHICAL
.LE ;^^^*>SHOW GEOMETRIES\*
.FILL
Shows information about geometry definitions.
.BL
If a geometry is specified, gives information about that geometry
.BR
If no geometry is specified, gives information about all the defined
geometries. 
.NOFILL

Format:  SHOW GEOMETRIES  [integer]

.LE ;^^^*>SHOW GROUPS\*
.FILL
If no group is specified, a list of the groups available is given. If a
group is specified, a list of feature codes in the group is given.
.NOFILL

Format:  SHOW GROUPS  [text]
.LE ;^^^*>SHOW IMAGES\*
.FILL
Gives details of raster images.
If an image number is specified, gives details of that image,
otherwise gives details of all images.
.NOFILL

Format:  SHOW IMAGES  [integer]
.LE ;^^^*>SHOW INTERPOLATION\*
.FILL
Gives drawing and construction interpolation method.
.NOFILL

Format:  SHOW INTERPOLATION
.LE ;^^^*>SHOW LABELS\*
.FILL
Lists the attributes that will be used for annotating features when
the DRAW LABEL command is given.
.NOFILL

Format:  SHOW LABELS
.LE ;^^^*>SHOW LAYERS\*
.FILL
Lists all layers in use, with maximum FSNs.
.NOFILL

Format:  SHOW LAYERS
.LE ;^^^*>SHOW LIGHTS\*
.FILL
Displays the current settings of each light in each view. (See command
VIEW LIGHT). If the optional light number is not given, all the light
sources are listed for the specified view. If the optional view number
is not given all the light sources in all possible views are listed.
.BL
::: means that this value has not yet been set.
.NOFILL

Format:  SHOW LIGHTS
.LE ;^^^*>SHOW LIMITS\*
.FILL
Displays the coordinates of the limits of the LITES2 working          
area. This is the total range of the maps that were originally          
read in, plus 5% all round. Note that the range may have been          
altered by subsequent edits 
.NOFILL

Format:  SHOW LIMITS
.LE ;^^^*>SHOW MACROS\*
.FILL
If no macro is specified, a list of the macros defined is given. If a
macro is specified, the macro text expansion is given.
.NOFILL

Format:  SHOW MACROS  [text]
.LE ;^^^*>SHOW MAPS\*
.FILL
Lists all maps, and their IFF filenames.
.NOFILL

Format:  SHOW MAPS
.LE ;^^^*>SHOW MATCH\*
.FILL
Lists the match settings that are used when finding features during
TIEing, JOINing, MENDing, and EDGEMATCHing.
.NOFILL

Format:  SHOW MATCH
.LE ;^^^*>SHOW MEMORY\*
.FILL
Intended as a program development aid.
.BR
Shows statistics concerning use of dynamic memory, lock usage and
file usage.
.BR
If an (optional) integer argument in the range 1-3 is given, then 
an increasing amount of information will be given about the
various dynamic memory zones used by LITES2.
.NOFILL

Format:  SHOW MEMORY [level]
.LE ;^^^*>SHOW MENUS\*
.FILL
If no menu is specified, a list of the menus and pucks defined is given.
If a menu is specified, the macro expansion for every menu box (or puck
button) is given.
.BR
If a menu and a box number is given, the macro expansion for that menu
box (or puck button) is given.
.NOFILL

Format:  SHOW MENUS  [text]
.LE ;^^^*>SHOW OPERATIONS\*
.FILL
Lists the attributes (and values) that have been set up by the OPERATION
command.  If no value is listed, then this attribute (or AC in the case 
of xxxx__FEATURE operations) then the attribute or AC will be deleted
when the relevant edit is completed.
.BR
If a number (in brackets) is listed instead of a name, it means that the 
attribute does not exist in the FRT.
.NOFILL

Format:  SHOW OPERATION
.LE ;^^^*>SHOW OPTIONS\*
.FILL
Lists options selected by ENABLE/DISABLE.
.BL
If the optional subcommand FIRST is given, the first half of the table
is displayed; SECOND displays the second half of the table. If no
additional command is given the whole table is listed. 
.NOFILL

Format:  SHOW OPTIONS [subcommand]
.LE ;^^^*>SHOW OVERLAYS\*
.FILL
Gives details of display overlays.
If an overlay number is specified, gives details of that overlay,
otherwise gives details of all overlays.
.NOFILL

Format:  SHOW OVERLAYS  [integer]
.LE ;^^^*>SHOW PATTERNS\*
.FILL
If a pattern is specified, gives details of that pattern;
if no pattern is specified, gives details of all the patterned lines
in the current FRT.
.NOFILL

Format:  SHOW PATTERNS  [integer]
.LE ;^^^*>SHOW PLOT\*
.FILL
Shows details of the hardcopy plot settings.
.NOFILL

Format:  SHOW PLOT
.LE ;^^^*>SHOW POSITION\*
.FILL
Gives current cursor position (default).
.BL
If Z has been enabled and the cursor has no Z value, a "?" is displayed.
.NOFILL

Format:  SHOW POSITION
or       SHOW
.LE ;^^^*>SHOW PRIVILEGE\*
.FILL
Lists the commands, attributes and points that have been set privileged
by the PRIVILEGE command
.NOFILL

Format:  SHOW PRIVILEGE
.LE ;^^^*>SHOW PROJECTION\*
.FILL
Show the projection information about the specified map. If no map
number is given, then information about the LITES2 coordinate space is
given.
.NOFILL

Format:  SHOW PROJECTION [map]
.LE ;^^^*>SHOW REGIONS\*
.FILL
If a region is specified, gives the coordinates of the vertices of that
region.
If no region is specified, gives the coordinates of all the defined
regions. 
.NOFILL

Format:  SHOW REGIONS  [integer]
.LE ;^^^*>SHOW SCALES\*
.FILL
Gives information concerning scales.
.NOFILL

Format:  SHOW SCALES
.LE ;^^^*>SHOW SCROLL\*
.FILL
Gives scroll area of terminal.
.NOFILL

Format:  SHOW SCROLL
.LE ;^^^*>SHOW SECTORS\*
.FILL
Gives number of sectors.
.NOFILL

Format:  SHOW SECTORS
.LE ;^^^*>SHOW SELECTIONS\*
.FILL
Gives details of current selections.
.NOFILL

Format:  SHOW SELECTIONS
.LE ;^^^*>SHOW SETUP\*
.FILL
Gives details of the setup and transformations that will be used to setup any
maps on the table (see SETUP and PTOLERANCE OSSETUP commands), and if there are
any maps already set up on the table, then it also gives details of how these
are set up. 
.NOFILL

Format:  SHOW SETUP
.LE ;^^^*>SHOW SORT\*
.FILL
Gives the current method of sorting for re-draws.
.NOFILL

Format:  SHOW SORT
.LE ;^^^*>SHOW STATE\*
.FILL
Gives current state.
.NOFILL

Format:  SHOW STATE
.LE ;^^^*>SHOW TOLERANCE\*
.FILL
Lists the TOLERANCES that have been set up using the TOLERANCE command.
.BL
If the optional subcommand FIRST is given, the first half of the table
is displayed; SECOND displays the second half of the table. If no
additional command is given the whole table is listed. 
.NOFILL

Format:  SHOW TOLERANCE [subcommand]
.LE ;^^^*>SHOW TRANSFORMATION\*
.FILL
Shows details of the transformation that has been set up.
.NOFILL

Format:  SHOW TRANSFORMATION
.LE ;^^^*>SHOW VARIABLES\*
.FILL
If no variable name is given, then all variable names are listed. If a
particular variable name is given, then its type and value are given.
If just $ is given, then all system variable names are listed.
.NOFILL

Format:  SHOW VARIABLES  [name]

eg       SHOW VARIABLES         lists user variables
         SHOW VARIABLES $       lists system variables
         SHOW VARIABLES NAME    give type and value of variable NAME
.LE ;^^^*>SHOW VERSION\*
.FILL
Gives version and date of linking of program, plus the licensed optional
facilities.
.NOFILL

Format:  SHOW VERSION
.LE ;^^^*>SHOW VIEWS\*
.FILL
Displays the current settings for each view. If the optional view
number is not given, then the settings for all views are given.
.BL
::: means that this value has not yet been set; numbers in brackets are
values that are not yet set, but default to the value of some other
item. 
.NOFILL

Format:  SHOW VIEWS
.LE ;^^^*>SHOW WARP\*
.FILL
Shows details of transformation (warping) of raster images.
.NOFILL

Format:  SHOW WARP
.LE ;^^^*>SHOW WINDOW\*
.FILL
Displays the coordinates of the limits of the current window
.NOFILL

Format:  SHOW WINDOW
.LE ;^^^*>SHOW ZOOM\*
.FILL
Gives the number of times that the current picture on the screen is
magnified from the full map on the screen. 
.NOFILL

Format:  SHOW ZOOM
.END LIST
.HL 3 ^^^*>TIME\*
.FILL
Display and manipulation of timing information.
For those subcommands which take an argument, it is used to set
or clear that timing field.
.NOFILL

Format:  TIME  subcommand

eg       TIME ALL
or       TIME FIND 0

Valid in all states
.LIST '*'
.LE ;^^^*>TIME ALL\*
.FILL
All timing statistics are displayed or reset.
.NOFILL

Format:  TIME ALL
.LE ;^^^*>TIME DRAW\*
.FILL
Draw time displayed or reset.
.NOFILL

Format:  TIME DRAW  [integer]
.LE ;^^^*>TIME FIND\*
.FILL
Search time displayed or reset.
.NOFILL

Format:  TIME FIND  [integer]
.LE ;^^^*>TIME NOW\*
.FILL
Current time and date are displayed (default).
.NOFILL

Format:  TIME NOW
or       TIME
.LE ;^^^*>TIME READ\*
.FILL
Read-in time displayed or reset.
.NOFILL

Format:  TIME READ [integer]
.LE ;^^^*>TIME STATES\*
.FILL
Time in each state displayed.
.NOFILL

Format:  TIME STATES
.LE ;^^^*>TIME SUMMARY\*
.FILL
Display elapsed time, CPU time, and IO operations.
.NOFILL

Format:  TIME SUMMARY
.END LIST
.SUBTITLE Windowing Commands
.PAGE
.HL 2 ^^^*Windowing Commands\*
.INDEX Windowing Commands
.HL 3 ^^^*>DRAW\*
.FILL
Draws on the LITES2 screen(s).
.BL
DRAW MAP and DRAW SCREEN clear the display and draw the whole or
part of the IFF file(s) being edited. The features in the IFF file
are drawn with the characteristics specified for their feature code
in the FRT file being used. The action of DRAW may be modified by
SUPPRESS, and ENABLE VECTOR (qv).
.BL
Other DRAW commands allow additional information to be added to the
picture on the screen. This data is drawn with characteristics specified
by the ANNOTATION command.
.BL
By default, LITES2 uses drawing buffers which can hold 8192 points, and
this limits the size of areas that can be filled. Areas with more than
this number of points will only be drawn in outline (perhaps with some
invisible lines being visible). The size of the drawing buffer can be 
altered by setting the logical name >LSL$FILL__POINTSMAX to the required
size before LITES2 is started up. This logical name also controls the
size of images that can be drawn; the error message
.NOFILL

  "Buffer too small to draw _<type_> - zoom in or increase LSL$FILL__POINTSMAX"
 
.FILL
indicates that the buffers are too small, and should be increased.
.BL
When drawing fill areas there is a limit to the number of times a scan
line can be cut. By default this is 100. If the message 
.NOFILL

   "FILL__SIDE - Too many intersections found - ignored"

.FILL
occurs, then this number is too small. It can be set by defining the
logical name >LSL$FILL__CUTSMAX before starting LITES2.
.BL
Note that memory has to be allocated in proportion to these numbers, so
unnecessarily large values should be avoided.
.NOFILL

Format:  DRAW  subcommand

Valid in states  READY LINE CIRCLE TEXT SYMBOL SETUP
.LIST '*'
.LE ;^^^*>DRAW ABSOLUTE\*
.FILL
Draws the symbol (specified by the ANNOTATION MARK command) at the
current cursor position and a string of text containing the absolute
position (ie full projection coordinates) of the cursor.
.BL
The position of the text string is based on any ANNOTATION OFFSET commands
that have been given, in conjunction with the symbol's bounding box.
If the offset in X is positive, then the position of the text is this
amount to the right of the bounding box, and if it is negative then the
position is to the left. Similarly a positive or negative Y offset positions
the text above or below the bounding box. When an offset of 0.0 is specified
no allowance for the bounding box is made.
.NOFILL

Format:  DRAW ABSOLUTE
.LE ;^^^*>DRAW AREAREGIONS\*
.FILL
If a region is specified, it is displayed as a filled area.
.BR
If no region is specified, then all the defined regions are displayed.
.B
This command uses the colour set with the ANNOTATION COLOUR command and
the fill style set with ANNOTATION FILL command.
.NOFILL

Format:  DRAW AREAREGIONS  [integer]
.LE ;^^^*>DRAW DTI\*
.FILL
Draws the specified DTI file in the current display.
.BR
The file is zoomed or subsampled as required to fill as much of the display
as possible.
.NOFILL

Format:  DRAW DTI  filename
.LE ;^^^*>DRAW FEATURE\*
.FILL
Draws the current found object with the current annotation
characteristics.
.NOFILL

Format:  DRAW FEATURE
.LE ;^^^*>DRAW GEOGRAPHICAL\*
.FILL
Draws the symbol (specified by the ANNOTATION MARK command) at the
current cursor position and a string of text containing the geographical
position (ie latitude and longitude) of the cursor.  This command is only
available if at least one of the IFF files has a fully specified 
version 2 map descriptor. See the IMP utility ITRANS for more
information.

.BL
The position of the text string is based on any ANNOTATION OFFSET commands
that have been given, in conjunction with the symbol's bounding box.
If the offset in X is positive, then the position of the text is this
amount to the right of the bounding box, and if it is negative then the
position is to the left. Similarly a positive or negative Y offset positions
the text above or below the bounding box. When an offset of 0.0 is specified
no allowance for the bounding box is made.
.NOFILL

Format:  DRAW GEOGRAPHICAL

.LE ;^^^*>DRAW GEOMETRY\*
.FILL
Draws geometries according to their type.
.BL
Point type geometries are displayed with a symbol at each of their
locating points (the symbol being set by the ANNOTATION MARK command).
.BR
Line type geometries are displayed as lines.
.BR
Area type geometries are displayed as fill areas.
.BL
This command uses the drawing attributes set with the ANNOTATION command.
.BL
If a geometry is specified only that geometry is displayed.
.BR
If no geometry is specified, all the defined geometries are displayed.
.NOFILL

Format:  DRAW GEOMETRY  [integer]
      or DRAW GEOMETRIES

.LE ;^^^*>DRAW GRID\*
.FILL
Plots sector grid (program development aid).
.B
This command uses the colour set for drawing labels.  See the ANNOTATION
COLOUR command.
.NOFILL

Format:  DRAW GRID
.LE ;^^^*>DRAW HARDCOPY\*
.FILL
Draws crosses at corner points of maps, then draws the screen on hard
copy device.
.NOFILL

Format:  DRAW HARDCOPY
.LE ;^^^*>DRAW IFF\*
.FILL
Draws the specified IFF file in the current display.
.NOFILL

Format:  DRAW IFF  filename
.LE;^^^*>DRAW IMAGE\*
.FILL
Draws the raster image currently selected by the IMAGE NUMBER command
into the current display (which must not be the primary or
secondary display). An ANNOTATION OVERLAY must be specified.
An area of the image centred on the cursor is drawn. The optional
factor (default 1) specifies the pixel zoom factor e.g. DRAW IMAGE n
means draw the image with n screen pixels for each image pixel.
Numbers less than 1 mean to subsample the image, e.g. DRAW IMAGE 0.25
(or DRAW IMAGE 1/4) means that each screen pixel represents a 4 by 4
block of image pixels.
.NOFILL

Format:  DRAW IMAGE [factor]
.LE ;^^^*>DRAW LABEL\*
.FILL
Annotates all the features on the screen.
.BR
If the command LABEL FEATURE has been given (default) then the
whole feature is labelled; if the command LABEL POINT has been
given, then the individual points within the feature are labelled 
.BL
The attributes to be used for labelling can be set with the LABEL
command, and their appearance can be set with the ANNOTATION command. 
.NOFILL

Format:  DRAW LABEL
.LE ;^^^*>DRAW LEGEND\*
.FILL
Draws a legend to indicate the meaning of the colours in the current
image. 
.BL
The size and shape of the legend boxes and the position of the legend is
controlled by the ANNOTATION LEGEND command, and whether the background
to the text is blanked out by the ENABLE BLANK command.
.BR
The legend boxes are drawn in the same overlay as the image; the text
is drawn in the annotation overlay (in the colour set by the ANNOTATION
COLOUR command).
.BL
If the image is classified then one box is generated for each step/band
in the range of the image. This may mean that the legend will not fit
on the screen, and a message to this effect is output.
.BR
If the image is not classified, then a legend is always drawn, but if all
the colours cannot be shown then a selection, evenly distributed through
the colour range, is displayed.
.NOFILL

Format:  DRAW LEGEND
.LE ;^^^*>DRAW LSI\*
.FILL
Draws the specified LSI file in the current display.
.BR
The file is zoomed or reduced views are used as required to fill as much of
the display as possible.
.NOFILL

Format:  DRAW LSI  filename
.LE ;^^^*>DRAW LSR\*
.FILL
Draws the specified LSR file in the current display.
.BR
The file is zoomed as required to fill as much of the display as possible.
.NOFILL

Format:  DRAW LSR  filename
.LE ;^^^*>DRAW MAP\*
.FILL
Draws the whole map on the screen.
.NOFILL

Format:  DRAW MAP
or       DRAW
.LE ;^^^*>DRAW MARK\*
.FILL
Marks all the points in the features displayed on the screen.
.BL
The points to be marked can be selected with the LABEL ATTRIBUTE 
command; the symbol to be used to mark the points is selected with
the ANNOTATION MARK command.
.NOFILL

Format:  DRAW MARK
.LE ;^^^*>DRAW MOVE\*
.FILL
Moves the drawing cursor in the annotation display to the specified
point, without drawing a line.
.BL
If the current annotation display is the primary or secondary
workstation, then the main LITES2 cursor is moved.
By default the position is specified in IFF units (unless a UNITS command
has been given).
.NOFILL

Format:  DRAW MOVE x y
.LE ;^^^*>DRAW NUMBERS\*
.FILL
Labels all the vertices in the features displayed on the screen with
their point numbers.
.BL
The vertices to be labelled can be selected with the LABEL ATTRIBUTE 
command; the position of the labels are offset by the amounts specified
by any ANNOTATION OFFSET command that has been given.
.NOFILL

Format:  DRAW NUMBERS
.LE ;^^^*>DRAW POSITION\*
.FILL
Draws the symbol (specified by the ANNOTATION MARK command) at the
current cursor position and a string of text containing the position of
the cursor in IFF units. 
.BL
The position of the text string is based on any ANNOTATION OFFSET commands
that have been given, in conjunction with the symbol's bounding box.
If the offset in X is positive, then the position of the text is this
amount to the right of the bounding box, and if it is negative then the
position is to the left. Similarly a positive or negative Y offset positions
the text above or below the bounding box. When an offset of 0.0 is specified
no allowance for the bounding box is made.
.NOFILL

Format:  DRAW POSITION
.LE ;^^^*>DRAW REGIONS\*
.FILL
If a region is specified, displays the boundary of that region.
.BR
If no region is specified, displays the boundaries of all the defined
regions. 
.B
This command uses the colour set for drawing labels.  See the ANNOTATION
COLOUR command.
.NOFILL

Format:  DRAW REGIONS  [integer]
.LE ;^^^*>DRAW SCREEN\*
.FILL
Redraws the current window on the screen (default).
.NOFILL

Format:  DRAW SCREEN
.LE ;^^^*>DRAW SHEET\*
.FILL
Draws the symbol (specified by the ANNOTATION MARK command) at the
current cursor position and a string of text containing the position of
the cursor in sheet mm. 
.BL
The position of the text string is based on any ANNOTATION OFFSET commands
that have been given, in conjunction with the symbol's bounding box.
If the offset in X is positive, then the position of the text is this
amount to the right of the bounding box, and if it is negative then the
position is to the left. Similarly a positive or negative Y offset positions
the text above or below the bounding box. When an offset of 0.0 is specified
no allowance for the bounding box is made.
.NOFILL

Format:  DRAW SHEET
.LE ;^^^*>DRAW TEXT\*
.FILL
Draws the symbol (specified by the ANNOTATION MARK command) at the
current cursor position and the string of text specified in the argument.
If the text contains leading spaces, then it must be enclosed in double
quotation marks.
.BL
Note that the argument may contain a substituted variable, eg
DRAW TEXT '$IMAGEVALUE
.BL
The position of the text string is based on any ANNOTATION OFFSET commands
that have been given, in conjunction with the symbol's bounding box.
If the offset in X is positive, then the position of the text is this
amount to the right of the bounding box, and if it is negative then the
position is to the left. Similarly a positive or negative Y offset positions
the text above or below the bounding box. When an offset of 0.0 is specified
no allowance for the bounding box is made.
.NOFILL

Format:  DRAW TEXT text
.LE ;^^^*>DRAW TITLE\*
.FILL
Draws the text specified in the argument at the current cursor position.
If the text contains leading spaces, then it must be enclosed in double
quotation marks.
.BL
Note that the argument may contain a substituted variable, eg
DRAW TITLE '$IMAGEVALUE
.BL
The position of the text is based on the cursor position; it is not
affected by any ANNOTATION OFFSET command
.NOFILL

Format:  DRAW TITLE text
.LE ;^^^*>DRAW VECTOR\*
.FILL
Draws a vector from the current cursor position to the specified
position and moves the cursor to that position.
.BL
By default the position is specified in IFF units (unless a UNITS command
has been given).
.NOFILL

Format:  DRAW VECTOR x y
.END LIST
.HL 3 ^^^*>WINDOW\*
.FILL
Defines portion of map to be displayed on graphics screen for
enlargement, etc. Use the DRAW command (qv) to redraw either the whole
map or the current window.  The action of WINDOW may be modified by
SUPPRESS, and ENABLE VECTOR (qv).
.BR
The two subcommands only differ in the way the screen picture and cursor
position are treated during the operation.
.NOFILL

Format:  WINDOW  subcommand

Valid in states  READY LINE CIRCLE TEXT SYMBOL WINDOW SETUP
.LIST '*'
.LE ;^^^*>WINDOW MAP\*
.FILL
The current cursor position is taken as the lower left corner of the
new window. This can be redefined by moving the cursor and using WINDOW
or START.
.BR
Then move the cursor to the top right corner of the new window and
give command END.
.BR
Differs from WINDOW SCREEN in that the screen cursor positions while the
window is being defined are as if the whole map were displayed on the
screen. This enables screen windowing onto a region not currently on
the screen. The present window is drawn on the screen in the ANNOTATION
COLOUR. It is possible to position the cursor on the screen and then
ABANDON without performing the WINDOW. The cursor will still be in its
new position, and one could, for example, ZOOM.
.NOFILL

Format:  WINDOW MAP
or       WINDOW
.LE ;^^^*>WINDOW SCREEN\*
.FILL
The current cursor position is taken as the lower left corner of the
new window. This can be redefined by moving the cursor and using WINDOW
or START.
.BR
Then move the cursor to the top right corner of the new window and
give command END.
.NOFILL

Format:  WINDOW SCREEN
.END LIST
.HL 3 ^^^*>PICTURE\*
.FILL
Allows the IFF data to be transformed as it is displayed on the screen.
.BL
This command is only available on versions of LITES2 running on
suitable hardware. This includes LITES2 running under VWS and MOTIF
windowing systems.
.NOFILL

Format:  PICTURE  subcommand

Valid in states  READY
.LIST '*'
.LE ;^^^*>PICTURE ROTATE\*
.FILL
Setup an orthogonal transformation that rotates the IFF data by the
specified angle (in degrees) and introduces a scale change to allow the
whole LITES2 coordinate space to be shown on the screen.
.BL
The command PICTURE ROTATE 0 will cancel any existing setup
and return to default behaviour, as will PICTURE SETUP followed by ABANDON.
.NOFILL

Format:  PICTURE ROTATE angle
.LE ;^^^*>PICTURE SETUP\*
.FILL
Setup an extended four point transformation to be used when IFF
data is being displayed.
.BL
Causes LITES2 to enter SETUP state, and to prompt for the user to
digitise the 4 corner points of the first map with reference to points
on the screen using START commands. (These will often be points in a
raster image). WINDOW, DRAW, and ZOOM commands may be used to display
the desired area on the screen. Once the setup is completed, LITES2 will
return to READY state and subsequent drawing will distort the vector
picture so as to match up the corner points with the selected points.
ABANDON may be used at any time in SETUP state to abort the setup. 
.BL
This command has the same effect as IMAGE SETUP.
.BL
Invoking PICTURE SETUP followed by ABANDON will cancel any existing setup
and return to default behaviour.
.NOFILL

Format:  PICTURE SETUP
.END LIST
.HL 3 ^^^*>SUPPRESS\*
.FILL
Modifies the action of DRAW, WINDOW, ZOOM, OVERLAY ERASE, and DELETE.
SUPPRESS may be used to prevent the updating
of a display during these operations. Displays may be suppressed during
initial draw to speed things up. The action of SUPPRESS persists only until
the next of these operations - the command must then be repeated if required.
.NOFILL

Format:  SUPPRESS  subcommand

Valid in states  READY LINE CIRCLE TEXT SYMBOL WINDOW SETUP PAINT
.LIST '*'
.LE ;^^^*>SUPPRESS ALL\*
.FILL
All displays are suppressed.
.NOFILL

Format:  SUPPRESS ALL
.LE ;^^^*>SUPPRESS CANCEL\*
.FILL
No displays are suppressed (cancels the effect of previous SUPPRESS
commands).
.NOFILL

Format:  SUPPRESS CANCEL
.LE ;^^^*>SUPPRESS CLEAR\*
.FILL
Stops the screen being cleared before the next DRAW MAP, DRAW SCREEN,
WINDOW or ZOOM command draws vectors on the screen.
.BL
This command has no effect if segments are being used.
.NOFILL

Format:  SUPPRESS CLEAR
.LE ;^^^*>SUPPRESS PRIMARY\*
.FILL
Primary display is suppressed (default).
.NOFILL

Format:  SUPPRESS PRIMARY
or       SUPPRESS
.LE ;^^^*>SUPPRESS SECONDARY\*
.FILL
Secondary display is suppressed.
.NOFILL

Format:  SUPPRESS SECONDARY
.LE ;^^^*>SUPPRESS VECTOR\*
.FILL
Display of vector data is suppressed.
.BL
This command only has any effect when raster images are being displayed.
.NOFILL

Format:  SUPPRESS VECTOR
.END LIST
.HL 3 ^^^*>ZOOM\*
.FILL
Redraws the area around the cursor enlarged by a given zoom factor
in the range 0.01 to 100.0. The default factor is 5.0.
.BL
If the subcommand IMAGE is given, then the zoom factor is interpreted
instead as the pixel zoom of raster images, e.g. ZOOM n IMAGE means
draw the image with n screen pixels for each image pixel. Numbers less
than 1 mean to subsample the image, e.g. ZOOM 0.25 IMAGE (or
ZOOM 1/4 IMAGE) means that each screen pixel represents a 4 by 4 block
of image pixels.
.BL
The action of ZOOM may be modified by SUPPRESS, and ENABLE VECTOR (qv)
.NOFILL

Format:  ZOOM  [real] [IMAGE]

eg       ZOOM
or       ZOOM 20
or       ZOOM 0.3
or       ZOOM 1 IMAGE
or       ZOOM 1/4 IMAGE

Valid in states  READY LINE CIRCLE TEXT SYMBOL SETUP PAINT
.HL 3 ^^^*>LABEL\*
.FILL
Sets the attributes to be used when annotating features or points with
the DRAW LABEL command. Each LABEL command will set an additional
attribute, and all these attributes (if present) will be used to
annotate each feature that appears on the screen. 
.NOFILL
.BL
eg       LABEL FSN
         LABEL FC
         LABEL AC Height
.BL
.FILL
will cause labels of the form  "fsn  fc  [height]"  to be attached to
each feature on the screen. The height will only occur if the
feature has a height AC (type 3) associated with it. 
.BL
The LABEL NONE command should be used to cancel all labelling attributes.
.BL
The LABEL FEATURE command (default) allows features to be labelled by
the next DRAW LABEL command; the LABEL POINT command allows the
points within features to be labelled by the next DRAW LABEL command. 
.BL
Where the AC or attribute to be labelled is explicitly specified, it can
be referred to by its name or by the corresponding integer. 
.BR
See the section on LITES2 command language for details of the format
for this type of command argument.
.NOFILL

Format:  LABEL  subcommand

Valid in all states
.LIST '*'
.LE ;^^^*>LABEL AC\*
.FILL
Label features with the value of the specified AC. 
.BR
The format of the value displayed depends on the data type of the AC.
.BL
See the section on LITES2 command language for details these data types.
.NOFILL

Format:  LABEL AC type
.LE ;^^^*>LABEL ACINT\*
.FILL
Label features with the value (treated as an integer) of the specified
AC. 
.BR
This command is now redundant. LABEL AC should be used instead.
.NOFILL

Format:  LABEL ACINT integer
.LE ;^^^*>LABEL ACREAL\*
.FILL
Label features with the value (treated as a real value) of the specified
AC. 
.BR
This command is now redundant. LABEL AC should be used instead.
.NOFILL

Format:  LABEL ACREAL integer
.LE ;^^^*>LABEL ACTEXT\*
.FILL
Label features with the text of the specified AC.
.NOFILL

Format:  LABEL ACTEXT integer
.LE ;^^^*>LABEL ATTRIBUTE\*
.FILL
Label points with the value of the specified point attribute. This
command is also used to select which points to mark using the DRAW MARK
command. If a value is given, then only points with that particular
attribute value will be marked, and only values matching the given value
will be included in labels. 
.BR
The format of the value displayed depends on the data type of the
attribute.
.BL
See the section on LITES2 command language for details these data types.
.NOFILL

Format:  LABEL ATTRIBUTE type [value]
.LE ;^^^*>LABEL CONTOUR\*
.FILL
Label features with the (integer) value of the contour AC. This is the
same as LABEL AC Contour.
.NOFILL

Format:  LABEL CONTOUR
.LE ;^^^*>LABEL FEATURE\*
.FILL
The next DRAW LABEL command will label features with the required
attributes.
.BL
This is the opposite of the LABEL POINT command
.NOFILL

Format:  LABEL FEATURE
.LE ;^^^*>LABEL FC\*
.FILL
Label features with their feature code.
.NOFILL

Format:  LABEL FC
.LE ;^^^*>LABEL FSN\*
.FILL
Label features with their feature serial number.
.NOFILL

Format:  LABEL FSN
.LE ;^^^*>LABEL HEIGHT\*
.FILL
Label features with the (real) value of the HEIGHT AC. This is the same
as LABEL AC Height. 
.NOFILL

Format:  LABEL HEIGHT
.LE ;^^^*>LABEL LH\*
.FILL
Label features with the text of the Left Hand Boundary AC.  This is the
same as the LABEL ACTEXT LH__boundary command. 
.NOFILL

Format:  LABEL LH
.LE ;^^^*>LABEL NONE\*
.FILL
Cancel all current labelling attributes.
.NOFILL

Format:  LABEL NONE
.LE ;^^^*>LABEL POINT\*
.FILL
The next DRAW LABEL command will label points with the required
attributes.
.BL
This is the opposite of the LABEL FEATURE command
.NOFILL

Format:  LABEL POINT
.LE ;^^^*>LABEL RH\*
.FILL
Label features with the text of the Right Hand Boundary AC.  This is the
same as the LABEL ACTEXT RH__boundary command. 
.NOFILL

Format:  LABEL RH
.END LIST
.HL 3 ^^^*>ANNOTATION\*
.FILL
Sets the characteristics of graphical information, other than the map
data drawn by LITES2. This includes annotation produced by the various
DRAW commands.
.BL
When labelling features the following rules apply:
.LIST 'o'
.LE;For texts and symbols labels are drawn above and to the right of   
the bounding box around the feature. For composite texts, the first   
text component is so labelled. 
.LE;For linear features the label is drawn parallel to the feature each
time it enters (or leaves) the current window. There are two
possibilities in this case: 
.LIST
.DISPLAY ELEMENTS LL,")"
.LE;By default, the label will be drawn at the end of (the part of)
the feature nearest the left side or bottom of the window. This
makes labels easily read, and this possibility is set with the
ANNOTATE LEFT command.
.LE;If the direction of the feature is important (eg for labelling
with LH or RH codes) then the ANNOTATE START command should be
used, when the feature will be labelled each time it enters the
window.
.END LIST
.END LIST
.NOFILL

Format:  ANNOTATION  subcommand

Valid in all states
.LIST '*'
.LE ;^^^*>ANNOTATION ANGLE\*
.FILL
The labels (and symbol where appropriate) produced by the DRAW ABSOLUTE,
DRAW GEOGRAPHICAL, DRAW POSITION, DRAW SHEET, DRAW TITLE and DRAW TEXT
commands will be drawn at the given angle (specified in degrees).
.BL
The offset of the label relative to the locating point is also rotated
so that the label maintains its position relative to the symbol.
.NOFILL

Format:  ANNOTATION ANGLE  real
.LE ;^^^*>ANNOTATION BEARING\*
.FILL
The labels (and symbol where appropriate) produced by the DRAW ABSOLUTE,
DRAW GEOGRAPHICAL, DRAW POSITION, DRAW SHEET, DRAW TITLE and DRAW TEXT
commands will be drawn at the given bearing (specified in degrees).
.BL
The offset of the label relative to the locating point is also rotated
so that the label maintains its position relative to the symbol.
.NOFILL

Format:  ANNOTATION BEARING  real
.LE ;^^^*>ANNOTATION COLOUR\*
.FILL
Use the specified colour index for annotations.
.BL
If -1 is specified, labels on features will be drawn in the same colour
as the feature. In this case other annotations will be drawn in colour 1.
.BL
Note that by setting colour index 0 (background colour) with this
command, existing labels may be deleted without redrawing the screen.
.BR
(This is only available on raster displays)
.NOFILL

Format:  ANNOTATION COLOUR integer
.LE ;^^^*>ANNOTATION DISPLAY\*
.FILL
Draw annotations into the specified display. The default display (0)
means draw on the primary and/or secondary workstation. This command
sets the ANNOTATION OVERLAY to 0, so the ANNOTATION OVERLAY command
must be given again if a particular overlay is to be used.
.NOFILL

Format:  ANNOTATION DISPLAY integer
.LE ;^^^*>ANNOTATION FILL\*
.FILL
Use the specified fill style value (as in FRT) to draw area annotations. 
.BL
This value is an integer in the range -1 : 6 or in the range 101 - 106
.NOFILL

        -1 means draw solid areas
         0 means draw hollow (ie draw boundary)
         1 horizontal hatching
         2 vertical   hatching
         3 +45 degree hatching
         4 -45 degree hatching
         5 horizontal and vertical cross hatching
         6 +45 and -45 degree cross hatching

.FILL
Values 101 - 106 are the same as 1 - 6 with the addition of the boundary.
.NOFILL

Format:  ANNOTATION FILL integer
.LE ;^^^*>ANNOTATION FONT\*
.FILL
Annotate features using the specified font.
.NOFILL

Format:  ANNOTATION FONT integer
.LE ;^^^*>ANNOTATION HARDWARE\*
.FILL
Use the specified hardware value (as in FRT) for annotations.
.BR
Provides the same facilities for annotations as setting the hardware
field in the FRT does for features. The effect varies depending on
the display device, but may typically be used to specify line cap
and join styles. The default is 0.
.NOFILL

Format:  ANNOTATION HARDWARE  integer
.LE ;^^^*>ANNOTATION HWTEXT\*
.FILL
Attempt to use hardware facilities to draw labelling text (rather than
using the character shapes from the TRI file).
.BL
Hardware text is enabled if the integer is missing or 1, disabled if 0 and
by default.
.NOFILL

Format:  ANNOTATION HWTEXT [integer]
.LE ;^^^*>ANNOTATION JOURNAL\*
.FILL
Allows commands which annotate the display to be stored in a macro.
The commands journalled include most ANNOTATION, LABEL, and DRAW
commands. The macro may be replayed later to draw the same set
of annotations.
.NOFILL

Format:  ANNOTATION JOURNAL  subcommand
.LIST 'o'
.LE ;^^^*>ANNOTATION JOURNAL CLOSE\*
.FILL
Closes a previously opened annotation journal macro.
Annotation commands are no longer journalled.
The macro still remains defined, and may be replayed as required.
.NOFILL

Format:  ANNOTATION JOURNAL CLOSE
.LE ;^^^*>ANNOTATION JOURNAL OFF\*
.FILL
Temporarily turns off the journalling of annotation commands.
.NOFILL

Format:  ANNOTATION JOURNAL OFF
.LE ;^^^*>ANNOTATION JOURNAL ON\*
.FILL
Turns back on the journalling of annotation commands
after a previous ANNOTATION JOURNAL OFF command.
.NOFILL

Format:  ANNOTATION JOURNAL ON
.LE ;^^^*>ANNOTATION JOURNAL OPEN\*
.FILL
Subsequent annotating commands are journalled to a named macro.
A macro with the given name is created, and subsequent annotating
commands (most of ANNOTATION, LABEL, and DRAW subcommands) are
automatically appended to it, unless a plot is currently on.
The macro is intended to be replayed by giving its name in the
normal way. The macro may be cancelled (using CANCEL MACRO) when
no longer required.
.NOFILL

Format:  ANNOTATION JOURNAL OPEN macroname
.END LIST
^*>ANNOTATION LEFT\*
.FILL
Annotate linear features as near to the bottom left corner of the screen
as possible.
.BR
(This is the opposite of ANNOTATION START)
.NOFILL

Format:  ANNOTATION LEFT
.LE ;^^^*>ANNOTATION LEGEND\*
.FILL
Defines the size, shape and position of the legend
drawn by the DRAW LEGEND command.
.BR
The first two arguments define the size of the boxes in the legend. They
are specified as a proportion of the screen size.
.BR
The second two arguments, if present, define the position that the lower
left corner of the legend should take up. These are also specified as
a proportion of the screen. If the legend will not fit on the screen
with its lower left corner at this position, then the legend is moved
so that it lies entirely on the screen.
.BR
Note that it may be useful to specify these real arguments as a vulgar
fraction. For example if the DRAW LEGEND command gives an error because
"n" boxes will not fit on the screen, then the command 
.BL
#########ANNOTATION LEGEND 0.05 1/n
.BL
will ensure that the legend will be drawn.
.NO FILL

Format:  ANNOTATION LEGEND xsize ysize [xprop yprop]
.LE ;^^^*>ANNOTATION LOCATION\*
.FILL
The labels produced by the DRAW ABSOLUTE, DRAW GEOGRAPHICAL,
DRAW POSITION, DRAW SHEET, DRAW TITLE and DRAW TEXT commands will be
drawn with the specified position within the text over the locating
point for the label.
.BL
As for all texts, the location is an integer in the range 0 - 8.
.NOFILL

Format:  ANNOTATION LOCATION integer
.LE ;^^^*>ANNOTATION MARK\*
.FILL
Specify the symbol to be used to mark the points of a feature,
with the DRAW MARK command. If a positive number is given, this
is taken to be a symbol feature code from the FRT file, while a
negative number (converted to positive) refers directly to a
symbol number in the SRI file.
Note that in either case, only the symbol number is used;
the colour and size of the mark is controlled by the ANNOTATION
SIZE and ANNOTATION COLOUR commands.
.NOFILL

Format:  ANNOTATION MARK fc
or       ANNOTATION MARK -sc
.LE ;^^^*>ANNOTATION OFFSET\*
.FILL
Offset the annotation from the locating point by the specified distances
(in mm on the screen) in X and Y.  These values of X and Y are in the
direction of the feature. 
.BR
The default values are 0.0 in X and 1.0 in Y.
.NOFILL

Format:  ANNOTATION OFFSET  real real
.LE ;^^^*>ANNOTATION OVERLAY\*
.FILL
Use the specified display overlay for annotations. This overlay is also
used for the DRAW AREAREGION, DRAW REGION, DRAW GRID, and WINDOW MAP
commands. The specified overlay must have been created by a WORKSTATION
OVERLAY command. If 0 is given, then annotations will revert to their
default behaviour of being written to all planes of the display. This
command may be used for example to ensure that annotations are written
into the same display overlay as vector data and do not overwrite parts
of an image backdrop. Alternatively, annotations could be written into
an overlay reserved for the purpose which could then be REVEALed or
CONCEALed as required. 
.NOFILL

Format:  ANNOTATION OVERLAY integer
.LE ;^^^*>ANNOTATION SCREEN\*
.FILL
Draw the annotation at the edge of the screen.
.BR
(This is the opposite of ANNOTATION WINDOW)
.NOFILL

Format:  ANNOTATION SCREEN
.LE ;^^^*>ANNOTATION SIZE\*
.FILL
Draw the annotation at the specified size (in screen mm).
.NOFILL

Format:  ANNOTATION SIZE real
.LE ;^^^*>ANNOTATION START\*
.FILL
Annotate linear features where they enter the window.
.BR
(This is the opposite of ANNOTATION LEFT)
.NOFILL

Format:  ANNOTATION START
.TP 12
.LE ;^^^*>ANNOTATION WIDTH\*
.FILL
Draw line work in the annotation at the specified thickness (in screen mm).
.BR
In text and symbol components this value will be overridden if there
is a non-zero entry in the WIDTH field of the SCT entry for that component
in the current FRT.
.NOFILL

Format:  ANNOTATION WIDTH real
.TP 12
.LE ;^^^*>ANNOTATION WINDOW\*
.FILL
Draw the annotation at the edges of a window defined by the position of
the cursor.  By default, the size of this window is 0.5 times the size
of the screen. The optional argument to this command can be used to
alter the size of this window. It is the fraction of the full screen
that should be used.
.BR
(This is the opposite of ANNOTATION SCREEN)
.NOFILL

Format:  ANNOTATION WINDOW [real]
.END LIST
.SUBTITLE Exiting Commands
.PAGE
.HL 2 ^^^*Exiting Commands\*
.INDEX Exiting Commands
.HL 3 ^^^*>DUMP\*
.FILL
Finishes and saves workspace IFF file(s).
.BR
Renames .WRK workspace file as .DMP. if no filename given.
Useful if just stopping for lunch and intend to resume LITES2 after:
the session may be resumed with e.g. IFF LSL$LITES2WORK:name.DMP
.BR
If DISABLE EXIT (qv) was used, LITES2 will return to INITIAL state in
preparation for reading in different map(s).
.NOFILL

Format:  DUMP  [filename]  (full command required)

Valid in state  READY
.HL 3 ^^^*>EXIT\*
.FILL
Finishes editor session and creates new version of IFF file(s).
.BR
If SELECT OUTPUT has been given, then only the selected features
are output.
.BR
A filename for the output may be specified. If a filename is specified
and more than one map has been selected for output, the selected files
will be merged together to form one file. This merged file will have
a valid type 2 map descriptor, having the scale of the first map that
it contains. Its map header will be blank.
.BL
If DISABLE EXIT (qv) was used, LITES2 will return to INITIAL state in
preparation for reading in different map(s).
.NOFILL

Format:  EXIT  [filename]  (full command required)

Valid in state  READY
.HL 3 ^^^*>QUIT\*
.FILL
Finishes and ignores all editing, or discards a particular map.
Deletes the .WRK workspace file.
.P 0
If used without an integer argument, then all maps are discarded.
If DISABLE EXIT (qv) was used, LITES2 will return to INITIAL state in
preparation for reading in different map(s). If already in INITIAL state,
the session is always ended.
.P 0
Used with the optional integer (a map number), only that map is discarded,
and LITES2 remains in the same state. To save the edits made to a map
before discarding it, use the WRITE command, possibly in combination with
SELECT MAP and SELECT OUTPUT if more than one map is in use.
The map being unloaded will
still remain on the screen until a redraw operation is performed (except on
a display with segment store and ENABLE SEGMENTS, in which
case the map will be erased from the screen).
.P 0
If the map unloaded is not the one with the highest map number, then a "hole"
will remain in the list of map numbers in use. The system variable $MAPTOTAL
still holds with highest map number in use, which may not be the same as the
total number of maps in use. When a new map is read, it will use the lowest
available map number. The system variable $MAPSTATUS may be used to determine
the status of a particular map number.
.P 0
If all maps are unloaded while still in READY state, then when the first
map is read, the LITES2 working area will be set to its RANGE (plus the usual
5_% all round), possibly modified by a RANGE LIMITS command, and the ranges
of any raster images in use.
.NOFILL

Format:  QUIT  [integer] (full command required)

Valid in states  INITIAL READY
.HL 3 ^^^*>WRITE\*
.FILL
Creates new version of IFF file(s) from the current workspace file(s)
as for EXIT. The editing session is not terminated.
.BR
May be used to output the current state of editing, or to create subsets
of a file using SELECT OUTPUT.
.BR
A filename for the output may be specified. If a filename is specified
and more than one map has been selected for output, the selected files
will be merged together to form one file. This merged file will have
a valid type 2 map descriptor, having the scale of the first map that
it contains. Its map header will be blank.
.BL
WRITE may be used to produce new versions of READONLY or INSITU files,
possibly with selections, whereas EXIT has no effect on these.
.NOFILL

Format:  WRITE  [filename]  (full command required)

Valid in state  READY
.SUBTITLE Miscellaneous Commands
.PAGE
.HL 2 ^^^*Miscellaneous Commands\*
.INDEX Miscellaneous Commands
.HL 3 ^^^*>NULL\*
.FILL
The null operation.  Nothing is done.
.NOFILL

Format:  NULL

Valid in all states
.HL 3 ^^^*>DEBUG\*
.FILL
The LITES2 program debug collapse routine is entered.
This is intended as a program development tool.
If entered by accident then give command GO to continue.
.NOFILL

Format:  DEBUG integer  (full command required)

Valid in all states
.HL 3 ^^^*>SECTOR\*
.FILL
Sets the number of sectors in x and y directions for the spatial index.
This is a program tuning aid and is not recommended for operator use.
.BL
Increasing the number of sectors (up to the point where, on average,
there is one feature in each sector) will increase the speed of finding
and windowing operations; however there will be a increase in the time
taken to read maps into LITES2, and in the time taken to initialise
searches and redrawing the entire LITES2 area.
.BL
Increasing the number of sectors uses more system resources, and
LITES2 may exit with a "Insufficient virtual memory" error, while
reading in the map(s) or carrying out editing operations. In this
event either use fewer sectors, or see your system manager to get
your quotas increased.
.BL
The default state is the equivalent of a SECTOR 30 30 command.
When editing single standard map sheets, it is not usually
productive to increase the sectors to more than SECTOR 50 50, and
in fact a performance improvement may be noticed in some applications
if the number of sectors is reduced below the default. The command
DRAW GRID will display the sector grid as an aid to determining if
the current setting is sensible.
.NOFILL

Format:  SECTOR  integer integer

Valid in state  INITIAL
.HL 3 ^^^*>RANGE\*
.FILL
Specifies an area to be sectored which is not the default area. By
default the area that will be sectored is the combined range of all maps
and images specified in INITIAL state, plus 10% (i.e. 5% of the combined
range is added to all edges).
.NOFILL

Format:  RANGE  subcommand

Valid in states  INITIAL READY
.LIST '*'
.LE ;^^^*>RANGE LIMITS\*
.FILL
Specifies the area that will become the LITES2 coordinate space.
The coordinates are specified as full projection coordinates i.e.
coordinates that include any origin offset specified in the IFF files.
.BL
This command is intended for use when further maps will be read in
READY state. It may be used in READY state only when there are no maps
currently in use.
.NOTE
.LIST
.LE;Used in INITIAL state, the specified range will be expanded by
the range of maps and images also specified in INITIAL state.
This expanded range will then be further expanded by 10_%.
.LE;Used in READY state, the specified range will be expanded by the
range of the first map specified subsequently and any images
in use when the map is specified.
Again, this expanded range will be further expanded by 10_%.
.LE;Any expanded range will persist on return to INITIAL state.
.END LIST
.END NOTE
.NOFILL

Format:  RANGE LIMITS xmin xmax ymin ymax
.LE ;^^^*>RANGE SECTOR\*
.FILL
Specifies an area to be sectored which is not the default area. The
sector mechanism is used to provide the spatial index and fast find
mechanism.
.BL
The coordinates are specified as full projection coordinates i.e.
coordinates that include any origin offset specified in the IFF files.
.BL
This command is not yet implemented
.NOFILL

Format:  RANGE SECTOR xmin xmax ymin ymax
.END LIST
.HL 3 ^^^*>SAVE\*
.FILL
Saves requested information in a file or macro.
.NOFILL

Format:  SAVE subcommand

Valid in all states
.LIST '*'
.LE ;^^^*>SAVE COLOURS\*
.FILL
Saves the colour lookup table from the specified LITES2 display 
as a LITES2 command file containing a series of OVERLAY COLOUR commands.
Missing parts of the filename are filled in from LSL$LITES2CMD:---.LCM
The intention is that the command file can be used to set up the same
colours in a later LITES2 session, in order to re-display a saved
picture (see also SAVE DISPLAY command). The overlay structure of the
display is not preserved - in order to use the command file, a single
overlay using all the planes of the display should be created.
.BR;This command is only available with some versions of LITES2.
.NOFILL

Format:  SAVE COLOURS n filename

Not valid in INITIAL state

.LE ;^^^*>SAVE DISPLAY\*
.FILL
Saves the screen picture from the specified LITES2 display in a DTI file.
Missing parts of the filename are filled in from LSL$DTI:---.DTI
The intention is that the DTI file can be drawn later by LITES2 or other
Laser-Scan utilities (see also SAVE COLOURS and SAVE LUT commands).
.BR;This command is only available with some versions of LITES2.
.NOFILL

Format:  SAVE DISPLAY n filename

Not valid in INITIAL state
.LE ;^^^*>SAVE LUT\*
.FILL
Saves the colour lookup table from the specified LITES2 display 
as a file suitable for use with other Laser-Scan programs (e.g. ROVER
in the TVES package).
Missing parts of the filename are filled in from LSL$LITES2CMD:---.COL
The intention is that the lookup table can be used to set up the same
colours in other Laser-Scan utilities, in order to re-display a saved
picture (see also SAVE DISPLAY command).
.BR;This command is only available with some versions of LITES2.
.NOFILL

Format:  SAVE LUT n filename

Not valid in INITIAL state
.LE ;^^^*>SAVE MACRO\*
.FILL
Writes the specified macro to a file called
"LSL$LITES2CMD:macroname.LCM". On later runs of LITES2 this macro can be
defined again by entering @macroname. 
.NOFILL

Format:  SAVE MACRO macroname
.LE ;^^^*>SAVE SECTORS\*
.FILL
Writes sector information to file (Program development aid).
.NOFILL

Format:  SAVE SECTORS
.LE ;^^^*>SAVE SELECTIONS\*
.FILL
Create a macro with the given name containing LITES2 commands to restore
the selections to the state when the command was given. If selection-list
is given, it should be a list of one or more of MAPS, LAYERS, FCS, FSNS,
ALL, to specify which selections are to be saved. The default is ALL.
Only selections for these 4 items are saved.
.NOFILL

Format: SAVE SELECTIONS macroname [selection-list]

eg      SAVE SELECTIONS allsel
or      SAVE SELECTIONS codesel LAYERS FCS
.END LIST

.HL 3 ^^^*>VIEW\*
.INDEX LSL$LITES2__VIEW__ROUTINES                                        
                                                      
.FILL
Viewing commands make use of a shared image pointed at by the logical
name LSL$LITES2__VIEW__ROUTINES. This image is supplied by Laser-Scan. It
is called LSL$EXE:LITES2VIEWSHR.EXE. 
.BL
The VIEW command controls the generation and display of 3 dimensional
pictures (called views) from DTI images which represent the terrain. 
Each view can consist of up to three levels; these levels may either
contain terrain information or vector information (from the IFF files).
.BL
An appropriate licence is required to use this command. As this command
depends on the existence of DTI images, the licence for the IMAGE
command is also required.
.BL
This command is only available with some versions of LITES2, and the 
user should refer to the hardware dependent reference manual for the
possibilities available with his hardware.
.P 0
Before a view can be produced its spatial context and IFF content must
be defined. The basis for the specification of the view spatial context
is the view cone. Commands are provided to locate and define the
dimensions of this view cone in reference to the DTI and IFF files
containing terrain and vector data to be included in the view. LITES2
will not permit the user to render a view until the spatial context of
the view is adequately defined via one of two routes: 
.LIST
.LE;The user specifies an observer position, a cone angle, and a target
position to locate and orient the centreline of the view cone using the
VIEW FROM x y z, VIEW CONE angle, and VIEW TO x y z commands. 
.LE;The user specifies an observer position, a cone angle, a maximum
distance of view, an elevation for the centreline of the cone of vision
and a bearing along which the observer "looks". 
.END LIST
In both cases, optional front and back clip planes for the cone of
vision may be specified. 
.NOFILL

Format:  VIEW subcommand

Valid in all states
.LIST '*'
.LE;^^^*>VIEW AMBIENT\*
.FILL
Specifies the characteristics of the ambient lighting of a view.
.NOFILL

Format:  VIEW AMBIENT subcommand
.LIST 'o'
.LE;^^^*VIEW AMBIENT COLOUR\*
.FILL
Specifies the colour and brightness of the ambient light. The colour
value is specified as a red, green and blue triplet, all of which must
lie in the range 0.0 - 1.0. Thus VIEW AMBIENT COLOUR simultaneously
specifies the ambient light colour and brightness. By default VIEW
AMBIENT COLOUR 0.0 0.0 0.0 is used, i.e. no ambient light 
.NOFILL

Format:  VIEW AMBIENT COLOUR r g b
.END LIST
.LE;^^^*>VIEW BACK\*
.FILL
Specifies the distance to the back clip plane of the view; i.e. the
maximum distance that the observer can see assuming that obstacles to
view or depth/fog effects do not intervene. 
.BL
The distance (specified in IFF units) is the horizontal distance from
the observer's position measured along the view direction. Note that
this clipping plane is a straight line across the viewing cone
perpendicular to the viewing direction at this distance; it is NOT the
arc of a circle about the observer's position. If this command is not
given, the distance to the target position is used. 
.NOFILL

Format:  VIEW BACK distance
.LE;^^^*>VIEW BEARING\*
.FILL
Specifies the view bearing.
.BL
The angle, measured clockwise (in degrees) from North, at the observer's
position to the target position. If the observer's position and the
target position are defined, this command will alter the target
position. 
.NOFILL

Format:  VIEW BEARING angle
.LE;^^^*>VIEW CLEAR\*
.FILL
Clears the data from the specified level in the current view. 
.BR;This allows new data to be rendered into this level.
.BR;If no level is specified, all levels are cleared.
.NOFILL

Format:  VIEW CLEAR [level]
.LE;^^^*>VIEW COLOUR\*
.FILL
Specifies the colours to be used to display various parts of the view.
.NOFILL

Format:  VIEW COLOUR subcommand
.LIST 'o'
.LE;^^^*>VIEW COLOUR FOREGROUND\*
.FILL
Specifies the colour to be used to display the foreground in the view.
This is that part of the view that lies in front of the front clipping
plane. 
.BL
The colour value is specified as a red, green and blue triplet, all of
which must lie in the range 0.0 - 1.0.  By default VIEW COLOUR
FOREGROUND 0.0 0.0 0.0 is used.
.NOFILL

Format:  VIEW COLOUR FOREGROUND r g b
.LE;^^^*>VIEW COLOUR SEA\*
.FILL
Specifies the colour to be used for representing sea.
This is that part of the view terrain that lies at sea level (value 0).
.BL
The colour value is specified as a red, green and blue triplet, all of
which must lie in the range 0.0 - 1.0.  By default VIEW COLOUR SEA 0.0
0.35 0.55 is used.
.NOFILL

Format:  VIEW COLOUR SEA r g b
.LE;^^^*>VIEW COLOUR SKY\*
.FILL
Specifies the colour to be used for representing sky.
This is that part of the view that lies beyond the back clipping
distance of the model.
.BL
The colour value is specified as a red, green and blue triplet, all of
which must lie in the range 0.0 - 1.0. By default VIEW COLOUR SKY 0.75
0.75 0.75 is used.
.NOFILL

Format:  VIEW COLOUR SKY r g b
.END LIST
.LE;^^^*>VIEW CONE\*
.FILL
Specifies the field of view (in degrees). The angle must be less
than 180 degrees. The view "cone" is actually a pyramid of rectangular
section with the observer at the apex of the pyramid. It is not a true
cone. A default value of 45 degrees is used.
.NOFILL

Format:  VIEW CONE angle
.LE;^^^*>VIEW CREATE\*
.FILL
The current view is to be created with the specified number of levels.
The maximum number is 3. By default the view is are created with one
level. 
.NOFILL

Format:  VIEW CREATE [levels]
.LE;^^^*>VIEW DELETE\*
.FILL
Deletes the current view. This allows another picture to be rendered
into the current view. This command is similar in its effects to VIEW
CLEAR. 
.NOFILL

Format:  VIEW DELETE
.LE;^^^*>VIEW DEPTH\*
.FILL
Controls the effect of depth cueing. Depth cueing causes the
interpolation of view pixel colours between a starting value and the sky
colour. Depth cueing gives the effect of haze or greying with increasing
distance from the observer. 
.NOFILL

Format:  VIEW DEPTH subcommand
.LIST 'o'
.LE;^^^*>VIEW DEPTH OFF\*
.FILL
Switches depth cueing off (default).
.NOFILL

Format:  VIEW DEPTH OFF
.LE;^^^*>VIEW DEPTH ON\*
.FILL
Switches depth cueing on.
.NOFILL

Format:  VIEW DEPTH ON
.LE;^^^*>VIEW DEPTH DISTANCE\*
.FILL
Specifies the distance, measured in IFF units, from the observer beyond
which the interpolation of pixel colour between starting value and sky
colour results in all pixels assuming sky colour. By default a distance
of 6000.0 is assumed. 
.NOFILL

Format:  VIEW DEPTH DISTANCE distance
.END LIST
.LE;^^^*>VIEW DISPLAY\*
.FILL
Displays the current level of the current view in the specified display
and overlay (default).
.BL
Optionally, a specific level may be supplied which need not be the
current view level. 
.BL
Alternatively, multiple levels of the current view may be supplied,
either as specific view level numbers separated by commas (i,j,k) or as
ranges (n-m). This enables the user to direct the contents of more than
one view level into a single display overlay. Higher number view levels
take precedence over low numbered levels to ensure that the user can
determine how the display pixels are coloured. It is clearly important
to place the rendered terrain image in view level 1 and rendered IFF
selections in higher numbered levels. 
.BL
The current (or specified) level of the current view must have been
generated before it can be displayed. 
.NOFILL

Format:  VIEW DISPLAY displaynumber overlaynumber [viewlevel [,...]]
.LE;^^^*>VIEW DISTANCE\*
.FILL
Specifies the horizontal viewing distance, i.e. the maximum distance
that the observer can see assuming that obstacles to view or depth/fog
effects do not intervene. 
.BL
The distance is measured in IFF units, from the observer's position to
the target position. If the observer's position and the target position
are defined, this command will alter the target position. If a VIEW FROM
and VIEW TO command is used and no VIEW DISTANCE command is specified,
the view distance defaults to the distance between the observer and the
target. 
.NOFILL

Format:  VIEW DISTANCE value
.LE;^^^*>VIEW DTI\*
.FILL
Outputs all levels of the current view to the specified DTI file. 
.NOFILL

Format:  VIEW DTI filename
.LE;^^^*>VIEW ELEVATION\*
.FILL
Specifies the elevation of the centreline of the cone of vision.
.BL
The angle, measured in degrees in a vertical plane, at the observer's
position to the target position. The angle is positive if the target is
above the observer and negative if the target is lower than the
observer. If the observer's position and the target position are
defined, this command will alter the height of the target position. 
.NOFILL

Format:  VIEW ELEVATION angle
.LE;^^^*>VIEW EXAGGERATE\*
.FILL
Specifies the view Z exaggeration.
.BL
The Z exaggeration factor to be used to emphasise the height of the
terrain when creating a view. By default an exaggeration of 1.0 (i.e. no
exaggeration) is assumed. Note that the exaggeration factor is also
applied to IFF features rendered as solid objects. 
.NOFILL

Format:  VIEW EXAGGERATION factor
.LE;^^^*>VIEW FC__OFFSET\*
.FILL
Specifies a feature code offset to allow features to be rendered using a
different style from when they are displayed in plan. The value
specified must be between 0 and 32767.
.BL
When rendering features, if the feature code is less than the specified
offset and there is an entry in the FRT file with a feature code of
(current feature code + offset) that has the same graphical type as the
original feature code, then the feature will be rendered using this
offset feature code. 
.NOFILL

Format:  VIEW FC__OFFSET offset
.LE;^^^*>VIEW FOG\*
.FILL
Controls the use and effects of fog while generating a view.
Commands are provided to enable the specification of a fog cube clipped
to front, back, horizontal bottom and top planes, within which fog
effects are applied. The fog "visibility", the rate at which the pixel
colours are modified to the fog colour, is applied within this cube. 
.NOFILL

Format:  VIEW FOG subcommand
.LIST 'o'
.LE;^^^*>VIEW FOG BACK\*
.FILL
Specifies the (horizontal) distance, measured in IFF units, from the
observer to the back clip plane of the fog cube within which fog effects
are applied. By default a VIEW FOG BACK distance of 30000.0 is assumed. 
.NOFILL

Format:  VIEW FOG BACK distance 
.LE;^^^*>VIEW FOG BOTTOM\*
.FILL
Specifies the height, measured in IFF units above the horizontal datum,
of the bottom clip plane of the fog cube within which fog effects are
applied. Note that it is NOT the height above the terrain. By default a
VIEW FOG BOTTOM height of 100.0 is assumed. 
.NOFILL

Format:  VIEW FOG BOTTOM height
.LE;^^^*>VIEW FOG DISTANCE\*
.FILL
Specifies the distance, measured in IFF units, within which the
interpolation of pixel colour between starting value and fog colour
results in all pixels assuming fog colour. This enables the user to
specify the fog "visibility". The interpolation uses an exponential
decay function. It is applied within the fog cube with effect from the
intersection between the line of view and the fog cube clip plane
closest to the observer.  By default a distance of 600.0 is assumed. 
.NOFILL

Format:  VIEW FOG DISTANCE distance
.LE;^^^*>VIEW FOG FRONT\*
.FILL
Specifies the (horizontal) distance, measured in IFF units, from the
observer to the front clip plane of the fog cube within which fog
effects are applied. By default a VIEW FOG FRONT distance of 100.0 is
assumed. 
.NOFILL

Format:  VIEW FOG FRONT distance
.LE;^^^*>VIEW FOG OFF\*
.FILL
Switches off the effects of fog, (default).
.NOFILL

Format:  VIEW FOG OFF
.LE;^^^*>VIEW FOG ON\*
.FILL
Switches on the effects of fog.
.NOFILL

Format:  VIEW FOG ON
.LE;^^^*>VIEW FOG TOP\*
.FILL
Specifies the height, measured in IFF units above the horizontal datum,
of the top clip plane of the fog cube within which fog effects are
applied. Note that it is NOT the height above the terrain. By default a
VIEW FOG TOP height of 5000.0 is assumed. 
.NOFILL

Format:  VIEW FOG TOP height
.END LIST
.LE;^^^*>VIEW FROM\*
.FILL
Defines the observer's position. 
.BL
This position is specified in IFF units in LITES2 coordinate space. It
is possible to position the observer outside the area covered by any
images or maps that have been read into LITES2. Note that the z argument
is the observer's height above the horizontal datum, NOT the observer's
height above the terrain. 
.NOFILL

Format:  VIEW FROM x y z
.LE;^^^*>VIEW FRONT\*
.FILL
Specifies the (horizontal) distance, measured in IFF units, from the
observer to the front clip plane of the view. By default a VIEW FRONT
distance of 1.0 is assumed.
.NOFILL

Format:  VIEW FRONT distance
.LE;^^^*>VIEW GENERATE\*
.FILL
Generates the current level of the current view. The VIEW GENERATE
command generates the colour for each pixel in the view on the basis of
the intrinsic colour for that pixel. The intrinsic colour for each pixel
representing terrain rendered from a DTI file is determined by the
colour method specified by the VIEW METHOD command. The intrinsic colour
for pixels representing an IFF feature is taken from the FRT colour
definition for the feature code defining that IFF feature. 
.BL
Optionally, one or more of the following colour modifiers may be
specified, the effects of which are computed by the VIEW GENERATE
command: 
.TP 5
.LIST ' '
.LE;fog, activated by VIEW FOG ON 
.LE;depth, activated by VIEW DEPTH ON
.LE;illumination, activated by VIEW ILLUMINATION ON
.END LIST
If colour modifiers are selected VIEW COLOUR commands may be used to
specify colour values for sea, sky, fog, constant land colour and
foreground. 
.BL
VIEW GENERATE command execution is slowed by the application of one or
more colour modifier options. If the user wishes merely to determine the
content of a view it can be quickly produced by generating with no
colour modifiers. In the absence of colour modifiers the VIEW INDEX
commands may be used to specify colour indices for sea, sky, constant
land colour and foreground. 
.BL
If FOG, ILLUMINATION or DEPTH have been switched on, VIEW GENERATE  must
be preceded by one or more VIEW PALETTE commands. 
.BL
The VIEW GENERATE command must be given after a level has been rendered,
and before the view can be displayed with a VIEW DISPLAY command.
Several views may be generated and displayed from one rendered view.
Different VIEW AMBIENT, VIEW COLOUR, VIEW DEPTH, VIEW DISTANCE, VIEW
FOG, VIEW ILLUMINATION, VIEW LIGHT, VIEW METHOD, VIEW PALETTE, and VIEW
SPHERE commands may be given between successive VIEW GENERATE commands
without re-rendering the view. 
.NOFILL

Format:  VIEW GENERATE
.LE;^^^*>VIEW ILLUMINATION\*
.FILL
Controls the effect of illumination on a view.
.NOFILL

Format:  VIEW ILLUMINATION subcommand
.LIST 'o'
.LE;^^^*>VIEW ILLUMINATION OFF\*
.FILL
Switches the effect of illumination off (default).
.NOFILL

Format:  VIEW ILLUMINATION OFF
.LE;^^^*>VIEW ILLUMINATION ON\*
.FILL
Switches the effect of illumination on.
.NOFILL

Format:  VIEW ILLUMINATION ON
.END LIST
.LE;^^^*>VIEW LEVEL\*
.FILL
Specifies the level of the view which is to be made "current" upon which
following VIEW RENDER, VIEW GENERATE and VIEW DISPLAY commands will act.
A single view can have up to three levels. It is strongly recommended
that the terrain component of a view (rendered from the DTI file) is
placed in level one and that overlay information (e.g. rendered from IFF
file) is placed in higher view levels. This will enable the user to use
the VIEW DISPLAY facility to draw multiple view levels into the same
display overlay. Higher number view levels take precedence over low
numbered levels to ensure that the user can determine how the display
pixels are coloured. 
.NOFILL

Format:  VIEW LEVEL number
.LE;^^^*>VIEW INDEX\*
.FILL
Specifies which colour index from the output display colour table is to
be used for explicit themes in the view, i.e. foreground, constant land
colour, sea, and sky. These indices are applied only when a view is
generated with no colour modifiers and their application results in very
rapid view generation as no colour interpolation is required.
.NOFILL

Format:  VIEW INDEX subcommand
.LIST 'o'
.LE;^^^*>VIEW INDEX CONSTANT\*
.FILL
Specifies which colour index from the output display colour table is to
be used to represent the constant land colour when a view is generated
with no colour modifiers. The absence of colour modifiers will result in
all land appearing as a silhouette in the colour defined by the
specified colour index. By default colour index 2 is used. 
.NOFILL

Format:  VIEW INDEX CONSTANT integer
.LE;^^^*>VIEW INDEX FOREGROUND\*
.FILL
Specifies which colour index from the output display colour table is to
be used to represent the foreground of a view when the view is generated
with no colour modifiers. By default colour index 1 is used.
.NOFILL

Format:  VIEW INDEX FOREGROUND integer
.LE;^^^*>VIEW INDEX SEA\*
.FILL
Specifies which colour index from the output display colour table is to
be used to represent sea when a view is generated with no colour
modifiers. By default colour index 1 is used. 
.NOFILL

Format:  VIEW INDEX SEA integer
.LE;^^^*>VIEW INDEX SKY\*
.FILL
Specifies which colour index from the output display colour table is to
be used to represent sky when a view is generated with no colour
modifiers. By default colour index 0 is used. 
.NOFILL

Format:  VIEW INDEX SKY integer
.END LIST
.LE;^^^*>VIEW LIGHT\*
.FILL
Allows the operator to specify up to 5 light sources to be used  when
rendering an image file.
.BL
At present only directional light sources are implemented, so only a
bearing and elevation is required to define a light. It is possible to
define these by specifying the position of the light source and  of its
target point.
.BL
A light is activated by giving the command VIEW LIGHT NUMBER and is
deactivated with the VIEW LIGHT DELETE command.
.NOFILL

Format:  VIEW LIGHT subcommand
.LIST 'o'
.LE;^^^*>VIEW LIGHT BEARING\*
.FILL
Specifies light bearing.
.BL
The angle, measured clockwise (in degrees) from North, at the light 
source position to the target position. If the source position and the
target position are defined, this command will alter the target
position. A default light bearing of 135.0 is assumed. 
.NOFILL

Format:  VIEW LIGHT BEARING angle
.LE;^^^*>VIEW LIGHT COLOUR\*
.FILL
Specifies the colour and brightness of the light. The colour value is
specified as a red, green and blue triplet, all of which must lie in the
range 0.0 - 1.0 . Default values of 1.0 1.0 1.0 are used.
.NOFILL

Format:  VIEW LIGHT COLOUR r g b
.LE;^^^*>VIEW LIGHT CONE\*
.FILL
Specifies the current light cone angle. The value is given in degrees in
the range 0.0 - 180.0. As only directional light sources are used at the
moment, this command has no effect. 
.NOFILL

Format:  VIEW LIGHT CONE angle
.LE;^^^*>VIEW LIGHT DELETE\*
.FILL
Deselects the current light source, selected with a VIEW LIGHT NUMBER
command, from the list of available light sources, but retaining its 
parameters for future reselection.
.NOFILL

Format:  VIEW LIGHT DELETE
.LE;^^^*>VIEW LIGHT DISTANCE\*
.FILL
Specifies the light distance.
.BL
The distance from the light source position to the light target
position.  If the source position and the target position are defined,
this command will alter the target position. 
.NOFILL

Format:  VIEW LIGHT DISTANCE value
.LE;^^^*>VIEW LIGHT ELEVATION\*
.FILL
Specifies the light elevation.
.BL
The angle, measured in the vertical plane, at the light source position
to the light target position. The angle is positive if the target
position is above the source position. If the source position and the
target position are defined, this command will alter the target
position. 
.BL
A default light elevation of -22.5 degrees is assumed.
.NOFILL

Format:  VIEW LIGHT ELEVATION angle
.LE;^^^*>VIEW LIGHT FROM\*
.FILL
Specifies the position of a light source. 
.BL
The coordinates are given in IFF units and are specified in the LITES2
coordinate space.
.NOFILL

Format:  VIEW LIGHT FROM x y z
.LE;^^^*>VIEW LIGHT NUMBER\*
.FILL
Succeeding VIEW LIGHT commands refer to this light source which is added
to the list of light sources for use in the illumination model with the
VIEW ILLUMINATION ON command. By default, light source number 1 is 
available and selected, with the default parameters listed here.
.NOFILL

Format:  VIEW LIGHT NUMBER n
.LE;^^^*>VIEW LIGHT TO\*
.FILL
Specifies the target of a light source. 
.BL
The coordinates are given in IFF units and are specified in  the LITES2
coordinate space.
.NOFILL

Format:  VIEW LIGHT TO x y z
.END LIST
.LE;^^^*>VIEW METHOD\*
.FILL
The intrinsic pixel colours for the terrain component of a view are
derived using one of four colour allocation methods: 
.BL
.TP 4
.LIST 0 ' '
.LE;CONSTANT
.LE;HEIGHT
.LE;IMAGE
.LE;RANDOM
.END LIST

Optionally, the intrinsic pixel colours provided by these method may, in
turn, be subjected to colour modification using one or more of the
following colour modifier options: 
.BL
.TP 3
.LIST 0 ' '
.LE;DEPTH
.LE;FOG
.LE;ILLUMINATION
.END LIST

The view colour method must be specified before the VIEW GENERATE
command. By default VIEW METHOD CONSTANT is assumed. 
.NOFILL

Format:  VIEW METHOD subcommand
.LIST 'o'
.LE;^^^*>VIEW METHOD CONSTANT\*
.FILL
Specifies that a constant intrinsic colour should be used for terrain
(i.e. DTI height _>#0) rendered from a DTI file. The constant land colour
applied by VIEW METHOD CONSTANT is specified using the VIEW COLOUR
CONSTANT or VIEW INDEX CONSTANT commands.  This is the default colouring
method. 
.NOFILL

Format:  VIEW METHOD CONSTANT
.LE;^^^*>VIEW METHOD HEIGHT\*
.FILL
Specifies that the intrinsic colour used for terrain shall be derived
from the height classification scheme applied to the source DTI file at
the time of rendering. The source DTI file classification is defined
using IMAGE STEP and IMAGE BAND commands.
.NOFILL

Format:  VIEW METHOD HEIGHT
.LE;^^^*>VIEW METHOD IMAGE\*
.FILL
Specifies that the intrinsic colour used for the terrain be derived from
the height classification scheme applied to specified DTI file(s). The
source DTI file classification is defined using IMAGE STEP and IMAGE
BAND commands. This command enables the user to "drape" DTI files over
the rendered surface. 
.NOFILL

Format:  VIEW METHOD IMAGE range
.LE;^^^*>VIEW METHOD RANDOM\*
.FILL
Specifies that the intrinsic colour used for terrain shall be derived
using a random colour generator.
.NOFILL

Format:  VIEW METHOD RANDOM
.END LIST
.LE;^^^*>VIEW NUMBER\*
.FILL
Succeeding VIEW commands refer to this view. Currently LITES2 supports a
maximum of two views. 
.NOFILL

Format:  VIEW NUMBER n
.LE;^^^*>VIEW PALETTE\*
.FILL
Specifies the colour palettes used by the VIEW GENERATE command.
.NOFILL

Format:  VIEW PALETTE subcommand
.LIST 'o'
.LE;^^^*>VIEW PALETTE AUTO\*
.FILL
Automatically re-samples the colour values of the pixels for the next
picture to be generated. It uses the current view colour modifiers for
the calculation of the colour values. By default all the colours
available for the specific display overlay are calculated.
.BL
Alternatively, specific colours may be supplied either as  individual
colour index numbers separated by commas (i,j,k) or as ranges (n-m). 
.NOFILL

Format:  VIEW PALETTE AUTO displaynumber overlaynumber [range]
.LE;^^^*>VIEW PALETTE DISPLAY\*
.FILL
Specifies the colour palette to be used for the final display of the
generated view. The colour palette should be loaded from the display and
overlay in which the view is eventually to be displayed. The display
colour palette is used as follows: 
.LIST
.LE;When no colour modifiers are selected the colour index derived for
each pixel in the view is looked up directly in the display colour
palette. This is very quick. 
.LE;When colour modifiers are specified for the VIEW GENERATE command a
starting rgb triplet is used for the intrinsic colour for each pixel.
This rgb value is then subjected to the specified colour modification ,
e.g_. depth, and the display colour palette is searched for the match to
the resulting rgb value. It is the value identified in the palette that
is actually used to display the pixel, not the calculated value which
resulted from the colour modification process. It is important to load a
display palette which contains colours relevant to the view options. It
should, for example, contain some greys and white if the fog modifier is
selected. 
.END LIST
.NOFILL

Format:  VIEW PALETTE DISPLAY display overlay
.LE;^^^*>VIEW PALETTE IFF\*
.FILL
Specifies the colour palette in which the FRT colour index of IFF
features will be looked up to get their rgb values at the start of the
view generation process. If IFF features are to be given the same
intrinsic colours in the view display as in the planimetric display, the
IFF colour palette should be loaded from the planimetric display and
overlay in which the IFF data are drawn. 
.NOFILL

Format:  VIEW PALETTE IFF display overlay
.LE;^^^*>VIEW PALETTE IMAGE\*
.FILL
Specifies the colour palette from which the colour index of terrain
pixels will be looked up to get their rgb values at the start of the
view generation process. It is also used to lookup the colour indices of
DTI files which are to be used by the image colour method. 
.BL
If the terrain is to be given the same intrinsic colours in the view
display as in the planimetric display, the image colour palette should
be loaded from the planimetric display and overlay in which the DTI
terrain data are drawn. 
.NOFILL

Format:  VIEW PALETTE IMAGE display overlay
.END LIST
.LE;^^^*>VIEW PIXELS\*
.FILL
Specifies the size of the view to be created.
.BL
This will often be the size of a display that has already been created.
The size of a display (in screen pixels) are available in the system
variables $DISPLAYCOLUMNS and $DISPLAYROWS. 
.NOFILL

Format:  VIEW PIXELS columns rows
.LE;^^^*>VIEW RENDER\*
.FILL
Activate the rendering phase of view production.
.NOFILL

Format:  VIEW RENDER subcommand
.LIST 'o'
.LE;^^^*>VIEW RENDER IFF\*
.FILL
Render a view of IFF data into the current level of the current view.
.BL
All IFF features that are currently selected and fall in the window
specified by the VIEW WINDOW command, are rendered against all the
images selected by the IMAGE SELECT command.
.BL
Texts and symbols are positioned at their correct positions in the view.
They are made to "stand up" or "lie down" according to the flags defined
for their feature code in the FRT file. 
.BL
Symbols that form part of patterned lines and patterned fill areas
however "lie down" on the terrain. 
.BL
Fill areas that are defined as "patterned fill areas" in the FRT, are
rendered as a series of vectors. Other fill areas are all infilled with
solid colour. 
.BL
Optionally, IFF lines and area features may be rendered to make "solid
objects" in the view. The feature must contain at least one height at
each coordinate to offset the feature from the terrain surface. This
height value may be interpreted in a number of different ways according
to the feature code flags set in the FRT file, (see the FRTLIB user
guide for further details of flag interpretation), and the z-value
interpretation option selected in LITES2, (see VIEW Z__INTERPRETATION).
Typically the height is used to raise the line (or the perimeter of an
area) above the terrain surface. Vertical "fences" are then projected
down from the raised linework to the terrain surface. The "fences" are
then solid filled and in the case of an area a "lid" is rendered to give
the object an impression of being "solid". 
.NOFILL

Format:  VIEW RENDER IFF
.LE;^^^*>VIEW RENDER IMAGE\*
.FILL
Generate a view of terrain.
.BL
All DTI images that have been opened by LITES2 and selected by the IMAGE
SELECT command are used to create a view in the currently selected
level. 
.NOFILL

Format:  VIEW RENDER IMAGE
.END LIST
.LE;^^^*>VIEW ROLL\*
.FILL
Specifies a roll angle, expressed in degrees from the horizontal, for
the view. This has the effect of rotating the horizon of the view. By
default a roll value of 0.0 is assumed. 
.NOFILL

Format:  VIEW ROLL angle
.LE;^^^*>VIEW SAMPLE\*
.FILL
Specifies a sampling interval in terms of columns and rows of the DTI
images being rendered. This has the effect of speeding up the rendering,
at the expense of the quality of the final image. By default all DTI
columns and rows are used. 
.NOFILL

Format:  VIEW SAMPLE columns rows
.LE;^^^*>VIEW SPHERE\*
.FILL
Specifies a sphere constructed around the observer within which no
colour modifiers are applied during the VIEW GENERATE phase of view
production. 
.NOFILL

Format:  VIEW SPHERE subcommand
.LIST 'o'
.LE;^^^*>VIEW SPHERE DISTANCE\*
.FILL
Specifies the radius of a sphere, expressed in IFF units, constructed
around the observer within which no colour modifiers are applied during
the VIEW GENERATE phase of view production. This enables the user to
specify a zone of "perfect visibility" within the view. By default a
sphere distance of 1.0 is assumed. 
.NOFILL

Format:  VIEW SPHERE DISTANCE distance
.END LIST
.LE;^^^*>VIEW TO\*
.FILL
Defines the target position for the view. 
.BL
This position is specified in IFF units in LITES2 coordinate space. It
is possible to position the target outside the area covered by any
images or maps that have been read into LITES2. Note that  the z
argument is the target height above the horizontal datum, NOT the target
height above the terrain.
.NOFILL

Format:  VIEW TO x y z
.LE;^^^*>VIEW WINDOW\*
.FILL
Defines the area to be used when generating a view.
.NOFILL

Format:  VIEW WINDOW subcommand
.LIST 'o'
.LE;^^^*>VIEW WINDOW LIMITS\*
.FILL
The window is explicitly specified in IFF units, in terms of  the LITES2
coordinate system.
.NOFILL

Format:  VIEW WINDOW LIMITS xmin xmax ymin ymax
.LE;^^^*>VIEW WINDOW MAP\*
.FILL
The window is the whole of the LITES2 working area.
.NOFILL

Format:  VIEW WINDOW MAP
.LE;^^^*>VIEW WINDOW SCREEN\*
.FILL
The window is the area currently displayed in the LITES2 primary
display. This is the default windowing method. 
.NOFILL

Format:  VIEW WINDOW SCREEN
.END LIST
.LE;^^^*>VIEW Z__INTERPRETATION\*
.FILL
Specifies how Z coordinates and differences in height are to be
interpreted when displaying lines and areas as features that are to have
a solid vertical component in perspective views. 
.BL
This command is also used to specify the two point attribute types that
are to be used for this vertical information. 
.NOFILL

Format:  VIEW Z__INTERPRETATION subcommand acdtype1 acdtype2
.LIST 'o'
.LE;^^^*>VIEW Z__INTERPRETATION ABT\*
.FILL
The value of the attribute acdtype1 is the absolute height of the bottom
of the feature, while the value of the attribute acdtype2 is  the
absolute height of the top of the feature.

.LE;^^^*>VIEW Z__INTERPRETATION AHD\*
.FILL
The value of the attribute acdtype1 is the absolute height of the top of
the feature, while the value of the attribute acdtype2 is  the
difference in height from the top down to the bottom of the feature.

.LE;^^^*>VIEW Z__INTERPRETATION AHU\*
.FILL
The value of the attribute acdtype1 is the absolute height of the bottom
of the feature, while the value of the attribute acdtype2 is  the
difference in height from the bottom up to the top of the feature. This
is the default z interpretation, with ACD types 93 and 97.

.LE;^^^*>VIEW Z__INTERPRETATION RBT\*
.FILL
The value of the attribute acdtype1 is the height of the bottom of the
feature relative to the ground level, while the value of the attribute
acdtype2 is the height of the top of the feature relative to the ground
level.

.LE;^^^*>VIEW Z__INTERPRETATION RHD\*
.FILL
The value of the attribute acdtype1 is the height of the top of the
feature relative to ground level, while the value of the  attribute
acdtype2 is the difference in height from the top down to the bottom of
the feature.

.LE;^^^*>VIEW Z__INTERPRETATION RHU\*
.FILL
The value of the attribute acdtype1 is the height of the bottom of the
feature relative to ground level, while the value of the  attribute
acdtype2 is the difference in height from the bottom up to the top of
the feature.
.END LIST
.END LIST

.HL 3 ^^^*>SPAWN\*
.FILL
An appropriate licence is required to use this command.
.BR
Creates a sub-process to execute a DCL command (which may be an @file
command). If doing several commands, then one can SPAWN @TT:, perform the
commands, then LOGOUT or CTRL/Z. 
Unless the /NOWAIT qualifier is given, LITES2 will wait for the subprocess
to complete before continuing. If /NOWAIT is used, then the command executed
by the subprocess should not normally read from or write to the terminal,
since this is likely to result in confusion.
.NOFILL

Format:  SPAWN [/NOWAIT] command

eg       SPAWN DIRECTORY LSL$IF:
or       SPAWN/NOWAIT UILMENUS EXAMPLE

Valid in all states
.HL 3 ^^^*>WORKSTATION\*
.FILL
Alters facilities on the workstations in use.
.NOFILL

Format:  WORKSTATION  subcommand
.LIST '*'
.LE ;^^^*>WORKSTATION COLOUR\*
.FILL
Sets the colour which will be used for a particular colour index. This
should not normally be used if display overlays are in use - the OVERLAY
COLOUR command should be used instead.
.BR
The effect of this command may vary depending on which workstations are
in use. Colour index 0 is the background colour, while 1 up to a maximum
are foreground colours. Negative colour indices may be used to set the
colour of (eg) highlighted features in certain implementations. The red,
green, and blue values should be in the range 0.0 to 1.0 and control the
fraction of the primary colours in the mixture. In the case of workstations
with both primary and secondary colour displays, this command will affect
both.
.NOFILL

Format:  WORKSTATION COLOUR  index red green blue

eg       WORKSTATION COLOUR 1 0.0 0.5 0.7

Valid in states:
READY LINE CIRCLE TEXT SYMBOL EDIT MODIFY ON WINDOW CONSTRUCT AC RECOVER SETUP
.LE ;^^^*>WORKSTATION OVERLAY\*
.FILL

Allows the definition of display overlays consisting of a subset of the pixel
planes available on the primary or secondary displays. Once defined, the
OVERLAY command may be used to select which features are drawn in a particular
overlay, and how the overlay appears on the display. The bit planes used in an
overlay must be consecutive, and a single plane may only be used in one
overlay. The overlay number is used to identify the overlay using OVERLAY
NUMBER commands, and must be an integer in the range 1-8. The offset argument
specifies the first bit plane to be used (the first plane is 0). If omitted,
the first available value allowing the requested number of planes is used. In
the case of workstation with primary and secondary displays which both support
overlays, the overlays are shared between the two - the creation of an overlay
in one automatically creates the same overlay in the other.
.P 0
This command is only available with some versions of LITES2, and the 
user should refer to the hardware dependent reference manual for the
possibilities available with his hardware.
.NOFILL

Format:  WORKSTATION OVERLAY number overlay planes [offset]

eg       WORKSTATION OVERLAY 1 2 4 3
         Defines overlay number 2 on workstation 1 (primary) to
         consist of bit planes 3,4,5, and 6.

Valid in all states
.LE ;^^^*>WORKSTATION TYPE\*
.FILL
Allows the user to specify the type of workstation being used, where
there is the possibility of using slightly different hardware.
.BL
This command is only available on some versions of the program, and the 
user should refer to the hardware dependent reference manual for the
possibilities available with his hardware. On the other versions it is
a null operation.
.NOFILL

Format:  WORKSTATION TYPE workstation type

eg       WORKSTATION TYPE 1  4014
         If given in the TEK__ARGS version of LITES2, this command is
         used to use a TEKTRONIX 4014 terminal (or an emulator)
         as the primary display, without the use of a MUART.

Valid in state  INITIAL
.LE ;^^^*>WORKSTATION VIEWPORT\*
.FILL
Sets the size and position on the screen of the active graphics area of 
a particular workstation. 
.BR
The viewport extents should be in the range 0.0 to 1.0, thereby 
defining the required proportion of the total screen.
.BR
This command may be used in conjunction with the SCROLL and
DESCRIBE SCREENMENU commands to separate the text, graphics, and screen
menu areas on the screen.
.NOFILL

Format:  WORKSTATION VIEWPORT workstation Xmin Xmax Ymin Ymax

eg       WORKSTATION VIEWPORT 1  0.2 1.0 0.0 1.0

Valid in state  INITIAL
.END LIST
.HL 3 ^^^*>OVERLAY\*
.FILL

Specifies details of the appearance of display overlays. These must first be
created using the WORKSTATION OVERLAY or DISPLAY OVERLAY commands. Several of
the OVERLAY subcommands require that the overlay to which they are to apply is
first specified in an OVERLAY NUMBER command.
.BR
For more information about overlays, see the separate section of the manual
below.
.NOFILL

Format:  OVERLAY  subcommand

Valid in all states except PAINT
.LIST '*'
.LE ;^^^*>OVERLAY ATTRIBUTE\*
Sets the attributes of a particular colour index in the selected
overlay, or all colours if index is not specified.
Possible attributes are:
.BL
.LM +14
.P -14;TRANSPARENT#-#the underlying colour shows through. The colour of
this colour index is not relevant. 
.P -14;OPAQUE######-#this colour obscures any underlying colour.
.P -14;INVERSE#####-#a colour complementary to the underlying colour is
shown. 
The colour of this colour index is not relevant.
.P -14;ADD#########-#The underlying colour is combined with this colour
so as to produce a lighter colour. 
.P -14;SUBTRACT####-#The underlying colour is combined with this colour
so as to produce a darker colour. 
.P -14;MERGE#######-#The displayed colour is an average of the underlying
colour and this colour.
.LM -14

.NOFILL
Format:  OVERLAY ATTRIBUTE [index] attribute

eg       OVERLAY ATTRIBUTE 1 OPAQUE
.LE ;^^^*>OVERLAY BACKDROP\*
.FILL
Sets the backdrop colour. This is the background colour of the display
which is considered to lie behind all the overlays. The colour may be
set either using the RGB scheme (the proportions of the primary colours
are specified in the range 0-1), the HLS scheme (hue is an angle 0-360
starting as red and moving through green then blue, lightness and
saturation are in the range 0-1), or the HSV scheme (hue as for HLS,
saturation and value in the range 0-1).
.NOFILL

Format:  OVERLAY BACKDROP RGB red green blue
or       OVERLAY BACKDROP HLS hue lightness saturation
or       OVERLAY BACKDROP HSV hue saturation value
.LE ;^^^*>OVERLAY BLANK\*
.FILL
Sets the colour index to use when blanking behind texts in an overlay.
If no colour index is given, then the blanking colour for this overlay
is cancelled, and the default colour is used.
.BL
See ENABLE BLANK for more details.
.BL
When blanking behind texts in an overlay, it is usual to use an opaque
colour.
.NOFILL

Format:  OVERLAY BLANK [colour__index]
.LE ;^^^*>OVERLAY CLEAR\*
Removes all selections of IFF features or raster images from an overlay.

.NOFILL
Format:  OVERLAY CLEAR
.LE ;^^^*>OVERLAY CLUT\*
.FILL
Reads in a colour look up table for the selected overlay.
This command is not yet implemented.
.NOFILL

Format:  OVERLAY CLUT filename
.LE ;^^^*>OVERLAY COLOUR\*
.FILL
Sets the colour of a particular colour index in the selected overlay.
Zero is the background colour of the overlay (the colour which will appear
in areas where nothing is drawn). The colour may be set either using the
RGB scheme (the proportions of the primary colours are specified in the
range 0-1), the HLS scheme (hue is an angle 0-360 starting as red and
moving through green then blue, lightness and saturation are in the
range 0-1), or the HSV scheme (hue as for HLS, saturation and value in
the range 0-1).
.NOFILL

Format:  OVERLAY COLOUR RGB red green blue
or       OVERLAY COLOUR HLS hue lightness saturation
or       OVERLAY COLOUR HSV hue saturation value
.LE ;^^^*>OVERLAY CONCEAL\*
.FILL
Makes the selected overlay invisible (opposite of OVERLAY REVEAL).
.NOFILL

Format:  OVERLAY CONCEAL
.LE ;^^^*>OVERLAY DEFER\*
.FILL
Specifies that changes to overlay colours and attributes should not be
performed until an OVERLAY UPDATE command is given. This speeds up
operation if a number of changes to overlays are to be made.
.NOFILL

Format:  OVERLAY DEFER
.LE ;^^^*>OVERLAY DELETE\*
.FILL

Deletes the definition of an overlay, and makes the bit planes available for
re-use in WORKSTATION OVERLAY or DISPLAY OVERLAY commands. OVERLAY CLEAR must be
used before OVERLAY DELETE.
.NOFILL

Format:  OVERLAY DELETE
.LE ;^^^*>OVERLAY DESELECT\*
.FILL
Deselects categories of IFF features and/or raster images from the
selected overlay. The format of the command is the same as the ordinary
DESELECT command, but only subcommands ALL, FCS, LAYERS, and MAPS, plus
the additional subcommand IMAGES are permitted.
.NOFILL

Format:  OVERLAY DESELECT  subcommand
.LE ;^^^*>OVERLAY ERASE\*
.FILL
Erases (clears) the current overlay in the current display. When primary and
secondary displays both support overlays, the overlay will be cleared in both
unless a SUPPRESS command (qv) has been used.
.NOFILL

Format:  OVERLAY ERASE
.LE ;^^^*>OVERLAY NUMBER\*
.FILL
Selects an overlay number to be used in subsequent OVERLAY commands
which operate on a specific overlay. The number must be in the range
1-8 for specific overlays, or 0 which is an 'unset' value and prevents
the use of some OVERLAY commands until another number is chosen.
.NOFILL

Format:  OVERLAY NUMBER n
.LE ;^^^*>OVERLAY POP\*
.FILL
Moves the selected overlay to the top of the stack of overlays, so that
it will appear 'in front' of all other overlays. The other overlays
retain their existing order.
.NOFILL

Format:  OVERLAY POP
.LE ;^^^*>OVERLAY PUSH\*
.FILL
Moves the selected overlay to the bottom of the stack of overlays, so
that it will appear 'behind' all other overlays. The other overlays
retain their existing order.
.NOFILL

Format:  OVERLAY PUSH
.LE ;^^^*>OVERLAY REVEAL\*
.FILL
Makes the selected overlay visible (opposite of OVERLAY CONCEAL).
.NOFILL

Format:  OVERLAY REVEAL
.LE ;^^^*>OVERLAY SELECT\*
.FILL
Selects categories of IFF features and/or raster images to appear in the
selected overlay. The format of the command is the same as the ordinary
SELECT command, but only subcommands ALL, FCS, LAYERS, and MAPS, plus
the additional subcommand IMAGES are permitted. Features must still be
selected by the normal SELECT command in order to appear in any
overlays. Nothing will appear in an overlay until an OVERLAY SELECT
command is used. 
.NOFILL

Format:  OVERLAY SELECT  subcommand
.LE ;^^^*>OVERLAY UPDATE\*
.FILL
Causes the screen display to be updated to reflect changes to overlay
colours and attributes made since an OVERLAY DEFER command. After
OVERLAY UPDATE, changes will be performed immediately until another
OVERLAY DEFER command is given.
.NOFILL

Format:  OVERLAY UPDATE
.END LIST
.HL 3 ^^^*>IMAGE\*
.FILL
An appropriate licence is required to use this command.
.P 0
Specifies details of raster images. These may be displayed in display
overlays using the OVERLAY SELECT IMAGES command. Note that display
overlays are not supported by all version of LITES2. Several of the
IMAGE subcommands require that the image to which they are to apply is
first specified in an IMAGE NUMBER command. 
.BR
For more information about images, see the separate section of the manual
below.
.NOFILL

Format:  IMAGE  subcommand

Valid in all states except PAINT
.LIST '*'
.LE;^^^*>IMAGE BACKGROUND\*
.FILL
Specifies a colour value to be used as background in image editing
operations. This is the value that will be written by IMAGE CLEAR,
IMAGE ERASE, and IMAGE SPECKLE CLEAR commands, and is the value that
the IMAGE BURN__IN command will leave unaltered.
It is also the colour of speckles for IMAGE SPECKLE FILL.
Since editing is only valid for LSR files containing bit data,
the value must be 0 or 1. The default is 0.
.NOFILL
Format:  IMAGE BACKGROUND integer
.LE ;^^^*>IMAGE BAND\*
.FILL
Specifies that a range of values in the current image are to be
displayed in a particular colour index, overriding the colour
obtained from IMAGE STEP. If the two values are the same, or the
high value is omitted, then only the single value will be drawn
in the given colour index.
.BR
Image classification must already have been enabled by an IMAGE STEP
command.
.BL
The optional label argument is used to annotate the corresponding band
in output from the SHOW IMAGE and DRAW LEGEND command. If the label is
to start with a number, then the high__value argument may not be omitted.
.NOFILL

Format:  IMAGE BAND index low__value [high__value] [label]
.LE ;^^^*>IMAGE BITS\*
.FILL
Specifies which bits from the current image to display. The default is
to display the 8 least significant bits i.e. IMAGE BITS 0 8. The
first-bit must be in the range 0-31, and the number-of-bits must be in
the range 1-8. Image classification is disabled by this command until an
IMAGE STEP command is given. 
.NOFILL

Format:  IMAGE BITS  first-bit number-of-bits
.LE;^^^*>IMAGE BRUSH\*
.FILL
Specifies the size and shape of brush used for IMAGE PAINT and ERASE
operations. The default is a circle of size 1.
.NOFILL

Format:  IMAGE BRUSH subcommand
.LIST 'o'
.LE;^^^*>IMAGE BRUSH CIRCLE\*
.FILL
Specifies a circular brush.
By default the diameter is specified in IFF units (unless a UNITS command
has been given).
.NOFILL

Format:  IMAGE BRUSH CIRCLE diameter
.LE;^^^*>IMAGE BRUSH CURSOR\*
.FILL
Specifies whether the screen cursor assumes the shape of the BRUSH
during IMAGE PAINT and ERASE operations. The integer argument
is 0 to use the default cursor, or 1 to use the brush-shaped
cursor.
.NOFILL

Format:  IMAGE BRUSH CURSOR on
.LE;^^^*>IMAGE BRUSH RECTANGLE\*
.FILL
Specifies a rectangular (or square) brush.
If the height is omitted, it is taken to be the same as the width,
giving a square brush.
By default the size is specified in IFF units (unless a UNITS command
has been given).
.NOFILL

Format:  IMAGE BRUSH RECTANGLE width [height]
.END LIST
.LE;^^^*>IMAGE BURN__IN\*
.FILL
Edits the current image by reading back the current screen picture,
and changing any pixels which are not the image background colour to
be the image foreground colour. The effect is to burn any vector
detail, or annotations into the image. This command requires that
the image be displayed such that 1 image pixel corresponds to 1
screen pixel, which can be achieved using the ZOOM 1 IMAGE command
if required. Note that only the current screen area is affected -
to edit other areas, they have to be drawn on the screen first.
Valid only for bit LSR files which are open for edit.
.NOFILL

Format:  IMAGE BURN__IN
.LE;^^^*>IMAGE CLEAR\*
.FILL
Fills the interior of the image region with image background colour
in the current image.
The command may be aborted by CTRL/C if it is taking too long, or
has already completed enough of the operation.
Valid only for bit LSR files which are open for edit.
.NOFILL

Format:  IMAGE CLEAR
.LE ;^^^*>IMAGE CLOSE\*
.FILL
The image file associated with the current image number is closed. The
number becomes available for re-use.
.NOFILL

Format:  IMAGE CLOSE
.LE ;^^^*>IMAGE CONNECT\*
.FILL
Specifies whether image pixels are taken to be connecting when they
touch along their sides (default), or also when they touch diagonally.
This affects the commands REGION n IMAGE, and IMAGE SPECKLE.
.NOFILL

Format:  IMAGE CONNECT subcommand
.LIST 'o'
.LE ;^^^*>IMAGE CONNECT DIAGONAL\*
.FILL
Pixels are connected when they touch either by their sides, or
diagonally, so a pixel may be connected to all 8 neighbours.
.NOFILL

Format:  IMAGE CONNECT DIAGONAL
.LE ;^^^*>IMAGE CONNECT SIDE\*
.FILL
Pixels are connected when they touch by their sides, and not
diagonally, so a pixel may only be connected to 4 neighbours.
.NOFILL

Format:  IMAGE CONNECT SIDE
.END LIST
.LE;^^^*>IMAGE COPY\*
.FILL
Copies the interior of the current image region to a new position.
This command enters EDIT state, attaches the region to the cursor,
and allows it to be moved around until END is given.
ABANDON may be used to cancel the operation.
The original data is retained.
The command may be aborted by CTRL/C if it is taking too long, or
has already completed enough of the operation.
Valid only for bit LSR files which are open for edit.
.NOFILL

Format:  IMAGE COPY

Valid in state  READY
.LE ;^^^*>IMAGE CORNER\*
.FILL
Specifies the corner of the image of the first pixel in a DTI file.
This is normally taken from the file header. The corner must be one of
SW, NW, NE, and SE.
.NOFILL

Format:  IMAGE CORNER  corner

eg       IMAGE CORNER NW
.LE ;^^^*>IMAGE DIRECTION\*
.FILL
Specifies the direction of the first row/column of a DTI file with
respect to the image corner. 
This is normally taken from the file header. The direction must be one of
CLOCKWISE, ANTICLOCKWISE.
.NOFILL

Format:  IMAGE DIRECTION  direction

eg       IMAGE DIRECTION CLOCKWISE
.LE ;^^^*>IMAGE DTI\*
.FILL
Specifies the name of a DTI file to be opened. The file is subsequently
referred to by its number. The origin and pixelsize for the file are read from
the projection record in its header if one is present, otherwise they are set
to default values. The corner and direction are also taken from the file
header. All these may be subsequently altered using IMAGE ORIGIN, PIXELSIZE,
CORNER, and DIRECTION commands.  The pixels are assumed to be point type, so
the origin is at the centre of the bottom left pixel. Default filename is
LSL$DTI:---.DTI;0
.NOFILL

Format:  IMAGE DTI  filename
.LE;^^^*>IMAGE EDIT\*
.FILL
Specifies that the current image should be opened for edit.
This command should be given after IMAGE NUMBER, but before
specifying the image file. Only one image may be opened for edit,
and it must (at present) be an LSR type of image containing bit
data.
.BR;An appropriate licence is required to use this command (in addition
to the licence for the overall IMAGE command).
.BR;See also IMAGE READONLY.
.NOFILL

Format:  IMAGE EDIT
.LE;^^^*>IMAGE ERASE\*
.FILL
Enters PAINT state, and draws the current image brush in the image
background colour into the current image (which must be an editable
LSR file), at the cursor position. As the cursor is moved, further
copies of the brush are painted, until the END command is given.
It is possible to use the ZOOM command to display a different area
while painting is in progress.
The ABANDON command will end the operation and restore the image
to its state before IMAGE ERASE was given.
.NOFILL

Format:  IMAGE ERASE

Valid in state  READY
.LE;^^^*>IMAGE FILL\*
.FILL
Fills the interior of the image region with image foreground colour
in the current image.
The command may be aborted by CTRL/C if it is taking too long, or
has already completed enough of the operation.
Valid only for bit LSR files which are open for edit.
.NOFILL

Format:  IMAGE FILL
.LE ;^^^*>IMAGE FIRSTCOLOUR\*
.FILL
Specifies the colour index to be used for the first step when image
classification is in use. The default value is 0.
The IMAGE STEP command must be given first.
.NOFILL

Format:  IMAGE FIRSTCOLOUR index
.LE;^^^*>IMAGE FOREGROUND\*
.FILL
Specifies a colour value to be used as foreground in image editing
operations. This is the value that will be written by IMAGE FILL,
IMAGE PAINT, IMAGE BURN__IN, and IMAGE SPECKLE FILL commands.
It is also the colour of speckles for IMAGE SPECKLE CLEAR.
Since editing is only valid for LSR files containing bit data,
the value must be 0 or 1. The default is 1.
.NOFILL

Format:  IMAGE FOREGROUND integer
.LE ;^^^*>IMAGE LSI\*
.FIL
Specifies the name of an LSI file to be opened. The file is subsequently
referred to by its number. The origin and pixelsize for the file are set to
default values, but may be subsequently altered using IMAGE ORIGIN, and
PIXELSIZE commands. The pixels are taken to be area type, so the origin is at
the bottom left of the bottom left pixel. Default filename is LSL$LSI: 
.NOFILL

Format:  IMAGE LSI  filename
.LE ;^^^*>IMAGE LSR\*
.FILL
Specifies the name of an LSR file to be opened. 
The file is subsequently referred to by its number. The origin and
pixelsize for the file are read from its header but may be
subsequently altered using IMAGE ORIGIN and PIXELSIZE commands.
If the file has area type pixels, then the origin is taken to be the
bottom left of the bottom left pixel. If the pixels are point type, then
the origin is the centre of this pixel.
Default filename is LSL$LSR: 
.NOFILL

Format:  IMAGE LSR  filename
.LE;^^^*>IMAGE MOVE\*
.FILL
Moves the interior of the current image region to a new position.
This command enters EDIT state, attaches the region to the cursor,
and allows it to be moved around until END is given.
ABANDON may be used to cancel the operation.
The original data is set to the image background colour.
The command may be aborted by CTRL/C if it is taking too long, or
has already completed enough of the operation.
Valid only for bit LSR files which are open for edit.
.NOFILL

Format:  IMAGE MOVE

Valid in state  READY
.LE ;^^^*>IMAGE NUMBER\*
.FILL
Selects an image number to be used in subsequent IMAGE commands. The
IMAGE DTI or IMAGE LSI command is used to open an image file, which is
subsequently referred to by its number. The number must be in the range
1-8 for specific images, or 0 which is an 'unset' value and prevents the
use of some IMAGE commands until another number is chosen. 
.NOFILL

Format:  IMAGE NUMBER  n
.LE ;^^^*>IMAGE ORIGIN\*
.FILL
Specifies the location in absolute units of the SW corner of the
current image file. Default is 0.0 0.0 for a DTI file, or half the
pixel size in each axis for an LSI file.
.NOFILL

Format:  IMAGE ORIGIN  x y
.LE;^^^*>IMAGE PAINT\*
.FILL
Enters PAINT state, and draws the current image brush in the image
foreground colour into the current image (which must be an editable
LSR file), at the cursor position. As the cursor is moved, further
copies of the brush are painted, until the END command is given.
It is possible to use the ZOOM command to display a different area
while painting is in progress.
The ABANDON command will end the operation and restore the image
to its state before IMAGE PAINT was given.
.NOFILL

Format:  IMAGE PAINT

Valid in state  READY
.LE ;^^^*>IMAGE PIXELSIZE\*
.FILL
Specifies the size of each pixel in the current image in IFF units.
If ysize is omitted, it is assumed to be the same as xsize.
The default is IMAGE PIXELSIZE 1 1 for a DTI file, or the value read
from the file header for an LSI file.
.NOFILL

Format:  IMAGE PIXELSIZE  xsize [ysize]
.LE ;^^^*>IMAGE RANGE\*
.FILL
Sets the range of values in the current image to be used when image
classification is enabled (see IMAGE STEP). Values outside the range
will be drawn in colour 0. The range is initially set to the minimum and
maximum values in the file by the IMAGE DTI command.
.NOFILL

Format:  IMAGE RANGE lower upper
.LE;^^^*>IMAGE READONLY\*
.FILL
Specifies that the current image should be opened for reading only.
This command should be given after IMAGE NUMBER, but before specifying
the image file. It is the opposite of IMAGE EDIT, and is the default
is neither command is specified.
.NOFILL

Format:  IMAGE READONLY
.LE;^^^*>IMAGE RECOVER\*
.FILL
Restores the current image to its state before the last IMAGE FILL,
CLEAR, MOVE, COPY, PAINT, ERASE, BURN__IN, or SPECKLE command.
The command IMAGE RECOVER CLEAR may be used to clear out the recover
information, reclaiming the memory used, and preventing accidental
recovery of an edit that you know is to be permanent.
.NOFILL

Format:  IMAGE RECOVER
or       IMAGE RECOVER CLEAR
.LE;^^^*>IMAGE REGION\*
.FILL
Specifies a LITES2 region to be used for IMAGE FILL, IMAGE CLEAR,
IMAGE MOVE, IMAGE COPY, and IMAGE SPECKLE commands. The region need
not exist when the command is given. 0 means that no region is
selected.
.NOFILL

Format:  IMAGE REGION integer
.LE ;^^^*>IMAGE SEA\*
.FILL
Specifies a colour index to be used for zero values in the current image.
Exactly equivalent to the command IMAGE BAND index 0.0
.BL
The optional label argument is used to annotate the corresponding band
in output from the SHOW IMAGE and DRAW LEGEND command. 
.NOFILL

Format:  IMAGE SEA index [label]
.LE ;^^^*>IMAGE SELECT\*
.FILL
Specifies one or more images from which the value of the $IMAGEVALUE,
$IMAGEGRADIENT, and $IMAGEASPECT system
variables is taken. This is particularly useful when several images overlap.
The selected images need not be currently displayed. If the range of image
numbers is omitted, then the image selections become null, and another
IMAGE SELECT command must be given before the variables can be used again.
.NOFILL

Format:  IMAGE SELECT  [range]

eg       IMAGE SELECT 3
or       IMAGE SELECT 2,5-7
.LE ;^^^*>IMAGE SETUP\*
.FILL
Causes LITES2 to enter SETUP state, and to prompt for the user to digitise
the 4 corner points of the first map with reference to a raster image on the
screen using START commands. WINDOW, DRAW, and ZOOM commands may be used
to display the desired area on the screen. Once the setup is completed,
LITES2 will return to READY state and subsequent drawing will distort the
vector picture so as to match up the corner points with the raster image.
ABANDON may be used at any time in SETUP state to abort the setup.
Invoking IMAGE SETUP followed by ABANDON will cancel any existing setup
and return to default behaviour. See chapter on Display Overlays and
Raster Images.

.NOFILL

Format:  IMAGE SETUP

Valid in state  READY
.LE;^^^*>IMAGE SPECKLE\*
.FILL
Scans the interior of the current image region removing speckles
(areas of pixels of a given size or less). The command may be aborted
by CTRL/C if it is taking too long, or has already removed the
intended speckles.
Valid only for bit LSR files which are open for edit.
.NOFILL

Format:  IMAGE SPECKLE subcommand

Valid in state  READY
.LIST 'o'
.LE;^^^*>IMAGE SPECKLE CLEAR\*
.FILL
Replaces speckles of the current image foreground colour
with the image background colour.
By default the size is specified in IFF units (unless a UNITS command
has been given).
.NOFILL

Format:  IMAGE SPECKLE CLEAR size
.LE;^^^*>IMAGE SPECKLE FILL\*
.FILL
Replaces speckles of the current image background colour
with the image foreground colour.
By default the size is specified in IFF units (unless a UNITS command
has been given).
.NOFILL

Format:  IMAGE SPECKLE FILL size
.END LIST
.LE ;^^^*>IMAGE STEP\*
.FILL
Enables image classification for the current image and sets the step
size to the value given (which must be greater than 0.0).
If classification was not already enabled, then all bands are cancelled
and first colour is set to 0.
.BR;The colour index used for a particular value is given by:
.LITERAL

   index = (value - low_end_of_range) / step + first_colour

.END LITERAL
.NOFILL

Format:  IMAGE STEP step
.LE;^^^*>IMAGE SUBSAMPLE\*
.FILL
Specifies how subsampling of the current image should be performed,
if the image is drawn at a scale such that 1 display pixel
corresponds to more than one image pixel.
.NOFILL

Format:  IMAGE SUBSAMPLE  subcommand
.LIST 'o'
.LE;^^^*>IMAGE SUBSAMPLE FAST\*
.FILL
Specifies fast subsampling (default).
For DTI and LSR files, this means that rows and columns of the image
will be missed out when drawing. LSI files are never subsampled -
instead reduced views are used if they exist in the file.
.NOFILL

Format:  IMAGE SUBSAMPLE FAST
.LE;^^^*>IMAGE SUBSAMPLE PRIORITY\*
.FILL
Allows a colour value to be specified which takes priority
if it occurs within the block of image pixels which correspond
to a single display pixel. This can prevent break up of subsampled
images which can occur with IMAGE SUBSAMPLE FAST.
The command is only valid for LSR type images containing bit data,
and the priority value must therefore be 0 or 1.
.NOFILL

Format:  IMAGE SUBSAMPLE PRIORITY integer
.END LIST
.END LIST
.HL 3 ^^^*>DISPLAY\*
.FILL
Specifies details of displays (additional windows on the display
screen).
.BL
This command is only available with some versions of LITES2, and the 
user should refer to the hardware dependent reference manual for the
possibilities available with his hardware. Displays 1 and 2 (primary
and secondary) are created automatically when LITES2 moves from INITIAL
to READY state - other displays are created by the DISPLAY CREATE command.
.NOFILL

Format:  DISPLAY  subcommand

Valid in all states
.LIST '*'
.LE ;^^^*>DISPLAY BORDER\*
.FILL
Specifies whether the display is to have a border. The value must be 1
(with border, default), or 0 (no border). 
.BR;This command must be given before DISPLAY CREATE.
.NOFILL

Format:  DISPLAY BORDER n
.LE ;^^^*>DISPLAY COLOURS\*
.FILL
Sets the number of colours to be used for the display (including the
background colour). This command must be given before DISPLAY CREATE.
If the argument is omitted, then the default number of colours (dependent
on the particular LITES2 version) is used.
.NOFILL

Format:  DISPLAY COLOURS [n]
.LE ;^^^*>DISPLAY CONCEAL\*
.FILL
Makes the selected display invisible (opposite of DISPLAY REVEAL).
.NOFILL

Format:  DISPLAY CONCEAL
.LE ;^^^*>DISPLAY CREATE\*
.FILL
The selected display is created using the attributes which have been
set. The display will appear on the screen, unless in INITIAL state,
in which case if will appear after the maps have been read in.
.NOFILL

Format:  DISPLAY CREATE
.LE;^^^*>DISPLAY CURSOR\*
.FILL
Specifies whether displays 3 or 4 are to have a crosshair cursor.
The value must be 1 (with cursor), or 0 (no cursor, default). 
This command may be given at any time.
The command is intended primarily for use in conjunction with
DRAW IMAGE, after which the coordinate system in the display
will correspond to the image in the main display, enabling
accurate pointing to image pixels.
At all other times, the coordinate system in the display will
correspond to the entire LITES2 working area.
.NOFILL

Format:  DISPLAY CURSOR n
.LE ;^^^*>DISPLAY DELETE\*
.FILL
Deletes a display. The display will disappear from the screen, and any
definitions of overlays in it will be lost. The attributes remain set
and the display may be re-created using DISPLAY CREATE.
.NOFILL

Format:  DISPLAY DELETE
.LE ;^^^*>DISPLAY ERASE\*
.FILL
Erases the contents of a display.
.NOFILL

Format:  DISPLAY ERASE
.LE ;^^^*>DISPLAY LIMITS\*
.FILL
Sets the coordinate range which will be used to draw into the current
display. If the limits do not define an area with the same aspect ratio
as the display, then part of the display area will not be used. If this
command is not given, or the values are omitted, then the default limits
(the same as the LITES2 working area) are used. The display limits may
be changed at any time. 
.NOFILL

Format:  DISPLAY LIMITS  [xmin xmax ymin ymax]
.LE ;^^^*>DISPLAY NUMBER\*
.FILL
Selects a display number to be used in subsequent DISPLAY commands. The
number must be in the range 1 up to a limit dependent on the version of
LITES2 for specific displays, or 0 which is an 'unset' value and
prevents the use of some DISPLAY commands until another number is
chosen. Display numbers 1 and 2 refer to the primary and secondary
workstations. Only some of the the display commands are valid for these.
.NOFILL

Format:  DISPLAY NUMBER n
.LE ;^^^*>DISPLAY OVERLAY\*
.FILL
Allows the definition of display overlays consisting of a subset of the pixel
planes available on the display. Sets up display overlays using the graphics
planes. Overlays in the primary or secondary displays are created using the
WORKSTATION OVERLAY command (qv). Once defined, the OVERLAY command may be used
to specify how the overlay appears on the display. The bit planes used in an
overlay must be consecutive, and a single plane may only be used in one
overlay. The overlay number is used to identify the overlay using OVERLAY
NUMBER commands, and must be an integer in the range 1-8. The offset argument
specifies the first bit plane to be used (the first plane is 0). If omitted,
the first available value allowing the requested number of planes is used.
.NOFILL

Format:  DISPLAY OVERLAY overlay planes [offset]

eg       DISPLAY OVERLAY 2 4
         Defines overlay number 2 in the current display to
         consist of 4 bit planes
.LE ;^^^*>DISPLAY POP\*
.FILL
Pop the selected display to the front (if it is obscured by other
displays).
.NOFILL

Format:  DISPLAY POP
.LE ;^^^*>DISPLAY POSITION\*
.FILL
Specify the initial position of the display on the screen. The position
of the bottom left hand corner is given as a fraction of the screen size,
in the range 0.0 to 1.0.
.BR;This command must be given before DISPLAY CREATE.
.NOFILL

Format:  DISPLAY POSITION xpos ypos
.LE ;^^^*>DISPLAY PUSH\*
.FILL
Push the selected display to the back (behind any other displays).
.NOFILL

Format:  DISPLAY PUSH
.LE ;^^^*>DISPLAY REVEAL\*
.FILL
Makes the selected display visible (opposite of DISPLAY CONCEAL).
.NOFILL

Format:  DISPLAY REVEAL
.LE ;^^^*>DISPLAY SIZE\*
.FILL
Specify the size of the display on the screen. The size is given as a
fraction of the screen size, in the range 0.0 to 1.0. 
.BR;This command must be given before DISPLAY CREATE.
.NOFILL

Format:  DISPLAY SIZE xsize ysize
.LE ;^^^*>DISPLAY TITLE\*
.FILL
Specifies a title to appear at the top of the display (providing that
it has a border). If the title is omitted, then the display will have
no title. If the title is to have leading spaces, then it must be
enclosed in double quotation marks. The default titles are "Graphics
Window" for display 1, "Secondary Window" for display 2, and no title
for any other displays.
.BR;This command must be given before DISPLAY CREATE.
.NOFILL

Format:  DISPLAY TITLE [string]
.END LIST
.HL 3 ^^^*>PLOT\*
.FILL
Controls hardcopy plotting.
.BL
This command is only available with some versions of LITES2, and the 
user should refer to the hardware dependent reference manual for the
possibilities available with his hardware.
.NOFILL

Format:  PLOT  subcommand

Valid in all states
.LIST '*'
.LE ;^^^*>PLOT ADVANCE\*
.FILL
Performs a clear operation on the plot device. Depending on the plotter in
use, this will advance to a new sheet of paper, or load new film etc.
.NOFILL

Format:  PLOT ADVANCE
.LE ;^^^*>PLOT ANNOTATION\*
.FILL
Specifies whether sizes set using ANNOTATION SIZE are measured in mm
on the plot (PLOT ANNOTATION PLOT, default), or are plotted in the same
proportion to the rest of the picture as they would have been on the screen
(PLOT ANNOTATION SCREEN).
.NOFILL

Format:  PLOT ANNOTATION PLOT
or       PLOT ANNOTATION SCREEN
.LE ;^^^*>PLOT AUTOSCALE\*
.FILL
Specifies that IFF and image data drawn into the plot is to be scaled to
fit the available plotting area. This is the default. See PLOT SCALE and
PLOT RATIO for details of setting an absolute plot scale.
.NOFILL

Format:  PLOT AUTOSCALE
.LE ;^^^*>PLOT CLIP\*
.FILL
Controls whether annotations sent to the plotter are clipped at the
boundary of the drawing area. Specify 1 to clip (default), or 0 not to
clip. The picture from the primary or secondary display is always clipped.
.NOFILL

Format:  PLOT CLIP n
.LE ;^^^*>PLOT CLOSE\*
.FILL
Finishes off a plot and closes the connection to the plot device.
.NOFILL

Format:  PLOT CLOSE
.LE ;^^^*>PLOT ESCAPE\*
.FILL
Used to communicate a device dependent function to the particular plot
device in use. See the Plotters User Guide in the PLOTTING package
documentation for details of what functions are available. For example...
.P 0
Using GKSCAL5800SHR or GKSVRSVGSSHR - escid = 1 uses a drawing mode
in which the things drawn subsequently are opaque (things drawn already
do not show through). escid = 2 uses a drawing mode in which everything
drawn is superimposed (the inks are mixed). If necessary, then draw the
picture with some selections in force, then change the selections, give the
PLOT ESCAPE command, and draw again.
.NOFILL

Format:  PLOT ESCAPE escid
.LE ;^^^*>PLOT HWTEXT
.FILL
Attempt to use hardware facilities to plot text (rather than using
the character shapes from the TRI file) if the FRT includes a hardware bit
in the flags entry for a text feature code. See the Plotters User Guide
for details of whether a device supports hardware text.
.BL
Attempts to use hardware text on a device which does not support it
may result in text not appearing at all.
.BL
Hardware text is enabled if the integer is missing or 1, disabled if 0 and by
default.
.NOFILL

Format:  PLOT HWTEXT [integer]
.LE ;^^^*>PLOT LIMITS\*
.FILL
This command is not implemented - the limits for the display are used.
.BL
Sets the coordinate range for the plot when the various annotating
DRAW commands are used. 
If the limits do not define an area with the same aspect ratio
as the plot area, then part of the plot area will not be used. If this
command is not given, or the values are omitted, then the default limits
(the same as the LITES2 working area) are used. The plot limits may
be changed at any time. 
.NOFILL

Format:  PLOT LIMITS  [xmin xmax ymin ymax]
.LE ;^^^*>PLOT LOAD\*
.FILL
Loads the specified GKS shareable image for hardcopy plotting. This
command must be given before a plot can be started with PLOT OPEN.
.BL
GKS shareable images for different plot devices are supplied by Laser-Scan,
and will normally reside in the directory LSL$PUBLIC__ROOT:[PLOTTING.EXE],
which is included in the LSL$EXE search list, with names like GKSxyzSHR.EXE
where xyz is some indication of the plotter device.
.BL
The specified filename may be either a logical name (which must translate
to a device, directory, and filename, the file extension of .EXE being
assumed), or an actual file name (in which case a default of LSL$EXE:---.EXE
is applied).
.BL
For example, to plot on a Laserplot, one might give the command
PLOT LOAD GKSLPSHR.
.NOFILL

Format:  PLOT LOAD filename
.LE ;^^^*>PLOT OFF\*
.FILL
Causes output from drawing commands to revert to its normal destination,
rather than the plotter.
.NOFILL

Format:  PLOT OFF
.LE ;^^^*>PLOT ON\*
.FILL
Directs any output from drawing commands to the plotter.
.NOFILL

Format:  PLOT ON
.LE ;^^^*>PLOT OPEN\*
.FILL
Opens the plot device and begins a plot. Use PLOT ON and PLOT OFF commands
to direct drawing output to the plotter. The plot is terminated by a
PLOT CLOSE command.
.NOFILL

Format:  PLOT OPEN
.LE ;^^^*>PLOT ORIGIN\*
.FILL
Set the origin of the drawing area. The position of the drawing area
specified using PLOT POSITION and PLOT SIZE commands is offset by the
specified amount in mm.
.NOFILL

Format:  PLOT ORIGIN xoff yoff
.LE ;^^^*>PLOT PIXELS\*
.FILL
Sets the maximum number of image pixels in either x or y to be drawn into
the plotting area when plotting images. Setting a low value will force
subsampled views to be drawn, which might save time, or prevent pixels
far too small for the plotter from being drawn. The default number depends
on the particular plotter in use. The number is set to
this default by the PLOT OPEN command, so any PLOT PIXELS commands
should come after PLOT OPEN.
.NOFILL

Format:  PLOT PIXELS integer
.LE ;^^^*>PLOT POSITION\*
.FILL
Set the plotting position within the drawing area. Position 0 is bottom
left, 1 is centre left, 2 is top left, 3 is bottom centre, and so on up
to 8 which is top right. The default is position 0.
.NOFILL

Format:  PLOT POSITION n
.LE ;^^^*>PLOT RATIO\*
.FILL
Specifies the ratio between the scale of the plot and the true scale of
the data, thus the command PLOT RATIO 1.0 will produce a plot at its
true scale (provided that this has been set correctly by SCALE commands,
or by default).
.NOFILL

Format:  PLOT RATIO real
.LE ;^^^*>PLOT SCALE\*
.FILL
Specifies the source scale of the plot to be produced. For this to work,
the IFF data must have a source scale defined in its map descriptor.
For example, if a map is a 1:1250, then the command PLOT SCALE 2500
will cause it to be plotted at half the size.
.NOFILL

Format:  PLOT SCALE real
.LE ;^^^*>PLOT SEPARATOR\*
.FILL
Used to specify a PLOT ESCAPE function which is performed automatically
when the priority changes and drawing sorted by priority is being used.
It is used on plotters which by default draw transparently to ensure
that each priority layer is drawn opaque. The default value (which is
reset by PLOT LOAD) is 0, which means that no separator will be used.
The value 1 is usually required for electrostatic plotters.
See the PLOT ESCAPE command and the Plotters User Guide in the PLOTTING
package documentation for details of what functions are available.
.NOFILL

Format:  PLOT SEPARATOR ESCAPE escid
.LE ;^^^*>PLOT SIZE\*
.FILL
Set the size of the plotting area in mm. The default is the full size
of the available area on the plotter. The size is set to this default
by the PLOT OPEN command, so any PLOT SIZE commands should come after
PLOT OPEN.
.NOFILL

Format:  PLOT SIZE xsize ysize
.LE ;^^^*>PLOT TYPE\*
.FILL
Sets the workstation type for use in future PLOT OPEN commands. Appropriate
numbers (if required) are given in the section of the FPP Plotters User
Guide for the plot device concerned.
.NOFILL

Format:  PLOT TYPE n
.END LIST
.HL 3 ^^^*>WARP\*
.FILL
Control transformation (warping) of raster images.
.NOFILL
A typical sequence of commands might be:
WARP TRANSFORM - specify type of transformation
WARP CLEAR - clear previously specified points if required
WARP POINT IMAGE/MAP - specify points (as many as required)
WARP FIT - calculate a fit
WARP DELETE/REPLACE - modify points if required, or add more
WARP FIT - fit again if required
WARP ON - turn on warping
WARP MAP/IMAGE - specify whether to warp the vectors or the image
Use drawing commands to view the warped picture.

Format:  WARP  subcommand

Valid in states  INITIAL READY LINE CIRCLE TEXT SYMBOL
.LIST '*'
.LE ;^^^*>WARP CLEAR\*
.FILL
Delete all warp points.
Any warp transformation in use, or already fitted, remains active.
Use WARP OFF to turn off an active transformation.
.NOFILL
Format:  WARP CLEAR
.LE ;^^^*>WARP DELETE\*
.FILL
Deletes a warp point.
The point number must be between 1 and the number of points digitised.
After this command, higher numbered points are re-numbered to fill
the gap.
.NOFILL

Format:  WARP DELETE n
.LE ;^^^*>WARP FIT\*
.FILL
Calculate a fit to the current set of warp points.
The type of fit is specified by the WARP TRANSFORM command.
The goodness of the fit may be shown by the SHOW WARP command, and
also appears in the various $WARP... system variables.
Once fitted, the warp may be activated using the WARP ON command.
.NOFILL

Format:  WARP FIT
.LE ;^^^*>WARP IMAGE\*
.FILL
Warp the raster image to fit the vector data.
This can be slower than WARP MAP. Because it causes the image to be
resampled, a side-effect is that the image may be drawn at arbitrary
zoom factors.
.NOFILL

Format:  WARP IMAGE
.LE ;^^^*>WARP MAP\*
.FILL
Warp the vector data to fit the raster image (default).
This can be faster than WARP IMAGE. As when not warping at all, the
raster image can only be zoomed to multiples of its original pixel
size.
.NOFILL

Format:  WARP MAP
.LE ;^^^*>WARP OFF\*
.FILL
Turn off warping.
The warp that was active may be turned back on using WARP ON.
.NOFILL

Format:  WARP OFF
.LE ;^^^*>WARP ON\*
.FILL
Turn on warping.
If a new warp has been calculated using WARP FIT, then this is activated,
otherwise the previously active warp is activated.
.NOFILL

Format:  WARP ON
.LE ;^^^*>WARP POINT\*
.FILL
Specify a data point for fitting a warp.
If the coordinates are omitted, the current cursor position is used.
Coordinates are specified in IFF units and identify a position either
in the vector data (MAP) or the raster data (IMAGE).
IMAGE and MAP points may be specified in any order - when a fit is
performed, the first IMAGE point will map to the first MAP point etc.
.NOFILL

Format:  WARP POINT IMAGE  [x y]
or       WARP POINT MAP    [x y]
.LE ;^^^*>WARP REPLACE\*
.FILL
Replace a previously specified warp data point.
The point number must be between 1 and the number of points digitised.
If the coordinates are omitted, the current cursor position is used.
Coordinates are specified in IFF units and identify a position either
in the vector data (MAP) or the raster data (IMAGE).
.NOFILL

Format:  WARP REPLACE IMAGE  n [x y]
or       WARP REPLACE MAP    n [x y]
.LE ;^^^*>WARP TRANSFORM\*
.FILL
Specifies the type of warp transformation to be used.
See the description of the SETUP TRANSFORM for details of the formulae
used. The LINEAR transformation is just a shift if one point is supplied,
or a shift plus a rotation with two points.
.NOFILL

Format:  WARP TRANSFORM type

         where type = AFFINE (default)
                    = EXTENDED
                    = LINEAR
                    = ORTHOGONAL
                    = PROJECTIVE
.END LIST
.FILL
