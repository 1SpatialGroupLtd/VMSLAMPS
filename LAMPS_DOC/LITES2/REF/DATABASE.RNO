.!
.! DATABASE.RNO
.! This part of the LITES2 Reference manual talks about
.! the user routine that interfaces to a relational database using SQL
.!
.REQUIRE "REF.HD"
.!
.INDEX Database User Routine
.!
.TP 20
.HL 1 ^^^*Database User Routine\*

.P 0
A program is available that allows a LITES2 user to interactively access a
relational database. This program is in the form of a user routine and is
accessed via the ROUTINE n command. For details of the construction of user
routines see the relevant chapter in this guide.

.P 0
The purpose of the program is to allow graphical features  held in IFF format
to be linked to the attributes of those features held in a relational database.
The database used to hold the attributes may be any proprietary relational DBMS
that supports a Fortran programmatic interface using embedded SQL. Examples are
DEC VMS/Rdb, ORACLE and INGRES.

.P 0
A single version of the program will communicate with a single named database.
Multiple versions of the program linked to LITES2 with different ROUTINE
numbers in the range 101-105 could access more than one database. 

.P 0
The program is prepared by Laser-Scan to interface to the appropriate DBMS
and may be further customised on site to accomodate specific database
structures.


.TP 15
.!
.INDEX Interface functions
.HL 2 ^*Interface functions - general.\*
.!
The calls to the interface routine are described by functional group. There are
3 major functional groups ; those dealing with standard "housekeeping" function
such as connecting to the database, those that process user supplied SQL
commands dynamically, and those that perform database structure specific
actions such as listing feature attributes.

.P 0
The interface user routine is invoked by the following command which may be
given by any valid command input method to LITES2 such as from the keyboard 
or incorporated in a LITES2 macro.

.P 5
^*ROUTINE 'routine' 'action' [arguments]\*

.P 0
Where 'routine' is an integer number between 101 105 , and 'action' is an
integer number indicating the required function as described below. The
following arguments are dependent on the action number given.

.P 0
The normal sequence of actions is to "logon" to the database with an Action 2
and then build SQL commands with Action 10, derive results with Actions 12
through 19 as appropriate, close the transaction with an Action 5, and when all
the database inquires have been made, exit from the database with an Action 3.
Action 1 - Help - may be invoked at any time.


.TP 15
.!
.HL 3 ^^^*Standard Interface Functions\*
These interface functions are invoked with the action numbers 1 to 9.
They include various functions to control database access.

.LM +5
.LIST "*"
.LE; ^*Action 1\* - Help
.P 5
Arguments :  None

.P 0
A summary of the available actions is output to the terminal as several pages
of information. The user should press the RETURN key repeatedly to page 
through the listing. This action may be invoked at any stage.

.P 5
Example:  ROUTINE 101 1
.BL


.TP 12
.LE; ^*Action 2\* - logon/connect to database

.P 5
Arguments : 'database identifier'

.P 0
The database identifier is a character string containing the implementation
specific database command required to initiate communication with a database.

.P 0
This routine call would normally be in a macro which prompted for and assembled
the necessary command string.

.P 5
Example : ROUTINE 101 2 NAME/PASSWORD@D:NODENAME
.BL


.TP 6
.LE; ^*Action 3\* - logoff/disconnect from database

.P 5
Arguments : EXIT

.P 0
The link to the database opened by an action 2 is removed. The argument EXIT is
required. The current transaction is automatically terminated with a 
"Rollback". If a "rollback" is not required an explicit "commit" should be 
invoked with an action 5 described below.
.P 0
The only valid actions that may subsequently be invoked are 1 - Help, and 2 -
connect. 

.P 5
Example : ROUTINE 101 3 EXIT
.BL



.TP 6
.LE; ^*Action 4\* - define transaction type

.P 5
Arguments : READ WRITE or READ ONLY

.P 0
The argument to this action defines the ability of subsequent SQL commands
to write to the database.

.P 5
Example : ROUTINE 101 4 READ WRITE
.BL


.TP 6
.LE; ^*Action 5\* - end a transaction

.P 5
Arguments : ROLLBACK or COMMIT

.P 0
A database transaction is ended with this action. The previous transaction may
either be confirmed with a 'COMMIT' argument or ignored with a 'ROLLBACK' 
argument.

.P 0
All open database cursors created by action number 10 are closed by this
action. ( LITES2 variable DB__ID is set to 0).

.P 5
Example : ROUTINE 101 5 COMMIT
.BL


.TP 10
.LE; ^*Action 6\* - reserved

.P 5
Arguments : None

.P 0
This action is reserved for Laser-Scan use.

.P 5
Example :
.BL


.TP 10
.LE; ^*Action 7\* - switch on/off error messages generated by the DBMS.

.P 5
Arguments : ENABLE or DISABLE

.P 0
This action enables or disables the output of messages from the database
management system being accessed. By default the messages are enabled  when
connection to the database is made with action 2.

.P 5
Example : ROUTINE 101 7 DISABLE



.TP 10
.LE; ^*Action 8\* - reserved

.P 5
Arguments : None

.P 0
This action is reserved for Laser-Scan use.

.P 5
Example :
.BL


.TP 10
.LE; ^*Action 9\* - reserved

.P 5
Arguments : None

.P 0
This action is reserved for Laser-Scan use.

.P 5
Example :
.BL

.LM -5
.TP 10
.!
.HL 3 ^^^*Dynamic Interface Functions\*
These interface functions are invoked with the action numbers 10 to 29. They
include various functions to dynamically execute SQL commands of both SELECT
and non-SELECT forms.

.LM +5



.TP 10
.LE; ^*Action 10\* - assembles and executes an SQL statement.

.P 5
Arguments : 'command string' [/] [;]

.P 0
This action is used to build and then execute an SQL statement. A SQL command
string can be assembled by repeated actions of this number. The maximum input
to LITES2 is 255 characters and the maximum SQL command that can be assembled
is 2048 characters. 
.P 0
When a "/" or ";" command terminating character is read then the SQL command is
executed. The terminating character may be in any column and all characters
after it are ignored. A non-select command is executed immediately. A SELECT
command is used to define a cursor and the cursor ID number is returned as
LITES2 variable DB__ID. This is used in actions 12-15,23-25. A maximum of 5
cursors can be defined at once. Cursors are closed by an action 5 to end a
transaction.

.P 5
Example : ROUTINE 101 10 SELECT VAR1 FROM TABLE1;
.BL



.TP 10
.LE; ^*Action 11\* - assembles and executes an SQL statement from a file.

.P 5
Arguments : 'filename'

.P 0
This action is similar to action 10 in effect but reads the SQL command from a
named file. By default the missing elements of the filename are taken from
LSL$SQL:SQL.SQL;0

.P 5
Example : ROUTINE 101 11 MYFILE.SQL
.BL



.TP 10
.LE; ^*Action 12\* - generates a list of unique feature IDs

.P 5
Arguments : 'variable name' 'cursor ID'

.P 0
This action uses the cursor defined with the given  cursor ID to generate a
list ( held internally ) of selected feature IDs that is applied to all
subsequent LITES2 feature selection processes (eg SEARCH ALL, DRAW). The given
LITES2 integer variable is set to the number of features in  the database found
to satisfy the SQL selection criteria.

.P 5
Example : ROUTINE 101 12 DB__INT__VAR1 'DB__ID'
.BL



.TP 10
.LE; ^*Action 13\* - returns an integer value

.P 5
Arguments : 'variable name' 'cursor ID'

.P 0
This action uses the cursor defined with the given  cursor ID to set the given
LITES2 integer variable to the value found to satisfy the SQL  selection
criteria.

.P 5
Example : ROUTINE 101 13 DB__INT__VAL1 'DB__ID'
.BL



.TP 10
.LE; ^*Action 14\* - returns a real value

.P 5
Arguments : 'variable name' 'cursor ID'

.P 0
This action uses the cursor defined with the given  cursor ID to set the given
LITES2 real variable to the value found to satisfy the SQL  selection criteria.

.P 5
Example : ROUTINE 101 14 DB__REAL__VAL1 'DB__ID'
.BL



.TP 10
.LE; ^*Action 15\* - returns a character value

.P 5
Arguments : 'variable name' 'cursor ID'

.P 0
This action uses the cursor defined with the given  cursor ID to set the given
LITES2 character variable to the value found to satisfy the SQL  selection
criteria.

.P 5
Example : ROUTINE 101 15 DB__CHAR__VAL1 'DB__ID'
.BL


.TP 10
.LE; ^*Action 16-21\* - reserved

.P 5
Arguments : None

.P 0
These actions are reserved for Laser-Scan use.

.P 5
Example :
.BL


.TP 10
.LE; ^*Action 22\* - cancel list of feature IDs

.P 5
Arguments : None                      

.P 0
This action cancels the list of feature IDs held for selection purposes as
generated by action 12.

.P 5
Example : ROUTINE 101 22
.BL





.TP 10
.LE; ^*Action 23\* - returns 2 integer values

.P 5
Arguments : 'variable name1''variable name2' 'cursor ID'

.P 0
This action uses the cursor defined with the given  cursor ID to set the given
LITES2 integer variables to the values found to satisfy the SQL  selection
criteria.

.P 5
Example : ROUTINE 101 23 DB__INT__VAL1 DB__INT__VAL2 'DB__ID'
.BL



.TP 10
.LE; ^*Action 24\* - returns 2  real values

.P 5
Arguments : 'variable name1''variable name2' 'cursor ID'

.P 0
This action uses the cursor defined with the given  cursor ID to set the given
LITES2 real variables to the values found to satisfy the SQL  selection
criteria.

.P 5
Example : ROUTINE 101 24 DB__REAL__VAL1 DB__REAL__VAL2 'DB__ID'
.BL



.TP 10
.LE; ^*Action 25\* - returns 2 character values

.P 5
Arguments : 'variable name1''variable name2' 'cursor ID'

.P 0
This action uses the cursor defined with the given  cursor ID to set the given
LITES2 character variables to the values found to satisfy the SQL  selection
criteria.

.P 5
Example : ROUTINE 101 25 DB__CHAR__VAL1 DB__CHAR__VAL2 'DB__ID'
.BL


.TP 10
.LE; ^*Action 26-29\* - reserved

.P 5
Arguments : None

.P 0
These actions are reserved for Laser-Scan use.

.P 5
Example :
.BL


.TP 6
.LM -5
.!
.HL 3 ^^^*Special Interface Functions\*
These interface functions are invoked with the action numbers 30 to 32 They
include special functions to examine and edit attributes. Additional special
functions should be appended to this group of actions.

.LM +5



.TP 10
.LE; ^*Action 30\* - display attributes of found feature

.P 5
Arguments : 'attribute type'

.P 0
This action lists in a pop-up screen form all the known attributes of the
currently found feature. A particular category of attributes is given in the
argument.

.P 5
Example : ROUTINE 101 30 BUILD
.BL



.TP 10
.LE; ^*Action 31\* - display and edit attributes of found feature

.P 5
Arguments : 'attribute type'

.P 0
This action lists, in a pop-up screen form, all the known attributes of the
currently found feature. A particular category of attributes is given in the
argument. The attribute values may be edited interactively.

.P 5
Example : ROUTINE 101 31 BUILD
.BL



.TP 10
.LE; ^*Action 32\* - display a form to get a value.

.P 5
Arguments : '"prompt string"' 'variable name' 'datatype'

.P 0
This action creates a pop-up screen form to prompt for a value from the
operator. The given LITES2 variable is set to the entered value. The datatypes
are I - integer, R - real, and C - character. The prompt string must be in
quotes.

.P 5
Example : ROUTINE 101 32 "Enter new value : " DB__INT__VAL I
.BL

.END LIST
.TP 6
.LM -5
.!
.HL 3 ^^^*LITES2 Variables\*
Various predefined LITES2 variables are required for the successful operation
of these routines:
.LM +5

.TP 8
.LIST "*"
.LE; DB__STATUS - is set by every action and must be one of the following :
.BL
.LM +20
.BR; 0 for success
.BR; 2 for failure
.BR; 4 for warning
.BR; 6 for end of data.
.LM -20
.BL

.TP 10
.LE; DB__ID - is set by actions 10 and 11 as the cursor ID . Valid values are 0
to 5 . 

.LE; Sufficient variables of the correct datatypes are required by actions 12-15
and 23-25 to hold the returned values. The names of these variables are user
definable.

.LE; DB_NULL1 and DB_NULL2 are a pair of LITES2 integer variables required to 
hold the null indicators for the 2 variables set by actions 12-15,23-25.

.END list
.LM -5
.BL 2
