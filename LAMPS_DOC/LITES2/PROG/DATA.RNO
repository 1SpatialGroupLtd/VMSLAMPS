.!
.! DATA.RNO
.! This part of the LITES2 Programmer's Guide talks about
.! the pack data structure and how to reference it
.!

.REQUIRE "PROG.HD"

.HL 1 ^^^&Data Structures\&
.INDEX Data Structures
.INDEX Pack
.INDEX Sector
LITES2 maintains, in memory, a data structure known as the ^&sector list\&,
which permits rapid access to features close to any particular point on the
map. This structure is used by the 'find' type command (FIND, RECOVER, SEARCH),
and for window drawing, so that a search of the entire IFF file(s) is not 
necessary.

.P 0
The working area, bounded by array LIMITS in COMMON /MASTER/, is divided into 
a number of rectangular ^&sectors\& (user settable, up to a preset maximum of 
200). Sectors are numbered starting at 1 in the bottom left corner, increasing
across then up, An entry is made in the sector list each time a feature enters 
a sector. For line type features, there will be several entries for the same 
sector if the feature reenters it several times.

.P 0
The sector list is organised in such a way that rapid access is possible to 
all entries in a given sector (these are more or less contiguous in memory),
and to all the entries for a given feature (by pointers).

.P 0
The entry in the sector list is known as a ^&pack\&. The sector list itself is 
accessed by a number of low level routines, which transfer packs between an 
internal packed format (20 bytes), and an array of 10 longwords (40 bytes) 
used by higher level routines. The layout of the longword array is defined in
PARAMETER /PACK/ which sets parameters for the length of the array (PAKLEN) 
and the array subscripts within it. These are:

.NOFILL

PAKLNK#- Pointer (absolute address) to previous pack of feature (circular)
PAKPNF#- IFF pointer to start of feature (NF or leading TC, CH, or VO)
PAKPST#- IFF pointer to implicated ST (lines only)
PAKFC##- Feature Code
PAKSEG#- GKS Segment number
PAKVRT#- First implicated vertex within ST, starting at 1 (lines only)
PAKOVL#- Layer index, starting at 0
PAKGT##- Graphical Type
PAKMAP#- Map number (IFF file) starting at 0
PAKFLG#- Flags
.FILL
.P 0
The bit positions within the PAKFLG longword (masks) are:
.NOFILL

DELFLG#- This pack is deleted (marked available for re-use)
FSTFLG#- This pack is the first for this feature
LSTFLG#- This pack is the last for this feature
DRAFLG#- This feature has been drawn (in window redraw)
FINFLG#- This feature has been found (in spiral search)
LIMFLG#- This feature is in limbo state
.FILL
.P 0
The internal packed data is stored in virtual memory obtained by a call
to SYS$EXPREG in function GETBLK. Variables controlling the memory
allocation are in COMMON/SECMAP/. Routines PUTPAK and GETPAK (which are
coded in macro - MAR:PACKER.MAR), move data between the longword array
and the internal packed array, the layout of which is defined by these
routines and is liable to change. Routines at the next higher level are:

.P 0
LOGICAL FUNCTION ADDPAK( PACK, SECTOR )
.BR
Add the data from the longword array PACK to the chain for SECTOR,
replacing a deleted pack if possible, setting the PAKLNK field of the
pack to point to the previous pack for this feature. Returns .FALSE. if
successful, .TRUE. if fails which can only happen if more virtual memory
was needed but could not be obtained by GETBLK, in which case a system
error message should have been printed. The chaining of packs for a
given feature is controlled by the settings of the flags in
PACK(PAKFLG). The first pack for a feature must have FSTFLG set, the
last must have LSTFLG set. Debugging code in ADDPAK checks that these
are used correctly. 

.P 0
LOGICAL FUNCTION SETPAK( SECTOR )
.BR
Set up pointers in COMMON/SECMAP/ so that a call to NXTPAK (see below)
will get the first pack for SECTOR. Returns .FALSE. if successful,
 .TRUE. if SECTOR is empty. 

.P 0
LOGICAL FUNCTION NXTPAK( PACK )
.BR
Read the next pack for the current sector into longword array PACK. Use
SETPAK (see above) before first call. Returns .FALSE. if successful,
 .TRUE. if there are no more packs on the chain. Deleted packs are
ignored completely. 

.P 0
SUBROUTINE SCNFTR( LINK, FUN )
.BR
Scan a complete feature chain of packs, calling routine FUN(PACK,PLINK),
where PLINK is the address of the pack, for each pack. Suitable routines
are DELPAK and CHAPAK.

.P 0
SUBROUTINE DELPAK( PACK, LINK )
.BR
Mark PACK deleted (available for re-use), then replace it in location
LINK. The absolute address LINK will probably be obtained from the
PAKLNK field of another pack. Only complete feature chains of
packs should be deleted, hence this routine should only be
used as an argument to SCNFTR, as in CALL SCNFTR(LINK,DELPAK).

.P 0
SUBROUTINE CHAPAK( PACK, LINK )
Make various changes to the contents of a pack, then replace it into
location LINK. Used as an argument to SCNFTR, as in
CALL SCNFTR(LINK,CHAPAK).

.P 0
SUBROUTINE SCNSEC( SECTOR, FUN)
.BR
Uses SETPAK and NXTPAK to scan all packs for the given SECTOR, optionally
testing each with function RELVNT, and then applying
logical function FUN(PACK) to each. FUN must return .TRUE. if
scanning is to continue.

.P 0
LOGICAL FUNCTION RELVNT( PACK )
.BR
Returns true if the pack is currently selected. Tests the map, layer, FC, 
limbo state, and two specific features to ignore.

.P 0
SUBROUTINE CLRFLG( MASK, PACK )
.BR
Clear bits in the flags entry of an ^&internal\& pack.

.P 0
SUBROUTINE GETFLG( FLAG, PACK )
.BR
Reads flags from an ^&internal\& pack into longword FLAG.

.P 0
SUBROUTINE SETFTR( MASK, LINK )
.BR
Sets bits in the flag entries in all packs for a feature. LINK is the address 
of one of the packs.

.P 0
SUBROUTINE CLRSEC( MASK, SEC )
.BR
Clears bits in the flag entries in all packs for a sector.
.FILL
