.!
.! DRAW.RNO
.! This part of the LITES2 Programmer's Guide talks about
.! graphics and drawing
.!

.REQUIRE "PROG.HD"

.HL 1 ^^^&>Graphics and >Drawing\&

.HL 2 ^&>GKS interface\&
.P 0
Graphics are optional in LITES2 - the program will function in an identical 
fashion whether or not graphics are enabled. LITES2 uses GKS output primitives 
polyline (GPL) and fill area (GFA) plus the GKS routines to set attributes for 
these. LITES2 represents each feature by a unique GKS segment. On a full GKS 
system (e.g. Sigmex 6100 series workstation), a segment may be deleted, set 
visible/invisible, or highlighted by reference to its segment name. When using 
a minimal GKS look-alike (e.g. GKSLDLIB for TEK 4014 and Sigma ARGS), these 
functions must be simulated, so LITES2 calls the following routines to perform 
segment functions. ('L' is substituted for GKS 'G' in names.) These routines
are implementation dependent and may either just call the equivalent GKS 
function or simulate it.

.P 0
LCRSG( PACK )  Create segment.  GCRSG( PACK(PAKSEG) )
.BR
Merely note the name of the currently open segment, and the fact that it is 
visible.

.P 0
LCLSG( PACK )  Close segment.  GCLSG( PACK(PAKSEG) )
.BR
Reset displays to default state and note that no segment is open.

.P 0
LSVIS( PACK, IVIS )  Set segment visibility.  GSVIS( PACK(PAKSEG), IVIS )
.BR
Features put into limbo are made invisible. They are drawn in black on the 
ARGS, and are scrubbed on the TEK. This routine is called when deleting, 
recovering, or creating deleted features (as in PART DELETE).

.P 0
LDSG( PACK, VISI )  Delete segment.  GDSG( PACK(PAKSEG) )
.BR
Segments are deleted when a feature is completely removed. This occurs when a 
feature is edited and the old version discarded (VISI .TRUE.), or when limbo 
features are finally removed (VISI .FALSE). (The latter never happens at 
present.) When a segment a deleted, it is drawn in black on the ARGS, but is 
left alone on the TEK (^&not\& scrubbed).

.HL 2 ^&>Drawing\&
.P 0
A complete feature is drawn by a call to routine DRAFTR( PACK ). This uses 
routine STDRAW (store draw) to draw each ST entry of the feature. For features 
being read in, or created as a result of editing, DRAFTR is not used - instead 
FLUSH calls STDRAW directly, in addition to calling the GKS segment
'housekeeping' routines.

.HL 2 ^^^&>Window >Redrawing\&
.P 0
Routine FLVIEW (file view) performs redrawing operations.
On an intelligent GKS workstation, this consists of little more than
'redraw all segments on workstation', but in the case of a
non-intelligent workstation, the required features are redrawn from the
IFF file. FLVIEW determines the sectors which lie at least part on the
screen, and clears the DRAFLG bit in all their packs by calls to CLRSEC.
It then calls SCNSEC for each in turn with DRAWDP (draw data pack) as
function. DRAWDP sets the DRAFLG bit for all features inspected, and for
those not already drawn, calls DRAFTR to actually draw the feature. 
