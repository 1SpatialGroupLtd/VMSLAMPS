.!
.! EDIT.RNO
.! This part of the LITES2 Programmer's Guide talks about editing
.!

.REQUIRE "PROG.HD"

.HL 1 ^^^&>Editing\&

.HL 2 ^&General\&
.P 0
Any changes to the geometry of a feature (i.e. changing the points of a line, 
changing the characters in a text) require that the sectors and packs be
re-calculated. At present, changes of this type involve the creation of a new 
feature in the IFF file, and the deletion of the old version. It would be 
possible to perform some edits of this type in-situ, but this has not been 
done as yet. The only edits which are performed in-situ are alteration of the 
FSN, alteration of the FC of lines, and edits to AC's and TC's when the edited 
entries will fit in the old space.

.P 0
Editing operations requiring a single feature and no cursor positioning (e.g. 
DELETE, CHANGE FC, REMOVE, REVERSE) operate on the found object and are 
completed immediately. Other editing operations (e.g. INSERT, JOIN) requiring 
two features or cursor positioning cause routine HANDLE to be called. This 
transfers the contents of the found object (FO...) variables to the object in 
hand (IH...) variables, thus making the found object the object in hand, and 
allowing another found object to be identified, possible merely to locate the 
cursor. This type of edit is terminated by an END command.

.HL 2 ^&Example of simple single feature edit - REMOVE\&
.P 0
After ensuring that the cursor is actually positioned on a vertex of a line 
feature, DOREMO copies the found object pack (FOPAK) into the current output 
item pack (COIPAK), using CPYPAK. The flag entry of COIPAK is set to its 
default state of 0 (new feature not to be in limbo). The segment number of the 
found object is to be re-used, otherwise we should have to set COIPAK(PAKSEG) 
to 0 to force generation of a new segment number. STRTFT (start feature) is
called, with FO... variables for all its arguments. This creates the header 
for the new feature in the IFF file, keeping the same TC's, FSN, FS entry, and 
AC's as the found object, and also initialises FLUSH. Provided that this 
succeeds (can only fail if map is read-only), LDSG is called to delete the old 
segment (and make the segment number available for re-use). ADDVRT is called 
to add vertices from the found object into the new feature, omitting the one 
we are removing, the ENDFT is called to flush out and terminate the feature.
Finally DELFT is called to void the old feature in the IFF file, and to remove 
its packs from the sector list. ABANDN to called at the end of all successful 
editing operations to reset the program to the default READY state.

.HL 2 ^&Example of two feature edit - JOIN\&
.P 0
The same principles apply as in the single feature edit. DOJOIN ensures that 
the cursor is located on an end vertex of a line feature, then calls HANDLE to 
make the found object the object in hand, enters EDIT state, and sets NDMODE 
so that END will despatch to the code to end a join operation.
.P 0
Since we are now performing a JOIN operation, FIND will only find the ends of 
line features, and NXTITM automatically positions the cursor midway between 
the points we are joining.
.P 0
DOEND despatches to NDJOIN (end join), which after checking that we actually 
have a found object to join to uses STRTFT to start off a copy of the object 
in hand. The vertices and cursor position are added into the new feature in 
such a way as to maintain the direction of digitisation of the object in hand, 
reversing the found object if necessary. There are of course two features to 
be removed from the screen and deleted in this case.

.HL 2 ^&Example of part feature edit - MODIFY PART\&
.P 0
After ensuring that the cursor is located on a line feature, the position on 
the found object is 'marked' (FO... copied into FM...), the cursor is
constrained to move along the found object (FNDMDE=1,ROLING=.TRUE.) and ON
state is entered.
.P 0
While moving along the found object, various CHANGE commands may be given.
The changes to be made are saved in COMMON /VARIAT/.
.P 0
When the END command is given, the found object is taken into hand, and 
CHPART (change part) called to make the changes. CHPART ensures that the 
marked position comes before the current position in vertex terms along the 
feature, swapping them if needed. It then creates up to three new features, 
making the required changes to the middle piece, re-using the FSN and segment 
number of the old feature if possible, otherwise generating new ones.

.HL 2 ^&Example of text or symbol edit - ROTATE TO\&
.P 0
All text and symbol editing consists of changes to feature details in COI... 
variables, which may have been copied there from the found object, or be the 
result of constructing a new feature. DOROTA sets the new angle and enters 
MODIFY state, so that the effect of the rotation may be verified before the 
operation is ended. When the END command is given, DOEND despatches to NDSTCN 
(end symbol/text construction) which creates the new feature and deletes the 
old one.

.HL 1 ^^^&>Construction of new line features\&
DOSTAR calls STRTER which checks that the specified attributes of the new 
feature are valid, and then buffers up the first point in STRTXY. Further 
calls to STRTER buffer up additional points until the buffer is full, when
STRTFT is called to start off the new feature, and part of the STRTXY buffer 
is added into the feature, keeping a part for the refresh picture and for 
possible removal of points. The feature is finally ended by further calls
to STRTER from DOEND.

.HL 1 ^^^&Editing of AC, TC, and CH entries\&
The AC, TC, and CH entries for a particular feature may be loaded into memory 
by a call to routine GETAC. This is called from NXTITM if VERIFY AC is 
switched on, and also by the EXAMINE AC, and ANCILLARY commands. The entries 
are stored in memory forming part of the sector list, with a dummy sector (the 
AC sector) one greater than the maximum real sector number. One of the entries 
in the AC sector is loaded into a FORTRAN array ACBUF, whose layout is defined 
in COMMON /ACS/. The entries are chained (TC's and CH's first, AC's second) to 
provide quick access to the first, last, previous, and next entries in the 
list.

.P 0
Routine ADDAC adds a new entry to the list, DELAC deletes one. ACEDT replaces 
the edited entries into the feature using COPYAC, which takes entries from the 
AC sector if possible, otherwise directly from the IFF file. Routines NEXTAC 
and PREVAC make the next or previous entry on the list current, TYPAC types 
the current entry. VERFAC uses these to type the entire list.
