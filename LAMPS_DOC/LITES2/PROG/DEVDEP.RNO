.!
.! DEVDEP.RNO
.! This part of the LITES2 Programmer's Guide talks about
.! the device-dependent interface.
.!

.REQUIRE "PROG.HD"

.HL 1 ^^^&>Device-dependent >Interface\&

.HL 2 ^&>LITES2 for different hardware\&
.P 0
The LITES2 program is adapted to run on various hardware configurations by
linking the main body of the program (OBJ:LITES2.OLB) with a set of device
dependent routines (e.g. OBJ:TVES.OLB). The sources for these routines
are kept in a separate directory (e.g. [LITES2.TVES] ). At present, there
are 23 device dependent routines which are called by LITES2, and hence must
be supplied. In some versions, these in turn call other routines, so there
may be more than 21 routines in the device dependent directory. The device
dependent routines may call back routines in the main body of LITES2, and
in the case when these routines are not otherwise used, they are explicitly
included in the LINK instructions, since LITES2.OLB is scanned before the
device dependent library.

.HL 2 ^&Specification of routines\&
.P 0
The routines are described here grouped by function.

.HL 3 ^&Initialisation\&
.P 0
The following routines are called when the final IFF file is specified,
and initial read in and draw commences.
.NOFILL
.P 0
LOGICAL FUNCTION TSTWK(NUMBER,WTYPE)
arguments
INTEGER NUMBER (input)
INTEGER WTYPE (output)
.FILL
.P 0
NUMBER is either 1 or 2 to indicate primary or secondary workstation.
The function should return .TRUE. if the specified workstation is
available in this implementation, in which case WTYPE should be set to
the workstation type to be used in the GKS Open Workstation (GOPWK) call.
.NOFILL
.P 0
LOGICAL FUNCTION TSTSEG
.FILL
.P 0
Should return .TRUE. if GKS segments are to be stored on the workstation(s).
The variable USESEG in common /WORKS/ is set to the value returned by this
function. This is used by FLVIEW in re-draw operations to determine whether
features need to be re-drawn from the IFF file, and may also be used in
other device dependent routines. TSTSEG should only return .TRUE. if
the workstation(s) are actually capable of storing segments, and the
variable SEGOPT in common /OPTION/ should be taken into account if the
ENABLE SEGMENTS command is to have any effect.
.NOFILL
.P 0
LOGICAL FUNCTION TABINIT
LOGICAL FUNCTION BITINIT
LOGICAL FUNCTION BALINIT(ON)
LOGICAL FUNCTION SCRINIT(ON)
LOGICAL FUNCTION BUTINIT(ON)
.FILL
.P 0
Should initialise the system for reading the digitising table, bitpad,
trackerball, screen menu and function butons respectively, returning .TRUE.
if this succeeds. In the case of BALINIT, SCRINIT and BUTINIT the argument ON
is .TRUE. if the trackerball etc is to be switched on, .FALSE. if it is to be
switched off, and the function return indicates the new state (.TRUE. for
on). See existing versions (e.g. in [LITES2.TVES]) for examples of what may
be necessary. 
.NOFILL
.P 0
SUBROUTINE INIWK(WKID)
argument:
INTEGER WKID (input)
.FILL
.P 0
WKID is set to 1 or 2 for primary and secondary workstations.
This routine is called immediately after GKS Open Workstation (GOPWK) and
should perform any device dependent initialisation of the workstation
(behind the back of GKS!). This routine is often null, but provides a
hook on which to hang any operations of this type.
.P 0
.HL 3 ^&Termination\&
.P 0
The following routine is called as part of final program rundown for exit.
.NOFILL
.P 0
SUBROUTINE CLSTAB
.FILL
.P 0
This routine should close down the digitising table reading mechanism.
.P 0
.HL 3 ^&Digitising table (and bitpad) handling\&
.P 0
The following routine is called to read a single point from the digitising
table or bitpad, when setting up maps, menus, and tracking areas.
.NOFILL
.P 0
SUBROUTINE GTDGXY(LINE,BUTTON,XY,EXSTSU,ABORT)
arguments: (all output)
INTEGER*4 LINE    2 for bitpad, 3 for table
INTEGER*4 BUTTON  button pressed (starting at zero)
REAL      XY(2)   coordinate
LOGICAL   EXSTSU  'preserve existing setup' button pressed
LOGICAL   ABORT   'abort setup' button pressed
.FILL
.P 0
See existing versions for examples of this routine. The routine should
probably set ABORT and return if CTRL/C is pressed to enable a way out
if the table stops working.
.P 0
.HL 3 ^&Refresh picture drawing\&
.P 0
The following routines are concerned with the drawing of the refresh picture
on the workstations.
.NOFILL
.P 0
SUBROUTINE RFDRAW
.FILL
.P 0
This routine is called from the LITES2 main loop between every primitive
command, and should ensure that the refresh picture on the workstation
reflects the current state of the program. The actions necessary vary
a great deal with different hardware. The components of the refresh
picture for which RFDRAW is responsible are:
.LIST
.LE
The cursor, plus its position, size, and blinking.
.LE
The found object.
.LE
The object in hand.
.LE
The current construction.
.LE
Any symbol or text being modified.
.LE
Rubber band lines.
.END LIST
.NOFILL
.P 0
SUBROUTINE STDINI
.FILL
.P 0
This routine is called as the first action in STDRAW if REFNG is false.
Its purpose is to prepare the workstations for drawing features in stored
mode (i.e. not refresh), such as removing the refresh picture. This
routine need only do anything if (a) RFDRAW uses STDRAW, and (b) There is
some undesirable interaction between the stored and refresh pictures.
It is the responsibility of RFDRAW to set REFNG .TRUE. to suppress the
call to STDINI in STDRAW, and to set it back to .FALSE. again.
.P 0
.HL 3 ^&Interactive input\&
.P 0
The following routine is called by the LITES2 command decoder to obtain
input from the interactive controls.
.NOFILL
.P 0
SUBROUTINE INTERACT
.FILL
.P 0
In simple terms, this routine must obtain the next line of interactive
input, and place it in the buffer TXTBUF. In practice, the routine tends
to be rather complex because of the multiplicity of input devices.
Routine TRNTIP (translate table input) is provided in the main LITES2
library to interpret input from the table, bitpad, and trackerball,
returning a string with appropriate menu or button commands, and a
position. See existing versions of INTERACT for examples.
.P 0
.HL 3 ^&Graphics routines\&
.P 0
The following routines are called at the level of GKS by LITES2, to enable
the implementor either to use a real GKS package, or to simulate the
effect that would be obtained.
.NOFILL
.P 0
SUBROUTINE LCRSG(PACK)  Create segment.
Argument:
INTEGER*4 PACK(PAKLEN) (input) LITES2 pack
GKS function:  GCRSG( PACK(PAKSEG) )
.FILL
.P 0
This routine may either call GCRSG to create a GKS segment, or if segments
are not being used should just perform whatever housekeeping is needed
to note that a visible segment is now open.
.NOFILL
.P 0
SUBROUTINE LCLSG(PACK)  Close segment.
Argument:
INTEGER*4 PACK(PAKLEN) (input) LITES2 pack
GKS function:  GCLSG( PACK(PAKSEG) )
.FILL
.P 0
Either call GCLSG or simulate the closing of a segment.
.NOFILL
.P 0
SUBROUTINE LSVIS(PACK,IVIS)  Set segment visibility.
Arguments:
INTEGER*4 PACK(PAKLEN) (input) LITES2 pack
INTEGER   IVIS         (input) GKS visibility flag (GINVIS,GVISI)
GKS function:  GSVIS( PACK(PAKSEG), IVIS )
.FILL
.P 0
Called when features are put into limbo (DELETE), or are recovered, or
when pre-deleted features are created (PART DELETE, BRIDGE).
The routine may either call GSVIS, or simulate its effect e.g. by
drawing over in black, or 'scrubbing', to make invisible, or by
redrawing normally to make visible.
.NOFILL
.P 0
SUBROUTINE LDSG(PACK,VISI)  Delete segment.
Arguments:
INTEGER*4 PACK(PAKLEN) (input) LITES2 pack
LOGICAL   VISI         (input) .TRUE. if segment is currently visible
GKS function:  GDSG( PACK(PAKSEG) )
.FILL
.P 0
Segments are deleted when a feature is completely removed. This occurs when a 
feature is edited and the old version discarded (VISI .TRUE.), or when limbo 
features are finally removed (VISI .FALSE). (The latter never happens at 
present.) The routine may either call GDSG, or may simulate its effect
e.g. by drawing over in black, or even by doing nothing if using a storage
display.
.NOFILL
.P 0
SUBROUTINE LSALLI  Set all segments invisible
SUBROUTINE LSALLV  Set all segments visible
.FILL
.P 0
These routines are called by FLVIEW if using segments when selections are
in use. They may take advantage of the special facilities usually provided
on GKS workstations to perform these operations. If a pure GKS was being
used, then it would be necessary to set the segments individually.
.NOFILL
.P 0
SUBROUTINE LRSGWK(WKID)  Redraw all segments on workstation
Argument:
INTEGER WKID (input) 1 or 2 for primary and secondary workstation
GKS function:  GRSGWK(WKID)
.FILL
.P 0
Called by FLVIEW if segments are in use. It is unlikely that this routine
will ever be anything other than a call to GRSGWK, plus any associated
adjustment of workstation settings.
.P 0
.HL 3 ^&Miscellaneous routines\&
.NOFILL
.P 0
SUBROUTINE HARCOP
.FILL
.P 0
This routine should produce a hardcopy if possible. If not, it should call
IGNCMD to inform the user that the command does not work.
.NOFILL
.P 0
SUBROUTINE PING
SUBROUTINE RASP
.FILL
.P 0
These routines (which are usually both in PING.SRC) should produce
noises at the workstation. PING is called to prompt the user (e.g.
to digitise map corner points) and at certain other times. It may,
for instance, just transmit a bell. RASP is called when MOAN or
NASTY error messages are produced. Some versions use two bells, but
if the workstation is capable of any other noise (e.g. TKRASP on the
MUART TEK4014) then this may be used.
.P 0
.HL 3 ^&Utility routines\&
.P 0
These routines are not called directly by LITES2, but are often used by
other device dependent routines.
.NOFILL
.P 0
SUBROUTINE BOXTXT Used by RFDRAW to refresh text with a box.
SUBROUTINE RFBAND(WKID) Used by RFDRAW to draw rubber band lines.
SUBROUTINE DIGTRN(...) Used by GTDGXY and INTERACT to decode table string.
.FILL
