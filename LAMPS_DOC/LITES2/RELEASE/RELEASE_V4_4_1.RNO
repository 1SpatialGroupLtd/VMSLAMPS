.LEFT MARGIN  0;.RIGHT MARGIN 80;.PAGE SIZE    60,80
.FLAGS BOLD
.KEEP


.!!!!!!!!!!!!   for double sided output
.!!!LAYOUT 2,2
.!!!!!!!!!!!!


.!** title page
.FILL
.FIGURE 14
.CENTRE ;^*Laser-Scan Ltd.\* 
.FIGURE 2
.CENTRE ;^*LITES2\*
.BLANK
.CENTRE ;^*Release Notes -  Version V4.4-1\*
.!

.FLAGS SUBSTITUTE
.FOOT
.NOFILL
Copyright (C) $$year Laser-Scan Ltd
Science Park, Milton Road, Cambridge, England CB4 4FY  tel: +44 (0) 1223 420414

Document "LITES2 Release"				Category "Release Notes"
Document Issue V4.4-1	Clarke Brunt			23-May-1995
.FILL
.END FOOT
.NOFLAGS SUBSTITUTE

.!* and the title to go at the top of each page
.TITLE LITES2 Release notes (V4.4-1)
.PAGE
.HL 1 ^*CONTENT\*
This document describes recent changes to the Laser-Scan LAMPS software
package LITES2. This package provides facilities for display and editing
of geographic and map data. 

.P 0
Details of LITES2 functionality and commands can be found using the HELP
facility in LITES2, and in the latest edition of the LITES2 Reference
Manual. Supporting information is found in the documentation for the
MAPPING package. 

.P 0
This document is part of the LAMPS V4.4 release, which went into
Alpha test in May 1995. It covers relevant changes to package LITES2
since the previous LAMPS release (V4.3) which went into Alpha test in January
1994. 

.P 0
The specific version covered here is LITES2 V4.4-1 of 4-May-1995. 
See the release notes for the previous LAMPS release for
information about earlier changes. 

.HL 1 ^*ENHANCEMENTS\*
The following particularly significant enhancements are included in
LITES2 V4.4-1
.LIST
.LE; The ability to read `encrypted' LCM files. Applications written
using the LITES2 command language can now be hidden from the final user.
The encryption is performed by the LCMSQUASH program, using an integer
code allocated to the developer by Laser-Scan, and an alphanumeric key
chosen by the developer (and communicated to Laser-Scan). Only users with
an appropriate LITES2 licence will be able to read the files.
.LE; Dynamic warping of raster data to fit vector (and vice versa).
These facilities to allow LITES2 to be used for update of
vector mapping, using scanned aerial photography as a backdrop. This includes
local transformation setup.
.LE; Blanking behind texts and symbols.
New representation facilities allow automatic generation of prioritised
`blanking' areas and borders around text and symbol features, and also
selection of priority levels for display.
.LE; More levels of prioritised representation.
The FRT system now allows up to 8 priority/feature code pairs in a PRIO record
in the FRT, rather than 4.
.LE; Right-to-left font support.
LITES2 can now handle text fonts for languages with a right-to-left writing
direction (such as Arabic, or Hebrew).  Also (for PostScript fonts) it can use
different letter shapes (glyphs) depending on the position of the letter in a
word (as in Arabic).
.LE; Version 1.2 of the Motif GUI is now supported.
.END LIST

.PAGE
.HL 1 ^*INCOMPATIBLE CHANGES AND WARNINGS\*
Particular attention is drawn to the following changes in LITES2 V4.4-1, which
may result in behaviour incompatible with previous versions, or merit special 
warnings. The items are also
described in more detail in the appropriate section below.
.LIST
.LE; LITES2 V4.4-1 requires the FRTLIB shareable image, FRTSHR.EXE,
with GSMATCH parameters 1.5 or higher. This is dated 4-April-1995 or
later. Logical name LSL$FRTSHR must point to this image, as documented
in the MAPPING package release notes.
.LE; When the UILGEN and UILMENUS utilities are used on a system running Motif
1.2, special versions of UILMENUS and UILGEN are needed.  There is also a
problem with placement of the root window. See section 6 (c) for more details.
.END LIST 0

.PAGE
.HL 1 ^*NEW OR CHANGED FACILITIES IN V4.4-1\*
The following facilities have been added, implemented or had their
actions altered:- 
.LIST
.DISPLAY ELEMENTS '(',LL')'
.LE; Command files (.LCM) whose first line consists of the sequence `_#_%_#',
followed by an integer and optional comment are assumed to be encrypted.
A special LITES2 licence is required to read such files. The contents of
encrypted files are not echoed or written to the journal file (instead, just the
@filename directive is journalled), and the contents of any macros defined
by the file cannot be echoed or examined. The encryption is performed by the
LCMSQUASH program. Developers who want to encrypt their own LCM application
should apply to Laser-Scan for a code number.
.LE
The licensing mechanism for LITES2 now allows the program to be licensed
for machines with a specific model type (system parameter HW__MODEL),
rather than just the CPU type. This change has been made because many recent
models all use the same CPU type. The output from the SHOW VERSION command
now displays any model type information from the licence. LITES2 X4.4E
was further enhanced to supply the names of licensed models, rather
than just the number.
.LE; New logical name LSL$LSR__PLOT__MODE controls the `chunks' in which
LSR files are drawn when plotting. This is particularly intended for
producing optimal PostScript output for different PostScript RIPs.
The values are:
.LIST '*'
.LE; 0 or undefined - do as before. Plot using the tiles in the file if
plotting at a 1 to 1 pixel scale, otherwise plot in swathes the full
width of the image and with a height limited by the available graphics
buffer memory (controlled by logical name LSL$FILL__POINTSMAX).
.LE; 1 - always plot in swathes (as for 0) even if at 1 to 1 scale.
This avoids the problem with using tiles that some RIPs could not cope
with a large number of tiles.
.LE; 2 - plot in (nearly) square chunks as large as possible. Avoids
potential problem with RIPs which want to rasterise the image with
scan lines in a direction perpendicular to the swathes.
.LE; _>100 - plot in squares of the specified size (if possible).
.END LIST 0
A new diagnostic message (produced if ENABLE DIAGNOSTICS) gives the
details of the chunks being used when the image is drawn.
.LE; New command UNITS FACTOR allows user specified units (rather than
just IFF or MM as before) to be applied to the next command accepting
a length. After a UNITS FACTOR command, EXAMINE LINE, LENGTH, and
DISTANCE will additionally display the scaled value.
.LE; New commands FORCE LINE and FORCE DISTANCE (used while constructing)
constrain the cursor onto a circle fixing the length of the current
segment (LINE), of the feature so far (DISTANCE). These may be combined
with FORCE ANGLE or FORCE BEARING to completely constrain the position of
the next point. While constrained, the use of FIND will only find
features at intersections with the constraint. The command FORCE LENGTH,
which was never implemented, has been withdrawn.
.LE; LITES2 has been enhanced to take advantage of new facilities in FRTLIB and
GKSMOTIFLIB, allowing the REGION command, when applied to a text feature, to
produce the correct region for a PostScript hardware text. Previously, the TRI
file was still used to calculate the region.
.LE; New licensed facilities are included to allow LITES2 to be used for
update of vector mapping, using scanned aerial photography as a backdrop. 
In particular a new WARP command is provided to control local warping of
images to fit the vector data.  Refer to the LITES2 Help facility for more
information on these new commands and variables.
.LIST '*'
.LE; WARP CLEAR - Delete all warp points.
.LE; WARP DELETE n - Deletes a warp point.
.LE; WARP FIT - Calculate a fit to the current set of warp points.
.LE; WARP IMAGE - Warp the raster image to fit the vector data.
.LE; WARP MAP - Warp the vector data to fit the raster image (default).
.LE; WARP OFF - Turn off warping.
.LE; WARP ON - Turn on warping.
.LE; WARP POINT IMAGE x  y - Specify a data point for fitting a warp.
.LE; WARP POINT MAP x  y - Specify a data point for fitting a warp.
.LE; WARP REPLACE IMAGE n x y - Replace a previously specified warp data point.
.LE; WARP REPLACE MAP n x y - Replace a previously specified warp data point.
.LE; WARP TRANSFORM t - Specifies the type of warp transformation to be used,
where t = AFFINE, EXTENDED, LINEAR, ORTHOGONAL, or PROJECTIVE.
.LE; SHOW WARP - show details of the warp transformations.
.END LIST 0
.P 0; The following restrictions apply to transformation of images using
the WARP command.
.LIST '*'
.LE; Only one image file may be transformed. If several are open,
then the one with the lowest number in the lowest numbered overlay
will be transformed, and the other will not be drawn at all.
.LE; Only LSR and DTI format files may be transformed (not LSI).
.LE; The `PROJECTIVE' transformation may not be used with DTI files
(this is in the interests of efficiency).
.LE; Images may not be transformed while plotting.
.END LIST 0
.P 0
A side effect of transforming an image using the WARP command is
that it may be drawn at an arbitrary scale, rather than having
to use integral multiples of the pixel size. If desired, this
effect can be utilised by setting up a null warp - the easiest
may to do this is to use WARP TRANSFORM LINEAR and to specify two
identical points for the transformation.
.LE; New system variables are supplied to provide access to information about
the new image warping facilities.  These are:
.LITERAL
$WARP_COEFFS_IMAGE
$WARP_COEFFS_MAP
$WARP_DIRTY
$WARP_FITTED
$WARP_IMAGE_N
$WARP_IMAGE_Y
$WARP_MAP_N
$WARP_MAP_X
$WARP_MAP_Y
$WARP_MODE
$WARP_RESIDUAL_X
$WARP_RESIDUAL_Y
$WARP_RMS_X
$WARP_RMS_Y
$WARP_TRANSFORM
.END LITERAL
.LE
New commands SELECT_/DESELECT PRIORITY (or PRIORITIES) enable only the
selected priority layers to be drawn when using ENABLE SORT and
SORT PRIORITY together with PRIO entries in the FRT file. Only
drawing is affected (not FINDing). SELECT ALL PRIORITIES restores
the default of drawing all priority layers (as does SELECT ALL).
The system variable $HADSELECT now includes priority selections,
and new system variable $HADSELECT__PRIORITY show if any priority
selections are in force.
.LE
The FRT system now allows line, curve, or area feature codes to be
used as part of the prioritised representation of symbol and text
features. LITES2 interprets these by constructing the boundary of
the symbol or text, and then drawing it using the specified line,
curve, or area code. The SIZE entry in the FRT for the line, curve,
or area is interpreted as the amount (in sheet mm) by which
to expand the boundary. If SIZE is negative, it is instead interpreted
as a fraction of the height of the symbol or text. Note that SIZE
normally means offset for a line, or hatch spacing for a hatched area -
it does not perform these functions when used as part of a text_/symbol
representation. The text_/symbol boundary may be either simple (a
bounding rectangle), or complex (something better fitting the actual
shape). A complex boundary is chosen by setting bit 15 (value 32768, or
_^X8000) of the FRT FLAGS entry for the line, curve, or area. The complex
boundary for a text is the same as the region around a text constructed
by the REGION command.
.LE
Changes have been made to the user text and symbol drawing routines,
which allow user-written code to control the appearance of these
features. The text shareable image (logical name LSL$TEXT__ROUTINE)
now includes a second entry point, BLANK__TEXT, which can compute
an outline for a text feature when line/curve/area feature codes
are used as part or its prioritised representation (as described
above). Similarly for symbols, an entry BLANK__SYMBOL has been
added to LSL$SYMBOL__ROUTINE. An additional argument is now passed
to the text drawing entry point, DRAW__TEXT, indicating if hardware
text is required. Details of the format of these user-written routines
can be found in the LITES2 Reference Manual.
.LE
The behaviour of the CLOSE and CLOSE SQUARE commands, if given while
constructing a BRIDGE, have been altered. Previously, they moved the
cursor back to the point at which the bridge started, which was
of little or no use. Now, if the bridge started at one end of a
feature, these commands will automatically re-find the original
feature at the other end, and an END command will result in a closed
loop being constructed - the original feature plus the bridge.
Without the CLOSE commands, bridging from one end of a feature to
the other continues to replace the entire original feature by the
bridge.
.LE
Since the FRT system now allows up to 8 priority/feature code pairs
in a PRIO record in the FRT, the output from SHOW FC__PRIORITY can
now go onto a second line for feature codes with more than 4
representations.
.LE
New logical name LSL$LITES2__TERMINATOR__MASK controls which
characters will be taken as line terminators when typed at
the terminal. It should be defined as a comma-separated list
of ASCII codes and ranges of codes (use quotes if the list
contains commas, otherwise a search-list will result). For
example
.BR;_$#DEFINE LSL$LITES2__TERMINATOR__MASK "13,26,128-159"
.BR;would cause carriage-return (13), Ctrl-Z (26), and also the upper
control characters (128-159) to terminate lines.
.P 0
The purpose of this is to allow characters which would by
default have terminated the line to be input as characters,
for example into text strings or AC entries. Note that even
if they are set not to terminate the line, most control characters
will not echo as anything sensible at the terminal.
.LE
The output resulting from VERIFY TEXT, VERIFY AC, and also when
texts and ACs are edited, has been changed so that any control
characters in the strings are `escaped' rather then just output
as they are (which could cause strange effects at the terminal).
Characters with codes in the range 0-31 are output as _^X, where
`X' is the character resulting from adding 64 to the code. For
example, ASCII 7, or Ctrl-G (BEL) would be output as _^G.
The control codes in the range 128-159 are output in the same
way, but with a leading `$', so ASCII 135 would be output as
_$_^G.
.P 0
Note that there is no way to distinguish these cases from the case
when `$' and `_^' actually occur in the string. The contents of
LITES2 system variables are ^*not\* affected by this change, so
for example SHOW VARIABLE $TEXT would still output control characters
if they occurred in the string.
.LE
New command REFRESH CURSOR allows the LITES2 cursor to be set to
a circle, ellipse, rectangle, square, or cross (with optional
central hole). The size may be specified in IFF units, sheet mm, or
screen mm. This command is only functional in the MOTIF version.
See HELP for further details.
.LE
New command IMAGE BRUSH CURSOR allows the cursor to be automatically
switched to the shape of the image editing brush whenever the
commands IMAGE PAINT or ERASE are use. The cursor reverts to its
previous shape on leaving PAINT state.
.LE
New logical name LSL$DOLLAR__ESCAPE. If defined as 0, then turns off special
handling of '$' in text strings (add 128 to the code for the next character).
If not defined at all, or defined as 1, the '$' continues to be treated
as before.
.LE
LITES2 can now correctly handle TRI fonts designed for languages with
a right-to-left writing direction. Such fonts would be expected to
have letters with negative widths, and the character shapes would be
digitised to the left of the origin.
.LE
As documented in the FRT User Guide in the MAPPING package,
the .PSFONTLIST file now supports
a directive to draw PostScript fonts in a right-to-left direction. (Font
suppliers seem to provide fonts for right-to-left languages which still
write from left-to-right unless treated specially.)
.LE
Similarly the .PSFONTLIST file now supports
a directives to allow context dependent substitution of different
letter shapes (glyphs), as used in Arabic.
.LE
Version has been incremented to be LITES2 V4.4-1.
.END LIST 0

.PAGE
.HL 1 ^*PROBLEMS FIXED IN THIS RELEASE\*
This release corrects the following problems that have been found to exist
in LITES2 Version 4.3 :-
.LIST
.DISPLAY ELEMENTS '(',LL')'
.LE; SPR 2720. The EXAMINE ATTRIBUTES command now includes a final `S'.
The documentation and help always included an `S', but the actual command
didn't. EXAMINE ATTRIBUTE remains a valid abbreviation.
.LE; SPR 2721. Point attributes, including Z, are now stored correctly when
long features are digitised. In releases up to V4.2, the attributes were
correct up to 180 points, but points 181-200, 361-380 etc. were given the
same attributes as points 1-20. Version V4.3 increased the size of buffers
for highlighting from 200 to 1000 points, which would have caused the
problem to appear for points 981-1000 etc. instead, but constructions as
long as this with Z enabled caused another problem.
.LE; New LITES2GEOMSHR.EXE returns a null geometry if an error occurs,
rather than producing obscure error codes.
.LE
The message "Too many features - segment numbers re-used" used to occur
every time the number of features read in or generated passed multiples
of 32767. The message was of MOAN severity and could cause command
procedures and macros to terminate. The message was only of importance
on displays supporting segments (Sigmex or Tektronix series), and indeed
only if ENABLE SEGMENTS was in use. The message is no longer produced on
displays for which it is not relevant, and a LEARNER message has been
added to explain its implications.
.LE; SPR 2725. When using Display PostScript in LITES2MOTIF, ensure that
text and linework are drawn in the correct order. Previously, buffering
in the Display PostScript pipeline could cause text to be drawn after
(and hence on top of) linework which is should have preceded. At the same
time, avoid periodic flushing of the Display PostScript pipeline if
no PostScript has been output - this should give a slight performance
improvement.
.LE; Ensure that Display PostScript text is drawn into the correct
overlay. Previously it could be drawn into all overlays, which for
example could `burn' holes in an underlying raster, visible if the
text overlay was concealed.
.LE; Ensure that Display PostScript text uses the correct colour
from the colour table. Previously, it could sometimes use a colour
made up by `dithering' between two adjacent colours.
.LE; SPR 2825. Avoid a potential `collapse' if ENABLE ENCLOSING was used,
and area features were subsequently changed into lines with CHANGE FC, or
by reading a new FRT.
.LE; SPR 2880. Offset lines (non-zero SIZE entry
in the FRT for a line) were not drawn correctly for features with
a single point in an IFF CB or ST entry. This would usually mean
for example a feature with 201 points (since 200 points are
traditionally stored in each entry), but the effect could also
be produced by using EDIT VISIBILITY to make the end segment of
a line invisible, and then visible again. This was first corrected
in X4.4C with a further amendment for features with a single point
string at the start in X4.4D.
.LE; Changes in the FRT library mean that patterned lines are now output
using multi-point line segments rather than 2-point ones. When data
points were close together, and a thick line was used, the 2-point lines
could produce a poor effect at the joins on some displays.
.LE; The thickness of lines displayed when using PICTURE ROTATE, or WARPing
vectors could previously have been incorrect. This has now been fixed.
.LE;The Motif version has been modified to give better behaviour when
attempting to allocate 8 planes, in the case where pre-allocated colours (for
DECTerms etc.) are found at the top of the colour map, rather than the bottom.
This has been observed in some X-servers for PCs. Also, the colour map is now
asserted for newly created windows (although window manager settings or other
windows may intervene). Version V4.4-1 includes a fix to a problem
introduced in X4.4D and fixed in X4.4G
that LITES2 would try to assert the colour map on displays with fixed
colours (for example, monochrome X-terminals).
.LE;SPR 2744. Changes in GKSMOTIFLIB mean that an occasional hang in
LITES2MOTIF, observed while using Display PostScript text, is now avoided.
.LE;SPR 2916. SEARCH LAST no longer occasionally fails to find area features
if ENABLE ENCLOSING is in use. This applied particularly to newly generated
features, rather than ones which had just been `found' previously.
.LE;SPR 2926. Avoid occasionally missing out a raster scanline when
editing raster images, for example with IMAGE FILL or IMAGE CLEAR.
Previously, a rounding error could occasionally cause single
rows of pixels to be omitted from the editing operation, especially
if the region being edited had a large vertical extent.
.LE;Ensure that the value displayed by SHOW ZOOM, and contained in
the system variable $ZOOM, is set correctly if both a primary and
secondary display (window) are active, but the secondary is suppressed
during the zoom. This also affects the width at which thick lines
are drawn.
.LE;A problem introduced in version X4.4F, whereby LITES2 could
fail to acknowledge a keyboard command until some other activity took
place (such as using a mouse button), has been fixed.
.LE;The help and documentation have been amended to state that
the system variables $CURSINREGION and $CURSINGEOMETRY return +1
if the cursor is on the boundary of the region or geometry. This
was always the case, but was not documented.
.LE;Giving the command IMAGE PAINT or ERASE immediately followed
by ABANDON no longer gives an error message saying that no IMAGE
RECOVER information is available.
.LE;The error message produced when an invalid dimension was given in a
GEOMETRY command has been corrected.
.LE;SPRs 2950 and 2976. A number of faults with CLIP INREGION have been
resolved. These faults are rare, but arise potentially from the following
ill-conditioned cases:
.LIST
.DISPLAY ELEMENTS '(',RL')'
.LE;Linear features with a vertex lying on an edge of a region.
Problems with this class of features seem to occur only when the `first' or
`last' points of a feature lie on the boundary of a region. However, it is
possible that other `pathological' cases exist.
.LE;Linear features passing through a vertex of a region.
Faults with this class of features are sensitive to other parameters, such as
the direction the feature was digitised and whether or not the `previous' and
`next' vertices of the region lie on the same side of the feature.
.LE;Linear features with a vertex coincident with a vertex of a region.
This class of features is a special subset of the previous class and can
produce subtle errors.
.END LIST 0
.LE;A problem of inconsistency between SELECT CUTREGION and CLIP INREGION has
been resolved. Certain features may satisfy the CUTREGION feature selection
criterion but subsequently cause an error under CLIP INREGION resulting
(paradoxically) in the message "??? feature does not cut region".
.LE;SPR 2964. A possible integer overflow error has been avoided (which was
fatal on ALPHA/AXP) if an IFF file was read in READY state with no other maps
currently read in. The error could happen in the first ZOOM operation after the
map was read in.
.LE;SPR 2963. GKSMOTIFLIB (used in LITES2) has been amended to avoid
an access violation doing raster burn-in under Motif 1.2. This was
caused by a problem in the Motif 1.2 libraries.
.LE;A problem (introduced a long time ago) causing a failure
to distinguish full circles from arcs which were ^*nearly\* full circles
has been fixed. In particular: Generated circles (and geometries created
from circles) might not be precisely closed; Edit part (e.g_. DELETE PART)
on graphical type 2 and 3 full circles behaved erratically; It was impossible
to bend text all the way round a full circle.
.END LIST 0

.PAGE
.HL 1 ^*CHANGES TO ANCILLARY PROGRAMS FOR THIS RELEASE\*
This release includes the following changes to ancillary programs
included with LITES2 Version V4.4-1:
.LIST
.DISPLAY ELEMENTS '(',LL')'
.LE; LCMSQUASH - version of 3-June-1994. New qualifiers /CODE=integer and
/KEY=string allow the encryption of LCM files. The code is an integer allocated
to developers by Laser-Scan, while the key is a character string chosen by the
developer and communicated to Laser-Scan. The encrypted LCM files can only
be decoded by LITES2 users who have a special licence. The /COMMENT qualifier
allows a comment to be added the the first line of the output LCM files
(whether encrypted or not).
.LE; UILMENUSINI.COM - version of 17-Oct-1994. Set up symbols for UILMENUS and
UILGEN correctly when on an Alpha AXP system.
.LE; UILMENUSMOTIF12.EXE of 7-Feb-1995 and UILMENUSMOTIF12__AXP.EXE of
8-Feb-1995. The existing versions of this program (UILMENUSMOTIF and
UILMENUSMOTIF__TV for AXP) will not run with .UID files compiled using
the UIL compiler included with DECWindows Motif version 1.2. If you
create your own menu systems with this version of Motif, then you
will need to run the new versions of the program. The version for
Alpha AXP is a native image (which Laser-Scan traditionally name as
_*__AXP.EXE), rather than a translated image (_*__TV.EXE), since DEC do
not seem to supply translated image support for Motif 1.2 at present.
The command file UILMENUSINI.COM does not set up symbols for these
new versions - you must do this yourself if you need them. Providing
that you are not compiling your own .UID files, the original versions
(without the 12) will continue to work.
.P 0
A difficulty has been observed with the 1.2 version of UILMENUS - the
root box of the menu system cannot be positioned using the x and y
coordinates stored in the .UIL file (and originally in the .UIM),
and tends to appear towards the top-left of the screen. A workround
is to include in a resource file (for example LSLUILMENUS.DAT in the
login directory, or another name if the /CLASSNAME qualifier is used)
the lines:
.BR;UILMENUSMOTIF12.x:		800
.BR;UILMENUSMOTIF12.y:		600
.BR;Substitute the position you require. The name before the dot is
the name of the program being run, and therefore should include the
__AXP if you are running that version.

.LE; LITES2GEOMSHR.EXE of 20-Mar-1995 and LITES2GEOMSHR__AXP.EXE of
20-Mar-1995. These programs were altered to allow features that
had touching points on their outer boundary to be used to create
area geometries.

.END LIST 0
