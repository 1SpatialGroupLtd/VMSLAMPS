.LEFT MARGIN  0;.RIGHT MARGIN 80;.PAGE SIZE    60,80
.FLAGS BOLD
.KEEP


.!!!!!!!!!!!!   for double sided output
.!!!LAYOUT 2,2
.!!!!!!!!!!!!


.!** title page
.NOFILL
.!                                            Bureau / Sales Support / Software
.FILL
.FIGURE 14
.CENTRE ;^&Laser-Scan Ltd.\& 
.FIGURE 2
.CENTRE ;^&LITES2\&
.BLANK
.CENTRE ;^&Release Notes -  Version 3.3\&
.!

.FLAGS SUBSTITUTE
.FOOT
.NOFILL
Copyright (C) $$year Laser-Scan Ltd
Science Park, Milton Road, Cambridge, England CB4 4FY  tel: (0223) 420414

Document "LITES2 Release"				Category "Release Notes"
Document Issue 3.3	Clarke Brunt			29-October-1990
Modified		Clarke Brunt			9-December-1990
Modified		Clarke Brunt			20-December-1990
Modified		Clarke Brunt			11-January-1991
Modified		Clarke Brunt			17-January-1991
Modified		Clarke Brunt			15-February-1991
Modified		Andy Brown			26-February-1991
.FILL
.END FOOT
.NOFLAGS SUBSTITUTE

.!* and the title to go at the top of each page
.TITLE LITES2 Release notes
.PAGE
.HL 1 ^&CONTENT\&
This document describes recent changes to the Laser-Scan LAMPS software
package LITES2. This package provides facilities for display and editing
of geographic and map data. 

.P 0
Details of LITES2 functionality and commands can be found using the HELP
facility in LITES2, and in the latest edition of the LITES2 Reference
Manual. Supporting information is to be found in the documentation for the
MAPPING package. 

.P 0
This document covers changes to package LITES2 since the previous
general release of LAMPS software, which was frozen ready for issue in
August 1990. At that time, the extant version of LITES2 was
described as V3.2 of 19-July-1990. See the LITES2 release notes for the
previous LAMPS release for information about earlier changes. 

.P 0
The current version of LITES2 is now V3.3.


.HL 1 ^&ENHANCEMENTS\&
The following significant enhancements are included in LITES2 V3.3
.LIST
.LE;The LITES2 macro language now supports statement labels
in macros and other command lines. These may be
used as the target of JUMP, JTRUE, and JFALSE commands to allow simple
programming of loops and conditional branches in macros. See the sections
below concerning labels, JUMP commands, and ABORT command.
.P 0
The label facility complements the recent facilities in LITES2 V3.2
for parameters and arguments to macros. Recent enhancements to the UILGEN and
UILMENUS programs for the Motif version provide a flexible `point and 
click' graphical user interface (GUI). Together they make the LITES2 macro 
language and UIM menu language into a powerful toolset for developing complex
tailored GIS applications.

.LE;Support is now included as an option in the Motif version of LITES2 
for the generation of hardcopy output via the PLOT command (see below).
Initially, only the Calcomp 5800 and Versatec 3600 electrostatic plotters
are supported as output devices.
.END LIST

.PAGE
.HL 1 ^&NEW OR CHANGED FACILITIES IN V3.3\&
The following facilities have been added, implemented or had their
actions altered:- 
.LIST
.LE;New PLOT commands - for generation of hardcopy output from the MOTIF
version of LITES2. These commands require an appropriate optional `auxiliary
GKS shared image'. They are primarily intended for use within a layered
GIS application, such as the Laser-Scan METROPOLIS or HORIZON products.
.LIST '*'
.LE;PLOT ADVANCE -
Performs a clear operation on the plot device. Depending on the plotter in
use, this will advance to a new sheet of paper, or load new film etc.
.LE;PLOT AUTOSCALE -
Specifies that IFF and image data drawn into the plot is to be scaled to
fit the available plotting area. This is the default. See PLOT SCALE and
PLOT RATIO for details of setting an absolute plot scale.
.LE;PLOT CLIP n -
Controls whether annotations sent to the plotter are clipped at the
boundary of the drawing area. Specify 1 to clip (default), or 0 not to
clip. The picture from the primary or secondary display is always clipped.
.LE;PLOT CLOSE -
Finishes off a plot and closes the connection to the plot device.
.LE;PLOT LIMITS xmin xmax ymin ymax -
This command is not implemented - the limits for the display are used.
.BR
Sets the coordinate range for the plot when the various annotating
DRAW commands are used. 
If the limits do not define an area with the same aspect ratio
as the plot area, then part of the plot area will not be used. If this
command is not given, or the values are omitted, then the default limits
(the same as the LITES2 working area) are used. The plot limits may
be changed at any time. 
.LE;PLOT LOAD filename -
Loads the specified GKS shareable image for hardcopy plotting. This
command must be given before a plot can be started with PLOT OPEN.
GKS shareable images for different plot devices are supplied by Laser-Scan,
and will normally reside in the LSL$PUBLIC__ROOT:[PLOTTING.EXE] directory,
which is included in the LSL$EXE search list. They have names like GKSxyzSHR.EXE
where xyz is some indication of the plotter device, eg CAL5800.
The specified filename may be either a logical name (which must translate
to a device, directory, and filename, the file extension of .EXE being
assumed), or an actual file name (in which case a default of LSL$EXE:---.EXE
is applied).
For example, to plot on a Laserplot, one might give the command
PLOT LOAD GKSLPSHR.
.LE;PLOT OFF -
Causes output from drawing commands to revert to its normal destination,
rather than the plotter.
.LE;PLOT ON -
Directs any output from drawing commands to the plotter.
.LE;PLOT OPEN -
Opens the plot device and begins a plot. Use PLOT ON and PLOT OFF commands
to direct drawing output to the plotter. The plot is terminated by a
PLOT CLOSE command.
.LE;PLOT ORIGIN xoff yoff -
Set the origin of the drawing area. The position of the drawing area
specified using PLOT POSITION and PLOT SIZE commands is offset by the
specified amount in mm.
.LE;PLOT PIXELS n -
Sets the maximum number of image pixels in either x or y to be drawn into
the plotting area when plotting images. Setting a low value will force
subsampled views to be drawn, which might save time, or prevent pixels
far too small for the plotter from being drawn. The default number depends
on the particular plotter in use.
.LE;PLOT POSITION n -
Set the plotting position within the drawing area. Position 0 is bottom
left, 1 is centre left, 2 is top left, 3 is bottom centre, and so on up
to 8 which is top right. The default is position 0.
.LE;PLOT RATIO r -
Specifies the ratio between the scale of the plot and the true scale of
the data, thus the command PLOT RATIO 1.0 will produce a plot at its
true scale (provided that this has been set correctly by SCALE commands,
or by default).
.LE;PLOT SCALE r -
Specifies the source scale of the plot to be produced. For this to work,
the IFF data must have a source scale defined in its map descriptor.
For example, if a map is a 1:1250, then the command PLOT SCALE 2500
will cause it to be plotted at half the size.
.LE;PLOT SIZE x y -
Set the size of the plotting area in mm. The default is the full size
of the available area on the plotter. The size is set to this default
by the PLOT OPEN command, so any PLOT SIZE commands should come after
PLOT OPEN.
.LE;PLOT TYPE n -
Sets the workstation type for use in future PLOT OPEN commands. Appropriate
numbers (if required) are given in the section of the FPP Plotters User
Guide for the plot device concerned.
.END LIST
.LE;New system variables
.BL
.LIST '*'
.LE;$ABSX and $ABSY contain to absolute cursor position as DOUBLE values.
They are equivalent to $CURSX + $MDOFFSET1 and $CURSY + $MDOFFSET2.
.LE;$GT__FC must be followed by an integer feature code. Contains the
corresponding integer graphical type.
.LE;$OPTPSIZE contains the current setting of ENABLE PSIZE.
.LE;$OVERLAY contains the overlay that the current found feature is selected
to be drawn into (using OVERLAY SELECT), or 0 if no overlay is selected.
.END LIST
.LE;The number of user variables allowed has been increased from 500 to
1000.
.LE;The number of macros allowed has been increased from 500 to 1200.
.LE;ASK STRING FILE__FIND filespec. Returns in $ASK__CHAR1 and $ASK__INT1
the full file specification of the file. If the file does not exist, 0 is
returned in $ASK__INT1. If the filespec contains wildcards ("_*", "_%", or
"..."), then repeated commands with the same filespec will return subsequent
matching files. This command is useful when writing macros to manipulate 
files external to LITES2.
.LE;CHANGE FSN and CHANGE MAP on linear type feature now updates
the maximum FSN for the map, ditto CHANGE FSN for symbol/text. It is now
possible to CHANGE FSN to the same FSN as a feature has already, provided that
a CHANGE MAP (whilst in a COPY or MODIFY sequence) has been done already.
.LE;New user routine USRGMH to retrieve (and optionally
write back) a map header and map descriptor. This is called after USRINI, if
USRINI returns a code _> 100 the difference between 100 and the return code
indicates the map number). It returns the same return codes as USRINI. There
are arguments to say if the map header and map descriptor are to be written
back. Only the same number of bytes may be written back. See Appendix A.
.LE;Allow the setting of flags in new type OS map headers via the OPERATION
OS__MH__FLAGS command. See the documentation for the OSTF module of the 
CONVERT package for more information on the new OS map header.
.LE;VIEW RENDER command now checks whether an image is outside the view window.
.LE;The acceptance test procedure, included in the LITES2 documentation set,
has been altered to reflect the fact that "DI G" was no longer unambiguous
for "DISABLE GRAPHICS". The command has been altered to "DISA G".
.LE;Statement labels can now be defined in macros.
Any command may be preceded by a label. This begins with ".",
consists of letters, numbers, and underline characters, and is terminated by
":". The case of the letters in a label is not significant. The label may be
used as a target for JUMP, JTRUE, and JFALSE commands (qv), and must be in the
same command line, or macro as the command which refers to it. These is no need
for labels in different macros to be different, but if duplicate labels occur
in the same macro, then the first one will always be found.
.LE;The JUMP, JTRUE, and JFALSE commands now allow their target to be a label,
in addition to a macro as before. If the target begins with ".", then it
is assumed to be a label, and is searched for in the current macro or
command line.
.LE;ABORT ALWAYS is the same as ABORT TRUE and ABORT FALSE, except that
it aborts the current macro or command line unconditionally. This may
be useful now that jumps to labels may skip the ABORT command and still
execute commands after it. ALWAYS is the default secondary for ABORT. 
.END LIST

.PAGE
.HL 1 ^&PROBLEMS FIXED IN V3.3\&
This release corrects the following problems that have been found to exist
in  LITES2 Version 3.2 :-
.LIST
.LE;Avoid IFF 'NF' errors which could arise during the construction of
feature with more than 200 points, if many maps were in use, and features
in the other maps were found during the construction.
.LE;Do not attempt to use hardware line styles (LITES2 hardware does not
support these) even if they are specified in the FRT file.
.LE;Avoid division by zero, and incorrect positioning, when using the table
cursor after an OS Setup. This bug was introduced in version 3.2, and was
patched to correct it in some versions of 3.2.
.LE;Forbid the command IMAGE STEP 0.0, which caused division by zero.
.LE;Ensure that DRAW FEATURE draws into the correct ANNOTATION OVERLAY.
Previously features with more than 200 points did not correctly select
the overlay, and could be drawn in the wrong colour.
.LE;Allow the MARGIN command to operate correctly, even after DRAW IFF had
been used to draw a non-OS map.
.LE;UIS and MOTIF versions. When using ENABLE SECONDARY (to get a second
window containing the map picture), then if SUPPRESS PRIMARY was done in
order to just redraw the secondary, no drawing at all took place.
.LE;Fix problem where END or ABANDON from WINDOW would return to SETUP
state, rather than READY. This took place after an ABANDON from PICTURE SETUP
had been done, and was rectified as soon as a ZOOM command was used.
.LE; Correct bug (introduced in version 3.1) where the REGION tests could
fail when a vertex of the region had the same y coordinate as the point
being checked (SPR 956).
.LE;3-Dec-1990.
.BR;New version of LITES2MOTIF V3.3 released which has been patched to
correct a problem that could cause bit image files to be drawn incorrectly
(sometimes the image was sheared, and at other times just took longer to
draw than necessary).
.LE;20-Dec-1990.
.BR;New versions of LITES2DSRSHR and LITES2KRISSSHR released. These are
required with any LITES2 after V3.0 to run the KERN DSR stereoinstrument.
Attempts to use the old versions of these produced a continuous stream
of "No input" messages from LITES2, and the DSR input did not work.
.LE;11-Jan-1991.
.BR;New version of LITES2MOTIF V3.3 released which has been patched to
correct a problem that caused annotations drawn onto the hardcopy device
with ANNOTATION OVERLAY non-zero not to appear.
.LE;17-Jan-1991.
.BR;New version of LITES2KRISSSHR released. This correct a problem with
the ENABLE KRISS REGISTRATION command which was present in the version or
20-Dec-1990.

.END LIST

.PAGE
.HL 1 ^&CHANGES TO ANCILLARY PROGRAMS FOR V3.3\&
This release includes the following changes to ancillary programs included 
with LITES2 Version 3.2 :-
.LIST
.LE;UILMENUS and UILGEN - add LABEL LABEL command to allow a LABEL widget 
to have its text label changed.
.LE;UILMENUS and UILGEN - allow tab, return, and arrow keys to move between
text input fields in the same box.
.LE;30-Nov-1990.
.BR;New version of UILMENUS released which corrects a problem with very
long "DO" strings, resulting from the substitution of a long filename from
a file selection box. Previously, if the string exceeded 256 characters, then
an access violation could result. The new version allows strings (after
substitution) up to 512 characters, with any additional characters being
ignored. Note that LITES2 is limited to reading 255 characters in a single
command line, so a single "SEND" string should not exceed this length.
.P 0
Also, when drawing on a screen with a different number of pixels than
1024x864, then take account of both dimensions rather than just the width.
This will means that e.g_. on a 1280x1024 screen, there will
now be a small gap at the right, rather than items attempting to be off the
bottom of the screen (and possibly being pushed back on by the window
manager.
.LE;15-Feb-1991.
.BR;New versions of UILGEN and UILMENUS released. The ADD and REMOVE
commands in UILMENUS now allow an individual named widget to be added
or removed, in addition to whole boxes as supported previously. The
WIDGET NAME command in UILGEN should be used to give a name to any widget
for which it is intended to use ADD or REMOVE. .UIL and .UID files produced
using the old UILGEN will work with the new UILMENUS, but it will only
be possible to add or remove certain types of widgets.
.LE;26-Feb-1991.
.BR;New version of UILMENUS released. A command qualifier /LOGICAL and
a command DEFINE have been added to define a specified job logical
name. This is intended as a secondary mechanism for commmunicating to
the parent process when UILMENUS is run as a subprocess.
.P 0
A new version of the UILMENUS User Guide (V1.3) documents these changes.

.END LIST

.APPENDIX ^^Changes to User Routines to manipulate file headers
.HL 1 ^^^&Initialise\&
This is the first subroutine to be called, whenever the USER command is
given. 
There is only one routine that can be supplied in this group - USRINI
.Bl
It is used to pass initial data to the shared image.  This initial data 
consists of:-
.LIST "*"
.LE;the integer argument that was given with the USER command.
.BR; This integer is often used to define which of several different
operations is to be carried out by the shared image. 
.LE; the optional string argument that may be given with the USER
command. Any other information that is required by the user routines can
be passed in this argument and subsequently decoded. 
.LE; the current cursor position.
.BR; This is passed in the units that the data is stored in, in the IFF
file(s). If there are multiple maps, any offset relative to the south
western map will have been added. 
.LE; the current state
.LE; a flag to say if there is a found object or not.
.LE; some data about the found object.
.BR; This is information that can be passed in a fixed format.  Data
about the feature that is of variable length (lists of ACs and
coordinates) is dealt with by the routines get ACs and get coordinates
(see below) 
.ELS
.TP 8
Having received this information, the subroutine must set the return
code, to tell LITES2 which subroutine to call next. The possibilities
are:- 
.LS " "
.LE; "0" means that no more subroutines will be called.
.LE; "1" means call routines to get the ACs for the feature, and the
coordinates. 
.LE; "2" means call routines to get coordinates of the feature, but not
the ACs. 
.LE; "3" means call routines to get the ACs for the feature without the
coordinates. 
.LE; "4" means that the next subroutine to be called is to do the 
processing.
.LE; "5" means that the next subroutine to be called is the one that 
completes the command.
.LE; "_> 100" means call the routine that allows the map header and map
descriptor information to be edited.
.ELS
Any other value will cause a fatal error (see routine USRERR below for
details on error handling).
.BR; Entering 1,2 or 3 when there is no found feature will also cause a
fatal error.  Attempting to get ACs from a feature that has none will
cause the routine not to be called, and the next routine called will 
depend on the value of the return code supplied.
.BR; If the routine USRINI is not supplied in the shareable image, or if
the return code is greater than 100, and the routine to get map header
information is not supplied, USRDO will be the next routine that is
called.
.TP 15
.!
.HL 1 ^^^&Getting and writing file header information\&
This routine is used to read and write information that is particular to
the specified map. There is only one routine that can be supplied in this
group - USRGMH
.BL
This subroutine is used to read any map header (MH) and map descriptor
(MD) entries associated with the specified map. The map is specified by
giving a return code _> 100 - the map is the difference between the
return code and 100.
.BR; It supplies the map header and the map descriptor (as arrays of
16 bit integers - INTEGER_*2 in Fortran) and allows them to be altered
and optionally written back to their files.
.B
.TP 6
The possible return codes are:-
.LS " "
.LE; "0" means that no more subroutines will be called.
.LE; "1" means call routines to get the ACs for the feature, and the
coordinates. 
.LE; "2" means call routines to get coordinates of the feature, but not
the ACs. 
.LE; "3" means call routines to get the ACs for the feature without the
coordinates. 
.LE; "4" means that the next subroutine to be called is to do the 
processing.
.LE; "5" means that the next subroutine to be called is the one that 
completes the command.
.LE; "_> 100" means call this routine again, with the data from the
specified map (see above).
.ELS
.TP 15
.!
