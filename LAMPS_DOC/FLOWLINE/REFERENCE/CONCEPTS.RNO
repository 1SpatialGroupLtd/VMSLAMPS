.TP 10
.PAGE
.NO FILL
^*--------------------------------------------------------------------------------\*
^*DATABASE CONCEPTS AND DEFINITION\*
.INDEX DATABASE CONCEPTS AND DEFINITION
.BLANK
^*--------------------------------------------------------------------------------\*
.HL 1 ^^^*Introduction\*
.lm +10
.p0;
.fill
The flowline control system utilises Digital Equipment Corporation's
relational database system VAX Rdb/VMS.  Flowline information is  stored in a
FLOWLINE database which is created on system installation. This database
is situated in the directory referenced by the logical name LSL$FLN__DATABASE
.p0
Operators and managers interact with the database using the LAMPSCONTROL 
program, which is described in Chapter 5.
.p0; The design of a production  flowline is by nature a complex process. 
Very often several design iterations will be required to 
produce the final result. Even when a flowline has been established in 
production, it may be required to be modified in the light of 
changing circumstances, such as increased operator proficiency, or differing 
requirements.
.p0
It is beyond the scope of this document to describe the methodology of flowline
design. This chapter describes the concepts necessary for a flowline, once
designed, to be defined  in the FLOWLINE database and manipulated by the
LAMPSCONTROL program. 
.p0
Throughout this document various terms are used to describe types of
information stored in the database. These are defined in detail below with
reference to the example DIGITISE flowline (Figure 2.1) which represents a
simple map digitising process.   Words in bold type reference terms defined
elsewhere. A full list of the information stored in the database relations is
given in Appendix A. 

.p0
The final section of this chapter describes general flowline 
definition procedures.
.tp 5
.bl
.lm -10
^*--------------------------------------------------------------------------------\*
.HL 1 ^^^*Flowline\*
.index Flowline
.lm +10
.p0
A flowline is a well defined, independent sequence of operations which 
is designed to perform a ^*job\* a number of times on different datasets.
Figure 2.1 represents an entire flowline designed for
map  digitising. Each flowline is built from a series of ^*elements\* which
are connected together by ^*wire\*s. 
Associated with each flowline is a DCL command procedure. 
 When a job is launched on the flowline, the flowline command procedure
is used to create the job command procedure, which is used throughout the
duration of the job's existence.
.p0
More than one flowline may be defined on the database at one time.
Each flowline is identified by a unique user defined 20 character identifier.
.bl
.tp 5
.lm -10
^*--------------------------------------------------------------------------------\*
.HL 1 ^^^*Element\*
.index Element
.lm +10
.p0
An element is a single operation within a ^*flowline\*. In Figure 2.1 each 
individual box represents an element. 
.index Conditions
Defined with each element are its conditions for starting which determine
when it may be performed on a ^*job\*. The conditions are specified
by a logical expression defined in terms of ^*wire\*s which require to be 
active before the element may be carried out.
In the example in figure 2.1 for element EDIT, the conditions are: 
.nofill

             "3 AND 4" 
.fill
.P0
This specifies that both wires 3 and 4 require to be active before 
the job may be performed on the element. The logical operators "OR" and
"NOT" and up to 8 levels of brackets may also be used in the definition
of the conditions.
.p0
.index Outcome
Each element may have a number of different possible numeric outcomes. 
These define which wires become active when the element is completed on the job.
An outcome may reference more than one wire, while more than one outcome may
reference the same wire. In figure 2.1 element CHECK has 2 outcomes. Outcome 1
activates wire 9, while outcome 2 activates wire 8. These outcomes and wires
are tabulated in Table 2.1
.p0
The actual execution of the element is carried out by the defined element
command procedure, and optionally the associated ^*procedure\* command file. The
element command procedure is responsible for passing valid outcomes to the
LAMPSCONTROL program. 
.p0
Each element is identified by 20 character identifier which is unique to
the flowline of which it forms a part.
.bl
.tp 5
.lm -10
^*--------------------------------------------------------------------------------\*
.HL 1 ^^^*Job\*
.lm +10
.index Job
.p0
A job is a unit of work passed through a ^*flowline\*. A job is created on a
specified flowline, and for a specified ^*project\*. In the DIGITISE flowline in
Figure 2.1 a job would be a specific map sheet which is to be digitised. When a
job is created a DCL command procedure is created which contains job-specific
information, and which is executed before the job passes through an element. A
job is started after this initial command procedure has been created, and is
complete when the last ^*element\* of the flowline has been reached. More than
one job may be active on the flowline at a given time. 
.p0
.index Job status
Associated with each job is a status value, which may take the value
"Created", "Active" or "Held". At any time a job may be held to 
prevent temporarily further activity taking place, while the "Created" status
indicates a job which has been created by the manager, but has not yet been
launched on the system.
Start and finish dates and times are also recorded for each job. 
.p0
On job-completion the main  record for the job is deleted from the database.
A history record is created which holds all information about the job 
and which may be used for subsequent reporting operations.
.p0
A job is given a 20 character identifier, which is unique to the job 
running on the specified project.
.bl
.tp 5
.lm -10
^*--------------------------------------------------------------------------------\*
.HL 1 ^^^*Task\*
.lm +10
.p0
.index Task
A task is the piece of work which is required to be performed by an operator
or sequence of operators to complete an ^*element\* for a particular ^*job\*. 
Tasks are created on the system as flowline activity takes place. 
.p0
When a task is complete, a series of ^*wires\* become active depending on the
outcome of the task. Each element at the end of the probed wires is then 
tested to determine if conditions are such that subsequent tasks may be 
created. In this way a job progresses through a ^*flowline\*.
.p0
.index Task status
Status values are associated with each task to show: -  
.list
.le; Activity status -  "Active",  "Inactive", "Offline" or "Held". A task may
become held as a result of an error in task execution, or by the intervention
of the manager. Only "Inactive" tasks are available for all operators 
to perform.
An offline task is one which is not performed on the computer system. It
may only be completed by the operator who started it. 
.index Progress Status
.le; Progress status -  "Started" or "Not Started". This is used to 
record whether any work has been carried out on the task. This information 
is passed to the element command procedure by LAMPSCONTROL. 


.end list
.p0
As tasks are completed records are deleted from the database and history 
records are created for subsequent reporting operations.
.p0
.lm -10
.bl
.tp 5
^*--------------------------------------------------------------------------------\*
.HL 1 ^^^*Session\*
.lm +10
.index Session
.p0
A session is a period of database work on a task.
When an ^*operator\* starts a task a session record is created in the 
database. More than one session may be required to complete a specific
task.
.p0
Stored in each session record is the operator, ^*workstation\*, 
timing information, and completion status. 
.p0
The session completion status returned to the LAMPSCONTROL program by the
element command procedure determines whether the task may be completed at the
end of a session. The status takes the following values: -  
.index Session status
.list
.le;Hold status means that an error has occurred which requires that the 
task is given "Held" status, and requires management intervention.
.le;Continue status indicates that the task has not been completed, and that
further work is required. 
.le; Restart status means that the work done on the task has been abandoned.
Subsequent sessions will begin the task  from scratch.
.le;Complete status indicates that the task has been completed.
.le;Sub-flowline status indicates that jobs have been launched on a 
^*sub-flowline\* on this task.
.end list
.p0
When a task is completed all associated session records are copied to 
the historical record which may then be used for reporting purposes.
.p0
.lm -10
.bl
.tp 5
^*--------------------------------------------------------------------------------\*
.HL 1 ^^^*Wire\*
.index wire
.lm +10
.p0
Wires link the ^*flowline elements\* together,  and are used in two ways:-
.list
.le; As tasks are completed wires become "active" depending on the ^*task 
outcome\* passed to the LAMPSCONTROL program from the element command procedure.
These wires remain active until the ^*job\* is completed, unless the job
loops back to repeat an earlier element (or is moved back manually). In
this case, wires activated by the elements which are moved back over are
de-activated again.
.le; On a specific task completion the element at the end of each wire
probed is tested to determine whether the ^*conditions\* are such that a task
may be completed. The conditions may be fulfilled both by wires activated
by the current task completion, or wires activated previously. These wires
need not be defined to end on the element in question - they may indicate
something that did, or did not, happen at an earlier stage in the flowline.
.end list
.p0
Each wire is identified by a 20 character identifier which is unique to 
a specific flowline. The identifier need not be a number, although the
use of numbers is traditional in some flowlines.
.p0
.index wire activity
The "activity" of a wire is related specifically to a job. Hence there 
is no danger of one  job influencing the progress of another.
.p0
.lm -10
.bl
.tp 5
^*--------------------------------------------------------------------------------\*
.HL 1 ^^^*Project\*
.lm +10
.index Project
.p0
A project is a set of inter-relating jobs. It need not be confined to  
one ^*flowline\*. A DCL command procedure is created for a project, 
which is executed prior to any task running on a job in the project.
.p0
In the mapping example a project may be particular set of map sheets 
which require to be digitised for a particular purpose.
.p0
.index Project status
Associated with each project is a status which may either be "Active" or
"Held". Thus a manager may temporarily suspend work on a project by setting the 
status to "Held".
.p0
A project is identified by a single 20 character identifier which is 
unique to the entire database.

.bl
.tp 7
.lm -10
^*--------------------------------------------------------------------------------\*
.HL 1 ^^^*Procedure\*
.lm +10
.index Procedure
.p0
A procedure is closely associated with an ^*element\*, 
but differs in that it need
not be restricted to a single position within a flowline. Thus procedures are
associated with specific operations which are used repeatedly either within one
flowline  or on  different flowlines. The command procedure used to execute a
procedure will usually only contain the necessary commands to run a particular
program or simple sequence of programs. 
.p0
An element specification may optionally include a reference to a procedure, 
but alternatively, all element processing may be carried out by the element
command file alone.
.p0
A procedure is identified by a single 20 character identifier which is 
unique to the entire database.

.bl
.tp 5
.lm -10
^*--------------------------------------------------------------------------------\*
.HL 1 ^^^*Operator\*
.lm +10
.index Operator
.p0
An operator is a person who is authorised to work on the flowline system.
.p0
Operators may be authorised to work on  ^*projects\*, ^*jobs\*, ^*flowlines\*,
^*elements\*, ^*procedures\* or to make use of facilities within 
the LAMPSCONTROL program.
.p0
Each operator may have associated a number of authorisation records 
of the form:- 
.bl
.index authorisation
.index operator authorisation
.nofill
 operator  authorisation__type   Allowed   Identifier
.fill
.blank
The  authorisation type defines which type of database entity is being
authorised. It is specified by the following two character codes:-
.nofill
.list " "
.le; "EL"  - element
.le; "DB"  - access to the flowline database by means of the LAMPSCONTROL program
.le; "FL"  - flowline
.le; "JB"  - job
.le; "PC"  - procedure
.le; "PJ"  - project
.end list
.fill
.p0
 The identifier denotes which specific flowline entity is being
authorised. For all but the "DB" authorisation type the identifier may be
any entity stored in the database -  for example element MERGE in the example
DIGITISE flowline. The "DB" type my only take the following identifiers, 
which relate to facilities available with the LAMPSCONTROL program:-
.list " "
.nofill
.le; "MENU"     -  for use of LAMPSCONTROL's menu facilities
.le; "REQUEST"  -  to request tasks from the database
.le; "MANAGE"   -  to perform management functions
.le; "REPORT"   -  to perform reporting functions
.end list
.fill
.p0
The "Allowed" (Yes/No/Everything) field indicates whether an operator is being
authorised to use or prevented from using a particular database entity or
LAMPSCONTROL facility. "Everything" indicates the operator is authorised to 
work on all of the database entities with the specified authorisation type, 
and hence the Identifier is not required for such records. Note that 
operators who are authorised for "Everything" for a particular type, may 
also have negative records for the same type to prevent work on specific 
entities.
.p0
The following is an example authorisation record.
.bl
.nofill
 Operator = "JOHN"  
 Authorisation__type = "Element"  
 Allowed = "Yes"   (ie. positive)
 Entity Identifier = "EDIT"
.fill
.bl
This record authorises an operator to perform work on element "EDIT".
.p0
The following rules are used for authorisation types. Each rule is
applied in turn, stopping once a decision is reached.
.list
.le;If the operator has an explicit "Yes" for the entity in question, then
authorised.
.le;If the operator has an explicit "No" for the entity in question, then
not authorised.
.le;If the operator has an "Everything" record for the particular
authorisation type, then authorised.
.le;If the operator has one or more "Yes" records for other entities of the
same authorisation type, then not authorised.
.le;If one or more other operators has an explicit "Yes" record for the entity
in question, then not authorised.
.le;If none of the above apply, then authorised.
.end list 
.p0
To summarise the rules less formally:
.list
.le;The absence of any positive authorisation records for a particular type
implies that an operator is authorised for ^*all\* the entities of that type
except for any negative records which are present (but see 3 below).
.le;The presence of any positive authorisation records of a particular type
implies that an operator is not authorised for any non-present entities of
that type.
.le;The presence of a positive operator authorisation for a particular entity 
implies that other operators are not authorised for that entity 
unless they have a specific positive authorisations for the entity or
 an "Everything" "Allowed" field for the relevant authorisation type. 

.end list 
.p0
In practice these seemingly complex rules lead to a simple method of
authorisation. If for example, an operator is to be authorised to work on
only a few elements, then positive records should be used. If he is to
be authorised on all elements except for a few, then negative records should
be used. 
.p0
An explicit authorisation for an operator to work on a particular element 
implicitly de-authorises all other operators from work on that element.
 This mechanism is useful if a certain operator (or group of operators)
is the only person who may carry out a particular element. Specific 
records are therefore not required to de-authorise other operators
from carrying out the element. If implicit de-authorisations are not desirable
for an operator working on elements,
then "Everything" in the "Allowed" field should be specified for the "EL" 
authorisation type.  Alternatively the operator may be specifically authorised
to also work on the element.
.p0

         
The following are examples of authorisations which may be set up using 
the example flowline.
.list
.le; DAVID may work on anything except LASERTRAK.
.le; JANE is the only person who may work on LASERTRAK
.le; JIMMY may work on anything in PROJECT "BEN__NEVIS"
.le; JOAN may work on the "BEN__NEVIS" and "SOUTH__COAST" projects doing 
 plot checking, and Map editing.
.le; Mr__SMITH may perform management, request, and report functions. 
.end list
.p0
Also recorded with each operator is the project, job, and element on which
he last worked.  This information is used by the LAMPSCONTROL program 
to indicate the preferred task when he next logs into the system.
.p0
An operator is identified by a 20 character name which should be unique 
to the flowline database.
 
.p0
.bl 
.tp 5
.lm -10
^*--------------------------------------------------------------------------------\*
.HL 1 ^^^*Workstation\*
.lm +10
.index workstation
.p0
A workstation is a terminal device which is authorised to be used 
by the flowline system.
.p0
Workstations may be authorised for use on  ^*projects, jobs, flowlines, 
elements, or
procedures\*. Using the map digitising example, non-graphics terminals could
be prevented from being used for map editing.
Authorisation records may be both positive - to allow a workstation to be used
for something, or negative - to prevent something being done, or "Everything" 
to allow workstations to do all entities. They
 are defined 
analagously to operator authorisation (see previous section).
.p0
A workstation is identified by a 20 character name which should be unique 
to the flowline database.
.p0
.bl
.tp 5
.lm -10
^*--------------------------------------------------------------------------------\*
.HL 1 ^^^*Static and Dynamic Database Entities\*
.lm +10
.index Static entities
.index Dynamic entities
.p0
Some of the database entities described above can  be described as static, 
because they are defined at the flowline definition phase, while others are
dynamic because  the information stored is in a constant state of flux during
flowline activity.
.p0
Static entities are ^*Flowlines, Elements, Procedures and Wires\*.
Dynamic entities are ^*Projects,  Jobs, Tasks, Sessions and wire activity\*.
^*Operators and Workstations\* are a mixture of the two - some operator 
information such as his name is static, while the record of the current job,
 project and element is dynamic.
.p0
These concepts apply to the associated command files also. Flowline, element
and procedure command files are static because they are written during 
database definition. Project and job command files are dynamic because they
are created automatically when jobs and projects are launched on the system.
.bl
.tp 5
.lm -10
^*--------------------------------------------------------------------------------\*
.HL 1 ^^^*Historical Information\*
.lm +10
.index Historical Information
.p0
Historical information is stored in the database for jobs, tasks and sessions.
Whenever a job completes, the main job database record is deleted and historical
record is created. Similarly when a task completes, the task and associated
session records are also archived.
.p0
The historical information is maintained for use by the various reporting
facilities of LAMPSCONTROL. 
.bl
.tp 5
.lm -10
^*--------------------------------------------------------------------------------\*
.HL 1 ^^^*Priorities\*
.lm +10
.index priorities
.p0
Priority values may be associated with ^*flowlines, elements, procedures, 
projects and jobs\*. The LAMPSCONTROL program makes use of these priorities 
to determine the order in which projects, jobs and tasks are offered to 
the operator. Larger priority values indicate greater priority.
.p0
Priorities are specified as integer values between 1 and 16. Each task 
has an implicit priority related to its creation time. Thus a task gains
priority, the longer it remains on the system. 
.p0
Priorities themselves have the following order of precedence:
.nofill
.bl
 Project 
 Flowline 
 Job 
 Element 
 Task
.fill
.p0
Thus for example, if for example all elements have the same priority, then
tasks are listed only in order of task priority.
.p0
The record of the current project, job and element for a particular 
operator takes precedence over all the above priorities.
.p0
It should be noted that the priorities normally only affect the 
order in which information is presented to the operator. 
Provided the default /MENU qualifier is specified with the LAMPSCONTROL 
program, then at any time
he may carry out any of the tasks for which he is authorised, on his
current workstation.
.bl
.tp 6
.lm -10
^*--------------------------------------------------------------------------------\*
.HL 1 ^^^*Sub-flowlines\*
.lm +10
.index Sub-flowlines
.p0
A sub-flowline is effectively a sub-routine which may be called from a 
single element of the main flowline. The sub-flowline itself is defined in
the same way as a normal flowline. The specified element to run the sub-flowline
may start a variable number of sub-jobs on the sub-flowline. Only when all 
these jobs are complete is the task on the calling element complete.
.p0
An example mapping application for sub-flowlines would be if a map sheet
was required to be split into smaller sections for digitising, and 
post processing. Figure 2.2 shows this sub-flowline which could be inserted in
element DIG__CONT in Figure 2.1. This would also require a further element in
the DIGITISE flowline to merge all the sections together. Only when all the 
sections of the map are complete is the main job free to proceed.
.p0
The relevant element command procedure is responsible for starting jobs on a 
sub-flowline. Chapter 4 contains further information on all flowline command
files.
.bl
.tp 5
.lm -10
^*--------------------------------------------------------------------------------\*
.HL 1 ^^^*Parameters\*
.lm +10
.index Parameters
.p0
One of the important features of the FLOWLINE package is that information 
which is relevant to a particular job may be made available to tasks by means 
DCL symbols assigned values in the job command procedure for that job. 
(see Chapter 4 for a full description of command file creation). This 
information is normally entered when the flowline manager launches a job
on the system. 
.p0
In some cases, however, it may be necessary for particular tasks to pass 
information either to immediately succeeding tasks, or to any subsequent 
tasks in the job for which it may be required.
The flowline database holds such information as ^*Parameters\* of which 
there are three types:- . 
.list
.le;A ^*global parameter\* which has been set up by a 
task is available for use in any subsequent tasks in the job.
.le;A ^*local parameter\* is passed to all 
immediately succeeding tasks in the job. (ie. tasks on those elements 
joined by a single wire to the element which creates the parameter). 
Local parameters may also be used to pass information from session to 
session within a task.
.le;An ^*external parameter\* is used to pass information from a 
sub-job to the enclosing outer-job. When a sub-job completes, any external 
parameters are translated into local parameters in the outer task. 
.end list
Parameters should be valid DCL statements and will normally be symbol
assignments. LAMPSCONTROL ensures that the DCL statements are executed prior to
the carrying out of the relevant tasks in the job. 
.p0
Chapter 5 describes the methods by which parameters may be set up in 
element command files.
.bl 
.tp 5
.lm -10
^*--------------------------------------------------------------------------------\*
.HL 1 ^^^*Flowline Definition\*
.lm +10
.index Flowline Definition
.p0
The definition of a flowline database may be carried out using the
appropriate options on the top-level LAMPSCONTROL management menu. Screen forms
are provided for the interactive input of the static flowline, element, wire and
procedure information all of which is required for complete flowline definition.
 
.p0
If a flow diagram has not been created  during the flowline design phase, 
then it is essential that one should be prepared before definition 
in the database, for all but the simplest applications. The flow diagram, 
not only facilitates the definition procedure, but also, with careful 
annotation, serves as a record of the flowline as it is stored in the 
database.  It will also prove valuable as a "debugging" tool. 
.p0
A flow diagram for the database definition has slightly different conventions 
from usual. The flow diagram structure should be composed entirely of 
elements and linking wires. Decision boxes are generally incorporated within 
elements, which may be defined to have different outcomes which in turn affect
the outgoing wires.
.P0
Each flowline should have a single start and single ending element, which is
used by LAMPSCONTROL for job launch and completion respectively. In the example
DIGITISE flowline in figure 2.1 these are START__DIG and END__DIG. 
Clearly the start element
does not require initial conditions, and will only have one outcome which should
have a value of 1.  Similarly, the final element has no outcome. 
.p0
Once the flow diagram has been constructed, each of the wires and elements
 should be labelled with unique identifiers. Each wire is also directional, 
therefore an element has both incoming wires and outgoing wires.   
For each element it is necessary to tabulate the initial conditions, and
the outcomes, along with the wires which are affected. This is done for 
the example flowlines in Tables 2.1 and 2.2.
.p0
Once a flowline has been entered into the system the various parameters may be
examined either on a terminal screen or printed using the reporting facilities 
of the LAMPSCONTROL program. The various static command files which are 
required should then be designed. Chapter 4 contains information on 
command file creation.
.bl
.tp 20
.lm -10

.centre;^*Table 2.1\*
.lit

			        FLOWLINE DIGITISE

 ------------------------------------------------------------------------------
| Element   | Procedure | Conditions     | Outcomes  |  Wires   | Command_file |
|------------------------------------------------------------------------------|
| START_DIG |     -     |     -          |     1     |  1, 2    |      -       |
| DIG_CONT  | LASERTRAK |     1          |     1     |  3       | DIG_CONT.COM |
| DIG_SPOT  | LITESDIG  |     2          |     1     |  4       | DIG_SPOT.COM |
| EDIT      | LITES2EDT | (3 AND 4) OR 9 |     1     |  6       | EDIT.COM     |
|                                        |     2     |  5       |              |
| PLOT      | FPP       |     6          |     1     |  7       | PLOT.COM     |
| CHECK     | CHECK_IT  |     7          |     1     |  8       | CHECK.COM    |
|                                        |     2     |  9       |              |
| MERGE     | IMERGE    |   5 OR 8       |     1     | 10       | MERGE.COM    |
| END_DIG   |    -      |     10         |     -     |    -     |     -        |
--------------------------------------------------------------------------------


.end lit
.tp 15
.centre;^*Table 2.2\*
.lit

                                FLOWLINE SUB

 ------------------------------------------------------------------------------
| Element   | Procedure | Conditions     | Outcomes  |  Wires   | Command_file |
|------------------------------------------------------------------------------|
| START_SUB |     -     |     -          |     1     |   1      |      -       |
| DIG       | LASERTRAK |     1          |     1     |   2      | DIG.COM      |
| POST_PROC | LAPROCESS |     2          |     1     |   3      | POST_PROC.COM|
| END_SUB   |     -     |     3          |     -     |   -      |       -      |
--------------------------------------------------------------------------------

.END LIT
