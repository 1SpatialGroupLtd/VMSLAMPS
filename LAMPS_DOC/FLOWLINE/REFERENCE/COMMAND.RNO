.TP 10
.PAGE
.NO FILL
^*--------------------------------------------------------------------------------\*
^*FLOWLINE COMMAND FILES\*
.INDEX FLOWLINE COMMAND FILES
.BLANK
^*--------------------------------------------------------------------------------\*
.HL 1 ^^^*Introduction\*
.lm +10
.p0;
.fill
The flowline control system relies on DCL Command procedures (Command Files)
to carry out flowline operations. Their development is
by far the most onerous job in the creation of a working flowline.
Bugs in command files are notoriously difficult to trace, and so it is 
essential that a systematic approach is adopted in order to reduce programming
errors to a minimum.
.p0
One of the main requirements of the design of the command file structure is
that operator input of information such as filenames, program command line
information should be reduced to a minimum, thereby reducing the possibility
of production errors caused by operator mistakes.
This may be achieved by ascertaining the information which is constant 
to a project or job. For example in a map digitising flowline, a job 
may consist of digitising map sheet NORTHWEST1 with geographical boundaries
defined by the coordinates  SW(100,100) NE(500,500).
 This information is  constant for the entire job and may be entered by the 
manager when the job is created on the system. File names for this job 
could contain references to NORTHWEST1 while programs which require the 
geographical information may use the pre-determined values.
Element command procedures may make use of this job-specific 
information rather than interrogating the operator.
.p0
The following are the main classes of command file which exist in the 
flowline system.
.list 
.le; Operator Login and Control Command Files
.le; Flowline System Command File
.le; Flowline Command files
.le; Element Command Files
.le; Procedure Command Files
.le; Project Command Files
.le; Job command files
.le; Jacket Command Files
.end list
.p0
Some of these command files are created by the system manager, some are
generated by the LAMPSCONTROL program, while some are produced by others. 
Each of these categories is now considered in detail. 
.p0
It is assumed that the reader is familiar with  DCL (Digital Command
Language) procedures. The DEC manual "Guide
to Using DCL and Command Procedures on VAX/VMS"  provides further information. 
.p0
Examples of the various types of command procedure are held in the directory 
LSL$PUBLIC__ROOT:[FLOWLINE.EXAMPLES].
.p0
.tp 5
.bl
.lm -10
^*--------------------------------------------------------------------------------\*
.HL 1 ^^^*Operator Login and Control Command Files\*
.lm +10
.p0
The login command file sets up various DCL symbols and logical names which may
be used at a later stage. This includes the workstation type and the operators
identity as well as common logical names. 
The command file should then call LAMPSCONTROL with the appropriate qualifiers,
thus immediately presenting the operator with a menu of options to carry 
out on the system.  Following the call to LAMPSCONTROL the jacket command 
command procedure created by the program should be invoked to carry out 
the option selected by the operator. A subsequent loop
back to the LAMPSCONTROL invocation statement in the command file 
ensures that the operator never exits the captive login command file
until the exit option is selected in the program.
.p0
The actual call to LAMPSCONTROL will vary depending on the type of operator 
and workstation. (see chapter 5). The example file 
CONTROL__EXAMPLE.COM  is a general purpose
FLOWLINE controlling command file which takes parameters according to the
type of operator and mode of operation. 
This file could be called from within an operator's login
command file. Such generally used login command files should be stored in the
directory LSL$FLN__LOGIN.
.lm -10
^*--------------------------------------------------------------------------------\*
.HL 1 ^^^*Flowline System Command File\*
.lm +10
.p0
The flowline system command file is executed by the system manager at the start 
of any project. It asks for information relevant to the project as a whole 
such as file extensions to be used for both the command procedures written and 
for the job in its various stages in the flowline. 
.p0
The information gathered by the system command file is written to another 
command file (the project command file) which is executed before any element so
that any part of the flowline can have access to this information. The name of
the project command file to be constructed can be built up from the project
name which is passed to the system command procedure (see chapter 5 on
LAMPSCONTROL variables) although it may be wise to give the system manager an
opportunity to change it. It should be noted that this filename should be
unique throughout the system. As with all command procedures relevant
information such as the name of the command procedure written and the program
status on completion (e.g.'error' or 'complete') be returned to LAMPSCONTROL
via the system variables. 
.p0
Normally one system command file will be required to be written for the 
FLOWLINE system to operate, and will be stored in the directory 
LSL$FLN__PROJECT. The file may be edited using the appropriate option on 
the LAMPSCONTROL Flowline System Definition Menu. 
.lm -10
^*--------------------------------------------------------------------------------\*
.HL 1 ^^^*Flowline Command Files\*
.lm +10
.p0
This command file is run by the system manager at the start of a job. 
It performs a similar task to the system command file in that it writes 
information to a command file for execution before an element is started. This 
command file gathers information relevant to a particular job such as a map 
name, control points and possibly the names of other files to be called later 
in the flowline.
.p0
The name of the job is passed to this flowline command file by LAMPSCONTROL so 
a unique command file name can be constructed from this. The name of the job 
command procedure written, together with the status of the job creation process
(e.g.'error' or 'complete') should be passed back to LAMPSCONTROL via the 
system variables described in chapter 5.
.p0
Normally flowline command files are stored in the directory 
LSL$FLN__"flowline__name"__JOB, which is a search list of a directory on
LSL$SITE__ROOT for transient and locally edited files, and another directory
for more permanent files. A flowline command file may be edited using the
appropriate option on the LAMPSCONTROL Flowline System Definition Menu. Care
should be taken that the edited version goes into the intended directory.
.p0
.lm -10
^*--------------------------------------------------------------------------------\*
.HL 1 ^^^*Element Command Files\*
.lm +10
.p0
The element command files, when called, perform a task on a job. The element 
may contain interactive or non-interactive functions which form an 
identifiable unit. The units should be kept relatively small to fully utilise 
the potential of the system for data integrity. It is suggested that no more 
than one call to an interactive program is made within a procedure so that the 
data can be saved immediately before any more processing is carried out. It is 
however sensible to group calls to automatic functions together in one element 
to make the execution more efficient.
In general the major functions of an element command file are to set up various 
symbols and then call the procedure command file.
.p0
It is advised that symbols for all input and output files which are to be used 
in the element or the procedure command file are set up here. The symbols set 
up by the project and job command files may be used to build the filename. For 
example if 
the symbol JOB__NAME is set up in the job command file and PROJECT__PREFIX, 
EDIT__PREFIX and EDIT__SUFFIX are set up in the project command file to 
identify 
a project and task, then a symbol can be set up in the element file in 
the following way.
.blank
.lm +5
^*$ INPUT__FILE = EDIT__PREFIX + JOB__PREFIX + JOB__NAME + EDIT__SUFFIX\*
.blank
.LM -5
The symbol INPUT__FILE can then be used in the element, or the procedure 
command file it calls, as a unique identifier for a job at a particular stage 
in the flowline. This is important as it means that a uniquely named copy of 
the file remains in situ after each element has executed. The element can 
therefore be rerun with the same initial data in the event of a problem. The 
database also requires other symbols indicating the status of the element to 
be set up and these are detailed in chapter 5.
.blank
.p0
In general the element will pass control to the procedure command procedure 
for the actual processing but if only trivial user interaction is 
required then the element could do this itself. Although an element must be 
unique and each element may 
have only one procedure a procedure may be shared by several elements. The 
database sets up a symbol 'FLN__PROCEDURE__COMPROC' containing the name of the 
procedure to be called. This allows for more flexibility in the system and is 
explained more fully in chapter 5 (Lampscontrol).
.p0
Normally element command files are stored in the directory 
LSL$FLN__"flowline__name"__ELEMENT, but locally edited copies may be in the
directory LSL$FLN__"flowline__name"__SITE. For this reason, element command
files should usually be referred to by the search list
LSL$FLN__"flowline__name"__COM, which includes both of the above directories.
An element command file may be edited using the appropriate option on the
LAMPSCONTROL Flowline System Definition Menu. Care should be taken that the
edited version goes into the intended directory.
.lm -10
.blank
^*--------------------------------------------------------------------------------\*
.HL 1 ^^^*Procedure Command Files\*
.lm +10
.p0
The procedure command procedures are called by the element to do the actual 
work in calling programs and interfacing with the user. All of the files that 
it uses have already been set up as symbols by the element. As 
has been mentioned above it is important that the procedure creates a new 
uniquely named file if any changes are to be made to the input file. This 
ensures that in the event of a problem in the job, it may be 
restarted at any point in the flowline with the original data.
.p0
In some cases a program started up by the command file expects all input to 
come from the file, this is not always what is required and the command 
'DEFINE/USER SYS$INPUT SYS$COMMAND' will inform the program to expect any input
to come from user.
.p0
The database requires various symbols to be set up to give the status of the 
element. As much of the processing within an element is done by this 
procedure, responsibility for maintaining these variables is also assumed. The 
symbols are explained fully in chapter 5 and include, for example, flags to 
show whether the element is complete or if the operator just wanted to end a 
session. The operator may have to be asked questions at the end of a session 
to determine what is happening.
.p0
Normally procedure command files are stored in the directory 
LSL$FLN__"flowline__name"__PROCEDURE, but locally edited copies may be in the
directory LSL$FLN__"flowline__name"__SITE. For this reason, procedure command
files should usually be referred to by the search list
LSL$FLN__"flowline__name"__COM, which includes both of the above directories.
A procedure command file may be edited using the appropriate option on the
LAMPSCONTROL Flowline System Definition Menu. Care should be taken that the
edited version goes into the intended directory.
.bl
.lm -10
^*--------------------------------------------------------------------------------\*
.HL 1 ^^^*Project Command Files\*
.lm +10
.p0
These are written by the system command files (see above) and contain 
information such as file extensions and work directories that are unique to a 
particular project. The project command file is executed before any element is 
called and the information contained within it can therefore be referenced by 
any element executed.
.p0
Normally project command files are stored in the directory 
LSL$FLN__PROJECT. They may be edited using the LAMPSCONTROL Project Status 
Modification Menu.
.bl 
.lm -10
^*--------------------------------------------------------------------------------\*
.HL 1 ^^^*Job Command Files\*
.lm +10
.p0
The job command files are written by the flowline command files (see above).
They are executed, together with the project command file, whenever an element 
is run. This file sets up information related to a particular job for example 
the map scale or corner points could be set up here and then referenced by any 
element in the flowline or any sub-flowlines beneath it.
Normally job command files are stored in the directory 
LSL$FLN__"flowline__name"__JOB. They may be edited using the LAMPSCONTROL Job 
Status Modification Menu.
.lm -10
.bl 
.tp 5
^*--------------------------------------------------------------------------------\*
.HL 1 ^^^*Jacket Command Files\*
.lm +10
.p0
The jacket command procedure is written by LAMPSCONTROL. It sets up the system 
variables used in the other command procedures such as FLN__PROCEDURE__COMPROC 
which tells an element which procedure command procedure it should call. The 
jacket command file also calls the project and job command files to set up 
related symbols before calling the element. 
Normally jacket command files are placed in the directory 
LSL$FLN__JACKET.
.bl 
.tp 5
.lm -10
^*--------------------------------------------------------------------------------\*
.HL 1 ^^^*Sub-flowlines\*
.lm +10
.p0
In addition to the main flowline sub-flowlines may exist. These have the same 
structure as the main flowline and should be able to be run as standalone 
flowlines. This is particularly important for testing and debugging purposes.
A sub-flowline is used when a job becomes subdivided and several 
tasks are required to be done. For example a flowline may be the preparation 
of a digital map, if the map has to be split into segments for digitising and 
processing then a sub-flowline would be constructed for this and the segments 
would be submitted as separate jobs. When all of these are complete then the 
main flowline job may proceed. 
.p0
The command file for an element which calls a sub-flowline is fairly complex.
For each sub-job to be launched, LAMPSCONTROL/CREATE__JOB = "sub-job-name"
should be invoked. Thus a looping structure is required. 
.p0
The flowline command file for the sub-flowline is invoked within the jacket
command procedure generated by the LAMPSCONTROL job creation operation. The
jacket command file should also be called within the element command procedure
loop. The sub-flowline command file will therefore be invoked for each of the
sub-jobs. Clearly this will involve duplication of operator input, because much
sub-job information will be constant for all the sub-jobs. For this reason it
is better to set up such information in the calling job. This may be done by
setting up symbols outside the job-creation loop in the calling element command
procedure or in the job command file of the calling job. In order to allow the
sub-flowline to be run standalone, if necessary, the flowline command procedure
should test that these symbols are null before prompting the user for their
values. 
.p0
A simpler, though not as flexible solution is to test the values of system
variables such as "FLN__OUTER__JOB__NAME" from within the flowline command file.
If this symbol is null then the flowline is being run standalone and should
gather all the relevant information itself. Otherwise it should assume 
that the calling element has set up the relevant symbols. 
.p0
The elements and procedure command procedures within a sub-flowline are exactly 
the same as those in a flowline.
.blank
