C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1980-08-19 16:57:40.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION BUNCH(XB,YB)
C
C Copyright Laser-Scan Laboratories Ltd,Cambridge,England
C
C Author M.C.Fulford
C
C	Created sometime in 1976 or 1977
C	Modified to use linefitting method	MCF	July 80
C	Minor edits				MCF	August 80
C	Last edited 19/August/80
C
C Add a point to a stream being bunched. Point goes eventually
C into MP1 buffer, unless discarded.
C
C Result of function is the number of master points.
C
***	COMMON/PARAMS/
C arguments:
	REAL XB,YB		! absolute coordinates of point
C common blocks:
***	COMMON/BLG/
***	COMMON/MPEP/
***	COMMON/MPAUX/
C workspace:
	REAL S1,SX,SY,SXX,SXY,SYY ! line-fitting totals
	REAL LMBDMX		! largest eigenvalue of
				! covariance matrix
	REAL EIGEN(2)		! corresponding eigenvector
	REAL THETA		! angle of EIGEN
	REAL SQ			! a square root
	REAL DX,DY,DS		! XB,YB w.r.t. last master point
	REAL EI			! residual error
	REAL RI			! distance along line
	REAL EMAX		! maximum EI
	REAL RMAX		! maximum RI
C
C are there any bunched points yet ?
	IF (NMP(1) .GT. 0) GOTO 10
C no - set up the first one
	NMP(1) = 1
	INDEX(1) = 0
	MP1(X,1) = XB
	MP1(Y,1) = YB
	GOTO 80
C
C Already got some bunched points (usual case)
C consider this point to see if it is approximately
C on the straight line as defined by the points in
C the backlog buffer.
C
C is the backlog buffer full ?
10	IF (INDEX(1) .LT. MAXBLG) GOTO 30
C yes - empty the buffer
20	CALL FLUSH
C get this point relative to start of segment
30	DX = XB-MP1(X,NMP(1))
	DY = YB-MP1(Y,NMP(1))
	DS = DX*DX + DY*DY
C add it to the backlog buffer
	INDEX(1) = INDEX(1)+1
	XBLG(1,INDEX(1)) = DX
	YBLG(1,INDEX(1)) = DY
C any backlog points to compare it with ?
	IF (INDEX(1) .GT. 1) GOTO 40
C store point as possible master point
	FITPMP(X) = DX
	FITPMP(Y) = DY
	FITLEN = SQRT(DS)
	GOTO 80
C prevent long segments
40	IF (DS .GT. S(1)*S(1)) GOTO 20
C see if this point can be added to segment
C fit a line to the backlogged points
C (i) compute sums of various terms
	S1  = 0
	SX  = 0
	SY  = 0
	SXX = 0
	SXY = 0
	SYY = 0
	DO 50 I = 1,INDEX(1)
	  S1  = S1+1
	  SX  = SX + XBLG(1,I)
	  SY  = SY + YBLG(1,I)
	  SXX = SXX + XBLG(1,I)*XBLG(1,I)
	  SXY = SXY + XBLG(1,I)*YBLG(1,I)
	  SYY = SYY + YBLG(1,I)*YBLG(1,I)
50	  CONTINUE
C
C (ii) we define the covariance matrix to be:
C		SXX	SXY
C		SXY	SYY
C	and the line we want is the major eigenvector
C of this matrix, which we obtain by first calculating
C the two eigenvalues by solving the characteristic
C equation:
C	(SXX-L)(SYY-L) - SXY*SXY = 0
C
C i.e.	L^2 - (SXX+SYY)L + (SXX*SYY - SXY*SXY) = 0
C
	SQ  = SQRT((SXX+SYY)**2 - 4*(SXX*SYY-SXY*SXY))
	LMBDMX = ((SXX+SYY) + SQ)/2	! we know all terms are +ve
CC
CC	LMBDMN = ((SXX+SYY) - SQ)/2	! minor eigenvalue
CC
CC	and ABS(LMBDMN/LMBDMX) is zero when all data points lie
CC	on a straight line and one when they are circularly 
CC	distributed.
CC
	THETA = ATAN2(-(SXX+SXY-LMBDMX),(SYY+SXY-LMBDMX))
	EIGEN(X) = COS(THETA)
	EIGEN(Y) = SIN(THETA)
C this vector could be 180 degrees out, so align it with the
C mean vector through the points
	IF (EIGEN(X)*SX + EIGEN(Y)*SY.GE.0) GOTO 60
	EIGEN(X) = -EIGEN(X)	! turn it round
	EIGEN(Y) = -EIGEN(Y)
60	CONTINUE
C we needn't compute the minor eigenvector - it must be
C perpendicular to the major one, we are in two dimensions
C so it must be: [EIGEN(Y),-EIGEN(X)]
C
C now, for each backlogged point, compute the residual error
C and the distance along the fitted line, remembering the
C largest occurrence of each.
	RMAX = 0
	EMAX = 0
	DO 70 I = 1,INDEX(1)
	  RI = XBLG(1,I)*EIGEN(X) + YBLG(1,I)*EIGEN(Y)
	  EI = XBLG(1,I)*EIGEN(Y) - YBLG(1,I)*EIGEN(X)
	  IF (ABS(EI) .GT. EMAX) EMAX = ABS(EI)
	  IF (  RI    .GT. RMAX) RMAX =   RI
70	  CONTINUE
C do we need a new master point (i.e. do we have
C a large residual) ?
	IF (EMAX .GT. H(1)) GOTO 20
C no - calculate new possible master point
	FITLEN = RMAX
	FITPMP(X) = FITLEN*EIGEN(X)
	FITPMP(Y) = FITLEN*EIGEN(Y)
80	BUNCH = NMP(1)
	RETURN
	END
C
	LOGICAL FUNCTION BACK(J)
C
C Remove one point from master point list
C
***	COMMON/PARAMS/
***	COMMON/MPEP/
***	COMMON/BLG/
 
C
	BACK = NMP(1).GE.3
	IF (.NOT. BACK) GOTO 10
	CALL FLUSH
	NMP(1) = NMP(1)-1
	RETURN
10	CONTINUE
	RETURN
	END
C
	SUBROUTINE FLUSH
C
C Flush backlog buffer, producing a new master point
C
***	COMMON/PARAMS/
***	COMMON/MPEP/
***	COMMON/BLG/
***	COMMON/MPAUX/
C Anything to do ?
	IF (INDEX(1) .LE. 0) GOTO 40
C MP list full ?
	IF (NMP(1) .LT. MAXMP) GOTO 10
	CALL WRITEF(' MP%N buffer overflow !',1)
	NMP(1) = 1
C
C is it too near last master point ?
10	IF(FITLEN.GT.E(1)) GOTO 20  ! far enough
C too near - merge the two
	MP1(X,NMP(1))=MP1(X,NMP(1))+FITPMP(X)/2
	MP1(Y,NMP(1))=MP1(Y,NMP(1))+FITPMP(Y)/2
	GOTO 30
C far enough away here
20	MP1(X,NMP(1)+1) = MP1(X,NMP(1))+FITPMP(X)
	MP1(Y,NMP(1)+1) = MP1(Y,NMP(1))+FITPMP(Y)
	NMP(1) = NMP(1)+1
**	IF	JNCTN
	MPJUN(NMP(1))=.FALSE.	! clear junction flag
**	ENDC
30	INDEX(1) = 0  ! no backlog
C
40	RETURN
	END
