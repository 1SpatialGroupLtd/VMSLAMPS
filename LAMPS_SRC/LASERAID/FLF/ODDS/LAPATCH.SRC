C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-08-18 10:43:14.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	PROGRAM LAPATCH
C
***	MODULE	LAPATCH
***	IDENT	18AU86
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
C Author: D. Meader
C
CMOD	Version for Converged Laseraid		 DM	15-Aug-1986
C	Created 				 DM	08-Dec-1985
C
C Upgrades an existing LASERAID patch file, patching in new macro
C definitions, etc.
C
	IMPLICIT NONE
C
***	COMMON/LSL$CMNVIO:EXPC/
***	COMMON/LSL$CMNIFF:IFFHAN/
***	COMMON/LSL$CMNVIO:TXTC/
C
	LOGICAL*4 OK		! return status
	COMMON /IFFERR/ OK
C
	INTEGER*4 CODLIS(35)	! list of macros to be coded
	INTEGER*4 CODPTR	! pointer to macros which must be coded
	LOGICAL*1 CODED(35)	! has this macro been coded ?
	COMMON /CODCMN/ CODLIS,CODPTR,CODED
C
	REAL	  LIMIT(20)	! limits
	COMMON /LIMCOM/ LIMIT
C
	CHARACTER*80  IPFILE	! input file name
	CHARACTER*80  OPFILE	! output file name
	CHARACTER*256 ERRMES	! error message (and temporary variable)
	CHARACTER*3   TYPE	! FLF, LAJ or ELA
	INTEGER*2 IECODE,IELEN	! IFF entry code and length
	INTEGER*2 IPLEN,OPLEN	! length of input and output file names
	INTEGER*2 IPLUN,OPLUN	! i/p and o/p LUNs (channels)
	INTEGER*2 NREV		! number of file revisions (dummy)
	INTEGER*4 I,L		! temporary variables
	INTEGER*4 TIMDAT(2)	! creation/revision times (dummy)
C
C functions:
	INTEGER*4 EXPAND
	INTEGER*4 LIB$GET_FOREIGN
	INTEGER*4 IFFREP
	EXTERNAL  IFFREP	! handles IFF error reporting
C
	DATA CODLIS/35*0/,CODPTR/0/,CODED/35*.FALSE./
	DATA IPLUN,OPLUN /1,2/
C
C ......................................................................
C
C ... get the command line.
	OK=LIB$GET_FOREIGN(IPFILE,'LAPATCH> ',IPLEN)
C
C ... try to open the input file.
	CALL IFFERM(.FALSE.)			! turn off IFF messages
	CALL IFFTDY(IFFREP)
	OPLEN=INDEX(IPFILE,';') - 1		! strip off version no.
	IF (OPLEN.LE.0) OPLEN=IPLEN
	OPFILE=IPFILE(:OPLEN)
	TYPE=IPFILE(OPLEN-2:OPLEN)
	OPFILE(OPLEN-2:OPLEN)='NEW'		!!! reset op type to NEW
	CALL IFFOPN(IPLUN,IPFILE(:IPLEN),0)	! open ip file read-only
	IF (.NOT.OK) GO TO 60
	CALL IFFOPN(OPLUN,OPFILE(:OPLEN))	! open op file for write
	IF (.NOT.OK) GO TO 70
	CALL IFFINQ(ERRMES,I,TIMDAT,TIMDAT,NREV)
	CALL WRITEF('Updating %S into %S',
     &	     IPFILE(:IPLEN),OPFILE(:OPLEN)//ERRMES(INDEX(ERRMES,';'):I))
	CALL IFFSEL(IPLUN)
	CALL IFFRWD
	CALL IFFRLA(.TRUE.)			! turn on look-ahead
	CALL IFFERM(.TRUE.)			! turn on IFF messages
C
C ... set up dummy character descriptor.
	TXTPTR=80				! max byte string length
	TXTADD=%LOC(TXTBUF)			! address of byte string
C
C ......................................................................
C
10	CALL IFFNXT(IECODE,IELEN)
	IF (IELEN.EQ.-1) GO TO 30		! EOF
	IF (IECODE.EQ.'CH') GO TO 20
C
C ... copy this entry into the output file.
	CALL EIHCPY(OPLUN)
	GO TO 10
C
C ... CH entry (surprise, surprise).
20	CALL EIHR(TXTBUF,IELEN,1)
	DCPTR=4				! for reading any integers
	CALL IFFSEL(OPLUN)
	CALL PATCH(TXTDSC,IELEN,TYPE)	! patch in new text (maybe)
	IF (IELEN.GT.0) CALL IFFCH(TXTBUF,IELEN)
	CALL IFFSEL(IPLUN)
	GO TO 10
C
C ... EOF.
30	IF (CODPTR.EQ.0) GO TO 50
	CALL IFFSEL(OPLUN)
	DO 40 I=1,CODPTR	   ! CODe any new macros which need it
	   L=CODLIS(I)		   ! the new macro number
	   IF (CODED(L)) GO TO 40  ! already done ?
	   CALL IFFCH(EXPBUF,EXPAND('COD%^L%N',L))
40	CONTINUE
C
50	CALL IFFSEL(OPLUN)
	CALL IFFCH(EXPBUF,EXPAND(' '))
	CALL IFFCH(EXPBUF,EXPAND('LIM%N %&7',3,0.0))
	CALL IFFCH(EXPBUF,EXPAND('LIM%N %&7',11,0.0))
	CALL IFFCH(EXPBUF,EXPAND('LIM%N %&7',12,0.0))
	CALL IFFCH(EXPBUF,EXPAND('LIM%N %&7',17,0.0))
	CALL IFFCH(EXPBUF,EXPAND('LIM%N %&7',18,0.0))
	IF (TYPE.NE.'LAJ') THEN
	   CALL IFFCH(EXPBUF,EXPAND('LIM%N %&7',19,0.5))
	   CALL IFFCH(EXPBUF,EXPAND('LIM%N %&7',20,8.0))
	   CALL IFFCH(EXPBUF,EXPAND('W%N %&7',5,3.0))
	   CALL IFFCH(EXPBUF,EXPAND('W%N %&7',6,1.5))
	   CALL IFFCH(EXPBUF,EXPAND(' '))
	   CALL IFFCH(EXPBUF,EXPAND(
     &     'CRC %F5.3  CRD %F5.0',
     &      0.985,     40.0))
	   CALL IFFCH(EXPBUF,EXPAND(
     &     'CRS %I5  JPT %F5.0  JAT %F5.0  JWT %F5.2',
     &      0,       40.0,      40.0,      0.3))
	ELSE
	   CALL IFFCH(EXPBUF,EXPAND(' '))
	   IF ((LIMIT(12).LT.0.0).OR.(LIMIT(12).GT.0.8)) LIMIT(12)=0.3
	   CALL IFFCH(EXPBUF,EXPAND(
     &     'JPT %F5.0  JAT %F5.0  JWT %F5.2',
     &      LIMIT(17), LIMIT(18), LIMIT(12)))
	ENDIF
	IF (TYPE.EQ.'FLF') CALL IFFCH(EXPBUF,EXPAND('EPS %F5.1',15.0))
	IF (TYPE.NE.'ELA') CALL IFFCH(EXPBUF,EXPAND('HCH %I5',3))
C
	CALL IFFCLO(IPLUN)
	CALL IFFCLO(OPLUN)
	GO TO 80
C
C ......................................................................
C
C ... couldn't open input file.
60	I=EXPAND('%WS%%LAPATCH-F-ERROPIN, error opening file ',ERRMES)
	L=EXPAND('%WS%S for input',ERRMES(I+1:),IPFILE(:IPLEN))
	WRITE (6,*) ERRMES(:I+L)
	GO TO 80
C
C ... couldn't open output file.
70	I=EXPAND('%WS%%LAPATCH-F-ERROPOUT, error opening file ',ERRMES)
	L=EXPAND('%WS%S for output',ERRMES(I+1:),OPFILE(:OPLEN))
	WRITE (6,*) ERRMES(:I+L)
C
80	OK=OK.OR.'10000000'X			! suppress the message
	CALL EXIT(OK)				! but set $STATUS
	END
C
	SUBROUTINE PATCH(CHLINE,CHLEN,TYPE)
C
***	MODULE	PATCH
***	IDENT	15AU86
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
C Author: D. Meader
C
C	Created 				 DM	08-Dec-1985
C
C Compares our CH entry with a list of ones we need to change, and
C then performs that change as appropriate.
C
	IMPLICIT NONE
C
	CHARACTER*80 CHLINE	! the CH entry
	INTEGER*2    CHLEN	! its length (initially words)
	CHARACTER*3  TYPE	! FLF, LAJ or ELA
C
	INTEGER*4 CODLIS(35)	! list of macros to be coded
	INTEGER*4 CODPTR	! pointer to macros which must be coded
	LOGICAL*1 CODED(35)	! has this macro been coded ?
	COMMON /CODCMN/ CODLIS,CODPTR,CODED
C
	REAL	  LIMIT(20)	! limits
	COMMON /LIMCOM/ LIMIT
C
	INTEGER*4 I,J		! temporary variables
	LOGICAL*1 HADMAC	! had first macro definition ?
	REAL	  PARVAL(7)	! type table parameter values
C
	INTEGER*4 EXPAND
C
	SAVE HADMAC
C
	DATA HADMAC/.FALSE./
C
C ......................................................................
C
	CHLEN=CHLEN*2			! bytes now
	IF (CHLEN.LT.3) GO TO 20
	IF (CHLINE(1:3).EQ.'WAR') THEN
	   CHLEN=0			! obsolete parameters
	ELSEIF (CHLINE(1:3).EQ.'SET') THEN
	   CALL RDLONG(I)		! get parameter number
	   DO 10 J=1,6
	      CALL RDREAL(PARVAL(J))
10	   CONTINUE
	   PARVAL(7)=PARVAL(6)		! make type 7 same as type 6
	   CHLEN=EXPAND(
     &	      '%WSSET %^L%N %F7.2 %F7.2 %F7.2 %F7.2 %F7.2 %F7.2 %F7.2',
     &	      CHLINE,I,PARVAL(1),PARVAL(2),PARVAL(3),PARVAL(4),
     &	      PARVAL(5),PARVAL(6),PARVAL(7))
	ELSEIF (CHLINE(1:3).EQ.'DEF') THEN
	   IF (.NOT.HADMAC) CALL MACROS	! output standard set of macros
	   HADMAC=.TRUE.
	   CHLEN=0
	ELSEIF (CHLINE(1:3).EQ.'COD') THEN
	   CHLEN=0
	ELSEIF (CHLINE(1:3).EQ.'LIM') THEN
	   CALL RDLONG(I)		! get limit number
	   CALL RDREAL(LIMIT(I))
	ENDIF
20	RETURN
	END
	SUBROUTINE MACROS
C
***	MODULE	MACROS
***	IDENT	15AU86
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
C Author: D. Meader
C
C	Created 				 DM	14-Aug-1986
C
C Creates a standard set of command macros.
C
	IMPLICIT NONE
C
***	COMMON/LSL$CMNVIO:EXPC/
C
	INTEGER*2 EXPAND
C
C ......................................................................
C
C ... define the macros.
	CALL IFFCH(EXPBUF,EXPAND(
     &	'DEF  1 SIM  PRE GO'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'DEF  2 LOS  POK GO'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'DEF  3 CON  FB4 OKK D1 V0 HEL'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'DEF  4 OKK  APP DEC'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'DEF  5 JAN  NOR JMT TYP7 PIX EXT SMT TYP-1 DEC'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'DEF  6 ASC  POK GO'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'DEF  7 VER  FB4 GO M1 D1 V1 PRE HEL'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'DEF  8 GO   D0 V0 FBX-11 NOR DIG DEC'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'DEF  9 SMF  FBX-11 D0 V0 M1 FB4 STA FB7 SMF CUT TSF AUT'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'DEF 10 DUN  D1 V1 M2 HEL'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'DEF 11 HOP  NOR DRO PRE JUM M2 V1 FAS FB4 GO'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'DEF 12 ONE  NOR DRO PRE JUM M1 V1 FAS FB4 GO'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'DEF 13 HEL  '//
     &	'FB3 ONE FB8 NXT FB9 JIN FB10 MP FB11 HOP FB13 FPJ FB15 BB'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'DEF 14 BB   DRO FB8 LJN FB9 JIN FB15 BAC V0 ROL'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'DEF 15 I    FB4 GO FAS M2 FUM AUT'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'DEF 16 END  NOR APP1 EOF'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'DEF 17 B    TXZ DRW B'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'DEF 18 DEC  ASS FIR PAU15 INT AUT'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'DEF 19 INT  D1 V0 FB4 AUT HEL'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'DEF 20 Z    TXZ POK DIG X'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'DEF 21 X    ASS FIR PAS DRW A M'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'DEF 22 J    NXT DRN T'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'DEF 23 FPJ  JNC-1'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'DEF 24 MJN  NOR DRO PRE M1 D1 V1 FB4 GO'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'DEF 25 JIN  FAS JAN'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'DEF 26 C    TXZ APP X'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'DEF 27 AJN  FB4 OKK D1 V0 QUE20 OKK HEL'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'DEF 28 ESF  '//
     &  'FBX-11 D1 V1 M2 FB4 STA FB7 ESF FB8 NXE TWO SMT MER SMT TSF'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'DEF 29 GGG'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'DEF 30 FFF'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'DEF 31 EEE'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'DEF 32 DDD'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'DEF 33 CCC'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'DEF 34 BBB'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'DEF 35 AAA'))
C
C ... code them if possible.
	CALL IFFCH(EXPBUF,EXPAND(
     &	'COD1'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'COD2'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'COD3'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'COD4'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'COD5'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'COD6'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'COD7'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'COD8'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'COD9'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'COD10'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'COD11'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'COD12'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'COD13'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'COD14'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'COD15'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'COD16'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'COD18'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'COD19'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'COD20'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'COD23'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'COD24'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'COD25'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'COD26'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'COD27'))
	CALL IFFCH(EXPBUF,EXPAND(
     &	'COD28'))
C
	RETURN
	END
C
	SUBROUTINE IFFREP
C
***	MODULE	IFFREP
***	IDENT	02MR84
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
C Author: D. Meader
C
C	Created 				 DM	02-Mar-1984
C
C IFF error handler - returns IERNM (VMS error code) in OK.
C
	IMPLICIT NONE
C
***	COMMON/LSL$CMNIFF:IFFHAN/
C
	LOGICAL*4 OK		! return status
	COMMON /IFFERR/ OK
C
	OK=IERNM
	RETURN
	END
