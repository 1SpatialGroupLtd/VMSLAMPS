$!
$! * This file is part of the LAMPS distribution, released as a software
$! * preservation project to archive digital history for future historians.
$! * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
$! *
$! * Timestamp of this file for the 2002 release was: 1988-06-16 12:12:28.000000000 +0100
$! *
$! * This program is free software: you can redistribute it and/or modify
$! * it under the terms of the GNU General Public License as published by
$! * the Free Software Foundation, version 3.
$! *
$! * This program is distributed in the hope that it will be useful, but
$! * WITHOUT ANY WARRANTY; without even the implied warranty of
$! * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
$! * General Public License for more details.
$! *
$! * You should have received a copy of the GNU General Public License
$! * along with this program. If not, see http://www.gnu.org/licenses/.
$!
$!
$! Command file for creating FLF
$! =============================
$!
$!	Last edited				 DM	16-Jun-1988
$!	Created						19-Aug-1980
$!
$	ON ERROR THEN GOTO 100
$	ON CONTROL_Y THEN GOTO FLFCLO
$!
$	SD="$LSL$EXE:SD"
$!
$! Which version are we dealing with ?
$	@EXE:PARAMS
$	TSKNAM="LAJ"
$	IF RASTER THEN TSKNAM="LAR"
$	IF AREA THEN TSKNAM="LAA"
$!
$	IF "''F$LOGICAL("LSL$''TSKNAM'MAKING")'" .EQS. "" THEN GOTO A0
$	WRITE SYS$OUTPUT "Someone else is MAKing"
$	EXIT
$!
$ A0:	DEFINE/GROUP LSL$'TSKNAM'MAKING "IN_PROGRESS"
$	SD OBJ
$	TRFILE:==EXE:PARAMS.MAR
$	MAKE 'P1' 'P2' 'P3' 'P4' 'P5' 'P6' 'P7'
$	MAKFIL 'TSKNAM'BAT.COM
$!
$	WC "$	ON CONTROL THEN GOTO FLFEND"
$	WC "$	IF ""'","'F$LOGICAL(""LSL$''TSKNAM'BATTING"")'"" .EQS. """" -"
$	WC "	  THEN GOTO A0"
$	WC "$	WRITE SYS$OUTPUT ""Someone else is building"""
$	WC "$	EXIT"
$	WC "$!"
$	WC "$ A0:"
$	WC "$	DEFINE/GROUP LSL$''TSKNAM'BATTING ""IN_PROGRESS"""
$	WC "$	ASSIGN/TRANS=(CONCEALED,TERMINAL) -"
$	WC "	       ''F$TRNLNM(""LSL$LASERAID_ROOT"")' LSL$LASERAID_ROOT"
$	WC "$	ASSIGN LSL$LASERAID_ROOT LSL$DISK"
$	WC "$	ASSIGN LSL$DISK:[FLF.SOURCE] SRC"
$	WC "$	ASSIGN LSL$DISK:[FLF.MACRO] MAR"
$	WC "$	ASSIGN LSL$DISK:[FLF.COMMON] CMN"
$	WC "$	ASSIGN LSL$DISK:[FLF.''TSKNAM'EXE] EXE"
$	WC "$	SD LSL$DISK:[FLF.''TSKNAM'OBJ]"
$	WC "$	SET NOON"
$!
$	INQUIRE/NOP ANSWER "Compile ? "
$	IF .NOT. ANSWER THEN GOTO LKONLY
$	FSW1=""
$	INQUIRE/NOP FLF_DBG "With Debug ? "
$	IF .NOT.FLF_DBG THEN GOTO A05
$	  MAKDEBUG
$	  INQUIRE/NOP ANSWER "No optimisation ? "
$	  IF ANSWER THEN FSW1="/NOOPT"
$	  INQUIRE/NOP ANSWER "Check bounds and overflow ? "
$	  IF ANSWER THEN FSW1=FSW1+"/CHECK=(BOUNDS,OVERFLOW)"
$	  IF FSW1 .NES. "" THEN MAKFSW 'FSW1'
$	  INQUIRE/NOP ANSWER "Keep FORtran sources with comments ? "
$	  IF ANSWER THEN MAKFKP		! keep ADC'd .FOR with comments
$A05:	MAKINQ THELOT "Everything"
$	IF THELOT THEN MAKALL
$!
$!************************ COMPILING ***************************
$	MAKASK MAIN "MAIN program"
$	IF NO THEN GOTO 1
$	MAKC AF FLMAIN FLMAIN
$	IF .NOT.FLF_DBG THEN MAKDEBUG	! always build block data with DEBUG
$	MAKC AF FLFBLK FLFBLK
$	IF .NOT.FLF_DBG THEN MAKDEBUG "0"
$	MAKC AM FLMAIN SOLTB+CMDPST
$1:	MAKASK FLSUB FLSUB
$	IF YES THEN MAKC AF FLSUB FLSUB,PEND,RECOVR,TABTYP,SETOVR
$	MAKASK SST "SST - Condition handling routines"
$	IF YES THEN MAKC AF SST WINDUP,EXCEPT,LDWNDP
$	MAKASK IO "IO routines"
$	IF NO THEN GOTO 3
$	MAKASK MACIO "* MACIO - Macro routines (& MYR50)"
$	IF NO THEN GOTO 2
$	MAKC AF RW MYR50 
$	MAKC AM RW EFNETC+LSL$CMNVIO:TXTC+MAR:TERMRD
$2:	MAKASK COMMS "* COMMS - Command line processing"
$	IF YES THEN MAKC AF COMMS RDCOMM,FBTYPE,LTH
$	MAKASK PARAM "* PARAM - Parameter typing & setting"
$	IF YES THEN MAKC AF PARAM PARIO,INOUT
$3:	MAKASK INIT "INIT - Initialisation"
$	IF NO THEN GOTO 4
$	MAKC AF FLINIT INIT,STRLEN,TIDY,VOLDFL
$	MAKC AM FLINIT SOLTB+INICOM
$4:	MAKASK FAX "FAX - Facsimiles"
$	IF YES THEN MAKC AF FAX FAX,EDGDMP,MANDIG
$	MAKASK CHECK "CHECK mode"
$	IF NO THEN GOTO 5
$	MAKC AF SCHECK SCHECK,PEER,CHKINF
$	MAKC AM SCHECK SOLTB+CHKCOM
$5:	MAKASK CORCAL "CORCAL - Corner and calibration routines"
$	IF NO THEN GOTO 6
$	MAKC A   CORCAL CORCAL,FIDFND,PROMRD,CHKFID,LINFIT
$	MAKC AP  CORCAL GETRES,GETPT
$	MAKC APF CORCAL AUTGRD,FIDMES,CPTEST,DM4PT,TRXRTS
$6:	MAKASK PAINT "PAINT out"
$	IF NO THEN GOTO 7
$	MAKC A   PAINT FPAINT,PAINT,GETLST,PTCLIP
$	MAKC APF PAINT ARFILL,CLKWIS,DELF,LOCATE,GETWIN
$7:	MAKASK GUIDE "GUIDE - Preguidance"
$	IF YES THEN MAKC AF GUIDE PRECOM,SETGUD
$	MAKASK ODDS "ODDS - Oddments"
$	IF NO THEN GOTO 8
$	MAKC A   ODDS NEWSEC,NEWOVR,ENDOVR,NEWTIM,PRTTIM
$	MAKC APF ODDS GENAC,STNDAC
$8:	MAKASK LINK "Subroutine LINK"
$	IF NO THEN GOTO 9
$	MAKC AF LINKOVER LINK,SETDIR,ONSIDE
$	MAKC AM LINKOVER SOLTB+LNKCOM
$9:	MAKASK LNKSUB "LNKSUB - LNKDRW & LNKTEK"
$	IF YES THEN MAKC AF LNKSUB LNKDRW,LNKTEK
$	MAKASK STOMAC "STOMAC - Command macros"
$	IF YES THEN MAKC AF STOMAC NXTCOM,GETMAC,APPMAC,SETMAC
$	MAKASK IFFSYS "IFFSYS - Patch file"
$	IF YES THEN MAKC AF IFFSYS IFFSYS,IFRSYS,IFWSYS
$	MAKASK FORK "FORK creation & use"
$	IF YES THEN MAKC AF FORK CUTLER,FRKRTS,SMLFTR,USEFRK
$	MAKASK JOIN "JOIN - Jointing and waddling routines"
$	IF YES THEN MAKC AF JOIN JOIN,CLOJOI,WADDLE
$	MAKASK BASIC "BASIC following routines"
$	IF YES THEN MAKC AF BASIC OUTMP1,GTLST2,NEWVEC,NXTSEG,APPSEG,NEBIT
$	MAKASK CHAIN "CHAIN growing"
$	IF NO THEN GOTO 10
$	MAKC A   CHAIN ANALYZ,ADDJOI,ADDNBR,GRWCHN,EXPLOR
$	MAKC AP  CHAIN GROW,SETCHN,CHNLST
$	MAKC APF CHAIN CMPCT,CRUSH,SMOOTH,VECCOS
$10:	MAKASK BUNCH "BUNCH - Point bunching"
$	IF YES THEN MAKC AF BUNCH BUNCH,FILTER,FLUSH
$	MAKASK DIGINT "DIGINT - Digitising intelligence"
$	IF YES THEN MAKC AF DIGINT ASSESS,ADDASS,ELEMNT,SURE
$	MAKASK MATCH "MATCH - End matching"
$	IF YES THEN MAKC AF MATCH MATCH,ONTRAK,CENTRE,SIMPLE,TSTCON
$	MAKASK DRAW "DRAW - Tek drawing"
$	IF NO THEN GOTO 11
$	MAKC A   TXRTS DRWANA,DRWBUF,DRWCHN,DRWELF,DRWFRK
$	MAKC AP  TXRTS DRWJNC,DRWMP,DRWORI,DRWPTS,DRWSCN
$	MAKC APF TXRTS DRWSQ,DRWTRK,TXCOL
$11:	MAKASK ROLL "ROLL and fumble"
$	IF YES THEN MAKC AF ROLL RALONG,SQUARE,FUMBLE
$	MAKASK POINT "POINT features"
$	IF YES THEN MAKC AF POINT POINT,RFSCAN,PNTFTR,ORIENT,AUTX
$	MAKASK ELFRTS "ELFRTS - Edge chain processing"
$	IF NO THEN GOTO 12
$	MAKC A   ELFRTS MERSCN,CHNMER,ICHNIN
$	MAKC APF ELFRTS EDGFTR,EDGSMF,GETFTR,EDGSEL
$12:	MAKASK JXYRTS "JXYRTS - Junction scanning"
$	IF YES THEN MAKC AF JXYRTS XYSCA,XYPRC,XYSET,XYPRT,EXTCHN,CHNPIX
$	MAKASK JUNCTN "JUNCTN - Junction recognition"
$	IF NO THEN GOTO 13
$	MAKC A   JUNCTN JCENTR,JCHECK,JCHLEN,JCLOTW,JDRAW
$	MAKC AP  JUNCTN JFINTP,JINIT,JMAIN,JREMCH,JSIFTC
$	MAKC APF JUNCTN JSORTC,TSTATT
$13:	MAKASK JNCRTS "JNCRTS - Junction processing"
$	IF NO THEN GOTO 14
$	MAKC A   JNCRTS JASSES,JMATCH,JSSRTS,JSURE
$	MAKC APF JNCRTS JNCTRK,ADDJUN,LOCJUN
$14:	IF .NOT. AREA THEN GOTO 100
$	MAKASK AREASCAN "AREA SCANning routines"
$	IF NO THEN GOTO 100
$	MAKASK ARESCA "* ARESCA - Main area-scanning module"
$	IF YES THEN MAKC AF ARESCA ARESCA,AREPRC,ARESET,ARECHN
$	MAKASK FAXARE "* FAXARE - Facsimile using area-scanner"
$	IF YES THEN MAKC AF FAXARE FAXARE,EDGARE
$	MAKASK CUTARE "* CUTARE - Area-scan for small features, line mode"
$	IF YES THEN MAKC AF CUTARE CUTARE
$	MAKASK SMFARE "* SMFARE - Area-scan for small features, edge mode"
$	IF YES THEN MAKC AF SMFARE GRWARE
$!
$!************************* LINKING ****************************
$100:	ON ERROR THEN GOTO FLFCLO
$	INQUIRE/NOP ANSWER "Link ? "
$	IF .NOT. ANSWER THEN GOTO NOTKB
$!
$LKONLY:
$	WC "$	RUN LSL$DISK:[FLF.FLF]GENDAT"
$	WC "$	RENAME IDENT.SRC SRC:IDENT.SRC"
$	WC "$	PURGE SRC:IDENT.SRC"
$	MAKC AF IDENT IDENT
$	TSKEXT=""
$	INQUIRE/NOP ANSWER "Experimental Version ? "
$	IF ANSWER THEN TSKEXT="EXP"
$!
$! Now conditionalise the link instructions
$	MAKC L 'TSKNAM' LSL$DISK:[FLF.FLF]FLF
$!
$! And do the linking
$	BUILD 'TSKNAM''TSKEXT' 'TSKNAM'
$!
$! All done
$NOTKB:
$	WC "$ FLFEND:
$	WC "$	DEASS/GROUP LSL$''TSKNAM'BATTING"
$!
$	MAKEND
$	GOTO FLFEX
$FLFCLO:
$	MAKCLO
$FLFEX:
$	DEASS/GROUP LSL$'TSKNAM'MAKING
$	SD EXE
