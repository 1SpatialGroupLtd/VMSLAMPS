C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1985-10-09 12:34:58.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE ADDASS(FSTCON,CONGOT)
C
***	MODULE	ADDASS
***	IDENT	09OC85
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	Also be careful if line and ANLYZD > 0	 DM	09-Oct-1985
CMOD	Be careful of wide lines if ANLYZD > 0	 DM	25-Sep-1985
CMOD	Try to append junction pos if ANLYZD > 0;
CMOD	/LKFOLL/ added; three arguments removed	 DM	30-Aug-1985
CMOD	Tidied					AJW	25-Jun-1982
CMOD	Created					MCF	26-May-1977
C
C To add some new assessments
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
***	PARAMETER/PARAMS/
	PARAMETER WIDFLD='37777'O	! width field of encounter
C
C arguments:
	INTEGER   FSTCON
	INTEGER   CONGOT
C
***	COMMON/ANACOM/
***	COMMON/LINKS/
***	COMMON/LKFOLL/
***	COMMON/LKPARM/
***	COMMON/RSE/
C
C local workspace:
	INTEGER*4 DUCONN	! U distance to BSTCON
	INTEGER*4 DUJUN,DVJUN	! U,V distances to junction scan pos
	INTEGER*4 III,JJJ,KKK	! temporary variables
	REAL	  DIST2		! distance**2 to junction scan position
C
C ......................................................................
C
	IF (CONGOT.LE.0) GO TO 40
C
C ... add the connections we've found into the list in order of quality.
	DO 30 III=FSTCON,FSTCON+CONGOT-1
	   KKK=0
	   JJJ=BSTCON
10	   IF (JJJ.LE.0) GO TO 20
	      IF (QUALTY(III).GT.QUALTY(JJJ)) GO TO 20
	      KKK=JJJ
	      JJJ=NXTBST(KKK)
	   GO TO 10
20	   NXTBST(III)=JJJ
	   IF (KKK.EQ.0) BSTCON=III
	   IF (KKK.NE.0) NXTBST(KKK)=III
30	CONTINUE
C
C ... if we've spotted a junction, see if it should be 'appended' yet.
40	IF (ANLYZD.LE.0) GO TO 90
	DUJUN=JUNSCN(IU) - LSTONE(IU)
	DVJUN=JUNSCN(IV) - LSTONE(IV)
	DIST2=FLOAT(DUJUN)**2 + FLOAT(DVJUN)**2
	IF (DIST2.GT.GAPSIZ*GAPSIZ) GO TO 90	! junction too distant ?
	IF (BSTCON.EQ.0) GO TO 80		! check best connection
	IF (CONNCT(3,BSTCON).EQ.1) GO TO 50	! end to be appended
	III=NODE(FIRST(CONNCT(2,BSTCON)))	! look at OTHER end
	JJJ=NODE(LAST(CONNCT(2,BSTCON)))
	GO TO 60
50	III=NODE(LAST(CONNCT(2,BSTCON)))
	JJJ=NODE(FIRST(CONNCT(2,BSTCON)))
60	DUCONN=ENCBUF(IU,III) - LSTONE(IU)
	IF (FLOAT(DUCONN)**2 + FLOAT(ENCBUF(IV,III) - LSTONE(IV))**2
     &	    .GT.DIST2) GO TO 80			! further than junctn ?
C
C ... BSTCON seems to be our best bet, but be careful if it is a line,
C ... wide line or an apex (might remove possibility of EVER appending
C ... the junction).
	IF (CONNCT(4,BSTCON).EQ.0) GO TO 70	! is BSTCON a line ?
	IF (CONNCT(4,BSTCON).LT.2.OR.
     &	    CONNCT(4,BSTCON).GT.3) GO TO 90	! BSTCON wide or apex ?
70	IF (ABS(DUJUN).GT.ABS(DUCONN)) GO TO 90	! yes - reconsider ?
	IF (ABS(DVJUN).GT.(ENCBUF(W,JJJ).AND.WIDFLD)) GO TO 90
	JUNSCN(IV)=LSTONE(IV)			! use better scan pos
C
C ... already followed past the junction ?
C ... if so, assume we don't want it (e.g. may be on different feature).
80	IF (DUJUN*ID(IU).LT.0) GO TO 90		! already behind us ?
	BSTCON=1				! junction is BSTCON
	CONNCT(1,1)=0
	CONNCT(2,1)=0
	CONNCT(3,1)=1
	CONNCT(4,1)=7
	QUALTY(1)=LIMIT(7)			! don't get confused
	NXTBST(1)=0
	FSTCON=1
	CONGOT=1
C
90	FSTCON=FSTCON + CONGOT
	RETURN
	END
