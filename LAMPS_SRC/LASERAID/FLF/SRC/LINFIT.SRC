	LOGICAL*4 FUNCTION LINFIT(MBUF,IB,IT,IW,IU,IV,OFFNSS,A0,A1,RES)
C
***	MODULE	LINFIT
***	IDENT	29OC86
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	Point OK if MBUF(1,...) is zero		 DM	29-Oct-1986
CMOD	Tidied					 DM	03-Jun-1986
CMOD	Use RMS to weed out bum points		WJJ	09-Feb-1983
CMOD	Return RMS, MAX residuals		WJJ	02-Feb-1983
CMOD	Tidied					AJW	29-May-1981
C
C Fits a line to the points held in MBUF between IB and IT with IU as
C the abscissa and IV as the ordinate (or vice-versa ?). Anyway, IU is
C X and IV is Y and IW is the error. A point is ignored completely and
C utterly if its error is less than zero, otherwise it is weighted by a
C function of IW. 
C The residuals are calculated and a second fit is performed without
C points that are more than 3*RMS away.
C The residuals still reflect all the points, however.
C
C The answer is returned in A0 and A1.
C
C Result is .TRUE. if a line was fitted, .FALSE. if one couldn't be.
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
C arguments:
	INTEGER   MBUF(3,1)
	INTEGER   IB,IT,IW,IU,IV
	REAL      OFFNSS
	REAL      A0,A1
	REAL	  RES(2)
C
C workspace:
	INTEGER   I,J
	REAL      RMOD
	REAL      RU,RV,RW
	REAL      S1
	REAL      SU,SV,SUV,SUU
C
C ......................................................................
C
	LINFIT=.FALSE.
C
C do two fits, one to all valid points and a second avoiding the poorly
C fitted points from the first pass.
	DO 40 J=1,2
	   S1=0.0				! zero totals
	   SU=0.0
	   SV=0.0
	   SUU=0.0
	   SUV=0.0
C
C accumulate totals to make coefficients.
	   DO 20 I=IB,IT
	      IF (MBUF(IW,I).LT.0) GO TO 20	! discard if -ve error
C
C avoid using bum points on second pass.
	      IF (J.EQ.1) GO TO 10
	      IF (ABS(MBUF(IV,I)-(A0+A1*MBUF(IU,I))).GT.3*RES(1))
     &		 GO TO 20
10	      RU=MBUF(IU,I)
	      RV=MBUF(IV,I)
	      RW=MBUF(IW,I)/OFFNSS		! fractional error
	      RW=2.0/(RW*RW + 1)		! weight
	      S1=S1 + RW
	      SU=SU + RU*RW
	      SV=SV + RV*RW
	      SUU=SUU + RU*RU*RW
	      SUV=SUV + RU*RV*RW
20	   CONTINUE
C
C we have now set up a set of simultaneous equations
C and we will solve them by a simple matrix inversion.
	   RMOD=S1*SUU - SU*SU
	   IF (RMOD.EQ.0.0) GO TO 50
	   A0=(SUU*SV - SU*SUV)/RMOD
	   A1=(-SU*SV + S1*SUV)/RMOD
C
C calculate residuals.
	   S1=0.0
	   SU=0.0
	   SUU=0.0
	   DO 30 I=IB,IT			! loop through buffer
	      IF (MBUF(IW,I).LT.0) GO TO 30	! skip duff point
	      RV=MBUF(IV,I) - (A0 + A1*MBUF(IU,I))	! error
	      S1=S1 + 1
	      SU=MAX(SU,ABS(RV))
	      SUU=SUU + RV**2
30	   CONTINUE
	   RES(1)=SQRT(SUU/S1)			! return RMS error
	   RES(2)=SU				! and MAX error
40	CONTINUE
C
C and that is all.
	LINFIT=.TRUE.
50	RETURN
	END
