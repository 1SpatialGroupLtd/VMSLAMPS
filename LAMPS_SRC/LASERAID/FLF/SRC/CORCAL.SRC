C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-10-30 15:47:48.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION CORCAL
C
***	MODULE	CORCAL
***	IDENT	30OC86
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	Correct bug in CCP check fid number/pos	 DM	30-Oct-1986
CMOD	Now a function (.TRUE. if abandoned)	 DM	28-Oct-1986
CMOD	NFID=-1 => user-specified fid 1st time	 DM	17-Jul-1986
CMOD	Corner points are now control points	 DM	14-Jul-1986
CMOD	CFT reinstated (to preserve accuracy)	 DM	30-Jun-1986
CMOD	CFT, CPTS replaced by FCOEFF, CPMEAS	 DM	26-Jun-1986
CMOD	Converged; TICKS stuff removed		 DM	25-Jun-1986
CMOD	Only call CSRD,DISMOD etc if HADLDI	 DM	30-May-1986
CMOD	Uses TXWT rather than WRITEF for prompt;
CMOD	substantially tidied			 DM	07-Nov-1985
CMOD	Command table MEASCM added		 DM	17-Sep-1985
CMOD	No "Every how many features" etc if CAL	 DM	25-Oct-1983
CMOD	No of grid pts in each axis must be >= 4 DM	02-Jun-1983
CMOD	Tests CPGOT, not CPDONE too see if to
CMOD	output shifts				AJW	25-Apr-1983
CMOD	CPDONE,EOP set up in the right place	AJW	25-Apr-1983
CMOD	Created from CORNER and CALIB		AJW	12-Apr-1983
C
C	CORTYP=1 => measure four control points and ask for one of them
C		    to be selected as a check fiducial (old CP  command)
C	CORTYP=2 => measure grid                       (old CAL command)
C	CORTYP=3 => measure grid, create control points, and ask for
C		    1 grid intersection as a check fid (new CCP command)
C
C	The function value is .TRUE. if the measurement is abandoned.
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
C parameters:
***	PARAMETER/PARAMS/
C
C common blocks:
***	COMMON/COORDS/
***	COMMON/DIGC/
***	COMMON/EXPC/
***	COMMON/GRID/
***	COMMON/GRPARM/
***	COMMON/LKPARM/
***	COMMON/MASTER/
***	COMMON/SCPARM/
***	COMMON/TXTC/
C
C w/s
	INTEGER   CWD
	INTEGER   III,JJJ,KKK
	INTEGER   KX,KY
	INTEGER   NEWS(4)		! names of corners
	INTEGER   NREALS
	INTEGER   SQINDX(4),SQINDY(4)
	LOGICAL*1 CURSED
	LOGICAL*1 FND
	LOGICAL*1 CLRED
	LOGICAL*1 HADLIN
	REAL      COEFT(10,2)
	REAL      CTMP(4,4)
	REAL      CUR(2)
	REAL      CX(4),CY(4)
	REAL      RRR
	REAL      RMAX
	REAL      XTRH,YTRH
C
C functions:
	INTEGER	  EXPAND
	INTEGER   RDCOMM
	LOGICAL   AUTGRD
	LOGICAL   CHKFID
	LOGICAL   GETPT
C
C command table:
	INTEGER   MEASCM,NULLCM
	EXTERNAL  MEASCM,NULLCM
C
C data:
	DATA NEWS/'NW', 'SW', 'SE', 'NE'/
	DATA CX/-45000.0,-45000.0, 45000.0, 45000.0/
	DATA CY/ 30000.0,-30000.0,-30000.0, 30000.0/
	DATA SQINDX/0,0,1,1/
	DATA SQINDY/1,0,0,1/
C
C ......................................................................
C
	CORCAL=.TRUE.
	CALL RDABO
	CALL TXCLR
	HADLIN=.FALSE.
	CLRED=.TRUE.
	IF (CORTYP.NE.1) GO TO 280
C
C ***************************  CORTYP = 1  *****************************
C
	CALL FBWT16("100212)
C
C ... look at each of the four corners.
	DO 190 III=1,4
	   CURSED=.FALSE.
	   NREALS=0
C
C ... type out coordinates if points in both spaces.
	   DO 10 JJJ=1,4
	      CTMP(JJJ,III)=CPMEAS(JJJ,III)
10	   CONTINUE
C
	   IF ((III.EQ.1).OR.(.NOT.CLRED)) GO TO 30
	   CALL RDABO
	   CALL TXCLR
	   HADLIN=.TRUE.
	   DO 20 KKK=1,III-1
	      CALL WRITEF('%C %F10.0%F10.0%F12.3%F9.3',NEWS(KKK),
     &			CTMP(1,KKK),CTMP(2,KKK),CTMP(3,KKK),CTMP(4,KKK))
20	   CONTINUE
C
30	   IF (.NOT.HADLIN) CALL TXWT(EXPBUF,EXPAND('%C%C',13,10))
	   CALL TXWT(EXPBUF,
     &		     EXPAND('%C%C%F9.3 %F9.3 ?  ',
     &			    13,10,CTMP(3,III),CTMP(4,III)))
	   CLRED=.FALSE.
	   HADLIN=.FALSE.
C
C ... position the cursor where we think the corner is.
	   IF (.NOT.CPGOT) GO TO 40
C
C ... we've done them once - use last time's position.
	   CUR(X)=CTMP(X,III)
	   CUR(Y)=CTMP(Y,III)
	   IF (III.EQ.1) GO TO 80
C
C ... add in global offset (film may have been re-inserted).
	   CUR(X)=CUR(X) + (CTMP(X,III-1) - CPMEAS(X,III-1))
	   CUR(Y)=CUR(Y) + (CTMP(Y,III-1) - CPMEAS(Y,III-1))
	   GO TO 80
C
C ... first time - use standard positions.
40	   CUR(X)=CX(III)
	   CUR(Y)=CY(III)
C
C ... but assume the thing's rectangular.
	   GO TO (80,50,60,70),III
C
50	   CUR(X)=CTMP(X,1)
	   GO TO 80
C
60	   CUR(Y)=CTMP(Y,2)
	   GO TO 80
C
70	   CUR(X)=CTMP(X,3)
	   CUR(Y)=CTMP(Y,1)
C
C ... put the cursor on the spot.
80	   CALL CSWT(CUR(X),CUR(Y))
	   IF (CPGOT) GO TO 180		! try automatically
90	   IF (.NOT.HADLDI) GO TO 100
	   CALL DISMOD(1)
	   CALL CURSOR
C
100	   DCPTR=-1
	   TXTPTR=-2
C
C ... read from FBs or keyboard.
	   CWD=RDCOMM(MEASCM,.FALSE.)
	   IF (CWD) 110,140,150
C
C ... number typed.
110	   DCPTR=1
	   CLRED=.TRUE.
	   HADLIN=.TRUE.
120	   IF (NREALS.EQ.2) GO TO 130
	   CALL RDREAL(RRR)
	   NREALS=NREALS+1
	   CTMP(NREALS+2,III)=RRR
	   IF (DCPTR.LT.TXTPTR) GO TO 120
	   GO TO 100
C
C ... too many reals.
130	   CALL WRITEF('Too many reals')
	   NREALS=0
	   GO TO 100
C
C ... nothing or error.
140	   HADLIN=.TRUE.
	   IF (DCPTR.LT.0) GO TO 100
	   CALL WRITEF('Just number please')
	   GO TO 100
C
C ... FB pressed.
150	   IF (CWD.EQ. 2) GO TO 180	! auto
	   IF (CWD.EQ. 4) GO TO 160	! accept
	   IF (CWD.EQ. 8) GO TO 170	! manual
	   IF (CWD.EQ.16) GO TO 430	! abandon
	   GO TO 100
C
C ... accept digitisation.
160	   IF (HADLDI.AND..NOT.CURSED) CALL CSRD(CUR(X),CUR(Y))
	   CTMP(1,III)=CUR(X)
	   CTMP(2,III)=CUR(Y)
	   IF (HADLDI) CALL DISMOD(0)
	   GO TO 190
C
C ... measure.
170	   CALL PARIO(4,PTYPE)
	   CALL FAX(.TRUE.,IWID,IPIT)
	   IF (HADLDI) CALL CSRD(CUR(X),CUR(Y))
	   CURSED=.TRUE.
	   CLRED=.TRUE.
	   GO TO 90
C
C ... measure the corner automatically.
180	   CALL PARIO(4,FIDTYP)
	   IF (HADLDI) CALL CSRD(CUR(X),CUR(Y))
	   CALL FIDFND(CUR,CUR,FND,.FALSE.)
	   CURSED=FND
	   IF (.NOT.FND)
     &	  CALL TXWT(EXPBUF,EXPAND('%C%CCan''t find control point%C%C%C',
     &				  13,10,		       7,13,10))
	   CALL CSWT(CUR(X),CUR(Y))
	   GO TO 90
190	CONTINUE			! end of looping around corners
C
C ... here with all four CPs OK.
C ... first show what we've got.
	CALL RDABO
	CALL TXCLR
	DO 200 III=1,4
	   CALL WRITEF('%C %F10.0%F10.0%F12.3%F9.3',NEWS(III),
     &			CTMP(1,III),CTMP(2,III),CTMP(3,III),CTMP(4,III))
200	CONTINUE
C
C ... if repeat CP then print shifts.
	IF (.NOT.CPGOT) GO TO 220
	CALL WRITEF('Shift since last CP')
	DO 210 III=1,4
	   CALL WRITEF('%C %F10.0%F10.0',NEWS(III),
     &              CTMP(1,III)-CPMEAS(1,III),CTMP(2,III)-CPMEAS(2,III))
210	CONTINUE
C
C ... ask question.
220	CALL TXWT(EXPBUF,EXPAND('%C%COK ?  ',13,10))
	IF (HADLDI) THEN
	   CALL DISMOD(1)
	   CALL CURSOR
	   CALL FBWT16("100010)
	ENDIF
C
230	DCPTR=-1
	TXTPTR=-2
	CWD=RDCOMM(NULLCM,.FALSE.)
	IF (CWD.EQ.4) GO TO 240
	IF (CWD.EQ.16) GO TO 430
	GO TO 230
C
C ... accepted, so update CPMEAS.
240	DO 260 III=1,4
	   DO 250 JJJ=1,4
	      CPMEAS(JJJ,III)=CTMP(JJJ,III)
250	   CONTINUE
260	CONTINUE
C
	CALL TXWT(EXPBUF,EXPAND('%C%CCP done%C%C%C',13,10,13,10,13))
C
C ... read in check fiducial info.
	CALL FBWT16(0)
270	CALL PROMRD('Which point as fiducial (-1,0,1-4) ?  ')
	IF (INTARG.LT.0) THEN			! fid -1
	   IF (NFID.NE.0) GO TO 400		! no change if set ...
	   IF (NFIDNF.LE.0) THEN		! else user-specified
	      IF (DCPTR.GE.0) THEN		! something typed
		 CALL CSWT(0.0,0.0)		! move cursor to centre
	      ELSE
		 CALL TXWT(EXPBUF,EXPAND('%C%C',13,10))
	      ENDIF
	      CALL TXWT(EXPBUF,EXPAND(
     &			'Move cursor to check fiducial%C%C%C',13,10,13))
	      IF (GETPT(FIDPOS(X),FIDPOS(Y),' Check Fid')) GO TO 430
	      IF (CHKFID(FND,.TRUE.)) GO TO 440
	      GO TO 360
	   ELSE
	      IF (CHKFID(FND,.TRUE.)) GO TO 440
	      GO TO 400
	   ENDIF
	ENDIF
	NFID=INTARG
	IF (NFID.GT.4) GO TO 270		! invalid
	IF (NFID.GT.0) GO TO 360
	NFIDNF=0				! disable fid checking
	GO TO 400
C
C *******************  CORTYP = 2 OR CORTYP = 3  ***********************
C
280	IF (NUMREL.LE.0) GO TO 290
C
C ... if argument to CAL or CCP command then set GRIDSQ.
	GRIDSQ=REALA1
	CALL WRITEF('Grid spacing is %F0.2',GRIDSQ)
	CALL WRITEF(' ')
C
C ... get size of grid.
290	IF (HADLDI) CALL DISMOD(0)
	CALL CHSIZE(400.0,400.0,0.0)
	CALL CSWT(45000.0,30000.0)
	IF (GETPT(XTRH,YTRH,' Upper right')) GO TO 430
	CALL CSWT(-45000.0,-30000.0)
	IF (GETPT(XBLH,YBLH,' Lower left')) GO TO 430
C
	CALL CSWT(XBLH+4000.0,YBLH)
	IF (GETPT(DXX,DYX,'  X step')) GO TO 430
	DXX=DXX - XBLH
	DYX=DYX - YBLH
	CALL CSWT(XBLH-DYX*0.9,YBLH+DXX*0.9)
	IF (GETPT(DXY,DYY,'  Y step')) GO TO 430
	DXY=DXY - XBLH
	DYY=DYY - YBLH
C
	NGRIDX=(XTRH-XBLH)/DXX + 1.5
	NGRIDY=(YTRH-YBLH)/DYY + 1.5
	IF (HADLDI) CALL DISMOD(0)
	IF (NGRIDX.GE.4.AND.NGRIDY.GE.4) GO TO 300
	CALL WRITEF('*** Bad point distribution%C',7)
	GO TO 440
C
C ... now measure the grid.
300	IF (.NOT.AUTGRD(COEFT,CTMP)) GO TO 420
C
	IF (CORTYP.NE.3) GO TO 340
C
C ......................................................................
C
C ... select check fid from grid.
310	CALL WRITEF('Move cursor to check fiducial%C',7)
	CALL WRITEF(' ')
	IF (GETPT(FIDPOS(X),FIDPOS(Y),' Check Fid')) GO TO 430
	JJJ=0
	RMAX=1000.0**2			! position to within 1 cm
	DO 320 III=1,NGRD
	   RRR=(FIDPOS(X)-OBS(X,III))**2 + (FIDPOS(Y)-OBS(Y,III))**2
	   IF (RRR.GT.RMAX) GO TO 320
	   JJJ=III
	   RMAX=RRR
320	CONTINUE
	IF (JJJ.LE.0) GO TO 310		! too far away
C
C ... record coords of point nearest cursor as check fid.
	FIDPOS(X)=OBS(X,JJJ)
	FIDPOS(Y)=OBS(Y,JJJ)
	NFID=0				! user-specified fiducial
C
C ... store control points.
	DO 330 III=1,4
	   CPMEAS(1,III)=CTMP(1,III)
	   CPMEAS(2,III)=CTMP(2,III)
	   IF (CPGOT) GO TO 330
	   CPMEAS(3,III)=SQINDX(III)*(NGRIDX - 1)*GRIDSQ
	   CPMEAS(4,III)=SQINDY(III)*(NGRIDY - 1)*GRIDSQ
330	CONTINUE
C
C ......................................................................
C
C ... store coefficients for next new section.
340	DO 350 III=1,10
	   CFT(III,1)=COEFT(III,1)
	   CFT(III,2)=COEFT(III,2)
	   FCOEFF(III,1)=COEFT(III,1)
	   FCOEFF(III,2)=COEFT(III,2)
350	CONTINUE
	IF (CORTYP.EQ.2) GO TO 410	! finished if CAL
C
C **********************************************************************
C
360	CALL PROMRD('After how many features ?  ')
	IF (INTARG.GT.0) GO TO 370	! valid response ?
	IF (DCPTR.EQ.-1) CALL TXWT(13,1)
	GO TO 360
370	NFIDNF=INTARG
C
380	CALL PROMRD('Maximum permitted error ?  ')
	IF (INTARG.GT.0) GO TO 390	! valid response ?
	IF (DCPTR.EQ.-1) CALL TXWT(13,1)
	GO TO 380
390	FIDMAX=INTARG
C
400	CALL EXPAND('Fiducial')
	IF (NFIDNF.LE.0) THEN
	   CALL APPEND(' check disabled')
	ELSE
	   IF (NFID.EQ.0) THEN
	      CALL APPEND(' check')
	   ELSE
	      CALL APPEND(' %N',NFID)
	   ENDIF
	   CALL APPEND(' every ')
	   IF (NFIDNF.EQ.1) THEN
	      CALL APPEND('feature')
	   ELSE
	      CALL APPEND('%N features',NFIDNF)
	   ENDIF
	   CALL APPEND(' with error limit %F0.1',FIDMAX)
	ENDIF
	CALL LINOUT
	CPGOT=.TRUE.
410	CORCAL=.FALSE.
C
C**********************************************************************
C
C ... tidy up.
420	CALL PARIO(4,LTYPE)
	GO TO 440
C
C ... abandoned.
430	CALL TXWT(EXPBUF,EXPAND('%C%CAbandoned%C%C',13,10,13,10))
C
440	RETURN
	END
