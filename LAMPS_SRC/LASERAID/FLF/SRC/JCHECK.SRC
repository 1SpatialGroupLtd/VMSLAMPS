C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1982-11-03 12:26:08.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION JCHECK(NUMCH)
C
***	MODULE	JCHECK
***	IDENT	03NO82
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
C Author: D. Meader
C
C	CRUDIS replaced by TRAKWD		 DM	01-Nov-1982
C	Given arg & ignores superfluous tpts	 DM	15-Jul-1982
C	Created 				 DM	13-Jul-1982
C
C Checks that the transition points form a consistent set.
C If they don't, we try to work out what's happened (most likely reason
C is a 'marginal' case where some tpts indicate two junctions and others
C only one, etc). If we manage to sort it out, we try to fix things by
C slightly altering the shape of one or more chains in an attempt to 
C force JFINTP to see the right thing on the next pass.
C The function is .TRUE. if inconsistencies were found.
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
***	PARAMETER/PARAMS/
C
***	COMMON/JUNCOM/
***	COMMON/LINKS/
***	COMMON/LKPARM/
***	COMMON/RSE/
C
	INTEGER I,J		! do loop variables, etc.
	INTEGER	NCHN,ICHN	! 'source' and 'target' chains
	INTEGER NDUFF		! number of mismatched chains
	INTEGER NEARPT		! required nearest node to TPT2
	INTEGER	NLSTPT,ILSTPT	! last tpts on NCHN and ICHN
	INTEGER NODTP2		! node corresponding to TPT2
	INTEGER NTPT(MAXCHN)	! no. of tpts actually found on each chn
	INTEGER NTPTOK(MAXCHN)	! number of 'good' tpts
	INTEGER NUMCH		! number of chains remaining
	INTEGER NXTPT		! next 'good' tpt after TPT1
	INTEGER	TPTCLO(MAXCHN)	! number of references to each chain
	INTEGER	TPT1,TPT2	! two transition points (TPT2 is duff)
	LOGICAL CHNOK(MAXCHN)	! chain OK (i.e. not mismatched) ?
	REAL	DIST1,DIST2	! separations of nodes
	REAL	MAXDST		! distance criterion for duff tpt
	REAL	MINDST		! min. dist. between node and chain
	REAL	RATIO		! move node by RATIO of curr. separation
	REAL	X1,Y1,X2,Y2	! positions of nodes
C
C ......................................................................
C
C ... initialise.
	JCHECK=.FALSE.
	MAXDST=5.0*TRAKWD*TRAKWD	  ! rather arbitrary, this
	DO 10 I=1,MAXCHN
	   CHNOK(I)=.TRUE.
	   NTPTOK(I)=0
	   TPTCLO(I)=0
10	CONTINUE
C
C ... loop through the transition points, accumulating 'hits' on each
C ... chain referred to in TPTCHN (tpts involving large distances are
C ... considered to be superfluous).
C ... the resulting numbers are TWICE the number of tpts that we expect
C ... to find on each chain.
	DO 30 I=1,NUMTPS
	   IF (CLODIS(TRPTAR(2,I)).LE.MAXDST.OR.
     &	       CLODIS(TRPTAR(1,I)).LE.MAXDST) GO TO 20
	   DUFTPT(I)=.TRUE.
	   IF (TMPCHK) CALL WRITEF('JCHECK: Superfluous tpt found')
	   GO TO 30
20	   TPTCLO(TPTCHN(1,I))=TPTCLO(TPTCHN(1,I)) + 1
	   TPTCLO(TPTCHN(2,I))=TPTCLO(TPTCHN(2,I)) + 1
	   NTPTOK(TPTCHN(3,I))=NTPTOK(TPTCHN(3,I)) + 1
	   DUFTPT(I)=.FALSE.
30	CONTINUE
C
C ... look for discrepancies between the expected and actual no. of tpts
	NDUFF=0
	DO 40 I=1,MAXCHN
	   IF (CHAIN(I).LE.0) GO TO 40
	   IF (TPTCLO(I)/2 .EQ. NTPTOK(I)) GO TO 40
	   NDUFF=NDUFF + 1			  ! got a mismatch
	   CHNOK(I)=.FALSE.			  ! record it
	   NTPT(I)=CHNTPS(2,I) - CHNTPS(1,I) + 1  ! no. of tpts on chain
	   IF (CHNTPS(2,I).EQ.0) NTPT(I)=1	  ! must be at least one
40	CONTINUE
	IF (NDUFF.EQ.0.OR.NDUFF.EQ.NUMCH) GO TO 140 ! all OK or all duff
	IF (NDUFF.GE.2) GO TO 50		  ! ignore if only one
C
	IF (TMPCHK)
     &	   CALL WRITEF('JCHECK: Only 1 mismatched chain found')
	GO TO 140
C
C ... got two or more mismatched chains - try to pair them up.
50	IF (TMPCHK)
     &	   CALL WRITEF('JCHECK: %N mismatched chain%m found',NDUFF)
	DO 130 NCHN=1,MAXCHN
	   IF (CHNOK(NCHN)) GO TO 130		  ! ignore good chains
C
C ... first look for a chain with too many tpts.
	   IF (TPTCLO(NCHN)/2 .GT. NTPTOK(NCHN)) GO TO 130
	   TPT1=CHNTPS(1,NCHN)			  ! 1st tpt on this chn
	   NLSTPT=TPT1 + NTPT(NCHN)		  ! last tpt on this chn
C
C ... now look for two CONSECUTIVE (non-superfluous) tpts which indicate
C ... transitions to and from (respectively) the SAME chain, where that
C ... chain has too FEW transition points.
60	   NXTPT=TPT1 + 1
	   IF (DUFTPT(TPT1)) GO TO 120
70	   IF (.NOT.DUFTPT(NXTPT)) GO TO 80
	   NXTPT=NXTPT + 1
	   IF (NXTPT.GT.NLSTPT) GO TO 130
	   GO TO 70
C
80	   ICHN=TPTCHN(2,TPT1)
	   IF (CHNOK(ICHN)) GO TO 120		  ! ignore good chains
	   IF (TPTCHN(1,NXTPT).NE.ICHN) GO TO 120
	   IF (TPTCLO(ICHN)/2 .LT. NTPTOK(ICHN)) GO TO 120
C
C ... we've found a specific mismatch between NCHN and ICHN.
C ... find the relevant transition point (TPT2) on ICHN - TPT1 and TPT2
C ... must refer to a common chain.
	      TPT2=CHNTPS(1,ICHN)
	      ILSTPT=TPT2 + NTPT(ICHN)
90	      IF (DUFTPT(TPT2)) GO TO 110
	      IF (TPTCHN(2,TPT2).NE.TPTCHN(1,TPT1)) GO TO 110
C
C ... now we know what's happened.
C ... TPT2 indicates a transition between two different junctions.
C ... to put this right we 'bend' NCHN a bit to try to force JFINTP to
C ... see the transition that we know to be there.
C ... find the distance that triggered TPT2.
		 NODTP2=TRPTAR(2,TPT2)		  ! tpt2 node
		 DIST1=CLODIS(NODTP2)		  ! nearest pnt to tpt2
		 X1=FLOAT(ENCBUF(X,NODE(NODTP2))) ! position of tpt2
		 Y1=FLOAT(ENCBUF(Y,NODE(NODTP2)))
C
C ... find the minimum distance for the transition that we WANT to see.
		 MINDST=1.0E20
		 DO 100 J=FIRST(NCHN),LAST(NCHN)  ! step along NCHN
		    DIST2=(FLOAT(ENCBUF(X,NODE(J))) - X1)**2 +
     &			  (FLOAT(ENCBUF(Y,NODE(J))) - Y1)**2
		    IF (DIST2.GT.MINDST) GO TO 100
		    MINDST=DIST2		  ! new minimum dist ...
		    NEARPT=J			  ! and near point
100		 CONTINUE
C
C ... now move the node NEARPT along the line joining NEARPT to NODTP2
C ... so that NEARPT will trigger the transition on the next pass.
		 RATIO=SQRT(DIST1/MINDST) - 0.1	  ! bias towards NEARPT
		 X2=FLOAT(ENCBUF(X,NODE(NEARPT))) ! position of NEARPT
		 Y2=FLOAT(ENCBUF(Y,NODE(NEARPT)))
		 ENCBUF(X,NODE(NEARPT))=INT(X1 + (X2-X1)*RATIO)
		 ENCBUF(Y,NODE(NEARPT))=INT(Y1 + (Y2-Y1)*RATIO)
		 IF (TMPCHK)
     &		    CALL WRITEF('JCHECK: Chain %N modified',NCHN)
		 JCHECK=.TRUE.
		 GO TO 130			  ! finished with NCHN
110	      TPT2=TPT2 + 1			  ! next tpt on ICHN
	      IF (TPT2.LE.ILSTPT) GO TO 90
120	   TPT1=NXTPT + 1			  ! next pair of ...
	   IF (TPT1.LT.NLSTPT) GO TO 60		  ! tpts on NCHN
130	CONTINUE
C
140	RETURN
	END
