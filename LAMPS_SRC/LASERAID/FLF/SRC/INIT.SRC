C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-10-30 13:53:38.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE INIT
C
***	MODULE	INIT
***	IDENT	30OC86
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	Ignore MHBGI in OLD OS file		 DM	30-Oct-1986
CMOD	Use target CP values if 'very old' file	 DM	22-Oct-1986
CMOD	New files have SH before MH now		 DM	18-Aug-1986
CMOD	NSMESS includes username & LTK dev name	 DM	22-Jul-1986
CMOD	NFIDNF initialised			 DM	16-Jul-1986
CMOD	CFT reinstated (to preserve accuracy)	 DM	30-Jun-1986
CMOD	CFT replaced by FCOEFF			 DM	26-Jun-1986
CMOD	Converged				 DM	25-Jun-1986
CMOD	Copes with HI entry in OLD IFF file	 DM	25-Apr-1986
CMOD	JCRANG initialised to -361, not -1	 DM	08-Apr-1986
CMOD	STRLEN introduced			 DM	28-Feb-1986
CMOD	No longer outputs MH messages if OS	 DM	21-Nov-1985
CMOD	PNTINI initialised; tidied		 DM	18-Oct-1985
CMOD	Clear dialogue area for Tek 4105	 DM	11-Sep-1985
CMOD
CMOD	*** OLD UPDATES NOW IN FLF.UPD ***	 DM	29-May-1986
CMOD
CMOD	Created					PGH/MCF	 about 1976
C
C Initialisation of IFF and FASTRAK/LASERTRAK.
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
C parameters:
***	PARAMETER/PARAMS/
C
	INTEGER*4 DVI$_DEVDEPEND2
	EXTERNAL  DVI$_DEVDEPEND2
	INTEGER*4 JPI$_PRCNAM
	EXTERNAL  JPI$_PRCNAM
	INTEGER*4 JPI$_USERNAME
	EXTERNAL  JPI$_USERNAME
	INTEGER*4 RMS$_FNF
	EXTERNAL  RMS$_FNF
	INTEGER*4 SS$_NORMAL
	EXTERNAL  SS$_NORMAL
	INTEGER*4 TT2$M_DECCRT
	EXTERNAL  TT2$M_DECCRT
C
	INCLUDE   '($LNMDEF)'
C
C common blocks:
***	COMMON/DEBUG/
***	COMMON/DIGC/
***	COMMON/EFNETC/
***	COMMON/EXPC/
***	COMMON/GUIDE/
***	COMMON/IFFHAN/
***	COMMON/IFFJUN/
***	COMMON/JCRCOM/
***	COMMON/INITC/
***	COMMON/ISCBUF/
***	COMMON/LDREFR/
***	COMMON/MASTER/
***	COMMON/MHDMB/
***	COMMON/TERMNL/
***	COMMON/TXTC/
C
C local workspace:
	CHARACTER*80 DEFNAM
	CHARACTER*15 DEFTIT
	INTEGER   CWD		! command returned by RDCOMM
	INTEGER   IDESC(MDLEN)	! null MD entry
	INTEGER   IDS
	INTEGER   IECODE,IELEN
	INTEGER   IELIST(5)	! list of expected IFF entries
	INTEGER   IFFNL		! IFFNAM length
	INTEGER   III,JJJ
	INTEGER   ITEM
	INTEGER*2 ITMLST2(14)
	INTEGER   JIPOS
	INTEGER   NIE
	INTEGER   SAVPTR	! for file titles
	INTEGER   TIMBUF(8)	! for GETTIM's results
	INTEGER*4 IERR		! error from queueing of System service
	INTEGER*4 IO
	INTEGER*4 ITMLST(7)
	INTEGER*4 JLPOS
	INTEGER*4 LATYPE	! what type of Laseraid we are
	INTEGER*4 LSTAT		! return from $GETDVI
	LOGICAL*1 DATBUF(9)
	LOGICAL*1 HADIFF	! had IFF command
	LOGICAL*1 LATYPB(4)	! what type of Laseraid we are (byte)
	LOGICAL*1 MOVEPC	! new photochromic desired
	LOGICAL*1 NEWJUN
	LOGICAL*1 NOUSER	! username same as process name ?
	LOGICAL*1 TIMEBF(8)
	LOGICAL*1 USEHRD	! use the display
	REAL      PX,PY
C
	EQUIVALENCE (ITMLST,ITMLST2)
	EQUIVALENCE (LATYPE,LATYPB(1))
C
C functions:
	INTEGER	  EXPAND
	INTEGER   RDCOMM
	INTEGER   RTIDY
	INTEGER*4 STRLEN	! get length of string up to null
	INTEGER*4 SYS$GETJPIW	! Get Job/Process Information and Wait
	INTEGER*4 SYS$GETDVIW	! Get Device Information and Wait
	INTEGER*4 SYS$TRNLNM	! translate logical name
	INTEGER   TXTCML
	LOGICAL   RDFILT
C
	EXTERNAL  RTIDY
C
C data:
**	IF RASTER
	DATA DEFTIT/'LSL$DB:DBS.DBS'/
**	IFF
	DATA DEFTIT/'LSL$IF:IFF.IFF'/
**	ENDC
	DATA IDESC/MDLEN*0/
	DATA IELIST/'RA','MH','NS','CC','CP'/
	DATA IO/'OPEN'/
	DATA MHARR/MHLEN*0/
C
C ......................................................................
C
C Initialise
C
C ... what are we ?
	LATYPE='LAJ'
**	IF RASTER
	LATYPE='LAR'
**	ENDC
**	IF AREA
	LATYPE='LAA'
**	ENDC
	LATYPB(4)=0		! terminate by a null
C
	COR1ST=.TRUE.
	CPDONE=.FALSE.
	CPGOT =.FALSE.
	EFPEND=.FALSE.
	EOP   =.TRUE.
	GUDOPN=.FALSE.
	HADHGT=.FALSE.
	HADLDI=.FALSE.
	HADTIK=.FALSE.
	INOVER=.FALSE.
	OSSQU =.FALSE.
	PMEING=.FALSE.
	POUTD =.TRUE.
	SACSET=.FALSE.
	USEGUD=.FALSE.
	ACBASE=0		! default to LSL AC range
	CHFRMT=-1
	HTMODE=-1		! display NF number by default
	JCRNUM=0
	NFID  =0
	NFIDNF=0
	OVRNUM=-1		! no layer selected
	PNTINI=0		! default point feature mode
	WX    =57.0		! improved cursor limits (pro. tem.)
C
	ITMLST2(1)=15		! get the process name ...
	ITMLST2(2)=%LOC(JPI$_PRCNAM)
	ITMLST(2)=%LOC(PRCNAM)
	ITMLST(3)=%LOC(PRCLEN)
	ITMLST2(7)=12		! and the username
	ITMLST2(8)=%LOC(JPI$_USERNAME)
	ITMLST(5)=%LOC(USRNAM)
	ITMLST(6)=%LOC(USRLEN)
	ITMLST(7)=0
	IERR=SYS$GETJPIW(,,,ITMLST,,,)
	IF (.NOT.IERR) CALL LIB$SIGNAL(%VAL(IERR))
	NOUSER=.TRUE.		! assume username same as process name
	DO 10 III=1,USRLEN
	   IF (USRNAM(III:III).EQ.' ') GO TO 20
	   IF (III.GT.PRCLEN) GO TO 10
	   IF (USRNAM(III:III).NE.PRCNAM(III:III)) NOUSER=.FALSE.
10	CONTINUE
	III=USRLEN + 1
20	USRLEN=MAX(1,III-1)	! (SYS$GETJPIW gets this wrong)
	IF (USRLEN.NE.PRCLEN) NOUSER=.FALSE.
	IF (NOUSER) THEN
	   USRNAM=' '		! don't bother to output username
	   USRLEN=1
	ELSE
	   USRNAM=' ('//USRNAM(:USRLEN)//') '
	   USRLEN=USRLEN + 4
	ENDIF
	CALL TIME(TIMEBF)	! get the time ...
	CALL DATE(DATBUF)	! and the date ...
	ITMLST2(1)=15		! and the device
	ITMLST2(2)=LNM$_STRING
	ITMLST(2)=%LOC(HRDNAM)
	ITMLST(3)=%LOC(HRDLEN)
	ITMLST(4)=0
	IERR=SYS$TRNLNM(,'LNM$DCL_LOGICAL','SYS$HRD',,ITMLST)
	IF (.NOT.IERR) CALL LIB$SIGNAL(%VAL(IERR))
	ITMLST(2)=%LOC(MCNNUM)	! try to get the machine number
	ITMLST(3)=%LOC(MCNLEN)
	IERR=SYS$TRNLNM(,'LNM$DCL_LOGICAL',
     &			'SYS$HRNUM'//HRDNAM(3:3),,ITMLST)
	IF (IERR.EQ.%LOC(SS$_NORMAL)) THEN
	   MCNNUM=' (1'//MCNNUM(:MCNLEN)//')'
	   MCNLEN=MCNLEN + 4
	ELSE			! can't do it for some reason
	   MCNNUM=' '
	   MCNLEN=1
	ENDIF
	III=EXPAND('%W%S%Sat %A5 on %A9 using %S%S',NSMESS,
     &		    PRCNAM(:PRCLEN),USRNAM(:USRLEN),TIMEBF,DATBUF,
     &		    HRDNAM(:HRDLEN),MCNNUM(:MCNLEN))
	IF (III.LT.80) NSMESS(III+1)=0
C
	TTILUN=1
	TTIEFN=TTILUN
	TTOLUN=3
	TTOEFN=TTOLUN
	TTIOSB=1
	TTBTCT=-1
	TTINF =1
	FFIEFN=4
	FFOEFN=8
	LDLUN =2
	LDEFN =LDLUN
	SAVLUN=5
	MRKEFN=6
	IFFLUN=7
C
	TKPERS=-10*1000*1000		! delta time conversion constant
C
C set up devices
C
	CALL TTRINI
	CALL SYS$ASSIGN('TT',TTOLUN,,)
C
C announce version,options & date of creation
C
	CALL IDENT(LATYPB)
C
C copy the ident string into /DEBUG/ for the purposes of EXCEPT and WHA.
	DO 30 III=1,EXPLEN+1
	  IDTEXT(III:III)=CHAR(EXPBUF(III))
30	CONTINUE
C
C read CLI line
C
40	IDS=TXTCML('Command: ')
	IF (IDS.EQ.0) GO TO 40
	IF (IDS.GT.0) GO TO 50
	IF (IDS.EQ.-10) CALL EXIT
	CALL WRITEF('Command line error %N',IDS)
	GO TO 40
C
50	TXTPTR=IDS
	TXTBUF(TXTPTR+1)=0
	USEHRD=.TRUE.
	MOVEPC=.FALSE.
	HADIFF=.FALSE.
	ITEM=0
C
	CALL EXPAND('%WSLSL$LK:LNK.%A3;0',DEFNAM,LATYPB)
	CALL EXPAND('%WS%S',SYSNAM,DEFNAM)
C
60	ITEM=ITEM+1
	SAVPTR=DCPTR
	CWD=RDCOMM(INITCM(1),.TRUE.)
	IF (CWD) 80,70,90
C
C end of line or error
70	IF (DCPTR .LT. 0) GO TO 160	! end of line
C
C "just number" joins
80	IF (ITEM .NE. 1) GO TO 530	! strange number or error
	CWD=1				! assume IFF command
	DCPTR=SAVPTR			! try it again
C
C command
90	GO TO (100,100,110,120,130,140,150),CWD
	GO TO 60
C
C define data file
C	IFF/NEW/TO fff	- new
C	OLD/UPD/APP fff	- old
C
100	IF (HADIFF) GO TO 540
	NEWIFF=CWD.EQ.1
	IF (RDFILT(IFFNAM,80,DEFTIT,.TRUE.,.FALSE.,.FALSE.,IFFNL))
     &	   GO TO 510
	IF (IFFNL.LT.80) IFFNAM(IFFNL+1:IFFNL+1)=CHAR(0)
	HADIFF=.TRUE.
	GO TO 60
C
C WITH xxxx - alternative patch file name
110	IF (RDFILT(SYSNAM,80,DEFNAM,.FALSE.,.FALSE.,.FALSE.,III))
     &	   GO TO 520
	IF (III.LT.80) SYSNAM(III+1:III+1)=CHAR(0)
	GO TO 60
C
C NOD - don't use the HRD
120	USEHRD=.FALSE.
	GO TO 60
C
C NP - new photochromic
130	MOVEPC=.TRUE.
	GO TO 60
C
C ... HTD [r] - display heights as real numbers [start at r]
140	HTMODE=0
	IF (NUMREL.LE.0) GO TO 60
	HTREAL=REALA1
	HADHGT=.TRUE.
	GO TO 60
C
C ... HTI/HGT [n] - display heights as integer*4 numbers [start at n]
150	HTMODE=1
	IF (NUMINT.LE.0) GO TO 60
	HTLONG=LONGA1
	HADHGT=.TRUE.
	GO TO 60
C
C processed command line - get started
160	IF (.NOT.HADIFF) GO TO 500	! IFF filename not given
	IF (.NOT.USEHRD) GO TO 170	! start the HRD (perhaps)
	CALL LDINIT(127)
	HADLDI=.TRUE.
	CALL TRSET(1)			! work in counts
	CALL SCBUF(IBUF,ISIZE)
	CALL UNITS(0.001)
	CALL CHSIZE(400.0,400.0,0.0)
C
C set separate refresh CH size, since we're using RF's LDLIB.
	CALL DISMOD(1)
	CALL CHSIZE(400.0,400.0,0.0)
	CALL DISMOD(0)
	CALL LDINPM(1,BLUFOC,III,III)
	IF (MOVEPC) CALL PCFRAM(1.0)
C
C get the terminal type - if it claims to be a VT100 assume Tek 4105,
C rather than 4010. If an implementor runs Laseraid from a VT100 without
C NOD  - LET HIM BEWARE !!!
	ITMLST2(1)=4
	ITMLST2(2)=%LOC(DVI$_DEVDEPEND2)
	ITMLST(2)=%LOC(LSTAT)
	ITMLST(3)=0
	ITMLST(4)=0
C
	IERR=SYS$GETDVIW(,%VAL(TTOLUN),,ITMLST,,,,)
	IF (.NOT.IERR) CALL LIB$SIGNAL(%VAL(IERR))
C
	IF ((LSTAT.AND.%LOC(TT2$M_DECCRT)).EQ.0) THEN
	   TERTYP=0				! 4010
	ELSE
	   TERTYP=1				! 4105
C
C set 4105 CODE TEK, CLEARDIALOG, DAENABLE NO.
	   CALL WRITEF('%A1%%!0%A1LZ%A1KA0',27,27,27)
	ENDIF
C
C set up IFF
170	CALL IFFTDY(RTIDY)
C
C open patch file
	CALL LINOUT(SYSNAM(:STRLEN(SYSNAM)))
	CALL IFFOPN(SAVLUN,SYSNAM,5120)
**	IF RASTER
	IF (IERCD.EQ.0) GO TO 460
**	IFF
	IF (IERCD.EQ.0) GO TO 180
**	ENDC
	CALL WRITEF('Can''t open patch file %S',SYSNAM(:STRLEN(SYSNAM)))
	GO TO 40
C
C open output IFF file
C
180	IF (NEWIFF) GO TO 190
	CALL WRITEF('%S;0',IFFNAM(1:IFFNL))	! try existing file
	CALL IFFOPN(IFFLUN, EXPDSC)
	IF (IERCD.EQ.0) GO TO 240		! found it
	IF ((IERCD.NE.IO).OR.(IERNM/8.NE.%LOC(RMS$_FNF)/8)) GO TO 200
	NEWIFF=.TRUE.
C
C create new IFF file
190	CALL LINOUT(IFFNAM(1:IFFNL))		! not there - create one
	CALL IFFOPN(IFFLUN, IFFNAM)
	IF (IERCD.EQ.0) GO TO 210
C
C error when trying to open output file
200	CALL IFFCLO(SAVLUN)
	GO TO 40
C
C Initialise new IFF file
C
210	CALL IFFCLR		! in case old empty file
	CALL IFFRA(UNICFT)	! dummy RA entry overwritten later
C
C set up the sector header
	CALL IFFSH(-5.0E37,-5.0E37,1.0E38,1.0E38,1,1)
	CALL IFFMH(MHARR,MHLEN)	! null MH entry
	IDESC(1)=-1
	CALL IFFMD(IDESC,MDLEN)	! null MD entry
C
C set unit transform
	DO 230 III=1,2
	  DO 220 JJJ=1,10
	    CFT(JJJ,III)=UNICFT(JJJ,III)
	    FCOEFF(JJJ,III)=UNICFT(JJJ,III)
220	  CONTINUE
230	CONTINUE
	GO TO 450
C
C ......................................................................
C
C Set up for old file
240	CALL IFFRWD
C
	DO 330 NIE=1,5
250	  CALL IFFNXT(IECODE,IELEN)	! look at next entry
	  IF (IELEN .EQ. -1 ) GO TO 470	! EOF
	  IF (IECODE.EQ.'MD') GO TO 250	! skip map descriptor
	  IF (IECODE.EQ.'SH') GO TO 250	! and sector header
	  IF (IECODE.EQ.'HI') GO TO 250	! and history entry
	  IF (IECODE.EQ.'VO') GO TO 250	! and voids
C
C empty file ?
	  IF (NIE.EQ.2.AND.(IECODE.EQ.'EM'.OR.IECODE.EQ.'EJ')) GO TO 210
	  IF (IECODE.NE.IELIST(NIE)) GO TO 480
	  GO TO (260,270,280,290,300),NIE	! deal with entry
C
C RA - zap it
260	  CALL EIHWR(UNICFT,4,1)	! 0.0, 1.0, 0.0, 0.0
	  GO TO 330
C
C MH - if OS type then use it
270	  IELEN=MIN(IELEN,MHLEN)
	  CALL EIHR(MHARR,IELEN,1)
	  IF (MHDESC(2).NE.2) GO TO 330
	  CALL WRITEF('Job number:   %^L%N',PCJOBN)
	  CALL WRITEF('Source scale: %^L%N',MHSCSC)
	  GO TO 330
C
C NS - type the message
280	  CALL EIHR(TXTBUF,IELEN,1)
	  TXTBUF(IELEN*2+1)=0
	  CALL WRITEF('%A',TXTBUF)
	  GO TO 330
C
C CC - read in 'backwards coefficients' (although we aren't sure yet
C      that that is what they are).
290	  CALL EIHRR(BCOEFF,20,1)
	  GO TO 330
C
C CP - see if they constitute a unit transform.
C      if so assume we have a 'very old' file (pre-convergence) and deal
C      with it later when we've set up all the transform coefficients.
300	  CALL EIHRR(CPTS,16,1)
	  CPGOT=.TRUE.
	  DO 310 III=1,4
	    CPMEAS(3,III)=CPTS(3,III)	! take r.h.s. from OLD file
	    CPMEAS(4,III)=CPTS(4,III)
	    IF ((ABS(CPTS(1,III)-CPTS(3,III)).GT.1.0E-6).OR.
     &          (ABS(CPTS(2,III)-CPTS(4,III)).GT.1.0E-6)) COR1ST=.FALSE.
310	  CONTINUE
	  IF (COR1ST) GO TO 460		! both sides of CP the same ?
C
C non-unit CP - assume we have a 'normal' (post-convergence) old file.
C set up the rest of CPMEAS.
	  DO 320 III=1,4
	    CPMEAS(1,III)=CPTS(1,III)	! also take r.h.s. from OLD file
	    CPMEAS(2,III)=CPTS(2,III)
	    CALL TRXUSE(CPMEAS(1,III),CPMEAS(2,III),BCOEFF)
320	  CONTINUE
330	CONTINUE
C
C ......................................................................
C
C ordinary 'old' file - read it in.
340	CALL IFFNXT(IECODE,IELEN)
	IF (IELEN.EQ.-1) GO TO 400
	IF (IECODE.EQ.'NO') GO TO 360
	IF (IECODE.EQ.'EM') GO TO 410
	IF (IECODE.EQ.'EJ') GO TO 420
	IF (IECODE.EQ.'NF') GO TO 350
	IF (IECODE.EQ.'JB') GO TO 370
	GO TO 340
C
C NF - record largest feature numbers
350	CALL EIHRI(III,1,1)
	IF (OVRNUM.GT.0.AND.III.GE.FNUM(OVRNUM)) FNUM(OVRNUM)=III + 1
	GO TO 340
C
C NO - set up for overlay
360	CALL EIHRI(III,1,1)
	CALL SETOVR(III,.FALSE.)
	IF (OVRLAY(OVRNUM).EQ.CNROVR) HADTIK=.TRUE.
	GO TO 340
C
C JB - set up in-core junction list
370	CALL IFJNXT(PX,PY,III)
	IF (III.LE.0) GO TO 340
	NEWJUN=.FALSE.
	DO 380 JJJ=1,MAXBRA
	   JCRANG(JJJ,JCRNUM+1)=-361
380	CONTINUE
	DO 390 JJJ=1,III
	   CALL JIHR(JJJ,JLPOS,JIPOS)
	   IF (JLPOS.NE.0) GO TO 390
	   JCRANG(JJJ,JCRNUM+1)=JIPOS
	   NEWJUN=.TRUE.
390	CONTINUE
	IF (.NOT.NEWJUN) GO TO 370
	JCRNUM=JCRNUM+1
	JCRPOS(X,JCRNUM)=PX
	JCRPOS(Y,JCRNUM)=PY
	JCRARM(JCRNUM)=III
	JCRLPS(JCRNUM)=LPOSH
	JCRIPS(JCRNUM)=IFPOSJ
	IF (JCRNUM.LT.MAXJCR) GO TO 370
	CALL WRITEF('No room to buffer junction%C',7)
	JCRNUM=MAXJCR - 20
	GO TO 340
C
C end of file - moan and exit
400	CALL WRITEF('Unexpected end of IFF file')
	GO TO 490
C
C EM - mark for (perhaps) later VOMming
410	CALL EIHMK(1)
	GO TO 340
C
C EJ - tidy up end of file
420	IF (LPOSM.EQ.0) CALL EIHMK(1)	! mark the EJ
430	CALL IFFNXT(IECODE, IELEN)	! move to next entry
	IF (IELEN.EQ.-1) GO TO 440
	CALL WRITEF('Entry "%C" found after "EJ" - deleted',IECODE)
	GO TO 430
C
C remove the EM/EJ from the end of the file
440	CALL IFFVOM			! remove the EM/EJ
	CALL EIHMK(0)			! remove marker
	IF (IFSHSZ.EQ.0) CALL IFFSH(-5.0E37,-5.0E37,1.0E38,1.0E38,1,1)
	NEWIFF=.TRUE.			! adding to file now
C
C report on overlays
	IF (OVRLAY(OVRNUM).EQ.CNROVR) OVRNUM=-1
C
C new IFF file joins
450	IF (OVRNUM.GT.0) CALL WRITEF('Layer %N selected',OVRLAY(OVRNUM))
C
C tidy up & exit
460	DCPTR=-1			! finished with command line now
	TXTPTR=-2
	RETURN
C
C ......................................................................
C
C Errors in data file
470	CALL WRITEF('Expected entry "%C" not found in IFF file',
     &				IELIST(NIE))
	GO TO 490
C
480	CALL WRITEF
     &    ('Entry "%C" found in IFF file when "%C" was expected',
     &     IECODE, IELIST(NIE))
C
C close files
490	CALL IFFCLO(IFFLUN)
	CALL IFFCLO(SAVLUN)
	GO TO 40			! and (perhaps) prompt again
C
500	CALL WRITEF('No IFF filename given')
	GO TO 40
C
510	CALL WRITEF('Illegal filename')
	GO TO 40
C
520	CALL WRITEF('Patch file name absent/too long')
	GO TO 40
C
530	CALL WRITEF('Error in command line')
	GO TO 40
C
540	CALL WRITEF('Output file specified more than once')
	GO TO 40
C
	END
C
	SUBROUTINE RTIDY
C
***	MODULE	RTIDY
***	IDENT	30MY86
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
C Tidy up after an IFF error.
C
	RETURN
	END
