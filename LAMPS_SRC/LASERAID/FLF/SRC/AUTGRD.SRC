C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-07-21 11:13:20.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION AUTGRD(COEFT,CTMP)
C
***	MODULE	AUTGRD
***	IDENT	21JL86
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	Corner points are now control points	 DM	14-Jul-1986
CMOD	Copyright notice added; tidied		 DM	22-Nov-1985
CMOD	FIT nows checks point distribution	 DM	02-Jun-1983
CMOD	O S G R I D removed, CORTYP added	AJW	13-Apr-1983
CMOD	NX, NY changed to NGRIDX,NGRIDY		AJW	12-Apr-1983
CMOD	IFs indented, etc.			AJW	06-Apr-1983
CMOD	always starts slowly			AJW	10-Nov-1982
CMOD	Change to function, move residual stuff	WJJ	05-Nov-1982
CMOD	  in from CALIB
CMOD	Change to use FIDMES routine		WJJ	04-Nov-1982
CMOD	GRDOUT stuff removed			AJW	02-Nov-1982
CMOD	T E X T C changed			AJW	 1-Jul-1981
CMOD	despatch table for RDCOMM made a
CMOD	GO TO(...),n and AUTCOM set false if
CMOD	unable to measure automatically, and
CMOD	function button 13 flashed correctly	AJW	23-Jun-1981
CMOD	CORCM INTEGER as well as EXTERNAL	AJW	12-Jun-1981
CMOD	AUTCON - auto continue added		AJW	10-May-1981
CMOD	NUMC changed to EXPC			AJW	 6-May-1981
CMOD	Last edited				AJW	22-Jan-1980
CMOD	Runaway duff points stopped		AJW	 4-Nov-1980
CMOD	O S G R I D stuff & tidies		MCF	18-Jul-1980
CMOD	Created 1977 or 1978			MCF
C
C Routine to measure a grid using FIDMES.
C
C Value is TRUE unless too few points, or abandoned.
C
C Dud points are not included in the list
C
C Details about the grid to be measured are found in /GRID/ and the
C measured intersections are left in /COORDS/.
C The coefficients are returned in COEFT.
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
C parameters:
***	PARAMETER/PARAMS/
C
C arguments:
	REAL COEFT(10,2)	! to store coefficients
	REAL CTMP(4,4)		! to store corner points
C
C common blocks:
***	COMMON/COORDS/
***	COMMON/DIGC/
***	COMMON/GRID/
***	COMMON/GRPARM/
***	COMMON/MASTER/
***	COMMON/SCPARM/
***	COMMON/TXTC/
C
C workspace:
	INTEGER	  IFB
	INTEGER	  III,NNN
	INTEGER	  ITC,JTC	! a couple of counters
	INTEGER	  ITX,ITY
	INTEGER	  NCORN		! index of corner (0 if none)
	INTEGER	  NDRAWN
	LOGICAL*1 AUTCON,REDRAW	! arguments to FIDMES
	REAL	  FD(2)		! coordinates of fiducial just measured
	REAL	  PRED(2)	! coordinates of last measured fid
	REAL	  RRR,RMAX
	REAL	  X1ST,Y1ST	! coordinates of first fid on row
C
C functions:
	INTEGER	  FIDMES
	LOGICAL	  GETPT
	LOGICAL*4 FIT
C
C ......................................................................
C
	AUTGRD=.TRUE.			! let's hope we can do it
	NGRD=0				! nothing in array yet
	X1ST=XBLH			! preset first point in row
	Y1ST=YBLH
	AUTCON=.FALSE.			! start slowly always
C
C start of loop to measure each row.
C starting point is set up.
	DO 80 JTC=1,NGRIDY
	  PRED(X)=X1ST
	  PRED(Y)=Y1ST
C
C start of loop to go along each row.
	  DO 70 ITC=1,NGRIDX
	    NCORN=0
	    IF (CORTYP.NE.3) GO TO 10
C
C see if we're at a corner.
	    IF (ITC.EQ.     1 .AND. JTC.EQ.NGRIDY) NCORN=1
	    IF (ITC.EQ.     1 .AND. JTC.EQ.     1) NCORN=2
	    IF (ITC.EQ.NGRIDX .AND. JTC.EQ.     1) NCORN=3
	    IF (ITC.EQ.NGRIDX .AND. JTC.EQ.NGRIDY) NCORN=4
C
C call FIDMES to measure fid at PRED.
C value is <0 if to abort
C	   =0 if measured OK
C	   >0 if skipped
C position is in FD.
C must redraw points on TEK if REDRAW.
C AUTCON may have been flipped to SLOW/FAST.
10	    IF (FIDMES(PRED,FD,REDRAW,AUTCON)) 150,30,20
C
C reject measurement, unless it's a corner.
20	    IF (NCORN.EQ.0) GO TO 40
C
C insist on measurement.
	    CALL WRITEF('*** You must measure control points%C',7)
	    GO TO 10
C
C fid measured successfully now.
C store the point (good).
30	    NGRD=NGRD+1
	    OBS(1,NGRD)=FD(X)
	    OBS(2,NGRD)=FD(Y)
	    GRD(1,NGRD)=GRIDSQ*ITC
	    GRD(2,NGRD)=GRIDSQ*JTC
C
	    IF (NCORN.NE.0) CTMP(X,NCORN)=FD(X)
	    IF (NCORN.NE.0) CTMP(Y,NCORN)=FD(Y)
C
C update prediction records.
40	    PRED(X)=FD(X)
	    PRED(Y)=FD(Y)
	    IF (ITC.NE.1) GO TO 50
	    X1ST=FD(X)
	    Y1ST=FD(Y)
C
C draw the points we have got on the Tek.
50	    NDRAWN=NGRD			! assume only to draw last point
	    IF (REDRAW) NDRAWN=1	! draw everything so far
	    CALL TXSCLE(1.0)
	    CALL TXORGN(500,350)
	    DO 60 NNN=NDRAWN,NGRD
	      ITX=OBS(1,NNN)/120.0
	      ITY=OBS(2,NNN)/120.0
	      CALL TXMTO(ITX,ITY)
	      CALL TXMBY(0,-10)
	      CALL TXLBY(0,20)
	      CALL TXMBY(-10,-10)
	      CALL TXLBY(20,0)
60	    CONTINUE
C
C predict where next fid is.
	    PRED(X)=PRED(X) + DXX
	    PRED(Y)=PRED(Y) + DYX
C
C stop measuring if we have enough points.
	    IF (NGRD.GE.MAXGRD) GO TO 170
70	  CONTINUE
C
C row finished,move on to the next one.
	  X1ST=X1ST + DXY
	  Y1ST=Y1ST + DYY
80	CONTINUE
C
C grid finished, try to fit the results.
90	CALL CSWT(0.0,0.0)
	CALL TXCLR
	CALL WRITEF('%N points measured',NGRD)
	IF (NGRD.LT.10) GO TO 130
C
C got enough points, obtain polynomials.
	IF (FIT(NGRD,GRD,OBS,COEFT,3,1)) GO TO 140
C
C type the residual map.
	CALL GETRES(2,COEFT)
	CALL WRITEF(' ')
	CALL WRITEF('OK ? ')
	IF (.NOT.GETPT(PRED(X),PRED(Y),' OK?')) GO TO 170
C
C he's not satisfied, allow him to remeasure a point.
	CALL WRITEF('Remeasure a point or abandon')
	IF (GETPT(PRED(X),PRED(Y),' Remeasure')) GO TO 150
	IF (FIDMES(PRED,FD,REDRAW,AUTCON)) 150,100,90
C
C here with a remeasured point, try to guess which one.
100	RMAX=(MIN(DXX,DYY)/4.0)**2	! max distance for remeasure
	NNN=0
C
C search measured points.
	DO 110 III=1,NGRD
	  RRR=(FD(X)-OBS(X,III))**2 + (FD(Y)-OBS(Y,III))**2
	  IF (RRR.GT.RMAX) GO TO 110
	  NNN=III
	  RMAX=RRR
110	CONTINUE
C
C see if we found a point.
	IF (NNN.EQ.0) GO TO 120		! jump if none found
C
C found a point, reset its position.
	OBS(X,NNN)=FD(X)
	OBS(Y,NNN)=FD(Y)
	GO TO 90
C
C create a new point.
120	NGRD=NGRD + 1
	OBS(X,NGRD)=FD(X)
	OBS(Y,NGRD)=FD(Y)
	CALL TRXUSE(FD(X),FD(Y),COEFT)	! transform to grid space
	ITX=FD(X)/GRIDSQ + 0.5		! deduce grid indices
	ITY=FD(Y)/GRIDSQ + 0.5
	GRD(X,NGRD)=ITX*GRIDSQ		! form grid values
	GRD(Y,NGRD)=ITY*GRIDSQ
	GO TO 90
C
130	CALL WRITEF('*** Too few points to fit%C',7)
	GO TO 160
C
140	CALL WRITEF('*** Bad point distribution%C',7)
	GO TO 160
C
C abandoned.
150	CALL WRITEF('Abandoned')
160	CALL WRITEF(' ')
	AUTGRD=.FALSE.
170	CALL TXMTO(-500,370)
	CALL TXEND
	CALL PARIO(4,LTYPE)
	CALL READ			! to counterbalance the RDABOs
	RETURN
	END
