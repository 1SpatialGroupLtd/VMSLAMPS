	SUBROUTINE JNCTRK(JNC,ARM)
C
***	MODULE	JNCTRK
***	IDENT	30JN86
C
C Copyright Laserscan Laboratories Limited, Cambridge, England.
C
CMOD	Bug in SEGLEN check fixed (see below !)	 DM	30-Jun-1986
CMOD	Prevent /0 if arm has only one point	 DM	27-Nov-1985
CMOD	Gives in gracefully if JNC=0; tidied	 DM	11-Sep-1985
CMOD	Divergence test uses WGHT(6)		WJJ	06-Oct-1982
CMOD	Only add junction point if ARM<=0	WJJ	05-Oct-1982
CMOD	Bombs out if track width > 1.5*mean	AJW	18-Aug-1982
CMOD	Sets up SEGANG				AJW	10-Aug-1982
CMOD	IF (more points) line now has L AND R	AJW	27-Jul-1982
CMOD	Comments reflect previous change	AJW	27-Jul-1982
CMOD	Selects R or L for max no of points	AJW	15-Jul-1982
CMOD	Argument list added			AJW	02-Jun-1982
CMOD	,JNC added to arrays			AJW	11-Nov-1981
CMOD	Check on SEGLEN added			 DM	03-Feb-1981
CMOD	Tidied					AJW	21-Jan-1980
CMOD	Created					AJW	21-Feb-1980
C
C Converts junctions into track segments.
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
C parameters:
***	PARAMETER/PARAMS/
	PARAMETER L=1,R=2
C
C arguments:
	INTEGER JNC,ARM
C
C common blocks:
***	COMMON/JUNCTN/
***	COMMON/LKPARM/
***	COMMON/LKFOLL/
***	COMMON/LINKS/
***	COMMON/RSE/
***	COMMON/TRKSEG/
C
C local workspace:
	INTEGER ASIDE,BSIDE		! N.B. R => A, L => B
	INTEGER CHNB
	INTEGER III
	INTEGER FSTA,LSTA,FSTB,STEP
	INTEGER POSA,POSB		! presently considered posn
	INTEGER EAX,EAY			! ENCBUF's of above
	REAL WID			! width of line
	REAL SUMWID			! running total of widths
	REAL DUMMY
C
C function:
	LOGICAL*1 TSTATT
C
C ......................................................................
C
	IF (JNC.LE.0) GO TO 70		! anything to do ?
C
C set SUMWID very large so doesn't bomb out on wide lines.
	SUMWID=500.0			
	SEGLEN=1
C
C make junction position first point on track.
	SEGPT(X,1)=JNCPOS(X,JNC) + START(X)
	SEGPT(Y,1)=JNCPOS(Y,JNC) + START(Y)
	SEGJUN=JNCBRA(JNC)		! 'cos its a junction
	DO 10 III=1,MAXBRA
	  SEGANG(III)=BRAANG(III,JNC)
10	CONTINUE
C
C do we have an arm ?
	IF (ARM.LE.0) GO TO 70		! finish if no arm
C
C get Left or Right side so ASIDE has most nodes.
	IF (ABS(BRAFST(L,ARM,JNC)-BRALST(L,ARM,JNC)).LT.
     &      ABS(BRAFST(R,ARM,JNC)-BRALST(R,ARM,JNC))) GO TO 20
	ASIDE=L
	BSIDE=R
	GO TO 30
20	ASIDE=R
	BSIDE=L
C
30	FSTA=BRAFST(ASIDE,ARM,JNC)	! first point on ASIDE
	LSTA=BRALST(ASIDE,ARM,JNC)	!  last   "    "   "
	CHNB=BRACHN(BSIDE,ARM,JNC)	! chain with fewer nodes
	FSTB=BRAFST(BSIDE,ARM,JNC)	!   "     "    " BSIDE
C
	STEP=1
	IF (FSTA.GT.LSTA) STEP=-1
C
C for each point between first and last on ASIDE.
	DO 50 POSA = FSTA,LSTA,STEP
	  EAX=ENCBUF(X,NODE(POSA))
	  EAY=ENCBUF(Y,NODE(POSA))
C
C get nearest pt on R.H. chn, but bomb out if line is getting too wide.
	  IF (TSTATT(EAX,EAY,CHNB,WGHT(6)*SUMWID/SEGLEN,0,0,POSB,
     &		     DUMMY,WID)) GO TO 40
	  IF (SEGLEN.GT.1) GO TO 60
	  SEGWID=0.0			! prevent divide-by-zero
	  GO TO 70
40	  IF (SEGLEN.EQ.1) SUMWID=SQRT(WID)
	  SUMWID=SUMWID + SQRT(WID)	! running total of widths
	  POSB=POSB + FIRST(CHNB) - 1	! feature of TSTATT
C
C make mid point part of track
	  SEGLEN=SEGLEN + 1
	  SEGPT(X,SEGLEN)=(EAX+ENCBUF(X,NODE(POSB)))/2 + START(X)
	  SEGPT(Y,SEGLEN)=(EAY+ENCBUF(Y,NODE(POSB)))/2 + START(Y)
	  IF (SEGLEN.EQ.MAXSEG) GO TO 60
50	CONTINUE
C
60	SEGWID=SUMWID/(SEGLEN-1)	! average width
70	RETURN
	END
