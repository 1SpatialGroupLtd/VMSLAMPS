C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-05-30 13:25:06.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE JMAIN(CONGOT)
C
***	MODULE	JMAIN
***	IDENT	30MY86
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	BRIEF introduced			 DM	30-May-1986
CMOD	JASSES now has two more arguments	 DM	25-Apr-1986
CMOD	JSIFTC added to remove spurious chains	 DM	23-Oct-1985
CMOD	Failure message 'softened' !		 DM	10-Sep-1984
CMOD	TRAKWD set up				 DM	01-Nov-1982
CMOD	Failure message	shortened		 DM	07-Oct-1982
CMOD	Calcs angles before JASSES		AJW	05-Oct-1982
CMOD	Doesn't call FLUSH			AJW	07-Sep-1982
CMOD	Add IF (TMPCHK) before ABORTED message	WJJ	23-Sep-1982
CMOD	Calls FLUSH				AJW	07-Sep-1982
CMOD	Sets up BRAANG				AJW	09-Aug-1982
CMOD	"Two chains" message only if TMPCHK	AJW	27-Jul-1982
CMOD	/LKFOLL/ added, and FB15 clears FAST	AJW	20-Jul-1982
CMOD	JCHECK given an argument		 DM	15-Jul-1982
CMOD	JCHECK added				 DM	13-Jul-1982
CMOD	Can ALWAYS be aborted using FB15	 DM	09-Jul-1982
CMOD	Doesn't give up on 2 chns if one closed,
CMOD	JSORTP removed				 DM	08-Jul-1982
CMOD	JCHGAP, JMATCH removed			 DM	07-Jul-1982
CMOD	Re-organised, can be aborted using FB15	 DM	29-Jun-1982
CMOD	JREMCH now an integer function,
CMOD	JCHGAP .TRUE. if found gap		 DM	28-Jun-1982
CMOD	JMATCH now a logical function		 DM	24-Jun-1982
CMOD	Bombs out if all junctions duff		AJW	23-Jun-1982
CMOD	Clears CONGOT on entry			AJW	15-Jun-1982
CMOD	Wait time between cycles shortened	 DM	11-Jun-1982
CMOD	CONGOT is arg, and passed on to JASSES	AJW	02-Jun-1982
CMOD	JCENTR added				AJW	02-Jun-1981
CMOD	TXCLR and JDRAWC transferred from JINIT	AJW	22-Oct-1981
CMOD	Tidied					AJW	15-Sep-1981
CMOD	Author					RFT	   Aug-1981
C
C Calling routine for junction recognition.
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
C parameters:
***	PARAMETER/PARAMS/
	PARAMETER L=1,R=2
C
C argument:
	INTEGER CONGOT
C
C common blocks:
***	COMMON/JUNCOM/
***	COMMON/JUNCTN/
***	COMMON/LINKS/
***	COMMON/LKFOLL/
***	COMMON/LKPARM/
***	COMMON/RSE/
C
C local workspace:
	INTEGER NCH		! number of chains found
	INTEGER	NUMTRY		! number of tries
	INTEGER III,JJJ
	REAL    TEMP		! temp variable
C
C functions:
	INTEGER JREMCH
	LOGICAL JCHECK
	LOGICAL JSORTC
C
C .....................................................................
C
	CONGOT=0
	NUMTRY=0
	TRAKWD=TRKWID
	IF (TRAKWD.LE.0.0) TRAKWD=CRUDIS	! best we can do
C
C ... first remove any chains which are obviously spurious.
	CALL JSIFTC
C
C ... now try to recognise the junction(s).
C ... allow up to 7 iterations.
10	NUMTRY=NUMTRY + 1
	IF (NUMTRY.GT.7) GO TO 130
C
C ... find out how many chains we've got.
	NCH=0
	JJJ=0
	DO 20 III=1,MAXCHN
	  IF (CHAIN(III).LE.0) GO TO 20
	  NCH=NCH + 1
	  IF (CLOCHN(III)) JJJ=JJJ + 1
20	CONTINUE
	IF (NCH.GT.2) GO TO 30
	IF (NCH.LT.2) GO TO 140	  ! fail if less than 2
	IF (JJJ.NE.1) GO TO 140	  ! or just 2 & neither or both closed
C
C ... wait to clear Tektronix screen and draw chains (maybe).
30	IF (.NOT.TMPCHK) GO TO 40
	IF (NUMTRY.NE.1) CALL WAIT(2,2)	! wait for 2 seconds
	CALL TXCLR
	CALL JDRAWC
C
C ... initialize common block.
40	CALL JINIT
C
C ... find transition points.
	CALL JFINTP
C
C ... start again if spurious chain found or chain broken on purpose.
C ... let the user abort the whole mess if he wants.
	JJJ=JREMCH()
	CALL FBRD(III)		 ! function button pressed ?
	IF (III.EQ.15) GO TO 150 ! if so, was it button 15 ?
C
	IF (JJJ) 60,10,50	 ! no - find out what JREMCH did
50	CALL JCHLEN		 ! broke chain - get new chn lengths ..
	CALL CHNLST		 ! re-do NODE etc ...
	GO TO 10		 ! and go back to start
C
C ... check that the 'final' transition points form a consistent set.
60	IF (JCHECK(NCH)) GO TO 10 ! else 'bend' chain(s) and try again
C
C ... sort out junctions.
	IF (JSORTC()) GO TO 130
C
C ... get the centres of the junctions.
	CALL JCENTR
C
C ... check that not all junctions are duff.
	DO 70 III=1,JNCNUM
	   IF (JNCBRA(III).GE.3) GO TO 80
70	CONTINUE
	GO TO 130
80	CONTINUE
C
C ... get the angles for each branch.
	DO 110 III=1,MAXJUN
	  DO 90 JJJ=1,MAXBRA
	    BRAANG(JJJ,III)=-1
90	  CONTINUE
	  DO 100 JJJ=1,JNCBRA(III)
	    TEMP=ATAN2((ENCBUF(Y,NODE(BRAFST(L,JJJ,III)))+
     &                  ENCBUF(Y,NODE(BRAFST(R,JJJ,III))))/2.0-
     &                  JNCPOS(Y,III),
     &                 (ENCBUF(X,NODE(BRAFST(L,JJJ,III)))+
     &                  ENCBUF(X,NODE(BRAFST(R,JJJ,III))))/2.0-
     &                  JNCPOS(X,III))*180.0/3.141592
	    IF (TEMP.LT.1.0) TEMP=360.0+TEMP
	    BRAANG(JJJ,III)=INT(TEMP)
100	  CONTINUE
110	CONTINUE
C
C ... assess them.
	CALL JASSES(CONGOT,.FALSE.,.FALSE.)
C
120	RETURN
C
130	IF (.NOT.BRIEF) CALL WRITEF('Failed to analyse junction')
	GO TO 120
C
140	IF (TMPCHK) CALL WRITEF
     &     ('JMAIN: %N chain%m found so no junctions',NCH)
	GO TO 120
C
150	IF (TMPCHK) CALL WRITEF
     &     ('JMAIN: Junction recognition aborted by user')
	FAST=.FALSE.
	GO TO 120
C
	END
