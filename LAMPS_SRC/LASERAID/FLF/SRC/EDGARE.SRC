C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-06-09 14:11:24.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE EDGARE(JD,ENCS)
C
***	MODULE	EDGARE
***	IDENT	09JN86
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	Optimised; tidied			 DM	09-Jun-1986
CMOD	Adapted from EDGDMP			JHR	12-Feb-1982
CMOD	Tidied					AJW	28-May-1981
C	Created					MCF
C
C Draws on the Tektronix the results of a raster scan of JD(1),JD(2)
C using the MCE area-scanner.
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
C parameters:
***	PARAMETER/PARAMS/
C
C arguments:
	INTEGER JD(2)		! scan vector
	INTEGER ENCS		! number of encounters
C
C common blocks:
***	COMMON/RSE/
***	COMMON/SCCORR/
***	COMMON/SCPARM/
C
C workspace:
	INTEGER   I
	INTEGER   IU,IV,IW
	INTEGER   IXY(2)
	INTEGER   JE(2)
	INTEGER   JWID
	INTEGER   LINES		! enc. at which this scan-line starts...
	INTEGER	  LINEN		! ...and ends
	INTEGER   MID(2)
	LOGICAL*1 LSTMTO
	REAL      F
C
C ......................................................................
C
	IU=2
	IV=1
	JWID=IWID*WAR*CR(IV)
	LINES=1
	JD(1)=JD(1)*2
	JD(2)=JD(2)*2
	LINEN=1
	IF (ENCS.LE.0) GO TO 100
C
C add encounters to buffer until no more data, or next scan line.
30	IF (ENCS.EQ.LINEN) GO TO 50
40	  IF ((ENCBUF(W,LINEN+1).AND.NEGMUL).EQ.0) GO TO 50
	  LINEN=LINEN + 1		! update end of scan-line
	GO TO 30
C
C here when we've got a scan line's worth of data.
C work out direction of scan, if necessary.
50	IXY(IU)=JWID
	IXY(IV)=JWID
	F=ENCBUF(IU,LINES)/FLOAT(JD(IU))
	MID(IU)=ENCBUF(IU,LINES) - JD(IU)/2
	MID(IV)=JD(IV)*F	 - JD(IV)/2
C
C having got the dimensions of the scan line we will now draw it.
	IW=0
	CALL TXMTO(MID(1)-IXY(1),MID(2)-IXY(2))
	DO 90 I=LINES,LINEN
	  IW=ENCBUF(W,I).AND.NEGWID
	  JE(X)=ENCBUF(X,I) - JD(X)/2
	  JE(Y)=ENCBUF(Y,I) - JD(Y)/2
	  IF (IW.EQ.NEGNEG) GO TO 70
	  IF (IW.EQ.NEGPOS) GO TO 80
C
C line encounter.
	  JE(IV)=JE(IV) - IW/2
	  CALL TXMTO(JE(X),JE(Y))
	  JE(IV)=JE(IV) + IW
C
70	  CALL TXLTO(JE(X),JE(Y))
	  LSTMTO=.FALSE.
	  GO TO 90
C
80	  CALL TXMTO(JE(X),JE(Y))
	  LSTMTO=.TRUE.
C
90	CONTINUE
C
	IF (LSTMTO) CALL TXLTO(MID(1)+IXY(1),MID(2)+IXY(2))
C
C scan line drawn -  update start and end-pts for next scan-line.
	LINEN=LINEN + 1
	LINES=LINEN
C
C is there indeed another scan-line?
	IF (ENCS.GT.LINEN) GO TO 40	! yes
C
100	RETURN
	END
