C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-11-11 18:42:58.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION BUNCH(XB,YB,FORCED)
C
***	MODULE	BUNCH
***	IDENT	11NO86
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
C Author: D. Meader (after original version by M. Fulford)
C
CMOD	Fix 'rolling back' bug			 DM	11-Nov-1986
CMOD	Re-enable S if VEXing (and S > 0)	 DM	20-Oct-1983
CMOD	Rehashed (again !!)			 DM	18-Oct-1982
C	Created 				 DM	23-Sep-1982
C
C By default, (if FORCED is 0), we examine a point (XB,YB) (in absolute
C coordinates) to see if we need to create a new master point. If we
C don't, the point is added to the backlog buffer and used to calculate
C a new straight line approximation to the line segment being followed.
C If FORCED is 2, we tidy up the backlogged points (probably producing a
C new master point), ignoring (XB,YB). If FORCED is 1, we also tidy up
C but this time we take account of (XB,YB) first.
C If FORCED is -1, we try to determine whether we've already followed
C past (XB,YB) and, if so, we 'roll' back leaving (XB,YB) in the backlog
C buffer. If FORCED is -2, the buffer is then flushed.
C Value returned is .TRUE. if we create a new master point.
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
***	PARAMETER/PARAMS/
C
***	COMMON/BLG/
***	COMMON/LKPARM/
***	COMMON/MPAUX/
***	COMMON/MPEP/
C
	INTEGER	  FORCED	! flag for special functions (-2:2)
	INTEGER	  I		! general variable
	INTEGER	  LASTMP	! NMP(1) - 1
	INTEGER	  MPINIT	! number of master points when we start
	INTEGER	  NPTS		! number of points used in line fitting
	LOGICAL*1 TIDYNG	! just tidying up ?
	REAL	  DELTA		! offset for line intersection
	REAL	  DOTPRD	! 'normalised' dot product of 2 vectors
	REAL	  DX,DY,DS	! relative coordinates
	REAL	  DXTEMP,DYTEMP	! temporary relative coordinates
	REAL	  DZERO		! dist. from (0.0,0.0) to (XZERO,YZERO) 
	REAL	  HI		! residual error normal to line
	REAL	  HMAX		! maximum HI
	REAL	  RI		! distance along line
	REAL	  RMAX		! maximum RI
	REAL	  SINTMP,COSTMP	! temporary sin,cos
	REAL	  ST1MT2	! SIN(THETA1 - THETA2)
	REAL	  THETA		! 'slope' of current 'best' line
	REAL	  XB,YB		! absolute coordinates of point
	REAL	  XZERO,YZERO	! latest (temporary) origin for vector
C
C ......................................................................
C
C ... do we have any master points yet ?
	MPINIT=NMP(1)
	IF (MPINIT.GT.0) GO TO 10
C
C ... no - set up the first one (unless FORCED is -1).
	IF (FORCED.EQ.-1) GO TO 290
	NMP(1)=1
	MP1(X,1)=XB
	MP1(Y,1)=YB
	FITPMP(X)=0.0
	FITPMP(Y)=0.0
	FITLEN=0.0
	INDEX(1)=0
	MPTYPE(NMP(1))=0	! assume the first point can be moved
	TIDYNG=.FALSE.
	GO TO 290
C
C ......................................................................
C
C ... we've already got some master points (usual case).
C ... consider (XB,YB) to see if it is approximately on the straight
C ... line defined by the points in the backlog buffer.
10	IF (FORCED.GE.0) GO TO 110		! deal with FORCED
C
C ... try to decide if we've already followed past (XB,XB).
C ... at present, we assume that the master points haven't looped back
C ... (if they have, (XB,YB) may just get appended).
	IF (INDEX(1).LE.0) GO TO 50
	IF (MPTYPE(NMP(1)).NE.0) GO TO 30
	TIDYNG=.TRUE.				! tidy everything up ...
	GO TO 230
20	TIDYNG=.FALSE.				! done !!
30	IF (NMP(1).LT.MAXMP) GO TO 40		! MP buffer full ?
	CALL WRITEF('%CMaster point buffer overflow%C',7,7)
	MP1(X,NMP(1))=MP1(X,NMP(1)) + FITPMP(X)	! yes - try to recover
	MP1(Y,NMP(1))=MP1(Y,NMP(1)) + FITPMP(Y)	! (move last master pnt)
	INDEX(1)=0
	GO TO 60
40	NMP(1)=NMP(1) + 1			! mimic a FLUSH
	MP1(X,NMP(1))=MP1(X,NMP(1)-1) + FITPMP(X)
	MP1(Y,NMP(1))=MP1(Y,NMP(1)-1) + FITPMP(Y)
50	IF (NMP(1).LT.2) GO TO 110
C
C ... project (XB,YB) onto the line passing through NMP-1 and NMP.
60	LASTMP=NMP(1) - 1
	DX=MP1(X,NMP(1)) - MP1(X,LASTMP)
	DY=MP1(Y,NMP(1)) - MP1(Y,LASTMP)
	DS=DX*DX + DY*DY
	IF (DS.LT.1.0) GO TO 80
	DXTEMP=XB - MP1(X,LASTMP)
	DYTEMP=YB - MP1(Y,LASTMP)
	DOTPRD=(DX*DXTEMP + DY*DYTEMP)/DS	! (XB,YB) is ...
	IF (DOTPRD.LE.1.0) GO TO 70		! 1) after NMP
	IF (INDEX(1).GT.0) NMP(1)=NMP(1) - 1	!   (reset MP buffer to
	IF (NMP(1).EQ.MPINIT) GO TO 110		!    its original state
	NMP(1)=NMP(1) + 1			!    if nothing done)
	GO TO 90
70	IF (DOTPRD.GE.0.0) GO TO 90		! 2) between NMP-1 & NMP
80	NMP(1)=NMP(1) - 1			! 3) before NMP-1
	IF (NMP(1).GE.2) GO TO 60		! go back through buffer
C
	INDEX(1)=0				! at start of buffer (!)
	GO TO 110
C
C ... projected (XB,YB) lies between NMP-1 and NMP.
90	IF (LASTMP.EQ.1) LASTMP=2
	DXTEMP=MP1(X,LASTMP) - MP1(X,LASTMP-1)
	DYTEMP=MP1(Y,LASTMP) - MP1(Y,LASTMP-1)
	DS=SQRT(DXTEMP*DXTEMP + DYTEMP*DYTEMP)
	COSSAV=DXTEMP/DS			! get 'previous' vector
	SINSAV=DYTEMP/DS
	NMP(1)=NMP(1) - 1			! sanitise MP buffer
	DX=DOTPRD*DX				! get new current vector
	DY=DOTPRD*DY
	DS=DX*DX + DY*DY
	IF (DS.GE.1.0) GO TO 100		! zero length ?
	INDEX(1)=0				! yes - forget it
	COSTH=COSSAV
	SINTH=SINSAV
	GO TO 110
C
C ... crush backlog data (if any) down to a single point.
100	INDEX(1)=1
	XBLG(1,1)=DX
	YBLG(1,1)=DY
	FITPMP(X)=DX
	FITPMP(Y)=DY
	FITLEN=SQRT(DS)
	COSTH=DX/FITLEN
	SINTH=DY/FITLEN
	XORIG=MP1(X,NMP(1))
	YORIG=MP1(Y,NMP(1))
	SX=DX			! (re)initialise all the sums
	SY=DY
	SXX=DX*DX
	SXY=DX*DY
	SYY=DY*DY
C
C ......................................................................
C
C ... everything comes through here eventually.
C ... check that the backlog buffer isn't full, deal with FORCED, etc.
110	IF (INDEX(1).LT.MAXBLG.AND.FORCED.LE.1) GO TO 140
	IF (INDEX(1).LE.0) GO TO 290		! deal with FORCED=2
120	IF (MPTYPE(NMP(1)).EQ.0) GO TO 230	! tidy up as required
C
130	IF (TIDYNG) GO TO 20	! have we still got things to do ?
	CALL FLUSH(VEXING)	! no - create a master point (maybe)
	IF (VEXING) CALL FILTER	! check NMP-1 is not spurious
	IF (FORCED.GE.2) GO TO 290		! deal with FORCED=2
C
C ... get coordinates of new (XB,YB) relative to last master point.
140	DX=XB - MP1(X,NMP(1))
	DY=YB - MP1(Y,NMP(1))
	DS=DX*DX + DY*DY
C
C ... is (XB,YB) superfluous (i.e. a repeated point) ?
	IF (DS.LT.1.0) GO TO 290
	IF (INDEX(1).LT.1) GO TO 150
	IF (ABS(DX-XBLG(1,INDEX(1))).GE.1.0.OR.
     &      ABS(DY-YBLG(1,INDEX(1))).GE.1.0) GO TO 150
	IF (FORCED.NE.1.AND.FORCED.NE.-2) GO TO 290
	IF (INDEX(1).EQ.1) GO TO 280		! FORCED=1 or -2
	GO TO 190				! tidy up
C
C ... no - add the point to the backlog buffer.
150	INDEX(1)=INDEX(1) + 1
	XBLG(1,INDEX(1))=DX
	YBLG(1,INDEX(1))=DY
	IF (INDEX(1).GT.1) GO TO 180
C
C ......................................................................
C
C ... this is the first point in the backlog buffer.
	FITPMP(X)=DX		! store it as a potential master point
	FITPMP(Y)=DY
	FITLEN=SQRT(DS)
	COSTH=DX/FITLEN		! approximate the new vector direction
	SINTH=DY/FITLEN
C
C ... save the direction of the previous vector. (N.B. we may have
C ... rolled back, so we can't assume that we know where we are).
	IF (NMP(1).GT.1) GO TO 160
	COSSAV=COSTH
	SINSAV=SINTH
	XORIG=MP1(X,1)
	YORIG=MP1(Y,1)
	GO TO 170
160	DXTEMP=MP1(X,NMP(1)) - MP1(X,NMP(1)-1)
	DYTEMP=MP1(Y,NMP(1)) - MP1(Y,NMP(1)-1)
	DS=SQRT(DXTEMP*DXTEMP + DYTEMP*DYTEMP)
	COSSAV=DXTEMP/DS
	SINSAV=DYTEMP/DS
	XORIG=MP1(X,NMP(1))
	YORIG=MP1(Y,NMP(1))
C
170	SX=DX			! (re)initialise all the sums
	SY=DY
	SXX=DX*DX
	SXY=DX*DY
	SYY=DY*DY
	IF (FORCED.EQ.1.OR.FORCED.EQ.-2) GO TO 280
	GO TO 290
C
C ......................................................................
C
C ... prevent long line segments.
180	IF (S(1).GT.0.AND.DS.GT.S(1)*S(1)) GO TO 120
C
C ... see if this point can be added to the current segment.
C ... fit a line to the backlogged points using a rotationally stable
C ... least-squares technique.
	SX=SX + DX		! compute sums of various terms
	SY=SY + DY
	SXX=SXX + DX*DX
	SXY=SXY + DX*DY
	SYY=SYY + DY*DY
C
C ... calculate the angle between the 'best' line and the x-axis.
C ... this could be 180 degrees out, but it doesn't matter.
C ... then, for each backlogged point, compute the residual error and
C ... the distance along the fitted line, remembering the largest
C ... occurrence of each. (For a derivation of the formulae, see DM).
190	HMAX=0.0
	RMAX=0.0
	IF (MPTYPE(NMP(1)).EQ.0) GO TO 210	! what type is NMP ?
C
C ......................................................................
C
C ... master point NMP is a junction or manual point - preserve it.
	THETA=0.5*ATAN2(2.0*SXY,SXX-SYY)
	COSTH=COS(THETA)	! components of 'best' vector
	SINTH=SIN(THETA)
	DO 200 I=1,INDEX(1)	! find residual error normal to line
	   HI=XBLG(1,I)*SINTH - YBLG(1,I)*COSTH
	   RI=XBLG(1,I)*COSTH + YBLG(1,I)*SINTH
	   IF (ABS(HI).GT.HMAX) HMAX=ABS(HI)
	   IF (ABS(RI).GT.ABS(RMAX)) RMAX=RI
200	CONTINUE
	IF (HMAX.GT.H(1)) GO TO 130	! too large - flush buffer
	FITLEN=ABS(RMAX)
	FITPMP(X)=RMAX*COSTH	! -ve RMAX ==> THETA is 180 degrees out
	FITPMP(Y)=RMAX*SINTH
	IF (FORCED.EQ.1.OR.FORCED.EQ.-2) GO TO 280   ! deal with FORCED
	GO TO 290
C
C ......................................................................
C
C ... usually, 'master point' NMP is only used as a temporary origin.
C ... when we need to create the NEXT 'master point' (i.e. NMP+1),
C ... the current and previous 'best' lines are intersected, defining
C ... the *true* position of NMP.
210	NPTS=INDEX(1) + 1	! give some weight to master point NMP
	THETA=0.5*ATAN2(2.0*(NPTS*SXY - SX*SY),
     &			NPTS*(SXX-SYY) - (SX*SX-SY*SY))
	COSTMP=COS(THETA)	! components of 'best' vector
	SINTMP=SIN(THETA)
	DZERO=(SINTMP*SX - COSTMP*SY)/NPTS
	XZERO=DZERO*SINTMP	! origin of 'best' vector
	YZERO=-DZERO*COSTMP
	DO 220 I=1,INDEX(1)	! find residual error normal to line
	   DXTEMP=XBLG(1,I) - XZERO
	   DYTEMP=YBLG(1,I) - YZERO
	   HI=DXTEMP*SINTMP - DYTEMP*COSTMP
	   RI=DXTEMP*COSTMP + DYTEMP*SINTMP
	   IF (ABS(HI).GT.HMAX) HMAX=ABS(HI)
	   IF (ABS(RI).GT.ABS(RMAX)) RMAX=RI
220	CONTINUE
	IF (HMAX.LE.H(1)) GO TO 270
C
C ... residual too large - calculate *true* position of NMP.
C ... (we also come here to tidy up if the backlog buffer is full or
C ... if FORCED is negative).
230	IF (NMP(1).EQ.1) GO TO 240	! deal with the first point
	ST1MT2=SINSAV*COSTH - COSSAV*SINTH
	IF (ABS(ST1MT2).GE.0.1) GO TO 250
C
C ... the lines are parallel - project NMP onto the current best line.
240	DELTA=(MP1(X,NMP(1))-XORIG)*COSTH + (MP1(Y,NMP(1))-YORIG)*SINTH
	MP1(X,NMP(1))=XORIG + DELTA*COSTH
	MP1(Y,NMP(1))=YORIG + DELTA*SINTH
	GO TO 260		! calculate new offsets for FLUSH
C
C ... usual case - intersect the lines.
250	DELTA=((MP1(X,NMP(1)-1)-XORIG)*SINTH -
     &	       (MP1(Y,NMP(1)-1)-YORIG)*COSTH)/ST1MT2
	MP1(X,NMP(1))=MP1(X,NMP(1)-1) + DELTA*COSSAV
	MP1(Y,NMP(1))=MP1(Y,NMP(1)-1) + DELTA*SINSAV
C
260	FITPMP(X)=FITPMP(X) + XORIG - MP1(X,NMP(1))
	FITPMP(Y)=FITPMP(Y) + YORIG - MP1(Y,NMP(1))
	FITLEN=SQRT(FITPMP(X)*FITPMP(X) + FITPMP(Y)*FITPMP(Y))
	GO TO 130		! flush buffer
C
C ... save current best line - if the next (XB,YB) produces too large a
C ... residual error, these are the values which will be used.
270	SINTH=SINTMP
	COSTH=COSTMP
	XORIG=MP1(X,NMP(1)) + XZERO
	YORIG=MP1(Y,NMP(1)) + YZERO
	FITLEN=ABS(RMAX)
	FITPMP(X)=RMAX*COSTH	! -ve RMAX ==> THETA is 180 degrees out
	FITPMP(Y)=RMAX*SINTH
	IF (FORCED.NE.1.AND.FORCED.NE.-2) GO TO 290   ! deal with FORCED
C
	FITPMP(X)=FITPMP(X) + XZERO
	FITPMP(Y)=FITPMP(Y) + YZERO
	FITLEN=SQRT(FITPMP(X)*FITPMP(X) + FITPMP(Y)*FITPMP(Y))
C
C ......................................................................
C
280	CALL FLUSH(VEXING)		! deal with FORCED=1 or -2
	IF (VEXING) CALL FILTER
C
290	BUNCH=NMP(1).GT.MPINIT
	RETURN
	END
