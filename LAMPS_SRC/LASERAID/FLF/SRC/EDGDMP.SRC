C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-06-09 14:57:42.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE EDGDMP(JD)
C
***	MODULE	EDGDMP
***	IDENT	09JN86
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	Optimised; tidied			 DM	09-Jun-1986
CMOD	Tidied					AJW	28-May-1981
C	Created					MCF
C
C Draws on the Tektronix the results of an edge or line mode scan.
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
C parameters:
***	PARAMETER/PARAMS/
C
C arguments:
	INTEGER JD(2)			! scan vector
C
C common blocks:
***	COMMON/RSE/
***	COMMON/SCCORR/
***	COMMON/SCPARM/
C
C workspace:
	INTEGER   I
	INTEGER   IT
	INTEGER   IU,IV,IW
	INTEGER   IXY(2)
	INTEGER   JE(2)
	INTEGER   JWID
	INTEGER   MID(2)
	INTEGER   NWAY
	LOGICAL*1 LSTMTO
	REAL      F
C
C function:
	INTEGER NEGET
C
C ......................................................................
C
	IU=2 - IDIR
	IV=1 + IDIR
	JWID=(IWID/2)*WAR*CR(IV)
	INE=NEGET(ENCBUF(W,1),-1)	! fill in 1st slot of array
	IF (INE.LE.0) GO TO 100
	GO TO 30
C
C move 1st encounter to start of buffer
10	DO 20 I=W,Y
	  ENCBUF(I,1)=ENCBUF(I,IT+1)
20	CONTINUE
30	IT=1
C
C add encounters to buffer ...
40	INE=NEGET(ENCBUF(W,IT+1),1)
	  IF (INE.LE.0) GO TO 50	! until no more data or ...
	  IF ((ENCBUF(W,IT+1).AND.NEGMUL).EQ.0) GO TO 50 ! next scanline
	  IT=IT + 1
	GO TO 40
C
C here when we've got a scan line's worth of data.
C work out direction of scan, if necessary.
50	NWAY=1
	IF (IT.EQ.1) GO TO 60
	IF (ENCBUF(IV,2).LT.ENCBUF(IV,1)) NWAY=-1
60	IXY(IU)=0
	IXY(IV)=JWID*NWAY
	F=ENCBUF(IU,1)/FLOAT(JD(IU))
	MID(IU)=ENCBUF(IU,1) - JD(IU)/2
	MID(IV)=JD(IV)*F     - JD(IV)/2
C
C having got the dimensions of the scan line we will now draw it.
	IF (NWAY.LT.0) NWAY=2
	IW=0
	CALL TXMTO(MID(1)-IXY(1),MID(2)-IXY(2))
	DO 90 I=1,IT
	  IW=ENCBUF(W,I).AND.NEGWID
	  JE(X)=ENCBUF(X,I) - JD(1)/2
	  JE(Y)=ENCBUF(Y,I) - JD(2)/2
	  IF (IW.EQ.NEGNEG) GO TO (70,80),NWAY
	  IF (IW.EQ.NEGPOS) GO TO (80,70),NWAY
C
C line encounter.
	  JE(IV)=JE(IV) - IW/2
	  CALL TXMTO(JE(X),JE(Y))
	  JE(IV)=JE(IV) + IW
C
70	  CALL TXLTO(JE(X),JE(Y))
	  LSTMTO=.FALSE.
	  GO TO 90
C
80	  CALL TXMTO(JE(X),JE(Y))
	  LSTMTO=.TRUE.
C
90	CONTINUE
C
	IF (LSTMTO) CALL TXLTO(MID(1)+IXY(1),MID(2)+IXY(2))
C
C scan line drawn - is there another one ?
	IF (INE.GT.0) GO TO 10
C
100	RETURN
	END
