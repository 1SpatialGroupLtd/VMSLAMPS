C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-05-30 16:03:58.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE MANDIG(NWID,NPIT)
C
***	MODULE	MANDIG
***	IDENT	30MY86
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	Only call CSRD if HADLDI		 DM	30-May-1986
CMOD	Colour added				 DM	09-Sep-1985
CMOD	Uses MAX(CRX,CRY) for scaling		 DM	27-Jun-1985
CMOD	Test against 'e' as well as 'E'		AJW	21-Feb-1984
CMOD	SEC and SECTYP set up if new feature	 DM	24-Mar-1983
CMOD	BUNCH called with 3rd argument 1, not 0	 DM	30-Nov-1982
CMOD	New BUNCH				 DM	26-Oct-1982
CMOD	BUNCH given 3rd argument		 DM	04-Oct-1982
CMOD	'x' changed to octal value		AJW	24-Sep-1981
CMOD	Tidied					AJW	29-May-1981
CMOD	Created					MCF	 7-Sep-1977
C
C Digitise a series of points using the famous close-up screen (provided
C at great expense for precisely this purpose.)
C Points are fed into BUNCH after the fashion of manual points in LINK.
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
C parameters:
***	PARAMETER/PARAMS/
C
C arguments:
	INTEGER NWID		! width used for FAX
	INTEGER NPIT		! pitch  "    "   "
C
C common blocks:
***	COMMON/LKFOLL/
***	COMMON/LKPARM/
***	COMMON/MASTER/
***	COMMON/MPEP/
***	COMMON/SCCORR/
C
C local workspace:
	INTEGER   LSTP(2)	! last point on line
	INTEGER   NXTP(2)	! next   "   "    "
	INTEGER   IP(2)		! a point on the screen
	INTEGER   PRV(2)	! last point drawn to
	INTEGER   U,V		! axes
	INTEGER   I,M
	INTEGER   ICX,ICY
	INTEGER   ICH,IFB
	INTEGER   NLST
C
	REAL      CUR(2)	! cursor position
	REAL      MAXC		! coord limit (user units)
	REAL      SCTX
C
	LOGICAL*1 GOTPRV	! => PRV is meaningful
C
C function:
	LOGICAL	  BUNCH
C
C ......................................................................
C
	GOTPRV=.FALSE.
	IF (HADLDI) CALL CSRD(CUR(X),CUR(Y))
	SCTX=680.0/(NWID*WAR*MAX(CRX,CRY))
	CALL TXSCLE(SCTX)
	CALL TXORGN(500,350)
	CALL TXCOL(5)
C
C get 2 points on the line
	CALL GTLST2(CUR,10000.0,STFFNS,NLST,LSTP,NXTP,I)
	IF (NLST.LT.4) GO TO 30
C
C draw current piece of line (clipped)
	IP(X)=NXTP(X)
	IP(Y)=NXTP(Y)
	MAXC=320.0/SCTX
	DO 20 I=1,2
	   U=1
	   IF (IABS(IP(Y)).GT.IABS(IP(X))) U=2
	   V=3 - U
	   M=0
	   IF (IP(U).GT. MAXC) M=MAXC
	   IF (IP(U).LT.-MAXC) M=-MAXC
	   IF (M.EQ.0) GO TO 10
	   IP(V)=M*FLOAT(IP(V))/IP(U)			! clip
	   IP(U)=M
C
10	   IF (I.EQ.1) CALL TXMTO(IP(X),IP(Y))
	   IF (I.EQ.2) CALL TXLTO(IP(X),IP(Y))
	   PRV(X)=IP(X)
	   PRV(Y)=IP(Y)
	   GOTPRV=.TRUE.
	   IP(X)=LSTP(X)
	   IP(Y)=LSTP(Y)
	   MAXC=MAXC*1.1
20	CONTINUE
C
C get the new bits
C
30	CALL TXCUR
	CALL TXLOC(ICH,ICX,ICY)
	CALL FBRD(IFB)
	IF (ICH.EQ.101) GO TO 60		! 'e' => end
	IF (ICH.EQ. 69) GO TO 60		! 'E' => end
	IF (ICH.EQ. 32) GO TO 40		! 'SP'=> add a point
	IF (IFB.EQ. 16) GO TO 60		! FB16=> end (as well)
	GO TO 30				! all else ignored
C
C the new point
40	IF (BUNCH(CUR(X)+ICX,CUR(Y)+ICY,1)) MPTYPE(NMP(1))=-1
	CALL CSWT(CUR(X)+ICX,CUR(Y)+ICY)	! keep HRD in step
	CALL REFRSH
	IF (GOTPRV) GO TO 50
	PRV(X)=ICX
	PRV(Y)=ICY
	GOTPRV=.TRUE.
C
50	CALL TXMTO(PRV(X),PRV(Y))
	CALL TXLTO(ICX,ICY)
	PRV(X)=ICX
	PRV(Y)=ICY
	IF (NMP(1).GT.1) GO TO 30
	SEC(X)=MP1(X,1)
	SEC(Y)=MP1(Y,1)
	SECTYP=MPTYPE(1)
	GO TO 30
C
C the end
60	CALL TXCOL(1)
	CALL TXEND
	RETURN
	END
