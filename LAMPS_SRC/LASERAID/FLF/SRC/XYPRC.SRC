	SUBROUTINE XYPRC(EMPTY)
C
***	MODULE	XYPRC
***	IDENT	01NO85
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	Rehashed to avoid line-broadening	 DM	01-Nov-1985
CMOD	Copes with all-black scans; optimised	 DM	24-Oct-1985
CMOD	Invert polarity option added; tidied	 DM	04-Oct-1985
CMOD	Uses INT not NINT in call to XYSET,
CMOD	PAUSEs removed				 DM	07-Jun-1983
CMOD	VIOCLR used to clear PIXMAP		AJW	25-Aug-1982
CMOD	Rehashed for XYPRC			PGH	05-Jul-1982
CMOD	Author					JHR	04-Feb-1982
C	(from module FRSPRC, as used in LAR)
C
C XY-scan PRoCessor - receives encounters detected by scanning in X then
C Y (via XYSCA), and converts them into a byte map of the X & Y pixels.
C
C The byte-map is centred at the bi-section of the X and Y scan vectors.
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
***	PARAMETER/PARAMS/
	PARAMETER TOP13='177770'O	! the top 13 bits
C
	LOGICAL*1 EMPTY		! no encounters found in scan-block ?
C
***	COMMON/LKPARM/
***	COMMON/RSE/
***	COMMON/SCPARM/
***	COMMON/XYPIXC/
C
	INTEGER   COORD		! temp used in sorting the scan-line
	INTEGER   ENCTSB	! number of encs processed in scan-block
	INTEGER   ENCTSL	! number of encs processed in scan-line
	INTEGER	  I,J		! DO loop variables
	INTEGER*2 INVERT(0:7)	! for reverse polarity linework
	INTEGER   SCANAT	! scan-line we're at
	INTEGER   START		! enc at which to start conversion
	LOGICAL*1 ENDENC	! reached the end of the encounters ?
	LOGICAL*1 WHITAL	! is scan-line 'all-white' ?
	LOGICAL*1 XAXIS		! first scan of the current scan-block ?
C
C function:
	INTEGER   NEGET		! returns scanner encounters
C
	SAVE	  XAXIS
C
	DATA XAXIS/.FALSE./
	DATA INVERT/4,1,2,3,0,5,7,6/	! invert polarity of encounters
C
C ......................................................................
C
C initialise.
	ENCTSB=0
	ENCTSL=0
	SCANAT=-1
	ENDENC=.FALSE.
	WHITAL=.FALSE.
	EMPTY=.FALSE.
	XAXIS=.NOT.XAXIS
C
C get all the encounters for this scan-block.
	INE=NEGET(NEBUF,NESIZE)
	IF (INE.EQ.-1) GO TO 220
C
C initialisation needed if 1st scan of this scan-block.
	IF (XAXIS)
     &	   CALL VIOCLR(PIXMAP(-PIXHLF,-PIXHLF),PIXNUM*PIXNUM)
	IF (INE.EQ.0) GO TO 230		! nothing seen
C
C got some encounters.
C process next encounter, checking for last encounter.
10	ENCTSB=ENCTSB + 1
	IF (ENCTSB.LE.INE) GO TO 20
C
C at end of encounters; flag it thus and flush-out the last scan-line
C of encounters.
	ENDENC=.TRUE.
	GO TO 30
C
C invert the polarity of the encounters if required.
20	IF (INVPOL) NEBUF(1,ENCTSB)=(NEBUF(1,ENCTSB).AND.TOP13).OR.
     &				    (INVERT(NEBUF(1,ENCTSB).AND.7))
C
C determine what type of encounter this is.
	IF (NEBUF(1,ENCTSB).EQ.BLACK) GO TO 10
	IF (NEBUF(1,ENCTSB).EQ.MULPOS .OR.
     &	    NEBUF(1,ENCTSB).EQ.MULNEG) GO TO 190
C
C	S I N G L E   E N C O U N T E R   O R   A L L - W H I T E
C
C	  - means we've started on a new scan-line, so deal with
C	    old scan-line first.
C
	IF (SCANAT.LT.0) GO TO 150	! jump if first scan-line
C
C see if 'old' line was scanned in 'all-white' - if so set all the cells
C for this scan-line in the byte-map.
30	IF (.NOT.WHITAL) GO TO 40
	WHITAL=.FALSE.			! clear flag
	CALL XYSET(SCANAT-HSLENP,-HSLENP,HSLENP,XAXIS)
	GO TO 150			! deal with new scan-line
C
C see if we scanned this 'old' line in the negative X or Y direction.
40	DO 50 I=1,ENCTSL-1
	   IF (CURLIN(1,I+1) - CURLIN(1,I)) 60,50,110
50	CONTINUE
C
C - scanned negatively, so flip.
60	IF (ENCTSL.GT.3) GO TO 80
	DO 70 I=1,2
	   COORD=CURLIN(I,1)
	   CURLIN(I,1)=CURLIN(I,ENCTSL)
	   CURLIN(I,ENCTSL)=COORD
70	CONTINUE
	GO TO 110
C
80	DO 100 J=0,(ENCTSL-1)/2
	   DO 90 I=1,2
	      COORD=CURLIN(I,J+1)
	      CURLIN(I,J+1)=CURLIN(I,ENCTSL-J)
	      CURLIN(I,ENCTSL-J)=COORD
90	   CONTINUE
100	CONTINUE
C
C here with encounters in correct order, (i.e. left-to-right for the
C scan in X, or bottom-to-top for the scan in Y).
C  - set up byte map according to the polarity of the encounters.
110	START=1
	IF (CURLIN(2,1).NE.NEGEDG .AND.
     &      CURLIN(2,1).NE.MULNEG) GO TO 120
C
C start of this scan was in-line, so set byte map white upto, and
C including this enc.
	START=2
	CALL XYSET(SCANAT-HSLENP,-HSLENP,
     &		   INT(FLOAT(CURLIN(1,1))/IPIT)-HSLENP,XAXIS)
	IF (ENCTSL.EQ.1) GO TO 150
	IF (ENCTSL.NE.2) GO TO 130
C
C here with a +ve encounter...
C I'm probably being paranoid, but I'm still going to check this is so.
120	IF (CURLIN(2,START).NE.POSEDG .AND.
     &	    CURLIN(2,START).NE.MULPOS) GO TO 260
	IF (ENCTSL.GT.START) GO TO 130
C
C set byte-map white from this last encounter up to the end.
	CALL XYSET(SCANAT-HSLENP,
     &		   NINT(FLOAT(CURLIN(1,START))/IPIT)-HSLENP,
     &		   HSLENP,XAXIS)
	GO TO 150
C
C having dealt with the possibility of a -ve first encounter we can now
C proceed with processing the other encounters on this scan-line.
130	DO 140 I=START,ENCTSL-1,2
	   IF (CURLIN(2,I).EQ.NEGEDG .OR.
     &	       CURLIN(2,I).EQ.MULNEG) GO TO 260
	   CALL XYSET(SCANAT-HSLENP,
     &		      NINT(FLOAT(CURLIN(1,I))/IPIT)-HSLENP,
     &		      INT(FLOAT(CURLIN(1,I+1))/IPIT)-HSLENP,XAXIS)
140	CONTINUE
C
C deal with the last encounter on this scan-line, that is if we haven't
C already dealt with it!
	IF (MOD((ENCTSL-START),2).EQ.0)
     &	   CALL XYSET(SCANAT-HSLENP,
     &		      NINT(FLOAT(CURLIN(1,ENCTSL))/IPIT)-HSLENP,
     &		      HSLENP,XAXIS)  ! set from this last enc to the end
C
C now we've finished processing this scan-line, deal with the single or
C all-white encounter we've just received, updating various pointers
C first.
150	IF (ENDENC) GO TO 280		! jump if end of encs
	ENCTSL=1	! 1st enc on this scan-line, in this scan-block
C
C compute the position of this new scan-line.
	IF (XAXIS) GO TO 160
	SCANAT=NEBUF(2,ENCTSB)/IPIT	! for Y
	GO TO 170
160	SCANAT=NEBUF(3,ENCTSB)/IPIT	! for X
170	IF (SCANAT.GE.SCPSCB) GO TO 240	! check for sillies
C
C see what caused this new scan-line, i.e. an all-white scan, or a
C single encounter?
	IF (NEBUF(1,ENCTSB).EQ.POSEDG .OR.
     &	    NEBUF(1,ENCTSB).EQ.NEGEDG) GO TO 180
C
C all-white scan - flag accordingly, and get to next scan-line, checking
C consistency of encounter-types returned from the scanner-library.
	IF (NEBUF(1,ENCTSB).NE.WHITE) GO TO 250
	WHITAL=.TRUE.
	GO TO 10
C
C single encounter, store encounter and sense.
180	WHITAL=.FALSE.			! not all-white scan
	GO TO 200
C
C	M U L T I P L E   E N C O U N T E R
C
C	 - store the encounter, and its sense.
C
190	ENCTSL=ENCTSL + 1		! bump enc count for scan-line
	IF (ENCTSL.GT.ENCBLK) GO TO 270	! check for sillies
200	CURLIN(2,ENCTSL)=NEBUF(1,ENCTSB)		! sense
	IF (XAXIS) GO TO 210
	CURLIN(1,ENCTSL)=NEBUF(3,ENCTSB) + HSLENC	! enc (Y)
	GO TO 10
210	CURLIN(1,ENCTSL)=NEBUF(2,ENCTSB) + HSLENC	! enc (X)
	GO TO 10
C
C ......................................................................
C
C error return(s).
220	CALL WRITEF('XYPRC: Buffer for DMA too small - data lost')
230	EMPTY=.TRUE.			! return 'nothing seen'
	GO TO 280
240	CALL WRITEF(
     &	   'XYPRC: Scan line number exceeds scans in scan-block')
	GO TO 280
250	CALL WRITEF('XYPRC: Inconsistent encounters returned')
	GO TO 280
260	CALL WRITEF('XYPRC: Two adjacent negative encounters')
	GO TO 280
270	CALL WRITEF('XYPRC: Too many encounters (%N)',ENCTSL)
280	RETURN
	END
