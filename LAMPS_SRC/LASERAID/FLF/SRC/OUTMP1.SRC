C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-06-25 12:08:52.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE OUTMP1(NLEFT,THK,PENUP,OUTPUT)
C
***	MODULE	OUTMP1
***	IDENT	25JN86
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	Converged				 DM	25-Jun-1986
CMOD	NMPIFF set here rather than in caller	 DM	17-Jun-1986
CMOD	Outputs TH if necessary; tidied		 DM	29-Apr-1986
CMOD	Do NOUT+1 check before transforming 	AJW	09-Sep-1983
CMOD	if NOUT'th point is not a junction, and
CMOD	NOUT+1th is, put out that point as well
CMOD	to avoid one point strings		AJW	16-Feb-1983
CMOD	First ST output after PENUP has IENDS=0	 DM	07-Dec-1982
CMOD	SECPOS set up (pos of 1st ST in feature) DM	22-Nov-1982
CMOD	MPTYPE tested .LE.0 so man pnts not js	AJW	04-Nov-1982
CMOD	IF NEWCOR outputs in map space		AJW	02-Nov-1982
CMOD	MPJUN replaced by MPTYPE		 DM	28-Oct-1982
CMOD	FLUSH replaced by BUNCH			 DM	26-Oct-1982
CMOD	Deal with junctions if JNCING is off	WJJ	08-Oct-1982
CMOD	Deals with MPIARM,JLIARM		AJW	01-Oct-1982
CMOD	FLUSH given an argument			 DM	28-Sep-1982
CMOD	Doesn't lose points up to first jnctn	AJW	20-Aug-1982
CMOD	MPJANG stuff added			AJW	10-Aug-1982
CMOD	Deals with angles			AJW	02-Aug-1982
CMOD	Bug fixes				AJW	22-Jul-1982
CMOD	Junction features need not start with 
CMOD	a Junction				AJW	16-Jul-1982
CMOD	JNCING switching put right		AJW	13-Feb-1981
CMOD	More junction stuff			AJW	15-Jan-1981
CMOD	Junction stuff added			AJW	12-Jan-1981
CMOD	Created					MCF	28-Feb-1977
C
C To send a line to the IFF file, putting out JP (junction pointer)
C entries after every string in the junction version. For the moment,
C these are null, and will be filled in at EF, when the junctions are
C created. If last point to be output is a junction, leave it in the
C buffer for next time, but unflagged, except if NLEFT=0, then assume
C flushing buffer at end of feature.
C If JLNJP=0, put out starting JP, and initialise /JNCLST/
C
C NF FS TH [ST ... ] JP ST JP ST ... JP ST JP [ST ... ] EF
C
C last point in ST1 is the same as the first in ST2
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
C parameters:
***	PARAMETER/PARAMS/
C
C arguments:
	INTEGER   NLEFT		! amount to leave
	REAL      THK		! paint-out thickness
	LOGICAL*1 PENUP		! start of line
	LOGICAL*1 OUTPUT	! issue to IFF
C
C common blocks:
***	COMMON/DIGC/
***	COMMON/IFFHAN/
***	COMMON/JNCLST/
***	COMMON/LKPARM/
***	COMMON/MPEP/
C
C workspace:
	INTEGER   IENDS		! pen up or down
	INTEGER   III		! III counts through the points
	INTEGER   JJJ		! JJJ is first point of next string
	INTEGER   KKK		! do loop counter
	INTEGER   NOUT		! number to put out
	INTEGER*4 LZERO		! long zero
	REAL	  MPTRAN(2,MAXMP) ! declare an array for transformed pts
C
C data:
	DATA LZERO/0/
C
C .....................................................................
C
C ... put backlogged points into MP buffer.
	CALL BUNCH(0.0,0.0,2)
	NOUT=NMP(1) - NLEFT
	IF (NOUT.LT.2) GO TO 160	! one point feature ?
C
C ... output TH entry if necessary.
	IF (.NOT.THPEND) GO TO 10
	IF (OUTPUT) CALL IFFTH(INT(THK))
	THPEND=.FALSE.
C
C ... if last point is not a junction, and point after that is, then put
C ... out that point as well, to avoid one point ST entries.
10	IF (MPTYPE(NOUT).GT.0) GO TO 20
	IF (NLEFT.EQ.0) GO TO 20
	IF (MPTYPE(NOUT+1).GT.0) NOUT=NOUT + 1
C
C ... transform into map space.
20	DO 30 III=1,NOUT
	   MPTRAN(X,III)=MP1(X,III)
	   MPTRAN(Y,III)=MP1(Y,III)
	   CALL TRXUSE(MPTRAN(X,III),MPTRAN(Y,III),FCOEFF)
30	CONTINUE
C
	IENDS = 1
	IF (PENUP) IENDS = 0
	IF (NMPIFF.LE.0) SECPOS=0
	JJJ=1
C
C ... split string up with JP entries.
	DO 100 III=1,NOUT
	  IF (MPTYPE(III).LE.0) GO TO 100
	  IF (JLNJP.GT.0) GO TO 50
C
C ... create starting JP and initialise number of junctions
	  JLNJP=1				! one junction pointer
	  IF (NMPIFF.EQ.0.AND.III.EQ.1) GO TO 40
	  JLST1P(JLNJP)=LPOSW			! position of string
	  JLST1O(JLNJP)=III - JJJ + 1		! offset in string
	  IF (III.EQ.JJJ) GO TO 70
	  GO TO 60
C
C ... first point is a junction.
40	  JLST1P(1)=0
	  JLST1O(1)=0
	  JLIARM(1)=0
	  GO TO 80
C
C ... this is not the first junction in the list.
50	  JLNJP=JLNJP + 1			! one more JP
	  JLST1P(JLNJP)=LPOSW			! position of string
	  JLST1O(JLNJP)=III - JJJ + 1		! offset in string
C
C ... write out the ST entry.
60	  IF (SECPOS.EQ.0) SECPOS=LPOSW
	  IF (OUTPUT) CALL IFFST(MPTRAN(X,JJJ),III-JJJ+1,IENDS)
	  IENDS=1				! regardless
C
70	  JLIARM(JLNJP)=MPIARM(III)
80	  JLJP(JLNJP)=LPOSW			! position of JP
	  IF (OUTPUT) CALL IFFJP(LZERO,0)
	  JLST2P(JLNJP)=LPOSW			! posn of ST
	  JLST2O(JLNJP)=1			! offset in ST
	  JLNARM(JLNJP)=MPTYPE(III)		! number of arms
	  JLXPOS(JLNJP)=MPTRAN(X,III)		! co-ordinate of junc
	  JLYPOS(JLNJP)=MPTRAN(Y,III)
	  JLOARM(JLNJP)=MPOARM(III)
	  JLARMS(JLNJP)=MPTYPE(III)
	  DO 90 KKK=1,MAXBRA
	    JLANG(KKK,JLNJP)=MPJANG(KKK,III)
90	  CONTINUE
	  JJJ=III
100	CONTINUE
C
C ... record number of points now (or soon to be) output to the file.
	NMPIFF=NMPIFF + NOUT
C
C ... is the last point a junction ?
	IF (JJJ.EQ.NOUT) GO TO 110
C
C ... no - write out all from JJJ to NOUT.
	IF (SECPOS.EQ.0) SECPOS=LPOSW 
	IF (OUTPUT) CALL IFFST(MPTRAN(X,JJJ),NOUT-JJJ+1,IENDS)
	GO TO 130
C
C ... yes - are we flushing ?
110	IF (NLEFT.GT.0) GO TO 120
C
C ... last point in this feature is a junction, so clear pointers to
C ... outgoing string, cos there isn't one.
	JLOARM(JLNJP)=0
	JLST2P(JLNJP)=0
	JLST2O(JLNJP)=0
	GO TO 160
C
C ... we are not flushing, so save last point for 1st point in next
C ... string, but unmark it as a junction.
120	MPTYPE(NOUT)=0
	NOUT=NOUT - 1
130	PENUP = .FALSE.
C
C ... move remaining points to bottom of buffer.
	NMP(1)=NMP(1) - NOUT			! number left
	IF (NMP(1).LE.0) GO TO 160
	DO 150 III=1,NMP(1)
	   MP1(X,III) = MP1(X,NOUT+III)
	   MP1(Y,III) = MP1(Y,NOUT+III)
	   MPTYPE(III) = MPTYPE(NOUT+III)
	   MPIARM(III) = MPIARM(NOUT+III)
	   MPOARM(III) = MPOARM(NOUT+III)
	   DO 140 KKK=1,MAXBRA
	      MPJANG(KKK,III)=MPJANG(KKK,NOUT+III)
140	   CONTINUE
150	CONTINUE
C
160	RETURN
	END
