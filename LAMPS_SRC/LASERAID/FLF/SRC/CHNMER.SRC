C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-06-02 19:10:18.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE CHNMER(ACHN,AWAY,NEND,BCHN,BWAY)
C
***	MODULE	CHNMER
***	IDENT	02JN86
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	Tidied					 DM	02-Jun-1986
CMOD	Error messages reduced			AJW	04-Jun-1982
CMOD	DATA after statement function declr	AJW	20-Jul-1981
CMOD	Tidied					AJW	22-Jan-1981
CMOD	Created					MCF	13-Dec-1978
C
C Merge two chains, A & B. The end of A that is dealt with first is
C assumed to have NEND free points before chain B joins it.
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
C parameters:
***	PARAMETER/PARAMS/
C
	PARAMETER MAXHST=3
C
C arguments:
	INTEGER   ACHN,BCHN	! chains
	INTEGER   NEND		! free 'tail'
	LOGICAL*1 AWAY,BWAY	! directions of attachment
C
C common blocks:
***	COMMON/RSE/
***	COMMON/LINKS/
C
C local w/s:
	INTEGER   ACOUNT,BCOUNT
	INTEGER   ANOD,BNOD
	INTEGER   ASTEP,BSTEP
	INTEGER   HSTRY(MAXHST)	! history of chain
	INTEGER   III,JJJ,KKK,LLL,NNN
	INTEGER   NCHN
C
C statement functions:
	REAL DST,DOT
	DST(III,JJJ)=FLOAT(ENCBUF(X,III)-ENCBUF(X,JJJ))**2 +
     &		     FLOAT(ENCBUF(Y,III)-ENCBUF(Y,JJJ))**2
	DOT(III,JJJ,KKK)=FLOAT(ENCBUF(X,JJJ)-ENCBUF(X,III))*
     &			 FLOAT(ENCBUF(X,KKK)-ENCBUF(X,JJJ)) +
     &			 FLOAT(ENCBUF(Y,JJJ)-ENCBUF(Y,III))*
     &			 FLOAT(ENCBUF(Y,KKK)-ENCBUF(Y,JJJ))
C
C ......................................................................
C
C set up pointers & counters.
	IF (AWAY) GO TO 10
	ANOD=LAST(ACHN)
	ASTEP=-1
	GO TO 20
10	ANOD=FIRST(ACHN)
	ASTEP=1
C
20	IF (BWAY) GO TO 30
	BNOD=LAST(BCHN)
	BSTEP=-1
	GO TO 40
30	BNOD=FIRST(BCHN)
	BSTEP=1
C
40	ACOUNT=LENGTH(ACHN)
	BCOUNT=LENGTH(BCHN)
C
C start the "new" chain.
	NCHN=ACHN			! we replace A
	CHAIN(BCHN)=0			! & suppress B
	LENGTH(NCHN)=0
	CHNSNS(NCHN)=CHNSNS(ACHN).XOR.(.NOT.AWAY)
	NNN=0
	DO 50 III=1,MAXHST
	   HSTRY(III)=0
50	CONTINUE
C
C eat up tail (if any).
	IF (NEND.LE.0) GO TO 80
	DO 70 III=1,NEND
	   LLL=NNN
	   NNN=NODE(ANOD)
	   NXT(NNN)=LLL
	   DO 60 JJJ=1,MAXHST-1
	      HSTRY(JJJ)=HSTRY(JJJ+1)
60	   CONTINUE
	   HSTRY(MAXHST)=LLL
	   LENGTH(NCHN)=LENGTH(NCHN) + 1
	   ANOD=ANOD + ASTEP
	   ACOUNT=ACOUNT - 1
70	CONTINUE
C
C combine chains together.
80	IF (ACOUNT.LE.0.AND.BCOUNT.LE.0) GO TO 140
	   IF (ACOUNT.LE.0) GO TO 110
	   IF (BCOUNT.LE.0) GO TO 100
C
C do we have a point in hand ?
	   IF (NNN.LE.0) GO TO 100		! if not
C
C do we have gradient established ?
	   IF (HSTRY(1).LE.0) GO TO 90		! if not
C
C yes we do - apply better test.
	   IF (DOT(HSTRY(1),NNN,NODE(ANOD)).GT.
     &	       DOT(HSTRY(1),NNN,NODE(BNOD))) GO TO 110
	   GO TO 100
C
C simple test to find nearest.
90	   IF (DST(NNN,NODE(ANOD)).GT.DST(NNN,NODE(BNOD))) GO TO 110
C
C A is nearer - add a point to N.
100	   LLL=NNN
	   NNN=NODE(ANOD)
	   NXT(NNN)=LLL
	   LENGTH(NCHN)=LENGTH(NCHN) + 1
	   ANOD=ANOD + ASTEP
	   ACOUNT=ACOUNT - 1
	   GO TO 120
C
C B is nearer.
110	   LLL=NNN
	   NNN=NODE(BNOD)
	   NXT(NNN)=LLL
	   LENGTH(NCHN)=LENGTH(NCHN) + 1
	   BNOD=BNOD + BSTEP
	   BCOUNT=BCOUNT - 1
C
C maintain history
120	   DO 130 III=1,MAXHST-1
	      HSTRY(III)=HSTRY(III+1)
130	   CONTINUE
	   HSTRY(MAXHST)=LLL
	GO TO 80
C
C done.
140	CHAIN(NCHN)=NNN
C
	RETURN
	END
