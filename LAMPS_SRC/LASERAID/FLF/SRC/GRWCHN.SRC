C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1985-11-29 20:06:22.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION GRWCHN(EDGE,ENCNUM,TYPE,PRVEDG,CHNNUM)
C
***	MODULE	GRWCHN
***	IDENT	29NO85
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
C Author: D. Meader
C
C	Created 				 DM	26-Apr-1985
C
C Creates a new chain or appends a point to an existing chain.
C
	IMPLICIT NONE
C
***	PARAMETER/PARAMS/
C
	PARAMETER NEGEDG='37770'O	! negative edge encounter
C
	INTEGER*4 EDGE			! edge to which encnum belongs
	INTEGER*4 ENCNUM		! encounter to be appended
	INTEGER*2 TYPE			! encounter type
	INTEGER*4 PRVEDG		! previous edge (if relevant)
	INTEGER*4 CHNNUM		! chain number
C
***	COMMON/ANACOM/
***	COMMON/LINKS/
C
	INTEGER*4 ICHN,ISIDE		! temporary variables
C
C ......................................................................
C
C ... get the side of the chain OPPOSITE to EDGE for use with CHNEDG
C ... (see below). Remember that TYPE has already been corrected for the
C ... scan axis direction.
	ISIDE=2				! get 'side' of chain
	IF ((TYPE.AND.4).EQ.0) ISIDE=1	! independent of scan direction
C
	IF (ACTCHN(CHNNUM)) GO TO 40	! does chain exist already ?
C
C ... create new chain.
10	DO 20 ICHN=1,MAXCHN		! find a free chain
	   IF (.NOT.ACTCHN(ICHN)) GO TO 30
20	CONTINUE
	GRWCHN=.TRUE.			! no free chains left
	GO TO 60			! give up (for now at least)
C
30	CHAIN(ICHN)=0
	LENGTH(ICHN)=0
	ACTCHN(ICHN)=.TRUE.
	EDGCHN(ICHN)=PRVEDG.LE.0	! is it an edge chain ?
	CHNSNS(ICHN)=(PRVEDG.LE.0).AND.(TYPE.EQ.NEGEDG)
C
C ... record the edge(s) belonging to the new chain.
C ... N.B. the first argument of CHNEDG corresponds to left and right
C ... for scans in the positive X and Y axes only. More precisely, it is
C ... 1 for positive edges and 2 for negative edges.
	CHNEDG(3-ISIDE,ICHN)=EDGE	! remember edge(s)
	CHNEDG(ISIDE,ICHN)=PRVEDG	! (may be zero)
C
C ... add the new chain to the top of the chain list for this edge.
	CHNMAP(ICHN,EDGE)=CURCHN(EDGE)
	CURCHN(EDGE)=ICHN
	IF (PRVEDG.LE.0) GO TO 50
	CHNMAP(ICHN,PRVEDG)=CURCHN(PRVEDG)
	CURCHN(PRVEDG)=ICHN
	GO TO 50
C
C ......................................................................
C
C ... a chain exists, but check that the point is compatible.
C ... this traps the case where the same edge belongs to a mixture of
C ... line and edge chains (e.g. when the edge disappears off the side
C ... of the scan). It also spots two chains merging into one.
40	ICHN=CURCHN(EDGE)
	IF (EDGCHN(ICHN).XOR.(PRVEDG.LE.0)) GO TO 10
	IF (PRVEDG.EQ.CHNEDG(ISIDE,ICHN)) GO TO 50
	IF (PRVEDG.GE.0.OR.CHNEDG(ISIDE,ICHN).GE.0) GO TO 10
C
C ... append point to chain.
50	NXT(ENCNUM)=CHAIN(ICHN)
	LENGTH(ICHN)=LENGTH(ICHN) + 1
	CHAIN(ICHN)=ENCNUM
	GRWCHN=.FALSE.
60	RETURN
	END
