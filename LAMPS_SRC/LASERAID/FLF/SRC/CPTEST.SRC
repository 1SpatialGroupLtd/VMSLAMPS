C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1983-09-15 13:15:52.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION CPTEST(CPTS)
C
***	MODULE	CPTEST
***	IDENT	15SE83
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
C Author: D. Meader
C
CMOD	Ignores any constant offset in map space DM	15-Sep-1983
C	Created	from DM4PT			 DM	06-Jun-1983
C
C Performs various tests on the corner point values in CPTS.
C Checks that the corner points are cyclic (i.e. aren't crossed), and
C ensures that the 'map-space' values form a sensible set (assumes that
C the machine-space values will be tested in CPSET).
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
	INTEGER	  I,J
	REAL	  CPTS(4,4)		! CPSET entry - corner points
	REAL	  XORIG,YORIG,X13,Y13	! point 1, vector from 1 to 3
	REAL*8	  A(4,4),DUMMY		! temporary matrices for SOLVE
	REAL*8	  CRIT			! criterion for rejection of fit
	REAL*8	  XT,YT,X2T,XYT,Y2T	! 'true' X,Y,X**2,X*Y,Y**2
C
C ......................................................................
C
	CPTEST=.TRUE.			! assume we fail
C
C ... first of all, check that the corner points are cyclic.
C ... machine space first.
C ... check that the triangles formed by points (1)-(2)-(3) and 
C ... (1)-(3)-(4) have the same sense (i.e. clockwise or anticlockwise).
	XORIG=CPTS(1,1)			! refer everything to point 1
	YORIG=CPTS(2,1)
	X13=CPTS(1,3) - XORIG
	Y13=CPTS(2,3) - YORIG
C
C ... evaluate the cross products V12 x V13 and V13 x V14.
C ... check that they have the same sign.
	IF (((CPTS(1,2)-XORIG)*Y13 - (CPTS(2,2)-YORIG)*X13)*
     &	    (X13*(CPTS(2,4)-YORIG) - Y13*(CPTS(1,4)-XORIG)) .LE. 0.0)
     &	   RETURN
C
C ... now do the same for map space.
	XORIG=CPTS(3,1)
	YORIG=CPTS(4,1)
	X13=CPTS(3,3) - XORIG
	Y13=CPTS(4,3) - YORIG
C
	IF (((CPTS(3,2)-XORIG)*Y13 - (CPTS(4,2)-YORIG)*X13)*
     &	    (X13*(CPTS(4,4)-YORIG) - Y13*(CPTS(3,4)-XORIG)) .LE. 0.0)
     &	   RETURN
C
C ... now check that the map space values form a viable set.
C ... zero the coefficient matrix.
	DO 20 J=1,4
	   DO 10 I=1,4
	      A(I,J)=0.0D0
10	   CONTINUE
20	CONTINUE
C
C ... set up the coefficient matrix A.
	DO 30 I=1,4
	   XT=CPTS(3,I) - XORIG			! 'true' values
	   YT=CPTS(4,I) - YORIG
	   X2T=XT*XT				! for efficiency
	   XYT=XT*YT
	   Y2T=YT*YT
C
	   A(2,1)=A(2,1) + XT
	   A(3,1)=A(3,1) + YT
	   A(4,1)=A(4,1) + XYT
	   A(2,2)=A(2,2) + X2T
	   A(4,2)=A(4,2) + X2T*YT
	   A(3,3)=A(3,3) + Y2T
	   A(4,3)=A(4,3) + XT*Y2T
	   A(4,4)=A(4,4) + X2T*Y2T
30	CONTINUE
C
C ... finish setting up A.
	A(1,1)=4.0D0
	A(1,2)=A(2,1)
	A(3,2)=A(4,1)
	A(1,3)=A(3,1)
	A(2,3)=A(4,1)
	A(1,4)=A(4,1)
	A(2,4)=A(4,2)
	A(3,4)=A(4,3)
C
C ... now call SOLVE to force a triangular decomposition of A.
	CALL SOLVE(A,DUMMY,4,0,0,4,1)
C
C ... analyse the eigenvalues of A (now triangular).
C ... examine the first and last eigenvalues; if the fit is good these
C ... will have 'similar' magnitudes (one day I may get round to proving
C ... this, until then take my word for it !!)
C ... return .TRUE. if we don't believe these CPs are any good.
C ... N.B. we are more tolerant than in FIT, since we must allow fairly
C ... weird corner points to be used if required.
	CRIT=1.0D6			! rather arbitrary, this !
	CPTEST=DABS(A(1,1)/A(4,4)).GT.CRIT
C
	RETURN
	END
