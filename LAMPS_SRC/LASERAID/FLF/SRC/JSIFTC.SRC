	SUBROUTINE JSIFTC
C
***	MODULE	JSIFTC
***	IDENT	31OC85
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
C Author: D. Meader
C
C	Created 				 DM	23-Oct-1985
C
C Sifts the chains grown by EXTract, removing any which are
C anticlockwise with respect to a reference point inside the line we're
C following.
C Such chains are likely to be due to spurious detail very close to the
C line and may cause junction recognition to fail if not removed.
C
***	PARAMETER/PARAMS/
C
***	COMMON/BLG/
***	COMMON/LINKS/
***	COMMON/LKFOLL/
***	COMMON/LKPARM/
***	COMMON/MPEP/
***	COMMON/RSE/
C
	INTEGER*4 CLSEST	! number of point closest to (XREF,YREF)
	INTEGER*4 ICHN		! chain number
	INTEGER*4 PNTNUM	! point number along chain
	REAL	  COSTHT,SINTHT	! components of tangent vector
	REAL	  DIST		! temporary distance
	REAL	  DX,DY		! temporary vector components
	REAL	  MINDST	! current minimum distance
	REAL	  XREF,YREF	! position of reference point
C
C ......................................................................
C
C ... first get a point which is inside the line we're following.
	IF (NMP(1).GT.0) GO TO 10		! start of feature ?
	IF (.NOT.INVPOL) GO TO 100		! yes ...
	XREF=0.0				! use centre of scan
	YREF=0.0				! (this is not ideal !!)
	GO TO 20
10	XREF=MP1(X,NMP(1)) - START(X)		! no ...
	YREF=MP1(Y,NMP(1)) - START(Y)		! use last master point
	IF (INDEX(1).LE.0) GO TO 20		! or ...
	XREF=XREF + XBLG(1,INDEX(1))		! last backlogged point
	YREF=YREF + YBLG(1,INDEX(1))
C
C ... now loop through the active chains, rejecting any which are
C ... anticlockwise with respect to (XREF,YREF).
20	DO 90 ICHN=1,MAXCHN			! loop through the chns
	   IF (CHAIN(ICHN).LE.0) GO TO 90	! is this chain active ?
C
C ... wander along ICHN looking for the closest point to (XREF,YREF).
	   MINDST=1.0E20			! reset minimum distance
	   PNTNUM=FIRST(ICHN)			! go from FIRST to LAST
30	   DIST=(FLOAT(ENCBUF(X,NODE(PNTNUM))) - XREF)**2 +
     &		(FLOAT(ENCBUF(Y,NODE(PNTNUM))) - YREF)**2
	      IF (DIST.GT.MINDST) GO TO 40	! is this point closer ?
	      MINDST=DIST			! yes - make it current
	      CLSEST=PNTNUM
40	      IF (PNTNUM.EQ.LAST(ICHN)) GO TO 50
	      PNTNUM=PNTNUM + 1
	   GO TO 30				! get next point on chn
C
C ... find the tangent vector to ICHN at that point.
50	   IF (CLSEST.NE.FIRST(ICHN)) GO TO 60
	   COSTHT=0.0				! no point before CLSEST
	   SINTHT=0.0
	   GO TO 70
60	   DX=FLOAT(ENCBUF(X,NODE(CLSEST)) - ENCBUF(X,NODE(CLSEST-1)))
	   DY=FLOAT(ENCBUF(Y,NODE(CLSEST)) - ENCBUF(Y,NODE(CLSEST-1)))
	   DIST=SQRT(DX*DX + DY*DY)
	   COSTHT=DX/DIST
	   SINTHT=DY/DIST
70	   IF (CLSEST.EQ.LAST(ICHN)) GO TO 80	! no point after CLSEST 
	   DX=FLOAT(ENCBUF(X,NODE(CLSEST+1)) - ENCBUF(X,NODE(CLSEST)))
	   DY=FLOAT(ENCBUF(Y,NODE(CLSEST+1)) - ENCBUF(Y,NODE(CLSEST)))
	   DIST=SQRT(DX*DX + DY*DY)
	   COSTHT=COSTHT + DX/DIST		! components of tangent
	   SINTHT=SINTHT + DY/DIST		! (not normalised)
C
C ... evaluate the cross-product of (COSTHT,SINTHT) with the vector from
C ... (XREF,YREF) to CLSEST. If this is negative we reject the chain.
80	   DX=FLOAT(ENCBUF(X,NODE(CLSEST))) - XREF
	   DY=FLOAT(ENCBUF(Y,NODE(CLSEST))) - YREF
	   IF ((COSTHT*DY - DX*SINTHT).GT.-1.0E-6) GO TO 90
	   CHAIN(ICHN)=0			! kill off the chain
	   IF (TMPCHK)
     &	      CALL WRITEF('JSIFTC: Anticlockwise chain removed')
90	CONTINUE
C
100	RETURN
	END
