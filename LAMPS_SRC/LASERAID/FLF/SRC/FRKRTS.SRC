C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1982-01-05 17:41:12.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE REMCHN(N)
C
***	MODULE REMCHN
***	IDENT  20JL81
C
**	IF VAX
	  IMPLICIT NONE
**	ENDC
C
C Copyright Laser-Scan Laboratories Ltd,Cambridge,England
C
C	Tidied					AJW	20-Jul-1981
C	Created					MCF	19-Jul-1977
C
C
C Remove chain N from active list, do nothing
C if it isn't active.
C
C parameters:
***	PARAMETER/PARAMS/
C
C argument:
	INTEGER N
C
C common block:
***	COMMON/FORKS/
C
C workspace:
	INTEGER K,L
C
	L = 0
C
10	K = NXTCHN(L)
	IF (K .LE. 0) GOTO 30
	IF (K .EQ. N) GOTO 20
	L = K
	GOTO 10
C
20	NXTCHN(L) = NXTCHN(K)
	NXTCHN(K) = 0
C
30	RETURN
	END
C
	INTEGER*4 FUNCTION ADDCHN(IV,FSTPNT)
C
***	MODULE ADDCHN
***	IDENT  20JL81
C
**	IF VAX
	  IMPLICIT NONE
**	ENDC
C
C Copyright Laser-Scan Laboratories Ltd,Cambridge,England
C
C	Tidied					AJW	20-Jul-1981
C	Created					MCF	19-Jul-1977
C
C Start up a new chain, using point FSTPNT from NEBUF, adding
C it into its proper place in the active list.
C The new chain number is returned, 0 if no room for it
C
C parameters:
***	PARAMETER/PARAMS/
C
C arguments:
	INTEGER IV		! scan direction
	INTEGER FSTPNT		! the first point
C
C common blocks:
***	COMMON/RSE/
***	COMMON/LINKS/
***	COMMON/FORKS/
C
C workspace:
	INTEGER I,K,L,NV
C
C Find a free chain
	DO 10 I=1,MAXCHN
	  ADDCHN = I
	  IF (CHAIN(I) .EQ. 0) GOTO 20
10	CONTINUE
C
C no room for it
	ADDCHN = 0
	GOTO 50
C
C find chains's position
20	NV = NEBUF(IV+1,FSTPNT)
	L = 0
30	K = NXTCHN(L)
	IF (K .LE. 0) GOTO 40
	IF (NEBUF(IV+1,CHAIN(K)) .GT. NV) GOTO 40
	L = K
	GOTO 30
C
C found our place
40	NXTCHN(L) = ADDCHN
	NXTCHN(ADDCHN) = K
	CHAIN(ADDCHN) = FSTPNT	! start the chain
	LENGTH(ADDCHN) = 1
	NXT(FSTPNT) = 0
	ENDFRK(1, ADDCHN) = 0
	ENDFRK(2, ADDCHN) = 0
C
50	RETURN
	END
C
	INTEGER*4 FUNCTION ADDFRK(TYP,STEM,B1,B2)
C
***	MODULE ADDFRK
***	IDENT  20JL81
C
**	IF VAX
	  IMPLICIT NONE
**	ENDC
C
C Copyright Laser-Scan Laboratories Ltd,Cambridge,England
C
C	Tidied					AJW	20-Jul-1981
C	Created					MCF	19-Jul-1977
C
C Add a new fork to the list of them.
C
C parameters:
***	PARAMETER/PARAMS/
C
C arguments:
	INTEGER TYP		! type of fork
	INTEGER STEM,B1,B2	! the 3 constituent chains
C the signs of these indicate how they are attached to
C the fork: <0 => by FIRST end, >0 => BY last END
C
	INTEGER BRANCH		! branch being considered
	INTEGER WHTWAY		! direction of attachment
C
C common block:
***	COMMON/FORKS/
C
C workspace:
	INTEGER I
C
	DO 10 I=1,MAXFRK
	  ADDFRK = I
	  IF (FRKTYP(I) .EQ. 0) GOTO 20
10	  CONTINUE
C
C no room
	ADDFRK = 0
	GOTO 50
C
C fill in various pointers
20	FRKTYP(ADDFRK) = TYP
	DO 40 I = 1,3
	  BRANCH = STEM
	  IF (I .EQ. 2) BRANCH = B1
	  IF (I .EQ. 3) BRANCH = B2
	  WHTWAY = 2
	  IF (BRANCH .GT. 0) GOTO 30
	  BRANCH = -BRANCH
	  WHTWAY = 1
30	  FORK(I,ADDFRK) = BRANCH
	  IF (BRANCH .NE. 0) ENDFRK(WHTWAY,BRANCH) = ADDFRK
40	  CONTINUE
C
50	RETURN
C
	END
