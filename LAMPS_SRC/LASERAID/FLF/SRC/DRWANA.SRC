C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1985-09-06 15:30:50.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE DRWANA
C
***	MODULE	DRWANA
***	IDENT	16SE85
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
C Author: D. Meader
C
C	Created 				 DM	15-Jul-1985
C
C Draws the results of the last ANAlysis on the close-up screen.
C
	IMPLICIT NONE
C
***	PARAMETER/PARAMS/
C
	PARAMETER WIDFLD='37777'O	! width field of encounter
C
***	COMMON/ANACOM/
***	COMMON/LINKS/
***	COMMON/LKFOLL/
***	COMMON/RSE/
C
	INTEGER	  POS(2)		! encounter position
	INTEGER	  WIDTH(2)		! encounter width
	INTEGER*4 I			! temporary variable
	INTEGER*4 NELIM			! max enc number m/c can return
	LOGICAL*1 EDGUSD(MAXEDG)	! has this edge been visited ?
C
C ......................................................................
C
C ... first draw any newly-created line data.
	IF (NEGOT.LE.0) GO TO 50	! anything to draw ?
	NELIM=NESIZE - NEXPND		! max enc number m/c can return
	IF (NETOP.LE.NELIM) GO TO 20
	CALL TXCOL(2)
	WIDTH(IU)=0
	DO 10 I=NELIM+1,NETOP
	   WIDTH(IV)=ENCBUF(W,I).AND.WIDFLD
	   POS(IU)=ENCBUF(IU,I)
	   POS(IV)=ENCBUF(IV,I) - WIDTH(IV)/2
	   CALL TXMTO(POS(X),POS(Y))
	   CALL TXLBY(WIDTH(X),WIDTH(Y))
10	CONTINUE
C
C ... now draw the chains.
20	CALL TXCOL(3)
	CALL DRWCHN(0,IU,IV)
C
C ... then the joins.
	CALL TXCOL(6)
	CALL VIOCLR(EDGUSD,MAXEDG)	! clear the 'edge used' flags
C
	DO 30 I=1,TOPEDG
	   IF (EDGUSD(I)) GO TO 30	! already dealt with this edge ?
	   CALL DRWJOI(I,2,EDGUSD)	! search forwards ...
	   CALL DRWJOI(I,1,EDGUSD)	! and backwards
	   EDGUSD(I)=.TRUE.
30	CONTINUE
C
C ... and finally the estimated centre of the junction scan (if needed).
	IF (ANLYZD.LT.1) GO TO 40
	CALL TXCOL(5)
	CALL TXMTO(JUNSCN(X),JUNSCN(Y))
	CALL DRWBOX(16)
C
C ... sanitise the device.
40	CALL TXCOL(1)			! back to default colour
	CALL TXEND			! return to alpha mode
50	RETURN
	END
	SUBROUTINE DRWJOI(IEDGE,IEND,EDGUSD)
C
***	MODULE	DRWJOI
***	IDENT	19AU85
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
C Author: D. Meader
C
C	Created 				 DM	17-Jul-1985
C
C Draws the edge connectivity structure for end IEND of edge IEDGE on
C the close-up screen.
C This routine shows how to traverse the join data held in /ANACOM/.
C
	IMPLICIT NONE
C
***	PARAMETER/PARAMS/
C
	INTEGER*4 IEDGE			! edge number
	INTEGER*4 IEND			! 1/2 => start/end
	LOGICAL*1 EDGUSD(MAXEDG)	! has this edge been visited ?
C
***	COMMON/ANACOM/
C
	INTEGER	  POS(2)		! encounter position
	INTEGER*4 JEDGE,JEND,KEDGE,KEND	! temporary variables
C
C function:
	LOGICAL*4 ENDPOS		! gets position of end of edge
C
C ......................................................................
C
	JEDGE=IEDGE
	JEND=IEND
C
C ... loop through all edges which are joined to IEDGE.
10	KEDGE=JOILST(JEND,JEDGE)
	   IF (KEDGE.EQ.0) GO TO 70	! any more joins ?
	   IF (EDGUSD(KEDGE)) GO TO 70	! already looked at this edge ?
	   EDGUSD(KEDGE)=.TRUE.
	   KEND=JOIEND(JEND,JEDGE)	! get the end we're joined to
C
C ... draw a line from JEND of JEDGE to KEND of KEDGE.
	   IF (ENDPOS(JEDGE,JEND,POS)) GO TO 70
	   CALL TXMTO(POS(X),POS(Y))
	   CALL DRWBOX(8)		! draw box at end of edge
	   IF (ENDPOS(KEDGE,KEND,POS)) GO TO 70
	   CALL TXLTO(POS(X),POS(Y))
	   CALL DRWBOX(8)
C
C ... check the consistency of the data structure.
	   IF (.NOT.JOINED(JEDGE,KEDGE)) GO TO 40
	   IF (JEDGE.EQ.IEDGE) GO TO 20
	   IF (.NOT.JOINED(IEDGE,JEDGE)) GO TO 50
	   IF (KEDGE.EQ.IEDGE) GO TO 20
	   IF (.NOT.JOINED(IEDGE,KEDGE)) GO TO 60
C
C ... finished with this join.
20	   JEDGE=KEDGE			! look for edges joined to KEDGE
	   JEND=3 - KEND		! (from its other end)
	GO TO 10
C
C ... JOIMAP and JOILST do not agree.
40	CALL TXEND
	CALL WRITEF(
     &	   'DRWJOI: Error in join structure (edge %^L%N(%N) => %N(%N))',
     &						  JEDGE,JEND,KEDGE,KEND)
	GO TO 70
C
50	KEDGE=JEDGE
60	CALL TXEND
	CALL WRITEF(
     &	   'DRWJOI: Error in join structure (edge %^L%N => %N)',
     &						  IEDGE,  KEDGE)
C
70	RETURN
	END
	LOGICAL*4 FUNCTION ENDPOS(IEDGE,IEND,POS)
C
***	MODULE	ENDPOS
***	IDENT	17JL85
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
C Author: D. Meader
C
C	Created 				 DM	17-Jul-1985
C
C Returns the position of end IEND of edge IEDGE.
C This routine shows how to traverse the chain/edge data structure held
C in /ANACOM/. The function value is .TRUE. if we find inconsistencies
C in that structure or if the chain data have already been processed.
C
	IMPLICIT NONE
C
***	PARAMETER/PARAMS/
C
	PARAMETER WIDFLD='37777'O	! width field of encounter
C
	INTEGER*4 IEDGE			! edge number
	INTEGER*4 IEND			! 1/2 => start/end
	INTEGER	  POS(2)		! returned encounter position
C
***	COMMON/ANACOM/
***	COMMON/LINKS/
***	COMMON/LKFOLL/
***	COMMON/RSE/
C
	INTEGER*4 ENDPNT		! enc number of end of chain
	INTEGER*4 I			! temporary variable
	INTEGER*4 ICHN			! chain to which edge belongs
C
C ......................................................................
C
	ENDPOS=.FALSE.			! assume we succeed
C
C ... find the *real* chain to which our edge belongs.
	ICHN=CURCHN(IEDGE)		! last chain for our edge
	IF (IEND.EQ.2) GO TO 20		! far end of edge wanted ?
10	I=CHNMAP(ICHN,IEDGE)		! no, start wanted
	   IF (I.EQ.0) GO TO 20		! got there yet ?
	   ICHN=I			! no, try again
	GO TO 10
C
C ... then find the required end of that chain.
C ... N.B. we do not assume that the chain structure has been LISTED.
20	ENDPNT=CHAIN(ICHN)		! enc number of end of chain
	IF (ENDPNT.EQ.0) GO TO 70	! does chain still exist ?
	IF (IEND.EQ.2) GO TO 40		! far end of chain wanted ?
30	I=NXT(ENDPNT)			! no, start wanted
	   IF (I.EQ.0) GO TO 40		! got there yet ?
	   ENDPNT=I			! no, try again
	GO TO 30
C
C ... finally determine which side of ICHN we want.
40	POS(IU)=ENCBUF(IU,ENDPNT)
	POS(IV)=ENCBUF(IV,ENDPNT)
	IF (EDGCHN(ICHN)) GO TO 80	! is it a *real* edge ?
	IF (CHNEDG(1,ICHN).NE.IEDGE) GO TO 50
	POS(IV)=POS(IV) + (IV - IU)*((ENCBUF(W,ENDPNT).AND.WIDFLD)/2)
	GO TO 80
50	IF (CHNEDG(2,ICHN).NE.IEDGE) GO TO 60
	POS(IV)=POS(IV) + (IU - IV)*((ENCBUF(W,ENDPNT).AND.WIDFLD)/2)
	GO TO 80
C
C ... error in data structure.
60	CALL TXEND
	CALL WRITEF(
     &	'ENDPOS: Error in data structure (chain %^L%N edge %N end %N)',
     &						 ICHN,	  IEDGE, IEND)
C
70	ENDPOS=.TRUE.
80	RETURN
	END
	SUBROUTINE DRWBOX(SIZE)
C
***	MODULE	DRWBOX
***	IDENT	17JL85
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
C Author: D. Meader
C
C	Created 				 DM	17-Jul-1985
C
C Draws a square box of side-length SIZE on the close-up screen,
C centred on the current position.
C
	IMPLICIT NONE
C
	INTEGER	SIZE
C
	INTEGER HLFSIZ			! half side-length of box
C
C ......................................................................
C
	HLFSIZ=SIZE/2
	CALL TXMBY(-HLFSIZ,HLFSIZ)	! centre at current position
	CALL TXLBY(0,-SIZE)
	CALL TXLBY(SIZE,0)
	CALL TXLBY(0,SIZE)
	CALL TXLBY(-SIZE,0)
	CALL TXMBY(HLFSIZ,-HLFSIZ)	! back where we started
	RETURN
	END
