C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-06-09 15:59:00.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE EDGSMF(MCHN)
C
***	MODULE	EDGSMF
***	IDENT	09JN86
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
C Author: D. Meader
C
C	Created 				 DM	05-Jun-1986
C
C Given a set of chain numbers corresponding to ELF-mode small features
C found by EDGFTR, find the largest chain number and kill off any
C non-relevant chains with lower numbers.
C Having done that, BUNCH each surviving chain and write the remains
C back for subsequent refreshing/acceptance.
C
	IMPLICIT NONE
C
***	PARAMETER/PARAMS/
C
	INTEGER*2 MCHN			! largest chain number found
C
***	COMMON/FTRLST/
***	COMMON/LINKS/
***	COMMON/LKFOLL/
***	COMMON/MPEP/
***	COMMON/RSE/
C
	INTEGER*4 I,J,K,L		! temporary variables
C
C ......................................................................
C
	MCHN=0				! find largest chain number
	I=0
10	I=SMFLST(I+1)
	   IF (I.GT.MCHN) MCHN=I
	IF (I.NE.0) GO TO 10
	IF (MCHN.LT.2) GO TO 40
C
	DO 30 J=1,MCHN-1		! kill off non-relevant chains
	   I=0
20	   I=SMFLST(I+1)
	      IF (I.EQ.J) GO TO 30
	   IF (I.NE.0) GO TO 20
	   CHAIN(J)=0
30	CONTINUE
C
40	DO 70 J=1,MCHN			! compact the chains ...
	   I=CHAIN(J)
	   IF (I.EQ.0) GO TO 70
	   CALL GETFTR(START,J,TRKPOL)
	   LENGTH(J)=NMP(1)
	   IF (NMP(1).NE.0) GO TO 50
	   CHAIN(J)=0			! (unless too big)
	   GO TO 70
50	   DO 60 K=NMP(1),1,-1		! and then write them back
	      L=I
	      ENCBUF(X,L)=MP1(X,K) - START(X)
	      ENCBUF(Y,L)=MP1(Y,K) - START(Y)
	      I=NXT(L)
60	   CONTINUE
	   NXT(L)=0
70	CONTINUE
C
	LISTED=.FALSE.			! we've messed this up now
	NMP(1)=0			! nothing 'in hand'
	RETURN
	END
