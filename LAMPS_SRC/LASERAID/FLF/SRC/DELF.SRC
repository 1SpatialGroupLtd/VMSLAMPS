C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-04-10 17:06:28.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE DELF
C
***	MODULE	DELF
***	IDENT	10AP86
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
C Author: D. Meader
C
CMOD	Deleted jncs removed from in-core list	 DM	07-Apr-1986
CMOD 	Bug in arm deletion fixed		 DM	09-Sep-1983
CMOD	Tidied					 DM	09-Jul-1982
C	Created					 DM	15-Jan-1981
C
C Deletes a feature from LPOSNF to the next EF.
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
***	PARAMETER/PARAMS/
C
***	COMMON/IFFHAN/
***	COMMON/JCRCOM/
***	COMMON/JNCLST/
***	COMMON/MASTER/
C
	INTEGER*2 IBUF(3),JPSGOT,NARM,NARMS,NJP,NVERTX
	INTEGER*2 IECODE,IELEN
	INTEGER*4 I,J,K		! temporary variables
	INTEGER*4 LBUF,LSTRP
	LOGICAL*1 HADEF		! does feature end with EF or EOF ?
	REAL	  RPOSX,RPOSY	! dummy variables
C
	EQUIVALENCE (LBUF,IBUF(1))
C
C ......................................................................
C
	LPOSEF=LPOSE				! until we know better
	HADEF=.FALSE.
	JPSGOT=0
	CALL IFFPKE(IECODE,IELEN,LPOSNF)
C
C ... LPOSNF points to an NF entry.
	CALL EIHMK(1)
C
C ... find a JP or EF entry.
10	CALL IFFNXT(IECODE,IELEN)
	IF (IELEN.EQ.-1) GO TO 40		! EOF
	IF (IECODE.EQ.'JP') GO TO 20
	IF (IECODE.EQ.'EF') GO TO 30
	GO TO 10
C
C ... got a JP.
20	JPSGOT=JPSGOT+1
C
C ... obtain the JB entry point and the junction offset.
	CALL EIHRI(IBUF,3,1)
C
C ... store them away for future use.
	JLST1P(JPSGOT)=LBUF
	JLST1O(JPSGOT)=IBUF(3)
	GO TO 10
C
C ...................................................................
C
C ... got an EF.
30	LPOSEF=LPOSH
	HADEF=.TRUE.
40	IF (JPSGOT.EQ.0) GO TO 110
C
C ... loop through the JPs, finding the junctions.
	DO 100 NJP=1,JPSGOT
	   CALL IFJPKJ(RPOSX,RPOSY,NARMS,JLST1P(NJP),JLST1O(NJP))
C
C ... loop through the arms of each junction.
	   IF (NARMS.EQ.0) GO TO 70
	   DO 50 NARM=1,NARMS
	      CALL JIHR(NARM,LSTRP,NVERTX)	! read arm info
	      IF (LSTRP.GT.LPOSNF.AND.LSTRP.LT.LPOSEF)
     &		  CALL JIHW(NARM,0,0)		! delete it if necessary
50	   CONTINUE
C
C ... does this junction have any arms left ?
	   DO 60 NARM=1,NARMS
	      CALL JIHR(NARM,LSTRP,NVERTX)
	      IF (LSTRP.GT.0) GO TO 100
60	   CONTINUE
C
C ... no - so delete it.
70	   CALL JIHDEL
	   IF (JCRNUM.LE.0) GO TO 100
	   J=0				! and remove it ...
	   DO 80 I=1,JCRNUM		! from in-core list
	      IF ((JCRPOS(X,I) - RPOSX)**2 + (JCRPOS(Y,I) - RPOSY)**2
     &		  .GT.1.0E-3) GO TO 80	! hunt for it in list
	      IF ((JCRARM(I).NE.NARMS).AND.(NARMS.NE.0)) GO TO 80
	      J=J + 1
	      K=I
80	   CONTINUE
	   IF (J.EQ.1) GO TO 90
	   IF (WIZARD.AND.(J.GT.1)) CALL WRITEF(
     &	     '%CUnable to delete junction from list (%^L%N candidates)',
     &	     7,J)
	   GO TO 100			! can't do anything
90	   JLNJP=0			! warn ADDJUN only to delete
	   JCRLPS(K)=0			! set up delete flag
	   CALL ADDJUN			! delete jnc and tidy structure
100	CONTINUE
C
C ....................................................................
C
C ... now delete the feature.
110	IF (.NOT.HADEF) GO TO 120	! feature ended by EOF.
	CALL IFFPKE(IECODE,IELEN,LPOSEF)
	CALL IFFNXT(IECODE,IELEN)
120	CALL IFFVOM
	CALL EIHMK(0)
C
	RETURN
	END
