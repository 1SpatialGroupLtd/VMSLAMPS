C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1983-05-23 18:17:38.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE GROW(IU,IV)
C
***	MODULE	GROW
***	IDENT	23MY83
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	CLOCHN now cleared by SETCHN		 DM	23-May-1983
CMOD	Wait for third point before using grads	WJJ	18-Nov-1982
CMOD	Clears CLOCHN				AJW	08-Oct-1982
CMOD	ACTCHN added
CMOD	Invariant computation of LIMIT(11)*IPIT
CMOD	removed from loop, CHNSNS set up	AJW	10-Jun-1982
CMOD	EDGING removed as argument, bug fixes	AJW	05-Apr-1982
CMOD	LIMIT(11) used to suppress first encs
CMOD	/LKPARM/ added, CHLIM as arg deleted	AJW	02-Apr-1982
CMOD	DDVMAX removed, variables renamed and
CMOD	R=I/J type bugs fixed			AJW	26-Nov-1981
CMOD	Revised					WJJ	24-Nov-1981
CMOD	Tidied					AJW	27-Feb-1981
CMOD	Author					MCF
C
C To structure the points in /RSE/ into chains
C new version for coping with scratches on the film
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
C Parameters:
***	PARAMETER/PARAMS/
C
C Common blocks:
***	COMMON/LINKS/
***	COMMON/LKPARM/
***	COMMON/RSE/
***	COMMON/SCPARM/
C
C arguments:
	INTEGER   IU,IV		!  axes
C
C workspace:
	REAL	  BESTVG, BESTWG
	REAL	  FRAC
C
	INTEGER   IPNT,JPNT
	INTEGER   IDW,IDU,IDV
	INTEGER   IW,IWLAST
	INTEGER   ICHN,JCHN
	INTEGER   NELO,NEHI
	INTEGER   ICHLM1, ICHLM2, ICHLM3, ICHLM4
	INTEGER   IADVW, IADVW1, IADVW2
	INTEGER   IBESTC, IBESTD
	INTEGER   STLIM
C
	LOGICAL*1 EDGCON
C
C function:
	LOGICAL   NEBIT
C
C code:
	ICHLM1=CHLIM(1)*IPIT	! max U gap
	ICHLM2=CHLIM(2)*IPIT	! max V edge gap
	ICHLM3=CHLIM(3)*IPIT	! max W change
	ICHLM4=CHLIM(4)*IPIT	! max X (V gap for new chains)
	STLIM=LIMIT(11)*IPIT	! ignore encounters near start of scan
C
	RETRY=.TRUE.
C
20	IF (.NOT.NEBIT(NELO,NEHI)) RETURN
C
	DO 130 IPNT=NELO,NEHI		! for each point
C	  ignore encounters at start of scan
	  IF (ABS(ENCBUF(IU,IPNT)) .LT. STLIM) GOTO 130
	  IW=ENCBUF(W,IPNT).AND.NEGWID	! get this width
	  EDGCON=IW.GE.NEGNEG		! set flag for edge type
C	  ignore edges if not edging
	  IF (EDGCON.AND..NOT.EDGING) GOTO 130
C
	  IBESTC=0			! no best chain yet
	  ICHN=0
C
C See which chain it belongs to (if any)
C look at all chains
30	  CONTINUE
	    IF (ICHN.GE.MAXCHN) GOTO 80
	    ICHN=ICHN+1
	    IF (.NOT.ACTCHN(ICHN)) GOTO 30
	    JPNT=CHAIN(ICHN)
	    IF (JPNT.LE.0) GOTO 80
C
	    IWLAST=(ENCBUF(W,JPNT).AND.NEGWID)
	    IDW=IW-IWLAST
C ignore if mixed line and edge or different edges
	    IF ((EDGCON.OR.(IWLAST.GE.NEGNEG)).AND.
     &          (IDW.NE.0)) GOTO 30
C
	    IDU=ENCBUF(IU,IPNT)-ENCBUF(IU,JPNT)
	    IF (IDU.EQ.0) GOTO 30		! not along scan line
	    IF (ABS(IDU).GT.ICHLM1) GOTO 30	! too far along scan
C
C possible match - special case if one or two point chain
	    IF (LENGTH(ICHN).LE.2) GOTO 40
C if line check width gradient for longer chains
	    IF ((.NOT.EDGCON).AND.
     &          ABS(IDW-IDU*WIDGRD(ICHN)).GT.ICHLM3) GOTO 30
C check V gradient for longer chains
	    IDV=ENCBUF(IV,IPNT)-ENCBUF(IV,JPNT)
	    IF (ABS(IDV-IDU*VGRAD(ICHN)).GT.ICHLM2) GOTO 30
C Eureka ! it fits ! Update the gradients
	    FRAC=0.25
	    IF (LENGTH(ICHN).LT.5) FRAC=1.0/LENGTH(ICHN)
C trailing mean
	    VGRAD(ICHN)=VGRAD(ICHN)*(1-FRAC)+
     &                  (FLOAT(IDV)/FLOAT(IDU)-VGRAD(ICHN))*FRAC
	    IF (.NOT.EDGCON)
     &      WIDGRD(ICHN)=WIDGRD(ICHN)*(1-FRAC)+
     &                   (FLOAT(IDW)/FLOAT(IDU)-WIDGRD(ICHN))*FRAC
	    GOTO 120
C
C check point with a 1 or 2 point chain
40	    IDV=ENCBUF(IV,IPNT)-ENCBUF(IV,JPNT)
	    IF (EDGCON) GOTO 50
C if either edge of line mismatches, throw away
	      IADVW1=ABS(IDV+IDW/2)
	      IF (IADVW1.GT.ICHLM4) GOTO 30
	      IADVW2=ABS(IDV-IDW/2)
	      IF (IADVW2.GT.ICHLM4) GOTO 30
	      IADVW=ABS(IDU) +(IADVW1+IADVW2)/2	! 'closeness' value
	      GOTO 60
50	    CONTINUE
C check edge point
	      IF (ABS(IDV).GT.ICHLM4) GOTO 30
	      IADVW=ABS(IDU)+ABS(IDV)
60	    CONTINUE
C
C here with plausible connection to 1 or 2 point chain
C give up if not first and this is not so good as best
	    IF (IBESTC.EQ.0) GOTO 70
	      IF (IADVW.GT.IBESTD) GOTO 30
70	    CONTINUE
C save best connection to 1 or 2 point chain
	    IBESTC=ICHN				! chain
	    IBESTD=IADVW			! 'closeness' value
C go and check other chains
	    GOTO 30
C
C run out of chains, did we have a 1 or 2 point chain?
80	    IF (IBESTC.EQ.0) GOTO 90
	      ICHN=IBESTC		! recover saved chain
	      IF (LENGTH(ICHN).LE.1) GOTO 120 ! add point if 1 point
	      JPNT=NXT(CHAIN(ICHN))	! get point 1 of 2 point chain
	      IDU=ENCBUF(IU,IPNT)-ENCBUF(IU,JPNT) ! compute changes
	      IDV=ENCBUF(IV,IPNT)-ENCBUF(IV,JPNT)
	      IDW=ENCBUF( W,IPNT)-ENCBUF( W,JPNT)
	      VGRAD(ICHN)=FLOAT(IDV)/FLOAT(IDU)	! and its V gradient
	      WIDGRD(ICHN)=FLOAT(IDW)/FLOAT(IDU)! and its width gradient
	      GOTO 120		! add the point to the chain
90	    CONTINUE
C belonged to none so create a new chain
	    IF (ICHN .LT. MAXCHN) GOTO 110
C no room for more - remove smallest chain
	      ICHN=1
	      DO 100 JCHN=1,MAXCHN-1
	        IF (LENGTH(JCHN).LT.LENGTH(ICHN))ICHN=JCHN
100	      CONTINUE
110	    CONTINUE
C initialise new chain
	    CHAIN(ICHN)=0
	    LENGTH(ICHN)=0
	    IF (EDGCON) CHNSNS(ICHN)=(IW.NE.NEGNEG).XOR.(IU.EQ.1)
	    ACTCHN(ICHN)=.TRUE.
	    CLOCHN(ICHN)=.FALSE.
C
C add the point to a chain
120	    NXT(IPNT)=CHAIN(ICHN)
	    LENGTH(ICHN)=LENGTH(ICHN)+1
	    CHAIN(ICHN)=IPNT
C
C point dealt with
130	CONTINUE	! look at the others
	GOTO 20		! for another batch
C
	END
