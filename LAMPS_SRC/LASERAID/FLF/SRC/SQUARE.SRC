C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1982-01-05 18:32:50.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE SQUARE(MP,NMP,SQUTOL,TRKWID,CLOSED)
C
***	MODULE	SQUARE
***	IDENT	17MR81
C
**	IF VAX
	  IMPLICIT NONE
**	ENDC
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C
C	Variables initialised properly		 DM	17-Mar-1981
C	Tidied					AJW	 6-Mar-1981
C	Created					PGH	 9-Aug-1978
C
C Routine to square buildings for OS trial
C
***	PARAMETER/PARAMS/
C
C
	INTEGER   NMP
	REAL      MP(2,NMP)	! list of master points
	REAL      SQUTOL	! angular tolerance for par & perp
	REAL      TRKWID	! track width
	LOGICAL*1 CLOSED
C
C w/s
	INTEGER   ISL(MAXMP)
	INTEGER   NSQ
	INTEGER   I
	INTEGER   LONGST
	INTEGER   LASTSL
	INTEGER   LSTMAJ
	INTEGER   NTHETA
	INTEGER   NPHI
	INTEGER   ISLOPE
	INTEGER   NSEG
	INTEGER   NS
	REAL      ANG(2)
	REAL      P(2,MAXMP)
	REAL      ATHETA,APHI
	REAL      THELEN,PHILEN
	REAL      DX,DY
	REAL      D,DMAX,DOLD
	REAL      DXL,DYL
	REAL      THETA,PHI
	REAL      ALPHA
	REAL      PI,PIBY2
	REAL      XS,YS
	REAL      DS
	REAL      RADTOL
	REAL      R1,R2
	REAL      SINTH1,COSTH1
	REAL      SINTH2,COSTH2
	REAL      A12
C
	DATA PI/3.141592653/
C
C set up
	RADTOL=SQUTOL*PI/180.0
	PIBY2=PI/2.0
C
C find longest segment
	DMAX=-1.0
	DO 10 I=1,NMP-1
	  DX=MP(X,I+1)-MP(X,I)
	  DY=MP(Y,I+1)-MP(Y,I)
	  D=DX*DX+DY*DY
	  IF (D.LE.DMAX) GOTO 10
	  DMAX=D
	  LONGST=I
	  DXL=DX
	  DYL=DY
10	CONTINUE
C
C remember orientation of major segment
	THETA=ATAN2(DYL,DXL)
	IF (THETA.LT.0.0) THETA = THETA + PI
	PHI=THETA+PIBY2
C
C sort into random, perpendicular and parallel (0,1,2)
	LASTSL = -1
	LSTMAJ = -1
	ATHETA = 0.0
	APHI   = 0.0
	NTHETA = 0
	NPHI   = 0
	NS = 0
	NSEG = 0
	DS = 0.0
	XS = 0.0
	YS = 0.0
	THELEN = 0.0
	PHILEN = 0.0
C
	DO 70 I=1,NMP-1
	  DX=MP(X,I+1)-MP(X,I)
	  DY=MP(Y,I+1)-MP(Y,I)
	  D=SQRT(DX*DX+DY*DY)
	  ALPHA=ATAN2(DY,DX)
	  IF (ALPHA.LT.0.0) ALPHA = ALPHA + PI
	  ISLOPE=0
C
C is it a 'theta'?
	  IF (ABS(ALPHA-THETA).GE.RADTOL) GOTO 20
C
C yes - mark it as such and add to mean angle
	  ISLOPE=1
	  NTHETA=NTHETA+1
	  ATHETA=ATHETA+ALPHA*D
	  THELEN=THELEN+D
	  GOTO 30
C
C not a 'theta' - is it a 'phi'?
20	  IF (ALPHA.LT.THETA) ALPHA = ALPHA+PI
	  IF (ABS(ALPHA-PHI).GE.RADTOL) GOTO 30
C
C it's a 'phi' - mark it and add to mean of perps
	  ISLOPE = 2
	  NPHI=NPHI+1
	  APHI=APHI+ALPHA*D
	  PHILEN=PHILEN+D
C
C add to mean for segment
30	  XS=XS+MP(X,I)
	  YS=YS+MP(Y,I)
	  DS=DS+D
	  NSEG=NSEG+1
	  IF (ISLOPE.EQ.LASTSL) GOTO 60  ! same slope
	  IF (I.EQ.1) GOTO 40  ! first segment
	  NS=NS+1
	  P(X,NS)=XS/NSEG  ! mean
	  P(Y,NS)=YS/NSEG
	  ISL(NS)=LASTSL
40	  XS=MP(X,I)
	  YS=MP(Y,I)
	  DOLD=DS
	  DS=D
	  NSEG=1
C
C now check for spurious "other"s
	  IF (ISLOPE.EQ.0) GOTO 60  ! change to other
	  IF (LASTSL.NE.0) GOTO 60  ! not change from other
	  IF (LSTMAJ.NE.ISLOPE) GOTO 50  ! other at corner or start
C
C we now have "perp - other - perp" or "par - other - par"
	  ISL(NS)=3-ISLOPE  ! make it the opposite major
	  IF (DOLD.GT.TRKWID) GOTO 60  ! large one so keep it
	  XS=XS+(P(X,NS-1)+P(X,NS))/2.0
	  YS=YS+(P(Y,NS-1)+P(Y,NS))/2.0
	  NSEG=3
	  NS=NS-2
	  GOTO 60
C "other" at corner - remove it
50	  NS=NS-1
	  LASTSL=LSTMAJ
	  GOTO 60
C remember what's what
60	  LASTSL=ISLOPE
	  IF (ISLOPE.NE.0) LSTMAJ = ISLOPE
CDD	  CALL WRITEF('I=%N,ISLOPE=%N,NS=%N,ISL(NS)=%N',
CDD     &                   I,     ISLOPE, NS,       ISL(NS))
C
70	   CONTINUE
C
C deal with end conditions
	IF (LASTSL.NE.ISL(1)) GOTO 80
C
C here with start same as end
	P(X,1)=(P(X,1)+XS/NSEG)/2.0
	P(Y,1)=(P(Y,1)+YS/NSEG)/2.0
	IF (ISLOPE.NE.0) GOTO 100 ! a major
	ISL(1)=3-LSTMAJ ! force opposite major
	GOTO 100
C
C preserve end
80	NS=NS+1
	P(X,NS)=XS/NSEG
	P(Y,NS)=YS/NSEG
	ISL(NS)=ISLOPE
	DOLD=DS
	IF (ISLOPE.NE.0) GOTO 100  ! major
	IF (ISL(1).EQ.LSTMAJ) GOTO 90  ! spurious other
	NS=NS-1
	GOTO 100  ! ignore it
90	ISL(NS)=3-LSTMAJ  ! force to opposite major
	IF (DOLD.GT.TRKWID) GOTO 100  ! large so keep it
C
C here with short ending other
	P(X,1)=(P(X,1)+P(X,NS-1)+P(X,NS))/3.0
	P(Y,1)=(P(Y,1)+P(Y,NS-1)+P(Y,NS))/3.0
	NS=NS-2
C
C now intersect all segments to find verteces
100	ANG(2)=PHI
	IF (NPHI.NE.0) ANG(2)=APHI/PHILEN  ! use mean if possible
	ANG(1)=ATHETA/THELEN
	ANG(1)=ANG(1)+PIBY2
	ANG(2)=ANG(2)+PIBY2
	SINTH2=SIN(ANG(ISL(NS)))
	COSTH2=COS(ANG(ISL(NS)))
	R2=P(X,NS)*COSTH2+P(Y,NS)*SINTH2
	DO 110 I=1,NS
	  IF (ISL(I).EQ.0) CALL WRITEF('SEG %N ISL=%N',I,ISL(I))
	  COSTH1=COSTH2
	  SINTH1=SINTH2
	  COSTH2=COS(ANG(ISL(I)))
	  SINTH2=SIN(ANG(ISL(I)))
	  R1=R2
	  R2=P(X,I)*COSTH2+P(Y,I)*SINTH2
C find intersect
	  A12=COSTH1*SINTH2-COSTH2*SINTH1
	  IF (ABS(A12).LT.0.5) CALL WRITEF('A12=%F',A12)
	  MP(X,I)=(R1*SINTH2-R2*SINTH1)/A12
	  MP(Y,I)=(R2*COSTH1-R1*COSTH2)/A12
110	CONTINUE
C add closing point
	NMP=NS+1
	MP(X,NMP)=MP(X,1)
	MP(Y,NMP)=MP(Y,1)
C
	RETURN
	END
