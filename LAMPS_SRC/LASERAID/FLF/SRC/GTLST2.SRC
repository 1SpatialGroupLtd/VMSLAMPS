C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-03-21 11:11:26.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE GTLST2(ST,D1,D2,NLST,LSTPNT,NXTPNT,MPNEXT)
C
***	MODULE	GTLST2
***	IDENT	21MR86
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	Optimised; tidied			 DM	20-Mar-1986
CMOD	Prevent integer overflow in NXTPNT	WJJ	17-Jan-1983
CMOD	Tidied					AJW	22-Jan-1981
C	Created					MCF	31-May-1977
C
C To get two points for matching.
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
***	PARAMETER/PARAMS/
C
C arguments:
	REAL	ST(2)		! start of scan vector
	REAL	D1		! LSTPNT must be nearer ST than this
	REAL	D2		! points must be more separate than this
	INTEGER NLST		! return code:-
C				  1 - point too far away from ST
C				  2 - no MPs yet
C				  3 - points not separate
C				  4 - OK
	INTEGER LSTPNT(2)	! the last point
	INTEGER NXTPNT(2)	! the next to last
	INTEGER MPNEXT		! the MP corresponding to NXTPNT
C
***	COMMON/BLG/
***	COMMON/MPEP/
C
C workspace:
	INTEGER*4 N
	REAL	  DD,DR,DX,DY,PX,PY
C
C ......................................................................
C
	NLST=2
	N=NMP(1)
	IF (N.LE.0) GO TO 50		! any master points ?
	PX=MP1(X,N)
	PY=MP1(Y,N)
	IF (INDEX(1).LE.0) GO TO 10	! any backlogged points ?
	PX=PX + XBLG(1,INDEX(1))
	PY=PY + YBLG(1,INDEX(1))
10	NLST=1
	DX=PX - ST(X)
	DY=PY - ST(Y)
	DD=MIN(D1,15000.0)**2		! prevent overflow later
	IF ((DX*DX + DY*DY).GT.DD) GO TO 50
	NLST=3				! got one point now
	LSTPNT(X)=DX
	LSTPNT(Y)=DY
20	DX=MP1(X,N) - PX		! loop, looking for another
	   DY=MP1(Y,N) - PY
	   DR=DX*DX + DY*DY
	   IF (DR.GE.D2*D2) GO TO 30	! far enough apart ?
	   N=N - 1			! no - get the next one back
	   IF (N.EQ.0) GO TO 50		! (if any)
	GO TO 20
30	IF (DR.LE.DD) GO TO 40		! points too far apart ?
	DR=SQRT(DD/DR)			! yes - move second one
	DX=DX*DR
	DY=DY*DR
40	NLST=4				! got both points
	MPNEXT=N
	NXTPNT(X)=LSTPNT(X) + DX
	NXTPNT(Y)=LSTPNT(Y) + DY
C
50	RETURN
	END
