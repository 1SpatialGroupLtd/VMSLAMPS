	LOGICAL*4 FUNCTION JSSRCH(JX,JY,JSARM,JSANG,JSINDX,JSCTXT)
C
***	MODULE	JSSRCH
***	IDENT	10JN86
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	JPOSTL and JANGTL replace LIM 17 and 18	 DM	10-Jun-1986
CMOD	Search criterion now same as in ADDJUN	 DM	16-May-1986
CMOD	Optimised a bit				 DM	29-Apr-1986
CMOD	JSANG negated (not zeroed) if arm used	 DM	08-Apr-1986
CMOD	MAPTOL transformed properly; tidied;
CMOD	more information returned		 DM	10-Sep-1985
CMOD	MAPTOL not squared			AJW	27-APR-1983
CMOD	LIMIT(17) in digitiser space		AJW	05-Nov-1982
CMOD	Map space stuff added,
CMOD	and searches backwards			AJW	03-Nov-1982
CMOD	MPJUN replaced by MPTYPE		 DM	28-Oct-1982
CMOD	Use LIM 17 for jn posn tolerance and
CMOD	    LIM 18 for jn arm angle tolerance	WJJ	06-Oct-1982
CMOD	Created					WJJ	04-Oct-1982
C
C Finds a junction in the in-core list, or in the current feature list,
C or the master point list.
C Returns .TRUE. if one is found.
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
C parameters:
***	PARAMETER/PARAMS/
C
C arguments:
	REAL	  JX,JY		! position to look for junction
	INTEGER	  JSARM		! returned number of arms
	INTEGER	  JSANG(MAXBRA)	! returned angles of free arms
	INTEGER	  JSINDX	! index of junction - relates to ...
	INTEGER	  JSCTXT	! context: -1 => found in in-core list
C				!	    0 => found in flushed buffer
C				!	   +1 => found in MP list
C
C common blocks:
***	COMMON/DIGC/
***	COMMON/JCRCOM/
***	COMMON/JNCLST/
***	COMMON/MPEP/
C
C workspace:	
	INTEGER   II,JJ,KK	! do loops, etc.
	REAL      JXMAP,JYMAP	! JX,JY in map space
	REAL      MAPTOL	! JPOSTL in map space
	REAL	  TOL(4)	! temp vars used to find MAPTOL
C
C ......................................................................
C
	JSSRCH=.FALSE.				! junction not found yet
C
C get posn of junction in map space
	JXMAP=JX
	JYMAP=JY
	CALL TRXUSE(JXMAP,JYMAP,FCOEFF)
C
C and tolerance in map space
	TOL(1)=JPOSTL
	TOL(2)=JPOSTL
	CALL TRXUSE(TOL(1),TOL(2),FCOEFF)
	TOL(3)=0.0
	TOL(4)=0.0
	CALL TRXUSE(TOL(3),TOL(4),FCOEFF)
	MAPTOL=(TOL(1) - TOL(3))**2 + (TOL(2) - TOL(4))**2
C
C first search the in-core list from previous features
	IF (JCRNUM.LE.0) GO TO 40		! j if no incomplete jns
	DO 10 II=1,JCRNUM
	   IF ((JXMAP-JCRPOS(1,II))**2 + (JYMAP-JCRPOS(2,II))**2
     &	       .LE.MAPTOL) GO TO 20
10	CONTINUE
	GO TO 40
C
C here with a jn found
20	JJ=II
	JSSRCH=.TRUE.				! say so
	JSARM=JCRARM(JJ)			! return no of arms
	DO 30 II=1,JSARM
	   JSANG(II)=JCRANG(II,JJ)		! copy arm list
30	CONTINUE
	JSINDX=JJ				! return index
	JSCTXT=-1				! return context
C
C now scan flushed buffer for this feature
40	IF (JLNJP.LE.0) GO TO 100		! j if no flushed jnctns
	DO 50 II=1,JLNJP
	   IF ((JXMAP-JLXPOS(II))**2 + (JYMAP-JLYPOS(II))**2
     &	       .LE.MAPTOL) GO TO 60
50	CONTINUE
	GO TO 100
C
C here we have found a jn in the flushed list
60	JJ=II
	IF (JSSRCH) GO TO 80			! j if already found it
	JSSRCH=.TRUE.
	JSARM=JLARMS(JJ)			! if not copy no of arms
	DO 70 II=1,JSARM
	   JSANG(II)=JLANG(II,JJ)		! and the angles
70	CONTINUE
	JSINDX=JJ				! return index
	JSCTXT=0				! return context
C
C eliminate the incoming and outgoing arms
	IF (JLIARM(JJ).GT.0) JSANG(JLIARM(JJ))=-ABS(JSANG(JLIARM(JJ)))
	IF (JLOARM(JJ).GT.0) JSANG(JLOARM(JJ))=-ABS(JSANG(JLOARM(JJ)))
	GO TO 100
C
C here we have to eliminate measured arms from previously found jn
80	IF (JLIARM(JJ).LE.0) GO TO 90		! j if no incoming arm
C
C find arm-match
	CALL JSSANG(JLANG(JLIARM(JJ),JJ),JSARM,JSANG,II,KK)
	IF (II.LE.0) GO TO 160			! no free arms, give up
	IF (KK.LT.JANGTL) JSANG(II)=-JSANG(II)  ! lose arm if near
C
C and the outgoing arm.
90	IF (JLOARM(JJ).LE.0) GO TO 100		! j if no outgoing arm
C
C find arm-match
	CALL JSSANG(JLANG(JLOARM(JJ),JJ),JSARM,JSANG,II,KK)
	IF (II.LE.0) GO TO 160			! no free arms
	IF (KK.LT.JANGTL) JSANG(II)=-JSANG(II)
C
C now check the master point list
100	IF (NMP(1).LE.0) GO TO 160		! j if no master points
	TOL(1)=2.0*(JPOSTL**2)			! toler**2 in dig space
	DO 110 II=1,NMP(1)
	   IF (MPTYPE(II).LE.0) GO TO 110	! MP not a jn ?
	   IF ((JX-MP1(1,II))**2 + (JY-MP1(2,II))**2
     &	       .LE.TOL(1)) GO TO 120
110	CONTINUE
	GO TO 160
C
C here we have found a jn in the master point list
120	JJ=II
	IF (JSSRCH) GO TO 140			! j if already found it
	JSSRCH=.TRUE.
	JSARM=MPTYPE(JJ)			! if not copy no of arms
	DO 130 II=1,JSARM
	   JSANG(II)=MPJANG(II,JJ)		! and the angles
130	CONTINUE
	JSINDX=JJ				! return index
	JSCTXT=1				! return context
C
C eliminate the incoming and outgoing arms
	IF (MPIARM(JJ).GT.0) JSANG(MPIARM(JJ))=-ABS(JSANG(MPIARM(JJ)))
	IF (MPOARM(JJ).GT.0) JSANG(MPOARM(JJ))=-ABS(JSANG(MPOARM(JJ)))
	GO TO 160
C
C here we have to eliminate measured arms from previously found jn
140	IF (MPIARM(JJ).LE.0) GO TO 150		! j if no incoming arm
	CALL JSSANG(MPJANG(MPIARM(JJ),JJ),JSARM,JSANG,II,KK)
	IF (II.LE.0) GO TO 160			! no free arms, give up
	IF (KK.LT.JANGTL) JSANG(II)=-JSANG(II)  ! lose arm if near 
C
C and the outgoing arm.
150	IF (MPOARM(JJ).LE.0) GO TO 160		! j if no outgoing arm
	CALL JSSANG(MPJANG(MPOARM(JJ),JJ),JSARM,JSANG,II,KK)
	IF (II.LE.0) GO TO 160			! no free arms
	IF (KK.LT.JANGTL) JSANG(II)=-JSANG(II)
C
160	RETURN
	END
C
C********************************************************************
C
	SUBROUTINE JSSANG(JINGLE,JSARM,JSANG,JRARM,JRANG)
C
***	MODULE	JSSANG
***	IDENT	29AP86
C
CMOD	Optimised; more tidies			 DM	29-Apr-1986
CMOD	Copyright notice; tidied		 DM	10-Sep-1985
CMOD	Created					WJJ	04-Oct-1982
C
C Finds the nearest angle to JINGLE in array JSANG.
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
C parameters:
***	PARAMETER/PARAMS/
C
C arguments:
	INTEGER   JINGLE	! angle to be sought (degrees)
	INTEGER   JSARM		! size of JSANG
	INTEGER   JSANG(MAXBRA)	! array of angles (deg) - ignore if <=0
	INTEGER   JRARM		! index of best ang in JSANG, 0 if none
	INTEGER   JRANG		! angle difference of JRARM from JINGLE
C
C workspace:
	INTEGER   JJ
	INTEGER*4 II
C
C ......................................................................
C
	JRARM=0			! no arms found yet
	JRANG=1000		! preset angle difference to massive
C
C check the angle array
	DO 10 II=1,JSARM
	   IF (JSANG(II).LE.0) GO TO 10	! zero angles are to be ignored
	   JJ=MIN(ABS(JINGLE-JSANG(II)),360-ABS(JINGLE-JSANG(II)))
	   IF (JJ.GE.JRANG) GO TO 10	! j if arm is further than best
	   JRARM=II			! store best so far
	   JRANG=JJ			! and its angle
10	CONTINUE
	RETURN
	END
C
C********************************************************************
C
	SUBROUTINE JSSCON(CONGOT,QUAL,CON1,CON2,CON3,CON4)
C
***	MODULE	JSSCON
***	IDENT	29AP86
C
CMOD	More tidies				 DM	29-Apr-1986
CMOD	Error message standardised; tidied	 DM	10-Sep-1985
CMOD	Created					WJJ	04-Oct-1982
C
C Makes a connection with quality QUAL. The number of connections CONGOT
C is incremented, and QUAL is decremented.
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
C parameters:
***	PARAMETER/PARAMS/
C
C arguments:
	INTEGER   CONGOT		! how many connections so far
	REAL	  QUAL			! quality value to be assigned
	INTEGER   CON1,CON2,CON3,CON4	! connection values
C
C common block:
***	COMMON/LKFOLL/
C
C ......................................................................
C
	IF (CONGOT.LT.MAXCON) GO TO 10
	CALL WRITEF('JSSCON:%C MAXCON too small%C',7,7)
	GO TO 20
10	CONGOT=CONGOT + 1
	QUALTY(CONGOT)=QUAL
	QUAL=QUAL - 1.0
	CONNCT(1,CONGOT)=CON1
	CONNCT(2,CONGOT)=CON2
	CONNCT(3,CONGOT)=CON3
	CONNCT(4,CONGOT)=CON4
20	RETURN
	END
