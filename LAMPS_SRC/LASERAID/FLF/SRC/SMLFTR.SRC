C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-06-11 11:31:26.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION SMLFTR(ST,UDIR,VDIR)
C
***	MODULE	SMLFTR
***	IDENT	11JN86
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	Tidied					 DM	11-Jun-1986
CMOD	Tidies and comments			AJW	12-May-1983
CMOD	New BUNCH				 DM	26-Oct-1982
CMOD	BUNCH given 3rd argument		 DM	04-Oct-1982
CMOD	FLUSH given an argument			 DM	28-Sep-1982
CMOD	Tidied					AJW	01-Jun-1981
CMOD	Created					MCF	22-May-1978
C
C Looks at the information provided by the fork	data & decides if we can
C detect a closed feature in it.
C The points on the feature are put into the MP list.
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
C parameters:
***	PARAMETER/PARAMS/
C
C arguments:
	REAL      ST(2)		! start of scan vector
	INTEGER   UDIR,VDIR	! scan direction
C
C common blocks:
***	COMMON/BLG/
***	COMMON/FORKS/
***	COMMON/LINKS/
***	COMMON/MPEP/
***	COMMON/RSE/
C
C workspace:
	INTEGER   BRINCH	! branch going In  to a fork
	INTEGER   BRONCH	! branch going Out of a fork
	INTEGER   ENDS(2)	! ends of branch for o/p or pts at stem
	INTEGER   FSTFRK	! 1st fork
	INTEGER   III,JJJ,KKK	! temps
	INTEGER   NSTEM(0:2)	! point in stem
	INTEGER   PNT(2)	! point being assembled
	INTEGER   STEM		! & its stem chain
	INTEGER   THSFRK	! fork being looked at
	INTEGER   TYP		! its type
	INTEGER   WAYIN		! how we entered the fork
	LOGICAL*1 ANOTHR	! had more than one fork
C
C ......................................................................
C
C try all forks as a starting fork.
	DO 70 FSTFRK=1,MAXFRK
	  NMP(1)=0
	  INDEX(1)=0				! clear the MP list
	  THSFRK=FSTFRK
	  ANOTHR=.FALSE.
	  WAYIN=2				! arbitary choice
	  IF (FORK(WAYIN,THSFRK).EQ.0) GO TO 70	! chain missing
C
C here for another fork in the feature.
10	  TYP=FRKTYP(THSFRK)
	    IF (TYP.NE.1.AND.TYP.NE.2) GO TO 70		! strange fork
	    STEM=FORK(1,THSFRK)
	    IF (STEM.EQ.0) GO TO 70			! stem missing
	    BRONCH=FORK(5-WAYIN,THSFRK)
	    IF (BRONCH.EQ.0) GO TO 70			! branch missing
	    IF (ENDFRK(TYP,STEM).NE.0) GO TO 70		! stem's joined
	    IF (ANOTHR.AND.(THSFRK.EQ.FSTFRK)) GO TO 80	! feature closed
C
C create two points up the stem of a fork.
C the points have the same U co-ordinate (half way along).
	    III=NODE(FIRST(STEM))
	    JJJ=NODE( LAST(STEM))
C
C get the average width.
	    NSTEM(W)=((ENCBUF(W,III).AND.NEGWID) +
     &                (ENCBUF(W,JJJ).AND.NEGWID))/2
C
C and the mid point.
	    NSTEM(UDIR)=(ENCBUF(UDIR,III) + ENCBUF(UDIR,JJJ))/2
	    NSTEM(VDIR)=(ENCBUF(VDIR,III) + ENCBUF(VDIR,JJJ))/2
C
	    BRINCH=FORK(WAYIN,THSFRK)
	    IF (TYP.NE.1) GO TO 20
	    ENDS(1)=NODE(FIRST(BRINCH))		! divergence
	    ENDS(2)=NODE(FIRST(BRONCH))
	    GO TO 30
20	    ENDS(1)=NODE(LAST(BRINCH))		! convergence
	    ENDS(2)=NODE(LAST(BRONCH))
30	    JJJ=ISIGN(1,ENCBUF(VDIR,ENDS(2))-ENCBUF(VDIR,ENDS(1)))
	    PNT(UDIR)=NSTEM(UDIR)
	    DO 40 III=1,2
	      KKK=NSTEM(W) - (ENCBUF(W,ENDS(III)).AND.NEGWID)
	      PNT(VDIR)=NSTEM(VDIR) + (III*2-3)*JJJ*MAX(0,KKK)/2
	      CALL BUNCH(ST(X)+PNT(X),ST(Y)+PNT(Y),0)
	      IF (NMP(1).GE.MPLIM) GO TO 70	! too big
40	    CONTINUE
C
	    THSFRK=ENDFRK(3-TYP,BRONCH)
	    IF (THSFRK.EQ.0) GO TO 70		! branch's not joined
	    WAYIN=0
	    DO 50 III=2,3
	      IF (FORK(III,THSFRK).EQ.BRONCH) WAYIN=III
50	    CONTINUE
	    IF (WAYIN.EQ.0) GO TO 70		! we're not joined to it
	    ENDS(  TYP)=FIRST(BRONCH)
	    ENDS(3-TYP)= LAST(BRONCH)
	    DO 60 JJJ=ENDS(1),ENDS(2),3-TYP-TYP
	      III=NODE(JJJ)
	      CALL BUNCH(ST(X)+ENCBUF(X,III),ST(Y)+ENCBUF(Y,III),0)
	      IF (NMP(1).GE.MPLIM) GO TO 70	! too big
60	    CONTINUE
	    ANOTHR=.TRUE.
	  GO TO 10
70	CONTINUE		! end of do loops for all starting forks
C
C no feature found.
	SMLFTR=.FALSE.
	NMP(1)=0
	INDEX(1)=0
	GO TO 90
C
C success.
80	SMLFTR=.TRUE.
	CALL BUNCH(MP1(X,1),MP1(Y,1),1)		! close it
90	RETURN
	END
