	SUBROUTINE ADDJUN
C
***	MODULE	ADDJUN
***	IDENT	10JN86
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	JPOSTL and JANGTL replace LIM 17 and 18	 DM	10-Jun-1986
CMOD	Only call CSRD if HADLDI		 DM	30-May-1986
CMOD	Improve handling of manual junctions	 DM	07-May-1986
CMOD	Negative (not zero) JCRANG if arm used	 DM	08-Apr-1986
CMOD	Tidy structure if JLNJP=0; optimised	 DM	07-Apr-1986
CMOD	Copyright notice added; tidied		 DM	07-Mar-1986
CMOD	Take pos rel to 0.0			AJW	13-Feb-1984
CMOD	Use TRXUSE rather than cheap and nasty
CMOD	transform				AJW	10-Feb-1984
CMOD	2/147 - if X or Y axes are reversed,
CMOD	eval of HITDST is wrong - use Pythag	AJW	22-Nov-1983
CMOD	/COEFFS/ removed			AJW	07-Apr-1983
CMOD	LIMIT(17) in digitiser space		AJW	05-Nov-1982
CMOD	JLST1x, 2x the right way round		AJW	05-Nov-1982
CMOD	FCOEFF,BCOEFF in /DIGC/			AJW	02-Nov-1982
CMOD	Map space stuff				AJW	21-Oct-1982
CMOD	Only one sector				AJW	20-Oct-1982
CMOD	Major Rewrite				AJW	20-Sep-1982
CMOD	Flashes cursor				AJW	18-Aug-1982
CMOD	JCRANG set up				AJW	10-Aug-1982
CMOD	Tol to 30				AJW	04-Aug-1982
CMOD	In core junctions			AJW	03-Aug-1982
CMOD	Better names, TOL from 200 to 20	AJW	21-Jul-1982
CMOD	Rehashed				WJJ/DM	06-Feb-1981
CMOD	Sees if junctions already exist		AJW	31-Jan-1981
CMOD	Created					AJW	19-Jan-1980
C
C Goes through /JNCLST/ after EF, creating junctions and filling in JPs.
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
C parameters:
***	PARAMETER/PARAMS/
C
C common blocks:
***	COMMON/DIGC/
***	COMMON/IFFHAN/
***	COMMON/IFFJUN/
***	COMMON/JCRCOM/
***	COMMON/JNCLST/
***	COMMON/LKPARM/
***	COMMON/MASTER/
C
C workspace:
	INTEGER   ARM1,ARM2
	INTEGER   HITJNC	! number in /JCRCOM/ of hit junction
	INTEGER   IECODE,IELEN
	INTEGER   III,JJJ,KKK,LLL,MMM,NNN	! do loops, temps
	INTEGER   JPOS		! position of junction in JB
	INTEGER   THSARM	! counts 1 => TOTARM
	INTEGER   THSJNC	! loops through all jncs for feature
	INTEGER   TOTARM	! number of arms for this junction
	INTEGER*4 LHERE		! position of JB
	INTEGER*4 LPOSA		! pos of arm read from junction
	REAL      CURSAV(2)	! save cursor position
	REAL      HITDST	! distance to junctions being matched
	REAL      TEMP1,TEMP2	! temporary variables
	REAL      TEMP3,TEMP4
	REAL	  TOL		! search tolerance
C
C ......................................................................
C
	IF (JLNJP.EQ.0) GO TO 260
C
C ... save the cursor position.
	IF (HADLDI) CALL CSRD(CURSAV(X),CURSAV(Y))
C
C ... set up the search tolerance.
	TEMP1=JPOSTL
	TEMP2=JPOSTL
	CALL TRXUSE(TEMP1,TEMP2,FCOEFF)
	TEMP3=0.0
	TEMP4=0.0
	CALL TRXUSE(TEMP3,TEMP4,FCOEFF)
	TOL=(TEMP1-TEMP3)**2 + (TEMP2-TEMP4)**2
C
	DO 250 THSJNC=1,JLNJP	! for each junction in the last feature
C
C ... flash the cursor at the junction posn to keep the oper happy.
	   CALL DISMOD(1)
	   TEMP1=JLXPOS(THSJNC)
	   TEMP2=JLYPOS(THSJNC)
	   CALL TRXUSE(TEMP1,TEMP2,BCOEFF)
	   CALL CSWT(TEMP1,TEMP2)
	   CALL CURSOR
	   CALL REFRSH
C
C ... is there already a junction nearby ?
	   HITJNC=0
	   HITDST=TOL
C
C ... look at all buffered junctions and get closest within tolerance.
	   DO 10 JJJ=1,JCRNUM
	      IF (JCRLPS(JJJ).EQ.0) GO TO 10	! deleted ?
	      TEMP1=(JCRPOS(X,JJJ)-JLXPOS(THSJNC))**2 +
     &              (JCRPOS(Y,JJJ)-JLYPOS(THSJNC))**2
	      IF (TEMP1.GT.HITDST) GO TO 10
	      HITDST=TEMP1
	      HITJNC=JJJ
10	   CONTINUE
C
C ... did we find an existing junction ?
	   IF (HITJNC.EQ.0) GO TO 140
C
C ... yes - force strings to end at the old junction ...
	   IF (JLIARM(THSJNC).LE.0) GO TO 20	! no incoming arm
	   CALL IFFPKE(IECODE,IELEN,JLST1P(THSJNC))
	   CALL EIHWR(JCRPOS(X,HITJNC),2,4*JLST1O(THSJNC)-3)
20	   IF (JLOARM(THSJNC).LE.0) GO TO 30	! or outgoing arm
	   CALL IFFPKE(IECODE,IELEN,JLST2P(THSJNC))
	   CALL EIHWR(JCRPOS(X,HITJNC),2,4*JLST2O(THSJNC)-3)
C
C ... and the new junction posn to that of the old junction.
30	   JLXPOS(THSJNC)=JCRPOS(X,HITJNC)
	   JLYPOS(THSJNC)=JCRPOS(Y,HITJNC)
C
C ... check that the arms match.
	   IF (JCRARM(HITJNC).EQ.JLARMS(THSJNC)) GO TO 50
	   CALL WRITEF(
     &	   'Warning - remeasured junction has different number of arms')
C
C ... if original had more arms, we assume that to be correct.
C ... if not we remove the old junction and create a new one.
	   IF (JCRARM(HITJNC).GT.JLARMS(THSJNC)) GO TO 40
	   CALL WRITEF(
     &	   '        - new junction created%C',7)
	   JCRLPS(HITJNC)=0		! remove from in-core list
	   GO TO 140			! create new junction
C
40	   CALL WRITEF(
     &	   '        - original number (%N) assumed to be correct%C',
     &				JCRARM(HITJNC),7)
C
C ... get 1 or 2 arms from the found jnc that match arms to be added.
50	   ARM1=0
	   ARM2=0
	   JJJ=361			! min angle for ARM1
	   KKK=361			! and ARM2
	   LLL=0	! saves next best ARM2 in case best ARM2=ARM1
	   MMM=0			! counts number of free arms
	   DO 70 THSARM=1,JCRARM(HITJNC)
	      III=JCRANG(THSARM,HITJNC)
	      IF (III.LE.0) GO TO 70	! already used
	      MMM=MMM + 1
	      IF (JLIARM(THSJNC).LE.0) GO TO 60	! not needed
	      NNN=ABS(III-JLANG(JLIARM(THSJNC),THSJNC))
	      NNN=MIN(NNN,360-NNN)
	      IF (NNN.GT.JJJ) GO TO 60
	      JJJ=NNN
	      ARM1=THSARM
60	      IF (JLOARM(THSJNC).LE.0) GO TO 70	! not needed
	      NNN=ABS(III-JLANG(JLOARM(THSJNC),THSJNC))
	      NNN=MIN(NNN,360-NNN)
	      IF (NNN.GT.KKK) GO TO 70
	      KKK=NNN
	      LLL=ARM2
	      ARM2=THSARM
70	   CONTINUE
C
C ... check that we have appropriate arms.
	   IF ((JLIARM(THSJNC).GT.0).AND.(ARM1.EQ.0)) GO TO 80
	   IF ((JLOARM(THSJNC).LE.0).OR.(ARM2.NE.0)) GO TO 90
80	   CALL WRITEF(
     &	     'Warning - remeasured junction has insufficient free arms')
	   CALL WRITEF(
     &	     '        - new junction created%C',7)
	   GO TO 140
90	   IF (ARM1.NE.ARM2) GO TO 120		! are arms distinct ?
	   IF (JCRANG(1,HITJNC).NE.-361) GO TO 110
C
C ... if manual junction, snap the arm(s) but don't fill them in.
	   III=0
	   MMM=3				! don't delete junction
	   IF (JLST1P(THSJNC).EQ.0) GO TO 100	! no incoming arm
	   III=III + 1
	   CALL IFFPKE(IECODE,IELEN,JLST1P(THSJNC))
	   CALL EIHWR(JCRPOS(X,HITJNC),2,4*JLST1O(THSJNC)-3)
100	   IF (JLST2P(THSJNC).EQ.0) GO TO 130	! no outgoing arm
	   III=III + 1
	   CALL IFFPKE(IECODE,IELEN,JLST2P(THSJNC))
	   CALL EIHWR(JCRPOS(X,HITJNC),2,4*JLST2O(THSJNC)-3)
	   GO TO 130
C
110	   IF (WIZARD) CALL WRITEF(
     &	     'ADDJUN: Matched ARM1=ARM2 (%N)',ARM2)
	   IF (LLL.EQ.0) GO TO 80
	   ARM2=LLL				! use second best
C
C ... say how many arms we have added.
120	   III=0
	   IF (ARM1.GT.0) III=III + 1
	   IF (ARM2.GT.0) III=III + 1
130	   IF (TMPCHK) CALL WRITEF(' %N arm%m added',III)
C
C ... position ourselves to the found junction.
	   CALL IFJPKJ(TEMP1,TEMP2,JJJ,JCRLPS(HITJNC),JCRIPS(HITJNC))
C
C ... if no more free arms, remove junction from in-core list.
	   IF (MMM-III.LE.0) JCRLPS(HITJNC)=0
	   GO TO 220
C
C ... no old junction found - create a new junction.
C ... get the sector number.
140	   JJJ=1			! only use one sector at present
CCC	   CALL IFJSEC(JLXPOS(THSJNC),JLYPOS(THSJNC),JJJ)
CCC	   IF (JJJ.LE.0) JJJ=1		! frig to ensure JJJ is in range
CCC	   IF (JJJ.GT.SECNX*SECNY) JJJ=SECNX*SECNY
C
C ... create the junction.
	   CALL IFJCR(JJJ,JLXPOS(THSJNC),JLYPOS(THSJNC),JLNARM(THSJNC))
C
C ... fill in the arms with the angles.
	   DO 150 III=1,JLNARM(THSJNC)
	      CALL JIHW(III,0,JLANG(III,THSJNC))
150	   CONTINUE
C
C ... make an entry for the new junction in in-core list.
	   IF (JLNARM(THSJNC).LE.2) GO TO 210
	   JCRNUM=JCRNUM + 1
	   IF (JCRNUM.LE.MAXJCR) GO TO 160
	   CALL WRITEF('Warning - no room left to buffer junctions%C',7)
	   JCRNUM=MAXJCR
	   GO TO 170
160	   IF (JCRNUM.GE.MAXJCR-20) CALL WRITEF(
     &	   'Warning - can only buffer %N more junction%m',MAXJCR-JCRNUM)
170	   JCRLPS(JCRNUM)=LPOSH
	   JCRIPS(JCRNUM)=IFPOSJ
	   JCRPOS(X,JCRNUM)=JLXPOS(THSJNC)
	   JCRPOS(Y,JCRNUM)=JLYPOS(THSJNC)
	   JCRARM(JCRNUM)=JLARMS(THSJNC)
	   DO 180 JJJ=1,MAXBRA
	      JCRANG(JJJ,JCRNUM)=JLANG(JJJ,THSJNC)
180	   CONTINUE
	   IF (HITJNC.EQ.0) GO TO 210
C
C ... if we had an arm conflict, try to prevent arms which are part of
C ... the old junction from being re-offered.
	   IF (JCRLPS(HITJNC).NE.0) GO TO 210	! old junction deleted ?
	   DO 190 III=1,JCRARM(HITJNC)		! look for used arms
	      IF (JCRANG(III,HITJNC).GE.0) GO TO 190
	      CALL JSSANG(-JCRANG(III,HITJNC),JCRARM(JCRNUM),
     &			  JCRANG(1,JCRNUM),JJJ,KKK) ! try to match angle
	      IF (JJJ.EQ.0) GO TO 190		    ! best match
	      IF (KKK.GE.JANGTL) GO TO 190	    ! within tolerance ?
	      IF (JJJ.EQ.JLIARM(THSJNC)) GO TO 190  ! wanted by us ?
	      IF (JJJ.NE.JLOARM(THSJNC)) 
     &	      	 JCRANG(JJJ,JCRNUM)=-JCRANG(JJJ,JCRNUM)
190	   CONTINUE
C
C ... see if new junction is now completed.
	   DO 200 III=1,JCRARM(JCRNUM)
	      IF (JCRANG(III,JCRNUM).LE.0) GO TO 200
	      IF (III.EQ.JLIARM(THSJNC)) GO TO 200
	      IF (III.NE.JLOARM(THSJNC)) GO TO 210
200	   CONTINUE
	   JCRLPS(JCRNUM)=0			! flag to be deleted
C
210	   ARM1=JLIARM(THSJNC)
	   ARM2=JLOARM(THSJNC)
	   HITJNC=JCRNUM
C
C ... now we have either found an old junction or created a new one.
220	   LHERE=LPOSH
	   JPOS=IFPOSJ
C
C ... fill in the arms and remove them from the in-core list.
	   IF (ARM1.LE.0) GO TO 230
	   CALL JIHW(ARM1,JLST1P(THSJNC),JLST1O(THSJNC))
	   JCRANG(ARM1,HITJNC)=-ABS(JCRANG(ARM1,HITJNC))
230	   IF (ARM2.LE.0) GO TO 240
	   CALL JIHW(ARM2,JLST2P(THSJNC),JLST2O(THSJNC))
	   JCRANG(ARM2,HITJNC)=-ABS(JCRANG(ARM2,HITJNC))
C
C ... fill in the junction pointers.
240	   CALL IFFPKE(IECODE,IELEN,JLJP(THSJNC))
	   CALL EIHWL(LHERE,1,1)
	   CALL EIHWI(JPOS,1,3)
250	CONTINUE
C
C ... put the cursor back where it came from.
	CALL CSWT(CURSAV(X),CURSAV(Y))
C
C ... now rid ourselves of unwanted junctions.
260	KKK=0
	DO 290 JJJ=1,JCRNUM
	   IF (JCRLPS(JJJ).NE.0) GO TO 270
	   KKK=KKK + 1
	   IF (JCRPOI.GE.JJJ) JCRPOI=JCRPOI - 1
	   GO TO 290
270	   IF (KKK.EQ.0) GO TO 290
	   JCRPOS(X,JJJ-KKK)=JCRPOS(X,JJJ)
	   JCRPOS(Y,JJJ-KKK)=JCRPOS(Y,JJJ)
	   JCRLPS(JJJ-KKK)=JCRLPS(JJJ)
	   JCRIPS(JJJ-KKK)=JCRIPS(JJJ)
	   JCRARM(JJJ-KKK)=JCRARM(JJJ)
	   DO 280 III=1,MAXBRA
	      JCRANG(III,JJJ-KKK)=JCRANG(III,JJJ)
280	   CONTINUE
290	CONTINUE
	JCRNUM=JCRNUM - KKK
	RETURN
	END
