C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-06-03 19:22:26.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
**	IF VAX
	OPTIONS /CHECK=NOBOUNDS
**	ENDC
	INTEGER*4 FUNCTION SETMAC(CWD)
C
***	MODULE	SETMAC
***	IDENT	03JN86
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	%A1 not %C in error message		 DM	03-Jun-1986
CMOD	%RZ used in message; tidied		 DM	03-Mar-1986
CMOD	OPTIONS line added, and DUMMY removed	AJW	25-Aug-1982
CMOD	Dummy array DUMMY to force error if
CMOD	compiled /CHECK=BOUNDS			AJW	12-Jan-1982
CMOD	T T W L I N changed to LINOUT		AJW	03-Jul-1981
CMOD	T E X T C changed			AJW	01-Jul-1981
CMOD	RDCOMM declared but never used; removed	AJW	23-Jun-1981
CMOD	NUMC changed to EXPC			AJW	07-May-1981
CMOD	MYR50 argument removed			AJW	26-Feb-1981
CMOD	APPMAC used, rather than EXPMAC		MCF	20-Oct-1980
CMOD	Original MACIO split into GETMAC &
CMOD	SETMAC to ensure that only the essential
CMOD	stuff is in the critical overlay path.	MCF	18-Jan-1979
CMOD	Rehashed completely for SCOTS version	MCF	23-May-1978
CMOD	Created					MCF	16-May-1977
C
C Input and output of macro commands.
C
C Result:-
C	1 - get your next command as usual
C	2 - standard command error
C	3 - get a new line from terminal
C
C *** MUST NOT BE COMPILED WITH ARRAY BOUNDS CHECKING ***
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
***	PARAMETER/PARAMS/
C
C argument:
	INTEGER CWD	! what to do:-
C			  1  - define macro
C			  2  - print macros
C			  3  - code a macro
C			  4  - initialise data structure
C
***	COMMON/EXPC/
***	COMMON/LKPARM/
***	COMMON/LNKC/
***	COMMON/MASTER/
***	COMMON/SCOTS/
***	COMMON/TXTC/
C
C workspace:
	BYTE	  ICH
	INTEGER   I,J
	INTEGER   N,N1,N2
	INTEGER   NCOM
	INTEGER   NUMP
	INTEGER   P,PTR
	INTEGER   SHIFT
C
C functions:
	INTEGER   EXPAND
	INTEGER   MYR50
	LOGICAL   RDINT
C
C ......................................................................
C
	GO TO (30,170,200,10),CWD
	CALL WRITEF('SETMAC: Argument of %N !',CWD)
	GO TO 270
C
C Initialise - can't be done in block data unfortunately
10	DO 20 I=0,MACNUM+1
	  MACPTR(I)=I + 1
	  MCNAME(I+1)=0
20	CONTINUE
	GO TO 280
C
C DEF n mmm <text>
C
C Define macro N (1 -> MACNUM) to have command name 'mmm'
C and to consist of <text>
30	IF (INTARG.LE.0.OR.INTARG.GT.MACNUM) GO TO 260
	CODED(INTARG)=.FALSE.
	DCPTR=DCPTR - 1
40	DCPTR=DCPTR + 1
	IF (DCPTR.LE.TXTPTR.AND.TXTBUF(DCPTR).EQ.' ') GO TO 40
	LNKCM(LNKMAC+INTARG*2-1)=MYR50()
C
C move all command above us up the buffer
	SHIFT=MAXMAC - MACPTR(MACNUM+1)
	DO 50 I=MACPTR(MACNUM+1),MACPTR(INTARG+1),-1
	  MCNAME(I+SHIFT)=MCNAME(I)
	  MCNUMB(I+SHIFT)=MCNUMB(I)
	  MCCODE(I+SHIFT)=MCCODE(I)
50	CONTINUE
	DO 60 I=INTARG+1,MACNUM+1
	  MACPTR(I)=MACPTR(I) + SHIFT
60	CONTINUE
C
C put new command in the space
	P=MACPTR(INTARG)
	NUMP=P - 1		! where the last argument was put
C
70	MCNAME(P)=0		! initialise slot
	MCNUMB(P)=0
	MCCODE(P)=0
C
C get commands from line
80	IF (DCPTR.GT.TXTPTR) GO TO 130	! done
	ICH=TXTBUF(DCPTR)
	IF (ICH.EQ.' ') GO TO 100	!  space
	IF (('0'.LE.ICH.AND.ICH.LE.'9').OR.
     &      ICH.EQ.'-') GO TO 110	! a number
	IF (ICH.EQ.'.') GO TO 100	! skip dots
	MCNAME(P)=MYR50()		! read a name
	IF (MCNAME(P).EQ.0) GO TO 90	! did we get one ?
	P=P + 1				! on to next slot
	IF (P.LT.MACPTR(INTARG+1)) GO TO 70
C
C run out of space
	P=P - 1				! go back to last entry
	MCNAME(P)=0			! change it to a stopper
	CALL WRITEF('No more space for macro definitions')
	GO TO 130
C
C unrecognised character
90	CALL WRITEF('Strange character "%A1" in definition',
     &      TXTBUF(DCPTR))
C
C skip space or strange character
100	DCPTR=DCPTR + 1
	GO TO 80
C
C a number
110	IF (P-1.NE.NUMP) GO TO 120
	CALL WRITEF('Extra number in definition')
	GO TO 130
C
120	IF (RDINT(MCNUMB(P-1))) GO TO 80
	MCCODE(P-1)=TOPBIT
	NUMP=P - 1
	GO TO 80
C
C got our definition - tidy up
130	SHIFT=MACPTR(INTARG+1) - P - 1
	IF (SHIFT.LE.0) GO TO 160
	DO 140 I=MACPTR(INTARG+1),MACPTR(MACNUM+1)
	  MCNAME(I-SHIFT)=MCNAME(I)
	  MCNUMB(I-SHIFT)=MCNUMB(I)
	  MCCODE(I-SHIFT)=MCCODE(I)
140	CONTINUE
	DO 150 I=INTARG+1, MACNUM+1
	  MACPTR(I)=MACPTR(I)-SHIFT
150	CONTINUE
160	GO TO 270
C
C Print the macros
170	N1=1
	N2=MACNUM
	IF (NUMINT.NE.1.OR.
     &      INTARG.LE.0.OR.INTARG.GT.MACNUM) GO TO 180
	N1=INTARG
	N2=INTARG
180	DO 190 I=N1,N2
	  IF (MCNAME(MACPTR(I)).EQ.0) GO TO 190
	  CALL EXPAND('%I3 ',I)
	  IF (.NOT.CODED(I)) CALL APPEND(' ')
	  IF (     CODED(I)) CALL APPEND('*')
	  CALL APPEND('%5',LNKCM(LNKMAC+I*2-1))
	  CALL APPMAC(I)
	  CALL LINOUT
190	CONTINUE
	GO TO 280
C
C code a macro, i.e. look up its commands once and for all
200	P=MACPTR(INTARG)
	CODED(INTARG)=.TRUE.
C
210	IF (MCNAME(P).EQ.0) GO TO 280	! done
	PTR=0
	NCOM=0				! look for command name
220	NCOM=NCOM + 1
	PTR=PTR + 1
	N=LNKCM(PTR).AND.'377'O
	IF (N.LE.0) GO TO 240
	DO 230 J=1,N
	  PTR=PTR + 1
	  IF (LNKCM(PTR).EQ.MCNAME(P)) GO TO 250
230	CONTINUE
	GO TO 220
C
C name not found
240	CALL WRITEF('"%RZ" ?',MCNAME(P))
	CODED(INTARG)=.FALSE.
	GO TO 270
C
C got a match
250	MCCODE(P)=(MCCODE(P).AND.TOPBIT).OR.NCOM
	P=P + 1
	GO TO 210
C
C Exits
260	SETMAC=2
	GO TO 290
C
270	SETMAC=3
	GO TO 290
C
280	SETMAC=1
290	RETURN
	END
