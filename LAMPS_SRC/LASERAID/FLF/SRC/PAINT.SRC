C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-07-15 19:12:42.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE PAINT(LFPOS,DIRN,OTHIK,GOTWIN,PNTWIN,NHTCH,ONEFTR)
C
***	MODULE	PAINT
***	IDENT	15JL86
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	Arg ONEFTR added (paintout one ftr only) DM	15-Jul-1986
CMOD	Converged				 DM	25-Jun-1986
CMOD	Don't call ARFILL if NFILL is silly	 DM	06-Jun-1986
CMOD	If SPDIS < 0 calculate a suitable value	 DM	28-Apr-1986
CMOD	Size of point ftr paintout adjustable	 DM	14-Mar-1986
CMOD	Pen-ups will be the death of me !!!	 DM	27-Nov-1985
CMOD	Remove O.S. special use of overlay 11	 DM	25-Nov-1985
CMOD	Inverse polarity paintout added; tidied	 DM	07-Nov-1985
CMOD	Use CNROVR for corner tick overlay no.	 DM	10-Jul-1985
CMOD	Yet ANOTHER problem with pen-ups cured!! DM	09-Sep-1983
CMOD	Yet another problem with pen-ups cured ! DM	17-Aug-1983
CMOD	No p/o if string shorter than 2*SPDIS	 DM	22-Jul-1983
CMOD	Call IFFPKE always before GETLST('NO'	AJW	17-Jun-1983
CMOD	Only leave gap around junctions, not STs DM	27-Apr-1983
CMOD	Uses IECODE-in-hand BEFORE doing IFFNXT	 DM	19-Apr-1983
CMOD	Windowed paint-out predominates over SPD DM	15-Apr-1983
CMOD	Uses TRX, not A B 4 T R N		AJW	07-Apr-1983
CMOD	/COEFFS/ removed			AJW	07-Apr-1983
CMOD	Doesn't fall into 1 pnt feature IF ELF	 DM	01-Dec-1982
CMOD	No longer jumps into nested DOs (!!)	 DM	29-Nov-1982
CMOD	Calls LDWAIT, uses IENDS if SPDIS zero	 DM	26-Nov-1982
CMOD	DIGC not cond, so POSUPR always ok	AJW	11-Nov-1982
CMOD	One point features dealt with seprtly	AJW	05-Nov-1982
CMOD	POSUPR removed, since DIGC added	AJW	02-Nov-1982
CMOD	Map space stuff (mostly
CMOD	conditionalising out of old stuff)	AJW	02-Nov-1982
CMOD	SPDIS replaces LIMIT(12)		AJW	08-Oct-1982
CMOD	Calls AB4TRN after EIHRR		AJW	24-Aug-1982
CMOD	LIMIT(12) as arg to PTCLIP		AJW	21-Jun-1982
CMOD	Supress paint-out near ends of strings,
CMOD	don't FBRD for every point in a string,
CMOD	and general tidies			AJW	18-Jun-1982
CMOD	MAXFIL reduced again (F77)		AJW	26-May-1982
CMOD	MAXFIL doubled to 1200			AJW	25-Jan-1982
CMOD	GOTWIN.AND.INSIDE() tests split, and
CMOD	one point features with WIN fixed	AJW	22-Jan-1982
CMOD	POSUPR Added
CMOD	Paint-out supress (POS) bit is
CMOD	most significant bit of word
CMOD	Ignores layer 11 if O.S.
CMOD	IELEN tested against -1			AJW	05-Jan-1982
CMOD	Test for layer 32 before test of OVSEL	AJW	30-Jul-1981
CMOD	PX,PY declared REAL			AJW	27-Jul-1981
CMOD	Point feature paintout size increased	 DM	10-May-1981
CMOD	Ignores layer 32 (corner ticks)		AJW	05-May-1981
CMOD	Tidied					AJW	19-Feb-1981
CMOD	Errors in previous change amended	MCF	16-May-1980
CMOD	Coordinate transform using AB4TRN	MCF	27-Feb-1980
CMOD	NHATCH added				AJW	18-Oct-1979
CMOD	Created					MCF	05-Apr-1978
C
C Full transforming paint-out - including area fill and optional window.
C
C Options:-
C	a) paintout from LFPOS, forwards, not transforming
C	b) paintout whole file backwards, transforming
C	c) paintout whole file forwards, transforming
C	d) catchup on "paintout suppressed" features, from LFPOS
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
C parameters:
***	PARAMETER/PARAMS/
C
	PARAMETER MAXNS=6		! max sections per file
	PARAMETER MAXNO=6		! max overlays per section
	PARAMETER MAXNF=120		! max features per section
	PARAMETER MAXFIL=2000		! max points per feature
C
C arguments:
	INTEGER*4 LFPOS		! where to start looking
	LOGICAL*1 DIRN		! direction (TRUE => forwards)
	REAL	  OTHIK		! over-riding thickness
	LOGICAL*1 GOTWIN	! window defined ?
	REAL	  PNTWIN(2,2)	! the window
	INTEGER   NHTCH		! type of paintout
	LOGICAL*1 ONEFTR	! paintout one feature only ?
C
C common blocks:
***	COMMON/DIGC/
***	COMMON/MASTER/		! for integer arguments
***	COMMON/LKPARM/		! for SPDIS,SNGLTH,ELF
***	COMMON/SCCORR/
***	COMMON/SCPARM/
	COMMON/THKPAR/SEP,SPOT
	REAL          SEP,SPOT
C
C workspace:
	INTEGER   III,JJJ
	INTEGER   IECODE,IELEN,IENDS,NPTS
	INTEGER   INS,INO,INF
	INTEGER   ITHK
	INTEGER   NFILL			! number of points (area fill)
	INTEGER   NSNUM,NONUM,NFNUM
	INTEGER   NSLIM,NOLIM,NFLIM
	INTEGER   OVSEL			! how many selected overlays
	INTEGER   OVLST(8)		! their numbers
	INTEGER*4 NSLIST(MAXNS)		! lists of IFF entries
	INTEGER*4 NOLIST(MAXNO)
	INTEGER*4 NFLIST(MAXNF)
	LOGICAL*1 CLIPPD		! clipped some points ?
	LOGICAL*1 EDGMOD		! captured with ELF turned on ?
	LOGICAL*1 FINISH		! finished with this ST ?
	LOGICAL*1 FORTH			! paintout forwards ?
	LOGICAL*1 HADJP			! ST associated with JP ?
	LOGICAL*1 INVERS		! inverse polarity line ?
	LOGICAL*1 LSTCLP		! previous ST end clipped ?
	LOGICAL*1 NEARND		! near end of string ?
	LOGICAL*1 PENUP			! is the pen up ?
	LOGICAL*1 WANTED		! feature wanted for paint-out ?
	REAL	  ENDPNT(2)		! end point of string
	REAL	  FILLNG(2,MAXFIL)	! points for area filling
	REAL	  LSTPNT(2)		! previous point on string
	REAL	  SAVSEP		! saved value of SEP
	REAL	  STPNT(2)		! start point of string
	REAL	  THK
	REAL	  THSPNT(2)		! current point on string
	REAL	  WINDOW(2,2)		! our copy of window
C
C ......................................................................
C
C statement function definitions:
	LOGICAL*4 INSIDE
	LOGICAL*4 NEAR
	REAL	  AX,AY,PX,PY
C
	INSIDE(PX,PY)=WINDOW(X,1).LT.PX.AND.
     &		      WINDOW(X,2).GT.PX.AND.
     &		      WINDOW(Y,1).LT.PY.AND.
     &		      WINDOW(Y,2).GT.PY
C
	NEAR(AX,AY,PX,PY)=AX.LT.(PX+SPDIS).AND.
     &			  AX.GT.(PX-SPDIS).AND.
     &			  AY.LT.(PY+SPDIS).AND.
     &			  AY.GT.(PY-SPDIS)
C
C ......................................................................
C
	SAVSEP=SEP			! for inverse polarity paintout
C
C ... set up our copy of the window.
	DO 20 JJJ=1,2
	  DO 10 III=1,2
	    WINDOW(III,JJJ)=0.0
	    IF (GOTWIN) WINDOW(III,JJJ)=PNTWIN(III,JJJ)
10	  CONTINUE
20	CONTINUE
C
	CALL DISMOD(0)
	CALL FLEVEL(BLUFOC)
	CALL FBWT16(TOPBIT)
C
C ... calculate a value for SPDIS if necessary.
	IF (SPDIS.LT.0.0) SPDIS=0.7071*FLOAT(IWID)*WAR*MAX(CRX,CRY)
C
C ... set up list of selected overlays.
	OVSEL=NUMINT
	IF (OVSEL.LE.0) GO TO 40
	DO 30 III=1,OVSEL
	  OVLST(III)=INTAR(III)
30	CONTINUE
C
C ... decide on what to do.
40	IF (LFPOS.EQ.0) GO TO 50
	CALL IFFPKE(IECODE,IELEN,LFPOS)
	FORTH=.TRUE.
	GO TO 170
C
C ... whole file.
50	FORTH=DIRN
	CALL IFFRWD
	IF (FORTH) GO TO 160
C
C ... get NS list for file.
	NSLIM=-1
60	CALL IFFRWD
	CALL GETLST('NS',NSLIST,MAXNS,NSNUM,NSLIM,0)
	IF (NSNUM.LE.0) GO TO 430
C
C ......................................................................
C
C ... loop through NS list.
	INS=NSNUM + 1
70	INS=INS - 1
	  IF (INS.LT.1) GO TO 60
	  NOLIM=-1
80	  CALL IFFPKE(IECODE,IELEN,NSLIST(INS))		! to NS
C
C ... set up NO list for this section.
	  CALL GETLST('NO',NOLIST,MAXNO,NONUM,NOLIM,'NS')
	  IF (NONUM) 430,70,90
C
C ... loop through overlays.
90	  INO=NONUM + 1
100	    INO=INO - 1
	    IF (INO.LT.1) GO TO 80
	    NFLIM=-1
110	    CALL IFFPKE(IECODE,IELEN,NOLIST(INO))
	    CALL EIHRI(JJJ,1,1)			! look at overlay number
	    IF (JJJ.EQ.CNROVR) GO TO 100	! corner ticks - ignore
	    IF (OVSEL.LE.0) GO TO 130		! no selection
	    DO 120 III=1,OVSEL			! see if overlay wanted
	      IF (OVLST(III).EQ.JJJ) GO TO 130
120	    CONTINUE
	    GO TO 100				! not wanted
C
C ... get list of features in this overlay.
130	    CALL GETLST('NF',NFLIST,MAXNF,NFNUM,NFLIM,'NO')
	    IF (NFNUM) 430,100,140
C
C ... loop through each feature in the list.
140	    INF=NFNUM + 1
150	      INF=INF - 1
	      IF (INF.LT.1) GO TO 110
	      CALL IFFPKE(IECODE,IELEN,NFLIST(INF))
	      GO TO 170			! skip IFFNXT first time through
C
160	      CALL IFFNXT(IECODE,IELEN)
170	      CALL FBRD(JJJ)		! FORTH cases join in here
	      IF (JJJ.EQ.16) GO TO 430
	      IF (IELEN .EQ.-1) GO TO 410
	      IF (IECODE.EQ.'ST') GO TO 250
	      IF (IECODE.EQ.'JP') GO TO 240
	      IF (IECODE.EQ.'TH') GO TO 230
	      IF (IECODE.EQ.'FS') GO TO 220
	      IF (IECODE.EQ.'NF') GO TO 180
	      IF (IECODE.EQ.'EF') GO TO 410
	      IF (IECODE.EQ.'NO') GO TO 190
	      GO TO 160
C
C NF -  set up feature
180	      EDGMOD=.FALSE.
	      HADJP=.FALSE.
	      INVERS=.FALSE.
	      LSTCLP=.FALSE.
	      PENUP=.TRUE.
	      NFILL=0
	      GO TO 160
C
C NO - see if overlay wanted.
190	      CALL EIHRI(JJJ,1,1)
	      IF (JJJ.EQ.CNROVR) GO TO 210	! corner ticks - ignore
	      IF (OVSEL.LE.0) GO TO 160		! overlay wanted ?
	      DO 200 III=1,OVSEL
	        IF (OVLST(III).EQ.JJJ) GO TO 160	! yes
200	      CONTINUE
210	      CALL IFFNXC('EO',IELEN)		! no - skip it
	      IF (IELEN.EQ.-1) GO TO 410
	      GO TO 160
C
C FS - see if feature wanted.
220	      CALL EIHRI(JJJ,1,2)
	      EDGMOD=(JJJ.AND.2).EQ.0
	      INVERS=(JJJ.AND.64).NE.0
	      WANTED=((JJJ.AND.TOPBIT).EQ.0).OR..NOT.POSUPR
	      GO TO 160
C
C TH - set thickness.
230	      CALL EIHRI(ITHK,1,1)
	      THK=ITHK
	      IF (OTHIK.GT.0) THK=OTHIK
	      IF (INVERS) SEP=THK	! inverse polarity paintout
	      CALL THICK(THK)
	      GO TO 160
C
C JP - junction pointer.
240	      HADJP=.TRUE.
	      GO TO 160
C
C ST - paint it out or add it to list.
250	      IF (.NOT.WANTED) GO TO 160
	      CALL EIHRS(NPTS,IENDS)
	      IF (NPTS.EQ.1) GO TO 400
C
C ......................................................................
C
	      IF (EDGMOD) THEN
		DO 260 III=1,NPTS		! ELF case
		  CALL EIHRR(THSPNT(1),2,(III-1)*4+1)
		  CALL TRXUSE(THSPNT(X),THSPNT(Y),BCOEFF) ! to dig space
C
C ... add it to list (if inside window).
		  PENUP=.TRUE.			! indicate clipped
		  IF (GOTWIN.AND.
     &		      .NOT.INSIDE(THSPNT(X),THSPNT(Y))) GO TO 260
		  IF (NFILL.LT.MAXFIL-1) NFILL=NFILL + 1
		  FILLNG(X,NFILL)=THSPNT(X)
		  FILLNG(Y,NFILL)=THSPNT(Y)
		  PENUP=.FALSE.			! not clipped
260		CONTINUE
		GO TO 160			! finished with this ST
C
C ......................................................................
C
	      ELSE				! not ELF
		CLIPPD=.FALSE.
		NEARND=.FALSE.
		CALL EIHRR(STPNT,2,1)
		CALL EIHRR(ENDPNT,2,NPTS*4-3)
		CALL TRXUSE( STPNT(X), STPNT(Y),BCOEFF)
		CALL TRXUSE(ENDPNT(X),ENDPNT(Y),BCOEFF)
		THSPNT(X)=STPNT(X)
		THSPNT(Y)=STPNT(Y)
		III=1
C
C ... if windowed paint out, loop until THSPNT enters window.
270		III=III + 1
		  IF (III.GT.NPTS) GO TO 290	! end of ST
		  LSTPNT(X)=THSPNT(X)
		  LSTPNT(Y)=THSPNT(Y)
		  CALL EIHRR(THSPNT,2,III*4-3)
		  CALL TRXUSE(THSPNT(X),THSPNT(Y),BCOEFF)
		  IF (.NOT.GOTWIN.OR.INSIDE(THSPNT(X),THSPNT(Y)))
     &		     GO TO 280
		  CLIPPD=.TRUE.			! clip this point
		GO TO 270
C
C ... loop until THSPNT goes out of the clipping square (.NOT.NEAR).
280		  IF (.NOT.HADJP) GO TO 310	! no JP so no clipping
		  IF (.NOT.NEAR(THSPNT(X),THSPNT(Y),STPNT(X),STPNT(Y)))
     &		     GO TO 300
		  CLIPPD=.TRUE.			! clip this point
		GO TO 270
C
C ... end of ST - remember whether we were clipping at the time.
290		LSTCLP=CLIPPD
		GO TO 160
C
C ... .NOT.NEAR - force LSTPNT out onto the side of the square.
300		CALL PTCLIP(THSPNT,LSTPNT,STPNT,SPDIS)
C
C ... take account of IENDS if at start of ST and not clipped.
310		IF ((.NOT.HADJP.OR.SPDIS.LE.0.0) .AND. III.EQ.2)
     &		   PENUP=((IENDS.AND.1).EQ.0).OR.LSTCLP
C
C ... look at next entry to see if this ST ends on a JP.
		CALL EIHMK(1)			    ! mark current entry
		CALL IFFNXT(IECODE,IELEN)
		HADJP=IECODE.EQ.'JP'.OR.IECODE.EQ.-1  ! assume JP if EOF
		CALL IFFRWM			    ! return to our ST
		CALL EIHMK(0)			    ! clear the marker
C
C ... set NEARND to force invisible if LSTPNT is near to end point.
		IF (HADJP.AND.
     &		    NEAR(LSTPNT(X),LSTPNT(Y),ENDPNT(X),ENDPNT(Y)))
     &		   NEARND=.TRUE.
C
C ... now we have LSTPNT on the edge of the square & THSPNT outside it.
		IF (PENUP.OR.CLIPPD.OR.NEARND) GO TO 320
		CALL LINTO(LSTPNT(X),LSTPNT(Y))
		GO TO 330
320		CALL MOVTO(LSTPNT(X),LSTPNT(Y))
		PENUP=.FALSE.
330		FINISH=.FALSE.
		GO TO 350
C
C ... loop through rest of ST.
340		III=III + 1
		  IF (III.GT.NPTS) GO TO 390	! end of ST
		  LSTPNT(X)=THSPNT(X)
		  LSTPNT(Y)=THSPNT(Y)
		  CALL EIHRR(THSPNT,2,III*4-3)
		  CALL TRXUSE(THSPNT(X),THSPNT(Y),BCOEFF)
		  IF (.NOT.GOTWIN.OR.INSIDE(THSPNT(X),THSPNT(Y)))
     &		     GO TO 350
		  PENUP=.TRUE.			! clip this point
		GO TO 340
C
C ... are we near a junction (and do we care) ?
350		  IF (.NOT.HADJP.OR.
     &		     .NOT.NEAR(THSPNT(X),THSPNT(Y),ENDPNT(X),ENDPNT(Y)))
     &		     GO TO 360
		  FINISH=.TRUE.	 ! yes - flag to finish this time around
		  IF (NEARND) GO TO 370
		  CALL PTCLIP(LSTPNT,THSPNT,ENDPNT,SPDIS)
C
C ... deal with this point.
360		  IF (PENUP) GO TO 370
		  CALL LINTO(THSPNT(X),THSPNT(Y))
		  GO TO 380
370		  CALL MOVTO(THSPNT(X),THSPNT(Y))
		  PENUP=.FALSE.
380		IF (.NOT.FINISH) GO TO 340 ! junk the rest of this ST ?
C
390		LSTCLP=PENUP
		PENUP=.TRUE.		   ! yes - put the pen up
		GO TO 160
	      ENDIF
C
C ......................................................................
C
C ... deal with one point features.
400	      CALL EIHRR(THSPNT(1),2,1)
	      CALL TRXUSE(THSPNT(X),THSPNT(Y),BCOEFF)
	      IF (GOTWIN.AND..NOT.INSIDE(THSPNT(X),THSPNT(Y))) GO TO 160
	      CALL MOVTO(THSPNT(X),THSPNT(Y)-SNGLTH/2.0)
	      CALL THICK(SNGLTH)
	      CALL LINBY(0.0,SNGLTH)
	      CALL THICK(THK)
	      GO TO 160
C
C EF and end-of-file - fill in feature (if ELF).
410	      IF (.NOT.INVERS) GO TO 420
	      CALL LDWAIT
	      SEP=SAVSEP
	      CALL THICK(THK)
420	      IF (EDGMOD) THEN			! ELF
		FILLNG(X,NFILL+1)=FILLNG(X,1)	! extra closing point
		FILLNG(Y,NFILL+1)=FILLNG(Y,1)
		IF (PENUP) NFILL=NFILL + 1	! if last was clipped
		IF (NFILL.GT.2) CALL ARFILL(FILLNG,NFILL,THK,NHTCH)
		NFILL=0
	      ENDIF
	      IF (.NOT.FORTH) GO TO 150			! get next NF
	      IF (ONEFTR.OR.IELEN.EQ.-1) GO TO 430	! stop on EOF
	      GO TO 160					! keep looking
C
C ... end of loops.
C
C ......................................................................
C
C ... here when no more NSs or FB16 pressed.
430	CALL LDWAIT
	SEP=SAVSEP
	CALL THICK(0.0)
	CALL FLEVEL(REDFOC)
	RETURN
	END
