C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-02-21 14:46:06.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE PNTFTR(RC,PNTMAP)
C
***	MODULE	PNTFTR
***	IDENT	21FE86
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
C Author: D. Meader
C
CMOD	Converged				 DM	21-Feb-1986
C	Created 				 DM	17-Oct-1985
C
C Looks at the edge chains grown by CHNPIX, and tries to spot 'square'
C point features. The number found is returned in PNTPND in /LKFOLL/
C and is NEGATED so that we can accept all of them in one go if we wish
C (see POINT).
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
***	PARAMETER/PARAMS/
C
	INTEGER	  RC			! return code (0/-1 ==> OK/duff)
	INTEGER*2 PNTMAP(MAXCHN)	! list of relevant chain numbers
C
***	COMMON/LINKS/
***	COMMON/LKFOLL/
***	COMMON/LKPARM/
***	COMMON/MPEP/
***	COMMON/RSE/
***	COMMON/SCPARM/
C
	INTEGER	  I,J,K			! temporary variables
	INTEGER	  NCHNS			! number of chains considered
	INTEGER	  NITER			! number of iterations
	LOGICAL*1 VEXSAV		! saved value of VEXING
	REAL	  ESAV,HSAV,SSAV	! saved filtering parameters
C
C function:
	LOGICAL*4 ONSIDE		! is 1st pnt on side of square ?
C
C ......................................................................
C
	RC=0
	PNTPND=0
	NCHNS=0
	ESAV=E(1)			! preserve filtering parameters
	HSAV=H(1)
	SSAV=S(1)
	VEXSAV=VEXING
	VEXING=.TRUE.			! turn vertex extraction on
	S(1)=0.0			! start to set up our own params
C
	DO 100 I=1,MAXCHN
	   J=CHAIN(I)
	   IF (J.LE.0) GO TO 100	! loop through chains ...
	   NCHNS=NCHNS + 1
	   IF (.NOT.CLOCHN(I)) GO TO 90	! look for a closed one ...
	   IF (LENGTH(I).LT.4) GO TO 90	! with >= 4 points
	   NITER=1			! first iteration
	   H(1)=FLOAT(IPIT)*0.5		! default H for first iteration
C
10	   E(1)=H(1)*2.0		! finish setting up parameters
	      NMP(1)=0			! clear out existing points
20	      CALL BUNCH(START(X)+FLOAT(ENCBUF(X,J)),
     &			 START(Y)+FLOAT(ENCBUF(Y,J)),0)
		 J=NXT(J)		! loop through chain coords ...
	      IF (J.NE.0) GO TO 20	! BUNCHing them as we go
	      CALL BUNCH(START(X)+FLOAT(ENCBUF(X,CHAIN(I))),
     &			 START(Y)+FLOAT(ENCBUF(Y,CHAIN(I))),1)
	      IF (ONSIDE()) NMP(1)=NMP(1) - 1
	      IF (NMP(1).LE.0) GO TO 90
	      MP1(X,1)=MP1(X,NMP(1))	! drag first point back to last
	      MP1(Y,1)=MP1(Y,NMP(1))
	      NMP(1)=NMP(1) - 1		! lose closing point
C
	      IF (NMP(1)-4) 30,70,40	! how may points do we have ?
30	      IF (LENGTH(I).EQ.4) GO TO 90
	      H(1)=H(1) - FLOAT(IPIT)*0.25	! too few now !!
	      GO TO 50
40	      H(1)=H(1) + FLOAT(IPIT)*0.5	! still too many
50	      IF (NITER.LT.6) GO TO 60	! failed to converge in time ?
	      IF (.NOT.TMPCHK) GO TO 90
	      CALL EXPAND('PNTFTR:%C Chain %N failed to converge ',7,I)
	      CALL APPEND('after %N iteration%m%C',NITER,7)
	      CALL TTWLIN
	      GO TO 90			! yes - junk the chain
60	      NITER=NITER + 1		! no - try another iteration
	      J=CHAIN(I)		! go back to the chain end ...
	   GO TO 10			! and re-BUNCH it
C
C ... we have now successfully filtered the chain down to four points.
70	   J=CHAIN(I)			! construct a new chain ...
	   DO 80 K=1,4			! retaining previous direction
	      ENCBUF(X,J)=NINT(MP1(X,K) - START(X))
	      ENCBUF(Y,J)=NINT(MP1(Y,K) - START(Y))
	      IF (K.NE.4) J=NXT(J)
80	   CONTINUE
	   NXT(J)=0			! terminate the new chain
	   LENGTH(I)=4
	   PNTPND=PNTPND - 1		! found a square point feature
	   PNTMAP(-PNTPND)=I
	   GO TO 100			! look at the next chain
90	   CHAIN(I)=0			! kill off this chain
100	CONTINUE
C
	E(1)=ESAV			! restore filtering parameters
	H(1)=HSAV
	S(1)=SSAV
	VEXING=VEXSAV
	NMP(1)=0			! forget any 'master points'
	IF (NCHNS.EQ.0) CALL WRITEF('Nothing seen%C',7)
	IF (PNTPND.EQ.0) RC=-1
	RETURN
	END
