C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1983-04-15 11:43:00.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE PTCLIP(OUTPNT,INPNT,CLIPNT,DIST)
C
**	MODULE PTCLIP
**	IDENT  15AP83
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	No longer assumes INPNT is in the square DM	15-Apr-1983
CMOD	Even fewer divides by zero		AJW	15-Oct-1982
CMOD	Doesn't divide by zero			AJW	05-Jul-1982
CMOD	Args renamed				AJW	23-Jun-1982
CMOD	Created					AJW	21-Jun-1982
C
C Subroutine to clip vector INPNT=>OUTPNT to square CLIPNT+/-DIST
C INPNT is forced onto the square
C
**	IF VAX
	  IMPLICIT NONE
**	ENDC
C
C parameters:
**	PARAMETER/PARAMS/
C
C arguments:
	REAL      OUTPNT(2)
	REAL      INPNT(2)
	REAL      CLIPNT(2)
	REAL      DIST
C
C Local workspace:
	REAL      XNEW,YNEW
	INTEGER   III,JJJ
C
C code:
C
	IF (DIST.LE.0.0) GO TO 70	! anything to do ?
	IF (ABS(INPNT(X)-CLIPNT(X)).GT.DIST .OR.
     &	    ABS(INPNT(Y)-CLIPNT(Y)).GT.DIST) GO TO 70
C
C does vector intersect left or right side
	IF (OUTPNT(X).GT.INPNT(X)) GOTO 10
	  III=-1		! left hand side (X=ENDPT(X)-DIST)
	  GOTO 20
10	CONTINUE
	  III= 1
20	CONTINUE
C
	IF (OUTPNT(Y).GT.INPNT(Y)) GOTO 30
	  JJJ=-1		! bottom (Y=ENDPT(Y)-DIST)
	  GOTO 40
30	CONTINUE
	  JJJ= 1
40	CONTINUE
C
C check for division by zero
	IF (OUTPNT(X)-INPNT(X).EQ.0.0) GOTO 50
	IF (OUTPNT(Y)-INPNT(Y).NE.0.0) GOTO 43
	  YNEW=OUTPNT(Y)
	  GOTO 45
43	CONTINUE
C
C now calculate Y for intersection with X=CLIPNT+/-DIST
	  YNEW=INPNT(Y)+(CLIPNT(X)+III*DIST-INPNT(X))*
     &                   (OUTPNT(Y)-INPNT(Y))/(OUTPNT(X)-INPNT(X))
C if past edge, then set to edge and calculate X,
C else set X to side
	IF ((YNEW.GT.(CLIPNT(Y)+JJJ*DIST)).EQV.(JJJ.EQ.1)) GOTO 50
45	  XNEW=CLIPNT(X)+III*DIST
	  GOTO 60
50	CONTINUE
	  YNEW=CLIPNT(Y)+JJJ*DIST
	  XNEW=INPNT(X)+(CLIPNT(Y)+JJJ*DIST-INPNT(Y))*
     &                   (OUTPNT(X)-INPNT(X))/(OUTPNT(Y)-INPNT(Y))
60	CONTINUE
C
	INPNT(X)=XNEW		
	INPNT(Y)=YNEW		
C
70	RETURN
	END
