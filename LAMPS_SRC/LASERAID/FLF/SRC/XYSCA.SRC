C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1985-11-27 16:37:26.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION XYSCA(CENX,CENY)
C
***	MODULE	XYSCA
***	IDENT	27NO85
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	IU and IV now set up relative to IDIR	 DM	27-Nov-1985
CMOD	X & Y scans now register more precisely	 DM	01-Nov-1985
CMOD	Use MOD 6; prevent map overflow; tidied	 DM	24-Oct-1985
CMOD	/COEFFS/ removed			AJW	07-Apr-1983
CMOD	Rehashed for XYSCA			PGH	05-Jul-1982
CMOD	Author (from module FRS as used in LAR) JHR	04-Feb-1982
C
C Routine to perform XY-SCAnning.
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
***	PARAMETER/PARAMS/
C
C i/p arguments
	REAL	  CENX,CENY	! centre of scan window
C
***	COMMON/LKFOLL/
***	COMMON/LKPARM/
***	COMMON/RSE/
***	COMMON/SCPARM/
***	COMMON/SCCORR/
***	COMMON/XYPIXC/
C
C w/s
	INTEGER	  SAVDIR,SAVMOD	! saved line-following parameters
	INTEGER	  SCLEN		! scan length
	LOGICAL*1 EMPTY		! returned from XYPRC (unused)
	REAL	  SCAX,SCAY	! start-point for each individual scan
	REAL	  WARCR		! WAR*MAX(CRX,CRY)
C
C ......................................................................
C
	XYSCA=0
C
C save parameters which we mangle (for restoring at exit).
	SAVDIR=IDIR
	SAVMOD=IMOD
	IMOD=2
	IF (INVPOL) IMOD=6			! need all-black scans
	IDIR=0
	CALL SCSET(0)				! disable scanner
C
C calculate size of scan.
	WARCR=WAR*MAX(CRX,CRY)
	SCLEN=MIN(INT((WARCR + 0.5)*FLOAT(IWID)),PIXNUM*IPIT)
	SCPSCB=2*((INT(FLOAT(SCLEN)/FLOAT(IPIT)) - 1)/2) + 1
	HSLENP=(SCPSCB - 1)/2			! 1/2 scan-len (pitches)
	SCLEN=(SCPSCB - 1)*IPIT			! recompute scan-length
	HSLENC=SCLEN/2				! 1/2 scan-len (counts)
	IWID=MIN(INT(FLOAT(SCLEN + IPIT/2)/WARCR),63)	! recompute IWID
	NLO=PIXHLF - HSLENP + 1
	NHI=PIXHLF + HSLENP + 1
	MLO=NLO
	MHI=NHI
C
C get the coords of the start-pt of the first scan of the first swathe.
	SCAX=CENX
	SCAY=CENY - HSLENC
C
C stop refreshing.
	CALL DISMOD(0)			
C
C move to the start-pt for the next scan-block.
	CALL MOVTO(SCAX,SCAY)
	IDIR=0					! set direction...
	CALL SCSET(0)				! ...and implement
	CALL SCANBY(0,SCLEN,1)			! scan in X
	CALL SCSET(0)				! disable scanner
	CALL XYPRC(EMPTY) 			! process X-scan data
C
	IDIR=1					! switch direction...
	CALL SCSET(0)				! ...and implement
	CALL MOVTO(SCAX-HSLENC,SCAY+HSLENC)
	CALL SCANBY(SCLEN,0,1)			! scan in Y
	CALL SCSET(0)
	CALL XYPRC(EMPTY)			! process Y-scan data
C
C restore mangled line-following parameters and re-position the
C digitising beam to where it was at entry.
	IDIR=SAVDIR
	IMOD=SAVMOD
	IU=2 - IDIR
	IV=1 + IDIR
	ID(IU)=SCLEN
	ID(IV)=0
	RSEOFF(IU)=HSLENC
	RSEOFF(IV)=0
	CALL MOVTO(CENX,CENY)
	CALL SCSET(0)
	RETURN
	END
