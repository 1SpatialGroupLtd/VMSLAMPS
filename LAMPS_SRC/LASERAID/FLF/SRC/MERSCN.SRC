C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-06-13 10:01:58.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE MERSCN(EPS,SMLL)
C
***	MODULE	MERSCN
***	IDENT	13JN86
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	Optimised; tidied some more		 DM	13-Jun-1986
CMOD	Tidied (again)				AJW	04-Jun-1982
CMOD	Messages commented out			 DM	13-Jan-1981
CMOD	Tidied					AJW	22-Jan-1981
CMOD	Created					MCF	12-Dec-1978
C
C Merge together the results of two scans.
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
C parameters:
***	PARAMETER/PARAMS/
C
C arguments:
	REAL      EPS			! distance allowed
	INTEGER   SMLL			! smallest chain allowed
C
C common blocks:
***	COMMON/LINKS/
***	COMMON/RSE/
C
C local w/s:
	INTEGER   ACHN,BCHN		! chains
	INTEGER   III,KKK,LLL
	INTEGER   NAB
	INTEGER   NATTCH
	INTEGER   NBLA,NBFA		! offset got from TSTATT
	INTEGER   PASALT(MAXCHN)	! pass in which chn was altered
	INTEGER   PASS			! pass through data structure
	LOGICAL*1 ALTRD			! any chain altered in this pass
	LOGICAL*1 AWAY,BWAY		! directions
	LOGICAL*1 BFTUCH,BLTUCH		! connections
	REAL      DUMMY
	REAL      RAB
	REAL      RBLA,RBFA		! ratio got from TSTATT
C
C function:
	LOGICAL   TSTATT
C
C ......................................................................
C
	PASS=0
	DO 10 III=1,MAXCHN
	  PASALT(III)=0
10	CONTINUE
C
20	PASS=PASS + 1
	  CALL CHNLST			! to enable access to points
	  ALTRD=.FALSE.
	  DO 120 ACHN=1,MAXCHN		! go through all pairs of chains
	    IF (CHAIN(ACHN) .LE.0)    GO TO 120
	    IF (PASALT(ACHN).EQ.PASS) GO TO 120	! await next pass
	    IF (LENGTH(ACHN).GE.SMLL) GO TO 30
	    CHAIN(ACHN)=0			! clear out small chains
	    GO TO 120
C
30	    DO 110 BCHN=1,MAXCHN
	      IF (CHAIN(BCHN) .LE.0)    GO TO 110
	      IF (PASALT(BCHN).EQ.PASS) GO TO 110   ! await next pass
	      IF (LENGTH(BCHN).LT.SMLL) GO TO 110   ! too small
C
C waste of time unless ACHN or BCHN altered last pass.
	      IF (PASALT(ACHN).LT.PASS-1 .AND.
     &		  PASALT(BCHN).LT.PASS-1) GO TO 110
	      IF (ACHN.EQ.BCHN) GO TO 110
C
C consider how this pair contact one another.
	      KKK=NODE(FIRST(BCHN))
	      BFTUCH=TSTATT(ENCBUF(X,KKK),ENCBUF(Y,KKK),ACHN,EPS,
     &			    0,0,NBFA,RBFA,DUMMY)
	      KKK=NODE( LAST(BCHN))
	      BLTUCH=TSTATT(ENCBUF(X,KKK),ENCBUF(Y,KKK),ACHN,EPS,
     &			    0,0,NBLA,RBLA,DUMMY)
	      IF (.NOT.(BFTUCH.OR.BLTUCH)) GO TO 110	! no contact
	      IF (BLTUCH.AND.BFTUCH) GO TO 70	! both ends touch ?
C
C ......................................................................
C
C one end of BCHN touches ACHN - how does ACHN touch BCHN ?
	      AWAY=.FALSE.
	      KKK=NODE(FIRST(ACHN))
	      IF (TSTATT(ENCBUF(X,KKK),ENCBUF(Y,KKK),BCHN,EPS,
     &			 0,0,NAB,RAB,DUMMY)) GO TO 40
	      AWAY=.TRUE.
	      KKK=NODE(LAST(ACHN))
	      IF (.NOT.TSTATT(ENCBUF(X,KKK),ENCBUF(Y,KKK),BCHN,EPS,
     &			      0,0,NAB,RAB,DUMMY)) GO TO 110
C
C ACHN & BCHN overlap.
40	      BWAY=BFTUCH
	      IF (BWAY) GO TO 50
	      NATTCH=NBLA
	      GO TO 60
50	      NATTCH=NBFA
60	      IF (.NOT.AWAY) NATTCH=LENGTH(ACHN) - NATTCH
C
C ensure polarities are correct.
	      IF ((CHNSNS(ACHN).XOR.AWAY) .EQV.
     &		  (CHNSNS(BCHN).XOR.BWAY)) GO TO 100
	      GO TO 110
C
C ......................................................................
C
C BCHN lies within ACHN.
70	      AWAY=.TRUE.
	      BWAY=(NBFA+RBFA).LT.(NBLA+RBLA)
C
C ensure polarities are correct.
	      IF ((CHNSNS(ACHN).XOR.AWAY) .EQV.
     &		  (CHNSNS(BCHN).XOR.BWAY)) GO TO 80
C
C this could be a closed loop of two chains.
	      KKK=NODE(FIRST(ACHN))
	      LLL=NODE( LAST(ACHN))
	      IF (.NOT.(TSTATT(ENCBUF(X,KKK),ENCBUF(Y,KKK),BCHN,EPS,0,0,
     &			       NAB,RAB,DUMMY).AND.
     &			TSTATT(ENCBUF(X,LLL),ENCBUF(Y,LLL),BCHN,EPS,0,0,
     &			       NAB,RAB,DUMMY))) GO TO 110
	      BWAY=.NOT.BWAY			! it's a closed loop
C
80	      IF (BWAY) GO TO 90
	      NATTCH=NBLA
	      GO TO 100
90	      NATTCH=NBFA
C
C ......................................................................
C
C merge the two chains.
100	      CALL CHNMER(ACHN,AWAY,NATTCH,BCHN,BWAY)
	      PASALT(ACHN)=PASS		! record change
	      PASALT(BCHN)=PASS
	      ALTRD=.TRUE.
	      GO TO 120			! can't use ACHN any more
C
110	    CONTINUE			! discrepancy
120	  CONTINUE
C
	IF (ALTRD) GO TO 20		! no match found ?
C
	RETURN
	END
