C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1982-11-03 11:26:20.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION JCLOTW(PX,PY,NPCHN,CHNCLO,CHN2CL,
     &                            DSTCLO,DST2CL,CLOPT)
C
***	MODULE	JCLOTW
***	IDENT	03NO82
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
C	Algorithm rehashed again !!		 DM	18-Jun-1982
C	Algorithm rehashed			 DM	01-Jun-1982
C	SQRT put back in calc of DIST		AJW	23-Sep-1981
C	Tidied					AJW	15-Sep-1981
C	Author					RFT	   Aug-1981
C
C Given a point and its chain number, find the two chains closest to
C the point and the square of their distances from it.
C Returns .TRUE. if two chains not found.
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
C parameters:
***	PARAMETER/PARAMS/
C
C common blocks:
***	COMMON/RSE/
***	COMMON/LINKS/
***	COMMON/LKPARM/
C
C arguments:
	INTEGER	CHNCLO,CHN2CL	! closest & 2nd closest chains
	INTEGER	CLOPT		! node number of closest point on CHNCLO
	INTEGER	NPCHN		! chain number of point
	REAL	DSTCLO,DST2CL	! square of distances from point
	REAL	PX,PY		! point coordinates
C
C local workspace:
	INTEGER	ICHN		! current chain number
	INTEGER	NUM		! current node number
	REAL	DIST		! distance from current node to point
	REAL	MINDST		! closest so far (for current chain)
C
C ......................................................................
C
C ... initialize.
	DSTCLO=1.0E20
	DST2CL=1.0E20
	CHNCLO=-2
	CHN2CL=-2
C
C ... loop through the chains that we're interested in, looking for the
C ... minimum separation.
C ... remember that all 'distances' are in fact squares !
	DO 40 ICHN=1,MAXCHN
	   IF (CHAIN(ICHN).EQ.0) GO TO 40	! ignore null chains ...
	   IF (ICHN.EQ.NPCHN) GO TO 40		! & chain (PX,PY) is on
	   MINDST=1.0E20			! minimum dist. so far
	   NUM=FIRST(ICHN) - 1
C
C ... step NUM along ICHN.
10	   NUM=NUM + 1
	   DIST=(PX-FLOAT(ENCBUF(1,NODE(NUM))))**2 +
     &          (PY-FLOAT(ENCBUF(2,NODE(NUM))))**2
	   IF (DIST.GT.MINDST) GO TO 20
	   MINDST=DIST
	   IF (DIST.LT.DSTCLO) CLOPT=NUM   ! closest chain so far ?
20	   IF (NUM.LT.LAST(ICHN)) GO TO 10 ! finished with this chain ?
C
C ... now MINDST holds effective minimum distance for current chain.
	   IF (MINDST.LT.DSTCLO) GO TO 30
	   IF (MINDST.GE.DST2CL) GO TO 40
C
	   CHN2CL=ICHN			! new second closest chain
	   DST2CL=MINDST
	   GO TO 40
C
C ... new closest chain, so second closest chain is old closest.
30	   CHN2CL=CHNCLO
	   DST2CL=DSTCLO
	   CHNCLO=ICHN			! closest chain is now ICHN
	   DSTCLO=MINDST
40	CONTINUE
C
	JCLOTW=(CHN2CL.EQ.-2)
	RETURN
	END
