C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1985-09-09 18:31:20.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE DRWELF(PITCH)
C
***	MODULE	DRWELF
***	IDENT	09SE85
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	Colour added				 DM	06-Sep-1985
CMOD	CLOCHN handling generalised		 DM	23-May-1983
CMOD	Closes closed chains (for junctions)	 DM	08-Jul-1982
CMOD	Tidied					AJW	12-Feb-1981
CMOD	Adapted from DRWCHN for ELA			26-Apr-1979
C	Created					MCF	08-Dec-1978
C
C Draws edge-chains on the TEK, assuming IWID valid.
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
C parameters:
***	PARAMETER/PARAMS/
C
C arguments:
	INTEGER PITCH		! polarity indicator size
C
C common blocks:
***	COMMON/EXPC/
***	COMMON/RSE/
***	COMMON/LINKS/
***	COMMON/SCPARM/
***	COMMON/SCCORR/
C
C local workspace:
	INTEGER   J,L,T,N	! pointers into chain
	INTEGER   A,B		! more pointers
	REAL      D(2)		! vector
	REAL      R		! its size
C
C function:
	INTEGER	  EXPAND
C
C ......................................................................
C
	N = IWID*WAR*(CRX+CRY)	! box size
	CALL DRWSQ(N,N)
	CALL TXCOL(3)
C
	DO 60 J = 1,MAXCHN
	  T = 0
	  N = CHAIN(J)
10	  IF (N .LE. 0) GOTO 60	! end of chain
	  L = T
	  T = N
	  N = NXT(N)
	  CALL TXMTO (ENCBUF(X,T), ENCBUF(Y,T))
	  IF (N .EQ. 0) GOTO 20
	  CALL TXLTO (ENCBUF(X,N), ENCBUF(Y,N))
	  GOTO 30
C
C ... last point in chain (FIRST, actually !!)
20	  IF (CLOCHN(J))
     &	    CALL TXLTO(ENCBUF(X,NODE(LAST(J))), ENCBUF(Y,NODE(LAST(J))))
	  CALL TXEND
	  CALL TXWT(EXPBUF,EXPAND(' %N',J))
C
30	  A = L
	  B = N
	  IF (A .LE. 0) A = T	! 1st point
	  IF (B .LE. 0) B = T	! last point
	  IF (A .NE. B) GOTO 40	! 1-point chain ?
	  D(X) = 1.0		! yes
	  D(Y) = 0.0
	  GOTO 50
C 
40	  D(X) = ENCBUF(X,B)-ENCBUF(X,A)
	  D(Y) = ENCBUF(Y,B)-ENCBUF(Y,A)
50	  R = SQRT(D(X)**2+D(Y)**2)/PITCH
	  IF (.NOT. CHNSNS(J)) R = -R
	  D(X) = D(X)/R
	  D(Y) = D(Y)/R
	  CALL TXMTO (ENCBUF(X,T), ENCBUF(Y,T))
	  CALL TXLBY (-IFIX(D(Y)), IFIX(D(X)))
	  GOTO 10
60	CONTINUE
C
	CALL TXCOL(1)
	CALL TXEND
	RETURN
	END
