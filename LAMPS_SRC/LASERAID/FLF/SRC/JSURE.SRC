C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-05-08 20:51:00.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION JSURE(FSTCON,CONGOT)
C
***	MODULE	JSURE
***	IDENT	08MY86
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
C Author: D. Meader
C
C	Created 				 DM	01-May-1986
C
C Determines whether the junction which we have just appended was found
C by JMATCH. If so, we need to promote the arm prediction data into an
C appendable state.
C Returns .TRUE. if it is the simple case (just scan again).
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
***	PARAMETER/PARAMS/
C
	INTEGER*2 FSTCON		! first connection number
	INTEGER*2 CONGOT		! number of connections
C
***	COMMON/LKFOLL/
***	COMMON/MPEP/
C
	INTEGER*4 I			! temporary variable
C
C ......................................................................
C
	JSURE=.TRUE.			! assume simple case
C
C ... we know that LSTSEL was a junction, so there can only be a type 4
C ... connection (prediction chain) either by chance (i.e. CONGOT was 1
C ... last time), or if the junction was found by LOCJUN or JMATCH.
C ... to decide between these cases we look at CONNCT(2,1) which holds
C ... the junction number (this is set to zero by LOCJUN and JMATCH),
C ... and QUALTY(1) (which is set negative only by LOCJUN or ourselves).
	IF (CONNCT(4,2).NE.4) GO TO 30	! is conn 2 a prediction chain ?
	IF (LSTSEL.NE.1) GO TO 30	! was the junction conn 1 ?
	IF (CONNCT(2,1).NE.0) GO TO 30	! is the junction number zero ?
	IF (QUALTY(1).LT.0.0) GO TO 20	! is the quality positive ?
C
C ... we were JMATCHed - forget about the junction.
C ... we set QUALTY(1) negative to prevent us from doing this again.
	I=0
10	I=I + 1				! count number of arms
	IF (CONNCT(4,I+2).EQ.4) GO TO 10
	QUALTY(1)=-1.0			! we've been through here once
C
C ... finally prepare to add the connections.
	CONGOT=I			! return number of connections
	FSTCON=2			! N.B. leave connection 1 alone
	BSTCON=0
	JSURE=.FALSE.
	GO TO 30
C
C ... subsequent visit - remember current selection.
20	IF (CHNSEL.NE.0) BSTCON=CHNSEL	! (CHNSEL=0 implies LOCJUN)
	MPOARM(NMP(1))=BSTCON - 1	! reset output arm number
	IF (NMP(1).EQ.1.AND.PENUP) SECJOA=MPOARM(1)
C
30	RETURN
	END
