	SUBROUTINE ASSESS
C
***	MODULE	ASSESS
***	IDENT	28MY86
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	Converged				 DM	28-May-1986
CMOD	Give up if JMAIN fails; JFAIL removed;
CMOD	LSTFRK preserves FRKCOM for LOCJUN etc	 DM	19-May-1986
CMOD	JSURE introduced; yet more tidies	 DM	28-Apr-1986
CMOD	Clear BSTCON if "End of feature ?"	 DM	11-Apr-1986
CMOD	SURE introduced; more tidies		 DM	18-Feb-1986
CMOD	If LSTSEL is a jn don't reset BSTCON etc DM	11-Sep-1985
CMOD	Spot and act on "End of feature ?" msg	 DM	05-Sep-1985
CMOD	Junction scan position has CONNCT(4,)=7	 DM	30-Aug-1985
CMOD	JNCING now tri-state; auto-accept if 3	 DM	20-Aug-1985
CMOD	/ANACOM/ added; junction if ANLYZD.NE.0;
CMOD	tidied					 DM	30-Jul-1985
CMOD	FRKCOM back to 3 again !!		 DM	01-Jun-1984
CMOD	Change macro for junction found from
CMOD	FRKCOM=3 to 27 (mod 2/155)		AJW	09-Dec-1983
CMOD	Do the simple thing if LSTSEL was a
CMOD	junction; can dispense with APJ macro.	WJJ	23-Sep-1982
CMOD	If junction search fail, and not GOT1,
CMOD	set very lost				AJW	13-Aug-1982
CMOD	If GTLST2 returns 2 (no master points),
CMOD	and MERGED, do junction analysis	AJW	08-Jul-1982
CMOD	JFAIL for junction recognition failure	PGH	22-Jun-1982
CMOD	Change "might be junction" test		PGH	16-Jun-1982
CMOD	Test if might be junction		PGH	15-Jun-1982
CMOD	CONGOT passed as arg to JMAIN		AJW	03-Jun-1982
CMOD	USEJNC changed to JMAIN			AJW	16-Sep-1981
CMOD	Proper set up of CNFSED, LOST, VERY on
CMOD	error exit from junction recognition	AJW	14-Aug-1981
CMOD	Commented				AJW	22-Jun-1981
CMOD	Tidied					AJW	27-Jan-1980
CMOD	Created					MCF	06-May-1977
C
C Assesses the situation and informs LINK of the action to be taken.
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
C parameters:
***	PARAMETER/PARAMS/
C
C common blocks:
***	COMMON/ANACOM/
***	COMMON/LINKS/
***	COMMON/LKFOLL/
***	COMMON/LKPARM/
***	COMMON/RSE/
***	COMMON/SCPARM/
C
C workspace:
	REAL      DU,DV,D,DDD
	REAL      DIST
	INTEGER   FSTCON,CONGOT
	INTEGER   I,J,N,NM
	INTEGER   NFST,NLST
	LOGICAL*1 GOT1,GOT2
C
C functions:
	LOGICAL   CENTRE	! near centre of scan ?
	LOGICAL   SIMPLE	! simple reason why can't grow chain ?
	LOGICAL*4 JSURE		! sure we know about the junction arms ?
	LOGICAL*4 SURE		! sure we know what to append next ?
C
C ......................................................................
C
C set up.
	IF (LSTFRK.GE.0) FRKCOM=0		! (-ve => LOCJUN/JMATCH)
	LSTFRK=0
C
C see whether there was a last connection.
	IF (LSTSEL.LE.0) GO TO 30
C
C see if it was a junction, and do simple thing if so.
	IF (CONNCT(4,LSTSEL).NE.5) GO TO 20
	IF (CONNCT(3,LSTSEL).NE.0) GO TO 10	! "End of feature ?" ?
	FRKCOM=3				! yes - get confused
	BSTCON=0				! nothing more to append
	GO TO 190
C
C see if we've finished with this junction yet.
10	IF (JSURE(FSTCON,CONGOT)) GO TO 90	! just scan again
	GO TO 150				! deal with the arms
C
C if we've just appended an apex, re-scan if we can see a junction.
20	IF (ANLYZD.LE.0) GO TO 30
	IF (CONNCT(4,LSTSEL).EQ.3) GO TO 90
C
C finish setting up.
30	FSTCON=1
	BSTCON=0
	DO 40 I=1,MAXCON
	  NXTBST(I)=0
40	CONTINUE
C
C decide what to look at, and how.
	SCAN=.FALSE.
	DIST=LIMIT(10)				! maximum gap
	IF (JUMPED) DIST=10000.0
C
C get two points from the Master Point buffer which are within DIST
C of the start of the scan (START(X/Y)) and separated by at least
C distance STFFNS.
C NLST is the return code, LSTONE and NXTLST are the positions of the 2
C points, NM is the number of the Master Point corresponding to NXTPNT.
	CALL GTLST2(START,DIST,STFFNS,NLST,LSTONE,NXTLST,NM)
	GOT1=NLST.GE.3				! pts not separate or OK
	GOT2=NLST.GE.4				! OK
	IF (.NOT.GOT1) GO TO 50			! starting up
	IF (SIMPLE()) GO TO 90			! simple solution
	GO TO 110
C
C starting up
50	IF (MERGED) GO TO 140
	IF (ANLYZD.LE.0) GO TO 60		! if possible ...
	FSTCON=1				! start on junction
	BSTCON=1
	QUALTY(BSTCON)=-1.0
	NXTBST(BSTCON)=0
	CONNCT(1,BSTCON)=0
	CONNCT(2,BSTCON)=0
	CONNCT(3,BSTCON)=1
	CONNCT(4,BSTCON)=7
	CONGOT=1
	GO TO 100
C
60	CONGOT=0
	DDD=(IPIT*LIMIT(5))**2
	DO 70 J=1,MAXCHN
	   IF (CHAIN(J).LE.0) GO TO 70		! ignore if null chain
C
C get index into ENCBUF of first and last points.
	   NFST=NODE(FIRST(J))
	   NLST=NODE(LAST (J))
	   N=ENCBUF(W,NFST).AND.NEGWID
C
C ignore if (positive or negative edge), and in line mode.
	   IF ((N.EQ.NEGNEG.OR.N.EQ.NEGPOS) .AND. IMOD.NE.0) GO TO 70
C
C get distance between first and last points in chain.
	   DU=FLOAT(ENCBUF(IU,NLST) - ENCBUF(IU,NFST))
	   DV=FLOAT(ENCBUF(IV,NLST) - ENCBUF(IV,NFST))
	   D=DU*DU + DV*DV
	   IF (D.LE.DDD) GO TO 70		! ignore if too short
C
C if OK, set up quality based on length of chain.
	   I=FSTCON + CONGOT
	   QUALTY(I)=WGHT(1)*D
C
C if in edge following mode, work out polarity of edge.
	   IF (ELF) THEN
	      CONNCT(1,I)=-1
	      IF ((N.EQ.NEGNEG).XOR.(IU.EQ.1).XOR.(DU.GT.0))
     &		 CONNCT(1,I)=1
	   ELSE
	      CONNCT(1,I)=0
	   ENDIF
	   CONNCT(2,I)=J
	   CONNCT(3,I)=1
	   CONNCT(4,I)=0
	   CONGOT=CONGOT+1
	   IF (CONGOT.GE.MAXCON) GO TO 80
70	CONTINUE
C
C sort chains into order of quality.
80	CALL ADDASS(FSTCON,CONGOT)
	GO TO 180
C
C simple reason why line cannot be grown any more -
C end or edge of scanned area, or easy junction case.
90	SCAN=.TRUE.
100	LOST=.FALSE.
	CNFSED=.FALSE.
	VERY=.FALSE.
	NLOST=0
	GO TO 190
C
C usual case, choose line segments & sort into order
C of preference of attachment.
110	IF (JNCING.AND.MERGED.AND.(ANLYZD.NE.0)) GO TO 140
	IF (.NOT.FORKED.OR.LSTSEL.LE.0) GO TO 130
	IF (CENTRE()) GO TO 120
C
C not in centre of scan - get it there.
	FRKCOM=5
	GO TO 190
C
C use the FORK information.
120	CALL USEFRK(FSTCON,CONGOT,LIMIT(7),CRSSNG,LSTFRK)
	IF (LSTFRK.LE.0) GO TO 130
	CALL ADDASS(FSTCON,CONGOT)
	FRKCOM=3				! confused
	GO TO 190
C
C if we're SURE we know what to append next then do it, otherwise match
C up the line segments with the digitised line empirically without using
C any fork information.
130	IF (.NOT.SURE(FSTCON,CONGOT))
     &	   CALL MATCH(FSTCON,CONGOT,GOT2.AND..NOT.JUMPED,.NOT.JUMPED)
	CALL ADDASS(FSTCON,CONGOT)
	IF (ANLYZD.GE.0) GO TO 180		! we know what it is
C
C test if might be a junction (pre-ANALYZ).
	IF (.NOT.JNCING) GO TO 180
	IF (JUMPED) GO TO 180			! operator override
	IF (BSTCON.LE.0) GO TO 180		! nothing in hand
	IF (CONGOT.GT.1) GO TO 170		! several options
	IF (CONNCT(4,BSTCON).LE.0) GO TO 180	! ordinary line
	GO TO 170				! wide, apex, or edge
C
C use the junction information.
140	CALL JMAIN(CONGOT)
	IF (CONGOT.LE.0) GO TO 160		! give up
150	FRKCOM=3				! confused
	IF ((ANLYZD.GT.0).AND.(((JNCING.OR.JINHIB).AND.2).NE.0))
     &	   FRKCOM=27				! auto-accept
	ANLYZD=-1
	CALL ADDASS(FSTCON,CONGOT)
	GO TO 190
C
C set very lost.
160	ANLYZD=-1
170	CNFSED=.FALSE.
	LOST  =.TRUE.
	VERY  =.TRUE.
	GO TO 190
C
C sort out what was seen.
180	LOST=BSTCON.EQ.0
	IF (.NOT.LOST) NLOST=-1
	NLOST=NLOST+1
	VERY=NLOST.GT.5		      ! (that 5 is determined by NEWVEC)
	CNFSED=.FALSE.
	IF (LOST) GO TO 190
	CNFSED=(QUALTY(BSTCON).LT.LIMIT(7)) .OR. JUMPED
	IF (NXTBST(BSTCON).EQ.0 .OR. CNFSED) GO TO 190
	CNFSED=ABS(QUALTY(BSTCON)-QUALTY(NXTBST(BSTCON))) .LT. LIMIT(6)
C
190	RETURN
	END
