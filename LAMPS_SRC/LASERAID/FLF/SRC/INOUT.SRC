C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-06-16 12:43:34.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE INOUT(CWD)
C
***	MODULE	INOUT
***	IDENT	16JN86
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	If no argument, display current value	 DM	16-Jun-1986
CMOD	PSP, PLP, POD reorganised and commented;
CMOD	PPP, PAP, JAT, JPT added		 DM	10-Jun-1986
CMOD	Redundant parameters removed		 DM	04-Jun-1986
CMOD	Converged; BRF and ELF added		 DM	28-May-1986
CMOD	STH added (point feature paintout size)	 DM	14-Mar-1986
CMOD	PNT added (default point feature mode)	 DM	18-Oct-1985
CMOD	INV added (invert polarity of encs)	 DM	03-Oct-1985
CMOD	Logical argument -1 only flips l.s. bit,
CMOD	TF() rehashed				 DM	20-Aug-1985
CMOD	EPS, CRC, CRD now under AREA cond too	 DM	23-May-1983
CMOD	FCT - set CORCCP added			AJW	13-Apr-1983
CMOD	FPRIO,PPRIO,WPRIO added			AJW	05-Apr-1983
CMOD	Re-format and re-arrange print-outs	WJJ	16-Dec-1982
CMOD	SPD(IS) - suppress paintout distance	AJW	10-Oct-1982
CMOD	Call to set a logical with argument -1
CMOD	flips state, rather than setting it	WJJ	23-Sep-1982
CMOD	LINING not printed out			AJW	30-Mar-1982
CMOD	Junction parameters removed from
CMOD	/ELFPAR/
CMOD	/SCCORR/ /SCPARM/ /LKPARM/ and /ELFPAR/
CMOD	parameter setting fixed			AJW	19-Jan-1982
CMOD	RGROW removed, and CHWT(3) => CHLIM(4)	AJW	22-Dec-1981
CMOD	Only calls DISMOD and FLEVEL if HADLDI	AJW	20-May-1981
CMOD	Tidied					AJW	16-Feb-1981
CMOD	Conditionalisation tidied		MCF	28-May-1980
CMOD	NHATCH added				AJW	18-Oct-1979
CMOD	Created					MCF	18-Apr-1977
C
C Set or type parameters.
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
C parameters:
***	PARAMETER/PARAMS/
C
C argument:
	INTEGER CWD
C
C common blocks:
***	COMMON/DIGC/
***	COMMON/ELFPAR/
***	COMMON/GRID/
***	COMMON/GRPARM/
***	COMMON/JNCLST/
***	COMMON/LKPARM/
***	COMMON/MASTER/
***	COMMON/MPEP/
***	COMMON/SCCORR/
***	COMMON/SCPARM/
	COMMON/THKPAR/SEP,SPOT
	REAL          SEP,SPOT
C
C workspace (mostly convenient equivalences):
	INTEGER      LKPINT(LKPINM)
	EQUIVALENCE (LKPINT(1),IDSIZE)
C
	REAL         LKPREL(LKPRNM)
	EQUIVALENCE (LKPREL(1),THKNSS)
C
	LOGICAL*1    LKPLOG(LKPLNM)
	EQUIVALENCE (LKPLOG(1),ECHO)
C
	INTEGER      SCPINT(SCPINM)
	EQUIVALENCE (SCPINT(1),IMOD)
C
	REAL         SCCREL(SCCRNM)
	EQUIVALENCE (SCCREL(1),CRX)
C
	REAL         ELFREL(ELFRNM)
	EQUIVALENCE (ELFREL(1),EPSLON)
C
	INTEGER   III
	INTEGER	  TF(0:1)
	LOGICAL*1 HADPPP		! had PPP command ?
	LOGICAL*1 PRTALL		! print all parameters ?
C
	DATA TF(0),TF(1)/'-','+'/
C
C ......................................................................
C
	IF (CWD.LE.0) GO TO 730
C
C setting various parameters
	IF (CWD-SCPINM.LE.0) GO TO 10
	CWD=CWD-SCPINM
	IF (CWD-SCCRNM.LE.0) GO TO 30
	CWD=CWD-SCCRNM
	IF (CWD-LKPRNM.LE.0) GO TO 50
	CWD=CWD-LKPRNM
	IF (CWD-LKPINM.LE.0) GO TO 70
	CWD=CWD-LKPINM
	IF (CWD-LKPLNM.LE.0) GO TO 90
	CWD=CWD-LKPLNM
	IF (CWD-ELFRNM.LE.0) GO TO 140
	CWD=CWD-ELFRNM
C
	HADPPP=.FALSE.
	PRTALL=.FALSE.
C
	GO TO (  120,130,
     &		160,180,200,220,240,260,
     &		280,300,
     &		320,340,360,380,400,
     &		420,
     &		440,460,470,480,520,
     &		540,
     &		570,590,610,
     &		630,640,660,650,680,670),CWD
	GO TO 730
C
C set /SCPARM/
10	IF (NUMINT.EQ.0) GO TO 20
	SCPINT(CWD)=INTARG
	GO TO 730
20	INTARG=SCPINT(CWD)
	GO TO 710
C
C set /SCCORR/
30	IF (NUMREL.EQ.0) GO TO 40
	SCCREL(CWD)=REALA1
	GO TO 730
40	REALA1=SCCREL(CWD)
	GO TO 720
C
C set /LKPARM/
50	IF (NUMREL.EQ.0) GO TO 60
	LKPREL(CWD)=REALA1
	GO TO 730
60	REALA1=LKPREL(CWD)
	GO TO 720
C
70	IF (NUMINT.EQ.0) GO TO 80
	LKPINT(CWD)=INTARG
	GO TO 730
80	INTARG=LKPINT(CWD)
	GO TO 710
C
90	IF (NUMINT.EQ.0) GO TO 110
	IF (INTARG.NE.-1) GO TO 100
	LKPLOG(CWD)=(LKPLOG(CWD).XOR.1)	! flip logical if arg was -1
	GO TO 730
100	LKPLOG(CWD)=INTARG		! set logical if arg.ne.-1
	GO TO 730
110	INTARG=LKPLOG(CWD)
	GO TO 710
C
C set LIMs & Ws
120	IF (NUMREL.EQ.0) GO TO 680
	IF (INTARG.GT.0.AND.INTARG.LE.MAXLIM) LIMIT(INTARG)=REALA1
	GO TO 730
130	IF (NUMREL.EQ.0) GO TO 680
	IF (INTARG.GT.0.AND.INTARG.LE.MAXWT) WGHT(INTARG)=REALA1
	GO TO 730
C
C set /ELFPAR/
140	IF (NUMREL.EQ.0) GO TO 150
	ELFREL(CWD)=REALA1
	GO TO 730
150	REALA1=ELFREL(CWD)
	GO TO 720
C
C /MPEP/
160	IF (NUMREL.EQ.0) GO TO 170
	H(1)=REALA1
	GO TO 730
170	REALA1=H(1)
	GO TO 720
C
180	IF (NUMREL.EQ.0) GO TO 190
	S(1)=REALA1
	GO TO 730
190	REALA1=S(1)
	GO TO 720
C
200	IF (NUMREL.EQ.0) GO TO 210
	E(1)=REALA1
	GO TO 730
210	REALA1=E(1)
	GO TO 720
C
220	IF (NUMINT.EQ.0) GO TO 230
	MPLIM=INTARG
	GO TO 730
230	INTARG=MPLIM
	GO TO 710
C
240	IF (NUMINT.EQ.0) GO TO 250
	MPLEFT=INTARG
	GO TO 730
250	INTARG=MPLEFT
	GO TO 710
C
260	IF (NUMINT.EQ.0) GO TO 270
	MPTOTE=INTARG
	GO TO 730
270	INTARG=MPTOTE
	GO TO 710
C
C /THKPAR/
280	IF (NUMREL.EQ.0) GO TO 290
	SEP=REALA1
	GO TO 730
290	REALA1=SEP
	GO TO 720
C
300	IF (NUMREL.EQ.0) GO TO 310
	SPOT=REALA1
	GO TO 730
310	REALA1=SPOT
	GO TO 720
C
C /GRPARM/
320	IF (NUMINT.EQ.0) GO TO 330
	ISCAT=INTARG
	GO TO 730
330	INTARG=ISCAT
	GO TO 710
C
340	IF (NUMINT.EQ.0) GO TO 350
	IGREP=INTARG
	GO TO 730
350	INTARG=IGREP
	GO TO 710
C
360	IF (NUMINT.EQ.0) GO TO 370
	IGRAVE=INTARG
	GO TO 730
370	INTARG=IGRAVE
	GO TO 710
C
380	IF (NUMREL.EQ.0) GO TO 390
	OFFNSS=REALA1
	GO TO 730
390	REALA1=OFFNSS
	GO TO 720
C
400	IF (NUMREL.EQ.0) GO TO 410
	FQUAL=REALA1
	GO TO 730
410	REALA1=FQUAL
	GO TO 720
C
C /GRID/
420	IF (NUMREL.EQ.0) GO TO 430
	GRIDSQ=REALA1
	GO TO 730
430	REALA1=GRIDSQ
	GO TO 720
C
C /MASTER/
440	IF (NUMINT.EQ.0) GO TO 450
	REDFOC=INTARG
	IF (.NOT.HADLDI) GO TO 730
	CALL DISMOD(0)
	CALL FLEVEL(INTARG)
	GO TO 730
450	INTARG=REDFOC
	GO TO 710
C
C FPRIO,PPRIO,WPRIO
460	III=1
	GO TO 490
470	III=2
	GO TO 490
480	III=3
C
490	IF (NUMINT.EQ.0) GO TO 500
	IF ((INTARG.LE.0).OR.(INTARG.GE.11)) GO TO 510
	PRIOAR(III)=INTARG
	GO TO 730
500	INTARG=PRIOAR(III)
	GO TO 710
C
510	CALL WRITEF('Bad priority %N, should be in the range 1 - 10',
     &				INTARG)
	GO TO 730
C
C FCT
520	IF (NUMINT.EQ.0) GO TO 530
	CORCCP=INTARG
	GO TO 730
530	INTARG=CORCCP
	GO TO 710
C
C /DIGC/
540	IF (NUMINT.EQ.0) GO TO 550
	IF (INTARG.LT.0.OR.INTARG.GT.1) GO TO 560
	PNTINI=INTARG
	GO TO 730
C
550	CALL WRITEF('Current point feature mode is %N',PNTINI)
	GO TO 730
C
560	CALL WRITEF('Invalid point feature mode %N%C',INTARG,7)
	GO TO 730
C
C /JNCLST/
570	IF (NUMREL.EQ.0) GO TO 580
	JANGTL=REALA1
	GO TO 730
580	REALA1=JANGTL
	GO TO 720
C
590	IF (NUMREL.EQ.0) GO TO 600
	JPOSTL=REALA1
	GO TO 730
600	REALA1=JPOSTL
	GO TO 720
C
610	IF (NUMREL.EQ.0) GO TO 620
	JWIDTL=REALA1
	GO TO 730
620	REALA1=JWIDTL
	GO TO 720
C
C Write out parameters from common
C
C PPP - Print Primary (user) Parameters.
630	HADPPP=.TRUE.
C
C PAP - Print All Parameters
640	PRTALL=.TRUE.
C
C PLP - Most relevant following parameters
650	CALL EXPAND(
     &'Switches:  %A1ELF  %A1JNC  %A1INV  %A1VEX  %A1SMO  %A1EDG  ',
     &    TF(ELF.AND.1),TF(JNCING.AND.1),TF(INVPOL.AND.1),
     &    TF(VEXING.AND.1),TF(SMOING.AND.1),TF(EDGING.AND.1))
	CALL APPEND(
     &		 '%A1BCH  %A1ECH  %A1TCH  %A1BRF',
     &	  TF(BAKCHK.AND.1),TF(ECHO.AND.1),TF(TMPCHK.AND.1),
     &	  TF(BRIEF.AND.1))
	CALL LINOUT
	CALL EXPAND(
     &'Line type:  TYP %I5   ID  %I5   WID %I5   PIT %I5',
     &		   LTYPE,    IDSIZE,   IWID,     IPIT)
	IF (.NOT.HADPPP) CALL APPEND(
     &	       '   INI %I5',
     &		   INICOM)
	CALL LINOUT
	CALL WRITEF(
     &'Filtering:  ETA %F5.1   H %F7.0   S %F7.0   E %F7.0',
     &		   ETA,        H(1),     S(1),     E(1))
	IF (.NOT.HADPPP) CALL WRITEF(
     &'            CRC %F5.3   CRD %F5.0',
     &		   CRUCOS,     CRUDIS)
	CALL WRITEF(
     &'Following:  GAP %F5.0   SHA %F5.2',
     &		   GAPSIZ,     SHRPNS)
	CALL EXPAND(
     &'Junctions:  CRS %I5   JPT %F5.0',
     &		   CRSSNG,   JPOSTL)
	IF (.NOT.HADPPP) CALL APPEND(
     &	       '   JAT %F5.0   JWT %F5.2',
     &		   JANGTL,     JWIDTL)
	CALL LINOUT
	CALL EXPAND(
     &'Trackjump:  NEA %F5.2',
     &		   NEARNS)
	IF (.NOT.HADPPP) CALL APPEND(
     &	       '   BET %F5.2   PRL %F5.2',
     &		   BETA,       PRLLNS)
	CALL LINOUT
	IF (.NOT.HADPPP) CALL WRITEF(
     &'Backtrack:  MPN %F5.1   MPB %I5',
     &		   MPNEAR,     NMPBAK)
	IF (.NOT.HADPPP) CALL WRITEF(
     &'Chaining:   CLU %F5.2   CLV %F5.2   CLW %F5.2   CLX %F5.2',
     &		   CHLIM(1),   CHLIM(2),   CHLIM(3),   CHLIM(4))
	IF (.NOT.HADPPP) CALL WRITEF(
     &'            EPS %F5.1   HOL %I5   RIP %I5',
     &		   EPSLON,     HOLE,     RIPPLE)
	IF (.NOT.HADPPP) CALL WRITEF(
     &'Matching:   ANG %F5.3   LEN %F5.3   DST %F5.3   WTH %F5.3',
     &		   ANGWGT,     LENWGT,     DSTWGT,     WTHWGT)
	IF (.NOT.HADPPP) CALL WRITEF(
     &'            DIF %F5.2   SMA %F5.2   STI %F5.0   BIA %F5.2',
     &		   WIDDIF,     SMLLNS,	   STFFNS,     BIAS)
	IF (.NOT.PRTALL) GO TO 730
C
C PSP - /SCPARM/ & /SCCORR/
660	IF (.NOT.HADPPP) CALL WRITEF(
     &'Scanning:   MOD %I5   FRQ %I5   WID %I5   PIT %I5',
     &		   IMOD,     IFRQ,     IWID,     IPIT)
	IF (.NOT.HADPPP) CALL WRITEF(
     &'            TLO %I5   TSW %I5   FLE %I5   TMS %I5',
     &		   ITLO,     ITSW,     REDFOC,	ITMS)
	IF (.NOT.HADPPP) CALL WRITEF(
     &'            CRX %F5.2   CRY %F5.2',
     &		   CRX,        CRY)
	IF (.NOT.HADPPP) CALL WRITEF(
     &'            OFX %F5.0   OFY %F5.0',
     &		   OFX,        OFY)
	IF (.NOT.HADPPP) CALL WRITEF(
     &'            PHX %F5.1   PHY %F5.1',
     &		   PHX,        PHY)
	CALL WRITEF(
     &'Priority:   FPR %I5   PPR %I5   WPR %I5',
     &		   FPRIO,    PPRIO,    WPRIO)
	CALL WRITEF(
     &'Point Mode: PNT %I5',
     &		   PNTINI)
	IF (.NOT.PRTALL) GO TO 730
C
C POD - others:
670	CALL EXPAND(
     &'Paintout:   THK %F5.1   PTH %F5.1   STH %F5.1   HCH %I5   ',
     &		   THKNSS,     THKPNT,     SNGLTH,     NHATCH)
	CALL APPEND(
     &            'SPD %F5.0',
     &		   SPDIS)
	CALL LINOUT
	IF (.NOT.HADPPP) CALL WRITEF(
     &'            SEP %F5.3   SPO %F5.3',
     &  	   SEP,        SPOT)
	IF (.NOT.HADPPP) CALL WRITEF(
     &'Fiducials:  OFF %F5.2   QUA %F5.2   SCT %I5   REP %I5   AVE %I5',
     &		   OFFNSS,     FQUAL,      ISCAT,    IGREP,    IGRAVE)
	IF (.NOT.HADPPP) CALL WRITEF(
     &'            GRI %F5.1   TIK %F5.0   CHF %I5   FCT %I5',
     &		   GRIDSQ,     TIKSIZ,     CPCHEK,   CORCCP)
	IF (.NOT.HADPPP) CALL WRITEF(
     &'Masterpts:  MPL %I5   MPF %I5   MPX %I5',
     &		   MPLIM,    MPLEFT,   MPTOTE)
	IF (.NOT.HADPPP) CALL WRITEF(
     &'Squaring:   SQT %F5.0',
     &		   SQUTOL)
	GO TO 730
C
C PLW - limits & weights from /LKPARM/
680	DO 690 III=1,MAXLIM
	  CALL WRITEF('LIM%N %F10.1',III,LIMIT(III))
690	CONTINUE
C
	DO 700 III=1,MAXWT
	  CALL WRITEF('W%N %F8.2',III,WGHT(III))
700	CONTINUE
	GO TO 730
C
C show current value.
710	CALL WRITEF('Current value is %N',INTARG)
	GO TO 730
720	CALL WRITEF('Current value is %F0.3',REALA1)
C
730	RETURN
	END
