C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-10-28 15:15:02.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE FLSUB(CWD)
C
***	MODULE	FLSUB
***	IDENT	28OC86
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	CORCAL is now a function		 DM	28-Oct-1986
CMOD	ACB warns about SAC; STNDAC added	 DM	25-Jul-1986
CMOD	NF number no longer limited to 9999	 DM	21-Jul-1986
CMOD	CHKFID has 2nd argument			 DM	16-Jul-1986
CMOD	Corner points are now control points	 DM	14-Jul-1986
CMOD	UNICPT removed; CFT replaced by FCOEFF	 DM	26-Jun-1986
CMOD	Converged; tidied			 DM	25-Jun-1986
CMOD	RECover implemented			 DM	24-Jun-1986
CMOD	STRLEN introduced in WHAt		 DM	28-Feb-1986
CMOD	Output warning message if no next jnctn	 DM	24-Feb-1986
CMOD	CP and CCP don't clear NFID		 DM	08-Nov-1985
CMOD	PNT added; MID removed; tidied		 DM	18-Oct-1985
CMOD
CMOD	*** OLD UPDATES NOW IN FLF.UPD ***	 DM	30-May-1986
CMOD
CMOD	Created					MCF	 1-Jun-1978
C
C Deals with simple commands in the main program.
C
C Command numbers defined in CMDPST ( /MAINC/ )
C When changing this routine, ensure you don't upset the workings
C of PRECOM.
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
C parameters:
***	PARAMETER/PARAMS/
C
C argument:
	INTEGER CWD		! command number
C
C common blocks:
***	COMMON/DEBUG/
***	COMMON/DIGC/
***	COMMON/GUIDE/
***	COMMON/JCRCOM/
***	COMMON/JNCLST/
***	COMMON/LKPARM/
***	COMMON/MAINC/
***	COMMON/MASTER/
***	COMMON/SCPARM/
***	COMMON/TIMING/
***	COMMON/TXTC/
C
C workspace:
	BYTE	  ICH
	INTEGER   III,JJJ
	INTEGER	  KX,KY
	INTEGER*4 LLL
	LOGICAL*1 FIDERR
	LOGICAL*1 LOG
	REAL	  CPTEMP(4,4)	! temporary corner points
	REAL      TIKTMP(2)
	REAL      TX,TY		! temporary record of a position
	REAL      XSIZ,YSIZ
C
C functions:
	INTEGER	  EXPAND
	INTEGER*4 STRLEN
	INTEGER*4 TRXSET
	LOGICAL	  CORCAL
	LOGICAL	  CPSET
	LOGICAL   PEND
	LOGICAL   RDCH
	LOGICAL   RDCHS
	LOGICAL   RDFILT
	LOGICAL	  RECOVR
	LOGICAL   SETOVR
	LOGICAL	  VOLDFL
C
C .....................................................................
C
	GO TO (   10,  10,  10,  10,	   ! ..., ..., ..., REP
     &		  10,  10,  10,  80,	   ! ..., ..., ..., GNF
     &		 120, 130, 140, 160,	   ! POS, FIN, DRL, REV
     &		 150, 670, 710,  10,	   ! OPE, DEC, INC, ...
     &		 180,  40, 110,  70,	   !  PO, GUI, VFG, SKI
     &		  10,  10,  10, 190,	   ! WIN, FOR, LOC, MCF
     &		 220, 200, 210, 230, 240,  !  CP, CFT, CHF, CAL, CCP
     &		 400,			   ! REC
     &		 410, 430, 440, 450,	   !  ID,  TC, TEX, LAY
     &		 480, 490, 500, 520, 540,  !  SS,  PT,  NF, ACB, SAC
     &		 550, 560,		   ! PON, PMF
     &		 570, 580, 610, 620,	   ! FCF, TYF, PFB, GFC
     &		 760, 770, 780,		   ! CHK, MNF, ANF
     &		 790, 800, 810, 820, 840,  ! HTD, HTI, MHT, AHT, NFI
     &		 850, 880, 890,		   ! PNT, TIM, ZTI
     &		 910, 920,		   ! PMI, PME
     &		 950, 960, 970,1000,	   ! PCF, TYP, CAN, WHA
     &		1010,1030,1040		   ! RAS, ZJC, WIZ
     &		),CWD
C
C unexpected command number
10	CALL WRITEF('FLSUB: Entered with CWD of %N !',CWD)
	GO TO 20
C
C reset command decoding
20	DCPTR=-1
	TXTPTR=-2
C
C return
30	RETURN
C
C GUI [n] - open guidance file n
C
40	IF (PEND(2)) GO TO 20
C
	LOG=RDCHS(III)		! see if anything on command line
	IF (LOG) GO TO 60	! nothing there
	CALL BSCH		! unread the char
	LOG=RDFILT(GUDNAM,80,'LSL$GU:IFF.IFF;0',
     &		   .TRUE.,.FALSE.,.FALSE.,III)
	IF (LOG) GO TO 50
	IF (III.LT.80) GUDNAM(III+1:III+1)=CHAR(0)
	CALL SETGUD(.TRUE.)
	GO TO 30
50	CALL WRITEF('%CError %N reading guidance file name%C',7,III,7)
	GO TO 20		! chuck away command line
60	CALL SETGUD(.FALSE.)
	GO TO 30
C
C SKIp to feature n in guidance file
70	SKPGUD=INTARG
C
C fall through to join ...
C GNF - Get Next Feature
80	IF (GUDOPN) GO TO 100
	IF (PEND(3)) GO TO 20
	IF (JCRPOI.LT.JCRNUM) GO TO 90
	JCRPOI=0
	IF (JCRNUM.GT.0) GO TO 90
	CALL WRITEF('*** No incomplete junctions in list%C',7)
	GO TO 20
90	JCRPOI=JCRPOI + 1
	TX=JCRPOS(X,JCRPOI)
	TY=JCRPOS(Y,JCRPOI)
	CALL TRXUSE(TX,TY,BCOEFF)
	CALL CSWT(TX,TY)
	GO TO 30
C
100	USEGUD=.TRUE.
	GO TO 30
C
C VFG i [r]  - Very Fast Guidance control
C	i	0,1 => disable,enable it
C	r	time delay in seconds
C		ommitting this leaves delay unchanged,
C		supplying a zero, or -ve number, disables
C		the queued command auto-start.
110	FASTEF=INTARG.NE.0
	IF (NUMREL .GT. 0) GUDTIM=REALA1*100.0
	GO TO 30
C
C POS - set no paint out (paint out suppressed)
120	POSUPR=.NOT.POSUPR
	GO TO 30
C
C FINd - set auto find
130	DOFIND=.NOT.DOFIND
	GO TO 30
C
C SQR - set square feature flag
140	OSSQU=.NOT.OSSQU
	GO TO 30
C
C OPEN feature
150	OPEN=.NOT.OPEN
	GO TO 30
C
C REVersed feature
160	IF (OPEN) GO TO 170
	REVRSE=.TRUE.
	GO TO 30
170	CALL WRITEF('%CCan''t reverse open feature%C',7,7)
	GO TO 30
C
C PO - set paint only
180	PAINTO=.TRUE.
	GO TO 30
C
C MCF - measure check fid (repeatedly)
190	QUECOM=FLMMCF
	QUETIM=CHFRMT
	CALL PEND(1)
	CALL NEWTIM(TCORN)
	CALL CHKFID(FIDERR,.FALSE.)
	CALL NEWTIM(TMAIN)
	GO TO 30
C
C CFT r	- set check fid remeasurement time
200	CHFRMT=REALA1*100.0
	GO TO 30
C
C CHF [i [j [r]]] - check fid parameters
210	IF (NUMINT.GE.1.AND.INTAR(1).GE.0) THEN
	   NFID=INTAR(1)
	   IF (NUMINT.GE.2) NFIDNF=INTAR(2)
	   IF (NUMREL.GE.1) FIDMAX=REALA1
	ENDIF
	CALL EXPAND('Fiducial')
	IF (NFIDNF.LE.0) THEN
	   CALL APPEND(' check disabled')
	ELSE
	   IF (NFID.EQ.0) THEN
	      CALL APPEND(' check')
	   ELSE
	      CALL APPEND(' %N',NFID)
	   ENDIF
	   CALL APPEND(' every ')
	   IF (NFIDNF.EQ.1) THEN
	      CALL APPEND('feature')
	   ELSE
	      CALL APPEND('%N features',NFIDNF)
	   ENDIF
	   CALL APPEND(' with error limit %F0.1',FIDMAX)
	ENDIF
	CALL LINOUT
	GO TO 30
C
C CP - digitise corners of map
220	CORTYP=1
	IF (CORCCP.GT.0) CORTYP=3
	GO TO 250
C
C CAL [r] - calibrate with given grid spacing
230	CORTYP=2
	GO TO 250
C
C CCP - Calibrate with Corner Points
240	CORTYP=3
C
250	CALL PEND(1)
	CALL NEWTIM(TCORN)
	IF (HADLDI) CALL CSRD(TX,TY)
	III=CORCAL()
	CALL CSWT(TX,TY)
	CALL NEWTIM(TMAIN)
	IF (III) GO TO 20		! measurement abandoned ?
C
C ......................................................................
C
C first corner point measurement, or doing a CALibration.
260	IF (COR1ST.OR.(CORTYP.EQ.2)) THEN
	   DO 270 III=1,4
	      CPTEMP(1,III)=CPMEAS(1,III)  ! l.h.s. is HRD space ...
	      CPTEMP(2,III)=CPMEAS(2,III)
	      CPTEMP(3,III)=CPMEAS(1,III)  ! r.h.s. (will be) o/p space
	      CPTEMP(4,III)=CPMEAS(2,III)
	      CALL TRXUSE(CPTEMP(3,III),CPTEMP(4,III),FCOEFF)
270	   CONTINUE
	   IF (CORTYP.NE.2) COR1ST=.FALSE.
	ELSE
C
C ......................................................................
C
C subsequent corner point measurement - overlay output space.
C calculate 4-point transform from map space to o/p space.
	   DO 280 III=1,4		   ! exchange CP sides
	      CPTEMP(1,III)=CPTS(3,III)
	      CPTEMP(2,III)=CPTS(4,III)
	      CPTEMP(3,III)=CPTS(1,III)
	      CPTEMP(4,III)=CPTS(2,III)
280	   CONTINUE
C
	   IF (CPSET(CPTEMP)) THEN	   ! get coefficients
	      CALL WRITEF('*** Bad control points%C',7)
	      CPDONE=.FALSE.
	      CPGOT=.FALSE.
	      GO TO 20
	   ENDIF
C
	   DO 290 III=1,4
	      CPTEMP(1,III)=CPMEAS(1,III)  ! l.h.s. is HRD space ...
	      CPTEMP(2,III)=CPMEAS(2,III)
	      CPTEMP(3,III)=CPMEAS(3,III)  ! r.h.s. (will be) o/p space
	      CPTEMP(4,III)=CPMEAS(4,III)
	      CALL CPUSE(CPTEMP(3,III),CPTEMP(4,III))
290	   CONTINUE
	ENDIF
C
C ......................................................................
C
C set up new CPTS for output to the IFF file.
	IF (CORTYP.EQ.2) GO TO 310	! unless we're doing a CAL
	DO 300 III=1,4
	   CPTS(1,III)=CPTEMP(3,III)	! l.h.s. is output space
	   CPTS(2,III)=CPTEMP(4,III)
	   CPTS(3,III)=CPMEAS(3,III)	! r.h.s. is map space
	   CPTS(4,III)=CPMEAS(4,III)
300	CONTINUE
C
C set up FCOEFF/BCOEFF.
310	LLL=TRXSET(FCOEFF,CPTEMP,FCOEFF,BCOEFF)
	IF (LLL.EQ.1) GO TO 330		! did we succeed ?
	CPDONE=.FALSE.			! no - make him remeasure CPs
	IF (LLL.EQ.42) GO TO 320	! we KNOW that CPs are duff
	CALL WRITEF('*** Bad control points or cubic coefficients%C',7)
	GO TO 20
320	CPGOT=.FALSE.			! don't go back to duff pos.
	GO TO 20
C
C ... if very old file, overlay it onto our new coordinate system.
330	IF (CORTYP.EQ.2) GO TO 20	! unless we're doing a CAL
	IF (.NOT.NEWIFF) THEN
	   CALL WRITEF('Reading in the old data ...')
	   IF (VOLDFL()) THEN
	      CALL WRITEF(
     &	  'Reading abandoned - IFF file may require expert attention !')
	   ELSE
	      CALL WRITEF('No errors detected')
	   ENDIF
	   NEWIFF=.TRUE.
	ENDIF
C
C ... deal with tick coordinates.
	IF (TIKSIZ.LT.0.0) GO TO 390
	XSIZ=TIKSIZ			! get tick size in output space
	TIKTMP(2)=0.0
	CALL TRXUSE(XSIZ,TIKTMP(2),FCOEFF)
	TIKTMP(1)=0.0
	TIKTMP(2)=0.0
	CALL TRXUSE(TIKTMP(1),TIKTMP(2),FCOEFF)
	XSIZ=XSIZ - TIKTMP(1)
	YSIZ=XSIZ			! make X and Y size the same
C	  
	DO 380 JJJ=1,4			! for each corner (NW,SW,SE,NE)
	   KX=5 - JJJ			! corner X tick arm 'points' to
	   KY=MOD(KX+1,4) + 1		! same for Y tick arm (2,1,4,3)
	   DO 370 III=1,3		! for each point in the tick
	      TX=CPTS(X,JJJ)		! coords of centre of tick
	      TY=CPTS(Y,JJJ)
	      GO TO (340,360,350),III	! decide which offset required
C
C ... get vector from this CP to other. 2nd arg==> sign of tick offset.
340	      TX=TX + SIGN(XSIZ,CPTS(X,KX)-CPTS(X,JJJ))
	      GO TO 360
C
350	      TY=TY + SIGN(YSIZ,CPTS(Y,KY)-CPTS(Y,JJJ))
C
360	      TICKS(X,III,JJJ)=TX
	      TICKS(Y,III,JJJ)=TY
370	   CONTINUE
380	CONTINUE
390	EOP=.TRUE.		! start a new section with these CPs
	CPDONE=.TRUE.
	IF (INOVER) CALL ENDOVR	! closing any open overlay
	INOVER=.FALSE.
	GO TO 20
C
C REC/UCC - Recover from previous (presumably bad) CALibration.
400	IF (PEND(2)) GO TO 20
	CALL WRITEF('Attempting to supersede previous calibration ...')
	IF (RECOVR()) THEN
	   CALL WRITEF('The IFF file may require expert attention !!')
	ELSE
	   CALL WRITEF('No errors detected')
	ENDIF
	GO TO 30
C
C set OPerator IDEnt etc for new section header
410	III=1
	IF (RDCHS(NSMESS(III))) GO TO 20
420	III=III + 1
	IF (RDCH(NSMESS(III))) GO TO 20
	GO TO 420
C
C put TC <text> into MPS
430	IF (PEND(3)) GO TO 20
	III=DCPTR
	IF (TXTBUF(III).EQ.' ') III=III + 1
	CALL IFFTC(TXTBUF(III))
	GO TO 20
C
C TEX <text> - insert literal text
440	IF (PEND(3)) GO TO 20
	III=DCPTR
	IF (TXTBUF(III).EQ.' ') III=III + 1
	CALL IFFCH(TXTBUF(III))
	GO TO 20
C
C select new overlay (OV or LAY n)
450	IF (NUMINT.EQ.0) GO TO 460
	CALL PEND(1)
	EOP=SETOVR(INTARG,.TRUE.)
	GO TO 30
460	IF (OVRNUM.GT.0)CALL WRITEF('Layer %N selected',OVRLAY(OVRNUM))
470	IF (OVRNUM.LE.0)CALL WRITEF('No layer selected')
	GO TO 30
C
C SS i - SS entry in file (symbol select)
480	IF (PEND(3)) GO TO 20
	CALL IFFSS(INTARG)
	GO TO 30
C
C PT i - SL entry (plotter type or symbol library)
490	IF (PEND(3)) GO TO 20
	CALL IFFSL(INTARG)
	GO TO 30
C
C set NF number
500	IF (INTARG.LE.0) GO TO 510
	IF (OVRNUM.LE.0) GO TO 470
	FNUM(OVRNUM)=INTARG
	GO TO 30
510	CALL WRITEF('NF number out of range')
	GO TO 30
C
C ACB base - show or alter the Ancillary Code Base. This value is added
C to the TYPE field of all ACs subsequently added using the AC or SAC
C command facilities. Note that this does NOT affect special LSL ACs
C such as our automatic use of AC 3 for height coding.
520	IF (NUMINT.EQ.0) GO TO 530
	ACBASE=INTARG
	IF (SACSET) CALL WRITEF(
     &	   'WARNING - Standing Ancillary Code not changed%C',7)
	GO TO 20
530	CALL WRITEF('Current Ancillary Code Base is %N',ACBASE)
	GO TO 20
C
C SAC type value [text] - show, create, alter or remove the Standing
C Ancillary Code. This AC is inserted in all subsequent features until
C explicitly disabled (by SAC 0). Note that SAC 0 0 is a valid setting.
C 'Value' is examined for a decimal point and is stored as a real number
C if one is found. AC type 3 is a special case and is ALWAYS stored as a
C real (the decimal point may be omitted if appropriate).
540	CALL STNDAC(.FALSE.)
	GO TO 20
C
C PON - print overlay numbers
550	CALL WRITEF('Layer numbers:')
	CALL TABTYP (OVRLAY,MAXOVR)
	GO TO 460
C
C PMF - print maximum feature numbers
560	CALL WRITEF('Maximum feature numbers:')
	CALL TABTYP (FNUM,MAXOVR)
	GO TO 460
C
C Commands dealing with the FC & type settings for FBs
C
C FCF n m	set feature code for FBn to m
570	IF (INTARG.LE.0 .OR. INTARG.GT.MAXFB) GO TO 590
	ITFTAB(INTARG)=INTAR(2)	! no check on code
	GO TO 20
C
C TYF n m	set type for FBn to m
580	IF (INTARG.LE.0 .OR. INTARG.GT.MAXFB) GO TO 590
	IF (INTAR(2).LE.0.OR.INTAR(2).GT.MAXTYP) GO TO 600
	TYFTAB(INTARG)=INTAR(2)
	GO TO 20
C
C errors in FCF & TYF
590	CALL WRITEF('Illegal FB')
	GO TO 30
600	CALL WRITEF('Illegal type')
	GO TO 30
C
C PFB - print FB meanings
610	CALL WRITEF('Feature code:')
	CALL WRITEF('%(3 %I4%)   -',ITFTAB(1),ITFTAB(2),ITFTAB(3))
	CALL WRITEF('%(3 %I4%)   -',ITFTAB(5),ITFTAB(6),ITFTAB(7))
	CALL WRITEF('Type:')
	CALL WRITEF('%(3 %I4%)   -',TYFTAB(1),TYFTAB(2),TYFTAB(3))
	CALL WRITEF('%(3 %I4%)   -',TYFTAB(5),TYFTAB(6),TYFTAB(7))
	GO TO 30
C
C control of feature code meanings in guidance file
C GFC n m	FC n implies FB m
C GFC n		remove allocation for FC n
C GFC		type out all allocations
620	IF (NUMINT.GT.0) GO TO 640
	LOG=.TRUE.
	DO 630 III=0,MAXITF
	  IF (GUDITF(III).LE.0) GO TO 630
	  IF (LOG) CALL WRITEF(' CODE  FB')
	  LOG=.FALSE.
	  CALL WRITEF('%I4%I5',III,GUDITF(III))
630	CONTINUE
	GO TO 30
C
C deal with a specific feature code
640	IF (INTARG.LT.0 .OR. INTARG.GT.MAXITF) GO TO 650
	GUDITF(INTARG)=0		! remove allocation
	IF (NUMINT .LE. 1) GO TO 30	! that's all
	IF (INTAR(2).LE.0 .OR. INTAR(2).GT.MAXFB
     &      .OR.INTAR(2).EQ.4) GO TO 660
	GUDITF(INTARG)=INTAR(2)
	GO TO 30
C
650	CALL WRITEF('Illegal feature code')
	GO TO 20
660	CALL WRITEF('Illegal FB number')
	GO TO 20
C
C DECrement/INCrement NF number or height.
670	IF (OVRNUM.LE.0) GO TO 470
	IF (HTMODE) 680,690,700
680	INTARG=FNUM(OVRNUM)-MANNFI			! NF
	GO TO 500
690	IF (.NOT.HADHGT) GO TO 750
	HTREAL=HTREAL-MANHGT				! real height
	GO TO 30
700	IF (.NOT.HADHGT) GO TO 750
	HTLONG=HTLONG-INT(MANHGT)			! integer height
	GO TO 30
C
710	IF (OVRNUM.LE.0) GO TO 470
	IF (HTMODE) 720,730,740
720	INTARG=FNUM(OVRNUM)+MANNFI
	GO TO 500
730	IF (.NOT.HADHGT) GO TO 750
	HTREAL=HTREAL+MANHGT
	GO TO 30
740	IF (.NOT.HADHGT) GO TO 750
	HTLONG=HTLONG+INT(MANHGT)
	GO TO 30
C
750	CALL WRITEF('No height specified')
	GO TO 30
C
C CHK/CHE/SCH initiate system check
760	CALL NEWTIM(TINIT)
	IF (HADLDI) THEN
	   CALL SCHECK
	ELSE
	   CALL WRITEF('Digitiser not enabled')
	ENDIF
	CALL NEWTIM(TMAIN)
	GO TO 30
C
C MNF - manual NF number increment
770	MANNFI=INTARG
	GO TO 30
C
C ANF - automatic NF number increment
780	AUTNFI=INTARG
	GO TO 30
C
C HTD - set contour height (real number) for AC entry
790	IF (OVRNUM.LE.0) GO TO 470
	HTMODE=0
	HADHGT=NUMREL.GT.0
	IF (.NOT.HADHGT) GO TO 30		! don't default to zero
	HTREAL=REALA1
	GO TO 30
C
C HTI/HGT - set contour height (integer*4) for AC entry
800	IF (OVRNUM.LE.0) GO TO 470
	HTMODE=1
	HADHGT=NUMINT.GT.0
	IF (.NOT.HADHGT) GO TO 30		! don't default to zero
	HTLONG=LONGA1
	GO TO 30
C
C MHT - manual height increment
810	IF (HTMODE.GT.0.AND.ABS(AMOD(REALA1,1.0)).GT.1.0E-6) GO TO 830
	MANHGT=REALA1 + SIGN(REALA1*1.0E-7,REALA1) ! trap rounding errs
	GO TO 30
C
C AHT - automatic height increment
820	IF (HTMODE.GT.0.AND.ABS(AMOD(REALA1,1.0)).GT.1.0E-6) GO TO 830
	AUTHGT=REALA1 + SIGN(REALA1*1.0E-7,REALA1) ! trap rounding errs
	GO TO 30
C
830	CALL WRITEF('Integer value expected%C',7)
	GO TO 30
C
C NFI - display NF number rather than height (default).
840	HTMODE=-1
	GO TO 30
C
C PNT - set/show default point feature mode when POI is pressed.
850	IF (NUMINT.EQ.0) GO TO 860
	IF (INTARG.LT.0.OR.INTARG.GT.1) GO TO 870
	PNTINI=INTARG
	GO TO 30
C
860	CALL WRITEF('Current point feature mode is %N',PNTINI)
	GO TO 30
C
870	CALL WRITEF('Invalid point feature mode %N%C',INTARG,7)
	GO TO 30
C
C PTI - print timings
880	CALL NEWTIM(TSTOP)
	CALL PRTTIM(INTARG)
	CALL NEWTIM(TMAIN)
	GO TO 30
C
C Zero TImings
890	CALL NEWTIM(TSTOP)
	DO 900 III=1,MAXTIM
	  TIMING(III)=0.0
900	CONTINUE
	CALL NEWTIM(TSTART)
	GO TO 30
C
C PMI,PME - init and end performance monitoring
910	IF (PMEING) GO TO 930
	CALL PME_INIT
	PMEING=.TRUE.
	GO TO 30
C
920	IF (.NOT.PMEING) GO TO 940
	CALL PME_EXIT
	PMEING=.FALSE.
	GO TO 30
C
930	CALL WRITEF('PME already initilised')
	GO TO 30
940	CALL WRITEF('PME not initialised')
	GO TO 30
C
C PCF [f]   - p/c frame move by f (default 1.0) frames
950	IF (.NOT.HADLDI) GO TO 30
	IF (NUMREL .EQ. 0) REALA1=1.0
	CALL DISMOD(0)		! to stop it hanging
	CALL PCFRAM(REALA1)
	GO TO 30
C
C TYPe n - set track type
960	LTYPE=INTARG
	ELF=-1			! enable automatic setting of ELF
	CALL PARIO(4,LTYPE)
	IF (ELF.LT.0) ELF=IMOD.XOR.1
	GO TO 30
C
C CANcel last feature
970	IF (.NOT. EFPEND) GO TO 980
	CALL IFFDEL
	JLNJP=0			! and forget any junctions
	NJUNC=0
	FNUM(OVRNUM)=PNDNUM
	CALL WRITEF('Feature %N deleted',FNUM(OVRNUM))
	EFPEND=.FALSE.
	GO TO 990
980	CALL WRITEF('Too late !%C',7)
990	GO TO 30
C
C tell operator WHAt's going on
1000	CALL WRITEF('%S',IDTEXT)
	CALL WRITEF('Operator ID:   %A',NSMESS(1))
	CALL WRITEF('Output file:   %S',IFFNAM(1:STRLEN(IFFNAM)))
	CALL WRITEF('Patch file:    %S',SYSNAM(1:STRLEN(SYSNAM)))
	IF (GUDOPN)
     &	CALL WRITEF('Guidance file: %S',GUDNAM(1:STRLEN(GUDNAM)))
	GO TO 30
C
C RASter - invoke raster scan
1010	CONTINUE
**	IF RASTER
	CALL FRS
	DO 1020 III=1,100		! and ring the bell a few times
	  CALL TXWT(7,1)
1020	CONTINUE
**	IFF
	CALL WRITEF('Not implemented yet')
**	ENDC
	GO TO 30
C
C ZJC - Zero in-Core Junctions
1030	JCRNUM=0
	JCRPOI=0
	GO TO 30
C
C WIZard command
1040	IF (INTARG.NE.42) GO TO 1060
	WIZARD=-1
	CALL WRITEF('At your service, Master')
	IF (.NOT.NEWIFF) GO TO 1050	! still to read in the data
C
C set up layer 1
	CALL PEND(1)
	EOP=SETOVR(1,.TRUE.)
	IF (CPDONE) GO TO 20
C
C null corner points
1050	CPGOT=.TRUE.
	CORTYP=4
	NFID=0
	GO TO 260			! to set up FCOEFF/BCOEFF
C
1060	CALL WRITEF('You are not an implementor')
	GO TO 30
C
	END
