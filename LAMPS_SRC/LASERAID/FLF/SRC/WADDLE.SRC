C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-03-05 10:22:00.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION WADDLE(ST,POINTS1,LENGTH1,POINTS2,LENGTH2,
     &                            TMPCHK)
C
***	MODULE	WADDLE
***	IDENT	05MR86
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	WADSIN is an INTEGER*4 function; tidied	 DM	04-Mar-1986
CMOD	Created 				AJW	10-Jun-1983
C
C Given two edge chains, creates a centre line in the master pnt buffer.
C Returns 1 (SS$_NORMAL) if success, even number if failure (for
C possible trapping of arithmetic errors with  FLF$SIG_TO_RET_NOARITH).
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
C parameters:
**	PARAMETER/PARAMS/
C
C arguments:
	REAL      ST(2)			! start of scan
	INTEGER   LENGTH1,LENGTH2	! no of points on the 2 sides
	INTEGER   POINTS1(2,LENGTH1)	! and the points
	INTEGER   POINTS2(2,LENGTH2)
	LOGICAL*1 TMPCHK		! temporary check - draw waddles
C
C local workspace:
	INTEGER   FIRST2	! point on 2 closest to 1st point on 1
	INTEGER   III,JJJ	! temp
	INTEGER   STEP		! do we step 1, 2 or both
	INTEGER   THIS1,THIS2	! current point on 1 and 2
	INTEGER*4 D1,D2,D3	! three distances
	LOGICAL   PAST1,PAST2	! second time around for each side
C
C functions:
	INTEGER*4 WADDIS,WADSIN
C
C ......................................................................
C
C first, get the point in 2 closest to the 1st point on 1
	D2='7FFFFFFF'X
	DO 10 THIS2=1,LENGTH2
	  D1=WADDIS(POINTS2(1,THIS2),POINTS1(1,1))
	  IF (D1.LT.D2) THEN
	    D2=D1
	    FIRST2=THIS2
	  ENDIF
10	CONTINUE
C
C then waddle along, until either side gets back to where it came from
C consider the three distances D1=THIS1+1 -> THIS2,
C D2=THIS1 -> THIS2+1, and THIS1+1 -> THIS2+1,
C and use the shortest as the new THIS1 and THIS2
C N.B. D3 might be one of next D1,D2 - an optimisation might be in order
	THIS1=1
	THIS2=FIRST2
	CALL BUNCH(ST(X)+(POINTS1(X,THIS1)+POINTS2(X,THIS2))/2,
     &             ST(Y)+(POINTS1(Y,THIS1)+POINTS2(Y,THIS2))/2,0)
	PAST1=.FALSE.
	PAST2=.FALSE.
C
20	III=THIS1 + 1
	  JJJ=THIS2 + 1
	  IF (III.GT.LENGTH1) THEN
	    PAST1=.TRUE.
	    III=1
	  ENDIF
	  IF (JJJ.GT.LENGTH2) THEN
	    PAST2=.TRUE.
	    JJJ=1
	  ENDIF
	  D1=WADDIS(POINTS1(1,III),  POINTS2(1,THIS2))
	  D2=WADDIS(POINTS1(1,THIS1),POINTS2(1,JJJ))
	  D3=WADDIS(POINTS1(1,III),  POINTS2(1,JJJ))
	  IF     (D3.LT.D1.AND.D3.LT.D2) THEN
	    STEP=3
	  ELSEIF (D1.LT.D2.AND.D1.LT.D3) THEN
	    STEP=1
	  ELSE
	    STEP=2
	  ENDIF
C
C if the step we want to take would be back from the way we are going,
C try the next best step
	  IF (STEP.EQ.1) THEN
	    IF (WADSIN(POINTS1(X,THIS1),POINTS2(X,THIS2),
     &                 POINTS1(X,III)).GT.0) THEN
	      IF (D3.LT.D2) THEN
	        STEP=3
	      ELSE
	        STEP=2
	        D1=D3+1		! to force STEP=3 if STEP=2 don't work
	      ENDIF
	    ENDIF
	  ENDIF
	  IF (STEP.EQ.2) THEN
	    IF (WADSIN(POINTS2(X,THIS2),POINTS1(X,THIS1),
     &                 POINTS2(X,JJJ)).GT.0) THEN
	      IF (D3.LT.D1) THEN
	        STEP=3
	      ELSE
	        STEP=1
	      ENDIF
	    ENDIF
	  ENDIF
C
	  IF ((STEP.AND.1).NE.0) THIS1=III
	  IF ((STEP.AND.2).NE.0) THIS2=JJJ
C
	  CALL BUNCH(ST(X)+(POINTS1(X,THIS1)+POINTS2(X,THIS2))/2,
     &               ST(Y)+(POINTS1(Y,THIS1)+POINTS2(Y,THIS2))/2,0)
	  IF (TMPCHK) THEN
	    CALL TXMTO(POINTS1(X,THIS1),POINTS1(Y,THIS1))
	    CALL TXLTO(POINTS2(X,THIS2),POINTS2(Y,THIS2))
	  ENDIF
	IF (.NOT.(PAST1.AND.PAST2.AND.THIS2.GE.FIRST2)) GOTO 20
C
	CALL BUNCH(0.0,0.0,2)
	IF (TMPCHK) CALL TXEND
	WADDLE=1		! normal sucessful completion
	RETURN
	END
C
C**********************************************************************
C
	INTEGER*4 FUNCTION WADDIS(P1,P2)
C
***	MODULE	WADDIS
***	IDENT	05MR86
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	Tidied					 DM	04-Mar-1986
CMOD	Created 				AJW	10-Jun-1983
C
C Calculates the distance**2 between P1(X/Y) and P2(X/Y).
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
C parameters:
**	PARAMETER/PARAMS/
C
C arguments:
	INTEGER P1(2),P2(2)
C
C workspace:
	INTEGER*4 P1X,P1Y,P2X,P2Y
C
C ......................................................................
C
	P1X=P1(X)
	P1Y=P1(Y)
	P2X=P2(X)
	P2Y=P2(Y)
	WADDIS=(P2X-P1X)**2 + (P2Y-P1Y)**2
	RETURN
	END
C
C**********************************************************************
C
	INTEGER*4 FUNCTION WADSIN(POINTS1,POINTS2,POINTS3)
C
***	MODULE	WADSIN
***	IDENT	04MR86
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	Actually uses POINTS3 (!); tidied	 DM	04-Mar-1986
CMOD	Created 				AJW	10-Jun-1983
C
C Returns cross product of P1->P3 and P1->P2
C WADDLE needs the sign of the sine of the angle between them
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
C parameters:
**	PARAMETER/PARAMS/
C
C arguments:
	INTEGER POINTS1(2),POINTS2(2),POINTS3(2)
C
C local workspace:
	INTEGER*4 P1X,P1Y,P2X,P2Y,P3X,P3Y
C
C ......................................................................
C
	P1X=POINTS1(X)
	P1Y=POINTS1(Y)
	P2X=POINTS2(X)
	P2Y=POINTS2(Y)
	P3X=POINTS3(X)
	P3Y=POINTS3(Y)
	WADSIN=(P1X-P2X)*(P3Y-P1Y) - (P1Y-P2Y)*(P3X-P1X)
	RETURN
	END
