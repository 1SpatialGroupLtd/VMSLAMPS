C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-07-15 18:00:46.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE LOCATE
C
***	MODULE	LOCATE
***	IDENT	15JL86
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	PAINT called to do paintout		 DM	15-Jul-1986
CMOD	Converged; optimised; tidied		 DM	25-Jun-1986
CMOD	Only call CSRD if HADLDI; tidied	 DM	30-May-1986
CMOD	Bug in calculation of HITTOL fixed	 DM	10-Jun-1983
CMOD	/COEFFS/ replaced with /DIGC/		AJW	07-Apr-1983
CMOD	Uses WJJ4PT instead of A B 4 T R N	AJW	06-Apr-1983
CMOD	Tidied					AJW	06-Apr-1983
CMOD	Uses IENDS properly			 DM	26-Nov-1982
CMOD	Calls LDWAIT				 DM	26-Nov-1982
CMOD	Doesn't exit after deleting		AJW	02-Apr-1982
CMOD	Bug mended in choosing CHOICE		WJJ	09-Feb-1982
CMOD	IELEN tested against -1			AJW	05-Jan-1982
CMOD	T E X T C changed			AJW	 1-Jul-1981
CMOD	LOCCM INTEGER as well as EXTERNAL	AJW	12-Jun-1981
CMOD	own special command table LOCCM		AJW	21-May-1981
CMOD	Tidied					AJW	28-Jan-1981
CMOD	Common block /NULLC/ removed		AJW	01-Aug-1980
CMOD	Created					MCF	27-Apr-1978
C
C Find old features, light up part of them in refresh,
C and enable repaint and delete.
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
C parameters:
***	PARAMETER/PARAMS/
C
	PARAMETER MAXHIT=4	! max no. of hits stored
	PARAMETER MAXDRW=10	! amount of feature refreshed
C
C common blocks:
***	COMMON/DIGC/
***	COMMON/IFFHAN/
***	COMMON/JNCLST/
***	COMMON/LKPARM/
***	COMMON/MASTER/
***	COMMON/TXTC/
C
C local workspace:
	INTEGER   CHOICE		! hit to be displayed
	INTEGER   CWD			! command from FBs or keyboard
	INTEGER   HITNUM		! last used slot in list of hits
	INTEGER   HITPNT(MAXHIT)	! list of pos'ns in STs
	INTEGER	  KKK,LLL		! temps
	INTEGER   IECODE,IELEN		! these are the same as wot they
	INTEGER   IENDS			! are in a thousand other places
	INTEGER   N1ST,NLST		! slice interesting part of ST
	INTEGER   NPTS			! no of points in ST entry
	INTEGER   PNTCNT		! number of nearest point in ST
	INTEGER   SLOT			! where hit was stored last
	INTEGER   WSTHIT		! slot number of worst hit
	INTEGER*4 HITNF(MAXHIT)		! pos in IFF file of best NFs
	INTEGER*4 III,JJJ		! temps
	INTEGER*4 THISNF		! address of ft being considered
	LOGICAL*1 PENUP			! penup at start of ST
	REAL      DX,DY			! vector from cursor to point
	REAL      HITDIS(MAXHIT)	! distances for best hits
	REAL	  HITTOL		! half side of box for a HIT
	REAL      THSDIS		! distance from cursor to PNT
	REAL      XC,YC			! cursor in current space
C
C function:
	INTEGER RDCOMM
C
C command table:
	INTEGER  LOCCM
	EXTERNAL LOCCM
C
C ......................................................................
C
C get the cursor position.
	IF (HADLDI) CALL CSRD(XC,YC)
C
C convert it into map space.
	CALL TRXUSE(XC,YC,FCOEFF)
C
C get hit distance in map space corresponding to 1.5 cm on the screen.
	DX=0.0				! origin in machine space
	DY=0.0
	CALL TRXUSE(DX,DY,FCOEFF)
	HITTOL=1500.0
	DY=0.0				! dummy
	CALL TRXUSE(HITTOL,DY,FCOEFF)
	HITTOL=ABS(HITTOL - DX)
C
	CALL DISMOD(0)			! set stored mode
	CALL FBWT16("100000)		! light FB16
	CALL IFFRWD			! rewind IFF file
	HITNUM=0			! no hits yet
C
C look at each item in the IFF file.
10	CALL FBRD(KKK)			! see if operator's fed up
	IF (KKK.EQ.16) GO TO 260
	CALL IFFNXT(IECODE,IELEN)
	IF (IELEN.EQ. -1) GO TO 100	! EOF
	IF (IECODE.EQ.'ST') GO TO 20
	IF (IECODE.NE.'NF') GO TO 10
C
C NF - record position.
	THISNF=LPOSH
	PNTCNT=0
	SLOT=0
	GO TO 10
C
C ST - look for point near cursor.
20	CALL EIHRS(NPTS,IENDS)
	KKK=0
30	LLL=MIN(NPTS,MAXST)
	CALL EIHRR(STPNTS,2*LLL,4*KKK+1)
	DO 90 III=1,LLL
	   PNTCNT=PNTCNT + 1
	   DX=STPNTS(X,III) - XC
	   IF (ABS(DX).GT.HITTOL) GO TO 90
	   DY=STPNTS(Y,III) - YC
	   IF (ABS(DY).GT.HITTOL) GO TO 90
	   THSDIS=DX*DX + DY*DY
	   IF (HITNUM.LT.MAXHIT) GO TO 40	! add it - we've room
	   IF (THSDIS.GT.HITDIS(WSTHIT)) GO TO 90 ! full of better 'uns
C
C decide where hit goes.
40	   IF (HITNUM.EQ.0) GO TO 60		! 1st hit
C
C do we already have a hit for this feature ?
	   IF (SLOT.EQ.0) GO TO 50		! no
C
C yes - is this better ?
	   IF (THSDIS.LT.HITDIS(SLOT)) GO TO 70	! yes
	   GO TO 90				! no - leave old hit
C
C new feature - use worst hit's slot ...
50	   SLOT=WSTHIT
	   IF (HITNUM.GE.MAXHIT) GO TO 70
C
C unless we have a spare slot to use.
60	   HITNUM=HITNUM + 1
	   SLOT=HITNUM
C
C remember hit.
70	   HITNF(SLOT)=THISNF
	   HITPNT(SLOT)=PNTCNT
	   HITDIS(SLOT)=THSDIS
	   WSTHIT=1			! choose new worst hit
	   IF (HITNUM.EQ.1) GO TO 90
	   DO 80 JJJ=2,HITNUM
	      IF (HITDIS(JJJ).GT.HITDIS(WSTHIT)) WSTHIT=JJJ
80	   CONTINUE
90	CONTINUE
C
	NPTS=NPTS - LLL
	IF (NPTS.EQ.0) GO TO 10		! read it all now
	KKK=LLL
	GO TO 30
C
C**********************************************************************
C
C end of file reached.
100	IF (HITNUM.LE.0) GO TO 260	! nowt seen
C
C choose best hit.
	CHOICE=1
	IF (HITNUM.EQ.1) GO TO 120	! only one choice
	DO 110 III=2,HITNUM
	  IF (HITDIS(III).LT.HITDIS(CHOICE)) CHOICE=III
110	CONTINUE
C
C position to the best hit.
120	CALL IFFPKE(IECODE,IELEN,HITNF(CHOICE))
	PENUP=.FALSE.
	PNTCNT=0
	CALL DISMOD(1)			! set refresh mode
C
C read though it.
130	CALL IFFNXT(IECODE,IELEN)
	IF (IELEN .EQ.  -1) GO TO 190
	IF (IECODE.EQ.'ST') GO TO 150
	IF (IECODE.EQ.'TH') GO TO 140
	IF (IECODE.EQ.'EF') GO TO 190
	GO TO 130
C
C TH - read thickness and set.
140	CALL EIHRI(KKK,1,1)
	CALL THICK(FLOAT(KKK))
	GO TO 130
C
C ST - string - read it in, and if drawing in refresh
C               clip to interesting points ( < MAXDRW on each side).
150	CALL EIHRS(NPTS,IENDS)
	IF ((IENDS.AND.1).EQ.0) PENUP=.TRUE.
	N1ST=HITPNT(CHOICE) - MAXDRW - PNTCNT
	IF (N1ST.LT.1) N1ST=1
	NLST=HITPNT(CHOICE) + MAXDRW - PNTCNT
	IF (NLST.GT.NPTS) NLST=NPTS
	IF (N1ST.GT.NLST) GO TO 180
C
C loop for each point in ST.
	DO 170 III=N1ST,NLST
	  CALL EIHRR(STPNTS,2,(III-1)*4+1)
	  CALL TRXUSE(STPNTS(X,1),STPNTS(Y,1),BCOEFF)	! to HRD space
	  IF (PENUP) GO TO 160
	  CALL LINTO(STPNTS(X,1),STPNTS(Y,1))
	  GO TO 170
160	  CALL MOVTO(STPNTS(X,1),STPNTS(Y,1))
	  PENUP=.FALSE.
170	CONTINUE
C
180	PNTCNT=PNTCNT + NPTS
	GO TO 130
C
C EF or end-of-file.
C if one-point feature, draw a cross.
190	IF (PNTCNT.EQ.1) CALL PLTCHR("130)
C
C***********************************************************************
C
C get command.
	CALL FBWT16("110011)
200	CWD=RDCOMM(LOCCM,.FALSE.)
	GO TO (210,200,200,220,
     &         200,200,200,200,
     &         200,200,200,200,
     &         230,200,200,260),CWD
	DCPTR=-1
	TXTPTR=-2
	GO TO 200
C
C next option.
210	CHOICE=CHOICE + 1
	IF (CHOICE.GT.HITNUM) CHOICE=1
	GO TO 120
C
C repaint.
220	CALL NEWTIM(TPAINT)
	CALL PAINT(HITNF(CHOICE),.TRUE.,THKPNT,.FALSE.,0,NHATCH,.TRUE.)
	CALL NEWTIM(TMAIN)
	GO TO 120
C
C delete.
230	LPOSNF=HITNF(CHOICE)
	CALL DELF
	IF (HITNUM.LE.1) GO TO 260	! no more found
	IF (HITNUM.LE.CHOICE) GO TO 250	! that one was last in list
	DO 240 III=CHOICE,HITNUM-1	! move rest down
	  HITNF(III)=HITNF(III+1)
	  HITPNT(III)=HITPNT(III+1)
	  HITDIS(III)=HITDIS(III+1)
240	CONTINUE
C
250	HITNUM=HITNUM - 1		! one less feature
	GO TO 100			! and go round again
C
C exit.
260	CALL THICK(0.0)
	CALL DISMOD(1)			! refresh mode
	RETURN
	END
