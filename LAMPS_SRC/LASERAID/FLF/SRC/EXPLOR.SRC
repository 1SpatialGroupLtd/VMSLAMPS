C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-07-10 11:45:48.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION EXPLOR(IEDGE,IEND,HITEDG)
C
***	MODULE	EXPLOR
***	IDENT	10JL86
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
C Author: D. Meader
C
CMOD	Trap infinite loop due to bad JOINing	 DM	10-Jul-1986
CMOD	Bug fix - edge searching code rehashed	 DM	21-May-1986
C	Created 				 DM	25-Jul-1985
C
C Explores the join structure from end IEND of edge IEDGE to determine
C whether this is part of a closed feature which includes the SIDE of
C the scan. The function value is .FALSE. if these criteria are met (as
C far as we can tell from looking in one direction).
C HITEDG is set to the number of the latest edge which has a neighbour
C of -1 (the scan side).
C 
	IMPLICIT NONE
C
***	PARAMETER/PARAMS/
C
	INTEGER*4 IEDGE
	INTEGER*2 IEND
	INTEGER*4 HITEDG
C
***	COMMON/ANACOM/
***	COMMON/LKPARM/
C
	INTEGER*4 I,J			! temporary variables
	INTEGER*4 JCHN,JSIDE		! temporary variables
	INTEGER*4 JEDGE,JEND,KEDGE	! temporary variables
C
C ......................................................................
C
	IF (IEDGE.EQ.0) GO TO 110
	EXPLOR=.TRUE.			! assume we fail
	IF (UPDATD(IEDGE)) GO TO 120	! can't be on current scan line
	JEND=IEND
	JEDGE=IEDGE
	JSIDE=2				! OPPOSITE side of chain
	IF ((EDGTYP(JEDGE).AND.4).EQ.0) JSIDE=1
	JCHN=CURCHN(JEDGE)		! current chain for edge
C
10	KEDGE=CHNEDG(JSIDE,JCHN)	! get JEDGE's neighbour
	   IF (KEDGE.GT.0) GO TO 20
C
C ... got a dummy neighbour - see if it is the side of the scan.
	   IF (KEDGE.NE.-1) GO TO 120
	   HITEDG=JEDGE			! it is - remember this edge
	   GO TO 30			! keep looking
C
C ... got a real neighbour - see if we are joined to it.
20	   IF (.NOT.JOINED(JEDGE,KEDGE)) GO TO 120
C
C ... get next chain belonging to JEDGE.
30	   IF (JEND.EQ.1) GO TO 60
C
C ... looking forwards.
	   I=CURCHN(JEDGE)		! last chain sharing JEDGE
	   IF (I.EQ.JCHN) GO TO 70	! at end of JEDGE - use JOINs
40	   J=CHNMAP(I,JEDGE)		! get the next chain back from I
	      IF (J.EQ.JCHN) GO TO 50	! is I the chain we want ?
	      IF (J.EQ.0) GO TO 90	! data structure is duff !!
	      I=J
	   GO TO 40			! go round again
50	   JCHN=I			! found our chain
	GO TO 10
C
C ... looking backwards.
60	   JCHN=CHNMAP(JCHN,JEDGE)
	IF (JCHN.NE.0) GO TO 10
C
C ... get next edge joined to JEND of JEDGE.
70	KEDGE=JOILST(JEND,JEDGE)
	IF (KEDGE.EQ.0) GO TO 110	! (if any)
	IF (UPDATD(KEDGE)) GO TO 120	! can't be on current scan line
	IF (KEDGE.EQ.IEDGE) GO TO 100	! back where we started (??)
	JEND=3 - JOIEND(JEND,JEDGE)
	JEDGE=KEDGE
	JSIDE=2				! OPPOSITE side of chain
	IF ((EDGTYP(JEDGE).AND.4).EQ.0) JSIDE=1
	JCHN=CURCHN(JEDGE)		! get current chain for new edge
	IF (JEND.EQ.1) GO TO 10		! easy if searching backwards
80	I=CHNMAP(JCHN,JEDGE)		! searching forwards ...
	   IF (I.EQ.0) GO TO 10		! is JCHN the chain we want ?
	   JCHN=I
	GO TO 80			! go round again
C
C ... errors.
90	IF (TMPCHK)
     &	   CALL WRITEF('EXPLOR: Bad chain map for edge %^L%N',JEDGE)
	GO TO 120
C
100	IF (TMPCHK) CALL WRITEF('EXPLOR: Edge %^L%N is closed !',IEDGE)
	GO TO 120
C
110	EXPLOR=.FALSE.			! success
120	RETURN
	END
