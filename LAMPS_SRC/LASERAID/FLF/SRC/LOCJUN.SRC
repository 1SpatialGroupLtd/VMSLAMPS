C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-06-10 17:04:42.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION LOCJUN(XPOS,YPOS)
C
***	MODULE	LOCJUN
***	IDENT	10JN86
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
C Author: D. Meader
C
CMOD	JPOSTL replaces LIMIT(17)		 DM	10-Jun-1986
CMOD	Now tri-state (-1 ==> manual junction)	 DM	19-May-1986
CMOD	Junction search criterion same as ADDJUN DM	16-May-1986
CMOD	JINHIB added; bug fix for NMP(1)=1 case	 DM	30-Apr-1986
CMOD	Manual junction has MPJANG=-361, not -1	 DM	08-Apr-1986
C	Created 				 DM	11-Sep-1985
C
C Searches back along the master point buffer for a junction near
C (XPOS,YPOS) and then takes it 'in hand', allowing the operator to
C select which arm to follow. This enables the operator to roll back to
C a junction without having to re-scan it.
C The function value returned is:	+1 - junction found
C					 0 - nothing found
C					-1 - manual junction found
C
	IMPLICIT NONE
C
***	PARAMETER/PARAMS/
C
	REAL	XPOS,YPOS	! where to look for the junction
C
***	COMMON/ANACOM/
***	COMMON/JNCLST/
***	COMMON/LINKS/
***	COMMON/LKFOLL/
***	COMMON/LKPARM/
***	COMMON/MPEP/
***	COMMON/RSE/
***	COMMON/SCPARM/
***	COMMON/TRKSEG/
C
	INTEGER	  CONGOT,FSTCON	! no. of connections, first connection
	INTEGER	  I		! temporary variable
	INTEGER	  MPNT		! master point number
	REAL	  ANG		! arm angle
	REAL	  ARMLEN,ARMOFF	! length, offset of arm offered to user
	REAL	  QUAL		! connection quality
	REAL	  SINANG,COSANG	! sin, cos of ANG
	REAL	  TOL		! junction matching tolerance
C
C ......................................................................
C
	LOCJUN=0			! assume nothing found
	IF (JINHIB) JNCING=JINHIB	! reset junction inhibit
	IF (NMP(1).LE.0) GO TO 80	! any master points to search ?
	TOL=2.0*(JPOSTL**2)
	DO 10 MPNT=NMP(1),1,-1		! search backwards
	   IF (MPTYPE(MPNT).LE.0) GO TO 10
	   IF ((XPOS-MP1(X,MPNT))**2 + (YPOS-MP1(Y,MPNT))**2
     &	       .LE.TOL) GO TO 20
10	CONTINUE
	GO TO 80			! no junction found
C
C ... having found a junction, make it the last appended item.
20	LOCJUN=1			! assume ordinary junction
	CHNSEL=1			! (fool APPend later)
	SEGLEN=0			! (fool APPSEG later)
	ANLYZD=-1			! don't let ADDASS interfere
	BSTCON=0
	FSTCON=1
	CONNCT(1,1)=0
	CONNCT(2,1)=0			! (fool APPSEG and JNCTRK later)
	CONNCT(3,1)=-1			! (fool ASSESS later)
	CONNCT(4,1)=5			! (fool APPend and ADDNBR later)
	QUALTY(1)=-1.0
	NMP(1)=MPNT			! 'roll back' to junction
	START(X)=MP1(X,MPNT)
	START(Y)=MP1(Y,MPNT)
	NEGOT=0				! don't let anything be drawn
	ENCBUF(X,1)=0			! the junction itself
	ENCBUF(Y,1)=0
	NXT(1)=0
C
C ... dummy up some chains for the arms unless it's a manual junction.
	CALL SETCHN			! clear out existing chains
	IF (MPJANG(1,MPNT).NE.-361) GO TO 30
	CALL WRITEF('Manual junction%C',7)
	LOCJUN=-1
	LISTED=.TRUE.			! (fool ASSESS later)
	CONNCT(4,2)=0			! (fool JSURE later)
	GO TO 70			! inhibit junction spotting
C
C ... start of chain is 3*IPIT away from junction position.
C ... end of chain is IDSIZE away from that (so we can see the arm).
30	ARMOFF=FLOAT(3*IPIT)
	ARMLEN=FLOAT(IDSIZE) + ARMOFF
	DO 40 I=1,MPTYPE(MPNT)		! loop through the arms
	   CHAIN(I)=2*I + 1		! create a chain for each ...
	   LENGTH(I)=2			! with two points
	   ANG=FLOAT(MPJANG(I,MPNT))*3.141593/180.0
	   COSANG=COS(ANG)
	   SINANG=SIN(ANG)
	   ENCBUF(X,2*I+1)=INT(ARMLEN*COSANG)
	   ENCBUF(Y,2*I+1)=INT(ARMLEN*SINANG)
	   NXT(2*I+1)=2*I
	   ENCBUF(X,2*I)=INT(ARMOFF*COSANG)
	   ENCBUF(Y,2*I)=INT(ARMOFF*SINANG)
	   NXT(2*I)=0
40	CONTINUE
	CALL CHNLST			! convert chains to lists
	LISTED=.TRUE.
C
C ... create the connection data structure.
	QUAL=LIMIT(7) + LIMIT(6)	! don't get confused
	DO 50 I=2,MPTYPE(MPNT)+1	! connection 1 is the junction
	   CONNCT(1,I)=0
	   CONNCT(2,I)=I - 1		! (fool NXTSEG)
	   CONNCT(3,I)=1
	   CONNCT(4,I)=4		! prediction chain only
	   IF ((I-1).EQ.MPIARM(MPNT).OR.(I-1).EQ.MPOARM(MPNT)) GO TO 50
	   QUALTY(I)=QUAL
	   QUAL=QUAL + LIMIT(6)
50	CONTINUE
C
C ... offer the same arm as last time (input arm has poorest quality).
	IF (MPOARM(MPNT).GT.0) QUALTY(MPOARM(MPNT)+1)=QUAL
	IF (MPIARM(MPNT).GT.0) QUALTY(MPIARM(MPNT)+1)=LIMIT(7)
C
C ... establish the new connections.
	CONGOT=MPTYPE(MPNT) + 1
	CALL ADDASS(FSTCON,CONGOT)
C
C ... finally prevent the junction from being selected by NEXt.
	DO 60 I=2,MPTYPE(MPNT)+1
	   IF (NXTBST(I).EQ.1) NXTBST(I)=0
60	CONTINUE
C
C ... and that should be it !
70	JINHIB=JNCING			! don't spot junction again
	JNCING=.FALSE.			! N.B. APPSEG must tolerate this
80	RETURN
	END
