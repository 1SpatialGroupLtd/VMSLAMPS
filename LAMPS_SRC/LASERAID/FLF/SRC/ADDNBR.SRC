C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-06-16 11:31:18.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION ADDNBR(IEDGE,NBREDG)
C
***	MODULE	ADDNBR
***	IDENT	16JN86
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
C Author: D. Meader
C
CMOD	LIMIT(12) replaced by JWIDTL		 DM	16-Jun-1986
CMOD	Converged				 DM	28-May-1986
C	Created 				 DM	17-Jun-1985
C
C Sets up the neighbour information for edge IEDGE.
C
C An edge can only have a neighbour across a region of 'line' (i.e. not
C across the background), hence each edge has only one neighbour.
C An unpaired edge has dummy edge number -1 as its neighbour, unless
C that edge is detected on the FIRST scan line (in which case its
C neighbour is edge -2). This information is used when deciding whether
C we've found a junction.
C
C An attempt to assign more than one (non-negative) neighbour to an edge
C is termed a neighbour transition. On subsequent calls the length of
C the new neighbour is checked. When this length exceeds approximately
C one linewidth (to avoid ambiguity), a junction has been found.
C The function value is .TRUE. in this case, and .FALSE. otherwise.
C
	IMPLICIT NONE
C
***	PARAMETER/PARAMS/
C
	PARAMETER MAXWID='37767'O	! max width of a line encounter
	PARAMETER WIDFLD='37777'O	! width field of encounter
C
	INTEGER*4 IEDGE			! the 'host' edge
	INTEGER*4 NBREDG		! the neighbour edge
C
***	COMMON/ANACOM/
***	COMMON/JNCLST/
***	COMMON/LINKS/
***	COMMON/LKFOLL/
***	COMMON/RSE/
***	COMMON/SCCORR/
***	COMMON/SCPARM/
C
	INTEGER*4 ENC,JCHN,JEDGE,KEDGE	! temporary variables
	INTEGER*4 NEIGHB		! current neighbour
	INTEGER*4 TMPPOS		! temporary edge position
	INTEGER*4 WID1,WID2		! linewidths
	LOGICAL*4 GOTTRN		! found a transition ?
	REAL	  NORMWD		! normalised width
C
C ......................................................................
C
	ADDNBR=.FALSE.
	NEIGHB=NEIGBR(IEDGE)		! already got a neighbour ?
C
C ... (already had a transition and, if so, is it still there ?)
	IF (TRNEDG(IEDGE).EQ.0) GO TO 10
	IF (NEIGHB.LE.0) GO TO 20
	IF (.NOT.JOINED(TRNEDG(IEDGE),NEIGHB)) GO TO 20
	TRNEDG(IEDGE)=0
10	IF (NEIGHB.EQ.NBREDG) GO TO 210	! is it the one we know about ?
20	IF (NBREDG.GT.0) GO TO 30	! do we care anyway ?
C
C ... NBREDG is negative (edge of scan).
	IF (NEIGHB.LT.0) GO TO 210	! don't overwrite possible -2
	GO TO 200
C
30	IF (.NOT.JNCSPT) GO TO 200
C
C ... examine IEDGEs current neighbour (if any).
	IF (NEIGHB) 40,100,110
40	JEDGE=IEDGE
50	KEDGE=JEDGE
	IF (NEIGHB.EQ.-1) GO TO 60
C
C ... current neighbour is -2 (side of scan detected on 1st scan line).
C ... this may be a transition if the last thing appended wasn't a
C ... junction and we haven't just had a NOTAPP edge.
	IF (NOTAPP.LT.0) GO TO 200
	IF (LSTSEL.LE.0) GO TO 200
	IF (CONNCT(4,LSTSEL).EQ.5) GO TO 200
	WID1=MAXWID			! obviously no previous line
	GO TO 90			! check for side arm
C
C ... current neighbour is the side of the scan.
C ... this may be a transition if the edge is preceded by a line.
60	JCHN=CURCHN(JEDGE)
70	JCHN=CHNMAP(JCHN,JEDGE)		! loop, looking for a line
	   IF (JCHN.NE.0) GO TO 80
	   IF (JOIEND(1,JEDGE).NE.2) GO TO 200
	   JEDGE=JOILST(1,JEDGE)
	   JCHN=CURCHN(JEDGE)
80	IF (EDGCHN(JCHN)) GO TO 70
C
C ... found a line.
C ... for this to be a transition, the edge chain(s) must be at least
C ... one linewidth + 2*IPIT from the edge of the scan (i.e. we must see
C ... at least 2*IPIT of side arm). This, although somewhat arbitrary,
C ... prevents us from treating a convoluted line which clips the edge
C ... of the scan as a junction.
C ... get the linewidth just before and just after the edge chain(s).
	WID1=ENCBUF(W,CHAIN(JCHN)).AND.WIDFLD
90	WID2=EDGPOS(IV,IEDGE) - EDGPOS(IV,NBREDG)
	ENC=CHAIN(CURCHN(KEDGE))	! end of edge chain(s)
	GOTTRN=ABS(((((EDGBIT(KEDGE).AND.4)-2)/2)*	! ABS((+/-1*
     &		   INT(0.5*WAR*CR(IV)*FLOAT(IWID)))	!     halfwidth)
     &		   -					!     -
     &		   (ENCBUF(IV,ENC) -			!     (enc pos -
     &		   INT((FLOAT(ID(IV))/FLOAT(ID(IU)))	!     scan-slope
     &		       *FLOAT(ENCBUF(IU,ENC)))))	!       offset))
     &	       .GT.					! .GT.
     &	       MIN(WID1,ABS(WID2))+IPIT+IPIT		! min wid+2*IPIT
	IF (.NOT.GOTTRN) GO TO 200	! not a neighbour transition
	JEDGE=IEDGE			! could be - join common code
	GO TO 170
C
C ......................................................................
C
C ... if IEDGE has just been created, look through its connectivity list
C ... for a change of neighbour.
100	IF (EDGLEN(IEDGE).NE.1) GO TO 200	! is IEDGE a new edge ?
	IF (JOIEND(1,IEDGE).NE.2) GO TO 200
C
C ... found an edge which is joined to the beginning of IEDGE.
C ... this one's neighbour will tell us all we need to know (as any
C ... previous neighbour mismatch would already have been detected).
	JEDGE=JOILST(1,IEDGE)
	NEIGHB=NEIGBR(JEDGE)
	IF (NEIGHB.EQ.NBREDG) GO TO 200	! anything to do ?
	IF (NEIGHB.LT.0) GO TO 50	! possible neighbour transition
C
C ... found an *old* neighbour !! (OK if joined to new one).
	IF (JOINED(NEIGHB,NBREDG)) GO TO 200
	TMPPOS=EDGPOS(IV,JEDGE)
	GO TO 160			! join common code
C
C ......................................................................
C
C ... is this just our existing neighbour (N.B. after a transition) ?
C ... if so, check whether NBREDG is now joined to TRNEDG(IEDGE)
C ... (i.e. transition was not real).
110	IF (NBREDG.NE.NEIGHB) GO TO 120
	IF (JOINED(TRNEDG(IEDGE),NBREDG)) GO TO 190
	GO TO 180			! do we have a junction yet ?
C
C ... have we found the transition edge again (e.g. hole in line) ?
120	IF (NBREDG.EQ.TRNEDG(IEDGE)) GO TO 190
C
C ... we've found a *new* neighbour !!
C ... OK if joined to old neighbour ...
	IF (JOINED(NEIGHB,NBREDG)) GO TO 200
C
C ... or old neighbour is part of IEDGE (IEDGE loops back on itself) and
C ... IEDGE is short ...
	IF (.NOT.JOINED(NEIGHB,IEDGE)) GO TO 130
	IF (EDGLEN(IEDGE).LE.
     &	    MAX(2,(ENCBUF(W,CHAIN(CURCHN(IEDGE))).AND.WIDFLD)/IPIT))
     &	   GO TO 200			! IEDGE quite short ?
C
C ... or IEDGES 'neighbour' across black is part of IEDGE (IEDGE loops
C ... back on itself) ...
130	JEDGE=EDGBLK(IEDGE)
	IF (JEDGE.LE.0) GO TO 140
	IF (JOINED(JEDGE,IEDGE)) GO TO 200
C
C ... or old neighbour's 'neighbour' across black is joined to the new
C ... neighbour (NBREDG loops back on itself) ...
140	JEDGE=EDGBLK(NEIGHB)
	IF (JEDGE.LE.0) GO TO 150
	IF (JOINED(JEDGE,NBREDG)) GO TO 200
C
C ... or the line was unexpectedly narrow before the 'transition'.
C ... this is an attempt to deal with the 'hole in line' case,
C ... especially where this occurs at the beginning or end of the scan.
C ... a matching test for narrowness AFTER the transition is done below.
150	JEDGE=IEDGE			! project back by one scan line
	TMPPOS=EDGPOS(IV,IEDGE) - INT(EVGRAD(IEDGE)*FLOAT(IPIT))
160	NORMWD=FLOAT(ABS(TMPPOS - EDGPOS(IV,NEIGHB)))
     &	       /SQRT(1.0 + EVGRAD(JEDGE)**2)
	IF (NORMWD.LT.JWIDTL*TRKWID) GO TO 200
C
C ......................................................................
C
C ... we've found a neighbour transition for this edge (maybe).
170	IF (TRNEDG(IEDGE).NE.0) GO TO 180
C
C ... check that the line hasn't suddenly become very narrow.
	NORMWD=FLOAT(ABS(EDGPOS(IV,IEDGE) - EDGPOS(IV,NBREDG)))
     &	       /SQRT(1.0 + EVGRAD(JEDGE)**2)
	IF (NORMWD.LT.JWIDTL*TRKWID) GO TO 200
	TRNLEN(IEDGE)=MAX(3,INT(NORMWD)/IPIT)
	TRNEDG(IEDGE)=NEIGHB
	TRNCNT(IEDGE)=1
	GO TO 200
C
C ... if IEDGE has at some time experienced a neighbour transition, we
C ... insist that the new neighbour is sufficiently long to minimise the
C ... risk that the edge loops back on itself (i.e. that a join is
C ... waiting for us further on down the road).
C ... TRNCNT keeps counting even if the new neighbour is itself joined.
180	TRNCNT(IEDGE)=TRNCNT(IEDGE) + 1
	IF (TRNCNT(IEDGE).LT.TRNLEN(IEDGE)) GO TO 200
C
C ... looks like we've found a junction.
	ADDNBR=.TRUE.
	GO TO 200
C
C ... transition subsequently found to be false.
190	TRNEDG(IEDGE)=0
C
C ... establish the neighbour.
200	NEIGBR(IEDGE)=NBREDG
210	RETURN
	END
