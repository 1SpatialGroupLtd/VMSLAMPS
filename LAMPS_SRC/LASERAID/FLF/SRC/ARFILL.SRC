C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-03-07 11:20:48.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE ARFILL(PNT,NPTS,THK,NHATCH)
C
***	MODULE	ARFILL
***	IDENT	07MR86
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	Optimised a bit; tidied			 DM	07-Mar-1986
CMOD	Horizontal and vertical fill, of
CMOD	minimum	linewidth and spacing THK	AJW	23-Oct-1979
C	Created					MCF	15-May-1979
C
C Routine to fill in a feature (for area paint out).
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
C parameters:
***	PARAMETER/PARAMS/
C
	PARAMETER MAXSCT=20	! max number of intersections
C
C arguments:
	INTEGER   NPTS		! number of points
	REAL	  PNT(2,NPTS)	! data pts, last pt assumed same as 1st
	REAL	  THK		! paint-out thickness
	INTEGER	  NHATCH	! 0=thick fill
C				  1=horizontal fill
C				  2=vertical fill
C				  3=horizontal and vertical fill
C
C workspace:
	INTEGER   I,J
	INTEGER   ISCT
	INTEGER   LHATCH	! working value of NHATCH
	INTEGER   NSCT		! number of intersections (even)
	LOGICAL   HORIZ		! present direction of fill
	REAL	  DV,ALPHA,VSCT	! intersection calculation
	REAL 	  INTSCT(MAXSCT)! list of intersections (sorted)
	REAL	  U,V		! axes
	REAL	  USCT		! interpolated U intersection position
	REAL	  VMIN,VMAX	! limits to feature
	REAL	  VSLICE	! current raster line
C
C ......................................................................
C
C check for silly cases.
	IF (NPTS.LT.3.OR.THK.LE.0.OR.NHATCH.LT.0.OR.NHATCH.GT.3)
     &	   GO TO 180
C
C loop for horizontal and/or vertical lines.
	LHATCH=NHATCH
	IF (LHATCH.GT.0) GO TO 10
	CALL THICK(THK)			! fill with thick lines
	GO TO 20			! (assume horizontal)
10	CALL THICK(0)
	IF (IAND(LHATCH,1).EQ.0) GO TO 30
	LHATCH=LHATCH - 1
20	HORIZ=.TRUE.			! horizontal
	U=X
	V=Y
	GO TO 40
30	IF (IAND(LHATCH,2).EQ.0) GO TO 180
	LHATCH=LHATCH - 2
	HORIZ=.FALSE.			! vertical
	U=Y
	V=X
C
C get limits.
40	VMIN=PNT(V,1)
	VMAX=PNT(V,1)
	DO 50 I=2,NPTS
	  IF (PNT(V,I).LT.VMIN) VMIN=PNT(V,I)
	  IF (PNT(V,I).GT.VMAX) VMAX=PNT(V,I)
50	CONTINUE
C
C start raster scan at bottom of feature.
	VSLICE=VMIN + THK/2
C
C find all intersections with this scan line.
60	NSCT=0				! none yet
	DO 120 I=1,NPTS-1
	  DV=PNT(V,I+1) - PNT(V,I)
	  IF (DV.EQ.0.0) GO TO 120	! ignore 'horizontals' (same V)
	  ALPHA=(VSLICE - PNT(V,I))/DV	! 'vertical' (V)  ratio
	  IF (ALPHA.LT.0.0.OR.ALPHA.GT.1.0) GO TO 120  ! no intersection
	  USCT=PNT(U,I)*(1.0-ALPHA) + PNT(U,I+1)*ALPHA
C
C add this intersection to list, sorting as we go.
	  IF (NSCT.LE.0) GO TO 80	! empty list
	  DO 70 J=1,NSCT		! seek position
	    ISCT=J
	    IF (INTSCT(ISCT).GT.USCT) GO TO 90
70	  CONTINUE
C
C insert at top of list.
80	  ISCT=NSCT + 1
	  GO TO 110
C
C shift top bit of list.
90	  DO 100 J=NSCT,ISCT,-1
	    INTSCT(J+1)=INTSCT(J)
100	  CONTINUE
C
C insert new entry.
110	  INTSCT(ISCT)=USCT
	  NSCT=NSCT + 1			! another entry
	  IF (NSCT.GE.MAXSCT) GO TO 130	! no room for more
120	CONTINUE			! get next point
C
C here with intersection list complete or full.
130	IF (NSCT.LT.2) GO TO 170	! empty raster
	IF (HORIZ) GO TO 150
	DO 140 I=1,NSCT-1,2		! vertical slice
	  CALL MOVTO(VSLICE,INTSCT( I ))
	  CALL LINTO(VSLICE,INTSCT(I+1))
140	CONTINUE
	GO TO 170
150	DO 160 I=1,NSCT-1,2		! horizontal slice
	  CALL MOVTO(INTSCT( I ),VSLICE)
	  CALL LINTO(INTSCT(I+1),VSLICE)
160	CONTINUE
C
170	VSLICE=VSLICE + THK		! on to next raster line
	IF (VSLICE.LE.VMAX-THK/2) GO TO 60
	GO TO 30			! scanned whole feature
C
180	RETURN
	END
