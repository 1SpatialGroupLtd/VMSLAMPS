C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-05-30 16:29:58.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE AUTX(RC,IXPOS)
C
***	MODULE	AUTX
***	IDENT	30MY86
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	Only call CSRD if HADLDI		 DM	30-May-1986
CMOD	Use /LKFOLL/ to pass ID,IU,IV		 DM	02-Sep-1985
CMOD	Use ANALYZ rather than GROW		 DM	22-Aug-1985
CMOD	Another divide-by-zero bites the dust !	 DM	17-May-1983
CMOD	Tidies, check for divide by zero	AJW	03-May-1983
CMOD	or EDGING				AJW	05-Apr-1982
CMOD	call to GROW doesn't use CHLIM		AJW	02-Apr-1982
CMOD	garbage at end fixed			AJW	05-Jan-1982
CMOD	New GROW implemented (RGROW removed)	WJJ	22-Dec-1981
CMOD	MOVETO changed to MOVTO			AJW	20-May-1981
CMOD	Author					PGH
C
C Automatic digitisation of X type points routine.
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
C parameters:
***	PARAMETER/PARAMS/
C
C arguments:
	INTEGER RC		! return code
	INTEGER IXPOS(2)	! position in scan
C
C common blocks:
***	COMMON/ANACOM/
***	COMMON/LINKS/
***	COMMON/LKFOLL/
***	COMMON/LKPARM/
***	COMMON/MASTER/
***	COMMON/RSE/
***	COMMON/SCCORR/
***	COMMON/SCPARM/
C
C local workspace:
	INTEGER   FIR		! first point in chain
	INTEGER   IAXIS
	INTEGER   ICHN		! loops through all chains
	INTEGER   IPNT		! loops thro all points in ICHN
	INTEGER   ISLOPE(MAXCHN)	! 0,1,2=random,perp,parallel
	INTEGER   KKK
	INTEGER   LAS		! last point in chain
	INTEGER   LENMAX	! length of longest chain (LONGC)
	INTEGER   LONGC		! longest chain
	INTEGER   NCHN
	INTEGER   NPTS		! total number of points in all chains
	LOGICAL*1 GOTLIN(2)	! we have a line in each axis
	LOGICAL*1 JNCSAV	! saved value of JNCING
	REAL      A12
	REAL      AVEWID	! average width of all points
	REAL      COS2PH
	REAL      COS2TH
	REAL      COSALF
	REAL      COSPHI
	REAL      COSTH(2)
	REAL      CURPOS(2)	! cursor position
	REAL      DDD(2)
	REAL      DOT12
	REAL      DX(2)
	REAL      DXP
	REAL      DY(2)
	REAL      DYP
	REAL      PERP		! perpendicular distance
	REAL      RRR
	REAL      RWID		! WID*WAR*CR(X,Y)
	REAL      RX,RY
	REAL      RXPOS(2)	! position of cross
	REAL      S1
	REAL      SCANST(2)	! start of scan
	REAL      SIN2PH
	REAL      SINALF
	REAL      SINPHI
	REAL      SINTH(2)
	REAL      SX
	REAL      SXX
	REAL      SXXP
	REAL      SXY
	REAL      SXYP
	REAL      SY
	REAL      SYY
	REAL      SYYP
	REAL      TTT
C
C ......................................................................
C
	JNCSAV=JNCING
	JNCING=.FALSE.		! just in case
	GOTLIN(1)=.FALSE.
	GOTLIN(2)=.FALSE.
	RC=0			!  assume success
	IF (HADLDI) CALL CSRD(CURPOS(X),CURPOS(Y))
C
	DO 150 IU=1,2		! for each axis
	  IV=3-IU
	  IDIR=2-IU
	  RWID=IWID*CR(IV)*WAR
	  ID(IV)=0
	  ID(IU)=RWID
	  CALL DISMOD(0)
	  SCANST(IU)=CURPOS(IU)-RWID/2.0
	  SCANST(IV)=CURPOS(IV)
	  CALL MOVTO(SCANST(X),SCANST(Y))
C
C now set up and do scan
	  CALL SCANBY(ID(X),ID(Y),1)
	  NEGOT=0
	  CALL SCSET(0)
C
C analyse the result
	  CALL ANALYZ
	  IF (ANLYZD.LT.0) GO TO 210
C
C convert to lists
	  CALL CHNLST
C
C find average width to remove centre thick line
	  NPTS=0
	  AVEWID=0.0
C
C loop over all chains ...
	  DO 20 ICHN=1,MAXCHN
	    IPNT=CHAIN(ICHN)
	    IF (IPNT.EQ.0) GOTO 20
C
C and all points in the chain
10	    AVEWID=AVEWID+(ENCBUF(W,IPNT).AND.NEGWID)
	      NPTS=NPTS+1
	      IPNT=NXT(IPNT)
	    IF (IPNT.NE.0) GOTO 10
20	  CONTINUE
C
	  IF (NPTS.EQ.0) GOTO 170		! nothing seen
C
	  AVEWID=AVEWID/FLOAT(NPTS)*1.4
C
C reject all chains with width greater that LIM15*<average width>
	  DO 50 ICHN=1,MAXCHN
	    IPNT=CHAIN(ICHN)
30	    IF (IPNT.EQ.0) GO TO 50
	      IF ((ENCBUF(W,IPNT).AND.NEGWID).GT.AVEWID*LIMIT(15))
     &		 GO TO 40
	      IPNT=NXT(IPNT)
	    GO TO 30
40	    CHAIN(ICHN)=0
50	  CONTINUE
C
C find longest chain
	  LONGC=0
	  LENMAX=2
	  DO 60 ICHN=1,MAXCHN
	    IF (CHAIN(ICHN).EQ.0) GOTO 60
	    IF (LENGTH(ICHN).LE.LENMAX) GOTO 60
	    LENMAX=LENGTH(ICHN)
	    LONGC=ICHN
60	  CONTINUE
C
	  IF (LONGC.EQ.0) GOTO 150		! no chains
C
C calculate its vector etc
	  LAS=NODE(LAST(LONGC))
	  FIR=NODE(FIRST(LONGC))
	  DX(1)=ENCBUF(X,LAS)-ENCBUF(X,FIR)
	  DY(1)=ENCBUF(Y,LAS)-ENCBUF(Y,FIR)
	  RRR=DY(1)*DY(1)+DX(1)*DX(1)
	  TTT=FLOAT(ENCBUF(X,LAS))*FLOAT(ENCBUF(Y,FIR)) -
     &	      FLOAT(ENCBUF(X,FIR))*FLOAT(ENCBUF(Y,LAS))
C
C now search all chains for parallel and perpendicular
	  LONGC=0
	  LENMAX=2
	  DO 80 ICHN=1,MAXCHN
	    ISLOPE(ICHN)=0
	    IF (LENGTH(ICHN).LT.3) CHAIN(ICHN)=0
	    IF (CHAIN(ICHN).EQ.0) GOTO 80
	    DX(2)=ENCBUF(X,NODE(LAST(ICHN)))-ENCBUF(X,NODE(FIRST(ICHN)))
	    DY(2)=ENCBUF(Y,NODE(LAST(ICHN)))-ENCBUF(Y,NODE(FIRST(ICHN)))
	    DOT12=DX(1)*DX(2)+DY(1)*DY(2)
	    A12=(DX(1)*DX(1)+DY(1)*DY(1))*(DX(2)*DX(2)+DY(2)*DY(2))
	    COS2TH=DOT12*DOT12/A12
C
C COS2TH goes from 0 when perp to 1 when parallel
	    IF (COS2TH.LT.0.5) ISLOPE(ICHN)=1
	    IF (COS2TH.GT.1.0-LIMIT(4)) ISLOPE(ICHN)=2
	    IF (ISLOPE(ICHN).EQ.0) CHAIN(ICHN)=0
C
C check parallel chains for perpendicular distance
	    IF (ISLOPE(ICHN).NE.2) GOTO 70
	    PERP=DY(1)*ENCBUF(X,NODE(FIRST(ICHN)))-
     &           DX(1)*ENCBUF(Y,NODE(FIRST(ICHN)))+TTT
	    PERP=PERP*PERP/RRR		! square of perp distance
	    IF (PERP.LE.LIMIT(9)) GOTO 80
	    ISLOPE(ICHN)=0
	    CHAIN(ICHN)=0
C
C find longest chain in 'perp' direction
70	    IF (ISLOPE(ICHN).NE.1) GOTO 80
	    IF (LENGTH(ICHN).LE.LENMAX) GOTO 80
	    LONGC=ICHN
	    LENMAX=LENGTH(ICHN)
	    DXP=DX(2)
	    DYP=DY(2)
80	  CONTINUE
C
	  IF (LONGC.EQ.0) GOTO 110		! no perp lines
C
C check for parallel to the 'perp' line
	  DX(1)=DXP
	  DY(1)=DYP
	  RRR=DY(1)*DY(1)+DX(1)*DX(1)
	  LAS=NODE(LAST(LONGC))
	  FIR=NODE(FIRST(LONGC))
	  TTT=FLOAT(ENCBUF(X,LAS))*FLOAT(ENCBUF(Y,FIR))-
     &        FLOAT(ENCBUF(X,FIR))*FLOAT(ENCBUF(Y,LAS))
	  DO 100 ICHN=1,MAXCHN
	    IF (ISLOPE(ICHN).NE.1) GOTO 100
	    DX(2)=ENCBUF(X,NODE(LAST(ICHN)))-ENCBUF(X,NODE(FIRST(ICHN)))
	    DY(2)=ENCBUF(Y,NODE(LAST(ICHN)))-ENCBUF(Y,NODE(FIRST(ICHN)))
	    DOT12=DX(1)*DX(2)+DY(1)*DY(2)
	    A12=(DX(1)*DX(1)+DY(1)*DY(1))*(DX(2)*DX(2)+DY(2)*DY(2))
	    COS2TH=DOT12*DOT12/A12
	    IF (COS2TH.GT.1.0-LIMIT(4)) GOTO 90
	    ISLOPE(ICHN)=0
	    CHAIN(ICHN)=0
	    GOTO 100
C
C check for perpendicular distance
90	    PERP=DY(1)*ENCBUF(X,NODE(FIRST(ICHN)))-
     &           DX(1)*ENCBUF(Y,NODE(FIRST(ICHN)))+TTT
	    PERP=PERP*PERP/RRR
	    IF (PERP.LE.LIMIT(9)) GOTO 100
	    ISLOPE(ICHN)=0
	    CHAIN(ICHN)=0
100	  CONTINUE
C
C now fit two lines if possible
110	  IAXIS=0
	  DO 140 KKK=IU,IV,IV-IU
	    IAXIS=IAXIS+1
	    IF (GOTLIN(KKK)) GOTO 140
	    SX=0.0
	    SY=0.0
	    SXX=0.0
	    SXY=0.0
	    SYY=0.0
	    S1 =0.0
	    NCHN=0
	    DO 130 ICHN=1,MAXCHN
	      IF (ISLOPE(ICHN).NE.IAXIS) GOTO 130
	      NCHN=NCHN+1
	      IPNT=CHAIN(ICHN)
120	      RX=ENCBUF(X,IPNT)+SCANST(X)
	        RY=ENCBUF(Y,IPNT)+SCANST(Y)
	        S1=S1+1
	        SX=SX+RX
	        SY=SY+RY
	        SXX=SXX+RX*RX
	        SXY=SXY+RX*RY
	        SYY=SYY+RY*RY
	        IPNT=NXT(IPNT)
	      IF (IPNT.GT.0) GOTO 120
130	    CONTINUE
C
	    IF (NCHN.LT.2) GOTO 140		! less than 2 chains
C
	    SXXP=SXX-SX*SX/S1
	    SXYP=SXY-SX*SY/S1
	    SYYP=SYY-SY*SY/S1
C
	    COS2PH=SXYP*2
	    SIN2PH=SXXP-SYYP
	    RRR=SQRT(COS2PH*COS2PH+SIN2PH*SIN2PH)
	    IF (RRR.EQ.0.0) GOTO 140
	    COS2PH=COS2PH/RRR
	    SIN2PH=SIN2PH/RRR
	    SINALF= 0.7071
	    COSALF=-SINALF
	    SINPHI=1-COS2PH
	    COSPHI=SIN2PH
	    RRR=SQRT(SINPHI*SINPHI+COSPHI*COSPHI)
	    IF (RRR.EQ.0.0) GOTO 140
	    GOTLIN(KKK)=.TRUE.
	    SINPHI=SINPHI/RRR
	    COSPHI=COSPHI/RRR
	    COSTH(KKK)=COSALF*COSPHI+SINALF*SINPHI
	    SINTH(KKK)=SINALF*COSPHI-COSALF*SINPHI
	    DDD(KKK)=COSTH(KKK)*SX/S1+SINTH(KKK)*SY/S1
140	  CONTINUE
	  IF (GOTLIN(1).AND.GOTLIN(2)) GOTO 160
150	CONTINUE
	IF (GOTLIN(1).OR.GOTLIN(2)) GOTO 180		! missing axis
	GOTO 170					! nothing seen
C
C now solve for intersection of these lines
160	A12=COSTH(1)*SINTH(2)-COSTH(2)*SINTH(1)
	IF (ABS(A12).LT.0.5) GOTO 200		! not right angled
	RXPOS(X)=(DDD(1)*SINTH(2)-DDD(2)*SINTH(1))/A12
	RXPOS(Y)=(DDD(2)*COSTH(1)-DDD(1)*COSTH(2))/A12
C
C return answer as cursor position
C centre outside scanned area ?
	IF (MAX(ABS(CURPOS(X)-RXPOS(X)),
     &          ABS(CURPOS(Y)-RXPOS(Y))).GT.RWID) GOTO 190
	CALL CSWT(RXPOS(X),RXPOS(Y))
C and as offset in scan
	IXPOS(X)=RXPOS(X)-SCANST(X)
	IXPOS(Y)=RXPOS(Y)-SCANST(Y)
	GOTO 230
C
C error returns
C longest line too short or nothing seen
170	RC=-1
	GOTO 220
C
C missing axis
180	RC=-2
	GOTO 220
C
C confused
190	RC=-3
	GOTO 220
C
C lines nowhere near perpendicular
200	RC=-10-ABS(A12)*10
	GOTO 220
C
C unable to analyse scan
210	RC=-4
C
C general error
220	IXPOS(X)=0
	IXPOS(Y)=0
C
230	JNCING=JNCSAV
	RETURN
C
	END
