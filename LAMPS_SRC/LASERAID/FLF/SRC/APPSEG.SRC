	LOGICAL*4 FUNCTION APPSEG(NEAR,OUTPUT,FORCED,CLOSED)
C
***	MODULE	APPSEG
***	IDENT	17JN86
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	NMPIFF now set in OUTMP1		 DM	17-Jun-1986
CMOD	JPOSTL replaces LIMIT(17)		 DM	10-Jun-1986
CMOD	Converged				 DM	28-May-1986
CMOD	APPSEG now LOGICAL; new argument CLOSED;
CMOD	junction search criterion same as ADDJUN DM	16-May-1986
CMOD	Don't do closure test if 1st pt is jnctn DM	28-Apr-1986
CMOD	Slow down TRKWID changes		WJJ	15-Jun-1983
CMOD	Handles large features correctly	 DM	19-Nov-1982
CMOD	SEGJUN cleared after use		 DM	04-Nov-1982
CMOD	New BUNCH				 DM	26-Oct-1982
CMOD	keeps track of NJUNC correctly		AJW	11-Oct-1982
CMOD	Checks for superimposed junctions	AJW	07-Oct-1982
CMOD	More new vertex extraction stuff added	 DM	05-Oct-1982
CMOD	NMPIFF was 2nd arg, now in /MPEP/,
CMOD	and call OUTMP1 before set NMPIFF	AJW	04-Oct-1982
CMOD	New vertex extraction stuff added	 DM	04-Oct-1982
CMOD	Sets up JLIARM, JLOARM			AJW	01-Oct-1982
CMOD	Cannot close a feature with < 4 points	 DM	30-Sep-1982
CMOD	FLUSH given an argument			 DM	28-Sep-1982
CMOD	Clears junction flag if closed		AJW	20-Aug-1982
CMOD	Copies SEGANG to MPJANG			AJW	11-Aug-1982
CMOD	Change junction test to SEGJUN.LE.0	WJJ	07-May-1982
CMOD	Don't use SEGWID at lbl 80 if .LE. 0.0	AJW/WJJ	05-Feb-1982
CMOD	/JNCLST/ only if JNCTN			AJW	22-Jul-1981
CMOD	Checks that junction arrays aren't full  DM	19-Mar-1981
CMOD	Will not put 2-armed junctions in MPJUN	AJW	19-Jan-1981
CMOD	Tidies and more junction stuff		AJW	15-Jan-1981
CMOD	Junction flagging added			AJW	08-Jul-1980
CMOD	CHAIN(CONNCT(2,CHNSEL)) always zeroed	MCF	09-Jun-1980
CMOD	TOMP split into APPSEG and NXTSEG	AJW	29-Nov-1979
CMOD	Started life as TOMP			MCF	18-Apr-1979
C
C Outputs /TRKSEG/ to /MPEP/.
C Result is .FALSE. if the feature is too large or CLOSED,
C .TRUE. otherwise.
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
***	PARAMETER/PARAMS/
C
C arguments:
	INTEGER	  FORCED	! 1 ==> tidy up new vexing (if used)
	LOGICAL*1 OUTPUT	! do we output to the IFF file ?
	LOGICAL*1 NEAR		! input - is feature almost closed ?
	LOGICAL*1 CLOSED	! is feature is actually closed ?
C
***	COMMON/DIGC/
***	COMMON/JNCLST/
***	COMMON/JUNCTN/
***	COMMON/LINKS/
***	COMMON/LKFOLL/
***	COMMON/LKPARM/
***	COMMON/MASTER/		! for WIZARD
***	COMMON/MPEP/
***	COMMON/TRKSEG/
C
C workspace:
	INTEGER   III,JJJ,KKK
	INTEGER	  MOLD
	INTEGER	  TIDY
	LOGICAL*1 TMPCLO	! temp variable holding new CLOSED
	REAL      DOT12
	REAL      DX(3),DY(3)
	REAL      RR(3),HH,RR2COS
C
C statement function:
	REAL DOT
	DOT(III,JJJ)=DX(III)*DX(JJJ) + DY(III)*DY(JJJ)
C
C ......................................................................
C
	APPSEG=.TRUE.
	TMPCLO=.FALSE.
C
C ... anything to do ?
	IF (SEGLEN.LE.0) GO TO 160
	DO 130 III=1,SEGLEN
	   MOLD=NMP(1)
	   TIDY=0			! def, don't force out master pt
	   IF (SEGJUN.LE.0) GO TO 10	! junction ?
C
C ... check that new junction is not the same as old junction.
	   TIDY=-2
	   IF (NMP(1).LE.0) GO TO 10
	   IF (MPTYPE(NMP(1)).LE.0) GO TO 10
	   IF ((SEGPT(X,1)-MP1(X,NMP(1)))**2 +
     &	       (SEGPT(Y,1)-MP1(Y,NMP(1)))**2
     &	       .GT.2.0*(JPOSTL**2)) GO TO 10
	   IF (WIZARD) CALL WRITEF(
     &	      'Junction digitised twice - latest measurement ignored')
	   SEGJUN=0
	   TIDY=0
C
10	   IF (VEXING.AND.III.EQ.SEGLEN.AND.FORCED.EQ.1) TIDY=1
C
C ... put point into MP1 buffer, removing unwanted points.
	   CALL BUNCH(SEGPT(X,III),SEGPT(Y,III),TIDY)
C
C ... if we have a junction point, make sure it is in the MP1 buffer
C ... and set the flag in /MPEP/ with the number of arms.
	   IF (SEGJUN.LE.2) GO TO 60
	   NJUNC=JLNJP
	   DO 20 JJJ=1,NMP(1)
	      IF (MPTYPE(JJJ).GT.0) NJUNC = NJUNC + 1
20	   CONTINUE
	   NJUNC=NJUNC+1
	   IF (NJUNC.LT.MAXJL-1) GO TO 40
	   IF (NJUNC.GT.MAXJL-1) GO TO 30
	   CALL WRITEF('%CMaximum number of junctions reached%C',7,7)
	   GO TO 40
30	   CALL WRITEF('%CJunction not added%C',7,7)
	   GO TO 60
C
C ... mark it as a junction.
40	   MPTYPE(NMP(1))=SEGJUN
	   MPIARM(NMP(1))=BRAINC(CONNCT(2,CHNSEL))
	   MPOARM(NMP(1))=CONNCT(3,CHNSEL)
	   DO 50 JJJ=1,MAXBRA
	      MPJANG(JJJ,NMP(1))=SEGANG(JJJ)
50	   CONTINUE
60	   SEGJUN=0
C
C ... preserve first point.
	   IF (NMP(1).NE.1) GO TO 80		! not first point
	   IF (.NOT.PENUP) GO TO 80		! not first in feature
	   IF (NMP(1).EQ.MOLD) GO TO 80		! not a new master point
	   SEC(X)=MP1(X,1)
	   SEC(Y)=MP1(Y,1)
	   SECTYP=MPTYPE(1)
	   IF (SECTYP.LE.0) GO TO 80		! not a junction
	   SECJOA=MPOARM(1)
	   DO 70 JJJ=1,MAXBRA
	      SECJAN(JJJ)=MPJANG(JJJ,1)
70	   CONTINUE
C
C ......................................................................
C
C ... check for closure if enabled.
80	   IF (OPEN) GO TO 110
	   IF (.NOT.NEAR) GO TO 110
	   IF (NMPIFF+NMP(1).LE.3) GO TO 110
	   IF (.NOT.(JNCING.OR.JINHIB)) GO TO 90
	   IF (SECTYP.LE.0) GO TO 90		! if 1st pnt is a jnctn
	   IF (CLOSED) GO TO 110		! don't test if CLOSED
	   IF (MPTYPE(NMP(1)).LE.0) GO TO 110	! or we aren't a jnctn
C
90	   DX(1)=MP1(X,MOLD) - SEC(X)
	   DY(1)=MP1(Y,MOLD) - SEC(Y)
	   DX(2)=SEGPT(X,III) - SEC(X)
	   DY(2)=SEGPT(Y,III) - SEC(Y)
C
C ... now check for overshoot.
	   DOT12=DOT(1,2)
	   IF (DOT12.GT.0.0) GO TO 110
C
C ... angle is obtuse so check perpendicular distance.
	   DX(3)=DX(2) - DX(1)
	   DY(3)=DY(2) - DY(1)
	   RR(3)=DOT(3,3)
	   IF (RR(3).EQ.0.0) GO TO 100		! superimposed ?
	   RR(1)=DOT(1,1)
	   RR(2)=DOT(2,2)
	   RR2COS=RR(1) + RR(3) - RR(2)
	   HH=RR(1) - 0.25*RR2COS*RR2COS/RR(3)
	   IF (HH.GT.LIMIT(13)) GO TO 110	! not near enough
C
C ... close enough, so closed.
100	   IF (TIDY.EQ.0) CALL BUNCH(0.0,0.0,2)
	   IF (NMPIFF+NMP(1).LE.3) GO TO 110
	   APPSEG=.FALSE.
	   TMPCLO=.TRUE.
	   GO TO 150
C
C ......................................................................
C
110	   IF (NMP(1).LE.MPLIM) GO TO 130
	   IF (NMPIFF+NMP(1).LE.MPTOTE) GO TO 120
	   APPSEG=.FALSE.			! too big
	   GO TO 140
C
120	   CALL OUTMP1(MPLEFT,THKNSS,PENUP,OUTPUT)
130	CONTINUE
C
140	TMPCLO=.FALSE.
150	IF (SEGWID.LE.0.0) GO TO 160
	IF (TRKWID.LE.0.0) TRKWID=SEGWID
C
C ... (N.B. the following expression must match that in SURE).
	TRKWID=(3.0*TRKWID + SEGWID)/4.0	! TRKWID adapts slowly
C
160	CHAIN(CONNCT(2,CHNSEL))=0
	CLOSED=TMPCLO
	RETURN
	END
