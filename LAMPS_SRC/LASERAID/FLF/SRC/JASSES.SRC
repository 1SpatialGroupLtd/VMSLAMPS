	SUBROUTINE JASSES(CONGOT,GOTJUN,GOT2)
C
***	MODULE	JASSES
***	IDENT	10JN86
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	JANGTL replaces LIMIT(18)		 DM	10-Jun-1986
CMOD	BRIEF introduced			 DM	30-May-1986
CMOD	Two more arguments added; tidied again	 DM	25-Apr-1986
CMOD	If starting up get jnc nearest to START	 DM	10-Apr-1986
CMOD	JSANG negated (not zeroed) if arm used	 DM	08-Apr-1986
CMOD	JSSRCH now has 2 extra arguments; tidied DM	10-Sep-1985
CMOD	Calculate BCKMP if NMP(1) > 0 (not 1)	 DM	29-Oct-1982
CMOD	New BUNCH used to discard unwanted MPs	 DM	25-Oct-1982
CMOD	GT instead of LT in dropping MPs	AJW	11-Oct-1982
CMOD	Use LIMITs 17,18 for jn tolerances	WJJ	06-Oct-1982
CMOD	Add code to use in-core junction buffer	WJJ	04-Oct-1982
CMOD	Re-written				AJW	30-Sep-1982
CMOD	angle of arm is JNCPOS-BRAFST, not
CMOD	BRAFST-BRALST				AJW	07-Sep-1982
CMOD	pushes NMP(1) back past junction	AJW	03-Sep-1982
CMOD	VECCOS takes REAL arguments		AJW	03-Sep-1982
CMOD	GTLST requires points 20u apart		AJW	20-Aug-1982
CMOD	Presents all arms of all junctions	AJW	02-Jul-1982
CMOD	Takes ABS in calculating DOT prdct	AJW	24-Jun-1982
CMOD	Uses CRSSNG				AJW	22-Jun-1982
CMOD	Xs and Ys the right way round		AJW	22-Jun-1982
CMOD	Orders arms on angle with VECTWO	AJW	08-Jun-1982
CMOD	CONGOT as arg				AJW	03-Jun-1982
CMOD	Created					AJW	02-Jun-1982
C
C Sorts the junctions and arms into order of quality.
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
C parameters:
	PARAMETER L=1,R=2
***	PARAMETER/PARAMS/
C
C arguments:
	INTEGER   CONGOT	! number of connections
	LOGICAL*1 GOTJUN	! already know junction details ?
	LOGICAL*1 GOT2		! if GOTJUN, found 2 data points ?
C
C common blocks:
***	COMMON/BLG/
***	COMMON/EXPC/
***	COMMON/JNCLST/
***	COMMON/JUNCTN/
***	COMMON/LINKS/
***	COMMON/LKFOLL/
***	COMMON/LKPARM/
***	COMMON/MPEP/
***	COMMON/RSE/
C
C local workspace:
	INTEGER   III,JJJ	! do loops, temp variables, etc.
	INTEGER   INCARM	! incoming arm, we hope
	INTEGER   JSANG(MAXBRA)	! the angles of the free arms
	INTEGER   JSARM		! how many arms the junction should have
	INTEGER   MINANG	! angle diff after arm-match
	INTEGER   MINJNC	! junction with smallest dot product
	INTEGER   OUTARM	! straight-through arm 
	LOGICAL*1 JHARMU(MAXBRA) ! if the arm has been used (in-hand j.)
	REAL      BCKMP(2)	! last backlogged/master point
	REAL      MAXCOS	! min angle of arm for junction
	REAL      MINCOS	! max ditto
	REAL      MINDOT	! smallest dot product
	REAL	  MINDST	! min dist of junction from START
	REAL      RTEMP		! temporary variable
	REAL      THISQU	! current quality
	REAL      VECONE(2)	! vectors
	REAL      VECTWO(2)
C
C functions:
	INTEGER	  EXPAND
	LOGICAL*4 JSSRCH
	REAL      VECCOS
C
C ......................................................................
C
	CONGOT=0
C
	IF (JNCNUM.LE.0) GO TO 230
C
	THISQU=MAXJUN*MAXBRA
C
	IF (GOTJUN) THEN
	  BRAINC(1)=0		! set up for known junction
	  OUTARM=0
	  JSARM=JNCBRA(1)
	  DO 10 III=1,MAXBRA
	    JSANG(III)=BRAANG(III,1)
10	  CONTINUE
	  IF (GOT2) GO TO 60	! OK if got two data points in hand
	  DO 20 III=JSARM,1,-1	! else get lowest numbered free arm
	    JHARMU(III)=.FALSE.
	    IF (JSANG(III).GT.0) OUTARM=III
20	  CONTINUE
	  IF (OUTARM.EQ.0) GO TO 230
	  III=OUTARM
	  INCARM=0
	  MINJNC=1
	  GO TO 150
	ENDIF
C
C get last two backlogged/master points, relative to START.
	CALL GTLST2(START,10000.0,20.0,III,LSTONE,NXTLST,JJJ)
C
C if failed allow all arms of all junctions, else best junction, and
C eliminate arm we came in on
	IF (III.EQ.4) GO TO 60	! usual case, deduce best jn., etc.
30	MINDST=1.0E38
	DO 40 III=1,JNCNUM	! start-up probably, select nearest jn
	  RTEMP=FLOAT(JNCPOS(X,III))**2 + FLOAT(JNCPOS(Y,III))**2
	  IF (RTEMP.GE.MINDST) GO TO 40
	  MINJNC=III
	  MINDST=RTEMP
40	CONTINUE
	INCARM=0		! we know nothing about the context
	OUTARM=0
	DO 50 III=1,MAXJUN	! clear incoming arm array
	  BRAINC(III)=0
50	CONTINUE
	GO TO 110
C
C	                       !           !
C	                       !           !
C	                       !           ------------
C	                       !
C	                       !     +
C	                       !    / JNCPOS(2)
C	                       !   /       ------------
C	                       !  /        !
C	                       ! L         !
C	                       !/          !
C	             BRAFST(L) +     +     + BRAFST(R)
C	----------------------/-     !     ------------------
C	                     /       ^ VECONEb
C	         VECONEa    /VECTWO  !
C	    +-------<------+-----<---+
C	 NXTLST          LSTONE    JNCPOS(1)
C
C	-----------------------------------------------------
C
C NXTLST and LSTONE are first calculated by GTLST2, and may be Master
C points, Backlogged points, or NXTLST a MP and LSTONE a BLG.
C as we drop points, LSTONE corresponds to BCKMP
C when calculating arms, VECONE is the vector from the junction to the
C mid point of each arm
C
C ********** ALL VECTORS POINT OUT OF JUNCTIONS **********
C
60	VECONE(X)=NXTLST(X) - LSTONE(X)
	VECONE(Y)=NXTLST(Y) - LSTONE(Y)
C
C get the best junction for dot product of JNCPOS=>LSTONE and
C LSTONE=>NXTLST
	MINDOT=1.0E38
	DO 70 III=1,JNCNUM
	  IF (JNCBRA(III).LE.0) GO TO 70
	  RTEMP=ABS(LSTONE(X) - FLOAT(JNCPOS(X,III))*VECONE(Y)) +
     &          ABS(LSTONE(Y) - FLOAT(JNCPOS(Y,III))*VECONE(X))
	  IF (RTEMP.GT.MINDOT) GO TO 70
	  MINJNC=III
	  MINDOT=RTEMP
70	CONTINUE
C
C drop backlogged points and masterpoints that overshoot junction.
	CALL BUNCH(START(X)+JNCPOS(X,MINJNC),
     &		   START(Y)+JNCPOS(Y,MINJNC),-1)
	IF (NMP(1).LE.0) GO TO 30
	BCKMP(X)=MP1(X,NMP(1))
	BCKMP(Y)=MP1(Y,NMP(1))
C
C for each junction get the arm we came in on
	DO 100 JJJ=1,JNCNUM
	  MAXCOS=-2.0
	  MINCOS= 2.0
	  VECTWO(X)=BCKMP(X) - (START(X)+JNCPOS(X,JJJ))
	  VECTWO(Y)=BCKMP(Y) - (START(Y)+JNCPOS(Y,JJJ))
C
C get angle of each branch with VECONE
C incoming arm has smallest angle (largest cosine)
C outgoing arm has largest angle
	  DO 90 III=1,JNCBRA(JJJ)
	    IF (GOTJUN) THEN		! already know about junction ?
	      IF (BRAANG(III,1).LE.0.OR.BRAANG(III,1).GT.360) GO TO 90
	      VECONE(X)=COS(FLOAT(BRAANG(III,1))*3.141593/180.0)
	      VECONE(Y)=SIN(FLOAT(BRAANG(III,1))*3.141593/180.0)
	    ELSE
	      VECONE(X)=(ENCBUF(X,NODE(BRAFST(L,III,JJJ)))+
     &			 ENCBUF(X,NODE(BRAFST(R,III,JJJ))))/2 -
     &			JNCPOS(X,JJJ)
	      VECONE(Y)=(ENCBUF(Y,NODE(BRAFST(L,III,JJJ)))+
     &			 ENCBUF(Y,NODE(BRAFST(R,III,JJJ))))/2 -
     &			JNCPOS(Y,JJJ)
	    ENDIF
	    RTEMP=VECCOS(VECONE,VECTWO)
	    IF (RTEMP.LT.MAXCOS) GO TO 80
	    BRAINC(JJJ)=III
	    MAXCOS=RTEMP
80	    IF ((RTEMP.GT.MINCOS).OR.(JJJ.NE.MINJNC)) GO TO 90
	    OUTARM=III
	    MINCOS=RTEMP
90	  CONTINUE
100	CONTINUE
C
C keep incoming arm of best junction
	INCARM=BRAINC(MINJNC)
C
C if CRSSNG is 0, make OUTARM "straight ahead" 
C else, if   < 0, take left, else take right
	IF (CRSSNG.EQ.0) GO TO 110
	OUTARM=INCARM - SIGN(1,CRSSNG)
	IF (OUTARM.GT.JNCBRA(MINJNC)) OUTARM=1
	IF (OUTARM.LE.0) OUTARM=JNCBRA(MINJNC)
C
C say no arms used here yet
110	DO 120 III=1,JNCBRA(MINJNC)
	  JHARMU(III)=.FALSE.
120	CONTINUE
C
C don't let anything use INCARM if there is one
	IF (INCARM.GT.0) JHARMU(INCARM)=.TRUE.
	IF (GOTJUN) GO TO 130			! already found MINJNC ?
C
C now seek the junction MINJNC in our lists
	IF (.NOT.JSSRCH(START(X)+JNCPOS(X,MINJNC),
     &			START(Y)+JNCPOS(Y,MINJNC),
     &			JSARM,JSANG,JJJ,JJJ)) GO TO 180 ! j if none
	IF (JNCBRA(MINJNC).NE.JSARM) GO TO 180	! j if wrong arms
130	IF (INCARM.LE.0) GO TO 160		! no context (starting?)
C
C look for incoming arm in free list
	CALL JSSANG(BRAANG(INCARM,MINJNC),JSARM,JSANG,III,MINANG)
	IF (III.LE.0) GO TO 180			! no free arms
	IF (MINANG.GE.JANGTL) GO TO 180		! inc. arm not matched
C
C we have a matched incoming arm, remember it.
	JSANG(III)=-JSANG(III)			! remove from free list
	JHARMU(INCARM)=.TRUE.			! mark as used this time
C
C do we have an OUTARM ?
	IF (OUTARM.LE.0) GO TO 160		! j if not ...
	IF (OUTARM.NE.INCARM) GO TO 140		! or same as INCARM ...
	IF (.NOT.GOTJUN) GO TO 160		! and not GOTJUN
140	CALL JSSANG(BRAANG(OUTARM,MINJNC),JSARM,JSANG,III,MINANG)
	IF (III.GT.0) GO TO 150			! j if an arm found
C
C no outgoing arm, suggest end of feature and make special connection
	IF (BRIEF) THEN
	   CALL TXWT(EXPBUF,EXPAND('%C%C',7,7))
	ELSE
	   CALL WRITEF('End of feature ?%C',7)
	ENDIF
	CALL JSSCON(CONGOT,THISQU,0,MINJNC,0,5)		! connect it
	GO TO 180
C
C here with an OUTARM, mark as used and make the first connection
150	JSANG(III)=-JSANG(III)
	JHARMU(OUTARM)=.TRUE.
	CALL JSSCON(CONGOT,THISQU,0,MINJNC,OUTARM,5)	! connect it
C
C now connect all arms that match free arms
160	DO 170 III=1,JNCBRA(MINJNC)
	  IF (JHARMU(III)) GO TO 170	     ! skip used ones
	  CALL JSSANG(BRAANG(III,MINJNC),JSARM,JSANG,JJJ,MINANG)
	  IF (JJJ.LE.0) GO TO 180	     ! exit loop if no free arms
	  IF (MINANG.GE.JANGTL) GO TO 170    ! check angle discrepancy
	  JSANG(JJJ)=-JSANG(III)	     ! mark arm used
	  JHARMU(III)=.TRUE.
	  CALL JSSCON(CONGOT,THISQU,0,MINJNC,III,5)	! connect it
170	CONTINUE
C
C finished with free arm list now so get rid of the other arms on
C MINJNC. Come here if junction not in list, force OUTARM first.
180	IF (OUTARM.LE.0) GO TO 190	     ! j if no OUTARM
	IF (JHARMU(OUTARM)) GO TO 190	     ! or if it is used
	CALL JSSCON(CONGOT,THISQU,0,MINJNC,OUTARM,5)	! connect it
	JHARMU(OUTARM)=.TRUE.
C
C clear out other arms
190	DO 200 III=1,JNCBRA(MINJNC)
	  IF (.NOT.JHARMU(III))
     &	     CALL JSSCON(CONGOT,THISQU,0,MINJNC,III,5)	! connect it
200	CONTINUE
C
C then connect INCARM
	IF (INCARM.GT.0)
     &	   CALL JSSCON(CONGOT,THISQU,0,MINJNC,INCARM,5)	! connect it
C
C finally connect all arms of all remaining junctions
	DO 220 III=1,JNCNUM
	  IF (III.EQ.MINJNC) GO TO 220
	  DO 210 JJJ=1,JNCBRA(III)
	    CALL JSSCON(CONGOT,THISQU,0,III,JJJ,5)	! connect arm
210	  CONTINUE
220	CONTINUE
C
230	CONTINUE
	RETURN
	END
