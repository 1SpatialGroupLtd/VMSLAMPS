	SUBROUTINE GRWARE(ENCS,HOL,RIP,IU,IV,PITCH)
C
***	MODULE	GRWARE
***	IDENT	18FE82
C
**	IF VAX
	  IMPLICIT NONE
**	ENDC
C
C
C Copyright Laser-Scan Laboratories Ltd,Cambridge,England
C
C	Last edited				JHR	18-Feb-1982
C	Adapted from EDGROW			JHR	15-Feb-1982
C	Tidied					AJW	28-May-1981
C	Author					MCF
C
C To structure the points in /RSE/ into chains after data-capture via 
C  area-scanning.
C Version for edges only.
C
C parameters:
***	PARAMETER/PARAMS/
C
C arguments:
	INTEGER ENCS		! number of encounters to process
	INTEGER HOL,RIP		! tolerances in the two axes
	INTEGER IU,IV		! axes
	INTEGER PITCH		! IPIT signed
C
C common blocks:
***	COMMON/RSE/
***	COMMON/LINKS/
C
C workspace:
	INTEGER   PNT
	INTEGER   DU,DV
	INTEGER   I,J,K
	INTEGER   IW
	INTEGER   IR,IRMIN
	INTEGER   JCHAIN
C
	LOGICAL*1 PNTSNS
C
C suppress any existing chains
	DO 10 J = 1,MAXCHN
	  ACTCHN(J) = .FALSE.
10	CONTINUE
C
	IF (ENCS .EQ. 0) RETURN
C
	DO 70 PNT = 0, ENCS-1			! for each point
	  IW = (ENCBUF(W,PNT).AND.NEGWID)
	  PNTSNS = (IW.EQ.NEGNEG).XOR.(PITCH.GT.0).XOR.(IU.EQ.1)
C See which chain it belongs to (if any)
	  JCHAIN = -1
	  IRMIN = 0
	  DO 30 J = 1,MAXCHN	! look at all chains
	    K = CHAIN(J)
	    IF (K .LE. 0) GOTO 30
	    IF (.NOT.ACTCHN(J)) GOTO 30
	    DU = ENCBUF(IU,PNT)-ENCBUF(IU,K)
	    DV = ENCBUF(IV,PNT)-ENCBUF(IV,K)
C reject connection if ..
	    IF (PNTSNS.XOR.CHNSNS(J)) GOTO 30	! ..different edges..
	    IF (DU .EQ. 0) GOTO 30		! ..along scan ..
	    IF (ABS(DU) .GT. HOL) GOTO 30	! .. too big a hole ..
	    IF (ABS(DV) .GT. RIP) GOTO 30	! .. too wobbly
C having accepted it, give it a figure of merit
	    IR = ABS(DU)+ABS(DV)
	    IF (JCHAIN.GT.0 .AND. IR.GT.IRMIN) GOTO 30
C this is best so far
	    JCHAIN = J
	    IRMIN = IR
30	  CONTINUE
C
C looked at all connections - select the best
	  IF (JCHAIN .GT. 0) GOTO 60
C no connection so create a new chain
	  IF (J .LT. MAXCHN) GOTO 50
C no room for more - remove smallest chain
	  J = 1
	  DO 40 K=1,MAXCHN
	    IF(LENGTH(K).LT.LENGTH(J))J=K
40	  CONTINUE
C initialise new chain
50	  CHAIN(J) = 0
	  LENGTH(J) = 0
	  ACTCHN(J) = .TRUE.
	  CHNSNS(J) = PNTSNS
	  JCHAIN = J
C add the point to a chain
60	  NXT(PNT) = CHAIN(JCHAIN)
	  LENGTH(JCHAIN) = LENGTH(JCHAIN)+1
	  CHAIN(JCHAIN) = PNT
C point dealt with
70	CONTINUE	   ! look at the others
C
	RETURN		   ! processed all encs.
	END
