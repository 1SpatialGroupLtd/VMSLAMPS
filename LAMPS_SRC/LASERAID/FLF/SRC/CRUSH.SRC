C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-06-03 16:52:24.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE CRUSH(EPS,LIM,DIS)
C
***	MODULE	CRUSH
***	IDENT	03JN86
C
C Copyright Laserscan Laboratories Limited,Cambridge,England
C
CMOD	Tidied					 DM	03-Jun-1986
CMOD	VECCOS now takes REAL args VLN,VLT	AJW	02-Sep-1982
CMOD	EPS changed to E2 in distance test	AJW	05-Jan-1982
CMOD	INTEGER*2 and *4 removed, and some
CMOD	variables removed			AJW	22-Oct-1981
CMOD	Tidied					AJW	22-Jan-1981
CMOD	Created					AJW	26-Mar-1980
C
C Removes superfluous points from chains, in order to speed up junction
C recognition.
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
C parameters:
***	PARAMETER/PARAMS/
C
C arguments:
	REAL EPS		! max perp distance
	REAL LIM		! cosine of max angle
	REAL DIS		! maximum distance between points
C
C common blocks:
***	COMMON/LINKS/
***	COMMON/RSE/
C
C workspace:
	INTEGER   COUNT		! number of points skipped
	INTEGER   EXL,EYL	! ENCBUF(X,LASTPT),etc...
	INTEGER   I		! for each chain
	INTEGER   LASTPT	! last compacted point
	INTEGER   NEXTPT	! point after THISPT
	INTEGER   TESTPT	! point stepped between LASTPT & NEXTPT
	INTEGER   THISPT	! point to be added if tests fail
	REAL      COS
	REAL      D2		! DIS squared
	REAL      E2		! EPS squared
	REAL      VLN(2)	! vector LASTPT to NEXTPT
	REAL      VLT(2)	! vector LASTPT to TESTPT
C
C function:
	REAL VECCOS
C
C ......................................................................
C
	E2=EPS*EPS
	D2=DIS*DIS
C
	DO 50 I=1,MAXCHN
	   THISPT=CHAIN(I)		! is it a real chain ?
	   IF (THISPT.LE.0.OR.NXT(THISPT).LE.0) GO TO 50
10	   COUNT=-1
	      LASTPT=THISPT
20	      COUNT=COUNT + 1
	      THISPT=NXT(THISPT)
	      NEXTPT=NXT(THISPT)
	      IF (NEXTPT.LE.0) GO TO 40	! at the end ?
	      TESTPT=LASTPT
	      EXL=ENCBUF(X,LASTPT)
	      EYL=ENCBUF(Y,LASTPT)
	      VLN(X)=ENCBUF(X,NEXTPT) - EXL
	      VLN(Y)=ENCBUF(Y,NEXTPT) - EYL
	      IF ((VLN(X)**2 + VLN(Y)**2).GT.D2) GO TO 40
C
C have we tested all intermediate points ? if so try next TESTPT.
30	      TESTPT=NXT(TESTPT)
		 IF (TESTPT.EQ.NEXTPT) GO TO 20
		 VLT(X)=ENCBUF(X,TESTPT) - EXL
		 VLT(Y)=ENCBUF(Y,TESTPT) - EYL
		 COS=ABS(VECCOS(VLN,VLT))
		 IF (COS.LT.LIM) GO TO 40   ! ang or dist too great ?
	      IF ((VLT(X)**2 + VLT(Y)**2)*(1 - COS**2).LT.E2) GO TO 30
C
C put in a new point if distance or angle too great (cosine too small).
40	      NXT(LASTPT)=THISPT
	      LENGTH(I)=LENGTH(I) - COUNT
	   IF (NEXTPT.GT.0) GO TO 10
50	CONTINUE
C
	RETURN
	END
