	LOGICAL*4 FUNCTION CHKFID(FIDERR,SLAVE)
C
***	MODULE	CHKFID
***	IDENT	28JL86
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	Now a logical function			 DM	21-Jul-1986
CMOD	Check if NFID is zero (user-specified);
CMOD	SLAVE mode added (measure fiducial)	 DM	16-Jul-1986
CMOD	CPTS replaced by CPMEAS			 DM	25-Jun-1986
CMOD	Only call CSRD,DISMOD etc if HADLDI	 DM	30-May-1986
CMOD	Command table MEASCM used; tidied	 DM	17-Sep-1985
CMOD	O S G R I D removed, CORTYP added	AJW	13-Apr-1983
CMOD	/COEFFS/ removed			AJW	06-Apr-1983
CMOD	GRDOUT removed				AJW	02-Nov-1982
CMOD	T E X T C changed			AJW	 1-Jul-1981
CMOD	NULLCM INTEGER as well as EXTERNAL	AJW	12-Jun-1981
CMOD	MSGF changed to WRITEF			AJW	 8-May-1981
CMOD	Tidied					AJW	10-Apr-1981
CMOD	Converted from old CORNER routine	MCF	16-Jul-1980
CMOD	Created					MCF	 8-Nov-1976
C
C Check the specified fiducial.
C If SLAVE, remember the latest measurement.
C The function value is .TRUE. if we abandon the measurement.
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
C parameters:
***	PARAMETER/PARAMS/
C
C arguments:
	LOGICAL*1 FIDERR        ! fid out of range ?
	LOGICAL*1 SLAVE		! actually measure and remember fid ?
C
C common blocks:
***	COMMON/DIGC/
***	COMMON/EXPC/
***	COMMON/GRPARM/
***	COMMON/LKPARM/
***	COMMON/MASTER/
***	COMMON/SCPARM/
***	COMMON/TXTC/
C
C workspace:
	REAL      CUR(2),CT(2)
	INTEGER   CWD
	LOGICAL*1 CURSED
	LOGICAL*1 FND
C
C command table:
	INTEGER   MEASCM
	EXTERNAL  MEASCM
C
C functions:
	INTEGER   EXPAND
	INTEGER   RDCOMM
C
C ......................................................................
C
	CHKFID=.FALSE.
	IF (HADLDI) CALL CSRD(CT(X), CT(Y))
	CALL FBWT16("100212)
	CURSED=.FALSE.
C
	IF (NFID.GT.0.AND.CORTYP.NE.3) THEN
	  FIDPOS(X)=CPMEAS(X,NFID)
	  FIDPOS(Y)=CPMEAS(Y,NFID)
	ENDIF
C
	CUR(X)=FIDPOS(X)
	CUR(Y)=FIDPOS(Y)
	CALL CSWT(CUR(X),CUR(Y))
	GO TO 50				! try automatically
C
10	IF (HADLDI) CALL DISMOD(1)
	IF (.NOT.CURSED) GO TO 20
	CALL MOVTO(CUR(X),CUR(Y))
	CALL PLTCHR(0)
20	IF (HADLDI) CALL CURSOR
30	DCPTR=-1
	TXTPTR=-2
C
C read from FBs or keyboard.
	CWD=RDCOMM(MEASCM,.FALSE.)
	IF (CWD.LE.0) GO TO 30
C
C FB pressed.
	GO TO ( 30, 50, 30, 60,
     & 		30, 30, 30, 40,
     &		30, 30, 30, 30,
     &		30, 30, 30, 80), CWD
	GO TO 30
C
C manual measure.
40	CALL PARIO(4,PTYPE)
	CALL FAX(.TRUE.,IWID,IPIT)
	IF (HADLDI) CALL CSRD(CUR(X),CUR(Y))
	CURSED=.TRUE.
	GO TO 10
C
C measure the fiducial automatically.
50	CALL PARIO(4,FIDTYP)
	IF (HADLDI) CALL CSRD(CUR(X),CUR(Y))
	CALL FIDFND(CUR,CUR,FND,.FALSE.)
	CURSED=FND.AND..NOT.SLAVE
	IF (.NOT.FND) CALL WRITEF('Can''t find fiducial%C',7)
	CALL CSWT(CUR(X),CUR(Y))
	IF (CURSED) GO TO 70
	GO TO 10
C
C accept digitisation.
60	IF (HADLDI.AND..NOT.CURSED) CALL CSRD(CUR(X),CUR(Y))
C 
70	IF (SLAVE) THEN			! remember new measurement
	   FIDPOS(X)=CUR(X)
	   FIDPOS(Y)=CUR(Y)
	   GO TO 100
	ELSE				! test check fiducial results
	   CUR(X)=CUR(X) - FIDPOS(X)
	   CUR(Y)=CUR(Y) - FIDPOS(Y)
	   FIDERR=ABS(CUR(X)).GT.FIDMAX .OR. ABS(CUR(Y)).GT.FIDMAX
	   IF (.NOT.(BRIEF.OR.FIDERR))
     &	      CALL WRITEF('Fiducial error %F10.1,%F10.1',CUR(X),CUR(Y))
	   IF (FIDERR) CALL WRITEF('Fiducial error limit exceeded')
	   GO TO 90
	ENDIF
C
C abandoned.
80	CALL WRITEF('Abandoned')
	CHKFID=.TRUE.
C
90	CALL CSWT(CT(X),CT(Y))
100	CALL PARIO(4,LTYPE)
	RETURN
	END
