C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1982-08-06 15:54:50.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE JFINTP
C
***	MODULE	JFINTP
***	IDENT	06AU82
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	If NUMPTS too big, decrement and exit	AJW	06-Aug-1982
CMOD	CLODIS set up				 DM	15-Jul-1982
CMOD	Checks its results			AJW	14-Jul-1982
CMOD	Deals correctly with closed chains	 DM	12-Jul-1982
CMOD	T P C H A R changed to TPTCHN		AJW	08-Jul-1982
CMOD	Back translation test removed		 DM	10-Jun-1982
CMOD	"Skipping" criterion rehashed		 DM	02-Jun-1892
CMOD	Tidied					AJW	15-Sep-1981
CMOD	Author					RFT	   Aug-1981
C
C Routine to Find all the Transition Points for every chain.
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
C parameters:
***	PARAMETER/PARAMS/
C
C common blocks:
***	COMMON/JUNCOM/
***	COMMON/LINKS/
***	COMMON/RSE/
***	COMMON/LKPARM/
C
	INTEGER	  CHNCLO,CHN2CL	 ! 1st & 2nd closest chns to curr. node
	INTEGER	  CURCHN	 ! current closest other chain
	INTEGER	  ICHN		 ! current chain number
	INTEGER	  LSTCUR	 ! last node of current chain
	INTEGER	  LSTCHN	 ! last CURCHN
	INTEGER	  NUM,NUMLST	 ! current/preceding node or tpt number
	INTEGER	  PNTNUM	 ! node no. of closest pnt (from JCLOTW)
	LOGICAL*1 HADCLO	 ! finished with this (closed) chain ?
	REAL	  DSTCLO,DST2CL  ! dist**2 of CLO & 2CL from curr. node
C
C function:
	LOGICAL	  JCLOTW
C
C ......................................................................
C
C ... initialize.
	NUMTPS=0
C
C ... for each chain.
	DO 80 ICHN=1,MAXCHN
	   IF (CHAIN(ICHN).EQ.0) GO TO 80	! ignore null chains
C
	   LSTCUR=LAST(ICHN)		! two ends of chain
	   NUM=FIRST(ICHN)		! skip NUM from FIRST to LAST
	   HADCLO=.FALSE.		! (unless chain is closed)
	   LSTCHN=-2
	   CURCHN=-2
C
10	   IF (JCLOTW(FLOAT(ENCBUF(X,NODE(NUM))),
     &		      FLOAT(ENCBUF(Y,NODE(NUM))),
     &                ICHN,CHNCLO,CHN2CL,DSTCLO,
     &                DST2CL,PNTNUM)) GO TO 70
C
C ... PNTNUM is closest node to PX/Y & is on chain CHNCLO at dist DSTCLO
C ... CHN2CL is the second closest chain at distance DST2CL.
	   CLONOD(NUM)=PNTNUM	! array of closest node to each node
	   CLODIS(NUM)=DSTCLO
C
	   IF (CURCHN.EQ.-2) CURCHN=CHNCLO	! IF (starting)
	   IF (CURCHN.EQ.CHNCLO) GO TO 30	! IF (same closest chn)
C
C ... we have a transition.
	   NUMTPS=NUMTPS+1
	   IF (NUMTPS.LE.MAXTPT) GO TO 20
	   CALL WRITEF('MAXTPT too small')
	   NUMTPS=MAXTPT
	   CHNTPS(1,ICHN)=0
	   GO TO 85
C
C ... index to 1st transition point on this chain.
20	   IF (CHNTPS(1,ICHN).EQ.0) CHNTPS(1,ICHN)=NUMTPS
	   TRPTAR(1,NUMTPS)=NUM-1	! transition points
	   TRPTAR(2,NUMTPS)=NUM
	   IF (TMPCHK) CALL JDRAWM(NUM,3)
	   TPTCHN(1,NUMTPS)=CURCHN	! the 2 chains forming the trans
	   TPTCHN(2,NUMTPS)=CHNCLO
	   TPTCHN(3,NUMTPS)=ICHN	! and the chain we're on
	   LSTCHN=CURCHN
	   CURCHN=CHNCLO
C
C ... step NUM along ICHN (closed chains are special).
30	   IF (.NOT.CLOCHN(ICHN)) GO TO 40
	   IF (HADCLO) GO TO 70		! already "closed" this chain ?
	   IF (NUM.LT.LSTCUR) GO TO 50	! no - are we at LAST ?
	   NUM=FIRST(ICHN)		! yes - go to FIRST (again) ...
	   HADCLO=.TRUE.		! and record the fact
	   GO TO 10
C
40	   IF (NUM.GE.LSTCUR) GO TO 70	! finish if just done last point
50	   IF (CHN2CL.EQ.LSTCHN) GO TO 60
C
C ... skip along chain by number of nodes corresponding to half the
C ... distance SQRT(DST2CL-DSTCLO) (but don't go past last point).
C ... (not very sound mathematically, but speeds things up a bit!!).
	   NUM=MIN(LSTCUR,
     &		   NUM + MAX(1,INT(0.5*SQRT(DST2CL-DSTCLO)/CRUDIS)))
	   GO TO 10
C
C ... just past a transition point - go along in steps of 1 node until a
C ... *new* chain (i.e. not CURCHN or LSTCHN) makes itself known to us.
60	   NUM=NUM + 1
	   GO TO 10
C
C ... end of stepping along ICHN - finish with this chain.
70	   IF (CHNTPS(1,ICHN).NE.0) CHNTPS(2,ICHN)=NUMTPS
C
80	CONTINUE
85	CONTINUE
C
C ... now check that we don't have any duffness.
C ... see that if there is a pair of TPTs on a chain, their CLONODs
C ... are not crossed.
	DO 100 ICHN=1,MAXCHN
	   IF (CHNTPS(2,ICHN).LE.0) GO TO 100
	   NUM=CHNTPS(1,ICHN)
90	   NUMLST=NUM
	      IF (NUMLST.GE.CHNTPS(2,ICHN)) GO TO 100
	      NUM=NUM + 1
	      IF (TPTCHN(2,NUMLST).NE.TPTCHN(1,NUM)) GO TO 90
	      IF (CLONOD(TRPTAR(2,NUMLST)).GE.
     &            CLONOD(TRPTAR(1,NUM))) GO TO 90
	      IF (TMPCHK)
     &	      CALL WRITEF('JFINTP: Crossed CLONODs - CHN %N TPTs %N,%N',
     &				   ICHN,TRPTAR(1,NUMLST),TRPTAR(1,NUM))
	   GO TO 90
100	CONTINUE
C
	RETURN
	END
