C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-04-22 14:16:44.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE JCENTR
C
***	MODULE	JCENTR
***	IDENT	22AP86
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
C Author: D. Meader
C
CMOD	Less tolerant of highly curved arms	 DM	22-Apr-1986
CMOD	More tolerant of poor quality arms,
CMOD	uses INTEGER*4 throughout; optimised	 DM	21-Apr-1986
CMOD	Colour added				 DM	06-Sep-1985
CMOD	CRUDIS re-instated (!),
CMOD	generally fussier about vector quality	 DM	03-Nov-1982
CMOD	CRUDIS replaced by TRAKWD		 DM	01-Nov-1982
CMOD	Checks that sides of arm are parallel,
CMOD	attempts to blow a raspberry		 DM	07-Oct-1982
CMOD	Doesn't ring bell			AJW	07-Oct-1982
CMOD	LIMIT(19) used in place of WGHT(6)	 DM	06-Oct-1982
CMOD	Reports no. of juncs. if can't find one	 DM	17-Aug-1982
CMOD	Rings terminal bell if can't find pos.	 DM	13-Aug-1982
CMOD	BRAFST used instead of BRATPT,
CMOD	WGHT(6) used to judge line parallelism	 DM	29-Jun-1982
CMOD	Created 				 DM	11-Jun-1982
C
C Calculates the junction position.
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
	PARAMETER L=1,R=2
***	PARAMETER/PARAMS/
C
***	COMMON/JUNCOM/
***	COMMON/JUNCTN/
***	COMMON/LINKS/
***	COMMON/LKPARM/
***	COMMON/RSE/
C
	INTEGER*4 ARM,ARM2,I,JUN,SIDE	! loop variables, etc
	INTEGER*4 CHNLEN		! no. of points in chain
	INTEGER*4 NSTEP,INC(2)		! no. of pnts to step along arm
	INTEGER*4 NINTS			! no. of good int. points
	INTEGER*4 NPOOR			! no. of poor quality arms
	INTEGER*4 MAXCOR(2),MINCOR(2)	! max/min allowed junction pos
	INTEGER*4 TEMP			! temporary variable
	INTEGER*4 XINT,YINT		! an intersection point
	LOGICAL*1 GOOD(MAXBRA)		! good quality arm ?
	REAL	  COSTH(MAXBRA),SINTH(MAXBRA) ! cos,sin of vector dirn.
	REAL	  DELTA			! displacement of int. along vec
	REAL	  DIST			! distance between two points
	REAL	  JACCUM(2)		! accumulated intersection pnts
C
C ... mid-point of BRAFST(L,...)+INC(L) and BRAFST(R,...)+INC(R).
	REAL	  P1(2)
	REAL	  P2(2,MAXBRA)		! mid-pts of BRAFST(L),BRAFST(R)
	REAL	  PM(2)			! vector to mid-pnt of arm side
	REAL	  ST1MT2		! sin(theta1 - theta2)
C
C ... function:
	LOGICAL*4 PRLLEL		! are 2 lines approx. parallel ?
C
C ......................................................................
C
	DO 230 JUN=1,JNCNUM		! loop through junctions
	   JNCPOS(X,JUN)=0		! initialise the world
	   JNCPOS(Y,JUN)=0
	   JACCUM(X)=0.0
	   JACCUM(Y)=0.0
C
C ... for junctions with 4 arms or more, insist that all intersection
C ... points used to find the junction position (see later) lie inside a
C ... box defined by the max/min coords of the 1st point of each branch.
	   IF (JNCBRA(JUN).LE.3) GO TO 40
	   MAXCOR(X)=-32768
	   MAXCOR(Y)=-32768
	   MINCOR(X)=32767
	   MINCOR(Y)=32767
	   DO 30 ARM=1,JNCBRA(JUN)	! loop through arms
	      DO 20 SIDE=1,2		! left and right sides of arm
		 DO 10 I=1,2		! X and Y
		    TEMP=ENCBUF(I,NODE(BRAFST(SIDE,ARM,JUN)))
		    IF (TEMP.GT.MAXCOR(I)) MAXCOR(I)=TEMP
		    IF (TEMP.LT.MINCOR(I)) MINCOR(I)=TEMP
10		 CONTINUE
20	      CONTINUE
30	   CONTINUE
C
C ... start processing.
C ... go through all of the arms in turn, if possible fitting a vector
C ... to the mid-points (shown here as *) of the the lines:
C ... BRAFST(L,..)+INC(L)--*--BRAFST(R,..)+INC(R) and
C ... BRAFST(L,..)--*--BRAFST(R,..). 
C ... the increments correspond to approximately WGHT(5) line-widths (if
C ... possible, else we do the best we can).
40	   NPOOR=0
	   DO 100 ARM=1,JNCBRA(JUN)		! loop through arms
	      P2(X,ARM)=(FLOAT(ENCBUF(X,NODE(BRAFST(L,ARM,JUN)))) +
     &			 FLOAT(ENCBUF(X,NODE(BRAFST(R,ARM,JUN)))))/2.0
	      P2(Y,ARM)=(FLOAT(ENCBUF(Y,NODE(BRAFST(L,ARM,JUN)))) +
     &			 FLOAT(ENCBUF(Y,NODE(BRAFST(R,ARM,JUN)))))/2.0
	      NSTEP=INT((SQRT(
     &			 FLOAT(ENCBUF(X,NODE(BRAFST(L,ARM,JUN))) -
     &			       ENCBUF(X,NODE(BRAFST(R,ARM,JUN))))**2 +
     &			 FLOAT(ENCBUF(Y,NODE(BRAFST(L,ARM,JUN))) -
     &			       ENCBUF(Y,NODE(BRAFST(R,ARM,JUN))))**2)
     &			 /CRUDIS)*WGHT(5))
	      CHNLEN=BRALST(L,ARM,JUN) - BRAFST(L,ARM,JUN)
	      INC(L)=SIGN(MIN0(NSTEP,IABS(CHNLEN)),CHNLEN)
	      CHNLEN=BRALST(R,ARM,JUN) - BRAFST(R,ARM,JUN)
	      INC(R)=SIGN(MIN0(NSTEP,IABS(CHNLEN)),CHNLEN)
	      IF (.NOT.TMPCHK) GO TO 50		! draw arm ends if req.
	      CALL JDRAWM(BRAFST(L,ARM,JUN),1)
	      CALL JDRAWM(BRAFST(R,ARM,JUN),1)
	      CALL JDRAWM(BRAFST(L,ARM,JUN)+INC(L),2)
	      CALL JDRAWM(BRAFST(R,ARM,JUN)+INC(R),2)
50	      IF (INC(L).EQ.0.AND.INC(R).EQ.0) GO TO 80
	      IF (INC(L)*INC(R).GE.1) GO TO 80	! wrong polarity (!!)
C
C ... check that the sides of the arm are approximately parallel.
	      IF (.NOT.PRLLEL(BRAFST(L,ARM,JUN)+INC(L),
     &			      BRAFST(L,ARM,JUN),
     &			      BRAFST(R,ARM,JUN)+INC(R),
     &			      BRAFST(R,ARM,JUN))) GO TO 80
	      P1(X)=(FLOAT(ENCBUF(X,NODE(BRAFST(L,ARM,JUN)+INC(L))))+
     &		    FLOAT(ENCBUF(X,NODE(BRAFST(R,ARM,JUN)+INC(R)))))/2.0
	      P1(Y)=(FLOAT(ENCBUF(Y,NODE(BRAFST(L,ARM,JUN)+INC(L))))+
     &		    FLOAT(ENCBUF(Y,NODE(BRAFST(R,ARM,JUN)+INC(R)))))/2.0
	      CALL GETVEC(P1(X),P1(Y),P2(X,ARM),P2(Y,ARM),COSTH(ARM),
     &			  SINTH(ARM),DIST)
	      IF (DIST.LT.0.5*TRAKWD) GO TO 80	! too short for comfort?
C
C ... check arm curvature.
C ... drop perpendiculars from mid-point of each edge onto arm vector.
	      DO 60 I=1,2			! L and R
		 PM(X)=FLOAT(ENCBUF(X,NODE(BRAFST(I,ARM,JUN)+INC(I)/2)))
     &		       - P2(X,ARM)		! vector from P2
		 PM(Y)=FLOAT(ENCBUF(Y,NODE(BRAFST(I,ARM,JUN)+INC(I)/2)))
     &		       - P2(Y,ARM)
		 DELTA=PM(X)*COSTH(ARM) + PM(Y)*SINTH(ARM)
		 P1(I)=SQRT(PM(X)**2 + PM(Y)**2 - DELTA**2)
60	      CONTINUE
C
C ... P1 (used as workspace) now holds lengths of perpendiculars.
C ... check that these do not differ too greatly (indicates curvature).
	      IF (ABS(P1(1) - P1(2)).GE.0.5*TRAKWD) GO TO 70
	      GOOD(ARM)=.TRUE.			! found a good arm
	      GO TO 100
C
C ... poor quality arm - try to salvage something from it if we can.
70	      IF (TMPCHK) CALL WRITEF(
     &		 'JCENTR: Arm %^L%N of junction %N is too curved',
     &				ARM,		JUN)
	      GO TO 90
80	      IF (TMPCHK) CALL WRITEF(
     &		 'JCENTR: Arm %^L%N of junction %N is of poor quality',
     &				ARM,		JUN)
90	      NPOOR=NPOOR + 1
	      GOOD(ARM)=.FALSE.			! found a poor arm
100	   CONTINUE
C
C ... see how many good arms we've got.
	   IF (JNCBRA(JUN).GT.NPOOR) GO TO 110
	   IF (TMPCHK) CALL WRITEF('JCENTR: Unable to generate vectors')
	   GO TO 220
C
C ... intersect the arm vectors for consecutive pairs of arms, producing
C ... a series of approximate centres.
C ... special cases if the vectors are collinear or cusped - check for
C ... the former and hope the latter never happens !!
C ... if arm is of poor quality, drop perpendicular from P2 onto vector.
110	   NINTS=1
	   DO 200 I=1,JNCBRA(JUN)
	      ARM=I
	      ARM2=ARM + 1
	      IF (ARM2.GT.JNCBRA(JUN)) ARM2=1
	      IF (GOOD(ARM)) GO TO 120
	      IF (.NOT.GOOD(ARM2)) GO TO 200	! both arms poor ?
	      GO TO 130				! one poor quality arm
120	      IF (GOOD(ARM2)) GO TO 140		! both arms good ?
	      ARM=ARM2				! one poor quality arm
	      ARM2=I
C
C ... we have one good arm (ARM2) and one poor arm - drop perpendicular.
130	      P1(X)=P2(X,ARM) - P2(X,ARM2)	! use P1 as workspace
	      P1(Y)=P2(Y,ARM) - P2(Y,ARM2)
	      DELTA=P1(X)*COSTH(ARM2) + P1(Y)*SINTH(ARM2)
	      IF ((P1(X)**2 + P1(Y)**2 - DELTA**2).GE.
     &		  (0.5*TRAKWD)**2) GO TO 160	! perp dist too small ? 
	      IF (TMPCHK) CALL WRITEF(
     &		 'JCENTR: Unable to intersect arms %^L%N (poor) and %N',
     &						     ARM,	   ARM2)
	      GO TO 200
C
C ... we have two good arms to intersect.
140	      ST1MT2=SINTH(ARM2)*COSTH(ARM) - COSTH(ARM2)*SINTH(ARM)
	      IF (ABS(ST1MT2).GT.LIMIT(19)) GO TO 150	! collinear ?
	      IF (TMPCHK) CALL WRITEF(
     &		 'JCENTR: Arms %^L%N and %N collinear',ARM,ARM2)
	      GO TO 200				! yes - toss 'em out
150	      DELTA=((P2(X,ARM2) - P2(X,ARM))*SINTH(ARM) -
     &		     (P2(Y,ARM2) - P2(Y,ARM))*COSTH(ARM))/ST1MT2
C
C ... DELTA is the distance of the intersection point from P2, in
C ... the direction defined by (COSTH,SINTH)  (n.b. can be negative).
160	      XINT=INT(DELTA*COSTH(ARM2) + P2(X,ARM2))
	      YINT=INT(DELTA*SINTH(ARM2) + P2(Y,ARM2))
	      IF (JNCBRA(JUN).LE.3) GO TO 180
C
C ... check that this intersection point is sensible.
	      IF (XINT.GT.MAXCOR(X).OR.XINT.LT.MINCOR(X)) GO TO 170
	      IF (YINT.LE.MAXCOR(Y).AND.YINT.GE.MINCOR(Y)) GO TO 180
170	      IF (TMPCHK) CALL WRITEF(
     &		 'JCENTR: Intersection of arms %^L%N & %N outside range'
     &						,ARM, ARM2)
	      GO TO 200				! duff - toss it out
C
180	      IF (.NOT.TMPCHK) GO TO 190
	      CALL TXCOL(6)
	      CALL TXMTO(INT(P2(X,ARM)),INT(P2(Y,ARM)))
	      CALL TXLTO(XINT,YINT)
	      CALL TXMTO(INT(P2(X,ARM2)),INT(P2(Y,ARM2)))
	      CALL TXLTO(XINT,YINT)
	      CALL JDRAWP(FLOAT(XINT),FLOAT(YINT),3)
C
190	      JACCUM(X)=JACCUM(X) + FLOAT(XINT) 
	      JACCUM(Y)=JACCUM(Y) + FLOAT(YINT)
	      NINTS=NINTS + 1
200	   CONTINUE
C
	   NINTS=NINTS - 1
	   IF (NINTS.GT.0) GO TO 210	! got any valid intersect pnts ?
	   IF (TMPCHK) CALL WRITEF('JCENTR: No intersection points')
	   GO TO 220
C
C ... finally, calculate the 'centre of gravity' of the intersection
C ... points to give the 'best' estimate of the junction position.
210	   JNCPOS(X,JUN)=INT(JACCUM(X)/FLOAT(NINTS))
	   JNCPOS(Y,JUN)=INT(JACCUM(Y)/FLOAT(NINTS))
	   GO TO 230			! deal with next junction
C
220	   CALL EXPAND('Can''t locate junction')
	   IF (JNCNUM.GT.1)
     &	      CALL APPEND('%C %^L%N (of %^W%N)%C',7,JUN,JNCNUM,7)
	   CALL TTWLIN
	   JNCBRA(JUN)=0		! 'kill off' this junction
230	CONTINUE
C
	RETURN
	END
C
	LOGICAL*4 FUNCTION GETVEC(X1,Y1,X2,Y2,COSTH,SINTH,DIST)
C
***	MODULE	GETVEC
***	IDENT	03NO82
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
C Author: D. Meader
C
CMOD	DIST returned as argument		 DM	03-Nov-1982
C	Created 				 DM	11-Jun-1982
C
C Returns the components (cos,sin) of the unit vector defined by two
C points. Note that the vector may point from 1 to 2 or from 2 to 1
C (we don't care which at this stage).
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
	REAL	COSTH,SINTH	! cos/sin of resulting vector
	REAL	DIST		! distance between points
	REAL	X1,Y1,X2,Y2	! input coords of 2 pnts defining vector
	REAL	XSEP,YSEP	! components of distance between points
C
C ......................................................................
C
	GETVEC=.TRUE.				! assume failure
	XSEP=X2 - X1
	YSEP=Y2 - Y1
	DIST=SQRT(XSEP*XSEP + YSEP*YSEP)
	IF (DIST.LE.0.5) RETURN			! points superimposed
	COSTH=XSEP/DIST
	SINTH=YSEP/DIST
	GETVEC=.FALSE.				! success
C
	RETURN
	END
C
	LOGICAL*4 FUNCTION PRLLEL(P11,P12,P21,P22)
C
***	MODULE	PRLLEL
***	IDENT	21AP86
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
C Author: D. Meader
C
CMOD	Arguments Pxx are explicitly INTEGER*2	 DM	21-Apr-1986
CMOD	Seventh argument for GETVEC		 DM	03-Nov-1982
C	Created 				 DM	07-Oct-1982
C
C Returns .TRUE. if the lines defined by P11---P12 and P21---P22
C (in ENCBUF) are approximately parallel (as judged by LIMIT(19)).
C Used in JCENTR to help judge whether to reject an arm of a junction.
C
**	IF VAX
	IMPLICIT NONE
**	ENDC
C
***	PARAMETER/PARAMS/
C
***	COMMON/LINKS/
***	COMMON/LKPARM/
***	COMMON/RSE/
C
	INTEGER*2 P11,P12,P21,P22 ! points defining the two vectors
	REAL	  COSTH1,SINTH1	  ! cos/sin of direction of vector 1
	REAL	  COSTH2,SINTH2	  ! cos/sin of direction of vector 2
	REAL	  DIST		  ! distance between points (dummy)
C
	LOGICAL*4 GETVEC	  ! find unit vector thru 2 points
C
C ......................................................................
C
	PRLLEL=.TRUE.				! assume parallel
C
C ... if GETVEC is true, vector has zero length.
C ... give the vectors the benefit of the doubt !!
	IF (GETVEC(FLOAT(ENCBUF(X,NODE(P11))),
     &		   FLOAT(ENCBUF(Y,NODE(P11))),
     &		   FLOAT(ENCBUF(X,NODE(P12))),
     &		   FLOAT(ENCBUF(Y,NODE(P12))),
     &		   COSTH1,SINTH1,DIST)) GO TO 10
	IF (GETVEC(FLOAT(ENCBUF(X,NODE(P21))),
     &		   FLOAT(ENCBUF(Y,NODE(P21))),
     &		   FLOAT(ENCBUF(X,NODE(P22))),
     &		   FLOAT(ENCBUF(Y,NODE(P22))),
     &		   COSTH2,SINTH2,DIST)) GO TO 10
C
C ... work out the (sine of the) angle between the vectors.
	IF (ABS(SINTH1*COSTH2 - COSTH1*SINTH2).GE.LIMIT(19))
     &	   PRLLEL=.FALSE.
C
10	RETURN
	END
