C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1980-02-21 12:51:38.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION SETMAC(CWD)
C
C Copyright Laser-Scan Laboratories Ltd,Cambridge,England
C
C Author M.C.Fulford
C
C	Created 16.v.77
C	Last edited 2.vi.77
C	Rehashed completely for SCOTS version 23.v.78
C Original MACIO split into GETMAC & SETMAC to ensure
C that only the essential stuff is in the critical overlay path.
C	Split 18.i.79
C	Last edited 24/i/79
C
C Input and output of macro commands.
C
C Result:-
C	1 - get your next command as usual
C	2 - standard command error
C	3 - get a new line from terminal
C
***	COMMON/PARAMS/
C
	INTEGER CWD	! what to do:-
C	1  - define macro
C	2  - print macros
C	3  - code a macro
C	4  - initialise data structure
C
***	COMMON/MASTER/
***	COMMON/LNKC/
***	COMMON/LKPARM/
***	COMMON/SCOTS/
***	COMMON/TEXTC/
***	COMMON/NUMC/
C
	INTEGER RDCOMM,EXPAND
	LOGICAL RDINT
C
	INTEGER SHIFT, P, PTR
C
	GOTO (30,170,200,10),CWD
	CALL WRITEF('Call to SETMAC, argument of %N !',CWD)
	GOTO 270
C
C Initialise - can't be done in block data unfortunately
C
10	DO 20 I = 0,MACNUM+1
	  MACPTR(I) = I+1
	  MCNAME(I+1) = 0
20	  CONTINUE
	GOTO 280
C
C DEF n mmm <text>
C
C Define macro N (1 -> MACNUM) to have command name 'mmm'
C and to consist of <text>
C
30	IF (INTARG.LE.0 .OR. INTARG.GT.MACNUM)GOTO 260
	CODED(INTARG) = .FALSE.
	DCPTR = DCPTR-1
40	DCPTR = DCPTR+1
	IF (DCPTR.LE.TXTPTR .AND. TXTBUF(DCPTR).EQ.32) GOTO 40
	LNKCM(LNKMAC+INTARG*2-1) = MYR50(DCPTR)
C move all command above us up the buffer
	SHIFT = MAXMAC-MACPTR(MACNUM+1)
	DO 50 I = MACPTR(MACNUM+1),MACPTR(INTARG+1),-1
	  MCNAME(I+SHIFT) = MCNAME(I)
	  MCNUMB(I+SHIFT) = MCNUMB(I)
	  MCCODE(I+SHIFT) = MCCODE(I)
50	  CONTINUE
	DO 60 I = INTARG+1,MACNUM+1
	  MACPTR(I) = MACPTR(I)+SHIFT
60	  CONTINUE
C put new command in the space
	P = MACPTR(INTARG)
	NUMP = P-1		! where the last argument was put
C
70	MCNAME(P) = 0		! initialise slot
	MCNUMB(P) = 0
	MCCODE(P) = 0
C get commands from line
80	IF (DCPTR .GT. TXTPTR) GOTO 130	! done
	ICH = TXTBUF(DCPTR)
	IF (ICH .EQ. "40) GOTO 100	!  space
	IF (("60.LE.ICH .AND. ICH.LE."71) .OR.
     *      ICH.EQ."55) GOTO 110	! a number
	IF(ICH.EQ."56) GOTO 100		! skip dots
	MCNAME(P) = MYR50(DCPTR)	! read a name
	IF (MCNAME(P) .EQ. 0) GOTO 90	! did we get one ?
	P = P+1			! on to next slot
	IF (P .LT. MACPTR(INTARG+1)) GOTO 70
C run out of space
	P = P-1			! go back to last entry
	MCNAME(P) = 0		! change it to a stopper
	CALL WRITEF('No more space for definitions')
	GOTO 130
C unrecognised character
90	CALL WRITEF('Strange character "%C" in definition',
     *      TXTBUF(DCPTR))
C skip space or strange character
100	DCPTR = DCPTR+1
	GOTO 80
C a number
110	IF (P-1 .NE. NUMP) GOTO 120
	CALL WRITEF('Extra number in definition')
	GOTO 130
 
120	IF (RDINT(MCNUMB(P-1))) GOTO 80
	MCCODE(P-1) = "100000
	NUMP = P-1
	GOTO 80
C got our definiton - tidy up
130	SHIFT = MACPTR(INTARG+1)-P-1
	IF (SHIFT .LE. 0) GOTO 160
	DO 140 I = MACPTR(INTARG+1),MACPTR(MACNUM+1)
	  MCNAME(I-SHIFT) = MCNAME(I)
	  MCNUMB(I-SHIFT) = MCNUMB(I)
	  MCCODE(I-SHIFT) = MCCODE(I)
140	  CONTINUE
	DO 150 I = INTARG+1, MACNUM+1
	  MACPTR(I) = MACPTR(I)-SHIFT
150	  CONTINUE
160	GOTO 270
C
C Print the macros
C
170	N1 = 1
	N2 = MACNUM
	IF (NUMINT .NE. 1 .OR.
     *      INTARG .LE. 0 .OR. INTARG .GT. MACNUM) GOTO 180
	N1 = INTARG
	N2 = INTARG
180	DO 190 I=N1,N2
	  IF(MCNAME(MACPTR(I)).EQ.0) GOTO 190
	  N = "40		! ' '
	  IF (CODED(I)) N = "52	! '*'
	  M = 1+EXPAND('%I3 %C%5',I,N,LNKCM(LNKMAC+I*2-1))
	  CALL EXPMAC(I, NUM(M))
	  CALL LINOUT(NUM(1))
190	  CONTINUE
	GOTO 280
C
C Code a macro, i.e. look up its commands once for all
C
200	P = MACPTR(INTARG)
	CODED(INTARG) = .TRUE.
C
210	IF (MCNAME(P) .EQ. 0) GOTO 280	! done
	PTR = 0
	NCOM = 0		! look for command name
220	NCOM = NCOM + 1
	PTR = PTR+1
	N = LNKCM(PTR).AND."377
	IF (N .LE. 0) GOTO 240
	DO 230 J = 1,N
	  PTR = PTR+1
	  IF (LNKCM(PTR) .EQ. MCNAME(P)) GOTO 250
230	  CONTINUE
	GOTO 220
C name not found
240	CALL WRITEF('"%5" ?',MCNAME(P))
	CODED(INTARG) = .FALSE.
	GOTO 270
C got a match
250	MCCODE(P) = (MCCODE(P).AND."100000).OR.NCOM
	P = P+1
	GOTO 210
C
C Exits
C
260	SETMAC = 2
	RETURN
C
270	SETMAC = 3
	RETURN
C
280	SETMAC = 1
	RETURN
	END
