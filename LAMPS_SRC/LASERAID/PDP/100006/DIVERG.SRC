C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1980-03-26 12:40:04.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION DIVERG(CHAIN1,CHAIN2,FOR1,FSTOFF,LSTOFF,
     &                          MAXRAT,MAXWD2,MAXLEN,POINT)
C
C Copyright Laser-Scan Laboratories Limited,Cambridge,England.
C
C Author Alan J. Wylie.
C
C	Created 08.01.80
C
C	Last edited 26/03/80
C
C Goes along CHAIN1 in direction FOR1 between FSTOFF and LSTOFF
C checking the distance between each point and CHAIN2,returning with
C the index in NODE of the point where the ratio of the squares,
C (P2(n)+P2(n-1))/(P2(n-2)+P2(n-3))
C is greater than MAXRAT or the ratio > 1 (diverging)
C and the square of the width > MAXWD2
C or it has jumped more than MAXLEN points along CHAIN2
C Result is     -1   Silly input
C                0   Nothing found
C               +1   Divergence found by ratio test
C               +2   Divergence found by width test
C		+3   Divergence found by jump test
C
***	COMMON/PARAMS/
***	COMMON/RSE/
***	COMMON/LINKS/
C
C
C arguments:
	INTEGER CHAIN1,CHAIN2,FSTOFF,LSTOFF,POINT,MAXLEN
	LOGICAL*1 FOR1
	REAL MAXWD2
	REAL MAXRAT
C functions:
	LOGICAL TSTATT
C local w/s:
	INTEGER F1,L1,STEP,START,FINISH,NS,NI
	REAL RNOW2,R1AGO2,R2AGO2,R3AGO2,RAT
	INTEGER PNT2,PNT2O
C code:
	DIVERG=-1		! guilty until proven innocent
	POINT=0
	F1=FIRST(CHAIN1)
	L1=LAST(CHAIN1)
	IF (FOR1) GOTO 10			! forwards or backwards
C backwards along CHAIN1
	   STEP=-1
	   START=L1-3-FSTOFF
	   FINISH=F1+LSTOFF
	   IF (START-FINISH.LT.1) GOTO 999	! remnants too short
	   GOTO 20
C forwards
10	CONTINUE
	   STEP=1
	   START=F1+3+FSTOFF
	   FINISH=L1-LSTOFF
	   IF (FINISH-START.LT.1) GOTO 999	! too short
20	CONTINUE
C get first three widths
	NS=NODE(START-3*STEP)
	CALL TSTATT(ENCBUF(X,NS),ENCBUF(Y,NS),CHAIN2,99999999.0,
     &              0,0,I,B,R3AGO2)
	NS=NODE(START-2*STEP)
	CALL TSTATT(ENCBUF(X,NS),ENCBUF(Y,NS),CHAIN2,99999999.0,
     &              0,0,I,B,R2AGO2)
	NS=NODE(START-STEP)
	CALL TSTATT(ENCBUF(X,NS),ENCBUF(Y,NS),CHAIN2,99999999.0,
     &              0,0,PNT2O,B,R1AGO2)
C now go along CHAIN1 until it diverges
	DO 100 I=START,FINISH,STEP
	   POINT=I
	   NI=NODE(I)
	   CALL TSTATT(ENCBUF(X,NI),ENCBUF(Y,NI),CHAIN2,99999999.0,
     &                 0,0,PNT2,B,RNOW2)
C The 1.0 is to avoid floating point errors
	   RAT=(RNOW2+R1AGO2)/(1.0+R2AGO2+R3AGO2)
	   IF (RAT.GT.MAXRAT) GOTO 998
	   IF (RAT.GT.1.0.AND.RNOW2.GT.MAXWD2) GOTO 997
	   IF (ABS(PNT2-PNT2O).GT.MAXLEN) GOTO 996
	   R3AGO2=R2AG02
	   R2AGO2=R1AGO2
	   R1AGO2=RNOW2
	   PNT2O=PNT2
100	CONTINUE
C nothing found
	DIVERG=0
	GOTO 999
996	DIVERG=3				! jump test
	GOTO 999
997	DIVERG=2				! width test
	GOTO 999
998	DIVERG=1				! ratio test
999	RETURN
	END
