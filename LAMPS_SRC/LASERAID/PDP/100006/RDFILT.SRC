C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1980-02-21 11:47:26.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION RDFILT(DSTBUF,DSTLEN,DEFTIT,NUMFIL,ALLVER)
C
C Copyright Laser-Scan Laboratories Ltd,Cambridge,England
C
C Author M.C.Fulford
C
C	Created 22.v.79
C	Last edited 24/v/79
C
C	To read a generalised file title, applying
C	defaults where necessary.
C	A special feature is the treatment of a numerical file
C	name, which is turned into a 3-digit file type.
C
C	Thus:	ABCDE	->	ABCDE.<default>
C		12	->	<default>.012
C
C	A full DSD is accepted as the default string, version
C	numbers are optionally allowed in the input string.
C
C parameters:
***	COMMON/PARAMS/
C arguments:
	BYTE DSTBUF(1)		! destination string
	INTEGER DSTLEN		! max destination length
	BYTE DEFTIT(1)		! default filename
	LOGICAL*1 NUMFIL	! allow numerical filenames
	LOGICAL*1 ALLVER	! allow version numbers
C common blocks:
***	COMMON/TEXTC/		! input string
***	COMMON/NUMC/		! for expanded numbers
C workspace:
	LOGICAL*1 GOTDEF,GOTACT		! got elements of DSDs
	INTEGER DEFPOS,DEF1ST,DEFLEN,DEFTYP,DEFVAL
	INTEGER        ACT1ST,ACTLEN,ACTTYP,ACTVAL
	LOGICAL*1 ACTNUM	! it's a numerical name
	INTEGER DSTPOS,DSTTYP	! destination state
	INTEGER ERRPTR		! for error messages
	INTEGER ZIP		! for coercion
C functions:
	INTEGER EXPAND
C
	DATA ZIP/0/
C
C code:
	GOTDEF = .FALSE.	! initialise everything
	GOTACT = .FALSE.
	DSTPOS = 1
	DSTTYP = 0
	DEFPOS = 1
	RDFILT = .TRUE.		! assume failure
C skip leading spaces
10	IF (TXTBUF(DCPTR) .NE. "40) GOTO 30
	DCPTR = DCPTR+1
	GOTO 10
C record start of line
30	ERRPTR = DCPTR
C analyse next element from each string
50	IF (GOTDEF) GOTO 60
	CALL GETITM(DEFTIT,DEFPOS,.TRUE.,DEF1ST,DEFLEN,DEFTYP,DEFVAL)
	IF (DEFTYP .LE. 0) GOTO 505
	GOTDEF = .TRUE.
60	IF (GOTACT) GOTO 70
	CALL GETITM(TXTBUF, DCPTR,ALLVER,ACT1ST,ACTLEN,ACTTYP,ACTVAL)
	IF (ACTTYP .LE. 0) GOTO 510
	GOTACT = .TRUE.
C cope with numerical filename (becomes file type)
	ACTNUM = (ACTTYP.EQ.3).AND.(ACTVAL.GE.0).AND.(NUMFIL)
	IF (ACTNUM) ACTTYP = 4
C check for syntax errors
70	IF (DEFTYP .LE. DSTTYP) GOTO 505
	IF (ACTTYP .LE. DSTTYP) GOTO 510
C add element to title
	IF (DEFTYP-ACTTYP) 100,120,140
C use default 
100	IF (DEFLEN.LE.0) GOTO 110
	DO 105 I = 1,DEFLEN
	  DSTBUF(DSTPOS) = DEFTIT(DEF1ST)
	  DEF1ST = DEF1ST+1
	  DSTPOS = DSTPOS+1
	  IF (DSTPOS .GE. DSTLEN) GOTO 515
105	  CONTINUE
110	GOTDEF = .FALSE.
	DSTTYP = DEFTYP
	GOTO 150
C use actual element, overwiting default
120	GOTDEF = .FALSE.
C issue actual item, leaving default
140	IF (.NOT.ACTNUM) GOTO 143
	ACTLEN = EXPAND('%P0.%I3',ACTVAL)
	ACT1ST = 1
143	IF (ACTLEN.LE.0) GOTO 147
	DO 145 I = 1,ACTLEN
	  DSTBUF(DSTPOS) = TXTBUF(ACT1ST)
	  IF (ACTNUM) DSTBUF(DSTPOS) = NUM(ACT1ST)
	  ACT1ST = ACT1ST+1
	  DSTPOS = DSTPOS+1
	  IF (DSTPOS .GE. DSTLEN) GOTO 515
145	  CONTINUE
147	GOTACT = .FALSE.
	DSTTYP = ACTTYP
C check for end
150	IF (DSTTYP .LT. 6) GOTO 50
C tidy up
	DSTBUF(DSTPOS) = 0
	RDFILT = .FALSE.
	GOTO 900
C
C errors:
505	CALL MSGF('Strange ''%C'' in default string "%S30"',
     *             ZIP+DEFTIT(DEFPOS),DEFTIT)
	GOTO 900
C
510	CALL MSGF('Unexpected ''%C'' in "%S30"',
     *                 ZIP+TXTBUF(DCPTR),TXTBUF(ERRPTR))
	GOTO 900
C
515	CALL MSGF('File name too long')
C
C return
900	RETURN
	END
