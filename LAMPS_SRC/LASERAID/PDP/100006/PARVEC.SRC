C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1980-02-21 12:43:24.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION PARVEC(P1,P2,P3,P4,TSTDIS,TSTCOS)
C
C Copyright Laser-Scan Laboratories Limited,Cambridge,England.
C
C Author Alan J. Wylie.
C
C	Created 07.01.80
C
C	Last edited 05/02/80
C
C Delivers 0 if cos of angle between P1P2 and P3P4 > TSTCOS,
C            or min of squares of P1P3,P1P4,P2P3,P2P4 > TSTDIS
C Delivers 1 if min of squares < TSTDIS and mod(cosine) < TSTCOS and cos > 0
C Delivers 2 "   "   "    "    <    "    "    "    "    <    "    "  cos < 0
C
	PARAMETER X=1,Y=2
C
C Arguments:
	INTEGER P1(2),P2(2),P3(2),P4(2)		! four points
	INTEGER TSTDIS				! square of max distance
	REAL TSTCOS				! cos of max angle allowed
C Functions:
	REAL HYPSQ
	REAL VECCOS
C Local w/s:
	INTEGER V12(2),V34(2)			! vectors P1-P2 and P3-P4
	REAL COS				! cosine of angle P1P2 P3P4
	REAL MINDSQ				! square of min of distances
C
C Code:
C
	PARVEC=0				! guilty until proven innocent
C
	DO 10 K=1,2				! set up vectors
	   V12(K)=P1(K)-P2(K)
	   V34(K)=P3(K)-P4(K)
10	CONTINUE
C
	COS=VECCOS(V12,V34)
C
	IF (ABS(COS).LT.TSTCOS) GOTO 90		! is angle too great
C
C Now check distance
C
	MINDSQ=MIN(HYPSQ(P1,P3),HYPSQ(P1,P4),HYPSQ(P2,P3),HYPSQ(P2,P4))
C
	IF (MINDSQ.GT.FLOAT(TSTDIS)**2) GOTO 90
	PARVEC=1
	IF (COS.LT.0) PARVEC=2
C
90	RETURN
	END
	REAL FUNCTION HYPSQ(I,J)
	PARAMETER X=1,Y=2
	INTEGER I(2),J(2)
	HYPSQ=(FLOAT(I(X))-FLOAT(J(X)))**2+(FLOAT(I(Y))-FLOAT(J(Y)))**2
	END
