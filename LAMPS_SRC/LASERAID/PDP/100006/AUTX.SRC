	SUBROUTINE AUTX(RC,ID,IU,IV,IXPOS)
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C
C Author Paul Hardy
C
C	Last edited 9/viii/79
C
C Automatic digitisation of X type points routine.
C
***	COMMON/PARAMS/
C
***	COMMON/RSE/
***	COMMON/SCCORR/
***	COMMON/SCPARM/
***	COMMON/LKPARM/
***	COMMON/LINKS/
C
	INTEGER RC		! return code
	INTEGER ID(2)		! scan vector used
	INTEGER IU,IV		! directions
	INTEGER IXPOS(2)	! position in scan
C
C w/s
	LOGICAL*1 GOTLIN(2)
	INTEGER LAS,FIR
	INTEGER ISLOPE(MAXCHN)  ! 0,1,2 = random,perp,parallel
	REAL C(2),DX(2),DY(2),COSTH(2),SINTH(2),D(2),S(2),XX(2)
C
	GOTLIN(1) = .FALSE.
	GOTLIN(2) = .FALSE.
	RC = 0  !  assume success
	CALL CSRD(C(X),C(Y))
	DO 140 L = 1,2
	  IU = L
	  IV = 3-IU
	  IDIR = 2-IU
	  WID = IWID*CR(IV)*WAR
	  ID(IV) = 0
	  ID(IU) = WID
	  CALL DISMOD(0)
	  S(IU) = C(IU)-WID/2.
	  S(IV) = C(IV)
	  CALL MOVETO(S(X),S(Y))
C now set up and do scan
	  CALL SCANBY(ID(X),ID(Y),1)
	  NEGOT = 0
	  CALL SCSET(0)
C chain and grow
	  CALL SETCHN
	  CALL GROW(CHWT,RGROW,IU,IV,EDGING)
C convert to lists
	  CALL CHNLST
C find average width to remove centre thick line
	  NPTS = 0
	  AVEWID = 0.0
	  DO 20 I = 1,MAXCHN
	    J = CHAIN(I)
	    IF (J.EQ.0) GOTO 20
10	    AVEWID = AVEWID+(NEBUF(1,J).AND."37777)
	    NPTS = NPTS+1
	    J = NXT(J)
	    IF (J.NE.0) GOTO 10
20	    CONTINUE
	  IF (NPTS.EQ.0) GOTO 170  ! nothing seen
	  AVEWID = AVEWID/FLOAT(NPTS)*1.4
	  DO 40 I = 1,MAXCHN
	    J = CHAIN(I)
	    IF (J.EQ.0) GOTO 40
30	    IF ((NEBUF(1,J).AND."37777).GT.AVEWID*LIMIT(15))
     *                CHAIN(I) = 0
	    J = NXT(J)
	    IF (J.NE.0) GOTO 30
40	    CONTINUE
C find longest chain
	  J = 0
	  LENMAX = 2
	  DO 50 I = 1,MAXCHN
	    IF (CHAIN(I).EQ.0) GOTO 50
	    IF (LENGTH(I).LE.LENMAX) GOTO 50
	    LENMAX = LENGTH(I)
	    J = I
50	    CONTINUE
	  IF (J.EQ.0) GOTO 140  ! no chains 
C calculate its vector etc
	  LAS = NODE(LAST(J))
	  FIR = NODE(FIRST(J))
	  DX(1) = NEBUF(X+1,LAS)-NEBUF(X+1,FIR)
	  DY(1) = NEBUF(Y+1,LAS)-NEBUF(Y+1,FIR)
	  R = DY(1)*DY(1)+DX(1)*DX(1)
	  T = NEBUF(X+1,LAS)*NEBUF(Y+1,FIR)-
     *        NEBUF(X+1,FIR)*NEBUF(Y+1,LAS)
C now search all chains for parallel and perpendicular
	  J = 0
	  LENMAX = 2
	  DO 70 I = 1,MAXCHN
	    ISLOPE(I) = 0
	    IF (LENGTH(I).LT.3) CHAIN(I) = 0
	    IF (CHAIN(I).EQ.0) GOTO 70
	    DX(2) = NEBUF(X+1,NODE(LAST(I)))-NEBUF(X+1,NODE(FIRST(I)))
	    DY(2) = NEBUF(Y+1,NODE(LAST(I)))-NEBUF(Y+1,NODE(FIRST(I)))
	    DOT12 = DX(1)*DX(2)+DY(1)*DY(2)
	    A12 = (DX(1)*DX(1)+DY(1)*DY(1))*(DX(2)*DX(2)+DY(2)*DY(2))
	    COS2TH = DOT12*DOT12/A12
C COS2TH goes from 0 when perp to 1 when parallel
	    IF (COS2TH.LT.0.5) ISLOPE(I) = 1
	    IF (COS2TH.GT.1.0-LIMIT(4)) ISLOPE(I) = 2
	    IF (ISLOPE(I).EQ.0) CHAIN(I) = 0
C check parallel chains for perpendicular distance
	    IF (ISLOPE(I).NE.2) GOTO 60
	    PERP = DY(1)*NEBUF(X+1,NODE(FIRST(I)))-
     *         DX(1)*NEBUF(Y+1,NODE(FIRST(I)))+T
	    PERP = PERP*PERP/R  ! is square of perpendicular distance
	    IF (PERP.LE.LIMIT(9)) GOTO 70
	    ISLOPE(I) = 0
	    CHAIN(I) = 0
C find longest chain in 'perp' direction
60	    IF (ISLOPE(I).NE.1) GOTO 70
	    IF (LENGTH(I).LE.LENMAX) GOTO 70
	    J = I
	    LENMAX = LENGTH(I)
	    DXP = DX(2)
	    DYP = DY(2)
70	    CONTINUE
	  IF (J.EQ.0) GOTO 100   ! no perp lines
C check for parallel to the 'perp' line
	  DX(1) = DXP
	  DY(1) = DYP
	  R = DY(1)*DY(1)+DX(1)*DX(1)
	  LAS = NODE(LAST(J))
	  FIR = NODE(FIRST(J))
	  T = NEBUF(X+1,LAS)*NEBUF(Y+1,FIR)-
     *   NEBUF(X+1,FIR)*NEBUF(Y+1,LAS)
	  DO 90 I = 1,MAXCHN
	    IF (ISLOPE(I).NE.1) GOTO 90
	    DX(2) = NEBUF(X+1,NODE(LAST(I)))-NEBUF(X+1,NODE(FIRST(I)))
	    DY(2) = NEBUF(Y+1,NODE(LAST(I)))-NEBUF(Y+1,NODE(FIRST(I)))
	    DOT12 = DX(1)*DX(2)+DY(1)*DY(2)
	    A12 = (DX(1)*DX(1)+DY(1)*DY(1))*(DX(2)*DX(2)+DY(2)*DY(2))
	    COS2TH = DOT12*DOT12/A12
	    IF (COS2TH.GT.1.0-LIMIT(4)) GOTO 80
	    ISLOPE(I) = 0
	    CHAIN(I) = 0
	    GOTO 90
C check for perpendicular distance
80	    PERP = DY(1)*NEBUF(X+1,NODE(FIRST(I)))-
     *         DX(1)*NEBUF(Y+1,NODE(FIRST(I)))+T
	    PERP = PERP*PERP/R
	    IF (PERP.LE.LIMIT(9)) GOTO 90
	    ISLOPE(I) = 0
	    CHAIN(I) = 0
90	    CONTINUE
C now fit two lines if possible
100	  IAXIS = 0
	  DO 130 K = IU,IV,IV-IU
	    IAXIS = IAXIS+1
	    IF (GOTLIN(K)) GOTO 130
	    SX = 0.
	    SY = 0.
	    SXX = 0.
	    SXY = 0.
	    SYY = 0.
	    S1  = 0
	    NCHN = 0
	    DO 120 I = 1,MAXCHN
	      IF (ISLOPE(I).NE.IAXIS) GOTO 120
	      NCHN = NCHN+1
	      J = CHAIN(I)
110	      RX = NEBUF(X+1,J)+S(X)
	      RY = NEBUF(Y+1,J)+S(Y)
	      S1 = S1+1
	      J = NXT(J)
	      SX = SX+RX
	      SY = SY+RY
	      SXX = SXX+RX*RX
	      SXY = SXY+RX*RY
	      SYY = SYY+RY*RY
	      IF (J.GT.0) GOTO 110
120	      CONTINUE
	    IF (NCHN.LT.2) GOTO 130  ! less than 2 chains
	    GOTLIN(K) = .TRUE.
C
	    SXXP = SXX - SX*SX/S1 
	    SXYP = SXY - SX*SY/S1
	    SYYP = SYY - SY*SY/S1
C
	    COS2PH = SXYP*2
	    SIN2PH = SXXP-SYYP
	    R = SQRT(COS2PH*COS2PH+SIN2PH*SIN2PH)
	    COS2PH = COS2PH/R
	    SIN2PH = SIN2PH/R
	    COSALF = -.7071
	    SINALF = .7071
	    SINPHI = 1-COS2PH
	    COSPHI = SIN2PH
	    R = SQRT(SINPHI*SINPHI+COSPHI*COSPHI)
	    SINPHI = SINPHI/R
	    COSPHI = COSPHI/R
	    COSTH(K) = COSALF*COSPHI + SINALF*SINPHI
	    SINTH(K) = SINALF*COSPHI - COSALF*SINPHI
	    D(K) = COSTH(K)*SX/S1 + SINTH(K)*SY/S1
130	    CONTINUE
	  IF (GOTLIN(1).AND.GOTLIN(2)) GOTO 150
140	  CONTINUE
	IF (GOTLIN(1).OR.GOTLIN(2)) GOTO 180  ! missing axis
	GOTO 170  ! nothing seen
C now solve for intersection of these lines
150	A12 = COSTH(1)*SINTH(2)-COSTH(2)*SINTH(1)
	IF (ABS(A12).LT.0.5) GOTO 190  ! not right angled
	XX(X) = (D(1)*SINTH(2)-D(2)*SINTH(1))/A12
	XX(Y) = (D(2)*COSTH(1)-D(1)*COSTH(2))/A12
C return answer as cursor position
	R = (C(X)-XX(X))**2+(C(Y)-XX(Y))**2
	IF (R.GT.WID*WID) GOTO 200  ! centre outside scaned area
	CALL CSWT(XX(X),XX(Y))
C and as offset in scan
160	IXPOS(X) = XX(X)-S(X)
	IXPOS(Y) = XX(Y)-S(Y)
	RETURN
C error returns
C longest line too short or nothing seen
170	RC = -1
	GOTO 210
C missing axis
180	RC = -2
	GOTO 210
C lines nowhere near perpendicular
190	RC = -(ABS(A12)*10.+10.)
	GOTO 210
C confused
200	RC = -3
	GOTO 210
C general error
210	XX(IU) = S(X)
	XX(Y) = S(Y)
	GOTO 160
C
	END
