C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1980-02-21 12:19:42.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C
C Routines for FORK chain growing.
C
C
C Copyright Laser-Scan Laboratories Ltd,Cambridge,England
C
C Author M.C.Fulford
C
C	Created 19.vii.77
C	Last edited 25/i/79
C
C
	SUBROUTINE REMCHN(N)
C
C Remove chain N from active list, do nothing
C if it isn't active.
C
***	COMMON/PARAMS/
C
	INTEGER N
C
***	COMMON/FORKS/
C
	L = 0
10	K = NXTCHN(L)
	IF (K .LE. 0) GOTO 90
	IF (K .EQ. N) GOTO 70
	L = K
	GOTO 10
C
70	NXTCHN(L) = NXTCHN(K)
	NXTCHN(K) = 0
C
90	RETURN
	END
C
	INTEGER FUNCTION ADDCHN(IV,FSTPNT)
C
C Start up a new chain, using point FSTPNT from NEBUF, adding
C it into its proper place in the active list.
C The new chain number is returned, 0 if no room for it
C
***	COMMON/PARAMS/
C
	INTEGER IV	! scan direction
	INTEGER FSTPNT	! the first point
C
***	COMMON/RSE/
***	COMMON/LINKS/
***	COMMON/FORKS/
C
C Find a free chain
	DO 10 I=1,MAXCHN
	  ADDCHN = I
	  IF (CHAIN(I) .EQ. 0) GOTO 30
10	  CONTINUE
C no room for it
	ADDCHN = 0
	GOTO 90
C find chains's position
30	NV = NEBUF(IV+1,FSTPNT)
	L = 0
35	K = NXTCHN(L)
	IF (K .LE. 0) GOTO 40
	IF (NEBUF(IV+1,CHAIN(K)) .GT. NV) GOTO 40
	L = K
	GOTO 35
C found our place
40	NXTCHN(L) = ADDCHN
	NXTCHN(ADDCHN) = K
	CHAIN(ADDCHN) = FSTPNT	! start the chain
	LENGTH(ADDCHN) = 1
	NXT(FSTPNT) = 0
	ENDFRK(1, ADDCHN) = 0
	ENDFRK(2, ADDCHN) = 0
C
90	RETURN
	END
C
	INTEGER FUNCTION ADDFRK(TYP,STEM,B1,B2)
C
C Add a new fork to the list of them.
C
***	COMMON/PARAMS/
C
	INTEGER TYP		! type of fork
	INTEGER STEM,B1,B2	!  the 3 constituent chains
C the signs of these indicate how they are attached to
C the fork: <0 => by FIRST end, >0 => BY last END
C
	INTEGER BRANCH		! branch being considered
	INTEGER WHTWAY		! direction of attachment
C
***	COMMON/FORKS/
C
	DO 10 I=1,MAXFRK
	  ADDFRK = I
	  IF (FRKTYP(I) .EQ. 0) GOTO 20
10	  CONTINUE
C no room
	ADDFRK = 0
	GOTO 90
C fill in various pointers
20	FRKTYP(ADDFRK) = TYP
	DO 30 I = 1,3
	  BRANCH = STEM
	  IF (I .EQ. 2) BRANCH = B1
	  IF (I .EQ. 3) BRANCH = B2
	  WHTWAY = 2
	  IF (BRANCH .GT. 0) GOTO 25
	  BRANCH = -BRANCH
	  WHTWAY = 1
25	  FORK(I,ADDFRK) = BRANCH
	  IF (BRANCH .NE. 0) ENDFRK(WHTWAY,BRANCH) = ADDFRK
30	  CONTINUE
90	RETURN
	END
