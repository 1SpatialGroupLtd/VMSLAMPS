	INTEGER FUNCTION TOMP(NEAR,NMPIFF,OUTPUT)
C
C Copyright Laser-Scan Laboratories Ltd,Cambridge,England
C
C Author M.C.Fulford
C
C	Created 18.iv.77
C	Last edited 3/v/79
C	Election edition
C
C Output NCHN to MP
C attaching by (NEND=1->FIRST,NEND=2->LAST) end.
C Result is:-
C	<0 - feature closed
C	=0 - nothing special noticed
C	>0 - feature too big for IFF reprocessor
C
***	COMMON/PARAMS/
***	COMMON/RSE/
***	COMMON/LINKS/
***	COMMON/DIGC/
***	COMMON/LKPARM/
***	COMMON/MPEP/
***	COMMON/BLG/
***	COMMON/LKFOLL/
C
	REAL DX(3),DY(3),CHNWID,P(2),RR(3),HH,RR2COS,DU,DV
	INTEGER NCHN,NEND,NTYPE,LSTPNT(2),NXTPNT(2),VEXPNT(2),NLST
	INTEGER THISPT(2),THATPT(2),IW
	LOGICAL*1 OUTPUT  ! points to be output to IFF
	LOGICAL*1 NEAR,GOTLIN,POSCOR,SECEDJ
	LOGICAL NOTVEX  ! function called
	INTEGER NMPIFF,MPNEXT
C
	INTEGER NN(2),WAY
	INTEGER DW(2),IDW
C
C statement function
	DOT(I,J)=DX(I)*DX(J)+DY(I)*DY(J)
C
	TOMP = 0
	NCHN=CONNCT(2,CHNSEL)
	NEND=CONNCT(3,CHNSEL)
	NTYPE=CONNCT(4,CHNSEL)
	GOTLIN=(NTYPE.EQ.0)
**	IF	ELF
	DW(IV) = 0
**	IFF
	DW(IV)=CONNCT(1,CHNSEL)
**	ENDC
	DW(IU)=0
	POSCOR=(DW(IV).GT.0)
	SECEDJ=.FALSE.  ! first edge of apexes
	IF (CHAIN(NCHN).EQ.0) GOTO 190
	CHAIN(NCHN) = 0
	LENGTH(NCHN) = 0
C	IF(VEXING.AND.NTYPE.EQ.1) GOTO 80  ! notapp edge vexing
	NN( NEND ) = FIRST(NCHN)
	NN(3-NEND) = LAST(NCHN)
	WAY = 3-NEND-NEND
	IEND = NEBUF(IU+1,NODE(NN(2)))
	IWT = TRKWID*WGHT(2)
	CHNWID = 0.
	NTRK = 0
C check for possible vertex point
	IF(.NOT.VEXING .OR. NTYPE.GT.2.OR.NTYPE.EQ.1) GOTO 10
	CALL GTLST2(START,1.0E4,1.0,NLST,LSTPNT,NXTPNT,MPNEXT)
	IF(NLST.NE.4) GOTO 10  ! nothing to compare against
	THISPT(X)=NEBUF(X+1,NODE(NN(1)))+DW(X)
	THISPT(Y)=NEBUF(Y+1,NODE(NN(1)))+DW(Y)
	NTHAT=NODE(NN(1)+WAY)
	THATPT(X)=NEBUF(X+1,NTHAT)+DW(X)
	THATPT(Y)=NEBUF(Y+1,NTHAT)+DW(Y)
	IF(NOTVEX(NXTPNT,LSTPNT,VEXPNT,THISPT,THATPT)) GOTO 10
	P(X)=VEXPNT(X)+START(X)
	P(Y)=VEXPNT(Y)+START(Y)
	CALL BUNCH(P(X),P(Y))  ! bunch the vertex point
C loop for points in chain
10	DO 160 J=NN(1),NN(2),WAY
	  I = NODE(J)
	  IF(J.EQ.NN(1)) GOTO 30  ! first point
20	  IDU=NEBUF(IU+1,I)-NEBUF(IU+1,NODE(J-WAY))
	  IDV=NEBUF(IV+1,I)-NEBUF(IV+1,NODE(J-WAY))
	  GOTO 40
30	  IF(J.EQ.NN(2)) GOTO 20  ! single point chain
	  IDU=NEBUF(IU+1,NODE(J+WAY))-NEBUF(IU+1,I)
	  IDV=NEBUF(IV+1,NODE(J+WAY))-NEBUF(IV+1,I)
40	  IW=NEBUF(1,I).AND."37777
	  IF(IDU.EQ.0.OR.TMPCHK) CALL WRITEF('J%N,%N>%N,%N,U%N,C%N',
     *       J,NN(1),NN(2),WAY,IDU,NTYPE)
	  DU=IABS(IDU)
	  DV=IABS(IDV)
	  HYPOT=SQRT(DU*DU+DV*DV)
	  UNTWID=TRKWID*HYPOT/DU
	  IF(NTYPE.NE.2) GOTO 50
C here with wide line
	  IDW=(FLOAT(IW)-UNTWID)/2.
	  IF(IDW.LT.0) IDW=0
	  DW(IV)=IDW
	  IF(CONNCT(1,CHNSEL).LT.0) DW(IV)=-DW(IV)
	  GOTO 80
50	  IF (NTYPE .NE. 3) GOTO 60 
C here with an apex
	  IDW=IW/2-IABS(CONNCT(1,CHNSEL))
	  IF(IDW.LE.0) GOTO 70
	  DW(IV)=IDW
	  IF(CONNCT(1,CHNSEL).LT.0) DW(IV)=-DW(IV)
	  IF(SECEDJ) DW(IV)=-DW(IV)
60	  IF(NTYPE.NE.1) GOTO 80
C check edge for near end
	  LENEDG=IEND-NEBUF(IU+1,I)
	  IF(IABS(LENEDG).GT.IWT) GOTO 80  ! ok
	  IF(J.EQ.NN(1)) GOTO 170  ! whole line too short
	  P(IU)=IEND-IWT*ISIGN(1,IDU)
	  Z=(P(IU)-NEBUF(IU+1,NODE(J-WAY)))/IDU
	  P(IV)=NEBUF(IV+1,I)*Z+NEBUF(IV+1,NODE(J-WAY))*(1-Z)+DW(IV)
	  GOTO 90
C fabricate point in apex
70	  P(X)=(NEBUF(X+1,I)+NEBUF(X+1,NODE(J-WAY)))/2.
	  P(Y)=(NEBUF(Y+1,I)+NEBUF(Y+1,NODE(J-WAY)))/2.
	  GOTO 90
C add width correction if neccessary
80	  P(X)=NEBUF(X+1,I)+DW(X)
	  P(Y)=NEBUF(Y+1,I)+DW(Y)
C add on start of scan
90	  P(X)=P(X)+START(X)
	  P(Y)=P(Y)+START(Y)
C and bunch it
	  MOLD=NMP(1)
	  CALL BUNCH(P(X),P(Y))
	  IF(IW.GE."37770) GOTO 100
	  IW=FLOAT(IW)*DU/HYPOT + 0.5  ! normalised width
	  CHNWID=CHNWID+IW
100	  NTRK = NTRK+1
C preserve first point.
110	  IF(NMP(1).EQ.MOLD) GOTO 120  ! not a new master point
	  IF(.NOT.((NMP(1).EQ.1).AND.PENUP)) GOTO 120
	  SEC(X)=MP1(X,1)
	  SEC(Y)=MP1(Y,1)
	  STRTNG=.TRUE.
	  GOTO 130
C check for closure if closed feature
120	  IF(OPEN) GOTO 130
	  IF(.NOT.NEAR) GOTO 130
	  IF(NMP(1).LT.3) GOTO 130
	  DX(2)=P(X)-SEC(X)
	  DY(2)=P(Y)-SEC(Y)
	  DX(1)=MP1(X,MOLD)-SEC(X)
	  DY(1)=MP1(Y,MOLD)-SEC(Y)
C now check for overshoot
	  DOT12=DOT(1,2)
	  IF(DOT12.GT.0) GOTO 130
C angle is obtuse so check perpendicular distance
	  DX(3)=DX(2)-DX(1)
	  DY(3)=DY(2)-DY(1)
	  RR(1)=DOT(1,1)
	  RR(2)=DOT(2,2)
	  RR(3)=DOT(3,3)
	  RR2COS=RR(1)+RR(3)-RR(2)
	  HH=RR(1)-0.25*RR2COS*RR2COS/RR(3)
	  IF(HH.GT.LIMIT(13)) GOTO 130  ! not near enough
C close enough so closed
	  TOMP = -1
	  NMP(1)=NMP(1)+1
	  MP1(X,NMP(1))=P(X)
	  MP1(Y,NMP(1))=P(Y)
	  GOTO 170
C
130	  IF (NMP(1) .LE. MPLIM) GOTO 140
	  N = NMPIFF+(NMP(1)-MPLEFT)
	  IF (N+MPLEFT .GT. MPTOTE) GOTO 180	! too big
	  NMPIFF = N
	  CALL OUTMP1(MPLEFT,THKNSS,PENUP,OUTPUT)
C
C check special cases
140	  IF (GOTLIN.OR.SECEDJ.OR.(NTYPE.EQ.2))GOTO 160
C Wides and lines are not checked here
	  IF ((NTYPE.EQ.3).AND.(IDW.LE.0)) GOTO 150 !narrowed apex
	  IF (ABS(IEND-NEBUF(IU+1,I)).GT.IWT) GOTO 160
C Near end of edge or apex now
	  IF (NTYPE.NE.3) GOTO 170 ! edge, so finish
C
150	  SECEDJ=.TRUE. ! do other side of apex
	  WAY=-WAY
	  NN(2)=NN(1) !reverse args of do loop
	  IF (J.NE.NN(1)) NN(1)=J+WAY !
	  GOTO 10 ! Go and restart 'DO'
C
160	  CONTINUE
C
C set up average width of the line segment just output
170	IF(.NOT.GOTLIN) GOTO 190
	CHNWID=CHNWID/NTRK
	IF(TRKWID.LE.0) TRKWID=CHNWID
	TRKWID=(TRKWID+CHNWID)/2.
**	IF	ELF
C set track polarity
	TRKPOL = CONNCT(1,CHNSEL)
**	ENDC
	GOTO 190
C too big
180	TOMP = 1
C
190	RETURN
	END
