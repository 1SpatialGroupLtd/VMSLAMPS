C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1980-05-28 18:03:26.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE INOUT(CWD)
C
C Copyright Laser-Scan Laboratories Ltd,Cambridge,England
C
C Author M.C.Fulford
C
C	Created 18.iv.77
C	Edited by Alan Wylie 18.x.79 to include NHATCH
C	Conditionalisation tidied MCF 28/May/80
C
C Called from LINK to set, or type, parameters
C
	PARAMETER NLNKUI=8	! number of integers in /LKPARM/
	PARAMETER NLNKUR=26	! number of reals          "
	PARAMETER NLNKUL=11	! number of logical*1s     "
**	IF	JNCTN
	PARAMETER NELFR = 4
	PARAMETER NELFI = 3
**	ENDC
**	IF	ELF
	PARAMETER NELFR = 1
**	ENDC
C
***	COMMON/PARAMS/
***	COMMON/SCPARM/
***	COMMON/SCCORR/
***	COMMON/MASTER/
***	COMMON/DIGC/
***	COMMON/LKPARM/
***	COMMON/MPEP/
***	COMMON/GRPARM/
***	COMMON/GRID/
**	IF	ELFvJNCTN
***	COMMON/ELFPAR/
**	ENDC
	COMMON/THKPAR/SEP,SPOT
C
	INTEGER CWD
C
C
	INTEGER ILNKU(NLNKUI)
	EQUIVALENCE (ILNKU(1),IDSIZE)
	REAL RLNKU(NLNKUR)
	EQUIVALENCE (RLNKU(1),THKNSS)
	LOGICAL*1 LLNKU(NLNKUL)
	EQUIVALENCE (LLNKU(1),DISP)
**	IF	JNCTN
	INTEGER ELFINT(NELFI)
	EQUIVALENCE (ELFINT(1),VECLEN)
**	ENDC
**	IF	ELF v JNCTN
	REAL ELFREL(NELFR)
	EQUIVALENCE (ELFREL(1),EPSLON)
**	ENDC
C
	INTEGER NSCP(10)
	REAL    RSCC(7)
	EQUIVALENCE (NSCP(1),IMOD)
	EQUIVALENCE (RSCC(1),WAR )
C
	INTEGER TF(-1:0)
	DATA TF(-1),TF(0)/32,45/
C
	IF (CWD .GT. 0) GOTO 600
30	RETURN
C
C
C Setting various parameters
C
600	IF (CWD-10 .LE. 0) GOTO 610
	CWD = CWD-10
	IF (CWD-7 .LE. 0) GOTO 620
	CWD = CWD-7
	IF (CWD-NLNKUI .LE. 0) GOTO 645
	CWD = CWD-NLNKUI
	IF (CWD-NLNKUR .LE. 0) GOTO 650
	CWD = CWD-NLNKUR
	IF (CWD-NLNKUL .LE. 0) GOTO 660
	CWD = CWD-NLNKUL
**	IF	ELFvJNCTN
	IF (CWD-NELFR .LE. 0) GOTO 690
	CWD = CWD-NELFR
**	ENDC
**	IF	JNCTN
	IF (CWD-NELFI .LE. 0) GOTO 700
	CWD = CWD-NELFI
**	ENDC
	GOTO (670,680,760,765,767,770,
     *        775,777,780,785,790,795,797,805,
     *        810,812,813,815,820,900,920,922,940),CWD
	GOTO 30
C
C set /SCPARM/
610	NSCP(CWD) = INTARG
	GOTO 30
C set /SCCORR/
620	RSCC(CWD) = REALA1
	GOTO 30
C set /LKPARM/
645	ILNKU(CWD) = INTARG
	GOTO 30
650	RLNKU(CWD) = REALA1
	GOTO 30
660	LLNKU(CWD) = INTARG.NE.0
	GOTO 30
C set LIMs & Ws
670	IF(INTARG.GT.0.AND.INTARG.LE.MAXLIM)LIMIT(INTARG)=REALA1
	GOTO 30
680	IF(INTARG.GT.0.AND.INTARG.LE.MAXWT)WGHT(INTARG)=REALA1
	GOTO 30
**	IF	ELFvJNCTN
C set /ELFPAR/
690	ELFREL(CWD) = REALA1
	GOTO 30
**	ENDC
**	IF	JNCTN
700	ELFINT(CWD) = INTARG
	GOTO 30
**	ENDC
C /MPEP/
760	H(1) = REALA1
	GOTO 30
765	S(1) = REALA1
	GOTO 30
767	E(1) = REALA1
	GOTO 30
770	MPLIM = INTARG
	GOTO 30
775	MPLEFT = INTARG
	GOTO 30
777	MPTOTE = INTARG
	GOTO 30
C /THKPAR/
780	SEP = REALA1
	GOTO 30
785	SPOT = REALA1
	GOTO 30
C /GRPARM/
790	ISCAT = INTARG
	GOTO 30
795	IGREP = INTARG
	GOTO 30
797	IGRAVE = INTARG
	GOTO 30
805	OFFNSS = REALA1
	GOTO 30
810	FQUAL = REALA1
	GOTO 30
812	GRDOUT = INTARG.NE.0
	GOTO 30
813	DMAGRD =INTARG.NE.0
	GOTO 30
C /GRID/
815	GRIDSQ = REALA1
	GOTO 30
C /MASTER/
820	REDFOC = INTARG
	CALL DISMOD(0)
	CALL FLEVEL(INTARG)
	GOTO 30
C
C Write out common blocks
C
C PSP - /SCPARM/ & /SCCORR/
C
900	CALL WRITEF(
     *     'MOD %N FRQ %N WID %N PIT %N TLO %N TSW %N TMS %N',
     *     IMOD,  IFRQ,  IWID,  IPIT,  ITLO,  ITSW,   ITMS)
	CALL WRITEF(
     *     'WAR %F6.2 CRX %F6.2 CRY %F6.2',WAR,CRX,CRY)
	CALL WRITEF(
     *     'OFX %F6.2 OFY %F6.2 PHX %F6.2 PHY%F7.2 FLE %N',
     *     OFX,OFY,PHX,PHY,REDFOC)
	GOTO 30
C PLP -/LKPARM/ & /DIGC/
920	CALL WRITEF('ID %N TYPE %N HOLE %N RIP %N INI %N',
     *              IDSIZE,LTYPE,HOLE,RIPPLE,INICOM)
	CALL WRITEF(
     *     'THK%F6.1 HCH %N PTH%F6.1 CWW%F5.2 CWU%F5.2 CWV%F5.2',
     *     THKNSS,NHATCH,THKPNT,CHWT(1),CHWT(2),CHWT(3))
	CALL WRITEF(
     *     'RGR%F7.1 ETA%F4.1 GAP%F6.0 %CDISP %CECHO %CDUMB',
     *     RGROW,ETA,GAPSIZ,TF(DISP),TF(ECHO),TF(DUMB))
	CALL WRITEF('SHA %F7.2 DIF %F7.1 CRS %N',SHRPNS,WIDDIF,CRSSNG)
	CALL WRITEF(
     *     'STI%F7.0 SMA%F5.1 BET%F5.2 NEA%F5.1 PRL%F5.1 BIA%F6.2',
     *      STFFNS,  SMLLNS,  BETA,    NEARNS,  PRLLNS,  BIAS)
	CALL WRITEF(
     *     'ANG %F7.3 LEN %F7.3 DST %F7.3 WTH %F7.3',
     &     ANGWGT,LENWGT,DSTWGT,WTHWGT)
	CALL WRITEF(
     *     'CRC %F0.4 CRD %F7.0',
     *     CRUCOS,CRUDIS)
	CALL WRITEF(
     &   'MPB %N MPN%F6.1 %CBCH %CTCH %CEDG %CSMO %CVEX %CLIN %CJNC',
     *          NMPBAK,MPNEAR,TF(BAKCHK),TF(TMPCHK),TF(EDGING),
     *          TF(SMOING),TF(VEXING),TF(LINING),TF(JNCING))
	CALL WRITEF('CHF %N TIK%F6.1 CHP%F6.1 SQT%F6.1',
     *     CPCHEK,TIKSIZ,CPTHIK,SQUTOL)
	GOTO 30
C PLW - limits & weights from /LKPARM/
922	DO 925 I=1,MAXLIM
925	  CALL WRITEF('LIM%N %F10.1',I,LIMIT(I))
	DO 927 I=1,MAXWT
927	  CALL WRITEF('W%N %F8.2',I,WGHT(I))
	GOTO 30
C POD - others: /MPEP/<,/ELFPAR/>,/THKPAR/
940	CALL WRITEF('H%F7.1 S%F3.1 E%F4.1 MPL %N MPF %N MPX %N',
     *              H(1),S(1),E(1),MPLIM,MPLEFT,MPTOTE)
**	IF	ELF
	CALL WRITEF('EPS %F0.2',EPSLON)
**	ENDC
**	IF	JNCTN
	CALL WRITEF(
     &       'EPS %F0.2 PRC %F0.2 DRT %F2.2 DWD %F5.0 VLN %N PDS %N',
     &       EPSLON,PARCOS,DIVRAT,DIVWID,VECLEN,PARDIS)
	CALL WRITEF(
     &       'DJP %N',
     &       DIVJMP)
**	ENDC
	CALL WRITEF('SEP%F6.3 SPOT%F6.3 %CDMA',SEP,SPOT,TF(DMAGRD))
	CALL WRITEF(
     *     'SCT %N REP %N AVE %N OFF%F4.2 QUA%F4.2 GRI%F4.2 %COUT',
     *     ISCAT,IGREP,IGRAVE,OFFNSS,FQUAL,GRIDSQ,TF(GRDOUT))
	GOTO 30
	END
