C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1980-07-08 18:40:14.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE NXTSEG
C
C Copyright Laser-Scan Laboratories Ltd,Cambridge,England
C
C Originated by M.C.Fulford 18.iv.77
C Created from TOMP by A.J.Wylie 29.xi.79
C Conditionalisation tidied 	MCF	20/May/80
C Checking of WAY corrected	MCF	29/May/80
C
C Output CHNSEL to /TRKSEG/
C attaching by (NEND=1->FIRST,NEND=2->LAST) end.
C
***	COMMON/PARAMS/
***	COMMON/RSE/
***	COMMON/LINKS/
***	COMMON/DIGC/
***	COMMON/LKPARM/
***	COMMON/MPEP/
***	COMMON/BLG/
***	COMMON/LKFOLL/
***	COMMON/TRKSEG/
C
C workspace
	INTEGER NCHN,NEND,NTYPE,LSTPNT(2),NXTPNT(2),VEXPNT(2),NLST
	INTEGER THISPT(2),THATPT(2),NN(2),WAY,DW(2),IDW,MPNEXT
	LOGICAL*1 NEAR,POSCOR,SECEDJ,GOTLIN
	REAL P(2),DU,DV
C
C functions called
	LOGICAL NOTVEX
C
C
C
	SEGLEN=0
**	IF JNCTN
	SEGJUN=.FALSE.		!it's not a junction (yet)
**	IFTF
	IF (CHNSEL.LE.0) GOTO 160
	NCHN=CONNCT(2,CHNSEL)
	NEND=CONNCT(3,CHNSEL)
	NTYPE=CONNCT(4,CHNSEL)
**	IFT
	IF (NTYPE.EQ.5) GOTO 150		! junction
**	ENDC
	GOTLIN=(NTYPE.EQ.0)
**	IF	ELF
	DW(IV) = 0
**	IFF
	DW(IV)=CONNCT(1,CHNSEL)
**	ENDC
	DW(IU)=0
	POSCOR=(DW(IV).GT.0)
	SECEDJ=.FALSE.  ! first edge of apexes
	IF (CHAIN(NCHN).EQ.0) GOTO 160
C	IF(VEXING.AND.NTYPE.EQ.1) GOTO 80  ! notapp edge vexing
	NN( NEND ) = FIRST(NCHN)
	NN(3-NEND) = LAST(NCHN)
	WAY = 3-NEND-NEND
	IF (WAY.NE.1.AND.WAY.NE.-1) CALL
     &     WRITEF('CHNSEL%N,NCHN%N,NEND%N,NTYPE%N',
     &             CHNSEL  ,NCHN  ,NEND  ,NTYPE)
	IEND = NEBUF(IU+1,NODE(NN(2)))
	IWT = TRKWID*WGHT(2)
	SEGWID = 0.
	NTRK = 0
C check for possible vertex point
	IF(.NOT.VEXING .OR. NTYPE.GT.2.OR.NTYPE.EQ.1) GOTO 10
	CALL GTLST2(START,1.0E4,1.0,NLST,LSTPNT,NXTPNT,MPNEXT)
	IF(NLST.NE.4) GOTO 10  ! nothing to compare against
	THISPT(X)=NEBUF(X+1,NODE(NN(1)))+DW(X)
	THISPT(Y)=NEBUF(Y+1,NODE(NN(1)))+DW(Y)
	NTHAT=NODE(NN(1)+WAY)
	THATPT(X)=NEBUF(X+1,NTHAT)+DW(X)
	THATPT(Y)=NEBUF(Y+1,NTHAT)+DW(Y)
	IF(NOTVEX(NXTPNT,LSTPNT,VEXPNT,THISPT,THATPT)) GOTO 10
	P(X)=VEXPNT(X)+START(X)
	P(Y)=VEXPNT(Y)+START(Y)
	SEGLEN=SEGLEN+1		! put points into /TRKSEG/
	SEGPT(X,SEGLEN)=P(X)
	SEGPT(Y,SEGLEN)=P(Y)
C loop for points in chain
10	DO 130 J=NN(1),NN(2),WAY
	  I = NODE(J)
	  IF(J.EQ.NN(1)) GOTO 30  ! first point
20	  IDU=NEBUF(IU+1,I)-NEBUF(IU+1,NODE(J-WAY))
	  IDV=NEBUF(IV+1,I)-NEBUF(IV+1,NODE(J-WAY))
	  GOTO 40
30	  IF(J.EQ.NN(2)) GOTO 20  ! single point chain
	  IDU=NEBUF(IU+1,NODE(J+WAY))-NEBUF(IU+1,I)
	  IDV=NEBUF(IV+1,NODE(J+WAY))-NEBUF(IV+1,I)
40	  IW=NEBUF(1,I).AND."37777
	  IF(IDU.EQ.0.OR.TMPCHK) CALL WRITEF('J%N,%N>%N,%N,U%N,C%N',
     *       J,NN(1),NN(2),WAY,IDU,NTYPE)
	  DU=IABS(IDU)
	  DV=IABS(IDV)
	  HYPOT=SQRT(DU*DU+DV*DV)
	  UNTWID=TRKWID*HYPOT/DU
	  IF(NTYPE.NE.2) GOTO 50
C here with wide line
	  IDW=(FLOAT(IW)-UNTWID)/2.
	  IF(IDW.LT.0) IDW=0
	  DW(IV)=IDW
	  IF(CONNCT(1,CHNSEL).LT.0) DW(IV)=-DW(IV)
	  GOTO 80
50	  IF (NTYPE .NE. 3) GOTO 60 
C here with an apex
	  IDW=IW/2-IABS(CONNCT(1,CHNSEL))
	  IF(IDW.LE.0) GOTO 70
	  DW(IV)=IDW
	  IF(CONNCT(1,CHNSEL).LT.0) DW(IV)=-DW(IV)
	  IF(SECEDJ) DW(IV)=-DW(IV)
60	  IF(NTYPE.NE.1) GOTO 80
C check edge for near end
	  LENEDG=IEND-NEBUF(IU+1,I)
	  IF(IABS(LENEDG).GT.IWT) GOTO 80  ! ok
	  IF(J.EQ.NN(1)) GOTO 140  ! whole line too short
	  P(IU)=IEND-IWT*ISIGN(1,IDU)
	  Z=(P(IU)-NEBUF(IU+1,NODE(J-WAY)))/IDU
	  P(IV)=NEBUF(IV+1,I)*Z+NEBUF(IV+1,NODE(J-WAY))*(1-Z)+DW(IV)
	  GOTO 90
C fabricate point in apex
70	  P(X)=(NEBUF(X+1,I)+NEBUF(X+1,NODE(J-WAY)))/2.
	  P(Y)=(NEBUF(Y+1,I)+NEBUF(Y+1,NODE(J-WAY)))/2.
	  GOTO 90
C add width correction if neccessary
80	  P(X)=NEBUF(X+1,I)+DW(X)
	  P(Y)=NEBUF(Y+1,I)+DW(Y)
C add on start of scan
90	  P(X)=P(X)+START(X)
	  P(Y)=P(Y)+START(Y)
C and append it to segment in /TRKSEG/
	  IF(SEGLEN.LT.MAXSEG) SEGLEN=SEGLEN+1
	  SEGPT(X,SEGLEN)=P(X)
	  SEGPT(Y,SEGLEN)=P(Y)
	  IF (IW.GE."37770) GOTO 100
	  IW=FLOAT(IW)*DU/HYPOT+0.5	! normalised width
	  SEGWID=SEGWID+IW
100	  NTRK=NTRK+1
 
C check special cases
110	  IF (GOTLIN.OR.SECEDJ.OR.(NTYPE.EQ.2))GOTO 130
C Wides and lines are not checked here
	  IF ((NTYPE.EQ.3).AND.(IDW.LE.0)) GOTO 120 !narrowed apex
	  IF (ABS(IEND-NEBUF(IU+1,I)).GT.IWT) GOTO 130
C Near end of edge or apex now
	  IF (NTYPE.NE.3) GOTO 140 ! edge, so finish
C
120	  SECEDJ=.TRUE. ! do other side of apex
	  WAY=-WAY
	  NN(2)=NN(1) !reverse args of do loop
	  IF (J.NE.NN(1)) NN(1)=J+WAY !
	  GOTO 10 ! Go and restart 'DO'
C
130	  CONTINUE
C
C set up average width of the line segment just output
140	IF(.NOT.GOTLIN) GOTO 160
	SEGWID=SEGWID/NTRK
**	IF	ELF
C set track polarity
	TRKPOL = CONNCT(1,CHNSEL)
**	ENDC
	GOTO 160
**	IF	JNCTN
C
150	CALL JNCTRK	! form track segments from junction data
	GOTO 160
**	ENDC
C
160	RETURN
	END
