C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1980-02-21 12:30:46.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE MANDIG(NWID,NPIT)
C
C Copyright Laser-Scan Laboratories Ltd,Cambridge,England
C
C Author M.C.Fulford
C
C	Created 7.ix.77
C	Last edited 9/ix/77
C
C Digitise a series of points using the famous close-up
C screen (provided at great expense for precisely this
C purpose.)
C Points are fed into BUNCH after the fashion of manual
C points in LINK.
C
***	COMMON/PARAMS/
C
	INTEGER NWID	! width used for FAX
	INTEGER NPIT	! pitch  "    "   "
C
***	COMMON/LKPARM/
***	COMMON/SCCORR/
C
	REAL CUR(2)	! cursor position
	INTEGER LSTP(2)	! last point on line
	INTEGER NXTP(2)	! next   "   "    "
	INTEGER IP(2)	! a point on the screen
	INTEGER PRV(2)	! last point drawn to
	REAL MAXC	! coord limit (user units)
	INTEGER U,V	! axes
	LOGICAL*1 GOTPRV! => PRV is meaningful
C
C
	GOTPRV = .FALSE.
	CALL CSRD(CUR(X),CUR(Y))
	SCTX = 680./(NWID*WAR*CRX)
	CALL TXSCLE(SCTX)
	CALL TXORGN(500,350)
C get 2 points on the line
	CALL GTLST2(CUR,10000.,STFFNS,NLST,LSTP,NXTP,NM)
	IF (NLST .LT. 4) GOTO 300
C draw current piece of line (clipped)
	IP(X) = NXTP(X)
	IP(Y) = NXTP(Y)
	MAXC = 320./SCTX
	DO 200 I = 1,2
	  U = 1
	  IF (IABS(IP(Y)).GT.IABS(IP(X))) U = 2
	  V = 3-U
	  M = 0
	  IF (IP(U) .GT.  MAXC) M = MAXC
	  IF (IP(U) .LT. -MAXC) M = -MAXC
	  IF (M .EQ. 0) GOTO 100
	    IP(V) = M*FLOAT(IP(V))/IP(U)	! clip
	    IP(U) = M
100	  IF (I .EQ. 1) CALL TXMTO(IP(X),IP(Y))
	  IF (I .EQ. 2) CALL TXLTO(IP(X),IP(Y))
	  PRV(X) = IP(X)
	  PRV(Y) = IP(Y)
	  GOTPRV = .TRUE.
	  IP(X) = LSTP(X)
	  IP(Y) = LSTP(Y)
	  MAXC = MAXC*1.1
200	  CONTINUE
C
C get the new bits
C
300	CALL TXCUR
	CALL TXLOC(ICH,ICX,ICY)
	CALL FBRD(IFB)
	IF (ICH .EQ. "105) GOTO 500	! 'E' => end
	IF (ICH .EQ. "040) GOTO 400	! 'SP'=> add a point
	IF (IFB .EQ.  16 ) GOTO 500	! FB16=> end (as well)
	GOTO 300			! all else ignored
C the new point
400	CALL BUNCH(CUR(X)+ICX,CUR(Y)+ICY)
	CALL CSWT(CUR(X)+ICX,CUR(Y)+ICY) ! keep HRD in step
	CALL REFRSH
	IF (GOTPRV) GOTO 450
	  PRV(X) = ICX
	  PRV(Y) = ICY
	  GOTPRV = .TRUE.
450	CALL TXMTO(PRV(X),PRV(Y))
	CALL TXLTO(ICX,ICY)
	PRV(X) = ICX
	PRV(Y) = ICY
	GOTO 300
C the end
500	CALL TXEND
C
900	RETURN
	END
