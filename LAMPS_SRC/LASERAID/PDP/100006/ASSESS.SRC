C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1980-05-19 15:34:50.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE ASSESS (U, V)
C
C Copyright Laser-Scan Laboratories Ltd,Cambridge,England
C
C Author M.C.Fulford
C
C	Created 6.iv.77
C	Last edited 19/May/1980
C
C To assess the situation and then to inform LINK of the action
C that should be taken.
C
C parameters:
***	COMMON/PARAMS/
C arguments:
	INTEGER U,V	! directions
C common blocks:
***	COMMON/LKFOLL/
***	COMMON/LKPARM/
***	COMMON/SCPARM/
***	COMMON/LINKS/
***	COMMON/RSE/
C functions:
	LOGICAL CENTRE,SIMPLE	! functions called
C workspace:
	INTEGER FSTCON,CONGOT
	LOGICAL*1 GOT1,GOT2
	REAL DU,DV,D
C
C  Set up
	FSTCON = 1
	BSTCON = 0
	LSTFRK = 0
	FRKCOM = 0
	DO 10 I=1,MAXCON
	  NXTBST(I) = 0
10	  CONTINUE
	SCAN = .FALSE.
C Decide what to look at, and how
	DIST = LIMIT(10)	! maximum gap
	IF (JUMPED) DIST = 10000.
	CALL GTLST2(START,DIST,STFFNS,
     *              NLST,LSTONE,NXTLST,NM)
	GOT1 = NLST.GE.3
	GOT2 = NLST.GE.4
	IF (.NOT. GOT1) GOTO 20  ! starting up
	IF(SIMPLE(0)) GOTO 50    ! simple solution
	GOTO 60
C Starting up
C
20	CONGOT = 0
	DO 30 J = 1,MAXCHN
	  IF (CHAIN(J) .LE. 0) GOTO 30
	  NFST = NODE(FIRST(J))
	  NLST = NODE(LAST (J))
	  N = NEBUF(1,NFST).AND."37777
	  IF ((N.EQ."37770.OR.N.EQ."37774) .AND.
     *        IMOD.NE.0) GOTO 30 ! not edge if in line mode
	  DU = FLOAT(NEBUF(U+1,NLST)-NEBUF(U+1,NFST))
	  DV = FLOAT(NEBUF(V+1,NLST)-NEBUF(V+1,NFST))
	  D = DU*DU + DV*DV
	  IF (D .LE. (IPIT*LIMIT(5))**2) GOTO 30
	  I = FSTCON+CONGOT
	  QUALTY(I) = WGHT(1)*D
**	IF	ELF
	  CONNCT(1,I) = -1
	  IF ((N.EQ."37770) .XOR. (U.EQ.1) .XOR.
     *        (DU.GT.0)) CONNCT(1,I) = 1
**	IFF
	  CONNCT(1,I) = 0
**	ENDC
	  CONNCT(2,I) = J
	  CONNCT(3,I) = 1
	  CONNCT(4,I) = 0
	  CONGOT = CONGOT+1
	  IF (CONGOT .GE. MAXCON) GOTO 40
30	  CONTINUE
C
40	CALL ADDASS(NXTBST,QUALTY,BSTCON,FSTCON,CONGOT)
	GOTO 100
C
C Simple
C
50	SCAN = .TRUE.
	LOST = .FALSE.
	CNFSED = .FALSE.
	VERY = .FALSE.
	NLOST = 0
	GOTO 110
C
C Usual case, choose line segments & sort into order
C of preference of attachment.
C
60	CONTINUE
**	IF	JNCTN
	IF (MERGED.AND.JNCING) GOTO 90
**	ENDC
	IF (.NOT.FORKED .OR. LSTSEL.LE.0) GOTO 80
	IF (CENTRE(LIMIT(1),LIMIT(2)*IPIT)) GOTO 70
C not in centre of scan - get it there
	FRKCOM = 5
	GOTO 110
C use the FORK information
70	CALL USEFRK(FSTCON,CONGOT,LIMIT(7),CRSSNG,LSTFRK)
	IF (LSTFRK .LE. 0) GOTO 80
	CALL ADDASS(NXTBST,QUALTY,BSTCON,FSTCON,CONGOT)
	FRKCOM = 3	! confused
	GOTO 110
C
C Match up the line segments with the digitised line empirically
C without using the fork info
C
80	CALL MATCH(FSTCON,CONGOT,GOT2.AND..NOT.JUMPED,.NOT.JUMPED)
	CALL ADDASS(NXTBST,QUALTY,BSTCON,FSTCON,CONGOT)
	GOTO 100
**	IF	JNCTN
C
C
C Use the junction information
C
90	CALL USEJNC(FSTCON,CONGOT)
	IF (CONGOT.LE.0) GOTO 100
	CALL ADDASS(NXTBST,QUALTY,BSTCON,FSTCON,CONGOT)
	FRKCOM = 3		! confused
	GOTO 110
**	ENDC
C
C Sort out what was seen
C
100	LOST = BSTCON.EQ.0
	IF (.NOT.LOST) NLOST = -1
	NLOST = NLOST+1
	VERY = NLOST .GT. 5
C that 5 is determined by NEWVEC
	CNFSED = .FALSE.
	IF ( LOST ) GOTO 110
	CNFSED = (QUALTY(BSTCON) .LT. LIMIT(7)) .OR. JUMPED
	IF (NXTBST(BSTCON).EQ.0 .OR. CNFSED) GOTO 110
	CNFSED =
     *   ABS(QUALTY(BSTCON)-QUALTY(NXTBST(BSTCON))) .LT. LIMIT(6)
C
110	RETURN
	END
