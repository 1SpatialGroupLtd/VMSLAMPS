C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1980-02-21 12:43:50.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE PEER(N,XS,YS,IDX,IDY,IV)
C
C Copyright Laser-Scan Laboratories Ltd,Cambridge,England
C
C Author M.C.Fulford
C	Last edited 24/vii/79
C
C
C TO BE CALLED FROM SCHECK, TO GIVE AN IDEA OF THE
C DIGITISER'S PERFORMANCE.
C
C
***	COMMON/PARAMS/
	PARAMETER MAXPHA=60
C
	INTEGER N		! info required
C			1 - H/W phase
C			2 - OF() & CR()
C			3 - threshold - lines
C			4 - focus
C			5 - threshold - area
C			6 - scanning rate v IWID
C			7 - S/W phase
	REAL XS,YS		! start of scan vector
	INTEGER IDX,IDY		! scan vector
***	COMMON/SCCORR/
***	COMMON/SCPARM/
***	COMMON/RSE/
***	COMMON/MASTER/
C
	LOGICAL*1 GOTLST
	LOGICAL*1 GOTPHR	! if last scan had valid PHERR
	REAL PHERR		! phase error
	REAL PHA(2),OFF(2)
	INTEGER IWIDSV,IPITSV
	REAL SEPL(2),TC,TM
	INTEGER IXYCH(2),M
	INTEGER TCBUF(3,21),TCCT
C
	EQUIVALENCE (PHX,PHA(1)),(OFX,OFF(1))
	DATA IXYCH/'X ','Y '/
C
	IDIR = 0
	IF (IABS(IDY) .LT. IABS(IDX)) IDIR = 1
	IV = 1+IDIR
	IU = 3-IV
	IMODSV = IMOD
	IWIDSV = IWID
	CALL DISMOD(0)
	CALL RDABO
	GOTO (10,200,20,40,20,500,100),N
C set up for H/W phase
10	IMOD = 0
	PHA(IV)  = 1.1	! to ensure correct rounding
	DPHA = 1.
	GOTPHR = .FALSE.
	TCCT = 0
	NMINUS = 0
	CALL TXORGN(0,350)
	CALL TXSCLE(1.0)
	CALL TXMTO(0,0)
	CALL TXLTO(MAXPHA*15,0)
	GOTO 30
C set up for threshold
20	CALL TXORGN(0,0)
	CALL TXSCLE(4.0)
25	ITLO = 0
C
30	CALL TXMTO(0,0)
	GOTO 100
C set up for focus
40	IFL = 0
	CALL TXORGN(0,0)
	CALL TXSCLE(5.0)
	CALL TXMTO(0,0)
45	CALL FLEVEL(IFL)
	GOTO 100
C head of scan loop
100	CALL MOVTO(XS,YS)
C See if the operator's fed up
	CALL FBWT16("100000)
	CALL FBRD(IFB)
	IF (IFB .EQ. 16) GOTO (450,900,720,780,720,900,900),N
C DO THE SCAN AND THEN GO AND LOOK AT DATA
	CALL SCANBY(IDX,IDY,1)
	CALL SCSET(0)
	GOTO (300,600,600,600,600,900,800),N
 
C HERE FOR TRANSVERSE SCAN--SET UP OFF() AND CR()
 
200	IMOD = 1
	SEPL(IU) = 0.
	SEPL(IV) = IWID*CR(IV)*WAR/25.
	TCCT = 0
 
C Scan separation set up
 
	CALL TXORGN(500,350)
	CALL TXSCLE(1.)
	CALL TXMTO(-250,250)
	CALL TXLTO(-250,-250)
	CALL TXLTO(250,250)
	CALL TXLTO(250,-250)
	CALL TXMTO(250,0)
	CALL TXLTO(-250,0)
 
C TEK set up
 
	DO 250 ISCCT = -10,10
	  CALL MOVETO(XS+ISCCT*SEPL(X),YS+ISCCT*SEPL(Y))
	  CALL SCANBY(IDX,IDY,1)
	  CALL SCSET(0)
 
C In loop now, scan done
 
	  NPTS = 0
	  INE = NEGET(NEBUF,-NESIZE)
	  IF (INE .LE. 0) GOTO 250
	  IB = 1
 
C Some encounters to process
 
220	  IW = NEBUF(1,IB)
	  NEBUF(1,IB) = -1
	  IF (IW .GE. "37770) GOTO 230
	  NPTS = NPTS+1
	  NEBUF(1,IB) = 1
 
C NEBUF(1,IB) marked +1 if good line encounter
 
230	  IB = IB+1
	  IF (IB .LE. INE) GOTO 220
 
C Scan processed
 
	  IF (NPTS .LT. 4) GOTO 250
	  CALL LINFIT(NEBUF,1,INE,1,IU+1,IV+1,1.,TC,TM)
	  TC = -TC
	  CALL TXLTO(ISCCT*25,IFIX(25*TC/SEPL(IV)))
	  TCCT = TCCT+1
	  TCBUF(1,TCCT) = 1
	  TCBUF(2,TCCT) = ISCCT*SEPL(IV)
	  TCBUF(3,TCCT) = TC
C Offset of fitted line saved for later
 
250	  CONTINUE
 
	IF (TCCT .LT. 6) GOTO 270
	CALL LINFIT(TCBUF,1,TCCT,1,3,2,1.,TC,TM)
	CALL TXMTO(IFIX(25*TC/SEPL(IV)),50)
	CALL TXLBY(0,-100)
	CALL TXMTO(-500,300)
	CALL TXEND
	CALL WRITEF('OFFSET,SLOPE=%F  %F',TC,TM)
	OFF(IV) = OFF(IV)+TC
	CR(IV) = CR(IV)*TM
	CALL WRITEF('OF%C = %F,CR%C = %F',IXYCH(IV),OFF(IV),
     *                      IXYCH(IV),CR(IV))
	GOTO 900
 
270	CALL TXMTO(-500,300)
	CALL TXEND
	CALL WRITEF('CAN''T SEE ENOUGH')
	GOTO 900
 
C INVESTIGATE EFFECTS OF PHASE CORRECTION
 
300	INE = NEGET(NEBUF,-NESIZE)
	PHERR = 0.0
	NPTS = 0
	IF (INE .LE. 0) GOTO 420
C LOOK AT EDGES AND GET SIDEWAYS WOBBLE
	GOTLST = .FALSE.
	IB = 1
C NEXT SCAN LINE
320	IT = IB
C NEXT POINT ON SCAN LINE
330	IF (IT .EQ. INE) GOTO 340
	IW = NEBUF(1,IT+1)
	IF (IAND(IW,"40000) .EQ. 0) GOTO 340
C ANOTHER POINT FOR THIS SCAN LINE
	IT = IT+1
	NEBUF(1,IT) = IAND(IW,"37777)
	GOTO 330
C HERE WITH COMPLETE SCAN LINE
C SEE IF WE CAN COMPARE IT WITH THE LAST ONE
C FIRST, DOES IT HAVE TWO, AND ONLY TWO, EDGES ?
340	IF (IT .NE. IB+1) GOTO 374
C GET THE DIRECTION OF THE SCAN LINE
	NWAY = 0
	IF (NEBUF(IV+1,IB) .GT. NEBUF(IV+1,IT)) NWAY = 1
C AND THE POLARITY OF THE LINE (WHITE OR BLACK)
	NPOL = -1
	IF (NEBUF(1,IB+NWAY) .EQ. "37770) NPOL = 0
	IF (NEBUF(1,IB+NWAY) .EQ. "37774) NPOL = 1
	IF (NPOL .LT. 0) GOTO 360
C is there a last scan to compare with ?
	IF (.NOT. GOTLST) GOTO 360
C OPPOSITE DIRECTION TO LAST SCAN ?
	IF (NWAY .EQ. LSTWAY) GOTO 360
C SAME POLARITY LINE ?
	IF (NPOL .NE. LSTPOL) GOTO 360
C WE CAN ACTUALLY COMPARE THE TWO SCANS !!!
	ID1 = (LAST1-NEBUF(IV+1,IB+1-NWAY))*(NWAY+NWAY-1)
	ID2 = (LAST2-NEBUF(IV+1,IB+NWAY))*(NWAY+NWAY-1)
	PHERR = PHERR+ID1+ID2
	NPTS = NPTS+2
C SET THIS AS LAST
360	GOTLST = .TRUE.
	LAST1 = NEBUF(IV+1,IB+1-NWAY)
	LAST2 = NEBUF(IV+1,IB+NWAY)
	LSTWAY = NWAY
	LSTPOL = NPOL
	GOTO 380
C BAD SCAN LINE
374	GOTLST = .FALSE.
C
380	IB = IT+1
	IF (IB .LE. INE) GOTO 320
	IF (NPTS .LE. 0) GOTO 420
	PHERR = PHERR/NPTS
	IPHASE = PHA(IV)
	NPHERR = PHERR+SIGN(0.5, PHERR)
	IF (     GOTPHR) CALL TXLTO(IPHASE*15, NPHERR)
	IF (.NOT.GOTPHR) CALL TXMTO(IPHASE*15, NPHERR)
C add point to buffer
	IF (NMINUS.GE.10 .AND. TCCT.EQ.21) GOTO 420
	IF (TCCT   .LE. 20) GOTO 410
	DO 405 I = 1,20
	  TCBUF(2,I) = TCBUF(2,I+1)
	  TCBUF(3,I) = TCBUF(3,I+1)
405	  CONTINUE
	TCCT = TCCT-1
410	TCCT = TCCT+1
	TCBUF(1,TCCT) = 1
	TCBUF(2,TCCT) = IPHASE
	TCBUF(3,TCCT) = NPHERR
	IF (NPHERR .LE. 0) NMINUS = NMINUS+1
420	GOTPHR = NPTS.GT.0
	PHA(IV) = PHA(IV)+DPHA
	IF (PHA(IV) .LT. MAXPHA) GOTO 100
C choose automatically
450	IF (TCCT .LT. 21) GOTO 460	! can't
	CALL LINFIT(TCBUF,1,TCCT,1,2,3,1.0,TC,TM)
	PHA(IV) = -TC/TM
	GOTO 470
C let operator choose
460	CALL TXCUR
	CALL TXLOC(M,IPHASE,IW)
	PHA(IV) = IPHASE/15.
C display chosen result
470	PHA(IV) = AINT(PHA(IV)+.5)+.1
	IPHASE = PHA(IV)*15.0 + 0.5
	CALL TXMTO(IPHASE,0)
	CALL TXMBY(0,30)
	CALL TXLBY(0,-60)
	CALL TXMTO(0,300)
	CALL TXEND
	GOTO 900
 
C Time scans for varying IWID (for new SSG)

500	IWID = 1
	CALL TXORGN(0,0)
	CALL TXSCLE(1.0)
	CALL TXMTO(0,0)
510	TIME = SECNDS(0.0)
	DO 550 I = 1,5
	  CALL MOVTO(XS,YS)
	  CALL SCANBY(IDX,IDY,1)
	  CALL SCSET(0)
520	  INE = NEGET(NEBUF,-NESIZE)
	  IF (INE .GT. 0) GOTO 520
550	  CONTINUE
	TIME = SECNDS(TIME)
	NTIM = TIME*2000.
	CALL TXLTO(IWID*16,NTIM)
	IWID = IWID+3
	IF (IWID .LE. 63) GOTO 510
	CALL TXMTO(IWIDSV*16,0)
	CALL TXLBY(0,700)
	CALL TXCUR
	CALL TXLOC(ICH,IWID,M)
	IWID = IWID/16.+0.5
	GOTO 900

C DERIVE SOME USEFUL INFO FROM THE SCAN
 
600	NSCAN = 0
	NLINES = 0
	NEDGES = 0
	MULLIN = 0
	MULEDG = 0
	NWHITE = 0
C READ IN BATCHES OF POINTS
610	INE = NEGET(NEBUF,-NESIZE)
	IF (INE .LE. 0) GOTO 660
C PROCESS EACH BATCH
	DO 650 I=1,INE
	  IW = NEBUF(1,I)
	  M = 0
	  IF (IW .LT. "40000) GOTO 615
C SUBSEQUENT HIT ON A SCAN LINE
	  M = 1
	  IW = IW-"40000
	  GOTO 620
C 1ST. HIT THEREFORE ANOTHER NON-EMPTY SCAN LINE
615	  NSCAN = NSCAN+1
C DECIDE ON TYPE OF ENCOUNTER
620	  IF(IW.EQ."37770 .OR. IW.EQ."37774) GOTO 630
C LINE ENCOUNTER
	  NLINES = NLINES+1
	  MULLIN = MULLIN+M
	  NWHITE = NWHITE+IW
	  GOTO 650
C EDGE ENCOUNTER
630	  NEDGES = NEDGES+1
	  MULEDG = MULEDG+M
C
650	  CONTINUE
	GOTO 610
C GET EXPECTED NUMBER OF SCAN LINES
660	M = IDX
	IF (IDIR .EQ. 0) M = IDY
	M = IABS(M)/IPIT + 1
	GOTO (900,900,700,760,680),N
C white area
680	M = (NWHITE)/M
	GOTO 710
 
700	IF (IMOD .EQ. 1) M = (NLINES*100.)/M
	IF (IMOD .EQ. 0) M = (NEDGES* 50.)/M
C draw graph on Tek
710	CALL TXLTO(ITLO,M)
	ITLO = ITLO+10
	IF (ITLO .LT. 255) GOTO 100
C GET VALUE FOR ITLO
CCC	IF (IMOD .EQ. 0) GOTO 25
CCC720	IF (IMOD .EQ. 0) GOTO 730
720	CALL TXCUR
	CALL TXLOC(M,ITLO,IW)
730	CALL TXEND
	GOTO 900
C
760	M = (NLINES*50.)/M
	CALL TXLTO(IFL*12,M)
	IFL = IFL+1
	IF (IFL .LE. 15) GOTO 45
780	CALL TXCUR
	CALL TXLOC(M,IFL,IW)
	REDFOC = IFL/12
	CALL FLEVEL(REDFOC)
	CALL TXEND
	GOTO 900
 
C Calculate software phase correction
C Top bit of width word used for direction info
C Only of use with new SSG

800	PHERR = 0
	NPTS  = 0
	IUTB  = 1	! enable direction
	GOTLST = .FALSE.
C extract points singly
810	INE = NEGET(ENCBUF,1)
	IF (INE .LE. 0) GOTO 860
	IW = ENCBUF(W,1).AND."37777
C 1st encounter of line ?
	IF ((ENCBUF(W,1).AND."040000).NE.0) GOTO 830
	NWAY = 0
	IF ((ENCBUF(W,1).AND."100000).NE.0) NWAY = 1
	NPOL = 0
	IF (IW .EQ. "37770) NPOL = -1
	IF (IW .EQ. "37774) NPOL =  1
	IF (.NOT.GOTLST) GOTO 820
C opposite direction ?
	IF (NWAY .EQ. LSTWAY) GOTO 830
C line in line mode or edge in edge mode ?
	IF ((IMOD.EQ.0) .XOR. (NPOL.NE.0)) GOTO 830
C same polarity ?
	IF (NPOL .NE. LSTPOL) GOTO 830
C all present and correct - get offset error
	ID1 = ENCBUF(IV,1) - LASTV
	IF (NWAY .NE. 0) ID1 = -ID1
	PHERR = PHERR+ID1
	NPTS = NPTS+1
C record as previous encounter
820	GOTLST = .TRUE.
	LSTWAY = NWAY
	LSTPOL = NPOL
	LASTV  = ENCBUF(IV,1)
	GOTO 810
C bum encounter
830	GOTLST = .FALSE.
	GOTO 810

C processed scan - output results
860	IF (NPTS.GT.0) PHERR = PHERR/NPTS
	CALL WRITEF ('Phase error %F0.2',PHERR)
	GOTO 900

C WAY OUT
 
900	IMOD = IMODSV		! restore status quo
	IUTB = 0
	RETURN
C
	END
