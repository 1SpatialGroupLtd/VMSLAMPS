C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1980-02-21 11:10:00.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE AUTRNG(RC)
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C
C Author Paul Hardy
C
C last edited 13/i/78
C
C Automatic digitisation of small rings routine.
C
***	COMMON/PARAMS/
C
***	COMMON/RSE/
***	COMMON/SCCORR/
***	COMMON/SCPARM/
***	COMMON/LKPARM/
***	COMMON/LINKS/
***	COMMON/RINGS/
C
	INTEGER RC   ! is return code
C
C w/s
	LOGICAL*1 TX,GONE(4)
	INTEGER ID(2),IV,IU
	INTEGER ICHAIN(4),LR(4)
	REAL C(2),S(2),XX(2),POS(2,4)
C
	IMODSV=IMOD
	IMOD=0
	TX=.FALSE.
	IF(RC.EQ.1) TX=.TRUE.
	RC=0  !  assume success
	CALL CSRD(C(X),C(Y))
	DO 4 I=1,7
	  RING(X,I)=C(X)
4	  RING(Y,I)=C(Y)
C
C Repeat for both scan directions
	DO 500 L=1,2
	IU=L
	IV=3-IU
	IDIR=2-IU
	WID=IWID*CR(IV)*WAR
	ID(IV)=0
	ID(IU)=WID
	CALL DISMOD(0)
	S(IU)=C(IU)-WID/2.
	S(IV)=C(IV)
	CALL MOVETO(S(X),S(Y))
C now set up and do scan
	CALL SCANBY(ID(X),ID(Y),1)
	NEGOT = 0
	CALL SCSET(0)
C chain and grow
	CALL SETCHN
	CALL GROW(CHWT,RGROW,IU,IV,EDGING)
C convert to lists
	NODTOP=1
	DO 10 I=1,MAXCHN
10	  CALL CHNLST(I)
C inspect chains
	NCHN=0
	DO 14 I=1,MAXCHN
	  J=CHAIN(I)
	  IF(J.EQ.0) GOTO 14
	  NPTS=0
12	    NPTS=NPTS+1
	    J=NXT(J)
	    IF(J.NE.0) GOTO 12
	  IF(NPTS.GE.LIMIT(11)) GOTO 13
	  CHAIN(I)=0
	  GOTO 14
13	  NCHN=NCHN+1
	  IF(NCHN.GT.4) GOTO 14
	  ICHAIN(NCHN)=I
14	  CONTINUE
	IF(NCHN.EQ.0) GOTO 9100  ! nothing seen
	IF(NCHN.NE.4) GOTO 9400
C find mid points of all four chains
	DO 18 I=1,4
	  MID=LENGTH(ICHAIN(I))/2
	  J=CHAIN(ICHAIN(I))
	  DO 16 K=1,MID
16	    J=NXT(J)
	  POS(X,I)=NEBUF(X+1,J)+S(X)
	  POS(Y,I)=NEBUF(Y+1,J)+S(Y)
18	  CONTINUE
C now sort into order of left to right
	DO 20 I=1,4
20	  GONE(I)=.FALSE.
	DO 24 I=1,4
	  PMIN=1.0E20
	  DO 22 J=1,4
	    IF(GONE(J)) GOTO 22
	    IF(POS(IV,J).GE.PMIN) GOTO 22
	    PMIN=POS(IV,J)
	    MINP=J
22	    CONTINUE
	  LR(I)=MINP
	  GONE(MINP)=.TRUE.
24	  CONTINUE
C take mean of left two and right two to give points on diameter.
C also mean of end of left hand pair
	DO 26 K=1,2
	  RING(K,L+4)=(POS(K,LR(1))+POS(K,LR(2)))/2.
	  RING(K,L+1)=(POS(K,LR(3))+POS(K,LR(4)))/2.
	  RING(K,7-L*3)=
     &   (FLOAT(NEBUF(K+1,NODE(LAST(ICHAIN(LR(1))))))+S(K)
     &           +FLOAT(NEBUF(K+1,NODE(LAST(ICHAIN(LR(2))))))+S(K))/2.
26	  CONTINUE
C end of main loop for scan direction.
500	CONTINUE
C force last point to first point
	RING(X,7)=RING(X,1)
	RING(Y,7)=RING(Y,1)
C and draw results if requested or error
9000	IMOD=IMODSV
	IF(.NOT.TX) RETURN
	CALL RDABO
	CALL TXCLR
	CALL DRWSCN(ID,IU,IV)
	CALL DRWPTS(IU,IV)
	CALL DRWCHN(0)
	DO 9002 I=1,7
	  CALL TXMTO(IFIX(RING(X,I)-S(X)),IFIX(RING(Y,I)-S(Y)))
	  CALL TXMBY(-10,-10)
	  CALL TXLBY(20,20)
	  CALL TXMBY(-20,0)
	  CALL TXLBY(20,-20)
9002	  CONTINUE
9005	CALL TXMTO(0,500)
	CALL TXEND
	RETURN
C error returns
C longest line too short or nothing seen
9100	RC=-1
	GOTO 9900
C confused
9400	RC=-3
	GOTO 9900
C general error
9900	GOTO 9000
C
	END
