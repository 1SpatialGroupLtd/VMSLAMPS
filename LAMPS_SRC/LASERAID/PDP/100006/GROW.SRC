C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1980-02-21 12:23:18.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE GROW(CHWT,DDVMAX,IU,IV,EDGING)
C
C Copyright Laser-Scan Laboratories Ltd,Cambridge,England
C
C Author M.C.Fulford
C
C	Last edited 9/iii/79
C
C To structure the points in /RSE/ into chains
C new version for coping with scratches on the film
C
***	COMMON/PARAMS/
***	COMMON/SCPARM/
***	COMMON/RSE/
***	COMMON/LINKS/
C
	REAL CHWT(3)	! weights
	REAL DDVMAX	! proximity
	INTEGER IU,IV	!  axes
	LOGICAL*1 EDGING ! edge mode allow
C
C w/s
	INTEGER PNT
	INTEGER DW,DU,DV,DE1,DE2
	REAL NEWGRD, NWVGRD
	LOGICAL*1 EDGCON
C
	LOGICAL NEBIT	! function
C
	RETRY = .TRUE.
10	IF (.NOT.NEBIT(NELO,NEHI)) RETURN
	DO 90 PNT=NELO,NEHI	! for each point
	  IW = IAND(NEBUF(1,PNT),"37777)
C See which chain it belongs to (if any)
	  J = 0
20	  J = J+1		! look at all chains
	  K = CHAIN(J)
	  IF (K .LE. 0) GOTO 40
	  LASTW = (NEBUF(1,K).AND."37777)
	  DW = IW - LASTW
C ignore if mixed line and edge or different edges
C or edge and not edging
	  IF (((IW.GE."37770).OR.(LASTW.GE."37770)).AND.
     *         (.NOT.EDGING.OR.(DW.NE.0))) GOTO 20
C compare the 2 points
	  DU = NEBUF(IU+1,PNT)-NEBUF(IU+1,K)
	  IF (DU .EQ. 0) GOTO 20	! not along scan line
	  DV = NEBUF(IV+1,PNT)-NEBUF(IV+1,K)
	  IF (ABS(DU) .GT. IPIT*CHWT(2)) GOTO 20
C possible match
	  EDGCON = IW.GE."37770
C check overlap
	  IF (EDGCON.AND.ABS(DV).GT.DDVMAX*IPIT) GOTO 20
	  IF (.NOT.EDGCON .AND.
     *      ((ABS(DV+DW/2.).GT.DDVMAX*IPIT).OR.
     *       (ABS(DV-DW/2.).GT.DDVMAX*IPIT))) GOTO 20
C check V gradient
	  NWVGRD = DV/DU
	  IF (LENGTH(J).GT.1 .AND.
     *      (ABS(NWVGRD-VGRAD(J)).GT.CHWT(3)) ) GOTO 20
	  IF (EDGCON) GOTO 35
C check width gradient - if line
	  NEWGRD = DW/DU
	  IF ((LENGTH(J).GT.1) .AND.
     *         (ABS(NEWGRD-WIDGRD(J)).GT.CHWT(1))) GOTO 20
C Eureka ! it fits !
35	  IF(LENGTH(J).GT.1) GOTO 37
	  WIDGRD(J) = NEWGRD	! OK - update gradient
	  VGRAD(J)  = NWVGRD
	  GOTO 80		! link in the new point
37	  WIDGRD(J) = (WIDGRD(J) + NEWGRD)/2.  ! trailing mean
	  VGRAD(J) = (VGRAD(J) + NWVGRD)/2.
	  GOTO 80
C belonged to none so create a new chain
40	  IF (J .LT. MAXCHN) GOTO 70
C no room for more - remove smallest chain
	  J = 1
	  DO 50 K=1,MAXCHN-1
	    IF(LENGTH(K).LT.LENGTH(J))J=K
50	    CONTINUE
C initialise new chain
70	  CHAIN(J) = 0
	  LENGTH(J) = 0
C add the point to a chain
80	  NXT(PNT) = CHAIN(J)
	  LENGTH(J) = LENGTH(J)+1
	  CHAIN(J) = PNT
C point dealt with
90	  CONTINUE	   ! look at the others
	GOTO 10		! for another batch
C
	END
