C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1980-02-21 11:54:26.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION SMLFTR (ST,U,V)
C
C Copyright Laser-Scan Laboratories Ltd,Cambridge,England
C
C Author M.C.Fulford
C
C	Created 22.v.78
C	Last edited 30/iv/79
C
C To look at the information provided by the fork
C data & to decide if we can detect a closed feature in it.
C
C The points on the feature are put into the MP list.
C
***	COMMON/PARAMS/
C
C
	REAL ST(2)		! start of scan vector
	INTEGER U,V		! scan direction 
C
***	COMMON/RSE/
***	COMMON/LINKS/
***	COMMON/FORKS/
***	COMMON/MPEP/
***	COMMON/BLG/
C
	INTEGER FSTFRK		! 1st fork of our putative small feature
	INTEGER THSFRK		! fork being looked at
	INTEGER TYP		! its type
	INTEGER STEM		! & its stem chain
	INTEGER BRONCH		! branch going Out of a fork
	INTEGER BRINCH		! branch going In  to a fork
	INTEGER WAYIN		! how we entered the fork
	INTEGER WAYOUT		! & how we should leave it
	LOGICAL*1 ANOTHR	! had more than one fork
	INTEGER NN(2)		! ends of branch (for output)
				! or points at a stem
	INTEGER PNT(2)		! point being assembled
	INTEGER NSTEM(0:2)	! point in stem
	INTEGER VWAY		! V-direction across fork
	INTEGER WW		! direction of branch
C
C
	DO 400 FSTFRK = 1,MAXFRK	! try all forks
	  NMP(1) = 0
	  INDEX(1) = 0		! clear the MP list
	  THSFRK = FSTFRK
	  ANOTHR = .FALSE.
	  WAYIN = 2		! arbitary choice
	  IF (FORK(WAYIN,THSFRK).EQ.0) GOTO 400	! chain missing
C here for another fork in the feature
100	  WAYOUT = 5-WAYIN
	  TYP = FRKTYP(THSFRK)
	  IF (TYP.NE.1 .AND. TYP.NE.2) GOTO 400	! strange fork
	  STEM = FORK(1,THSFRK)
	  IF (STEM .EQ. 0) GOTO 400		! stem missing
	  BRONCH = FORK(WAYOUT,THSFRK)
	  IF (BRONCH .EQ. 0) GOTO 400		! branch missing
	  IF (ENDFRK(TYP,STEM).NE.0) GOTO 400	! stem's joined
	  IF (ANOTHR.AND.(THSFRK.EQ.FSTFRK))GOTO 500 ! feature closed
	  N1 = NODE(FIRST(STEM))		! make a point in stem
	  N2 = NODE( LAST(STEM))
	  NSTEM(W) = ((NEBUF(W+1,N1).AND."37777) +
     *                (NEBUF(W+1,N2).AND."37777))/2
	  NSTEM(U) = (NEBUF(U+1,N1)+NEBUF(U+1,N2))/2.0
	  NSTEM(V) = (NEBUF(V+1,N1)+NEBUF(V+1,N2))/2.0
C got point in middle of stem - construct two points
	  BRINCH = FORK(WAYIN,THSFRK)
	  NN(1) = NODE(FIRST(BRINCH))	! assume divergence
	  NN(2) = NODE(FIRST(BRONCH))
	  IF (TYP .EQ. 1) GOTO 150
	  NN(1) = NODE(LAST(BRINCH))	! unless convergence
	  NN(2) = NODE(LAST(BRONCH))
150	  VWAY  = ISIGN(1,NEBUF(V+1,NN(2))-NEBUF(V+1,NN(1)))
	  DO 170 I = 1,2
	    PNT(U)=NSTEM(U)
	    N = NSTEM(W)-(NEBUF(1,NN(I)).AND."37777)
	    PNT(V) = NSTEM(V)+(I*2-3)*VWAY*MAX(0,N)/2
	    CALL BUNCH(ST(X)+PNT(X),ST(Y)+PNT(Y))
	    IF (NMP(1) .GE. MPLIM) GOTO 400	! too big
170	    CONTINUE
	  THSFRK = ENDFRK(3-TYP,BRONCH)
	  IF (THSFRK.EQ.0) GOTO 400		! branch's not joined
	  WAYIN = 0
	  DO 200 I = 2,3
	    IF(FORK(I,THSFRK).EQ.BRONCH)WAYIN = I
200	    CONTINUE
	  IF (WAYIN .EQ. 0) GOTO 400		! we're not joined to it
	  NN( TYP ) = FIRST(BRONCH)
	  NN(3-TYP) =  LAST(BRONCH)
	  WW        = 3-TYP-TYP
	  DO 300 J = NN(1),NN(2),WW
	    I = NODE(J)
	    CALL BUNCH(ST(X)+NEBUF(X+1,I),
     *                 ST(Y)+NEBUF(Y+1,I))
	    IF (NMP(1) .GE. MPLIM) GOTO 400	! too big
300	    CONTINUE
	  ANOTHR = .TRUE.
	  GOTO 100
C try another fork
400	  CONTINUE
C no feature found
	SMLFTR = .FALSE.
	NMP(1) = 0
	INDEX(1) = 0
	RETURN
C success
500	SMLFTR = .TRUE.
	CALL BUNCH(MP1(X,1),MP1(Y,1))		! close it
	CALL FLUSH
	RETURN
	END
