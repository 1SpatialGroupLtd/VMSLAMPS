C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1980-02-21 12:36:38.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE NEWVEC(NTYPE,NEWDIR)
C
C Copyright Laser-Scan Laboratories Ltd,Cambridge,England
C
C Author M.C.Fulford
C
C	Created 28.iv.77
C	Last edited 30/x/79
C
C Decide where to put the next scan vector, by looking
C at the end of the digitised line. However, if
C there is a segment in hand, or if the previous
C connection was an edge, then use it as a guide.
C
***	COMMON/PARAMS/
C
	INTEGER NTYPE		! type of prediction required
C		1 - straight ahead
C		2 - twitch about 45 degrees
C		3 - look this way
C		4 - look that way
C		5 - look back
C If the scan can't be twitched, then NTYPE is incremented
C and the next option is chosen.
C
	INTEGER NEWDIR		!  the IDIR to be used, -1 => don't care
C
***	COMMON/LKPARM/
***	COMMON/SCPARM/
***	COMMON/LINKS/
***	COMMON/LKFOLL/
***	COMMON/RSE/
C
C W/S
	INTEGER THIS(2),THAT(2) ! the 2 points
	INTEGER IDU
	REAL NEW(2)		!  the new scan's components
	REAL D(2),DR
C
C
C get two points to represent the line
	CALL GTLST2(START,10000.,LIMIT(8),NGT2,THIS,THAT)
10	IF (CHNSEL.EQ.0) GOTO 40  ! connection in hand ?
C use the connection to get new direction
	N=CONNCT(2,CHNSEL)
	NFST=NODE(FIRST(N))
	NLST=NODE(LAST(N))
	D(X)=NEBUF(X+1,NLST)-NEBUF(X+1,NFST)
	D(Y)=NEBUF(Y+1,NLST)-NEBUF(Y+1,NFST)
	GOTO (50, 60, 20, 30, 35),CONNCT(4,CHNSEL)+1
	GOTO 50		! trap odd cases
C Wide line - are we near end of scan ?
20	IDU=ID(IU)-NEBUF(IU+1,NLST)
	IF(IABS(IDU).LT.LIMIT(1)*IPIT) GOTO 60	! yes - predict normally
	D(IV)=-CONNCT(1,CHNSEL)			! no - look sideways
	D(IU)=0
	GOTO 60
C Apex - look back along it at the two incoming branches
30	D(X) = -D(X)
	D(Y) = -D(Y)
	GOTO 60
C Prediction (from FUMBLE)
35	THIS(X) = NEBUF(X+1,NFST)
	THIS(Y) = NEBUF(Y+1,NFST)
	GOTO 60
C No connection - was last connection an edge ?
40	IF(LSTSEL.EQ.0.OR.NTYPE.NE.1) GOTO 50
	IF (CONNCT(4,LSTSEL) .NE. 1) GOTO 50 ! not edge
C it was - predict sideways on basis of edge
	D(IV)=CONNCT(1,LSTSEL)
	D(IU)=0
	GOTO 60
C
C predict on basis of local trends, deduced from two points
50	IF (NGT2 .LT. 4) GOTO 170	! couldn't get trends
	D(X) = THIS(X)-THAT(X)
	D(Y) = THIS(Y)-THAT(Y)
C
C All routes join here, having set up D()
C
60	DR = SQRT(D(X)*D(X)+D(Y)*D(Y))
	D(X) = D(X)/DR	! normalise
	D(Y) = D(Y)/DR
70	NEWDIR = -1
	GOTO (80,80,110,100,140),NTYPE
	NTYPE = 1	! illegal code
	GOTO 10		! start again
C
C straight,twitch
C
80	NEW(X) = D(X)
	NEW(Y) = D(Y)
	IF (NTYPE .NE. 2) GOTO 150 ! straight
C near 45 degrees ?
	IF (ABS(ABS(D(X))-ABS(D(Y))) .LE. LIMIT(16)) GOTO 90
C no - try next
	NTYPE = NTYPE+1
	GOTO 70
C yes so ...
90	NXTID(X) = NEW(X)*IDSIZE
	NXTID(Y) = NEW(Y)*IDSIZE
	CALL SETDIR(NXTID,NEWDIR,N,M)
	NEWDIR = 1-NEWDIR	! ... twitch
	GOTO 160
C
C Look that way
100	PREWAY = .NOT.PREWAY	! reset default direction
C
C Look this way
110	IF (PREWAY) GOTO 130	! look right ..
C .. or ..
C look left
C
120	NEW(X) = -D(Y)
	NEW(Y) =  D(X)
	GOTO 150
C
C Look right
C
130	NEW(X) =  D(Y)
	NEW(Y) = -D(X)
	GOTO 150
C
C look back
C
140	NEW(X)=-D(X)
	NEW(Y)=-D(Y)
	GOTO 150
C
150	NXTID(X) = IDSIZE*NEW(X)
	NXTID(Y) = IDSIZE*NEW(Y)
160	NEXT(X) = START(X)+THIS(X)+IPIT*NEW(X)
	NEXT(Y) = START(Y)+THIS(Y)+IPIT*NEW(Y)
170	RETURN
	END
