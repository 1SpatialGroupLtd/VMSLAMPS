C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1980-02-21 11:29:40.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	PROGRAM LXMAIN
C
C Copyright Laser-Scan Laboratories Ltd,Cambridge,England
C
C Author M.C.Fulford
C
C	Created 3.xi.78
C	Last edited 21/xi/79
C
C To drive the check mode part of LASERAID to enable:
C	1) engineers to have a simple program
C	2) other people to use the computer when simple
C	   tests are being done.
C
***	COMMON/PARAMS/
C
**	IF	ACTP
	PARAMETER NCHKFB = 28
**	IFF
	PARAMETER NCHKFB = 20
**	ENDC
C
	INTEGER RDCOMM		! function
C
C
***	COMMON/MASTER/
***	COMMON/RSE/
**	IF	ACTP
***	COMMON/LINKS/
***	COMMON/LAXPAR/
**	ENDC
***	COMMON/SCPARM/
***	COMMON/SCCORR/
***	COMMON/SCWLIM/
***	COMMON/ISCBUF/
***	COMMON/LDREFR/
***	COMMON/TEXTC/
***	COMMON/FFCOM/
***	COMMON/NUMC/
***	COMMON/LDXPAR/
***	COMMON/WRITEC/
***	COMMON/IFFHAN/
	COMMON/THKPAR/SEP,SPOT
C
C W/S
	INTEGER NSCP(10)
	REAL RSCC(7)
C
	EXTERNAL IFFRET	! IFF error routine
	EXTERNAL LAXCM	! command table
C
	INTEGER CWD,NLIN
	LOGICAL*1 BOOL
	REAL ST(2),SEPL(2),VSTX,VSTY
	INTEGER ID(2)
**	IF	ACTP
	REAL LAXREL(8)
	REAL TIME	! for various commands
**	ENDC
	INTEGER NUMABO	! number of successive FB16 presses
	INTEGER COMSRC	! where commands come from:
C				1 - patch file
C				2 - keyboard/FBs
	LOGICAL*1 WHLINE
C
	EQUIVALENCE (NSCP(1),IMOD),(RSCC(1),WAR)
**	IF	ACTP
	EQUIVALENCE (LAXREL(1),CHWT(1))
**	ENDC
C
C
C minor settings
	WX = 57.	! cursor limit
	NUMABO = 0
	WHLINE = .FALSE.
C device initialisations
	LDLUN = 2
	LDEFN = LDLUN
	CALL ASNLUN(TTILUN,'TI',0)
	CALL ASNLUN(TTOLUN,'TI',0)
	CALL ASNLUN(SAVLUN,'SY',0)
	CALL ATTACH
	FFILUN = TTILUN		! for TX drawing routines
	FFIEFN = TTIEFN
	FFOLUN = TTOLUN
	FFOEFN = TTOEFN
C announce who we are
	CALL WRITEF('Laseraid exerciser of 21-Nov-79')
C get HRD set up
	CALL LDINIT("177)
	CALL TRSET(1)		! we work in counts
	CALL UNITS(0.001)
	CALL SCBUF(IBUF,ISIZE)	! DMA buffer
	CALL CHSIZE(400.,400.,0.)
**	IF	ACTP
C set up 9900
	CALL INIT99
**	ENDC
C IFF input (for patch file)
	CALL IFFTDY(IFFRET)
	CALL WRITEF('SY:[100,1]LAX.IFF;1')
	CALL IFFOPN(SAVLUN,NUM(1))
	CALL IFFRWD
	COMSRC = 1
C
C clear refresh picture
C
100	NQUIT = 1
	DCPTR = -1
	TXTPTR = -2
110	CALL DISMOD(1)
	IF (COMSRC .EQ. 1) CALL MOVTOC
	IF (COMSRC .EQ. 1) CALL CHARS('Lax')
	IF (COMSRC .EQ. 2) CALL CURSOR
C get next line
120	GOTO (130,150),COMSRC
C next CH entry from file
130	CALL IFFNXC('CH',IELEN)
	IF (IERCD .NE. 0) GOTO 140
	IF (IELEN.LE.0) GOTO 140
	CALL EIHR(TXTBUF,IELEN,1)	! into text buffer
	TXTPTR = IELEN*2
	IF (TXTBUF(TXTPTR).EQ.0) TXTPTR = TXTPTR-1
	TXTBUF(TXTPTR+1) = 0
	DCPTR = 1
	GOTO 160
C end of patch file
140	CALL WRITEF('Initialisation complete')
	COMSRC = 2
	GOTO 100
C read line from terminal
150	DCPTR = -1
	TXTPTR = -2
C get commands from line of text
160	CALL FBWT16("134627)
	CWD = RDCOMM(LAXCM)
	IF (CWD) 180,170,190
C end of line or error
170	IF (DCPTR .LT. 0) GOTO 120
C syntax error
180	CALL WRITEF('Eh?')
	GOTO 100
 
C deal with commands
 
190	IF (CWD .NE. 16) NUMABO = 0
	IF (CWD .GT. NCHKFB) GOTO  420
	N = 0
	GOTO (200,260,220,160,
     *        270,160,160,410,
     *        250,160,160,410,
     *        240,235,160,470,
     *        350,230,490,232
**	IF	ACTP
     *        ,500,210,365,368,380,390,400,405
**	ENDC
     *        ),CWD
 
**	IF	ACTP
C report elapsed time, then get next command
195	CALL WRITEF(' %F0.4 seconds',TIME)
	GOTO 160
**	ENDC

C START OF MOVE
 
200	CALL CSRD(ST(X),ST(Y))
	CALL DISMOD(1)
	CALL MOVTO(ST(X),ST(Y))
	CALL LINTOC
	NQUIT = 2
	WHLINE = .FALSE.
	GOTO 160
 
C Various graphs & functions
 
**	IF	ACTP
210	N = N+1		! scan
**	ENDC
220	N = N+1		! draw white line
230	N = N+1		! error checking
232	N = N+1		! scan timing
235	N = N+1		! threshold - area
240	N = N+1		! focus graph
250	N = N+1		! threshold - lines
260	N = N+1		! OF() & CR() graph
270	N = N+1		! phase graph
 
280	IF (NQUIT .EQ. 1) GOTO 290
	CALL CSRD(XE,YE)
	ID(X) = XE-ST(X)
	ID(Y) = YE-ST(Y)
	IDIR = 0
	IF (IABS(ID(Y)) .LT. IABS(ID(X))) IDIR = 1
	IV = IDIR+1
	IU = 2-IDIR
290	IF (ID(X).EQ.0.AND.ID(Y).EQ.0) GOTO 300
	IF (N .EQ. 7) GOTO 310
	IF (N .EQ. 8) GOTO 320
**	IF	ACTP
	IF (N .EQ. 9) GOTO 360
**	ENDC
CCC	IPIT=5
	IF (N.EQ.2.AND..NOT.WHLINE) GOTO 300
	CALL PEER(N,ST(X),ST(Y),ID(X),ID(Y),IV)
	GOTO 100
 
300	CALL WRITEF('Bad vector')
	GOTO 100
 
C Check information from digitiser
C keep looking until an error is found, or FB16 pressed.
 
310	CALL CHKINF(ST(1),ID(1),NERRS)
	IF (NERRS .EQ. 0) GOTO 310
	GOTO 100
 
 
C Draw white line
 
320	CALL DISMOD(0)
	SEPL(IU) = 0.
	SEPL(IV) = SEP*1000.
	NLIN = IWID*CR(IV)*WAR/SEPL(IV)
C Parameters for white line on P/C set up now
	DO 340 I = 1,2
	   VSTX = ID(X)*2.
	   VSTY = ID(Y)*2.
	   CALL MOVETO(ST(X)-ID(X)/2.+SEPL(X)*3.,
     *                   ST(Y)-ID(Y)/2.+SEPL(Y)*3.)
	   DO 330 J = 1,NLIN
	      CALL DRAWBY(VSTX,VSTY)
	      CALL MOVEBY(SEPL(X),SEPL(Y))
	      VSTX = -VSTX
	      VSTY = -VSTY
330	      CONTINUE
	   SEPL(IV) = -SEPL(IV)
340	   CONTINUE
C
	WHLINE = .TRUE.
	GOTO 100
C
C White line drawn
 
 
 
C adjust refresh
 
350	CALL RFAJST
	GOTO 160
**	IF	ACTP
 
C
C SCAn
C
360	CALL DISMOD(0)
	CALL MOVTO(ST(X),ST(Y))
	CALL SCANBY(ID(X), ID(Y), 1)
	CALL SCSET(0)
	NEOLD = 0
	NEGOT = 0
	GOTO 100
C
C GROw using PDP-11
C
C GRO - the new way
365	BOOL = .TRUE.
	GOTO 371
C GRM - the old way
368	BOOL = .FALSE.
C
371	TIME = SECNDS(0.0)
	DO 375 I = 1,64
	CALL SETCHN
	IF (     BOOL) CALL GROW(CHWT, RGR, IU, IV, .TRUE.)
	IF (.NOT.BOOL) CALL GROLD(CHOLD,ROLD,IU,IV, .TRUE.)
375	CONTINUE
	TIME = SECNDS(TIME)
	TIME = TIME/64.
	GOTO 195
C
C GRN - grow using the 9900
C
380	CALL GROW99(CHWT, RGR, IU, IV, TIME)
	GOTO 195
C
C DRP - draw points
C
390	CALL DRWSCN(ID,IU,IV)
	CALL DRWPTS(IU,IV)
	GOTO 160
C
C DRC -  draw chains
C
400	CALL DRWSCN(ID,IU,IV)
	CALL DRWCHN(0)
	GOTO 160
C
C NUT - call NUTS (assuming they're there)
C
405	CALL INT990
	GOTO 150
**	ENDC

C CLO or CUR - facsimile (with or without cursor)
 
410	CALL FAX(CWD .EQ. 8,IWID,IPIT)
	GOTO 100
 
C parameter setting commands
 
420	N = CWD-NCHKFB
	IF (N .LE. 10) GOTO 430
	N = N-10
	IF (N .LE. 7) GOTO 440
	N = N-7
	IF (N .LE. 1) GOTO 445
	N = N-1
	IF (N .LE. 1) GOTO 450
	N = N-1
**	IF	ACTP
	IF (N .LE. 8) GOTO 460
**	ENDC
	GOTO 180
 
C SET /SCPARM/
430	NSCP(N) = INTARG
	GOTO 160
C SET /SCCORR/
440	RSCC(N) = REALA1
	GOTO 160
C SET /SCWLIM/
445	IF (NUMINT .LE. 0) GOTO 160
	DO 447 I = 1,MIN(NUMINT,4)
	  LIMWID(I) = INTAR(I)
447	  CONTINUE
	GOTO 160
C /MASTER/
450	REDFOC = INTARG
	CALL DISMOD(0)
	CALL FLEVEL(REDFOC)
	GOTO 110
**	IF	ACTP
C /LAXPAR/
460	LAXREL(N) = REALA1
	GOTO 160
**	ENDC
C
C ABORT - exit on 2nd command
C
470	NUMABO = NUMABO+1
	IF (NUMABO .GT. 1) GOTO 480
	CALL WRITEF('Press FB16 again to exit')
	GOTO 160
C close down
480	CALL IFFCLR	! re-write patch file
	CWD = 0
C write /SCPARM/,/SCCORR/ & /SCWLIM/
490	CALL EXPAND(
     *'MOD%N FRQ%N WID%N PIT%N WLO%N WHI%N TLO%N TSW%N TMS%N',
     *   IMOD,IFRQ,IWID,IPIT,IWLO,IWHI,ITLO,ITSW,ITMS)
	CALL ISSUE(CWD,NUM)
	CALL EXPAND('WAR %F6.2 CRX %F6.2 CRY %F6.2 FLE %N',
     *     WAR,CRX,CRY,REDFOC)
	CALL ISSUE(CWD,NUM)
	CALL EXPAND('OFX%F5.1 OFY%F5.1  PHX%F6.2 PHY%F6.2',
     *              OFX,OFY,PHX,PHY)
	CALL ISSUE(CWD, NUM)
	CALL EXPAND('EYE %(4 %N%)',LIMWID(1),LIMWID(2),
     *                            LIMWID(3),LIMWID(4))
	CALL ISSUE(CWD, NUM)
	IF (CWD .NE. 0) GOTO 160
**	IF	ACTP
C write /LAXPAR/
500	CALL EXPAND('CWW %F0.2 CWU %F0.2 CWV %F0.2 RGR %F0.2',
     *     CHWT(1),CHWT(2),CHWT(3),RGR)
	CALL ISSUE(CWD,NUM)
	CALL EXPAND('OWW %F0.2 OWU %F0.2 OWV %F0.2 ORG %F0.2',
     *      CHOLD(1),CHOLD(2),CHOLD(3),ROLD)
	CALL ISSUE(CWD,NUM)
	IF (CWD .NE. 0) GOTO 160
**	ENDC
C
C finished
C
	CALL IFFCLO(SAVLUN)
	CALL FBWT16(0)
	CALL LDINIT(0)
	CALL WRITEF('*** BYE')
	END
C
C
	SUBROUTINE ISSUE(CWD,NUM)
C
C Issue a line to patch file or terminal
C
	INTEGER CWD
	BYTE NUM(1)
C
	IF (CWD.EQ.0) CALL IFFCH (NUM(1))
	IF (CWD.NE.0) CALL LINOUT(NUM(1))
C
	RETURN
	END
C
	SUBROUTINE NEWTIM
	RETURN
	END
**	IF	ACTP
C
	BLOCK DATA JIM
	COMMON/NUTSCL/NUTLUN
	DATA NUTLUN/6/
	END
**	ENDC
