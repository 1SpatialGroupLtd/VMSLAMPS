	SUBROUTINE MATCH(FSTCON,CONGOT,TSTANG,TSTDST)
C
C Copyright Laser-Scan Laboratories Ltd,Cambridge,England
C
C Author M.C.Fulford
C
C	Created 26.v.77
C	Last edited 10/v/79
C	Election edition
C
C To see if the track has another segment nearby
C Looks at all line segments visible and sorts them in order
C of angle to track, length of segment and
C nearness to the end of our track with a bias
C to give preference to the left or right (depending
C on the parameter BIAS.)
C
***	COMMON/PARAMS/
C
	INTEGER FSTCON		! first connection
	INTEGER CONGOT		! number of connections made
	LOGICAL*1 TSTANG	! check acuteness of corner
	LOGICAL*1 TSTDST	! check length of gap
C
	LOGICAL*1 TSTBET	! check derailments (if TSTANG)
	LOGICAL*1 TSTBAK	! check backtrack (expensively)
C				  (only if TSTANG)
C
***	COMMON/SCPARM/
***	COMMON/MPEP/
***	COMMON/LINKS/
***	COMMON/RSE/
***	COMMON/LKFOLL/
***	COMMON/LKPARM/
C
C W/S
	REAL CLOSE2	! closeness (for backtrack) squared
	INTEGER M(2)
	INTEGER LFTMST	! the left-most segment
	REAL DX(4),DY(4),QQ(2),Q(2,2),DV,DU,SECT
	REAL COSALF,DOT11,DOT22,DOT33,GAPSQ,SEGMIN,DELWTH
	REAL BEARNG(MAXCON)	! the bearings of the segments
	LOGICAL*1 EDGE,WIDE,APEX
**	IF	ELF
	LOGICAL*1 SEGPOL	! polarity of segment
**	ENDC
C
	DOT(M,N) = DX(M)*DX(N) + DY(M)*DY(N)
C
	TSTBET = .TRUE.	! perhaps an argument later
	TSTBAK = BAKCHK	! more complex function later, perhaps
	IF (.NOT. TSTBAK) GOTO 50
	   NMIN = MAX(1,NMP(1)-NMPBAK)
	   NMAX = NMP(1)
	   CLOSE2 = MPNEAR*MPNEAR
50	   CONTINUE
	GAPSQ=GAPSIZ**2
	SEGMIN=(SMLLNS*IPIT)**2
	DX(1) = LSTONE(X)-NXTLST(X)
	DY(1) = LSTONE(Y)-NXTLST(Y)
	DX(4) =  DY(1)	! D4 is perpendicular to D1
	DY(4) = -DX(1)
C
	IV=1+IDIR
	IU=2-IDIR
C
	CONGOT = 0		! none yet
	LFTMST = 0
C
C ***  LOOP FOR ALL CHAINS  ***
C
	DO 200 J=1,MAXCHN	! look at all chains
	IF (CHAIN(J) .LE. 0) GOTO 200  ! ensure it exists
	IF (LENGTH(J).LE.1) GOTO 200   ! and that is > 1 point
	I = FSTCON+CONGOT
	IF (I .GT. MAXCON) GOTO 300 ! no room for more
	EDGE=.FALSE.
	WIDE=.FALSE.
	APEX=.FALSE.	! reset connection types
	M(1) = NODE(FIRST(J))
	M(2) = NODE(LAST (J))
	DV=NEBUF(IV+1,M(2))-NEBUF(IV+1,M(1))
	DU=NEBUF(IU+1,M(2))-NEBUF(IU+1,M(1))
	SECT=SQRT(DU**2+DV**2)/ABS(DU)
	IW=NEBUF(1,M(1)).AND."37777
	WIDCOR=0.0
	IF(IW.LT."37770 .OR. IMOD.EQ.0) GOTO 140
	IF(.NOT.EDGING) GOTO 200
	IF (TRKWID.LE.0.) GOTO 200  ! no width info
	EDGE=.TRUE.
	WIDCOR=TRKWID*SECT*0.5
	IF(IW.EQ."37770) WIDCOR=-WIDCOR
140	DO 150 K=1,2
	  Q(IU,K) = NEBUF(IU+1,M(K))-LSTONE(IU)
	  Q(IV,K) = NEBUF(IV+1,M(K))-LSTONE(IV)+WIDCOR
	  QQ(K) = Q(X,K)*Q(X,K)+Q(Y,K)*Q(Y,K)
150	  CONTINUE
	K = 1
	IF (QQ(2) .LT. QQ(1)) K = 2
C
	DELWTH=0.0
**	UNLESS	ELF
	IF (EDGE .OR. .NOT.TSTDST .OR. TRKWID.LE.0) GOTO 160
	W1=(NEBUF(1,M(K)) .AND. "37777) ! get width
	W1N=W1/SECT  ! normalised
	DW=W1N-TRKWID
	ADW=ABS(DW)
	DELWTH=ADW/TRKWID  ! fractional change in width
	IF (DELWTH .LT. WIDDIF) GOTO 160 ! width ok.
	IF (DW .LT. 0) GOTO 160  ! narrow line, ok for moment
	WIDE=.TRUE.
	W2N=(NEBUF(1,M(3-K)).AND."37777)/SECT  ! other end
	APEX= (W2N.LT.W1N*WGHT(3))  ! tapered chain is apex
	WIDCOR=DW*SECT*0.5
	IF (APEX) WIDCOR=W1/4. + 0.5  ! try a guess at true centre
	IF (Q(IV,K) .GT. 0) WIDCOR=-WIDCOR ! get correction
	Q(IV,K)=Q(IV,K)+WIDCOR ! for this end of line
	QQ(K)=Q(X,K)*Q(X,K)+Q(Y,K)*Q(Y,K) ! recompute distance
**	ENDC
C
160	DX(2) = Q(X,K)
	DY(2) = Q(Y,K)
	DOT22 = QQ(K)
C prevent jumps
	IF (TSTDST .AND.
     *       (QQ(K).GT.GAPSQ) ) GOTO 200 ! too long
	DX(3) = NEBUF(X+1,M(3-K))-NEBUF(X+1,M(K))
	DY(3) = NEBUF(Y+1,M(3-K))-NEBUF(Y+1,M(K))
	DOT33 = DOT(3,3)
C Prevent short segments being attached
	IF(DOT33.LT.SEGMIN)GOTO 200 ! too small
**	IF	ELF
C only attach edges of correct polarity
	  SEGPOL = (IW.EQ."37770) .XOR. (IU.EQ.1) .XOR.
     *           ((NEBUF(IU+1,M(3-K))-NEBUF(IU+1,M(K))).GT.0)
	  IF (TRKPOL.NE.0 .AND.
     *        ((TRKPOL.GT.0).XOR.SEGPOL)) GOTO 200
**	ENDC
C calculate angle between segment and track
	DOT11=DOT(1,1)
	COSALF=0.0
	R=DOT11*DOT33
	IF(R.NE.0) COSALF=DOT(1,3)/SQRT(R)
C Prevent backtracking - cheap check for corner
	IF (.NOT.TSTANG) GOTO 180
	IF (COSALF .LT. SHRPNS) GOTO 200 ! too sharp
C Prevent backtracks - expensive test
	NSEG = 0
	IF (TSTBAK) CALL ONTRAK(START(X)+NEBUF(X+1,M(K)),
     *                          START(Y)+NEBUF(Y+1,M(K)),
     *                          START(X)+NEBUF(X+1,M(3-K)),
     *                          START(Y)+NEBUF(Y+1,M(3-K)),
     *                          NMIN,NMAX,CLOSE2,NSEG)
	IF (NSEG .NE. 0) GOTO 200	! backtrack
C Prevent track jumping, if segment nearly parallel to track
	IF (.NOT.TSTBET .OR. COSALF.LT.PRLLNS .OR.
     *      DOT22.LT.(NEARNS*IPIT)**2) GOTO 180
	COSB1 = DOT(1,2)/SQRT(DOT11*DOT22)
	COSB2 = DOT(2,3)/SQRT(DOT22*DOT33)
	IF (COSB1 .LT. BETA .OR.
     *      COSB2 .LT. BETA ) GOTO 200 ! too stepped
C
180	  QUALTY(I) = WGHT(4) - (QQ(K)/GAPSQ)*DSTWGT
     &              + COSALF*ANGWGT
     &              + (DOT33/SEGMIN)*LENWGT
     &              - DELWTH*WTHWGT
	  BEARNG(I) = DOT(4,2)
**	IF	ELF
	  IF (     SEGPOL) CONNCT(1,I) =  1
	  IF (.NOT.SEGPOL) CONNCT(1,I) = -1
**	IFF
	  CONNCT(1,I) = INT(WIDCOR)
**	ENDC
	  CONNCT(2,I) = J
	  CONNCT(3,I) = K
	  IF(.NOT.EDGING) APEX=.FALSE.
	  L=0
	  IF (EDGE) L=1
	  IF (WIDE) L=2
	  IF (APEX) L=3
	  CONNCT(4,I) = L  ! set connection type code
C set NXTBST to hold the segments in BEARNG order
	  L = 0
	  ISEG = LFTMST
190	  IF (ISEG.LE.0 .OR. BEARNG(I).LT.BEARNG(ISEG)) GOTO 195
	    L = ISEG
	    ISEG = NXTBST(ISEG)
	    GOTO 190
195	  NXTBST(I) = ISEG
	  IF (L .EQ. 0) LFTMST   = I
	  IF (L .NE. 0) NXTBST(L)= I
	  CONGOT = CONGOT+1
200	CONTINUE
C add the bias
300	B = (CONGOT-1)*BIAS*0.5
	IF(BIAS.EQ.0.0) GOTO 900
	ISEG = LFTMST
320	IF (ISEG .LE. 0) GOTO 900
	  QUALTY(ISEG) = QUALTY(ISEG)+B
	  ISEG = NXTBST(ISEG)
	  B = B-BIAS
	  GOTO 320
C
900	RETURN
	END
