C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1995-01-03 17:46:26.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE DRAW_TEXT(
     &		TEXT,FC,SC,XPOS,YPOS,AUX,TRITXT,SRIPLT,TRISCN,FS,HW)
C
	IMPLICIT NONE
C
C define layout of AUX array (copy of LITES2 CMN:AUXDEF.PAR)
C
	PARAMETER AUXLEN = 8	! length of auxiliary array
	PARAMETER ANGI = 1	! angle
	PARAMETER COSI = 2	! cosine
	PARAMETER SINI = 3	! sine
	PARAMETER SIZI = 4	! size
	PARAMETER MINXI= 5	! minimum x
	PARAMETER MAXXI= 6	! maximum x
	PARAMETER MINYI= 7	! minimum y
	PARAMETER MAXYI= 8	! maximum y
C
C arguments
	CHARACTER*(*) TEXT		! text to draw
	INTEGER	FC			! feature code
	INTEGER	SC			! secondary code (font) from FRT
	REAL	XPOS,YPOS		! coordinate
	REAL	AUX(AUXLEN)		! array of extra information
	LOGICAL	TRITXT			! FRTLIB routine to draw text
	LOGICAL	SRIPLT			! FRTLIB routine to draw symbol
	LOGICAL	TRISCN			! FRTLIB routine to size text
	INTEGER*2 FS(4)			! feature status
	LOGICAL	HW			! use h/w text?
C
C w/s
	INTEGER	TEXTAD/0/
C
	IF (TEXTAD.EQ.0) CALL LIB$FIND_IMAGE_SYMBOL(
     &		'LSL$HYDRO_TEXT_ROUTINE','DRAW_TEXT',TEXTAD)
C	
	CALL CALLR(
     &	            TEXT,FC,SC,XPOS,YPOS,AUX,
     &	            TRITXT,SRIPLT,TRISCN,FS,HW,%VAL(TEXTAD))
	RETURN
	END


	SUBROUTINE DRAW_SYMBOL(
     &		FC,SC,NATT,ATTC,ATTV,XPOS,YPOS,AUX,
     &		TRITXT,SRIPLT,TRISCN,DRAW_TEXT,FS)
C
	IMPLICIT NONE
C
C define layout of AUX array (copy of LITES2 CMN:AUXDEF.PAR)
C
	PARAMETER AUXLEN = 8	! length of auxiliary array
	PARAMETER ANGI = 1	! angle
	PARAMETER COSI = 2	! cosine
	PARAMETER SINI = 3	! sine
	PARAMETER SIZI = 4	! size
	PARAMETER MINXI= 5	! minimum x
	PARAMETER MAXXI= 6	! maximum x
	PARAMETER MINYI= 7	! minimum y
	PARAMETER MAXYI= 8	! maximum y
C
C arguments
	INTEGER	FC			! feature code
	INTEGER	SC			! secondary code (font) from FRT
	INTEGER	NATT			! number of attributes
	INTEGER	ATTC(*)			! the columns headers
	INTEGER	ATTV(*)			! the attributes
	REAL	XPOS,YPOS		! coordinate
	REAL	AUX(AUXLEN)		! array of extra information
	LOGICAL	TRITXT			! FRTLIB routine to draw text
	LOGICAL	SRIPLT			! FRTLIB routine to draw symbol
	LOGICAL	TRISCN			! FRTLIB routine to size text
	EXTERNAL DRAW_TEXT
	INTEGER*2 FS(4)			! feature status
C
C w/s
	INTEGER	SYMBAD/0/
C
	IF (SYMBAD.EQ.0) CALL LIB$FIND_IMAGE_SYMBOL(
     &		'LSL$HYDRO_SYMBOL_ROUTINE','DRAW_SYMBOL',SYMBAD)
C	
	CALL CALLR(
     &	            FC,SC,NATT,ATTC,ATTV,XPOS,YPOS,AUX,
     &	            TRITXT,SRIPLT,TRISCN,DRAW_TEXT,FS,%VAL(SYMBAD))
	RETURN
	END


	SUBROUTINE BLANK_TEXT(
     &		TEXT,FC,SC,N,XY,OFF,CMPLX,
     &		XPOS,YPOS,AUX,
     &		TRI_BOUND,SRI_BOUND,TRISCN,SRI_OFFSET_POLYGON,
     &		FS,HW)
C
	IMPLICIT NONE
C
C define layout of AUX array (copy of LITES2 CMN:AUXDEF.PAR)
C
	PARAMETER AUXLEN = 8	! length of auxiliary array
	PARAMETER ANGI = 1	! angle
	PARAMETER COSI = 2	! cosine
	PARAMETER SINI = 3	! sine
	PARAMETER SIZI = 4	! size
	PARAMETER MINXI= 5	! minimum x
	PARAMETER MAXXI= 6	! maximum x
	PARAMETER MINYI= 7	! minimum y
	PARAMETER MAXYI= 8	! maximum y
C
C arguments
	CHARACTER*(*) TEXT		! text to draw
	INTEGER	FC			! feature code
	INTEGER	SC			! secondary code (font) from FRT
	INTEGER	N			! number of points in/out
	REAL	XY(2,*)			! the blanking points
	REAL	OFF			! offset from FRTSIZ
	LOGICAL	CMPLX			! complex blanking?
	REAL	XPOS,YPOS		! coordinate
	REAL	AUX(AUXLEN)		! array of extra information
	LOGICAL	TRI_BOUND		! FRTLIB routine to get text bounds
	LOGICAL	SRI_BOUND		! FRTLIB routine to get symbol bounds
	LOGICAL	TRISCN			! FRTLIB routine to size text
	EXTERNAL SRI_OFFSET_POLYGON	! FRTLIB routine to offset polygon
	INTEGER*2 FS(4)			! feature status
	LOGICAL	HW			! use h/w text?
C
C local variables
	INTEGER	I
	REAL	TXY(2)
	REAL SIZE,SINANG,COSANG,OFFXY(2)
	INTEGER	NIN
C
	NIN = N		! save input size of array
C
	SIZE = AUX(SIZI)
	IF (CMPLX) THEN
C
C Use TRI_BOUND to get a region around the text.
C Just for example, use an offset of 0.0, then offset the
C region ourselves. We are passed OFF as a fraction of the size.
	   IF (TRI_BOUND(TEXT,SC,N,XY,0.0,HW)) N = 0
C
C Offset the region
	   CALL SRI_OFFSET_POLYGON(NIN,XY,N,OFF)
C
C Save bottom left position (e.g. for text which is not bottom-
C left justified)
	   OFFXY(1) = AUX(MINXI)
	   OFFXY(2) = AUX(MINYI)
	ELSE
C
C Simple blanking - just generate a box
	   N = 4
	   XY(1,1) = AUX(MINXI)-OFF*SIZE
	   XY(2,1) = AUX(MINYI)-OFF*SIZE
	   XY(1,2) = AUX(MAXXI)+OFF*SIZE
	   XY(2,2) = XY(2,1)
	   XY(1,3) = XY(1,2)
	   XY(2,3) = AUX(MAXYI)+OFF*SIZE
	   XY(1,4) = XY(1,1)
	   XY(2,4) = XY(2,3)
	   SIZE = 1.0		! already scaled to size
	   OFFXY(1) = 0.0
	   OFFXY(2) = 0.0
	ENDIF
C
C Scale, offset, and rotate the region to its final position
	COSANG = AUX(COSI)
	SINANG = AUX(SINI)
	DO 40 I=1,N
	   TXY(1) = XY(1,I)*SIZE + OFFXY(1)
	   TXY(2) = XY(2,I)*SIZE + OFFXY(2)
	   XY(1,I) = XPOS + TXY(1)*COSANG - TXY(2)*SINANG
	   XY(2,I) = YPOS + TXY(1)*SINANG + TXY(2)*COSANG
40	CONTINUE
C
	RETURN
	END
C
C
C
	SUBROUTINE BLANK_SYMBOL(
     &		FC,SC,N,XY,OFF,CMPLX,
     &		NATT,ATTC,ATTV,XPOS,YPOS,AUX,
     &		TRI_BOUND,SRI_BOUND,TRISCN,SRI_OFFSET_POLYGON,
     &		DRAW_TEXT,FS)
C
	IMPLICIT NONE
C
C define layout of AUX array (copy of LITES2 CMN:AUXDEF.PAR)
C
	PARAMETER AUXLEN = 8	! length of auxiliary array
	PARAMETER ANGI = 1	! angle
	PARAMETER COSI = 2	! cosine
	PARAMETER SINI = 3	! sine
	PARAMETER SIZI = 4	! size
	PARAMETER MINXI= 5	! minimum x
	PARAMETER MAXXI= 6	! maximum x
	PARAMETER MINYI= 7	! minimum y
	PARAMETER MAXYI= 8	! maximum y
C
C arguments
	INTEGER	FC			! feature code
	INTEGER	SC			! secondary code (font) from FRT
	INTEGER	N			! number of points in/out
	REAL	XY(2,*)			! the blanking points
	REAL	OFF			! offset from FRTSIZ
	LOGICAL	CMPLX			! complex blanking?
	INTEGER	NATT			! number of attributes
	INTEGER	ATTC(*)			! the columns headers
	INTEGER	ATTV(*)			! the attributes
	REAL	XPOS,YPOS		! coordinate
	REAL	AUX(AUXLEN)		! array of extra information
	LOGICAL	TRI_BOUND		! FRTLIB routine to get text bounds
	LOGICAL	SRI_BOUND		! FRTLIB routine to get symbol bounds
	LOGICAL	TRISCN			! FRTLIB routine to size text
	EXTERNAL SRI_OFFSET_POLYGON	! FRTLIB routine to offset polygon
	EXTERNAL DRAW_TEXT
	INTEGER*2 FS(4)			! feature status
C
C local variables
	INTEGER	I
	REAL	TXY(2)
	INTEGER	BOUND_TYPE
	REAL SIZE,SINANG,COSANG
	INTEGER	NIN
C
	NIN = N		! save input size of array
C
	SIZE = AUX(SIZI)
C
C Set BOUND_TYPE for SRI_BOUND
	IF (CMPLX) THEN
	   BOUND_TYPE = 3		! convex hull
	ELSE
	   BOUND_TYPE = 2		! bounding box
	ENDIF
C
C Just for example, use an offset of 0.0, then offset the
C region ourselves. We are passed OFF as a fraction of the size.
	IF (SRI_BOUND(SC,N,XY,0.0,BOUND_TYPE)) N = 0
C
C Offset the region
	CALL SRI_OFFSET_POLYGON(NIN,XY,N,OFF)
C
C Scale, offset, and rotate the region to its final position
	COSANG = AUX(COSI)
	SINANG = AUX(SINI)
	DO 40 I=1,N
	   TXY(1) = XY(1,I)*SIZE
	   TXY(2) = XY(2,I)*SIZE
	   XY(1,I) = XPOS + TXY(1)*COSANG - TXY(2)*SINANG
	   XY(2,I) = YPOS + TXY(1)*SINANG + TXY(2)*COSANG
40	CONTINUE
C
	RETURN
	END
