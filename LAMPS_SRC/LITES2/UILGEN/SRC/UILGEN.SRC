C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-05-02 11:15:56.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	PROGRAM	UILGEN
C
***	MODULE	UILGEN
***	IDENT	02MY90
C
C	Copyright (C), Laser-Scan Ltd., Cambridge, England
C
C	Created					CCB  18-Nov-1989
C
C ......................................................................
C
C Program to convert UISMENUS files to UIL
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE 	'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE		'LSL$CMNUILGEN:UILGEN.PAR'
	INCLUDE		'LSL$CMNUILGEN:UILGENMSG.PAR'
C
C Common:
	INCLUDE 	'LSL$CMNLSL:FILENAME.CMN'
	INCLUDE 	'LSL$CMNLSL:TXTC.CMN'
	INCLUDE		'LSL$CMNUILGEN:UILGEN.CMN'
C
C W/s:
	LOGICAL*4	STATUS		! return status code
	INTEGER		IERR		! return error code
C
C Functions:
	INTEGER		GETFILNAM	! reads a file name
	INTEGER*4	FLROPN		! open a text file for reading
	INTEGER*4	FLWOPN		! open a text file for writing
	INTEGER*4	FLRLIN		! read a line
	LOGICAL*4	CLD_INIT	! decode the command line
	INTEGER*4	PROCESS_FILE	! process UIM file
C					
C ......................................................................
C
C Initialise....
	CALL LSL_INIT()
C
C Decode command line
	STATUS = CLD_INIT(IN_FILE,IN_FILE_LEN,UIL_FILE,UIL_FILE_LEN)
	IF (.NOT.STATUS) GOTO 999
C
C Attempt to open initial .UIM file
	STATUS=FLROPN(DATLUN,IN_FILE(1:IN_FILE_LEN),IERR)
	IF (.NOT.STATUS) THEN
	   CALL LSL_PUTMSG(UILGEN__OPNFIL,IN_FILE(1:IN_FILE_LEN))
	   CALL LSL_ADDMSG(STATUS)
	   GOTO 999
	ENDIF
C
C Attempt to open output UIL file
	STATUS=FLWOPN(UILLUN,UIL_FILE(:UIL_FILE_LEN),IERR)
	IF (.NOT.STATUS) THEN
	   CALL LSL_PUTMSG(UILGEN__OPNFIL,UIL_FILE(:UIL_FILE_LEN))
	   CALL LSL_ADDMSG(STATUS)
	   GOTO 999
	ENDIF
C
C and MENU_UIL file
C put the destination UIL filename into the common block
C and change extension to .MENU_UIL
	IF (.NOT.CONVERT) THEN
	   CALL PUTFLN(UIL_FILE(:UIL_FILE_LEN))
	   LEN_EXT = 8
	   STR_EXT = 'MENU_UIL'
	   HAD_EXT = .TRUE.
	   CALL EXPFLN(UIL_MENU_FILE,UIL_MENU_FILE_LEN)
C
C open the MENU UIL output file
	   STATUS =FLWOPN(
     &		UILMENULUN,UIL_MENU_FILE(:UIL_MENU_FILE_LEN),IERR)
	   IF (.NOT.STATUS) THEN
	      CALL LSL_PUTMSG(UILGEN__OPNFIL,
     &				UIL_MENU_FILE(:UIL_MENU_FILE_LEN))
	      CALL LSL_ADDMSG(STATUS)
	      GOTO 999
	   ENDIF
	ENDIF
	IF (CDL) THEN
	   CALL LSL_PUTMSG(UILGEN__READFILE,'UISMENUS',IN_FILE(:IN_FILE_LEN))
	ELSE
	   CALL LSL_PUTMSG(UILGEN__READFILE,'UIM',IN_FILE(:IN_FILE_LEN))
	ENDIF
	IF (CONVERT) THEN
	   CALL LSL_PUTMSG(UILGEN__WRITFILE,'UIM',UIL_FILE(:UIL_FILE_LEN))
	ELSE
	   CALL LSL_PUTMSG(UILGEN__WRITFILE,'UIL',UIL_FILE(:UIL_FILE_LEN))
	ENDIF
C
C write header part of UIL file
	CALL FLWSEL(UILLUN)
	IF (.NOT.CONVERT) CALL INIT_UIL
C
C and process the UIM files
	STATUS = PROCESS_FILE()
	IF (.NOT.STATUS) GOTO 999
C
C ......................................................................
C		C L O S E   F I L E S
C close the initial .UIL (.DAT) file
900	CALL FLRCLO(DATLUN)
C
C now copy the contents of the .MENU_UIL onto the end of the .UIL
	IF (.NOT.CONVERT) THEN
	   CALL FLRSEL(UILMENULUN)
	   CALL FLRREW
	   CALL FLWSEL(UILLUN)
C
910	   STATUS = FLRLIN()
	   IF (.NOT.STATUS) GOTO 920
	   CALL FLWSTR(TXTDSC)
	   GOTO 910
C
920	   CALL FLWSTR('end module;')	! finish off UIL file
	   CALL FLWDEL(UILMENULUN)
	ENDIF
	CALL FLWCLO(UILLUN)
	GOTO 1000
C
C ......................................................................
C		U N E X P E C T E D   F A I L U R E
C
999	CALL LSL_ADDMSG(UILGEN__ABORT)
	GOTO 900			! attempt to tidy up
C
C Finished.....
1000	CALL LSL_EXIT
	END
