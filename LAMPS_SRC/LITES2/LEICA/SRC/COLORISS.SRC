C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-05-12 17:51:48.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C
C Routine to support the KERN KRISS display
C
	SUBROUTINE KRISS_GPL(NCOORD,XCOORD,YCOORD,ZCOORD,ORG,COL)
C
***	MODULE	KRISS_GPL
***	IDENT	12MY93
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author  Clarke Brunt
C
C Created 					CCB	8-Dec-1988
C
	IMPLICIT NONE
C
***	COMMON/CMN:COLORISS/
C
C arguments
	INTEGER		NCOORD		! number of coords
	REAL		XCOORD(NCOORD)	! coordinate buffer
	REAL		YCOORD(NCOORD)	! ditto
	REAL		ZCOORD(NCOORD)
	REAL*8		ORG(2)		! origin offset
	INTEGER		COL		! colour
C
C workspace
	INTEGER		I
	INTEGER		COLOR
	REAL		X,Y,Z
C
C if just INITed, then switch to buffered mode i/o (switched back
C by SI_UPDATE)
	IF (KRS_JUST_INIT) THEN
	   KRS_JUST_INIT = .FALSE.
	   CALL SI_BUFFERED_MODE
	ENDIF

	COLOR = COL.AND.7
	IF (COLOR.EQ.0.AND.COL.NE.0) COLOR = 7
C
	IF (XORMODE.AND..NOT.DIVRF) THEN
	   XORMODE = .FALSE.
CCC	   CALL SI_DRAW_MODE(.FALSE.)
	ENDIF
C
C flag so that menu drawing commands perform an update
C (they don't work after SI_LINE otherwise)
CCC	KRSUPD = .FALSE.
C
C add points to line
	DO 30 I=1,NCOORD
C
C refresh limited to some number less than MAXPOINT so that the KRISS
C can cope with it
	   X = XCOORD(I)+ORG(1)
	   Y = YCOORD(I)+ORG(2)
	   Z = ZCOORD(I)
	   IF (DIVRF) THEN
	      IF (NPOINT.EQ.MAXRF) GOTO 999
	      NPOINT = NPOINT+1
	      IF (I.EQ.1) THEN
	         LINE_VIS(NPOINT) = 0	 ! pen up
	      ELSE
	         LINE_VIS(NPOINT) = 1	 ! pen down
	      ENDIF
	      LINE_COORD(1,NPOINT) = X
	      LINE_COORD(2,NPOINT) = Y
	      LINE_COORD(3,NPOINT) = Z
           ELSE
	      IF (I.EQ.1) THEN
	         CALL SI_MOVE(X,Y,Z)
	      ELSE
	         CALL SI_LINE(COLOR,X,Y,Z)
	      ENDIF
	   ENDIF
30	CONTINUE
C
999	RETURN
	END
C
	SUBROUTINE KRISS_UPDATE
C
***	MODULE	KRISS_UPDATE
***	IDENT	17MY89
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author  Clarke Brunt
C
C Created 					CCB	8-Dec-1988
C
	IMPLICIT NONE
C
***	COMMON/CMN:COLORISS/
C
C Called from RFDRAW to get KRISS going after a re-draw.
C
	CALL SI_UPDATE
C
	RETURN
	END
C
C Initialise KRISS
C
	LOGICAL FUNCTION KRISS_INIT(ON)
C
***	MODULE	KRISS_INIT
***	IDENT	17MY89
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author  Clarke Brunt
C
C Created 					CCB	17-May-1989
C
	IMPLICIT NONE
C
***	COMMON/LSL$CMNLSL:EXPC/
***	COMMON/CMN:COLORISS/
C
C argument
	LOGICAL	ON	! turn on or off
C
C functions called
	INTEGER	SI_INIT
	EXTERNAL KRISS_TMRAST,KRISS_KSRAST
C
C workspace
	INTEGER	ERROR
	INTEGER	I
C
	KRISS_INIT = .TRUE.		! assume failure
	IF (.NOT.ON) THEN
CCC don't do this - if channel deassigned, LITES2 does not always
CCC call us to re-initialise it
CCC	   CALL SI_INIT(.FALSE.)	! turn off
	   GOTO 9990			! that's all for now
	ENDIF
C
	KRS_JUST_INIT = .TRUE.		! just INITed
CCC	KRSUPD = .FALSE.		! update needed
C
C Initialise common variables
	NPOINT = 0			! nothing in drawing buffer
	TMRTIM(1) = -7 500 000		! three quarter second
	TMRTIM(2) = -1
	KSRTIM(1) = -500 000		! one twentieth second
	KSRTIM(2) = -1
	XORMODE = .FALSE.
	DIVRF = .FALSE.			! refresh diversion off
	RFON = .FALSE.			! refresh off
	IF (TMREFN.LE.0) CALL LIB$GET_EF(TMREFN)
	IF (KSREFN.LE.0) CALL LIB$GET_EF(KSREFN)
	TMRADR = %LOC(KRISS_TMRAST)
	KSRADR = %LOC(KRISS_KSRAST)
C
C Initialise the DAT-SI
	ERROR = SI_INIT(.TRUE.)
	IF (ERROR.NE.0) THEN
	   CALL TTWSTR('Failed to initialise SI, check logical LSL$SI')
	   GOTO 9999
	ENDIF
C
	CALL SI_MENU_COLOR(255,255,255)
	CALL SI_CLEAR_MENU
	CALL SI_MENU_CURSOR(.TRUE.)
C
C pan the cursor so we know where it is
	CALL SI_PAN_XY(CURSX,CURSY)
	MBOXX = 0	! not drawn a menu
	MBOXY = 0
C
C and back to graphic mode
	CALL SI_MENU_CURSOR(.FALSE.)
C
9990	KRISS_INIT = .FALSE.		! success
C
9999	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	KRISS_DISMOD(N)
C
**	MODULE KRISS_DISMOD
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Set display mode to stored or refresh
C
	IMPLICIT NONE
C
***	COMMON/CMN:COLORISS/
C
C Arguments:
	INTEGER		N		! 0->stored, else refresh
C
	IF (N.EQ.0) THEN
	   DIVRF = .FALSE.		! unset diversion
	ELSE
	   NPOINT = 0			! nothing in buffer
	   DIVRF = .TRUE.		! set diversion
	ENDIF
C
	RETURN
	END	
C
C***********************************************************************
C
	SUBROUTINE	KRISS_REFRSH
C
**	MODULE	KRISS_REFRSH
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Set refresh picture going
C
	IMPLICIT NONE
C
***	COMMON/CMN:COLORISS/
C
	TMRON = .TRUE.
	CALL KRISS_TMRAST
C
	RETURN
	END	
C
C***********************************************************************
C
	SUBROUTINE	KRISS_TMRAST
C
**	MODULE	KRISS_TMRAST
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Refresh timer AST
C
	IMPLICIT NONE
C
***	COMMON/CMN:COLORISS/
C
	IF (TMRON) THEN			! if timer on then
C
C if the KRISS tracking timer is on, then don't actually flash the
C refresh, so that full attention is paid to tracking the cursor
	   IF (.NOT.KSRON) CALL KRISS_DRAWRF	! draw refresh
C
C re-schedule ourselves in a while (if required)
	   IF (TMRON) CALL SYS$SETIMR(
     &		%VAL(TMREFN),TMRTIM,%VAL(TMRADR),%VAL(TMREFN))
	ENDIF
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	KRISS_RFSTOP
C
**	MODULE	KRISS_RFSTOP
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Stop the refresh picture
C
	IMPLICIT NONE
C
***	COMMON/CMN:COLORISS/
C
	IF (TMRON) THEN				! if timer is on
	   TMRON = .FALSE.			! request off
	   CALL SYS$CANTIM(%VAL(TMREFN),)	! cancel it
	   IF (RFON) CALL KRISS_DRAWRF		! remove refresh
	   NPOINT = 0
	   DIVRF = .FALSE.			! diversion off
	ENDIF
	RFON = .FALSE.				! refresh not now on
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	KRISS_DRAWRF
C
**	MODULE	KRISS_DRAWRF
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Draw the refresh picture
C
	IMPLICIT NONE
C
***	COMMON/CMN:COLORISS/
C
C workspace
	INTEGER	I
	INTEGER	COLOR
C
C refresh buffer	
	IF (NPOINT.GT.0) THEN
CCC	   COLOR = 0
CCC	   IF (.NOT.RFON) COLOR = 7
	   COLOR = 7
	   IF (.NOT.XORMODE) THEN
	      XORMODE = .TRUE.
	      CALL SI_DRAW_MODE(.TRUE.)
	   ENDIF
	   DO 10 I=1,NPOINT
	      IF (LINE_VIS(I).EQ.0) THEN
	         CALL SI_MOVE(
     &		LINE_COORD(1,I),LINE_COORD(2,I),LINE_COORD(3,I))
	      ELSE
	         CALL SI_LINE(COLOR,
     &		LINE_COORD(1,I),LINE_COORD(2,I),LINE_COORD(3,I))
	      ENDIF
10	   CONTINUE
	   IF (XORMODE) THEN
	      XORMODE = .FALSE.
	      CALL SI_DRAW_MODE(.FALSE.)
	   ENDIF
	   CALL SI_UPDATE
	ELSE
	   TMRON = .FALSE.	! no refresh, so cancel timer
	ENDIF
C
	RFON = .NOT.RFON
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	KRISS_VISIBLE(VIS)
C
**	MODULE	KRISS_VISIBLE
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Set KRISS visibility
C
	IMPLICIT NONE
C
***	COMMON/CMN:COLORISS/
C
C arguments
	INTEGER	VIS
C
C workspace
	REAL*8	X,Y,Z
C
	CALL SI_VISIBLE(VIS)		! set the screen visibility
C
C attempt to spuriously move the instrument, to get it to send
C a pan to the SI (required if SI was previsouly disabled)
	IF (VIS.NE.0) THEN
	   CALL DSR_READ(X,Y,Z,.FALSE.)
	   CALL DSR_MOVE(X+1,Y+1,Z+1,.FALSE.)
	   CALL DSR_MOVE(X,Y,Z,.FALSE.)
	ENDIF
C
	IF (VIS.EQ.0) THEN
	   CALL SI_MENU_COLOR(0,0,0)
	ELSE
	   CALL SI_MENU_COLOR(255,255,255)
	ENDIF
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	KRISS_VECT(X1,Y1,X2,Y2,COL)
C
**	MODULE	KRISS_VECT
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Draw vector in menu plane
C
	IMPLICIT NONE
C
***	COMMON/CMN:COLORISS/
C
C arguments
	INTEGER	X1,X2,Y1,Y2
	INTEGER		COL		! colour
C
C statement functions
	INTEGER	C,I
	C(I) = I*480/1024 - 240
C
C put an update here, bacause menu-plane drawing does not seem to
C work after initialise and drawing vectors until an update is done
CCC	IF (.NOT.KRSUPD) THEN
CCC	   KRSUPD = .TRUE.
CCC	   CALL SI_UPDATE
CCC	ENDIF
C
	CALL SI_DRAW_LINE(C(X1),C(Y1),C(X2),C(Y2))
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	KRISS_RECT(X1,Y1,X2,Y2,FIELD)
C
**	MODULE	KRISS_RECT
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Clear rectangle field in menu plane
C 1 is status, 2 is dialog, 3 is menu
C
	IMPLICIT NONE
C
***	COMMON/CMN:COLORISS/
C
C arguments
	INTEGER	X1,X2,Y1,Y2
	INTEGER FIELD
C
C workspace
	INTEGER	PX1,PX2,PY1,PY2
C
C put an update here, bacause menu-plane drawing does not seem to
C work after initialise and drawing vectors until an update is done
CCC	IF (.NOT.KRSUPD) THEN
CCC	   KRSUPD = .TRUE.
CCC	   CALL SI_UPDATE
CCC	ENDIF
C
C convert corners to character positions
C map 0-1023 on to 480 square (0 at centre)
C
	PX1 = X1*480/1024
	PX2 = X2*480/1024
	PY1 = Y1*480/1024
	PY2 = Y2*480/1024
C
C seems not to clear buttom line in y, so subtract 1
	CALL SI_CLEAR_MENU_PIXELS(
     &			MAX(MIN(PX1,PX2)-240,-240),
     &			MAX(MIN(PY1,PY2)-240-1,-320),
     &			MIN(MAX(PX1,PX2)-240,239),
     &			MIN(MAX(PY1,PY2)-240,319) )
C
CCC	PX1 = PX1/8 - 30
CCC	PX2 = PX2/8 - 30
CCC	PY1 = PY1/16 - 15
CCC	PY2 = PY2/16 - 15
C
CCC	CALL SI_OPEN_WINDOW(MAX(MIN(PX1,PX2),-30),
CCC     &			    MAX(MIN(PY1,PY2),-20),
CCC     &			    MIN(MAX(PX1,PX2),29),
CCC     &			    MIN(MAX(PY1,PY2),19),
CCC     &			    3)		! 2 single line, 3 none
C
C flag menu not drawn by KRISS_MENU
	IF (FIELD.EQ.3) THEN
	   MBOXX = 0
	   MBOXY = 0
	ENDIF
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	KRISS_TRACK
C
**	MODULE	KRISS_TRACK
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Turn on KRISS cursor and track to follow DSR
C
	IMPLICIT NONE
C
C overlay on KERN P2PLIB Pascal common block
	INTEGER*4	P2_IO
	COMMON/P2_IO/	P2_IO
C
***	COMMON/CMN:COLORISS/
***	COMMON/CMN:SD2000/
C
	NEW_DSR_READ = DSR_READING
	IF (DSR_READING) THEN
	   DSR_READING = .FALSE.
	   CALL SYS$CANCEL(%VAL(P2_IO))
	   CALL SYS$CLREF(%VAL(USER_EFN))	! pretend nothing happened
	ENDIF
	IF (DSR_MODE.NE.0) CALL DSR_SETMODE(0)
	CALL P2DSM_P2_DEFINE_STAGE_MOTIONS(0)	! disable model movement
	CALL SI_MENU_CURSOR(.TRUE.)
	KSRON = .TRUE.
	CALL KRISS_KSRAST			! start timer
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	KRISS_STOP(IX,IY,BOX)
C
**	MODULE	KRISS_STOP
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Turn off KRISS cursor and return position and/or box number
C (BOX set to -1 before call, return 0 for no box, +ve for a box,
C  or leave alone if we don't support it)
C
	IMPLICIT NONE
C
C overlay on KERN P2PLIB Pascal common block
	INTEGER*4	P2_IO
	COMMON/P2_IO/	P2_IO
C
***	COMMON/CMN:COLORISS/
***	COMMON/CMN:SD2000/
C
C arguments
	INTEGER	IX,IY
	INTEGER	BOX
C
C workspace
	INTEGER	CX,CY
C
	KSRON = .FALSE.				! request off
	CALL SYS$CANTIM(%VAL(KSREFN),)		! cancel it
	CALL SI_MENU_CURSOR(.FALSE.)		! back to graphic mode
C
	CALL P2DSM_P2_DEFINE_STAGE_MOTIONS(4)	! enable model movement
C
C get read going again
	IF (NEW_DSR_READ) THEN
	   CALL DSR_START(USER_EFN,
     &		%VAL(IOSB_ADDR),%VAL(AST_ADDR),%VAL(BUFF_ADDR))
	ELSE
	   IF (DSR_MODE.NE.1) CALL DSR_SETMODE(1)
	ENDIF
C
	IX = (CURSX+240)*1024/480 + 200 	! 200 is KRISS relic
	IY = (CURSY+240)*1024/480
C
C convert to character positions, relative to corner of menu
C (must agree with whatever done in KRISS_MENU)
C
	CX = (CURSX+240+4)/8 - 30 - MORGX
	IF (MOD(MSIZY,2).EQ.0) THEN
	   CY = (CURSY+240+8)/16
	ELSE
	   CY = (CURSY+240)/16
	ENDIF
	CY = MORGY - (CY - 15)
C
C If menu not drawn by KRISS_MENU, then leave BOX argument alone
	IF (MBOXX.GT.0) THEN
	   BOX = 0		! assume no box
	   IF (CX.LT.0.OR.CX.GE.MBOXX*MSIZX) GOTO 999
	   IF (CY.LT.0.OR.CY.GE.MBOXY*MSIZY) GOTO 999
C
	   BOX = (CY/MSIZY)*MBOXX + CX/MSIZX + 1
	ENDIF
C
999	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	KRISS_KSRAST
C
**	MODULE	KRISS_KSRAST
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Cursor timer AST
C
	IMPLICIT NONE
C
C overlay on KERN P2PLIB Pascal common blocks
	INTEGER*4	P2_IO
	COMMON/P2_IO/	P2_IO
	INTEGER*4	BUTTON_CODE(4)
	COMMON/BUTTON_CODE/BUTTON_CODE
C
***	COMMON/CMN:COLORISS/
***	COMMON/CMN:SD2000/
C
	REAL*8	X,Y,Z
	INTEGER	IX,IY
	INTEGER	I,B
C
	INTEGER	FAC
	DATA	FAC/5/
C
	IF (KSRON) THEN			! if timer on then
C
	   CALL P2REM_P2_READ_ENCODER_MOVEMENTS(X,Y,Z)
	   IX = INT(X)/FAC
	   IY = INT(Y)/FAC
	   IF (IX.NE.0.OR.IY.NE.0) THEN
	      CURSX = CURSX+IX
	      CURSY = CURSY+IY
	      IF (CURSX.LT.-240) CURSX = -240
	      IF (CURSX.GT.239) CURSX = 239
	      IF (CURSY.LT.-240) CURSY = -240
	      IF (CURSY.GT.239) CURSY = 239
	      CALL SI_PAN_XY(CURSX,CURSY)
	   ENDIF
C
C was there a button press - if so then simulate a DSR read completion
C
	   IF (BUTTON_CODE(1).NE.0) THEN
	      NEW_DSR_READ = .FALSE.	! LITES2 will do read itself
	      DO 10 I=1,4
	         DSR_BUTTON(I) = BUTTON_CODE(I)
10	      CONTINUE
	      DSR_IOSB(1) = 1
C
C try to make something of the button codes
	      I = DSR_BUTTON(2)*4096 + DSR_BUTTON(3)*64 + DSR_BUTTON(4)
	      B = MOD(I,256)			! ASCII code
	      IF (B.EQ.0) B = I/256 + 128	! no ASCII, so scan code
	      IF (DSR_BUTTON(1).EQ.1) B = MOD(B,32)	! button, or pedal
C
C copy over the IOSB and returned character
	      CALL DSR_COPY(B,%VAL(BUFF_ADDR),DSR_IOSB,%VAL(IOSB_ADDR))
C
C set the event flag
	      CALL SYS$SETEF(%VAL(USER_EFN))
C
C call the user's AST routine (passed as our AST parameter)
	      IF (AST_ADDR.NE.0) CALL LIB$CALLG(0,%VAL(AST_ADDR))
	   ENDIF
C
C re-schedule ourselves in a while (if required)
	   CALL SYS$SETIMR(
     &		%VAL(KSREFN),KSRTIM,%VAL(KSRADR),%VAL(KSREFN))
	ENDIF
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	KRISS_SIDE(N)
C
**	MODULE KRISS_SIDE
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Change menu plane colour to appear in left/right/both
C
	IMPLICIT NONE
C
***	COMMON/CMN:COLORISS/
C
C Arguments:
	INTEGER		N		! 1/2/3 = left/right/both
C
	IF (N.EQ.0) THEN
	   CALL SI_MENU_COLOR(0,0,0)
	ELSE
	   CALL SI_MENU_COLOR(255,255,255)
	ENDIF
C
	RETURN
	END	
C
C***********************************************************************
C
	SUBROUTINE	KRISS_SUSPEND(ON)
C
**	MODULE KRISS_SUSPEND
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Suspend highlighting (while we perform some other KRISS drawing
C into the menu plane)
C
	IMPLICIT NONE
C
***	COMMON/CMN:COLORISS/
C
C Arguments:
	LOGICAL		ON		! suspend, or resume
C
C pretending that the cursor tracking is on is enough
	KSRON = ON
C
	RETURN
	END	
C
C***********************************************************************
C
	SUBROUTINE	KRISS_REGIST(ACTION)
C
**	MODULE KRISS_REGIST
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Perform manual registration
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER		ACTION
C
C not required in this version - registration is performed externally
C
	RETURN
	END	
C
C***********************************************************************
C
	SUBROUTINE	KRISS_TEXT(FIELD,STRING,POSX,POSY,SIZE,LENG,COL)
C
**	MODULE KRISS_TEXT
**	IDENT	28AP93
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Draw a text field
C Field 1 is status, and 2 is dialog
C
	IMPLICIT NONE
C
***	COMMON/CMN:COLORISS/
C
C Arguments:
	INTEGER		FIELD
	CHARACTER*(*)	STRING
	INTEGER		POSX,POSY
	INTEGER		SIZE
	INTEGER		LENG
	INTEGER		COL
C
C workspace
	INTEGER		PX,PY
C
	IF (FIELD.LE.0.OR.FIELD.GT.2) GOTO 9999
C
	IF (STRING.EQ.' ') GOTO 9999
C
C put an update here, bacause menu-plane drawing does not seem to
C work after initialise and drawing vectors until an update is done
CCC	IF (.NOT.KRSUPD) THEN
CCC	   KRSUPD = .TRUE.
CCC	   CALL SI_UPDATE
CCC	ENDIF
C
	PX = POSX*480/1024
	PY = POSY*480/1024
C
	PX = PX/8 - 30
	PY = PY/16 - 15
	CALL SI_DRAW_TEXT(PX,PY,%REF(STRING),LEN(STRING))
C
9999	RETURN
	END	
C
C***********************************************************************
C
	SUBROUTINE	KRISS_MENU(ORGX,ORGY,BOXX,BOXY,SIZX,SIZY,DSL,COL)
C
**	MODULE KRISS_MENU
**	IDENT	28AP93
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Draw a screen menu
C
	IMPLICIT NONE
C
***	COMMON/CMN:COLORISS/
C
C Arguments:
	INTEGER		ORGX,ORGY
	INTEGER		BOXX,BOXY
	INTEGER		SIZX,SIZY
	INTEGER*4	DSL(2,*)	! character descriptors
	INTEGER		COL
C
C workspace
	INTEGER		X,Y,X2,Y2,OFFY
	INTEGER		IX,IY,P,L
C
C put an update here, bacause menu-plane drawing does not seem to
C work after initialise and drawing vectors until an update is done
CCC	IF (.NOT.KRSUPD) THEN
CCC	   KRSUPD = .TRUE.
CCC	   CALL SI_UPDATE
CCC	ENDIF
C
	MBOXX = BOXX
	MBOXY = BOXY
C
C decide the sizes of things
C we are passed pixels in the range 0-1023, and need to
C convert to pixels in 0-479 320, or text in 1-40 and 1-20
C
	MSIZX = SIZX*60/1024
	IF (MSIZX.LT.2) MSIZX = 2
	MSIZY = SIZY*30/1024
	IF (MSIZY.LE.0) MSIZY = 1
	OFFY = MSIZY/2
C
	MORGX = ORGX*60/1024 - 30
	MORGY = (ORGY+BOXY*SIZY)*30/1024 - 15
C
	P = 0
	DO 10 IY=0,MBOXY-1
	   Y = MORGY-IY*MSIZY
	   DO 10 IX=0,MBOXX-1
	      P = P+1
C
C calculate how many chars will fit in menu box
	      L = DSL(1,P).AND.65535
	      IF (L.LE.0) GOTO 10
	      IF (L.GE.MSIZX) L = MSIZX-1
	      X = MORGX+IX*MSIZX
	      CALL SI_DRAW_TEXT(X,Y-OFFY,%VAL(DSL(2,P)),L)
10	CONTINUE
C
C draw the dividing lines (after the text, since text erases char box)
	X = MORGX*8 - 4		! half char cell to left
	X2 = X + MBOXX*MSIZX*8
	Y = (MORGY+1)*16
	IF (MOD(MSIZY,2).EQ.0) Y = Y-8	! half char cell down
	DO 20 IY=0,MBOXY
	   CALL SI_DRAW_LINE(X,Y,X2,Y)
	   Y = Y - MSIZY*16
20	CONTINUE
C
	Y = (MORGY+1)*16
	IF (MOD(MSIZY,2).EQ.0) Y = Y-8	! half char cell down
	Y2 = Y - MBOXY*MSIZY*16
	X = MORGX*8 - 4		! half char cell to left
	DO 30 IX=0,MBOXX
	   CALL SI_DRAW_LINE(X,Y,X,Y2)
	   X = X + MSIZX*8
30	CONTINUE
C
9999	RETURN
	END	
