C
C Routine to support the KERN KRISS display
C
	SUBROUTINE KRISS_GPL(NCOORD,XCOORD,YCOORD,ZCOORD,ORG,VIS)
C
***	MODULE	KRISS_GPL
***	IDENT	17JA91
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author  Clarke Brunt
C
C Created 					CCB	8-Dec-1988
C
	IMPLICIT NONE
C
***	COMMON/CMN:KRISS/
C
C arguments
	INTEGER		NCOORD		! number of coords
	REAL		XCOORD(NCOORD)	! coordinate buffer
	REAL		YCOORD(NCOORD)	! ditto
	REAL		ZCOORD(NCOORD)
	REAL*8		ORG(2)		! origin offset
	INTEGER		VIS		! visibility
C
C workspace
	INTEGER		I
	INTEGER		START
C
C check if need new line descriptor
C Can only continue old line if there is an existing line, the
C visibility is the same, and the lines join up
	START = 2			! assume beginning with 2nd point
	IF (NDESC.EQ.0) GOTO 10
	IF (VIS.NE.LINE_DESC(3,NDESC)) GOTO 10
	IF (XCOORD(1)+ORG(1).EQ.LINE_COORD(1,NPOINT).AND.
     &	    YCOORD(1)+ORG(2).EQ.LINE_COORD(2,NPOINT) ) GOTO 20
C
C add new descriptor
C If no more space for descriptors, or only space for 1 more point, then
C flush out. Limit refresh to MAXRF points.
10	IF (DIVRF.AND.(NDESC.EQ.MAXDESC.OR.NPOINT.GE.MAXRF-1)) GOTO 999
	IF (NDESC.EQ.MAXDESC.OR.NPOINT.GE.MAXPOINT-1) CALL KRISS_FLUSH
	NDESC = NDESC+1
	LINE_DESC(1,NDESC) = 0		! no points so far
	LINE_DESC(2,NDESC) = 1		! always 1
	LINE_DESC(3,NDESC) = VIS
	START = 1			! begin with 1st point
C
C add points to line
C If no more space for points, then flush out, and duplicate last point
C at start of new line
20	DO 30 I=START,NCOORD
C
C refresh limited to some number less than MAXPOINT so that the KRISS
C can cope with it
	   IF (DIVRF.AND.NPOINT.EQ.MAXRF) GOTO 999
	   IF (NPOINT.EQ.MAXPOINT) THEN
	      IF (KRSRTL) THEN
	         CALL CNGRTL(0)
	      ENDIF
	      CALL DRWLIN(SIDE,NDESC,LINE_DESC,LINE_COORD)
	      IF (KRSRTL) THEN
C
C KRSVIS is testing logical (.FALSE. by default). Can be patched.
C Setting KRISS invisible while panning and re-enabling RTL can reduce
C the amount of erratic KRISS behaviour (sideways jumping),
C but maybe not worthwhile since it flashes whole display.
	         IF (KRSVIS) CALL VISIBLE(0)
	         CALL PANOV
	         CALL CNGRTL(1)
	         IF (KRSVIS) CALL VISIBLE(1)
	      ENDIF
	      LINE_DESC(1,1) = 1
	      LINE_DESC(2,1) = 1
	      LINE_DESC(3,1) = VIS
	      LINE_COORD(1,1) = LINE_COORD(1,NPOINT)
	      LINE_COORD(2,1) = LINE_COORD(2,NPOINT)
	      LINE_COORD(3,1) = LINE_COORD(3,NPOINT)
	      NDESC = 1
	      NPOINT = 1
	   ENDIF
	   LINE_DESC(1,NDESC) = LINE_DESC(1,NDESC)+1
	   NPOINT = NPOINT+1
	   LINE_COORD(1,NPOINT) = XCOORD(I)+ORG(1)
	   LINE_COORD(2,NPOINT) = YCOORD(I)+ORG(2)
	   LINE_COORD(3,NPOINT) = ZCOORD(I)
30	CONTINUE
C
999	RETURN
	END
C
	SUBROUTINE KRISS_FLUSH
C
***	MODULE	KRISS_FLUSH
***	IDENT	17MY89
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author  Clarke Brunt
C
C Created 					CCB	8-Dec-1988
C
	IMPLICIT NONE
C
***	COMMON/CMN:KRISS/
C
C Flush out buffer
	IF (NDESC.GT.0.AND..NOT.DIVRF) THEN
	   IF (KRSRTL) THEN
	      CALL CNGRTL(0)
	   ENDIF
	   CALL DRWLIN(SIDE,NDESC,LINE_DESC,LINE_COORD)
	   IF (KRSRTL) THEN
	      IF (KRSVIS) CALL VISIBLE(0)
	      CALL PANOV
	      CALL CNGRTL(1)
	      IF (KRSVIS) CALL VISIBLE(1)
	   ENDIF
	   NDESC = 0
	   NPOINT = 0
	ENDIF
C
	RETURN
	END
C
	SUBROUTINE KRISS_UPDATE
C
***	MODULE	KRISS_UPDATE
***	IDENT	17MY89
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author  Clarke Brunt
C
C Created 					CCB	8-Dec-1988
C
	IMPLICIT NONE
C
***	COMMON/CMN:KRISS/
C
C Called from RFDRAW to get KRISS going after a re-draw.
C also perform registration and enable real-time loop
	CALL KRISS_FLUSH
	IF (.NOT.KRSRTL) THEN
	   IF (KRSVIS) CALL VISIBLE(0)
	   CALL PANOV
	   CALL CNGRTL(1)
	   IF (KRSVIS) CALL VISIBLE(1)
	   CALL P2DSM_P2_DEFINE_STAGE_MOTIONS(4)! enable model movement
	   KRSRTL = .TRUE.
	ENDIF
C
	RETURN
	END
C
C Initialise KRISS
C
	LOGICAL FUNCTION KRISS_INIT
C
***	MODULE	KRISS_INIT
***	IDENT	17MY89
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author  Clarke Brunt
C
C Created 					CCB	17-May-1989
C
	IMPLICIT NONE
C

***	PARAMETER/CMN:EFNLUN/
***	PARAMETER/LSL$CMNLSL:LSLLIBMSG/
***	COMMON/CMN:KRISS/
C
C functions called
	LOGICAL	GEMS_LOADED
	LOGICAL	BETA_IN_STEREO
	LOGICAL	DOWNLOAD_ORIENTATION_PARAMETERS
	INTEGER	KINIT
	INTEGER	CNGMD,WPIXSZ,WOVSZ,WOVOFS,VELOCITY
	LOGICAL FLROPN,FLRSTR
	LOGICAL	RDLONG,RDDBLE
	EXTERNAL KRISS_TMRAST,KRISS_KSRAST
C
C workspace
	INTEGER	DEVICE_NUMBER
	INTEGER	ERROR
	LOGICAL	OK
	LOGICAL	BETA_RUNNING
	CHARACTER*(*)	KRISS_FILE
	PARAMETER	(KRISS_FILE='KPH$WS:KRISS.DEF')
	INTEGER	ISIDE
	REAL*8	PXSIZE,PYSIZE
	INTEGER	OXSIZE,OYSIZE
	INTEGER	OXLOFF,OYLOFF,OXROFF,OYROFF
	REAL*8	LAG
	INTEGER	MODE
	INTEGER*2	TPTR
C
	KRISS_INIT = .TRUE.		! assume failure
	KRSRTL = .FALSE.		! loop not running
C
	CALL SAVE_TXTC(LINE_COORD,TPTR,255)	! save TXTC for LTIES2
C
C Initialise common variables
	NDESC = 0			! nothing in drawing buffer
	NPOINT = 0
	TMRTIM(1) = -7 500 000		! three quarter second
	TMRTIM(2) = -1
	KSRTIM(1) = -500 000		! one twentieth second
	KSRTIM(2) = -1
	DIVRF = .FALSE.			! refresh diversion off
	RFON = .FALSE.			! refresh off
	IF (TMREFN.LE.0) CALL LIB$GET_EF(TMREFN)
	IF (KSREFN.LE.0) CALL LIB$GET_EF(KSREFN)
	TMRADR = %LOC(KRISS_TMRAST)
	KSRADR = %LOC(KRISS_KSRAST)
C
C look for GS line in KERNIO.DAT - returns 0,1,2 for GMA0:,GMB0:,GMC0:
C Use MLIB routine. Too bad if not found - returns 0 anyway
	CALL RIODF_READ_IO_DEFINITION_FILE(%REF('GS'),DEVICE_NUMBER)
C
C ensure that the DSR is not moving (can cause KRISS offset)
	CALL P2DSM_P2_DEFINE_STAGE_MOTIONS(0)	! disable model movement
C
C Check if the GEMS is loaded, and running BETA. If not load it
	IF (GEMS_LOADED(DEVICE_NUMBER,BETA_RUNNING)) THEN
	   IF (BETA_RUNNING) GOTO 10
	ENDIF
	CALL WRITEF('Downloading run-time to KRISS')
	CALL FGINIT_KRISS(DEVICE_NUMBER,ERROR)
	IF (ERROR.NE.0) THEN
	   CALL WRITEF('Error from FGINIT_KRISS')
	   GOTO 9990
	ENDIF
C
C Initialise run time system (also clears VIS memory)
10	ERROR = KINIT()
	IF (ERROR.NE.0) THEN
	   CALL WRITEF('Error from KINIT')
	   GOTO 9990
	ENDIF
C
C try for lookup file KPH$WS:KRISS.DEF
	ERROR = FLROPN(PRTLUN,KRISS_FILE,OK)
	IF (.NOT.ERROR)THEN
	   CALL WRITEF('Error opening file %S',KRISS_FILE)
	   CALL LSL_PUTMSG(ERROR)
	   IF (ERROR.EQ.LSL__SYSOPEN) CALL LSL_PUTMSG(OK)
	   GOTO 8100
	ENDIF	
	CALL FLRSEL(PRTLUN)			! select it
	ERROR = FLRSTR(,,OK)			! skip blank line
	IF (.NOT.ERROR) GOTO 8000
	ERROR = FLRSTR(,,OK)
	IF (.NOT.ERROR) GOTO 8000
	CALL BSLN
	IF (RDLONG(ISIDE)) GOTO 7000		! 1-left, 3-stereo
	ERROR = FLRSTR(,,OK)
	IF (.NOT.ERROR) GOTO 8000
	CALL BSLN
	IF (RDDBLE(PXSIZE)) GOTO 7000		! pixel size
	IF (RDDBLE(PYSIZE)) GOTO 7000
	ERROR = FLRSTR(,,OK)
	IF (.NOT.ERROR) GOTO 8000
	CALL BSLN
	IF (RDLONG(OXSIZE)) GOTO 7000		! overlay size
	IF (RDLONG(OYSIZE)) GOTO 7000
	ERROR = FLRSTR(,,OK)
	IF (.NOT.ERROR) GOTO 8000
	CALL BSLN
	IF (RDLONG(OXLOFF)) GOTO 7000		! overlay offset
	IF (RDLONG(OYLOFF)) GOTO 7000
	IF (ISIDE.EQ.3) THEN
	   IF (RDLONG(OXROFF)) GOTO 7000	! and for right side
	   IF (RDLONG(OYROFF)) GOTO 7000
	ENDIF
	ERROR = FLRSTR(,,OK)
	IF (.NOT.ERROR) GOTO 8000
	CALL BSLN
	IF (RDDBLE(LAG)) GOTO 7000		! lag factor
	CALL FLRCLO(PRTLUN)
C
C set KRISS parameters
	MODE = 1
	IF (ISIDE.EQ.3) MODE = 2
	ERROR = CNGMD(MODE)
	IF (ERROR.NE.0) CALL WRITEF('Error from CNGMD')
	ERROR = WPIXSZ(1,PXSIZE,PYSIZE)
	IF (ERROR.NE.0) CALL WRITEF('Error from WPIXSZ')
	IF (ISIDE.EQ.3) THEN
	   ERROR = WPIXSZ(2,PXSIZE,PYSIZE)
	   IF (ERROR.NE.0) CALL WRITEF('Error from WPIXSZ')
	ENDIF
	ERROR = WOVSZ(OXSIZE,OYSIZE)
	IF (ERROR.NE.0) CALL WRITEF('Error from WOVSZ')
	ERROR = WOVOFS(1,OXLOFF,OYLOFF)
	IF (ERROR.NE.0) CALL WRITEF('Error from WOVOFS')
	IF (ISIDE.EQ.3) THEN
	   ERROR = WOVOFS(2,OXROFF,OYROFF)
	   IF (ERROR.NE.0) CALL WRITEF('Error from WOVOFS')
	ENDIF
	ERROR = VELOCITY(LAG)
	IF (ERROR.NE.0) CALL WRITEF('Error from VELOCITY')
C
1000	OK = DOWNLOAD_ORIENTATION_PARAMETERS()
	IF (.NOT.OK) CALL WRITEF('Error from DOWNLOAD')
C
C Check whether in stereo, and set SIDE for DRWLIN calls
	IF (BETA_IN_STEREO()) THEN
	   SIDE = 3
	   MENU_PLANE = 4
	ELSE
	   SIDE = 1
	   MENU_PLANE = 2
	ENDIF
C
	CALL KRISS_VISIBLE(0)		! set the screen(s) invisible
	CALL REGISTRATION		! register KRISS/DSR
	CALL P2DSM_P2_DEFINE_STAGE_MOTIONS(0)	! disable model movement
	CALL CNGRTL(0)			! run time loop not running
	CALL KRISS_OFFSET(XOFF,YOFF)	! apply any encoder offset
	CALL GCLEAR(MENU_PLANE,0,ERROR)	! clear menu plane
	CALL KRISS_VISIBLE(1)		! set the screen(s) visible
	CALL STCWIN(3,200,0,1024,1024,256,256,ERROR)! menu window
	CALL GOPAN(3,0,0)		! pan overlay
	CALL GCRSET(1,1,0,1,0,ERROR)	! size of cursor
	CALL KRISS_SIDE(MENU_SIDE)
C
	KRISS_INIT = .FALSE.		! success
	GOTO 9990
C
C error in line from file
7000	CALL WRITEF('Error in KRISS definition file')
	GOTO 8100
C
C file read error
8000	CALL WRITEF('Error reading line from file %S',KRISS_FILE)
	CALL LSL_PUTMSG(ERROR)
	IF (ERROR.EQ.LSL__SYSREAD) CALL LSL_PUTMSG(OK)
8100	CALL WRITEF('KRISS parameters defaulted')
	CALL FLRCLO(PRTLUN)
	GOTO 1000			! re-join code
C
9990	CALL RESTORE_TXTC(LINE_COORD,TPTR,255)
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	KRISS_DISMOD(N)
C
**	MODULE KRISS_DISMOD
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Set display mode to stored or refresh
C
	IMPLICIT NONE
C
***	COMMON/CMN:KRISS/
C
C Arguments:
	INTEGER		N		! 0->stored, else refresh
C
	IF (N.EQ.0) THEN
	   DIVRF = .FALSE.		! set diversion
	ELSE
	   CALL KRISS_FLUSH		! flush out anything
	   DIVRF = .TRUE.		! set diversion
	ENDIF
C
	RETURN
	END	
C
C***********************************************************************
C
	SUBROUTINE	KRISS_REFRSH
C
**	MODULE	KRISS_REFRSH
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Set refresh picture going
C
	IMPLICIT NONE
C
***	COMMON/CMN:KRISS/
C
	TMRON = .TRUE.
	CALL KRISS_TMRAST
C
	RETURN
	END	
C
C***********************************************************************
C
	SUBROUTINE	KRISS_TMRAST
C
**	MODULE	KRISS_TMRAST
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Refresh timer AST
C
	IMPLICIT NONE
C
***	COMMON/CMN:KRISS/
C
	IF (TMRON) THEN			! if timer on then
C
C if the KRISS tracking timer is on, then don't actually flash the
C refresh, so that full attention is paid to tracking the cursor
	   IF (.NOT.KSRON) CALL KRISS_DRAWRF	! draw refresh
C
C re-schedule ourselves in a while (if required)
	   IF (TMRON) CALL SYS$SETIMR(
     &		%VAL(TMREFN),TMRTIM,%VAL(TMRADR),%VAL(TMREFN))
	ENDIF
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	KRISS_RFSTOP
C
**	MODULE	KRISS_RFSTOP
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Stop the refresh picture
C
	IMPLICIT NONE
C
***	COMMON/CMN:KRISS/
C
	IF (TMRON) THEN				! if timer is on
	   TMRON = .FALSE.			! request off
	   CALL SYS$CANTIM(%VAL(TMREFN),)	! cancel it
	   IF (RFON) CALL KRISS_DRAWRF		! remove refresh
	   NDESC = 0				! nothing in buffer
	   NPOINT = 0
	   DIVRF = .FALSE.			! diversion off
	ENDIF
	RFON = .FALSE.				! refresh not now on
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	KRISS_DRAWRF
C
**	MODULE	KRISS_DRAWRF
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Draw the refresh picture
C
	IMPLICIT NONE
C
***	COMMON/CMN:KRISS/
C
C workspace
	INTEGER	I
C
C refresh buffer	
	IF (NDESC.GT.0) THEN
	   CALL DRWLIN(SIDE,NDESC,LINE_DESC,LINE_COORD)
C
C invert visibilities
	   DO 10 I=1,NDESC
	      LINE_DESC(3,I) = -LINE_DESC(3,I)
10	   CONTINUE
	ELSE
	   TMRON = .FALSE.	! no refresh, so cancel timer
	ENDIF
C
	RFON = .NOT.RFON
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	KRISS_VISIBLE(VIS)
C
**	MODULE	KRISS_VISIBLE
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Set KRISS visibility
C
	IMPLICIT NONE
C
***	COMMON/CMN:KRISS/
C
C arguments
	INTEGER	VIS
C
C workspace
	INTEGER	IERR
C
C external entry point also sets visibility of menu plane
	CALL GOYSEL(MENU_PLANE,VIS,IERR)	
C
C internal entry point does image only
	ENTRY	VISIBLE(VIS)
C
	CALL CNGDIS(1,VIS)		! set the screen visibility
	IF (SIDE.EQ.3) CALL CNGDIS(2,VIS)
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	KRISS_VECT(X1,Y1,X2,Y2)
C
**	MODULE	KRISS_VECT
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Draw vector in menu plane
C
	IMPLICIT NONE
C
***	COMMON/CMN:KRISS/
C
C arguments
	INTEGER	X1,X2,Y1,Y2
C
C workspace
	INTEGER	IERR
C
	CALL GTHINV(MENU_PLANE,X1,Y1,X2,Y2,255,IERR)
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	KRISS_RECT(X1,Y1,X2,Y2)
C
**	MODULE	KRISS_RECT
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Clear rectangle in menu plane
C
	IMPLICIT NONE
C
***	COMMON/CMN:KRISS/
C
C arguments
	INTEGER	X1,X2,Y1,Y2
C
C workspace
	INTEGER	IERR
C
	CALL GRFILL(MENU_PLANE,X1,Y1,X2,Y2,0,IERR)
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	KRISS_TRACK
C
**	MODULE	KRISS_TRACK
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Turn on KRISS cursor and track to follow DSR
C
	IMPLICIT NONE
C
***	COMMON/CMN:KRISS/
C
	CALL P2DSM_P2_DEFINE_STAGE_MOTIONS(0)	! disable model movement
	CALL GCRONF(1)				! turn on the cursor
	KSRON = .TRUE.
	CALL KRISS_KSRAST			! start timer
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	KRISS_STOP(IX,IY)
C
**	MODULE	KRISS_STOP
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Turn off KRISS cursor and return position
C
	IMPLICIT NONE
C
***	COMMON/CMN:KRISS/
C
C arguments
	INTEGER	IX,IY
C
	KSRON = .FALSE.				! request off
	CALL SYS$CANTIM(%VAL(KSREFN),)		! cancel it
	CALL GCRRD(IX,IY)			! read cursor position
	CALL GCRONF(0)				! turn off the cursor
	CALL P2DSM_P2_DEFINE_STAGE_MOTIONS(4)	! enable model movement
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	KRISS_KSRAST
C
**	MODULE	KRISS_KSRAST
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Cursor timer AST
C
	IMPLICIT NONE
C
***	COMMON/CMN:KRISS/
C
	REAL*8	X,Y,Z
	INTEGER	IX,IY
C
	INTEGER	FAC
	DATA	FAC/2/
C
	IF (KSRON) THEN			! if timer on then
	   CALL P2REM_P2_READ_ENCODER_MOVEMENTS(X,Y,Z)
	   IX = INT(X)/FAC
	   IY = INT(Y)/FAC
	   IF (IX.NE.0.OR.IY.NE.0) CALL GCRMOV(IX,IY)
C
C re-schedule ourselves in a while (if required)
	   CALL SYS$SETIMR(
     &		%VAL(KSREFN),KSRTIM,%VAL(KSRADR),%VAL(KSREFN))
	ENDIF
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	KRISS_SIDE(N)
C
**	MODULE KRISS_SIDE
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Change menu plane colour to appear in left/right/both
C
	IMPLICIT NONE
C
***	COMMON/CMN:KRISS/
C
C Arguments:
	INTEGER		N		! 1/2/3 = left/right/both
C
C workspace
	INTEGER		R,G,B,ERROR
	DATA		B/0/
C
	CALL GOYSEL(MENU_PLANE,N,ERROR)	
	IF (N.NE.0) THEN
	   R = 0
	   G = 0
	   IF ((N.AND.1).NE.0) R=255		! red for 1 and 3
	   IF ((N.AND.2).NE.0) G=255		! green for 2 and 3
	   CALL GOYCOL(MENU_PLANE,R,G,B,ERROR)	! menu
	   CALL GCRCOL(R,G,B)			! cursor
	   MENU_SIDE = N			! remember
	ENDIF
C
	RETURN
	END	
C
C***********************************************************************
C
	SUBROUTINE	KRISS_SUSPEND(ON)
C
**	MODULE KRISS_SUSPEND
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Suspend highlighting (while we perform some other KRISS drawing
C into the menu plane)
C
	IMPLICIT NONE
C
***	COMMON/CMN:KRISS/
C
C Arguments:
	LOGICAL		ON		! suspend, or resume
C
C pretending that the cursor tracking is on is enough
	KSRON = ON
C
	RETURN
	END	
C
C***********************************************************************
C
	SUBROUTINE	KRISS_REGIST(ACTION)
C
**	MODULE KRISS_REGIST
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Perform manual registration
C
	IMPLICIT NONE
C
***	COMMON/CMN:KRISS/
C
C overlay on KERN P2PLIB Pascal common block
	INTEGER*4	P3_IO
	COMMON/P3_IO/	P3_IO
C
C Arguments:
	INTEGER		ACTION
C
C functions
	INTEGER		DSR_TRN
C
C workspace
	INTEGER		ISIDE
	REAL*8		XOLD(2),YOLD(2),XNEW(2),YNEW(2)
	INTEGER		XSHIFT(2),YSHIFT(2)
	INTEGER*2	IOSB(4)
	BYTE		BUFF
	INTEGER		BUTTON
	CHARACTER*5	SIDENAME(2)/'left','right'/
C
C cancel any active read from DSR
	CALL SYS$CANCEL(%VAL(P3_IO))
C
	CALL KRISS_SUSPEND(.TRUE.)	! suspend refresh
	IF (ACTION.EQ.0) THEN		! return to default regist.
	   XOFF(1) = 0
	   XOFF(2) = 0
	   YOFF(1) = 0
	   YOFF(2) = 0
	   CALL REGISTRATION
	   GOTO 1000
	ENDIF
C
C peform a manual registration
	CALL P2DSM_P2_DEFINE_STAGE_MOTIONS(0)	! disable plate movement
	CALL CNGRTL(0)			! stop real time loop
	CALL PANOV			! prob. not needed
	CALL P2RPC_P2_READ_PLATE_COORDINATES(
     &			XOLD(1),YOLD(1),XOLD(2),YOLD(2))
C
	DO 20 ISIDE=1,SIDE/2+1
	   XSHIFT(ISIDE) = 0
	   YSHIFT(ISIDE) = 0
	   CALL WRITEF(
     &	    'Register %S plate, right button to accept, left to abort',
     &		SIDENAME(ISIDE))
	   CALL P2DSM_P2_DEFINE_STAGE_MOTIONS(ISIDE)! allow movement
C
C wait for button press...
C Use the release of the buttons, rather than the press, so that the
C release is not left pending for INTERACT
C
10	   CALL DSR_START(KSREFN,IOSB,,BUFF)
	   CALL SYS$WAITFR(%VAL(KSREFN))
	   IF (.NOT.IOSB(1)) GOTO 10	! eh?
	   BUTTON = DSR_TRN(BUFF)
	   IF (BUTTON.NE.17.AND.BUTTON.NE.19) GOTO 10
	   IF (BUTTON.EQ.17) GOTO 20	! abort, left release
C
	   CALL P2RPC_P2_READ_PLATE_COORDINATES(
     &			XNEW(1),YNEW(1),XNEW(2),YNEW(2))
	   XSHIFT(ISIDE) = NINT(XOLD(ISIDE)-XNEW(ISIDE))
	   YSHIFT(ISIDE) = NINT(YOLD(ISIDE)-YNEW(ISIDE))
	   XOFF(ISIDE) = XOFF(ISIDE) + XSHIFT(ISIDE)
	   YOFF(ISIDE) = YOFF(ISIDE) + YSHIFT(ISIDE)
20	CONTINUE
C
	CALL VISIBLE(0)				! display off
	CALL KRISS_OFFSET(XSHIFT,YSHIFT)	! apply the offsets
	CALL VISIBLE(1)				! display on
	CALL CNGRTL(1)				! start RTL
	CALL P2DSM_P2_DEFINE_STAGE_MOTIONS(4)	! enable model movement
1000	CALL KRISS_SUSPEND(.FALSE.)		! resume refresh
C
	RETURN
	END	
C
C***********************************************************************
C
	SUBROUTINE	KRISS_OFFSET(X,Y)
C
**	MODULE KRISS_OFFSET
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Offset KRISS encoders to register
C
	IMPLICIT NONE
C
***	COMMON/CMN:KRISS/
C
C arguments
	INTEGER	X(2),Y(2)	! the offsets to apply
C
C workspace
	INTEGER	ISIDE
	INTEGER	IXENC,IYENC
C
	DO 10 ISIDE=1,SIDE/2+1
	   CALL RENC19(ISIDE,IXENC,IYENC)
	   IXENC = IXENC + X(ISIDE)
	   IYENC = IYENC + Y(ISIDE)
	   CALL WENC19(ISIDE,IXENC,IYENC)
10	CONTINUE
	CALL PANOV
C
	RETURN
	END
