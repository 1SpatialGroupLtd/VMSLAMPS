C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1984-09-13 18:49:38.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION WRTMID(NUMCOM,WRTCOD,WRTCMT)	
C
***	IDENT	13SE84
***	MODULE	WRTMID
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RJH	10-SEP-1984
C
C Description
C
C    This function was designed for use by the program COMGEN, which
C is part of the LITES2 Command Interface. The purpose of the function
C is to read a Macro source file containing a primary command table,
C and to call the routines which write code and comments to output
C files.
C    The Macro file should contain only one command table, and any
C comments appearing within the table, (i.e. between the start and
C finish macros), will be reproduced in the output files. The functions
C which write to the output files are passed as arguments to this
C function. The other argument passed is the total number of commands.
C On the first pass of the Macro source file, this argument should
C contain a dummy value, but on the second pass it should contain the
C number of commands. It is used by one of the function arguments
C during the second pass.
C    The function returns true and a message is output if a read or
C write error occurs.
C
	IMPLICIT NONE
C
C Included Parameter Files
C
***     PARAMETER/CGEN:LUN/		! logical unit constants
***     PARAMETER/CGEN:LEN/		! character string lengths
C
C Local Parameters
C
	CHARACTER*(K)	START		! start of command table
	PARAMETER	(START = '$CMTAB')
	CHARACTER*(K)	FINISH		! end of command table
	PARAMETER	(FINISH = '$CMEND')
	CHARACTER*(K)	COM		! start of command
	PARAMETER	(COM = '$CMD')
	CHARACTER*(K)	CMT		! start of comment
	PARAMETER	(CMT = ';')
C
C Function Arguments
C
	LOGICAL		WRTCOD		! function to write code
	LOGICAL		WRTCMT		! function to write comment
C
C Other arguments
C
	INTEGER*4	NUMCOM		! total no. of commands
C
C Functions called
C
	LOGICAL		GETCOM		! reads command
	LOGICAL		GETCMT		! reads comment line
	LOGICAL		GETSTR		! reads a string
	INTEGER*4	FLRSEL		! selects file for reading
C
C Local Variables
C
	INTEGER*4	RETCOD		! file I/O return code
	INTEGER*4	IERR		! system error code
	INTEGER*4	SAVED		! saved total no. of commands
	LOGICAL		ERROR		! read/write error ?
	LOGICAL		END		! end of command table ?
	CHARACTER*(K)	FIRSTR		! first string on line
	CHARACTER*(S)	CMTSTR		! comment line
	CHARACTER*(C)	COMSTR		! command
C
C Initialisation
C
	SAVED = NUMCOM			! save no. of commands
	NUMCOM = 0
	END = .FALSE.
C
C Select input file for reading
C
	RETCOD = FLRSEL(MARLUN,IERR)
	ERROR = (RETCOD .NE. 0)
C
C Error or find start of command table
C
	IF (ERROR) THEN
	   CALL EXPAND('Error selecting file ')
	   CALL WRITAP('for reading on logical unit %N',MARLUN)
	   CALL LIB$SIGNAL(%VAL(IERR))
	ELSE
10	   ERROR = GETSTR(FIRSTR)	! repeat until found start
	   IF ((FIRSTR .NE. START) .AND. (.NOT. ERROR)) GO TO 10
	ENDIF
C
C Read through command table, outputting each line in the appropriate
C manner
C
20	IF (ERROR .OR. END) GO TO 30	! while not end/error do
	ERROR = GETSTR(FIRSTR)		! get key string
	IF (.NOT. ERROR) THEN
	   IF (FIRSTR .EQ. CMT) THEN	! comment
	      CALL GETCMT(CMTSTR,NUMCOM)
	      ERROR = WRTCMT(CMTSTR)
	   ELSE IF (FIRSTR .EQ. COM) THEN	! command
	      NUMCOM = NUMCOM + 1
	      ERROR = GETCOM(COMSTR,NUMCOM)
	      IF (.NOT. ERROR) ERROR = WRTCOD(COMSTR,NUMCOM,SAVED)
	   ELSE IF (FIRSTR .EQ. FINISH) THEN	! end of table
	      END = .TRUE.
	   ELSE				! error
	      ERROR = .TRUE.
	      CALL EXPAND('Error in command table syntax ')
	      CALL WRITAP('near command no. %N',NUMCOM)
	   ENDIF
	ENDIF
	GO TO 20			! branch back for test
30	CONTINUE
C
C Assign function value
C
	WRTMID = ERROR
C
C Return
C
	RETURN
	END
