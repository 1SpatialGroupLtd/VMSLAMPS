C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-06-03 15:15:38.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	PROGRAM INSTGEN
C
***	IDENT	03JN94
***	MODULE	INSTGEN
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C A program to write the installation dependant part of the licence
C subroutine for LITES2
C
C Author R.W. Russell	 9-Aug-1985
CMOD modified to cope with SID '80000000'X - the sid for the alpha
C
	IMPLICIT	NONE
C
C Parameter blocks
C
	INCLUDE '($RMSDEF)'
	INCLUDE '($SSDEF)'
C
C common blocks
C
***	COMMON/LSL$CMNVIO:TXTC/
C
C functions called
C
	INTEGER*4	LIB$GET_FOREIGN
C
C variables
C
C We need to specify that the error is not to be reflected
C
	PARAMETER	SUPERR = '10000000'X
C
	CHARACTER*(*)	LICENCE		! name of parameter file
	PARAMETER	(LICENCE='LICPAR.PAR')
	CHARACTER*(*)	CUSTDAT		! name of output file
	PARAMETER	(CUSTDAT='CUSTDAT.SRC')
	INTEGER*4	MAX_CPUS	! maximum number of CPUs
	PARAMETER	(MAX_CPUS=50)
	INTEGER*4	MAX_FACS	! maximum number of
	PARAMETER	(MAX_FACS=100)	! facilities to be checked
	INTEGER*4	MAX_ENCS	! maximum number of encryptions
	PARAMETER	(MAX_ENCS=20)
C
	CHARACTER*80	CUSTOMER	! installation
	CHARACTER*80	ANNOUNCEMENT	! announcement
	CHARACTER*9	DTE
	CHARACTER*8	TIM
	INTEGER*4	ANNOUNCEMENTL	! and its length
	INTEGER*4	CUSTOMERL	! length of customer name
	INTEGER*4	NO_CPUS		! number of CPUs
	INTEGER*4	CPUS(MAX_CPUS)	! and their numbers
	INTEGER*4	MODELS(MAX_CPUS)! and their models
	INTEGER*4	NO_ENCS		! number of encryptions
	INTEGER*4	ENCS(MAX_ENCS)	! and their codes
	INTEGER*4	ENC_LENS(MAX_ENCS)	! key lengths
	CHARACTER*20	ENC_KEYS(MAX_ENCS)	! and keys
	INTEGER*4	NO_USERS	! number of users
	INTEGER*4	NO_FACS		! number of facilities
	INTEGER*4	EXP_DATE	! expiry date
	INTEGER*4	TODAY
	INTEGER*4	FACS(MAX_FACS)	! and their identities	
	CHARACTER*20	FACSC(MAX_FACS)	! and what they mean
	INTEGER*4	FACSCL(MAX_FACS)! and their lengths
	INTEGER*4	LEN
	INTEGER*4	IERR,I
	CHARACTER*80	BUFF		! buffer
	INTEGER*4	OP,EQ,CL	! positions in BUFF
	CHARACTER*1	ANS
	INTEGER*4	L0,L1,L2,L3,L4
	REAL		R
	INTEGER*4	EXIT_STATUS
	INTEGER*4	C
C
	DATA	NO_USERS/7/
C
C ask for installation name  (may be on command line)
C
	IERR=LIB$GET_FOREIGN(CUSTOMER,'Installation at:- ',CUSTOMERL)
	IF (.NOT.IERR.OR.CUSTOMERL.LE.0) THEN
	   IF (.NOT.IERR.AND.IERR.NE.RMS$_EOF) THEN
	      TYPE *,'Error reading command line ',IERR
	   ENDIF
	   GOTO 900
	ENDIF
C
C get the announcement message
C
    2	CONTINUE
	TYPE *,' '
	TYPE 400
    3	READ (*,504,ERR=1,END=900),ANNOUNCEMENTL,ANNOUNCEMENT
	IF (ANNOUNCEMENTL.LE.0) THEN
	   GOTO 900
	ELSEIF (ANNOUNCEMENTL.GT.80) THEN
	   TYPE *,'Length of name for announcement too long'
	   GOTO 2
	ELSEIF (ANNOUNCEMENT(1:1).EQ.'!') THEN		! ignore comments
	   GOTO 3
	ENDIF
	GOTO 5
    1	TYPE *,'Error reading name for announcement'
	GOTO 2
C
C get expiry date
C
    5	CONTINUE
	TYPE *,' '
	TYPE 500
	READ (*,502,ERR=5,END=900),LEN,EXP_DATE
	IF (LEN.EQ.0) THEN
	   EXP_DATE=-1
	ELSEIF(EXP_DATE.LE.0) THEN
	   GOTO 5
	ELSE
	   CALL LIB$DAY(TODAY)
	   EXP_DATE=TODAY+EXP_DATE
	ENDIF
C
C now get IDs of licenced CPUs from terminal
C
	NO_CPUS=0
	TYPE *,' '
   10	CONTINUE
	IF (NO_CPUS.LT.MAX_CPUS) THEN
	   NO_CPUS=NO_CPUS+1
   15	   R=NO_CPUS
	   L1=LOG10(R)+1			! for variable format
	   TYPE 501,NO_CPUS
	   READ (*,504,ERR=20,END=900),LEN,BUFF
	   IF (LEN.LE.0) THEN
	      NO_CPUS=NO_CPUS-1
	      GOTO 40
	   ENDIF
C
C try for a CPU and a MODEL
C
	   READ (BUFF(:LEN),519,ERR=16,END=900),CPUS(NO_CPUS),MODELS(NO_CPUS)
	   GOTO 30
   16	   MODELS(NO_CPUS) = 0
	   READ (BUFF(:LEN),502,ERR=20,END=900),LEN,CPUS(NO_CPUS)
	   GOTO 30
   20	   TYPE *,'Error in reading CPU id'
	   GOTO 15
C
   30	   IF (CPUS(NO_CPUS).EQ.-1) THEN
	      CPUS(1)=CPUS(NO_CPUS)
	      NO_CPUS=1
	      IF (EXP_DATE.EQ.-1) THEN	! default limit to 30 days
	         CALL LIB$DAY(TODAY)
	         EXP_DATE=TODAY+30
	      ENDIF
	      R=EXP_DATE-TODAY
	      L0=LOG10(R)+1
	      TYPE 514,EXP_DATE-TODAY
	      GOTO 99
	   ELSEIF (CPUS(NO_CPUS).LT.-1 .AND.
     &	            CPUS(NO_CPUS).GT. -2147483648) THEN
	      TYPE *,'Invalid CPU id'
	      GOTO 15
	   ENDIF
	ELSE
	   GOTO 40
	ENDIF
	GOTO 10
C
C get facilities from parameter file
C
   40	CONTINUE
	TYPE *,' '
	NO_FACS=0
	OPEN (UNIT=1,FILE=LICENCE,READONLY,ERR=50,STATUS='OLD')
	GOTO 60
C
C error in opening file
C
   50	CONTINUE
	TYPE 503,LICENCE
	GOTO 900
C
C read records until "INTEGER" is found
C
   60	CONTINUE
	READ(1,504,ERR=70,END=90),LEN,BUFF
	IF (INDEX(BUFF,'C').EQ.1) GOTO 60	! ignore comment
	IF (INDEX(BUFF,'	INTEGER').EQ.0) GOTO 60 ! INTEGER ?
C
C read next line
C
	READ(1,504,ERR=70,END=80),LEN,BUFF
C
C valid line?
C
	IF (INDEX(BUFF,'PARAMETER').EQ.0) GOTO 80
	OP=INDEX(BUFF,'_')
	EQ=INDEX(BUFF,'=')
	CL=INDEX(BUFF,')')
	IF (OP.EQ.0.OR.EQ.EQ.0.OR.CL.EQ.0) GOTO 80
C
C accept this facility ?
C
	TYPE 507,BUFF(OP+1:EQ-1)
	READ (*,504,END=900,ERR=90),I,ANS
	IF (I.GT.0.AND.(ANS.EQ.'Y'.OR.ANS.EQ.'y')) THEN
	   READ (BUFF(EQ+1:CL-1),508,ERR=80),FACS(NO_FACS+1)
	   FACSCL(NO_FACS+1)= EQ-OP-2
	   FACSC(NO_FACS+1) = BUFF(OP+1:EQ-1)
	   NO_FACS=NO_FACS+1
	   IF (NO_FACS.EQ.MAX_FACS) THEN
	      TYPE *,'That is maximum number of facilities '
	      GOTO 90
	   ENDIF
	ENDIF
	GOTO 60
C
   70	CONTINUE
	TYPE 505,LICENCE
	CLOSE (UNIT=1)
	GOTO 900
   80	CONTINUE
	TYPE 506,BUFF(1:LEN),LICENCE
	GOTO 60
   90	CONTINUE
	CLOSE (UNIT=1)
C
C now get codes and keys of encryptions from terminal
C
	NO_ENCS=0
	TYPE *,' '
   91	CONTINUE
	IF (NO_ENCS.GE.MAX_ENCS) GOTO 99
C
	NO_ENCS=NO_ENCS+1
   92	R=NO_ENCS
	L1=LOG10(R)+1			! for variable format
	TYPE 515,NO_ENCS
	READ (*,502,ERR=93,END=94),LEN,ENCS(NO_ENCS)
	IF (LEN.LE.0) GOTO 95
	TYPE 516,NO_ENCS
	READ (*,504,ERR=93,END=94),ENC_LENS(NO_ENCS),ENC_KEYS(NO_ENCS)
	IF (ENC_LENS(NO_ENCS).LE.0) GOTO 95
	IF (ENC_LENS(NO_ENCS).GT.20) THEN
	   TYPE *,'Encryption key too long'
	   GOTO 92
	ENDIF
	GOTO 96
C
   93	TYPE *,'Error in reading encyption code or key'
	GOTO 92
C
   94	CONTINUE			! treat EOF same as blank
   95	NO_ENCS=NO_ENCS-1
	GOTO 99
C
C Mess with key, to conceal it.
C This same manipulation must be used by encypting programs.
C If this generates trailing spaces, which are ignored when the key
C is used, then too bad, as long as it isn't ALL space.
C
   96	DO 97 I=1,ENC_LENS(NO_ENCS)
	   C = ICHAR(ENC_KEYS(NO_ENCS)(I:I))
	   IF (C.LT.32.OR.C.GT.126) GOTO 98
	   C = C-32		! now 0-94
	   C = MOD( C+2*I-1, 95 )
	   C = C+32
	   IF (C.EQ.ICHAR('''')) C = ICHAR('"')	! avoid Fortran problem
	   IF (C.EQ.ICHAR(' ').AND.I.EQ.ENC_LENS(NO_ENCS)) C = ICHAR('~')
	   ENC_KEYS(NO_ENCS)(I:I) = CHAR(C)
   97	CONTINUE
C
	IF (ENCS(NO_ENCS).NE.0 .AND. ENC_KEYS(NO_ENCS).NE.' ') GOTO 91
C
   98	TYPE *,'Invalid encryption code or key'
	GOTO 92
C
C get time and date
C
   99	CONTINUE
	CALL DATE(DTE)
	CALL TIME(TIM)
C
C now output file
C
	OPEN (UNIT=1,ERR=130,STATUS='NEW',FILE=CUSTDAT,
     &	      CARRIAGECONTROL='LIST')
C
	IF (EXP_DATE.GT.0) THEN
	   R=EXP_DATE
	   L0=LOG10(R)+1
	ELSEIF (EXP_DATE.EQ.0) THEN
	   L0=1
	ELSE
	   L0=2
	ENDIF
C
	IF (NO_FACS.GT.0) THEN
	   R=NO_FACS
	   L1=LOG10(R)+1			! for variable format
	ELSE
	   L1=1
	ENDIF
C
	IF (NO_CPUS.GT.0) THEN
	   R=NO_CPUS
	   L2=LOG10(R)+1			! for variable format
	ELSE
	   L2=1
	ENDIF
C
	IF (NO_USERS.GT.0) THEN
	   R=NO_USERS
	   L3=LOG10(R)+1			! for variable format
	ELSE
	   L3=1
	ENDIF
C
	IF (NO_ENCS.GT.0) THEN
	   R=NO_ENCS
	   L4=LOG10(R)+1			! for variable format
	ELSE
	   L4=1
	ENDIF
C
	WRITE(1,509),CUSTOMER(1:CUSTOMERL),DTE,TIM,
     &	             ANNOUNCEMENT(1:ANNOUNCEMENTL),
     &	             EXP_DATE,NO_FACS,NO_CPUS,NO_USERS,NO_ENCS
C
C
	DO 100,I=1,NO_FACS
	   R=I
	   L1=LOG10(R)+1			! for variable format
	   IF (FACS(I).GT.0) THEN
	      R=FACS(I)
	      L2=LOG10(R)+1			! for variable format
	   ELSE
	      L2=1
	   ENDIF
	   WRITE(1,510),I,FACS(I)
	   WRITE(1,513),I,FACSC(I)(1:FACSCL(I))
  100	CONTINUE
C
	WRITE (1,512)
	DO 110,I=1,NO_CPUS
	   R=I
	   L1=LOG10(R)+1			! for variable format
	   R=CPUS(I)
	   IF (CPUS(I).GT.0) THEN
	      L2=LOG10(R)+1
	   ELSEIF(CPUS(I).EQ.-1) THEN
	      L2=2
	   ELSE
	      L2=LOG10(-R)+2
	   ENDIF
	   WRITE(1,511),I,CPUS(I)
	   R=MODELS(I)
	   IF (MODELS(I).EQ.0) THEN
	      L2=1
	   ELSEIF(MODELS(I).EQ.-1) THEN
	      L2=2
	   ELSEIF(MODELS(I).GT.0) THEN
	      L2=LOG10(R)+1
	   ELSE
	      L2=LOG10(-R)+2
	   ENDIF
	   WRITE(1,520),I,MODELS(I)
  110	CONTINUE
C
	WRITE (1,512)
	DO 120,I=1,NO_ENCS
	   R=I
	   L1=LOG10(R)+1			! for variable format
	   IF (ENCS(I).GT.0) THEN
	      R=ENCS(I)
	      L2=LOG10(R)+1
	   ELSEIF(ENCS(I).EQ.-1) THEN
	      L2=2
	   ELSE
	      R=ENCS(I)
	      L2=LOG10(-R)+2
	   ENDIF
	   WRITE(1,517),I,ENCS(I)
	   WRITE(1,518),I,ENC_KEYS(I)(1:ENC_LENS(I))
  120	CONTINUE
	WRITE (1,512)
	EXIT_STATUS=SS$_NORMAL
	GOTO 1000
C
C error in opening file
C
  130	CONTINUE
	TYPE 503,CUSTDAT
C
  400	FORMAT('$Name to be used in announcement :- ')
  500	FORMAT(' Length of licence (in days) '/
     &	         '$(demos default to 30 days) - c/r for nolimit :- ')
  501	FORMAT('$CPU ',I<L1>,'	:- ')
  502	FORMAT(Q,I11)
  503	FORMAT(' Failed to open file:- ',A)
  504	FORMAT(Q,A)
  505	FORMAT(' Error in reading from file ',A)
  506	FORMAT(' Unexpected line "',A,'"'/'in file ',A)
  507	FORMAT('$',A,'?',T17,' ')	! need space to get tab!
  508	FORMAT(I<CL-EQ+1>)
  509	FORMAT('C'/
     &	       'C Local Variables and data for the installation at ',
     &	       A/'C'/
     &	       'C Created by INSTGEN on ',A,' at ',A/'C'/
     &	       '	CHARACTER*(*)	PLACE'/
     &	       '	PARAMETER	(PLACE='/
     &	       '     &	''',A,''')'/
     &	       '	INTEGER*4	EXP_DATE'/
     &	       '	PARAMETER	(EXP_DATE=',I<L0>,')',
     &	       '	! expiry date (indays)'/
     &	       '	INTEGER*4	NO_FACS,NO_CPUS,NO_USERS,NO_ENCS'/
     &	       '	PARAMETER	(NO_FACS=',I<L1>,')',
     &	       '	! number of licensed facilities'/
     &	       '	PARAMETER	(NO_CPUS=',I<L2>,')',
     &	       '	! number of licensed CPUs'/
     &	       '	PARAMETER	(NO_USERS=',I<L3>,')',
     &	       '	! number of licensed users'/
     &	       '	PARAMETER	(NO_ENCS=',I<L4>,')',
     &	       '	! number of licensed encryptions'/'C'/
     &	       '	INTEGER*4	FACS(MAX(1,NO_FACS))',
     &	       '	! licensed facilities'/
     &	       '	CHARACTER*20	FACSC(MAX(1,NO_FACS))',
     &	       '	! and in character form'/
     &	       '	INTEGER*4	CPUS(MAX(1,NO_CPUS))',
     &	       '	! licensed CPUs'/
     &	       '	INTEGER*4	MODELS(MAX(1,NO_CPUS))',
     &	       '	! and models'/
     &	       '	INTEGER*4	ENCS(MAX(1,NO_ENCS))',
     &	       '	! licensed encryption codes'/
     &	       '	CHARACTER*20	ENC_KEYS(MAX(1,NO_ENCS))',
     &	       '	! and their keys'/'C'/'C Data statements'/'C')
  510	FORMAT('	DATA		FACS(',I<L1>,')	/',I<L2>,'/')
  511	FORMAT('	DATA		CPUS(',I<L1>,')	/',I<L2>,'/')
  512	FORMAT('C')
  513	FORMAT('	DATA		FACSC(',I<L1>,') /''',A,'''/')
  514	FORMAT(' Demonstration licence valid for ',I<L0>, ' days')
  515	FORMAT('$Encryption code ',I<L1>,'	:- ')
  516	FORMAT('$Encryption key ',I<L1>,'	:- ')
  517	FORMAT('	DATA		ENCS(',I<L1>,')		/',I<L2>,'/')
  518	FORMAT('	DATA		ENC_KEYS(',I<L1>,')	/''',A,'''/')
  519	FORMAT(I11,I11)
  520	FORMAT('	DATA		MODELS(',I<L1>,')	/',I<L2>,'/')
C
C error exit
C
  900	CONTINUE
	EXIT_STATUS=SS$_ABORT		! this seems an appropriate
					! error message
 1000	CALL EXIT(EXIT_STATUS.OR.SUPERR)
	END

