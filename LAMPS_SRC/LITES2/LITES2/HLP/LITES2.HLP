
1 Initialisation_Commands
The following LITES2 commands are used to carry out initialisation operations

FRT SRI TRI MAPS IFF INSITU READONLY MENU PUCK TRACK DESCRIBE SCALE
FIDUCIAL SETUP OSSETUP AFTER PROJECTION

1 MAPS
Specify number of IFF files to be read in, or the number of IFF files
that can be open at once.

Format:  MAPS [subcommand] integer

Valid in state  INITIAL

2 IN
Allows a number of IFF files to be specified in INITIAL state.
Default is 1 so command is only needed if more than one map is
to be read using IFF, READONLY, or INSITU commands.

Note that only maps specified in INITIAL state can be set up on
a digitising table.

The command MAPS 0 may be used, provided that at least one image file
has been specified using IMAGE commands, to cause LITES2 to move into
READY state without any IFF files. The image files can then be
displayed as required.

Format:  MAPS [IN]  integer

eg       MAPS 4
or       MAPS IN 4

2 OPEN
Specifies number of IFF files that LITES2 can keep open at once when
multiple maps are being used.
LITES2 opens and closes IFF files as they are accessed, and if dealing
with a large number of files (eg when using LITES2 in a "continuous
mapping" mode) it may be advantageous to allow more than a maximum of 3
(the default) to be open at once.
Users should note that there is a limit to the number of files (of all
kinds) that they can have open at once. As the MAPS OPEN command only
takes effect when LITES2 accesses files (after they have been read in)
unrecoverable errors can occur if this number of open files is exceeded
at this stage.

Note that it is NOT necessary to allow LITES2 to open all the IFF files
it is accessing at once. Unless the MAPS OPEN command shows an obvious
performance improvement, it is recommended that it should not be used.

Format:  MAPS OPEN  integer

1 IFF
Specifies name of IFF file to be edited.
Use READONLY command (qv) if file is not to be amended.
Default filename is LSL$IF:---.IFF;0

Format:  IFF  filename

eg       IFF DU3:[LSL.IFF]TESTCARD
or       IFF J5012

Valid in state  INITIAL READY

1 READONLY
Specifies IFF file to be read in and inspected without amendment.
See IFF command for syntax, and for amending files.

Format:  READONLY  filename

Valid in state  INITIAL READY

1 INSITU
Specifies IFF file to be edited in situ (no new version created).
Not recommended for normal use as original data can be lost if
the session is aborted for any reason.
See IFF command for syntax.

Format:  INSITU  filename

Valid in state  INITIAL READY

1 FRT
Specifies FRT file name and causes it to be read in.
An FRT file contains a Feature Representation Table which tells the
program how to draw features according to their Feature Codes (FCs).
Default filename is LSL$FRT:---.FRT;0
If used in READY state to read a new FRT, then great care should be
taken that the feature codes in the file are compatible with any maps
which are in use at the time.

Format:  FRT  filename

eg       FRT DR1:[LSL.FRT]TESTCARD
or       FRT OS

Valid in states  INITIAL READY

1 SRI
Specifies SRI (Symbol Representation IFF) file name.
An SRI file holds the shapes of symbols.
Default filename is the FRT filename (qv) with .SRI substituted
for .FRT
If used in READY state to read a new SRI, then great care should be
taken that the symbols in the file are compatible with those in any
maps which are in use at the time.

Format:  SRI  filename

eg       SRI DR1:[LSL.FRT]TESTCARD
or       SRI OS

Valid in states  INITIAL READY

1 TRI
Specifies TRI (Text Representation IFF) file name.
A TRI file holds the shapes of characters.
Default filename is the FRT filename (qv) with .TRI substituted
for .FRT
If used in READY state to read a new TRI, then great care should be
taken that the characters in the file are compatible with the text
features in any maps which are in use at the time.

Format:  TRI  filename

eg       TRI DR1:[LSL.FRT]TESTCARD
or       TRI OS

Valid in states  INITIAL READY

1 OSSETUP
This command has been superceded by the PTOLERANCE OSSETUP command.
When used in conjunction with the SETUP TABLE_COUNTS command, then
this command must be given after the SETUP TABLE_COUNTS command.

Overrides the default settings for doing a multiple point setup.
It defines the number of boxes the map is to be split into  along
with the number of observations required at each point, the number
of observations at each point that must fall within the tolerance of the
mean, and that tolerance.

Format:  OSSETUP fulx fuly repeat numok tolerance

where fulx         is the number of boxes in the X direction (integer)
      fuly         is the number of boxes in the Y direction (integer)
      repeat       number of observations of each point      (integer)
      numok        number that must be within tolerance      (integer)
      tolerance    tolerance in table units                  (real)

The defaults are: 5  5  4  2  19.05

Valid in state  INITIAL (privileged command;
                         only valid in initialisation file)

1 AFTER
Defines a command line which will be obeyed immediately after some
event.

Due to the nature of the # command separator, it is not possible to put
more than one command in this line, but the command line may be a macro
or an @file command.

The current command lines that are set up can be shown with the SHOW
AFTER  command.

Format:  AFTER  subcommand

Valid in states  INITIAL READY

2 ABORT
Defines a command which will be obeyed after an ABORT INPUT or CTRL/C,
has caused LITES2 to return to interactive input, while executing a
macro or obeying a command read from a command file.

If no command is given, then any existing command will be removed, and 
no extra action will be taken after an ABORT occurs.

Format:  AFTER ABORT [command]

eg       AFTER ABORT CLEAR_UP

2 ERROR
Defines a command which will be obeyed after an error,
which has caused LITES2 to return to interactive input, while executing
a macro or obeying a command read from a command file.

If no command is given, then any existing command will be removed, and 
no extra action will be taken after an error occurs.

Format:  AFTER ERROR [command]

eg       AFTER ERROR CLEAR_UP

2 INPUT
Defines a command which will be obeyed after the last map is read in,
just after LITES2 enters READY state from INITIAL state. If there are
any errors during input (such as "feature code not found"), then the
command will only be obeyed if ENABLE CONTINUE is in force.

If no command is given, then any existing command will be removed, and 
no extra actions will be taken after reading the maps.

Format:  AFTER INPUT [command]

eg       AFTER INPUT @SET_OPERATION.LCM

1 MENU
Specifies the dimensions and name of a menu.
This information is used to define the shape and size of the menu, and
also the reserved macro names which are used to program the menu. The
menu name must consist of up to 16 alphabetic characters (including
underline). The operator will be prompted to digitise the corners of the
menu when all the IFF files to be read have been specified. 

Format:  MENU  x y name

eg       MENU 9 14 CMDMEN

Valid in states  INITIAL READY

1 PUCK
Specifies characteristics of a digitising puck, screen menu or function
buttons. The information on device number, number of buttons or boxes and
name is used to define the reserved macro names which are used to program
the puck buttons using the MACRO command (qv). The puck name must consist
of up to 16 alphabetic characters (including underline).  A puck can only
be defined once in any run of LITES2. 

Device numbers are 0 for keyboard function buttons, 1 for screen, 2 for
bitpad, 3 for the digitising table, 4 for tracker ball or mouse, 5 for
separate function buttons, and 6 for a stereo digitiser. The devices are
initialised using the appropriate ENABLE command (qv), except for the
keyboard function buttons which are always enabled. 

Format:  PUCK  devno buttons name

eg       PUCK 3 16 ALTEKPUCK

Valid in states  INITIAL READY

1 TRACK
Specifies the device number for a tracking area on a digitising table.
See the PUCK command for information on device numbers.
A tracking area is a rectangular area which is always mapped onto the
current screen window.

Format:  TRACK  devno

eg       TRACK  2

Valid in states  INITIAL READY

1 DESCRIBE
Describe certain entities to allow them to be displayed.

Format:  DESCRIBE  subcommand

Valid in states  INITIAL READY

2 MACRO
Describe the annotation for a macro.
This description is used to annotate screen menu boxes when they are
available, and any macro so described will have the annotation output by
the SHOW MACRO and SHOW MENU commands (qv). 

Format:  DESCRIBE MACRO macroname text

2 SCREENMENU
Describe the layout for a screen menu (when available).
This command only has any effect if the hardware allows screen menus.

The screen menu must have previously defined as a PUCK on device 1 (the  
screen).

Then the arguments give:

     1) the number of columns in the menu
     2) the number of rows in the menu
     3) the location of the menu with respect to the locating point
        (in the range 0 - 8, as for text justification)
     4) the x size of the menu (mm on the screen or as a fraction of the
        screen if in the range 0.0 to 1.0)
     5) the y size of the menu (mm on the screen or as a fraction of the
        screen if in the range 0.0 to 1.0)
     6) the x position of the locating point of the menu (as a fraction
        between 0.0 and 1.0 of the X extent of the screen)
     7) the y position of the locating point of the menu (as a fraction
        between 0.0 and 1.0 of the Y extent of the screen)
     8) the name of the menu
     9) the label to be written into the top of the menu when it is
        displayed

The menu is displayed on the screen by the ENABLE SCREENMENU command
(qv)


Format:  DESCRIBE SCREENMENU integer integer integer real real real real
                             menuname label

eg       DESCRIBE SCREENMENU 2 16 6 50.0 100.0 1.0 0.0 screen Screen menu
or       DESCRIBE SCREENMENU 2 16 6 0.15  0.3  1.0 0.0 screen Screen menu

         This command describes a screen menu that is 2 columns by 16 
         rows, 50.0 mm wide and 100mm long (or in the second case 0.15
         times the screen width by 0.3 times the screen height), located
         at the bottom right of the screen, that had previously been
         defined by a PUCK command to be called SCREEN.  It will have the
         header "Screen menu".

1 SCALE
Specifies drawing scale to be used for texts, symbols etc. 

As these are specified in the FRT in sheet mm, a correspondence
between IFF file units and sheet mm must be specified somehow.

The default action is to take the SHEET scale from the IFF Map
Descriptor (MD) entry. If this is unset, or DISABLE DESCRIPTOR is
used, then a scale from the IFF Map Header (MH) entry is used. If this
is also unset, or if DISABLE EXTERNAL is used, then SCALE FACTOR 1 is
assumed. 

If the IFF units are related to the map sheet (eg inches, table units
etc) then SCALE FACTOR should be used to relate them to sheet mm.

If the IFF units are related to the ground (eg map projection 
coordinates)  SCALE IFF should be used to relate these units to ground
mm (the default is SCALE IFF 1000 - ie IFF units are metres) and
SCALE SHEET relates ground mm to map sheet mm.

If the nature of the IFF units is unknown, SCALE AUTO will produce
a scale factor such that 1mm on the screen represents 1mm on the map

If the SCALE SHEET command has been given, but it is subsequently
required to revert to the default action of taking the scale from the
map header or map descriptor, this may be achieved by giving a SCALE
FACTOR or SCALE AUTO command, followed by an appropriate SCALE IFF
command. 

Format:  SCALE  subcommand

Valid in state  INITIAL

2 AUTO
Automatic scaling with whole sheet equal to whole screen.

Format:  SCALE AUTO

2 FACTOR
Number of sheet mm represented by 1 IFF file unit.

Format:  SCALE FACTOR  real

2 IFF
Number of ground mm represented by 1 IFF file unit.

Format:  SCALE IFF real

2 SHEET
Number of ground units represented by 1 sheet unit
(eg 50000 for a 1:50000 sheet).

Format:  SCALE SHEET real

1 SETUP
Specifies type of digitising table setup.

Maps can be set up on the table using several procedures to determine
the position of the control points of the map on the table. The control
points of the map are taken from the right hand side of the CP entry in
the IFF file. 

Having determined the position of the control points, several different
transformations can be used to relate any point digitised on the table
to the map coordinate system.

By default, all the maps specified while in INITIAL state are set up on
the table when the workstation is initialised (on going from INITIAL
state to READY state) or after a SETUP AGAIN command.  The commands
SETUP CANCEL and SETUP MAP allow a selection of the maps that have been
read in to be set up. SETUP INITIAL returns to the default action
outlined above.

There is a limit of 9 maps that can be set up at any one time.

Format:  SETUP  subcommand

Valid in states  INITIAL READY

2 AGAIN
Set up maps and menus on table again.

Format:  SETUP AGAIN

2 CANCEL
Cancels all the maps currently on the list to be set up, either when the
workstation is initialised or after a SETUP AGAIN command. After this
command has been given, only maps specified with a SETUP MAP command are
put on this list.

Format:  SETUP CANCEL

2 EDGE
This setup uses points digitised along the neat edges of the map sheet
to determine where the control points lie.

For this setup the right hand side of the CP entry in the IFF file must
represent a true rectangle.

The operator is requested to digitise points along each map edge in turn.
The number of points to be digitised on each edge can be set by the
PTOLERANCE EDGESETUP command.

The digitised points are used to define 4 straight lines, using a least
squares regression, and if the Root Mean Square (RMS) of the residuals
for any line is greater than a limit (that can be set by the PTOLERANCE
EDGESETUP command) then the operator is required to digitise points
along that edge again.

The 4 lines are then used to calculate the corners of the map. Having
done this it is possible to check if the digitised points are well
enough distributed along the edges. This is done using the concept of an
"ideal gap" for each edge. This is the gap that would be left between
points if they were evenly distributed along the edge. Points must be
greater than a minimum factor of this gap apart, and less than a maximum
factor of this gap apart. These factors can be set by the PTOLERANCE
EDGESETUP command. If the points on any edge do not conform to this
spacing, the operator is required to redigitise points along that edge
again.

Several sets of observations can be made, the number being set by the
PTOLERANCE EDGESETUP command. In this case the maximum range of the
positions of the derived corner points at any corner must not exceed a
specified tolerance, and the sum of the ranges must also not exceed a
specified tolerance. These tolerances are given in the PTOLERANCE
EDGESETUP command. If either of these criteria are not met, then the
operator is requested to reobserve sets, until there are the required
number of sets that fulfil the criteria. Where there are more than one
acceptable group of sets, the group that gives the minimum sum of the
ranges is accepted.

The mean of the accepted sets of map corners is used as the values
for the transformation.

Format:  SETUP EDGE

2 FOUR
This setup uses 4 points digitised near the corners of the map sheet
(default).
The coordinates of these points has to be predefined in the Control
Point (CP) entry of the input IFF file.
Corners are requested in the order NW, SW, SE, NE.

Format:  SETUP FOUR

2 INITIAL
Cancels the effect of SETUP CANCEL, so that maps specified while in
INITIAL state will be added to the list of maps to be set up on the
table at the appropriate time.

Format:  SETUP INITIAL


2 MAP
Add the specified map to the list of maps that will be set up on the
table at the appropriate time.

Format:  SETUP MAP n

2 NONE
No setup i.e. no map documents on table (menus and tracking area will
still be set up)

Format:  SETUP NONE

2 OSMULTI
OS multiple point or piecemeal setup.

For this setup the right hand side of the CP entry in the IFF file must
represent a true rectangle.

The map is divided into boxes, and the corner of each box is digitised
on the table. Each point is digitised several times, and a mean taken.
Observations that fall outside a predefined tolerance must be repeated.
The number of boxes, number of repetitions and acceptance criteria are
set by the PTOLERANCE OSSETUP command. 

Grid intersections are requested from the SW corner, going E.

A transformation is set up for the whole map, and also one for each
individual box. When a point is digitised on the table then the whole 
map transformation is used to determine which box the point falls in, 
and it is the transformation for this box that is used to determine the 
coordinates of the digitised point in the map coordinate system.

Format:  SETUP OSMULTI

2 TABLE_COUNT
Used to specify the size of the counts returned by the digitising table
in mm. The default value is 0.02 mm, the setting Laser-Scan recommend
for ALTEK digitising tables.

Format:  SETUP TABLE_COUNT real

2 TRANSFORM
Determines transformation relating table coordinates to map coordinates,
(x,y) -> (X,Y). 
Where the transformation is overdetermined, a least squares solution is
employed to determine the best fit and  there will be residuals left at
the control points. A warning is given if the maximum residual is
greater than RESID_WARN times the range of the map, and the
transformation will not be accepted if the maximum residual is greater
than RESID_LIMIT of the range of the map. RESID_WARN and RESID_LIMIT are
set by the PTOLERANCE RESIDUAL command (qv).

These residuals can be a result of observational errors (which the least
squares solution should deal with sensibly). They can also occur when
the control points on the source document do not define the same shape
as the control points in the IFF file, perhaps because of paper
distortion. (Note that in this case none of the transformations will
solve the problem with any degree of certainty).

Format:  SETUP TRANSFORM type

         where type = AFFINE (default)
                    = EXTENDED
                    = ORTHOGONAL
                    = PROJECTIVE

3 AFFINE
Affine four point transformation.

   This transformation is of the form
         X = a0 + a1*x + a2*y
         Y = b0 + b1*x + b2*y

         It corrects for scaling, rotation, shearing  and
         translation. Shapes may be altered, but in a predictable
         way (eg a square may become a parallelogram).
         It only requires three points to define it, so there will
         be residuals left at the control points. 

         This is the default transformation.

3 EXTENDED
Non-affine four point transformation.

   This transformation is of the form
         X = a0 + a1*x + a2*y + a3*x*y
         Y = b0 + b1*x + b2*y + b3*x*y

         It will force the 4 control points to fit (so there is no
         checking carried out), but it is not obvious how other points
         in the map sheet will be distorted.
         This transformation is used by other Laser-Scan programs,
         for example LASERAID.

3 ORTHOGONAL
This is sometimes known as the HELMERT transformation.

   This is of the form
         X = a0 + a1*x - a2*y
         Y = a3 + a2*x + a1*y

         This transformation corrects for scaling, rotation and 
         translation. Shapes are maintained. It only requires two
         points to define it, so there will be residuals left at
         the control points.

3 PROJECTIVE
Projective four point transformation.

   This is of the form
         X = (a0*x + a1*y + a2) / (a6*x + a7*y +1)
         Y = (a3*x + a4*y + a5) / (a6*x + a7*y +1)

         This transformation uses a projective algorithm to relate
         table coordinates to map coordinates. It forces the 4
         control points to fit (so there is no checking carried
         out). This transformation is often used with the EDGE
         setup procedure.

2 TWO
2-point setup (SW and NE corners).

This is a fast setup. It has the effect of forcing the use of the 
orthogonal transformation (with no checking)

Format:  SETUP TWO

1 Option_Commands
The following LITES2 commands are used to carry out option selections

ENABLE DISABLE TOGGLE INTERPOLATE SORT REFRESH SCROLL TOLERANCE
PTOLERANCE VERIFY SECTOR RANGE

1 ENABLE
Activates specified optional facilities.
Use DISABLE (qv) to deactivate facilities.

Format:  ENABLE  subcommand

Valid in all states (except where stated with a particular subcommand)

2 AND
Use a logical AND of whatever regions have been selected.
(To be considered, a feature must be in all the selected regions)

Note: if any one region has more than one area selected (eg INREGION and
CUTREGION) and ENABLE AND has been given, no features are selected
because the three areas of a region (INREGION, CUTREGION and OUTREGION)
define mutually exclusive features.

The default setting is DISABLE AND, when a logical OR of the selected
features is carried out.
(To be considered, a feature must be in at least one of the selected
regions) 

Format:  ENABLE AND

2 APPEND
When writing a edge matching problem file, append to existing file
(if one exists). If disabled (default) an existing file is overwritten
by the new information.

Format:  ENABLE APPEND

2 BALL
Tracker ball (or mouse) is to be used to control the cursor.

Format:  ENABLE BALL

2 BELL
Give audible warning when "moan" message is output.

Format:  ENABLE BELL

2 BIG
Use big cursor.

Format:  ENABLE BIG

2 BITPAD
Bitpad to be used.

Format:  ENABLE BITPAD

Valid in state  INITIAL

2 BLANK
Blank out the data behind texts with the specified colour.
This command is only effective on hardware with a raster display and
affects both text features and text in annotation.

The size of the area blanked out is controlled by the TOLERANCE EXPAND
command.

The default colour is 0 (background). If another colour is specified
then it becomes the default. The current blanking colour is shown with
the SHOW ANNOTATION command. This default can be overridden in any
particular overlay by the OVERLAY BLANK command.

Format:  ENABLE BLANK [colour]

2 BLINK
Blink the cursor.

Format:  ENABLE BLINK

2 BOX
Draw text features as their bounding box, rather than as characters.
This may speed up the display of map data.

Format:  ENABLE BOX

2 BRIEF
Only commands actually executed are written to the journal file
(default).
If disabled, then other commands which change the flow of control, such
as JUMP, macro names, @filename, are also journalled, but are preceded by
the comment character '!'.

Format:  ENABLE BRIEF

2 BUTTON
Use function buttons (if present in hardware).

Function buttons are not supported on all hardware. See hardware
dependent reference manual.

The buttons are defined using the PUCK command on device 5.

Format:  ENABLE BUTTON

2 CHECKS
When defining macros and user variables, check that the name does not
already exist.

If CHECKS are disabled, the user is allowed to multiply define macros
and variables, but every time the user defined macro table and variable
table is accessed then a warning message is output (even if the
multiply defined entity is not being accessed). If a multiply defined
entity is accessed its value is undefined.

The purpose of this command is to speed up reading large, proven
initialisation files in production environments by disabling checks
while they are being read. To get the maximum benefit the following
guidelines should be followed:

     1) All primitive LITES2 commands should be preceded by a "%"
     2) Initialisation of variables (with LET commands) should be
        grouped together at the end of the initialisation after
        all the variables have been declared.
     3) Checks should be ENABLEd before returning to interactive
        mode. There is no advantage in having checks disabled
        while not declaring macros and variables.

Format:  ENABLE CHECKS

2 CLEAR
Clear the screen on initial draw (default).

Format:  ENABLE CLEAR

2 COMPOSITE
Allow use of composite text (bent text, and paragraphed text). 
Composite text may contain more than one text string, with independent
position, angle, size, font etc.
An appropriate licence is required to use this command.

Format:  ENABLE COMPOSITE

Valid in state  INITIAL

2 CONTINUE
When an error occurs, continue execution with the next command.
If disabled (default) then if an error occurs during expansion of
a macro command or command file, the macro or file is abandoned and
control returns to interactive.

Format:  ENABLE CONTINUE

2 DATE
Update ACs holding "date of last edit" information for edited features.
If no AC of the required type is present then one is inserted. 
The optional argument specifies the AC type which has to be updated. 
(current default 110).
This option is only valid if FLAGS is enabled.

Format:  ENABLE DATE [integer]

2 DESCRIPTOR
Take origin and scale information from Map Descriptor not Map Header.

The origin (and scale, when EXTERNAL is enabled) of maps are to be taken
from the map descriptor (MD) in the IFF file, rather than from the map
header (MH) (default). 
If there is no type 2 map descriptor, or if the entries in it are zero
then the values from the map header are used if they are set.

Format:  ENABLE DESCRIPTOR

2 DIAGNOSTICS
Program development diagnostics to be output.

Format:  ENABLE DIAGNOSTICS

2 DSR
See ENABLE SD (stereo digitiser)

Format:  ENABLE DSR

2 ECHO
Type out all commands as they are executed.
Useful to trace the progress of command files or macros.

Format:  ENABLE ECHO

2 ENCLOSING
Draw centre of fill areas, even when their borders do not impinge on the
screen.
Default action is to only draw areas whose boundaries impinge on the
screen.

Format:  ENABLE ENCLOSING

Valid in state  INITIAL

2 ENDS
Find line features only at ends.
Normally invoked automatically during JOIN and TIE operations.

Format:  ENABLE ENDS

2 EXIT
Exit from program after an EXIT, DUMP, or QUIT command (default).

If EXIT is disabled, then LITES2 will return to INITIAL state
after these commands, in preparation for reading in new map(s).

Format:  ENABLE EXIT

2 EXTERNAL
Use map scale in IFF header (default).
See SCALE command for further information.

Format:  ENABLE EXTERNAL

Valid in state  INITIAL

2 FILL
Draw area features (graphical type 12) filled according to the FRT
(default). If disabled, then all area features are drawn hollow
(just outlined).

Format:  ENABLE FILL

2 FIXED
Implements an enhanced squaring algorithm to hold points in place.

This is applies to SQUARE PART and SQUARE WHOLE. When this option is
enabled (default) the following features are included in the squaring
algorithm:

   1) Points specified with the PRIVILEGE POINT command are held fixed
   2) When base squaring, after all the bases have been used as data,
      the remaining unsquared lines are part squared.
   3) Redundant points are removed from parallel lines

See the LITES2 reference manual for more details of the squaring
algorithms used.

2 FLAGS
Flag edited and constructed features during editing.
Preserve edit and deleted flags on read in.
Preserve edited and deleted flags on output if SELECT OUTPUT deselected 
Activate selection by flags. (SELECT EDITED,DELETED,UNEDITED)
For detailed description of the effect of this option consult the
reference manual.

Format:  ENABLE FLAGS

2 GRAPHICS
Use graphic devices.
If graphics are disabled, then only the alphanumeric terminal is used.

Format:  ENABLE GRAPHICS

Valid in state  INITIAL

2 HEIGHT
Use text height from TH entry in IFF file, not from FRT.

Format:  ENABLE HEIGHT

Valid in state  INITIAL

2 HWTEXT
Use hardware text facilities on display. This option is only effective on
certain types of display.

The SIG6000 display will be loaded with the character shapes from the
TRI file, so that they are drawn much faster subsequently.

The MOTIF version will use either Display PostScript, or X-Windows
itself draw draw text if the FRT includes a hardware bit in the flags
entry for a text feature code.

Attempts to use hardware text on a device which does not support it
may result in text not appearing at all.

Format:  ENABLE HWTEXT

2 IFFLOCK
Lock IFF files to ensure that the same file is not edited by more than
one LITES2 user simultaneously (default).

Checks that the IFF file specified by an IFF or INSITU (not READONLY)
command is not already being edited by another LITES2 user. An error
message gives some details of the user accessing the file. No checking
is performed if the option is disabled.

The checking works across all the nodes in a VAXcluster for users in
the same group, but not for files accessed using DECnet (with node::
at the start of the file name).

Format:  ENABLE IFFLOCK

2 IFFMAP
Access workspace IFF files by mapping them into computer memory. 

The setting of the option at the time when each IFF file is specified
(using IFF, INSITU, or READONLY commands) is taken to apply to that
particular file. This option can give faster access, but needs a
certain amount of care in use. It cannot be used to access workspace
files over DECNET, and is not advisable when more than 3 maps are in
use simultaneously. Extending the file as a result of editing may lead
to fragmentation of the program address space, as might a series of
returns to INITIAL state followed by reading in of more maps. The
ideal use is for a READONLY background map. If this option is used
inappropriately, a "Virtual address space full" error may eventually
occur, which means that the number of virtual pages (as displayed by
$ SHOW PROCESS/CONTINUOUS) has exceeded the SYSGEN parameter
VIRTUALPAGECNT. 

Format:  ENABLE IFFMAP

2 INFORM
Allow output of INFORM and LEARNER messages.
Note: when disabled, commands like SHOW and EXAMINE will produce no
output.

Format:  ENABLE INFORM

2 INTERPOLATION
Draw time interpolation of graphical type 6 features.
Disable to speed up drawing of curved features (eg contour maps).

Format:  ENABLE INTERPOLATION

2 KRISS
See ENABLE SI (superimposition).

Format:  ENABLE KRISS [subcommand]

2 LEARNER
Extra messages to be output to aid a learner.

Format:  ENABLE LEARNER

2 MESSAGE
Allow output from MESSAGE commands even when INFORM is disabled.
This allows LITES2 informational messages to be suppressed while
still displaying messages from macros and command files. Disabled
by default.

Format:  ENABLE MESSAGE

2 MONITOR
Use table monitor to obtain data from digitising table

Format:  ENABLE MONITOR

Valid in state  INITIAL

2 NARROW
Do not expand window to fit screen shape.

If enabled, then draw the actual window defined using the WINDOW command,
rather than expanding it to fit the screen.

Format:  ENABLE NARROW

2 NOW
"Now in XXX state" message is output at every change of state

Format:  ENABLE NOW

2 PATTERN
Drawing of line patterns, including pattern filled areas (default).
If disabled then all lines are drawn solid.

Format:  ENABLE PATTERN

2 POSITIONING
Text positioning by 9 possible points (default).
If disabled then all texts are positioned by bottom left corner.

Format:  ENABLE POSITIONING

2 PRIMARY
Primary display to be used (default).

Format:  ENABLE PRIMARY

Valid in state  INITIAL

2 PSIZE
Height of text is in points, not mm (default).

Format:  ENABLE PSIZE

Valid in state  INITIAL

2 QUIET
Suppress acknowledgement of button presses with bell (default).

Format:  ENABLE QUIET

2 SAME_REVISION
Create output files with the same output revision level as the
corresponding input files.

When this option is disabled (the default state) output files are
created with the output revision level set by the logical name
LSL$IFF_OUTPUT_REVISION.  When files are merged on output, the type of
file output always depends on the setting of this logical name.

Format:  ENABLE SAME_REVISION

2 SCREEN
Use screen menu.

Screen menus are not supported on all hardware. See hardware
dependent reference manual.

The screen menu must previously have been defined using the PUCK command
on device 1 (the screen) (qv) and must also have been described using the
DESCRIBE SCREENMENU command (qv).

The boxes on the screen menu can be defined using a series of DESCRIBE
MACRO commands (qv).

Format:  ENABLE SCREEN

2 SCRUB
Deleted (but recoverable) features are to be 'scrubbed out' 

Scrubbing is done if the display permits (default). If disabled,
deleted features remain until a redraw is performed. This option only
applies to TEK4014 displays.

Format:  ENABLE SCRUB

2 SD
Allow 3D input from a stereo digitising instrument.

The stereo digitising instrument is to be used to control the cursor.
The instrument is initialised and driven to the LITES2 cursor
position. If the ENABLE SD command is given while in INITIAL state,
then the instrument will be initialised when the map(s) are read in.
While active, the floating mark will follow the LITES2 cursor
position, and pressing any button on the instrument will move the
LITES2 cursor to the position of the floating mark. SD may be enabled
or disabled at any time.

This option is only available with some versions of LITES2, and the
user should refer to the hardware dependent reference manual for
the possibilities available with his hardware.

Use of a stereo digitiser depends on a shared image pointed at by the
logical name LSL$LITES2_KERN_ROUTINES. This image is supplied by
Laser-Scan. The name of this image depends on what type of instrument
is to be used, and whether it is used with an image superimposition
system. 

Format:  ENABLE SD

2 SECONDARY
Secondary display to be used on a two screen workstation.

Format:  ENABLE SECONDARY

Valid in state  INITIAL

2 SEGMENTS
Graphics segments to be used on displays if supported (default).
The use of segments enables fast redraw of the picture, but may be
disabled if the map is too large for the display's segment store.
By enabling segments, when a map has been read in, the segment store
is emptied, and the the next draw command will fill the device's
segment store with the data that is displayed on the screen.

Format:  ENABLE SEGMENTS

2 SI
A stereo superimposition device is be used for display of data in a
stereo digitising instrument. This command is only valid in
conjunction with the ENABLE SD command. The superimposition device is
initialised and any subsequent LITES2 graphics will be drawn on it. If
the ENABLE SI command is given while in INITIAL state, then the device
will be initialised when the map(s) are read in. If the device is
already initialised, then any ENABLE/DISABLE SI commands will just
make the superimposition image visible/invisible. 

The subcommands (if given) control further SI options.

This option is only available with some versions of LITES2, and the
user should refer to the hardware dependent reference manual for
the possibilities available with his hardware.

Use of a stereo digitiser and superimposition device depends on a
shared image pointed at by the logical name LSL$LITES2_KERN_ROUTINES.
This image is supplied by Laser-Scan.  The name of this image depends
on what type of instrument is to be used, and whether it is used with
an image superimposition system.

Format:  ENABLE SI [subcommand]

3 DIALOG
Specifies area on the superimposition device to be used as a dialogue
area.  Messages may be written to this one line area using the ENABLE
SI MESSAGE command. The arguments specify the position of the bottom
left of the area, and also its height and length, all in pixels in the
range 0-1023. The maximum allowed height is 100. The default dialogue
area is at position 0,61 with height 20 and length 1023.

Format:  ENABLE SI DIALOG xpos ypos height length

3 MESSAGE
Displays the given text in the superimposition dialogue area. 
If no text is given, the area is cleared.
If the text is to have leading spaces or tabs, then it must be enclosed
in double quotes.

Format:  ENABLE SI MESSAGE  [text]

3 REGISTRATION
Performs a manual registration of the superimposition image with the
photographs. The command is only used with certain devices. On a KERN
DSR instrument, the user is prompted to move the photographs until
registration is achieved, and then press the right DSR button to
accept, or the left button to leave the registration unchanged. Once
set, the registration will be maintained for the duration of the
LITES2 session.  If the argument n is given as zero, then the effect
of any manual registration is removed.

Format:  ENABLE SI REGISTRATION [n]

3 SIDE
Specifies which eye is to see the superimposition screen menu, status
area, and dialogue area.
The argument should be 1 for left (default), 2 for right, 3 for both,
or 0 to make the menu invisible.

Format:  ENABLE SI SIDE side

3 STATUS
Specifies area on the superimposition display to be used as a status
area. When enabled, the area will continuously display the current
state, plus the currently set map, layer, and feature code. The
optional arguments specify the position of the bottom left of the
area, and also its height, all in pixels in the range 0-1023. The
maximum allowed height is 100. If the arguments are omitted, the
command just enables/disables the status area without changing its
position. The default status area is at position 0,30 with height 20.

Format:  ENABLE SI STATUS [xpos ypos height]

2 SORT
Re-draw features sorted by IFF file order or by FSN order, as specified
by the SORT command (qv).
The re-draw order may not be affected on displays using segments.

Format:  ENABLE SORT

2 STATUS
Inverse video status lines to be written on VDU screen.
This option requires a DEC VT100 VDU or equivalent, and reduces
the available scroll area. The position of the status line may also 
be specified by including an optional argument. The default position is
the bottom two lines of the screen.
DISABLE STATUS will increase the scroll area which has been set.

Format:  ENABLE STATUS integer

2 SUBSTITUTION
Allow substitution of command language variables.

Substitute the values of any variables enclosed in single quotation marks
into command lines. Must be disabled (default) if single quotes are to
be inserted in texts, for instance.

Format:  ENABLE SUBSTITUTION

2 TABLE
Digitising table to be used (default).

Format:  ENABLE TABLE

Valid in state  INITIAL

2 THICK
Draw using line thickness, if hardware permits.
If disabled then all segments are drawn minimum thickness.

Format:  ENABLE THICK

2 TRACEBACK
Traceback of routine calls is output for system errors (diagnostic).
If disabled (default) then just error message is output.

Format:  ENABLE TRACEBACK

2 VECTOR
Draw vectors as well as raster.
This command only has any effect when using raster images. By DISABLing
VECTOR the raster images can be redrawn without the vector data being
displayed.

Format:  ENABLE VECTOR

2 VERIFY
Allows verification of found features (default).
The style of verification is set by the VERIFY command (qv).

Format:  ENABLE VERIFY

2 Z
Allows LITES2 to be used as a 3 dimensional editor.
An appropriate licence is required to use this command.

See the chapter in the LITES2 reference manual about using LITES2 as
a 3 dimensional editor for more details on the effect of this command.

Format:  ENABLE Z

Valid in states  INITIAL READY

1 DISABLE
Deactivates specified optional facilities, see ENABLE command.

Format:  DISABLE  subcommand

Takes same subcommands as ENABLE (qv)

1 TOGGLE
Flips the activation state for specified optional facilities.
Alters the sense of the current setting of the specified facility.
See ENABLE command.

Format:  TOGGLE  subcommand

Takes same subcommands as ENABLE (qv)

1 SORT
Sets type of sorting used when re-drawing (if ENABLE SORT set).

Format:  SORT subcommand

Valid in all states

2 FSN
Re-draw features sorted in order of increasing Feature Serial Number.
This may be used to ensure that features such as filled areas are 
drawn first.

Format:  SORT FSN

2 GT
Re-draw features sorted by graphical type of features.
Features are drawn in the following order:

   1) Fill areas (graphical type  12)
   2) Line work  (graphical types 1 - 6)
   3) Symbols    (graphical types 7 - 9 and 11)
   4) Texts      (graphical type  10)

Within each of these groups, features are drawn in order of their feature
code.

Format:  SORT GT

2 IFF
Re-draw features sorted in IFF file order for efficiency.
This will often give a considerable speed increase for the
re-draw at the expense of possible conflicts of graphical type (default).

Format:  SORT IFF


2 PRIORITY
Re-draw features according to the priority defined for feature
codes in the PRIORITY entries in the FRT table that is being used.
If a feature code's priority is not defined in a PRIORITY record,
then it will be drawn at the default priority.
For features with the same priority, features are drawn in order of
their feature code.

The use of this sorting allows features to be drawn in a predictable
order, so that for example, one type of road will always lie over
another one. It also allows features to be drawn several times with
different representations, allowing complex line types to be
constructed, for example cased roads drawn by drawing a thick line
in the casing colour, followed by a thinner line in the fill colour.

Note that the components of a single feature may be drawn at different
times, so that road junctions, for example, will be correctly cased.

When drawing in this mode, colour 0 in the FRT table will be drawn in
background colour, allowing parts of features to blank out what is
below them.

When drawing texts in this mode, ENABLE BLANK will cause all but the
text representation with the highest priority to be invisible.

Format:  SORT PRIORITY

1 SCROLL
Sets the size and position of the scroll area on the terminal.
SCROLL 0 0 will use the maximum amount of screen area depending on 
the position of the status line.

Format:  SCROLL numlines startline

where numlines  is the number of lines in the scroll area (integer)
      startline is the first line of the scrolling area (integer)

Valid in all states

1 SECTOR
Sets the number of sectors in x and y directions for the spatial index.
This is a program tuning aid and is not recommended for operator use.

Increasing the number of sectors (up to the point where, on average,
there is one feature in each sector) will increase the speed of finding
and windowing operations; however there will be a increase in the time
taken to read maps into LITES2, and in the time taken to initialise
searches and redrawing the entire LITES2 area.

Increasing the number of sectors uses more system resources, and
LITES2 may exit with a "Insufficient virtual memory" error, while
reading in the map(s) or carrying out editing operations. In this
event either use fewer sectors, or see your system manager to get
your quotas increased.

The default state is the equivalent of a SECTOR 30 30 command.
When editing single standard map sheets, it is not usually
productive to increase the sectors to more than SECTOR 50 50, and
in fact a performance improvement may be noticed in some applications
if the number of sectors is reduced below the default. The command
DRAW GRID will display the sector grid as an aid to determining if
the current setting is sensible.

Format:  SECTOR  integer integer

Valid in state  INITIAL

1 RANGE
Specifies an area to be sectored which is not the default area. The
sector mechanism is used to provide the spatial index and fast find
mechanism.
By default the area that will be sectored is the combined range of all
maps and images specified in INITIAL state, plus 10% (i.e. 5% of the
combined range is added to all edges).

Format:  RANGE  subcommand

Valid in states  INITIAL READY

2 LIMITS
Specifies the area that will become the LITES2 coordinate space.
The coordinates are specified as full projection coordinates i.e.
coordinates that include any origin offset specified in the IFF files.

This command is intended for use when further maps will be read in
READY state. It may be used in READY state only when there are no maps
currently in use.

Note: 1) Used in INITIAL state, the specified range will be expanded by
         the range of maps and images also specified in INITIAL state.
         This expanded range will then be further expanded by 10%.
      2) Used in READY state, the specified range will be expanded by the
         range of the first map specified subsequently and any images
         in use when the map is specified.
         Again, this expanded range will be further expanded by 10%.
      3) Any expanded range will persist on return to INITIAL state.

Format:  RANGE LIMITS xmin xmax ymin ymax

2 SECTOR
Specifies the area within the LITES2 coordinate space that will be
sectored.
The coordinates are specified as full projection coordinates i.e.
coordinates that include any origin offset specified in the IFF files.

This command is not yet implemented

Format:  RANGE SECTOR xmin xmax ymin ymax

1 INTERPOLATE
Sets drawing & construction interpolation method.

Format:  INTERPOLATE subcommand

Valid in states  INITIAL READY

2 AKIMA
Sets Akima curve interpolation (default).
Akima is a bicubic spline method which preserves linearity if possible.

Format:  INTERPOLATION AKIMA

2 MCCONALOGUE
Sets McConalogue curve interpolation.
McConalogue is a circular arc pair method.

Format:  INTERPOLATION MCCONALOGUE

1 PTOLERANCE
Specifies various tolerances that are privileged.
(ie can only be given in initialisation files).

Format:  PTOLERANCE  subcommand  [argument]

Valid in state  INITIAL (privileged command;
                         only valid in initialisation file)

2 EDGESETUP
Overrides the default settings for doing an EDGE setup.

It defines the number of pointings to be made to each edge of the map,
the number of complete sets of observations to be made, and the limits
and tolerances for acceptance of the results. See SETUP EDGE for details
of how these tolerances are used.

Format:
  PTOLERANCE EDGESETUP numpts numsets sidetol tolmax tolsum mingap maxgap

where 
  numpts  - number of pointings to each side (maximum 5)
  numsets - number of sets that must be within tolerance (maximum 5)
  sidetol - maximum RMS of points from lines they define (mm)
  tolmax  - range between points at any one corner (mm)
  tolsum  - sum of the ranges between points at the corners (mm)
  mingap  - factor of ideal gap that points must be apart
  maxgap  - factor of ideal gap that points must be closer than

The defaults are: 5  2  0.075  0.2  0.425  0.2  2.0

2 OSSETUP
Overrides the default settings for doing a multiple point setup.

It defines the number of boxes the map is to be split into  along
with the number of observations required at each point, the number
of observations at each point that must fall within the tolerance of the
mean, and that tolerance.

Format:  PTOLERANCE OSSETUP fulx fuly repeat numok tolerance

where fulx         is the number of boxes in the X direction (integer)
      fuly         is the number of boxes in the Y direction (integer)
      repeat       number of observations of each point      (integer)
      numok        number that must be within tolerance      (integer)
      tolerance    tolerance in table mm                     (real)

The defaults are: 5  5  4  2  0.381

2 RESIDUAL
Specifies the tolerances for residuals for a set up.

Limits are applied to residuals (in x and y) after a least squares
solution to a set up. These numbers are in terms of the range in x and
y of the distances between the control points.

The first argument is the limit at which a setup will be accepted, the
second is the level at which a warning will be output

Format:  PTOLERANCE RESIDUAL limit warn

The defaults are: 0.0025 0.00025

1 TOLERANCE
Specifies various tolerances.
Distances are specified in sheet mm, unless otherwise stated. This
behaviour may be overridden if the TOLERANCE command is preceded by
a UNITS command.

Format:  TOLERANCE  subcommand  [argument]

Valid in states  INITIAL READY

2 BUNCH
Sets the tolerances to be used in filtering, using the BUNCH algorithm.

The three coefficients (a,b,c) control the spacing of filtered points. 
They represent:

        a       the minimum separation between successive master points
        b       the lateral threshold distance from the trend line
        c       the maximum separation between successive master points.
                A maximum separation of 0.0 is equivalent to one of
                infinity.

Note: c must be greater than or equal to a, which must be greater than or
equal to b.  If this condition is not met, then the default values are
reset.

Trailing arguments may be omitted (the setting is unchanged).

Format:  TOLERANCE BUNCH  a b c

2 CIRDRAW
Sets the point density for drawn circles (graphical types 2-5).
The three coefficients (a,b,c) control the spacing of interpolated
points. 
The approximate separation of points (d) is given by:

      d = a + 2*SQRT(2br) + cr      (r is radius)

which means (if other coefficients were zero) that

a  gives a constant separation of a mm
b  gives a constant 'arc to chord' distance of b mm
c  gives a constant angular deviation of c radians

Trailing arguments may be omitted (the setting is unchanged).

Format:  TOLERANCE CIRDRAW  a b c

2 CIRGEN
Sets the point density for generated circles (ARC and CIRCLE commands).
The three coefficients (a,b,c) control the spacing of interpolated
points. 
The approximate separation of points (d) is given by:

      d = a + 2*SQRT(2br) + cr      (r is radius)

which means (if other coefficients were zero) that

a  gives a constant separation of a mm
b  gives a constant 'arc to chord' distance of b mm
c  gives a constant angular deviation of c radians

Trailing arguments may be omitted (the setting is unchanged).

Format:  TOLERANCE CIRGEN  a b c

2 CURDRAW
Sets the point density for drawn curves (graphical type 6).
The three coefficients (a,b,c) control the spacing of interpolated
points. 
The approximate separation of points (d) is given by:

      d = a + 2*SQRT(2br) + cr      (r is radius of curvature)

which means (if other coefficients were zero) that

a  gives a constant separation of a mm
b  gives a constant 'arc to chord' distance of b mm
c  gives a constant angular deviation of c radians

Trailing arguments may be omitted (the setting is unchanged).

Format:  TOLERANCE CURDRAW  a b c

2 CURGEN
Sets the point density for generated curves (CURVE command).
The three coefficients (a,b,c) control the spacing of interpolated
points. 
The approximate separation of points (d) is given by:

      d = a + 2*SQRT(2br) + cr      (r is radius of curvature)

which means (if other coefficients were zero) that

a  gives a constant separation of a mm
b  gives a constant 'arc to chord' distance of b mm
c  gives a constant angular deviation of c radians

Trailing arguments may be omitted (the setting is unchanged).

Format:  TOLERANCE CURGEN  a b c

2 DEGREES
Sets the angle squaring tolerance in degrees

Format:  TOLERANCE DEGREES  real

2 EDGE
Sets the edge matching tolerance in mm on the nominal sheet.

Format:  TOLERANCE EDGE  real

2 EXPAND
Sets the expansion factor for regions round texts.

This is the proportion of the character height that regions defined by 
texts will be expanded beyond the limits of the text itself. If the 
expansion is greater than the average character width, oddities in the 
region boundary may occur.

By default the value of 0.1 is used.

Format:  TOLERANCE EXPAND  real

2 FAR_MOVE
Sets the distance that is to be used as the criterion for the 
OPERATION FAR_MOVE_POINT command (qv).

Format:  TOLERANCE FAR_MOVE  real

2 FIND
Sets the find radius, in mm on the screen.

This find radius will therefore get bigger and smaller as the picture
is zoomed.

If a constant find radius is required, this can be achieved by preceding
the TOLERANCE FIND command with a UNITS command. In this case the find
radius is specified in IFF units, sheet mm, or other units, and will
remain constant, until the find radius is again specified in screen mm.

On return to INITIAL state, the find radius is reset to the last value
specified in screen mm (without a UNITS command).

Format:  TOLERANCE FIND  real

2 FOLLOW
Sets the tolerances to be used in following, using the BUNCH algorithm.

The four coefficients (a,b,c,d) control the spacing of points added
while following.
They represent:

        a       the time interval at which to inquire the position
                from the device being followed
        b       the minimum separation between successive master points
        c       the lateral threshold distance from the trend line
        d       the maximum separation between successive master points.
                A maximum separation of 0.0 is equivalent to one of
                infinity.

These arguments are specified in sheet millimetres (unless a UNITS
command has been given).

Note: d must be greater than or equal to b, which must be greater than or
equal to c.  If this condition is not met, then the default values are
reset.

Trailing arguments may be omitted (the setting is unchanged).

Format:  TOLERANCE FOLLOW  a b c d

2 JUSTIFY
Sets the amount to be subtracted from a character during justification.

The width of text characters specified in the TRI file usually allows
some blank space after each character. The space after the final
character in a string must be allowed for when centre or right
justification is used. 

The TOLERANCE JUSTIFY command sets the amount to be subtracted from a
text string to represent this space. The amount is specified as a
fraction of the text height. 

By default the value 0.333333 is used.

Format:  TOLERANCE JUSTIFY  real

2 OFFSET
Sets the proportion of the height that texts/symbols will be offset
if no argument is given to the OFFSET command.  If the argument is -ve,
then the text/symbol will be offset above the original. 

Format:  TOLERANCE OFFSET  real

2 PROPAGATE
Sets the distance along the features to propagate edgematch effects.

This applies to a mismatch during edgematching or when the PROPAGATE
command has been given during a TIE or JOIN operation. The distance is
specified in mm on the nominal sheet. Note: to avoid propagation when
edgematching, this tolerance should be set to 0.0

Format:  TOLERANCE PROPAGATE  real

2 RADIANS
Sets the angle squaring tolerance in radians.

Format:  TOLERANCE RADIANS  real

2 SBMT
OS squaring tolerance - as SQMT but for based squaring.

Format:  TOLERANCE SBMT real

2 SBLT
OS squaring tolerance - as SQMT but for based squaring.

Format:  TOLERANCE SBLT  real

2 SQBT
OS squaring tolerance - base tolerance.

Warning issued if base length below this distance (mm)

Format:  TOLERANCE SQBT  real

2 SQCT
OS squaring tolerance - closing tolerance.

If the distance between the first and last point of the feature is
less than this distance (mm) then the feature is considered to be
closed

Format:  TOLERANCE SQCT  real

2 SQDEF
OS squaring tolerance - default setting used for all SQxx parameters.

Format:  TOLERANCE SQDEF

2 SQLT
OS squaring tolerance - minimum length of line (mm).

Format:  TOLERANCE SQLT  real

2 SQMT
OS squaring tolerance - maximum lateral distance a point will be
                        moved, for a line to be included in this
                        squaring pass (mm)

                        Note that points may finally be moved by
                        more than this amount, especially when
                        points have been removed from the feature.

Format:  TOLERANCE SQMT real

2 SQPL
OS squaring tolerance - maximum angle (in degrees) that two lines
                        may differ by (after adjustment) to be
                        considered parallel

Format:  TOLERANCE SQPL  real

2 SQWT
OS squaring tolerance - warning issued when point moved more than this
distance (mm).

Format:  TOLERANCE SQWT  real

1 VERIFY
Sets the style of verification of found features. 
Whether features are verified or not is controlled by the VERIFY option,
set by ENABLE VERIFY, DISABLE VERIFY or TOGGLE VERIFY (qv)

Format:  VERIFY  subcommand

Valid in all states

2 AC
Verify any AC, TC, or CH entries for each found feature.

Format:  VERIFY AC

2 FEATURE
Verify FSN, Map, Layer, Feature code, and Point number 
for each found feature (default).
If the process code (PC) is not 0, then it is also shown.

See also VERIFY GROUP

Format:  VERIFY FEATURE

2 GROUP
Shows the group(s) that the feature code of the found feature is in.
This is only effective if VERIFY FEATURE is also set.

Format:  VERIFY GROUP

2 OFF
Disable all verification of found features.

Format:  VERIFY OFF

2 TEXT
Verify the text of each found text feature.

Format:  VERIFY TEXT

1 REFRESH
Changes the characteristics of the refresh (or highlighted) picture.

Format:  REFRESH  subcommand

Valid in states  INITIAL READY LINE CIRCLE EDIT ON CONSTRUCT

2 BITS
Sets the bit planes used for refresh (if the display allows it).
This command may be used when the allocation of colours to overlays
makes the cursor and other highlighting difficult or impossible
to see. Refresh works by inverting the bits in the display, then
inverting them back again to turn it off. By default all bit planes
are inverted. The integer given in this command is a bit set mask
specifying the particular planes to be inverted. If the argument
is omitted, then the default is used. In the MOTIF version of LITES2,
the default may be set by defining logical name LSL$DECW_REFRESH_BITS.

For example: If you had an 8 plane overlay using colours 0 to 255,
then by default the cursor would display in colour 255 when over
an area of the screen with colour 0 (background). If you used the
command REFRESH BITS 1, then the cursor would display in colour 1
instead.

Format:  REFRESH BITS  [integer]

2 CURSOR
Sets the shape of the cursor (if the display allows it).
This command allows the cursor to be set to the same shape as
the 'brush' used by the IMAGE PAINT and IMAGE ERASE commands.

Format:  REFRESH CURSOR  subcommand

3 CIRCLE
Use a circle or ellipse as the cursor.
The first argument gives the diameter of the circle.
If it is positive, then it is measured in IFF units (or mm if a
UNITS command has been given), and the cursor changes size if the
picture is zoomed. If it is negative, then it is measured in
screen mm, and the cursor will be of constant size.
If the second argument is given, it specifies a height, allowing
an ellipse to be used.

Format:  REFRESH CURSOR CIRCLE  width [height]

3 CROSS
Use a simple cross as the cursor.
The first argument gives the size.
If it is positive, then it is measured in IFF units (or mm if a
UNITS command has been given), and the cursor changes size if the
picture is zoomed. If it is negative, then it is measured in
screen mm, and the cursor will be of constant size.
If the second argument is given, then a second cross with this
size if drawn on top of the first, cancelling out where the
two overlap. This is used to achieve a cross with the centre
missing.

Format:  REFRESH CURSOR CROSS  size [size2]

3 DEFAULT
Restores the cursor to its default appearance.

Format:  REFRESH CURSOR DEFAULT

3 RECTANGLE
Use a rectangle or square as the cursor.
The first argument gives the width.
If it is positive, then it is measured in IFF units (or mm if a
UNITS command has been given), and the cursor changes size if the
picture is zoomed. If it is negative, then it is measured in
screen mm, and the cursor will be of constant size.
The second argument specifies a height, allowing a rectangle
to be used. If omitted, the result is a square.

Format:  REFRESH CURSOR RECTANGLE  width [height]

2 LINE
Sets maximum refresh line length (not implemented).

Format:  REFRESH LINE  integer

2 POINTS
Sets maximum number of refreshed points (range 2 to 1000, default 50).

The specified number of points in the found object, object in hand,
and construction will be highlighted if the graphics display in use
allows it.
When refreshing composite text each component takes 5 vertices. At least
one component is refreshed.

Format:  REFRESH POINTS  integer

1 General_Commands
The following LITES2 commands are used to carry out general operations

ABANDON END CREATE UNITS MERGE RENAME USER ROUTINE BASE FILE 
NULL DEBUG SAVE SPAWN 

1 ABANDON
Abandons current operation.
Drops any found feature and returns to READY state.

Format:  ABANDON

Valid in all states

1 END
Ends editing or construction type operation.

Format:  END

Valid in states  EDIT MODIFY ON WINDOW CONSTRUCT AC RECOVER PAINT

1 HELP
Gives information about LITES2 commands and other subjects.
If no subject given then a list of subjects will be printed.

If HELP is entered interactively (i.e. not from a command file or
macro), the user is prompted for further topics. The possible responses
are the same as in the DCL HELP utility. CTRL/Z will exit from help and
return to the LITES2 prompt (as will a sufficient number of blank
lines).

Format:  HELP  [text]

eg       HELP
or       HELP FIND

Valid in all states

1 CREATE
Creates a new entity.

Format:  CREATE  subcommand

Valid in states  INITIAL READY

2 ABORT_MAILBOX
Creates a mailbox which can be used by other processes to abort LITES2
operations. When a process writes a message to the mailbox, LITES2
behaves as though CTRL/C had been pressed, aborting certain commands,
or returning to interactive input. The message written to the mailbox
is output by LITES2 after the "Operation aborted" message.

If the message begins with the digit 0, 1, or 2, then this controls the
"severity" of the abort. 0 (or no digit at all) means the same as a
keyboard CTRL/C - it will abort commands such as DRAW if any are in
progress, but if not will abort the reading of any macros and command
files. 1 will abort commands such as DRAW, but will not affect command
decoding. 2 will abort certain commands, and also abort command
decoding. The digit is removed from the message before it is printed.

If the name argument is given, then a mailbox with the given name will
be created. The name is converted to upper case. It should
not contain spaces or other punctuation marks. If the name argument is
omitted, the default name LSL$LITES2ABORT will be used.

By default, the logical name for the mailbox goes into the JOB logical
name table, so that it will be visible to any subprocesses.
If it was required, for example, that the logical name for the mailbox
was placed in the group logical name table, then give the DCL command

  $ Define/table=LNM$PROCESS_DIRECTORY LNM$TEMPORARY_MAILBOX LNM$GROUP

before starting LITES2.

Format:  CREATE ABORT_MAILBOX
or       CREATE ABORT_MAILBOX  name

2 LAYER
Create a new layer.

Format:  CREATE LAYER  integer

Valid in state  READY

2 LOGICAL
Creates (defines) a logical name.

If either the logical name or the equivalence string contains spaces
then it should be enclosed in double quotes. Both strings are converted
to upper case unless enclosed in double quotes. If the equivalence
string is omitted, then the logical name is deassigned.

The logical name is defined in the process table (LNM$PROCESS) at user
mode. This means that it will automatically be deassigned when LITES2
exits, and is therefore only useful during the run of LITES2. A
particular use is to define logical names for use by hardcopy plotting
output routines.

Format:  CREATE LOGICAL  logical_name equivalence_string
or       CREATE LOGICAL  logical_name ! (deassign)

eg       CREATE LOGICAL LSL$PS TTA2:

2 MAILBOX
Creates a mailbox which can be used for communication between LITES2 and
other processes. The command has two forms, taking either an integer
in the range 1-4, or a name.

The integer argument is the auxiliary input number, thus CREATE MAILBOX 1
creates a mailbox with logical name LSL$LITES2AUX, while CREATE
MAILBOX n for n = 2, 3, or 4 creates a mailbox with logical name
LSL$LITES2AUX_n. LITES2 will attempt to read interactive commands from
these mailboxes. The logical name should not already exist when the
CREATE MAILBOX command is given - LITES2 will automatically attempt to
read commands from these logical names if they exist.

If the name argument is given instead of the integer, then a mailbox
with the given name will be created, but LITES2 will not automatically
attempt to read from it. The name is converted to upper case. It should
not contain spaces or other punctuation marks. Once created, the mailbox
may be treated as a file by any of the LITES2 commands which use text
files (e.g. the FILE commands, or @). For example, one could use CREATE
MAILBOX OUTPUT, then FILE CREATE 1 OUTPUT:, and FILE WRITE string to send
text strings to another process. Note that attempts to read or write
the mailboxes will not complete until the cooperating process writes or
reads, so care must be taken not to hang LITES2 in a permanent wait
state.

By default, the logical name for the mailbox goes into the JOB logical
name table, so that it will be visible to any subprocesses.
If it was required, for example, that the logical name for the mailbox
was placed in the group logical name table, then give the DCL command

  $ Define/table=LNM$PROCESS_DIRECTORY LNM$TEMPORARY_MAILBOX LNM$GROUP

before starting LITES2.

Format:  CREATE MAILBOX  integer
or       CREATE MAILBOX  name

2 MEMORY
Reserves the specified number of pages of virtual memory for use by
LITES2 dynamic memory allocation. It is intended that this command be
used when image files are to be repeatedly opened and closed. If LITES2
has to allocate memory at a higher address than currently open images,
then when an image is closed, the memory used by it will not be able to
be reused, and the next image opened will use up more memory. Use the
CREATE MEMORY command to reserve enough space for the expected use of
dynamic memory.

Format:  CREATE MEMORY  integer

1 RENAME
Renames an entity.

Format:  RENAME  subcommand

Valid in state  READY

2 LAYER
Renames one layer as another, which must not already exist

Format:  RENAME LAYER  old new

1 MERGE
Merges two entities

Format:  MERGE  subcommand

Valid in state  READY

2 LAYER
Merges one layer into another, which must already exist

Format:  MERGE LAYER  old new

1 UNITS
Overrides the type of units expected for the following command.

Format:  UNITS  subcommand

Valid in all states except INITIAL

2 FACTOR

Specifies a temporary conversion factor for coordinate units.
The given number multiplies IFF units to give the required units,
thus if IFF units were metres, then the command UNITS FACTOR 0.001
would allow the argument to the next command to be specified in
kilometres. A descriptive string may be given after the factor.
This appears in the output from some EXAMINE commands. The last
specified factor is available in the system variable $UNIT_FACTOR,
and the descriptive string in $UNIT_DESC.

Format:  UNITS FACTOR  real [string]

eg       UNITS FACTOR 0.001 kilometres
         OFFSET 0.2    (offsets by 200 IFF units rather then 0.2)

2 IFF
Set coordinate units temporarily to IFF units.
Commands that expect their arguments in sheet mm will accept them as
IFF units if preceded by this command

Format:  UNITS IFF

eg       UNITS IFF
         TOLERANCE SQMT 10        (takes 10 as 10 IFF units, not 10 mm)

2 MMS
Set coordinate units temporarily to sheet mm.
Commands that expect their arguments in IFF units will accept them as
sheet mm if preceded by this command

Format:  UNITS MMS

eg       UNITS MMS
         OFFSET 1.2        (offsets by 1.2 sheet mm, not 1.2 IFF units)

2 NORMAL
Cancel the effect of a previous UNITS command.
The effect of UNITS is cancelled automatically by the first command
to use it, but UNITS NORMAL may be used to cancel the effect before use.

Format:  UNITS NORMAL

1 BASE
Define baseline for squaring and similar operations.

Specifies that the current segment of the found feature is to be used as
a baseline. The currently set bases can be examined with the SHOW BASES
command.(qv)

Format:  BASE subcommand

Valid in state  LINE

2 EDGE
The baseline is used when the next EDGEMATCH command is given.
Only lines that are longer than the tolerance SQBT will be accepted
as bases for edgematching.
On completion of the command, the program returns to READY state.

Format:  BASE EDGE

2 ORIENT
The baseline is used when subsequent ORIENT commands (qv) are given.
Only lines that are longer than the tolerance SQBT will be accepted.
On completion of the command, the program returns to READY state.

Format:  BASE ORIENT

2 SQUARE
The current line is added to the list of bases for OS squaring.
Only lines that are longer than the tolerance SQBT will be accepted
as bases for squaring.
Up to five of these bases can be defined before any SQUARE command
is given and the definitions are lost when either an explicit or an
implicit ABANDON command is given.
On completion of this command , the program remains in LINE state.

Format:  BASE SQUARE
or       BASE

1 DEBUG
The LITES2 program debug collapse routine is entered.
This is intended as a program development tool.
If entered by accident then give command GO to continue.

Format:  DEBUG integer

Valid in all states

1 USER
Specifies that a particular user-supplied operation is to be performed.
Information can be passed from LITES2 to a user written subroutine
in a shareable image where the data can be processed and then passed
back to LITES2. This shareable image must be pointed to by the
logical name LSL$LITES2ROUTINES.

See the LITES2 reference manual for more information, and details of
how to write user routines.

Format:  USER  integer [string]

Valid in states:
INITIAL READY LINE CIRCLE TEXT SYMBOL EDIT MODIFY ON WINDOW CONSTRUCT AC

1 ROUTINE
Specifies that a particular user-supplied operation is to be performed.

An extended version of the USER command that allows up to 10 external
images to be accessed.

There are two sets of ROUTINE commands available -

     ROUTINE 1   to ROUTINE 5   are for images supplied by the user,

     ROUTINE 101 to ROUTINE 105 are reserved for additional images
                                supplied by Laser-Scan.

The shareable image to be used is pointed to by the logical name
LSL$LITES2ROUTINES_n, where n is the first argument to the command.

     ROUTINE 0 is an alias for the command USER

See the LITES2 reference manual for more information, and details of
how to write user routines.

Format:  ROUTINE integer integer [string]

Valid in states:
INITIAL READY LINE CIRCLE TEXT SYMBOL EDIT MODIFY ON WINDOW CONSTRUCT AC

1 Identification_Commands
The following LITES2 commands are used to identify features for manipulation

FIND RECOVER SEARCH LOCATE 

1 FIND
Searches for nearest feature to cursor position.
Finds up to 4 features nearest to cursor and highlights the best fit
which becomes the FOUND FEATURE and the subject for editing operations.
If FIND is given again without moving the cursor, then the program will
cycle round the 4 best hits.

Format:  FIND

Valid in states:
READY LINE CIRCLE TEXT SYMBOL EDIT MODIFY ON WINDOW CONSTRUCT

1 RECOVER
Searches for nearest feature in limbo (previously deleted).
Works as FIND (qv) but only finds deleted features.

Format:  RECOVER

Valid in states  READY LINE CIRCLE TEXT SYMBOL RECOVER

1 SEARCH
Start search for specified features.

Searches whole IFF file using spiral search for feature matching
given specification. The SEARCH command should normally only be used
when the intention is to use SEARCH NEXT to find several features
in turn. If only one feature is required, then the LOCATE (qv) command
is more efficient.

The order in which features are found by SEARCH is not very well defined
except for SEARCH NEAREST.

Format:  SEARCH  subcommand

Valid in states:
READY LINE CIRCLE TEXT SYMBOL EDIT MODIFY WINDOW CONSTRUCT RECOVER

2 ALL
Search for any feature matching current SELECT constraints.

Format:  SEARCH ALL

2 DELETED
Search for feature in limbo. Same as SEARCH ALL but finds only deleted
features.

Format:  SEARCH DELETED

2 FSN
Search for feature with given FSN, optionally in a particular map.

Format:  SEARCH FSN  fsn [map]

2 LAST
Search for the last feature found, constructed, or edited.

Format:  SEARCH LAST

2 NEAREST
Search for the nearest feature matching current SELECT constraints.
This command is similar to SEARCH ALL (qv), but the features are found
in strict order of increasing distance. The cursor will snap onto a
point of a feature if one is within the current find tolerance.
SEARCH NEAREST is likely to take longer than SEARCH ALL, especially
at large distances from the cursor.

Format:  SEARCH NEAREST

2 NEXT
Search for next candidate matching current search criteria.

Format:  SEARCH NEXT
or       SEARCH

2 TEXT
Search for text feature containing given sub-string.
If the text is to have leading spaces or tabs, then it must be enclosed
in double quotes.

Format:  SEARCH TEXT  text

1 LOCATE
Search for specified feature.

Searches whole IFF file using spiral search for feature matching
given specification. LOCATE is similar to SEARCH (qv) but finds only
the first matching feature. LOCATE may be used in the middle of a
SEARCH NEXT sequence without destroying the search context.

Format:  LOCATE  subcommand

Valid in states:
READY LINE CIRCLE TEXT SYMBOL EDIT MODIFY WINDOW CONSTRUCT RECOVER

2 ALL
Locate any feature matching current SELECT constraints.

Format:  LOCATE ALL
or       LOCATE

2 DELETED
Locate feature in limbo. Same as LOCATE ALL but finds only deleted
features.

Format:  LOCATE DELETED

2 FSN
Locate feature with given FSN, optionally in a particular map.

Format:  LOCATE FSN  fsn [map]

2 TEXT
Locate text feature containing given sub-string.
If the text is to have leading spaces or tabs, then it must be enclosed
in double quotes.

Format:  LOCATE TEXT  text

1 Construction_Commands
The following LITES2 commands are used to construct new features

START CURVE INVISIBLE ARC CIRCLE POLARC POLYGON RECTANGLE CLOSE INCLUDE
FOLLOW 

1 START
Starts line or symbol feature construction using current attribute set 
as selected by GET (qv) and modified by SET (qv). 
If a construction is already started then just adds the given point. The
construction is finished using the END command (qv) at the final point.
In the case of symbol string features (graphical type 11), START then
END without moving the cursor will construct a single point feature. 
To create a text feature use the TEXT command (qv).
In SETUP state, the START command is used to digitise a corner point.

Format:  START

Valid in states  READY LINE CIRCLE TEXT SYMBOL WINDOW CONSTRUCT SETUP

1 CURVE
Construct a curve through this point.
Adds data point to construction but sets curve interpolation on either
side of given point.

Format:  CURVE

Valid in state  CONSTRUCT

1 INVISIBLE
Construct an invisible step.

Adds data point to construction with an invisible segment up to the
given point.

Format:  INVISIBLE

Valid in state  CONSTRUCT

1 TEXT
Creates a text feature.
Uses the current text attribute set as defined by SET commands (qv).
If the text is to have leading spaces or tabs, then it must be enclosed
in double quotes.

NOTE: an implied TEXT or REPLACE command is inserted before any
command that is terminated by a control Z. REPLACE is used if it
is valid, and otherwise TEXT is used.

Format:  TEXT  text
or       text^Z

eg       TEXT High St.

Valid in states  READY LINE CIRCLE TEXT SYMBOL MODIFY

1 FOLLOW
Construct by stream digitising.

Add points to a construction by continuously polling the position from
the specified device.

Note that not all versions of LITES2 support the devices that can be
specified by this command.

Filtering of the points is achieved using a modified form of the BUNCH
algorithm that is used by the FILTER command, the main difference being
that while the BUNCH filter algorithm computes new master points, the
algorithm used by FOLLOW outputs points that have been digitised. 

The rate at which the devices are polled and the tolerances for this
filtering are set by the TOLERANCE FOLLOW command. 

The filtering algorithm uses tolerances related to chords on the
incoming point strings. The first point received from the input stream
is accepted as a master point. As subsequent points are received, they
are added to the backlog buffer, unless one of the following conditions
are met. 

 1) if the point is less than the minimum distance from the last master
    point or the last point in the buffer, it is ignored.
 2) if the maximum distance tolerance is not set to 0.0 (infinity) and
    the distance from the last master point to the current point is
    greater than this tolerance, then the last point in the backlog
    buffer is output as a master point, the buffer is emptied and the
    current point is added as the first point in the buffer.
 3) if the perpendicular distance from any of the points in the backlog
    buffer to the line joining the last master point to the current
    point exceeds the lateral tolerance, then the last point in the
    backlog buffer is output as a master point, the buffer is emptied
    and the current point is added as the first point in the buffer.
 4) if the backlog buffer is full, then it is compressed to leave the
    points farthest to the right and to the left of the line between
    the last master point and the current point, before the current
    point is added to the backlog buffer.
 
See the FILTER command for more information on the effect of altering
the tolerances.

LITES2 will complete any processing that it is engaged in when it is
time to poll the device for a coordinate, before reading the position
from the device and doing the above filtering. This may mean that on
busy systems, FOLLOWing may be somewhat uneven. This problem may be
alleviated by reducing the amount of refresh drawing that LITES2 has
to do by giving the REFRESH VERTICES command.

FOLLOWing mode is left by giving the END or START command. FOLLOWing
will also be abandoned if an error occurs while retrieving a coordinate.
If many of these errors occur then the following time interval is
probably set too small.

Format:  FOLLOW  subcommand

Valid in states  READY LINE CIRCLE TEXT SYMBOL WINDOW CONSTRUCT

2 DSR
See FOLLOW SD (stereo digitiser).

Format:  FOLLOW DSR

2 SCREEN
Gets coordinates from the position of the workstation cursor 
on the screen. Note that this is not the LITES2 cursor, but the 
cursor that is controlled by the movement of the mouse or bitpad.

Format:  FOLLOW SCREEN

2 SD
Gets coordinates the stereo digitising instrument,
if it has been initialised.

Format:  FOLLOW SD

2 TABLE
Gets coordinates from the digitising table (default).

NOTE: This command is not available when the table is accessed through a
LSL MUART (ie ENABLE MONITOR must have been given). The table must also
be of a type that responds to requests from the host computer. In
particular, if using an ALTEK 90 controller, the "ENABLE HOST" switch
must be set to the on position.

When using non-ALTEK tables, it is possible to specify the string that
is used to inquire the position from the table, in the shared image that
is used to decode the table string. See the documentation on the TABLE
MONITOR for details of this decoding routine, or the example supplied
in LSL$PUBLIC_ROOT:[TABLE.EXE]EXAMPLE.FOR. This routine can be compiled
and linked using the command file DECODE.COM in the same directory.

Format:  FOLLOW TABLE

1 CIRCLE
The next constructed feature is to be a generated circle.

Format:  CIRCLE  subcommand

Valid in states  READY LINE CIRCLE TEXT SYMBOL

2 CENTRED
Generated circle defined by the centre point and a point on the circumference.
The next constructed feature is to be a generated circle of this type.

Format:  CIRCLE CENTRED

2 CIRCUM
Generated circle defined  by three points on the circumference.
The next constructed feature is to be a generated circle of this type.

Format:  CIRCLE CIRCUM

1 ARC
The next constructed feature is to be a generated arc.

Format:  ARC  subcommand

Valid in states  READY LINE CIRCLE TEXT SYMBOL

2 CENTRED
Arc defined by the centre point and two points on the circumference.
The next constructed feature is to be a generated arc of this type.

Format:  ARC CENTRED

2 CIRCUM
Arc defined  by three points on the circumference.
The next constructed feature is to be a generated arc of this type.

Format:  ARC CIRCUM

1 POLYGON
The next constructed feature is to be a generated polygon.
The integer gives the number of sides.

Format:  POLYGON subcommand integer

eg       POLYGON CENTRED 5

Valid in states  READY LINE CIRCLE TEXT SYMBOL

2 CENTRED
Polygon defined by the centre point and a point on the polygon.
The next constructed feature is to be a generated polygon of this type.

Format:  POLYGON CENTRED integer

2 CIRCUM
Polygon defined by three points on polygon.
The next constructed feature is to be a generated polygon of this type.

Format:  POLYGON CIRCUM integer

1 POLARC
The next constructed feature is to be a generated polygon arc.
The integer gives the number of sides.

Format:  POLARC  subcommand integer

eg       POLARC CENTRED 5

Valid in states  READY LINE CIRCLE TEXT SYMBOL

2 CENTRED
Polygon arc defined by the centre point and two points on polygon.
The next constructed feature is to be a generated polygon arc of this type.

Format:  POLARC CENTRED

2 CIRCUM
Polygon arc defined by three points on polygon.
The next constructed feature is to be a generated polygon arc of this type.

Format:  POLARC CIRCUM

1 RECTANGLE
The next constructed feature is to be a generated rectangle.

Format:  RECTANGLE  subcommand

Valid in states  READY LINE CIRCLE TEXT SYMBOL

2 DIAGONAL
Construct a generated rectangle from its diagonal.

Digitise one corner, a point on an adjacent side and the corner
diagonally opposite the first one. 

Format:  RECTANGLE DIAGONAL

2 SIDE
Construct a generated rectangle from one side and a point.

Digitise two adjacent corners and a point on the opposite side. 

Format:  RECTANGLE SIDE

1 INCLUDE
Allows all or some of a feature to be included in the current construction.
The original feature remains unaltered.

Format:  INCLUDE  subcommand

Valid in states  LINE CONSTRUCT

2 PART
Includes part of the found feature into a construction.

Part is from the current cursor position to the point where the next END
command is given. After the INCLUDE PART command has been given the
cursor is constrained on the found feature until an END (or an ABANDON)
command.

Format:  INCLUDE PART

2 WHOLE
Includes the whole of the found feature into a construction (default).

The cursor must be on one end of the found feature, and 
after this command it will be located at the other end.

Format:  INCLUDE WHOLE
or       INCLUDE

1 Positioning_Commands
The following LITES2 commands are used to position the cursor

FORCE FREE ON POSITION ABSOLUTE GEOGRAPHICAL SHEET FIRST LAST MIDDLE
NEXT PREVIOUS THIS POINT FRACTION 

1 FORCE
Force constraint on cursor movement, 
or move cursor on to a surface or a line. The FREE command may be
used to restore free cursor movement.

Format:  FORCE  subcommand

Valid in states  LINE CIRCLE EDIT CONSTRUCT TEXT SYMBOL MODIFY

2 ANGLE
Next line segment to be at the given angle 
(measured anti-clockwise from horizontal).

If given after FORCE LINE or FORCE DISTANCE, then the cursor position
is fixed at the given angle and distance.

Note that movement is possible in either direction along constraining line.

Format:  FORCE ANGLE  real

2 BEARING
Next line segment to be at the given bearing 
(measured clockwise from grid north).

If given after FORCE LINE or FORCE DISTANCE, then the cursor position
is fixed at the given angle and distance.

Note that movement is possible in either direction along constraining line.

Format:  FORCE BEARING  real

2 CORNER
Force a corner of the given angle (default 90 degrees) at current point.

If given after FORCE LINE or FORCE DISTANCE, then the cursor position
is fixed at the given angle and distance.

Note that movement is possible in either direction along constraining line.

Format:  FORCE CORNER [real]

2 DISTANCE
Force the total length of a construction to be a given distance.
The distance is specified in IFF units (unless a UNITS command
has been given), and must be greater than the current length of the
construction.
The cursor is constrained onto a circle around the previous point.
If given when a linear constraint is already in force, for example
FORCE ANGLE, then the cursor position is fixed at the given angle
and distance.

Format:  FORCE DISTANCE  real

2 EDGE
Force cursor onto currently defined base for edgematching.

Format:  FORCE EDGE

2 FLAT
Force cursor to horizontal movement during this edit.

Moves cursor onto horizontal plane through the point that the cursor was
moved to when the particular editing command was given. For example, if
the editing command EXTEND is given, at any time before a subsequent
ABANDON or END command, FORCE FLAT will make the Z value of the cursor
the same as the height of the point being extended.

This command is only valid if Z has been ENABLED.

Format:  FORCE FLAT

Valid in state  EDIT

2 LINE
Force the length of the current segment of a construction.
The length is specified in IFF units (unless a UNITS command
has been given).
The cursor is constrained onto a circle around the previous point.
If given when a linear constraint is already in force, for example
FORCE ANGLE, then the cursor position is fixed at the given angle
and distance.

Format:  FORCE LINE  real

2 ORTHOGONAL
Force horizontal or vertical line only (not implemented).

Format:  FORCE ORTHOGONAL

2 PARALLEL
Force cursor parallel to the current segment of the found feature. 

The cursor is constrained to the right of the found feature if the
command argument is positive, and to the left if the argument is
negative. If no argument is given, the cursor position is used. 

Note that movement is possible in either direction along constraining line.

Format:  FORCE PARALLEL  [real]

2 PERPENDICULAR
Force perpendicular to the current segment of the found feature.

The cursor position is used to determine the placement of the
perpendicular.  The initial position of the cursor is to the right of
the found feature if the command argument is positive, and to the left
if the argument is negative. 

Note that movement is possible in either direction along constraining line.

Format:  FORCE PERPENDICULAR  [real]

2 RADIAL
Force cursor on a radius of the found feature.

Format:  FORCE RADIAL

2 SLOPE
Force cursor to sloping movement during this edit.

Moves cursor onto the plane through the 2 points used to determine the
cursor position and any constraint when the editing command took effect.
For example, if the editing command EXTEND is given, at any time before
a subsequent ABANDON or END command, FORCE SLOPE will move the the
cursor so that it lies on the plane through the last two points of the
feature. 

This command is only valid if Z has been ENABLED.

Format:  FORCE SLOPE

Valid in state  EDIT

2 TANGENTIAL
Force cursor on a tangent to the found feature.

Format:  FORCE TANGENTIAL

1 ON
Constrains cursor to move only on found feature.

Format:  ON

Valid in states  LINE CIRCLE EDIT MODIFY CONSTRUCT

1 FREE
Frees cursor from constrained movement.

Format:  FREE

Valid in states  READY LINE CIRCLE EDIT MODIFY CONSTRUCT

1 POSITION
Positions cursor to given IFF coordinates.
See SHEET command to position in sheet millimetres.
If the arguments are omitted, the cursor is positioned to the centre
of the screen.

Format:  POSITION [ x y [z]]

eg       POSITION 100 121.6
or       POSITION

Valid in all states except INITIAL

1 ABSOLUTE
Positions cursor to given absolute coordinates. 

The coordinates are specified as full projection coordinates i.e.
coordinates that include any origin offset specified in the IFF files.
If the arguments are omitted, the cursor is positioned to the centre
of the screen.

Format:  ABSOLUTE  [ x y [z]]

eg       ABSOLUTE 327100.34 6734121.62
or       ABSOLUTE

Valid in all states except INITIAL

1 LATLONG
Positions cursor to given latitude and longitude as degrees.

The latitude and longitude are specified as double precision numbers.

This command is only valid if at least one  map read in has a valid
type 2 map descriptor, specifying a valid projection.

If the arguments are omitted, the cursor is positioned to the centre
of the screen.

Geographical conversions make use of a shared image pointed at by the
logical name LSL$LITES2_GEOG_ROUTINES. This image is supplied by
Laser-Scan. It is called LSL$EXE:LITES2GEOGSHR.EXE. 

Format:  LATLONG [ lat long ]

eg       LATLONG 56.0 -3.0

Valid in all states except INITIAL

1 GEOGRAPHICAL
Positions cursor to given latitude and longitude reference.

The latitude and longitude are specified in degrees, minutes and seconds.

This command is only valid if at least one map read in has valid type 2
map descriptor, specifying a valid projection.

If the arguments are omitted, the cursor is positioned to the centre
of the screen.

Geographical conversions make use of a shared image pointed at by the
logical name LSL$LITES2_GEOG_ROUTINES. This image is supplied by
Laser-Scan. It is called LSL$EXE:LITES2GEOGSHR.EXE. 

Format:  GEOGRAPHICAL [ lat long ]

eg       GEOGRAPHICAL 56 30 00.000   -3 20 00.000
         GEOGRAPHICAL 56 30 00.000N   3 20 00.000W
         GEOGRAPHICAL 56 30N          3 20W
         GEOGRAPHICAL 56.5N           3.333333333W
         GEOGRAPHICAL  3 20 00.000W   56 30 00.000N

these examples are all valid angles that will position the cursor to the
same point.

Valid in all states except INITIAL

1 SHEET
Positions cursor to given (sheet mm) coordinates.
See POSITION command to position in IFF units.
If the arguments are omitted, the cursor is positioned to the centre
of the screen.

Format:  SHEET  [ x y ]

eg       SHEET 100 121.6
or       SHEET

Valid in all states except INITIAL

1 POINT
Positions cursor on the given point of the found feature.

Only operates on composite texts if there is no other linear found
object.

Format:  POINT integer

Valid in states  LINE CIRCLE TEXT EDIT MODIFY ON CONSTRUCT

1 FIRST
Positions to first point, AC, TC, CH or text component.

Only operates on composite texts if there is no other linear found
object.

If in MODIFY state, goes into MODIFY (part) state.

Format:  FIRST

Valid in states  LINE CIRCLE EDIT TEXT MODIFY ON CONSTRUCT AC

1 LAST
Positions to last point, AC, TC, CH or text component.

Only operates on composite texts if there is no other linear found
object.

If in MODIFY state, goes into MODIFY (part) state.

Format:  LAST

Valid in states  LINE CIRCLE EDIT TEXT MODIFY ON CONSTRUCT AC

1 THIS
Positions to current AC, TC, CH or text component.

If in TEXT or MODIFY state, goes into MODIFY (part) state.

Format:  THIS

Valid in states  TEXT MODIFY AC

1 PREVIOUS
Positions to previous point, AC, TC, CH or text component.

Only operates on composite texts if there is no other linear found
object.

If in MODIFY state, goes into MODIFY (part) state.

Format:  PREVIOUS

Valid in states  LINE CIRCLE EDIT TEXT MODIFY ON CONSTRUCT AC

1 NEXT
Positions to next point, AC, TC, CH or text component.

Only operates on composite texts if there is no other linear found
object.

If in MODIFY state, goes into MODIFY (part) state.

Format:  NEXT

Valid in states  LINE CIRCLE EDIT TEXT MODIFY ON CONSTRUCT AC

1 MIDDLE
Positions cursor midway between 2 points.

Format:  MIDDLE

Valid in states  LINE CIRCLE EDIT MODIFY ON CONSTRUCT

1 FRACTION
Positions cursor fractionally between 2 points.

Format:  FRACTION  real

eg       FRACTION 0.4

Valid in states  LINE CIRCLE EDIT MODIFY ON CONSTRUCT

1 DISTANCE
Positions the cursor a given distance along a feature.
The distance is specified in IFF units (unless a UNITS command
has been given).
The distance may be measured from either end of the feature, or
from the current cursor position.

Format:  DISTANCE [subcommand] real

Valid in states  LINE CIRCLE EDIT MODIFY ON CONSTRUCT

2 ABSOLUTE
The cursor is positioned to the given distance along a feature.
This is measured from the start of the
feature (or backwards from the end if the distance is negative). An
attempt to move beyond the end of the feature will result in the
cursor being positioned at the end.

Format:  DISTANCE [ABSOLUTE]  real

eg       DISTANCE 10.0
or       DISTANCE ABSOLUTE 10.0

2 RELATIVE
The cursor is positioned by the given distance along the feature
from the current cursor position. The direction of movement is
towards the end of the feature if the distance is positive.
An attempt to move beyond the end of the feature will result in the
cursor being positioned at the end.

Format:  DISTANCE RELATIVE  real

eg       DISTANCE RELATIVE 10.0

1 Editing_Commands
The following LITES2 commands are used to carry out editing operations

COPY MODIFY DEPOSIT BRIDGE TAKE CHANGE DELETE EDIT EXTEND INSERT LOOP
OFFSET MOVE REMOVE REVERSE ORIENT TRANSFORM FILTER FEATURE SPLIT CLIP
SQUARE 

1 COPY
Creates a copy of a feature and allows changes to be made to it.
Several changes can be made using CHANGE, DELETE, MOVE, OFFSET, and
REVERSE commands (qv), or the text and symbol editing commands.
The operation is terminated by END. Compare with MODIFY command.

Format:  COPY  subcommand

Valid in states  LINE TEXT SYMBOL

2 PART
Copies part of line features.
See MODIFY PART for details of specifying part features.

Format:  COPY PART

2 WHOLE
Copies the whole feature (default).

Format:  COPY WHOLE
or       COPY

1 MOVE
Moves a feature to a new position.
This command attaches the feature to the cursor and allows it to
be moved around until END is given.
Unless COPY is used before MOVE, then MODIFY is implied and the feature
at the original position is removed.
If MOVE is used during a COPY PART or MODIFY PART operation, the part
feature is only attached to the cursor after an END is given to delimit
the required part. Another END is needed to complete the operation. 

Format:  MOVE

Valid in states  LINE TEXT SYMBOL MODIFY ON

1 MODIFY
Allows multiple changes to be made to a feature.
Several changes can be made using CHANGE, DELETE, MOVE, OFFSET, and
REVERSE commands (qv), or with the text and symbol editing commands.
The operation is terminated by END. Compare with COPY command.
For texts and symbols, MODIFY is redundant, since it is obeyed
implicitly when the first editing command is given.

Format:  MODIFY  subcommand

Valid in states  LINE TEXT SYMBOL

2 PART
Modifies part of line features.

Format:  MODIFY PART

2 WHOLE
Modifies the whole feature (default).

Format:  MODIFY WHOLE

1 DEPOSIT
Deposits the text or symbol that is currently being modified. 
The feature may still be further modified and DEPOSITed again or the
original operation can be ended with the appropriate number of END
commands.
Alternatively, ABANDON may be used to terminate the original operation. 
A new feature serial number is automatically generated for features
that are deposited.

Format:  DEPOSIT

Valid in state  MODIFY

1 SQUARE
Squares the current (linear) feature.
Either simple or OS algorithms are available.

The squared feature (or part of it when dealing with long features) is
displayed in refresh and EDIT state is entered. To accept the squared
feature enter END; otherwise ABANDON will cancel the operation.

After squaring, the original feature is deleted but can be recovered;
the squared feature has the appropriate process code set. 

When the FIXED option is enabled (default) then an enhanced squaring
algorithm for SQUARE PART and SQUARE WHOLE is used. 
The following features are then included in the squaring algorithm: 

   1) Points specified with the PRIVILEGE POINT command are held fixed
   2) When base squaring, after all the bases have been used as data,
      the remaining unsquared lines are part squared.
   3) Redundant points are removed from parallel lines

See also TOLERANCE command, and the LITES2 reference manual for details
of the algorithms used.

Format:  SQUARE  subcommand

Valid in states  LINE

2 ANGLES
Forces all angles within angle tolerance to be right angles.

Format:  SQUARE ANGLES

2 PART
Applies OS squaring algorithm using distance and length tolerances.
Only sides within tolerance are squared.

Format:  SQUARE PART

2 WHOLE
Applies OS squaring algorithm to all sides.

Format:  SQUARE WHOLE

1 ORIENT
Moves the current (linear) feature onto the orienting base,
which has been previously defined.

The selected edge of the found feature is moved onto the orienting base,
and the rest of the feature is moved correspondingly. The selected edge
is moved so that its centre is projected perpendicularly onto the base. 

If the feature has been found by a point, and not between points, then
the edge out of that point that makes the smaller angle with the base is
used.

The oriented feature (or part of it when dealing with long features) is
displayed in refresh and EDIT state is entered. To accept the oriented
feature enter END; otherwise ABANDON will return to ready state. 

After orienting, the original feature is deleted but can be recovered.

Format:  ORIENT

Valid in state  LINE

1 OFFSET
Generates a new feature parallel to the found feature.
The offset distance is specified in IFF units (unless a UNITS command
has been given).
If the old feature is to be replaced by the offset feature, then give the
MODIFY command first. 

For linear features the new feature is offset to the right if the
command argument is positive, and to the left if the argument is
negative. For whole feature operations the argument need not be given,
and the cursor position is used to calculate the offset distance. 
The OFFSET command may be used after COPY/MODIFY WHOLE/PART but is not
allowed after REVERSE or MOVE.

For texts and symbols, the OFFSET command leaves LITES2 in MODIFY state
with the cursor on the locating point of the feature being modified. 
Any rotation, stretching or aligning is cancelled. 
If an argument is given, then the gap between the original position of
the text/symbol and the cursor position is the distance specified; if no
argument is given, then the gap between the original text/symbol and the
offset one is a proportion of the text/symbol height.  This proportion
can be set with the TOLERANCE OFFSET command. 
If the proportion is -ve, or if the argument is -ve, then the new
text/symbol will be placed above the original. 

Format:  OFFSET  [real]

Valid in states  LINE ON TEXT SYMBOL MODIFY

1 TRANSFORM
Sets up and uses an orthogonal transformation. 
This is a transformation of the form:

        X = ax - by + c1
        Y = bx + ay + c2 

This applies a rotation, a scale change and a translation to points in
the current coordinate system (x,y) to give the points in the target
coordinate system (X,Y).

The transformation can either be set up by giving the coordinates of two
points in both systems, using the TRANSFORM FROM and TRANSFORM TO
commands, or by specifying the rotation, scale factor, point of rotation
and translation explicitly, using the TRANSFORM COEFFICIENTS command.

Features and regions can be transformed using the TRANSFORM FEATURE
and TRANSFORM REGION commands.

It is possible to transform part features if the MODIFY PART or COPY
PART commands (qv) have been given.

NOTE: It is possible to transform features so that they lie outside
the limits of the map.  These features cannot be displayed or found,
but they may be located using the LOCATE or SEARCH commands (qv).

Format:  TRANSFORM  subcommand

2 AC
This is an alias for TAKE AC (qv), and remains for historical reasons. 
The command will be withdrawn in a future release of LITES2.

2 COEFFICIENTS
Define the characteristics of a transformation.

Definition is in terms of the angle, scale factor, rotation point and
required x and y translations.
The angle is given in degrees.
The scale factor must be in the range .001 to 1000
The rotation point is the point about which the rotation takes place.

The transformation is carried out in the order:

         rotation
         scale change
         translation

The coordinates of the rotation point and the X and Y translations are
in IFF units (unless a UNITS command has been given).

Format:  TRANSFORM COEFFICIENTS angle scale x y dx dy

Valid in states  READY LINE CIRCLE ON TEXT SYMBOL MODIFY

2 FEATURE
Transform the current feature according to the current transformation
parameters. (default)

The height or point size of texts will be altered if HEIGHT is enabled,
but this can only be done to the nearest .01 mm (if POINT is disabled)
or to the nearest valid point size. In these cases subsequent editing
of the feature may be required.

The size and orientation of scaled symbols will be altered, but only the
orientation of oriented symbols will be altered, their size being
retained. Unoriented symbols will have their position altered, but will
be drawn horizontal and will be the size specified in the FRT. 

Format:  TRANSFORM FEATURE
or       TRANSFORM

Valid in states  LINE CIRCLE ON TEXT SYMBOL MODIFY

2 FROM
Define the current coordinate system for setting up a transformation,
by giving the coordinates of two points. The two points must define a
vector. If the command TRANSFORM TO has been given, then the
transformation between the two coordinate systems will be set up.

The coordinates are in IFF units (unless a UNITS command has been
given).

Format:  TRANSFORM FROM xa ya xb yb

Valid in states  READY LINE CIRCLE ON TEXT SYMBOL MODIFY

2 REGION
Transform the specified region according to the current transformation
parameters.

Format:  TRANSFORM REGION reg

Valid in states  READY LINE CIRCLE ON TEXT SYMBOL MODIFY

2 TO
Define the target coordinate space for a transformation,
by giving the coordinates of two points. The two points must define a
vector. If the command TRANSFORM FROM has been given, then the
transformation between the two coordinate systems will be set up.

The coordinates are in IFF units (unless a UNITS command has been
given).

Format:  TRANSFORM TO xa ya xb yb

Valid in states  READY LINE CIRCLE ON TEXT SYMBOL MODIFY

1 FILTER
Filters the points in a feature according to the BUNCH filtering
algorithm. 

The BUNCH filter uses tolerances related to chords on the incoming point
strings. The filter performs a least squares fit through all the
existing data points, and when a point lies more than the lateral
threshold distance from the trend line it is considered to be a
provisional master point. A new fit is then conducted forwards from the
last master point, until again the threshold deviation is exceeded. The
last provisional point is taken to be the next master point and the
intervening points are rejected. The process is repeated until the end
of the line is reached. If the lateral threshold distance is large, it
will rarely be exceeded and many points will be thrown away. 

The number of points which are kept as master points or are
thrown away may be additionally controlled by the minimum and maximum  
separation.

The minimum separation is the shortest distance allowed between
successive master points along the line. If this is set to a large
value, more points will be thrown away giving increasingly angular
linework. 

The maximum separation is the distance travelled along the line before
forcing out a master point. A large value will result in very sparse
points along straight and nearly straight lines. A maximum separation of
0.0 is equivalent to one of infinity, and means that no points will be
forced out on distance criteria. 

The maximum separation must be greater than or equal to the minimum
separation which must be greater than or equal to the lateral threshold
distance. 

As the BUNCH filter uses a least squares algorithm, all new points will
be placed to the outside of the original curve of the line being
filtered. 

Format:  FILTER  subcommand

Valid in states  LINE ON

2 FEATURE
Filters the found feature.

It is possible to FILTER part features if the MODIFY PART or COPY
PART commands (qv) have been given.

Format:  FILTER FEATURE
or       FILTER

1 FEATURE
Construct a feature from some entity.

Format:  FEATURE subcommand

Valid in states  READY

2 GEOMETRY
Construct a feature from the specified geometry. If the geometry has
several parts, each part will produce a separate feature.

Area type geometries will produce features with invisible lines connecting
inner rings. These are in a form that can be converted back into area
geometries with the GEOMETRY FEATURE command.

The feature is constructed with the attributes in the current attribute
set (and so this must be compatible with the type of the geometry).

If Z is enabled, features will be constructed with all the points at the
height of the cursor.

Format:  FEATURE GEOMETRY n

2 REGION
Construct a feature from the specified region.

The feature is constructed with the attributes in the current attribute
set (and so the current feature code must be linear).

If Z is enabled, features will be constructed with all the points at the
height of the cursor.

Format:  FEATURE REGION n

1 CLOSE
Closes a feature currently being constructed to form a loop.
The cursor is moved to the correct position ready for the END
command. If given after the BRIDGE command, and the bridge starts
at one end of a feature, then the CLOSE command will locate the
other end of the original feature, and END will generate a closed
feature from the original plus the bridge.

Format:  CLOSE  subcommand

Valid in state  CONSTRUCT

2 NORMAL
Close construction with last point same as first point.

Positions cursor on first point of construction (default).
An END command will then result in a closed feature.

Format:  CLOSE NORMAL
or       CLOSE

2 SQUARE
Close construction by extending current segment to form square corner.

Extend current segment of construction and add a point in such a position
that the closing line forms a right angle.
The cursor is left positioned on the first point of the construction.

Format:  CLOSE SQUARE

1 EDIT
Amends a single data point or line segment.

Format:  EDIT  subcommand

2 ATTRIBUTE
Edits the specified attribute of the current point.

If no value is given, then the specified attribute is deleted from the 
point, otherwise the specified attribute and value is added to the point
or, if the point already has the attribute then its value is updated.

The attribute code can either be an integer, or the corresponding
name defined by Laser-Scan or one defined by the user in his FRT. 

The format of the value depends on the data type of the specified
attribute code, either defined by Laser-Scan or defined by the user
in his FRT. 

See "Command Arguments" for more details of these data types.

Format:  EDIT ATTRIBUTE attribute [value]

Valid in states  LINE SYMBOL TEXT

2 CP
Edits the specified control point of the specified map. 
If no map is specified, the control point in map 1 is edited.

By default the x and y values are interpreted as IFF units (unless
a UNITS command has been given).

The new value will be used when the SETUP AGAIN command is next given.

Format:  EDIT CP [map] corner x y

         where corner = NW
                      = SW
                      = SE
                      = NE

         map is an integer and
         x and y are real numbers
	 
eg       EDIT CP 2 NW 0.0 1000.0

Valid in state  READY

3 NE
Edit the North East (upper right) control point. 
This is the last point in the CP entry in the IFF file.

3 NW
Edit the North West (upper left) control point. 
This is the first point in the CP entry in the IFF file.

3 SE
Edit the South East (lower right) control point. 
This is the third point in the CP entry in the IFF file.

3 SW
Edit the South West (lower left) control point. 
This is the second point in the CP entry in the IFF file.

2 POINT
Edits the position of a data point (default).
The current point is attached to the cursor, and can be moved around
until the END command is given.

Format:  EDIT POINT
or       EDIT

Valid in state  LINE

2 VISIBILITY
Edits the visibility of a line segment.
The cursor must be positioned between points. The line segment is set
visible (1) or invisible (0).

Format:  EDIT VISIBILITY  integer

Valid in state  LINE

1 INSERT
Adds a data point to a line as an edit or a hidden point in constructing.

If in LINE state adds a data point. A new point is created, attached to
the cursor, which can be moved around until the END command is given.

If in CONSTRUCT state, then an intersected point can be inserted in the
construction. The effect is shown in the following diagram:

       1              2              I
----X--------------X- - - - - - - X       The INSERT command is given at
                                  !       point 2. INVISIBLE, START or
                                  !       END commands are given at point
                                  ! 3     3 and 4, with the result that
                                  X       points 2 and 3 are replaced by
                                  |       point I.
                                  |
                                  |       If an INVISIBLE command is
                                  | 4     given at point 3, the vector
                                  X       1 - I is invisible; if an
                                  |       INVISIBLE command is given
                                  |       at point 4, the vector I - 4
                                  |       is invisible.

Format:  INSERT

Valid in states  LINE CONSTRUCT

1 REMOVE
Deletes a data point.
The current point is removed from the feature, or construction.

Format:  REMOVE

Valid in states  LINE CONSTRUCT

1 LOOP
Makes the found feature a loop (closed feature).
The cursor position may be adjusted before the END command is given.

Format:  LOOP  subcommand

Valid in states  LINE CIRCLE

2 EXTEND
Extends first and last spans of feature to new meeting point.

Format:  LOOP EXTEND

2 NORMAL
Moves first and last points to their mean position.

Format:  LOOP NORMAL

1 EXTEND
Produces (extends) an end segment of a line feature.
The cursor is constrained to move in either direction along the final
segment of the feature until END is given. 

Format:  EXTEND

Valid in state  LINE

1 BRIDGE
Replaces part of a feature, or adds points to the end of a feature.
The sequence of commands involved will normally be 
FIND
PREVIOUS/NEXT/FRACTION etc. as needed to get to first point of change
BRIDGE
START at all the new points of the changed part.
FIND again to locate last point of change
END

BRIDGE behaves slightly differently at the ends of features.
If the BRIDGE command is given when at the end of a feature, then it is
not necessary to FIND the original feature before giving the END command.
The extra points will be added to the end of the feature.
If the END command is given when at the end of a feature, then the final
segment is not added to the feature. This allows 'bridging onto the sheet
edge'. A common mistake is to bridge all the way from one end of a
feature to the other, hoping to make a closed loop. Instead, the original
feature is deleted and replaced by the bridge. To get the desired effect,
use the CLOSE command (qv) - this will automatically locate the
opposite end of the feature from where the bridge was started, and END
will then produce a closed loop. Note that all parts of features deleted
by BRIDGE may be recovered using RECOVER or SEARCH DELETED.

Format:  BRIDGE

Valid in state  LINE

1 CHANGE
Changes attributes of found feature. 

For linear features, the change will be completed immediately, unless a
COPY or MODIFY command has been given first. For text or symbol
features, MODIFY state will be entered, allowing other changes to be
made until END is given. 

Format:  CHANGE  subcommand

Valid in states  LINE CIRCLE TEXT SYMBOL MODIFY ON

2 CATEGORY
Changes category field for text.

Format:  CHANGE CATEGORY  integer

2 CC
Changes component code of current text component.

Format:  CHANGE CC integer

2 CROSSREF
Changes text cross reference (not implemented).

Format:  CHANGE CROSSREF  integer

2 DIRECTION
Changes "reversed feature flag" of found feature (not implemented).

Format:  CHANGE DIRECTION

2 EDITED
Changes the edit flag of the found feature to the specified setting.

Format:  CHANGE EDITED integer
eg
         CHANGE EDITED 1    sets the flag
         CHANGE EDITED 0    clears the flag

2 FC
Changes feature code of found feature.

Format:  CHANGE FC  integer

2 FSN
Changes feature serial number of the found feature.
If no argument is given, a new FSN is generated automatically.

Format:  CHANGE FSN  [integer]

2 HEIGHT
Changes height of found text feature (mm).

Format:  CHANGE HEIGHT  real

2 LAYER
Changes layer of found feature.

Format:  CHANGE LAYER  integer

2 LOCATION
Changes text location field for text.

Format:  CHANGE LOCATION  integer

2 MAP
Changes map of found feature.

Format:  CHANGE MAP  integer

2 PC
Changes the process code associated with a feature.
NOTE: text feature cannot have process codes

Format:  CHANGE PC  integer

2 PSIZE
Changes text height in points.

Format:  CHANGE PSIZE  integer

2 STYLE
Changes text style field for text.

Format:  CHANGE STYLE  integer

1 REVERSE
Digitising direction of the found feature is reversed. 
This command is not allowed after OFFSET. 

Format:  REVERSE

Valid in states  LINE ON

1 SPLIT
Splits a linear feature in two, or splits a text into two or more parts.

Format:  SPLIT subcommand [text]

2 AFTER
Splits a text feature after a given string.
This command is only valid if COMPOSITE has been enabled.

Replaces the text component containing the specified string "text" with
two components. The split is made after "text" and the current component
becomes the one that does not contain this string. 

If "text" is at the end of a text component, then a warning is
given; the following text component becomes the current one. This is a
way of moving directly to a particular text component in a composite text
feature without NEXTing or PREVIOUSing over the intervening components.

If in MODIFY or TEXT state, then the whole text is scanned for the first
occurrence of "text"; if in MODIFY (part) state then only the current
text component is examined

Format:  SPLIT AFTER text
 
Valid in states  TEXT MODIFY

2 APART
Splits a text feature at current component.
This command is only valid if COMPOSITE has been enabled.

Splits the current composite text into two separate features, before
the current text component.

Texts can be joined together again using the JOIN command.

This command returns LITES2 to READY state.

Format:  SPLIT APART
 
Valid in states  TEXT MODIFY

2 AROUND
Splits a text feature either side of a given string.
This command is only valid if COMPOSITE has been enabled.

Replaces the text component containing the specified string "text" with
three components. The splits are made before and after "text" and the
current component becomes the one containing this string. 

If "text" is already a complete text component, then a warning is given
and this text component becomes the current one. This is a way of moving
directly to a particular text component in a composite text feature
without NEXTing or PREVIOUSing over the intervening components. 

If in MODIFY or TEXT state, then the whole text is scanned for the first
occurrence of "text"; if in MODIFY (part) state then only the current
text component is examined.

This command leaves LITES2 in MODIFY (part) state.

Format:  SPLIT AROUND text
 
Valid in states  TEXT MODIFY

2 BEFORE
Splits a text feature before a given string.
This command is only valid if COMPOSITE has been enabled.

Replaces the text component containing the specified string "text" with
two components. The split is made before "text" and the current component
becomes the one that contains this string. 

If "text" is at the beginning of a text component, then a warning is
given; this text component becomes the current one. This is a way of
moving directly to a particular text component in a composite text
feature without NEXTing or PREVIOUSing over the intervening components. 

If in MODIFY or TEXT state, then the whole text is scanned for the first
occurrence of "text"; if in MODIFY (part) state then only the current
text component is examined

Format:  SPLIT BEFORE text
 
Valid in states  TEXT MODIFY

2 LINE
The feature is split at the current cursor position (default). 

Format:  SPLIT LINE
 
Valid in states  LINE CIRCLE

1 DELETE
Deletes found feature, AC, TC or CH

Format:  DELETE  subcommand

Valid in states  LINE CIRCLE TEXT SYMBOL AC

2 PART
Deletes part of a line feature.

This command is equivalent to 
MODIFY PART
DELETE
See MODIFY PART command for details.

Format:  DELETE PART

2 WHOLE
Deletes a whole feature, or an AC, TC, CH (default).
For features, the feature is marked as deleted and remains in limbo.
It may be found only using the RECOVER or SEARCH DELETED commands (qv).
The SUPPRESS command (qv) may be used if the feature is to remain
displayed on the screen (until the next redraw).

Format:  DELETE WHOLE
or       DELETE

1 Joining_Commands
The following LITES2 commands are used to carry out joining operations

JOIN MATCH EDGEMATCH REVIEW MEND PROPAGATE TIE 

1 JOIN
Join together two lines or two texts.

a) For linear features:
   Merges two features into one.
   The MATCH command (qv) can be used to specify which attributes of
   features to be joined must match. 

   Normal sequence is:
   FIND first feature at an end
   JOIN
   FIND second feature (can only find ends)
   adjust position of join if required
   END

b) For text features:
   If there is a found object that is a text, then the found feature
   is logically joined to the end of the feature being modified. The
   second feature retains its old position. A PARAGRAPH command will
   position the second feature at the end of the first.

Format:  JOIN

Valid in states  LINE MODIFY

1 MEND
Merges several features into one. 
Acts as JOIN (qv), but jumps to other end of second feature to try to
find a plausible connection. The MATCH command (qv) can be used to
specify which attributes of features to be joined must match. 

Normal sequence is:
FIND first feature at the end near join to second feature
MEND [MANUAL or AUTOMATIC (default)]
If operation pauses then:
FIND next feature to MEND to, adjust position of join if required, then
END

ABANDON will terminate the operation, including the feature in hand in
the mended feature, but not any found feature.

Format:  MEND  subcommand

Valid in state  LINE

2 AUTOMATIC
Performs whole mend operation automatically (default). 
The operation will pause only if there is more than one possible
candidate to MEND to. CTRL/C may be used to pause the operation.

Format:  MEND AUTOMATIC

2 MANUAL
Allows operator intervention at each break to be mended.

Format:  MEND MANUAL

1 TIE
Aligns the end points of two features to get a tidy graphical result.

Does a simultaneous edit of the end points of two features to produce a
graphical match. Acts as JOIN (qv) but leaves the two features
independent.

Format:  TIE

Valid in state  LINE

1 PROPAGATE
Smooths feature(s) on either side of an edit point.
Used during JOIN or TIE to smooth out the effects of the edit.

Format:  PROPAGATE

Valid in state  EDIT (while TIEING and JOINING)

1 MATCH
Set up match conditions for JOIN, TIE, MEND and EDGEMATCHING

Format:  MATCH  subcommand

Valid in states  INITIAL READY LINE EDIT ON

2 AC
Ancillary codes must match.
The set of AC types to match may be given as names, numbers, or ranges
of numbers. The range of ACs given in this command replace any given
in a previous MATCH AC command.
If the command is used without giving any AC types, perhaps after a
MATCH NONE command, then it just turns on AC matching with the same
set of ACs as previously, or if this is the first use of the command,
then ACs of types 2 3 4 & 5 (CONTOUR, HEIGHT, LH_BOUNDARY, and
RH_BOUNDARY) must match. 

Format:  MATCH AC  [range]

eg       MATCH AC 20-30,40-50,55,78
or       MATCH AC LH_BOUNDARY,RH_BOUNDARY
or       MATCH AC HEIGHT,23

2 FC
FC must match (default).

Format:  MATCH FC

2 FSN
FSN must match.

Format:  MATCH FSN

2 LAYER
LAYER must match (default).

Format:  MATCH LAYER

2 MAP
MAP must match (default).

Format:  MATCH MAP (default)

2 NONE
No attributes need match, for alignment only.

Format:  MATCH NONE

2 PC
Process codes must match

Format:  MATCH PC

1 EDGEMATCH
Carry out edgematching of features along a baseline,
defined using the BASE EDGE command (qv).
Edgematching can be aborted with CTRL/C, but any features that have
been altered at this point cannot be recovered.
The REVIEW command may be used after EDGEMATCH to step through any
problems encountered.
An appropriate licence is required to use this command.

Format:  EDGEMATCH  subcommand

Valid in state  READY 

2 EXTEND
EXTEND or truncate features to the baseline.

Format:  EDGEMATCH EXTEND

2 JOIN
EDGEMATCH and JOIN the features together.

Format:  EDGEMATCH JOIN

2 TIE
EDGEMATCH and TIE the features together.
Features in a read only map are left unaltered, but editable features
may be tied to the nearest point on the baseline to the end of the
read only feature.

Format:  EDGEMATCH TIE

1 Text_and_Symbol_Commands
The following LITES2 commands are used to manipulate texts and symbols

TEXT LARGER SMALLER MARGIN ROTATE ALIGN STRETCH BEND COLLAPSE PARAGRAPH
WHOLE REPLACE SUBSTITUTE 

1 BEND
Bends a text around a linear feature.

Each character of the text string becomes an individual text component,
with its locating point positioned on the linear found feature and its
orientation parallel to the found feature at this point. Any characters
with zero width are taken to represent diacritical marks (such as
accents) and are put together with the following character in a single
component.

When BENDing around circles or circle arcs, then the direction (ie 
clockwise or anticlockwise) that the text takes is determined by the
original orientation of the text, and the tangent of the arc at the first
point used to define the BEND.

This command is only valid if the COMPOSITE option has been enabled and
the existing text consists of a single text component. (If text is
already composed of multiple components, then use the COLLAPSE command
to achieve a single text component) 

Format:  BEND  subcommand

Valid in state  MODIFY

2 NORMAL
BEND the subject around the found object at the cursor position
(default). 

The original justification of the text is maintained.

Format:  BEND NORMAL
or       BEND

2 STRETCH
BEND the subject between two points of a linear or circular found object.

The initial cursor position is taken as the first point, and the cursor
is constrained to lie on the found object. The cursor can then be moved
to the second point and the END command given to complete the operation.

Format:  BEND STRETCH

1 COLLAPSE
Converts two or more component texts into a single text component.

This command is only valid if COMPOSITE has been ENABLED.

When in TEXT or MODIFY state, all the text components are collapsed into
one subtext. The resulting text takes its attributes from the first text
component. 

When in MODIFY (part) state the current text component has the following
text component added to it. This combined text component takes its
attributes from the current text component. 

Format:  COLLAPSE

Valid in states  TEXT MODIFY

1 PARAGRAPH
Treats a text feature as a paragraph of text, for word processing. 

This command is only valid if COMPOSITE has been ENABLED.

The text is reformatted as a paragraph. This paragraph is positioned with
the locating point of its first component text positioned so that the
first line of the formatted paragraph is as close as possible to the
first line of the original feature.
The first component of the original text feature also provides the
orientation and the line spacing of the paragraph. The line spacing
uses the TOLERANCE OFFSET, to provide an offset for each succeeding
line of text (see OFFSET command for details).

This command leaves LITES2 in MODIFY state, with the first text component
as the current component.

Note: in all PARAGRAPH commands, any per point attributes are lost.

Format:  PARAGRAPH subcommand

Valid in states  TEXT MODIFY

2 FILL
Fill a paragraph of text so that no line is longer than specified
length. The text components are split at spaces or tabs, and spaces may
be inserted if necessary when two text components are collapsed. Text
components are never collapsed if they have different component codes
or different heights.
Leading and trailing spaces and tabs are stripped off text components.
 
The length is specified in sheet mm, unless the UNITS command has
previously been given.
If no length is specified, then the length of the first component is used. 

Format:  PARAGRAPH FILL [length]

2 JUSTIFY
Justifies a paragraph of text so that each line is the same length. 
It does this by putting each word in a text component of its own, and
positioning them so that extra space in the line is evenly distributed
between the individual components. If a line is already longer than
the specified length, then it is allowed to overhang the margins of the
text, so it is usual to precede this command with a PARAGRAPH FILL
command.

The last line of the paragraph is never filled.

Leading and trailing spaces and tabs are stripped off text components.
 
The length is specified in sheet mm, unless the UNITS command has
previously been given.
If no length is specified, then the length of the first component is used. 

Format:  PARAGRAPH JUSTIFY [length]

2 NORMAL
Tidies a paragraph of text.

Text features that have been paragraphed can be upset by several
LITES2 commands. For example:

 * changing the size of a subtext means that the subtext takes up
   more or less space in the line, with subsequent overwriting or
   unwanted space

 * changing the locating code of the paragraph as a whole, where
   there are more than one subtext per line, leads to overwriting
   of these subtexts (although other lines are justified as required)

This command corrects such paragraphs, by repositioning the text
components on their own lines to form a correct paragraph. The number
of spaces to place between each text component may be specified
(default 1). It may be useful to specify zero spaces if there are
text components which form only part of a word, and hence do not
require spaces around them.

Leading and trailing spaces and tabs are stripped off text components,
unless the optional number of spaces is given as 0.
 
Format:  PARAGRAPH NORMAL [spaces]

1 WHOLE
Changes from MODIFY (part) state to MODIFY state; 
ie change from editing individual text components to editing the whole
text feature. 

Format:  WHOLE

Valid in state  MODIFY

1 REPLACE
Replaces existing text or AC text with the given string. 
For an AC, the string may be absent, in which case the AC text is
removed. If the string is to have leading spaces or tabs, then it must
be enclosed in double quotes.

NOTE: an implied TEXT or REPLACE command is inserted before any
command that is terminated by a control Z. REPLACE is used if it
is valid, and otherwise TEXT is used.

Format:  REPLACE  [text]
or       text^Z

Valid in states  TEXT MODIFY AC

1 SUBSTITUTE
Substitutes new substring for existing one in text feature or AC.
If either the old or new text contains spaces then it should be
enclosed in double quotes.

Format:  SUBSTITUTE  oldtext newtext

eg       SUBSTITUTE FRED JIM
or       SUBSTITUTE "Ford Prefect" "Zaphod Beeblbrox"

Valid in states  TEXT MODIFY AC

1 SMALLER
Makes text or scaled symbol smaller.
For texts with height in pointsize units it uses the next available
pointsize. 
Otherwise the text or symbol is decreased in size by 10%.

Format:  SMALLER

Valid in states  TEXT SYMBOL MODIFY

1 LARGER
Makes text or scaled symbol larger.
For texts with height in pointsize units it uses the next available
pointsize. 
Otherwise the text or symbol is increased in size by 10%.

Format:  LARGER

Valid in states  TEXT SYMBOL MODIFY

1 ROTATE
Rotates text or symbol (in terms of angles)

Format:  ROTATE  subcommand

Valid in states  TEXT SYMBOL MODIFY

2 BY
Rotate the subject anticlockwise by the given angle in degrees.

Format:  ROTATE BY  real

2 CURSOR
Rotate the subject using the cursor.
When the feature is suitably orientated, disconnect the cursor
with an END.

Format:  ROTATE CURSOR

2 TO
Rotate subject to lie at the given angle in degrees.
The angle is measured anticlockwise from the right (East).

Format:  ROTATE TO  real

1 TURN
Rotates text or symbol (in terms of bearings)

Format:  TURN  subcommand

Valid in states  TEXT SYMBOL MODIFY

2 BY
Rotate the subject clockwise by the given angle in degrees.

Format:  TURN BY  real

2 CURSOR
Rotate the subject using the cursor.
When the feature is suitably orientated, disconnect the cursor
with an END.

Format:  TURN CURSOR

2 TO
Rotate subject to lie at the given bearing in degrees.
The bearing is measured clockwise from grid north.

Format:  TURN TO  real

1 ALIGN
Define size and rotation of a scaled symbol with cursor.
When symbol is suitably aligned, disconnect cursor with an END.

Format:  ALIGN

Valid in states  SYMBOL MODIFY

1 STRETCH
Define size of a scaled symbol with cursor.
When symbol is of a suitable size, disconnect cursor with an END.

Format:  STRETCH

Valid in states  SYMBOL MODIFY

1 MARGIN
Shifts text to specified OS marginal position.

Format:  MARGIN  integer

Valid in states  TEXT MODIFY

1 Graphics_Commands
The following LITES2 commands are used for graphics display

DRAW WINDOW SUPPRESS ZOOM LABEL ANNOTATION 
WORKSTATION OVERLAY IMAGE DISPLAY VIEW PLOT

1 DRAW
Draws on the LITES2 screen(s).

DRAW MAP and DRAW SCREEN clear the display and draw the whole or
part of the IFF file(s) being edited. The features in the IFF file
are drawn with the characteristics specified for their feature code
in the FRT file being used. The action of DRAW may be modified by
SUPPRESS, and ENABLE VECTOR (qv).

Other DRAW commands allow additional information to be added to the
picture on the screen. This data is drawn with characteristics specified
by the ANNOTATION command.

By default, LITES2 uses drawing buffers which can hold 8192 points, and
this limits the size of areas that can be filled. Areas with more than
this number of points will only be drawn in outline (perhaps with some
invisible lines being visible). The size of the drawing buffer can be 
altered by setting the logical name LSL$FILL_POINTSMAX to the required
size before LITES2 is started up. This logical name also controls the
size of images that can be drawn; the error message

 "Buffer too small to draw <type> - zoom in or increase LSL$FILL_POINTSMAX"

indicates that the buffers are too small, and should be increased.

When drawing fill areas there is a limit to the number of times a scan
line can be cut. By default this is 100. If the message 

   "FILL_SIDE - Too many intersections found - ignored"

occurs, then this number is too small. It can be set by defining the
logical name LSL$FILL_CUTSMAX before starting LITES2.

Note that memory has to be allocated in proportion to these numbers, so
unnecessarily large values should be avoided.

Format:  DRAW  subcommand

Valid in states  READY LINE CIRCLE TEXT SYMBOL SETUP

2 ABSOLUTE
Draw a point and absolute coordinates of cursor on screen.

Draws the symbol (specified by the ANNOTATION MARK command) at the
current cursor position and a string of text containing the absolute
position (ie full projection coordinates) of the cursor.

The position of the text string is based on any ANNOTATION OFFSET commands
that have been given, in conjunction with the symbol's bounding box.
If the offset in X is positive, then the position of the text is this
amount to the right of the bounding box, and if it is negative then the
position is to the left. Similarly a positive or negative Y offset positions
the text above or below the bounding box. When an offset of 0.0 is specified
no allowance for the bounding box is made.

Format:  DRAW ABSOLUTE

2 AREAREGIONS
Draw region boundaries as areas.

If a region is specified, it is displayed as a filled area.
If no region is specified, displays all the defined regions.

This command uses the colour set with the ANNOTATION COLOUR command and
the fill style set with ANNOTATION FILL command.

Format:  DRAW AREAREGIONS  [integer]

2 DTI
Draws the specified DTI file in the current display.
The file is zoomed or subsampled as required to fill as much of the
display as possible.

Format:  DRAW DTI  filename

2 FEATURE
Draws the current found object with the current annotation
characteristics.

Format:  DRAW FEATURE

2 GEOGRAPHICAL
Draw a point and geographical coordinates of cursor on screen.

Draws the symbol (specified by the ANNOTATION MARK command) at the
current cursor position and a string of text containing the geographical
position (ie latitude and longitude) of the cursor. This command is only
available if at least one of the IFF files has a fully specified 
version 2 map descriptor. See the IMP utility ITRANS for more
information.

The position of the text string is based on any ANNOTATION OFFSET
commands that have been given, in conjunction with the symbol's bounding
box. If the offset in X is positive, then the position of the text is
this amount to the right of the bounding box, and if it is negative then
the position is to the left. Similarly a positive or negative Y offset
positions the text above or below the bounding box. When an offset
of 0.0 is specified no allowance for the bounding box is made.

Format:  DRAW GEOGRAPHICAL

2 GEOMETRY
Draws geometries according to their type.
Point type geometries are displayed with a symbol at each of their
locating points (the symbol being set by the ANNOTATION MARK command).
Line type geometries are displayed as lines.
Area type geometries are displayed as areas.

This command uses the drawing attributes set with the ANNOTATION command.

If a geometry is specified only that geometry is displayed.
If no geometry is specified, all the defined geometries are displayed.

Format:  DRAW GEOMETRY  [integer]
      or DRAW GEOMETRIES

2 GRID
Plots sector grid (program development aid).

Format:  DRAW GRID

2 HARDCOPY
Draws the screen contents onto  screen hard copy device (if available).
Draws crosses at corner points of maps first.

Format:  DRAW HARDCOPY

2 IFF
Draws the specified IFF file in the current display.

Format:  DRAW IFF  filename

2 IMAGE
Draws the raster image currently selected by the IMAGE NUMBER command
into the current display (which must not be the primary or
secondary display). An ANNOTATION OVERLAY must be specified.
An area of the image centred on the cursor is drawn. The optional
factor (default 1) specifies the pixel zoom factor e.g. DRAW IMAGE n
means draw the image with n screen pixels for each image pixel.
Numbers less than 1 mean to subsample the image, e.g. DRAW IMAGE 0.25
(or DRAW IMAGE 1/4) means that each screen pixel represents a 4 by 4
block of image pixels.

Format:  DRAW IMAGE [factor]

2 LABELS
Annotates all the features on the screen.

If the command LABEL FEATURE has been given (default) then the
whole feature is labelled; if the command LABEL POINT has been
given, then the individual points within the feature are labelled 

The attributes to be used for labelling can be set with the LABEL
command, and their appearance can be set with the ANNOTATION command. 

Format:  DRAW LABELS

2 LEGEND
Draws a legend to indicate the meaning of the colours in the current image.

The size and shape of the legend boxes and the position of the legend is
controlled by the ANNOTATION LEGEND command, and whether the background
to the text is blanked out by the ENABLE BLANK command.

The legend boxes are drawn in the same overlay as the image; the text
is drawn in the annotation overlay (in the colour set by the ANNOTATION
COLOUR command).

If the image is classified then one box is generated for each step/band
in the range of the image. This may mean that the legend will not fit
on the screen, and a message to this effect is output.

If the image is not classified, then a legend is always drawn, but if all
the colours cannot be shown then a selection, evenly distributed through
the colour range, is displayed.

Format:  DRAW LEGEND

2 LSI
Draws the specified LSI file in the current display.
The file is zoomed or reduced views are used as required to fill as much
of the display as possible.

Format:  DRAW LSI  filename

2 LSR
Draws the specified LSR file in the current display.
The file is zoomed as required to fill as much of the display as possible.

Format:  DRAW LSR  filename

2 MAP
Re-draws the whole map on the screen.

Format:  DRAW MAP

2 MARK
Marks all the points in the features displayed on the screen.

The points to be marked can be selected with the LABEL ATTRIBUTE 
command; the symbol to be used to mark the points is selected with
the ANNOTATION MARK command.

Format:  DRAW MARK

2 MOVE
Moves the drawing cursor in the annotation display to given point, 
without drawing a line.

If the current annotation display is the primary or secondary
workstation, then the main LITES2 cursor is moved.
By default the position is specified in IFF units (unless a UNITS
command has been given).

Format:  DRAW MOVE x y

2 NUMBERS
Labels all the vertices in the features displayed on the screen with
their point numbers.

The vertices to be labelled can be selected with the LABEL ATTRIBUTE 
command; the position of the labels are offset by the amounts specified
by any ANNOTATION OFFSET command that has been given.

Format:  DRAW NUMBERS

2 POSITION
Draw a point and IFF coordinates of cursor on screen.

Draws the symbol (specified by the ANNOTATION MARK command) at the
current cursor position and a string of text containing the position of
the cursor in IFF units. 

The position of the text string is based on any ANNOTATION OFFSET commands
that have been given, in conjunction with the symbol's bounding box.
If the offset in X is positive, then the position of the text is this
amount to the right of the bounding box, and if it is negative then the
position is to the left. Similarly a positive or negative Y offset positions
the text above or below the bounding box. When an offset of 0.0 is specified
no allowance for the bounding box is made.

Format:  DRAW POSITION

2 REGIONS
Draw region boundaries as outline.

If a region is specified, displays the boundary of that region.
If no region is specified, displays the boundaries of all the defined
regions.

This command uses the colour set for drawing labels.  See the ANNOTATION
COLOUR command.

Format:  DRAW REGIONS  [integer]

2 SCREEN
Redraws the current window on the screen (default).

Format:  DRAW SCREEN
or       DRAW

2 SHEET
Draw a point and sheet coordinates of cursor on screen.

Draws the symbol (specified by the ANNOTATION MARK command) at the
current cursor position and a string of text containing the position of
the cursor in sheet mm. 

The position of the text string is based on any ANNOTATION OFFSET commands
that have been given, in conjunction with the symbol's bounding box.
If the offset in X is positive, then the position of the text is this
amount to the right of the bounding box, and if it is negative then the
position is to the left. Similarly a positive or negative Y offset positions
the text above or below the bounding box. When an offset of 0.0 is specified
no allowance for the bounding box is made.

Format:  DRAW SHEET

2 TEXT
Draw a point and text string on screen.

Draws the symbol (specified by the ANNOTATION MARK command) at the
current cursor position and the string of text specified in the argument.
The text must be enclosed in double quotes if it is to have
any leading spaces or tabs.

Note that the argument may contain a substituted variable, eg
DRAW TEXT '$IMAGEVALUE

The position of the text string is based on any ANNOTATION OFFSET commands
that have been given, in conjunction with the symbol's bounding box.
If the offset in X is positive, then the position of the text is this
amount to the right of the bounding box, and if it is negative then the
position is to the left. Similarly a positive or negative Y offset positions
the text above or below the bounding box. When an offset of 0.0 is specified
no allowance for the bounding box is made.

Format:  DRAW TEXT text

2 TITLE
Draws the text specified in the argument at the current cursor position.
The text must be enclosed in double quotes if it is to have
any leading spaces or tabs.

Note that the argument may contain a substituted variable, eg
DRAW TITLE '$IMAGEVALUE

The position of the text is based on the cursor position; it is not
affected by any ANNOTATION OFFSET command

Format:  DRAW TITLE text

2 VECTOR
Draws a vector from the current cursor position to the given point,
and moves the cursor to that position.

If the current annotation display is the primary or secondary
workstation, then the main LITES2 cursor is moved. By default the
position is specified in IFF units (unless a UNITS command has been
given).

Format:  DRAW VECTOR x y

1 WINDOW
Defines portion of map to be displayed on graphics screen,
for enlargement, etc.
Use the DRAW command (qv) to redraw either the whole map or the
current window.
The action of WINDOW may be modified by SUPPRESS, and ENABLE VECTOR (qv).

Format:  WINDOW  subcommand

Valid in states  READY LINE CIRCLE TEXT SYMBOL WINDOW SETUP

2 MAP
Define new window in terms of of whole map.

The current cursor position is taken as the lower left corner of the
new window. This can be redefined by moving the cursor and using WINDOW
or START.
Then move the cursor to the top right corner of the new window and
give command END.
Differs from WINDOW SCREEN in that the screen cursor positions while the
window is being defined are as if the whole map were displayed on the
screen. This enables screen windowing onto a region not currently on
the screen.

Format:  WINDOW MAP
or       WINDOW

2 SCREEN
Define new window in terms of current screen window.

The current cursor position is taken as the lower left corner of the
new window. This can be redefined by moving the cursor and using WINDOW
or START.
Then move the cursor to the top right corner of the new window and
give command END.

Format:  WINDOW SCREEN

1 PICTURE
Allows the IFF data to be transformed as it is displayed on the screen.

This command is only available on versions of LITES2 running on
suitable hardware. This includes LITES2 running under VWS and MOTIF
windowing systems.

Format:  PICTURE  subcommand

Valid in states  READY

2 ROTATE
Setup an orthogonal transformation that rotates the IFF data by the
specified angle (in degrees) and introduces a scale change to allow the
whole LITES2 coordinate space to be shown on the screen.

The command PICTURE ROTATE 0 will cancel any existing setup and return
to default behaviour, as will PICTURE SETUP followed by ABANDON.

Format:  PICTURE ROTATE angle

2 SETUP
Setup an extended four point transformation to be used when IFF
data is being displayed.

Causes LITES2 to enter SETUP state, and to prompt for the user to
digitise the 4 corner points of the first map with reference to points
on the screen using START commands. (These will often be points in a
raster image). WINDOW, DRAW, and ZOOM commands may be used to display
the desired area on the screen. Once the setup is completed, LITES2 will
return to READY state and subsequent drawing will distort the vector
picture so as to match up the corner points with the selected points.
ABANDON may be used at any time in SETUP state to abort the setup. 

This command has the same effect as IMAGE SETUP.

Invoking PICTURE SETUP followed by ABANDON will cancel any existing setup
and return to default behaviour.

Format:  PICTURE SETUP

1 SUPPRESS
Modifies the action of DRAW, WINDOW, ZOOM, OVERLAY ERASE, and DELETE.
SUPPRESS may be used to prevent the updating of a display during
these operations. Displays may be suppressed during initial draw to
speed things up. The action of SUPPRESS persists only until the next
of these operations - the command must then be repeated if required.

Format:  SUPPRESS  subcommand

Valid in states  INITIAL READY LINE CIRCLE TEXT SYMBOL WINDOW SETUP PAINT

2 ALL
All displays are suppressed.

Format:  SUPPRESS ALL

2 CANCEL
Cancels the effect of previous SUPPRESS commands.

Format:  SUPPRESS CANCEL

2 CLEAR
Stops the screen being cleared before the next DRAW MAP, DRAW SCREEN,
WINDOW or ZOOM command draws vectors on the screen.

This command has no effect if segments are being used.

Format:  SUPPRESS CLEAR

2 PRIMARY
Primary display is suppressed.

Format:  SUPPRESS PRIMARY

2 SECONDARY
Secondary display is suppressed.

Format:  SUPPRESS SECONDARY

2 VECTOR
Display of vector data is suppressed.
This command only has any effect when raster images are being displayed.

Format:  SUPPRESS VECTOR

1 ZOOM
Redraws the area around the cursor enlarged by a given zoom factor
in the range 0.01 to 100.0. The default factor is 5.0.

If the subcommand IMAGE is given, then the zoom factor is interpreted
instead as the pixel zoom of raster images, e.g. ZOOM n IMAGE means
draw the image with n screen pixels for each image pixel. Numbers less
than 1 mean to subsample the image, e.g. ZOOM 0.25 IMAGE (or
ZOOM 1/4 IMAGE) means that each screen pixel represents a 4 by 4 block
of image pixels.

The action of ZOOM may be modified by SUPPRESS, and ENABLE VECTOR (qv).

Format:  ZOOM  [real] [IMAGE]

eg       ZOOM
or       ZOOM 20
or       ZOOM 0.3
or       ZOOM 1 IMAGE
or       ZOOM 1/4 IMAGE

Valid in states  READY LINE CIRCLE TEXT SYMBOL CONSTRUCT SETUP PAINT

1 LABEL
Sets the attributes to be used when annotating features or points 
with the DRAW LABEL command. Each LABEL command will set an additional
attribute, and all these attributes (if present) will be used to
annotate each feature that appears on the screen. 

eg       LABEL FSN
         LABEL FC
         LABEL AC Height

will cause labels of the form  "fsn  fc  [height]"  to be attached to
each feature on the screen. The height will only occur if the
feature has a height AC (type 3) associated with it. 

The LABEL NONE command should be used to cancel all labelling attributes.

The LABEL FEATURE command (default) allows features to be labelled by
the next DRAW LABEL command; the LABEL POINT command allows the
points within features to be labelled by the next DRAW LABEL command. 

Where the AC or attribute to be labelled is explicitly specified, it can
be referred to by its name or by the corresponding integer. 

Format:  LABEL  subcommand

Valid in all states

2 AC
Label features with the value of the specified AC. 
The format of the value displayed depends on the data type of the AC.

"HELP commands" gives more information on these data types

Format:  LABEL AC type

2 ACINT
Label features with the integer value of the specified AC. 

This command is now redundant. LABEL AC should be used instead.

Format:  LABEL ACINT type

2 ACREAL
Label features with the real value of the specified AC. 

This command is now redundant. LABEL AC should be used instead.

Format:  LABEL ACREAL type

2 ACTEXT
Label features with the text of the specified AC.

Format:  LABEL ACTEXT type

2 ATTRIBUTE
Label points with the value of the specified point attribute. 

The format of the value displayed depends on the data type of the
attribute. This command is also used to select which data points to
mark using the DRAW MARK command. If a value is given, then only
points with the specified attribute value are marked, and only values
values matching the given value are included in labels.

"HELP commands" gives more information on these data types

Format:  LABEL ATTRIBUTE type [value]

2 CONTOUR
Label features with the (integer) value of the contour AC. 
This is the same as LABEL AC Contour.

Format:  LABEL CONTOUR

2 FEATURE
The next DRAW LABEL command will label features with their attributes.

This is the opposite of the LABEL POINT command

Format:  LABEL FEATURE

2 FSN
Label features with their feature serial number.

Format:  LABEL FSN

2 HEIGHT
Label features with the (real) value of the HEIGHT AC. 
This is the same as LABEL AC Height

Format:  LABEL HEIGHT

2 LH
Label features with the text of the Left Hand Boundary AC. 
This is the same as the LABEL ACTEXT LH_boundary command. 

Format:  LABEL LH

2 NONE
Cancel all current labelling attributes.

Format:  LABEL NONE

2 POINT
The next DRAW LABEL command will label points with their attributes.

This is the opposite of the LABEL FEATURE command

Format:  LABEL POINT

2 RH
Label features with the text of the Right Hand Boundary AC. 
This is the same as the LABEL ACTEXT RH_boundary command. 

Format:  LABEL RH

1 ANNOTATION
Sets the characteristics of annotated graphical information.
This command affects graphics other than the map data drawn by LITES2.
This includes annotation produced by the various DRAW commands.

When labelling features the following rules apply:

(1) For texts and symbols labels are drawn above and to the right of
    the bounding box around the feature. For composite texts, the first
    text component is so labelled.

(2) For linear features the label is drawn parallel to the feature each
    time it enters (or leaves) the current window. There are two
    possibilities in this case: 
    a) By default, the label will be drawn at the end of (the part of)
       the feature nearest the left side or bottom of the window. This
       makes labels easily read, and this possibility is set with the
       ANNOTATE LEFT command.
    b) If the direction of the feature is important (eg for labelling
       with LH or RH codes) then the ANNOTATE START command should be
       used, when the feature will be labelled each time it enters the
       window.

Format:  ANNOTATION  subcommand

Valid in all states

2 ANGLE
The labels (and symbol where appropriate) produced by the DRAW ABSOLUTE,
DRAW GEOGRAPHICAL, DRAW POSITION, DRAW SHEET, DRAW TITLE and DRAW TEXT
commands will be drawn at the given angle (specified in degrees).

The offset of the label relative to the locating point is also rotated
so that the label maintains its position relative to the symbol.

Format:  ANNOTATION ANGLE real

2 BEARING
The labels (and symbol where appropriate) produced by the DRAW ABSOLUTE,
DRAW GEOGRAPHICAL, DRAW POSITION, DRAW SHEET, DRAW TITLE and DRAW TEXT
commands will be drawn at the given bearing (specified in clockwise
degrees from grid north).

The offset of the label relative to the locating point is also rotated
so that the label maintains its position relative to the symbol.

Format:  ANNOTATION BEARING real

2 COLOUR
Use the specified colour index for annotations.

If -1 is specified, labels on features will be drawn in the same colour
as the feature. In this case other annotations will be drawn in colour 1.

Note that by setting colour index 0 (background colour) with this
command, existing labels may be deleted without redrawing the screen.
(This is only available on raster displays)

Format:  ANNOTATION COLOUR integer

2 DISPLAY
Draw annotations into the specified display. 
The default display (0) means draw on the primary and/or secondary
workstation. This command sets the ANNOTATION OVERLAY to 0, so the
ANNOTATION OVERLAY command must be given again if a particular overlay
is to be used.

Format:  ANNOTATION DISPLAY integer

2 FILL
Use the specified fill style value (as in FRT) to draw area annotations. 

This value is an integer in the range -1 : 6 or in the range 101 - 106

        -1 means draw solid areas
         0 means draw hollow (ie draw boundary)
         1 horizontal hatching
         2 vertical   hatching
         3 +45 degree hatching
         4 -45 degree hatching
         5 horizontal and vertical cross hatching
         6 +45 and -45 degree cross hatching

Values 101 - 106 are the same as 1 - 6 with the addition of the boundary.

Format:  ANNOTATION FILL integer

2 FONT
Annotate features using the specified font.

Format:  ANNOTATION FONT integer

2 HARDWARE
Use the specified hardware value (as in FRT) for annotations.

Provides the same facilities for annotations as setting the hardware
field in the FRT does for features. The effect varies depending on
the display device, but may typically be used to specify line cap
and join styles. The default is 0.

Format:  ANNOTATION HARDWARE integer

2 HWTEXT
Attempt to use hardware facilities to draw labelling text (rather than
using the character shapes from the TRI file).

Hardware text is enabled if n is missing or 1, disabled if n is 0 and
by default.

Format:  ANNOTATION HWTEXT [n]

2 JOURNAL
Allows commands which annotate the display to be stored in a macro.
The commands journalled include most ANNOTATION, LABEL, and DRAW
commands. The macro may be replayed later to draw the same set
of annotations.

Format:  ANNOTATION JOURNAL  subcommand

3 CLOSE
Closes a previously opened annotation journal macro.
Annotation commands are no longer journalled.
The macro still remains defined, and may be replayed as required.

Format:  ANNOTATION JOURNAL CLOSE

3 OFF
Temporarily turns off the journalling of annotation commands.

Format:  ANNOTATION JOURNAL OFF

3 ON
Turns back on the journalling of annotation commands
after a previous ANNOTATION JOURNAL OFF command.

Format:  ANNOTATION JOURNAL ON

3 OPEN
Subsequent annotating commands are journalled to a named macro.
A macro with the given name is created, and subsequent annotating
commands (most of ANNOTATION, LABEL, and DRAW subcommands) are
automatically appended to it, unless a plot is currently on.
The macro is intended to be replayed by giving its name in the
normal way. The macro may be cancelled (using CANCEL MACRO) when
no longer required.

Format:  ANNOTATION JOURNAL OPEN macroname

2 LEGEND
Defines the size, shape and position of the legend
drawn by the DRAW LEGEND command.

The first two arguments define the size of the boxes in the legend. They
are specified as a proportion of the screen size.

The second two arguments, if present, define the position that the lower
left corner of the legend should take up. These are also specified as
a proportion of the screen. If the legend will not fit on the screen
with its lower left corner at this position, then the legend is moved
so that it lies entirely on the screen.

Note that it may be useful to specify these real arguments as a vulgar
fraction. For example if the DRAW LEGEND command gives an error because
"n" boxes will not fit on the screen, then the command 

     ANNOTATION LEGEND 0.05 1/n

will ensure that the legend will be drawn.

Format:  ANNOTATION LEGEND xsize ysize [xprop yprop]

2 LEFT
Annotate linear features as near to the bottom left corner of the screen
as possible.
(This is the opposite of ANNOTATION START)

Format:  ANNOTATION LEFT


2 LOCATION
The labels produced by the DRAW ABSOLUTE, DRAW GEOGRAPHICAL,
DRAW POSITION, DRAW SHEET, DRAW TITLE and DRAW TEXT commands will be
drawn with the specified position within the text over the locating
point for the label.

As for all texts, the location is an integer in the range 0 - 8.

Format:  ANNOTATION LOCATION integer

2 MARK
Specify the symbol to be used to mark the points of a feature,
with the DRAW MARK command. If a positive number is given, this
is taken to be a symbol feature code from the FRT file, while a
negative number (converted to positive) refers directly to a
symbol number in the SRI file.
Note that in either case, only the symbol number is used;
the colour and size of the mark is controlled by the ANNOTATION
SIZE and ANNOTATION COLOUR commands.

Format:  ANNOTATION MARK fc
or       ANNOTATION MARK -sc

2 OFFSET
Offset the annotation from the locating point by the specified distances
(in mm on the screen) in X and Y.  These values of X and Y are in the
direction of the feature. 
The default values are 0.0 in X and 1.0 in Y.

Format:  ANNOTATION OFFSET  real real

2 OVERLAY
Use the specified display overlay for annotations.
This overlay is also used for the DRAW AREAREGION, DRAW REGION, DRAW
GRID, and WINDOW MAP commands. The specified overlay must have been
created by a WORKSTATION OVERLAY command. If 0 is given, then
annotations will revert to their default behaviour of being written to
all planes of the display. This command may be used for example to
ensure that annotations are written into the same display overlay as
vector data and do not overwrite parts of an image backdrop.
Alternatively, annotations could be written into an overlay reserved for
the purpose which could then be REVEALed on CONCEALed as required. 

Format:  ANNOTATION OVERLAY integer

2 SCREEN
Draw the annotation at the edge of the screen.
(This is the opposite of ANNOTATION WINDOW)

Format:  ANNOTATION SCREEN

2 SIZE
Draw the annotation at the specified size (in screen mm).

Format:  ANNOTATION SIZE real

2 START
Annotate linear features where they enter the window.
(This is the opposite of ANNOTATION LEFT)

Format:  ANNOTATION START

2 WIDTH
Draw line work in the annotation at the specified thickness (in screen
mm).
In text and symbol components this value will be overridden if there is
a non-zero entry in the WIDTH field of the SCT entry for that component
in the current FRT.

Format:  ANNOTATION WIDTH real

2 WINDOW
Draw the annotation at the edges of a window around the cursor. 
By default, the size of this window is 0.5 times the size
of the screen. The optional argument to this command can be used to
alter the size of this window. It is the fraction of the full screen
that should be used.
If an edge of the window falls outside the screen, then the edge of the
screen is substituted for that edge of the window.  It is thus possible
to draw labels down the centre of the screen by, for example, positioning
the cursor above the screen at a position where the bottom of the window
is outside the screen. The bottom of the screen then becomes the bottom
of the window, but the left hand side remains where it was, and labels
will be drawn along it, across the width of the screen.

(This command is the opposite of ANNOTATE SCREEN)

Format:  ANNOTATION WINDOW  [real]

1 WORKSTATION
Alters facilities on the workstations in use.

Format:  WORKSTATION  subcommand

2 COLOUR
Sets the colour which will be used for a particular colour index. 

The effect of this command may vary depending on which workstations are
in use. Colour index 0 is the background colour, while 1 up to a maximum
are foreground colours. Negative colour indices may be used to set the
colour of (eg) highlighted features in certain implementations. The red,
green, and blue values should be in the range 0.0 to 1.0 and control the
fraction of the primary colours in the mixture. In the case of
workstations with both primary and secondary colour displays, this
command will affect both. 

Format:  WORKSTATION COLOUR  index red green blue

eg       WORKSTATION COLOUR 1 0.0 0.5 0.7

Valid in states:
READY LINE CIRCLE TEXT SYMBOL EDIT MODIFY ON WINDOW CONSTRUCT AC RECOVER SETUP

2 OVERLAY
Sets up display overlays using the graphics planes.

Allows the definition of display overlays consisting of a subset of the
pixel planes available on the primary or secondary displays. Once
defined, the OVERLAY command may be used to select which features are
drawn in a particular overlay, and how the overlay appears on the
display. The bit planes used in an overlay must be consecutive, and a
single plane may only be used in one overlay. The overlay number is used
to identify the overlay using OVERLAY NUMBER commands, and must be an
integer in the range 1-8. The offset argument specifies the first bit
plane to be used (the first plane is 0). If omitted, the first available
value allowing the requested number of planes is used. In the case of
workstation with primary and secondary displays which both support
overlays, the overlays are shared between the two - the creation of an
overlay in one automatically creates the same overlay in the other.

This command is only available with some versions of LITES2, and the 
user should refer to the hardware dependent reference manual for the
possibilities available with his hardware.

Format:  WORKSTATION OVERLAY number overlay planes [offset]

eg       WORKSTATION OVERLAY 1 2 4 3
         Defines overlay number 2 on workstation 1 (primary) to
         consist of bit planes 3,4,5, and 6.

Valid in all states

2 TYPE
Allows the user to specify the type of workstation being used, 
where there is the possibility of using slightly different hardware.

This command is only available with some versions of LITES2, and the 
user should refer to the hardware dependent reference manual for the
possibilities available with his hardware. On the other versions it is
a null operation.

Format:   WORKSTATION TYPE workstation type

eg       WORKSTATION TYPE 1 4014
         If given in the TEK_ARGS version of LITES2, this command is
         used to use a TEKTRONIX 4014 terminal (or an emulator) as the
         primary display, without the use of a MUART.

Valid in state  INITIAL

2 VIEWPORT
Sets the size and position on the screen of the active graphics area 
of  a particular workstation. 
The viewport extents should be in the range 0.0 to 1.0, thereby 
defining the required proportion of the total screen.
This command may be used in conjunction with the SCROLL command to
separate the text and graphics areas workstations with a single
screen.

Format:  WORKSTATION VIEWPORT workstation Xmin Xmax Ymin Ymax

eg       WORKSTATION VIEWPORT 1  0.2 1.0 0.0 1.0

Valid in state  INITIAL

1 OVERLAY
Specifies details of the appearance of display overlays. 

These must first be created using the WORKSTATION OVERLAY or DISPLAY
OVERLAY commands. The display to which the OVERLAY command applies must
be specified in a DISPLAY NUMBER command, or allowed to default to the
last display created.

Format:  OVERLAY  subcommand

Valid in all states except PAINT

2 ATTRIBUTE
Sets the attributes of a particular colour index in an overlay
all colours if index is not specified.
Possible attributes are:

TRANSPARENT - the underlying colour shows through. The colour of this
              colour index is not relevant.
OPAQUE      - this colour obscures any underlying colour.
INVERSE     - a colour complementary to the underlying colour is shown.
              The colour of this colour index is not relevant.
ADD         - The underlying colour is combined with this colour so as
              to produce a lighter colour.
SUBTRACT    - The underlying colour is combined with this colour so as
              to produce a darker colour.
MERGE       - The displayed colour is an average of the underlying
              colour and this colour.

Format:  OVERLAY ATTRIBUTE [index] attribute

2 BACKDROP
Sets the backdrop colour. This is the background colour of the display
which is considered to lie behind all the overlays. The colour may be
set either using the RGB scheme (the proportions of the primary colours
are specified in the range 0-1), the HLS scheme (hue is an angle 0-360
starting as red and moving through green then blue, lightness and
saturation are in the range 0-1), or the HSV scheme (hue as for HLS,
saturation and value in the range 0-1).

Format:  OVERLAY BACKDROP RGB red green blue
or       OVERLAY BACKDROP HLS hue lightness saturation
or       OVERLAY BACKDROP HSV hue saturation value

2 BLANK
Sets the colour index to use when blanking behind texts in an overlay.
If no colour index is given, then the blanking colour for this overlay
is cancelled, and the default colour is used.

See ENABLE BLANK for more details.

When blanking behind texts in an overlay, it is usual to use an opaque
colour.

Format:  OVERLAY BLANK [colour_index]

2 CLEAR
Removes all selections of IFF features or raster images from an overlay.

Format:  OVERLAY CLEAR

2 CLUT
Reads in a colour look up table for the selected overlay (not implemented).

Format:  OVERLAY CLUT filename

2 COLOUR
Sets the colour of a particular colour index in the selected overlay.
Zero is the background colour of the overlay (the colour which will appear
in areas where nothing is drawn). The colour may be set either using the
RGB scheme (the proportions of the primary colours are specified in the
range 0-1), the HLS scheme (hue is an angle 0-360 starting as red and
moving through green then blue, lightness and saturation are in the
range 0-1), or the HSV scheme (hue as for HLS, saturation and value in
the range 0-1).

Format:  OVERLAY COLOUR RGB red green blue
or       OVERLAY COLOUR HLS hue lightness saturation
or       OVERLAY COLOUR HSV hue saturation value

2 CONCEAL
Makes the selected overlay invisible (opposite of OVERLAY REVEAL).

Format:  OVERLAY CONCEAL

2 DEFER
Delay overlay changes until forced.
Specifies that changes to overlay colours and attributes should not be
performed until an OVERLAY UPDATE command is given. This speeds up
operation if a number of changes to overlays are to be made.

Format:  OVERLAY DEFER

2 DELETE
Deletes the definition of an overlay, and makes the bit planes available
for re-use in WORKSTATION OVERLAY or DISPLAY OVERLAY commands. OVERLAY
CLEAR must be used before OVERLAY DELETE.

Format:  OVERLAY DELETE

2 DESELECT
Deselects categories of IFF features and/or raster images 
from the selected overlay. The format of the command is the same as the
ordinary DESELECT command, but only subcommands ALL, FCS, LAYERS, and
MAPS, plus the additional subcommand IMAGES are permitted.

Format:  OVERLAY DESELECT  subcommand

2 ERASE
Erases (clears) the current overlay in the current display.
When primary and secondary displays both support overlays, the overlay
will be cleared in both unless a SUPPRESS command (qv) has been used.

Format:  OVERLAY ERASE

2 NUMBER
Selects an overlay number to be used in subsequent OVERLAY commands
which operate on a specific overlay. The number must be in the
range 1-8 for specific overlays, or 0 which is an 'unset' value and
prevents the use of some OVERLAY commands until another number is
chosen.

Format:  OVERLAY NUMBER n

2 POP
Moves the selected overlay to the top of the stack of overlays, 
so that it will appear 'in front' of all other overlays. The other 
overlays retain their existing order.

Format:  OVERLAY POP

2 PUSH
Moves the selected overlay to the bottom of the stack of overlays, 
so that it will appear 'behind' all other overlays. The other overlays
retain their existing order.

Format:  OVERLAY PUSH

2 REVEAL
Makes the selected overlay visible (opposite of OVERLAY CONCEAL).

Format:  OVERLAY REVEAL

2 SELECT
Selects categories of IFF features and/or raster images to appear 
in the selected overlay. The format of the command is the same as the
ordinary SELECT command, but only subcommands ALL, FCS, LAYERS, and
MAPS, plus the additional subcommand IMAGES are permitted. Features must
still be selected by the normal SELECT command in order to appear in any
overlays. Nothing will appear in an overlay until an OVERLAY SELECT
command is used. 

Format:  OVERLAY SELECT  subcommand

2 UPDATE
Causes the screen display to be updated to reflect changes to overlay
colours and attributes made since an OVERLAY DEFER command. After
OVERLAY UPDATE, changes will be performed immediately until another
OVERLAY DEFER command is given.

Format:  OVERLAY UPDATE

1 IMAGE
Specifies details of raster images. These may be displayed in overlays 
using the OVERLAY SELECT IMAGES command.

An appropriate licence is required to use this command.

Format:  IMAGE  subcommand

Valid in all states except PAINT

2 BACKGROUND
Specifies a colour value to be used as background in image editing
operations. This is the value that will be written by IMAGE CLEAR,
IMAGE ERASE, and IMAGE SPECKLE CLEAR commands, and is the value that
the IMAGE BURN_IN command will leave unaltered.
It is also the colour of speckles for IMAGE SPECKLE FILL.
Since editing is only valid for LSR files containing bit data,
the value must be 0 or 1. The default is 0.

Format:  IMAGE BACKGROUND integer

2 BAND
Specifies value to colour correspondence for an image.

Specifies that a range of values in the current image are to be
displayed in a particular colour index, overriding the colour
obtained from IMAGE STEP. If the two values are the same, or the
high value is omitted, then only the single value will be drawn
in the given colour index.
Image classification must already have been enabled by an IMAGE STEP
command.

The optional label is used to annotate the corresponding band in output
from the SHOW IMAGE and DRAW LEGEND command.
If the label is to start with a number, then the high_value argument
may not be omitted.

Format:  IMAGE BAND index low_value [high_value] [label]

2 BITS
Specifies which bits from the current image to display. 
The default is to display the 8 least significant bits i.e. 
IMAGE BITS 0 8. 
Image classification is disabled by this command until an IMAGE STEP
command is given. 

Format:  IMAGE BITS  first-bit number-of-bits

2 BRUSH
Specifies the size and shape of brush used for IMAGE PAINT and ERASE
operations. The default is a circle of size 1.

Format:  IMAGE BRUSH subcommand

3 CIRCLE
Specifies a circular brush.
By default the diameter is specified in IFF units (unless a UNITS
command has been given).

Format:  IMAGE BRUSH CIRCLE diameter

3 CURSOR
Specifies whether the screen cursor assumes the shape of the BRUSH
during IMAGE PAINT and ERASE operations. The integer argument
is 0 to use the default cursor, or 1 to use the brush-shaped
cursor.

Format:  IMAGE BRUSH CURSOR on

3 RECTANGLE
Specifies a rectangular (or square) brush.
If the height is omitted, it is taken to be the same as the width,
giving a square brush.
By default the size is specified in IFF units (unless a UNITS
command has been given).

Format:  IMAGE BRUSH RECTANGLE width [height]

2 BURN_IN
Edits the current image by reading back the current screen picture,
and changing any pixels which are not the image background colour to
be the image foreground colour. The effect is to burn any vector
detail, or annotations into the image. This command requires that
the image be displayed such that 1 image pixel corresponds to 1
screen pixel, which can be achieved using the ZOOM 1 IMAGE command
if required. Note that only the current screen area is affected -
to edit other areas, they have to be drawn on the screen first.
Valid only for bit LSR files which are open for edit.

Format:  IMAGE BURN_IN

2 CLEAR
Fills the interior of the image region with image background colour
in the current image.
The command may be aborted by CTRL/C if it is taking too long, or
has already completed enough of the operation.
Valid only for bit LSR files which are open for edit.

Format:  IMAGE CLEAR

2 CLOSE
The image file associated with the current image number is closed. 
The number becomes available for re-use.

Format:  IMAGE CLOSE

2 CONNECT
Specifies whether image pixels are taken to be connecting when they
touch along their sides (default), or also when they touch diagonally.
This affects the commands REGION n IMAGE, and IMAGE SPECKLE.

Format:  IMAGE CONNECT subcommand

3 DIAGONAL
Pixels are connected when they touch either by their sides, or
diagonally, so a pixel may be connected to all 8 neighbours.

Format:  IMAGE CONNECT DIAGONAL

3 SIDE
Pixels are connected when they touch by their sides, and not
diagonally, so a pixel may only be connected to 4 neighbours.

Format:  IMAGE CONNECT SIDE

2 COPY
Copies the interior of the current image region to a new position.
This command enters EDIT state, attaches the region to the cursor,
and allows it to be moved around until END is given.
ABANDON may be used to cancel the operation.
The original data is retained.
The operation may be aborted by CTRL/C if it is taking too long, or
has already completed enough of the desired changes.
Valid only for bit LSR files which are open for edit.

Format:  IMAGE COPY

Valid in state  READY

2 CORNER
Specifies the corner of the image of the first pixel in a DTI file.
This is normally taken from the file header. The corner must be one of
SW, NW, NE, and SE.

Format:  IMAGE CORNER  corner

2 DIRECTION
Specifies the direction of the first row/column of a DTI file 
with respect to the image corner. This is normally taken from the file
header. The direction must be one of CLOCKWISE, ANTICLOCKWISE. 

Format:  IMAGE DIRECTION  direction

2 DTI
Specifies the name of a DTI file to be opened. 

The file is subsequently referred to by its number. The origin and
pixelsize for the file are read from the projection record in its header
if one is present, otherwise they are set to default values. The corner
and direction are also taken from the file header. All these may be
subsequently altered using IMAGE ORIGIN, PIXELSIZE, CORNER, and
DIRECTION commands. The pixels are assumed to be point type, so the
origin is at the centre of the bottom left pixel.
Default filename is LSL$DTI:---.DTI;0 

Format:  IMAGE DTI  filename

2 EDIT
Specifies that the current image should be opened for edit.
This command should be given after IMAGE NUMBER, but before
specifying the image file. Only one image may be opened for edit,
and it must (at present) be an LSR type of image containing bit
data.
An appropriate licence is required to use this command (in addition
to the licence for the overall IMAGE command).
See also IMAGE READONLY.

Format:  IMAGE EDIT

2 ERASE
Enters PAINT state. Draws the current image brush in the image
background colour into the current image (which must be an editable
LSR file), each time the cursor is moved. Further copies of the
brush are painted until the END command is given.
It is possible to use the ZOOM command to display a different area
while painting is in progress.
The ABANDON command will end the operation and restore the image
to its state before IMAGE ERASE was given.

Format:  IMAGE ERASE

Valid in state  READY

2 FILL
Fills the interior of the image region with image foreground colour
in the current image.
The command may be aborted by CTRL/C if it is taking too long, or
has already completed enough of the operation.
Valid only for bit LSR files which are open for edit.

Format:  IMAGE FILL

2 FIRSTCOLOUR
Specifies the colour index to be used for the first step,
when image classification is in use. The default value is 0.
The IMAGE STEP command must be given first.

Format:  IMAGE FIRSTCOLOUR index

2 FOREGROUND
Specifies a colour value to be used as foreground in image editing
operations. This is the value that will be written by IMAGE FILL,
IMAGE PAINT, IMAGE BURN_IN, and IMAGE SPECKLE FILL commands.
It is also the colour of speckles for IMAGE SPECKLE CLEAR.
Since editing is only valid for LSR files containing bit data,
the value must be 0 or 1. The default is 1.

Format:  IMAGE FOREGROUND integer

2 LSI
Specifies the name of an LSI file to be opened. 
The file is subsequently referred to by its number. The origin and
pixelsize for the file are set to default values, but may be
subsequently altered using IMAGE ORIGIN, and PIXELSIZE commands.
The pixels are taken to be area type, so the origin is at the bottom left
of the bottom left pixel.
Default filename is LSL$LSI: 

Format:  IMAGE LSI  filename

2 LSR
Specifies the name of an LSR file to be opened. 
The file is subsequently referred to by its number. The origin and
pixelsize for the file are read from its header but may be
subsequently altered using IMAGE ORIGIN and PIXELSIZE commands.
If the file has area type pixels, then the origin is taken to be the
bottom left of the bottom left pixel. If the pixels are point type, then
the origin is the centre of this pixel.
Default filename is LSL$LSR: 

In order to use this command, the logical name LSL$LSLGOTHICSHR must
point to an appropriate shared image, normally LSL$LIBRARY:LSLGOTHICSHR
in the LSLSYSTEM package.

Format:  IMAGE LSR  filename

2 MOVE
Moves the interior of the current image region to a new position.
This command enters EDIT state, attaches the region to the cursor,
and allows it to be moved around until END is given.
ABANDON may be used to cancel the operation.
The original data is set to the image background colour.
The operation may be aborted by CTRL/C if it is taking too long, or
has already completed enough of the desired changes.
Valid only for bit LSR files which are open for edit.

Format:  IMAGE MOVE

Valid in state  READY

2 NUMBER
Selects an image number to be used in subsequent IMAGE commands. 

The IMAGE DTI or IMAGE LSI command is used to open an image file, which
is subsequently referred to by its number. The number must be in the
range 1-8 for specific images, or 0 which is an 'unset' value and
prevents the use of some IMAGE commands until another number is chosen. 

Format:  IMAGE NUMBER  n

2 ORIGIN
Specifies the location in absolute units of the SW corner 
of the current image file. Default is 0.0 0.0

Format:  IMAGE ORIGIN  x y

2 PAINT
Enters PAINT state. Draws the current image brush in the image
foreground colour into the current image (which must be an editable
LSR file), each time the cursor is moved. Further copies of the
brush are painted until the END command is given.
It is possible to use the ZOOM command to display a different area
while painting is in progress.
The ABANDON command will end the operation and restore the image
to its state before IMAGE PAINT was given.

Format:  IMAGE PAINT

Valid in state  READY

2 PIXELSIZE
Specifies the size of each pixel in the current image in IFF units.
If ysize is omitted, it is assumed to be the same as xsize.
The default is IMAGE PIXELSIZE 1 1

Format:  IMAGE PIXELSIZE  xsize [ysize]

2 RANGE
Sets the range of values in the current image to be used,
when image classification is enabled (see IMAGE STEP). Values outside
the range will be drawn in colour 0. The range is initially set to the
minimum and maximum values in the file by the IMAGE DTI command.

Format:  IMAGE RANGE lower upper

2 READONLY
Specifies that the current image should be opened for reading only.
This command should be given after IMAGE NUMBER, but before specifying
the image file. It is the opposite of IMAGE EDIT, and is the default
is neither command is specified.

Format:  IMAGE READONLY

2 RECOVER
Restores the current image to its state before the last IMAGE FILL,
CLEAR, MOVE, COPY, PAINT, ERASE, BURN_IN, or SPECKLE command.
The command IMAGE RECOVER CLEAR may be used to clear out the recover
information, reclaiming the memory used, and preventing accidental
recovery of an edit that you know is to be permanent.

Format:  IMAGE RECOVER
or       IMAGE RECOVER CLEAR

2 REGION
Specifies a LITES2 region to be used for IMAGE FILL, IMAGE CLEAR,
IMAGE MOVE, IMAGE COPY, and IMAGE SPECKLE commands. The region need
not exist when the command is given. 0 means that no region is
selected.

Format:  IMAGE REGION integer

2 SEA
Specifies a colour index to be used for zero values in the current image.
Exactly equivalent to the command IMAGE BAND index 0.0

The optional label is used to annotate the corresponding band in output
from the SHOW IMAGE and DRAW LEGEND command.

Format:  IMAGE SEA index [label]

2 SELECT
Specifies image to be accessed.

Specifies one or more images from which the value of the $IMAGEVALUE
system variable is taken. This is particularly useful when several
images overlap.  The selected images need not be currently displayed. If
the range of image numbers is omitted, then the image selections become
null, and another IMAGE SELECT command must be given before $IMAGEVALUE
can be used again. 

Format:  IMAGE SELECT  [range]

eg       IMAGE SELECT 3
or       IMAGE SELECT 2,5-7

2 SETUP
Setup correspondence between a raster image and an IFF map.

Causes LITES2 to enter SETUP state, and to prompt for the user to
digitise the 4 corner points of the first map with reference to a raster
image on the screen using START commands. WINDOW, DRAW, and ZOOM
commands may be used to display the desired area on the screen. Once the
setup is completed, LITES2 will return to READY state and subsequent
drawing will distort the vector picture so as to match up the corner
points with the raster image. ABANDON may be used at any time in SETUP
state to abort the setup. 
Invoking IMAGE SETUP followed by ABANDON will cancel any existing setup
and return to default behaviour.

Format:  IMAGE SETUP

Valid in state  READY

2 SPECKLE
Scans the interior of the current image region removing speckles
(areas of pixels of a given size or less). The command may be aborted
by CTRL/C if it is taking too long, or has already removed the
intended speckles.
Valid only for bit LSR files which are open for edit.

Format:  IMAGE SPECKLE subcommand

Valid in state  READY

3 CLEAR
Replaces speckles of the current image foreground colour
with the image background colour.
By default the size is specified in IFF units (unless a UNITS
command has been given).

Format:  IMAGE SPECKLE CLEAR size

3 FILL
Replaces speckles of the current image background colour
with the image foreground colour.
By default the size is specified in IFF units (unless a UNITS
command has been given).

Format:  IMAGE SPECKLE FILL size

2 STEP
Enables image classification (into colour bands) for the current image,
and sets the step size to the value given (which must be greater than
0.0). If classification was not already enabled, then all bands are
cancelled and first colour is set to 0. The colour index used for a
particular value is given by:

   index = (value - low_end_of_range) / step + first_colour

Format:  IMAGE STEP step

2 SUBSAMPLE
Specifies how subsampling of the current image should be performed,
if the image is drawn at a scale such that 1 display pixel
corresponds to more than one image pixel.

Format:  IMAGE SUBSAMPLE  subcommand

3 FAST
Specifies fast subsampling (default).
For DTI and LSR files, this means that rows and columns of the image
will be missed out when drawing. LSI files are never subsampled -
instead reduced views are used if they exist in the file.

Format:  IMAGE SUBSAMPLE FAST

3 PRIORITY
Allows a colour value to be specified which takes priority
if it occurs within the block of image pixels which correspond
to a single display pixel. This can prevent break up of subsampled
images which can occur with IMAGE SUBSAMPLE FAST.
The command is only valid for LSR type images containing bit data,
and the priority value must therefore be 0 or 1.

Format:  IMAGE SUBSAMPLE PRIORITY integer

1 DISPLAY
Specifies details of displays (additional windows on the screen).

This command is only available with some versions of LITES2, and the 
user should refer to the hardware dependent reference manual for the
possibilities available with his hardware. Displays 1 and 2 (primary and
secondary) are created automatically when LITES2 moves from INITIAL to
READY state - other displays are created by the DISPLAY CREATE command.

Format:  DISPLAY  subcommand

Valid in all states

2 BORDER
Specifies whether the display is to have a border. 
The value must be 1 (with border, default), or 0 (no border). 
This command must be given before DISPLAY CREATE.

Format:  DISPLAY BORDER n

2 COLOURS
Sets the number of colours to be used for the display 
(including the background colour). This command must be given before
DISPLAY CREATE. If the argument is omitted, then the default number of
colours (dependent on the particular LITES2 version) is used.

Format:  DISPLAY COLOURS [n]

2 CONCEAL
Makes the selected display invisible (opposite of DISPLAY REVEAL).

Format:  DISPLAY CONCEAL

2 CREATE
The selected display is created using the set attributes.
The display will appear on the screen, unless in INITIAL state,
in which case if will appear after the maps have been read in.

Format:  DISPLAY CREATE

2 CURSOR
Specifies whether displays 3 or 4 are to have a crosshair cursor.
The value must be 1 (with cursor), or 0 (no cursor, default). 
This command may be given at any time.
The command is intended primarily for use in conjunction with
DRAW IMAGE, after which the coordinate system in the display
will correspond to the image in the main display, enabling
accurate pointing to image pixels.
At all other times, the coordinate system in the display will
correspond to the entire LITES2 working area.

Format:  DISPLAY CURSOR n

2 DELETE
Deletes a display. The display will disappear from the screen, and any
definitions of overlays in it will be lost. The attributes remain set
and the display may be re-created using DISPLAY CREATE.

Format:  DISPLAY DELETE

2 ERASE
Erases the contents of a display.

Format:  DISPLAY ERASE

2 LIMITS
Sets the coordinate range for the current display. 
If the limits do not define an area with the same aspect ratio
as the display, then part of the display area will not be used. If this
command is not given, or the values are omitted, then the default limits
(the same as the LITES2 working area) are used. The display limits may
be changed at any time. 

Format:  DISPLAY LIMITS  [xmin xmax ymin ymax]

2 NUMBER
Selects a display number to be used in subsequent DISPLAY commands. 
The number must be in the range 1 up to a limit dependent on the version
of LITES2 for specific displays, or 0 which is an 'unset' value and
prevents the use of some DISPLAY commands until another number is
chosen. Display numbers 1 and 2 refer to the primary and secondary
workstations. Only some of the the display commands are valid for these.

Format:  DISPLAY NUMBER n

2 OVERLAY
Sets up display overlays using the graphics planes. Overlays in the
primary or secondary displays are created using the WORKSTATION OVERLAY
command (qv).

Allows the definition of display overlays consisting of a subset of
the pixel planes available on the display. Once defined, the OVERLAY
command may be used to specify how the overlay appears on the display.
The bit planes used in an overlay must be consecutive, and a single
plane may only be used in one overlay.
The overlay number is used to identify the overlay using OVERLAY NUMBER
commands, and must be an integer in the range 1-8. The offset argument
specifies the first bit plane to be used (the first plane is 0). If
omitted, the first available value allowing the requested number of
planes is used.

Format:  DISPLAY OVERLAY overlay planes [offset]

eg       DISPLAY OVERLAY 2 4
         Defines overlay number 2 in the current display to
         consist of 4 bit planes

2 POP
Pop the selected display to the front (if it is obscured by other displays).

Format:  DISPLAY POP

2 POSITION
Specify the initial position of the display on the screen. 
The position of the bottom left hand corner is given as a fraction of
the screen size, in the range 0.0 to 1.0. This command must be given
before DISPLAY CREATE.

Format:  DISPLAY POSITION xpos ypos

2 PUSH
Push the selected display to the back (behind any other displays).

Format:  DISPLAY PUSH

2 REVEAL
Makes the selected display visible (opposite of DISPLAY CONCEAL).

Format:  DISPLAY REVEAL

2 SIZE
Specify the size of the display on the screen. 
The size is given as a fraction of the screen size, 
in the range 0.0 to 1.0.  
This command must be given before DISPLAY CREATE.

Format:  DISPLAY SIZE xsize ysize

2 TITLE
Specifies a title to appear at the top of the display 
(providing that it has a border). If the title is omitted, then the
display will have no title. If the title is to have leading spaces, then
it must be enclosed in double quotation marks. The default titles are
"Graphics Window" for display 1, "Secondary Window" for display 2, and
no title for any other displays. This command must be given before
DISPLAY CREATE.

Format:  DISPLAY TITLE [string]

1 VIEW
Controls the operation of the LITES2 3D visualisation facilities.

Viewing commands make use of a shared image pointed at by the logical
name LSL$LITES2_VIEW_ROUTINES. This image supplied by Laser-Scan is
called LSL$EXE:LITES2VIEWSHR.EXE. 

The VIEW command controls the generation and display of 3 dimensional
pictures (called views) from DTI images which represent the terrain. 
Each view can consist of up to three levels; these levels may either
contain terrain information or vector information (from the IFF files).

An appropriate licence is required to use this command. As this command
depends on the existence of DTI images, the licence for the IMAGE
command is also required.

This command is only available with some versions of LITES2, and the 
user should refer to the hardware dependent reference manual for the
possibilities available with the hardware.

Format:  VIEW subcommand

Valid in all states

2 Spatial_context
A view requires both a spatial context and an IFF content defined.

The basis for the specification of the view spatial context is the view
cone. Commands are provided to locate and define the dimensions of this
view cone in reference to the DTI and IFF files containing terrain and
vector data to be included in the view. LITES2 will not permit the user to
render a view until the spatial context of the view is adequately defined
via one of two routes: 

 1) The user specifies an observer position, a cone angle, and a target
    position to locate and orient the centreline of the view cone using
    the VIEW FROM x y z, VIEW CONE angle, and VIEW TO x y z commands. 

 2) The user specifies an observer position, a cone angle, a maximum
    distance of view, an elevation for the centreline of the cone of
    vision and a bearing along which the observer "looks". 

    In both cases, optional front and back clip planes for the cone of
    vision may be specified. 

2 AMBIENT
Specifies the characteristics of the ambient lighting of a view.

Format:  VIEW AMBIENT subcommand

3 COLOUR
Specifies the colour and brightness of the ambient light. The colour
value is specified as a red, green and blue triplet, all of which must
lie in the range 0.0 - 1.0. Thus VIEW AMBIENT COLOUR simultaneously
specifies the ambient light colour and brightness. By default VIEW
AMBIENT COLOUR 0.0 0.0 0.0 is used, i.e. no ambient light 

Format:  VIEW AMBIENT COLOUR r g b

2 BACK
Specifies the distance to the back clip plane of the view; i.e. the
maximum distance that the observer can see assuming that obstacles to
view or depth/fog effects do not intervene. 

The distance (specified in IFF units) is the horizontal distance from
the observer's position measured along the view direction. Note that
this clipping plane is a straight line across the viewing cone
perpendicular to the viewing direction at this distance; it is NOT the
arc of a circle about the observer's position. If this command is not
given, the distance to the target position is used. 

Format:  VIEW BACK distance

2 BEARING
Specifies the view bearing.

The angle, measured clockwise (in degrees) from North, at the observer's
position to the target position. If the observer's position and the
target position are defined, this command will alter the target
position. 

Format:  VIEW BEARING angle

2 CLEAR
Clears the data from the specified level in the current view. 
This allows new data to be rendered into this level.
If no level is specified, all levels are cleared.

Format:  VIEW CLEAR [level]

2 COLOUR
Specifies the colours to be used to display various parts of the view.

Format:  VIEW COLOUR subcommand

3 FOREGROUND
Specifies the colour to be used to display the foreground in the view.
This is that part of the view that lies in front of the front clipping
plane. 

The colour value is specified as a red, green and blue triplet, all of
which must lie in the range 0.0 - 1.0.  By default VIEW COLOUR
FOREGROUND 0.0 0.0 0.0 is used.

Format:  VIEW COLOUR FOREGROUND r g b

3 SEA
Specifies the colour to be used for representing sea.
This is that part of the view terrain that lies at sea level (value 0).

The colour value is specified as a red, green and blue triplet, all of
which must lie in the range 0.0 - 1.0.  By default VIEW COLOUR SEA 0.0
0.35 0.55 is used.

Format:  VIEW COLOUR SEA r g b

3 SKY
Specifies the colour to be used for representing sky.
This is that part of the view that lies beyond the back clipping
distance of the model.

The colour value is specified as a red, green and blue triplet, all of
which must lie in the range 0.0 - 1.0. By default VIEW COLOUR SKY 0.75
0.75 0.75 is used.

Format:  VIEW COLOUR SKY r g b

2 CONE
Specifies the field of view (in degrees). The angle must be less
than 180 degrees. The view "cone" is actually a pyramid of rectangular
section with the observer at the apex of the pyramid. It is not a true
cone. A default value of 45 degrees is used.

Format:  VIEW CONE angle

2 CREATE
The current view is to be created with the specified number of levels.
The maximum number is 3. By default the view is are created with one
level. 

Format:  VIEW CREATE [levels]

2 DELETE
Deletes the current view. This allows another picture to be rendered
into the current view. This command is similar in its effects to VIEW
CLEAR. 

Format:  VIEW DELETE

2 DEPTH
Controls the effect of depth cueing. 
Depth cueing causes the interpolation of view pixel colours between a
starting value and the sky colour. Depth cueing gives the effect of
haze or greying with increasing distance from the observer. 

Format:  VIEW DEPTH subcommand

3 OFF
Switches depth cueing off (default).

Format:  VIEW DEPTH OFF

3 ON
Switches depth cueing on.

Format:  VIEW DEPTH ON

3 DISTANCE
Specifies the distance, measured in IFF units, from the observer,
beyond which the interpolation of pixel colour between starting value
and sky colour results in all pixels assuming sky colour. By default a
distance of 6000.0 is assumed. 

Format:  VIEW DEPTH DISTANCE distance

2 DISPLAY
Displays the current level of the current view in the specified display
and overlay (default).

Optionally, a specific level may be supplied which need not be the
current view level. 

Alternatively, multiple levels of the current view may be supplied,
either as specific view level numbers separated by commas (i,j,k) or as
ranges (n-m). This enables the user to direct the contents of more than
one view level into a single display overlay. Higher number view levels
take precedence over low numbered levels to ensure that the user can
determine how the display pixels are coloured. It is clearly important
to place the rendered terrain image in view level 1 and rendered IFF
selections in higher numbered levels. 

The current (or specified) level of the current view must have been
generated before it can be displayed. 

Format:  VIEW DISPLAY displaynumber overlaynumber [viewlevel [,...]]

2 DISTANCE
Specifies the horizontal viewing distance, i.e. the maximum distance
that the observer can see assuming that obstacles to view or depth/fog
effects do not intervene. 

The distance is measured in IFF units, from the observer's position to
the target position. If the observer's position and the target position
are defined, this command will alter the target position. If a VIEW FROM
and VIEW TO command is used and no VIEW DISTANCE command is specified,
the view distance defaults to the distance between the observer and the
target. 

Format:  VIEW DISTANCE value

2 DTI
Outputs all levels of the current view to the specified DTI file. 

Format:  VIEW DTI filename

2 ELEVATION
Specifies the elevation of the centreline of the cone of vision.

The angle, measured in degrees in a vertical plane, at the observer's
position to the target position. The angle is positive if the target is
above the observer and negative if the target is lower than the
observer. If the observer's position and the target position are
defined, this command will alter the height of the target position. 

Format:  VIEW ELEVATION angle

2 EXAGGERATE
Specifies the view Z exaggeration.

The Z exaggeration factor to be used to emphasise the height of the
terrain when creating a view. By default an exaggeration of 1.0 (i.e. no
exaggeration) is assumed. Note that the exaggeration factor is also
applied to IFF features rendered as solid objects. 

Format:  VIEW EXAGGERATION factor

2 FC_OFFSET
Specifies a feature code offset for changing display style.

This allows features to be rendered using a different style from when
they are displayed in plan. The value specified must be between 0
and 32767.

When rendering features, if the feature code is less than the specified
offset and there is an entry in the FRT file with a feature code of
(current feature code + offset) that has the same graphical type as the
original feature code, then the feature will be rendered using this
offset feature code. 

Format:  VIEW FC_OFFSET offset

2 FOG
Controls the use and effects of fog while generating a view.
Commands are provided to enable the specification of a fog cube clipped
to front, back, horizontal bottom and top planes, within which fog
effects are applied. The fog "visibility", the rate at which the pixel
colours are modified to the fog colour, is applied within this cube. 

Format:  VIEW FOG subcommand

3 BACK
Specifies the distance to rear of view.

This is the (horizontal) distance, measured in IFF units, from the
observer to the back clip plane of the fog cube within which fog effects
are applied. By default a VIEW FOG BACK distance of 30000.0 is assumed. 

Format:  VIEW FOG BACK distance 

3 BOTTOM
Specifies the height of the bottom clip plane of the fog cube,
within which fog effects are applied, measured in IFF units above the
horizontal datum. Note that it is NOT the height above the terrain. By
default a VIEW FOG BOTTOM height of 100.0 is assumed. 

Format:  VIEW FOG BOTTOM height

3 DISTANCE
Specifies distance for fog interpolation.

This is the the distance, measured in IFF units, within which the
interpolation of pixel colour between starting value and fog colour
results in all pixels assuming fog colour. This enables the user to
specify the fog "visibility". The interpolation uses an exponential
decay function. It is applied within the fog cube with effect from the
intersection between the line of view and the fog cube clip plane
closest to the observer.  By default a distance of 600.0 is assumed. 

Format:  VIEW FOG DISTANCE distance

3 FRONT
Specifies front for fog interpolation.

Specifies the (horizontal) distance, measured in IFF units, from the
observer to the front clip plane of the fog cube within which fog
effects are applied. By default a VIEW FOG FRONT distance of 100.0 is
assumed. 

Format:  VIEW FOG FRONT distance

3 OFF
Switches off the effects of fog, (default).

Format:  VIEW FOG OFF

3 ON
Switches on the effects of fog.

Format:  VIEW FOG ON

3 TOP
Specifies the height of the top clip plane of the fog cube,
measured in IFF units above the horizontal datum, within which fog
effects are applied. Note that it is NOT the height above the terrain.
By default a VIEW FOG TOP height of 5000.0 is assumed. 

Format:  VIEW FOG TOP height

2 FROM
Defines the observer's position. 

This position is specified in IFF units in LITES2 coordinate space. It
is possible to position the observer outside the area covered by any
images or maps that have been read into LITES2. Note that the z argument
is the observer's height above the horizontal datum, NOT the observer's
height above the terrain. 

Format:  VIEW FROM x y z

2 FRONT
Specifies the distance from the observer to the front clip plane 
of the view. It is measured in IFF units above the horizontal datum.
By default a VIEW FRONT distance of 1.0 is assumed.

Format:  VIEW FRONT distance

2 GENERATE
Generates the current level of the current view. 
The VIEW GENERATE command generates the colour for each pixel in the
view on the basis of the intrinsic colour for that pixel. The
intrinsic colour for each pixel representing terrain rendered from a
DTI file is determined by the colour method specified by the VIEW
METHOD command. The intrinsic colour for pixels representing an IFF
feature is taken from the FRT colour definition for the feature code
defining that IFF feature. 

Optionally, one or more of the following colour modifiers may be
specified, the effects of which are computed by the VIEW GENERATE
command: 

 o fog, activated by VIEW FOG ON 

 o depth, activated by VIEW DEPTH ON

 o illumination, activated by VIEW ILLUMINATION ON

If colour modifiers are selected VIEW COLOUR commands may be used to
specify colour values for sea, sky, fog, constant land colour and
foreground. 

VIEW GENERATE command execution is slowed by the application of one or
more colour modifier options. If the user wishes merely to determine the
content of a view it can be quickly produced by generating with no
colour modifiers. In the absence of colour modifiers the VIEW INDEX
commands may be used to specify colour indices for sea, sky, constant
land colour and foreground. 

If FOG, ILLUMINATION or DEPTH have been switched on, VIEW GENERATE  must
be preceded by one or more VIEW PALETTE commands. 

The VIEW GENERATE command must be given after a level has been rendered,
and before the view can be displayed with a VIEW DISPLAY command.
Several views may be generated and displayed from one rendered view.
Different VIEW AMBIENT, VIEW COLOUR, VIEW DEPTH, VIEW DISTANCE, VIEW
FOG, VIEW ILLUMINATION, VIEW LIGHT, VIEW METHOD, VIEW PALETTE, and VIEW
SPHERE commands may be given between successive VIEW GENERATE commands
without re-rendering the view. 

Format:  VIEW GENERATE

2 ILLUMINATION
Controls the effect of illumination on a view.

Format:  VIEW ILLUMINATION subcommand

3 OFF
Switches the effect of illumination off (default).

Format:  VIEW ILLUMINATION OFF

3 ON
Switches the effect of illumination on.

Format:  VIEW ILLUMINATION ON

2 LEVEL
Specifies the level of the view which is to be made "current" 
upon which following VIEW RENDER, VIEW GENERATE and VIEW DISPLAY
commands will act. A single view can have up to three levels. It is
strongly recommended that the terrain component of a view (rendered
from the DTI file) is placed in level one and that overlay information
(e.g. rendered from IFF file) is placed in higher view levels. This
will enable the user to use the VIEW DISPLAY facility to draw multiple
view levels into the same display overlay. Higher number view levels
take precedence over low numbered levels to ensure that the user can
determine how the display pixels are coloured. 

Format:  VIEW LEVEL number

2 INDEX
Set specific colour to be used.

Specifies which colour index from the output display colour table is to
be used for explicit themes in the view, i.e. foreground, constant land
colour, sea, and sky. These indices are applied only when a view is
generated with no colour modifiers and their application results in very
rapid view generation as no colour interpolation is required.

Format:  VIEW INDEX subcommand

3 CONSTANT
Set constant land colour.

Specifies which colour index from the output display colour table is to
be used to represent the constant land colour when a view is generated
with no colour modifiers. The absence of colour modifiers will result in
all land appearing as a silhouette in the colour defined by the
specified colour index. By default colour index 2 is used. 

Format:  VIEW INDEX CONSTANT integer

3 FOREGROUND
Set foreground colour.

Specifies which colour index from the output display colour table is to
be used to represent the foreground of a view when the view is generated
with no colour modifiers. By default colour index 1 is used.

Format:  VIEW INDEX FOREGROUND integer

3 SEA
Set sea colour.

Specifies which colour index from the output display colour table is to
be used to represent sea when a view is generated with no colour
modifiers. By default colour index 1 is used. 

Format:  VIEW INDEX SEA integer

3 SKY
Set sky colour.

Specifies which colour index from the output display colour table is to
be used to represent sky when a view is generated with no colour
modifiers. By default colour index 0 is used. 

Format:  VIEW INDEX SKY integer

2 LIGHT
Allows the operator to specify up to 5 light sources to be used 
when rendering an image file.

At present only directional light sources are implemented, so only a
bearing and elevation is required to define a light. It is possible to
define these by specifying the position of the light source and  of its
target point.

A light is activated by giving the command VIEW LIGHT NUMBER and is
deactivated with the VIEW LIGHT DELETE command.

Format:  VIEW LIGHT subcommand

3 BEARING
Specifies light bearing.

The angle, measured clockwise (in degrees) from North, at the light 
source position to the target position. If the source position and the
target position are defined, this command will alter the target
position. A default light bearing of 135.0 is assumed. 

Format:  VIEW LIGHT BEARING angle

3 COLOUR
Specifies the colour and brightness of the light. 
The colour value is specified as a red, green and blue triplet, all of
which must lie in the range 0.0 - 1.0 . Default values of 1.0 1.0 1.0 are
used. 

Format:  VIEW LIGHT COLOUR r g b

3 CONE
Specifies the current light cone angle. 
The value is given in degrees in the range 0.0 - 180.0. As only directional
light sources are used at the moment, this command has no effect. 

Format:  VIEW LIGHT CONE angle

3 DELETE
Deselects the current light source, selected with a VIEW LIGHT NUMBER
command, from the list of available light sources, but retaining its 
parameters for future reselection.

Format:  VIEW LIGHT DELETE

3 DISTANCE
Specifies the light distance.

The distance from the light source position to the light target
position.  If the source position and the target position are defined,
this command will alter the target position. 

Format:  VIEW LIGHT DISTANCE value

3 ELEVATION
Specifies the light elevation.

The angle, measured in the vertical plane, at the light source position
to the light target position. The angle is positive if the target
position is above the source position. If the source position and the
target position are defined, this command will alter the target
position. 

A default light elevation of -22.5 degrees is assumed.

Format:  VIEW LIGHT ELEVATION angle

3 FROM
Specifies the position of a light source. 
The coordinates are given in IFF units and are specified in the LITES2
coordinate space.

Format:  VIEW LIGHT FROM x y z

3 NUMBER
Succeeding VIEW LIGHT commands refer to this light source,
which is added to the list of light sources for use in the illumination
model with the VIEW ILLUMINATION ON command. By default, light source
number 1 is available and selected, with the default parameters listed
here. 

Format:  VIEW LIGHT NUMBER n

3 TO
Specifies the target of a light source. 

The coordinates are given in IFF units and are specified in  the LITES2
coordinate space.

Format:  VIEW LIGHT TO x y z

2 METHOD
Sets a colour allocation method for the intrinsic pixel colours of a view.

The intrinsic pixel colours for the terrain component of a view are
derived using one of four colour allocation methods: 

 o CONSTANT
 o HEIGHT
 o IMAGE
 o RANDOM

Optionally, the intrinsic pixel colours provided by these method may, in
turn, be subjected to colour modification using one or more of the
following colour modifier options: 

 o DEPTH
 o FOG
 o ILLUMINATION

The view colour method must be specified before the VIEW GENERATE
command. By default VIEW METHOD CONSTANT is assumed. 

Format:  VIEW METHOD subcommand

3 CONSTANT
Use constant colours.

Specifies that a constant intrinsic colour should be used for terrain
(i.e. DTI height > 0) rendered from a DTI file. The constant land colour
applied by VIEW METHOD CONSTANT is specified using the VIEW COLOUR
CONSTANT or VIEW INDEX CONSTANT commands.  This is the default colouring
method. 

Format:  VIEW METHOD CONSTANT

3 HEIGHT
Use colours from height information.

Specifies that the intrinsic colour used for terrain shall be derived
from the height classification scheme applied to the source DTI file at
the time of rendering. The source DTI file classification is defined
using IMAGE STEP and IMAGE BAND commands.

Format:  VIEW METHOD HEIGHT

3 IMAGE
Use colours from image file.

Specifies that the intrinsic colour used for the terrain be derived from
the a specified DTI file(s). The source DTI file classification is defined
using IMAGE STEP and IMAGE BAND commands. This command enables the user to
"drape" DTI files over the rendered surface. 

Format:  VIEW METHOD IMAGE range

3 RANDOM
Use random colours.

Specifies that the intrinsic colour used for terrain shall be derived
using a random colour generator.

Format:  VIEW METHOD RANDOM

2 NUMBER
Succeeding VIEW commands refer to this view. Currently LITES2 supports a
maximum of two views. 

Format:  VIEW NUMBER n

2 PALETTE
Specifies the colour palettes used by the VIEW GENERATE command.

Format:  VIEW PALETTE subcommand

3 AUTO
Automatically re-samples the colour values of the pixels for the next
picture to be generated. It uses the current view colour modifiers for
the calculation of the colour values. By default all the colours
available for the specific display overlay are calculated.
Alternatively, specific colours may be supplied either as  individual
colour index numbers separated by commas (i,j,k) or as ranges (n-m). 

Format:  VIEW PALETTE AUTO displaynumber overlaynumber [range]

3 DISPLAY
Specifies the colour palette to be used for the final display 
of the generated view. The colour palette should be loaded from the display
and overlay in which the view is eventually to be displayed. The display
colour palette is used as follows: 

 1) When no colour modifiers are selected the colour index derived for
    each pixel in the view is looked up directly in the display colour
    palette. This is very quick. 

 2) When colour modifiers are specified for the VIEW GENERATE command a
    starting rgb triplet is used for the intrinsic colour for each
    pixel. This rgb value is then subjected to the specified colour
    modification , e.g. depth, and the display colour palette is
    searched for the match to the resulting rgb value. It is the value
    identified in the palette that is actually used to display the
    pixel, not the calculated value which resulted from the colour
    modification process. It is important to load a display palette
    which contains colours relevant to the view options. It should, for
    example, contain some greys and white if the fog modifier is
    selected. 

Format:  VIEW PALETTE DISPLAY display overlay

3 IFF
Specifies the colour palette in which the FRT colour index of IFF
features will be looked up to get their rgb values at the start of the
view generation process. If IFF features are to be given the same
intrinsic colours in the view display as in the planimetric display, the
IFF colour palette should be loaded from the planimetric display and
overlay in which the IFF data are drawn. 

Format:  VIEW PALETTE IFF display overlay

3 IMAGE
Specifies the colour palette from which the colour index of terrain
pixels will be looked up to get their rgb values at the start of the
view generation process. It is also used to lookup the colour indices of
DTI files which are to be used by the image colour method. 

If the terrain is to be given the same intrinsic colours in the view
display as in the planimetric display, the image colour palette should
be loaded from the planimetric display and overlay in which the DTI
terrain data are drawn. 

Format:  VIEW PALETTE IMAGE display overlay

2 PIXELS
Specifies the size of the view to be created.

This will often be the size of a display that has already been created.
The size of a display (in screen pixels) are available in the system
variables $DISPLAYCOLUMNS and $DISPLAYROWS. 

Format:  VIEW PIXELS columns rows

2 RENDER
Activate the rendering phase of view production.

Format:  VIEW RENDER subcommand

3 IFF
Render a view of IFF data into the current level of the current view.

All IFF features that are currently selected and fall in the window
specified by the VIEW WINDOW command, are rendered against all the
images selected by the IMAGE SELECT command.

Texts and symbols are positioned at their correct positions in the view.
They are made to "stand up" or "lie down" according to the flags defined
for their feature code in the FRT file. 

Symbols that form part of patterned lines and patterned fill areas
however "lie down" on the terrain. 

Fill areas that are defined as "patterned fill areas" in the FRT, are
rendered as a series of vectors. Other fill areas are all infilled with
solid colour. 

Optionally, IFF lines and area features may be rendered to make "solid
objects" in the view. The feature must contain at least one height at
each coordinate to offset the feature from the terrain surface. This
height value may be interpreted in a number of different ways according
to the feature code flags set in the FRT file, (see the FRTLIB user
guide for further details of flag interpretation), and the z-value
interpretation option selected in LITES2, (see VIEW Z_INTERPRETATION).
Typically the height is used to raise the line (or the perimeter of an
area) above the terrain surface. Vertical "fences" are then projected
down from the raised linework to the terrain surface. The "fences" are
then solid filled and in the case of an area a "lid" is rendered to give
the object an impression of being "solid". 

Format:  VIEW RENDER IFF

3 IMAGE
Generate a view of terrain.

All DTI images that have been opened by LITES2 and selected by the IMAGE
SELECT command are used to create a view in the currently selected
level. 

Format:  VIEW RENDER IMAGE

2 ROLL
Specifies a roll angle, expressed in degrees from the horizontal, 
for the view. This has the effect of rotating the horizon of the view.
By default a roll value of 0.0 is assumed. 

Format:  VIEW ROLL angle

2 SAMPLE
Specifies a sampling interval in terms of columns and rows of the DTI
images being rendered. This has the effect of speeding up the rendering,
at the expense of the quality of the final image. By default all DTI
columns and rows are used. 

Format:  VIEW SAMPLE columns rows

2 SPHERE
Specifies a sphere of perfect visibility.

This is a sphere constructed around the observer within which no
colour modifiers are applied during the VIEW GENERATE phase of view
production. 

Format:  VIEW SPHERE subcommand

3 DISTANCE
Specifies the radius of a sphere, expressed in IFF units, constructed
around the observer within which no colour modifiers are applied during
the VIEW GENERATE phase of view production. This enables the user to
specify a zone of "perfect visibility" within the view. By default a
sphere distance of 1.0 is assumed. 

Format:  VIEW SPHERE DISTANCE distance

2 TO
Defines the target position for the view. 

This position is specified in IFF units in LITES2 coordinate space. It
is possible to position the target outside the area covered by any
images or maps that have been read into LITES2. Note that  the z
argument is the target height above the horizontal datum, NOT the target
height above the terrain.

Format:  VIEW TO x y z

2 WINDOW
Defines the area to be used when generating a view.

Format:  VIEW WINDOW subcommand

3 LIMITS
The window is explicitly specified in IFF units, in terms of  the LITES2
coordinate system.

Format:  VIEW WINDOW LIMITS xmin xmax ymin ymax

3 MAP
The window is the whole of the LITES2 working area.

Format:  VIEW WINDOW MAP

3 SCREEN
The window is the area currently displayed in the LITES2 primary display. 
This is the default windowing method. 

Format:  VIEW WINDOW SCREEN

2 Z_INTERPRETATION
Specifies interpretation of Z height for viewing of solid features.

Z coordinates and differences in height can be  interpreted in various ways
when displaying lines and areas as features that are to have a solid
vertical component in perspective views. 

This command is also used to specify the two point attribute types that
are to be used for this vertical information. 

Format:  VIEW Z_INTERPRETATION subcommand acdtype1 acdtype2

3 ABT
Acdtype1 = absolute height of bottom, acdtype2 = absolute height of top.

The value of the attribute acdtype1 is the absolute height of the bottom 
of the feature, while the value of the attribute acdtype2 is the absolute
height of the top of the feature.

3 AHD
Acdtype1 = absolute height of top, acdtype2 = difference to bottom.

The value of the attribute acdtype1 is the absolute height of the top of
the feature, while the value of the attribute acdtype2 is  the
difference in height from the top down to the bottom of the feature.

3 AHU
Acdtype1 = absolute height of bottom, acdtype2 = difference to top.

The value of the attribute acdtype1 is the absolute height of the bottom
of the feature, while the value of the attribute acdtype2 is  the
difference in height from the bottom up to the top of the feature. This
is the default z interpretation, with ACD types 93 and 97.

3 RBT
Acdtype1 = relative height of bottom, acdtype2 = relative height of top.

The value of the attribute acdtype1 is the height of the bottom of the
feature relative to the ground level, while the value of the attribute
acdtype2 is the height of the top of the feature relative to the ground
level.

3 RHD
Acdtype1 = relative height of top, acdtype2 = difference to bottom.

The value of the attribute acdtype1 is the height of the top of the
feature relative to ground level, while the value of the  attribute
acdtype2 is the difference in height from the top down to the bottom of
the feature.

3 RHU
Acdtype1 = relative height of bottom, acdtype2 = difference to top.

The value of the attribute acdtype1 is the height of the bottom of the
feature relative to ground level, while the value of the  attribute
acdtype2 is the difference in height from the bottom up to the top of
the feature.

1 PLOT
Controls hardcopy plotting.

Format:  PLOT subcommand

Valid in all states

2 ADVANCE
Performs a clear operation on the plot device. 
Depending on the plotter in use, this will advance to a new sheet of paper,
or load new film etc. 

Format:  PLOT ADVANCE

2 ANNOTATION
Specifies whether sizes set using ANNOTATION SIZE are measured in mm
on the plot (PLOT ANNOTATION PLOT, default), or are plotted in the same
proportion to the rest of the picture as they would have been on the screen
(PLOT ANNOTATION SCREEN).

Format:  PLOT ANNOTATION PLOT
or       PLOT ANNOTATION SCREEN

2 AUTOSCALE
Specifies that IFF and image data drawn into the plot is to be scaled 
to fit the available plotting area. This is the default. See PLOT SCALE and
PLOT RATIO for details of setting an absolute plot scale. 

Format:  PLOT AUTOSCALE

2 CLIP
Controls whether annotations sent to the plotter are clipped,
at the boundary of the drawing area. Specify 1 to clip (default), or 0
not to clip. The picture from the primary or secondary display is always
clipped. 

Format:  PLOT CLIP n

2 CLOSE
Finishes off a plot and closes the connection to the plot device.

Format:  PLOT CLOSE

2 ESCAPE
Used to communicate a device dependent function to the particular plot
device in use. See the Plotters User Guide in the PLOTTING package
documentation for details of what functions are available. For example...

Using GKSCAL5800SHR or GKSVRSVGSSHR - escid = 1 uses a drawing mode
in which the things drawn subsequently are opaque (things drawn already
do not show through). escid = 2 uses a drawing mode in which everything
drawn is superimposed (the inks are mixed). If necessary, then draw the
picture with some selections in force, then change the selections, give the
PLOT ESCAPE command, and draw again.

Format:  PLOT ESCAPE escid

2 HWTEXT
Attempt to use hardware facilities to plot text (rather than using
the character shapes from the TRI file) if the FRT includes a hardware bit
in the flags entry for a text feature code. See the Plotters User Guide
for details of whether a device supports hardware text.

Attempts to use hardware text on a device which does not support it
may result in text not appearing at all.

Hardware text is enabled if n is missing or 1, disabled if n is 0 and by
default.

Format:  PLOT HWTEXT [n]

2 LIMITS
This command is not implemented - the limits for the display are used.

Sets the coordinate range for the plot when the various annotating
DRAW commands are used. 

If the limits do not define an area with the same aspect ratio as the
plot area, then part of the plot area will not be used. If this command
is not given, or the values are omitted, then the default limits (the
same as the LITES2 working area) are used. The plot limits may be
changed at any time. 

Format:  PLOT LIMITS  [xmin xmax ymin ymax]

2 LOAD
Loads the specified GKS shareable image for hardcopy plotting. 
This command must be given before a plot can be started with PLOT OPEN.

GKS shareable images for different plot devices are supplied by
Laser-Scan, and will normally reside in the directory
LSL$PUBLIC_ROOT:[PLOTTING.EXE], which is included in the LSL$EXE search
list, with names like GKSxyzSHR.EXE where xyz is some indication of the
plotter device. 

The specified filename may be either a logical name (which must
translate to a device, directory, and filename, the file extension of
.EXE being assumed), or an actual file name (in which case a default of
LSL$EXE:---.EXE is applied). 

For example, to plot on a Laserplot, one might give the command
PLOT LOAD GKSLPSHR.

Format:  PLOT LOAD filename

2 OFF
Causes output from drawing commands to revert to its normal destination,
rather than the plotter.

Format:  PLOT OFF

2 ON
Directs any output from drawing commands to the plotter.

Format:  PLOT ON

2 OPEN
Opens the plot device and begins a plot. 
Use PLOT ON and PLOT OFF commands to direct drawing output to the plotter.
The plot is terminated by a PLOT CLOSE command. 

Format:  PLOT OPEN

2 ORIGIN
Set the origin of the drawing area. 
The position of the drawing area specified using PLOT POSITION and PLOT
SIZE commands is offset by the specified amount in mm. 

Format:  PLOT ORIGIN xoff yoff

2 PIXELS
Sets the maximum number of image pixels in either x or y to be drawn 
into the plotting area when plotting images. Setting a low value will
force subsampled views to be drawn, which might save time, or prevent
pixels far too small for the plotter from being drawn. The default
number depends on the particular plotter in use. The number is set to
this default by the PLOT OPEN command, so any PLOT PIXELS commands
should come after PLOT OPEN.

Format:  PLOT PIXELS integer

2 POSITION
Set the plotting position within the drawing area. Position 0 is bottom
left, 1 is centre left, 2 is top left, 3 is bottom centre, and so on up
to 8 which is top right. The default is position 0.

Format:  PLOT POSITION n

2 RATIO
Specifies the ratio between the scale of the plot and the true scale 
of the data, thus the command PLOT RATIO 1.0 will produce a plot at its
true scale (provided that this has been set correctly by SCALE commands,
or by default). 

Format:  PLOT RATIO real

2 SCALE
Specifies the source scale of the plot to be produced. 
For this to work, the IFF data must have a source scale defined in its
map descriptor. For example, if a map is a 1:1250, then the command PLOT
SCALE 2500 will cause it to be plotted at half the size. 

Format:  PLOT SCALE real

2 SEPARATOR
Used to specify a PLOT ESCAPE function which is performed automatically
when the priority changes and drawing sorted by priority is being used.
It is used on plotters which by default draw transparently to ensure
that each priority layer is drawn opaque. The default value (which is
reset by PLOT LOAD) is 0, which means that no separator will be used.
The value 1 is usually required for electrostatic plotters.
See the PLOT ESCAPE command and the Plotters User Guide in the PLOTTING
package documentation for details of what functions are available.

Format:  PLOT SEPARATOR ESCAPE escid

2 SIZE
Set the size of the plotting area in mm. The default is the full size
of the available area on the plotter. The size is set to this default
by the PLOT OPEN command, so any PLOT SIZE commands should come after
PLOT OPEN.

Format:  PLOT SIZE xsize ysize

2 TYPE
Sets the workstation type for use in future PLOT OPEN commands. 
Appropriate numbers (if required) are given in the section of the FPP
Plotters User Guide for the plot device concerned. 

Format:  PLOT TYPE n

1 WARP
Control transformation (warping) of raster images.
A typical sequence of commands might be:
WARP TRANSFORM - specify type of transformation
WARP CLEAR - clear previously specified points if required
WARP POINT IMAGE/MAP - specify points (as many as required)
WARP FIT - calculate a fit
WARP DELETE/REPLACE - modify points if required, or add more
WARP FIT - fit again if required
WARP ON - turn on warping
WARP MAP/IMAGE - specify whether to warp the vectors or the image
Use drawing commands to view the warped picture.

Format:  WARP  subcommand

Valid in states  INITIAL READY LINE CIRCLE TEXT SYMBOL

2 CLEAR
Delete all warp points.
Any warp transformation in use, or already fitted, remains active.
Use WARP OFF to turn off an active transformation.

Format:  WARP CLEAR

2 DELETE
Deletes a warp point.
The point number must be between 1 and the number of points digitised.
After this command, higher numbered points are re-numbered to fill
the gap.

Format:  WARP DELETE n

2 FIT
Calculate a fit to the current set of warp points.
The type of fit is specified by the WARP TRANSFORM command.
The goodness of the fit may be shown by the SHOW WARP command, and
also appears in the various $WARP... system variables.
Once fitted, the warp may be activated using the WARP ON command.

Format:  WARP FIT

2 IMAGE
Warp the raster image to fit the vector data.
This can be slower than WARP MAP. Because it causes the image to be
resampled, a side-effect is that the image may be drawn at arbitrary
zoom factors.

Format:  WARP IMAGE

2 MAP
Warp the vector data to fit the raster image (default).
This can be faster than WARP IMAGE. As when not warping at all, the
raster image can only be zoomed to multiples of its original pixel
size.

Format:  WARP MAP

2 OFF
Turn off warping.
The warp that was active may be turned back on using WARP ON.

Format:  WARP OFF

2 ON
Turn on warping.
If a new warp has been calculated using WARP FIT, then this is activated,
otherwise the previously active warp is activated.

Format:  WARP ON

2 POINT
Specify a data point for fitting a warp.
If the coordinates are omitted, the current cursor position is used.
Coordinates are specified in IFF units and identify a position either
in the vector data (MAP) or the raster data (IMAGE).
IMAGE and MAP points may be specified in any order - when a fit is
performed, the first IMAGE point will map to the first MAP point etc.

Format:  WARP POINT IMAGE  [x y]
or       WARP POINT MAP    [x y]

2 REPLACE
Replace a previously specified warp data point.
The point number must be between 1 and the number of points digitised.
If the coordinates are omitted, the current cursor position is used.
Coordinates are specified in IFF units and identify a position either
in the vector data (MAP) or the raster data (IMAGE).

Format:  WARP REPLACE IMAGE  n [x y]
or       WARP REPLACE MAP    n [x y]

2 TRANSFORM
Specifies the type of warp transformation to be used.
See the description of the SETUP TRANSFORM for details of the formulae
used. The LINEAR transformation is just a shift if one point is supplied,
or a shift plus a rotation with two points.

Format:  WARP TRANSFORM type

         where type = AFFINE (default)
                    = EXTENDED
                    = LINEAR
                    = ORTHOGONAL
                    = PROJECTIVE

1 Attribute_Commands
The following LITES2 commands are used to manipulate attributes

GET PUT SET UNSET REPEAT SELECT DESELECT REGION ANCILLARY AC ADD ALTER
TRAIL 

1 SELECT
Makes feature selections by various criteria.
Selections may be applied to windowing and FIND and SEARCH operations,
and can be activated for output.

Format:  SELECT  subcommand

Valid in states  INITIAL READY SETUP

2 AC
Allows selection by ancillary code (AC) entries in features. 
The AC type may be either an integer, the corresponding name defined by
Laser-Scan, or a name defined by the user in the FRT file.
AC selections may be stored in up to 10 separate groups (see the
SELECT ACGROUP command). A feature will be selected if its ACs
satisfy the criteria in any one or more of the groups. Within a group,
selections for different AC types are logically ANDed together, so a
feature must satisfy all the selection criteria to be selected. For
example, to select all features with either a type 2 or a type 3 AC, one
might use the commands:

SELECT ACGROUP 1	! first group of AC selections (default)
SELECT AC 2		! want all type 2 ACs
SELECT ACGROUP 2	! another group of selections
SELECT AC 3		! and all type 3 ACs also

If the SELECT ACGROUP commands were not used, then only features with
both the AC types would be selected.

Format:  SELECT AC type [subcommand]

3 CANCEL
Cancels all selections based on the given AC type. 
The DESELECT command may not be used with CANCEL.

Format:  SELECT AC type CANCEL

3 PRESENT
Features must have an AC of the specified type. 
The value and text of the AC are not considered. PRESENT is the default
subcommand for the SELECT AC command, and may therefore be omitted.  The
command DESELECT AC type PRESENT implies that features must not have an
AC of the specified type.

Format:  SELECT AC type [PRESENT]

3 TEXT
Allows selection according to the contents of the AC text. 

If just a text string is specified (in double quotes if it contains
spaces), then features will be selected if they contain an AC of the
specified type whose text contains the given string (or does not contain
the string for a DESELECT command). If an inequality and value(s) are
given (as for the SELECT AC type VALUE command), then the given text
string within the AC text must be followed immediately by a numerical
value in the selected range. The datatype of the value may only be
integer. A null text string (specified by "") followed by a value or
range of values indicates that the numerical value occurs at the start
of the AC text. 

Format:  SELECT AC type TEXT text [ [inequality] val1 [val2] ]

eg       SELECT AC DFAD_FADT TEXT fid 25
         Features must contain a DFAD_FADT type AC in which the text
         contains the string "fid" followed by a value 25.

3 VALUE
Allows selection according to the value contained in AC entries. 

Values must be specified in the correct format (integer, real, date,
time, character) for the data type of the AC. 

The inequality may be any of:     =     >    >=     <    <=    <>
               with synonyms:   .EQL. .GTR. .GEQ. .LSS. .LEQ. .NEQ.
                         and:                     .LT.

Inequality names may be abbreviated. If the inequality is omitted, then
= is assumed. A range of values may be specified by giving two values
(omitting the inequality, or specifying =), which will be taken to mean
the range between and including the two values. The command may be
repeated to specify additional values or ranges of values. 

Format:  SELECT AC type VALUE [inequality] val1 [val2]

eg       SELECT AC HEIGHT VALUE >30.0 (height AC, value >30)
or       SELECT AC HEIGHT VALUE 10.0 20.0 (height AC, values 10 to 20)

2 ACGROUP
Specifies a group number (1-10) in which to store subsequent SELECT AC
commands. The selections in different groups are logically ORed together.

Format:  SELECT ACGROUP n

2 ALL
Return selections to default state.

If no subcommand is given, then all selections are reset to default
state, ie all maps, layers, feature codes, feature serial numbers, ACs,
text categories and text styles are selected and any selections based on
regions are cancelled. Selection of features flagged as edited, unedited
and deleted is also cancelled. ie Edited and unedited features are
selected, while deleted features are not selected. 

If subcommand is given, then only one of classes of selections is reset.

Format:  SELECT ALL [subcommand]

3 AC
All ACs are selected.

Format:  SELECT ALL AC

3 CATEGORY
All text categories are selected.

Format:  SELECT ALL CATEGORY

3 FCS
All feature codes are selected.

Format:  SELECT ALL FCS

3 FLAGS
All flagged features are selected.

Selection of features flagged as edited, unedited and deleted is
cancelled. ie Edited and unedited features are selected, while deleted
features are not selected

Format:  SELECT ALL FLAGS

3 FSNS
All feature serial numbers are selected.

Format:  SELECT ALL FSNS

3 GEOMETRIES
Any selections by geometry are cancelled.

Format:  SELECT ALL GEOMETRIES

3 LAYERS
All layers are selected.

Format:  SELECT ALL LAYERS

3 MAPS
All maps are selected.

Format:  SELECT ALL MAPS

3 PRIORITIES
All representation priority levels are selected for display.

Format:  SELECT ALL PRIORITIES

3 REGIONS
Any selections by region are cancelled.

Format:  SELECT ALL REGIONS

3 STYLE
All text styles are selected.

Format:  SELECT ALL STYLE

2 CATEGORY
Select text features with a category in the given range.
Values for text categories are in the range 0 - 63.
Note: only text features are subject to this selection; other
      features may also be displayed / found / output

Format:  SELECT CATEGORY range

eg       SELECT CATEGORY 0-5,10-15,20,15-30

2 CUTGEOMETRY
Select all features that cut the specified geometry.

Note that only one geometry may be used for selection at a time, and
that it must be an area geometry.

Format:  SELECT CUTGEOMETRY integer

eg       SELECT CUTGEOMETRY 4

2 CUTREGION
Select all features that cut the boundary of the specified region.

See also ENABLE AND

Format:  SELECT CUTREGION integer

eg       SELECT CUTREGION 4

2 DELETED
Select all features that have been deleted.
Only operational if FLAGS are enabled.

Format:  SELECT DELETED

2 EDITED
Select all features that have been flagged as edited.
Only operational if FLAGS are enabled.

Format:  SELECT EDITED

2 FCS
Select feature codes in given range.
Range may be numeric or feature code groups
See the FRTLIB documentation for information about setting up groups.

Format:  SELECT FCS  range

eg       SELECT FC 20-30,40-50,55,78
or       SELECT FC ROADS,RIVERS
or       SELECT FC 3-13,ROADS

2 FSNS
Select Feature Serial Numbers in given range.

Format:  SELECT FSNS  range

eg       SELECT FSNS 20-30,40-50,55,78

2 INGEOMETRY
Select all features that lie inside the specified geometry.

Note that only one geometry may be used for selection at a time, and
that it must be an area geometry.

Format:  SELECT INGEOMETRY integer

eg       SELECT INGEOMETRY 4

2 INREGION
Select all features that lie completely within the specified region.

See also ENABLE AND

Format:  SELECT INREGION integer

eg       SELECT INREGION 4

2 LAYERS
Select by layer.

Format:  SELECT LAYERS  range

eg       SELECT LAYERS 2-4,10-24

2 MAPS
Select by maps by map number.

Format:  SELECT MAPS  range

eg       SELECT MAPS 2-4

2 OUTPUT
Only selected features are output on EXIT or WRITE
(default is DESELECT OUTPUT)

Format:  SELECT OUTPUT

2 OUTGEOMETRY
Select all features that lie outside the specified geometry.

Note that only one geometry may be used for selection at a time, and
that it must be an area geometry.

Format:  SELECT OUTGEOMETRY integer

eg       SELECT OUTGEOMETRY 4

2 OUTREGION
Select all features that lie completely outside the specified region.

See also ENABLE AND

Format:  SELECT OUTREGION integer

eg       SELECT OUTREGION 4

2 PRIORITIES
Select representation priority levels for display.
Note that priority selections do not affect feature operations
such as FIND, nor file operations such as WRITE.

Format:  SELECT PRIORITIES range
or       SELECT PRIORITY range

eg       SELECT PRIORITIES 2-4,10-24

2 STYLE
Select text features with a style in the given range.
Values for text styles are in the range 0 - 3.
Note: only text features are subject to this selection; other
      features may also be displayed / found / output

Format:  SELECT STYLE

eg       SELECT STYLE 0,2

2 UNEDITED
Select all features that have been not been flagged as edited.
Only operational if FLAGS are enabled.

Format:  SELECT UNEDITED

2 WINDOW
Only selected features are drawn on the screen, and may be found using
FIND or SEARCH (default)

Format:  SELECT WINDOW

1 DESELECT
Specifies features which are not to participate in future operations.
See SELECT.

Format:  DESELECT  subcommand

Valid in states  INITIAL READY SETUP

Takes same subcommands as SELECT (qv), but DESELECT ALL and DESELECT
ACGROUP are not valid.

1 GET
Copy the specified attribute set into the current attribute set.
These can then be modified using the SET command (qv) and saved using
the PUT command.
Attribute sets contain values for feature code (FC), process code (PC),
PROCESS (for use at end of construction), and ACs.
There are 16 attribute sets.

Format:  GET  integer

Valid in states  INITIAL READY LINE CIRCLE TEXT SYMBOL EDIT ON WINDOW AC

1 PUT
Copy the current attribute set into the specified attribute set.
Attribute sets contain values for feature code (FC), process code (PC),
PROCESS (for use at end of construction), and ACs.
There are 16 attribute sets.
See also GET and SET.

Format:  PUT  integer

Valid in states  INITIAL READY LINE CIRCLE TEXT SYMBOL EDIT ON WINDOW AC

1 REPEAT
Set the values in the current attribute set to those of the found feature. 
Enables future constructions to have the same attributes as the found
feature.
See also GET and SET.

Format:  REPEAT subcommand

Valid in states  LINE CIRCLE TEXT SYMBOL

2 ATTRIBUTE
Sets the point attributes in the current attribute set,
to be the same as those of the current point of the current feature.

This command is only valid if the cursor is on a point of a feature.

Format:  REPEAT ATTRIBUTE

2 FEATURE
Sets the feature wide attributes of the current attribute set,
from the found feature (default).
These are (for all features) the Map, Layer, Feature Code and any ACs and
(for text features) the Category, Font, Location and Text Size.

Format:  REPEAT
or       REPEAT FEATURE

1 SET
Sets values for various attributes in the current attribute set, 
which is used for new constructions.
The current attribute set can be loaded using the GET or REPEAT commands,
and saved using the PUT command (qv).
Global attributes are not saved by PUT or restored by GET.

Format:  SET  subcommand

Valid in states:
INITIAL READY LINE CIRCLE TEXT SYMBOL MODIFY EDIT ON WINDOW AC

2 AC
Sets an ancillary code in the current attribute set,
to be used for new constructions. Any number of ACs may be set.
The ACs in the current attribute may be edited using the ANCILLARY
command when there is no found feature.

The AC type can either be an integer, or the corresponding
name defined by Laser-Scan or one defined by the user in his FRT. 

The format of the value depends on the data type of the specified
attribute code, either defined by Laser-Scan or defined by the user
in his FRT. 

See "Command Arguments" for more details of these data types.

The SET FC command clears any ACs in the current attribute set.

Format:  SET AC  type value [text] (as for ADD AC qv)

eg       SET AC 100 1234 pressure 19.4
or       SET AC HEIGHT 123.45

2 ARC
Sets the feature code to be used for any arc features produced,
when doing PART operations on full circum-circles (graphical type 5). 

It must represent a circum-circle arc (graphical type 4) in the current
FRT. 

Format:  SET ARC  integer

2 ATTRIBUTE
Sets a point attribute in the current attribute set,
to be used for new constructions. 
Any number of point attributes may be set. 

The attribute code can either be an integer, or the corresponding
name defined by Laser-Scan or one defined by the user in his FRT. 

The format of the value depends on the data type of the specified
attribute code, either defined by Laser-Scan or defined by the user
in his FRT. 

See "Command Arguments" for more details of these data types.

Point attributes are removed from the construction attribute set with
the UNSET ATTRIBUTE command. 

Format:  SET ATTRIBUTE  code value

eg       SET ATTRIBUTE Z  24.3
or       SET ATTRIBUTE 93 24.3

2 CATEGORY
Sets the text category field for text constructions (global).

Format:  SET CATEGORY  integer

2 FC
Sets the feature code for the current attribute set.
Any process and ACs in the current attribute set are cleared by this
command. 

Format:  SET FC  integer

2 FSN
Sets the feature serial number for the next constructed feature (global).
The setting is cleared by ABANDON, or by SET FSN 0.

Format:  SET FSN  integer

2 HEIGHT
Sets height of text (mm) for text constructions (global).

Format:  SET HEIGHT  real

2 INCREMENT
Sets the increment (in mm) to be used for changes in text size.
This applies when using the LARGER and SMALLER commands on text features
(when the HEIGHT option has been enabled, and the POINT option
disabled). 

If no argument is given to this command, then the height will be
increased/decreased by 10%.  This is the default setting.


Format:  SET INCREMENT  [real]

2 LAYER
Sets the layer to be used for new constructions (global).

Format:  SET LAYER  integer

2 LOCATION
Sets the text location field for text constructions (global).

Format:  SET LOCATION  integer

2 MAP
Sets the map to be used for new constructions (global)

Format:  SET MAP  integer

2 PROCESS
Sets a process for the current attribute set.
The process is a command (possibly a macro) which will be obeyed
automatically on completion of any construction.
The commands invoked may for instance use SEARCH LAST (qv) to perform
some editing operation on the new feature.

Note: This process is only carried out after an END command. It will
not be executed if a text or symbol is DEPOSITed.

Format:  SET PROCESS  command

2 PSIZE
Sets the text height in points for text constructions (global).

Format:  SET PSIZE  integer

2 STYLE
Sets the text style field for text constructions (global).

Format:  SET STYLE integer

2 TEXT
Sets the feature code to be used for constructing text features (global).

Format:  SET TEXT  integer

1 UNSET
Unsets values for various attributes in the current attribute set.

Format:  UNSET  subcommand

Valid in states:
INITIAL READY LINE CIRCLE TEXT SYMBOL MODIFY EDIT ON WINDOW AC

2 ATTRIBUTE
If an argument is given, removes the specified attribute from the list
of point attributes in the current construction attribute set. 
If no argument is given then all the attributes in the list are removed.

The argument (attribute code) can either be an integer, or the
corresponding name from the FRT. 

Format:  UNSET ATTRIBUTE  [code]

eg       UNSET ATTRIBUTE Z
or       UNSET ATTRIBUTE 93
or       UNSET ATTRIBUTE

1 GEOMETRY
Geometries are dynamic data structures (ie they are only available while
LITES2 is running) that represent 2 dimensional geometric data. They can
be manipulated in more complex ways than features, for example they can be 
combined together and buffer zones can be created around them. Their
main advantage is that they represent areas in a more coherent manner
than either IFF features or LITES2 regions.

There are three types of geometry - point (dimension 0), line (dimension 1)
and area (dimension 2). Each of these types may consist of one or more
parts, thus, for example a river network which in an IFF file consists
of several line features, would produce one multi part line type geometry.
Where a geometry consists of only one part it is called a simple geometry
and when it consists of more than one part it is considered to be complex.

A simple area consists of a single outer boundary or ring (digitised in
a counter clockwise direction) and possibly one or more inner boundaries
or rings (digitised in a clockwise direction). These boundaries must not
self-intersect or intersect each other. Inner boundaries must all lie
within the outer boundary and must not lie within another inner
boundary.

Features can be selected by geometry, where the geometry is of area type.
To do this selection, the features are converted to geometries so they
must be representable by valid geometries of their default type. See the
GEOMETRY FEATURE command for details of these default types.

There are 32 geometries available.

An appropriate licence is required to use this command. 

Geometry manipulations make use of a shared image pointed at by the
logical name LSL$LITES2_GEOM_ROUTINES. This image is supplied by
Laser-Scan. It is called LSL$EXE:LITES2GEOMSHR.EXE.
This shared image in turn makes use of the image pointed at by the
logical name LSL$LSLGOTHICSHR. This is normally LSL$LIBRARY:LSLGOTHICSHR 
in the LSLSYSTEM package.

Format:  GEOMETRY subcommand

Valid in states:
READY LINE CIRCLE TEXT SYMBOL EDIT MODIFY ON CONSTRUCT

2 AND
To combine two geometries together to produce a third using a mathematical
AND of the input geometries. This command may produce a complex geometry.

If geom1 is an area  and geom2 is an  area, geom3 will be an area.
If geom1 is a  line  and geom2 is an  area, geom3 will be a  line.
If geom1 is a  point and geom2 is an  area, geom3 will be a point.
If geom1 is a  line  and geom2 is a   line, geom3 will be a point.

All other combinations of geometry types are invalid.

Format:  GEOMETRY AND geom1 geom2 geom3

2 ANDNOT
To combine two geometries together to produce a third using a mathematical
AND of the input geometry 1 with the area outside geometry 2. This
command may produce a complex geometry.

If geom1 is an area  and geom2 is an  area, geom3 will be an area.
If geom1 is a  line  and geom2 is an  area, geom3 will be a  line.
If geom1 is a  point and geom2 is an  area, geom3 will be a point.

All other combinations of geometry types are invalid.

Format:  GEOMETRY ANDNOT geom1 geom2 geom3

2 ADD
To add a simple geometry to another geometry. If the second geometry does
not exist, one of an appropriate type will be created.

When adding a geometry to an existing geometry, both geometries must be
of the same type.

Format:  GEOMETRY ADD geom1 geom2

2 BUFFER
To produce a buffer of a specified radius around a geometry. The resulting
geometry will be of area type.

By default, the radius is specified in IFF units (unless a UNITS
command has been given).

The number of points used to generate arcs around external angles in the
original geometry is controlled by the CIRGEN tolerance setting.

The algorithm to produce buffer zones is theoretically correct, but because
when it produces circle arcs around external angles it generates them
as a series of vectors, it occasionally fails to produce a valid geometry.
When this happens, LITES2 divides the vector length by 2 and tries to
generate the buffer zone again. It does this 4 times before failing.
If this happens more than very occasionally, the TOLERANCE CIRGEN
setting should be altered to produce shorter vectors for the required
offset.

Format: GEOMETRY BUFFER geom1 geom2 radius

2 CANCEL
To cancel the specified geometry.

Format: GEOMETRY CANCEL geom1

2 COPY
To copy one geometry into another geometry. This leaves the original
geometry as it was.

Format: GEOMETRY COPY input_geom output_geom

2 FEATURE 
To create a geometry from the current found feature. The type of
geometry created, by default, depends on the feature's graphical type:

   Graphical types 7 - 10 produce point type geometries.
   Graphical types 1 - 6 and 11 produce line type geometries.
   Graphical type  12 produces area type geometries.

These default types can be overridden by using the dimension argument to
the command. This can take a value of 1 or 2.

If, in this case the found object is a text or symbol, then a box (or boxes)
will be generated around the feature (expanded using the TOLERANCE EXPAND
setting) to produce the line or area type geometry.

If the found feature is a circle or circle arc, then the number of points
generated to produce the line or area geometry is controlled by the
TOLERANCE CIRGEN setting.

Curves and symbol strings (graphical types 6 and 11) are treated as
lines (graphical type 1).

When creating line type geometries, invisible lines in the feature are
ignored (ie they are treated as visible lines).

When creating area geometries, the IFF data must conform to certain rules
that are not normally enforced by LITES2. Polygons that are produced
by other programs (eg IPOLYGON) do conform to these rules. They are:

     1) Invisible moves imply a jump to another ring.
     2) Invisible moves to and from a ring must be coincident.
     3) The direction of digitising of the rings is irrelevant, but
        the ring with the largest area is taken to be the outer
        boundary, and all the other rings must lie inside this boundary.
     4) The visible line work must not intersect.

Format:  GEOMETRY FEATURE geom1 [dimension]

2 NOTAND
To combine two geometries together to produce a third using a
mathematical AND of the area outside input geometry 1 with geometry 2.
This command may produce a complex geometry.

This command is only valid for area type geometries.

Format:  GEOMETRY NOTAND geom1 geom2 geom3

2 OR
To combine two geometries together to produce a third using a
mathematical OR of input geometry 1 with geometry 2. This means that
the resultant geometry will consist of all the area covered by either
of the input geometries.

This command may produce a complex geometry.

This command is only valid for area type geometries.

Format:  GEOMETRY OR geom1 geom2 geom3

2 REGION
To create a (area) geometry from the specified region.

The input region must conform to the rules for data being used for
an area type geometry. See GEOMETRY FEATURE for details.

Format:  GEOMETRY REGION geom region

2 RENAME
To rename a geometry to another geometry. This command has the effect
of cancelling the original geometry.

Format:  GEOMETRY RENAME input_geom output_geom

2 XOR
To combine two geometries together to produce a third using a
mathematical XOR of input geometry 1 with geometry 2. This means that
the resultant geometry will consist of all the area covered by either
of the input geometries, but excluding the area covered by both.

This command may produce a complex geometry.

This command is only valid for area type geometries.


Format:  GEOMETRY XOR geom1 geom2 geom3


1 REGION
Creates or adds points to the specified region.
There are 32 regions available.

An appropriate licence is required to use this command.

The command REGION n defines the found linear, text or symbol feature,
or the current text component or symbol when in MODIFY state with no
found feature, to be the specified region. 
For text features, the region consists of the joined up boxes around 
each character (qv TOLERANCE EXPAND); for symbols it consists of 
its bounding box.
Regions are always taken to be closed areas. A closing line is assumed.
Once defined, a region can be used for feature selection, using SELECT
and DESELECT, and also via the $INREGION, $OUTREGION, and $CUTREGION
system variables. Features can also be clipped to regions (qv CLIP 
command).
Regions can be cancelled with the CANCEL REGION command, transformed 
with the TRANSFORM REGION command, their vertices listed with the SHOW 
REGION command and they can be displayed on the screen with the DRAW
AREAREGION or DRAW REGION commands. 

Format:  REGION  integer [subcommand]

eg       REGION 5
or       REGION 5 POINT 10.0 20.0

Valid in states:
READY LINE CIRCLE TEXT SYMBOL EDIT MODIFY ON CONSTRUCT

2 BOX
Creates a rectangular region around the limits of the found feature (or
text or symbol being modified).

Format:  REGION  integer BOX

2 FEATURE
The command REGION n FEATURE is a synonym for the REGION n command (see
above).

Format:  REGION  integer FEATURE

2 GEOMETRY
Creates a region from the specified geometry.

This command is only valid for area geometries with a single part. If
the geometry has any inner rings, then these will be discarded, as regions
cannot satisfactorily cope with this concept.

Format:  REGION  integer GEOMETRY integer

2 IMAGE
Creates a region around pixels of the same colour.
The cursor must be pointing within a raster image specified using
the IMAGE SELECT command (the highest numbered image will be
used if there is more than one). The colour of the pixel containing
the cursor is identified, and a region created around all contiguous
pixels of the same colour. Note that the region may contain holes
of other colours (not containing the cursor). This command may be
terminated prematurely by CTRL/C.

Format:  REGION  integer IMAGE

2 POINT
The command REGION n POINT x y adds data point x y to region n, 
creating the region if it does not already exist. The region cannot
be used until it has at least 3 points. 

Format:  REGION  integer POINT x y

2 WINDOW
Defines a rectangular region using the cursor.
The current cursor position becomes the bottom left of the region,
and WINDOW state is entered. The cursor may then be moved to the
top right of the region and the END command given. The START command
may be used to set the bottom left to a new position. ABANDON may
be used to cancel the operation.

Format:  REGION  integer WINDOW

2 ZONE
Creates a buffer zone around the found linear feature (or text or symbol
being modified). If the feature is closed, then a positive offset will
create a region outside the feature while a negative offset will create
a region inside the feature. Negative offsets greater than the extent of
the closed feature produce invalid regions. If the feature is open, a
region will be created around the whole feature, like a sausage.

Note that for complex features, buffer zones may be reentrant and will
cause problems when testing features against them. However the variable
$CURSINREGION will give the correct result for these regions.

When creating buffer zones, circle arcs are generated around the outside
of angles in the original feature. The number of points produced in
these arcs is controlled by the CIRGEN tolerance setting. The points in
the region are then filtered, and the number of points produced in this
stage is controlled by the BUNCH tolerance setting.

By default, the offset distance is specified in IFF units (unless a
UNITS command has been given).

Format:  REGION  integer ZONE offset

1 FIDUCIAL
Defines which features are fiducial features (grid, tick marks etc)
and which should not be taken into account when calculating FSNs for new
features.

Format:  FIDUCIAL  subcommand

Valid in state  INITIAL 

2 LAYERS
All features in these layers are ignored when calculating FSNs 
for new features. The default is layer 0.

To add to the current list of fiducial layers, specify the layers in the
range argument.
                                    
If no argument is given, all the existing layers are removed from the
list (including layer 0, the default).

Format:  FIDUCIAL LAYERS  [range]

eg       FIDUCIAL LAYERS 11-12,32

1 TAKE
Transfers attributes from the current attribute set to the found feature.

Format:  TAKE subcommand

Valid in states  LINE CIRCLE TEXT SYMBOL

2 AC
Transfers AC attributes to the found feature.

Transfers the ancillary codes (ACs) from the current attribute set to
the found feature (in addition to any it may have already).
(This command used to be called TRANSFER AC)

Format:  TAKE AC

2 ATTRIBUTES
Transfers point attributes to the found feature.
This command is only valid if the cursor is on a point.

Transfers the point attributes from the current attribute set to the
current point of the found feature (in addition to any it may have
already). 

Format:  TAKE ATTRIBUTES

1 ANCILLARY
Allows ancillary code manipulation.
If in INITIAL or READY state (no found feature), then the ACs in the
current attribute set are edited, otherwise the ACs of the found
feature are edited.

AC state is entered, and commands PREVIOUS/NEXT/FIRST/LAST (qv)
will move between the TCs/CHs/ACs.
DELETE will delete the current TC/CH/AC, ADD will add new ones, ALTER
will change the current AC, while REPLACE and SUBSTITUTE will allow the
text only to be changed. 
END or ABANDON will revert to READY state. The ACs belonging to a
feature will be unchanged if ABANDON is used, but changes to the current
attribute set cannot be 'undone'. 

Format:  ANCILLARY

Valid in states  INITIAL READY LINE CIRCLE TEXT SYMBOL

1 AC
Alias for ANCILLARY command (qv).

1 ADD
Add a new AC, TC or CH to the found feature, or to current attribute set.

Format:  ADD  subcommand

Valid in state  AC

2 AC
Add general AC entry.

The AC type can either be an integer, or the corresponding
name defined by Laser-Scan or one defined by the user in his FRT. 

The format of the value depends on the data type of the specified
attribute code, either defined by Laser-Scan or defined by the user
in his FRT. 

See "Command Arguments" for more details of these data types.
Text is optional. It must be enclosed in double quotes if it is to have
any leading spaces or tabs.

Format:  ADD AC  type value [text]

eg       ADD AC HEIGHT 24.53 pressure 19.4
or       ADD AC 3      24.53

2 CH
Add CH entry (used to carry non-IFF information).

Format:  ADD CH  text

eg       ADD CH LI 0 0

2 CONTOUR
Add contour (integer height) AC entry (type 2).

Format:  ADD CONTOUR  integer

eg       ADD CONTOUR 200

2 CROSSREF
Add feature cross reference AC entry (not implemented).

Format:  ADD CROSSREF  integer

2 HEIGHT
Add height (real) AC entry (type 3).

Format:  ADD HEIGHT  real

eg       ADD HEIGHT 34.6

2 LH
Add left hand boundary text AC entry (type 4).

Format:  ADD LH  integer text

eg       ADD LH 23 Bedfordshire

2 REALAC
Add standard real type AC entry.
AC type is in the range 0-32767, but must only represent a REAL ac type.
Currently AC types 3 and 80 - 99 are treated as reals.
For other AC types, use ADD AC
AC value is any real number.
Text is optional. It must be enclosed in double quotes if it is to have
any leading spaces or tabs.

Format:  ADD REALAC  type value [text]

eg       ADD REALAC 99 22.6  Height of pylon

2 RH
Add right hand boundary text AC entry (type 5).

Format:  ADD RH  integer text

eg       ADD RH 23 Cambridgeshire

2 SECONDARY
Add secondary feature code AC entry (type 1).

Format:  ADD SECONDARY  integer

eg       ADD SECONDARY 23

2 TC
Add TC (transmitted comment) entry.

Format:  ADD TC  text

eg       ADD TC this is a transmitted comment

1 ALTER
Amend the current AC, TC or CH (commands as for ADD).

Format:  ALTER  subcommand

Valid in state  AC

Subcommands as ADD (qv)

1 TRAIL
Allows alteration of trailing TC / CH entries for the current layer (not implemented).
Enters AC state (see ANCILLARY command).

Format:  TRAIL

Valid in state  READY

1 Interrogation_Commands
The following LITES2 commands are used to report information

EXAMINE SHOW TIME 

1 EXAMINE
Reports attributes of found feature.

Format:  EXAMINE  subcommand

Valid in states:
LINE CIRCLE TEXT SYMBOL EDIT MODIFY ON WINDOW CONSTRUCT AC RECOVER

2 AC
Reports any AC, TC, CH entries.

Format:  EXAMINE AC

2 ALL
Reports all information about found feature.

Format:  EXAMINE ALL

2 ANGLE
Reports the angle (anti-clockwise from horizontal) in degrees          
of the current feature. For linear features this is the angle          
of the current vector.
This information is not available for circle arcs. 

Format:  EXAMINE ANGLE

2 AREA
Reports the area enclosed by the current feature. 

If the feature is not closed, an imaginary vector between the first and
last points is  assumed.

For texts and symbols the area of the bounding box is given.
A positive area indicates that the feature has been digitised in a
clockwise direction, negative areas indicate counter clockwise
digitising.
Degenerate features (with two or less points) give an area of 0.0

Format:  EXAMINE AREA

2 ATTRIBUTES
Reports the attributes of the current point in the feature.

The cursor must be on a point for this command.

Format:  EXAMINE ATTRIBUTES

2 BEARING
Reports the bearing (clockwise from grid north) in degrees          
of the current feature. For linear features this is the bearing
of the current vector.
This information is not available for circle arcs. 

Format:  EXAMINE BEARING

2 BOX
Reports the coordinates of the limits of the bounding box 
surrounding the current feature.

Format:  EXAMINE BOX

2 CATEGORY
Reports category field for text.

Format:  EXAMINE CATEGORY

2 CROSSREF
Reports any cross reference FSN's (not implemented).

Format:  EXAMINE CROSSREF

2 DISTANCE
Reports the distance along the found feature of the current cursor
position, measured from the start.

Format:  EXAMINE FC

2 FC
Reports feature code of found feature.

Format:  EXAMINE FC

2 FSN
Reports serial number of found feature.

Format:  EXAMINE FSN

2 GT
Reports graphical type of found feature.

Format:  EXAMINE GT

2 HEIGHT
Reports height of found text feature (mm).

Format:  EXAMINE HEIGHT

2 LAYER
Reports layer of found feature.

Format:  EXAMINE LAYER

2 LENGTH
Reports the total length of the found feature.

Format:  EXAMINE LENGTH

2 LINE
Reports the length and direction of the segment of a linear feature.

Format:  EXAMINE LINE

2 LOCATION
Reports the text location field for text.

Format:  EXAMINE LOCATION

2 MAP
Reports the name of IFF file containing found feature.

Format:  EXAMINE MAP

2 PATTERN
Reports line pattern of found feature.

Format:  EXAMINE PATTERN

2 PC
Reports process code of found feature.

Format:  EXAMINE PC

2 POINT
Reports point number(s) for cursor position.

Format:  EXAMINE POINT

2 POSITION
Reports the X and Y coordinates of the current point in the feature.

The cursor must be on a point for this command.

Format:  EXAMINE POSITION

2 PSIZE
Reports text height in points.

Format:  EXAMINE PSIZE

2 SECONDARY
Reports secondary code for found feature (i.e. pattern index for lines,
symbol number for symbols, font number for texts, and fill index for
areas).

Format:  EXAMINE SECONDARY

2 SIZE
Reports size of found symbol (mm).

Format:  EXAMINE SIZE

2 STYLE
Reports typeface field for text.

Format:  EXAMINE STYLE

2 SUMMARY
Reports found feature map, layer, FSN, FC, GT (default).

Format:  EXAMINE SUMMARY

2 WIDTH
Reports line width of found feature (mm).

Format:  EXAMINE WIDTH

1 SHOW
Shows information requested.

Format:  SHOW  subcommand

Valid in all states

2 ABSOLUTE
Shows current cursor position in full projection units.

While SHOW POSITION gives the position in terms of the coordinates in
the IFF files being edited, SHOW ABSOLUTE gives the position taking into
account any origin offset specified in the IFF files.

If Z has been enabled and the cursor has no Z value, a "?" is displayed.

Format:  SHOW ABSOLUTE

2 ACD
Shows Ancillary Code Definition information.

If no argument, lists all the ACDs defined in the current FRT;
with argument,  lists details of the specified ACD.

The argument can either be a number (the AC type or attribute code) or
the corresponding name.

Format:  SHOW ACD [argument]

2 AFTER
Shows the commands that have been set up by the AFTER command.

Format:  SHOW AFTER

2 ANNOTATION
Shows the characteristics that will be used for annotating features 
when the DRAW LABEL command is given.

Format:  SHOW ANNOTATION

2 ATTRIBUTE
Shows the current attribute set, or the requested attribute set.
If no argument then the current attribute set is listed.

Format:  SHOW ATTRIBUTE  [integer]

2 BASES
Shows the bases that have been set up for squaring, edgematching
and orienting. 

Format:  SHOW BASES

2 COLOURS
Show the specified colours in the current overlay and display.
If no range of colour indices is given all the available colours
are listed. The colours may be listed using the RGB (default),
HLS, or HSV scheme.

This command is only available on versions with suitable hardware
facilities.

Format:  SHOW COLOURS [range] [scheme]

eg       SHOW COLOURS 1,3,5,7-11
or       SHOW COLOURS 1 HLS

2 COMMANDS
Shows the primary commands available in the current state.

Format:  SHOW COMMANDS

2 CP
Shows the control points currently set in the specified map. 

If no map is specified, the control points of all the maps are displayed.

The control points may be set using the EDIT CP command.

Note that the values given are the actual values in the IFF files.
The values given by the system variables $CPXxx and $CPYxx
are the values in the LITES2 coordinate space, and may contain an
appropriate offset if multiple maps have been read in.

Format:  SHOW CP [integer]

2 DISPLAYS
Shows details of displays for graphics output.

If a display number is specified, gives details of that display,
otherwise gives details of all displays.

Format:  SHOW DISPLAYS  [integer]

2 FCS
Shows details of Feature Codes.

If no argument, lists all the FCs defined in the current FRT;
with argument,  lists details of the specified FC.

Format:  SHOW FCS [integer]


2 FC_PRIORITIES
Shows details of priorities used when drawing with ENABLE SORT and
SORT PRIORITY.

If no argument, lists all the priorities defined in the current FRT,
along with all the feature codes that have been assigned priorities
and the representations to be used.

With an argument, lists details of the priorities and representations
for the specified FC.

Format:  SHOW FC_PRIORITIES [integer]

2 FILL
Shows details of fill patterns.

If an argument is specified, gives details of that area fill pattern;
otherwise gives details of all area fill patterns in the current FRT.

Format:  SHOW FILL  [integer]

2 GEOGRAPHICAL
Shows the latitude and longitude of the current cursor position.

This command is only valid if at least one  map read in has valid type 2
map descriptor, specifying a valid projection.

Geographical conversions make use of a shared image pointed at by the
logical name LSL$LITES2_GEOG_ROUTINES. This image is supplied by
Laser-Scan. It is called LSL$EXE:LITES2GEOGSHR.EXE. 

Format:  SHOW GEOGRAPHICAL

2 GEOMETRIES
Shows information about geometry definitions.

If a geometry is specified, gives information about that geometry
If no geometry is specified, gives information about all the defined
geometries. 

Format:  SHOW GEOMETRIES  [integer]

2 GROUPS
Shows information about feature code groups.

If no group is specified, a list of the groups available is given. 
If a group is specified, a list of feature codes in the group is given.

Format:  SHOW GROUPS  [text]

2 IMAGES
Shows details of raster images.
If an image number is specified, gives details of that image,
otherwise gives details of all images.

Format:  SHOW IMAGES  [integer]

2 INTERPOLATION
Shows drawing & construction interpolation method.

Format:  SHOW INTERPOLATION

2 LABELS
Shows the attributes that will be used for annotating features 
when the DRAW LABEL command is given.

Format:  SHOW LABELS

2 LAYERS
Shows all layers in use, with maximum FSNs.

Format:  SHOW LAYERS

2 LIGHTS
Shows the current settings of each light in each view. 

(See command VIEW LIGHT). If the optional light number is not given, all
the light sources are listed for the specified view. If the optional
view number is not given all the light sources in all possible views are
listed.

::: means that this value has not yet been set.

Format:  SHOW LIGHTS [view [light]]

2 LIMITS
Shows the coordinates of the limits of the LITES2 working area. 
This is the total range of the maps that were originally          
read in, plus 5% all round. Note that the range may have been          
altered by subsequent edits 

Format:  SHOW LIMITS

2 MACROS
Shows information about macro definitions.

If no macro is specified, a list of the macros defined is given. If a
macro is specified, the macro text expansion is given.

Format:  SHOW MACROS  [text]

2 MAPS
Shows all maps, and their IFF filenames.

Format:  SHOW MAPS

2 MATCH
Shows the match settings for TIEING, JOINING and EDGEMATCHING.

Format:  SHOW MATCH

2 MEMORY
Intended as a program development aid.
Shows statistics concerning use of dynamic memory, lock usage and
file usage.
If an (optional) integer argument in the range 1-3 is given, then 
an increasing amount of information will be given about the
various dynamic memory zones used by LITES2.

Format:  SHOW MEMORY [level]

2 MENUS
Shows information about menu definitions.

If no menu is specified, a list of the menus defined is given.
If a menu is specified, the text expansion for each box of that 
menu is given.
If a menu is specified with a box number, the text expansion for
that menu box is given.

Format:  SHOW MENUS  [text]

2 OPERATIONS
Shows information about operations which will set attributes.

Shows the attributes (and values) that have been set up by the OPERATION
command.  If no value is listed, then this attribute (or AC in the case 
of xxxx_FEATURE operations) then the attribute or AC will be deleted
when the relevant edit is completed.
If a number (in brackets) is listed instead of a name, it means that the 
attribute does not exist in the FRT.

Format:  SHOW OPERATION

2 OPTIONS
Shows options selected by ENABLE/DISABLE.

If the optional command FIRST is given, the first half of the table is
displayed; SECOND shows the second half of the table. If no
additional command is given the whole table is listed. 

Format:  SHOW OPTIONS [subcommand]

2 OVERLAYS
Shows details of display overlays.
If an overlay number is specified, gives details of that overlay,
otherwise gives details of all overlays.

Format:  SHOW OVERLAYS  [integer]

2 PATTERNS
Shows information about line pattern definitions.

If a pattern is specified, gives details of that pattern;
if no pattern is specified, gives details of all the patterned lines
in the current FRT.

Format:  SHOW PATTERNS  [integer]

2 PLOT
Shows details of the hardcopy plot settings.

Format:  SHOW PLOT

2 POSITION
Shows current cursor position (default).

If Z has been enabled and the cursor has no Z value, a "?" is displayed.

Format:  SHOW POSITION
or       SHOW

2 PRIVILEGE
Shows the commands, attributes and points that have been set privileged
by the PRIVILEGE command

Format:  SHOW PRIVILEGE

2 PROJECTION
Show the projection information about the specified map. If no map
number is specified, then information about the LITES2 coordinate space is
given.

Format:  SHOW PROJECTION [map]

2 REGIONS
Shows information about region definitions.

If a region is specified, shows the boundary of that region.
If no region is specified, shows the boundaries of all the defined
regions. 

Format:  SHOW REGIONS  [integer]

2 SCALES
Shows information concerning scales.

Format:  SHOW SCALES

2 SCROLL
Shows scroll area of terminal.

Format:  SHOW SCROLL

2 SECTORS
Shows number of sectors.

Format:  SHOW SECTORS

2 SELECTIONS
Shows details of current selections.

Format:  SHOW SELECTIONS

2 SETUP
Shows details of the table setup and transformations,
that will be used to setup any maps on the table (see SETUP and
PTOLERANCE OSSETUP commands), and if there are any maps already set up
on the table, then it also gives details of how these are set up. 

Format:  SHOW SETUP

2 SORT
Shows the current method of sorting for re-draws.

Format:  SHOW SORT

2 STATE
Shows current state.

Format:  SHOW STATE

2 TOLERANCES
Shows the TOLERANCES that have been set up using the TOLERANCE command

If the optional command FIRST is given, the first half of the table is
displayed; SECOND shows the second half of the table. If no
additional command is given the whole table is listed. 

Format:  SHOW TOLERANCES [subcommand]

2 TRANSFORMATION
Shows details of the transformation that has been set up.

Format:  SHOW TRANSFORMATION

2 VARIABLES
Shows information about command language variable definitions.

If no variable name is given, then all variable names are listed. If a
particular variable name is given, then its type and value are given.
If just $ is given, then all system variable names are listed.

Format:  SHOW VARIABLES  [name]

eg       SHOW VARIABLES         lists user variables
         SHOW VARIABLES $       lists system variables
         SHOW VARIABLES NAME    give type and value of variable NAME

2 VERSION
Shows version and date of linking of program.

Format:  SHOW VERSION

2 VIEWS
Shows the current visualisation settings for each 3D view. 
If the optional view number is not given, then the settings for all
views are given.

::: means that this value has not yet been set; numbers in brackets are
values that are not yet set, but default to the value of some other
item. 

Format:  SHOW VIEWS [view]

2 WARP
Shows details of transformation (warping) of raster images.

Format:  SHOW WARP

2 WINDOW
Shows the coordinates of the limits of the current window

Format:  SHOW WINDOW

2 ZOOM
Shows the current screen magnification factor.
This is the number of times that the current picture on the screen is
magnified from the full map on the screen. 

Format:  SHOW ZOOM

1 TIME
Display and manipulation of timing information.
For those subcommands which take an argument, it is used to set
or clear that timing field.

Format:  TIME  subcommand

eg       TIME ALL
or       TIME FIND 0

Valid in all states

2 ALL
All timing statistics are displayed or reset.

Format:  TIME ALL

2 DRAW
Draw time displayed or reset.

Format:  TIME DRAW  [integer]

2 FIND
Search time displayed or reset.

Format:  TIME FIND  [integer]

2 NOW
Current time and date are displayed (default).

Format:  TIME NOW

2 READ
Read-in time displayed or reset.

Format:  TIME READ [integer]

2 STATES
Time in each state displayed.

Format:  TIME STATES

2 SUMMARY
Display elapsed time, CPU time, and IO operations.

Format:  TIME SUMMARY

1 Procedure_Commands
The following LITES2 commands are used to carry out procedural operations

@file RESPOND CONTINUE MACRO ENDMACRO JUMP JTRUE JFALSE ELSE THEN ABORT
TEST OR AND CANCEL DECLARE LET INQUIRE HELP MESSAGE PING RASPBERRY WAIT
PROMPT PRIORITY OPERATION PRIVILEGE SAVE ASK FILE

1 @FILE
Executes a previously created file of LITES2 commands.
The default file specification is logical name LSL$LITES2CMD:
with file extension ".LCM". The filename may be followed by a series
of parameters, each delimited by one or more spaces or tabs, or enclosed
in double quotes. Within the command file, the values of these parameters
are available as system variables $P1, $P2 etc. The number of parameters
is available in $PCOUNT, and the whole line of parameters in $PLINE.

Format:  @filename [p1 p2...]

eg       @MOUSEPUCK
or       @TEXT_PROC 3.0 "Mulberry Close"

Valid in all states

1 MESSAGE
Outputs the given string to the terminal, or a blank line if none given.
Useful in command files to let the operator know what is going on.
If the text is to have leading spaces or tabs, then it must be enclosed
in double quotes.

Format:  MESSAGE  [text]

eg       MESSAGE Now identify feature to be edited

Valid in all states

1 WAIT
Pauses execution for the given time (up to 60 seconds).
Useful in command files to allow the operator time to think.
The wait may be terminated prematurely by CTRL/C.

Format:  WAIT  real

Valid in all states

1 FILE
Specifies an action on a user specified text file. 

Files may be opened for both reading and writing. Each text file opened
has an associated file-number which is used to reference the file for
selection and closing.  Up to three text files may be open at one time.

Format:  FILE subcommand

Valid in all states

2 APPEND
Specifies an existing text file, to which data is to be appended,
with the given file-number and file name. The file is
automatically selected. The default file specification is the
current directory, with file extension ".DAT". 

Format:  FILE APPEND file-number filename

eg       FILE APPEND 2 FRED
or       FILE APPEND 2 DUA1:[FRED.DEMO]TEST.DAT

2 CLOSE
The file with the given file number is closed.

Format:  FILE CLOSE file-number 

eg       FILE CLOSE 3 

2 CREATE
Specifies a text file to be created with the given file-number
and file name. The file is automatically selected. By default
files are created in the current directory with extension ".DAT".

Format:  FILE CREATE file-number filename

eg       FILE CREATE 1 FRED
or       FILE CREATE 1 DUA1:[FRED.DEMO]TEST.DAT


2 OPEN
Opens an existing file for reading, with the given file-number
and file name.  The file is automatically selected. The
default file specification is the current directory, with file
extension ".DAT". 

Format:  FILE OPEN file-number filename

eg       FILE OPEN 1 FRED
or       FILE OPEN 1 DUA1:[FRED.DEMO]TEST.DAT

2 READ
Reads the next record from the currently selected file 
into the system variable $FILELINE. If the end of the text file is
reached then the system variable $EOF is set to -1. Otherwise it is 0. 

Format:  FILE READ

2 SELECT
Specifies that the file with the given file-number is selected
for reading or writing. 

Format:  FILE SELECT file-number 

eg       FILE SELECT 1 

2 WRITE
Writes the given text string to the currently selected file. 
If no text string is supplied then  a blank line is written.  
If the text is to have leading spaces or tabs, then it must be 
enclosed in double quotes. This command may not be used on files 
opened for read access with FILE OPEN. 

Format:  FILE WRITE [text]

1 SAVE
Saves requested information in a file or macro.

Format:  SAVE subcommand

Valid in all states

2 COLOURS
Saves the colour lookup table from the specified LITES2 display 
as a LITES2 command file containing a series of OVERLAY COLOUR commands.
Missing parts of the filename are filled in from LSL$LITES2CMD:---.LCM
The intention is that the command file can be used to set up the same
colours in a later LITES2 session, in order to re-display a saved
picture (see also SAVE DISPLAY command). The overlay structure of the
display is not preserved - in order to use the command file, a single
overlay using all the planes of the display should be created. This
command is only available with some versions of LITES2.

Format:  SAVE COLOURS n filename

Not valid in INITIAL state

2 DISPLAY
Saves the screen picture from the specified LITES2 display in a DTI file.
Missing parts of the filename are filled in from LSL$DTI:---.DTI
The intention is that the DTI file can be drawn later by LITES2 or other
Laser-Scan utilities (see also SAVE COLOURS and SAVE LUT commands).
This command is only available with some versions of LITES2.

Format:  SAVE DISPLAY n filename

Not valid in INITIAL state

2 LUT
Saves the colour lookup table from the specified LITES2 display 
as a file suitable for use with other Laser-Scan programs (e.g. ROVER
in the TVES package).
Missing parts of the filename are filled in from LSL$LITES2CMD:---.COL
The intention is that the lookup table can be used to set up the same
colours in other Laser-Scan utilities, in order to re-display a saved
picture (see also SAVE DISPLAY command).
This command is only available with some versions of LITES2.

Format:  SAVE LUT n filename

Not valid in INITIAL state

2 MACRO
Writes the specified macro to a file.

Filename is "LSL$LITES2CMD:macroname.LCM".
On later runs of LITES2 this macro can be defined again by entering
@macroname

Format:  SAVE MACRO macroname

2 SECTORS
Writes sector information to file (Program development aid).

Format:  SAVE SECTORS

2 SELECTIONS
Create a macro with the given name containing LITES2 commands to restore
the selections to the state when the command was given. If selection-list
is given, it should be a list of one or more of MAPS, LAYERS, FCS, FSNS,
ALL, to specify which selections are to be saved. The default is ALL.
Only selections for these 4 items are saved.

Format:  SAVE SELECTIONS macroname [selection-list]

eg       SAVE SELECTIONS allsel
or       SAVE SELECTIONS codesel LAYERS FCS

1 REVIEW
Runs the last produced EDGEMATCH problem file as a command file.

Format:  REVIEW

Valid in state  READY

1 MACRO
Enter MACRO state to define a macro.
All commands will be stored rather than obeyed until ENDMACRO (qv).
The macro name may consist of up to 16 alphabetic characters (including
underline).

Format:  MACRO  name

eg       MACRO FRED

Valid in states  INITIAL READY

N.B. This command is not valid in MACRO state

1 ENDMACRO
End the definition of a macro started with a MACRO command (qv).
This is the only command obeyed, rather than stored, while in
MACRO state.

Format:  ENDMACRO

Valid in state  MACRO

1 RESPOND
Suspends a command file or macro and obtains command by interactive input
from device (terminal, table, or bitpad) until a CONTINUE command is given.

Format:  RESPOND

Valid in all states

1 CONTINUE
Continue execution of a command file or macro which has been suspended
with RESPOND (qv) after interactive input is complete.

Format:  CONTINUE

Valid in all states

1 PING
Sounds a bell at the terminal to attract the operator's attention.

Format:  PING

Valid in all states

1 RASPBERRY
Sounds a raspberry noise at the terminal.
Useful to signal errors.

Format:  RASPBERRY

Valid in all states

1 NULL
The null operation.  Nothing is done.

Format:  NULL

Valid in all states

1 PRIORITY
Set priority of puck buttons in different situations.

Format:  PRIORITY  subcommand

Valid in all states

2 POSITION
Instructs the specified puck buttons to do an implicit POSITION command
to move the LITES2 cursor to the device position before executing the
command on the button. This POSITION command will not be executed if the
previous command specifically positioned the LITES2 cursor (eg a FIND,
SEARCH, POINT or NEXT commands).

The default action is for table pucks to have PRIORITY POSITION commands
on all buttons (if they are pressed while in a map or tracking area), as
do buttons on a stereo digitising instrument. Bitpads and mice do not
have PRIORITY POSITION commands on their buttons by default.

The command cancels any previous priority settings for the puck, and if
the range is omitted, no buttons will execute an implicit POSITION
command.

Format:  PRIORITY POSITION  puckname [range]

eg       PRIORITY POSITION ALTEKPUCK 13-16


2 PUCK
Set priority for the buttons on a particular puck,
when pressed over a menu area.
The given buttons will obey their puck function even if pressed over a
menu area. The command cancels any previous priority settings for the
puck, and if the range is omitted, no buttons have priority.

Format:  PRIORITY PUCK  puckname [range]

eg       PRIORITY PUCK ALTEKPUCK 4,13-16

1 OPERATION
Defines operations that will produce automatic updating of ACs 
(ancillary codes) of features, attributes of points and parts of the map
header when features are edited.

When features are to be updated, the AC or attribute to be updated can
be specified by its name  or by the corresponding integer. This integer
is referred to as the  "type" when considering ACs, and the "code" when
considering point  attributes.

The format of the value depends on the data type of the specified
attribute code, either defined by Laser-Scan or defined by the user
in his FRT. 

See "Command Arguments" for more details of these data types.

More than one AC or attribute can be specified to be updated by each
operation. The currently set operations can be displayed with the SHOW 
OPERATION command.

If when defining an operation to update features, the AC or attribute to
be updated is specified without a value, then on completion of the
operation, that AC or attribute will be deleted from the feature or
point rather than the value being updated or inserted.

When elements of the map header are to be updated, the syntax is
different - see OPERATION OS_MH_FLAGS and OPERATION OS_MH_TEXTCAT below.

Operations can be cancelled with the CANCEL command (qv).

Format:  OPERATION  subcommand

Valid in states  INITIAL (after FRT has been read) READY

2 ADD_FEATURE
Mark added features by adding given attributes.

When a feature is constructed, it will have the ACs and values specified
by this OPERATION command, in addition to any specified in the current
set of construction attributes.  As the ACs in the construction
attributes are deleted whenever a new feature code is set, the use of
OPERATION ADD_FEATURE allows all features (whatever their feature code)
to have the ACs specified by this command. 

Format:  OPERATION ADD_FEATURE  type [value]

eg       OPERATION ADD_FEATURE  Secondary_FC 24

2 ANGLESQ_POINT
Mark squared features by adding given point attributes.

Points in features generated by the SQUARE ANGLE command will
inherit the attributes specified by this OPERATION command.

Format:  OPERATION ANGLESQ_POINT  type [value]

eg       OPERATION ANGLESQ_POINT  Z -999.9

2 BREAK_POINT
Mark broken features by adding given point attributes.

When points are inserted in features during a LITES2 edit, eg PART 
operations, CLIP commands or the BRIDGE command, then the point will
take the attributes specified by this OPERATION.

Format:  OPERATION BREAK_POINT  type [value]

eg       OPERATION BREAK_POINT  Z -999.9

2 CODE_CH_FEATURE
Mark code changed features by setting given attributes.

Any feature that has an AC of the type specified by this OPERATION
command, will have the value of that AC replaced by the specified value
whenever the feature undergoes an edit that alters its feature code,
feature serial number, AC or the attribute of a point. 
Note that this operation will not insert an AC in a feature.

Format:  OPERATION CODE_CH_FEATURE  type [value]

eg       OPERATION CODE_CH_FEATURE  Secondary_FC 24

2 CIRCLE_POINT
Mark generated circle features by adding given point attributes.

Any point that is generated with the CIRCLE, ARC, POLYGON or POLARC
commands will inherit the attributes specified by this OPERATION command
in addition to those attributes specified in the construction attribute
set at the point when END was entered to complete the feature. 

Format:  OPERATION CIRCLE_POINT  type [value]

eg       OPERATION CIRCLE_POINT  Z -999.9

2 CURVE_POINT
Mark generated curve features by adding given point attributes.

Any point that is generated with the CURVE command will inherit the
attributes specified by this OPERATION command in addition to those
attributes specified in the construction attribute set. 

Format:  OPERATION CURVE_POINT  type [value]

eg       OPERATION CURVE_POINT  Z -999.9

2 DIGITISE_POINT
Mark digitised points in features by adding given point attributes.

Any point that is digitised with the START or INSERT commands will
inherit the attributes specified by this OPERATION command in addition
to those attributes specified in the construction attribute set. 

Format:  OPERATION DIGITISE_POINT  type [value]

eg       OPERATION DIGITISE_POINT  Z 23.6

2 FAR_MOVE_POINT
Mark points that have been moved `far' during an editing operation.

The test for `far' is by more than a specified horizontal distance. This
distance criterion is set by the TOLERANCE FAR_MOVE command (qv). 

The attributes affected by this operation are set after any others
controlled by other (more specific) OPERATION commands. Thus, for
example, if the following OPERATIONS are set up:

     OPERATION MOVE_POINT     text  -9
     OPERATION FAR_MOVE_POINT text  -8

a point that is edited, and moved by less than TOLERANCE FAR_MOVE, will
have its `text' attribute set to -9, while one that is moved by more
than TOLERANCE FAR_MOVE will have its `text' attribute set to -8.

Format:  OPERATION FAR_MOVE_POINT  type [value]

eg       OPERATION FAR_MOVE_POINT  Z 

 
2 FILTER_POINT
Mark filtered points in features by adding given point attributes.

Points in features generated by the FILTER (FEATURE) command will
inherit the attributes specified by this OPERATION command. Note that the
attributes of the original points will not be transferred to the new
feature. 

Format:  OPERATION FILTER_POINT  type [value]

eg       OPERATION FILTER_POINT  Z -999.9

2 GEO_CH_FEATURE
Mark features with changed geometry by setting given attributes.

Any feature that has an AC of the type specified by this OPERATION
command, will have the value of that AC replaced by the specified value
whenever the feature undergoes an edit that alters its position or
geometry. 
Note that this operation will not insert an AC in a feature.

Format:  OPERATION GEO_CH_FEATURE  type [value]

eg       OPERATION GEO_CH_FEATURE  Secondary_FC 24

2 JOIN_POINT
Mark join points in features by adding given point attributes.

When two linear features are joined together, then the new point that 
replaces the two end points takes the attributes of the point from the 
first feature found. These attributes are updated by the attributes 
specified by this OPERATION command.
Note that the attributes of the corresponding point in the second 
feature are lost.

Format:  OPERATION JOIN_POINT  type [value]

eg       OPERATION JOIN_POINT  Z -999.9

2 MOVE_POINT
Mark moved points in features by adding given point attributes.

Points in features altered by the MOVE, TIE, EDIT, EXTEND or LOOP
commands will inherit the attributes specified by this OPERATION command;
if the point has this attribute already, then the value will be updated, 
otherwise the attribute will be added.

Format:  OPERATION MOVE_POINT  type [value]

eg       OPERATION MOVE_POINT  Z -999.9

2 OFFSET_POINT
Mark offset points in features by adding given point attributes.

Points in linear features generated by the OFFSET command will inherit
the attributes specified by this OPERATION command. Note that the
attributes of the original points will not be transferred to the new
feature. 
Note that when symbols and texts are offset the OPERATION
TRANSFORM_POINT is the operation that is effective. 

Format:  OPERATION OFFSET_POINT  type [value]

eg       OPERATION OFFSET_POINT  Z -999.9

2 OS_MH_FLAGS
Mark in the (OS) Map Header when certain classes of features are modified.

Set the specified flag in the (OS type) map header with the specified
character, when a feature with a feature code in the specified FRT group
has been edited, added or deleted.

This operation is rather different from all the others:

   1. It is specific to files with an OS type map header
   2. Only one FRT group and character can be specified for each flag
   3. The updating of the map header only takes place when the file
      is finally written out (after an EXIT or WRITE command), so if the
      operation is cancelled before this, the flag will not be changed.

Note that the present definition of the OS map header limits the number
of flags to 8, and insists that the character must be an upper case
letter or a digit.

The effect of this operation on texts can be further refined. See
OPERATION OS_MH_TEXTCAT for more details.

Format:  OPERATION OS_MH_FLAGS  flagno group char

eg       OPERATION OS_MH_FLAGS  8 WATER A

2 OS_MH_TEXTCAT
Mark in the (OS) Map Header when certain classes of text are modified.

Refine the effect of the OPERATION OS_MH_FLAGS command, by allowing
specific categories of texts to trigger the flag setting.

By default, if a text feature code is in a group specified by a
OPERATION OS_MH_FLAGS command, edits to any feature with that feature
code will cause the corresponding flag to be updated. When the command
OPERATION OS_MH_TEXTCAT has been given for a specific flag and text
feature code, only texts with the specified category will cause the flag
to be updated. The command may be repeated for any flag and feature
code, to allow several different text categories of text to be set.

Format:  OPERATION OS_MH_TEXTCAT  flagno fc category

eg       OPERATION OS_MH_TEXTCAT  8 28 2

2 OTHER_POINT
Mark edited points in features by adding given point attributes.

If a point has been edited, but the relevant OPERATION xxxx_POINT
command has not been given, then this OPERATION command takes effect. 

Format:  OPERATION OTHER_POINT  type [value]

eg       OPERATION OTHER_POINT  Z -999.9

2 PARTSQ_POINT
Mark points in part squared features by adding given point attributes.

Points in features generated by the SQUARE PART command will
inherit the attributes specified by this OPERATION command.

Format:  OPERATION PARTSQ_POINT  type [value]

eg       OPERATION PARTSQ_POINT  Z -999.9

2 SQUARE_POINT
Mark points in squared features by adding given point attributes.

Points in features generated by the SQUARE (WHOLE) command will
inherit the attributes specified by this OPERATION command.

Format:  OPERATION SQUARE_POINT  type [value]

eg       OPERATION SQUARE_POINT  Z -999.9

2 TRANSFORM_POINT
Mark transformed points in features by adding given point attributes.

Points in features altered by the TRANSFORM 
command will inherit the attributes specified by this OPERATION command;
if the point has this attribute already, then the value will be updated, 
otherwise the attribute will be added.
Note that texts and symbols manipulated by the ROTATE, LARGER,
SMALLER, OFFSET, OFFSET, ALIGN and STRETCH commands will also
inherit the attributes specified by the OPERATION TRANSFORM_POINT
command updated. 

Format:  OPERATION TRANSFORM_POINT  type [value]

eg       OPERATION TRANSFORM_POINT  Z -999.9

2 USER_FEATURE
Mark features generated by a user routine by setting given attributes.

Any feature generated by the USER (or ROUTINE) command that has an AC of
the type specified by this OPERATION command, will have the value of
that AC replaced by the specified value.
This would allow user routines to create features with an AC that
contains a date or a time that may otherwise be difficult to construct
in a user routine. The user routine would produce a feature with the
appropriate AC with a dummy value, whose correct value would be
inserted by this OPERATION. 

Note that this operation will not insert an AC in a feature. 

Format:  OPERATION USER_FEATURE  type [value]

eg       OPERATION USER_FEATURE  Secondary_FC 24

2 USER_POINT
Mark points in user routine features by adding given point attributes.

Points in features generated by the USER (or ROUTINE) command will
inherit the attributes specified by this OPERATION command; if the point
has this attribute already, then the value will be updated, otherwise
the attribute will be added. 

Format:  OPERATION USER_POINT  type [value]

eg       OPERATION USER_POINT  Z -999.9

1 PRIVILEGE
Restricts the availability of commands and attributes.

Defines commands that cannot subsequently be given, attributes that
may not be altered and points that are held fixed while squaring.

Format:  PRIVILEGE subcommand

Valid in state  INITIAL (privileged command;
                         only valid in initialisation file)

2 ATTRIBUTE
Defines point attributes and ACs that may not be edited 
during the current LITES2 session.

Note that this does not inhibit the editing of the position of a point
with the specified attributes, or of a feature with the specified AC.

It will not be possible to subsequently give an OPERATION command that
will alter privileged attributes, but any OPERATION command given
before the PRIVILEGE ATTRIBUTE command will be honoured.

The AC or attribute to be privileged can be specified by its name 
or by the corresponding integer. This integer is referred to as the 
"type" when considering ACs, and the "code" when considering point 
attributes.

Format:  PRIVILEGE ATTRIBUTE type

eg       PRIVILEGE ATTRIBUTE Z

2 COMMAND
Defines commands that may not subsequently be given 
during the current LITES2 session.

If a primary and secondary command are given, then only the specified
secondary command will be inhibited; if however only a primary command
is given then none of the secondary commands associated with the primary
command will be subsequently accepted in the current LITES2 session.

Format:  PRIVILEGE COMMAND primary [secondary]

eg       PRIVILEGE COMMAND TOLERANCE SQMT

2 POINT
Defines points that are to be held fixed during squaring operations 
(PART and WHOLE). Points cannot be held fixed during ANGLE squaring.

NOTE: this command is only effective if the FIXED option is switched
on with the ENABLE FIXED command (on by default). See the LITES2
reference manual for details of the squaring algorithm used.

Points with the given attribute and value will be held fixed during 
PART and WHOLE squaring of features.

The attribute to be tested can be specified by its name or by the
corresponding integer.

The format of the value depends on the data type of the specified
attribute code, either defined by Laser-Scan or defined by the user
in his FRT. 

See "Command Arguments" for more details of these data types.

Format:  PRIVILEGE POINT attribute value

eg       PRIVILEGE POINT CAPTURE_XY 6


1 PROJECTION
Controls the use of projection information in LITES2.

LITES2 has the ability to work on several IFF files which are in
different projections at the same time. It does this by specifying the
projection to display the files in, called LITES2 space, and
transforming the coordinates in the individual files to this space
before they are used by LITES2. It should be noted that the data files
remain in their original projection throughout the LITES2 session.

This facility depends on all the files being used having a valid
projection set up in their map descriptor and these projections  all
being referred to the same spheroid.  See the Documentation for the
program ITRANS for more information about map descriptors.

NOTE: When using this mode, and setting maps up to be digitised on a
digitising table, the paper maps should be in the same projection as the
LITES2 space.

Format:  PROJECTION subcommand

2 IFF
Specifies a template IFF file containing projection information.

To select the projection for the LITES2 coordinate space, a map
descriptor is required. This is supplied as the map descriptor in any
IFF file that is in the required projection. When an IFF file with a
valid map descriptor representing a valid projection is given with this
command, all subsequent files that are read in will be displayed in this
projection.

If the command is given with no file name, then LITES2 reverts to the
default action of assuming all the files are in the same projection.

Valid in state  INITIAL 

Format:  PROJECTION  IFF [filename]

eg       PROJECTION  IFF testcard

2 OUTPUT
Enables use of projection information during single named map output.

When working with "transformations on the fly", when individual maps are
output (with either the WRITE or EXIT commands with no filename) the
files are written back to their original coordinate system. If more than
one map is selected for output and WRITE or EXIT is given with a file
name, the maps are combined in LITES2 coordinate space, and the combined
map is output in this space. When only one map is selected and it is
output to a named file, whether it is output in its original projection
or in LITES2 coordinate space is controlled by the PROJECTION OUTPUT
command.

Valid in state  INITIAL READY

3 OFF 
Disables use of projection information during single named map output.

Selects the (default) mode where individual maps being output to a named
file are output in the coordinate system of the original map.

Format:  PROJECTION OUTPUT OFF

3 ON
Select the mode where individual maps being output to a named file are
transformed into LITES2 coordinate space while being output.

Format:  PROJECTION OUTPUT ON

2 RANGE 
Specifies method of calculating map range when projection is active.

When working with a LITES2 space that is different from that of the IFF
files that hold the data, it is necessary for LITES2 to work out the
range of the data in each file in LITES2 space. There are three possible
ways of calculating this range.

Unfortunately, it is not possible to know if the range has been
calculated correctly before the IFF data has been read, but if while
inputting the data LITES2 detects a possible problem an informational
message is output and the system variable $RANGE_PROBLEM is set to TRUE.

Valid in state  INITIAL READY

3 CORNER 
Use four corners to calculate map range when projection is active.

Transform the corners of the minimum bounding rectangle defined by the
Range entry in the IFF file, and take the minimum and maximum of the x
and y of these transformed points. This is fast, but may not give an
accurate (or indeed any) result for data that is being transformed into
a radically different size or shape.

Format:  PROJECTION RANGE CORNER

3 DATA
Use all data to calculate map range when projection is active.

Transform all the coordinate data in the file and calculate a new range
in LITES2 space. This provides the most accurate solution, with a 
genuine minimum range, but it may be time consuming if the data files
are large.

Format:  PROJECTION RANGE DATA

3 SIDE
Use side data to calculate map range when projection is active.

Transform a selection of points along the boundaries of the minimum
bounding rectangle as defined by the range entry, and use the
transformed points to calculate the range of the data in LITES2 space.
This method will give a correct result if enough points are selected
between the corners of the minimum bounding rectangle. If no number
is given, then the current specified number is used.

This is the default setting, with the number of intermediate points
along each edge being set to 20.

Format:  PROJECTION RANGE SIDE [number]

1 JUMP
Transfers control to the specified macro or label.

The jump target may be the start of a named macro (even the one
currently executing), or a label within the current macro. 

In the case of a jump to a macro, any remaining commands at the present
level (ie in the current command file) are lost, as are any remaining
commands on the current line, or in the current macro. The macro name may
be followed by a series of parameters, each delimited by one or more
spaces or tabs, or enclosed in double quotes. Within the macro, the
values of these parameters are available as system variables $P1, $P2
etc. The number of parameters is available in $PCOUNT, and the whole
line of parameters in $PLINE.

In the case of a jump to a label (which must include its leading "."),
the label must be found in the current line or macro. The case of
letters in the label is not significant.

Note that the command sequence THEN JUMP macro or ELSE JUMP macro has
the same effect as THEN macro or ELSE macro. The commands in the macro
will be executed, and then the remaining commands in the current line or
macro will be executed. The commands THEN JUMP .label or ELSE JUMP
.label will be unable to find the label. To achieve the desired effect
use the JTRUE or JFALSE commands.

Format:  JUMP macro [p1 p2...]
or       JUMP .label

Valid in all states

1 JTRUE
As JUMP (qv), but only transfers control if the condition flag is TRUE.
This flag is set by the TEST, OR and AND commands (qv).

Format:  JTRUE macro [p1 p2...]
or       JTRUE .label

eg       JTRUE FRED

Valid in all states

1 JFALSE
As JUMP (qv), but only transfers control if the condition flag is FALSE.
This flag is set by the TEST, OR and AND commands (qv).

Format:  JFALSE macro [p1 p2...]
or       JTRUE .label

eg       JFALSE FRED

Valid in all states

1 ELSE
Obeys the command only if the condition flag is FALSE.

The condition flag is set by the TEST, OR and AND commands (qv).

Note that, due to the nature of the command separator #, it is not
possible to put more than one command in this command line (the # would
be taken as the separator between the THEN command and the next
command), however the command line can consist of a macro or a
@filename directive.

Note also that this command should not be followed by a JUMP, JTRUE,
JFALSE, ABORT ALWAYS, ABORT TRUE, or ABORT FALSE command.

Format:  ELSE command

eg       TEST $FOUND      ! (is there a found feature)
         ELSE MESSAGE "No found feature"

Valid in all states

1 THEN
Obeys the command-line only if the condition flag is TRUE.

The condition flag is set by the TEST, OR and AND commands (qv).

Note that, due to the nature of the command separator #, it is not
possible to put more than one command in this command line (the # would
be taken as the separator between the THEN command and the next
command), however the command line can consist of a macro or a
@filename directive.

Note also that this command should not be followed by a JUMP, JTRUE,
JFALSE, ABORT ALWAYS, ABORT TRUE, or ABORT FALSE command.

Format:  THEN command-line

eg       TEST $LAYER>3 # AND $FC=4 ! layer above 3, and feature code 4
         THEN DELETE

Valid in all states

1 TEST
Sets the condition flag depending on the result of the test.
The condition flag is used by the JTRUE, JFALSE, THEN, and ELSE commands.
The variable may be any system or user-declared variable.
The inequality may be any of:     =     >    >=     <    <=    <>
               with synonyms:   .EQL. .GTR. .GEQ. .LSS. .LEQ. .NEQ.
                         and:                     .LT.
Inequality names may be abbreviated.
If the inequality is absent, but expression is present, then = is
assumed. 
If both inequality and expression are absent, then the variable is tested
as a logical. (See HELP VARIABLE LOGICAL)
For CHARACTER variables, the result of a comparison is determined
according to the ASCII collating sequence, assuming that the shorter
string is padded with spaces to the length of the longer. 
See also HELP EXPRESSION and HELP VARIABLE.

Format:  TEST variable [ [inequality] expression]

eg       TEST NAME=Fred      True if CHARACTER variable NAME is "Fred"
         TEST $FOUND         True if there is a found feature
         TEST R>3.14         True if REAL variable R is greater than 3.14

Valid in all states

1 OR
ORs the existing value of the condition flag with the result of the test.
If the condition flag is already TRUE, the test is not performed.
Syntax is exactly as for TEST (qv).

Format:  OR variable [ [inequality] expression]

Valid in all states

1 AND
ANDs the existing value of the condition flag with result of the test. 
If the condition flag is already FALSE, the test is not performed, so a
sequence such as TEST $FOUND # AND $FC=3 will not test $FC (which would
cause an error) if $FOUND was FALSE. 
Syntax is exactly as for TEST (qv).

Format:  AND variable [ [inequality] expression]

Valid in all states

1 CANCEL
Allows entities to be cancelled when no longer needed.

Applies to macros, regions, variables, RESPOND input and lists of
operations.

Format:  CANCEL  subcommand

Valid in states  INITIAL READY

2 ADD_FEATURE
Cancels list of ACs set up by the OPERATION ADD_FEATURE command.

Format:  CANCEL ADD_FEATURE

2 ANGLESQ_POINT
Cancels list of point attributes set up by OPERATION ANGLESQ_POINT 
command. 

Format:  CANCEL ANGLESQ_POINT

2 BREAK_POINT
Cancels list of point attributes set up by the OPERATION BREAK_POINT
command. 

Format:  CANCEL BREAK_POINT

2 CIRCLE_POINT
Cancels list of point attributes set up by OPERATION CIRCLE_POINT 
command. 

Format:  CANCEL CIRCLE_POINT

2 CODE_CH_FEATURE
Cancels list of ACs set up by the OPERATION CODE_CH_FEATURE
command. 

Format:  CANCEL CODE_CH_FEATURE

2 CURVE_POINT
Cancels list of point attributes set up by OPERATION CURVE_POINT
command. 

Format:  CANCEL CURVE_POINT

2 DIGITISE_POINT
Cancels list of point attributes set up by OPERATION DIGITISE_POINT 
command. 

Format:  CANCEL DIGITISE_POINT

2 FAR_MOVE_POINT
Cancels list of point attributes set up by OPERATION FAR_MOVE_POINT 
command. 

Format:  CANCEL FAR_MOVE_POINT

2 FILTER_POINT
Cancels list of point attributes set up by OPERATION FILTER_POINT 
command. 

Format:  CANCEL FILTER_POINT

2 GEO_CH_FEATURE
Cancels list of ACs set up by OPERATION GEO_CH_FEATURE command.

Format:  CANCEL GEO_CH_FEATURE

2 JOIN_POINT
Cancels list of point attributes set up by OPERATION JOIN_POINT
command. 

Format:  CANCEL JOIN_POINT

2 MACRO
Cancels the specified macro. The storage is freed and becomes available
for re-use.
A macro must be deleted using this command before it can be redefined.

Format:  CANCEL MACRO  name

eg       CANCEL MACRO FRED
or       CANCEL MACRO CMDMEN23 (for a menu box)

2 MOVE_POINT
Cancels list of point attributes set up by OPERATION MOVE_POINT
command. 

Format:  CANCEL MOVE_POINT

2 OFFSET_POINT
Cancels list of point attributes set up by OPERATION OFFSET_POINT
command. 

Format:  CANCEL OFFSET_POINT

2 OS_MH_FLAGS
Cancels the group of feature codes and the corresponding flag character
associated with the specified flag number by the OPERATION OS_MH_FLAGS
command.

Format:  CANCEL OS_MH_FLAGS flagno

2 OS_MH_TEXTCAT
Cancels all the text categories that are currently set to modify the
flag setting action of texts for the specified flag.

Format:  CANCEL OS_MH_TEXTCAT flagno

2 OTHER_POINT
Cancels list of point attributes set up by OPERATION OTHER_POINT
command. 

Format:  CANCEL OTHER_POINT

2 PARTSQ_POINT
Cancels list of point attributes set up by OPERATION PARTSQ_POINT
command. 

Format:  CANCEL PARTSQ_POINT

2 REGION
Cancels the specified region from the currently defined list of regions.
This frees the storage, and allows the region to be redefined.

Format:  CANCEL REGION  integer

eg       CANCEL REGION 3

2 RESPOND
Cancels a previous RESPOND command.

Returns input from second level interactive input (ie after a RESPOND
command has been given, and awaiting a CONTINUE command), to first level
interactive input. 

This command is a synonym for ABORT RESPOND.

Format:  CANCEL RESPOND

2 SQUARE_POINT
Cancels list of point attributes set up by OPERATION SQUARE_POINT
command. 

Format:  CANCEL SQUARE_POINT

2 TRANSFORM_POINT
Cancels list of point attributes set up by OPERATION TRANSFORM_POINT
command. 

Format:  CANCEL TRANSFORM_POINT

2 USER_FEATURE
Cancels list of point attributes set up by OPERATION USER_FEATURE 
command. 

Format:  CANCEL USER_FEATURE

2 USER_POINT
Cancels list of point attributes set up by OPERATION USER_POINT
command. 

Format:  CANCEL USER_POINT

2 VARIABLE
Cancels the specified command language variable. 
The storage is freed and becomes available for re-use. The variable may
be declared again if required, possibly with a different type. In the
case of an array variable, the whole array is cancelled - no subscript
may be given.

Format:  CANCEL VARIABLE  name

eg       CANCEL VARIABLE X

1 CLIP
Divides the current feature, where it cuts the specified region
boundary, to create one or more new features.

The original feature is deleted.

An error occurs if the feature does not cross the region boundary.

Format:  CLIP subcommand

Valid in state  LINE

2 CUTREGION
Divides the current feature along a region boundary, retaining both.

Division is into features that lie completely inside and completely
outside the specified region.

Format:  CLIP CUTREGION integer

eg       CLIP CUTREGION 4

2 INREGION
Divides the current feature along a region boundary, retaining inside.

The parts of the original feature that lie outside the region can be
recovered using the RECOVER or SEARCH DELETED commands.

Format:  CLIP INREGION integer

eg       CLIP INREGION 4

2 OUTREGION
Divides the current feature along a region boundary, retaining outside.

The parts of the original feature that lie inside the region can be
recovered using the RECOVER or SEARCH DELETED commands.

Format:  CLIP OUTREGION integer

eg       CLIP OUTREGION 4

1 DECLARE
Declare a command language variable for later use.

Declares a variable, which may be set by the LET or INQUIRE commands,
tested by the TEST, AND, and OR commands, or substituted into commands
by enclosing its name in single quotation marks. Variable names must
consist of up to 16 alphabetic characters (including underline). An array
variable may be declared by following the name by an integer in the
range 1 to 65535, thus the command DECLARE INTEGER I20 would allow the
use of integer variables I1, I2, ... , I20. Caution should be exercised
in declaring large arrays, as the computer memory may be insufficient.

Format:  DECLARE subcommand

Valid in all states

2 CHARACTER
Declare a character variable, or array of character variables, 
and initialise to null (zero characters). The variable may be used 
to contain a string of characters.

Format:  DECLARE CHARACTER  name[n]

eg       DECLARE CHARACTER NAME
or       DECLARE CHARACTER NAME3

2 DOUBLE
Declare a double precision real variable or array and initialise to 0.0.
The variable may contain real values with absolute value in the range
0.29E-38 to 1.7E38, with a precision of 15 decimal digits.

Format:  DECLARE DOUBLE  name[n]

eg       DECLARE DOUBLE D
or       DECLARE DOUBLE D20

2 INTEGER
Declare an integer variable or array and initialise to 0. 
The variable may contain integers in the range -2147483648 to 2147483647.

Format:  DECLARE INTEGER  name[n]

eg       DECLARE INTEGER I
or       DECLARE INTEGER I2048

2 REAL
Declare a real variable or array and initialise to 0.0. 

The variable may contain real values with absolute value in the range
0.29E-38 to 1.7E38, with a precision of 7 to 8 decimal digits.

Format:  DECLARE REAL  name[n]

eg       DECLARE REAL R
or       DECLARE REAL R24

1 LET
Allows the value of a variable to be set. 

The variable must have been declared using a DECLARE command (qv).
System variables may not be set.  See HELP EXPRESSION for further
information on expressions.

Format:  LET  variable [=] expression

eg       LET NAME=Building     Sets CHARACTER variable NAME to "Building"
         LET NAME              Sets CHARACTER variable NAME to the null
                               string
         LET I=3               Sets INTEGER variable I to 3
         LET I=(3+4)/2         Sets INTEGER variable I to 3
         LET R=(3+4)/2         Sets REAL variable R to 3.5
         LET RR23=3.14         Sets the 23rd element of REAL array RR
                               to 3.14

Valid in all states

1 INQUIRE
Obtains the value for a variable from the interactive controls
(keyboard, or pucks, or menus). INQUIRE is most useful in command files
or macros. 

The prompt string is displayed at the terminal. If prompt is omitted, a
default of "Enter TYPE VARIABLE: " is used. If the prompt is to have
leading spaces or tabs, then it must be enclosed in double quotes.

The string entered by the user may be any expression (see HELP
EXPRESSION) which would have been valid in a LET command for the
variable. It is quite possible to respond with a button press or menu
probe - the puck or menu macro name will be returned. The cursor may be
tracked before the response is entered.If a blank line is entered, a
character variable is set to the null string, while for other types the
user is reprompted for a valid answer. Pressing CTRL/Z will leave the
variable unchanged.

Format:  INQUIRE variable [prompt]

eg       INQUIRE NAME "What is your name? "

Valid in all states

1 ASK
A command that places information in associated system variables.

Commands that return integers, place the information in the variables
$ASK_INT n, those that return real values place them in the variables
$ASK_REAL n and those that return character (string) values place them
in $ASK_CHAR n.

Commands may return values in one or more of these variables.

For upwards compatibility, the integer variable $MAP_NUMBER is a synonym
for $ASK_INT 1 and the real variables $TABLEXY are synonyms for $ASK_REAL

Format:  ASK subcommand

Valid in all states (where appropriate)

2 CHARACTER
Returns ASCII code corresponding to a character.

This takes the argument as an ascii value, and returns the corresponding
character in the variable $ASK_CHAR 1. The length of $ASK_CHAR 1 is
itself returned in the variable $ASK_INT 1.

Format:  ASK CHARACTER n

eg       ASK CHARACTER 65
         SHOW VARIABLE $ASK_CHAR 1
         SHOW VARIABLE $ASK_INT  1

2 GEOMETRY
Returns information about geometries

Format:  ASK GEOMETRY subcommand

3 POINT
Returns the coordinate of a point that is guaranteed to lie on the
specified geometry in the variables $ASK_REAL 1 and $ASK_REAL 2.

For point type geometries this will be (one of) the point(s)
For line  type geometries this will be a point on a line (not a vertex)
For area  type geometries this will be a point that lies within the
bounding line work of the area.

Format:  ASK GEOMETRY POINT integer

2 HLS
Returns the Hue Lightness and Saturation of the specified colour 
in the current display and overlay in the variables $ASK_REAL 1,
$ASK_REAL 2 and $ASK_REAL 3. It also returns its attribute in the
system variable $ASK_CHAR 1, and the number of characters of this
string in the variable $ASK_INT 1. 

This command is only available on versions with suitable hardware
facilities.

Format:  ASK HLS n

2 HSV
Returns the Hue Saturation and Value of the specified colour 
in the current display and overlay in the variables $ASK_REAL 1,
$ASK_REAL 2 and $ASK_REAL 3. It also returns its attribute in the
system variable $ASK_CHAR 1, and the number of characters of this
string in the variable $ASK_INT 1. 

This command is only available on versions with suitable hardware
facilities.

Format:  ASK HSV n

2 IDENTIFIER
Inquires about rights identifiers, for privilege checks.

Returns TRUE (-1) in the variable $ASK_INT 1 if the user has the
specified identifier in his rights identifier list, and FALSE (0) if
not.  If the string does not represent a valid rights identifier or if
it does not exist as a rights identifier, then the command will moan,
and the variable will be unset. 

Format:  ASK IDENTIFIER string

eg       ASK IDENTIFIER INTERACTIVE
         SHOW VARIABLE $ASK_INT  1

2 LEGEND_SIZE
Inquire size of legend to be drawn.

This returns the size (length and height as a proportion of the
screen) that the legend would take up when drawn with a DRAW LEGEND
command on the current screen with the current annotation settings.
The length is returned in $ASK_REAL 1 and the height in $ASK_REAL 2.
The number of boxes in the menu is returned in $ASK_INT 1. 

Note that the height ($ASK_REAL 2) may be more than 1.0. In this case
a subsequent DRAW LEGEND command will fail. (The width may also be
greater than 1.0, but in this case the DRAW LEGEND command will not
fail, but will simply truncate the legend). 

This command is not available in INITIAL state.

Format:  ASK LEGEND_SIZE

2 MAP_NUMBER
Returns the map number for a map.

If the optional string argument is present then this command fills in
the system variable $ASK_INT 1 ($MAP_NUMBER) with the number of the
first map that contains the string in its name; if no string is
present then the variable will contain the number of the next map that
contains the string given in the last ASK MAP_NUMBER command that had
an argument. 

In either case, if the string is not found in any map name, the
variable will contain 0.

Format:  ASK MAP_NUMBER [string]

eg       ASK MAP_NUMBER .IFF
         SHOW VARIABLE $ASK_INT 1

                     1                        for example
         ASK MAP_NUMBER
         SHOW VARIABLE $ASK_INT 1

                     2                        for example
         ASK MAP_NUMBER
         SHOW VARIABLE $ASK_INT 1

                     0                        for example

2 POSITION
Inquire position in different coordinate space.

Converts a position between LITES2 coordinate space and the coordinate
space of any specified map. LITES2 space is the coordinate system that
the command POSITION and SHOW POSITION work with.
The result of the conversion is put in the system variables $ASK_REAL 1
and $ASK_REAL 2.

This command is not available in INITIAL state.

3 FROM_MAP
Converts position from coordinate space of particular map.

Converts between the point `x,y' in the coordinate space of the
specified map and the LITES2 coordinate space.

Format:  ASK POSITION FROM_MAP map x y

3 TO_MAP
Converts position to coordinate space of particular map.

Converts between the point `x,y' in LITES2 space and the coordinate
system of the specified map.

Format:  ASK POSITION TO_MAP map x y

2 RGB
Returns the Red Green and Blue values of the specified colour 
in the current display and overlay in the variables $ASK_REAL 1,
$ASK_REAL 2 and $ASK_REAL 3. It also returns its attribute in the
system variable $ASK_CHAR 1, and the number of characters of this
string in the variable $ASK_INT 1. 

This command is only available on versions with suitable hardware
facilities.

Format:  ASK RGB n

2 STATUS
Returns status information about the specified entity.

Format:  ASK STATUS subcommand

3 MACRO
Returns information about the specified macro, menu or puck.

In this context a subscripted puck or menu name is treated as a macro.
Also note that, as when using macro names in other contexts, the name
may be abbreviated until it becomes ambiguous.

If the name does not represent a macro, menu or puck 0 is returned in
$ASK_INT 1 and no other $ASK variables are set.

If the name represents a macro, then 1 is returned in $ASK_INT 1 and the
number of characters in the macro is returned in $ASK_INT 2 (this can be
used to test if a menu square or puck button can be redefined without
cancelling first); if the name represents a menu or a puck then 2 is
returned in $ASK_INT 1 and the number of boxes in the menu or buttons on
the puck is returned in $ASK_INT 2. In both these cases the full
(non-abbreviated) name is returned in $ASK_CHAR 1.

Format:  ASK STATUS MACRO name

3 VARIABLE
Returns information about the specified variable.

The type of the variable is returned in $ASK_INT 1 as follows:

     = 0 - variable does not exist
     = 1 - integer
     = 2 - real
     = 3 - character
     = 4 - double

If the variable exists and if it represents a variable array, then the
number of elements in the array is returned in $ASK_INT 2. Simple
variables return 0 in $ASK_INT 2.

Note that subscripts are not allowed in the variable name in this
command.

Format:  ASK STATUS VARIABLE name

2 STRING
Returns information and carries out lexical operations on the specified
string.

Where a string is returned in the variable $ASK_CHAR n, then the length
of this string is generally returned in the variable $ASK_INT n.

Format:  ASK STRING subcommand

3 ANNOTATION_SIZE
Returns the size (length and height in IFF units) of an annotation string.

The size is that which the string would take up when drawn with a DRAW
TITLE or DRAW TEXT command on the current screen with the current
annotation settings. The length is returned in $ASK_REAL 1 and the
height in $ASK_REAL 2. 

This command is not available in INITIAL state.

Format:  ASK STRING ANNOTATION_SIZE string

3 ASCII
Converts the first character in the specified string to an 8 bit ASCII
character and returns in in $ASK_INT 1

Format:  ASK STRING ASCII string

3 COLLAPSE
Removes all spaces and tabs from a string and returns the result
as a string in the variable $ASK_CHAR 1

Format:  ASK STRING COLLAPSE string

3 COMPRESS
Replaces all occurrences of multiple spaces and tabs by single spaces
and returns the resultant string in the variable $ASK_CHAR 1

Format:  ASK STRING COMPRESS string

3 DCLSYMBOL
Returns the value of the specified DCL symbol in the variable
$ASK_CHAR 1.
If the symbol does not exist, then a null string is returned.

Format:  ASK STRING DCLSYMBOL string

3 ELEMENT
Extracts a specified element from a delimited string.
The result is returned in the variable $ASK_CHAR 1. 

The delimiter must only be 1 character long

If the delimiter does not exist in the string, or there are less
elements in the string than the one specified, then the delimiter is
returned in $ASK_CHAR 1.

Note that the element is the substring after the specified delimiter,
thus the command :

      ASK STRING ELEMENT 2 /   MON/TUE/WED/THUR/FRI/SAT/SUN

will return the string "WED"  while the command :

      ASK STRING ELEMENT 2 /  /MON/TUE/WED/THUR/FRI/SAT/SUN

will return the string "TUE"
      
Format:  ASK STRING ELEMENT n delimiter string

3 EXTRACT
Extracts a substring, denoted by its start and end position, 
from a string and returns it in the variable $ASK_CHAR 1.

If the end position is less than the start position, the null string
is returned.

Format:  ASK STRING EXTRACT start_pos end_pos string

eg       ASK STRING EXTRACT 2 4 Freddy

will return the string "red"

3 FILE_FIND
Returns a character string containing the expanded file specification
for the file-spec argument in the variable $ASK_CHAR 1. If the
FIND_FILE function does not find the file in the directory, a null ("")
string is returned.

If the device or directory names are omitted from the input file-spec,
defaults are supplied from the current default disk and directory.
Defaults for a file name or type are not supplied and if the version
number is omitted, the specification for the file with the highest
version number is returned.

Wildcards can be used in the file-spec argument. In this case repeated
calls with the same input file-spec will return all the file
specifications that match the input. When all the files have been found,
a null ("") string is returned.


Format:  ASK STRING FILE_FIND filespec

eg       ASK STRING FILE_FIND lsl$com:lites2ini.com

may return the string "LSL$SITE_ROOT:[LSL.COM]LITES2INI.COM;23"

while repeated calls of the command

         ASK STRING FILE_FIND lsl$com:lites2ini.com;*   

may return the strings "LSL$SITE_ROOT:[LSL.COM]LITES2INI.COM;23"
                       "LSL$SITE_ROOT:[LSL.COM]LITES2INI.COM;22"
                       ""

3 INDEX
Returns the starting position of string2 in string1 in the variable
$ASK_INT 1.

If string1 does not contain string2, 0 is returned; if string2 occurs
more than once in string1, the position of the first occurrence is
returned.

Format:  ASK STRING INDEX string1 string2

3 ISALPHA
Tests if a given string is alphabetic.

Returns TRUE (-1), in the variable $ASK_INT 1, if all the characters in
the string are alphabetic  (ie if they all lie between 'A' and 'Z' or
between 'a' and 'z'), otherwise FALSE (0) is returned.

Format:  ASK STRING ISALPHA string

3 ISDATETIME
Tests if a given string is a valid date.

Returns TRUE (-1), in the variable $ASK_INT 1, if the string represents
a valid DEC VMS date/time string, otherwise FALSE (0) is returned.

If the string is a valid date, then the date part is returned in 
$ASK_CHAR 1 (and its length in $ASK_INT 2) and the time in $ASK_CHAR 2
(with its length in $ASK_INT 3)

Format:  ASK STRING ISDATETIME string

3 ISDIGIT
Tests if a given string is numeric.

Returns TRUE (-1), in the variable $ASK_INT 1, if all the characters in
the string are numeric (ie if they all lie between '0' and '9'),
otherwise FALSE (0) is returned.

Format:  ASK STRING ISDIGIT string

3 ISINTEGER
Tests if a given string is a valid integer number.

Returns TRUE (-1), in the variable $ASK_INT 1, if all the characters in
the string form a valid integer, otherwise FALSE (0) is returned.

Format:  ASK STRING ISINTEGER string

3 ISREAL
Tests if a given string is a valid real number.

Returns TRUE (-1), in the variable $ASK_INT 1, if all the characters in
the string form a valid real number, otherwise FALSE (0) is returned.

Format:  ASK STRING ISREAL string

3 LEFT
Extracts a substring, denoted by its end position, from a string 
and returns the result in the variable $ASK_CHAR 1.

If the end position is less than the start position, the null string
is returned.

Format:  ASK STRING LEFT end_position string

eg       ASK STRING LEFT 4 Freddy

will return the string "Fred"

3 LENGTH
Returns the length of the string in the variable $ASK_INT 1.

Format:  ASK STRING LENGTH string

3 LOWERCASE
Converts any upper case alphabetic characters in the string to lower
case, and returns the string in $ASK_CHAR 1.

Format:  ASK STRING LOWERCASE string

3 NO_DOLLAR
Converts any "$ escape" sequences as used in Laser-Scan's FRTLIB text
drawing routines (see the MAPPING package for details) in the string to
the corresponding 8 bit ASCII character, and returns the result in the
variable $ASK_CHAR 1.

Note that for this to work satisfactorily, the TRI must contain the
appropriate characters from the DEC multinational character set.

Format:  ASK STRING NO_DOLLAR string

3 PAD
Pad the given string to the specified length.

This is done by by adding the appropriate number of spaces, and 
returning the new string in the variable $ASK_CHAR 1. 

Note that to use this variable in subsequent LITES2 commands, it must
usually be surrounded by quotation marks ("), as trailing spaces are
generally stripped off LITES2 commands.

Format:  ASK STRING PAD length string

3 PARSE
Parse a file specification into component parts.

Parses the given file name and returns the specified field in the variable
$ASK_CHAR 1.

No punctuation is included in the fields (except for '.' in directories).
If the specified field does not exist, a null string is returned.

Valid fields are :

      NODE
      DEVICE		
      DIRECTORY
      NAME
      TYPE or EXTENSION
      VERSION

These may all be truncated until they become ambiguous.

Format:  ASK STRING PARSE filename field

3 RIGHT
Extracts a substring, denoted by its starting position, from a string
and returns the result in the variable $ASK_CHAR 1.

If the start position is greater than the length of the string, the null
string is returned.

Format:  ASK STRING RIGHT position string

eg       ASK STRING RIGHT 4 Freddy

will return the string "ddy"

3 TEXT_SIZE
Returns the size (length and height in IFF units) of an text string.

The size is that which the string would take up if constructed with a
TEXT command. The size depends on the values in the attribute set (as
set with the SET command). The length is returned in $ASK_REAL 1 and the
height in $ASK_REAL 2. 

This command is not available in INITIAL state.

Format:  ASK STRING TEXT_SIZE string

3 TRIM
Trims any trailing spaces and tabs off the end of the string, 
and returns it in the variable $ASK_CHAR 1.

Note that to enter the string in the command line in the first place, it
must be surrounded by quotation marks (").

Format:  ASK STRING TRIM string

3 TRNALL
Does a recursive translation on the string as a logical name.

It uses the logical name table LNM$FILE_DEV, and returns the result in
the variable $ASK_CHAR 1. 

If the logical name does not translate, or is not resolved by 10
translations, then the null string is returned.

Format:  ASK STRING TRNALL string

3 TRNLNM
Does a single translation on the string as a logical name.

It uses the logical name table LNM$FILE_DEV, and returns the result in
the variable $ASK_CHAR 1. 

If the logical name does not translate then the null string is returned.

Format:  ASK STRING TRNLNM string

3 UPCASE
Converts any lower case alphabetic characters in the string to upper
case, and returns the string in $ASK_CHAR 1.

Format:  ASK STRING UPCASE string

2 TABLE
Returns the position of the table cursor.

They are returned in the system variables $ASK_REAL 1 and $ASK_REAL 2.
It does this without the operator pressing any button on the puck. The
cursor must be lying within the area of a map or tracking area that has
been set up on the table, for the command to succeed. 

NOTE: This command is not available when the table is accessed through a
LSL MUART (ie ENABLE MONITOR must have been given). The table must also
be of a type that responds to requests from the host computer. In
particular, if using an ALTEK 90 controller, the "ENABLE HOST" switch
must be set to the on position.

When using non-ALTEK tables, it is possible to specify the string that
is used to inquire the position from the table, in the shared image that
is used to decode the table string. See the documentation on the TABLE
MONITOR for details of this decoding routine, or the example supplied
in LSL$PUBLIC_ROOT:[TABLE.EXE]EXAMPLE.FOR. This routine can be compiled
and linked using the command file DECODE.COM in the same directory.

Format   ASK TABLE

eg       SHOW VARIABLE $ASK_REAL 1
         SHOW VARIABLE $ASK_REAL 2

         ASK TABLE

         SHOW VARIABLE $ASK_REAL 1
         SHOW VARIABLE $ASK_REAL 2

1 ABORT
Causes the current input stream to be aborted. 

There are several levels of severity of ABORT.

Format:  ABORT  subcommand

Valid in all states

2 ALWAYS
Abort the current input line or macro (default).

This has the effect of ignoring the rest of the commands on the line or
in the macro. It is the equivalent of JUMP to an empty macro.

Note that this command should not be used as the argument to a THEN or
ELSE command.

Format:  ABORT ALWAYS
or       ABORT

2 FALSE
Abort the current input line or macro, if the condition flag is FALSE.
This has the effect of ignoring the rest of the commands on the line or
in the macro. It is the equivalent of JFALSE to an empty macro.

Note that this command should not be used as the argument to a THEN or
ELSE command.

Format:  ABORT FALSE

2 FILE
Abort all outstanding file input.

This includes the current input line or macro and all the rest of the
lines in the current command file. 

Format:  ABORT FILE

2 INPUT
Aborts all current command input and returns to first level interactive
input. This means that all commands on command lines or macros are
ignored as are all unread lines in any command files. These command
files are closed. The effect of any RESPOND command is cancelled.

This command is the equivalent to entering CTRL/C while reading
commands. After this command has aborted all current input, any command
line specified by the AFTER ABORT command is executed.

Format:  ABORT INPUT

2 RESPOND
Cancels a previous RESPOND command.

Returns input from second level interactive input (ie after a RESPOND
command has been given, and awaiting a CONTINUE command), to first level
interactive input. 

Format:  ABORT RESPOND

2 TRUE
Abort the current input line or macro, if the condition flag is TRUE.
This has the effect of ignoring the rest of the commands on the line or
in the macro. It is the equivalent of JTRUE to an empty macro.

Note that this command should not be used as the argument to a THEN or
ELSE command.

Format:  ABORT TRUE

1 PROMPT
Allows control of the interactive command prompt.

Format:  PROMPT subcommand

Valid in all states

2 OFF
Disable all prompting.

Format:  PROMPT OFF

2 ON
Enable prompting using last specified prompt type.
If no prompt has been specified then default is prompt with '*'.

Format:  PROMPT ON

2 STATES
Enable prompting using current command state as prompt.

Format:  PROMPT STATES

2 TEXT
Set prompt string to given text.
If the text is to have leading spaces or tabs, then it must be enclosed
in double quotes.

Format:  PROMPT TEXT textstring

eg       PROMPT TEXT Yes, Oh Master ?

1 Session_Commands
The following LITES2 commands are used to control a session

DUMP EXIT QUIT WRITE 

1 QUIT
Finishes session and discards all editing, or discards a particular map.
Deletes the .WRK workspace file(s).

If used without an integer argument, then all maps are discarded.
If DISABLE EXIT (qv) was used, LITES2 will return to INITIAL state in
preparation for reading in different map(s). If already in INITIAL state,
the session is always ended.

Used with the optional integer (a map number), only that map is discarded,
and LITES2 remains in the same state.

Format:  QUIT  [integer] (full command required)

Valid in states  INITIAL READY

1 DUMP
Finishes session and saves workspace IFF file(s).

Renames .WRK workspace file as .DMP. if no filename given.
Useful if just stopping for lunch and intend to resume LITES2 after:
the session may be resumed with e.g. IFF LSL$LITES2WORK:name.DMP
If DISABLE EXIT (qv) was used, LITES2 will return to INITIAL state in
preparation for reading in different map(s).

Format:  DUMP  [filename]  (full command required)

Valid in state  READY

1 EXIT
Finishes editor session and creates new version of IFF file(s).

If SELECT OUTPUT has been given, then only the selected features
are output.
A filename for the output may be specified. If a filename is specified
and more than one map has been selected for output, the selected files
will be merged together to form one file. This merged file will have
a valid type 2 map descriptor, having the scale of the first map that
it contains. Its map header will be blank.

This is the normal exit route from the editor at end of session.
If DISABLE EXIT (qv) was used, LITES2 will return to INITIAL state in
preparation for reading in different map(s).

Format:  EXIT  [filename]  (full command required)

Valid in state  READY

1 WRITE
Creates new version of IFF file(s) from the current workspace file(s)
as for EXIT. The editing session is not terminated.
May be used to output the current state of editing, or to create subsets
of a file using SELECT OUTPUT.
A filename for the output may be specified. If a filename is specified
and more than one map has been selected for output, the selected files
will be merged together to form one file. This merged file will have
a valid type 2 map descriptor, having the scale of the first map that
it contains. Its map header will be blank.

WRITE may be used to produce new versions of READONLY or INSITU files,
possibly with selections, whereas EXIT has no effect on these.

Format:  WRITE  [filename]  (full command required)

Valid in state  READY

1 SPAWN
Creates a sub-process to execute a DCL command (which may be an @file
command). An appropriate licence is required to use this command.
Unless the /NOWAIT qualifier is given, LITES2 will wait for the subprocess
to complete before continuing. If /NOWAIT is used, then the command executed
by the subprocess should not normally read from or write to the terminal,
since this is likely to result in confusion.

Format:  SPAWN [/NOWAIT] command

eg       SPAWN DIRECTORY LSL$IF:
or       SPAWN/NOWAIT UILMENUS EXAMPLE

Valid in all states

1 Environment
The following LITES2 environment entities as well as commands have help
available

Variables	System variables	Expressions	States	
Functions	Commands

1 Variables
LITES2 variables are used in command files and macros.
They are named entities which may be used to hold a character
or numerical value. Variables may be one of four types:

CHARACTER: Contains a string of characters
INTEGER:   Contains an integer value in the range -2147483648 to
           2147483647.
REAL:      Contains a real value value in the range +/- 0.29E-38 to
           1.7E38 with a precision of 7 to 8 decimal digits. Real
           variables are displayed with 8 significant figures (with
           trailing zeros suppressed) but the eighth figure may not be
           completely accurate.
DOUBLE:    Contains a real value value in the range +/- 0.29E-38 to
           1.7E38 with a precision of 15 decimal digits.

System variables have names which begin with the character $. These
contain values such as the current cursor position, or the current
point on the found feature, and may not be set by the user. Some system
variables have a compulsory argument (or subscript), e.g. $CUTREGION 2. 

User variables must be declared using the DECLARE command before use.
They can then be given values using the LET and INQUIRE commands. 
It is possible to declare array variables by following the name by the
number of elements required. 

By default the maximum number of user variables that may be declared
is 200. This maximum may be altered by setting the logical name
LSL$LITES2_VARIABLEMAX to the required value before LITES2 is started.

The current value of variables can be displayed using the SHOW VARIABLES
command, and can be tested using the TEST, AND, and OR commands.

The value of a variable may be substituted into a command by enclosing
its name in single quotation marks (provided that ENABLE SUBSTITUTION is
set). The trailing quotation mark may usually be omitted, as the variable
name is taken to end at the first character which is not alphabetic or an
underline. The trailing quote therefore must be present if two variables
are to be substituted without any intervening spaces. If present, the
trailing quote must immediately follow the variable name.

E.g. The command:  SEARCH FSN 'NUMBER'
will search for serial number 3 if NUMBER is an INTEGER variable
with value 3.

In the case of array variables, another integer variable may be used as
the subscript, thus if FSNS was an integer array containing a list of
feature serial numbers, and I was an integer variable containing the
required subscript, then the command:  SEARCH FSN 'FSNS'I'' could be
used. Both the trailing quotes are optional. A particular subscript
may of course be used explicitly, as in  SEARCH FSN 'FSNS4'.

Variables are never substituted while a macro is being defined. The
presence of ' in any line in a macro will prevent the line being checked
for syntax as the macro is defined, since the value of the variable is
unknown at this stage.

2 Logical
Variables may be tested as logicals in a TEST, AND, or OR command.  
If the variable name is specified with no inequality or expression, 
then the logical result of the test is as follows:

INTEGER variable   True if low bit is set (value is odd)
REAL variable      True if not equal to 0.0
DOUBLE variable    True if not equal to 0.0
CHARACTER variable True if low bit of first character is set

In particular, this means that for INTEGER variables, 0 is false and -1
is true. These values are used for system variables which take a logical
value. For CHARACTER variables, strings beginning with "Y" or "y" are
true, while strings beginning with "N" or "n" are false. The null string
is false. 

2 System
System variables allow access to LITES2 environment information.

All system variables have names beginning with the character $. 
The available system variables can be displayed using the command 
"SHOW VARIABLES $". An error results if an attempt is made to use a 
system variable which is undefined e.g. $FSN when there is no found 
feature.

3 $ABSX
DOUBLE    Contains absolute X value of cursor position (IFF units). It
          is equivalent to $CURSX + $MDOFFSET1
3 $ABSY
DOUBLE    Contains absolute Y value of cursor position (IFF units). It
          is equivalent to $CURSY + $MDOFFSET2

3 $ACCVALUE
CHARACTER Contains the value (as 4 characters) of the current AC of
          the feature.

Only available in AC state, with a found object.

3 $ACDATATYPE
INTEGER   Contains the data type of the current AC of
          the feature. The data type is an integer in
          the range 1 - 5.

          1 means interpret the value as an integer
          2 means interpret the value as a real number
          3 means interpret the value as 4 characters
          4 means interpret the value as a date
          5 means interpret the value as a time

Only available in AC state, with a found object.

3 $ACIVALUE
INTEGER   Contains the value (as an integer) of the current AC of
          the feature.

Only available in AC state, with a found object.

3 $ACNAME
CHARACTER Contains the name allocated to the type of the current AC
          (in either the LSL supplied list of types, or in the
          current FRT)

Only available in AC state, with a found object.

3 $ACPRESENT
INTEGER   -1 if the found feature has any ACs, TCs or CHs, else 0

3 $ACRVALUE
REAL      Contains the value (as a real) of the current AC of
          the feature.

Only available in AC state, with a found object.

3 $ACSVALUE
CHARACTER Contains the value (as character string) of the current AC
          of the feature. This string is encoded using an
          appropriate format, depending on the data type.

Only available in AC state, with a found object.

3 $ACTEXT
CHARACTER Contains the text of the current AC (or TC or CH) 
          of the feature.

Only available in AC state, with a found object.

3 $ACTEXTLEN
INTEGER   Contains the length of the text of the current AC
          (or TC or CH) of the feature. 

Only available in AC state, with a found object.

3 $ACTOTAL
INTEGER   Contains the total number of ACs, TCs and CHs associated
          with the feature. 

Only available in AC state, with a found object.

3 $ACTYPE
INTEGER   Contains the type of the current AC of the feature.
          Note: TCs are considered to be ACs with a type of -1,
          and CHs are considered to be ACs with a type of -2.

Only available in AC state, with a found object.

3 $ANGLE
REAL      Contains the angle (anti-clockwise from horizontal) in degrees
          of the current feature. For linear features this is the angle
          of the current vector.  This variable is not available for
          circle arcs.

3 $ANNOTATION_JOURNAL_NAME
CHARACTER Contains the name of the current annotation journal macro.

3 $ANNOTATION_JOURNAL_STATUS
INTEGER   Contains the status of annotation journalling. 0 closed,
          -1 off, 1 on.

3 $AREA
DOUBLE    Contains the area enclosed by the current feature,
          in square IFF units. For features that are not closed, the 
          first point is considered to be joined to the last, by a 
          straight line.
          For texts and symbols the area of the bounding box is given.

          A positive area indicates that the feature has been digitised
          in a clockwise direction, negative areas indicate counter
          clockwise digitising.
          Degenerate features (with two or less vertices) give an area
          of 0.0

3 $ASK_CHAR n
CHARACTER Contains character value(s) from the last successful
          invocation of an ASK command that returned character values.

Must be followed by an integer in the valid range; this range is
determined by which ASK command has been called.

3 $ASK_INT n
INTEGER   Contains integer value(s) from the last successful invocation
          of an ASK command that returned integer values.

Must be followed by an integer in the valid range; this range is
determined by which ASK command has been called.

3 $ASK_REAL n
REAL      Contains real value(s) from the last successful invocation of
          an ASK command that returned real values.

Must be followed by an integer in the valid range; this range is
determined by which ASK command has been called.

3 $ATTCODE n
INTEGER   Contains the code of the specified attribute of the point,
          as an integer.

Only available when in line, symbol or text state and on a point.
Must be followed by an integer in the range 1 - $ATTTOTAL

3 $ATTCVALUE n
CHARACTER Contains the value of the specified attribute of the point,
          as 4 characters.

Only available when in line, symbol or text state and on a point.
Must be followed by an integer in the range 1 - $ATTTOTAL

3 $ATTDATATYPE n
INTEGER   Contains the data type of the specified attribute
          of the point. The data type is an integer in
          the range 1 - 5.

          1 means interpret the value as an integer
          2 means interpret the value as a real number
          3 means interpret the value as 4 characters
          4 means interpret the value as a date
          5 means interpret the value as a time

Only available when in line, symbol or text state and on a point.
Must be followed by an integer in the range 1 - $ATTTOTAL

3 $ATTIVALUE n
INTEGER   Contains the value of the specified attribute of the point,
          as an integer.

Only available when in line, symbol or text state and on a point.
Must be followed by an integer in the range 1 - $ATTTOTAL

3 $ATTNAME n
CHARACTER Contains the name allocated to the type of the attribute 
          specified for the point (in either the LSL supplied list of
          types, or in the current FRT)

Only available when in line, symbol or text state and on a point.
Must be followed by an integer in the range 1 - $ATTTOTAL

3 $ATTRVALUE n
REAL      Contains the value of the specified attribute of the point,
          as a real.

Only available when in line, symbol or text state and on a point.
Must be followed by an integer in the range 1 - $ATTTOTAL

3 $ATTSVALUE n
CHARACTER Contains the value of the specified attribute of the point,
          as a character string. This string is encoded using an
          appropriate format, depending on the data type.

Only available when in line, symbol or text state and on a point.
Must be followed by an integer in the range 1 - $ATTTOTAL

3 $ATTTOTAL
INTEGER   Contains the total number of attributes associated
          with the point.

Only available when in line, symbol or text state and on a point.

3 $BEARING
REAL      Contains the bearing (clockwise from grid north) in degrees
          of the current feature. For linear features this is the angle
          of the current vector.  This variable is not available for
          circle arcs.

3 $BOX n
REAL      Contains the coordinates of the limits of the bounding box 
          for the current feature
          $BOX 1 is the minimum X coordinate  (IFF units)
          $BOX 2 is the maximum X coordinate  (IFF units)
          $BOX 3 is the minimum Y coordinate  (IFF units)
          $BOX 4 is the maximum Y coordinate  (IFF units)

Must be followed by an integer in the range 1 - 4

3 $BUTTON
INTEGER   Contains the button number of the last puck button used

3 $CATEGORY
INTEGER   Contains category field for text.

3 $CLOSED
INTEGER   -1 if the found feature is closed, else 0

3 $COEFFS n
REAL      Contains the current transformation parameters
          $COEFFS 1 is the rotation angle (in degrees)
          $COEFFS 2 is the scale factor
          $COEFFS 3 is the X coordinate of the rotation point (IFF units)
          $COEFFS 4 is the Y coordinate of the rotation point (IFF units)
          $COEFFS 5 is the translation in the X direction (IFF units)
          $COEFFS 6 is the translation in the Y direction (IFF units)

Must be followed by an integer in the range 1 - 6

3 $COLOUR
INTEGER   Contains the colour (from the FRT) of the current feature.

3 $CONSTRUCTION_FC
INTEGER   Contains feature code to be used when a feature is constructed

3 $CONSTRUCTION_GT
INTEGER   Contains the graphical type of the feature code to be used
when a feature is constructed

3 $CONSTRUCTION_LAYER
INTEGER   Contains the number of the layer for constructed features.

3 $CONSTRUCTION_MAP
INTEGER   Contains the number of the map that constructed features go in

3 $CPxzz
REAL      Contains coordinates of the control points for each map

where x is either X or Y and zz is one of NW, SW, SE or NE

          $CPXNW n is the X coordinate of the NW control point for map n
          $CPYNW n is the Y coordinate of the NW control point for map n
          $CPXSW n is the X coordinate of the SW control point for map n
          $CPYSW n is the Y coordinate of the SW control point for map n
          $CPXSE n is the X coordinate of the SE control point for map n
          $CPYSE n is the Y coordinate of the SE control point for map n
          $CPXNE n is the X coordinate of the NE control point for map n
          $CPYNE n is the Y coordinate of the NE control point for map n


Must be followed by an integer in the range 1 - 100, representing the map

          Note: the coordinates are in terms of the current LITES2
                space, and may contain an offset relative to the numbers
                in the IFF files if more than 1 map has been read in.

3 $CURSINGEOMETRY n
INTEGER   -1 if the cursor is inside the specified geometry, +1 if it
          is on the boundary, else 0

Must be followed by the number of a defined area type geometry.

3 $CURSINIMAGE
INTEGER   The number of the selected image in which the cursor lies, 
          or 0 if the cursor is not in a selected image.

3 $CURSINREGION n
INTEGER   -1 if the cursor is inside the specified region, +1 if it
          is on the boundary, else 0

Must be followed by the number of a defined region.

3 $CURSINWIN [r]
INTEGER   -1 if the cursor is in the current window, else 0

May be followed by a number in the range 0.0 -> 1.0, to indicate the
part of the window to be tested. For example, a value of 0.8 indicates
that a window (centred on the centre of the screen) with sides 0.8 that
of the screen will be tested 

3 $CURSX
REAL      Contains X value of cursor position (IFF units)

3 $CURSY
REAL      Contains Y value of cursor position (IFF units)

3 $CURSZ
REAL      Contains Z value of cursor position (IFF units)
          Note the cursor may not have a Z value. The variable $CURSZ_EXIST
          tells if this variable is valid

3 $CURSZ_EXIST
INTEGER   -1 if the variable $CURSZ contains valid data, else 0

3 $CUTGEOMETRY n
INTEGER   -1 if the found feature cuts the specified area geometry,
          else 0

Must be followed by a valid area type geometry number.

3 $CUTREGION n
INTEGER   -1 if the found feature cuts the boundary of given REGION,
          else 0

Must be followed by a valid region number.

3 $DATETIME
CHARACTER Contains the current date and time, in VMS format

3 $DISPLAY
INTEGER   -1 if there is a graphics display in use on the LITES2
          workstation, else 0

3 $DISPLAYCOLUMNS
INTEGER   Contains the number of pixels across the current display,
          which has been selected with the DISPLAY NUMBER command. 
          (Only available on certain hardware).

3 $DISPLAYNUMBER
INTEGER   Contains the current display number, ie the display selected
          by the DISPLAY NUMBER command.

3 $DISPLAYROWS
INTEGER   Contains the number of pixels up and down the display 
          that has been selected with the DISPLAY NUMBER command. 
          (Only available on certain hardware).

3 $DISTANCE
REAL      Contains the distance from the start of the feature
          to the current cursor position, measured along the feature,
          in IFF units.

3 $ELAPSEDSEC
REAL      Synonym for $SYSELAPSED

3 $END
INTEGER   -1 if at first or last point of found feature, else 0

3 $EOF
INTEGER   -1 if an end of file has been read by the FILE READ command, 
          else 0

3 $EXIT_RANGE n
DOUBLE    Contains the range (in absolute coordinates) of the last map
          that was output.

Must be followed by an integer in the range 1 - 4

          $EXIT_RANGE 1 is the minimum X coordinate  (IFF units)
          $EXIT_RANGE 2 is the maximum X coordinate  (IFF units)
          $EXIT_RANGE 3 is the minimum Y coordinate  (IFF units)
          $EXIT_RANGE 4 is the maximum Y coordinate  (IFF units)

3 $FC
INTEGER   Contains the feature code of the found feature

3 $FILELINE
CHARACTER  Contains the text string read with the latest FILE READ 
           command.

3 $FILENAME n
CHARACTER  Contains the name of the specified file.
           Fails if the specified file is not open.

Must be followed by an valid file number.

3 $FILESELECTED
INTEGER    Contains the number of the file selected by the most recent
           FILE command that selects files. If no file is selected,
           then 0 is returned.

3 $FILESTATUS n
INTEGER    Contains the status of the specified file

           = 0  - file closed
           = 1  - file opened for read
           = 2  - file opened for write
           = 3  - file opened for append

Must be followed by an valid file number.


3 $FINDTOL
REAL      Contains the current find radius.  
          If the find radius is currently fixed, then the value 
          represents IFF units, and can be reset at any time by 
          the commands
                 UNITS IFF
                 TOLERANCE FIND 'xxxx
          (where xxxx is a user variable that has been assigned the value
          in $FINDTOL)

          If the find radius is currently being zoomed, then the value
          represents screen mm, and it can be reset at any time by the
          command
                 TOLERANCE FIND 'xxxx

3 $FIND_COUNT
INTEGER   After a FIND command, contains the number of found features
          which repeated use of FIND (without moving the cursor) will
          cycle round. 0 if the use of FIND would find new features.
          See also $FIND_ITEM.

3 $FIND_ITEM
INTEGER   After a FIND command, contains the position of the found
          feature in the list of nearby features which repeated use
          of FIND (without moving the cursor) would cycle round.
          It will be 1 after an initial FIND, and range up to
          $FIND_COUNT for subsequent FINDs.

3 $FIRST
INTEGER   -1 if at first point of the found feature, else 0

3 $FIXEDFIND
INTEGER   -1 if the find radius is currently fixed, and is not altered
          when the picture is zoomed, else 0

3 $FLY_TRANSFORMATION
INTEGER   -1 if displaying on a different projection from the data,
          else 0

3 $FOUND
INTEGER   -1 if there is a found feature, else 0

3 $FRT
CHARACTER  Contains the name of the FRT file currently in use.

3 $FRTFGT n
INTEGER   Contains the first feature code from the FRT with the
          specified graphical type, or -1 if there are no feature
          codes of the given type.

3 $FSN
INTEGER   Contains the feature serial number of the found feature
          Note that $FSN is not necessarily unique. The only way of
          uniquely identifying a feature is to save $IFFADDR (and
          $MAP if there is more than one map)

3 $GEOG_STRING
CHARACTER Contains the latitude and longitude of the current cursor
          position, in degrees, minutes and seconds.

          This variable only exists if all maps have valid version 2
          map descriptors.

3 $GEOMETRY n
INTEGER   -1 if the specified geometry exists, else 0

Must be followed by a valid geometry number.

3 $GEOMETRY_PARTS n
INTEGER   Contains the number of parts that a geometry consists of.

Must be followed by a valid geometry number.

3 $GEOMETRY_TYPE n
INTEGER   Contains the type of the specified geometry

          0 - point type geometry
          1 - line  type geometry
          2 - area  type geometry

Must be followed by a valid geometry number.

3 $GROUP
CHARACTER Contains a list of the group names, separated by commas, that
the found feature is in.

3 $GROUP_FC
CHARACTER Contains a list of the group names, separated by commas, that
the specified feature code is in. If the feature code does not exist
in the FRT, an error occurs

Must be followed by an integer.

3 $GT
INTEGER   Contains the graphical type of the found feature

3 $GT_FC
INTEGER   Contains the graphical type of the specified feature code. If
the feature code does not exist in the FRT, 0 is returned.

Must be followed by an integer.

3 $HADSELECT
INTEGER   -1 if there is any selection in force, else 0

3 $HADSELECT_AC
INTEGER   -1 if there is any selection by AC in force, else 0

3 $HADSELECT_CATEGORY
INTEGER   -1 if there is any selection by text category in force, else 0

3 $HADSELECT_FC
INTEGER   -1 if there is any selection by feature code in force, else 0

3 $HADSELECT_FLAG
INTEGER   -1 if there is any selection by edited, unedited or deleted
          in force, else 0

3 $HADSELECT_FSN
INTEGER   -1 if there is any selection by feature serial number in force,
          else 0

3 $HADSELECT_GEOMETRY
INTEGER   -1 if there is any selection by geometry in force, else 0

3 $HADSELECT_LAYER
INTEGER   -1 if there is any selection by layer in force, else 0

3 $HADSELECT_MAP
INTEGER   -1 if there is any selection by map in force, else 0

3 $HADSELECT_PRIORITY
INTEGER   -1 if there is any selection by feature code priority in force,
          else 0

3 $HADSELECT_REGION
INTEGER   -1 if there is any selection by region in force, else 0

3 $HADSELECT_STYLE
INTEGER   -1 if there is any selection by text style in force, else 0

3 $HEIGHT
REAL      Contains the height of found text feature (mm).

3 $HWTYPE
CHARACTER Contains the type of hardware this version of LITES2 runs on

3 $IFFADDR
INTEGER   Contains the address in the IFF file of the found feature.
          This provides a unique reference (within a map) of the feature.
          Note that $FSN is not necessarily unique.

3 $IFF_REVISION n
INTEGER   Contains the output revision level (0 or 1) of the specified
          input file.

Must be followed by a valid map number

3 $IMAGEASPECT
REAL      Contains the 'aspect' at the cursor position, 
          derived from an image file in the same way as $IMAGEVALUE. 
          The aspect is the direction of the normal to the surface, 
          or the direction of maximum 'downhill' gradient.
          It is measured in degrees clockwise from North.

3 $IMAGECOLUMNS n
INTEGER   Contains the number of columns in the specified image

Must be followed by an image number in the range 1 - 8

3 $IMAGEGRADIENT
REAL      Contains the gradient at the cursor position, 
          derived from an image file in the same way as $IMAGEVALUE. 
          The units are those obtained by dividing the numbers in the
          image file by the pixel size. If, for instance, both are in
          the same linear units, then the gradient may be converted to
          a slope by taking ATAN of it.

3 $IMAGENAME n
CHARACTER Contains the name of the specified image

Must be followed by an image number in the range 1 - 8

3 $IMAGEORIGINX n
DOUBLE    Contains the X value of the origin for the specified image

Must be followed by an image number in the range 1 - 8

3 $IMAGEORIGINY n
DOUBLE    Contains the Y value of the origin for the specified image

Must be followed by an image number in the range 1 - 8

3 $IMAGEPIXSX n
REAL      Contains the pixel size in X for the specified image

Must be followed by an image number in the range 1 - 8

3 $IMAGEPIXSY n
REAL      Contains the pixel size in Y for the specified image

Must be followed by an image number in the range 1 - 8

3 $IMAGEROWS n
INTEGER   Contains the number of rows in the specified image

Must be followed by an image number in the range 1 - 8

3 $IMAGEVALUE
INTEGER   Contains the value extracted from the image file pixel 
or REAL   in which the cursor currently lies. An error message is given 
          if the cursor does not lie within one of the images specified 
          in the most recent IMAGE SELECT command. In the event of several
          images overlapping, the highest numbered image will be used.
          The image from which the value is taken need not be currently
          visible on the screen.

3 $IMAGE_EXIST n
INTEGER   -1 if the specified image exists, else 0

Must be followed by a valid IMAGE number.

3 $IMAGE_RANGE_zzzz n
DOUBLE      Contains the range for each image (in absolute units)

where zzzz is one of XMIN, XMAX, YMIN, YMAX, ZMIN or ZMAX

          $IMAGE_RANGE_XMIN n is the minimum X coordinate in image n
          $IMAGE_RANGE_XMAX n is the maximum X coordinate in image n
          $IMAGE_RANGE_YMIN n is the minimum Y coordinate in image n
          $IMAGE_RANGE_YMAX n is the maximum Y coordinate in image n
          $IMAGE_RANGE_ZMIN n is the minimum Z coordinate in image n
          $IMAGE_RANGE_ZMAX n is the maximum Z coordinate in image n

Must be followed by a valid IMAGE number.

3 $IMAGE_SETUP
INTEGER   -1 if the vector data has been setup to align with the
          image(s), else 0

3 $INGEOMETRY n
INTEGER   -1 if the found feature is entirely inside specified area
          geometry, else 0

Must be followed by a valid area type geometry number.

3 $INREGION n
INTEGER   -1 if the found feature is entirely inside given REGION,
          else 0

Must be followed by a valid region number.

3 $INVISIBLE
INTEGER   -1 if the current vector of the found feature is INVISIBLE,
          else 0

The cursor must lie between vertices.

3 $LAST
INTEGER   -1 if at last point of the found feature, else 0

3 $LATITUDE
DOUBLE    Contains the latitude of the current cursor position,
          in decimal degrees.

          This variable only exists if all maps have valid version 2
          map descriptors.

3 $LAYER
INTEGER   Contains the layer number of the found feature

3 $LAYER_EXIST n
INTEGER   -1 if the specified layer exists, else 0

Must be followed by a valid layer number.

3 $LENGTH
REAL      Contains the total length of the found feature in IFF units.

3 $LIMITS n
REAL      Contains the limiting coordinates of the LITES2 working area.
          This is the total range of the maps that were originally
          read in, plus 5% all round. Note that the range may have been
          altered by subsequent edits

Must be followed by an integer in the range 1 - 4

          $LIMITS 1 is the minimum X coordinate  (IFF units)
          $LIMITS 2 is the maximum X coordinate  (IFF units)
          $LIMITS 3 is the minimum Y coordinate  (IFF units)
          $LIMITS 4 is the maximum Y coordinate  (IFF units)

3 $LINE
REAL      Contains the length of the current vector of the found feature,
          in IFF units. For non-linear features (texts, symbols and
          circle arcs) this variable is identical to $LENGTH.

3 $LOCATION
INTEGER   Contains text location field for text.

3 $LONGITUDE
DOUBLE    Contains the longitude of the current cursor position 
          in decimal degrees.

          This variable only exists if all maps have valid version 2
          map descriptors.

3 $MAP
INTEGER   Contains the map number of the found feature

3 $MAPNAME n
CHARACTER Contains the name of the specified source map

Must be followed by an integer in the range 1 - 100, representing the map

3 $MAPSTATUS n
INTEGER    Contains the status of the specified map (IFF file)

           = 0  - not opened yet
           = 1  - opened with READ command (map is read only)
           = 2  - opened with IFF command
           = 3  - opened with INSITU command

Must be followed by an integer in the range 1 - 100, representing the map

3 $MAPTOTAL
INTEGER   Contains the total number of maps read in, excluding any since
          removed using the QUIT n command.

3 $MAP_NUMBER
INTEGER   Contains the next map number containing the string specified
          by an ASK MAP_NUMBER command. It is a synonym for the variable
          $ASK_INT 1.

3 $MAP_SHEET [n]
CHARACTER Contains the name of the map sheet that covers the current
          cursor position. By default, the sheet naming convention is
          that used by the Ordnance Survey of Great Britain. This
          provides map names for the scales 1/1250, 1/2500, 1/10000,
          1/10560, 1/25000. In addition a name will be generated for
          scales greater than 1/250000.

          This default algorithm can be substituted by a user supplied
          one which can be passed either the absolute position of the
          cursor or its geographical position. This substitution is
          achieved by supplying a shared image pointed at by the logical
          name LSL$LITES2_GET_SHEET_ROUTINES. Example source files that
          contain instructions to do this are supplied in
          LSL$PUBLIC_ROOT:[LITES2.ROUTINES.EXAMPLES] and are called
          GET_SHEET_GEOG_EXAMPLE.FOR and GET_SHEET_GRID_EXAMPLE.FOR.

May be followed by an integer representing the scale of the map sheet
whose name is required (eg 1250 or 10560). If this value is not
supplied the sheet scale currently being used by LITES2 is used.

3 $MAXFSN n
INTEGER   Contains the maximum FSN number for the specified map
          (excluding features specified by any FIDUCIAL command).

Must be followed by an integer in the range 1 - 100, representing the map

3 $MDOFFSET n
DOUBLE    Contains the coordinate offset for the LITES2 coordinate
          system ($MDOFFSET 1 is x value, $MDOFFSET 2 is y value

          This value is to be added to any IFF coordinate, to get
          the real projection coordinate of the point

Must be followed by an integer in the range 1 - 2

3 $MDSCALE
REAL      Contains the scale of the LITES2 working area.  
          It is the scale of the first map that is read into LITES2.
          The value comes either from the MD entry in the IFF file, or
          if that value is less than or equal to 0.0 or DESCRIPTOR has
          been disabled, then from the MH entry.

3 $MHARR n
INTEGER   Contains the contents of the MH (Map Header) entry, 
          of the first map that was read into LITES2, as a series 
          of 32 bit integers.
          See IFFLIB documentation for the format of the MH entry.

Must be followed by an integer in the range 1 - length of MH entry

3 $MHLEN
INTEGER   Contains the number of 32 bit integers in $MHARR.

3 $MMFACTOR
REAL      This is the conversion factor from IFF units to sheet mm.

3 $MOANED
INTEGER   -1 if the last command moaned, else 0

3 $MODTCC
INTEGER   Contains the text component code of the current subtext 
          of the text feature being modified

3 $MODTEXT
CHARACTER Contains the text string for the current subtext of
          the feature being modified.
          For composite texts, this is the current text component
          (i.e. the component that the cursor is on)

3 $MODTEXTLEN
INTEGER   Contains the length of the text string of the current
          subtext of the feature being modified.
          For composite texts, this is the current text component
          (i.e. the component that the cursor is on)

3 $OPTBIG
INTEGER   -1 if BIG is currently enabled, else 0

3 $OPTBLIN
INTEGER   -1 if BLINK is currently enabled, else 0

3 $OPTCOMP
INTEGER   -1 if COMPOSITE text is currently enabled, else 0

3 $OPTCONT
INTEGER   -1 if CONTINUE is currently enabled, else 0

3 $OPTENDS
INTEGER   -1 if ENDS is currently enabled, else 0

3 $OPTHEIG
INTEGER   -1 if HEIGHT is currently enabled, else 0

3 $OPTINFO
INTEGER   -1 if INFORM is currently enabled, else 0

3 $OPTLEAR
INTEGER   -1 if LEARNER is currently enabled, else 0

3 $OPTPATT
INTEGER   -1 if PATTERN is currently enabled, else 0

3 $OPTPSIZE
INTEGER   -1 if PSIZE is currently enabled, else 0

3 $OPTSUBS
INTEGER   -1 if SUBSTITUTE is currently enabled, else 0

3 $OPTVERI
INTEGER   -1 if VERIFY is currently enabled, else 0

3 $OUTGEOMETRY n
INTEGER   -1 if the found feature is entirely outside specified area
          geometry, else 0

Must be followed by a valid area type geometry number.

3 $OUTREGION n
INTEGER   -1 if the found feature is entirely outside given REGION
          else 0

Must be followed by a valid region number.

3 $OVERLAY
INTEGER   Contains the overlay number that the current feature will
          be drawn in. It is the lowest numbered overlay that the
          overlay selections satisfy for this feature; if no overlay
          satisfies the overlay selections, overlay number 0 is returned

3 $OVERLAYNUMBER
INTEGER   Contains the current overlay number 
          This is the overlay selected by the OVERLAY NUMBER command.

3 $P n
CHARACTER Contains the value of the n'th parameter supplied to the
          current command file or macro, or a null string if none
          was supplied.

3 $PATTERN
INTEGER   Contains the pattern index for linear features

3 $PC
INTEGER   Contains the process code of the found feature

3 $PCOUNT
INTEGER   Contains the number of parameters supplied to the
          current command file or macro.

3 $PI
DOUBLE    Contains the value of PI, the ratio of the circumference of
          a circle to its diameter.

3 $PID
CHARACTER Contains the process identification string for the current
          process

3 $PLINE
CHARACTER Contains the entire line of parameters supplied to the
          current command file or macro, or a null string if none
          was supplied.

3 $POINT
INTEGER   -1 if at a point of the found feature, else 0

3 $POINTNO
INTEGER   Contains the point number of the cursor on the found feature

3 $PRIVPOINT
INTEGER   -1 if at a point has an attribute with a value specified
	  by a previous PRIVILEGE POINT command, else 0.

Only available when in line, symbol or text state and on a point.

3 $PSIZE
INTEGER   Contains the point size of found text feature.

3 $RANDOM [n]
REAL      Contains a random number in the range 0.0 - 1.0

May be followed by a integer to be used as a seed value

          NOTE: subsequent references to $RANDOM will produce
                different values. By using the optional integer
                a repeatable series of random numbers can be
                initiated.

3 $RANGE_PROBLEM
INTEGER   Reports problems in calculating the sectored area after
          reading an IFF file and transforming it to another projection.

This variable is valid after going from INITIAL to READY state, or when
an IFF file has been read in READY state. It remains set until another
file is read. It is -1 if a point has been detected outside the sectored
area after transformation and 0 if no such point was detected.

3 $RANGE_zzzz n
REAL      Contains the (original) range for each map.

where zzzz is one of XMIN, XMAX, YMIN or YMAX

          $RANGE_XMIN n is the minimum X coordinate in map n
          $RANGE_XMAX n is the maximum X coordinate in map n
          $RANGE_YMIN n is the minimum Y coordinate in map n
          $RANGE_YMAX n is the maximum Y coordinate in map n

Must be followed by an integer in the range 1 - 100, representing the map

          Note: the coordinates are in terms of the current LITES2
                space, and reflect the range of the IFF file that was
                originally read in. They do not take account of any
                subsequent edits.

3 $REFRESH
INTEGER   Contains the number of points that are highlighted
          in refresh when a object is found

3 $REGION n
INTEGER   -1 if the specified region exists, else 0

Must be followed by a valid region number.

3 $REGIONAREA n
DOUBLE    Contains the area enclosed by the specified region 
          in square IFF units.

Must be followed by a valid region number.

          A positive area indicates that the region runs in a clockwise
          direction, negative areas indicate a counter clockwise
          direction.

3 $RESPOND
INTEGER   -1 if in second level interactive input 
           (ie the RESPOND command has been given - awaiting a 
           CONTINUE command), else 0

3 $SCRFACTOR
REAL      This is the conversion factor from IFF units to screen mm.

3 $SECONDARY
INTEGER   Contains the secondary code from the FRT for current feature.
          See FRTLIB documentation, for what this represents for 
          different types of features

3 $SIZE
REAL      Contains the size of the currently found symbol

3 $SIZE_FC
REAL      Contains the size entry of the specified feature code
          in the current FRT file.

Must be followed by an integer.

3 $SRI
CHARACTER  Contains the name of the SRI file currently in use.

3 $STATE
CHARACTER Contains the current program state. (See HELP STATE)

3 $STYLE
INTEGER   Contains the style index for the current text feature

3 $SYSBUFIO
INTEGER   Contains the number of buffered input/output operations
          during this run of LITES2. This includes operations to
          terminals on serial lines.

3 $SYSCPU
REAL      Contains the CPU time elapsed in seconds during this run
          of LITES2

3 $SYSDIRIO
INTEGER   Contains the number of direct input/output operations
          during this run of LITES2. This includes operations to
          disc files (in particular IFF files).

3 $SYSELAPSED
REAL      Contains the time elapsed in seconds during this run
          of LITES2

3 $SYSFAULTS
INTEGER   Contains the number of page faults during this run
          of LITES2. Useful as a performance tool to check whether
          LITES2 would benefit from increased memory or working set size.

3 $TABLE
INTEGER   -1 if there is a digitising table in use on the LITES2
          workstation, else 0

3 $TABLEXY n
REAL      Contains inquired coordinates of the table cursor,
          after the last successful invocation of the command ASK TABLE.

Must be followed by an integer in the range 1 - 2

          $TABLEXY 1 is the X coordinate  (IFF units)
          $TABLEXY 2 is the Y coordinate  (IFF units)

          This variable is a synonym for the variable $ASK_REAL

3 $TCC
INTEGER   Contains the text component code of the current subtext 
          of found text feature.

3 $TEXT
CHARACTER Contains the text string for the current text feature.
          For composite texts, this is the current text component
          (i.e. the component that the cursor is on)

3 $TEXTLEN
INTEGER   Contains the number of characters in the text string
          for the current text feature.
          For composite texts, this is the current text component
          (i.e. the component that the cursor is on)

3 $TEXTTOTAL
INTEGER   Contains the number of subtexts in a composite text feature.

3 $TOPFC
INTEGER   Contains the highest feature code in the FRT table currently
	  in use.

3 $TOPGEOMETRY
INTEGER   Contains the number of the highest geometry that has been defined.

3 $TOPMAP
INTEGER   Contains the highest map number currently in use.

3 $TRI
CHARACTER Contains the name of the TRI file currently in use.

3 $UIC
CHARACTER Contains the user identification code of the user

3 $UNIT_DESC
CHARACTER Contains the descriptive string specified in the last
          UNITS FACTOR command.

3 $UNIT_FACTOR
REAL      Contains the number specified in the last UNITS FACTOR command.

3 $UNIT_TYPE
INTEGER   Contains the type of UNITS command currently in force.
          0 - none or NORMAL, 1 - IFF, 2 - MMS, 3 - FACTOR.

3 $USER
CHARACTER Contains the user name of the user.

3 $VERSION
CHARACTER Contains the LITES2 version number.

3 $WARP_COEFFS_IMAGE
DOUBLE    Contains the coefficients for transforming an image
          coordinate to a map coordinate.

Must be followed by an integer in the range 1 - 8 identifying which
coefficient is required.

3 $WARP_COEFFS_MAP
DOUBLE    Contains the coefficients for transforming a map
          coordinate to an image coordinate.

Must be followed by an integer in the range 1 - 8 identifying which
coefficient is required.

3 $WARP_DIRTY
INTEGER   -1 if the warp points have been altered since WARP FIT
          was performed, otherwise 0.

3 $WARP_FITTED
INTEGER   -1 if WARP FIT has been performed, and WARP ON will activate
          the fit, otherwise 0.

3 $WARP_IMAGE_N
INTEGER   The number of image control points for warping.

3 $WARP_IMAGE_X
REAL      The X coordinate of an image control point.

Must be followed by an integer identifying the control point.

3 $WARP_IMAGE_Y
REAL      The Y coordinate of an image control point.

Must be followed by an integer identifying the control point.

3 $WARP_MAP_N
INTEGER   The number of map control points for warping.

3 $WARP_MAP_X
REAL      The X coordinate of a map control point.

Must be followed by an integer identifying the control point.

3 $WARP_MAP_Y
REAL      The Y coordinate of a map control point.

Must be followed by an integer identifying the control point.

3 $WARP_MODE
INTEGER   The current warp mode. 0 if warping is off, 1 if warping
          the image, 2 if warping the map.

3 $WARP_RESIDUAL_X
REAL      The X residual at a warp control point (transformed map
          coordinate minus image coordinate).

Must be followed by an integer identifying the control point.

3 $WARP_RESIDUAL_Y
REAL      The Y residual at a warp control point (transformed map
          coordinate minus image coordinate).

Must be followed by an integer identifying the control point.

3 $WARP_RMS_X
REAL      The root mean square X residual at the warp control points
          (calculated at the time the warp was fitted).

3 $WARP_RMS_Y
REAL      The root mean square Y residual at the warp control points
          (calculated at the time the warp was fitted).

3 $WARP_TRANSFORM
CHARACTER The name of the current warp transform (LINEAR, HELMERT,
          AFFINE, EXTENDED, or PROJECTIVE).

3 $WIDTH
REAL      Contains the line width of the current linear feature.

3 $WINDOW n
REAL      Contains the coordinates of the limits of the current window

Must be followed by an integer in the range 1 - 4

          $WINDOW 1 is the minimum X coordinate  (IFF units)
          $WINDOW 2 is the maximum X coordinate  (IFF units)
          $WINDOW 3 is the minimum Y coordinate  (IFF units)
          $WINDOW 4 is the maximum Y coordinate  (IFF units)

3 $ZOOM
REAL      Gives the current screen zoom factor,
          that is the number of times that the current picture on the
          screen is magnified from the full map on the screen.


1 Expressions
Expressions are used to set and test the values of variables,
particularly in the commands LET, TEST, AND, OR, and INQUIRE.

For CHARACTER variables, an expression consists simply of a string of
characters. The string may be completely absent (the empty, or
null string), and may optionally be enclosed in double quotation marks.
Within double quotes, the character " is represented by "". The trailing
quotation mark may always be omitted. The case of letters in character
variables matters, so that, for instance a variable containing "A" will
not be considered equal to the expression "a". 

For INTEGER, REAL, or DOUBLE variables, an expression consists of one or
more numbers together with the operators + - * / and ^ (exponentiate),
and functions (SIN, COS, TAN, ASIN, ACOS, ATAN, ABS, LN, LOG - see HELP
FUNCTIONS). Unary minus and functions have highest precedence, followed
by ^, then * and /, then + and -. 
Operators of equal precedence are evaluated from left to right.
Parentheses ( and ) may be used to force the order of evaluation.

Note that unlike FORTRAN, the exponentiation operator will only operate
on positive numbers; if it is used on negative values then a "floating
overflow" error occurs. (FORTRAN allows exponentiation of negative
numbers by positive integer). 

Note also that the exponentiation operator may be used to obtain square
roots, e.g. 4^0.5 is 2.

When setting an INTEGER variable using LET or INQUIRE, an attempt is
made to evaluate the expression using integer arithmetic. If this fails
(due to the presence of a decimal point, an E exponent, or a real valued
function), then real arithmetic is used, with the final result being
truncated to integer. 

When setting a REAL or DOUBLE variable, the expression is always
evaluated using real arithmetic. 

If an INTEGER variable is compared with a real expression in a TEST,
AND, or OR command, then the integer is converted to real before the
comparison. 

1 States
LITES2 available commands change according to the state of the program.
The current program state is displayed by the command SHOW STATE. 
It is also displayed in the status line (ENABLE STATUS), and is used 
as a prompt if PROMPT STATE is in action. 
System variable $STATE is set to the current state.

The possible program states are:

2 INITIAL
Awaiting specification of input maps (IFF files).

2 READY
Ready for an editing command, no operations in progress.

2 LINE
Line type feature found for manipulation.

2 CIRCLE
Circle arc feature found for manipulation.

2 TEXT
Text feature found for manipulation.

2 SYMBOL
Symbol feature found for manipulation.

2 EDIT
Edit operation on line type feature in progress.

2 MODIFY
Modification of text or symbol feature in progress.

2 ON
Constrained on line feature during part edit operation.

2 WINDOW
Defining a window for drawing.

2 CONSTRUCT
Constructing a line type feature, or a BRIDGE.

2 AC
Editing ancillary codes of a feature or attribute set.

2 DEBUG
Not used (program development aid).

2 RECOVER
Deleted (or 'limbo') feature found, ready for recovery.

2 SETUP
Setting up the corners of a map on a raster image.

2 PAINT
Editing a raster image using the IMAGE PAINT command.

2 MACRO
Defining a macro. All commands are stored until ENDMACRO command.

1 Functions
Within expressions, real or integer functions may be used. 
Their argument may optionally be enclosed in parentheses. 

2 Trigonometrical
These deal with angles in degrees, and return a real result.

The available functions are:

SIN COS TAN ASIN ACOS ATAN

For example, the command LET R=SIN30 will set variable R to 0.5, while
the command LET R=COS('ANGLE'+30) will set R to the cosine of ANGLE+30,
assuming that ANGLE is a REAL variable, and that SUBSTITUTION is enabled.

2 Other
The other functions available are:

ABS

This returns a real or an integer result, depending on its context.

LN,LOG

These return the natural (base e) and common (base 10) logarithm
respectively.



1 Commands
This section describes the use of the command language and programming
facilities to set up menus and pucks, and to combine the primitive
operations into more sophisticated procedures. Where a particular
command is mentioned, its exact syntax and function should be looked up
in the individual descriptions. 

2 Arguments
Command arguments are in general integer numbers, real numbers, or text
strings. An integer number may not have a decimal point. Where a real
number is required, the decimal point may be omitted when an integral
value is desired, and scientific or exponent notation (eg 1.3E-3 =
0.0013) is permitted. 

In the case of text arguments, exactly what is required is described
with the individual commands, but it should be noted that in the case of
commands taking an arbitrary text string (eg for insertion in the map
data, or as a message), any leading spaces or tab characters are
ignored. The text may be enclosed in double quotation marks, within
which a repeated quotation mark may be used to include a quotation mark
in the text. Quotation marks must be used if leading spaces or tabs
are to form part of the text. 

A few commands that deal with ancillary codes (ACs) or point attributes
take a special form of argument, consisting of a code, (usually referred 
to as a "type" when referring to ACs), possibly followed by a value.

The code is either an integer which identifies the attribute, or a name 
that corresponds to this integer. Laser-Scan has defined some codes and
names that are available to all users, but it is possible for the user 
to define his own in addition. This is done in the ACD (attribute code 
definition) part of the FRT.
Details of the Laser-Scan standard codes and of how to define further 
codes can be found in the "FRT User Guide".

The format of the value part of the argument depends on the data type 
associated with the attribute code. Each of the Laser-Scan standard 
attribute codes has a data type associated with it; user defined 
attribute codes have data types associated with them when they are 
defined in the FRT.

The possible data types are Integer, Real, Character, Time and Date 

3 Character
This is a string of 4 characters. It can optionally be "quoted"
by surrounding by quotation marks when entered as an argument.

Examples of valid character values are

          "abcd"
           abcd
          "   d"

3 Date
This is the date part of a VAX/VMS date/time string. 

It consists of a one or two digit integer representing the day of the
month (in the range 1 - 31), followed by '-', followed by three upper
case letters representing the month (JAN,FEB...DEC), followed by '-',
followed by a four digit integer representing the year (eg 1987). Any
part of the date can be missed out, but not the '-'s. If any part is
missing, then the field is filled in from the current date. In
particular the date '--' is interpreted as 'today'. 

The valid range of dates is from 17-NOV-1858 to 31-DEC-9999
Examples of valid dates are

           2-JAN-1987
          31-DEC-1899
          --                        today's date
3 Integer
This is a integer or "whole" number
An example of valid integer value is

          24
3 Real
This is a real or "floating point" number
Examples of valid real values are

          3.414
          366
          0.123E3
3 Time
This is the time part of a VAX/VMS date/time string. 

It consists of a one or two digit integer representing the hour of the
day (in the range 0 - 23), followed by ':', followed by a two digit
integer representing the minute of the hour, followed by ':', followed
by a real number with two digits before the decimal point representing
the seconds of the minute. Any part of the time can be missed out, but
not the ':'s. If any part is missing, then the field is filled in from
the current time. In particular the time '::' is interpreted as 'just
now'. 

The valid range of times is from 00:00:00.00 to 23:59:59.99

Examples of valid times are

          02:23:45.76
          2:00:00.00
          ::                        just now

2 Command_files
LITES2 commands may be stored in a disk file for later recall. 

Each line of the file is a single command line as described above. The
command file is invoked by the command @filename. The commands in the
file are then obeyed until the end of file is reached, when control
returns to the command following the @filename directive, optionally
followed by parameters. Command files may invoke other command files up
to a certain level of nesting.

The most common use of command files is for LITES2 initialisation, but
their use is not restricted to this. A possibly lengthy and rarely used
sequence of editing commands may be better stored as a command file than
as a macro (see HELP COMMANDS MACRO). A macro could still be set up to
invoke the file rather than having the user type @filename.

2 Command_lines
LITES2 command lines are lines of text, up to 255 characters long, 
which may be obtained from the keyboard, or other interactive controls, 
or from a command file on disc. (The interactive interface ensures that
button presses and menu probes have the identical effect to typing
commands at the keyboard.) 

A command line consists of zero or more commands, separated by the
character "#", followed by an optional comment preceded by the
character "!". The characters "#" and "!" may never be used for
any other purpose. 

For example:  FIND # DELETE ! deletes the nearest feature

2 Commands
LITES2 commands consist of English words, sometimes followed by numbers.

LITES2 commands consist of an optional label (beginning with "." and
ending with ":"), optionally followed by a primary command.  In some
cases, this may form the entire command (eg FIND). Some primary commands
must be followed by one of several secondary commands (eg SEARCH ALL).
In some cases a default secondary command is assumed if this is omitted
(eg SEARCH is equivalent to SEARCH NEXT). Both primary and secondary
commands may be shortened to the minimum non-ambiguous abbreviation. 

Commands may be followed by compulsory or optional arguments 

eg TOLERANCE FIND 3.0   (argument is compulsory)
   POSITION 400.0 450.0 (arguments are optional)
   POSITION             (position to centre of screen is assumed)

The precise effect of omitting an optional argument is described with
each individual command.

2 Flow_of_control
This section describes how command execution can be diverted.

The command file directive (@filename) and the macro call (macroname),
which have already been introduced, pass execution to the appropriate
command file or macro. Calls may be nested up to a certain limit. 

Unless affected by the mechanisms described below, commands are obeyed in
order one by one until the end of a command line is reached. A new line
is then obtained from the current source (command file or interactively).
A macro is treated internally as a single line with multiple commands
separated by "#". When the current source is exhausted, execution
continues at the command following that which invoked the command file
or macro.

One way in which the flow of control can be altered is if a command
causes a MOAN or NASTY type error. Unless ENABLE CONTINUE has been used,
this causes all currently active command files and macros to be
abandoned, and control is returned to interactive. This mechanism (with
DISABLE CONTINUE in force) can be used to terminate a repetitive
sequence (eg when SEARCH NEXT gives an error because there are no more
features), but this method is not recommended since it will fail if
there is no interactive input available (as for instance in a batch
job). 

The next method of altering the flow of control is the JUMP command.
This transfers control to a named macro or label. In the case of a JUMP
to a macro, any commands following the JUMP at the current level (macro
or command file) are abandoned and execution begins at the start of the
named macro. This means that is is only sensible for JUMP to occur as
the last command in a command file or macro, unless the following command
has a label which is the target of a JUMP elsewhere. A label must occur
in the same macro or line as the JUMP command which refers to it.

JUMP does not use up a level of macro/command file nesting, and the
target of the JUMP can be the current macro. This means that simple
repetitive loops can be constructed using macros which repeat until a
error occurs. NB DISABLE CONTINUE must be in force, otherwise CTRL/C
must be used to break out of the loop. 

More versatile than JUMP are JTRUE, JFALSE, THEN, ELSE, and ABORT. The
behaviour of these depends on whether the condition flag (see below) is
TRUE or FALSE.

JTRUE and JFALSE are the same as JUMP, except that the jump is only made
if the conditional flag is TRUE or FALSE respectively. Unlike JUMP,
these therefore can usefully be followed by other commands in a command
file or macro. 

THEN and ELSE are followed by a command (possibly itself a macro or
@filename) which is obeyed only if the condition flag is TRUE or FALSE
respectively. These do use up a level of command nesting, and also
differ from JUMP in that, whether or not the command is obeyed,
execution continues at the next command. 

The ABORT commands may be used to terminate execution of procedures.
ABORT INPUT terminates all active command files and macros and returns
to interactive input, while ABORT ALWAYS (the ALWAYS secondary command
is optional) just skips the rest of the current line or macro. ABORT
TRUE and ABORT FALSE are the same as ABORT ALWAYS, but depend on the
setting of the condition flag. ABORT FILE skips the rest of the current
command file, even if called from within a macro invoked by the command
file.

The condition flag used by JTRUE, JFALSE, THEN, ELSE, and ABORT is set
using the commands TEST, OR, and AND. These compare the value of a
LITES2 variable (see below), with an expression (see HELP EXPRESSIONS). 

2 Function_Keys
The function keys on DEC VDU terminals may be used as a programmable
puck in LITES2. Use the PUCK command to define a puck on device 0, and
then program the puck macros to execute the desired LITES2 commands.
Buttons 1-49 are used, though not all of these have a corresponding
keyboard key. This facility depends on a key transmitting the
appropriate escape sequence to the computer and cannot utilise any key
definitions using the DCL DEFINE/KEY command. Some terminals may allow
keys to be programmed to send a string of characters to the computer
just as if they had been typed - such a facility may be used instead of
the mechanism described here.

See Help subtopic Layout for a diagram of the keys and their puck
numbers on a VT220 type keyboard.

F1 through to F5 cannot be used to give LITES2 commands. Which of the
other keys are available depends on the terminal settings using the DCL
commands SET TERM/[NO]LINE_EDITING, and SET TERM /APPLICATION_KEYPAD
or /NUMERIC_KEYPAD. If the terminal is set to perform line editing, then F6
through F14 and the arrow keys will perform their line editing function
and cannot be used to give LITES2 commands. If line editing is disabled,
then these keys may be programmed. The keypad numeric keys, and also '.'
'-' ',' and Enter may only be programmed if APPLICATION_KEYPAD is set,
otherwise they just transmit their own character. The remaining keys
(there are 16 of them) may always be programmed. The DCL SET TERM
commands may be SPAWNed from LITES2, and some settings (particularly
APPLICATION or NUMERIC KEYPAD) may sometimes be set locally on the
terminal.

3 Layout
The puck button number is shown below each key

F1 F2 F3 F4 F5  F6 F7 F8 F9 F10  F11 F12 F13 F14  Help Do  F17 F18 F19 F20
 x  x  x  x  x   6  7  8  9  10   11  12  13  14   15  16   17  18  19  20

                                            Fin Ins Rem    PF1 PF2 PF3 PF4
                                             40  41  42     21  22  23  24
                                            Sel Prv Nxt     7   8   9   -
                                             43  44  45    37  38  39  25
                                                Up          4   5   6   ,
                                                46         34  35  36  26
                                          Left Down Right   1   2   3
                                           48   47   49    31  32  33
                                                            0       .  Ent
                                                           30      28   27
2 Labels
Any command may be preceded by a label. This begins with ".", consists
of letters, numbers, and underline characters, and is terminated by ":".
The case of the letters in a label is not significant. The label may be
used as a target for JUMP, JTRUE, and JFALSE commands (qv), and must be
in the same command line, or macro as the command which refers to it.
These is no need for labels in different macros to be different, but if
duplicate labels occur in the same macro, then the first one will always
be found.

2 Macros
Macros provide a mechanism for a user to extend LITES2 command language 
by adding new 'commands' which perform sequences of existing
commands. The definition of a macro is begun using the MACRO command,
after which all commands are stored as part of the macro (rather than
being obeyed immediately) until the ENDMACRO command is encountered. Any
calls to other macros, or @filename directives are merely checked for
syntax during macro definition. Once defined, a macro is invoked merely
by giving its name, optionally followed by parameters. It may also be
used in JUMP commands (see below). 

It is possible to define a macro with the same name as one of the
LITES2 primitive commands (or whose abbreviation is the same as that of
a primitive command). In these circumstances, the macro will take
precedence. If the primitive command is intended, the command name should
be preceded by the character "%" which prevents the command being looked
up as a macro.

It is good practice to use the "%" escape character with primitive
commands in macros and command files, so that these will continue to
work even if macros with ambiguous names are defined later. (Command
decoding will also be slightly faster.) 

By default up to 600 macros can be defined, but this limit can be
increased (or decreased) by setting the logical name LSL$LITES2_MACROMAX
to the required number before LITES2 is started.
The command SHOW MEMORY can be used to see how many macros are currently
defined.

2 Parameters
Parameters may be passed to command files and macros using the commands
@file, JUMP, JTRUE, JFALSE, and the normal macro call invoked by giving
the name of the macro. All these commands may be followed by a line of
parameters, each delimited by one or more spaces or tabs, or enclosed
in double quotes. Within the command file or macro, the values of the
parameters are available in the character system variables $P1, $P2 etc.
The number of parameters is available in $PCOUNT, and the whole line
of parameters in $PLINE.

The parameters are only available within the command file or macro
actually called. If this calls another command file or macro, then
a new set of parameters will be available within the inner procedure.
When the flow of control returns to the outer procedure, then the
first set of parameters will be available again.

For example:
* add_text Red House
calls a macro passing two parameters. $P1 = "Red", $P2 = "House",
$PCOUNT = 2, and $PLINE = "Red House" (the parameters do not actually
contain the quotes).

* add_text "Red House"
This time there is only one parameter, $P1 = "Red House". $PLINE does
contain the quotes.

2 Pucks_and_Menus
Programmable menus and pucks are implemented using macros. 

Once defined, using a PUCK or MENU command, the macros menuname1 up to
menunameN (where menuname is the name of the menu or puck, and N is the
number of boxes or buttons) are available to be defined using MACRO
commands.

Spaces between the menu name and the box number are optional. The macros
for unused boxes or buttons should be left undefined - they will then do
nothing. Menu or puck macro commands are normally generated
automatically by the interactive interface when the boxes are probed or
the buttons pressed, but there is nothing to prevent them being used at
the keyboard, or in command files or other macros. 

By default up to 500 menu squares and puck buttons can be defined, but
this limit can be increased (or decreased) by setting the logical name
LSL$LITES2_MENUSQUAREMAX to the required number before LITES2 is
started.

The command SHOW MEMORY can be used to see how many menus squares and
pucks are currently defined.

1 About
LITES2 is Copyright (c) 1979-1999 Laser-Scan Ltd. All rights reserved.

For version identification use command SHOW VERSION.

LITES2 is the primary map display and editing component of the
Laser-Scan LAMPS software suite.

2 Address
 Laser-Scan Ltd
 101 Science Park
 Milton Road
 CAMBRIDGE
 CB4 0FY
 England
 Tel +44 (0)1223 420414

2 Authors
LITES2 was created in 1984/1985 at Laser-Scan by a small dedicated team
of software engineers:
  Paul Hardy (team leader, map I/O, feature representation)
  Clarke Brunt (internal data structures, graphics output, interaction)
  Jamie Hulme (command parsing and decoding)
  Ron Russell (editing functionality)

It was subsequently enhanced and extended by the same team, particularly
Clarke Brunt and Ron Russell, occasionally aided by others of the
Laser-Scan software department.

The design of LITES2 built on the experience of previous map editing
software at Laser-Scan, notably the LITES program of which Robin
Fairbairns and Paul Hardy were the main authors. This in turn drew on on
SOLADI, written by Robin Fairbairns et al in 1975.

LITES2 relies on the supporting libraries and utilities of the LAMPS
software suite, notably IFFLIB, written by Phil Cross in 1976, and
subsequently ported by Paul Hardy and enhanced by Clarke Brunt. Many
others contributed to the LAMPS utilities that have made LAMPS and
LITES2 the preferred tool of many major mapping agencies worldwide.
