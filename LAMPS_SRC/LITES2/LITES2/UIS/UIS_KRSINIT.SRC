	LOGICAL FUNCTION KRSINIT(ON,ACTION)
C
***	IDENT	29AP93
***	MODULE	KRSINIT
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					CCB	28-Feb-1989
C
C	Hardware dependant version of KERN KRISS initialisation
C	   ----   This version is for UIS version   ----
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:MOANMESS/
C
***	COMMON/CMN:DRAWIN/
***	COMMON/CMN:KERN/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:WORKS/
C
C argument
	LOGICAL*1	ON		! turn on?
	INTEGER		ACTION		! tertiary command number
C
C functions called
	LOGICAL		CALLR
C
	EXTERNAL	MOAN
C
C Returns .TRUE. if KRISS is switched on.
C
	KRSINIT = .FALSE.		! assume off
C
C all special action numbers done in
	IF (ACTION.NE.0) THEN
	   CALL KRSSET(ON,ACTION)
	   GOTO 9999
	ENDIF
C
	IF (.NOT.ON) THEN
	   IF (KRSINI) THEN
	      CALL KRISS_MODE(0)	! remove refresh
	      CALL CALLR(0,%VAL(KERN_ADDRESSES(XKRISS_VISIBLE)))
	      IF (SD_TYPE.NE.SD_DSR) CALL CALLR(
     &			.FALSE.,%VAL(KERN_ADDRESSES(XKRISS_INIT)))
	   ENDIF
	   IF (.NOT.(WKOP(1).OR.WKOP(2))) NODISP = .TRUE.
	   GOTO 9999
	ENDIF
C
	IF (.NOT.GRAOPT) GOTO 9999	! need ENABLE GRAPHICS
	IF (.NOT.DSRINI) GOTO 9999	! need DSR in operation
C
C start up the KRISS
C
	IF (KRSCLR.AND..NOT.KRSINI) THEN
C
C check that this image has Kriss routines in it
	   IF (KERN_ADDRESSES(XKRISS_INIT).EQ.0) THEN
	      CALL MSGCMD(MOAN,MSG_CMDNOTWITHHW)
	      GOTO 9999
	   ENDIF
C
	   IF (CALLR(.TRUE.,%VAL(KERN_ADDRESSES(XKRISS_INIT)))) GOTO 9999
	   CALL CALLR(
     &		KRISS_SIDE,%VAL(KERN_ADDRESSES(XKRISS_SIDE)))
	   KRISS_NEWSTAT = .TRUE.	! might need new status
	ENDIF
C
	IF (.NOT.KRSINI) THEN
	   CALL CALLR(1,%VAL(KERN_ADDRESSES(XKRISS_VISIBLE)))
	ENDIF
C
	IF (NODISP) NODISP = .FALSE.
	KRSINIT = .TRUE.
C
9999	RETURN
	END
C
C
C
	SUBROUTINE KRSSET(ON,ACTION)
C
***	IDENT	09AU89
***	MODULE	KRSSET
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					CCB	9-Aug-1989
C
C	Special KRISS actions
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:MOANMESS/
C
***	COMMON/CMN:DOUT/
***	COMMON/CMN:KERN/
***	COMMON/CMN:WORKS/
C
C argument
	LOGICAL*1	ON		! turn on?
	INTEGER		ACTION		! tertiary command number
C
	GOTO (100,200,300,400,500), ACTION
C
C called from VTSTAT with action -1 to update status line
C
	CALL KRSSTAT		! write new status
	GOTO 9999
C
C ENABLE KRISS STATUS [posx posy charsize]
C
100	IF (.NOT.ON) THEN
	   KRISS_STATUS = .FALSE.	! turn off
	   KRISS_NEWSTAT = .TRUE.	! need new status
	   IF (KRSINI) CALL KRSSTAT	! erase it
	   GOTO 9999
	ENDIF
	IF (DNINT.EQ.0) GOTO 110	! no arguments
	IF (DNINT.NE.3) GOTO 9000	! wrong number
	IF (DINTS(1).LT.0.OR.DINTS(1).GT.1023) GOTO 9000
	IF (DINTS(2).LT.0.OR.DINTS(2).GT.1023) GOTO 9000
	IF (DINTS(3).LE.0.OR.DINTS(3).GT.100) GOTO 9000
C
C if KRISS is active, then clear out old status area
	KRISS_STATUS = .FALSE.		! turn off
	KRISS_NEWSTAT = .TRUE.		! need new status
	IF (KRSINI) CALL KRSSTAT	! erase it
C
C set new parameters
	KRISS_SPOSX = DINTS(1)
	KRISS_SPOSY = DINTS(2)
	KRISS_SSIZE = DINTS(3)
C
110	KRISS_STATUS = .TRUE.		! turn on
	KRISS_NEWSTAT = .TRUE.		! need new status
	IF (KRSINI) CALL KRSSTAT	! write new status
	GOTO 9999
C
C ENABLE KRISS DIALOG posx posy charsize length
C
200	IF (.NOT.ON) GOTO 9999		! rubbish if disable
	IF (DINTS(1).LT.0.OR.DINTS(1).GT.1023) GOTO 9000
	IF (DINTS(2).LT.0.OR.DINTS(2).GT.1023) GOTO 9000
	IF (DINTS(3).LE.0.OR.DINTS(3).GT.100) GOTO 9000
	IF (DINTS(4).LE.0.OR.DINTS(4).GT.1023) GOTO 9000
C
C if KRISS is active, then clear out old dialog area
	IF (KRSINI) CALL KRSMSG(0,' ')
C
C save new dialog parameters
	KRISS_DPOSX = DINTS(1)
	KRISS_DPOSY = DINTS(2)
	KRISS_DSIZE = DINTS(3)
	KRISS_DLEN = DINTS(4)
	GOTO 9999
C
C ENABLE KRISS MESSAGE chars
C
300	IF (.NOT.ON) GOTO 9999		! rubbish if disable
	IF (KRSINI) CALL KRSMSG(DSTRL,DSTR)
	GOTO 9999
C
C ENABLE KRISS SIDE n (0-none, 1-left, 2-right, 3-both)
C
400	IF (.NOT.ON) GOTO 9999		! rubbish if disable
	IF (DINTS(1).LT.0.OR.DINTS(1).GT.3) GOTO 9000
	KRISS_SIDE = DINTS(1)
	IF (KRSINI) CALL CALLR(
     &		KRISS_SIDE,%VAL(KERN_ADDRESSES(XKRISS_SIDE)))
	GOTO 9999
C
C ENABLE KRISS REGISTRATION [n]
C n=0 - return to default registration
C n non-zero or absent - perform manual registration
C
500	IF (.NOT.ON) GOTO 9999		! rubbish if disable
	IF (KRSINI) THEN
	   IF (DNINT.EQ.0) DINTS(1) = 1
	   CALL CALLR(DINTS(1),%VAL(KERN_ADDRESSES(XKRISS_REGIST)))
C
C INTERACT QIO from DSR has been cancelled, so need new one
	   DSROSB(1) = 0			! clear cancel status
	   DSRREAD=.FALSE.			! request new QIO
	ENDIF
	GOTO 9999
C
9000	CALL MOAN(MSG_ARGRNG)
	GOTO 9990
C
9990	CALL IGNCMD
9999	RETURN
        END
C
C
C
	SUBROUTINE KRSMSG(L,S)
C
***	IDENT	09AU89
***	MODULE	KRSMSG
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					CCB	9-Aug-1989
C
C	KRISS message
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:ACS/
C
***	COMMON/LSL$CMNFRT:FRTACD/
***	COMMON/CMN:GLOBAL/
***	COMMON/CMN:KERN/
***	COMMON/CMN:LABELS/
***	COMMON/LSL$CMNLSL:TXTC/
C
C arguments
	INTEGER		L		! length of string
	CHARACTER*(*)	S		! string
C
C function called
	INTEGER		FINSTR
	LOGICAL		TRISCN
C
C workspace
	REAL		LENGTH
C
C clear out old stuff from dialog area
C (if the KRISS_TEXT routine is supported, then it needn't do this -
C  KRISS_TEXT will be called below with a null string)
	CALL CALLR(KRISS_DPOSX,KRISS_DPOSY-KRISS_DSIZE/2,
     &	   KRISS_DPOSX+KRISS_DLEN,KRISS_DPOSY+KRISS_DSIZE,2,
     &	   %VAL(KERN_ADDRESSES(XKRISS_RECT)))
C
	IF (L.LE.0) GOTO 9990
	CALL SETAUX(%REF(S),L)
	TXTPTR = TXTLIM			! set maximum length
	TXTPTR = FINSTR(TXTDSC,'message')
	IF (MOANED) THEN
	   CALL IGNCMD
	   GOTO 9999
	ENDIF
C
	IF (KERN_ADDRESSES(XKRISS_TEXT).NE.0) THEN
	   IF (TXTPTR.LE.0) GOTO 9990
	   CALL CALLR(
     &	    2,TXTDSC,KRISS_DPOSX,KRISS_DPOSY,KRISS_DSIZE,KRISS_DLEN,
     &	    ABS(ANNOCOL),%VAL(KERN_ADDRESSES(XKRISS_TEXT)))
	   GOTO 9999
	ENDIF
C
C calculate how many chars will fit in dialog area
10	IF (TXTPTR.LE.0) GOTO 9990
	IF (TRISCN(TXTDSC,ANNOFONT,LENGTH)) GOTO 9999
	IF (LENGTH*KRISS_DSIZE.GT.KRISS_DLEN) THEN
	   TXTPTR = TXTPTR-1
	   GOTO 10
	ENDIF
C
C draw new text
	CALL KRSANNO(.TRUE.)		! set for KRISS drawing
	CALL TRITXT(TXTDSC,ANNOFONT,
     &	   FLOAT(KRISS_DPOSX),FLOAT(KRISS_DPOSY),FLOAT(KRISS_DSIZE),0.0)
	CALL KRSANNO(.FALSE.)		! clear KRISS drawing
	GOTO 9999
C
9990	IF (KERN_ADDRESSES(XKRISS_TEXT).NE.0) CALL CALLR(
     &	   2,' ',KRISS_DPOSX,KRISS_DPOSY,KRISS_DSIZE,KRISS_DLEN,
     &	   ABS(ANNOCOL),%VAL(KERN_ADDRESSES(XKRISS_TEXT)))
C
9999	RETURN
        END
C
C
C
	SUBROUTINE KRSSTAT
C
***	IDENT   08AU89
***	MODULE  KRSSTAT
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Written					CCB	8-Aug-1989
C
C	LITES2 KRISS status line
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:ACS/
***	PARAMETER/CMN:EFNLUN/
***	PARAMETER/CMN:STAPAR/
C
***	COMMON/CMN:ACS/
***	COMMON/CMN:ATTBTS/
***	COMMON/LSL$CMNLSL:EXPC/
***	COMMON/LSL$CMNFRT:FRTACD/
***	COMMON/CMN:KERN/
***	COMMON/CMN:LABELS/
***	COMMON/CMN:MODIFY/
***	COMMON/CMN:STATE/
C
C w/s
	INTEGER		SLEN
	PARAMETER	(SLEN=55)
	CHARACTER*7	PART
	DATA		PART/' (part)'/
	INTEGER		PLEN
C
	IF (KRISS_NEWSTAT) GOTO 50
	IF (.NOT.KRISS_STATUS) GOTO 9000
C
C construction stuff changed ?
C
	IF (CONMAP.NE.KRISS_CMAP.OR.CONLAY.NE.KRISS_CLAY.OR.
     &	    CONFC.NE.KRISS_CFC.OR.CONTFC.NE.KRISS_CTFC.OR.
     & 	    SINDEX.NE.KRISS_SIND.OR.
     & ((SINDEX.EQ.STATE_MODIFY.AND.SUBTXT).NEQV.KRISS_SUBT)) GOTO 50
	GOTO 9000
C
C erase old status
50	KRISS_NEWSTAT = .FALSE.
C (if the KRISS_TEXT routine is supported, then it needn't do this -
C  KRISS_TEXT will be called below with a null string)
	CALL CALLR(KRISS_SPOSX,KRISS_SPOSY-KRISS_SSIZE/2,
     &	   KRISS_SPOSX+SLEN*KRISS_SSIZE,KRISS_SPOSY+KRISS_SSIZE,1,
     &	   %VAL(KERN_ADDRESSES(XKRISS_RECT)))
	IF (.NOT.KRISS_STATUS) THEN
	   IF (KERN_ADDRESSES(XKRISS_TEXT).NE.0) CALL CALLR(
     &		1,' ',KRISS_SPOSX,KRISS_SPOSY,KRISS_SSIZE,SLEN,
     &		ABS(ANNOCOL),%VAL(KERN_ADDRESSES(XKRISS_TEXT)))
	   GOTO 9000
	ENDIF
C
C use EXPDSC as a character variable so that EXPAND will pad with space
	PLEN = 1
	IF (SINDEX.EQ.STATE_MODIFY.AND.SUBTXT) PLEN = 7
	EXPLEN = 55			! set length of EXPDSC
	CALL EXPAND(
     &	      '%WS%S%S Map %N Layer %N FC %N Text FC %N',EXPDSC,
     &	   STASTR(:STALEN),PART(:PLEN),CONMAP+1,CONLAY,CONFC,CONTFC)
	KRISS_CMAP = CONMAP
	KRISS_CLAY = CONLAY
	KRISS_CFC  = CONFC
	KRISS_CTFC = CONTFC
	KRISS_SIND = SINDEX
	KRISS_SUBT = SINDEX.EQ.STATE_MODIFY.AND.SUBTXT
C
C draw new status
	IF (KERN_ADDRESSES(XKRISS_TEXT).EQ.0) THEN
	   CALL KRSANNO(.TRUE.)		! set for KRISS drawing
	   CALL TRITXT(EXPDSC,ANNOFONT,
     &	    FLOAT(KRISS_SPOSX),FLOAT(KRISS_SPOSY),FLOAT(KRISS_SSIZE),0.0)
	   CALL KRSANNO(.FALSE.)	! clear KRISS drawing
	ELSE
	   CALL CALLR(
     &		1,EXPDSC,KRISS_SPOSX,KRISS_SPOSY,KRISS_SSIZE,SLEN,
     &		ABS(ANNOCOL),%VAL(KERN_ADDRESSES(XKRISS_TEXT)))
	ENDIF
C
9000	RETURN
	END
C
C
C
	LOGICAL FUNCTION CREATE_KRSMENU(IER)
C
***	IDENT	10AU89
***	MODULE	CREATE_KRSMENU
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					CCB	8-Aug-1989
C
C creates menu on KRISS using data stored in MENUS
C Returns .TRUE. if all is well.
C
	IMPLICIT NONE
C
C argument
	INTEGER		IER		! Return code
					! 1 = size too small
C
***	PARAMETER/CMN:ACS/
***	PARAMETER/CMN:MACMEN/
C
***	COMMON/LSL$CMNFRT:FRTACD/
***	COMMON/CMN:KERN/
***	COMMON/CMN:LABELS/
***	COMMON/CMN:MACRO/
***	COMMON/CMN:MENUS/
***	COMMON/CMN:WORKS/
C
C function called
	LOGICAL		TRISCN
	INTEGER*4	GET_VARLONG
C
C workspace
	INTEGER		I,J
	INTEGER		P
	INTEGER		X1,X2,Y1
	REAL		OFFX,OFFY
	REAL		SIZE,X,Y
	INTEGER		DESC(2)
	INTEGER*2	DESCW
	EQUIVALENCE	(DESC,DESCW)
	REAL		LENGTH
	INTEGER		COL
C
	CREATE_KRSMENU = .FALSE.			! assume failure
C
C check for sensible size
	IF (SCRMEN_SIZX.LE.0.0.OR.SCRMEN_SIZY.LE.0.0) THEN
	   IER = 1
	   GOTO 9999
	ENDIF	   
C
C assume 30 pixels to the cm on a KRISS (arbitrarily)
	KRISS_BOXX = SCRMEN_INX			! no. of boxes
	KRISS_BOXY = SCRMEN_INY
	IF (SCRMEN_SIZX.GT.1.0)	THEN		! size of boxes
	   KRISS_SIZX = SCRMEN_SIZX*3/SCRMEN_INX    ! in mm
	   IF (KRISS_SIZX.GT.1023) KRISS_SIZX = 1023
	ELSE
	   KRISS_SIZX = SCRMEN_SIZX*1023/SCRMEN_INX ! as fraction
	ENDIF
	IF (SCRMEN_SIZY.GT.1.0) THEN
	   KRISS_SIZY = SCRMEN_SIZY*3/SCRMEN_INY
	   IF (KRISS_SIZY.GT.1023) KRISS_SIZY = 1023
	ELSE
	   KRISS_SIZY = SCRMEN_SIZY*1023/SCRMEN_INY
	ENDIF
C
C convert menu position to pixels on screen for bottom left of menu
	KRISS_ORGX = 1023*SCRMEN_ORGX
	KRISS_ORGY = 1023*SCRMEN_ORGY
C
C allow for justification
	KRISS_ORGX = KRISS_ORGX-KRISS_SIZX*KRISS_BOXX*(SCRMEN_LOC/3)/2
	KRISS_ORGY = KRISS_ORGY-KRISS_SIZY*KRISS_BOXY*MOD(SCRMEN_LOC,3)/2
C
	COL = ABS(ANNOCOL)
C
C if the shareable image can do the menu itself, then let it
	IF (KERN_ADDRESSES(XKRISS_MENU).NE.0) THEN
	   CALL CALLR(KRISS_ORGX,KRISS_ORGY,KRISS_BOXX,KRISS_BOXY,
     &		KRISS_SIZX,KRISS_SIZY,%VAL(MANDSL_ADDR+SCRMEN_BASE*8),
     &		COL,%VAL(KERN_ADDRESSES(XKRISS_MENU)))
	   GOTO 9000
	ENDIF
C
	CALL KRSANNO(.TRUE.)		! set for KRISS drawing
C
	X1 = KRISS_ORGX
	X2 = X1+KRISS_BOXX*KRISS_SIZX
	Y1 = KRISS_ORGY
	DO 100 I=0,KRISS_BOXY
	   CALL CALLR(X1,Y1,X2,Y1,COL,%VAL(KERN_ADDRESSES(XKRISS_VECT)))
	   Y1 = Y1+KRISS_SIZY
100	CONTINUE
C
	X1 = KRISS_ORGY
	X2 = X1+KRISS_BOXY*KRISS_SIZY
	Y1 = KRISS_ORGX
	DO 200 I=0,KRISS_BOXX
	   CALL CALLR(Y1,X1,Y1,X2,COL,%VAL(KERN_ADDRESSES(XKRISS_VECT)))
	   Y1 = Y1+KRISS_SIZX
200	CONTINUE
C
C annotate each box
	SIZE = KRISS_SIZY*0.6
	OFFX = KRISS_SIZX*0.1
	OFFY = KRISS_SIZY*0.2
C
	DO 4000 I=0,KRISS_BOXY-1
	   DO 4000 J=0,KRISS_BOXX-1
	      P = SCRMEN_BASE+I*KRISS_BOXX+J+1
C
C calculate how many chars will fit in menu box
	      DESC(1) = GET_VARLONG(%VAL(MANDSL_ADDR),1,P)
	      DESC(2) = GET_VARLONG(%VAL(MANDSL_ADDR),2,P)
4010	      IF (DESCW.LE.0) GOTO 4000
	      IF (TRISCN(DESC,ANNOFONT,LENGTH)) GOTO 8000
	      IF (LENGTH*SIZE.LE.KRISS_SIZX-OFFX) GOTO 4020
	      DESCW = DESCW-1
	      GOTO 4010
4020	      X = KRISS_ORGX+J*KRISS_SIZX+OFFX
	      Y = KRISS_ORGY+(KRISS_BOXY-I-1)*KRISS_SIZY+OFFY
	      CALL TRITXT(DESC,ANNOFONT,X,Y,SIZE,0.0)
4000	CONTINUE
C
8000	CALL KRSANNO(.FALSE.)		! clear KRISS drawing
9000	CREATE_KRSMENU = .TRUE.		! all OK
	IER = 0
C
9999	RETURN
	END
C
C
C
	SUBROUTINE DELETE_KRSMENU
C
***	IDENT	08AU89
***	MODULE	DELETE_KRSMENU
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					CCB	8-Aug-1989
C
C deletes menu on KRISS
C
	IMPLICIT NONE
C
***	COMMON/CMN:KERN/
C
C code 3 means delete the menu (for devices not just dealing in
C rectangles)
	CALL CALLR(	KRISS_ORGX-1,KRISS_ORGY-1,
     &			KRISS_ORGX+KRISS_BOXX*KRISS_SIZX+2,
     &			KRISS_ORGY+KRISS_BOXY*KRISS_SIZY+2,3,
     &				%VAL(KERN_ADDRESSES(XKRISS_RECT)))
C
	RETURN
	END
C
C
C
	INTEGER FUNCTION GET_KRSMENU(IX,IY)
C
***	IDENT	14JN85
***	MODULE	GET_KRSMENU
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					CCB	8-Aug-1989
C
C Returns non-zero menu box number if one probed
C
	IMPLICIT NONE
C
***	COMMON/CMN:KERN/
C
C arguments
	INTEGER		IX,IY		! KRISS screen coords
C
C workspace
	INTEGER		TX,TY
C
	GET_KRSMENU = 0		! assume duff
C
	TX = IX-200-KRISS_ORGX	! allow for offset of menu plane
	TY = IY-KRISS_ORGY
C
	IF (TX.LT.0.OR.TX.GE.KRISS_BOXX*KRISS_SIZX) GOTO 999
	IF (TY.LT.0.OR.TY.GE.KRISS_BOXY*KRISS_SIZY) GOTO 999
C
	GET_KRSMENU =
     &	   (KRISS_BOXY-TY/KRISS_SIZY-1)*KRISS_BOXX+TX/KRISS_SIZX+1
C
999	RETURN
	END
C
C
C
	SUBROUTINE KRSANNO(ON)
C
***	IDENT	08AU89
***	MODULE	KRSANNO
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					CCB	8-Aug-1989
C
C set up for drawin on KRISS menu plane
C
	IMPLICIT NONE
C
***	COMMON/LSL$CMNFRT:FRTCOM/
***	COMMON/CMN:KERN/
***	COMMON/LSL$CMNFRT:SRISCL/
***	COMMON/CMN:WORKS/
C
C argument
	LOGICAL		ON		! set or clear
C
C workspace
	REAL		SAV_PLTSCL	! save of values set by SRIUNI
	REAL		SAV_SRISCL
	REAL		SAV_SRIROT
	SAVE		SAV_PLTSCL,SAV_SRISCL,SAV_SRIROT
C
	IF (ON ) THEN
C
C set FRTCOM
	   FRTFLG = 0
	   FRTHW  = 0
	   FRTHWL = 0
	   FRTWID = 0.0
	   FRTSIZ = 0.0
	   FRTTEX = .FALSE.		! don't draw in italic
	   FRTFC = -1			! FRTCOM well and truely nadjered
	   IF (WKAC(1)) CALL GDAWK(1)	! deactivate other workstations
	   IF (WKAC(2)) CALL GDAWK(2)
	   KRSING = .TRUE.		! SRIGPL -> KRISS menu plane
C
C set FRTLIB drawing scale to be 0.3 mm per unit (pixel)
C (or whatever is set in KRISS_SCALE)
	   SAV_PLTSCL = PLTSCL
	   SAV_SRISCL = SRISCL
	   SAV_SRIROT = SRIROT
	   CALL SRIUNI(KRISS_SCALE,SAV_SRISCL,SAV_SRIROT)
C
C suspend refresh flashing while we do our drawing
	   CALL CALLR(.TRUE.,%VAL(KERN_ADDRESSES(XKRISS_SUSPEND)))
	ELSE
C
C resume flashing
	   CALL CALLR(.FALSE.,%VAL(KERN_ADDRESSES(XKRISS_SUSPEND)))
C
C reset LSL$CMNFRT:SRISCL
	   CALL SRIUNI(SAV_PLTSCL,SAV_SRISCL,SAV_SRIROT)
	   KRSING = .FALSE.
	   IF (WKAC(1)) CALL GACWK(1)
	   IF (WKAC(2)) CALL GACWK(2)
	ENDIF
C
	RETURN
	END
