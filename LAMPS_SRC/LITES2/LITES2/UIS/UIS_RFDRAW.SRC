C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-09-21 11:43:14.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE RFDRAW
C
***	MODULE	RFDRAW
***	IDENT	21SE94
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author Clarke Brunt	10-August-1984
C
C To draw the refresh picture
C Vaxstation 1 version
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:CTXS/
***	PARAMETER/CMN:END/
***	PARAMETER/CMN:GKSPAR/
***	PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:PACK/
***	PARAMETER/CMN:STAPAR/
C
	INCLUDE 'LSL$CMNIFF:CB.STR'
C
***	COMMON/CMN:CSTRCT/
***	COMMON/CMN:CTXS/
***	COMMON/CMN:DRAWIN/
***	COMMON/CMN:FOLLOW/
***	COMMON/LSL$CMNFRT:FRTCOM/
***	COMMON/CMN:KERN/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:MODIFY/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:OIIH/
***	COMMON/CMN:RFCTRL/
***	COMMON/CMN:SETUP/
***	COMMON/CMN:STATE/
***	COMMON/CMN:STRIKE/
***	COMMON/CMN:VARIAT/
***	COMMON/CMN:WORKS/
C
C functions called
C
	LOGICAL		FRTFND
C w/s
C
	REAL	X,Y			! temporary coordinates
	INTEGER	WKID
	INTEGER	I
	CHARACTER*1 CHAR
	INTEGER*2 DUMMYE		! dummy I*2 variable
	LOGICAL*1 DUMMYL		! dummy L*1 variable
	LOGICAL*1 TEKFLS		! flush TEK (cursor moved)
	REAL	TXY(2,2)		! temporary coords
	LOGICAL	DSRSTOP
	DATA	DSRSTOP/.FALSE./	! testing logical
C
	DATA	DUMMYE,DUMMYL/0,.TRUE./
C
C Do nothing if no display (except perhaps track DSR)
	IF (NODISP) THEN
	   IF (DSRINI.AND..NOT.(FOLLOWING.AND.FOLLOW_WHERE.EQ.FOLLOW_DSR
     &		)) THEN
	      IF (CSXY(1).NE.OCSXY(1) .OR. CSXY(2).NE.OCSXY(2)) THEN
	         CALL DSRMOVE(.FALSE.)	! move DSR to position
	         OCSXY(1) = CSXY(1)
	         OCSXY(2) = CSXY(2)
	      ENDIF
	   ENDIF
	   GOTO 999
	ENDIF
C
C get KRISS up to date
	IF (KRSINI) THEN
	   CALL CALLR(%VAL(KERN_ADDRESSES(XKRISS_UPDATE)))
	   KRSCLR = .FALSE.	! KRISS now not cleared
	ENDIF
C
	REFNG = .FALSE.		! not yet refreshing (KRISS use below)
	TEKFLS = .FALSE.		! don't need to flush TEK
C
C Has cursor size or blinking been altered?
	IF ((RFBIG.NEQV.BIGOPT).OR.(RFBNK.NEQV.BNKOPT)) THEN
	   RFBIG = BIGOPT
	   RFBNK = BNKOPT
	   TEKFLS = .TRUE.
	ENDIF
C
C Do we need a cursor?
	IF (CURS) THEN			! yes
	   IF (.NOT.INTCUR) THEN	! not initialised yet
	      CSXY(1) = (WINDOW(1)+WINDOW(2))/2.0
	      CSXY(2) = (WINDOW(3)+WINDOW(4))/2.0
	      INTCUR = .TRUE.
	      GOTO 10
	   ENDIF
C
	   IF (CSXY(1).EQ.OCSXY(1) .AND. CSXY(2).EQ.OCSXY(2)) GOTO 20
10	   IF (DSRINI.AND..NOT.(FOLLOWING.AND.FOLLOW_WHERE.EQ.FOLLOW_DSR
     &		)) CALL DSRMOVE(.FALSE.)	! move DSR to position
	   TEKFLS = .TRUE.		! need to flush
	   IF (SINDEX.EQ.STATE_WINDOW) RUBCHG = .TRUE.
	   OCSXY(1) = CSXY(1)
	   OCSXY(2) = CSXY(2)
C
20	   IF (.NOT.RFCURS) THEN
	      RFCURS = .TRUE.
	      TEKFLS = .TRUE.
	      GOTO 450	! full regeneration to redraw FO after DRAW MAP
	   ENDIF
	ELSE
	   IF (RFCURS) THEN
	      RFCURS = .FALSE.
	      TEKFLS = .TRUE.
	   ENDIF
	ENDIF
C
	IF (RUBCHG) TEKFLS = .TRUE.
C
C do we need to clear the old refresh picture?
C
C Has the found object changed?
	IF (FO) THEN			! there is a found object
	   IF (RFFSEG.EQ.0) GOTO 450	! none drawn
	   IF ( RFFSEG.NE.FOPAK(PAKSEG).OR.	! not same item or
     &		RFFVO.NE.FOVO) GOTO 450		! different vertices
	   IF (FOVRT-RFFOFF.LE.RFCRIT) THEN	! want earlier
	      IF (RFFOFF.GT.FOVO) GOTO 450	! more available
	   ELSEIF (FOVRT-RFFOFF.GT.RFFTOP-RFCRIT) THEN	! want later
	      IF (RFFOFF+RFFTOP.LT.FOVO+FOTOP) GOTO 450	! available
	   ENDIF
C
C has cursor moved on composite text?
	   IF (FOPAK(PAKGT).EQ.TEXTYP.AND.
     &	               (RFFCTX.NE.FTRCTXD(CTXD_HOME))) GOTO 450
	ELSE				! no found object
	   IF (RFFSEG.EQ.0) GOTO 100	! and none drawn
	   IF (IH.AND.RFFSEG.EQ.IHPAK(PAKSEG)) THEN	! now in hand
	      RFHOFF = RFFOFF
	      RFHTOP = RFFTOP
	      RFFSEG = 0
	   ENDIF
	   GOTO 450
	ENDIF
C
C If moving something around and cursor moved, regenerate
100	IF (SINDEX.EQ.STATE_EDIT.AND.CHPOS.AND.TEKFLS) GOTO 450
C
C now deal with the object in hand
	IF (.NOT.IH) THEN		! no object in hand
	   IF (RFHSEG.NE.0) GOTO 450	! but one drawn
	ENDIF
C
C now deal with any construction
	IF (((SINDEX.EQ.STATE_CONSTRUCT).OR.
     &	     (SINDEX.EQ.STATE_ON.AND.NDMODE.EQ.END_INCLUDE)).AND.
     &	      CONIND.NE.0) THEN
	   IF (RFCIND.EQ.0) GOTO 450		! no construction drawn
	   IF (CONIND.NE.RFCIND) GOTO 450	! construction changed
	ELSE					! not constructing
	   IF (RFCIND.NE.0) GOTO 450		! but something drawn
	ENDIF
C
C now deal with modification
	IF ((SINDEX.EQ.STATE_READY.OR.SINDEX.EQ.STATE_MODIFY).AND.
     &		MODMOD) THEN
	   MODMOD=.FALSE.
	   GOTO 450
	ENDIF
C
C no changes to refresh buffer - any less drastic changes?
	IF (TEKFLS) THEN
	   CALL GUIS_RFSTOP		! stop refresh
	   GOTO 500			! deal with them
	ENDIF
	GOTO 999			! nothing doing
C
C Clear refresh picture
450	CALL GUIS_DISMOD(1)		! stop refresh and clear buffer
	IF (KRSINI) THEN
C
C DSRSTOP is local testing logical (can be patched)
C If DSR stops moving before refresh drawing, then less erratic
C behaviour of KRISS picture, but can result is DSR being driven
C back to last position unexpectedly. .FALSE. by default.
	   IF (DSRSTOP.AND.
     &		.NOT.(FOLLOWING.AND.FOLLOW_WHERE.EQ.FOLLOW_DSR
     &		)) CALL DSRMOVE(.TRUE.)	! wait for DSR in position
	   CALL KRISS_MODE(1)
	ENDIF
	REFNG = .TRUE.			! now refreshing
	RFFSEG = 0
	RFHSEG = 0
	RFCIND = 0
C
C preserve drawing controls
	THKSAV = THKOPT
	AKISAV = CUROPT
	PATSAV = PATOPT
C
C turn off all fancy features
	OVCOL = 1			! overriding colour 1
	THKOPT = .FALSE.
	CUROPT = .FALSE.
	PATOPT = .FALSE.
C
C draw the new refresh picture
	IF (FO) THEN			! there is a found item
C
	   RFFOFF = MIN(FOVRT-RFOFF,	! to place FOVRT at RFOFF
     &			FOLST-RFFULL)	! to place last vertex at RFFULL
	   RFFOFF = MAX(RFFOFF,FOVO)	! force into FOXY
	   RFFTOP = MIN(RFFULL,FOTOP+FOVO-RFFOFF)
C
C is it a line, curve, symbol string, or area
	   IF (	FOPAK(PAKGT).EQ.LINTYP .OR.
     &		FOPAK(PAKGT).EQ.CURTYP .OR.
     &		FOPAK(PAKGT).EQ.STRTYP .OR.
     &		FOPAK(PAKGT).EQ.ARETYP ) THEN
C
C just draw selected vertices we have in memory
	      FRTARE = .FALSE.		! refresh area as line
	      FRTFC = -1		! invalidate FRTCOM
	      CALL STDBFF(0)		! clear buffer
	      CALL STDBFA(RFFTOP,FOXY(1,RFFOFF+1-FOVO),
     &	                  FOZI(RFFOFF+1-FOVO)) ! add points
	      CALL STDBFF(2)		! flush them out
C
C add first and last markers (not on KRISS)
	      IF (KRSINI) THEN
	         KRSINI = .FALSE.
	         CALL DRAWFL
	         KRSINI = .TRUE.
	      ELSE
	         CALL DRAWFL
	      ENDIF
	   ELSE
C
C draw entire feature for circles, symbols, or text
	      IF (FRTFND(FOPAK(PAKFC))) THEN
	         CALL NASTY(MSG_BADCODE,FOPAK(PAKFC))
	         CALL COLAPS(MSG_BADCODE)
	      ENDIF
	      IF (FRTTEX) THEN				! draw text
	         CALL BOXCTX(FTRCTXD,FOPAK,DUMMYL,DUMMYL)
	         RFFCTX = FTRCTXD(CTXD_HOME)
	      ELSE					! draw symbols
	         CALL STDRAW(				! and circles	
     &		FOTOP,FOXY,FONATT,STR_MAX_ATTR,FOATTC,FOATTV,
     &		FOAUX,FOTXT(1:MAX(1,FOPTR)),
     &		DUMMYL,DUMMYL,DUMMYE,DUMMYL,FOPAK,FOFS)
	      ENDIF
	   ENDIF
	   RFFSEG = FOPAK(PAKSEG)	! have a found object refreshed
	   RFFVO = FOVO			! its vertex offset
	ENDIF
C
	IF (IH.AND.SINDEX.NE.STATE_MODIFY) THEN ! there is an
						!  object in hand
						!  that needs redrawing
C
C is it a line, curve, symbol string, or area
	   IF (	IHPAK(PAKGT).EQ.LINTYP .OR.
     &		IHPAK(PAKGT).EQ.CURTYP .OR.
     &		IHPAK(PAKGT).EQ.STRTYP .OR.
     &		IHPAK(PAKGT).EQ.ARETYP ) THEN
C
C just draw selected vertices we have in memory
	      FRTARE = .FALSE.		! refresh area as line
	      FRTFC = -1		! invalidate FRTCOM
	      IF (SINDEX.EQ.STATE_EDIT.AND.CHPOS) THEN
	         CALL RFMOVE		! moving
	      ELSE
	         CALL STDBFF(0)		! clear buffer
	         CALL STDBFA(RFHTOP,IHXY(1,RFHOFF+1-IHVO),
     &	                     IHZ(RFHOFF+1-IHVO)) ! add points
	         CALL STDBFF(2)		! flush them out
	      ENDIF
	   ELSE
C
C draw entire feature for circles, symbols, or text
	      IF (FRTFND(IHPAK(PAKFC))) THEN
	         CALL NASTY(MSG_BADCODE,IHPAK(PAKFC))
	         CALL COLAPS(MSG_BADCODE)
	      ENDIF
	      IF (FRTTEX) THEN				! draw texts
	         CALL BOXCTX(IHCTXD,IHPAK,DUMMYL,DUMMYL)
	      ELSE
	         CALL STDRAW(		! draw symbols and circles
     &		IHTOP,IHXY,0,1,0,0,IHAUX,IHTXT(1:MAX(1,IHPTR)),
     &		DUMMYL,DUMMYL,DUMMYE,DUMMYL,IHPAK,IHFS)
	      ENDIF
	   ENDIF
	   RFHSEG = IHPAK(PAKSEG)	! have object in hand refreshed
	ENDIF
C
C draw construction
	IF (((SINDEX.EQ.STATE_CONSTRUCT).OR.
     &	     (SINDEX.EQ.STATE_ON.AND.NDMODE.EQ.END_INCLUDE)).AND.
     &	      CONIND.GT.0) THEN
	   IF (CONIND.GT.1) THEN	! can't refresh a single point
	      FRTARE = .FALSE.		! refresh area as line
	      FRTFC = -1		! invalidate FRTCOM
	      RFCIND = MIN(CONIND,RFFULL) ! number to refresh
	      IF (.NOT.CONFST.OR.CONIND.GT.RFCIND) THEN
	         CALL STDBFF(0)		! clear buffer
	         CALL STDBFA(2,COTHIS,COTHISZ)! always do first vector
	         CALL STDBFF(2)		! flush them out
	      ENDIF
	      CALL STDBFF(0)		! clear buffer
	      CALL STDBFA(RFCIND,CONXY(1,CONIND-RFCIND+1), ! add points
     &	                        CONZ(CONIND-RFCIND+1))
	      CALL STDBFF(2)		! flush them out
	   ENDIF
	   RFCIND = CONIND		! have refreshed construction
C
C set up rubber band
	   RUBCHG = .TRUE.
	   RUBLIN(1) = .TRUE.
	   RUBARR(1,1) = CONXY(1,CONIND)
	   RUBARR(2,1) = CONXY(2,CONIND)
	ENDIF
C
C draw modification
	IF (SINDEX.EQ.STATE_MODIFY) THEN
C
C and draw symbol/text
C
C First fill FRTCOM as it tends to get corrupted!
	   IF (FRTFND(COIPAK(PAKFC))) THEN
	      CALL NASTY(MSG_BADCODE,COIPAK(PAKFC))
	      CALL COLAPS(MSG_BADCODE)
	   ENDIF
C
C now display symbol/text
C
	   IF (FRTTEX) THEN
	      CALL BOXCTX(COICTXD,COIPAK,DUMMYL,DUMMYL)
	   ELSE
	      CALL STDRAW(
     &	COIIND-1,COIXY(1,2),COINATT,OIH_MAX_ATTR,COIATTC,COIATTV(1,2),
     &		COIAUX,COIDSC,
     &		DUMMYL,DUMMYL,DUMMYE,DUMMYL,COIPAK,COIFS)
	   ENDIF
	ENDIF
C
C restore everything
	OVCOL = -1
	THKOPT = THKSAV
	CUROPT = AKISAV
	PATOPT = PATSAV
C
500	IF (.NOT.(WKAC(1).OR.WKAC(2))) GOTO 600	! KRISS only
	IF (RFBIG) THEN
	   CALL GUIS_CURSEL(1,RFCURS,RFBNK)
	ELSE
	   CALL GUIS_CURSEL(0,RFCURS,RFBNK)
	ENDIF
	IF (SETUP .AND. WARP_TO_IMAGE) THEN
	   TXY(1,1) = CSXY(1)
	   TXY(2,1) = CSXY(2)
	   CALL TRNUSE(TXY(1,1),TXY(2,1),SETCOF,SET_TRANSFORM)
	   CALL GUIS_CSWT(TXY(1,1),TXY(2,1))
	ELSE
	   CALL GUIS_CSWT(CSXY(1),CSXY(2))
	ENDIF
	IF (RUBCHG) THEN
	   RUBCHG = .FALSE.
	   IF (SETUP .AND. WARP_TO_IMAGE) THEN
	      TXY(1,1) = RUBARR(1,1)
	      TXY(2,1) = RUBARR(2,1)
	      TXY(1,2) = RUBARR(1,2)
	      TXY(2,2) = RUBARR(2,2)
	      CALL TRNUSE(TXY(1,1),TXY(2,1),SETCOF,SET_TRANSFORM)
	      CALL TRNUSE(TXY(1,2),TXY(2,2),SETCOF,SET_TRANSFORM)
	      CALL GUIS_SETRUB(RUBLIN,TXY,SINDEX.EQ.STATE_WINDOW)
	   ELSE
	      CALL GUIS_SETRUB(RUBLIN,RUBARR,SINDEX.EQ.STATE_WINDOW)
	   ENDIF
	ENDIF
C
C update displays
	CALL GUIS_REFRSH		! start refresh picture
600	IF (KRSINI.AND.REFNG) CALL CALLR(
     &			%VAL(KERN_ADDRESSES(XKRISS_REFRSH)))
	REFNG = .FALSE.			! no longer refreshing
C
999	RETURN
	END
C
C
	SUBROUTINE	KRISS_MODE(N)
C
**	MODULE KRISS_MODE
**	IDENT	01JN89
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Set display mode to stored or refresh
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:PACK/
***	COMMON/CMN:KERN/
***	COMMON/CMN:RFCTRL/
***	COMMON/CMN:STRIKE/
***	COMMON/CMN:WORKS/
C
C Arguments:
	INTEGER		N		! 0->stored, else refresh
C
C workspace
	LOGICAL*1	REFNG_SAV
C
C stop old refresh
	CALL CALLR(%VAL(KERN_ADDRESSES(XKRISS_RFSTOP)))
	IF (SD_TYPE.EQ.SD_DSR) GOTO 10
	CALL CALLR(N,%VAL(KERN_ADDRESSES(XKRISS_DISMOD)))
	GOTO 990
C
C draw over any spoiled features (only on KRISS, type SD_DSR)
C
C temporarily set REFNG .TRUE. to prevent STDRAW from calling STDINI
C which will call us again recursively, and also set the GPX into
C store draw mode incorrectly
10	REFNG_SAV = REFNG
	REFNG = .TRUE.
	IF (WKAC(1)) CALL GDAWK(1)
	IF (WKAC(2)) CALL GDAWK(2)
	IF (KRISS_FO) THEN
	   IF ((KRISS_FOPAK(PAKFLG).AND.LIMFLG).EQ.0
     &					) CALL DRAFTR(KRISS_FOPAK)
	   KRISS_FO = .FALSE.
	ENDIF
	IF (KRISS_IH) THEN
	   CALL DRAFTR(KRISS_IHPAK)
	   KRISS_IH = .FALSE.
	ENDIF
	IF (WKAC(1)) CALL GACWK(1)
	IF (WKAC(2)) CALL GACWK(2)
	REFNG = REFNG_SAV
	CALL CALLR(N,%VAL(KERN_ADDRESSES(XKRISS_DISMOD)))
C
	IF (N.NE.0) THEN
C
C store FO and IH packs, to enable us to draw the features back later
	   KRISS_FO = FO
	   IF (FO) CALL CPYPAK(PAKLEN,FOPAK,KRISS_FOPAK)
	   KRISS_IH = IH
	   IF (IH) CALL CPYPAK(PAKLEN,IHPAK,KRISS_IHPAK)
	ENDIF
C
990	RETURN
	END	
