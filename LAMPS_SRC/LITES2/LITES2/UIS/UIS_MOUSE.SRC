C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-08-04 14:30:54.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C
C Routines for dealing with VAXstation mouse and screen menu
C
	SUBROUTINE BUTTON_AST(ASTPRM)
C
***	IDENT	04AU93
***	MODULE	BUTTON_AST
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					CCB	14-May-1985
C
C Vaxstation 1 mouse button AST routine
C
	IMPLICIT NONE
C
***	COMMON/CMN:UIS_MOUSE/
***	COMMON/CMN:VAREFN/
C
C argument
	INTEGER*4	ASTPRM(2)
C
	EXTERNAL	MOUSE_AST
C
C workspace
	INTEGER		BUT
C
	BUT = BUTTON_TOKEN.AND.3	! actual number (0-2)
	IF (BUTTON_TOKEN.LT.0) THEN	! button is down
	   IF (BUT.EQ.0) THEN		! want mouse cursor on
	      IF (.NOT.MOUSE_ON) THEN	! not on already
	         CALL SET_MOUSE_AST(MOUSE_AST)	! switch on
	         MOUSE_ON = .TRUE.		! now on
	         CALL MOUSE_AST			! simulate motion
	      ENDIF
	   ELSE				! actual puck button
	      IF (BUTTON_NUMBER.EQ.0) THEN	! last one has been read
	         BUTTON_NUMBER = BUT
	         CALL SYS$SETEF(%VAL(FBFLG))	! set event flag
	      ENDIF
	   ENDIF
	ELSE				! button is up
	   IF (BUT.EQ.0) THEN		! want mouse cursor off
	      IF (MOUSE_ON) THEN	! on at present
	         CALL SET_MOUSE_AST(%VAL(0))	! switch off
	         MOUSE_ON = .FALSE.		! now off
	      ENDIF
	   ENDIF
	ENDIF
C
	RETURN
	END
C
	SUBROUTINE MOUSE_AST(ASTPRM)
C
***	IDENT	14JN85
***	MODULE	MOUSE_AST
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					CCB	14-May-1985
C
C Vaxstation 1 mouse movement AST routine
C
	IMPLICIT NONE
C
***	COMMON/CMN:UIS_MOUSE/
***	COMMON/CMN:VAREFN/
C
C argument
	INTEGER*4	ASTPRM(2)
C
	IF (MOUSE_ON) THEN		! still turned on
	   MOUSE_MOVE = .TRUE.		! mouse has moved
	   CALL SYS$SETEF(%VAL(TBFLG))	! set event flag
	ENDIF
C
	RETURN
	END
C
	SUBROUTINE MENU_AST(BOX)
C
***	IDENT	28AU86
***	MODULE	MENU_AST
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					CCB	14-May-1985
C
C Vaxstation menu box AST routine
C
	IMPLICIT NONE
C
***	COMMON/CMN:UIS_MOUSE/
***	COMMON/CMN:VAREFN/
C
C argument
	INTEGER*4	BOX		! menu box number
C
	IF (MENU_BOX.EQ.0) THEN		! last one has been read
	   MENU_BOX = BOX
	   CALL SYS$SETEF(%VAL(TABFLG))	! set event flag
	ENDIF
C
	RETURN
	END
C
	SUBROUTINE MOVE_AST(ASTPRM)
C
***	IDENT	04NO87
***	MODULE	MOVE_AST
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					CCB	14-May-1985
C
C Vaxstation 1 viewport moved AST routine
C
	IMPLICIT NONE
C
***	COMMON/CMN:UIS_MOUSE/
C
C argument
	INTEGER*4	ASTPRM(2)
C
	CALL GET_VIEWPORT_POSITION(XVIEW,YVIEW)
C
	RETURN
	END
C
	INTEGER FUNCTION GET_BUTTON
C
***	IDENT	14JN85
***	MODULE	GET_BUTTON
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					CCB	14-May-1985
C
C Returns non-zero button number if one has been pressed
C
	IMPLICIT NONE
C
***	COMMON/CMN:UIS_MOUSE/
***	COMMON/CMN:VAREFN/
C
	GET_BUTTON = BUTTON_NUMBER		! button number
	IF (BUTTON_NUMBER.NE.0) THEN		! one was pressed
	   BUTTON_NUMBER = 0			! clear it
	   CALL SYS$CLREF(%VAL(FBFLG))		! clear event flag
	ENDIF
C
	RETURN
	END
C
	LOGICAL*1 FUNCTION HAD_MOUSE
C
***	IDENT	14JN85
***	MODULE	HAD_MOUSE
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					CCB	14-May-1985
C
C True if mouse has moved
C
	IMPLICIT NONE
C
***	COMMON/CMN:UIS_MOUSE/
***	COMMON/CMN:VAREFN/
C
	HAD_MOUSE = MOUSE_MOVE			! has it moved
	IF (MOUSE_MOVE) THEN
	   MOUSE_MOVE = .FALSE.			! hasn't now
	   CALL SYS$CLREF(%VAL(TBFLG))		! clear event flag
	ENDIF
C
	RETURN
	END
C
	INTEGER FUNCTION GET_MENU
C
***	IDENT	14JN85
***	MODULE	GET_MENU
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					CCB	14-May-1985
C
C Returns non-zero menu box number if one probed
C
	IMPLICIT NONE
C
***	COMMON/CMN:UIS_MOUSE/
***	COMMON/CMN:VAREFN/
C
	GET_MENU = MENU_BOX			! menu box number
	IF (MENU_BOX.NE.0) THEN			! one was probed
	   MENU_BOX = 0				! clear it
	   CALL SYS$CLREF(%VAL(TABFLG))		! clear event flag
	ENDIF
C
	RETURN
	END
C
	LOGICAL FUNCTION CREATE_MENU(IER)
C
***	IDENT	27JA87
***	MODULE	CREATE_MENU
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	27-Jan-1987
C
C creates menu on screen using data stored in MENUS and
C using MENU_ routines.
C Returns .TRUE. if all is well.
C
	IMPLICIT NONE
C
C argument
	INTEGER		IER		! Return code
					! 1 = size too small
C
***	PARAMETER/CMN:MACMEN/
C
***	COMMON/CMN:MACRO/
***	COMMON/CMN:MENUS/
***	COMMON/CMN:UIS_MOUSE/
***	COMMON/CMN:VAREFN/
C
	EXTERNAL	MENU_AST
C
C functions used
	INTEGER		CPYSTR
	INTEGER*2	GET_VARWORD
	INTEGER*4	GET_VARLONG
C
	INTEGER		I
	INTEGER		P
	REAL		XSIZE,YSIZE
	REAL		ORGX,ORGY
	REAL		SIZX,SIZY
	INTEGER*4	STR_DESC(2)		! string descriptor
C
	CREATE_MENU = .FALSE.			! assume failure
C
C check for sensible size
	IF (SCRMEN_SIZX.LE.0.0.OR.SCRMEN_SIZY.LE.0.0) THEN
	   IER = 1
	   GOTO 9999
	ENDIF	   
C
C convert menu position to cm on screen for bottom left of menu
C
C get screen size in cm
	CALL UIS$GET_DISPLAY_SIZE('SYS$WORKSTATION',XSIZE,YSIZE)
C
C convert to menu position
	ORGX = XSIZE*SCRMEN_ORGX
	ORGY = YSIZE*SCRMEN_ORGY
C
C get menu size in cm
	IF (SCRMEN_SIZX.GT.1.0) THEN
	   SIZX = SCRMEN_SIZX/10.0	! in mm
	   IF (SIZX.GT.XSIZE) SIZX = XSIZE
	ELSE
	   SIZX = SCRMEN_SIZX*XSIZE	! as fraction
	ENDIF
	IF (SCRMEN_SIZY.GT.1.0) THEN
	   SIZY = SCRMEN_SIZY/10.0
	   IF (SIZY.GT.YSIZE) SIZY = YSIZE
	ELSE
	   SIZY = SCRMEN_SIZY*YSIZE
	ENDIF
C
C allow for justification
	ORGX = ORGX-SIZX/2.0*(SCRMEN_LOC/3)	! adjust x
	ORGY = ORGY-SIZY/2.0*(MOD(SCRMEN_LOC,3))! and y
C
C now create the menu
	CALL MENU_CREATE(SCRMEN_INX,SCRMEN_INY,
     &			 SIZX,SIZY,
     &			 ORGX,ORGY,
     &			 SCRMEN_TITLE(1:SCRMEN_LTIT),
     &			 MENU_AST)
C
C read an anotation for each box
	DO 4000 I=1,SCRMEN_INX*SCRMEN_INY
	   P = SCRMEN_BASE + I
	   IF (GET_VARWORD(%VAL(MANDSW_ADDR),1,P).GT.0) THEN
C
C get the descriptor out of the array
	      STR_DESC(1) = GET_VARLONG(%VAL(MANDSL_ADDR),1,P)
	      STR_DESC(2) = GET_VARLONG(%VAL(MANDSL_ADDR),2,P)
	      CALL MENU_ANNOTATE(I,STR_DESC)
	   ENDIF
4000	CONTINUE
C
	MENU_BOX = 1			! ensure menu
	CALL GET_MENU			! event flag clear
	CREATE_MENU = .TRUE.		! all OK
	IER = 0
C
C
9999	CONTINUE
	RETURN
	END
