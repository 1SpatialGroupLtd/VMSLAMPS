	SUBROUTINE RFDRAW
C
***	MODULE	RFDRAW
***	IDENT	12DE89
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author Clarke Brunt	10-August-1984
C
C To draw the refresh picture
C Contains routines specific to GKSLDLIB and Sigma ARGS and TEK
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:CTXS/
***	PARAMETER/CMN:END/
***	PARAMETER/CMN:GKSPAR/
***	PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:PACK/
***	PARAMETER/CMN:STAPAR/
C
***	COMMON/CMN:CSTRCT/
***	COMMON/CMN:CTXS/
***	COMMON/CMN:DRAWIN/
***	COMMON/LSL$CMNFRT:FRTCOM/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:MODIFY/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:OIIH/
***	COMMON/CMN:RFCTRL/
***	COMMON/CMN:STATE/
***	COMMON/CMN:STRIKE/
***	COMMON/CMN:WORKS/
***	COMMON/CMN:VARIAT/
C
C functions called
C
	LOGICAL		FRTFND
C w/s
C
	REAL	X,Y			! temporary coordinates
	INTEGER	WKID
	INTEGER	I
	CHARACTER*1 CHAR
	INTEGER*2 DUMMYE		! dummy I*2 variable
	LOGICAL*1 DUMMYL		! dummy L*1 variable
	LOGICAL*1 TEKFLS		! flush TEK (cursor moved)
	LOGICAL*1 VSFLS			! ARGS (cursor moved)
C
	DATA	DUMMYE,DUMMYL/0,.TRUE./
C
C Do nothing if no display
	IF (NODISP) GOTO 999
C
	TEKFLS = .FALSE.		! don't need to flush TEK
	VSFLS = .FALSE.			! or ARGS
C
C Do we need a cursor?
	IF (CURS) THEN			! yes
	   IF (.NOT.INTCUR) THEN	! not initialised yet
	      CSXY(1) = (WINDOW(1)+WINDOW(2))/2.0
	      CSXY(2) = (WINDOW(3)+WINDOW(4))/2.0
	      INTCUR = .TRUE.
	      GOTO 10
	   ENDIF
C
	   IF (CSXY(1).EQ.OCSXY(1) .AND. CSXY(2).EQ.OCSXY(2)) GOTO 20
10	   IF (SINDEX.EQ.STATE_WINDOW) RUBCHG = .TRUE.
C
C If moving something around, then cause a regeneration
	   IF (SINDEX.EQ.STATE_EDIT.AND.CHPOS) RUBCHG = .TRUE.
	   DO 15 WKID=1,WSMAX
	      IF (.NOT.WKAC(WKID)) GOTO 15
	      CALL GKSW2D(WKID,CSXY(1),CSXY(2),X,Y)
	      GOTO (17,18),WKID
17	      IF (WTYPES(1).NE.4014) CALL CSWT(X,Y)		! TEK
	      TEKFLS = .TRUE.		! need to flush
	      GOTO 15
18	      CALL VSCSWT(X,Y)		! ARGS
	      VSFLS = .TRUE.
15	   CONTINUE
	   OCSXY(1) = CSXY(1)
	   OCSXY(2) = CSXY(2)
C
20	   IF (.NOT.RFCURS) THEN
	      IF (WKAC(2)) CALL VSCURS(1)
	      RFCURS = .TRUE.
	      IF (WKAC(1)) GOTO 450
	   ENDIF
	ELSE
	   IF (RFCURS) THEN
	      IF (WKAC(2)) CALL VSCURS(0)
	      RFCURS = .FALSE.
	      IF (WKAC(1)) GOTO 450
	   ENDIF
	ENDIF
C
C do we need to clear the old refresh picture?
C
C has cursor size or blinking changed?
	IF (RFBIG.NEQV.BIGOPT.OR.RFBNK.NEQV.BNKOPT) GOTO 450
C
C Has the found object changed?
	IF (FO) THEN			! there is a found object
	   IF (RFFSEG.EQ.0) GOTO 450	! none drawn
	   IF ( RFFSEG.NE.FOPAK(PAKSEG).OR.	! not same item or
     &		RFFVO.NE.FOVO) GOTO 450		! different vertices
	   IF (FOVRT-RFFOFF.LE.RFCRIT) THEN	! want earlier
	      IF (RFFOFF.GT.FOVO) GOTO 450	! more available
	   ELSEIF (FOVRT-RFFOFF.GT.RFFTOP-RFCRIT) THEN	! want later
	      IF (RFFOFF+RFFTOP.LT.FOVO+FOTOP) GOTO 450	! available
	   ENDIF
C
C has cursor moved on composite text?
	   IF (FOPAK(PAKGT).EQ.TEXTYP.AND.
     &	               (RFFCTX.NE.FTRCTXD(CTXD_HOME))) GOTO 450
	ELSE				! no found object
	   IF (RFFSEG.EQ.0) GOTO 100	! and none drawn
	   IF (IH.AND.RFFSEG.EQ.IHPAK(PAKSEG)) THEN	! now in hand
	      RFHOFF = RFFOFF
	      RFHTOP = RFFTOP
	      RFFSEG = 0
	   ENDIF
	   GOTO 450
	ENDIF
C
C now deal with the object in hand
100	IF (.NOT.IH) THEN		! no object in hand
	   IF (RFHSEG.NE.0) GOTO 450	! but one drawn
	ENDIF
C
C now deal with any construction
	IF (((SINDEX.EQ.STATE_CONSTRUCT).OR.
     &	     (SINDEX.EQ.STATE_ON.AND.NDMODE.EQ.END_INCLUDE)).AND.
     &	      CONIND.NE.0) THEN
	   IF (RFCIND.EQ.0) GOTO 450		! no construction drawn
	   IF (CONIND.NE.RFCIND) GOTO 450	! construction changed
	ELSE					! not constructing
	   IF (RFCIND.NE.0) GOTO 450		! but something drawn
	ENDIF
C
C now deal with modification
	IF ((SINDEX.EQ.STATE_READY.OR.SINDEX.EQ.STATE_MODIFY).AND.
     &		MODMOD) THEN
	   MODMOD=.FALSE.
	   GOTO 450
	ENDIF
C
C Has rubber banding changed?
	IF (RUBCHG) GOTO 450		! yes
C
C always draw alpha cursor, if on 4014, as it can be left at edge of
C screen so easily
	IF (WKAC(1).AND.WTYPES(1).EQ.4014) THEN	! move alpha cursor
	   CALL GKSW2D(1,CSXY(1),CSXY(2),X,Y)
	   CALL MOVTO(X,Y)
	   CALL LDFLSH
	   CALL LDWAIT
	ELSEIF (TEKFLS) THEN
	   CALL LDWAIT		! flush TEK (cursor and RB lines)
	ENDIF
C
	IF (VSFLS.AND.(RUBLIN(1).OR.RUBLIN(2))) THEN
	   CALL VSDEF(2,1,5)
	   CALL VSPIC(2)
	   CALL VSCLR(2)
	   OVCOL = 1
	   FRTARE = .FALSE.		! not an area
	   FRTSYM = .FALSE.		! or a symbol
	   FRTTEX = .FALSE.		! or a text
	   FRTFC = -1			! invalidate FRTCOM
	   CALL SETCOL			! set polyline colour
	   CALL RFBAND(2)
	   OVCOL = -1
	   CALL GUWK(2,GSUPP)		! should acheive a VSGEN
	   CALL VSPIC(1)
	   CALL VSDEF(2,4,4)
	ENDIF
C
	GOTO 999			! nothing changed
C
C Clear refresh picture
450	REFNG = .TRUE.			! now refreshing
C
C Has cursor size been altered?
	IF (WKAC(1).AND.WTYPES(1).NE.4014) THEN
	   CALL DISMOD(1)		! select refresh
	   IF (RFBIG.NEQV.BIGOPT) THEN
	      IF (BIGOPT) THEN
	         CALL CURSEL(1)
	      ELSE
	         CALL CURSEL(0)
	      ENDIF
	   ENDIF
	   IF (RFCURS) THEN
	      IF (BNKOPT) THEN
	         CALL RFBLNK('5555'X)
	      ELSE
	         CALL RFBEND
	      ENDIF
	      CALL CURSOR		! add cursor
	   ENDIF
	ENDIF
	IF (WKAC(2)) THEN
	   CALL VSCLR(2)		! clear refresh
	   CALL VSPIC(2)		! select refresh picture
	ENDIF
	RFBIG = BIGOPT
	RFBNK = BNKOPT
	RFFSEG = 0
	RFHSEG = 0
	RFCIND = 0
C
C preserve drawing controls
	THKSAV = THKOPT
	AKISAV = CUROPT
	PATSAV = PATOPT
C
C turn off all fancy features
	OVCOL = 1			! overriding colour 1
	THKOPT = .FALSE.
	CUROPT = .FALSE.
	PATOPT = .FALSE.
	IF (WKAC(2)) THEN		! set overriding colour for ARGS
	   FRTARE = .FALSE.		! not an area
	   FRTSYM = .FALSE.		! or a symbol
	   FRTTEX = .FALSE.		! or a text
	   FRTFC = -1			! invalidate FRTCOM
	   CALL SETCOL			! set polyline colour
	ENDIF
CCCC	CALL SETLIN			! clear thick lines (no point)
C
C draw the new refresh picture
	IF (FO) THEN			! there is a found item
C
	   IF (WKAC(1).AND.WTYPES(1).NE.4014) CALL RFBLNK('5555'X)
	   RFFOFF = MIN(FOVRT-RFOFF,	! to place FOVRT at RFOFF
     &			FOLST-RFFULL)	! to place last vertex at RFFULL
	   RFFOFF = MAX(RFFOFF,FOVO)	! force into FOXY
	   RFFTOP = MIN(RFFULL,FOTOP+FOVO-RFFOFF)
C
C is it a line, curve, symbol string, or area
	   IF (	FOPAK(PAKGT).EQ.LINTYP .OR.
     &		FOPAK(PAKGT).EQ.CURTYP .OR.
     &		FOPAK(PAKGT).EQ.STRTYP .OR.
     &		FOPAK(PAKGT).EQ.ARETYP ) THEN
C
C just draw selected vertices we have in memory
	      FRTARE = .FALSE.		! refresh area as line
	      FRTFC = -1		! invalidate FRTCOM
	      CALL STDBFF(0)		! clear buffer
	      CALL STDBFA(RFFTOP,FOXY(1,RFFOFF+1-FOVO),
     &	                  FOZI(RFFOFF+1-FOVO)) ! add points
	      CALL STDBFF(2)		! flush them out
C
C add first and last markers
	      DO 515 WKID=1,WSMAX
	         IF (.NOT.WKAC(WKID)) GOTO 515
	         IF (WTYPES(WKID).EQ.4014) GOTO 515
	         DO 519 I=0,1
	            IF (I.EQ.0) THEN
	               CALL GKSW2D(WKID,FOTHAT(1),FOTHAT(2),X,Y)
	               CHAR = 'L'
	            ELSE
	               CALL GKSW2D(WKID,FOTHIS(1),FOTHIS(2),X,Y)
	               CHAR = 'F'
	            ENDIF
	            GOTO (517,518),WKID
517	            CALL MOVTO(X,Y)		! TEK
	            CALL CHARS(CHAR)
	            GOTO 519
518	            CALL VSMTO(X,Y)		! ARGS
	            CALL VSCHRS(CHAR)
519	         CONTINUE
515	      CONTINUE
	   ELSE
C
C draw entire feature for circles, symbols, or text
	      IF (FRTFND(FOPAK(PAKFC))) THEN
	         CALL NASTY(MSG_BADCODE,FOPAK(PAKFC))
	         CALL COLAPS(MSG_BADCODE)
	      ENDIF
	      IF (FRTTEX) THEN				! draw text
	         CALL BOXCTX(FTRCTXD,FOPAK,.FALSE.,
     &	                  FTRCTXD(CTXD_NCTX).GT.1)
	         RFFCTX = FTRCTXD(CTXD_HOME)
	      ELSE					! draw symbols
	         CALL STDRAW(				! and circles	
     &		FOTOP,FOXY,FONATT,STR_MAX_ATTR,FOATTC,FOATTV,
     &		FOAUX,FOTXT(1:MAX(1,FOPTR)),
     &		DUMMYL,DUMMYL,DUMMYE,DUMMYL,FOPAK,FOFS)
	      ENDIF
	   ENDIF
	   RFFSEG = FOPAK(PAKSEG)	! have a found object refreshed
	   RFFVO = FOVO			! its vertex offset
C
	   IF (WKAC(1).AND.WTYPES(1).NE.4014) CALL RFBEND
	ENDIF
C
	IF (IH.AND.SINDEX.NE.STATE_MODIFY) THEN ! there is an
						!  object in hand
						!  that needs redrawing
C
C is it a line, curve, symbol string, or area
	   IF (	IHPAK(PAKGT).EQ.LINTYP .OR.
     &		IHPAK(PAKGT).EQ.CURTYP .OR.
     &		IHPAK(PAKGT).EQ.STRTYP .OR.
     &		IHPAK(PAKGT).EQ.ARETYP ) THEN
C
C just draw selected vertices we have in memory
	      FRTARE = .FALSE.		! refresh area as line
	      FRTFC = -1		! invalidate FRTCOM
	      IF (SINDEX.EQ.STATE_EDIT.AND.CHPOS) THEN
	         CALL RFMOVE		! moving
	      ELSE
	         CALL STDBFF(0)		! clear buffer
	         CALL STDBFA(RFHTOP,IHXY(1,RFHOFF+1-IHVO),
     &	                     IHZ(RFHOFF+1-IHVO)) ! add points
	         CALL STDBFF(2)		! flush them out
	      ENDIF
	   ELSE
C
C draw entire feature for circles, symbols, or text
	      IF (FRTFND(IHPAK(PAKFC))) THEN
	         CALL NASTY(MSG_BADCODE,IHPAK(PAKFC))
	         CALL COLAPS(MSG_BADCODE)
	      ENDIF
	      IF (FRTTEX) THEN				! draw texts
	         CALL BOXCTX(IHCTXD,IHPAK,.FALSE.,
     &	                     IHCTXD(CTXD_NCTX).GT.1)
	      ELSE
	         CALL STDRAW(		! draw symbols and circles
     &		IHTOP,IHXY,0,1,0,0,IHAUX,IHTXT(1:MAX(1,IHPTR)),
     &		DUMMYL,DUMMYL,DUMMYE,DUMMYL,IHPAK,IHFS)
	      ENDIF
	   ENDIF
	   RFHSEG = IHPAK(PAKSEG)	! have object in hand refreshed
	ENDIF
C
C draw construction
	IF (((SINDEX.EQ.STATE_CONSTRUCT).OR.
     &	     (SINDEX.EQ.STATE_ON.AND.NDMODE.EQ.END_INCLUDE)).AND.
     &	      CONIND.GT.0) THEN
	   IF (CONIND.GT.1) THEN	! can't refresh a single point
	      FRTARE = .FALSE.		! refresh area as line
	      FRTFC = -1		! invalidate FRTCOM
	      CALL STDBFF(0)		! clear buffer
	      RFCIND = MIN(CONIND,RFFULL) ! number to refresh
	      CALL STDBFA(RFCIND,CONXY(1,CONIND-RFCIND+1), ! add points
     &	                        CONZ(CONIND-RFCIND+1))
	      CALL STDBFF(2)		! flush them out
	   ENDIF
	   RFCIND = CONIND		! have refreshed construction
C
C set up rubber band
	   RUBLIN(1) = .TRUE.
	   RUBARR(1,1) = CONXY(1,CONIND)
	   RUBARR(2,1) = CONXY(2,CONIND)
	ENDIF
C
C draw modification
	IF (SINDEX.EQ.STATE_MODIFY) THEN
C
C and draw symbol/text
C
C First fill FRTCOM as it tends to get corrupted!
	   IF (FRTFND(COIPAK(PAKFC))) THEN
	      CALL NASTY(MSG_BADCODE,COIPAK(PAKFC))
	      CALL COLAPS(MSG_BADCODE)
	   ENDIF
C
C now display symbol/text
C
	   IF (FRTTEX) THEN
	      CALL BOXCTX(COICTXD,COIPAK,NDMODE.EQ.END_MOVE,
     &	                  COICTXD(CTXD_NCTX).GT.1)
	   ELSE
C
C dectivate non-muart TEK
	      IF (WKAC(1).AND.WTYPES(1).EQ.4014) CALL GDAWK(1)
	      CALL STDRAW(
     &	COIIND-1,COIXY(1,2),COINATT,OIH_MAX_ATTR,COIATTC,COIATTV(1,2),
     &		COIAUX,COIDSC,
     &		DUMMYL,DUMMYL,DUMMYE,DUMMYL,COIPAK,COIFS)
C
C reactivate non_muart TEK
	      IF (WKOP(1).AND.WTYPES(1).EQ.4014) CALL GACWK(1)
	   ENDIF
	ENDIF
C
C draw rubber band lines
	RUBCHG = .FALSE.
	IF (RUBLIN(1).OR.RUBLIN(2)) THEN
	   IF (WKAC(1).AND.WTYPES(1).NE.4014) CALL RFBAND(1)
	   IF (WKAC(2)) THEN
	      CALL VSDEF(2,1,5)
	      CALL RFBAND(2)
	      CALL VSDEF(2,4,4)
	   ENDIF
	ENDIF
C
C restore everything
	OVCOL = -1
	THKOPT = THKSAV
	CUROPT = AKISAV
	PATOPT = PATSAV
C
C update displays
	IF (WKAC(1)) THEN
	   IF (WTYPES(1).NE.4014) THEN
	      CALL REFRSH			! start refresh picture
C put cursor at cursor position, on TEK 4014. (even if .NOT. CURS and no
C cursor required, as it had better be somewhere)
	   ELSE
	      CALL GKSW2D(1,CSXY(1),CSXY(2),X,Y)
	      CALL MOVTO(X,Y)
	      CALL LDFLSH
	      CALL LDWAIT
	   ENDIF
	ENDIF
	IF (WKAC(2)) THEN
	   CALL GUWK(2,GSUPP)		! should acheive a VSGEN
	   CALL VSPIC(1)
	ENDIF
C
	REFNG = .FALSE.			! no longer refreshing
C
999	RETURN
	END
