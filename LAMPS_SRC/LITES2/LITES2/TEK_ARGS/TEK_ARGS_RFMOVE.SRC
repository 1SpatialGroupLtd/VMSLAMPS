	SUBROUTINE RFMOVE
C
***	MODULE	RFMOVE
***	IDENT	14FE92
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author Clarke Brunt	7-April-1986
C
C To draw the refresh of object in hand being moved around
C Contains routines specific to GKSLDLIB and Sigma ARGS and TEK
C
	IMPLICIT NONE
C
***	COMMON/CMN:STDBFC/
C
C this is a jacket routine that passes the drawing buffers to the
C routine that does the work
C
	CALL RFMOVE_SUB(STDBFM,%VAL(STDBFX_ADDR),%VAL(STDBFY_ADDR))

C
	RETURN
	END

	SUBROUTINE RFMOVE_SUB(LENGTH,STDBFX,STDBFY)
C
***	MODULE	RFMOVE_SUB
***	IDENT	14FE92
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author Clarke Brunt	7-April-1986
C
C To draw the refresh of object in hand being moved around
C Contains routines specific to GKSLDLIB and Sigma ARGS and TEK
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:PACK/
C
***	COMMON/CMN:MASTER/
***	COMMON/CMN:RFCTRL/
***	COMMON/CMN:STDBFC/
***	COMMON/CMN:STRIKE/
***	COMMON/CMN:VARIAT/
***	COMMON/CMN:WORKS/
C
C arguments
	INTEGER	LENGTH
	REAL	STDBFX(LENGTH)
	REAL	STDBFY(LENGTH)
C
C w/s
	REAL	DX,DY		! amount to shift by
	REAL	X,Y		! new coordinate
	INTEGER	I
C
C Want to refresh RFHTOP vertices from IHXY starting at RFHOFF+1-IHVO
C TEK definately active, ARGS might be
C
C calculate shift
	DX = CSXY(1) - CHCSXY(1)
	DY = CSXY(2) - CHCSXY(2)
C
	CALL STDBFF(0)				! clear buffer
C
C Fill up the output buffer
	DO 20 I=1,MIN(RFHTOP,LENGTH)
	   STDBFP = STDBFP+1
	   STDBFX(STDBFP) = IHXY(1,RFHOFF-IHVO+I)+DX
	   STDBFY(STDBFP) = IHXY(2,RFHOFF-IHVO+I)+DY
20	CONTINUE
C
C deal with the TEK
	IF (WKAC(1).AND.(WTYPES(1).NE.4014)) THEN
	   CALL MOVTOC
	   CALL GW2D(1,STDBFX(1)-CSXY(1),STDBFY(1)-CSXY(2),X,Y)
	   CALL MOVBY(X,Y)
	   DO 30 I=2,STDBFP
	     CALL GW2D(1,STDBFX(I)-STDBFX(I-1),STDBFY(I)-STDBFY(I-1),X,Y)
	     CALL LINBY(X,Y)
30	   CONTINUE
	ENDIF
C
C deal with the ARGS
	IF (WKAC(2)) THEN
	   IF (WKAC(1)) CALL GDAWK(1)
	   CALL STDBFF(2)		! flush them out
	   IF (WKOP(1)) CALL GACWK(1)
	ENDIF
C
	RETURN
	END
