C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-12-13 11:28:06.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE RFDRAW
C
***	MODULE	RFDRAW
***	IDENT	13DE89
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author Clarke Brunt	10-August-1984
C
C To draw the refresh picture
C Contains routines specific to Sigma 6100 for now
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:CTXS/
***	PARAMETER/CMN:END/
***	PARAMETER/CMN:GKSPAR/
***	PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:PACK/
***	PARAMETER/CMN:SIGMA6100/
***	PARAMETER/CMN:STAPAR/
C
	INCLUDE 'LSL$CMNIFF:CB.STR'
C
***	COMMON/CMN:CSTRCT/
***	COMMON/CMN:CTXS/
***	COMMON/CMN:DRAWIN/
***	COMMON/CMN:FCS/
***	COMMON/LSL$CMNFRT:FRTCOM/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:MODIFY/
***	COMMON/CMN:OIIH/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:RFCTRL/
***	COMMON/CMN:STATE/
***	COMMON/CMN:STRIKE/
***	COMMON/CMN:WORKS/
***	COMMON/CMN:VARIAT/
C
C functions called
	LOGICAL	FRTFND
C
C w/s
	INTEGER SIZPAR,BNKPAR		! arguments for WSCURS
	REAL	X,Y			! temporary coordinates
	INTEGER IX,IY
	INTEGER	WKID
	LOGICAL*1 UPDATE		! need to update workstation
	INTEGER*2 DUMMYE		! dummy I*2 variable
	LOGICAL*1 DUMMYL		! dummy L*1 variable
	DATA	DUMMYE,DUMMYL/0,.TRUE./
C
C Do nothing if no display
	IF (NODISP) GOTO 999
C
	UPDATE = .FALSE.		! assume no update
C
C Has cursor size been altered?
	IF (RFBIG.NEQV.BIGOPT) THEN
	   CALL STDINI			! zap old cursor
	   RFBIG = BIGOPT
	   RFCURS = .NOT.CURS		! force update
	ENDIF
C
C Has cursor blinkingness been altered?
	IF (RFBNK.NEQV.BNKOPT) THEN
	   CALL STDINI			! zap old cursor
	   RFBNK = BNKOPT
	   RFCURS = .NOT.CURS		! force update
	ENDIF
C
C Do we need a cursor?
	IF (CURS) THEN			! yes
C
	   IF (.NOT.RFCURS) THEN	! cursor not on, so turn on
	      IF (RFBIG) THEN
	         SIZPAR = 1
	      ELSE
	         SIZPAR = 0
	      ENDIF
	      IF (RFBNK) THEN
	         BNKPAR = 1
	      ELSE
	         BNKPAR = 0
	      ENDIF
	      IF (BITINI) THEN
	         CALL WSMKSC(30+SIZPAR*225)
	         OCSXY(1) = CSXY(1)+1.0	! ensure rewrite
	      ELSE
	         CALL WSCURS(7,SIZPAR,BNKPAR,1,0,0)
	      ENDIF
	      RFCURS = .TRUE.
	      UPDATE = .TRUE.
	   ENDIF
C
	   IF (.NOT.INTCUR) THEN	! cursor not initialised yet
	      CSXY(1) = (WINDOW(1)+WINDOW(2))/2.0
	      CSXY(2) = (WINDOW(3)+WINDOW(4))/2.0
	      INTCUR = .TRUE.
	      GOTO 10
	   ENDIF
C
C has the cursor moved?
	   IF (CSXY(1).EQ.OCSXY(1) .AND. CSXY(2).EQ.OCSXY(2)) GOTO 20
10	   IF (BITINI) THEN
	      CALL WSXORM(.TRUE.)
	      IF (RFCSEG) THEN
	         IF (RFBNK) CALL GSHLIT(CU_SEG,GNORML)
	         CALL GDSG(CU_SEG)
	      ENDIF
	      CALL GCRSG(CU_SEG)
	      CALL WDSGCM(CU_SEG,1)
	      CALL GKSW2V(1,CSXY(1),CSXY(2),IX,IY)
	      CALL WPM(1,IX,IY)
	      CALL GCLSG
	      IF (RFBNK) CALL GSHLIT(CU_SEG,GHILIT)
	      CALL WSXORM(.FALSE.)
	      RFCSEG = .TRUE.
	   ELSE
	      CALL GMOVCR(CSXY(1),CSXY(2))
	   ENDIF
	   OCSXY(1) = CSXY(1)
	   OCSXY(2) = CSXY(2)
	   RUBCHG = .TRUE.
	   UPDATE = .TRUE.
C
	ELSE					! don't want cursor
	   IF (RFCURS) THEN			! but on, so turn off
	      IF (BITINI) THEN
	         CALL STDINI			! zap old cursor
	      ELSE
	         CALL WSCURS(0,0,0,0,0,0)
	      ENDIF
	      RFCURS = .FALSE.
	   ENDIF
	ENDIF
C
C do we need to get rid of old found object?
20	IF (RFFSEG.NE.0) THEN			! found item drawn
	   IF (.NOT.FO) THEN			! but no found item
C
C unless old found object is now in hand, then un-highlight it
C NB assume that object in hand is always previous found object
C Don't highlight objects in hand when in MODIFY state
	      IF (IH.AND.(RFFSEG.EQ.IHPAK(PAKSEG)).AND.
     &			 (SINDEX.NE.STATE_MODIFY) ) THEN
	         RFHSEG = RFFSEG	! now refresh as in hand
	         RFHOFF = RFFOFF
	         RFHTOP = RFFTOP
	         IF (.NOT.USESEG.OR.RFFSEP) THEN
	            CALL WRENSG(FO_SEG,IH_SEG)
	            IF (RFFSEP) RFHSEP = .TRUE.
	         ENDIF
	         GOTO 35
	      ENDIF
	   ENDIF
C
	   IF (USESEG.AND..NOT.RFFSEP) THEN
	      IF (FO.AND.RFFSEG.EQ.FOPAK(PAKSEG)) GOTO 40	! same
C
C If this segment was set visible especially just to highlight it, then
C set it back invisible again
	      IF (RFFLIM) THEN
	         CALL WSSELM(.TRUE.)		! set selective erase
	         CALL GSVIS(RFFSEG,GINVIS)	! reset invisible
	         CALL WSSELM(.FALSE.)
	      ENDIF
	      CALL GSHLIT(RFFSEG,GNORML)	! not highlighted
	   ELSE
	      IF (.NOT.FO) GOTO 30
	      IF ( RFFSEG.NE.FOPAK(PAKSEG).OR.	! not same item or
     &		   RFFVO.NE.FOVO) GOTO 30	! different vertices
	      IF (FOVRT-RFFOFF.LE.RFCRIT) THEN	! want earlier
	         IF (RFFOFF.GT.FOVO) GOTO 30	! more available
	      ELSEIF (FOVRT-RFFOFF.GT.RFFTOP-RFCRIT) THEN ! want later
	         IF (RFFOFF+RFFTOP.LT.FOVO+FOTOP) GOTO 30 ! available
	      ENDIF
C
C has cursor moved on composite text?
	   IF (FOPAK(PAKGT).EQ.TEXTYP.AND.
     &	               (RFFCTX.NE.FTRCTXD(CTXD_HOME))) GOTO 30
	      GOTO 40
C
30	      CALL GSHLIT(FO_SEG,GNORML)
	      CALL GDSG(FO_SEG)
	   ENDIF
C
C remove F/L markers (since found object removed)
35	   IF (RFLSEG) THEN
	      CALL GSHLIT(FL_SEG,GNORML)
	      CALL GDSG(FL_SEG)
	      RFLSEG = .FALSE.
	   ENDIF
	   UPDATE = .TRUE.
	   RFFSEP = .FALSE.
	   RFFSEG = 0
	ENDIF
C
C do we need to get rid of old object in hand
40	IF (RFHSEG.NE.0) THEN		! have object in hand drawn
	   IF (.NOT.IH) GOTO 50		! but no object in hand
C
C If moving a line feature, and some movement, then remove
	   IF (RUBCHG.AND.SINDEX.EQ.STATE_EDIT.AND.CHPOS) GOTO 50
	   IF (RFHSEG.EQ.IHPAK(PAKSEG)) GOTO 60	! same item
C
C RFHSEP is true if object in hand has a separate segment despite USESEG
50	   IF (USESEG.AND..NOT.RFHSEP) THEN
	      CALL GSHLIT(RFHSEG,GNORML)	! not highlighted
	   ELSE
	      CALL GSHLIT(IH_SEG,GNORML)
	      CALL GDSG(IH_SEG)
	   ENDIF
	   UPDATE = .TRUE.
	   RFHSEG = 0			! no object in hand drawn
	   RFHSEP = .FALSE.
	ENDIF
C
C now deal with any construction
60	IF (RFCIND.NE.0) THEN			! contruction drawn
	   IF (((SINDEX.NE.STATE_CONSTRUCT).AND.
     &	        (SINDEX.NE.STATE_ON.OR.NDMODE.NE.END_INCLUDE)).OR.
     &	         CONIND.EQ.0.OR.CONIND.NE.RFCIND) THEN
	      CALL GSHLIT(CT_SEG,GNORML)
	      CALL GDSG(CT_SEG)
	      UPDATE = .TRUE.
	      RFCIND = 0
	   ENDIF
	ENDIF
C
C ensure old rubber band is removed when construction changes
	IF (((SINDEX.EQ.STATE_CONSTRUCT).OR.
     &	     (SINDEX.EQ.STATE_ON.AND.NDMODE.EQ.END_INCLUDE)).AND.
     &	      CONIND.NE.RFCIND			) RUBCHG = .TRUE.
C
C now deal with modification
     	IF (RFMOD.AND.MODMOD) THEN
	   CALL GSHLIT(MD_SEG,GNORML)
	   CALL GDSG(MD_SEG)
	   UPDATE = .TRUE.
	   RFMOD = .FALSE.
	ENDIF
C
C Has rubber banding changed?
	IF (RFRUB.AND.RUBCHG) THEN
	   CALL GSHLIT(RB_SEG,GNORML)
	   CALL GDSG(RB_SEG)
	   UPDATE = .TRUE.
	   RFRUB = .FALSE.
	ENDIF
C
C Is there anything to draw?
	IF (.NOT.( (FO.AND.RFFSEG.EQ.0) .OR.
     &		   (IH.AND.RFHSEG.EQ.0.AND.SINDEX.EQ.STATE_EDIT
     &					.AND.CHPOS) .OR.
     &		   (((SINDEX.EQ.STATE_CONSTRUCT).OR.
     &		     (SINDEX.EQ.STATE_ON.AND.NDMODE.EQ.END_INCLUDE)).AND.
     &		      CONIND.GT.0.AND.RFCIND.EQ.0) .OR.
     &		   (SINDEX.EQ.STATE_MODIFY.AND.MODMOD) .OR.
     &		   ((RUBLIN(1).OR.RUBLIN(2)).AND..NOT.RFRUB) )) GOTO 990
C
C preserve drawing controls
	THKSAV = THKOPT
	AKISAV = CUROPT
	PATSAV = PATOPT
C
C turn off all fancy features
	OVCOL = 0			! overriding colour 0
	THKOPT = .FALSE.
	CUROPT = .FALSE.
	PATOPT = .FALSE.
	FRTARE = .FALSE.		! not an area
	FRTSYM = .FALSE.		! or a symbol
	FRTTEX = .FALSE.		! or a text
	FRTFC = -1			! invalidate FRTCOM
	CALL SETCOL			! set polyline colour
	FRTSYM = .TRUE.			! pretend symbol
	CALL SETCOL			! set symbol/text colour
	CALL SETLIN			! clear thick lines (no point)
	CALL WSXORM(.TRUE.)
	REFNG = .TRUE.			! inform STDRAW now refreshing
C
C do we need to draw anything?
	IF (FO.AND.RFFSEG.EQ.0) THEN	! there is a found item
	   UPDATE = .TRUE.
	   RFFSEG = FOPAK(PAKSEG)	! have a found object refreshed
	   RFFVO = FOVO			! its vertex offset
	   RFFOFF = MIN(FOVRT-RFOFF,	! to place FOVRT at RFOFF
     &			FOLST-RFFULL)   ! to place last vertex at RFFULL
	   RFFOFF = MAX(RFFOFF,FOVO)	! force into FOXY
	   RFFTOP = MIN(RFFULL,FOTOP+FOVO-RFFOFF)
C
C check if segment exists
	   IF (USESEG) THEN
	      RFFSEP = (FOPAK(PAKFLG).AND.SEGFLG).EQ.0
	   ENDIF
C
	   IF (USESEG.AND..NOT.RFFSEP) THEN
C
C We need to remember if this refresh item was previously invisible,
C so that it can be set back invisible if required.
C It will be invisble if in limbo, unless limbo features visible
	      RFFLIM = .FALSE.		! found object not in limbo
	      IF (((FOPAK(PAKFLG).AND.LIMFLG).NE.0).AND..NOT.DELVIS)
     &							RFFLIM = .TRUE.
	      IF (RFFLIM) THEN
	         CALL WSSELM(.TRUE.)		! selective erase on
	         CALL GSVIS(RFFSEG,GVISI)	! make visible
	         CALL WSSELM(.FALSE.)
	      ENDIF
	      CALL GSHLIT(RFFSEG,GHILIT)	! highlight it
	   ELSE				! not using segments
	      CALL GCRSG(FO_SEG)
	      CALL WDSGCM(FO_SEG,1)
C
C is it a line, curve, symbol string, or area
	      IF (FOPAK(PAKGT).EQ.LINTYP .OR.
     &		  FOPAK(PAKGT).EQ.CURTYP .OR.
     &		  FOPAK(PAKGT).EQ.STRTYP .OR.
     &		  FOPAK(PAKGT).EQ.ARETYP ) THEN
C
C just draw selected vertices we have in memory
	         FRTARE = .FALSE.	! refresh area as line
	         FRTFC = -1		! invalidate FRTCOM
	         CALL STDBFF(0)		! clear buffer
	         CALL STDBFA(RFFTOP,FOXY(1,RFFOFF+1-FOVO),
     &	                  FOZI(RFFOFF+1-FOVO)) ! add points
	         CALL STDBFF(2)		! flush them out
	      ELSE
C
C draw entire feature for circles, symbols, or text
	         IF (FRTFND(FOPAK(PAKFC))) THEN
	            CALL NASTY(MSG_BADCODE,FOPAK(PAKFC))
	            CALL COLAPS(MSG_BADCODE)
	         ENDIF
	         IF (FRTTEX) THEN		! draw text
	            CALL BOXCTX(FTRCTXD,FOPAK,DUMMYL,DUMMYL)
	            RFFCTX = FTRCTXD(CTXD_HOME)
	         ELSE				! draw symbols, circles
	            CALL STDRAW(		! and circles	
     &			FOTOP,FOXY,FONATT,STR_MAX_ATTR,FOATTC,FOATTV,
     &			FOAUX,FOTXT(1:MAX(1,FOPTR)),
     &			DUMMYL,DUMMYL,DUMMYE,DUMMYL,FOPAK,FOFS)
	         ENDIF
	      ENDIF
	      CALL GCLSG
	      CALL GSHLIT(FO_SEG,GHILIT)
	   ENDIF
C
C add F/L markers
	   IF (FOPAK(PAKGT).GT.TEXTYP.OR.FOPAK(PAKGT).LT.UNOTYP) THEN
	      CALL GCRSG(FL_SEG)
	      CALL WDSGCM(FL_SEG,1)
	      CALL DRAWFL
	      CALL GCLSG
	      CALL GSHLIT(FL_SEG,GHILIT)
	      RFLSEG = .TRUE.
	   ENDIF
	ENDIF
C
C object in hand 
C This should only happen when moving a linear object
	IF (IH.AND.RFHSEG.EQ.0.AND.SINDEX.EQ.STATE_EDIT.AND.CHPOS) THEN
	   CALL GCRSG(IH_SEG)
	   CALL WDSGCM(IH_SEG,1)
	   FRTARE = .FALSE.		! refresh area as line
	   FRTFC = -1			! invalidate FRTCOM
	   CALL RFMOVE			! draw it
	   CALL GCLSG
	   CALL GSHLIT(IH_SEG,GHILIT)
	   UPDATE = .TRUE.
	   RFHSEG = IHPAK(PAKSEG)	! object in hand refreshed
	   RFHSEP = .TRUE.		! in separate segment
	ENDIF
C
C draw construction
	IF (((SINDEX.EQ.STATE_CONSTRUCT).OR.
     &	     (SINDEX.EQ.STATE_ON.AND.NDMODE.EQ.END_INCLUDE)).AND.
     &	      CONIND.GT.0.AND.RFCIND.EQ.0) THEN
	   IF (CONIND.GT.1) THEN	! can't refresh a single point
	      FRTARE = .FALSE.		! refresh area as line
	      FRTFC = -1		! invalidate FRTCOM
	      CALL GCRSG(CT_SEG)
	      CALL WDSGCM(CT_SEG,1)
	      CALL STDBFF(0)		! clear buffer
	      RFCIND = MIN(CONIND,RFFULL) ! number to refresh
	      CALL STDBFA(RFCIND,CONXY(1,CONIND-RFCIND+1), ! add points
     &	                        CONZ(CONIND-RFCIND+1))
	      CALL STDBFF(2)		! flush them out
	      CALL GCLSG
	      CALL GSHLIT(CT_SEG,GHILIT)
	      UPDATE = .TRUE.
	      RFCIND = CONIND		! have refreshed construction
	   ENDIF
C
C set up rubber band
	   RUBLIN(1) = .TRUE.
	   RUBARR(1,1) = CONXY(1,CONIND)
	   RUBARR(2,1) = CONXY(2,CONIND)
	ENDIF
C
C draw modification
	IF (SINDEX.EQ.STATE_MODIFY.AND.MODMOD) THEN
C
C and draw symbol/text
C
C First fill FRTCOM as it tends to get corrupted!
	   IF (FRTFND(COIPAK(PAKFC))) THEN
	      CALL NASTY(MSG_BADCODE,COIPAK(PAKFC))
	      CALL COLAPS(MSG_BADCODE)
	   ENDIF
C
C now display symbol/text
	   CALL GCRSG(MD_SEG)
	   CALL WDSGCM(MD_SEG,1)
	   IF (FRTTEX) THEN		! draw text
	      CALL BOXCTX(COICTXD,COIPAK,DUMMYL,DUMMYL)
	   ELSE				! draw symbols
	      CALL STDRAW(
     &	COIIND-1,COIXY(1,2),COINATT,OIH_MAX_ATTR,COIATTC,COIATTV(1,2),
     &		COIAUX,COIDSC,
     &		DUMMYL,DUMMYL,DUMMYE,DUMMYL,COIPAK,COIFS)
	   ENDIF
	   CALL GCLSG
	   CALL GSHLIT(MD_SEG,GHILIT)
	   UPDATE = .TRUE.
	   RFMOD = .TRUE.
	ENDIF
C
C draw rubber band lines
	RUBCHG = .FALSE.
	IF ((RUBLIN(1).OR.RUBLIN(2)).AND..NOT.RFRUB) THEN
	   CALL GCRSG(RB_SEG)
	   CALL WDSGCM(RB_SEG,1)
	   CALL RFBAND(1)
	   CALL GCLSG
	   CALL GSHLIT(RB_SEG,GHILIT)
	   UPDATE = .TRUE.
	   RFRUB = .TRUE.
	ENDIF
C
C restore everything
	REFNG = .FALSE.			! no longer refreshing
	CALL WSXORM(.FALSE.)
	OVCOL = -1
	THKOPT = THKSAV
	CUROPT = AKISAV
	PATOPT = PATSAV
	RUBCHG = .FALSE.
	MODMOD = .FALSE.
C
990	IF (UPDATE) CALL GUWK(WKID,GSUPP)
C
999	RETURN
	END
