C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-09-02 16:27:42.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C Routines for dealing with SIGMA6100 series screen menu
C
	LOGICAL FUNCTION CREATE_MENU(IER)
C
***	IDENT	02SE92
***	MODULE	CREATE_MENU
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	27-Jan-1987
C
C creates menu on screen using data stored in MENUS and
C using MENU_ routines.
C Returns .TRUE. if all is well.
C
	IMPLICIT NONE
C
C argument
	INTEGER		IER		! Return code
					! 1 = size too small
					! 2 = size larger than screen
C
***	PARAMETER/CMN:ACS/
***	PARAMETER/CMN:MACMEN/
***	PARAMETER/CMN:SIGMA6100/
C
***	COMMON/LSL$CMNFRT:FRTACD/
***	COMMON/CMN:LABELS/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:MACRO/
***	COMMON/CMN:MENUS/
***	COMMON/CMN:WORKS/
C
C
C functions used
	INTEGER		CPYSTR
	INTEGER*2	GET_VARWORD
	INTEGER*4	GET_VARLONG
C
	INTEGER		I
	INTEGER		P
	REAL		OFFSET
	REAL		TEMP
	REAL		ORGLLX,ORGLLY
	REAL		ORGURX,ORGURY
	REAL		FACTOR
	REAL		X,Y
	REAL		TXTHT
	REAL		XTXTHT
	REAL		TXTWDTH
	REAL		TXTOFFX,TXTOFFY
	INTEGER		NOCHARS
	REAL		XSIZE,YSIZE
	REAL		SIZX,SIZY
	INTEGER		IX(2),IY(2)		! integer coordinates
	INTEGER		BACK_COL
	INTEGER		LINE_COL
	INTEGER		TEXT_COL
	INTEGER*2	EXPF,SPCF
	INTEGER*4	DESC(2)			! a string descriptor
C
	DATA		EXPF,SPCF/120,20/	! by experiment
C
	CREATE_MENU = .FALSE.			! assume failure
C
C get size of screen (in mm)
	CALL GQMDS(1,I,P,XSIZE,YSIZE,X,Y)
	XSIZE = XSIZE*1000.0			! convert to mm
	YSIZE = YSIZE*1000.0
C
C check for sensible size
	IF (SCRMEN_SIZX.LE.0.0.OR.SCRMEN_SIZY.LE.0.0) THEN
	   IER = 1
	   GOTO 9999
	ENDIF	   
C
C get menu size in mm
C
	IF (SCRMEN_SIZX.GT.1.0) THEN
	   SIZX = MIN(SCRMEN_SIZX,XSIZE)	! mm
	ELSE
	   SIZX = SCRMEN_SIZX*XSIZE		! fraction
	ENDIF
	IF (SCRMEN_SIZY.GT.1.0) THEN
	   SIZY = MIN(SCRMEN_SIZY,YSIZE)
	ELSE
	   SIZY = SCRMEN_SIZY*YSIZE
	ENDIF
C
C convert size to menu position in mm on screen
C
	ORGLLX = SCRMEN_ORGX*XSIZE
	ORGLLY = SCRMEN_ORGY*YSIZE
C
C allow for justification
	ORGLLX = ORGLLX-SIZX * 0.5 * (SCRMEN_LOC/3)     ! adjust x
	ORGLLY = ORGLLY-SIZY * 0.5 * (MOD(SCRMEN_LOC,3))! and y
	ORGURX = ORGLLX + SIZX
	ORGURY = ORGLLY + SIZY
C
C force onto edge of screen
	IF (ORGLLX.LT.0.0) THEN
	   TEMP = -ORGLLX
	   ORGLLX = ORGLLX + TEMP
	   ORGURX = ORGURX + TEMP
	ENDIF
	IF (ORGLLY.LT.0.0) THEN
	   TEMP = -ORGLLY
	   ORGLLY = ORGLLY + TEMP
	   ORGURY = ORGURY + TEMP
	ENDIF
	IF (ORGURX.GT.XSIZE) THEN
	   TEMP = XSIZE - ORGURX
	   ORGLLX = ORGLLX + TEMP
	   ORGURX = ORGURX + TEMP
	ENDIF
	IF (ORGURY.GT.YSIZE) THEN
	   TEMP = YSIZE - ORGURY
	   ORGLLY = ORGLLY + TEMP
	   ORGURY = ORGURY + TEMP
	ENDIF
C
C get in range -32766 -> +32766
C NOTE: should really be 32767, but this seems to get lost sometimes
	ORGLLX = MAX(-32766.0,ORGLLX*65535.0/XSIZE - 32767.0)
	ORGURX = MIN(+32766.0,ORGURX*65535.0/XSIZE - 32767.0)
	ORGLLY = MAX(-32766.0,ORGLLY*65535.0/YSIZE - 32767.0)
	ORGURY = MIN(+32766.0,ORGURY*65535.0/YSIZE - 32767.0)
C
C and calculate size of boxes
C first in viewport units
	SCRMEN_BOXX = (ORGURX - ORGLLX)/SCRMEN_INX
	SCRMEN_BOXY = (ORGURY - ORGLLY)/(SCRMEN_INY+1)	! allow header
C
C store corner points of menu
	SCRMEN_CPTS(1,1) = ORGLLX		! NW corner
	SCRMEN_CPTS(2,1) = ORGURY - SCRMEN_BOXY
	SCRMEN_CPTS(1,2) = SCRMEN_CPTS(1,1)	! SW corner
	SCRMEN_CPTS(2,2) = ORGLLY
	SCRMEN_CPTS(1,3) = ORGURX		! SE corner
	SCRMEN_CPTS(2,3) = SCRMEN_CPTS(2,2)
	SCRMEN_CPTS(1,4) = SCRMEN_CPTS(1,3)	! NE corner
	SCRMEN_CPTS(2,4) = SCRMEN_CPTS(2,1)
C
C store corner points of total menu area
	SCRMEN_BRDR(1,1) = ORGLLX		! NW corner
	SCRMEN_BRDR(2,1) = ORGURY
	SCRMEN_BRDR(1,2) = SCRMEN_BRDR(1,1)	! SW corner
	SCRMEN_BRDR(2,2) = ORGLLY
	SCRMEN_BRDR(1,3) = ORGURX		! SE corner
	SCRMEN_BRDR(2,3) = SCRMEN_BRDR(2,2)
	SCRMEN_BRDR(1,4) = SCRMEN_BRDR(1,3)	! NE corner
	SCRMEN_BRDR(2,4) = SCRMEN_BRDR(2,1)
C
C force to integers
	DO 10, I = 1,4
	   DO 10 , P = 1,2
	      SCRMEN_CPTS(P,I) = NINT(SCRMEN_CPTS(P,I))
	      SCRMEN_BRDR(P,I) = NINT(SCRMEN_BRDR(P,I))
	   CONTINUE
   10	CONTINUE
C
C now create the menu, in viewport 2 (this has been created in BITINIT)
	CALL WCVP(1,2)			
C
C create segment
	CALL GCRSG(SM_SEG)
C
C set up colours for menu
C
	BACK_COL = ANNOCOL	! background colour
	LINE_COL = 0		! colour for lines
	TEXT_COL = 0		! colour for texts
C
C fill screen menu in background colour
C NOTE: using IX and IY as x,y coordinate pairs
	CALL GSFACI(BACK_COL)
	IX(1) = SCRMEN_CPTS(1,2)
	IX(2) = SCRMEN_CPTS(2,2)
	IY(1) = SCRMEN_CPTS(1,4)
	IY(2) = SCRMEN_CPTS(2,4)
C
C WBFA works in absolute mode, so select it
	CALL WSAMD(1,0)
	CALL WBFA(IX,IY)
	CALL WSAMD(1,1)			! relative mode
C
C and draw menu into it 
	CALL GSPLCI(LINE_COL)		! use GKS to set colour, so that
					! GKS does not get confused
	CALL GSLWSC(1.0)		! nominal linewidth
C
C draw vertical lines
	IY(1) = SCRMEN_CPTS(2,2)
	IY(2) = SCRMEN_CPTS(2,1)
C
	DO 20, I = 1,SCRMEN_INX - 1	! don't draw border
	   IX(1) = SCRMEN_CPTS(1,2) + I*SCRMEN_BOXX
	   IX(2) = IX(1)
	   CALL WPL(2,IX,IY)
   20	CONTINUE
C
C draw horizontal lines
	IX(1) = SCRMEN_CPTS(1,2)
	IX(2) = SCRMEN_CPTS(1,3)
	DO 30, I= 1,SCRMEN_INY - 1	! don't draw border
	   IY(1) = SCRMEN_CPTS(2,2) + I*SCRMEN_BOXY
	   IY(2) = IY(1)
	   CALL WPL(2,IX,IY)
   30	CONTINUE
C
C calculate a text height - 2/3 of a box
	TXTHT = SCRMEN_BOXY * 0.6666667
CCCC	TXTWDTH = TXTHT * YSIZE / XSIZE * (EXPF/256.0 + SPCF/256.0)
	TXTWDTH = TXTHT * (EXPF/256.0 + SPCF/256.0)
	TXTOFFY = (SCRMEN_BOXY-TXTHT) * 0.5
	TXTOFFX = TXTWDTH * 0.5
C
C calculate maximum number of characters allowed in one box

	NOCHARS = (SCRMEN_BOXX-TXTOFFX) / TXTWDTH
C
C set text height for menu texts
	XTXTHT = TXTHT * 
     &	         MAX(LIMITS(4)-LIMITS(3),LIMITS(2)-LIMITS(1)) / 65535.0
	CALL GSCHH(XTXTHT)
C
C and up vector and font and precision
C
	CALL GSCHUP(0.0,1.0)		! direction
	CALL WSTXFP(1,2)		! font 1, precision 2
C
C set character expansion factor and spacing (reset after)
C
	CALL WSCHXP(EXPF)		! default
	CALL WSCHSP(SPCF)
C
C text colour
C
	CALL GSTXCI(TEXT_COL)
C 
C write an anotation for each box
	DO 4000 I=1,SCRMEN_INX*SCRMEN_INY
	   P = SCRMEN_BASE + I
	   IF (GET_VARWORD(%VAL(MANDSW_ADDR),1,P).GT.0) THEN
C
C calculate position
	      IX(1) = SCRMEN_CPTS(1,2) +
     &	              (MOD(I-1,SCRMEN_INX))*SCRMEN_BOXX + TXTOFFX
	      IY(1) = SCRMEN_CPTS(2,2) + 
     &	              (SCRMEN_INY - (I-1)/SCRMEN_INX - 1)*SCRMEN_BOXY +
     &	              TXTOFFY
	      DESC(1) = GET_VARLONG(%VAL(MANDSL_ADDR),1,P)
	      DESC(2) = GET_VARLONG(%VAL(MANDSL_ADDR),2,P)
	      CALL ANNOTATE_BOX(IX(1),IY(1),DESC,NOCHARS)
	   ENDIF
4000	CONTINUE
C
C now darw header
C fill screen menu in line colour
C NOTE: using IX and IY as x,y coordinate pairs
	CALL GSFACI(LINE_COL)
	IX(1) = SCRMEN_CPTS(1,1)
	IX(2) = SCRMEN_CPTS(2,1)
	IY(1) = ORGURX
	IY(2) = ORGURY
C
C WBFA works in absolute mode, so select it
	CALL WSAMD(1,0)
	CALL WBFA(IX,IY)
	CALL WSAMD(1,1)			! relative mode
C
C and draw menu into it 
	CALL GSPLCI(BACK_COL)
	CALL GSLWSC(1.0)		! nominal linewidth
C
C draw vertical lines
	IY(1) = SCRMEN_CPTS(2,1)
	IY(2) = ORGURY
	IX(1) = SCRMEN_CPTS(1,1)
	IX(2) = IX(1)
	CALL WPL(2,IX,IY)
	IX(1) = SCRMEN_CPTS(1,4)
	IX(2) = IX(1)
	CALL WPL(2,IX,IY)
C
C and horizontal line
	IX(1) = ORGLLX
	IY(1) = ORGURY
	IX(2) = ORGURX
	IY(2) = IY(1)
	CALL WPL(2,IX,IY)
C
C text
	CALL GSTXCI(BACK_COL)
	NOCHARS = ((SCRMEN_BOXX*SCRMEN_INX)-TXTOFFX) / TXTWDTH
	IF (SCRMEN_LTIT.GT.0) THEN
C
C calculate position
	   IX(1) = SCRMEN_CPTS(1,1) + TXTOFFX
	   IY(1) = SCRMEN_CPTS(2,1) + TXTOFFY
	   CALL ANNOTATE_BOX(IX(1),IY(1),SCRMEN_TITLE(1:SCRMEN_LTIT),
     &	                     NOCHARS)
	ENDIF
C
C reset character expansion and spacing
C
	CALL WSCHXP(256)	! expansion factor 1.0
	CALL WSCHSP(0)		! no spacing
C
C close segment
	CALL GCLSG
	CALL WDSGCM(SM_SEG,BIT_CLASS)		! segment class 3
C
C select original viewport
	CALL WCVP(1,1)			! map view
C
C
	CREATE_MENU = .TRUE.		! all OK
	IER = 0
C
C
9999	CONTINUE
	RETURN
	END
C
C
	SUBROUTINE DELETE_MENU(REDRAW)
C
***	IDENT	27AP87
***	MODULE	DELETE_MENU
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	 6-Mar-1987
C
C deletes menu on screen
C
	IMPLICIT NONE
C
C argument
	LOGICAL		REDRAW		! when TRUE, redraw map, as
					! deleting menu will leave whole
C
***	PARAMETER/CMN:SIGMA6100/
C
***	COMMON/CMN:DOUT/
***	COMMON/CMN:WORKS/
C
C w/s
	INTEGER		DSECN_SAV
C
C select bitpad viewport
	CALL WCVP(1,2)			! bitpad viewport
C
C set Sigma 6100 selective erase for this operation
	CALL WSSELM(.TRUE.)
C
	CALL GDSG(SM_SEG)		! delete screen menu seg
C
C and unset selective erase again
	CALL WSSELM(.FALSE.)
C
C select original viewport
	CALL WCVP(1,1)			! map view viewport
C
C redraw screen (as menu may have deleted data below it, including 
C the cursor) 
C
	IF (REDRAW) THEN
	   DSECN_SAV = DSECN
	   DSECN = 2
	   SCRINI = .NOT.SCRINI		! stop LUWK recreating menu
	   CALL DODRAW
	   SCRINI = .NOT.SCRINI		! reset
	   DSECN = DSECN_SAV
	ENDIF
C
	RETURN
	END
C
C
	SUBROUTINE ANNOTATE_BOX(X,Y,STRNG,NOCHARS)
C
***	IDENT	11MR87
***	MODULE	ANNOTATE_BOX
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	 6-Mar-1987
C
C annotates a menu box
C
	IMPLICIT NONE
C
C arguments	
	INTEGER		X,Y		! position for text
	CHARACTER*(*)	STRNG		! text string
	INTEGER		NOCHARS		! maximum number of characters
					! to output
C
	IF (NOCHARS.GE.1) THEN
	   CALL WTX(X,Y,STRNG(1:MIN(LEN(STRNG),NOCHARS)))
	ENDIF
C
	RETURN
	END


