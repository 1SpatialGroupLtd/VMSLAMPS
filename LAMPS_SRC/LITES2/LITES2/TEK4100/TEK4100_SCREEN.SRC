C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-01-25 17:52:56.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C
C Routines for dealing with TEK41xx screen menu
C
	LOGICAL FUNCTION CREATE_MENU(IER)
C
***	IDENT	25JA94
***	MODULE	CREATE_MENU
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	27-Jan-1987
C
C creates menu on screen using data stored in MENUS and
C using MENU_ routines.
C Returns .TRUE. if all is well.
C
	IMPLICIT NONE
C
C argument
	INTEGER		IER		! Return code
					! 1 = size too small
					! 2 = size larger than screen
C
***	PARAMETER/CMN:ACS/
***	PARAMETER/CMN:MACMEN/
***	PARAMETER/CMN:TEK4100/
C
***	COMMON/LSL$CMNFRT:FRTACD/
***	COMMON/CMN:LABELS/
***	COMMON/CMN:MACRO/
***	COMMON/CMN:MENUS/
***	COMMON/CMN:WORKS/
C
C
C functions used
	INTEGER		CPYSTR
	INTEGER*2	GET_VARWORD
	INTEGER*4	GET_VARLONG
C
	INTEGER		I
	INTEGER		P
	REAL		OFFSET
	REAL		TEMP
	REAL		ORGLLX,ORGLLY
	REAL		ORGURX,ORGURY
	REAL		FACTOR
	REAL		X,Y
	REAL		BOXX,BOXY
	REAL		TXTHT
	REAL		TXTOFFX,TXTOFFY
	INTEGER		NOCHARS
	REAL		XSIZE,YSIZE
	REAL		SIZX,SIZY
	INTEGER		BACK_COL
	INTEGER		LINE_COL
	INTEGER		TEXT_COL
	INTEGER		COUNT
	INTEGER*4	DESC(2)			! a string descriptor
C
	CREATE_MENU = .FALSE.			! assume failure
C
C are we using 12 bit or 32 (ie 16) bit coordinates, or a Westward?
	COUNT = 4095
	IF (WTYPES(1).EQ.32) COUNT = 65535
	IF (WTYPES(1).EQ.1000) COUNT = 32767
C
C get size of screen (in cm)
	CALL LDFPPM(4,FACTOR,XSIZE,YSIZE)
	XSIZE = XSIZE/100.0			! convert to m
	YSIZE = YSIZE/100.0
C
C check for sensible size
	IF (SCRMEN_SIZX.LE.0.0.OR.SCRMEN_SIZY.LE.0.0) THEN
	   IER = 1
	   GOTO 9999
	ENDIF	   
C
C get menu size in mm
C
	IF (SCRMEN_SIZX.GT.1.0) THEN
	   SIZX = MIN(SCRMEN_SIZX,XSIZE*1000.0)	! mm
	ELSE
	   SIZX = SCRMEN_SIZX*XSIZE*1000.0	! fraction
	ENDIF
	IF (SCRMEN_SIZY.GT.1.0) THEN
	   SIZY = MIN(SCRMEN_SIZY,YSIZE*1000.0)
	ELSE
	   SIZY = SCRMEN_SIZY*YSIZE*1000.0
	ENDIF
C
C convert size to menu position in metres on screen
C
	ORGLLX = SCRMEN_ORGX*XSIZE
	ORGLLY = SCRMEN_ORGY*YSIZE
C
C allow for justification
	ORGLLX = ORGLLX-SIZX/2000.0*(SCRMEN_LOC/3)     ! adjust x
	ORGLLY = ORGLLY-SIZY/2000.0*(MOD(SCRMEN_LOC,3))! and y
	ORGURX = ORGLLX + SIZX/1000.0
	ORGURY = ORGLLY + SIZY/1000.0
C
C force onto edge of screen
	IF (ORGLLX.LT.0.0) THEN
	   TEMP = -ORGLLX
	   ORGLLX = ORGLLX + TEMP
	   ORGURX = ORGURX + TEMP
	ENDIF
	IF (ORGLLY.LT.0.0) THEN
	   TEMP = -ORGLLY
	   ORGLLY = ORGLLY + TEMP
	   ORGURY = ORGURY + TEMP
	ENDIF
	IF (ORGURX.GT.XSIZE) THEN
	   TEMP = XSIZE - ORGURX
	   ORGLLX = ORGLLX + TEMP
	   ORGURX = ORGURX + TEMP
	ENDIF
	IF (ORGURY.GT.YSIZE) THEN
	   TEMP = YSIZE - ORGURY
	   ORGLLY = ORGLLY + TEMP
	   ORGURY = ORGURY + TEMP
	ENDIF
C
C and calculate size of boxes
C first in screen units
	SCRMEN_BOXX = (ORGURX - ORGLLX)/SCRMEN_INX
	SCRMEN_BOXY = (ORGURY - ORGLLY)/(SCRMEN_INY + 1) ! allow header
C
C and then in mms
	BOXX = SIZX/SCRMEN_INX
	BOXY = SIZY/(SCRMEN_INY + 1)
C
C store corner points of menu in screen units
	SCRMEN_CPTS(1,1) = ORGLLX		! NW corner
	SCRMEN_CPTS(2,1) = ORGURY - SCRMEN_BOXY
	SCRMEN_CPTS(1,2) = SCRMEN_CPTS(1,1)	! SW corner
	SCRMEN_CPTS(2,2) = ORGLLY
	SCRMEN_CPTS(1,3) = ORGURX		! SE corner
	SCRMEN_CPTS(2,3) = SCRMEN_CPTS(2,2)
	SCRMEN_CPTS(1,4) = SCRMEN_CPTS(1,3)	! NE corner
	SCRMEN_CPTS(2,4) = SCRMEN_CPTS(2,1)
C
C store corner points of total menu area
	SCRMEN_BRDR(1,1) = ORGLLX		! NW corner
	SCRMEN_BRDR(2,1) = ORGURY
	SCRMEN_BRDR(1,2) = SCRMEN_BRDR(1,1)	! SW corner
	SCRMEN_BRDR(2,2) = ORGLLY
	SCRMEN_BRDR(1,3) = ORGURX		! SE corner
	SCRMEN_BRDR(2,3) = SCRMEN_BRDR(2,2)
	SCRMEN_BRDR(1,4) = SCRMEN_BRDR(1,3)	! NE corner
	SCRMEN_BRDR(2,4) = SCRMEN_BRDR(2,1)
C
C get in range 0 -> 1 in correct aspect ratio
	FACTOR = 1/MAX(XSIZE,YSIZE)
	ORGLLX = ORGLLX*FACTOR
	ORGURX = ORGURX*FACTOR
	ORGLLY = ORGLLY*FACTOR
	ORGURY = ORGURY*FACTOR
C
C get a factor to ensure that the menu coordinates are in range 0 -> 1
	FACTOR = 1.0/(MAX(SIZX,SIZY))
C
C now create the menu
	CALL WSELVW(MENU_VIEW)				! menu view
	CALL WSWKWN(1,0,SIZX*FACTOR,			! set window
     &	              0,SIZY*FACTOR)
	CALL WSWKVP(1,ORGLLX,				! set viewport
     &	              ORGURX,
     &	              ORGLLY,
     &	              ORGURY)
C
C create segment
	CALL WCRSG(SM_SEG)
C
C set up colours for menu
C
	BACK_COL = ANNOCOL	! background colour
	LINE_COL = 0		! colour for lines
	TEXT_COL = 0		! colour for texts
C
C and draw menu into it
C
C first solid colour
	CALL WSFACI(BACK_COL)
	CALL WBGPAN(0.0,0.0,0)
	CALL LINTO(0.0,(SIZY-BOXY)*FACTOR)
	CALL LINTO(SIZX*FACTOR,(SIZY-BOXY)*FACTOR)
	CALL LINTO(SIZX*FACTOR,0.0)
	CALL WENPAN
C
C now the lines
	CALL GSPLCI(LINE_COL)		! use GKS to set colour, so that
					! GKS does not get confused
	CALL GSLWSC(1.0)		! nominal linewidth
	CALL GUPLIN			! however, lines not drawn by GKS
					! so force this colour
C
C draw vertical lines
	DO 10, I = 1,SCRMEN_INX - 1	! don't draw border
	   TEMP = BOXX*I*FACTOR
	   CALL MOVTO(TEMP,0.0)
	   CALL LINTO(TEMP,(SIZY-BOXY)*FACTOR)
   10	CONTINUE
C
C draw horizontal lines
	DO 20, I= 1,SCRMEN_INY - 1	! don't draw border
	   TEMP = BOXY*I*FACTOR
	   CALL MOVTO(0.0,TEMP)
	   CALL LINTO(SIZX*FACTOR,TEMP)
   20	CONTINUE
C
C calculate a text height - 2/3 of a box
	TXTHT = BOXY*2.0/3.0
	TXTOFFY = (BOXY-TXTHT)*0.5
	TXTOFFX = TXTHT*0.5
C
C calculate maximum number of characters allowed in one box
C - available space divided by width of character (39/59th of height) +
C   space (12/59th of height)
	NOCHARS = (BOXX-TXTOFFX)/(TXTHT*51/59)
C
C set text height for menu texts - this in range 0-COUNT
	CALL WGTSIZ(NINT(TXTHT*FACTOR*COUNT))
C
C set the text colour
	CALL WSTXCI(TEXT_COL)
C 
C write an anotation for each box
	DO 4000 I=1,SCRMEN_INX*SCRMEN_INY
	   P = SCRMEN_BASE + I
	   IF (GET_VARWORD(%VAL(MANDSW_ADDR),1,P).GT.0) THEN
C
C calculate position
	      X = (MOD(I-1,SCRMEN_INX))*BOXX+TXTOFFX
	      Y = (SCRMEN_INY - (I-1)/SCRMEN_INX - 1)*BOXY+TXTOFFY
	      DESC(1) = GET_VARLONG(%VAL(MANDSL_ADDR),1,P)
	      DESC(2) = GET_VARLONG(%VAL(MANDSL_ADDR),2,P)
	      CALL ANNOTATE_BOX(X*FACTOR,Y*FACTOR,DESC,NOCHARS)
	   ENDIF
4000	CONTINUE
C
C draw header
C fill with background colour, with annotation colour boundary
	CALL WSFACI(LINE_COL)
	CALL GSPLCI(BACK_COL)			! line colour for border
	CALL WSTXCI(BACK_COL)
	CALL GUPLIN
	CALL WBGPAN(0.0,(SIZY-BOXY)*FACTOR,1)
	CALL LINTO(0.0,SIZY*FACTOR)
	CALL LINTO(SIZX*FACTOR,SIZY*FACTOR)
	CALL LINTO(SIZX*FACTOR,(SIZY-BOXY)*FACTOR)
	CALL WENPAN
C
C frig for 32 bit version - draw the border explicitly (don't understand
C why border does not appear) - and Westward
	IF (WTYPES(1).EQ.32.OR.WTYPES(1).EQ.1000) THEN
	   CALL MOVTO(0.0,(SIZY-BOXY)*FACTOR)
	   CALL LINTO(0.0,SIZY*FACTOR)
	   CALL LINTO(SIZX*FACTOR,SIZY*FACTOR)
	   CALL LINTO(SIZX*FACTOR,(SIZY-BOXY)*FACTOR)
	ENDIF	   
C
	NOCHARS = (SIZX-TXTOFFX)/(TXTHT*51/59)
	IF (SCRMEN_LTIT.GT.0) THEN
	   X = TXTOFFX 
	   Y = (SIZY - BOXY) + TXTOFFY
	   CALL ANNOTATE_BOX(X*FACTOR,Y*FACTOR,
     &	      SCRMEN_TITLE(1:SCRMEN_LTIT),NOCHARS)
	ENDIF
C close segment
	CALL WCLSG
	CALL WDSGCM(SM_SEG,0,3)		! segment class 3
C
C select original view
	CALL WSELVW(MAP_VIEW)		! map view
C
C on Westward, make the menu invisible in the map view
	IF (WTYPES(1).EQ.1000) THEN
	   CALL WSFXUP(0)
	   CALL WSVIS(SM_SEG,0)
	   CALL WSFXUP(6)
	ENDIF
	CALL LDWAIT			! update display
C
C
	CREATE_MENU = .TRUE.		! all OK
	IER = 0
C
C
9999	CONTINUE
	RETURN
	END
C
C
	SUBROUTINE DELETE_MENU(REDRAW)
C
***	IDENT	06MR87
***	MODULE	DELETE_MENU
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	 6-Mar-1987
C
C deletes menu on screen
C
	IMPLICIT NONE
C
C argument
	LOGICAL		REDRAW		! when TRUE, redraw map, as
					! deleting menu will leave hole
C
***	PARAMETER/CMN:TEK4100/
C
***	COMMON/CMN:DOUT/
***	COMMON/CMN:WORKS/
C
C w/s
	INTEGER		DSECN_SAV
C
	CALL WSELVW(MENU_VIEW)			! select menu view
	CALL WDSG(SM_SEG)			! delete screen menu seg
	CALL WDELVW(MENU_VIEW)			! delete current view
	CALL WSELVW(MAP_VIEW)			! select map view
	CALL LDWAIT				! update display
C
C redraw screen (as menu may have deleted data below it, including 
C the cursor) 
C
	IF (REDRAW) THEN
	   DSECN_SAV = DSECN
	   DSECN = 2
	   SCRINI = .NOT.SCRINI		! stop LUWK recreating menu
	   CALL DODRAW
	   SCRINI = .NOT.SCRINI		! reset
	   DSECN = DSECN_SAV
	ENDIF
C
	RETURN
	END
C
C
	SUBROUTINE ANNOTATE_BOX(X,Y,STRNG,NOCHARS)
C
***	IDENT	11MR87
***	MODULE	ANNOTATE_BOX
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	 6-Mar-1987
C
C annotates a menu box
C
	IMPLICIT NONE
C
C arguments	
	REAL		X,Y		! position for text
	CHARACTER*(*)	STRNG		! text string
	INTEGER		NOCHARS		! maximum number of characters
					! to output
C
	IF (NOCHARS.GE.1) THEN
	   CALL WTX(X,Y,STRNG(1:MIN(LEN(STRNG),NOCHARS)))
	ENDIF
C
	RETURN
	END


