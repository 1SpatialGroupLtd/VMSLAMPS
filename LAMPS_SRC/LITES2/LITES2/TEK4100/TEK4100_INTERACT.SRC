C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-03-18 15:28:58.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE INTERACT(CTRLZ)
C
***	IDENT   18MR92
***	MODULE  INTERACT
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Written					CCB	 7-DEC-1984
C
C Description
C
C	LITES2 cartographic editor interactive input routine
C
C      ---      THIS SUBROUTINE IS INSTALLATION DEPENDENT      ---
C	--- This is Table Monitor/direct table/TEK bitpad Version ---
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:EFNLUN/
***	PARAMETER/CMN:END/
***	PARAMETER/CMN:MACMEN/
***	PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:TEK4100/
C
***	COMMON/CMN:DOUT/
***	COMMON/CMN:DRAWIN/
***	COMMON/CMN:GLOBAL/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:MENUS/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:PROMPT/
***	COMMON/CMN:RFCTRL/
***	COMMON/LSL$CMNLSL:TXTC/
***	COMMON/CMN:VAREFN/
***	COMMON/CMN:WORKS/
C
	INCLUDE '($DVIDEF)'
C
C argument
	LOGICAL*1	CTRLZ		! true when command from
					! keyboard terminated with ^Z
C
C functions called
	INTEGER*4	SYS$DASSGN
	INTEGER*4	EXPAND
	INTEGER		LIB$GETDVI
	LOGICAL		HAD_ERROR,READ_ERROR
	LOGICAL		HAD_PUCK,READ_PUCK
	LOGICAL		HAD_STREAM,READ_STREAM
	LOGICAL		RUBISH
	LOGICAL		STRDTB
	LOGICAL		DIGTRN
	LOGICAL		GTYPAC
	LOGICAL		INPLGN
	LOGICAL		AUXACT		! are auxiliary inputs active
	LOGICAL		SERVAUX		! service the auxiliary inputs
	LOGICAL		AUXOFF		! has an auxiliary input gone off
	LOGICAL		SERV_FOLLOW	! service event from following
C
C local variables
	INTEGER*4	IERR
	INTEGER*4	MASK
	INTEGER*2	TKIOSB(4)
	INTEGER		TKBLEN
	PARAMETER	(TKBLEN=255)
	BYTE		TKBUF(TKBLEN)
	INTEGER		TKBUT
	REAL		TKXY(2)
	INTEGER		TKVIEW
	EQUIVALENCE	(TKBUT,TKBUF(1)),(TKXY(1),TKBUF(5))
	EQUIVALENCE	(TKVIEW,TKBUF(13))
	INTEGER		TKLEN
	CHARACTER*20	TTDEV
	CHARACTER*20	TKDEV
	INTEGER		I,J,K
	REAL		TABXY(2)
	REAL		SAVXY(2)
	INTEGER*4	DEV,BUTTON
	INTEGER		PTR
	LOGICAL*1	RMON		! .TRUE. if using table monitor
	BYTE		BU		! button number returned by
					! table monitor
	INTEGER*4	IX,IY		! coordinates returned by
					! table monitor
	LOGICAL*1	POS		! positioning command
	LOGICAL*1	POSDON		! implicit POS done?
	CHARACTER*30	STRING		! command string from TRNTIP
	INTEGER*4	STRLEN		! length of string
	INTEGER*4	COUNT		! number of chars in typeahead
	BYTE		BYTE1		! first character
	LOGICAL*1	WAIT_STREAM	! awaiting stream input?
	REAL		FACTOR
	REAL		DIFFWX,DIFFWY	! differnce in X and Y of window
	REAL		SCRXY(2)	! screen coordinate of cursor
	LOGICAL		FROM_MENU
	INTEGER		TERMLEN
	LOGICAL		HADKB		! input from TT or AUX
C
C initialise
	RMON = TABINI.AND.MONOPT.AND..NOT.DTRON	! use table monitor?
	TXTPTR = 0			! nothing in TXTBUF
C
10	CTRLZ = .FALSE.			! assume not CTRL/Z
	HADKB = .FALSE.			! no keyboard input
	CALL PROMPT			! prompt if required
C
C service any inputs from auxiliary lines, that are outstanding
C
	IF (AUXACT()) THEN		! are any aux inputs active?
	   IF (.NOT.AUX_READ) THEN	! no read up
	      IF (AUXOFF(AUXIOSB)) GOTO 600
	   ENDIF
	ENDIF
C
C If workstation 1 (TEK) is not open, then do ordinary terminal read
	IF (.NOT.WKOP(1)) GOTO 100
C
C Otherwise maybe use WOSPLIB input
C If this is first call since workstation opened, then decide what to do
	IF (TTINIT) THEN
C
C Use WOSPLIB terminal input provided that the WOSP workstation is
C active, and SYS$INPUT and LSL$TK are the same device.
C (WOSPIN is set to .FALSE. in BLKDAT)
	   IERR = LIB$GETDVI(DVI$_DEVNAM,,'SYS$INPUT',,TTDEV,)
	   IF (.NOT.IERR) THEN
	      CALL MOAN(MSG_FLDTOTRANS,'SYS$INPUT')
	      CALL LITES2_SIGNAL(IERR)
	      GOTO 999
	   ENDIF
	   IERR = LIB$GETDVI(DVI$_DEVNAM,,'LSL$TK',,TKDEV,)
	   IF (.NOT.IERR) THEN
	      CALL MOAN(MSG_FLDTOTRANS,'LSL$TK')
	      CALL LITES2_SIGNAL(IERR)
	      GOTO 999
	   ENDIF
	   IF (TTDEV.EQ.TKDEV) WOSPIN = .TRUE.
C
	   IF (WOSPIN.AND.TTASN) THEN
C
C deassign terminal channel
	      IERR = SYS$DASSGN(%VAL(TTICHN))
	      IF (.NOT.IERR) THEN
	         CALL MOAN(MSG_FLDDEASSCHN)
	         CALL LITES2_SIGNAL(IERR)
	      ENDIF
	      TTASN = .FALSE.
	   ENDIF
	   TTINIT = .FALSE.
	ENDIF
C
C get a TEK read going
	IF (.NOT.TAREAD) THEN
	   CALL TKREAD(TABFLG,TKIOSB)
	   TAREAD = .TRUE.		! TEK read going
	ENDIF
C
C get reads going
100	IF (DTRON.AND..NOT.DTBREAD) THEN
	   IF (GTYPAC(DTBCHN,COUNT,BYTE1)) THEN	! check type ahead buff
	      IF (COUNT.GT.MXTYPC) THEN
	         CALL MOAN(MSG_NOMOREBUTS,COUNT/15)
	      ENDIF
	   ENDIF
	   DTBREAD=STRDTB(DTBFLG,DTBCHN,DTBOSB,,DTBLEN,DTBBUF)
	ENDIF
C
C put up reads for auxiliary inputs
C then go and check if any have gone off
	CALL STRTAUX(AUXIOSB,,TTBLEN,AUXBUF)
	IF (AUXOFF(AUXIOSB)) GOTO 600
C
	IF (WOSPIN) GOTO 150		! reading from WOSP
C
C set ordinary terminal read going
	IF (.NOT.TTREAD.AND..NOT.TTABORT) THEN
	   CALL QIOUP(TTASN,'SYS$INPUT',TTICHN,TTIFLG,TTIOSB,,
     &	              TTBLEN,TTBUF,TTREAD,TTABORT)
	   IF (TTABORT) GOTO 999
	ENDIF
C
C now wait for a response from somewhere
150	CONTINUE
C
C build event flag wait mask
	MASK = 0				! clear to start with
	IF (.NOT.WOSPIN) CALL EFWM(MASK,TTIFLG)	! terminal
	CALL EFWM(MASK,CLCFLG)			! CTRL/C
	IF (AUX_READ) CALL EFWM(MASK,AUXFLG)
	IF (TAREAD) CALL EFWM(MASK,TABFLG)	! add TEK bitpad
	IF (DTBREAD) CALL EFWM(MASK,DTBFLG)	! add direct table read
	IF (RMON) THEN
	   CALL EFWM(MASK,TABPUK,TABERR)	! monitor puck and error
	   WAIT_STREAM = STREAM			! are we awaiting stream?
	   IF (STREAM) THEN
	      CALL EFWM(MASK,TABSTR)		! monitor stream
	      STREAM = .FALSE.			! assume not stream next
	   ENDIF
	ENDIF
C
C stream digitising
	IF (FOLLOWING) CALL EFWM(MASK,FOLFLG)
	IF (FOLLOWING.AND..NOT.FOLLOW_TIMING) THEN
	   CALL FOLTMR()
	   FOLLOW_TIMING = .TRUE.
	ENDIF
C
C and wait for it
160	IF (CTRLC.NE.CTRLC_OFF) THEN
	   CALL SYS$CLREF(%VAL(CLCFLG))
	   GOTO 990
	ENDIF
C
C enable GIN on Westward
	IF (BITINI.AND.WTYPES(1).EQ.1000) THEN
	   CALL WEST_RFSTOP	! stop any refreshing
	   CSRTMO = .TRUE.	! indicate GIN on to Westward refresh
	   CALL WEST_REFRSH	! get GIN and refresh going again
	ENDIF
C
	CALL SYS$WFLOR( %VAL(TTIFLG), %VAL(MASK) )
C
C disable GIN on Westward
	IF (BITINI.AND.WTYPES(1).EQ.1000) THEN
	   CALL WEST_RFSTOP	! stop any refreshing
	   CALL WDSGIN(8)
	   CSRTMO = .FALSE.	! indicate GIN off to Westward refresh
	   CALL WEST_REFRSH	! get the refresh going again
	ENDIF
C
C now look for what we have got
	IF (.NOT.WOSPIN.AND.TTIOSB(1).NE.0) GOTO 200	! terminal input
	IF (TAREAD.AND.TKIOSB(1).NE.0) GOTO 300		! TEK
	IF (DTBREAD.AND.DTBOSB(1).NE.0) GOTO 400	! direct table
	IF (RMON) THEN
	   IF (HAD_ERROR(IERR)) THEN
	      IF (.NOT.READ_ERROR(TXTBUF,TXTPTR,I,IERR)) THEN
	         CALL INFORM(MSG_TABMONERR,I)
	         CALL INFORM(MSG_STRING,TXTDSC)
	         TXTPTR = 0		! buffer empty again
	      ENDIF
	      GOTO 160
	   ELSEIF (HAD_PUCK(IERR)) THEN		! tab_mon puck
	      IF (.NOT.READ_PUCK(BU,IX,IY,IERR)) GOTO 500
	   ELSEIF (WAIT_STREAM) THEN		! waiting for stream
	      IF (HAD_STREAM(IERR)) THEN	! tab_mon stream
	         BU = -1			! mark as stream
	         IF (.NOT.READ_STREAM(IX,IY,IERR)) GOTO 500
	      ENDIF
	   ENDIF
	ENDIF
C
C check for auxiliary input
	IF (AUX_READ) THEN
	   IF (AUXOFF(AUXIOSB)) GOTO 600
	ENDIF	      
C
C check for stream digitising timer
	IF (FOLLOWING.AND.FOLLOWED) THEN
	   CALL FOLTMR()		! start timer again
	   IF (SERV_FOLLOW()) GOTO 990	! got valid coordinate
	   GOTO 10			! round again
	ENDIF
C
C check for CTRL/C
	IF (CTRLC.NE.CTRLC_OFF) THEN
	   CALL SYS$CLREF(%VAL(CLCFLG))
	   GOTO 990
	ENDIF
C
C nothing happening?
	CALL INFORM(MSG_NOINPUT)
	GOTO 10
C
C got terminal input
200	TTREAD = .FALSE.	! no terminal read outstanding
	TTIDON = .TRUE.		! terminal input done (want prompt)
	IF (.NOT.TTIOSB(1)) THEN
	   CALL MOAN(MSG_ERRINTERRD)
	   CALL LITES2_SIGNAL(TTIOSB(1))
	   GOTO 10
	ENDIF
	HADKB = .TRUE.
C
C put string from terminal into TXTBUF
	CTRLZ = TTIOSB(4).EQ.1.AND.TTIOSB(3).EQ.26
	J = TTIOSB(2)		! number of chars input
	TERMLEN = TTIOSB(4)	! terminator length
	IF (J.EQ.0.AND.TERMLEN.LE.1) GOTO 990	! empty line
C
C Check for a valid keyboard escape sequence
	STRLEN = 0
	IF (TERMLEN.GT.1) CALL INTTERM(TTBUF(J+1),TERMLEN,STRING,STRLEN)
C
C Set appropriate carriage controls for next line -
C If the line was not terminated by c/r, then pretend not had terminal
C input, so next output will be preceded by newline, but force a prompt
C if some chars were typed (since TTIDON false would not prompt)
	IF (TTIOSB(3).NE.13) THEN
	   TTIDON = .FALSE.	! want newline before output
	   IF (J.NE.0) TTPROM = .TRUE.
	ENDIF
C
	PTR = 0
C
C add a POS command if required
	IF (POSPND.AND..NOT.PROINQ) THEN
	   PTR = EXPAND('%W%%POS %G0.8 %G0.8#',TXTBUF,
     &					POSXY(1),POSXY(2))
	   POSPND = .FALSE.
	ENDIF
C
C now the ordinary characters
	DO 210 I=1,J
	   TXTBUF(I+PTR) = TTBUF(I)
210	CONTINUE
	PTR = PTR+J
C
C and now the command resulting from an escape sequence
C Ignore escape command in an inquire if any ordinary chars
	IF (STRLEN.GT.0.AND.(J.EQ.0.OR..NOT.PROINQ)) THEN
	   IF (J.NE.0) THEN
	      PTR = PTR + 1
	      TXTBUF(PTR) = '#'
	   ENDIF
	   PTR = PTR + EXPAND('%W%S',TXTBUF(PTR+1),STRING(1:STRLEN))
	ENDIF
	TXTPTR = PTR
	GOTO 990		! return with TXTBUF filled
				! ready for decoder
C
C got TEK input
300	TAREAD = .FALSE.	! no table read outstanding
	IF (.NOT.TKIOSB(1)) THEN
	   CALL MOAN(MSG_ERRINTABRD)
	   CALL LITES2_SIGNAL(TKIOSB(1))
	   GOTO 10
	ENDIF
C
	CALL TKGTXY(DEV,TKBLEN,TKBUF,TKLEN)
	IF (DEV.NE.1) GOTO 320	! not from keyboard
C
C TEK keyboard input
	HADKB = .TRUE.
	TTPROM = WOSPIN		! want prompt if this is SYS$INPUT
	CTRLZ = TKIOSB(4).EQ.1.AND.TKIOSB(3).EQ.26
	IF (TKLEN.NE.0) THEN	! line not empty
	   PTR = 0
	   IF (POSPND.AND..NOT.PROINQ) THEN
	      PTR = EXPAND(
     &			'%W%%POS %G0.8 %G0.8#',TXTBUF,POSXY(1),POSXY(2))
	      POSPND = .FALSE.
	   ENDIF
	   DO 310 I=1,TKLEN
	      TXTBUF(I+PTR) = TKBUF(I)
310	   CONTINUE
	   TXTPTR = PTR+TKLEN
	ENDIF
	GOTO 990		! return with TXTBUF filled
				! ready for decoder
C
C Tek bitpad or mouse input
320	BUTTON = TKBUT
	TABXY(1) = TKXY(1)
	TABXY(2) = TKXY(2)
C
C Alter mouse button from 1-3 to 0-2
	IF (DEV.EQ.4) BUTTON = BUTTON-1
C
C The coordinate is in NDC (0-1 in longest axis, 0-less than 1 in other)
C On TEK, it is always measured in the map viewport.
C On Westward, we have TKVIEW = view number - MAP,MENUm otherwise screen
C
	IF (WTYPES(1).NE.1000.OR.TKVIEW.EQ.MAP_VIEW) THEN! TEK
C
C TEK, or Westward in the map view
C Convert from NDC (0-1) to a map coordinate
	   CALL GKSD2W(1,TABXY(1),TABXY(2),TABXY(1),TABXY(2))
	   DIFFWX = WINDOW(2)-WINDOW(1)
	   DIFFWY = WINDOW(4)-WINDOW(3)
	ELSE
C
C Westward in menu view or no view, convert to screen metres
	   IF (TKVIEW.EQ.MENU_VIEW) THEN
	      IF (SCRMEN_SIZX.GT.SCRMEN_SIZY) THEN
	         FACTOR = SCRMEN_BRDR(1,3)-SCRMEN_BRDR(1,2)
	      ELSE
	         FACTOR = SCRMEN_BRDR(2,1)-SCRMEN_BRDR(2,2)
	      ENDIF
	      TABXY(1) = SCRMEN_BRDR(1,2)+FACTOR*TABXY(1)
	      TABXY(2) = SCRMEN_BRDR(2,2)+FACTOR*TABXY(2)
	   ELSE
	      TABXY(1) = TABXY(1)*SCRSZX(1)
	      TABXY(2) = TABXY(2)*SCRSZX(1)
	   ENDIF
	ENDIF
C
	SAVXY(1) = TABXY(1)
	SAVXY(2) = TABXY(2)
C
C If tracking button, check for screen menu
	IF (BUTTON.EQ.0) THEN	! tracking button
C
C convert to a screen coordinates (if using screen menus)
C
	   IF (SCRINI) THEN
	      IF (WTYPES(1).EQ.1000) THEN	! Westward
	         IF (TKVIEW.NE.MENU_VIEW) GOTO 330
	         SCRXY(1) = TABXY(1)
	         SCRXY(2) = TABXY(2)
	      ELSE				! TEK
	         IF ((DIFFWX/DIFFWY).GT.(SCRNSX(1)/SCRNSY(1))) THEN
	            FACTOR = SCRNSX(1)/DIFFWX
	         ELSE
	            FACTOR = SCRNSY(1)/DIFFWY
	         ENDIF
	         SCRXY(1) = (TABXY(1)-WINDOW(1))*FACTOR	! in metres
	         SCRXY(2) = (TABXY(2)-WINDOW(3))*FACTOR
	      ENDIF
C
C in screen menu?
	      IF (INPLGN(SCRXY,4,SCRMEN_BRDR,0.0001)) THEN
	         CALL SCRNTIP(SCRXY,STRING,STRLEN)	! interpret
	         POS = .FALSE.
	         BUTTON = 1		! frig button number
	         GOTO 910
	      ENDIF
	   ENDIF
C
330	   IF (WTYPES(1).EQ.1000.AND.TKVIEW.NE.MAP_VIEW) GOTO 10
	   IF (RUBISH(TABXY)) GOTO 10	! out of range
	   POSXY(1) = TABXY(1)
	   POSXY(2) = TABXY(2)
	   POSPND = .TRUE.		! POS command pending
	   POSDON = .FALSE.		! POS not done yet
	   GOTO 990			! perform immediately
	ENDIF
C
C otherwise convert to bitpad coordinates
	IF (WTYPES(1).EQ.1000) THEN	! Westward
	   IF (TKVIEW.EQ.MAP_VIEW) THEN
C
C Westward in map view, convert from map coord to screen metres
	      IF ((DIFFWX/DIFFWY).GT.(SCRNSX(1)/SCRNSY(1))) THEN
	         FACTOR = SCRNSX(1)/DIFFWX
	      ELSE
	         FACTOR = SCRNSY(1)/DIFFWY
	      ENDIF
	      TABXY(1) = (TABXY(1)-WINDOW(1))*FACTOR+SCRSZX(1)*WKVSWX(1)
	      TABXY(2) = (TABXY(2)-WINDOW(3))*FACTOR+SCRSZY(1)*WKVSWY(1)
	   ENDIF
	ELSE				! TEK
C
C bitpad (0-1 is whole map area)
	   TABXY(1) = (TABXY(1)-WINDOW(1))/DIFFWX
	   TABXY(2) = (TABXY(2)-WINDOW(3))/DIFFWY
	ENDIF
C
C increase 0-1 range to 'bitpad counts'
	TABXY(1) = 1000.0*TABXY(1)
	TABXY(2) = 1000.0*TABXY(2)
	GOTO 900		! to get this table read interpreted
C
C got direct table input
400	DTBREAD=.FALSE.
C
	IF (.NOT.DTBOSB(1)) THEN
	   CALL MOAN(MSG_ERRINTABRD)
	   CALL LITES2_SIGNAL(DTBOSB(1))
	   GOTO 100
	ENDIF
C
C translate string
	J=DTBOSB(2)				! I*2 -> I*4
	IF (J.EQ.0) GOTO 100
	IF (DIGTRN(DTBBUF,J,BUTTON,IX,IY,USEFUN,%VAL(FUNADR))) THEN
	   CALL INFORM(MSG_TABERRREAD,DTBBUF)   ! error in string
	   GOTO 100
	ELSE
	   DEV=DIGLIN
	   TABXY(1)=IX
	   TABXY(2)=IY
	ENDIF
	GOTO 900
C
C got table monitor input
C
500	DEV=DIGLIN		! only from table, never from bitpad
	BUTTON=BU		! byte to long conversion
	TABXY(1)=IX		! long to real conversion
	TABXY(2)=IY		!  "	   "       "
C
	IF (BUTTON.EQ.0) THEN		! stream button
	   STREAM = .TRUE.		! want stream next time
	   CALL READ_STREAM(IX,IY,IERR)	! clear event flag
	ELSEIF (BUTTON.LT.0) THEN	! was streamed
	   STREAM = .TRUE.		! want stream next time
	   BUTTON = 0			! stream button
	ENDIF
	GOTO 900
C
C got input from auxiliary line
C
600	IF (SERVAUX(AUXIOSB,TTBLEN,AUXBUF)) THEN
	   HADKB = .TRUE.
	   GOTO 990
	ELSE
	   GOTO 10
	ENDIF
C
C interpret input from table/bitpad/screen menu
C
900	CONTINUE
	CALL TRNTIP(DEV,BUTTON,TABXY,POS,STRING,STRLEN,FROM_MENU)
C
C TRNTIP sets POS correctly for table and tracking area, taking account
C of any PRIORITY POSITION command. It also converts TABXY to IFF units
C for these devices.
C It sets up POS .FALSE. for all other devices and does not alter TABXY.
C
C if coordinate from BITPAD, and not in menu, then get TABXY back into
C IFF units
	IF ((WTYPES(1).NE.1000.OR.TKVIEW.EQ.MAP_VIEW).AND.
     &	    DEV.EQ.BITLIN.AND..NOT.FROM_MENU) THEN
	   TABXY(1) = SAVXY(1)
	   TABXY(2) = SAVXY(2)
	ENDIF
C	   
C For other coordinate producing devices dealt with in INTERACT
C POS is set by CHKPRIPOS
	IF (.NOT.FROM_MENU) CALL CHKPRIPOS(DEV,BUTTON,POS)
C
C is there a POS command to set pending
	IF (POS) THEN		! this probe defined a position
	   IF ((BUTTON.EQ.0).OR..NOT.POSCMD) THEN	! so use it
	      POSXY(1) = TABXY(1)
	      POSXY(2) = TABXY(2)
	      IF (.NOT.RUBISH(POSXY)) THEN
	         POSPND = .TRUE.
	         POSDON = .FALSE.		! POS not done yet
	      ENDIF
	   ENDIF
	ENDIF
910	IF (BUTTON.EQ.0.OR.STRLEN.EQ.0) GOTO 990	! no command
C
	IF (.NOT.QUIOPT) CALL PING		! acknowledge button
	PTR = 0
	IF (POSPND.AND..NOT.PROINQ) THEN
	   PTR = EXPAND('%W%%POS %G0.8 %G0.8#',TXTBUF,POSXY(1),POSXY(2))
	   POSPND = .FALSE.
	ENDIF
	TXTPTR = PTR + EXPAND('%W%S',TXTBUF(PTR+1),STRING(1:STRLEN))
C
C have we got anything?
990	IF (TXTPTR.EQ.0.OR.PROINQ) THEN		! no
	   IF (POSPND.AND..NOT.POSDON) THEN	! perform implicit POS
C
C If there is a cursor constraint, then we have to journal explicit
C POS command, otherwise journal may not reproduce correct results
	      IF (ROLING.AND..NOT.PROINQ) THEN
	         TXTPTR = EXPAND(
     &			'%W%%POS %G0.8 %G0.8#',TXTBUF,POSXY(1),POSXY(2))
	         POSPND = .FALSE.
	         GOTO 999
	      ENDIF
	      DREALS(1) = POSXY(1)		! load arguments
	      DREALS(2) = POSXY(2)
	      DNREA = 2
	      CALL DOPOSI			! execute POS
	      CALL UPDATE			! update picture etc.
	      POSDON = .TRUE.			! done POS
	   ENDIF
C
C If CTRL/C not pressed, then try again, else return blank line and
C let command decoder deal with it.
C NB we should return to INTERACT before any more commands are obeyed
	   IF (TXTPTR.EQ.0.AND.(.NOT.PROINQ.OR..NOT.HADKB)) THEN
	      IF (CTRLC.EQ.CTRLC_OFF) GOTO 10
	      IF (FOLLOWING) CALL ENDFOLL	! stop following on CTRLc
	   ENDIF
	ENDIF
C
999	MOANED = .FALSE.	! don't let command decoder ignore line
	RETURN
	END
