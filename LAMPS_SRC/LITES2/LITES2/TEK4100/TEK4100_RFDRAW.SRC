C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-12-12 14:39:20.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE RFDRAW
C
***	MODULE	RFDRAW
***	IDENT	12DE89
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author Clarke Brunt	10-August-1984
C
C To draw the refresh picture
C Contains routines specific to GKSLDLIB and TEK4100
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:CTXS/
***	PARAMETER/CMN:END/
***	PARAMETER/CMN:GKSPAR/
***	PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:PACK/
***	PARAMETER/CMN:STAPAR/
***	PARAMETER/CMN:TEK4100/
C
	INCLUDE 'LSL$CMNIFF:CB.STR'
C
***	COMMON/CMN:CSTRCT/
***	COMMON/CMN:CTXS/
***	COMMON/CMN:DRAWIN/
***	COMMON/LSL$CMNFRT:FRTCOM/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:MODIFY/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:OIIH/
***	COMMON/CMN:RFCTRL/
***	COMMON/CMN:STATE/
***	COMMON/CMN:STRIKE/
***	COMMON/CMN:VARIAT/
***	COMMON/CMN:WORKS/
C
C functions called
C
	LOGICAL		FRTFND
C w/s
C
	REAL	X,Y			! temporary coordinates
	INTEGER	WKID
	INTEGER*2 DUMMYE		! dummy I*2 variable
	LOGICAL*1 DUMMYL		! dummy L*1 variable
	LOGICAL*1 TEKFLS		! flush TEK
C
	DATA	DUMMYE,DUMMYL/0,.TRUE./
C
C Do nothing if no display
	IF (NODISP) GOTO 999
C
	TEKFLS = .FALSE.		! don't need to flush TEK
C
C do we need to clear the old refresh bits?
C
C Has the found object changed?
	IF (RFFSEG.NE.0) THEN		! have a found item drawn
	   IF (.NOT.FO) THEN		! but no found item
	      IF (IH.AND.RFFSEG.EQ.IHPAK(PAKSEG)) THEN	! in hand
	         RFHOFF = RFFOFF
	         RFHTOP = RFFTOP
	      ENDIF
	      GOTO 30
	   ENDIF
	   IF ( RFFSEG.NE.FOPAK(PAKSEG).OR.	! not same item or
     &		RFFVO.NE.FOVO) GOTO 30		! different vertices
	   IF (FOVRT-RFFOFF.LE.RFCRIT) THEN	! want earlier
	      IF (RFFOFF.GT.FOVO) GOTO 30	! more available
	   ELSEIF (FOVRT-RFFOFF.GT.RFFTOP-RFCRIT) THEN	! want later
	      IF (RFFOFF+RFFTOP.LT.FOVO+FOTOP) GOTO 30	! available
	   ENDIF
C
C has cursor moved on composite text?
	   IF (FOPAK(PAKGT).EQ.TEXTYP.AND.
     &	               (RFFCTX.NE.FTRCTXD(CTXD_HOME))) GOTO 30
	   GOTO 40
C
30	   CALL WSHLIT(FO_SEG,0)
	   CALL WDSG(FO_SEG)
	   RFFSEG = 0
	   TEKFLS = .TRUE.
	ENDIF
C
C has the object in hand changed
40	IF (RFHSEG.NE.0.AND.((.NOT.IH).OR.	! no IH, but one drawn
     &      (SINDEX.EQ.STATE_EDIT.AND.CHPOS))) THEN ! moving
	   CALL WSHLIT(IH_SEG,0)
	   CALL WDSG(IH_SEG)
	   RFHSEG = 0
	   TEKFLS = .TRUE.
	ENDIF
C
C construction
	IF (RFCIND.NE.0) THEN
	   IF (((SINDEX.NE.STATE_CONSTRUCT).AND.
     &	        (SINDEX.NE.STATE_ON.OR.NDMODE.NE.END_INCLUDE)).OR.
     &	         CONIND.EQ.0.OR.CONIND.NE.RFCIND) THEN
	      CALL WSHLIT(CT_SEG,0)
	      CALL WDSG(CT_SEG)
	      RFCIND = 0
	      TEKFLS = .TRUE.
	   ENDIF
	ENDIF
C
C ensure old rubber band is removed when construction changes
	IF (((SINDEX.EQ.STATE_CONSTRUCT).OR.
     &	     (SINDEX.EQ.STATE_ON.AND.NDMODE.EQ.END_INCLUDE)).AND.
     &	      CONIND.NE.RFCIND			) RUBCHG = .TRUE.
C
C modification
	IF (RFMOD.AND.MODMOD) THEN
	   CALL WSHLIT(MD_SEG,0)
	   CALL WDSG(MD_SEG)
	   RFMOD = .FALSE.
	   TEKFLS = .TRUE.
	ENDIF
C
C rubber band
	IF (RFRUB.AND.RUBCHG) THEN
	   CALL WSHLIT(RB_SEG,0)
	   CALL WDSG(RB_SEG)
	   RFRUB = .FALSE.
	   TEKFLS = .TRUE.
	ENDIF
C
C Is there anything to draw?
	IF (	   (CURS.NEQV.RFCURS) .OR.
     &		   (CURS.AND.(.NOT.INTCUR.OR.(RFBIG.NEQV.BIGOPT).OR.
     &					     (RFBNK.NEQV.BNKOPT))) .OR.
     &		   (FO.AND.RFFSEG.EQ.0) .OR.
     &		   (IH.AND.RFHSEG.EQ.0) .OR.
     &		   (((SINDEX.EQ.STATE_CONSTRUCT).OR.
     &	     	     (SINDEX.EQ.STATE_ON.AND.NDMODE.EQ.END_INCLUDE)).AND.
     &	      	      CONIND.GT.0.AND.RFCIND.EQ.0) .OR.
     &		   (SINDEX.EQ.STATE_MODIFY.AND.MODMOD) .OR.
     &		   ((RUBLIN(1).OR.RUBLIN(2)).AND..NOT.RFRUB) ) GOTO 500
C
C check for just cursor movement
	IF (CURS.AND.(CSXY(1).NE.OCSXY(1).OR.CSXY(2).NE.OCSXY(2))) THEN
	   IF (RFRUB) GOTO 500		! need to amend rubber line
	   CALL GKSW2D(1,CSXY(1),CSXY(2),X,Y)	! convert to NDC
	   CALL WSSGXY(CU_SEG,X,Y)
	   OCSXY(1) = CSXY(1)
	   OCSXY(2) = CSXY(2)
	   TEKFLS = .TRUE.			! will need to flush
	ENDIF
	GOTO 990
C
C preserve drawing controls
500	THKSAV = THKOPT
	AKISAV = CUROPT
	PATSAV = PATOPT
C
C turn off all fancy features
	OVCOL = 15			! overriding colour 15
	THKOPT = .FALSE.
	CUROPT = .FALSE.
	PATOPT = .FALSE.
	FRTARE = .FALSE.		! not an area
	FRTSYM = .FALSE.		! or a symbol
	FRTTEX = .FALSE.		! or a text
	FRTFC = -1			! invalidate FRTCOM
	CALL SETCOL			! set polyline colour
	FRTSYM = .TRUE.			! pretend symbol
	CALL SETCOL			! set symbol/text colour
	CALL WDSGCM(-2,0,2)		! create in refresh class
	CALL WSHLIT(-2,1)		! create highlighted
	CALL WSWRTM(-2,2)		! and create in XOR mode
	REFNG = .TRUE.			! now refreshing
	TEKFLS = .TRUE.			! will need to flush
C
C Do we need a cursor?
	IF (CURS) THEN			! yes
	   IF (.NOT.INTCUR) THEN	! not initialised yet
	      CSXY(1) = (WINDOW(1)+WINDOW(2))/2.0
	      CSXY(2) = (WINDOW(3)+WINDOW(4))/2.0
	      INTCUR = .TRUE.
	      GOTO 10
	   ENDIF
C
	   IF (RFCURS.AND.
     &		CSXY(1).EQ.OCSXY(1) .AND. CSXY(2).EQ.OCSXY(2)) GOTO 20
10	   IF (RFCURS) THEN
	      CALL WSHLIT(CU_SEG,0)
	      CALL WDSG(CU_SEG)
	   ENDIF
	   CALL GKSW2D(1,CSXY(1),CSXY(2),X,Y)
	   CALL WSSGXY(-2,X,Y)	! create at correct position
	   CALL WCRSG(CU_SEG)
	   CALL T4100CSWT	! draw cursor
	   CALL WCLSG
C
C On Westward, cannot clear the effect of WSSGXY (?) so reset to
C same position as pivot point, so ordinary segments in correct
C position. On TEK, another call to WSPVPT clears WSSGXY(-2...).
	   IF (WTYPES(1).EQ.1000) THEN	! it's a Westward
	      CALL WSSGXY(-2,0.5,0.5)! create at pivot point
	   ELSE
	      CALL WSPVPT(0.5,0.5)   ! reset pivot point (clear WSSGXY)
	   ENDIF
C
C possibly don't blink cursor
	   IF (.NOT.BNKOPT) CALL WSHLIT(CU_SEG,0)
C
	   IF (RFRUB) THEN
	      CALL WSHLIT(RB_SEG,0)
	      CALL WDSG(RB_SEG)
	      RFRUB = .FALSE.
	   ENDIF
C
	   OCSXY(1) = CSXY(1)
	   OCSXY(2) = CSXY(2)
	   RFCURS = .TRUE.
	   RFBIG = BIGOPT
	   RFBNK = BNKOPT
	ELSE
	   IF (RFCURS) THEN
	      CALL WSHLIT(CU_SEG,0)
	      CALL WDSG(CU_SEG)
	      RFCURS = .FALSE.
	   ENDIF
	ENDIF
C
C draw the new refresh picture
20	IF (FO.AND.RFFSEG.EQ.0) THEN	! there is a found item
C
	   RFFOFF = MIN(FOVRT-RFOFF,	! to place FOVRT at RFOFF
     &			FOLST-RFFULL)	! to place last vertex at RFFULL
	   RFFOFF = MAX(RFFOFF,FOVO)	! force into FOXY
	   RFFTOP = MIN(RFFULL,FOTOP+FOVO-RFFOFF)
C
	   CALL WCRSG(FO_SEG)
C
C is it a line, curve, symbol string, or area
	   IF (	FOPAK(PAKGT).EQ.LINTYP .OR.
     &		FOPAK(PAKGT).EQ.CURTYP .OR.
     &		FOPAK(PAKGT).EQ.STRTYP .OR.
     &		FOPAK(PAKGT).EQ.ARETYP ) THEN
C
C just draw selected vertices we have in memory
	      FRTARE = .FALSE.		! refresh area as line
	      FRTFC = -1		! invalidate FRTCOM
	      CALL STDBFF(0)		! clear buffer
	      CALL STDBFA(RFFTOP,FOXY(1,RFFOFF+1-FOVO),
     &	                  FOZI(RFFOFF+1-FOVO)) ! add points
	      CALL STDBFF(2)		! flush them out
C
C add F/L markers
	      CALL DRAWFL
	   ELSE
C
C draw entire feature for circles, symbols, or text
	      IF (FRTFND(FOPAK(PAKFC))) THEN
	         CALL NASTY(MSG_BADCODE,FOPAK(PAKFC))
	         CALL COLAPS(MSG_BADCODE)
	      ENDIF
	      IF (FRTTEX) THEN				! draw text
	         CALL BOXCTX(FTRCTXD,FOPAK,DUMMYL,DUMMYL)
	         RFFCTX = FTRCTXD(CTXD_HOME)
	      ELSE					! draw symbols
	         CALL STDRAW(				! and circles	
     &		FOTOP,FOXY,FONATT,STR_MAX_ATTR,FOATTC,FOATTV,
     &		FOAUX,FOTXT(1:MAX(1,FOPTR)),
     &		DUMMYL,DUMMYL,DUMMYE,DUMMYL,FOPAK,FOFS)
	      ENDIF
	   ENDIF
	   RFFSEG = FOPAK(PAKSEG)	! have a found object refreshed
	   RFFVO = FOVO			! its vertex offset
C
	   CALL WCLSG
	ENDIF
C
C object in hand
	IF (IH.AND.SINDEX.NE.STATE_MODIFY.AND.RFHSEG.EQ.0) THEN
C
	   CALL WCRSG(IH_SEG)
C
C is it a line, curve, symbol string, or area
	   IF (	IHPAK(PAKGT).EQ.LINTYP .OR.
     &		IHPAK(PAKGT).EQ.CURTYP .OR.
     &		IHPAK(PAKGT).EQ.STRTYP .OR.
     &		IHPAK(PAKGT).EQ.ARETYP ) THEN
C
C just draw selected vertices we have in memory
	      FRTARE = .FALSE.		! refresh area as line
	      FRTFC = -1		! invalidate FRTCOM
	      IF (SINDEX.EQ.STATE_EDIT.AND.CHPOS) THEN
	         CALL RFMOVE		! moving
	      ELSE
	         CALL STDBFF(0)		! clear buffer
	         CALL STDBFA(RFHTOP,IHXY(1,RFHOFF+1-IHVO),
     &	                     IHZ(RFHOFF+1-IHVO)) ! add points
	         CALL STDBFF(2)		! flush them out
	      ENDIF
	   ELSE
C
C draw entire feature for circles, symbols, or text
	      IF (FRTFND(IHPAK(PAKFC))) THEN
	         CALL NASTY(MSG_BADCODE,IHPAK(PAKFC))
	         CALL COLAPS(MSG_BADCODE)
	      ENDIF
	      IF (FRTTEX) THEN				! draw texts
	         CALL BOXCTX(IHCTXD,IHPAK,DUMMYL,DUMMYL)
	      ELSE
	         CALL STDRAW(		! draw symbols and circles
     &		IHTOP,IHXY,0,1,0,0,IHAUX,IHTXT(1:MAX(1,IHPTR)),
     &		DUMMYL,DUMMYL,DUMMYE,DUMMYL,IHPAK,IHFS)
	      ENDIF
	   ENDIF
	   RFHSEG = IHPAK(PAKSEG)	! have object in hand refreshed
C
	   CALL WCLSG
	ENDIF
C
C draw construction
	IF (((SINDEX.EQ.STATE_CONSTRUCT).OR.
     &	     (SINDEX.EQ.STATE_ON.AND.NDMODE.EQ.END_INCLUDE)).AND.
     &	      CONIND.GT.0.AND.RFCIND.EQ.0) THEN
	   IF (CONIND.GT.1) THEN	! can't refresh a single point
	      CALL WCRSG(CT_SEG)
	      FRTARE = .FALSE.		! refresh area as line
	      FRTFC = -1		! invalidate FRTCOM
	      CALL STDBFF(0)		! clear buffer
	      RFCIND = MIN(CONIND,RFFULL) ! number to refresh
	      CALL STDBFA(RFCIND,CONXY(1,CONIND-RFCIND+1), ! add points
     &	                        CONZ(CONIND-RFCIND+1))
	      CALL STDBFF(2)		! flush them out
	      RFCIND = CONIND		! have refreshed construction
	      CALL WCLSG
	   ENDIF
C
C set up rubber band
	   RUBLIN(1) = .TRUE.
	   RUBARR(1,1) = CONXY(1,CONIND)
	   RUBARR(2,1) = CONXY(2,CONIND)
	ENDIF
C
C draw modification
	IF (SINDEX.EQ.STATE_MODIFY.AND.MODMOD.AND..NOT.RFMOD) THEN
C
C and draw symbol/text
C
	   CALL WCRSG(MD_SEG)
C
C First fill FRTCOM as it tends to get corrupted!
	   IF (FRTFND(COIPAK(PAKFC))) THEN
	      CALL NASTY(MSG_BADCODE,COIPAK(PAKFC))
	      CALL COLAPS(MSG_BADCODE)
	   ENDIF
C
C now display symbol/text
C
	   IF (FRTTEX) THEN
	      CALL BOXCTX(COICTXD,COIPAK,DUMMYL,DUMMYL)
	   ELSE
	      CALL STDRAW(
     &	COIIND-1,COIXY(1,2),COINATT,OIH_MAX_ATTR,COIATTC,COIATTV(1,2),
     &		COIAUX,COIDSC,
     &		DUMMYL,DUMMYL,DUMMYE,DUMMYL,COIPAK,COIFS)
	   ENDIF
	   RFMOD = .TRUE.
	   CALL WCLSG
	ENDIF
C
C draw rubber band lines
	IF ((RUBLIN(1).OR.RUBLIN(2)).AND..NOT.RFRUB) THEN
	   CALL WCRSG(RB_SEG)
	   CALL RFBAND(1)
	   RFRUB = .TRUE.
	   CALL WCLSG
	ENDIF
C
C restore everything
	OVCOL = -1
	THKOPT = THKSAV
	CUROPT = AKISAV
	PATOPT = PATSAV
	RUBCHG = .FALSE.
	MODMOD = .FALSE.
	CALL WSHLIT(-2,0)		! don't create highlighted
	IF (WTYPES(1).EQ.1000) THEN	! it's a Westward
	   CALL WDSGCM(-2,2,0)		! create in no class
	ELSE
	   CALL WDSGCM(-2,-1,0)		! create in no class
	ENDIF
	CALL WSWRTM(-2,1)		! and create in SET mode
C
	REFNG = .FALSE.			! no longer refreshing
C
C update displays
990	IF (TEKFLS) THEN
	   IF (WTYPES(1).EQ.1000) THEN
	      CALL WEST_REFRSH
	   ELSE
	      CALL GUWK(1,GSUPP)
	   ENDIF
	ENDIF

C
999	RETURN
	END
C
	SUBROUTINE T4100CSWT
C
***	MODULE	T4100CSWT
***	IDENT	24AP85
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author Clarke Brunt	19-February-1984
C
C Nasty little routine to get a cursor up on the TEK 4100
C
	IMPLICIT NONE
C
***	COMMON/CMN:DRAWIN/
***	COMMON/CMN:OPTION/
C
C workspace
	REAL	SIZE,DUMMY
C
C always draw at 0.5,0.5 - segment moved to correct position
	IF (BIGOPT) THEN
	   SIZE = 50.0			! big (approx 10cm)
	ELSE
	   SIZE = 5.0			! small (approx 1cm)
	ENDIF
	SIZE = SIZE*SCLDIS		! to WC
	CALL GW2D(1,SIZE,DUMMY,SIZE,DUMMY)! and to NDC
	CALL GUPLIN
	CALL MOVTO(0.5-SIZE,0.5)
	CALL LINTO(0.5+SIZE,0.5)
	CALL MOVTO(0.5,0.5-SIZE)
	CALL LINTO(0.5,0.5+SIZE)
C
	RETURN
	END
