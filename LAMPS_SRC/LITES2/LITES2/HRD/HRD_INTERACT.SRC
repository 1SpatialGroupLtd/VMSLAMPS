C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-03-18 14:29:02.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE INTERACT(CTRLZ)
C
***	IDENT   18MR92
***	MODULE  INTERACT
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Written					CCB	 7-DEC-1984
C
C Description
C
C	LITES2 cartographic editor interactive input routine
C
C      ---      THIS SUBROUTINE IS INSTALLATION DEPENDENT      ---
C	   ---   This is HRD (LDLIB) Version (no table)	---
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:EFNLUN/
***	PARAMETER/CMN:MOANMESS/
C
***	COMMON/CMN:DOUT/
***	COMMON/CMN:DRAWIN/
***	COMMON/CMN:GLOBAL/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:PROMPT/
***	COMMON/CMN:RFCTRL/
***	COMMON/LSL$CMNLSL:TXTC/
***	COMMON/CMN:VAREFN/
***	COMMON/CMN:WORKS/
C
C
C argument
	LOGICAL*1	CTRLZ		! true when command from
					! keyboard terminated with ^Z
C
C functions called
	INTEGER*4	EXPAND
	LOGICAL		RUBISH
	LOGICAL		AUXACT		! are auxiliary inputs active
	LOGICAL		SERVAUX		! service the auxiliary inputs
	LOGICAL		AUXOFF		! has an auxiliary input gone off
	LOGICAL		SERV_FOLLOW	! service event from following
C
C local variables
	INTEGER*4	IERR
	INTEGER*4	MASK
	INTEGER		I,J,K
	INTEGER*4	DEV,BUTTON
	REAL		TEKXY(2)	! TEK cursor position
	INTEGER*2	CS1,CS2
	INTEGER		PTR
	LOGICAL*1	POS		! positioning command
	LOGICAL*1	POSDON		! implicit POS done?
	CHARACTER*30	STRING		! command string from TRNTIP
	INTEGER*4	STRLEN		! length of string
	LOGICAL*1	RDHRD		! checking HRD ball and buttons
	LOGICAL		DUMMY
	INTEGER		TERMLEN
	LOGICAL		HADKB		! input from TT or AUX
C
C initialise
C
	TXTPTR = 0			! nothing in TXTBUF
C
10	CTRLZ = .FALSE.			! assume not CTRL/Z
	HADKB = .FALSE.			! no keyboard input
	CALL PROMPT			! prompt if required
C
C service any inputs from auxiliary lines, that are outstanding
C
	IF (AUXACT()) THEN		! are any aux inputs active?
	   IF (.NOT.AUX_READ) THEN	! no read up
	      IF (AUXOFF(AUXIOSB)) GOTO 600
	   ENDIF
	ENDIF
C
C get reads going
C ===============
C
C set ordinary terminal read going
	IF (.NOT.TTREAD.AND..NOT.TTABORT) THEN
	   CALL QIOUP(TTASN,'SYS$INPUT',TTICHN,TTIFLG,TTIOSB,,
     &	              TTBLEN,TTBUF,TTREAD,TTABORT)
	   IF (TTABORT) GOTO 999
	ENDIF
C
C put up reads for auxiliary inputs
C then go and see if any have gone off
	CALL STRTAUX(AUXIOSB,,TTBLEN,AUXBUF)
	IF (AUXOFF(AUXIOSB)) GOTO 600
C
C now wait for a response from somewhere
150	CONTINUE
C
C see if anything doing at the HRD before we wait for event
	IF (WKOP(1)) THEN
	   RDHRD = .TRUE.
	   GOTO 170
	ENDIF
C
C build event flag wait mask
151	MASK = 0				! clear to start with
	CALL EFWM(MASK,TTIFLG,CLCFLG)		! terminal and CTRL/C
	IF (AUX_READ) CALL EFWM(MASK,AUXFLG)
	IF (WKOP(1)) THEN
	   CALL EFWM(MASK,TABFLG)		! LDLIB flag
	   CALL SYS$CLREF( %VAL(TABFLG) )	! clear it
	ENDIF
	IF (WKOP(1).AND..NOT.TIMOUT) THEN
	   CALL EFWM(MASK,TMOFLG)		! TEK display timeout
	   CALL TMOTMR				! set timer going
	ENDIF
C
C stream digitising?
	IF (FOLLOWING) CALL EFWM(MASK,FOLFLG)
	IF (FOLLOWING.AND..NOT.FOLLOW_TIMING) THEN
	   CALL FOLTMR()
	   FOLLOW_TIMING = .TRUE.
	ENDIF
C
C and wait for it
160	IF (CTRLC.NE.CTRLC_OFF) THEN
	   CALL SYS$CLREF(%VAL(CLCFLG))
	   GOTO 990
	ENDIF
	CALL SYS$WFLOR( %VAL(TTIFLG), %VAL(MASK) )
C
C has TEK timed out
	IF (TMOTED) THEN
	   CALL RFSTOP				! stop refresh cycling
	   TIMOUT = .TRUE.			! remember timed out
	   TMOTED = .FALSE.
	   GOTO 150				! wait again
	ENDIF
C
C if had timed out, then start refresh up again
	IF (TIMOUT) THEN
	   CALL REFRSH
	   TIMOUT = .FALSE.
	ENDIF
C
170	IF (WKOP(1)) THEN
C
C check if trackerball has moved
	   CALL GETPCC(CS1)		! count cursor moves
	   CALL CSAJST(TEKXY(1),TEKXY(2))	! read cursor
	   CALL GETPCC(CS2)		! new cursor moves
	   IF (CS2.GT.CS1) THEN		! locally tracked?
C
C Convert to world coordinates
	      CALL GKSD2W(1,TEKXY(1),TEKXY(2),TEKXY(1),TEKXY(2))
	      IF (RUBISH(TEKXY)) THEN	! out of range
	         POSXY(1) = CSXY(1)	! re-position
	         POSXY(2) = CSXY(2)
	         OCSXY(1) = CSXY(1)+1.0	! force re-write
	      ELSE
	         POSXY(1) = TEKXY(1)
	         POSXY(2) = TEKXY(2)
	      ENDIF
	      POSPND = .TRUE.		! POS command pending
	      POSDON = .FALSE.		! POS not done yet
	      GOTO 990			! perform immediately
	   ENDIF
C
C read the function buttons, to see which has been hit most recently
	   CALL FBRD(I)			! see which FB has been hit
	   IF (I.NE.0) THEN
	      BUTTON = I-1		! into range 0-3
	      DEV = 4			! on device 4
	      GOTO 900
	   ENDIF
C
C if this was HRD read check, and nothing doing, then wait for event
	   IF (RDHRD) THEN
	      RDHRD = .FALSE.
	      GOTO 151
	   ENDIF
	ENDIF
C
C now look for what we have got
	IF (TTIOSB(1).NE.0) GOTO 200	! terminal input
C
C check for auxiliary input
	IF (AUX_READ) THEN
	   IF (AUXOFF(AUXIOSB)) GOTO 600
	ENDIF	      
C
C check for stream digitising timer
	IF (FOLLOWING.AND.FOLLOWED) THEN
	   CALL FOLTMR()		! start timer again
	   IF (SERV_FOLLOW()) GOTO 990	! got valid coordinate
	   GOTO 10			! round again
	ENDIF
C
C check for CTRL/C
	IF (CTRLC.NE.CTRLC_OFF) THEN
	   CALL SYS$CLREF(%VAL(CLCFLG))
	   GOTO 990
	ENDIF
C
C nothing happening? Just call REFRSH and go round again
	CALL REFRSH
	GOTO 10
C
C got terminal input
200	TTREAD = .FALSE.	! no terminal read outstanding
	TTIDON = .TRUE.		! terminal input done (want prompt)
	IF (.NOT.TTIOSB(1)) THEN
	   CALL MOAN(MSG_ERRINTERRD)
	   CALL LITES2_SIGNAL(TTIOSB(1))
	   GOTO 10
	ENDIF
	HADKB = .TRUE.
C
C put string from terminal into TXTBUF
	CTRLZ = TTIOSB(4).EQ.1.AND.TTIOSB(3).EQ.26
	J = TTIOSB(2)		! number of chars input
	TERMLEN = TTIOSB(4)	! terminator length
	IF (J.EQ.0.AND.TERMLEN.LE.1) GOTO 990	! empty line
C
C Check for a valid keyboard escape sequence
	STRLEN = 0
	IF (TERMLEN.GT.1) CALL INTTERM(TTBUF(J+1),TERMLEN,STRING,STRLEN)
C
C Set appropriate carriage controls for next line -
C If the line was not terminated by c/r, then pretend not had terminal
C input, so next output will be preceded by newline, but force a prompt
C if some chars were typed (since TTIDON false would not prompt)
	IF (TTIOSB(3).NE.13) THEN
	   TTIDON = .FALSE.	! want newline before output
	   IF (J.NE.0) TTPROM = .TRUE.
	ENDIF
C
	PTR = 0
C
C add a POS command if required
	IF (POSPND.AND..NOT.PROINQ) THEN
	   PTR = EXPAND('%W%%POS %G0.8 %G0.8#',TXTBUF,
     &					POSXY(1),POSXY(2))
	   POSPND = .FALSE.
	ENDIF
C
C now the ordinary characters
	DO 250 I=1,J
	   TXTBUF(I+PTR) = TTBUF(I)
250	CONTINUE
	PTR = PTR+J
C
C and now the command resulting from an escape sequence
C Ignore escape command in an inquire if any ordinary chars
	IF (STRLEN.GT.0.AND.(J.EQ.0.OR..NOT.PROINQ)) THEN
	   IF (J.NE.0) THEN
	      PTR = PTR + 1
	      TXTBUF(PTR) = '#'
	   ENDIF
	   PTR = PTR + EXPAND('%W%S',TXTBUF(PTR+1),STRING(1:STRLEN))
	ENDIF
	TXTPTR = PTR
	GOTO 990		! return with TXTBUF filled
				! ready for decoder
C
C got input from auxiliary line
C
600	IF (SERVAUX(AUXIOSB,TTBLEN,AUXBUF)) THEN
	   HADKB = .TRUE.
	   GOTO 990
	ELSE
	   GOTO 10
	ENDIF
C
C interpret input from table/bitpad (function buttons)
900	CALL TRNTIP(DEV,BUTTON,TEKXY,POS,STRING,STRLEN,DUMMY)
C
C NB we only get here with a function button press on device 4
	IF (STRLEN.EQ.0) GOTO 990			! no command
	CALL FBWT16(ISHFT(1,BUTTON))			! light up
C
	PTR = 0
	IF (POSPND.AND..NOT.PROINQ) THEN
	   PTR = EXPAND('%W%%POS %G0.8 %G0.8#',TXTBUF,POSXY(1),POSXY(2))
	   POSPND = .FALSE.
	ENDIF
	TXTPTR = PTR + EXPAND('%W%S',TXTBUF(PTR+1),STRING(1:STRLEN))
C
C have we got anything?
990	IF (TXTPTR.EQ.0.OR.PROINQ) THEN		! no
	   IF (POSPND.AND..NOT.POSDON) THEN	! perform implicit POS
C
C If there is a cursor constraint, then we have to journal explicit
C POS command, otherwise journal may not reproduce correct results
	      IF (ROLING.AND..NOT.PROINQ) THEN
	         TXTPTR = EXPAND(
     &			'%W%%POS %G0.8 %G0.8#',TXTBUF,POSXY(1),POSXY(2))
	         POSPND = .FALSE.
	         GOTO 999
	      ENDIF
	      DREALS(1) = POSXY(1)		! load arguments
	      DREALS(2) = POSXY(2)
	      DNREA = 2
	      CALL DOPOSI			! execute POS
	      CALL UPDATE			! update picture etc.
	      POSDON = .TRUE.			! done POS
	   ENDIF
C
C If CTRL/C not pressed, then try again, else return blank line and
C let command decoder deal with it.
C NB we should return to INTERACT before any more commands are obeyed
	   IF (TXTPTR.EQ.0.AND.(.NOT.PROINQ.OR..NOT.HADKB)) THEN
	      IF (CTRLC.EQ.CTRLC_OFF) GOTO 10
	      IF (FOLLOWING) CALL ENDFOLL	! stop following on CTRLc
	   ENDIF
	ENDIF
C
999	MOANED = .FALSE.	! don't let command decoder ignore line
	RETURN
	END
C
C************************************************************************
C
C TEK timer routines
C
	SUBROUTINE TMOTMR
C
***	IDENT   12JN85
***	MODULE  TMOTMR
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C	Written					CCB	20-JUN-1985
C	To set TEK timeout timer going
C
	IMPLICIT NONE
C
***	COMMON/CMN:VAREFN/
	EXTERNAL	TMOAST			! timer AST routine
	INTEGER*4	DAYTIM(2)
	DATA		DAYTIM/-600 000 000,-1/	! 60 seconds
C
C cancel old request (if any)
	CALL SYS$CANTIM(%VAL(TMOFLG),)
C
C and set new one
	CALL SYS$SETIMR(%VAL(TMOFLG),DAYTIM,TMOAST,%VAL(TMOFLG))
	RETURN
	END
C
	SUBROUTINE TMOAST
C
***	IDENT   12JN85
***	MODULE  TMOAST
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C	Written					CCB	20-JUN-1985
C	TEK timer timeout AST routine
C
	IMPLICIT NONE
C
***	COMMON/CMN:WORKS/
C
	TMOTED = .TRUE.				! timed out
	RETURN
	END
