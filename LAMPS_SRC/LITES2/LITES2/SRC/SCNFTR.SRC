C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-05-10 17:16:08.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE SCNFTR(LINK, FUN)
C
***	MODULE	SCNFTR
***	IDENT	10MY96
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author  Clarke Brunt
C
C Coded 20.vii.84
C
C To scan a feature chain, applying a function to each
C data pack on the chain.
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:PACK/
C
C arguments
	INTEGER*4 LINK			! adress of pack to start at
C	FUN				! external routine
C
C FUN (EXTERNAL in the calling routine) is the function
C	to be applied to each data pack.
C It is called as FUN( PACK, PLINK ) where PACK is the pack itself,
C and PLINK is its address.
C
C w/s
	INTEGER*4	PACK(PAKLEN)	! a data pack
	INTEGER*4	THIS		! address of 'this' pack
	INTEGER*4	NEXT		! address of 'next' pack
	INTEGER*4	PNF		! NF pointer (debug)
	INTEGER*4	MAP		! map number (debug)
	LOGICAL*1	GOTPNF		! got NF pointer (debug)
C
	GOTPNF = .FALSE.		! no NF pointer yet (debug)
	NEXT = LINK			! 'next' pack is first one
C
C Get the next pack
10	THIS = NEXT
	CALL GETPAK( PACK, %VAL(THIS) )
	NEXT = PACK(PAKLNK)		! address of next one
C
C debugging check - make sure entire chain is for same feature
	IF (.NOT.GOTPNF) GOTO 20
	IF (PACK(PAKPNF).EQ.PNF.AND.PACK(PAKMAP).EQ.MAP) GOTO 30
	CALL NASTY(MSG_BADCHAIN)
	CALL COLAPS(MSG_BADCHAIN)
20	PNF = PACK(PAKPNF)		! NF pointer to check against
	MAP = PACK(PAKMAP)		! and map
	GOTPNF = .TRUE.			! got an NF pointer now
30	CONTINUE
C end of debugging check
C
C Apply our function to it
	CALL FUN( PACK, THIS )
C
C are we back to start of chain
	IF (NEXT.NE.LINK) GOTO 10
C
	RETURN
	END
