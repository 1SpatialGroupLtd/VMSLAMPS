C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-05-09 11:49:10.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE ASKRGB
C
***	IDENT	09MY96
***	MODULE	ASKRGB
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	31-May-1990
C
C	LITES2 cartographic editor ASK RGB command.
C
	IMPLICIT NONE
C
***     PARAMETER/CMN:CHARS/
***     PARAMETER/CMN:MOANMESS/		! moan constants
***	PARAMETER/LSL$CMNLSL:READSTR/
C
	INCLUDE	'($DSCDEF)'
C
***     COMMON/CMN:DOUT/		! command decoding output
***	COMMON/CMN:GLOBAL/
***     COMMON/CMN:MASTER/
***     COMMON/CMN:OVERLAY/
***     COMMON/CMN:WORKS/
C
C Functions
	INTEGER		ACT_GET_COLOUR_VALUE
	INTEGER		ACT_GET_COLOUR_ATTRIBUTE
	LOGICAL		TSTWK
C
	EXTERNAL OVERLAY_ATTRIBUTE_CMD_TABLE
C
C Local Variables
	INTEGER		TOP
	CHARACTER*12	ATTRIBUTE
	INTEGER		ATTRL
	INTEGER		ATTRN
	INTEGER*4	OK
	LOGICAL		USE_GKS
	LOGICAL		HAD_WS
	INTEGER		PLANES
	INTEGER		NULL
	CHARACTER*1	NULLC
	INTEGER		WTYPE
	INTEGER		WS		! ws
	INTEGER		OC,DC
	EQUIVALENCE	(OC,OVERLAY_CURRENT)
C
	DC = DISPLAY_CURRENT
	IF (DC.EQ.0) DC = OVERLAY_WORKSTATION
	USE_GKS = DC.LE.2.AND..NOT.OVERLAYS_INUSE
	IF (DC.EQ.0.AND..NOT.USE_GKS) THEN
	   CALL MOAN(MSG_NOCURDISP)
	   CALL LEARN(MSG_USEDISPNUM)
	   GOTO 9990
	ENDIF
	IF (.NOT.USE_GKS) THEN
	   IF (.NOT.DISPLAY_EXISTS(DC)) THEN
	      CALL MOAN(MSG_DISPNOTEXISTS,DC)
	      CALL LEARN(MSG_USEDISPCRE)
	      GOTO 9990
	   ENDIF
C
C valid overlay?
	   IF (OC.EQ.0) THEN
	      CALL MOAN(MSG_NOCUROV)
	      CALL LEARN(MSG_USEOVNUM)
	      GOTO 9990
	   ENDIF
	ELSE
C
C initialise default action
	   HAD_WS = .FALSE.
	   ATTRIBUTE = 'OPAQUE'
	   ATTRL = 6
C get highest workstation open - only for TEK_ARGS - a bit of a frig!!!
	   DO 10, WS = WSMAX,1,-1
	      IF (WKOP(WS)) THEN
	         HAD_WS = .TRUE.
	         GOTO 15
	      ENDIF
10	   CONTINUE
15	   IF (.NOT.HAD_WS) THEN
	      CALL MOAN(MSG_NOWORKSOPEN)
	      GOTO 9990
	   ENDIF
	ENDIF
C
C get maximum colour index
	IF (USE_GKS) THEN
	   WTYPE = WTYPES(WS)		! put WTYPES in local variable
	   IF (.NOT.TSTWK(WS,WTYPE,NULL,NULLC,PLANES)) GOTO 9990 ! no ws
	   HAD_WS = .TRUE.
	   IF (PLANES.EQ.0) THEN		! not colour display
	      CALL INFORM(MSG_NOCOLDISP,WS)
	      GOTO 9990
	   ELSEIF(PLANES.LT.0) THEN
	      CALL MSGCMD(MOAN,MSG_CMDNOTWITHHW)
	      GOTO 9990
	   ENDIF
	ELSE
	   PLANES = OVERLAY_PLANES(OC,DC)
	ENDIF
C
	TOP = 2**PLANES - 1
C
	IF (DINTS(1).GT.TOP) THEN		! argument out of range
	   CALL MOAN(MSG_ILLEGLVAL,DINTS(1),TOP)
	   GOTO 9990
	ENDIF
C
C get the required colour
	IF (USE_GKS) THEN
C
C get the colour from GKS
	   CALL LQCR(WS,DINTS(1),NULL,OK,ASK_REAL(1),ASK_REAL(2),ASK_REAL(3))
	ELSE
C
C get it from ACTLIB
	   OK = ACT_GET_COLOUR_VALUE(OVERLAY_PTR(OC,DC),
     &	       DINTS(1),ASK_REAL(1),ASK_REAL(2),ASK_REAL(3))
	   IF (.NOT.OK) THEN
	      CALL LITES2_SIGNAL(OK)
	      GOTO 9990
	   ENDIF
C
C and its attribute
	   OK = ACT_GET_COLOUR_ATTRIBUTE(OVERLAY_PTR(OC,DC),
     &	        DINTS(1),ATTRN)
	   IF (.NOT.OK) THEN
	      CALL LITES2_SIGNAL(OK)
	      GOTO 9990
	   ENDIF
C
C get the name from the attribute number
	   OK = 0
	   CALL FIND_CMDNAME(OVERLAY_ATTRIBUTE_CMD_TABLE,ATTRN,
     &	           ATTRIBUTE,ATTRL,OK)
	ENDIF
	CALL STR$COPY_DX(ASK_CHAR(1,1),ATTRIBUTE(1:ATTRL))
	ASK_CHAR_NUM = 1
	ASK_REAL_NUM = 3
C	
	GOTO 9999
C
9990	CALL IGNCMD
9999	RETURN
	END
