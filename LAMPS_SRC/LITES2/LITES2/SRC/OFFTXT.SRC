C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1995-02-03 17:51:26.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        SUBROUTINE OFFTXT
C
***     IDENT   03FE95
***     MODULE  OFFTXT
C
C       Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C       Written                                 RWR	25-Jul-1986
C
C Description
C
C	To OFFSET a text feature
C
        IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:AUXDEF/		! auxiliary array definitions
***	PARAMETER/CMN:CTXS/
***	PARAMETER/CMN:END/
***	PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:PACK/		! external pack definitions
***     PARAMETER/CMN:STAPAR/		! state constants
C
***	COMMON/CMN:CSTRCT/
***     COMMON/CMN:CTXS/
***	COMMON/CMN:DEFINE/
***     COMMON/CMN:DOUT/                ! cmd dec. output
***	COMMON/CMN:DRAWIN/
***	COMMON/LSL$CMNFRT:FRTCOM/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:MODIFY/
***	COMMON/CMN:OIIH/
***	COMMON/CMN:RFCTRL/
***     COMMON/CMN:STATE/		! state variables
***	COMMON/CMN:STRIKE/
***	COMMON/LSL$CMNLSL:TXTC/
C
C Functions called
C
	LOGICAL		COIDLE,	GENAUX, RUBISH
	LOGICAL		PROCESS_CTRL
C
C Local Variables
C
	REAL		OFFDST		! distance to offset
	REAL		DIST_SAV	! and a copy of it for composite
					! texts
	INTEGER*2	NOPTS		! number of points in feature
	INTEGER		ADDR		! address of current CTX
	INTEGER		STAADR,FINADR	! start and end addresses
	REAL		TMPXY(2)
	REAL		DH
	REAL		TEMPAUX(AUXLEN)
	INTEGER		OPER
	INTEGER		DUMMY
	INTEGER		DUMPAK(PAKLEN)	! a dummy pack for GENAUX (only
					! DUMPAK(PAKFC) is significant)
C
C ignore bit 14 in flags word (when genauxing)
	IGNORE_BIT_14 = .TRUE.
C
C if not in MODIFY state, get into it (with implicit copy)
C
	IF (SINDEX.NE.STATE_MODIFY) THEN
	   IF (COIDLE(.FALSE.)) GOTO 995 ! do not delete found object
	ENDIF
C
C if offset distance given, was it given in mm?
C
	IF (DNREA .NE. 0) THEN		! distance given
	   OFFDST = DREALS(1)
	   CALL TSTUNT(.TRUE.,1,OFFDST)	! expecting IFF units
	ENDIF
C
C if doing anything that involves altering the feature at the moment,
C stop it
C
	IF (NDMODE.NE.END_CONSTRUCT.AND.NDMODE.NE.END_MOVE) THEN
	   CALL FRECUR
	   RUBLIN(1) = .FALSE.
	   RUBCHG = .TRUE.
	ENDIF
	NDMODE = END_CONSTRUCT			! just done an offset
C
C this is classed as a transformation (in terms of operations)
	OPER = DEFINITION(P_TRANSFORM)
	IF (OPER.EQ.0) OPER = DEFINITION(P_OTHER)
C
C get number of points to deal with
C
	IF (COIPAK(PAKGT).EQ.SCATYP) THEN	! get number of points 
	   NOPTS=2				! to use
	ELSE
	   NOPTS=1
	ENDIF
C
C deal seperately with texts
C
	IF (COIPAK(PAKGT).EQ.TEXTYP) GOTO 100
C
C symbols
C====================================================================
C
C get orientation of feature
C
	IF (GENAUX(NOPTS,COIXY(1,2),COIAUX,COIDSC,
     &			COIANG,CONTH,COIPAK,CONFS)) THEN
C
C	      if GENAUX fails, had better abandon!
C
	   CALL MOAN(MSG_FTABANDONED)
	   CALL ABANDN
	   GOTO 995
	ENDIF
	DH = COIAUX(MAXYI) - COIAUX(MINYI)
C
C Find offset distance
C
	IF (DNREA .NE. 0) THEN		! distance given
	   IF (OFFDST.LT.0) THEN
	      OFFDST = OFFDST - DH
	   ELSE
	      OFFDST = OFFDST + DH
	   ENDIF
	ELSE
	   OFFDST = DH
	   OFFDST = OFFDST + ABS(OFFPROP)*OFFDST ! offset by the size of
						! box, + a proportion
	   IF (OFFPROP.LT.0) OFFDST = -OFFDST	! move above original
	ENDIF
C
C move the cursor to it
C
	CSXY(1) = COIXY(1,2) + OFFDST*COIAUX(SINI)
	CSXY(2) = COIXY(2,2) - OFFDST*COIAUX(COSI)
	IF (RUBISH(CSXY)) THEN			! point outside map
	   CALL MOAN(MSG_PTOUTRANGE)
	   GOTO 995
	ENDIF
C
C and move the feature to the cursor
C
	IF (COIPAK(PAKGT).EQ.SCATYP) THEN
	   COIXY(1,3)=CSXY(1)+COIXY(1,3)-COIXY(1,2)
	   COIXY(2,3)=CSXY(2)+COIXY(2,3)-COIXY(2,2)
	ENDIF
	COIXY(1,2) = CSXY(1)
	COIXY(2,2) = CSXY(2)
	CSSTIL = .FALSE.
	FONLIN = .FALSE.
C
C update attributes
	CALL LSTARR(OPER,COINATT,COIATTC,COIATTV(1,2),.TRUE.)
C
	MODMOD = .TRUE.
	GOTO 999
C
C texts
C=======================================================================
C
  100	CONTINUE
C
C save offset distance, if specified
C
	IF (DNREA.NE.0) THEN
	   DIST_SAV = OFFDST
	ENDIF
C
C get start and end CTXs to work on
C
	IF (SUBTXT) THEN
	   STAADR = COICTXD(CTXD_HOME)
	   FINADR = COICTXD(CTXD_HOME)
	ELSE
	   STAADR = COICTXD(CTXD_FSTCTX)
	   FINADR = COICTXD(CTXD_LSTCTX)
	ENDIF
C
C start of list
C
	ADDR = STAADR
  110	CONTINUE
C
C get coordinate values from this CTX
C
	CALL PUTLNG(%VAL(ADDR+CTX_O_X),TMPXY(1))
	CALL PUTLNG(%VAL(ADDR+CTX_O_Y),TMPXY(2))
CCC	CALL PUTLNG(%VAL(ADDR+CTX_O_AUXMAXY),TMPMAXY)
CCC	CALL PUTLNG(%VAL(ADDR+CTX_O_AUXMINY),TMPMINY)
CCC	CALL PUTLNG(%VAL(ADDR+CTX_O_AUXSIN),TMPSINI)
CCC	CALL PUTLNG(%VAL(ADDR+CTX_O_AUXCOS),TMPCOSI)

      CALL PUTLNG(%VAL(ADDR+CTX_O_TS),DUMPAK(PAKFC))
      IF (GENAUX(NOPTS,%VAL(ADDR+CTX_O_X),
     &	        TEMPAUX,
     &	        %VAL(ADDR+CTX_O_DESC),
     &	        %VAL(ADDR+CTX_O_RO),
     &	        %VAL(ADDR+CTX_O_TH),
     &	        DUMPAK,
     &	        %VAL(ADDR+CTX_O_TS))) THEN
C
C	      if GENAUX fails, had better abandon!
C
	   CALL MOAN(MSG_FTABANDONED)
	   CALL ABANDN
	   GOTO 995
	ENDIF
C
C height of text
C
	DH = TEMPAUX(MAXYI) - TEMPAUX(MINYI)
C
C Find offset distance
C
	IF (DNREA .NE. 0) THEN		! distance given
	   IF (OFFDST.LT.0) THEN
	      OFFDST = DIST_SAV - DH
	   ELSE
	      OFFDST = DIST_SAV + DH
	   ENDIF
	ELSE
	   OFFDST = DH + ABS(OFFPROP)*DH	! offset by the size of
						! box, + a proportion
	   IF (OFFPROP.LT.0) OFFDST = -OFFDST	! move above original
	ENDIF
C
C update the coordinates from the CTX
C
	TMPXY(1) = TMPXY(1) + OFFDST*TEMPAUX(SINI)
	TMPXY(2) = TMPXY(2) - OFFDST*TEMPAUX(COSI)
	IF (RUBISH(TMPXY)) THEN
	   TXTPTR = PROCESS_CTRL(%VAL(ADDR+CTX_O_DESC),
     &					TXTBUF,MAX_TXTLIM)
	   CALL MOAN(MSG_OFFOUTRANGE,TXTDSC)
	   GOTO 120
	ENDIF
C
C and write the coordinates back
C
	CALL PUTLNG(TMPXY(1),%VAL(ADDR+CTX_O_X))
	CALL PUTLNG(TMPXY(2),%VAL(ADDR+CTX_O_Y))
C
C update attributes for this point
	CALL LSTARR(%VAL(ADDR+CTX_O_ATTR),CONATT,
     &	                           COATTC,COATTV,.FALSE.)
	CALL LSTARR(OPER,CONATT,COATTC,COATTV,.TRUE.)
	CALL ARRLST(CONATT,COATTC,COATTV,
     &                              %VAL(ADDR+CTX_O_ATTR),DUMMY)
C
C if this is home CTX, then update COI variables
C
	IF (ADDR.EQ.COICTXD(CTXD_HOME)) THEN
	   COIXY(1,2) = TMPXY(1)
	   COIXY(2,2) = TMPXY(2)
	ENDIF
C
C was that the last CTX?
C
  120	IF (ADDR.NE.FINADR) THEN
	   CALL PUTLNG(%VAL(ADDR+CTX_O_NXTPTR),ADDR)
	   GOTO 110
	ENDIF
C
C move the cursor position of home CTX
C
	CSXY(1) = COIXY(1,2)
	CSXY(2) = COIXY(2,2)
	CSSTIL = .FALSE.
	FONLIN = .FALSE.
C
	MODMOD = .TRUE.
	GOTO 999
C
  995	CALL IGNCMD
  999	CONTINUE
	IGNORE_BIT_14 = .FALSE.
        RETURN
        END
