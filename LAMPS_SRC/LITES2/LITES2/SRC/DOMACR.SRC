C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-05-25 15:04:08.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE DOMACR
C
***	IDENT	25MY94
***	MODULE	DOMACR
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Written					RJH	18-OCT-1984
C
C	LITES2 cartographic editor MACRO command.
C
	IMPLICIT NONE
C
***     PARAMETER/CMN:MACMEN/		! macros, menus and puck buttons
C
***     COMMON/CMN:MACRO/		! macro variables
C
C this is a jacket routine that call the real routine with the address
C of some arrays, so that the real routine can access them easily
C (NOTE: MACDSW and MACDSL are the same array)
C
	CALL DOMACR_SUB(%VAL(MACDSW_ADDR),%VAL(MACDSL_ADDR),%VAL(MANDSL_ADDR))
C
	RETURN
	END


	SUBROUTINE DOMACR_SUB(MACDSW,MACDSL,MANDSL)
C
***	IDENT	07FE92
***	MODULE	DOMACR_SUB
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Written					RJH	18-OCT-1984
C
C	LITES2 cartographic editor MACRO command.
C
	IMPLICIT NONE
C
***     PARAMETER/CMN:CHARS/		! character constants
***	PARAMETER/LSL$CMNLSL:LSLLIBMSG/
***     PARAMETER/CMN:MACMEN/		! macros, menus and puck buttons
***     PARAMETER/CMN:MERPAR/		! macro error constants
***     PARAMETER/CMN:MOANMESS/		! moan constants
***	PARAMETER/LSL$CMNLSL:READSTR/
***     PARAMETER/CMN:STAPAR/		! state constants
C
***	COMMON/CMN:DMACRD/		! macro reading results
***     COMMON/CMN:DOUT/		! command decoding output
***     COMMON/CMN:DVAR/
***     COMMON/CMN:GLOBAL/		! global variables
***	COMMON/LSL$CMNLSL:EXCEPTION/	! ERROR handling
***	COMMON/LSL$CMNLSL:EXPC/
***     COMMON/CMN:MACRO/		! macro variables
***	COMMON/CMN:OPTION/
***     COMMON/CMN:STATE/		! state variables
***	COMMON/LSL$CMNLSL:TXTC/
C
C arguments
	INTEGER*2	MACDSW(4,*)
	INTEGER*4	MACDSL(2,*)
	INTEGER*4	MANDSL(2,*)
C
C Functions called
	INTEGER*4	GETMAC		! gets macro name
	INTEGER*4	SIGCHS		! finds no. of sig. characters
	LOGICAL		CHKSAM		! checks full name given
	INTEGER		READSTR
	INTEGER		LIB$EXTV
C
C Local Variables
	INTEGER*4	RETCOD		! macro reading return code
	INTEGER*4	CMD		! added command number
	LOGICAL		NEW		! new macro name ?
	LOGICAL		ABORT		! PRMACR aborted ?
C
	NEW = .FALSE.
C
C Find the number of significant characters in the macro name, so that
C trailing spaces or tabs can be ignored.
C
	DSTRL = SIGCHS(DSTR(1:DSTRL))
C
C if not checking that macros exist, then read macro name to find out if
C it is a simple macro name (ie not a menu or puck name). If it is not
C we must look it up in the macro table
	IF (.NOT.CHKOPT) THEN
	   CALL SETAUX(%REF(DSTR),DSTRL)	! set buffer
C
C read into EXPC as a temporary, and check all characters have been read
	   EXPLEN = EXPMAX
	   IF (READSTR(EXPDSC,0,ON_CMD,.TRUE.).EQ.DSTRL) THEN
	      NEW = .TRUE.
	      GOTO 50
	   ENDIF
	ENDIF
C
C Now try reading the name from the table
C
	RETCOD = GETMAC(DSTR(1:DSTRL),.FALSE.)
C
C If the name was found in the table, check that it has been given in
C full. (It is assumed that a new macro is to be defined if the name has
C been abbreviated or if the name is ambiguous between two
C existing ones.) If the error returned while reading the macro
C indicates that the macro argument is out of range, the macro must be
C associated with a menu box or a puck button. This check forces
C abbreviated menu box or puck button names to be considered as new
C macros, and they will then fail because of illegal characters. Those
C with full names will have the normal error messages output. User
C macros may have extra characters after the macro name, and these are
C treated in a similar manner; if the name was abbreviated, an attempt
C will be made to add it to the command table. If an unexpected end of
C line was encountered, it is assumed that this is due to a missing
C argument. In this case a new macro should be defined if the name was
C abbreviated, otherwise the normal error message is output.
C
	IF ((RETCOD .EQ. 0) .OR.
     &	    (RETCOD .EQ. MERARG) .OR.
     &	    (RETCOD .EQ. MEREXT) .OR.
     &	    (RETCOD .EQ. MEREOL)) THEN
	   NEW = CHKSAM(DTMAC(1:DTMACL),DMAC(1:DMACL))	      
	ELSEIF ((RETCOD .EQ. MERCLB) .AND. (ERRNUM .EQ. LSL__AMBIG)) THEN
	   NEW = .TRUE.
	ENDIF
C
C Check that there have been no errors
C
50	IF (.NOT. MOANED) THEN
C
C If the name was found in the table and given in full, check whether
C the macro has none zero length. If so, display it and output warning
C messages to the effect that the existing definition must be deleted.
C
	   IF ((RETCOD .EQ. 0) .AND. (.NOT. NEW)) THEN
	      IF (MACDSW(1,DMACN) .GT. 0) THEN	! length not zero
	         CALL MACSTR			! form name in TXTDSC
	         CALL MOAN(MSG_MACDEFINED,TXTDSC)
	         IF (LIB$EXTV(DMACN-1,1,%VAL(MACENC_ADDR))) THEN
	            CALL INFORM(MSG_HIDDENMENU)
	         ELSE
	            CALL INFORM(MSG_BLANK)
	            CALL PRMACR(DMACN,.TRUE.,MACDSW,MACDSL,ABORT)
	            CALL INFORM(MSG_BLANK)
	         ENDIF
	         CALL LEARN(MSG_DELMACFST)
	      ELSE
	         LASDEF = DMACN		! current macro number
	      ENDIF
C
C If the name was not found in the table, or if it was found but the
C name given was abbreviated, add the new name to the table, and
C initialise the dynamic descriptor for the macro and its annotation.
C
	   ELSE IF ((RETCOD .EQ. MERUXS) .OR. NEW) THEN
C
C Find a free descriptor for this macro
	      DO 100 CMD=1,MAXUSR
	         IF (MACDSL(1,CMD).EQ.0) GOTO 200
100	      CONTINUE
	      CALL MOAN(MSG_TOTALDEF,'macros',MAXUSR)
	      CALL LEARN(MSG_INCREASEMAX,'macros',MAXMAC_LOG_NAME)
200	      IF (.NOT.MOANED) THEN
	         CALL ADDMAC(DSTR,DSTRL,MACSAV,CMD,.FALSE.)
	         IF (.NOT. MOANED) THEN
	            CALL INIDSC(MACDSL(1,CMD))
	            CALL INIDSC(MANDSL(1,CMD))
	            LASDEF = CMD
	         ENDIF
	      ENDIF
C
C If there was an error reading the name, output the appropriate message
C
	   ELSE
	      CALL ERRMAC(RETCOD,'macro')
	   ENDIF
	ENDIF
C
C Prepare to read in the macro if no errors
C
	IF (.NOT. MOANED) THEN
C
C set whether or not macro is hidden (encrypted)
C DENC is incremented for each encrypted command file open
C (rather grubby use of logical for single bit insert)
	   CALL LIB$INSV((DENC.GT.0),LASDEF-1,1,%VAL(MACENC_ADDR))
	   PRESTA = SINDEX		! save state
	   CALL SETSTA(STATE_MACRO)	! set MACRO state
	ELSE
	   CALL IGNCMD			! command ignored message
	ENDIF
C
	RETURN
	END
