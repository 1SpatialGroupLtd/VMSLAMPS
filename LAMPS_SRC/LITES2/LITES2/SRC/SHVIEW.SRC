        SUBROUTINE SHVIEW(STRNG)
C
***     IDENT   05MR90
***     MODULE  SHVIEW
C
C       Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C       Written                                 RWR	Apr-1989
C
C	LITES2 cartographic editor SHOW VIEW command.
C
        IMPLICIT NONE
C
***	PARAMETER/CMN:MOANMESS/
C
***	COMMON/CMN:FILES/
***	COMMON/LSL$CMNFRT:FRTACD/
***	COMMON/CMN:DOUT/
***	COMMON/LSL$CMNDTI:DTIHDR/
***	COMMON/CMN:IMAGE/
***	COMMON/CMN:VIEW/
C
C argument (working storage)
	CHARACTER*80	STRNG
C
C w/s
	INTEGER		I,J
	INTEGER		STRLEN
	CHARACTER*80	TMPSTR
	INTEGER		TMPSTR_LEN
	INTEGER		COUNT
	LOGICAL		HAD_OUTPUT
C
C Functions
	EXTERNAL	NASTY,MOAN
	INTEGER		EXPAND
	LOGICAL		LIB$EXTZV
	EXTERNAL 	VIEW_Z_INTERPRETATION_CMD_TABLE
	LOGICAL		ACDFND
C
C check for valid argument
	IF (DNINT.GT.0.AND.(DINTS(1).LT.1.OR.DINTS(1).GT.MAXVIEW)) THEN
	   CALL MOAN(MSG_VIEWRNG,1,MAXVIEW)
	   GOTO 9990
	ENDIF
C
C reconstruct View Z interpretation command
C
C get the name from the attribute number
	I = 0
	CALL FIND_CMDNAME(VIEW_Z_INTERPRETATION_CMD_TABLE,
     &	                  VIEW_Z_INTERP_METHOD,
     &	                    TMPSTR,TMPSTR_LEN,I)
C
C can't decode ACDS until FRT file (or at least default ACDs) has been read
	IF (.NOT.HADFRT) THEN
	   IF (.NOT.HADACD) THEN
	      CALL FRT_ACDINI
	      HADACD = .TRUE.
	   ENDIF
	ENDIF
C
C and the first ACD
	IF (ACDFND(VIEW_Z_INTERP_ACD(1),.FALSE.)) THEN
           TMPSTR_LEN = TMPSTR_LEN + EXPAND('%WS %N',
     &	                  TMPSTR(TMPSTR_LEN+1:),VIEW_Z_INTERP_ACD(1))
	ELSE
	   TMPSTR(TMPSTR_LEN+1:) = ' '//ACD_NAME(1:ACD_NAME_LEN)
	   TMPSTR_LEN = TMPSTR_LEN + 1 + ACD_NAME_LEN	
	ENDIF
C
C and the second ACD
	IF (ACDFND(VIEW_Z_INTERP_ACD(2),.FALSE.)) THEN
           TMPSTR_LEN = TMPSTR_LEN + EXPAND('%WS %N',
     &	                  TMPSTR(TMPSTR_LEN+1:),VIEW_Z_INTERP_ACD(2))
	ELSE
	   TMPSTR(TMPSTR_LEN+1:) = ' '//ACD_NAME(1:ACD_NAME_LEN)
	   TMPSTR_LEN = TMPSTR_LEN + 1 + ACD_NAME_LEN	
	ENDIF
C
C output VIEW FC_OFFSET  and VIEW Z_INTERPRETATION values
	CALL INFORM(MSG_VIEWHDR6,VIEW_FC_OFFSET,TMPSTR(1:TMPSTR_LEN))
	CALL INFORM(MSG_BLANK)
C 
	HAD_OUTPUT = .FALSE.
C
	DO 9000, I=1,MAXVIEW
C
C do we want this view
	   IF (DNINT.GT.0.AND.DINTS(1).NE.I) GOTO 9000
C
C output blank lines for second (and subsequent) views output
	   IF (HAD_OUTPUT) CALL INFORM(MSG_BLANK)
	   HAD_OUTPUT = .TRUE.
	   CALL INFORM(MSG_VIEWHDR1)
	   CALL INFORM(MSG_VIEWHDR2)
	   CALL INFORM(MSG_VIEWHDR2A)
C
C now build up output in STRNG
	   CALL EXPAND('%WS%I4',STRNG,I)
	   IF (I.EQ.VIEW_CURRENT) THEN
	      CALL EXPAND('%WSYes',STRNG(11:13))
	   ELSE
	      CALL EXPAND('%WSNo',STRNG(12:13))
	   ENDIF
C
	   CALL EXPAND('%WS%I3',STRNG(18:20),VIEW_LEVEL_TOTAL(I))
	   CALL EXPAND('%WS%I3',STRNG(28:30),VIEW_LEVEL(I))
	   CALL EXPAND('%WS%I5',STRNG(32:36),VIEW_PIXELS(1,I))
	   CALL EXPAND('%WS%I5',STRNG(39:43),VIEW_PIXELS(2,I))
	   CALL EXPAND('%WS%F0.5',STRNG(47:57),VIEW_ZSCALE(I))
	   CALL EXPAND('%WS%I5',STRNG(59:63),VIEW_SAMPLE(1,I))
	   CALL EXPAND('%WS%I5',STRNG(64:68),VIEW_SAMPLE(2,I))
	   TMPSTR_LEN = 0
	   COUNT = 0
	   DO 50,J=1,VIEW_LEVEL_TOTAL(I)
	      IF (VIEW_LEVEL_RENDERED(J,I)) THEN
	         IF (COUNT.GT.0) THEN
	            TMPSTR_LEN = TMPSTR_LEN + EXPAND('%WS,%N',
     &	                              TMPSTR(TMPSTR_LEN+1:),J)
	         ELSE
	            TMPSTR_LEN = TMPSTR_LEN + EXPAND('%WS%N',
     &	                              TMPSTR(TMPSTR_LEN+1:),J)
	         ENDIF
	         COUNT = COUNT + 1
	      ENDIF
50	   CONTINUE
	   IF (COUNT.EQ.0) THEN
	      TMPSTR = '  ::'
	      TMPSTR_LEN = 4
	   ENDIF
	   CALL EXPAND('%WS%S',STRNG(73:),TMPSTR(1:TMPSTR_LEN))
C
	   CALL INFORM(MSG_STRING,STRNG)
C
C window
cccc	   CALL INFORM(MSG_BLANK)
	   IF (VIEW_LIMITS_METHOD(I).EQ.WINDOW_SCREEN) THEN
	      CALL INFORM(MSG_VIEWWIN,'Current Lites2 screen')
	   ELSEIF (VIEW_LIMITS_METHOD(I).EQ.WINDOW_MAP) THEN
	      CALL INFORM(MSG_VIEWWIN,'full map area')
	   ELSE
	      STRLEN = EXPAND(
     &	      '%WSxmin = %G0.7 xmax = %G0.7 ymin = %G0.7 ymax = %G0.7',
     &	         STRNG,VIEW_LIMITS(1,I),VIEW_LIMITS(2,I),
     &	         VIEW_LIMITS(3,I),VIEW_LIMITS(4,I))
	      CALL INFORM(MSG_VIEWWIN,STRNG(1:STRLEN))
	   ENDIF
C
C observer and target
cccc	   CALL INFORM(MSG_BLANK)
	   CALL INFORM(MSG_VIEWHDR3,'              ')
	   CALL INFORM(MSG_VIEWHDR3A,'              ')
C
	   CALL EXPAND('%WSObserver:',STRNG)
	   IF (VIEW_FROM_SETUP(I)) THEN
	      CALL EXPAND('%WS%G0.8',STRNG(11:23),VIEW_FROM(1,I))
	      CALL EXPAND('%WS%G0.8',STRNG(23:33),VIEW_FROM(2,I))
	      CALL EXPAND('%WS%G0.5',STRNG(34:41),VIEW_FROM(3,I))
	   ELSE
	      CALL EXPAND('%WS:::',STRNG(14:16))	      
	      CALL EXPAND('%WS:::',STRNG(26:28))	      
	      CALL EXPAND('%WS:::',STRNG(35:37))	      
	   ENDIF
	   CALL INFORM(MSG_STRING,STRNG)
C
	   CALL EXPAND('%WS ',STRNG)
	   IF (VIEW_HAD_BEARING(I)) THEN
	      CALL EXPAND('%WS%G0.5',STRNG(44:50),VIEW_BEARING(I))
	   ELSE
	      CALL EXPAND('%WS:::',STRNG(45:47))	      
	   ENDIF
	   IF (VIEW_HAD_DISTANCE(I)) THEN
	      CALL EXPAND('%WS%G0.9',STRNG(56:65),VIEW_DISTANCE(I))
	   ELSE
	      CALL EXPAND('%WS:::',STRNG(59:61))	      
	   ENDIF
	   IF (VIEW_HAD_ELEVATION(I)) THEN
	      CALL EXPAND('%WS%G0.5',STRNG(72:78),VIEW_ELEVATION(I))
	   ELSE
	      CALL EXPAND('%WS:::',STRNG(73:75))	      
	   ENDIF
	   CALL INFORM(MSG_STRING,STRNG)
C
	   CALL EXPAND('%WSTarget:',STRNG)
	   IF (VIEW_TO_SETUP(I)) THEN
	      CALL EXPAND('%WS%G0.8',STRNG(11:23),VIEW_TO(1,I))
	      CALL EXPAND('%WS%G0.8',STRNG(23:33),VIEW_TO(2,I))
	      CALL EXPAND('%WS%G0.5',STRNG(34:41),VIEW_TO(3,I))
	   ELSE
	      CALL EXPAND('%WS:::',STRNG(14:16))	      
	      CALL EXPAND('%WS:::',STRNG(26:28))	      
	      CALL EXPAND('%WS:::',STRNG(35:37))	      
	   ENDIF
	   CALL INFORM(MSG_STRING,STRNG)
C
C limits
cccc	   CALL INFORM(MSG_BLANK)
	   CALL INFORM(MSG_VIEWHDR4)
	   CALL INFORM(MSG_VIEWHDR4A)
C
	   CALL EXPAND('%WS ',STRNG)
	   CALL EXPAND('%WS%G0.7',STRNG(12:20),VIEW_FRONT(I))
	   IF (VIEW_BACK(I).GT.0.0) THEN
	      CALL EXPAND('%WS%G0.7',STRNG(22:30),VIEW_BACK(I))
	   ELSEIF (VIEW_HAD_DISTANCE(I)) THEN
	      CALL EXPAND('%WS(%G0.7)',STRNG(22:32),VIEW_DISTANCE(I))
	   ELSE
	      CALL EXPAND('%WS:::',STRNG(25:27))
	   ENDIF	      
	   CALL EXPAND('%WS%G0.5',STRNG(35:49),VIEW_CONE(I))
	   CALL EXPAND('%WS%G0.5',STRNG(50:57),VIEW_ROLL(I))
	   CALL INFORM(MSG_STRING,STRNG)
C
C colours
cccc	   CALL INFORM(MSG_BLANK)
	   CALL INFORM(MSG_VIEWHDR5)
	   CALL INFORM(MSG_VIEWHDR5A)
C
	   CALL EXPAND('%WSIndex',STRNG)
	   CALL EXPAND('%WS%N3',STRNG(14:),
     &	         VIEW_INDX(TYPE_SEA,I))
	   CALL EXPAND('%WS%N3',STRNG(29:),
     &	         VIEW_INDX(TYPE_FOG,I))
	   CALL EXPAND('%WS%N3',STRNG(44:),
     &	         VIEW_INDX(TYPE_SKY,I))
	   CALL EXPAND('%WS%N3',STRNG(59:),
     &	         VIEW_INDX(TYPE_FORE,I))
	   CALL EXPAND('%WS%N3',STRNG(73:),
     &	         VIEW_INDX(TYPE_CONST,I))
	   CALL INFORM(MSG_STRING,STRNG)
C
	   CALL EXPAND('%WSR G B',STRNG)
	   CALL EXPAND('%WS%F0.1 %F0.1 %F0.1',STRNG(11:21),
     &	         VIEW_RED(TYPE_SEA,I),VIEW_GREEN(TYPE_SEA,I),
     &	         VIEW_BLUE(TYPE_SEA,I))
	   CALL EXPAND('%WS%F0.1 %F0.1 %F0.1',STRNG(26:36),
     &	         VIEW_RED(TYPE_FOG,I),VIEW_GREEN(TYPE_FOG,I),
     &	         VIEW_BLUE(TYPE_FOG,I))
	   CALL EXPAND('%WS%F0.1 %F0.1 %F0.1',STRNG(41:51),
     &	         VIEW_RED(TYPE_SKY,I),VIEW_GREEN(TYPE_SKY,I),
     &	         VIEW_BLUE(TYPE_SKY,I))
	   CALL EXPAND('%WS%F0.1 %F0.1 %F0.1',STRNG(56:66),
     &	         VIEW_RED(TYPE_FORE,I),VIEW_GREEN(TYPE_FORE,I),
     &	         VIEW_BLUE(TYPE_FORE,I))
	   CALL EXPAND('%WS%F0.1 %F0.1 %F0.1',STRNG(70:80),
     &	         VIEW_RED(TYPE_CONST,I),VIEW_GREEN(TYPE_CONST,I),
     &	         VIEW_BLUE(TYPE_CONST,I))
	   CALL INFORM(MSG_STRING,STRNG)
C
	   IF (VIEW_COLOUR_METHOD(I).EQ.METHOD_RANDOM) THEN
	      STRLEN = EXPAND('%WS%S',STRNG,'Random')
	   ELSEIF (VIEW_COLOUR_METHOD(I).EQ.METHOD_AV_HEIGHT) THEN
	      STRLEN = EXPAND('%WS%S',STRNG,'Height')
	   ELSEIF (VIEW_COLOUR_METHOD(I).EQ.METHOD_IMAGE) THEN
	      TMPSTR_LEN = 0
	      COUNT = 0
	      DO 100,J=1,MAXIMAGE
	         IF (LIB$EXTZV(J,1,VIEW_COLOUR_IMAGE_BITMAP(I))) THEN
	            IF (COUNT.GT.0) THEN
	               TMPSTR_LEN = TMPSTR_LEN + EXPAND('%WS,%N',
     &	                              TMPSTR(TMPSTR_LEN+1:),J)
	            ELSE
	               TMPSTR_LEN = TMPSTR_LEN + EXPAND('%WS%N',
     &	                              TMPSTR(TMPSTR_LEN+1:),J)
	            ENDIF
	            COUNT = COUNT + 1
	         ENDIF
100	      CONTINUE
	      IF (COUNT.EQ.0) THEN
	         TMPSTR = '  ::'
	         TMPSTR_LEN = 4
	      ENDIF
	      STRLEN = EXPAND('%WS%S%S',STRNG,'Image(s) ',
     &	                     TMPSTR(1:TMPSTR_LEN))
	   ELSEIF (VIEW_COLOUR_METHOD(I).EQ.METHOD_CONSTANT) THEN
	      STRLEN = EXPAND('%WS%S',STRNG,'Constant')
	   ENDIF
	   CALL INFORM(MSG_VIEWHDR7,STRNG(1:STRLEN),
     &	               VIEW_AMBIENT_COLOUR(1,I),
     &	               VIEW_AMBIENT_COLOUR(2,I),
     &	               VIEW_AMBIENT_COLOUR(3,I))
C
	   IF (VIEW_FOG_ON(I)) THEN
	      STRLEN = EXPAND('%WSFog: On',STRNG)
	   ELSE
	      STRLEN = EXPAND('%WSFog: Off',STRNG)
	   ENDIF
	   STRLEN = STRLEN + EXPAND(
     &	    '%WS  Front %G0.6 Back %G0.6 Top %G0.6 '//
     &	    'Bottom %G0.6 Distance %G0.6',STRNG(STRLEN+1:),
     &	    VIEW_FOG_FRONT(I),VIEW_FOG_BACK(I),VIEW_FOG_TOP(I),
     &	    VIEW_FOG_BOTTOM(I),VIEW_FOG_DISTANCE(I))
	   CALL INFORM(MSG_STRING,STRNG(1:STRLEN))
C
	   IF (VIEW_ILLUMINATION_ON(I)) THEN
	      STRLEN = EXPAND('%WSIllumination: On',STRNG)
	   ELSE
	      STRLEN = EXPAND('%WSIllumination: Off',STRNG)
	   ENDIF
C
	   IF (VIEW_DEPTH_ON(I)) THEN
	      STRLEN = STRLEN + 
     &	               EXPAND('%WS  Depth: On',STRNG(STRLEN+1:))
	   ELSE
	      STRLEN = STRLEN + 
     &	               EXPAND('%WS  Depth: Off',STRNG(STRLEN+1:))
	   ENDIF
	   STRLEN = STRLEN + EXPAND(
     &	    '%WS  Distance %G0.6  Sphere:  Distance %G0.6',
     &	          STRNG(STRLEN+1:),
     &	          VIEW_DEPTH_DISTANCE(I),VIEW_SPHERE_DISTANCE(I))
	   CALL INFORM(MSG_STRING,STRNG(1:STRLEN))
9000	CONTINUE
	GOTO 9999
C
9990	CALL IGNCMD
9999	RETURN
        END
