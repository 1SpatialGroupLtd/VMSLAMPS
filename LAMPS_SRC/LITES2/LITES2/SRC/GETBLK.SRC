	LOGICAL FUNCTION GETBLK(BLKADR,SECTOR)
C
***	IDENT	20NO89
***	MODULE	GETBLK
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author Clarke Brunt, 28 February 1984
C
C To get a block of memory for a given sector.
C Returns .TRUE. if fails, or .FALSE. if succeeds.
C BLKADR is set to the address of the block obtained.
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:SECTOR/
C
***	COMMON/CMN:SECMAP/
C
C argument
C
	INTEGER*4	BLKADR		! to return address in
	INTEGER*4	SECTOR		! sector for this block
C
C function called
C
	INTEGER*4	LIB$GET_VM_PAGE
	INTEGER		GETARR
C
C workspace
C
	INTEGER*4	COND
C
C Obtain a block
	COND = LIB$GET_VM_PAGE(1,BLKADR)
C
	IF (.NOT.COND) THEN		! failed
	   CALL NASTY(MSG_INSVIRMEM)
	   CALL LITES2_SIGNAL(COND)
	   CALL COLAPS(MSG_INSVIRMEM,COND)
	   GETBLK = .TRUE.
	ELSE				! success
C
C If this is the first block for this sector, then remember it
	   IF (GETARR(%VAL(FSTBLK),SECTOR).EQ.0) THEN
	      CALL PUTARR(BLKADR,%VAL(FSTBLK),SECTOR)
	   ELSE
C
C Otherwise put address in pointer slot in previous block
	      CALL PUTLNG(BLKADR,
     &	                  %VAL(GETARR(%VAL(LSTBLK),SECTOR)+NXTPTR) )
	   ENDIF
C
C Zero 'next block pointer'
	   CALL PUTLNG( 0, %VAL(BLKADR+NXTPTR) )
C
C Insert sector number into block
	   CALL PUTLNG( SECTOR, %VAL(BLKADR+SECPTR) )
C
C set last pointer to block
	   CALL PUTARR(BLKADR,%VAL(LSTBLK),SECTOR)
	   CALL PUTARR(0,%VAL(LSTPTR),SECTOR)      ! point to start of block
	   GETBLK = .FALSE.		! succeeded
	ENDIF
C
	RETURN
	END
