C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-05-04 11:17:02.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION NDSTAR(FLAG)
C
***	IDENT   04MY90
***	MODULE  NDSTAR
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created                                 RJH	27-FEB-1985
C
C End ordinary constructions (called from DOEND)
C
C The function basically adds the end point to the construction, and
C then ends the construction. The various types of circles and polygons
C are treated as special cases as an auxiliary array of values has to be
C generated for these features before the construction is ended.
C The function returns true on failure.
C
        IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:AUXDEF/		! auxiliary array definitions
***	PARAMETER/CMN:MOANMESS/		! moan constants
***	PARAMETER/CMN:PACK/		! external pack definitions
***     PARAMETER/CMN:START/		! digitising procedures
C
***     COMMON/CMN:CSTRCT/		! feature being constructed
***	COMMON/LSL$CMNFRT:FRTCOM/	! FRT library interface
***     COMMON/CMN:GLOBAL/		! global variables
***	COMMON/CMN:MASTER/
***	COMMON/CMN:OIIH/		! output item data
***	COMMON/CMN:OPTION/
***	COMMON/CMN:WORKS/
C
C argument
	INTEGER	FLAG			! visibility flag
C
C Functions called
	LOGICAL 	STRTER		! construct feature
	LOGICAL		GENAUX		! works out aux. data
	LOGICAL		GENCIR		! works out circle aux. data
	LOGICAL		CIRCLE		! constructing circle ?
	LOGICAL		PLANE
	LOGICAL		GENRECT		! works out rectangle
C
C Local Variables
	INTEGER*4	TYPE		! graphical type for feature
	INTEGER*4	DUMMY		! dummy value
	REAL		TEMPXY(2,3)	! temporary points
	LOGICAL		CSTCIR		! constructing circle ?
	REAL		TEMPZ(3)	! temporary z's
C
	NDSTAR = .TRUE.			! assume failure
C
C Check if the construction is a drawn circle
C
	CSTCIR = CIRCLE()
C
C Check that we have the required number of points; for drawn circles we
C need 2 points, for generated centred whole features only 1 point, and
C for other generated features, 2 points
C
	IF ((CSTCIR .AND. (CONIND .LT. 2)) .OR.
     &	   (CONGEN .AND. ((CONIND .LT. 1) .OR. 
     &	   ((.NOT. (CONCLO .AND. CONCEN)) .AND. (CONIND .LT. 2)))).OR.
     &	   (CONGEN.AND.CONRECT.AND.(CONIND.LT.2))) THEN
	   CALL MOAN(MSG_NEEDMOREPTS)
	   GOTO 999
	ENDIF
C
C if inserting an intersection point, can only end after the 3rd point
C after the start
	IF (INSRTING.AND.((CONIND-FIRST_INSERT).LT.2)) THEN
	   CALL MOAN(MSG_NEEDMOREPTS)
	   GOTO 999
	ENDIF
C
C stop following, if necessary
	IF (FOLLOWING) CALL ENDFOLL
C
C Add the end point, but not if the cursor hasn't moved and either:
C    (1) just finished an INCLUDE (avoid duplicated point moan, or
C    (2) we want a one-point symbol string
C
	IF (CONXY(1,CONIND).NE.CSXY(1).OR.CONXY(2,CONIND).NE.CSXY(2).OR.
     &   (.NOT.JUSTIN.AND.
     &   (COIPAK(PAKGT).NE.STRTYP.OR..NOT.CONFST.OR.CONIND.NE.1)) ) THEN
	   IF (STRTER(START_ADD,FLAG)) GOTO 999
	ENDIF
C
C If feature is a drawn circle, work out the values needed; if this
C fails, remove the point. GENAUX is the routine used to calculate the
C values, as is normal for a feature with feature codes properly set up
C by FRTLIB.
C
	IF (CSTCIR) THEN
	   IF (GENAUX(CONIND,CONXY,COIAUX,COIDSC,COIANG,
     &				 DUMMY,COIPAK,CONFS) ) GOTO 900
C
C For generated centred circles or polygons the order of points has
C to be changed for the routine which works out the values needed.
C For full circles and polygons the digitised to internal order is :-
C 	1, 2     ==>  2, 1, 2
C For circle and polygon arcs the digitised to internal order is :-
C	1, 2, 3  ==>  2, 1, 3
C The graphical type is assumed to be a clockwise circle arc.
C
C The routine used to calculate the values required is GENCIR. This
C routine is used in preference to GENAUX because the graphical type
C used is not a real one; the real graphical type for these features is
C a line, and so GENAUX would not work correctly.
C
	ELSEIF (CONGEN) THEN
	   IF (.NOT.CONRECT) THEN
	      IF (CONCEN) THEN
	         TEMPXY(1,1) = CONXY(1,2)
	         TEMPXY(1,2) = CONXY(1,1)
	         TEMPXY(2,1) = CONXY(2,2)
	         TEMPXY(2,2) = CONXY(2,1)
	         IF (ZOPT) THEN
	            CALL GETZ_LIST(TEMPZ(1),CONLST(1))
	            CALL GETZ_LIST(TEMPZ(2),CONLST(2))
	         ENDIF
	         IF (CONCLO) THEN
	            TEMPXY(1,3) = CONXY(1,2)
	            TEMPXY(2,3) = CONXY(2,2)
	            IF (ZOPT) CALL GETZ_LIST(TEMPZ(3),CONLST(2))
	         ELSE
	            TEMPXY(1,3) = CONXY(1,3)
	            TEMPXY(2,3) = CONXY(2,3)
	            IF (ZOPT) CALL GETZ_LIST(TEMPZ(3),CONLST(3))
	         ENDIF
	         TYPE = CLOTYP	! clockwise circle arc
	         IF (GENCIR(TYPE,TEMPXY,COIAUX)) GOTO 900
	         IF (ZOPT) COIC_DEFINED = PLANE(TEMPXY,TEMPZ,COICOEFFS)
C
C For generated circles or polygons defined by three edge points, the
C graphical type depends on whether or not the feature is complete or
C just an arc. Note that here the order of points is not important for
C the routine which works out circle values.
C 
	      ELSE
	         IF (CONCLO) THEN
	            TYPE = FULTYP	! full circumcircle
	         ELSE
	            TYPE = CIRTYP	! circumcircle arc
	         ENDIF
	         IF (GENCIR(TYPE,CONXY,COIAUX)) GOTO 900
	         IF (ZOPT) THEN
	            CALL GETZ_LIST(TEMPZ(1),CONLST(1))
	            CALL GETZ_LIST(TEMPZ(2),CONLST(2))
	            CALL GETZ_LIST(TEMPZ(3),CONLST(3))
	            COIC_DEFINED = PLANE(CONXY,TEMPZ,COICOEFFS)
	         ENDIF
	      ENDIF
	   ELSE
C
C for rectangles work out plane through defining points
	      IF (ZOPT) THEN
	         CALL GETZ_LIST(TEMPZ(1),CONLST(1))
	         CALL GETZ_LIST(TEMPZ(2),CONLST(2))
	         CALL GETZ_LIST(TEMPZ(3),CONLST(3))
	         COIC_DEFINED = PLANE(CONXY,TEMPZ,COICOEFFS)
	      ENDIF
C
C and calculate first 3 corners of rectangle
	      IF (CONDIAG) THEN
	         TYPE = RECT_DIAG
	      ELSE
	         TYPE = RECT_SIDE
	      ENDIF
	      IF (GENRECT(TYPE,CONXY)) GOTO 900
	   ENDIF
	ENDIF
C
C End the construction and flush the buffers
C
	IF (STRTER(START_END,FLAG)) GOTO 999
	CALL ENDFT
C
	NDSTAR = .FALSE.		! success
	GOTO 999
C
C If calculation of circle values has failed, remove the point
C
900	CALL STRTER(START_REMOVE,FLAG)
C
999	RETURN
        END
