C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-05-10 18:28:30.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION NDEDIT
C
***     IDENT   10MY96
***     MODULE  NDEDIT
C
C       Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C       Written                                 CCB	 6-Dec-1987
C
C	LITES2 cartographic editor END EDIT routine
C	Returns FALSE if successful
C
        IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:EFNLUN/
***	PARAMETER/CMN:PACK/
C
***	COMMON/CMN:CB/
***	COMMON/CMN:CSTRCT/
***	COMMON/CMN:DEFINE/
***	COMMON/CMN:EDGE/
***	COMMON/CMN:MAPS/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:OIIH/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:STRIKE/
C
C w/s
	INTEGER		OPER
	INTEGER		ATT		! count of attributes
	REAL		TMPXY(2)
	REAL		DIST
	LOGICAL		FAR_MOVE
C
C function
	EXTERNAL	DELPAK
	LOGICAL		IFS_CB_WRITE
	LOGICAL		STRTFT
	LOGICAL		ADDZ
	LOGICAL		GEOG_TRANS_ARRAY
C
	NDEDIT = .TRUE.			! assume failure
	OPER = DEFINITION(P_MOVE)
	IF (OPER.EQ.0) OPER = DEFINITION(P_OTHER)
C
C Delete old segment (remove from screen)
	CALL LDSG(IHPAK,.TRUE.)
C
C if edging set flags so that this end is found and the far end is
C as it was
	IF (EDGING) THEN
	   IF (IHLST.EQ.2) THEN		!don't find again if only
	      OTHFLG = FINFLG		!two points
	   ELSE
	      IF (IHVRT.EQ.IHLST) THEN	! editing last point of IH
	         OTHFLG=THAFLG.OR.(IHPAK(PAKFLG).AND.THIFLG)
	      ELSE			! editing first point of IH
	         OTHFLG=THIFLG.OR.(IHPAK(PAKFLG).AND.THAFLG)
	      ENDIF
	   ENDIF
	ENDIF
C
C get the vertex to be altered into memory
	CALL GETVRT(IHPAK,IHVRT,IHVRT)
C
C do we need to do a OPERATION FAR_MOVE?
	FAR_MOVE = .FALSE.
	IF (DEFINITION(P_FAR_MOVE) .NE. 0) THEN
	   DIST = (CSXY(1) - RIXY(1,1))**2 + (CSXY(2) - RIXY(2,1))**2
	   FAR_MOVE = (DIST .GT. FAR_MOVE_IFF**2)
	ENDIF
C
C alter the vertex (but first get into the file coordinate system)
C (GETVRT has selected correct map)
	IF (.NOT.DO_FLY_TRANS) THEN
	   TMPXY(1) = CSXY(1) - ORGXY(1)
	   TMPXY(2) = CSXY(2) - ORGXY(2)
	ELSE
	   TMPXY(1) = CSXY(1)
	   TMPXY(2) = CSXY(2)
	   IF (.NOT.GEOG_TRANS_ARRAY(LITES2SYS,LITES2ZONE,LITES2PAR,
     &	                         LITES2UNIT,LITES2ORG,
     &	                         CURR_SYS,CURR_ZONE,CURR_PARAMS,
     &	                         CURR_UNIT,CURR_ORG,
     &	                         1,TMPXY)) GOTO 998
	ENDIF
C
	CALL IFS_CB_WRITE(CBH,CBD,TMPXY,2,COLHXY,CBROW,CBROW)
C
C alter the attributes - update them with Z cursor value.
	ATT = RINATT
	IF (ZOPT.AND.CSZI.NE.IFF_ABSENT) THEN
	   IF (ADDZ(CSZI,STR_MAX_ATTR,ATT,RIATTC,RIATTV(1,1))) GOTO 998
	ENDIF
C
C alter the attributes (update them with OPERATION for MOVE, or OTHER)
	CALL LSTARR(OPER,ATT,RIATTC,RIATTV(1,1),.TRUE.)
C
C alter any attributes affected by the OPERATION for FAR_MOVE
        IF (FAR_MOVE)
     &	   CALL LSTARR(DEFINITION(P_FAR_MOVE),ATT,RIATTC,
     &	               RIATTV(1,1),.TRUE.)
C	
	IF (ATT.GT.0) THEN
	   IF (.NOT.IFS_CB_WRITE(CBH,CBD,RIATTV(1,1),
     &	         ATT,RIATTC,CBROW,CBROW)) GOTO 100	! edit in situ
	ENDIF
	CALL EIHWCB(CBH,CBD)
C
C update ACs if required
	IF (IHAC.GT.0.AND.DEFINITION(F_GEOCHANGE).GT.0)
     &	         CALL ACFSET(IHPAK,IHAC,DEFINITION(F_GEOCHANGE))
C
C set edited flag if required
	IF (EDTOPT) CALL SETEDT(IHPAK)
C
C update os map header?
	IF (OS_MH_EDIT) CALL OS_MH_UPDATE(FOPAK,FOFS)
C
C re-flush the feature
	CALL SCNFTR(IHPAK(PAKLNK), DELPAK)	! delete packs
	IHPAK(PAKFLG) = 0			! clear flags
	CALL FLUFTR(IHPAK)			! flush
	GOTO 997		! edited in situ
C
C no room, so construct new feature
100	CONTINUE
C
C Start off the new feature
	CALL CPYPAK(PAKLEN,IHPAK,COIPAK)
	COIPAK(PAKFLG) = 0
	FLG_GEOCHANGE = .TRUE.
	IF (STRTFT(IHPAK,IHTC,IHFS,IHAC,IHTH)) GOTO 998
C
C Delete old segment (remove from screen)
	CALL LDSG(IHPAK,.TRUE.)
C
C Output points, up to current one
	IF (IHVRT.GT.1) CALL ADDVRT(IHPAK,1,IHVRT-1,.FALSE.)
C
C get existing attributes for our point (could have saved it before)
	CALL GETVRT(IHPAK,IHVRT,IHVRT)
C
C alter the attributes - update them with Z cursor value.
	ATT = RINATT
	IF (ZOPT.AND.CSZI.NE.IFF_ABSENT) THEN
	   IF (ADDZ(CSZI,STR_MAX_ATTR,ATT,RIATTC,RIATTV(1,1))) GOTO 998
	ENDIF
C
C update the row of attributes
	CALL LSTARR(OPER,ATT,RIATTC,RIATTV(1,1),.TRUE.)
C
C alter any attributes affected by the OPERATION for FAR_MOVE
        IF (FAR_MOVE)
     &	   CALL LSTARR(DEFINITION(P_FAR_MOVE),ATT,RIATTC,
     &	               RIATTV(1,1),.TRUE.)
C
C write this point
	CALL ADCORD(CSXY,ATT,RIATTC,RIATTV(1,1))
C
C write rest of points
	IF (IHVRT.LT.IHLST) CALL ADDVRT(IHPAK,IHVRT+1,IHLST,.FALSE.)
C
C Terminate feature
	CALL ENDFT
C
C Remove the old found object completely
	CALL DELFT(IHPAK,IHEF)
C
997	NDEDIT = .FALSE.			! success
C
998	RETURN
        END
