	SUBROUTINE TRNTIP(DEV,BUTTON,TABXY,POS,STRING,STRLEN,FROM_MENU)
C
***	IDENT	17OC94
***	MODULE	TRNTIP
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	28-Jan-1985
C
C	Subroutine to interpret input from a digitising device
C	and to output the relevent commands to TXTBUF ready to be
C	read by the command decoder
C
	IMPLICIT NONE
C
C Arguments
	INTEGER*4	DEV	! (input) number of device that input
					! was on (BITLIN or DIGLIN)
	INTEGER*4	BUTTON	! (input) number of button that was
					! pressed (first is 0)
	REAL		TABXY(2)! (input) X and Y coords in digitiser
					! coords
				! (output) position in IFF units
	LOGICAL*1	POS	! (output) .TRUE. if positioning command
	CHARACTER*(*)	STRING	! (output) command string
	INTEGER*4	STRLEN	! (output) length of STRING
	LOGICAL		FROM_MENU	! .TRUE. if STRING has come from
					! MENU, .FALSE. if from puck
C
***	PARAMETER/CMN:EFNLUN/
***     PARAMETER/CMN:MACMEN/		! parameter file for
					! macros, menus and puck buttons
***	PARAMETER/CMN:TRNTYP/
C
***	COMMON/CMN:DRAWIN/
***	COMMON/CMN:MAPS/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:MACRO/
***	COMMON/CMN:MENUS/
***	COMMON/CMN:OSCOEF/
***	COMMON/CMN:OTRANS/
***	COMMON/CMN:TRACKS/
***	COMMON/CMN:WORKS/
C
C Functions called
	INTEGER*4	MNUBOX
	INTEGER*4	EXPAND
	INTEGER*4	LIB$EXTV
C
C Local Variables
	INTEGER*4	MENU,SET_NO,TRACK,PUCK,BUT
	INTEGER*4	SET,ROW,COL	! position in OS setup matrix
	REAL		GRDX,GRDY	! grid intervals (os setup)
	REAL		X,Y,OTABXY(2)	! temp coords (OS setup)
	INTEGER		MAP		! map associated with this setup
C
C save button for $BUTTON system variable (nb start at 1)
	LASBUT = BUTTON+1
C
C find out if point digitised in map, menu or tracking area, and with
C which puck and button
C
	CALL TSTDGI(DEV,BUTTON,TABXY,0.1,MENU,SET_NO,TRACK,PUCK,BUT)
						 ! Wosplib returns
						 ! integer, so limit
						 ! of 0.1 is reasonable
C
	STRLEN = 0			! no command string so far
	POS = .FALSE.			! and no POSITION command
	FROM_MENU = .FALSE.
C
C if in menu, check for puck button priority, otherwise
C return menu name and box number
C
	IF (MENU.NE.-1) THEN
	   IF (BUT.NE.-1) THEN
	      IF (LIB$EXTV(PUKBAS(PUCK)-MAXUSR+BUT-1,1,
     &	                   %VAL(MACPRI_ADDR)))GOTO 1000
	   ENDIF
	   STRLEN = EXPAND('%WS%S%^L%N',STRING,
     &		MENNAM(MENU)(1:MENLEN(MENU)),MNUBOX(TABXY,MENU) )
	   FROM_MENU = .TRUE.
	   GOTO 9999
C
C if in tracking area, 
C
	ELSEIF (TRACK.NE.-1) THEN
C
C check if button is a positioning button
	   IF (BUT.NE.-1) THEN
	      IF (.NOT.LIB$EXTV(PUKBAS(PUCK)-MAXUSR+BUT-1,1,%VAL(PUKPOS_ADDR)))
     &	                        GOTO 1000
	   ENDIF
	   CALL TRNUSE(TABXY(1),TABXY(2),TRCOEF(1,1,TRACK),TRNTYP_AFFINE)
	   TABXY(1) = (WINDOW(2)-WINDOW(1))*TABXY(1)+WINDOW(1)
	   TABXY(2) = (WINDOW(4)-WINDOW(3))*TABXY(2)+WINDOW(3)
	   POS = .TRUE.			! POSITION command
C
C	   if puck button means something, return command on button
C
	   IF (BUT.NE.-1) GOTO 1000
C
C if in map
C
	ELSEIF (SET_NO.NE.-1) THEN
C
C check if button is a positioning button
	   IF (BUT.NE.-1) THEN
	      IF (.NOT.LIB$EXTV(PUKBAS(PUCK)-MAXUSR+BUT-1,1,%VAL(PUKPOS_ADDR)))
     &	                        GOTO 1000
	   ENDIF
C
	   IF (MAPTABSUP(SET_NO).EQ.TABSUP_OS) THEN ! os setup
	      OTABXY(1)=TABXY(1)
	      OTABXY(2)=TABXY(2)
	      
	   ENDIF
C
C	   get coords in IFF units
C
	   CALL TRNUSE(TABXY(1),TABXY(2),CPSCOF(1,1,SET_NO),MAPTRNTYP(SET_NO))
C
C	   if using os setup, refine these coordinates
C
	   IF (MAPTABSUP(SET_NO).EQ.TABSUP_OS) THEN	! os setup
	      MAP = MAP_SETUP(SET_NO)
	      GRDX=(CRNPTS(3,4,MAP)-CRNPTS(3,1,MAP))/MAPCPFULX(SET_NO)
	      GRDY=(CRNPTS(4,1,MAP)-CRNPTS(4,2,MAP))/MAPCPFULY(SET_NO)
	      X=TABXY(1)-CRNPTS(3,2,MAP)	! position within map
	      Y=TABXY(2)-CRNPTS(4,2,MAP)
C
C	      make sure point is really within map
C
	      IF (X.LE.0.0) THEN
	         X=GRDX/2
	      ELSEIF (X.GE.GRDX*MAPCPFULX(SET_NO)) THEN
	         X=GRDX*MAPCPFULX(SET_NO)-GRDX/2
	      ENDIF
	      IF (Y.LE.0.0) THEN
	         Y=GRDY/2
	      ELSEIF (Y.GE.GRDY*MAPCPFULY(SET_NO)) THEN
	         Y=GRDY*MAPCPFULY(SET_NO)-GRDY/2
	      ENDIF
C
C	      find row and column, and thus set
C
	      X=X/GRDX			! real division
	      Y=Y/GRDY
	      COL=X+1			! convert to integer
	      ROW=Y
	      SET=ROW*MAPCPFULX(SET_NO)+COL
C
C	      transform original coordinates again
C
	      TABXY(1)=OTABXY(1)
	      TABXY(2)=OTABXY(2)
	      CALL TRNUSE(TABXY(1),TABXY(2),OSCOEF(1,1,SET,SET_NO),
     &	                  MAPTRNTYP(SET_NO))
	   ENDIF
C
	   POS = .TRUE.			! POSITION command
C
C	   if puck button means something, return command on button
C
	   IF (BUT.NE.-1) GOTO 1000
C
C not menu, or map, or tracking area
C
	ELSE
C
C if valid puck button, just return command on button
C
	   IF (BUT.NE.-1) GOTO 1000
	ENDIF
	GOTO 9999
C
1000	STRLEN = EXPAND('%WS%S%N',STRING,
     &		PUKNAM(PUCK)(1:PUKLEN(PUCK)),BUT)
C
9999	RETURN
	END
