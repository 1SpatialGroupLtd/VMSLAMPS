C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-12-15 17:57:40.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE BOX_STDRAW(
     &		FC,BOXOFF,BOXCMPLX,
     &		STXY,STNATT,MATT,STATTC,STATTV,
     &		AUX,TEXT,PACK,FS)
C
***	MODULE	BOX_STDRAW
***	IDENT	15DE94
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author Clarke Brunt	3-November-1994
C
C To draw a box round a text/symbol
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:AUXDEF/		! layout of auxiliary array
***	PARAMETER/CMN:CTXS/
***	PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:PACK/
C
***	COMMON/CMN:DRAWIN/
***	COMMON/LSL$CMNFRT:FRTCOM/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:WORKS/
***	COMMON/CMN:WORK_TEXT/
C
C arguments
	INTEGER	FC			! FC to *draw* with
	REAL	BOXOFF			! offset of box
	LOGICAL	BOXCMPLX		! complex box?
	REAL	STXY(2)			! point coordinate
	INTEGER	STNATT			! number of attributes
	INTEGER	MATT			! max number of attributes
	INTEGER	STATTC(*)		! column headers
	INTEGER	STATTV(MATT,*)		! attribute values
	REAL	AUX(AUXLEN)		! auxiliary array for circles
					! texts and symbols
	CHARACTER*(*) TEXT		! text to draw
	INTEGER	PACK(PAKLEN)		! a pack for the object
	INTEGER*2 FS(4)			! feature status (only used for texts
					! and symbols)
C
C functions called
	LOGICAL		TRI_BOUND,SRI_BOUND,TRISCN,SRI_OFFSET_POLYGON
	EXTERNAL	TRI_BOUND,SRI_BOUND,TRISCN,SRI_OFFSET_POLYGON
C
C workspace
	REAL	XOUT(5),YOUT(5),ZOUT(5)
	INTEGER	N,I
	INTEGER	START
	LOGICAL	GOT_Z
	INTEGER	IZ,ZCOL
	REAL	COSANG,SINANG,SIZE,TXY(2),OFFXY(2)
	INTEGER	NCOORD
	LOGICAL	FIRST			! first bit of feature?
	LOGICAL LAST			! last bit of feature?
	INTEGER*2 ENDS			! IFF ST ENDS word
	LOGICAL LOOP			! true if curve is a closed loop
	INTEGER	BOUND_TYPE
	REAL	LOFF
C
C we start with FRTCOM set up as the original feature (the
C text or symbol)
C
C the FRT routines expect an offset which is a fraction of the height
	SIZE = AUX(SIZI)
	IF (BOXOFF.LE.0.0) THEN
	   LOFF = -BOXOFF
	ELSE
	   LOFF = BOXOFF*SCLFRT/SIZE
	ENDIF
C
C get Z values
	GOT_Z = .FALSE.
C
C If interested in drawing Z coordinates, look at column headers for Z
	IZ = 0
	IF (KRSINI) THEN
	   IF (STNATT.GT.0) THEN
	      DO 20, I = 1,STNATT
	         IF (STATTC(I).EQ.IFF_C_Z) THEN
	            GOT_Z = .TRUE.
C
C found Z column; remember column, and get value
	            ZCOL = I
	            IZ = STATTV(I,1)
	            GOTO 30
	         ENDIF
20	      CONTINUE
30	      CONTINUE
	   ENDIF
	ENDIF
C
C check for special blanking routines
	N = 0				! flag 'routines not called'
	IF (FRTSYM.AND.SYMBAD_B.NE.0) THEN
	   N = MAXTXP	! max length of array
	   CALL CALLR(
     &		PACK(PAKFC),FRTSC,N,TXTXY,LOFF,BOXCMPLX,
     &		STNATT,STATTC,STATTV(1,1),STXY(1),STXY(2),
     &		AUX,TRI_BOUND,SRI_BOUND,TRISCN,SRI_OFFSET_POLYGON,
     &		%VAL(TEXTAD_B),FS,
     &		%VAL(SYMBAD_B))
	ELSEIF (FRTTEX.AND.TEXTAD_B.NE.0) THEN
	   N = MAXTXP	! max length of array
	   CALL CALLR(
     &		TEXT,PACK(PAKFC),FRTSC,N,TXTXY,LOFF,BOXCMPLX,
     &		STXY(1),STXY(2),AUX,
     &		TRI_BOUND,SRI_BOUND,TRISCN,SRI_OFFSET_POLYGON,
     &		FS,HWTOPT.AND.FRTHWS,
     &		%VAL(TEXTAD_B))
	ENDIF
C
C if we have a non-zero number of points, the special routines
C have done the work, otherwise calculate ourself
	IF (N.GT.0) THEN
C
C close the area (the routines return an open one)
	   IF (N.LT.MAXTXP.AND.
     &	(TXTXY(1,1).NE.TXTXY(1,N).OR.TXTXY(2,1).NE.TXTXY(2,N))) THEN
	      N = N+1
	      TXTXY(1,N) = TXTXY(1,1)
	      TXTXY(2,N) = TXTXY(2,1)
	   ENDIF
	   GOTO 130		! off to draw it
	ENDIF
C
	IF (BOXCMPLX.OR.FRTSYM) THEN
	   N = MAXTXP	! max length of array
	   IF (FRTSYM) THEN
	      IF (BOXCMPLX) THEN
	         BOUND_TYPE = 3		! convex hull
	      ELSE
	         BOUND_TYPE = 2		! bounding box
	      ENDIF
	      IF (SRI_BOUND(FRTSC,N,TXTXY,LOFF,BOUND_TYPE)) THEN
	         CALL MOAN(MSG_NOSYMBOUND,FRTSC)
	         GOTO 999
	      ENDIF
	      OFFXY(1) = 0.0
	      OFFXY(2) = 0.0
	   ELSE
	      IF (TRI_BOUND(TEXT,FRTSC,N,TXTXY,LOFF,
     &					HWTOPT.AND.FRTHWS)) THEN
	         CALL MOAN(MSG_NOBOUND,TEXT,FRTSC)
	         GOTO 999
	      ENDIF
	      OFFXY(1) = AUX(MINXI)
	      OFFXY(2) = AUX(MINYI)
	   ENDIF
C
C close the area (the FRT routines return an open one)
	   IF (N.LT.MAXTXP) THEN
	      N = N+1
	      TXTXY(1,N) = TXTXY(1,1)
	      TXTXY(2,N) = TXTXY(2,1)
	   ENDIF
C
	   COSANG = AUX(COSI)
	   SINANG = AUX(SINI)
	   DO 40 I=1,N
	      TXY(1) = TXTXY(1,I)*SIZE + OFFXY(1)
	      TXY(2) = TXTXY(2,I)*SIZE + OFFXY(2)
	      TXTXY(1,I) = STXY(1) + TXY(1)*COSANG - TXY(2)*SINANG
	      TXTXY(2,I) = STXY(2) + TXY(1)*SINANG + TXY(2)*COSANG
40	   CONTINUE
	ELSE
C
C must be a text with a simple box
C (we don't do the SRISCN box for symbols, which would be
C  BOUND_TYPE=1 above)
	   CALL BOX_AUX(STXY(1),STXY(2),IZ,AUX,LOFF,XOUT,YOUT,ZOUT)
	   N = 5
	   DO 121 I=1,5
	      TXTXY(1,I) = XOUT(I)
	      TXTXY(2,I) = YOUT(I)
121	   CONTINUE
	ENDIF
C
C load the feature code for drawing with (e.g. area, or line)
130	CALL FRTFND(FC)			! must work - checked earlier
C
C size is used as the box offset, so prevent it from being hatch
C spacing, or line offset
	FRTSIZ = 0.0
	FRTFC = -1
C
	IF (GOT_Z) THEN
	   DO 150 I = 1,MIN(200,N)
	      STATTV(ZCOL,I) = IZ
150	   CONTINUE
	ENDIF
C
C draw out in 200 chunks
	FIRST = .TRUE.
	LAST = .FALSE.
	ENDS = 1
	LOOP = .TRUE.
	START = 1
200	NCOORD = MIN(200,N)
	N = N-NCOORD
C
	IF (N.LE.0) LAST = .TRUE.
	CALL STDRAW(
     &		NCOORD,TXTXY(1,START),STNATT,MATT,STATTC,STATTV,
     &		AUX,TEXT,FIRST,LAST,ENDS,LOOP,PACK,FS)
	START = START+NCOORD
	FIRST = .FALSE.
	IF (.NOT.LAST) GOTO 200
C
999	RETURN
	END
