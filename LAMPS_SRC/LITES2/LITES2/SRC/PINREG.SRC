C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-05-10 11:14:12.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION PINREG(XXYY,REG,INSIDE)
C
***	IDENT	10MY96
***	MODULE	PINREG
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	12-Aug-1985
C
C Description
C
C	Logical function that returns .TRUE. when the point XXYY
C	lies on the boundary of the region REG, and .FALSE. when
C	it is inside or outside (which is shown by INSIDE)
C
C	It is the responsibility of the calling program to ensure
C	that REG is valid, and that it has at least two points
C	(three	are more sensible)
C	It uses the algorithm that a horizontal line from the point
C	to + infinity will cut the edges of the region an even
C	number (including 0) of times if the point is outside the
C	region, and an odd number of times if it is inside.
C	Points lying on the edges of the region are inside it.
C	
C
	IMPLICIT NONE
C
C Arguments
C (input)
C
	REAL		XXYY(2)		! point to test
	INTEGER*4	REG		! number of region
C (output)
	LOGICAL		INSIDE		! .TRUE. if point inside REG
C
C common and parameter blocks
C
***	PARAMETER/CMN:REGPAR/
C
***	COMMON/CMN:MASTER/
***	COMMON/CMN:REGCMN/
C
C Local Variables
C
	INTEGER*4	CURPPT		! counter
	REAL		XX,YY		! copies of XXYY argument
	REAL		LINE(2,2)	! vector
	REAL		XSTART,YSTART	! first point in region
	REAL		X		! where horizontal line cuts
					! side of region
	INTEGER*4	RIGHT		! number of intersections
	LOGICAL		FINISHED	! loop control
	LOGICAL		FIRST		! dealing with first vector
	LOGICAL		PROBLEM		! last point had same y as point
	LOGICAL		FRSTPROB	! first point 
	LOGICAL		DIR,FRSTDIR	! direction of line
					! (.TRUE. for "up")
	REAL		LTD		! line width
	REAL*8		T1,T2,T3	! for critical arithmetic
	REAL		DIST
	INTEGER		WHERE
C
C functions
	REAL		PLDIST		! shortest distance from point
					! to line
C
C assume on boundary (and that means inside)
C
	PINREG=.TRUE.
	INSIDE=.TRUE.
	RIGHT=0
C
C initialise
C
	XX = XXYY(1)			! copy XXYY argument
	YY = XXYY(2)
C
C get a R*4 value for linewidth, as MAX and MIN won't work on mixtures
C of R*8 and R*4s
C
	LTD = LINWDTH
C
C do gross check
C
	IF (XX.LT.(REGLIM(1,REG)-LINWDTH).OR.
     &	    XX.GT.(REGLIM(2,REG)+LINWDTH).OR.
     &	    YY.LT.(REGLIM(3,REG)-LINWDTH).OR.
     &	    YY.GT.(REGLIM(4,REG)+LINWDTH)) THEN
	   PINREG=.FALSE.
	   INSIDE=.FALSE.
	   GOTO 100
	ENDIF
C
C get first point of region and initialise loop
C	
	CURPPT=REGPTR(1,REG)
	CALL PUTLNG(%VAL(CURPPT+OFFX),LINE(1,2))
	CALL PUTLNG(%VAL(CURPPT+OFFY),LINE(2,2))
	XSTART=LINE(1,2)
	YSTART=LINE(2,2)
C
	FINISHED=.FALSE.
	FIRST=.TRUE.
	PROBLEM=.FALSE.
	FRSTPROB = .FALSE.
C
C check if this vertex is pt
C
	IF (ABS(LINE(2,2)-YY).LT.LINWDTH.AND.
     &	    ABS(LINE(1,2)-XX).LT.LINWDTH)   GOTO 100
C
C  loop to test each vector of region
C
   10	CONTINUE
	IF (FINISHED) GOTO 30		! end of region
C
C move onto next vector
C
	LINE(1,1)=LINE(1,2)
	LINE(2,1)=LINE(2,2)
C
C get next point from region, or if at end of region, use the start
C point
C
	CALL PUTLNG(%VAL(CURPPT),CURPPT)
	IF (CURPPT.NE.REGPTR(2,REG)) THEN
	   CALL PUTLNG(%VAL(CURPPT+OFFX),LINE(1,2))
	   CALL PUTLNG(%VAL(CURPPT+OFFY),LINE(2,2))
	ELSE
	   FINISHED=.TRUE.
	   LINE(1,2)=XSTART
	   LINE(2,2)=YSTART
	ENDIF
C
C check if this vertex is pt
C
cccc	IF (ABS(LINE(2,2)-YY).LT.LINWDTH.AND.
cccc     &	    ABS(LINE(1,2)-XX).LT.LINWDTH)     GOTO 100
C
C see if point lies on this vector 
C
	IF (XX.GE.(MIN(LINE(1,1),LINE(1,2))-LTD).AND.
     &	    XX.LE.(MAX(LINE(1,1),LINE(1,2))+LTD).AND.
     &	    YY.GE.(MIN(LINE(2,1),LINE(2,2))-LTD).AND.
     &	    YY.LE.(MAX(LINE(2,1),LINE(2,2))+LTD)) THEN	! point close
							! to line
C
C get distance from point to line
C
	   DIST = PLDIST(XXYY,LINE,WHERE)
	   IF (DIST.LE.LTD) GOTO 100
	ENDIF
C
C*********************************************************************
C from now on, use correct arithmetic - no limits
C*********************************************************************
C
C if first (and last) point of region lies on horizontal line through
C point, see if region cuts this line, or goes back on itself
C
	IF (FINISHED.AND.FRSTPROB) THEN
	   IF (FRSTDIR.EQV.(LINE(2,2).GT.LINE(2,1))) THEN
	      IF (XSTART.GT.XX) RIGHT=RIGHT+1
	   ENDIF
	   GOTO 10
	ENDIF
C
C if this is first (non-horizontal) vector, see if it is a problem at
C the first point
C
	IF (FIRST) THEN
	   IF ((LINE(2,2)-LINE(2,1)).NE.0.0) THEN
	      FIRST=.FALSE.
	      IF ((LINE(2,1)-YY).EQ.0.0) THEN
	         FRSTPROB =.TRUE.
	         FRSTDIR = LINE(2,2).GT.LINE(2,1)
	         GOTO 10			! problem noted, go to
						! next vector
	      ENDIF
	   ENDIF
	ENDIF
C
C see if point lies within y extent of vector
   20	CONTINUE
	IF (MAX(LINE(2,1),LINE(2,2)).GE.YY.AND.
     &	            MIN(LINE(2,1),LINE(2,2)).LE.YY) THEN
C
C check for horizontal vector (point lies outside line)
C
	   IF (LINE(2,2)-LINE(2,1).EQ.0.0) GOTO 10
C
C if end of last vector lay on horizontal line through point, see
C if region cuts this horizontal line, or turns away from it
C
	   IF (PROBLEM) THEN
	      IF (DIR.EQV.(LINE(2,2).GT.LINE(2,1))) THEN
	         IF (LINE(1,1).GT.XX) RIGHT=RIGHT+1
	      ENDIF
	      PROBLEM=.FALSE.			! dealt with problem
	      GOTO 10
	   ENDIF
C
C check for new point of region on horizontal line thro point
C
	   IF (ABS(LINE(2,2)-YY).EQ.0.0) THEN
	      PROBLEM = .TRUE.
	      DIR = LINE(2,2).GT.LINE(2,1)
	      GOTO 10
	   ENDIF
C
C compute where horizontal line through the point cuts vector
C
	   T1 = DBLE(YY) - DBLE(LINE(2,1))	! take care of rounding
	   T2 = DBLE(LINE(1,2)) - DBLE(LINE(1,1))
	   T3 = DBLE(LINE(2,2)) - DBLE(LINE(2,1))
	   T1 = T1*T2/T3
	   X  = DBLE(LINE(1,1))+T1
C 
	   IF (X.GT.XX) THEN
	      RIGHT=RIGHT+1	! intersection to right of point
	   ENDIF
	ENDIF
	GOTO 10					! now check next vector
C
C test if odd or even intersections
C
  30	CONTINUE
	INSIDE=(RIGHT.AND.1).NE.0
	PINREG=.FALSE.				! not on boundary
C
C Return
C
  100	CONTINUE
	RETURN
	END
