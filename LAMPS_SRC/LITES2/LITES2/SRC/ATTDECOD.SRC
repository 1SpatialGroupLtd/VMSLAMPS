C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-05-24 14:07:22.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION ATTDECOD(INSTR,ACTYPE,OUTSTR_L,OUTSTR,ACVAL,
     &	                           NEED_VALUE,GOT_VALUE)
C
***	IDENT	24MY88
***	MODULE	ATTDECOD
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	17-Sep-1987
C
C Description
C
C To decode a line that contains an attribute number (or a name)
C and a value and perhaps a string
C
	IMPLICIT NONE
C
C arguments
C (in)
	CHARACTER*(*)	INSTR		! the input string to decode
C (out)
	INTEGER		ACTYPE		! the attribute number
	INTEGER		OUTSTR_L	! the length of the string
	CHARACTER*(*)	OUTSTR		! the output string
	INTEGER		ACVAL		! the value (as an integer)
C (in)
	LOGICAL		NEED_VALUE	! insist on a value?
C (out)
	LOGICAL		GOT_VALUE	! value present
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:MOANMESS/
***	PARAMETER/LSL$CMNLSL:READSTR/
C
***	COMMON/CMN:DOUT/
***	COMMON/CMN:FILES/
***	COMMON/LSL$CMNFRT:FRTACD/
***	COMMON/LSL$CMNLSL:TXTC/
C
C w/s
	BYTE		CH
C
C functions called
	LOGICAL		RDCHS
	INTEGER		READSTR
	INTEGER		CPYSTR
	LOGICAL		GET_ACTYPE
	LOGICAL		GET_ACVAL
C
	GOT_VALUE = .FALSE.
C
C can't decode until FRT file (or at least default ACDs) has been read
	IF (.NOT.HADFRT) THEN
	   IF (.NOT.HADACD) THEN
	      CALL FRT_ACDINI
	      HADACD = .TRUE.
	   ENDIF
	ENDIF
C
C copy into TXTBUF, instead of SETAUXing, as ACDFND_NAME resets decoding
C back to TXTBUF
	TXTPTR = TXTLIM
	TXTPTR = CPYSTR(INSTR,TXTDSC)
	CALL BSLN
C
C decode the AC type
	ATTDECOD = GET_ACTYPE(ACTYPE)
	IF (.NOT.ATTDECOD) GOTO 999
C
C if don't need value, then see if anything is on line
	IF (.NOT.NEED_VALUE) THEN
	   IF (RDCHS(CH)) THEN
	      ATTDECOD = .TRUE.
	      GOT_VALUE = .FALSE.
	      ACVAL = IFF_ABSENT
	      GOTO 999
	   ELSE
	      CALL BSCH
	   ENDIF
	ENDIF
C
C if ACDFND failed, common block is set to integer or real
	IF (ACD_CODE.LT.0) THEN
	   CALL INFORM(MSG_ATTRNONOTFND,ACTYPE)
	   IF (ACD_DATA_TYPE.EQ.ACD_DATATYPE_I) THEN
	      CALL INFORM(MSG_TREATASINTEGER)
	   ELSE
	      CALL INFORM(MSG_TREATASREAL)
	   ENDIF
	ENDIF
C
C decode AC value
	ATTDECOD = GET_ACVAL(ACVAL)
	IF (.NOT.ATTDECOD) GOTO 999
C
C now read additional string
990	OUTSTR_L = READSTR(OUTSTR,CH,ON_EOL)
C
C success
	GOT_VALUE = .TRUE.
C
999	RETURN
	END
