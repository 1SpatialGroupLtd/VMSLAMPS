C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-08-17 12:30:26.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	REAL FUNCTION LDIST(LINE)
C
***	MODULE	LDIST
***	IDENT	17AU92
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author  R. Fairbairns
C Transferred to LITES2  Clarke Brunt  13.iii.84
C
C Coded 5.iii.76
C Typed 8.iii.76
C
C To find the distance of the point (CONTXY) from a line segment.
C LINE is the segment, first subscript x or y, second point 1 or 2.
C
C Change by CCB, 17AU92. Set NVRTX, NSCND even if way beyond an end
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:PACK/
C
***	COMMON/CMN:MASTER/
***	COMMON/CMN:STRIKE/
C
C arguments
	REAL LINE(2,2)			! line segment
C
C The coordinates of the end-points of the line segment
C
C w/s
	REAL	R1, R2			! distances from vertices
	REAL	RR			! temporary
	REAL	XX			! length of line
C
C logical result defaults
	NVRTX = .FALSE.			! not on a vertex
	NSCND = .FALSE.			! not on second vertex
C set up the distances from the vertices
	R1 = CONTXY(1)-LINE(1,1)
	RR = CONTXY(2)-LINE(2,1)
	R1 = R1*R1+RR*RR
C deal with the 'silly' case
	IF (LINE(1,1).EQ.LINE(1,2).AND.LINE(2,1).EQ.LINE(2,2)) THEN
	   LDIST = R1		! distance from point 1 is the answer
	   NVRTX = .TRUE.	! take as on vertex
	   GOTO 999
	ENDIF
	R2 = CONTXY(1)-LINE(1,2)
	RR = CONTXY(2)-LINE(2,2)
 	R2 = R2*R2+RR*RR
C and the length of the line itself
	XX = LINE(1,1)-LINE(1,2)
	RR = LINE(2,1)-LINE(2,2)
	XX = XX*XX+RR*RR
C
C now peer at the obtuseness criteria
	RR = XX+R1-R2
C angle X2-X1-context?
	IF (RR.LT.0.0) THEN
	   LDIST = R1
	   NVRTX = .TRUE.
	ELSEIF ((XX+R2).LT.R1) THEN
	   LDIST = R2
	   NVRTX = .TRUE.
	   NSCND = .TRUE.
	ELSE
C neither 'base' angle obtuse - set up altitude
	   LDIST = R1-0.25*RR*RR/XX
	ENDIF
C powee!
	IF (R2.LE.CRITR2.OR.R1.LE.CRITR2) THEN	! on vertex
C a vertex hit
	   NVRTX = .TRUE.
	   IF (R1.GT.R2) NSCND = .TRUE.
	ENDIF
999	RETURN
C
	END
