C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-11-05 12:11:54.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE DOLOOP
C
***	IDENT   05NO92
***	MODULE  DOLOOP
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Written					CCB	21-FEB-1985
C
C Description
C
C	LITES2 cartographic editor LOOP command.
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:END/
***	PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:PACK/
***	PARAMETER/CMN:STAPAR/
C
***	COMMON/CMN:DOUT/		! cmd dec. output
***	COMMON/CMN:MAPS/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:RFCTRL/
***	COMMON/CMN:STRIKE/
C
C functions called
	LOGICAL		INTSCT,RUBISH
	LOGICAL		PLANE
C
	EXTERNAL	MOAN,NASTY
C
C local variables
	LOGICAL*1 EXTEND
	REAL	FSTXY(2,2)
	REAL	LSTXY(2,2)
	REAL	ZF,ZL
	REAL	XY(2,3)
	INTEGER	Z(3)
C
C is map read-only?
	IF (MAPRO(FOPAK(PAKMAP))) THEN
	   CALL MOAN(MSG_MAPREADONLY,FOPAK(PAKMAP)+1)
	   GOTO 9998
	ENDIF
C
C Despatch according to secondary command
C
	GOTO ( 100, 200 ), DSECN
C
C Secondary command number out of range
C
	IF (DSECN.EQ.0) GOTO 100	! default to NORMAL
	CALL MSGCMD(NASTY,MSG_ERRSECIND)
	GOTO 9998
C
C Secondary command NORMAL
C
100	EXTEND = .FALSE.		! not EXTEND
	GOTO 210
C
C Secondary command EXTEND
C
200	EXTEND = .TRUE.			! not NORMAL
C
C check sufficient vertices
	IF (FOLST.LT.4) THEN
	   CALL MOAN(MSG_TOOFEWTOLOOP)
	   GOTO 9998
	ENDIF
C
C NORMAL joins us
210	LSTXY(1,2) = FOTHAT(1)		! position of last vertex
	LSTXY(2,2) = FOTHAT(2)
	IF (ZOPT) CALL PUTLNG(FOTHAT(3),ZL)
	FOVRT = FOLST			! move to last vertex
	FONVRT = .TRUE.			! on a vertex
	CALL VERTEX(0.0)		! get vertices
	LSTXY(1,1) = FOXY(1,FOVRT-FOVO-1)	! penultimate
	LSTXY(2,1) = FOXY(2,FOVRT-FOVO-1)
	FSTXY(1,1) = FOTHIS(1)		! first vertex
	FSTXY(2,1) = FOTHIS(2)
	IF (ZOPT) CALL PUTLNG(FOTHIS(3),ZF)
	FOVRT = 1			! move to first vertex
	CALL VERTEX(0.0)
	FSTXY(1,2) = FOXY(1,2)		! second vertex
	FSTXY(2,2) = FOXY(2,2)
C
C set up rubber banding
	RUBCHG = .TRUE.
	RUBLIN(1) = .TRUE.
	RUBLIN(2) = .TRUE.
	RUBARR(1,1) = FSTXY(1,2)
	RUBARR(2,1) = FSTXY(2,2)
	RUBARR(1,2) = LSTXY(1,1)
	RUBARR(2,2) = LSTXY(2,1)
	IF (EXTEND) THEN
C
C try for intersection point
	   IF (INTSCT(FSTXY,LSTXY,CSXY,EXTEND,EXTEND)) GOTO 220	! no use
	   IF (RUBISH(CSXY)) GOTO 220	! out of range
	   GOTO 230
	ENDIF   
C
220	CSXY(1) = (FSTXY(1,1)+LSTXY(1,2))/2.0	! move to mean
	CSXY(2) = (FSTXY(2,1)+LSTXY(2,2))/2.0
230	POSCMD = .TRUE.
	IF (ZOPT) THEN
	   CALL LINEAR_INTERPL(FSTXY(1,1),LSTXY(1,2),CSXY,
     &	                              ZF,ZL,CSXY(3))
C
C set up planes for forcing
	   XY(1,1) = FOTHIS(1)
	   XY(2,1) = FOTHIS(2)
	   CALL PUTLNG(FOTHIS(3),Z(1))
	   XY(1,2) = FOTHAT(1)
	   XY(2,2) = FOTHAT(2)
	   CALL PUTLNG(FOTHAT(3),Z(2))
	   XY(1,3) = XY(1,1)
	   XY(2,3) = XY(2,1)
	   Z(3) = Z(1)
	   FORCE_C_SETUP = PLANE(XY,Z,FORCE_COEFFS)
	   IF (CSZI.NE.IFF_ABSENT) THEN
	      FORCE_H_SETUP = .TRUE.
	      FORCE_HEIGHT = CSXY(3)
	   ENDIF
	ENDIF
C
C call RFDRAW here so that it gets the correct vertices of the found
C object BEFORE it becomes the object in hand
	CALL RFDRAW			! update refresh
	CALL HANDLE			! take object into hand
	NDMODE = END_LOOP		! ready to END
	CALL SETSTA(STATE_EDIT)		! into EDIT state
	GOTO 9999
C
C error exit
9998	CALL IGNCMD
C
9999	RETURN
	END
