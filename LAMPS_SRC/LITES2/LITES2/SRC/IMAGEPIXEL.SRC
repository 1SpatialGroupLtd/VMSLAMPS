C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-06-25 13:12:00.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE IMAGEPIXEL(TYPE,N,R,IM,PIX)
C
***	IDENT	25JN93
***	MODULE	IMAGEPIXEL
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					CCB	13-Oct-1988
C
C To obtain the value in an image pixel (called by VALVAR->IMAGEVALUE)
C
	IMPLICIT NONE
C
***	PARAMETER/LSL$CMNDTI:DTIPAR/
***	PARAMETER/CMN:MOANMESS/
C
***	COMMON/LSL$CMNDTI:DTIHDR/
***	COMMON/CMN:IMAGE/
***	COMMON/CMN:LSRLIB/
C
C arguments
	INTEGER		TYPE		! type of variable
	INTEGER		N		! value if integer
	REAL		R		! value if real
	INTEGER		IM		! image number
	INTEGER		PIX(2)		! pixel number
	REAL*8		DX,DY
	INTEGER*4	DDX(2),DDY(2)
	EQUIVALENCE	(DX,DDX),(DY,DDY)
C
C functions
	INTEGER	DTI_COPY_LONG_DATA,DTI_COPY_REAL_DATA
	INTEGER	DTI_COPY_WORD_DATA,DTI_COPY_BYTE_DATA
	INTEGER	DTI_COPY_BIT_DATA
	INTEGER	AREA$USER_SETUP,AREA$USER_ACCESS
	INTEGER	LIB$EXTZV
	INTEGER	CALLR
C
C workspace
	INTEGER	DIR
	INTEGER	I,OFF
	INTEGER	RET,ERR
	INTEGER	ROW1,COL1
	INTEGER	SWPIX(2),NEPIX(2)
	INTEGER	FIRST_ROW
	INTEGER*4 BLOC
	LOGICAL	FINISH
	INTEGER*4	L
	INTEGER*2	W
	BYTE		B
	EQUIVALENCE	(L,W,B)
C
	TYPE = 1	! default to integer data type
C
	IF (IMAGE_TYPE(IM).EQ.TYPE_LSI) GOTO 550	! deal with LSI
	IF (IMAGE_TYPE(IM).EQ.TYPE_LSR) GOTO 650	! deal with LSR
C
C deal with DTI file
C
C Set up drawing direction
	DIR = 1
	IF (IMAGE_DIRECTION(IM).EQ.DTI_ORDER_CLOCKWISE) DIR = -1
	GOTO (300,320,340,360),IMAGE_CORNER(IM)+1	! SW,NW,NW,SE
C
C these all OK for direction clockwise
C
C First pixel in SW corner
300	IF (DIR.EQ.1) THEN
	   COL1 = PIX(2)
	   ROW1 = PIX(1)
	ELSE
	   COL1 = PIX(1)
	   ROW1 = PIX(2)
	ENDIF
	GOTO 380
C
C First pixel in NW corner
320	IF (DIR.EQ.1) THEN
	   COL1 = PIX(1)
	   ROW1 = Y_EXTENT(IMAGE_LUN(IM))-PIX(2)+1
	ELSE
	   COL1 = X_EXTENT(IMAGE_LUN(IM))-PIX(2)+1
	   ROW1 = PIX(1)
	ENDIF
	GOTO 380
C
C First pixel in NE corner
340	IF (DIR.EQ.1) THEN
	   COL1 = X_EXTENT(IMAGE_LUN(IM))-PIX(2)+1
	   ROW1 = Y_EXTENT(IMAGE_LUN(IM))-PIX(1)+1
	ELSE
	   COL1 = X_EXTENT(IMAGE_LUN(IM))-PIX(1)+1
	   ROW1 = Y_EXTENT(IMAGE_LUN(IM))-PIX(2)+1
	ENDIF
	GOTO 380
C
C First pixel in SE corner
360	IF (DIR.EQ.1) THEN
	   COL1 = X_EXTENT(IMAGE_LUN(IM))-PIX(1)+1
	   ROW1 = PIX(2)
	ELSE
	   COL1 = PIX(2)
	   ROW1 = Y_EXTENT(IMAGE_LUN(IM))-PIX(1)+1
	ENDIF
C
C read bytes in
380	  IF (DATA_TYPE(IMAGE_LUN(IM)) .EQ. DATA_BYTE) THEN
	    L = 0		! clear longword - treat as unsigned
	    RET=DTI_COPY_BYTE_DATA(IMAGE_LUN(IM),
     &	      B,.FALSE.,COL1,ROW1,1,1,ERR)
	    IF (.NOT.RET) GOTO 510
	    N = L
C
C read words in
	  ELSEIF (DATA_TYPE(IMAGE_LUN(IM)) .EQ. DATA_WORD) THEN
	    RET=DTI_COPY_WORD_DATA(IMAGE_LUN(IM),
     &	      W,.FALSE.,COL1,ROW1,1,1,ERR)
	    IF (.NOT.RET) GOTO 510
	    N = W
C
C read longs in
	  ELSEIF (DATA_TYPE(IMAGE_LUN(IM)) .EQ. DATA_LONG) THEN
	    RET=DTI_COPY_LONG_DATA(IMAGE_LUN(IM),
     &		N,.FALSE.,COL1,ROW1,1,1,ERR)
	    IF (.NOT.RET) GOTO 510
C
C read reals in
	  ELSEIF (DATA_TYPE(IMAGE_LUN(IM)) .EQ. DATA_REAL) THEN
	    TYPE = 2
	    RET=DTI_COPY_REAL_DATA(IMAGE_LUN(IM),
     &		R,.FALSE.,COL1,ROW1,1,1,ERR)
	    IF (.NOT.RET) GOTO 510
C
C read bits in
	  ELSEIF (DATA_TYPE(IMAGE_LUN(IM)) .EQ. DATA_BIT) THEN
C
C modify ROW1 so that we read byte aligned for bit data
	    FIRST_ROW = MOD(ROW1-1,8)
	    ROW1 = ROW1-FIRST_ROW
	    RET=DTI_COPY_BIT_DATA(IMAGE_LUN(IM),
     &	      B,.FALSE.,COL1,ROW1,1,8,ERR)
	    IF (.NOT.RET) GOTO 510
	    N = LIB$EXTZV(FIRST_ROW,1,B)
	  ENDIF
	GOTO 1000
C
510	CALL NASTY(MSG_ERRDIMG,IM,'DTI')
	CALL LITES2_SIGNAL(RET)
	GOTO 1000
C
C deal with LSI file
C set up required pixel, view 0, all levels
550	N = 0			! clear out value
	RET = AREA$USER_SETUP(PIX(1)-1,PIX(2)-1,
     &			      PIX(1)-1,PIX(2)-1,
     &			      0,-1)
	IF (.NOT.RET) GOTO 570
C
C access area until no more
560	RET = AREA$USER_ACCESS(SWPIX(1),SWPIX(2),NEPIX(1),NEPIX(2),
     &			       I,BLOC,FINISH)
	IF (.NOT.RET) GOTO 570
	IF (FINISH) GOTO 1000
	IF (PIX(1)-1.LT.SWPIX(1).OR.
     &	    PIX(1)-1.GT.NEPIX(1)) GOTO 560
	IF (PIX(2)-1.LT.SWPIX(2).OR.
     &	    PIX(2)-1.GT.NEPIX(2)) GOTO 560
	OFF = (NEPIX(2)-(PIX(2)-1))*(NEPIX(1)-SWPIX(1)+1) +
     &	       PIX(1)-1 - SWPIX(1)
	IF (IMAGE_LEVELS(IM).GE.0) THEN		! 1 bit deep
	   CALL LIB$INSV( LIB$EXTZV(OFF,1,%VAL(BLOC)), I,1,N)
	ELSE					! 8 bits deep
	   N = LIB$EXTZV(OFF*8,8,%VAL(BLOC))
	ENDIF
C
C go back for other levels - hopefully a grey scale LSI will only
C have one level
	GOTO 560
C
570	CALL NASTY(MSG_ERRDIMG,IM,'LSI')
	CALL LITES2_SIGNAL(RET)
	GOTO 1000
C
C deal with LSR file
650	N = 0			! clear out value
C
C calculate the point of interest in the LSR file's
C own coordinate system (i.e. using the file's original origin
C and pixelsize) (add 0.1 to move within an area type pixel)
	DX = (PIX(1)-1+0.1)*IMAGE_OPIXELSIZE(1,IM)+IMAGE_OORIGIN(1,IM)
	DY = (PIX(2)-1+0.1)*IMAGE_OPIXELSIZE(2,IM)+IMAGE_OORIGIN(2,IM)
C
C Can't pass a REAL*8 by value, so pass its two 4-byte halves (equivalenced
C onto it) as two consecutive arguments
	RET = CALLR(
     &		%VAL(IMAGE_RAC(IM)),
     &		%VAL(DDX(1)),%VAL(DDX(2)),
     &		%VAL(DDY(1)),%VAL(DDY(2)),
     &		%VAL(1),N,
     &		%VAL(LSR_ADDRESSES(XLSR_GET_PIXEL_VALUE)))
	IF (RET.NE.GOTH__NORMAL) GOTO 670
	GOTO 1000
C
670	CALL NASTY(MSG_ERRDIMG,IM,'LSR')
	RET = CALLR(%VAL(RET),%VAL(LSR_ADDRESSES(XLSR_PRINT_MESSAGE)))
	CALL WRITEF
	GOTO 1000
C
1000	RETURN
	END
