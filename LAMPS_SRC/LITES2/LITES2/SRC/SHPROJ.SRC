C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-02-09 17:49:54.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE SHPROJ
C
***	IDENT	09FE93
***	MODULE	SHPROJ
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	 8-Feb-1993
C
C	LITES2 cartographic editor SHOW PROJECTION command.
C
	IMPLICIT NONE
C
***     PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:STAPAR/
C
***	COMMON/CMN:DOUT/		! command decoding output
***	COMMON/LSL$CMNIFF:MD2DES/
***	COMMON/LSL$CMNIFF:MD2NAM/
***     COMMON/CMN:MAPS/
***	COMMON/CMN:TRANSFORM/
***	COMMON/CMN:STATE/
C
C functions
	INTEGER		SIGCHS
C
C w/s
	INTEGER		I
	INTEGER		PRJIND
	INTEGER		UNTIND
	INTEGER		SPHIND
	INTEGER		MAP
	LOGICAL		OK
	INTEGER*2 	IELEN
C
	IF (DNINT .EQ. 0) THEN
	   MD2LOC(1) = LITES2ORG(1)
	   MD2LOC(2) = LITES2ORG(2)
	   MD2SCL    = LITES2SCL
	   MD2PRJ    = FIRSTPRJ
	   MD2UNT    = FIRSTUNT
	   MD2SPH    = FIRSTSPH
	   MD2USP(1) = FIRSTUSP(1)
	   MD2USP(2) = FIRSTUSP(2)
	   OK = MD_OK
	   CALL INFORM(MSG_TRANSF_HDR,'Lites 2 coordinate space')
	ELSE
	   IF (DINTS(1).LE.0.OR.DINTS(1).GT.MAXMAP) THEN
	      CALL MOAN(MSG_ILLEGLMAP,MAXMAP)
	      GOTO 9999
	   ENDIF
	   MAP=DINTS(1)-1
	   IF (MAP.GT.MAPTOP .OR. .NOT.MAP_EXIST(MAP)) THEN
	      CALL MOAN(MSG_MAPNOTEXIST,DINTS(1))
	      GOTO 9999
	   ENDIF
C
	   IF (SINDEX.EQ.STATE_INITIAL) THEN
	      CALL MSGCMD(MOAN,MSG_CMDNOTVALID)
	      CALL IGNCMD
	      GOTO 9999
	   ENDIF
C
	   CALL INFORM(MSG_TRANSF_HDR,IFFNAM(1,MAP))
C
C read the map descriptor from this map
	   CALL SELIF(MAP)
	   CALL IFFRWD
	   CALL IFFNXC('MD',IELEN)
	   IF (IELEN.EQ.-1) THEN
	      CALL MOAN(MSG_MISSENT,'MD')	
	      GOTO 9999
	   ENDIF
	   IF (IELEN.EQ.MD2LEN) THEN
	      CALL EIHRI(MD2ARR,MD2LEN,1)
	      OK = (MATV2 .EQ. 2 .AND. MD2PRJ .NE. 0)
	   ELSE
	      OK = .FALSE.
	   ENDIF
	ENDIF
C
C
	IF (.NOT.OK) THEN
	   CALL MOAN(MSG_NOMDSETUP)
	   GOTO 9999
	ENDIF
C
	IF (SINDEX .NE. STATE_INITIAL)
     &	   CALL INFORM(MSG_TRANSF_LOCALO,MD2LOC(1),MD2LOC(2))
C
	CALL INFORM(MSG_TRANSF_SCL,MD2SCL)
C
C determine which projection we have
C
	DO 100 I = 1,MD2_NOPRJ
	   IF (MD2PRJ.EQ.MD2_PRJCD(I)) THEN
	      PRJIND = I
   	      GOTO 150
	   ENDIF
100	CONTINUE
C
	CALL INFORM(MSG_TRANSF_UKN_CODE,'projection',MD2PRJ)
   	GOTO 200
C
150	CALL INFORM(MSG_TRANSF_PROJ,MD2_PRJCD(PRJIND),
     &				MD2_PRJ(PRJIND)(3:SIGCHS(MD2_PRJ(PRJIND))))
C
C and the spheroid
C
200	DO 210 I = 1,MD2_NOSPH
	   IF (MD2SPH.EQ.MD2_SPHCD(I)) THEN
	      SPHIND = I
	      GOTO 250
	   ENDIF
210	CONTINUE
C
	CALL INFORM(MSG_TRANSF_UKN_CODE,'spheroid',MD2SPH)
   	GOTO 300
C
250	CALL INFORM(MSG_TRANSF_SPH,MD2_SPHCD(SPHIND),
     &				MD2_SPH(SPHIND)(1:SIGCHS(MD2_SPH(SPHIND))))
C
	IF (MD2SPH .EQ. 101) THEN
	   CALL INFORM(MSG_TRANSF_SPHSUPP,MD2USP(1),MD2USP(2))
	ENDIF
C
300	DO 310 I = 1,MD2_NOUNT
	   IF (MD2UNT.EQ.MD2_UNTCD(I)) THEN
	      UNTIND = I
	      GOTO 350
	   ENDIF
310	CONTINUE
C
	CALL INFORM(MSG_TRANSF_UKN_CODE,'unit',MD2UNT)
	GOTO 400
C
350	CALL INFORM(MSG_TRANSF_UNIT,MD2_UNTCD(UNTIND),
     &				MD2_UNT(UNTIND)(1:SIGCHS(MD2_UNT(UNTIND))))
C
400	CONTINUE
	IF (DNINT .EQ.0) THEN
	   IF (DO_FLY_TRANS .AND.PROJ_TRANS_OUTPUT) THEN
	      CALL INFORM(MSG_TRANSF_ONOUTPUT,' ')
	   ELSE
	      CALL INFORM(MSG_TRANSF_ONOUTPUT,' not ')
	   ENDIF
	ENDIF
C
9999	RETURN
	END
