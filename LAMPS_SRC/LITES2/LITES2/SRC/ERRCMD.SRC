C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-10-05 16:20:04.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE ERRCMD(WHAT)
C
***	IDENT	05OC89
***	MODULE	ERRCMD
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RJH	21-AUG-1984
C
C Description
C
C    This subroutine is part of the LITES2 Command Interface, and its
C purpose is to diagnose CMDLIB errors and output appropriate messages.
C It is called if an error occurs while reading a command or macro. The
C argument is expected to be one of the strings 'command', 'macro', or
C 'menu name'.
C
	IMPLICIT NONE
C
C Included Parameter Files
C
***     PARAMETER/CMN:MOANMESS/		! moan constants
***	PARAMETER/LSL$CMNLSL:LSLLIBMSG/
C
C Arguments
C
	CHARACTER*(*)	WHAT		! command description string
C
C Common Blocks
C
***     COMMON/LSL$CMNLSL:CMDCOM/	! CMDLIB command handling
***	COMMON/LSL$CMNLSL:EXCEPTION/	! ERROR handling
C
C Unexpected character
C
	IF (ERRNUM .EQ. LSL__UNEXPCH) THEN
	   CALL MOAN(MSG_CMDLIBUXC,UNXCHR)
C
C Unexpected string while reading primary command
C
	ELSE IF (ERRNUM .EQ. LSL__UNEXPCMD) THEN
	   CALL MOAN(MSG_CMDLIBUXS,WHAT,CMDNST)
C
C Unexpected string while reading secondary command
C
	ELSE IF (ERRNUM .EQ. LSL__UNEXPCMD2) THEN
	   CALL MOAN(MSG_CMDLIBSUX,SECNST,CMDFST)
C
C Ambiguous string while reading primary command
C
	ELSE IF (ERRNUM .EQ. LSL__AMBIG) THEN
	   CALL MOAN(MSG_CMDLIBAMB,WHAT,CMDNST,CMDFST,CMDAST)
C
C Ambiguous string while reading secondary command
C
	ELSE IF (ERRNUM .EQ. LSL__AMBIG2) THEN
	   CALL MOAN(MSG_CMDLIBSAM,SECNST,CMSFST,CMDAST,CMDFST)
C
C Unexpected end of line
C
	ELSE IF (ERRNUM .EQ. LSL__UNEXPEOL) THEN
	   CALL MOAN(MSG_CMDLIBEOL,WHAT,CMDFST)
C
C Bad inequality name
C
	ELSE IF (ERRNUM .EQ. LSL__BADINEQ) THEN
	   CALL MOAN(MSG_CMDLIBBIQ,WHAT,CMDFST)
C
C A mathematical over/underflow situation
C
	ELSE IF (ERRNUM .EQ. LSL__HADEXCP) THEN
C
C Floating division overflow
C
	   IF (LSL_EXCP .EQ. LSL__FLTDIV) THEN
	      CALL NASTY(MSG_CMDLIBFDV,WHAT,CMDFST)
	      CALL LITES2_SIGNAL(LSL_EXCP)
C
C Floating overflow
C
	   ELSE IF (LSL_EXCP .EQ. LSL__FLTOVF) THEN
	      CALL NASTY(MSG_CMDLIBFOV,WHAT,CMDFST)
	      CALL LITES2_SIGNAL(LSL_EXCP)
C
C Floating underflow
C
	   ELSE IF (LSL_EXCP .EQ. LSL__FLTUND) THEN
	      CALL NASTY(MSG_CMDLIBFUN,WHAT,CMDFST)
	      CALL LITES2_SIGNAL(LSL_EXCP)
C
C Integer division overflow
C
	   ELSE IF (LSL_EXCP .EQ. LSL__INTDIV) THEN
	      CALL NASTY(MSG_CMDLIBIDV,WHAT,CMDFST)
	      CALL LITES2_SIGNAL(LSL_EXCP)
C
C Integer overflow
C
	   ELSE IF (LSL_EXCP .EQ. LSL__INTOVF) THEN
	      CALL NASTY(MSG_CMDLIBIOV,WHAT,CMDFST)
	      CALL LITES2_SIGNAL(LSL_EXCP)
	   ENDIF
C
C Number read exception
C
	ELSE IF (ERRNUM .EQ. LSL__NONUM .OR.
     &		 ERRNUM .EQ. LSL__BASECH ) THEN
	   CALL NASTY(MSG_CMDLIBBEX,WHAT,CMDFST)
	   CALL LITES2_SIGNAL(LSL_EXCP)
C
C Unexpected error
C
	ELSE
	   CALL NASTY(MSG_UNXCMDERR)
	ENDIF
C
C Return
C
	RETURN
	END
