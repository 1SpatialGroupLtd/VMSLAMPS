C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-02-27 13:01:46.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION SRTMEM
C
***	MODULE	SRTMEM
***	IDENT	27FE92
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C
C To get memory for sorting features (called by FLVIEW)
C Author: Clarke Brunt	20-Mar-1985
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:EFNLUN/
***	PARAMETER/CMN:MOANMESS/
C
***	COMMON/CMN:MAPS/
***	COMMON/CMN:SORT/
C
C functions called
	INTEGER*4	LIB$FREE_VM_PAGE
	INTEGER*4	LIB$GET_VM_PAGE
C
C workspace
	INTEGER		NPAGE
	INTEGER*4	COND
	INTEGER		NFEAT
	INTEGER		STACK_SIZE
C
	SRTMEM = .TRUE.			! assume failure
C
C we think we have NOFEAT features loaded into LITES2. Some of these may
C go in the sorting arrays more than once, so increase the number by a
C factor (which will be increased in FLVIEW if memory is too small)
C
	NFEAT = NOFEAT * SORFAC
C
C To use QUICKSORT, for up to NFEAT features, we need 2*NFEAT
C longwords for the array itself, and 2*LOG2(NFEAT+1) for the stack
C
C so calculate the stack size
	STACK_SIZE = INT(LOG(FLOAT(NFEAT+1))/LOG(2.0))
C
C calculate number of pages required
	NPAGE = (NFEAT+STACK_SIZE-1)/64+1
C
C If already got space allocated, and it's large enough then use it
	IF (SORBLK.GE.NPAGE) GOTO 500
C
C Free sorting memory area
	IF (SORBLK.NE.0) THEN
	   COND = LIB$FREE_VM_PAGE(SORBLK,SORADR)
	   IF (.NOT.COND) CALL LITES2_SIGNAL(COND)
	   SORBLK = 0
	ENDIF
C
C Get memory (adding some extra pages for future expansion)
	NPAGE = NPAGE+EXTRA
	COND = LIB$GET_VM_PAGE(NPAGE,SORADR)
	IF (.NOT.COND) THEN		! failed
	   CALL NASTY(MSG_INSVIRMEM)
	   CALL LITES2_SIGNAL(COND)
	   CALL COLAPS(MSG_INSVIRMEM,COND)
	   GOTO 999
	ENDIF
C
	SORBLK = NPAGE
C
C of this space, some is used for stack, the rest for sort memory
C so we can work out the maximum number of sort elements that we can
C have (assuming each is 8 bytes)
	SORLIM = NPAGE*64 - STACK_SIZE
C
500	SORPTR = 0			! space empty
	SRTMEM = .FALSE.		! success
C
999	RETURN
	END
