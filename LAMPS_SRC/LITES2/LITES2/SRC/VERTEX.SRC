C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-02-21 16:07:04.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE VERTEX(FRAC)
C
***	IDENT	21FE89
***	MODULE	VERTEX
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Modified				CCB	 7-NOV-1984
C	Created					RJH	25-SEP-1984
C
C Description
C
C Common routine called by commands which move along the found feature.
C FOVRT and FONVRT describe the desired position.
C FRAC is desired fraction between FOVRT and FOVRT+1 (if FONVRT false).
C Vertices are hauled in, and a cursor position generated.
C
	IMPLICIT NONE
C
C Included Parameter Files
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:AUXDEF/		! auxiliary array definitions
***	PARAMETER/CMN:PACK/		! external pack definitions
***     PARAMETER/CMN:STAPAR/		! state constants
C
C Common Blocks
***	COMMON/LSL$CMNFRT:FRTCOM/
***     COMMON/CMN:STATE/		! state variables
***	COMMON/CMN:MASTER/		! odds and ends
***	COMMON/CMN:OPTION/
***	COMMON/CMN:STRIKE/		! found objects, etc.
C
C Argument
	REAL	FRAC			! fraction between vertices or
					! along arc
C
C Local Variables
	INTEGER		I		! index
	REAL		ANG
	LOGICAL		MOVE_Z
	REAL		TMP1,TMP2
	INTEGER		TMP1I,TMP2I
	EQUIVALENCE	(TMP1,TMP1I),(TMP2,TMP2I)
C
	MOVE_Z = .FALSE.
C
C deal with circle arcs
	IF (FOPAK(PAKGT).GE.CLOTYP .AND.
     &	    FOPAK(PAKGT).LE.FULTYP) THEN	! circle arc
	   ANG = FOAUX(STAI) + FRAC*FOAUX(TOTI)
	   FOCXY(1) = FOAUX(XCENI) + COS(ANG)*FOAUX(RADI)
	   FOCXY(2) = FOAUX(YCENI) + SIN(ANG)*FOAUX(RADI)
C
C calculate Z value if required
	   IF (ZOPT.AND.FOC_DEFINED) THEN
	      CALL PLANE_INTERPL(FOCXY,FOCOEFFS,FOCXY(3))
	      MOVE_Z = .TRUE.
	   ENDIF
C
	   FOSTRT = .FALSE.
	   FOEND  = .FALSE.
	   IF (FRAC.EQ.0.0) THEN		! at start of arc
	      FOSTRT = .TRUE.
	   ELSEIF (FRAC.EQ.1.0) THEN		! at end of arc
	      FOEND  = .TRUE.
	   ENDIF
	   FONVRT = FOSTRT.OR.FOEND		! only on vertex at start
						! end
C
C linear features
	ELSE
	   CALL HAULIN(0)
	   I = FOVRT-FOVO
	   IF (FONVRT) THEN		! on a vertex
	      FOCXY(1) = FOXY(1,I)
	      FOCXY(2) = FOXY(2,I)
C
C move Z value, if ZOPT, and there is somewhere to go
	      IF (ZOPT.AND.FO_Z_COL.GT.0) THEN
	         IF (FOATTV(FO_Z_COL,I).NE.IFF_ABSENT) THEN
	            CALL PUTLNG(FOATTV(FO_Z_COL,I),FOCXY(3))
	            MOVE_Z = .TRUE.
	         ENDIF
	      ENDIF
	   ELSE				! between vertices
	      FOCXY(1) = FOXY(1,I)+(FOXY(1,I+1)-FOXY(1,I))*FRAC
	      FOCXY(2) = FOXY(2,I)+(FOXY(2,I+1)-FOXY(2,I))*FRAC
C
C move Z value, if ZOPT, and there is somewhere to go
	      IF (ZOPT.AND.FO_Z_COL.GT.0) THEN
C
C if valid vector, interpolate along it
	         IF (FOXY(1,I).NE.FOXY(1,I+1).OR.
     &	             FOXY(2,I).NE.FOXY(2,I+1)) THEN
	            CALL LINEAR_INTERPL(FOXY(1,I),FOXY(1,I+1),FOCXY,
     &	            FOATTV(FO_Z_COL,I),FOATTV(FO_Z_COL,I+1),FOCXY(3))
	         ELSE
C
C if duplicated point, position proportionally in Z
                    TMP1I = FOATTV(FO_Z_COL,I)
                    TMP2I = FOATTV(FO_Z_COL,I+1)
	            IF (TMP1I.NE.IFF_ABSENT.AND.TMP2I.NE.IFF_ABSENT) THEN
	               FOCXY(3) = TMP1 + (TMP2-TMP1)*FRAC
	            ELSEIF (TMP1I.NE.IFF_ABSENT) THEN
	               FOCXY(3) = TMP1
	            ELSEIF (TMP2I.NE.IFF_ABSENT) THEN
	               FOCXY(3) = TMP2
	            ENDIF
	         ENDIF
	         MOVE_Z = .TRUE.
	      ENDIF
	   ENDIF
	ENDIF
C
	CSXY(1) = FOCXY(1)		! actual cursor position
	CSXY(2) = FOCXY(2)
	IF (MOVE_Z) THEN
	   CSXY(3) = FOCXY(3)
	ELSE
	   CALL PUTLNG(IFF_ABSENT,FOCXY(3))
	ENDIF
	CSSTIL = .FALSE.		! cursor has moved
	FONLIN = .TRUE.			! and now on a feature
C
	POSCMD=.TRUE.
	RETURN
	END
