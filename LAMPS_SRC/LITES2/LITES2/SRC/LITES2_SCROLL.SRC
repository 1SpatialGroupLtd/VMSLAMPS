C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-10-05 16:44:22.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
 	SUBROUTINE LITES2_SCROLL(NLINES,STLINE)
C
***	MODULE	LITES2_SCROLL
***	IDENT	05OC89
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Description
C
C To clear screen and set scroll area on a VTxxx style terminal
C
	IMPLICIT NONE
C
C arg
	INTEGER*2	NLINES
	INTEGER*2	STLINE
C
C NLINES <= 0	Reset scroll area to whole screen
C NLINES >  0	Set NLINES scrolling 
C STLINE <  0   clear screen
C STLINE >= 0   Start scrolling at STLINE
C
***	PARAMETER/CMN:MOANMESS/
C
***	COMMON/CMN:OPTION/
***	COMMON/CMN:VTCTRL/
***	COMMON/CMN:WORKS/
C
C w/s
	INTEGER		I		! loop counter
	INTEGER*2	SAVEND,SAVSTRT
	INTEGER		POS
C
C what type of terminal am I sitting on ?
C
	IF (.NOT.VT100) GOTO 99		! not VT100-compatible
C
C save current scroll area
C
	SAVSTRT = VTSSCR
	SAVEND  = VTSEND
C
C get preferred size of scroll area
C
	VTSSCR = MAX(1,(MIN(VTLPP-1,STLINE)))	! start of scroll area
C
	IF (NLINES.LE.0) THEN
	   VTSSIZ = VTLPP
	ELSE
	   VTSSIZ = MIN(NLINES,VTLPP)
	ENDIF
	VTSSIZ = MIN(MAX(2,VTSSIZ),VTLPP-VTSSCR+1)
C
	VTSEND = VTSSCR + VTSSIZ -1	! end of scroll area
C
C this scroll area may have to be altered if there is a status area that
C impinges on scroll area
C
	IF (STAOPT) THEN
C
C first status line is special
C
	   IF (VTFRST) THEN
	      VTSEND = VTLPP - 3
C
C if status line covers scroll area, put two lines above (or below)
C
	   ELSEIF ((VTSSCR.EQ.VTSTTS.OR.VTSSCR.EQ.(VTSTTS+1)).AND.
     &	           (VTSEND.EQ.VTSTTS.OR.VTSEND.EQ.(VTSTTS+1))) THEN
	      IF (VTSTTS.GT.2) THEN
	         VTSSCR = VTSTTS - 2
	      ELSE
	         VTSSCR = VTSTTS + 2
	      ENDIF
	      VTSEND = VTSSCR + 1		! end of scroll area
C
C if status line impinges on scroll area, take the larger scroll area
C that is left
C
	   ELSEIF ((VTSTTS.LE.VTSEND).AND.((VTSTTS+1).GE.VTSSCR)) THEN
	      IF (((VTSTTS+1)-VTSSCR).GE.(VTSEND-VTSTTS)) THEN
	         VTSEND = VTSTTS - 1
	         VTSSCR = MIN(VTSSCR,VTSEND-1)	! force two line scroll
	      ELSE
	         VTSSCR = VTSTTS + 2
	         VTSEND = MAX(VTSEND,VTSSCR+1)	! force two line scroll
	      ENDIF
	   ENDIF
	   VTSSIZ = VTSEND - VTSSCR + 1
	ENDIF
C
C clear appropriate parts of screen
C
	IF (STLINE.LT.0) THEN
	   CALL LIB$ERASE_PAGE(1,1)
	ELSE
C
C scroll up any lines that are being cut off bottom of scroll area
C (first set scroll area large enough)
C
	   CALL LIB$SET_SCROLL(MIN(SAVSTRT,VTSSCR),MAX(SAVEND,VTSEND))
	   DO 10, I = VTSEND+1,SAVEND
	      CALL INFORM(MSG_BLANK)
   10	   CONTINUE
C
C make sure all of screen not wanted is blank
C
	   DO 20, I = SAVSTRT,VTSSCR-1
	      CALL BLINE(I)
   20	   CONTINUE
C
	   CALL LIB$ERASE_PAGE(VTSEND+1,1)
	ENDIF
C
C write out status line
C
	IF (STAOPT) THEN
	   VTSIND = -1
	   VTCMAP = -1
	   CALL VTSTAT
	ENDIF	
C
C set scroll area
C
	CALL LIB$SET_SCROLL(VTSSCR,VTSEND)
C
C set cursor to end of scroll area, or at current position,
C if end moved down
	I = TTOCUR+1
	POS = MIN(VTSEND,SAVEND)
	IF (VTSSCR.GE.SAVEND) THEN
	   POS = VTSSCR
	   I = 1
	ENDIF
	CALL LIB$SET_CURSOR(POS,I)
C
99	RETURN
	END
