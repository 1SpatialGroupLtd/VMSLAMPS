	SUBROUTINE NDINCL
C
***	IDENT	06FE89
***	MODULE	NDINCL
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Written					RWR	23-Oct-1985
C
C Description
C
C	END INCLUDE ROUTINE	
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:END/
***	PARAMETER/CMN:PACK/
***	PARAMETER/CMN:STAPAR/		! state constants
***	PARAMETER/CMN:START/
C
***	COMMON/CMN:CSTRCT/
***     COMMON/CMN:MASTER/
***     COMMON/CMN:STATE/		! state variables
***	COMMON/CMN:STRIKE/
C
C Functions called
C
C w/s
C
	INTEGER		FLG
	LOGICAL		BACK
	INTEGER		THVRT
	LOGICAL*1	THNVRT
	INTEGER		THFLG
	REAL		THISXY(3)
C
C if on marked position, don't do anything
C
	IF (FMCXY(1).EQ.CSXY(1).AND.FMCXY(2).EQ.CSXY(2)) GOTO 30
C
C remember this position
C
	BACK=FOVRT.LT.FMVRT
	THVRT=FOVRT
	THNVRT=FONVRT
	THISXY(1)=CSXY(1)
	THISXY(2)=CSXY(2)
	CALL PUTLNG(CSXY(3),THISXY(3))
	IF (BACK.OR..NOT.FONVRT) THEN
	   THFLG=FOFLG(FOVRT-FOVO+1)
	ELSE
	   THFLG=FOFLG(FOVRT-FOVO)
	ENDIF
C
C go to relevant vertex, at start of include
C
	IF (.NOT.BACK) THEN	! forward include
	   FOVRT=FMVRT+1
	   IF (THNVRT) THVRT=THVRT-1 ! only output vertices up 
				! to the one before the end
	ELSE			! backward include
	   IF (FMNVRT) THEN	! when on vertex, it has been output
	      FOVRT=FMVRT-1
	   ELSE			! it was a point between vertices that
	      FOVRT=FMVRT	! was output, so must output vertex
	   ENDIF
	ENDIF
C
C output each vertex of include feature in turn
C
   10	CONTINUE
	IF ((BACK.AND.(FOVRT.LE.THVRT)).OR.
     &	    (.NOT.BACK.AND.(FOVRT.GT.THVRT))) GOTO 20	! finished
C
C move cursor to this point
C
	FONVRT=.TRUE.
	CALL VERTEX(0.0)
	IF (.NOT.BACK) THEN
	   FLG=FOFLG(FOVRT-FOVO)
	ELSE
	   FLG=FOFLG(FOVRT-FOVO+1)
	ENDIF
C
C and output point to construction buffer
C
	CALL STRTER(START_ADD,FLG)	! may moan at duplicated point
C
C move onto next vertex
C
	IF (BACK) THEN
	   FOVRT=FOVRT-1
	ELSE
	   FOVRT=FOVRT+1
	ENDIF
	GOTO 10
C
C now output the point we were originally on (whether vertex or not)
C
   20	CONTINUE
	CSXY(1)=THISXY(1)
	CSXY(2)=THISXY(2)
	CALL PUTLNG(THISXY(3),CSXY(3))
	CSSTIL=.FALSE.
	
	CALL STRTER(START_ADD,THFLG)
C
C include is finished, drop found object, and go into CONSTRUCT state
C
   30	CONTINUE
	JUSTIN=.TRUE.			! just finished include
	POSCMD=.FALSE.			! VERTEX has set it
	CALL DROP
	FNDMDE=0
	IF (INCBRD) THEN
	   NDMODE = END_BRIDGE
	ELSE
	   NDMODE = END_START		! ready to end
	ENDIF
	CALL SETSTA(STATE_CONSTRUCT)
C
	RETURN
	END
