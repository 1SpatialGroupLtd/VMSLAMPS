C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-05-08 13:01:44.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        SUBROUTINE DODISP
C
***     IDENT   08MY96
***     MODULE  DODISP
C
C       Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C       Written                                 CCB	4-Apr-1989
C
C	LITES2 cartographic editor DISPLAY command.
C
        IMPLICIT NONE
C
***     PARAMETER/CMN:ACS/
***     PARAMETER/CMN:EFNLUN/
***     PARAMETER/CMN:GKSPAR/
***     PARAMETER/CMN:MOANMESS/
***     PARAMETER/CMN:STAPAR/
C
***     COMMON/CMN:DOUT/
***     COMMON/CMN:DRAWIN/
***	COMMON/LSL$CMNFRT:FRTACD/
***	COMMON/CMN:GLOBAL/
***     COMMON/CMN:LABELS/
***     COMMON/CMN:OVERLAY/
***     COMMON/CMN:STATE/
***     COMMON/CMN:WORKS/
C
C Functions
	EXTERNAL NASTY,MOAN
	LOGICAL	TSTWK
	INTEGER	ACT_CREATE_OVERLAY,ACT_CREATE_DISPLAY,ACT_DELETE_DISPLAY
	INTEGER	FINSTR
C
C Local Variables
	INTEGER*4	OK
	INTEGER		I
	INTEGER		PLANES
	INTEGER		NULL
	CHARACTER*1	NULLC
	INTEGER		WTYPE
C
C Dispatch according to secondary command
	GOTO (100,200,300,400,500,600,700,800,900,
     &	      1000,1100,1200,1300,1400,1500,1600), DSECN
C
C Secondary command number out of range
	CALL MSGCMD(NASTY,MSG_ERRSECIND)
	GOTO 9990
C
C DISPLAY NUMBER number
C
100	IF (DINTS(1).LT.0.OR.DINTS(1).GT.MAXDISP) THEN
	   CALL MOAN(MSG_DISPRNG,0,MAXDISP)
	   GOTO 9990
	ENDIF
	IF (DINTS(1).GT.0) THEN
	   IF (DISPLAY_PLANES(DINTS(1)).LE.0) THEN
	      IF (DINTS(1).LE.2) WTYPE = WTYPES(DINTS(1))
	      OK = TSTWK(DINTS(1),WTYPE,NULL,NULLC,PLANES)
	      IF (.NOT.OK.OR.PLANES.LE.0) THEN
	         CALL MOAN(MSG_DISPNOTAVL,DINTS(1))
	         GOTO 9990
	      ENDIF
	      DISPLAY_WTYPE(DINTS(1)) = WTYPE
	      IF (PLANES.GT.MAXPLANES) PLANES = MAXPLANES
	      DISPLAY_PLANES(DINTS(1)) = PLANES
C
C test the other workstation, to see if they share overlays
	      IF (DINTS(1).LE.2) THEN
	         WTYPE = WTYPES(3-DINTS(1))
	         OK = TSTWK(3-DINTS(1),WTYPE,NULL,NULLC,PLANES)
	         IF (OK.AND.PLANES.GT.0) THEN
	            OVERLAY_SHARE = .TRUE.
	            DISPLAY_PLANES(3-DINTS(1)) = DISPLAY_PLANES(DINTS(1))
	         ENDIF
	      ENDIF
	   ENDIF
	ENDIF
	DISPLAY_CURRENT = DINTS(1)
	OVERLAY_CURRENT = 0
	GOTO 9999
C
C DISPLAY CREATE
C 
200	IF (DISPLAY_CURRENT.EQ.0) GOTO 9000
	IF (DISPLAY_CURRENT.LE.2) GOTO 9300
	IF (DISPLAY_EXISTS(DISPLAY_CURRENT)) GOTO 9999
	DISPLAY_EXISTS(DISPLAY_CURRENT) = .TRUE.
C
C perhaps reduce number of planes if a DISPLAY COLOURS command
C has been used
	IF (DISPLAY_COLS(DISPLAY_CURRENT).GT.0) THEN
203	   IF (2**(DISPLAY_PLANES(DISPLAY_CURRENT)-1).LT.
     &		DISPLAY_COLS(DISPLAY_CURRENT) ) GOTO 204
	   DISPLAY_PLANES(DISPLAY_CURRENT) =
     &			DISPLAY_PLANES(DISPLAY_CURRENT)-1
	   GOTO 203
	ENDIF
C
C create ACTLIB display structure for this display
204	OK = ACT_CREATE_DISPLAY(DISPLAY_PTR(DISPLAY_CURRENT),
     &				DISPLAY_PLANES(DISPLAY_CURRENT))
	IF (.NOT.OK) GOTO 9100
C
	DO 205 I=1,MAXOVER
	   OVERLAY_PLANES(I,DISPLAY_CURRENT) = 0
205	CONTINUE
C
C defer creation if still in INITIAL state
	IF (SINDEX.EQ.STATE_INITIAL) GOTO 9999
C
C cannot create, unless primary or secondary already in use
	IF (NODISP) GOTO 9999
C
	CALL DISPLAY_CREATE(DISPLAY_CURRENT)
	CALL DISPLAY_CURSOR(DISPLAY_CURRENT,
     &			    DISPLAY_CURS(DISPLAY_CURRENT))
	GOTO 9999
C
C DISPLAY POP
C 
300	IF (SINDEX.EQ.STATE_INITIAL) GOTO 9200
	IF (DISPLAY_CURRENT.EQ.0) GOTO 9000
	IF (DISPLAY_CURRENT.LE.2) THEN
	   IF (.NOT.WKOP(DISPLAY_CURRENT)) GOTO 9500
	ELSE
	   IF (.NOT.DISPLAY_EXISTS(DISPLAY_CURRENT)) GOTO 9400
	ENDIF
	CALL DISPLAY_POP(DISPLAY_CURRENT)
	GOTO 9999
C
C DISPLAY PUSH
C 
400	IF (SINDEX.EQ.STATE_INITIAL) GOTO 9200
	IF (DISPLAY_CURRENT.EQ.0) GOTO 9000
	IF (DISPLAY_CURRENT.LE.2) THEN
	   IF (.NOT.WKOP(DISPLAY_CURRENT)) GOTO 9500
	ELSE
	   IF (.NOT.DISPLAY_EXISTS(DISPLAY_CURRENT)) GOTO 9400
	ENDIF
	CALL DISPLAY_PUSH(DISPLAY_CURRENT)
	GOTO 9999
C
C DISPLAY REVEAL
C 
500	IF (SINDEX.EQ.STATE_INITIAL) GOTO 9200
	IF (DISPLAY_CURRENT.EQ.0) GOTO 9000
	IF (DISPLAY_CURRENT.LE.2) THEN
	   IF (.NOT.WKOP(DISPLAY_CURRENT)) GOTO 9500
	ELSE
	   IF (.NOT.DISPLAY_EXISTS(DISPLAY_CURRENT)) GOTO 9400
	ENDIF
	CALL DISPLAY_REVEAL(DISPLAY_CURRENT)
	GOTO 9999
C
C DISPLAY CONCEAL
C
600	IF (SINDEX.EQ.STATE_INITIAL) GOTO 9200
	IF (DISPLAY_CURRENT.EQ.0) GOTO 9000
	IF (DISPLAY_CURRENT.LE.2) THEN
	   IF (.NOT.WKOP(DISPLAY_CURRENT)) GOTO 9500
	ELSE
	   IF (.NOT.DISPLAY_EXISTS(DISPLAY_CURRENT)) GOTO 9400
	ENDIF
	CALL DISPLAY_CONCEAL(DISPLAY_CURRENT)
	GOTO 9999
C
C DISPLAY DELETE
C
700	IF (DISPLAY_CURRENT.EQ.0) GOTO 9000
	IF (DISPLAY_CURRENT.LE.2) GOTO 9300
	IF (.NOT.DISPLAY_EXISTS(DISPLAY_CURRENT)) GOTO 9999
	DISPLAY_EXISTS(DISPLAY_CURRENT) = .FALSE.
	IF (ANNODISP.EQ.DISPLAY_CURRENT) THEN
	   ANNODISP = 0
	   ANNOVER = 0
	ENDIF
C
	OK = ACT_DELETE_DISPLAY(DISPLAY_PTR(DISPLAY_CURRENT))
	IF (.NOT.OK) GOTO 9100
C
C if still in INITIAL state, then not actually created yet
	IF (SINDEX.NE.STATE_INITIAL) CALL GCLWK(DISPLAY_CURRENT)
C
C restore DISPLAY_PLANES to its proper value by simulating a
C DISPLAY NUMBER command
	DISPLAY_PLANES(DISPLAY_CURRENT) = 0
	DINTS(1) = DISPLAY_CURRENT
	GOTO 100
C
C DISPLAY OVERLAY overlay planes [offset]
C
800	IF (DNINT.LT.2) THEN
	   CALL MOAN(MSG_CMDLIBEOL,'command',
     &			DPRI(:DPRIL)//' '//DSEC(:DSECL) )
	   GOTO 9990
	ENDIF
C
	IF (DISPLAY_CURRENT.EQ.0) GOTO 9000
	IF (DISPLAY_CURRENT.LE.2) GOTO 9300
C
	IF (.NOT.DISPLAY_EXISTS(DISPLAY_CURRENT)) GOTO 9400
C 
	IF (DINTS(1).LE.0 .OR. DINTS(1).GT.MAXOVER) THEN
	   CALL MOAN(MSG_OVERRNG,1,MAXOVER)
	   GOTO 9990
	ENDIF
C
	IF (DINTS(2).LE.0) THEN
	   CALL MOAN(MSG_PLANES)
	   GOTO 9990
	ENDIF
C
	IF (DNINT.GE.3) THEN
	   IF (DINTS(3).LT.0) THEN
	      CALL MOAN(MSG_PLANEOFF)
	      GOTO 9990
	   ENDIF
	ELSE
	   DINTS(3) = -1
	ENDIF
C
C arguments basically OK, so try so create the overlay
	IF (OVERLAY_PLANES(DINTS(1),DISPLAY_CURRENT).GT.0) THEN
	   CALL MOAN(MSG_OVEXISTS,DINTS(1))
	   CALL LEARN(MSG_USEOVDEL)
	   GOTO 9990
	ENDIF
C
C create overlay
	OK = ACT_CREATE_OVERLAY(DISPLAY_PTR(DISPLAY_CURRENT),
     &			OVERLAY_PTR(DINTS(1),DISPLAY_CURRENT),
     &			DINTS(2),DINTS(3) )
	IF (.NOT.OK) THEN
	   CALL MOAN(MSG_BADOVER)
	   CALL LSL_PUTMSG(OK)
	   GOTO 9990
	ENDIF
C
	OVERLAY_CURRENT = DINTS(1)	! OVERLAY NUMBER it
	OVERLAY_PLANES(OVERLAY_CURRENT,DISPLAY_CURRENT) = DINTS(2)
	OVERLAY_OFFSET(OVERLAY_CURRENT,DISPLAY_CURRENT) = DINTS(3)
	GOTO 9999
C
C DISPLAY ERASE
C
900	IF (SINDEX.EQ.STATE_INITIAL) GOTO 9200
	IF (DISPLAY_CURRENT.EQ.0) GOTO 9000
	IF (DISPLAY_CURRENT.LE.2) GOTO 9300
	IF (.NOT.DISPLAY_EXISTS(DISPLAY_CURRENT)) GOTO 9400
	CALL GCLRWK(DISPLAY_CURRENT,GALWAY)
	GOTO 9999
C
C DISPLAY POSITION
C
1000	IF (DISPLAY_CURRENT.EQ.0) GOTO 9000
	IF (DISPLAY_EXISTS(DISPLAY_CURRENT)) GOTO 8900
	IF (DREALS(1).LT.0.0.OR.DREALS(1).GT.1.0.OR.
     &	    DREALS(2).LT.0.0.OR.DREALS(2).GT.1.0) THEN
	   CALL MOAN(MSG_ARGRNG)
	   GOTO 9990
	ENDIF
	DISPLAY_POS(1,DISPLAY_CURRENT) = DREALS(1)
	DISPLAY_POS(2,DISPLAY_CURRENT) = DREALS(2)
	GOTO 9999
C
C DISPLAY SIZE
C
1100	IF (DISPLAY_CURRENT.EQ.0) GOTO 9000
	IF (DISPLAY_EXISTS(DISPLAY_CURRENT)) GOTO 8900
	IF (DREALS(1).LE.0.0.OR.DREALS(1).GT.1.0.OR.
     &	    DREALS(2).LE.0.0.OR.DREALS(2).GT.1.0) THEN
	   CALL MOAN(MSG_ARGRNG)
	   GOTO 9990
	ENDIF
	DISPLAY_SIZE(1,DISPLAY_CURRENT) = DREALS(1)
	DISPLAY_SIZE(2,DISPLAY_CURRENT) = DREALS(2)
	GOTO 9999
C
C DISPLAY TITLE
C
1200	IF (DISPLAY_CURRENT.EQ.0) GOTO 9000
	IF (DISPLAY_EXISTS(DISPLAY_CURRENT)) GOTO 8900
	IF (DSTRIN) THEN
	   CALL SETAUX(%REF(DSTR),DSTRL)
	   DISPLAY_TITLEN(DISPLAY_CURRENT) =
     &		FINSTR(DISPLAY_TITLE(DISPLAY_CURRENT),'title')
	   IF (MOANED) THEN
	      DISPLAY_TITLEN(DISPLAY_CURRENT) = 0
	      GOTO 9990
	   ENDIF
	ELSE
	   DISPLAY_TITLEN(DISPLAY_CURRENT) = 0
	ENDIF
	GOTO 9999
C
C DISPLAY COLOURS
C
1300	IF (DISPLAY_CURRENT.EQ.0) GOTO 9000
	IF (DISPLAY_EXISTS(DISPLAY_CURRENT)) GOTO 8900
	IF (DNINT.EQ.0) THEN
	   DISPLAY_COLS(DISPLAY_CURRENT) = 0
	   IF (OVERLAY_SHARE.AND.DISPLAY_CURRENT.LE.2
     &			) DISPLAY_COLS(3-DISPLAY_CURRENT) = 0
	   GOTO 9999
	ENDIF
	IF (DINTS(1).LT.2.OR.
     &	    DINTS(1).GT.2**DISPLAY_PLANES(DISPLAY_CURRENT)) THEN
	   CALL MOAN(MSG_ARGRNG)
	   GOTO 9990
	ENDIF
	DISPLAY_COLS(DISPLAY_CURRENT) = DINTS(1)
	IF (OVERLAY_SHARE.AND.DISPLAY_CURRENT.LE.2
     &		) DISPLAY_COLS(3-DISPLAY_CURRENT) = DINTS(1)
	GOTO 9999
C
C DISPLAY BORDER
C
1400	IF (DISPLAY_CURRENT.EQ.0) GOTO 9000
	IF (DISPLAY_EXISTS(DISPLAY_CURRENT)) GOTO 8900
	IF (DINTS(1).LT.0.OR.DINTS(1).GT.1) THEN
	   CALL MOAN(MSG_ARGRNG)
	   GOTO 9990
	ENDIF
	DISPLAY_BORDER(DISPLAY_CURRENT) = DINTS(1).NE.0
	GOTO 9999
C
C DISPLAY LIMITS
C
1500	IF (DISPLAY_CURRENT.EQ.0) GOTO 9000
	IF (DISPLAY_CURRENT.LE.2) GOTO 9300
	IF (DNREA.EQ.0) THEN
	   DISPLAY_HADLIM(DISPLAY_CURRENT) = .FALSE.
	   GOTO 9999
	ENDIF
	IF (DNREA.LT.4) THEN
	   CALL MOAN(MSG_CMDLIBEOL,'command',
     &			DPRI(:DPRIL)//' '//DSEC(:DSECL) )
	   GOTO 9990
	ENDIF
	IF (DREALS(2).LE.DREALS(1).OR.DREALS(4).LE.DREALS(3)) THEN
	   CALL MOAN(MSG_ARGRNG)
	   GOTO 9990
	ENDIF
	DISPLAY_LIMITS(1,DISPLAY_CURRENT) = DREALS(1)
	DISPLAY_LIMITS(2,DISPLAY_CURRENT) = DREALS(2)
	DISPLAY_LIMITS(3,DISPLAY_CURRENT) = DREALS(3)
	DISPLAY_LIMITS(4,DISPLAY_CURRENT) = DREALS(4)
	DISPLAY_HADLIM(DISPLAY_CURRENT) = .TRUE.
	GOTO 9999
C
C DISPLAY CURSOR
C
1600	IF (DISPLAY_CURRENT.EQ.0) GOTO 9000
	IF (DISPLAY_CURRENT.LE.2) GOTO 9300
	IF (DINTS(1).LT.0.OR.DINTS(1).GT.1) THEN
	   CALL MOAN(MSG_ARGRNG)
	   GOTO 9990
	ENDIF
	DISPLAY_CURS(DISPLAY_CURRENT) = DINTS(1).EQ.1
	IF (SINDEX.NE.STATE_INITIAL.AND.DISPLAY_EXISTS(DISPLAY_CURRENT)
     &		) CALL DISPLAY_CURSOR(DISPLAY_CURRENT,
     &				DISPLAY_CURS(DISPLAY_CURRENT))
	GOTO 9999
C
8900	CALL MOAN(MSG_DISPEXISTS,DISPLAY_CURRENT)
	GOTO 9990
C
9000	CALL MOAN(MSG_NOCURDISP)
	CALL LEARN(MSG_USEDISPNUM)
	GOTO 9990
C
9100	CALL NASTY(MSG_INTERNALERROR)
	CALL LITES2_SIGNAL(OK)
	GOTO 9990
C
9200	CALL MSGCMD(MOAN,MSG_CMDNOTVALID)
	GOTO 9990
C
9300	CALL MSGCMD(MOAN,MSG_INVWORK)
	GOTO 9990
C
9400	CALL MOAN(MSG_DISPNOTEXISTS,DISPLAY_CURRENT)
	CALL LEARN(MSG_USEDISPCRE)
	GOTO 9990
C
9500	CALL MOAN(MSG_DISPNOTEXISTS,DISPLAY_CURRENT)
	GOTO 9990
C
9990	CALL IGNCMD
9999	RETURN
        END
