	LOGICAL FUNCTION NDLOOP
C
***     IDENT   12FE93
***     MODULE  NDLOOP
C
C       Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C       Written                                 CCB	21-FEB-1985
C
C	LITES2 cartographic editor END LOOP routine
C	Returns FALSE if successful
C
        IMPLICIT NONE
C
	INCLUDE 'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:EFNLUN/
***     PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:PACK/
C
***	COMMON/CMN:CB/
***	COMMON/CMN:CSTRCT/
***	COMMON/CMN:DEFINE/
***	COMMON/CMN:MAPS/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:OIIH/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:STRIKE/
C
C function called
	EXTERNAL	DELPAK
	LOGICAL		IFS_CB_WRITE
	LOGICAL		STRTFT
	LOGICAL		ADDZ
	LOGICAL		GEOG_TRANS_ARRAY
C
C w/s
	INTEGER		OPER
	INTEGER		NATT
	INTEGER		POINT
	REAL		TMPXY(2)
	REAL		DIST
	LOGICAL		FAR_MOVE_START,FAR_MOVE_END
C
	NDLOOP = .TRUE.			! assume failure
	FAR_MOVE_START = .FALSE.
	FAR_MOVE_END   = .FALSE.
C
	OPER = DEFINITION(P_MOVE)
	IF (OPER.EQ.0) OPER = DEFINITION(P_OTHER)
C
C Delete old segment (remove from screen)
	CALL LDSG(IHPAK,.TRUE.)
C
	DO 50 POINT=1,IHLST,IHLST-1	! for first and last point
C
C get the vertex into memory
	   CALL GETVRT(IHPAK,POINT,POINT)
C
C do we need to do a OPERATION FAR_MOVE?
	   IF (DEFINITION(P_FAR_MOVE) .NE. 0) THEN
	      DIST = (CSXY(1) - RIXY(1,1))**2 + (CSXY(2) - RIXY(2,1))**2
	      IF (POINT .EQ. 1) THEN
	         FAR_MOVE_START = (DIST .GT. FAR_MOVE_IFF**2)
	      ELSE
	         FAR_MOVE_END = (DIST .GT. FAR_MOVE_IFF**2)
	      ENDIF
	   ENDIF
C
C alter the vertex (but first get into the file coordinate system)
C (GETVRT has selected correct map)
	   IF (.NOT.DO_FLY_TRANS) THEN
	      TMPXY(1) = CSXY(1) - ORGXY(1)
	      TMPXY(2) = CSXY(2) - ORGXY(2)
	   ELSE
	      TMPXY(1) = CSXY(1)
	      TMPXY(2) = CSXY(2)
	      IF (.NOT.GEOG_TRANS_ARRAY(LITES2SYS,LITES2ZONE,LITES2PAR,
     &	                            LITES2UNIT,LITES2ORG,
     &	                            CURR_SYS,CURR_ZONE,CURR_PARAMS,
     &	                            CURR_UNIT,CURR_ORG,
     &	                            1,TMPXY)) GOTO 998
	   ENDIF
C
	   CALL IFS_CB_WRITE(CBH,CBD,TMPXY,2,COLHXY,CBROW,CBROW)
C
C alter the attributes - update them with Z cursor value.
	   NATT = RINATT
	   IF (ZOPT.AND.CSZI.NE.IFF_ABSENT) THEN
	      IF (ADDZ(CSZI,STR_MAX_ATTR,NATT,RIATTC,RIATTV(1,1)))
     &	                        GOTO 998
	   ENDIF
C
C alter the attributes - update them with OPERATION for MOVE, or OTHER
	   CALL LSTARR(OPER,NATT,RIATTC,RIATTV(1,1),.TRUE.)
C
C alter any attributes affected by the OPERATION for FAR_MOVE
           IF ((POINT.EQ.1.AND.FAR_MOVE_START) .OR.
     &	       (POINT.NE.1.AND.FAR_MOVE_END))
     &	      CALL LSTARR(DEFINITION(P_FAR_MOVE),NATT,RIATTC,
     &	                  RIATTV(1,1),.TRUE.)
C
	   IF (NATT.GT.0) THEN
	      IF (.NOT.IFS_CB_WRITE(CBH,CBD,RIATTV(1,1),
     &			NATT,RIATTC,CBROW,CBROW)) GOTO 100
	   ENDIF
	   CALL EIHWCB(CBH,CBD)			! edit in situ
50	CONTINUE
C
C update ACs if required
	IF (IHAC.GT.0.AND.DEFINITION(F_GEOCHANGE).GT.0)
     &	         CALL ACFSET(IHPAK,IHAC,DEFINITION(F_GEOCHANGE))
C
C set edited flag if required
	IF (EDTOPT) CALL SETEDT(IHPAK)
C
C update os map header?
	IF (OS_MH_EDIT) CALL OS_MH_UPDATE(FOPAK,FOFS)
C
C re-flush the feature
	CALL SCNFTR(IHPAK(PAKLNK), DELPAK)	! delete packs
	IHPAK(PAKFLG) = 0			! clear flags
	CALL FLUFTR(IHPAK)			! flush
	GOTO 997				! edited in situ
C
C Start off the new feature
100	CALL CPYPAK(PAKLEN,IHPAK,COIPAK)
	COIPAK(PAKFLG) = 0		! not deleted
	FLG_GEOCHANGE = .TRUE.		! a geometrical change
	IF (STRTFT(IHPAK,IHTC,IHFS,IHAC,IHTH)) GOTO 998
C
C get the first vertex to be altered into memory
	CALL GETVRT(IHPAK,1,1)
C
C set up attributes for point
	NATT = RINATT
	IF (ZOPT.AND.CSZI.NE.IFF_ABSENT) THEN
	   IF (ADDZ(CSZI,STR_MAX_ATTR,NATT,RIATTC,RIATTV(1,1))) GOTO 998
	ENDIF
	CALL LSTARR(OPER,NATT,RIATTC,RIATTV(1,1),.TRUE.)
C
C alter any attributes affected by the OPERATION for FAR_MOVE
        IF (FAR_MOVE_START)
     &	   CALL LSTARR(DEFINITION(P_FAR_MOVE),NATT,RIATTC,
     &	               RIATTV(1,1),.TRUE.)
C
C Output first point (replacing coordinates with cursor position)
	CALL ADCORD(CSXY,NATT,RIATTC,RIATTV(1,1))
C
C output the rest of the points
	CALL ADDVRT(IHPAK,2,IHLST-1,.FALSE.)
C
C get the last vertex to be altered into memory
	CALL GETVRT(IHPAK,IHLST,IHLST)
C
C set up attributes for point
	NATT = RINATT
	IF (ZOPT.AND.CSZI.NE.IFF_ABSENT) THEN
	   IF (ADDZ(CSZI,STR_MAX_ATTR,NATT,RIATTC,RIATTV(1,1))) GOTO 998
	ENDIF
	CALL LSTARR(OPER,NATT,RIATTC,RIATTV(1,1),.TRUE.)
C
C alter any attributes affected by the OPERATION for FAR_MOVE
        IF (FAR_MOVE_END)
     &	   CALL LSTARR(DEFINITION(P_FAR_MOVE),NATT,RIATTC,
     &	               RIATTV(1,1),.TRUE.)
C
C Output last point (replacing coordinates with cursor position)
	CALL ADCORD(CSXY,NATT,RIATTC,RIATTV(1,1))
C
C Terminate feature
	CALL ENDFT
C
C Remove the old object in hand completely
	CALL DELFT(IHPAK,IHEF)
C
997	NDLOOP = .FALSE.			! success
C
998	RETURN
        END
