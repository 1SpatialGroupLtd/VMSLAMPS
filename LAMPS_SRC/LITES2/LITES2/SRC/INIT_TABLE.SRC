C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-03-17 15:09:30.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION INIT_TABLE(ON,AST)
C
***	IDENT	17MR92
***	MODULE	INIT_TABLE
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	21-Nov-1984
C
C Description
C
C	LITES2 routine called by device dependent TABINIT to initialise
C	table monitor/direct table.
C
	IMPLICIT NONE
C
	INCLUDE '($SSDEF)'
***	PARAMETER/CMN:EFNLUN/
***	PARAMETER/CMN:MOANMESS/
C
***     COMMON/CMN:OPTION/		! options
***	COMMON/CMN:VAREFN/		! variable event flags
***	COMMON/CMN:WORKS/		! data about workstation
C
C arguments
	LOGICAL		ON		! turn on, or off
	EXTERNAL	AST		! table monitor event AST
C
C Functions called
	LOGICAL		INIT_TAB,CLOSE_TAB
	LOGICAL		GETABL		! initialise direct table
	INTEGER		TRNALL
	LOGICAL		AUXACT
C
C Local Variables
	INTEGER*4	NO		! space for this no of points
	PARAMETER	(NO=4)		! left in type ahead buffer
C
	CHARACTER*(*)	LOG
	PARAMETER	(LOG='LSL$MONITOR_TABLE')
C
	CHARACTER*(40)	TEMPNAME
	INTEGER*4	IERR,IER
	INTEGER*4	FREE,LAST
	LOGICAL		NOTYPAHD	! was line no-typeahead?
	LOGICAL		NOBRDCST	! was line no brdcast?
	INTEGER		I
C
	INTEGER		TIMEOUT
	PARAMETER	(TIMEOUT=25)	! i.e. quarter second
C
	INIT_TABLE = .FALSE.		! assume off
C
C for table monitor
C
	IF (ON) THEN				! turn on
	   IF (.NOT.INIT_TAB(TIMEOUT,IERR,AST)) THEN
	      CALL RETURN_EFN(TABPUK,TABSTR,TABERR,FREE,LAST)
	      TABFLG=FREE			! get new values for
	      TTIFLG=FREE+1			! wosp table and tt 
						! event flags
	      CLCFLG=FREE+2			! wait/^c event flag
	      TBFLG=FREE+3			! trackerball flag
	      FBFLG=FREE+4			! function button flag
	      TMOFLG=FREE+5			! TEK timeout flag
	      CSRFLG=FREE+6			! cursor timeout flag
	      DTBFLG=FREE+7			! not used at moment!
	      BUTFLG=FREE+8			! function button
	      AUXFLG=FREE+9			! auxiliary input
	      FOLFLG=FREE+10			! streaming input
	      GOTO 800				! sort out QIOs
C
C output error message for debugging purposes
	   ELSE
	      IF (DIAOPT) CALL LITES2_SIGNAL(IERR)
	   ENDIF
C
C so try for direct table read
	   CALL INFORM(MSG_MONNOTAV)	! try for direct table
	   CALL PING
C
C try to translate logical name for table line
	   IER=TRNALL(LOG,TEMPNAME)
	   IF (IER.NE.SS$_NORMAL) THEN
	      IF (IERR.GT.0) CALL LITES2_SIGNAL(IERR)
	      CALL MOAN(MSG_FLDTOTRANS,LOG)
	      CALL INFORM(MSG_TABNOTUSED)
	      GOTO 999
	   ENDIF
	   IF (GETABL(LOG,DTBCHN,NOTYPAHD,NOBRDCST,MXTYPC))THEN
C
C max typeahead count allows upto NO less than max possible table strings
	      MXTYPC=(MXTYPC/15-NO)*15
	      DTRON=.TRUE.
	      CALL INFORM(MSG_DTABUSED)
	      INIT_TABLE = .TRUE.			! now on
	   ENDIF
	ELSE				! turn off
	   IF (DTRON) THEN		! direct table
	      CALL SYS$DALLOC(LOG,)
	      CALL SYS$DASSGN(%VAL(DTBCHN))
	      DTRON = .FALSE.
	      DTBREAD = .FALSE.
	   ELSE
	      IF (CLOSE_TAB(IERR)) THEN
	         CALL MOAN(MSG_ERRCLSTABMON)
	         IF (IERR.GT.0) CALL LITES2_SIGNAL(IERR)
	      ENDIF
C
C put event flags back to what we started with
	      TABFLG=TABEFN			! get new values for
	      TTIFLG=TTIEFN			! wosp table and tt 
						! event flags
	      CLCFLG=WTEFN			! wait/^c event flag
	      TBFLG=TBEFN			! trackerball flag
	      FBFLG=FBEFN			! function button flag
	      TMOFLG=TMOEFN			! TEK timeout flag
	      CSRFLG=CSREFN			! cursor timeout flag
	      DTBFLG=DTBEFN			! not used at moment!
	      BUTFLG=BUTEFN			! function buttons
	      AUXFLG=AUXEFN			! auxiliary input
	      FOLFLG=FOLEFN			! stream input
C
	      STREAM = .FALSE.
	      GOTO 800
	   ENDIF
	ENDIF
	GOTO 999				! now off
C
C now any outstanding terminal read will be lost because EF has
C been changed
C
800	IF (TTASN) THEN			! if channel assigned
	   CALL SYS$CANCEL(%VAL(TTICHN))	! cancel any QIO
	   TTIOSB(1) = 0			! clear cancel status
	   TTREAD=.FALSE.			! request new QIO
	ENDIF
C
C similarily for auxiliary input
	IF (AUXACT()) THEN
	   DO 810, I=1,AUX_LINES
	      IF (AUX_ASN(I)) THEN
	         CALL SYS$CANCEL(%VAL(AUX_CHANNEL(I)))
	         AUXIOSB(1,I) = 0		! clear cancel status
	      ENDIF
	      IF (AUX_ACTIVE(I)) AUX_SERVICED(I) = .TRUE.
810	   CONTINUE
	   AUX_READ = .FALSE.		! request new QIO
	ENDIF
C
C and clear the new CTRL/C event flag
	CALL SYS$CLREF(%VAL(CLCFLG))
C
	INIT_TABLE = ON
C
999	RETURN
	END
