	LOGICAL FUNCTION LEGEND(ACTION,MASK,OFFSET,NUM_BOXES,XPROP,YPROP)
C
***	IDENT	23MR92
***	MODULE	LEGEND
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	4-Feb-1992
C
C	To either calculate the size for a legend, or to draw it,
C 	depending on value of ACTION.
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:ACS/
C
***	COMMON/LSL$CMNFRT:FRTACD/
***	COMMON/CMN:IMAGE/
***	COMMON/CMN:LABELS/
***	COMMON/CMN:OVERLAY/
C
C arguments
	INTEGER		ACTION
	INTEGER		MASK  		! bit plane mask to draw into
	INTEGER		OFFSET		! offset fr overlay
	INTEGER		NUM_BOXES	! number of boxes drawn
	REAL		XPROP		! proportion of display legend
	REAL		YPROP		! takes up.
C
C workspace
	INTEGER		IC
	EQUIVALENCE	(IC,IMAGE_CURRENT)
C
	INTEGER		BAND
	INTEGER		COLOUR
	INTEGER		COUNT
	REAL		BOTTOM,TOP
	INTEGER		I
	INTEGER		STEP
	INTEGER		RANGE
	INTEGER		MAX_BOXES
	INTEGER		MODULUS
	INTEGER		PLANES,TOP_COLOUR
C
	INTEGER*4	STR(2)  		! dummy string descriptor
	DATA		STR/2*0/
C
	EXTERNAL	MOAN
C
C functions
	LOGICAL		HADBREAK
C
C assume failure
	LEGEND = .TRUE.
C
	NUM_BOXES = 0
C
C get maximum colour for this overlay
	PLANES = OVERLAY_PLANES(OVERLAY_CURRENT,DISPLAY_CURRENT)
	TOP_COLOUR = 2**PLANES - 1
C
C if not classifying images, then number of boxes depends on bits being used
	IF (.NOT.IMAGE_CLASSIFY(IC)) THEN
	   IF (ACTION.EQ.1) THEN
	      STEP = 2**IMAGE_BASE(IC)
	      RANGE = 2**IMAGE_NUMBER(IC) * STEP
	      MAX_BOXES = 1.0/ANNOLEGEND_YSIZ
C
C number of boxes would like to output
	      MODULUS = RANGE/STEP
C
C if more than maximum, whichth boxes do we want?
	      IF (MODULUS.GT.MAX_BOXES) THEN
	         MODULUS = MODULUS/MAX_BOXES + 1
	      ELSE
	         MODULUS = 1
	      ENDIF
	   ENDIF
C
	   DO 100, I = 1,RANGE/STEP
	      IF (MOD(I-1,MODULUS).EQ.0) THEN
	         BOTTOM = (I-1)*STEP
	         TOP = BOTTOM + STEP -1
	         COLOUR = I - 1
	         COLOUR = MOD(COLOUR,TOP_COLOUR + 1)
	         CALL LEGEND_BLOCK(ACTION,NUM_BOXES,BOTTOM,TOP,COLOUR,STR,
     &	                           MASK,OFFSET,XPROP,YPROP)
	      ENDIF
100	   CONTINUE
	ELSE
	   BAND = MIN(1,IMAGE_NBAND(IC))	! if no bands set, = 0
	   BOTTOM = IMAGE_RANGE(1,IC)
	   COUNT = 0
C
120	   CONTINUE
C
C calculate next step boundary from COUNT
	   TOP = (COUNT+1)*IMAGE_STEP(IC) + IMAGE_RANGE(1,IC)
C
C calculate colour for this step
	   COLOUR = COUNT + IMAGE_FIRST(IC)
	   COLOUR = MOD(COLOUR,TOP_COLOUR + 1)
C
C is there a band starting between BOTTOM and TOP?

C (need 2 IF's to prevent SUBRNGing)
	   IF (BAND.GT.0) THEN
	      IF (IMAGE_BAND(1,BAND,IC).LT.TOP) THEN
C
C there is, so draw a box from current position to bottom of this band,
C if the band does not start at the bottom of the step
	         TOP = IMAGE_BAND(1,BAND,IC)
C
C draw a box if required
	         IF (TOP.GT.BOTTOM) THEN
	            CALL LEGEND_BLOCK(ACTION,NUM_BOXES,BOTTOM,TOP,COLOUR,
     &	                              STR,MASK,OFFSET,XPROP,YPROP)
	         ENDIF
C
C now draw a box for this band
130	         BOTTOM = TOP
	         TOP = IMAGE_BAND(2,BAND,IC)
	         COLOUR = IMAGE_BANDCOL(BAND,IC)
	         COLOUR = MOD(COLOUR,TOP_COLOUR + 1)
	         CALL LEGEND_BLOCK(ACTION,NUM_BOXES,BOTTOM,TOP,COLOUR,
     &	                       IMAGE_BANDSTR(1,BAND,IC),MASK,OFFSET,
     &	                       XPROP,YPROP)
C
C reset band
	         BAND = BAND + 1
	         IF (BAND.GT.IMAGE_NBAND(IC)) THEN
	            BAND = 0
	         ELSEIF (IMAGE_BAND(1,BAND,IC).EQ.TOP) THEN
C
C if there is another adjacent band, draw block for it
	            GOTO 130
	         ENDIF
C
C recalculate COUNT from current top. This gives us current step
	         COUNT = (TOP - IMAGE_RANGE(1,IC))/IMAGE_STEP(IC)
	         GOTO 140		! need this jump because of 2 IF blocks
	      ENDIF
	   ENDIF
C
C next block is (part of) a step
	   CALL LEGEND_BLOCK(ACTION,NUM_BOXES,BOTTOM,TOP,COLOUR,
     &	                        STR,MASK,OFFSET,XPROP,YPROP)
	   COUNT = COUNT + 1
C
C reset, and go onto next block, if not finished
140	   CONTINUE
	   BOTTOM = TOP
	   IF (HADBREAK()) GOTO 9999
	   IF (TOP.LT.IMAGE_RANGE(2,IC)) GOTO 120
	ENDIF
C
C success
	LEGEND = .FALSE.
C
9999	RETURN
	END
