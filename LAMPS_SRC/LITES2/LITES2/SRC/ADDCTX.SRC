C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-10-13 16:04:28.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE ADDCTX(CTXD,HOME)
C
***	IDENT	13OC89
***	MODULE	ADDCTX
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author Ron Russell					29-Oct-1986
C
C To insert an text component into the CTX data structure, descriptor CTXD
C Data about the text (TH,RO,ST,TS entries) must be already present in 
C CTXBUFL and the text itself should be in CTXTEXT, with its length in
C the descriptor in CTXBUFL
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:CTXS/
C
***	COMMON/CMN:CTXS/
C
C arguments
	INTEGER*4	CTXD(CTXDLEN)	! CTX desriptor block
	LOGICAL		HOME		! true when this is home text
					! component
C
C function called
	LOGICAL		GET_MEM
C
C workspace
	INTEGER*4	ADDR		! for address of new CTX
C 
C Get address for new entry
	IF (GET_MEM(CTX_ZONE,ADDR,CTXLENB)) GOTO 999	! failed
C
C Initialise dynamic string descriptor
	CALL INIDSC(%VAL(ADDR + CTX_O_DESC))
C
C this has no attributes, so set to 0
	CALL PUTLNG(0,%VAL(ADDR + CTX_O_ATTR))
C
C now construct entry to put in it
	IF (CTXD(CTXD_FSTCTX).EQ.0) THEN
C
C No existing first CTX, so this one is the first
	   CTXD(CTXD_FSTCTX) = ADDR
	   CTXD(CTXD_LSTCTX) = 0
	ENDIF
C
C Chain CTX after last CTX (next pointer is in first slot)
	IF (CTXD(CTXD_LSTCTX).NE.0) THEN
	   CALL PUTLNG(ADDR,%VAL(CTXD(CTXD_LSTCTX)))
	ENDIF
C
C Now set pointers in buffer itself
	CTXBUFL(CTX_L_PREPTR) = CTXD(CTXD_LSTCTX)   ! pointer to previous
	CTXD(CTXD_LSTCTX) = ADDR		! new last CTX
	CTXBUFL(CTX_L_NXTPTR) = 0		! pointer to next
C
	CTXD(CTXD_NCTX) = CTXD(CTXD_NCTX)+1	! count it
	CALL MOVCTX(CTXBUFL,%VAL(ADDR))	! insert in CTX sector
	CURCTX = ADDR			! this CTX now current
	CTXD(CTXD_CUR) = ADDR		! and current for this CTXD
	IF (HOME) CTXD(CTXD_HOME) = ADDR
C
999	RETURN
	END
