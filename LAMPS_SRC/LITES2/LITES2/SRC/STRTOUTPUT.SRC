C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-01-26 11:55:12.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION STRTOUTPUT(MULTIPLE,LUN,OFFSET)
C
***	IDENT   26JA96
***	MODULE  STRTOUTPUT
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Written					RWR	3-Dec-1989
C
C	To check if there is more than one file selected for output, and
C	if so, open a temporary file to take output from them, and them
C	and write out header of files
C	Returns TRUE if error opening output file
C
        IMPLICIT NONE
C
***	PARAMETER/CMN:EFNLUN/
***     PARAMETER/CMN:MOANMESS/
C
C Common Blocks
***	COMMON/CMN:CNSTRN/
***	COMMON/LSL$CMNLSL:EXPC/
***	COMMON/LSL$CMNIFF:IFFHAN/
***	COMMON/LSL$CMNIFF:MD2DES/
***	COMMON/LSL$CMNIFF:MHDEF/
***	COMMON/LSL$CMNIFF:MHOSGB/
***	COMMON/CMN:MAPS/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:TRANSFORM/
C
C arguments
	LOGICAL		MULTIPLE	! (output) More than one file
	INTEGER		LUN		! Lun to open file on
	REAL		OFFSET(2)	! offset (in LITES2 space) for
					! this file
	REAL		TMPCPT(2,4)
C
C w/s
	LOGICAL		HAD_ONE
	REAL*8		SCLE
	REAL*8		CPTS(4,4)
	REAL		CPTS4(4,4)
	INTEGER		I,J
	REAL		CFT(10,2)		! for CC entry
	CHARACTER*9	DTE
	CHARACTER*8	TME
C
C functions
	LOGICAL		GEOG_TRANS_ARRAY
C
C init things
	DATA CFT/0,1,0,7*0,0,0,1,7*0/
C
	STRTOUTPUT = .FALSE.		! no error yet
C
	HAD_ONE = .FALSE.
	MULTIPLE = .FALSE.
	DO 100,I = 0,MAPTOP
	   IF (.NOT.MAP_EXIST(I)) GOTO 100
	   IF (.NOT.SELOUT.OR.SAMAPS.OR.MAPSEL(I)) THEN
C
	      IF (DO_FLY_TRANS) THEN
	         DO 10, J = 1,4
	            TMPCPT(1,J) = CRNPTS(1,J,I)
	            TMPCPT(2,J) = CRNPTS(2,J,I)
10	         CONTINUE
	         IF (.NOT.GEOG_TRANS_ARRAY(MAP_SYS(I),MAP_ZONE(I),
     &	                                 MAP_PARAMS(1,I),MAP_UNIT(I),
     &	                                 MAPORG(1,I),
     &	                                 LITES2SYS,LITES2ZONE,
     &	                                 LITES2PAR,LITES2UNIT,LITES2ORG,
     &	                                 4,TMPCPT)) THEN
	            STRTOUTPUT = .TRUE.
	            GOTO 999
	         ENDIF
	      ENDIF
C
	      IF (HAD_ONE) THEN
	         MULTIPLE = .TRUE.
	         IF (.NOT.DO_FLY_TRANS) THEN
	            EXIT_ORGXY(1) = MIN(EXIT_ORGXY(1),MAPORG(1,I))
	            EXIT_ORGXY(2) = MIN(EXIT_ORGXY(2),MAPORG(2,I))
CCC Use corner points of first map
CCC Any attempt to combine them needs to be more sophisticated
CCC than this - must choose from original points - not X from
CCC some and Y from others.
CCC	            DO 20, J = 1,4
CCC	               CPTS(1,J) = MIN(CPTS(1,J),CRNPTS(1,J,I)+MAPORG(1,I))
CCC	               CPTS(2,J) = MAX(CPTS(2,J),CRNPTS(2,J,I)+MAPORG(2,I))
CCC20	            CONTINUE
	         ELSE
CCC	            DO 30, J = 1,4
CCC	               CPTS4(1,J) = MIN(CPTS4(1,J),TMPCPT(1,J))
CCC	               CPTS4(2,J) = MAX(CPTS4(2,J),TMPCPT(2,J))
CCC30	            CONTINUE
	         ENDIF
	      ELSE
	         HAD_ONE = .TRUE.
	         IF (.NOT.DO_FLY_TRANS) THEN
	            SCLE = MAPSCL(I)
	            EXIT_ORGXY(1) = MAPORG(1,I)
	            EXIT_ORGXY(2) = MAPORG(2,I)
	            DO 40, J = 1,4
	               CPTS(1,J) = CRNPTS(1,J,I)+MAPORG(1,I)
	               CPTS(2,J) = CRNPTS(2,J,I)+MAPORG(2,I)
40	            CONTINUE
	         ELSE
	            EXIT_ORGXY(1) = LITES2ORG(1)
	            EXIT_ORGXY(2) = LITES2ORG(2)
	            SCLE = LITES2SCL
	            DO 50, J = 1,4
	               CPTS4(1,J) = TMPCPT(1,J)
	               CPTS4(2,J) = TMPCPT(2,J)
50	            CONTINUE
	         ENDIF
	      ENDIF
	   ENDIF
100	CONTINUE
C
C if we have a single named map transform the coordinates, if the flag
C is set, by pretending it is a multiple output
	IF (DO_FLY_TRANS .AND. PROJ_TRANS_OUTPUT .AND. HAD_ONE )
     &	   MULTIPLE = .TRUE.
C
	IF (.NOT.MULTIPLE) GOTO 999		! finished
C
	IF (.NOT.DO_FLY_TRANS) THEN
C
C get the values to write to file
C real*8 values are in LITES2 space
C get corner points in new file coordinate system
	   DO 200, J = 1,4
	      DO 200, I = 1,2
	         CPTS4(I,J) = CPTS(I,J) - EXIT_ORGXY(I)
	         CPTS4(I+2,J) = CPTS4(I,J)
200	      CONTINUE
	   CONTINUE
C
	   OFFSET(1) = EXIT_ORGXY(1)		! r*8 -> r*4
	   OFFSET(2) = EXIT_ORGXY(2)
C
C origin offset
	   EXIT_ORGXY(1) = EXIT_ORGXY(1) + LITES2ORG(1)
	   EXIT_ORGXY(2) = EXIT_ORGXY(2) + LITES2ORG(2)
	ELSE
	   DO 210, J = 1,4
	      DO 210 I = 1,2
	         CPTS4(I+2,J) = CPTS4(I,J)
210	      CONTINUE
	   CONTINUE
	ENDIF
C
	CALL IFFOPN(LUN,'LSL$LITES2WORK:OUTPUT.TMP',,,'Merged')
	IF (IERCD .NE. 0) THEN
	   CALL NASTY(MSG_ERROPIMG,'IFF','Temporary output file')
	   STRTOUTPUT = .TRUE.
	   GOTO 999
	ENDIF
C
C set input revision level
	CALL IFFIRV(1)
C
C write out RANGE - rubbish at moment - will be rewritten by TDYIFF
	CALL IFFRA(CPTS4)
C
C history entry
	CALL IFFHI
C
C MH entry - Completely unset at present!
	IF (CUST.LE.2) THEN
	   CALL VIOCLR(MHARR,2*MHLEN)
	   CALL IFFMH(MHARR,MHLEN)
	ELSE
	   CALL VIOCLR(MH2ARR,2*MH2LEN)
	   CALL IFFMH(MH2ARR,MH2LEN)
	ENDIF
C
C map descriptor
	IF (MD_OK) THEN
	   CALL CPYPAK(MD2LEN/2,FIRSTMD2ARR,MD2ARR)
	ELSE
	   CALL VIOCLR(MD2ARR,2*MD2LEN)
	   MATV2 = 2			! version 2, but unset
	ENDIF
C
	MD2LOC(1) = EXIT_ORGXY(1)	! origin offset - SW corner of area
	MD2LOC(2) = EXIT_ORGXY(2)
	MD2SCL    = SCLE
C
	CALL IFFMD(MD2ARR,MD2LEN)
C
C get date and time
	CALL DATE(DTE)
	CALL TIME(TME)
	CALL EXPAND('Created by LITES2 by merging files on %S at %S',
     &	               DTE,TME)
C
C and write them to NS entry
	CALL IFFNS(EXPBUF)
C
C CC entry
	CALL IFFCC(CFT)
C
C corner points are extremes of existing points
	CALL IFFCP(CPTS4)
C
C rest will be written by CMBNEIFF
C
999	RETURN
        END
