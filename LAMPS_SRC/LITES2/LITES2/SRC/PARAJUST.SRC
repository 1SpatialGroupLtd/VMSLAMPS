C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-05-09 12:27:28.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION PARAJUST(JUST_PROP)
C
***	IDENT   09MY96
***	MODULE  PARAJUST
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Written                                 RWR	 Feb-1988
C
C	Justifies a paragraph of text
C	returns .TRUE. for failure, .FALSE. for success
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:ACS/
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:CTXS/
***	PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:PACK/
***	PARAMETER/LSL$CMNLSL:READSTR/
C
***	COMMON/CMN:CTXS/
***	COMMON/LSL$CMNFRT:FRTCOM/
***	COMMON/LSL$CMNFRT:FRTTRI/
***	COMMON/CMN:OIIH/
***	COMMON/CMN:PARA/
C
C argument
	REAL		JUST_PROP	! justification amount
C
C w/s
	EXTERNAL	MOAN,NASTY
C
	REAL		WORD_LEN	! the length of the word
	INTEGER		INPUT_BUF_ADDR
	INTEGER*2	INPUT_BUF_LEN	! length of input buffer
	REAL		AUX(AUXLEN)	! auxiliary array
	BYTE		CH
	INTEGER		SUBTEXT_COUNT
	REAL		PREVXY(2)
	REAL		THISXY(2)
	REAL		X
	LOGICAL		JUST_HAD_SPACE
C
C functions called
	INTEGER	READSTR
	LOGICAL RDCHS
	LOGICAL GENAUX
	INTEGER LIB$EXTZV
	LOGICAL	PARALINE
	LOGICAL NEWPARALINE
C
C assume success
	PARAJUST = .FALSE.
C
C*******************************************************************
C
C get ready to read from text in first CTXD
	CALL STR$ANALYZE_SDESC(%VAL(COICTXD(CTXD_CUR)+CTX_O_DESC),
     &	            INPUT_BUF_LEN,INPUT_BUF_ADDR)
	CALL SETAUX(%VAL(INPUT_BUF_ADDR),INPUT_BUF_LEN)
C
	SUBTEXT_COUNT = 0
	PREVXY(1) = CTXBUFR(CTX_L_X)
	PREVXY(2) = CTXBUFR(CTX_L_Y)
C
C loop that reads words from input CTX, and outputs them (ultimately
C to PARA_CTXD)
10	CONTINUE
C
C are we at end of this CTX
	IF (RDCHS(CH)) THEN
C
C are there any more CTXs
	   IF (COICTXD(CTXD_CUR).EQ.COICTXD(CTXD_LSTCTX)) GOTO 100
C
C get ready to read from next one
	   CALL PUTLNG(%VAL(COICTXD(CTXD_CUR)+CTX_O_NXTPTR),
     &	               COICTXD(CTXD_CUR))
	   CALL STR$ANALYZE_SDESC(%VAL(COICTXD(CTXD_CUR)+CTX_O_DESC),
     &	               INPUT_BUF_LEN,INPUT_BUF_ADDR)
	   CALL SETAUX(%VAL(INPUT_BUF_ADDR),INPUT_BUF_LEN)
C
C get new CC and height
	   CALL PUTLNG(%VAL(COICTXD(CTXD_CUR)+CTX_O_TH),
     &	                     CTXBUFL(CTX_L_TH))
	   CTXBUFW(CTX_W_TS1) = LIB$EXTZV(0,16,
     &	               %VAL(COICTXD(CTXD_CUR)+CTX_O_TS))
C
C reset PARA_DUMPAK
	   PARA_DUMPAK(PAKFC) = CTXBUFW(CTX_W_TS1)
C
C save this CTXs coordinates
	   CALL PUTLNG(%VAL(COICTXD(CTXD_CUR)+CTX_O_X),THISXY(1))
	   CALL PUTLNG(%VAL(COICTXD(CTXD_CUR)+CTX_O_Y),THISXY(2))
C
C is this the start of a new line?
	   IF (PARA_LINE_ADDR .GT. 0) THEN
	      IF (NEWPARALINE(PREVXY,THISXY,PARA_LINE_LEN)) THEN
C
C (add on the spacing for the last subtext to make it appear to lie at
C end of line exactly)
	         X = SIGN(PARA_FILL_WIDTH,PARA_LINE_LEN) - PARA_LINE_LEN +
     &				AUX(SIZI)*SIGN(JUST_PROP,PARA_LINE_LEN)
C
C and subtract any overhang, if this subtext is italic
	         IF (FRTSC.LT.0) X = X - TRIA2*AUX(SIZI)
C 
C if line too long (or has only one subtext), then output as it is,
C otherwise compute amount to fill line
	         IF (SUBTEXT_COUNT.EQ.0 .OR.
     &			ABS(PARA_LINE_LEN-X).GE.ABS(PARA_LINE_LEN)) THEN
	            X = PARA_BLANK_LEN
	         ELSE
	            X = X/SUBTEXT_COUNT
C
C set the full length of line 
	            PARA_LINE_LEN = SIGN(PARA_FILL_WIDTH,PARA_LINE_LEN)
	         ENDIF
C
C output line
	         IF (PARALINE(PARA_CTXD,X)) THEN
	            CALL MOAN(MSG_FTABANDONED)
	            CALL ABANDN
	            GOTO 998
	         ENDIF
C
C reinitialise line
	         PARA_LINE_ADDR = 0
	         PARA_LINE_LEN = 0.0
	         SUBTEXT_COUNT = 0
     	      ENDIF
	   ENDIF
C
C remember this point
	   PREVXY(1) = THISXY(1)
	   PREVXY(2) = THISXY(2)
	ELSE
	   CALL BSCH
	ENDIF
C
C get a word from the input CTX
	CTXBUFW(CTX_W_TXTLEN) = CTXMAX
	CTXBUFW(CTX_W_TXTLEN) = READSTR(CTXBUFL(CTX_L_DESC),0,
     &	                              ON_SPACE,.TRUE.,)	
C
C ignore spaces and tabs
	IF (CTXBUFW(CTX_W_TXTLEN) .LE. 0) THEN
	   JUST_HAD_SPACE = .TRUE.
	   GOTO 10
	ENDIF
	JUST_HAD_SPACE = .FALSE.
C
C find the length of this word 
	IF (GENAUX(1,PARA_CURRXY,		! XY not used
     &	          AUX,
     &	          CTXBUFL(CTX_L_DESC),
     &	          CTXBUFL(CTX_L_RO),
     &	          CTXBUFL(CTX_L_TH),
     &	          PARA_DUMPAK,
     &	          %VAL(COICTXD(CTXD_CUR)+CTX_O_TS))) THEN
	   CALL MOAN(MSG_FTABANDONED)
	   CALL ABANDN
	   GOTO 998
	ENDIF
	WORD_LEN = AUX(MAXXI) - AUX(MINXI)
C
C add it to PARA_CTXD
	CALL ADDCTX(PARA_CTXD,.FALSE.)
C
C add on the length of a blank - if not the first subtext of a line
	IF (PARA_LINE_ADDR.GT.0) THEN
	   SUBTEXT_COUNT = SUBTEXT_COUNT+1
	ENDIF
C
C if this is first of line, remember its address
	IF (PARA_LINE_ADDR.LE.0) PARA_LINE_ADDR = PARA_CTXD(CTXD_CUR)
C
C and its length to the total length
	PARA_LINE_LEN = PARA_LINE_LEN + WORD_LEN
C
C go and get next word
	GOTO 10
C
C ================================================================
C
C got to end of composite text
C
100	CONTINUE
C
C if this is first of line, remember its address
	IF (.NOT.JUST_HAD_SPACE) THEN
	   IF (PARA_LINE_ADDR.LE.0) PARA_LINE_ADDR = PARA_CTXD(CTXD_CUR)
C
C output this line to PARA_CTXD
	   IF (PARALINE(PARA_CTXD,PARA_BLANK_LEN)) THEN
	      CALL MOAN(MSG_FTABANDONED)
	      CALL ABANDN
	      GOTO 998
	   ENDIF
	ENDIF
	GOTO 999
C
998	PARAJUST = .TRUE.
C
999	CONTINUE
	RETURN
	END
