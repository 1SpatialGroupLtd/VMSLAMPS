C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-05-09 12:18:18.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE OUTARCS(REG,CODE)
C
***	IDENT	09MY96
***	MODULE	OUTARCS
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	 26-Mar-1987
C
C Description
C
C	Subroutine that outputs a series of arcs, from a list of angles
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:ACS/
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:CONSTS/
***	PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:PACK/
***	PARAMETER/CMN:REGPAR/
C
***	COMMON/CMN:ATTBTS/
***	COMMON/CMN:CSTRCT/
***	COMMON/LSL$CMNFRT:FRTCOM/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:OIIH/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:REGCMN/
***	COMMON/CMN:STRIKE/
C
C Arguments
C (input)
C
	INTEGER		REG	! region to clip to
	INTEGER*4	CODE	! =1 create features inside region
				! =2 create features outside region
				! =3 create features inside and outside
				!    region
C
C functions
	LOGICAL		PINREG,STRTFT,FRTFND,CLAREG
	INTEGER		GENNF
C
C Local Variables
	INTEGER*4	CURPPT		! counter
	INTEGER*4	LSTPPT
	REAL		STAANG,ENDANG	! angles to start and end of arc
	REAL		MIDANG		! angle to centre of arc
	REAL		XY(2)		! point
	INTEGER*2	FS(4)		! FS entry to use
	LOGICAL		FIRST
	INTEGER		GT 		! graphical type
	INTEGER		FC 		! feature code
	LOGICAL		INSIDE
	REAL		DANG
	INTEGER		I		! counter
	REAL		DIR
	REAL		ZP
C
	GT = FOPAK(PAKGT)
	FC = FOPAK(PAKFC)
C
	IF (FOAUX(TOTI).GE.0.0) THEN
	   DIR = 1.0
	ELSE
	   DIR = -1.0
	ENDIF
C
C if GT is full circle, check that ARCFC is set up correctly
	IF (GT.EQ.FULTYP) THEN
C
C Does arc feature code exist
	   IF (FRTFND(ARCFC)) THEN
	      CALL MOAN(MSG_BADCODE,ARCFC)
	      CALL LEARN(MSG_EXPLAINARC1)
	      CALL LEARN(MSG_EXPLAINARC2)
	      CALL LEARN(MSG_SETARC)
	      GOTO 900
	   ENDIF
C
C check that arc FC
	   IF (FRTGT.NE.CIRTYP) THEN
	      CALL MOAN(MSG_FCNOTARC,ARCFC)
	      CALL LEARN(MSG_EXPLAINARC1)
	      CALL LEARN(MSG_EXPLAINARC2)
	      CALL LEARN(MSG_SETARC)
	      GOTO 900
	   ENDIF
C
C reset GT and FC
	   GT = FRTGT
	   FC = ARCFC
	ENDIF
C
C if dealing with full circle, reset start to first intersection
	IF (ABS(FOAUX(TOTI)).GE.TWOPI) THEN
C 
C reset start of arc to be at first intersection
	   CALL PUTLNG(%VAL(LSTINT),CURPPT)
	   CALL PUTLNG(%VAL(CURPPT+OFFX),STAANG)
	   FOAUX(STAI) = FOAUX(STAI) + STAANG
C
C delete list of PPTs
	   CALL DELPPT(CURPPT)
	   LSTINT = 0
C
C and recreate it starting with new start point
	   INSIDE = .TRUE.
	   IF (.NOT.CLAREG(FOAUX,FOARCBX,REG,INSIDE)) GOTO 900
	ENDIF
C
C initialise
	FIRST = .TRUE.			! no arcs output yet
	DANG = LINWDTH/FOAUX(RADI)*DIR
C
C is first point of arc inside, or outside (doesn't matter for CODE=3)
	IF (CODE.NE.3) THEN
	   I = 0
   10	   CONTINUE
	   STAANG = FOAUX(STAI) + I*DANG
	   XY(1)=FOAUX(XCENI)+FOAUX(RADI)*COS(STAANG)
	   XY(2)=FOAUX(YCENI)+FOAUX(RADI)*SIN(STAANG)
	   IF (PINREG(XY,REG,INSIDE)) THEN	! try a bit along arc
	      I = I+1
	      IF (ABS(I*DANG).GT.ABS(TOTI)) GOTO 20
	      GOTO 10
	   ENDIF
	ENDIF
C
C delete feature from screen
   20	CONTINUE
	CALL LDSG(FOPAK,.TRUE.)
C
C get pack for construction
	CALL CPYPAK(PAKLEN,FOPAK,COIPAK)
	DO 30, I=1,4
	   FS(I) = FOFS(I)
   30	CONTINUE
C
C set correct FC and GT
	FS(1) = FC
	COIPAK(PAKFC) =	FC
	COIPAK(PAKGT) = GT
C
C initialise loop
	CALL PUTLNG(%VAL(LSTINT+OFFX),STAANG)
	CALL PUTLNG(%VAL(LSTINT),CURPPT)
C
C loop
  100	CONTINUE
C
C can only use current segment number and FSN for first arc
	IF (.NOT.FIRST) THEN
	   COIPAK(PAKSEG) = 0
	   COIPAK(PAKFSN) = GENNF(COIPAK)
	ELSE
	   FIRST = .FALSE.
	ENDIF
C
C set limbo flags
	IF (CODE.EQ.1.AND.INSIDE.OR.
     &	    CODE.EQ.2.AND..NOT.INSIDE.OR.
     &	    CODE.EQ.3) THEN
	   COIPAK(PAKFLG) = 0			! create visible
	ELSE
	   COIPAK(PAKFLG) = LIMFLG		! create deleted
	ENDIF
C
C get angle to end of feature
	CALL PUTLNG(%VAL(CURPPT+OFFX),ENDANG)
C
C check that arc is greater than a line width
	IF (ABS(STAANG-ENDANG).LT.ABS(DANG)) GOTO 110
C
C start feature
	IF (STRTFT(FOPAK,FOTC,FS,FOAC,FOTH)) GOTO 900
	CONFST = .FALSE.			! fetaure started
C
C first point
	XY(1) = FOAUX(XCENI) + FOAUX(RADI)*COS(STAANG+FOAUX(STAI))
	XY(2) = FOAUX(YCENI) + FOAUX(RADI)*SIN(STAANG+FOAUX(STAI))
	CONATT = 0
C
C interpolate Z value for this point
	IF (ZOPT.AND.FOC_DEFINED) THEN
	   CALL PLANE_INTERPL(XY,FOCOEFFS,ZP)
	   CALL ADDZ(ZP,MXATTR,CONATT,COATTC,COATTV)
	ENDIF
C
C add point (Note: - no operations on attributes. Arcs are thought not
C to have attributes)
	CALL ADCORD(XY,CONATT,COATTC,COATTV)
C
C middle point
C
	IF (GT.EQ.CLOTYP.OR.GT.EQ.ANTTYP) THEN	! want centre
	   XY(1) = FOAUX(XCENI)
	   XY(2) = FOAUX(YCENI)	
	ELSE
	   MIDANG = (STAANG+ENDANG)*0.5 + FOAUX(STAI)
	   XY(1) = FOAUX(XCENI) + FOAUX(RADI)*COS(MIDANG)
	   XY(2) = FOAUX(YCENI) + FOAUX(RADI)*SIN(MIDANG)
	ENDIF
	CONATT = 0
C
C interpolate Z value for this point
	IF (ZOPT.AND.FOC_DEFINED) THEN
	   CALL PLANE_INTERPL(XY,FOCOEFFS,ZP)
	   CALL ADDZ(ZP,MXATTR,CONATT,COATTC,COATTV)
	ENDIF
C
C add point (Note: - no operations on attributes. Arcs are thought not
C to have attributes)
	CALL ADCORD(XY,CONATT,COATTC,COATTV)
C
C end point
C
	XY(1) = FOAUX(XCENI) + FOAUX(RADI)*COS(ENDANG+FOAUX(STAI))
	XY(2) = FOAUX(YCENI) + FOAUX(RADI)*SIN(ENDANG+FOAUX(STAI))
	CONATT = 0
C
C interpolate Z value for this point
	IF (ZOPT.AND.FOC_DEFINED) THEN
	   CALL PLANE_INTERPL(XY,FOCOEFFS,ZP)
	   CALL ADDZ(ZP,MXATTR,CONATT,COATTC,COATTV)
	ENDIF
C
C add point (Note: - no operations on attributes. Arcs are thought not
C to have attributes)
	CALL ADCORD(XY,CONATT,COATTC,COATTV)

C
C end feature (we must genaux it first, as ENDFT needs the auxiliary 
C array to sector)
C
	CALL GENCIR(GT,COIXY(1,2),COIAUX)
	CALL ENDFT
C
C read the next PPT, and if not finished, then loop
C
  110	CONTINUE
	LSTPPT = CURPPT
	CALL PUTLNG(%VAL(CURPPT),CURPPT)
	IF (CURPPT.GT.0) THEN
	   IF (CODE.NE.3) INSIDE = .NOT.INSIDE
	   STAANG = ENDANG
	   GOTO 100
	ENDIF
C
C otherwise, delete list of PPTs
C
  900	CONTINUE
	CALL DELPPT(LSTPPT)
	LSTINT = 0
C
	RETURN
	END
