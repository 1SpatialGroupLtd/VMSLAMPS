C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-10-13 16:05:22.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE DELAC(ACD)
C
***	IDENT	13OC89
***	MODULE	DELAC
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author Clarke Brunt, 18-Dec-1984
C
C To delete the current AC by removing it from chain
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:ACS/
C
***	COMMON/CMN:ACS/
C
C argument
	INTEGER*4	ACD(ACDLEN)	! AC descriptor
C
C workspace
	INTEGER*4	PREV,NEXT
C
	NEXT = ACBUFL(AC_L_NXTPTR)	! address of next
	PREV = ACBUFL(AC_L_PREPTR)	! address of previous
C
C re-chain
	IF (PREV.NE.0) CALL PUTLNG(NEXT,%VAL(PREV+4*(AC_L_NXTPTR-1)))
	IF (NEXT.NE.0) CALL PUTLNG(PREV,%VAL(NEXT+4*(AC_L_PREPTR-1)))
C
C amend lengths and mark edited
	IF (ACBUFL(AC_L_TYPE).LT.0) THEN	! TC/CH
	   IF (%LOC(ACD).EQ.%LOC(FTRACD)) TCEDIT = .TRUE.
	   ACD(ACD_TCWORD)=ACD(ACD_TCWORD)-(1+(ACBUFW(AC_W_TXTLEN)+1)/2)
	ELSE
	   IF (%LOC(ACD).EQ.%LOC(FTRACD)) ACEDIT = .TRUE.
	   ACD(ACD_ACWORD)=ACD(ACD_ACWORD)-(4+(ACBUFW(AC_W_TXTLEN)+1)/2)
	ENDIF
C
C fix up first and last pointers
	IF (CURAC.EQ.ACD(ACD_FSTTC)) THEN
	   IF (CURAC.EQ.ACD(ACD_LSTTC)) THEN
	      ACD(ACD_FSTTC) = 0
	   ELSE
	      ACD(ACD_FSTTC) = NEXT
	   ENDIF
	ENDIF
	IF (CURAC.EQ.ACD(ACD_LSTTC)) ACD(ACD_LSTTC) = PREV
C
	IF (CURAC.EQ.ACD(ACD_FSTAC)) THEN
	   IF (CURAC.EQ.ACD(ACD_LSTAC)) THEN
	      ACD(ACD_FSTAC) = 0
	   ELSE
	      ACD(ACD_FSTAC) = NEXT
	   ENDIF
	ENDIF
	IF (CURAC.EQ.ACD(ACD_LSTAC)) ACD(ACD_LSTAC) = PREV
C
C Free old AC
	ACD(ACD_NAC) = ACD(ACD_NAC)-1	! now one less
	CALL FREE1AC(%VAL(CURAC))	! free dynamic string
C
	CALL FREE_MEM(AC_ZONE,CURAC,ACLENB)
C
C Get next AC/TC into buffer
	CURAC = 0
	IF (ACD(ACD_NAC).NE.0) THEN
	   CURAC = NEXT			! try next
	   IF (CURAC.EQ.0) CURAC = PREV	! none, so try previous
	   IF (CURAC.NE.0) THEN
	      CALL MOVAC(%VAL(CURAC),ACBUFL)! load it
	   ENDIF
	ENDIF
	ACD(ACD_CUR) = CURAC
C
	RETURN
	END
