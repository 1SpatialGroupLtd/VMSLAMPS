C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-05-09 11:15:44.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE GET_COMMAND(STRING,CMDTAB)
C
***	IDENT	09MY96
***	MODULE	GET_COMMAND
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					CCB	17-Mar-1988
C
C Read a command from the passed char variable, using command table
C CMDTAB.
C Based on routines PROCMD, FINCMD, PRIFLG from LITES2 command decoder,
C and sets up the same command output variables in common DOUT
C
	IMPLICIT NONE
C
***     PARAMETER/CMN:ARGPAR/		! argument constants
***     PARAMETER/LSL$CMNLSL:LSLLIBMSG/
***     PARAMETER/CMN:MOANMESS/		! moan constants
C
***     COMMON/LSL$CMNLSL:EXCEPTION/	! ERROR handling
***     COMMON/LSL$CMNLSL:CMDCOM/	! CMDLIB command handling
***     COMMON/CMN:DOUT/		! command decoding output
***     COMMON/CMN:GLOBAL/		! global variables
C
C arguments
	CHARACTER*(*)	STRING
	INTEGER*4	CMDTAB(1)
C
C External Routines
	EXTERNAL	NASTY		! nasty message
C
C Functions called
CCC	INTEGER*4	CPYSTR		! copies character strings
	INTEGER*4	RDCOMM		! CMDLIB - reads a command
C
C Local Variables
	INTEGER*4	ARGFLG		! argument flags
	INTEGER*4	ARGTYP		! type of extra argument
	INTEGER*4	COMSTA		! valid states for command
	INTEGER*4	RESULT		! command read result
	INTEGER*4	I		! counter
C
	DNINT = 0			! number of integer arguments
	DNREA = 0			! number of real arguments
	DSTRL = 0			! string length
	DSTRIN = .FALSE.		! no string argument
	CALL SETAUX(%REF(STRING),LEN(STRING))	! set buffer
	ARGFLG = 0			! assume no further arguments
C
	RESULT = RDCOMM(CMDTAB)
C
C Check user flags and state
C
	IF (CMDNUM .NE. 0) THEN
C
C User flags permitted in tertiary table and flags appear for command
C
	   IF ((.NOT. NOUFLG) .AND. (UFLAG .NE. 0)) THEN
	      CALL SEPFLG(UFLAG,ARGFLG,COMSTA,CMDFST)
C
C State flags specified for tertiary command
C
	      IF (.NOT. MOANED) THEN
	         IF (COMSTA .NE. 0) THEN
	            CALL NASTY(MSG_SECHASSTATE,CMDFST)
C
C Tertiary command to be typed in full - not allowed
C
	         ELSEIF (BTEST(ARGFLG,ARGFUL) .OR.
     &		         BTEST(ARGFLG,ARGPRV)) THEN
	            CALL NASTY(MSG_SECHASCOND,CMDFST)
	         ENDIF
	      ENDIF
	   ENDIF
C
C get secondary flags
	   IF ((.NOT. MOANED) .AND. (SECMDN .GT. 0)) CALL SECFLG(ARGFLG)
	ENDIF
C
C Check for reading errors
C
	IF ((.NOT. MOANED) .AND. (RESULT .LE. 0)) THEN
	   IF (ERRNUM .NE. LSL__NORMAL) CALL ERRCMD('command')
	ENDIF
C
C Assign output variables
C
	IF (.NOT. MOANED) THEN
	   DPRIN = CMDNUM		! primary command number
	   DSECN = SECMDN		! secondary command number
C
C leave command names alone, for the benefit of any errors output
CCC	   DPRIL = CPYSTR(CMDFST,DPRI)	! copy primary command string
CCC	   IF (DSECN.GT.0) DSECL = CPYSTR(CMSFST,DSEC)	! and secondary
	   IF (CMDICT .GT. 0) THEN
	      DNINT = CMDICT		! no. of integer arguments
	      DO 10 I=1,DNINT
		 DINTS(I) = INTARG(I)	! integer arguments
10	      CONTINUE
	   ENDIF
	   IF (CMDRCT .GT. 0) THEN
	      DNREA = CMDRCT		! no. of reals
	      DO 20 I=1,DNREA
		 DREALS(I) = REALAR(I)	! real arguments
20	      CONTINUE
	   ENDIF
	ENDIF
C
C Find the first extra argument type
C
	CALL EXTTYP(ARGFLG,ARGTYP)
C
C Get arguments (an argument type of less than 0 indicates no further
C arguments)
C
100	IF ((.NOT. MOANED) .AND. (ARGTYP .GE. ARGMIN)) THEN
C
C Filename argument
C
	   IF ((ARGTYP .EQ. ARGFIL) .OR. (ARGTYP .EQ. ARGOPF)) THEN
	      CALL FINFIL(ARGTYP)	! find a filename
C
C Rest of command argument
C
	   ELSE IF ((ARGTYP .EQ. ARGRST) .OR. (ARGTYP .EQ. ARGOPT)) THEN
	      CALL FINRST(ARGTYP)	! find rest of command
C
C Command is privilaged
C
	   ELSE IF (ARGTYP .EQ. ARGPRV) THEN
	      CALL CHKPRV
C
C Command required to be typed in full
C
	   ELSE IF (ARGTYP .EQ. ARGFUL) THEN
	      CALL CHKFUL		! check full command was given
C
C Unknown argument type
C
	   ELSE
	      CALL MSGCMD(NASTY,MSG_UNKARGTYPE)
	   ENDIF
C
C Find next extra argument type
C
	   CALL EXTTYP(ARGFLG,ARGTYP)
C
C Branch back for test
C
	   GO TO 100
	ENDIF
C
C Check for illegal terminators
C
	IF (.NOT. MOANED) CALL CHKTRM
C
C Clear output variables if unsuccessful
C
CCCC	IF (MOANED) CALL INIOUT
C
	RETURN
	END
