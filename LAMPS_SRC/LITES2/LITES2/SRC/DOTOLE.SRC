C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-09-14 12:33:52.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        SUBROUTINE DOTOLE
C
***     IDENT   14SE94
***     MODULE  DOTOLE
C
C       Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C       Written                                 RWR	12-MAR-1985
C       Created dummy                           RJH     18-SEP-1984
C
C Description
C
C	LITES2 cartographic editor TOLERANCE command.
C
C DEGREES -  squaring tolerance in degrees
C RADIANS -  squaring tolerance in radians
C SQMT	  -  squaring tolerance - maximum distance pt moved (mms)
C SQLT	  -  squaring tolerance - minimum length of line (mms)
C SBMT	  -  squaring tolerance - as OSSQMT but for based squaring
C SBLT	  -  squaring tolerance - as OSSQMT but for based squaring
C SQWT	  -  squaring tolerance - warning issued when point moved
C	  -  more than this distance (mms)
C SQBT	  -  squaring tolerance - warning issued if base length
C	  -  below this distance (mms)
C SQDEF	  -  squaring tolerance - default
C CIRDRAW -  no. of interpolated points per mm for drawn circles
C CURDRAW -  no. of interpolated points per mm for drawn curves
C CIRGEN  -  no. of interpolated points per mm for generated circles
C CURGEN  -  no. of interpolated points per mm for generated curves
C EDGE	  -  tolerance for edgematching 
C PROPAGATE- distance to propagate over
C FIND	  -  find radius
C OFFSET  -  proportion of height to offset text/sybols by default
C JUSTIFY -  proportion of height of characters that is space
C EXPAND  -  proportion of character height to add to region around text
C BUNCH   -  constraints for bunch filtering
C SQCT	  -  squaring tolerance - for testing for closed features
C SQPL	  -  squaring tolerance - for testing for parallel lines
C FOLLOW  -  following tolerances - for stream digitising
C FAR_MOVE-  distance to decide if movement is to be considered "far"
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:CONSTS/
***     PARAMETER/CMN:MOANMESS/         ! moan constants
***	PARAMETER/CMN:PACK/
***	PARAMETER/CMN:STAPAR/
C
***     COMMON/CMN:DOUT/                ! cmd dec. output
***	COMMON/CMN:DRAWIN/		! output drawing control
***	COMMON/CMN:D14IFC/
***	COMMON/CMN:EDGE/		! for toledg
***	COMMON/CMN:FOLLOW/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:STATE/
***	COMMON/CMN:STRIKE/
***	COMMON/CMN:WORKS/
C
C External Routines
	EXTERNAL	MOAN,NASTY
C
C functions called
	REAL		CURTOL
C
C Local Variables
	REAL 		TEMP
	REAL		TEMPARR(4)	! temporary array
	INTEGER		WKID		! workstation identification
	REAL		SCRNSZ		! screen size
	INTEGER		SAVUNT		! save of UNIT
	INTEGER		I
C
C Check for negative arguments
C
	IF (DSECN.NE.17) THEN		! allow negative OFFSET
	   DO 11 I=1,DNREA
	      IF (DREALS(I).LT.0.0) THEN
	         CALL MOAN(MSG_NEGARGS)
	         CALL IGNCMD
	         GOTO 9000
	      ENDIF
11	   CONTINUE
	ENDIF
C
C Despatch according to secondary command
C
	GOTO ( 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000,
     &	      1100,1200,1300,1400,1500,1600,1700,1800,1900,
     &	      2000,2100,2200,2300,2400), DSECN
C
C Secondary command number out of range
C
	CALL MSGCMD(NASTY,MSG_ERRSECIND)
	CALL IGNCMD
	GOTO 9000
C
C DEGREES -  squaring tolerance in degrees
C
100	TOLRNC=DREALS(1)*PI/180
	GOTO 9000
C
C RADIANS -  squaring tolerance in radians
C
200	TOLRNC=DREALS(1)
	GOTO 9000
C
C SQMT	  -  squaring tolerance - maximum distance pt moved (mms)
C
300	TEMP = DREALS(1)
	CALL TSTUNT(.FALSE.,1,TEMP)
	SQMT=TEMP
	GOTO 9000
C
C SQLT	  -  squaring tolerance - minimum length of line (mms)
C
400	TEMP = DREALS(1)
	CALL TSTUNT(.FALSE.,1,TEMP)
	SQLT=TEMP
	GOTO 9000
C
C SBMT	  -  squaring tolerance - as OSSQMT but for based squaring
C
500	TEMP = DREALS(1)
	CALL TSTUNT(.FALSE.,1,TEMP)
	SBMT=TEMP
	GOTO 9000
C
C SBLT	  -  squaring tolerance - as OSSQMT but for based squaring
C
600	TEMP = DREALS(1)
	CALL TSTUNT(.FALSE.,1,TEMP)
	SBLT=TEMP
	GOTO 9000
C
C SQWT	  -  squaring tolerance - warning issued when point moved
C	  -  more than this distance (mms)
C
700	TEMP = DREALS(1)
	CALL TSTUNT(.FALSE.,1,TEMP)
	SQWT=TEMP
	GOTO 9000
C
C SQBT	  -  squaring tolerance - warning issued if base length
C	  -  below this distance (mms)
C
800	TEMP = DREALS(1)
	CALL TSTUNT(.FALSE.,1,TEMP)
	SQBT=TEMP
	GOTO 9000
C
C SQDEF	  -  squaring tolerances - default
C
900	SQMT=0.125
	SQLT=0.5
	SBMT=0.125
	SBLT=0.5
	SQWT=0.125
	SQBT=4.0
	TOLRNC=0.174532925		! 10 degrees in radians
	SQPL=0.0174532925		! 1  degree in radians
	TSQCT=1.0
	IF (SCLFRT.GT.0.0) THEN
	   SQCT = TSQCT / SCLFRT
	ELSE
	   SQCT = TSQCT
	ENDIF
	GOTO 9000
C
C CIRDRAW  -  segment length (mm) for drawn circles
C 1st number - segment length (mm)
C 2nd number - arc to chord distance (mm)
C 3rd number - angle (radians)
C
1000	IF (DNREA.GE.1) THEN
	   CIDNUM(1) = DREALS(1)
	   SAVUNT = UNIT
	   CALL TSTUNT(.FALSE.,1,CIDNUM(1))
	   IF (SINDEX.NE.STATE_INITIAL) THEN	! SCLFRT set up
	      CIDIFF(1) = CIDNUM(1)*SCLFRT
	   ELSE
	      CIDIFF(1) = CIDNUM(1)
	   ENDIF
	ENDIF
	IF (DNREA.GE.2) THEN
	   CIDNUM(2) = DREALS(2)
	   UNIT = SAVUNT
	   CALL TSTUNT(.FALSE.,1,CIDNUM(2))
	   IF (SINDEX.NE.STATE_INITIAL) THEN	! SCLFRT set up
	      CIDIFF(2) = CURTOL(CIDNUM(2),SCLFRT)
	   ELSE
	      CIDIFF(2) = CURTOL(CIDNUM(2),1.0)
	   ENDIF
	ENDIF
	IF (DNREA.GE.3) CIDIFF(3) = DREALS(3)
	IF (CIDIFF(1)+CIDIFF(2)+CIDIFF(3).EQ.0.0) THEN
	   CALL MOAN(MSG_ZEROTOL)
	   UNIT = 0
	   DNREA = 2
	   DREALS(1) = 0.0
	   DREALS(2) = CIDDEF
	   GOTO 1000
	ENDIF
	GOTO 9000
C
C CURDRAW  -  segment length (mm) for drawn curves
C 1st number - segment length (mm)
C 2nd number - arc to chord distance (mm)
C 3rd number - angle (radians)
C
1100	IF (DNREA.GE.1) THEN
	   DRAMM(1) = DREALS(1)
	   SAVUNT = UNIT
	   CALL TSTUNT(.FALSE.,1,DRAMM(1))
	ENDIF
	IF (DNREA.GE.2) THEN
	   DRAMM(2) = DREALS(2)
	   UNIT = SAVUNT
	   CALL TSTUNT(.FALSE.,1,DRAMM(2))
	ENDIF
	IF (DNREA.GE.3) DRAMM(3) = DREALS(3)
	IF (DRAMM(1)+DRAMM(2)+DRAMM(3).EQ.0.0) THEN
	   CALL MOAN(MSG_ZEROTOL)
	   UNIT = 0
	   DNREA = 1
	   DREALS(1) = DRADEF
	   GOTO 1100
	ENDIF
	GOTO 9000
C
C CIRGEN  -  segment length (mm) for generated circles
C 1st number - segment length (mm)
C 2nd number - arc to chord distance (mm)
C 3rd number - angle (radians)
C
1200	IF (DNREA.GE.1) THEN
	   CIGNUM(1) = DREALS(1)
	   SAVUNT = UNIT
	   CALL TSTUNT(.FALSE.,1,CIGNUM(1))
	   IF (SINDEX.NE.STATE_INITIAL) THEN	! SCLFRT set up
	      CIGIFF(1) = CIGNUM(1)*SCLFRT
	   ELSE
	      CIGIFF(1) = CIGNUM(1)
	   ENDIF
	ENDIF
	IF (DNREA.GE.2) THEN
	   CIGNUM(2) = DREALS(2)
	   UNIT = SAVUNT
	   CALL TSTUNT(.FALSE.,1,CIGNUM(2))
	   IF (SINDEX.NE.STATE_INITIAL) THEN	! SCLFRT set up
	      CIGIFF(2) = CURTOL(CIGNUM(2),SCLFRT)
	   ELSE
	      CIGIFF(2) = CURTOL(CIGNUM(2),1.0)
	   ENDIF
	ENDIF
	IF (DNREA.GE.3) CIGIFF(3) = DREALS(3)
	IF (CIGIFF(1)+CIGIFF(2)+CIGIFF(3).EQ.0.0) THEN
	   CALL MOAN(MSG_ZEROTOL)
	   UNIT = 0
	   DNREA = 2
	   DREALS(1) = 0.0
	   DREALS(2) = CIGDEF
	   GOTO 1200
	ENDIF
	GOTO 9000
C
C CURGEN  -  segment length (mm) for generated curves
C 1st number - segment length (mm)
C 2nd number - arc to chord distance (mm)
C 3rd number - angle (radians)
C
1300	IF (DNREA.GE.1) THEN
	   GENMM(1) = DREALS(1)
	   SAVUNT = UNIT
	   CALL TSTUNT(.FALSE.,1,GENMM(1))
	ENDIF
	IF (DNREA.GE.2) THEN
	   GENMM(2) = DREALS(2)
	   UNIT = SAVUNT
	   CALL TSTUNT(.FALSE.,1,GENMM(2))
	ENDIF
	IF (DNREA.GE.3) GENMM(3) = DREALS(3)
	IF (GENMM(1)+GENMM(2)+GENMM(3).EQ.0.0) THEN
	   CALL MOAN(MSG_ZEROTOL)
	   UNIT = 0
	   DNREA = 1
	   DREALS(1) = GENDEF
	   GOTO 1300
	ENDIF
	GOTO 9000
C
C EDGE  -  edge macthing (expected in mms)
C
1400	TEMP = DREALS(1)
	CALL TSTUNT(.FALSE.,1,TEMP)
	TOLEDG=TEMP
	GOTO 9000
C
C PROPAGATE - distance to propagate discrepancies over (in sheet mms)
C
1500	TEMP = DREALS(1)
	CALL TSTUNT(.FALSE.,1,TEMP)
	PRPTOL=TEMP
	GOTO 9000
C
C FIND 	  - find radius
1600	TEMP = DREALS(1)
C
C has units command been given?
	IF (UNIT.EQ.0) THEN
C
C get X-size of larger screen (in screen mms)
	   IF (SINDEX.EQ.STATE_INITIAL) THEN 	! INIGKS not called yet
	      SCRNSZ=360				! use default
	   ELSE
	      WKID = 1				! assume primary
	      IF (WKOP(1).AND.WKOP(2)) THEN	! both open
	         IF (SCRNSX(2).GT.SCRNSX(1)) WKID = 2
	      ELSE					! only one active
	         IF (WKOP(2)) WKID = 2		! must be secondary
	      ENDIF
	      SCRNSZ=SCRNSX(WKID)*1000
	   ENDIF
	   SCRNSZ = SCRNSZ*0.5
C
C check that size is sensible
C
	   IF (TEMP.LE.0.0.OR.TEMP.GT.SCRNSZ) THEN
	      CALL MOAN(MSG_ILLEGREAL,0.0,SCRNSZ)
	      CALL IGNCMD
	      GOTO 9000
	   ENDIF
	   DSCRIT=TEMP	! save for reset in RESTORE
	   DFCRIT=TEMP
C
C SCLDIS not set for first time, until INISCL is called
C
	   IF (SINDEX.NE.STATE_INITIAL) EFCRIT=DFCRIT*SCLDIS
C
C set zooming flag
	   IF (.NOT.ZOOMNG) THEN
	      CALL INFORM(MSG_FINDZOOMED)
	      ZOOMNG = .TRUE.
	   ENDIF
C
C units command has been given
C
	ELSE
	   SAVUNT = UNIT
	   CALL TSTUNT(.TRUE.,1,TEMP)	! expect iff units
C
C (note: unit command not valid in INITIAL state)
C
	   SCRNSZ = MAX(LIMITS(2)-LIMITS(1),LIMITS(4)-LIMITS(3))*0.5
	   IF (TEMP.LE.0.0.OR.TEMP.GT.SCRNSZ) THEN
	      TEMPARR(1) = SCRNSZ
	      IF (SAVUNT.EQ.2) THEN
	         TEMPARR(1) = TEMPARR(1)/SCLFRT
	      ELSEIF (SAVUNT.EQ.3) THEN
	         TEMPARR(1) = TEMPARR(1)*UNIT_FACTOR
	      ENDIF
	      CALL MOAN(MSG_ILLEGREAL,0.0,TEMPARR(1))
	      CALL IGNCMD
	      GOTO 9000
	   ENDIF
	   EFCRIT = TEMP
	   DFCRIT = EFCRIT/SCLDIS
	   IF (ZOOMNG) CALL INFORM(MSG_FINDFIXED)
	   ZOOMNG = .FALSE.
	ENDIF
	GOTO 9000
C
C TOLERANCE OFFSET - proportion of height to offset text/symbols
C                    (may be negative)
C
1700	OFFPROP =DREALS(1)
	GOTO 9000 
C
C TOLERANCE JUSTIFY - proportion of height of characters that is space
C                    (must be positive)
C
1800	JSTPROP = DREALS(1)
	GOTO 9000 
C
C TOLERANCE EXPAND -  proportion of character height to add to region 
C                     around text (must be positive)
C
1900	EXPROP = DREALS(1)
	GOTO 9000 
C
C TOLERANCE BUNCH - control of BUNCH filtering algorithm
C 1st number - minimum separation
C 2nd number - lateral tolerance
C 3rd number - maximum point separation
C
C NOTE: these are not the order they are stored in
2000	IF (DNREA.GE.1) THEN
	   TEMPARR(1) = DREALS(1)
	   SAVUNT = UNIT
	   CALL TSTUNT(.FALSE.,1,TEMPARR(1))
	ELSE
	   TEMPARR(1) = BUNCHMM(1)
	ENDIF
	IF (DNREA.GE.2) THEN
	   TEMPARR(2) = DREALS(2)
	   UNIT = SAVUNT
	   CALL TSTUNT(.FALSE.,1,TEMPARR(2))
	ELSE
	   TEMPARR(2) = BUNCHMM(3)		! note order
	ENDIF
	IF (DNREA.GE.3) THEN
	   TEMPARR(3) = DREALS(3)
	ELSE
	   TEMPARR(3) = BUNCHMM(2)
	ENDIF
C
C are these values valid?
C
	IF ((TEMPARR(1).LT.TEMPARR(2)).OR.
     &	    (TEMPARR(3).LT.TEMPARR(1).AND.TEMPARR(3).NE.0.0)) THEN
	   TEMPARR(1) = BUNCHMIN
	   TEMPARR(2) = BUNCHLAT
	   TEMPARR(3) = 0.0
	   CALL MOAN(MSG_INCONSBUNCH)
	ENDIF
C
	BUNCHMM(1) = TEMPARR(1)
	BUNCHMM(2) = TEMPARR(3)
	BUNCHMM(3) = TEMPARR(2)
	GOTO 9000
C
C SQCT	  -  squaring tolerance - test for closed features (mm)
C
2100	TEMP = DREALS(1)
	CALL TSTUNT(.FALSE.,1,TEMP)
	SQCT=TEMP
	IF (SCLFRT.GT.0.0) THEN
	   TSQCT = SQCT * SCLFRT
	ELSE
	   TSQCT = SQCT
	ENDIF
	GOTO 9000
C
C SQCT    -  squaring tolerance for testing parallel lines (given in
C            degerees, stored as radians)
C
2200	SQPL=DREALS(1)*PI/180
	GOTO 9000
C
C TOLERANCE FOLLOW - control of BUNCH filtering algorithm
C 1st number - time interval
C 2nd number - minimum separation
C 3rd number - lateral tolerance
C 4th number - maximum point separation
C
2300	IF (DNREA.GE.1) THEN
	   TEMPARR(4) = DREALS(1)
	ELSE
	   TEMPARR(4) = FOLLOW_TIME
	ENDIF
C
	IF (DNREA.GE.2) THEN
	   TEMPARR(1) = DREALS(2)
	   SAVUNT = UNIT
	   CALL TSTUNT(.FALSE.,1,TEMPARR(1))
	ELSE
	   TEMPARR(1) = FOLLOW_EMMDIST
	ENDIF
C
	IF (DNREA.GE.3) THEN
	   TEMPARR(2) = DREALS(3)
	   UNIT = SAVUNT
	   CALL TSTUNT(.FALSE.,1,TEMPARR(2))
	ELSE
	   TEMPARR(2) = FOLLOW_HMMDIST
	ENDIF
	IF (DNREA.GE.4) THEN
	   TEMPARR(3) = DREALS(4)
	ELSE
	   TEMPARR(3) = FOLLOW_SMMDIST
	ENDIF
C
C are these values valid?
C
	IF ((TEMPARR(4).LE.0.0).OR.
     &	    (TEMPARR(1).LT.TEMPARR(2)).OR.
     &	    (TEMPARR(3).LT.TEMPARR(1).AND.TEMPARR(3).NE.0.0)) THEN
	   TEMPARR(1) = FOLLOWMIN
	   TEMPARR(2) = FOLLOWLAT
	   TEMPARR(3) = 0.0
	   TEMPARR(4) = FOLLOWTIM
	   CALL MOAN(MSG_INCONSFOLLOW)
	ENDIF
C
	FOLLOW_EMMDIST = TEMPARR(1)
	FOLLOW_HMMDIST = TEMPARR(2)
	FOLLOW_SMMDIST = TEMPARR(3)
	FOLLOW_TIME    = TEMPARR(4)
	GOTO 9000
C
C FAR_MOVE	  -  distance to consider "Far"
C
2400	TEMP = DREALS(1)
	CALL TSTUNT(.FALSE.,1,TEMP)
	FAR_MOVE_MM = TEMP
	IF (SCLFRT.GT.0.0) THEN
	   FAR_MOVE_IFF = FAR_MOVE_MM * SCLFRT
	ELSE
	   FAR_MOVE_IFF = FAR_MOVE_MM
	ENDIF
	GOTO 9000

C
9000	CONTINUE
        RETURN
        END
