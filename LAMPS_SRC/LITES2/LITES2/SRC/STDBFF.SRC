C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-11-12 11:57:00.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE STDBFF(ACTION)
C
***	MODULE	STDBFF
***	IDENT	12NO93
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author  Clarke Brunt (cf FRTLIB routine SRIBFF)
C
C Created 					CCB	4-July-1984
C
C clears  or flushes  the coordinate buffer from STDBFA
C ACTION = 0 -> clear buffer
C ACTION = 1 -> flush buffer keeping continuity point
C ACTION = 2 -> final flush of buffer
C 
C
	IMPLICIT NONE
C
***	COMMON/CMN:STDBFC/		! holds buffer
C
C arguments
C
	INTEGER		ACTION		! what to do
C w/s
C This is a jacket routine that calls the real routine, passing it the 
C arrays to work with
C
	CALL STDBFF_SUB(ACTION,STDBFP,
     &	                %VAL(STDBFX_ADDR),%VAL(STDBFY_ADDR),
     &	                %VAL(STDBFZ_ADDR))
C
	RETURN
	END

	SUBROUTINE STDBFF_SUB(ACTION,STDBFP,STDBFX,STDBFY,STDBFZ)
C
***	MODULE	STDBFF_SUB
***	IDENT	14FE92
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author  Clarke Brunt (cf FRTLIB routine SRIBFF)
C
C Created 					CCB	4-July-1984
C
C clears  or flushes  the coordinate buffer from STDBFA
C ACTION = 0 -> clear buffer
C ACTION = 1 -> flush buffer keeping continuity point
C ACTION = 2 -> final flush of buffer
C 
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:MOANMESS/
C
***	COMMON/CMN:DRAWIN/		! drawing controls
***	COMMON/LSL$CMNFRT:FRTCOM/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:SETUP/
***	COMMON/CMN:WORKS/		! for KRSINI
C
C arguments
C
	INTEGER		ACTION		! what to do
	INTEGER		STDBFP		! pointer into arrays
	REAL		STDBFX(*)
	REAL		STDBFY(*)
	INTEGER		STDBFZ(*)
C w/s
	LOGICAL		OK(2)		! had error substituting symbols?
	INTEGER		SYMB(2)
	INTEGER		PATT		! in pattern
C
C if flush call then get the buffer out
C
	IF (ACTION.GT.0) THEN
C
C patterned lines
	   IF (PATOPT.AND.(FRTSC.NE.0)
     &		.AND.(FRTLIN.OR.FRTARC.OR.FRTCUR).AND.STDBFP.GT.0) THEN
	      IF (INVSEG.AND.FRTCLP) THEN	! maintain patt phase
	         INVSEG = .FALSE.
	         CALL PATACT(.FALSE.)
	         CALL PATGPL(1,STDBFX,STDBFY,STDBFZ)	! invis to first point
	         CALL PATACT(.TRUE.)
	      ENDIF
	      IF (STDBFP.GT.1) THEN
	         CALL PATGPL(STDBFP,STDBFX,STDBFY,STDBFZ) ! patterned line
C
C check for error in pattern lines (can't find symbol)
	         CALL PATERR(OK,SYMB,PATT)
	         IF (.NOT.OK(1)) CALL MOAN(MSG_BADSYMBOL,SYMB(1),PATT)
	         IF (.NOT.OK(2)) CALL MOAN(MSG_BADSYMBOL,SYMB(2),PATT)
	      ENDIF
C
C areas
	   ELSEIF (FRTARE.AND.STDBFP.GT.0) THEN		! fill area
	      IF (FILOPT.AND.PATOPT.AND.FRTSC.LT.-1) THEN ! patterned fill
C
C draw fill areas at height of first point of fill area
	         IF (KRSINI) CALL SRI_SET_Z(STDBFZ(1))
	         CALL FILLGFA(STDBFP,STDBFX,STDBFY)
	      ELSE				! straight lines
	         IF (SETUP.OR.RENDERING.OR.KRSINI) THEN! use FRT routine
						! to transform or render
	            CALL SRIGFA(STDBFP,STDBFX,STDBFY,STDBFZ)
	         ELSE
	            CALL GFA(STDBFP,STDBFX,STDBFY)
	         ENDIF
	      ENDIF
C
C solid lines
	   ELSEIF (STDBFP.GT.1) THEN
	      IF (SETUP.OR.RENDERING.OR.KRSINI) THEN! use FRT routine to
						! transform or render
	         CALL SRIGPL(STDBFP,STDBFX,STDBFY,STDBFZ)
	      ELSE
	         CALL GPL(STDBFP,STDBFX,STDBFY)	! plain line
	      ENDIF
	   ENDIF
	ENDIF
C
	IF (ACTION.EQ.1) THEN			! continuity flush
	   STDBFX(1) = STDBFX(STDBFP)		! copy last point
	   STDBFY(1) = STDBFY(STDBFP)		! for continuity
	   STDBFZ(1) = STDBFZ(STDBFP)		! Note: integers
	   STDBFP = 1				! one continuity point
	ELSE
	   STDBFP = 0				! buffer is now empty
	ENDIF
C
C that's all
C
	RETURN
	END
