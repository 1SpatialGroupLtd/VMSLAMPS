	LOGICAL FUNCTION REG_IMAGE(REG)
C
***     IDENT   10MY96
***     MODULE  REG_IMAGE
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Written					CCB	 1-Jun-1993
C
C	LITES2 cartographic editor REGION n IMAGE command.
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:MOANMESS/
C
***	COMMON/CMN:IMAGE/
C
C argument
	INTEGER	REG
C
C functions
	INTEGER	IMAGENUMBER
	LOGICAL	REG_IMAGE_POINT
	LOGICAL	REG_IMAGE_STEP
	LOGICAL	HADBREAK
C
C workspace
	INTEGER	SPIX(2),PIX(2),MPIX(2)
	INTEGER	IM
	INTEGER	TYPE
	INTEGER	N
	REAL	R
	EQUIVALENCE	(N,R)
	INTEGER	PVAL
	INTEGER	DX,DY
	INTEGER	COUNT
C
	REG_IMAGE = .TRUE.	! assume failure
C
C get which selected image the cursor is in (and where)
	IM = IMAGENUMBER(SPIX)
	IF (IM.EQ.0) THEN
	   CALL MOAN(MSG_NOIMSEL)
	   CALL LEARN(MSG_USEIMSEL)
	   GOTO 9999
	ENDIF
C
C get starting pixel value (pixel numbers start at 1)
	CALL IMAGEPIXEL(TYPE,N,R,IM,SPIX)
	PVAL = N
C
C go right until get a different value
10	IF (HADBREAK()) GOTO 9990
	SPIX(1) = SPIX(1)+1
	IF (SPIX(1).GT.IMAGE_COLUMNS(IM)) GOTO 20
	CALL IMAGEPIXEL(TYPE,N,R,IM,SPIX)
	IF (N.EQ.PVAL) GOTO 10		! still same value
C
C hit edge of image, or a different pixel value
C set off upwards, and put in first point of region
C (lower right point of pixel)
20	DX = 0
	DY = 1
	SPIX(1) = SPIX(1)-1	! back up to last same pixel
	PIX(1) = SPIX(1)	! begin at starting point
	PIX(2) = SPIX(2)
C
C temporarily down one - function does top right, we want bottom
	PIX(2) = PIX(2)-1
	IF (REG_IMAGE_POINT(REG,IM,PIX,DX,DY)) GOTO 9999
	PIX(2) = PIX(2)+1	! back up again
	COUNT = 0		! count angles turned
	MPIX(1) = PIX(1)	! max rightwards pixel
	MPIX(2) = PIX(2)
C
C now step
30	IF (HADBREAK()) GOTO 9990
	CALL REG_IMAGE_STEP(REG,IM,PVAL,PIX,DX,DY,
     &			IMAGE_CONNECT_DIAG,COUNT)
	IF (PIX(1).GT.MPIX(1)) THEN
	   MPIX(1) = PIX(1)	! new max rightwards
	   MPIX(2) = PIX(2)
	ENDIF
C
C check if (about to be) back where started
C (see REG_IMAGE_POINT below - we are testing whether the next point
C  to be inserted would be the starting point, and using *2 to keep
C  in as integer)
	IF (2*PIX(1)+DX+DY .NE. 2*SPIX(1)+1) GOTO 30
	IF (2*PIX(2)+DY-DX .NE. 2*SPIX(2)-1) GOTO 30
C
C if allowing diagonal connection, then still may not have finished
C If we are approaching from left (DX=1) then test pixel below right
C to see if we are about to turn downwards
	IF (IMAGE_CONNECT_DIAG.AND.DX.EQ.1) THEN
	   PIX(1) = PIX(1)+1
	   PIX(2) = PIX(2)-1
	   IF (PIX(1).GT.IMAGE_COLUMNS(IM)) GOTO 40
	   IF (PIX(2).LE.0) GOTO 40
	   CALL IMAGEPIXEL(TYPE,N,R,IM,PIX)
	   IF (N.NE.PVAL) GOTO 40
	   PIX(1) = PIX(1)-1
	   PIX(2) = PIX(2)+1
	   GOTO 30
	ENDIF
C
C if we have made a net number of clockwise turns, then COUNT is
C negative, and the region must be a 'hole' not containing the
C initial point, so continue to search rightwards for another region
40	IF (COUNT.GT.0) GOTO 9990	! anti-clock, so OK
C
C delete the region
	CALL DELREG(REG)
C
C begin scanning again at the rightmost pixel of the region
C The one to the right of this must be our original value
	SPIX(1) = MPIX(1)
	SPIX(2) = MPIX(2)
	GOTO 10
C
9990	REG_IMAGE = .FALSE.
C
9999	RETURN
	END
C
C
C
	LOGICAL FUNCTION REG_IMAGE_STEP(REG,IM,PVAL,PIX,DX,DY,DIAG,COUNT)
C
***     IDENT   23SE94
***     MODULE  REG_IMAGE_STEP
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Written					CCB	 1-Jun-1993
C
C	LITES2 cartographic editor REGION n IMAGE command.
C
	IMPLICIT NONE
C
***	COMMON/CMN:IMAGE/
C
C argument
	INTEGER	REG	! region num - if non-zero, construct region
	INTEGER	IM
	INTEGER	PVAL
	INTEGER	PIX(2)
	INTEGER	DX,DY
	LOGICAL	DIAG	! allow diagonal connection
	INTEGER	COUNT
C
C function
	LOGICAL	REG_IMAGE_POINT
C
C workspace
	INTEGER	TYPE
	INTEGER	N
	REAL	R
	EQUIVALENCE	(N,R)
	INTEGER	P(2)
	INTEGER	T
C
	REG_IMAGE_STEP = .TRUE.	! assume failure
C
C try pixel in direction we are going
	P(1) = PIX(1)+DX
	P(2) = PIX(2)+DY
	IF (DIAG) GOTO 5
2	IF (P(1).LE.0.OR.P(1).GT.IMAGE_COLUMNS(IM)) GOTO 20
	IF (P(2).LE.0.OR.P(2).GT.IMAGE_ROWS(IM)) GOTO 20
	CALL IMAGEPIXEL(TYPE,N,R,IM,P)
	IF (N.NE.PVAL) GOTO 20		! different value
	IF (DIAG) GOTO 10
C
C try pixel above right
5	P(1) = P(1)+DY
	P(2) = P(2)-DX
	IF (P(1).LE.0.OR.P(1).GT.IMAGE_COLUMNS(IM)) GOTO 10
	IF (P(2).LE.0.OR.P(2).GT.IMAGE_ROWS(IM)) GOTO 10
	CALL IMAGEPIXEL(TYPE,N,R,IM,P)
	IF (N.NE.PVAL) THEN
	   IF (DIAG) THEN
	      P(1) = P(1)-DY
	      P(2) = P(2)+DX
	      GOTO 2
	   ENDIF
	   GOTO 10		! different value
	ENDIF
C
C turn to right, now on pixel at above right
	IF (REG.NE.0) THEN
	   IF (REG_IMAGE_POINT(REG,IM,PIX,DX,DY)) GOTO 9999
	ENDIF
	PIX(1) = P(1)
	PIX(2) = P(2)
	T = DX
	DX = DY
	DY = -T
	COUNT = COUNT-1		! clockwise turn
	GOTO 9990
C
C continue in same direction, now on pixel above
10	PIX(1) = PIX(1)+DX
	PIX(2) = PIX(2)+DY
	GOTO 9990
C
C turn to left, still on same pixel
20	IF (REG.NE.0) THEN
	    IF (REG_IMAGE_POINT(REG,IM,PIX,DX,DY)) GOTO 9999
	ENDIF
	T = DX
	DX = -DY
	DY = T
	COUNT = COUNT+1		! anti-clockwise turn
	GOTO 9990
C
9990	REG_IMAGE_STEP = .FALSE.
C
9999	RETURN
	END
C
C
C
	LOGICAL FUNCTION REG_IMAGE_POINT(REG,IM,PIX,DX,DY)
C
***     IDENT   01JN93
***     MODULE  REG_IMAGE_POINT
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Written					CCB	 1-Jun-1993
C
C	LITES2 cartographic editor REGION n IMAGE command.
C
	IMPLICIT NONE
C
C
***	COMMON/CMN:IMAGE/
***	COMMON/CMN:MAPS/
***	COMMON/CMN:SETUP/
***	COMMON/CMN:WORKS/
C
C argument
	INTEGER	REG
	INTEGER	IM
	INTEGER	PIX(2)
	INTEGER	DX,DY
C
C workspace
	REAL	XY(2)
C
C function
	LOGICAL	ADDPPT
C
	REG_IMAGE_POINT = .TRUE.	! assume failure
C
	XY(1) = (PIX(1)-1+0.5*(DX+DY))*IMAGE_PIXELSIZE(1,IM) +
     &			IMAGE_ORIGIN(1,IM) - LITES2ORG(1)
	XY(2) = (PIX(2)-1+0.5*(DY-DX))*IMAGE_PIXELSIZE(2,IM) +
     &			IMAGE_ORIGIN(2,IM) - LITES2ORG(2)
	IF (SETUP) CALL WARP_BACK(XY(1),XY(2))
	IF (ADDPPT(XY,REG)) GOTO 9999
C
9990	REG_IMAGE_POINT = .FALSE.
C
9999	RETURN
	END
