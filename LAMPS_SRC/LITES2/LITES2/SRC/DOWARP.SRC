C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-05-10 10:38:02.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE DOWARP
C
***	IDENT	10MY96
***	MODULE	DOWARP
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Written					CCB	14-Sep-1994
C
C	LITES2 cartographic editor WARP command.
C
        IMPLICIT NONE
C
***	PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:LICPAR/
***	PARAMETER/CMN:TRNTYP/
***	COMMON/CMN:DOUT/
***	COMMON/CMN:DRAWIN/
***	COMMON/CMN:GLOBAL/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:SETUP/
***	COMMON/CMN:WORKS/
C
C Functions
	EXTERNAL WARP_TRANSFORM_CMD_TABLE
	EXTERNAL WARP_POINT_CMD_TABLE
	EXTERNAL WARP_REPLACE_CMD_TABLE
	EXTERNAL NASTY,MOAN
	LOGICAL	LICENSED
C
C Local Variables
	INTEGER	N
	LOGICAL OK
	REAL*4	RMS_X
	LOGICAL INITIALISED,HW_OK
	REAL*8	DENOM,XXX
C
	SAVE 	INITIALISED,HW_OK
	DATA	INITIALISED/.FALSE./
C
C check license
	IF (.NOT.LICENSED(LOCK_WARP)) GOTO 9999
C
C check hardware (to avoid having to call routine hw dependant routine)
C a bit grubby that this routine should know about the hardware.
C
	IF (.NOT.INITIALISED) THEN
	   HW_OK = ((PNAM(1:PNAM_LEN) .EQ. 'UIS') .OR.
     &	            (PNAM(1:PNAM_LEN) .EQ. 'MOTIF'))
	   INITIALISED = .TRUE.
	ENDIF
C
	IF (.NOT.HW_OK) THEN
	   CALL MSGCMD(MOAN,MSG_CMDNOTWITHHW)
	   GOTO 9999
	ENDIF
C
C Dispatch according to secondary command
	GOTO (100,200,300,400,500,600,700,800,900,1000), DSECN
C
C Secondary command number out of range
	CALL MSGCMD(NASTY,MSG_ERRSECIND)
	GOTO 9990
C
C WARP TRANSFORM <type>
C
100	CALL GET_COMMAND(DSTR(:DSTRL),WARP_TRANSFORM_CMD_TABLE)
	IF (MOANED) GOTO 9990
	IF (DPRIN-1.NE.WARP_TRANSFORM) WARP_FITTED = .FALSE.
	WARP_TRANSFORM = DPRIN-1
	WARP_BACK_SIMPLE = (WARP_TRANSFORM .NE. TRNTYP_LASERAID) .AND.
     &	                   (WARP_TRANSFORM .NE. TRNTYP_PROJECTIVE)
	GOTO 9999
C
C WARP POINT <type> [x y]
C
200	CALL GET_COMMAND(DSTR(:DSTRL),WARP_POINT_CMD_TABLE)
	IF (MOANED) GOTO 9990
	IF (DNREA.EQ.1) THEN
	   CALL MOAN(MSG_CMDLIBEOL,'command',DPRI(:DPRIL))
	   GOTO 9990
	ENDIF
C
C nb DPRIN = 1 (MAP), or 2 (IMAGE)
	IF (WARP_N(DPRIN).EQ.WARP_MAX_POINTS) THEN
	   CALL MOAN(MSG_TOOMANYWARP,WARP_MAX_POINTS)
	   GOTO 9990
	ENDIF
	WARP_N(DPRIN) = WARP_N(DPRIN)+1
	N = WARP_N(DPRIN)
C
210	IF (DNREA.EQ.0) THEN
	   WARP_POINTS(2*DPRIN-1,N) = CSXY(1)
	   WARP_POINTS(2*DPRIN,  N) = CSXY(2)
	ELSE
	   WARP_POINTS(2*DPRIN-1,N) = DREALS(1)
	   WARP_POINTS(2*DPRIN,  N) = DREALS(2)
	ENDIF
C
C if digitising an IMAGE point and a SETUP is is force, then transform
C the point to image space
	IF (SETUP.AND.DPRIN.EQ.2) CALL TRNUSE(
     &		WARP_POINTS(2*DPRIN-1,N),WARP_POINTS(2*DPRIN,N),
     &		SETCOF,SET_TRANSFORM)
	WARP_DIRTY = .TRUE.
	GOTO 9999
C
C WARP FIT
C
300	WARP_FITTED = .FALSE.		! in case of disaster
C
	N = MIN(WARP_N(1),WARP_N(2))
	CALL WARP_TRNSET(WARP_TRANSFORM,N,
     &	                 WARP_POINTS,WARP_COF,WARP_RMS(1),WARP_RMS(2),OK)
	IF (.NOT. OK) GOTO 9999
C
C get the back transformation
C
	IF (WARP_BACK_SIMPLE) THEN
C
C for linear transformations, reverse the transformation
	   DENOM = WARP_COF(2,1)*WARP_COF(3,2) - 
     &	           WARP_COF(3,1)*WARP_COF(2,2)
C
	   XXX = WARP_COF(3,1)*WARP_COF(1,2) -
     &	         WARP_COF(1,1)*WARP_COF(3,2)
	   WARP_BCK(1,1) =  XXX / DENOM
	   WARP_BCK(2,1) =  WARP_COF(3,2) / DENOM
	   WARP_BCK(3,1) = -WARP_COF(3,1) / DENOM
	   WARP_BCK(4,1) = 0.0
C
	   XXX = WARP_COF(1,1)*WARP_COF(2,2) -
     &	         WARP_COF(2,1)*WARP_COF(1,2)
	   WARP_BCK(1,2) =  XXX / DENOM
	   WARP_BCK(2,2) = -WARP_COF(2,2) / DENOM
	   WARP_BCK(3,2) =  WARP_COF(2,1) / DENOM
	   WARP_BCK(4,2) = 0.0
	ELSE
C
C          for complex transformations
C          reverse the points, and calculate back-transformation
	   CALL WARP_REVERSE(N,WARP_POINTS)
	   CALL WARP_TRNSET(WARP_TRANSFORM,N,
     &	                    WARP_POINTS,WARP_BCK,RMS_X,RMS_X,OK)
	   CALL WARP_REVERSE(N,WARP_POINTS)
	   IF (.NOT.OK) GOTO 9999
	ENDIF
C
C compute an approximate angle and scale of the transformation
C for hardware text
	CALL WARP_SCA_ANG(WARP_COF,WARP_TRANSFORM,WARP_SCA,WARP_ANG)
C
C fit things,
	WARP_FITTED = .TRUE.
	WARP_DIRTY = .FALSE.
	GOTO 9999
C
C WARP DELETE n
C
400	N = MAX(WARP_N(1),WARP_N(2))
	IF (DINTS(1).LE.0.OR.DINTS(1).GT.WARP_MAX_POINTS) THEN
	   CALL MOAN(MSG_ILLEGLWARP,WARP_MAX_POINTS)
	   GOTO 9990
	ELSEIF (DINTS(1).GT.N) THEN
	   CALL MOAN(MSG_NOSUCHWARP,DINTS(1))
	   GOTO 9990
	ENDIF
	N = N-DINTS(1)
	IF (N.GT.0) CALL CPYPAK(N*4,
     &			WARP_POINTS(1,DINTS(1)+1),
     &			WARP_POINTS(1,DINTS(1)))
	IF (DINTS(1).LE.WARP_N(1)) WARP_N(1) = WARP_N(1)-1
	IF (DINTS(1).LE.WARP_N(2)) WARP_N(2) = WARP_N(2)-1
	WARP_DIRTY = .TRUE.
	GOTO 9999
C
C WARP REPLACE <type> n [x y]
C
500	CALL GET_COMMAND(DSTR(:DSTRL),WARP_REPLACE_CMD_TABLE)
	IF (MOANED) GOTO 9990
	IF (DNINT.EQ.0.OR.DNREA.EQ.1) THEN
	   CALL MOAN(MSG_CMDLIBEOL,'command',DPRI(:DPRIL))
	   GOTO 9990
	ENDIF
C nb DPRIN = 1 (MAP), or 2 (IMAGE)
	IF (DINTS(1).LE.0.OR.DINTS(1).GT.WARP_MAX_POINTS) THEN
	   CALL MOAN(MSG_ILLEGLWARP,WARP_MAX_POINTS)
	   GOTO 9990
	ENDIF
	IF (DINTS(1).GT.WARP_N(DPRIN)) THEN
	   CALL MOAN(MSG_NOSUCHWARP,DINTS(1))
	   GOTO 9990
	ENDIF
	N = DINTS(1)
	GOTO 210	! join WARP POINT
C
C WARP ON
C
600	IF (WARP_FITTED) THEN
C
C copy calculated set to in-use set
	   SET_TRANSFORM = WARP_TRANSFORM
	   CALL CPYPAK(16,WARP_COF,SETCOF)
	   CALL CPYPAK(16,WARP_BCK,SETBCK)
C
C angle and scale for hw text
	   SETSCA = WARP_SCA
	   SETANG = WARP_ANG
	   SET_BACK_SIMPLE = WARP_BACK_SIMPLE
	   WARP_SET = .TRUE.
	   SETUP = .TRUE.
	ELSEIF (WARP_SET) THEN
C
C just enable the current in-use set
	   SETUP = .TRUE.
	ELSE
C
C no coefficients to use
	   CALL MOAN(MSG_NOWARP)
	   GOTO 9990
	ENDIF
C
C lose saved image window since we have new coeffs
	HADIMG = .FALSE.
	GOTO 9999
C
C WARP OFF
C
700	SETUP = .FALSE.
	GOTO 9999
C
C WARP MAP
C
800	WARP_TO_IMAGE = .TRUE.
	GOTO 9999
C
C WARP IMAGE
C
900	WARP_TO_IMAGE = .FALSE.
	HADIMG = .FALSE.	! lose saved image window
	GOTO 9999
C
C WARP CLEAR
C
1000	WARP_N(1) = 0
	WARP_N(2) = 0
	WARP_DIRTY = .TRUE.
	GOTO 9999
C
9000	CALL MSGCMD(MOAN,MSG_CMDNOTIMPLE)
C
9990	CALL IGNCMD
9999	RETURN
        END
