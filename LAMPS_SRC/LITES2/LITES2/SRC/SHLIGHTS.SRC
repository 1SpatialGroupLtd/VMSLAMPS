C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-05-09 12:36:00.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        SUBROUTINE SHLIGHTS(STRNG)
C
***     IDENT   09MY96
***     MODULE  SHLIGHTS
C
C       Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C       Written                                 RWR	May-1989
C
C	LITES2 cartographic editor SHOW LIGHTS command.
C
        IMPLICIT NONE
C
***	PARAMETER/CMN:MOANMESS/
C
***	COMMON/CMN:DOUT/
***	COMMON/CMN:VIEW/
C
C argument (working storage)
	CHARACTER*80	STRNG
C
C w/s
	INTEGER		LIGHT,VIEW
C
C Functions
	EXTERNAL	NASTY,MOAN
	INTEGER		EXPAND
C
C check for valid argument
	IF (DNINT.GT.0.AND.(DINTS(1).LT.1.OR.DINTS(1).GT.MAXVIEW)) THEN
	   CALL MOAN(MSG_VIEWRNG,1,MAXVIEW)
	   GOTO 9990
	ENDIF
C
	IF (DNINT.GT.1.AND.(DINTS(2).LT.1.OR.DINTS(2).GT.MAXLIGHT)) THEN
	   CALL MOAN(MSG_LIGHTRNG,1,MAXLIGHT)
	   GOTO 9990
	ENDIF
C
	DO 9000, VIEW=1,MAXVIEW
C
C do we want this view
	   IF (DNINT.GT.0.AND.DINTS(1).NE.VIEW) GOTO 9000
C
C look at each light in this view
	   DO 8000, LIGHT=1,MAXLIGHT
C
C do we want this light
	      IF (DNINT.GT.1.AND.DINTS(2).NE.LIGHT) GOTO 8000
C
C header
	      CALL INFORM(MSG_LIGHTHDR)
	      CALL INFORM(MSG_BLANK)
C
C now build up output in STRNG
	      CALL EXPAND('%WS%I4  %I4',STRNG,VIEW,LIGHT)
	      IF (VIEW.EQ.VIEW_CURRENT.AND.LIGHT.EQ.VIEW_LIGHT_CURRENT) THEN
	         CALL EXPAND('%WSYes',STRNG(15:17))
	      ELSE
	         CALL EXPAND('%WSNo',STRNG(16:17))
	      ENDIF
C
	      IF (VIEW_LIGHT_IN_USE(LIGHT,VIEW)) THEN
	         CALL EXPAND('%WSYes',STRNG(25:27))
	      ELSE
	         CALL EXPAND('%WSNo',STRNG(26:27))
	      ENDIF
C
	      CALL EXPAND('%WS%F0.2 %F0.2 %F0.2',STRNG(31:44),
     &	                   VIEW_LIGHT_COLOUR(1,LIGHT,VIEW),
     &	                   VIEW_LIGHT_COLOUR(2,LIGHT,VIEW),
     &	                   VIEW_LIGHT_COLOUR(3,LIGHT,VIEW))
	      CALL EXPAND('%WS%G0.5',STRNG(47:),VIEW_LIGHT_CONE(LIGHT,VIEW))
C
	      CALL INFORM(MSG_STRING,STRNG)
	      CALL INFORM(MSG_BLANK)
C
C source and target
	      CALL INFORM(MSG_VIEWHDR3,'              ')
	      CALL INFORM(MSG_BLANK)
C
	      CALL EXPAND('%WSSource:',STRNG)
	      IF (VIEW_LIGHT_FROM_SETUP(LIGHT,VIEW)) THEN
	         CALL EXPAND('%WS%G0.8',STRNG(11:23),
     &	                              VIEW_LIGHT_FROM(1,LIGHT,VIEW))
	         CALL EXPAND('%WS%G0.8',STRNG(23:33),
     &	                              VIEW_LIGHT_FROM(2,LIGHT,VIEW))
	         CALL EXPAND('%WS%G0.5',STRNG(34:41),
     &	                              VIEW_LIGHT_FROM(3,LIGHT,VIEW))
	      ELSE
	         CALL EXPAND('%WS:::',STRNG(14:16))	      
	         CALL EXPAND('%WS:::',STRNG(26:28))	      
	         CALL EXPAND('%WS:::',STRNG(35:37))	      
	      ENDIF
	      CALL INFORM(MSG_STRING,STRNG)
C
	      CALL EXPAND('%WS ',STRNG)
	      IF (VIEW_LIGHT_HAD_BEARING(LIGHT,VIEW)) THEN
	         CALL EXPAND('%WS%G0.5',STRNG(44:50),
     &	                           VIEW_LIGHT_BEARING(LIGHT,VIEW))
	      ELSE
	         CALL EXPAND('%WS:::',STRNG(45:47))	      
	      ENDIF
	      IF (VIEW_LIGHT_HAD_DISTANCE(LIGHT,VIEW)) THEN
	         CALL EXPAND('%WS%G0.9',STRNG(56:65),
     &	                           VIEW_LIGHT_DISTANCE(LIGHT,VIEW))
	      ELSE
	         CALL EXPAND('%WS:::',STRNG(59:61))	      
	      ENDIF
	      IF (VIEW_LIGHT_HAD_ELEVATION(LIGHT,VIEW)) THEN
	         CALL EXPAND('%WS%G0.5',STRNG(72:78),
     &	                           VIEW_LIGHT_ELEVATION(LIGHT,VIEW))
	      ELSE
	         CALL EXPAND('%WS:::',STRNG(73:75))	      
	      ENDIF
	      CALL INFORM(MSG_STRING,STRNG)
C
	      CALL EXPAND('%WSTarget:',STRNG)
	      IF (VIEW_LIGHT_TO_SETUP(LIGHT,VIEW)) THEN
	         CALL EXPAND('%WS%G0.8',STRNG(11:23),
     &	                              VIEW_LIGHT_TO(1,LIGHT,VIEW))
	         CALL EXPAND('%WS%G0.8',STRNG(23:33),
     &	                              VIEW_LIGHT_TO(2,LIGHT,VIEW))
	         CALL EXPAND('%WS%G0.5',STRNG(34:41),
     &	                              VIEW_LIGHT_TO(3,LIGHT,VIEW))
	      ELSE
	         CALL EXPAND('%WS:::',STRNG(14:16))	      
	         CALL EXPAND('%WS:::',STRNG(26:28))	      
	         CALL EXPAND('%WS:::',STRNG(35:37))	      
	      ENDIF
	      CALL INFORM(MSG_STRING,STRNG)
C
	      CALL INFORM(MSG_BLANK)
8000	   CONTINUE
9000	CONTINUE
	GOTO 9999
C
9990	CALL IGNCMD
9999	RETURN
        END
