C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-05-10 17:04:36.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE INIMAP(MAP)
C
***	IDENT	10MY96
***	MODULE	INIMAP
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	21-Nov-1984
C
C Description
C
C	Subroutine to set up a map on the digitising table
C
	IMPLICIT NONE
C
C Arguments
C
	INTEGER*4	MAP
C
C Included Parameter Files
C
***     PARAMETER/CMN:EFNLUN/		! event flags and luns
***	PARAMETER/CMN:MACMEN/
***     PARAMETER/CMN:MOANMESS/		! moan constants
C
C Common Blocks
C
***     COMMON/CMN:MAPS/		! all about the maps
***	COMMON/CMN:OTRANS/
***	COMMON/CMN:OPTION/
***     COMMON/CMN:WORKS/		! info about worksatation
C
C Functions called
C
	LOGICAL		TRNSET
	LOGICAL		GEOG_TRANS_ARRAY
C
C Local Variables
C
	REAL		CPTS(4,4)	! corner point values as follows
					! x1,y1,x2,y2 NW
					! x1,y1,x2,y2 SW
					! x1,y1,x2,y2 SE
					! x1,y1,x2,y2 NE  where
					! x1,y1 are digitiser coords
					! x2,y2 are coords from IFF file
	INTEGER*4	I,J		! counters
	REAL		XEXT,YEXT	! X and Y extent
	LOGICAL		ABORT		! flag for abort
	LOGICAL		EXSTSU		! flag to use existing set up
	REAL*8		EXTENT(4)	! extreme range of map
	REAL*8		DX,DY
	INTEGER		SET		! set of saved setups we are using
	REAL		FIVE		! five % - a little under
	PARAMETER	(FIVE = 0.049999)
C
	SET = MAP_SETUP_TOTAL + 1
C
C check whether to set up map on table
C
	IF (.NOT.TABINI			! Table not initialised
     &	   .OR.TABSUP.EQ.0		! set up "NONE"
     &	   .OR..NOT.MAP_EXIST(MAP)
     &	   .OR..NOT.MAP_TABLE(MAP)
     &	   .OR.(SET.GT.MAX_SETUP)) THEN	! map not to be set up on tables
	   GOTO 999			! don't do anything
	ENDIF
C
C get corner points that were read in from IFF file (+ origin offset)
C
	DO 10, J=1,4
	   IF (DO_FLY_TRANS) THEN
	      CPTS(3,J) = CRNPTS(3,J,MAP)
	      CPTS(4,J) = CRNPTS(4,J,MAP)
	      IF (.NOT.GEOG_TRANS_ARRAY(MAP_SYS(MAP),MAP_ZONE(MAP),
     &	                                MAP_PARAMS(1,MAP),MAP_UNIT(MAP),
     &	                                MAPORG(1,MAP),
     &	                                LITES2SYS,LITES2ZONE,
     &	                                LITES2PAR,LITES2UNIT,LITES2ORG,
     &	                                1,CPTS(3,J))) GOTO 999
	   ELSE
	      DO 5, I=3,4				! only interested in IFF
	         CPTS(I,J)=CRNPTS(I,J,MAP)+MAPORG(I-2,MAP)	! output system
    5	      CONTINUE
	   ENDIF
   10	CONTINUE
C
C compute extents
C
	XEXT=ABS(MAX(CPTS(3,4)-CPTS(3,1),CPTS(3,3)-CPTS(3,2)))
	YEXT=ABS(MAX(CPTS(4,1)-CPTS(4,2),CPTS(4,4)-CPTS(4,3)))
C
C 
	MAP_SETUP(SET) = MAP
C
C switch on type of set up required
C
   20	CONTINUE
	GOTO (100,200,300,400) TABSUP
C
	CALL NASTY(MSG_UNKNOWNSETUP,TABSUP)
	CALL IGNCMD			! might as well carry on
	GOTO 999
C
C two point set up
C
  100	CONTINUE
	CALL DIG2PT(SET,CPTS,ABORT,EXSTSU)
	GOTO 500
C
C four point set up
C
  200	CONTINUE
	CALL DIG4PT(SET,CPTS,ABORT,EXSTSU)
	GOTO 500
C
C OS style multiple point setup set up
C
  300	CONTINUE
	CALL DIGOS(SET,CPTS,ABORT,EXSTSU)
	GOTO 500
C
C digitise points on edge of map
C
  400	CONTINUE
	CALL DIGEDGE(SET,CPTS,ABORT,EXSTSU)
	GOTO 500
C
C now go ahead and compute transformation data for this map
C
  500	CONTINUE
	IF (ABORT) THEN
	   CALL INFORM(MSG_SETUPABORT)
	   GOTO 999
	ELSEIF (EXSTSU) THEN
	   IF (TABSUP.NE.MAPTABSUP(SET)) CALL INFORM(MSG_SETUPWARN,
     &	          TS_TYPE(MAPTABSUP(SET))(1:TS_TYPE_LEN(MAPTABSUP(SET))),
     &	          TS_TYPE(TABSUP)(1:TS_TYPE_LEN(TABSUP)))
	   CALL INFORM(MSG_ACCPREVVAL)
	   GOTO 600
	ENDIF
C
C compute transformation parameters and check that they are OK 
C
	IF (TRNSET(TRNTYP,CPTS,CPSCOF(1,1,SET),XEXT,YEXT,.TRUE.)) GOTO 20
C
C save TRNTYP and TABSUP for this map
	MAPTABSUP(SET) = TABSUP
	MAPTRNTYP(SET) = TRNTYP
	OMPDEF(SET)=.TRUE.
	IF (TABSUP.EQ.TABSUP_OS) THEN
	   OSMDEF(SET)=.TRUE.
	ELSE
	   OSMDEF(SET)=.FALSE.
	ENDIF
C
C now work out a sensible area for map (in IFF units)
600	CONTINUE
	IF (DO_FLY_TRANS) THEN
	   EXTENT(1) = RANGE(1,MAP)
	   EXTENT(2) = RANGE(2,MAP)
	   EXTENT(3) = RANGE(3,MAP)
	   EXTENT(4) = RANGE(4,MAP)
	ELSE
	   EXTENT(1) = RANGE(1,MAP)+MAPORG(1,MAP)
	   EXTENT(2) = RANGE(2,MAP)+MAPORG(1,MAP)
	   EXTENT(3) = RANGE(3,MAP)+MAPORG(2,MAP)
	   EXTENT(4) = RANGE(4,MAP)+MAPORG(2,MAP)
	ENDIF
C
	DX = EXTENT(2)-EXTENT(1)
	DY = EXTENT(4)-EXTENT(3)
C
	LMTPTS(1,SET)=EXTENT(1) - FIVE*DX
	LMTPTS(2,SET)=EXTENT(2) + FIVE*DX
	LMTPTS(3,SET)=EXTENT(3) - FIVE*DY
	LMTPTS(4,SET)=EXTENT(4) + FIVE*DY
C
	MAP_SETUP_TOTAL=SET	! map successfully set up
	CALL INFORM(MSG_BLANK)		! leave blank line, if finished
					! with table
  999	CONTINUE 
	RETURN
	END
