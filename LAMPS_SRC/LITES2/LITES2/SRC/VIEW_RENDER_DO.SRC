        SUBROUTINE VIEW_RENDER_DO(TYPE,WORK_SIZE,WORK1,WORK2,WORK3)
C
***     IDENT   10MY96
***     MODULE  VIEW_RENDER_DO
C
C       Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C       Written                                 RWR	Apr-1989
C
C	LITES2 cartographic editor VIEW RENDER command.
C
        IMPLICIT NONE
C
***	PARAMETER/CMN:CONSTS/
***	PARAMETER/CMN:EFNLUN/
***	PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:STAPAR/
C
***	COMMON/CMN:DRAWIN/
***     COMMON/LSL$CMNDTI:DTIHDR/
***	COMMON/CMN:GLOBAL/
***	COMMON/CMN:IMAGE/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:MAPS/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:OVERLAY/
***	COMMON/CMN:STATE/
***	COMMON/CMN:VIEW/
C
C arguments
	INTEGER		TYPE	! = 1 render image
				! = 2 render IFF
	INTEGER		WORK_SIZE
	REAL		WORK1(WORK_SIZE)
	REAL		WORK2(WORK_SIZE)
	REAL		WORK3(WORK_SIZE)
C w/s
	INTEGER		RETCOD
	LOGICAL		HAD_IMAGE,HAD_SEL_IMAGE
	LOGICAL		IMAGE_RENDER(MAXIMAGE)	   ! exists and selected
	LOGICAL		IMAGE_WINDOW(MAXIMAGE)	   ! within view window
C
	INTEGER		VC
	EQUIVALENCE	(VC,VIEW_CURRENT)
C
	INTEGER		IM			! loop counter
	INTEGER		TOP,I
	INTEGER		PALETTE
	INTEGER		LEVEL
	INTEGER		DISPLAY,OVERLAY
	INTEGER		PIXLL(2)
	INTEGER		PIXUR(2)
C
	REAL*8		XX,YY
	REAL		X,Y
C
C Functions
	EXTERNAL	NASTY,MOAN
	INTEGER		CALLR
	INTEGER		ACT_GET_COLOUR_VALUE
C
C save current window
	CALL CPYPAK(4,WINDOW,WINSAV)
C
C check that we have enough information to continue
	IF (SINDEX.EQ.STATE_INITIAL.AND.
     &	        VIEW_LIMITS_METHOD(VC).NE.WINDOW_LIMITS) THEN
	   CALL MOAN(MSG_VIEWNOWIN)
	   CALL LEARN(MSG_USEVIEWCMD,'VIEW WINDOW LIMITS')
	   GOTO 9990
C
C check for at least one image read in and selected
	ELSE
	   HAD_IMAGE = .FALSE.
	   HAD_SEL_IMAGE = .FALSE.
	   DO 10 IM=MAXIMAGE,1,-1
	      IF (IMAGE_TYPE(IM).NE.0) HAD_IMAGE = .TRUE.	! exists
	      IF (IMSEL(IM)) HAD_SEL_IMAGE = .TRUE.		! select
	      IF (IMAGE_TYPE(IM).NE.0.AND.IMSEL(IM)) GOTO 11
10	   CONTINUE
	   IF (.NOT.HAD_IMAGE) THEN
	      CALL MOAN(MSG_NOIMAGES)
	      GOTO 9990
	   ELSE
	      CALL MOAN(MSG_NOIMGS)
	      GOTO 9990
	   ENDIF
11	   CONTINUE
	ENDIF
C
C initialise this view, if not done already
	IF (.NOT.VIEW_CREATED(VC)) THEN
C
C get clipping distances (these are horizontal distances)
	   IF (VIEW_BACK(VC).LE.0.0) THEN
	      VIEW_SLOPE_BACK(VC) = VIEW_DISTANCE(VC)
	   ELSE
	      VIEW_SLOPE_BACK(VC) = VIEW_BACK(VC)
	   ENDIF
	   VIEW_SLOPE_FRONT(VC) = VIEW_FRONT(VC)
C
C check that values are set correctly
	   IF (VIEW_PIXELS(1,VC).LT.1.OR.
     &	       VIEW_PIXELS(2,VC).LT.1) THEN
	      CALL MOAN(MSG_VIEWMISSING,'view size (in pixels)')
	      CALL LEARN(MSG_USEVIEWCMD,'VIEW PIXELS')
	      GOTO 9990
	   ELSEIF (.NOT.VIEW_FROM_SETUP(VC)) THEN
	      CALL MOAN(MSG_VIEWMISSING,'observer position')
	      CALL LEARN(MSG_USEVIEWCMD,'VIEW FROM')
	      GOTO 9990
	   ELSEIF (.NOT.VIEW_TO_SETUP(VC)) THEN
	      CALL MOAN(MSG_VIEWMISSING,'target position')
	      CALL LEARN(MSG_USEVIEWCMD,'VIEW TO')
	      GOTO 9990
	   ELSEIF (VIEW_SLOPE_FRONT(VC).LE.0.0) THEN
	      CALL MOAN(MSG_VIEWMISSING,'distance to front of view')
	      CALL LEARN(MSG_USEVIEWCMD,'VIEW FRONT')
	      GOTO 9990
	   ELSEIF (VIEW_SLOPE_BACK(VC).LE.VIEW_SLOPE_FRONT(VC)) THEN
	      CALL MOAN(MSG_VIEWINCONSIST,'back',
     &	                     'front clipping distance')
	      CALL LEARN(MSG_VIEWSORT,'VIEW FRONT','VIEW BACK')
	      GOTO 9990
	   ENDIF
C
	   RETCOD = CALLR(VIEW_ID(VC),			! output
     &	                  VIEW_LEVEL_TOTAL(VC),
     &	                  VIEW_PIXELS(1,VC),
     &	                  VIEW_PIXELS(2,VC),
     &	                  VIEW_FROM(1,VC),		! observer
     &	                  VIEW_FROM(2,VC),
     &	                  VIEW_FROM(3,VC),
     &	                  .TRUE.,			! use vectors
     &	                  VIEW_TO(1,VC)-VIEW_FROM(1,VC),
     &	                  VIEW_TO(2,VC)-VIEW_FROM(2,VC),
     &	                  VIEW_TO(3,VC)-VIEW_FROM(3,VC),
     &	                  VIEW_ROLL(VC)*PI/180.0,
     &	                  VIEW_ZSCALE(VC),
     &	                  VIEW_SLOPE_FRONT(VC),		 ! pass H dis
     &	                  VIEW_SLOPE_BACK(VC),		 ! pass H dis
     &	                  VIEW_CONE(VC)*PI/180.0,
     &	                  %VAL(VIEW_ADDRESSES(XVISA_SETUP_VIEW)))
C
C crude error message for now
	   IF (RETCOD) THEN
	      VIEW_CREATED(VC) = .TRUE.
	      DO 20, I=1,MAXLEVEL
	         VIEW_LEVEL_GENERATED(I,VC) = .FALSE.
	         VIEW_LEVEL_TERRAIN(I,VC) = .FALSE.
	         VIEW_LEVEL_VECTOR(I,VC)  = .FALSE.
	         VIEW_RENDERED_IMAGE_BITMAP(I,VC) = 0	! clear out bitmap
20	      CONTINUE
	   ELSE
	      CALL MOAN(MSG_VISLIBERR)
	      CALL LITES2_SIGNAL(RETCOD)
	      GOTO 9990
	   ENDIF
C
C pass any palettes that have been specified for this view
	   DO 50, PALETTE= 1,MAX_PALETTES
	      DO 50, LEVEL = 1,VIEW_LEVEL_TOTAL(VIEW_CURRENT)
	         IF (VIEW_HAD_PALETTE(PALETTE,LEVEL,VIEW_CURRENT)) THEN
	            DISPLAY = VIEW_PAL(1,PALETTE,LEVEL,VIEW_CURRENT)
	            OVERLAY = VIEW_PAL(2,PALETTE,LEVEL,VIEW_CURRENT)
	            TOP = 2**OVERLAY_PLANES(OVERLAY,DISPLAY)
	            TOP = MIN(TOP,WORK_SIZE)	! prevent array overflow
	            DO 40, I = 1,TOP
C
C get the required colour - 
C (colour indices start at 0)
	               RETCOD = ACT_GET_COLOUR_VALUE(
     &	                          OVERLAY_PTR(OVERLAY,DISPLAY),
     &		                  I-1,WORK1(I),WORK2(I),WORK3(I))
	               IF (.NOT.RETCOD) THEN
	                  CALL LITES2_SIGNAL(RETCOD)
	                  GOTO 9990
	               ENDIF
40	            CONTINUE
C
C pass this information to viewing module
	            RETCOD = CALLR(VIEW_ID(VIEW_CURRENT),
     &	                           LEVEL,
     &	                           PALETTE,
     &	                           TOP,	   		! number of colours
     &	                           WORK1, 		! red
     &	                           WORK2, 		! green
     &	                           WORK3, 		! blue
     &	                     %VAL(VIEW_ADDRESSES(XVISA_SETUP_PALETTE)))
	            IF (.NOT.RETCOD) THEN
	               CALL MOAN(MSG_VISLIBERR)
	               CALL LITES2_SIGNAL(RETCOD)
	               GOTO 9990
	            ENDIF
	         ENDIF
	      CONTINUE
50	   CONTINUE
	ENDIF
C
C get IFF value of window
	IF (VIEW_LIMITS_METHOD(VC).EQ.WINDOW_LIMITS) THEN
	   VIEW_POSLL(1) = VIEW_LIMITS(1,VC)
	   VIEW_POSLL(2) = VIEW_LIMITS(3,VC)
	   VIEW_POSUR(1) = VIEW_LIMITS(2,VC)
	   VIEW_POSUR(2) = VIEW_LIMITS(4,VC)
	ELSEIF (VIEW_LIMITS_METHOD(VC).EQ.WINDOW_MAP) THEN
	   VIEW_POSLL(1) = LIMITS(1)
	   VIEW_POSLL(2) = LIMITS(3)
	   VIEW_POSUR(1) = LIMITS(2)
	   VIEW_POSUR(2) = LIMITS(4)
	ELSEIF (VIEW_LIMITS_METHOD(VC).EQ.WINDOW_SCREEN) THEN
	   VIEW_POSLL(1) = WINDOW(1)
	   VIEW_POSLL(2) = WINDOW(3)
	   VIEW_POSUR(1) = WINDOW(2)
	   VIEW_POSUR(2) = WINDOW(4)
	ENDIF
C
C set up required window, for viewing IFF file
	WINDOW(1) = VIEW_POSLL(1)
	WINDOW(2) = VIEW_POSUR(1)
	WINDOW(3) = VIEW_POSLL(2)
	WINDOW(4) = VIEW_POSUR(2)
C       
C check for valid window
	IF (WINDOW(1).GE.WINDOW(2).OR.WINDOW(3).GE.WINDOW(4)) THEN
	   CALL MOAN(MSG_VIEWINVALWIN)
	   GOTO 9990
	ENDIF
C
C initialise image render and window flags to render all images
C
	DO 400 IM=MAXIMAGE,1,-1
	   IMAGE_RENDER(IM)=.TRUE.
	   IMAGE_WINDOW(IM)=.TRUE.
400	CONTINUE
C
C reset BASE image structure, when rendering images (not for IFF)
C
	IF (TYPE.EQ.1) THEN
	   RETCOD = CALLR(VIEW_ID(VC),
     &	                  VIEW_LEVEL(VC),
     &	                  %VAL(VIEW_ADDRESSES(XVISA_RESET_BASE_IMAGE)))
C
	   IF (.NOT.RETCOD) THEN
	      CALL MOAN(MSG_VISLIBERR)
	      CALL LITES2_SIGNAL(RETCOD)
	      GOTO 9990
	   ENDIF
	ENDIF
C
C Setup values for all selected images into VISALIB common
C
	DO 499 IM=MAXIMAGE,1,-1
C
C Check if image not selected or doesn't exist
C
	   IF (IMAGE_TYPE(IM).EQ.0 .OR. .NOT.IMSEL(IM)) THEN
	      IMAGE_RENDER(IM) = .FALSE.
	      GOTO 499
	   ENDIF
C
	   XX = IMAGE_ORIGIN(1,IM) - LITES2ORG(1)
	   YY = IMAGE_ORIGIN(2,IM) - LITES2ORG(2)
C
C Check if DTI is outside view window, but still pass to VISALIB common
C so that the resultant view parameters depend only on the selected image 
C combination, not on the window selected within them
C
	   IF ( (WINDOW(1) .GE. XX +
     &		  (IMAGE_COLUMNS(IM)-1)*IMAGE_PIXELSIZE(1,IM)) .OR.
     &		(WINDOW(3) .GE. YY +
     &		     (IMAGE_ROWS(IM)-1)*IMAGE_PIXELSIZE(2,IM)) .OR.
     &		(WINDOW(2) .LE. XX) .OR.
     &		(WINDOW(4) .LE. YY) ) THEN
	      IMAGE_WINDOW(IM) = .FALSE.
	   ENDIF
C
C get required pixels
	   PIXLL(1) = NINT( (VIEW_POSLL(1) - XX)/
     &			IMAGE_PIXELSIZE(1,IM) ) + 1
	   PIXLL(2) = NINT( (VIEW_POSLL(2) - YY)/
     &			IMAGE_PIXELSIZE(2,IM) ) + 1
	   PIXUR(1) = NINT( (VIEW_POSUR(1) - XX)/
     &			IMAGE_PIXELSIZE(1,IM) ) + 1
	   PIXUR(2) = NINT( (VIEW_POSUR(2) - YY)/
     &			IMAGE_PIXELSIZE(2,IM) ) + 1
C
C force within image
	   PIXLL(1) = MAX(PIXLL(1),1)
	   PIXLL(2) = MAX(PIXLL(2),1)
	   PIXUR(1) = MIN(PIXUR(1),IMAGE_COLUMNS(IM))
	   PIXUR(2) = MIN(PIXUR(2),IMAGE_ROWS(IM))
C
C temporary for R*8 -> R*4
	   X = IMAGE_ORIGIN(1,IM) - LITES2ORG(1)
	   Y = IMAGE_ORIGIN(2,IM) - LITES2ORG(2)
C
	   RETCOD = CALLR(IMAGE_LUN(IM),
     &	               X,			! note - pass R*4
     &	               Y,
     &	               IMAGE_PIXELSIZE(1,IM),
     &	               IMAGE_PIXELSIZE(2,IM),
     &	               IMAGE_COLUMNS(IM),
     &	               IMAGE_ROWS(IM),
     &	               IMAGE_CORNER(IM),
     &	               IMAGE_DIRECTION(IM),
     &	               PIXLL(1),                    
     &	               PIXLL(2),
     &	               PIXUR(1),
     &	               PIXUR(2),
     &	               IMAGE_RANGE(1,IM),
     &	               IMAGE_RANGE(2,IM),
     &	               DATA_TYPE(IMAGE_LUN(IM)),
     &	               VIEW_SAMPLE(1,VC),
     &	               VIEW_SAMPLE(2,VC),
     &	               %VAL(VIEW_ADDRESSES(XVISA_SETUP_DTI_VALUES)))
C
	   IF (.NOT.RETCOD) THEN
	      CALL MOAN(MSG_VISLIBERR)
	      CALL LITES2_SIGNAL(RETCOD)
	      GOTO 9990
	   ENDIF
C
	   RETCOD = CALLR(IMAGE_LUN(IM),
     &	               VIEW_COLOUR_METHOD(VC),
     &	               VIEW_MIN_COL_VAL,	! minimum colour val
     &	               VIEW_MAX_COL_VAL,	! maximum colour val
     &	               VIEW_SEA_COL_VAL,	! sea colour
     &	               VIEW_NULL_COL_VAL,	! null value
     &	               %VAL(VIEW_ADDRESSES(XVISA_SETUP_COLOUR_VALUES)))
C
	   IF (.NOT.RETCOD) THEN
	      CALL MOAN(MSG_VISLIBERR)
	      CALL LITES2_SIGNAL(RETCOD)
	      GOTO 9990
	   ENDIF
C
C set selected images as BASE images
C
	   IF (TYPE.EQ.1) THEN
C
	      RETCOD = CALLR(VIEW_ID(VC),
     &	                  VIEW_LEVEL(VC),
     &	                  IMAGE_LUN(IM),
     &	                  %VAL(VIEW_ADDRESSES(XVISA_SET_BASE_IMAGE)))
C
	      IF (.NOT.RETCOD) THEN
	         CALL MOAN(MSG_VISLIBERR)
	         CALL LITES2_SIGNAL(RETCOD)
	         GOTO 9990
	      ENDIF
	   ENDIF
C
499	CONTINUE
C
C look at each selected image for rendering
C
	DO 500 IM=MAXIMAGE,1,-1
	   IF (.NOT.IMAGE_RENDER(IM)) GOTO 500	! not to be rendered
	   IF (.NOT.IMAGE_WINDOW(IM)) GOTO 500	! not in window
C
C Dispatch according to type of rendering (1 = IMAGE, 2 = IFF)
	   GOTO (100,200), TYPE
C
C Tertiary command number out of range
	   CALL MSGCMD(NASTY,MSG_ERRTERIND)
	   GOTO 9990
C
C VIEW RENDER IMAGE - generate a view of terrain
C
C and now render this image
100	   CONTINUE
C
	   RETCOD = CALLR(VIEW_ID(VC),
     &	                  VIEW_LEVEL(VC),
     &	                  IMAGE_LUN(IM),
     &	                  INFOPT,
     &	                  %VAL(VIEW_ADDRESSES(XVISA_RENDER_DTI_GRID)))
C
	   IF (.NOT.RETCOD) THEN
	      CALL MOAN(MSG_VISLIBERR)
	      CALL LITES2_SIGNAL(RETCOD)
	      GOTO 9990
	   ENDIF
C
	   CALL LIB$INSV(1,IM,1,VIEW_RENDERED_IMAGE_BITMAP(VIEW_LEVEL(VC),
     &	                              VC))
	   VIEW_LEVEL_TERRAIN(VIEW_LEVEL(VC),VC) = .TRUE.
	   VIEW_LEVEL_RENDERED(VIEW_LEVEL(VC),VC) = .TRUE.
	   GOTO 500
C
C VIEW RENDER IFF - generate a view of map data
200 	   CONTINUE
C
C put DTI lun in common
	   VIEW_DTILUN = IMAGE_LUN(IM)
C
C render the data in this window against this image
	   CALL VIEWVIEW
C
	   VIEW_LEVEL_VECTOR(VIEW_LEVEL(VC),VC) = .TRUE.
	   VIEW_LEVEL_RENDERED(VIEW_LEVEL(VC),VC) = .TRUE.
C
	   GOTO 500
500	CONTINUE	! end of images
C	
	GOTO 9999
C
9990	CALL IGNCMD
9999	CONTINUE
C
C restore current window
	CALL CPYPAK(4,WINSAV,WINDOW)
C
	RETURN
        END
