C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-03-04 18:20:10.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION PARALINE(CTXD,GAP)
C
***	IDENT   04MR96
***	MODULE  PARALINE
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Written                                 RWR	 6-Nov-1987
C
C To output a line of a paragraph; returns .TRUE.if failure
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:CTXS/
***	PARAMETER/CMN:PACK/
C
***	COMMON/CMN:CTXS/
***	COMMON/CMN:PARA/
C
C arguments
	INTEGER		CTXD(CTXDLEN)	! ctx block that line of text
					! is to be added to
	REAL		GAP		! distance between CTXs
C
C w/s
	REAL		AUX(AUXLEN)	! auxiliary array
	REAL		XY(2)
	INTEGER		ADDR
	REAL		X,Y
	LOGICAL		DUMMY
C
C functions called
	INTEGER*4	LIB$EXTZV
	LOGICAL		GENAUX
	LOGICAL		ADDDEF
C
	PARALINE = .TRUE.		! assume failure
C
C add the last (current line)
	IF (.NOT.PARA_FIRST_LINE) THEN
C
C offset to the next line
	   PARA_CURRXY(1) = PARA_CURRXY(1) + PARA_OFFDST_Y*PARA_SINANG
	   PARA_CURRXY(2) = PARA_CURRXY(2) - PARA_OFFDST_Y*PARA_COSANG
	ELSE
C
C offset to position relative to whole line
	   PARA_CURRXY(1) = PARA_CURRXY(1) + PARA_OFFDST_X*PARA_COSANG
	   PARA_CURRXY(2) = PARA_CURRXY(2) + PARA_OFFDST_X*PARA_SINANG
	   PARA_FIRST_LINE = .FALSE.
	ENDIF
C
C initialise loop
	ADDR = PARA_LINE_ADDR
C
C calculate lower left point of line
	X = PARA_LINE_LEN/2.0*PARA_DX
	Y = PARA_LINE_HEIGHT/2.0*PARA_DY
	XY(1) = PARA_CURRXY(1) - X*PARA_COSANG + Y*PARA_SINANG
	XY(2) = PARA_CURRXY(2) - X*PARA_SINANG - Y*PARA_COSANG
C
C loop
100	CONTINUE
C
C correct FC in PACK, for GENAUXing
	PARA_DUMPAK(PAKFC) = LIB$EXTZV(0,16,%VAL(ADDR+CTX_O_TS))
C
C genaux current text
	IF (GENAUX(1,XY,
     &	          %VAL(ADDR+CTX_O_AUX),
     &	          %VAL(ADDR+CTX_O_DESC),
     &	          %VAL(ADDR+CTX_O_RO),
     &	          %VAL(ADDR+CTX_O_TH),
     &	          PARA_DUMPAK,
     &	          %VAL(ADDR+CTX_O_TS))) GOTO 999
C
C and calculate locating point, from start of text
	CALL CPYPAK(AUXLEN,%VAL(ADDR+CTX_O_AUX),AUX)
	X = XY(1) - AUX(MINXI)*PARA_COSANG + AUX(MINYI)*PARA_SINANG
	Y = XY(2) - AUX(MINXI)*PARA_SINANG - AUX(MINYI)*PARA_COSANG
C
C put coords back
	CALL PUTLNG(X,%VAL(ADDR+CTX_O_X))
	CALL PUTLNG(Y,%VAL(ADDR+CTX_O_Y))
C
C Z coordinate of this feature, if required
	IF (PARA_Z_REQD) THEN
	   IF (.NOT.ADDDEF(%VAL(ADDR+CTX_O_ATTR),IFF_C_Z,
     &	            PARA_Z_VALUE,DUMMY)) GOTO 999
	ENDIF
C
C lower left of next text is located at lower right of current text
	IF (ADDR.NE.CTXD(CTXD_LSTCTX)) THEN
	   XY(1) = XY(1) + (AUX(MAXXI) - AUX(MINXI))*PARA_COSANG
     &	                      + GAP*PARA_COSANG
	   XY(2) = XY(2) + (AUX(MAXXI) - AUX(MINXI))*PARA_SINANG
     &	                      + GAP*PARA_SINANG
	   CALL PUTLNG(%VAL(ADDR+CTX_O_NXTPTR),ADDR)
	   GOTO 100
	ENDIF
C
	PARALINE = .FALSE.		! success
C
999	CONTINUE
	RETURN
	END
