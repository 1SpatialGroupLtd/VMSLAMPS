C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-05-10 11:00:08.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        SUBROUTINE DOGEOM
C
***     IDENT	10MY96
***     MODULE  DOGEOM
C
C       Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C       Written                                 RWR 	7-Oct-1993
C
C	LITES2 cartographic editor GEOMETRY command.
C
        IMPLICIT NONE
C
***	PARAMETER/CMN:LICPAR/
***     PARAMETER/CMN:MOANMESS/         ! moan constants
C
***     COMMON/CMN:DOUT/                ! cmd dec. output
***     COMMON/CMN:DRAWIN/
***	COMMON/CMN:GLOBAL/
***     COMMON/CMN:MASTER/
***	COMMON/CMN:GEOM/
C
C Functions called
	EXTERNAL	NASTY,MOAN
	LOGICAL		SETUP_USER
	LOGICAL		CHKENTRY
	LOGICAL		GEOM_FEATURE
	LOGICAL		GEOM_REG
	LOGICAL		LICENSED
C
C Local Variables
	INTEGER		RET_CODE
	INTEGER		GEOM
	INTEGER		DIMENSION
	INTEGER		COMB_CODE
	INTEGER		I
	REAL		RADIUS,VECT_LEN
	LOGICAL		IS_CLEAR
	INTEGER		TRY
	LOGICAL		COPY
C
	INTEGER		TRY_MAX
	PARAMETER	(TRY_MAX = 4)
C
C check for licence
	IF (.NOT.LICENSED(LOCK_GEOMETRY)) GOTO 9999
C
C need shareable image
	IF (.NOT.GEOM_SETUP) THEN
	   GEOM_SETUP = SETUP_USER(GEOM_LOG_NAME,
     &	                           GEOM_MAX_ROUTINES,
     &	                           GEOM_NAMES,GEOM_ADDRESSES,
     &	                           'GEOMETRY routines',
     &	                           'GEOMETRY manipulation',
     &	                           'GEOMETRY',GEOM_MAPPED)
	   IF (.NOT.GEOM_SETUP) GOTO 9999
C
C check that all entry points have been found
	   GEOM_SETUP = .NOT.CHKENTRY(GEOM_LOG_NAME,GEOM_MAX_ROUTINES,
     &	                              GEOM_NAMES,GEOM_ADDRESSES)
	   IF (.NOT.GEOM_SETUP) GOTO 9999
C
C initialise shared image
	   CALL CALLR(RET_CODE,%VAL(GEOM_ADDRESSES(XSH_INIT)))
	ENDIF
C
C Dispatch according to secondary command
	GOTO (100,200,300,400,500,600,700,800,900,1000,
     &	      1100,1200,1300), DSECN
C
C Secondary command number out of range
	CALL MSGCMD(NASTY,MSG_ERRSECIND)
	GOTO 9999
C
C GEOMETRY FEATURE
100	CONTINUE
	IF (DNINT.LE.0) THEN
	   CALL MOAN(MSG_CMDLIBEOL,'command',
     &			DPRI(:DPRIL)//' '//DSEC(:DSECL) )
	   GOTO 9999
	ENDIF
	GEOM = DINTS(1)
	IF (GEOM.LT.1.OR.GEOM.GT.MAX_GEOM) THEN
	   CALL MOAN(MSG_INVALGEOMNO,GEOM,1,MAX_GEOM)
	   GOTO 9999
	ENDIF
	IF (GEOMETRY(GEOM) .NE. 0) THEN
	   CALL MOAN(MSG_GEOMDEFINED,GEOM)
	   GOTO 9999
	ENDIF
	DIMENSION = -1
	IF (DNINT .EQ. 2) THEN
	   DIMENSION = DINTS(2)
	   IF (DIMENSION .LT. 1 .OR.DIMENSION .GT. 2) THEN
	      CALL MOAN(MSG_INVALGEOMDIM,DIMENSION,1,2)
	      GOTO 9999
	   ENDIF
	ENDIF
	IF (GEOM_FEATURE(GEOMETRY(GEOM),DIMENSION)) GOTO 9999
	GOTO 10000
C
C GEOMETRY REGION
 200	CONTINUE
	GEOM = DINTS(1)
	IF (GEOM.LT.1.OR.GEOM.GT.MAX_GEOM) THEN
	   CALL MOAN(MSG_INVALGEOMNO,GEOM,1,MAX_GEOM)
	   GOTO 9999
	ENDIF
	IF (GEOMETRY(GEOM) .NE. 0) THEN
	   CALL MOAN(MSG_GEOMDEFINED,GEOM)
	   GOTO 9999
	ENDIF
	IF (GEOM_REG(GEOM,DINTS(2),.TRUE.)) GOTO 9999
	GOTO 10000
C
C GEOMETRY CANCEL
 300	CONTINUE
	GEOM = DINTS(1)
	IF (GEOM.LT.1.OR.GEOM.GT.MAX_GEOM) THEN
	   CALL MOAN(MSG_INVALGEOMNO,GEOM,1,MAX_GEOM)
	   GOTO 9999
	ENDIF
C
	CALL GEOM_DESTROY(GEOMETRY(GEOM))
C
C if this was selected geometry, then selection by geometry is now off
	IF (GEOM .EQ. SELECTED_GEOM) THEN
	   SELECTED_GEOM = 0
	   SELECT_IN_GEOM = .FALSE.
	   SELECT_OUT_GEOM = .FALSE.
	   SELECT_CUT_GEOM = .FALSE.
	   SAGEOMS=.TRUE.
	   CHASEL = .TRUE.
	ENDIF
	GOTO 10000
C       
C GEOMETRY ADD
 400	CONTINUE
C       
C check that input geometry is valid
	GEOM = DINTS(1)
	IF (GEOM.LT.1.OR.GEOM.GT.MAX_GEOM) THEN
	   CALL MOAN(MSG_INVALGEOMNO,DINTS(1),1,MAX_GEOM)
	   GOTO 9999
	ENDIF
	IF (GEOMETRY(GEOM) .EQ. 0) THEN
	   CALL MOAN(MSG_GEOMNOTDEF,GEOM)
	   GOTO 9999
	ENDIF
C
C cannot add a geometry to itself
	IF (DINTS(1) .EQ. DINTS(2)) THEN
	   CALL MOAN(MSG_NOSELFADD)
	   GOTO 9999
	ENDIF
C       
C       add it to the second geometry
	CALL CALLR(%VAL(GEOMETRY(GEOM)),
     &	     GEOMETRY(DINTS(2)),
     &	     %VAL(.TRUE.),
     &	     RET_CODE,
     &	     %VAL(GEOM_ADDRESSES(XGEOM_ADD)))
	IF (RET_CODE .NE. 0) THEN
	   IF (RET_CODE .LT.0) THEN
	      IF (RET_CODE .EQ.-2) THEN
		 CALL MOAN(MSG_DIFFGEOMTYPES)
	      ELSEIF (RET_CODE .EQ.-3) THEN
		 CALL MOAN(MSG_ONLYADDSIMP)
	      ELSE
		 CALL MOAN(MSG_GEOMERROR)
	      ENDIF
	   ELSE
	      CALL MOAN(MSG_GEOMERROR)
	      CALL CALLR(%VAL(RET_CODE),
     &		   RET_CODE,
     &		   %VAL(GEOM_ADDRESSES(XPR_MESS)))
	      CALL WRITEF
	   ENDIF
	   GOTO 9999
	ENDIF
	GOTO 10000
C
C GEOMETRY BUFFER
 500	CONTINUE
C       
C check that input and output geometries are valid
	DO 510, I = 1,2
	   IF (DINTS(I).LT.1.OR.DINTS(I).GT.MAX_GEOM) THEN
	      CALL MOAN(MSG_INVALGEOMNO,DINTS(1),1,MAX_GEOM)
	      GOTO 9999
	   ENDIF
	   IF (I .LT. 2) THEN
	      IF (GEOMETRY(DINTS(I)) .EQ. 0) THEN
		 CALL MOAN(MSG_GEOMNOTDEF,DINTS(I))
		 GOTO 9999
	      ENDIF
	   ELSE
	      IF (GEOMETRY(DINTS(I)) .NE. 0) THEN
		 CALL MOAN(MSG_GEOMDEFINED,DINTS(I))
		 GOTO 9999
	      ENDIF
	   ENDIF
 510	CONTINUE
C
C get radius (may be given in mm in future)
	RADIUS = ABS(DREALS(1))
	IF (RADIUS .EQ. 0.0) THEN
	   CALL MOAN(MSG_NOTZERO)
	   GOTO 9999
	ENDIF
	CALL TSTUNT(.TRUE.,1,RADIUS)		! expecting IFF units
C
C and calculate vector length from this (using tolerances for generated
C arcs)
	VECT_LEN=CIGIFF(1)
	IF (CIGIFF(2).NE.0.0) VECT_LEN=VECT_LEN+CIGIFF(2)*SQRT(RADIUS)
	IF (CIGIFF(3).NE.0.0) VECT_LEN=VECT_LEN+CIGIFF(3)*RADIUS
C
C do the combination
	TRY = 1
 520	CALL CALLR(%VAL(GEOMETRY(DINTS(1))),
     &	           GEOMETRY(DINTS(2)),
     &	           %VAL(RADIUS),
     &	           %VAL(VECT_LEN),
     &	           RET_CODE,
     &	           %VAL(GEOM_ADDRESSES(XGEOM_BUFF)))
	IF (RET_CODE .NE. 0) THEN
	   IF (RET_CODE .LT. 0) THEN
	      IF (RET_CODE .EQ. -2) THEN
		 IF (TRY .GT. TRY_MAX) THEN
		    CALL MOAN(MSG_NOBUFFCREATED)
		    CALL LEARN(MSG_VECTSTOOLONG)
		 ELSE
		    VECT_LEN = VECT_LEN *0.5
		    TRY = TRY + 1
		    CALL INFORM(MSG_TRYBUFFAGAIN,VECT_LEN)
		    GOTO 520
		 ENDIF
	      ELSE
		 CALL MOAN(MSG_GEOMERROR)
	      ENDIF
	   ELSE
	      CALL MOAN(MSG_GEOMERROR)
	      CALL CALLR(%VAL(RET_CODE),
     &		   RET_CODE,
     &		   %VAL(GEOM_ADDRESSES(XPR_MESS)))
	      CALL WRITEF
	   ENDIF
	   GOTO 9999
	ENDIF
	GOTO 10000
C
C GEOMETRY AND
 600	CONTINUE
	COMB_CODE = 2
	GOTO 1010
C
C GEOMETRY OR
 700	CONTINUE
	COMB_CODE = 1
	GOTO 1010
C
C GEOMETRY XOR
 800	CONTINUE
	COMB_CODE = 3
	GOTO 1010
C
C GEOMETRY ANDNOT
 900	CONTINUE
	COMB_CODE = 4
	GOTO 1010
C
C GEOMETRY NOTAND
 1000	CONTINUE
	COMB_CODE = 5
 1010	CONTINUE
C
C check that geometries 1 and 2 exist, and that geometry 3 does not
	DO 1020, I = 1,3
	   IF (DINTS(I).LT.1.OR.DINTS(I).GT.MAX_GEOM) THEN
	      CALL MOAN(MSG_INVALGEOMNO,DINTS(1),1,MAX_GEOM)
	      GOTO 9999
	   ENDIF
	   IF (I .LT. 3) THEN
	      IF (GEOMETRY(DINTS(I)) .EQ. 0) THEN
		 CALL MOAN(MSG_GEOMNOTDEF,DINTS(I))
		 GOTO 9999
	      ENDIF
	   ELSE
	      IF (GEOMETRY(DINTS(I)) .NE. 0) THEN
		 CALL MOAN(MSG_GEOMDEFINED,DINTS(I))
		 GOTO 9999
	      ENDIF
	   ENDIF
 1020	CONTINUE
C
C do the combination
	GEOM = DINTS(3)
	CALL CALLR(%VAL(GEOMETRY(DINTS(1))),
     &	           %VAL(GEOMETRY(DINTS(2))),
     &	           %VAL(COMB_CODE),
     &	           GEOMETRY(GEOM),
     &	           RET_CODE,
     &	           %VAL(GEOM_ADDRESSES(XGEOM_COMB)))
	IF (RET_CODE .NE. 0) THEN
	   IF (RET_CODE .LT. 0) THEN
	      IF (RET_CODE .EQ. -4) THEN
		 CALL MOAN(MSG_INVALGEOMTYPES)
	      ELSEIF (RET_CODE .EQ. -3) THEN
		 CALL MOAN(MSG_STRING,'One of geometries has no data')
	      ELSE
		 CALL MOAN(MSG_GEOMERROR)
	      ENDIF
	   ELSE
	      CALL MOAN(MSG_GEOMERROR)
	      CALL CALLR(%VAL(RET_CODE),
     &		   RET_CODE,
     &		   %VAL(GEOM_ADDRESSES(XPR_MESS)))
	      CALL WRITEF
	   ENDIF
	   GOTO 9999
	ENDIF
C
C check to see if we have produced a clear geometry. If we have, quietly
C cancel it
	CALL CALLR(%VAL(GEOMETRY(GEOM)),
     &	           IS_CLEAR,
     &	           RET_CODE,
     &	           %VAL(GEOM_ADDRESSES(XTEST_CLEAR)))
	IF (RET_CODE .NE. 0) THEN
	   CALL MOAN(MSG_GEOMERROR)
	   IF (RET_CODE .GT. 0) THEN
	      CALL CALLR(%VAL(RET_CODE),
     &		   RET_CODE,
     &		   %VAL(GEOM_ADDRESSES(XPR_MESS)))
	      CALL WRITEF
	   ENDIF
	   GOTO 9999
	ENDIF
	IF (IS_CLEAR)
     &	     CALL GEOM_DESTROY(GEOMETRY(GEOM))
	GOTO 10000
C
C GEOMETRY COPY
 1100	CONTINUE
	COPY = .TRUE.
	GOTO 1210
C
C GEOMETRY RENAME
 1200	CONTINUE
	COPY = .FALSE.
	GOTO 1210
C
C check that first geometry exists, that second doesn't
 1210	CONTINUE
	DO 1220, I = 1,2
	   IF (DINTS(I).LT.1.OR.DINTS(I).GT.MAX_GEOM) THEN
	      CALL MOAN(MSG_INVALGEOMNO,DINTS(1),1,MAX_GEOM)
	      GOTO 9999
	   ENDIF
	   IF (I .LT. 2) THEN
	      IF (GEOMETRY(DINTS(I)) .EQ. 0) THEN
		 CALL MOAN(MSG_GEOMNOTDEF,DINTS(I))
		 GOTO 9999
	      ENDIF
	   ELSE
	      IF (GEOMETRY(DINTS(I)) .NE. 0) THEN
		 CALL MOAN(MSG_GEOMDEFINED,DINTS(I))
		 GOTO 9999
	      ENDIF
	   ENDIF
 1220	CONTINUE
C
C  if renaming, do it now,
	IF (.NOT.COPY) THEN
	   GEOMETRY(DINTS(2)) = GEOMETRY(DINTS(1))
	   GEOMETRY(DINTS(1)) = 0
	ELSE
C
C otherwise call appropriate routine in shared image
	   CALL CALLR(%VAL(GEOMETRY(DINTS(1))),
     &		      GEOMETRY(DINTS(2)),
     &		      RET_CODE,
     &	              %VAL(GEOM_ADDRESSES(XGEOM_COPY)))
	   IF (RET_CODE .NE. 0) THEN
	      CALL MOAN(MSG_GEOMERROR)
	      IF (RET_CODE .GT. 0) THEN
		 CALL CALLR(%VAL(RET_CODE),
     &		      RET_CODE,
     &		      %VAL(GEOM_ADDRESSES(XPR_MESS)))
		 CALL WRITEF
	      ENDIF
	      GOTO 9999
	   ENDIF
	ENDIF
	GOTO 10000
C       
C GEOMETRY DEBUG
 1300	CONTINUE
C
C check for licence
	IF (.NOT.LICENSED(LOCK_DEVELOPMENT)) GOTO 9999
C
C call appropriate routine in shared image
	CALL CALLR(GEOMETRY(DINTS(1)),
     &	     GEOMETRY(DINTS(2)),
     &	     GEOMETRY(DINTS(3)),
     &	     %VAL(DREALS(1)),
     &	     RET_CODE,
     &	     %VAL(GEOM_ADDRESSES(XDEBUG)))
	IF (RET_CODE .NE. 0) THEN
	   CALL MOAN(MSG_GEOMERROR)
	   IF (RET_CODE .GT. 0) THEN
	      CALL CALLR(%VAL(RET_CODE),
     &		   RET_CODE,
     &		   %VAL(GEOM_ADDRESSES(XPR_MESS)))
	      CALL WRITEF
	   ENDIF
	   GOTO 9999
	ENDIF
C
	GOTO 10000
C
C error exit
 9999	CALL IGNCMD
C
10000	CONTINUE
	RETURN
        END
