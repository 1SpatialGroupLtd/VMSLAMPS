C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1995-01-27 10:00:52.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        SUBROUTINE DOSEAR
C
***     IDENT   27JA95
***     MODULE  DOSEAR
C
C       Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C       Written					CCB	 8-OCT-1984
C
C	LITES2 cartographic editor SEARCH command.
C	NB Also called from EDGMAT to perform searches for edgematching
C	so beware of altering the secondary command numbers.
C
        IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:AUXDEF/
***     PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:PACK/
***     PARAMETER/CMN:STAPAR/
C
***	COMMON/CMN:CNSTRN/
***     COMMON/CMN:DOUT/
***     COMMON/CMN:EDGE/
***	COMMON/LSL$CMNFRT:FRTCOM/
***	COMMON/CMN:GLOBAL/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:STATE/
***	COMMON/CMN:STRIKE/
C
C functions called
	INTEGER		FINSTR
C
	EXTERNAL	MOAN,NASTY
C
C local variables
	LOGICAL*1 RECING
	LOGICAL*1 SVINSP,SVSEAN
	INTEGER	SVNFRS,SVFTXP
	INTEGER*4 OLD_LASPAK
	INTEGER*4 TMPPAK
	INTEGER*4 PACK(PAKLEN)	! a data pack
C
C no checks if edgematching
	IF (.NOT.EDGING) THEN
	   IF (ROLING) THEN
	      CALL MOAN(MSG_CONSTRAINED)
	      CALL LEARN(MSG_SEARCHCONS)
	      GOTO 9000
	   ENDIF
C
C Check state (beware explicit secondary numbers)
C RECOVER state OK only if SEARCH DELETED or SEARCH NEXT for deleted
C Assorted 'editing' states not valid for these.
C
	   RECING= DSECN.EQ.6.OR.((DSECN.EQ.4.OR.DSECN.EQ.0).AND.SEADEL)
	   IF ((SINDEX.EQ.STATE_RECOVER.AND..NOT.RECING).OR.
     &		((SINDEX.EQ.STATE_EDIT.OR.SINDEX.EQ.STATE_MODIFY.OR.
     &		SINDEX.EQ.STATE_WINDOW.OR.SINDEX.EQ.STATE_CONSTRUCT).AND.
     &			RECING) ) THEN
	      CALL MSGCMD(MOAN,MSG_CMDNOTVALID)
	      GOTO 9000
	   ENDIF
	ENDIF
C
C Despatch according to secondary command
C
	GOTO ( 100, 200, 300, 400, 500, 600, 700 ), DSECN
C
C Secondary command number out of range
C
	IF (DSECN.EQ.0) GOTO 400	! default to NEXT
	CALL MSGCMD(NASTY,MSG_ERRSECIND)
	GO TO 9000
C
C Secondary command ALL
C
100	INSPIR = .FALSE.
	NFRSTN = 0			! no NF restriction
	FTXPTR = 0			! no text either
	SEADEL = .FALSE.		! not deleted
	SEANEA = .FALSE.		! no search for nearest
	GOTO 1000
C
C Secondary command TEXT
C
200	CALL SETAUX(%REF(DSTR),DSTRL)	! set buffer onto string
	FTXPTR = FINSTR(FTXCHR,'text')	! get string
	IF (MOANED) GOTO 9000
	IF (FTXPTR.EQ.0) THEN		! can't search for zero length
	   CALL MOAN(MSG_TEXTTOOSHORT)
	   GOTO 9000
	ENDIF
	INSPIR = .FALSE.		! not yet in spiral search
	NFRSTN = 0			! no NF restriction
	SEADEL = .FALSE.		! not deleted
	SEANEA = .FALSE.		! no search for nearest
	GOTO 1000
C
C Secondary command FSN/NF
C
300	IF (DNINT.LE.0) THEN
	   CALL MOAN(MSG_CMDLIBEOL,'command',
     &			DPRI(:DPRIL)//' '//DSEC(:DSECL) )
	   GOTO 9000
	ENDIF
	INSPIR = .FALSE.		! not yet in spiral search
	NFRSTN = DINTS(1)		! required NF number
	MPRSTN = -1			! assume no required map
	IF (DNINT.GT.1) MPRSTN = DINTS(2)-1	! required map
	FTXPTR = 0			! no required text
	SEADEL = .FALSE.		! not deleted
	SEANEA = .FALSE.		! no search for nearest
	GOTO 1000
C
C Secondary command NEXT
C
400	IF (.NOT.INSPIR) THEN
	   CALL MOAN(MSG_NOSEARCH)	! no search to get next
	   GOTO 9000
	ENDIF
	GOTO 1000
C
C Secondary command LAST
C
500	IF (LASPAK.EQ.0) THEN
	   CALL MOAN(MSG_NOLASTITEM)
	   GOTO 9000
	ENDIF
C
C if ENDS are enabled, for linear features, make sure that LASPAK is an
C end pack, so that FIND will not reject it
	IF (ENDOPT) THEN
	   OLD_LASPAK = LASPAK
	   CALL GETPAK(PACK,%VAL(LASPAK))
	   TMPPAK = PACK(PAKLNK)
	   IF (PACK(PAKGT).EQ.LINTYP.OR.
     &	       PACK(PAKGT).EQ.CURTYP.OR.
     &	       PACK(PAKGT).EQ.STRTYP.OR.
     &	       PACK(PAKGT).EQ.ARETYP) THEN
C
C if this pack is an end, then continue
510	      IF ((PACK(PAKFLG).AND.(FSTFLG.OR.LSTFLG)).NE.0) THEN
	         GOTO 520
C
C otherwise try next pack in chain
	      ELSE
	         LASPAK = TMPPAK
	         CALL GETPAK( PACK, %VAL(TMPPAK) )
	         TMPPAK = PACK(PAKLNK)
C
C if we are back where we started, continue, and let FIND fail
C (should never happen)
	         IF (LASPAK.EQ.OLD_LASPAK) GOTO 520
	      ENDIF
C
C loop
	      GOTO 510
	   ENDIF
	ENDIF
C
C if ENCLOSING is enabled, then make sure we do not have a pack
C for the interior of an area, since FIND will reject it
C (NB if we checked for ENDS above, then never get here, but end
C  packs are always exterior)
C Don't bother fo check GT for area - could change to line if
C FRT changed, and texts and symbols have an ST pointer of -1
	IF (ENCOPT) THEN
	   OLD_LASPAK = LASPAK
	   CALL GETPAK(PACK,%VAL(LASPAK))
	   TMPPAK = PACK(PAKLNK)
C
C if this pack is non-interior, then continue
512	   IF (PACK(PAKPST).NE.0) THEN
	      GOTO 520
C
C otherwise try next pack in chain
	   ELSE
	      LASPAK = TMPPAK
	      CALL GETPAK( PACK, %VAL(TMPPAK) )
	      TMPPAK = PACK(PAKLNK)
C
C if we are back where we started, continue, and let FIND fail
C (should never happen)
	      IF (LASPAK.EQ.OLD_LASPAK) GOTO 520
	   ENDIF
	   GOTO 512
	ENDIF
C
520	SVINSP = INSPIR
	SVNFRS = NFRSTN
	SVFTXP = FTXPTR
	SVSEAN = SEANEA
	INSPIR = .FALSE.
	NFRSTN = 0			! no NF restriction
	FTXPTR = 0			! no text either
	SEANEA = .FALSE.		! no search for nearest
	SEAPAK = LASPAK			! pack to search for
	SPIRAL = .TRUE.			! perform spiral search
	CALL FINREC			! do search
	INSPIR = SVINSP			! restore settings
	NFRSTN = SVNFRS
	FTXPTR = SVFTXP
	SEANEA = SVSEAN
	SEAPAK = 0			! no particular pack now
	GOTO 9999
C
C Secondary command DELETED
C
600	INSPIR = .FALSE.		! not yet in spiral search
	NFRSTN = 0			! no required NF number
	FTXPTR = 0			! no required text
	SEADEL = .TRUE.			! search for deleted
	SEANEA = .FALSE.		! no search for nearest
	GOTO 1000
C
C Secondary command NEAREST
C
700	INSPIR = .FALSE.
	NFRSTN = 0			! no NF restriction
	FTXPTR = 0			! no text either
	SEADEL = .FALSE.		! not deleted
	SEANEA = .TRUE.			! search for nearest
	CALL SECNEA(.TRUE.)		! get list of sectors
	GOTO 1000
C
1000	SPIRAL = .TRUE.			! perform spiral search
	LIMCNS = SEADEL			! want deleted?
	SRCHNG = .TRUE.			! searching, not locating
	CALL FINREC			! do search
	LIMCNS = .FALSE.
	GOTO 9999
C
9000	CALL IGNCMD
C
9999	RETURN
	END
