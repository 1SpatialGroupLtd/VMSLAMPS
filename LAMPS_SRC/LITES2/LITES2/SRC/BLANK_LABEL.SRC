	SUBROUTINE BLANK_LABEL(X,Y,Z,TEXT,FONT,ANG,SIZ,HWT)
C
***	IDENT   13MY96
***	MODULE  BLANK_LABEL
C
C	Copyright Laser-Scan Ltd., Cambridge, England.
C
C	Created					RWR	 12-Sep-1989
C
C to blank out area behind a label text
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:AUXDEF/
C
***	COMMON/CMN:DRAWIN/
C
C Arguments
	REAL		X,Y		! locating point
	REAL		Z
	CHARACTER*(*)	TEXT
	INTEGER		FONT
	REAL		ANG
	REAL		SIZ
	LOGICAL		HWT
C
C functions
	LOGICAL		TRISCN
C
C Local Variables
	REAL		XOUT(5),YOUT(5)	! output coordinates
	REAL		ZOUT(5)
	REAL		AUX(AUXLEN)	! auxiliary array
	REAL 		ANGLE
	REAL 		COSINE,SINE	! of the angle
	REAL 		SIZE
	REAL 		MINX,MAXX,MINY,MAXY ! extents (allowing for size)
C
C Text auxiliary array
	EQUIVALENCE	(AUX(ANGI),ANGLE),
     &			(AUX(COSI),COSINE),
     &			(AUX(SINI),SINE),
     &			(AUX(SIZI),SIZE),
     &			(AUX(MINXI),MINX),
     &			(AUX(MAXXI),MAXX),
     &			(AUX(MINYI),MINY),
     &			(AUX(MAXYI),MAXY)
C
C generate an auxiliary array (can't use GENAUX, as don't have PACK, FC
C etc)
	ANGLE = ANG
	COSINE = COS(ANG)
	SINE = SIN(ANG)
	SIZE = SIZ
C
C calculate the extents
	IF (TRISCN(TEXT,FONT,MAXX,HWT)) GOTO 2000
C
C reduce length of text by the justification factor of a character
C height to allow for space at end of (last) letter. 
C This is a bit arbitrary; it depends on the TRI being used.
C Don't let it go negative
	IF (ABS(MAXX).GT.JSTPROP) MAXX = MAXX - SIGN(JSTPROP,MAXX)
C
C cannot have italicised texts, so no problem with overhangs
C and locating point is always 0
	MINX = 0.0
	MINY = 0.0
	MAXY = SIZE
	MAXX = MAXX*SIZE
C
C get area to blank out
	CALL BOX_AUX(X,Y,Z,AUX,EXPROP,XOUT,YOUT,ZOUT)
C
C and draw it
	CALL SETBLANK
	CALL SRIGFA(5,XOUT,YOUT,ZOUT)
C
2000	CONTINUE
	RETURN
	END
