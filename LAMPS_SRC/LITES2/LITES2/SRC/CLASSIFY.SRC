C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-09-06 12:57:42.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE	CLASSIFY(IM,NPIX,BYTE_SIZE,DTIB,WORD_SIZE,DTIW,
     &				LONG_SIZE,DTIL)
C
***	MODULE	CLASSIFY
***	IDENT	06SE96
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C
C To classify image values
C
	IMPLICIT NONE
C
***	PARAMETER/LSL$CMNDTI:DTIPAR/
***	COMMON/LSL$CMNDTI:DTIHDR/
***	COMMON/CMN:IMAGE/
C
C arguments
	INTEGER	IM		! the image number
	INTEGER	NPIX		! the number of pixels
	INTEGER	BYTE_SIZE	! size of BIT arrays
	BYTE	DTIB(BYTE_SIZE)
	INTEGER	WORD_SIZE	! size of WORD arrays
	INTEGER*2 DTIW(WORD_SIZE)
	INTEGER	LONG_SIZE	! size of longword arrays
	INTEGER*4 DTIL(LONG_SIZE)
C
C functions
C
C workspace
	INTEGER	I,B
	REAL	RPIX
	INTEGER	LPIX
	BYTE	BPIX
	EQUIVALENCE	(RPIX,LPIX,BPIX)
	INTEGER	COL
	BYTE	COLB
	EQUIVALENCE	(COL,COLB)
	INTEGER	LOLIM,HILIM
C
	DO 1000 I=1,NPIX
	   COL = 0
	   IF (DATA_TYPE(IMAGE_LUN(IM)) .EQ. DATA_WORD) THEN
	      IF (DTIW(I).EQ.DTI_NULL_WORD) GOTO 900
	      RPIX = DTIW(I)
	   ELSEIF (DATA_TYPE(IMAGE_LUN(IM)) .EQ. DATA_BYTE) THEN
	      IF (DTIB(I).EQ.DTI_NULL_BYTE) GOTO 900
	      LPIX = 0		! clear longword - treat as unsigned
	      BPIX = DTIB(I)
	      RPIX = LPIX	! equivalence of these not relevant here!
	   ELSEIF (DATA_TYPE(IMAGE_LUN(IM)) .EQ. DATA_LONG) THEN
	      IF (DTIL(I).EQ.DTI_NULL_LONG) GOTO 900
	      RPIX = DTIL(I)
	   ELSEIF (DATA_TYPE(IMAGE_LUN(IM)) .EQ. DATA_REAL) THEN
	      LPIX = DTIL(I)
	      IF (RPIX.EQ.DTI_NULL_REAL) GOTO 900
	   ENDIF
C
	   IF (RPIX.LT.IMAGE_RANGE(1,IM).OR.
     &	       RPIX.GT.IMAGE_RANGE(2,IM)) GOTO 900
C
	   HILIM = IMAGE_NBAND(IM)
	   IF (HILIM.LE.0) GOTO 100	! no bands
	   LOLIM = 1
	   IF (RPIX.GT.IMAGE_BAND(2,HILIM,IM)) GOTO 100
	   IF (RPIX.LT.IMAGE_BAND(1,1,IM)) GOTO 100
C
10	   B = (LOLIM+HILIM)/2		! next guess
	   IF (RPIX.LT.IMAGE_BAND(1,B,IM)) THEN
	      IF (LOLIM.GE.HILIM) GOTO 100		! no chopping room
	      HILIM = B			! too high
	   ELSEIF (RPIX.GT.IMAGE_BAND(2,B,IM)) THEN
	      IF (LOLIM.GE.HILIM) GOTO 100		! no chopping room
	      IF (LOLIM.EQ.B) B = B+1
	      LOLIM = B			! too low
	   ELSE
C
C check if we could be on edge of the band below (which would have
C been checked first before we introduced binary chop)
	      IF (B.GT.1.AND.RPIX.LE.IMAGE_BAND(2,B-1,IM)) THEN
	         COL = IMAGE_BANDCOL(B-1,IM)
	      ELSE
	         COL = IMAGE_BANDCOL(B,IM)
	      ENDIF
	      GOTO 900
	   ENDIF
	   GOTO 10
C
100	   COL = INT((RPIX-IMAGE_RANGE(1,IM))/IMAGE_STEP(IM)) +
     &							IMAGE_FIRST(IM)
900	   DTIB(I) = COLB
1000	CONTINUE
C
	RETURN
	END
