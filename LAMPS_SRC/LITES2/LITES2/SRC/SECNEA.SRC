C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-09-14 14:48:00.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION SECNEA(BEGIN)
C
***	IDENT	14SE92
***	MODULE	SECNEA
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					CCB	14-Aug-1992
C
C	Function to get list of sectors for SEARCH NEAREST
C	Returns true if no more
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:PACK/
***	COMMON/CMN:EDGE/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:SECMAP/
***	COMMON/CMN:STRIKE/
C
C argument
	LOGICAL		BEGIN		! initiate search
C
C functions
	EXTERNAL	SEC_CF,REAL_SWAP
	REAL		SECDIST
	LOGICAL		SETPAK
C
C saved variables
	INTEGER		XC,YC
	REAL		DIST
	REAL		MDIST2
	LOGICAL		DONE
	SAVE		XC,YC
	SAVE		DIST
	SAVE		MDIST2
	SAVE		DONE
C
C workspace
	INTEGER		X,Y
	INTEGER		XS,XE,YS,YE
	REAL		NDIST,DIST2,NDIST2
	INTEGER		S
	REAL		D
	INTEGER		NSEC
C
	IF (BEGIN) THEN
	   DONE = .FALSE.
	   ESECNO = 0
	   CONTXY(1) = CSXY(1)
	   CONTXY(2) = CSXY(2)
	   DIST = 0.0
	   DIST2 = -1.0		! allow sectors at distance 0.0
	   NDIST = 0.0
C
C get sector number which point CONTXY is in
	   XC = INT((CONTXY(1)-XOFF)/XSECTW) + 1
	   YC = INT((CONTXY(2)-YOFF)/YSECTW) + 1
C
C get maximum distance out to which we have to go
	   MDIST2 = MAX(
     &			SECDIST(1),
     &			SECDIST(YRANGE),
     &			SECDIST((XRANGE-1)*YRANGE+1),
     &			SECDIST(XRANGE*YRANGE))
	   GOTO 10
	ENDIF
C
C non-initial entry here
	NDIST = DIST		! pick up old distance
	DIST2 = DIST**2		! old squared distance
C
10	IF (DONE) GOTO 999
C
	NDIST = NDIST + XSECTW	! increment distance
	NDIST2 = NDIST**2	! and squared
	IF (NDIST2.GT.MDIST2) DONE = .TRUE.
	NSEC = 0		! no new sectors found yet
C
C examine sectors in a bounding box large enough to be certain of including
C all sectors out to NDIST
	S = NDIST/XSECTW+1
	XS = MAX(XC-S,1)
	XE = MIN(XC+S,YRANGE)
	S = NDIST/YSECTW+1
	YS = MAX(YC-S,1)
	YE = MIN(YC+S,XRANGE)
C
C scan this box of sectors
	DO 20 Y = YS,YE
	   DO 20 X = XS,XE
	      S = (Y-1)*YRANGE + X
	      D = SECDIST(S)
	      IF (D.LE.DIST2.OR.D.GT.NDIST2) GOTO 20
	      IF (SETPAK(S)) GOTO 20		! empty
	      NSEC = NSEC+1
	      CALL PUTARR(S,%VAL(EDGSEC),ESECNO+NSEC)
20	CONTINUE
C
C if not found any new ones, then try another increment
	IF (NSEC.EQ.0) GOTO 10
C
C sort in order of distance from the cursor
	CALL QUICK_SORT(%VAL(EDGSEC+4*ESECNO), NSEC, SEC_CF, REAL_SWAP,
     &						%VAL(SECTRS))
	ESECNO = ESECNO+NSEC
	DIST = NDIST
C
	SECNEA = .FALSE.
	GOTO 1000
C
999	SECNEA = .TRUE.
C
1000	RETURN
	END
C
	INTEGER*4 FUNCTION SEC_CF(TABLE,INDEX1,INDEX2)
C
***	IDENT	14AU92
***	MODULE	SEC_CF
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					CCB	14-Aug-1992
C
C to compare 2 sectors for distance to point CONTXY
C
	IMPLICIT NONE
C
C Arguments
C
	INTEGER		TABLE(*)	! table to be sorted
	INTEGER		INDEX1		! first element
	INTEGER		INDEX2		! second element
C
C Function
	REAL		SECDIST
C
C Workspace
	REAL		D1,D2	
C
C get distances of the two sectors
	D1 = SECDIST(TABLE(INDEX1))
	D2 = SECDIST(TABLE(INDEX2))
C
	IF (D1.LT.D2) THEN
	   SEC_CF = -1
	ELSEIF (D1.EQ.D2) THEN
	   SEC_CF = 0
	ELSE
	   SEC_CF = 1
	ENDIF
C
	RETURN
	END
