        SUBROUTINE JUMP
C
***     IDENT   25MY94
***     MODULE  JUMP
C
C       Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C       Written                                 RWR	16-Apr-1985
C
C	To jump to a macro that is on the end of the command line
C
        IMPLICIT NONE
C
***	PARAMETER/CMN:CHARS/
***	PARAMETER/CMN:EFNLUN/
***     PARAMETER/CMN:MACMEN/		! macros, menus and puck buttons
***	PARAMETER/CMN:MERPAR/		! error codes from macro reading
***     PARAMETER/CMN:MOANMESS/         ! moan constants
C
***	COMMON/CMN:DIN/
***	COMMON/CMN:DMACRD/		! macro reading results
***	COMMON/CMN:DOUT/
***	COMMON/CMN:DVAR/
***	COMMON/CMN:GLOBAL/
***	COMMON/CMN:MACRO/		! data about macros
***	COMMON/LSL$CMNLSL:TXTC/
C
C Functions called
	INTEGER		LIB$EXTV
	LOGICAL		RDCHS
	INTEGER*4	GETMAC		! gets macro name
	LOGICAL		RSPINP,FRMFIL
	INTEGER		GETLAB
	INTEGER*2	GET_VARWORD
	INTEGER*4	GET_VARLONG
C
C Local Variables
	INTEGER*4	IER		! return codes
	INTEGER*4	CURADR		! buffer address
	INTEGER*4	CURCHS		! buffer length
	INTEGER*2	CURPTR		! buffer decode pointer
	INTEGER*4	CURINP		! input line external ?
	INTEGER*4	CURARGL		! argument string length
	INTEGER*4	CURDESC(2)	! buffer descriptor
	EQUIVALENCE	(CURDESC(1),CURCHS),(CURDESC(2),CURADR)
	BYTE		CH
C
	IF (DSTRL.GT.1.AND.ICHAR(DSTR(1:1)).EQ.DOT) THEN
	   CALL SETAUX(%REF(DSTR(2:DSTRL)),DSTRL-1)
	   TXTPTR = TXTLIM
	   TXTPTR = GETLAB(TXTDSC,.FALSE.)
	   IF (MOANED) GOTO 999
	   IF (.NOT.RDCHS(CH)) THEN
	      CALL MOAN(MSG_EXTRACHARS,'label',TXTDSC)
	      CALL IGNCMD
	      GOTO 999
	   ENDIF
C
C pop present entry on stack - use DSTR as scratch string
C
	   CURDESC(1) = 0		! ensure longword zero
	   CALL POPSTK(CURADR,CURCHS,CURPTR,CURINP,CURARGL,DSTR)
C
C lookup the label in it, leaving CURPTR set to right place
	   CALL LOOKUP_LAB(CURDESC,CURPTR,TXTDSC)
	   CALL PSHSTK(CURADR,CURCHS,CURPTR,CURINP,CURARGL,DSTR)
	   IF (MOANED) CALL IGNCMD
	   GOTO 999
	ENDIF
C
	IER = GETMAC(DSTR(1:DSTRL),.TRUE.) ! get macro name
	IF (IER.NE.0) THEN 		! error, so complain
	   CALL ERRMAC(IER,'macro')	! and exit
	   CALL IGNCMD
C
C put this macro on stack
C
	ELSE 				! no error
C
C pop present entry on stack - use DSTR as scratch string
C
	   CALL POPSTK(CURADR,CURCHS,CURPTR,CURINP,CURARGL,DSTR)
C
C if reading command from external source (file or terminal)
C
	   IF (CURINP) THEN
	      IF (FRMFIL()) THEN	! if reading from file
	         CALL CLOFIL		! close it
	      ELSEIF (RSPINP()) THEN	! if "responding"
	         CALL UWDSTK		! unwind stack
	         DTOP=DSAV
	      ELSE			! interactive input
	         CURPTR=CURCHS+1	! ignore rest of line
					! by going to the end and
					! replacing it
	         CALL PSHSTK(CURADR,CURCHS,CURPTR,CURINP,CURARGL,DSTR)
	      ENDIF
	      CALL VTSTAT
	   ENDIF
C
C put present macro on stack (if not empty)
C
	   CURCHS=GET_VARWORD(%VAL(MACDSW_ADDR),1,DMACN)
	   IF (CURCHS.GT.0) THEN	! macro not empty
	      CURADR=GET_VARLONG(%VAL(MACDSL_ADDR),2,DMACN)
C
C get encrypted flag (0 or -1)
C if set (-1) then use flag -2 (negative, but bottom bit not set)
	      CURINP = LIB$EXTV(DMACN-1,1,%VAL(MACENC_ADDR))
	      IF (CURINP.LT.0) THEN
	         CURINP = -2
CCC	         JOUFCE = .TRUE.
CCC	         CALL JOUCMD	! journal JUMP command
CCC	         JOUFCE = .FALSE.
	      ENDIF
	      CALL SETAUX(%VAL(CURADR),CURCHS)
	      CALL STAFST(CURPTR)
	      CALL PSHSTK(CURADR,CURCHS,CURPTR,CURINP,DMARGL,DMARG)
	   ENDIF
	ENDIF
C
999	RETURN
	END
