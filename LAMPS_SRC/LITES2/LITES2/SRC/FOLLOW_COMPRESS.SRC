C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-04-04 15:46:48.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE FOLLOW_COMPRESS(XYZ)
C
***	MODULE	FOLLOW_COMPRESS
***	IDENT	04AP89
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C
C To compress FOLLOWING's bunch filtering buffer, to one point
C It reduces the buffer to the points on left and right that are
C furthest from the current line.
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
C
***	COMMON/CMN:FOLLOW/
***	COMMON/CMN:CSTRCT/
C
C arguments
	REAL	XYZ(3)		! this is point that will be put in 
				! buffer by calling routine, when there
				! is room
C
C w/s
	REAL		DIST
	REAL		LINE(2,2)
	REAL		PROP
	INTEGER		I
	REAL		LDIST,RDIST
	INTEGER		LINDEX,RINDEX
	REAL		PT(2)
	REAL		CP
C
	LDIST = -1.0
	RDIST = -1.0
	LINDEX = -1
	RINDEX = -1
C
C set up line
	LINE(1,1) = 0.0
	LINE(2,1) = 0.0
	LINE(1,2) = XYZ(1) - CONXY(1,CONIND)
	LINE(2,2) = XYZ(2) - CONXY(2,CONIND)
C
C look at each point in buffer
	DO 100, I=1,FOLLOW_BUF_PTR
	   PT(1) = FOLLOW_BUF(1,I) - CONXY(1,CONIND)
	   PT(2) = FOLLOW_BUF(2,I) - CONXY(2,CONIND)
C
C get distance from point to line
	   CALL PRPDST(PT,LINE,DIST,PROP)
	   IF (DIST.EQ.0.0) GOTO 100		! point on line
C
C is point to left or right of line
	   CP = LINE(1,2)*PT(2)-PT(1)*LINE(2,2)
	   IF (CP.EQ.0.0) GOTO 100		! unlikely !!!
	   IF (CP.LT.0.0) THEN
C
C on right
	      IF (DIST.GT.RDIST) THEN
	         RDIST = DIST
	         RINDEX = I
	      ENDIF
	   ELSE
C
C on left
	      IF (DIST.GT.LDIST) THEN
	         LDIST = DIST
	         LINDEX = I
	      ENDIF
	   ENDIF
100	CONTINUE
C
C store these two points in buffer
	IF (LINDEX.GT.0.AND.RINDEX.GT.0) THEN
	   FOLLOW_BUF_PTR = 2
	   DO 200, I = 1,3
	      FOLLOW_BUF(I,1) = FOLLOW_BUF(I,MIN(RINDEX,LINDEX))
200	   CONTINUE
	   DO 250, I= 1,3
	      FOLLOW_BUF(I,2) = FOLLOW_BUF(I,MAX(RINDEX,LINDEX))
250	   CONTINUE
C
	ELSEIF (RINDEX.GT.0) THEN		! all points on right
	   FOLLOW_BUF_PTR = 1
	   DO 300, I = 1,3
	      FOLLOW_BUF(I,1) = FOLLOW_BUF(I,RINDEX)
300	   CONTINUE
C
	ELSEIF (LINDEX.GT.0) THEN		! all points on left
	   FOLLOW_BUF_PTR = 1
	   DO 350, I = 1,3
	      FOLLOW_BUF(I,1) = FOLLOW_BUF(I,LINDEX)
350	   CONTINUE
	ELSE					! all points on line!
	   FOLLOW_BUF_PTR = 0
	ENDIF
C
	RETURN
	END
