C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-10-17 10:44:04.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE INIMNU(MNU)
C
***	IDENT	17OC94
***	MODULE	INIMNU
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	29-Nov-1984
C
C	To set up a menu on the digitising table or bitpad
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:EFNLUN/
***     PARAMETER/CMN:MACMEN/		! macros, menus and puck buttons
***     PARAMETER/CMN:MOANMESS/		! moan constants
***	PARAMETER/CMN:TRNTYP/
C
***     COMMON/CMN:MENUS/		! all about the menus
***	COMMON/CMN:MAPS/
***	COMMON/CMN:OTRANS/
***     COMMON/CMN:WORKS/		! info about worksatation
C
C Arguments
	INTEGER*4	MNU
C
C Functions called
	LOGICAL		TRNSET
	INTEGER		SIGCHS
C
C Local Variables
	CHARACTER*2	CPTN(4)		! corner point names (all 4)
	INTEGER*4	DEVICE		! device where point digitised
					! = BITLIN for bitpad
					! = DIGLIN for digitiser table
	INTEGER*4	CURDEV		! device for current menu
	INTEGER*4	BUTTON		! number of puck button
	INTEGER*4	I,J		! counters
	REAL		XERR,YERR	! allowable X and Y error
	LOGICAL		ABORT		! flag for abort
	LOGICAL		EXSTSU		! flag to use existing set up
C
	DATA	CPTN/'NW','SW','SE','NE'/
C
C check whether to set up map on table
	IF (.NOT.TABINI			! Table not initialised
     &	   .AND..NOT.BITINI)		! and bitpad not initialised
     &	         GOTO 999		! don't do anything
C
C compute limits
	XERR=ABS(MAX(MNCRPT(3,4,MNU)-MNCRPT(3,1,MNU),
     &			MNCRPT(3,3,MNU)-MNCRPT(3,2,MNU)))*10
	YERR=ABS(MAX(MNCRPT(4,1,MNU)-MNCRPT(4,2,MNU),
     &			MNCRPT(4,4,MNU)-MNCRPT(4,3,MNU)))*10
C
C assume we will fail
	MENDEF(MNU)=.FALSE.
C
C say what we are doing
10	CALL INFORM(MSG_BLANK)
	CALL INFORM(MSG_MENUSETUP,MENNAM(MNU)(1:SIGCHS(MENNAM(MNU))))
C
C read coordinates from digitising table/bitpad
	DO 20, I=1,4
	   CALL PING				! attract attention
	   CALL INFORM(MSG_MENDIG,CPTN(I))
C
C get coordinates
	   CALL GTDGXY(DEVICE,BUTTON,MNCRPT(1,I,MNU),EXSTSU,ABORT)
C
C check for abort and existing setup
	   IF (ABORT) THEN
	      CALL INFORM(MSG_SETUPABORT)
	      GOTO 999
	   ELSEIF (EXSTSU) THEN
	      IF (OMNDEF(MNU)) THEN		! there are old values
C
C check that stored device is possible
	         IF (((OMNDEV(MNU).EQ.BITLIN).AND..NOT.BITINI).OR.
     &	             ((OMNDEV(MNU).EQ.DIGLIN).AND..NOT.TABINI)) THEN
	            CALL MOAN(MSG_DEVNOTINIT)
	            GOTO 10
C
C and use stored device
	         ELSE
	            MENDEV(MNU)=OMNDEV(MNU)
	            CALL INFORM(MSG_ACCPREVVAL)
	            GOTO 50
	         ENDIF
	      ELSE				! no old values
	         CALL MOAN(MSG_NOEXSTVAL)
	         CALL LEARN(MSG_DGNEWVALS)
	         GOTO 10
	      ENDIF
	   ENDIF
C
C set device for this menu, or check that this is correct one
	   IF (I.EQ.1) THEN
	      IF (DEVICE.NE.BITLIN.AND.DEVICE.NE.DIGLIN) THEN
	         CALL MOAN(MSG_WRNGDEV)		! setup again
	         GOTO 10
	      ENDIF
	      CURDEV=DEVICE
	      MENDEV(MNU)=CURDEV
	   ELSEIF (CURDEV.NE.DEVICE) THEN	! moan, and start
	      CALL MOAN(MSG_WRNGDEV)		! setup again
	      GOTO 10
	   ENDIF
20	CONTINUE
C
C compute transformation parameters and check that they are OK 
C (always use GENTRN for setup of menus)
	IF (TRNSET(TRNTYP_AFFINE,MNCRPT(1,1,MNU),MNCOEF(1,1,MNU),
     &	            XERR,YERR,.FALSE.)) GOTO 10
C
C store limits of this menu (in table coordinates)
	DO 45, I=1,4
	   DO 40, J=1,2
	      MNLMTS(J,I,MNU)=MNCRPT(J,I,MNU)
40	   CONTINUE
45	CONTINUE
C
	OMNDEF(MNU)=.TRUE.		! store in common block/file
	OMNDEV(MNU)=DEVICE
C
50	MENDEF(MNU)=.TRUE.		! menu set up successfully
	CALL INFORM(MSG_BLANK)		! leave blank line, if finished
					! with table
999	RETURN
	END
