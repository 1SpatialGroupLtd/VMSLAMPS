	SUBROUTINE FINREC	
C
***	IDENT	14AU92
***	MODULE	FINREC
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RJH	21-SEP-1984
C
C Description
C
C LITES2 routine to carry out the actual operations of FIND, RECOVER,
C and SEARCH
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:AUXDEF/		! auxiliary array definitions
***     PARAMETER/CMN:MOANMESS/		! moan constants
***	PARAMETER/CMN:PACK/		! external pack definitions
***	PARAMETER/CMN:STAPAR/
C
***	COMMON/CMN:CNSTRN/		! item-type constraints
***     COMMON/CMN:DOUT/		! command decoding output
***	COMMON/CMN:EDGE/
***	COMMON/LSL$CMNFRT:FRTCOM/
***	COMMON/CMN:MASTER/		! odds and ends
***	COMMON/CMN:OPTION/
***	COMMON/CMN:RFCTRL/
***	COMMON/CMN:STATE/
***	COMMON/CMN:STRIKE/		! found objects, etc.
***	COMMON/CMN:TIMING/
C
C Functions called
	REAL		SECNDS		! FORTRAN timer
	LOGICAL		GROPE
	LOGICAL		NXTITM
C
C Local variables
	INTEGER		I		! temporary
	INTEGER		FLG
C
	TIMING(TIMFIND) = SECNDS(TIMING(TIMFIND))
C
	FINDNG = .TRUE.			! flag for VLDSEC (called from SCNSEC)
C
C See if we can just step on to next existing hit item.
C Possible provided that there are hit items, not a spiral search,
C the cursor hasn't moved, and same FIND/RECOVER as last time.
	IF (HITITC.GT.0.AND..NOT.SPIRAL.AND.CSSTIL.AND.
     &				(LIMCNS.EQV.RECVRD) ) GOTO 20
C
C Set cursor still if an ordinary FIND, false if spiral SEARCH
	CSSTIL = .NOT.SPIRAL
C
C Try to find object(s)
	IF (GROPE(CSXY)) THEN
	   IF (JOINNG) THEN
	      RUBCHG = .TRUE.
	      RUBLIN(2) = .FALSE.
	   ENDIF
	   IF (.NOT.(EDGING.OR.MENDNG)) THEN
	      IF (CONOPT) THEN			! inform only
	         IF (INFOPT.AND.BELOPT) CALL RASP ! informs switched off?
	         CALL INFORM(MSG_NOFIND)
	      ELSE				! moan normally
	         CALL MOAN(MSG_NOFIND)
	      ENDIF
	   ENDIF
	   GOTO 100			! go set state
	ENDIF
C
C Remember whether it was a FIND or a RECOVER
	RECVRD = LIMCNS
C
C Verify all hit items if diagnostics on
	IF (DIAOPT) THEN
	   CALL INFORM(MSG_FOUND,HITITC)
	   DO 10 I=1,HITITC
	      HITITP=QUORD(I)
	      CALL WRITEF(
     & 'nf %^L%N st %N fsn %N fc %N seg %N vrt %N ovl %N gt %N map %N'//
     & ' flg %N',
     &	OBJPAK(PAKPNF,HITITP),OBJPAK(PAKPST,HITITP)
     & ,OBJPAK(PAKFSN,HITITP),OBJPAK(PAKFC,HITITP)
     & ,OBJPAK(PAKSEG,HITITP)
     & ,OBJPAK(PAKVRT,HITITP),OBJPAK(PAKOVL,HITITP),OBJPAK(PAKGT,HITITP)
     & ,OBJPAK(PAKMAP,HITITP),OBJPAK(PAKFLG,HITITP) )
	      CALL EXPAND(
     &	'	Radius %F, position %F %F, ',
     &	HITRAD(HITITP),OBJCXY(1,HITITP),OBJCXY(2,HITITP) )
	      IF (.NOT.OBJNVT(HITITP)) CALL APPEND('not ')
	      CALL WRITAP('on a vertex')
10	   CONTINUE
	ENDIF
C
C Make next item the found object
C Should only fail if an attempt is made to step to next item when
C only one has been struck - in that case leave state alone
20	IF ( NXTITM() ) THEN
	   CALL INFORM(MSG_NONEXTITEM)
	   GOTO 900
	ENDIF
C
C This is where we must set the flags to say this feature has been
C dealt with, if we are doing SEARCH NEAREST. (FIND does it for
C other SEARCHes.)
C
	IF (SPIRAL.AND.SEANEA) THEN
	   FLG = FINFLG
	   IF (FINDND) THEN
	      IF (FOPAK(PAKGT).EQ.LINTYP.OR.
     &	          FOPAK(PAKGT).EQ.CURTYP.OR.
     &	          FOPAK(PAKGT).EQ.STRTYP.OR.
     &	          FOPAK(PAKGT).EQ.ARETYP) THEN
C
C finding ends of lines - if a flag bit is already set, then set the
C other one, otherwise set this/that according to vertex
	         IF ((FOPAK(PAKFLG).AND.FINFLG).EQ.0) THEN
	            IF (FOVRT.EQ.1) THEN
	               FLG = THIFLG
	            ELSE
	               FLG = THAFLG
	            ENDIF
	         ENDIF
	      ENDIF
	   ENDIF
	   CALL SETFTR(FLG,FOPAK(PAKLNK))
	ENDIF
C
C Set state according to current state and feature type
	IF ((FOPAK(PAKFLG).AND.LIMFLG).NE.0) THEN
C
C if recovering limbo item, then RECOVER state
	   CALL SETSTA(STATE_RECOVER)
	   GOTO 900
	ENDIF
C
C This item now candidate for SEARCH LAST
	LASPAK = FOPAK(PAKLNK)
C
100	IF (ROLING.AND.FNDMDE.EQ.1) GOTO 900! intersect with existing FO
	IF (
     &	 (SINDEX.EQ.STATE_READY) .OR. (SINDEX.EQ.STATE_LINE) .OR.
     &	 (SINDEX.EQ.STATE_CIRCLE) .OR. (SINDEX.EQ.STATE_SYMBOL) .OR.
     &	 (SINDEX.EQ.STATE_TEXT) .OR. (SINDEX.EQ.STATE_RECOVER) ) THEN
C
C if nothing found, then back to READY
	   IF (HITITC.EQ.0) THEN
	      CALL SETSTA(STATE_READY)
	      GOTO 900
	   ENDIF
C
C set state according to graphical type of found object
	   I = FOPAK(PAKGT)		! save typing
	   IF (I.GE.UNOTYP.AND.I.LE.SCATYP) THEN
	      CALL SETSTA(STATE_SYMBOL)
	   ELSEIF (I.EQ.TEXTYP) THEN
	      CALL SETSTA(STATE_TEXT)
	   ELSEIF (I.GE.CLOTYP.AND.I.LE.FULTYP) THEN
	      CALL SETSTA(STATE_CIRCLE)
	   ELSE				! must be line, or unknown
	      IF (I.NE.LINTYP.AND.I.NE.CURTYP.AND.I.GT.ARETYP) THEN
	         CALL NASTY(MSG_UNKGRATYPE,I)
	      ENDIF
	      CALL SETSTA(STATE_LINE)
	   ENDIF
	ENDIF
C
900	FINDNG = .FALSE.
	TIMING(TIMFIND) = SECNDS(TIMING(TIMFIND))
	RETURN
	END
