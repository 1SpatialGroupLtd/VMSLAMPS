        LOGICAL FUNCTION REGION_ZONE(REG,DIST,FILTER)
C
***     IDENT   10MY96
***     MODULE  REGION_ZONE
C
C       Copyright Laser-Scan Ltd., Cambridge, England.
C
C       Written                                 RWR 	16-Aug-1985
C
C	create a region from a feature
C	returns FALSE for success
C
        IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:AUXDEF/
***     PARAMETER/CMN:MOANMESS/         ! moan constants
***	PARAMETER/CMN:PACK/
***	PARAMETER/CMN:REGPAR/
C
***	COMMON/CMN:OIIH/
***	COMMON/CMN:REGCMN/
***	COMMON/CMN:STRIKE/
C
C argument
	INTEGER*4	REG		! region number
	REAL		DIST		! offset distance
	LOGICAL		FILTER		! if TRUE then filter
C
C Functions called
	LOGICAL		CHKTXT		! check we have a text
	LOGICAL		CHKSYM		! check we have a symbol
	LOGICAL		GEN_REG_CRNR
	REAL*8		AREA
	LOGICAL		REVREG
	LOGICAL		FILTREG
C
C Local Variables
	REAL		BOX(2,5)
	REAL		XY(2)
	REAL		AUX(AUXLEN)
	REAL		LENGTH,HEIGHT
	REAL		LINE1(2,2)
	REAL		LINE2(2,2)
	INTEGER		I
	INTEGER		V1
	INTEGER		ADDR
	LOGICAL		REVERSE
	REAL		CRNRS(4)
C
C assume failure
	REGION_ZONE = .TRUE.
	REVERSE = .FALSE.
	REG_PPT_FLAG = 0
C
C check for text/symbol found object, or text/symbol being modified
	IF (CHKTXT().OR.CHKSYM()) THEN
C
C if dealing with Found object, use FO variables
	   IF (FO) THEN
	      CALL CPYPAK(AUXLEN,FOAUX,AUX)
	      CALL CPYPAK(2,FOXY(1,1),XY)
C
C otherwise use COI variables	
	   ELSE
	      CALL CPYPAK(AUXLEN,COIAUX,AUX)
	      CALL CPYPAK(2,COIXY(1,2),XY)
	   ENDIF
C
C get the region boundary 
	   LENGTH=AUX(MAXXI)-AUX(MINXI)
	   HEIGHT=AUX(MAXYI)-AUX(MINYI)
C
	   BOX(1,1)=XY(1)+AUX(MINXI)*AUX(COSI)-AUX(MINYI)*AUX(SINI)
	   BOX(2,1)=XY(2)+AUX(MINXI)*AUX(SINI)+AUX(MINYI)*AUX(COSI)
C
	   IF (DIST.GT.0.0) THEN
	      BOX(1,4)=BOX(1,1)+AUX(COSI)*LENGTH
	      BOX(2,4)=BOX(2,1)+AUX(SINI)*LENGTH
	      BOX(1,3)=BOX(1,4)-AUX(SINI)*HEIGHT
	      BOX(2,3)=BOX(2,4)+AUX(COSI)*HEIGHT
	      BOX(1,2)=BOX(1,1)-AUX(SINI)*HEIGHT
	      BOX(2,2)=BOX(2,1)+AUX(COSI)*HEIGHT
	   ELSE
	      BOX(1,2)=BOX(1,1)+AUX(COSI)*LENGTH
	      BOX(2,2)=BOX(2,1)+AUX(SINI)*LENGTH
	      BOX(1,3)=BOX(1,2)-AUX(SINI)*HEIGHT
	      BOX(2,3)=BOX(2,2)+AUX(COSI)*HEIGHT
	      BOX(1,4)=BOX(1,1)-AUX(SINI)*HEIGHT
	      BOX(2,4)=BOX(2,1)+AUX(COSI)*HEIGHT
	      REVERSE = .TRUE.
	   ENDIF
	   BOX(1,5)=BOX(1,1)
	   BOX(2,5)=BOX(2,1)
C
C loop round each side in turn
	   DO 10, I = 1,4			! do each side
	      CALL CPYPAK(4,BOX(1,I),LINE2)
	      IF (I.GT.1) THEN
	         CALL CPYPAK(4,BOX(1,I-1),LINE1)
	      ELSE
	         CALL CPYPAK(4,BOX(1,4),LINE1)
	      ENDIF
	      IF (GEN_REG_CRNR(REG,ABS(DIST),LINE1,LINE2)) GOTO 900
	      IF (I.EQ.1.AND.RIVO.EQ.0) REG_PPT_FLAG = REGPTR(3,REG)
10	   CONTINUE
C
C have we created a region?
	   GOTO 850
C
C else must have found object
	ELSEIF (.NOT.FO) THEN
	   CALL MOAN(MSG_NOFEATURE)
	   GOTO 900  
	ENDIF
C
C dealing with found object; jump on data type (NOTE: texts and symbols
C already dealt with
	GOTO (100,500,500,500,500,100,
     &	               900,900,900,900,100,100),FOPAK(PAKGT)
C
C linear features
100	CONTINUE
C
C is feature closed?
	IF (FOTHIS(1).EQ.FOTHAT(1).AND.FOTHIS(2).EQ.FOTHAT(2)) GOTO 200
C
	V1=1					! start at first vertex
	IF (FOLST.LE.1) GOTO 900		! degenerate polygon
C
C get some vertices
  110	CALL GETVRT(FOPAK,V1,FOLST)
C
C put curve around start
	IF (V1.EQ.1) THEN
	   LINE2(1,1) = RIXY(1,2)
	   LINE2(2,1) = RIXY(2,2)
	   LINE2(1,2) = RIXY(1,1)
	   LINE2(2,2) = RIXY(2,1)
	ENDIF
C
C process rest of vertices
	DO 120, I = 1,RITOP-1
	   CALL CPYPAK(4,LINE2(1,1),LINE1(1,1))
	   CALL CPYPAK(4,RIXY(1,I),LINE2(1,1))
	   IF (GEN_REG_CRNR(REG,ABS(DIST),LINE1,LINE2)) GOTO 900
	   IF (I.EQ.1) REG_PPT_FLAG = REGPTR(3,REG)
  120	CONTINUE
C
	V1=V1+RITOP-1			! get last coordinate again
	IF (V1.LT.FOLST) GOTO 110
C
C now get coordinates, and go backwards
	V1 = FOLST
C
130	CONTINUE
	CALL GETVRT(FOPAK,V1,1)
C
C put curve around first vector
	IF (V1.EQ.FOLST) CALL CPYPAK(4,RIXY(1,RITOP-1),LINE2)
C
	DO 140 I=RITOP,2,-1
	   CALL CPYPAK(4,LINE2(1,1),LINE1(1,1))
	   LINE2(1,1) = RIXY(1,I)
	   LINE2(2,1) = RIXY(2,I)
	   LINE2(1,2) = RIXY(1,I-1)
	   LINE2(2,2) = RIXY(2,I-1)
	   IF (GEN_REG_CRNR(REG,ABS(DIST),LINE1,LINE2)) GOTO 900
	   IF (I.EQ.2.AND.RIVO.EQ.0) REG_PPT_FLAG = REGPTR(3,REG)
140	CONTINUE
C
	V1 = V1 - RITOP + 1
	IF (V1.GT.1) GOTO 130
C
C check for valid region
	GOTO 850
C
C closed linear feature
200	CONTINUE
C
C for negative offset, check that offset is not greater than range of
C feature
	IF (DIST.LT.0.0) THEN
	   CALL LITES2_BOX(CRNRS)
	   IF (((CRNRS(1)-CRNRS(2)).GE.DIST).OR.
     &	       ((CRNRS(3)-CRNRS(4)).GE.DIST)) THEN
	      CALL MOAN(MSG_INVALREG)
	      GOTO 900
	   ENDIF
	ENDIF
C
C calculate area to find out if clockwise or anti_clockwise
C our algorithm always puts offset line to left of feature
	REVERSE = DIST.LT.0.0
	IF (AREA()*DIST.GE.0.0) THEN
C
C go forward
C
C get last line
	   CALL GETVRT(FOPAK,FOLST-1,FOLST)
	   CALL CPYPAK(4,RIXY(1,RITOP-1),LINE2)
	   V1=1					! start at first vertex
	   IF (FOLST.LE.1) GOTO 900		! degenerate polygon
C
C get some vertices
210	   CALL GETVRT(FOPAK,V1,FOLST)
C
C process rest of vertices
	   DO 220, I = 1,RITOP-1
	      CALL CPYPAK(4,LINE2(1,1),LINE1(1,1))
	      CALL CPYPAK(4,RIXY(1,I),LINE2(1,1))
	      IF (GEN_REG_CRNR(REG,ABS(DIST),LINE1,LINE2)) GOTO 900
220	   CONTINUE
	   REG_PPT_FLAG = REGPTR(3,REG)
C
	   V1=V1+RITOP-1			! get last coordinate again
	   IF (V1.LT.FOLST) GOTO 210
	ELSE
C
C go backwards
C get first line
	   CALL GETVRT(FOPAK,1,2)
	   LINE2(1,1) = RIXY(1,2)
	   LINE2(2,1) = RIXY(2,2)
	   LINE2(1,2) = RIXY(1,1)
	   LINE2(2,2) = RIXY(2,1)
	   V1 = FOLST
C
230	   CONTINUE
	   CALL GETVRT(FOPAK,V1,1)
C
	   DO 240 I=RITOP,2,-1
	      CALL CPYPAK(4,LINE2(1,1),LINE1(1,1))
	      LINE2(1,1) = RIXY(1,I)
	      LINE2(2,1) = RIXY(2,I)
	      LINE2(1,2) = RIXY(1,I-1)
	      LINE2(2,2) = RIXY(2,I-1)
	      IF (GEN_REG_CRNR(REG,ABS(DIST),LINE1,LINE2)) GOTO 900
240	   CONTINUE
	   REG_PPT_FLAG = REGPTR(3,REG)
C
	   V1 = V1 - RITOP + 1
	   IF (V1.GT.1) GOTO 230
	ENDIF
C
C have we created a region?
	GOTO 850
C
C circle arcs
500	CONTINUE
	CALL MOAN(MSG_CMDNOTIMPLEGT,'REGION n ZONE')
	GOTO 900
C
850	CONTINUE
C
C leave at most one point at end of region within DIST from start point
	CALL REG_TRIM_END(REG,DIST,FOTHIS)
C
C have we created a region?
	IF (.NOT.REGDEF(REG)) THEN
	   CALL MOAN(MSG_INVALREG)
	ELSE
	   I=0
	   ADDR=REGPTR(1,REG)
860	   CONTINUE
	   IF (ADDR.EQ.REGPTR(2,REG)) THEN
	      CALL DELREG(REG)
	      CALL MOAN(MSG_INVALREG)
	   ELSE
	      CALL PUTLNG(%VAL(ADDR),ADDR)
	      I=I+1
	      IF (I.LT.3) GOTO 860
C
C tidy up closure
	      CALL REG_TRUNC_START(REG,FOTHIS)
C
C valid region - reverse it if necessary
	      IF (REVERSE) THEN
	         IF (REVREG(REG)) GOTO 900
	      ENDIF
C
C and filter it
	      IF (FILTER) THEN
	         IF (FILTREG(REG)) GOTO 900
	      ENDIF
C
C check for valid region again
	      I=0
	      ADDR=REGPTR(1,REG)
870	      CONTINUE
	      IF (ADDR.EQ.REGPTR(2,REG)) THEN
	         CALL DELREG(REG)
	         CALL MOAN(MSG_INVALREG)
	      ELSE
	         CALL PUTLNG(%VAL(ADDR),ADDR)
	         I=I+1
	         IF (I.LT.3) THEN
	            GOTO 870
C
C really got a valid region now
	         ELSE
	            REGION_ZONE = .FALSE.
	         ENDIF
	      ENDIF
	   ENDIF
	ENDIF
C
	GOTO 900
C
900	CONTINUE
        RETURN
        END
