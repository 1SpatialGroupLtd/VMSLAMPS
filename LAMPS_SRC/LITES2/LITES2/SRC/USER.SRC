  	SUBROUTINE USER(ROUTINE_ADDRESS,ROUTINE_NAME,ACTN)
C
***	IDENT	08MY96
***	MODULE	USER
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Written					RWR	27-Jun-1985
C
C	LITES2 cartographic editor USER command.
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***     PARAMETER/CMN:ACS/
***     PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:CTXS/
***	PARAMETER/CMN:EFNLUN/
***	PARAMETER/CMN:END/
***     PARAMETER/CMN:MOANMESS/
***     PARAMETER/CMN:PACK/
***	PARAMETER/CMN:STAPAR/
***	PARAMETER/CMN:START/
***	PARAMETER/CMN:USRERR/
C
***	COMMON/CMN:ACS/
***	COMMON/CMN:ATTBTS/
***     COMMON/LSL$CMNLSL:CMDCOM/	! CMDLIB command handling
***	COMMON/CMN:CSTRCT/
***	COMMON/CMN:CTXS/
***	COMMON/CMN:DEFINE/
***	COMMON/CMN:DIN/
***     COMMON/CMN:DOUT/
***	COMMON/CMN:DRAWIN/
***     COMMON/LSL$CMNFRT:FRTCOM/
***     COMMON/LSL$CMNFRT:FRTACD/
***	COMMON/CMN:GLOBAL/
***	COMMON/CMN:LABELS/
***	COMMON/CMN:MAPS/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:MODIFY/
***	COMMON/CMN:OIIH/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:RFCTRL/
***	COMMON/CMN:STATE/
***     COMMON/CMN:STRIKE/
***	COMMON/LSL$CMNLSL:TXTC/
***	COMMON/CMN:USER/
***	COMMON/CMN:VARIABLE/
***	COMMON/CMN:WORKS/
C
C arguments
	INTEGER		ROUTINE_ADDRESS(MAX_ROUTINES)
	CHARACTER*(*)	ROUTINE_NAME(MAX_ROUTINES)
	INTEGER		ACTN
C
C Functions called
	INTEGER		SIGCHS,CPYSTR,FNDOVR
	LOGICAL		NEXTAC,FRTFND,STRTER,NDSTAR,NDSTCN,GENAUX
	LOGICAL		RUBISH
	LOGICAL		NEXTCTX
	LOGICAL		HADCTRLC
	INTEGER		EXPAND
	INTEGER		FINSTR
	LOGICAL		USER_MH_MD
	BYTE		GET_VARBYTE
C
C Workspace
	INTEGER*4	ACTL		! length of AC/TC text
	PARAMETER	(ACTL=MAX(TCMAX,ACMAX))
	LOGICAL		FATAL
	PARAMETER	(FATAL=.TRUE.)
C
	INTEGER		ACTION
	LOGICAL		FEAT		! copy of FO
	INTEGER*4	NCOORDS		! number of points in feature
	INTEGER*4	NACS		! number of ACs in feature
	INTEGER*4	NOACS		! save of NACS for this routine
	INTEGER*4	FSN
	INTEGER*4	FC(4)		! feature status words (NB:*4)
	INTEGER*4	TS(4)		! text status 	       (NB:*4)
	INTEGER*4	AUX(AUXLEN)
	INTEGER*4	FC1,FC2,FC3,FC4
	INTEGER*2	FCW1(2),FCW2(2),FCW3(2),FCW4(2)
	EQUIVALENCE	(FC1,FC(1),FCW1(1)),(FC2,FC(2),FCW2(1)),
     &	                (FC3,FC(3),FCW3(1)),(FC4,FC(4),FCW4(1))
	INTEGER*4	TS1,TS2,TS3,TS4
	INTEGER*2	TSW1(2),TSW2(2),TSW3(2),TSW4(2)
	EQUIVALENCE	(TS1,TS(1),TSW1(1)),(TS2,TS(2),TSW2(1)),
     &	                (TS3,TS(3),TSW3(1)),(TS4,TS(4),TSW4(1))
	INTEGER*4	MAP
	INTEGER*4	LAYER
	INTEGER*4	GT
	INTEGER*4	RETCOD
	INTEGER*4	ACTYPE
	INTEGER*4	ACIVAL
	INTEGER*4	ACTXTL
	INTEGER*4	RTSTRL		! maximum length of return strng
	INTEGER*4	OTSTRL		! length of output string
	INTEGER*4	TEXTL		! length of text
	INTEGER*4	TOTPTS
	INTEGER*4	SIZE
	REAL		SIZ
	INTEGER*4	THICK		! TH entry for texts
	INTEGER*4	I
	LOGICAL		CNDFLG		! copy of JMPFLG
	LOGICAL		GTCOORD		! whether need coords or not 
	LOGICAL		DELETEF		! whether to delete feature
	LOGICAL		TXTF		! .TRUE. if text feature
	INTEGER		TMPPAK(PAKLEN)	! temporary pack for genauxing
					! texts
	INTEGER		VISIBLE
	REAL		XY(2)
	REAL		CURSOR(2)	! position of cursor
	REAL		ROTAT		! rotation of text/symbol
	REAL		USERXY(2,RIFULL)
	REAL		USERZS(3,RIFULL)
	EQUIVALENCE	(USERXY,USERZS)	! Save space
	LOGICAL*1	USRFLG(RIFULL)
	INTEGER		USERNATT		! number of attributes
	INTEGER		USERATTC(STR_MAX_ATTR)	! attribute codes
	INTEGER		USERIATTV(STR_MAX_ATTR,RIFULL) ! values (integer)
	REAL		USERRATTV(STR_MAX_ATTR,RIFULL) ! values (real)
	EQUIVALENCE	(USERIATTV,USERRATTV)
	INTEGER		USERDATATYPES(STR_MAX_ATTR)	
	INTEGER		USERNAMELENS(STR_MAX_ATTR)
	CHARACTER*(ACD_NAME_MAX) USERNAMES(STR_MAX_ATTR) ! attribute name
	CHARACTER*(DLM)	TEXT
	CHARACTER*(SSM) STATET		! copy of current state
	CHARACTER*(DLM)	RTSTR		! returned string
	CHARACTER*(DSM) OTSTR		! output string
	CHARACTER*(ACTL) ACTXT		! AC/TC text string
	CHARACTER*(10)	MSG		! for outputing error messages
	INTEGER		SAV_CONDEF	! save of point attributes
					! from attribute set
	INTEGER		LISTLEN
	INTEGER		ERROR
	INTEGER		OPER
C
	CHARACTER*(FSV)	VARNAM
	INTEGER		VARNAM_LEN
	INTEGER		INDEX
	INTEGER		INTVAL
	REAL		REALVAL
	REAL*8		DBLVAL
	INTEGER		CHARVAL_LEN
	LOGICAL		DONE_DRAWING,DONE_ANNO
C
C Command Tables
	EXTERNAL	PRIME_CMD_TABLE
C
C save annotation settings, so that they can be set back
	IF (ROUTINE_ADDRESS(XANO).NE.0) THEN
	   CALL SAVE_ANNO
	ENDIF
C
C stop SETANNO updating workstation every time it is called
	IF (ROUTINE_ADDRESS(XDRW).NE.0) THEN
	   FROM_USER = .TRUE.
	ENDIF
C
	DONE_DRAWING = .FALSE.
	DONE_ANNO    = .FALSE.
C
C set up copies to pass to user routine
	DELETEF = .TRUE.		! assume delete existing feature
	ACTION = ACTN
C
	IF (DSTRIN) THEN		! any string on end of command
	   OTSTR=DSTR(1:DSTRL)
	   OTSTRL=DSTRL
	ELSE
	   OTSTR=' '
	   OTSTRL=0
	ENDIF
C
	IF (SINDEX.EQ.STATE_INITIAL) THEN
	   CURSOR(1)=0.0
	   CURSOR(2)=0.0
	ELSE
	   CURSOR(1)=CSXY(1)		! cursor position
	   CURSOR(2)=CSXY(2)
	ENDIF
C
	CNDFLG=JMPFLG			! conditional flag
C
	STATET=STASTR(1:STALEN)		! current state
C
	FEAT=FO				! details of found object
	CALL FILLFO(NCOORDS,NOACS,FSN,FC,MAP,LAYER,GT,ROTAT,THICK)
C
	IF (FO.AND.FOPAK(PAKGT).EQ.TEXTYP) THEN
	   TXTF=.TRUE.
	ELSE
	   TXTF=.FALSE.
	ENDIF
C
C get any ACs (here we are just interested in the number)
C
	NACS=0
	IF (FO) THEN
	   CALL GETAC(FOPAK,FOTC,FOAC)
	   NACS = FTRACD(ACD_NAC)
	   NOACS=NACS
	ENDIF
C
C take down any outstanding terminal read
	IF (TTASN) THEN			! if channel assigned
	   CALL SYS$CANCEL(%VAL(TTICHN))	! cancel any QIO
	   TTIOSB(1) = 0			! clear cancel status
	   TTREAD=.FALSE.			! request new QIO
	ENDIF
C
C call user initialisation routine
C
	MSG=ROUTINE_NAME(XINI)
	RETCOD = 4				! call USERDO if it does
						! not exist
	IF (ROUTINE_ADDRESS(XINI).NE.0)
     &	   CALL CALLR(ACTION,			! from USER command
     &	   OTSTRL,OTSTR(1:MAX(1,OTSTRL)),
     &	   CURSOR,				! cursor position
     &	   CNDFLG,				! conditional flag
     &	   STATET(1:STALEN),			! current state
     &	   FEAT,NCOORDS,NOACS,FSN,FC,MAP,	! found object
     &	   LAYER,GT,ROTAT,THICK,
     &	   RETCOD,%VAL(ROUTINE_ADDRESS(XINI)))
C
C check return code for wanting map_header/descriptor
50	IF (RETCOD.GT.100) THEN
	   IF (USER_MH_MD(ROUTINE_ADDRESS(XGMH),RETCOD)) THEN
	      IF (ROUTINE_ADDRESS(XERR).NE.0) CALL CALLR(FATAL,
     &	            USR_MH_MD_ERR,%VAL(ROUTINE_ADDRESS(XERR)))
	      GOTO 9999				! fatal error
	   ELSE
C
C check for CTRL/C, in case some_one has written an endless loop.
	      IF (HADCTRLC()) THEN
	         GOTO 9999
	      ELSE
	         MSG=ROUTINE_NAME(XGMH)
	         GOTO 50			! continue
	      ENDIF
	   ENDIF
	ENDIF
C
C check return code, for wanting coords
C
	IF ((RETCOD.GE.1.AND.RETCOD.LE.3).AND..NOT.FO) THEN
	   CALL MOAN(MSG_NOFEATURE)
	   IF (ROUTINE_ADDRESS(XERR).NE.0) CALL CALLR(FATAL,
     &	            USR_NOFEATURE,%VAL(ROUTINE_ADDRESS(XERR)))
	   GOTO 9999
	ENDIF
C
	GTCOORD=FO.AND.(RETCOD.EQ.1.OR.RETCOD.EQ.2)
C
C now switch on return code
C
	GOTO(9999,100,200,100,300,700) RETCOD+1	! 0,1,2,3,4,5 are valid
	GOTO 9000				! unknown return code
C
C send ACs
C
100	IF (FO.AND.NACS.GT.0) THEN
	   MSG=ROUTINE_NAME(XGAC)
	   FTRACD(ACD_CUR)=0			! start at beginning
C
C get next AC/TC/CH
C
110	   CONTINUE
	   IF (HADCTRLC()) GOTO 9999
	   IF (NEXTAC(FTRACD)) GOTO 200		! finished, get coords
	   ACTYPE=ACBUFL(AC_L_TYPE)
	   IF (ACTYPE.GE.0) THEN
	      ACIVAL=ACBUFL(AC_L_ACVAL)
	   ELSE
	      ACIVAL=0
	   ENDIF
	   ACTXTL=CPYSTR(ACBUFL(AC_L_DESC),ACTXT)
	   RETCOD=4				! call USRDO
C
    	   IF (ROUTINE_ADDRESS(XGAC).NE.0)
     &	      CALL CALLR(ACTYPE,ACIVAL,ACTXTL,ACTXT(1:MAX(1,ACTXTL)),
     &	                       RETCOD,%VAL(ROUTINE_ADDRESS(XGAC)))
C
C switch on return code
C
	   GOTO(9999,110,200,9000,300) RETCOD+1	! 0,1,2,4 are ok
	   GOTO 9000
	ELSE					! there are no ACs	
	   CALL MOAN(MSG_NOACS)
	   IF (ROUTINE_ADDRESS(XERR).NE.0) CALL CALLR(FATAL,USR_NOACS,
     &	            %VAL(ROUTINE_ADDRESS(XERR)))
	ENDIF	
	GOTO 9999
C
C send coords
C
200	IF (GTCOORD) THEN
	   IF (HADCTRLC()) GOTO 9999
	   TOTPTS=0
C
C send some more coords
C
210	   I=TOTPTS+1
	   RETCOD=4
C
C do we want CB values for these points?
	   IF (ROUTINE_ADDRESS(XGCB).NE.0) THEN
	      MSG=ROUTINE_NAME(XGCB)
	      CALL FILLCB(I,SIZE,USERXY,USRFLG,
     &	                  STR_MAX_ATTR,USERNATT,USERATTC,
     &	                  USERDATATYPES,USERNAMELENS,USERNAMES,
     &	                  USERIATTV,USERRATTV)
	      CALL CALLR(SIZE,USERXY,USRFLG,
     &	                 STR_MAX_ATTR,USERNATT,USERATTC,
     &	                 USERDATATYPES,USERNAMELENS,USERNAMES,USERIATTV,
     &	                 USERRATTV,RETCOD,
     &	                 %VAL(ROUTINE_ADDRESS(XGCB)))
C
C do we want ZX values for these points
	   ELSEIF (ROUTINE_ADDRESS(XGZS).NE.0) THEN
	      MSG=ROUTINE_NAME(XGZS)
	      CALL FILLZS(I,SIZE,USERZS,USRFLG)
	      CALL CALLR(SIZE,USERZS,USRFLG,RETCOD,
     &	                  %VAL(ROUTINE_ADDRESS(XGZS)))
C
C or do we just want XY values
	   ELSEIF (ROUTINE_ADDRESS(XGST).NE.0) THEN
	      MSG=ROUTINE_NAME(XGST)
	      CALL FILLXY(I,SIZE,USERXY,USRFLG)
	      CALL CALLR(SIZE,USERXY,USRFLG,RETCOD,
     &	                  %VAL(ROUTINE_ADDRESS(XGST)))
C
C and for compatability's sake (for old times)
	   ELSEIF (ROUTINE_ADDRESS(XGPT).NE.0) THEN
	      MSG=ROUTINE_NAME(XGPT)
	      CALL FILLXY(I,SIZE,USERXY,USRFLG)
	      IF (TXTF) TEXTL = CPYSTR(CTXBUFL(CTX_L_DESC),TEXT)
	      CALL CALLR(SIZE,USERXY,USRFLG,TEXTL,
     &	               TEXT(1:MAX(1,TEXTL)),RETCOD,
     &	                  %VAL(ROUTINE_ADDRESS(XGPT)))
	   ENDIF
C
C for text features, now call USERGTX to pass out text
	   IF (TXTF.AND.ROUTINE_ADDRESS(XGTX).NE.0) THEN
	      MSG=ROUTINE_NAME(XGTX)
	      CALL FILLTX(TEXT,TEXTL,TS,THICK,ROTAT,AUX)
	      CALL CALLR(TEXT,TEXTL,TS,THICK,ROTAT,AUX,
     &	                  %VAL(ROUTINE_ADDRESS(XGTX)))
	   ENDIF
C
	   TOTPTS=TOTPTS+SIZE
C
C do we want to read any more points?
	   IF (RETCOD.EQ.1) THEN
	      IF (TXTF) THEN
	         IF(NEXTCTX(FTRCTXD,.FALSE.)) GOTO 300
	      ELSE
	         IF (TOTPTS.GE.FOLST) GOTO 300     ! got all
	      ENDIF
	   ENDIF
C
C switch on return code
C
	   GOTO (9999,210,9000,9000,300) RETCOD+1    ! 0,1,4 are valid
	   GOTO 9000
	ENDIF
C
C do something
C
300	MSG=ROUTINE_NAME(XDO)
	RETCOD=4
	IF (ROUTINE_ADDRESS(XDO).NE.0)
     &	   CALL CALLR(RETCOD,%VAL(ROUTINE_ADDRESS(XDO)))
C
C cannot construct feature while in certain states
C
	IF ((SINDEX.EQ.STATE_CONSTRUCT.OR.
     &	     SINDEX.EQ.STATE_MODIFY   .OR.
     &	     SINDEX.EQ.STATE_AC       .OR.
     &	     SINDEX.EQ.STATE_EDIT     .OR.
     &	     SINDEX.EQ.STATE_INITIAL) .AND.
     &	    (RETCOD.EQ.5.OR.RETCOD.EQ.6)) THEN
	   CALL MOAN(MSG_NONEWCONSTR,STASTR(1:STALEN))
	   IF (ROUTINE_ADDRESS(XERR).NE.0) CALL CALLR(FATAL,
     &	            USR_NONEWCONSTR,%VAL(ROUTINE_ADDRESS(XERR)))
	   GOTO 9999
	ENDIF
C
C keep feature or not?
C
	DELETEF = DELETEF.AND.(RETCOD.EQ.6).AND.FO
C
C switch on return code
C
	GOTO (9999,9000,9000,9000,700,400,400) RETCOD+1	! 0,4,5,6 are ok
	GOTO 9000
C
C get data for starting feature
C
400	CONTINUE
	IF (HADCTRLC()) GOTO 9999
	MSG=ROUTINE_NAME(XSTO)
	CALL FILLFO(NCOORDS,NOACS,FSN,FC,MAP,LAYER,GT,ROTAT,THICK)
	IF (FO) NOACS=NACS
	RETCOD=4
	IF (ROUTINE_ADDRESS(XSTO).NE.0)
     &	   CALL CALLR(FSN,FC,MAP,LAYER,TXTF,NCOORDS,NOACS,
     &	               ROTAT,THICK,RETCOD,%VAL(ROUTINE_ADDRESS(XSTO)))
	GOTO (9999,500,9000,9000,700) RETCOD+1	! 0,1,4 are valid
	GOTO 9000
C
C set up (and check) construction variables
C
500	IF (MAP.EQ.-1) THEN
	   MAP=CONMAP			! use construction map
	ELSE
	   MAP=MAP-1			! alter to internal number
	ENDIF
C
C Does required map exist
C
	IF (MAP.LT.0.OR.MAP.GT.MAPTOP) GOTO 501
	IF (MAP_EXIST(MAP)) GOTO 502
501	CALL MOAN(MSG_MAPNOTEXIST,MAP+1)
	IF (ROUTINE_ADDRESS(XERR).NE.0) CALL CALLR(FATAL,
     &	            USR_MAPNOTEXIST,%VAL(ROUTINE_ADDRESS(XERR)))
	GOTO 9999
C
C Is it readonly
C
502	IF (MAPRO(MAP)) THEN
	   CALL MOAN(MSG_MAPREADONLY,MAP+1)
	   IF (ROUTINE_ADDRESS(XERR).NE.0) CALL CALLR(FATAL,
     &	            USR_MAPREADONLY,%VAL(ROUTINE_ADDRESS(XERR)))
	   GOTO 9999
	ENDIF
	COIPAK(PAKMAP) = MAP
C
C layer
C
	IF (LAYER.EQ.-1) LAYER=CONLAY
C
C Does construction layer exist
C
	I = FNDOVR(LAYER)
	IF (I.LT.0) THEN
	   CALL MOAN(MSG_LAYNOTEXIST,LAYER)
	   IF (ROUTINE_ADDRESS(XERR).NE.0) CALL CALLR(FATAL,
     &	            USR_LAYNOTEXIST,%VAL(ROUTINE_ADDRESS(XERR)))
	   GOTO 9999
	ENDIF
	COIPAK(PAKOVL) = I
C
C feature code
C
	IF (FC1.EQ.-1) THEN
	   IF (TXTF) THEN
	      FC1=CONTFC
	   ELSE
	      FC1=CONFC
	   ENDIF
	ENDIF
C
	IF (FC2.EQ.-1) FC2 = 0
	IF (FC3.EQ.-1) FC3 = 0
	IF (FC4.EQ.-1) FC4 = 0
C
C Does construction feature code exist
C
	IF (FRTFND(FC1)) THEN
	   CALL MOAN(MSG_BADCODE,FC1)
	   IF (ROUTINE_ADDRESS(XERR).NE.0) CALL CALLR(FATAL,
     &	            USR_BADCODE,%VAL(ROUTINE_ADDRESS(XERR)))
	   GOTO 9999
	ENDIF
C
	TXTF = FRTTEX
C
C Check FC valid if starting a generated feature
C
	IF (CONGEN .AND. (FRTARC .OR. FRTTEX .OR. 
     &	   (FRTSYM .AND. (FRTGT .NE. STRTYP)))) THEN
	   CALL MOAN(MSG_INVALFC)
	   IF (ROUTINE_ADDRESS(XERR).NE.0) CALL CALLR(FATAL,
     &	            USR_INVALFC,%VAL(ROUTINE_ADDRESS(XERR)))
	   GOTO 9999
	ENDIF
C
C Check number of points is sensible
C
	IF ((NCOORDS.NE.1.AND.				! 1 POINT
     &	    ((FRTGT.EQ.UNOTYP).OR.		! unoriented symbol
     &	     (FRTGT.EQ.ORITYP).OR.		! oriented   symbol
     &	     ((FRTGT.EQ.TEXTYP).AND..NOT.COMOPT))).OR.	! text
     &	    (NCOORDS.NE.2.AND.				! 2 POINTS
     &	     ((FRTGT.EQ.SCATYP).OR.		! scaled symbol
     &	     (CONGEN.AND.CONCLO.AND.CONCEN))).OR.! centred circle
     &	    (NCOORDS.NE.3.AND.				! 3 POINTS
     &	     (FRTARC.OR.			! graph type 2-5
     &	     (CONGEN.AND..NOT.(CONCLO.AND.CONCEN))))) ! other gen feat
     &	                        THEN
	   CALL MOAN(MSG_WRNGNOPTS)
	   IF (ROUTINE_ADDRESS(XERR).NE.0) CALL CALLR(FATAL,
     &	            USR_WRNGNOPTS,%VAL(ROUTINE_ADDRESS(XERR)))
	   GOTO 9999
	ELSEIF (NCOORDS.LE.1.AND.
     &	       ((FRTGT.EQ.LINTYP).OR.		! line
     &	        (FRTGT.EQ.CURTYP).OR.		! smooth curve
     &	        (FRTGT.EQ.STRTYP).OR.		! symbol string
     &	        (FRTGT.EQ.ARETYP))) THEN	! area
	   CALL MOAN(MSG_WRNGNOPTS)
	   IF (ROUTINE_ADDRESS(XERR).NE.0) CALL CALLR(FATAL,
     &	            USR_WRNGNOPTS,%VAL(ROUTINE_ADDRESS(XERR)))
	   GOTO 9999
	ENDIF
C
	COIPAK(PAKFC) = FC1
C
C set the GT
	COIPAK(PAKGT) = FRTGT
C
C We don't have a segment for this feature yet
	COIPAK(PAKSEG) = 0
C
	COIPAK(PAKFLG) = 0		! default flag
C
C TCs or ACs
	IF (NOACS.GT.0) THEN		! want ACs from memory
	   ACMAP = COIPAK(PAKMAP)
	   ACPNF = -1			! matching NF pointers to
	   COIPAK(PAKPNF)=-1		! fool it
	   CONTC = -2			! duff IFF addresses
	   CONAC = -2
	ELSE
	   CONTC = 0
	   CONAC = 0
	ENDIF
C
C set up an CONTH and FS entries, for non texts
C (texts will be done below)
	IF (.NOT.TXTF) THEN
	   CONTH=0
C
C Set up an FS entry
C
	   CONFS(1) = COIPAK(PAKFC)
	   CONFS(2) = FCW2(1)
	   CONFS(3) = FCW3(1).AND.'3FFF'X	! clear out top two bits
	   CONFS(4) = FCW4(1)
C
C constructing symbol
	   IF (COIPAK(PAKGT).GE.UNOTYP.AND.COIPAK(PAKGT).LE.SCATYP)
     &	               CONFS(3)=CONFS(3).OR.'4000'X
C
C
	   CONIND = 0			! no points in CONXY
	   CONFST = .TRUE.		! nothing ADCORDed yet
C
	   IF (COIPAK(PAKGT).EQ.STRTYP) THEN	! get size into COIAUX
	      IF ( GENAUX(CONIND,CONXY,COIAUX,COIDSC,COIANG,
     &	               CONFS,COIPAK,CONFS)) GOTO 9999
	   ENDIF
	ENDIF
C
C set up defined FSN, if required
	IF (FSN.GT.0) THEN
	   CONFSN=FSN
	ELSE
	   CONFSN = 0
	ENDIF
C
C now get any ACs
C
	MSG=ROUTINE_NAME(XPAC)
C
C Clear old features ACs if we have any to do
C and note that we have had ACs for OPERATION command
C
	IF (NOACS.GT.0) THEN 
	   CALL FREEAC(FTRACD)
	   FLG_USER = .TRUE.
	ENDIF
C
C now get each AC
C
	DO 520, I=1,NOACS
	   ACTYPE=0
	   ACIVAL=0
	   ACTXT=' '
	   ACTXTL=ACTL
	   RETCOD=4
	   IF (ROUTINE_ADDRESS(XPAC).NE.0)
     &	      CALL CALLR(ACTYPE,ACIVAL,ACTXTL,ACTXT(1:ACTXTL),RETCOD,
     &	                  %VAL(ROUTINE_ADDRESS(XPAC)))
C
C switch on return code
C
	   GOTO (9999,510,600,9000,700)	RETCOD+1	! 0,1,2,4 are ok
	   GOTO 9000
C
C store ACs in AC sector
C
510	   IF (ACTYPE.LT.0) THEN			! TC/CH
	      IF (ACTXTL.GT.TCMAX) THEN
	         CALL MOAN(MSG_ACTOOLONG,TCMAX)
	         IF (ROUTINE_ADDRESS(XERR).NE.0) CALL CALLR(.NOT.FATAL,
     &	            USR_ACTOOLONG,%VAL(ROUTINE_ADDRESS(XERR)))
	         ACTXTL = TCMAX
	      ENDIF
	   ELSE						! AC
	      IF (ACTXTL.GT.ACMAX) THEN
	         CALL MOAN(MSG_ACTOOLONG,ACMAX)
	         IF (ROUTINE_ADDRESS(XERR).NE.0) CALL CALLR(.NOT.FATAL,
     &	            USR_ACTOOLONG,%VAL(ROUTINE_ADDRESS(XERR)))
	         ACTXTL = ACMAX
	      ENDIF
	      ACBUFL(AC_L_ACVAL) = ACIVAL
	   ENDIF
	   ACBUFL(AC_L_TYPE) = ACTYPE
	   ACBUFW(AC_W_TXTLEN) = ACTXTL
	   IF (ACTXTL.GT.0) CALL CPYSTR(
     &				ACTXT(1:ACTXTL),ACBUFL(AC_L_DESC))
	   CALL ADDAC(FTRACD)				! add new AC
520	CONTINUE
C
C now get coords
C
600	CONTINUE
	TOTPTS=0
C
C if to delete original feature, get a copy of its pak, so that it
C can be deleted after, (when we know all is well)
C but delete it from screen now, in case new feature over draws it
C
	IF (DELETEF) THEN
	   CALL HANDLE			! will need to delete later
	   CALL LDSG(IHPAK,.TRUE.)	! delete from screen now
	   CALL FRTFND(FC1)		! restore new FC
	ENDIF
C
C save cursor position, so it can be reset later
	CURSOR(1)=CSXY(1)			! save cursor position
	CURSOR(2)=CSXY(2)
C
C and save point attributes from attribute set, as we overwite them
	CALL COPYDEF(CONDEF,SAV_CONDEF)
C
C set up operation
	OPER = DEFINITION(P_USER)
	IF (OPER.EQ.0) OPER = DEFINITION(P_OTHER)
C
C get some more points
C
610	CONTINUE
	SIZE=RIFULL				! currently 200
	TEXT=' '
	RETCOD=4
	TEXTL=DLM
C
C have we CB entries for these points?
	IF (ROUTINE_ADDRESS(XPCB).NE.0) THEN
	   MSG=ROUTINE_NAME(XPCB)
	   CALL CALLR(SIZE,USERXY,USRFLG,
     &	              STR_MAX_ATTR,USERNATT,USERATTC,
     &	              USERIATTV,USERRATTV,RETCOD,
     &	              %VAL(ROUTINE_ADDRESS(XPCB)))
C
C have we want ZX values for these points
	ELSEIF (ROUTINE_ADDRESS(XPZS).NE.0) THEN
	   MSG=ROUTINE_NAME(XPZS)
	   CALL CALLR(SIZE,USERZS,USRFLG,RETCOD,
     &	               %VAL(ROUTINE_ADDRESS(XPZS)))
C
C set up attribute block from ZSs
	   USERNATT = 1
	   USERATTC(1) = IFF_C_Z		! attribute type
	   DO 615, I= 1,SIZE
C
C careful:USERXY and USRZS are equivalenced
	      USERRATTV(1,I) = USERZS(3,I)
	      USERXY(1,I)    = USERZS(1,I)
	      USERXY(2,I)    = USERZS(2,I)
  615	   CONTINUE
C
C or have we just XY values
	ELSEIF (ROUTINE_ADDRESS(XPST).NE.0) THEN
	   MSG=ROUTINE_NAME(XPST)
	   CALL CALLR(SIZE,USERXY,USRFLG,RETCOD,
     &	               %VAL(ROUTINE_ADDRESS(XPST)))
	   USERNATT = 0
C
C and for compatability's sake (for old times)
	ELSEIF (ROUTINE_ADDRESS(XPPT).NE.0) THEN
	   MSG=ROUTINE_NAME(XPPT)
	   CALL CALLR(SIZE,USERXY,USRFLG,TEXTL,
     &	            TEXT(1:MAX(1,TEXTL)),RETCOD,
     &	               %VAL(ROUTINE_ADDRESS(XPPT)))
	   USERNATT = 0
	ENDIF
C
C check for abort!
C
	IF (RETCOD.NE.1) THEN
	   CALL LEARN(MSG_FTABANDONED)
	   CALL ABANDN
	   CSXY(1)=CURSOR(1)			! reposition cursor
	   CSXY(2)=CURSOR(2)
	   CALL COPYDEF(SAV_CONDEF,CONDEF)
C
	   GOTO (9999,9000,9000,9000,700) RETCOD+1	! 0,1,4 are ok
	   GOTO 9000
	ENDIF
C
C for text features, now call USERPTX to get text
C note that texts use TSs rather than FSs so make sure that it is
C set up
	IF (TXTF) THEN
	   DO 617, I = 1,4
	      TS(I) = FC(I)
  617	   CONTINUE
	   IF (ROUTINE_ADDRESS(XPTX).NE.0) THEN
	      MSG=ROUTINE_NAME(XPTX)
	      CALL CALLR(TEXT,TEXTL,TS,THICK,ROTAT,
     &	               %VAL(ROUTINE_ADDRESS(XPTX)))
	   ENDIF
	ENDIF
C
C check coords and add them to feature
	DO 620, I=1,SIZE
	   CSXY(1)=USERXY(1,I)
	   CSXY(2)=USERXY(2,I)
	   VISIBLE = USRFLG(I) .AND. 1
C
C check point is not outside limits of file
	   IF (RUBISH(CSXY)) THEN
	      CALL MOAN(MSG_PTOUTRANGE)
	      IF (ROUTINE_ADDRESS(XERR).NE.0) CALL CALLR(FATAL,
     &	         USR_PTOUTRANGE,%VAL(ROUTINE_ADDRESS(XERR)))
	      GOTO 695
	   ENDIF
C
C check for valid text length
	   IF (TXTF.AND.TEXTL.LT.1) THEN
	      CALL MOAN(MSG_TEXTTOOSHORT)
	      IF (ROUTINE_ADDRESS(XERR).NE.0)
     &	            CALL CALLR(FATAL,USR_TEXTTOOSHORT,
     &	            %VAL(ROUTINE_ADDRESS(XERR)))
	      GOTO 695
	   ENDIF
C
C update attributes by USER_POINT operation
	   CALL LSTARR(OPER,USERNATT,USERATTC,USERIATTV(1,I),.TRUE.)
C
C copy attributes to CONDEF, so they will be added to feature
	   IF (.NOT.TXTF) CALL ARRLST(USERNATT,USERATTC,USERIATTV(1,I),
     &	                     CONDEF,LISTLEN)
C
C deal with linear features
	   IF (FRTGT.LT.UNOTYP.OR.FRTGT.GT.TEXTYP) THEN
	      IF (SINDEX.NE.STATE_CONSTRUCT) THEN
	         CALL SETSTA(STATE_CONSTRUCT)
	         IF (STRTER(START_ADD,START_VISIBLE)) GOTO 690
	      ELSE
C
C add this point to feature, with visibility flag
	         IF ((TOTPTS+I).LT.NCOORDS) THEN
	            IF (STRTER(START_ADD,VISIBLE)) GOTO 690 
	         ENDIF
	      ENDIF
C
C is this second point of scaled symbol?
	   ELSEIF (FRTGT.EQ.SCATYP.AND.(I+TOTPTS).EQ.2) THEN 
	         COIXY(1,3)=CSXY(1)	
	         COIXY(2,3)=CSXY(2)
C
C text or new symbol
	   ELSE
C
C initialise   
	      NEWFEAT=.TRUE.			! common /MODIFY/
	      DELOIH=.FALSE.			! later used in NDSTCN
	      HADRO = .FALSE.
	      HADTX = .FALSE.
C
C get coords and things
	      COIPAK(PAKFSN)=-1		! force NDSTCN to generate FSN
	      COIANG=ROTAT	
	      CALL FLUSH(0)		! initialise construction
C
C start the feature at the current cursor position
C with construction attributes
	      IF (FRTSYM) THEN
	         CALL LSTARR(CONDEF,CONATT,COATTC,COATTV,.FALSE.)
C
	         CALL ADCORD(CSXY,CONATT,COATTC,COATTV)
C
C get more information about the symbol/text, if required
	         IF (FRTGT.EQ.SCATYP) THEN		! scaled symbol
C
C first work out a size
	            SIZ = FRTSIZ*SCLFRT
C
C if that fails use default
	            IF (SIZ.LE.0.0) SIZ=DFSSIZ*SCLFRT
C
C now add second point for scaled symbol
	            XY(1)=CSXY(1)+SIZ*COS(COIANG)
	            XY(2)=CSXY(2)+SIZ*SIN(COIANG)
	            CONATT = 0		! no attributes
	            CALL ADCORD(XY,CONATT,COATTC,COATTV)
	         ENDIF
C
C for texts, create a new COICTX (clearing old one first)
C
	      ELSE
	         IF (I+TOTPTS.EQ.1) THEN
	            CALL FREECTX(COICTXD)	! clear old values
	            COIFC = FC1			! set FC
	         ENDIF
	         CTXBUFW(CTX_W_TXTLEN) = CTXMAX
	         CTXBUFW(CTX_W_TXTLEN) = CPYSTR(TEXT(1:TEXTL),
     &	                  CTXBUFL(CTX_L_DESC))
	         CALL SETTH(CTXBUFL(CTX_L_TH),THICK,ERROR)
C
C was there a error
	         IF ((ERROR.EQ.MSG_UNKPTSIZ.OR.ERROR.EQ.MSG_UNKHTSIZ)
     &	             .AND.ROUTINE_ADDRESS(XERR).NE.0) THEN
	            IF (ERROR.EQ.MSG_UNKPTSIZ) THEN
	               ERROR = USR_UNKPTSIZ
	            ELSE
	               ERROR = USR_UNKHTSIZ
	            ENDIF
	            CALL CALLR(.NOT.FATAL,ERROR,
     &	                  %VAL(ROUTINE_ADDRESS(XERR)))
	         ENDIF
	         CTXBUFR(CTX_L_RO) = COIANG
	         CTXBUFR(CTX_L_X) = CSXY(1)
	         CTXBUFR(CTX_L_Y) = CSXY(2)
	         CALL SETTFS(TS1,TS2,TS3,TS4,CTXBUFW(CTX_W_TS1),
     &	                           ERROR)
C
C was there a error
	         IF ((ERROR.EQ.MSG_BADCODE).AND.
     &	               ROUTINE_ADDRESS(XERR).NE.0) THEN
	            CALL CALLR(FATAL,ERROR,
     &	                  %VAL(ROUTINE_ADDRESS(XERR)))
	            GOTO 695
	         ENDIF
C
C transfer list of attributes
	         CALL ARRLST(USERNATT,USERATTC,USERIATTV(1,I),
     &	                     CTXBUFL(CTX_L_ATTR),LISTLEN)
C
C set up auxiliary array (note: use TMPPAK to get correct size)
	         TMPPAK(PAKFC) = TS1
	         CALL GENAUX(1,CTXBUFR(CTX_L_X),CTXBUFL(CTX_L_AUX1),
     &	            CTXBUFL(CTX_L_DESC),CTXBUFR(CTX_L_RO),
     &	            CTXBUFL(CTX_L_TH),TMPPAK,CTXBUFW(CTX_W_TS1))
C
C add this buffer to text structure
	         IF (I+TOTPTS.EQ.1) THEN
	            CALL ADDCTX(COICTXD,.TRUE.)	! first one
	         ELSE
	            CALL INSRTCTX(COICTXD)
	            CALL LOADCOI(.FALSE.)
	         ENDIF
	      ENDIF
C
C other things about symbol/text
	      IF (FRTGT.NE.UNOTYP) THEN
	         IF (FRTGT.EQ.ORITYP.OR.FRTGT.EQ.TEXTYP) HADRO=.TRUE.
	         IF (FRTTEX) HADTX=.TRUE.
	      ENDIF
C
C alter state to Modify State
	      CALL SETSTA(STATE_MODIFY)
	      NDMODE=END_CONSTRUCT  ! end mode for end of construction
	   ENDIF
620	CONTINUE
C
	TOTPTS=TOTPTS+SIZE
	IF (TOTPTS.LT.NCOORDS) THEN
	   GOTO 610				! get more coords
	ELSE
C
C finished
	   IF (SINDEX.EQ.STATE_CONSTRUCT) THEN
	      IF (NDSTAR(VISIBLE)) GOTO 690
	   ELSE
	      IF (.NOT.TXTF) THEN
	         IF (GENAUX(NCOORDS,COIXY(1,2),COIAUX,COIDSC,
     &	                 COIANG,CONTH,COIPAK,CONFS)) GOTO 690
	      ENDIF
	      IF (NDSTCN(.TRUE.)) GOTO 690
	   ENDIF
	ENDIF
C
C set cursor back where it was
	CSXY(1)=CURSOR(1)
	CSXY(2)=CURSOR(2)
	CALL COPYDEF(SAV_CONDEF,CONDEF)
C
C delete feature here, if necessary
C
	IF (DELETEF) CALL DELFT(IHPAK,IHEF)
	DELETEF = .FALSE.
C
C abandon feature as another one has just been constructed
C
	CALL ABANDN
	GOTO 700
C
C error in constructing feature; ABORT
C
690	CALL LEARN(MSG_FTABANDONED)
	IF (ROUTINE_ADDRESS(XERR).NE.0) CALL CALLR(FATAL,
     &	            USR_FTABANDONED,%VAL(ROUTINE_ADDRESS(XERR)))
695	CSXY(1)=CURSOR(1)
	CSXY(2)=CURSOR(2)
	CALL COPYDEF(SAV_CONDEF,CONDEF)
	CALL ABANDN
	GOTO 9999
C
C get any returned information
C
700	MSG=ROUTINE_NAME(XRET)
	CNDFLG=JMPFLG
	RTSTRL=DLM
	RTSTR=' '
	RETCOD=0			! abort if not present
	IF (ROUTINE_ADDRESS(XRET).NE.0)
     &	   CALL CALLR(CNDFLG,RTSTRL,RTSTR,RETCOD,
     &	               %VAL(ROUTINE_ADDRESS(XRET)))
	GOTO (9999,2000,300,800,900,900) RETCOD+1
	GOTO 9000
C
C set any variable required
800	CONTINUE
	IF (ROUTINE_ADDRESS(XDEF).EQ.0) GOTO 2000
	IF (HADCTRLC()) GOTO 9999
	MSG=ROUTINE_NAME(XDEF)
	VARNAM_LEN = LEN(VARNAM)
	VARNAM = ' '
	INDEX = 0
	INTVAL = 0
	REALVAL = 0.0
	DBLVAL = 0.0	
	CHARVAL_LEN = LEN(RTSTR)
	RTSTR = ' '
	CALL CALLR(VARNAM_LEN,VARNAM,INDEX,INTVAL,REALVAL,DBLVAL,
     &	               CHARVAL_LEN,RTSTR,%VAL(ROUTINE_ADDRESS(XDEF)))
C
C look for variable name
	VARNAM_LEN = MIN(VARNAM_LEN,SIGCHS(VARNAM))
	IF (VARNAM_LEN .LE.0) THEN
	   VARNAM = ' '
	   VARNAM_LEN = 1
	ENDIF
C
	IF (MOANED) THEN
	   IF (ROUTINE_ADDRESS(XERR).NE.0) CALL CALLR(FATAL,
     &	            USR_VARIABLEERR,%VAL(ROUTINE_ADDRESS(XERR)))
	   GOTO 9999
	ENDIF
C
C create full variable name
	TXTPTR = TXTLIM
C
C fail safe - no subrng
	IF (VARNAM_LEN.LE.0) THEN
	   TXTPTR = EXPAND('%W',TXTBUF)
C
C dealing with arrays, when 1st word of descriptor is set (except
C when it is a real character descriptor)
	ELSEIF (INDEX .GT. 0) THEN
	   TXTPTR = EXPAND('%W%S%N',TXTBUF,VARNAM(:VARNAM_LEN),INDEX)
	ELSE
	   TXTPTR = EXPAND('%W%S',TXTBUF,VARNAM(:VARNAM_LEN))
	ENDIF
C
C set up the variable common block (NOTE: if variable does not exist
C this will moan!)
C Don't permit system, must exist, subscript required, not substituting
	CALL BSLN
	CALL FINVAR(.FALSE.,.TRUE.,.TRUE.,.FALSE.)
	IF (MOANED) THEN
	   IF (ROUTINE_ADDRESS(XERR).NE.0) CALL CALLR(FATAL,
     &	            USR_VARIABLEERR,%VAL(ROUTINE_ADDRESS(XERR)))
	   GOTO 9999
	ENDIF
C
C fill in appropriate type of variable,	branch on type
	GOTO (810,820,830,840,830),
     &	      GET_VARBYTE(%VAL(VAR_DESC_ADDRESS),3,DVARN)
C
810	CALL PUTLNG(INTVAL,%VAL(VARADR))
	IF (DIAOPT) CALL WRITEF('User routine has set variable "%S" to %N',
     &	                  DVAR(1:DVARL),INTVAL)
	GOTO 700
C
820	CALL PUTLNG(REALVAL,%VAL(VARADR))	! copy rounded value
	IF (DIAOPT) CALL WRITEF('User routine has set variable "%S" to %G0.8',
     &	                  DVAR(1:DVARL),REALVAL)
	GOTO 700
C
830	IF (CHARVAL_LEN.GT.0) THEN
	   CALL SETAUX(%REF(RTSTR),CHARVAL_LEN)
	   TXTPTR = TXTLIM			! set maximum length
	   TXTPTR = FINSTR(TXTDSC,'string')
	   IF (MOANED) THEN
	      IF (ROUTINE_ADDRESS(XERR).NE.0) CALL CALLR(FATAL,
     &	               USR_VARIABLEERR,%VAL(ROUTINE_ADDRESS(XERR)))
	      GOTO 9999
	   ENDIF
	ELSE
	   TXTPTR = 0
	ENDIF
	CALL STR$COPY_DX(%VAL(VARADR),TXTDSC)
	IF (DIAOPT) CALL WRITEF('User routine has set variable "%S" to %S',
     &	                  DVAR(1:DVARL),TXTDSC)
	GOTO 700
C
840	CALL CPYPAK(2,DBLVAL,%VAL(VARADR))	! copy 2 longwords
	IF (DIAOPT) CALL WRITEF(
     &	               'User routine has set variable "%S" to %^D%G0.15',
     &	                DVAR(1:DVARL),INTVAL)
	GOTO 700
C
C set any annotation value
900	CONTINUE
	IF (HADCTRLC()) GOTO 9999
	RTSTRL=DLM
	RTSTR=' '
	IF (RETCOD .EQ. 4) THEN
	   IF (ROUTINE_ADDRESS(XANO).EQ.0) GOTO 2000
	   MSG=ROUTINE_NAME(XANO)
	   ERROR = USR_ANNO_ERR
	   CALL CALLR(RTSTRL,RTSTR,%VAL(ROUTINE_ADDRESS(XANO)))
	ELSE
	   IF (ROUTINE_ADDRESS(XDRW).EQ.0) GOTO 2000
	   MSG=ROUTINE_NAME(XDRW)
	   ERROR = USR_DRAW_ERR
	   CALL CALLR(RTSTRL,RTSTR,%VAL(ROUTINE_ADDRESS(XDRW)))
	ENDIF
C
C make sure length is correct
	RTSTRL = MIN(SIGCHS(RTSTR),RTSTRL)
	IF (RTSTRL .EQ. 0) GOTO 700
C
	IF (RETCOD .EQ. 4) THEN
	   RTSTRL = CPYSTR('ANNOTATION '//RTSTR(1:RTSTRL),RTSTR)
	ELSE
	   RTSTRL = CPYSTR('DRAW '//RTSTR(1:RTSTRL),RTSTR)
	ENDIF
C
	CALL SETAUX(%REF(RTSTR),RTSTRL)	! set buffer
C
	CALL PROCMD
	IF (MOANED) THEN
	   IF (ROUTINE_ADDRESS(XERR).NE.0) CALL CALLR(FATAL,
     &	            ERROR,%VAL(ROUTINE_ADDRESS(XERR)))
	   GOTO 9999
	ENDIF
C
C call the routine to do the work
	IF (RETCOD .EQ. 4) THEN
	   CALL DOANNO
	   DONE_ANNO = .TRUE.
	ELSE
	   CALL DODRAW
	   DONE_DRAWING = .TRUE.
	ENDIF
C
	IF (MOANED) THEN
	   IF (ROUTINE_ADDRESS(XERR).NE.0) CALL CALLR(FATAL,
     &	            ERROR,%VAL(ROUTINE_ADDRESS(XERR)))
	   GOTO 9999
	ENDIF
	
	GOTO 700
C
C exit from USRRET
2000	JMPFLG=CNDFLG
	IF (DIAOPT) THEN
	   IF (JMPFLG) THEN
	      CALL WRITEF('User routine has set condition flag TRUE')
	   ELSE
	      CALL WRITEF('User routine has set condition flag FALSE')
	   ENDIF
	ENDIF
C
C execute any returned string
C
	IF (RTSTRL.GT.0) THEN
	   IF (SIGCHS(RTSTR(:RTSTRL)).GT.0) CALL SETEXT(RTSTR(:RTSTRL))
	ENDIF
	GOTO 9999
C
C illegal return code from subroutine
C
9000	CALL MOAN(MSG_UNKRETCOD,RETCOD,MSG(1:SIGCHS(MSG)))
	IF (ROUTINE_ADDRESS(XERR).NE.0) CALL CALLR(FATAL,
     &	            USR_UNKRETCOD,%VAL(ROUTINE_ADDRESS(XERR)))
C
9999	CONTINUE
C
C reset annotation block
	IF (DONE_ANNO) THEN
	   CALL RESTORE_ANNO
	ENDIF
C
C reset update workstation flag in SETANNO, and call SETANNO (twice) to
C make sure the workstation is updated
	IF (.NOT.NODISP .AND. DONE_DRAWING) THEN
	   FROM_USER = .FALSE.
	   CALL SETANNO(.TRUE.)
	   OCSXY(1) = CSXY(1)+1.0 ! force refresh re-draw
	   CALL SETANNO(.FALSE.)   
	ENDIF
	RETURN
	END
