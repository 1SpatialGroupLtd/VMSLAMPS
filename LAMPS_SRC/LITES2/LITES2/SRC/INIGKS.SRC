C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-06-22 15:19:00.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE INIGKS(OPEN)
C
***	MODULE	INIGKS
***	IDENT	22JN93
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England
C Author Clarke Brunt
C
C Written July 1984
C
C To initialise GKS
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:GKSPAR/
C
***	COMMON/CMN:DRAWIN/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:OVERLAY/
***	COMMON/CMN:WORKS/
C
C argument
	LOGICAL	OPEN		! open workstation, or just reset
C
C function called
	LOGICAL*1 TSTWK		! test workstations avaiable
	LOGICAL*1 TSTSEG	! test use segments
	INTEGER	ACT_RECALC
C
C w/s
	INTEGER	GASF(13)	! aspect source flags
	INTEGER	ERRIND,NLT,LT,NLW,NPPLI	! unused args for GQPLF
	REAL	RLWMIN,RLWMAX		! unused args for GQPLF
	INTEGER	DCUNIT		! DC units for GQMDS
	INTEGER	WKID		! loop count (workstation identifier)
	REAL    SCRSWX		! workstation viewport in device units
	REAL    SCRSWY
	REAL    SCRNEX
	REAL    SCRNEY
	INTEGER	OK
	INTEGER	DEV
C
C all aspect source flags individual
	DATA GASF/13*GINDIV/
C
C calculate viewport in NDC with same aspect ratio as maps
	NDCY = (LIMITS(4)-LIMITS(3))/(LIMITS(2)-LIMITS(1))
	NDCX = 1.0
	IF (NDCY.GT.1.0) THEN
	   NDCX = 1.0/NDCY
	   NDCY = 1.0
	ENDIF
	WFACX = 1.0
	WFACY = 1.0
C
C default size for workstation 1 (for use if no workstations at all)
	WKID = 1
	IF (OPEN) THEN
	   SCRNSX(1) = 0.36
	   SCRNSY(1) = 0.24
	   NOMLW = 0.001
	ENDIF
C
C determine whether required workstations are available
	IF (GRAOPT.AND.OPEN) THEN
	   IF (PRIOPT) THEN
	      PRIOPT = TSTWK(1,WTYPES(1),PNAM_LEN,PNAM,OK)
	      IF (.NOT.PRIOPT) CALL MOAN(MSG_PRINOTAVL)
	   ENDIF
	   IF (SECOPT) THEN
	      SECOPT = TSTWK(2,WTYPES(2),PNAM_LEN,PNAM,OK)
	      IF (.NOT.SECOPT) CALL MOAN(MSG_SECNOTAVL)
	   ENDIF
	ENDIF
C
C are any displays wanted?
	NODISP = .NOT.GRAOPT .OR. .NOT.(PRIOPT.OR.SECOPT.OR.KRSINI)
C
C if no diplays, then just set SCLDIS for use in calculating find radius
	IF (NODISP) GOTO 9990
C
C are we to use GKS segments?
	USESEG = SEGOPT.AND.TSTSEG()
	NEW_USESEG = USESEG			! for FLVIEW
	UPDATE_SEG = USESEG.AND.WKSUPP(1)	! segmented displays only
						! on primary
	IF (OPEN) THEN
C
C which workstations do we want?
	   WKOP(1) = PRIOPT
	   WKOP(2) = SECOPT
C
C open GKS
	   CALL GOPKS(6)		! open with errors to unit 6
	ENDIF
C
C turn clipping off for initial draw
	CALL GSCLIP(GNCLIP)
C
C set a window to correspond to the limits of map
	CALL GSWN(1,LIMITS(1),LIMITS(2),LIMITS(3),LIMITS(4))
C
C set a viewport with the same aspect ratio
	CALL GSVP(1,0.0,NDCX,0.0,NDCY)
C
C select the normalisation transformation
	CALL GSELNT(1)
C 
C open the workstation(s)
	DO 100 WKID=1,WSMAX
	   IF (.NOT.OPEN) THEN			! already open so...
	      IF (.NOT.WKOP(WKID)) GOTO 100		! not required
	      CALL GCLRWK(WKID,GALWAY)
	      CALL GSWKWN(WKID,0.0,NDCX,0.0,NDCY)
C
C compute workstation viewport from user specified viewport
	      SCRSWX = SCRSZX(WKID)*WKVSWX(WKID)
	      SCRSWY = SCRSZY(WKID)*WKVSWY(WKID)
	      SCRNEX = SCRSZX(WKID)*WKVNEX(WKID)
	      SCRNEY = SCRSZY(WKID)*WKVNEY(WKID)
C
C and set it up
	      CALL GSWKVP(WKID,SCRSWX,SCRNEX,SCRSWY,SCRNEY)
	      GOTO 100
	   ENDIF
	   IF (.NOT.WKOP(WKID)) GOTO 100		! not required
	   IF (WKID.EQ.1) THEN
	      CALL INFORM(MSG_INIWK,'primary')
	   ELSEIF (WKID.EQ.2) THEN
	      CALL INFORM(MSG_INIWK,'secondary')
	   ENDIF
	   DISPLAY_WTYPE(WKID) = WTYPES(WKID)
	   CALL DISPLAY_SPECIFY(WKID)
	   CALL GOPWK(WKID,CONIDS(WKID),WTYPES(WKID)) ! open workstation
	   CALL INIWK(WKID)	! device dependent initialistation
	   WKAC(WKID) = .NOT.WKSUPP(WKID)		! wanted active?
	   IF (WKAC(WKID)) CALL GACWK(WKID)		! activate it
C
C set the deferral state
	   CALL GSDS(WKID,GASTI,GSUPPD)
C
C clear the workstation
	   IF (CLEOPT) CALL GCLRWK(WKID,GALWAY)
C
C set polyline representation 1, solid, normal thickness, colour 1
C only relevant for any BUNDLED attribtues
	   CALL GSPLR(WKID,1,1,1.0,1)
C
C inquire polyline facilities (to get nominal linewidth)
	   CALL GQPLF(
     &WTYPES(WKID),1,ERRIND,NLT,LT,NLW,LWIDTH(WKID),RLWMIN,RLWMAX,NPPLI)
	   LWIDTH(WKID) = LWIDTH(WKID)*1000.	! convert to mm
C
C inquire maximum display surface
	   CALL GQMDS(
     &		WTYPES(WKID),ERRIND,DCUNIT,SCRSZX(WKID),SCRSZY(WKID),
     &		RASTSX(WKID),RASTSY(WKID))
C
C duplicate in DISPLAY variables for ease of use elsewhere
	   DISPLAY_RASX(WKID) = RASTSX(WKID)
	   DISPLAY_RASY(WKID) = RASTSY(WKID)
C
C set workstation window to be the entire map
	   CALL GSWKWN(WKID,0.0,NDCX,0.0,NDCY)
C
C compute workstation viewport from user specified viewport
	   SCRSWX = SCRSZX(WKID)*WKVSWX(WKID)
	   SCRSWY = SCRSZY(WKID)*WKVSWY(WKID)
	   SCRNEX = SCRSZX(WKID)*WKVNEX(WKID)
	   SCRNEY = SCRSZY(WKID)*WKVNEY(WKID)
C
C and set it up
	   CALL GSWKVP(WKID,SCRSWX,SCRNEX,SCRSWY,SCRNEY)
C
C compute effective screen size
	   SCRNSX(WKID) = SCRNEX-SCRSWX
	   SCRNSY(WKID) = SCRNEY-SCRSWY
C
	   IF (DCUNIT.NE.GMETRE) THEN
C
C fix up nominal linewidth
	      LWIDTH(WKID) = LWIDTH(WKID)*0.36/SCRNSX(WKID)
	      SCRNSY(WKID) = SCRNSY(WKID)*0.36/SCRNSX(WKID)
	      SCRNSX(WKID) = 0.36
	      CALL INFORM(MSG_DCUNITS,WKID,SCRNSX(WKID),SCRNSY(WKID))
	   ENDIF
C
100	CONTINUE
C
C set aspect source flags
	CALL GSASF(GASF)
C
C calculate scaling factor screen mm -> IFF units
C which screen is larger?
	WKID = 1				! assume primary
	IF (WKOP(1).OR.WKOP(2)) THEN
	   IF (WKOP(1).AND.WKOP(2)) THEN	! both open
	      IF (SCRNSX(2).GT.SCRNSX(1)) WKID = 2
	   ELSE					! only one active
	      IF (WKOP(2)) WKID = 2		! must be secondary
	   ENDIF
	   NOMLW = LWIDTH(WKID)
	ENDIF
C
	IF (.NOT.OPEN) GOTO 9990
C
C update colour map (OVERLAY UPDATE) if overlays are in use
	IF (OVERLAY_WORKSTATION.NE.0) THEN
	   OK = ACT_RECALC(DISPLAY_PTR(OVERLAY_WORKSTATION),
     &				D_RED,D_GREEN,D_BLUE)
	   IF (.NOT.OK) THEN
	      CALL NASTY(MSG_INTERNALERROR)
	      CALL LITES2_SIGNAL(OK)
	   ELSE
	      CALL LSCRS(OVERLAY_WORKSTATION,
     &				2**DISPLAY_PLANES(OVERLAY_WORKSTATION),
     &				D_RED,D_GREEN,D_BLUE)
	   ENDIF
	ENDIF
C
C create any other displays
	DO 101 DEV=3,MAXDISP
	   IF (DISPLAY_EXISTS(DEV)) THEN
	   CALL DISPLAY_CREATE(DEV)
	   CALL DISPLAY_CURSOR(DEV,DISPLAY_CURS(DEV))
	   OK = ACT_RECALC(DISPLAY_PTR(DEV),
     &				D_RED,D_GREEN,D_BLUE)
	   IF (.NOT.OK) THEN
	      CALL NASTY(MSG_INTERNALERROR)
	      CALL LITES2_SIGNAL(OK)
	   ELSE
	      CALL LSCRS(DEV,
     &			2**DISPLAY_PLANES(DEV),
     &			D_RED,D_GREEN,D_BLUE)
	   ENDIF
	ENDIF
101	CONTINUE
C
C join here to set SCLDIS even if no workstations in use
9990	IF (SCRNSX(WKID)/NDCX.GT.SCRNSY(WKID)/NDCY) THEN
	   SCLDIS = (LIMITS(4)-LIMITS(3))/SCRNSY(WKID)
	ELSE
	   SCLDIS = (LIMITS(2)-LIMITS(1))/SCRNSX(WKID)
	ENDIF
	SCLDIS = SCLDIS/1000.	! screen mm
	FULLSCLDIS = SCLDIS	! keep the value for the whole screen
C
	RETURN
	END
