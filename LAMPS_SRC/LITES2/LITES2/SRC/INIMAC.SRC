C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-05-09 10:49:10.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL	FUNCTION INIMAC
C
***	MODULE	INIMAC
***	IDENT	09MY96
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England
C Author Ron Russell					28-Jan-1992
C
C To initialise MACRO operations			
C Returns .FALSE. if initialised, .TRUE. if there was an error
C
	IMPLICIT NONE
C
***	PARAMETER/LSL$CMNLSL:TBLFLG/
***	PARAMETER/CMN:MACMEN/
C
***	COMMON/CMN:MACRO/
***	COMMON/CMN:MENUS/
C
C functions called
C
	LOGICAL		GET_MEM
	INTEGER		TRNALL		! LSLLIB, translate logical name
	LOGICAL		VIOCLR
	LOGICAL		RDLONG
	LOGICAL		RDCHS
C
C local variable
	INTEGER*4	MACARG_ADDR
	INTEGER		TABSIZ		! command table size
	INTEGER		ARGSIZ		! size of argument array
	INTEGER		PRISIZ		! size of priority bitmap
	INTEGER		MAXMENU_SQUARES
	INTEGER		LENGTH
	BYTE		CH
C
	INIMAC = .TRUE.			! assume failure
C
C get the maximum number of macros to be allowed
C (use SCRMEN_TITLE as a temporary string)
	MAXUSR = DEFAULT_MAXUSR
	IF (TRNALL(MAXMAC_LOG_NAME,SCRMEN_TITLE)) THEN
	   LENGTH = LEN(SCRMEN_TITLE)
	   CALL SETAUX(%REF(SCRMEN_TITLE),LENGTH)
	   IF (RDLONG(MAXUSR)) MAXUSR = DEFAULT_MAXUSR
	   IF (.NOT.RDCHS(CH)) MAXUSR = DEFAULT_MAXUSR
	ENDIF
C
C don't allow negative numbers of macros
	MAXUSR = MAX(0,MAXUSR)
C
C get the maximum number of menu squares to be allowed
C (use SCRMEN_TITLE as a temporary string)
	MAXMENU_SQUARES = DEFAULT_MAXMENU_SQUARES
	IF (TRNALL(MAXMENUSQU_LOG_NAME,SCRMEN_TITLE)) THEN
	   LENGTH = LEN(SCRMEN_TITLE)
	   CALL SETAUX(%REF(SCRMEN_TITLE),LENGTH)
	   IF (RDLONG(MAXMENU_SQUARES)) 
     &	                       MAXMENU_SQUARES = DEFAULT_MAXMENU_SQUARES
	   IF (.NOT.RDCHS(CH)) MAXMENU_SQUARES = DEFAULT_MAXMENU_SQUARES
	ENDIF
C
C don't allow negative numbers of macros
	MAXMENU_SQUARES = MAX(0,MAXMENU_SQUARES)
C
C calculate other totals
	MAXTAB = MAXUSR + MAXMEN + MAXPUK
	MAXPTR = MAXUSR + MAXMENU_SQUARES
	TABSIZ = MAXTAB*2 + 16		! as long words
	ARGSIZ = TABSIZ
	PRISIZ = (MAXPTR-MAXUSR+31)/32	
C
C set values in common block
	MENADD = MAXUSR
	FREBAS = MAXUSR
C
C get the space for the command table
	LENGTH = TABSIZ * 4		! as bytes
C
	IF (GET_MEM(MACRO_ZONE,MACTAB_ADDR,LENGTH)) GOTO 999	! failed
C
C for the argument array (ARGSIZ words)
	IF (MAXUSR .GT. 0) THEN
	   LENGTH = ARGSIZ * 2 
	   IF (GET_MEM(MACRO_ZONE,MACARG_ADDR,LENGTH)) GOTO 999 ! failed
C
C and the descriptors for the macro expansions
	   LENGTH = MAXPTR * 8
	   IF (GET_MEM(MACRO_ZONE,MACDSL_ADDR,LENGTH)) GOTO 999 ! failed
C
C make sure that descriptors are all clear, since they are tested to see
C whether they are free
	   IF (.NOT.VIOCLR(%VAL(MACDSL_ADDR),LENGTH)) GOTO 999
C
C and the descriptors for the macro annotations
	   LENGTH = MAXPTR * 8
	   IF (GET_MEM(MACRO_ZONE,MANDSL_ADDR,LENGTH)) GOTO 999 ! failed
C
C make sure that descriptors are all clear, since they are tested to see
C whether they are free
	   IF (.NOT.VIOCLR(%VAL(MACDSL_ADDR),LENGTH)) GOTO 999
C
C and the bitmap for priority (of menu squares)
	   LENGTH = PRISIZ * 4
	   IF (GET_MEM(MACRO_ZONE,MACPRI_ADDR,LENGTH)) GOTO 999 ! failed
C
C default to all unset
	   IF (.NOT.VIOCLR(%VAL(MACPRI_ADDR),LENGTH)) GOTO 999
C
C and the bitmap for priority (of puck buttons)
	   LENGTH = PRISIZ * 4
	   IF (GET_MEM(MACRO_ZONE,PUKPOS_ADDR,LENGTH)) GOTO 999 ! failed
C
C default to all set
	   IF (.NOT.VIOCLR(%VAL(PUKPOS_ADDR),LENGTH,-1)) GOTO 999
C
C and the descriptors for the macro annotations
	   LENGTH = (MAXPTR+7)/8
	   IF (GET_MEM(MACRO_ZONE,MACENC_ADDR,LENGTH)) GOTO 999 ! failed
	ENDIF
C
C Define the macro command table and save the details
	CALL INITAB(%VAL(MACTAB_ADDR),TABSIZ,0,0,%VAL(MACARG_ADDR),ARGSIZ)
	CALL SAVTAB(MACSAV)
C
	INIMAC = .FALSE.				! success
C
999	RETURN
	END
