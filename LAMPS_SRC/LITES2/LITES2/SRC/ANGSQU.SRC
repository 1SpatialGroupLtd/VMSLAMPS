C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-05-09 12:01:58.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION ANGSQU
C
***	MODULE	ANGSQU
***	IDENT	09MY96
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C
C Author  Ron Russell  (after R. Fairbairns in LITES)	15-Mar-1985
C	
C To square an item living in the found object
C (with copy in squaring arrays)
C
C The result of the function is FALSE if the squaring
C was successful
C
C The results of squaring are left set up in the D14WK1 arrays
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:CONSTS/
***     PARAMETER/CMN:MOANMESS/		! moan constants
C
***     COMMON/CMN:D14IFC/
C
C Local Variables
	INTEGER		X,Y
	PARAMETER 	(X=1)
	PARAMETER	(Y=2)
C
	BYTE EQVCLS(D14MP1)
	REAL MIDX(D14MP1),MIDY(D14MP1)
	INTEGER I,J,K,CRILIM
C
	REAL THETA,PHI,PHI1,ALPHA
	REAL LENGTH,WT,WTDANG
	REAL DX,DY
	REAL SPH,STH,SINS(2),CPH,CTH,COSS(2)
	REAL L1,M1,N1, L2,M2,N2, XRAT
	LOGICAL*1 OPEN,CLOSED
C
	EQUIVALENCE (SINS(1),STH),(SINS(2),SPH)
	EQUIVALENCE (COSS(1),CTH),(COSS(2),CPH)
C
	ANGSQU=.TRUE.
C
C work out if open feature or not
	OPEN=D14WK1(X,1).NE.D14WK1(X,D14NPT).OR.
     &	           D14WK1(Y,1).NE.D14WK1(Y,D14NPT)
	CLOSED=.NOT.OPEN
C
C calculate target angles
	IF (BASESQ) THEN
C
C generate angles from the first base
	   THETA = ATAN2(BASSTR(Y,1)-BASEND(Y,1),
     &			 BASSTR(X,1)-BASEND(X,1))
	   IF (THETA.LT.0.0) THETA = THETA+PI
	   PHI = THETA+PIBI2
	ELSE
C
C generate angles from elements on either side of current vertex
	   IF (.NOT.ONVRT) THEN		! not on vertex
	      CALL MOAN(MSG_NOTONVRT)
	      GOTO 900
	   ELSEIF (OPEN.AND.(THSVRT.EQ.1.OR.THSVRT.EQ.D14NPT)) THEN
	      CALL MOAN(MSG_ONEND)
	      GOTO 900
	   ENDIF
	   I = THSVRT
	   J = I+1
	   IF (CLOSED.AND.THSVRT.EQ.D14NPT) J = 2
	   K = I-1
	   IF (CLOSED.AND.THSVRT.EQ.1) K = D14NPT-1
	   THETA = ATAN2(D14WK1(Y,I)-D14WK1(Y,K),
     &			D14WK1(X,I)-D14WK1(X,K))
	   IF (THETA.LT.0.0) THETA = THETA+PI
	   PHI = ATAN2(D14WK1(Y,J)-D14WK1(Y,I),
     &			D14WK1(X,J)-D14WK1(X,I))
	   IF (PHI.LT.0.0) PHI = PHI+PI
	   IF (PHI.LT.THETA) PHI = PHI+PI
C
C difference - is it within TOLeRaNCe of pi/2?
	   PHI1 = PHI-THETA-PIBI2
	   IF (ABS(PHI1).GE.TOLRNC) THEN
	      CALL MOAN(MSG_VERTNOTRT)
	      GOTO 900
	   ENDIF
C
C OK - so we bring both to the mean value
	   THETA = THETA+0.5*PHI1
	   PHI = PHI-0.5*PHI1
	ENDIF
C
C now we must square, so we can get object into hand
	CALL HANDLE
C
C limit of changing operations
	CRILIM = D14NPT-1
	IF (OPEN) CRILIM = CRILIM-1
C
C classify all the edges of the object,
C calculating at the same time mean values, etc
	WT = 0.0
	WTDANG = 0.0
	DO 80 I = 1,D14NPT-1
	   J = I+1
	   MIDX(I) = 0.5*(D14WK1(X,J)+D14WK1(X,I))
	   MIDY(I) = 0.5*(D14WK1(Y,J)+D14WK1(Y,I))
	   DX = D14WK1(X,J)-D14WK1(X,I)
	   DY = D14WK1(Y,J)-D14WK1(Y,I)
	   LENGTH = SQRT(DX*DX+DY*DY)
	   ALPHA = ATAN2(DY, DX)
C
C is it an invisible line?
	   IF (D14IV1(I)) THEN
	      EQVCLS(I)=0
	      GOTO 80
	   ENDIF
C
C is it a 'theta'?
	   IF (ALPHA.LT.0.0) ALPHA = ALPHA+PI
	   IF (ABS(ALPHA-THETA).LT.TOLRNC) GOTO 40
	   IF (ALPHA.LT.THETA) ALPHA = ALPHA+PI
	   IF (ABS(ALPHA-THETA).GE.TOLRNC) GOTO 50
C
C yes - mark it as such
40	   EQVCLS(I) = 1
	   GOTO 70
C
C not a 'theta' - is it a 'phi'?
50	   IF (ABS(ALPHA-PHI).LT.TOLRNC) GOTO 60
C
C it's unclassifiable
	   EQVCLS(I) = 0
	   GOTO 80
C
C it's a 'phi' - mark it
60	   EQVCLS(I) = 2
	   ALPHA = ALPHA-PIBI2
C
C add into 'mean calculants'
70	   WTDANG = WTDANG+ALPHA*LENGTH
	   WT = WT+LENGTH
C
80	CONTINUE
C
C generate corrected direction, unless fixed by 'parallel'
	IF (BASESQ) GOTO 90
	THETA = WTDANG/WT
	PHI = THETA+PIBI2
C
C now go round to ensure that we've not classified two
C consecutive edges into the same class
90	DO 100 I = 1,CRILIM
	   IF (EQVCLS(I).EQ.0) GOTO 100
	   J = I+1
	   IF (J.EQ.D14NPT) J = 1
	   IF (EQVCLS(I).NE.EQVCLS(J)) GOTO 100
C
C same class - treat both as 'don't care'
	   EQVCLS(I) = 0
	   EQVCLS(J) = 0
100	CONTINUE
C
C final check - is there anything left to shift?
	J = 0
	K = 0
	DO 110 I = 1,D14NPT-1
	IF (EQVCLS(I).EQ.1) J = J+1
110	IF (EQVCLS(I).EQ.2) K = K+1
C
C SQUARE IT
C ------ --
C
	CALL INFORM(MSG_SQREPA,J,K,D14NPT-1-J-K)
	IF (J+K.EQ.0) GOTO 850		! no sides to square
	STH = SIN(THETA)
	CTH = COS(THETA)
	SPH = SIN(PHI)
	CPH = COS(PHI)
	DO 210 I = 1,CRILIM
C
C don't try to re-intersect two 'unswizzleables'
	   J = I+1
	   IF (J.EQ.D14NPT) J = 1
	   IF (EQVCLS(I).EQ.0.AND.EQVCLS(J).EQ.0) GOTO 210
C
C find the definition of the 'edge under consideration'
	   IF (EQVCLS(I).NE.0) THEN
C
C a swizzleable
	      M1 = -COSS(EQVCLS(I))
	      L1 = SINS(EQVCLS(I))
	   ELSE
C
C a fixed edge
	      M1 = MIDX(I)-D14WK1(X,I+1)
	      L1 = D14WK1(Y,I+1)-MIDY(I)
	   ENDIF
C
C calculate the third line coordinate
	   N1 = (MIDX(I)-M1)*MIDY(I)-MIDX(I)*(MIDY(I)+L1)
C
C now the line it's to meet
	   IF (EQVCLS(J).NE.0) THEN
	      L2 = SINS(EQVCLS(J))
	      M2 = -COSS(EQVCLS(J))
	   ELSE
	      L2 = D14WK1(Y,J)-MIDY(J)
	      M2 = MIDX(J)-D14WK1(X,J)
	   ENDIF
	   N2 = (MIDX(J)-M2)*MIDY(J)-MIDX(J)*(MIDY(J)+L2)
C
C calculate x-ratio
	   XRAT = L1*M2-L2*M1
C
C NB the elimination of pairs of lines in the same equivalence class
C     also eliminates the possibility that XRAT will be zero
C
C point of intersection
	   D14WK1(X,J) = (N2*M1-N1*M2)/XRAT
	   D14WK1(Y,J) = (L2*N1-L1*N2)/XRAT
210	CONTINUE
C
C deal with the dangling ends of an OPEN one
	IF (OPEN) THEN
	   K = 0
	   DO 220 I = 1,D14NPT-1,CRILIM
	      IF (EQVCLS(I).EQ.0) GOTO 220
C
C a swizzleable edge
	      D14WK1(X,I+K) = 2.0*MIDX(I)-D14WK1(X,I+1-K)
	      D14WK1(Y,I+K) = 2.0*MIDY(I)-D14WK1(Y,I+1-K)
	      K = K+1
220	   CONTINUE
	ELSE				! closed feature; last point
	   D14WK1(X,D14NPT)=D14WK1(X,1)	! same as first one
	   D14WK1(Y,D14NPT)=D14WK1(Y,1)
	ENDIF
C
C success exit
850	ANGSQU = .FALSE.
C
900	RETURN
	END
