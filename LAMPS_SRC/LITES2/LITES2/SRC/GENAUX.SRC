C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1995-03-30 14:20:16.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION GENAUX(
     &		NOPTS,XYCORD,AUX,TEXT,ROTANG,TXSIZE,PACK,FS)
C
***	MODULE	GENAUX
***	IDENT	30MR95
C
C Copyright Laser Scan Laboratories Ltd, Cambridge, England.
C Author Clarke Brunt
C
C Created					CCB	31-May-1984
C
C Routine to work out angle, size, and extra data for symbols,
C texts, and circle arcs.
C The appropriate feature code will be set up in /FRTCOM/
C Circles are actually done for us by GENCIR
C
C The graphical types we deal with are:
C
C   2 - Clockwise circle arc	  > Start pt, Centre pt, End pt.
C   3 - Anticlockwise circle arc  >    "    ,    "     ,   "   .
C   4 - Circumcircle arc	  >    "    , Any edge pt, "   .
C   5 - Full circumcircle	  > Any 3 edge pts.
C (Direction is implicit in 4 and 5).
C
C   7 - Unoriented symbol
C   8 - Oriented symbol
C   9 - Scaled symbol
C
C  10 - Text
C
C  11 - Symbol string (same as 7 for our purposes)
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:CONSTS/
***	PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:PACK/
C
***	COMMON/CMN:DRAWIN/
***	COMMON/LSL$CMNFRT:FRTCOM/
***	COMMON/LSL$CMNFRT:FRTTRI/
***	COMMON/CMN:OPTION/
C
C Arguments
	INTEGER*2 NOPTS		! (input) number of points to deal with
				!	  (should be 1,2 or 3)
	                        ! NOTE: if passed a long word (greater
				! than 32767), and this results in -ve
				! value does not matter, since only
				! ever checked as .GT. 1
	REAL XYCORD(2,3)	! (input)  coordinates (need 3 at most)
	REAL AUX(AUXLEN)	! (output) auxiliary data array
C
C rest are only used at all for texts and symbols
	CHARACTER*(*) TEXT	! (input)  text itself
	REAL ROTANG		! (input)  rotation if present
	INTEGER TXSIZE		! (input)  size (texts only)
	INTEGER PACK(PAKLEN)	! (input)  pack for feature
	INTEGER*2 FS(4)		! feature status words for feature
				! (only FS(3) significant at present)
C
C Functions called
	LOGICAL	SRISCN,TRISCN,FRTFND
	LOGICAL GENCIR
	LOGICAL	LIB$EXTZV
C
C W/s
	REAL LAUX(AUXLEN)	! local version of AUX array
C text and symbol parameters
	REAL ANGLE
	REAL COSINE,SINE	! of the angle
	REAL SIZE
	REAL MINX,MAXX,MINY,MAXY ! extents (allowing for size)
C
	REAL EXTX,EXTY		! size of text box
	INTEGER	LOCAT		! text location point
	INTEGER	DX,DY		! offsets of half EXT's implied by LOCAT
C
C Text and symbol auxiliary array
	EQUIVALENCE	(LAUX(ANGI),ANGLE),
     &			(LAUX(COSI),COSINE),
     &			(LAUX(SINI),SINE),
     &			(LAUX(SIZI),SIZE),
     &			(LAUX(MINXI),MINX),
     &			(LAUX(MAXXI),MAXX),
     &			(LAUX(MINYI),MINY),
     &			(LAUX(MAXYI),MAXY)
C
	GENAUX = .FALSE.		! assume success
C
C Fill FRTCOM - it tends to get corrupted!
	IF (FRTFND(PACK(PAKFC))) THEN
	   CALL NASTY(MSG_BADCODE,PACK(PAKFC))
	   CALL COLAPS(MSG_BADCODE)
	   GENAUX=.TRUE.		! fail
	   GOTO 2000
	ENDIF
C
C deal with arcs
	IF (.NOT.FRTARC) GOTO 100	! not a circle
	GENAUX = GENCIR(FRTGT,XYCORD,AUX)
	GOTO 2000
C
C***********************************************************************
C
C texts and symbols
C
C Unoriented symbols and symbol strings (multiple unoriented symbols)
C do not take any angle.
C Oriented and scaled symbols and text take an angle defined by the
C RO entry. If no RO is given then any alignment is used.
C
C Unoriented and oriented symbols, text and symbol strings have
C a size set by the FRT size value.
C Scaled symbols have a size defined by the alignment (the 2 points
C define the unity length of the symbol. If no alignment is given then
C the FRT size is used.
C
C For all feature types, the default angle is horizontal and the
C default size is defined within the program.
C
C First work out the angle.
C
C What type of feature is it?
100	IF ((FRTGT.EQ.UNOTYP).OR.(FRTGT.EQ.STRTYP)) THEN
C Unoriented symbol / Symbol string
	   ANGLE = 0.0
	   COSINE = 1.0
	   SINE = 0.0
	   GOTO 200			! go and do size
	ENDIF
C
C Oriented symbol / scaled symbol / text.
C Rotation (RO) entry is used in preference to alignment.
	ANGLE = ROTANG			! use RO by default
	IF (NOPTS.GT.1) THEN
C If there was an alignment then work out the angle in the range
C 0 to 2*pi (note ATAN2 returns a value in the range -pi to +pi).
	   EXTX=XYCORD(1,2)-XYCORD(1,1)
	   EXTY=XYCORD(2,2)-XYCORD(2,1)
	   ANGLE=ATAN2(EXTY,EXTX)
	   IF (ANGLE.LT.0.0) ANGLE=TWOPI+ANGLE
	ENDIF
	COSINE = COS(ANGLE)
	SINE = SIN(ANGLE)
C
C***********************************************************************
C
C Now work out the size (initially in mms on the map, then *SCLFRT)
C
C Use the alignment distance if its a scaled symbol.
200	IF ((FRTGT.EQ.SCATYP).AND.NOPTS.GT.1) THEN
	   SIZE=SQRT(EXTX**2+EXTY**2)
	ELSEIF (.NOT.FRTTEX) THEN		! all other symbols
	   SIZE=FRTSIZ*SCLFRT
	ENDIF
C
C if height option enabled for text, use TXSIZE parameter
C
	IF (FRTTEX) THEN
	   IF (HEIOPT) THEN
	      IF (POIOPT) THEN
	         CALL PSTOSZ(TXSIZE,SIZE)
	      ELSE
	         SIZE=TXSIZE/100.0    ! mm size is in 100mms in TH entry
	      ENDIF
	      IF (SIZE.LE.0.0) SIZE=FRTSIZ	! if 0.0, use frt
	   ELSE
C 
C otherwise use size from FRT
C
	      SIZE=FRTSIZ
	   ENDIF
	   SIZE=SIZE*SCLFRT
	ENDIF
C
C use default, if all else fails
C
	IF (SIZE.LE.0.0) THEN
	   IF (FRTSYM) THEN
	      SIZE = DFSSIZ*SCLFRT
	   ELSE
	      SIZE = DFTSIZ*SCLFRT
	   ENDIF
	ENDIF
C
C if non scaling bit is set in flags word, then get the size in mm on
C the screen
	IF (.NOT.IGNORE_BIT_14) THEN
	   IF (LIB$EXTZV(14,1,FRTFLG)) THEN	! look at bit 14
	      SIZE = SIZE /SCLFRT * SCLDIS
	   ENDIF
	ENDIF
C
C calculate the extents
C
	IF (FRTSYM) THEN
	   IF (SRISCN(FRTSC,MINX,MAXX,MINY,MAXY)) THEN
	      GENAUX = .TRUE.
	      GOTO 2000
	   ENDIF
	ELSE
	   MINX = 0.0
	   MINY = 0.0
	   MAXY = 1.0
	   IF (TRISCN(TEXT,FRTSC,MAXX,HWTOPT.AND.FRTHWS)) THEN
	      GENAUX = .TRUE.
	      GOTO 2000
	   ENDIF
C
C reduce length of text by the justification factor of a character
C height to allow for space at end of (last) letter. 
C This is a bit arbitrary; it depends on the TRI being used.
C Don't let it go negative
	   IF (ABS(MAXX).GT.JSTPROP) MAXX = MAXX - SIGN(JSTPROP,MAXX)
	   LOCAT=FS(3).AND.'F'X			! get text location
	   IF (LOCAT.GT.8) LOCAT=0		! in range 0-8
C
C increase the length if dealing with an italicised text
	   IF (FRTSC.LT.0.AND.OVERHANG) THEN
CCC	      IF (TRIA2.GT.0.0) THEN 
CCC	         MAXX = MAXX + TRIA2*MAXY
CCC	      ELSE
CCC	         MINX = MINX + TRIA2*MAXY
CCC	      ENDIF
	      MAXX = MAXX + ABS(TRIA2)*MAXY
	   ENDIF
	ENDIF
C
	MINX = MINX*SIZE
	MAXX = MAXX*SIZE
	MINY = MINY*SIZE
	MAXY = MAXY*SIZE
C
C move text box, if locating point is not pt 0 and text positioning
C is turned on
	IF (FRTTEX.AND.POSOPT.AND.LOCAT.NE.0) THEN
	   DX=LOCAT/3			! integer division
	   DY=MOD(LOCAT,3)
	   EXTX=(MAXX-MINX)/2		! half the size in X
	   EXTY=(MAXY-MINY)/2		! half the size in Y
	   MINX=MINX-EXTX*DX		! alter position in X
	   MAXX=MAXX-EXTX*DX
	   MINY=MINY-EXTY*DY		! and in Y
	   MAXY=MAXY-EXTY*DY
	ENDIF
C
C***********************************************************************
C
C Copy over the local auxiliary array to the argument
1000	CALL CPYPAK(AUXLEN,LAUX,AUX)
C
2000	RETURN
	END
