C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-10-11 08:44:16.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE DISPRN(REG,AREA)
C
***	IDENT	11OC89
***	MODULE	DISPRN
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C to draw a region
C
C Author R.W. Russell			11-Aug-1985
C
	IMPLICIT	NONE
C
C arguments (input)
C
	INTEGER		REG		! region to draw
	LOGICAL		AREA		! as line/area
C
***	PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:REGPAR/
C
***	COMMON/LSL$CMNFRT:FRTCOM/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:REGCMN/
C
C functions
	LOGICAL		DEFREG
C
C local workspace
	INTEGER*4	CURPPT		! address of current PPT
	REAL		XYSTART(2)	! first point in region
	REAL		XY(2)
	INTEGER		Z(2)
C
C check for valid region
	IF (.NOT.DEFREG(REG)) GOTO 999
C
C set up correct FRT values for STDBFF
C
	FRTFC = -1			! spoiled common block
	FRTSC = 0
	FRTARE = AREA
C
C empty graphics buffer
C
	CALL STDBFF(0)
C
C get first point of region and initialise loop
C	
	Z(1) = CSZI		! draw at cursor height
	Z(2) = CSZI
C
	CURPPT=REGPTR(1,REG)
	CALL PUTLNG(%VAL(CURPPT+OFFX),XYSTART(1))
	CALL PUTLNG(%VAL(CURPPT+OFFY),XYSTART(2))
	CALL STDBFA(1,XYSTART,Z)
C
C get next point from region and add it
C
10	CALL PUTLNG(%VAL(CURPPT),CURPPT)
	IF (CURPPT.NE.REGPTR(2,REG)) THEN
	   CALL PUTLNG(%VAL(CURPPT+OFFX),XY(1))
	   CALL PUTLNG(%VAL(CURPPT+OFFY),XY(2))
	   CALL STDBFA(1,XY,Z)
	   GOTO 10
	ENDIF
	CALL STDBFA(1,XYSTART,Z)	! add start point again
C
C draw it out
C
	CALL STDBFF(2)
C
999	RETURN
	END
