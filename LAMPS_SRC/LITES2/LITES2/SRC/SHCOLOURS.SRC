C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-03-16 18:06:02.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE SHCOLOURS
C
***	IDENT	16MR91
***	MODULE	SHCOLOURS
C
C	Copyright Laser-Scan Ltd., Cambridge, England.
C
C	Created					RWR	17-Nov-1989
C
C	LITES2 cartographic editor SHOW COLOURS command.
C
	IMPLICIT NONE
C
***     PARAMETER/CMN:MOANMESS/		! moan constants
C
***     COMMON/CMN:DOUT/
***	COMMON/CMN:FCS/
***	COMMON/CMN:GLOBAL/
***     COMMON/CMN:OVERLAY/
***     COMMON/CMN:WORKS/
C
C functions
	LOGICAL		LIB$EXTZV
	INTEGER		ACT_GET_COLOUR_VALUE
	INTEGER		ACT_GET_COLOUR_ATTRIBUTE
	INTEGER		ACT_GET_BACKDROP_VALUE
	LOGICAL		TSTWK
	LOGICAL*1	ALPHA
C
	EXTERNAL OVERLAY_ATTRIBUTE_CMD_TABLE
	EXTERNAL SHOW_COLOUR_CMD_TABLE
C
C workspace
	INTEGER		I
	INTEGER		TOP
	INTEGER		IERR
	CHARACTER*12	ATTRIBUTE
	INTEGER		ATTRL
	INTEGER		ATTRN
	REAL		R,G,B
	INTEGER		CTYP
	INTEGER*4	OK
	LOGICAL		USE_GKS
	LOGICAL		HAD_WS
	INTEGER		PLANES
	INTEGER		NULL
	CHARACTER*1	NULLC
	INTEGER		WTYPE
	INTEGER		WS		! ws
	INTEGER		OC,DC
	EQUIVALENCE	(OC,OVERLAY_CURRENT)
	CHARACTER*3	C(3)
	DATA		C/'RGB','HLS','HSV'/
C
	DC = DISPLAY_CURRENT
	IF (DC.EQ.0) DC = OVERLAY_WORKSTATION
	USE_GKS = DC.LT.2.AND..NOT.OVERLAYS_INUSE
	IF (DC.EQ.0.AND..NOT.USE_GKS) THEN
	   CALL MOAN(MSG_NOCURDISP)
	   CALL LEARN(MSG_USEDISPNUM)
	   GOTO 9990
	ENDIF
	IF (.NOT.USE_GKS) THEN
	   IF (.NOT.DISPLAY_EXISTS(DC)) THEN
	      CALL MOAN(MSG_DISPNOTEXISTS,DC)
	      CALL LEARN(MSG_USEDISPCRE)
	      GOTO 9990
	   ENDIF
C
C valid overlay?
	   IF (OC.EQ.0) THEN
	      CALL MOAN(MSG_NOCUROV)
	      CALL LEARN(MSG_USEOVNUM)
	      GOTO 9990
	   ENDIF
	ELSE
C
C initialise default action
	   WS = 1
	   HAD_WS = .FALSE.
	   ATTRIBUTE = 'OPAQUE'
	   ATTRL = 6
	ENDIF
C
C next workstation
10	CONTINUE
	IF (USE_GKS.AND..NOT.WKOP(WS)) GOTO 200
C
C get maximum colour index
	IF (USE_GKS) THEN
	   WTYPE = WTYPES(WS)		! put WTYPES in local variable
	   IF (.NOT.TSTWK(WS,WTYPE,NULL,NULLC,PLANES)) GOTO 200 ! no ws
	   HAD_WS = .TRUE.
	   IF (PLANES.EQ.0) THEN		! not colour display
	      CALL INFORM(MSG_NOCOLDISP,WS)
	      GOTO 200
	   ELSEIF(PLANES.LT.0) THEN
	      CALL MSGCMD(MOAN,MSG_CMDNOTWITHHW)
	      GOTO 9990
	   ENDIF
	ELSE
	   PLANES = OVERLAY_PLANES(OC,DC)
	ENDIF
C
	TOP = 2**PLANES - 1
C
C check for possible colour type command on end of buffer
	I = 0
	IF (DSTRL.GT.0) THEN
	   I = DSTRL
20	   IF (ALPHA(ICHAR(DSTR(I:I)))) THEN
	      I = I-1
	      IF (I.GT.0) GOTO 20
	   ENDIF
	ENDIF
C
C set bits in bit map
	IF (I.EQ.0) THEN
	   CALL VIOCLR(SELBUF,TOP/8+1,-1)	! set all bits
	ELSE
	   CALL VIOCLR(SELBUF,TOP/8+1,0)
	   CALL RDSEL(TOP,DSTR(:I),.FALSE.,TOP/32+1,SELBUF,IERR)
	   IF (IERR.LT.0) GOTO 9990
	ENDIF
C
	CTYP = 1		! assume RGB
	IF (I.LT.DSTRL) THEN
	   CALL GET_COMMAND(DSTR(I+1:DSTRL),SHOW_COLOUR_CMD_TABLE)
	   IF (MOANED) GOTO 9990
	   CTYP = DPRIN
	ENDIF
C
C displays with overlays are different from those using GKS
	IF (.NOT.USE_GKS) THEN
C
C get the BACKDROP colour
	   OK = ACT_GET_BACKDROP_VALUE(DISPLAY_PTR(DC),R,G,B)
	   IF (.NOT.OK) THEN
	      CALL LITES2_SIGNAL(OK)
	      GOTO 9990
	   ENDIF
	   IF (CTYP.EQ.2) THEN
	      CALL CONV_RGB_HLS(R,G,B)
	   ELSEIF (CTYP.EQ.3) THEN
	      CALL CONV_RGB_HSV(R,G,B)
	   ENDIF
C
C write out specified colours
	   CALL INFORM(MSG_COLOURHDR1,DC,OC,
     &		C(CTYP)(1:1),R,C(CTYP)(2:2),G,C(CTYP)(3:3),B)
	ELSE
	   CALL INFORM(MSG_COLOURHDR3,WS)
	ENDIF
C
	CALL INFORM(MSG_BLANK)
	CALL INFORM(MSG_COLOURHDR2,
     &		C(CTYP)(1:1),C(CTYP)(2:2),C(CTYP)(3:3))
	CALL INFORM(MSG_BLANK)
C
	DO 100, I = 0,TOP
	   IF (LIB$EXTZV(I,1,SELBUF)) THEN
C
C get the required colour
	      IF (USE_GKS) THEN
C
C get the colour from GKS
	         CALL LQCR(WS,I,NULL,OK,R,G,B)
	      ELSE
C
C get it from ACTLIB
	         OK = ACT_GET_COLOUR_VALUE(OVERLAY_PTR(OC,DC),
     &		            I,R,G,B)
	         IF (.NOT.OK) THEN
	            CALL LITES2_SIGNAL(OK)
	            GOTO 9990
	         ENDIF
	         IF (CTYP.EQ.2) THEN
	            CALL CONV_RGB_HLS(R,G,B)
	         ELSEIF (CTYP.EQ.3) THEN
	            CALL CONV_RGB_HSV(R,G,B)
	         ENDIF
C
C and its attribute
	         OK = ACT_GET_COLOUR_ATTRIBUTE(OVERLAY_PTR(OC,DC),
     &	              I,ATTRN)
	         IF (.NOT.OK) THEN
	            CALL LITES2_SIGNAL(OK)
	            GOTO 9990
	         ENDIF
C
C get the name from the attribute number
	         OK = 0
	         CALL FIND_CMDNAME(OVERLAY_ATTRIBUTE_CMD_TABLE,ATTRN,
     &	                 ATTRIBUTE,ATTRL,OK)
	      ENDIF
	      CALL INFORM(MSG_COLOURVAL,I,R,G,B,ATTRIBUTE(1:ATTRL))
	   ENDIF
100	CONTINUE
C
C for GKS, get next workstation
200	CONTINUE
	IF (USE_GKS) THEN
	   IF (WS.LT.WSMAX) THEN
	      WS = WS+1
	      GOTO 10
	   ELSEIF (.NOT.HAD_WS) THEN
	      CALL MOAN(MSG_NOWORKSOPEN)
	      GOTO 9990
	   ENDIF
	ENDIF
C	      
	GOTO 9999
C
9990	CALL IGNCMD
9999	RETURN
	END
