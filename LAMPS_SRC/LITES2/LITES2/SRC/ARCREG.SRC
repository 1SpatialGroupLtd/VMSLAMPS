	LOGICAL FUNCTION ARCREG(ARC,ARCLTD,REG,INSIDE)
C
***	IDENT	07NO89
***	MODULE	ARCREG
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	 9-Oct-1985
C
C Description
C
C	Logical function that returns .TRUE. when an arc cuts
C	the region REG, and .FALSE. otherwise.  If either end of
C	ARC lies on the region, then the variable INSIDE is used
C	to determine the result, the value being .NOT. INSIDE.
C	(this is to agree with convention that a point lying
C	on the region is inside it)	
C
C	It is the responsibility of the calling program to ensure
C	that REG is valid, and that it has at least two points
C	(three	are more sensible)
C
	IMPLICIT NONE
C
C common and parameter blocks
C
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:CONSTS/
***	PARAMETER/CMN:REGPAR/
***	PARAMETER/CMN:SECTOR/
C
***	COMMON/CMN:MASTER/
***	COMMON/CMN:REGCMN/
***	COMMON/CMN:SECMAP/
C
C Arguments
C (input)
C
	REAL		ARC(AUXLEN)	! arc to test
	REAL		ARCLTD(4)	! limits of box bounding arc
	INTEGER*4	REG		! number of region
	LOGICAL		INSIDE		! .TRUE. if inside region
	REAL		DIR
C
C functions
C
	INTEGER		CISECS,LIB$EXTZV
	LOGICAL		PINREG
	INTEGER		GETARR
C
C Local Variables
C
	INTEGER*4	CURPPT		! counter
	REAL		TSTLNE(2,2)	! current line of region
	REAL		XSTART,YSTART	! first point in region
	LOGICAL		FINISHED	! loop control
	LOGICAL		TOUCH		! does arc touch line?
	LOGICAL		CUT
	INTEGER*4	J		! loop counter
	INTEGER		NUM
	REAL		XY1(2),XY2(2)
	REAL		XXYY(2,2)
	EQUIVALENCE	(XY1(1),XXYY(1,1))
	EQUIVALENCE	(XY2(1),XXYY(1,2))
	INTEGER		INLIN(2),INARC(2)
	REAL		DANG
	REAL		ANG
	REAL		TMPXY(2)
	LOGICAL		INS
	LOGICAL		INSEND
	INTEGER		NO
C
C assume inside
C
	CUT=.FALSE.
	IF (ARC(TOTI).GE.0.0) THEN
	   DIR = 1.0
	ELSE
	   DIR = -1.0
	ENDIF

C
C do gross check against bounding rectangle
C
	IF (.NOT.INSIDE.AND.
     &	    (ARCLTD(2).LT.REGLIM(1,REG)).OR.
     &	    (ARCLTD(1).GT.REGLIM(2,REG)).OR.
     &	    (ARCLTD(4).LT.REGLIM(3,REG)).OR.
     &	    (ARCLTD(3).GT.REGLIM(4,REG))) GOTO 1000
C
C sector region if required
	IF ((REGDEF(REG).AND.REGDEF_SEC).EQ.0) CALL SECREG(REG)
C
C arc can only cut region boundary if the sectors it passes through
C are common with the sectors the region boundary passes through
C
	DO 10,J=1,CISECS(ARC,%VAL(SECTRS))
	   IF (LIB$EXTZV(GETARR(%VAL(SECTRS),J),1,
     &	                     %VAL(REGMAP(REG)))) GOTO 20 ! possible
   10	CONTINUE
	GOTO 1000
C
C need to test arc with each vector of region
C
   20	CONTINUE
C
C get first point of region and initialise loop
C	
	CURPPT=REGPTR(1,REG)
	CALL PUTLNG(%VAL(CURPPT+OFFX),XSTART)
	CALL PUTLNG(%VAL(CURPPT+OFFY),YSTART)
	TSTLNE(1,1)=XSTART
	TSTLNE(2,1)=YSTART
	FINISHED=.FALSE.
C
C  loop to test each vector of region
C
   30	CONTINUE
	IF (FINISHED) GOTO 1000		! end of region
	TSTLNE(1,2)=TSTLNE(1,1)
	TSTLNE(2,2)=TSTLNE(2,1)
C
C get next point from region, or if at end of region, use the start
C point
C
	CALL PUTLNG(%VAL(CURPPT),CURPPT)
	IF (CURPPT.NE.REGPTR(2,REG)) THEN
	   CALL PUTLNG(%VAL(CURPPT+OFFX),TSTLNE(1,1))
	   CALL PUTLNG(%VAL(CURPPT+OFFY),TSTLNE(2,1))
	ELSE
	   FINISHED=.TRUE.
	   TSTLNE(1,1)=XSTART
	   TSTLNE(2,1)=YSTART
	ENDIF
C
C now check to see if this vector cuts the arc
C
C test if box round line, intersects box round arc
C
	IF (MIN(TSTLNE(1,1),TSTLNE(1,2)).GT.ARCLTD(2).OR.
     &	    MAX(TSTLNE(1,1),TSTLNE(1,2)).LT.ARCLTD(1).OR.
     &	    MIN(TSTLNE(2,1),TSTLNE(2,2)).GT.ARCLTD(4).OR.
     &	    MAX(TSTLNE(2,1),TSTLNE(2,2)).LT.ARCLTD(3)) GOTO 30
C
C calculate intersection
C
	CALL LINARC(TSTLNE,ARC,NUM,XY1,XY2,INLIN,INARC,TOUCH)
C
	IF (NUM.EQ.0.OR.TOUCH) GOTO 30		! no intersection between
						! line and circle
C
C actual line cuts actual arc? - if so we have an intersection
C
	DO 40, J=1,2
	   IF (INARC(J).EQ.0.AND.INLIN(J).EQ.0) THEN
	      CUT = .TRUE.
	      GOTO 1000
	   ENDIF
   40	CONTINUE
C
C if actual arc does not cut virtual line
C or actual line does not cut virtual arc - then no intersection
C
	IF (((INARC(1).EQ.-2.OR.INARC(1).EQ.2).AND.
     &	     (INARC(2).EQ.-2.OR.INARC(2).EQ.2)).OR.
     &	    ((INLIN(1).EQ.-2.OR.INLIN(1).EQ.2).AND.
     &	     (INLIN(2).EQ.-2.OR.INLIN(2).EQ.2))) GOTO 30
C
C now look at problems
C
	DANG = LINWDTH/ARC(RADI)
C
C if touch at start of arc
	DO 60, J=1,2
	   IF (INARC(J).EQ.-1.AND.INLIN(J).GE.-1.AND.INLIN(J).LE.1) THEN
	      NO = 0
   50	      ANG = ARC(STAI) + NO*DANG*DIR
	      TMPXY(1) = ARC(XCENI) + ARC(RADI)*COS(ANG)
	      TMPXY(2) = ARC(YCENI) + ARC(RADI)*SIN(ANG)
	      IF (PINREG(TMPXY,REG,INS).AND.NO.LT.999) THEN
	         NO = NO+1
	         GOTO 50
	      ELSE
	         CUT = INS.NE.INSIDE
	      ENDIF
	   ENDIF
	IF (CUT) GOTO 1000
   60	CONTINUE
C
C if touch at end of arc
C
	DO 80, J=1,2
	   IF (INARC(J).EQ.1.AND.INLIN(J).GE.-1.AND.INLIN(J).LE.1) THEN
	      NO = 0
   70	      ANG = ARC(STAI) + ARC(TOTI) - NO*DANG*DIR
	      TMPXY(1) = ARC(XCENI) + ARC(RADI)*COS(ANG)
	      TMPXY(2) = ARC(YCENI) + ARC(RADI)*SIN(ANG)
	      IF (PINREG(TMPXY,REG,INS).AND.NO.LT.999) THEN
	         NO = NO+1
	         GOTO 70
	      ELSE
	         CUT = INS.NE.INSIDE
	      ENDIF
	   ENDIF
	IF (CUT) GOTO 1000
   80	CONTINUE
C
C if edge of region ends on arc, then look at points on the arc at
C either side of the point
C
	DO 110, J=1,2
	   IF (INARC(J).EQ.0.AND.(INLIN(J).EQ.-1.OR.INLIN(J).EQ.1)) THEN
C
C assume that point is on region
C
C go in one direction
	      NO = 1
	      ANG = ATAN2(XXYY(2,J)-ARC(YCENI),XXYY(1,J)-ARC(XCENI))
	      IF (ANG.LT.0.0) ANG=TWOPI+ANG
   90	      CONTINUE
	      TMPXY(1) = ARC(XCENI) + ARC(RADI)*COS(ANG+(NO*DANG*DIR))
	      TMPXY(2) = ARC(YCENI) + ARC(RADI)*SIN(ANG+(NO*DANG*DIR))
	      IF (PINREG(TMPXY,REG,INS).AND.NO.LT.999) THEN
	         NO = NO+1
	         GOTO 90
	      ENDIF
C
C go in other dircetion
	      NO = 1
	      ANG = ATAN2(XXYY(2,J)-ARC(YCENI),XXYY(1,J)-ARC(XCENI))
	      IF (ANG.LT.0.0) ANG=TWOPI+ANG
  100	      CONTINUE
	      TMPXY(1) = ARC(XCENI) + ARC(RADI)*COS(ANG-(NO*DANG*DIR))
	      TMPXY(2) = ARC(YCENI) + ARC(RADI)*SIN(ANG-(NO*DANG*DIR))
	      IF (PINREG(TMPXY,REG,INSEND).AND.NO.LT.999) THEN
	         NO = NO+1
	         GOTO 100
	      ENDIF
	   CUT = INS.NE.INSEND
	   ENDIF
	IF (CUT) GOTO 1000
  110	CONTINUE
C
C loop if not found an intersection
C
	GOTO 30
C
C Return
C
 1000	CONTINUE
	ARCREG=CUT
	RETURN
	END
