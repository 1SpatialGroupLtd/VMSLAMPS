	LOGICAL FUNCTION INIT_SCAN_MEM(INIT)
C
***	IDENT   13MY93
***	MODULE  INIT_SCAN_MEM
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Written					RWR	 13-May-1993
C
C	To initialise memory for sectoring middle of fill areas
C	Returns .TRUE. for success
C
C	The arrays have the following lengths:
C
C	  PTS    array (real*4 x 2 x SCAN_MAXPTS)
C	  SIDES  array (real*4 x 4 x SCAN_MAXPTS)
C	  SIDPTR array (integer*4 x 1 x SCAN_MAXPTS)
C	  INTSCT array (real*4 x 4 x SCAN_MAXSCT)
C	  INTPTS array (real*4 x 1 x SCAN_MAXSCT)
C
	IMPLICIT NONE
C
C argument
	LOGICAL		INIT	! .TRUE. for malloc memory
				! .FALSE. for free memory
C
C functions called
	INTEGER		TRNALL
	LOGICAL		GET_MEM
	LOGICAL		RDLONG
	LOGICAL		RDCHS

***	PARAMETER/CMN:SECTOR/
C
***     COMMON/CMN:SECMAP/
***	COMMON/CMN:STDBFC/
C
	INTEGER		DEFAULT_SCT
	PARAMETER	(DEFAULT_SCT = 100)
C
C w/s
	INTEGER		LENGTH
	INTEGER		PTS_LENGTH,SIDES_LENGTH,SIDPTR_LENGTH
	INTEGER		INTSCT_LENGTH,INTPTS_LENGTH
	CHARACTER*8	TRAN
	BYTE		CH
C
C assume failure
	INIT_SCAN_MEM = .FALSE.
C
C if memory is already allocated, then free it
	IF (SCAN_PTS_ADDR .NE. 0) THEN
	   PTS_LENGTH    = 4 * 2 * SCAN_MAXPTS
	   SIDES_LENGTH  = 4 * 4 * SCAN_MAXPTS
	   SIDPTR_LENGTH = 4 * 1 * SCAN_MAXPTS
  	   INTSCT_LENGTH = 4 * 4 * SCAN_MAXSCT
	   INTPTS_LENGTH = 4 * 1 * SCAN_MAXSCT
	   LENGTH = PTS_LENGTH + SIDES_LENGTH + 
     &	            SIDPTR_LENGTH + INTSCT_LENGTH + INTPTS_LENGTH
	   CALL FREE_MEM(SEC_ZONE,SCAN_PTS_ADDR,LENGTH)
	   SCAN_PTS_ADDR     = 0
	   SCAN_SIDES_ADDR   = 0
	   SCAN_SIDPTR_ADDR  = 0
	   SCAN_INTSCT_ADDR  = 0
	   SCAN_INTPTS_ADDR  = 0
	   SCAN_MAXPTS       = 0
	   SCAN_MAXSCT       = 0
	ENDIF
C
C if initialising memory, recalculate lengths (in case the logical
C names have changed)
C
	IF (INIT) THEN
C
C get the maximum number of fill area points to be used
	   SCAN_MAXPTS = DEFAULT_STDBFM
	   IF (TRNALL(STDBFM_LOG_NAME,TRAN)) THEN
	      LENGTH = LEN(TRAN)
	      CALL SETAUX(%REF(TRAN),LENGTH)
	      IF (RDLONG(SCAN_MAXPTS)) SCAN_MAXPTS = DEFAULT_STDBFM
	      IF (.NOT.RDCHS(CH)) SCAN_MAXPTS = DEFAULT_STDBFM
	      SCAN_MAXPTS = SCAN_MAXPTS + 1 
	   ENDIF
C
C don't allow too few points
	   SCAN_MAXPTS = MAX(100,SCAN_MAXPTS)
C
C get the maximum number of intersections to be allowed
C
	   SCAN_MAXSCT = DEFAULT_SCT
	   IF (TRNALL('LSL$FILL_CUTSMAX',TRAN)) THEN
	      LENGTH = LEN(TRAN)
	      CALL SETAUX(%REF(TRAN),LENGTH)
	      IF (RDLONG(SCAN_MAXSCT)) SCAN_MAXSCT = DEFAULT_SCT
	      IF (.NOT.RDCHS(CH)) SCAN_MAXSCT = DEFAULT_SCT
	   ENDIF
C
C don't allow too few intersections
	   SCAN_MAXSCT = MAX(10,SCAN_MAXSCT)
C
C now get length of all the arrays
	   PTS_LENGTH    = 4 * 2 * SCAN_MAXPTS
	   SIDES_LENGTH  = 4 * 4 * SCAN_MAXPTS
	   SIDPTR_LENGTH = 4 * 1 * SCAN_MAXPTS
  	   INTSCT_LENGTH = 4 * 4 * SCAN_MAXSCT
	   INTPTS_LENGTH = 4 * 1 * SCAN_MAXSCT
C
C and the total length 
	   LENGTH = PTS_LENGTH + SIDES_LENGTH + 
     &	            SIDPTR_LENGTH + INTSCT_LENGTH + INTPTS_LENGTH
C
C get this amount of memory
C
	   IF (GET_MEM(SEC_ZONE,SCAN_PTS_ADDR,LENGTH)) GOTO 999	! failed
C
C divide it up
	   SCAN_SIDES_ADDR   = SCAN_PTS_ADDR    + PTS_LENGTH
	   SCAN_SIDPTR_ADDR  = SCAN_SIDES_ADDR  + SIDES_LENGTH
	   SCAN_INTSCT_ADDR  = SCAN_SIDPTR_ADDR + SIDPTR_LENGTH
	   SCAN_INTPTS_ADDR  = SCAN_INTSCT_ADDR + INTSCT_LENGTH
	ENDIF
C
	INIT_SCAN_MEM = .TRUE.		! success
C
999	CONTINUE
	RETURN
	END
