C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-07-18 13:32:50.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE D1468
C
***	MODULE	D1468
***	IDENT	18JL88
C
	IMPLICIT NONE
C
C Created by Alan Wylie 5-Feb-1980
C From the Ordnance Survey CORAL66 squaring program
C rewritten to cope with removing redundant points	RWR	14-Jul-88
C
C Compute constant of line equation for all line segments
C Call D1469 to recompute all end points
C
***	COMMON/CMN:D14IFC/
***	COMMON/CMN:D14CMN/
***	COMMON/CMN:OPTION/
C
	INTEGER 	TWAPTR,J
	INTEGER 	NUMREM		! number of points removed
C
C functions
	LOGICAL D14PRL
	LOGICAL	D14CLO
C
	NUMREM = 0
	TWAPTR = 0
C
C if closed feature, are end lines parallel?
	IF (FIXOPT.AND.D14CLO(TWAPTR,D14NPT-1)) THEN
C
C then use all parallel lines to work out constant for first line
C and remove the redundant points at the start and the end.
	   CALL D14SBX(NUMREM)
	   IF (NUMREM.GT.0) TWAPTR = 1
	ENDIF
C
C don't use DO loop as we may want to alter end condition
C
C next point
10	CONTINUE
	IF (TWAPTR.GT.(D14NPT-2)) GOTO 100	! finished all lines
	IF (LILEN(TWAPTR).LE.0)   GOTO 90	! invisible line
C
C deal with current line
	J  = TWAPTR + 1
	X5 = D14WRK(X,TWAPTR)
	Y5 = D14WRK(Y,TWAPTR)
C
C can next point be removed? 
20	CONTINUE
	IF (FIXOPT.AND.				! new algorithm
     &	    J.LT.(D14NPT-1).AND.		! not last point
     &	    ((STATUS(J).AND.8).EQ.0).AND.	! not fixed point
     &	    D14PRL(COEFA1(TWAPTR),		! next line parallel
     &	           COEFA2(TWAPTR),COEFA1(J),COEFA2(J),SQPL)) THEN
	   X5 = X5 + D14WRK(X,J)
	   Y5 = Y5 + D14WRK(Y,J)
	   J = J+1
	   GOTO 20
	ENDIF
C
C get a point that the line goes through
C
C first point fixed?	- must be on line
	IF ((STATUS(TWAPTR).AND.8).NE.0) THEN
	   X5 = D14WRK(X,TWAPTR)
	   Y5 = D14WRK(Y,TWAPTR)
C
C last point fixed?     - must be on line
	ELSEIF ((STATUS(J).AND.8).NE.0) THEN
	   X5 = D14WRK(X,J)
	   Y5 = D14WRK(Y,J)
C
C work out mean of points along this straight line
	ELSE
	   X5 = X5 + D14WRK(X,J)
	   Y5 = Y5 + D14WRK(Y,J)
	   X5 = X5/(J - TWAPTR + 1)
	   Y5 = Y5/(J - TWAPTR + 1)
	ENDIF
C
C compute constant term for this line
	COEFA3(TWAPTR)=-(COEFA1(TWAPTR)*X5+
     &			        COEFA2(TWAPTR)*Y5)
C
C if redundant points moved, then shuffle down arrays
	IF ((J-TWAPTR).GT.1) THEN
	   CALL D14SFL(TWAPTR+1,J,NUMREM)
C
C number of points has changed
	   D14NPT = D14NPT - (J-TWAPTR) + 1
	ENDIF
C
C get next line
90	CONTINUE
	TWAPTR = TWAPTR + 1
	GOTO 10
C
100	CONTINUE
	CALL D1469	! recompute end points
C
	RETURN
	END
