C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-05-21 17:42:36.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C
C routines to replace routines from VISALIB for use of LITES2 VIEW share
C image
C
	SUBROUTINE VISA_INIT(HAD_CTRLC,
     &	                     COPY_BYTE,
     &	                     COPY_LONG,
     &	                     COPY_REAL,
     &	                     COPY_WORD,
     &	                     READ_BYTE,
     &	                     READ_LONG,
     &	                     READ_REAL,
     &	                     READ_WORD,
     &	                     NORMAL,
     &	                     OUTSIDEVIEW)
C
***	IDENT	21MY90
***	MODULE	VISA_INIT
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	REPLACEMENT function to initialise VISALIB library
C	Function to initialise VISALIB library.
C
C-----------------------------------------------------------------------
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$SOURCE_ROOT:[VISUALISE.VISALIB]VISALIB.CMN'
C
C arguments
C
C addresses of routines to be used in shared image
	INTEGER		HAD_CTRLC
	INTEGER		COPY_BYTE
	INTEGER		COPY_LONG
	INTEGER		COPY_REAL
	INTEGER		COPY_WORD
	INTEGER		READ_BYTE
	INTEGER		READ_LONG
	INTEGER		READ_REAL
	INTEGER		READ_WORD
C
C error codes that are used by LITES2
	INTEGER		NORMAL
	INTEGER		OUTSIDEVIEW
C
C local common block that passes information between these routines
	INTEGER		COPY_BYTE_ADDRESS
	INTEGER		COPY_LONG_ADDRESS
	INTEGER		COPY_REAL_ADDRESS
	INTEGER		COPY_WORD_ADDRESS
	INTEGER		READ_BYTE_ADDRESS
	INTEGER		READ_LONG_ADDRESS
	INTEGER		READ_REAL_ADDRESS
	INTEGER		READ_WORD_ADDRESS
C	
	COMMON	/VISA_DATA/COPY_BYTE_ADDRESS,
     &	                   COPY_LONG_ADDRESS,
     &	                   COPY_REAL_ADDRESS,
     &	                   COPY_WORD_ADDRESS,
     &	                   READ_BYTE_ADDRESS,
     &	                   READ_LONG_ADDRESS,
     &	                   READ_REAL_ADDRESS,
     &	                   READ_WORD_ADDRESS
C
	EXTERNAL	VISA__NORMAL
	EXTERNAL	VISA__OUTSIDEVIEW
	EXTERNAL	VIS__NORMAL		!VISLIB messages
C
	INTEGER*4	I			!counter
C
C-----------------------------------------------------------------------
C
	CTRLC = %LOC(HAD_CTRLC)
C
C get addresses of DTI routines
	COPY_BYTE_ADDRESS = %LOC(COPY_BYTE)
	COPY_LONG_ADDRESS = %LOC(COPY_LONG)
	COPY_REAL_ADDRESS = %LOC(COPY_REAL)
	COPY_WORD_ADDRESS = %LOC(COPY_WORD)
	READ_BYTE_ADDRESS = %LOC(READ_BYTE)
	READ_LONG_ADDRESS = %LOC(READ_LONG)
	READ_REAL_ADDRESS = %LOC(READ_REAL)
	READ_WORD_ADDRESS = %LOC(READ_WORD)
C
C get value of error codes
	NORMAL      = %LOC(VISA__NORMAL)
	OUTSIDEVIEW = %LOC(VISA__OUTSIDEVIEW)
C
C-----------------------------------------------------------------------
	VISA_TOTAL_VIEWS = 0
	DO 50 I = 1,MAX_VIEW
	   VISA_VIEW_ID(I) = 0		!flag as unused
50	CONTINUE
C
C-----------------------------------------------------------------------
C	Initialise VISLIB
	CALL VIS_INIT
C-----------------------------------------------------------------------
C
999	RETURN
	END
C
C REPLACEMANT for VISA_READ_DTI_COLUMN, that does not use DTILIB,
C but the addresses of the routines passed in VISA_INIT
C
	INTEGER*4 FUNCTION VISA_READ_DTI_COLUMN(
     &                            DTILUN,
     &                            RCOLUMN,
     &                            X_START,
     &                            Y_START,
     &                            Y_NUMBER)
C
***	IDENT	07JN89
***	MODULE	VISA_READ_DTI_COLUMN
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C	Author    : D R Catlow
C	Created   : February 1989 
C
C	Function  :
C	VISALIB function to read a column of DTI data
C	and return the read data values in the real array
C	RCOLUMN
C
C----------------------------------------------------------------------
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$SOURCE_ROOT:[VISUALISE.VISALIB]VISALIB.CMN'
	INCLUDE 'LSL$CMNDTI:DTIPAR.PAR'
C
C local common block that passes information between these routines
	INTEGER		COPY_BYTE_ADDRESS
	INTEGER		COPY_LONG_ADDRESS
	INTEGER		COPY_REAL_ADDRESS
	INTEGER		COPY_WORD_ADDRESS
	INTEGER		READ_BYTE_ADDRESS
	INTEGER		READ_LONG_ADDRESS
	INTEGER		READ_REAL_ADDRESS
	INTEGER		READ_WORD_ADDRESS
C	
	COMMON	/VISA_DATA/COPY_BYTE_ADDRESS,
     &	                   COPY_LONG_ADDRESS,
     &	                   COPY_REAL_ADDRESS,
     &	                   COPY_WORD_ADDRESS,
     &	                   READ_BYTE_ADDRESS,
     &	                   READ_LONG_ADDRESS,
     &	                   READ_REAL_ADDRESS,
     &	                   READ_WORD_ADDRESS
C
C----------------------------------------------------------------------
C 	Arguments
     	INTEGER*4	DTILUN		!DTI LUN
     	INTEGER*4       X_START		!column number
        INTEGER*4	Y_START		!row number
        INTEGER*4	Y_NUMBER	!number of data values
        REAL		RCOLUMN(Y_NUMBER)
C
C----------------------------------------------------------------------
C 	Local
	INTEGER*4	LCOLUMN(DTI_MAX_ROWS)
	INTEGER*2	WCOLUMN(DTI_MAX_ROWS)
	BYTE		BCOLUMN(DTI_MAX_ROWS)
	EQUIVALENCE	(LCOLUMN,WCOLUMN,BCOLUMN)
C
	INTEGER*2	WVALUE	
	BYTE		BVALUE
	EQUIVALENCE	(WVALUE,BVALUE)
C
	INTEGER*4	ERROR
	INTEGER*4	I		!counter
C
C function
	INTEGER*4	CALLR
C
C----------------------------------------------------------------------
C	If we are dealing with real data, transfer 
C	directly into RCOLUMN
	IF(VISA_DATATYPE(DTILUN).EQ.DATA_REAL)THEN
	  VISA_READ_DTI_COLUMN = CALLR(
     &                           DTILUN,
     &                           RCOLUMN,
     &                           .FALSE.,
     &                           X_START,
     &                           Y_START,
     &                           1,
     &                           Y_NUMBER,
     &                           ERROR,
     &	                         %VAL(COPY_REAL_ADDRESS))
C
	  IF(.NOT.VISA_READ_DTI_COLUMN)GOTO 999
C
C	If we are dealing with longword data, read into longword
C	array, and then transfer to the real array
	ELSE IF(VISA_DATATYPE(DTILUN).EQ.DATA_LONG)THEN
	  VISA_READ_DTI_COLUMN = CALLR(
     &                           DTILUN,
     &                           LCOLUMN,
     &                           .FALSE.,
     &                           X_START,
     &                           Y_START,
     &                           1,
     &                           Y_NUMBER,
     &                           ERROR,
     &	                         %VAL(COPY_LONG_ADDRESS))
C
	  IF(.NOT.VISA_READ_DTI_COLUMN)GOTO 999
C
	  DO 100 I = 1,Y_NUMBER
	     RCOLUMN(I) = FLOAT(LCOLUMN(I))
100	  CONTINUE
C
C	If we are dealing with word data, read into word
C	array, and then transfer to the real array
	ELSE IF(VISA_DATATYPE(DTILUN).EQ.DATA_WORD)THEN
	  VISA_READ_DTI_COLUMN = CALLR(
     &                           DTILUN,
     &                           WCOLUMN,
     &                           .FALSE.,
     &                           X_START,
     &                           Y_START,
     &                           1,
     &                           Y_NUMBER,
     &                           ERROR,
     &	                         %VAL(COPY_WORD_ADDRESS))
C
	  IF(.NOT.VISA_READ_DTI_COLUMN)GOTO 999
C
	  DO 200 I = 1,Y_NUMBER
	     RCOLUMN(I) = FLOAT(WCOLUMN(I))
200	  CONTINUE
C
C	If we are dealing with byte data, read into byte
C	array, 	equivalence to treat as unsigned, and 
C	then transfer to the real array
	ELSE IF(VISA_DATATYPE(DTILUN).EQ.DATA_BYTE)THEN
	  VISA_READ_DTI_COLUMN = CALLR(
     &                           DTILUN,
     &                           BCOLUMN,
     &                           .FALSE.,
     &                           X_START,
     &                           Y_START,
     &                           1,
     &                           Y_NUMBER,
     &                           ERROR,
     &	                         %VAL(COPY_BYTE_ADDRESS))
C
	  IF(.NOT.VISA_READ_DTI_COLUMN)GOTO 999
C
	  DO 300 I = 1,Y_NUMBER
	     BVALUE = BCOLUMN(I)
	     RCOLUMN(I) = FLOAT(WVALUE)
300	  CONTINUE
C
	ENDIF
C
C---------------------------------------------------------------------- 
C
999	RETURN
C
	END
C
C replacement routine for VISA_GET_TRIANGLE
C
	INTEGER*4 FUNCTION VISA_GET_TRIANGLE(
     &                     DTILUN,
     &                     X_SAMPLE,
     &                     Y_SAMPLE,
     &                     START_X,
     &                     START_Y,
     &                     PT1,
     &                     PT2,
     &                     TRIANGLE1,
     &                     TRIANGLE2,
     &                     TRIANGLE3)
C
***	MODULE VISA_GET_TRIANGLE
***	IDENT  21MY90
C
	IMPLICIT NONE
C
C 	Copyright Laser Scan Laboratories Ltd., Cambridge, England
C 	Author  : 	D R Catlow.
C 	Created :	February 1989
C	Modified:	J Barber 24-OCT-1989/21-MAY-1990
C
C	Function:
C	To determine which DTM traingle a vector lies, and
C	to retrieve the heights at the 3 triangle nodes.
C
C-----------------------------------------------------------------------
C	Arguments
	INTEGER*4	DTILUN	  		!DTM LUN
	INTEGER*4	X_SAMPLE		!sample rate in x
	INTEGER*4	Y_SAMPLE		!sample rate in y
	INTEGER*4	START_X			!first column in rectangle
	INTEGER*4	START_Y			!first row in rectangle
	REAL*8		PT1(2)			!start coords of vector
	REAL*8		PT2(2)			!end coords of vector
	REAL*4		TRIANGLE1(3)		!DTM triangle coordinates
	REAL*4		TRIANGLE2(3)		!DTM triangle coordinates
	REAL*4		TRIANGLE3(3)		!DTM triangle coordinates
C
C-----------------------------------------------------------------------
C
	INCLUDE	'LSL$SOURCE_ROOT:[VISUALISE.VISALIB]VISALIB.CMN'
	INCLUDE	'LSL$CMNDTI:DTIPAR.PAR'
	INCLUDE	'LSL$SOURCE_ROOT:[VISUALISE.VISALIB]VISALIBMSG.PAR'
C
C local common block that passes information between these routines
	INTEGER		COPY_BYTE_ADDRESS
	INTEGER		COPY_LONG_ADDRESS
	INTEGER		COPY_REAL_ADDRESS
	INTEGER		COPY_WORD_ADDRESS
	INTEGER		READ_BYTE_ADDRESS
	INTEGER		READ_LONG_ADDRESS
	INTEGER		READ_REAL_ADDRESS
	INTEGER		READ_WORD_ADDRESS
C	
	COMMON	/VISA_DATA/COPY_BYTE_ADDRESS,
     &	                   COPY_LONG_ADDRESS,
     &	                   COPY_REAL_ADDRESS,
     &	                   COPY_WORD_ADDRESS,
     &	                   READ_BYTE_ADDRESS,
     &	                   READ_LONG_ADDRESS,
     &	                   READ_REAL_ADDRESS,
     &	                   READ_WORD_ADDRESS
C
C	Local
	INTEGER*4	X(2)
	INTEGER*4	Y(2)
	INTEGER*4	REM
	REAL*8		DELTA1,DELTA2
	REAL*8		DELTA
C
	REAL		RVALUE(4)
	INTEGER*4	LVALUE(4)	
	INTEGER*2	WVALUE(4)
	BYTE		BVALUE(4)
	INTEGER*2	UNSIGNED_BVAL
	BYTE		BVAL
	EQUIVALENCE	(BVAL,UNSIGNED_BVAL)
C
C	Function
	INTEGER		CALLR
C
C------------------------------------------------------------------------
C------------------------------------------------------------------------
C	Work out which grid cell this vector is in.
C	X(1),Y(1) is the bottom left of the cell,
C	and X(2),Y(2) is the top right of the cell.
C
C	This is more complicated than it seems if we
C	are sub-sampling, since we must ensure that the 
C	triangle that is passed corresponds to a triangle
C	that has actually been (or will be) rendered.
C
	X(1) = IDINT(PT1(1))
C
C       If X(1) lies on the grid, and X(2) is less than X(1) then 
C	decrease X(1) by 1 so the grid line selected as the left
C	one lies to the left of PT(2)
C
	IF (DBLE(X(1)).EQ.PT1(1) .AND. PT2(1).LT.PT1(1) )
     &	   X(1) = X(1) - 1		! .AND. X(1).GT.1) 
C
C	IF (X(1).EQ.VISA_XEXTENT(DTILUN)) X(1) = X(1) - 1
C
	Y(1) = IDINT(PT1(2))
C
C       If Y(1) lies on the grid, and Y(2) is less than Y(1) then 
C	decrease Y(1) by 1 so the grid line selected as the lower
C	one lies below PT(2)
C
	IF (DBLE(Y(1)).EQ.PT1(2) .AND. PT2(2).LT.PT1(2) ) 
     &     Y(1) = Y(1) - 1		! .AND. Y(1).GT.1)
C
C	IF (Y(1).EQ.VISA_YEXTENT(DTILUN)) Y(1) = Y(1) - 1
C
C	Check that X(1) and Y(1) are on a sampled triangle boundary
C
	REM = MOD(X(1)-1,X_SAMPLE)
	IF(REM.NE.0) X(1) = X(1)-REM
C
	REM = MOD(Y(1)-1,Y_SAMPLE)
	IF(REM.NE.0) Y(1) = Y(1)-REM
C
	X(2) = X(1)+X_SAMPLE
	Y(2) = Y(1)+Y_SAMPLE
C
	IF ( X(2).GT.VISA_XEXTENT(DTILUN) .OR.
     &       Y(2).GT.VISA_YEXTENT(DTILUN) .OR.
     &       X(1).LT.1 .OR. Y(1).LT.1 ) THEN
C
          VISA_GET_TRIANGLE = VISA__NOTRIANGLE
	  GOTO 999
	ENDIF
C
C	Retrieve the heights of the grid cell nodes
C
	IF(VISA_DATATYPE(DTILUN).EQ.DATA_REAL)THEN
	  VISA_GET_TRIANGLE=CALLR
     &             (DTILUN,RVALUE(1),X(1),Y(1),%VAL(READ_REAL_ADDRESS))
	  VISA_GET_TRIANGLE=CALLR
     &             (DTILUN,RVALUE(2),X(1),Y(2),%VAL(READ_REAL_ADDRESS))
	  VISA_GET_TRIANGLE=CALLR
     &             (DTILUN,RVALUE(3),X(2),Y(1),%VAL(READ_REAL_ADDRESS))
	  VISA_GET_TRIANGLE=CALLR
     &             (DTILUN,RVALUE(4),X(2),Y(2),%VAL(READ_REAL_ADDRESS))
	ELSE IF(VISA_DATATYPE(DTILUN).EQ.DATA_LONG)THEN
	  VISA_GET_TRIANGLE=CALLR
     &             (DTILUN,LVALUE(1),X(1),Y(1),%VAL(READ_LONG_ADDRESS))
	  VISA_GET_TRIANGLE=CALLR
     &             (DTILUN,LVALUE(2),X(1),Y(2),%VAL(READ_LONG_ADDRESS))
	  VISA_GET_TRIANGLE=CALLR
     &             (DTILUN,LVALUE(3),X(2),Y(1),%VAL(READ_LONG_ADDRESS))
	  VISA_GET_TRIANGLE=CALLR
     &             (DTILUN,LVALUE(4),X(2),Y(2),%VAL(READ_LONG_ADDRESS))
	ELSE IF(VISA_DATATYPE(DTILUN).EQ.DATA_WORD)THEN
	  VISA_GET_TRIANGLE=CALLR
     &             (DTILUN,WVALUE(1),X(1),Y(1),%VAL(READ_WORD_ADDRESS))
	  VISA_GET_TRIANGLE=CALLR
     &             (DTILUN,WVALUE(2),X(1),Y(2),%VAL(READ_WORD_ADDRESS))
	  VISA_GET_TRIANGLE=CALLR
     &             (DTILUN,WVALUE(3),X(2),Y(1),%VAL(READ_WORD_ADDRESS))
	  VISA_GET_TRIANGLE=CALLR
     &             (DTILUN,WVALUE(4),X(2),Y(2),%VAL(READ_WORD_ADDRESS))
	ELSE IF(VISA_DATATYPE(DTILUN).EQ.DATA_BYTE)THEN
	  VISA_GET_TRIANGLE=CALLR
     &             (DTILUN,BVALUE(1),X(1),Y(1),%VAL(READ_BYTE_ADDRESS))
	  VISA_GET_TRIANGLE=CALLR
     &             (DTILUN,BVALUE(2),X(1),Y(2),%VAL(READ_BYTE_ADDRESS))
	  VISA_GET_TRIANGLE=CALLR
     &             (DTILUN,BVALUE(3),X(2),Y(1),%VAL(READ_BYTE_ADDRESS))
	  VISA_GET_TRIANGLE=CALLR
     &             (DTILUN,BVALUE(4),X(2),Y(2),%VAL(READ_BYTE_ADDRESS))
	ENDIF
C
C------------------------------------------------------------------------
C	Which triangle?
C
C	X1 Y2	2		4  X2 Y2
C	            +++++++++
C                   + 2   + +
C	            +   +   +
C		    + +   1 +
C	            +++++++++
C	X1 Y1	1		3  X2 Y1
C
C  PT1 and PT2 are on same triangle by definition so that DELTA1 and 
C  DELTA2 should be of the same sign, and only need to compare either 
C  DY1 and DX1 or DY2 and DX2.
C  However uncertainty in the rounding/comparison of double numbers 
C  means that which triangle is chosen depends on the order of 
C  comparison of DX1 or DX2 if one point lies on or very close to the
C  diagonal, so use the greater difference
C
	DELTA1 = PT1(1) - X(1) - PT1(2) + Y(1)	  ! DX1 - DY1
	DELTA2 = PT2(1) - X(1) - PT2(2) + Y(1)	  ! DX2 - DY2
C
C  Find the greater difference from the diagonal of PT1 or PT2
C
	IF (DABS(DELTA1) .GT. DABS(DELTA2)) THEN
	   DELTA = DELTA1
	ELSE
	   DELTA = DELTA2
	ENDIF
C
	IF (DELTA .GT.0.0D0) THEN
	   GOTO 10
	ELSE
	   GOTO 20
	ENDIF
C
C  TRIANGLE 1
C
C	1st node of the triangle
C
10	  CONTINUE
C
	  TRIANGLE1(1)=X(1)
	  TRIANGLE1(2)=Y(1)
	  IF     (VISA_DATATYPE(DTILUN).EQ.DATA_REAL)THEN
            TRIANGLE1(3) = RVALUE(1)
	  ELSE IF(VISA_DATATYPE(DTILUN).EQ.DATA_LONG)THEN
	    TRIANGLE1(3) = FLOAT(LVALUE(1))
	  ELSE IF(VISA_DATATYPE(DTILUN).EQ.DATA_WORD)THEN
	    TRIANGLE1(3) = FLOAT(WVALUE(1))
	  ELSE IF(VISA_DATATYPE(DTILUN).EQ.DATA_BYTE)THEN
	    BVAL = BVALUE(1)
	    TRIANGLE1(3) = FLOAT(UNSIGNED_BVAL)
	  ENDIF
C
C	2nd node of the triangle
C
	  TRIANGLE2(1)=X(2)
	  TRIANGLE2(2)=Y(1)
	  IF     (VISA_DATATYPE(DTILUN).EQ.DATA_REAL)THEN
            TRIANGLE2(3) = RVALUE(3)
	  ELSE IF(VISA_DATATYPE(DTILUN).EQ.DATA_LONG)THEN
	    TRIANGLE2(3) = FLOAT(LVALUE(3))
	  ELSE IF(VISA_DATATYPE(DTILUN).EQ.DATA_WORD)THEN
	    TRIANGLE2(3) = FLOAT(WVALUE(3))
	  ELSE IF(VISA_DATATYPE(DTILUN).EQ.DATA_BYTE)THEN
	    BVAL = BVALUE(3)
	    TRIANGLE2(3) = FLOAT(UNSIGNED_BVAL)
	  ENDIF
C
C	3rd node of the triangle
C
	  TRIANGLE3(1)=X(2)
	  TRIANGLE3(2)=Y(2)
	  IF     (VISA_DATATYPE(DTILUN).EQ.DATA_REAL)THEN
            TRIANGLE3(3) = RVALUE(4)
	  ELSE IF(VISA_DATATYPE(DTILUN).EQ.DATA_LONG)THEN
	    TRIANGLE3(3) = FLOAT(LVALUE(4))
	  ELSE IF(VISA_DATATYPE(DTILUN).EQ.DATA_WORD)THEN
	    TRIANGLE3(3) = FLOAT(WVALUE(4))
	  ELSE IF(VISA_DATATYPE(DTILUN).EQ.DATA_BYTE)THEN
	    BVAL = BVALUE(4)
	    TRIANGLE3(3) = FLOAT(UNSIGNED_BVAL)
	  ENDIF
C
	  GOTO 30
C
C  TRIANGLE 2
C
C	1st node of the triangle
C
20 	  CONTINUE
C
	  TRIANGLE1(1)=X(1)
	  TRIANGLE1(2)=Y(1)
	  IF     (VISA_DATATYPE(DTILUN).EQ.DATA_REAL)THEN
            TRIANGLE1(3) = RVALUE(1)
	  ELSE IF(VISA_DATATYPE(DTILUN).EQ.DATA_LONG)THEN
	    TRIANGLE1(3) = FLOAT(LVALUE(1))
	  ELSE IF(VISA_DATATYPE(DTILUN).EQ.DATA_WORD)THEN
	    TRIANGLE1(3) = FLOAT(WVALUE(1))
	  ELSE IF(VISA_DATATYPE(DTILUN).EQ.DATA_BYTE)THEN
	    BVAL = BVALUE(1)
	    TRIANGLE1(3) = FLOAT(UNSIGNED_BVAL)
	  ENDIF
C
C	2nd node of the triangle
C
	  TRIANGLE2(1)=X(2)
	  TRIANGLE2(2)=Y(2)
	  IF     (VISA_DATATYPE(DTILUN).EQ.DATA_REAL)THEN
            TRIANGLE2(3) = RVALUE(4)
	  ELSE IF(VISA_DATATYPE(DTILUN).EQ.DATA_LONG)THEN
	    TRIANGLE2(3) = FLOAT(LVALUE(4))
	  ELSE IF(VISA_DATATYPE(DTILUN).EQ.DATA_WORD)THEN
	    TRIANGLE2(3) = FLOAT(WVALUE(4))
	  ELSE IF(VISA_DATATYPE(DTILUN).EQ.DATA_BYTE)THEN
	    BVAL = BVALUE(4)
	    TRIANGLE2(3) = FLOAT(UNSIGNED_BVAL)
	  ENDIF
C
C	3rd node of the triangle
C
	  TRIANGLE3(1)=X(1)
	  TRIANGLE3(2)=Y(2)
	  IF     (VISA_DATATYPE(DTILUN).EQ.DATA_REAL)THEN
            TRIANGLE3(3) = RVALUE(2)
	  ELSE IF(VISA_DATATYPE(DTILUN).EQ.DATA_LONG)THEN
	    TRIANGLE3(3) = FLOAT(LVALUE(2))
	  ELSE IF(VISA_DATATYPE(DTILUN).EQ.DATA_WORD)THEN
	    TRIANGLE3(3) = FLOAT(WVALUE(2))
	  ELSE IF(VISA_DATATYPE(DTILUN).EQ.DATA_BYTE)THEN
	    BVAL = BVALUE(2)
	    TRIANGLE3(3) = FLOAT(UNSIGNED_BVAL)
	  ENDIF
C
30	VISA_GET_TRIANGLE = VISA__NORMAL
C
C-----------------------------------------------------------------------
999	RETURN
	END	
C
