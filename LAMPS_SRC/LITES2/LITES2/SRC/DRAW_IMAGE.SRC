	SUBROUTINE DRAW_IMAGE
C
***	IDENT	21SE94
***	MODULE	DRAW_IMAGE
C
C	Copyright Laser-Scan Ltd., Cambridge, England.
C
C	Created					CCB	24-Jun-1993
C
C	LITES2 cartographic editor DRAW IMAGE command.
C
	IMPLICIT NONE
C
***     PARAMETER/CMN:ACS/
***     PARAMETER/CMN:MOANMESS/		! moan constants
C
***	COMMON/CMN:DOUT/		! command decoder output
***	COMMON/CMN:DRAWIN/
***	COMMON/LSL$CMNFRT:FRTACD/
***	COMMON/CMN:IMAGE/
***	COMMON/CMN:LABELS/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:OVERLAY/
***	COMMON/CMN:PLOT/
***	COMMON/CMN:RFCTRL/
C
C Functions
	LOGICAL	DRAW_ADJUST
C
C Local Variables
	LOGICAL		SAV_HAD_LIMITS
	LOGICAL		HAD_SETANNO
	INTEGER		WKID
	INTEGER		IC
	EQUIVALENCE	(IMAGE_CURRENT,IC)	! abbreviation
	INTEGER	SAV_IMAGE_ZOOM
	INTEGER	SAV_IMAGE_VIEW
	REAL	SAV_PIXELSIZE(2)
	REAL	VIEW(4),TWIN(4)
	REAL	RANGEX,RANGEY
	REAL	ZFACT
C
C save things
	SAV_IMAGE_ZOOM = IMAGE_ZOOM
	SAV_IMAGE_VIEW = IMAGE_VIEW
	SAV_PIXELSIZE(1) = PIXELSIZE(1)
	SAV_PIXELSIZE(2) = PIXELSIZE(2)
C
C not called SETANNO yet
	HAD_SETANNO = .FALSE.
C
	ZFACT=1.0			! default
	IF (DNREA.EQ.1) THEN
	   ZFACT=DREALS(1)		! arg given
	   IF (ZFACT.LT.0.01.OR.ZFACT.GT.100.0) THEN
	      CALL MOAN(MSG_ARGRNG)	! out of range
	      GOTO 9990
	   ENDIF
	ENDIF
	ZOOM_IMAGE = ZFACT
C
C Can only draw into displays greater than 3
	IF (ANNODISP.LE.2) THEN
	   CALL MOAN(MSG_FILENOTLITESWIN)
	   CALL LEARN(MSG_USEVIEWCMD,'ANNOTATION DISPLAY')
	   GOTO 9990
	ENDIF
C
C has display been created ?
	IF (.NOT.DISPLAY_EXISTS(ANNODISP)) THEN
	   CALL MOAN(MSG_NOCURDISP)
	   CALL LEARN(MSG_USEDISPCRE)
	   GOTO 9990
	ENDIF
C
C has ANNOTATION OVERLAY been specified ?
	IF (ANNOVER.EQ.0) THEN
     	   CALL MOAN(MSG_OVNOTEXISTS,ANNOVER,ANNODISP)
	   CALL LEARN(MSG_USEVIEWCMD,'ANNOTATION OVERLAY')
	   GOTO 9990
	ELSEIF (OVERLAY_PLANES(ANNOVER,ANNODISP).EQ.0) THEN
	   CALL LEARN(MSG_USEVIEWCMD,'ANNOTATION OVERLAY')
	   CALL LEARN(MSG_USEDISPOVER)
	   GOTO 9990
	ENDIF
C
	IF (IC.EQ.0) GOTO 9000
	IF (IMAGE_TYPE(IC).EQ.0) GOTO 9010
C
C now set up annotation
	SAV_HAD_LIMITS = DISPLAY_HADLIM(ANNODISP)
	DISPLAY_HADLIM(ANNODISP) = .FALSE.
	CALL SETANNO(.TRUE.)
	HAD_SETANNO = .TRUE.
C
	IF (DRAW_ADJUST(ANNODISP,VIEW,TWIN)) GOTO 9999
C
	IF (PLOT_ON) THEN
	   WKID = PLOT_WKID
C
C set the pixel size if plotting
	   CALL LSG_PIXEL_SIZE(WKID,PIXELSIZE(1),PIXELSIZE(2))
	ELSE
	   WKID = ANNODISP
	ENDIF
	RANGEX = LIMITS(2)-LIMITS(1)
	RANGEY = LIMITS(4)-LIMITS(3)
	CALL GSWKWN(WKID,
     &		(TWIN(1)-LIMITS(1))*NDCX*WFACX/RANGEX,
     &		(TWIN(2)-LIMITS(1))*NDCX*WFACX/RANGEX,
     &		(TWIN(3)-LIMITS(3))*NDCY*WFACY/RANGEY,
     &		(TWIN(4)-LIMITS(3))*NDCY*WFACY/RANGEY )
	CALL GSWKVP(
     &		WKID,VIEW(1),VIEW(2),VIEW(3),VIEW(4))
	CALL DISP_IMG(IC,ANNOVER,WKID,ANNODISP,.FALSE.)
	GOTO 9999
C
9000	CALL MOAN(MSG_NOCURIM)
	CALL LEARN(MSG_USEIMNUM)
	GOTO 9990
C
9010	CALL MOAN(MSG_IMNOTEXIST,IC)
	GOTO 9990
C
9990	CALL IGNCMD
9999	CONTINUE
C
C return everything to initial state
	IF (HAD_SETANNO) THEN
	   CALL SETANNO(.FALSE.)
	   DISPLAY_HADLIM(ANNODISP) = SAV_HAD_LIMITS
	   OCSXY(1) = CSXY(1)+1.0
	ENDIF
C
	ZOOM_IMAGE = 0.0	! flag not doing ZOOM [n] IMAGE now
	IMAGE_ZOOM = SAV_IMAGE_ZOOM
	IMAGE_VIEW = SAV_IMAGE_VIEW
	PIXELSIZE(1) = SAV_PIXELSIZE(1)
	PIXELSIZE(2) = SAV_PIXELSIZE(2)
C
	RETURN
	END
C
C rip off from ADJUST.SRC
	LOGICAL FUNCTION DRAW_ADJUST(OW,VIEW,TWIN)
C
***	MODULE	DRAW_ADJUST
***	IDENT	21JN93
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author Clarke Brunt	26-Jan-1987
C
C To adjust window size and calculate workstation viewport so that
C vector and raster data overlay correctly
C Return TRUE if nothing to draw
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:EFNLUN/
C
***	COMMON/CMN:DRAWIN/
***	COMMON/CMN:IMAGE/
***	COMMON/CMN:MAPS/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:OVERLAY/
***	COMMON/CMN:SETUP/
***	COMMON/CMN:PLOT/
***	COMMON/CMN:WORKS/
C
C argument
	INTEGER	OW		! overlay workstation id (3 or 4)
	REAL	VIEW(4)		! returned workstation viewport
	REAL	TWIN(4)		! returned window
C
C w/s
	REAL	SCW2D
	INTEGER	PIXWIN(4)
	INTEGER	PIXSCR(4)
	REAL*8	ORG(2)
	INTEGER	MAX_VIEW
	INTEGER	ROWS,COLS
	LOGICAL	ZOOM16			! restrict zoom to x16
	LOGICAL	VIEW2			! restrict views to 2**n
	REAL	PSIZ(2),SIZ(2)
	EQUIVALENCE (SIZ,PIXELSIZE)		! abbreviation
	REAL	ZOOM
	INTEGER		IC
	EQUIVALENCE	(IMAGE_CURRENT,IC)	! abbreviation
	REAL	TXY(2)
C
	DRAW_ADJUST = .TRUE.	! assume nothing to draw
C
C determine which images are selected to be drawn
	ZOOM16 = .FALSE.	! unrestricted zoom
	VIEW2 = .FALSE.		! unrestricted reduced views
C
C determine maximum reduced view present in all images to be drawn
	ORG(1) = IMAGE_ORIGIN(1,IC)
	ORG(2) = IMAGE_ORIGIN(2,IC)
	PSIZ(1) = IMAGE_PIXELSIZE(1,IC)
	PSIZ(2) = IMAGE_PIXELSIZE(2,IC)
	MAX_VIEW = IMAGE_VIEWS(IC)
	IF (IMAGE_TYPE(IC).NE.TYPE_DTI) ZOOM16 = .TRUE.
	IF (IMAGE_TYPE(IC).EQ.TYPE_LSI) VIEW2 = .TRUE.
C
	ZOOM = 1.0
	IMAGE_ZOOM = 1
	IMAGE_VIEW = 1			! start with non-reduced view
	SIZ(1) = PSIZ(1)
	SIZ(2) = PSIZ(2)
C
C If we are plotting, then we assume the the pixel size of the
C plotter is adjustable, so we don't need all this stuff
	IF (PLOT_ON) GOTO 15
C
C Get screen pixel numbers corresponding to corners of viewport.
C Pixel 0 is in bottom left corner, pixel DISPLAY_RASX/Y-1 in top right
	PIXSCR(1) = 0
	PIXSCR(2) = DISPLAY_RASX(OW)-1
	PIXSCR(3) = 0
	PIXSCR(4) = DISPLAY_RASY(OW)-1
C
C now work out a zoom factor
10	CONTINUE
C
C check for ZOOM [n] IMAGE command
	IF (ZOOM_IMAGE.GE.1.0) THEN
	   IMAGE_ZOOM = NINT(ZOOM_IMAGE)
	   ZOOM = IMAGE_ZOOM
	ELSE
	   IMAGE_ZOOM = 0
	   IF (IMAGE_VIEW.GE.NINT(1.0/ZOOM_IMAGE)) IMAGE_ZOOM = 1
	ENDIF
C
	IF (IMAGE_ZOOM.EQ.0) THEN
C
C won't fit, so try for a reduced view
	   IF (IMAGE_VIEW.LT.MAX_VIEW) THEN
	      IF (VIEW2) THEN
	         IMAGE_VIEW = IMAGE_VIEW*2	! try next view
	      ELSE
	         IMAGE_VIEW = IMAGE_VIEW+1	! try next view
	      ENDIF
	      SIZ(1) = PSIZ(1)*IMAGE_VIEW	! new pixelsize
	      SIZ(2) = PSIZ(2)*IMAGE_VIEW
	      GOTO 10			! try again
	   ENDIF
	   IMAGE_ZOOM = 1
	ENDIF
C
C Restrict zoom factor for tiled files - otherwise tends to draw so much
C stuff lying off the screen that takes ages
	IF (ZOOM16.AND.IMAGE_ZOOM.GT.16) IMAGE_ZOOM = 16
C
C adjust WINDOW to fill screen
	TXY(1) = CSXY(1)
	TXY(2) = CSXY(2)
	IF (SETUP) CALL TRNUSE(TXY(1),TXY(2),SETCOF,SET_TRANSFORM)
	TWIN(1) = TXY(1) - DISPLAY_RASX(OW)/IMAGE_ZOOM*SIZ(1)/2.0
	PIXWIN(1) = NINT((TWIN(1)+LITES2ORG(1)-ORG(1))/SIZ(1))
	TWIN(1) = (PIXWIN(1)-0.5)*SIZ(1) - LITES2ORG(1) + ORG(1)
	TWIN(1) = MAX( LIMITS(1), TWIN(1) )
	TWIN(2) = MIN( LIMITS(2),
     &			TWIN(1)+DISPLAY_RASX(OW)*SIZ(1)/IMAGE_ZOOM)
C
	TWIN(3) = TXY(2) - DISPLAY_RASY(OW)/IMAGE_ZOOM*SIZ(2)/2.0
	PIXWIN(3) = NINT((TWIN(3)+LITES2ORG(2)-ORG(2))/SIZ(2))
	TWIN(3) = (PIXWIN(3)-0.5)*SIZ(2) - LITES2ORG(2) + ORG(2)
	TWIN(3) = MAX( LIMITS(3), TWIN(3) )
	TWIN(4) = MIN( LIMITS(4),
     &			TWIN(3)+DISPLAY_RASY(OW)*SIZ(2)/IMAGE_ZOOM)
C
C Get image pixel numbers corresponding to corners of window.
C Pixel zero has centre at ORG
15	PIXWIN(1) = NINT((TWIN(1)+LITES2ORG(1)-ORG(1))/SIZ(1)+0.5)
	PIXWIN(2) = NINT((TWIN(2)+LITES2ORG(1)-ORG(1))/SIZ(1)-0.5)
	PIXWIN(3) = NINT((TWIN(3)+LITES2ORG(2)-ORG(2))/SIZ(2)+0.5)
	PIXWIN(4) = NINT((TWIN(4)+LITES2ORG(2)-ORG(2))/SIZ(2)-0.5)
C
C if plotting, then attempt not to draw too many pixels by selecting
C a reduced view as required
	IF (PLOT_ON) THEN
	   IF (MAX(PIXWIN(2)-PIXWIN(1),PIXWIN(4)-PIXWIN(3)).GE.
     &						PLOT_PIXELS) THEN
C
C won't fit, so try for a reduced view
	      IF (IMAGE_VIEW.LT.MAX_VIEW) THEN
	         IF (VIEW2) THEN
	            IMAGE_VIEW = IMAGE_VIEW*2	! try next view
	         ELSE
	            IMAGE_VIEW = IMAGE_VIEW+1	! try next view
	         ENDIF
	         SIZ(1) = PSIZ(1)*IMAGE_VIEW	! new pixelsize
	         SIZ(2) = PSIZ(2)*IMAGE_VIEW
	         GOTO 15			! try again
	      ENDIF
	   ENDIF
	ELSE
C
C will fit at given zoom factor, so just get corners of viewport so that
C the raster pixels map onto the screen pixels
C world	   (PIXWIN(1)-0.5)*SIZ(1)+ORG(1)-LITES2ORG(1)
C ->scr	   0
	   SCW2D = (IMAGE_ZOOM*DISPLAY_SIZX(OW))/(SIZ(1)*DISPLAY_RASX(OW))
	   VIEW(1) = 
     &		(TWIN(1)-((PIXWIN(1)-0.5)*SIZ(1)+ORG(1)-LITES2ORG(1)))
     &								*SCW2D
	   VIEW(1) = MAX(VIEW(1),0.0)
	   VIEW(2) = VIEW(1) + (TWIN(2)-TWIN(1)) * SCW2D
	   VIEW(2) = MIN(VIEW(2),DISPLAY_SIZX(OW))
	   SCW2D = (IMAGE_ZOOM*DISPLAY_SIZY(OW))/(SIZ(2)*DISPLAY_RASY(OW))
	   VIEW(3) = 
     &		(TWIN(3)-((PIXWIN(3)-0.5)*SIZ(2)+ORG(2)-LITES2ORG(2)))
     &								*SCW2D
	   VIEW(3) = MAX(VIEW(3),0.0)
	   VIEW(4) = VIEW(3) + (TWIN(4)-TWIN(3)) * SCW2D
	   VIEW(4) = MIN(VIEW(4),DISPLAY_SIZY(OW))
	ENDIF
C
C set which pixels to draw for image (numbers start at 1 here)
C
C calculate number of rows and columns in the reduced view to be used
	COLS = IMAGE_COLUMNS(IC)/IMAGE_VIEW
	ROWS = IMAGE_ROWS(IC)/IMAGE_VIEW
C
C CCB 30AU89 - allow extra pixel all round just to ensure it covers
C the screen
	IMAGE_SWPIX(1,IC) = MAX(1,PIXWIN(1))
	IMAGE_SWPIX(2,IC) = MAX(1,PIXWIN(3))
	IF (IMAGE_SWPIX(1,IC).GT.COLS.OR.
     &	    IMAGE_SWPIX(2,IC).GT.ROWS) GOTO 9999
	IMAGE_NEPIX(1,IC) = MIN(COLS,PIXWIN(2)+2)
	IMAGE_NEPIX(2,IC) = MIN(ROWS,PIXWIN(4)+2)
	IF (IMAGE_NEPIX(1,IC).LE.0.OR.
     &	    IMAGE_NEPIX(2,IC).LE.0) GOTO 9999
C
	IF (DIAOPT) CALL WRITEF(
     & 'Image view %N, zoomed by %N (%F0.3)',IMAGE_VIEW,IMAGE_ZOOM,ZOOM)
	DRAW_ADJUST = .FALSE.
C
9999	RETURN
	END
