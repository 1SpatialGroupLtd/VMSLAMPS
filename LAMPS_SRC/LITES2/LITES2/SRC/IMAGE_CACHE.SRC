	SUBROUTINE CACHE_TEST(IM,PX,PY,FLAG)
C
***	MODULE	CACHE_TEST
***	IDENT	11JN93
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C
C To cache a tile for pixel PX,PY in editable raster file IM
C
	IMPLICIT NONE
C
***	COMMON/CMN:IMAGE/
C
C arguments
	INTEGER	IM		! image number
	INTEGER	PX,PY		! pixel number, from bl, start 0
	INTEGER	FLAG		! flag value
C
C functions
	INTEGER	GETARR
	LOGICAL GET_MEM
C
C workspace
	INTEGER	IX,IY,TX,TY
	INTEGER	PTR,P
C
C convert pixel numbers to multiples of the tile size (assumed 2**n)
	IX = PX.AND..NOT.(IM_CACHE_PIXELS-1)
	IY = PY.AND..NOT.(IM_CACHE_PIXELS-1)
C
	P = IM_CACHE_PTR		! head ptr
	PTR = P
10	IF (P.NE.0) THEN		! got a tile
	   PTR = P
C
C get its pixel numbers
	   TX = GETARR(%VAL(PTR),IM_TILE_X)
	   TY = GETARR(%VAL(PTR),IM_TILE_Y)
C
C is it the one we want
	   IF (IX.EQ.TX.AND.IY.EQ.TY) THEN
	      IF (FLAG.NE.0) CALL PUTARR(
     &			FLAG,%VAL(PTR),IM_TILE_FLAGS)
	      GOTO 990
	   ENDIF
C
C try for next tile
	   P = GETARR(%VAL(PTR),IM_TILE_NEXT)
	   GOTO 10
	ENDIF
C
C not found, so allocate a new tile
	IF (GET_MEM(IM_CACHE_ZONE,P,IM_CACHE_LENGTH)) GOTO 999
C
C chain it on to previous one
	IF (PTR.EQ.0) THEN
	   IM_CACHE_PTR = P
	ELSE
	   CALL PUTARR(P,%VAL(PTR),IM_TILE_NEXT)
	ENDIF
	PTR = P
C
C fill in next pointer, pixel numbers, and flags
	CALL PUTARR(0,%VAL(PTR),IM_TILE_NEXT)
	CALL PUTARR(IX,%VAL(PTR),IM_TILE_X)
	CALL PUTARR(IY,%VAL(PTR),IM_TILE_Y)
	CALL PUTARR(FLAG,%VAL(PTR),IM_TILE_FLAGS)
C
C fill in data
	CALL CACHE_FILL(IM,IX,IY,%VAL(PTR+IM_TILE_B_DATA))
C
990	CONTINUE
C
999	RETURN
	END
C
C
C
	SUBROUTINE CACHE_FILL(IM,PX,PY,ARRAY)
C
***	MODULE	CACHE_FILL
***	IDENT	07JN93
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C
C To read the data for a tile at pixel PX,PY from editable LSR
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:MOANMESS/
C
***	COMMON/CMN:IMAGE/
***	COMMON/CMN:LSRLIB/
C
C arguments
	INTEGER	IM		! image number
	INTEGER	PX,PY		! pixel number, from bl, start 0
	INTEGER	ARRAY(*)	! data
C
C functions
	INTEGER	CALLR
C
C workspace
	INTEGER		RET
	REAL*8		DX(2),DY(2)
	INTEGER*4	DDX(2,2),DDY(2,2)
	EQUIVALENCE	(DX,DDX),(DY,DDY)
	REAL*8		EX(2),EY(2)
	INTEGER		NX,NY
	INTEGER		BLOC
	INTEGER		DUMMY
C
C set up the buffer for the copy region
	RET = CALLR(
     &		%VAL(IMAGE_CREG(IM)),
     &		ARRAY,%VAL(IM_CACHE_BYTES),
     &		%VAL(LSR_ADDRESSES(XLSR_SET_REG_EXTERN_BUFFER)))
	IF (RET.NE.GOTH__NORMAL) GOTO 800
C
C calculate the corners of the area of interest in the LSR file's
C own coordinate system (i.e. using the file's original origin
C and pixelsize)
	DX(1) = PX*IMAGE_OPIXELSIZE(1,IM)+IMAGE_OORIGIN(1,IM)
	DX(2) = DX(1) + IM_CACHE_PIXELS*IMAGE_OPIXELSIZE(1,IM)
	DY(1) = PY*IMAGE_OPIXELSIZE(2,IM)+IMAGE_OORIGIN(2,IM)
	DY(2) = DY(1) + IM_CACHE_PIXELS*IMAGE_OPIXELSIZE(2,IM)
	IF (.NOT.IMAGE_AREA(IM)) THEN
	   DX(2) = DX(2)-IMAGE_OPIXELSIZE(1,IM)
	   DY(2) = DY(2)-IMAGE_OPIXELSIZE(2,IM)
	ENDIF
C
C Can't pass a REAL*8 by value, so pass its two 4-byte halves (equivalenced
C onto it) as two consecutive arguments
	RET = CALLR(
     &		%VAL(IMAGE_CREG(IM)),
     &		%VAL(DDX(1,1)),%VAL(DDX(2,1)),
     &		%VAL(DDY(1,1)),%VAL(DDY(2,1)),
     &		%VAL(DDX(1,2)),%VAL(DDX(2,2)),
     &		%VAL(DDY(1,2)),%VAL(DDY(2,2)),
     &		%VAL(LSR_ADDRESSES(XLSR_SET_REG_EXT_IN)))
	IF (RET.NE.GOTH__NORMAL) GOTO 800
C
C read area into buffer
	RET = CALLR(
     &		%VAL(IMAGE_CREG(IM)),
     &		BLOC,EX(1),EY(1),EX(2),EY(2),
     &		DUMMY,NX,NY,DUMMY,
     &		%VAL(LSR_ADDRESSES(XLSR_GET_REG_COPY)))
	IF (RET.NE.GOTH__NORMAL) GOTO 800
	GOTO 999
C
800	CALL NASTY(MSG_ERRDIMG,IM,'LSR')
	RET = CALLR(%VAL(RET),%VAL(LSR_ADDRESSES(XLSR_PRINT_MESSAGE)))
	CALL WRITEF
C
999	RETURN
	END
C
C
C
	SUBROUTINE CACHE_FREE
C
***	MODULE	CACHE_FREE
***	IDENT	07JN93
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C
C To free the memory allocated to the undo cache
C
	IMPLICIT NONE
C
***	COMMON/CMN:IMAGE/
C
C functions
	INTEGER	GETARR
C
C workspace
	INTEGER	PTR,P
C
	P = IM_CACHE_PTR		! head ptr
	IM_CACHE_PTR = 0
10	IF (P.NE.0) THEN		! got a tile
	   PTR = P
C
C try for next tile
	   P = GETARR(%VAL(PTR),IM_TILE_NEXT)
	   CALL FREE_MEM(IM_CACHE_ZONE,PTR,IM_CACHE_LENGTH)
	   GOTO 10
	ENDIF
	RETURN
	END
C
C
C
	SUBROUTINE CACHE_READ(IM,PX,PY,PW,PH,ARRAY)
C
***	MODULE	CACHE_READ
***	IDENT	10JN93
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C
C To read from cache into array
C
	IMPLICIT NONE
C
***	COMMON/CMN:IMAGE/
C
C arguments
	INTEGER	IM		! image number
	INTEGER	PX,PY		! pixel number, from bl, start 0
	INTEGER	PW,PH		! width, height
	BYTE	ARRAY(*)
C
C functions
	INTEGER	GETARR
	INTEGER	LIB$EXTV
C
C workspace
	INTEGER	X,Y
	INTEGER	IX,IY,TX,TY,OX,OY
	INTEGER	PTR
	INTEGER	OFF
	INTEGER	TILE_OFF
	INTEGER	PIX
C
	PTR = 0
	OFF = 0
	DO 200 Y=PY,PY+PH-1
	   DO 100 X=PX,PX+PW-1
C
C convert pixel numbers to multiples of the tile size (assumed 2**n)
	      IX = X.AND..NOT.(IM_CACHE_PIXELS-1)
	      IY = Y.AND..NOT.(IM_CACHE_PIXELS-1)
C
C check if same as last time
	      IF (PTR.EQ.0.OR.IX.NE.OX.OR.IY.NE.OY) THEN
C
	         PTR = IM_CACHE_PTR		! head ptr
10	         IF (PTR.NE.0) THEN		! got a tile
C
C get its pixel numbers
	            TX = GETARR(%VAL(PTR),IM_TILE_X)
	            TY = GETARR(%VAL(PTR),IM_TILE_Y)
C
C is it the one we want
	            IF (IX.NE.TX.OR.IY.NE.TY) THEN
C
C try for next tile
	               PTR = GETARR(%VAL(PTR),IM_TILE_NEXT)
	               GOTO 10
	            ENDIF
	         ENDIF
	         IF (PTR.EQ.0) GOTO 999
	         OX = IX
	         OY = IY
	         TILE_OFF = (IM_CACHE_PIXELS-1-(Y-IY))*
     &			IM_CACHE_PIXELS + X-IX
	      ENDIF
	      PIX = LIB$EXTV(TILE_OFF,1,%VAL(PTR+IM_TILE_B_DATA))
	      TILE_OFF = TILE_OFF+1
	      CALL LIB$INSV(PIX,OFF,1,ARRAY)
	      OFF = OFF+1
100	   CONTINUE
	   TILE_OFF = TILE_OFF-IM_CACHE_PIXELS
200	CONTINUE
C
999	RETURN
	END
