C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-09-27 16:16:44.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        SUBROUTINE LSRLOAD
C
***     IDENT   27SE94
***     MODULE  LSRLOAD
C
C       Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C       Written                                 CCB	26-Nov-1990
C
C	Load LSR library shareable image
C
        IMPLICIT NONE
C
***     PARAMETER/CMN:MOANMESS/
C
***	COMMON/CMN:LSRLIB/
***	COMMON/LSL$CMNLSL:TXTC/
C
C Functions
	LOGICAL	SETUP_USER,CHKENTRY
	INTEGER	CALLR
	INTEGER	TRNALL
	LOGICAL	RDLONG
C
C Local Variables
	INTEGER*4	OK		! file parse return code
	INTEGER		CACHE_TILE,CACHE_SIZE
C
C if routine not properly initialised, but file is already mapped
C cannot do anything
	IF (.NOT.LSR_SETUP) THEN
	   IF (LSR_MAPPED) THEN
	      CALL MOAN(MSG_BADUSERRTS,'LSR library')
	   ELSE
	      LSR_SETUP = SETUP_USER(LSR_LOG_NAME,
     &	                        LSR_MAX_ROUTINES,LSR_NAMES,
     &	                        LSR_ADDRESSES,
     &	                        'LSR library',
     &	                        'LSR files','IMAGE LSR',
     &	                        LSR_MAPPED)
	   ENDIF
	   IF (.NOT.LSR_SETUP) GOTO 9990
C
C check that all entry points have been found
	   LSR_SETUP = .NOT.CHKENTRY(
     &		LSR_LOG_NAME,LSR_MAX_ROUTINES,LSR_NAMES,LSR_ADDRESSES)
	   IF (.NOT.LSR_SETUP) GOTO 9990
C
C Call LSR initialisation routine
	   OK = CALLR(%VAL(LSR_ADDRESSES(XLSR_INIT)))
	   IF (OK.NE.GOTH__NORMAL) THEN
	      LSR_SETUP = .FALSE.
	      GOTO 9040
	   ENDIF
C
	   RAST_BY_AREA = CALLR(
     &		%REF('RAST_BY_AREA'//CHAR(0)),
     &		%VAL(LSR_ADDRESSES(XLSR_GET_ENUMERATED_VALUE)))
	   RAST_READ_ONLY = CALLR(
     &		%REF('RAST_READ_ONLY'//CHAR(0)),
     &		%VAL(LSR_ADDRESSES(XLSR_GET_ENUMERATED_VALUE)))
	   RAST_WRITE = CALLR(
     &		%REF('RAST_WRITE'//CHAR(0)),
     &		%VAL(LSR_ADDRESSES(XLSR_GET_ENUMERATED_VALUE)))
	   RAST_STORAGE_NORMAL = CALLR(
     &		%REF('RAST_STORAGE_NORMAL'//CHAR(0)),
     &		%VAL(LSR_ADDRESSES(XLSR_GET_ENUMERATED_VALUE)))
	   RAST_STORAGE_MAPPED = CALLR(
     &		%REF('RAST_STORAGE_MAPPED'//CHAR(0)),
     &		%VAL(LSR_ADDRESSES(XLSR_GET_ENUMERATED_VALUE)))
	   RAST_CACHE_GLOBAL = CALLR(
     &		%REF('RAST_CACHE_GLOBAL'//CHAR(0)),
     &		%VAL(LSR_ADDRESSES(XLSR_GET_ENUMERATED_VALUE)))
	   RAST_CACHE_ONE_TILE = CALLR(
     &		%REF('RAST_CACHE_ONE_TILE'//CHAR(0)),
     &		%VAL(LSR_ADDRESSES(XLSR_GET_ENUMERATED_VALUE)))
	   REGION_TILE_EXTENDED = CALLR(
     &		%REF('REGION_TILE_EXTENDED'//CHAR(0)),
     &		%VAL(LSR_ADDRESSES(XLSR_GET_ENUMERATED_VALUE)))
	   REGION_LR_EXTENDED = CALLR(
     &		%REF('REGION_LR_EXTENDED'//CHAR(0)),
     &		%VAL(LSR_ADDRESSES(XLSR_GET_ENUMERATED_VALUE)))
	   REGION_PTR = CALLR(
     &		%REF('REGION_PTR'//CHAR(0)),
     &		%VAL(LSR_ADDRESSES(XLSR_GET_ENUMERATED_VALUE)))
	   REGION_COPY = CALLR(
     &		%REF('REGION_COPY'//CHAR(0)),
     &		%VAL(LSR_ADDRESSES(XLSR_GET_ENUMERATED_VALUE)))
C
C get number of cache tiles and size
	TXTPTR = 32
	CACHE_TILE = LSR_CACHE_TILE_DEFAULT
	IF (TRNALL(LSR_CACHE_TILE_LOG_NAME,TXTDSC)) THEN
	   CALL BSLN
	   IF (RDLONG(CACHE_TILE)) CACHE_TILE = LSR_CACHE_TILE_DEFAULT
	ENDIF
	CACHE_SIZE = LSR_CACHE_SIZE_DEFAULT
	TXTPTR = 32
	IF (TRNALL(LSR_CACHE_SIZE_LOG_NAME,TXTDSC)) THEN
	   CALL BSLN
	   IF (RDLONG(CACHE_SIZE)) CACHE_SIZE = LSR_CACHE_SIZE_DEFAULT
	ENDIF
C
C Call LSR routine to create global cache
	   OK = CALLR(%VAL(CACHE_TILE),%VAL(CACHE_SIZE),
     &		%VAL(LSR_ADDRESSES(XLSR_CREATE_GLOBAL_CACHE)))
	   IF (OK.NE.GOTH__NORMAL) THEN
	      LSR_SETUP = .FALSE.
	      GOTO 9040
	   ENDIF
	ENDIF
	GOTO 9990
C
9040	CALL NASTY(MSG_STRING,'Error initialising LSR library')
	OK = CALLR(%VAL(OK),%VAL(LSR_ADDRESSES(XLSR_PRINT_MESSAGE)))
	CALL WRITEF
	GOTO 9990
C
9990	RETURN
	END
