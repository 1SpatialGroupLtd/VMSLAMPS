	SUBROUTINE ADDPTS(NPTS,XY,DRAW)
C
***	IDENT	14FE94
***	MODULE	ADDPTS
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RJH	11-MAR-1985
C
C Description
C
C    This subroutine is part of LITES2, and either buffers a line string
C or adds it to the output item, depending on whether the line is to be
C drawn on the screen or output to the IFF file.
C
C it is a jacket routine that calls the routine that does the work
C with some workspace
C
	IMPLICIT NONE
C
***	COMMON/CMN:STDBFC/
C
C Arguments
C
	INTEGER*4	NPTS		! number of points
	REAL		XY(2,NPTS)	! line string
	LOGICAL*1	DRAW		! draw line on screen ?
C
C use STDBFZ as temporary - it will overwrite itself, but it doesn't
C matter. (Hopefully STDBFM will always be longer than NPTS, but don't
C write off the end of the array in ADDPTS_SUB)
C
	CALL ADDPTS_SUB(NPTS,XY,DRAW,STDBFM,%VAL(STDBFZ_ADDR))
C
	RETURN
	END


	SUBROUTINE ADDPTS_SUB(NPTS,XY,DRAW,WORK_SIZE,WORK)
C
***	IDENT	14FE94
***	MODULE	ADDPTS_SUB
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RJH	11-MAR-1985
C
C Description
C
C    This subroutine is part of LITES2, and either buffers a line string
C or adds it to the output item, depending on whether the line is to be
C drawn on the screen or output to the IFF file.
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
C
***	PARAMETER/CMN:REGPAR/
C
***	COMMON/CMN:CSTRCT/
***	COMMON/LSL$CMNIFF:MD2DES/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:REGCMN/
***	COMMON/CMN:TRANSFORM/
***	COMMON/CMN:VARIAT/
C
C Arguments
C
	INTEGER*4	NPTS		! number of points
	REAL		XY(2,NPTS)	! line string
	LOGICAL*1	DRAW		! draw line on screen ?
	INTEGER		WORK_SIZE
	INTEGER		WORK(WORK_SIZE)
C
C functions
	LOGICAL		ADDPPT
C
C Local Variables
C
	INTEGER*4	I		! counter
	INTEGER		ZI
C
C this routine may be used when filtering regions. In this case FILT_REG
C will be greater than 0. If adding the point fails, clear this variable in
C the common block so that the routine that started the filtering can take
C appropriate action.
	IF (FILT_REG.GT.0) THEN
	   DO 10, I=1,NPTS
	      IF (ADDPPT(XY(1,I),FILT_REG)) THEN
	         FILT_REG = 0
	         GOTO 900
	      ENDIF
10	   CONTINUE
	   GOTO 900
	ENDIF
C
C remember first point that filtering outputs
	IF (CHFILT.AND..NOT.GOT_FILT_FST) THEN
	   FILTFST(1) = XY(1,1)	
	   FILTFST(2) = XY(2,1)
	   GOT_FILT_FST = .TRUE.
	ENDIF
C
C Check if line is to be drawn on screen or added to the output item
	IF (DRAW) THEN
C
C avoid storing IFF_ABSENT, mainly for benefit of ALPHA
C The resulting dirty zero caused problems in PATGPL
	   ZI = CSZI
	   IF (ZI.EQ.IFF_ABSENT) ZI = 0
	   DO 20, I=1,MIN(NPTS,WORK_SIZE)
	      WORK(I) = ZI
20	   CONTINUE
	   CALL STDBFA(NPTS,XY,WORK)		! buffer the string
	ELSE
	   DO 30 I=1,NPTS
C
C add point to output item, using point attribute in CSTRCT common block
	      CALL ADCORD(XY(1,I),CONATT,COATTC,COATTV)
30	   CONTINUE
	ENDIF
C
900	RETURN
	END
