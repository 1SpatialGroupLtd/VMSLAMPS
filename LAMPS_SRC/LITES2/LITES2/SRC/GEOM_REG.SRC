C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-05-10 11:00:08.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        LOGICAL FUNCTION GEOM_REG(GEOM,REG,G_TO_R)
C
***     IDENT	10MY96
***     MODULE  GEOM_REG
C
C       Copyright Laser-Scan Ltd., Cambridge, England.
C
C       Written                                 RWR 	8-Oct-1993
C
C	create a geometry from a region, and vice versa
C	returns FALSE for success
C
        IMPLICIT NONE
C
***     PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:REGPAR/
C
***	COMMON/CMN:GEOM/
***	COMMON/CMN:REGCMN/
C
C arguments
	INTEGER		GEOM		! geometry number
	INTEGER		REG		! region number
	LOGICAL		G_TO_R		! geom->region or region->geom
C
C functions
	EXTERNAL	MOAN
	LOGICAL		DEFREG
	LOGICAL 	GEOM_TYPE
	LOGICAL		ADDPPT
C
C working storage
	LOGICAL		FINISHED
	INTEGER		CURPPT
	INTEGER		G_TYPE,G_COUNT
	INTEGER		I,NUM_PTS
	INTEGER		RET_CODE
	LOGICAL		START
	INTEGER		INDEX
	REAL		ERROR_XY(2)
C       
	LOGICAL		CHECK
	PARAMETER	(CHECK = .TRUE.)
C
C assume failure
	GEOM_REG = .TRUE.
C
	IF (.NOT.G_TO_R) GOTO 500
C
C create geometry from region
C (Already checked that GEOM does not exist.)
C
C check that REG is valid
	IF (.NOT.DEFREG(REG)) GOTO 900
C
C create the geometry
	CALL CALLR(GEOMETRY(GEOM),
     &	     %VAL(2),
     &	     RET_CODE,
     &	     %VAL(GEOM_ADDRESSES(XST_GEOM)))
C
	IF (RET_CODE .NE. 0) THEN
	   IF (RET_CODE .EQ. -1) THEN
	      CALL MOAN(MSG_INSVIRMEM)
	   ELSE
	      CALL CALLR(%VAL(RET_CODE),
     &		   RET_CODE,
     &		   %VAL(GEOM_ADDRESSES(XPR_MESS)))
	      CALL WRITEF
	   ENDIF
	   GOTO 900
	ENDIF
C
C add the points from the region to the geometry
	INDEX = 0
	START = .TRUE.
	FINISHED = .FALSE.
	CURPPT=REGPTR(1,REG)
C
 10	CONTINUE
	INDEX = INDEX + 1
	IF (START) THEN
	   GEOM_FLAGS(INDEX) = 0
	   START = .FALSE.
	ELSE
	   GEOM_FLAGS(INDEX) = 1
	ENDIF
	CALL PUTLNG(%VAL(CURPPT+OFFX),GEOM_XY(1,INDEX))
	CALL PUTLNG(%VAL(CURPPT+OFFY),GEOM_XY(2,INDEX))
	CALL PUTLNG(%VAL(CURPPT),CURPPT)
	IF (CURPPT.EQ.REGPTR(2,REG)) 
     &	     FINISHED=.TRUE.
C
C flush out points if now finished, or buffer is full
	IF (FINISHED .OR. (INDEX.EQ.GEOM_MAX_PTS)) THEN
	   CALL CALLR(%VAL(GEOMETRY(GEOM)),
     &		%VAL(INDEX),
     &		GEOM_XY,
     &		GEOM_FLAGS,
     &		RET_CODE,
     &		%VAL(GEOM_ADDRESSES(XADD_PTS)))
C       
	   IF (RET_CODE .NE. 0) THEN
	      IF (RET_CODE .EQ. -1) THEN
		 CALL MOAN(MSG_INSVIRMEM)
	      ELSE
		 CALL CALLR(%VAL(RET_CODE),
     &		      RET_CODE,
     &		      %VAL(GEOM_ADDRESSES(XPR_MESS)))
		 CALL WRITEF
	      ENDIF
	      CALL GEOM_DESTROY(GEOMETRY(GEOM))
	      GOTO 900
	   ENDIF
	   INDEX = 0
	ENDIF
C
C get another point
	IF (.NOT.FINISHED) GOTO 10
C
C complete geometry
	CALL CALLR(%VAL(GEOMETRY(GEOM)),
     &	     %VAL(CHECK),
     &	     ERROR_XY,
     &	     RET_CODE,
     &	     %VAL(GEOM_ADDRESSES(XCOM_GEOM)))
C
	IF (RET_CODE .NE. 0) THEN
	   IF (RET_CODE .GT. 0) THEN
	      CALL MOAN(MSG_GEOMERROR)
	      CALL CALLR(%VAL(RET_CODE),
     &		   RET_CODE,
     &		   %VAL(GEOM_ADDRESSES(XPR_MESS)))
	      CALL WRITEF
	   ELSEIF (RET_CODE .EQ. -3) THEN
	      CALL MOAN(MSG_CROSSBOUNDARY,'Inner',ERROR_XY(1),ERROR_XY(2))
	   ELSEIF (RET_CODE .EQ. -4) THEN
	      CALL MOAN(MSG_CROSSBOUNDARY,'Outer',ERROR_XY(1),ERROR_XY(2))
	   ELSEIF (RET_CODE .EQ. -5) THEN
	      CALL MOAN(MSG_INTERSECTRING)
	   ELSEIF (RET_CODE .EQ. -6) THEN
	      CALL MOAN(MSG_WRNGINCLUSION)
	   ELSE
	      CALL MOAN(MSG_GEOMERROR)
	   ENDIF
	   CALL GEOM_DESTROY(GEOMETRY(GEOM))
	   GOTO 900
	ENDIF
C
C success, set flag false
	GOTO 850
C
C create region from geometry
C (REG has already been checked to see it does not exist)
 500	CONTINUE
C
C get type of geometry	
	IF (.NOT.GEOM_TYPE(GEOM,G_TYPE,G_COUNT)) GOTO 900
	IF (G_TYPE .LE. 1) THEN
	   CALL MOAN(MSG_GEOMONLYVALID,'GEOMETRY REGION command','area')
	   GOTO 900
	ENDIF
	IF (G_COUNT .GT. 1) THEN
	   CALL MOAN(MSG_GEOMONLYVALID,'GEOMETRY REGION command','simple')
	   GOTO 900
	ENDIF
C
C get the coordinates, and add them to the region
	FINISHED = .FALSE.
	START = .TRUE.
C
 510	CONTINUE
	CALL CALLR(%VAL(GEOMETRY(GEOM)),
     &	     %VAL(1),
     &	     %VAL(START),%VAL(GEOM_MAX_PTS),
     &	     NUM_PTS,GEOM_XY,GEOM_FLAGS,FINISHED,RET_CODE,
     &	     %VAL(GEOM_ADDRESSES(XGET_PTS)))
	IF (RET_CODE .NE. 0) THEN
	   IF (RET_CODE .LE. -1) THEN
	      CALL MOAN(MSG_GEOMERROR)
	   ELSE
	      CALL CALLR(%VAL(RET_CODE),
     &		   RET_CODE,
     &		   %VAL(GEOM_ADDRESSES(XPR_MESS)))
	      CALL WRITEF
	   ENDIF
	   GOTO 900
	ENDIF
C
	IF (START) THEN
	   START = .FALSE.
	   GEOM_FLAGS(1) = 1		! first point not invisible
	ENDIF
C
C add these points to region (until there is an invisible move)
	DO 520, I = 1,NUM_PTS
	   IF (GEOM_FLAGS(I).EQ.0) THEN
	      CALL INFORM(MSG_IGNOREINNER)
	      GOTO 850
	   ENDIF
	   IF (ADDPPT(GEOM_XY(1,I),REG)) GOTO 900
 520	CONTINUE
C	
	IF (.NOT. FINISHED) GOTO 510
	GOTO 850
C       
C geometry/region succesfully created
 850	GEOM_REG = .FALSE.
C
 900	CONTINUE
        RETURN
        END
