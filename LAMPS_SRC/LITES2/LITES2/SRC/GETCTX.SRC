C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-02-12 10:55:18.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE GETCTX(PACK,CTXD,OPEN)
C
***	MODULE	GETCTX
***	IDENT	12FE93
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C
C Author: Ron Russell					29-Oct-1986
C
C To get a feature's text components into CTXD for manipulation.
C MAP and PNF (start of feature pointer) from PACK identify the
C feature we want
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:CONSTS/
***	PARAMETER/CMN:CTXS/
***	PARAMETER/CMN:EFNLUN/
***	PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:PACK/
C
***	COMMON/CMN:CB/
***	COMMON/CMN:CSTRCT/
***	COMMON/CMN:CTXS/
***	COMMON/LSL$CMNIFF:IFFHAN/
***	COMMON/LSL$CMNIFF:IFFSTR/
***	COMMON/CMN:MAPS/
C
C arguments
	INTEGER*4 PACK(PAKLEN)
	INTEGER*4 CTXD(CTXDLEN)	
	LOGICAL	  OPEN		! true if file is already selected
C
C w/s
	INTEGER*4	DUMPAK(PAKLEN)	! dummy pack for GENAUX
	INTEGER		LENGTH		! length of text part
	INTEGER		PTS
	INTEGER*2	IECODE,IELEN
	REAL		XY(2,2)		! for reading ST entry
	INTEGER		DUMMY
	LOGICAL		HADTS
	LOGICAL		HOME		! true when this is component
					! that text was found by
C
C function
C
	LOGICAL 	GENAUX		! generate auxiliary array
	LOGICAL		GEOG_TRANS_ARRAY
C
	CALL FREECTX(CTXD)		! free old contents
C
C select map
	IF (.NOT.OPEN) CALL SELIF(PACK(PAKMAP))
C
C position onto start of feature
	CALL IFFPKE(IECODE,IELEN,PACK(PAKPNF))
	IF (IECODE.NE.'NF'.AND.IECODE.NE.'TC'.AND.IECODE.NE.'CH'
     &					.AND.IECODE.NE.'VO') THEN
	   CALL NASTY(MSG_BADPNF)
	   CALL COLAPS(MSG_BADPNF)
	   GOTO 999
	ENDIF
C
C Initialise
	HADTS = .FALSE.
	HOME = .TRUE.
	CTXBUFL(CTX_L_TSA) = 0		! zero TS entry
	CTXBUFL(CTX_L_TSB) = 0		! zero TS entry
	CTXBUFR(CTX_L_RO)  = 0.0	! zero rotation
C
C get next entry
20	CALL IFFNXT(IECODE,IELEN)
	IF (IELEN.EQ.-1) THEN
	   CALL NASTY(MSG_UNEXPEIFF)
	   CALL COLAPS(MSG_UNEXPEIFF)
	   GOTO 999
	ENDIF
C
	IF (IECODE.EQ.'FS') GOTO 100
	IF (IECODE.EQ.'TS') GOTO 200
	IF (IECODE.EQ.'TH') GOTO 300
	IF (IECODE.EQ.'CB') GOTO 400
	IF (IECODE.EQ.'RO') GOTO 500
	IF (IECODE.EQ.'TX') GOTO 600
	IF (IECODE.EQ.'EF') GOTO 700
C
C ignore anything else
	GOTO 20
C
C FS entry - read into TS, in case there is no TS entry
100	CALL EIHRI(CTXBUFW(CTX_W_TS1),MIN(IELEN,4),1)
	GOTO 20
C
C TS entry - if not first TS, then add the text that has just been read
C            in to the chain. Start a new text component
200	IF (HADTS) THEN
C
C generate auxiliary array
	   DUMPAK(PAKFC) = CTXBUFW(CTX_W_TS1)	! make sure GENAUX uses
						! correct FC
	   IF (GENAUX(1,CTXBUFR(CTX_L_X),CTXBUFL(CTX_L_AUX1),
     &	         CTXBUFL(CTX_L_DESC),CTXBUFR(CTX_L_RO),
     &	         CTXBUFL(CTX_L_TH),DUMPAK,CTXBUFW(CTX_W_TS1))) GOTO 999
	   CALL ADDCTX(CTXD,HOME)
	   CTXBUFR(CTX_L_RO)  = 0.0		! zero rotation
	ELSE
	   HADTS = .TRUE.
	ENDIF	   
	HOME = LPOSH.EQ.PACK(PAKPST)	! this is entry pack points to
	CTXBUFL(CTX_L_TSA) = 0		! zero TS entry (override FS)
	CTXBUFL(CTX_L_TSB) = 0		! zero TS entry
	CALL EIHRI(CTXBUFW(CTX_W_TS1),MIN(IELEN,4),1)
	GOTO 20
C
C TH entry - read into bottom word
300	CTXBUFL(CTX_L_TH) = 0			! blank out longword
	CALL EIHRI(CTXBUFL(CTX_L_TH),1,1)	! read word into bottom
	GOTO 20
C
C ST (CB) entry - perhaps use to work out rotation
400	CALL EIHRCB_HEAD(CBH)
C
C read in the points
	PTS = MIN(CBH.NROW,2)
	CALL EIHRCB_DATA(CBD)! read into scratch, and extract XY
C
C obtain X,Y and other attributes (use CON* variables as temporaries)
	CONATT = 0
	CALL GETATT(XY,CONATT,MXATTR,COATTC,COATTV,0,1,PTS)
C
C add origin of map, or transform into LITES2 space, if required
	IF (DO_FLY_TRANS) THEN
	   IF (.NOT.GEOG_TRANS_ARRAY(CURR_SYS,CURR_ZONE,CURR_PARAMS,
     &	                         CURR_UNIT,CURR_ORG,
     &	                         LITES2SYS,LITES2ZONE,LITES2PAR,
     &	                         LITES2UNIT,LITES2ORG,
     &	                         PTS,XY)) GOTO 999
	ELSEIF (USE_ORG) THEN
	   CALL ADDORG(ORGXY,XY,PTS)
	ENDIF
C
C work out rotation if there are two points
	IF (PTS.GT.1) THEN
	   CTXBUFR(CTX_L_RO)=ATAN2(XY(2,2)-XY(2,1),XY(1,2)-XY(1,1))
	   IF (CTXBUFR(CTX_L_RO).LT.0.0) 
     &	                  CTXBUFR(CTX_L_RO)=TWOPI+CTXBUFR(CTX_L_RO)
	ENDIF
C
C put point in buffer
	CTXBUFR(CTX_L_X) =XY(1,1)
	CTXBUFR(CTX_L_Y) =XY(2,1)
C
C and the attributes
	CALL ARRLST(CONATT,COATTC,COATTV,CTXBUFR(CTX_L_ATTR),DUMMY)
	GOTO 20
C
C RO entry - 
500	CALL EIHRR(CTXBUFR(CTX_L_RO),1,1)
	GOTO 20
C
C TX entry - text
600	LENGTH = MIN(IELEN,(CTXMAX+1)/2)	! truncate
	IF (LENGTH.GT.0) THEN
	   CALL EIHR(CTXTEXT,LENGTH,1)
	   LENGTH = LENGTH*2			! convert to bytes
C
C Remove any trailing null
	   IF (CTXTEXT(LENGTH).EQ.0) LENGTH = LENGTH-1
	ENDIF
	CTXBUFW(CTX_W_TXTLEN) = MIN(LENGTH,CTXMAX) ! length in descriptor
	GOTO 20
C
C EF entry - add final text component to chain, and we are finished
C
C generate auxiliary array
700	   DUMPAK(PAKFC) = CTXBUFW(CTX_W_TS1)	! make sure GENAUX uses
						! correct FC
	   IF (GENAUX(1,CTXBUFR(CTX_L_X),CTXBUFL(CTX_L_AUX1),
     &	         CTXBUFL(CTX_L_DESC),CTXBUFR(CTX_L_RO),
     &	         CTXBUFL(CTX_L_TH),DUMPAK,CTXBUFW(CTX_W_TS1))) GOTO 999
C
C and add this buffer to CTXD
	CALL ADDCTX(CTXD,HOME)
C
999	RETURN
	END
