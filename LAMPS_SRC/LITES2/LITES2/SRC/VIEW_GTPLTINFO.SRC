C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-05-10 12:13:42.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION VIEW_GTPLTINFO(XIN,YIN,SIZEIN,
     &	                                XOUT,YOUT,SIZEOUT)
C
***	IDENT	10MY96
***	MODULE	VIEW_GTPLTINFO
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	 5-May-1989
C
C to get the size and position to render a text or symbol at
C - returns .TRUE. if results not valid
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:MOANMESS/
C
***	COMMON/CMN:VIEW/
C
C Arguments - in  = LITES2 coordinate space
C             out = rendered view coordinate space
	REAL		XIN
	REAL		YIN
	REAL		SIZEIN
	REAL		XOUT
	REAL		YOUT
	REAL		SIZEOUT
C
C functions
	LOGICAL		CALLR
C
C w/s
	REAL		XA,YA
	REAL		BEARING
	INTEGER		RETCOD
	REAL		SIGN
	REAL		XAOUT,YAOUT
	REAL		ZOUT
C
C assume error
	VIEW_GTPLTINFO = .TRUE.
C
	RETCOD = CALLR(VIEW_ID(VIEW_CURRENT),
     &	               VIEW_DTILUN,
     &	               XIN,
     &	               YIN,
     &	               XOUT,
     &	               YOUT,
     &	               ZOUT,
     &	               %VAL(VIEW_ADDRESSES(XVISA_TRANSFORM_POINT)))
C
C if this failed, then cannot plot this symbol, so exit, first
C outputting any message
 	IF (RETCOD.NE.VIEW_VISA__NORMAL) THEN
	   IF (RETCOD.NE.VIEW_VISA__OUTSIDEVIEW) THEN
	      CALL MOAN(MSG_VISLIBERR)
	      CALL LITES2_SIGNAL(RETCOD)
	   ENDIF
	   GOTO 999
	ENDIF
C
C calculate the second point of the symbol (perpendicular to line from
C observer to locating point of symbol)
	SIGN = 1.0
10	CONTINUE
	BEARING = ATAN2(XIN-VIEW_FROM(1,VIEW_CURRENT),
     &	                YIN-VIEW_FROM(2,VIEW_CURRENT))
	XA = XIN + SIGN*SIZEIN*COS(BEARING)
	YA = YIN - SIGN*SIZEIN*SIN(BEARING)
C
	RETCOD = CALLR(VIEW_ID(VIEW_CURRENT),
     &	               VIEW_DTILUN,
     &	               XA,
     &	               YA,
     &	               XAOUT,
     &	               YAOUT,
     &	               ZOUT,
     &	               %VAL(VIEW_ADDRESSES(XVISA_TRANSFORM_POINT)))
C
C if this failed because this point was outside window, try again on
C other side
 	IF (RETCOD.NE.VIEW_VISA__NORMAL) THEN
	   IF (RETCOD.EQ.VIEW_VISA__OUTSIDEVIEW.AND.SIGN.EQ.1.0) THEN
	      SIGN = -1.0
	      GOTO 10
	   ELSEIF (RETCOD.NE.VIEW_VISA__OUTSIDEVIEW) THEN
	      CALL MOAN(MSG_VISLIBERR)
	      CALL LITES2_SIGNAL(RETCOD)
	   ENDIF
	   GOTO 999
	ENDIF
C
C success - work out size of symbol/text in output system
	SIZEOUT = SQRT((XAOUT-XOUT)**2+(YAOUT-YOUT)**2)
C
	VIEW_GTPLTINFO = .FALSE.
C
999	CONTINUE
	RETURN
	END
