C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-11-04 17:04:46.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE DISPLBTMP(NOR_MSG,NONE_MSG,STR_MSG,BITMPSIZ,
     &					BITMAP)
C
***	IDENT	04NO87
***	MODULE	DISPLBTMP
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	 5-Nov-1984
C
C Description
C
C	This subroutine displays which bits of a bitmap are set.
C	It outputs NOR_MSG followed by a list of integers or ranges
C	of integers indicating the bits that are set.  If no bits are
C	set then NONE_MSG is output. If these messages are not
C	required then a number < 0 should be passed.
C
	IMPLICIT NONE
C
C Arguments
C
C ----- input
C
	INTEGER*4	NOR_MSG		! message to be output as 
					! header
					! if < 0, no message is output
	INTEGER*4	NONE_MSG	! message to be output if
					! no bits set
					! if < 0, no message is output
	INTEGER*4	STR_MSG		! message with %S for list
					! of integers and ranges
	INTEGER*4	BITMPSIZ	! top of bitmap (in bits)
					! ie, map is 0-bitmpsiz
C
	INTEGER*4	BITMAP(BITMPSIZ/32+1)
					! bitmap
C
***     PARAMETER/CMN:MOANMESS/		! moan constants
C
***     COMMON/CMN:BTMAPDIS/		! global variables for this
					! subroutine
C
C Local Variables
C
	INTEGER*4	WORD		! counter
C
C Start of subroutine
C
C Initialise common BTMAPDIS
C
	STARTD=.FALSE.
	INRANGE=.FALSE.
	FIRST=-1
	SECOND=-2
	GOOD_MSG=NOR_MSG
	ROPE_MSG=STR_MSG
	TOPBITMP=BITMPSIZ
	TOPWORD=BITMPSIZ/32+1
C
C Examine words of bitmap in turn. If state changes look more closely
C at the word involved  
C
	DO 10, WORD=1,TOPWORD
	   IF ((INRANGE.AND.BITMAP(WORD).NE.-1).OR.
     &	       (.NOT.INRANGE.AND.BITMAP(WORD).NE.0)) THEN
	      CALL INWORD(BITMAP(WORD),WORD)
	   ENDIF
   10	CONTINUE
C
C Flush out buffer, if there has been any output
C
	IF (STARTD) THEN
	   IF (INRANGE.AND.SECOND.LT.FIRST) SECOND=TOPBITMP
	   CALL ENDDISPL
	ELSE
	   IF (NONE_MSG.GE.0) CALL INFORM(NONE_MSG)	! no output
	ENDIF
C
C Return
C
	RETURN
	END
