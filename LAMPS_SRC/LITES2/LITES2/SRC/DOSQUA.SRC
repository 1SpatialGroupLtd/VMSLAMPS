C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-09-17 10:29:30.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        SUBROUTINE DOSQUA
C
***     IDENT   17SE92
***     MODULE  DOSQUA
C
C       Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C       Written                                 RWR	 7-Mar-1985
C       Created dummy                           RJH     18-SEP-1984
C
C Description
C
C	LITES2 cartographic editor SQUARE command.
C
C	SQUARE	ANGLES		! force all angles within
				!  tolerance to be right angles
C	SQUARE	WHOLE		! * all sides squared (OSQ)
C	SQUARE	PART		! sides within tolerance squared (OSQ)
C
        IMPLICIT NONE
C
C Included Parameter Files
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:END/
***	PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:PACK/
***	PARAMETER/CMN:PROCESS/
***	PARAMETER/CMN:STAPAR/
C
C Common Blocks
C
***	COMMON/CMN:DRAWIN/
***     COMMON/CMN:DOUT/                ! cmd dec. output
***	COMMON/CMN:D14IFC/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:STRIKE/
C
C Functions called
C
	LOGICAL ANGSQU
C
C Local Variables
C
	INTEGER		X,Y
	PARAMETER 	(X=1)
	PARAMETER	(Y=2)
C
	EXTERNAL NASTY,MOAN
C
	INTEGER I,J,K
	REAL PDX,PDY,R	! vector and length of point displacement
	LOGICAL*1 WARN	! raspberry pending
C
C Start of subroutine
C
C
C is there anything valid to square?
C
	IF (.NOT.FO) THEN
	   CALL MOAN(MSG_NOFEATURE)
	   GOTO 850
	ELSEIF (FOLST.LT.3) THEN
	   CALL MOAN(MSG_TOOFEWTOSQR)
	   GOTO 850
	ELSEIF (FOLST.GT.D14MP1) THEN
	   CALL MOAN(MSG_TOOMANYTOSQR,D14MP1)
	   GOTO 850
C
C get data into squaring buffers
C
	ELSE
	   CALL STRTSQ
C
C cannot do OS squaring if all points are fixed
	   IF (NPRIV.EQ.D14NPT) THEN
	      CALL MOAN(MSG_ALLPTSFIXED)
	      GOTO 850
	   ENDIF
	ENDIF
C
C Dispatch according to secondary command
C
	GOTO (100,200,300), DSECN
C
	IF (DSECN.EQ.0) GOTO 200	! default is SQUARE WHOLE
	CALL MSGCMD(NASTY,MSG_ERRSECIND)
	GOTO 850
C
C	SQUARE	ANGLES	-  force all angles within tolerance to be
C			    right angles
C
  100	CONTINUE
	IF (ANGSQU()) GOTO 850		! square angles
	SQTYPE=ANGLE_SQUARED
	GOTO 500
C
C	SQUARE	WHOLE   - * all sides squared (OSQ)
C
  200	CONTINUE
	CALL HANDLE		! get FO into IH arrays and drop it
	PARTSQ=.FALSE.
	CALL D14SQU
	SQTYPE=WHOLE_SQUARED
	GOTO 500
C
C	SQUARE	PART	-  sides within tolerance squared (OSQ)
C
  300	CONTINUE
	CALL HANDLE		! get FO into IH arrays and drop it
	PARTSQ=.TRUE.
	CALL D14SQU
	SQTYPE=PART_SQUARED
	GOTO 500
C
C output points that have moved by more than warning tolerance
C
  500	CONTINUE
	WARN=.FALSE.
	J=1
  600	CONTINUE
	CALL GETVRT(IHPAK,J,D14NPT_INITIAL)
	DO 640, I=1,RITOP
	   K=I+RIVO
	   IF (D14PT1(K).EQ.0) GOTO 640		! this point removed
	   PDX=(D14WK1(X,D14PT1(K))-RIXY(X,I))/SCLFRT
	   PDY=(D14WK1(Y,D14PT1(K))-RIXY(Y,I))/SCLFRT
	   R=SQRT(PDX**2+PDY**2)
	   IF (R.GT.SQWT) THEN
	      WARN=.TRUE.
	      CALL INFORM(MSG_WARNTOL,K,R,PDX,PDY)
	   ENDIF
  640	CONTINUE
	J=J+RITOP
	IF (J.LE.D14NPT_INITIAL) GOTO 600	! read some more points
	IF (WARN) CALL RASP
C
C copy some points into object in hand,
C so that squared feature is refreshed
C (note that we must supply same number of points as are in IH buffer
C  at the moment, so points that have been removed just generate a
C  duplicate point)
C
	DO 650, I=1,IHTOP
	   K = I + IHVO
	   IF (D14PT1(K) .EQ. 0) THEN
C
C if first point we are looking at has been removed, use previous point
C from squaring buffers, otherwise duplicate a point. Note that for first
C point to be removed IHVO must be > 0, so K must be > 1, so cannot get
C a SUBRNG
	      IF (I.GT.1) THEN
	         IHXY(X,I) = IHXY(X,I-1)	! duplicate a point
	         IHXY(Y,I) = IHXY(Y,I-1)
	      ELSE
	         IHXY(X,I) = D14WK1(X,D14PT1(K-1))
	         IHXY(Y,I) = D14WK1(Y,D14PT1(K-1))
	      ENDIF
	   ELSE
	      IHXY(X,I) = D14WK1(X,D14PT1(K))
	      IHXY(Y,I) = D14WK1(Y,D14PT1(K))
	   ENDIF
  650	CONTINUE
C
C set NDMODE, and go into EDIT state
C
	NDMODE=END_SQUARE	! end mode for end of squaring
	CALL SETSTA(STATE_EDIT)
	GOTO 900
C
C error return
C
  850	CONTINUE
	CALL IGNCMD
C
C Return
C
  900	CONTINUE
        RETURN
        END
