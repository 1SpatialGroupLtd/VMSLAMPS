	SUBROUTINE ASKSTATUS
C
***	IDENT	06FE92
***	MODULE	ASKSTATUS
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	31-May-1990
C
C	LITES2 cartographic editor ASK STATUS command.
C
	IMPLICIT NONE
C
***     PARAMETER/CMN:MACMEN/		! macros, menus and puck buttons
***     PARAMETER/CMN:MERPAR/		! macro error constants
***     PARAMETER/CMN:MOANMESS/		! moan constants
C
	INCLUDE	'($DSCDEF)'
C
***     COMMON/CMN:DOUT/		! command decoding output
***	COMMON/CMN:DMACRD/
***	COMMON/CMN:GLOBAL/
***	COMMON/CMN:MACRO/
***     COMMON/CMN:MASTER/
***	COMMON/LSL$CMNLSL:TXTC/
***	COMMON/CMN:VARIABLE/
C
C Functions
	EXTERNAL	ASK_STATUS_CMD_TABLE
	EXTERNAL	NASTY,MOAN
	INTEGER		FINSTR
	INTEGER		FINMAC
	INTEGER		LIB$SGET1_DD		! use LIB$ rather than STR$
						! as it returns errors
						! rather than signalling them
	INTEGER*2	GET_VARWORD
	BYTE		GET_VARBYTE
C
C Local Variables
	INTEGER		RETCOD
	INTEGER		LENGTH
	INTEGER		I
	INTEGER*2	PTR
C
C note - use dynamic string for rest of line string
	INTEGER		STRING(2)	! dynamic strings
	BYTE		STR1B(4)
	EQUIVALENCE	(STR1B,STRING(1))
	DATA		STR1B/0,0,0,DSC$K_CLASS_D/
C
C get tertiary command
	CALL GET_COMMAND(DSTR(:DSTRL),ASK_STATUS_CMD_TABLE)
	IF (MOANED) GOTO 9990
C
C allocate maximum space to dynamic string
	RETCOD = LIB$SGET1_DD(DSM,STRING(1))
	IF (.NOT.RETCOD) THEN
	   CALL MOAN(MSG_ERRINASKSTRING,' ')
	   CALL LITES2_SIGNAL(RETCOD)
	   GOTO 9990
	ENDIF
C
C get (quoted) string
	IF (DSTRL.GT.0) THEN
	   CALL DCPSAV(PTR)			! save TXTBUF pointer
	   CALL SETAUX(%REF(DSTR),DSTRL)	! set auxiliary buffer
	   LENGTH = FINSTR(STRING(1),'string')
C
C this has not dealt with the string dynamically (which is why we
C had to allocate space above), so take the part of the string we want
	   CALL STR$LEFT(STRING(1),STRING(1),LENGTH)
	   CALL BSLN				! restore TXTBUF
	   CALL DCPSET(PTR)
	ELSE
	   LENGTH = 0
	   CALL STR$FREE1_DX(STRING(1))	! make empty
	ENDIF
C
C obey command
	GOTO (100,200), DPRIN
C
C Tertiary command number out of range
	CALL MSGCMD(NASTY,MSG_ERRTERIND)
	GOTO 9990
C
C VARIABLE - return data about specified variable
100	CONTINUE
	CALL RDNAME(I,STRING)
	IF (MOANED) GOTO 9990
C
	IF (I.GT.0) THEN
C
C type of variable is in VARBYTE(3,I) 1 = INT, 2 = REAL, 3&5 = CHAR,
C 4 = DOUBLE
	   ASK_INT(1) = GET_VARBYTE(%VAL(VAR_DESC_ADDRESS),3,I)
	   IF (ASK_INT(1).EQ.5) ASK_INT(1) = 3
C
C number of elements in array is in VARWORD(1,dvarn)
C (except for simple character variables, when this is part of string
C descriptor, and it holds the length of the string)
	   IF (GET_VARBYTE(%VAL(VAR_DESC_ADDRESS),3,I).EQ.3) THEN
	      ASK_INT(2) = 0
	   ELSE
	      ASK_INT(2) = GET_VARWORD(%VAL(VAR_DESC_ADDRESS),1,I)
	   ENDIF
	   ASK_INT_NUM = 2
	ELSE
	   ASK_INT(1) = 0
	   ASK_INT_NUM = 1
	ENDIF
	GOTO 10000
C
C MACRO - return data about specified macro
200	CONTINUE
	IF (LENGTH.LE.0) THEN
	   ASK_INT(1) = 0
	   ASK_INT_NUM = 1
	ELSE
	   CALL DCPSAV(PTR)			! save TXTBUF pointer
	   CALL SETAUX(%VAL(STRING(2)),LENGTH)
C
	   RETCOD = FINMAC(.FALSE.)
	   IF (MOANED) GOTO 9990
C
	   CALL BSLN				! restore TXTBUF
	   CALL DCPSET(PTR)
C
	   IF (RETCOD.EQ.MERUXS) THEN		! no macro found
	      ASK_INT(1) = 0
	      ASK_INT_NUM = 1
	   ELSEIF (RETCOD.NE.0.AND.RETCOD.NE.MEREOL) THEN
	      CALL ERRMAC(RETCOD,'macro, menu or puck')
	      GOTO 9990
	   ELSE
	      IF (RETCOD.NE.MEREOL) THEN	! not a puck or menu
	         ASK_INT(1) = 1			! macro exists
	         ASK_INT(2) = GET_VARWORD(%VAL(MACDSW_ADDR),
     &	                                  1,DMACN)	! length of contents
	      ELSE
	         ASK_INT(1) = 2			! puck or menu
	         ASK_INT(2) = MENINF(PTSIZE,DTABN-MAXUSR) ! size of menu/puck
	      ENDIF
	      ASK_INT_NUM = 2
C
C generate "correct" name in TXTC, and output as character
	      CALL MACSTR
	      CALL STR$COPY_DX(ASK_CHAR(1,1),TXTDSC)
	      ASK_CHAR_NUM = 1
	   ENDIF
	ENDIF
	GOTO 10000
C
9990	CALL IGNCMD
	GOTO 10000
C
10000	RETURN
	END
