C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-10-05 16:24:04.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION GETABL(LOG,CHAN,NTYPAHD,NOBRDCST,BUFLEN)
C
***	IDENT	05OC89
***	MODULE	GETABL
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	19-Aug-1985
C
C Description
C
C	Function to initialise a terminal line to use as a table
C	Returns .TRUE. if successful, .FALSE. otherwise
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:MOANMESS/
C
***	COMMON/CMN:SAVFLE/
***	COMMON/CMN:WORKS/
C
C system parameters
	INCLUDE		'($DCDEF)'
	INCLUDE		'($DEVDEF)'
	INCLUDE 	'($DVIDEF)'
	INCLUDE		'($IODEF)'
	INCLUDE		'($SYIDEF)'
	INCLUDE		'($TTDEF)'
C
C Arguments
C
c input
	CHARACTER*(*)	LOG		! logical name of line
c output
	INTEGER*2	CHAN		! channel number
	LOGICAL		NTYPAHD		! whether line was no type ahead
	LOGICAL		NOBRDCST	! whether line was no broadcast
	INTEGER*2	BUFLEN		! length of typeahead buffer
C
C functions called
	INTEGER*4	LIB$GETSYI
	INTEGER*4	LIB$GETDVI
	INTEGER*4	LIB$SKPC
	INTEGER*4	LIB$FIND_FILE
	INTEGER*4	LIB$FIND_IMAGE_SYMBOL
	INTEGER*4	SIGCHS
	INTEGER*4	SYS$ALLOC
	INTEGER*4	SYS$ASSIGN
	INTEGER*4	SYS$QIOW
	INTEGER*4	TRNALL
C
C workspace
	EXTERNAL	EXP_HAND_FIMS
C
	INTEGER*4	VAL
	INTEGER*4	LEN
	INTEGER*2	IOSB(4)
	INTEGER*4	BUFF(2)		! term characteristics
	BYTE		WBUFF(8)	! write buffer
	EQUIVALENCE	(BUFF,WBUFF)
	INTEGER*4	IERR
	LOGICAL		OK		! internal error flag
	CHARACTER*255	TEMP
	CHARACTER*255	DECODE_FILE	! name of decode file
	INTEGER*4	DECODEL		! length of file name
	INTEGER*4	CONTEXT		! context for LIB$FIND_FILE
	INTEGER*4	I,J
	INTEGER		PRSTRFUNC	! address of prmt string function
C
	GETABL=.FALSE.			! assume failure
	OK=.FALSE.
C
C assign channel
	IERR=SYS$ASSIGN(LOG,CHAN,,)
	IF (.NOT.IERR) GOTO 999
C
C check that line is a terminal line
	IERR=LIB$GETDVI(DVI$_DEVCLASS,CHAN,,VAL,,)
	IF (.NOT.IERR) GOTO 998
C
	IF (VAL.NE.DC$_TERM) THEN
	   CALL MOAN(MSG_LINENOTTERM,LOG)
	   OK=.TRUE.
	   GOTO 998
	ENDIF
C
C allocate device
	IERR=SYS$ALLOC(LOG,,,,)
	IF (.NOT.IERR) GOTO 998
C
C check whether type-ahead or not
	IERR=LIB$GETDVI(DVI$_TT_NOTYPEAHD,,LOG,VAL)
	IF (.NOT.IERR) GOTO 997
C
	NTYPAHD=VAL.EQ.1
C
C check whether no broadcast or not
	IERR=LIB$GETDVI(DVI$_TT_NOBRDCST,,LOG,VAL)
	IF (.NOT.IERR) GOTO 997
C
	NOBRDCST=VAL.EQ.1
C
	IF (NTYPAHD.OR..NOT.NOBRDCST) THEN
C
C get current setting
	   IERR=SYS$QIOW(,			! efn
     &	                 %VAL(CHAN),		! channel
     &	                 %VAL(IO$_SENSEMODE),	! function
     &	                 IOSB,			! iosb
     &	                 ,			! astadr
     &	                 ,			! astprm
     &	                 BUFF,			! terminal char'istics
     &	                 %VAL(8),		! length of BUFF
     &	                 ,			! p3
     &	                 ,			! p4
     &	                 ,			! p5
     &	                  )			! p6
C
	   IF (.NOT.IERR) GOTO 997
	   IF (.NOT.IOSB(1)) THEN
	      IERR=IOSB(1)
	      GOTO 997
	   ENDIF
C
C remove no_typahead terminal characteristic
C
	   IF (NTYPAHD) BUFF(2)=BUFF(2).AND..NOT.TT$M_NOTYPEAHD
	   IF (.NOT.NOBRDCST)BUFF(2)=BUFF(2).OR.TT$M_NOBRDCST
C
C and write it back
C
	   IERR=SYS$QIOW(,			! efn
     &	                 %VAL(CHAN),		! channel
     &	                 %VAL(IO$_SETMODE),	! function
     &	                 IOSB,			! iosb
     &	                 ,			! astadr
     &	                 ,			! astprm
     &	                 BUFF,			! terminal char'istics
     &	                 %VAL(8),		! length of BUFF
     &	                 ,			! p3
     &	                 ,			! p4
     &	                 ,			! p5
     &	                  )			! p6
C
	   IF (.NOT.IERR) GOTO 997
	   IF (.NOT.IOSB(1)) THEN
	      IERR=IOSB(1)
	      GOTO 997
	   ENDIF
	ENDIF
C
C get length of typeahead buffer
C
C first find if using TYPEAHD or ALTYPEAHD
C
	IERR=LIB$GETDVI(DVI$_TT_ALTYPEAHD,,LOG,VAL)
	IF (.NOT.IERR) GOTO 997
C
C and get its length
	IF (VAL.EQ.0) THEN		! not ALTYPEAHD
	   IERR=LIB$GETSYI(SYI$_TTY_TYPAHDSZ,LEN)
	   IF (.NOT.IERR) GOTO 997
	ELSE
	   IERR=LIB$GETSYI(SYI$_TTY_ALTYPAHD,LEN)
	   IF (.NOT.IERR) GOTO 997
	ENDIF
	BUFLEN=LEN			! to INTEGER*2
C
C send a ctrl/q to table to wake it up (in case it is on a terminal
C server).
	WBUFF(1) = 17			! ctrl q
	IERR=SYS$QIOW(,			! efn
     &	        %VAL(CHAN),		! channel
     &	        %VAL(IO$_WRITEVBLK.OR.
     &	        IO$M_CANCTRLO),		! function
     &	        IOSB,			! iosb
     &	        ,			! astadr
     &	        ,			! astprm
     &	        WBUFF,			! p1
     &	        %VAL(1),		! p2 - length of WBUFF
     &	        ,			! p3 - zero time out
     &	        ,			! p4
     &	        ,			! p5
     &	        )			! p6
	IF (.NOT.IERR) GOTO 997
	IF (.NOT.IOSB(1)) THEN
	   IERR=IOSB(1)
	   GOTO 997
	ENDIF
C
C find out name of table line
	CALL TRNALL(LOG(1:SIGCHS(LOG)),TEMP) ! this must work
C
C remove '_' and ':'
	I=LIB$SKPC('_',TEMP)
	J=INDEX(TEMP,':')
	IF (J.EQ.0) J=SIGCHS(TEMP)+1
	TEMP=TEMP(I:J-1)
	I=SIGCHS(TEMP)
C
C and thus logical name of possible decode routine
	DECODE_FILE=DECFLE//'_'//TEMP(1:I)//':'
	DECODEL=INDEX(DECODE_FILE,':')
C
C are we trying for a user supplied decode routine?
C Check whether file exists first
C (use same default as LIB$FIND_IMAGE_SYMBOL)
C
	USEFUN=.FALSE.			! not using decode routine yet
	CONTEXT = 0			! clear context
	IERR = LIB$FIND_FILE(
     &		   DECODE_FILE(1:DECODEL),TEMP,CONTEXT,'SYS$SHARE:.EXE')
	CALL LIB$FIND_FILE_END(CONTEXT)
C
	IF (IERR) THEN
C
C now try to get entry point, and activate the image
C NB not allowed colon in the logical name here
C
	   IERR = LIB$FIND_IMAGE_SYMBOL(
     &			DECODE_FILE(1:DECODEL-1),DECENT,FUNADR)
	   IF (IERR) USEFUN = .TRUE.
	ENDIF
C
C set up prompt for reading table
	TABPROMDECOD = .TRUE.			
	IF (USEFUN) THEN
	   CALL LIB$ESTABLISH(EXP_HAND_FIMS)	! set  condition handler
	   IERR = LIB$FIND_IMAGE_SYMBOL(
     &			DECODE_FILE(1:DECODEL-1),PRSTRENT,PRSTRFUNC)
	   CALL LIB$REVERT		! take down condition handler
	   IF (.NOT.IERR) TABPROMDECOD = .FALSE.! using default prompt
	ELSE
	   IERR = .FALSE.
	ENDIF
C
	IF (IERR) THEN
	   CALL CALLR(TABPROMPT,TABPROMPTMAX,TABPROMPTL,%VAL(PRSTRFUNC))
	ELSE
	   TABPROMPT(1) = 'V'
	   TABPROMPTL   = 1
	ENDIF
C
C success
C
	GETABL=.TRUE.
	OK=.TRUE.
	GOTO 1000
C
C error exits
C
997	CALL SYS$DALLOC(LOG,)
C
998	CALL SYS$DASSGN(%VAL(CHAN))
C
999	IF (.NOT.OK) CALL LITES2_SIGNAL(IERR)
C
1000	RETURN
	END
