C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-06-28 16:03:54.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE CHANAC(ACD,DOADD)
C
***	IDENT	28JN88
***	MODULE	CHANAC
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Written					CCB	20-DEC-1984
C
C	LITES2 routine to perform the work of ADD,ALTER, and SET AC
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:ACS/
***	PARAMETER/CMN:MOANMESS/
C
***	COMMON/CMN:ACS/
***	COMMON/CMN:DOUT/
***	COMMON/CMN:GLOBAL/
***	COMMON/LSL$CMNLSL:TXTC/
C
C argument
	INTEGER*4	ACD(ACDLEN)	! AC descriptor
	LOGICAL*1	DOADD		! true if ADD, false if ALTER
C
C functions called
	INTEGER		FINSTR
	LOGICAL		THISAC
	LOGICAL		IS_REAL_AC
	LOGICAL		ATTDECOD
	INTEGER		CPYSTR
	LOGICAL		CHK_PRIV_ATT
C
	EXTERNAL	MOAN,NASTY
C
C local variables
	INTEGER		ACTYP
	INTEGER*4	ACVAL
	INTEGER*2	TYPAC
	REAL		RACVAL
	EQUIVALENCE	(ACVAL,RACVAL)
	CHARACTER*(DSM)	TMPSTR
	INTEGER		TMPSTR_L
	LOGICAL		DUMMY
C
C Despatch according to secondary command
C
	GOTO (100,200,300,400,500,600,700,800,900,1000), DSECN
C
C Secondary command number out of range
	CALL MSGCMD(NASTY,MSG_ERRSECIND)
	GOTO 9000
C
C Secondary command AC
100	CONTINUE
	TMPSTR_L = CPYSTR(DSTR(1:DSTRL),TMPSTR)
	IF (.NOT.ATTDECOD(TMPSTR(1:TMPSTR_L),ACTYP,DSTRL,DSTR,ACVAL,
     &	               .TRUE.,DUMMY)) GOTO 9000
	DSTRIN = DSTRL.GT.0
	IF (ACTYP.LE.0.OR.ACTYP.GT.32767) THEN
	   CALL MOAN(MSG_BADACTYPE,ACTYP)
	   GOTO 9000
	ELSE				! check for real AC type
	   TYPAC = ACTYP	
	ENDIF
	GOTO 2000
C
C Secondary command CONTOUR
200	ACTYP = 2
	ACVAL = DINTS(1)
	GOTO 2000
C
C Secondary command HEIGHT
300	ACTYP = 3
	RACVAL = DREALS(1)
	GOTO 2000
C
C Secondary command RH
400	ACTYP = 5
	ACVAL = DINTS(1)
	GOTO 2000
C
C Secondary command LH
500	ACTYP = 4
	ACVAL = DINTS(1)
	GOTO 2000
C
C Secondary command SECONDARY
600	ACTYP = 1
	ACVAL = DINTS(1)
	GOTO 2000
C
C Secondary command CROSSREF
700	CALL MSGCMD(MOAN,MSG_CMDNOTIMPLE)
	GOTO 9000
C
C Secondary command TC
800	ACTYP = -1
	GOTO 2000
C
C Secondary command CH
900	ACTYP = -2
	GOTO 2000
C
C Secondary command REALAC
1000	ACTYP = DINTS(1)
	IF (ACTYP.LE.0.OR.ACTYP.GT.32767) THEN
	   CALL MOAN(MSG_BADACTYPE,ACTYP)
	   GOTO 9000
	ELSE				! check for real AC type
	   TYPAC = ACTYP		! I*4 -> I*2
	   IF (.NOT.(IS_REAL_AC(TYPAC))) THEN
	      CALL MOAN(MSG_NOINTEGERAC,ACTYP)
	      GOTO 9000
	   ENDIF
	ENDIF
	RACVAL = DREALS(1)
	GOTO 2000
C
2000	CONTINUE
C
C check if ACTYP is a privileged attribute
	IF (CHK_PRIV_ATT(ACTYP)) GOTO 9000
C
	IF (.NOT.DOADD) THEN			! REPLACE
	   IF (THISAC(ACD)) THEN		! get current AC
	      CALL MOAN(MSG_NOTCAC)
	      GOTO 9000
	   ENDIF
	   IF (ACTYP.LT.0.NEQV.ACBUFL(AC_L_TYPE).LT.0) THEN
	      CALL MOAN(MSG_CHANGEAC)
	      GOTO 9000
	   ENDIF
	ENDIF
C
C get the string into TXTDSC
C set auxiliary buffer onto the string
	TXTPTR = 0
	IF (DSTRIN) THEN			! rest of line present
	   CALL SETAUX(%REF(DSTR),DSTRL)
	   TXTPTR = TXTLIM			! maximum length
	   TXTPTR = FINSTR(TXTDSC,'string')	! get string
	   IF (MOANED) GOTO 9000
	ENDIF
C
C Actually add/alter the AC (taking text from TXTDSC)
	CALL ALTAC(ACD,ACTYP,ACVAL,DOADD)
	GOTO 9999
C
9000	CALL IGNCMD
C
9999	RETURN
	END
