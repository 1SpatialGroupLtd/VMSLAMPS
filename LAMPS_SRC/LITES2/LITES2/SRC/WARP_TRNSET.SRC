C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-09-28 13:08:20.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE WARP_TRNSET(TRANS,N_PTS,PTS,COEFFS,XRMS,YRMS,OK)
C
***	MODULE	WARP_TRNSET
***	IDENT	28SE94
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
C Author: R.W. Russell 				19-Sep-1994
C
C This routine sets up a transformation for image/vector warping
C
C if TRANS is set to TRNTYP_LINEAR we use the formulae:-
C
C	 X=a0+a1*x-a2*y	.........
C	 Y=a3+a2*x+a1*y
C
C where a0 is shift in X,
C       a3 is shift in Y,
C       a1 is cos(angle)
C       a2 is sin(angle)
C
C if TRANS is set to TRNTYP_ORTHOG we use the formulae:-
C
C	 X=a0+a1*x-a2*y	.........	RWR2PT
C	 Y=a3+a2*x+a1*y
C
C if TRANS is set to TRNTYP_AFFINE we use the formulae:-
C
C	 X=a0+a1*x+a2*y .........	GENTRN
C	 Y=b0+b1*x+b2*y
C
C if TRANS is set to TRNTYP_EXTENDED we use the formulae:-
C
C	 X=a0+a1*x+a2*y+a3*x*y ....	
C	 Y=b0+b1*x+b2*y+b3*x*y
C
C these are all reduced to the same form for use (in TRNUSE)
C
C
C if TRANS is set to TRNTYP_PROJECTIVE we use the formulae:-
C
C	 X = (a0*x + a1*y + a2) / (a6*x + a7*y +1) ..	PROJ4PT
C        Y = (a3*x + a4*y + a5) / (a6*x + a7*y +1)
C
C
	IMPLICIT	NONE
C
C arguments 
	INTEGER		TRANS		! type of transformation to use
	INTEGER		N_PTS		! number of observation points
	REAL		PTS(4,*)	! measured & target coordinates
	REAL*8		COEFFS(4,2)	! returned transform coeffs
	REAL	  	XRMS,YRMS	! RMS residuals
	LOGICAL		OK		! TRUE if setup successful
C
C Common Blocks
C
***	PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:TRNTYP/
C
***	COMMON/CMN:OPTION/
***	COMMON/LSL$CMNLSL:TXTC/
C
	EXTERNAL	WARP_TRANSFORM_CMD_TABLE
C
C working storage
C
	REAL	  	RESID(2,4)	! X,Y residuals (target space)
	REAL	  	XMAX,YMAX	! max residuals    "      "
	REAL*8		GCPCOEF(3,2)	! coefficients for GENTRN
	REAL*8		COEF2P(4)	! coefficients for RWR2PT
	INTEGER		I,J,MIN_NUM	
C
C functions
	LOGICAL		GENTRN
	LOGICAL		EXTENDED_4PT_LS
	LOGICAL		RWR2PT
	LOGICAL		PROJ_4PT_LS
	LOGICAL		WARP_LINEAR
C
	OK = .FALSE.
C
	TXTPTR = 10		! long enough
	J = 0			! context
	CALL FIND_CMDNAME(WARP_TRANSFORM_CMD_TABLE,TRANS+1,TXTDSC,I,J)
        TXTPTR = I		! returned length
C
C compute transformation parameters and check that they are OK 
C                                           
	IF (TRANS.EQ.TRNTYP_LINEAR) GOTO 100
	IF (TRANS.EQ.TRNTYP_ORTHOG) GOTO 200
	IF (TRANS.EQ.TRNTYP_AFFINE) GOTO 300
	IF (TRANS.EQ.TRNTYP_LASERAID) GOTO 400
	IF (TRANS.EQ.TRNTYP_PROJECTIVE) GOTO 500
C
C linear transformation
100	CONTINUE
	MIN_NUM = 1
	IF (N_PTS .LT. MIN_NUM) THEN
	   GOTO 950
	ELSEIF (WARP_LINEAR(N_PTS,PTS,COEF2P,RESID,XMAX,YMAX,XRMS,YRMS)) THEN
	   CALL MOAN(MSG_BADCPTS)
	   GOTO 999
	ELSE
	   COEFFS(1,1)=COEF2P(1)	! a0+a1x-a2y
	   COEFFS(2,1)=COEF2P(2)	! b1+a2x+a1y
	   COEFFS(3,1)=-COEF2P(3)
	   COEFFS(4,1)=0.0
	   COEFFS(1,2)=COEF2P(4)
	   COEFFS(2,2)=COEF2P(3)
	   COEFFS(3,2)=COEF2P(2)
	   COEFFS(4,2)=0.0
	 ENDIF
C
	GOTO 900
C
C Orthogonal transformation
200	CONTINUE
	MIN_NUM = 2
	IF (N_PTS .LT. MIN_NUM) THEN
	   GOTO 950
	ELSEIF (RWR2PT(N_PTS,PTS,COEF2P,RESID,XMAX,YMAX,XRMS,YRMS)) THEN
	   CALL MOAN(MSG_BADCPTS)
	   GOTO 999
	ELSE
	   COEFFS(1,1)=COEF2P(1)	! a0+a1x-a2y
	   COEFFS(2,1)=COEF2P(2)	! b1+a2x+a1y
	   COEFFS(3,1)=-COEF2P(3)
	   COEFFS(4,1)=0.0
	   COEFFS(1,2)=COEF2P(4)
	   COEFFS(2,2)=COEF2P(3)
	   COEFFS(3,2)=COEF2P(2)
	   COEFFS(4,2)=0.0
	 ENDIF
C
	GOTO 900
C
C Affine transformation
300	CONTINUE
	MIN_NUM = 3
	IF (N_PTS .LT. MIN_NUM) THEN
	   GOTO 950
	ELSEIF (GENTRN(N_PTS,PTS,GCPCOEF,RESID,XMAX,YMAX,XRMS,YRMS)) THEN
	   CALL MOAN(MSG_BADCPTS)
	   GOTO 999				! start again
	ELSE
	   DO 310, I=1,3
	      DO 310, J=1,2
	         COEFFS(I,J)=GCPCOEF(I,J)
	      CONTINUE
310	   CONTINUE
	   COEFFS(4,1)=0.0			! no x*y term
	   COEFFS(4,2)=0.0
	ENDIF
C
	GOTO 900
C
C Laseraid transformation
400	CONTINUE
	MIN_NUM = 4
	IF (N_PTS .LT. MIN_NUM) THEN
	   GOTO 950
	ELSEIF (EXTENDED_4PT_LS(N_PTS,PTS,COEFFS,RESID,
     &	                     XMAX,YMAX,XRMS,YRMS)) THEN
		   CALL MOAN(MSG_BADCPTS)
		   GOTO 999				! start again
	ENDIF
	GOTO 900
C
C Projective transformation
500	CONTINUE
	MIN_NUM = 4
	IF (N_PTS .LT. MIN_NUM) THEN
	   GOTO 950
	ELSEIF (PROJ_4PT_LS(N_PTS,PTS,COEFFS,RESID,
     &	                     XMAX,YMAX,XRMS,YRMS)) THEN
	   CALL MOAN(MSG_BADCPTS)
	   GOTO 999				! start again
	ENDIF
C
	GOTO 900
C
C success exit
900	CONTINUE
	OK = .TRUE.
C
C diagnostic output
	if (diaopt) then
	   call writef(
     &	         'Results of warp setup (%S transformation)',txtdsc)
	   call writef
	   call writef('Digitised points              IFF values')
	   do 550, i= 1,4
	      call writef('Pt %N X= %G0.8 Y= %G0.8   X= %G0.8 Y= %G0.8 ',
     &		   i,pts(1,i),pts(2,i),pts(3,i),pts(4,i))
550	   continue
C
	   call writef
	   call writef('Residuals at these points (IFF units)')
	   do 570, i= 1,4
	      call writef('Pt %N X= %G0.8 Y= %G0.8',i,resid(1,i),
     &	                  resid(2,i))
570	   continue
	   call writef
	   call writef('Max residual X= %G0.8, Y=%G0.8',XMAX,YMAX)
	   call writef('RMS          X= %G0.8, Y=%G0.8',XRMS,YRMS)
C
	   call writef
	   call writef('Transformation coefficients')
	   call writef
	   if (trans.eq.trntyp_projective) then
	      call writef('X = (a0*x + a1*y + a2) / (a6*x + a7*y +1)')
	      call writef('Y = (a3*x + a4*y + a5) / (a6*x + a7*y +1)')
	   else
	      call writef('X = a0 + a1*x + a2*y + a3*x*y')
	      call writef('Y = b0 + b1*x + b2*y + b3*x*y')
	   endif
	   call writef
	   call writef('a0= %G0.8, a1= %G0.8, a2= %G0.8, a3= %G0.8',
     &	         coeffs(1,1),coeffs(2,1),coeffs(3,1),coeffs(4,1))
	   if (trans.eq.trntyp_projective) then
	      call writef('a4= %G0.8, a5= %G0.8, a6= %G0.8, a7= %G0.8',
     &	         coeffs(1,2),coeffs(2,2),coeffs(3,2),coeffs(4,2))
	   else
	      call writef('b0= %G0.8, b1= %G0.8, b2= %G0.8, b3= %G0.8',
     &	         coeffs(1,2),coeffs(2,2),coeffs(3,2),coeffs(4,2))
	   endif
	endif
	GOTO 999
C
C Too few points error exit
950	CONTINUE
	CALL MOAN(MSG_TOOFEWWARP,N_PTS,TXTDSC)
	CALL LEARN(MSG_NEEDATLEAST,MIN_NUM)
C
999	CONTINUE
C
	RETURN
	END
