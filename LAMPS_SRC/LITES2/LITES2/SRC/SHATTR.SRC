C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-12-14 15:35:16.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE SHATTR
C
***	IDENT	14DE87
***	MODULE	SHATTR
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	13-Nov-1984
C
C	LITES2 cartographic editor SHOW ATTRIBUTE command.
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:ACS/
***     PARAMETER/CMN:MOANMESS/
C
***	COMMON/CMN:ACS/
***	COMMON/CMN:ATTBTS/
***	COMMON/CMN:DEFINE/
***	COMMON/LSL$CMNFRT:FRTACD/
***	COMMON/CMN:DRAWIN/
***     COMMON/CMN:DOUT/
***	COMMON/CMN:OPTION/
C
C w/s
	INTEGER*4	I
	EQUIVALENCE	(I,DINTS(1))
	LOGICAL		GOTHDR
	INTEGER		ADDR
	INTEGER		ACTYPE
	INTEGER		ACVALUE
	CHARACTER*60	STRNG
C
	CALL INFORM(MSG_BLANK)
	IF (DNINT.NE.1) THEN
C
C no argument on command line, so write out current settings
C
	   CALL INFORM(MSG_CURRATTR)
	   CALL INFORM(MSG_BLANK)
	   CALL INFORM(MSG_ATTRMAP,CONMAP+1)	! user thinks maps go
						! from 1 to MAXMAP
	   CALL INFORM(MSG_ATTRLAYER,CONLAY)	! layer
	   CALL INFORM(MSG_BLANK)
	   IF (CONFSN.NE.0) CALL INFORM(MSG_ATTRFSN,CONFSN)	! fsn
	   CALL INFORM(MSG_ATTRFC,CONFC)	! feature code
	   IF (PRCLEN.GT.0) THEN		! process code
	      CALL INFORM(MSG_ATTRPC,CONPRC(1:PRCLEN)) 
	   ELSE
	      CALL INFORM(MSG_ATTRPC,' ')
	   ENDIF
	   CALL VERFAC(CONACD)
	   CALL INFORM(MSG_BLANK)
	   IF (CONDEF.LE.0) THEN
	      CALL INFORM(MSG_NOPOINTATTR)
	   ELSE
	      CALL EXPAND('%WSPoint attributes (%N)',STRNG,CONDEFNO)
	      STRNG(25:) = ': '	! clear header
	      GOTHDR = .TRUE.
	      ADDR = CONDEF
10	      CONTINUE
C
C get info out of this definition
	      CALL PUTLNG(%VAL(ADDR+DEF_TYP),ACTYPE)
	      CALL PUTLNG(%VAL(ADDR+DEF_VALUE),ACVALUE)
	      CALL PUTLNG(%VAL(ADDR),ADDR)
C
C look for actype in ACD
	      CALL ACDFND(ACTYPE,.FALSE.)
C
C fill up output string with AC name (or if that fails its type)
	      IF (ACD_CODE.NE.-1) THEN
	         CALL EXPAND('%WS%S',STRNG(27:),ACD_NAME(1:ACD_NAME_LEN))
	      ELSE
	         CALL EXPAND('%WS%N',STRNG(27:),ACTYPE)
	      ENDIF
C
C add the value
	      CALL EXPAND('%WS'//ACD_FORMAT(1:ACD_FORMAT_LEN),
     &	                  STRNG(48:),ACVALUE)
C
C and write it out
	      CALL INFORM(MSG_STRING,STRNG)
C
C finished this definition?
	      IF (ADDR.GT.0) THEN
	         IF (GOTHDR) THEN
	            STRNG(1:27) = ' '
	            GOTHDR = .FALSE.
	         ENDIF
	         GOTO 10
	      ENDIF
	   ENDIF
	   CALL INFORM(MSG_BLANK)
	   CALL INFORM(MSG_ATTRTXT,CONTFC)	! feature code for texts
C
C	   check if expect to get height of text from FRT
C
	   IF (HEIOPT) THEN
	      IF (POIOPT) THEN			
	         CALL INFORM(MSG_ATTRPTZ,CONPTZ) ! height in points
	      ELSE
	         CALL INFORM(MSG_ATTRHT,CONHT,CONHT*SCLFRT)
	         IF (HGTINC.GT.0.0) THEN
	            CALL INFORM(MSG_ATTRINC,HGTINC,HGTINC*SCLFRT)
	         ELSE
	            CALL INFORM(MSG_INCBYTEN)
	         ENDIF
	      ENDIF
	   ENDIF
	   CALL INFORM(MSG_ATTRCLS,CONCLS)	! text classification
	   IF (POSOPT) CALL INFORM(MSG_ATTRLOC,CONLOC)	! text location
	   CALL INFORM(MSG_ATTRFNT,CONFNT)	! text font
	   CALL INFORM(MSG_ATTRARC,ARCFC)	! arc FC
	ELSE
C
C command had an integer argument; if it is valid write out
C that attribute set
C
	   IF (I.LT.1.OR.I.GT.MAXATT) THEN
	      CALL MOAN(MSG_INVALIDATT,MAXATT)
	      CALL IGNCMD
	   ELSE
	      CALL INFORM(MSG_GENATTR,I)
	      CALL INFORM(MSG_BLANK)
	      CALL INFORM(MSG_ATTRFC,ATTFC(I))
	      IF (ATTPLN(I).GT.0) THEN
	         CALL INFORM(MSG_ATTRPC,ATTPRC(I)(1:ATTPLN(I))) 
	      ELSE
	         CALL INFORM(MSG_ATTRPC,' ')
	      ENDIF
	      CALL VERFAC(ATTACD(1,I))
	      CALL INFORM(MSG_BLANK)
	      IF (ATTDEFS(I).LE.0) THEN
	         CALL INFORM(MSG_NOPOINTATTR)
	      ELSE
	         STRNG = 'Point attributes        : '	! clear header
	         GOTHDR = .TRUE.
	         ADDR = ATTDEFS(I)
20	         CONTINUE
C
C get info out of this definition
	         CALL PUTLNG(%VAL(ADDR+DEF_TYP),ACTYPE)
	         CALL PUTLNG(%VAL(ADDR+DEF_VALUE),ACVALUE)
	         CALL PUTLNG(%VAL(ADDR),ADDR)
C
C look for actype in ACD
	         CALL ACDFND(ACTYPE,.FALSE.)
C
C fill up output string with AC name (or if that fails its type)
	         IF (ACD_CODE.NE.-1) THEN
	            CALL EXPAND('%WS%S',STRNG(27:),
     &	                        ACD_NAME(1:ACD_NAME_LEN))
	         ELSE
	            CALL EXPAND('%WS%N',STRNG(27:),ACTYPE)
	         ENDIF
C
C add the value
	         CALL EXPAND('%WS'//ACD_FORMAT(1:ACD_FORMAT_LEN),
     &	                  STRNG(48:),ACVALUE)
C
C and write it out
	         CALL INFORM(MSG_STRING,STRNG)
C
C finished this definition?
	         IF (ADDR.GT.0) THEN
	            IF (GOTHDR) THEN
	               STRNG(1:27) = ' '
	               GOTHDR = .FALSE.
	            ENDIF
	            GOTO 20
	         ENDIF
	      ENDIF
	   ENDIF
	ENDIF
C
	RETURN
	END
