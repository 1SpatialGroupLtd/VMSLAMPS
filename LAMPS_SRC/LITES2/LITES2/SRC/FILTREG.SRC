	LOGICAL FUNCTION FILTREG(REG)
C
***	IDENT	29MR90
***	MODULE	FILTREG
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C to filter the points in a region
C Returns .TRUE. for failure
C
C Author R.W. Russell			20-March-1990
C
	IMPLICIT	NONE
C
C arguments (input)
C
	INTEGER*4	REG		! region to list
C
***	PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:REGPAR/
C
***	COMMON/CMN:DRAWIN/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:REGCMN/
C
C functions
	LOGICAL	ADDPPT
C
C local workspace
	INTEGER		CURPPT		! address of current PPT
	INTEGER		NEXTPPT
	REAL		TOLE(3)
	REAL		XYF(2),XYL(2)
	INTEGER		I
C
	FILTREG = .TRUE.
C
C check for valid region
	IF (.NOT.REGDEF(REG)) GOTO 1000
C
C set up common block for adding points to feature
	FILT_REG = REG
C
C add first point to end of region
	IF (ADDPPT(%VAL(REGPTR(1,REG)+OFFX),REG)) GOTO 1000
C
C get start of region
	CURPPT = REGPTR(1,REG)
C
C make end PPT point to null
	CALL PUTLNG(0,%VAL(REGPTR(3,REG)))
C
C make the region empty (ie, only one PPt in it)
	REGPTR(1,REG) = REGPTR(2,REG)
	CALL PUTLNG(0,%VAL(REGPTR(1,REG)+OFFPREV))	! no back pointer
	REGPTR(3,REG) = 0
C
C initialise filtering
	DO 5, I= 1,3			! get everything into IFF units
	   TOLE(I) = BUNCHMM(I)*SCLFRT
5	CONTINUE
C
	CALL BUNCH_INIT(TOLE,LINWDTH,1.0)
C
100	CONTINUE
C
C has error occured?
	IF (FILT_REG.LE.0) THEN
	   CALL DELPPT(CURPPT)
	   CALL DELREG(REG)
	   GOTO 1000
	ENDIF
C
C and pointer to next PPT
	CALL PUTLNG(%VAL(CURPPT),NEXTPPT)
C
C add point to filtering procedure
	I = 0
	IF (NEXTPPT.EQ.0) I = 1		! last point
	CALL BUNCH_POINT(%VAL(CURPPT+OFFX),%VAL(CURPPT+OFFY),I)
C
C delete this PPT
	CALL FREE_MEM(REG_ZONE,CURPPT,PPTLEN)
C
C move onto next PPT
	IF (NEXTPPT.NE.0) THEN
	   CURPPT = NEXTPPT
	   GOTO 100
	ENDIF
C
C if the last point is same as first, there is only one point in
C region
	IF (REGPTR(1,REG).EQ.REGPTR(3,REG)) GOTO 999
C
C remove last point from end of region, and make first point the
C mean of first and last
	NEXTPPT = REGPTR(3,REG)
C
C point to previous one
	CALL PUTLNG(%VAL(NEXTPPT+OFFPREV),REGPTR(3,REG))
C
C point previous one to dummy one at end
	CALL PUTLNG(REGPTR(2,REG),%VAL(REGPTR(3,REG)))
C
C make dummy at end point back to previos one
	CALL PUTLNG(REGPTR(3,REG),%VAL(REGPTR(2,REG)+OFFPREV))
C
C get coords out of old last, and delete it
	CALL CPYPAK(2,%VAL(NEXTPPT+OFFX),XYL)
	CALL FREE_MEM(REG_ZONE,NEXTPPT,PPTLEN)
C
C get coords out of first, take mean, and put them back
	CALL CPYPAK(2,%VAL(REGPTR(1,REG)+OFFX),XYF)
	XYF(1) = (XYF(1)+XYL(1))*0.5
	XYF(2) = (XYF(2)+XYL(2))*0.5
	CALL CPYPAK(2,XYF,%VAL(REGPTR(1,REG)+OFFX))
C
C finished sucessfully
999	FILTREG = .FALSE.
C
1000	CONTINUE
	FILT_REG = 0			! make sure ADDPTS does not add
					! points to region!!!
	RETURN
	END

