C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-09-11 10:11:12.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION NDJOIN
C
***	IDENT	11SE92
***	MODULE	NDJOIN
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Written					CCB	11-JAN-1985
C
C	LITES2 cartographic editor END JOIN routine
C	Returns FALSE if successful
C
        IMPLICIT NONE
C
	INCLUDE 'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:AUXDEF/
***     PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:PACK/
C
***	COMMON/CMN:CSTRCT/
***	COMMON/CMN:DEFINE/
***	COMMON/CMN:EDGE/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:OIIH/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:STRIKE/
C
C parameters
	LOGICAL		REV,END
	PARAMETER	(REV=.TRUE.)
	PARAMETER	(END=.TRUE.)
C
C working storage
	LOGICAL		TMPFLG
	REAL		MOVXY(3)
	LOGICAL		CHKEDG		! whether to check edge
	INTEGER		OPER
	INTEGER		ATT		! number of attributes at jnd pt
	INTEGER		I
	REAL		TMP
	REAL		DX,DY
C
C function called
	LOGICAL	STRTFT
	LOGICAL	ADDZ
C
	NDJOIN = .TRUE.			! assume failure
C
	IF (.NOT.FO) THEN		! nothing to join to
	   CALL MOAN(MSG_NOFEATURE)
	   GOTO 999
	ENDIF
C
C set up attributes of joined point
	OPER = DEFINITION(P_JOIN)
	IF (OPER.EQ.0) OPER = DEFINITION(P_OTHER) 
C
C Propagating across an edge?
	CHKEDG=(EDGING.AND.PRPING).OR.	! for edgematching
     &	       (FRCING.AND.PRPING.AND.	! for FORCE EDGE
     &	         FRCSXY(1).EQ.CSXY(1).AND.FRCSXY(2).EQ.CSXY(2))
C
C Start off the new feature
	CALL CPYPAK(PAKLEN,IHPAK,COIPAK)
	COIPAK(PAKFLG) = 0		! not deleted
	FLG_GEOCHANGE = .TRUE.		! geometrical change
	IF (STRTFT(IHPAK,IHTC,IHFS,IHAC,IHTH)) THEN
	   CALL COLAPS(121)
	ENDIF
C
C Delete old segments (remove from screen)
	CALL LDSG(IHPAK,.TRUE.)
	CALL LDSG(FOPAK,.TRUE.)
C
C if edgmatching, set up flag for FLUSH to use, that sets the flags
C at the new ends of the feature to be what they were
	IF (EDGING) THEN
	   IF (JOIFST) THEN		! joining to start of FO
	      TMPFLG=FOPAK(PAKFLG).AND.THAFLG
	   ELSE				! joining to end of FO
	      TMPFLG=FOPAK(PAKFLG).AND.THIFLG
	   ENDIF
	   IF (IHVRT.EQ.IHLST) THEN	! joining to end of object
					! in hand
	      OTHFLG=(IHPAK(PAKFLG).AND.THIFLG).OR.TMPFLG
	   ELSE				! joining to start of object
					! in hand
	      OTHFLG=(IHPAK(PAKFLG).AND.THAFLG).OR.TMPFLG
	   ENDIF
	ENDIF
C
C Output points retaining direction of object in hand
	IF (IHVRT.EQ.IHLST) THEN	! join last point of IH
	   IF (PRPING) THEN
	      MOVXY(1)=CSXY(1)-IHXY(1,IHTOP)
	      MOVXY(2)=CSXY(2)-IHXY(2,IHTOP)
	      IF (ZOPT) THEN
	         IF (CSZI.NE.IFF_ABSENT.AND.
     &	             IHZI(IHTOP).NE.IFF_ABSENT) THEN
	            MOVXY(3) = CSXY(3) - IHZ(IHTOP)
	         ELSE
	            CALL PUTLNG(IFF_ABSENT,MOVXY(3))
	         ENDIF
	      ENDIF
	      CALL PRPVRT(IHPAK,IHLST,.NOT.REV,END,MOVXY,CHKEDG,EDGLNE)
	   ELSE
	      CALL ADDVRT(IHPAK,1,IHLST-1,.FALSE.)
	   ENDIF
C
C get attributes for last point of IH
	   CALL GETVRT(IHPAK,IHLST,IHLST)
C
C update the row of attributes
	   ATT = RINATT
C
C apply Z position of cursor, if appropriate
	   IF (ZOPT.AND.CSZI.NE.IFF_ABSENT) THEN
	      IF (ADDZ(CSZI,STR_MAX_ATTR,ATT,RIATTC,RIATTV(1,1)))
     &	                GOTO 999
	   ENDIF
	   CALL LSTARR(OPER,ATT,RIATTC,RIATTV(1,1),.TRUE.)
	   IF (DEFINITION(P_FAR_MOVE) .GT. 0) THEN
	      DX = RIXY(1,1) - CSXY(1)
	      DY = RIXY(2,1) - CSXY(2)
	      IF ((DX**2 + DY**2) .GT. FAR_MOVE_IFF**2) THEN
	         CALL LSTARR(DEFINITION(P_FAR_MOVE),
     &	                     ATT,RIATTC,RIATTV(1,1),.TRUE.)
	      ENDIF
	   ENDIF
C
C maintain visibility of last point of IH
	   IF ((RIFLG(1).AND.1).EQ.0) THEN
	      CALL FLUSH(1)
	      OIENDS = 0		! invisible
	   ENDIF
C
C write cursor position with these attributes
	   CALL ADCORD(CSXY,ATT,RIATTC,RIATTV(1,1))
C
	   IF (JOIFST) THEN		! to first point of FO
	      IF (PRPING) THEN
	         MOVXY(1)=CSXY(1)-FOXY(1,1)
	         MOVXY(2)=CSXY(2)-FOXY(2,1)
	         IF (ZOPT.AND.FO_Z_COL.NE.-1) THEN
	            IF (CSZI.NE.IFF_ABSENT.AND.
     &	                FOATTV(FO_Z_COL,1).NE.IFF_ABSENT) THEN
	               CALL PUTLNG(FOATTV(FO_Z_COL,1),TMP)
	               MOVXY(3) = CSXY(3) - TMP
	            ELSE
	               CALL PUTLNG(IFF_ABSENT,MOVXY(3))
	            ENDIF
	         ENDIF
	         CALL PRPVRT(FOPAK,FOLST,.NOT.REV,.NOT.END,MOVXY,
     &	                                    CHKEDG,EDGLNE)
	      ELSE
	         CALL ADDVRT(FOPAK,2,FOLST,.FALSE.)
	      ENDIF
	   ELSE				! to last point of FO
C
C maintain visibility of last segment of FO
	      CALL GETVRT(FOPAK,FOLST,FOLST)
	      IF ((RIFLG(1).AND.1).EQ.0) THEN
	         CALL FLUSH(1)
	         OIENDS = 0		! invisible
	      ENDIF
	      IF (PRPING) THEN
	         MOVXY(1)=CSXY(1)-FOXY(1,FOTOP)
	         MOVXY(2)=CSXY(2)-FOXY(2,FOTOP)
	         IF (ZOPT.AND.FO_Z_COL.NE.-1) THEN
	            IF (CSZI.NE.IFF_ABSENT.AND.
     &	                FOATTV(FO_Z_COL,FOTOP).NE.IFF_ABSENT) THEN
	               CALL PUTLNG(FOATTV(FO_Z_COL,FOTOP),TMP)
	               MOVXY(3) = CSXY(3) - TMP
	            ELSE
	               CALL PUTLNG(IFF_ABSENT,MOVXY(3))
	            ENDIF
	         ENDIF
	         CALL PRPVRT(FOPAK,FOLST,REV,END,MOVXY,CHKEDG,EDGLNE)
	      ELSE
	         CALL ADDVRT(FOPAK,FOLST-1,1,.FALSE.)
	      ENDIF
	   ENDIF
	ELSE				! join first point of IH
	   IF (JOIFST) THEN		! to first point of FO
	      IF (PRPING) THEN
	         MOVXY(1)=CSXY(1)-FOXY(1,1)
	         MOVXY(2)=CSXY(2)-FOXY(2,1)
	         IF (ZOPT.AND.FO_Z_COL.NE.-1) THEN
	            IF (CSZI.NE.IFF_ABSENT.AND.
     &	                FOATTV(FO_Z_COL,1).NE.IFF_ABSENT) THEN
	               CALL PUTLNG(FOATTV(FO_Z_COL,1),TMP)
	               MOVXY(3) = CSXY(3) - TMP
	            ELSE
	               CALL PUTLNG(IFF_ABSENT,MOVXY(3))
	            ENDIF
	         ENDIF
	         CALL PRPVRT(FOPAK,FOLST,REV,.NOT.END,MOVXY,
     &	                           CHKEDG,EDGLNE)
	      ELSE
	         CALL ADDVRT(FOPAK,FOLST,2,.FALSE.)
	      ENDIF
	   ELSE				! to last point of FO
	      IF (PRPING) THEN
	         MOVXY(1)=CSXY(1)-FOXY(1,FOTOP)
	         MOVXY(2)=CSXY(2)-FOXY(2,FOTOP)
	         IF (ZOPT.AND.FO_Z_COL.NE.-1) THEN
	            IF (CSZI.NE.IFF_ABSENT.AND.
     &	                FOATTV(FO_Z_COL,FOTOP).NE.IFF_ABSENT) THEN
	               CALL PUTLNG(FOATTV(FO_Z_COL,FOTOP),TMP)
	               MOVXY(3) = CSXY(3) - TMP
	            ELSE
	               CALL PUTLNG(IFF_ABSENT,MOVXY(3))
	            ENDIF
	         ENDIF
	         CALL PRPVRT(FOPAK,FOLST,.NOT.REV,END,MOVXY,
     &	                              CHKEDG,EDGLNE)
	      ELSE
	         CALL ADDVRT(FOPAK,1,FOLST-1,.FALSE.)
	      ENDIF
	   ENDIF
C
C maintain visibility of end segment of FO
	   IF (JOIFST) THEN
	      CALL GETVRT(FOPAK,2,2)	! FO reversed, so 2nd point
	   ELSE
	      CALL GETVRT(FOPAK,FOLST,FOLST)
	   ENDIF
	   IF ((RIFLG(1).AND.1).EQ.0) THEN
	      CALL FLUSH(1)
	      OIENDS = 0		! invisible
	   ENDIF
C
C get attributes for first point of IH
	   CALL GETVRT(IHPAK,1,1)
C
C update the row of attributes
	   ATT = RINATT
C
C apply Z position of cursor, if appropriate
	   IF (ZOPT.AND.CSZI.NE.IFF_ABSENT) THEN
	      IF (ADDZ(CSZI,STR_MAX_ATTR,ATT,RIATTC,RIATTV(1,1)))
     &	                GOTO 999
	   ENDIF
	   CALL LSTARR(OPER,ATT,RIATTC,RIATTV(1,1),.TRUE.)
	   IF (DEFINITION(P_FAR_MOVE) .GT. 0) THEN
	      DX = RIXY(1,1) - CSXY(1)
	      DY = RIXY(2,1) - CSXY(2)
	      IF ((DX**2 + DY**2) .GT. FAR_MOVE_IFF**2) THEN
	         CALL LSTARR(DEFINITION(P_FAR_MOVE),
     &	                     ATT,RIATTC,RIATTV(1,1),.TRUE.)
	      ENDIF
	   ENDIF
C
C write cursor position with these attributes
	   CALL ADCORD(CSXY,ATT,RIATTC,RIATTV(1,1))
C
	   IF (PRPING) THEN
	      MOVXY(1)=CSXY(1)-IHXY(1,1)
	      MOVXY(2)=CSXY(2)-IHXY(2,1)
	      IF (ZOPT) THEN
	         IF (CSZI.NE.IFF_ABSENT.AND.
     &	             IHZI(1).NE.IFF_ABSENT) THEN
	            MOVXY(3) = CSXY(3) - IHZ(1)
	         ELSE
	            CALL PUTLNG(IFF_ABSENT,MOVXY(3))
	         ENDIF
	      ENDIF
	      CALL PRPVRT(IHPAK,IHLST,.NOT.REV,.NOT.END,MOVXY,
     &	                     CHKEDG,EDGLNE)
	   ELSE
	      CALL ADDVRT(IHPAK,2,IHLST,.FALSE.)
	   ENDIF
	ENDIF
C
C Terminate feature
	CALL ENDFT
C
C Warn about loss of found object ACs and TCs
	IF (FOAC.NE.0.OR.FOTC.NE.0) CALL INFORM(MSG_ACSLOST)
C
C warn about loss of attributes at joined point
	IF (JOIFST) THEN
	   CALL GETVRT(FOPAK,1,1)
	ELSE
	   CALL GETVRT(FOPAK,FOLST,FOLST)
	ENDIF
	DO 10, I= 1,RINATT
	   IF (RIATTV(I,1).NE.IFF_ABSENT) THEN
	      CALL INFORM(MSG_ATTBTSLOST)
	      CALL INFORM(MSG_ATTBTSLOST2)
	      GOTO 20
	   ENDIF
10	CONTINUE
20	CONTINUE
C
C Remove the old objects completely
	CALL DELFT(FOPAK,FOEF)
	CALL DELFT(IHPAK,IHEF)
C
	NDJOIN = .FALSE.			! success
C
999	CONTINUE
C
C if propagating, and not edgmatching, then stop propagating
C
	IF(.NOT.EDGING.AND.PRPING) PRPING=.FALSE.
	FRCING=.FALSE.				! no longer forcing
	RETURN
        END
