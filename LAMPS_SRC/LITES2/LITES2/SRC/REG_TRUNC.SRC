C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-05-10 11:14:10.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION REG_TRUNC(REG,OFFSET,LINE,OUTSIDE)
C
***     IDENT   10MY96
***     MODULE  REG_TRUNC
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C to cut back the points at the end of a region, so that they are not
C closer than OFFSET from the line.
C
C If the last point of region is on the wrong side of the line, and
C is going towards it, then add the start of the offset line, to get
C back on the rails again.
C
C returns .TRUE. if current region is cut back (or extended),
C FALSE if it is not
C
	IMPLICIT NONE
C
C arguments (input)
C
	INTEGER		REG		! region to truncate
	REAL		OFFSET
	REAL		LINE(2,2)
	LOGICAL		OUTSIDE		! true if shortest distance is
					! before start of line (not in line)
C
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:CONSTS/
***	PARAMETER/CMN:REGPAR/
C
***	COMMON/CMN:MASTER/
***	COMMON/CMN:REGCMN/
C
C w/s
	REAL		AUX(AUXLEN)
	REAL		L1(2,2)
	REAL		XY(2)
	REAL		XYCOORD(2,3)
	INTEGER		NUMBER
	REAL		POINT1(2),POINT2(2)
	INTEGER 	INLIN(2)
	INTEGER 	INARC(2)
	LOGICAL 	TCH
	INTEGER		GT
	INTEGER		I
	INTEGER		ADDR
	REAL		CPROD1
	REAL		LNE(2,2)
	REAL	        COORD(2)
	EQUIVALENCE	(LNE(1,2),COORD(1))
C
C function
	LOGICAL		GENCIR
	REAL		PLDIST
	LOGICAL		INTSCT
C
	REG_TRUNC = .FALSE.
	OUTSIDE = .FALSE.
C
	GT = 2
C
	IF (REGPTR(3,REG).LE.0.OR.
     &	    REGPTR(3,REG).EQ.REGPTR(1,REG)) GOTO 900
C
C get the coordinates of the last point in the region
	CALL CPYPAK(2,%VAL(REGPTR(3,REG)+OFFX),COORD)
C
	IF (PLDIST(COORD,LINE,I).GT.(ABS(OFFSET)-LINWDTH)) GOTO 900
C
	IF (I.EQ.1) GOTO 900	! outside first end
C
C ignore points output so far, until there are two that are far enough
C away
10	CONTINUE
C
C get the coordinates of the second last point in region
	CALL CPYPAK(2,LNE(1,2),LNE(1,1))	! see equivalence
	CALL PUTLNG(%VAL(REGPTR(3,REG)+OFFPREV),ADDR)
	CALL CPYPAK(2,%VAL(ADDR+OFFX),COORD)
	IF (PLDIST(COORD,LINE,I).LT.(ABS(OFFSET)+LINWDTH)) THEN
C
C delete last point in region
	   ADDR = REGPTR(3,REG)
C
C current last is one previous
	   CALL PUTLNG(%VAL(ADDR+OFFPREV),REGPTR(3,REG))
	   IF (ADDR.EQ.REG_PPT_FLAG) REG_PPT_FLAG = REGPTR(3,REG)
C
C make this point to tail of list (an empty PPT)
	   CALL PUTLNG(REGPTR(2,REG),%VAL(REGPTR(3,REG)))
C
C and this tail point back to current end of list
	   CALL PUTLNG(REGPTR(3,REG),%VAL(REGPTR(2,REG)+OFFPREV))
C
C free the space
	   CALL FREE_MEM(REG_ZONE,ADDR,PPTLEN)
	   IF (REGPTR(1,REG).EQ.REGPTR(3,REG)) THEN
	      GOTO 900
	   ELSE
	      GOTO 10
	   ENDIF
C
	ELSEIF (I.EQ.0) THEN
C
C intersect offset line  with last output vector
	   OUTSIDE = .FALSE.
	   CALL OFFSEG(-OFFSET,LINE,L1)
	   IF (INTSCT(LNE,L1,XY,INLIN(1),INLIN(2))) GOTO 900
C
C if end of region (COORD) is on opposite side of LINE from L1, then
C don't try to truncate
	   CPROD1 = (COORD(1)-LINE(1,1))*(LINE(2,2)-LINE(2,1)) -
     &             (LINE(1,2)-LINE(1,1))*(COORD(2)-LINE(2,1))
	   IF ((SIGN(1.0,CPROD1) .EQ. SIGN(1.0,OFFSET))) GOTO 900
	ELSE
C 
C intersect with circle around closest point
	   XYCOORD(1,1) = LINE(1,I)+OFFSET
	   XYCOORD(2,1) = LINE(2,I)
	   XYCOORD(1,2) = LINE(1,I)
	   XYCOORD(2,2) = LINE(2,I)
	   XYCOORD(1,3) = XYCOORD(1,1)
	   XYCOORD(2,3) = LINE(2,I)
	   IF (GENCIR(GT,XYCOORD,AUX)) GOTO 900
	   CALL LINARC(LNE,AUX,NUMBER,POINT1,POINT2,INLIN,INARC,TCH)
C
	   IF (NUMBER.GE.1) THEN
	      IF (INLIN(1).EQ.0) THEN
	         XY(1) = POINT1(1)
	         XY(2) = POINT1(2)
	      ELSE
	         XY(1) = POINT2(1)
	         XY(2) = POINT2(2)
	      ENDIF
	      CALL PLDIST(XY,LINE,I)
	      OUTSIDE = (I .EQ. 1)
	   ELSE
	      GOTO 900
	   ENDIF
	ENDIF
C
C put intersected coordinates into last point of region
	CALL CPYPAK(2,XY,%VAL(REGPTR(3,REG)+OFFX))
	REG_TRUNC = .TRUE.
C
900	RETURN
	END

