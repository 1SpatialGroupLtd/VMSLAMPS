	SUBROUTINE LINARC(LINE,AUX,NUMBER,POINT1,POINT2,INLIN,INARC,TCH)
C
***	MODULE	LINARC
***	IDENT	06MR91
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author  Ron Russell
C
C To find the intersection point of a line segment and an arc
C
C LINE is the line segment (first subscript x or y, second
C subscript point 1 or 2).
C AUX is the auxiliary array containing info about the arc.
C NUMBER returns the number of intersection points (if any)
C POINT1 and POINT2 return the intersecion points, if any.
C INLIN returns the position of the intersection wrt the line
C viz: = -2 outside first point
C      = -1 on first point
C      =  0 within 
C      =  1 on second point
C      =  2 outside second point
C INARC returns the position of the intersection wrt the arc
C viz: = -2 outside first point
C      = -1 on first point
C      =  0 within 
C      =  1 on second point
C      =  2 outside second point
C TCH is TRUE if the line is a tangent to the arc
C
C Algorithm taken from "A programmer's geometry", page 26
	IMPLICIT NONE
C
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:CONSTS/
C
***	COMMON/CMN:MASTER/
C
C arguments
	REAL	LINE(2,2)
	REAL	AUX(AUXLEN)
	INTEGER	NUMBER
	REAL	POINT1(2),POINT2(2)
	INTEGER INLIN(2)
	INTEGER INARC(2)
	LOGICAL TCH
C
C w/s
	REAL*8	X1,Y1,X2,Y2		! answer
	REAL*8	T1,T2
	REAL*8	X0,Y0
	REAL*8	F,G
	REAL*8	FGSQ,FGINV
	REAL*8	ROOT
	REAL*8	XJ0,YJ0
	REAL*8	FYGX,FXGY
	REAL*8  LTDANG			! and as an angle
C
C assume no intersection
	NUMBER = 0
	POINT1(1) = 0.0
	POINT1(2) = 0.0
	POINT2(1) = 0.0
	POINT2(2) = 0.0
	TCH = .FALSE.
C
	X0 = LINE(1,1)			! R*4 -> R*8
	Y0 = LINE(2,1)	
C
	F = DBLE(LINE(1,2)) - DBLE(LINE(1,1))
	G = DBLE(LINE(2,2)) - DBLE(LINE(2,1))
C
C one point line does not cut anything (check for lying on arc later) 
C
	IF (ABS(F).LT.LINWDTH.AND.ABS(G).LT.LINWDTH) THEN
	   GOTO 999
	ENDIF
C
C degenerate arcs do not cut anything
C
	IF (AUX(RADI).LE.0.0) THEN
	   GOTO 999
	ENDIF
C
C can now work out angle limit, without dividing by 0.0
	LTDANG = LINWDTH/AUX(RADI)
C
	FGSQ = F*F + G*G
	XJ0  = DBLE(AUX(XCENI)) - DBLE(LINE(1,1))
	YJ0  = DBLE(AUX(YCENI)) - DBLE(LINE(2,1))
	FYGX = F*YJ0 - G*XJ0
	ROOT = DPROD(AUX(RADI),AUX(RADI))*FGSQ - FYGX*FYGX
C
C check for any intersection
C
	IF (ROOT.LT.-LINWDTH) GOTO 999	! no intersection
C
	FXGY = F*XJ0 + G*YJ0
C
C check for tangent
C
	IF (ROOT.LT.LINWDTH) THEN
	   TCH = .TRUE.
	   T1 = FXGY/FGSQ
	   X1 = X0 + F*T1
	   Y1 = Y0 + G*T1
	   NUMBER = 1
	   X2 = X1
	   Y2 = Y1
	ELSE
	   ROOT = SQRT(ROOT)
	   FGINV = 1.0/FGSQ
	   T1 = (FXGY - ROOT)*FGINV
	   T2 = (FXGY + ROOT)*FGINV
	   NUMBER = 2
	   X1 = X0 + F*T1
	   Y1 = Y0 + G*T1
	   X2 = X0 + F*T2
	   Y2 = Y0 + G*T2
	ENDIF
C
C output results
C
	IF (NUMBER.GT.0) THEN
C
C check if points are in line
C
C first point
C
	   IF (ABS(X1-X0).LE.LINWDTH.AND.ABS(Y1-Y0).LE.LINWDTH) THEN
	      INLIN(1) = -1			! on first end
	   ELSEIF (ABS(X1-LINE(1,2)).LE.LINWDTH.AND.
     &	           ABS(Y1-LINE(2,2)).LE.LINWDTH) THEN
	      INLIN(1) = 1			! on second end
	   ELSEIF (T1.LT.0.0) THEN
	      INLIN(1) = -2			! outside first end
	   ELSEIF (T1.GT.1.0) THEN
	      INLIN(1) = +2			! outside second end
	   ELSE
	      INLIN(1) = 0			! within line
	   ENDIF
C
C now for second point
C
	   IF (NUMBER.EQ.1) THEN
	      INLIN(2) = INLIN(1)
	   ELSE
	      IF (ABS(X2-X0).LE.LINWDTH.AND.ABS(Y2-Y0).LE.LINWDTH) THEN
	         INLIN(2) = -1			! on first end
	      ELSEIF (ABS(X2-LINE(1,2)).LE.LINWDTH.AND.
     &	              ABS(Y2-LINE(2,2)).LE.LINWDTH) THEN
	         INLIN(2) = 1			! on second end
	      ELSEIF (T2.LT.0.0) THEN
	         INLIN(2) = -2			! outside first end
	      ELSEIF (T2.GT.1.0) THEN
	         INLIN(2) = +2			! outside second end
	      ELSE
	         INLIN(2) = 0			! within line
	      ENDIF
	   ENDIF
C
C check if points are in arc
C
C first point
C
	   CALL PTINARC(AUX,X1,Y1,INARC(1),LTDANG)
C
C second point
C
	   IF (NUMBER.EQ.1) THEN
	      INARC(2) = INARC(1)
	   ELSE
	      CALL PTINARC(AUX,X2,Y2,INARC(2),LTDANG)
	   ENDIF
C
C return intersection points
C
	   IF (NUMBER.EQ.1) THEN
	      POINT1(1) = X1
	      POINT1(2) = Y1
	      POINT2(1) = X1
	      POINT2(2) = Y1
	   ELSE
	      POINT1(1) = X1
	      POINT1(2) = Y1
	      POINT2(1) = X2
	      POINT2(2) = Y2
	   ENDIF
	ENDIF
C
999	RETURN
	END
