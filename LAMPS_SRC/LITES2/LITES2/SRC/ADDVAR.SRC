C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-02-06 12:39:42.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE ADDVAR
C
***	IDENT	06FE92
***	MODULE	ADDVAR
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					CCB	 8-Jan-1986
C
C Check a user variable name and add it to the command table
C
	IMPLICIT NONE
C
	INCLUDE	'($DSCDEF)'		! descriptor definitions
***     PARAMETER/CMN:MOANMESS/
C
***	COMMON/CMN:DOUT/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:VARIABLE/
C
C Functions called
	INTEGER*4	ADDNAM		! adds macro name to table
	LOGICAL		CHKCHS		! checks for valid characters
	INTEGER*2	ARGSPC		! specify command arguments
	INTEGER		LIB$GET_VM
	BYTE		GET_VARBYTE
	INTEGER*4	GET_VARLONG
C
C Local Variables
C
	INTEGER*4	CMD		! new command number
	INTEGER*2	RESPEC		! command arg specifier
	INTEGER		LENGTH		! memory length
	INTEGER		OK
	INTEGER		ADDR
C
C Check for invalid characters
	IF (CHKCHS(DVAR,DVARL).OR.DVARL.GT.FSV) THEN
	   CALL MOAN(MSG_ILLEGNAME,'variable',DVAR(:DVARL))
	   GOTO 999
	ENDIF
C
C Add name if space
C
C Find a free variable descriptor
	DO 10 CMD=1,MAXVAR
	   IF (GET_VARBYTE(%VAL(VAR_DESC_ADDRESS),3,CMD).EQ.0) GOTO 20
10	CONTINUE
	CALL MOAN(MSG_TOTALDEF,'variables',MAXVAR)
	CALL LEARN(MSG_INCREASEMAX,'variables',MAXVAR_LOG_NAME)
	GOTO 999
C
20	CALL PUT_VARLONG(%VAL(VAR_DESC_ADDRESS),1,CMD,0)	! zero entire
	CALL PUT_VARLONG(%VAL(VAR_DESC_ADDRESS),2,CMD,0)	! descriptor
C
C obtain dynamic space for non-simple types (i.e. doubles, and arrays)
	IF (GOT_VARARG.OR.DSECN.EQ.4) THEN
	   IF (DSECN.LE.2) THEN
	      LENGTH = 4	! integers and reals
	   ELSE
	      LENGTH = 8	! char descriptors and doubles
	   ENDIF
	   IF (GOT_VARARG) LENGTH = LENGTH*VARARG
C
C get virtual memory (don't use GET_MEM, as this gives better message)
	   OK = LIB$GET_VM(LENGTH,ADDR,VAR_ZONE)
	   IF (.NOT.OK) THEN		! failed
	      CALL NASTY(MSG_NOVARMEM,DVAR(:DVARL))
	      CALL LITES2_SIGNAL(OK)
	      GOTO 999
	   ENDIF
	   CALL PUT_VARLONG(%VAL(VAR_DESC_ADDRESS),2,CMD,ADDR)
C
C initialise the space
	   IF (DSECN.EQ.3) THEN		! char array
	      DO 100 OK=1,VARARG
	         CALL INIDSC(%VAL(ADDR))
	         ADDR = ADDR+8
100	      CONTINUE
C
C restore in case needed below
	      ADDR = GET_VARLONG(%VAL(VAR_DESC_ADDRESS),2,CMD)   
	   ELSE
	      CALL VIOCLR(%VAL(ADDR),LENGTH)
	   ENDIF
	ENDIF
C
C add the name
	CALL SELTAB(VARSAV)		! select variable cmd table
	IF (GOT_VARARG) THEN
	   RESPEC = ARGSPC(
     & 1,     0,.FALSE.,.FALSE.,.FALSE.,.FALSE.,.FALSE.,.FALSE.,.FALSE.)
C NUMINT,NUMREA, LOGARG, STRARG, CHRARG, ARGFUL, PRMEQU, PRMIEQ, PRMCOM
C
	   CMD = ADDNAM(DVAR,DVARL,CMD,RESPEC)
	ELSE
	   CMD = ADDNAM(DVAR,DVARL,CMD)
	ENDIF
	IF (CMD .LE. 0) THEN
	   IF (GOT_VARARG.OR.DSECN.EQ.4) CALL FREE_MEM(VAR_ZONE,LENGTH,ADDR)
	   CALL ERRDEF(CMD,'variable')	! output message
	ELSE
C
C if declaring an array, put length in first word
	   IF (GOT_VARARG)
     &	         CALL  PUT_VARLONG(%VAL(VAR_DESC_ADDRESS),1,CMD,VARARG)
C
C put our internal variable type number into the DTYPE field
C 1 integer, 2 real, 3 char, 4 double, 5 char array
	   CALL PUT_VARBYTE(%VAL(VAR_DESC_ADDRESS),
     &	                     3,CMD,DSECN) ! DSC$B_DTYPE field
C
C Set class to 'dynamic' for character type
	   IF (DSECN.EQ.3) THEN
	      IF (GOT_VARARG)        		! char array
     &	            CALL PUT_VARBYTE(%VAL(VAR_DESC_ADDRESS),3,CMD,5) 
	      CALL PUT_VARBYTE(%VAL(VAR_DESC_ADDRESS),4,CMD,DSC$K_CLASS_D) 
	   ENDIF
C
C table should be checked for duplicates next time it is accessed
C if variable has been added without checking its existance
	   IF (.NOT.CHKOPT) CHCK_VARTAB = -1
	ENDIF
	CALL SAVTAB(VARSAV)		! save variable cmd table
C
999	RETURN
	END
