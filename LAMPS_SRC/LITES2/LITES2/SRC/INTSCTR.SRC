	LOGICAL FUNCTION INTSCTR(LINE1,LINE2,POINT,IN1,IN2)
C
***	MODULE	INTSCTR
***	IDENT	11DE89
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author  Clarke Brunt
C
C To find the intersection point of two line segments
C
C LINE1 is the first line segment (first subscript x or y, second
C subscript point 1 or 2).
C LINE2 is the second line segment.
C POINT returns the intersecion point, if any.
C IN1 and IN2 return 0 if the intersection is outside the respective
C line segment, -1 if inside, 1 if on first end, 3 if on second.
C (This strange choice would allow testing as a logical if wanted)
C LIMIT is the width of a line, to be used to determine if a point
C lies on a line
C
C The function returns TRUE iff the lines are parallel
C
	IMPLICIT NONE
C
***	COMMON/CMN:MASTER/
C
C arguments
	REAL	LINE1(2,2)
	REAL	LINE2(2,2)
	REAL	POINT(2)
	INTEGER	IN1
	INTEGER	IN2
C
C w/s
	REAL*8	DX1,DY1,DX2,DY2		! differences
	REAL*8	DX12,DY12
	REAL*8	DET
	REAL*8	S1,S2
	REAL*8	DST1,DST2
	REAL*8	LTD			! a small number
	PARAMETER (LTD=1E-6)
C
C assume lines parallel
	INTSCTR = .TRUE.
C
C calculate the differences
	DX1 = DBLE(LINE1(1,2)) - DBLE(LINE1(1,1))
	DY1 = DBLE(LINE1(2,2)) - DBLE(LINE1(2,1))
	DX2 = DBLE(LINE2(1,2)) - DBLE(LINE2(1,1))
	DY2 = DBLE(LINE2(2,2)) - DBLE(LINE2(2,1))
C
C and line lengths
	DST1 = SQRT(DX1**2+DY1**2)
	DST2 = SQRT(DX2**2+DY2**2)
C
C calculate cross product (determinant)
	DET = DX1*DY2-DY1*DX2
C
C if too small, then the lines are parallel
	IF (ABS(DET).EQ.0.0) GOTO 999	! prevent zero-divide
	IF (ABS(DET)/(DST1*DST2).LT.LTD) GOTO 999
C
C calculate fractional distances along vectors of the intersection point
	DX12 = DBLE(LINE2(1,1)) - DBLE(LINE1(1,1))
	DY12 = DBLE(LINE2(2,1)) - DBLE(LINE1(2,1))
	S1 = (DY2*DX12-DX2*DY12)/DET
	S2 = (DY1*DX12-DX1*DY12)/DET
C
C calculate actual intersection
	DX1=DX1*S1
	DY1=DY1*S1
	POINT(1) = DBLE(LINE1(1,1)) + DX1
	POINT(2) = DBLE(LINE1(2,1)) + DY1
C
C and set our flags according to whether within line segments or not
	IF (S1.LT.0.5) THEN
	   IF (ABS(DST1*S1).LE.LINWDTH) THEN
	      IN1 = 1				! on end
	   ELSEIF (S1.GT.0.0) THEN
	      IN1 = -1				! within line
	   ELSE
	      IN1 = 0				! outside line
	   ENDIF
	ELSEIF (S1.GE.0.5) THEN
	   IF (ABS(DST1*(1.0-S1)).LE.LINWDTH) THEN
	      IN1 = 3				! on end
	   ELSEIF (S1.LT.1.0) THEN
	      IN1 = -1				! within line
	   ELSE
	      IN1 = 0				! outside line
	   ENDIF
	ENDIF
C
	IF (S2.LT.0.5) THEN
	   IF (ABS(DST2*S2).LE.LINWDTH) THEN
	      IN2 = 1				! on end
	   ELSEIF (S2.GT.0.0) THEN
	      IN2 = -1				! within line
	   ELSE
	      IN2 = 0				! outside line
	   ENDIF
	ELSEIF (S2.GE.0.5) THEN
	   IF (ABS(DST2*(1.0-S2)).LE.LINWDTH) THEN
	      IN2 = 3				! on end
	   ELSEIF (S2.LT.1.0) THEN
	      IN2 = -1				! within line
	   ELSE
	      IN2 = 0				! outside line
	   ENDIF
	ENDIF
C
	INTSCTR = .FALSE.			! valid intersection
C
999	RETURN
	END
