C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1999-05-12 15:52:56.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        SUBROUTINE DOROTA
C
***     IDENT   12MY99
***     MODULE  DOROTA
C
C       Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C       Written                                 RWR	 2-Jan-1985
C
C	LITES2 cartographic editor ROTATE command.
C
        IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:CONSTS/		! values for PI & TWOPI
***	PARAMETER/CMN:CTXS/
***	PARAMETER/CMN:END/		! possible values for NDMODE
***     PARAMETER/CMN:MOANMESS/         ! moan constants
***	PARAMETER/CMN:PACK/
***	PARAMETER/CMN:STAPAR/
C
***	COMMON/CMN:CSTRCT/
***	COMMON/CMN:CTXS/
***	COMMON/CMN:DEFINE/
***	COMMON/CMN:DRAWIN/		! drawing controls
***     COMMON/CMN:DOUT/                ! cmd dec. output
***	COMMON/LSL$CMNFRT:FRTCOM/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:MODIFY/
***	COMMON/CMN:OIIH/		! current construction
***	COMMON/CMN:RFCTRL/
***	COMMON/CMN:STATE/
***	COMMON/CMN:STRIKE/
C
C Functions called
	LOGICAL		COIDLE
	LOGICAL		RUBISH
C
C Local Variables
	EXTERNAL	NASTY
	REAL		DXS,DYS		! differences in X and Y
	REAL		TMPXY(2)	! temporary values for arithmetic
	REAL		DANG		! difference in angle
	REAL		SDANG,CDANG	! its COS and SIN
	REAL		TMPANG		! temporary value of angle
	REAL		TCOANG		! temporary value of COIANG
	INTEGER		I		! loop counter
	INTEGER*4	ADDR		! address of start of CTX
	INTEGER*4	STAADR,FINADR	! adreesses of first and last CTX
	INTEGER		OPER
	INTEGER		DUMMY
C
C can only rotate text and orientated and scaled symbols
	IF (SINDEX.EQ.STATE_MODIFY) THEN
	   IF (COIPAK(PAKGT).EQ.UNOTYP) THEN
	      CALL MOAN(MSG_UNORIENT,COIPAK(PAKFC))
	      GOTO 900
	   ENDIF
	ELSE
	   IF (FOPAK(PAKGT).EQ.UNOTYP) THEN
	      CALL MOAN(MSG_UNORIENT,FOPAK(PAKFC))
	      GOTO 900
	   ENDIF
	ENDIF
C
C if not in modify state, get into it
	IF (SINDEX.NE.STATE_MODIFY) THEN
	   IF (COIDLE(.TRUE.)) GOTO 900		! delete found object
						! on completion
	ENDIF
C
C compute angle and size from aligned symbol
	IF (COIPAK(PAKGT).EQ.SCATYP) THEN
	   DXS=COIXY(1,3)-COIXY(1,2)
	   DYS=COIXY(2,3)-COIXY(2,2)
	   DIST=SQRT(DXS**2+DYS**2)
	   COIANG=ATAN2(DYS,DXS)
	   IF (COIANG.LT.0.0) COIANG=COIANG+TWOPI
	ENDIF
C
C if doing anything else that involves rotating at the moment, stop it
	IF (NDMODE.NE.END_CONSTRUCT.AND.NDMODE.NE.END_MOVE) THEN
	   IF (NDMODE.EQ.END_STRETCH) CALL FRECUR
	   NDMODE=END_CONSTRUCT
	   RUBLIN(1) = .FALSE.
	   RUBCHG = .TRUE.
	ENDIF
C
C For texts, when completing rotation here (ie not ROTATE CURSOR),
C get first and last CTX to look at. If dealing with a text component,
C may only want to access one
C
	IF (COIPAK(PAKGT).EQ.TEXTYP.AND.(DSECN.EQ.1.OR.DSECN.EQ.2)) THEN
	   IF (SUBTXT) THEN
	      STAADR = COICTXD(CTXD_HOME)
	      FINADR = COICTXD(CTXD_HOME)
	   ELSE
	      STAADR = COICTXD(CTXD_FSTCTX)
	      FINADR = COICTXD(CTXD_LSTCTX)
	   ENDIF
	ENDIF
C
C this is classed as a transformation (in terms of operations)
	OPER = DEFINITION(P_TRANSFORM)
	IF (OPER.EQ.0) OPER = DEFINITION(P_OTHER)
C
C Dispatch according to secondary command
	GOTO (100,200,300), DSECN
C
C Secondary command number out of range
	IF (DSECN.EQ.0) GOTO 300	! Default is ROTATE CURSOR
	CALL MSGCMD(NASTY,MSG_ERRSECIND)
	GOTO 999
C
C====================================================================
C ROTATE BY
C
100	CONTINUE
	DANG = DREALS(1)*PI/180.0 
C
C compute orientation for texts, as required
C This may move a locating point out of the limits of the map, so
C two passes are made through the CTXs; the first just checks the
C coordinates
C
	IF (COIPAK(PAKGT).EQ.TEXTYP) THEN
	   DO 120, I=1,2
	      ADDR = STAADR			! initialise loop
110	      CONTINUE
C
C get existing values
	      CALL PUTLNG(%VAL(ADDR+CTX_O_RO),TMPANG)
	      CALL PUTLNG(%VAL(ADDR+CTX_O_X),TMPXY(1))
	      CALL PUTLNG(%VAL(ADDR+CTX_O_Y),TMPXY(2))
C
C update angle
	      TMPANG = TMPANG + DANG
115	      IF (TMPANG.LT.0.0) THEN
	         TMPANG = TMPANG + TWOPI
	         GOTO 115
	      ELSEIF (TMPANG.GE.TWOPI) THEN
	         TMPANG = TMPANG - TWOPI
	         GOTO 115
	      ENDIF
C
C update coordinates
	      DXS = TMPXY(1)-COIXY(1,2)
	      DYS = TMPXY(2)-COIXY(2,2)
	      TMPXY(1) = COIXY(1,2) + COS(DANG)*DXS - SIN(DANG)*DYS
	      TMPXY(2) = COIXY(2,2) + SIN(DANG)*DXS + COS(DANG)*DYS
C
C either check the values, or put back updated ones
	      IF (I.EQ.2) THEN
	         CALL PUTLNG(TMPANG,%VAL(ADDR+CTX_O_RO))
	         CALL PUTLNG(TMPXY(1),%VAL(ADDR+CTX_O_X))
	         CALL PUTLNG(TMPXY(2),%VAL(ADDR+CTX_O_Y))
C
C update attributes for this point
	         CALL LSTARR(%VAL(ADDR+CTX_O_ATTR),CONATT,
     &	                           COATTC,COATTV,.FALSE.)
	         CALL LSTARR(OPER,CONATT,COATTC,COATTV,.TRUE.)
	         CALL ARRLST(CONATT,COATTC,COATTV,
     &                              %VAL(ADDR+CTX_O_ATTR),DUMMY)
	      ELSE
	         IF (RUBISH(TMPXY)) THEN		! invalid point
	            CALL INFORM(MSG_ROTOUTRANGE)
	            GOTO 900
	         ENDIF
	      ENDIF
C
C try next CTX?
	      IF (ADDR.NE.FINADR) THEN
	         CALL PUTLNG(%VAL(ADDR),ADDR) ! next pointer
	         GOTO 110
	      ENDIF
120	   CONTINUE
	ELSE
	   CALL LSTARR(OPER,COINATT,COIATTC,COIATTV(1,2),.TRUE.)
	ENDIF
C
C update COIANG, as new value is valid
C
	COIANG=COIANG + DANG
130	IF (COIANG.LT.0.0) THEN			! now normalise
	   COIANG=COIANG+TWOPI
	   GOTO 130
	ELSEIF(COIANG.GE.TWOPI) THEN
	   COIANG=COIANG-TWOPI
	   GOTO 130
	ENDIF
	GOTO 260
C
C========================================================================
C ROTATE TO
C
200	CONTINUE
	TCOANG = DREALS(1)*PI/180.0
210	IF (TCOANG.LT.0.0) THEN			! now normalise
	   TCOANG=TCOANG+TWOPI
	   GOTO 210
	ELSEIF(TCOANG.GE.TWOPI) THEN
	   TCOANG=TCOANG-TWOPI
	   GOTO 210
	ENDIF
C
C compute orientation for texts, as required
C This may move a locating point out of the limits of the map, so
C two passes are made through the CTXs; the first just checks the
C coordinates
C
	IF (COIPAK(PAKGT).EQ.TEXTYP) THEN
	   DANG = TCOANG - COIANG		! difference in angle
	   SDANG = SIN(DANG)
	   CDANG = COS(DANG)
	   DO 230, I=1,2
	      ADDR = STAADR			! initialise loop
220	      CONTINUE
C
C get existing of coordinate
	      CALL PUTLNG(%VAL(ADDR+CTX_O_X),TMPXY(1))
	      CALL PUTLNG(%VAL(ADDR+CTX_O_Y),TMPXY(2))
C
C update coordinates
	      DXS = TMPXY(1)-COIXY(1,2)
	      DYS = TMPXY(2)-COIXY(2,2)
	      TMPXY(1) = COIXY(1,2) + CDANG*DXS - SDANG*DYS
	      TMPXY(2) = COIXY(2,2) + SDANG*DXS + CDANG*DYS
C
C either check the values, or put back updated ones
	      IF (I.EQ.2) THEN
	         CALL PUTLNG(TCOANG,%VAL(ADDR+CTX_O_RO))
	         CALL PUTLNG(TMPXY(1),%VAL(ADDR+CTX_O_X))
	         CALL PUTLNG(TMPXY(2),%VAL(ADDR+CTX_O_Y))
C
C update attributes for this point
	         CALL LSTARR(%VAL(ADDR+CTX_O_ATTR),CONATT,
     &	                           COATTC,COATTV,.FALSE.)
	         CALL LSTARR(OPER,CONATT,COATTC,COATTV,.TRUE.)
	         CALL ARRLST(CONATT,COATTC,COATTV,
     &                              %VAL(ADDR+CTX_O_ATTR),DUMMY)
	      ELSE
	         IF (RUBISH(TMPXY)) THEN		! invalid point
	            CALL INFORM(MSG_ROTOUTRANGE)
	            GOTO 900
	         ENDIF
	      ENDIF
C
C try next CTX?
	      IF (ADDR.NE.FINADR) THEN
	         CALL PUTLNG(%VAL(ADDR),ADDR) ! next pointer
	         GOTO 220
	      ENDIF
230	   CONTINUE
	ELSE
	   CALL LSTARR(OPER,COINATT,COIATTC,COIATTV(1,2),.TRUE.)
	ENDIF
C
C update COIANG, as new value is valid
C
	COIANG = TCOANG
C
C******************************************************************
C ROTATE BY and ROTATE TO join up here
C
C set MODMOD for RFDRAW
C
260	MODMOD=.TRUE.
	FLG_GEOCHANGE = .TRUE.		! geometrical change
C
C  compute alignment if required
C
	IF (COIPAK(PAKGT).EQ.SCATYP) THEN
	   COIXY(1,3)=COIXY(1,2)+COS(COIANG)*DIST
	   COIXY(2,3)=COIXY(2,2)+SIN(COIANG)*DIST
	ENDIF
C
	GOTO 999
C
C========================================================================
C ROTATE CURSOR
C
300	CONTINUE
C
C get a distance, to allow old coords stored in MODIFY to be computed
C (the actual distance only matters for scaled symbols, and we have a 
C good distance for these already)
C
	IF (COIPAK(PAKGT).EQ.TEXTYP) THEN
	   DIST = MAX(ABS(COIAUX(MAXXI)),ABS(COIAUX(MINXI)))
	ENDIF
C
	IF (DIST.LE.0.0) DIST=FRTSIZ*SCLFRT	! doesn't really matter
						! if FRTCOM is corrupted
	IF (DIST.LE.0.0) THEN			! still no distance,
	   IF (COIPAK(PAKGT).EQ.TEXTYP) THEN	! so use default
	      DIST=DFTSIZ*SCLFRT			! text
	   ELSE
	      DIST=DFSSIZ*SCLFRT			! symbol
	   ENDIF
	ENDIF
C
C set values in old symbol positions, ready for MODCHK
C
	MODCXY(1,2)=COIXY(1,2)+COS(COIANG)*DIST
	MODCXY(2,2)=COIXY(2,2)+SIN(COIANG)*DIST
C
C position cursor on this point
C 
	CSXY(1)=MODCXY(1,2)
	CSXY(2)=MODCXY(2,2)
	CSSTIL=.FALSE.
	FONLIN=.FALSE.
C
C set up rubber band line
	RUBCHG = .TRUE.
	RUBLIN(1) = .TRUE.
	RUBARR(1,1) = COIXY(1,2)
	RUBARR(2,1) = COIXY(2,2)
C
C set MODMOD for RFDRAW
C
	MODMOD=.TRUE.
	FLG_GEOCHANGE = .TRUE.		! geometrical change
C
C set flag to let MODCHK update any attributes
	FLG_MOD_TRANSFORM = .TRUE.
C
C now expecting an END command
C
	IF (NDMODE.EQ.END_STRETCH) CALL FRECUR		! implicit END
	NDMODE=END_ROTATE
	GOTO 999
C
900	CALL IGNCMD
C
999	RETURN
        END
