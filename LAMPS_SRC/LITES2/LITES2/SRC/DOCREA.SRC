C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-03-16 16:13:56.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE DOCREA
C
***	IDENT   16MR92
***	MODULE  DOCREA
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Written					CCB	20-NOV-1984
C
C	LITES2 cartographic editor CREATE command.
C
	IMPLICIT NONE
C
	INCLUDE	'($DSCDEF)'
	INCLUDE	'($LNMDEF)'
C
***     PARAMETER/CMN:CHARS/
***	PARAMETER/CMN:MOANMESS/		! moan constants
***	PARAMETER/LSL$CMNLSL:READSTR/
***	PARAMETER/CMN:STAPAR/
C
***	COMMON/CMN:DOUT/		! cmd dec. output
***	COMMON/CMN:GLOBAL/
***	COMMON/CMN:LAYERS/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:STATE/
***	COMMON/CMN:WORKS/
C
C Functions called
	INTEGER	FNDOVR			! look up layer number
	INTEGER	SYS$CREMBX
	INTEGER	SYS$CRELNM,SYS$DELLNM
	INTEGER	LIB$GET_VM_PAGE
	INTEGER	READSTR
	LOGICAL	RDCHS
	INTEGER	LIB$SGET1_DD		! use LIB$ rather than STR$
					! as it returns errors
					! rather than signalling them
	INTEGER	ABORTAST
C
C Local Variables
	INTEGER	OVR			! layer index
	INTEGER	OK,I
	BYTE	CH
	INTEGER	LENGTH(2)
	INTEGER*2	PTR
	INTEGER*2	CHAN		! IO channel
C
C note - use dynamic strings, and the system service string handling,
C as these cope better with zero length strings than FORTRAN string
C handling.
	INTEGER		STRING(2,2)	! dynamic strings
	BYTE		STR1B(4)
	BYTE		STR2B(4)
	EQUIVALENCE	(STR1B,STRING(1,1)),(STR2B,STRING(1,2))
	DATA		STR1B/0,0,0,DSC$K_CLASS_D/
	DATA		STR2B/0,0,0,DSC$K_CLASS_D/
	INTEGER*4	LNMLST(4)
	INTEGER*2	LNMLSTW(8)
	EQUIVALENCE	(LNMLST,LNMLSTW)
C
	EXTERNAL MOAN,NASTY
C
C Despatch according to secondary command
	GOTO (100,200,300,400,500), DSECN
C
C Secondary command number out of range
	CALL MSGCMD(NASTY,MSG_ERRSECIND)
	GOTO 999
C
C Secondary command LAYER
100	IF (SINDEX.EQ.STATE_INITIAL) THEN
	   CALL MSGCMD(MOAN,MSG_CMDNOTVALID)
	   GOTO 999
	ENDIF
C
	IF (DINTS(1).LT.0.OR.DINTS(1).GT.TOPLAY) THEN
	   CALL MOAN(MSG_ILLEGLLAYER,TOPLAY)
	   GOTO 999
	ENDIF
C
	OVR = FNDOVR(DINTS(1))		! returns internal number
	IF (OVR.GE.0) THEN
C
C layer already exists
	   CALL MOAN(MSG_LAYEXIST,DINTS(1))
	   GOTO 999
	ENDIF
C
C layer doesn't exist, so create it
	OVR = -OVR-2			! convert to new internal number
	IF (OVR.LT.0) THEN
	   CALL MOAN(MSG_TOOMANYLAY)	! no space for layer
	   GOTO 999
	ENDIF
C
	OVNOS(OVR) = DINTS(1)		! allocate new slot
	OVSEL(OVR) = .TRUE.		! selected
	GOTO 1000
C
C Secondary command MAILBOX
200	IF (DNINT.GT.0 .EQV. DSTRIN) THEN
	   CALL MOAN(MSG_MBXARGS)
	   GOTO 999
	ENDIF
C
	IF (DNINT.GT.0) THEN
	   I = DINTS(1)
	   IF (I.LE.0.OR.I.GT.AUX_LINES) THEN
	      CALL MOAN(MSG_ILLEGLMBX,AUX_LINES)
	      GOTO 999
	   ENDIF
	   IF (AUX_ACTIVE(I)) THEN
	      CALL MOAN(MSG_MBXINUSE,AUX_NAME(I)(:AUX_NAME_LEN(I)))
	      GOTO 999
	   ENDIF
	   OK = SYS$CREMBX(,AUX_CHANNEL(I),,,,,
     &				AUX_NAME(I)(:AUX_NAME_LEN(I)))
	   IF (.NOT.OK) THEN
	      CALL MOAN(MSG_ERRCREMBX,AUX_NAME(I)(:AUX_NAME_LEN(I)))
	      CALL LITES2_SIGNAL(OK)
	      GOTO 999
	   ENDIF
	   AUX_ACTIVE(I) = .TRUE.
	ELSE		! must be a string
	   CALL STR$UPCASE(DSTR(:DSTRL),DSTR(:DSTRL))
	   OK = SYS$CREMBX(,CHAN,,,,,DSTR(:DSTRL)) ! not interested in channel
	   IF (.NOT.OK) THEN
	      CALL MOAN(MSG_ERRCREMBX,DSTR(:DSTRL))
	      CALL LITES2_SIGNAL(OK)
	      GOTO 999
	   ENDIF
	ENDIF
	GOTO 1000
C
C Secondary command MEMORY
C Obtain pages of memory and then return them to the free pool.
C The intention is to prevent dynamic allocation later from needing
C new pages at the top of the address space.
300	IF (DINTS(1).LE.0) THEN
	   CALL MOAN(MSG_ARGRNG)
	   GOTO 999
	ENDIF
	OK = LIB$GET_VM_PAGE(DINTS(1),I)
	IF (.NOT.OK) THEN
	   CALL MOAN(MSG_INSVIRMEM)
	   GOTO 999
	ENDIF
	IF (DIAOPT) CALL WRITEF('Memory allocated at %P0%X8',I)
	CALL LIB$FREE_VM_PAGE(DINTS(1),I)
	GOTO 1000
C
C Secondary command LOGICAL
400	CALL DCPSAV(PTR)			! save TXTBUF pointer
	CALL SETAUX(%REF(DSTR),DSTRL)		! set auxiliary buffer
C
C use dynamic string descriptors, as strings may be empty - eg variables
C and character variables subrng in these circumstances
	DO 410 I=1,2
	   IF (RDCHS(CH)) THEN
	      LENGTH(I) = 0
	      CALL STR$FREE1_DX(STRING(1,I))	! make empty
	      GOTO 410
	   ENDIF
	   OK = LIB$SGET1_DD(DSM,STRING(1,I))
	   IF (.NOT.OK) THEN
	      CALL LITES2_SIGNAL(OK)
	      GOTO 499
	   ENDIF
	   IF (CH.EQ.DQOT) THEN			! double quoted string
	      LENGTH(I) = READSTR(STRING(1,I),DQOT,ON_CHAR2,.FALSE.)
	   ELSE					! terminate by space
	      CALL BSCH
	      LENGTH(I) = READSTR(STRING(1,I),SPACE,ON_SPACE,.TRUE.)
	      CALL STR$UPCASE(STRING(1,I),STRING(1,I))
	   ENDIF
C
C truncate
	   CALL STR$LEFT(STRING(1,I),STRING(1,I),LENGTH(I))
410	CONTINUE
C
	IF (.NOT.RDCHS(CH)) THEN
	   CALL MOAN(MSG_ILLEGALTERM,CH)
	   GOTO 499	   			! something left on line
	ENDIF
C
	IF (LENGTH(1).EQ.0) THEN
	   CALL MOAN(MSG_IVLOGNAM)
	   GOTO 499
	ENDIF
C
	IF (LENGTH(2).EQ.0) THEN
	   OK = SYS$DELLNM('LNM$PROCESS',STRING(1,1),)
	   IF (.NOT.OK) THEN
	      CALL MOAN(MSG_DELLNM,STRING(1,1))
	      CALL LITES2_SIGNAL(OK)
	      GOTO 499
	   ENDIF
	ELSE
	   LNMLSTW(1) = LENGTH(2)
	   LNMLSTW(2) = LNM$_STRING
	   LNMLST(2) = STRING(2,2)
	   LNMLST(3) = 0
	   LNMLST(4) = 0
	   OK = SYS$CRELNM(,'LNM$PROCESS',STRING(1,1),,LNMLST)
	   IF (.NOT.OK) THEN
	      CALL MOAN(MSG_CRELNM,STRING(1,1),STRING(1,2))
	      CALL LITES2_SIGNAL(OK)
	      GOTO 499
	   ENDIF
	ENDIF
C
499	CALL STR$FREE1_DX(STRING(1,1))
	CALL STR$FREE1_DX(STRING(1,2))
	CALL BSLN				! restore TXTBUF
	CALL DCPSET(PTR)
	IF (MOANED) GOTO 999
	GOTO 1000
C
C Secondary command ABORT_MAILBOX
500	IF (.NOT.DSTRIN) THEN
	   DSTR = 'LSL$LITES2ABORT'
	   DSTRL = 15
	ENDIF
	CALL STR$UPCASE(DSTR(:DSTRL),DSTR(:DSTRL))
	OK = SYS$CREMBX(,CHAN,,,,,DSTR(:DSTRL))	! not interested in channel
	IF (.NOT.OK) THEN
	   CALL MOAN(MSG_ERRCREMBX,DSTR(:DSTRL))
	   CALL LITES2_SIGNAL(OK)
	   GOTO 999
	ENDIF
C
C now set up a write attention AST on the mailbox
C Use the AST routine to do this, but disable ASTs since we are calling
C is from non-AST code
	CALL SYS$SETAST(%VAL(0))
	OK = ABORTAST(%VAL(CHAN))
	CALL SYS$SETAST(%VAL(1))
	IF (.NOT.OK) THEN
C
C maybe not exactly 'error creating...' but message will do
	   CALL MOAN(MSG_ERRCREMBX,DSTR(:DSTRL))
	   CALL LITES2_SIGNAL(OK)
	   GOTO 999
	ENDIF
	GOTO 1000
C
C
C error exit
999	CALL IGNCMD
C
1000	RETURN
	END
