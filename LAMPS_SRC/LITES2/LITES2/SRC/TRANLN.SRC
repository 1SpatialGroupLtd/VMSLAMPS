	SUBROUTINE TRANLN(BASE,INPT1,INPT2,OUTPT1,OUTPT2)
C
***	IDENT	04FE86
***	MODULE	TRANLN
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	28-Jan-1986
C
C Description
C
C	Subroutine to rotate and translate a line onto a base
C
	IMPLICIT	NONE
C
C arguments (input)
C
	REAL	BASE(2,2)	! base to transform onto
	REAL	INPT1(2)	! input line
	REAL	INPT2(2)
C
C (output)
C
	REAL	OUTPT1(2)
	REAL	OUTPT2(2)
C
C Local Variables
C
	REAL	DIST1,DIST2
	REAL	DDIST,DX,DY
	REAL	PROP
C
C project input line onto base
C
	CALL PRPDST(INPT1,BASE,DIST1,PROP)
	OUTPT1(1)=BASE(1,1)+PROP*(BASE(1,2)-BASE(1,1))
	OUTPT1(2)=BASE(2,1)+PROP*(BASE(2,2)-BASE(2,1))
C
	CALL PRPDST(INPT2,BASE,DIST1,PROP)
	OUTPT2(1)=BASE(1,1)+PROP*(BASE(1,2)-BASE(1,1))
	OUTPT2(2)=BASE(2,1)+PROP*(BASE(2,2)-BASE(2,1))
C
C compute length of original and new line
C
	DIST1=SQRT((INPT2(1)-INPT1(1))**2+(INPT2(2)-INPT1(2))**2)
	DIST2=SQRT((OUTPT2(1)-OUTPT1(1))**2+(OUTPT2(2)-OUTPT1(2))**2)
C
C if input line was parallel to base, dist1=dist2, and we are finished.
C (assuming input line had a distance! That is calling routines problem)
C
	IF (DIST1.NE.DIST2) THEN
	   IF (DIST2.GT.0.0) THEN
C
C normal case
C
	      DDIST=(DIST1-DIST2)/2/DIST2
	      DX=OUTPT2(1)-OUTPT1(1)
	      DY=OUTPT2(2)-OUTPT1(2)
	   ELSE
C
C Perpendicular case
C
	      DIST2=(BASE(1,2)-BASE(1,1))**2+(BASE(2,2)-BASE(2,1))**2
	      DDIST=DIST1/2/SQRT(DIST2)
	      DX=BASE(1,2)-BASE(1,1)
	      DY=BASE(2,2)-BASE(2,1)
	   ENDIF
C
	   OUTPT2(1)=OUTPT2(1)+DX*DDIST
	   OUTPT2(2)=OUTPT2(2)+DY*DDIST
	   OUTPT1(1)=OUTPT1(1)-DX*DDIST
	   OUTPT1(2)=OUTPT1(2)-DY*DDIST
C
	ENDIF

	RETURN
	END
