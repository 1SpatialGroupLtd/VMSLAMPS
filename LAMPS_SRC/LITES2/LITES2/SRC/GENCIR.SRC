	LOGICAL FUNCTION GENCIR(GT,XYCORD,AUX)
C
***	MODULE	GENCIR
***	IDENT	02AU85
C
C Copyright Laser Scan Laboratories Ltd, Cambridge, England.
C Author Clarke Brunt
C
C Created					CCB	25-February-1985
C
C Routine to work out auxiliary array for circle arcs.
C
C The graphical types we deal with are:
C
C   2 - Clockwise circle arc	  > Start pt, Centre pt, End pt.
C   3 - Anticlockwise circle arc  >    "    ,    "     ,   "   .
C   4 - Circumcircle arc	  >    "    , Any edge pt, "   .
C   5 - Full circumcircle	  > Any 3 edge pts.
C (Direction is implicit in 4 and 5).
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:CONSTS/
***	PARAMETER/CMN:MOANMESS/
C
***	COMMON/LSL$CMNFRT:FRTCOM/
C
C Arguments
	INTEGER GT		! (input) graphical type
				!	  (should be 1,2 or 3)
	REAL XYCORD(2,3)	! (input)  coordinates (need 3)
	REAL AUX(AUXLEN)	! (output) auxiliary data array
C
C W/s
	REAL LAUX(AUXLEN)	! local version of AUX array
	REAL DXS,DYS,DXE,DYE	! differences between pts on edge.
	REAL TWODEL		! temporary workspace.
	REAL RSSQD,RESQD	!	"	"
	REAL DSDE		!	"	"
	REAL XSDIF,YSDIF,XEDIF,YEDIF  ! differences (edge pts - centre).
C circle parameters
	REAL XCENTR,YCENTR	! coords of circle/arc centre.
	REAL RADIUS		! circle/arc radius. 
	REAL STAANG		! angle at centre of 1st point.
	REAL TOTANG		! total angle of circle/arc.
	REAL ENDANG		! angle at centre of end point.
C
	INTEGER	I
	LOGICAL*1 CLOCKW	! direction of circle/arc.
C
C Circle auxiliary array
	EQUIVALENCE	(LAUX(XCENI),XCENTR),
     &			(LAUX(YCENI),YCENTR),
     &			(LAUX(RADI),RADIUS),
     &			(LAUX(STAI),STAANG),
     &			(LAUX(TOTI),TOTANG)
C
	GENCIR = .FALSE.		! assume success
C
C Do we need to work out the centre point?
	IF ((GT.EQ.CLOTYP).OR.(GT.EQ.ANTTYP)) THEN
C
C Circle/arc defined by start pt, centre pt, and end pt.
	   XCENTR=XYCORD(1,2)	! x centre
	   YCENTR=XYCORD(2,2)	! y centre
C Set the direction.
	   CLOCKW=(GT.EQ.CLOTYP)
	ELSE
C
C Evaluate the centre of the circle/arc if we have got 3 points
C on the circumference. Uses fairly obscure method.
	   DXS = XYCORD(1,1)-XYCORD(1,2)	! x 2->1
	   DYS = XYCORD(2,1)-XYCORD(2,2)	! y 2->1
	   DXE = XYCORD(1,3)-XYCORD(1,2)	! x 2->3
	   DYE = XYCORD(2,3)-XYCORD(2,2)	! y 2->3
	   DSDE = DXS*DYE-DYS*DXE	! cross product DS x DE
	   IF (DSDE.EQ.0.0) GOTO 9998	! points are in a straight line
	   CLOCKW = (DSDE.GT.0.0)	! sense of circle
	   TWODEL = 0.5/DSDE
	   RSSQD = DXS*DXS+DYS*DYS
	   RESQD = DXE*DXE+DYE*DYE
C Now evaluate the centre point.
	   XCENTR=(DYE*RSSQD-DYS*RESQD)*TWODEL+XYCORD(1,2)   ! x centre
	   YCENTR=(DXS*RESQD-DXE*RSSQD)*TWODEL+XYCORD(2,2)   ! y centre
	ENDIF
C
C Now work out the radius. The correct radius is set by the 1st
C point. The 3rd point merely provides an angle rel to the centre.
	XSDIF=XYCORD(1,1)-XCENTR	! x centre->1
	YSDIF=XYCORD(2,1)-YCENTR	! y centre->1
	RADIUS=SQRT(XSDIF**2+YSDIF**2)	! radius
	IF (RADIUS.EQ.0.0) GOTO 9998	! bad circle
C
C Work out the start and end angles at the centre
	IF (GT.EQ.FULTYP) THEN	! full circle so...
	   STAANG=0.0
	   TOTANG=TWOPI
	ELSE				! arc
	   STAANG=ATAN2(YSDIF,XSDIF)
	   IF (STAANG.LT.0.0) STAANG=STAANG+TWOPI
	   XEDIF=XYCORD(1,3)-XCENTR	! x centre->3
	   YEDIF=XYCORD(2,3)-YCENTR	! y centre->3
	   IF (XEDIF.EQ.0.0.AND.YEDIF.EQ.0.0) GOTO 9998	! bad circle
	   ENDANG=ATAN2(YEDIF,XEDIF)
	   IF (ENDANG.LT.0.0) ENDANG=ENDANG+TWOPI
	   TOTANG=ENDANG-STAANG
C
C Now make sure the angles are right, positive for anti-clockwise
	   IF (TOTANG.GE.0.0) THEN
	      IF (CLOCKW) TOTANG=TOTANG-TWOPI
	   ELSE
	      IF (.NOT.CLOCKW) TOTANG=TOTANG+TWOPI
	   ENDIF
C
C If arc is so short that a full circle was probably meant,
C then set the angle explicitly
	   IF((GT.NE.CIRTYP).AND.(ABS(TOTANG).LT.1.0E-5))TOTANG=TWOPI
C
	ENDIF
C
C Copy over the local auxiliary array to the argument
1000	DO 1010 I=1,AUXLEN
	   AUX(I)=LAUX(I)
1010	CONTINUE
	GOTO 9999
C
C error
9998	CALL MOAN(MSG_INVALCIRCLE)
	GENCIR = .TRUE.		! failed
C
9999	RETURN
	END
