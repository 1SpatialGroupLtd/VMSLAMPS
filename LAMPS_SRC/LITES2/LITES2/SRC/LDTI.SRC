C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-05-27 13:46:36.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION LDTI_COPY_BYTE_DATA
     &                     ( YSIZE, OFFSET, USER_ARRAY, X_POSN ,Y_POSN, 
     &			     X_NUMBER, Y_NUMBER, SAMPLE, DTI_ARRAY)
C
***	IDENT	27MY93
***	MODULE	LDTI_COPY_BYTE_DATA
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C
C	LITES2 version of DTILIB Function. Reads sampled data.
C
	IMPLICIT NONE
C
C arguments
	INTEGER*4		YSIZE		!Y size of DTI_ARRAY
	INTEGER*4		OFFSET		!offset into DTI_ARRAY
	INTEGER*4		X_NUMBER	!number of columns
	INTEGER*4		Y_NUMBER	!number of rows
	INTEGER*4		X_POSN		!start column value
	INTEGER*4		Y_POSN		!start row value
	INTEGER*4		SAMPLE		!sampling value
	BYTE			USER_ARRAY(*)
	BYTE			DTI_ARRAY(*)
C
C local
	INTEGER	IX,IY,III,JJJ
C
	JJJ = 1
	DO 200 IX=1,X_NUMBER
          III = ((Y_POSN-1)+(X_POSN+IX-2)*YSIZE)*SAMPLE + OFFSET + 1
	  DO 100 IY=1,Y_NUMBER
	      USER_ARRAY(JJJ) = DTI_ARRAY(III)
	      III = III+SAMPLE
	      JJJ = JJJ+1
100	   CONTINUE
200	CONTINUE
C
	LDTI_COPY_BYTE_DATA = 1
	RETURN
	END
C
	INTEGER*4 FUNCTION LDTI_COPY_WORD_DATA
     &                     ( YSIZE, OFFSET, USER_ARRAY, X_POSN ,Y_POSN, 
     &			     X_NUMBER, Y_NUMBER, SAMPLE, DTI_ARRAY)
C
***	IDENT	13JN90
***	MODULE	LDTI_COPY_WORD_DATA
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C
C	LITES2 version of DTILIB Function. Reads sampled data.
C
	IMPLICIT NONE
C
C arguments
	INTEGER*4		YSIZE		!Y size of DTI_ARRAY
	INTEGER*4		OFFSET		!offset into DTI_ARRAY
	INTEGER*4		X_NUMBER	!number of columns
	INTEGER*4		Y_NUMBER	!number of rows
	INTEGER*4		X_POSN		!start column value
	INTEGER*4		Y_POSN		!start row value
	INTEGER*4		SAMPLE		!sampling value
	INTEGER*2		USER_ARRAY(*)
	INTEGER*2		DTI_ARRAY(*)
C
C local
	INTEGER	IX,IY,III,JJJ
C
	JJJ = 1
	DO 200 IX=1,X_NUMBER
          III = ((Y_POSN-1)+(X_POSN+IX-2)*YSIZE)*SAMPLE + OFFSET + 1
	  DO 100 IY=1,Y_NUMBER
	      USER_ARRAY(JJJ) = DTI_ARRAY(III)
	      III = III+SAMPLE
	      JJJ = JJJ+1
100	   CONTINUE
200	CONTINUE
C
	LDTI_COPY_WORD_DATA = 1
	RETURN
	END
C
	INTEGER*4 FUNCTION LDTI_COPY_LONG_DATA
     &                     ( YSIZE, OFFSET, USER_ARRAY, X_POSN ,Y_POSN, 
     &			     X_NUMBER, Y_NUMBER, SAMPLE, DTI_ARRAY)
C
***	IDENT	13JN90
***	MODULE	LDTI_COPY_LONG_DATA
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C
C	LITES2 version of DTILIB Function. Reads sampled data.
C
	IMPLICIT NONE
C
C arguments
	INTEGER*4		YSIZE		!Y size of DTI_ARRAY
	INTEGER*4		OFFSET		!offset into DTI_ARRAY
	INTEGER*4		X_NUMBER	!number of columns
	INTEGER*4		Y_NUMBER	!number of rows
	INTEGER*4		X_POSN		!start column value
	INTEGER*4		Y_POSN		!start row value
	INTEGER*4		SAMPLE		!sampling value
	INTEGER*4		USER_ARRAY(*)
	INTEGER*4		DTI_ARRAY(*)
C
C local
	INTEGER	IX,IY,III,JJJ
C
	JJJ = 1
	DO 200 IX=1,X_NUMBER
          III = ((Y_POSN-1)+(X_POSN+IX-2)*YSIZE)*SAMPLE + OFFSET + 1
	  DO 100 IY=1,Y_NUMBER
	      USER_ARRAY(JJJ) = DTI_ARRAY(III)
	      III = III+SAMPLE
	      JJJ = JJJ+1
100	   CONTINUE
200	CONTINUE
C
	LDTI_COPY_LONG_DATA = 1
	RETURN
	END
C
CCC This routine has  been replaced by a macro version in PACKER.MAR
CCC for efficiency
CCC	INTEGER*4 FUNCTION LDTI_COPY_BIT_DATA
CCC     &                     ( YSIZE, OFFSET, USER_ARRAY, X_POSN ,Y_POSN, 
CCC     &			     X_NUMBER, Y_NUMBER, SAMPLE, DTI_ARRAY)
CCCC
CCC***	IDENT	13JN90
CCC***	MODULE	LDTI_COPY_BIT_DATA
CCCC
CCCC	Copyright : Laser-Scan Laboratories, Cambridge, England
CCCC
CCCC	LITES2 version of DTILIB Function. Reads sampled data.
CCCC
CCC	IMPLICIT NONE
CCCC
CCCC arguments
CCC	INTEGER*4		YSIZE		!Y size of DTI_ARRAY
CCC	INTEGER*4		OFFSET		!offset into DTI_ARRAY
CCC	INTEGER*4		X_NUMBER	!number of columns
CCC	INTEGER*4		Y_NUMBER	!number of rows
CCC	INTEGER*4		X_POSN		!start column value
CCC	INTEGER*4		Y_POSN		!start row value
CCC	INTEGER*4		SAMPLE		!sampling value
CCC	INTEGER*4		USER_ARRAY(*)
CCC	INTEGER*4		DTI_ARRAY(*)
CCCC
CCCC functions
CCC	INTEGER	LIB$EXTZV
CCCC
CCCC local
CCC	INTEGER	IX,IY,III,JJJ
CCCC
CCC	JJJ = 0
CCC	DO 200 IX=1,X_NUMBER
CCC	  III = ((Y_POSN-1)+(X_POSN+IX-2)*YSIZE)*SAMPLE + OFFSET
CCC	  DO 100 IY=1,Y_NUMBER
CCC	      CALL LIB$INSV(LIB$EXTZV(III,1,DTI_ARRAY),JJJ,1,USER_ARRAY)
CCC	      III = III+SAMPLE
CCC	      JJJ = JJJ+1
CCC100	   CONTINUE
CCC200	CONTINUE
CCCC
CCC	LDTI_COPY_BIT_DATA = 1
CCC	RETURN
CCC	END
C
CCC This routine has not yet been replaced by a macro version in PACKER.MAR
CCC for efficiency
	INTEGER*4 FUNCTION LDTI_COPY_BIT_DATA_PRIO(
     &			YSIZE, OFFSET, USER_ARRAY, X_POSN ,Y_POSN, 
     &			X_NUMBER, Y_NUMBER, SAMPLE, PRIVAL,
     &			DTI_ARRAY)
C
***	IDENT	26MY93
***	MODULE	LDTI_COPY_BIT_DATA_PRIO
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C
C	LITES2 version of DTILIB Function. Reads sampled data, and
C	allows a particular value to take priority
C
	IMPLICIT NONE
C
C arguments
	INTEGER*4		YSIZE		!Y size of DTI_ARRAY
	INTEGER*4		OFFSET		!offset into DTI_ARRAY
	INTEGER*4		X_NUMBER	!number of columns
	INTEGER*4		Y_NUMBER	!number of rows
	INTEGER*4		X_POSN		!start column value
	INTEGER*4		Y_POSN		!start row value
	INTEGER*4		SAMPLE		!sampling value
	INTEGER*4		PRIVAL		!value to take priority
	INTEGER*4		USER_ARRAY(*)
	INTEGER*4		DTI_ARRAY(*)
C
C functions
	INTEGER	LIB$EXTV
C
C local
	INTEGER	IX,IY,III,JJJ,KKK
	INTEGER	IXS,IYS
	INTEGER	IVAL,PVAL,VAL
	INTEGER	NUM
C
	PVAL = PRIVAL-1		! 0 -> -1, 1 -> 0
C
	JJJ = 0
	DO 200 IX=1,X_NUMBER
	  III = ((Y_POSN-1)+(X_POSN+IX-2)*YSIZE)*SAMPLE + OFFSET
	  DO 100 IY=1,Y_NUMBER
C
	      VAL = PRIVAL	! assume priority value found
	      KKK = III
	      DO 20 IXS = 1,SAMPLE
	         DO 10 IYS = 1,SAMPLE,32
	            NUM = MIN(32,SAMPLE-IYS+1)
	            IVAL = LIB$EXTV(KKK,NUM,DTI_ARRAY)
	            IF (IVAL.NE.PVAL) GOTO 21
	            KKK = KKK+NUM
10	         CONTINUE
	         KKK = KKK-SAMPLE+YSIZE
20	      CONTINUE
	      VAL = PVAL	! non-priority value
21	      CALL LIB$INSV(VAL,JJJ,1,USER_ARRAY)
	      III = III+SAMPLE
	      JJJ = JJJ+1
100	   CONTINUE
200	CONTINUE
C
	LDTI_COPY_BIT_DATA_PRIO = 1
	RETURN
	END
