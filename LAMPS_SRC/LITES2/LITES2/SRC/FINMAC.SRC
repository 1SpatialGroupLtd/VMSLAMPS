C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-02-06 18:33:18.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION FINMAC(ARGREQ)
C
***	IDENT	06FE92
***	MODULE	FINMAC
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RJH	29-OCT-1984
C
C Description
C
C    This function is part of the LITES2 Command Interface, and its
C purpose is to read a macro command from the current buffer.
C    The function returns the following values in the common block :-
C 1) the macro command number
C 2) the macro number (an index into the list of expanded macros)
C 3) the macro name in full;
C 4) the number of significant characters in the macro name;
C 5) the macro argument - this will be greater than 0 for menu or
C puck button macros, and will be set to 0 for user macros (arguments
C are not permitted for user macros) and menu or puck button macros with
C a missing argument.
C    The function itself returns one of the macro errors defined
C in the parameter file of macro error constants. Note that the global
C error flag will also be set if there was an error copying a string.
C
	IMPLICIT NONE
C
***     PARAMETER/CMN:CHARS/
***     PARAMETER/CMN:MACMEN/		! macros, menus and puck buttons
***     PARAMETER/CMN:MERPAR/		! macro error constants
***	PARAMETER/CMN:MOANMESS/
***	PARAMETER/LSL$CMNLSL:LSLLIBMSG/	!
C
***	COMMON/LSL$CMNLSL:EXCEPTION/
***     COMMON/LSL$CMNLSL:CMDCOM/	! CMDLIB command handling
***	COMMON/CMN:DMACRD/		! macro reading results
***     COMMON/CMN:GLOBAL/		! global variables
***     COMMON/CMN:MACRO/		! macro variables
C
C Arguments
	LOGICAL		ARGREQ		! macro arguments required?
C
C Functions called
	INTEGER*4	MACNUM		! finds macro number
	INTEGER*4	CPYSTR		! copies character strings
	INTEGER*4	RDCOMM		! CMDLIB - reads a command
	LOGICAL		RDCHS		! VIOLIB - reads a character
	LOGICAL		CHKDUPLCMD
	INTEGER		READ_STRING
C
C Local Variables
	BYTE		NXTCH		! next char after macro name
	CHARACTER*(16)	NAME		! duplicated command name
	INTEGER		NAME_LEN	! length of duplicated name
C
	DMACN = 0
	DMACL = 0
	DTMACL = 0
	DRARG = 0
	DMARGL = 0
C
C check command table for duplicates, if this has not been done already
	IF (CHCK_MACTAB) THEN
	   IF (CHKDUPLCMD(%VAL(MACTAB_ADDR),NAME,NAME_LEN)) THEN
	      IF (CHCK_MACTAB.LT.0) THEN
	         CALL MOAN(MSG_DUPLNAMES,'Macro',NAME(1:NAME_LEN),
     &	                     'user defined macros')
	         CALL LEARN(MSG_USECHECK,'macros')
	      ELSE
	         CALL INFORM(MSG_DUPLNAMES,'Macro',NAME(1:NAME_LEN),
     &	                     'user defined macros')
	         CALL LEARN(MSG_USECHECK,'macros')
	      ENDIF
	      CHCK_MACTAB = 1		! don't moan next time
	   ELSE
	      CHCK_MACTAB = 0
	   ENDIF
	ENDIF
C
C Read macro command
	DTABN = RDCOMM(%VAL(MACTAB_ADDR))
C
C Set return code, or find macro number and set string
C
	IF (DTABN .LE. 0) THEN			! not got a macro name
	   IF (ERRNUM .EQ. LSL__UNEXPCMD) THEN	! name not in table
	      FINMAC = MERUXS
	   ELSE IF (ERRNUM .EQ. LSL__UNEXPEOL) THEN ! no argument
	      FINMAC = MEREOL
	      DMACL = CPYSTR(CMDFST,DMAC)
	      DTMACL = CPYSTR(CMDNST,DTMAC)
	      DTABN=-CMDNUM
	   ELSE					! another CMDLIB error
	      FINMAC = MERCLB
	   ENDIF
	ELSE					! got a macro name
	   IF (CMDICT .GT. 0) DRARG = INTARG(1)	! reserved macro arg.
	   FINMAC = MACNUM(DTABN,DRARG,DMACN)	! find macro no.
	   DMACL = CPYSTR(CMDFST,DMAC)
	   DTMACL = CPYSTR(CMDNST,DTMAC)
	   IF (MOANED .AND. (FINMAC .EQ. 0)) THEN	! overflow 
	      FINMAC = MEROFL				! copying string
	   ENDIF
	ENDIF
C
C Check nothing else on line - this overrides most other errors
C
	IF ((FINMAC .NE. MERNOL) .AND.
     &	   (FINMAC .NE. MERUXS) .AND.
     &	   (FINMAC .NE. MERCLB)) THEN

	   IF (.NOT.RDCHS(NXTCH)) THEN
	      IF (ARGREQ) THEN		! is argument required
	         CALL BSCH
	         DMARGL = READ_STRING(DMARG,TERM)
	      ELSE
	         FINMAC = MEREXT
	      ENDIF
	   ENDIF
	ENDIF
C
	RETURN
	END
