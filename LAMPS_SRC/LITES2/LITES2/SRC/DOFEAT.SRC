C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-10-19 14:58:12.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE DOFEAT
C
***	IDENT	19OC93
***	MODULE	DOFEAT
C
C	Copyright Laser-Scan Ltd., Cambridge, England.
C
C	Written					RWR	12-Jul-1989
C
C	LITES2 cartographic editor FEATURE command.
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:ACS/
***     PARAMETER/CMN:AUXDEF/
***     PARAMETER/CMN:MOANMESS/		! moan constants
***     PARAMETER/CMN:PACK/
***	PARAMETER/CMN:REGPAR/
***	PARAMETER/CMN:START/
C
***	COMMON/CMN:ATTBTS/
***	COMMON/CMN:DEFINE/
***	COMMON/CMN:DOUT/
***	COMMON/CMN:CSTRCT/
***	COMMON/LSL$CMNFRT:FRTCOM/
***     COMMON/CMN:GEOM/
***     COMMON/CMN:GLOBAL/
***	COMMON/CMN:MASTER/
***     COMMON/CMN:OIIH/
***	COMMON/CMN:REGCMN/
C
C Functions called
	LOGICAL		STRTER,FRTFND
	LOGICAL		DEFREG
	LOGICAL		GEOM_TYPE
	LOGICAL		GENAUX
C
	EXTERNAL 	NASTY
C
C w/s
	LOGICAL		FINISHED
	INTEGER		CURPPT
	REAL		XSTART,YSTART
	REAL		CURSOR(2)
	REAL		LAST_CSXY(2)
C
	INTEGER		G_TYPE,G_COUNT
	INTEGER		I,J,NUM_PTS
	INTEGER		GEOM
	INTEGER		RET_CODE
	LOGICAL		START
C
C save cursor position
	CURSOR(1) = CSXY(1)
	CURSOR(2) = CSXY(2)
C
C make sure that we are not trying to construct circle, or anything
C 1) generated circle, arc and polygon construction
	CONGEN = .FALSE.
	CONCIR = .FALSE.
	CONCLO = .FALSE.
	CONCEN = .FALSE.
C
C 2) rectangle construction
	CONRECT = .FALSE.
	CONDIAG = .FALSE.
	CONSIDE = .FALSE.
C
C Dispatch on secondary command
	GOTO (100,200), DSECN
C
C Secondary command number out of range
	CALL MSGCMD(NASTY,MSG_ERRSECIND)
	GOTO 980
C
C construct feature from specified region
100	CONTINUE
C
C check that construction variables are correct (ie linear)
	IF (FRTFND(CONFC)) THEN
	   CALL MOAN(MSG_BADCODE,CONFC)
	   GOTO 980
	ELSEIF (FRTGT.NE.LINTYP.AND.FRTGT.NE.CURTYP.AND.
     &	        FRTGT.NE.STRTYP.AND.FRTGT.NE.ARETYP) THEN
	   CALL MOAN(MSG_CONFCNOTLINE,CONFC)
	   GOTO 980
	ENDIF
C
C check that region exits, and get start (and end) of it
	IF (.NOT.DEFREG(DINTS(1))) GOTO 980
C
	CURPPT=REGPTR(1,DINTS(1))
	CALL PUTLNG(%VAL(CURPPT+OFFX),XSTART)
	CALL PUTLNG(%VAL(CURPPT+OFFY),YSTART)
	CSXY(1)=XSTART
	CSXY(2)=YSTART
	LAST_CSXY(1) = 1.0E38
	LAST_CSXY(1) = 1.0E38
	FINISHED=.FALSE.
C
C start feature
	FLG_ADD = .TRUE.			! added a new feature
	IF (STRTER(START_INIT,START_VISIBLE)) GOTO 980
C
C  loop to add each point of region to feature
C
130	CONTINUE
	IF (LAST_CSXY(1).NE.CSXY(1).OR.LAST_CSXY(2).NE.CSXY(2)) THEN
	   IF (STRTER(START_ADD,START_VISIBLE)) GOTO 980
	ENDIF
	IF (FINISHED) GOTO 150		! end of region
C
C get next point from region, or if at end of region, use the start
C point
	LAST_CSXY(1) = CSXY(1)
	LAST_CSXY(2) = CSXY(2)
	CALL PUTLNG(%VAL(CURPPT),CURPPT)
	IF (CURPPT.NE.REGPTR(2,DINTS(1))) THEN
	   CALL PUTLNG(%VAL(CURPPT+OFFX),CSXY(1))
	   CALL PUTLNG(%VAL(CURPPT+OFFY),CSXY(2))
	ELSE
	   FINISHED=.TRUE.
	   CSXY(1)=XSTART
	   CSXY(2)=YSTART
	ENDIF
	GOTO 130
C
C complete feature
150	IF (STRTER(START_END,START_VISIBLE)) GOTO 980
	CALL ENDFT
	GOTO 1000
C
C construct feature from specified geometry
200	CONTINUE
	GEOM = DINTS(1)
	IF (.NOT.GEOM_TYPE(GEOM,G_TYPE,G_COUNT))
     &	     GOTO 980
C
C check that construction variables are correct (ie linear)
	IF (FRTFND(CONFC)) THEN
	   CALL MOAN(MSG_BADCODE,CONFC)
	   GOTO 980
	ENDIF
C
	IF (G_TYPE.GE.1.AND.FRTGT.NE.LINTYP.AND.FRTGT.NE.CURTYP.AND.
     &	     FRTGT.NE.STRTYP.AND.FRTGT.NE.ARETYP) THEN
	   CALL MOAN(MSG_CONFCNOTLINE,CONFC)
	   GOTO 980
	ELSEIF (G_TYPE.EQ.0.AND..NOT.FRTSYM) THEN
	   CALL MOAN(MSG_CONFCNOTRIGHT,CONFC,'symbol')
	   GOTO 980
	ENDIF
C
C for each simple geometry, create a new feature and add all the points
	DO 270, J = 1,G_COUNT
	   LAST_CSXY(1) = 1.0E38
	   LAST_CSXY(1) = 1.0E38
	   FINISHED=.FALSE.
	   START = .TRUE.
C
C deal with symbol features seperately
C
C start feature
	   IF (G_TYPE .GT.0 ) THEN
	      FLG_ADD = .TRUE.	! added a new feature
	      IF (STRTER(START_INIT,START_VISIBLE)) GOTO 980
C       
C now get the the first lot of coordinates from the (simple) geometry
 210	      CONTINUE
	      CALL CALLR(%VAL(GEOMETRY(GEOM)),
     &		   %VAL(J),
     &		   %VAL(START),%VAL(GEOM_MAX_PTS),
     &		   NUM_PTS,GEOM_XY,GEOM_FLAGS,FINISHED,RET_CODE,
     &		   %VAL(GEOM_ADDRESSES(XGET_PTS)))
	      IF (RET_CODE .NE. 0) THEN
		 CALL MOAN(MSG_GEOMERROR)
		 IF (RET_CODE .GT. 0) THEN
		    CALL CALLR(%VAL(RET_CODE),
     &			 RET_CODE,
     &			 %VAL(GEOM_ADDRESSES(XPR_MESS)))
		    CALL WRITEF
		 ENDIF
		 GOTO 980
	      ENDIF
C       
	      START = .FALSE.
C       
	      DO 250, I = 1,NUM_PTS
		 CSXY(1) = GEOM_XY(1,I)
		 CSXY(2) = GEOM_XY(2,I)
		 IF (LAST_CSXY(1).NE.CSXY(1).OR.LAST_CSXY(2).NE.CSXY(2)) THEN
		    IF (GEOM_FLAGS(I)) THEN
		       IF (STRTER(START_ADD,START_VISIBLE)) GOTO 980
		    ELSE
		       IF (STRTER(START_ADD,START_INVISIBLE)) GOTO 980
		    ENDIF
		 ENDIF
		 LAST_CSXY(1) = CSXY(1)
		 LAST_CSXY(2) = CSXY(2)
 250	      CONTINUE
	      IF (.NOT.FINISHED) GOTO 210
C       
C       and finish off this feature
	      IF (STRTER(START_END,START_VISIBLE)) GOTO 980
	      CALL ENDFT
	   ELSE
C
C for symbols, get this point
	      CALL CALLR(%VAL(GEOMETRY(GEOM)),
     &		   %VAL(J),
     &		   %VAL(START),%VAL(GEOM_MAX_PTS),
     &		   NUM_PTS,GEOM_XY,GEOM_FLAGS,FINISHED,RET_CODE,
     &		   %VAL(GEOM_ADDRESSES(XGET_PTS)))
	      IF (RET_CODE .NE. 0) THEN
		 CALL MOAN(MSG_GEOMERROR)
		 IF (RET_CODE .GT. 0) THEN
		    CALL CALLR(%VAL(RET_CODE),
     &			 RET_CODE,
     &			 %VAL(GEOM_ADDRESSES(XPR_MESS)))
		    CALL WRITEF
		 ENDIF
		 GOTO 980
	      ENDIF
	      CSXY(1) = GEOM_XY(1,1)
	      CSXY(2) = GEOM_XY(2,1)
C
C add a symbol at this point
	      FLG_ADD = .TRUE.	! added a new feature
	      IF (STRTER(START_INIT,START_VISIBLE)) GOTO 980
C
C fill in auxiliary array for this symbol
	      IF (GENAUX(1,COIXY(1,2),COIAUX,COIDSC,
     &		   COIANG,CONTH,COIPAK,CONFS)) GOTO 980
C       
C and finish the symbol
	      CALL DOEND
	      IF (MOANED) GOTO 980
	   ENDIF
 270	   CONTINUE
	   GOTO 1000
	   
C
C error exit
980	CALL IGNCMD
C
1000	CONTINUE
C
C restore cursor position
	CSXY(1) = CURSOR(1)
	CSXY(2) = CURSOR(2)
	CALL ABANDN
	RETURN
	END
