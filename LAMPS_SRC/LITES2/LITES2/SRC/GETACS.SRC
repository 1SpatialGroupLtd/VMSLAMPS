	SUBROUTINE GETACS(PACK,TC,AC,MACD)
C
***	IDENT	26OC93
***	MODULE	GETACS
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	 5-Aug-1985
C
C	Subroutine to get any ACs for matching from a feature into
C	the AC descriptor structure MACD (either FOMACD or IHMACD)
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:ACS/
***	PARAMETER/CMN:AUXDEF/
***     PARAMETER/CMN:PACK/
C
***	COMMON/CMN:ACS/
***     COMMON/CMN:STRIKE/
C
C Arguments
C (input)
	INTEGER*4	PACK(PAKLEN)
	INTEGER*4	AC,TC		! positions of AC and TC 
					! entries in file
C (output)
	INTEGER*4	MACD(ACDLEN)
C
C Functions called
	LOGICAL		NEXTAC
	INTEGER		LIB$EXTV
	INTEGER		GETARR
C
C Local Variables
	INTEGER		ACTYPE,TYP
	INTEGER		ADDR
	INTEGER		C,P
C
C empty any old ACs
	CALL FREEAC(MACD)
C
C if no AC bitmap, then can't be matching them
	IF (MATAC_ADDR.EQ.0) GOTO 900
C
C load AC sector with all ACs from feature
	CALL GETAC(PACK,TC,AC)
	FTRACD(ACD_CUR) = 0	! no current AC, ready for first one
C
C look at each AC in turn
C
20	IF (NEXTAC(FTRACD)) GOTO 900		! no more ACs
	ACTYPE = ACBUFL(AC_L_TYPE)
	IF (ACTYPE.LE.0) GOTO 20		! TC
C
C check if we are matching this AC type (low bit test)
	IF (.NOT.LIB$EXTV(ACTYPE,1,%VAL(MATAC_ADDR))) GOTO 20
C
C look through list for this AC
C
	ADDR = MACD(ACD_FSTAC)
	GOTO 40
C
30	CALL PUTLNG(%VAL(ADDR),ADDR)		! next pointer
40	IF (ADDR.EQ.0) THEN			! end of chain
	   CALL ADDAC(MACD)			! add AC at end
	   GOTO 20
	ENDIF
C
	TYP = GETARR(%VAL(ADDR),AC_L_TYPE)
	IF (TYP.LT.ACTYPE) GOTO 30
	IF (TYP.EQ.ACTYPE) THEN			! same type
	   CALL MOVAC(ACBUFL,%VAL(ADDR))	! replace with new AC
	   GOTO 20
	ENDIF
C
C insert AC before the one we are now looking at
C do this by adding it at end, then fixing up the pointers
	CALL ADDAC(MACD)
	C = MACD(ACD_CUR)	! current one, just added
C
C restore old end of AC chain
	MACD(ACD_LSTAC) = GETARR(%VAL(C),AC_L_PREPTR)
	CALL PUTLNG(0,%VAL(MACD(ACD_LSTAC)))
C
C get predecessor of AC (value less than ours)
	P = GETARR(%VAL(ADDR),AC_L_PREPTR)
	CALL PUTARR(P,%VAL(C),AC_L_PREPTR)	! point at previous
	CALL PUTLNG(ADDR,%VAL(C))		! point at next
	IF (P.NE.0) CALL PUTLNG(C,%VAL(P))	! point previous at us
	CALL PUTARR(C,%VAL(ADDR),AC_L_PREPTR)	! point next at us
	IF (P.EQ.0) MACD(ACD_FSTAC) = C		! new first AC
	GOTO 20
C
900	RETURN
	END
