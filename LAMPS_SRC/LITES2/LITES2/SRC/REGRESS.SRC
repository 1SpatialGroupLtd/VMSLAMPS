C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-03-24 11:15:30.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C
	LOGICAL*4 FUNCTION REGRESS(NPTS,PTS,COEFFS,RESID,MAXRES,RMSRES)
C
***	MODULE	REGRESS
***	IDENT	24MR88
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
C Author: R. Russell
C
C	Created 				 RWR	16-Mar-1988
C
C This routine does a least squares fit of a straight line to a number of
C points.
C
C The equation of the line is in the form
C
C                     ax + by + c = 0
C
C This is in normlised form, (which avoids potential numerical problems)
C by imposing the constraint
C
C                     a**2 + b**2 = 1
C
C (The more well known "y = mx + c" form of a line cannot be used, as
C when the line comes near to vertical, when m is very large, the formula
C cannot be used for computation)
C
C It can be shown that the distance from the point J, with coords XJ, YJ
C to the above normalised line is given by:-
C
C                     dist = a*XJ + b*YJ + c
C
C where the sign of dist shows which side of the line the point lies on.
C
C given n points, X1,Y1; X2,Y2; ....Xn,Yn (where n > 1), n observation
C equations can be formed
C
C                     A*X1 + B*Y1 + C = D1
C                     A*X2 + B*Y2 + C = D2
C                       .      .        .
C                       .      .        .
C                     A*Xn + B*Yn + C = Dn
C
C The best line through these points is the one where the sum of the
C squares of D1, D2 .... Dn is a minimum
C
C ie we want to minimise the expression
C
C (A*X1 + B*Y1 + C)**2 +(A*X2 + B*Y2 + C)**2 + ...(A*Xn + B*Yn + C)**2 
C
C When this expression is partially differentiated with respect to
C A and B in turn, and terms gathered together, we get the normal
C equations
C
C            A*[XX] + B*[XY] + C*[X] = 0
C            A*[XY] + B*[YY] + C*[Y] = 0
C            A*[X]  + B*[Y]  + C*n   = 0
C
C These equations are solved, but note that A=0, B=0 and C=0 is a valid
C solution, so we must take care that we do not get this solution. The
C equations are not unique, so we impose the condition that
C A**2 + B**2 = 1
C
C The solutions of the equations are either:-
C
C 1) A = SQRT(
C         ([Y]**2-n*[YY])**2/((n*[XY]-[X]*[Y])**2+([Y]**2-n*[YY]**2)))
C
C    B = (n*[XY]-[X]*[Y])/([Y]**2-n*[YY]) * A
C
C an alternative to this is
C
C    B = SQRT(
C         ([Y]**2-n*[YY]**2)/(([Y]**2-n*[YY]**2+(n*[XY]-[X]*[Y])**2)))
C
C    A = ([Y]**2-n*[YY])/(n*[XY]-[X]*[Y]) * B
C	
C 
C or .............
C
C 2) A = SQRT(
C         ([X]*[YY]-[XY]*[Y])**2/(([XX]*[Y]-[XY]*[X])**2 +
C                     ([X]*[YY]-[XY]*[Y]**2)))
C
C    B = ([XX]*[Y]-[XY]*[X])/([X]*[YY]-[XY]*[Y]) * A
C
C an alternative to this is
C
C    B = SQRT(
C         (([XX]*[Y]-[XY]*[X])**2/(([X]*[YY]-[XY]*[Y])**2 + 
C                    [X]*[YY]-[XY]*[Y])**2 )))
C
C    A = ([X]*[YY]-[XY]*[Y])/([XX]*[Y]-[XY]*[X]) * B
C
C C is one of (but preferably the last, which cannot divide by 0)
C
C    C = -[XX]/[X]*A - [XY]/[X]*B
C
C    C = -[XY]/[Y]*A - [YY]/[Y]*B
C
C    C = -[X]/n*A - [Y]/n*B
C
C If REGRESS is .TRUE. then we may have tried to do the impossible,
C and the values in COEFFS are suspect
C
	IMPLICIT NONE
C
	INTEGER*4 NPTS			! number of points
	REAL	  PTS(2,NPTS)		! coordinates to define line
	REAL*8	  COEFFS(3)		! coeffs, a, b and c
	REAL	  RESID(NPTS)		! distances from points to line
	REAL	  MAXRES		! max absolute distances
	REAL	  RMSRES		! RMS residuals
C
	INTEGER	  I
	REAL	  DIST			! temporary residual
	REAL*8	  CRIT			! criterion for rejection of fit
	REAL*8	  X,Y
	REAL*8	  SIGX,SIGY		! temporary sums
	REAL*8	  SIGXX,SIGYY,SIGXY
	REAL*8	  FAC1,FAC2,FAC3,FAC4
C
C ......................................................................
C
C only valid if more than 2 points
C
	DO 10,I=1,3
	   COEFFS(I) = 0.0
10	CONTINUE
C
C do summations
C
	SIGX  = 0.0D0
	SIGY  = 0.0D0
	SIGXX = 0.0D0
	SIGYY = 0.0D0
	SIGXY = 0.0D0
C
	DO 30 I=1,NPTS
	   X = PTS(1,I)
	   Y = PTS(2,I)
C
	   SIGX  = SIGX  + X
	   SIGY  = SIGY  + Y
	   SIGXX = SIGXX + X*X
	   SIGYY = SIGYY + Y*Y	   
	   SIGXY = SIGXY + X*Y
C
30	CONTINUE
C
C solve the equations directly
	CRIT = 	0.1D-30		! rather arbitrary, this !
	FAC1 = SIGY*SIGY  - NPTS*SIGYY
	FAC2 = SIGX*SIGYY - SIGY*SIGXY
	FAC3 = NPTS*SIGXY - SIGX*SIGY
        FAC4 = SIGY*SIGXX - SIGX*SIGXY
C
	REGRESS = MAX(ABS(FAC1),ABS(FAC2),ABS(FAC3),ABS(FAC4)).LT.CRIT
	IF (.NOT.REGRESS) THEN
	   IF (ABS(FAC1).GE.MAX(ABS(FAC2),ABS(FAC3),ABS(FAC4))) THEN
	      COEFFS(1) = SQRT(FAC1*FAC1/(FAC3*FAC3 + FAC1*FAC1))
	      COEFFS(2) = FAC3/FAC1*COEFFS(1)
	   ELSEIF (ABS(FAC2).GE.MAX(ABS(FAC1),ABS(FAC3),ABS(FAC4))) THEN
	      COEFFS(1) = SQRT(FAC2*FAC2/(FAC4*FAC4 + FAC2*FAC2))
	      COEFFS(2) = FAC4/FAC2*COEFFS(1)
	   ELSEIF (ABS(FAC3).GE.MAX(ABS(FAC1),ABS(FAC2),ABS(FAC4))) THEN
	      COEFFS(2) = SQRT(FAC3*FAC3/(FAC1*FAC1 + FAC3*FAC3))
	      COEFFS(1) = FAC1/FAC3*COEFFS(2)
	   ELSE
	      COEFFS(2) = SQRT(FAC4*FAC4/(FAC2*FAC2 + FAC4*FAC4))
	      COEFFS(1) = FAC2/FAC4*COEFFS(2)
	   ENDIF
	   COEFFS(3) = -SIGX/NPTS*COEFFS(1) - SIGY/NPTS*COEFFS(2)
	ENDIF
C
C now test the goodness of fit by calculating the distances from the
C points to this line
C
	RMSRES = 0.0
	MAXRES = 0.0
C
	DO 40 I=1,NPTS
	   DIST=COEFFS(1)*PTS(1,I) + COEFFS(2)*PTS(2,I) + COEFFS(3)
	   RESID(I) = DIST			! return all residuals
	   RMSRES = RMSRES + DIST*DIST		! and RMS and MAX errors
	   IF (ABS(DIST).GT.MAXRES) MAXRES = ABS(DIST)
40	CONTINUE
	RMSRES = SQRT(RMSRES/FLOAT(NPTS))
900	RETURN
	END

