C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-03-30 14:31:14.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE DODIST
C
***	IDENT   30MR92
***	MODULE  DODIST
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Written					CCB	26-Mar-1992
C
C	LITES2 cartographic editor DISTANCE command.
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:CONSTS/
***	PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:PACK/
***	PARAMETER/CMN:STAPAR/
C
***	COMMON/CMN:DOUT/
***	COMMON/LSL$CMNFRT:FRTCOM/
***	COMMON/CMN:GLOBAL/
***	COMMON/CMN:STRIKE/
C
C functions called
	LOGICAL	CHKLIN
	REAL	LENGTH
	EXTERNAL	NASTY
	EXTERNAL	DISTANCE_CMD_TABLE
C
C workspace
	INTEGER	I
	REAL	DIST,FRAC,SEG
	INTEGER	START,STOP,STEP
	INTEGER	LSTVRT
	LOGICAL	REL
	REAL	ANG
	LOGICAL	FIRST
C
C sort out arguments to this unusual format command
C i.e. DISTANCE d
C or   DISTANCE ABSOLUTE/RELATIVE d
C
	IF (DNREA.GT.0) THEN
	   IF (DSTRIN) THEN
	      CALL MOAN(MSG_ILLEGALTERM,ICHAR(DSTR(1:1)))
	      GOTO 999
	   ENDIF
	   REL = .FALSE.		! absolute distance
	ELSE
	   IF (.NOT.DSTRIN) THEN
	      CALL MOAN(MSG_CMDLIBEOL,'command',DPRI(:DPRIL))
	      GOTO 999
	   ENDIF
	   CALL GET_COMMAND(DSTR(:DSTRL),DISTANCE_CMD_TABLE)
	   IF (MOANED) GOTO 999
	   GOTO (1,2), DPRIN
C
C---Secondary command number out of range
C
	   CALL MSGCMD(NASTY,MSG_ERRSECIND)
	   GOTO 999
C
C Secondary command ABSOLUTE
1	   REL = .FALSE.
	   GOTO 3
C
C Secondary command RELATIVE
2	   REL = .TRUE.
3	   CONTINUE
	ENDIF
C
	IF (.NOT.CHKLIN(.FALSE.)) GOTO 999	! linear found object
C
C convert units to IFF (if a UNITS command has been used)
	CALL TSTUNT(.TRUE.,1,DREALS(1))
C
	IF (FOPAK(PAKGT).GE.CLOTYP .AND. FOPAK(PAKGT).LE.FULTYP) THEN
C
C arc - get appropriate fractional distance along it
C
C for a relative move, get angle we are at now
	   ANG = 0.0
	   IF (REL) THEN
	      IF (FOSTRT) THEN
	         ANG = 0.0
	      ELSEIF (FOEND) THEN
	         ANG = FOAUX(TOTI)
	      ELSE
	         ANG = ATAN2(FOCXY(2)-FOAUX(YCENI),FOCXY(1)-FOAUX(XCENI))
	         IF (ANG.LT.0) ANG = ANG+TWOPI
	         ANG = ANG - FOAUX(STAI)
	         IF (FOAUX(TOTI).GE.0.0) THEN
	            IF (ANG.LT.0.0) ANG = ANG+TWOPI
	         ELSE
	            IF (ANG.GT.0.0) ANG = ANG-TWOPI
	         ENDIF
	      ENDIF
	   ENDIF
	   FRAC = DREALS(1)/FOAUX(RADI) + ANG	! convert to angle
	   FRAC = FRAC/ABS(FOAUX(TOTI))		! fraction of total angle
C
C negative means measured backwards from end, if absolute
	   IF (.NOT.REL.AND.FRAC.LT.0.0) FRAC = 1.0 + FRAC
C
C force into range
	   IF (FRAC.LT.0.0) FRAC = 0.0
	   IF (FRAC.GT.1.0) FRAC = 1.0
	ELSE
C
C linear feature - add up length until we reach the desired distance
C
	   STEP = 1
	   IF (DREALS(1).LT.0.0) THEN
	      DREALS(1) = -DREALS(1)
	      STEP = -1
	   ENDIF
	   DIST = 0.0
	   IF (.NOT.REL) FOVRT = 1			! start at first vertex
	   LSTVRT = FOLST
	   IF (STEP.LT.0) THEN
	      IF (.NOT.REL) FOVRT = FOLST		! (or last one)
	      LSTVRT = 1
	   ENDIF
C
C DIST REL 0.0 could be a no-op, but let it continue
	   IF (DREALS(1).EQ.0.0.AND..NOT.REL) GOTO 30
	   IF (REL) THEN
	      FIRST = .FALSE.
	      IF (.NOT.FONVRT) THEN
	         FIRST = .TRUE.
	         IF (STEP.LT.0) FOVRT = FOVRT+1
	      ENDIF
	   ENDIF
C
C so we need to add in some more vertices,
C get some more into RIXY(*,1:RITOP)
10	   CALL GETVRT(FOPAK,FOVRT,LSTVRT)
C
C add in as much of this buffer load as we need
C
	   IF (STEP.LT.0) THEN
	      START = RITOP-1
	      STOP = 1
	   ELSE
	      START = 1
	      STOP = RITOP-1
	   ENDIF
	   IF (REL.AND.FIRST) THEN
	      FIRST = .FALSE.
	      I = 1
	      IF (STEP.LT.0) I = RITOP
	      DIST = -SQRT( (FOCXY(1)-RIXY(1,I))**2 +
     &		            (FOCXY(2)-RIXY(2,I))**2 )
	   ENDIF
	   DO 20 I=START,STOP,STEP
	      FOVRT = FOVRT+STEP
	      SEG = LENGTH(2,RIXY(1,I))
	      DIST = DIST + SEG
	      IF (DIST.GE.DREALS(1)) GOTO 30
20	   CONTINUE
C
C step along for next section of line if not yet reached end
	   IF (FOVRT.NE.LSTVRT) GOTO 10
C
C fallen off end - distance was greater than length of line
	   DREALS(1) = DIST
C
C now have either stepped onto or past desired distance
30	   IF (DIST.GT.DREALS(1)) THEN		! past
	      FONVRT = .FALSE.
	      FRAC = (DIST-DREALS(1))/SEG	! overshoot fraction
	      IF (STEP.GT.0) THEN
	         FRAC = 1.0-FRAC
	         FOVRT = FOVRT-1
	      ENDIF
	   ELSE
	      FONVRT = .TRUE.	
	      FRAC = 0.0
	   ENDIF
	ENDIF
C
	CALL VERTEX(FRAC)		! common code
	GOTO 1000
C
C error exit
999	CALL IGNCMD
C
1000	RETURN
	END
