C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-05-09 12:54:58.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE SHOPER
C
***	IDENT	09MY96
***	MODULE	SHOPER
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	 10-Nov-1987
C
C	SHOW OPERATIONS command
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:EFNLUN/
***     PARAMETER/CMN:MOANMESS/		! moan constants
C
***	COMMON/CMN:FILES/
***	COMMON/LSL$CMNFRT:FRTACD/
***     COMMON/LSL$CMNFRT:FRTGRP/	! common for FRTLIB
***	COMMON/CMN:DEFINE/
***	COMMON/CMN:MAPS/
C
C funtions
	INTEGER		SIGCHS
C
C Local Variables
	EXTERNAL	OPERATION_CMD_TABLE
	EXTERNAL	LEARN
C
	LOGICAL		NONE
	LOGICAL		GOTHDR
	INTEGER		I		! loop counter
	INTEGER		ADDR
	INTEGER		CMDLEN		! its length
	INTEGER		ACTYPE
	INTEGER		ACVALUE
	CHARACTER*65   	STRNG
	INTEGER		CONTEXT
	INTEGER		FC
	INTEGER		CAT
C
C Check whether FRT file has been read
	IF (.NOT.HADFRT) THEN
	   CALL MOAN(MSG_NOFILENAME,'FRT')
	   CALL MSGCMD(LEARN,MSG_REQFRTNAME)
	   GOTO 999
	ENDIF
C
	NONE = .TRUE.
C
C look at each operation
	DO 100, I = 1,DEF_NUMBER
	   IF (DEFINITION(I).GT.0) THEN
	      IF (NONE) THEN
	         CALL INFORM(MSG_FOLLOPERINSET)
	         CALL INFORM(MSG_BLANK)
	         NONE = .FALSE.
	      ELSE
	         CALL INFORM(MSG_BLANK)
	      ENDIF
	      CONTEXT = 0
	      STRNG = ' '			! clear out
C
C operation name
	      CALL FIND_CMDNAME(OPERATION_CMD_TABLE,I,
     &	                        STRNG,CMDLEN,CONTEXT)
	      GOTHDR = .TRUE.
	      ADDR = DEFINITION(I)
10	      CONTINUE
C
C get info out of this operation
	      CALL PUTLNG(%VAL(ADDR+DEF_TYP),ACTYPE)
	      CALL PUTLNG(%VAL(ADDR+DEF_VALUE),ACVALUE)
	      CALL PUTLNG(%VAL(ADDR),ADDR)
C
C look for actype in ACD
	      CALL ACDFND(ACTYPE,.FALSE.)
C
C fill up output string with AC name (or if that fails its type)
	      IF (ACD_CODE.NE.-1) THEN
	         CALL EXPAND('%WS%S',STRNG(21:),ACD_NAME(1:ACD_NAME_LEN))
	      ELSE
	         CALL EXPAND('%WS%N',STRNG(21:),ACTYPE)
	      ENDIF
C
C add the value
	      IF (ACVALUE.NE.IFF_ABSENT) 
     &	            CALL EXPAND('%WS'//ACD_FORMAT(1:ACD_FORMAT_LEN),
     &	                  STRNG(35:),ACVALUE)
C
C and write it out
	      CALL INFORM(MSG_STRING,'       '//STRNG)
C
C finished this operation?
	      IF (ADDR.GT.0) THEN
	         IF (GOTHDR) THEN
	            STRNG(1:20) = ' '
	            GOTHDR = .FALSE.
	         ENDIF
	         GOTO 10
	      ENDIF
	   ENDIF	
100	CONTINUE	            
C
C now look at that rather peculiar operation OS_MH_FLAGS
	IF (OS_MH_EDIT) THEN
	   IF (NONE) THEN
	      CALL INFORM(MSG_FOLLOPERINSET)
	      NONE = .FALSE.
	   ENDIF
	   GOTHDR = .FALSE.
C
	   DO 200, I=0,OS_MH_FLAGS-1
	      IF (OS_MH_GRP(I).GT.0) THEN
	         CONTEXT = 0
	         IF (GOTHDR) THEN
	            STRNG(1:20) = ' '		! clear out
	         ELSE
	            STRNG = ' '			! clear out
	            CALL INFORM(MSG_BLANK)
C
C operation name
	            CALL FIND_CMDNAME(OPERATION_CMD_TABLE,DEF_NUMBER+1,
     &	                        STRNG,CMDLEN,CONTEXT)
	            GOTHDR = .TRUE.
	         ENDIF
C
C flag number
	         CALL EXPAND('%WS%N',STRNG(21:),I+1)
C
C group name
	         CONTEXT = 0
	         CALL FIND_CMDNAME(%VAL(GRPCMT_LOC),OS_MH_GRP(I),
     &	                        STRNG(35:),CMDLEN,CONTEXT)
C
C and the character
	         CALL EXPAND('%WS %S1',STRNG(50:),OS_MH_CHAR(I))
C
C and write it out
	         CALL INFORM(MSG_STRING,'       '//STRNG(1:SIGCHS(STRNG)))
C                                                                 
C now deal with any text categories for this flag
	         IF (OS_MH_CAT_LIST(I) .GT.0) THEN
	            ADDR = OS_MH_CAT_LIST(I)
190	            CONTINUE
C
C get info out of this operation
	            CALL PUTLNG(%VAL(ADDR+DEF_TYP),FC)
	            CALL PUTLNG(%VAL(ADDR+DEF_VALUE),CAT)
	            CALL PUTLNG(%VAL(ADDR),ADDR)
	            STRNG = ' '			! clear out
	            CALL EXPAND('%WSText FC %I5',STRNG(35:),FC)
	            CALL EXPAND('%WSCategory %I2',STRNG(50:),CAT)
	            CALL INFORM(MSG_STRING,
     &	                  '            '//STRNG(1:SIGCHS(STRNG)))
	            IF (ADDR .NE.0) GOTO 190
	         ENDIF	      
	      ENDIF	         
200	   CONTINUE
	ENDIF
C
C if nothing output yet, give a message
	IF (NONE) CALL INFORM(MSG_NOOPERATIONS)
C
999	RETURN
	END
