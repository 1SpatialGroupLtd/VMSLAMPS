C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-03-01 11:54:28.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE IMAGEVALUE(TYPE,N,R,WHICH)
C
***	IDENT	01MR89
***	MODULE	IMAGEVALUE
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					CCB	13-Oct-1988
C
C To obtain the value of $IMAGEVALUE (called by VALVAR)
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:MOANMESS/
C
***	COMMON/CMN:IMAGE/
C
C arguments
	INTEGER		TYPE		! type of variable
	INTEGER		N		! value if integer
	REAL		R		! value if real
	INTEGER		WHICH		! 1 val, 2 grad, 3 aspect
C
C functions called
	INTEGER		IMAGENUMBER	! which image are we in
C
C workspace
	INTEGER	I,J
	INTEGER	IM
	INTEGER	SX,SY,ST	! steps in X, Y, and temp
	REAL	GRAD(4)		! 4 gradients
	REAL	G,GM		! temp and max gradient
	INTEGER	QUAD		! quadrant of max gradient
	INTEGER	PIX(2)		! pixel number
	INTEGER	VN(4)		! value of pixels at N, E, S, W
	REAL	VR(4)		! and as real
	LOGICAL	GOT(4)		! got pixel values
	REAL		PI
	PARAMETER	(PI=3.14159265)
C
C set defaults
	TYPE = 1
	N = 0
	R = 0.0
C
	IM = IMAGENUMBER(PIX)
	IF (IM.EQ.0) GOTO 998	! not in any images
C
C retrieve the value
200	CALL IMAGEPIXEL(TYPE,N,R,IM,PIX)
	IF (WHICH.EQ.1) GOTO 1000	! that's all
C
C must want gradient or aspect
C retrieve 4 adjacent values to N, E, S, W
	SY = 1
	SX = 0
	PIX(2) = PIX(2)+1
	DO 300 I=1,4
	   GOT(I) = .FALSE.
	   IF (PIX(1).LE.0.OR.PIX(1).GT.IMAGE_COLUMNS(IM)) GOTO 300
	   IF (PIX(2).LE.0.OR.PIX(2).GT.IMAGE_ROWS(IM)) GOTO 300
	   CALL IMAGEPIXEL(TYPE,VN(I),VR(I),IM,PIX)
	   PIX(1) = PIX(1) - SX
	   PIX(2) = PIX(2) - SY
	   ST = SX
	   SX = SY
	   SY = -ST
	   PIX(1) = PIX(1) + SX
	   PIX(2) = PIX(2) + SY
	   GOT(I) = .TRUE.
300	CONTINUE
C
C now calculate gradient in 4 directions
	DO 400 I=1,4
	   IF (.NOT.GOT(I)) GOTO 400
	   IF (TYPE.EQ.2) THEN
	      GRAD(I) = VR(I)-R		! real
	   ELSE
	      GRAD(I) = VN(I)-N		! integer
	   ENDIF
	   IF (I.GE.3) GRAD(I) = -GRAD(I)
	   GRAD(I) = GRAD(I)/IMAGE_PIXELSIZE(MOD(I,2)+1,IM)
400	CONTINUE
C
C want maximum gradient of the 4 quadrants, NE, SE, SW, NW
C these are the gradients or triangular facets formed by the pixel
C itself and each pair of two adjacent ones
	GM = -1.0
	QUAD = 0
	DO 500 I=1,4
	   J = I+1
	   IF (J.EQ.5) J = 1
	   IF (.NOT.(GOT(I).AND.GOT(J))) GOTO 500
	   G = GRAD(I)**2 + GRAD(J)**2
	   IF (G.GT.GM) THEN
	      GM = G
	      QUAD = I
	   ENDIF
500	CONTINUE
	IF (QUAD.EQ.0) GOTO 998	! must be a 1 row/col image, or a bug
C
C so we have a max gradient (squared) and the quadrant it was in
	TYPE = 2		! returned value is real
	IF (WHICH.EQ.2) THEN	! want gradient
	   R = SQRT(GM)
	ELSE			! want aspect
C
C this is the direction in which the normal to the surface points
C (i.e. opposite to the 'uphill' direction)
	   I = QUAD
	   J = QUAD+1
	   IF (J.EQ.5) J = 1
	   IF (I.EQ.2.OR.I.EQ.4) THEN
	      I = J
	      J = QUAD
	   ENDIF
	   IF (GRAD(I).EQ.0.0.AND.GRAD(J).EQ.0.0) THEN
	      R = 0.0		! undefined
	   ELSE
	      R = ATAN2( GRAD(J), GRAD(I) )	! clockw from S
	      R = R*180.0/PI + 180.0		! to degrees from N
	   ENDIF
	ENDIF
	GOTO 1000
C
C not in any images
998	CALL MOAN(MSG_NOIMSEL)
	CALL LEARN(MSG_USEIMSEL)
C
1000	RETURN
	END
