C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-06-05 11:54:44.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION VLDSEC(SEC)
C
***	IDENT	05JN90
***	MODULE	VLDSEC
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C to test if a sector impinges on a selected region
C
C returns .TRUE. if it does
C
C Author R.W. Russell	date
C
	IMPLICIT	NONE
C
C argument
C
	INTEGER		SEC		! sector in question
C
C parameter and common blocks
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:PACK/
***	PARAMETER/CMN:REGPAR/
C
***	COMMON/CMN:MASTER/
***	COMMON/CMN:REGCMN/
***	COMMON/CMN:STRIKE/
C
C working storage
C
	INTEGER		REG,I,J		! loop counters
	REAL		SECXY(4)	! limits of sector
C
C assume sector is implicted
C
	VLDSEC=.TRUE.
C
C work out corners of sector
C
	I=(SEC-1)/YRANGE		! integer divide
	J=SEC-(I*YRANGE)-1
C
	SECXY(1)=(J*XSECTW)+XOFF	! minimum X
	SECXY(2)=SECXY(1)+XSECTW	! maximum X
	SECXY(3)=(I*YSECTW)+YOFF	! minimum Y
	SECXY(4)=SECXY(3)+YSECTW	! maximum Y
C
C look at each region in turn
C
	DO 30, REG=1,MAX_REG
C
C is region defined? - test bottom bit of REGDEF
C
	   IF (REGDEF(REG)) THEN 
C
C is region selected? - see if any of selection bits are set
C
	      IF ((REGDEF(REG).AND.REGDEF_ALLSELECTED).GT.0) THEN
C
C 1st test - if out region is selected, all sectors are implicated
C
	         IF ((REGDEF(REG).AND.REGDEF_OUT).NE.0) GOTO 900
C
C 2nd test - if cut region is selected, all sectors must be scanned
C when doing a straight find (contours may pass right across the map)
C but for searching and *viewing - drawing, labelling etc - the features
C will be found sometime
C FINDNG is set in FINREC, while SPIRAL is set appropriately before FINREC
C is called
	         IF (((REGDEF(REG).AND.REGDEF_CUT).NE.0).AND.
     &	             FINDNG.AND..NOT.SPIRAL) GOTO 900
C
C 3rd test - test if any part of sector lies within region limit
C
	         IF (.NOT.
     &	             (SECXY(1).GT.REGLIM(2,REG).OR.
     &	              SECXY(2).LT.REGLIM(1,REG).OR.
     &	              SECXY(3).GT.REGLIM(4,REG).OR.
     &	              SECXY(4).LT.REGLIM(3,REG))) GOTO 900
	      ENDIF
	   ENDIF
   30	CONTINUE
C
C if we have got here, the sector is no good
C
	VLDSEC=.FALSE.
C
  900	CONTINUE
	RETURN
C
	END

