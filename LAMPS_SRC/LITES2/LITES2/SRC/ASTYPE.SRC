C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-07-06 13:26:56.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE ASTYPE(EPTR,FINISH,ARGL,ARG)
C
***	IDENT	06JL90
***	MODULE	ASTYPE
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RJH	15-NOV-1984
C
C Description
C
C Read next command as typed (until next separator #).
C Substitute variables into the command if required.
C Return pointer to end of original command in EPTR.
C Set FINISH (for GETCMD) along with DIGN if blank line results.
C An auxiliary buffer is set onto the final version of the command.
	IMPLICIT NONE
C
***     PARAMETER/CMN:CHARS/		! character constants
***     PARAMETER/CMN:MOANMESS/		! moan constants
C
***     COMMON/CMN:DTYPED/		! command as typed
***     COMMON/CMN:DVAR/		! command decoding variables
***	COMMON/LSL$CMNLSL:EXPC/		! as temporary string
***	COMMON/CMN:GLOBAL/		! global variables
***     COMMON/CMN:OPTION/		! enable switches
C
C Arguments
	INTEGER*2	EPTR		! pointer to end of command
	LOGICAL		FINISH		! set true if blank line
	INTEGER*4	ARGL		! argument string length
	CHARACTER*(*)	ARG		! argument string
C
C Functions called
	INTEGER*4	READ_STRING	! see MAR:RDCH.MAR
	INTEGER		SUBVAR		! substitute variables
	LOGICAL		STORE		! defining a macro?
	INTEGER		SIGCHS		! number of sig chars
	INTEGER		LIB$LOCC	! faster than INDEX
	INTEGER		STR$POSITION
C
C Workspace
	LOGICAL*1	OK		! expanded line OK?
	LOGICAL*1	SAVING		! defining a macro?
C
C Get the command as typed
C
	FINISH = .FALSE.			! not finished
	IF (DTNUM .GE. DTLIM) THEN		! no room to store
	   CALL MOAN(MSG_MAXJOULEV)
	   GOTO 999
	ENDIF
	DTNUM = DTNUM + 1			! incr. typed line no.
	DTYPL(DTNUM) = READ_STRING(DTYP(DTNUM),TERM)
	CALL DCPSAV(EPTR)			! save end pointer
C
C omit trailing blanks
	DTYPL(DTNUM) = SIGCHS(DTYP(DTNUM)(:DTYPL(DTNUM)))
	CALL SETAUX(%REF(DTYP(DTNUM)),DTYPL(DTNUM))	! set auxiliary
C
C Deal with substitution of variables
	SAVING = STORE()			! defining macro?
C
C don't parse line if not checking, and storing macro, and command is
C not ENDMACRO

	IF ((.NOT.CHKOPT).AND.SAVING) THEN
	   EXPLEN = DTYPL(DTNUM)
	   CALL STR$UPCASE(EXPDSC,DTYP(DTNUM)(1:DTYPL(DTNUM)))
	   DNPARS = STR$POSITION(EXPDSC,'ENDM').EQ.0
	ENDIF
C
C Only if ENABLE SUBSTITUTION, or defining a macro
	IF (.NOT.(SUBOPT.OR.SAVING)) GOTO 999
C
C Hopefully DTYPL(DTNUM) cannot be 0, 'cos repeated # has been
C skipped already. SETAUX fails on zero length.
C Look for any quotes
	IF (LIB$LOCC(QUOTE,DTYP(DTNUM)(:DTYPL(DTNUM))).EQ.0) GOTO 999
C
C Found a quote.
C If defining macro, indicate that the command should not be parsed,
C otherwise try to substitute
	IF (SAVING) THEN
	   DNPARS = .TRUE.			! don't parse line
	ELSE
	   IF (DTNUM .GE. DTLIM) THEN		! no room to store
	      CALL MOAN(MSG_MAXJOULEV)
	      GOTO 999
	   ENDIF
	   DTNUM = DTNUM+1			! incr. typed line no.
	   DTYPL(DTNUM) = SUBVAR(DTYP(DTNUM),ARGL,ARG)	! substitute
	   IF (MOANED) THEN
C If SUBVAR has failed, then discard extra line so that it
C isn't journalled.
	      DTNUM = DTNUM-1			! discard line
	   ELSE
	      OK = .FALSE.			! assume empty
	      IF (DTYPL(DTNUM).NE.0) THEN
	         DTYPL(DTNUM) = SIGCHS(DTYP(DTNUM)(:DTYPL(DTNUM)))
	         IF (DTYPL(DTNUM).NE.0) OK=.TRUE.
	      ENDIF
	      IF (OK) THEN
	         CALL SETAUX(%REF(DTYP(DTNUM)),DTYPL(DTNUM))
	      ELSE
	         DTNUM = DTNUM-1		! discard line
	         FINISH = .TRUE.		! finished command
	         DIGN = .TRUE.			! ignore command
	      ENDIF
	   ENDIF
	ENDIF
C
999	RETURN
	END
