C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-09-09 11:07:46.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE VALVAR(TYPE,N,R,S,LENGTH)
C
***	IDENT	09SE96
***	MODULE	VALVAR
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					CCB	 7-Jan-1986
C
C To obtain the value of the currently found variable
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
	INCLUDE	'($JPIDEF)'
***	PARAMETER/CMN:ACS/
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:CTXS/
***	PARAMETER/CMN:CONSTS/
***	PARAMETER/CMN:EFNLUN/
***     PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:PACK/
***	PARAMETER/LSL$CMNLSL:READANG/
***	PARAMETER/CMN:REGPAR/
***	PARAMETER/CMN:STAPAR/
C
***	COMMON/CMN:ACS/
***	COMMON/CMN:ACSEL/
***	COMMON/CMN:ATTBTS/
***	COMMON/CMN:CSTRCT/
***	COMMON/CMN:CTXS/
***	COMMON/CMN:DRAWIN/
***	COMMON/CMN:FCS/
***	COMMON/CMN:FFILES/
***	COMMON/CMN:FILES/
***	COMMON/LSL$CMNFRT:FRTACD/
***	COMMON/LSL$CMNFRT:FRTCOM/
***     COMMON/CMN:GEOM/
***	COMMON/CMN:GLOBAL/
***	COMMON/CMN:IMAGE/
***	COMMON/CMN:LABELS/
***	COMMON/CMN:LAYERS/
***	COMMON/CMN:OIIH/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:OVERLAY/
***	COMMON/CMN:MAPS/
***	COMMON/CMN:MASTER/
***	COMMON/LSL$CMNIFF:MD2DES/
***	COMMON/CMN:MODIFY/
***	COMMON/CMN:REGCMN/
***	COMMON/CMN:RFCTRL/
***	COMMON/CMN:SETUP/
***	COMMON/CMN:STATE/
***	COMMON/CMN:STRIKE/
***	COMMON/CMN:TRANSFORM/
***	COMMON/CMN:VARIABLE/
***	COMMON/CMN:WORKS/
C
C arguments
	INTEGER		TYPE		! type of variable
	INTEGER		N		! value if integer
	REAL*8		R		! value if real
	CHARACTER*(*)	S		! value if string
	INTEGER		LENGTH		! length if string
	INTEGER		CODE		! type of REGION test to do
C
C functions called
	INTEGER		CPYSTR
	INTEGER		LIB$EXTZV
	LOGICAL		CMPFRN		! test feature against region
	LOGICAL		DEFREG		! regions defined
	LOGICAL		THISAC		! ensure we have current AC
	REAL*8		AREA
	REAL		EXLENG
	REAL		EXDIST
	REAL		ANGLE
	REAL		ANGLE_BEARING
	LOGICAL		FRTFND
	INTEGER		EXPAND
	INTEGER		SIGCHS
	INTEGER		FNDOVR
	LOGICAL		RSPINP
	LOGICAL		GEOG_TRANS
	LOGICAL		CHK_PRIV_LIST
	LOGICAL		PINREG
	INTEGER		IMAGENUMBER
	LOGICAL		SECREG
	LOGICAL		GET_MAP_SHEET
	INTEGER		LIB$GETJPI
	INTEGER		PVALUE
	INTEGER		GET_OVERLAY_PLANE
	CHARACTER*(14)	DISPANG
	BYTE		GET_VARBYTE
	INTEGER*2	INTBY2(2)
	LOGICAL		GEOG_TRANS_ARRAY
	LOGICAL		GEOM_TYPE
	LOGICAL		GEOM_FEATURE
	LOGICAL		CHK_GEOMETRIES
	LOGICAL		FRTFGT
C
	EXTERNAL	WARP_TRANSFORM_CMD_TABLE
C
C w/s
	REAL		CRNRS(4)	! xmin,ymin,xmax,ymax
	REAL		TEMP
	INTEGER		XY,COR
	INTEGER		I,J
	INTEGER		CONTEXT
	INTEGER		IEQUV
	REAL		REQUV
	EQUIVALENCE	(IEQUV,REQUV)
	INTEGER		NOW_TIME(2)
	REAL*8		ICOORD(2)
	REAL*8		OCOORD(2)
	LOGICAL		INSIDE
	LOGICAL		ROWS
	INTEGER		XORY
	INTEGER		RETCOD
	INTEGER*2	WLEN
	REAL		TMPXY(2)
	INTEGER		G_TYPE,G_COUNT
	INTEGER		TEMP_GEOMETRY
	INTEGER		CUT_TYPE
C
C Start off with some defaults
	TYPE = 1
	N = 0
	R = 0.0D0
	LENGTH = 0
C
C DVARN<0 indicates a system variable, otherwise a user variable
	IF (DVARN.LE.0) GOTO (
     &	       100, 200, 300,		! FOUND	    FSN       FC
     &	       400, 500, 600,		! LAYER     MAP       PC
     &	       700, 800, 900,		! GT        CURSX     CURSY
     &	      1000,1100,1200,		! STATE     POINT     FIRST
     &	      1300,1400,1500,		! LAST      END       POINTNO
     &	      1600,1700,1800, 		! INREGION  OUTREGION CUTREGION
     &	      1900,2000,2100,		! BUTTON    WINDOW    CURSINWIN
     &	      2200,2300,2400,		! ACPRESENT ACTOTAL   ACTYPE
     &	      2500,2600,2700,		! ACIVALUE  ACRVALUE  ACTEXT
     &	      2800,2900,		! ACTEXTLEN AREA
     &	      3000,3100,3200,		! BOX       CATEGORY  HEIGHT
     &	      3300,3400,3500,		! LENGTH    ANGLE     LINE
     &	      3600,3700,3800, 		! LOCATION  PATTERN   PSIZE
     &	      3900,4000,4100,		! SECONDARY SIZE      STYLE
     &	      4200,4300,4400,		! WIDTH     TEXTLEN   TEXT
     &	      4500,4600,4700,		! TEXTOTAL  MOANED    LIMITS
     &	      4800,4900,		! MHARR     MHLEN
     &	      5000,5100,5200,		! MDOFFSET  MDSCALE   ZOOM
     &	      5300,5400,5500,		! FINDTOL   FIXEDFIND REFRESH
     &	      5600,5700,5800, 		! OPTBIG    OPTBLI    OPTCOM
     &	      5900,6000,6100,		! OPTCON    OPTHEI    OPTEND
     &	      6200,6300,6400,		! OPTLEA    OPTPAT    OPTSUB
     &	      6500,6600,6700,		! OPTVER    OPTINF    MMFACTOR
     &	      6800,6900,7000,		! SCRFACTOR COEFFS    REGION
     &	      7100,7200,7300,		! CPXNW     CPYNW     CPXSW
     &	      7400,7500,7600,		! CPYSW     CPXSE     CPYSE
     &	      7700,7800,7900,		! CPXNE     CPYNE     ACCVALUE
     &	      8000,8100,8200,		! ACSVALUE  ACDATATYPE IFFADDR
     &        8300,8400,8500,		! RANDOM    MAPNAME   MAXFSN
     &	      8600,8700,8800,		! ACNAME    ATTCVALUE ATTDATATYPE
     &	      8900,			! ATTIVALUE 
     &	      9000,9100,9200,		! ATTRVALUE ATTSVALUE ATTTOTAL
     &	      9300,9400,9500,		! ATTCODE   ATTNAME   ASK_REAL(TABLEXY)
     &	      9600,9700,9800,		! HWTYPE    VERSION   LAYER_EXIST
     &	      9900,			! DATETIME
     &	      10000,10100,10200,	! DISPLAY   RESPOND   TABLE
     &	      10300,10400,10500,	! LATITUDE  LONGITUDE IMAGEVALUE
     &	      10600,10700,10800,	! SYSELAPSED SYSCPU   SYSBUFIO
     &	      10900,11000,		! SYSDIRIO  SYSFAULTS
     &	      11100,11200,		! IMAGEGRADIENT IMAGEASPECT
     &	      11300,11400,11500,	! MODTCC    PRIVPOINT TCC
     &	      11600,11700,11800,	! CURSZ     CURSZ_EXIST COLOUR
     &	      11900),-DVARN		! CURSINREG

	IF (DVARN.LE.0) GOTO (
     &	      12000,12100,		! IMAGEROWS IMAGECOLUMNS
     &        12200,12300, 12400,	! FILELINE  EOF IMAGEORIGINX
     &        12500,12600,		! IMAGEORIGINY IMAGESTEPX
     &        12700,12800,		! IMAGESTEPY CURSINIMAGE
     &	      12900,13000,		! DISPLAYCOLUMNS DISPLAYROWS
     &	      13100,13200,13300,	! HADSELECT HADSELECT_MAP *_LAYER
     &	      13400,13500,13600,	! *_FC *_FSN *_CATEGORY
     &	      13700,13800,13900,	! *_STYLE *_REGION *_AC
     &	      14000,14100,		! HADSELECT_FLAGS REGIONAREA
     &	      14200,14300,		! DISPLAYNUMBER OVERLAYNUMBER
     &	      14400,14500,		! CONSTRUCTION_LAYER *_FC
     &	      14600,14700,14800,	! *_MAP IMAGE_EXIST MAP_SHEET
     &	      14900,15000,15100,	! MAP_NUMBER IMAGE_SETUP MAPTOTAL
     &	      15200,15300,15400,	! IFF_REVISION PID UIC
     &	      15500,15600,15700,	! EXIT_RANGE RANGE_XMIN RANGE_XMAX
     &	      15800,15900,16000,	! RANGE_YMIN RANGE_YMAX ASK_CHAR
     &	      16100,16200,16300,	! MODTEXT MODTEXTLEN FILEOPEN
     &	      16400,16500,16600,	! CONSTRUCTION_GT MAPSTATUS ASK_INT
     &	      16700,16800,16900,	! IMAGENAME P PLINE
     &	      17000,17100,17200,	! P_COUNT IMAGE_RANGE_XMIN ..._XMAX
     &	      17300,17400,17500,	! ..._YMIN ..._YMAX GT_FC
     &	      17600,17700,17800,	! OVERLAY OPTPSIZE ABSX
     &	      17900,18000,18100,	! ABSY  GEOG_STRING IMAGE_RANGE_ZMIN
     &	      18200,18300,		! IMAGE_RANGE_ZMAX FILESELECTED
     &	      18400,18500,18600,	! DISTANCE TOPFC FRT
     &	      18700,18800,18900,	! SRI TRI TOPMAP
     &	      19000,19100,19200,	! FILENAME BEARING SIZE_FC
     &	      19300,19400,19500,  	! RANGE_PROBLEM,FLY_TRANSFORMATION,GRP
     &	      19600,19700,19800,	! GROUP_FC, USER, INVISIBLE
     &	      19900,20000,20100,	! PI, CLOSED, GEOMETRY
     &	      20200,20300,20400,	! GEOMETRY_TYPE,CURSINGEOMETRY,INGEOM
     &	      20500,20600,20700,	! OUTGEOM,CUTGEOM,HADSELECT_GEOM
     &	      20800,20900,		! TOPGEOMETRY,GEOMETRY_PARTS
     &	      21000,21100,		! ANNOTATION_JOURNAL_STATUS,
     					! ANNOTATION_JOURNAL_NAME
     &	      21200,21300,21400,	! FRTFGT UNIT_FACTOR UNIT_DESC
     &        21500,21600,21700,	! UNIT_TYPE,WARP_MODE,WARP_TRANSFORM
     &	      21800,21900,		! WARP_IMAGE_N,WARP_MAP_N
     &	      22000,22100,		! WARP_IMAGE_X,WARP_IMAGE_Y
     &	      22200,22300,		! WARP_MAP_X,WARP_MAP_Y
     &	      22400,22500,		! WARP_RESIDUAL_X, WARP_RESIDUAL_Y
     &	      22600,22700,		! WARP_RMS_X,WARP_RMS_Y
     &	      22800,22900,		! WARP_COEFFS_IMAGE,WARP_COEFFS_MAP
     &	      23000,23100,		! WARP_DIRTY WARP_FITTED
     &	      23200,			! HADSELECT_PRIORITY
     &	      23300,23400		! FIND_COUNT,FIND_ITEM
     &			)-DVARN-119
C	
C must be user variable
	TYPE = GET_VARBYTE(%VAL(VAR_DESC_ADDRESS),3,DVARN) ! type of variable
	IF (TYPE.EQ.5) TYPE = 3		! char array -> char
	GOTO (10,20,30,40),TYPE		! branch on type
	GOTO 99999			! eh?
C
C Integer
10	CALL PUTLNG(%VAL(VARADR),N)
	GOTO 99999
C
C Real*4
20	CALL PUTLNG(%VAL(VARADR),R)	! second long already 0
	GOTO 99999
C
C String
30	LENGTH = CPYSTR(%VAL(VARADR),S)
	GOTO 99999
C
C Double (real*8)
40	CALL CPYPAK(2,%VAL(VARADR),R)	! copy two longwords
	GOTO 99999
C
C now the system variables
C
C $FOUND
100	IF (FO) N = -1
	GOTO 99999
C
C $FSN
200	IF (.NOT.FO) GOTO 95000		! no found object
	N = FOPAK(PAKFSN)
	GOTO 99999
C
C $FC
300	IF (.NOT.FO) GOTO 95000		! no found object
	N = FOFC
	GOTO 99999
C
C $LAYER
400	IF (.NOT.FO) GOTO 95000		! no found object
	N = OVNOS(FOPAK(PAKOVL))
	GOTO 99999
C
C $MAP
500	IF (.NOT.FO) GOTO 95000		! no found object
	N = FOPAK(PAKMAP)+1
	GOTO 99999
C
C $PC
600	IF (.NOT.FO) GOTO 95000		! no found object
	N = LIB$EXTZV(0,14,FOFS(3))
	GOTO 99999
C
C $GT
700	IF (.NOT.FO) GOTO 95000		! no found object
	N = FOPAK(PAKGT)
	GOTO 99999
C
C $CURSX			! x coord of current cursor position
800	TYPE = 2
	R = CSXY(1)
	GOTO 99999
C
C $CURSY			! y coord of current cursor position
900	TYPE = 2
	R = CSXY(2)
	GOTO 99999
C
C $STATE
1000	TYPE = 3
	LENGTH = STALEN
	S(1:LENGTH) = STASTR
	GOTO 99999
C
C $POINT
1100	IF (.NOT.FO) GOTO 95000		! no found object
	IF (FONVRT) N = -1
	GOTO 99999
C
C $FIRST
1200	IF (.NOT.FO) GOTO 95000		! no found object
	IF (FOPAK(PAKGT).GE.CLOTYP.AND.FOPAK(PAKGT).LE.FULTYP) THEN
	   IF (FOSTRT) N = -1		! circle arcs
	ELSE
	   IF (FONVRT.AND.(FOVRT.EQ.1)) N = -1
	ENDIF
	GOTO 99999
C
C $LAST
1300	IF (.NOT.FO) GOTO 95000		! no found object
	IF (FOPAK(PAKGT).GE.CLOTYP.AND.FOPAK(PAKGT).LE.FULTYP) THEN
	   IF (FOEND) N = -1			! circle arcs
	ELSE
	   IF (FONVRT.AND.(FOVRT.EQ.FOLST)) N = -1
	ENDIF
	GOTO 99999
C
C $END
1400	IF (.NOT.FO) GOTO 95000		! no found object
	IF (FOPAK(PAKGT).GE.CLOTYP.AND.FOPAK(PAKGT).LE.FULTYP) THEN
	   IF (FOSTRT.OR.FOEND) N = -1
	ELSE
	   IF (FONVRT.AND.((FOVRT.EQ.1).OR.(FOVRT.EQ.FOLST))) N = -1
	ENDIF
	GOTO 99999
C
C $POINTNO
1500	IF (.NOT.FO) GOTO 95000		! no found object
	N = FOVRT
	GOTO 99999
C
C $INREGION
1600	CODE = 1			! perform 'inside' test
	GOTO 1850
C
C $OUTREGION
1700	CODE = 2			! perform 'outside' test
	GOTO 1850
C
C $CUTREGION
1800	CODE = 3			! perform 'cut' test
1850	IF (.NOT.FO) GOTO 95000		! no found object
	IF (.NOT.DEFREG(VARARG)) GOTO 99999	! not defined
C
C sector (and calculate area of) region if required
	IF ((REGDEF(VARARG).AND.REGDEF_SEC).EQ.0) THEN
	   IF (SECREG(VARARG)) GOTO 99020
	ENDIF
	IF (CMPFRN(VARARG,CODE)) N = -1	! test region
	GOTO 99999
C
C $BUTTON
1900	N = LASBUT
	GOTO 99999
C
C $WINDOW
2000	TYPE = 2
	IF (VARARG.LT.1.OR.VARARG.GT.4) THEN
	   CALL MOAN(MSG_VARGRNG,DVAR(1:DVARL),1,4)
	ELSE
	   R = WINDOW(VARARG)	   
	ENDIF
	GOTO 99999
C
C $CURSINWIN [N]
2100	IF (GOT_VARARGR.AND.(VARARGR.LE.0.0.OR.VARARGR.GT.1.0)) THEN
	   CALL MOAN(MSG_VARGRNGR,DVAR(1:DVARL),0.0,1.0)
	   GOTO 99999
	ENDIF
C
	IF (.NOT.GOT_VARARGR) VARARGR = 1.0
	TEMP = WINDOW(2)-WINDOW(1)
	TEMP = (TEMP - TEMP*VARARGR)/2.0
	CRNRS(1) = WINDOW(1) + TEMP
	CRNRS(2) = WINDOW(2) - TEMP
	TEMP = WINDOW(4) - WINDOW(3)
	TEMP = (TEMP - TEMP*VARARGR)/2.0
	CRNRS(3) = WINDOW(3) + TEMP
	CRNRS(4) = WINDOW(4) - TEMP
C
	N = CSXY(1).GE.CRNRS(1).AND.CSXY(1).LE.CRNRS(2).AND.
     &	    CSXY(2).GE.CRNRS(3).AND.CSXY(2).LE.CRNRS(4)
	GOTO 99999
C
C $ACPRESENT
2200	IF (.NOT.FO) GOTO 95000			! no found object
	CALL GETAC(FOPAK,FOTC,FOAC)
	N = FTRACD(ACD_NAC).GT.0
	GOTO 99999
C
C $ACTOTAL
2300	IF (.NOT.FO) GOTO 95000			! no found object
	IF (SINDEX.NE.STATE_AC) GOTO 96000
	N = FTRACD(ACD_NAC)
	GOTO 99999
C
C $ACTYPE
2400	IF (.NOT.FO) GOTO 95000			! no found object
	IF (SINDEX.NE.STATE_AC) GOTO 96000	! not in AC state
	IF (FTRACD(ACD_NAC).EQ.0) GOTO 97000	! no acs
	IF (THISAC(FTRACD)) GOTO 97000		! get current AC
	N = ACBUFL(AC_L_TYPE)
	GOTO 99999
C
C $ACIVALUE
2500	IF (.NOT.FO) GOTO 95000			! no found object
	IF (SINDEX.NE.STATE_AC) GOTO 96000
	IF (FTRACD(ACD_NAC).EQ.0) GOTO 97000	! no acs
	IF (THISAC(FTRACD)) GOTO 97000		! get current AC
	IF (ACBUFL(AC_L_TYPE).GT.0) THEN
	   N = ACBUFL(AC_L_ACVAL)
	ELSE
	   CALL INFORM(MSG_NOVALINTC)
	ENDIF
	GOTO 99999
C
C $ACRVALUE
2600	TYPE = 2
	IF (.NOT.FO) GOTO 95000			! no found object
	IF (SINDEX.NE.STATE_AC) GOTO 96000
	IF (FTRACD(ACD_NAC).EQ.0) GOTO 97000	! no acs
	IF (THISAC(FTRACD)) GOTO 97000		! get current AC
	IF (ACBUFL(AC_L_TYPE).GT.0) THEN
	   R = ACBUFR(AC_L_ACVAL)
	ELSE
	   CALL INFORM(MSG_NOVALINTC)
	ENDIF
	GOTO 99999
C
C $ACTEXT
2700	TYPE = 3
	IF (.NOT.FO) GOTO 95000			! no found object
	IF (SINDEX.NE.STATE_AC) GOTO 96000
	IF (FTRACD(ACD_NAC).EQ.0) GOTO 97000	! no acs
	IF (THISAC(FTRACD)) GOTO 97000		! get current AC
	CALL STR$COPY_DX(S,ACBUFL(AC_L_DESC))
	LENGTH = ACBUFW(AC_W_TXTLEN)		! its length
	GOTO 99999
C
C $ACTEXTLEN
2800	IF (.NOT.FO) GOTO 95000			! no found object
	IF (SINDEX.NE.STATE_AC) GOTO 96000
	IF (FTRACD(ACD_NAC).EQ.0) GOTO 97000	! no acs
	IF (THISAC(FTRACD)) GOTO 97000		! get current AC
	N = ACBUFW(AC_W_TXTLEN)			! I*2 -> I*4
	GOTO 99999
C
C $AREA 
2900	TYPE = 2
	IF (.NOT.FO) GOTO 95000		! no found object
CCCC	R = SNGL(AREA())
	R = AREA()
	TYPE = 4	
	GOTO 99999
C
C $BOX 
3000	TYPE = 2
	IF (.NOT.FO) GOTO 95000		! no found object
	IF (VARARG.LT.1.OR.VARARG.GT.4) THEN
	   CALL MOAN(MSG_VARGRNG,DVAR(1:DVARL),1,4)
	ELSE
	   CALL LITES2_BOX(CRNRS)
	   R = CRNRS(VARARG)	   
	ENDIF
	GOTO 99999
C
C $CATEGORY 
3100	IF (.NOT.FO) GOTO 95000			! no found object
	IF (FOPAK(PAKGT).NE.TEXTYP) GOTO 98000	! not text
	N = LIB$EXTZV(6,6,FOFS(3))
	GOTO 99999
C
C $HEIGHT
3200	TYPE = 2
	IF (.NOT.FO) GOTO 95000			! no found object
	IF (FOPAK(PAKGT).NE.TEXTYP) GOTO 98000	! not text
	IF (POIOPT) THEN
	   CALL MOAN(MSG_ILLEGLMMS)
	   GOTO 99999
	ENDIF
C
	IF (HEIOPT) THEN
	   R = FOTH/100.0
	ELSEIF (.NOT.FRTFND(FOFC)) THEN
	   R = FRTSIZ
	ENDIF
	GOTO 99999
C
C $LENGTH
3300	TYPE = 2
	IF (.NOT.FO) GOTO 95000		! no found object
	R = EXLENG()
	GOTO 99999
C
C $ANGLE
3400	TYPE = 2
	IF (.NOT.FO) GOTO 95000		! no found object
	IF (FOPAK(PAKGT).GE.CLOTYP.AND.FOPAK(PAKGT).LE.FULTYP) THEN
	   CALL MOAN(MSG_NOANGLEARC)
	   GOTO 99999
	ENDIF
	R = ANGLE()
	GOTO 99999
C
C $LINE
3500	TYPE = 2
	IF (.NOT.FO) GOTO 95000		! no found object
C
	IF (FOPAK(PAKGT).NE.LINTYP .AND.
     &	    FOPAK(PAKGT).NE.CURTYP .AND.
     &	    FOPAK(PAKGT).NE.STRTYP .AND.
     &	    FOPAK(PAKGT).NE.ARETYP) THEN	! no linear found object
	   R = EXLENG()
	ELSEIF (FOLST.NE.1) THEN
	   I = FOVRT-FOVO		! index on FOXY
	   IF (FOVRT.EQ.FOLST) I = I-1	! back up if last vertex
	   R=SQRT((FOXY(1,I+1)-FOXY(1,I))**2+(FOXY(2,I+1)-FOXY(2,I))**2)
	ENDIF
	GOTO 99999
C
C $LOCATION
3600	IF (.NOT.FO) GOTO 95000			! no found object
	IF (FOPAK(PAKGT).NE.TEXTYP) GOTO 98000	! not text
	IF (.NOT.POSOPT) THEN		! positioning switched
	   CALL MOAN(MSG_NOPOSITIONING)		! off
	   GOTO 99999
	ENDIF
	N = FOFS(3).AND.'F'X	! get bottom 4 bits of flag word
	IF (N.GT.8) N = 0	! there are only 8 possible
	GOTO 99999
C
C $PATTERN 
3700	IF (.NOT.FO) GOTO 95000		! no found object
	IF (.NOT.FRTFND(FOFC)) THEN
	   IF (FRTLIN.OR.FRTARC.OR.FRTCUR) THEN
	      N = FRTSC		! pattern for linear feature
	   ELSE
	      CALL MOAN(MSG_NOTLINE)
	   ENDIF
	ENDIF
	GOTO 99999
C
C $PSIZE
3800	IF (.NOT.FO) GOTO 95000			! no found object
	IF (FOPAK(PAKGT).NE.TEXTYP) GOTO 98000	! not text
	IF (.NOT.HEIOPT) THEN
	   CALL MOAN(MSG_ILLEGLTXT)
	   GOTO 99999
	ENDIF
	IF (.NOT.POIOPT) THEN
	   CALL MOAN(MSG_ILLEGLPOI)
	   GOTO 99999
	ENDIF
	N = FOTH
	GOTO 99999
C
C $SECONDARY 
3900	IF (.NOT.FO) GOTO 95000		! no found object
	IF (.NOT.FRTFND(FOFC)) N = FRTSC
	GOTO 99999
C
C $SIZE
4000	TYPE = 2
	IF (.NOT.FO) GOTO 95000		! no found object
	IF (.NOT.FRTFND(FOFC)) THEN
C
C if symbol, get its size
	   IF (FRTSYM) THEN
	      IF (FRTGT.NE.SCATYP) THEN		! output size from FRT
	         R = FRTSIZ
	      ELSE				! use size from coords
	         R = (FOXY(1,1)-FOXY(1,2))**2+(FOXY(2,1)-FOXY(2,2))**2
	         R = SQRT(R)
	      ENDIF
C
C output error message if required
	   ELSE
	      CALL MOAN(MSG_NOTSYM)
	   ENDIF
	ENDIF
	GOTO 99999
C
C $STYLE 
4100	IF (.NOT.FO) GOTO 95000			! no found object
	IF (FOPAK(PAKGT).NE.TEXTYP) GOTO 98000	! not text
	N = LIB$EXTZV(4,2,FOFS(3))
	GOTO 99999
C
C $WIDTH
4200	TYPE = 2
	IF (.NOT.FO) GOTO 95000		! no found object
	IF (.NOT.FRTFND(FOFC)) THEN
	   IF (FRTLIN.OR.FRTARC.OR.FRTCUR) THEN
	      R = FRTWID
	   ELSE
	      CALL MOAN(MSG_NOTLINE)
	   ENDIF
	ENDIF
	GOTO 99999
C
C $TEXTLEN 
4300	IF (.NOT.FO) GOTO 95000			! no found object
	IF (FOPAK(PAKGT).NE.TEXTYP) GOTO 98000	! not text
	N = FOPTR
	GOTO 99999
C
C $TEXT
4400	TYPE = 3
	IF (.NOT.FO) GOTO 95000			! no found object
	IF (FOPAK(PAKGT).NE.TEXTYP) GOTO 98000	! not text
	S = FOTXT(1:FOPTR)
	LENGTH = FOPTR
	GOTO 99999
C
C $TEXTTOTAL 
4500	IF (.NOT.FO) GOTO 95000			! no found object
	IF (FOPAK(PAKGT).NE.TEXTYP) GOTO 98000	! not text
	N = FTRCTXD(CTXD_NCTX)
	GOTO 99999
C
C $MOANED
4600	N = LAST_MOANED
	GOTO 99999
C
C $LIMITS 
4700	TYPE = 2
	IF (VARARG.LT.1.OR.VARARG.GT.4) THEN
	   CALL MOAN(MSG_VARGRNG,DVAR(1:DVARL),1,4)
	ELSE
	   R = LIMITS(VARARG)	   
	ENDIF
	GOTO 99999
C
C $MHARR 
4800	IF (VARARG.LT.1.OR.VARARG.GT.MHLEN_FIRST) THEN
	   CALL MOAN(MSG_VARGRNG,DVAR(1:DVARL),1,MHLEN_FIRST)
	ELSE
	   N = MHARR_FIRST(VARARG)	   
	ENDIF
	GOTO 99999
C
C $MHLEN
4900	N = MHLEN_FIRST
	GOTO 99999
C
C $MDOFFSET	- NOTE: DOUBLE precision
5000	TYPE = 4
	IF (VARARG.LT.1.OR.VARARG.GT.2) THEN
	   CALL MOAN(MSG_VARGRNG,DVAR(1:DVARL),1,2)
	ELSE
	   R = LITES2ORG(VARARG)	   
	ENDIF
	GOTO 99999
C
C $MDSCALE
5100	TYPE = 2
	R = MAPSCL(0)			! scale of first map
	GOTO 99999
C
C $ZOOM 
5200	TYPE = 2
	R = FULLSCLDIS/SCLDIS
	GOTO 99999
C
C $FINDTOL 
5300	TYPE = 2
	IF (ZOOMNG) THEN
	   R = DFCRIT
	ELSE
	   R = DFCRIT*SCLDIS
	ENDIF
	GOTO 99999
C
C $FIXEDFIND 
5400	N = .NOT.ZOOMNG
	GOTO 99999
C
C $REFRESH
5500	N = RFFULL
	GOTO 99999
C
C $OPTBIG 
5600	N = BIGOPT
	GOTO 99999
C
C $OPTBLI  
5700	N = BNKOPT
	GOTO 99999
C
C $OPTCOM - composite text
 5800	N = COMOPT
	GOTO 99999
C
C $OPTCON
5900	N = CONOPT
	GOTO 99999
C
C $OPTHEI
6000	N = HEIOPT
	GOTO 99999
C
C $OPTEND
6100	N = ENDOPT
	GOTO 99999
C
C $OPTLEA
6200	N = LEAOPT
	GOTO 99999
C
C $OPTPAT
6300	N = PATOPT
	GOTO 99999
C
C $OPTSUB
6400	N = SUBOPT
	GOTO 99999
C
C $OPTVER
6500	N = VEROPT
	GOTO 99999
C
C OPTINF
6600	N = INFOPT
	GOTO 99999
C
C $MMFACTOR --- IFF * $MMFACTOR = sheet mm
6700	TYPE = 2
	IF (SINDEX.EQ.STATE_INITIAL) GOTO 96010
	R = 1/SCLFRT
	GOTO 99999
C
C $SCRFACTOR --- IFF * SCRFACTOR = screen mm 
6800	TYPE = 2
	R = 1.0 / SCLDIS
	GOTO 99999
C
C $COEFFS --- transformation paramenters
6900	TYPE = 2
C
C valid argument?
	IF (VARARG.LT.1.OR.VARARG.GT.6) THEN
	   CALL MOAN(MSG_VARGRNG,DVAR(1:DVARL),1,6)
C
C transformation set up
	ELSEIF (.NOT.(TRNS_FROM.AND.TRNS_TO).AND..NOT.TRNS_COEFF) THEN
	   CALL MOAN(MSG_NOTRANSFORMDEF)
C
C assign value
	ELSEIF (VARARG.EQ.1) THEN
	   R = TRNS_ROT			! rotation
	ELSEIF (VARARG.EQ.2) THEN
	   R = TRNS_SCL			! scale factor
	ELSEIF (VARARG.EQ.3) THEN
	   R = TRNS_XORG		! origin of transformation (x)
	ELSEIF (VARARG.EQ.4) THEN
	   R = TRNS_YORG		!    "    "       "        (y)
	ELSEIF (VARARG.EQ.5) THEN
	   R = TRNS_XOFF		! shift in X
	ELSEIF (VARARG.EQ.6) THEN
	   R = TRNS_YOFF		! shift in Y
	ENDIF
	GOTO 99999
C
C $REGION - Is region defined?
7000	N = 0
	IF (VARARG.LT.1.OR.VARARG.GT.MAX_REG) THEN
	   CALL MOAN(MSG_VARGRNG,DVAR(1:DVARL),1,MAX_REG)
	ELSE
	   IF (REGDEF(VARARG)) N = -1
	ENDIF
	GOTO 99999
C
C $CPXNW - X value of NW corner point
7100	XY = 1
	COR = 1
	GOTO 7810
C
C $CPYNW - Y value of NW corner point
7200	XY = 2
	COR = 1
	GOTO 7810
C
C $CPXSW - X value of SW corner point
7300	XY = 1
	COR = 2
	GOTO 7810
C
C $CPYSW - Y value of SW corner point
7400	XY = 2
	COR = 2
	GOTO 7810
C
C $CPXSE - X value of SE corner point
7500	XY = 1
	COR = 3
	GOTO 7810
C
C $CPYSE - Y value of SE corner point
7600	XY = 2
	COR = 3
	GOTO 7810
C
C $CPXNE - X value of NE corner point
7700	XY = 1
	COR = 4
	GOTO 7810
C
C $CPYNE - Y value of NE corner point
7800	XY = 2
	COR = 4
C
C valid argument?
7810	TYPE = 2
	IF (VARARG.LT.1.OR.VARARG.GT.MAXMAP) GOTO 99000
	IF (VARARG.GT.MAPTOP + 1) GOTO 99010
	IF (.NOT.MAP_EXIST(VARARG-1)) GOTO 99010
	TMPXY(1) = CRNPTS(1,COR,VARARG-1)
	TMPXY(2) = CRNPTS(2,COR,VARARG-1)
	IF (DO_FLY_TRANS) THEN
	   IF (.NOT.GEOG_TRANS_ARRAY(MAP_SYS(VARARG-1),MAP_ZONE(VARARG-1),
     &                          MAP_PARAMS(1,VARARG-1),
     &                          MAP_UNIT(VARARG-1),MAPORG(1,VARARG-1),
     &                          LITES2SYS,LITES2ZONE,LITES2PAR,
     &                          LITES2UNIT,LITES2ORG,
     &                          1,TMPXY)) GOTO 99999
	   R = TMPXY(XY)
	ELSE
	   R = TMPXY(XY) + MAPORG(XY,VARARG-1)
	ENDIF
	GOTO 99999
C
C $ACCVALUE
7900	TYPE = 3
	IF (.NOT.FO) GOTO 95000			! no found object
	IF (SINDEX.NE.STATE_AC) GOTO 96000
	IF (FTRACD(ACD_NAC).EQ.0) GOTO 97000	! no acs
	IF (THISAC(FTRACD)) GOTO 97000		! get current AC
	IF (ACBUFL(AC_L_TYPE).GT.0) THEN
	   LENGTH = EXPAND('%WS%A4',S,ACBUFL(AC_L_ACVAL))
	ELSE
	   CALL INFORM(MSG_NOVALINTC)
	ENDIF
	GOTO 99999
C
C $ACSVALUE
8000	TYPE = 3
	IF (.NOT.FO) GOTO 95000			! no found object
	IF (SINDEX.NE.STATE_AC) GOTO 96000
	IF (FTRACD(ACD_NAC).EQ.0) GOTO 97000	! no acs
	IF (THISAC(FTRACD)) GOTO 97000		! get current AC
	IF (ACBUFL(AC_L_TYPE).GT.0) THEN
	   CALL ACDFND(ACBUFL(AC_L_TYPE),.FALSE.) ! don't complain
	   LENGTH = EXPAND('%WS'//ACD_FORMAT(1:ACD_FORMAT_LEN),
     &	               S,ACBUFR(AC_L_ACVAL))
	ELSE
	   CALL INFORM(MSG_NOVALINTC)
	ENDIF
	GOTO 99999
C
C $ACDATATYPE
8100	IF (.NOT.FO) GOTO 95000			! no found object
	IF (SINDEX.NE.STATE_AC) GOTO 96000
	IF (FTRACD(ACD_NAC).EQ.0) GOTO 97000	! no acs
	IF (THISAC(FTRACD)) GOTO 97000		! get current AC
	IF (ACBUFL(AC_L_TYPE).GT.0) THEN
	   CALL ACDFND(ACBUFL(AC_L_TYPE),.FALSE.) ! don't complain
	   N = ACD_DATA_TYPE
	ELSE
	   CALL INFORM(MSG_NOVALINTC)
	ENDIF
	GOTO 99999
C
C $IFFADDR
8200	IF (.NOT.FO) GOTO 95000			! no found object
	N = FOPAK(PAKPNF)
	GOTO 99999
C
C $RANDOM
8300	TYPE = 2
	IF (GOT_VARARG) RAN_SEED = VARARG
	R = RAN(RAN_SEED)
	GOTO 99999
C
C $MAPNAME
8400	TYPE = 3
	IF (VARARG.LT.1.OR.VARARG.GT.MAXMAP) GOTO 99000
	IF (VARARG.GT.MAPTOP + 1) GOTO 99010
	IF (.NOT.MAP_EXIST(VARARG-1)) GOTO 99010
	CALL STR$COPY_DX(S,IFFNAM(1,VARARG-1))
	LENGTH = SIGCHS(IFFNAM(1,VARARG-1))
	GOTO 99999
C
C $MAXFSN for map
8500	IF (VARARG.LT.1.OR.VARARG.GT.MAXMAP) GOTO 99000
	IF (VARARG.GT.MAPTOP + 1) GOTO 99010
	IF (.NOT.MAP_EXIST(VARARG-1)) GOTO 99010
	N = MAXNF(VARARG-1)
	GOTO 99999
C
C $ACNAME	-  name of current AC type
8600	TYPE = 3
	IF (.NOT.FO) GOTO 95000			! no found object
	IF (SINDEX.NE.STATE_AC) GOTO 96000
	IF (FTRACD(ACD_NAC).EQ.0) GOTO 97000	! no acs
	IF (THISAC(FTRACD)) GOTO 97000		! get current AC
	IF (ACBUFL(AC_L_TYPE).GT.0) THEN
	   CALL ACDFND(ACBUFL(AC_L_TYPE),.FALSE.) ! don't complain
	   LENGTH = EXPAND('%WS'//ACD_NAME(1:ACD_NAME_LEN),S)
	ELSE
	   CALL INFORM(MSG_NOVALINTC)
	ENDIF
	GOTO 99999
C
C $ATTCVALUE	n -  value of attribute n as char
8700	TYPE = 3
	IF (.NOT.FO) GOTO 95000				! no found object
	IF (.NOT.(FONLIN.AND.FONVRT)) GOTO 94000	! not on vertex
C
C get rid of any absent values
	CALL ARRARR(FONATT,FOATTC,FOATTV(1,FOVRT-FOVO),
     &	            CONATT,COATTC,COATTV)
	IF (CONATT.EQ.0) GOTO 94100			! no attributes
	IF (VARARG.LT.1.OR.VARARG.GT.CONATT) GOTO 94200	! argument out of range
	LENGTH = EXPAND('%WS%A4',S,COATTV(VARARG))
	GOTO 99999
C
C $ATTDATATYPE	n -  data type of attribute n
8800	IF (.NOT.FO) GOTO 95000				! no found object
	IF (.NOT.(FONLIN.AND.FONVRT)) GOTO 94000	! not on vertex
C
C get rid of any absent values
	CALL ARRARR(FONATT,FOATTC,FOATTV(1,FOVRT-FOVO),
     &	            CONATT,COATTC,COATTV)
	IF (CONATT.EQ.0) GOTO 94100			! no attributes
	IF (VARARG.LT.1.OR.VARARG.GT.CONATT) GOTO 94200	! argument out of range
	CALL ACDFND(COATTC(VARARG),.FALSE.) ! don't complain
	N = ACD_DATA_TYPE
	LENGTH = EXPAND('%WS%A4',S,COATTV(VARARG))
	GOTO 99999
C
C $ATTIVALUE	n -  value of attribute n as integer
8900	IF (.NOT.FO) GOTO 95000				! no found object
	IF (.NOT.(FONLIN.AND.FONVRT)) GOTO 94000	! not on vertex
C
C get rid of any absent values
	CALL ARRARR(FONATT,FOATTC,FOATTV(1,FOVRT-FOVO),
     &	            CONATT,COATTC,COATTV)
	IF (CONATT.EQ.0) GOTO 94100			! no attributes
	IF (VARARG.LT.1.OR.VARARG.GT.CONATT) GOTO 94200	! argument out of range
	N = COATTV(VARARG)
	GOTO 99999
C
C $ATTRVALUE	n - value of attribute n as real
9000	TYPE = 2
	IF (.NOT.FO) GOTO 95000				! no found object
	IF (.NOT.(FONLIN.AND.FONVRT)) GOTO 94000	! not on vertex
C
C get rid of any absent values
	CALL ARRARR(FONATT,FOATTC,FOATTV(1,FOVRT-FOVO),
     &	            CONATT,COATTC,COATTV)
	IF (CONATT.EQ.0) GOTO 94100			! no attributes
	IF (VARARG.LT.1.OR.VARARG.GT.CONATT) GOTO 94200	! argument out of range
	IEQUV = COATTV(VARARG)
	R = REQUV			! see equivalence
	GOTO 99999
C
C $ATTSVALUE	n - value of attribute n as string
9100	TYPE = 3
	IF (.NOT.FO) GOTO 95000				! no found object
	IF (.NOT.(FONLIN.AND.FONVRT)) GOTO 94000	! not on vertex
C
C get rid of any absent values
	CALL ARRARR(FONATT,FOATTC,FOATTV(1,FOVRT-FOVO),
     &	            CONATT,COATTC,COATTV)
	IF (CONATT.EQ.0) GOTO 94100			! no attributes
	IF (VARARG.LT.1.OR.VARARG.GT.CONATT) GOTO 94200	! argument out of range
	CALL ACDFND(COATTC(VARARG),.FALSE.) ! don't complain
	LENGTH = EXPAND('%WS'//ACD_FORMAT(1:ACD_FORMAT_LEN),
     &	               S,COATTV(VARARG))
	GOTO 99999
C
C
C $ATTTOTAL	n - total number of attributes at point
9200	IF (.NOT.FO) GOTO 95000				! no found object
	IF (.NOT.(FONLIN.AND.FONVRT)) GOTO 94000	! not on vertex
C
C get rid of any absent values
	CALL ARRARR(FONATT,FOATTC,FOATTV(1,FOVRT-FOVO),
     &	            CONATT,COATTC,COATTV)
	N = CONATT
	GOTO 99999
C
C $ATTCODE	n - code of attribute n
9300	IF (.NOT.FO) GOTO 95000				! no found object
	IF (.NOT.(FONLIN.AND.FONVRT)) GOTO 94000	! not on vertex
C
C get rid of any absent values
	CALL ARRARR(FONATT,FOATTC,FOATTV(1,FOVRT-FOVO),
     &	            CONATT,COATTC,COATTV)
	IF (CONATT.EQ.0) GOTO 94100			! no attributes
	IF (VARARG.LT.1.OR.VARARG.GT.CONATT) GOTO 94200	! argument out of range
	N = COATTC(VARARG)
	GOTO 99999
C
C $ATTNAME	n -  name of attribute n
9400	TYPE = 3
	IF (.NOT.FO) GOTO 95000				! no found object
	IF (.NOT.(FONLIN.AND.FONVRT)) GOTO 94000	! not on vertex
C
C get rid of any absent values
	CALL ARRARR(FONATT,FOATTC,FOATTV(1,FOVRT-FOVO),
     &	            CONATT,COATTC,COATTV)
	IF (CONATT.EQ.0) GOTO 94100			! no attributes
	IF (VARARG.LT.1.OR.VARARG.GT.CONATT) GOTO 94200	! argument out of range
	CALL ACDFND(COATTC(VARARG),.FALSE.) ! don't complain
	LENGTH = EXPAND('%WS'//ACD_NAME(1:ACD_NAME_LEN),S)
	GOTO 99999
C
C $ASK_REAL - value returned by last call of ASK * (was also TABLEXY)
9500	IF (ASK_REAL_NUM.LE.0) GOTO 99020
	IF (VARARG.LT.1.OR.VARARG.GT.ASK_REAL_NUM) THEN
	   CALL MOAN(MSG_VARGRNG,DVAR(1:DVARL),1,ASK_REAL_NUM)
	ELSE
	   TYPE = 2
	   R = ASK_REAL(VARARG)
	ENDIF
	GOTO 99999
C
C $HWTYPE
9600	TYPE = 3
	S = PNAM(1:PNAM_LEN)
	LENGTH = PNAM_LEN
	GOTO 99999
C
C $VERSION
9700	TYPE = 3
	LENGTH = INDEX(VNAM(1:VNAM_LEN),' ')
	IF (LENGTH.EQ.0) THEN
	   LENGTH = VNAM_LEN
	ELSE
	   LENGTH = LENGTH-1
	ENDIF
	S = VNAM(1:LENGTH)
	GOTO 99999
C
C $LAYER_EXIST - Is layer defined?
9800	IF (VARARG.LT.0.OR.VARARG.GT.TOPLAY) THEN
	   CALL MOAN(MSG_VARGRNG,DVAR(1:DVARL),0,TOPLAY)
	ELSE
	   IF (FNDOVR(VARARG).GE.0) N = -1
	ENDIF
	GOTO 99999
C
C $DATETIME
9900	TYPE = 3
	LENGTH = 23
	CALL LIB$DATE_TIME(S)
	GOTO 99999
C
C $DISPLAY
10000	IF (SINDEX.EQ.STATE_INITIAL) GOTO 96010
	IF (.NOT.NODISP) N = -1
	GOTO 99999
C
C $RESPOND
10100	IF (RSPINP()) N = -1
	GOTO 99999
C
C $TABLE
10200	IF (SINDEX.EQ.STATE_INITIAL) GOTO 96010
	IF (TABINI) N = -1
	GOTO 99999
C
C $LATITUDE
10300	TYPE = 4
	IF (SINDEX.EQ.STATE_INITIAL) GOTO 96010
	ICOORD(1) = CSXY(1) + LITES2ORG(1)
	ICOORD(2) = CSXY(2) + LITES2ORG(2)
C
C note: outunit is in seconds
	IF (GEOG_TRANS(ICOORD,LITES2SYS, LITES2ZONE, LITES2PAR, 
     &	               LITES2UNIT,OCOORD,OUTSYS,OUTZONE,PAROUT,OUTUNIT))
     &	   R = OCOORD(2)/3600D0
	GOTO 99999
C
C $LONGITUDE
10400	TYPE = 4
	IF (SINDEX.EQ.STATE_INITIAL) GOTO 96010
	ICOORD(1) = CSXY(1) + LITES2ORG(1)
	ICOORD(2) = CSXY(2) + LITES2ORG(2)
C
C note: outunit is in seconds
	IF (GEOG_TRANS(ICOORD,LITES2SYS, LITES2ZONE, LITES2PAR,
     &	               LITES2UNIT,OCOORD,OUTSYS,OUTZONE,PAROUT,OUTUNIT))
     &	   R = OCOORD(1)/3600D0
	GOTO 99999
C
C $IMAGEVALUE
10500	IF (SINDEX.EQ.STATE_INITIAL) GOTO 96010
	CALL IMAGEVALUE(TYPE,N,R,1)	! 1 is value
	GOTO 99999
C
C $SYSELAPSED
10600	TYPE = 2
	CALL LIB$STAT_TIMER(1,NOW_TIME)
	CALL LIB$EDIV(-100000,NOW_TIME,I,IEQUV)
	R = I/100.0
	GOTO 99999
C
C $SYSCPU
10700	TYPE = 2
	CALL LIB$STAT_TIMER(2,I)
	R = I/100.0
	GOTO 99999
C
C $SYSBUFIO
10800	COR = 3
	GOTO 11001
C
C $SYSDIRIO
10900	COR = 4
	GOTO 11001
C
C $SYSFAULTS
11000	COR = 5
11001	CALL LIB$STAT_TIMER(COR,N)
	GOTO 99999
C
C $IMAGEGRADIENT
11100	IF (SINDEX.EQ.STATE_INITIAL) GOTO 96010
	CALL IMAGEVALUE(TYPE,N,R,2)	! 2 is gradient
	GOTO 99999
C
C $IMAGEASPECT
11200	IF (SINDEX.EQ.STATE_INITIAL) GOTO 96010
	CALL IMAGEVALUE(TYPE,N,R,3)	! 3 is aspect
	GOTO 99999
C
C $MODTCC
11300	IF (SINDEX.NE.STATE_MODIFY) GOTO 96010
	IF (COIPAK(PAKGT).NE.TEXTYP) GOTO 98000
C
C must either be in subtext mode, or only have a single text
	IF (COICTXD(CTXD_NCTX).GT.1.AND..NOT.SUBTXT) THEN
	   CALL MOAN(MSG_MULTCOMP)
	   GOTO 99999
	ENDIF
	N = CONFS(1)
	GOTO 99999
C
C $PRIVPOINT - has point got an attribute on the "privileged point" list
11400	IF (.NOT.FO) GOTO 95000				! no found object
	IF (.NOT.(FONLIN.AND.FONVRT)) GOTO 94000	! not on vertex
C
C does point have attributes on privileged list?
	IF (FONATT.GT.0.AND.PRIV_PT_LIST.GT.0) THEN
	   N = CHK_PRIV_LIST(PRIV_PT_LIST,FONATT,FOATTC,
     &	                         FOATTV(1,FOVRT-FOVO))
	ENDIF
	GOTO 99999
C
C $TCC - Text component code for current text
11500	IF (.NOT.FO) GOTO 95000		! no found object
	IF (FOPAK(PAKGT).NE.TEXTYP) GOTO 98000
C
	N = FOFS(1)
	GOTO 99999
C
C $CURSZ			! Z coord of current cursor position
11600	TYPE = 2
	IF (CSZI.EQ.IFF_ABSENT) GOTO 99020
	R = CSXY(3)
	GOTO 99999
C
C $CURSZ_EXIST			! Cursor has a Z value
11700	IF (CSZI.NE.IFF_ABSENT) N = -1
	GOTO 99999
C
C $COLOUR
11800	IF (.NOT.FO) GOTO 95000		! no found object
	IF (.NOT.FRTFND(FOFC)) N = FRTCOL
	GOTO 99999
C
C $CURSINREGION		! = -1 for inside, 0 for outside, 1 for on
11900	IF (.NOT.DEFREG(VARARG)) GOTO 99999	! not defined
	IF (PINREG(CSXY,VARARG,INSIDE)) THEN	! on region
	   N = 1
	ELSEIF (INSIDE) THEN
	   N= -1
	ENDIF
	GOTO 99999
C
C $IMAGEROWS		! rows in image
12000	ROWS = .TRUE.
	GOTO 12101
C
C $IMAGECOLUMNS		! columns in image
12100	ROWS = .FALSE.
12101 	IF (VARARG.LE.0.OR.VARARG.GT.MAXIMAGE) THEN
	   CALL MOAN(MSG_IMAGRNG,1,MAXIMAGE)
	   GOTO 99999
	ENDIF
	IF (IMAGE_TYPE(VARARG).EQ.0) THEN
	   CALL MOAN(MSG_IMNOTEXIST,VARARG)
	   GOTO 99999
	ENDIF
	IF (ROWS) THEN
	   N = IMAGE_ROWS(VARARG)
	ELSE
	   N = IMAGE_COLUMNS(VARARG)
	ENDIF
	GOTO 99999
C
C $FILELINE
12200	TYPE = 3
	IF (FF_LRRLEN .NE. 0) THEN
	   S = FF_LINEREAD(1:FF_LRRLEN)
	ENDIF
	LENGTH = FF_LRRLEN
	GOTO 99999
C
C $EOF
12300	IF (FF_EOF) N = -1
	GOTO 99999
C
C $IMAGEORIGINX
12400	XORY = 1
	GOTO 12501
C
C $IMAGEORIGINY
12500	XORY = 2
12501 	IF (VARARG.LE.0.OR.VARARG.GT.MAXIMAGE) THEN
	   CALL MOAN(MSG_IMAGRNG,1,MAXIMAGE)
	   GOTO 99999
	ENDIF
	IF (IMAGE_TYPE(VARARG).EQ.0) THEN
	   CALL MOAN(MSG_IMNOTEXIST,VARARG)
	   GOTO 99999
	ENDIF
	TYPE = 4
	R = IMAGE_ORIGIN(XORY,VARARG)
	GOTO 99999
C
C $IMAGEPIXSX
12600	XORY = 1
	GOTO 12701
C
C $IMAGEPIXSY
12700	XORY = 2
12701 	IF (VARARG.LE.0.OR.VARARG.GT.MAXIMAGE) THEN
	   CALL MOAN(MSG_IMAGRNG,1,MAXIMAGE)
	   GOTO 99999
	ENDIF
	IF (IMAGE_TYPE(VARARG).EQ.0) THEN
	   CALL MOAN(MSG_IMNOTEXIST,VARARG)
	   GOTO 99999
	ENDIF
	TYPE = 2
	R = IMAGE_PIXELSIZE(XORY,VARARG)
	GOTO 99999
C
C $CURSINIMAGE	 - which selected image are we in (0 if none)
12800	N = IMAGENUMBER(NOW_TIME)	! dummy argument
	GOTO 99999
C
C $ DISPLAYCOLUMNS
12900	XORY = 1
	GOTO 13001
C
C $DISPLAYROWS
13000	XORY = 2
13001	IF (SINDEX.EQ.STATE_INITIAL) THEN
	   GOTO 96010
	ELSEIF (DISPLAY_CURRENT.EQ.0) THEN
	   CALL MOAN(MSG_NOCURDISP)
	   CALL LEARN(MSG_USEDISPNUM)
	   GOTO 99999
	ELSEIF (.NOT.DISPLAY_EXISTS(DISPLAY_CURRENT)) THEN
	   CALL MOAN(MSG_DISPNOTEXISTS,DISPLAY_CURRENT)
	   CALL LEARN(MSG_USEDISPCRE)
	   GOTO 99999
	ENDIF
	TYPE = 1
	IF (XORY.EQ.1) THEN
	   N = DISPLAY_RASX(DISPLAY_CURRENT)
	ELSE
	   N = DISPLAY_RASY(DISPLAY_CURRENT)
	ENDIF
	GOTO 99999
C
C $HADSELECT	 - had a selection since last SELECT ALL?
13100	N = .NOT.(SAMAPS.AND.SALAYS.AND.SAFCS.AND.SAFSNS.AND.SACATS.AND.
     &	          SASTYS.AND.SAREGS.AND.SAFLGS.AND.SAACS.AND.SAGEOMS.AND.
     &	          SAPRIOS)
	GOTO 99999
C
C $HADSELECT_MAP - had a selection since last SELECT ALL MAP?
13200	N = .NOT.SAMAPS
	GOTO 99999
C
C $HADSELECT_LAYER	 - had a selection since last SELECT ALL LAYER?
13300	N = .NOT.SALAYS
	GOTO 99999
C
C $HADSELECT_FC	 - had a selection since last SELECT ALL FC?
13400	N = .NOT.SAFCS
	GOTO 99999
C
C $HADSELECT_FSN - had a selection since last SELECT ALL FSN?
13500	N = .NOT.SAFSNS
	GOTO 99999
C
C $HADSELECT_CATEGORYSTYLE - had a selection since last
C                            SELECT ALL CATEGORY?
13600	N = .NOT.SACATS
	GOTO 99999
C
C $HADSELECT_CATEGORY - had a selection since last SELECT ALL CATEGORY?
13700	N = .NOT.SASTYS
	GOTO 99999
C
C $HADSELECT_REGION - had a selection since last SELECT ALL REGION?
13800	N = .NOT.SAREGS
	GOTO 99999
C
C $HADSELECT_AC	 - had a selection since last SELECT ALL AC?
13900	N = .NOT.SAACS
	GOTO 99999
C
C $HADSELECT_FLAGS	 - had a selection since last SELECT ALL FLAGS?
14000	N = .NOT.SAFLGS
	GOTO 99999
C
C $REGIONAREA - returns area enclosed by a region
14100	IF (.NOT.DEFREG(VARARG)) GOTO 99999	! not defined
C
C sector (and calculate area of) region if required
	IF ((REGDEF(VARARG).AND.REGDEF_SEC).EQ.0) THEN
	   IF (SECREG(VARARG)) GOTO 99020
	ENDIF
	TYPE = 4
	R = REGAREA(VARARG)
	GOTO 99999
C
C $DISPLAYNUMBER		- current display number
14200	N = DISPLAY_CURRENT
	GOTO 99999
C
C $OVERLAYNUMBER		- current display number
14300	N = OVERLAY_CURRENT
	GOTO 99999
C
C $CONSTRUCTION_LAYER	- current contruction layer
14400	N = CONLAY
	GOTO 99999
C
C $CONSTRUCTION_FC	- current contruction feature cod
14500	N = CONFC
	GOTO 99999
C
C $CONSTRUCTION_MAP	- current contruction map
14600	N = CONMAP + 1
	GOTO 99999
C
C $IMAGE_EXIST n		- true when IMAGE n exists
14700	IF (VARARG.LE.0.OR.VARARG.GT.MAXIMAGE) THEN
	   CALL MOAN(MSG_IMAGRNG,1,MAXIMAGE)
	   GOTO 99999
	ENDIF
	N = IMAGE_TYPE(VARARG).NE.0
	GOTO 99999
C
C $MAP_SHEET
14800	IF (SINDEX.EQ.STATE_INITIAL) GOTO 96010
C
C get scale (as integer!!) - either from argument, or scale of first map
	IF (GOT_VARARG) THEN
	   I = VARARG
	ELSE
	   I = MAPSCL(0)
	ENDIF
C
C get absolute coordinates, and convert to geographicals if possible
	ICOORD(1) = CSXY(1) + LITES2ORG(1)
	ICOORD(2) = CSXY(2) + LITES2ORG(2)
C
C pass coordinates and scale to user written routine
	IF (GET_MAP_SHEET(S,LENGTH,I,ICOORD)) THEN
	   TYPE = 3
	ELSE
	   IF (.NOT.MOANED) CALL MOAN(MSG_GETSHEETERROR)
	ENDIF
	GOTO 99999
C
C $MAP_NUMBER - value returned by last call of ASK MAP
14900	IF (ASK_INT_NUM.LE.0) GOTO 99020
	N = ASK_INT(1)
	GOTO 99999
C
C $IMAGE_SETUP - true when IMAGE SETUP has been given
15000	N = SETUP
	GOTO 99999
C
C $MAPTOTAL - number of maps so far specified
15100	N = 0
	DO 15101 I=0,MAPTOP
	   IF (MAP_EXIST(I)) N = N+1
15101	CONTINUE
	GOTO 99999
C
C $IFF_REVISION - revision level of specified (input) map
15200	IF (VARARG.LT.1.OR.VARARG.GT.MAXMAP) GOTO 99000
	IF (VARARG.GT.MAPTOP + 1) GOTO 99010
	IF (.NOT.MAP_EXIST(VARARG-1)) GOTO 99010
	N = LIB$EXTZV(VARARG-1,1,MAP_ORLEV_B_MAP)
	GOTO 99999
C
C $PID - process identifier
15300	TYPE = 3
	RETCOD = LIB$GETJPI(JPI$_PID,,,,S,LENGTH)
	IF (.NOT.RETCOD) THEN
	   CALL MOAN(MSG_ERRINGETJPI)
	   CALL LITES2_SIGNAL(RETCOD)
	ENDIF
	GOTO 99999
C
C $UIC - users identification code
15400	TYPE = 3
	RETCOD = LIB$GETJPI(JPI$_UIC,,,,S,LENGTH)
	IF (.NOT.RETCOD) THEN
	   CALL MOAN(MSG_ERRINGETJPI)
	   CALL LITES2_SIGNAL(RETCOD)
	ENDIF
	GOTO 99999
C
C $EXIT_RANGE
15500	TYPE = 4
	IF (VARARG.LT.1.OR.VARARG.GT.4) THEN
	   CALL MOAN(MSG_VARGRNG,DVAR(1:DVARL),1,4)
	ELSEIF (.NOT.HAD_EXIT_RANGE) THEN
	   GOTO 99020
	ELSE
	   R = EXIT_RANGE(VARARG)	   
	ENDIF
	GOTO 99999
C
C $RANGE_XMIN n
15600	I = 1
	GOTO 15950
C
C $RANGE_XMAX n
15700	I = 2
	GOTO 15950
C
C $RANGE_YMIN n
15800	I = 3
	GOTO 15950
C
C $RANGE_YMAX n
15900	I = 4
	GOTO 15950
C
15950	TYPE = 2			! real - same as $cursx
C
C not valid if in initial state, since MAPORG is not set up properly
C (LITES2ORG not defined yet)
	IF (SINDEX.EQ.STATE_INITIAL) GOTO 96010
C
C check for valid map
	IF (VARARG.LT.1.OR.VARARG.GT.MAXMAP) GOTO 99000
	IF (VARARG.GT.MAPTOP + 1) GOTO 99010
	IF (.NOT.MAP_EXIST(VARARG-1)) GOTO 99010
C
C give coordinates in LITES2 space
	IF (DO_FLY_TRANS) THEN		! range already in LITES2 space
	   IF (I.LE.2) THEN
	      R = RANGE(I,VARARG-1)
	   ELSE
	      R = RANGE(I,VARARG-1)
	   ENDIF
	ELSE
	   IF (I.LE.2) THEN
	      R = RANGE(I,VARARG-1) + MAPORG(1,VARARG-1)	! X coordinate
	   ELSE
	      R = RANGE(I,VARARG-1) + MAPORG(2,VARARG-1)	! Y coordinate
	   ENDIF
	ENDIF
	GOTO 99999
C
C $ASK_CHAR - value returned by last call of ASK STR_*
16000	IF (ASK_CHAR_NUM.LE.0) GOTO 99020
	IF (VARARG.LT.1.OR.VARARG.GT.ASK_CHAR_NUM) THEN
	   CALL MOAN(MSG_VARGRNG,DVAR(1:DVARL),1,ASK_CHAR_NUM)
	ELSE
	   TYPE = 3
	   CALL STR$COPY_DX(S,ASK_CHAR(1,VARARG))
C
C get length from dynamic descriptor
	   CALL STR$ANALYZE_SDESC(ASK_CHAR(1,VARARG),WLEN,I)
	   LENGTH = MIN(WLEN,LEN(S))			! I*2 -> I*4
	ENDIF
	GOTO 99999
C
C $MODTEXT	- text (in modify state)
16100	IF (SINDEX.NE.STATE_MODIFY) GOTO 96010
	IF (COIPAK(PAKGT).NE.TEXTYP) GOTO 98000
C
C must either be in subtext mode, or only have a single text
	IF (COICTXD(CTXD_NCTX).GT.1.AND..NOT.SUBTXT) THEN
	   CALL MOAN(MSG_MULTCOMP)
	   GOTO 99999
	ENDIF
	TYPE = 3
	LENGTH = CPYSTR(COIDSC,S)
	GOTO 99999
C
C $MODTEXTLEN	- length of text (in modify state)
16200	IF (SINDEX.NE.STATE_MODIFY) GOTO 96010
	IF (COIPAK(PAKGT).NE.TEXTYP) GOTO 98000
C
C must either be in subtext mode, or only have a single text
	IF (COICTXD(CTXD_NCTX).GT.1.AND..NOT.SUBTXT) THEN
	   CALL MOAN(MSG_MULTCOMP)
	   GOTO 99999
	ENDIF
	N = COILEN
	GOTO 99999
C
C $FILESTATUS - how specified file was opened
16300	IF (VARARG.LE.0.OR.VARARG.GT.FFHI) THEN
	   CALL MOAN(MSG_VARGRNG,DVAR(1:DVARL),1,FFHI)
	ELSE
	   N = FF_HOWOPEN(VARARG)
	ENDIF
	GOTO 99999
C
C $CONSTRUCTION_GT	- graphical type ofcurrent contruction feature code
16400	IF (.NOT.FRTFND(CONFC)) N = FRTGT
	GOTO 99999
C
C $MAPSTATUS - how specified map was opened
16500	IF (VARARG.LT.1.OR.VARARG.GT.MAXMAP) THEN
	   N = 0			! not read yet
	ELSEIF (VARARG.GT.MAPTOP + 1) THEN
	   N = 0			! not read yet
	ELSEIF (.NOT.MAP_EXIST(VARARG-1)) THEN
	   N = 0			! not read yet
	ELSEIF (.NOT.MAPWRK(VARARG-1)) THEN
	   N = 0			! not read yet
	ELSEIF (MAPRO(VARARG-1)) THEN
	   N = 1			! read only
	ELSEIF (MAPINS(VARARG-1)) THEN
	   N = 3			! insitu
	ELSE
	   N = 2			! iff
	ENDIF
	GOTO 99999
C
C $ASK_INT - value returned by last call of ASK command
16600	IF (ASK_INT_NUM.LE.0) GOTO 99020
	IF (VARARG.LT.1.OR.VARARG.GT.ASK_INT_NUM) THEN
	   CALL MOAN(MSG_VARGRNG,DVAR(1:DVARL),1,ASK_INT_NUM)
	ELSE
	   N = ASK_INT(VARARG)
	ENDIF
	GOTO 99999
C
C $IMAGENAME 
16700	TYPE = 3
	IF (VARARG.LT.1.OR.VARARG.GT.MAXIMAGE) THEN
	   CALL MOAN(MSG_IMAGRNG,1,MAXIMAGE)
	ELSEIF (IMAGE_TYPE(VARARG).EQ.0) THEN
	   CALL MOAN(MSG_IMNOTEXIST,VARARG)
	ELSE
	   S = IMAGNAM(VARARG)
	   LENGTH = SIGCHS(S)
	ENDIF
	GOTO 99999
C
C $P - macro argument
16800	TYPE = 3
	IF (VARARG.LE.0) THEN
	   CALL MOAN(MSG_VARGRNG,DVAR(1:DVARL),1,'7FFFFFFF'X)
	ELSE
	   LENGTH = PVALUE(S,VARARG,1)
	ENDIF
	GOTO 99999
C
C $PLINE - string of macro arguments
16900	TYPE = 3
	LENGTH = PVALUE(S,VARARG,2)
	GOTO 99999
C
C $PCOUNT - number of Ps in PLINE
17000   N = PVALUE(S,VARARG,3)
	GOTO 99999
C
C $IMAGE_RANGE_XMIN n
17100	I = 1
	GOTO 17410
C
C $IMAGE_RANGE_XMAX n
17200	I = 2
	GOTO 17410
C
C $IMAGE_RANGE_YMIN n
17300	I = 3
	GOTO 17410
C
C $IMAGE_RANGE_YMAX n
17400	I = 4
17410	TYPE = 4				! in absolute coords
	IF (VARARG.LT.1.OR.VARARG.GT.MAXIMAGE) THEN
	   CALL MOAN(MSG_IMAGRNG,1,MAXIMAGE)
	ELSEIF (IMAGE_TYPE(VARARG).EQ.0) THEN
	   CALL MOAN(MSG_IMNOTEXIST,VARARG)
	ELSE
	   IF (I.LE.2) THEN
	      R = IMAGE_ORIGIN(1,VARARG) - IMAGE_PIXELSIZE(1,VARARG)*0.5
	      IF (I.EQ.2) R = R +
     &	                  IMAGE_PIXELSIZE(1,VARARG)*IMAGE_COLUMNS(VARARG)
	   ELSE
	      R = IMAGE_ORIGIN(2,VARARG) - IMAGE_PIXELSIZE(2,VARARG)*0.5
	      IF (I.EQ.4) R = R + 
     &	                  IMAGE_PIXELSIZE(2,VARARG)*IMAGE_ROWS(VARARG)
	   ENDIF
	ENDIF
	GOTO 99999
C
C $GT_FC - graphical type of specified feature code
17500	IF (.NOT.FRTFND(VARARG,.FALSE.)) N = FRTGT
	GOTO 99999
C
C $OVERLAY - overlay that feature will be drawn into
17600	IF (.NOT.FO) GOTO 95000		! no found object
	IF (.NOT.OVERLAYS_INUSE) THEN
	   CALL MOAN(MSG_NOOVERLAYS)
	ELSE
	   N = GET_OVERLAY_PLANE(FOPAK)
	ENDIF
	GOTO 99999
C
C $OPTPSIZE
17700	N = POIOPT
	GOTO 99999
C
C $ABSX
17800	TYPE = 4
	R = DBLE(CSXY(1)) + LITES2ORG(1)	   
	GOTO 99999
C
C $ABSY
17900	TYPE = 4
	R = DBLE(CSXY(2)) + LITES2ORG(2)	   
	GOTO 99999
C
C $GEOG_STRING
18000	TYPE = 3
	IF (SINDEX.EQ.STATE_INITIAL) GOTO 96010
	ICOORD(1) = CSXY(1) + LITES2ORG(1)
	ICOORD(2) = CSXY(2) + LITES2ORG(2)
C
C note: outunit is in seconds
	IF (GEOG_TRANS(ICOORD,LITES2SYS, LITES2ZONE, LITES2PAR,
     &	               LITES2UNIT,OCOORD,OUTSYS,OUTZONE,PAROUT,OUTUNIT))
     &	   LENGTH = EXPAND('%WS%S %S',S,
     &	                    DISPANG(OCOORD(2),READANG_LATITUDE),
     &	                    DISPANG(OCOORD(1),READANG_LONGITUDE))
	GOTO 99999
C
C $IMAGE_RANGE_ZMIN n
18100	I = 1
	GOTO 18210
C
C $IMAGE_RANGE_ZMAX n
18200	I = 2
18210	TYPE = 4			! for compatability with XMAX etc
	IF (VARARG.LT.1.OR.VARARG.GT.MAXIMAGE) THEN
	   CALL MOAN(MSG_IMAGRNG,1,MAXIMAGE)
	ELSEIF (IMAGE_TYPE(VARARG).EQ.0) THEN
	   CALL MOAN(MSG_IMNOTEXIST,VARARG)
	ELSE
	   R = IMAGE_RANGE(I,VARARG)
	ENDIF
	GOTO 99999
C
C $FILESELECTED
18300	N = FF_CURRENT
	IF (FF_HOWOPEN(N) .EQ. FF_CLOSED) N = 0
	GOTO 99999
C
C $LENGTH
18400	TYPE = 2
	R = EXDIST()
	GOTO 99999
C
C $TOPFC
18500	IF (.NOT.HADFRT) THEN
	   CALL MOAN(MSG_NOFILENAME,'FRT')
	ELSE
	   CALL PUTLNG(%VAL(FRTINT_LOC+(FRTCNT-1)*6*2),INTBY2)
	   N = INTBY2(1)			! extend to long
	ENDIF
	GOTO 99999
C
C $FRT
18600	IF (.NOT.HADFRT) THEN
	   CALL MOAN(MSG_NOFILENAME,'FRT')
	ELSE
	   TYPE = 3
	   S = FRTTIT
	   LENGTH = SIGCHS(S)
	ENDIF
	GOTO 99999
C
C $SRI
18700	IF (.NOT.HADFRT .OR. NEWSRI ) THEN
	   CALL MOAN(MSG_FILENOTREAD,'SRI')
	ELSE
	   TYPE = 3
	   S = SRITIT
	   LENGTH = SIGCHS(S)
	ENDIF
	GOTO 99999
C
C $TRI
18800	IF (.NOT.HADFRT .OR. NEWTRI) THEN
	   CALL MOAN(MSG_FILENOTREAD,'TRI')
	ELSE
	   TYPE = 3
	   S = TRITIT
	   LENGTH = SIGCHS(S)
	ENDIF
	GOTO 99999
C
C $TOPMAP
18900	N = MAPTOP+1
	GOTO 99999
C
C $FILENAME - name of specified file
19000	IF (VARARG.LE.0.OR.VARARG.GT.FFHI) THEN
	   CALL MOAN(MSG_VARGRNG,DVAR(1:DVARL),1,FFHI)
	ELSEIF(FF_HOWOPEN(VARARG) .EQ. FF_CLOSED) THEN
	   CALL MOAN(MSG_FILNOTOPN,VARARG)
	ELSE
	   TYPE = 3
	   S = FF_LST(VARARG)
	   LENGTH = FF_LEN(VARARG)
	ENDIF
	GOTO 99999
C
C $BEARING
19100	TYPE = 2
	IF (.NOT.FO) GOTO 95000		! no found object
	IF (FOPAK(PAKGT).GE.CLOTYP.AND.FOPAK(PAKGT).LE.FULTYP) THEN
	   CALL MOAN(MSG_NOANGLEARC)
	   GOTO 99999
	ENDIF
	R = ANGLE_BEARING(ANGLE())
	GOTO 99999
C
C $SIZE_FC - size entry of specified feature code
19200	IF (.NOT.HADFRT) THEN
	   CALL MOAN(MSG_NOFILENAME,'FRT')
	ELSE	
	   TYPE = 2
	   IF (.NOT.FRTFND(VARARG)) THEN
	      R = FRTSIZ
	   ELSE
	      CALL MOAN(MSG_BADCODE,VARARG)
	   ENDIF
	ENDIF
	GOTO 99999
C
C $RANGE_PROBLEM - have there been points outside the sectored range? 
19300	N = RANGE_PROBLEM
	GOTO 99999
C
C $FLY_TRANSFORMATION
19400	N = DO_FLY_TRANS
	GOTO 99999
C
C $GROUP
19500 	IF (.NOT.FO) GOTO 95000		! no found object
	IF (.NOT.HADFRT) THEN
	   CALL MOAN(MSG_NOFILENAME,'FRT')
	ELSE
	   CALL GET_GROUPS(FOFC,S,LENGTH)
	   TYPE = 3
	ENDIF
	GOTO 99999
C
C $GROUP_FC
19600	IF (.NOT.HADFRT) THEN
	   CALL MOAN(MSG_NOFILENAME,'FRT')
	ELSE
	   IF (FRTFND(VARARG)) THEN
	      CALL MOAN(MSG_BADCODE,VARARG)
	   ELSE
	      CALL GET_GROUPS(VARARG,S,LENGTH)
	   ENDIF
	   TYPE = 3
	ENDIF
	GOTO 99999
C
C $USER - users name
19700	TYPE = 3
	RETCOD = LIB$GETJPI(JPI$_USERNAME,,,,S,LENGTH)
	LENGTH = SIGCHS(S)			! fixed length of 12
	IF (.NOT.RETCOD) THEN
	   CALL MOAN(MSG_ERRINGETJPI)
	   CALL LITES2_SIGNAL(RETCOD)
	ENDIF
	GOTO 99999
C
C $INVISIBLE
19800	IF (.NOT.FO) GOTO 95000		! no found object
C	   
	IF (FONVRT) THEN
	   CALL MOAN(MSG_NOTBETWEEN)
	   CALL LEARN(MSG_USEFRAC)
	ELSE
	   IF (FOPAK(PAKGT).EQ.LINTYP .OR.
     &	       FOPAK(PAKGT).EQ.CURTYP .OR.
     &	       FOPAK(PAKGT).EQ.STRTYP .OR.
     &	       FOPAK(PAKGT).EQ.ARETYP) THEN	! linear
	      N = (FOFLG(FOVRT+1-FOVO).AND.1).EQ.0
	   ELSE
	      GOTO 96010
	   ENDIF
	ENDIF	   
	GOTO 99999
C
C $PI
19900	TYPE = 4			! double precision
	R = PI
	GOTO 99999
C
C $CLOSED
20000	IF (.NOT.FO) GOTO 95000		! no found object
C
	IF (FOPAK(PAKGT).NE.LINTYP .AND.
     &	    FOPAK(PAKGT).NE.CURTYP .AND.
     &	    FOPAK(PAKGT).NE.STRTYP .AND.
     &	    FOPAK(PAKGT).NE.ARETYP) THEN	! no linear found object
	   CALL MOAN(MSG_NOTLINE)
	ELSE
	   N = (FOTHIS(1) .EQ. FOTHAT(1)) .AND.
     &		(FOTHIS(2) .EQ. FOTHAT(2))
	ENDIF
	GOTO 99999
C
C $GEOMETRY - Is geometry defined?
20100	N = 0
	IF (VARARG.LT.1.OR.VARARG.GT.MAX_GEOM) THEN
	   CALL MOAN(MSG_INVALGEOMNO,VARARG,1,MAX_GEOM)
	ELSE
	   N = GEOMETRY(VARARG) .NE. 0
	ENDIF
	GOTO 99999
C
C $GEOMETRY_TYPE - type of geometry (0, 1 or 2)
20200	CALL GEOM_TYPE(VARARG,N,G_COUNT)
	GOTO 99999
C
C $CURSINGEOMETRY - is cursor in an area geometry
C		 = -1 for inside, 0 for outside, 1 for on
20300	IF (.NOT.GEOM_TYPE(VARARG,G_TYPE,G_COUNT)) GOTO 99999
	IF (G_TYPE .NE. 2) THEN
	   CALL MOAN(MSG_GEOMONLYVALID,'System Variable','area')
	ELSE
	   CALL CALLR(%VAL(GEOMETRY(VARARG)),
     &		%VAL(CSXY(1)),%VAL(CSXY(2)),
     &		I,RETCOD,
     &		%VAL(GEOM_ADDRESSES(XTEST_PT_IN)))
	   IF (RETCOD .NE. 0) THEN
	      IF (RETCOD .LT. 0) THEN
		 CALL MOAN(MSG_STRING,
     &		      'Unexpected unrecoverable error with geometry.')
	      ELSE
		 CALL CALLR(%VAL(RETCOD),
     &		      RETCOD,
     &		      %VAL(GEOM_ADDRESSES(XPR_MESS)))
		 CALL WRITEF
	      ENDIF
	      GOTO 99020
	   ENDIF
	ENDIF
	IF (I .EQ. 0) THEN	! on boundary
	   N = 1
	ELSEIF (I .EQ. 1) THEN	! inside boundary
	   N = -1
	ENDIF
	GOTO 99999
C
C $INGEOMTRY 
20400	CODE = 1
	GOTO 20610
C
C $OUTGEOMETRY
20500	CODE = 2
	GOTO 20610
C
C $CUTGEOMETRY
20600	CODE = 3
20610	IF (.NOT.FO) GOTO 95000		! no found object
	IF (.NOT.GEOM_TYPE(VARARG,G_TYPE,G_COUNT)) GOTO 99999
	IF (G_TYPE .NE. 2) THEN
	   CALL MOAN(MSG_GEOMONLYVALID,'System Variable','area')
	   GOTO 99999
	ENDIF
C
C build a geometry from the found feature
	TEMP_GEOMETRY = 0
	IF (GEOM_FEATURE(TEMP_GEOMETRY,-1)) THEN
	   CALL GEOM_DESTROY(TEMP_GEOMETRY)
	   GOTO 99020
	ENDIF
	IF (CHK_GEOMETRIES(GEOMETRY(VARARG),TEMP_GEOMETRY,CUT_TYPE)) THEN
	   CALL GEOM_DESTROY(TEMP_GEOMETRY)
	   GOTO 99020
	ENDIF
	CALL GEOM_DESTROY(TEMP_GEOMETRY)
	N = (CUT_TYPE .EQ. 4) .OR. (CUT_TYPE .EQ. CODE)
	GOTO 99999
C
C $HADSELECT_GEOMETRY
20700	N = .NOT.SAGEOMS
	GOTO 99999
C
C $TOPGEOMETRY - the maximum geometry that is in use
20800	N = 0
	DO 20810, I = 1,MAX_GEOM
	   IF (GEOMETRY(I).NE.0) N = I
20810	CONTINUE
	GOTO 99999
C
C $GEOMETRY_PARTS - number of parts a geometry is in
20900	CALL GEOM_TYPE(VARARG,G_TYPE,N)
	GOTO 99999
C
C $ANNOTATION_JOURNAL_STATUS
21000	IF (ANNOMAC.NE.0) N = SIGN(1,ANNOMAC)
	GOTO 99999
C
C $ANNOTATION_JOURNAL_NAME
21100	TYPE = 3
	IF (ANNOMDSC(1).NE.0) THEN
	   CALL STR$COPY_DX(S,ANNOMDSC)
C
C get length from dynamic descriptor
	   CALL STR$ANALYZE_SDESC(ANNOMDSC,WLEN,I)
	   LENGTH = MIN(WLEN,LEN(S))			! I*2 -> I*4
	ENDIF
	GOTO 99999
C
C $FRTFGT - FC with given GT
21200	IF (VARARG.LT.LINTYP.OR.VARARG.GT.ARETYP) THEN
	   CALL MOAN(MSG_VARGRNG,DVAR(1:DVARL),LINTYP,ARETYP)
	ELSE
	   IF (FRTFGT(VARARG,N)) N = -1
	ENDIF
	GOTO 99999
C
C $UNIT_FACTOR
21300	TYPE = 2
	R = UNIT_FACTOR
	GOTO 99999
C
C $UNIT_DESC
21400	TYPE = 3
	IF (UNIT_DESC(1).NE.0) THEN
	   CALL STR$COPY_DX(S,UNIT_DESC)
C
C get length from dynamic descriptor
	   CALL STR$ANALYZE_SDESC(UNIT_DESC,WLEN,I)
	   LENGTH = MIN(WLEN,LEN(S))			! I*2 -> I*4
	ENDIF
	GOTO 99999
C
C $UNIT_TYPE
21500	N = UNIT
	GOTO 99999
C
C $WARP_MODE
21600	CONTINUE
	IF (.NOT.SETUP) THEN
	   N = 0
	ELSEIF (WARP_TO_IMAGE) THEN
	   N = 2
	ELSE
           N = 1
	ENDIF
	GOTO 99999
C
C $WARP_TRANSFORM
21700	TYPE = 3
	CONTEXT = 0
	CALL FIND_CMDNAME(WARP_TRANSFORM_CMD_TABLE,WARP_TRANSFORM + 1,
     &	                  S,LENGTH,CONTEXT)
	GOTO 99999
C
C $WARP_IMAGE_N
21800	N = WARP_N(2)
	GOTO 99999
C
C $WARP_MAP_N
21900	N = WARP_N(1)
	GOTO 99999
C
C $WARP_IMAGE_X <n>
22000	XY = 3
	I = 2
	GOTO 22350
C
C $WARP_IMAGE_Y <n>
22100	XY = 4
	I = 2
	GOTO 22350
C
C $WARP_MAP_X <n>
22200	XY = 1
	I = 1
	GOTO 22350
C
C $WARP_MAP_Y <n>
22300	XY = 2
	I = 1
22350	IF (VARARG.LT.1.OR.VARARG.GT.WARP_N(I)) THEN
	   CALL MOAN(MSG_VARGRNG,DVAR(1:DVARL),1,WARP_N(I))
	ELSE
	   TYPE = 2
	   R = WARP_POINTS(XY,VARARG)
	ENDIF
	GOTO 99999
C
C $WARP_RESIDUAL_X <n>    NOTE: RESIDUAL is Transformed MAP coord - IMAGE coord
22400	XY = 1
	GOTO 22550
C
C $WARP_RESIDUAL_Y <n>
22500 	XY = 2	
22550	IF (.NOT.WARP_FITTED) THEN
	   CALL MOAN(MSG_NOWARP)
	ELSEIF (VARARG.LT.1.OR.VARARG.GT.MIN(WARP_N(1),WARP_N(2))) THEN
	   CALL MOAN(MSG_VARGRNG,DVAR(1:DVARL),1,MIN(WARP_N(1),WARP_N(2)))
	ELSE
	   TMPXY(1) = WARP_POINTS(1,VARARG)
	   TMPXY(2) = WARP_POINTS(2,VARARG)
	   CALL TRNUSE(TMPXY(1),TMPXY(2),WARP_COF,WARP_TRANSFORM)
	   TYPE = 2
	   R = TMPXY(XY) - WARP_POINTS(XY+2,VARARG)
	ENDIF
	GOTO 99999
C
C $WARP_RMS_X
22600  	IF (.NOT.WARP_FITTED) THEN
	   CALL MOAN(MSG_NOWARP)
	ELSE
	   TYPE = 2
	   R = WARP_RMS(1)
 	ENDIF
	GOTO 99999
C
C $WARP_RMS_Y
22700  	IF (.NOT.WARP_FITTED) THEN
	   CALL MOAN(MSG_NOWARP)
	ELSE
	   TYPE = 2
	   R = WARP_RMS(2)
 	ENDIF
	GOTO 99999
C
C $WARP_COEFFS_IMAGE <n>	NOTE: DOUBLE PRECISION
22800	XY = 1	
	GOTO 22950
C
C $WARP_COEFFS_MAP <n>		NOTE: DOUBLE PRECISION
22900	XY = 2	
22950   CONTINUE
	TYPE = 4
	IF (.NOT.WARP_FITTED) THEN
	   CALL MOAN(MSG_NOWARP)
	ELSEIF (VARARG.LT.1.OR.VARARG.GT.8) THEN
	   CALL MOAN(MSG_VARGRNG,DVAR(1:DVARL),1,8)
	ELSE
	   I = (MOD((VARARG - 1),4)) + 1
	   J = ((VARARG - 1) / 4) + 1
           IF (XY .EQ. 1) THEN
	      R = WARP_BCK(I,J)
	   ELSE
	      R = WARP_COF(I,J)
	   ENDIF
	ENDIF
	GOTO 99999
C
C $WARP_DIRTY
23000  	IF (WARP_DIRTY) N = -1 
	GOTO 99999
C
C $WARP_FITTED
23100  	IF (WARP_FITTED) N = -1 
	GOTO 99999
C
C $HADSELECT_PRIORITY - had a selection since last SELECT ALL PRIORITIES?
23200	N = .NOT.SAPRIOS
	GOTO 99999
C
C $FIND_COUNT
23300	IF (CSSTIL) N = HITITC
	GOTO 99999
C
C $FIND_ITEM
23400	IF (CSSTIL .AND. HITITC.GT.0) N = HITITE
	GOTO 99999
C
C "Not on vertex"
C
94000	CALL MOAN(MSG_NOTONVRT)
	CALL LEARN(MSG_USEVERT)
	GOTO 99999
C
C "No point attributes"
C
94100	CALL MOAN(MSG_NOPOINTATTR)
	GOTO 99999
C
C "Attribute n does not exist"
C
94200	CALL MOAN(MSG_VARGRNG,DVAR(1:DVARL),1,CONATT)
	GOTO 99999
C
C "No found object"
C
95000	CALL MOAN(MSG_NOFEATURE)
	GOTO 99999
C
C "Variable only defined in AC state"
C
96000	CALL MOAN(MSG_VARONLYDEFINED,DVAR(1:DVARL),STANAM(STATE_AC)
     &	           (1:STACHS(STATE_AC)))
	GOTO 99999
C
C "Variable NOT defined in XXX state"
C
96010	CALL MOAN(MSG_VARNOTDEFINED,DVAR(1:DVARL),STASTR(1:STALEN))
	GOTO 99999
C
C "There are no AC TC or CH entries in this feature"
C
97000	CALL MOAN(MSG_NOACS)
	GOTO 99999
C
C Feature is not text
98000	CALL MOAN(MSG_NOTTEXT)
	GOTO 99999
C
C map number out of range
99000	CALL MOAN(MSG_ILLEGLMAP,MAXMAP)
	GOTO 99999
C
C map not read in
99010	CALL MOAN(MSG_MAPNOTEXIST,VARARG)
	GOTO 99999
C
C variable not set
99020	CALL MOAN(MSG_VARNOTSET,DVAR(1:DVARL))
	GOTO 99999
C
99999	RETURN
	END
