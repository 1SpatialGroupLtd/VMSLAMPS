C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-03-29 15:02:24.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE STSYTX(DEL,NEWCON)
C
***	IDENT	29MR90
***	MODULE	STSYTX
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	21-Dec-1984
C
C Description
C
C Subroutine to start construction of a symbol or text feature.
C It assumes that FRTCOM is set up correctly.
C
	IMPLICIT NONE
C
C arguments
C
	LOGICAL*1	DEL		! .TRUE. if original feature to
					! be deleted on completion
	LOGICAL*1	NEWCON		! .TRUE. if this is a new
					! construction (ie if position 
					! etc is taken from present
					! cursor position)
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:ACS/
***	PARAMETER/CMN:CTXS/
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:END/
***	PARAMETER/CMN:PACK/
***     PARAMETER/CMN:STAPAR/		! state constants
C
***	COMMON/CMN:ATTBTS/
***	COMMON/CMN:CTXS/
***	COMMON/CMN:CSTRCT/
***	COMMON/CMN:DEFINE/
***	COMMON/LSL$CMNFRT:FRTCOM/
***	COMMON/CMN:DRAWIN/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:MODIFY/
***	COMMON/CMN:OIIH/
***	COMMON/CMN:OPTION/
***     COMMON/CMN:STATE/		! state variables
C
C Local Variables
C
	REAL  		XY(2)			! temporary coords
	REAL  		SIZE
	INTEGER		I
	INTEGER		DUMMY
C
C functions
C
	INTEGER		CPYSTR
C
C initialise
C
	NEWFEAT=NEWCON			! common /MODIFY/
	DELOIH=DEL			! later used in NDSTCN
	HADRO = .FALSE.
	HADTX = .FALSE.
C
C clear any existing list of packs of features that are to be deleted
C on successful completion of operation
	CALL FREECTX(PACKCTXD)
C
C get coords and things if new construction
C
	IF (NEWCON) THEN
	   COIPAK(PAKFSN)=-1		! force NDSTCN to generate FSN
	   COIANG=0.0			! zero rotation at moment
	   CALL FLUSH(0)		! initialise construction
C
C start the feature at the current cursor position
C   with construction attributes
	   CALL LSTARR(CONDEF,CONATT,COATTC,COATTV,.FALSE.)
C
C apply Z position of cursor, if appropriate
	   IF (ZOPT.AND.CSZI.NE.IFF_ABSENT) THEN
	      CALL ADDZ(CSZI,MXATTR-1,CONATT,COATTC,COATTV)
	   ENDIF
C
C and OPERATION DIGITISE (or OTHER)
	   IF (DEFINITION(P_DIGITISE).GT.0) THEN
	      CALL LSTARR(DEFINITION(P_DIGITISE),CONATT,COATTC,
     &	               COATTV,.TRUE.)
	   ELSE
	      CALL LSTARR(DEFINITION(P_OTHER),CONATT,COATTC,
     &	               COATTV,.TRUE.)
	   ENDIF
C
	   CALL ADCORD(CSXY,CONATT,COATTC,COATTV)
C
C get more information about the symbol/text, if required
	   IF (FRTGT.EQ.SCATYP) THEN		! scaled symbol
C
C first work out a size
	      SIZE = FRTSIZ*SCLFRT
C
C if that fails use default
	      IF (SIZE.LE.0.0) SIZE=DFSSIZ*SCLFRT
C
C now add second point for scaled symbol
	      XY(1)=CSXY(1)+SIZE
	      XY(2)=CSXY(2)
	      CONATT = 0		! no attributes
	      CALL ADCORD(XY,CONATT,COATTC,COATTV)
	   ENDIF
C
C for texts, create a new COICTX (clearing old one first)
	   IF (FRTGT.EQ.TEXTYP) THEN
	      CALL FREECTX(COICTXD)		! clear old values
	      CTXBUFW(CTX_W_TXTLEN) = CTXMAX
	      CTXBUFW(CTX_W_TXTLEN) = CPYSTR(COIDSC,CTXBUFL(CTX_L_DESC))
	      CTXBUFL(CTX_L_TH) = CONTH	      	   
	      CTXBUFR(CTX_L_RO) = COIANG
	      CTXBUFR(CTX_L_X) = COIXY(1,COIIND)
	      CTXBUFR(CTX_L_Y) = COIXY(2,COIIND)
              DO 10, I=0,3
	         CTXBUFW(CTX_W_TS1+I) = CONFS(I+1)
   10	      CONTINUE
C
C transfer list of attributes
	      CALL ARRLST(CONATT,COATTC,COATTV,CTXBUFL(CTX_L_ATTR),DUMMY)
C
C set up auxiliary array
	      CALL GENAUX(1,CTXBUFR(CTX_L_X),CTXBUFL(CTX_L_AUX1),
     &	         CTXBUFL(CTX_L_DESC),CTXBUFR(CTX_L_RO),
     &	         CTXBUFL(CTX_L_TH),COIPAK,CTXBUFW(CTX_W_TS1))
C
C add this buffer to text structure
	      CALL ADDCTX(COICTXD,.TRUE.)	! this is home for now
	   ENDIF
	ENDIF
C
C other things about symbol/text
	IF (FRTGT.NE.UNOTYP) THEN
	   IF (FRTGT.EQ.ORITYP.OR.FRTGT.EQ.TEXTYP) HADRO=.TRUE.
	   IF (FRTTEX) HADTX=.TRUE.
	ENDIF
C
C alter state to Modify State unless editing ACs
	IF (SINDEX.NE.STATE_AC) THEN
	   CALL SETSTA(STATE_MODIFY)
	   NDMODE=END_CONSTRUCT	! end mode for end of construction
	   MODMOD=.TRUE.	! something modified, so draw in refresh
	ENDIF
C
	RETURN
	END
