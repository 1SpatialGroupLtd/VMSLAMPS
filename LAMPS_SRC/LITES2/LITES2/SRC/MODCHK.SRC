C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-08-12 15:25:10.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE MODCHK
C
***	IDENT	12AU93
***	MODULE	MODCHK
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	 3-Jan-1985
C
C Description
C
C	This subroutine alters the symbol/text that is being
C	continuously modified in some way. It is called from the
C	main loop, before RFDRAW which then shows the current situation.
C	It also calls GENAUX for any feature that has been modified.
C
C	Alternatively, in PAINT state, it paints raster image
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:CTXS/
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:CONSTS/		! values for PI and TWOPI
***	PARAMETER/CMN:END/		! possible values for NDMODE
***     PARAMETER/CMN:MOANMESS/		! moan constants
***     PARAMETER/CMN:STAPAR/		! state constants
***	PARAMETER/CMN:PACK/
C
***	COMMON/CMN:CTXS/
***	COMMON/CMN:DEFINE/
***	COMMON/CMN:DRAWIN/
***	COMMON/LSL$CMNFRT:FRTCOM/
***	COMMON/CMN:CSTRCT/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:MODIFY/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:RFCTRL/
***     COMMON/CMN:STATE/		! state variables
***	COMMON/CMN:OIIH/		! data about feature being
					! modified
***	COMMON/CMN:VARIAT/
C
C Functions called
C
	LOGICAL		GENAUX
	LOGICAL		RUBISH
C
C Local Variables
C
	REAL		DX,DY,DZ	! differences in X and Y between
					! points
	REAL		TMPXY(2)	! temporary values for arithmetic
	REAL		TMP
	INTEGER		TMPI
	EQUIVALENCE	(TMP,TMPI)
	REAL		DANG		! difference in angle
	REAL		TMPANG		! temporary value of angle
	REAL		TCOANG		! temporary value of COIANG
	INTEGER		I		! loop counter
	INTEGER*4	ADDR		! address of start of CTX
	INTEGER*4	STAADR,FINADR	! adreesses of first and last CTX
	INTEGER*2	NOPTS		! number of points in feature
	INTEGER		DUMPAK(PAKLEN)	! a dummy pack for GENAUX (only
					! DUMPAK(PAKFC) is significant)
	INTEGER		OPER
	INTEGER		DUMMY
	LOGICAL		MOVED_FAR
C
C in PAINT state, paint raster image with current brush
C
	IF (SINDEX.EQ.STATE_PAINT) THEN
	   CALL IMAGE_PAINT
	   GOTO 900
	ENDIF
C
	IF (SINDEX.NE.STATE_MODIFY) GOTO 900	! nothing to do
C
	MOVED_FAR = .FALSE.
C
C get first and last CTX to look at. If dealing with a text component,
C may only want to access one
C
	IF (COIPAK(PAKGT).EQ.TEXTYP) THEN
	   IF (SUBTXT) THEN
	      STAADR = COICTXD(CTXD_HOME)
	      FINADR = COICTXD(CTXD_HOME)
	   ELSE
	      STAADR = COICTXD(CTXD_FSTCTX)
	      FINADR = COICTXD(CTXD_LSTCTX)
	   ENDIF
	ENDIF
C
C if altering orientation or second point of feature with the cursor
C
	IF (NDMODE.EQ.END_ROTATE.OR.
     &	    NDMODE.EQ.END_ALIGN .OR.
     &	    NDMODE.EQ.END_STRETCH) THEN
C
C this is classed as a transformation (in terms of operations)
	   IF (FLG_MOD_TRANSFORM) THEN
	      OPER = DEFINITION(P_TRANSFORM)
	      IF (OPER.EQ.0) OPER = DEFINITION(P_OTHER)
	   ENDIF
C
	   DX=CSXY(1)-COIXY(1,2)		! difference between
	   DY=CSXY(2)-COIXY(2,2)		! cursor and start of
						! feature
C
C 	   if cursor is not on start of feature (when no orientation
C	   is possible) and cursor has moved since last time
C
	   IF ((MODCXY(1,2).NE.CSXY(1).OR.MODCXY(2,2).NE.CSXY(2))
     &	         .AND.(DX.NE.0.0.OR.DY.NE.0.0)) THEN
C
C	      work out new COIANG (except for stretching)
C	      (but don't set it yet, in case texts abort rotation)
C
	      IF (NDMODE.NE.END_STRETCH) THEN
	         TCOANG=ATAN2(DY,DX)
	         IF (TCOANG.LT.0.0) TCOANG=TCOANG+TWOPI
	         DANG = TCOANG - COIANG		! difference in angle
	         IF (DANG.LT.0.0) DANG=DANG+TWOPI
	      ENDIF
C
C compute orientation for texts, as required
C This may move a locating point out of the limits of the map, so
C two passes are made through the CTXs; the first just checks the
C coordinates
C
	      IF (COIPAK(PAKGT).EQ.TEXTYP) THEN
	         DO 20, I=1,2
	            ADDR = STAADR			! initialise loop
   10	            CONTINUE
C
C get existing values
	            CALL PUTLNG(%VAL(ADDR+CTX_O_RO),TMPANG)
	            CALL PUTLNG(%VAL(ADDR+CTX_O_X),TMPXY(1))
	            CALL PUTLNG(%VAL(ADDR+CTX_O_Y),TMPXY(2))
C
C update angle
	            TMPANG = TMPANG + DANG
   15	            IF (TMPANG.LT.0.0) THEN
	               TMPANG = TMPANG + TWOPI
	               GOTO 15
	            ELSEIF (TMPANG.GE.TWOPI) THEN
	               TMPANG = TMPANG - TWOPI
	               GOTO 15
	            ENDIF
C
C update coordinates
	            DX = TMPXY(1)-COIXY(1,2)
	            DY = TMPXY(2)-COIXY(2,2)
	            TMPXY(1) = COIXY(1,2) + COS(DANG)*DX - SIN(DANG)*DY
	            TMPXY(2) = COIXY(2,2) + SIN(DANG)*DX + COS(DANG)*DY
C
C either check the values, or put back updated ones
	            IF (I.EQ.2) THEN
	               CALL PUTLNG(TMPANG,%VAL(ADDR+CTX_O_RO))
	               CALL PUTLNG(TMPXY(1),%VAL(ADDR+CTX_O_X))
	               CALL PUTLNG(TMPXY(2),%VAL(ADDR+CTX_O_Y))
C
C update attributes for this point
	               IF (FLG_MOD_TRANSFORM) THEN
	                  CALL LSTARR(%VAL(ADDR+CTX_O_ATTR),CONATT,
     &	                           COATTC,COATTV,.FALSE.)
	                  CALL LSTARR(OPER,CONATT,COATTC,COATTV,.TRUE.)
	                  CALL ARRLST(CONATT,COATTC,COATTV,
     &                              %VAL(ADDR+CTX_O_ATTR),DUMMY)
	               ENDIF
	            ELSE
	               IF (RUBISH(TMPXY)) THEN		! invalid point
C
C move cursor back to last goo rotating point
	                  CSXY(1) = MODCXY(1,2)
	                  CSXY(2) = MODCXY(2,2)
	                  CALL INFORM(MSG_ROTOUTRANGE)
	                  GOTO 30
	               ENDIF
	            ENDIF
C
C try next CTX?
	            IF (ADDR.NE.FINADR) THEN
	               CALL PUTLNG(%VAL(ADDR),ADDR) ! next pointer
	               GOTO 10
	            ENDIF
   20	         CONTINUE
	         FLG_MOD_TRANSFORM = .FALSE.
C
C symbols
	      ELSE
	         IF (FLG_MOD_TRANSFORM) THEN
	            CALL LSTARR(OPER,COINATT,COIATTC,COIATTV(1,2),.TRUE.)
	            FLG_MOD_TRANSFORM = .FALSE.
	         ENDIF
	      ENDIF
C
C set value of COIANG
C
	      IF (NDMODE.NE.END_STRETCH) COIANG = TCOANG
C
C	      work out new DIST if required
C
	      IF (NDMODE.EQ.END_ALIGN.OR.NDMODE.EQ.END_STRETCH) THEN
	         DIST=SQRT(DX**2+DY**2)
	      ENDIF
C
C	      compute alignment if required
C
	      IF (COIPAK(PAKGT).EQ.SCATYP) THEN
	         COIXY(1,3)=COIXY(1,2)+COS(COIANG)*DIST
	         COIXY(2,3)=COIXY(2,2)+SIN(COIANG)*DIST
	      ENDIF
C
C	      save current cursor coords as orientation point
C
	      MODCXY(1,2)=CSXY(1)
	      MODCXY(2,2)=CSXY(2)
C
C	      set modified flag for RFDRAW
C
   30	      CONTINUE
	      MODMOD=.TRUE.
C
	   ENDIF				! valid to rotate
C
	ELSEIF(NDMODE.EQ.END_MOVE) THEN		! end rotating by cursor
						! start moving feature
C
	   DX=CSXY(1)-COIXY(1,2)		! difference between
	   DY=CSXY(2)-COIXY(2,2)		! cursor and start of
						! feature
	   DZ = 0.0
	   IF (ZOPT) THEN
	      CALL GETZ(TMP,COINATT,COIATTC,COIATTV(1,2))
	      IF (CSZI.NE.IFF_ABSENT.AND.TMPI.NE.IFF_ABSENT)
     &	                   DZ = CSXY(3) - TMP
	   ENDIF
C
C 	   if cursor has moved since last time, update coords in CTXs
C
	   IF (DX.NE.0.0.OR.DY.NE.0.0) THEN
C
C have we to do an "OPERATION"?
	      IF (FLG_MOD_MOVE) THEN
	         OPER = DEFINITION(P_MOVE)
	         IF (OPER.EQ.0) OPER = DEFINITION(P_OTHER)
	      ENDIF
C
	      IF (FLG_MOD_FAR_MOVE) THEN
	         TMP = (CSXY(1) - CHCSXY(1))**2 + (CSXY(2) - CHCSXY(2))**2
	         MOVED_FAR = (TMP .GT. FAR_MOVE_IFF**2)
	         IF (MOVED_FAR) OPER = DEFINITION(P_FAR_MOVE)
	      ENDIF
C
	      IF (COIPAK(PAKGT).EQ.TEXTYP) THEN
	         DO 50, I=1,2
	            ADDR = STAADR			! initialise loop
   40	            CONTINUE
C
C get existing values
	            CALL PUTLNG(%VAL(ADDR+CTX_O_X),TMPXY(1))
	            CALL PUTLNG(%VAL(ADDR+CTX_O_Y),TMPXY(2))
C
C update them
	            TMPXY(1) = TMPXY(1) + DX
	            TMPXY(2) = TMPXY(2) + DY
C
C either check the values, or put back updated ones
	            IF (I.EQ.2) THEN
	               CALL PUTLNG(TMPXY(1),%VAL(ADDR+CTX_O_X))
	               CALL PUTLNG(TMPXY(2),%VAL(ADDR+CTX_O_Y))
C
C get Z, update it and put it back
	               IF (DZ.NE.0.0) THEN
	                  CALL GETZ_LIST(TMP,%VAL(ADDR+CTX_O_ATTR))
	                  IF (TMPI.NE.IFF_ABSENT)
     &	                     CALL ADDDEF(%VAL(ADDR+CTX_O_ATTR),IFF_C_Z,
     &	                                TMP+DZ,DUMMY)
	               ENDIF
C
C update attributes for this point
	               IF (FLG_MOD_MOVE.OR.MOVED_FAR) THEN
	                  CALL LSTARR(%VAL(ADDR+CTX_O_ATTR),CONATT,
     &	                           COATTC,COATTV,.FALSE.)
	                  CALL LSTARR(OPER,CONATT,COATTC,COATTV,.TRUE.)
	                  CALL ARRLST(CONATT,COATTC,COATTV,
     &                              %VAL(ADDR+CTX_O_ATTR),DUMMY)
	               ENDIF
	            ELSE
	               IF (RUBISH(TMPXY)) THEN		! invalid point
C
C move cursor back to origin of feature
	                  CSXY(1) = COIXY(1,2)
	                  CSXY(2) = COIXY(2,2)
	                  IF (ZOPT) CALL GETZ(CSXY(3),COINATT,
     &	                           COIATTC,COIATTV(1,2))
	                  CALL INFORM(MSG_MOVOUTRANGE)
	                  GOTO 60
	               ENDIF
	            ENDIF
C
C try next CTX?
	            IF (ADDR.NE.FINADR) THEN
	               CALL PUTLNG(%VAL(ADDR),ADDR) ! next pointer
	               GOTO 40
	            ENDIF
   50	         CONTINUE
	         FLG_MOD_MOVE = .FALSE.
C
C	      compute alignment if required
C
	      ELSEIF (COIPAK(PAKGT).EQ.SCATYP) THEN
	         COIXY(1,3)=CSXY(1)+COIXY(1,3)-COIXY(1,2)
	         COIXY(2,3)=CSXY(2)+COIXY(2,3)-COIXY(2,2)
	      ENDIF
C
C operations on symbols
	      IF (COIPAK(PAKGT).NE.TEXTYP.AND.
     &	            (FLG_MOD_MOVE.OR.MOVED_FAR)) THEN
	         CALL LSTARR(OPER,COINATT,COIATTC,COIATTV(1,2),.TRUE.)
	         FLG_MOD_MOVE = .FALSE.
	      ENDIF
C
C	      save current cursor coords as origin
C
	      COIXY(1,2)=CSXY(1)
	      COIXY(2,2)=CSXY(2)
	      IF (ZOPT) THEN
	         CALL GETZ(TMP,COINATT,COIATTC,COIATTV(1,2))
	         IF (TMPI.NE.IFF_ABSENT) 	! z exists so can be updated
     &	            CALL ADDZ(CSXY(3),COINATT,COINATT,
     &	                              COIATTC,COIATTV(1,2))
	      ENDIF
C
C	      set modified flag for RFDRAW
C
60	      CONTINUE
	      MODMOD=.TRUE.
	   ENDIF
	ENDIF				! moving feature
C
C apply orientation if anything has changed
C
	IF (MODMOD) THEN
	   IF (COIPAK(PAKGT).EQ.SCATYP) THEN	! get number of points 
	      NOPTS=2				! to use
	   ELSE
	      NOPTS=1
	   ENDIF
C
C for texts, genaux all the components
	   IF (COIPAK(PAKGT).EQ.TEXTYP) THEN
	      ADDR = STAADR
   70	      CONTINUE
	      CALL PUTLNG(%VAL(ADDR+CTX_O_TS),DUMPAK(PAKFC))
	      IF (GENAUX(NOPTS,%VAL(ADDR+CTX_O_X),
     &	                 %VAL(ADDR+CTX_O_AUX),
     &	                 %VAL(ADDR+CTX_O_DESC),
     &	                 %VAL(ADDR+CTX_O_RO),
     &	                 %VAL(ADDR+CTX_O_TH),
     &	                 DUMPAK,
     &	                 %VAL(ADDR+CTX_O_TS))) THEN
	         CALL MOAN(MSG_FTABANDONED)
	         CALL ABANDN
	         GOTO 900
	      ENDIF
C
C try next CTX?
	      IF (ADDR.NE.FINADR) THEN
	         CALL PUTLNG(%VAL(ADDR),ADDR)	! next pointer at start
	         GOTO 70
	      ENDIF
	   ENDIF
C
C
	   IF (GENAUX(NOPTS,COIXY(1,2),COIAUX,COIDSC,
     &			COIANG,CONTH,COIPAK,CONFS)) THEN
C
C	      if GENAUX fails, had better abandon!
C
	      CALL MOAN(MSG_FTABANDONED)
	      CALL ABANDN
	      GOTO 900
	   ENDIF
	   IF (NODISP) MODMOD=.FALSE.		! cancel MODMOD if
						! RFDRAW not called
	ENDIF
C
900	RETURN
	END
