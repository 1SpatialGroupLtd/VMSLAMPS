C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-07-18 11:12:04.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION EVAL(N,R,REAL,MESS)
C
***	MODULE	EVAL
***	IDENT	18JL90
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C
C
C To evaluate an expression in the current decoding buffer
C Returns .FALSE. if succeeds.
C Answer in N (integer) or R (real*8).
C If REAL true, try as real, else integer.
C If MESS true, then MOAN as required.
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:CONSTS/
***	PARAMETER/LSL$CMNLSL:LSLLIBMSG/
***	PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:STAPAR/
C
***	COMMON/LSL$CMNLSL:CMDCOM/
***	COMMON/LSL$CMNLSL:EXCEPTION/
C
C arguments
	INTEGER		N		! the answer
	REAL*8		R		! the real answer
	LOGICAL*1	REAL		! evaluate as real?
	LOGICAL*1	MESS		! moan?
C
C functions called
	LOGICAL		RDCH,RDCHS,RDLONG,RDDBLE
	INTEGER		RDCOMM
	EXTERNAL	EXP_HAND ! condition handler (EXCEPTION.SRC)
	EXTERNAL	FUNC_CMD_TABLE	! function command table
C
C workspace
	BYTE	CH,CHX
	INTEGER	LEV		! stack level
	INTEGER	MAXLEV		! stack size
	PARAMETER (MAXLEV=10)
	INTEGER	INUM(MAXLEV)	! stack of integers
	REAL*8	RNUM(MAXLEV)	! stack of reals
	EQUIVALENCE (INUM,RNUM)
	INTEGER	OPS(MAXLEV)	! and operators
	INTEGER	BRAS(MAXLEV)
	INTEGER	MAXOP		! number of operators
	PARAMETER (MAXOP=5)
	INTEGER	MAXFUN		! number of functions
	PARAMETER (MAXFUN=9)
	INTEGER UMINUS		! unary minus
	PARAMETER (UMINUS=MAXOP+1)
	INTEGER TOTOP		! total number of operators
	PARAMETER (TOTOP=UMINUS+MAXFUN)
	BYTE	OPCHAR(MAXOP)	! operator symbols
	DATA	OPCHAR/'+','-','*','/','^'/
	INTEGER	OPPRI(TOTOP)	! operator priorities
	DATA	OPPRI/1,1,2,2,3,999,MAXFUN*999/
	INTEGER	OP		! current operator
	INTEGER	I
	INTEGER*2	SAVDP
	LOGICAL*1	EOL
	LOGICAL*1	ERROR
C
C initialise
	ERRNUM = LSL__NORMAL		! clear CMDLIB error
	CALL LIB$ESTABLISH(EXP_HAND)	! condition handler
	EVAL = .TRUE.		! assume failure
	LEV = 1			! nothing on stack
	EOL = .FALSE.		! not had end of line
C
50	BRAS(LEV) = 0		! no ( at this level
	OP = 0			! no operator yet
C
C now looking for opening (, a number, or a unary +-
100	IF (RDCHS(CH)) THEN
	   IF (MESS) CALL MOAN(MSG_EXPEOL)
	   GOTO 999
	ENDIF
C
C Is it a (. If so then count it and repeat.
	IF (CH.EQ.'(') THEN
	   BRAS(LEV) = BRAS(LEV)+1
	   GOTO 100
	ENDIF
C
C Try for a number instead. If succeeds then off to get operator.
	CALL BSCH
	ERRNUM = LSL__NORMAL			! clear CMDLIB error
	CALL DCPSAV(SAVDP)
	IF (REAL) THEN
C
C Prevent RDREAL from seeing any / characters
	   I = 0
110	   IF (RDCH(CHX)) GOTO 130
	   I = I+1
	   IF (CHX.NE.'/') GOTO 110
	   I = I-1
130	   CALL SETWIN(SAVDP,I)
	   ERROR = RDDBLE(RNUM(LEV))
	   CALL SETWIN(,)
	   IF (.NOT.ERROR) GOTO 200
	ELSE
	   IF (.NOT.RDLONG(INUM(LEV))) GOTO 200
	ENDIF
C
C failed as a number, was it a unary + or -
	CALL DCPSET(SAVDP+1)		! set pointer after char
	IF (CH.EQ.'+') GOTO 100		! just ignore +
	IF (CH.EQ.'-') THEN
	   OP = UMINUS			! its unary minus
	   GOTO 500			! go stack it up
	ENDIF
C
C If number reading failed because of an unexpected character, then
C try for a function, taking note of type of function
	IF (ERRNUM.EQ.LSL__NONUM) THEN
	   CALL BSCH
	   OP = RDCOMM(FUNC_CMD_TABLE)
	   IF (OP.LE.0) THEN
	      IF (MESS) CALL ERRCMD('function')
	      GOTO 999
	   ENDIF
C
C user flag in command table is either I or R for integer or real.
C we use the INITIAL and READY state masks from the command
C decoder to look at them.
	   IF (REAL.AND.((UFLAG.AND.MASK_READY).NE.0).OR.
     &	       .NOT.REAL.AND.((UFLAG.AND.MASK_INITIAL).NE.0)) THEN
	      OP = OP+UMINUS		! offset past operators
	      GOTO 500			! go stack it up
	   ENDIF
	ENDIF
C
C total rubbish
	IF (MESS) THEN
	   IF (ERRNUM.NE.LSL__HADEXCP) THEN
	      CALL MOAN(MSG_EXPNUM)		! error in number
	   ELSE
	      CALL ERREXP			! exception in number
	   ENDIF
	ENDIF
	GOTO 999
C
C now looking for an operator, or )
200	IF (.NOT.RDCHS(CH)) GOTO 205
C
	EOL = .TRUE.				! had end of line
C
C here to process end of line
202	IF (BRAS(LEV).EQ.0) THEN
	   IF (LEV.EQ.1) GOTO 900		! finished
	   GOTO 400				! try to evaluate
	ENDIF
	IF (MESS) CALL MOAN(MSG_EXPEOL)
	GOTO 999
C
205	IF (CH.NE.')') GOTO 300
C
C here to process )
210	IF (BRAS(LEV).GT.0) THEN
	   BRAS(LEV) = BRAS(LEV)-1
	   GOTO 200
	ENDIF
	IF (LEV.EQ.1) THEN
	   IF (MESS) CALL MOAN(MSG_CMDLIBUXC,CH)
	   GOTO 999
	ENDIF
	GOTO 400
C
C have we got an operator?
300	DO 310 OP=1,MAXOP	
	   IF (CH.EQ.OPCHAR(OP)) GOTO 320
310	CONTINUE
	IF (MESS) CALL MOAN(MSG_CMDLIBUXC,CH)
	GOTO 999
C
C check operator level
320	IF (LEV.EQ.1) GOTO 500				! stack it
	IF (BRAS(LEV).GT.0) GOTO 500			! stack it
	IF (OPPRI(OP).GT.OPPRI(OPS(LEV-1))) GOTO 500	! stack it
C
C pop stack and evaluate expression
400	GOTO (401,402,403,404,405,406,407,408,409,410,411,412,413,414,415
     &							),OPS(LEV-1)
401	IF (REAL) THEN
	   RNUM(LEV-1) = RNUM(LEV-1)+RNUM(LEV)
	ELSE
	   INUM(LEV-1) = INUM(LEV-1)+INUM(LEV)
	ENDIF
	GOTO 499
402	IF (REAL) THEN
	   RNUM(LEV-1) = RNUM(LEV-1)-RNUM(LEV)
	ELSE
	   INUM(LEV-1) = INUM(LEV-1)-INUM(LEV)
	ENDIF
	GOTO 499
403	IF (REAL) THEN
	   RNUM(LEV-1) = RNUM(LEV-1)*RNUM(LEV)
	ELSE
	   INUM(LEV-1) = INUM(LEV-1)*INUM(LEV)
	ENDIF
	GOTO 499
404	IF (REAL) THEN
	   RNUM(LEV-1) = RNUM(LEV-1)/RNUM(LEV)
	ELSE
	   INUM(LEV-1) = INUM(LEV-1)/INUM(LEV)
	ENDIF
	GOTO 499
405	IF (REAL) THEN
	   RNUM(LEV-1) = RNUM(LEV-1)**RNUM(LEV)
	ELSE
	   INUM(LEV-1) = INUM(LEV-1)**INUM(LEV)
	ENDIF
	GOTO 499
406	IF (REAL) THEN
	   RNUM(LEV-1) = -RNUM(LEV)
	ELSE
	   INUM(LEV-1) = -INUM(LEV)
	ENDIF
	GOTO 499
407	RNUM(LEV-1) = SIN(RNUM(LEV)*PI/180.0)
	GOTO 499
408	RNUM(LEV-1) = ASIN(RNUM(LEV))*180.0/PI
	GOTO 499
409	RNUM(LEV-1) = COS(RNUM(LEV)*PI/180.0)
	GOTO 499
410	RNUM(LEV-1) = ACOS(RNUM(LEV))*180.0/PI
	GOTO 499
411	RNUM(LEV-1) = TAN(RNUM(LEV)*PI/180.0)
	GOTO 499
412	RNUM(LEV-1) = ATAN(RNUM(LEV))*180.0/PI
	GOTO 499
413	IF (REAL) THEN
	   RNUM(LEV-1) = ABS(RNUM(LEV))
	ELSE
	   INUM(LEV-1) = ABS(INUM(LEV))
	ENDIF
	GOTO 499
414	RNUM(LEV-1) = LOG(RNUM(LEV))		! LN function (to base e)
	GOTO 499
415	RNUM(LEV-1) = LOG10(RNUM(LEV))		! LOG function (to base 10)
	GOTO 499
C
C drop down operator (if any) from current level
499	IF (ERRNUM.EQ.LSL__HADEXCP) THEN
	   IF (MESS) CALL ERREXP
	   GOTO 999
	ENDIF
C
	LEV = LEV-1			! unstack
C
C If we haven't got an operator, then must be doing ) or end of line
	IF (OP.EQ.0) THEN		! no operator
	   IF (EOL) THEN
	      GOTO 202			! process end of line
	   ELSE
	      GOTO 210			! continue to process )
	   ENDIF
	ENDIF
C
C We have got an operator, so back to check it out
	GOTO 320
C
C Stack an operator
500	IF (LEV.EQ.MAXLEV) THEN
	   IF (MESS) CALL MOAN(MSG_EXNEST)
	   GOTO 999
	ENDIF
	OPS(LEV) = OP			! save operator at this level
	LEV = LEV+1			! and step on to next
	GOTO 50
C
C Finished - return the answer
900	IF (REAL) THEN
	   R = RNUM(1)
	ELSE
	   N = INUM(1)
	ENDIF
	EVAL = .FALSE.
C
999	RETURN
	END
