C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-05-10 11:14:10.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION GEN_REG_CRNR(REG,OFFSET,LNE1,LNE2)
C
***     IDENT   10MY96
***     MODULE  GEN_REG_CRNR
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C to process a vector and a point of original line
C returns .FALSE. for success and .TRUE. for failure
C
	IMPLICIT NONE
C
C arguments (input)
C
	INTEGER		REG		! region to add points to
	REAL		OFFSET		! distance to offset by
	REAL		LNE1(2,2)
	REAL		LNE2(2,2)
C
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:CONSTS/
***	PARAMETER/CMN:REGPAR/
C
***	COMMON/CMN:MASTER/
***	COMMON/CMN:REGCMN/
C w/s
	REAL		DX,DY
	REAL		DX2,DY2
	REAL		F
	REAL		LEN1,LEN2
	REAL		AUX(AUXLEN)
	INTEGER		GT
	REAL		L1(2,2),L2(2,2)
	REAL		LINE(2,2)
	REAL		XYCOORD(2,3)
	INTEGER		IN1,IN2
	INTEGER		NUMBER
	REAL		POINT1(2),POINT2(2)
	REAL		LSTPT(2)
	INTEGER 	INLIN(2)
	INTEGER 	INARC(2)
	LOGICAL 	TCH
	REAL		DIST
	LOGICAL		OUTSIDE
	REAL		CPROD,CPROD1
	REAL		CPROD_ANG
	LOGICAL		CURVE
	LOGICAL		GOT_FIRST_POINT
C
	REAL		LTD
	PARAMETER	(LTD = 1.0E-5)		! same as INTSCT and GENCIR
C
C function
	LOGICAL		ADDPPT
	LOGICAL		GENCIR
	LOGICAL		REGCIRC
	LOGICAL		INTSCT
	LOGICAL		REG_TRUNC
	REAL		ANG_LTD
C
	GEN_REG_CRNR = .TRUE.			! failure
C
	GT = 2
C
	DX = LNE1(1,2) - LNE1(1,1)
	DY = LNE1(2,2) - LNE1(2,1)
	DX2 = LNE2(1,2) - LNE2(1,1)
	DY2 = LNE2(2,2) - LNE2(2,1)
C
	LEN1 = SQRT(DX**2+DY**2)
	LEN2 = SQRT(DX2**2+DY2**2)
C
	IF (LEN1.EQ.0.0.OR.LEN2.EQ.0.0) GOTO 800
C
C internal or external angle at this point
	CPROD = (LNE2(1,2)-LNE1(1,1))*DY -
     &	         DX*(LNE2(2,2)-LNE1(2,1))
C
C convert this to angle (sine)
	CPROD_ANG = CPROD/(LEN1 * LEN2)
C	
	IF (CPROD_ANG.GE.LTD) THEN
	   CURVE = .TRUE.
	ELSE
	   IF (ABS(CPROD_ANG).LT.LTD) THEN ! lines collinear
C
C if dot product is less than 0, the lines are in opposite directions,
C and a curve should be put round this point
	      IF ((DX*DX2 + DY*DY2).LT.0.0) THEN
	         CURVE = .TRUE.
	      ELSE
	         GOTO 800
	      ENDIF
	   ELSE
	      CURVE = .FALSE.
	   ENDIF
	ENDIF
	   
	IF (CURVE) THEN
C
C we are going to put a curve around the end of LNE1
C   
C - may want to use existing end of region as the start point
	   GOT_FIRST_POINT = REG_TRUNC(REG,OFFSET,LNE1,OUTSIDE)
	   GOT_FIRST_POINT = GOT_FIRST_POINT.AND.OUTSIDE
C
	   IF (REGPTR(3,REG).GT.0) THEN
	      CALL CPYPAK(2,%VAL(REGPTR(3,REG)+OFFX),LSTPT)
	   ENDIF
C
C use end of region as first point
	   IF (GOT_FIRST_POINT) THEN
	      XYCOORD(1,1) = LSTPT(1)
	      XYCOORD(2,1) = LSTPT(2)
	   ELSE
	      F = -OFFSET/LEN1
	      XYCOORD(1,1) = LNE1(1,2) + F*DY
	      XYCOORD(2,1) = LNE1(2,2) - F*DX
	   ENDIF
C
C centre of arc is end of LNE1
	   XYCOORD(1,2) = LNE1(1,2)
	   XYCOORD(2,2) = LNE1(2,2)
C   
	   F = -OFFSET/LEN2
	   XYCOORD(1,3) = XYCOORD(1,2) + F*DY2
	   XYCOORD(2,3) = XYCOORD(2,2) - F*DX2
	   IF (GENCIR(GT,XYCOORD,AUX)) GOTO 900
	   ANG_LTD = LINWDTH/AUX(RADI)
C
C check if 360 circle has been generated here, or a very small arc
	   IF ((ABS(AUX(TOTI)).GT.(TWOPI-ANG_LTD)).OR.
     &	       (ABS(AUX(TOTI)).LT.ANG_LTD)) GOTO 800
C
C if end point is inside current position, don't output anything
	   IF (REGPTR(1,REG).NE.REGPTR(2,REG)) THEN
	      CALL PTINARC(AUX,DBLE(LSTPT(1)),DBLE(LSTPT(2)),
     &	               INARC(1),DBLE(ANG_LTD))
C
	      IF (INARC(1).EQ.0) THEN
C
C need to intersect line from last point to centre of curve with arc
	         LINE(1,1) = LSTPT(1)
	         LINE(2,1) = LSTPT(2)
	         LINE(1,2) = LNE1(1,2)
	         LINE(2,2) = LNE1(2,2)
	         CALL LINARC(LINE,AUX,NUMBER,
     &	                  POINT1,POINT2,INLIN,INARC,TCH)
C
	         IF (NUMBER.GE.1) THEN
	            IF (INARC(1).EQ.0) THEN
	               XYCOORD(1,1) = POINT1(1)
	               XYCOORD(2,1) = POINT1(2)
	            ELSE
	               XYCOORD(1,1) = POINT2(1)
	               XYCOORD(2,1) = POINT2(2)
	            ENDIF
	         ENDIF
	         IF (GENCIR(GT,XYCOORD,AUX)) GOTO 900
	      ELSEIF (INARC(1).GT.1) THEN
	         GOTO 800
	      ELSE
C
C don't output an arc if the last point was on opposite side
C of line and the distance away is more than the offset
C
C is this point on the wrong side of the line completely?
	         LINE(1,1) = LNE1(1,1)
	         LINE(2,1) = LNE1(2,1)
	         LINE(1,2) = LNE2(1,2)
	         LINE(2,2) = LNE2(2,2)

	         CPROD = (LSTPT(1)-LINE(1,1))*(LINE(2,2)-LINE(2,1)) -
     &          (LINE(1,2)-LINE(1,1))*(LSTPT(2)-LINE(2,1))
	         CPROD1 = (XYCOORD(1,1)-LINE(1,1))*(LINE(2,2)-LINE(2,1)) -
     &          (LINE(1,2)-LINE(1,1))*(XYCOORD(2,1)-LINE(2,1))
	         DIST = (LSTPT(1)-XYCOORD(1,1))**2 +
     &                  (LSTPT(2)-XYCOORD(2,1))**2
	         IF ((SIGN(1.0,CPROD) .NE. SIGN(1.0,CPROD1)) .AND.
     &	             (DIST .GT. OFFSET*OFFSET)) GOTO 800
	      ENDIF
	   ENDIF
C
	   IF (REGCIRC(REG,AUX)) GOTO 900
C
C if the distance from next point to last output point is greater than
C offset distance, then calculate intersection of offset lines
	ELSE
C
C truncate back to first line
	   CALL REG_TRUNC(REG,OFFSET,LNE1,OUTSIDE)
C
C truncate back to second line - if line truncated, then we have
C got a suitable point, and can stop
	   IF (REG_TRUNC(REG,OFFSET,LNE2,OUTSIDE)) THEN
	      GOTO 800
	   ENDIF
C
	   CALL OFFSEG(-OFFSET,LNE1,L1)
	   CALL OFFSEG(-OFFSET,LNE2,L2)
C
	   IF (.NOT.INTSCT(L1,L2,POINT1,IN1,IN2)) THEN	! parallel lines
C
C if intersection is within both lines, then this point is OK
	      IF (IN1.AND.IN2) THEN
	         IF (ADDPPT(POINT1,REG)) GOTO 900
C
C if intersection is outside L2, then next line is too short, and 
C we want the point where the circle around NEXT cuts line L1
	      ELSEIF (.NOT.IN2) THEN
	         XYCOORD(1,1) = LNE2(1,2) + OFFSET
	         XYCOORD(2,1) = LNE2(2,2)
	         XYCOORD(1,2) = LNE2(1,2)
	         XYCOORD(2,2) = LNE2(2,2)
	         XYCOORD(1,3) = XYCOORD(1,1)
	         XYCOORD(2,3) = LNE2(2,2)
	         IF (GENCIR(GT,XYCOORD,AUX)) GOTO 900
	         CALL LINARC(L1,AUX,NUMBER,
     &	                  POINT1,POINT2,INLIN,INARC,TCH)
C
C I think there must be an intersection, but don't output anything
C if there is not
	         IF (NUMBER.GE.1) THEN
	            IF (INLIN(1).EQ.0.AND.INLIN(2).EQ.0) THEN
C
C take point closest to start of L1
	               DX  = POINT1(1)-L1(1,1)
	               DY  = POINT1(2)-L1(2,1)
	               DX2 = POINT2(1)-L1(1,1)
	               DY2 = POINT2(2)-L1(2,1)
	               IF ((DX**2+DY**2).LE.(DX2**2+DY2**2)) THEN
	                  IF (ADDPPT(POINT1,REG)) GOTO 900
	               ELSE
	                  IF (ADDPPT(POINT2,REG)) GOTO 900
	               ENDIF
	            ELSEIF (INLIN(1).EQ.0) THEN
	               IF (ADDPPT(POINT1,REG)) GOTO 900
	            ELSEIF (INLIN(2).EQ.0) THEN
	               IF (ADDPPT(POINT2,REG)) GOTO 900
	            ENDIF
	         ENDIF
C
C if intersection is outside L1, then we will not have got here, as
C the existing points will have been truncated, and we don't need to
C output anything
	      ENDIF
	   ENDIF
	ENDIF
C
800	GEN_REG_CRNR = .FALSE.
C
900	RETURN
	END

