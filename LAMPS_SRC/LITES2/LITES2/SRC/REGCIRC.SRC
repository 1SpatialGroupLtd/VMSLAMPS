C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-05-10 11:14:08.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION REGCIRC(REG,AUX)
C
***	MODULE	REGCIRC
***	IDENT	10MY96
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England
C
C Created (after STCIRC by CCB)			RWR	13-July-1989
C
C returns .TRUE. for failure
C
C Routine to generate the intermediate points on a circle/arc
C Method used is to work out the number of segments which are
C required and then use this to work out the angle subjected
C at the centre by a segment (ANGINC). The position of a point
C to be generated is found using the centre position, the radius
C and the angle at the centre:-
C	X = Xcentre + (Radius * COS(angle))
C	Y = Ycentre + (Radius * SIN(angle))
C
C Given that the starting angle and the angular increment are
C known the angles of each point can be found in turn using:-
C	SIN(a+b) = SIN(a)*COS(b) + COS(a)*SIN(b)
C	COS(a+b) = COS(a)*COS(b) - SIN(a)*SIN(b)
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:AUXDEF/	! layout of auxiliary array
***	PARAMETER/CMN:CONSTS/
***	PARAMETER/CMN:PACK/
C
***	COMMON/CMN:DRAWIN/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:STRIKE/
C
C arguments
	REAL	AUX(AUXLEN)	! standard circle auxiliary array
	INTEGER	REG		! region to add points to
C
C functions
	LOGICAL		ADDPPT
C
C W/s
	REAL*8 RTEMP		! temporary real
	REAL*8 SINANG,COSANG	! sin/cos of angle of current point
	REAL*8 SININC,COSINC	! sin/cos of the angular increment
	REAL   LIMIT_DIST
	INTEGER I
	INTEGER NUMSEG		! no. of segments actually required
	REAL XY(2),X,Y		! temporary coordinate array
	EQUIVALENCE (X,XY(1)),(Y,XY(2))
C
	REAL	FACTOR
	DATA	FACTOR/1.0/	! use same as generated circles
C
C***********************************************************************
C
	REGCIRC = .FALSE.	! in case nothing is output
C
C work out a sensible distance to check against
	LIMIT_DIST = AUX(RADI) - LINWDTH
C
C Work out number of segments required. (use tolerances for GENERATED
C arcs)
	RTEMP=CIGIFF(1)
	IF (CIGIFF(2).NE.0.0) RTEMP=RTEMP+CIGIFF(2)*SQRT(AUX(RADI))
	IF (CIGIFF(3).NE.0.0) RTEMP=RTEMP+CIGIFF(3)*AUX(RADI)
C
	RTEMP = RTEMP*FACTOR
C
	NUMSEG=INT(ABS(AUX(RADI)*AUX(TOTI))/RTEMP)+1
C
C Work out the angle subtended at the centre by a single segment
	RTEMP=DBLE(AUX(TOTI))/DBLE(NUMSEG)
C
C Initialise variables used in the main loop.
	SININC=SIN(RTEMP)	! for the angular increment
	COSINC=COS(RTEMP)
	SINANG=SIN(DBLE(AUX(STAI)))	! for the angle of 
					! the current (1st) pt
	COSANG=COS(DBLE(AUX(STAI)))
C
C***********************************************************************
C
C Main loop (for generating position of each point)
	DO 10 I=1,NUMSEG
C Work out the position of the next point
	   X = AUX(XCENI)+AUX(RADI)*COSANG
	   Y = AUX(YCENI)+AUX(RADI)*SINANG 
C
	   REGCIRC = ADDPPT(XY,REG)
	   IF (REGCIRC) GOTO 900
C
C Work out the angle (at the centre) of the next point
8	   RTEMP=SINANG
	   SINANG=SINANG*COSINC+COSANG*SININC
	   COSANG=COSANG*COSINC- RTEMP*SININC
10	CONTINUE
C
C don't output last point, if region is closed
	IF (ABS(AUX(TOTI)).NE.TWOPI) THEN
	   X = AUX(XCENI)+AUX(RADI)*COSANG
	   Y = AUX(YCENI)+AUX(RADI)*SINANG 
	   REGCIRC = ADDPPT(XY,REG)
	   IF (REGCIRC) GOTO 900
	ENDIF
C
C***********************************************************************
C
900	RETURN
	END
