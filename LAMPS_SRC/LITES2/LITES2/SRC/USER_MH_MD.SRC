C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-05-10 13:05:48.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
  	LOGICAL FUNCTION USER_MH_MD(ROUTINE_ADDRESS,RETCOD)
C
***	IDENT	10MY96
***	MODULE	USER_MH_MD
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Written					RWR	10-Oct-1990
C
C	Routine to read and write map header and map descriptor from
C	user routines
C	Returns FALSE for success
C
C NOTE: THIS ROUTINE ASSUMES THAT ARRAYS IN MHOSGB ARE LONGER THAN MHDEF
C       ================================================================
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:EFNLUN/
***     PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:USRERR/
C
***	COMMON/CMN:MAPS/
***	COMMON/LSL$CMNIFF:MD2DES/
***	COMMON/LSL$CMNIFF:MHOSGB/
***	COMMON/CMN:USER/
C
C arguments
	INTEGER		ROUTINE_ADDRESS		! address to call
	INTEGER		RETCOD
C
C Workspace
C
	INTEGER		MAP
	INTEGER		MH_LEN			! length in words
	INTEGER		MD_LEN			! length in words
	INTEGER		MH_LEN_SAV
	INTEGER		MD_LEN_SAV
	LOGICAL		WRITE_MH
	LOGICAL		WRITE_MD
	LOGICAL		WRITE_MH_SAV
	LOGICAL		WRITE_MD_SAV
	INTEGER		IELEN
C
C assume failure
	USER_MH_MD = .TRUE.
C
C check that USRGMH routine exists - if not do default action of calling
C USRDO
	IF (ROUTINE_ADDRESS.EQ.0) THEN
	   RETCOD = 4
	   USER_MH_MD = .FALSE.		! not an error ?????
	   GOTO 9999
	ENDIF
C
C check that map exists
	MAP = RETCOD - 101		! internally, maps start at 0
	IF (MAP.LT.0.OR.MAP.GT.MAPTOP) GOTO 501
	IF (MAP_EXIST(MAP)) GOTO 502
501	CALL MOAN(MSG_MAPNOTEXIST,MAP+1)
	GOTO 9999
C
C and select it
502	CALL SELIF(MAP)
C
C is map read_only?
	WRITE_MH = .NOT.MAPRO(MAP)
	WRITE_MD = WRITE_MH
	WRITE_MH_SAV = WRITE_MH
	WRITE_MD_SAV = WRITE_MD
C
C rewind map, and find map header
	CALL IFFRWD
	CALL IFFNXC('MH',IELEN)
	IF (IELEN.EQ.-1) THEN
	   MH_LEN = 0
	ELSE
	   MH_LEN = MIN(IELEN,MH2LEN)
	   CALL EIHR(MH2ARR,MH_LEN,1)
	ENDIF
	MH_LEN_SAV = MH_LEN
C
C rewind map, and find map descriptor
	CALL IFFRWD
	CALL IFFNXC('MD',IELEN)
	IF (IELEN.EQ.-1) THEN
	   MD_LEN = 0
	ELSE
	   MD_LEN = MIN(IELEN,MD2LEN)
	   CALL EIHR(MD2ARR,MD_LEN,1)
	ENDIF
	MD_LEN_SAV = MD_LEN
C
C now call user routine
	CALL CALLR(MH_LEN,			! length of MH
     &	   MH2ARR,
     &	   WRITE_MH,
     &     MD_LEN,
     &     MD2ARR,
     &     WRITE_MD,
     &	   RETCOD,
     &	   %VAL(ROUTINE_ADDRESS))
C
C do we want to write the map header back?
	IF (WRITE_MH.AND.MH_LEN.GT.0) THEN
	   IF (.NOT.WRITE_MH_SAV) THEN		! map is read only
	      CALL MOAN(MSG_MAPREADONLY,MAP+1)
	      GOTO 9999
	   ELSEIF (MH_LEN .GT. MH_LEN_SAV) THEN
	      CALL MOAN(MSG_MDMHTOOBIG)
	      CALL MOAN(MSG_MDMHTOOBIG1)
	      GOTO 9999
	   ELSE
C
C rewind map, and find map header
	      CALL IFFRWD
	      CALL IFFNXC('MH',IELEN)   	! if IFFNXC fails,
	      CALL EIHW(MH2ARR,MH_LEN,1)	! this will fail
	   ENDIF
	ENDIF
C
C do we want to write the map descriptor back?
	IF (WRITE_MD.AND.MD_LEN.GT.0) THEN
	   IF (.NOT.WRITE_MD_SAV) THEN		! map is read only
	      CALL MOAN(MSG_MAPREADONLY,MAP+1)
	      GOTO 9999
	   ELSEIF (MD_LEN .GT. MD_LEN_SAV) THEN
	      CALL MOAN(MSG_MDMHTOOBIG)
	      CALL MOAN(MSG_MDMHTOOBIG1)
	      GOTO 9999
	   ELSE
C
C rewind map, and find map header
	      CALL IFFRWD
	      CALL IFFNXC('MD',IELEN)   	! if IFFNXC fails,
	      CALL EIHW(MD2ARR,MD_LEN,1)	! this will fail
	   ENDIF
	ENDIF
C
C finished successfully
	USER_MH_MD = .FALSE.
C
9999	RETURN
	END
