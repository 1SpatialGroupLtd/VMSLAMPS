C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-09-09 17:32:00.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE ADDVRT( PACK, V1, V2, MOVE )
C
***	MODULE	ADDVRT
***	IDENT	09SE92
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author  Clarke Brunt
C
C Coded 10.ix.84
C
C To add vertices V1 to V2 inclusive of the feature pointed at by
C PACK to the current output item.
C If MOVE is true, then CHCSXY in /VARIAT/ is added to each point
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$CMNIFF:CB.STR'
C
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:PACK/
C
***	COMMON/CMN:CSTRCT/
***	COMMON/CMN:DEFINE/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:OIIH/
***	COMMON/CMN:STRIKE/
***	COMMON/CMN:VARIAT/
C
C arguments
	INTEGER*4	PACK(PAKLEN)	! PACK for feature
	INTEGER		V1		! first vertex wanted
	INTEGER		V2		! last vertex wanted
	LOGICAL*1	MOVE		! apply offset?
C
C w/s
	INTEGER VV1,VV2		! copies of arguments
	INTEGER I,J		! temporary
	INTEGER	NVRTS		! number of vertices wanted
	INTEGER	FLG		! save for ENDS flag
	LOGICAL*1 REV		! copying backwards
	INTEGER OPER
	INTEGER NATT		! number of attributes (for point)
	INTEGER ATTC(MXATTR)	! the attributes
	INTEGER ATTV(MXATTR)	! the values
	LOGICAL	FAR_MOVE
	REAL	TMP
	INTEGER	TMPI
	EQUIVALENCE	(TMP,TMPI)
C
	VV1 = V1
	VV2 = V2
	REV = (VV2.LT.VV1)	! we are going backwards
	NVRTS = IABS(VV2-VV1)+1	! number of vertices
	FLG = 1			! assume visible to first point
	OPER = DEFINITION(P_MOVE)
	IF (OPER.EQ.0) OPER = DEFINITION(P_OTHER)
C
C do we need to do a OPERATION FAR_MOVE?
	FAR_MOVE = .FALSE.
	IF (MOVE .AND. (DEFINITION(P_FAR_MOVE) .NE. 0)) THEN
	   TMP = CHCSXY(1)*CHCSXY(1) + CHCSXY(1)*CHCSXY(1)
	   FAR_MOVE = (TMP .GT. FAR_MOVE_IFF**2)
	ENDIF
C
C Get some vertices
10	CALL GETVRT(PACK,VV1,VV2)
C
C If copying forwards, force first vertex to be visible
C (If this really is the first vertex of a new feature, then FLUSH
C will ensure that it is marked pen-up, but if it is the first vertex
C of a bridged bit, then we don't want it marked invisible.)
	IF (.NOT.REV.AND.VV1.EQ.1) RIFLG(1) = RIFLG(1).OR.1
C
C apply offset
	IF (MOVE) THEN
	   DO 20 I=1,RITOP
	      RIXY(1,I) = RIXY(1,I)+CHCSXY(1)
	      RIXY(2,I) = RIXY(2,I)+CHCSXY(2)
C
C and Z values
	      IF (ZOPT.AND.CHCZI.NE.IFF_ABSENT.AND.CHCSXY(3).NE.0.0) THEN
	         CALL GETZ(TMP,RINATT,RIATTC,RIATTV(1,I))
	         IF (TMPI.NE.IFF_ABSENT) THEN
	            TMP = TMP + CHCSXY(3)
	            CALL ADDZ(TMP,RINATT,RINATT,RIATTC,RIATTV(1,I))
	         ENDIF
	      ENDIF
20	   CONTINUE
	ENDIF
C
C add them to output item
	IF (REV) THEN
C
C deal specially with first point
	   IF (IAND(FLG,1).EQ.0) THEN
	      CALL FLUSH(1)
	      OIENDS = 0
	   ENDIF
	   IF (MOVE) THEN
C
C make copy of attributes, and update them (as this may increase number)
	      NATT = RINATT
	      DO 22, J = 1,NATT
	         ATTC(J) = RIATTC(J)
	         ATTV(J) = RIATTV(J,RITOP)
22	      CONTINUE
	      CALL LSTARR(OPER,NATT,ATTC,ATTV,.TRUE.)
	      IF (FAR_MOVE)
     &	         CALL LSTARR(DEFINITION(P_FAR_MOVE),
     &	                     NATT,ATTC,ATTV,.TRUE.)   
	      CALL ADCORD(RIXY(1,RITOP),NATT,ATTC,ATTV)
	   ELSE
	      CALL ADCORD(RIXY(1,RITOP),RINATT,RIATTC,RIATTV(1,RITOP))
	   ENDIF
	   DO 40 I=RITOP-1,1,-1
C
C FLUSH if invisible to this point (remember going backwards)
	      FLG = RIFLG(I+1)
	      IF (IAND(FLG,1).EQ.0) THEN
	         CALL FLUSH(1)
	         OIENDS = 0		! invisible
	      ENDIF
	      IF (MOVE) THEN
C
C make copy of attributes, and update them, before adcording (as number
C may be increased)
	         NATT = RINATT
	         DO 30, J = 1,NATT
	            ATTC(J) = RIATTC(J)
	            ATTV(J) = RIATTV(J,I)
30	         CONTINUE
	         CALL LSTARR(OPER,NATT,ATTC,ATTV,.TRUE.)
	         IF (FAR_MOVE)
     &	            CALL LSTARR(DEFINITION(P_FAR_MOVE),
     &	                        NATT,ATTC,ATTV,.TRUE.)   
	         CALL ADCORD(RIXY(1,I),NATT,ATTC,ATTV)
	      ELSE
	         CALL ADCORD(RIXY(1,I),RINATT,RIATTC,RIATTV(1,I))
	      ENDIF
40	   CONTINUE
	   FLG = RIFLG(1)		! preserve flag
	ELSE
	   DO 50 I=1,RITOP
C
C Flush if invisible up to the current point
	      FLG = RIFLG(I)
	      IF (IAND(FLG,1).EQ.0) THEN
	         CALL FLUSH(1)
	         OIENDS = 0		! invisible
	      ENDIF
	      IF (MOVE) THEN
C
C make copy of attributes, and update them, before adcording
	         NATT = RINATT
	         DO 45, J = 1,NATT
	            ATTC(J) = RIATTC(J)
	            ATTV(J) = RIATTV(J,I)
45	         CONTINUE
	         CALL LSTARR(OPER,NATT,ATTC,ATTV,.TRUE.)
	         IF (FAR_MOVE)
     &	            CALL LSTARR(DEFINITION(P_FAR_MOVE),NATT,
     &	                        ATTC,ATTV,.TRUE.)   
	         CALL ADCORD(RIXY(1,I),NATT,ATTC,ATTV)
	      ELSE
	         CALL ADCORD(RIXY(1,I),RINATT,RIATTC,RIATTV(1,I))
	      ENDIF
50	   CONTINUE
	ENDIF
C
C have we finished?
	NVRTS = NVRTS-RITOP
	IF (NVRTS.GT.0) THEN		! still more to do
	   IF (REV) THEN
	      VV1 = VV1-RITOP
	   ELSE
	      VV1 = VV1+RITOP
	   ENDIF
	   GOTO 10			! round again
	ENDIF
C
	RETURN
	END
