C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-05-09 10:40:00.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION SUBVAR(S,ARGL,ARG)
C
***	IDENT	09MY96
***	MODULE	SUBVAR
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					CCB	 7-Jan-1986
C
C To decode the current line subtituting values for variables.
C Expanded string returned in S, function value is length.
C Macro argument string length and string are passed.
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:CHARS/
***	PARAMETER/CMN:MOANMESS/
C
***	COMMON/CMN:GLOBAL/
***	COMMON/CMN:VARIABLE/
C
C arguments
	CHARACTER*(*)	S		! string to expand into
	INTEGER*4	ARGL		! argument string length
	CHARACTER*(*)	ARG		! argument string
C
C function called
	LOGICAL		RDCH
	INTEGER		EXPVAR
C
C workspace
	INTEGER		TYPE		! type of variable (unused)
	INTEGER		LENGTH		! length of string
	INTEGER		PTR		! pointer into output
	BYTE		CH
C
	LENGTH = LEN(S)			! obtain length
	PTR = 0				! initialise pointer
C
10	IF (RDCH(CH)) GOTO 999		! end of line
	IF (CH.EQ.QOT) THEN		! opening '
C
C Find variable name.
C Permit system, must exist, subscript required, substituting
	   CALL FINVAR(.TRUE.,.TRUE.,.TRUE.,.TRUE.)
	   IF (MOANED) GOTO 999		! error
C
C Gobble up any ' (which must follow immediately), and expand value
	   IF (.NOT.RDCH(CH)) THEN
	      IF (CH.NE.QOT) CALL BSCH
	   ENDIF
	   IF (PTR.GE.LENGTH) THEN
	      CALL MOAN(MSG_CHAROFLOW)	! overflow
	   ELSE
	      VARGLEN = ARGL		! set common with length and address
	      VARGLOC = %LOC(ARG)	! of $Pn's, for VALVAR
	      PTR = PTR + EXPVAR(S(PTR+1:),TYPE)
	      VARGLOC = 0		! clear common again
	   ENDIF
	ELSE				! not a variable, just copy
	   IF (PTR.GE.LENGTH) THEN
	      CALL MOAN(MSG_CHAROFLOW)	! overflow
	   ELSE
	      PTR = PTR+1
	      S(PTR:PTR) = CHAR(CH)
	   ENDIF
	ENDIF
	IF (.NOT.MOANED) GOTO 10
C
999	SUBVAR = PTR
	RETURN
	END
