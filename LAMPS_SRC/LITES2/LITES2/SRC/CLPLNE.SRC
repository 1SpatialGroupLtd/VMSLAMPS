C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1995-05-01 15:33:34.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION CLPLNE(LINE,POINT)
C
***     IDENT   01MY95
***     MODULE  CLPLNE
C
C       Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C       Created:	                                RWR 	 3-Mar-1986
C	Modified: CLIP INREGION Fault (SPR2950)		TJM	 1-May-1995
C
C Description
C
C	Function to add an intersection point to the list of intersection
C	points for this line (for clipping to regions)
C
        IMPLICIT NONE
C
C Included Parameter Files
C
***	PARAMETER/CMN:REGPAR/
C
C Common Blocks
C
C**************  DEBUG *************
***	COMMON/CMN:OPTION/
C************************************
***	COMMON/CMN:MASTER/
***	COMMON/CMN:REGCMN/
C
C arguments
C
	REAL*4		LINE(2,2)	! line being tested
	REAL*4		POINT(2)	! point being added to list
C
C Functions called
C
	LOGICAL		GETPPT
C
C Local Variables
C
	INTEGER		CURPPT		! current PPT when scanning list
	INTEGER		LSTPPT		! previous PPT
	INTEGER		PPTADR		! address of PPT being added to
					! LIST
	INTEGER		OFF 		! offset of X or Y in PPT 
	REAL		XY		! X or Y of POINT 
	REAL		XY1,XY2		! X or Y of previous and current
					! point
C
C initialise
C
	CLPLNE=.TRUE.			! assume failure
C
C get a PPT and put this point in it
C
	IF (GETPPT(PPTADR)) GOTO 900		! collapsed
c************* debug **************************************************
	if (diaopt) call writef('Address of new PPT in CLPLNE: %^L%N',
     &	                              pptadr)
c***********************************************************************
	CALL PUTLNG(POINT(1),%VAL(PPTADR+OFFX))
	CALL PUTLNG(POINT(2),%VAL(PPTADR+OFFY))
	CALL PUTLNG(0,%VAL(PPTADR))		! address of next PPT
C
C put this PPT in list of intersections in correct place
C
	IF (LSTINT.EQ.0) THEN		! list empty (usual case)
	   LSTINT=PPTADR
	ELSE				! need to scan list and put
					! PPT in correct place
C
C initialise scan
C
C use X or Y depending on greatest difference in LINE
C
	   IF (ABS(LINE(1,1)-LINE(1,2)).GE.ABS(LINE(2,1)-LINE(2,2))) THEN
	      OFF=OFFX
	      XY=POINT(1)
	      XY2=LINE(1,1)
	   ELSE
	      OFF=OFFY
	      XY=POINT(2)
	      XY2=LINE(2,1)
	   ENDIF
C
	   CURPPT=LSTINT
	   LSTPPT=0
C
C if at end of list, then add PPT to end
C
   10	   CONTINUE
	   IF (CURPPT.EQ.0) THEN	! empty list dealt with above
	      CALL PUTLNG(PPTADR,%VAL(LSTPPT))	! so LSTPPT.NE.0
C
C extract coords from current PPT
C
	   ELSE
	      XY1=XY2
	      CALL PUTLNG(%VAL(CURPPT+OFF),XY2)
C
C check if point lies between these points
C
	      IF (XY+LINWDTH.GE.MIN(XY1,XY2) .AND.
     &		  XY-LINWDTH.LE.MAX(XY1,XY2)) THEN
C
C add PPT between LSTPPT and CURPPT
C
	         IF (LSTPPT.EQ.0) THEN
	            LSTINT=PPTADR
	         ELSE
	            CALL PUTLNG(PPTADR,%VAL(LSTPPT))
	         ENDIF
	         CALL PUTLNG(CURPPT,%VAL(PPTADR))
C
C continue with scan
C
	      ELSE
	         LSTPPT=CURPPT
	         CALL PUTLNG(%VAL(CURPPT),CURPPT)
	         GOTO 10
	      ENDIF
	   ENDIF
	ENDIF
C
C exit
C
	CLPLNE=.FALSE.
  900	CONTINUE
        RETURN
        END
