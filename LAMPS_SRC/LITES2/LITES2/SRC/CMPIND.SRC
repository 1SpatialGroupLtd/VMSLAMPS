C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1984-09-07 18:36:02.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE CMPIND(STP,STV,TOP)
C
***	MODULE	CMPIND
***	IDENT	07SE84
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C
C To compress an ST index to make room for more entries
C Used by HAULIN and GETVRT
C It attempts to halve the number of entries used, by throwing away
C entries closer together than twice the average 'vertex separation'.
C The first entry is always retained
C
	IMPLICIT NONE
C
C arguments
	INTEGER		TOP			! last used entry
	INTEGER*4	STP(TOP)		! ST pointers
	INTEGER*4	STV(TOP)		! vertex offsets
C
C w/s
	INTEGER		I
	INTEGER		NEWTOP			! new last used entry
	INTEGER		SEP			! desired separation
	INTEGER		NEWVO			! new vertex offset
C
	SEP = 2*STV(TOP)/(TOP-1)		! average separation
C
	NEWTOP = 1
	NEWVO = SEP
	DO 11 I=2,TOP
	   IF (STV(I).GE.NEWVO) THEN		! want this entry
	      NEWVO = NEWVO + SEP
	      NEWTOP = NEWTOP+1
	      STV(NEWTOP) = STV(I)
	      STP(NEWTOP) = STP(I)
	   ENDIF
11	CONTINUE
	TOP = NEWTOP
	RETURN
C
	END
