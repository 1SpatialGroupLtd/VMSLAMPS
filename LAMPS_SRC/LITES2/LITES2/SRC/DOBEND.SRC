	SUBROUTINE DOBEND
C
***	IDENT   23DE86
***	MODULE  DOBEND
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Written                                 RWR	 17-NOV-1986
C
C	LITES2 cartographic editor BEND command.
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:CONSTS/
***	PARAMETER/CMN:CTXS/
***	PARAMETER/CMN:END/		! possible values for NDMODE
***	PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:PACK/
***	PARAMETER/CMN:STAPAR/
C
***	COMMON/LSL$CMNFRT:FRTCOM/
***	COMMON/CMN:CTXS/
***	COMMON/CMN:DOUT/
***	COMMON/CMN:MASTER/		! odds and ends
***	COMMON/CMN:MODIFY/
***	COMMON/CMN:OIIH/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:RFCTRL/
***	COMMON/CMN:STATE/
***	COMMON/CMN:STRIKE/
C
C w/s
	EXTERNAL	MOAN,NASTY
C
	INTEGER		I
	REAL		ANG
C
C functions
	LOGICAL		NDBEND
C
C don't operate on symbols
	IF (COIPAK(PAKGT).NE.TEXTYP) THEN
	   CALL MSGCMD(MOAN,MSG_CMDONLYTEXT)
	   GOTO 999
	ENDIF
C
C only valid if COMOPT has been enabled
C
	IF (.NOT.COMOPT) THEN
	   CALL MSGCMD(MOAN,MSG_ONLYWITHCOMP)
	   GOTO 999
	ENDIF
C
C only with lines and arcs
	IF (.NOT.FO) THEN
	   CALL MOAN(MSG_NOFEATURE)
	   GOTO 999
	ELSEIF (FOPAK(PAKGT).GE.UNOTYP.AND.
     &	    FOPAK(PAKGT).LE.TEXTYP)THEN
	   CALL MOAN(MSG_NOTLINEAR) ! wrong graphical type
	   GOTO 999
C
C cannot bend round one point symbol string
C
	ELSEIF (FOLST.EQ.1) THEN	! one point (symbol string)
	   CALL MOAN(MSG_NOBENDONEPT)
	   GOTO 999
	ENDIF
C
C Must be on line to BEND
	IF (.NOT.FONLIN) THEN
	   CALL MOAN(MSG_NOTONLINE)
	   CALL LEARN(MSG_USEON)
	   GOTO 999
	ELSE
C
C save cursor position
	   FMVRT = FOVRT
	   FMNVRT = FONVRT
	   FMCXY(1) = FOCXY(1)
	   FMCXY(2) = FOCXY(2)
	ENDIF
C
C only on single texts
C
	IF (COICTXD(CTXD_NCTX).GT.1) THEN
	   CALL MSGCMD(MOAN,MSG_ONLYWITHSING)
	   CALL LEARN(MSG_USECOLLAPS)
	   GOTO 999
	ENDIF
C
	SUBTXT = .FALSE.		! implicit WHOLE command
C
C zap rubber band lines
	RUBLIN(1) = .FALSE.
	RUBCHG = .TRUE.
C
C expecting END command
	NDMODE = END_BEND
C
C for linear features, find out if going forward or backward.
	I = FOPAK(PAKGT)
	IF (I.EQ.LINTYP.OR.I.EQ.CURTYP.OR.
     &	            I.EQ.STRTYP.OR.I.EQ.ARETYP) THEN
	   I = FOVRT-FOVO
	   IF (FOVRT.EQ.FOLST) I = I-1
	   ANG = ATAN2(FOXY(2,I+1)-FOXY(2,I),
     &	               FOXY(1,I+1)-FOXY(1,I))
C
C angle between this vector and the text
C
	   ANG = ANG - COIAUX(ANGI)
C
C get in range -PI > ANG < +PI
C
   90	   IF (ANG.LT.-PI) THEN
	      ANG = ANG + TWOPI
	      GOTO 90
	   ELSEIF (ANG.GE.PI) THEN
	      ANG = ANG - TWOPI
	      GOTO 90
	   ENDIF
C
C bending forward if this angle is between -pibi2 and +pibi2
C
	   BNDFWD = -PIBI2.LT.ANG.AND.ANG.LE.+PIBI2
	ENDIF
C
C Despatch according to secondary command
	GOTO (100,200), DSECN
C
C Secondary command number out of range
	IF (DSECN.EQ.0) GOTO 100	! default is BEND NORMAL
	CALL MSGCMD(NASTY,MSG_ERRSECIND)
	GOTO 999
C
C Secondary command NORMAL
100	CONTINUE
	BNDSTR = .FALSE.
	IF (NDBEND()) GOTO 999
	GOTO 1000
C
C Secondary command STRETCH
200	CONTINUE
	BNDSTR = .TRUE.
	BENDMAP = FOPAK(PAKMAP)
	BENDPNF = FOPAK(PAKPNF)
C
C constrain cursor on feature
	FNDMDE = 1
	CALL CURCON
	GOTO 1000
C
999	CALL IGNCMD
C
1000	RETURN
	END
