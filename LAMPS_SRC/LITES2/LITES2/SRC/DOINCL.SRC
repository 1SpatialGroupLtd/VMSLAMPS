	SUBROUTINE DOINCL
C
***	IDENT	07DE94
***	MODULE	DOINCL
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Written					RWR	22-Oct-1985
C
C	LITES2 cartographic editor INCLUDE command.
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:ACS/
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:END/
***     PARAMETER/CMN:MOANMESS/		! moan constants
***	PARAMETER/CMN:PACK/
***	PARAMETER/CMN:STAPAR/		! state constants
***     PARAMETER/CMN:START/		! digitising procedures
C
***	COMMON/CMN:ACS/
***	COMMON/CMN:ATTBTS/
***     COMMON/CMN:CSTRCT/
***	COMMON/CMN:DEFINE/
***	COMMON/CMN:DOUT/
***	COMMON/LSL$CMNFRT:FRTCOM/
***     COMMON/CMN:MASTER/
***     COMMON/CMN:STATE/		! state variables
***	COMMON/CMN:STRIKE/
C
C Functions called
	LOGICAL		STRTER,CHKFOL,FRTFND,CIRCLE
C
	EXTERNAL 	NASTY
C
C w/s
	INTEGER		FLG
	LOGICAL		BACK
C
C check that OK to INCLUDE
C
C 1) generating feature?
C
	IF (SINDEX.EQ.STATE_CONSTRUCT.AND.(CONGEN.OR.CIRCLE())) THEN
	   CALL MOAN(MSG_NOTINCLANDGEN)
	   GOTO 980
C
C 2) found feature not linear
C
	ELSEIF (.NOT.CHKFOL(.FALSE.)) THEN
	   GOTO 980
C
C 3) on end of found feature for INCLUDE WHOLE
C
	ELSEIF ((DSECN.EQ.0.OR.DSECN.EQ.1).AND..NOT.
     &	        (FONLIN.AND.FONVRT.AND.
     &	        (FOVRT.EQ.1.OR.FOVRT.EQ.FOLST))) THEN
	   CALL MOAN(MSG_NOTONEND)
	   CALL LEARN(MSG_USEFIRST)
	   GOTO 980
	ENDIF
C
C remember if bridging
C
	INCBRD = SINDEX.EQ.STATE_CONSTRUCT.AND.
     &	   (NDMODE.EQ.END_BRIDGE.OR.NDMODE.EQ.END_BRIDGE_CLOSE)
C
C if in LINE state - have to start new feature
C
	IF (SINDEX.EQ.STATE_LINE) THEN
C
C check that we hope to construct a linear feature
C
	   IF (FRTFND(CONFC)) THEN
	      CALL MOAN(MSG_BADCODE,CONFC)
	      GOTO 980
	   ELSEIF (FRTGT.NE.LINTYP.AND.FRTGT.NE.CURTYP.AND.
     &	           FRTGT.NE.STRTYP.AND.FRTGT.NE.ARETYP) THEN
	      CALL MOAN(MSG_CONFCNOTLINE,CONFC)
	      GOTO 980
	   ENDIF
C
C make sure that we are not trying to construct circle, or anything
C 1) generated circle, arc and polygon construction
	   CONGEN = .FALSE.
	   CONCIR = .FALSE.
	   CONCLO = .FALSE.
	   CONCEN = .FALSE.
C
C 2) rectangle construction
	   CONRECT = .FALSE.
	   CONDIAG = .FALSE.
	   CONSIDE = .FALSE.
C
	   JUSTIN=.FALSE.	! not just INCLUDED!
C
C start feature
C
	   FLG_ADD = .TRUE.			! added a new feature
	   IF (STRTER(START_INIT,START_VISIBLE)) GOTO 980
	ENDIF
C
C if not just finished an INCLUDE at this point, then output this point
C
	IF (CONIND.EQ.0) THEN
	   IF (STRTER(START_ADD,START_VISIBLE)) GOTO 980
	ELSEIF (.NOT.JUSTIN.OR.(CONXY(1,CONIND).NE.CSXY(1))
     &	               .OR.(CONXY(2,CONIND).NE.CSXY(2))) THEN
	   IF (STRTER(START_ADD,START_VISIBLE)) GOTO 980
	ENDIF
C
C Dispatch on secondary command
C
	GOTO (100,200), DSECN
C
C Secondary command number out of range
C
	IF (DSECN.EQ.0) GOTO 100	! default is WHOLE
	CALL MSGCMD(NASTY,MSG_ERRSECIND)
	GOTO 980
C
C Secondary command WHOLE
C
  100	CONTINUE
	IF (FOLST.EQ.1) GOTO 120	! one point line
	BACK=FOVRT.EQ.FOLST
C
C move onto next vertex, and output the point
C
  110	CONTINUE
	IF (BACK) THEN
	   FOVRT=FOVRT-1
	ELSE
	   FOVRT=FOVRT+1
	ENDIF
	FONVRT=.TRUE.
	CALL VERTEX(0.0)
	IF (.NOT.BACK) THEN
	   FLG=FOFLG(FOVRT-FOVO)
	ELSE
	   FLG=FOFLG(FOVRT-FOVO+1)
	ENDIF
	IF (STRTER(START_ADD,FLG)) GOTO 980
	IF (FOVRT.NE.1.AND.FOVRT.NE.FOLST) GOTO 110	! next vertex
C
C finished
C
  120	CONTINUE
	JUSTIN=.TRUE.			! just finished include
	POSCMD=.FALSE.			! VERTEX has set it
	CALL DROP
	FNDMDE=0
	IF (INCBRD) THEN
	   NDMODE = END_BRIDGE
	ELSE
	   NDMODE = END_START		! ready to end
	ENDIF
	CALL SETSTA(STATE_CONSTRUCT)
	GOTO 1000
C
C secondary command PART
C
  200	CONTINUE
C
C mark this vertex and get into ON state
C
	FMVRT=FOVRT
	FMNVRT=FONVRT
	FMCXY(1)=CSXY(1)
	FMCXY(2)=CSXY(2)
	FMCZI = CSZI			! z value of cursor
	FNDMDE=1
	CALL CURCON			! constrain on feature
	NDMODE=END_INCLUDE 
	CALL SETSTA(STATE_ON)
	GOTO 1000
C
C error exit
980	CALL IGNCMD
C
1000	RETURN
	END
