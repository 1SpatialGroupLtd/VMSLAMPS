C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-08-23 13:22:52.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        SUBROUTINE DOEXTE
C
***     IDENT   23AU94
***     MODULE  DOEXTE
C
C       Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C       Written                                 CCB	11-JAN-1985
C
C	LITES2 cartographic editor EXTEND command.
C
        IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:EFNLUN/
***	PARAMETER/CMN:END/
***     PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:PACK/
***	PARAMETER/CMN:STAPAR/
C
***	COMMON/CMN:MAPS/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:RFCTRL/
***	COMMON/CMN:STRIKE/
C
C local variables
	INTEGER	I,J
	REAL	XY(2,3)
	INTEGER	Z(3)
C
C functions
	LOGICAL	PLANE
C
C EXTEND is identical to EDIT on an end vertex with a cursor constraint
C
C is map read-only?
	IF (MAPRO(FOPAK(PAKMAP))) THEN
	   CALL MOAN(MSG_MAPREADONLY,FOPAK(PAKMAP)+1)
	   GOTO 998
	ENDIF
C
C Must be on line and on an end vertex to EXTEND
	IF (.NOT.(FONLIN.AND.FONVRT.AND.
     &			(FOVRT.EQ.1.OR.FOVRT.EQ.FOLST))) THEN
	   CALL MOAN(MSG_NOTONEND)
	   CALL LEARN(MSG_USEFIRST)
	   GOTO 998
	ENDIF
C
C constrain cursor (c.f. FORCE PARALLEL)
	I = FOVRT-FOVO			! index on FOXY
	IF (FOVRT.EQ.FOLST) I = I-1	! back up if on last vertex
	SCSARC = .FALSE.
	SCSTXY(1,1) = FOXY(1,I)
	SCSTXY(2,1) = FOXY(2,I)
	SCSTXY(1,2) = FOXY(1,I+1)
	SCSTXY(2,2) = FOXY(2,I+1)
	FNDMDE = 0			! not intersect with FO now
	CALL CURCON			! constrain cursor
C
C
C set up planes for forcing onto
	IF (ZOPT) THEN
	   CALL HAULIN(0)		! make sure vertices present
	   IF (FO_Z_COL.NE.-1) THEN
	      DO 10, J = 1,3
	         I = FOVRT - FOVO		! index into found object
	         IF (J.EQ.1) THEN
	            IF (FOVRT.NE.1) THEN
	               I = I-1
	            ELSE
	               I = I+1
	            ENDIF
	         ELSEIF (J.EQ.3) THEN
	            IF (FOVRT.EQ.FOLST) THEN
	               I = I-1
	            ELSE
	               I = I+1
	            ENDIF
	         ENDIF
	         XY(1,J) = FOXY(1,I)
	         XY(2,J) = FOXY(2,I)
	         Z(J) = FOATTV(FO_Z_COL,I)
10	      CONTINUE
	      FORCE_C_SETUP=PLANE(XY,Z,FORCE_COEFFS)
	      IF (Z(2).NE.IFF_ABSENT) THEN
	         CALL PUTLNG(Z(2),FORCE_HEIGHT)
	         FORCE_H_SETUP = .TRUE.
	      ENDIF
	   ENDIF
	ENDIF
C
	CALL HANDLE			! take object into hand
	NDMODE = END_EDIT		! ready to END
	CALL SETSTA(STATE_EDIT)		! into EDIT state
C
C set up rubber banding
	RUBCHG = .TRUE.
	RUBLIN(1) = .TRUE.
	IF (IHVRT.EQ.1) THEN
	   RUBARR(1,1) = IHXY(1,2)
	   RUBARR(2,1) = IHXY(2,2)
	ELSE
	   RUBARR(1,1) = IHXY(1,IHLST-IHVO-1)
	   RUBARR(2,1) = IHXY(2,IHLST-IHVO-1)
	ENDIF
	GOTO 999
C
C error exit
998	CALL IGNCMD
C
999	RETURN
        END
