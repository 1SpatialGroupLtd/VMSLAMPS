C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-05-09 11:54:02.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE DOTAKE
C
***	IDENT	09MY96
***	MODULE	DOTAKE
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Written				Clarke Brunt	7-Jan-1986
C
C	LITES2 cartographic editor TAKE command
C	(Used to be TRANSFER command)
C
        IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:ACS/
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:CTXS/
***	PARAMETER/CMN:EFNLUN/
***	PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:PACK/
***	PARAMETER/CMN:STAPAR/
C
***	COMMON/CMN:ACS/
***	COMMON/CMN:ATTBTS/
***	COMMON/CMN:CB/
***	COMMON/CMN:CSTRCT/
***	COMMON/CMN:CTXS/
***	COMMON/CMN:DEFINE/
***	COMMON/CMN:DOUT/
***	COMMON/LSL$CMNFRT:FRTCOM/
***	COMMON/CMN:MAPS/
***	COMMON/CMN:OIIH/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:STATE/
***	COMMON/CMN:STRIKE/
C
	EXTERNAL	NASTY
C
C w/s
	INTEGER		DUMMY
C
C functions called
	LOGICAL		ACEDT,NEXTAC
	LOGICAL		IFS_CB_WRITE
	LOGICAL		STRTFT
	LOGICAL		COIDLE
	LOGICAL		NDSTCN
C
C is map read-only?
	IF (MAPRO(FOPAK(PAKMAP))) THEN
	   CALL MOAN(MSG_MAPREADONLY,FOPAK(PAKMAP)+1)
	   GOTO 999
	ENDIF
C
C Despatch according to secondary command
	GOTO (100,200), DSECN
C
C Secondary command number out of range
	CALL MSGCMD(NASTY,MSG_ERRSECIND)
	GOTO 999
C
C TAKE AC
100	IF (CONACD(ACD_NAC).EQ.0) THEN	! nothing to add
	   CALL INFORM(MSG_NOACEDT)	! no edits made
	   GOTO 990			! but success
	ENDIF
C
C get current ACs (if any)
	CALL GETAC(FOPAK,FOTC,FOAC)
C
C add new ones
	CALL FRSTAC(CONACD)		! first one (cannot fail)
C
C is it a TC or AC
10	IF (ACBUFL(AC_L_TYPE).LT.0) THEN
	   TCEDIT = .TRUE.		! TCs edited
	ELSE
	   ACEDIT = .TRUE.		! ACs edited
	ENDIF
	CALL ADDAC(FTRACD)		! add it
	IF (.NOT.NEXTAC(CONACD)) GOTO 10! next one
C
	IF (ACEDT()) THEN		! make the edits
	   ACMAP = -1			! invalidate ACs
	   GOTO 999
	ENDIF
C
	GOTO 990
C
C
C::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
C TAKE ATTRIBUTES
C
200	CONTINUE
C
C point attributes only valid on lines, symbols and texts
	IF (SINDEX.EQ.STATE_CIRCLE) THEN
	   CALL MSGCMD(MOAN,MSG_CMDNOTVALID)
	   GOTO 999
	ENDIF
C
C Must be on line and on a vertex
	IF (.NOT.(FONLIN.AND.FONVRT)) THEN
	   CALL MOAN(MSG_NOTONVRT)
	   CALL LEARN(MSG_USEVERT)
	   GOTO 999
	ENDIF
C
C any attributes to add?
	IF (CONDEFNO.EQ.0) THEN	! nothing to add
	   CALL INFORM(MSG_NOATTEDT)	! no edits made
	   GOTO 990			! but success
	ENDIF
C
C branch if dealing with texts or symbols
	IF (SINDEX.NE.STATE_TEXT.AND.SINDEX.NE.STATE_SYMBOL) THEN
C
C get the vertex to be altered into memory
	   CALL GETVRT(FOPAK,FOVRT,FOVRT)
C
C update with the attributes from the attribute set
	   CALL LSTARR(CONDEF,RINATT,RIATTC,RIATTV(1,1),.TRUE.)
C
C alter the vertex
	   IF (IFS_CB_WRITE(CBH,CBD,RIATTV(1,1),
     &	               RINATT,RIATTC,CBROW,CBROW)) THEN
	      CALL EIHWCB(CBH,CBD)
C
C update ACs if required
	      IF (FOAC.GT.0.AND.DEFINITION(F_CODECHANGE).GT.0)
     &	         CALL ACFSET(FOPAK,FOAC,DEFINITION(F_CODECHANGE))
C
C set edited flag if required
	      IF (EDTOPT) CALL SETEDT(FOPAK)
C
C update os map header?
	      IF (OS_MH_EDIT) CALL OS_MH_UPDATE(FOPAK,FOFS)
C
C no room, so construct new feature
	   ELSE
C
C Start off the new feature
	      CALL CPYPAK(PAKLEN,FOPAK,COIPAK)
	      COIPAK(PAKFLG) = 0
	      FLG_CODECHANGE = .TRUE.
	      IF (STRTFT(FOPAK,FOTC,FOFS,FOAC,FOTH)) GOTO 999
C
C Delete old segment (remove from screen)
	      CALL LDSG(FOPAK,.TRUE.)
C
C Output points, up to current one
	      IF (FOVRT.GT.1) CALL ADDVRT(FOPAK,1,FOVRT-1,.FALSE.)
C
C get existing attributes for our point (could have saved it before)
	      CALL GETVRT(FOPAK,FOVRT,FOVRT)
C
C update with the attributes from the attribute set
	      CALL LSTARR(CONDEF,RINATT,RIATTC,RIATTV(1,1),.TRUE.)
C
C write this point
120	      CALL ADCORD(RIXY(1,1),RINATT,RIATTC,RIATTV)
C
C write rest of points
	      IF (FOVRT.LT.FOLST)
     &	               CALL ADDVRT(FOPAK,FOVRT+1,FOLST,.FALSE.)
C
C Terminate feature
	      CALL ENDFT
C
C Remove the old found object completely
	      CALL DELFT(FOPAK,FOEF)
	   ENDIF
C
C deal with text and symbols (don't do in situ)
	ELSE
	   FLG_CODECHANGE = .TRUE.
	   IF (COIDLE(.TRUE.)) GOTO 999
C
C update with the attributes from the attribute set
	   IF (COIPAK(PAKGT).EQ.TEXTYP) THEN
	      CALL LSTARR(%VAL(COICTXD(CTXD_HOME)+CTX_O_ATTR),
     &	                      CONATT,COATTC,COATTV,.FALSE.)
	      CALL LSTARR(CONDEF,CONATT,COATTC,COATTV,.TRUE.)
	      CALL ARRLST(CONATT,COATTC,COATTV,
     &                     %VAL(COICTXD(CTXD_HOME)+CTX_O_ATTR),DUMMY)
	   ELSE
	      CALL LSTARR(CONDEF,COINATT,COIATTC,COIATTV(1,2),.TRUE.)
220	   ENDIF
C
C complete feature
	   IF (NDSTCN(.TRUE.)) GOTO 999
	ENDIF
	GOTO 990
C
C success exit
990	CALL ABANDN			! that's all
	GOTO 1000
C
999	CALL IGNCMD
C
1000	RETURN
	END

