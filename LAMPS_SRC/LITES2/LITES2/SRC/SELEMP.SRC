C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-08-26 14:57:38.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE SELEMP(SA,SLCT,SEL)
C
***	IDENT	26AU92
***	MODULE	SELEMP
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	 7-Nov-1984
C
C Description
C
C	LITES2 cartographic editor SELECT MAPS command.
C
C	This subroutine works with two bit maps. One is used to read
C	the selections, and the other is used as a mask of the existing
C	maps.  Bitmaps are used, even although they are so small, so 
C	that existing routines can be used to read and output the
C	required ranges.
C
C	Note that the user thinks that maps start at No 1, while we
C	know that they start at No 0.
C
	IMPLICIT NONE
C
***     PARAMETER/CMN:MOANMESS/		! moan constants
***     PARAMETER/CMN:EFNLUN/		! lun constants for MAPS
C
***     COMMON/CMN:DOUT/		! command decoding output
***     COMMON/CMN:MAPS/		! data about maps
***     COMMON/CMN:MASTER/
C
C Arguments
	LOGICAL*1	SA		! .TRUE. when all maps selected
					! .FALSE. otherwise
	LOGICAL*1	SLCT		! .TRUE. when in MAP select mode
	LOGICAL*1	SEL(0:MAXMAP-1) ! true if map selected
C
C Functions called
	LOGICAL		LIB$EXTV
C
C Local Variables
	INTEGER*4	MAPMAX		! maximum no of words in bitmap
	PARAMETER	(MAPMAX=MAXMAP/32+1)	! for maps
C
	INTEGER*4	SELBUF(MAPMAX)
	INTEGER*4	SELBUFA(MAPMAX)
	INTEGER*4	I		! counter
	INTEGER*4	IER		! for checking subroutine return
	LOGICAL		SOMSEL		! to check if selections affect
					! existing maps
C
C Clear SELBUF and SELBUFA
	DO 10, I=1,MAPMAX		! don't use VIOCLR as bitmaps
	   SELBUF(I)=0			! are so short
	   SELBUFA(I)=0
10	CONTINUE
C
C Set up SELBUFA with existing maps
	DO 20, I=0,MAPTOP		! maps go from 0->MAPTOP
	   IF (MAP_EXIST(I)) CALL LIB$INSV(1,I+1,1,SELBUFA)
20	CONTINUE
C
C Read selections from string passed in end of command line (in DOUT)
	CALL RDSEL(MAXMAP,DSTR(1:DSTRL),.FALSE.,MAPMAX,SELBUF,IER)
	IF (IER.LT.0) GOTO 1000		! illegal input
C
C Don't select maps that don't exist, and prepare a list of these
	SOMSEL=.FALSE.
	DO 30, I=1,MAPMAX
	   IF ((SELBUF(I).AND.SELBUFA(I)).NE.0) SOMSEL = .TRUE.
	   SELBUFA(I)=SELBUF(I).AND..NOT.SELBUFA(I)
30	CONTINUE
C
C Write out maps that were selected, but have not been read in yet
	CALL DISPLBTMP(MSG_MAPSNTSEL,-1,MSG_STRING,MAXMAP,SELBUFA)
C
C if no maps to select, give up
	IF (.NOT.SOMSEL) GOTO 1000
C
C make selections
	SA=.TRUE.		! keep check on all maps selected
	DO 40,  I=0,MAPTOP
	   IF (MAP_EXIST(I).AND..NOT.(SLCT.AND.SEL(I))) THEN
	      IF (LIB$EXTV(I+1,1,SELBUF)) THEN
	         SEL(I)=.TRUE.
	      ELSE
	         SEL(I)=.FALSE.
	         SA=.FALSE.
	      ENDIF
	   ENDIF
40	CONTINUE
C
C selections have been changed, and now in map select mode
	CHASEL = .TRUE.
	SLCT=.TRUE.
C
1000	RETURN
	END
