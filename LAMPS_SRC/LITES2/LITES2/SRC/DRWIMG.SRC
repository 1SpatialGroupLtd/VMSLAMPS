C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-05-08 11:26:16.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE DRWIMG(TYPE)
C
***	IDENT	08MY96
***	MODULE	DRWIMG
C
C	Copyright Laser-Scan Ltd., Cambridge, England.
C
C	Created					VLG	2-Nov-1989
C
C	LITES2 cartographic editor DRAW image command.
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:ACS/
***     PARAMETER/LSL$CMNDTI:DTILIBMSG/
***     PARAMETER/LSL$CMNDTI:DTIPAR/
***	PARAMETER/CMN:EFNLUN/
***     PARAMETER/CMN:MOANMESS/		! moan constants
***     PARAMETER/CMN:STAPAR/
C
***	COMMON/CMN:DOUT/		! command decoder output
***     COMMON/LSL$CMNDTI:DTIHDR/
***     COMMON/LSL$CMNDTI:DTIPROJ/
***	COMMON/LSL$CMNLSL:FILENAME/	! for maximum length of filename
***	COMMON/LSL$CMNFRT:FRTACD/
***	COMMON/CMN:FILES/		! filename details
***	COMMON/CMN:IMAGE/
***	COMMON/CMN:LABELS/
***	COMMON/CMN:LSRLIB/
***	COMMON/CMN:MAPS/		! multiple map details
***	COMMON/CMN:MASTER/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:OVERLAY/
***	COMMON/CMN:PLOT/
***	COMMON/CMN:RFCTRL/
***     COMMON/CMN:SETUP/
C
C Argument
	BYTE TYPE			! type of image
C
C Functions
	EXTERNAL NASTY,MOAN
	INTEGER	PARFILN
	INTEGER DTI_OPEN
	INTEGER	AREA$USER_OPEN_GENERAL
	INTEGER	LSROPN
C
C Local Variables
	INTEGER	IM
	REAL		SAV_DISP_LIMITS(4)
	LOGICAL		SAV_HAD_LIMITS
	LOGICAL		HAD_SETANNO
	INTEGER*4	OK		! file parse return code
	INTEGER		LUN
	LOGICAL*4	IERR		! system error code
	INTEGER		WKID
C
C not called SETANNO yet
	HAD_SETANNO = .FALSE.
C
C Can only draw into displays greater than 3
	IF (ANNODISP.LE.2) THEN
	   CALL MOAN(MSG_FILENOTLITESWIN)
	   CALL LEARN(MSG_USEVIEWCMD,'ANNOTATION DISPLAY')
	   GOTO 998
	ENDIF
C
C has display been created ?
	IF (.NOT.DISPLAY_EXISTS(ANNODISP)) THEN
	   CALL MOAN(MSG_NOCURDISP)
	   CALL LEARN(MSG_USEDISPCRE)
	   GOTO 998
	ENDIF
C
C has ANNOTATION OVERLAY been specified ?
	IF (ANNOVER.EQ.0) THEN
     	   CALL MOAN(MSG_OVNOTEXISTS,ANNOVER,ANNODISP)
	   CALL LEARN(MSG_USEVIEWCMD,'ANNOTATION OVERLAY')
	   GOTO 998
	ELSEIF (OVERLAY_PLANES(ANNOVER,ANNODISP).EQ.0) THEN
	   CALL LEARN(MSG_USEVIEWCMD,'ANNOTATION OVERLAY')
	   CALL LEARN(MSG_USEDISPOVER)
	   GOTO 998
	ENDIF
C
C Find an image number
	DO 100 IM=1,8
	   IF (IMAGE_TYPE(IM).EQ.0) GOTO 120
100	CONTINUE
	CALL MOAN(MSG_TOOMANYIM)
	CALL LEARN(MSG_USEIMCLEAR)
	GOTO 998
C
C sorry about the indentation
120   IF (TYPE.EQ.TYPE_DTI) THEN
C
C Parse DTI filename
	OK = PARFILN(DSTR,DSTRL,DSTR(:DSTRL),DTITEM,.TRUE.)
	IF (.NOT.OK) THEN
	   CALL MOAN(MSG_ERRFILENAME,'DTI')
	   CALL LITES2_SIGNAL(OK)
	   GOTO 998
	ENDIF
C
C Find a suitable DTILIB LUN to use (2-9)
	DO 130 LUN=MIN_SECLUN,MAX_SECLUN
	   IF (.NOT.LUN_INUSE(LUN)) GOTO 140
130	CONTINUE
	CALL MOAN(MSG_TOOMANYIM)
	GOTO 998
C
C Open DTI file
140	OK = DTI_OPEN(LUN,DSTR(:DSTRL),DSTRL,.FALSE.,IERR)
	IF (.NOT.OK) THEN
	   CALL MOAN(MSG_ERROPIMG,'DTI',DSTR(:DSTRL))
	   CALL LITES2_SIGNAL(OK)
	   IF (OK.EQ.DTI__SYSERR) CALL LITES2_SIGNAL(IERR)
	   GOTO 998
	ENDIF
	LUN_INUSE(LUN) = .TRUE.			! LUN now in use
C
	IMAGE_TYPE(IM) = TYPE_DTI		! this image is a DTI
	IMAGE_LUN(IM) = LUN			! on this LUN
	IMAGE_CORNER(IM) = DTI_ORDER_CORNER(LUN)
	IMAGE_DIRECTION(IM) = DTI_ORDER_DIRECTION(LUN)
	IMAGE_BASE(IM) = 0			! base bit
	IMAGE_NUMBER(IM) = 8
	IMAGE_ORIGIN(1,IM) = 0.0D0
	IMAGE_ORIGIN(2,IM) = 0.0D0
	IMAGE_VIEWS(IM) = 1024			! reduce up to x1024
	IMAGE_PIXELSIZE(1,IM) = 1.0
	IMAGE_PIXELSIZE(2,IM) = 1.0
C
C corner + direction is even/odd!
	IF (MOD(IMAGE_CORNER(IM)+IMAGE_DIRECTION(IM),2).EQ.0) THEN
	   IMAGE_COLUMNS(IM) = X_EXTENT(LUN)
	   IMAGE_ROWS(IM) = Y_EXTENT(LUN)
	ELSE
	   IMAGE_COLUMNS(IM) = Y_EXTENT(LUN)
	   IMAGE_ROWS(IM) = X_EXTENT(LUN)
	ENDIF
C
      ELSEIF (TYPE.EQ.TYPE_LSI) THEN
C
C Parse LSI filename
	OK = PARFILN(DSTR,DSTRL,DSTR(:DSTRL),LSITEM,.TRUE.) 
	IF (.NOT.OK) THEN
	   CALL MOAN(MSG_ERRFILENAME,'LSI')
	   CALL LITES2_SIGNAL(OK)
	   GOTO 998
	ENDIF
C
C Check that DTILIB LUNs 2 and 3 are free for the LSI file
	IF (LUN_INUSE(2).OR.LUN_INUSE(3)) THEN
	   CALL MOAN(MSG_TOOMANYLSI)
	   GOTO 998
	ENDIF
C
C Open LSI file
	OK = AREA$USER_OPEN_GENERAL(DSTR(:DSTRL),
     &		IMAGE_COLUMNS(IM),IMAGE_ROWS(IM),
     &		IMAGE_VIEWS(IM),IMAGE_LEVELS(IM),
     &		IMAGE_PIXELSIZE(1,IM),
     &		.TRUE., .FALSE. )	! readonly, not global
	IF (.NOT.OK) THEN
	   CALL MOAN(MSG_ERROPIMG,'LSI',DSTR(:DSTRL))
	   CALL LITES2_SIGNAL(OK)
	   GOTO 998
	ENDIF
C
	LUN_INUSE(2) = .TRUE.			! LSI LUNs now in use
	LUN_INUSE(3) = .TRUE.
	IMAGE_VIEWS(IM) = 2**(IMAGE_VIEWS(IM)-1)
	IMAGE_TYPE(IM) = TYPE_LSI		! this image is an LSI
	IMAGE_LUN(IM) = 2			! not used for LSI
	IMAGE_BASE(IM) = 0			! base bit
	IMAGE_NUMBER(IM) = 8			! number of bits
C
      ELSEIF (TYPE.EQ.TYPE_LSR) THEN
C
C Parse DTI filename
	OK = PARFILN(IMAGNAM(IM),DSTRL,DSTR(:DSTRL),LSRTEM,.FALSE.) 
	IF (.NOT.OK) THEN
	   CALL MOAN(MSG_ERRFILENAME,'LSR')
	   CALL LITES2_SIGNAL(OK)
	   GOTO 998
	ENDIF
C
C Find the VIOSEC LUN which LSRLIB will use for file
	DO 150 LUN=MIN_SECLUN,MAX_SECLUN
	   IF (.NOT.LUN_INUSE(LUN)) GOTO 160
150	CONTINUE
	CALL MOAN(MSG_TOOMANYIM)
	GOTO 998
C
C Load LSR library (if not done already)
160	IF (.NOT.LSR_SETUP) CALL LSRLOAD
	IF (.NOT.LSR_SETUP) GOTO 998
C
	OK = LSROPN(IM,LUN)
	IF (.NOT.OK) GOTO 998
      ENDIF
C
C Calculate zoom factor to fit screen
	IMAGE_ZOOM = 1
	IMAGE_VIEW = 1			! start with non-reduced view
C
C If we are plotting, then we assume the the pixel size of the
C plotter is adjustable, so we don't need all this stuff
	IF (PLOT_ON) GOTO 15
C
10	IMAGE_ZOOM = MIN(
     &		DISPLAY_RASX(ANNODISP)/(IMAGE_COLUMNS(IM)/IMAGE_VIEW),
     &		DISPLAY_RASY(ANNODISP)/(IMAGE_ROWS(IM)/IMAGE_VIEW) )
	IF (IMAGE_ZOOM.EQ.0) THEN
	   IF (IMAGE_VIEW.LT.IMAGE_VIEWS(IM)) THEN
	      IF (TYPE.EQ.TYPE_LSI) THEN
	         IMAGE_VIEW = IMAGE_VIEW*2
	      ELSE
	         IMAGE_VIEW = IMAGE_VIEW+1
	      ENDIF
	      GOTO 10
	   ENDIF
	   IMAGE_ZOOM = 1
	ENDIF
C
C Restrict zoom factor for tiled files - otherwise tends to draw so much
C stuff lying off the screen that takes ages
	IF (TYPE.NE.TYPE_DTI.AND.IMAGE_ZOOM.GT.16) IMAGE_ZOOM = 16
C
C if plotting, then attempt not to draw too many pixels by selecting
C a reduced view as required
15	IF (PLOT_ON) THEN
	   IF (MAX(IMAGE_COLUMNS(IM),IMAGE_ROWS(IM))/IMAGE_VIEW.GE.
     &						PLOT_PIXELS) THEN
C
C won't fit, so try for a reduced view
	      IF (IMAGE_VIEW.LT.IMAGE_VIEWS(IM)) THEN
	         IF (TYPE.EQ.TYPE_LSI) THEN
	            IMAGE_VIEW = IMAGE_VIEW*2
	         ELSE
	            IMAGE_VIEW = IMAGE_VIEW+1
	         ENDIF
	         GOTO 15			! try again
	      ENDIF
	   ENDIF
	ENDIF
C
	PIXELSIZE(1) = IMAGE_ZOOM
	PIXELSIZE(2) = IMAGE_ZOOM
C
	IF (DIAOPT) CALL WRITEF(
     & 'Image view %N, zoomed by %N',IMAGE_VIEW,IMAGE_ZOOM)
C
C Can only display the bottom left corner of the image
	IMAGE_SWPIX(1,IM) = 1
	IMAGE_SWPIX(2,IM) = 1
	IMAGE_NEPIX(1,IM) = IMAGE_COLUMNS(IM)/IMAGE_VIEW
	IMAGE_NEPIX(2,IM) = IMAGE_ROWS(IM)/IMAGE_VIEW
	IF (.NOT.PLOT_ON) THEN
	   IMAGE_NEPIX(1,IM) = MIN(IMAGE_NEPIX(1,IM),
     &				DISPLAY_RASX(ANNODISP)/IMAGE_ZOOM+1)
	   IMAGE_NEPIX(2,IM) = MIN(IMAGE_NEPIX(2,IM),
     &				DISPLAY_RASY(ANNODISP)/IMAGE_ZOOM+1)
	ENDIF
C
C now set up annotation
	SAV_HAD_LIMITS = DISPLAY_HADLIM(ANNODISP)
	CALL CPYPAK(4,DISPLAY_LIMITS(1,ANNODISP),SAV_DISP_LIMITS)
C
	DISPLAY_HADLIM(ANNODISP) = .TRUE.
	DISPLAY_LIMITS(1,ANNODISP) = 0.5
	DISPLAY_LIMITS(3,ANNODISP) = 0.5
	IF (PLOT_ON) THEN
	   DISPLAY_LIMITS(2,ANNODISP) = IMAGE_NEPIX(1,IM)+0.5
	   DISPLAY_LIMITS(4,ANNODISP) = IMAGE_NEPIX(2,IM)+0.5
	ELSE
	   DISPLAY_LIMITS(2,ANNODISP) = DISPLAY_RASX(ANNODISP)+0.5
	   DISPLAY_LIMITS(4,ANNODISP) = DISPLAY_RASY(ANNODISP)+0.5
	ENDIF
C
	CALL SETANNO(.TRUE.)
	HAD_SETANNO = .TRUE.
C
C set origin to cooperate with DISP_IMG
	IMAGE_ORIGIN(1,IM) = LITES2ORG(1) +
     &			(0.5-0.5/IMAGE_ZOOM)*PIXELSIZE(1) + 1
	IMAGE_ORIGIN(2,IM) = LITES2ORG(2) +
     &			(0.5-0.5/IMAGE_ZOOM)*PIXELSIZE(2) + 1
	IF (PLOT_ON) THEN
	   WKID = PLOT_WKID
C
C set the pixel size if plotting
	   CALL LSG_PIXEL_SIZE(WKID,FLOAT(IMAGE_VIEW),FLOAT(IMAGE_VIEW))
	ELSE
	   WKID = ANNODISP
	ENDIF
	CALL DISP_IMG(IM,ANNOVER,WKID,ANNODISP,.FALSE.)
CCCC
CCCC Draw the DTI file
CCC	IF (TYPE.EQ.TYPE_DTI) THEN
CCC	   CALL DRWDTIBDY(IM)
CCC	ELSEIF (TYPE.EQ.TYPE_LSI) THEN
CCC	   CALL DRWLSIBDY(IM)
CCC	ELSEIF (TYPE.EQ.TYPE_LSR) THEN
CCC	   CALL DRWLSRBDY(IM)
CCC	ENDIF
C
C close the file
	CALL IMGCLS(IM)
	GOTO 999
C
998	CALL IGNCMD
999	CONTINUE
C
C return everything to initial state
	IF (HAD_SETANNO) THEN
	   CALL SETANNO(.FALSE.)
	   DISPLAY_HADLIM(ANNODISP) = SAV_HAD_LIMITS
	   CALL CPYPAK(4,SAV_DISP_LIMITS,DISPLAY_LIMITS(1,ANNODISP))
	ENDIF
C
	RETURN
	END
