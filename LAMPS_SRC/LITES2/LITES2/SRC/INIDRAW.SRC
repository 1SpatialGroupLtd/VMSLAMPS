C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-05-10 18:19:56.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL	FUNCTION INIDRAW
C
***	MODULE	INIDRAW
***	IDENT	10MY96
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England
C Author Ron Russell					28-Jan-1992
C
C To initialise space for drawing buffers
C Returns .FALSE. if initialised, .TRUE. if there was an error
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:ACS/
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:PACK/
C
***	COMMON/CMN:STDBFC/
***	COMMON/CMN:STRIKE/		! for sizes of LITES2 buffers
C
C functions called
C
	LOGICAL		GET_MEM
	INTEGER		TRNALL		! LSLLIB, translate logical name
	LOGICAL		RDLONG
	LOGICAL		RDCHS
C
C local variable
	INTEGER		LENGTH
	BYTE		CH
C
	INIDRAW = .TRUE.			! assume failure
C
C get the maximum number of variables to be allowed
C (use IHTXT as a temporary string)
	STDBFM = DEFAULT_STDBFM
	IF (TRNALL(STDBFM_LOG_NAME,IHTXT)) THEN
	   LENGTH = LEN(IHTXT)
	   CALL SETAUX(%REF(IHTXT),LENGTH)
	   IF (RDLONG(STDBFM)) STDBFM = DEFAULT_STDBFM
	   IF (.NOT.RDCHS(CH)) STDBFM = DEFAULT_STDBFM
	ENDIF
C
C don't allow a silly length of arrays
	STDBFM = MAX(0,STDBFM)
	LENGTH = MAX(FOFULL,RIFULL,IHFULL)
	STDBFM = MAX(LENGTH,STDBFM)
C
C get the space for the arrays - make them contiguous
C
C 3 arrays of real*4, each STDBFM long
C
	LENGTH = 3 * 4 * STDBFM
	IF (GET_MEM(STDBFC_ZONE,STDBFX_ADDR,LENGTH)) GOTO 999	! failed
C
C now divide this into 3
	STDBFY_ADDR = STDBFX_ADDR + 4*STDBFM
	STDBFZ_ADDR = STDBFY_ADDR + 4*STDBFM
C
C set up equivalences
	DTIB_ADDR = STDBFX_ADDR
	DTIW_ADDR = STDBFX_ADDR
	DTIL_ADDR = STDBFX_ADDR
C
	DTI_BMAX = 4 * STDBFM	! this fits within STDBFX
	DTI_WMAX = DTI_BMAX/2	! with no remainder
	DTI_LMAX = DTI_BMAX/4	! with no remainder
C
	INIDRAW = .FALSE.				! success
C
999	RETURN
	END
