C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-05-10 14:02:20.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION INISEC(DOMEM)
C
***	MODULE	INISEC
***	IDENT	10MY96
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England
C Author Clarke Brunt
C
C Written February 1984
C
C To initialise sectoring, according to the range of the IFF files,
C and image files
C returns TRUE for failure
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:EFNLUN/
***	PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:REGPAR/
***	PARAMETER/CMN:SECTOR/
C
***	COMMON/CMN:DRAWIN/
***	COMMON/CMN:IMAGE/
***	COMMON/CMN:MAPS/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:REGCMN/
***	COMMON/CMN:SECMAP/
C
C argument
	LOGICAL	DOMEM		! get memory, or not
C
C functions
	LOGICAL	GET_MEM
	LOGICAL	GEOG_TRANS_RANGE
C
C w/s
	REAL*8	DX,DY
	INTEGER	I
C
	INISEC = .TRUE.			! assume failure
C
C if input files are all in different systems, then transform the
C ranges to the LITES2 coordinate space
	IF (DO_FLY_TRANS) THEN
	   DO 10, I = 0,MAPTOP
	      IF (.NOT.MAP_RANGE_OK(I)) THEN
	         IF (GEOG_TRANS_RANGE(I)) THEN
	            MAP_RANGE_OK(I) = .TRUE.		! range calculated
	         ELSE
	            GOTO 9999
	         ENDIF
	      ENDIF
10	   CONTINUE
	ENDIF
C
C extend limits for any maps (nb - work in ABSOLUTE coordinates)
	DO 20 I=0,MAPTOP
	   IF (.NOT.MAP_EXIST(I)) GOTO 20
	   IF (DO_FLY_TRANS) THEN
C
C ranges are already in LITES2 coordinate space
	      ABS_LIMITS(1) =
     &	          MIN(ABS_LIMITS(1),RANGE(1,I)+LITES2ORG(1))
	      ABS_LIMITS(2) =
     &	          MAX(ABS_LIMITS(2),RANGE(2,I)+LITES2ORG(1))
	      ABS_LIMITS(3) =
     &	          MIN(ABS_LIMITS(3),RANGE(3,I)+LITES2ORG(2))
	      ABS_LIMITS(4) =
     &	          MAX(ABS_LIMITS(4),RANGE(4,I)+LITES2ORG(2))
	   ELSE
	      ABS_LIMITS(1) =
     &	          MIN(ABS_LIMITS(1),RANGE(1,I)+MAPORG(1,I)+LITES2ORG(1))
	      ABS_LIMITS(2) =
     &	          MAX(ABS_LIMITS(2),RANGE(2,I)+MAPORG(1,I)+LITES2ORG(1))
	      ABS_LIMITS(3) =
     &	          MIN(ABS_LIMITS(3),RANGE(3,I)+MAPORG(2,I)+LITES2ORG(2))
	      ABS_LIMITS(4) =
     &	          MAX(ABS_LIMITS(4),RANGE(4,I)+MAPORG(2,I)+LITES2ORG(2))
	   ENDIF
20	CONTINUE
C
C and extend for any images
	DO 15 I=1,MAXIMAGE
	   IF (IMAGE_TYPE(I).NE.0) THEN
	      ABS_LIMITS(1) = MIN(ABS_LIMITS(1),
     &		IMAGE_ORIGIN(1,I)-0.5*IMAGE_PIXELSIZE(1,I))
	      ABS_LIMITS(2) = MAX(ABS_LIMITS(2),IMAGE_ORIGIN(1,I)+
     &		(IMAGE_COLUMNS(I)-0.5)*IMAGE_PIXELSIZE(1,I))
	      ABS_LIMITS(3) = MIN(ABS_LIMITS(3),
     &		IMAGE_ORIGIN(2,I)-0.5*IMAGE_PIXELSIZE(2,I))
	      ABS_LIMITS(4) = MAX(ABS_LIMITS(4),IMAGE_ORIGIN(2,I)+
     &		(IMAGE_ROWS(I)-0.5)*IMAGE_PIXELSIZE(2,I))
	   ENDIF
15	CONTINUE
C
	DX = ABS_LIMITS(2)-ABS_LIMITS(1)
	DY = ABS_LIMITS(4)-ABS_LIMITS(3)
C
C SW corner of allowed area
	XOFF = ABS_LIMITS(1)-LITES2ORG(1)-0.05*DX
	YOFF = ABS_LIMITS(3)-LITES2ORG(2)-0.05*DY
C
C sector sizes
	XSECTW = 1.1*DX/YRANGE
	YSECTW = 1.1*DY/XRANGE
C
C set limits of allowed area
	LIMITS(1) = XOFF
	LIMITS(2) = XOFF+YRANGE*XSECTW
	LIMITS(3) = YOFF
	LIMITS(4) = YOFF+XRANGE*YSECTW
C
C initialise variables for $TABLEXY
CCCC	TABLEXY(1) = XOFF
CCCC	TABLEXY(2) = YOFF
C
C get value for the width of a line
	LINWDTH=MAX(ABS(LIMITS(2)-LIMITS(1)),ABS(LIMITS(4)-LIMITS(3)))
	LINWDTH = LINWDTH*LINWDTH_FCTR
C
C set window to the same area
	DO 30 I=1,4
	   WINDOW(I) = LIMITS(I)
30	CONTINUE
C
C flag any region bitmaps as invalid
	DO 40 I=1,MAX_REG
	   REGDEF(I) = REGDEF(I).AND..NOT.REGDEF_SEC
40	CONTINUE
C
	IF (.NOT.DOMEM) GOTO 1000
C
C set size of region bitmaps (in bytes)
	REGMAP_SIZE = TOPSEC/8 + 1
C
C get space for arrays and bitmaps for sectors
	INVLVD_SIZE = REGMAP_SIZE		! size of bitmap
	SEC_ARRAY_SIZE = TOPSEC*4		! array size (in bytes)
C
C flag no memory yet
	FSTBLK = 0
	LSTBLK = 0
	LSTPTR = 0
	DELPTR = 0
	SECTRS = 0
	EDGSEC = 0
	VSECS = 0
	INVLVD = 0
C
C get the memory
	IF (GET_MEM(SEC_ZONE,FSTBLK,SEC_ARRAY_SIZE)) GOTO 999
	IF (GET_MEM(SEC_ZONE,LSTBLK,SEC_ARRAY_SIZE)) GOTO 999
	IF (GET_MEM(SEC_ZONE,LSTPTR,SEC_ARRAY_SIZE)) GOTO 999
	IF (GET_MEM(SEC_ZONE,DELPTR,SEC_ARRAY_SIZE)) GOTO 999
	IF (GET_MEM(SEC_ZONE,SECTRS,SEC_ARRAY_SIZE)) GOTO 999
	IF (GET_MEM(SEC_ZONE,EDGSEC,SEC_ARRAY_SIZE)) GOTO 999
	IF (GET_MEM(SEC_ZONE,VSECS,SEC_ARRAY_SIZE)) GOTO 999
	IF (GET_MEM(SEC_ZONE,INVLVD,INVLVD_SIZE)) GOTO 999
C
C clear sectors
	CALL VIOCLR(%VAL(FSTBLK),SEC_ARRAY_SIZE)
	CALL VIOCLR(%VAL(LSTBLK),SEC_ARRAY_SIZE)
	CALL VIOCLR(%VAL(LSTPTR),SEC_ARRAY_SIZE)
	CALL VIOCLR(%VAL(DELPTR),SEC_ARRAY_SIZE)
	GOTO 1000
C
C error - free any memory got so far
999	IF (FSTBLK.NE.0) CALL FREE_MEM(SEC_ZONE,FSTBLK,SEC_ARRAY_SIZE)
	IF (LSTBLK.NE.0) CALL FREE_MEM(SEC_ZONE,LSTBLK,SEC_ARRAY_SIZE)
	IF (LSTPTR.NE.0) CALL FREE_MEM(SEC_ZONE,LSTPTR,SEC_ARRAY_SIZE)
	IF (DELPTR.NE.0) CALL FREE_MEM(SEC_ZONE,DELPTR,SEC_ARRAY_SIZE)
	IF (SECTRS.NE.0) CALL FREE_MEM(SEC_ZONE,SECTRS,SEC_ARRAY_SIZE)
	IF (EDGSEC.NE.0) CALL FREE_MEM(SEC_ZONE,EDGSEC,SEC_ARRAY_SIZE)
	IF (VSECS.NE.0) CALL FREE_MEM(SEC_ZONE,VSECS,SEC_ARRAY_SIZE)
	IF (INVLVD.NE.0) CALL FREE_MEM(SEC_ZONE,INVLVD,INVLVD_SIZE)
	CALL LEARN(MSG_DECREASESECS)
	GOTO 9999
C
C success
1000	INISEC = .FALSE.
C
9999	RETURN
	END
