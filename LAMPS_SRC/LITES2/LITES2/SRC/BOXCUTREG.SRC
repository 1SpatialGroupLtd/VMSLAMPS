C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-06-27 16:23:52.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION BOXCUTREG(X,Y,AUX,REG,INSIDE,RESOLVED)
C
***	IDENT	27JN89
***	MODULE	BOXCUTREG
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	27-June-1989
C
C Description
C
C	Logical function that returns .TRUE. when a box defined by
C	a X and Y coordinate, and an auxiliary array, cuts
C	the region REG, and .FALSE. otherwise.
C
C	It is the responsibility of the calling program to ensure
C	that REG is valid, and that it has at least two points
C	(three	are more sensible)
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:AUXDEF/
C
***	COMMON/CMN:MASTER/
C
C Arguments
C (input)
C
	REAL		X,Y		! position of box
	REAL		AUX(AUXLEN)	! auxiliary array
	INTEGER*4	REG		! number of region
	LOGICAL		INSIDE		! .TRUE. if inside region
	LOGICAL		RESOLVED	! do we know if we are
					! inside or out?
C
C functions
	LOGICAL		CUTREG,PINREG
C
C Local Variables
C
	REAL		LINE(2,2)	! line to test
	REAL*8		DLX,DLY
	REAL		X1,Y1,X2,Y2	! temporary coordinates
	REAL		DX,DY
	REAL		SSIN,SCOS
	REAL		LENGTH,HEIGHT
	INTEGER		I,J
	REAL		TMPXY(2)	! temporary
C
C
	SCOS = AUX(COSI)
	SSIN = AUX(SINI)
	LENGTH = AUX(MAXXI) - AUX(MINXI)
	HEIGHT = AUX(MAXYI) - AUX(MINYI)
C
C get lower left point
	X1 = X + AUX(MINXI)*SCOS - AUX(MINYI)*SSIN
	Y1 = Y + AUX(MINXI)*SSIN + AUX(MINYI)*SCOS
C
C calculate lower right point, and set DX, DY to be the 'up vector'
	X2 = X1 + LENGTH*SCOS
	Y2 = Y1 + LENGTH*SSIN
	DX = -HEIGHT*SSIN
	DY = HEIGHT*SCOS
C
	DO 800 I=1,4
	   GOTO (100,200,300,400), I
C
C bottom edge of box
100	   LINE(1,1) = X1
	   LINE(2,1) = Y1
	   LINE(1,2) = X2
	   LINE(2,2) = Y2
C
C see if this point is inside or outside REG
C
	   DLX=(DBLE(X2) - DBLE(X1))
	   DLY=(DBLE(Y2) - DBLE(Y1))
	   CALL PRPLIN(DLX,DLY,LINWDTH)
C
C check whether this is a big enough increment (to avoid problems of 
C precision)
C
110	   TMPXY(1) = DBLE(X1) + DLX*2.0
	   TMPXY(2) = DBLE(Y1) + DLY*2.0
	   IF ((DLX.NE.0.0.OR.DLY.NE.0.0).AND.
     &	       (ABS(TMPXY(1)-X1).LT.LINWDTH).AND.
     &	       (ABS(TMPXY(2)-Y1).LT.LINWDTH)) THEN
	      DLX = DLX*2.0
	      DLY = DLY*2.0
	      GOTO 110
	   ENDIF
C
	   J=0
	   TMPXY(1)=X1
	   TMPXY(2)=Y1
C
C on boundary
C
120	   IF (PINREG(TMPXY,REG,INSIDE)) THEN
	      J=J+1				! so move a bit
	      TMPXY(1)=DBLE(X1) + J*DLX
	      TMPXY(2)=DBLE(Y1) + J*DLY
	      IF (J.LT.100) GOTO 120		! and try again
	   ELSE
	      RESOLVED = .TRUE.
	   ENDIF
C
	   GOTO 500
C
C right-hand side
200	   LINE(1,1) = X2+DX
	   LINE(2,1) = Y2+DY
	   GOTO 500
C
C top edge
300	   LINE(1,2) = X1+DX
	   LINE(2,2) = Y1+DY
	   GOTO 500
C
C left-hand side
400	   LINE(1,1) = X1
	   LINE(2,1) = Y1
C
C check if this line cuts the region
C
500	   IF (CUTREG(LINE,REG,INSIDE,RESOLVED)) GOTO 900
800	CONTINUE
C
C no cut exit
	BOXCUTREG = .FALSE.
	GOTO 1000
C
C cut exit
900	CONTINUE
	BOXCUTREG = .TRUE.
	GOTO 1000
C
1000	CONTINUE
	RETURN
	END
