C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-03-16 15:29:22.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION ADDPPT(XY,REG)
C
***	IDENT	16MR90
***	MODULE	ADDPPT
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C to add a point to the end of a region
C returns .FALSE. for success and .TRUE. for failure
C
C Author R.W. Russell			11-Aug-1985
C
	IMPLICIT NONE
C
C arguments (input)
C
	REAL		XY(2)		! coordinates of point	
	INTEGER*4	REG		! number of region
C
***	PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:REGPAR/
C
***	COMMON/CMN:REGCMN/
C
C functions called
	LOGICAL		GETPPT
C
C workspace
	INTEGER*4	TEMP		! temporary address
C
	ADDPPT=.TRUE.			! assume failure
C
C check for valid region number
C
	IF (REG.LE.0.OR.REG.GT.MAX_REG) THEN
	   CALL MOAN(MSG_INVALREGNO,REG,1,MAX_REG)
	   GOTO 900
	ENDIF
C
C if pointer to start of list and the end, are the same, region
C is empty
C
	IF (REGPTR(1,REG).EQ.REGPTR(2,REG)) THEN
C
C if region not initialised yet, initialise it (ie put empty PPT at
C start of list)
C
	   IF (REGPTR(1,REG).LE.0) THEN
	      IF (GETPPT(REGPTR(1,REG))) GOTO 900	! collapsed
C
C set end of list pointer here as well
C
	      REGPTR(2,REG)=REGPTR(1,REG)
	      CALL PUTLNG(0,%VAL(REGPTR(1,REG)+OFFPREV))
	   ENDIF
C
C set up limits for this region
C
	   REGLIM(1,REG)=XY(1)		! minx
	   REGLIM(2,REG)=XY(1)		! maxx
	   REGLIM(3,REG)=XY(2)		! miny
	   REGLIM(4,REG)=XY(2)		! maxy
C
C no current last point
	   REGPTR(3,REG) = 0
	ENDIF
C
C put coords in current last PPT
C
	CALL PUTLNG(XY(1),%VAL(REGPTR(2,REG)+OFFX))
	CALL PUTLNG(XY(2),%VAL(REGPTR(2,REG)+OFFY))
C
C set last point to here
	REGPTR(3,REG) = REGPTR(2,REG)
C
C get a new PPT and add it to end of region
C
	TEMP=REGPTR(2,REG)		! remember this PPT
	IF (GETPPT(REGPTR(2,REG))) GOTO 900	! collapsed
C
C this PPT does not point anywhere
	CALL PUTLNG(0,%VAL(REGPTR(2,REG)))
C
C but it points back to the point we are just going to fill in
	CALL PUTLNG(TEMP,%VAL(REGPTR(2,REG)+OFFPREV))
C
C put this address in the pointer of the former last PPT
	CALL PUTLNG(REGPTR(2,REG),%VAL(TEMP))
C
C update REGLIM
	IF (XY(1).LT.REGLIM(1,REG)) REGLIM(1,REG)=XY(1)
	IF (XY(1).GT.REGLIM(2,REG)) REGLIM(2,REG)=XY(1)
	IF (XY(2).LT.REGLIM(3,REG)) REGLIM(3,REG)=XY(2)
	IF (XY(2).GT.REGLIM(4,REG)) REGLIM(4,REG)=XY(2)
C
C finally, region is now defined, so set bottom bit of REGDEF
	IF (.NOT.REGDEF(REG)) REGDEF(REG)=REGDEF(REG).OR.REGDEF_DEF
C
	ADDPPT=.FALSE.			! success
C
900	RETURN
	END

