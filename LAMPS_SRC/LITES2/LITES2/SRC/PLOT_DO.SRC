        SUBROUTINE PLOT_DO
C
***     IDENT   17NO97
***     MODULE  PLOT_DO
C
C       Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C       Written                                 CCB	16-August-1990
C
C	LITES2 cartographic editor PLOT command.
C	This is called from device dependent PLOT routine for those
C	implementations which support hardcopy plotting.
C
        IMPLICIT NONE
C
	INCLUDE	'($FSCNDEF)'
	INCLUDE	'($LIBDEF)'
	INCLUDE	'($LNMDEF)'
	INCLUDE	'($SSDEF)'
C
***	PARAMETER/CMN:GKSPAR/
***     PARAMETER/CMN:MOANMESS/         ! moan constants
***	PARAMETER/CMN:STAPAR/
C
***	COMMON/CMN:DOUT/
***	COMMON/CMN:DRAWIN/
***	COMMON/CMN:GLOBAL/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:PLOT/
***	COMMON/CMN:STATE/
***	COMMON/LSL$CMNLSL:TXTC/
***	COMMON/CMN:WORKS/
C
	EXTERNAL NASTY,MOAN
C
C functions
	INTEGER		LSGA_LOAD_GKS
	INTEGER		TRNALL,SIGCHS
	INTEGER		LIB$FIND_FILE
	INTEGER		SYS$FILESCAN,SYS$CRELNM
	EXTERNAL	PLOT_ANNOTATION_CMD_TABLE
	EXTERNAL	PLOT_SEPARATOR_CMD_TABLE
C
C local variables
	INTEGER		OK
	INTEGER	GASF(13)	! aspect source flags
	INTEGER	ERRIND,NLT,LT,NLW,NPPLI	! unused args for GQPLF
	REAL	RLWMIN,RLWMAX		! unused args for GQPLF
	INTEGER	DCUNIT		! DC units for GQMDS
	CHARACTER*(1)	TRAN
	INTEGER		CONTEXT
	INTEGER*4	FSCNLST(3)
	INTEGER*2	FSCNLSTW(6)
	EQUIVALENCE	(FSCNLST,FSCNLSTW)
	INTEGER*4	LNMLST(4)
	INTEGER*2	LNMLSTW(8)
	EQUIVALENCE	(LNMLST,LNMLSTW)
C
C all aspect source flags individual
	DATA GASF/13*GINDIV/
C
C Dispatch according to secondary command
	GOTO (100,200,300,400,500,600,700,800,900,1000,1100,
     &		1200,1300,1400,1500,1600,1700,1800,1900,2000), DSECN
C
C Secondary command number out of range
	CALL MSGCMD(NASTY,MSG_ERRSECIND)
	GOTO 9999
C
C PLOT LOAD - load a plotter shareable image
100	IF (PLOT_OPEN) THEN
	   CALL MOAN(MSG_PLOTOPEN)
	   GOTO 9999
	ENDIF
C
	PLOT_LOADED = .FALSE.		! assume failure
	IF (PLOT_NAME_DESC(1).EQ.0) THEN
	   CALL INIDSC(PLOT_NAME_DESC)
	ELSE
	   CALL STR$FREE1_DX(PLOT_NAME_DESC)
	ENDIF
C
C check if it's a logical name
	OK = TRNALL(DSTR(:DSTRL),TRAN)
	IF (OK.OR.OK.EQ.SS$_RESULTOVF) THEN
C
C yes, so try to load as it is
	   OK = LSGA_LOAD_GKS(DSTR(:DSTRL))
	ELSE
C
C no, so try for a file
	   TXTPTR = 255
	   CONTEXT = 0
	   OK = LIB$FIND_FILE(DSTR(:DSTRL),TXTDSC,CONTEXT,'LSL$EXE:.EXE')
	   CALL LIB$FIND_FILE_END(CONTEXT)
	   IF (.NOT.OK) THEN
	      CALL MOAN(MSG_ERRLOADGKS,DSTR(:DSTRL))
	      CALL LITES2_SIGNAL(OK)
	      GOTO 9999
	   ENDIF
C
C find the name bit of the file
	   FSCNLSTW(2) = FSCN$_NAME
	   FSCNLST(3) = 0
	   OK = SYS$FILESCAN(TXTDSC,FSCNLST,)
	   IF (.NOT.OK) THEN
	      CALL LITES2_SIGNAL(OK)
	      GOTO 9999
	   ENDIF
C
C define name bit as logical name for whole thing,
C using the start of FSCNLST as a string descriptor
	   LNMLSTW(1) = SIGCHS(TXTDSC)
	   LNMLSTW(2) = LNM$_STRING
	   LNMLST(2) = %LOC(TXTBUF)
	   LNMLST(3) = 0
	   LNMLST(4) = 0
	   OK = SYS$CRELNM(,'LNM$PROCESS',FSCNLST,,LNMLST)
	   IF (.NOT.OK) THEN
	      CALL LITES2_SIGNAL(OK)
	      GOTO 9999
	   ENDIF
C
C and load using our defined logical name
	   OK = LSGA_LOAD_GKS(FSCNLST)
	ENDIF
C
C did it load OK - for most errors, the exception handler will already
C have blurted out the error message
	IF (.NOT.OK) THEN
	   IF (OK.EQ.LIB$_KEYNOTFOU) THEN
	      CALL MOAN(MSG_NOTGKS,DSTR(:DSTRL))
	   ELSE
	      CALL MOAN(MSG_ERRLOADGKS,DSTR(:DSTRL))
	   ENDIF
	   GOTO 9999
	ENDIF
C
C set the default GESC to do between priority drawing layers
	PLOT_SEP_ESC = PLOT_SEP_ESC_DEF
	CALL STR$COPY_DX(PLOT_NAME_DESC,DSTR(:DSTRL))
	PLOT_LOADED = .TRUE.
	GOTO 10000
C
C PLOT TYPE - set workstation type
200	PLOT_WTYPE = DINTS(1)
	GOTO 10000
C
C PLOT OPEN - open the plotter workstation, begin plot
300	IF (SINDEX.EQ.STATE_INITIAL) THEN
	   CALL MSGCMD(MOAN,MSG_CMDNOTVALID)
	   GOTO 9999
	ENDIF
	IF (.NOT.PLOT_LOADED) THEN
	   CALL MOAN(MSG_PLOTNOTLOADED)
	   GOTO 9999
	ENDIF
	IF (PLOT_OPEN) THEN
	   CALL MOAN(MSG_PLOTOPEN)
	   GOTO 9999
	ENDIF
	CALL LSGA_GOPKS(6)
	CALL LSGA_GOPWK(PLOT_WKID,PLOT_CONID,PLOT_WTYPE)
C
C turn clipping on
CCC	CALL GSCLIP(GCLIP)
C
C set a window to correspond to the limits of map
	CALL GSWN(1,LIMITS(1),LIMITS(2),LIMITS(3),LIMITS(4))
C
C set a viewport with the same aspect ratio
	CALL GSVP(1,0.0,NDCX*WFACX,0.0,NDCY*WFACY)
C
C select the normalisation transformation
	CALL GSELNT(1)
C 
C set the deferral state
	CALL GSDS(PLOT_WKID,GASTI,GSUPPD)
C
C set polyline representation 1, solid, normal thickness, colour 1
C only relevant for any BUNDLED attribtues
	CALL GSPLR(PLOT_WKID,1,1,1.0,1)
C
C inquire polyline facilities (to get nominal linewidth)
	CALL LSGA_GQPLF(
     &PLOT_WTYPE,1,ERRIND,NLT,LT,NLW,PLOT_LWIDTH,RLWMIN,RLWMAX,NPPLI)
	PLOT_LWIDTH = PLOT_LWIDTH*1000.		! convert to mm
C
C inquire maximum display surface
	CALL LSGA_GQMDS(
     &		PLOT_WTYPE,ERRIND,DCUNIT,PLOT_SCRSZX,PLOT_SCRSZY,
     &		PLOT_RASTSX,PLOT_RASTSY)
C
C set workstation window to be the entire map
	CALL GSWKWN(PLOT_WKID,0.0,NDCX*WFACX,0.0,NDCY*WFACY)
C
C and viewport to be whole area
	CALL GSWKVP(PLOT_WKID,0.0,PLOT_SCRSZX,0.0,PLOT_SCRSZY)
C
	IF (DCUNIT.NE.GMETRE) THEN
C
C fix up nominal linewidth
	   PLOT_LWIDTH = PLOT_LWIDTH*0.36/PLOT_SCRSZX
	   PLOT_SCRSZY = PLOT_SCRSZY*0.36/PLOT_SCRSZX
	   PLOT_SCRSZX = 0.36
	ENDIF
C
C NB If DCUNIT not metres, then setting PLOT SIZE will not work
	PLOT_SIZE(1) = PLOT_SCRSZX*1000.0
	PLOT_SIZE(2) = PLOT_SCRSZY*1000.0
C
	PLOT_PIXELS = MAX(PLOT_RASTSX,PLOT_RASTSY)
C
C set aspect source flags
	CALL GSASF(GASF)
	PLOT_OPEN = .TRUE.
	GOTO 10000
C
C PLOT CLOSE - end plot, close the plotter workstation
400	IF (.NOT.PLOT_OPEN) THEN
	   CALL MOAN(MSG_PLOTNOTOPEN)
	   GOTO 9999
	ENDIF
	CALL GCLWK(PLOT_WKID)
	CALL LSGA_GCLKS
	PLOT_ON = .FALSE.
	PLOT_OPEN = .FALSE.
	GOTO 10000
C
C PLOT ON - activate plotting
500	IF (.NOT.PLOT_OPEN) THEN
	   CALL MOAN(MSG_PLOTNOTOPEN)
	   GOTO 9999
	ENDIF
	PLOT_ON = .TRUE.
	NODISP = .FALSE.	! in case no other display
	GOTO 10000
C
C PLOT OFF - deactivate plotting
600	IF (.NOT.PLOT_OPEN) THEN
	   CALL MOAN(MSG_PLOTNOTOPEN)
	   GOTO 9999
	ENDIF
	PLOT_ON = .FALSE.
	IF (.NOT.(WKOP(1).OR.WKOP(2).OR.KRSINI)) NODISP = .TRUE.
	GOTO 10000
C
C PLOT SIZE r r
700	IF (DREALS(1).LE.0.0.OR.DREALS(2).LE.0.0) THEN
	   CALL MOAN(MSG_NEGARGS)
	   GOTO 9999
	ENDIF
	PLOT_SIZE(1) = DREALS(1)
	PLOT_SIZE(2) = DREALS(2)
	GOTO 10000
C
C PLOT ORIGIN r r
800	PLOT_ORG(1) = DREALS(1)
	PLOT_ORG(2) = DREALS(2)
	GOTO 10000
C
C PLOT POSITION i
900	IF (DINTS(1).LT.0.OR.DINTS(1).GT.8) THEN
	   CALL MOAN(MSG_ILLEGLLOC)
	   GOTO 9999
	ENDIF
	PLOT_POS = DINTS(1)
	GOTO 10000
C
C PLOT ADVANCE - clear, or advance paper etc.
1000	IF (.NOT.PLOT_OPEN) THEN
	   CALL MOAN(MSG_PLOTNOTOPEN)
	   GOTO 9999
	ENDIF
	CALL GCLRWK(PLOT_WKID,GALWAY)
	GOTO 10000
C
C PLOT LIMITS
1100	IF (DNREA.EQ.0) THEN
	   PLOT_HADLIM = .FALSE.
	   GOTO 10000
	ENDIF
	IF (DNREA.LT.4) THEN
	   CALL MOAN(MSG_CMDLIBEOL,'command',
     &			DPRI(:DPRIL)//' '//DSEC(:DSECL) )
	   GOTO 9999
	ENDIF
	IF (DREALS(2).LE.DREALS(1).OR.DREALS(4).LE.DREALS(3)) THEN
	   CALL MOAN(MSG_ARGRNG)
	   GOTO 9999
	ENDIF
	PLOT_LIMITS(1) = DREALS(1)
	PLOT_LIMITS(2) = DREALS(2)
	PLOT_LIMITS(3) = DREALS(3)
	PLOT_LIMITS(4) = DREALS(4)
	PLOT_HADLIM = .TRUE.
	GOTO 10000
C
C PLOT PIXELS
1200	IF (DINTS(1).LE.0) THEN
	   CALL MOAN(MSG_NEGARGS)
	   GOTO 9999
	ENDIF
	PLOT_PIXELS = DINTS(1)
	GOTO 10000
C
C PLOT RATIO
1300	IF (DREALS(1).LE.0) THEN
	   CALL MOAN(MSG_NEGARGS)
	   GOTO 9999
	ENDIF
	PLOT_RATIO = DREALS(1)
	PLOT_SCALE = 0.0
	GOTO 10000
C
C PLOT SCALE
1400	IF (DREALS(1).LE.0) THEN
	   CALL MOAN(MSG_NEGARGS)
	   GOTO 9999
	ENDIF
	PLOT_SCALE = DREALS(1)
	PLOT_RATIO = 0.0
	GOTO 10000
C
C PLOT AUTOSCALE
1500	PLOT_RATIO = 0.0
	PLOT_SCALE = 0.0
	GOTO 10000
C
C PLOT CLIP
1600	IF (DINTS(1).LT.0.OR.DINTS(1).GT.1) THEN
	   CALL MOAN(MSG_ARGRNG)
	   GOTO 9999
	ENDIF
	PLOT_CLIP = DINTS(1)
	GOTO 10000
C
C PLOT ANNOTATION
1700	CALL GET_COMMAND(DSTR(:DSTRL),PLOT_ANNOTATION_CMD_TABLE)
	IF (MOANED) GOTO 9999
	GOTO (1701,1702),DPRIN
C
C Tertiary command number out of range
	CALL MSGCMD(NASTY,MSG_ERRSECIND)
	GOTO 9999
C
C SCREEN
1701	PLOT_ANNOSCR = .TRUE.
	GOTO 10000
C
C PLOT
1702	PLOT_ANNOSCR = .FALSE.
	GOTO 10000
C
C PLOT ESCAPE - perform plotter dependent function
1800	IF (.NOT.PLOT_OPEN) THEN
	   CALL MOAN(MSG_PLOTNOTOPEN)
	   GOTO 9999
	ENDIF
	IF (DINTS(1).LE.0) THEN
	   CALL MOAN(MSG_NEGARGS)
	   GOTO 9999
	ENDIF
C
C N.B. beware GESC doing anything untoward in the primary GKS, as well as
C the plotter GKS - OK for GKSMOTIFLIB (the only one supported at present)
	IF (.NOT.DSTRIN) THEN
	   DSTRL = 1
	   DSTR(1:1) = ' '
	ENDIF
	CALL GESC(DINTS(1)+1000,DSTR(:DSTRL))
	GOTO 10000
C
C PLOT SEPARATOR
1900	CALL GET_COMMAND(DSTR(:DSTRL),PLOT_SEPARATOR_CMD_TABLE)
	IF (MOANED) GOTO 9999
	GOTO (1901),DPRIN
C
C Tertiary command number out of range
	CALL MSGCMD(NASTY,MSG_ERRSECIND)
	GOTO 9999
C
C ESCAPE
1901	IF (.NOT.PLOT_LOADED) THEN
	   CALL MOAN(MSG_PLOTNOTLOADED)
	   GOTO 9999
	ENDIF
	IF (DINTS(1).LT.0) THEN
	   CALL MOAN(MSG_NEGARGS)
	   GOTO 9999
	ENDIF
	PLOT_SEP_ESC = DINTS(1)
	GOTO 10000
C
C PLOT HWTEXT [n]
2000	IF (DNINT.EQ.0) THEN
	   PLOT_HWT = .TRUE.
	ELSEIF (DINTS(1).EQ.1) THEN
	   PLOT_HWT = .TRUE.
	ELSEIF (DINTS(1).EQ.0) THEN
	   PLOT_HWT = .FALSE.
	ELSE
	   CALL MOAN(MSG_ARGRNG)
	   GOTO 9999
	ENDIF
	GOTO 10000
C
9990	CALL MSGCMD(MOAN,MSG_CMDNOTIMPLE)
C
9999	CALL IGNCMD
C
10000	RETURN
        END
