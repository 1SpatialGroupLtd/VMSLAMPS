	LOGICAL FUNCTION GROPE(CXY)
C
***	MODULE	GROPE
***	IDENT	10MY96
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author  Clarke Brunt
C
C Written 13.iii.84
C Based on the LITES1 GROPE by R. Fairbairns
C
C To implement the various 'find' operations
C Returns FALSE if anything found, otherwise TRUE
C If SPIRAL is true, then either starts a spiral search (INSPIR false)
C or resumes one (INSPIR true)
C If it does spiral search, then INSPIR is set TRUE if the search
C can be continued, else FALSE.
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:END/
***	PARAMETER/CMN:PACK/
***	PARAMETER/CMN:SECTOR/
***	PARAMETER/CMN:STAPAR/
C
***	COMMON/CMN:CSTRCT/
***	COMMON/CMN:CNSTRN/
***	COMMON/CMN:EDGE/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:OIIH/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:SECMAP/
***	COMMON/CMN:SPIRE/
***	COMMON/CMN:STATE/
***	COMMON/CMN:STRIKE/
C
C arguments
	REAL	CXY(2)			! the current position
C
C functions called
	LOGICAL	RELVNT
	INTEGER	GETARR
	REAL	SECDIST
	LOGICAL	SECNEA
C
C argument for SCNSEC
	EXTERNAL FIND
C
C w/s
	INTEGER PACK(PAKLEN)
	INTEGER	I,J,L,M1,M2		! temporaries
	LOGICAL*1 SEENS			! seen any sectors in spiral
C
C If its intersect, then lose struck items, otherwise lose found object
C AND struck items
	IF (ROLING.AND.FNDMDE.EQ.1) THEN
	   HITITC = 0
	ELSE
	   CALL DROP
	ENDIF
C
C If there is a partly FLUSHed construction, then avoid it
C CONFST .FALSE. once STRTFT called and points ADCORDed
C COILST not 0 once packs added, and points flushed to IFF
	IF (SINDEX.EQ.STATE_CONSTRUCT.AND.
     &		.NOT.CONFST.AND.COILST.NE.0) THEN
	   PNFCNS = .TRUE.
	   IMPMAP = COIPAK(PAKMAP)
	   IMPPNF = COIPAK(PAKPNF)
	ELSE
C
C Ensure that we don't find the object in hand, unless bridging
	   PNFCNS = IH.AND..NOT.
     &	    (SINDEX.EQ.STATE_CONSTRUCT.AND.
     &	     (NDMODE.EQ.END_BRIDGE.OR.NDMODE.EQ.END_BRIDGE_CLOSE))
	   IMPMAP = IHPAK(PAKMAP)	! map to avoid
	   IMPPNF = IHPAK(PAKPNF)	! the pointer to avoid
	ENDIF
C
C Ensure that we don't find a partially flushed item being MENDed
C Same logic as for the construction above, but PNFCNS is already
C being used for the object in hand
	IF ((SINDEX.EQ.STATE_EDIT.AND.(NDMODE.EQ.END_MEND_MANUAL.OR.
     &				       NDMODE.EQ.END_MEND_AUTO)).AND.
     &		.NOT.CONFST.AND.COILST.NE.0) THEN
	   AUXCNS = .TRUE.
	   AUXMAP = COIPAK(PAKMAP)
	   AUXPNF = COIPAK(PAKPNF)
	ELSE
C
C Ensure that we don't re-find the found object when constrained
C on it, and looking for an intersection with something else
	   AUXCNS = FO			! NF pointer constraint
	   AUXMAP = FOPAK(PAKMAP)	! map to avoid
	   AUXPNF = FOPAK(PAKPNF)	! the pointer to avoid
	ENDIF
C
C Are we to find ends of lines?
C Yes if joining or tieing (JOINNG), or ENABLE ENDS (ENDOPT) and cursor
C is not constrained (ROLING).
	FINDND = JOINNG .OR. (ENDOPT.AND..NOT.ROLING)
C
C if spiral scan, set large find criteria
C Actually, since doing SEARCH NEAREST, don't need large radius, since
C FIND ignores it if SPIRAL
	IF (SPIRAL) THEN
CCC	   CRITR2 = 1E38
	   CRITR2 = EFCRIT**2
C
C are we resuming a spiral scan?
	   IF (INSPIR) GOTO 220
	ENDIF
C
C it's a fresh start of GROPE, so...
	CONTXY(1) = CXY(1)		! get the context for FIND
	CONTXY(2) = CXY(2)
C
C are to commence a spiral scan
	IF (SPIRAL) GOTO 200 		! yes start spiral scan
C
C Ordinary FIND
C Set up radius squared
	CRITR2 = EFCRIT**2
C
C Search all sectors implicated (within EFCRIT of the cursor)
	DO 20 J=MAX(0,IFIX((CXY(2)-YOFF-EFCRIT)/YSECTW)),
     &		MIN(XRANGE-1,IFIX((CXY(2)-YOFF+EFCRIT)/YSECTW))
	   DO 10 I=MAX(0,IFIX((CXY(1)-XOFF-EFCRIT)/XSECTW)),
     &	  	      MIN(YRANGE-1,IFIX((CXY(1)-XOFF+EFCRIT)/XSECTW))
	      FNDSEC = 1+J*YRANGE+I	! the sector we're FINDing in
	      CALL SCNSEC(FNDSEC,FIND,0)	! ignore all flags
10	   CONTINUE
20	CONTINUE
	GOTO 500
C
C Spiral FIND
C
C If this is SEARCH LAST, then just FIND particular pack
200	IF (SEAPAK.NE.0) GOTO 300
C
	INSPIR = .TRUE.			! now in a spiral search
C
C clear 'found' flag in all packs if searching
	IF (SRCHNG) THEN
	   IF (EDGING) THEN	! just in edgematch sectors
	      DO 202 I=1,ESECNO
	         CALL CLRSEC(FINFLG,GETARR(%VAL(EDGSEC),I))
202	      CONTINUE
	   ELSE			! else in all sectors
	      DO 204 I=1,TOPSEC
	         CALL CLRSEC(FINFLG,I)
204	      CONTINUE
	   ENDIF
	ENDIF
C
C initialise search for edgmatching
	IF (EDGING.OR.SEANEA) THEN
	   EDGIND=1
	   FNDSEC=GETARR(%VAL(EDGSEC),EDGIND)
	   GOTO 230		! start searching this sector
	ENDIF
C
C otherwise it is a spiral search
C get starting position
	SPIX = IFIX((CONTXY(1)-XOFF)/XSECTW)
	SPIY = IFIX((CONTXY(2)-YOFF)/YSECTW)
C
C initialise spiral search
	SHFTOT = 0
	JUMP = 3
	SEENS = .FALSE.		! not seen any sectors yet
C
C if edgmatching, get next sector from list
215	IF (EDGING.OR.SEANEA) THEN
	   EDGIND=EDGIND+1
	   IF (EDGIND.GT.ESECNO) THEN
	      IF (EDGING) GOTO 500	! finished for EDGEMATCH
	      IF (SECNEA(.FALSE.)) GOTO 500 ! no more sectors for SEARCH NEAR
	   ENDIF
	   FNDSEC=GETARR(%VAL(EDGSEC),EDGIND)
	   GOTO 230				! and search it
C
C start new arm of spiral
	ELSE
	   JUMP = JUMP+1
	   SHFCNT = 0
	ENDIF
C
C search sector
220	CONTINUE
C
C get valid sector for spiral search
	IF (.NOT.(EDGING.OR.SEANEA)) THEN
	   IF (SPIX.LT.0.OR.SPIX.GE.YRANGE.OR.
     &		SPIY.LT.0.OR.SPIY.GE.XRANGE) GOTO 250
	   FNDSEC = SPIX+SPIY*YRANGE+1		! current sector number
C
C this sector COULD be 'seen'
	   SEENS=.TRUE.
	ELSE
	   FNDSEC=GETARR(%VAL(EDGSEC),EDGIND)
	ENDIF
C
C scan sector, testing "found already flag" is searching
230	IF (SRCHNG) THEN
	   CALL SCNSEC(FNDSEC,FIND,FINFLG)
	ELSE
	   CALL SCNSEC(FNDSEC,FIND,0)
	ENDIF
C
C found something?
	IF (HITITC.GT.0.AND.SEANEA) THEN
	   I = EDGIND
242	   I = I+1
	   IF (I.GT.ESECNO) THEN
	      IF (SECNEA(.FALSE.)) GOTO 245	! no more sectors
	   ENDIF
	   FNDSEC=GETARR(%VAL(EDGSEC),I)
	   IF (SECDIST(FNDSEC).GT.HITRAD(BEST)) GOTO 245
	   CALL SCNSEC(FNDSEC,FIND,FINFLG)
	   GOTO 242
	ENDIF
245	IF (HITITC.GT.0) GOTO 500	! found something
	IF (EDGING.OR.SEANEA) GOTO 215	! easy to get next sector when
					! edgmatching
C
250	GOTO (251,252,253,254), JUMP
C
C horiz. shift right
251	SPIX = SPIX+1
2510	SHFCNT=SHFCNT+1
	IF (SHFCNT.EQ.SHFTOT) GOTO 215
	GOTO 220
C
C vert. shift up
252	SPIY = SPIY+1
	GOTO 2510
C
C horiz. shift left
253	SPIX = SPIX-1
	GOTO 2510
C
C vert. shift down
254	SPIY = SPIY-1
	SHFCNT = SHFCNT+1
	IF (SHFCNT.LE.SHFTOT) GOTO 220
C
C finished a complete spiral - seen any sectors this pass?
C If not then end the scan
	IF (.NOT.SEENS) THEN
	   INSPIR = .FALSE.	! spiral may not be continued
	   GOTO 500
	ENDIF
	SEENS = .FALSE.
C
C increment  total-count parameters
	SHFTOT = SHFTOT+2	! two more sectors on each arm
	JUMP = 1		! ready to shift right
	SHFCNT = 1		! start at 1, since bottom left sector
C				! is done last
	GOTO 220		! start new spiral
C
C here for SEARCH LAST (SPIRAL and SEAPAK.NE.0)
300	CALL GETPAK(PACK,%VAL(SEAPAK))	! get the pack for LAST feature
	IF (RELVNT(PACK,0)) THEN	! is it relevant?
C
C Get sector for FIND, and perform FIND itself on single pack
	   CALL PUTLNG( %VAL(IAND(SEAPAK,NOT(BLKMSK))+SECPTR), FNDSEC )
	   CALL FIND(PACK)
	ENDIF
C
C were there any hits?
500	GROPE = HITITC.LE.0
	IF (GROPE) GOTO 590
C
C index the hits
	IF (HITITC.GT.OBJDEP) HITITC = OBJDEP
	DO 540 I = 1,HITITC
	   QUORD(I) = I
540	CONTINUE
	IF (HITITC.GT.1) THEN
C
C there were more than 1 - order them
	   DO 575 I = 1,HITITC-1
C
C sinking sort shambles
	      DO 570 L = I+1,HITITC
	         M1 = QUORD(I)
	         M2 = QUORD(L)
	         IF (HITRAD(M2).LT.HITRAD(M1)) THEN
	            QUORD(I) = M2		! swap
	            QUORD(L) = M1
	         ENDIF
570	      CONTINUE
575	   CONTINUE
	ENDIF
C
C Set HITITE ready for NXTITM to step onto the first one
	HITITE = 0
590	PNFCNS = .FALSE.	! re-permit the object in hand
	AUXCNS = .FALSE.	! and the found object
C
	RETURN
	END
