        SUBROUTINE DOIMAG
C
***     IDENT   10MY96
***     MODULE  DOIMAG
C
C       Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C       Written                                 CCB	25-Jan-1988
C
C	LITES2 cartographic editor IMAGE command.
C
        IMPLICIT NONE
C
***     PARAMETER/LSL$CMNDTI:DTILIBMSG/
***     PARAMETER/LSL$CMNDTI:DTIPAR/
***     PARAMETER/CMN:LICPAR/
***     PARAMETER/CMN:MOANMESS/
***     PARAMETER/CMN:REGPAR/
***     PARAMETER/CMN:STAPAR/
C
***     COMMON/CMN:DOUT/
***     COMMON/LSL$CMNDTI:DTIHDR/
***     COMMON/LSL$CMNDTI:DTIPROJ/
***	COMMON/CMN:GLOBAL/
***	COMMON/CMN:IMAGE/
***	COMMON/CMN:LSRLIB/
***	COMMON/CMN:MASTER/
***     COMMON/CMN:SETUP/
***     COMMON/CMN:STATE/
C
C Functions
	EXTERNAL IMAGE_CORNER_CMD_TABLE
	EXTERNAL IMAGE_DIRECTION_CMD_TABLE
	EXTERNAL IMAGE_SUBSAMPLE_CMD_TABLE
	EXTERNAL IMAGE_BRUSH_CMD_TABLE
	EXTERNAL IMAGE_SPECKLE_CMD_TABLE
	EXTERNAL IMAGE_CONNECT_CMD_TABLE
	EXTERNAL IMAGE_RECOVER_CMD_TABLE
	EXTERNAL NASTY,MOAN
	INTEGER	PARFILN
	INTEGER DTI_OPEN
	INTEGER	AREA$USER_OPEN_GENERAL
	LOGICAL	RDDBLE,RDCHS
	LOGICAL	LICENSED
	LOGICAL	IMAGEBAND
	INTEGER	SIGCHS
	INTEGER	LSROPN
	LOGICAL	DEFREG
	LOGICAL	IMAGE_FILL_REGION
	LOGICAL	IMAGE_RECOVER
	LOGICAL	IMAGE_BEGIN_MOVE
	LOGICAL	IMAGE_END_MOVE
	LOGICAL	IMAGE_BEGIN_PAINT
	LOGICAL	IMAGE_BURN_IN
	LOGICAL	IMAGE_SPECKLE_FILL
C
C Local Variables
	INTEGER*4	OK		! file parse return code
	INTEGER		LUN
	LOGICAL*4	IERR		! system error code
	INTEGER		I
	INTEGER*4	NAMLEN		! length of filename
	REAL*8		ORGXY(2)
	BYTE		CH
	INTEGER		IC
	EQUIVALENCE	(IMAGE_CURRENT,IC)	! abbreviation
	INTEGER		FILL_COLOUR,SPECKLE_COLOUR
	LOGICAL		COPY
C
	LOGICAL		VERNUM		! allow version numbers
	PARAMETER	(VERNUM=.TRUE.)
C
C check license
	IF (.NOT.LICENSED(LOCK_IMAGE)) GOTO 9999
C
C Dispatch according to secondary command
C (no secondary command implies call from DOEND via NDIMAG, so
C  we want to do END IMAGE COPY/MOVE)
	IF (DSECN.EQ.0) GOTO 2750
	GOTO (100,200,300,400,500,600,700,800,900,1000,1100,
     &		1200,1300,1400,1500,1600,1700,1800,1900,2000,
     &		2100,2200,2300,2400,2500,2600,2700,2800,2900,
     &		3000,3100,3200,3300,3400), DSECN
C
C Secondary command number out of range
	CALL MSGCMD(NASTY,MSG_ERRSECIND)
	GOTO 9990
C
C IMAGE NUMBER number
C
100	IF (DINTS(1).LT.0.OR.DINTS(1).GT.MAXIMAGE) THEN
	   CALL MOAN(MSG_IMAGRNG,0,MAXIMAGE)
	   GOTO 9990
	ENDIF
C
	IC = DINTS(1)
	GOTO 9999
C
C IMAGE DTI filename
C 
200	CALL DTI_INIT	! do this in initialisation eventually
C
	IF (IC.EQ.0) GOTO 9000
C
	IF (IMAGE_TYPE(IC).NE.0) THEN
	   CALL MOAN(MSG_IMINUSE,IC)
	   CALL LEARN(MSG_USEIMCLEAR)
	   GOTO 9990
	ENDIF
C
C editing DTI is not allowed
	IF (IMAGE_EDIT(IC)) THEN
	   CALL MOAN(MSG_CANTEDIT,'DTI')
	   CALL LEARN(MSG_USEIMREAD)
	   GOTO 9990
	ENDIF
C
C Find a suitable DTILIB LUN to use (2-9), inverse order so as to leave
C 2 and 3 (i.e. VIOSEC 1 and 2) for LSI's for as long as possible
	DO 210 LUN=MAX_SECLUN,MIN_SECLUN,-1
	   IF (.NOT.LUN_INUSE(LUN)) GOTO 220
210	CONTINUE
	CALL MOAN(MSG_TOOMANYIM)
	GOTO 9990
C	
C Parse DTI filename
220	OK = PARFILN(IMAGNAM(IC),NAMLEN,DSTR(1:DSTRL),DTITEM,VERNUM)
	IF (.NOT.OK) THEN
	   CALL MOAN(MSG_ERRFILENAME,'DTI')
	   CALL LITES2_SIGNAL(OK)
	   GOTO 9990
	ENDIF
C
C Open DTI file
	OK = DTI_OPEN(LUN,IMAGNAM(IC),NAMLEN,.FALSE.,IERR)
	IF (.NOT.OK) THEN
	   CALL MOAN(MSG_ERROPIMG,'DTI',IMAGNAM(IC)(:NAMLEN))
	   CALL LITES2_SIGNAL(OK)
	   IF (OK.EQ.DTI__SYSERR) CALL LITES2_SIGNAL(IERR)
	   GOTO 9990
	ENDIF
C
	CALL INFORM(MSG_IMGOPENED,'DTI',IMAGNAM(IC)(:NAMLEN))
	LUN_INUSE(LUN) = .TRUE.			! LUN now in use
	IMAGE_TYPE(IC) = TYPE_DTI		! this image is a DTI
	IMAGE_LUN(IC) = LUN			! on this LUN
	IMAGE_CORNER(IC) = DTI_ORDER_CORNER(LUN)
	IMAGE_DIRECTION(IC) = DTI_ORDER_DIRECTION(LUN)
	IMAGE_BASE(IC) = 0			! base bit
	IMAGE_NUMBER(IC) = 8			! number of bits
	IMAGE_OORIGIN(1,IC) = 0.0D0
	IMAGE_OORIGIN(2,IC) = 0.0D0
	IMAGE_OPIXELSIZE(1,IC) = 1.0
	IMAGE_OPIXELSIZE(2,IC) = 1.0
	IMAGE_VIEWS(IC) = 1024			! reduce up to x1024
	IMAGE_LEVELS(IC) = 8			! not used
	IMAGE_CLASSIFY(IC) = .FALSE.		! not classified
	IMAGE_SUBPRI(IC) = .FALSE.		! fast subsampling
	IMAGE_FORE(IC) = 1			! default foreground
	IMAGE_BACK(IC) = 0			! default background
	IF (HAD_PROJ_RECORD(LUN)) THEN
	   IMAGE_OORIGIN(1,IC) = DTIPROJ_ORIGIN(1,LUN)
	   IMAGE_OORIGIN(2,IC) = DTIPROJ_ORIGIN(2,LUN)
	   IF (DTIPROJ_SAMPLE(1,LUN).GT.0.0.AND.
     &	       DTIPROJ_SAMPLE(2,LUN).GT.0.0) THEN
	      IMAGE_OPIXELSIZE(1,IC) = DTIPROJ_SAMPLE(1,LUN)
	      IMAGE_OPIXELSIZE(2,IC) = DTIPROJ_SAMPLE(2,LUN)
	   ENDIF
	ELSE
	   IMAGE_OORIGIN(1,IC) = X_OFFSET(LUN)
	   IMAGE_OORIGIN(2,IC) = Y_OFFSET(LUN)
	   IF (X_GRID(LUN).GT.0.0.AND.
     &	       Y_GRID(LUN).GT.0.0) THEN
	      IMAGE_OPIXELSIZE(1,IC) = X_GRID(LUN)
	      IMAGE_OPIXELSIZE(2,IC) = Y_GRID(LUN)
	   ENDIF
	ENDIF
	IMAGE_UORIGIN(1,IC) = IMAGE_OORIGIN(1,IC)
	IMAGE_UORIGIN(2,IC) = IMAGE_OORIGIN(2,IC)
	IMAGE_ORIGIN(1,IC) = IMAGE_OORIGIN(1,IC)
	IMAGE_ORIGIN(2,IC) = IMAGE_OORIGIN(2,IC)
	IMAGE_PIXELSIZE(1,IC) = IMAGE_OPIXELSIZE(1,IC)
	IMAGE_PIXELSIZE(2,IC) = IMAGE_OPIXELSIZE(2,IC)
	IMAGE_AREA(IC) = .FALSE.	! DTI is point type
C
C get min and max values
	IF (DATA_TYPE(LUN) .EQ. DATA_REAL) THEN
	   IMAGE_RANGE(1,IC) = MIN_RVALUE(LUN)
	   IMAGE_RANGE(2,IC) = MAX_RVALUE(LUN)
	ELSEIF (DATA_TYPE(LUN) .EQ. DATA_LONG) THEN
	   IMAGE_RANGE(1,IC) = MIN_LVALUE(LUN)
	   IMAGE_RANGE(2,IC) = MAX_LVALUE(LUN)
	ELSE
	   IMAGE_RANGE(1,IC) = MIN_WVALUE(LUN)
	   IMAGE_RANGE(2,IC) = MAX_WVALUE(LUN)
	ENDIF
C
C corner + direction is even/odd!
230	LUN = IMAGE_LUN(IC)	! set LUN for other branches here
	IF (MOD(IMAGE_CORNER(IC)+IMAGE_DIRECTION(IC),2).EQ.0) THEN
	   IMAGE_COLUMNS(IC) = X_EXTENT(LUN)
	   IMAGE_ROWS(IC) = Y_EXTENT(LUN)
	ELSE
	   IMAGE_COLUMNS(IC) = Y_EXTENT(LUN)
	   IMAGE_ROWS(IC) = X_EXTENT(LUN)
	ENDIF
	GOTO 9999
C
C IMAGE LSI filename
C 
300	IF (IC.EQ.0) GOTO 9000
C
	IF (IMAGE_TYPE(IC).NE.0) THEN
	   CALL MOAN(MSG_IMINUSE,IC)
	   CALL LEARN(MSG_USEIMCLEAR)
	   GOTO 9990
	ENDIF
C
C editing LSI is not allowed
	IF (IMAGE_EDIT(IC)) THEN
	   CALL MOAN(MSG_CANTEDIT,'LSI')
	   CALL LEARN(MSG_USEIMREAD)
	   GOTO 9990
	ENDIF
C
C Check that DTILIB LUNs 2 and 3 are free for the LSI file
	IF (LUN_INUSE(2).OR.LUN_INUSE(3)) THEN
	   CALL MOAN(MSG_TOOMANYLSI)
	   GOTO 9990
	ENDIF
C	
C Parse LSI filename
	OK = PARFILN(IMAGNAM(IC),NAMLEN,DSTR(1:DSTRL),LSITEM,VERNUM) 
	IF (.NOT.OK) THEN
	   CALL MOAN(MSG_ERRFILENAME,'LSI')
	   CALL LITES2_SIGNAL(OK)
	   GOTO 9990
	ENDIF
C
C Open LSI file
	OK = AREA$USER_OPEN_GENERAL(IMAGNAM(IC)(:NAMLEN),
     &		IMAGE_COLUMNS(IC),IMAGE_ROWS(IC),
     &		IMAGE_VIEWS(IC),IMAGE_LEVELS(IC),
     &		IMAGE_OPIXELSIZE(1,IC),
     &		.TRUE., .FALSE. )	! readonly, not global
	IF (.NOT.OK) THEN
	   CALL MOAN(MSG_ERROPIMG,'LSI',IMAGNAM(IC)(:NAMLEN))
	   CALL LITES2_SIGNAL(OK)
	   GOTO 9990
	ENDIF
C
	CALL INFORM(MSG_IMGOPENED,'LSI',IMAGNAM(IC)(:NAMLEN))
	LUN_INUSE(2) = .TRUE.			! LSI LUNs now in use
	LUN_INUSE(3) = .TRUE.
	IMAGE_VIEWS(IC) = 2**(IMAGE_VIEWS(IC)-1)
	IMAGE_TYPE(IC) = TYPE_LSI		! this image is an LSI
	IMAGE_LUN(IC) = 2			! not used for LSI
	IMAGE_CORNER(IC) = DTI_ORDER_NW		! not used
	IMAGE_DIRECTION(IC) = DTI_ORDER_CLOCKWISE ! not used
	IMAGE_BASE(IC) = 0			! base bit
	IMAGE_NUMBER(IC) = 8			! number of bits
	IMAGE_OORIGIN(1,IC) = 0.0D0		! take file origin as 0
	IMAGE_OORIGIN(2,IC) = 0.0D0
	IMAGE_UORIGIN(1,IC) = 0.0D0		! ditto the user origin
	IMAGE_UORIGIN(2,IC) = 0.0D0
C
C origin shifted by half pixel because LSI are area type pixels
	IMAGE_ORIGIN(1,IC) = IMAGE_OPIXELSIZE(1,IC)*0.5D0
	IMAGE_ORIGIN(2,IC) = IMAGE_OORIGIN(1,IC)
	IMAGE_AREA(IC) = .TRUE.
	IMAGE_OPIXELSIZE(2,IC) = IMAGE_OPIXELSIZE(1,IC)
	IMAGE_PIXELSIZE(1,IC) = IMAGE_OPIXELSIZE(1,IC)
	IMAGE_PIXELSIZE(2,IC) = IMAGE_OPIXELSIZE(2,IC)
	IMAGE_CLASSIFY(IC) = .FALSE.		! not classified
	IMAGE_SUBPRI(IC) = .FALSE.		! fast subsampling
	IMAGE_FORE(IC) = 1			! default foreground
	IMAGE_BACK(IC) = 0			! default background
	GOTO 9999
C
C IMAGE BITS base number
C 
400	IF (IC.EQ.0) GOTO 9000
	IF (IMAGE_TYPE(IC).EQ.0) GOTO 9010
	IF (DINTS(1).LT.0.OR.DINTS(1).GT.31.OR.
     &	    DINTS(2).LE.0.OR.DINTS(2).GT.8) THEN
	   CALL MOAN(MSG_ARGRNG)
	   GOTO 9990
	ENDIF
	IMAGE_BASE(IC) = DINTS(1)
	IMAGE_NUMBER(IC) = DINTS(2)
	IMAGE_CLASSIFY(IC) = .FALSE.		! not classified
	GOTO 9999
C
C IMAGE ORIGIN (IFF units)
C
500	IF (IC.EQ.0) GOTO 9000
	CALL SETAUX(%REF(DSTR),DSTRL)
	IF (RDDBLE(ORGXY(1))) GOTO 590
	IF (RDDBLE(ORGXY(2))) GOTO 590
	IF (.NOT.RDCHS(CH)) THEN
	   CALL MOAN(MSG_ILLEGALTERM,CH)
	   GOTO 9990
	ENDIF
	IF (IMAGE_TYPE(IC).EQ.0) GOTO 9010
	IMAGE_UORIGIN(1,IC) = ORGXY(1)
	IMAGE_UORIGIN(2,IC) = ORGXY(2)
	IMAGE_ORIGIN(1,IC) = IMAGE_UORIGIN(1,IC)
	IMAGE_ORIGIN(2,IC) = IMAGE_UORIGIN(2,IC)
	IF (IMAGE_AREA(IC)) THEN
	   IMAGE_ORIGIN(1,IC) = IMAGE_ORIGIN(1,IC) +
     &					IMAGE_PIXELSIZE(1,IC)*0.5D0
	   IMAGE_ORIGIN(2,IC) = IMAGE_ORIGIN(2,IC) +
     &					IMAGE_PIXELSIZE(2,IC)*0.5D0
	ENDIF
	GOTO 9999
C
590	CALL ERRNUMB
	GOTO 9990
C
C IMAGE PIXELSIZE (IFF units)
C 
600	IF (IC.EQ.0) GOTO 9000
	IF (DNREA.EQ.0) GOTO 9030
	IF (IMAGE_TYPE(IC).EQ.0) GOTO 9010
	IF (DREALS(1).LE.0.OR.(DNREA.EQ.2.AND.DREALS(2).LE.0)) THEN
	   CALL MOAN(MSG_ARGRNG)
	   GOTO 9990
	ENDIF
	IMAGE_PIXELSIZE(1,IC) = DREALS(1)
	IMAGE_PIXELSIZE(2,IC) = DREALS(1)
	IF (DNREA.EQ.2) IMAGE_PIXELSIZE(2,IC) = DREALS(2)
	IF (IMAGE_AREA(IC)) THEN
	   IMAGE_ORIGIN(1,IC) = IMAGE_UORIGIN(1,IC) +
     &					IMAGE_PIXELSIZE(1,IC)*0.5D0
	   IMAGE_ORIGIN(2,IC) = IMAGE_UORIGIN(2,IC) +
     &					IMAGE_PIXELSIZE(2,IC)*0.5D0
	ENDIF
	GOTO 9999
C
C IMAGE CORNER 0-3 (=SW,NW,NE,SE)
C 
700	CALL GET_COMMAND(DSTR(:DSTRL),IMAGE_CORNER_CMD_TABLE)
	IF (MOANED) GOTO 9990
	IF (IC.EQ.0) GOTO 9000
	IF (IMAGE_TYPE(IC).EQ.0) GOTO 9010
	IF (IMAGE_TYPE(IC).NE.TYPE_DTI) THEN
	   CALL MOAN(MSG_DTIONLY)
	   GOTO 9990
	ENDIF
	IMAGE_CORNER(IC) = DPRIN-1
	GOTO 230
C
C IMAGE DIRECTION 0-1 (=clockwise,anticlockwise)
C 
800	CALL GET_COMMAND(DSTR(:DSTRL),IMAGE_DIRECTION_CMD_TABLE)
	IF (MOANED) GOTO 9990
	IF (IC.EQ.0) GOTO 9000
	IF (IMAGE_TYPE(IC).EQ.0) GOTO 9010
	IF (IMAGE_TYPE(IC).NE.TYPE_DTI) THEN
	   CALL MOAN(MSG_DTIONLY)
	   GOTO 9990
	ENDIF
	IMAGE_DIRECTION(IC) = DPRIN-1
	GOTO 230
C
C IMAGE CLOSE
C 
900	IF (IC.EQ.0) GOTO 9000
	IF (IMAGE_TYPE(IC).EQ.0) GOTO 9010
	CALL IMGCLS(IC)
	GOTO 9999
C
C IMAGE SELECT [range]
C 
1000	DO 1001 I=1,MAXIMAGE			! set all to false
	   IMSEL(I) = .FALSE.
1001	CONTINUE
	IF (DSTRIN) CALL SELEIM(.TRUE.,IMSEL)	! if arg, set some true
	GOTO 9999
C
C IMAGE SETUP
C 
1100	IF (SINDEX.NE.STATE_READY) THEN
	   CALL MSGCMD(MOAN,MSG_CMDNOTVALID)
	   GOTO 9990
	ENDIF
	CALL SETSTA(STATE_SETUP)		! set state
	SETING = .TRUE.				! and remember fact
	SETMAP = -1				! mark not started yet
	CALL DIGCRN				! prompt for first point
	GOTO 9999
C
C IMAGE STEP
C 
1200	IF (IC.EQ.0) GOTO 9000
	IF (IMAGE_TYPE(IC).EQ.0) GOTO 9010
	IF (IMAGE_TYPE(IC).NE.TYPE_DTI) THEN
	   CALL MOAN(MSG_DTIONLY)
	   GOTO 9990
	ENDIF
	IF (DATA_TYPE(IMAGE_LUN(IC)).EQ.DATA_BIT) THEN
	   CALL MOAN(MSG_STRING,
     &		'Classification not allowed for bit type data')
	   GOTO 9990
	ENDIF
	IF (DREALS(1).LE.0.0) THEN
	   CALL MOAN(MSG_ARGRNG)
	   GOTO 9990
	ENDIF
	IF (.NOT.IMAGE_CLASSIFY(IC)) THEN
	   IMAGE_CLASSIFY(IC) = .TRUE.
	   IMAGE_FIRST(IC) = 0
	   IMAGE_NBAND(IC) = 0
	ENDIF
	IMAGE_STEP(IC) = DREALS(1)
	GOTO 9999
C
C IMAGE RANGE
C 
1300	IF (IC.EQ.0) GOTO 9000
	IF (IMAGE_TYPE(IC).EQ.0) GOTO 9010
	IF (DREALS(1).GT.DREALS(2)) THEN
	   CALL MOAN(MSG_ARGRNG)
	   GOTO 9990
	ENDIF
	IMAGE_RANGE(1,IC) = DREALS(1)
	IMAGE_RANGE(2,IC) = DREALS(2)
	GOTO 9999
C
C IMAGE SEA i equivalent to IMAGE BAND i 0.0
C 
1400	DREALS(1) = 0.0
	DNREA = 1
	GOTO 1500
C
C IMAGE BAND
C 
1500	IF (IC.EQ.0) GOTO 9000
	IF (DNINT.EQ.0.OR.DNREA.EQ.0) GOTO 9030
	IF (IMAGE_TYPE(IC).EQ.0) GOTO 9010
	IF (DNREA.EQ.1) DREALS(2) = DREALS(1)
	IF (DINTS(1).LT.0.OR.DREALS(1).GT.DREALS(2)) THEN
	   CALL MOAN(MSG_ARGRNG)
	   GOTO 9990
	ENDIF
	IF (.NOT.IMAGE_CLASSIFY(IC)) GOTO 9020
C
C add new band to list
	IF (DSTRL.GT.0) THEN
	   I = SIGCHS(DSTR(1:DSTRL))		! remove trailing spaces
	ELSE
	   I = 0
	ENDIF
	IF (IMAGEBAND(IC,DREALS,DINTS(1),I,DSTR)) GOTO 9990
	GOTO 9999
C
C IMAGE FIRSTCOLOUR
C 
1600	IF (IC.EQ.0) GOTO 9000
	IF (IMAGE_TYPE(IC).EQ.0) GOTO 9010
	IF (.NOT.IMAGE_CLASSIFY(IC)) GOTO 9020
	IMAGE_FIRST(IC) = DINTS(1)
	GOTO 9999
C
C IMAGE LSR filename
C 
1700	IF (IC.EQ.0) GOTO 9000
C
	IF (IMAGE_TYPE(IC).NE.0) THEN
	   CALL MOAN(MSG_IMINUSE,IC)
	   CALL LEARN(MSG_USEIMCLEAR)
	   GOTO 9990
	ENDIF
C
C Find the VIOSEC LUN which LSRLIB will use for file
	DO 1710 LUN=MIN_SECLUN,MAX_SECLUN
	   IF (.NOT.LUN_INUSE(LUN)) GOTO 1720
1710	CONTINUE
	CALL MOAN(MSG_TOOMANYIM)
	GOTO 9990
C	
C Parse LSR filename
1720	OK = PARFILN(IMAGNAM(IC),NAMLEN,DSTR(1:DSTRL),LSRTEM,VERNUM) 
	IF (.NOT.OK) THEN
	   CALL MOAN(MSG_ERRFILENAME,'LSR')
	   CALL LITES2_SIGNAL(OK)
	   GOTO 9990
	ENDIF
C
C Load LSR library (if not done already)
	IF (.NOT.LSR_SETUP) CALL LSRLOAD
	IF (.NOT.LSR_SETUP) GOTO 9990
C
	OK = LSROPN(IC,LUN)
	IF (.NOT.OK) GOTO 9990
	CALL INFORM(MSG_IMGOPENED,'LSR',IMAGNAM(IC)(:NAMLEN))
	GOTO 9999
C
C IMAGE EDIT
C 
1800	IF (.NOT.LICENSED(LOCK_IMAGE_EDIT)) GOTO 9999
	IF (IC.EQ.0) GOTO 9000
C
	IF (IMAGE_TYPE(IC).NE.0) THEN
	   CALL MOAN(MSG_IMINUSE,IC)
	   CALL LEARN(MSG_USEIMCLEAR)
	   GOTO 9990
	ENDIF
C
C check for another image open for edit, and remove any other
C (hopefully only one) edit flags
	DO 1810 I=1,MAXIMAGE
	   IF (IMAGE_EDIT(I)) THEN
	      IF (IMAGE_TYPE(I).NE.0) THEN
	         CALL MOAN(MSG_IMBEINGEDITED)
	         GOTO 9990
	      ENDIF
	      IMAGE_EDIT(I) = .FALSE.
	   ENDIF
1810	CONTINUE
C
C so now OK so mark this image for edit
	IMAGE_EDIT(IC) = .TRUE.
	GOTO 9999
C
C IMAGE READONLY
C 
1900	IF (IC.EQ.0) GOTO 9000
C
	IF (IMAGE_TYPE(IC).NE.0) THEN
	   CALL MOAN(MSG_IMINUSE,IC)
	   CALL LEARN(MSG_USEIMCLEAR)
	   GOTO 9990
	ENDIF
C
C so now OK so mark this image as not for edit
	IMAGE_EDIT(IC) = .FALSE.
	GOTO 9999
C
C IMAGE SUBSAMPLE PRIORITY n/FAST
C 
2000	CALL GET_COMMAND(DSTR(:DSTRL),IMAGE_SUBSAMPLE_CMD_TABLE)
	IF (MOANED) GOTO 9990
	IF (IC.EQ.0) GOTO 9000
	IF (IMAGE_TYPE(IC).EQ.0) GOTO 9010
C
	IF (DPRIN.EQ.1) THEN
C
C PRIORITY n
	   IF (IMAGE_TYPE(IC).NE.TYPE_LSR.OR.IMAGE_LEVELS(IC).NE.1) THEN
	      CALL MOAN(MSG_LSRBITONLY)
	      GOTO 9990
	   ENDIF
	   IF (DINTS(1).LT.0.OR.DINTS(1).GT.1) THEN
	      CALL MOAN(MSG_ARGRNG)
	      GOTO 9990
	   ENDIF
	   IMAGE_SUBPRI(IC) = .TRUE.
	   IMAGE_PRIVAL(IC) = DINTS(1)
	ELSE
C
C FAST
	   IMAGE_SUBPRI(IC) = .FALSE.
	ENDIF
	GOTO 9999
C
C IMAGE FOREGROUND n
C 
2100	IF (IC.EQ.0) GOTO 9000
	IF (IMAGE_TYPE(IC).EQ.0) GOTO 9010
	IF (IMAGE_TYPE(IC).NE.TYPE_LSR.OR.IMAGE_LEVELS(IC).NE.1) THEN
	   CALL MOAN(MSG_LSRBITONLY)
	   GOTO 9990
	ENDIF
	IF (DINTS(1).LT.0.OR.DINTS(1).GT.1) THEN
	   CALL MOAN(MSG_ARGRNG)
	   GOTO 9990
	ENDIF
	IMAGE_FORE(IC) = DINTS(1)
	GOTO 9999
C
C IMAGE BACKGROUND n
C 
2200	IF (IC.EQ.0) GOTO 9000
	IF (IMAGE_TYPE(IC).EQ.0) GOTO 9010
	IF (IMAGE_TYPE(IC).NE.TYPE_LSR.OR.IMAGE_LEVELS(IC).NE.1) THEN
	   CALL MOAN(MSG_LSRBITONLY)
	   GOTO 9990
	ENDIF
	IF (DINTS(1).LT.0.OR.DINTS(1).GT.1) THEN
	   CALL MOAN(MSG_ARGRNG)
	   GOTO 9990
	ENDIF
	IMAGE_BACK(IC) = DINTS(1)
	GOTO 9999
C
C IMAGE REGION n
C (0 means no region selected)
C 
2300	IF (DINTS(1).LT.0.OR.DINTS(1).GT.MAX_REG) THEN
	   CALL MOAN(MSG_INVALREGNO,DINTS(1),1,MAX_REG)
	   GOTO 9990
	ENDIF
	IMAGE_REGION = DINTS(1)
	GOTO 9999
C
C IMAGE CLEAR
C 
2400	IF (IC.EQ.0) GOTO 9000
	FILL_COLOUR = IMAGE_BACK(IC)
	GOTO 2510
C
C IMAGE FILL
C 
2500	IF (IC.EQ.0) GOTO 9000
	FILL_COLOUR = IMAGE_FORE(IC)
2510	IF (IMAGE_TYPE(IC).EQ.0) GOTO 9010
	IF (IMAGE_TYPE(IC).NE.TYPE_LSR.OR.IMAGE_LEVELS(IC).NE.1) GOTO 9040
	IF (.NOT.IMAGE_EDIT(IC)) GOTO 9050
	IF (.NOT.DEFREG(IMAGE_REGION)) GOTO 9990
	IF (IMAGE_FILL_REGION(IC,IMAGE_REGION,FILL_COLOUR,IERR)) GOTO 9990
	GOTO 9999
C
C IMAGE MOVE
C 
2600	COPY = .FALSE.
	GOTO 2710
C
C IMAGE COPY
C 
2700	COPY = .TRUE.
2710	IF (SINDEX.NE.STATE_READY) THEN
	   CALL MSGCMD(MOAN,MSG_CMDNOTVALID)
	   GOTO 9990
	ENDIF
	IF (IC.EQ.0) GOTO 9000
	IF (IMAGE_TYPE(IC).EQ.0) GOTO 9010
	IF (IMAGE_TYPE(IC).NE.TYPE_LSR.OR.IMAGE_LEVELS(IC).NE.1) GOTO 9040
	IF (.NOT.IMAGE_EDIT(IC)) GOTO 9050
	IF (.NOT.DEFREG(IMAGE_REGION)) GOTO 9990
	IF (IMAGE_BEGIN_MOVE(IC,IMAGE_REGION,COPY)) GOTO 9990
	GOTO 9999
C
C END (after IMAGE COPY/MOVE)
C
2750	IF (IC.EQ.0) GOTO 9000
	IF (IMAGE_TYPE(IC).EQ.0) GOTO 9010
	IF (IMAGE_TYPE(IC).NE.TYPE_LSR.OR.IMAGE_LEVELS(IC).NE.1) GOTO 9040
	IF (.NOT.IMAGE_EDIT(IC)) GOTO 9050
	IF (.NOT.DEFREG(IMAGE_REGION)) GOTO 9990
	IF (IMAGE_END_MOVE(IC,IMAGE_REGION,IMAGE_BACK(IC))) GOTO 9990
	GOTO 9999
C
C IMAGE PAINT
C 
2800	IF (SINDEX.NE.STATE_READY) THEN
	   CALL MSGCMD(MOAN,MSG_CMDNOTVALID)
	   GOTO 9990
	ENDIF
	IF (IC.EQ.0) GOTO 9000
	FILL_COLOUR = IMAGE_FORE(IC)
	GOTO 2910
C
C IMAGE ERASE
C 
2900	IF (SINDEX.NE.STATE_READY) THEN
	   CALL MSGCMD(MOAN,MSG_CMDNOTVALID)
	   GOTO 9990
	ENDIF
	IF (IC.EQ.0) GOTO 9000
	FILL_COLOUR = IMAGE_BACK(IC)
2910	IF (IMAGE_TYPE(IC).EQ.0) GOTO 9010
	IF (IMAGE_TYPE(IC).NE.TYPE_LSR.OR.IMAGE_LEVELS(IC).NE.1) GOTO 9040
	IF (.NOT.IMAGE_EDIT(IC)) GOTO 9050
	IF (IMAGE_BEGIN_PAINT(IC,FILL_COLOUR)) GOTO 9990
	GOTO 9999
C
C IMAGE BRUSH
C 
3000	CALL GET_COMMAND(DSTR(:DSTRL),IMAGE_BRUSH_CMD_TABLE)
	IF (MOANED) GOTO 9990
	GOTO (3010,3020,3030), DPRIN
C
C CIRCLE r
3010	IF (DREALS(1).LE.0) THEN
	   CALL MOAN(MSG_ARGRNG)
	   GOTO 9990
	ENDIF
	IMAGE_BRUSH_CIRCLE = .TRUE.
	CALL TSTUNT(.TRUE.,1,DREALS)
	IMAGE_BRUSH_SIZE(1) = DREALS(1)
	GOTO 9999
C
C RECTANGLE x y
3020	IF (DNREA.EQ.0) THEN
	   CALL MOAN(MSG_CMDLIBEOL,'command',DPRI(:DPRIL))
	   GOTO 9990
	ENDIF
	IF (DNREA.EQ.1) DREALS(2) = DREALS(1)
	IF (DREALS(1).LE.0.OR.DREALS(2).LE.0) THEN
	   CALL MOAN(MSG_ARGRNG)
	   GOTO 9990
	ENDIF
	IMAGE_BRUSH_CIRCLE = .FALSE.
	CALL TSTUNT(.TRUE.,2,DREALS)
	IMAGE_BRUSH_SIZE(1) = DREALS(1)
	IMAGE_BRUSH_SIZE(2) = DREALS(2)
	GOTO 9999
C
C CURSOR n
3030	IMAGE_BRUSH_CURSOR = (DINTS(1).NE.0)
	GOTO 9999
C
C IMAGE RECOVER
C 
3100	IF (IC.EQ.0) GOTO 9000	! in case we allow editing multiple images
	IF (DSTRIN) THEN
	   CALL GET_COMMAND(DSTR(:DSTRL),IMAGE_RECOVER_CMD_TABLE)
	   IF (MOANED) GOTO 9990
C
C only one tertiary command - CLEAR
	   CALL CACHE_FREE
	   GOTO 9999
	ENDIF
	IF (IMAGE_TYPE(IC).EQ.0) GOTO 9010
	IF (IMAGE_TYPE(IC).NE.TYPE_LSR.OR.IMAGE_LEVELS(IC).NE.1) GOTO 9040
	IF (.NOT.IMAGE_EDIT(IC)) GOTO 9050
	IF (IMAGE_RECOVER(IC)) GOTO 9990
	GOTO 9999
C
C IMAGE BURN_IN
C 
3200	IF (IC.EQ.0) GOTO 9000
	IF (IMAGE_TYPE(IC).EQ.0) GOTO 9010
	IF (IMAGE_TYPE(IC).NE.TYPE_LSR.OR.IMAGE_LEVELS(IC).NE.1) GOTO 9040
	IF (.NOT.IMAGE_EDIT(IC)) GOTO 9050
	IF (IMAGE_BURN_IN(IC)) GOTO 9990
	GOTO 9999
C
C IMAGE SPECKLE
C 
3300	IF (SINDEX.NE.STATE_READY) THEN
	   CALL MSGCMD(MOAN,MSG_CMDNOTVALID)
	   GOTO 9990
	ENDIF
	CALL GET_COMMAND(DSTR(:DSTRL),IMAGE_SPECKLE_CMD_TABLE)
	IF (MOANED) GOTO 9990
	IF (IC.EQ.0) GOTO 9000
	IF (DPRIN.EQ.1) THEN
C
C FILL d
	   SPECKLE_COLOUR = IMAGE_BACK(IC)
	   FILL_COLOUR = IMAGE_FORE(IC)
	ELSE
C
C CLEAR d
	   SPECKLE_COLOUR = IMAGE_FORE(IC)
	   FILL_COLOUR = IMAGE_BACK(IC)
	ENDIF
	IF (IMAGE_TYPE(IC).EQ.0) GOTO 9010
	IF (IMAGE_TYPE(IC).NE.TYPE_LSR.OR.IMAGE_LEVELS(IC).NE.1) GOTO 9040
	IF (.NOT.IMAGE_EDIT(IC)) GOTO 9050
	IF (.NOT.DEFREG(IMAGE_REGION)) GOTO 9990
	IF (DREALS(1).LE.0.0) THEN
	   CALL MOAN(MSG_ARGRNG)
	   GOTO 9990
	ENDIF
	CALL TSTUNT(.TRUE.,1,DREALS)
	IF (IMAGE_SPECKLE_FILL(IC,IMAGE_REGION,
     &		SPECKLE_COLOUR,FILL_COLOUR,DREALS(1))) GOTO 9990
	GOTO 9999
C
C IMAGE CONNECT
C 
3400	CALL GET_COMMAND(DSTR(:DSTRL),IMAGE_CONNECT_CMD_TABLE)
	IF (MOANED) GOTO 9990
	IMAGE_CONNECT_DIAG = (DPRIN.EQ.1)
	GOTO 9999
C
9000	CALL MOAN(MSG_NOCURIM)
	CALL LEARN(MSG_USEIMNUM)
	GOTO 9990
C
9010	CALL MOAN(MSG_IMNOTEXIST,IC)
	GOTO 9990
C
9020	CALL MOAN(MSG_STRING,
     &		'Classification of this image is not enabled')
	CALL LEARN(MSG_STRING,
     &		'Use IMAGE STEP to enable classification')
	GOTO 9990
C
9030	CALL MOAN(MSG_CMDLIBEOL,'command',
     &			DPRI(:DPRIL)//' '//DSEC(:DSECL) )
	GOTO 9990
C
9040	CALL MOAN(MSG_LSRBITONLY)
	GOTO 9990
C
9050	CALL MOAN(MSG_IMNOTEDIT)
	GOTO 9990
C
9990	CALL IGNCMD
9999	RETURN
        END
