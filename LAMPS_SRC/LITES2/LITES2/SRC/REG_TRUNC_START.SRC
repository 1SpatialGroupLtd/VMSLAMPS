C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-05-10 11:14:14.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE REG_TRUNC_START(REG,START_PT)
C
***	IDENT	10MY96
***	MODULE	REG_TRUNC_START
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C to clip start of zone, in case of overlap
C
C Author R.W. Russell			20-March-1990
C
	IMPLICIT	NONE
C
***	PARAMETER/CMN:REGPAR/
C
***	COMMON/CMN:REGCMN/
C
C arguments
	INTEGER*4	REG		
	REAL		START_PT	! start point of feature
C
C w/s
	REAL		XY(2)
	REAL		XY1(2)
	REAL		XY2(2)
	REAL		LNE1(2,2)
	REAL		LNE2(2,2)
	EQUIVALENCE	(LNE1(1,1),XY(1)),(LNE1(1,2),XY1(1))
	EQUIVALENCE	(LNE2(1,2),XY2(1))
	REAL		DX1,DY1,DX2,DY2
	INTEGER		ADDR
	LOGICAL		CLIP
	REAL		POINT(2)
	INTEGER		IN1,IN2
C
	CLIP = .FALSE.
C
C tidy up closure
C get coordinates of last point in region (which is outside
C offset distance from start of feature)
	CALL CPYPAK(2,%VAL(REGPTR(3,REG)+OFFX),XY)
C
C get coordinates of start of feature
	CALL CPYPAK(2,START_PT,XY1)
C
	DX1 = XY1(1) - XY(1)
	DY1 = XY1(2) - XY(2)
C
	ADDR = REGPTR(1,REG)
C
100	CONTINUE
	IF (ADDR.EQ.REGPTR(3,REG)) GOTO 900	! catch all
C
C get the coords of the current point of the region
	CALL CPYPAK(2,%VAL(ADDR+OFFX),XY2)
	DX2 = XY2(1) - XY(1)
	DY2 = XY2(2) - XY(2)
C       
C is this point to right of last line?
	IF (DX2*DY1.GT.DX1*DY2) THEN
	   IF (REG_PPT_FLAG.NE.ADDR) THEN
	      CALL PUTLNG(%VAL(ADDR),ADDR)
	      CALL CPYPAK(2,LNE2(1,2),LNE2(1,1))
	      GOTO 100
	   ENDIF
	ELSE
	   REG_PPT_FLAG = ADDR
	   CLIP = .TRUE.
	ENDIF
C
C Get intersection point
	IF (CLIP.AND.(REGPTR(1,REG).NE.REG_PPT_FLAG)) THEN
	   CALL INTSCT(LNE1,LNE2,POINT,IN1,IN2)
C
C now we delete last point in region
ccc	   ADDR = REGPTR(3,REG)
C
C current last is one previous
ccc	   CALL PUTLNG(%VAL(ADDR+OFFPREV),REGPTR(3,REG))
ccc	   IF (ADDR.EQ.REG_PPT_FLAG) REG_PPT_FLAG = REGPTR(3,REG)
C
C make this point to tail of list (an empty PPT)
ccc	   CALL PUTLNG(REGPTR(2,REG),%VAL(REGPTR(3,REG)))
C
C and this tail point back to current end of list
ccc	   CALL PUTLNG(REGPTR(3,REG),%VAL(REGPTR(2,REG)+OFFPREV))
C
C free the space
ccc	   CALL FREE_MEM(REG_ZONE,ADDR,PPTLEN)
ccc	   IF (REGPTR(1,REG).EQ.REGPTR(3,REG)) GOTO 900
C
C the first point becomes the intersection point
	   CALL CPYPAK(2,POINT,%VAL(REG_PPT_FLAG+OFFX))
	ENDIF
C
C delete points from the start up to the marked point
	IF (CLIP) THEN
800	   ADDR = REGPTR(1,REG)
	   IF (ADDR.NE.REG_PPT_FLAG) THEN
	      CALL PUTLNG(%VAL(ADDR),REGPTR(1,REG))
	      CALL PUTLNG(0,%VAL(ADDR+OFFPREV))
	      CALL FREE_MEM(REG_ZONE,ADDR,PPTLEN)
	      GOTO 800
	   ENDIF
	ENDIF
C
900	RETURN
	END
