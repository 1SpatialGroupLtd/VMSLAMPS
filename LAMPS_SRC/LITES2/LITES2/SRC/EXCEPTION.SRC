C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-09-25 13:05:14.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C
C This file contains several exception handlers for LITES2
C
	INTEGER*4 FUNCTION EXCP_HANDLER(SIGARGS,MECHARGS)
C
***	MODULE	EXCP_HANDLER
***	IDENT	25SE91
C
C	Condition handler for VAX LITES
C	If an exception occurs, this is called as a subroutine
C	If the exception was a reserved operand error, it resets the
C	operand, so it contains 1.0, rather than the reserved operand
C	Otherwise, it resignals the error as a warning
C
C	Copyright Laser-Scan Labs. Ltd., Cambridge, England.
C
	IMPLICIT NONE
C
	INCLUDE '($MTHDEF)'
	INCLUDE '($SSDEF)'
C
	INTEGER*4 SIGARGS(*)
	INTEGER*4 MECHARGS(5)
C
C functions called
	INTEGER		LIB$MATCH_COND
	INTEGER*4	LIB$FIXUP_FLT
C
	INTEGER	I
	INTEGER	LASTI
	SAVE	  LASTI		! for catching repeated ACCVIOs
C
C If it is a floating point fault, LIB$SIM_TRAP will return to the
C point whence we came, and magically transform the fault into a trap,
C after which we will be called again, and this time we will be
C able to handle it.
C If it returns, it isn't a floating point fault, and the status is
C always SS$_RESIGNAL.
C
	CALL LIB$SIM_TRAP(SIGARGS,MECHARGS)
C
C do we recognise the error ?
C
	I=LIB$MATCH_COND(SIGARGS(2),SS$_ROPRAND,SS$_DEBUG,SS$_ACCVIO)
C
C ROPRAND
C Attempt to fix up if it was a floating point ROPRAND
	IF (I.EQ.1) THEN
	   IF (LASTI.EQ.1) THEN		! last was ROPRAND
	      I = 0			! don't remember this one
	      GOTO 30			! change to debug
	   ENDIF
	   GOTO 20
	ENDIF
C
C DEBUG
C Allow through to invoke the debugger
	IF (I.EQ.2) GOTO 5	! don't reduce debug to warning
C
C ACCVIO
C Signal it once to get error message - when it re-appears, then debug
	IF (I.EQ.3) THEN
	   IF (LASTI.EQ.3) THEN		! last was ACCVIO
	      I = 0			! don't remember this one
	      GOTO 30			! change to debug
	   ENDIF
	ENDIF
C
C we don't know what to do with it, so change the severity to error,
C and resignal it
2	CALL LIB$INSV(2,		! Its value
     &                0,		! Its position
     &                3,		! Its size
     &                SIGARGS(2))	! Into here
C
C join here for resignal
C
5	EXCP_HANDLER=SS$_RESIGNAL
	LASTI = I
	RETURN
C
C here with any errors to be totally ignored
C
10	EXCP_HANDLER=SS$_CONTINUE
	LASTI = I
	RETURN
C
C it's a reserved operand error, so try to zap it
C
20	EXCP_HANDLER=LIB$FIXUP_FLT(SIGARGS,MECHARGS,1.0D0)
C
C if that didn't work, then it was probably some other sort of ROPRAND,
C e.g. from INSV,
	IF (.NOT.EXCP_HANDLER) GOTO 2	! reduce to warning
	RETURN
C
C change to debug and resignal
30	SIGARGS(2) = SS$_DEBUG
	GOTO 5		! don't reduce it to warning
C
	END
C
C
	INTEGER*4 FUNCTION EXP_HAND(SIGARG, MCHARG)
C
***	MODULE EXP_HAND
***	IDENT	18JL90
C
	IMPLICIT NONE
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England
C Author: Clarke Brunt (from one in CMDLIB)
C
C Condition handler for LITES2 expression evaluation
C Sets variables in CMDLIB common block
C
C arguments:
	INTEGER*4	SIGARG(*)
	INTEGER*4	MCHARG(5)
C
	INCLUDE '($MTHDEF)'
	INCLUDE '($SSDEF)'
C
***	PARAMETER/LSL$CMNLSL:LSLLIBMSG/
***	COMMON/LSL$CMNLSL:CMDCOM/
***	COMMON/LSL$CMNLSL:EXCEPTION/
C
C function called
	INTEGER	LIB$MATCH_COND
C
C workspace
	INTEGER	I
C
C Turn floating point fault into a trap
	CALL LIB$SIM_TRAP(SIGARG, MCHARG)
C
C do we recognise the error ?
C
	I=LIB$MATCH_COND(SIGARG(2),
     &		SS$_FLTDIV,SS$_FLTDIV_F,
     &		SS$_FLTOVF,SS$_FLTOVF_F,MTH$_FLOOVEMAT,MTH$_UNDEXP,
     &			MTH$_INVARGMAT,
     &		SS$_FLTUND,SS$_FLTUND_F,MTH$_FLOUNDMAT,MTH$_LOGZERNEG,
     &		SS$_INTDIV,
     &		SS$_INTOVF)
C
	GOTO (10,10,20,20,20,20,20,30,30,30,30,40,50),I
C
C not one of ours - resignal
	EXP_HAND = SS$_RESIGNAL
	RETURN
C
C floating divide by zero
10	LSL_EXCP = LSL__FLTDIV
	GOTO 900
C
C floating overflow
20	LSL_EXCP = LSL__FLTOVF
	GOTO 900
C
C floating underflow
30	LSL_EXCP = LSL__FLTUND
	GOTO 900
C
C integer divide by zero
40	LSL_EXCP = LSL__INTDIV
	GOTO 900
C
C integer overflow
50	LSL_EXCP = LSL__INTOVF
C
C preserve condition
900	ERRNUM = LSL__HADEXCP
C
C signal to continue execution from exception
	EXP_HAND = SS$_CONTINUE
	RETURN
	END
C
C
C
C
	INTEGER*4 FUNCTION EXP_HAND_FIMS(SIGARG, MCHARG)
C
***	MODULE EXP_HAND_FIMS
***	IDENT 01FE88
C
	IMPLICIT NONE
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England
C Author: Ron Russell
C
C Condition handler for LIB$FIND_IMAGE_SYMBOL, which otherwise signals
C its errors
C
C arguments:
	INTEGER*4	SIGARG(*)
	INTEGER*4	MCHARG(5)
C
	INCLUDE '($LIBDEF)'
	INCLUDE '($SSDEF)'
C
C function called
	INTEGER	LIB$MATCH_COND
C
C workspace
	INTEGER	I
C
C do we recognise the error ?
C
	I=LIB$MATCH_COND(SIGARG(2),LIB$_KEYNOTFOU)
C
	GOTO (10),I
C
C not one of ours - resignal
	EXP_HAND_FIMS = SS$_RESIGNAL
	GOTO 900
C
C key not found
10	EXP_HAND_FIMS = SS$_CONTINUE
	GOTO 900
C
900	RETURN
	END
C
C
	INTEGER*4 FUNCTION EXP_HAND_FIMS_USER(SIGARG, MCHARG)
C
***	MODULE EXP_HAND_FIMS_USER
***	IDENT 09JN89
C
	IMPLICIT NONE
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England
C Author: Ron Russell
C
C Condition handler for LIB$FIND_IMAGE_SYMBOL, which otherwise signals
C its errors. This is for where LIB$FIND_IMAGE_SYMBOL is being called
C to setup user routines. If image is a non-shareable executable image
C LIB$FIND_IMAGE_SYMBOL signals two errors - an RMS error, followed by
C LIB$_KEYNOTFOU. This is an attempt to catch the first one
C
C arguments:
	INTEGER*4	SIGARG(*)
	INTEGER*4	MCHARG(5)
C
	INCLUDE '($LIBDEF)'
	INCLUDE '($SSDEF)'
C
C functions called
	INTEGER	LIB$MATCH_COND
	INTEGER	SYS$UNWIND
C
C workspace
	INTEGER	I
C
C do we recognise the error ?
C
	I=LIB$MATCH_COND(SIGARG(2),LIB$_KEYNOTFOU,SS$_UNWIND,
     &	                  LIB$_EOMWARN)
C
C anything we are happy about (EOMWARN), no message and continue
	IF (I.GE.3) THEN
	   EXP_HAND_FIMS_USER = SS$_CONTINUE
	   GOTO 1000
	ENDIF
C
	GOTO (900,1000),I
C
C any condition, apart from KEYNOTFOU
C
C if it is something we don't recognise, then write message and unwind
	SIGARG(1) = SIGARG(1) - 2
	CALL SYS$PUTMSG(SIGARG,,,)
	SIGARG(1) = SIGARG(1) + 2		
C
C write a blank line after the message to avoid the message being
C overwritten by the next line of output
	CALL WRITEF
C
C KEYNOTFOUnd - 
C unwind to our establisher, returning the condition value in R0
C
C MCHARG(4) is where R0 will be restored from
C MCHARG(3) is the depth from where we were established to where
C the condition occurred.
C This is like LIB$SIG_TO_RET but unwinds one less frame
900	MCHARG(4) = SIGARG(2)
	EXP_HAND_FIMS_USER = SYS$UNWIND( MCHARG(3), )
C
1000	RETURN
	END
