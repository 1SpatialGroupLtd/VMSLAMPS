C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-03-10 15:47:20.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION GET_SHEET_OSGB(STR,STRL,SCALE,GRID)
C
***     IDENT   10MR93
***     MODULE  GET_SHEET_OSGB
C
C       Copyright Laser-Scan Ltd., Cambridge, England.
C
C       Written                                 RWR 	6-Dec-1989
C
C Default routine to convert from grid position to map sheet name.
C This is for the UK National Grid - it can be overidden by a user
C written routine
C Function returns .TRUE. for success and .FALSE. for failure
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:MOANMESS/
C
C arguments
	CHARACTER*(*)	STR		! string to return
	INTEGER		STRL		! string length
	INTEGER		SCALE		! scale
	REAL*8		GRID(2)		! Eastings and Northings of point
C
C this routine is based on that by Paul Hardy, written for the program
C OSMHED
C
C w/s:
C
	CHARACTER*1 	S500K		! 500 km letter
	CHARACTER*1	S100K		! 100 km letter
	CHARACTER*1	SQ(5,5)		! table of grid letters
	CHARACTER*1	N(2),E(2)	! N/S and E/W choice
	CHARACTER*1	QN,QE		! quadrant letters
C
	INTEGER*4   	S1KE		! 1 km square easting
	INTEGER*4	S1KN		!	      northing
	INTEGER*4	REFE		! Easting ref w/s
	INTEGER*4	REFN
	INTEGER*4	IE,IN
	INTEGER*4	EAST,NORTH
C
C funtions
	INTEGER		EXPAND
C
C and set up the tables we use - SQ maps the order of the OS
C letter codes over the National Grid, N and E give the quadrant
C letters for us
C
	DATA SQ/'A','B','C','D','E',
     &          'F','G','H','J','K',
     &          'L','M','N','O','P',
     &          'Q','R','S','T','U',
     &          'V','W','X','Y','Z'/
C
	DATA N/'S','N'/
C
	DATA E/'W','E'/
C
C code:
	GET_SHEET_OSGB = .TRUE.		! always succeed
C
C integerise the coordinates (this used to NINT, by adding 0.5, but then
C gave wrong answer within 0.5 of sheet edge - CCB 10MR93)
	EAST  = GRID(1)
	NORTH = GRID(2)
C
C for clarity, we shall use the example given in JB Harley, "OS Maps:
C a descriptive manual", page 25sqq
C
C That is, we shall consider the point with grid reference
C 538 932 East and 177 061 North, and work out the map it is in...
C
C calculate the 500km grid square -
C first we must move from the Grid false origin to the true one...
C
	REFE = EAST  + 1 000 000	! true grid 1 538 932
	REFN = NORTH +   500 000	! true grid   677 061
C
C and now work out which 500 km square we are in
C
	IE = REFE/500 000 + 1		! IE = 3+1 = 4
	IN = 5 - REFN/500 000		! IN = 5-1 = 4
	S500K = SQ(IE,IN)		! => S500K = 'T'
C
C now 100km square letter
C
	REFE = MOD(REFE,500 000)	! REFE =  38 932
	REFN = MOD(REFN,500 000)	! REFN = 177 061
	IE = REFE/100 000 + 1		! IE = 0+1 = 1
	IN = 5 - REFN/100 000		! IN = 5-1 = 4
	S100K = SQ(IE,IN)		! => S100K = 'Q'
C
C Now 1km square
C
	REFE = MOD(REFE,100 000)	! REFE = 38 932
	REFN = MOD(REFN,100 000)	! REFN = 77 061
	S1KE = REFE/1000		! S1KE =     38
	S1KN = REFN/1000		! S1KN =     77
C
C and now we must assemble the actual name
C
	IF ( SCALE.GE.250 000 ) THEN		! ie TQ
C
	   STRL = EXPAND('%WS%P0%S%S',
     &        STR, S500K, S100K)
C
	ELSEIF ( SCALE.EQ.25 000 ) THEN	! ie TQ 37
C
	   STRL = EXPAND('%WS%P0%S%S%I1%I1',
     &        STR, S500K, S100K, S1KE/10, S1KN/10)
C
	ELSEIF ( SCALE.EQ.10 000.OR.SCALE.EQ.10 560 ) THEN	! ie TQ 37 NE
C
C	 so we must work out the quadrant in the 10km square
C
	   REFE = MOD( (EAST  + 1 000 000), 10 000 )	! REFE = 8 932
	   REFN = MOD( (NORTH +   500 000), 10 000 )	! REFN = 7 061
	   IE = REFE/5 000 + 1				! IE = 1+1 = 2
	   IN = REFN/5 000 + 1				! IN = 1+1 = 2
	   QN = N(IN)					! QN = 'N'
	   QE = E(IE)					! QE = 'E
C
	   STRL = EXPAND('%WS%P0%S%S%I1%I1%S%S',
     &        STR, S500K, S100K, S1KE/10, S1KN/10, QN, QE)
C
	ELSEIF ( SCALE.EQ.2 500 ) THEN		! ie TQ 38 77
C
	   STRL = EXPAND('%WS%P0%S%S%I2%I2',
     &        STR, S500K, S100K, S1KE, S1KN)
C
	ELSEIF ( SCALE.EQ.1250) THEN		! ie TQ 38 77 SE
C
C	 so we must work out the quadrant in the 1km square
C
	   REFE = MOD(REFE,1000)			! REFE = 932
	   REFN = MOD(REFN,1000)			! REFN =  61
	   IE = REFE/500 + 1				! IE = 1+1 = 2
	   IN = REFN/500 + 1				! IN = 0+1 = 1
	   QN = N(IN)					! QN = 'S'
	   QE = E(IE)					! QE = 'E'
C
	   STRL = EXPAND('%WS%P0%S%S%I2%I2%S%S',
     &        STR, S500K, S100K, S1KE, S1KN, QN, QE)
C
C unrecognised scale
	ELSE
	   CALL MOAN(MSG_NOTOSSCALE,SCALE)
	   CALL LEARN(MSG_OSSCALES)
	   CALL LEARN(MSG_OSSCALES1)
	   STR  = 'UNDEFINED'
	   STRL = 9
	ENDIF	   
C
C and that is all we need to do
C
	RETURN
	END
