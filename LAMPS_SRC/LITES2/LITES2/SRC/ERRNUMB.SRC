C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-10-05 16:21:38.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE ERRNUMB
C
***	IDENT   05OC89
***	MODULE  ERRNUMB
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Written					RWR	8-SEP-1988
C
C	Diagnose error while reading number
C
	IMPLICIT NONE
C
***	PARAMETER/LSL$CMNLSL:LSLLIBMSG/
***	PARAMETER/CMN:MOANMESS/
C
***     COMMON/CMN:DOUT/
***	COMMON/LSL$CMNLSL:EXCEPTION/
C
C w/s
	BYTE		ICH
C
C Unexpected end of line
	IF (ERRNUM .EQ. LSL__UNEXPEOL) THEN
	   CALL MOAN(MSG_CMDLIBEOL,'command',DPRI(1:DPRIL))
C
C Unexpected character
	ELSEIF (ERRNUM .EQ. LSL__NONUM) THEN
	   CALL RDCHS(ICH)
	   CALL MOAN(MSG_CMDLIBUXC,ICH)
C
C A mathematical over/underflow situation
	ELSE IF (ERRNUM .EQ. LSL__HADEXCP) THEN
C
C Floating division overflow
	   IF (LSL_EXCP .EQ. LSL__FLTDIV) THEN
	      CALL NASTY(MSG_CMDLIBFDV,'command',DPRI(1:DPRIL))
	      CALL LITES2_SIGNAL(LSL_EXCP)
C
C Floating overflow
	   ELSE IF (LSL_EXCP .EQ. LSL__FLTOVF) THEN
	      CALL NASTY(MSG_CMDLIBFOV,'command',DPRI(1:DPRIL))
	      CALL LITES2_SIGNAL(LSL_EXCP)
C
C Floating underflow
	   ELSE IF (LSL_EXCP .EQ. LSL__FLTUND) THEN
	      CALL NASTY(MSG_CMDLIBFUN,'command',DPRI(1:DPRIL))
	      CALL LITES2_SIGNAL(LSL_EXCP)
C
C Integer division overflow
	   ELSE IF (LSL_EXCP .EQ. LSL__INTDIV) THEN
	      CALL NASTY(MSG_CMDLIBIDV,'command',DPRI(1:DPRIL))
	      CALL LITES2_SIGNAL(LSL_EXCP)
C
C Integer overflow
	   ELSE IF (LSL_EXCP .EQ. LSL__INTOVF) THEN
	      CALL NASTY(MSG_CMDLIBIOV,'command',DPRI(1:DPRIL))
	      CALL LITES2_SIGNAL(LSL_EXCP)
	   ENDIF
C
C Number read exception
	ELSE IF (ERRNUM .EQ. LSL__BASECH ) THEN
	   CALL NASTY(MSG_CMDLIBBEX,'command',DPRI(1:DPRIL))
	   CALL LITES2_SIGNAL(LSL_EXCP)
	ENDIF
C
	RETURN
	END
