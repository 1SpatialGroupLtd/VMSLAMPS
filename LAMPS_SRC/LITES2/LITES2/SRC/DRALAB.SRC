C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-02-12 11:15:52.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE DRALAB(PACK)
C
***	MODULE	DRALAB
***	IDENT	12FE93
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author Ron Russell		21-July-1986
C
C To draw the label for the feature pointed at by PACK
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:ACS/
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:CTXS/
***	PARAMETER/CMN:EFNLUN/
***	PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:PACK/
C
***	COMMON/CMN:CB/
***	COMMON/CMN:CLIP/
***	COMMON/CMN:CTXS/
***	COMMON/CMN:DRAWIN/
***	COMMON/LSL$CMNFRT:FRTACD/
***	COMMON/LSL$CMNFRT:FRTCOM/
***	COMMON/LSL$CMNIFF:IFFSTR/
***	COMMON/CMN:LABELS/
***	COMMON/CMN:MAPS/
***	COMMON/CMN:OIIH/
***	COMMON/LSL$CMNLSL:TXTC/
***	COMMON/CMN:WORKS/
***	COMMON/CMN:WORK_DRAW/
C
C arguments
C
	INTEGER*4 PACK(PAKLEN)	! a pack for the feature
C
C functions called
C
	LOGICAL GENAUX		! generate auxiliary array for symbols,
C				! texts, and arcs
	LOGICAL	GEOG_TRANS_ARRAY
C w/s
C
	INTEGER		I
	INTEGER*4	DUMPAK(PAKLEN)	! dummy pack for GENAUX
	INTEGER*2	IECODE,IELEN	! for reading from IFF
	INTEGER*2	ISTAT(4)	! feature status words
	INTEGER		TXSIZE		! text size from TH entry
	INTEGER		ACLEN		! length of AC text
	INTEGER		ACTYPE		! type of AC
	LOGICAL*1	HADST
	LOGICAL*1	GOT_POSIN	! label position is inside window
	LOGICAL*1	GOT_POSOUT
	LOGICAL*1	INSIDE		! currently inside window
	LOGICAL*1	LINEAR		! dealing with linear feature
	LOGICAL*1	HADTS
	LOGICAL*1	HADLABEL	! output thislabel already
	INTEGER		GT		! graphical type from pack
	REAL		POS(3)		! position to plot text at
	REAL		TMPX,TMPY
	INTEGER		IND		! index on XY
	INTEGER		INDEX
	INTEGER		START
	INTEGER		WHERE
	REAL		AUX(AUXLEN)	! auxiliary array
	REAL		ANG		! angle
	REAL		INVEC(3,2)	! first vector in window
	REAL		OUTVEC(3,2)	! last vector in window
	LOGICAL		ONE_POINT
C
C don't do anything if no display
	IF (NODISP) GOTO 9999
C
C Initialise
	GT = PACK(PAKGT)
C
C only mark linear features, curves and areas
	IF (MARKING.AND.GT.NE.LINTYP.AND.GT.NE.CURTYP.AND.
     &	               GT.NE.ARETYP) GOTO 9999
C
C no labelling of points on circle arcs
	IF (.NOT.LABFEAT.AND.GT.GE.CLOTYP.AND.GT.LE.FULTYP) GOTO 9999
C
	LINEAR = GT.EQ.LINTYP.OR.GT.EQ.CURTYP.OR.
     &	         GT.EQ.STRTYP.OR.GT.EQ.ARETYP
	HADST = .FALSE.
	HADTS     = .FALSE.
	ONE_POINT = .TRUE.
	TXSIZE = 0
	ANG = 0.0
	ISTAT(3)=0			! text position to 0, by default
C
C set up attributes for drawing marks
	IF (MARKING) THEN	
	   FRTFLG = 0
	   FRTHW  = 0
	   FRTHWL = 0
	   FRTWID = ANNOWIDTH
	   FRTSIZ = 0.0
	   FRTFC = -1			! FRTCOM well and truely nadjered
	ENDIF
C
C labelling features
C
	IF (.NOT.MARKING.AND.LABFEAT) THEN
	   DO 10, I = 1,NUM_LAB_AC		! clear had ac flags
	      HAD_LAB_AC(I) = .FALSE.
   10	   CONTINUE
	ENDIF
C
	GOT_POSIN = .FALSE.
	GOT_POSOUT = .FALSE.
	HADLABEL  = .FALSE.
	NUMBER_OFFSET = 0
C
C get correct map
	CALL SELIF(PACK(PAKMAP))
C
C position onto the feature
	CALL IFFPKE( IECODE, IELEN, PACK(PAKPNF) )
	IF (IECODE.NE.'NF'.AND.IECODE.NE.'TC'.AND.IECODE.NE.'CH'
     &					.AND.IECODE.NE.'VO') THEN
	   CALL NASTY(MSG_BADPNF)
	   CALL COLAPS(MSG_BADPNF)
	   GOTO 9999
	ENDIF
C
C loop to look at each entry within feature
C
20	CALL IFFNXT(IECODE, IELEN)
C
	IF (IELEN.EQ.-1) THEN
	   CALL NASTY(MSG_UNEXPEIFF)
	   CALL COLAPS(MSG_UNEXPEIFF)
	   GOTO 9999
	ENDIF
C
	IF (IECODE.EQ.'FS') GOTO 100
	IF (IECODE.EQ.'AC') GOTO 200
	IF (IECODE.EQ.'CB') GOTO 300
	IF (IECODE.EQ.'RO') GOTO 400
	IF (IECODE.EQ.'TH') GOTO 500
	IF (IECODE.EQ.'TX') GOTO 600
	IF (IECODE.EQ.'TS') GOTO 700
	IF (IECODE.EQ.'EF') GOTO 800
C
C ignore anything else
	GOTO 20
C
C ***************************************************************
C FS entry
100	CALL EIHRI(ISTAT,MIN(IELEN,4),1)
C
C set up colour to draw in, if using colour from frt
	IF (ANNOCOL.LT.0) THEN
	   CALL FRTFND(ISTAT(1))
	   CALL SRICOL(MAX(FRTCOL,1))	
	ENDIF
	GOTO 20
C
C ***************************************************************
C AC entry
200	CONTINUE
	IF (.NOT.LABFEAT.OR.MARKING) GOTO 20
	ACTYPE = 0			! zero long word
	CALL EIHR(ACTYPE,1,1)		! got AC type
C
C see if this is required
C
	DO 220, I=1,NUM_LAB_AC
	   IF (LABAC(I).EQ.ACTYPE) THEN
	      HAD_LAB_AC(I) = .TRUE.
C
C read and remember the value (if required)
C
	      IF (LABACV(I)) THEN
	         CALL EIHRL(LABACVAL(I),1,2)
	      ENDIF
C
C read and remember the text (if required)
C
	      IF (LABACTXT(I)) THEN
	         ACLEN = MIN(IELEN-3,(ACMAX+1)/2) ! length of text part
	         IF (ACLEN.GT.0) THEN
	            CALL EIHR(LABACBUF(1,I),ACLEN,4)	! text
	            ACLEN = ACLEN*2			! bytes
	            ACLEN = MIN(ACLEN,ACMAX)
C
C make sure buffer is terminated by a null
C
	            IF (LABACBUF(ACLEN,I).NE.0)
     &	                LABACBUF(MIN(ACLEN+1,ACMAX),I) = 0
	         ELSE
	            LABACBUF(1,I) = 0
	         ENDIF
	      ENDIF
	      GOTO 20		! don't look at any more entries in LABAC
	   ENDIF
  220	CONTINUE
	GOTO 20
C
C ***************************************************************
C ST (CB) - string of coordinates
300	IF (HADST) THEN				! remember last point
	   LABXY(1,0) = LABXY(1,IND-1)
	   LABXY(2,0) = LABXY(2,IND-1)
	   LABZ(0) = LABZ(IND-1)
	   ONE_POINT = .FALSE.			! had more than 1 point
	ENDIF
C
	CALL EIHRCB_HEAD(CBH)
C
C read in the points
	IND = 0			! read first ST into start of array
	IF (HADST) IND = 1	! but subsequent start at 2nd element
C
C read in the points
	IF (.NOT.KRSINI.AND.SIMPLE_XY) THEN	! read whole thing
						! direct to XY
	   CALL EIHRCB_DATA(LABXY(1,IND))
	ELSE
	   CALL EIHRCB_DATA(CBD)! read into scratch, and extract XY
	   CALL IFS_CB_READ(CBH,CBD,LABXY(1,IND),2,COLHXY,1,CBH.NROW)
	   IF (KRSINI) 
     &	         CALL IFS_CB_READ(CBH,CBD,LABZ(IND),1,COLHZ,1,CBH.NROW)
	ENDIF
C
C add origin of map, or transform into LITES2 space, if required
	IF (DO_FLY_TRANS) THEN
	   IF(.NOT.GEOG_TRANS_ARRAY(CURR_SYS,CURR_ZONE,CURR_PARAMS,
     &	                         CURR_UNIT,CURR_ORG,
     &	                         LITES2SYS,LITES2ZONE,LITES2PAR,
     &	                         LITES2UNIT,LITES2ORG,
     &	                         CBH.NROW,LABXY(1,IND))) GOTO 9999
	ELSEIF (USE_ORG) THEN
	   CALL ADDORG(ORGXY,LABXY(1,IND),CBH.NROW)
	ENDIF
C
	IND = CBH.NROW
C
C labelling features?
	IF (LABFEAT.AND..NOT.MARKING) THEN
C
	   IF (ONE_POINT) ONE_POINT = CBH.NROW.EQ.1
	   IF (HADST) IND = IND+1
C
C assume feature always starts outside window. VINWIN will always
C use first vector if it is inside window.
	   IF (.NOT.HADST) INSIDE = .FALSE.
C
	   HADST = .TRUE.
C
C should any vector be labelled?
C	
	   IF (LINEAR) THEN
	      START = 0
	      INDEX = IND		! save value of IND so last
					! point can be moved down next ST
  320	      CALL VINWIN(INDEX,LABXY(1,START),LABZ(START),INSIDE,INVEC,
     &	               OUTVEC,GOT_POSIN,GOT_POSOUT,WHERE)
	      IF ((ANNOSTART.AND.GOT_POSIN).OR.
     &	          (GOT_POSIN.AND.GOT_POSOUT)) THEN
	         CALL DSTLAB(HADLABEL,INVEC,OUTVEC,PACK)
C
C reinitialise search and continue, for reentrant features
C
	         START = START + WHERE
	         INDEX = INDEX - WHERE
	         GOT_POSIN = .FALSE.
	         GOT_POSOUT = .FALSE.
	         GOTO 320
	      ENDIF
	   ENDIF	
	ELSE
C
C label or mark points
	   CALL DISPPT(LABXY,LABZ,IND)
	ENDIF
	NUMBER_OFFSET = NUMBER_OFFSET + IND
	GOTO 20
C
C ***************************************************************
C RO - symbol or text rotation
400	CALL EIHRR(ANG,1,1)
	GOTO 20
C
C ***************************************************************
C TH entry
500	TXSIZE = 0				! blank out longword
	CALL EIHRI(TXSIZE,1,1)			! read word into bottom
	GOTO 20
C
C ***************************************************************
C TX - text string
600	IF (IELEN.EQ.0) GOTO 9999	! null???
	IELEN = MIN(IELEN,(CTXMAX+1)/2)
	CALL EIHR(TXTBUF,IELEN,1)
	TXTPTR = IELEN*2
C
C Remove any trailing null
	IF (TXTBUF(TXTPTR).EQ.0) TXTPTR = TXTPTR-1
	TXTPTR = MIN(TXTPTR,CTXMAX)
	GOTO 20
C
C ***************************************************************
C TS - Text status code
700	IF (HADTS) THEN		! second TS - draw label at fisrt text
	   GOTO 800
	ELSE
	   HADTS = .TRUE.
	   CALL EIHRI(ISTAT,MIN(IELEN,4),1)
	ENDIF
	GOTO 20
C
C ***************************************************************
C EF - end feature
C
C if linear feature and not labelling at start of every feature, there
C may be an outstanding label to plot
C
C treat one point symbol strings as symbols (other symbol strings as
C lines)
C
800	CONTINUE
	IF (.NOT.MARKING.AND.LABFEAT) THEN
	   IF (LINEAR.AND.
     &	      .NOT.(GT.EQ.STRTYP.AND.ONE_POINT)) THEN
	      IF (.NOT.ANNOSTART.AND.GOT_POSIN)
     &	         CALL DSTLAB(HADLABEL,INVEC,OUTVEC,PACK)
C
C for other feature types generate auxiliary array
C
	   ELSE
C
C GENAUX will produce its own error message if it fails,
C which is sufficiently disastrous for us to reject the feature
	      DUMPAK(PAKFC) = ISTAT(1)	! make sure GENAUX uses
					! correct FC
	      IF (GENAUX(IND,LABXY(1,0),AUX,TXTDSC,ANG,TXSIZE,
     &	                  DUMPAK,ISTAT))  GOTO 9999
C
C check if drawing position is in window
C
C for texts and symbols
C
	      IF ((GT.GE.UNOTYP.AND.GT.LE.TEXTYP).OR.
     &	          (GT.EQ.STRTYP.AND.ONE_POINT)) THEN
	         TMPX = AUX(MAXXI) + ANNOOFFX
	         TMPY = AUX(MAXYI) + ANNOOFFY
	         POS(1) = LABXY(1,0) + TMPX*AUX(COSI) - TMPY*AUX(SINI)
	         POS(2) = LABXY(2,0) + TMPX*AUX(SINI) + TMPY*AUX(COSI)
	         GOT_POSIN = POS(1).GE.CLIPLO(1).AND.POS(1).LE.CLIPHI(1)
     &	                .AND.POS(2).GE.CLIPLO(2).AND.POS(2).LE.CLIPHI(2)
	      ENDIF
C
C draw label if required
C
	      IF (GOT_POSIN) THEN
	         IF (KRSINI) THEN
	            CALL SRI_SET_Z(LABZ(0))
	            POS(3) = LABZ(0)
	         ENDIF
	         CALL DISPLAB(PACK,HADLABEL,POS,ANG)
	      ENDIF
	   ENDIF
	ENDIF
C
9999	RETURN
	END

