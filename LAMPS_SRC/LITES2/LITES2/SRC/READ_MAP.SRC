C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-03-22 11:27:06.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE READ_MAP(MAP,ERROR)
C
***	MODULE	READ_MAP
***	IDENT	22MR93
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author  Ron Russell					20-Oct-1989
C
C To read data from the IFF file
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:EFNLUN/
***	PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:PACK/
C
***	COMMON/CMN:DRAWIN/
***	COMMON/LSL$CMNIFF:IFFHAN/
***	COMMON/CMN:MAPS/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:OIIH/
***	COMMON/CMN:OPTION/
C
C functions called
C
	INTEGER		MINDEX
	LOGICAL		CLOSIF
	INTEGER*4	LIB$EXTZV
C
C arguments
	INTEGER		MAP		! map number to read
	LOGICAL		ERROR		! TRUE if error occurred
C
C w/s
	INTEGER	KETPOS,DOTPOS,I
	INTEGER WORDS
	CHARACTER*1 CHAR
C
C assume failure
	ERROR = .TRUE.
C
C Are we to use input file alone, not creating an output file?
C Yes, if either editing in-situ, or read-only
	USEINP = MAPINS(MAP).OR.MAPRO(MAP)
C
C open input file
	IF (MAPINS(MAP)) THEN		! edit in-situ
	   CALL IFFOPI(INLUN,IFFNAM(1,MAP),FILEID(1,MAP))
	ELSE					! only read
	   CALL IFFOPI(INLUN,IFFNAM(1,MAP),FILEID(1,MAP),0)
	ENDIF
	IF (IERCD.NE.0) THEN
	   CALL NASTY(MSG_IFFOPEN,MAP+1,IFFNAM(1,MAP))
	   GOTO 195
	ENDIF
	WORDS = LPOSE		! number of words in file
	CALL IFFIRV(1)	! input revision level 1, for CB's
	CALL IFFRLA(.TRUE.)	! and read look-ahead
C
C get output file
	IF (USEINP) THEN		! use input file
C
C output same as input
	   CALL STR$COPY_DX(MAPNAM(1,MAP),IFFNAM(1,MAP))
	ELSE
C       
C Derive name of output file
	   KETPOS = 0
	   CALL STR$COPY_DX(MAPNAM(1,MAP),IFFNAM(1,MAP))
	   CHAR = ']'
110	   I = MINDEX(MAPNAM(1,MAP),CHAR)
	   IF (I.NE.0) THEN
	      CALL STR$RIGHT(MAPNAM(1,MAP),MAPNAM(1,MAP),I+1)
	      KETPOS = KETPOS+I
	      GOTO 110
	   ENDIF
	   IF (KETPOS.EQ.0.AND.CHAR.EQ.']') THEN
	      CHAR = '>'
	      GOTO 110
	   ENDIF
	   DOTPOS = KETPOS
120	   I = MINDEX(MAPNAM(1,MAP),'.')
	   IF (I.NE.0) THEN
	      CALL STR$RIGHT(MAPNAM(1,MAP),MAPNAM(1,MAP),I+1)
	      DOTPOS = DOTPOS+I
	      GOTO 120
	   ENDIF
C
C extract the part of the file name between last bracket and '.'
	   CALL STR$POS_EXTR(MAPNAM(1,MAP),IFFNAM(1,MAP),KETPOS+1,DOTPOS)
	   CALL STR$CONCAT(MAPNAM(1,MAP),'LSL$LITES2WORK:',
     &	                  MAPNAM(1,MAP),'WRK')
C
C create output file (by default create file with output
C revision defined by LSL$IFF_OUTPUT_REVISION)
	   IF (SAMOPT) THEN	! use revision level from input file
	      CALL IFFORV( LIB$EXTZV(MAP,1,MAP_ORLEV_B_MAP))
	   ENDIF
	   CALL IFFOPN(OUTLUN,MAPNAM(1,MAP),WORDS,,'Workspace')
	   IF (IERCD.NE.0) THEN
	      CALL NASTY(MSG_IFFOPEN,MAP+1,MAPNAM(1,MAP))
	      GOTO 190
	   ENDIF
C
C get its full name and identification
	   CALL IFFIRV(1)	! input revision level 1, for CB's
	   CALL IFFINQ(MAPNAM(1,MAP))
	   CALL IFFID(FILEID(1,MAP))
	ENDIF
C
C read in the body of the IFF
	IF (USEINP) THEN		! use input file
	   MAPLUN(MAP) = INLUN	! so FLUSH can select it
	ELSE
	   MAPLUN(MAP) = OUTLUN
	ENDIF
C
	CALL INFORM(MSG_RDNGIFF,MAP+1,IFFNAM(1,MAP))
	CALL IFFBDY(MAP)
	FROM_IFFBDY = .FALSE.		! any other calls to FLUSH
					! are normal
C
C close the output
	IF (USEINP) THEN		! use input file
	   MAPLUN(MAP) = 0		! de-allocate LUN
	   MAPCUR = -1		! no current map
	ELSE
	   IF (CLOSIF(MAP)) CALL COLAPS(MSG_IFFCLOSE)
	ENDIF
C
C this map now a valid workspace file (for benefit of ENDSES)
	MAPWRK(MAP) = .TRUE.
C
C no error has occurred
	ERROR = .FALSE.
C
C close input (=output if only using input file)
190	CALL IFFCLO(INLUN)
195	CONTINUE
	USEINP = .FALSE.
	RETURN
	END
