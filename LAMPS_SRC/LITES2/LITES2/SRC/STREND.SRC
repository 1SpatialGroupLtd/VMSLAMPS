C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-12-02 14:47:38.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE STREND(NCOORD,STXY,STZZ,
     &		AUX,TEXT,FIRST,LAST,ENDS,LOOP)
C
***	MODULE	STREND
***	IDENT	02DE94
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author Clarke Brunt	4-July-1984
C
C To render a part of a feature
C The appropriate feature code must be loaded into common FRTCOM
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:ACS/
***	PARAMETER/CMN:AUXDEF/		! layout of auxiliary array
***	PARAMETER/CMN:CONSTS/
***	PARAMETER/CMN:EFNLUN/
***	PARAMETER/CMN:PACK/
C
***	COMMON/CMN:DRAWIN/
***	COMMON/LSL$CMNFRT:FRTACD/
***	COMMON/LSL$CMNFRT:FRTCOM/
***	COMMON/CMN:LABELS/
***	COMMON/CMN:MAPS/
***	COMMON/CMN:OIIH/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:VIEW/
***	COMMON/CMN:WORK_DRAW/
C
C arguments
	INTEGER	NCOORD			! number of coordinates
	REAL	STXY(2,*)		! array of XY coordinates
	REAL	STZZ(2,*)		! array of Z coordinates (2 types)
	REAL	AUX(AUXLEN)		! auxiliary array for circles
					! texts and symbols
	CHARACTER*(*) TEXT		! text to draw
	LOGICAL*1 FIRST			! first bit of feature?
	LOGICAL*1 LAST			! last bit of feature?
	INTEGER*2 ENDS			! IFF ST ENDS word
	LOGICAL*1 LOOP			! true if curve is a closed loop
C
C function called
	LOGICAL		VIEW_GTPLTINFO
C
C w/s
	INTEGER	I			! loops
	LOGICAL*1 LINEAR	! true if line or curve
	LOGICAL*1 STRING	! true if LINEAR or symbol string
	REAL	X,Y			! temporary coords
	REAL	XYTMP(2,200)		! temporary coords
	LOGICAL*1 INTFST		! interpolate first bit?
	LOGICAL*1 PREV_LOOP		! previous setting of LOOP
	SAVE	  PREV_LOOP
	LOGICAL	DRAW			! for curves, true if drawing
	PARAMETER	(DRAW=.TRUE.)
	INTEGER	VC
	EQUIVALENCE(VC,VIEW_CURRENT)
	REAL	SIZE
	REAL	XSCREEN
	REAL	YSCREEN
	REAL	COEFFS(4)		! plane circle lies in
	LOGICAL	COEFFS_DEF
C
C Set up our own graphical type group logicals
C
C Not plotted by FRTLIB and involving several calls to STREND
C (which includes areas)
	LINEAR = FRTLIN.OR.FRTCUR.OR.FRTARE
C
C All types involving several calls to STREND
	STRING = LINEAR.OR.(FRTGT.EQ.STRTYP)
C
C set flag for buffering routines
	RENDERING = .TRUE.
C
C Do anything needed at the start of EVERY feature
	IF (FIRST.OR..NOT.STRING) THEN
cccccc?	   CALL SETCOL			! set colour
	ENDIF
C
C Do anything needed at start of features not plotted by FRTLIB
	IF ((FIRST.AND.LINEAR).OR.FRTARC) THEN
	   CALL SETLIN			! set line pattern and width
C
C ensure buffers empty
	   IF (VIEW_SOLID) THEN
	      CALL VIEW_BFF(0)
	   ELSE
	      CALL STDBFF(0)
 	   ENDIF
C
C check for offset linear feature
	   OFFSETF = .FALSE.		! no offset feature
	   IF (FRTLIN.OR.FRTCUR) THEN
	      STD = .FALSE.		! not started offset yet
	      IF (FRTSIZ.NE.0.0) THEN	! draw an offset feature
	         OFFSETF = .TRUE.
	         OFFDIST = FRTSIZ*SCLFRT
	      ENDIF
	   ENDIF
	ENDIF
C
C Branch according to the graphical type
	GOTO(100,200,200,200,200,100,700,700,700,1000,1100,100),FRTGT
C
C 1 - line
100	CONTINUE
C
C don't bother about standing up flag at present
	REND_SYMB_TEXT = .FALSE.
	INTFST = FIRST		! copt of FIRST for interpolation
C
C does this line segment start invisibly?
	IF (.NOT.(FIRST.OR.FRTARE).AND.(IAND(ENDS,1).EQ.0)) THEN
C
C finish off last bit of previous segment
	   IF (FRTCUR.AND.CUROPT)
     &		CALL INTERP(0,STXY,INTFST,.TRUE.,PREV_LOOP,DRAW,Z,.FALSE.)
	   IF (VIEW_SOLID) THEN
	      CALL VIEW_BFF(2)
	   ELSE
	      CALL STDBFF(2)	! flush out last bit of line
	   ENDIF
C
C reset pattern to start at end of gap (unless FRTCLP, which is FRT flag
C bit 10, and means maintain pattern phase through gaps)
C this does not fail as pattern is set up already
	   IF (.NOT.FRTCLP.AND.
     &			PATOPT.AND.FRTSC.NE.0) CALL PATSET(FRTSC)
	   STD = .FALSE.	! no offset feature
	   INTFST = .TRUE.	! pretend first bit again
	   IF (.NOT.VIEW_SOLID) INVSEG = .TRUE.	! invisble segment (for STDBFF)
	ENDIF
C
C if drawing offset feature, then we have
C to "sort" the last point in the drawing buffer, to give continuity with
C this lot of STs.  It was just perpendicular to the last point before as
C there was no more information at the time.  This is a bit nasty!
C
C simply buffer up the points, offsetting them first if necessary
	IF (OFFSETF) THEN
	   CALL SRTOFF(STXY(1,1))
	   CALL OFF (NCOORD,STXY,XYTMP)
	   IF (FRTCUR.AND.CUROPT) THEN
	      CALL INTERP(NCOORD,XYTMP,INTFST,LAST,LOOP,DRAW,Z,.FALSE.)
	   ELSE
	      CALL STDBFA(NCOORD,XYTMP,Z)
	   ENDIF
	ELSE
	   IF (FRTCUR.AND.CUROPT) THEN
	      CALL INTERP(NCOORD,STXY,INTFST,LAST,LOOP,DRAW,Z,.FALSE.)
	   ELSE
	      IF (VIEW_SOLID) THEN
	         CALL VIEW_BFA(NCOORD,STXY,STZZ)
	      ELSE
	         CALL STDBFA(NCOORD,STXY,Z)
	      ENDIF
	   ENDIF
	ENDIF
	PREV_LOOP = LOOP	! save up for possible use above
	GOTO 9990
C
C 2-5 circles
200	CONTINUE
	COEFFS_DEF = .FALSE.
	CALL STCIRC( AUX , .TRUE. ,COEFFS_DEF,COEFFS)
	GOTO 9990
C
C 7-9 symbols
700	CONTINUE
C
	IF (REND_SYMB_TEXT) THEN		! flag for SRIGPL
	   IF (.NOT.VIEW_GTPLTINFO(STXY(1,1),STXY(2,1),AUX(SIZI),XSCREEN,
     &	                     YSCREEN,SIZE)) THEN
	      CALL SRIPLT(FRTSC,XSCREEN,YSCREEN,SIZE,0.0)
	   ENDIF
	ELSE
	   CALL SRIPLT(FRTSC,STXY(1,1),STXY(2,1),AUX(SIZI),AUX(ANGI))
	ENDIF
	GOTO 9990
C
C 10 - text
1000	CONTINUE
C
C calculate position of bottom left of text
	X = STXY(1,1)+AUX(MINXI)*AUX(COSI)-AUX(MINYI)*AUX(SINI)
	Y = STXY(2,1)+AUX(MINXI)*AUX(SINI)+AUX(MINYI)*AUX(COSI)
C
	IF (REND_SYMB_TEXT) THEN
	   IF (.NOT.VIEW_GTPLTINFO(X,Y,AUX(SIZI),XSCREEN,
     &	                     YSCREEN,SIZE)) THEN
C
	      CALL TRITXT(TEXT,FRTSC,XSCREEN,YSCREEN,SIZE,0.0)
	   ENDIF
	ELSE
	   CALL TRITXT(TEXT,FRTSC,X,Y,AUX(SIZI),AUX(ANGI))
	ENDIF
	GOTO 9990
C
C 11 - symbol string
1100	CONTINUE
	REND_SYMB_TEXT = .TRUE.		! flag for SRIGPL
	DO 1120 I=1,NCOORD
	   IF (VIEW_GTPLTINFO(STXY(1,I),STXY(2,I),AUX(SIZI),XSCREEN,
     &	                     YSCREEN,SIZE)) GOTO 9990
C
	   CALL SRIPLT(FRTSC,XSCREEN,YSCREEN,SIZE,0.0)
C
1120	CONTINUE
C
C conclusion
9990	CONTINUE
C
C Do anything needed at end of features not plotted by FRTLIB
	IF ((LAST.AND.LINEAR).OR.FRTARC) THEN
	   IF (VIEW_SOLID) THEN
	      CALL VIEW_BFF(2)
	   ELSE
	      CALL STDBFF(2)			! final flush
	   ENDIF
	   IF (FRTARE) THEN
	      IF (FILOPT.AND.PATOPT.AND.FRTSC.LT.-1) THEN ! patterned fill
	         CALL FRT_END_FILL
	      ELSE				! ordinary area
	         CALL LSG_END_AREA
	      ENDIF
	   ENDIF
	ENDIF
C
9999	RENDERING = .FALSE.
	RETURN
	END
