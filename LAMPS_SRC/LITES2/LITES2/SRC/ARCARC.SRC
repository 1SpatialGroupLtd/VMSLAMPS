C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-06-10 11:25:46.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE ARCARC(AUX1,AUX2,NUM,POINT1,POINT2,INARC1,INARC2)
C
***	MODULE	ARCARC
***	IDENT	10JN87
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author  Ron Russell
C
C To find the intersection points of two arcs
C
C AUX1 is the auxiliary array containing info about the first arc.
C AUX2 is the auxiliary array containing info about the second arc.
C NUM  returns the NUM of intersection points (if any)
C POINT1 and POINT2 return the intersecion points, if any.
C INARC1 returns the position of the intersection wrt the first arc
C viz: = -2 outside first point
C      = -1 on first point
C      =  0 within 
C      =  1 on second point
C      =  2 outside second point
C INARC2 returns the position of the intersection wrt the second arc
C
C Algorithm taken from "A programmer's geometry", page 27
	IMPLICIT NONE
C
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:CONSTS/
C
***	COMMON/CMN:MASTER/
C
C arguments
	REAL	AUX1(AUXLEN)
	REAL	AUX2(AUXLEN)
	INTEGER	NUM
	REAL	POINT1(2),POINT2(2)
	INTEGER INARC1(2)
	INTEGER INARC2(2)
C
C w/s
	REAL*8	X1,Y1,X2,Y2		! answer
	REAL*8	X0,Y0
	REAL*8	R1SQ,R2SQ
	REAL*8	X12,Y12
	REAL*8	DISTSQ
	REAL*8	ROOT
	REAL*8	DELRSQ,SUMRSQ
	REAL*8	DSTINV
	REAL*8	SCL,XFAC,YFAC
	REAL*8  LTDANG1,LTDANG2
C
C
	LTDANG1 = LINWDTH/AUX1(RADI)
	LTDANG2 = LINWDTH/AUX2(RADI)
C
C assume no intersection
C
	NUM = 0
	POINT1(1) = 0.0
	POINT1(2) = 0.0
	POINT2(1) = 0.0
	POINT2(2) = 0.0
C
C
	R1SQ = DPROD(AUX1(RADI) , AUX1(RADI))
	R2SQ = DPROD(AUX2(RADI) , AUX2(RADI))
	X12 = DBLE(AUX2(XCENI)) - DBLE(AUX1(XCENI))
	Y12 = DBLE(AUX2(YCENI)) - DBLE(AUX1(YCENI))
C
C if arcs have same centre, they cannot intersect
C
	IF (ABS(X12).LT.LINWDTH.AND.ABS(Y12).LT.LINWDTH) THEN
	   GOTO 999
	ENDIF
C
C degenerate arcs do not cut anything
C
	IF (AUX1(RADI).LE.0.0.OR.AUX2(RADI).LE.0.0) THEN
	   GOTO 999
	ENDIF
C
	DISTSQ = X12*X12 + Y12*Y12
	DELRSQ = R2SQ - R1SQ
	SUMRSQ = R1SQ + R2SQ
	ROOT = 2.0 * SUMRSQ * DISTSQ - DISTSQ*DISTSQ - DELRSQ*DELRSQ
C
C check for any intersection
C
	IF (ROOT.LT.-LINWDTH) GOTO 999	! no intersection
C
	DSTINV = 0.5/DISTSQ
	SCL = 0.5 - DELRSQ*DSTINV
	X0 = DBLE(AUX1(XCENI)) + X12*SCL
	Y0 = DBLE(AUX1(YCENI)) + Y12*SCL
C
C check for tangents
C
	IF (ROOT.LT.LINWDTH) THEN
	   NUM = 1
	   X1 = X0
	   Y1 = Y0
	   X2 = X0
	   Y2 = Y0
	ELSE
	   ROOT = DSTINV * SQRT(ROOT)
	   NUM = 2
	   XFAC = X12*ROOT
	   YFAC = Y12*ROOT
	   X1 = X0 - YFAC
	   Y1 = Y0 + XFAC
	   X2 = X0 + YFAC
	   Y2 = Y0 - XFAC
	ENDIF
C
C output results
C
	IF (NUM.GT.0) THEN
C
C check if points are in arcs
C
C first arc
C
C first point
C
	   CALL PTINARC(AUX1,X1,Y1,INARC1(1),LTDANG1)
C
C second point
C
	   IF (NUM.EQ.1) THEN
	      INARC1(2) = INARC1(1)
	   ELSE
	      CALL PTINARC(AUX1,X2,Y2,INARC1(2),LTDANG1)
	   ENDIF
C
C second arc
C
C first point
C
	   CALL PTINARC(AUX2,X1,Y1,INARC2(1),LTDANG2)
C
C second point
C
	   IF (NUM.EQ.1) THEN
	      INARC2(2) = INARC2(1)
	   ELSE
	      CALL PTINARC(AUX2,X2,Y2,INARC2(2),LTDANG2)
	   ENDIF
C
C return intersection points
C
	   IF (NUM.EQ.1) THEN
	      POINT1(1) = X1
	      POINT1(2) = Y1
	      POINT2(1) = X1
	      POINT2(2) = Y1
	   ELSE
	      POINT1(1) = X1
	      POINT1(2) = Y1
	      POINT2(1) = X2
	      POINT2(2) = Y2
	   ENDIF
	ENDIF
C
999	RETURN
	END
