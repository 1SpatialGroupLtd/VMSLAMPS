	SUBROUTINE OFFSET(PREOFF,NXTSEG,FIRST,LAST,GOTOFF)
C
***	IDENT	28FE89
***	MODULE	OFFSET
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RJH	03-MAY-1985
C
C Description
C
C    This subroutine is part of LITES2, and its purpose is to calculate
C the offset to a single vertex or end of a feature.
C    Arguments received are the line segment following the current
C point, and flags indicating whether the current point is the first or
C last point of the new feature, together with a flag indicating whether
C or not a segment has yet been successfully offset. The previous offset
C segment is also received, and the routine uses this same argument to 
C return the offset segment corresponding to the line segment it 
C receives for the original feature. The offset flag becomes set once a 
C segment has been successfully offset or the last point of the original
C feature has been reached.
C    Note that the first and last points of the feature are treated as
C special cases.
C
	IMPLICIT NONE
C
C Included Parameter Files
C
	INCLUDE 'LSL$CMNIFF:CB.STR'
***     PARAMETER/CMN:MOANMESS/		! moan constants
C
C Common Blocks
C
***	COMMON/CMN:CSTRCT/
***     COMMON/CMN:GLOBAL/		! global variables
***	COMMON/CMN:OPTION/
***	COMMON/CMN:VARIAT/		! variations for CHANGE
C
C Arguments
C
	REAL		PREOFF(2,2)	! previous offset segment
	REAL		NXTSEG(2,2)	! next segment
	LOGICAL*1	FIRST		! is this the first point ?
	LOGICAL*1	LAST		! is this the last point ?
	LOGICAL*1	GOTOFF		! got an offset segment ?
C
C Functions called
C
	LOGICAL		OFFSEG		! finds offset for a segment
	LOGICAL		INTSCT		! intersects 2 lines
C
C Local Variables
C
	INTEGER*4	INPRE		! intersect on previous offset
	INTEGER*4	INNXT		! intersect on next offset
	REAL		NXTOFF(2,2)	! next offset segment
	REAL		NEWPT(2)	! offset point
	LOGICAL		RETOFF		! return new offset segment ?
C
C Initialisation
C
	RETOFF = .TRUE.
C
C For the last point, use the second end of the previous offset. 
C However, if the line consists of only one point, use that and pretend 
C that there is an offset. This is necessary because the new feature has
C already been started and has to be finished.
C
	IF (LAST) THEN
	   IF (FIRST .OR. (.NOT. GOTOFF)) THEN	! one point line
	      NEWPT(1) = NXTSEG(1,1)
	      NEWPT(2) = NXTSEG(2,1)
	      GOTOFF = .TRUE.
	   ELSE					! normal case
	      NEWPT(1) = PREOFF(1,2)
	      NEWPT(2) = PREOFF(2,2)
	   ENDIF
	   RETOFF = .FALSE.
	ELSE
C
C Calculate the new offset segment; if it fails, use the end of the
C previous offset segment for the new point (except for the first
C point or in the case where an offset segment has not yet been found,
C when the original point is used instead).
C
	   IF (OFFSEG(OFFDIS,NXTSEG,NXTOFF)) THEN
	      IF (.NOT.ZOPT) CALL MOAN(MSG_VERTSAME)
	      IF (FIRST .OR. (.NOT. GOTOFF)) THEN
		 CALL LEARN(MSG_USINGORIG)
	         NEWPT(1) = NXTSEG(1,1)
	         NEWPT(2) = NXTSEG(2,1)
	      ELSE				! normal case
		 CALL LEARN(MSG_USINGPREV)
	         NEWPT(1) = PREOFF(1,2)
	         NEWPT(2) = PREOFF(2,2)
	      ENDIF
	      RETOFF = .FALSE.
	   ELSE
C
C For the first point, simply use the start of the new offset segment.
C Otherwise, intersect the previous and new offset segments. If the
C intersection fails, i.e. the two offset lines are parallel, the end
C of the previous offset segment is used.
C
	      IF (FIRST .OR. (.NOT. GOTOFF)) THEN
		 NEWPT(1) = NXTOFF(1,1)
		 NEWPT(2) = NXTOFF(2,1)
		 GOTOFF = .TRUE.
	      ELSE IF (INTSCT(PREOFF,NXTOFF,NEWPT,INPRE,INNXT)) THEN
		 NEWPT(1) = PREOFF(1,2)
		 NEWPT(2) = PREOFF(2,2)
	      ENDIF
	   ENDIF
	ENDIF
C
C Add the new point to the current output item; this is always done to
C avoid ending up with no points in the IFF file.
C
C the point attributes to use have been set in CSTCRT.CMN by OFFALL
C
	CALL ADCORD(NEWPT,CONATT,COATTC,COATTV)
C
C New offset segment is returned as the previous one
C
	IF (RETOFF) THEN
	   PREOFF(1,1) = NXTOFF(1,1)
	   PREOFF(2,1) = NXTOFF(2,1)
	   PREOFF(1,2) = NXTOFF(1,2)
	   PREOFF(2,2) = NXTOFF(2,2)
	ENDIF
C
C Return
C
	RETURN
	END
