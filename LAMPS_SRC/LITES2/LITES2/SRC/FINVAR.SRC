C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-01-29 12:18:46.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE FINVAR(PRMSYS,EXIST,ARG,SUB)
C
***	IDENT	29JA92
***	MODULE	FINVAR
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					CCB	 7-Jan-1986
C
C Description
C
C    This function is part of the LITES2 Command Interface, and its
C purpose is to read a variable name from the current buffer.
C    The function returns the following values in the common block :-
C 1) the variable number
C 2) the variable name in full
C 3) the number of significant characters in the variable name
C 4) the address contaning the value
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:CHARS/
***	PARAMETER/CMN:MOANMESS/
***	PARAMETER/LSL$CMNLSL:LSLLIBMSG/
***	PARAMETER/LSL$CMNLSL:READSTR/
C
***     COMMON/LSL$CMNLSL:CMDCOM/	! CMDLIB command handling
***	COMMON/LSL$CMNLSL:EXCEPTION/
***     COMMON/CMN:GLOBAL/
***	COMMON/CMN:OPTION/
***	COMMON/LSL$CMNLSL:TXTC/
***     COMMON/CMN:VARIABLE/
C
C Arguments
	LOGICAL*1	PRMSYS		! permit system variable
	LOGICAL*1	EXIST		! variable must exist
	LOGICAL*1	ARG		! subscript must be present
	LOGICAL*1	SUB		! substituting
C
C Functions called
	LOGICAL		RDCHS,RDCH
	INTEGER*4	CPYSTR		! copies character strings
	INTEGER*4	RDCOMM		! CMDLIB - reads a command
	INTEGER		EXPAND
	LOGICAL		RDLONG
	LOGICAL		CHKDUPLCMD
	INTEGER		READSTR
	BYTE		GET_VARBYTE
	INTEGER*2	GET_VARWORD
	INTEGER*4	GET_VARLONG
C
	EXTERNAL	SYSVAR_CMD_TABLE
C
C Workspace
	INTEGER*2	SAVDP
	BYTE		DOL
	BYTE		CH
	LOGICAL*1	DEFSYS		! defaulting to system?
	LOGICAL*1	DEFSYS_SAV
	LOGICAL*1	FIRST		! first time round
	INTEGER		LENGTH,ELEM	! for arrays
	INTEGER		DVARN_SAV	! found variable number
	CHARACTER*(FSV2) DVAR_SAV	! variable name
	INTEGER		DVARL_SAV	! variable name length
	REAL*8		R		! unused real
	INTEGER		TYPE		! variable type
	CHARACTER*(FSV)	NAME		! duplicated command name
	INTEGER		NAME_LEN	! length of duplicated name
C
	DVARN = 0			! no variable found
	GOT_VARARG = .FALSE.		! no integer arg (subscript)
	GOT_VARARGR = .FALSE.		! no real arg
	DEFSYS = .FALSE.		! not yet defaulting to system
	FIRST = .TRUE.			! first time round
C
C Check for leading $, meaning system variable
10	IF (RDCHS(DOL)) GOTO 985
	IF (DOL.EQ.'$') GOTO 400	! try for system variable
	DOL = 0				! for use in MOAN below
	CALL BSCH
	CALL DCPSAV(SAVDP)		! remember position
C
C check command table for duplicates, if this has not been done already
C (only when not adding to table)
	IF (EXIST.AND.CHCK_VARTAB) THEN
	   IF (CHKDUPLCMD(%VAL(VARTAB_ADDRESS),NAME,NAME_LEN)) THEN
C
C moan first time error has been found, other wise just INFORM and continue
	      IF (CHCK_VARTAB.LT.0) THEN
	         CALL MOAN(MSG_DUPLNAMES,'Variable',NAME(1:NAME_LEN),
     &	                     'user defined variables')
	         CALL LEARN(MSG_USECHECK,'variables')
	         GOTO 999
	      ELSE
	         CALL INFORM(MSG_DUPLNAMES,'Variable',NAME(1:NAME_LEN),
     &	                     'user defined variables')
	      ENDIF	     
	      CHCK_VARTAB = 1		! don't moan next time
	   ELSE
	      CHCK_VARTAB = 0
	   ENDIF
	ENDIF
C
C Read variable name from user variable table - if not adding variables fast
	IF (EXIST.OR.CHKOPT) THEN
	   DVARN = RDCOMM(%VAL(VARTAB_ADDRESS))
C
	   IF (DVARN.GT.0) THEN		! name found
	      DVARL = CPYSTR(CMDFST,DVAR)	! copy name
	      IF (.NOT.EXIST) CALL MOAN(MSG_VARDECLARED,DVAR(:DVARL))
	      IF (.NOT.(FIRST.AND.SUB.AND.ARGMSG)) GOTO 510! check argument
C
C on first pass, substituting, and argument is missing, so there might
C be another quoted variable as subscript
	      IF (RDCH(CH)) GOTO 510
	      IF (CH.NE.QOT) THEN
	         CALL BSCH
	         GOTO 510
	      ENDIF
C
C got the quote, so save context and try second pass
	      DEFSYS_SAV = DEFSYS
	      DVARN_SAV = DVARN
	      DVARL_SAV = DVARL
	      DVAR_SAV = DVAR
	      FIRST = .FALSE.	! second pass
	      GOTO 10
	   ENDIF
C
C name not found, but if error just unexpected command name, then
C try as a system variable, in case the dollar was missing
	   DVARN = 0
	   IF (ERRNUM .NE. LSL__UNEXPCMD) GOTO 990
	   IF (PRMSYS) THEN		! try as system instead
	      CALL DCPSET(SAVDP)		! restore position
	      DEFSYS = .TRUE.
	      GOTO 500
	   ENDIF
	ENDIF
	GOTO 980
C
C Just had a $, so try for system variable
400	IF (.NOT.PRMSYS) THEN
	   CALL MOAN(MSG_NOSYSVAR)
	   GOTO 999
	ENDIF
C	   
	IF (RDCH(CH)) GOTO 985		! nothing else?
	IF (CH.EQ.SPACE.OR.CH.EQ.TAB) GOTO 985	! not sig.
	CALL BSCH
C
C Try for system variable
500	DVARN = RDCOMM(SYSVAR_CMD_TABLE)	
	IF (DVARN.LE.0) THEN
C
C error, but if on first pass, substituting, a command name was found,
C and the error was an unexpected quote (while trying to read a
C compulsory argument), then save context and try for a subscript
	   IF (FIRST.AND.SUB.AND.CMDNUM.NE.0) THEN
	      IF (ERRNUM.EQ.LSL__UNEXPCH.AND.UNXCHR.EQ.QOT) THEN
	         DEFSYS_SAV = DEFSYS
C
C CMDNUM contains negative command number found - we save it still
C negative in DVARN_SAV, so that when DVARN is restored, it will be
C negative as required for a system variable
	         DVARN_SAV = CMDNUM
	         DVAR_SAV(1:1) = '$'
	         DVARL_SAV = CPYSTR(CMDFST,DVAR_SAV(2:))+1
	         FIRST = .FALSE.	! second pass
	         GOTO 10
	      ENDIF
	   ENDIF
	   GOTO 970	! not found
	ENDIF
	DVARN = -DVARN		! mark as system
	DVAR(1:1) = '$'		! put $ on start
	DVARL = CPYSTR(CMDFST,DVAR(2:))+1	! copy name
C
C integer argument?
510	IF (CMDICT.GT.0) THEN
	   GOT_VARARG = .TRUE.
	   VARARG = INTARG(1)	! copy argument
	   IF (DVARL.LT.LEN(DVAR))
     &		DVARL = DVARL+EXPAND('%WS%^L%N',DVAR(DVARL+1:),VARARG)
	ENDIF
C
C real argument?
	IF (CMDRCT.GT.0) THEN
	   GOT_VARARGR = .TRUE.
	   VARARGR = REALAR(1)	! copy argument
	   IF (DVARL.LT.LEN(DVAR))
     &		DVARL = DVARL+EXPAND('%WS %G0.8',DVAR(DVARL+1:),VARARGR)
	ENDIF
C
	IF (DEFSYS) CALL INFORM(MSG_SYSDOLLAR,DVAR(:DVARL))
	IF (GOT_VARARG.AND..NOT.ARG) THEN
	   CALL MOAN(MSG_ARGNOTPERMIT,'variable',DVAR(:DVARL))
	   GOTO 999
	ENDIF
	IF (DVARN.GT.0) THEN			! user variable
	   IF (ARGMSG.AND.ARG) THEN
	      CALL MOAN(MSG_ARGREQUIRED,DVAR(:DVARL))
	      GOTO 999
	   ENDIF
CCCC	   VARADR = %LOC(VARLONG(1,DVARN))	
	   VARADR = VAR_DESC_ADDRESS + (DVARN - 1) * 8	! address of value
	   IF (GET_VARBYTE(%VAL(VAR_DESC_ADDRESS),3,DVARN).LE.2.AND.
     &	       GET_VARWORD(%VAL(VAR_DESC_ADDRESS),1,DVARN).EQ.0)
     &		       VARADR = VARADR+4
	   IF (GOT_VARARG) THEN			! array element
	      ELEM = GET_VARLONG(%VAL(VAR_DESC_ADDRESS),1,DVARN).AND.'FFFF'X
	      IF (VARARG.LE.0.OR.VARARG.GT.ELEM) THEN
	         CALL MOAN(MSG_VARGRNG,DVAR(:DVARL),1,ELEM)
	         GOTO 999
	      ENDIF
	      IF (GET_VARBYTE(%VAL(VAR_DESC_ADDRESS),3,DVARN).LE.2) THEN
	         LENGTH = 4		! integers and reals
	      ELSE
	         LENGTH = 8		! double and char array
	      ENDIF
	      VARADR = GET_VARLONG(%VAL(VAR_DESC_ADDRESS),2,DVARN) + 
     &	                        (VARARG-1)*LENGTH
	   ELSEIF (GET_VARBYTE(%VAL(VAR_DESC_ADDRESS),3,DVARN).EQ.4) THEN
C
C double variable
	      VARADR = GET_VARLONG(%VAL(VAR_DESC_ADDRESS),2,DVARN)
	   ENDIF
	ENDIF
C
C If not on first pass, then looking at a possible subscript
	IF (.NOT.FIRST) THEN		! got subscript var
C
C get value of subscript variable
	   TXTPTR = 255			! use TXTDSC as dummy
	   CALL VALVAR(TYPE,INTARG(1),R,TXTDSC,LENGTH)
	   IF (MOANED) GOTO 999
	   IF (TYPE.NE.1) THEN		! not integer type
	      CALL MOAN(MSG_SUBINT,DVAR(:DVARL))
	      GOTO 999
	   ENDIF
	   CMDICT = 1		! pretend integer arg in INTARG
	   DEFSYS = DEFSYS_SAV	! restore context
	   DVARN = DVARN_SAV
	   DVARL = DVARL_SAV
	   DVAR = DVAR_SAV
	   FIRST = .TRUE.	! cancel second pass
	   IF (RDCH(CH)) GOTO 510	! gobble trailing quote
	   IF (CH.NE.QOT) CALL BSCH
	   GOTO 510
	ENDIF
	GOTO 999
C
970	DVARN = 0
	IF (ERRNUM.NE.LSL__UNEXPCMD) GOTO 990
C
C name does not exist in required table(s)
C if not required to exist (DECLARE command) then check for valid
C array declarator
980	IF (EXIST) THEN
	   CALL MOAN(MSG_VARNOTEXIST,DOL,CMDNST)
	ELSE
	   IF (CHKOPT) THEN		! have what was typed in common
	      DVARL = CPYSTR(CMDNST,DVAR)	! copy name as typed
	   ELSE
	      DVARL = READSTR(DVAR,0,ON_CMD,.TRUE.)
	   ENDIF
	   IF (.NOT.RDLONG(VARARG)) THEN
	      IF (VARARG.LE.0.OR.VARARG.GT.65535) THEN
	         CALL MOAN(MSG_VARGRNG,DVAR(:DVARL),1,65535)
	         GOTO 999
	      ENDIF
	      GOT_VARARG = .TRUE.
	   ENDIF
	ENDIF
	GOTO 999
C
C end of line?
985	CALL MOAN(MSG_VARNOTFOUND)
	GOTO 999
C
990	CALL ERRCMD('variable')
C
999	RETURN
	END
