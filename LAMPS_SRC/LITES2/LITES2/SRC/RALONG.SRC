C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-08-24 10:46:40.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE RALONG
C
***	MODULE	RALONG
***	IDENT	24AU94
C
	IMPLICIT NONE
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author  Clarke Brunt
C
C Coded						CCB	24-DEC-1984
C
C LITES2 routine to force the cursor position onto any cursor constraint
C Called from the main loop.
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:CONSTS/
***	PARAMETER/CMN:PACK/
C
***	COMMON/LSL$CMNFRT:FRTCOM.CMN/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:STRIKE/
C
C w/s
	INTEGER		SAVRT		! preserved 'vertex at start'
	INTEGER		V1, V2, ITERN
	REAL		X1,Y1, X2,Y2	! line segment coordinates
	REAL		Z1,Z2
	INTEGER		Z1I,Z2I
	EQUIVALENCE	(Z1,Z1I),(Z2,Z2I)
	REAL		DX, DY		! vector components
	REAL		DENOM
	REAL		T
	REAL		ANG,XANG
	LOGICAL		MOVE_Z
	REAL		LTD		! limit for comparisons
	PARAMETER	(LTD = 1.0E-6)
C
C V1, V2 are the end vertices of the 'current' line segment
C ITERN=0 initially
C      >0 if last time round we went over the 'top' of a line segment
C      <0   . . .  'bottom'
C
C If FNDMDE=1 then rolling along the found object
C
	IF (CSSTIL.OR..NOT.ROLING) GOTO 999	! nothing to do
C
	IF (FNDMDE.NE.0) GOTO 5		! roll along found object
C
	IF (.NOT.SCSARC) THEN		! roll along line
	   X1 = SCSTXY(1,1)
	   Y1 = SCSTXY(2,1)
	   X2 = SCSTXY(1,2)
	   Y2 = SCSTXY(2,2)
	   MOVE_Z = .FALSE.
	   GOTO 30
	ENDIF
C
C roll along arc
	IF (CSXY(1).EQ.SCSAUX(XCENI).AND.CSXY(2).EQ.SCSAUX(YCENI) .OR.
     &		SCSAUX(TOTI).EQ.0.0) THEN
C
C on centre of circle or arc is just a point - go to start point
	   ANG = SCSAUX(STAI)
	ELSE
	   ANG = ATAN2(CSXY(2)-SCSAUX(YCENI),CSXY(1)-SCSAUX(XCENI))
	ENDIF
C
C assume that constraint is always a full circle -
C will need changing if it is ever an arc
C move cursor onto arc
	CSXY(1) = SCSAUX(XCENI) + COS(ANG)*SCSAUX(RADI)
	CSXY(2) = SCSAUX(YCENI) + SIN(ANG)*SCSAUX(RADI)
	MOVE_Z = .FALSE.
	GOTO 900
C
C rolling along the found object
C
C preserve starting position
5	SAVRT = FOVRT
C
C branch off when dealing with circle arcs
	IF (FOPAK(PAKGT).GE.CLOTYP.AND.FOPAK(PAKGT).LE.FULTYP) GOTO 500
C
	ITERN = 0			! not off end of segment yet
C
10	V1 = FOVRT-FOVO			! first vertex
	IF (FOVRT.EQ.FOLST) V1 = V1-1	! at end, so back up one
	V2 = V1+1			! second vertex
C
C get coordinates of current span
20	X1 = FOXY(1,V1)
	Y1 = FOXY(2,V1)
	X2 = FOXY(1,V2)
	Y2 = FOXY(2,V2)
	MOVE_Z = ZOPT.AND.FO_Z_COL.GT.0
	IF (MOVE_Z) MOVE_Z = FOATTV(FO_Z_COL,V1).NE.IFF_ABSENT.OR.
     &	          FOATTV(FO_Z_COL,V2).NE.IFF_ABSENT
C
30	DX = X2-X1
	DY = Y2-Y1
	DENOM = DX*DX + DY*DY
	IF (DENOM.NE.0.0) THEN
C
C compute fractional distance of point 1 to point 2 for foot of perp.
	   T = ((CSXY(1)-X1)*DX + (CSXY(2)-Y1)*DY)/DENOM
	ELSE
C
C got a vertical line (duplicated point)
	   IF (ITERN.GE.0) THEN
	      T = 1.1
	   ELSE
	      T = -1.0
	   ENDIF
	ENDIF
C
	IF (FNDMDE.NE.1) GOTO 140
C
C check if outside line segment
	IF (T.GE.1.0) THEN		! off top end
	   FOVRT = FOVO+V2
	   FONVRT = .TRUE.
	   IF (ITERN.LT.0) GOTO 160	! impasse
	   IF (V2.EQ.FOTOP) THEN	! not in memory
	      IF (FOVRT.EQ.FOLST) GOTO 160	! end of feature
	      CALL HAULIN(0)		! get more vertices
	      SAVRT = FOVRT		! new saved position
	      GOTO 10			! repeat
	   ENDIF
	   ITERN = 1			! moving forwards
	   V1 = V2			! step on
	   V2 = V2+1
	   GOTO 20			! repeat
	ENDIF
C
	IF (T.LE.0.0) THEN		! off bottom end
	   FOVRT = FOVO+V1
	   FONVRT = .TRUE.
	   IF (ITERN.GT.0) GOTO 180	! impasse
	   IF (V1.EQ.1) THEN		! not in memory
	      IF (FOVO.EQ.0) GOTO 180	! start of feature
	      CALL HAULIN(0)		! get more vertices
	      SAVRT = FOVRT		! new saved position
	      GOTO 10			! repeat
	   ENDIF
	   ITERN = -1			! moving backwards
	   V2 = V1			! step back
	   V1 = V1-1
	   GOTO 20			! repeat
	ENDIF
C
C so we are within line segment
	FONVRT = .FALSE.		! not on a vertex
	FOVRT = FOVO+V1
140	CSXY(1) = X1+T*DX
	CSXY(2) = Y1+T*DY
	IF (MOVE_Z) THEN
C
C interpolate Z if there are two Z values, otherwise use the value
C of the point that is there
	   Z1I = FOATTV(FO_Z_COL,V1)
	   Z2I = FOATTV(FO_Z_COL,V2)
	   IF (Z1I.NE.IFF_ABSENT.AND.Z2I.NE.IFF_ABSENT) THEN
	      CSXY(3) = Z1 + T*(Z2 - Z1)
	   ELSEIF (Z1I.EQ.IFF_ABSENT) THEN
	      CSXY(3) = Z2
	   ELSE
	      CSXY(3) = Z1
	   ENDIF
	ENDIF
	GOTO 900
C
C done - we've got 'stuck' at the 'top' of a line segment
160	CSXY(1) = X2
	CSXY(2) = Y2
	MOVE_Z = ZOPT.AND.FO_Z_COL.GT.0
	IF (MOVE_Z) MOVE_Z = FOATTV(FO_Z_COL,V2).NE.IFF_ABSENT
	IF (MOVE_Z) THEN
	   Z2I = FOATTV(FO_Z_COL,V2)
	   CSXY(3) = Z2
	ENDIF
	GOTO 900
C
C done - we've got stuck at the 'bottom' of a line segment
180	CSXY(1) = X1
	CSXY(2) = Y1
	MOVE_Z = ZOPT.AND.FO_Z_COL.GE.0
	IF (MOVE_Z) MOVE_Z = FOATTV(FO_Z_COL,V1).NE.IFF_ABSENT
	IF (MOVE_Z) THEN
	   Z1I = FOATTV(FO_Z_COL,V1)
	   CSXY(3) = Z1
	ENDIF
	GOTO 900
C
C********************************************************************
C
C circle arcs (only when FNDMDE is 1)
500	CONTINUE
	IF (CSXY(1).EQ.FOAUX(XCENI).AND.CSXY(2).EQ.FOAUX(YCENI)) THEN
C
C on centre of circle - go somewhere sensible
	   ANG = FOAUX(STAI) + FOAUX(TOTI)*0.5
	ELSE
	   ANG = ATAN2(CSXY(2)-FOAUX(YCENI),CSXY(1)-FOAUX(XCENI))
	   IF (ANG.LT.0.0) ANG = ANG + TWOPI
	   XANG = ANG - FOAUX(STAI)
	   IF (FOAUX(TOTI).GE.0.0) THEN		! anticlockwise
	      IF (XANG.LT.0.0) XANG = XANG + TWOPI
	      IF (XANG.GE.(FOAUX(TOTI)-LTD)) THEN	! outside arc
C
C jump to closer end
	         IF (XANG.GE.(FOAUX(TOTI)+(TWOPI-FOAUX(TOTI))*0.5)) THEN
	            ANG = FOAUX(STAI)
	            FOSTRT = .TRUE.
	            FOEND  = .FALSE.
	         ELSE
	            ANG = FOAUX(STAI) + FOAUX(TOTI)
	            FOEND = .TRUE.
	            FOSTRT = .FALSE.
	         ENDIF
	      ENDIF
	   ELSE					! clockwise
	      IF (XANG.GT.0.0) XANG = XANG - TWOPI
	      IF (XANG.LE.(FOAUX(TOTI)+LTD)) THEN
C
C jump to closer end
	         IF (XANG.LE.(FOAUX(TOTI)-(TWOPI+FOAUX(TOTI))*0.5)) THEN
	            ANG = FOAUX(STAI)
	            FOSTRT = .TRUE.
	            FOEND  = .FALSE.
	         ELSE
	            ANG = FOAUX(STAI) + FOAUX(TOTI)
	            FOEND = .TRUE.
	            FOSTRT = .FALSE.
	         ENDIF
	      ENDIF
	   ENDIF
	ENDIF
C
C move cursor onto arc
	CSXY(1) = FOAUX(XCENI) + COS(ANG)*FOAUX(RADI)
	CSXY(2) = FOAUX(YCENI) + SIN(ANG)*FOAUX(RADI)
	IF (ZOPT.AND.FOC_DEFINED) THEN
	   CALL PLANE_INTERPL(CSXY,FOCOEFFS,CSXY(3))
	   MOVE_Z = .TRUE.
	ELSE
	   MOVE_Z = .FALSE.
	ENDIF
	GOTO 900
C
C********************************************************************
C 
C common exit
900	IF (FNDMDE.EQ.1) THEN
	   FOCXY(1) = CSXY(1)		! position on found object
	   FOCXY(2) = CSXY(2)
	   IF (MOVE_Z) THEN
	      FOCXY(3) = CSXY(3)
	   ELSE
	      CALL PUTLNG(IFF_ABSENT,FOCXY(3))
	   ENDIF
	   FONLIN = .TRUE.			! now on line
	   IF (FOVRT.NE.SAVRT) CALL HAULIN(0)	! adjust vertices
	ENDIF
999	RETURN
	END
