C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-10-11 16:26:02.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION BASINT(VERTEX,LSTVRT,TOP,XY,BASLIN,POINT)
C
***	MODULE	BASINT
***	IDENT	11OC89
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    27-Jan-1987
C
C calculates the intersection of a line defined by the last two
C points of a feature and the given baseline
C returns true if no intersection is found
C
	IMPLICIT NONE
C
C Arguments
C
	INTEGER		VERTEX		! current vertex
	INTEGER		LSTVRT		! last vertex number of a featur
	INTEGER		TOP		! last used index of XY (in case
					! whole feature is not in it)
	REAL		XY(2,TOP)	! coordinates
	REAL		BASLIN(2,2)	! base line to intersect with
	REAL		POINT(2)	! intersection point 
C
***	COMMON/CMN:EDGE/
C
C Local Varaiables
	INTEGER		INDEX(2)	! index of two end points
	REAL*8	DX1,DY1,DX2,DY2		! differences
	REAL*8	DX12,DY12
	REAL*8	DET
	REAL*8	S1,S2
	REAL*8	LTD1,LTD2		! small numbers for each line
	REAL*8	LTD			! a small number
	PARAMETER (LTD=1E-5)
C
C assume unsuccessfull
C
	BASINT = .TRUE.
C
	IF (VERTEX .NE. 1.AND.VERTEX.NE.LSTVRT) THEN	!not on an end
	   GOTO 1000
	ENDIF
C
C get the indices of the required two points
C
	IF (VERTEX .EQ. 1) THEN
	   INDEX(1) = 2
	   INDEX(2) = 1
	ELSE
	   INDEX(1) = TOP -1
	   INDEX(2) = TOP 
	ENDIF
C
C calculate the differences
	DX1 = DBLE(BASLIN(1,2))    - DBLE(BASLIN(1,1))
	DY1 = DBLE(BASLIN(2,2))    - DBLE(BASLIN(2,1))
	DX2 = DBLE(XY(1,INDEX(2))) - DBLE(XY(1,INDEX(1)))
	DY2 = DBLE(XY(2,INDEX(2))) - DBLE(XY(2,INDEX(1)))
C
C and an approximation to the line lengths (save doing SQRT)
	S1 = MAX(ABS(DX1),ABS(DY1))
	S2 = MAX(ABS(DX2),ABS(DY2))
C
C calculate cross product (determinant)
	DET = DX1*DY2-DY1*DX2
C
C if too small, then the lines are parallel
	IF (ABS(DET).EQ.0.0) GOTO 1000	! prevent zero-divide
	IF (ABS(DET)/(S1*S2).LT.LTD) GOTO 1000
C
C get approximations to zero for each line
	LTD1 = LTD/S1
	LTD2 = LTD/S2
C
C calculate fractional distances along vectors of the intersection point
	DX12 = DBLE(XY(1,INDEX(1))) - DBLE(BASLIN(1,1))
	DY12 = DBLE(XY(2,INDEX(1))) - DBLE(BASLIN(2,1))
	S1 = (DY2*DX12-DX2*DY12)/DET
	S2 = (DY1*DX12-DX1*DY12)/DET
C
C intersect outside baseline
	IF (S1.LT.-LTD1.OR.S1.GT.(1.0+LTD1)) GOTO 1000 
C
C segment points away from baseline
	IF (S2.LT.-LTD2) GOTO 1000
C
C calculate extend distance using line segment
	DX2 = DX2 * (S2 - 1)
	DY2 = DY2 * (S2 - 1)
C
C allow line to be extended to 3 times the current edge tolerance
	IF (SQRT(DX2*DX2+DY2*DY2) .GT. 3*EDGTOL) GOTO 1000 
C
C and calculate actual intersection using base line
	DX1=DX1*S1
	DY1=DY1*S1
	POINT(1) = DBLE(BASLIN(1,1)) + DX1
	POINT(2) = DBLE(BASLIN(2,1)) + DY1
C
	BASINT = .FALSE.
C
1000	RETURN
	END
