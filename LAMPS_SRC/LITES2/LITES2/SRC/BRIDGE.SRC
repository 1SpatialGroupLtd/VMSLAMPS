C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-12-07 14:01:18.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE BRIDGE(SWAP)
C
***	IDENT	07DE94
***	MODULE	BRIDGE
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Written					CCB	22-NOV-1984
C
C	LITES2 cartographic editor routine to perform BRIDGE
C	operation.
C	Replace the part of the object in hand delimited by IMVRT
C	(marked vertex) and IHVRT (current vertex) by the current
C	construction, creating a pre-deleted feature for the
C	removed vertices.
C	The marked position is 'before' the current position within
C	the feature (arranged for us by CHPART).
C
C	NB for BRIDGE, the first point is originally IHVRT, and the
C	second is IMVRT. If these have been swapped by CHPART to get
C	IMVRT 'before' IHVRT, then our bridge was actually forwards,
C	and the construction need not be reversed.
C	(c.f. a part change, in which the first point is marked, and
C	the second is current)
C
        IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:EFNLUN/
***	PARAMETER/CMN:END/
***     PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:PACK/
***     PARAMETER/CMN:START/
C
***	COMMON/CMN:CSTRCT/
***	COMMON/CMN:DEFINE/
***	COMMON/LSL$CMNIFF:IFFHAN/
***	COMMON/CMN:MAPS/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:OIIH/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:STRIKE/
C
C argument
	LOGICAL	SWAP	! if false, construction to be reversed
C
C functions called
	LOGICAL	STRTFT			! start new feature
	INTEGER	GENNF			! generate new FSN (NF)
C
C local variables
	INTEGER	I
	LOGICAL		TMPFTR		! temporary feature used?
	INTEGER		OPER
	LOGICAL		CLOSE		! doing CLOSE with BRIDGE
C
	OPER = DEFINITION(P_BREAK)
	IF (OPER.EQ.0) OPER = DEFINITION(P_OTHER)
C
C if any of the construction has been ADCORDed, then we need to end
C the constructed temporary feature
	TMPFTR = .FALSE.		! no temporary feature
	IF (.NOT.CONFST) THEN
	   TMPFTR = .TRUE.		! temporary feature
C
C end construction without adding any more points
C NB remember whether points in buffer or not (CONFST reset)
	   CALL STRTER(START_END,START_VISIBLE)
C
C Don't use ENDFT here, since we don't want the temporary feature
C drawn, or a segment created
	   CALL FLUSH(2)
C
C make a copy of COIPAK for later use (use FOPAK as a temporary)
	   CALL CPYPAK(PAKLEN,COIPAK,FOPAK)
	   FOLST = COILST		! number of points in it
	   FOEF = LPOSE			! end of feature
	ENDIF
C
C Delete old segment (remove from screen)
	CALL LDSG(IHPAK,.TRUE.)
C
C COIPAK already contains the object in hand data
C 
C Is bridged out bit finite?
	CLOSE = .FALSE.
	IF (NDMODE.EQ.END_BRIDGE_CLOSE) THEN
C are we doing CLOSE over whole length of feature?
	   IF (IHVRT.EQ.1.AND.IHNVRT.AND.IMVRT.EQ.IHLST) CLOSE = .TRUE.
	   IF (IMVRT.EQ.1.AND.IMNVRT.AND.IHVRT.EQ.IHLST) CLOSE = .TRUE.
	   IF (CLOSE) GOTO 200
	ENDIF
	IF (IHVRT.NE.IMVRT) GOTO 100		! different vertices
	IF (IHNVRT.NEQV.IMNVRT) GOTO 100	! one on, one off
	IF (IMNVRT) GOTO 200			! both on (zero length)
	IF (IMCXY(1).EQ.IHCXY(1).AND.IMCXY(2).EQ.IHCXY(2)) GOTO 200
C
C Yes, so create a limbo feature for it
100	COIPAK(PAKFLG) = LIMFLG			! want in limbo
C
C generate FSN if not done already
	IF (.NOT.TMPFTR) COIPAK(PAKFSN) = GENNF(COIPAK)
	IF (STRTFT(IHPAK,IHTC,IHFS,IHAC,IHTH)) CALL COLAPS(120)
	I = 0
	IF (.NOT.IMNVRT) THEN
C
C no attributes for this point yet
	   CONATT = 0
C
C apply Z position of cursor, if appropriate
	   IF (ZOPT.AND.IMCZI.NE.IFF_ABSENT) THEN
	      CALL ADDZ(IMCXY(3),MXATTR,CONATT,COATTC,COATTV)
	   ENDIF
C
C add cursor, with "BREAK" operation attributes
	   CALL LSTARR(OPER,CONATT,COATTC,COATTV,.TRUE.)
	   CALL ADCORD(IMCXY,CONATT,COATTC,COATTV)
	   I = I+1				! don't add IMVRT
	ENDIF
C
C add intermediate vertices
	IF (IHVRT.GT.IMVRT) CALL ADDVRT(IHPAK,IMVRT+I,IHVRT,.FALSE.)
C
C add last point
	IF (.NOT.IHNVRT) THEN
C
C no attributes for this point yet
	   CONATT = 0
C
C apply Z position of cursor, if appropriate
	   IF (ZOPT.AND.IHCZI.NE.IFF_ABSENT) THEN
	      CALL ADDZ(IHCXY(3),MXATTR,CONATT,COATTC,COATTV)
	   ENDIF
C
C add cursor, with "BREAK" operation attributes
	   CALL LSTARR(OPER,CONATT,COATTC,COATTV,.TRUE.)
	   CALL ADCORD(IHCXY,CONATT,COATTC,COATTV)
	ENDIF
	CALL ENDFT
C
C Now for the actual bridged feature, provided it has at least 2 points
C Can only have less points if its a BRIDGE from one end of feature
C to the other, with no extra points added.
200	IF (	(IMNVRT.AND.IMVRT.EQ.1).AND.	! no points at first end
     &		(IHVRT.EQ.IHLST).AND.		! or at last end
     &		(CONIND.LE.1.AND..NOT.TMPFTR)	! or in the bridge
     &					) THEN
	   CALL MOAN(MSG_ONEPOINTLINE,IHPAK(PAKFSN))
	   GOTO 300
	ENDIF

	COIPAK(PAKFSN) = IHPAK(PAKFSN)		! re-use FSN
	COIPAK(PAKSEG) = IHPAK(PAKSEG)		! re-use segment
	COIPAK(PAKFLG) = 0			! not deleted
C
C Do first part, from start of feature to MA... position
	IF (STRTFT(IHPAK,IHTC,IHFS,IHAC,IHTH)) CALL COLAPS(120)
	I = 0
	IF (IMNVRT) I = I+1
	IF (CLOSE) IMVRT = IHLST	! include whole feature for CLOSE
	IF (IMVRT-I.GT.0) CALL ADDVRT(IHPAK,1,IMVRT-I,.FALSE.)
C
C and the constructed bridge
	IF (CLOSE) SWAP = .NOT.SWAP	! opposite sense for CLOSE
	IF (TMPFTR) THEN		! it's a temporary feature
	   IF (SWAP) THEN
	      CALL ADDVRT(FOPAK,1,FOLST,.FALSE.)! add points from IFF
	   ELSE
	      CALL ADDVRT(FOPAK,FOLST,1,.FALSE.)! add points backwards
	   ENDIF
	ELSE
	   IF (SWAP) THEN		! backwards
	      CALL STRTER(START_BRIDGE,START_VISIBLE)
					! add from construct buffer
	   ELSE
	      CALL STRTER(START_REVERSE,START_VISIBLE)
					! reverse from construct buffer
	   ENDIF
	ENDIF
C 
C Do last part, from IH... position to end
	IF (IHVRT.LT.IHLST) CALL ADDVRT(IHPAK,IHVRT+1,IHLST,.FALSE.)
	CALL ENDFT				! end feature
C
C Remove the old object in hand completely
300	CALL DELFT(IHPAK,IHEF)
C
C and the temporary feature (FOPAK contains its details, saved above)
	IF (TMPFTR) CALL DELFT(FOPAK,FOEF)
C
998	RETURN
        END
