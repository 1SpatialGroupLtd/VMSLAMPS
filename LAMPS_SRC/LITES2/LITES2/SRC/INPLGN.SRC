C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1984-12-10 18:04:08.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION INPLGN(XXYY,N,PTS,LTD)
C
***	IDENT	10DE84
***	MODULE	INPLGN
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	29-Nov-1984
C
C Description
C
C	Logical function that returns .TRUE. when the point XXYY
C	lies within the polygon defined by PTS, and .FALSE. when
C	it is outside.
C	The array PTS has N coordinates, and the polygon consists
C	of the vectors between them plus the vector between the first
C	and the last point. This ensures that we are dealing with a
C	closed polygon.
C	It is the responsibility of the calling program to ensure
C	that there are at least two points in the array (three
C	are more sensible)
C	It uses the algorithm that a horizontal line from the point
C	to + infinity will cut the edges of the polygon an even
C	number (including 0) of times if the point is outside the
C	polygon, and an odd number of times if it is inside.
C	Points lying on the edges of the polygon are inside it.
C	
C
	IMPLICIT NONE
C
C Arguments
C (input)
C
	REAL		XXYY(2)		! point to test
	INTEGER*4	N		! number of points in polygon
	REAL		PTS(2,N)	! coordinates of corner pts of
					! polygon
	REAL		LTD		! limit for testing equality
C
C Local Variables
C
	INTEGER*4	I		! counter
	REAL		XX,YY		! copies of XXYY argument
	REAL		X1,Y1,X2,Y2	! vector
	REAL		X		! where horizontal line cuts
					! side of polygon
	INTEGER*4	RIGHT		! number of intersections
C
C Start of subroutine
C
	IF (N.LT.2) GOTO 100		! error in number of points
C
C assume point is inside
C
	INPLGN=.TRUE.
C
C initialise
C
	XX = XXYY(1)			! copy XXYY argument
	YY = XXYY(2)
	RIGHT=0
	X1=PTS(1,N)			! start somewhere
	Y1=PTS(2,N)
C
C check if this vertex is on horizontal line through pt
C
    5	CONTINUE
	IF (ABS(Y1-YY).LT.LTD) THEN
C
C	   see if vertex is point!
C
	   IF(ABS(X1-XX).LT.LTD) THEN
	      GOTO 100
	   ELSE				! move vertex slightly
	      Y1=Y1+LTD
	      GOTO 5			! and check again
	   ENDIF
	ENDIF
C
C test each vector of polygon
C
	DO 20, I=1,N
	   X2=X1
	   Y2=Y1
	   X1=PTS(1,I)
	   Y1=PTS(2,I)			! now we have a vector to test
C
   10	   CONTINUE
C
C see if point lies within y extent of vector
C
	   IF (MAX(Y1,Y2)+LTD.GT.YY.AND.MIN(Y1,Y2)-LTD.LT.YY) THEN
C
C	   check for horizontal vector
C
	      IF (ABS(Y2-Y1).LT.LTD) THEN
C
C 	         check for point on this line
C
	         IF (MAX(X1,X2)+LTD.GT.XX.AND.MIN(X1,X2)-LTD.LT.XX) THEN
	            GOTO 100		! point on vector
	         ENDIF
	      ENDIF
C
C	   check for new point of polygon on horizontal line thro point
C
	      IF (ABS(Y1-YY).LT.LTD) THEN
	         IF (ABS(X1-XX).LT.LTD) THEN
	            GOTO 100			! point on polygon vertx
	         ELSE
	            Y1=Y1+LTD			! move end of vector
	            GOTO 10			! slightly and retry
	         ENDIF
	      ENDIF
C
C compute where horizontal line through the point cuts vector
C
	      X=X2+(YY-Y2)*(X1-X2)/(Y1-Y2) 
C
C             check if point lies on vector
C
	      IF (ABS(X-XX).LT.LTD) THEN
	         GOTO 100			! yes it does
	      ELSEIF (X.GT.XX) THEN
	         RIGHT=RIGHT+1			! intersection to 
						! right of point
	      ENDIF
	   ENDIF
   20	CONTINUE				! end of loop
C
C test if odd or even intersections
C
	IF ((RIGHT.AND.1).EQ.0) INPLGN=.FALSE.
C
C Return
C
  100	CONTINUE
	RETURN
	END
