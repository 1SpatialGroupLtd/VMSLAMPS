C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-03-12 14:59:32.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE SETFLG(OPTION)
C
***	IDENT	12MR89
***	MODULE	SETFLG
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					CCB	15-Jan-1986
C
C	Subroutine to set the JMPFLG flag according to the
C	condition on the end of a command
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:STAPAR/
***	PARAMETER/CMN:TEST/
C
***	COMMON/CMN:DOUT/
***	COMMON/LSL$CMNLSL:EXPC/
***	COMMON/CMN:GLOBAL/
***	COMMON/LSL$CMNLSL:TXTC/
***	COMMON/CMN:VARIABLE/
C
C Arguments
	INTEGER		OPTION		! what to do to JMPFLG
						! see (TEST.CMN)
					! = 1 -> set it
					! = 2 -> .OR. condition with it
					! = 3 -> .AND. condition with it
C
C Functions called
	LOGICAL	EVAL
	LOGICAL RDCHS
	INTEGER	FINSTR
	INTEGER STR$COMPARE
C
C Workspace
	INTEGER	TYPE			! type of variable
	INTEGER	VN,EN			! integer value
	REAL*8	VR,ER			! double value
	INTEGER	LENGTH			! length of string
	INTEGER*2 SAVDP			! decode pointer
	LOGICAL*1 RESULT
	LOGICAL*1 EMPTY			! test is blank
	BYTE	CH
	BYTE	INEQ			! inequality number
C
C See whether test can be optimised out
	IF (   (JMPFLG.AND.(OPTION.EQ.OR_PAR)) .OR.
     &    (.NOT.JMPFLG.AND.(OPTION.EQ.AND_PAR)) ) GOTO 9999
C
C set auxiliary buffer onto the string
	CALL SETAUX(%REF(DSTR),DSTRL)
C
C Find variable name
C Permit system, must exist, subscript required, not substituting
	CALL FINVAR(.TRUE.,.TRUE.,.TRUE.,.FALSE.)
	IF (MOANED) GOTO 9999
C
C Get value for variable
	TXTPTR = TXTLIM
	CALL VALVAR(TYPE,VN,VR,TXTDSC,LENGTH)
	TXTPTR = LENGTH
	IF (MOANED) GOTO 9999
C
C Is there anything on the line?
	EMPTY = RDCHS(CH)
	IF (.NOT.EMPTY) THEN
	   CALL BSCH
	   CALL RDINEQ(INEQ)		! get inequality
	ENDIF
C
C get value for comparison
C
	GOTO (100,200,300,200),TYPE	! branch on type
	GOTO 9999			! eh?
C
C Integer
100	IF (EMPTY) THEN			! nothing on line
	   RESULT = (VN.AND.1).NE.0	! test as logical (low bit)
	   GOTO 9000
	ENDIF
	CALL DCPSAV(SAVDP)		! save current pointer
C
C Try decoding expression as integer
	IF (EVAL(EN,ER,.FALSE.,.FALSE.)) THEN	! failed
C
C Try decoding as real instead
	   CALL DCPSET(SAVDP)		! restore pointer
	   IF (.NOT.EVAL(EN,ER,.TRUE.,.TRUE.)) THEN	! success
	      VR = VN			! float integer variable
	      TYPE = 2			! and pretend real
	   ENDIF
	ENDIF
	GOTO 1000
C
C Real
200	IF (EMPTY) THEN
	   RESULT = VR.NE.0.0D0		! test as logical
	   GOTO 9000
	ENDIF
C
C Try decoding as real
	IF (EVAL(EN,ER,.TRUE.,.TRUE.)) CONTINUE
	GOTO 1000
C
C String 
300	IF (EMPTY) THEN			! test as logical
	   IF (TXTPTR.EQ.0) THEN
	      RESULT = .FALSE.			! null string is false
	   ELSE
	      RESULT = (TXTBUF(1).AND.1).NE.0	! test bit of 1st char
	   ENDIF
	   GOTO 9000
	ENDIF
	EXPLEN = EXPMAX				! set maximum length
	EXPLEN = FINSTR(EXPDSC,'string')	! get string
C
1000	IF (MOANED) GOTO 9999		! error getting value
C
C compute inequality
C
	GOTO (8100,8200,8300,8400,8500), INEQ
C
C EQUAL    (perhaps no inequality)
	IF (TYPE.EQ.1) THEN
	   RESULT = VN.EQ.EN
	ELSEIF (TYPE.EQ.2) THEN
	   RESULT = SNGL(VR).EQ.SNGL(ER)
	ELSEIF (TYPE.EQ.4) THEN
	   RESULT = VR.EQ.ER
	ELSE
	   RESULT = STR$COMPARE(TXTDSC,EXPDSC).EQ.0
	ENDIF
	GOTO 9000
C
C GT
8100	IF (TYPE.EQ.1) THEN
	   RESULT = VN.GT.EN
	ELSEIF (TYPE.EQ.2) THEN
	   RESULT = SNGL(VR).GT.SNGL(ER)
	ELSEIF (TYPE.EQ.4) THEN
	   RESULT = VR.GT.ER
	ELSE
	   RESULT = STR$COMPARE(TXTDSC,EXPDSC).GT.0
	ENDIF
	GOTO 9000
C
C GE
8200	IF (TYPE.EQ.1) THEN
	   RESULT = VN.GE.EN
	ELSEIF (TYPE.EQ.2) THEN
	   RESULT = SNGL(VR).GE.SNGL(ER)
	ELSEIF (TYPE.EQ.4) THEN
	   RESULT = VR.GE.ER
	ELSE
	   RESULT = STR$COMPARE(TXTDSC,EXPDSC).GE.0
	ENDIF
	GOTO 9000
C
C LT
8300	IF (TYPE.EQ.1) THEN
	   RESULT = VN.LT.EN
	ELSEIF (TYPE.EQ.2) THEN
	   RESULT = SNGL(VR).LT.SNGL(ER)
	ELSEIF (TYPE.EQ.4) THEN
	   RESULT = VR.LT.ER
	ELSE
	   RESULT = STR$COMPARE(TXTDSC,EXPDSC).LT.0
	ENDIF
	GOTO 9000
C
C LE
8400	IF (TYPE.EQ.1) THEN
	   RESULT = VN.LE.EN
	ELSEIF (TYPE.EQ.2) THEN
	   RESULT = SNGL(VR).LE.SNGL(ER)
	ELSEIF (TYPE.EQ.4) THEN
	   RESULT = VR.LE.ER
	ELSE
	   RESULT = STR$COMPARE(TXTDSC,EXPDSC).LE.0
	ENDIF
	GOTO 9000
C
C NE
8500	IF (TYPE.EQ.1) THEN
	   RESULT = VN.NE.EN
	ELSEIF (TYPE.EQ.2) THEN
	   RESULT = SNGL(VR).NE.SNGL(ER)
	ELSEIF (TYPE.EQ.4) THEN
	   RESULT = VR.NE.ER
	ELSE
	   RESULT = STR$COMPARE(TXTDSC,EXPDSC).NE.0
	ENDIF
	GOTO 9000
C
C set JMPFLG (trivial cases of AND and OR already dealt with)
9000	JMPFLG = RESULT
C
9999	IF (MOANED) CALL IGNCMD
	RETURN
	END
