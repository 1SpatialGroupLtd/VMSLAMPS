C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-08-25 10:30:28.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION TXTREG(N,XY)
C
***	IDENT   25AU94
***	MODULE  TXTREG
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RJH	 14-Jan-1987
C
C	LITES2 cartographic editor - get text region
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:CTXS/
***	PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:PACK/
C
***	COMMON/CMN:CTXS/
***	COMMON/CMN:DRAWIN/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:STRIKE/
***	COMMON/LSL$CMNFRT:FRTCOM/
C
C Arguments
C
	INTEGER*4	N		! no. of points defining region
	REAL		XY(2,N)		! points defining the region
C
C Functions called
C
	LOGICAL		FRTFND		! find feature representation
	LOGICAL		TRI_BOUND	! get region boundary
C
C Local Variables
C
	INTEGER		I		! counter
	REAL		ORIGX		! X coord of text origin point
	REAL		ORIGY		! Y coord of text origin point
	REAL		CURRX		! local X coord of current point
	REAL		CURRY		! local Y coord of current point
	REAL		COSANG		! cosine of rotation angle
	REAL		SINANG		! sine of rotation angle
	REAL		MINX		! dist to left of box from X
	REAL		MINY		! dist to bottom of box from Y
	REAL		SIZE		! text size
C
C Assume success
C
	TXTREG = .FALSE.
C
C Drag out the current text
C
	IF (FO) THEN
	   FTRCTXD(CTXD_CUR) = FTRCTXD(CTXD_HOME)
	   CALL THISCTX(FTRCTXD)
	ELSE
	   COICTXD(CTXD_CUR) = COICTXD(CTXD_HOME)
	   CALL THISCTX(COICTXD)
	ENDIF
C
C Set up FRTCOM in case its been corrupted
C
	IF (FRTFND(CTXBUFW(CTX_W_TS1))) THEN
	   CALL NASTY(MSG_BADCODE,CTXBUFW(CTX_W_TS1))
	   CALL COLAPS(MSG_BADCODE)
	   TXTREG = .TRUE.		! fail
	   GOTO 999
	ENDIF
C
C Get the bounding region from the TRI
C
	IF (TRI_BOUND(CTXBUFL(CTX_L_DESC),FRTSC,N,XY,EXPROP,
     &					HWTOPT.AND.FRTHWS)) THEN
	   CALL MOAN(MSG_NOBOUND,CTXBUFL(CTX_L_DESC),FRTSC)
	   TXTREG = .TRUE.		! fail
	   GOTO 999
	ENDIF
C
C If height option enabled, use TH entry to work out the size
C
	IF (HEIOPT) THEN
	   IF (POIOPT) THEN
	      CALL PSTOSZ(CTXBUFL(CTX_L_TH),SIZE)
	   ELSE
	      SIZE=CTXBUFL(CTX_L_TH)/100.0	! TH size is in 100mms 
	   ENDIF
	   IF (SIZE.LE.0.0) SIZE=FRTSIZ		! if 0.0, use frt
	ELSE
C 
C Otherwise use size from FRT
C
	   SIZE=FRTSIZ
	ENDIF
	SIZE=SIZE*SCLFRT
C
C Use default size, if all else fails
C
	IF (SIZE.LE.0.0) SIZE = DFSSIZ*SCLFRT
C
C Set up the remaining values to use for calculating the region
C
	COSANG = CTXBUFR(CTX_L_AUX2)
	SINANG = CTXBUFR(CTX_L_AUX3)
	MINX = CTXBUFR(CTX_L_AUX5)
	MINY = CTXBUFR(CTX_L_AUX7)
C
C Now calculate the lower left hand corner of the text box
C
	ORIGX = CTXBUFR(CTX_L_X) + COSANG*MINX - SINANG*MINY
	ORIGY = CTXBUFR(CTX_L_Y) + SINANG*MINX + COSANG*MINY
C
C Scale up, translate and rotate the coordinates
C
	DO 10 I=1,N
	   CURRX = XY(1,I)
	   CURRY = XY(2,I)
	   XY(1,I) = ORIGX + COSANG*CURRX*SIZE - SINANG*CURRY*SIZE
	   XY(2,I) = ORIGY + SINANG*CURRX*SIZE + COSANG*CURRY*SIZE
10	CONTINUE
C
999	RETURN
	END
