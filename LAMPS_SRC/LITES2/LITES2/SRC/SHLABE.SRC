C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-08-16 18:08:58.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE SHLABE
C
***	IDENT	16AU88
***	MODULE	SHLABE
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	21-Jul-1986
C
C Description
C
C	LITES2 cartographic editor SHOW LABELS command.
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:ACS/
***     PARAMETER/CMN:MOANMESS/		! moan constants
C
***	COMMON/LSL$CMNFRT:FRTACD/
***     COMMON/CMN:LABELS/		! data for FC selection
C
C functions
	INTEGER		EXPAND
C
C w/s
	INTEGER		I		! loop counter
	CHARACTER*80	STRNG
	INTEGER		SLEN
	CHARACTER*(ACD_FORMAT_MAX+2) F	! format for error message
	INTEGER		F_LEN		! its length
C
	IF (LABFEAT) THEN
	   CALL INFORM(MSG_CURRLAB,'features')
	ELSE
	   CALL INFORM(MSG_CURRLAB,'points')
	ENDIF
C
	IF (NOLAB) THEN			! no labels set up
	   CALL INFORM(MSG_NOLABEL,'feature')
	ELSE
	   IF (LABFSN) CALL INFORM(MSG_LABELFSN)	! labelling FSNs
	   IF (LABFC) CALL INFORM(MSG_LABELFC)		! labelling FCs
C
C ACs
C
	   DO 10, I=1,NUM_LAB_AC		
	      CALL ACDFND(LABAC(I),.FALSE.)
	      IF (LABACV(I)) THEN
	         IF (ACD_CODE.GE.0) THEN
	            CALL INFORM(MSG_LABELACNAME,'value',
     &	                        ACD_NAME(1:ACD_NAME_LEN))
	         ELSE
	            CALL INFORM(MSG_LABELACNUM,'value',LABAC(I))
	         ENDIF
	      ENDIF
C
	      IF (LABACTXT(I)) THEN
	         IF (ACD_CODE.GE.0) THEN
	            CALL INFORM(MSG_LABELACNAME,'text ',
     &	                        ACD_NAME(1:ACD_NAME_LEN))
	         ELSE
	            CALL INFORM(MSG_LABELACNUM,'text ',LABAC(I))
	         ENDIF
	      ENDIF
   10	   CONTINUE
	ENDIF
C
C labelling points
	IF (NUM_LAB_ATTR.EQ.0) THEN
	   CALL INFORM(MSG_NOLABEL,'point')
	ELSE
	   CALL INFORM(MSG_LABELATTR)
	   DO 20, I=1,NUM_LAB_ATTR		
	      CALL ACDFND(LABATTR(I,1),.FALSE.)
	      STRNG = ' '				! empty string
	      SLEN = 0
C
C fill in name or number of attribute
	      IF (ACD_CODE.LT.0) THEN
	         CALL EXPAND('%WS(%N)',STRNG,LABATTR(I,1))
	      ELSE
	         CALL EXPAND('%WS%S',STRNG,ACD_NAME(1:ACD_NAME_LEN))
	      ENDIF
C
C add the value if it exists
	      IF (LABATTR(I,2).NE.IFF_ABSENT) THEN
	         IF (ACD_DATA_TYPE.EQ.ACD_DATATYPE_C) THEN
	            F     = '"'//ACD_FORMAT(1:ACD_FORMAT_LEN)//'"'
	            F_LEN = ACD_FORMAT_LEN + 2
	         ELSE
	            F     = ACD_FORMAT(1:ACD_FORMAT_LEN)
	            F_LEN = ACD_FORMAT_LEN
	         ENDIF
	         SLEN = EXPAND('%WS'//F(1:F_LEN),
     &	                     STRNG(ACD_NAME_MAX+1:),LABATTR(I,2))
	      ENDIF
	      SLEN = SLEN + ACD_NAME_MAX
	      CALL INFORM(MSG_STRING,'       '//STRNG(1:SLEN))

   20	   CONTINUE
	ENDIF
C
	RETURN
	END
