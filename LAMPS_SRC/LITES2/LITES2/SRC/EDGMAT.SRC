C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-04-22 12:52:28.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE EDGMAT(TYPE)
C
***	IDENT	22AP92
***	MODULE	EDGMAT
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	13-May-1985
C
C Description :-
C	Subroutine to carry out edgematching along a line
C	N.B. Uses explicit secondary command number for DOSEARch.
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:AUXDEF/	
***	PARAMETER/CMN:MOANMESS/
***     PARAMETER/CMN:PACK/
C
***     COMMON/CMN:DOUT/
***     COMMON/CMN:DRAWIN/
***     COMMON/CMN:EDGE/
***	COMMON/CMN:MAPS/
***	COMMON/CMN:MASTER/
***     COMMON/CMN:STRIKE/
C
C Arguments
	INTEGER		TYPE		! type of edgmatching going on
C
C Functions called
	INTEGER		OBJSDE
	LOGICAL		NOUSE,HADBREAK
	REAL		PLDIST
C
C Local Variables
	INTEGER		DUMMY
	REAL		D1,T1
C
C start spiral search  (SEARCH ALL)
C
	DSECN = 1			! command SEARCH ALL
	CALL DOSEAR
	GOTO 300			! now we are started
C
C Object in hand no good, abandon it
C
100	CALL ABANDN
C
C continue spiral search (SEARCH NEXT)
C
200	CALL RFDRAW			! update screen
	DSECN = 4			! command SEARCH NEXT
	CALL DOSEAR
C
C have we found a feature in our spiral search?
C
300	IF (HITITC.EQ.0.OR.HADBREAK()) GOTO 900	! finished one way or
						! another
C
C if map is read only and joining
	IF (TYPE.EQ.JOIN_TYP.AND.MAPRO(FOPAK(PAKMAP))) GOTO 200
C
C or point is too far from line
	IF (ABS(PLDIST(CSXY,EDGLNE,DUMMY)).GT.EDGTOL) GOTO 200
C
C or feature is the base line
	IF (FOPAK(PAKMAP).EQ.EDLMAP.AND.FOPAK(PAKPNF).EQ.EDLPNF) GOTO 200
C
C tie or join to this point
C
	CALL RFDRAW				! update screen
	CALL JOITIE(TYPE.EQ.JOIN_TYP)
C
C Find which side of edgeline this feature is on
C
	SIDEIH=OBJSDE(IHVRT,IHLST,IHTOP,IHXY,EDGLNE)
C
C second from end vertex lies on base line
C
	IF (SIDEIH.EQ.0.OR.SIDEIH.EQ.10) GOTO 100
C
C move crosshairs onto line
C
	CALL PRPDST(CSXY,EDGLNE,D1,T1)	! project cross hairs onto base
	IF (T1.LT.0.0) T1=0.0		! constrain to be within base
	IF (T1.GT.1.0) T1=1.0
C
C move cross hairs onto base line
C
	CSXY(1)=EDGLNE(1,1)+T1*(EDGLNE(1,2)-EDGLNE(1,1))
	CSXY(2)=EDGLNE(2,1)+T1*(EDGLNE(2,2)-EDGLNE(2,1))
	EDCSXY(1)=CSXY(1)			! save this position
	EDCSXY(2)=CSXY(2)
	CALL RFDRAW				! update screen
C
C so look for another feature
C
	SPIRAL=.FALSE.			! not a spiral search this time
	CALL FINREC
	HITSAV=HITITC			! remember how many features
					! to cycle around
C
C have we found a feature?
C
	IF (HITITC.EQ.0) THEN		! no, so drop feature in hand
	   CALL EXPAND('%WS No other feature within %F0.3 mms',
     &	                  MSGES(1),TOLEDG)
	   IF (.NOT.FERROR) CALL TOFILE(1) ! write messages to file
	   GOTO 100
	ENDIF	
C
C
400	CALL RFDRAW			! update screen
C
C if this feature is no good for edgmatching, cycle through
C other possibles
C
	IF (NOUSE()) THEN
	   HITSAV=HITSAV-1
	   IF (HITSAV.EQ.0) THEN	! looked at all possiblities
C
C	      write messages to file
C
	      IF (.NOT. FERROR) CALL TOFILE(HITITC)
	      GOTO 100
	   ENDIF
	   CALL FINREC			! find again
	   GOTO 400			! and test result
	ENDIF
C
C Move cursor onto line
C If either map read only, then move to projection of its end,
C otherwise take mean position
C
	IF (MAPRO(FOPAK(PAKMAP)).OR.MAPRO(IHPAK(PAKMAP))) THEN
	   IF (MAPRO(FOPAK(PAKMAP))) THEN
	      CALL PRPDST(FOCXY,EDGLNE,D1,T1)	! project end of FO
	   ELSE
	      CALL PRPDST(IHCXY,EDGLNE,D1,T1)	! project end of IH
	   ENDIF
	   IF (T1.LT.0.0) T1=0.0		! constrain to be within base
	   IF (T1.GT.1.0) T1=1.0
	   CSXY(1)=EDGLNE(1,1)+T1*(EDGLNE(1,2)-EDGLNE(1,1))
	   CSXY(2)=EDGLNE(2,1)+T1*(EDGLNE(2,2)-EDGLNE(2,1))
	ELSE
	   CALL MOVTOL(FOCXY,IHCXY,EDGLNE,CSXY)
	ENDIF
	CALL RFDRAW				! update screen
C
C write out message saying what we are doing
C
	IF (TYPE.EQ.JOIN_TYP) THEN
	   CALL INFORM(MSG_JOINEDTO,IHPAK(PAKFSN),IHPAK(PAKMAP)+1,
     &	      FOPAK(PAKFSN),FOPAK(PAKMAP)+1)
	ELSEIF (TYPE.EQ.TIE_TYP) THEN
	   CALL INFORM(MSG_TIEDTO,IHPAK(PAKFSN),IHPAK(PAKMAP)+1,
     &	      FOPAK(PAKFSN),FOPAK(PAKMAP)+1)
	ENDIF
C
C and end join or tie
C
	CALL DOEND
	GOTO 200			! search next
C
900	RETURN
	END
