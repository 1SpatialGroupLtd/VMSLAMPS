C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-05-10 10:38:02.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE WARP_BACK(X,Y)
C
***	MODULE	WARP_BACK
***	IDENT	10MY96
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
C to do a back transformation of the specified point to LITES2 
C coordinate space.
C
C ASSUMES THAT COMMON "SETUP" IS VALID

	IMPLICIT	NONE
C
C arguments (input and output)
	REAL		X,Y		! coords to transform
C
***	COMMON/CMN:MASTER/
***	COMMON/CMN:SETUP/
***	COMMON/CMN:WORKS/
C
C working storage
C
	EXTERNAL	WARP_BACK_FUNC
C
	REAL		TARGET_X,TARGET_Y,START_X,START_Y
	REAL		ANSWER_X,ANSWER_Y
	REAL		STEP_X,STEP_Y,TOLERANCE
	LOGICAL		OK
C
C use direct backward transformation if possible
C
	IF (SET_BACK_SIMPLE) THEN
	   CALL TRNUSE(X,Y,SETBCK,SET_TRANSFORM)
	ELSE
C
C get an approximate position
	   TARGET_X = X
	   TARGET_Y = Y
	   CALL TRNUSE(X,Y,SETBCK,SET_TRANSFORM)
C
	   START_X = X
	   START_Y = Y
C
	   STEP_X = LINWDTH * 10.0
	   STEP_Y = LINWDTH * 10.0
	   TOLERANCE = LINWDTH
C
C iterate to position
	   CALL NEWTON2D(WARP_BACK_FUNC,TARGET_X,TARGET_Y,
     &	                  START_X,START_Y,
     &			  STEP_X,STEP_Y,TOLERANCE,
     &			  100,
     &			  .FALSE.,0.0,0.0,0.0,0.0,
     &			  ANSWER_X,ANSWER_Y,
     &			  OK)
C
	   IF (OK) THEN
	      X = ANSWER_X
	      Y = ANSWER_Y
	   ENDIF
	ENDIF
C
	RETURN
	END


      SUBROUTINE NEWTON2D(FUNC,
     &			  TARGET1,
     &			  TARGET2,
     &			  START_GUESS1,
     &			  START_GUESS2,
     &			  STEP1,
     &			  STEP2,
     &			  TOLERANCE,
     &			  MAX_ITER,
     &			  USE_BOX,
     &			  BOX_LOW1,	
     &			  BOX_LOW2,	
     &			  BOX_HIGH1,	
     &			  BOX_HIGH2,
     &			  ANSWER1,
     &			  ANSWER2,
     &			  OK)
C
***	IDENT	17FE94
***	MODULE	NEWTON2D
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C to solve two dimensional transformation by Newton-Raphson
C 
C Author 					D. Miller	24-Feb-93
C
CMOD Use a single subroutine to return the X and Y from input x and y
C						R Russell	17-Feb-94
	IMPLICIT	NONE
C
C	Arguments:
C
C X and Y subroutine to be solved of the form
C FUNC1(Xin,Yin,Xout,Yout) 
C
      EXTERNAL		FUNC
C
C Target X and Y i.e. look for  FUNC(ANSWER1,ANSWER2,TARGET1,TARGET2)
C                               
      REAL         	TARGET1 
      REAL     	TARGET2 
C
C Start guess for the iteration.
C These values should be chosen as close to the solution as an a proiri
C estimate will allow. Failure to converge may arise from a bad initial
C guess. 
C
      REAL     	START_GUESS1 
      REAL     	START_GUESS2 
C
C Steps for evaulating the derivates of FUNC1 and FUNC2
C The steps are in units of the arguments of FUNC1 and FUNC2
C i.e derivative_estimate at X = (FUNC(X+STEP1) - FUNC1(X)//STEP
C
      REAL     	STEP1 
      REAL     	STEP2 
C
C The tolerance is used to successfully terminate the iteration
C and is measured in units of the output value.
C A solution is found when
C
C ABS(FUNC1(ANSWER)-TARGET1) + ABS(FUNC2(ANSWER)-TARGET1) < TOLERANCE
C
      REAL     	TOLERANCE 
C
C The maximum number of iterations to be performed. The routine returns
C with OK set to .FALSE. if a solution has not been found after this
C many iterations.
C
      INTEGER*4		MAX_ITER 
C
C If the solution is known to exist in a certain locality then the 
C routine can be forced to only search for solutions in a box.
C If a solution is known to be localised then it is a good idea to
C use the facility firstly to make convergence more likely after an
C inadequate initial guess and also to get the correct root.
C
      LOGICAL  		USE_BOX 
      REAL     	BOX_LOW1
      REAL      	BOX_LOW2   
      REAL     	BOX_HIGH1  
      REAL     	BOX_HIGH2 
C
C The approximate solution to the problem
C
      REAL     	ANSWER1 
      REAL      	ANSWER2 
C
C .TRUE. - solution has been found.
C .FALSE - solution has failed to be found in the required number of
C	   iterations.
C
      LOGICAL  		OK 

      INTEGER*4 COUNT
      REAL DERV11,DERV12,DERV21,DERV22
      REAL VA1,VA2,LAST_VALUE1,LAST_VALUE2 
      REAL DIFF,DIFF1,DIFF2,DETER
      REAL TEST_DETER,ABS_DETER 
      REAL BOX_DIFF1,BOX_DIFF2 

C Initiliase iteration counter 

      COUNT = 0 

C Initialise target answers

      VA1 = START_GUESS1 
      VA2 = START_GUESS2 

C Initialise a tolerance to determine a zero determinant.

      TEST_DETER = (0.000000001*TOLERANCE)/(STEP1 + STEP2) 

C Mod the target answers into the box.
   
      IF(USE_BOX) THEN
         BOX_DIFF1 = BOX_HIGH1 - BOX_LOW1 
         BOX_DIFF2 = BOX_HIGH2 - BOX_LOW2 

         DO WHILE (VA1.GT.BOX_HIGH1) 
            VA1 = VA1 - BOX_DIFF1  
         END DO

         DO WHILE (VA1.LT.BOX_LOW1)  
            VA1 = VA1 + BOX_DIFF1  
         END DO

         DO WHILE (VA2.GT.BOX_HIGH2) 
            VA2 = VA2 - BOX_DIFF2  
         END DO 

         DO WHILE (VA2.LT.BOX_LOW2)  
            VA2 = VA2 + BOX_DIFF2  
         END DO
      ENDIF 

C Get the values for the initial guess.
   
      CALL FUNC(VA1,VA2,LAST_VALUE1,LAST_VALUE2)

C See how good the initial guess is 
 
      DIFF = ABS(LAST_VALUE1-TARGET1) + ABS(LAST_VALUE2-TARGET2) 


C Loop while guess is not good enough

      DO WHILE (DIFF.GT.TOLERANCE) 

C Calculate the four derivatives at the point

          CALL FUNC(VA1+STEP1, VA2, DERV11, DERV21)
          CALL FUNC(VA1, VA2+STEP2, DERV12, DERV22)

          DERV11 = (DERV11 - LAST_VALUE1)/STEP1
          DERV12 = (DERV12 - LAST_VALUE1)/STEP2
          DERV21 = (DERV21 - LAST_VALUE2)/STEP1
          DERV22 = (DERV22 - LAST_VALUE2)/STEP2

CCCC          DERV11 = FUNC1( VA1+STEP1 , VA2)       - LAST_VALUE1  
CCCC          DERV11 = DERV11/STEP1 
CCCC          DERV12 = FUNC1( VA1       , VA2+STEP2) - LAST_VALUE1  
CCCC          DERV12 = DERV12/STEP2 
CCCC          DERV21 = FUNC2( VA1+STEP1 , VA2)       - LAST_VALUE2  
CCCC          DERV21 = DERV21/STEP1 
CCCC          DERV22 = FUNC2(VA1        , VA2+STEP2) - LAST_VALUE2  
CCCC          DERV22 = DERV22/STEP2 
C
C Solve for diff = | DIFF1 |  ...  F(X) + F'(X)diff = 0 where 
C		   | DIFF2 |
C
C  F(X) =  | FUNC1(X) - TARGET1 |    and  F'(X) =  | DERV11  DERV12 |
C          | FUNC2(X) - TARGET2 |		   | DERV21  DERV22 |
C
          DETER = (DERV11*DERV22) - (DERV21*DERV12) 
          ABS_DETER = SQRT(ABS(DETER))

          IF(ABS_DETER.GT.TEST_DETER) THEN
C
C Non-zero determinant - can solve.
C
	     LAST_VALUE1 = LAST_VALUE1 - TARGET1 
	     LAST_VALUE2 = LAST_VALUE2 - TARGET2 
          
	     DIFF1 = (DERV12*LAST_VALUE2 - DERV22*LAST_VALUE1)/DETER 
	     DIFF2 = (DERV21*LAST_VALUE1 - DERV11*LAST_VALUE2)/DETER 
         ELSE
C
C Zero determinant - oh dear - move the point a little away and
C hope for non-zero determinant	    
C
	    DIFF1 = STEP1 
	    DIFF2 = STEP2 
         ENDIF	    

         VA1 = VA1 + DIFF1 
         VA2 = VA2 + DIFF2 
C
C Move the next point back into the box if required 
C
         IF(USE_BOX) THEN
            
            DO WHILE (VA1.GT.BOX_HIGH1) 
               VA1 = VA1 - BOX_DIFF1  
            END DO

            DO WHILE (VA1.LT.BOX_LOW1)  
               VA1 = VA1 + BOX_DIFF1  
            END DO

            DO WHILE (VA2.GT.BOX_HIGH2) 
               VA2 = VA2 - BOX_DIFF2  
            END DO 

            DO WHILE (VA2.LT.BOX_LOW2)  
               VA2 = VA2 + BOX_DIFF2  
            END DO
         ENDIF 
C
C Update for next iteration. 
C
         CALL FUNC(VA1, VA2, LAST_VALUE1, LAST_VALUE2)
CCCC         LAST_VALUE1 = FUNC1(VA1,VA2) 
CCCC         LAST_VALUE2 = FUNC2(VA1,VA2) 

         DIFF = ABS(LAST_VALUE1 -TARGET1) + ABS(LAST_VALUE2-TARGET2) 
         COUNT = COUNT + 1 
         IF(COUNT.GT.MAX_ITER) THEN
C
C Iteration count exceeded - exit with OK false
C
            OK = .FALSE.
            RETURN
         END IF
      END DO
C
C   SUCCESS
C
      ANSWER1 = VA1  
      ANSWER2 = VA2 
      OK = .TRUE.

      RETURN 

      END


	SUBROUTINE WARP_BACK_FUNC(X,Y,XX,YY)
C
***	MODULE	WARP_BACK_FUNC
***	IDENT	22SE94
C
	IMPLICIT	NONE
C
***	COMMON/CMN:SETUP/
C
C arguments (input)
	REAL		X,Y		! coords to transform
C
C arguments (output)
	REAL		XX,YY
C
C w/s
	REAL	TEMP_X,TEMP_Y
C
	TEMP_X = X
	TEMP_Y = Y
	CALL TRNUSE(TEMP_X,TEMP_Y,SETCOF,SET_TRANSFORM)
C
	XX = TEMP_X
	YY = TEMP_Y
C
	RETURN
	END
