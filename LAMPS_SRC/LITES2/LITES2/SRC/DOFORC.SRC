	SUBROUTINE DOFORC
C
***	IDENT   24AU94
***	MODULE  DOFORC
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Written					CCB	 4-DEC-1984
C
C Description
C
C	LITES2 cartographic editor FORCE command.
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:CONSTS/
***	PARAMETER/CMN:END/
***	PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:PACK/
***	PARAMETER/CMN:STAPAR/
C
***	COMMON/CMN:CSTRCT/
***	COMMON/CMN:DOUT/
***	COMMON/CMN:EDGE/
***	COMMON/LSL$CMNFRT:FRTCOM/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:STATE/
***     COMMON/CMN:STRIKE/
C
	EXTERNAL	MOAN,NASTY
C
C Functions called
	LOGICAL		CHKFOL,CHKARC
	LOGICAL		SEGVEC		! finds current segment vector
	REAL		ANGLE_BEARING	! convert from bearing to angle
C
C Local variables
	REAL		VEC(2)
	REAL		XY(2,2)
	EQUIVALENCE	(XY,VEC)
	REAL		COSANG,SINANG
	REAL		CDIST		! dist. of cursor from segment
	REAL		LSEG		! length of segment
	REAL		FRAC		! factor for multiplying vectors
	REAL		ANG
	REAL		R
	INTEGER		I
	LOGICAL		PERP,RAD,CORNER,SLOPE,TOUCH,DIST
	INTEGER		INLIN(2),INARC(2),NUM
C
	EQUIVALENCE	(PERP,RAD,CORNER,SLOPE,TOUCH,DIST)
	EQUIVALENCE	(R,FRAC,COSANG),(LSEG,SINANG)
C
C Don't allow constraint change if stretching
	IF (SINDEX.EQ.STATE_MODIFY.AND.NDMODE.EQ.END_STRETCH) THEN
	   CALL MOAN(MSG_CONSTRETCH)
	   CALL LEARN(MSG_ENDSTRETCH)
	   GOTO 9998
	ENDIF
C
C Despatch according to secondary command
	GOTO ( 100, 200, 300, 400, 500, 600, 700, 800, 900,
     &		1000,1100,1200,1300 ), DSECN
C
C Secondary command number out of range
	CALL MSGCMD(NASTY,MSG_ERRSECIND)
	GOTO 9998
C
C Secondary command PARALLEL
C
100	PERP = .FALSE.		! PARALLEL rather than PERPENDICULAR
	GOTO 210		! join PERPENDICULAR
C
C Secondary command PERPENDICULAR
C
200	PERP = .TRUE.		! PERPENDICULAR rather than PARALLEL
C
210	IF (.NOT.CHKFOL(.FALSE.)) GOTO 9998	! no linear found object
C
	IF (JOINNG) THEN
	   CALL MOAN(MSG_NOCONSTJOIN)	! can't while joining
	   GOTO 9998
	ENDIF
C
C constrain onto line
	SCSARC = .FALSE.
C
C Set starting end of constrained cursor line
	IF (SINDEX.EQ.STATE_CONSTRUCT) THEN
	   SCSTXY(1,1) = CONXY(1,CONIND)! last point of construction
	   SCSTXY(2,1) = CONXY(2,CONIND)
	ELSE
	   SCSTXY(1,1) = CSXY(1)	! present cursor position
	   SCSTXY(2,1) = CSXY(2)
	ENDIF
C
C Find vector for current segment
	IF (SEGVEC(VEC,I)) GOTO 9998
C
C If a distance has been given, the perpendicular distance from the
C cursor to the line segment is calculated. This is used with the
C command argument to calculate a factor by which to multiply the
C segment vector. The resulting vector is then used to find the new
C starting end of the constrained lne, based on the first attempt.
	IF (DNREA .NE. 0) THEN
	   CALL TSTUNT(.TRUE.,1,DREALS(1)) ! convert units if necessary
	   CALL PDIST(FOXY(1,I),VEC,SCSTXY(1,1),CDIST,LSEG)
					! calc. perpendicular distance
	   FRAC = (CDIST-DREALS(1))/LSEG	! calc. factor
	   SCSTXY(1,1) = SCSTXY(1,1) - (FRAC*VEC(2))	! find starting
	   SCSTXY(2,1) = SCSTXY(2,1) + (FRAC*VEC(1))	! end of line
	ENDIF
C
C Set other end of line. If constraint is to be perpendicular and the
C distance was specified, the cursor has to be moved to the correct
C position on the constrain line.
	IF (PERP) THEN			! PERPENDICULAR
	   SCSTXY(1,2) = SCSTXY(1,1)-VEC(2)
	   SCSTXY(2,2) = SCSTXY(2,1)+VEC(1)
	   IF (DNREA .NE. 0) THEN	! if argument given,
	      CSXY(1) = SCSTXY(1,1)	! calc. new cursor position
	      CSXY(2) = SCSTXY(2,1)
	      FONLIN = .FALSE.
	      POSCMD = .TRUE.
	   ENDIF
	ELSE				! PARALLEL
	   SCSTXY(1,2) = SCSTXY(1,1)+VEC(1)
	   SCSTXY(2,2) = SCSTXY(2,1)+VEC(2)
	ENDIF
	GOTO 9990
C
C Secondary command RADIAL
300	RAD = .TRUE.			! RADIAL rather than TANGENTIAL
	GOTO 410			! join TANGENTIAL
C
C Secondary command TANGENTIAL
400	RAD = .FALSE.			! TANGENTIAL rather than RADIAL
C
410	IF (.NOT.CHKARC()) GOTO 9998	! no arc found
C
C Must be positioned on the arc for TANGENTIAL
	IF (.NOT.RAD.AND..NOT.FONLIN) THEN
	   CALL MOAN(MSG_NOTONLINE)
	   CALL LEARN(MSG_USEON)
	   GOTO 9998
	ENDIF
C
C constrain onto line
	SCSARC = .FALSE.
C
C Set starting end of constrained cursor line
	IF (SINDEX.EQ.STATE_CONSTRUCT) THEN
	   SCSTXY(1,1) = CONXY(1,CONIND)! last point of construction
	   SCSTXY(2,1) = CONXY(2,CONIND)
	ELSE
	   SCSTXY(1,1) = CSXY(1)	! present cursor position
	   SCSTXY(2,1) = CSXY(2)
	ENDIF
C
C Set other end of line
	IF (RAD) THEN
	   SCSTXY(1,2) = FOAUX(XCENI)	! at centre for RADIAL
	   SCSTXY(2,2) = FOAUX(YCENI)
	ELSE
	   SCSTXY(1,2) = SCSTXY(1,1)-SCSTXY(2,1)+FOAUX(YCENI)
	   SCSTXY(2,2) = SCSTXY(2,1)+SCSTXY(1,1)-FOAUX(XCENI)
	ENDIF
	GOTO 9990
C
C Secondary command CORNER
C
500	CORNER = .TRUE.			! CORNER, not ANGLE
	IF (DNREA.NE.0) ANG = DREALS(1)
	GOTO 610
C
C Secondary command ANGLE
C
600	CORNER = .FALSE.		! ANGLE, not CORNER
	IF (DNREA.NE.0) ANG = DREALS(1)
C
610	IF (SINDEX.NE.STATE_CONSTRUCT) THEN
	   CALL MSGCMD(MOAN,MSG_CMDNOTVALID)
	   GOTO 9999
	ENDIF
C
	IF (CORNER.AND.CONIND.LT.2) THEN
	   CALL MOAN(MSG_NOALIGN)
	   GOTO 9998
	ENDIF
C
C check if already constrained onto circle
C if so, then now forced onto a point
	IF (ROLING.AND.FNDMDE.EQ.0.AND.SCSARC) THEN
	   IF (CORNER.AND.DNREA.EQ.0) ANG = 90.0
	   ANG = ANG*PI/180.0
	   IF (CORNER) ANG = ANG + ATAN2(
     &		CONXY(2,CONIND)-CONXY(2,CONIND-1),
     &		CONXY(1,CONIND)-CONXY(1,CONIND-1))
	   ANG = ATAN2(SIN(ANG),COS(ANG))	! get into range
	   IF (ANG.LT.0.0) ANG = ANG+TWOPI
	   SCSAUX(STAI) = ANG
	   SCSAUX(TOTI) = 0.0
	   GOTO 9990
	ENDIF
C
C constrain onto line
	SCSARC = .FALSE.
C
C first point of constraint is last point of construction
	SCSTXY(1,1) = CONXY(1,CONIND)
	SCSTXY(2,1) = CONXY(2,CONIND)
C
C get vector (to which angle is relative)
	IF (CORNER) THEN
	   VEC(1) = SCSTXY(1,1)-CONXY(1,CONIND-1)
	   VEC(2) = SCSTXY(2,1)-CONXY(2,CONIND-1)
	ELSE
	   VEC(1) = XSECTW	! arbitrary length of correct magnitude
	   VEC(2) = 0.0
	ENDIF
C
	IF (CORNER.AND.DNREA.EQ.0) THEN
	   COSANG = 0.0
	   SINANG = 1.0
	ELSE
	   ANG = ANG*PI/180.0
	   COSANG = COS(ANG)
	   SINANG = SIN(ANG)
	ENDIF
C
C Second point for constraint
	SCSTXY(1,2) = SCSTXY(1,1)+VEC(1)*COSANG-VEC(2)*SINANG
	SCSTXY(2,2) = SCSTXY(2,1)+VEC(1)*SINANG+VEC(2)*COSANG
	GOTO 9990
C
C Secondary command ORTGHOGONAL
C
700	CALL MSGCMD(MOAN,MSG_CMDNOTIMPLE)
	GOTO 9999
C
C Secondary command LINE (length of construction segment)
C
800	DIST = .FALSE.
C
810	IF (SINDEX.NE.STATE_CONSTRUCT) THEN
	   CALL MSGCMD(MOAN,MSG_CMDNOTVALID)
	   GOTO 9999
	ENDIF
C
	IF (DREALS(1).LE.0.0) THEN
	   CALL MOAN(MSG_NEGARGS)
	   GOTO 9999
	ENDIF
C
	CALL TSTUNT(.TRUE.,1,DREALS(1))	! convert units if necessary
C
C extra checks for DISTANCE, and convert to LINE
	IF (DIST) THEN
	   DREALS(1) = DREALS(1) - CONLEN
	   IF (DREALS(1).LE.0.0) THEN
	      CALL MOAN(MSG_CONTOOLONG)
	      GOTO 9999
	   ENDIF
	ENDIF
C
C centre of circle is last point of construction
	SCSAUX(XCENI) = CONXY(1,CONIND)
	SCSAUX(YCENI) = CONXY(2,CONIND)
C
C radius is the specified distance
	SCSAUX(RADI) = DREALS(1)
C
C check if already constrained
C if so, then now forced onto a point
	IF (ROLING.AND.FNDMDE.EQ.0) THEN
	   IF (SCSARC) THEN		! already on arc
	      SCSAUX(RADI) = DREALS(1)	! just change radius
	   ELSE				! must be already on line
	      SCSAUX(STAI) = 0.0	! set full circle
	      SCSAUX(TOTI) = TWOPI
	      CALL LINARC(SCSTXY,SCSAUX,NUM,XY(1,1),XY(1,2),INLIN,INARC,TOUCH)
C
C if no intersections at all, then just set full circle
	      IF (NUM.EQ.0) GOTO 820
C
C find which point is nearer
	      I = 1
	      R = (CSXY(1)-XY(1,1))**2+(CSXY(2)-XY(2,1))**2
	      IF (NUM.GT.1) THEN
	         IF ( (CSXY(1)-XY(1,2))**2+(CSXY(2)-XY(2,2))**2 .LT. R
     &			) I = 2
	      ENDIF
	      ANG = ATAN2(XY(2,I)-SCSAUX(YCENI),XY(1,I)-SCSAUX(XCENI))
	      IF (ANG.LT.0.0) ANG = ANG+TWOPI
	      SCSAUX(STAI) = ANG
	      SCSAUX(TOTI) = 0.0
	      SCSARC = .TRUE.
	   ENDIF
	   GOTO 9990
	ENDIF
C
C angle is irrelevant, and full circle
820	SCSAUX(STAI) = 0.0
	SCSAUX(TOTI) = TWOPI
C
C constrain onto circle
	SCSARC = .TRUE.
	GOTO 9990
C
C Secondary command DISTANCE
C
900	DIST = .TRUE.
	GOTO 810
C
C Secondary command EDGE
C
1000	CONTINUE
C
C only valid if TIEING or JOINING
	IF ((SINDEX.NE.STATE_EDIT).OR.
     &	      (NDMODE.NE.END_JOIN.AND.NDMODE.NE.END_TIE)) THEN
	   CALL MSGCMD(MOAN,MSG_CMDTIEORJOIN)
	   GOTO 9998
	ELSEIF  (.NOT.BASEDG) THEN
	   CALL MOAN(MSG_NOBASEDEF)
	   CALL LEARN(MSG_DEFINEBASE)
	   GOTO 9998
C
C move cursor onto line
	ELSE
	   CALL MOVTOL(FOCXY,IHCXY,EDGLNE,CSXY)
	   FRCING=.TRUE.		! tell NDJOIN and NDTIE that
	   FRCSXY(1)=CSXY(1)		! FORCE EDGE has been called
	   FRCSXY(2)=CSXY(2)		! and save the position
	   POSCMD=.TRUE.
	ENDIF
	GOTO 9999
C
C Secondary command SLOPE
1100	CONTINUE
	SLOPE = .TRUE.
	GOTO 1250
C
C Secondary command FLAT
1200	CONTINUE
	SLOPE = .FALSE.
C
C only valid if editing (at present)
1250	IF (SINDEX.NE.STATE_EDIT) THEN
	   CALL MSGCMD(MOAN,MSG_CMDNOTVALID)
	   GOTO 9998
	ELSEIF  (.NOT.ZOPT) THEN
	   CALL MOAN(MSG_ONLYWITHZ)
	   GOTO 9998
	ELSEIF  (.NOT.FORCE_C_SETUP.AND.SLOPE) THEN
	   CALL MSGCMD(MOAN,MSG_NOPLANE)
	   GOTO 9998
	ELSEIF  (.NOT.FORCE_H_SETUP.AND..NOT.SLOPE) THEN
	   CALL MSGCMD(MOAN,MSG_NOPLANE)
	   GOTO 9998
C
C move cursor onto plane
	ELSE
	   IF (SLOPE) THEN
	      CALL PLANE_INTERPL(CSXY,FORCE_COEFFS,CSXY(3))
	   ELSE
	      CSXY(3) = FORCE_HEIGHT
	   ENDIF
	   POSCMD=.TRUE.
	ENDIF
	GOTO 9999
C
C Secondary command BEARING
C
1300	CORNER = .FALSE.		! ANGLE, not CORNER
	IF (DNREA.NE.0) ANG = ANGLE_BEARING(DREALS(1))
	GOTO 610
C
C Exit for valid linear constraints
9990	FNDMDE = 0			! not on found object
	CALL CURCON			! constrain cursor
	GOTO 9999
C
C Error exit
9998	CALL IGNCMD
C
9999	RETURN
	END
