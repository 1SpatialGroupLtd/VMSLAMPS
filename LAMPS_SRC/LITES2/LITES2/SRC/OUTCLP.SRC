C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1995-05-01 16:36:20.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION OUTCLP(VERTEX,CODE,INSIDE,LAST)
C
***	IDENT	01MY95
***	MODULE	OUTCLP
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C to output a feature in several parts, starting at any point in 
C the PPT pointed at by FPTOUT, then all the vertices from
C FVRTO to VERTEX and the first point in the list of intersections.
C The rest of the points in the list of intersections are output
C as 2 pt features
C
C returns .TRUE. for failure (collapse)
C and .FALSE. for success
C
C	Author:						RWR	 3-Mar-1986
C	Modified: CLIP INREGION fault (SPR2950/SPR2976)	TJM	29-Mar-1995
C
	IMPLICIT	NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:PACK/
***	PARAMETER/CMN:REGPAR/
C
***	COMMON/CMN:CSTRCT/
***	COMMON/CMN:DEFINE/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:OIIH/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:REGCMN/
***	COMMON/CMN:STRIKE/
C
C arguments
C
	INTEGER*4	VERTEX	! first vertex number of line
	INTEGER*4	CODE	! =1 create features inside region
				! =2 create features outside region
				! =3 create features inside and outside
				!    region
	LOGICAL		INSIDE	! (input) start of feature inside region
				! (output) start of next feature inside
				!          region
	LOGICAL		LAST	! flush out end of feature?
C
C local workspace
C
	REAL		XY(2)		! coordinates of current point
	INTEGER*4	VRT
	LOGICAL		FIRST		! .TRUE. when outputting first
					! point of line
	INTEGER		OPER
	REAL		ZP
	INTEGER		INDEX
C
C functions called
C
	LOGICAL		STRTFT
	INTEGER		GENNF
C
C initialise
C
	OUTCLP=.TRUE.			! assume failure
	VRT=VERTEX
	FIRST=.TRUE.
	INDEX = VERTEX - IHVO		! index into IH arrays
	OPER = DEFINITION(P_BREAK)
	IF (OPER.EQ.0) OPER = DEFINITION(P_OTHER)
C
C if first call for this feature, delete old segment (delete from screen)
C and get a pack for contruction
C
	IF (FVRTO.EQ.1) THEN
	   CALL LDSG(FOPAK,.TRUE.)
	   CALL CPYPAK(PAKLEN,FOPAK,COIPAK)
	ENDIF
C
C loop to output features
C
   10	CONTINUE
C
C start a new feature
C
C if not the first part of feature, need a new segment and FSN
C
	IF (FVRTO.NE.1.OR..NOT.FIRST) THEN
	   COIPAK(PAKSEG)=0
	   COIPAK(PAKFSN)=GENNF(COIPAK)
	ENDIF
C
C set limbo flag
C
	IF (CODE.EQ.1.AND.INSIDE.OR.
     &	    CODE.EQ.2.AND..NOT.INSIDE.OR.
     &	    CODE.EQ.3.) THEN
	   COIPAK(PAKFLG)=0		! not in LIMBO
	ELSE
	   COIPAK(PAKFLG)=LIMFLG	! create deleted
	ENDIF
C
C start feature
C
	IF (STRTFT(FOPAK,FOTC,FOFS,FOAC,FOTH)) GOTO 900
	CONFST = .FALSE.		! feature started
C
C if FPTOUT is pointing at anything, output the point and then
C free the PPT 
C
	IF (FPTOUT.NE.0) THEN
	   CALL PUTLNG(%VAL(FPTOUT+OFFX),XY(1))
	   CALL PUTLNG(%VAL(FPTOUT+OFFY),XY(2))
	   CONATT = 0				! no attributes yet
C
C add saved Z, if required
	   IF (ZOPT) THEN
	      CALL ADDZ(FIRSTZ,MXATTR,CONATT,COATTC,COATTV)
	   ENDIF
C
C update attributes from OPERATION
	   CALL LSTARR(OPER,CONATT,COATTC,COATTV,.TRUE.)
	   CALL ADCORD(XY,CONATT,COATTC,COATTV)
C
	   CALL FREE_MEM(REG_ZONE,FPTOUT,PPTLEN)
	   FPTOUT=0				! no FPTOUT any more
	ENDIF
C
C check if first point in intersection list is start of line.
C if so, then output it from intersection list, not as a vertex
C
	IF (FIRST) THEN
   20	   CONTINUE
	   IF (LSTINT.NE.0) THEN
	      CALL PUTLNG(%VAL(LSTINT+OFFX),XY(1))
	      CALL PUTLNG(%VAL(LSTINT+OFFY),XY(2))
	      IF (ABS(IHXY(1,INDEX)-XY(1)).LT.LINWDTH .AND.
     &	          ABS(IHXY(2,INDEX)-XY(2)).LT.LINWDTH) THEN
		 IF (VERTEX.EQ.1) THEN
		    CALL PUTLNG(%VAL(LSTINT),LSTINT)
		    GOTO 20
		 ELSE
		    VRT=VRT-1
		 ENDIF
	      ENDIF
	   ENDIF
C
C output vertices from "first vertex to output" up to start of this line
C
	   IF (FVRTO.LE.VRT) THEN
	      CALL ADDVRT(FOPAK,FVRTO,VRT,.FALSE.)
	   ENDIF
	   FIRST=.FALSE.
	ENDIF
C
C if there is a point in the list of intersections, then output it
C and move its PPT to FPTOUT.  If LAST there had better not be any
C points on LSTINT
C
	IF (LSTINT.NE.0) THEN
	   CALL PUTLNG(%VAL(LSTINT+OFFX),XY(1))
	   CALL PUTLNG(%VAL(LSTINT+OFFY),XY(2))
	   CONATT = 0				! no attributes yet
C
C add interpolated Z, if required
	   IF (ZOPT) THEN
	      CALL LINEAR_INTERPL(IHXY(1,INDEX),IHXY(1,INDEX+1),XY,
     &	                          IHZ(INDEX),IHZ(INDEX+1),ZP)
	      CALL ADDZ(ZP,MXATTR,CONATT,COATTC,COATTV)
	   ENDIF
C
C update attributes from OPERATION
	   CALL LSTARR(OPER,CONATT,COATTC,COATTV,.TRUE.)
C
C if invisible, flush up to last point
	   IF (LINE_VIS.EQ.0) THEN
	      CALL FLUSH(1)
	      OIENDS = 0		! invisible
	   ENDIF
C
C output this point
	   CALL ADCORD(XY,CONATT,COATTC,COATTV)
C
	   FPTOUT=LSTINT
	   IF (ZOPT) CALL PUTLNG(ZP,FIRSTZ)
	   CALL PUTLNG(%VAL(LSTINT),LSTINT)	! (may put 0 in LSTINT)
	   CALL PUTLNG(0,%VAL(FPTOUT))
	ENDIF
C
C if LAST then output last point
C
	IF (LAST) THEN
	   CONATT = 0				! no attributes yet
C
C add interpolated Z, if required
	   IF (ZOPT) THEN
	      CALL ADDZ(FOTHAT(3),MXATTR,CONATT,COATTC,COATTV)
	   ENDIF
C
C update attributes from OPERATION
	   CALL LSTARR(OPER,CONATT,COATTC,COATTV,.TRUE.)
C
C if invisible, flush up to last point
	   IF (LINE_VIS.EQ.0) THEN
	      CALL FLUSH(1)
	      OIENDS = 0		! invisible
	   ENDIF
	   CALL ADCORD(FOTHAT,CONATT,COATTC,COATTV)
	ENDIF
C
C if two point line, and two points are identical, abandon construction;
C (this happens if two lines of region boundary lie atop one another)
C otherwise end construction
C
	IF (.NOT.LAST.AND.COIIND.EQ.2.AND.COIFST.AND.
     &	    XY(1).EQ.COIXY(1,2).AND.XY(2).EQ.COIXY(2,2)) THEN
	   CALL ABACON
	ELSE
	   IF (LAST.AND.COIIND.EQ.2.AND.COIFST) THEN
	      CALL ABACON
	   ELSE
	      CALL ENDFT
	   ENDIF
	ENDIF
C
C toggle INSIDE
C
	INSIDE=.NOT.INSIDE
C
C if there are any more points in intersection list, then start
C another new feature
C
	IF (LSTINT.NE.0) GOTO 10
C
C next vertex to output is at the end of this line
C
	FVRTO=VERTEX+1
C
	OUTCLP=.FALSE.		! successful completion
C
  900	CONTINUE
	RETURN
	END

