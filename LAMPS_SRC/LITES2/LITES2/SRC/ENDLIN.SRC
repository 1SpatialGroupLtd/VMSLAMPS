C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-05-17 17:52:52.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION ENDLIN
C
***	IDENT	17MY94
***	MODULE	ENDLIN
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RJH	17-JAN-1985
C
C Description
C
C    This function is part of the LITES2 Command Interface, and its
C purpose is to set up the current input buffer, and check if the
C end of line has been reached.
C    Details of the line to be read are obtained from the top of the
C stack.
C    The function returns true if there are no more commands on the
C line.
C
	IMPLICIT NONE
C
C Common Blocks
C
***     COMMON/LSL$CMNLSL:EXPC/
***     COMMON/CMN:GLOBAL/		! global variables
C
C Functions called
C
	LOGICAL		SKIP		! skips terminators, etc.
C
C Local variables
C
	INTEGER*4	LINADR		! address of input buffer
	INTEGER*4	LINCHS		! no. of chars on current line
	INTEGER*2	LINPTR		! pointer on current line
	INTEGER*2	SAVPTR		! saved decode pointer
	INTEGER*4	LININP		! current input line external ?
	LOGICAL		EOLN		! end of line ?
	INTEGER*4	LINARGL		! length of argument string
C
C Initialisation
C
	EOLN = .FALSE.
C
C Save decode pointer
C
	CALL DCPSAV(SAVPTR)
C
C Get details of line to read
C
	EXPLEN = 255			! use EXPDSC as scratch
	CALL POPSTK(LINADR,LINCHS,LINPTR,LININP,LINARGL,EXPDSC)
C
C Set up auxiliary buffer
C
	IF (.NOT. MOANED) THEN
	   CALL SETAUX(%VAL(LINADR),LINCHS)	! set aux. buffer
	   CALL DCPSET(LINPTR)			! set pointer
	   EOLN = SKIP()			! skip terminators, etc.
	   CALL PSHSTK(LINADR,LINCHS,LINPTR,LININP,LINARGL,EXPDSC)
	ENDIF
C
C Reset decode pointer
C
	CALL BSLN
	CALL DCPSET(SAVPTR)
C
C Assign function value
C
	ENDLIN = EOLN
C
C Return
C
	RETURN
	END
