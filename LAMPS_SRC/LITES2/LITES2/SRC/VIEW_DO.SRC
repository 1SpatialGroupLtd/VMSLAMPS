C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-05-10 11:13:44.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        SUBROUTINE VIEW_DO
C
***     IDENT   10MY96
***     MODULE  VIEW_DO
C
C       Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C       Written                                 RWR	Apr-1989
C
C	Device dependent routine to implement the VIEW command.
C	This is the full implementation for VAXstations
C	The routines that are called are in the LITES2 library.
C
        IMPLICIT NONE
C
***     PARAMETER/CMN:CHARS/		! character constants
***     PARAMETER/CMN:CONSTS/
***	PARAMETER/CMN:LICPAR/
***	PARAMETER/CMN:MOANMESS/
C
***	COMMON/CMN:DOUT/
***	COMMON/CMN:OVERLAY/
***	COMMON/CMN:VIEW/
***	COMMON/CMN:STDBFC/		! for working storage
C
C Functions
	EXTERNAL	NASTY,MOAN,HADBREAK
	EXTERNAL	DTI_COPY_BYTE_DATA
	EXTERNAL	DTI_COPY_LONG_DATA
	EXTERNAL	DTI_COPY_REAL_DATA
	EXTERNAL	DTI_COPY_WORD_DATA
	EXTERNAL	DTI_READ_BYTE_DATA
	EXTERNAL	DTI_READ_LONG_DATA
	EXTERNAL	DTI_READ_REAL_DATA
	EXTERNAL	DTI_READ_WORD_DATA
	LOGICAL		LICENSED
	INTEGER		CALLR
	LOGICAL		SETUP_USER
	LOGICAL		CHKENTRY
C
C w/s
	REAL		DX,DY,DZ
	REAL		ANGLE,DIST
	INTEGER		RETCOD
	INTEGER		I
	INTEGER		LEVEL
C
	IF (.NOT.LICENSED(LOCK_VIEW)) GOTO 9999
C
C if this is first call initialise VISLIB
	IF (.NOT.VIEW_INITIALISED) THEN
C
C map shareable image
	   VIEW_INITIALISED = SETUP_USER(VIEW_LOG_NAME,
     &	                                 VIEW_MAX_ROUTINES,
     &	                                 VIEW_NAMES,VIEW_ADDRESSES,
     &	                                 'VIEW routines','VIEW commands',
     &	                                 'VIEW',VIEW_MAPPED)
	   IF (.NOT.VIEW_INITIALISED) GOTO 9999
C
C check that all entry points have been found
	   VIEW_INITIALISED = .NOT.CHKENTRY(VIEW_LOG_NAME,
     &	                              VIEW_MAX_ROUTINES,
     &	                              VIEW_NAMES,VIEW_ADDRESSES)
	   IF (.NOT.VIEW_INITIALISED) GOTO 9999
C
C initialise VISALIB
	   CALL CALLR(HADBREAK,
     &	              DTI_COPY_BYTE_DATA,		! out
     &	              DTI_COPY_LONG_DATA,
     &	              DTI_COPY_REAL_DATA,
     &	              DTI_COPY_WORD_DATA,
     &	              DTI_READ_BYTE_DATA,
     &	              DTI_READ_LONG_DATA,
     &	              DTI_READ_REAL_DATA,
     &	              DTI_READ_WORD_DATA,
     &	              VIEW_VISA__NORMAL,		! in
     &	              VIEW_VISA__OUTSIDEVIEW,
     &	              %VAL(VIEW_ADDRESSES(XVISA_INIT)))
	ENDIF
C
C Current view must be set for all commands except VIEW NUMBER
	IF (VIEW_CURRENT.EQ.0.AND.DSECN.NE.2) THEN
	   CALL MOAN(MSG_NOCURVIEW)
	   CALL LEARN(MSG_USEVIEWCMD,'VIEW NUMBER')
	   GOTO 9990
	ENDIF
C
C Dispatch according to secondary command
	GOTO (100,200,300,400,500,600,700,800,900,
     &	      1000,1100,1200,1300,1400,1500,1600,1700,
     &	      1800,1900,2000,2100,2200,2300,2400,2500,
     &	      2600,2700,2800,2900,3000,3100,3200,3300,3400), DSECN
C
C Secondary command number out of range
	CALL MSGCMD(NASTY,MSG_ERRSECIND)
	GOTO 9990
C
C VIEW CREATE - initialise view - set VIEW_LEVEL_TOTAL
100 	CONTINUE
	IF (VIEW_CREATED(VIEW_CURRENT)) THEN
	   GOTO 9000
	ELSEIF (DNINT.NE.1) THEN
	   I = 1	! default
C
C check that number is in sensible range
	ELSEIF (DINTS(1).LT.1) THEN
	   CALL MSGCMD(MOAN,MSG_POSARGSRQD)
	   GOTO 9990
	ELSEIF (DINTS(1).GT.MAXLEVEL) THEN
	   CALL MOAN(MSG_VIEWCREATEMAX,MAXLEVEL)
	   GOTO 9990
	ELSE
	   I = DINTS(1)
	ENDIF
	IF (I.LT.VIEW_LEVEL(VIEW_CURRENT)) THEN
	   CALL MOAN(MSG_CURRVIEWLEVEL,VIEW_LEVEL(VIEW_CURRENT))
	   CALL LEARN(MSG_USEVIEWCMD,'VIEW LEVEL')
	   GOTO 9990
	ELSE
	   VIEW_LEVEL_TOTAL(VIEW_CURRENT) = I	! default
	   DO 110, LEVEL = 1,VIEW_LEVEL_TOTAL(VIEW_CURRENT)
	      VIEW_HAD_PALETTE(PALETTE_DISPLAY,LEVEL,VIEW_CURRENT) = .FALSE.
	      VIEW_HAD_PALETTE(PALETTE_IMAGE,LEVEL,VIEW_CURRENT)   = .FALSE.
	      VIEW_HAD_PALETTE(PALETTE_IFF,LEVEL,VIEW_CURRENT)     = .FALSE.
110	   CONTINUE
	ENDIF
	GOTO 9999
C
C VIEW NUMBER - selects view that following commands refer
200 	CONTINUE
	IF (DINTS(1).LE.0.OR.DINTS(1).GT.MAXVIEW) THEN
	   CALL MOAN(MSG_VIEWRNG,1,MAXVIEW)
	   GOTO 9990
	ELSE
	   VIEW_CURRENT = DINTS(1)
	ENDIF
	GOTO 9999
C
C VIEW DELETE - deletes current view and frees its data
300 	CONTINUE
	IF (VIEW_CREATED(VIEW_CURRENT)) THEN
	   RETCOD = CALLR(VIEW_ID(VIEW_CURRENT),
     &	                  %VAL(VIEW_ADDRESSES(XVISA_DELETE_VIEW)))
	   IF (.NOT.RETCOD) THEN
	      CALL MOAN(MSG_VISLIBERR)
	      CALL LITES2_SIGNAL(RETCOD)
	      GOTO 9990
	   ELSE
	      VIEW_CREATED(VIEW_CURRENT) = .FALSE.
	      DO 310, I=1,MAXLEVEL
	         VIEW_LEVEL_RENDERED(I,VIEW_CURRENT) = .FALSE.
310	      CONTINUE
	   ENDIF
	ELSE
	   CALL MOAN(MSG_VIEWNOTCREATED)
	   GOTO 9990
	ENDIF
	GOTO 9999
C
C VIEW LEVEL - next view to be created in level n
400 	CONTINUE
	IF (DINTS(1).LT.1) THEN
	   CALL MSGCMD(MOAN,MSG_POSARGSRQD)
	   GOTO 9990
	ELSEIF (DINTS(1).GT.VIEW_LEVEL_TOTAL(VIEW_CURRENT)) THEN
	   CALL MOAN(MSG_TOOFEWLEVELS,VIEW_LEVEL_TOTAL(VIEW_CURRENT))
	   CALL LEARN(MSG_USEVIEWCREATE)
	   GOTO 9990
	ELSE
	   VIEW_LEVEL(VIEW_CURRENT) = DINTS(1)
	ENDIF
	GOTO 9999
C
C VIEW CLEAR - erases the current view or specified level
500 	CONTINUE
	IF (.NOT.VIEW_CREATED(VIEW_CURRENT)) THEN
	   CALL MOAN(MSG_VIEWNOTCREATED)
	   GOTO 9990
	ELSE
	   IF (DNINT.GE.1) THEN
	      IF (DINTS(1).LT.1) THEN
	         CALL MSGCMD(MOAN,MSG_POSARGSRQD)
	         GOTO 9990
	      ELSEIF (DINTS(1).GT.VIEW_LEVEL_TOTAL(VIEW_CURRENT)) THEN
	         CALL MOAN(MSG_TOOFEWLEVELS,
     &	                  VIEW_LEVEL_TOTAL(VIEW_CURRENT))
	         CALL LEARN(MSG_USEVIEWCREATE)
	         GOTO 9990
	      ELSE
	         RETCOD = CALLR(VIEW_ID(VIEW_CURRENT),
     &	                        DINTS(1),
     &	                        %VAL(VIEW_ADDRESSES(XVISA_CLEAR_LEVEL)))
	         IF (.NOT.RETCOD) THEN
	            CALL MOAN(MSG_VISLIBERR)
	            CALL LITES2_SIGNAL(RETCOD)
	            GOTO 9990
	         ENDIF
	         VIEW_LEVEL_RENDERED(DINTS(1),VIEW_CURRENT) = .FALSE.
	         VIEW_LEVEL_GENERATED(DINTS(1),VIEW_CURRENT) = .FALSE.
	         VIEW_LEVEL_TERRAIN(DINTS(1),VIEW_CURRENT) = .FALSE.
	         VIEW_LEVEL_VECTOR(DINTS(1),VIEW_CURRENT) = .FALSE.
	      ENDIF
	   ELSE
	      RETCOD = CALLR(VIEW_ID(VIEW_CURRENT),
     &	                     %VAL(VIEW_ADDRESSES(XVISA_CLEAR_VIEW)))
	      IF (.NOT.RETCOD) THEN
	         CALL MOAN(MSG_VISLIBERR)
	         CALL LITES2_SIGNAL(RETCOD)
	         GOTO 9990
	      ENDIF
	      DO 510, I=1,MAXLEVEL
	         VIEW_LEVEL_RENDERED(I,VIEW_CURRENT) = .FALSE.
	         VIEW_LEVEL_GENERATED(I,VIEW_CURRENT) = .FALSE.
	         VIEW_LEVEL_TERRAIN(I,VIEW_CURRENT) = .FALSE.
	         VIEW_LEVEL_VECTOR(I,VIEW_CURRENT) = .FALSE.
510	      CONTINUE
	   ENDIF
	ENDIF
	GOTO 9999
C
C VIEW PIXELS - size of view to be created in pixels
600 	CONTINUE
	IF (VIEW_CREATED(VIEW_CURRENT)) THEN
	   GOTO 9000
	ELSEIF (DINTS(1).LT.1.OR.DINTS(2).LT.1) THEN
	   CALL MSGCMD(MOAN,MSG_POSARGSRQD)
	   GOTO 9990
	ELSEIF (DINTS(1).GT.32767.OR.DINTS(2).GT.32767) THEN
	   CALL MOAN(MSG_COMDRNGI,DPRI(1:DPRIL)//BLANK//DSEC(1:DSECL),
     &	         1,32767)
	   GOTO 9990
	ELSE
	   VIEW_PIXELS(1,VIEW_CURRENT) = DINTS(1)
	   VIEW_PIXELS(2,VIEW_CURRENT) = DINTS(2)
	ENDIF
	GOTO 9999
C
C VIEW WINDOW - specify limits of view
700 	CONTINUE
	CALL VIEW_WINDOW
	GOTO 9999
C
C VIEW EXAGGERATE - Z exaggeration factor
800 	CONTINUE
	IF (VIEW_CREATED(VIEW_CURRENT)) THEN
	   GOTO 9000
	ELSEIF (DREALS(1).LE.0.0) THEN
	   CALL MSGCMD(MOAN,MSG_POSARGSRQD)
	   GOTO 9990
	ELSE
	   VIEW_ZSCALE(VIEW_CURRENT) = DREALS(1)
	ENDIF
	GOTO 9999
C
C VIEW SAMPLE - sub sampling interval
900 	CONTINUE
	IF (DINTS(1).LT.1.OR.DINTS(2).LT.1) THEN
	   CALL MSGCMD(MOAN,MSG_POSARGSRQD)
	   GOTO 9990
	ELSEIF (DINTS(1).GT.32767.OR.DINTS(2).GT.32767) THEN
	   CALL MOAN(MSG_COMDRNGI,DPRI(1:DPRIL)//BLANK//DSEC(1:DSECL),
     &	         1,32767)
	   GOTO 9990
	ELSE
	   VIEW_SAMPLE(1,VIEW_CURRENT) = DINTS(1)
	   VIEW_SAMPLE(2,VIEW_CURRENT) = DINTS(2)
	ENDIF
	GOTO 9999
C
C VIEW FROM - define observer position
1000 	CONTINUE
	IF (VIEW_CREATED(VIEW_CURRENT)) THEN
	   GOTO 9000
	ELSEIF (VIEW_TO_SETUP(VIEW_CURRENT).AND.
     &	    DREALS(1).EQ.VIEW_TO(1,VIEW_CURRENT).AND.
     &	    DREALS(2).EQ.VIEW_TO(2,VIEW_CURRENT)) THEN
	   CALL MOAN(MSG_DUPPOSITION,'target')
	   GOTO 9990
	ENDIF
	CALL CPYPAK(3,DREALS,VIEW_FROM(1,VIEW_CURRENT))
	VIEW_FROM_SETUP(VIEW_CURRENT) = .TRUE.
C
C may now be able to calculate target point, or distance bearing 
C and elevation
	IF (.NOT.VIEW_TO_SETUP(VIEW_CURRENT)) THEN
	   GOTO 1450
	ELSE
	   GOTO 1150
	ENDIF
C
C VIEW TO - defines target position
1100 	CONTINUE
	IF (VIEW_CREATED(VIEW_CURRENT)) THEN
	   GOTO 9000
	ELSEIF (VIEW_FROM_SETUP(VIEW_CURRENT).AND.
     &	    DREALS(1).EQ.VIEW_FROM(1,VIEW_CURRENT).AND.
     &	    DREALS(2).EQ.VIEW_FROM(2,VIEW_CURRENT)) THEN
	   CALL MOAN(MSG_DUPPOSITION,'observer')
	   GOTO 9990
	ENDIF
	CALL CPYPAK(3,DREALS,VIEW_TO(1,VIEW_CURRENT))
	VIEW_TO_SETUP(VIEW_CURRENT) = .TRUE.
	IF (.NOT.VIEW_FROM_SETUP(VIEW_CURRENT)) GOTO 1450
C
C calculate new vectors?
1150	CONTINUE
	DX = VIEW_TO(1,VIEW_CURRENT) - VIEW_FROM(1,VIEW_CURRENT)
	DY = VIEW_TO(2,VIEW_CURRENT) - VIEW_FROM(2,VIEW_CURRENT)
	DZ = VIEW_TO(3,VIEW_CURRENT) - VIEW_FROM(3,VIEW_CURRENT)
C
C bearing
	ANGLE = ATAN2(DX,DY)	       ! bearing (angle clockwise from N)
	IF (ANGLE.LT.0.0) ANGLE = ANGLE + TWOPI
	VIEW_BEARING(VIEW_CURRENT) = ANGLE*180.0/PI
C
C distance
	DIST = SQRT(DX*DX+DY*DY)
	VIEW_DISTANCE(VIEW_CURRENT) = DIST	
C
C elevation
	VIEW_ELEVATION(VIEW_CURRENT) = ATAN2(DZ,DIST)*180.0/PI
C
	VIEW_HAD_BEARING(VIEW_CURRENT) = .TRUE.
	VIEW_HAD_DISTANCE(VIEW_CURRENT) = .TRUE.
	VIEW_HAD_ELEVATION(VIEW_CURRENT) = .TRUE.
	GOTO 9999
C
C VIEW DISTANCE - distance to target point
1200 	CONTINUE
	IF (VIEW_CREATED(VIEW_CURRENT)) THEN
	   GOTO 9000
	ELSEIF (DREALS(1).LE.0.0) THEN
	   CALL MSGCMD(MOAN,MSG_POSARGSRQD)
	   GOTO 9990
	ELSE
	   VIEW_DISTANCE(VIEW_CURRENT) = DREALS(1)
	ENDIF
	VIEW_HAD_DISTANCE(VIEW_CURRENT) = .TRUE. 
	GOTO 1450
C
C VIEW BEARING - bearing to target
1300 	CONTINUE
	IF (VIEW_CREATED(VIEW_CURRENT)) THEN
	   GOTO 9000
	ENDIF
	VIEW_BEARING(VIEW_CURRENT) = DREALS(1)
	VIEW_HAD_BEARING(VIEW_CURRENT) = .TRUE.	   
	GOTO 1450
C
C VIEW ELEVATION - elevation of target
1400 	CONTINUE
	IF (VIEW_CREATED(VIEW_CURRENT)) THEN
	   GOTO 9000
	ENDIF
	VIEW_ELEVATION(VIEW_CURRENT) = DREALS(1)
	VIEW_HAD_ELEVATION(VIEW_CURRENT) = .TRUE.	   
C
C check if new value of target is required, or if From can be calculated
1450	CONTINUE
	IF (.NOT.VIEW_FROM_SETUP(VIEW_CURRENT).AND.
     &	    .NOT.VIEW_TO_SETUP(VIEW_CURRENT)) GOTO 9999
	IF (VIEW_HAD_BEARING(VIEW_CURRENT).AND.
     &	    VIEW_HAD_DISTANCE(VIEW_CURRENT).AND.
     &	    VIEW_HAD_ELEVATION(VIEW_CURRENT)) THEN
	   ANGLE = VIEW_BEARING(VIEW_CURRENT)*PI/180.0
	   DX = VIEW_DISTANCE(VIEW_CURRENT)*SIN(ANGLE)
	   DY = VIEW_DISTANCE(VIEW_CURRENT)*COS(ANGLE)
	   ANGLE = VIEW_ELEVATION(VIEW_CURRENT)*PI/180.0
	   DZ = VIEW_DISTANCE(VIEW_CURRENT)*TAN(ANGLE)
	   IF (VIEW_FROM_SETUP(VIEW_CURRENT)) THEN
	      VIEW_TO(1,VIEW_CURRENT) = VIEW_FROM(1,VIEW_CURRENT)+DX
	      VIEW_TO(2,VIEW_CURRENT) = VIEW_FROM(2,VIEW_CURRENT)+DY
	      VIEW_TO(3,VIEW_CURRENT) = VIEW_FROM(3,VIEW_CURRENT)+DZ
	      VIEW_TO_SETUP(VIEW_CURRENT) = .TRUE.
	   ELSEIF (VIEW_TO_SETUP(VIEW_CURRENT)) THEN
	      VIEW_FROM(1,VIEW_CURRENT) = VIEW_TO(1,VIEW_CURRENT)-DX
	      VIEW_FROM(2,VIEW_CURRENT) = VIEW_TO(2,VIEW_CURRENT)-DY
	      VIEW_FROM(3,VIEW_CURRENT) = VIEW_TO(3,VIEW_CURRENT)-DZ
	      VIEW_FROM_SETUP(VIEW_CURRENT) = .TRUE.
	   ENDIF
	ENDIF
	GOTO 9999
C
C VIEW CONE - cone of vision
1500 	CONTINUE
	IF (VIEW_CREATED(VIEW_CURRENT)) THEN
	   GOTO 9000
	ELSEIF (DREALS(1).LE.0.0.OR.DREALS(1).GE.180.0) THEN
	   CALL MOAN(MSG_ANGNOTINRNGE,0.0,180.0,'degrees')
	   GOTO 9990
	ELSE
	   VIEW_CONE(VIEW_CURRENT) = DREALS(1)
	ENDIF
	GOTO 9999
C
C VIEW FRONT - distance to front of model
1600 	CONTINUE
	IF (VIEW_CREATED(VIEW_CURRENT)) THEN
	   GOTO 9000
	ELSEIF (DREALS(1).LE.0.0) THEN
	   CALL MSGCMD(MOAN,MSG_POSARGSRQD)
	   GOTO 9990
	ELSE
	   VIEW_FRONT(VIEW_CURRENT) = DREALS(1)
	ENDIF
	GOTO 9999
C
C VIEW BACK - distance to back of model
1700 	CONTINUE
	IF (VIEW_CREATED(VIEW_CURRENT)) THEN
	   GOTO 9000
	ELSEIF (DREALS(1).LE.0.0) THEN
	   CALL MSGCMD(MOAN,MSG_POSARGSRQD)
	   GOTO 9990
	ELSE
	   VIEW_BACK(VIEW_CURRENT) = DREALS(1)
	ENDIF
	GOTO 9999
C
C VIEW ROLL - angle of roll
1800 	CONTINUE
	IF (VIEW_CREATED(VIEW_CURRENT)) GOTO 9000
	VIEW_ROLL(VIEW_CURRENT) = DREALS(1)
	GOTO 9999
C
C VIEW LIGHT - specification of light  sources
1900 	CONTINUE
	CALL VIEW_LIGHT
	GOTO 9999
C
C VIEW COLOUR - specification of colours
2000 	CONTINUE
	CALL VIEW_COLOUR
	GOTO 9999
C
C VIEW FOG - specification of fogging details
2100 	CONTINUE
	CALL VIEW_FOG
	GOTO 9999
C
C VIEW RENDER - activates the viewing module (passing workspace)
2200 	CONTINUE
	CALL VIEW_RENDER(STDBFM,%VAL(STDBFX_ADDR),
     &	                 %VAL(STDBFY_ADDR),%VAL(STDBFZ_ADDR))
	GOTO 9999
C
C VIEW DISPLAY - outputs current view to screen
2300 	CONTINUE
	CALL VIEW_DISPLAY(DTI_BMAX,%VAL(DTIB_ADDR))
	GOTO 9999
C
C VIEW DTI - outputs current view to DTI file
2400 	CONTINUE
	CALL VIEW_OUTPUT_DTI(DTI_BMAX,%VAL(DTIB_ADDR))
	GOTO 9999
C
C VIEW GENERATE - 
2500 	CONTINUE
	IF (.NOT.VIEW_CREATED(VIEW_CURRENT)) THEN
	   CALL MOAN(MSG_VIEWNOTCREATED)
	   GOTO 9990
	ENDIF
C
C get the viewing module to generate a picture
	CALL VIEW_GENERATE
	GOTO 9999
C
C VIEW PALETTE - pass the colour of specified display and overlay to
C current view and level (passing some workspace)
2600 	CONTINUE
	CALL VIEW_PALETTE(STDBFM,%VAL(STDBFX_ADDR),%VAL(STDBFY_ADDR),
     &	                  %VAL(STDBFZ_ADDR))
	GOTO 9999
C
C VIEW AMBIENT -
2700 	CONTINUE
	CALL VIEW_AMBIENT
	GOTO 9999
C
C VIEW ILLUMINATION -
2800 	CONTINUE
	CALL VIEW_ILLUMINATION
	GOTO 9999
C
C VIEW DEPTH -
2900 	CONTINUE
	CALL VIEW_DEPTH
	GOTO 9999
C
C VIEW FC_OFFSET
3000 	CONTINUE
	IF (DINTS(1).LT.0.OR.DINTS(1).GT.32767) THEN
	   CALL MOAN(MSG_COMDRNGI,DPRI(1:DPRIL)//BLANK//DSEC(1:DSECL),
     &	         0,32767)
	   GOTO 9990
	ELSE
	   VIEW_FC_OFFSET = DINTS(1)
	ENDIF	   
	GOTO 9999
C
C VIEW Z_INTERPRETATION-
3100 	CONTINUE
	CALL VIEW_Z_INTERP
	GOTO 9999
C
C VIEW SPHERE
3200 	CONTINUE
	CALL VIEW_SPHERE
	GOTO 9999
C
C VIEW INDEX
3300 	CONTINUE
	CALL VIEW_INDEX
	GOTO 9999
C
C VIEW METHOD
3400 	CONTINUE
	CALL VIEW_METHOD
	GOTO 9999
C
C view already created, cannot alter this characteristic
9000	CONTINUE
	CALL MSGCMD(MOAN,MSG_VIEWCREATED)
	CALL LEARN(MSG_VIEWDELETE)
9990	CALL IGNCMD
9999	RETURN
        END
