C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1995-02-07 14:00:36.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        SUBROUTINE DOLARG
C
***     IDENT   07FE95
***     MODULE  DOLARG
C
C       Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C       Written                                 RWR	 3-Jan-1985
C
C	LITES2 cartographic editor LARGER command.
C
        IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:ACS/
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:CTXS/
***	PARAMETER/CMN:CONSTS/		! values for PI & TWOPI
***	PARAMETER/CMN:END/
***     PARAMETER/CMN:MOANMESS/         ! moan constants
***	PARAMETER/CMN:PACK/
***	PARAMETER/CMN:STAPAR/		! state constants
C
***	COMMON/CMN:ACS/
***	COMMON/CMN:ATTBTS/
***	COMMON/CMN:DEFINE/
***	COMMON/CMN:CSTRCT/
***	COMMON/CMN:CTXS/
***     COMMON/CMN:DOUT/                ! cmd dec. output
***	COMMON/LSL$CMNFRT:FRTCOM/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:MODIFY/
***	COMMON/CMN:OIIH/		! current construction
***	COMMON/CMN:OSPTSZ/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:STATE/		! state variables
***	COMMON/CMN:STRIKE/
***	COMMON/LSL$CMNLSL:TXTC/
C
C Functions called
C
	LOGICAL		COIDLE
	LOGICAL		PROCESS_CTRL
C
C Local Variables
C
	REAL		DX,DY		! differences in X and Y
	INTEGER		ADDR		! address of current ctx
	INTEGER		STAADR,FINADR	! addresses of first and last CTX
	INTEGER		TMPTH
	INTEGER		OPER
	INTEGER		DUMMY
C
C only operates on scaled symbol and text
C
	IF (SINDEX.EQ.STATE_MODIFY.AND.
     &	COIPAK(PAKGT).NE.SCATYP.AND.
     &	(COIPAK(PAKGT).NE.TEXTYP.OR..NOT.HEIOPT) .OR.
     &	SINDEX.NE.STATE_MODIFY.AND.
     &	FOPAK(PAKGT).NE.SCATYP.AND.
     &	(FOPAK(PAKGT).NE.TEXTYP.OR..NOT.HEIOPT)) THEN
	   CALL MOAN(MSG_NOLARGER)
	   CALL IGNCMD
	   GOTO 900
	ENDIF
C
C when in text state, and making point sizes bigger, check for
C maximum size; (don't go into MODIFY state unnecessarily)
C
	IF (SINDEX.EQ.STATE_TEXT.AND.POIOPT.AND.FOTH.EQ.24.AND.
     &	      (FTRCTXD(CTXD_NCTX).LE.1)) THEN
	   TXTPTR = PROCESS_CTRL(FOTXT(1:FOPTR),TXTBUF,MAX_TXTLIM)
	   CALL MOAN(MSG_POINTSZMAX,TXTDSC)   ! already max size
	   CALL IGNCMD
	   GOTO 900
	ENDIF
C
C if not in Modify state, get into it
C
	IF (SINDEX.NE.STATE_MODIFY) THEN
	   IF (COIDLE(.TRUE.)) THEN		! delete found object
						! on completion
	      CALL IGNCMD
	      GOTO 900
	   ENDIF
	ENDIF
C
C       if doing anything that involves changing size, then stop it
C
	IF (NDMODE.EQ.END_STRETCH.OR.NDMODE.EQ.END_ALIGN) THEN
	   IF (NDMODE.EQ.END_STRETCH) CALL FRECUR
	   NDMODE=END_CONSTRUCT
	ENDIF
C
C set flag to tell RFDRAW that something is altered
C
	MODMOD=.TRUE.
	FLG_GEOCHANGE = .TRUE.		! geometrical change
C
C this is classed as a transformation (in terms of operations)
	OPER = DEFINITION(P_TRANSFORM)
	IF (OPER.EQ.0) OPER = DEFINITION(P_OTHER)
C
C if scaled symbol compute present size and orientation
C
	IF (COIPAK(PAKGT).EQ.SCATYP) THEN
	   DX=COIXY(1,3)-COIXY(1,2)
	   DY=COIXY(2,3)-COIXY(2,2)
	   COIANG=ATAN2(DY,DX)
	   IF (COIANG.LT.0.0) COIANG=COIANG+TWOPI
	   DIST=SQRT(DX**2+DY**2)
C
C change size by 10%, and recompute alignment
C
	   DIST=DIST+DIST/10
	   COIXY(1,3)=COIXY(1,2)+COS(COIANG)*DIST
	   COIXY(2,3)=COIXY(2,2)+SIN(COIANG)*DIST
C
C update attributes
	   CALL LSTARR(OPER,COINATT,COIATTC,COIATTV(1,2),.TRUE.)
C
C deal with text (HEIGHT OPTION defined)
C
	ELSEIF (COIPAK(PAKGT).EQ.TEXTYP) THEN
C
C get start and end of linked list to scan
	   IF (SUBTXT) THEN			! only update home CTX
	      STAADR = COICTXD(CTXD_HOME)
	      FINADR = COICTXD(CTXD_HOME)
	   ELSE
	      STAADR = COICTXD(CTXD_FSTCTX)
	      FINADR = COICTXD(CTXD_LSTCTX)
	   ENDIF
C
C scan list of CTXs
	   ADDR = STAADR
   10	   CONTINUE
C
C get existing value
	   CALL PUTLNG(%VAL(ADDR+CTX_O_TH),TMPTH)
	   IF (POIOPT) THEN			! using points
   20	      CONTINUE
	      IF (TMPTH.EQ.24) THEN		! already max size
	         TXTPTR = PROCESS_CTRL(%VAL(ADDR+CTX_O_DESC),
     &						TXTBUF,MAX_TXTLIM)
	         CALL MOAN(MSG_POINTSZMAX,TXTDSC)
	      ELSE
	         TMPTH=TMPTH+1
	         IF (OSPTSZ(TMPTH).LE.0.0) GOTO 20	! ignore invalid
							! point sizes
	      ENDIF
	   ELSE				! using mms
	      IF (HGTINC.GT.0.0) THEN		! increment defined
	         TMPTH=TMPTH + IFIX(HGTINC*100.0) ! add on increment
	      ELSE
	         TMPTH=TMPTH+MAX(TMPTH/10,1)	! add on .01, or 10%
	      ENDIF
	   ENDIF
C
C update CTX
	   CALL PUTLNG(TMPTH,%VAL(ADDR+CTX_O_TH))
C
C update attributes for this point
	   CALL LSTARR(%VAL(ADDR+CTX_O_ATTR),CONATT,
     &	                           COATTC,COATTV,.FALSE.)
	   CALL LSTARR(OPER,CONATT,COATTC,COATTV,.TRUE.)
	   CALL ARRLST(CONATT,COATTC,COATTV,
     &                              %VAL(ADDR+CTX_O_ATTR),DUMMY)
C
C update CONTH, if this is home CTX
	   IF (ADDR.EQ.COICTXD(CTXD_HOME)) CONTH = TMPTH
C
C try next CTX in list?
	   IF (ADDR.NE.FINADR) THEN
	      CALL PUTLNG(%VAL(ADDR),ADDR)
	      GOTO 10
	   ENDIF
	ENDIF
C
  900	CONTINUE
        RETURN
        END
