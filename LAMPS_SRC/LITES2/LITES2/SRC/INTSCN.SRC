C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-05-10 18:15:04.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	REAL FUNCTION INTSCN(LINE,POINT,HT_VEC,USE_HEIGHT)
C
***	MODULE	INTSCN
***	IDENT	10MY96
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author  Clarke Brunt
C
C To find the distance from the cursor of the best intersection
C between a line segment and the current cursor constraint
C (which may be constrained on the found object).
C
C LINE is the line segment (first subscript x or y, second
C subscript point 1 or 2).
C POINT returns the intersection position
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:EFNLUN/
***	PARAMETER/CMN:PACK/
C
***	COMMON/CMN:OPTION/
***	COMMON/CMN:MASTER/
***	COMMON/LSL$CMNFRT:FRTCOM/
***	COMMON/CMN:STRIKE/
C
C arguments
	REAL	LINE(2,2)
	REAL	POINT(3)
C
C the following arguments are used if FNDMDE = 0, when on external
C constraint
	REAL	HT_VEC(2)	! Heights at end of line
	LOGICAL	USE_HEIGHT	! is HT_VEC to be used
C
C functions called
	LOGICAL	INTSCTR
	LOGICAL INTLARC
C
C w/s
	INTEGER START,END		! indices on FOXY
	INTEGER	I
	REAL	R
	REAL	XY(4)
	REAL	XXYY(2,2)
	EQUIVALENCE	(XY,XXYY)
	INTEGER NUM
	INTEGER IN1,IN2
	INTEGER	INLIN(2),INARC(2)
	EQUIVALENCE (IN1,INLIN),(IN2,INARC)
	LOGICAL TOUCH
	REAL	TMP1,TMP2
	INTEGER TMP1I,TMP2I
	EQUIVALENCE (TMP1,TMP1I),(TMP2,TMP2I)
	LOGICAL	GOT
C
	INTSCN = 1E38			! v. large value to start with
C
C are we intersecting with a cursor constraint?
	IF (FNDMDE.EQ.0) THEN		! yes
	   IF (SCSARC) THEN
	      CALL LINARC(LINE,SCSAUX,NUM,XY(1),XY(3),INLIN,INARC,TOUCH)
	      IF (NUM.EQ.0) GOTO 999	! no intersections
	      GOT = .FALSE.
	      DO 5 I=1,NUM
	         IF (ABS(INLIN(I)).GT.1.OR.ABS(INARC(I)).GT.1) GOTO 5
	         R = (XXYY(1,I)-CONTXY(1))**2+(XXYY(2,I)-CONTXY(2))**2
	         IF (R.GT.INTSCN) GOTO 5	! worse than present
	         INTSCN = R
	         GOT = .TRUE.
	         NVRTX = .FALSE.		! assume not on vertex
	         IF (INLIN(I).NE.0) THEN	! on vertex of line segment
	            NVRTX = .TRUE.
	            NSCND = (INLIN(I).GT.0)
	         ENDIF
	         POINT(1) = XXYY(1,I)
	         POINT(2) = XXYY(2,I)
5	      CONTINUE
	      IF (.NOT.GOT) GOTO 999
	   ELSE
	      IF (INTSCTR(SCSTXY,LINE,XY,IN1,IN2)) GOTO 999
	      IF (IN2.EQ.0) GOTO 999	! not within line segment
	      INTSCN = (XY(1)-CONTXY(1))**2+(XY(2)-CONTXY(2))**2
	      NVRTX = .FALSE.		! assume not on vertex
	      IF (IN2.GT.0) THEN	! on vertex of line segment
	         NVRTX = .TRUE.
	         NSCND = (IN2.GT.1)
	      ENDIF
	      POINT(1) = XY(1)
	      POINT(2) = XY(2)
	   ENDIF
C
C interpolate Z if required
	   IF (ZOPT.AND.USE_HEIGHT) THEN
	      CALL PUTLNG(HT_VEC(1),TMP1)
	      CALL PUTLNG(HT_VEC(2),TMP2)
	      IF (NVRTX) THEN
	         IF (NSCND) THEN
	            CALL PUTLNG(TMP2,POINT(3))
	         ELSE
	            CALL PUTLNG(TMP1,POINT(3))
	         ENDIF
C
C interpolate between the ends
	      ELSE
	         CALL LINEAR_INTERPL(LINE(1,1),LINE(1,2),
     &	                  POINT,TMP1,TMP2,POINT(3))
	      ENDIF
	   ELSE
	      CALL PUTLNG(IFF_ABSENT,POINT(3))
	   ENDIF
	   GOTO 999
	ENDIF
C
C assume intersecting with the found object
C
C is the found object a circle arc?
C
	IF (FOPAK(PAKGT).GE.CLOTYP.AND.FOPAK(PAKGT).LE.FULTYP) GOTO 100
C
C The cursor is on the linear found object, on or after vertex FOVRT.
C We look for intersection with the part of the found object around
C FOVRT contained within FOXY, and within CRITR2 of cursor.
C
C determine first vertex in FOXY to consider
	START = FOVRT-FOVO		! offset in FOXY of FOVRT
10	IF ((FOXY(1,START)-CONTXY(1))**2+(FOXY(2,START)-CONTXY(2))**2
     &		.GT.CRITR2) GOTO 20
	IF (START.EQ.1) GOTO 20		! reached beginning of FOXY
	START = START-1
	GOTO 10
C
C determine last vertex
20	END = FOVRT-FOVO
30	IF (END.GE.FOTOP) THEN
	   END = FOTOP-1
	   GOTO 40
	ENDIF
	IF ((FOXY(1,END+1)-CONTXY(1))**2+(FOXY(2,END+1)-CONTXY(2))**2
     &		.GT.CRITR2) GOTO 40
	END = END+1
	GOTO 30
C
C Look for best intersection along selected bit
40	DO 60 I=START,END
	   IF (INTSCTR(FOXY(1,I),LINE,XY,IN1,IN2)) GOTO 60
	   IF (IN1.EQ.0.OR.IN2.EQ.0) GOTO 60	! not within both lines
C
C is distance to intersection better than what we have already?
	   R = (XY(1)-CONTXY(1))**2+(XY(2)-CONTXY(2))**2
	   IF (R.GT.INTSCN) GOTO 60		! worse than present
C
C better, so remember it
	   INTSCN = R
	   ITVRT = I+FOVO			! absolute vertex number
	   NVRTX = .FALSE.			! assume not on vertex
	   IF (IN1.GT.0) THEN			! on vertex of FO
	      NVRTX = .TRUE.
	      IF (IN1.GT.1) ITVRT = ITVRT+1	! second vertex of pair
	   ENDIF
	   POINT(1) = XY(1)
	   POINT(2) = XY(2)
C
C interpolate Z if required
	   IF (ZOPT.AND.FO_Z_COL.GT.0) THEN
	      TMP1I = FOATTV(FO_Z_COL,I)
	      TMP2I = FOATTV(FO_Z_COL,I+1)
	      IF (NVRTX) THEN
	         IF (NSCND) THEN
	            CALL PUTLNG(TMP2,POINT(3))
	         ELSE
	            CALL PUTLNG(TMP1,POINT(3))
	         ENDIF
C
C interpolate between the ends
	      ELSE
	         CALL LINEAR_INTERPL(FOXY(1,I),FOXY(1,I+1),
     &	                  POINT,TMP1,TMP2,POINT(3))
	      ENDIF
	   ELSE
	      CALL PUTLNG(IFF_ABSENT,POINT(3))
	   ENDIF
60	CONTINUE
	GOTO 999
C
C found object is a circle arc
C
100	CONTINUE
	NVRTX = .FALSE.			! assume not on vertex
C
C get intersection point(s) of line and arc
	IF (INTLARC(LINE,FOAUX,FOARCBX,NUM,XY(1),XY(3),TOUCH)) GOTO 999 ! no cut
C
C get distance from first point to cursor position
	INTSCN = (XY(1)-CONTXY(1))**2+(XY(2)-CONTXY(2))**2
	POINT(1) = XY(1)
	POINT(2) = XY(2)
C
C perhaps more than one intersection - if second is closer to cursor
C then use it
C
	IF (NUM.EQ.2) THEN
	   R = (XY(3)-CONTXY(1))**2+(XY(4)-CONTXY(2))**2
	   IF (R.LT.INTSCN) THEN
	      POINT(1) = XY(3)
	      POINT(2) = XY(4)
	      INTSCN = R
	   ENDIF
	ENDIF
C
C interpolate Z if required
	IF (ZOPT.AND.FOC_DEFINED)
     &	         CALL PLANE_INTERPL(POINT,FOCOEFFS,POINT(3))
	GOTO 999
C
999	RETURN
	END

