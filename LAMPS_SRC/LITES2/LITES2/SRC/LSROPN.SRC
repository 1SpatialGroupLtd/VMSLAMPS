	INTEGER FUNCTION LSROPN(IM,LUN)
C
***     IDENT   01JL93
***     MODULE  LSROPN
C
C       Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C       Written                                 CCB	25-Nov-1990
C
C	Open an LSR file
C
        IMPLICIT NONE
C
***	PARAMETER/LSL$CMNDTI:DTIPAR/
***     PARAMETER/CMN:MOANMESS/
C
***	COMMON/CMN:GLOBAL/
***	COMMON/CMN:IMAGE/
***	COMMON/CMN:LSRLIB/
C
C Argument
	INTEGER	IM			! image number
	INTEGER		LUN
C
C Functions
	INTEGER	CALLR
	INTEGER	SIGCHS
	INTEGER	LSRCLS
C
C Local Variables
	INTEGER*4	OK		! file parse return code
	INTEGER*4	NAMLEN		! length of filename
	INTEGER		I,PIX(2)
	REAL*8		ORGXY(2)
	INTEGER		ACCESS_MODE
C
C get length of file name
	NAMLEN = SIGCHS(IMAGNAM(IM))
C
C clear various pointers, so we know if they have been created
	IMAGE_RAC(IM) = 0
	IMAGE_PREG(IM) = 0
	IMAGE_CREG(IM) = 0
C
C Open LSR file
	IMAGE_RAC(IM) = CALLR(%VAL(LSR_ADDRESSES(XLSR_ALLOC_RAC)))
	IF (IMAGE_RAC(IM).EQ.0) GOTO 9042
C
	IF (IMAGE_EDIT(IM)) THEN
	   ACCESS_MODE = RAST_WRITE
	ELSE
	   ACCESS_MODE = RAST_READ_ONLY
	ENDIF
	OK = CALLR(
     &		%VAL(IMAGE_RAC(IM)),
     &		%REF(IMAGNAM(IM)(:NAMLEN)//CHAR(0)),
     &		%VAL(ACCESS_MODE),
     &		%VAL(RAST_STORAGE_NORMAL),
CCC     &		%VAL(RAST_STORAGE_MAPPED),
     &		%VAL(.TRUE.),
     &		IMAGE_COLUMNS(IM),IMAGE_ROWS(IM),
     &		%VAL(LSR_ADDRESSES(XLSR_CREATE_DATA_RAC)))
	IF (OK.NE.GOTH__NORMAL) THEN
	   CALL MOAN(MSG_ERROPIMG,'LSR',IMAGNAM(IM)(:NAMLEN))
	   OK = CALLR(
     &		%VAL(IMAGE_RAC(IM)),
     &		%VAL(LSR_ADDRESSES(XLSR_FREE_RAC)))
	   IMAGE_RAC(IM) = 0
	   GOTO 9041
	ENDIF
C
C Initialise cache
	OK = CALLR(
     &		%VAL(IMAGE_RAC(IM)),%VAL(RAST_CACHE_GLOBAL),
     &		%VAL(LSR_ADDRESSES(XLSR_INIT_CACHE)))
	IF (OK.NE.GOTH__NORMAL) GOTO 9041
C
C Fill in origin and scale (pixel size)
	OK = CALLR(
     &		%VAL(IMAGE_RAC(IM)),
     &		ORGXY(1),ORGXY(2),
     &		%VAL(LSR_ADDRESSES(XLSR_GET_RAC_PIXEL_SCALE)))
	IF (OK.NE.GOTH__NORMAL) GOTO 9041
	IMAGE_OPIXELSIZE(1,IM) = ORGXY(1)	! R*8 -> R*4
	IMAGE_OPIXELSIZE(2,IM) = ORGXY(2)
	IMAGE_PIXELSIZE(1,IM) = IMAGE_OPIXELSIZE(1,IM)
	IMAGE_PIXELSIZE(2,IM) = IMAGE_OPIXELSIZE(2,IM)
	OK = CALLR(
     &		%VAL(IMAGE_RAC(IM)),
     &		I,
     &		%VAL(LSR_ADDRESSES(XLSR_GET_RAC_PIXEL_TYPE)))
	IF (OK.NE.GOTH__NORMAL) GOTO 9041
	IMAGE_AREA(IM) = I.EQ.RAST_BY_AREA
	OK = CALLR(
     &		%VAL(IMAGE_RAC(IM)),
     &		IMAGE_OORIGIN(1,IM),IMAGE_OORIGIN(2,IM),
     &		%VAL(LSR_ADDRESSES(XLSR_GET_RAC_PIXEL_ORIGIN)))
	IF (OK.NE.GOTH__NORMAL) GOTO 9041
	IMAGE_UORIGIN(1,IM) = IMAGE_OORIGIN(1,IM)
	IMAGE_UORIGIN(2,IM) = IMAGE_OORIGIN(2,IM)
	IMAGE_ORIGIN(1,IM) = IMAGE_OORIGIN(1,IM)
	IMAGE_ORIGIN(2,IM) = IMAGE_OORIGIN(2,IM)
	IF (IMAGE_AREA(IM)) THEN
	   IMAGE_ORIGIN(1,IM) = IMAGE_ORIGIN(1,IM)+
     &				IMAGE_OPIXELSIZE(1,IM)*0.5D0
	   IMAGE_ORIGIN(2,IM) = IMAGE_ORIGIN(2,IM)+
     &				IMAGE_OPIXELSIZE(2,IM)*0.5D0
	ENDIF
	OK = CALLR(
     &		%VAL(IMAGE_RAC(IM)),
     &		IMAGE_LEVELS(IM),I,
     &		%VAL(LSR_ADDRESSES(XLSR_GET_RAC_PIXEL_BITS)))
	IF (OK.NE.GOTH__NORMAL) GOTO 9041
C
	IF (IMAGE_LEVELS(IM).NE.1.AND.IMAGE_LEVELS(IM).NE.8) THEN
	   CALL MOAN(MSG_STRING,
     &	'Can only deal with LSR files with 1 or 8 bits per pixel')
	   GOTO 9045
	ENDIF
C
	IF (IMAGE_LEVELS(IM).NE.1.AND.IMAGE_EDIT(IM)) THEN
	   CALL MOAN(MSG_STRING,
     &	'Can only edit LSR files with 1 bit per pixel')
	   GOTO 9045
	ENDIF
C
C Allocate and create pointer type REGION, and attach RAC to it
	IMAGE_PREG(IM) = CALLR(%VAL(LSR_ADDRESSES(XLSR_ALLOC_REG)))
	IF (IMAGE_PREG(IM).EQ.0) GOTO 9042
	OK = CALLR(
     &		%VAL(IMAGE_PREG(IM)),
     &		%VAL(REGION_PTR),%VAL(REGION_TILE_EXTENDED),
     &		%VAL(0),%VAL(0),%VAL(.TRUE.),
     &		%VAL(LSR_ADDRESSES(XLSR_CREATE_REG)))
	IF (OK.NE.GOTH__NORMAL) GOTO 9041
C
	OK = CALLR(
     &		%VAL(IMAGE_PREG(IM)),%VAL(IMAGE_RAC(IM)),
     &		%VAL(LSR_ADDRESSES(XLSR_ATTACH_RAC_TO_REG)))
	IF (OK.NE.GOTH__NORMAL) GOTO 9041
C
C Allocate and create copy type REGION, and attach RAC to it
	IMAGE_CREG(IM) = CALLR(%VAL(LSR_ADDRESSES(XLSR_ALLOC_REG)))
	IF (IMAGE_CREG(IM).EQ.0) GOTO 9042
	OK = CALLR(
     &		%VAL(IMAGE_CREG(IM)),
     &		%VAL(REGION_COPY),%VAL(REGION_LR_EXTENDED),
     &		%VAL(0),%VAL(0),%VAL(.TRUE.),
     &		%VAL(LSR_ADDRESSES(XLSR_CREATE_REG)))
	IF (OK.NE.GOTH__NORMAL) GOTO 9041
C
	OK = CALLR(
     &		%VAL(IMAGE_CREG(IM)),%VAL(IMAGE_RAC(IM)),
     &		%VAL(LSR_ADDRESSES(XLSR_ATTACH_RAC_TO_REG)))
	IF (OK.NE.GOTH__NORMAL) GOTO 9041
C
C test that we can actually read from the file
	PIX(1) = 1
	PIX(2) = 1
	IMAGE_TYPE(IM) = TYPE_LSR		! this image is an LSR
	CALL IMAGEPIXEL(I,I,I,IM,PIX)
	IF (MOANED) THEN
	   IMAGE_TYPE(IM) = 0
	   GOTO 9045
	ENDIF
C
	LUN_INUSE(LUN) = .TRUE.			! LSR LUN now in use
	IMAGE_LUN(IM) = LUN			! not used for LSR
	IMAGE_VIEWS(IM) = 1024			! reduce up to x1024
	IMAGE_CORNER(IM) = DTI_ORDER_NW		! not used
	IMAGE_DIRECTION(IM) = DTI_ORDER_CLOCKWISE ! not used
	IMAGE_BASE(IM) = 0			! base bit
	IMAGE_NUMBER(IM) = 8			! number of bits
	IMAGE_CLASSIFY(IM) = .FALSE.		! not classified
	IMAGE_SUBPRI(IM) = .FALSE.		! fast subsampling
	IMAGE_FORE(IM) = 1			! default foreground
	IMAGE_BACK(IM) = 0			! default background
C
	LSROPN = .TRUE.				! success
	GOTO 9999
C
9041	OK = CALLR(%VAL(OK),%VAL(LSR_ADDRESSES(XLSR_PRINT_MESSAGE)))
	CALL WRITEF
	GOTO 9045
C
9042	CALL MOAN(MSG_STRING,'Error allocating memory for LSR file')
	GOTO 9045
C
C tidy LSR file
9045	OK = LSRCLS(IM)
	LSROPN = .FALSE.		! failed
C
9999	RETURN
	END
