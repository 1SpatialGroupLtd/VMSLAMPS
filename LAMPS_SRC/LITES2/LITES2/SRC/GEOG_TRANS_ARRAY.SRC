C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-11-03 12:54:56.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        LOGICAL FUNCTION GEOG_TRANS_ARRAY(
     &	         INSYS, INZONE, INPAR, INUNIT,INORG,
     &	         OUTSYS,OUTZONE,OUTPAR,OUTUNIT,OUTORG,
     &	         SIZE,ARRAY)
C
***	MODULE GEOG_TRANS_ARRAY
***	IDENT	03NO93
C
C Copyright Laser-Scan Laboratories Ltd.,Cambridge,England
C 
C Author    Ron Russell				 24-Aug-1988
C
C       This function transforms an array of coordinates from one projection
C	to another. It returns .TRUE. for success
C
	IMPLICIT NONE
C
C arguments
C
C (input)
	INTEGER		INSYS		! projection code
	INTEGER		INZONE		! zone for input
	REAL*8		INPAR(15)	! projection parameters
	INTEGER		INUNIT		! units of input coordinate
	REAL*8		INORG(2)	! origin offset
C
	INTEGER		OUTSYS		! projection code
	INTEGER		OUTZONE		! zone for input
	REAL*8		OUTPAR(15)	! projection parameters
	INTEGER		OUTUNIT		! units of input coordinate
	REAL*8		OUTORG(2)	! origin offset
C
	INTEGER		SIZE		! length of array
C
C (input and output)
	REAL*4		ARRAY(2,SIZE)
C
C functions
	LOGICAL		GEOG_TRANS
	LOGICAL		SAME_PROJECTION
C
C w/s
	REAL*8		INCOORD(2),OUTCOORD(2)
	INTEGER		I
	LOGICAL		TRANS,DO_ORIGIN
	INTEGER*2 	NPTS		! number of points (for ADDORG)
	REAL		ORG(2)		! X,Y of origin to add on
C
	INTEGER		LAST_INZONE,LAST_OUTZONE
	LOGICAL		LAST_TRANS
C
	SAVE		LAST_INZONE,LAST_OUTZONE,LAST_TRANS
C
	DATA		LAST_INZONE,LAST_OUTZONE,LAST_TRANS/2*-999,.FALSE./
C
C assume failure
	GEOG_TRANS_ARRAY = .FALSE.
C
C do we have to do the transformation?
	IF (LAST_INZONE .EQ. INZONE .AND. 
     &	     LAST_OUTZONE .EQ. OUTZONE) THEN
	   TRANS = LAST_TRANS
	ELSE
	   TRANS = .TRUE.
	   IF (INSYS .EQ. OUTSYS .AND. INUNIT .EQ. OUTUNIT) THEN
	      TRANS = .NOT. SAME_PROJECTION(INSYS,INPAR,OUTPAR)
	   ENDIF
	ENDIF
C
	IF (.NOT. TRANS)
     &	     DO_ORIGIN = (INORG(1).NE.OUTORG(1).OR.INORG(2).NE.OUTORG(2))
C       
	IF (TRANS) THEN
	   DO 20, I = 1,SIZE
	      INCOORD(1) = ARRAY(1,I) + INORG(1)
	      INCOORD(2) = ARRAY(2,I) + INORG(2)
C       
	      IF (.NOT.GEOG_TRANS(INCOORD,INSYS, INZONE, INPAR, INUNIT,
     &		   OUTCOORD,OUTSYS,OUTZONE,OUTPAR,OUTUNIT))
     &		   GOTO 999	! failure
C
	      ARRAY(1,I) = OUTCOORD(1) - OUTORG(1)
	      ARRAY(2,I) = OUTCOORD(2) - OUTORG(2)
 20	   CONTINUE
	ELSEIF (DO_ORIGIN) THEN
	   ORG(1) = INORG(1) - OUTORG(1)
	   ORG(2) = INORG(2) - OUTORG(2)
	   NPTS = SIZE
	   CALL ADDORG(ORG,ARRAY,NPTS)	! add origin of map
	ENDIF
C
	LAST_TRANS = TRANS
	LAST_INZONE = INZONE
	LAST_OUTZONE = OUTZONE
	GEOG_TRANS_ARRAY = .TRUE.
C
  999	RETURN
   	END
