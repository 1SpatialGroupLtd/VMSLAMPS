C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-08-30 18:17:36.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        SUBROUTINE DOANNO
C
***     IDENT	30AU94
***     MODULE  DOANNO
C
C       Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C       Written                                 RWR	18-Jul-1986
C
C Description
C
C	LITES2 cartographic editor ANNOTATION command.
C
C ANNOTATION SIZE	- defines size of annotation
C ANNOTATION COLOUR	- defines colour of annotation
C ANNOTATION OFFSET	- defines where annotation is to be drawn
C ANNOTATION FONT	- defines font to use for labelling
C ANNOTATION START	- label feature where it enters window
C ANNOTATION LEFT	- label feature at left of screen
C ANNOTATION SCREEN	- use the sccreen as the window for labelling
C ANNOTATION WINDOW	- use an area around the cursor as window for
C			  labelling
C ANNOTATION MARK       - defines fc to be used for marking vertex
C ANNOTATION OVERLAY	- defines overlay to be used for annotations
C ANNOTATION DISPLAY	- defines display to be used for annotations
C ANNOTATION LEGEND	- defines size and position of legend for images
C ANNOTATION ANGLE	- defines angle used for calls of DRWCURSPOS
C ANNOTATION LOCATION	- defines locating point of text in calls of DRWCURSPOS
C ANNOTATION WIDTH	- defines width of linework in annotation
C ANNOTATION HWTEXT	- use hardware text for annotations
C ANNOTATION BEARING	- defines angle used for calls of DRWCURSPOS
C ANNOTATION HARDWARE	- defines hardware (FRT) for annotation
C ANNOTATION FILL	- defines fill style for fill areas
C ANNOTATION JOURNAL	- journal annotation commands to a macro
C
        IMPLICIT NONE
C
***	PARAMETER/CMN:ACS/
***	PARAMETER/CMN:CONSTS/
***     PARAMETER/CMN:GKSPAR/
***     PARAMETER/CMN:MACMEN/
***     PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:STAPAR/
C
***	COMMON/CMN:DOUT/		! command decoding output
***	COMMON/CMN:FILES/		! filename details
***	COMMON/LSL$CMNFRT:FRTACD/
***	COMMON/LSL$CMNFRT:FRTCOM/
***	COMMON/CMN:GLOBAL/
***	COMMON/CMN:LABELS/
***	COMMON/CMN:MACRO/
***	COMMON/CMN:OVERLAY/
***	COMMON/CMN:PLOT/
***	COMMON/CMN:STATE/
***	COMMON/LSL$CMNLSL:TXTC/
C
	EXTERNAL MOAN,NASTY,LEARN
	EXTERNAL ANNOTATION_JOURNAL_CMD_TABLE
C
C functions
	LOGICAL FRTFND
	REAL	ANGLE_BEARING
C
C Dispatch according to secondary command
C
	GOTO (100,200,300,400,500,600,700,800,900,1000,1100,1200,
     &	      1300,1400,1500,1600,1700,1800,1900,2000),DSECN
C
C Secondary command number out of range
C
	CALL MSGCMD(NASTY,MSG_ERRSECIND)
	GOTO 8000
C
C ANNOTATION SIZE	- defines size of annotation
C
  100	IF (DREALS(1).GT.0.0 ) THEN
	   ANNOMMSIZ = DREALS(1)
	ELSE
	   CALL MOAN(MSG_POSANNOSIZ)
	   GOTO 8000
	ENDIF
	GOTO 9000
C
C ANNOTATION COLOUR	- defines colour of annotation
C
200	IF (DINTS(1).GE.-1) THEN
	   ANNOCOL = DINTS(1)
	ELSE
	   CALL MOAN(MSG_INVALANNOCOL)
	   GOTO 8000
	ENDIF
	GOTO 9000
C
C ANNOTATION OFFSET	- defines where annotation is to be drawn
C
300	ANNOMMOFFX = DREALS(1)
	ANNOMMOFFY = DREALS(2)
	GOTO 9000
C
C ANNOTATION FONT
C
400	IF (DINTS(1).GT.0) THEN
	   ANNOFONT = DINTS(1)
	ELSE
	   CALL MSGCMD(MOAN,MSG_POSARGSRQD)
	   GOTO 8000
	ENDIF
	GOTO 9000
C
C ANNOTATION START
C
500	ANNOSTART = .TRUE.
	GOTO 9000
C
C ANNOTATION LEFT
C
600	ANNOSTART = .FALSE.
	GOTO 9000
C
C ANNOTATION SCREEN
C
700	ANNOWINDOW = .FALSE.
	GOTO 9000
C
C ANNOTATION WINDOW
C
800	IF (DNREA.EQ.0) THEN	! use existing factor
	   ANNOWINDOW = .TRUE.
	ELSE
	   IF (DREALS(1).LE.0.0.OR.DREALS(1).GT.1.0) THEN
	      CALL MOAN(MSG_BADFRAC)
	      GOTO 8000
	   ELSE
	      ANNOWINDOW = .TRUE.
	      ANNOWINFAC = DREALS(1)
	   ENDIF
	ENDIF
	GOTO 9000
C
C ANNOTATION MARK
C
900	IF (.NOT.HADFRT) THEN
	   CALL MOAN(MSG_NOFILENAME,'FRT')
	   CALL MSGCMD(LEARN,MSG_REQFRTNAME)
	   GOTO 8000
	ENDIF
	IF (DINTS(1).GE.0) THEN
	   IF (FRTFND(DINTS(1))) THEN		! check that input
	      CALL MOAN(MSG_BADCODE,DINTS(1))	! is defined in FRT
	      GOTO 8000
	   ENDIF
C
C only any good if a symbol
	   IF (.NOT.FRTSYM) THEN
	      CALL MOAN(MSG_SYMBFCREQD,DINTS(1))
	      CALL LEARN(MSG_NEEDSYM)
	      GOTO 8000
	   ENDIF
	   ANNOMARK = FRTSC
	   ANNOMARKFC = DINTS(1)
	   HAD_ANNOMARK = .TRUE.
	ELSE
	   ANNOMARK = -DINTS(1)
	   ANNOMARKFC = -1
	   HAD_ANNOMARK = .TRUE.
	ENDIF
C
C get the bounding box of the symbol
	IF (SINDEX .NE. STATE_INITIAL)
     &	         CALL SRISCN(ANNOMARK,ANNOMARK_MINX,ANNOMARK_MAXX,
     &	                     ANNOMARK_MINY,ANNOMARK_MAXY)
	GOTO 9000
C
C ANNOTATION OVERLAY
C
1000	IF (DINTS(1).LT.0.OR.DINTS(1).GT.MAXOVER) THEN
	   CALL MOAN(MSG_OVERRNG,0,MAXOVER)
	   GOTO 8000
	ENDIF
C
	IF (DINTS(1).GT.0) THEN
	   IF (ANNODISP.EQ.0) THEN
	      IF (OVERLAY_WORKSTATION.EQ.0) THEN
	         CALL MOAN(MSG_NOWORKOVER)
	         GOTO 8000
	      ENDIF
	      IF (OVERLAY_PLANES(DINTS(1),OVERLAY_WORKSTATION).EQ.0)THEN
	         CALL MOAN(MSG_OVNOTEXISTS,DINTS(1),OVERLAY_WORKSTATION)
	         CALL LEARN(MSG_USEWORKOVER)
	         GOTO 8000
	      ENDIF
	   ELSE
	      IF (ANNODISP.LE.2.AND.ANNODISP.NE.OVERLAY_WORKSTATION
     &			.AND..NOT.OVERLAY_SHARE) THEN
	         CALL MOAN(MSG_OVNOTEXISTS,DINTS(1),ANNODISP)
	         GOTO 8000
	      ENDIF
	      IF (OVERLAY_PLANES(DINTS(1),ANNODISP).EQ.0) THEN
	         CALL MOAN(MSG_OVNOTEXISTS,DINTS(1),ANNODISP)
	         CALL LEARN(MSG_USEDISPOVER)
	         GOTO 8000
	      ENDIF
	   ENDIF
	ENDIF
C
	ANNOVER = DINTS(1)
	GOTO 9000
C
C ANNOTATION DISPLAY
C
1100	IF (DINTS(1).LT.0.OR.DINTS(1).GT.MAXDISP) THEN
	   CALL MOAN(MSG_DISPRNG,0,MAXDISP)
	   GOTO 8000
	ENDIF
C
	IF (DINTS(1).GT.2) THEN
	   IF (.NOT.DISPLAY_EXISTS(DINTS(1))) THEN
	      CALL MOAN(MSG_DISPNOTEXISTS,DINTS(1))
	      CALL LEARN(MSG_USEDISPCRE)
	      GOTO 8000
	   ENDIF
	ENDIF
C
	ANNODISP = DINTS(1)
	ANNOVER = 0
	GOTO 9000
C
C ANNOTATION LEGEND
C
1200	CONTINUE
C
C check number of arguments: there should be 2 or 4
	IF (DNREA.NE.2.AND.DNREA.NE.4) THEN
	   CALL MOAN(MSG_CMDLIBEOL,'command',
     &			DPRI(:DPRIL)//' '//DSEC(:DSECL) )
	   GOTO 8000
	ENDIF
C
C check size of boxes are not too small and not too big
	IF (MIN(DREALS(1),DREALS(2)).LE.0.0.OR.
     &	    MAX(DREALS(1),DREALS(2)).GT.1.0) THEN
	   CALL MOAN(MSG_BADLEGSIZE)
	   GOTO 8000
	ENDIF
C
C check that position is sensible
	IF (DNREA.EQ.4) THEN
	   IF (MIN(DREALS(3),DREALS(4)).LT.0.0.OR.
     &	        MAX(DREALS(3),DREALS(4)).GT.1.0) THEN
	      CALL MOAN(MSG_BADLEGPOS)
	      GOTO 8000
	   ENDIF
	ENDIF
C
C store the numbers
	ANNOLEGEND_XSIZ = DREALS(1)
	ANNOLEGEND_YSIZ = DREALS(2)
	IF (DNREA.EQ.4) THEN
	   ANNOLEGEND_XPOS = DREALS(3)
	   ANNOLEGEND_YPOS = DREALS(4)
	ENDIF
C
	GOTO 9000
C
C ANNOTATION LOCATION
C
1300	CONTINUE
	IF (DINTS(1).LT.0.OR.DINTS(1).GT.8) THEN	! impossible position
	   CALL MOAN(MSG_ILLEGLLOC)
	   GOTO 8000
	ENDIF
	ANNOLOCATION = DINTS(1)
	GOTO 9000
C
C ANNOTATION ANGLE
C
1400	CONTINUE
	ANNOANGLE = DREALS(1)*PI/180.0		! store in radians
	ANNOCOS   = COS(ANNOANGLE)
	ANNOSIN   = SIN(ANNOANGLE)
	GOTO 9000
C
C ANNOTATION WIDTH
C
1500	IF (DREALS(1).GE.0.0) THEN
	   ANNOWIDTH = DREALS(1)
	ELSE
	   CALL MSGCMD(MOAN,MSG_POSARGSRQD)
	   GOTO 8000
	ENDIF
	GOTO 9000
C
C ANNOTATION HWTEXT [n]
C
1600	IF (DNINT.EQ.0) THEN
	   ANNOHWT = .TRUE.
	ELSEIF (DINTS(1).EQ.1) THEN
	   ANNOHWT = .TRUE.
	ELSEIF (DINTS(1).EQ.0) THEN
	   ANNOHWT = .FALSE.
	ELSE
	   CALL MOAN(MSG_ARGRNG)
	   GOTO 8000
	ENDIF
	GOTO 9000
C
C ANNOTATION BEARING
C
1700	ANNOANGLE = ANGLE_BEARING(DREALS(1))*PI/180.0 	! store in radians
	ANNOCOS   = COS(ANNOANGLE)
	ANNOSIN   = SIN(ANNOANGLE)
	GOTO 9000
C
C ANNOTATION HARDWARE
C
1800	IF (DINTS(1).GE.0) THEN
	   ANNOHW = DINTS(1)
	ELSE
	   CALL MSGCMD(MOAN,MSG_POSARGSRQD)
	   GOTO 8000
	ENDIF
	GOTO 9000
C
C ANNOTATION FILL
C
1900	IF (.NOT.
     &	    ((DINTS(1).GE.-1.AND.DINTS(1).LE.6).OR.
     &	     (DINTS(1).GE.101.AND.DINTS(1).LE.106).OR.
     &	     (DINTS(1).GE.10000.AND.DINTS(1).LE.13600).OR.
     &	     (DINTS(1).GE.20000.AND.DINTS(1).LE.23600))) THEN
	   CALL MOAN(MSG_NOTVALIDFILL,DINTS(1))
	   GOTO 8000
	ENDIF
	ANNOFILL = DINTS(1)
	IF (ANNOFILL .EQ. -1) THEN		! solid
	   ANNOAST = GSOLID
	   ANNOAIX = 1
	ELSEIF (ANNOFILL .EQ. 0) THEN		 ! hollow
	   ANNOAST = GHOLOW
	   ANNOAIX = 1
	ELSE
	   ANNOAST = GHATCH
	   ANNOAIX = ANNOFILL
	ENDIF
	GOTO 9000
C
C ANNOTATION JOURNAL
C
2000	CALL GET_COMMAND(DSTR(:DSTRL),ANNOTATION_JOURNAL_CMD_TABLE)
	IF (MOANED) GOTO 8000
	GOTO (2010,2020,2030,2040),DPRIN
C
C Secondary command number out of range
	CALL MSGCMD(NASTY,MSG_ERRSECIND)
	GOTO 8000
C
C A J OPEN macroname
2010	IF (ANNOMAC.NE.0) THEN
	   CALL MOAN(MSG_ANNOJISOPEN,ANNOMDSC)
	   CALL LEARN(MSG_USEANNOJCLOSE)
	   GOTO 8000
	ENDIF
	CALL DOMACR		! try creating the desired macro
	IF (MOANED) GOTO 10000	! already done IGNCMD
	ANNOMAC = LASDEF
	IF (ANNOMDSC(1).EQ.0) CALL INIDSC(ANNOMDSC)
	CALL STR$COPY_DX(ANNOMDSC,DSTR(:DSTRL)) ! save macro name
	CALL DOENDM		! return to previous state
	GOTO 10000
C
C A J CLOSE
2020	IF (ANNOMAC.EQ.0) THEN
	   CALL MOAN(MSG_ANNOJNONE)
	   GOTO 8000
	ENDIF
	ANNOMAC = 0
	GOTO 10000
C
C A J OFF
2030	IF (ANNOMAC.EQ.0) THEN
	   CALL MOAN(MSG_ANNOJNONE)
	   GOTO 8000
	ENDIF
	ANNOMAC = -ABS(ANNOMAC)	! negate macro number to turn off
	GOTO 10000
C
C A J ON
2040	IF (ANNOMAC.EQ.0) THEN
	   CALL MOAN(MSG_ANNOJNONE)
	   GOTO 8000
	ENDIF
	ANNOMAC = ABS(ANNOMAC)	! restore positive macro number to turn on
	GOTO 10000
C
C error exit
8000	CALL IGNCMD
	GOTO 10000
C
C success, maybe write ANNO JOURNAL
9000	IF (ANNOMAC.GT.0.AND..NOT.PLOT_ON) CALL STORE_ANNO
C
C success exit (no ANNO JOURNAL)
10000	RETURN
        END
