C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-04-19 16:56:42.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE SHACD(STRING)
C
***	IDENT	19AP89
***	MODULE	SHACD
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	 3-Nov-1987
C
C	Subroutine to extract a ACD from the FRT file and
C	display it
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:CHARS/
***     PARAMETER/CMN:MOANMESS/		! moan constants
***	PARAMETER/LSL$CMNLSL:LSLLIBMSG/
***	PARAMETER/LSL$CMNLSL:READSTR/
C
***	COMMON/LSL$CMNLSL:CMDCOM/
***     COMMON/CMN:DOUT/		! command decoding output
***	COMMON/CMN:FILES/		! filename details
***     COMMON/LSL$CMNFRT:FRTACD/	! common for FRTLIB
***	COMMON/LSL$CMNLSL:TXTC/
C
C argument	- used as working storage
	CHARACTER*80	STRING
C
C Functions called
	INTEGER		ACDFND
	INTEGER		ACDFND_NAME
	LOGICAL		RDLONG
	INTEGER		CPYSTR
	INTEGER		READSTR
C
C Local Variables
	EXTERNAL	LEARN
C
	INTEGER*2	SAVPTR		! to make TXTBUF secure
	INTEGER		RET
	CHARACTER*(ACD_FORMAT_MAX+2) F
	INTEGER		F_LEN
	INTEGER		ACTYPE		! the attribute number
	CHARACTER*1	TYP
	CHARACTER*(ACD_NAME_MAX) ACDSTR
	INTEGER		ACDLEN
C
C Check whether FRT file has been read
	IF (.NOT.HADFRT) THEN
	   CALL MOAN(MSG_NOFILENAME,'FRT')
	   CALL MSGCMD(LEARN,MSG_REQFRTNAME)
	ELSE
C
C check whether command line contains ACD name or number
	   IF (DSTRIN) THEN
C
C copy into TXTBUF, instead of SETAUXing, as ACDFND_NAME resets decoding
C back to TXTBUF
	      TXTPTR = TXTLIM
	      TXTPTR = CPYSTR(DSTR(1:DSTRL),TXTDSC)
	      CALL BSLN
C
	      IF (RDLONG(ACTYPE)) THEN
	         ACDLEN = READSTR(ACDSTR,,ON_CMD)
	         IF (ACDFND_NAME(ACDSTR(1:ACDLEN),RET)) THEN
	            IF (RET.EQ.LSL__UNEXPCMD) THEN
	               CALL MOAN(MSG_ATTRNOTFND,CMDNST)
	            ELSE
	               CALL LSL_CMDERR
	            ENDIF
	            GOTO 900
	         ENDIF
	         ACTYPE = ACD_CODE
	      ELSE
	         IF (ACDFND(ACTYPE,.FALSE.)) THEN  ! stop FRTLIB output
	            CALL INFORM(MSG_ATTRNONOTFND,ACTYPE)
	         ENDIF
	      ENDIF
C
	      CALL INFORM(MSG_BLANK)		! write out header
	      CALL INFORM(MSG_ACDHEAD)
	      CALL INFORM(MSG_BLANK)
C
	      F = ACD_FORMAT
	      F_LEN = ACD_FORMAT_LEN
	      TYP = 'I'
	      IF (ACD_DATA_TYPE.EQ.ACD_DATATYPE_R) THEN	      
	         TYP = 'R'
	      ELSEIF (ACD_DATA_TYPE.EQ.ACD_DATATYPE_C) THEN
	         TYP   = 'C'
	         F     = '"'//F(1:F_LEN)//'"'
	         F_LEN = F_LEN + 2
	      ELSEIF (ACD_DATA_TYPE.EQ.ACD_DATATYPE_D) THEN
	         TYP = 'D'
	      ELSEIF (ACD_DATA_TYPE.EQ.ACD_DATATYPE_T) THEN
	         TYP = 'T'
	      ENDIF
C
C clear out string
	      STRING = ' '
C
C add name
	      CALL EXPAND('%WS%S',STRING,ACD_NAME(1:ACD_NAME_LEN))
C
C add code
	      CALL EXPAND('%WS%I6',STRING(21:80),ACTYPE)
C
C add type (as a letter)
	      CALL EXPAND('%WS%S',STRING(29:80),TYP)
C
C add minimum
	      CALL EXPAND('%WS'//F(1:F_LEN),STRING(34:80),
     &	               ACD_MIN_MAX_I(1))
C
C add maximum
	      CALL EXPAND('%WS'//F(1:F_LEN),STRING(50:80),
     &	               ACD_MIN_MAX_I(2))
C
C add "step" if set
	      IF (ACD_DATA_TYPE.EQ.ACD_DATATYPE_R.AND.
     &	            ACD_INTERVAL.NE.0.0) THEN
	         CALL EXPAND('%WS'//F(1:F_LEN),STRING(66:80),
     &	                        ACD_INTERVAL)
	      ENDIF
C
C and output info
	      CALL INFORM(MSG_STRING,STRING)
C
C reset TXTBUF
900	      CALL BSLN
	      CALL DCPSET(SAVPTR)
C
C no ACD name on command line, so print list of ACDs
	   ELSE
	      CALL CMDPRT(%VAL(ACDCMT))
	   ENDIF
	ENDIF
C
C
	RETURN
	END
