C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-09-06 12:20:26.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE SHLIC(LOCKFU)
C
***	IDENT	06SE96
***	MODULE	SHLIC
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	 2-Oct-1985
C
	IMPLICIT NONE
C
C Description
C
C	LITES2 cartographic editor SHOW LICENCE command.
C
C (Using data from PGH memo of November 1994)
C
C arguments
C
	LOGICAL		LOCKFU	! locking function (passed as address)
C
C parameters and common blocks
C
	INCLUDE		'($PRDEF)'
***     PARAMETER/CMN:MOANMESS/		! moan constants
C
***	COMMON/CMN:DOUT/		! command decoding output
***	COMMON/CMN:LICENC/
C
C *** NOTE - The following statements can be removed after upgrade to VMS 6.1 *** 
        PARAMETER PR$_SID_TYP600 = '00000013'X
        PARAMETER PR$_SID_TYP700 = '00000013'X
C *** END NOTE *** 
C
C functions called
C
	INTEGER*4	SIGCHS
	INTEGER*4	LIB$EXTZV
C
C working storage
C
	CHARACTER*80	STRING
	INTEGER*4	LENGTH
	INTEGER*4	I
	INTEGER*4	LID,MODEL
	INTEGER*4	TYPE
	INTEGER		EXDATE		! expiry date (as day number)
	INTEGER		TODAY		! todays date (as day number)
	LOGICAL		HAD_OUTPUT
C
	IF (.NOT.USELIC) THEN		! no licence
	   CALL INFORM(MSG_NOLICENCE)
	   CALL INFORM(MSG_BLANK)
	   CALL INFORM(MSG_BASLITES2)
	   GOTO 100			! finished
	ENDIF
C
C try to get expiry date
C
	CALL LOCKFU(4,EXDATE,STRING)
	IF (EXDATE.GT.0) CALL LIB$DAY(TODAY)
C
C get cpu numbers from licence
C
	I=0					! initialise loop
C
C get next cpu number
C
   10	CONTINUE
	   HAD_OUTPUT = .FALSE.
	   I=I+1
	   LID=I
	   IF (.NOT.LOCKFU(2,LID,STRING)) GOTO 20	! exit loop
C
	   IF (LID.EQ.-1) THEN		! demo licence
	      CALL INFORM(MSG_DEMO,STRING(1:SIGCHS(STRING)))
	      IF (EXDATE.GT.0) CALL INFORM(MSG_LICVALFOR,EXDATE-TODAY+1)
	      CALL INFORM(MSG_BLANK)
	      CALL INFORM(MSG_BASPLALL)		! all facilities
	      GOTO 100				! finished
	   ENDIF
C
	   IF (I.EQ.1) THEN			! first one
	      CALL INFORM(MSG_LICOTH,STRING(1:SIGCHS(STRING)))
	      IF (EXDATE.GT.0) CALL INFORM(MSG_LICVALFOR,
     &	                              EXDATE-TODAY+1)
	      CALL INFORM(MSG_BLANK)
	      CALL INFORM(MSG_RUNON)
	   ENDIF
C
C get computer type
C
	   TYPE=LIB$EXTZV(24,8,LID)

C
C Try in licence for a MODEL number
C
	   MODEL=I
	   IF (LOCKFU(6,MODEL,STRING)) THEN
	      IF (MODEL.NE.0) THEN
	         CALL HW_MODEL_TO_NAME(MODEL,STRING,LENGTH)
	         CALL INFORM(MSG_STRING,STRING(1:LENGTH))
	         GOTO 10
	      ENDIF
	   ENDIF
C
C No model number - report on all models of this CPU type
C
	   IF (TYPE.EQ.PR$_SID_TYP780) THEN
	      CALL EXPAND('%WSVAX-11/780, 782, 785  number %N',
     &	                  STRING,LID.AND.'FFF'X)
	      CALL INFORM(MSG_STRING,STRING(1:SIGCHS(STRING)))
	      HAD_OUTPUT = .TRUE.
	   ENDIF
	   IF (TYPE.EQ.PR$_SID_TYP750) THEN
	      CALL INFORM(MSG_STRING,'VAX-11/750')
	      HAD_OUTPUT = .TRUE.
	   ENDIF
	   IF (TYPE.EQ.PR$_SID_TYP730) THEN
	      CALL INFORM(MSG_STRING,'VAX-11/730')
	      HAD_OUTPUT = .TRUE.
	   ENDIF
	   IF (TYPE.EQ.PR$_SID_TYP790) THEN
	      CALL INFORM(MSG_STRING,'VAX 8600, 8650')
	      HAD_OUTPUT = .TRUE.
	   ENDIF
	   IF (TYPE.EQ.PR$_SID_TYP8SS) THEN
	      CALL INFORM(MSG_STRING,
     &		'VAX 8200, 8250, 8300, 8350, VAXstation 8000')
	      HAD_OUTPUT = .TRUE.
	   ENDIF
	   IF (TYPE.EQ.PR$_SID_TYP8NN) THEN
	      CALL INFORM(MSG_STRING,
     &		'VAX 8530, 8550, 8810 (8700), and 8820-N (8800)')
	      HAD_OUTPUT = .TRUE.
	   ENDIF
	   IF (TYPE.EQ.PR$_SID_TYPUV1) THEN
	      CALL INFORM(MSG_STRING,'MicroVAX I, VAXstation I')
	      HAD_OUTPUT = .TRUE.
	   ENDIF
C Type 8 is MicroVAX II series
	   IF (TYPE.EQ.PR$_SID_TYPUV2) THEN
	      CALL INFORM(MSG_STRING,
     &		'MicroVAX II, VAXstation II, VS, II/GPX')
	      HAD_OUTPUT = .TRUE.
	   ENDIF
	   IF (TYPE.EQ.PR$_SID_TYP410) THEN
	     CALL INFORM(MSG_STRING,
     &		'MicroVAX 2000, VAXstation 2000')
	      HAD_OUTPUT = .TRUE.
	   ENDIF
C Type 10 is MicroVAX III series (CVAX)
	   IF (TYPE.EQ.PR$_SID_TYP650) THEN
	      CALL INFORM(MSG_STRING,
     & 		'MicroVAX 3300, 3400, 3500, 3600, 3800, 3900,'//
     & 		' VAXstation 3200, 3500')
	      HAD_OUTPUT = .TRUE.
	   ENDIF
	   IF (TYPE.EQ.PR$_SID_TYP9CC) THEN
	      CALL INFORM(MSG_STRING,
     &		'VAX 6000 models 210, 310')
	      HAD_OUTPUT = .TRUE.
	   ENDIF
	   IF (TYPE.EQ.PR$_SID_TYP60) THEN
	      CALL INFORM(MSG_STRING,'VAXstation 3520, 3540')
	      HAD_OUTPUT = .TRUE.
	   ENDIF
	   IF (TYPE.EQ.PR$_SID_TYP420) THEN
	      CALL INFORM(MSG_STRING,
     &		'MicroVAX 3100 models 10, 20, 10e, 20e,'//
     &		' VAXstation 3100 models 30, 40, 38, 48')
	      HAD_OUTPUT = .TRUE.
	   ENDIF
	   IF (TYPE.EQ.PR$_SID_TYP520) THEN
	      CALL INFORM(MSG_STRING,'VAXft  models 110, 310')
	      HAD_OUTPUT = .TRUE.
	   ENDIF
C Type 11 is Rigel chip series 
	   IF (TYPE.EQ.PR$_SID_TYP670 .OR.
     &	       TYPE.EQ.PR$_SID_TYP9RR) THEN
	      CALL INFORM(MSG_STRING,
     &		'VAX 4000 model 300, VAX 6000 models 410 - 460')
	      HAD_OUTPUT = .TRUE.
	   ENDIF
	   IF (TYPE.EQ.PR$_SID_TYP43) THEN
	      CALL INFORM(MSG_STRING,
     &		'VAXstation 3100 model 76')
	      HAD_OUTPUT = .TRUE.
	   ENDIF
C Type 15 is Aquarius series 
	   IF (TYPE.EQ.PR$_SID_TYP9AQ ) THEN
	      CALL INFORM(MSG_STRING,
     &		'VAX 9000 models 210, 410-440, 400-800')
	      HAD_OUTPUT = .TRUE.
	   ENDIF
C Type 17 is Polarstar series 
	   IF (TYPE.EQ.PR$_SID_TYP8PS) THEN
	      CALL INFORM(MSG_STRING,'VAX 8810, 8820, 8830, 8840')
	      HAD_OUTPUT = .TRUE.
	   ENDIF
C Type 18 is Mariah chip series 
	   IF (TYPE.EQ.PR$_SID_TYP1202) THEN
	      CALL INFORM(MSG_STRING,
     &		'VAX 6000 model 510 - 560')
	      HAD_OUTPUT = .TRUE.
   	   ENDIF
	   IF (TYPE.EQ.PR$_SID_TYP46) THEN
	      CALL INFORM(MSG_STRING,
     &		'MicroVAX 3100 model 80, 85, VAXstation 4000 model 60')
	      HAD_OUTPUT = .TRUE.
   	   ENDIF
C Type 19 is NVAX chip series 
	   IF (TYPE.EQ.PR$_SID_TYP690 .OR.
     &	       TYPE.EQ.PR$_SID_TYP700 .OR.
     &	       TYPE.EQ.PR$_SID_TYP1303) THEN
	      CALL INFORM(MSG_STRING,
     &		'VAX 4000 models 100, 105, 400, 500, 505, 600, 700, 705')
	      HAD_OUTPUT = .TRUE.
   	   ENDIF
	   IF (TYPE.EQ.PR$_SID_TYP49) THEN
	      CALL INFORM(MSG_STRING,
     &		'MicroVAX 3100 model 90, 95,'//
     &		' VAXstation 4000 model 90, 90A')
	      HAD_OUTPUT = .TRUE.
   	   ENDIF
	   IF (TYPE.EQ.PR$_SID_TYP600 .OR.
     &	       TYPE.EQ.PR$_SID_TYP1302) THEN
	      CALL INFORM(MSG_STRING,
     &		'VAX 6000 models 610 - 640, VAXft model 810')
	      HAD_OUTPUT = .TRUE.
   	   ENDIF
C Type 20 is SOC chip series 
	   IF (TYPE.EQ.PR$_SID_TYP660 .OR.
     &	       TYPE.EQ.PR$_SID_TYP440 .OR.
     &	       TYPE.EQ.PR$_SID_TYP550) THEN
	      CALL INFORM(MSG_STRING,
     &		'VAX 4000 model 200, VAXft 4000 models 410, 610')
	      CALL INFORM(MSG_STRING,
     &		'MicroVAX 3100 models 30, 40,'//
     &		' VAXstation 4000 VLC (model 30)')
	      HAD_OUTPUT = .TRUE.
	   ENDIF
C Type 21 is NVAX+ chip series 
	   IF (TYPE.EQ.PR$_SID_TYP1701) THEN
	      CALL INFORM(MSG_STRING,
     &		'VAX 7000 models 610 - 640, VAX 10000 models 610 - 640')
	      HAD_OUTPUT = .TRUE.
	   ENDIF
C Type ?? is NVAX5 chip series 
	   IF (TYPE.EQ.PR$_SID_TYP1701) THEN
	      CALL INFORM(MSG_STRING,
     &		'VAX 7000 models 710 - 740')
	      HAD_OUTPUT = .TRUE.
	   ENDIF
C Type 128 is AXP EV4 chip series 
	   IF (TYPE.EQ.'00000080'X) THEN
	      CALL INFORM(MSG_STRING,
     &		'DEC 3000 models 300, 400, 500, 600, 700, 800, 900')
	      CALL INFORM(MSG_STRING,
     &		'DEC 4000 models 610, 710, DEC 7000 model 610, 710,'//
     &		' DEC 10000 model 610')
	      CALL INFORM(MSG_STRING,
     &		'DEC 2000 model 300, pc AXP/150')
	      CALL INFORM(MSG_STRING,
     &		'DEC 2100 model A500MP, AlphaServer 2000 model 4')
	      CALL INFORM(MSG_STRING,
     &		'AlphaServer 1000 model 4,'//
     &		' AlphaStation 200 model 4, 400 model 4')
	      HAD_OUTPUT = .TRUE.
	   ENDIF
C
	   IF (.NOT.HAD_OUTPUT) THEN
	      CALL INFORM(MSG_UNKNOWNVAX,LID,LID)
	   ENDIF
	GOTO 10				! end of loop
C
C now get available facilities
C
  20	CONTINUE
	I=0					! initialise loop
C
C get next facility
C
   30	CONTINUE
	   I=I+1
	   TYPE=I
	   IF (.NOT.LOCKFU(1,TYPE,STRING)) THEN	! exit loop
	      IF (I.EQ.1) THEN
	         CALL INFORM(MSG_BLANK)
	         CALL INFORM(MSG_BASLITES2)
	      ENDIF
	      GOTO 40
	   ENDIF
	   IF (I.EQ.1) THEN		! first one
	      CALL INFORM(MSG_BLANK)
	      CALL INFORM(MSG_BASLITESP)
	   ENDIF
C
C write out facility
C
	   CALL INFORM(MSG_STRING,' '//STRING(1:SIGCHS(STRING)))
	GOTO 30					! end loop
C
C now get available encryption codes
C
  40	CONTINUE
	I=0					! initialise loop
C
C get next encryption code
C
   50	CONTINUE
	   I=I+1
	   TYPE=I
	   IF (.NOT.LOCKFU(5,TYPE,STRING)) GOTO 100	! exit loop
	   IF (I.EQ.1) THEN		! first one
	      CALL INFORM(MSG_BLANK)
	      CALL INFORM(MSG_FOLLENCRYP)
	   ENDIF
C
C write out code
C
	   CALL INFORM(MSG_NUM,TYPE)
	GOTO 50					! end loop
C
  100	CONTINUE
	CALL INFORM(MSG_BLANK)
C
	RETURN
	END
