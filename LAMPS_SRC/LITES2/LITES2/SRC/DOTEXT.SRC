C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-08-26 16:47:56.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE DOTEXT
C
***	IDENT	26AU92
***	MODULE	DOTEXT
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Written					RWR	 7-Jan-1985
C
C	LITES2 cartographic editor TEXT command.
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:ACS/
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:CTXS/
***	PARAMETER/CMN:EFNLUN/
***	PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:PACK/
***	PARAMETER/CMN:STAPAR/
C
***	COMMON/CMN:ATTBTS/
***	COMMON/CMN:CTXS/
***	COMMON/CMN:DEFINE/
***     COMMON/CMN:DOUT/
***	COMMON/CMN:DRAWIN/
***	COMMON/CMN:CSTRCT/
***	COMMON/LSL$CMNFRT:FRTCOM/
***	COMMON/CMN:GLOBAL/
***	COMMON/CMN:MAPS/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:MODIFY/
***	COMMON/CMN:OIIH/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:STATE/
C
C functions called
	INTEGER	FNDOVR
	INTEGER	FINSTR
	INTEGER	CPYSTR
	LOGICAL	FRTFND
	LOGICAL GENAUX
	LOGICAL	ADDZ
C
C workspace
	INTEGER		DUMMY
	INTEGER		I
	INTEGER		OPER
	LOGICAL*1	DEL,NEWCON
	PARAMETER	(DEL=.FALSE.)		! no feature to delete
						! when complete
	PARAMETER	(NEWCON=.TRUE.)		! new feature
C
	EXTERNAL	MOAN
C
C check for modify state - command is only valid if in subtext mode
C
	IF (SINDEX.EQ.STATE_MODIFY) THEN
	   IF (COIPAK(PAKGT).NE.TEXTYP) THEN
	      CALL MSGCMD(MOAN,MSG_CMDONLYTEXT)	! not on symbols
	      GOTO 999
	   ELSEIF (.NOT.SUBTXT) THEN
	      CALL MSGCMD(MOAN,MSG_WITHCOMPONLY) ! only when in SUBTEXT
						 ! mode
	      GOTO 999
	   ENDIF
	   GOTO 500			! insert a text component
	ENDIF
C
C New text
C
C Copy string from input line to COIDSC
	CALL SETAUX(%REF(DSTR),DSTRL)
	COILEN = DSTRL				! set maximum length
	COILEN = FINSTR(COIDSC,'text')		! get string
	IF (MOANED) THEN
	   COILEN = 0				! just in case
	   GOTO 999
	ENDIF
C
C zero length text?
	IF (COILEN.EQ.0) THEN
	   CALL MOAN(MSG_TEXTTOOSHORT)
	   GOTO 999
	ENDIF
C
C Does construction map exist
	IF (CONMAP.GT.MAPTOP.OR..NOT.MAP_EXIST(CONMAP)) THEN
	   CALL MOAN(MSG_MAPNOTEXIST,CONMAP+1)
	   GOTO 999
	ENDIF
C
C Is it read only
	IF (MAPRO(CONMAP)) THEN
	   CALL MOAN(MSG_MAPREADONLY,CONMAP+1)
	   GOTO 999
	ENDIF
	COIPAK(PAKMAP) = CONMAP
C
C Does construction layer exist
	I = FNDOVR(CONLAY)
	IF (I.LT.0) THEN
	   CALL MOAN(MSG_LAYNOTEXIST,CONLAY)
	   GOTO 999
	ENDIF
	COIPAK(PAKOVL) = I
C
C Does construction text feature code exist
	IF (FRTFND(CONTFC)) THEN
	   CALL MOAN(MSG_BADCODE,CONTFC)
	   GOTO 999
	ENDIF
	COIPAK(PAKFC) = CONTFC
	COIFC = CONTFC			! first entry in FS entry
C
C Is the graphical type text
	IF (.NOT.FRTTEX) THEN
	   CALL MOAN(MSG_FCNOTTEXT,CONTFC)
	   CALL LEARN(MSG_SETTEXT)
	   GOTO 999
	ENDIF
C
C set the GT
	COIPAK(PAKGT) = FRTGT
C
C We don't have a segment for this feature yet
	COIPAK(PAKSEG) = 0
C
C Take ACs and TCs from current attribute set
	CONTC = -1
	CONAC = -1
C
C set up CONTH entry, from values in attribute set
	CALL SETTH(CONTH,-1,DUMMY)
C
C Set up an FS entry
	CONFS(1) = CONTFC
	CONFS(2) = 0
	IF (POSOPT) THEN
	   CONFS(3) = CONLOC			! location
	   IF (CONFS(3).GT.8) CONFS(3)=0
	ELSE
	   CONFS(3) = 0
	ENDIF
	CONFS(3) = CONFS(3).OR.'8000'X		! set top bit 
						! (to indicate text)
	CALL LIB$INSV(CONFNT,4,2,CONFS(3))	! set font to be used
	CALL LIB$INSV(CONCLS,6,6,CONFS(3))	! set text class
	CONFS(4) = 0
C
C Attempt to start the feature
	COIPAK(PAKFLG) = 0		! default flag
C
C start feature (no object in hand to delete; new feature)
	FLG_ADD = .TRUE.		! new feature
	CALL STSYTX(DEL,NEWCON)
	GOTO 1000
C
C===================================================================
C add a text component to the current list, after the home one
C
  500	CONTINUE
C
C Copy string from input line to COIDSC
	CALL SETAUX(%REF(DSTR),DSTRL)
	COILEN = DSTRL				! set maximum length
	COILEN = FINSTR(COIDSC,'text')		! get string
	IF (MOANED) THEN
	   COILEN = 0				! just in case
	   GOTO 999
	ENDIF
C
C zero length text?
	IF (COILEN.EQ.0) THEN
	   CALL MOAN(MSG_TEXTTOOSHORT)
	   GOTO 999
	ENDIF
C
C fill CTXBUF
C
C text from COIDSC
	CTXBUFW(CTX_W_TXTLEN)=COILEN
	CTXBUFW(CTX_W_TXTLEN)=CPYSTR(COIDSC,CTXBUFL(CTX_L_DESC))
C
C set RO entry to be horizontal
	CTXBUFR(CTX_L_RO) = 0.0
C
C set position to be current cursor position
	CTXBUFR(CTX_L_X)  = CSXY(1)
	CTXBUFR(CTX_L_Y)  = CSXY(2)
C
C set up TH entry, from values in attribute set
	CALL SETTH(CTXBUFL(CTX_L_TH),-1,DUMMY)
C 
C Set up an TS entry
C
C Does construction text feature code exist
	IF (FRTFND(CONTFC)) THEN
	   CALL MOAN(MSG_BADCODE,CONTFC)
	   GOTO 999
	ENDIF
C
C Is the graphical type text
	IF (.NOT.FRTTEX) THEN
	   CALL MOAN(MSG_FCNOTTEXT,CONTFC)
	   CALL LEARN(MSG_SETTEXT)
	   GOTO 999
	ENDIF
C
	CTXBUFW(CTX_W_TS1) = CONTFC
	CTXBUFW(CTX_W_TS2) = 0
	IF (POSOPT) THEN
	   CTXBUFW(CTX_W_TS3) = CONLOC			! location
	   IF (CTXBUFW(CTX_W_TS3).GT.8) CTXBUFW(CTX_W_TS3)=0
	ELSE
	   CTXBUFW(CTX_W_TS3) = 0
	ENDIF
	CTXBUFW(CTX_W_TS3) = CTXBUFW(CTX_W_TS3).OR.'8000'X	! top bit
						! (to indicate text)
	CALL LIB$INSV(CONFNT,4,2,CTXBUFW(CTX_W_TS3))	! set font
	CALL LIB$INSV(CONCLS,6,6,CTXBUFW(CTX_W_TS3))	! set text
	CTXBUFW(CTX_W_TS4) = 0
C
C generate auxiliary array
	IF (GENAUX(1,CTXBUFR(CTX_L_X),CTXBUFL(CTX_L_AUX1),
     *	      CTXBUFL(CTX_L_DESC),CTXBUFR(CTX_L_RO),
     *	      CTXBUFL(CTX_L_TH),COIPAK,CTXBUFW(CTX_W_TS1))) GOTO 999
C
C set up attributes
C Use the set of point attributes from the attribute set
	CALL LSTARR(CONDEF,CONATT,COATTC,COATTV,.FALSE.)
C
C apply Z position of cursor, if appropriate
	IF (ZOPT.AND.CSZI.NE.IFF_ABSENT) THEN
	   IF (ADDZ(CSZI,MXATTR-1,CONATT,COATTC,COATTV)) GOTO 999
	ENDIF
C
C add those attributes that are set up for DIGITISE OPERATION, if
C there are none, those that are set up for "other"
	OPER = DEFINITION(P_DIGITISE)
	IF (OPER.EQ.0) OPER = DEFINITION(P_OTHER)
	CALL LSTARR(OPER,CONATT,COATTC,COATTV,.TRUE.)
C
	CALL ARRLST(CONATT,COATTC,COATTV,CTXBUFL(CTX_L_ATTR),DUMMY)
C
C insert this feature into list, after current home CTX, and make it
C the home one
	CALL INSRTCTX(COICTXD)
	CALL LOADCOI(.TRUE.)
	GOTO 1000
C
C
999	IF (MOANED) CALL IGNCMD
1000	RETURN
	END
