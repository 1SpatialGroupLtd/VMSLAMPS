        SUBROUTINE VIEW_DISPLAY(WORK_SIZE,WORK)
C
***     IDENT   23MR92
***     MODULE  VIEW_DISPLAY
C
C       Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C       Written                                 RWR	Apr-1989
C
C	LITES2 cartographic editor VIEW DISPLAY command.
C
        IMPLICIT NONE
C
***	PARAMETER/CMN:ACS/
***	PARAMETER/CMN:MOANMESS/
C
***	COMMON/LSL$CMNFRT:FRTACD/
***	COMMON/CMN:DOUT/
***	COMMON/CMN:LABELS/
***	COMMON/CMN:OVERLAY/
***	COMMON/CMN:PLOT/
***	COMMON/CMN:VIEW/
C
C arguments
	INTEGER		WORK_SIZE		! size of workspace
	BYTE		WORK(WORK_SIZE)		! workspace
C
C w/s
	INTEGER		I
	INTEGER		IERR
	INTEGER		SAV_ANNODISP
	INTEGER		SAV_ANNOVER
	REAL		SAV_DISP_LIMITS(4)
	LOGICAL		SAV_HAD_LIMITS
	LOGICAL		HAD_SETANNO
	INTEGER		VC
	EQUIVALENCE	(VC,VIEW_CURRENT)
	INTEGER		LEVEL
	REAL		DUMMYR
	INTEGER		COL,ROW
	INTEGER		NUM_COL
	INTEGER		OFFSET
	INTEGER		RETCOD
	LOGICAL		WHOLE
	INTEGER		MAX_NUM_COLOURS
	INTEGER		COLOUR_NEW
	BYTE		COLOUR_NEWB(4)
	EQUIVALENCE	(COLOUR_NEW,COLOUR_NEWB)
	INTEGER		WKID
C
C define bit map for selection of levels
	INTEGER		BMAP_SIZE
	PARAMETER	(BMAP_SIZE = MAXLEVEL/32 + 1)
C
	INTEGER*4	BMAP(BMAP_SIZE)
C
C Functions
	INTEGER		CALLR
	LOGICAL		HADBREAK
	LOGICAL		LIB$EXTZV
C
C save current settings of annotation things
	SAV_ANNODISP = ANNODISP
	SAV_ANNOVER  = ANNOVER
C
C not called SETANNO yet
	HAD_SETANNO = .FALSE.
C
C has display been created (with render command?)
	IF (.NOT.VIEW_CREATED(VC)) THEN
	   CALL MOAN(MSG_VIEWNOTCREATED)
	   GOTO 9990
C
C has this level been generated?
	ELSEIF (.NOT.DSTRIN.AND..NOT.
     &	                  VIEW_LEVEL_GENERATED(VIEW_LEVEL(VC),VC)) THEN
	   CALL MOAN(MSG_VIEWNOTGENERTD,VIEW_LEVEL(VC),VC)
	   GOTO 9990
	ENDIF
C
	ANNODISP = DINTS(1)
	ANNOVER =  DINTS(2)
C
C check if display and overlay exist
C can only draw into display 3 and 4
C
C Can only draw into displays greater than 3
	IF (ANNODISP.LT.3.OR.ANNODISP.GT.MAXDISP) THEN
	   CALL MOAN(MSG_DISPRNG,3,MAXDISP)
	   GOTO 9990
	ELSEIF (.NOT.DISPLAY_EXISTS(ANNODISP)) THEN
	   CALL MOAN(MSG_DISPNOTEXISTS,ANNODISP)
	   CALL LEARN(MSG_USEDISPCRE)
	   GOTO 9990
	ENDIF
C
	IF (ANNOVER.LT.0.OR.ANNOVER.GT.MAXOVER) THEN
	   CALL MOAN(MSG_OVERRNG,0,MAXOVER)
	   GOTO 9990
	ELSEIF (OVERLAY_PLANES(ANNOVER,ANNODISP).EQ.0) THEN
	   CALL MOAN(MSG_OVNOTEXISTS,ANNOVER,ANNODISP)
	   CALL LEARN(MSG_USEDISPOVER)
	   GOTO 9990
	ENDIF
C
C read any range at end of command
	IF (DSTRIN) THEN
	   DO 10, I=1,BMAP_SIZE
	      BMAP(1) = 0
10	   CONTINUE
	   CALL RDSEL(VIEW_LEVEL_TOTAL(VC),DSTR(1:DSTRL),.FALSE.,
     &	               BMAP_SIZE,BMAP,IERR)
	   IF (IERR.LT.0) GOTO 9990
C
C cannot have level 0
	   IF (BMAP(1)) THEN
	      CALL MOAN(MSG_ILLEGLMINVAL,0,1)
	      GOTO 9990
	   ENDIF
C
C check if these levels have all been generated
	   DO 20, I = 1,VIEW_LEVEL_TOTAL(VC)
	      IF (LIB$EXTZV(I,1,BMAP)) THEN
	         IF (.NOT.VIEW_LEVEL_GENERATED(I,VC)) THEN
	            CALL MOAN(MSG_VIEWNOTGENERTD,I,VC)
	            GOTO 9990
	         ENDIF
	      ENDIF
20	   CONTINUE
	ENDIF
C
C now set up annotation
	SAV_HAD_LIMITS = DISPLAY_HADLIM(ANNODISP)
	CALL CPYPAK(4,DISPLAY_LIMITS(1,ANNODISP),SAV_DISP_LIMITS)
C
	DISPLAY_HADLIM(ANNODISP) = .TRUE.
	DISPLAY_LIMITS(1,ANNODISP) = 0.5
	DISPLAY_LIMITS(3,ANNODISP) = 0.5
	IF (PLOT_ON) THEN
	   DISPLAY_LIMITS(2,ANNODISP) = VIEW_PIXELS(1,VC)+1.5
	   DISPLAY_LIMITS(4,ANNODISP) = VIEW_PIXELS(2,VC)+1.5
	ELSE
	   DISPLAY_LIMITS(2,ANNODISP) = DISPLAY_RASX(ANNODISP)+0.5
	   DISPLAY_LIMITS(4,ANNODISP) = DISPLAY_RASY(ANNODISP)+0.5
	ENDIF
C
	CALL SETANNO(.TRUE.)
	HAD_SETANNO = .TRUE.
C
	IF (PLOT_ON) THEN
	   WKID = PLOT_WKID
	ELSE
	   WKID = ANNODISP
	ENDIF
C
C clear entire overlay (until bug in VWS4.2 is sorted?)
	CALL GSFACI(0)			! in colour 0
C
C clear rectangle
	CALL LSG_FILL_RECTANGLE(DISPLAY_LIMITS(1,ANNODISP),
     &				DISPLAY_LIMITS(3,ANNODISP))
C
	CALL LSG_ROTATION_MODE(WKID,.TRUE.)	! draw rotated
	CALL LSG_PACKING_MODE(WKID,8)		! byte image
C
C on the plotter, set pixel size to 1 world unit
	IF (PLOT_ON) CALL LSG_PIXEL_SIZE(WKID,1.0,1.0)
C
C draw whole of image, if this level is terrain, otherwise
C only draw points that are at this level
	WHOLE = VIEW_LEVEL_TERRAIN(VIEW_LEVEL(VC),VC)
C
C get maximum number of colours in overlay
	MAX_NUM_COLOURS = 2**OVERLAY_PLANES(ANNOVER,ANNODISP) - 1
C
C retrieve view (in columns to start with)
	NUM_COL = 0
	DO 200, COL = 1,VIEW_PIXELS(1,VC)
	   OFFSET = NUM_COL*VIEW_PIXELS(2,VC)
C
	   DO 100 ROW = 1,VIEW_PIXELS(2,VC)
C
	      IF (WHOLE.AND..NOT.DSTRIN) THEN
	         LEVEL = VIEW_LEVEL(VC)
	      ELSE
	         LEVEL = 0
	      ENDIF
C
	      RETCOD = CALLR(
     &	                  VIEW_ID(VC),
     &	                  LEVEL,
     &	                  COL,
     &	                  ROW,
     &	                  DUMMYR,
     &	                  COLOUR_NEW,
     &	                  DUMMYR,
     &	                  %VAL(VIEW_ADDRESSES(XVISA_READ_PIXEL)))
C
	      IF (.NOT.RETCOD) THEN
	         CALL MOAN(MSG_VISLIBERR)
	         CALL LITES2_SIGNAL(RETCOD)
	         GOTO 9999
	      ENDIF
C
C if not drawing terrain (ie whole image), is this pixel the level
C we want? If not use background colour
	      IF (DSTRIN) THEN
	         IF (.NOT.LIB$EXTZV(LEVEL,1,BMAP)) COLOUR_NEW = 0
	      ELSEIF (.NOT.WHOLE.AND.(LEVEL.NE.VIEW_LEVEL(VC))) THEN
	         COLOUR_NEW = 0
	      ENDIF
C
C force colour to be a colour we can draw
	      COLOUR_NEW = MAX(COLOUR_NEW,0)
C
	      IF (COLOUR_NEW.GT.MAX_NUM_COLOURS) THEN
	         COLOUR_NEW = MOD((COLOUR_NEW-1),MAX_NUM_COLOURS)+1
	      ENDIF
C
	      WORK(OFFSET+ROW) = COLOUR_NEWB(1)
100	   CONTINUE
C
C check for abort
	   IF (HADBREAK()) GOTO 9999
C
C is array full?
	   NUM_COL = NUM_COL + 1
	   IF ((NUM_COL+1)*VIEW_PIXELS(2,VC).GT.WORK_SIZE.OR.
     &	            COL.EQ.VIEW_PIXELS(1,VC)) THEN
C
C draw this lot of columns
	      CALL LSG_PIXEL_ARRAY(
     &		   FLOAT(COL-NUM_COL+1),1.0,
     &		   VIEW_PIXELS(2,VC),-NUM_COL,
     &	           1,VIEW_PIXELS(2,VC),1,NUM_COL,
     &		   1,
     &		   1,
     &		   WORK)
C
C and reinitialise count
	      NUM_COL = 0
	   ENDIF
200	CONTINUE
C
	GOTO 9999
C
9990	CALL IGNCMD
9999	CONTINUE
C
C return common block to state it was in when we started
	IF (HAD_SETANNO) THEN
	   CALL SETANNO(.FALSE.)
	   DISPLAY_HADLIM(ANNODISP)= SAV_HAD_LIMITS 
	   CALL CPYPAK(4,SAV_DISP_LIMITS,DISPLAY_LIMITS(1,ANNODISP))
	ENDIF
	ANNODISP = SAV_ANNODISP
	ANNOVER  = SAV_ANNOVER
	RETURN
        END
