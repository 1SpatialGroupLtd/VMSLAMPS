	SUBROUTINE DIGCRN
C
***	IDENT   17OC94
***	MODULE  DIGCRN
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Written					CCB	6-Dec-1988
C
C	LITES2 cartographic editor START command in SETUP state
C
	IMPLICIT NONE
C
***     PARAMETER/CMN:EFNLUN/		! event flags and luns
***     PARAMETER/CMN:MOANMESS/		! moan constants
***	PARAMETER/CMN:TRNTYP/
C
***     COMMON/CMN:MAPS/		! all about the maps
***     COMMON/CMN:MASTER/
***     COMMON/CMN:SETUP/
***     COMMON/CMN:WORKS/		! info about worksatation
C
C Functions called
	LOGICAL		TRNSET
C
C Workspace
	REAL		XEXT,YEXT	! X and Y extent
	SAVE		XEXT,YEXT
	CHARACTER*2	CPTN(4)		! corner point names (all 4)
	INTEGER		I,J		! counter
C
C initialisation
C
	DATA	CPTN/'NW','SW','SE','NE'/
C
	IF (SETMAP.LT.0) GOTO 4000	! initialise call
C
	WARP_N(2) = WARP_N(2)+1
	WARP_POINTS(3,WARP_N(2)) = CSXY(1)
	WARP_POINTS(4,WARP_N(2)) = CSXY(2)
	IF (WARP_N(2).LT.4) GOTO 5010
C
C prompt for next corner
4000	SETUP = .FALSE.			! cancel any existing setup
5000	SETMAP = SETMAP+1		! on to next map
	IF (SETMAP.GT.0) GOTO 9000
C
C get corner points that were read in from IFF file (+ origin offset)
C IFF output system (3,4) are moved to our input system (1,2)
C
	DO 5001 J=1,4
	   DO 5001 I=1,2
	      WARP_POINTS(I,J)=CRNPTS(I+2,J,SETMAP)+MAPORG(I,SETMAP)
5001	CONTINUE
	WARP_TRANSFORM = TRNTYP_LASERAID
	WARP_N(1) = 4	! got 4 map points
	WARP_N(2) = 0	! but no image points
	WARP_DIRTY = .TRUE.	! coeffs need calculating
C
C compute extents
C
	XEXT=ABS(MAX(WARP_POINTS(1,4)-WARP_POINTS(1,1),
     &		     WARP_POINTS(1,3)-WARP_POINTS(1,2)))
	YEXT=ABS(MAX(WARP_POINTS(2,1)-WARP_POINTS(2,2),
     &		     WARP_POINTS(2,4)-WARP_POINTS(2,3)))
C
	CALL INFORM(MSG_BLANK)
	CALL INFORM(MSG_FRMAPSETUP,IFFNAM(1,SETMAP))
5010	CALL PING				! attract attention
	CALL INFORM(MSG_DIG,CPTN(WARP_N(2)+1))
	CALL INFORM(MSG_BLANK)
	GOTO 9999
C
C calculate the transformation
9000	WARP_FITTED = .FALSE.			! in case fails
	IF (TRNSET(
     &	   TRNTYP_LASERAID,WARP_POINTS,WARP_COF,XEXT,YEXT,.TRUE.)) THEN
	   SETMAP = -1
	   GOTO 4000			! start again
	ENDIF
C
C reverse the points, and calculate back-transformation
	CALL WARP_REVERSE(4,WARP_POINTS)
C
	IF (TRNSET(
     &	   TRNTYP_LASERAID,WARP_POINTS,WARP_BCK,XEXT,YEXT,.TRUE.)) THEN
	   SETMAP = -1
	   GOTO 4000			! start again
	ENDIF
C
C put the points back again
	CALL WARP_REVERSE(4,WARP_POINTS)
C
C compute an approximate angle and scale of the transformation
C for hardware text
	CALL WARP_SCA_ANG(WARP_COF,WARP_TRANSFORM,WARP_SCA,WARP_ANG)
C
	WARP_RMS(1) = 0.0	! should fit 4 perfectly
	WARP_RMS(2) = 0.0
	WARP_FITTED = .TRUE.
	WARP_DIRTY = .FALSE.
	WARP_BACK_SIMPLE = .FALSE.
	SET_TRANSFORM = WARP_TRANSFORM
	SETSCA = WARP_SCA
	SETANG = WARP_ANG
	SET_BACK_SIMPLE = WARP_BACK_SIMPLE
	CALL VIOMV3(WARP_COF,64,SETCOF)
	CALL VIOMV3(WARP_BCK,64,SETBCK)
	WARP_SET = .TRUE.
	SETUP = .TRUE.
	CALL ABANDN			! mainly to set state READY
	SETING = .FALSE.		! flag not setting up now
C
9999	RETURN
	END
