C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-06-29 16:09:58.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION PRIV_COMMAND
C
***     IDENT   29JN88
***     MODULE  PRIV_COMMAND
C
C       Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C       Written                                 RWR	27-JUN-1988
C
C to read the rest of line argument to the PRIVILEDGE COMMMAND command
C and
C 1) get the primary and secondary command numbers from the command
C 2) add them to the list of privileged commands
C
C returns TRUE for failure, FALSE for success
C
        IMPLICIT NONE
C
***     PARAMETER/LSL$CMNLSL:LSLLIBMSG/
***	PARAMETER/CMN:MOANMESS/
C
***     COMMON/LSL$CMNLSL:EXCEPTION/	! ERROR handling
***     COMMON/LSL$CMNLSL:CMDCOM/	! CMDLIB command handling
***	COMMON/CMN:DEFINE/
***	COMMON/CMN:DOUT/
***	COMMON/CMN:GLOBAL/
C
C functions
	LOGICAL		GETDEF
	INTEGER*4	RDCOMM		! CMDLIB - reads a command
	LOGICAL		RDCHS
	INTEGER		MINDEX
C
C w/s
	INTEGER*4	RESULT		! command read result
	INTEGER*4	ADDR
	INTEGER		PRI,SEC		! primary and sec. command nos
	INTEGER		IND
	BYTE		ICH
C
C Primary Command Table
	EXTERNAL	PRIME_CMD_TABLE
C
C assume failure
	PRIV_COMMAND = .TRUE.
C
C read from "rest of command"
	CALL SETAUX(%REF(DSTR),DSTRL)
C
C read command
	RESULT = RDCOMM(PRIME_CMD_TABLE)
C
C check result - a bit grubby, as
C 1) we may want a primary command without secondary
C 2) don't want any arguments
C although PRIME_CMD_TABLE has them
C
	PRI = 0
	SEC = 0
C
C No arguments expected
	IF (RESULT.GT.0) THEN
	   PRI = CMDNUM
	   SEC = SECMDN
C
C Primary command, when secondary command required
	ELSEIF (ERRNUM.EQ.LSL__UNEXPEOL.AND.CMDNUM.LT.0) THEN
	   PRI = ABS(CMDNUM)
C
C Commands when arguments required
	ELSEIF (ERRNUM.EQ.LSL__UNEXPEOL.AND.CMDNUM.GT.0) THEN
	   PRI = CMDNUM
	   SEC = SECMDN
C
C otherwise we have an error
	ELSE
	   CALL ERRCMD('command')
	   GOTO 1000
	ENDIF
C
C check for characters after command
C (MINDEX must find something, or something has gone terribly wrong!!!)
	IF (SEC.EQ.0) THEN
	   IND = MINDEX(DSTR(1:DSTRL),CMDNST) + CMDNLE
	ELSE
	   IND = MINDEX(DSTR(1:DSTRL),SECNST) + SECNLE
	ENDIF
C
	IF (DSTRL-IND+1.GT.0) THEN
	   CALL SETAUX(%REF(DSTR(IND:DSTRL)),DSTRL-IND+1)
	   IF (.NOT.RDCHS(ICH)) THEN
	      CALL MOAN(MSG_CMDLIBUXC,ICH)
	      GOTO 1000
	   ENDIF
	ENDIF
C
C got primary (and secondary) command number, so add to list
	IF (GETDEF(ADDR)) GOTO 1000
	CALL PUTLNG(PRI,%VAL(ADDR+PRIV_PRI))
	CALL PUTLNG(SEC,%VAL(ADDR+PRIV_SEC))
C
C add this "definition" at head of list (don't check if it is there
C already, or anything)
	CALL PUTLNG(PRIV_LIST,%VAL(ADDR))
	PRIV_LIST = ADDR
C
C succeeded
	PRIV_COMMAND = .FALSE.
C
1000	CONTINUE
        RETURN
        END
