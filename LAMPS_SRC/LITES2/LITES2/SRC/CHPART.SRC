	SUBROUTINE CHPART(WHOLE)
C
***     IDENT   10MY96
***     MODULE  CHPART
C
C       Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C       Written                                 CCB	22-NOV-1984
C
C	LITES2 cartographic editor routine to perform PART change
C	operations.
C	Change the part of the object in hand delimited by IMVRT
C	(marked vertex) and IHVRT (current vertex), or the whole
C	feature if WHOLE true, according to the flags in /VARIAT/.
C	Also performs BRIDGE operation.
C
        IMPLICIT NONE
C
***	PARAMETER/CMN:ACS/
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:CONSTS/
***	PARAMETER/CMN:EFNLUN/
***	PARAMETER/CMN:END/
***     PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:PACK/
***	PARAMETER/CMN:STAPAR/
C
	INCLUDE 'LSL$CMNIFF:CB.STR'
C
***	COMMON/CMN:ATTBTS/
***	COMMON/CMN:CSTRCT/
***	COMMON/CMN:DEFINE/
***	COMMON/LSL$CMNFRT:FRTCOM/
***	COMMON/CMN:MAPS/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:OIIH/
***	COMMON/CMN:STATE/
***	COMMON/CMN:STRIKE/
***	COMMON/CMN:VARIAT/
C
C arguments
	LOGICAL	WHOLE			! whole feature?
C
C functions called
	LOGICAL	STRTFT			! start new feature
	INTEGER	GENNF			! generate new FSN (NF)
	LOGICAL FRTFND
C
C local variables
	INTEGER*2	FS(4)
	INTEGER	I,J
	REAL	DXY(3)
	LOGICAL	L
	LOGICAL	END1,END2		! changed part at ends?
	LOGICAL	OLDFTR,NEWFTR		! use old, need new, feature
	LOGICAL	USDFSN			! re-used old FSN
	LOGICAL	SWAP			! ends swapped
	LOGICAL	ARC			! dealing with arc
	LOGICAL	CIRCLE			! dealing with full circle
	REAL	  AUX(AUXLEN)		! auxiliary array
	REAL	  ANG1,ANG2
	INTEGER   OPER
	REAL	  COEFFS(4)		! plane arcs lie in
C
C
	ARC = IHPAK(PAKGT).GE.CLOTYP.AND.IHPAK(PAKGT).LE.FULTYP
	CIRCLE = ARC .AND. IHPAK(PAKGT).EQ.FULTYP
C
	OPER = DEFINITION(P_BREAK)
	IF (OPER.EQ.0) OPER = DEFINITION(P_OTHER)
C
	IF (WHOLE) THEN
	   IMVRT = 1
	   IMNVRT = .TRUE.
	   IHVRT = IHLST
	   IHNVRT = .TRUE.
	   END1 = .TRUE.
	   END2 = .TRUE.
C
C for arcs, get coordinates of start and end points
	   IF (ARC) THEN
	      IMCXY(1) = IHAUX(XCENI) + COS(IHAUX(STAI))*IHAUX(RADI)
	      IMCXY(2) = IHAUX(YCENI) + SIN(IHAUX(STAI))*IHAUX(RADI)
	      IF (ZOPT.AND.IHC_DEFINED)
     &	            CALL PLANE_INTERPL(IMCXY,IHCOEFFS,IMCXY(3))
	      IMSTRT = .TRUE.
	      IMEND  = .FALSE.
	      IHCXY(1) = IHAUX(XCENI) + 
     &	                 COS(IHAUX(STAI)+IHAUX(TOTI))*IHAUX(RADI)
	      IHCXY(2) = IHAUX(YCENI) +
     &	                 SIN(IHAUX(STAI)+IHAUX(TOTI))*IHAUX(RADI)
	      IF (ZOPT.AND.IHC_DEFINED)
     &	            CALL PLANE_INTERPL(IHCXY,IHCOEFFS,IHCXY(3))
	      IHEND = .TRUE.
	      IHSTRT= .FALSE.
	   ENDIF
	   GOTO 100
	ENDIF
C
C Get the two ends the right way round
C IM... nearer the start of the feature
C (for complete circles, part starts at marked point, end current point)
C
	IF (ARC) THEN
C
C work out angle to IMCXY, relative to start
	   ANG1 = ATAN2(IMCXY(2)-IHAUX(YCENI),IMCXY(1)-IHAUX(XCENI))
	   ANG1 = ANG1 - IHAUX(STAI)
C
C get in range 0 -> twopi
   10	   IF (ANG1.LT.0.0) THEN
	      ANG1 = ANG1 + TWOPI
	      GOTO 10
	   ELSEIF (ANG1.GE.TWOPI) THEN
	      ANG1 = ANG1 - TWOPI
	      GOTO 10
	   ENDIF
C
C work out angle to IHCXY
	   ANG2 = ATAN2(IHCXY(2)-IHAUX(YCENI),IHCXY(1)-IHAUX(XCENI))
	   ANG2 = ANG2 - IHAUX(STAI)
C
C get in range 0 -> twopi
   11	   IF (ANG2.LT.0.0) THEN
	      ANG2 = ANG2 + TWOPI
	      GOTO 11
	   ELSEIF (ANG2.GE.TWOPI) THEN
	      ANG2 = ANG2 - TWOPI
	      GOTO 11
	   ENDIF
C
C now see if these need swapping
C
	   IF (((IHAUX(TOTI).GE.0.0).AND.(ANG1.GT.ANG2)).OR.
     &	       ((IHAUX(TOTI).LT.0.0).AND.(ANG2.GT.ANG1))) THEN ! swap
	      L = IMSTRT
	      IMSTRT = IHSTRT
	      IHSTRT = L
	      L = IMEND
	      IMEND = IHEND
	      IHEND = L
	      DXY(1) = IHCXY(1)
	      DXY(2) = IHCXY(2)
	      IHCXY(1) = IMCXY(1)
	      IHCXY(2) = IMCXY(2)
	      IMCXY(1) = DXY(1)
	      IMCXY(2) = DXY(2)
	      IF (ZOPT) THEN
	         CALL PUTLNG(IHCXY(3),DXY(3))
	         CALL PUTLNG(IMCXY(3),IHCXY(3))
	         CALL PUTLNG(DXY(3),IMCXY(3))
	      ENDIF
	   ENDIF
C
	   END1 = IMSTRT
	   END2 = IHEND
C
C for circles, make END2 true, so that only two bits will be output,
C END1 is only true for start and end points the same, when the whole
C circle will be deleted, - but this case should be caught by CHKPRT
C
	   IF (CIRCLE) THEN
	      END2 = .TRUE.	! don't output last bit of circle
	      END1 = IMCXY(1).EQ.IHCXY(1).AND.IMCXY(2).EQ.IHCXY(2)
	   ENDIF
C
C deal with full circles with graphical types 2 and 3
C - treat as an arc, that was found by the start
	   IF (ABS(IHAUX(TOTI)).EQ.SNGL(TWOPI).AND.
     &				IHPAK(PAKGT).NE.FULTYP) THEN
	      IHAUX(STAI) = ATAN2(IMCXY(2)-IHAUX(YCENI),
     &	            IMCXY(1)-IHAUX(XCENI))
	      IF (IHAUX(STAI).LT.0.0) IHAUX(STAI) = IHAUX(STAI)+TWOPI
	      END1 = .TRUE.
	   ENDIF
C
	   GOTO 100
	ENDIF
C
C
C SWAP is only for the benefit of BRIDGE. If TRUE, then the bridge does
C not need reversing. If two points are the same, we want SWAP = .TRUE.
C unless both first vertex.
	SWAP = .FALSE.			! assume not swapped
	IF (IHVRT-IMVRT) 40,20,50
20	IF (IMNVRT) THEN		! both same vertex
	   IF (IHVRT.EQ.1) GOTO 50	! the first vertex
	   GOTO 45
	ENDIF
	I = IHVRT-IHVO			! offset in IHXY
	DXY(1) = IHXY(1,I+1)-IHXY(1,I)
	DXY(2) = IHXY(2,I+1)-IHXY(2,I)
	J = 1					! use x
	IF (ABS(DXY(2)).GT.ABS(DXY(1))) J = J+1	! use y
	IF (DXY(J).GT.0) THEN		! positive traverse
	   IF (IHCXY(J).GT.IMCXY(J)) GOTO 50
	ELSE
	   IF (IHCXY(J).LT.IMCXY(J)) GOTO 50
	ENDIF
C
C ends are the wrong way round - swap them
40	I = IHVRT
	IHVRT = IMVRT
	IMVRT = I
	L = IHNVRT
	IHNVRT = IMNVRT
	IMNVRT = L
	DXY(1) = IHCXY(1)
	DXY(2) = IHCXY(2)
	IHCXY(1) = IMCXY(1)
	IHCXY(2) = IMCXY(2)
	IMCXY(1) = DXY(1)
	IMCXY(2) = DXY(2)
	IF (ZOPT) THEN
	   CALL PUTLNG(IHCXY(3),DXY(3))
	   CALL PUTLNG(IMCXY(3),IHCXY(3))
	   CALL PUTLNG(DXY(3),IMCXY(3))
	ENDIF
45	SWAP = .TRUE.			! now swapped
C
C ends now in the correct order
50	CONTINUE
C
C divert if ending a BRIDGE
	IF (SINDEX.EQ.STATE_CONSTRUCT.AND.
     &	    (NDMODE.EQ.END_BRIDGE.OR.NDMODE.EQ.END_BRIDGE_CLOSE)) THEN
	   FLG_GEOCHANGE = .TRUE.
	   CALL BRIDGE(SWAP)
	   GOTO 998
	ENDIF
C
C are the ends of the changed part the ends of the feature?
	END1 = IMNVRT.AND.(IMVRT.EQ.1)
	END2 = IHNVRT.AND.(IHVRT.EQ.IHLST)
C
100	IF (CHPOS) THEN				! changing position
C
C check that a finite move has been defined
	   CHCSXY(1) = CSXY(1)-CHCSXY(1)	! convert to vector
	   CHCSXY(2) = CSXY(2)-CHCSXY(2)
	   IF (CHCSXY(1).EQ.0.0.AND.CHCSXY(2).EQ.0.0) CHPOS = .FALSE.
	   IF (ZOPT) THEN
C
C only set up a Z move if both start and end have defined Zs
	      IF (CHCZI.NE.IFF_ABSENT.AND.CSZI.NE.IFF_ABSENT) THEN
	         CHCSXY(3) = CSXY(3) - CHCSXY(3)
	         IF (CHCSXY(3).NE.0.0) CHPOS = .TRUE.
	      ELSE
	         CHCZI = IFF_ABSENT
	      ENDIF
	   ENDIF
	ENDIF
C
C is it a code change or a geometrical change?
	FLG_CODECHANGE = CHLAY.OR.CHMAP.OR.CHFSN.OR.CHFC.OR.CHPC
	FLG_GEOCHANGE  = CHPOS.OR.CHREV.OR.CHOFF.OR.CHTRAN.OR.CHFILT
C
C if changing whole feature, and operation can be performed in-situ,
C then let CHANGE handle it
	IF (END1.AND.END2) THEN			! whole feature
C
C is a new feature needed, or will the old one do
	   NEWFTR = CHLAY.OR.CHMAP.OR.CHPOS.OR.CHREV.OR.CHCOPY
     &	            .OR.CHOFF.OR.CHTRAN.OR.CHFILT
	   OLDFTR = CHFSN.OR.CHFC.OR.CHPC.OR.LIMBO.OR.CLREDT.OR.SETEDT
	   IF (.NOT.(NEWFTR.OR.OLDFTR)) THEN
	      CALL INFORM(MSG_NOCHANGE)
	      GOTO 998
	   ENDIF	   
	   IF (.NOT.NEWFTR) THEN
	      CALL CHANGE(IHPAK)
	      GOTO 998
	   ENDIF
	ENDIF
C
C take copy of pack
	CALL CPYPAK(PAKLEN,IHPAK,COIPAK)
C
C if doing part operation on a full circle, change to specified arc FC
	IF (.NOT.(END1.AND.END2).AND.IHPAK(PAKGT).EQ.FULTYP) THEN
C
C Does arc feature code exist
	   IF (FRTFND(ARCFC)) THEN
	      CALL MOAN(MSG_BADCODE,ARCFC)
C
C check that arc FC - graphical type 4
	   ELSEIF (FRTGT.NE.CIRTYP) THEN
	      CALL MOAN(MSG_FCNOTARC,ARCFC)
C
C so overwrite existing FC and GT
	   ELSE
	      COIPAK(PAKGT) = FRTGT
	      COIPAK(PAKFC) = ARCFC
	      GOTO 110
	   ENDIF
C
C had better abandon, if ARCFC is unsatisfactory
	   CALL LEARN(MSG_EXPLAINARC1)
	   CALL LEARN(MSG_EXPLAINARC2)
	   CALL LEARN(MSG_SETARC)
	   CALL MOAN(MSG_FTABANDONED)
	   CALL ABANDN
	   GOTO 998
	ENDIF

C
110	IF (.NOT.CHCOPY) THEN
C
C Delete old segment (remove from screen)
	   CALL LDSG(IHPAK,.TRUE.)
	   USDFSN = .FALSE.		! not used old FSN yet
	ELSE
	   USDFSN = .TRUE.		! will need a new FSN
	   COIPAK(PAKSEG) = 0		! and new segment
	ENDIF
C
C Do first part, from start of feature to MA... position
	IF (.NOT.CHCOPY.AND..NOT.END1) THEN
C
C re-use FSN and segment number
	   USDFSN = .TRUE.
	   COIPAK(PAKFLG) = 0		! not deleted
	   IF (STRTFT(IHPAK,IHTC,IHFS,IHAC,IHTH)) CALL COLAPS(120)
	   IF (ARC) THEN
	      CALL CPYPAK(AUXLEN,IHAUX,AUX)
	      IF (CIRCLE) THEN			! reset start of curve
	         AUX(STAI) = ATAN2(IHCXY(2)-IHAUX(YCENI),
     &	                           IHCXY(1)-IHAUX(XCENI))
	         IF (AUX(STAI).LT.0.0) AUX(STAI) = AUX(STAI) + TWOPI
	      ENDIF
	      CALL CREARC(1,COIPAK(PAKGT),AUX,IHC_DEFINED,IHCOEFFS)
	   ELSE
	      CALL ADDVRT(IHPAK,1,IMVRT,.FALSE.)	! add vertices
	      IF (.NOT.IMNVRT) THEN
C
C no attributes for this point yet
	         CONATT = 0
C
C apply Z position of cursor, if appropriate
	         IF (ZOPT.AND.IMCZI.NE.IFF_ABSENT) THEN
	            CALL ADDZ(IMCXY(3),MXATTR,CONATT,COATTC,COATTV)
	         ENDIF
C
C use attributes from "BREAK" operation list
	         CALL LSTARR(OPER,CONATT,COATTC,COATTV,.TRUE.)
C
C add cursor
	         CALL ADCORD(IMCXY,CONATT,COATTC,COATTV)
	      ENDIF
	   ENDIF
	   CALL ENDFT				! end feature
	   COIPAK(PAKSEG) = 0		! will need new segment
	ENDIF
C
C Now for the changed part
C
C Make copy of FS entry
	DO 120 I=1,4
	   FS(I) = IHFS(I)
120	CONTINUE
	IF (CHMAP) COIPAK(PAKMAP) = NEWMAP
	IF (CHLAY) COIPAK(PAKOVL) = NEWLAY
	IF (CHFSN) COIPAK(PAKFSN) = NEWFSN
	IF (CHFC) THEN
	   COIPAK(PAKFC) = NEWFC
	   FS(1) = NEWFC
	   COIPAK(PAKGT) = NEWGT
	ENDIF
	IF (CHPC) FS(3) = (FS(3).AND..NOT.16383).OR.NEWPC
	IF (.NOT.CHFSN) THEN		! not a new FSN
	   IF (USDFSN.OR.CHMAP) THEN	! used old FSN, or new map
	      COIPAK(PAKFSN) = GENNF(COIPAK)	! so generate new
	   ELSE
	      USDFSN = .TRUE.		! have used old FSN now
	   ENDIF
	ENDIF
C
C update maximum NF for map (if GENNF used, then will have been done
C already, but no harm to do again)
	IF (COIPAK(PAKFSN).GT.MAXNF(COIPAK(PAKMAP)))
     &			MAXNF(COIPAK(PAKMAP)) = COIPAK(PAKFSN)
C	
	COIPAK(PAKFLG) = 0		! not deleted
	IF (LIMBO) COIPAK(PAKFLG) = LIMFLG! deleted	
	IF (STRTFT(IHPAK,IHTC,FS,IHAC,IHTH)) CALL COLAPS(121)
C
C Is this part to be offset, transformed or reversed or moved ?
	IF (CHOFF) THEN
	   CALL OFFALL(ARC)
	ELSEIF (CHTRAN) THEN
	   CALL TRANSF(ARC)
	ELSEIF (CHFILT) THEN
	   CALL FILTF
	ELSEIF (CHREV) THEN
	   IF (.NOT.IHNVRT) THEN
C
C no attributes for this point yet
	      CONATT = 0
C
C apply Z position of cursor, if appropriate
	      IF (ZOPT.AND.IHCZI.NE.IFF_ABSENT) THEN
	         CALL ADDZ(IHCXY(3),MXATTR,CONATT,COATTC,COATTV)
	      ENDIF
C
C use attributes from "BREAK" operation list
	      CALL LSTARR(OPER,CONATT,COATTC,COATTV,.TRUE.)
C
C add cursor
	      CALL ADOFF(IHCXY,CONATT,COATTC,COATTV)
	   ENDIF
	   I = 0
	   IF (.NOT.IMNVRT) I = I+1		! don't add IMVRT
	   IF (IHVRT.GE.IMVRT+I) CALL ADDVRT(IHPAK,IHVRT,IMVRT+I,CHPOS)
	   IF (.NOT.IMNVRT) THEN
C
C no attributes for this point yet
	      CONATT = 0
C
C apply Z position of cursor, if appropriate
	      IF (ZOPT.AND.IMCZI.NE.IFF_ABSENT) THEN
	         CALL ADDZ(IMCXY(3),MXATTR,CONATT,COATTC,COATTV)
	      ENDIF
C
C use attributes from "BREAK" operation list
	      CALL LSTARR(OPER,CONATT,COATTC,COATTV,.TRUE.)
C
C add cursor
	      CALL ADOFF(IMCXY,CONATT,COATTC,COATTV)
	   ENDIF
	ELSE
	   IF (ARC) THEN
	      CALL CPYPAK(AUXLEN,IHAUX,AUX)
	      IF (IHC_DEFINED) CALL CPYPAK(4,IHCOEFFS,COEFFS)
	      IF (CHPOS) THEN
	         AUX(XCENI) = AUX(XCENI) + CHCSXY(1)
	         AUX(YCENI) = AUX(YCENI) + CHCSXY(2)
C
C calculate new plane, at a new height
C
C If original plane is ax + by + cz + d = 0, a plane parallel to this
C displaced distance e up the Z axis is 
C                      ax + by + cz + d' = 0, where
C                      d' = d - ec
C
	         IF (ZOPT.AND.IHC_DEFINED.AND.CHCZI.NE.IFF_ABSENT) THEN
	            COEFFS(4) = COEFFS(4) - COEFFS(3)*CHCSXY(3)
	         ENDIF
	      ENDIF
	      CALL CREARC(2,COIPAK(PAKGT),AUX,IHC_DEFINED,COEFFS)
	   ELSE
	      I = 0
	      IF (.NOT.IMNVRT) THEN
C
C no attributes for this point yet
	         CONATT = 0
C
C apply Z position of cursor, if appropriate
	         IF (ZOPT.AND.IMCZI.NE.IFF_ABSENT) THEN
	            CALL ADDZ(IMCXY(3),MXATTR,CONATT,COATTC,COATTV)
	         ENDIF
C
C add cursor, with "BREAK" operation attributes
	         CALL LSTARR(OPER,CONATT,COATTC,COATTV,.TRUE.)
	         CALL ADOFF(IMCXY,CONATT,COATTC,COATTV)
	         I = I+1				! don't add IMVRT
	      ENDIF
	      IF (IHVRT.GE.IMVRT+I) THEN
	         CALL ADDVRT(IHPAK,IMVRT+I,IHVRT,CHPOS)
	      ENDIF
	      IF (.NOT.IHNVRT) THEN
C
C no attributes for this point yet
	         CONATT = 0
C
C apply Z position of cursor, if appropriate
	         IF (ZOPT.AND.IHCZI.NE.IFF_ABSENT) THEN
	            CALL ADDZ(IHCXY(3),MXATTR,CONATT,COATTC,COATTV)
	         ENDIF
C
C add cursor, with "BREAK" operation attributes
	         CALL LSTARR(OPER,CONATT,COATTC,COATTV,.TRUE.)
	         CALL ADOFF(IHCXY,CONATT,COATTC,COATTV)
	      ENDIF
	   ENDIF
	ENDIF
C
C If we have changed the feature code, and the new graphical type is an
C arc, then generate auxiliary array for circle (hopefully cannot fail)
	IF (CHFC) THEN
	   CALL FRTFND(NEWFC)
	   IF (FRTARC) CALL GENCIR(FRTGT,COIXY(1,2),COIAUX)
	ENDIF
	CALL ENDFT				! end feature
C 
C Do last part, from IH... position to end
	IF (.NOT.CHCOPY.AND..NOT.END2) THEN
	   CALL CPYPAK(PAKLEN,IHPAK,COIPAK)	! new copy of pack
	   IF (USDFSN) COIPAK(PAKFSN) = GENNF(COIPAK)
	   COIPAK(PAKSEG) = 0			! need new segment
	   COIPAK(PAKFLG) = 0			! not deleted
	   IF (STRTFT(IHPAK,IHTC,IHFS,IHAC,IHTH)) CALL COLAPS(122)
	   IF (ARC) THEN
	      CALL CREARC(3,COIPAK(PAKGT),IHAUX,IHC_DEFINED,IHCOEFFS)
	   ELSE
	      I = 0
	      IF (.NOT.IHNVRT) THEN
C
C no attributes for this point yet
	         CONATT = 0
C
C apply Z position of cursor, if appropriate
	         IF (ZOPT.AND.IHCZI.NE.IFF_ABSENT) THEN
	            CALL ADDZ(IHCXY(3),MXATTR,CONATT,COATTC,COATTV)
	         ENDIF
C
C add cursor, with "BREAK" operation attributes
	         CALL LSTARR(OPER,CONATT,COATTC,COATTV,.TRUE.)
	         CALL ADCORD(IHCXY,CONATT,COATTC,COATTV)
	         I = I+1				! don't add IHVRT
	      ENDIF
	      CALL ADDVRT(IHPAK,IHVRT+I,IHLST,.FALSE.)	! add vertices
	   ENDIF
	   CALL ENDFT				! end feature
	ENDIF
C
C Remove the old object in hand completely
	IF (.NOT.CHCOPY) CALL DELFT(IHPAK,IHEF)
C
998	RETURN
        END
