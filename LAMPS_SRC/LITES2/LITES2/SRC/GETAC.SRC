C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-10-11 15:44:26.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE GETAC(PACK,TC,AC)
C
***	MODULE	GETAC
***	IDENT	11OC89
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author: Clarke Brunt
C
C Coded 24.ix.84
C
C To get a feature's TCs and ACs into FTRACD for manipulation.
C MAP and PNF (start of feature pointer) from PACK identify the
C feature whose TCs and ACs we want.
C TCs at address TC, ACs at address AC
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:ACS/
***	PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:PACK/
C
***	COMMON/CMN:ACS/
***	COMMON/LSL$CMNIFF:IFFHAN/
C
C arguments
	INTEGER*4 PACK(PAKLEN)
	INTEGER*4 TC			! TC address
	INTEGER*4 AC			! AC address
C
C w/s
	INTEGER		LENGTH		! length of text part
	INTEGER*2	IECODE,IELEN
	LOGICAL*1	DOAC		! doing AC's (else TC's)
	INTEGER		ADR
C
C have we got the required ACs and TCs already?
	IF (PACK(PAKMAP).EQ.ACMAP.AND.PACK(PAKPNF).EQ.ACPNF) GOTO 1000
C
C no, so we need to read them in
	CALL FREEAC(FTRACD)		! free old contents
	ACEDIT = .FALSE.		! ACs not edited
	TCEDIT = .FALSE.		! TCs not edited
	ACMAP = PACK(PAKMAP)		! remember MAP
	ACPNF = PACK(PAKPNF)		! and feature pointer
	ADR = TC			! TC address
	DOAC = .FALSE.			! do TCs first
	GOTO 15
C
10	IF (DOAC) GOTO 1000		! finished
	ADR = AC			! AC address
	DOAC = .TRUE.			! do ACs now
C
15	IF (ADR.EQ.0) GOTO 10		! none to do
C
C select map
	CALL SELIF(ACMAP)
C
C position onto entry
	CALL IFFPKE(IECODE,IELEN,ADR)
	GOTO 30
C
C get next entry
20	CALL IFFNXT(IECODE,IELEN)
	IF (IELEN.EQ.-1) THEN
	   CALL NASTY(MSG_UNEXPEIFF)
	   CALL COLAPS(MSG_UNEXPEIFF)
	   GOTO 1000
	ENDIF
C
C read entry
30	IF (IECODE.EQ.'VO') GOTO 20		! ignore voids
	IF (DOAC) THEN
	   IF (IECODE.NE.'AC') GOTO 10		! finished AC's
	   ACBUFL(AC_L_TYPE) = 0		! zero longword
	   CALL EIHR(ACBUFL(AC_L_TYPE),1,1)	! type
	   CALL EIHRL(ACBUFL(AC_L_ACVAL),1,2)	! value
	   LENGTH = MIN(IELEN-3,(ACMAX+1)/2)	! length of text part
	   IF (LENGTH.GT.0) THEN
	      CALL EIHR(ACTEXT,LENGTH,4)	! text
	      LENGTH = LENGTH*2			! bytes
	      IF (ACTEXT(LENGTH).EQ.0) LENGTH = LENGTH-1
	      LENGTH = MIN(LENGTH,ACMAX)
	   ENDIF
	ELSE
	   IF (IECODE.EQ.'TC') THEN
	      ACBUFL(AC_L_TYPE) = -1		! it's a TC
	   ELSEIF (IECODE.EQ.'CH') THEN
	      ACBUFL(AC_L_TYPE) = -2		! it's a CH
	   ELSE
	      GOTO 10
	   ENDIF
	   LENGTH = MIN(IELEN,(TCMAX+1)/2)
	   IF (LENGTH.GT.0) THEN
	      CALL EIHR(ACTEXT,LENGTH,1)	! text
	      LENGTH = LENGTH*2			! bytes
	      IF (ACTEXT(LENGTH).EQ.0) LENGTH = LENGTH-1
	   ENDIF
	ENDIF
	ACBUFW(AC_W_TXTLEN) = LENGTH
	CALL ADDAC(FTRACD)
	GOTO 20
C
1000	RETURN
	END
