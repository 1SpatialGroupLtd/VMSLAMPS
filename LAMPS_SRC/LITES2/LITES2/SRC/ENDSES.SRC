C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-01-12 13:12:20.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION ENDSES(ACTION,HADNAM,FILNAM)
C
***	IDENT	12JA96
***	MODULE	ENDSES
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created (Called CLEAR)			RJH	24-SEP-1984
C
C Description
C
C LITES2 end of editing session.
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:EFNLUN/
***	PARAMETER/CMN:MOANMESS/
C
	INCLUDE	'($DSCDEF)'
C
***	COMMON/CMN:CNSTRN/
***	COMMON/CMN:DRAWIN/
***	COMMON/LSL$CMNIFF:IFFHAN/
***	COMMON/CMN:MAPS/		! multiple map details
***	COMMON/CMN:OPTION/
***	COMMON/CMN:OVERLAY/
***	COMMON/CMN:PLOT/
***	COMMON/CMN:RFCTRL/		! refresh picture control
***	COMMON/CMN:WORKS/
C
C Arguments
C
	INTEGER		ACTION		! what to do with workspace file
	LOGICAL*1	HADNAM		! filename given
	CHARACTER*(*)	FILNAM		! the filename
C
C ACTION=1	(QUIT) delete .WRK file
C ACTION=2	(DUMP) rename .WRK file as .DMP
C ACTION=3	(EXIT) tidy .WRK file to new version of input, and delete
C ACTION=4	(WRITE) as 3, but don't delete workspace
C
C Local Variables
	INTEGER*4	I		! counter
	INTEGER*4	MAP		! map counter
	INTEGER*4	DOTPOS		! position of last '.'
	REAL		OFFSET(2)
	LOGICAL		MULTIPLE
C
C dynamic descriptor for temporary string
	INTEGER		TMPNAM(2)	! temporary - dynamic descriptor
	BYTE		TMPNAMB(4)
	EQUIVALENCE	(TMPNAM,TMPNAMB)
	DATA		TMPNAMB/0,0,0,DSC$K_CLASS_D/
C
C function
	INTEGER		MINDEX
	LOGICAL		STRTOUTPUT
	INTEGER*4	LIB$EXTZV
C
	ENDSES = .TRUE.			! assume failure
C
C Turn off cursor
	CURS = .FALSE.
	CALL RFDRAW
C
C Close any open IFF files to tidy them and free LUNs
	DO 10 MAP=0,MAPTOP
	   IF (MAP_EXIST(MAP).AND.MAPLUN(MAP).NE.0) CALL CLOSIF(MAP)
10	CONTINUE
C
C if writing or exiting, and have had a file name, then may be
C trying to exit multiple files to one file. If so, start this
C file and return the offset of this new file
	MULTIPLE = .FALSE.		! not outputting multiple maps to one
	IF (HADNAM.AND.(ACTION.EQ.3.OR.ACTION.EQ.4)) THEN
	   I = 0
	   DO 3 MAP=0,MAPTOP
	      IF (MAP_EXIST(MAP)) I = I+1
3	   CONTINUE
	   IF (I.GT.1 .OR.
     &	         (I.EQ.1.AND.DO_FLY_TRANS.AND.PROJ_TRANS_OUTPUT)) THEN
	      IF (STRTOUTPUT(MULTIPLE,OUTLUN,OFFSET)) GOTO 999
	   ENDIF
	ENDIF
C
C carry out our action on work file
	DO 20 MAP=0,MAPTOP
	   IF (.NOT.MAP_EXIST(MAP)) GOTO 20
	   IF (.NOT.MAPWRK(MAP)) GOTO 19 ! not valid workspace file
C
C only allow WRITE on READONLY files, and inform the user for
C QUIT or EXIT
	   IF (MAPRO(MAP).AND.ACTION.NE.4) THEN
	      IF (ACTION.EQ.2.OR.ACTION.EQ.3) THEN
	         CALL INFORM(MSG_OUTRO,MAP+1)
	      ENDIF
C
C only allow WRITE on INSITU files, and inform the user for
C QUIT,DUMP or EXIT
	   ELSEIF (MAPINS(MAP).AND.ACTION.NE.4) THEN
C
C update map header flags if required
	      IF (OS_MH_EDIT) THEN
	         DO 5, I=1,OS_MH_FL_BMAP_SIZ
	            IF (OS_MH_FL_BMAP(I,MAP).NE.0) THEN
C
C open file
	               CALL IFFOPI(INLUN,MAPNAM(1,MAP),FILEID(1,MAP))
C
C patch MH entry
	               CALL OS_MH_SET_FLAGS(MAP,INLUN)
C
C close file
	               CALL IFFCLO(INLUN)
	               GOTO 6
	            ENDIF
5	         CONTINUE
	      ENDIF
6	      CALL INFORM(MSG_OUTINS,MAP+1,MAPNAM(1,MAP))
	   ELSE
C
C re-open .WRK file
	      IF (MAPRO(MAP)) THEN
	         CALL IFFOPI(INLUN,MAPNAM(1,MAP),FILEID(1,MAP),0)
	      ELSE
	         CALL IFFOPI(INLUN,MAPNAM(1,MAP),FILEID(1,MAP))
	      ENDIF
	      CALL IFFIRV(1)	! input revision level 1, for CB's
	      CALL IFFRLA(.TRUE.)	! and read look-ahead
C
C ACTION=QUIT
	      IF (ACTION.EQ.1) THEN	! get rid of work file
11	         CALL STR$COPY_DX(TMPNAM,MAPNAM(1,MAP))
	         CALL IFFCDL(INLUN)	! close and delete
C
C ACTION=DUMP
	      ELSEIF (ACTION.EQ.2) THEN	! Derive name of dump file
	         IF (HADNAM) THEN
	            CALL STR$COPY_DX(TMPNAM,FILNAM)
	            GOTO 16
	         ENDIF
12	         DOTPOS = 0
	         CALL STR$COPY_DX(TMPNAM,MAPNAM(1,MAP))
15	         I = MINDEX(TMPNAM,'.')
	         IF (I.NE.0) THEN
	            CALL STR$RIGHT(TMPNAM,TMPNAM,I+1)
	            DOTPOS = DOTPOS+I
	            GOTO 15
	         ENDIF
	         CALL STR$LEFT(TMPNAM,MAPNAM(1,MAP),DOTPOS)
	         CALL STR$CONCAT(TMPNAM,TMPNAM,'DMP')
16		 CALL INFORM(MSG_OUTDMP,MAP+1,TMPNAM)
	         CALL IFFCRN(INLUN,TMPNAM)	! close and rename
	         IF (IERCD.NE.0.AND.IERCD.NE.'LOST') THEN	! failed
	            CALL IFFCLO(INLUN)		! just to make sure
		    CALL NASTY(MSG_IFFRENA,MAP+1,TMPNAM)
	            IF (HADNAM) GOTO 999	! give another chance
	            CALL INFORM(MSG_OUTDMP,MAP+1,MAPNAM(1,MAP))
	            GOTO 19			! try next
	         ENDIF
C
C ACTION=EXIT(3),WRITE(4)
	      ELSEIF (ACTION.GE.3) THEN		! derive name of output
	         IF (SELOUT.AND..NOT.SAMAPS.AND..NOT.MAPSEL(MAP)) THEN
	            IF (ACTION.EQ.3) GOTO 11	! QUIT instead
	            CALL IFFCLO(INLUN)		! try next one
	            GOTO 19
	         ENDIF
C
C open output file
	         IF (MULTIPLE) GOTO 18		! already open
	         IF (HADNAM) THEN
	            CALL STR$COPY_DX(TMPNAM,FILNAM)
	         ELSE
	            I = MINDEX(IFFNAM(1,MAP),';') ! up to version number
	            CALL STR$LEFT(TMPNAM,IFFNAM(1,MAP),I-1)
	         ENDIF
	         IF (SAMOPT) THEN	! use revision level from input file
	            CALL IFFORV( LIB$EXTZV(MAP,1,MAP_ORLEV_B_MAP))
	         ENDIF
		 CALL IFFOPN(OUTLUN,TMPNAM,,,'Output')	! open output
	         IF (IERCD.EQ.0) GOTO 18	! OK
C
C If a filename was given, error probably means it was a duff name,
C so give the user another chance, otherwise try to dump
		 CALL NASTY(MSG_IFFOPEN,MAP+1,TMPNAM)
	         IF (HADNAM) THEN
	            CALL IFFCLO(INLUN)
	            GOTO 999
	         ENDIF
	         IF (ACTION.EQ.3) THEN		! EXIT
		    CALL INFORM(MSG_TRYDUMP)
	            GOTO 12			! try DUMP instead
	         ENDIF
	         CALL IFFCLO(INLUN)		! try next one
	         GOTO 19
C
18	         IF (MULTIPLE) THEN
	            CALL INFORM(MSG_MAPPADDED,MAP+1)
	         ELSE
	            CALL IFFIRV(1)	! input revision level 1, for CB's
	            CALL IFFINQ(TMPNAM)		! get full name
		    CALL INFORM(MSG_OUTMAP,MAP+1,TMPNAM) ! output file
	         ENDIF
C
C need to set up origin and projection information for TDYIFF, as it
C has no maps to open files with SELIF
C
	         IF (DO_FLY_TRANS) THEN
	            CURR_ORG(1) = MAPORG(1,MAP)
	            CURR_ORG(2) = MAPORG(2,MAP)
	            CALL CPYPAK(30,MAP_PARAMS(1,MAP),CURR_PARAMS)
	            CURR_SYS = MAP_SYS(MAP)
	            CURR_ZONE = MAP_ZONE(MAP)
	            CURR_UNIT = MAP_UNIT(MAP)
	            USE_ORG = .FALSE.
	         ELSE
	            ORGXY(1)=MAPORG(1,MAP)		! set origin for map
	            ORGXY(2)=MAPORG(2,MAP)		! R*8 -> real conversion
	         ENDIF
	         IF (MULTIPLE) THEN
C
C get origin offset relative to origin of new (combined map)
	            IF (.NOT.DO_FLY_TRANS) THEN
	               ORGXY(1) = ORGXY(1) - OFFSET(1)
	               ORGXY(2) = ORGXY(2) - OFFSET(2)
	            ENDIF
	         ELSE
C
C get true origin for this map (for system variables $EXIT_RANGE)
C (STRTOUTPUT has set this for multiple maps)
	            IF (DO_FLY_TRANS) THEN
	               EXIT_ORGXY(1) = MAPORG(1,MAP)
	               EXIT_ORGXY(2) = MAPORG(2,MAP)
	            ELSE
	               EXIT_ORGXY(1) = MAPORG(1,MAP) + LITES2ORG(1)
	               EXIT_ORGXY(2) = MAPORG(2,MAP) + LITES2ORG(2)
	            ENDIF
	         ENDIF
	         USE_ORG = (ORGXY(1).NE.0.0.OR.ORGXY(2).NE.0.0) .AND.
     &	                     .NOT.DO_FLY_TRANS
	         IF (MULTIPLE) THEN
	            CALL CMBNEIFF(INLUN,OUTLUN,MAP)
	         ELSE
	            CALL TDYIFF(INLUN,OUTLUN,MAP)	! tidy up the file
C
C patch MH entry
	            IF (OS_MH_EDIT) CALL OS_MH_SET_FLAGS(MAP,OUTLUN)
	         ENDIF
	         IF (ACTION.EQ.3) THEN
	            CALL IFFCDL(INLUN)		! delete work
	         ELSE
	            CALL IFFCLO(INLUN)		! just close it
	         ENDIF
	         IF (.NOT.MULTIPLE) THEN
	            CALL IFFCLO(OUTLUN)		! but keep new output
		    CALL INFORM(MSG_OUTCMPL,MAP+1)
	         ENDIF
C
C ACTION=UNKNOWN
	      ELSE
		 CALL COLAPS(33)	! shouldn't happen
	         CALL IFFCLO(INLUN)	! tidy as we can
	      ENDIF
	      IF (IERCD.NE.0.AND.IERCD.NE.'LOST')
     &				CALL NASTY(MSG_IFFCLOSE,MAP+1,TMPNAM)
	   ENDIF
C
C finished with this file, drop any lock except for WRITE
19	   IF (ACTION.NE.4) THEN
	      IF (MAPLCK(MAP).NE.0) THEN
	         CALL SYS$DEQ(%VAL(MAPLCK(MAP)),,,)
	         MAPLCK(MAP) = 0
	      ENDIF
	   ENDIF
20	CONTINUE
C
C if outputting to one (combined) map, finish off the file,
C then tidy it to correct file, and delete temporary file
	IF (MULTIPLE) THEN
	   CALL IFFSEL(OUTLUN)
	   CALL IFFEM
	   CALL IFFEJ
C
C open output file (on INLUN, as we are already using OUTLUN for temp file)
	   CALL STR$COPY_DX(TMPNAM,FILNAM)
	   CALL IFFOPN(INLUN,TMPNAM,,,'Merged')	! open output
	   IF (IERCD.NE.0) THEN
C
C If a filename was given, error probably means it was a duff name,
C so give the user another chance
	      CALL NASTY(MSG_IFFOPEN,MAPTOP+1,TMPNAM)
	      CALL IFFCDL(OUTLUN)		! delete temporary file
	      GOTO 999
	   ENDIF
C
	   CALL IFFIRV(1)			! read coords as CBs
	   CALL IFFRLA(.TRUE.)	! and read look-ahead
	   CALL IFFINQ(TMPNAM) 			! get full name
	   CALL INFORM(MSG_MEROUTPUT,TMPNAM)
C
C need to set up origin and projection information for TDYIFF, as it
C has no maps to open files with SELIF.
C
	   IF (DO_FLY_TRANS) THEN
C
C this sets up a NULL transformation
	      CURR_ORG(1) = LITES2ORG(1)
	      CURR_ORG(2) = LITES2ORG(2)
	      CALL CPYPAK(30,LITES2PAR,CURR_PARAMS)
	      CURR_SYS = LITES2SYS
	      CURR_ZONE = LITES2ZONE
	      CURR_UNIT = LITES2UNIT
	      USE_ORG = .FALSE.
	   ELSE
	      ORGXY(1)=OFFSET(1)
	      ORGXY(2)=OFFSET(2)
	      USE_ORG = ORGXY(1).NE.0.0.OR.ORGXY(2).NE.0.0
	   ENDIF
C
C tidy temporary file
	   CALL TDYIFF(OUTLUN,INLUN,-1)		! map not in CMN:MAPS.CMN
	   CALL INFORM(MSG_OUTCMPLNAME,TMPNAM)
C
C close and delete OUTLUN (ie temporary input file) and close and save INLUN
	   CALL IFFCDL(OUTLUN)
	   CALL IFFCLO(INLUN)
	ENDIF
C
	IF (ACTION.EQ.4) GOTO 998	! that's all for WRITE
C
C Close input devices
	IF (BITINI) THEN
	   CALL BITINIT(.FALSE.)
	   BITINI = .FALSE.
	ENDIF
	IF (BALINI) THEN
	   CALL BALINIT(.FALSE.)
	   BALINI = .FALSE.
	ENDIF
	IF (SCRINI) THEN
	   CALL SCRINIT(.FALSE.)
	   SCRINI = .FALSE.
	ENDIF
	IF (BUTINI) THEN
	   CALL BUTINIT(.FALSE.)
	   BUTINI = .FALSE.
	ENDIF
	IF (KRSINI) THEN
	   CALL KRSINIT(.FALSE.,0)	! turn off
	   KRSINI = .FALSE.		! now off
	   KRSCLR = .TRUE.		! re-initialise next time
	ENDIF
	IF (DSRINI) THEN
	   CALL DSRINIT(.FALSE.)
	   DSRINI = .FALSE.
	ENDIF
C
C Tidy up and close GKS
C
	IF (.NOT.NODISP) THEN
C
	   IF (PLOT_OPEN) THEN
	      CALL GCLWK(PLOT_WKID)
	      CALL LSGA_GCLKS
	      PLOT_ON = .FALSE.
	      PLOT_OPEN = .FALSE.
	   ENDIF
C
C close primary and secondary
	   DO 100 I=1,WSMAX
	      IF (WKAC(I)) THEN
	         CALL GDAWK(I)			! deactivate
	         WKAC(I) = .FALSE.
	      ENDIF
	      IF (WKOP(I)) THEN
	         CALL GCLWK(I)			! close
	         CALL CLSWK(I)			! device dependent close
	         WKOP(I) = .FALSE.
	      ENDIF
100	   CONTINUE
C
C close any other displays
	   DO 101 I=3,MAXDISP
	      IF (.NOT.DISPLAY_EXISTS(I)) GOTO 101
	      CALL GCLWK(I)
101	   CONTINUE
C
	   CALL GCLKS
	   NODISP = .TRUE.			! no displays now
	ENDIF
C
C Close digitising table
C Do this last because it may need to alter event flags
	IF (TABINI) THEN
	   CALL TABINIT(.FALSE.)
	   TABINI = .FALSE.
	ENDIF
C
998	ENDSES = .FALSE.	! succeeded
999	CURS = .TRUE.		! cursor on (if continuing)
	RETURN
	END
