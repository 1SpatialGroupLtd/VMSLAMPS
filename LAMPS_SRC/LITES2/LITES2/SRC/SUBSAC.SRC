C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-12-15 09:00:42.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION SUBSAC(S1,L1,S2,L2)
C
***	IDENT   15DE87
***	MODULE  SUBSAC
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Written		 			CCB	15-JAN-1984
C
C	LITES2 cartographic editor SUBSTITUTE AC routine.
C	Substitute string S2 length L2 for string S1 length L1 in
C	current AC.
C	S1 is used as workspace and should be at least 80 long
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:ACS/
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:PACK/
C
***	COMMON/CMN:ACS/
***	COMMON/CMN:ATTBTS/
***	COMMON/CMN:STRIKE/
***	COMMON/LSL$CMNLSL:TXTC/
C
C arguments
	CHARACTER*(*)	S1,S2
	INTEGER		L1,L2
C
C functions called
	LOGICAL		THISAC
	INTEGER		MINDEX		! INDEX for dummy strings
	INTEGER		CPYSTR		! COPY for dummy strings
C
	INTEGER		I
	INTEGER		OLDLEN		! old length of text
	INTEGER		NEWLEN		! new length of text
C
	SUBSAC = .TRUE.			! assume failure
C
	IF (FO) THEN			! ACs of found object
	   IF (THISAC(FTRACD)) GOTO 10
	ELSE				! current attribute ACs
	   IF (THISAC(CONACD)) GOTO 10
	ENDIF
	GOTO 20
C
10	CALL MOAN(MSG_NOTCAC)
	GOTO 999
C
C search for first string
20	IF (L1.EQ.0) THEN			! null string
	   I = 1				! matches at start
	ELSE
	   I = MINDEX(ACBUFL(AC_L_DESC),S1(1:L1))
	   IF (I.EQ.0) THEN
	      CALL MOAN(MSG_STRNOTFOUND,S1(1:L1))
	      GOTO 999
	   ENDIF
	ENDIF
C
C check length of new text
	NEWLEN = ACBUFW(AC_W_TXTLEN)-L1+L2
	IF (ACBUFL(AC_L_TYPE).LT.0) THEN	! TC or CH
	   IF (NEWLEN.GT.TCMAX) THEN
	      CALL MOAN(MSG_ACTOOLONG,TCMAX)
	      GOTO 999
	   ENDIF
	ELSE					! AC
	   IF (NEWLEN.GT.ACMAX) THEN
	      CALL MOAN(MSG_ACTOOLONG,ACMAX)
	      GOTO 999
	   ENDIF
	ENDIF
C
C Construct new text in TXTDSC
C
C take copy of old text in S1
	OLDLEN = ACBUFW(AC_W_TXTLEN)		! old length
	IF (OLDLEN.GT.0) CALL CPYSTR(ACBUFL(AC_L_DESC),S1(1:OLDLEN))
C
C First bit of old text
	TXTPTR = I-1
	IF (I.GT.1) CALL CPYSTR(S1(1:I-1),TXTDSC)
C
C insert new string
	TXTPTR = NEWLEN				! new length
	IF (L2.GT.0) CALL STRINS(S2(1:L2),TXTDSC,I)
C
C insert last bit of old text
	IF (I+L1.LE.OLDLEN)
     &	      CALL STRINS(S1(I+L1:OLDLEN),TXTDSC,I+L2)
C
	IF (FO) THEN
	  CALL ALTAC(FTRACD,ACBUFL(AC_L_TYPE),ACBUFL(AC_L_ACVAL),.FALSE.)
	ELSE
	 CALL ALTAC(CONACD,ACBUFL(AC_L_TYPE),ACBUFL(AC_L_ACVAL),.FALSE.)
	ENDIF
C
	SUBSAC = .FALSE.			! success
C
999	RETURN
	END
