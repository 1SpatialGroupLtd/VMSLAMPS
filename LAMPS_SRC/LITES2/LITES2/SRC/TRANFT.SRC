	LOGICAL FUNCTION TRANFT()
C
***	IDENT	04FE86
***	MODULE	TRANFT
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	 3-Feb-1986
C
C Description
C
C	Subroutine to compute transformation parameters for ORIENT
C	command, given found object and orienting base
C
C	Returns .TRUE. if vector of FO has no length
C
	IMPLICIT	NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:PACK/
C
***	COMMON/CMN:ORIENT/
***	COMMON/CMN:STRIKE/
C
C functions
C
	LOGICAL		INTSCT
C
C Local Variables
C
	REAL	INPT1(2),INPT2(2)	! vector of FO to be used
	REAL	NEWPT1(2),NEWPT2(2)	! corresponding vector on base
	REAL	TEST1(2),TEST2(2)	! possible points for INPT2
	REAL	TP1(2),TP2(2)		! intersection of possible
					! vectors with base
	REAL	TESTL(2,2)		! temporary vector
	REAL	NEW(2)			! INPT1 projected on base
	REAL	DIST,PROP,TMP1,TMP2	! temporary storage
C
	INTEGER	IN1,IN2			! temporary
	INTEGER	I			! index
C
C find the vector of the found object that is to be used for orienting
C the feature wrt base
C
C if feature was found on a vector (between vertices) then use that
C vector
C if on first or last vertex, and feature is not closed, then use
C vector out of this vertex
C
	I=FOVRT-FOVO				! get index in FO
C
	IF ((.NOT.FONVRT).OR.			! between vertices
     &	   ((FOVRT.EQ.1.OR.FOVRT.EQ.FOLST).AND.	! on end vertex
     &	   (FOTHIS(1).NE.FOTHAT(1).OR.FOTHIS(2).NE.FOTHAT(2)))) THEN
C
C backup index if on last vertex
C
	   IF (FOVRT.EQ.FOLST) I=I-1
	   INPT1(1)=FOXY(1,I)
	   INPT1(2)=FOXY(2,I)
	   INPT2(1)=FOXY(1,I+1)
	   INPT2(2)=FOXY(2,I+1)
C
C if on a vertex, use the vector from that point that is nearest to the
C direction of the base
C
	ELSE
	   INPT1(1)=FOXY(1,I)		! first point on vector
	   INPT1(2)=FOXY(2,I)
C
C if not at end of feature, other end of vector is the previous or 
C next one
C
	   IF (FOVRT.NE.1.AND.FOVRT.NE.FOLST) THEN
	      TEST1(1)=FOXY(1,I-1)
	      TEST1(2)=FOXY(2,I-1)
	      TEST2(1)=FOXY(1,I+1)
	      TEST2(2)=FOXY(2,I+1)
C
C if at start of feature, one possibility is second vertex; other
C possibility is second last vertex (which may or may not be in common!)
C
	   ELSEIF (FOVRT.EQ.1) THEN
	      TEST1(1)=FOXY(1,2)
	      TEST1(2)=FOXY(2,2)
	      IF ((FOVO+FOTOP).EQ.FOLST) THEN		! in common
	         TEST2(1)=FOXY(1,FOTOP-1)
	         TEST2(2)=FOXY(2,FOTOP-1)
	      ELSE				! get it from file
	         CALL GETVRT(FOPAK,FOLST-1,FOLST-1)
	         TEST2(1)=RIXY(1,RITOP)
	         TEST2(2)=RIXY(2,RITOP)
	      ENDIF
C
C if at end of feature, one possibility is second last vertex, the
C other possibility is the second vertex in feature (first is
C coincident with last one)
C
	   ELSE
	      TEST1(1)=FOXY(1,I-1)
	      TEST1(2)=FOXY(2,I-1)
	      IF (FOVO.EQ.0) THEN	! got it in common
	         TEST2(1)=FOXY(1,2)
	         TEST2(2)=FOXY(2,2)
	      ELSE			! get it from file
	         CALL GETVRT(FOPAK,2,2)
	         TEST2(1)=RIXY(1,RITOP)
	         TEST2(2)=RIXY(2,RITOP)
	      ENDIF
	   ENDIF
C
C intersect 1st line with base
C
	   TESTL(1,1)=INPT1(1)
	   TESTL(2,1)=INPT1(2)
	   TESTL(1,2)=TEST1(1)
	   TESTL(2,2)=TEST1(2)
	   IF (INTSCT(TESTL,ORIBAS,TP1,IN1,IN2)) THEN	! parallel,
	      INPT2(1)=TEST1(1)				! so accept
	      INPT2(2)=TEST1(2)
	      GOTO 10
	   ENDIF
C
C intersect 2nd line with base
C
	   TESTL(1,2)=TEST2(1)
	   TESTL(2,2)=TEST2(2)
	   IF (INTSCT(TESTL,ORIBAS,TP2,IN1,IN2)) THEN
	      INPT2(1)=TEST2(1)
	      INPT2(2)=TEST2(2)
	      GOTO 10
	   ENDIF
C
C test line which intersects the base furthest from the projection
C of the common point, is the line in the nearest direction to the base
C
	   CALL PRPDST(INPT1,ORIBAS,DIST,PROP)	! project point to base
	   NEW(1)=ORIBAS(1,1)+PROP*(ORIBAS(1,2)-ORIBAS(1,1))
	   NEW(2)=ORIBAS(2,1)+PROP*(ORIBAS(2,2)-ORIBAS(2,1))
C
	   TMP1=SQRT((TP1(1)-NEW(1))**2+(TP1(2)-NEW(2))**2)
	   TMP2=SQRT((TP2(1)-NEW(1))**2+(TP2(2)-NEW(2))**2)
	   IF (TMP1.LE.TMP2) THEN
	      INPT2(1)=TEST2(1)
	      INPT2(2)=TEST2(2)
	   ELSE
	      INPT2(1)=TEST1(1)
	      INPT2(2)=TEST1(2)
	   ENDIF
	ENDIF
C
C check that vector has length
C
   10	CONTINUE
	TRANFT=INPT1(1).EQ.INPT2(1).AND.INPT1(2).EQ.INPT2(2)
	IF (TRANFT) GOTO 900
C
C project selected vector onto base
C
	CALL TRANLN(ORIBAS,INPT1,INPT2,NEWPT1,NEWPT2)
C
C work out transformation and store results in ORIENT.CMN
C
	CALL ORTHOG(INPT1,INPT2,NEWPT1,NEWPT2,AFACTOR,BFACTOR,
     &	               CONST1,CONST2)
C
C
  900	CONTINUE
	RETURN
	END
