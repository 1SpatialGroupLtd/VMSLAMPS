C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-05-10 17:15:04.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION INTSCNA(AUX,COEFFS,COEFFS_DEF,X,Y,Z)
C
***	MODULE	INTSCNA
***	IDENT	10MY96
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author  Ron Russell
C
C To find the distance from the cursor of the best intersection
C between a cirle arc and the current cursor constraint
C (which may be constrained on the found object).
C
C AUX is the array defining the arc
C X,Y returns the intersection position
C
C the function returns .TRUE. if there is an intersection
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:PACK/
C
***	COMMON/CMN:MASTER/
***	COMMON/CMN:OPTION/
***	COMMON/LSL$CMNFRT:FRTCOM/
***	COMMON/CMN:STRIKE/
C
C arguments
	REAL	AUX(AUXLEN)
	REAL	COEFFS(4)		! coefficients of circle plane
	LOGICAL	COEFFS_DEF
	REAL	X,Y,Z
C
C functions called
	LOGICAL INTLARC
	LOGICAL INTAARC
C
C w/s
	INTEGER	START,END
	REAL	R
	REAL	MINR			! best distance so far
	REAL	XY(2,2)
	REAL	AUXBOX(4)		! limiting box for arc
	INTEGER	NUM
	INTEGER I,J
	INTEGER INLIN(2),INARC(2)
	LOGICAL TOUCH
	REAL	TMP1,TMP2
	INTEGER TMP1I,TMP2I
	EQUIVALENCE (TMP1,TMP1I),(TMP2,TMP2I)
C
	MINR = 1E38			! v. large value to start with
C
C are we intersecting with a cursor constraint?
	IF (FNDMDE.EQ.0) THEN		! yes
	   IF (SCSARC) THEN
	      CALL ARCARC(SCSAUX,AUX,NUM,XY(1,1),XY(1,2),INLIN,INARC)
	   ELSE
	      CALL LINARC(SCSTXY,AUX,NUM,XY(1,1),XY(1,2),INLIN,INARC,TOUCH)
	   ENDIF
	   DO 10, I=1,NUM
	      IF (ABS(INARC(I)).GT.1) GOTO 10		! not within arc
	      IF (SCSARC.AND.ABS(INLIN(I)).GT.1) GOTO 10! not in cnst arc
	      R = (XY(1,I)-CONTXY(1))**2 + (XY(2,I)-CONTXY(2))**2
	      IF (R.LT.MINR) THEN
	         MINR = R
	         X = XY(1,I)
	         Y = XY(2,I)
	         IF (ZOPT.AND.COEFFS_DEF) THEN
	            CALL PLANE_INTERPL(XY(1,I),COEFFS,Z)
	         ELSE
	            CALL PUTLNG(IFF_ABSENT,Z)
	         ENDIF
	      ENDIF
10	   CONTINUE
	   GOTO 999
	ENDIF
C
C assume intersecting with the found object
C
C get the box surrounding the arc
	CALL BOXARC(AUX,AUXBOX(1),AUXBOX(2),AUXBOX(3),AUXBOX(4))
C
C is the found object a circle arc?
C
	IF (FOPAK(PAKGT).GE.CLOTYP.AND.FOPAK(PAKGT).LE.FULTYP) GOTO 100
C
C The cursor is on the linear found object, on or after vertex FOVRT.
C We look for intersection with the part of the found object around
C FOVRT contained within FOXY, and within CRITR2 of cursor.
C
C determine first vertex in FOXY to consider
	START = FOVRT-FOVO		! offset in FOXY of FOVRT
20	IF ((FOXY(1,START)-CONTXY(1))**2+(FOXY(2,START)-CONTXY(2))**2
     &		.GT.CRITR2) GOTO 30
	IF (START.EQ.1) GOTO 30		! reached beginning of FOXY
	START = START-1
	GOTO 20
C
C determine last vertex
30	END = FOVRT-FOVO
40	IF (END.GE.FOTOP) THEN
	   END = FOTOP-1
	   GOTO 50
	ENDIF
	IF ((FOXY(1,END+1)-CONTXY(1))**2+(FOXY(2,END+1)-CONTXY(2))**2
     &		.GT.CRITR2) GOTO 50
	END = END+1
	GOTO 40
C
C Look for best intersection along selected bit
50	DO 70 I=START,END
	   IF (INTLARC(FOXY(1,I),AUX,AUXBOX,NUM,XY(1,1),XY(1,2),TOUCH)) 
     &	         GOTO 70
	   DO 60, J=1,NUM
	      R = (XY(1,J)-CONTXY(1))**2 + (XY(2,J)-CONTXY(2))**2
	      IF (R.LT.MINR) THEN
	         MINR = R
	         ITVRT = I+FOVO			! absolute vertex number
	         X = XY(1,J)
	         Y = XY(2,J)
C
C interpolate Z if required
	         IF (ZOPT.AND.FO_Z_COL.GT.0) THEN
	            CALL LINEAR_INTERPL(FOXY(1,I),FOXY(1,I+1),XY(1,J),
     &	                  FOATTV(FO_Z_COL,I),FOATTV(FO_Z_COL,I+1),Z)
	         ELSE
	            CALL PUTLNG(IFF_ABSENT,Z)
	         ENDIF
	      ENDIF
60	   CONTINUE
70	CONTINUE
	GOTO 999
C
C found object is a circle arc
C
100	CONTINUE
C
C get intersections between this arc, and the found object
C
	IF (INTAARC(FOAUX,AUX,FOARCBX,AUXBOX,NUM,XY(1,1),XY(1,2),TOUCH)) 
     &	         GOTO 999
	DO 120, J=1,NUM
	   R = (XY(1,J)-CONTXY(1))**2 + (XY(2,J)-CONTXY(2))**2
	   IF (R.LT.MINR) THEN
	      MINR = R
	      X = XY(1,J)
	      Y = XY(2,J)
C
C interpolate Z if required
	      IF (ZOPT.AND.FOC_DEFINED)
     &	            CALL PLANE_INTERPL(XY(1,J),FOCOEFFS,Z)
	   ENDIF
120	CONTINUE
C	
	GOTO 999
C
999	CONTINUE
	INTSCNA = MINR.NE.1E38		! had an intersection?
	RETURN
	END

