	LOGICAL FUNCTION NDTIE
C
***	IDENT	10MY96
***	MODULE	NDTIE
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Written					CCB	14-JAN-1985
C
C	LITES2 cartographic editor END TIE routine
C	Returns FALSE if successful
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:AUXDEF/
***     PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:PACK/
C
***	COMMON/CMN:CSTRCT/
***	COMMON/CMN:DEFINE/
***	COMMON/CMN:EDGE/
***	COMMON/CMN:MAPS/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:OIIH/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:STRIKE/
C
C parameters
	LOGICAL		REV,END
	PARAMETER	(REV=.TRUE.)
	PARAMETER	(END=.TRUE.)
C
C working storage
	LOGICAL		CHKEDG		! whether to check edge
	REAL		MOVXY(3)
	INTEGER		OPER
	INTEGER		NATT
	REAL		TMP
	REAL		DX,DY
C
C function called
	LOGICAL	STRTFT
	LOGICAL	ADDZ
C
	NDTIE = .TRUE.			! assume failure
C
	IF (.NOT.FO) THEN		! nothing to tie to
	   CALL MOAN(MSG_NOFEATURE)
	   GOTO 999
	ENDIF
C
C
	OPER = DEFINITION(P_MOVE)
	IF (OPER.EQ.0) OPER = DEFINITION(P_OTHER)
C
C Propagating across an edge?
	CHKEDG=(EDGING.AND.PRPING).OR.	! for edgematching
     &	       (FRCING.AND.PRPING.AND.	! for FORCE EDGE
     &	         FRCSXY(1).EQ.CSXY(1).AND.FRCSXY(2).EQ.CSXY(2))
C
C Start off the new 'object in hand' feature
	CALL CPYPAK(PAKLEN,IHPAK,COIPAK)
	COIPAK(PAKFLG) = 0		! not deleted
	FLG_GEOCHANGE = .TRUE.		! geometrical change
C
	IF (.NOT.MAPRO(IHPAK(PAKMAP))) THEN
	   IF (STRTFT(IHPAK,IHTC,IHFS,IHAC,IHTH)) THEN
	      CALL COLAPS(121)
	   ENDIF
C
C Delete old segments (remove from screen)
	   CALL LDSG(IHPAK,.TRUE.)
	ENDIF
	IF (.NOT.MAPRO(FOPAK(PAKMAP))) CALL LDSG(FOPAK,.TRUE.)
	IF (MAPRO(IHPAK(PAKMAP))) GOTO 100
C
C if edging set flags so that this end is found and the far end is
C as it was
	IF (EDGING) THEN
	   IF (IHVRT.EQ.IHLST) THEN	! tieing last point of IH
	      OTHFLG=THAFLG.OR.(IHPAK(PAKFLG).AND.THIFLG)
	   ELSE				! tieing first point of IH
	      OTHFLG=THIFLG.OR.(IHPAK(PAKFLG).AND.THAFLG)
	   ENDIF
	ENDIF
C
C Output points retaining direction
	IF (IHVRT.EQ.IHLST) THEN	! tie last point of IH
	   IF (PRPING) THEN
	      MOVXY(1)=CSXY(1)-IHXY(1,IHTOP)
	      MOVXY(2)=CSXY(2)-IHXY(2,IHTOP)
	      IF (ZOPT) THEN
	         IF (CSZI.NE.IFF_ABSENT.AND.
     &	             IHZI(IHTOP).NE.IFF_ABSENT) THEN
	            MOVXY(3) = CSXY(3) - IHZ(IHTOP)
	         ELSE
	            CALL PUTLNG(IFF_ABSENT,MOVXY(3))
	         ENDIF
	      ENDIF
	      CALL PRPVRT(IHPAK,IHLST,.NOT.REV,END,MOVXY,CHKEDG,EDGLNE)
	   ELSE
	      CALL ADDVRT(IHPAK,1,IHLST-1,.FALSE.)
	   ENDIF
C
C get attributes of existing point in memory
	   CALL GETVRT(IHPAK,IHLST,IHLST)
C
C set up attributes for point
	   NATT = RINATT
C
C apply Z position of cursor, if appropriate
	   IF (ZOPT.AND.CSZI.NE.IFF_ABSENT) THEN
	      IF (ADDZ(CSZI,STR_MAX_ATTR,NATT,RIATTC,RIATTV(1,1)))
     &	                   GOTO 999
	   ENDIF
	   CALL LSTARR(OPER,NATT,RIATTC,RIATTV(1,1),.TRUE.)
	   IF (DEFINITION(P_FAR_MOVE) .GT. 0) THEN
	      DX = RIXY(1,1) - CSXY(1)
	      DY = RIXY(2,1) - CSXY(2)
	      IF ((DX**2 + DY**2) .GT. FAR_MOVE_IFF**2) THEN
	         CALL LSTARR(DEFINITION(P_FAR_MOVE),
     &	                     NATT,RIATTC,RIATTV(1,1),.TRUE.)
	      ENDIF
	   ENDIF
C
C maintain visibility of last point of IH
	   IF ((RIFLG(1).AND.1).EQ.0) THEN
	      CALL FLUSH(1)
	      OIENDS = 0		! invisible
	   ENDIF
	   CALL ADCORD(CSXY,NATT,RIATTC,RIATTV(1,1))
	ELSE				! tie first point of IH
C
C get attributes of existing point in memory
	   CALL GETVRT(IHPAK,1,1)
	   NATT = RINATT
C
C apply Z position of cursor, if appropriate
	   IF (ZOPT.AND.CSZI.NE.IFF_ABSENT) THEN
	      IF (ADDZ(CSZI,STR_MAX_ATTR,NATT,RIATTC,RIATTV(1,1)))
     &	                   GOTO 999
	   ENDIF
	   CALL LSTARR(OPER,NATT,RIATTC,RIATTV(1,1),.TRUE.)
	   IF (DEFINITION(P_FAR_MOVE) .GT. 0) THEN
	      DX = RIXY(1,1) - CSXY(1)
	      DY = RIXY(2,1) - CSXY(2)
	      IF ((DX**2 + DY**2) .GT. FAR_MOVE_IFF**2) THEN
	         CALL LSTARR(DEFINITION(P_FAR_MOVE),
     &	                     NATT,RIATTC,RIATTV(1,1),.TRUE.)
	      ENDIF
	   ENDIF
	   CALL ADCORD(CSXY,NATT,RIATTC,RIATTV(1,1))
C
	   IF (PRPING) THEN
	      MOVXY(1)=CSXY(1)-IHXY(1,1)
	      MOVXY(2)=CSXY(2)-IHXY(2,1)
	      IF (ZOPT) THEN
	         IF (CSZI.NE.IFF_ABSENT.AND.
     &	             IHZI(1).NE.IFF_ABSENT) THEN
	            MOVXY(3) = CSXY(3) - IHZ(1)
	         ELSE
	            CALL PUTLNG(IFF_ABSENT,MOVXY(3))
	         ENDIF
	      ENDIF
	      CALL PRPVRT(IHPAK,IHLST,.NOT.REV,.NOT.END,MOVXY,
     &	                        CHKEDG,EDGLNE)
	   ELSE
	      CALL ADDVRT(IHPAK,2,IHLST,.FALSE.)
	   ENDIF
	ENDIF
C
C Terminate feature
	CALL ENDFT
C
C Start off the new 'found object' feature
100	IF (MAPRO(FOPAK(PAKMAP))) THEN
C
C not actually editing this feature, but mark its end as 'done' so we
C don't get it again
	   IF (JOIFST) THEN		! tieing first point of FO
	      CALL SETFTR(THIFLG,FOPAK(PAKLNK))
	   ELSE
	      CALL SETFTR(THAFLG,FOPAK(PAKLNK))
	   ENDIF
	   GOTO 200
	ENDIF
	CALL CPYPAK(PAKLEN,FOPAK,COIPAK)
	COIPAK(PAKFLG) = 0		! not deleted
	IF (STRTFT(FOPAK,FOTC,FOFS,FOAC,FOTH)) THEN
	   CALL COLAPS(121)
	ENDIF
C
C if edging, make this end found, and other end as it was
	IF (EDGING) THEN
	   IF (JOIFST) THEN		! tieing first point of FO
	      OTHFLG=THIFLG.OR.(FOPAK(PAKFLG).AND.THAFLG)
	   ELSE
	      OTHFLG=THAFLG.OR.(FOPAK(PAKFLG).AND.THIFLG)
	   ENDIF
	ENDIF
C
C Output points retaining direction
	IF (.NOT.JOIFST) THEN		! tie last point of FO
	   IF (PRPING) THEN
	      MOVXY(1)=CSXY(1)-FOXY(1,FOTOP)
	      MOVXY(2)=CSXY(2)-FOXY(2,FOTOP)
	      IF (ZOPT.AND.FO_Z_COL.NE.-1) THEN
	         IF (CSZI.NE.IFF_ABSENT.AND.
     &	             FOATTV(FO_Z_COL,FOTOP).NE.IFF_ABSENT) THEN
	            CALL PUTLNG(FOATTV(FO_Z_COL,FOTOP),TMP)
	            MOVXY(3) = CSXY(3) - TMP
	         ELSE
	            CALL PUTLNG(IFF_ABSENT,MOVXY(3))
	         ENDIF
	      ENDIF
	      CALL PRPVRT(FOPAK,FOLST,.NOT.REV,END,MOVXY,CHKEDG,EDGLNE)
	   ELSE
	      CALL ADDVRT(FOPAK,1,FOLST-1,.FALSE.)
	   ENDIF
C
C get attributes of existing point in memory
	   CALL GETVRT(FOPAK,FOLST,FOLST)
C
C set up attributes for point
	   NATT = RINATT
C
C apply Z position of cursor, if appropriate
	   IF (ZOPT.AND.CSZI.NE.IFF_ABSENT) THEN
	      IF (ADDZ(CSZI,STR_MAX_ATTR,NATT,RIATTC,RIATTV(1,1)))
     &	                   GOTO 999
	   ENDIF
	   CALL LSTARR(OPER,NATT,RIATTC,RIATTV(1,1),.TRUE.)
	   IF (DEFINITION(P_FAR_MOVE) .GT. 0) THEN
	      DX = RIXY(1,1) - CSXY(1)
	      DY = RIXY(2,1) - CSXY(2)
	      IF ((DX**2 + DY**2) .GT. FAR_MOVE_IFF**2) THEN
	         CALL LSTARR(DEFINITION(P_FAR_MOVE),
     &	                     NATT,RIATTC,RIATTV(1,1),.TRUE.)
	      ENDIF
	   ENDIF
C
C maintain visibility of last point of FO
	   IF ((RIFLG(1).AND.1).EQ.0) THEN
	      CALL FLUSH(1)
	      OIENDS = 0		! invisible
	   ENDIF
	   CALL ADCORD(CSXY,NATT,RIATTC,RIATTV(1,1))
C
	ELSE				! tie first point of FO
C
C
C get attributes of existing point in memory
	   CALL GETVRT(FOPAK,1,1)
C
C set up attributes for point
	   NATT = RINATT
C
C apply Z position of cursor, if appropriate
	   IF (ZOPT.AND.CSZI.NE.IFF_ABSENT) THEN
	      IF (ADDZ(CSZI,STR_MAX_ATTR,NATT,RIATTC,RIATTV(1,1)))
     &	                   GOTO 999
	   ENDIF
	   CALL LSTARR(OPER,NATT,RIATTC,RIATTV(1,1),.TRUE.)
	   IF (DEFINITION(P_FAR_MOVE) .GT. 0) THEN
	      DX = RIXY(1,1) - CSXY(1)
	      DY = RIXY(2,1) - CSXY(2)
	      IF ((DX**2 + DY**2) .GT. FAR_MOVE_IFF**2) THEN
	         CALL LSTARR(DEFINITION(P_FAR_MOVE),
     &	                     NATT,RIATTC,RIATTV(1,1),.TRUE.)
	      ENDIF
	   ENDIF
	   CALL ADCORD(CSXY,NATT,RIATTC,RIATTV(1,1))
C
	   IF (PRPING) THEN
	      MOVXY(1)=CSXY(1)-FOXY(1,1)
	      MOVXY(2)=CSXY(2)-FOXY(2,1)
	      IF (ZOPT.AND.FO_Z_COL.NE.-1) THEN
	         IF (CSZI.NE.IFF_ABSENT.AND.
     &	             FOATTV(FO_Z_COL,1).NE.IFF_ABSENT) THEN
	            CALL PUTLNG(FOATTV(FO_Z_COL,1),TMP)
	            MOVXY(3) = CSXY(3) - TMP
	         ELSE
	            CALL PUTLNG(IFF_ABSENT,MOVXY(3))
	         ENDIF
	      ENDIF
	      CALL PRPVRT(FOPAK,FOLST,.NOT.REV,.NOT.END,MOVXY,
     &	                              CHKEDG,EDGLNE)
	   ELSE
	      CALL ADDVRT(FOPAK,2,FOLST,.FALSE.)
	   ENDIF
	ENDIF
C
C Terminate feature
	CALL ENDFT
C
C Remove the old objects completely
200	IF (.NOT.MAPRO(FOPAK(PAKMAP))) CALL DELFT(FOPAK,FOEF)
	IF (.NOT.MAPRO(IHPAK(PAKMAP))) CALL DELFT(IHPAK,IHEF)
C
	NDTIE = .FALSE.			! success
C
999	CONTINUE
C
C if propagating, and not edgmatching, then stop propagating
C
	IF(.NOT.EDGING.AND.PRPING) PRPING=.FALSE.
	FRCING=.FALSE.				! no longer forcing
C
	RETURN
        END
