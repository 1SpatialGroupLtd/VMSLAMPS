	SUBROUTINE GETCMD
C
***	IDENT	17MY94
***	MODULE	GETCMD
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RJH	26-JUL-1984
C
C Description
C
C    This subroutine is part of the LITES2 Command Interface, and its
C purpose is to get the next command. During execution, this will
C be the next primitive command or command filename. During macro
C definition, it will be the next macro or primitive command, or command
C filename.
C    A buffer is set up, and if found, the command as typed is saved, it
C is interpreted, and details of the input line are saved. The end of
C line flag will be true if no command was found on the current input
C line.
C    Note that as soon as an error occurs (at any level), processing of
C the command stops.
C
	IMPLICIT NONE
C
C Common Blocks
C
***     COMMON/CMN:DTYPED/		! command as typed
***     COMMON/CMN:DVAR/		! command decoding variables
***	COMMON/CMN:DFILRD/		! command filename details
***     COMMON/CMN:GLOBAL/		! global variables
C
C Functions
C
	LOGICAL		STORE		! store command in a macro ?
C
C Local Variables
C
	INTEGER*4	CURADR		! address of input buffer
	INTEGER*4	CURCHS		! no. of chars on current line
	INTEGER*4	CURARGL		! length of argument string
	INTEGER*2	CURPTR		! pointer on current line
	INTEGER*2	SAVPTR		! input command line pointer
	INTEGER*2	ENDPTR		! pointer to end of command
	INTEGER*4	CURINP		! current line external ?
	LOGICAL		FINISH		! finished ?
	LOGICAL		BADERR		! line details cannot be saved ?
	CHARACTER*255	CURARG		! argument string
C
C Initialisation
C
	BADERR = .FALSE.
C
C Save input line pointer
C
	CALL DCPSAV(SAVPTR)
C
C Clear typed line details (used to be CALL CLRTYP)
C
	DTNUM = 0			! no. of typed strings 
C
C Set up auxiliary buffer and get decode pointer to start of command
C
	CALL LITES2_SETBUF(CURADR,CURCHS,CURPTR,CURINP,CURARGL,CURARG)
C
C Get the macro or command as it was typed, and interpret it. Note that
C if the end of line is reached before a command has been read, or there
C was an error getting to the start of the next command, details
C of the line are not saved.
C
	IF (.NOT. (DEOLN .OR. MOANED)) THEN
100	   CALL ASTYPE(ENDPTR,FINISH,CURARGL,CURARG)
	   IF (.NOT. (MOANED .OR. FINISH)) THEN
	      CALL INTCMD(CURADR,CURCHS,CURPTR,CURINP,CURARGL,CURARG,
     &				ENDPTR,FINISH,BADERR)
C
C echo, provided we are not in encrypted line, or called from one
	      IF (DENC.EQ.0.AND.CURINP.GE.0) CALL ECHCMD
	      IF (.NOT. (MOANED .OR. FINISH)) GO TO 100
	   ENDIF
	   IF (.NOT. BADERR) CALL PSHSTK(
     &			CURADR,CURCHS,ENDPTR,CURINP,CURARGL,CURARG)
	ENDIF
C
C Set new line flag
C
	DNEW = (DEOLN .OR. (NEWFIL .AND. (.NOT. STORE())))
C
C Restore input buffer
C
	CALL BSLN			! reset input line buffer
	CALL DCPSET(SAVPTR)		! reset input line pointer
C
	RETURN
	END
