C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1995-04-20 10:55:52.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE NEW_MAP(MAP,ERROR)
C
***	MODULE	NEW_MAP
***	IDENT	20AP95
C
C Copyright Laser Scan Ltd., Cambridge, England.
C Author  Ron Russell					23-Oct-1989
C
C To input data from the IFF file while in READY STATE
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:EFNLUN/
***	PARAMETER/CMN:GKSPAR/
C
***	COMMON/CMN:DRAWIN/
***	COMMON/CMN:MAPS/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:RFCTRL/
***	COMMON/CMN:WORKS/
C
C argument
	INTEGER		MAP		! map to read in
	LOGICAL		ERROR		! TRUE if error occurred
C
C w/s
	INTEGER		WKID
	REAL		DX,DY
C
C get rid of cursor
	CURS=.FALSE.
	CALL RFDRAW
C
C perform any desired temporary de-activations
	DO 10, WKID=1,WSMAX
	   IF (WKAC(WKID).AND.WKSUPP(WKID)) THEN
	      CALL GDAWK(WKID)
	      WKAC(WKID) = .FALSE.
	   ENDIF
10	CONTINUE	
C
C read new map
	CALL READ_MAP(MAP,ERROR)
C
C update the workstations, and restore temporary de-activations
	DO 20 WKID=1,WSMAX
	   IF (WKOP(WKID)) THEN
	      IF (WKAC(WKID)) THEN
	         IF (USESEG.AND..NOT.UPDATE_SEG) THEN
	            CALL LRSGWK(WKID)		! redraw segments
	         ELSE
	            CALL LUWK(WKID,GSUPP)	! update workstation
	         ENDIF
	      ELSE
	         CALL GACWK(WKID)
	         WKAC(WKID) = .TRUE.
	         WKSUPP(WKID) = .FALSE.
	      ENDIF
	   ENDIF
20	CONTINUE
C
C turn clipping on (might be turned off in INIGKS, called from IFFHDR,
C if this is the first map)
	IF (.NOT.NODISP) CALL GSCLIP(GCLIP)
C
C set ready to reinitialise cursor
	CURS=.TRUE.
C
C position cursor in centre of area just read in
	DX = RANGE(2,MAP)-RANGE(1,MAP)
	DY = RANGE(4,MAP)-RANGE(3,MAP)
	CSXY(1) = MAPORG(1,MAP) + RANGE(1,MAP) + DX*0.5
	CSXY(2) = MAPORG(2,MAP) + RANGE(3,MAP) + DY*0.5
	OCSXY(1) = CSXY(1)+1.0		! force redraw (setting INTCUR
					! would position in centre of screen)
C
	RETURN
	END
