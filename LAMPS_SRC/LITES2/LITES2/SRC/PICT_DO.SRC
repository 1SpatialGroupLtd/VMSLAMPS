C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-10-03 15:26:26.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        SUBROUTINE PICT_DO
C
***     IDENT   03OC94
***     MODULE  PICT_DO
C
C       Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C       Written                                 RWR	 4-Apr-1990
C
C	LITES2 cartographic editor PICTURE command.
C	- device dependant version 
C	- requires a special SRIGPL, SRIGFA and an INTERACT
C
        IMPLICIT NONE
C
***	PARAMETER/CMN:CONSTS/
***     PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:STAPAR/
***	PARAMETER/CMN:TRNTYP/
C
***     COMMON/CMN:DOUT/
***	COMMON/CMN:MASTER/
***     COMMON/CMN:SETUP/
***	COMMON/CMN:WORKS/
C
C Local Variables
	REAL		DANG
	REAL		A,B,C1,C2
	REAL		X,Y
	REAL		X1,Y1
	REAL		X2,Y2
	REAL		X3,Y3
	REAL		X4,Y4
	REAL		DY,NEWDY
	REAL		DX,NEWDX
	REAL		FACTOR
C
	EXTERNAL	NASTY,MOAN
C
C Dispatch according to secondary command
	GOTO (100,200),DSECN
C
C Secondary command number out of range
	CALL MSGCMD(NASTY,MSG_ERRSECIND)
	GOTO 9990
C
C PICTURE SETUP
100	CALL SETSTA(STATE_SETUP)		! set state
	SETING = .TRUE.				! and remember fact
	SETMAP = -1				! mark not started yet
	CALL DIGCRN				! prompt for first point
	GOTO 9999
C
C PICTURE ROTATE
C 
200	IF (DREALS(1).EQ.0.0) THEN
	   SETUP = .FALSE.			! cancel completely
	   GOTO 9999
	ENDIF
	DANG = DREALS(1)*PI/180.0 
	X = (LIMITS(1)+LIMITS(2))*0.5		! centre of area
	Y = (LIMITS(3)+LIMITS(4))*0.5
C
C get values for orthogonal transformation
	A = COS(DANG)
	B = SIN(DANG)
	C1=-A*X + B*Y + X
	C2=-B*X - A*Y + Y
C
C set these in forward transformation
	WARP_COF(1,1) = C1
	WARP_COF(2,1) = A
	WARP_COF(3,1) = -B
	WARP_COF(4,1) = 0.0
	WARP_COF(1,2) = C2
	WARP_COF(2,2) = B
	WARP_COF(3,2) = A
	WARP_COF(4,2) = 0.0
C
C use these to transform limits, to find new limits
	DX = LIMITS(2)-LIMITS(1)
	DY = LIMITS(4)-LIMITS(3)
	X1 = LIMITS(1)
	Y1 = LIMITS(4)
	X2 = LIMITS(1)
	Y2 = LIMITS(3)
	X3 = LIMITS(2)
	Y3 = LIMITS(3)
	X4 = LIMITS(2)
	Y4 = LIMITS(4)
	CALL TRNUSE(X1,Y1,WARP_COF,TRNTYP_ORTHOG)
	CALL TRNUSE(X2,Y2,WARP_COF,TRNTYP_ORTHOG)
	CALL TRNUSE(X3,Y3,WARP_COF,TRNTYP_ORTHOG)
	CALL TRNUSE(X4,Y4,WARP_COF,TRNTYP_ORTHOG)
	NEWDX = MAX(X1,X2,X3,X4) - MIN(X1,X2,X3,X4)
	NEWDY = MAX(Y1,Y2,Y3,Y4) - MIN(Y1,Y2,Y3,Y4)
	FACTOR = MIN(DX/NEWDX,DY/NEWDY)
C
C use this factor to scale coefficients
	A = A*FACTOR
	B = B*FACTOR
	C1=-A*X + B*Y + X
	C2=-B*X - A*Y + Y
C
C set these in forward transformation
	WARP_COF(1,1) = C1
	WARP_COF(2,1) = A
	WARP_COF(3,1) = -B
	WARP_COF(4,1) = 0.0
	WARP_COF(1,2) = C2
	WARP_COF(2,2) = B
	WARP_COF(3,2) = A
	WARP_COF(4,2) = 0.0
C
C set angle and scale for hardware text transformation
	WARP_ANG = DANG
	WARP_SCA = FACTOR
C
C and set up backward transformation
	A = COS(-DANG)/FACTOR
	B = SIN(-DANG)/FACTOR
	C1=-A*X + B*Y + X
	C2=-B*X - A*Y + Y
C
	WARP_BCK(1,1) = C1
	WARP_BCK(2,1) = A
	WARP_BCK(3,1) = -B
	WARP_BCK(4,1) = 0.0
	WARP_BCK(1,2) = C2
	WARP_BCK(2,2) = B
	WARP_BCK(3,2) = A
	WARP_BCK(4,2) = 0.0
C
C now setup
	WARP_N(1) = 0		! no 'points' for this setup
	WARP_N(2) = 0
	WARP_TRANSFORM = TRNTYP_ORTHOG	! uses ORTHOG/HELMERT
	WARP_RMS(1) = 0.0
	WARP_RMS(2) = 0.0
	WARP_FITTED = .TRUE.
	WARP_DIRTY = .FALSE.
	WARP_BACK_SIMPLE = .TRUE.
	SET_TRANSFORM = WARP_TRANSFORM
	CALL CPYPAK(16,WARP_COF,SETCOF)
	CALL CPYPAK(16,WARP_BCK,SETBCK)
	WARP_SET = .TRUE.
	SETSCA = WARP_SCA
	SETANG = WARP_ANG
	SET_BACK_SIMPLE = WARP_BACK_SIMPLE
	SETUP = .TRUE.
	GOTO 9999
C
9990	CALL IGNCMD
9999	RETURN
        END
