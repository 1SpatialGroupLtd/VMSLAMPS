	SUBROUTINE STCIRC(AUX,DRAW,COEFFS_DEF,COEFFS)
C
***	MODULE	STCIRC
***	IDENT	10MY96
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England
C Author  Clarke Brunt
C
C Created					CCB	6-July-1984
C
C Routine to generate the intermediate points on a circle/arc
C Method used is to work out the number of segments which are
C required and then use this to work out the angle subjected
C at the centre by a segment. The position of a point
C to be generated is found using the centre position, the radius
C and the angle at the centre:-
C	X = Xcentre + (Radius * COS(angle))
C	Y = Ycentre + (Radius * SIN(angle))
C
C Given that the starting angle and the angular increment are
C known the angles of each point can be found in turn using:-
C	SIN(a+b) = SIN(a)*COS(b) + COS(a)*SIN(b)
C	COS(a+b) = COS(a)*COS(b) - SIN(a)*SIN(b)
C
C The second argument received should be set to true if drawing a
C circle, and false if a generated circle is being calculated as the
C current output item.
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:ACS/
***	PARAMETER/CMN:AUXDEF/	! layout of auxiliary array
***	PARAMETER/CMN:CONSTS/
C
***	COMMON/CMN:ATTBTS/
***	COMMON/CMN:CSTRCT/	! feature being constructed
***	COMMON/CMN:DEFINE/
***	COMMON/CMN:DRAWIN/
C
C arguments
	REAL AUX(AUXLEN)	! standard circle auxiliary array
	LOGICAL	DRAW		! drawing a circle ?
	LOGICAL COEFFS_DEF	! true if coefficents defining plane
				! circle lies in is set up
	REAL	COEFFS(4)	! definition of plane
	REAL	Z
C
C W/s
	REAL*8 RTEMP		! temporary real
	REAL*8 SINANG,COSANG	! sin/cos of angle of current point
	REAL*8 SININC,COSINC	! sin/cos of the angular increment
	INTEGER I
	INTEGER NUMSEG		! no. of segments actually required
	REAL XY(2),X,Y		! temporary coordinate array
	EQUIVALENCE (X,XY(1)),(Y,XY(2))
	REAL FIRSTXY(2)		! first point (saved for full circles)
	INTEGER	OPER
C
C***********************************************************************
C
C Work out number of segments required.
C For polygons, set the number of segments using the command argument.
	IF (DRAW .OR. (CONGEN .AND. CONCIR)) THEN
	   IF (DRAW) THEN
	      RTEMP=CIDIFF(1)
	      IF (CIDIFF(2).NE.0.0) RTEMP=RTEMP+CIDIFF(2)*SQRT(AUX(RADI))
	      IF (CIDIFF(3).NE.0.0) RTEMP=RTEMP+CIDIFF(3)*AUX(RADI)
	   ELSE
	      RTEMP=CIGIFF(1)
	      IF (CIGIFF(2).NE.0.0) RTEMP=RTEMP+CIGIFF(2)*SQRT(AUX(RADI))
	      IF (CIGIFF(3).NE.0.0) RTEMP=RTEMP+CIGIFF(3)*AUX(RADI)
	   ENDIF
	   NUMSEG=INT(ABS(AUX(RADI)*AUX(TOTI))/RTEMP)+1
	ELSE
	   NUMSEG = CONSEG			! given by user
	ENDIF
C
C Work out the angle subtended at the centre by a single segment
	RTEMP=DBLE(AUX(TOTI))/DBLE(NUMSEG)
C
C Initialise variables used in the main loop.
	SININC=SIN(RTEMP)	! for the angular increment
	COSINC=COS(RTEMP)
	SINANG=SIN(DBLE(AUX(STAI))) ! for the angle of the current (1st) pt
	COSANG=COS(DBLE(AUX(STAI)))
C
C***********************************************************************
C
C set up array of attributes for ADDPTS to use
C This uses the set of point attributes that were set when the last
C point was digitised
	CALL LSTARR(CONDEF,CONATT,COATTC,COATTV,.FALSE.)
C
C add those attributes that are set up for generated circle point, or
C "other"
	OPER = DEFINITION(P_CIRCLE)
	IF (OPER.EQ.0) OPER = DEFINITION(P_OTHER)
	CALL LSTARR(OPER,CONATT,COATTC,COATTV,.TRUE.)
C
C Main loop (for generating position of each point)
	DO 10 I=1,NUMSEG
C Work out the position of the next point
	   X = AUX(XCENI)+AUX(RADI)*COSANG
	   Y = AUX(YCENI)+AUX(RADI)*SINANG 
	   IF (COEFFS_DEF) THEN
C
C calculate corresponding Z
	      CALL PLANE_INTERPL(XY,COEFFS,Z)
C
C add it to list of attributes
	      CALL ADDZ(Z,MXATTR,CONATT,COATTC,COATTV)
C
C and now have to update attributes again, in case Z is on OPERATION list
	      CALL LSTARR(OPER,CONATT,COATTC,COATTV,.TRUE.)
	      CALL ADDPTS3D(1,XY,Z,DRAW)
	   ELSE
	      CALL ADDPTS(1,XY,DRAW)
	   ENDIF
	   IF (I.EQ.1) THEN
	      FIRSTXY(1) = X
	      FIRSTXY(2) = Y
	   ENDIF
C Work out the angle (at the centre) of the next point
	   RTEMP=SINANG
	   SINANG=SINANG*COSINC+COSANG*SININC
	   COSANG=COSANG*COSINC- RTEMP*SININC
10	CONTINUE
C
C output last point, making sure closed features are closed
	IF (ABS(AUX(TOTI)).EQ.SNGL(TWOPI)) THEN
	   X = FIRSTXY(1)
	   Y = FIRSTXY(2)
	ELSE
	   X = AUX(XCENI)+AUX(RADI)*COSANG
	   Y = AUX(YCENI)+AUX(RADI)*SINANG 
	ENDIF
C
	IF (COEFFS_DEF) THEN
C
C calculate corresponding Z
	   CALL PLANE_INTERPL(XY,COEFFS,Z)
C
C add it to list of attributes
	   CALL ADDZ(Z,MXATTR,CONATT,COATTC,COATTV)
C
C and now have to update attributes again, in case Z is on OPERATION list
	   CALL LSTARR(OPER,CONATT,COATTC,COATTV,.TRUE.)
	   CALL ADDPTS3D(1,XY,Z,DRAW)
	ELSE
	   CALL ADDPTS(1,XY,DRAW)
	ENDIF
C
C***********************************************************************
C
	RETURN
	END
