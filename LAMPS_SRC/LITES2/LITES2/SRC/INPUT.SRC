	LOGICAL FUNCTION INPUT
C
***	MODULE	INPUT
***	IDENT	04AP95
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author  Clarke Brunt
C
C To input our data from the IFF file etc
C Returns .TRUE. if error with FRT etc. files (recovery possible)
C otherwise .FALSE.. If fatal error with IFF files occurs, then simulates
C a QUIT, and leaves DONE set so that image exit is forced.
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:ACS/
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:EFNLUN/
***	PARAMETER/CMN:GKSPAR/
***     PARAMETER/CMN:MACMEN/
***	PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:PACK/
***	PARAMETER/CMN:STAPAR/
C
***	COMMON/CMN:ACS/
***	COMMON/CMN:AFTER/
***	COMMON/CMN:ATTBTS/
***	COMMON/CMN:DRAWIN/
***	COMMON/CMN:FILES/
***	COMMON/LSL$CMNFRT:FRTACD/
***	COMMON/CMN:GLOBAL/
***	COMMON/LSL$CMNIFF:IFFHAN/
***	COMMON/CMN:LABELS/
***	COMMON/CMN:MAPS/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:MENUS/
***	COMMON/CMN:OIIH/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:RFCTRL/
***	COMMON/CMN:SCALES/
***	COMMON/CMN:TRACKS/
***	COMMON/CMN:WORKS/
C
C functions called
C
	INTEGER	SIGCHS
	LOGICAL SRIINI,TRIINI,SRISCN
	LOGICAL	DSRINIT,KRSINIT,INISEC
	INTEGER	TRNALL
C
C w/s
	INTEGER	DOTPOS,I,J
	INTEGER	MAP
	LOGICAL ERROR
	CHARACTER*1	TRAN
C
C assume failure
	INPUT = .TRUE.
C
C Check whether handling composite characters e.g. {Zcaron} in text
	CCOPT = .FALSE.
	IF (TRNALL('LSL$COMPOSITE_CHARACTERS',TRAN)) THEN
	   IF (TRAN.EQ.'1') CCOPT = .TRUE.
	ENDIF
C
C Check whether handling dollar escape in text
	ESCOPT = .TRUE.
	IF (TRNALL('LSL$DOLLAR_ESCAPE',TRAN)) THEN
	   IF (TRAN.EQ.'0') ESCOPT = .FALSE.
	ENDIF
C
C Extract the main part of the FRT filename in case the SRI or TRI
C default to the same name
	DOTPOS=0
20	I=INDEX(FRTTIT(DOTPOS+1:),'.')	! find the last dot in
	IF (I.NE.0) THEN		! the FRT filename
	   DOTPOS=DOTPOS+I
	   GOTO 20
	ENDIF
C
C Open SRI and TRI
C If no filenames have been given then they are derived
C from the FRT filename
	IF (NEWSRI) THEN
	   IF (.NOT.HADSRI) THEN		! no explicit filename
C
C Derive the SRI filename from the FRT filename
	      SRITIT=FRTTIT(:DOTPOS)//'SRI'
	   ENDIF
	   I = SIGCHS(SRITIT)
	   CALL INFORM(MSG_RDNGFILE,'SRI',SRITIT(1:I))
	   IF (SRIINI(SRITIT(1:I))) THEN
	      CALL MOAN(MSG_ERRINFILE,'SRI')
	      GOTO 999
	   ENDIF
	   NEWSRI = .FALSE.
	ENDIF
C
C can now calculate bounding box of ANNOTATION mark, if required
	IF (HAD_ANNOMARK)
     &	   CALL SRISCN(ANNOMARK,ANNOMARK_MINX,ANNOMARK_MAXX,
     &	               ANNOMARK_MINY,ANNOMARK_MAXY)
C
	IF (NEWTRI) THEN
	   IF (.NOT.HADTRI) THEN		! no explicit filename
C
C Derive the TRI filename from the FRT filename
	      TRITIT=FRTTIT(:DOTPOS)//'TRI'
	   ENDIF
	   I = SIGCHS(TRITIT)
	   CALL INFORM(MSG_RDNGFILE,'TRI',TRITIT(1:I))
	   IF (TRIINI(TRITIT(1:I))) THEN
	      CALL MOAN(MSG_ERRINFILE,'TRI')
	      GOTO 999
	   ENDIF
	   NEWTRI = .FALSE.
	ENDIF
C
	CALL INIORG				! initialize origin
	IF (INISEC(.TRUE.)) GOTO 999		! set up sectoring
	CSXY(1) = (WINDOW(1)+WINDOW(2))/2.0	! centre cursor (for DSR)
	CSXY(2) = (WINDOW(3)+WINDOW(4))/2.0
	CSZI = IFF_ABSENT			! z value is unset
	IF (DSROPT) DSRINI = DSRINIT(.TRUE.) 	! set up KERN DSR
	IF (KRSOPT) KRSINI = KRSINIT(.TRUE.,0)	! set up KERN KRISS
	CALL INIGKS(.TRUE.)		! set up GKS
	CALL INISCL			! set up scaling
	CALL INIDIG			! set up digitising table
	CALL INIBIT			! set up bitpad
	CALL INIBAL			! set up trackerball
	CALL INISCR			! set up screen menus
	CALL INIBUT			! set up function buttons
C
C test logical name for transformation file directory
	CALL TSTFLN
C
C get old transformations from it
	CALL GTOLDT
C
C set up menus on digitising table/bitpad
	DO 50, I=1,MENTOP
	   CALL INIMNU(I)
   50	CONTINUE
C
C set up maps on table
	MAP_SETUP_TOTAL = 0		! no maps setup yet
	DO 100, MAP=0,MAPTOP
	   IF (MAP_EXIST(MAP)) CALL INIMAP(MAP)
  100	CONTINUE
C
C set up tracking areas
	DO 150, I=1,TRATOP
	   CALL INITRK(I)
  150	CONTINUE
C
C put any new transformations onto file
	CALL PTOLDT
C
C If all workstations are suppressed, then don't bother to draw at all
	OIDRAW = .NOT.NODISP.AND.(WKAC(1).OR.WKAC(2).OR.KRSINI)
C
C read in each map in turn
	DO 200 MAP=0,MAPTOP
	   IF (.NOT.MAP_EXIST(MAP)) GOTO 200
C
C read in this map
	   CALL READ_MAP(MAP,ERROR)
C
	   IF (ERROR) THEN 			! fatal error occurred
	      DONE = .TRUE.			! force exit
	      CALL NASTY(MSG_FORCEQUIT)
C
C pass any old string, since not used
	      CALL ENDSES(1,.FALSE.,FRTTIT)! 1 is delete .WRK file
	      GOTO 990
	   ENDIF
200	CONTINUE
C
C restore drawing of output features
	OIDRAW = .NOT.NODISP
C
C update displays and restore temporary de-activations
	DO 310 I=1,WSMAX	
	   IF (WKOP(I)) THEN
	      IF (WKAC(I)) THEN
	         CALL LUWK(I,GSUPP)
	      ELSE
	         CALL GACWK(I)
	         WKAC(I) = .TRUE.
	         WKSUPP(I) = .FALSE.
	      ENDIF
	   ENDIF
310	CONTINUE
C
C output scale data
C
	I=SCLFRT*SCAMAP
	J=SCAMAP
	CALL INFORM(MSG_SCALES,I,J)
	CALL INFORM(MSG_SHEETLIMITS,(LIMITS(2)-LIMITS(1))/SCLFRT,
     &	                            (LIMITS(4)-LIMITS(3))/SCLFRT)
C
C turn clipping on
	IF (.NOT.NODISP) CALL GSCLIP(GCLIP)
C
	CURS = .TRUE.				! get the cursor up
	CALL INFORM(MSG_INPTCMPLT)
C
C INITIAL state now completed, move into READY state
C
	CALL SETSTA(STATE_READY)	! set READY state
C
C do any commands defined by AFTER INPUT command
C
	IF (AFTER_INPUT_LEN.GT.0) THEN
	   IF (MOANED.AND..NOT.CONOPT) THEN
	      CALL MOAN(MSG_NOAFTINPUT,AFTER_INPUT(1:AFTER_INPUT_LEN))
	      CALL LEARN(MSG_GIVECOMMAND,AFTER_INPUT(1:AFTER_INPUT_LEN))
	   ELSE
	      CALL SETEXT(AFTER_INPUT(1:AFTER_INPUT_LEN))
	   ENDIF
	ENDIF
C
990	INPUT = .FALSE.			! success

999	RETURN
	END
