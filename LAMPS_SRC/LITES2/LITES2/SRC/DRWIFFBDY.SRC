C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-03-23 17:12:32.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE DRWIFFBDY
C
***	MODULE	DRWIFFBDY
***	IDENT	23MR92
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Created 				VLG	 13-Nov-1989
C
C To draw an IFF file; assumes the first NF entry has been found
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:CTXS/
***	PARAMETER/CMN:EFNLUN/
***	PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:PACK/
C
***	COMMON/CMN:CB/
***	COMMON/CMN:DRAWIN/
***	COMMON/LSL$CMNFRT:FRTCOM/
***	COMMON/LSL$CMNIFF:IFFSTR/
***	COMMON/CMN:MAPS/
***	COMMON/CMN:OIIH/
***	COMMON/LSL$CMNLSL:TXTC/
***	COMMON/CMN:WORKS/
***	COMMON/CMN:WORK_DRAW/
C
C arguments
C
	INTEGER*4 PACK(PAKLEN)	! a pack for the feature
C
C functions called
C
	LOGICAL HADBREAK	! had a CTRL/C?
	LOGICAL	FRTFND		! find a feature code
	LOGICAL GENAUX		! generate auxiliary array for symbols,
C				! texts, and arcs
	LOGICAL LOOPY		! check if curve is a closed loop
C
C w/s
C
	INTEGER		I
	INTEGER*2	IECODE,IELEN	! for reading from IFF
	INTEGER*2	ISTAT(4)	! feature status words
	INTEGER		TXSIZE		! text size from TH entry
	LOGICAL*1	HADST,HADFS
	INTEGER 	TMPPAK(PAKLEN)	! local copy of pack
	INTEGER		TFC		! text feature code (from TS)
	INTEGER		FC		! feature code
	INTEGER		FSN
	INTEGER*2	TSTAT(4)	! text status words
	LOGICAL*1	HADTS,HADTH	
C
C set of variables for STDRAW, local so independent of all others
C these are in DRAW_WORK.CMN
	REAL		AUX(AUXLEN)	! auxiliary array
	REAL		ANG		! angle
	LOGICAL*1	FST		! first bit?
	LOGICAL*1	LOOP		! closed loop?
C
C
C Jump to the first NF entry
	GOTO 20
C
C main loop
10	CALL IFFNXT(IECODE, IELEN)
C
	IF (IELEN.EQ.-1) THEN
	   CALL MOAN(MSG_UNEXPEIFF)
	   GOTO 999
	ENDIF
C
  	IF (IECODE.EQ.'CB') GOTO 40
	IF (IECODE.EQ.'EF') GOTO 50
	IF (IECODE.EQ.'RO') GOTO 80
	IF (IECODE.EQ.'FS') GOTO 30
	IF (IECODE.EQ.'NF') GOTO 20
	IF (IECODE.EQ.'EJ') GOTO 100
	IF (IECODE.EQ.'EM') GOTO 100
C need FS entry for symbols being drawing with external routine, and texts
	IF (.NOT.(FRTTEX.OR.(FRTSYM.AND.(SYMBAD.NE.0)))) GOTO 10
	IF (.NOT.FRTTEX) GOTO 10	! FS,TH,TX,TS only for text
	IF (IECODE.EQ.'TX') GOTO 60
	IF (IECODE.EQ.'TH') GOTO 70
	IF (IECODE.EQ.'TS') GOTO 90
	GOTO 10				! ignore anything else
C
C
C NF - new feature
20	CALL EIHRI(FSN,1,1)	! read into low word, upper 0
C
C Initialise
	HADST = .FALSE.
	HADTS = .FALSE.
 	HADFS = .FALSE.	! no FS (feature code)
	HADTH = .FALSE.	! no TH (text height)
	HADRO = .FALSE.	! no RO for rotation
	HADTX = .FALSE.	! no TX entry
	TXSIZE = 0		! zero default size (obtain from TH)
	TXTPTR = 0		! in case text has no TX entry
	FST = .TRUE.		! will be drawing first bit
	ANG = 0.0
	ISTAT(3)=0		! text position to 0, by default
	GOTO 10
C
C FS entry
30	CALL EIHRI(ISTAT,MIN(IELEN,4),1)
	FC = ISTAT(1)			! convert to long
C
C set up the feature code
C (use FC in pack rather than reading IFF file)
	PACK(PAKFC) = FC
	IF ( FRTFND(FC) ) THEN
	   CALL MOAN(MSG_BADFC,FC,FSN)
	   GOTO 31			! reject feature
	ENDIF
C
	HADFS = .TRUE.
	GOTO 10
C
C Abandon current feature, jump to EF
31	CALL MOAN(MSG_REJFTR,FSN)
	CALL IFFNXC('EF',IELEN)
	IF (IELEN.EQ.-1) THEN
	   CALL MOAN(MSG_UNEXPEIFF)
	   GOTO 999
	ENDIF
	GOTO 10
C
C ST (CB) - string of coordinates
40	CONTINUE
C
C Draw the previous ST if there was such
	IF (HADST) THEN
	   CALL STDRAW(
     &		CBH.NROW,XY,
     &		NATT,OIH_MAX_ATTR,ATTC,ATTV,
     &		AUX,TXTDSC,FST,.FALSE.,CBH.FLAGS,LOOP,PACK,ISTAT)
	   FST = .FALSE.		! not first bit any more
	ELSE
C
C generate auxiliary array for symbol strings
	   IF (FRTGT.EQ.STRTYP) THEN
C
C GENAUX will produce its own error message if it fails,
C which is sufficiently disastrous for us to reject the feature
	      IF (GENAUX(CBH.NROW,XY,AUX,TXTDSC,ANG,TXSIZE,PACK,ISTAT)
     &				) GOTO 31
	   ENDIF
	ENDIF
C
	NATT = 0
C
	CALL EIHRCB_HEAD(CBH)
C
C If on first ST or this ST starts 'pen up' then
C see whether a curve feature is a closed loop
	IF (FRTCUR.AND.((.NOT.HADST).OR.((CBH.FLAGS.AND.1).EQ.0))) THEN
	   LOOP = LOOPY()
	ENDIF
C
C read in the points
	IF (SIMPLE_XY) THEN	! read whole thing direct to XY
	   CALL EIHRCB_DATA(XY)
	ELSE
	   CALL EIHRCB_DATA(CBD)! read into scratch, and extract XY
C
C only need attributes if there is a symbol drawing routine so...
	   IF (SYMBAD.NE.0.AND.FRTSYM) THEN
	      CALL GETATT(XY,NATT,OIH_MAX_ATTR,ATTC,ATTV,0,1,CBH.NROW)
	   ELSE
	      CALL IFS_CB_READ(CBH,CBD,XY,2,COLHXY,1,CBH.NROW)
	   ENDIF
	ENDIF
C
C mark we've had an ST
	HADST = .TRUE.
	GOTO 10
C
C
C EF - end feature
50	CONTINUE
C
C generate auxiliary array for texts,symbols,circles
	IF (FRTARC.OR.(FRTSYM.AND.FRTGT.NE.STRTYP).OR.FRTTEX) THEN
C
C GENAUX will produce its own error message if it fails,
C which is sufficiently disastrous for us to reject the feature
	   IF (HADTS) THEN
	      IF (GENAUX(CBH.NROW,XY,AUX,TXTDSC,ANG,TXSIZE,TMPPAK,TSTAT)
     &				) GOTO 31
	   ELSE
	      IF (GENAUX(CBH.NROW,XY,AUX,TXTDSC,ANG,TXSIZE,PACK,ISTAT)
     &				) GOTO 31
	   ENDIF
	ENDIF
C
C draw last bit of feature (maybe all of it!)
	IF (HADTS) THEN
	   CALL STDRAW(
     &		CBH.NROW,XY,
     &		NATT,OIH_MAX_ATTR,ATTC,ATTV,
     &		AUX,TXTDSC,FST,.TRUE.,CBH.FLAGS,LOOP,TMPPAK,TSTAT)
	ELSE
	   CALL STDRAW(
     &		CBH.NROW,XY,
     &		NATT,OIH_MAX_ATTR,ATTC,ATTV,
     &		AUX,TXTDSC,FST,.TRUE.,CBH.FLAGS,LOOP,PACK,ISTAT)
	ENDIF
	TXTPTR = 0			! in case messes up INTERACT
	IF (HADBREAK()) GOTO 999
	GOTO 10
C
C TX - text string
60	IF (IELEN.EQ.0) GOTO 10 	! null???
	IELEN = MIN(IELEN,(CTXMAX+1)/2)
	CALL EIHR(TXTBUF,IELEN,1)
	TXTPTR = IELEN*2
C Remove any trailing null
	IF (TXTBUF(TXTPTR).EQ.0) TXTPTR = TXTPTR-1
	TXTPTR = MIN(TXTPTR,CTXMAX)
	GOTO 10
C
C TH entry
70	TXSIZE = 0				! blank out longword
	CALL EIHRI(TXSIZE,1,1)			! read word into bottom
	GOTO 10
C
C RO - symbol or text rotation
80	CALL EIHRR(ANG,1,1)
	GOTO 10
C
C TS - text status
90	IF (HADST) THEN			! draw previous text component
	   IF (GENAUX(CBH.NROW,XY,AUX,TXTDSC,ANG,TXSIZE,TMPPAK,TSTAT)
     &				) GOTO 31
	   CALL STDRAW(
     &		CBH.NROW,XY,
     &		NATT,OIH_MAX_ATTR,ATTC,ATTV,
     &		AUX,TXTDSC,FST,.TRUE.,CBH.FLAGS,LOOP,TMPPAK,TSTAT)
	   TXTPTR = 0			! wait for next TX entry
	ELSE
C
C this must be first TS, so make a copy of the pack for use of
C compound texts
	   CALL CPYPAK(PAKLEN,PACK,TMPPAK)
	ENDIF
C
	TSTAT(3) = 0
	CALL EIHRI(TSTAT,MIN0(IELEN,4),1)
91	TFC = TSTAT(1)			! convert to long
	TMPPAK(PAKFC) = TSTAT(1)	! store in PACK for GENAUX/STDRAW
C
	IF (FRTFND(TFC)) THEN
	   CALL MOAN(MSG_BADTC,TFC,TMPPAK(PAKFSN))
	   GOTO 92
	ENDIF
C
	IF (.NOT.FRTTEX) THEN
	   CALL MOAN(MSG_TCNOTTEXT,TFC,TMPPAK(PAKFSN))
	   GOTO 92
	ENDIF
	GOTO 94
C
C default to fs entry
92	CALL INFORM(MSG_DEFAULTFS)
	DO 93, I= 1,4
	   TSTAT(I) = ISTAT(I)
93	CONTINUE
	GOTO 91

94	IF (HADTS) THEN
	   TXSIZE = 0
	   HADST = .FALSE.
	ENDIF
	HADTS = .TRUE.
	GOTO 10
C
C EJ or EM entry
100	GOTO 999
C
C	
999	CONTINUE
	RETURN
	END
