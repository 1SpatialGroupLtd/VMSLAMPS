C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-05-08 12:30:26.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE LEGEND_BLOCK(ACTION,NUM,BOTTOM,TOP,COLOUR,STR,
     &	                        MASK,OFFSET,XPROP,YPROP)
C
***	IDENT	08MY96
***	MODULE	LEGEND_BLOCK
C
C	Copyright Laser-Scan Ltd., Cambridge, England.
C
C	Created					RWR	23-AUG-1989
C
C to draw a block of a legend
C (returns XPROP and YRPROP when action is 1)
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:ACS/
***     PARAMETER/CMN:MOANMESS/		! moan constants
C
***	COMMON/LSL$CMNFRT:FRTACD/
***	COMMON/LSL$CMNFRT:FRTCOM/
***	COMMON/CMN:DRAWIN/
***	COMMON/LSL$CMNLSL:TXTC/
***	COMMON/CMN:IMAGE/
***	COMMON/CMN:LABELS/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:OVERLAY/
***	COMMON/CMN:PLOT/
***	COMMON/CMN:SETUP/
***	COMMON/CMN:WORKS/
C
C arguments
	INTEGER		ACTION	! = 1 for initial pass
				! = 2 for do actual drawing
	INTEGER		NUM	! number of block (to work out position)
	REAL		BOTTOM	! bottom value
	REAL		TOP
	INTEGER		COLOUR
	CHARACTER*(*)	STR
	INTEGER		MASK	! mask of planes in image overlay
	INTEGER		OFFSET	! offset of planes in image overlay
	REAL		XPROP	! proportion of screen of current
	REAL		YPROP	! size of legend
C
C workspace
	REAL		PX(2)	! corners of block to fill
	REAL		PY(2)
	REAL		TEMPX(4)
	REAL		TEMPY(4)
	REAL		LIM(4)	! limits of window
	REAL		DX,DY
	REAL		XX,YY
	REAL		TEXTL
	REAL		BOXX,BOXY
	REAL		WIDTH
	REAL		ORGX,ORGY
	REAL		OFFX,OFFY
	REAL		YPIX_SIZE
	INTEGER		WKID
	LOGICAL		TEXT_BAD
	LOGICAL		SHR
C
	SAVE		PX,PY
	SAVE		DX,DY
	SAVE		TEXTL
	SAVE		BOXX,BOXY
	SAVE		LIM
	SAVE		OFFX,OFFY
	SAVE		YPIX_SIZE
	SAVE		TEXT_BAD
C
C functions
	LOGICAL		TRISCN,TRITXT
	INTEGER		EXPAND
C
C initalise, the first time we are called
	IF (NUM.EQ.0) THEN
	   IF (ACTION.EQ.1) THEN	! initial pass
C
C get the size of the area we are drawing into
	      IF (ANNODISP.GT.2) THEN
	         IF (DISPLAY_HADLIM(ANNODISP)) THEN
	            CALL CPYPAK(4,DISPLAY_LIMITS(1,ANNODISP),LIM)
	         ELSE
	            CALL CPYPAK(4,LIMITS,LIM)
	         ENDIF
	         YPIX_SIZE = DISPLAY_RASY(ANNODISP)
	      ELSE
                 CALL CPYPAK(4,WINDOW,LIM)
	         IF (ANNODISP.EQ.0) THEN
	            YPIX_SIZE = RASTSY(OVERLAY_WORKSTATION)
	         ELSE
	            YPIX_SIZE = RASTSY(ANNODISP)
	         ENDIF
	      ENDIF
C
	      DX = LIM(2) - LIM(1)
	      DY = LIM(4) - LIM(3)
C
	      BOXX = DX * ANNOLEGEND_XSIZ
	      BOXY = DY * ANNOLEGEND_YSIZ
C
	      IF (PLOT_ON) THEN
	         YPIX_SIZE = 0.0
	      ELSE
	         YPIX_SIZE = DY/YPIX_SIZE	! size of 1 pixel
	      ENDIF
C
	      PY(1) = 0.0
	      PY(2) = 0.0
C
	      TEXTL = 0.0
C
C set FRTCOM
	      FRTFLG = 0
	      FRTHW  = 0
	      FRTHWL = 0
	      FRTWID = ANNOWIDTH
	      FRTSIZ = 0.0
	      FRTTEX = .FALSE.		! don't draw in italic
	      FRTFC = -1		! FRTCOM well and truely nadjered
	      TEXT_BAD = .FALSE.
	   ELSE
C
C initialise drawing
C
C get display to draw into (should be graphics screen to be sensible)
	      SHR = .FALSE.
	      IF (PLOT_ON) THEN
	         WKID = PLOT_WKID
	      ELSEIF (ANNODISP.EQ.0) THEN
	         WKID = OVERLAY_WORKSTATION
	         IF (OVERLAY_SHARE.AND.WKAC(3-WKID)) SHR = .TRUE.
	      ELSE
	         WKID = ANNODISP
	      ENDIF
C
C text is positioned one character height from box in x
	      OFFX = ANNOSIZ
C
C and in y, half way up the box
	      OFFY = (BOXY - ANNOSIZ)/2
C
C max text length
	      TEXTL = TEXTL * ANNOSIZ + OFFX  ! get length in IFF units
C
	      ORGX = ANNOLEGEND_XPOS*DX + LIM(1)
	      ORGY = ANNOLEGEND_YPOS*DY + LIM(3)
C
C force into top right
	      DX = BOXX + TEXTL
	      DY = PY(2) - PY(1)
	      ORGX = MIN(ORGX,LIM(2)-DX)
	      ORGY = MIN(ORGY,LIM(4)-DY)
C
C and onto bottom right
	      ORGX = MAX(ORGX,LIM(1))
	      ORGY = MAX(ORGY,LIM(3))
C
C blank out an area, (in annotation overlay), under text in blanking colour,
C under boxes in colour 0
	      IF (BLAOPT) THEN
C
C under text
	         PX(1) = ORGX + BOXX
	         PX(2) = PX(1) + TEXTL
C
	         PY(1) = PY(1) + ORGY - YPIX_SIZE	! make 1 pixel bigger
	         PY(2) = PY(2) + ORGY
C
	         CALL SETBLANK		! set up colour for background
C
C use fast rectangle drawing, if not transforming. Bit GRUBBY
	         IF (SETUP) THEN
	            TEMPX(1) = PX(1)
	            TEMPX(2) = PX(1)
	            TEMPX(3) = PX(2)
	            TEMPX(4) = PX(2)
	            TEMPY(1) = PY(1)
	            TEMPY(2) = PY(2)
	            TEMPY(3) = PY(2)
	            TEMPY(4) = PY(1)
	            CALL SRIGFA(4,TEMPX,TEMPY)
	         ELSE
	            CALL LSG_FILL_RECTANGLE(PX,PY)
	         ENDIF
C
C and under boxes
	         PX(1) = ORGX
	         PX(2) = PX(1) + BOXX
C
	         CALL GSFACI(0)
	         IF (SETUP) THEN
	            TEMPX(1) = PX(1)
	            TEMPX(2) = PX(1)
	            TEMPX(3) = PX(2)
	            TEMPX(4) = PX(2)
	            TEMPY(1) = PY(1)
	            TEMPY(2) = PY(2)
	            TEMPY(3) = PY(2)
	            TEMPY(4) = PY(1)
	            CALL SRIGFA(4,TEMPX,TEMPY)
	         ELSE
	            CALL LSG_FILL_RECTANGLE(PX,PY)
	         ENDIF
	      ENDIF
C
C reset coordinates	      
	      PX(1) = ORGX
	      PX(2) = PX(1) + BOXX
C
	      PY(1) = ORGY
	      PY(2) = PY(1)
	   ENDIF
	ENDIF
C
C increment count
	NUM = NUM + 1
C
C increment Y values
	IF (ACTION.EQ.2) THEN
	   PY(1) = PY(2) - YPIX_SIZE		! make 1 pixel bigger
	ENDIF
C
	PY(2) = PY(2) + BOXY
C
C set planes and colour for fill area, and draw it
	IF (ACTION.EQ.2) THEN
	   CALL LSG_PLANE_SELECT(WKID,MASK)
	   CALL LSG_PLANE_OFFSET(WKID,OFFSET)
	   IF (SHR) THEN
	      CALL LSG_PLANE_SELECT(3-WKID,MASK)
	      CALL LSG_PLANE_OFFSET(3-WKID,OFFSET)
	   ENDIF
	   CALL GSFACI(COLOUR)
C
C use fast rectangle drawing if possible
	   IF (SETUP) THEN
	      TEMPX(1) = PX(1)
	      TEMPX(2) = PX(1)
	      TEMPX(3) = PX(2)
	      TEMPX(4) = PX(2)
	      TEMPY(1) = PY(1)
	      TEMPY(2) = PY(2)
	      TEMPY(3) = PY(2)
	      TEMPY(4) = PY(1)
	      CALL SRIGFA(4,TEMPX,TEMPY)
	   ELSE
	      CALL LSG_FILL_RECTANGLE(PX,PY)
	   ENDIF

	ENDIF
C
C draw text at a suitable position
C note that if interpreting bits, we can output as integers
	IF (LEN(STR).GT.0) THEN
	   TXTPTR = EXPAND('%W%S',TXTBUF,STR)
   	ELSEIF (BOTTOM.EQ.TOP) THEN
	   IF (IMAGE_CLASSIFY(IMAGE_CURRENT)) THEN	   
	      TXTPTR = EXPAND('%W%G0.5',TXTBUF,BOTTOM)
	   ELSE
	      TXTPTR = EXPAND('%W%N',TXTBUF,NINT(BOTTOM))
	   ENDIF
	ELSE
	   IF (IMAGE_CLASSIFY(IMAGE_CURRENT)) THEN	   
	      TXTPTR = EXPAND('%W%G0.5 - %G0.5',TXTBUF,BOTTOM,TOP)
	   ELSE
	      TXTPTR = EXPAND('%W%N - %N',TXTBUF,NINT(BOTTOM),NINT(TOP))
	   ENDIF
	ENDIF
C
	IF (.NOT.TEXT_BAD) THEN
	   IF (ACTION.EQ.2) THEN     	! write text
	      CALL LSG_PLANE_SELECT(WKID,ANNOTATION_MASK)
	      CALL LSG_PLANE_OFFSET(WKID,ANNOTATION_OFFSET)
	      IF (SHR) THEN
	         CALL LSG_PLANE_SELECT(3-WKID,ANNOTATION_MASK)
	         CALL LSG_PLANE_OFFSET(3-WKID,ANNOTATION_OFFSET)
	      ENDIF
	      XX = PX(2) + OFFX
	      YY = PY(1) + OFFY
cccc	      TEXT_BAD = (TRITXT(TXTDSC,ANNOFONT,XX,YY,ANNOSIZ,0.0,
cccc     &				HWTOPT.AND.ANNOHWT))
	      CALL TRITXT(TXTDSC,ANNOFONT,XX,YY,ANNOSIZ,0.0,
     &				HWTOPT.AND.ANNOHWT)
	   ELSE                           	! get its length
	      TEXT_BAD = TRISCN(TXTDSC,ANNOFONT,WIDTH,HWTOPT.AND.ANNOHWT)
	      TEXTL = MAX(TEXTL,WIDTH)
	   ENDIF
	ENDIF
C
	IF (ACTION .EQ. 1) THEN
	   XPROP = (BOXX  + TEXTL*ANNOSIZ + OFFX)/(LIM(2) - LIM(1))
	   YPROP = (PY(2) - PY(1))/(LIM(4) - LIM(3))
	ELSE
	   XPROP = 0.0
	   YPROP = 0.0
	ENDIF
C
	RETURN
	END
