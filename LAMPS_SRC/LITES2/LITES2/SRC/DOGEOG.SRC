C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-06-21 10:35:44.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE DOGEOG
C
***	IDENT   21JN93
***	MODULE  DOGEOG
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Written					RJH	21-SEP-1984
C
C Description
C
C	LITES2 cartographic editor GEOGRAPHICAL command.
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:EFNLUN/
***	PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:PACK/
***	PARAMETER/LSL$CMNLSL:READANG/
C
***     COMMON/CMN:DOUT/
***     COMMON/CMN:DRAWIN/
***	COMMON/CMN:MAPS/
***	COMMON/CMN:MASTER/
***	COMMON/LSL$CMNIFF:MD2DES/
***	COMMON/CMN:STRIKE/
***	COMMON/CMN:TRANSFORM/
C
C function called
	LOGICAL 	RUBISH
	LOGICAL 	RDANG
	LOGICAL 	RDCHS
	CHARACTER*14	DISPANG
	LOGICAL		GEOG_TRANS
C
C w/s
	EXTERNAL	MOAN
C
	REAL*8		SECSA,SECSB
	INTEGER		FLGA,FLGB
	BYTE		ICH
	REAL*8		ICOORD(2),OCOORD(2)
	REAL*4		COORD(2)
C
	INTEGER		LAT,LONG
	PARAMETER	(LONG = 1,LAT = 2)
C
C if no arguments, position to centre of screen
	IF (.NOT.DSTRIN) THEN
	   CSXY(1) = (WINDOW(1)+WINDOW(2))/2.0
	   CSXY(2) = (WINDOW(3)+WINDOW(4))/2.0
	   GOTO 800
	ENDIF
C
C read two angles
	CALL SETAUX(%REF(DSTR),DSTRL)
	IF (RDANG(SECSA,FLGA)) GOTO 950
C
	IF (RDANG(SECSB,FLGB)) THEN
C
C RDANG writes it own error messages, except for unexpected end of line
	   IF (FLGB.EQ.-1) CALL MOAN(MSG_CMDLIBEOL,'command',
     &	               DPRI(1:DPRIL))
	   GOTO 950
	ENDIF
C
C check for anything else on end of line
	IF (.NOT.RDCHS(ICH)) THEN
	   CALL MOAN(MSG_ILLEGALTERM,ICH)
	   GOTO 950
	ENDIF
C
C sort out which of SECSA and SECSB  are latitude and longitude
C FLG = READANG_ANGLE  - unsigned angle
C     = READANG_LONGITUDE  - longitude
C     = READANG_LATITUDE
C
C both the same?
	IF (FLGA.EQ.FLGB.AND.FLGA.EQ.READANG_LATITUDE) THEN
	   CALL MOAN(MSG_DUPLEHEMI,'latitude')
	   GOTO 950
	ELSEIF (FLGA.EQ.FLGB.AND.FLGA.EQ.READANG_LONGITUDE) THEN
	   CALL MOAN(MSG_DUPLEHEMI,'longitude')
	   GOTO 950
	ELSEIF (FLGA.EQ.FLGB) THEN	! no hemisphere given - LAT LONG
	   ICOORD(LAT)  = SECSA
	   ICOORD(LONG) = SECSB
C
C one hemisphere given
	ELSEIF (FLGA.EQ.READANG_ANGLE) THEN
	   IF (FLGB.EQ.READANG_LATITUDE) THEN
	      ICOORD(LAT)  = SECSB
	      ICOORD(LONG) = SECSA
	   ELSE
	      ICOORD(LONG) = SECSB
	      ICOORD(LAT)  = SECSA
	   ENDIF
	ELSEIF (FLGB.EQ.READANG_ANGLE) THEN
	   IF (FLGA.EQ.READANG_LATITUDE) THEN
	      ICOORD(LONG) = SECSB
	      ICOORD(LAT)  = SECSA
	   ELSE
	      ICOORD(LAT)  = SECSB
	      ICOORD(LONG) = SECSA
	   ENDIF	   
C
C both hemispheres given
	ELSE
	   IF (FLGA.EQ.READANG_LATITUDE) THEN
	      ICOORD(LONG) = SECSB
	      ICOORD(LAT)  = SECSA
	   ELSE
	      ICOORD(LAT)  = SECSB
	      ICOORD(LONG) = SECSA
	   ENDIF
	ENDIF
C
C check for valid angle
	IF (ABS(ICOORD(LAT)).GT.324000) THEN
	   CALL MOAN(MSG_ANGOUTRANGE,DISPANG(ICOORD(LAT),
     &	            READANG_LATITUDE),'latitude')
	   GOTO 950
	ELSEIF (ABS(ICOORD(LONG)).GT.648000) THEN
	   CALL MOAN(MSG_ANGOUTRANGE,DISPANG(ICOORD(LONG),
     &	             READANG_LONGITUDE),
     &	                     'longitude')
	   GOTO 950
	ENDIF
C
C convert geog to grid
	IF (.NOT.GEOG_TRANS(ICOORD,OUTSYS, OUTZONE, PAROUT, OUTUNIT,
     &	      OCOORD,LITES2SYS,LITES2ZONE,LITES2PAR,LITES2UNIT)) GOTO 950
C
C subtract origin offset ( and convert to R*4)
	COORD(1) = OCOORD(1) - LITES2ORG(1)
	COORD(2) = OCOORD(2) - LITES2ORG(2)
C
C is this point in map?
	IF (RUBISH(COORD)) THEN
	   CALL MOAN(MSG_BADPOS)
	   GOTO 950
	ENDIF
C
	CSXY(1) = COORD(1)
	CSXY(2) = COORD(2)
C
800	CSSTIL = .FALSE.		! cursor has moved
	FONLIN = .FALSE.		! and is not now on a feature
	GOTO 999
C
C error reading angle
950	CALL IGNCMD
C
999	RETURN
	END
