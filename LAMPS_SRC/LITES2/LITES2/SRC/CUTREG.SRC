	LOGICAL FUNCTION CUTREG(LINE,REG,INSIDE,RESOLVED)
C
***	IDENT	02FE90
***	MODULE	CUTREG
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	13-Aug-1985
C
C Description
C
C	Logical function that returns .TRUE. when a line LINE cuts
C	the region REG, and .FALSE. otherwise.  If the second end of
C	LINE lies on the region, then line does not cut region.
C
C	If the first end of LINE lies on the region, points inside
C	LINE are examined to see if they are inside or outside the
C	region.  The value of INSIDE is used to determine if a cut
C	happens.
C
C	It is the responsibility of the calling program to ensure
C	that REG is valid, and that it has at least two points
C	(three	are more sensible)
C
	IMPLICIT NONE
C
C Arguments
C (input)
C
	REAL		LINE(2,2)	! line to test
	INTEGER*4	REG		! number of region
	LOGICAL		INSIDE		! .TRUE. if inside region
	LOGICAL		RESOLVED	! do we know if we are
					! inside or out?
C
C common and parameter blocks
C
***	PARAMETER/CMN:REGPAR/
***	PARAMETER/CMN:SECTOR/
C
***	COMMON/CMN:MASTER/
***	COMMON/CMN:REGCMN/
***	COMMON/CMN:SECMAP/
C
C functions
C
	LOGICAL		INTSCTR,PINREG
	INTEGER		LISECS,LIB$EXTZV
	INTEGER		GETARR
C
C Local Variables
C
	INTEGER*4	CURPPT		! counter
	REAL		TSTLNE(2,2)	! current line of region
	REAL		XSTART,YSTART	! first point in region
	LOGICAL		FINISHED	! loop control
	REAL		POINT(2)	! intersection point
	INTEGER*4	INLINE
	INTEGER*4	INTEST
	LOGICAL		CUT
	REAL*8		DX,DY,DXY
	INTEGER		J,I		! loop counter
	INTEGER		DIR
	REAL		XY(2)
	REAL		TMPXY(2)
	LOGICAL		INSDE1
	LOGICAL		USEX		! Is X extent greater
					! than Y extent?
	REAL		MINTST(2),MAXTST(2)
	REAL		MINLIN(2),MAXLIN(2)
	REAL		DIST,PROP1,PROP2
	REAL		LTD		! a small number for comparing
	PARAMETER	(LTD=1E-6)	! numbers in range 0.0 -> 1.0
C
C assume inside
C
	CUT=.FALSE.
C
C get limits of line
C
	MINLIN(1)=MIN(LINE(1,1),LINE(1,2)) - LINWDTH
	MINLIN(2)=MIN(LINE(2,1),LINE(2,2)) - LINWDTH
	MAXLIN(1)=MAX(LINE(1,1),LINE(1,2)) + LINWDTH
	MAXLIN(2)=MAX(LINE(2,1),LINE(2,2)) + LINWDTH
C
C do gross check of line against bounding rectangle of region
C
	IF ((MAXLIN(1).LT.REGLIM(1,REG)).OR.
     &	    (MINLIN(1).GT.REGLIM(2,REG)).OR.
     &	    (MAXLIN(2).LT.REGLIM(3,REG)).OR.
     &	    (MINLIN(2).GT.REGLIM(4,REG))) GOTO 100
C
C sector region if required
	IF ((REGDEF(REG).AND.REGDEF_SEC).EQ.0) CALL SECREG(REG)
C
C line can only cut region boundary if the sectors it passes through
C are common with the sectors the region boundary passes through
C
	DO 10,J=1,LISECS(LINE)
	   IF (LIB$EXTZV(GETARR(%VAL(SECTRS),J),1,
     &	                  %VAL(REGMAP(REG)))) GOTO 20 ! possible
   10	CONTINUE
	GOTO 100
C
C need to test line with each vector of region
C
   20	CONTINUE
C
C get increments for moving the ends of LINE off the region
C
	DX=(DBLE(LINE(1,2)) - DBLE(LINE(1,1)))
	DY=(DBLE(LINE(2,2)) - DBLE(LINE(2,1)))
	USEX = ABS(DX).GE.ABS(DY)
	CALL PRPLIN(DX,DY,LINWDTH)
C
C check whether this is a big enough increment (to avoid problems of 
C precision)
C
   21	CONTINUE
	XY(1) = DBLE(LINE(1,1)) + DX*2.0
	XY(2) = DBLE(LINE(2,1)) + DY*2.0
	IF ((DX.NE.0.0.OR.DY.NE.0.0).AND.
     &	    (ABS(XY(1)-LINE(1,1)).LT.LINWDTH).AND.
     &	    (ABS(XY(2)-LINE(2,1)).LT.LINWDTH)) THEN
	   DX = DX*2.0
	   DY = DY*2.0
	   GOTO 21
	ENDIF
C
	DXY=SQRT(DX**2+DY**2)
C
C get first point of region and initialise loop
C	
	CURPPT=REGPTR(1,REG)
	CALL PUTLNG(%VAL(CURPPT+OFFX),XSTART)
	CALL PUTLNG(%VAL(CURPPT+OFFY),YSTART)
	TSTLNE(1,2)=XSTART
	TSTLNE(2,2)=YSTART
	FINISHED=.FALSE.
C
C  loop to test each vector of region
C
   30	CONTINUE
	IF (FINISHED) GOTO 100		! end of region
	TSTLNE(1,1)=TSTLNE(1,2)
	TSTLNE(2,1)=TSTLNE(2,2)
C
C get next point from region, or if at end of region, use the start
C point
C
	CALL PUTLNG(%VAL(CURPPT),CURPPT)
	IF (CURPPT.NE.REGPTR(2,REG)) THEN
	   CALL PUTLNG(%VAL(CURPPT+OFFX),TSTLNE(1,2))
	   CALL PUTLNG(%VAL(CURPPT+OFFY),TSTLNE(2,2))
	ELSE
	   FINISHED=.TRUE.
	   TSTLNE(1,2)=XSTART
	   TSTLNE(2,2)=YSTART
	ENDIF
C
C now check to see if this vector cuts the line
C
	MINTST(1)=MIN(TSTLNE(1,1),TSTLNE(1,2)) - LINWDTH
	MINTST(2)=MIN(TSTLNE(2,1),TSTLNE(2,2)) - LINWDTH
	MAXTST(1)=MAX(TSTLNE(1,1),TSTLNE(1,2)) + LINWDTH
	MAXTST(2)=MAX(TSTLNE(2,1),TSTLNE(2,2)) + LINWDTH
C
C gross check for possible intersection
C
	IF ((MAXTST(1).LT.MINLIN(1)).OR.
     &	    (MINTST(1).GT.MAXLIN(1)).OR.
     &	    (MAXTST(2).LT.MINLIN(2)).OR.
     &	    (MINTST(2).GT.MAXLIN(2))) GOTO 30
C
C need to intersect
C
	IF (.NOT.INTSCTR(LINE,TSTLNE,POINT,INLINE,INTEST)) THEN
C
C line is not parallel to vector, so test for intersection within line
C
	   IF (INLINE.EQ.-1.AND.INTEST.EQ.-1) THEN
	      CUT=.TRUE.			! a definite cut
C
C if not resolved, we must find out if we were inside, or outside
C
	      IF (.NOT.RESOLVED) THEN
	         DO 40, J=1,100
	            XY(1)=DBLE(POINT(1)) - J*DX
	            XY(2)=DBLE(POINT(2)) - J*DY
	            IF (.NOT.PINREG(XY,REG,INSDE1)) THEN
	               RESOLVED = .TRUE.
	               INSIDE = INSDE1
	               GOTO 45
	            ENDIF
   40	         CONTINUE
   45	         CONTINUE
	      ENDIF
	   ELSEIF(INTEST.AND.INLINE) THEN
	      IF (INLINE.EQ.3) THEN	! line ends on region - no cut
	         CUT = .FALSE.
	      ELSEIF (INLINE.EQ.1.OR.	! line leaving region boundary
     &	          INTEST) THEN 		! or line passing through vertex
					! of region
C
C See if as we move along the line if
C we are on the same side of the region as before.  If we do not get off
C the region boundary then line is presumably parallel to it, and some
C other edge of the boundary will sort it out.
C
	         IF (INLINE.EQ.1) THEN
	            TMPXY(1) = LINE(1,1)
	            TMPXY(2) = LINE(2,1)
	         ELSE
	            TMPXY(1) = POINT(1)
	            TMPXY(2) = POINT(2)
	         ENDIF
C
	         DO 50, J=1,100
	            XY(1)=DBLE(TMPXY(1)) + J*DX
	            XY(2)=DBLE(TMPXY(2)) + J*DY
	            IF (.NOT.PINREG(XY,REG,INSDE1)) THEN
	               IF (RESOLVED) THEN
	                  CUT=INSIDE.NE.INSDE1
	               ELSE
	                  RESOLVED = .TRUE.   ! now we know where we are
	                  INSIDE = INSDE1
	               ENDIF
	               GOTO 60
	            ENDIF
   50	         CONTINUE
C
C we may be able to find out if we are in or out, by going the other way
C (if case is line passing through region vertex)
C
	         IF (.NOT.RESOLVED.AND.INLINE.NE.1) THEN
	            DO 55, J=1,100
	               XY(1)=DBLE(TMPXY(1)) - J*DX
	               XY(2)=DBLE(TMPXY(2)) - J*DY
	               IF (.NOT.PINREG(XY,REG,INSDE1)) THEN
	                  RESOLVED = .TRUE.   ! now we know where we are
	                  INSIDE = INSDE1
	                  GOTO 60
	               ENDIF
   55	            CONTINUE
C
C if LINE is going away from region, and not quite paallel, try end of
C line, to resolve INSIDE (a bit arbitrary this)
C
	         ELSEIF (.NOT.RESOLVED.AND.INLINE.EQ.1) THEN
	            IF (.NOT.PINREG(LINE(1,2),REG,INSDE1)) THEN
	               RESOLVED = .TRUE.
	               INSIDE = INSDE1
	            ENDIF
	         ENDIF
C
   60	         CONTINUE
	      ENDIF
	   ENDIF
C
C line is parallel to region boundary; if it is colinear then can test
C for cut, otherwise no cut
C
	ELSE
	   CALL PRPDST(LINE(1,1),TSTLNE,DIST,PROP1)
	   IF (DIST.LE.DXY) THEN		! colinear
C
C work out where other end of line lies wrt TSTLNE
C
	      CALL PRPDST(LINE(1,2),TSTLNE,DIST,PROP2)
C
C if LINE lies within TSTLNE, then there can be no cut
C
	      IF (PROP1.GT.-LTD.AND.PROP1.LT.(1.0+LTD).AND.
     &	          PROP2.GT.-LTD.AND.PROP2.LT.(1.0+LTD)) THEN
	         CUT = .FALSE.
C
C if both ends of LINE are outside same end of TSTLNE, there can be
C no cut
	      ELSEIF ((PROP1.LT.-LTD.AND.PROP2.LT.-LTD).OR.
     &	              (PROP1.GT.(1.0+LTD).AND.PROP2.GT.(1.0+LTD))) THEN
	         CUT = .FALSE.
C
C there is now a chance to resolve our position; test both ends of LINE
C
	         IF (.NOT.RESOLVED) THEN
	            IF (.NOT.PINREG(LINE(1,1),REG,INSDE1)) THEN
	               RESOLVED = .TRUE.
	               INSIDE = INSDE1
	            ENDIF
	            IF (.NOT.RESOLVED) THEN
	               IF (.NOT.PINREG(LINE(1,2),REG,INSDE1)) THEN
	                  RESOLVED = .TRUE.
	                  INSIDE = INSDE1
	               ENDIF
	            ENDIF
	         ENDIF
C
C so one or/and other end of TSTLNE lies within LINE
C There may be a cut at either end of TSTLNE, so check if by moving away
C from TSTLNE in either direction, creates a cut
	      ELSE
	         DIR = +1				! get direction
	         IF (USEX) THEN
	            IF (TSTLNE(1,1).LE.TSTLNE(1,2)) DIR = -1
	         ELSE
	            IF (TSTLNE(2,1).LE.TSTLNE(2,2)) DIR = -1
	         ENDIF
C
	         DO 90, I=1,2
	            IF (I.EQ.2) DIR = -DIR	! now at other end
	            POINT(1) = TSTLNE(1,I)
	            POINT(2) = TSTLNE(2,I)
C
C see if POINT lies within LINE
C
	            IF ((USEX.AND.
     &	               (LINE(1,1)-POINT(1))*(LINE(1,2)-POINT(1)).LE.0.0)
     &	                  .OR.
     &	               (.NOT.USEX.AND.
     &	               (LINE(2,1)-POINT(2))*(LINE(2,2)-POINT(2)).LE.0.0))
     &	                  THEN
C
C move away from other end of TSTLNE
C
	               DO 80, J=1,100
	                  XY(1)=DBLE(POINT(1)) + DIR*J*DX
	                  XY(2)=DBLE(POINT(2)) + DIR*J*DY
	                  IF (.NOT.PINREG(XY,REG,INSDE1)) THEN
	                     IF (RESOLVED) THEN
	                        CUT = INSIDE.NE.INSDE1
	                     ELSE  
	                        RESOLVED = .TRUE.
	                        INSIDE = INSDE1
	                     ENDIF
	                     GOTO 90
	                  ENDIF
   80	               CONTINUE
	            ENDIF	! POINT within LINE
   90	         CONTINUE
	      ENDIF		! of one end of TSTLNE within LINE
C
	   ENDIF		! of dealing with colinear lines
	ENDIF			! of dealing with result of intersection
C
C loop if not found an intersection
C
	IF (.NOT.CUT) GOTO 30
C
C Return
C
  100	CONTINUE
	CUTREG=CUT.AND.RESOLVED
	RETURN
	END
