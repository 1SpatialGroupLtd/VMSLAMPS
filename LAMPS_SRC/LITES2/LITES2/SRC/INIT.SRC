C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1995-01-27 14:13:06.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION INIT	
C
***	IDENT	27JA95
***	MODULE	INIT
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RJH	21-SEP-1984
C
C Description
C
C    LITES2 cartographic editor basic initialisation.
C    Returns .FALSE. if initialised, .TRUE. if there was an error
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:ACS/
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:CTXS/
***	PARAMETER/CMN:EFNLUN/
***	PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:PACK/
***     PARAMETER/CMN:STAPAR/
***	PARAMETER/LSL$CMNOSMH:OSMHLIBMSG/
C
***	COMMON/CMN:ACS/
***	COMMON/LSL$CMNLSL:CMDCOM/
***	COMMON/CMN:CTXS/
***	COMMON/CMN:DIN/
***	COMMON/CMN:DRAWIN/
***	COMMON/CMN:DVAR/
***	COMMON/LSL$CMNLSL:EXPC/
***     COMMON/CMN:GLOBAL/
***	COMMON/CMN:IMAGE/
***	COMMON/CMN:LICENC/
***	COMMON/CMN:MAPS/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:OIIH/
***	COMMON/CMN:OPTION/
***	COMMON/LSL$CMNLSL:TXTC/
***	COMMON/CMN:VTCTRL/
***	COMMON/CMN:WORKS/
C
	INCLUDE		'($DCDEF)'
	INCLUDE 	'($DVIDEF)'
	INCLUDE		'($PRDEF)'
	INCLUDE		'($SSDEF)'
	INCLUDE		'($SYIDEF)'
C
	EXTERNAL	CTRLCAST
	EXTERNAL	WRITEF		! for IFFTDY
	EXTERNAL	TWOPUT		! terminal output routine
C
C functions
	INTEGER*4	LIB$GETDVI
	INTEGER*4	LIB$GETSYI
	LOGICAL		GTDONG
	LOGICAL		TSTCPU
	LOGICAL		TRNALL
	LOGICAL		INIVAR
	LOGICAL		INIMAC
	LOGICAL		INIDRAW
	INTEGER		OSMH_NEW_INI
	INTEGER		OSMH_NEW_INQTABLE
	INTEGER		SIGCHS
C
C workspace
	INTEGER		I,J
	INTEGER*4	IERR
	INTEGER*4	VAL
	INTEGER*4	PLACEL
	CHARACTER*80	PLACE		! name of installation
	INTEGER		COMP_LEN
	CHARACTER*31	COMP		! name of computer
	INTEGER*4	TYPE		! type of computer
	INTEGER*4	NUMBER		! serial number if &*0
	LOGICAL		DEMO		! a demo licence?
	INTEGER*4	EXDATE		! expiry date of licence
	INTEGER*4	TODAY		! today's date
	INTEGER		DUMMY1,DUMMY2,DUMMY3
	INTEGER		RETCOD
C
	INIT = .TRUE.			! assume failure
C
C Set up our terminal output routine
	CALL LSL_SET_OUTPUT(TWOPUT)
C
C Extend EXPBUF and TXTBUF
	CALL SET_EXPMAX(MAX_EXPMAX)
	CALL SET_TXTLIM(MAX_TXTLIM)
C
C Check whether SYS$INPUT and SYS$OUTPUT are terminals
	IERR=LIB$GETDVI(DVI$_DEVCLASS,,'SYS$INPUT',VAL,,)
	IF (IERR) THEN			! success
	   IF (VAL.EQ.DC$_TERM)    ITERM = .TRUE.	! is a terminal
	   IF (VAL.EQ.DC$_MAILBOX) THEN
	      ITERM = .TRUE.				! or a mailbox
	      IMAIL = .TRUE.
	   ENDIF
	ELSE
	   CALL LITES2_SIGNAL(IERR)
	ENDIF
C
	IERR=LIB$GETDVI(DVI$_DEVCLASS,,'SYS$OUTPUT',VAL,,)
	IF (IERR) THEN			! success
	   IF (VAL.EQ.DC$_TERM)    OTERM = .TRUE.	! is a terminal
	   IF (VAL.EQ.DC$_MAILBOX) OTERM = .TRUE.	! or a mailbox
	ELSE
	   CALL LITES2_SIGNAL(IERR)
	ENDIF
C
C set out-of-band character AST for CTRL/C
	IF (ITERM) CALL SET_OUTBAND_AST(CTRLCAST,8)	! in LSLLIB
C
C N.B. should really use CLCFLG here (set to WTEFN in BLKDAT)
C but unfortunately CMDCOM.CMN and VAREFN.CMN both have a 'TABFLG'
C in them
	CTRLC=CTRLC_OFF
	BREAK=BREAK_OFF
	CALL SYS$CLREF(%VAL(WTEFN))
C
C what type of terminal am I sitting on ?
	CALL LIB$SCREEN_INFO(VTFLAG,VTTYPE,VTCPL,VTLPP)
	IF (IAND(VTFLAG,2).EQ.0) VT100 = .FALSE. ! not VT100-compatible
	VTSSCR = 1				 ! start of scroll area
	VTSEND = VTLPP				 ! end of scroll area
	VTSTTS = VTLPP - 1			 ! start of status line
C
C Clear VT100 screen, and set scroll area to whole screen
	CALL LITES2_SCROLL(0,-1)
C
C Initialise FRT graphics routines
	CALL FRT_GRAPH_INIT
C
C initialise VM zones
	CALL INIZONE
C
C get the date for AC date flagging
	CALL ACDATE
C
C get program name and version number (for WRTVER and system variables)
	CALL TSTWK(DUMMY1,DUMMY2,PNAM_LEN,PNAM,DUMMY3)
	CALL GETVERSION(VNAM_LEN,VNAM)
C
C Display LITES2 version number
	CALL WRTVER
	CALL INFORM(MSG_BLANK)
C
C get the "dongle" - the address of the licence function
C and write out a message
	IF (.NOT.GTDONG()) THEN			! found dongle
	   CALL LIB$DAY(TODAY)
	   IF (TSTCPU(%VAL(LFUNAD),PLACEL,PLACE,TYPE,NUMBER,DEMO,
     &	                  EXDATE)) THEN
	      CALL MOAN(MSG_NOTLICENSED)
	      GOTO 999
	   ELSE
	      IF (EXDATE.NE.-1) THEN
	         IF (TODAY.GT.EXDATE) THEN
	            CALL MOAN(MSG_EXPLICENCE,TODAY-EXDATE)
	            GOTO 999
	         ENDIF
	      ENDIF
C
	      IF (DEMO) THEN
	         CALL INFORM(MSG_ASTERISKS)
	         CALL INFORM(MSG_DEMO,PLACE(1:PLACEL))
	      ELSE
	         IERR = LIB$GETSYI(SYI$_HW_NAME,,COMP,COMP_LEN)	         
	         IF (.NOT.IERR) THEN
	            CALL LITES2_SIGNAL(IERR)
	         ELSE
	            IF (TYPE.EQ.PR$_SID_TYP780) THEN
	               CALL INFORM(MSG_LIC780,PLACE(1:PLACEL),
     &	                           COMP(1:COMP_LEN),
     &	                           NUMBER.AND.'FFF'X)	! bottom 12 bits
	            ELSE
	               CALL INFORM(MSG_LICGEN,PLACE(1:PLACEL),COMP(1:COMP_LEN))
	            ENDIF
	         ENDIF
	      ENDIF
	      IF (EXDATE.GT.0) CALL INFORM(MSG_LICVALFOR,EXDATE-TODAY+1)
	      IF (DEMO) CALL INFORM(MSG_ASTERISKS)
	   ENDIF
	ELSE
C
C no dongle, so check for LSL$LITES2WIZARD
	   IF (TRNALL('LSL$LITES2WIZARD',PLACE)) THEN
	      CALL INFORM(MSG_ASTERISKS)
	      CALL INFORM(MSG_NOLICENCE)
	      CALL INFORM(MSG_ASTERISKS)
	   ELSE
	      CALL MOAN(MSG_NOTLICENSED)
	      GOTO 999
	   ENDIF
	ENDIF
	CALL INFORM(MSG_BLANK)
C
C set up terminator mask from e.g.
C $ define LSL$LITES2_TERMINATOR_MASK "13,26" ! CR and CTRL/Z
	TTIMBK(1) = 0
	TXTPTR = 255
	IF (TRNALL('LSL$LITES2_TERMINATOR_MASK',TXTDSC)) THEN
	   TXTPTR = SIGCHS(TXTDSC)
	   IF (TXTPTR.GT.0) THEN
	      CALL VIOCLR(TTIMSK,32,0)
	      CALL RDSEL(255,TXTDSC,.FALSE.,8,TTIMSK,IERR)
	      IF (IERR.LT.0) THEN
	         TTIMBK(1) = 0
	         CALL MOAN(MSG_ERRTMASK,TXTDSC)
	      ELSE
	         TTIMBK(1) = 32			! length of mask (bytes)
	         TTIMBK(2) = %LOC(TTIMSK)	! address of mask
	      ENDIF
	   ENDIF
	ENDIF
C
C get special text drawing and blanking functions
	CALL GETROUTINE(LOG_TEXT,TEXT_ENTRY,TEXTAD,
     &				'Text drawing',.TRUE.)
	CALL GETROUTINE(LOG_TEXT,TEXT_ENTRY_B,TEXTAD_B,
     &				'Text blanking',.FALSE.)
C
C get special symbol drawing and blanking functions
	CALL GETROUTINE(LOG_SYMBOL,SYMBOL_ENTRY,SYMBAD,
     &				'Symbol drawing',.TRUE.)
	CALL GETROUTINE(LOG_SYMBOL,SYMBOL_ENTRY_B,SYMBAD_B,
     &				'Symbol blanking',.FALSE.)
C
C get special relvnting (selection) function
	CALL GETROUTINE(LOG_RELVNT,RELVNT_ENTRY,RELVNTAD,
     &	                        'Relevant selection',.TRUE.)
C
C tidy IFFLIB errors - outputting a blank line after the IFF messages
C                      to avoid LITES2 overwriting them
	CALL IFFTDY(WRITEF)	
C
C initialise string descriptor address in /OIIH/
	COIADR = %LOC(COIBUF)
C
C initialise string descriptor addresses in /CTXS/
	CTXBUFL(CTX_L_TXTADR) = %LOC(CTXTEXT)
C
C initialise string descriptor addresses in /ACS/
	ACBUFL(AC_L_TXTADR) = %LOC(ACTEXT)
C
C initialise dynamic string descriptors for image strings
	DO 30, J = 1,MAXIMAGE
	   DO 30 I = 1,MAXBAND
	      CALL INIDSC(IMAGE_BANDSTR(1,I,J))
	      IF (J.EQ.1) CALL INIDSC(IMAGE_TSTR(1,I))
	   CONTINUE
30	CONTINUE
C
C initialise dynamic string descriptors for map names
	DO 40 I = 0,MAXMAP-1
	      CALL INIDSC(IFFNAM(1,I))
	      CALL INIDSC(MAPNAM(1,I))
	   CONTINUE
40	CONTINUE
C
C and for character results of ASK commands
	DO 50,I = 1,ASK_CHAR_TOT
	   CALL INIDSC(ASK_CHAR(1,I))
50	CONTINUE
C
C and for stack
	DO 60,I = 1,DSLIM
	   CALL INIDSC(DSTACK(5,I))
60	CONTINUE
C
C and for command file stack
	DO 70,I = LMIN,LMAX
	   CALL INIDSC(DFARG(1,I))
70	CONTINUE
C
C get file names for workstation initialisation file and setup data
	CALL TRNFLN
C
C initilaise new OS map header accessing routines
	IF (.NOT.OS_MH_INITIALISED) THEN
C
C does logical name (and table) exist
	   RETCOD = OSMH_NEW_INQTABLE()
	   IF (RETCOD.EQ.OSMHLIB__NOFILE) THEN
	      CALL MOAN(MSG_NOOSMHTABLE)
	      CALL INFORM(MSG_NOUPDATEFLG) 	! learner is disabled!
	   ENDIF
	   IF (RETCOD) THEN
              RETCOD = OSMH_NEW_INI()
	      IF (RETCOD) THEN
C
C take care - OS_MH_INITIALISED is a L*1 - OSMH_NEW_INI may return an integer
	         OS_MH_INITIALISED = .TRUE.
	      ELSE
	         CALL MOAN(MSG_OSMHINITERR)
	         CALL INFORM(MSG_NOUPDATEFLG)	! learner is disabled
	      ENDIF
	   ENDIF
	ENDIF
C
C Open journal file
	CALL OPNJOU
C
C Set up macro handling
   	IF (INIMAC()) GOTO 999   
C
C Set up variable handling
   	IF (INIVAR()) GOTO 999   
C
C Set up drawing buffers
   	IF (INIDRAW()) GOTO 999   
C
C Turn off CMDLIB errors
	NOMESS = .TRUE.
C
C set random number generator seed, and time for $ELAPSEDSEC
	RAN_SEED = SECNDS(0.0) * 100.0
	IF (.NOT.RAN_SEED) RAN_SEED = RAN_SEED + 1	! ensure odd
C
C Set INITIAL state for command decoding
	CALL SETSTA(STATE_INITIAL)
C
	INIT = .FALSE.				! success
C
999	RETURN
	END
