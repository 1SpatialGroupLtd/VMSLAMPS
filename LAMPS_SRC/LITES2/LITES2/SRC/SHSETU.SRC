	SUBROUTINE SHSETU
C
***	IDENT	28SE94
***	MODULE	SHSETU
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	13-Jan-1988
C
C	LITES2 cartographic editor SHOW SETUP command.
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:EFNLUN/
***	PARAMETER/CMN:MACMEN/
***     PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:STAPAR/
***	PARAMETER/CMN:TRNTYP/
C
***	COMMON/CMN:MAPS/
**	COMMON/CMN:OSCOEF/
***	COMMON/CMN:OTRANS/
***	COMMON/CMN:PTOLERANCE/
***	COMMON/CMN:STATE/
***	COMMON/CMN:WORKS/
C
C w/s
	INTEGER*4	I,J
	INTEGER		SET
	LOGICAL		HAD_OUTPUT
	CHARACTER*(46)	EQUS(2,4)
	INTEGER		EQU_LENS(2,4)
C
	DATA		EQUS(1,TRNTYP_ORTHOG),EQUS(2,TRNTYP_ORTHOG),
     &			EQUS(1,TRNTYP_AFFINE),EQUS(2,TRNTYP_AFFINE),
     &			EQUS(1,TRNTYP_LASERAID),EQUS(2,TRNTYP_LASERAID),
     &			EQUS(1,TRNTYP_PROJECTIVE),
     &			EQUS(2,TRNTYP_PROJECTIVE)/
     &	                     'ie   X = a0 + a1*x - a2*y',
     &	                     '     Y = a3 + a2*x + a1*y',
     &                       'ie   X = a0 + a1*x + a2*y',
     &	                     '     Y = b0 + b1*x + b2*y',
     &                       'ie   X = a0 + a1*x + a2*y + a3*x*y',
     &	                     '     Y = b0 + b1*x + b2*y + b3*x*y',
     &	                'ie   X = (a0*x + a1*y + a2) / (a6*x + a7*y +1)',
     &	                '     Y = (a3*x + a4*y + a5) / (a6*x + a7*y +1)'/
	DATA		EQU_LENS(1,TRNTYP_ORTHOG),
     &			EQU_LENS(2,TRNTYP_ORTHOG),
     &			EQU_LENS(1,TRNTYP_AFFINE),
     &			EQU_LENS(2,TRNTYP_AFFINE),
     &			EQU_LENS(1,TRNTYP_LASERAID),
     &			EQU_LENS(2,TRNTYP_LASERAID),
     &			EQU_LENS(1,TRNTYP_PROJECTIVE),
     &			EQU_LENS(2,TRNTYP_PROJECTIVE)
     &			/2*25,2*25,2*34,2*46/
C
C output current settings that will be used for future setups
C
	CALL INFORM(MSG_TABCOUNTS,TABLE_COUNTS)
	IF (HAD_SETUP_CANCEL) THEN
	   CALL INFORM(MSG_SETUPCANCEL,' not ')
	ELSE
	   CALL INFORM(MSG_SETUPCANCEL,' ')
	ENDIF
C
	IF (TABSUP.EQ.0) THEN		! SETUP NONE
	   CALL INFORM(MSG_NOSETUP)
	ELSE
	   I = TABSUP
	   CALL INFORM(MSG_MAPSETUP,TS_TYPE(I)(1:TS_TYPE_LEN(I)))
	   IF (I.EQ.3) THEN
	      CALL INFORM(MSG_OSSETUP1,CPFULX,CPFULY) ! os setup
	      CALL INFORM(MSG_OSSETUP2,CPREP,CPMOK,CPTOL)
	   ENDIF
	   CALL INFORM(MSG_BLANK)
	   CALL INFORM(MSG_MAPSETUPTRAN,
     &	                  TR_TYPE(TRNTYP)(1:TR_TYPE_LEN(TRNTYP)))
	   CALL INFORM(MSG_STRING,EQUS(1,TRNTYP)(1:EQU_LENS(1,TRNTYP)))
	   CALL INFORM(MSG_STRING,EQUS(2,TRNTYP)(1:EQU_LENS(2,TRNTYP)))
	ENDIF
C
C now output the  setup used for the maps set up on the table
	IF (SINDEX.NE.STATE_INITIAL) THEN
	   IF (MAP_SETUP_TOTAL.LE.0) THEN
	      CALL INFORM(MSG_BLANK)
	      CALL INFORM(MSG_NOMAPSETUP)
	   ELSE
	      DO 100, SET = 1,MAP_SETUP_TOTAL
	         CALL INFORM(MSG_BLANK)
	         IF (.NOT.HAD_OUTPUT) THEN
	            CALL INFORM(MSG_ASTERISKS)
	            CALL INFORM(MSG_BLANK)
	            HAD_OUTPUT = .TRUE.
	         ENDIF
	         I = MAPTABSUP(SET)
	         CALL INFORM(MSG_OMAPSETUP,IFFNAM(1,MAP_SETUP(SET)),
     &	                  TS_TYPE(I)(1:TS_TYPE_LEN(I)))
	         CALL INFORM(MSG_BLANK)
	         J = MAPTRNTYP(SET)
	         CALL INFORM(MSG_OMAPSETUPTRAN,
     &	                     TR_TYPE(J)(1:TR_TYPE_LEN(J)))
	         CALL INFORM(MSG_STRING,EQUS(1,J)(1:EQU_LENS(1,J)))
	         CALL INFORM(MSG_STRING,EQUS(2,J)(1:EQU_LENS(2,J)))
	         CALL INFORM(MSG_WHERE)
	         CALL INFORM(MSG_WHERE)
C
	         IF (J.EQ.TRNTYP_ORTHOG) THEN
	            CALL INFORM(MSG_AX,0,CPSCOF(1,1,SET))
	            CALL INFORM(MSG_AX,1,CPSCOF(2,1,SET))
	            CALL INFORM(MSG_AX,2,CPSCOF(3,1,SET))
	            CALL INFORM(MSG_AX,3,CPSCOF(1,2,SET))
	         ELSEIF (J.EQ.TRNTYP_AFFINE) THEN
	            CALL INFORM(MSG_AX,0,CPSCOF(1,1,SET))
	            CALL INFORM(MSG_AX,1,CPSCOF(2,1,SET))
	            CALL INFORM(MSG_AX,2,CPSCOF(3,1,SET))
	            CALL INFORM(MSG_BX,0,CPSCOF(1,2,SET))
	            CALL INFORM(MSG_BX,1,CPSCOF(2,2,SET))
	            CALL INFORM(MSG_BX,2,CPSCOF(3,2,SET))
	         ELSEIF (J.EQ.TRNTYP_LASERAID) THEN
	            CALL INFORM(MSG_AX,0,CPSCOF(1,1,SET))
	            CALL INFORM(MSG_AX,1,CPSCOF(2,1,SET))
	            CALL INFORM(MSG_AX,2,CPSCOF(3,1,SET))
	            CALL INFORM(MSG_AX,3,CPSCOF(4,1,SET))
	            CALL INFORM(MSG_BX,0,CPSCOF(1,2,SET))
	            CALL INFORM(MSG_BX,1,CPSCOF(2,2,SET))
	            CALL INFORM(MSG_BX,2,CPSCOF(3,2,SET))
	            CALL INFORM(MSG_BX,3,CPSCOF(4,2,SET))
	         ELSEIF (J.EQ.TRNTYP_PROJECTIVE) THEN
	            CALL INFORM(MSG_AX,0,CPSCOF(1,1,SET))
	            CALL INFORM(MSG_AX,1,CPSCOF(2,1,SET))
	            CALL INFORM(MSG_AX,2,CPSCOF(3,1,SET))
	            CALL INFORM(MSG_AX,3,CPSCOF(4,1,SET))
	            CALL INFORM(MSG_AX,4,CPSCOF(1,2,SET))
	            CALL INFORM(MSG_AX,5,CPSCOF(2,2,SET))
	            CALL INFORM(MSG_AX,6,CPSCOF(3,2,SET))
	            CALL INFORM(MSG_AX,7,CPSCOF(4,2,SET))
	         ENDIF
100	      CONTINUE
	   ENDIF
	ENDIF   
	RETURN
	END
