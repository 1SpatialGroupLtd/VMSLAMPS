	LOGICAL FUNCTION CLPFRN(REG,CODE)
C
***     IDENT   10MY96
***     MODULE  CLPFRN
C
C       Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C       Written                                 RWR 	16-Sep-1985
C
C Description
C
C	Function to CLIP the found feature against the specified
C	region. Returns .TRUE. if feature does not cut region
C	boundary (or there has been a collapse), otherwise .FALSE.
C
C NOTE:	it is the responsibility of the calling routine to ensure
C	=========================================================
C	that the region is valid and that there is a found object.
C	==========================================================
C
        IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:AUXDEF/
***     PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:PACK/
***	PARAMETER/CMN:REGPAR/
C
***	COMMON/CMN:DEFINE/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:REGCMN/
***	COMMON/CMN:STRIKE/
C
C arguments
C
	INTEGER*4	REG	! region to clip against
	INTEGER*4	CODE	! =1 create features inside region
				! =2 create features outside region
				! =3 create features inside and outside
				!    region
C
C Functions called
C
	LOGICAL		PINREG,CLNREG,OUTCLP,CLAREG
C
C Local Variables
C
	LOGICAL		INSIDE		! starts inside
	LOGICAL		RESOLVED	! is INSIDE meaningful?
	INTEGER*4	I,J		! loop counters
	INTEGER*4	V1		! control getting vertices
	REAL		TMPXY(2)	! temporary
	REAL		X1,Y1		! temporary coordinates
	REAL*8		DLX,DLY
	REAL		DIR
C
C initialise
C
	CLPFRN=.TRUE.			! assume failure
	FVRTO=1				! first vertex to output
	FPTOUT=0			! zero in case something
	LSTINT=0			! has gone wrong
	FLG_GEOCHANGE = .TRUE.		! geometrical change
C
C branch on graphical type 
C
	GOTO (50,200,200,200,200,50,1000,1000,1000,1000,50,50),
     &					FOPAK(PAKGT)
	GOTO 1000
C
C ==============================================================
C linear feature, - check each vector in it for crossing region
C
   50	CONTINUE
C
C first check if whole feature lies along region. The algorithm below
C for this case is appalling, and this is well worth while.  In 99.99%
C of cases very little time will be wasted.
C
C check first point of feature with first point of region
C
	CALL PUTLNG(%VAL(REGPTR(1,REG)+OFFX),X1)
	CALL PUTLNG(%VAL(REGPTR(1,REG)+OFFY),Y1)
	IF (X1.EQ.FOTHIS(1).AND.Y1.EQ.FOTHIS(2)) THEN	! a possibility!
	   V1=1
	   J=REGPTR(1,REG)
C
C get some more vertices from feature
C
   60	   CONTINUE
	   CALL GETVRT(FOPAK,V1,FOLST)
C
C compare each vertex with the next point in region
C
	   DO 70, I=1,RITOP
C
C finished region?
C
	      IF (J.EQ.REGPTR(2,REG)) THEN	! at end of region
	         IF ((V1+RITOP-1).EQ.FOLST.AND.	! last lot of vertices
     &	             ((I.EQ.RITOP).OR.		! and feature not closed
     &  	      (I.EQ.(RITOP-1).AND.	! or feature closed and
     &	               FOTHIS(1).EQ.FOTHAT(1).AND. ! second last vertex
     &	               FOTHIS(2).EQ.FOTHAT(2)))) THEN
	            GOTO 1000			! inside
	         ELSE
	            GOTO 100			! have to test feature
	         ENDIF
	      ELSE
	         CALL PUTLNG(%VAL(J+OFFX),X1)
	         CALL PUTLNG(%VAL(J+OFFY),Y1)
	         IF (X1.NE.RIXY(1,I).OR.Y1.NE.RIXY(2,I)) GOTO 100
	         CALL PUTLNG(%VAL(J),J)
	      ENDIF
   70	   CONTINUE
C
C finished feature?
C
	   V1=V1+RITOP
	   IF (V1.LE.FOLST) GOTO 60
C
C region is longer than feature, so must be inside
C
	   GOTO 1000			! inside
	ENDIF
C
C initialise
C
  100	CONTINUE
C
C get some vertices from IFF file
C
	V1=1
  110	CONTINUE
	CALL GETVRT(FOPAK,V1,FOLST)
C
C if these are first vertices, find out if feature starts inside or
C outside REG
C
	IF (V1.EQ.1) THEN
	   DLX=(DBLE(RIXY(1,2)) - DBLE(FOTHIS(1)))	! for 1 pt lines
	   DLY=(DBLE(RIXY(2,2)) - DBLE(FOTHIS(2)))	! these are 0.0
	   CALL PRPLIN(DLX,DLY,LINWDTH)
C
C check whether this is a big enough increment (to avoid problems of 
C precision)
C
  111	   CONTINUE
	   TMPXY(1) = DBLE(FOTHIS(1)) + DLX*2.0
	   TMPXY(2) = DBLE(FOTHIS(2)) + DLY*2.0
	   IF ((DLX.NE.0.0.OR.DLY.NE.0.0).AND.
     &	       (ABS(TMPXY(1)-FOTHIS(1)).LT.LINWDTH).AND.
     &	       (ABS(TMPXY(2)-FOTHIS(2)).LT.LINWDTH)) THEN
	      DLX = DLX*2.0
	      DLY = DLY*2.0
	      GOTO 111
	   ENDIF
C
	   J=0
	   TMPXY(1)=FOTHIS(1)
	   TMPXY(2)=FOTHIS(2)
	   RESOLVED = .FALSE.
  120	   CONTINUE
C
C point on boundary?
C
	   IF (PINREG(TMPXY,REG,INSIDE)) THEN 
	      IF (FOLST.GT.1) THEN		! if not, assume inside
C
C try another point a bit along the first vector
C
	         J=J+1
	         TMPXY(1)=DBLE(FOTHIS(1)) + J*DLX
	         TMPXY(2)=DBLE(FOTHIS(2)) + J*DLY
	         IF (J.LT.100) GOTO 120		! only try 99 times
						! then assume inside
	      ENDIF
	   ELSE
	      RESOLVED = .TRUE.
	   ENDIF
	ENDIF
C
C copy RIXY array into IHXY array as OUTCLP use RIXY to output features.
C RITOP should never be > 200 at this point, so IHXY cannot overflow.
C This is a bit dangerous, but at the moment I can think of no process
C will have a feature in hand.
C
	DO 130, I=1,RITOP
	   IHXY(1,I)=RIXY(1,I)
	   IHXY(2,I)=RIXY(2,I)
	   IHFLG(I)=RIFLG(I)
	   IF (ZOPT) THEN
	      IF (RI_Z_COL.NE.-1) THEN
	         IHZI(I) = RIATTV(RI_Z_COL,I)
	      ELSE
	         IHZI(I) = IFF_ABSENT
	      ENDIF
	   ENDIF
  130	CONTINUE
C
	IHVO=RIVO
	IHTOP=RITOP
C
C compare every line of this feature with region
C
	DO 140, I=1,IHTOP-1
	   IF (CLNREG(IHXY(1,I),REG,INSIDE,RESOLVED)) THEN
C
C split feature at this line
C
	      LINE_VIS = IHFLG(I+1)
	      IF (OUTCLP(I+IHVO,CODE,INSIDE,.FALSE.)) THEN
	         CLPFRN=.TRUE.			! collapsed
	         GOTO 1000
	      ELSE
	         CLPFRN=.FALSE.
	      ENDIF
	   ENDIF
  140	CONTINUE
C
C finished?
C
	V1=V1+IHTOP-1			! get last point again as dealing
					! with vectors
	IF (V1.LT.FOLST) GOTO 110
C
C output last part of feature
C
	IF (.NOT.CLPFRN) THEN
	   LINE_VIS = IHFLG(IHTOP)
	   IF (OUTCLP(FOLST-1,CODE,INSIDE,.TRUE.)) CLPFRN=.TRUE.
	ENDIF
C
	GOTO 1000
C
C ===================================================================
C for arcs and circles, see if arc clips region
C
  200	CONTINUE
C
C check for arc completly outside region
C
  	IF (FOARCBX(2).LT.REGLIM(1,REG).OR.
     &	    FOARCBX(1).GT.REGLIM(2,REG).OR.
     &	    FOARCBX(4).LT.REGLIM(3,REG).OR.
     &	    FOARCBX(3).GT.REGLIM(4,REG)) GOTO 1000
C
	IF (FOAUX(TOTI).GE.0.0) THEN
	   DIR = 1.0
	ELSE
	   DIR = -1.0
	ENDIF
C
C is first point inside or outside region?
C if it lies on region boundary, move it slightly and try again
C
	DLX=LINWDTH/DBLE(FOAUX(RADI))*DIR
	J=0
  210	CONTINUE
	DLY=DBLE(FOAUX(STAI)) + J*DLX
	TMPXY(1)=DBLE(FOAUX(XCENI)) + DBLE(FOAUX(RADI))*COS(DLY)
	TMPXY(2)=DBLE(FOAUX(YCENI)) + DBLE(FOAUX(RADI))*SIN(DLY)
	IF (PINREG(TMPXY,REG,INSIDE)) THEN	! try a bit along arc
	   J=J+1
	   IF (ABS(J*DLX).GT.ABS(TOTI)) THEN
	      GOTO 1000
	   ENDIF
	   GOTO 210
	ENDIF
C
220	CONTINUE
C
C generate list of cutting angles (exit if no cuts)
C
	IF (.NOT.CLAREG(FOAUX,FOARCBX,REG,INSIDE)) GOTO 1000
C
C output series of arcs
C
	CALL OUTARCS(REG,CODE)
	CLPFRN = .FALSE.		! success
	GOTO 1000
C
C ===================================================================
C
C exit
C
 1000	CONTINUE
        RETURN
        END
