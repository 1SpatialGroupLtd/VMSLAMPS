C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-05-10 17:13:14.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION LISECS(XY)
C
***	MODULE	LISECS
***	IDENT	10MY96
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author  Clarke Brunt
C
C Coded 12.ii.76
C Typed 22.iii.76
C Version 2 coded and typed 3.vi.76
C Version 3 coded and typed 7.i.77
C Mended 4.iv.77 for -ve going lines that end on a grid intersection
C Stolen for LITES 2, 1.iii.84
C New version for LITES2, 24.ix.84
C
C Function to evaluate the sectors through which the line
C  segment ((x1,y1)->(x2,y2)) passes.
C
C The result is the number of sectors passed through, and
C  the sector numbers themselves are in SECTRS() in COMMON/SECMAP/
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:SECTOR/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:SECMAP/
C
C arguments
	REAL XY(2,2)			! two coordinates
C
C functions called
	INTEGER SECTOR
C
C w/s
	INTEGER S, SE, SP
	REAL DX, DY, TX, TY, SX, SY
	INTEGER	IX, IY
	REAL CURX,CURY
	REAL ALFAX, ALFAY
	LOGICAL*1 NOX, NOY, NULX, NULY
	LOGICAL*1 ADVX, ADVY
C
C traverses
	DX = XY(1,2)-XY(1,1)
	DY = XY(2,2)-XY(2,1)
C
C 'no change' logicals
	NULX = DX.EQ.0.0
	NULY = DY.EQ.0.0
	NOX = NULX
	NOY = NULY
C
C 'advance awaited' logicals
	ADVX = .TRUE.
	ADVY = .TRUE.
C
C 'current position'
	CURX = FLOAT(IFIX((XY(1,1)-XOFF)/XSECTW))*XSECTW + XOFF
	CURY = FLOAT(IFIX((XY(2,1)-YOFF)/YSECTW))*YSECTW + YOFF
C
C extract starting sector before we fiddle with it
	S = SECTOR(XY(1,1),XY(2,1))
	SP = S+1	! 'previous' sector anything different from S
C
C obtain sector of end point
	SE = SECTOR(XY(1,2),XY(2,2))
C
C now allow for -ve-going lines
	IF (DX.LT.0.0) THEN
	   CURX = CURX+XSECTW
	   SX = -XSECTW			! x sector width step
	   IX = -1			! x sector number step
	ELSE
	   SX = XSECTW
	   IX = 1
	ENDIF
C
	IF (DY.LT.0.0) THEN
	   CURY = CURY+YSECTW
	   SY = -YSECTW			! y sector width step
	   IY = -YRANGE			! y sector number step
	ELSE
	   SY = YSECTW
	   IY = YRANGE
	ENDIF
C
C initialise loop
	LISECS = 0
C
C supposed next sector in S - is it any different?
20	IF (S.GT.0.AND.S.LE.TOPSEC.AND.S.NE.SP) THEN
	   LISECS = LISECS+1
	   CALL PUTARR(S,%VAL(SECTRS),LISECS)
C
C prevent overflow of SECTRS, fixup for now
	   IF (LISECS.GE.TOPSEC) SE = S	! force termination
	ENDIF
C
	SP = S
	IF (S.EQ.SE) RETURN
C
C find next sector boundary
	IF (NULX) GOTO 50
	IF (.NOT.ADVX) GOTO 40
C
C look for intersection with Y grid line
	TX = CURX+SX
	ADVX = .FALSE.
	ALFAX = (TX-XY(1,1))/DX
C
C beyond end?
	IF (ALFAX.GE.1.0) NOX = .TRUE.
40	IF (NULY) GOTO 70
	IF (.NOT.ADVY) GOTO 60
C
C look for intersection with X grid line
50	TY = CURY+SY
	ADVY = .FALSE.
	ALFAY = (TY-XY(2,1))/DY
	IF (ALFAY.GE.1.0) NOY = .TRUE.
60	IF (NULX) GOTO 80
	IF (ALFAX-ALFAY) 70,110,80
C
C Y axis next (ALFAX<ALFAY)
70	CURX = TX
	CURY = XY(2,1)+ALFAX*DY
	ADVX = .TRUE.
	S = SP+IX
	GOTO 100
C
C X axis next (ALFAY<ALFAX)
80	CURX = XY(1,1)+ALFAY*DX
	CURY = TY
	S = SP+IY
C
C 'both advanced' joins
90	ADVY = .TRUE.
C
100	CONTINUE
C
C If both x and y overshot, then we seem to have missed final sector
C due to floating point errors. Add it in anyway.
	IF (NOX.AND.NOY) S = SE
	GOTO 20				! go and add in sector
C
C axis intersection next (ALFAX=ALFAY)
110	CURX = TX
	CURY = TY
	ADVX = .TRUE.
	S = SP+IX+IY
	GOTO 90
C
	END
