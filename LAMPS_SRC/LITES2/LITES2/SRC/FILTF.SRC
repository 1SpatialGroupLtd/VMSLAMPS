	SUBROUTINE FILTF
C
***	IDENT	16JN98
***	MODULE	FILTF
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	 3-July-1987
C
C To filter a linear feature; using the bunch filter algorithm
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:AUXDEF/		! auxiliary array definitions
***	PARAMETER/CMN:PACK/		! external pack definitions
***     PARAMETER/CMN:START/		! digitising procedures
C
***	COMMON/CMN:DRAWIN/
***	COMMON/CMN:DEFINE/
***	COMMON/CMN:CSTRCT/
***	COMMON/LSL$CMNFRT:FRTCOM/
***	COMMON/CMN:MASTER/
***	COMMON/LSL$CMNIFF:MD2DES/
***	COMMON/CMN:OIIH/		! output item data
***	COMMON/CMN:STRIKE/		! found objects, etc.
***	COMMON/CMN:TRANSFORM/
***	COMMON/CMN:VARIAT/
C
	INTEGER 	VV1,VV2		! vertices
	INTEGER		NVRTS		! number of vertices wanted
	INTEGER		I
	REAL		TOLE(3)
	REAL		LASTPT(2)
	LOGICAL		PENDNG
	LOGICAL		HADBUN
	LOGICAL		HADFST
	INTEGER		OPER
C
C initialise filtering
C
	DO 5, I= 1,3			! get everything into IFF units
	   TOLE(I) = BUNCHMM(I)*SCLFRT
5	CONTINUE
C
	CALL BUNCH_INIT(TOLE,LINWDTH,1.0)
	PENDNG = .FALSE.
	HADBUN = .FALSE.
	HADFST = .FALSE.
	GOT_FILT_FST = .FALSE.
C
C set up attribute arrays for ADDPTS
C
	OPER = DEFINITION(P_FILTER)
	IF (OPER.EQ.0) OPER = DEFINITION(P_OTHER)
C
	CALL LSTARR(OPER,CONATT,COATTC,COATTV,.FALSE.)
C
	I = 0
	IF (.NOT.IMNVRT) THEN
	   CALL ADDPTS(1,IMCXY,.FALSE.)
	   HADFST = .TRUE.
	   I = I+1				! don't add IMVRT
	ENDIF
C
	IF (IHVRT.GE.IMVRT+I) THEN
	   VV1 = IMVRT+I
	   VV2 = IHVRT
	   NVRTS = IABS(VV2-VV1)+1	! number of vertices
C
C Get some vertices
10	   CALL GETVRT(IHPAK,VV1,VV2)
C
C add them to output item
	   DO 50 I=1,RITOP
	      IF ((RIFLG(I).AND.1).EQ.0) THEN
C
C finish BUNCH without including last point
	         IF (HADBUN) THEN
	            CALL BUNCH_POINT(LASTPT(1),LASTPT(2),2)
	            CALL BUNCH_INIT(TOLE,LINWDTH,1.0)
	            HADBUN = .FALSE.
	         ENDIF
C
C add last point explicitly
	         IF (PENDNG) THEN
	            CALL ADDPTS(1,LASTPT,.FALSE.)
	            PENDNG = .FALSE.
	         ENDIF
C
C flush out feature so far, as invisible segment to follow
	         CALL FLUSH(1)
	         OIENDS = 0
C
C and explicitly add this point
	         CALL ADDPTS(1,RIXY(1,I),.FALSE.)
	         PENDNG = .FALSE.
	         HADFST = .TRUE.
	      ELSE
C
C visible segment to this point
 	         IF (PENDNG) THEN
	            IF (HADFST) THEN
	               CALL BUNCH_POINT(LASTPT(1),LASTPT(2),0)
	               HADBUN = .TRUE.
	            ELSE
	               CALL ADDPTS(1,LASTPT,.FALSE.)
	               HADFST = .TRUE.
	            ENDIF
	            PENDNG = .FALSE.
	         ENDIF
C
C and leave current point pending
	         LASTPT(1) = RIXY(1,I)
	         LASTPT(2) = RIXY(2,I)
	         PENDNG = .TRUE.
	      ENDIF
50	   CONTINUE
C
C have we finished?
	   NVRTS = NVRTS-RITOP
	   IF (NVRTS.GT.0) THEN		! still more to do
	      VV1 = VV1+RITOP
	      GOTO 10			! round again
	   ENDIF
	ENDIF
C
C tidy up filtering
C
	IF (.NOT.IHNVRT) THEN
C
C 'between vertex' point needed at end
C
C finish BUNCH including last point
 	   IF (PENDNG) THEN
	      IF (HADFST) THEN
	         CALL BUNCH_POINT(LASTPT(1),LASTPT(2),1)
	      ELSE
	         CALL ADDPTS(1,LASTPT,.FALSE.)
	      ENDIF
	   ENDIF
C
C add cursor explicitly
	   CALL ADDPTS(1,IHCXY,.FALSE.)
	ELSE
C
C no 'between vertex' point at end
C
C finish BUNCH without including last point
	   IF (HADBUN) CALL BUNCH_POINT(LASTPT(1),LASTPT(2),2)
C
C add last point explicitly
	   IF (PENDNG) CALL ADDPTS(1,LASTPT,.FALSE.)
	ENDIF
C
	RETURN
	END
