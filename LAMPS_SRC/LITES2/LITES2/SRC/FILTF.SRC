	SUBROUTINE FILTF
C
***	IDENT	21MY91
***	MODULE	FILTF
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	 3-July-1987
C
C Description
C
C To filter a linear feature; using the bunch filter algorithm
C NOTE: invisible lines will be lost
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:AUXDEF/		! auxiliary array definitions
***	PARAMETER/CMN:PACK/		! external pack definitions
***     PARAMETER/CMN:START/		! digitising procedures
C
***	COMMON/CMN:DRAWIN/
***	COMMON/CMN:DEFINE/
***	COMMON/CMN:CSTRCT/
***	COMMON/LSL$CMNFRT:FRTCOM/
***	COMMON/CMN:MASTER/
***	COMMON/LSL$CMNIFF:MD2DES/
***	COMMON/CMN:OIIH/		! output item data
***	COMMON/CMN:STRIKE/		! found objects, etc.
***	COMMON/CMN:TRANSFORM/
***	COMMON/CMN:VARIAT/
C
C Local Variables
C
	INTEGER 	VV1,VV2		! vertices
	INTEGER		NVRTS		! number of vertices wanted
	INTEGER		FLG		! save for ENDS flag
	LOGICAL*1 	REV		! copying backwards
	INTEGER		I
	REAL		TOLE(3)
	REAL		FSTPT(2)	! first point
	REAL		LASTPT(2)
	LOGICAL		HADFST
	LOGICAL		STRTED
	INTEGER		OPER
C
C initialise filtering
C
	DO 5, I= 1,3			! get everything into IFF units
	   TOLE(I) = BUNCHMM(I)*SCLFRT
5	CONTINUE
C
	CALL BUNCH_INIT(TOLE,LINWDTH,1.0)
	STRTED = .FALSE.
	HADFST = .FALSE.
	GOT_FILT_FST = .FALSE.
C
C set up attribute arrays for ADDPTS
C
	OPER = DEFINITION(P_FILTER)
	IF (OPER.EQ.0) OPER = DEFINITION(P_OTHER)
C
	CALL LSTARR(OPER,CONATT,COATTC,COATTV,.FALSE.)
C
	I = 0
	IF (.NOT.IMNVRT) THEN
	   FSTPT(1) = IMCXY(1)
	   FSTPT(2) = IMCXY(2)
	   HADFST = .TRUE.
	   CALL BUNCH_POINT(IMCXY(1),IMCXY(2),0)
	   STRTED = .TRUE.
	   I = I+1				! don't add IMVRT
	ENDIF
	IF (IHVRT.GE.IMVRT+I) THEN
	   VV1 = IMVRT+I
	   VV2 = IHVRT
	   REV = (VV2.LT.VV1)		! we are going backwards
	   NVRTS = IABS(VV2-VV1)+1	! number of vertices
	   FLG = 1			! assume visible to first point
C
C Get some vertices
10	   CALL GETVRT(IHPAK,VV1,VV2)
C
C save first point to be output
	   IF (.NOT.HADFST) THEN
	      IF (REV) THEN
	         FSTPT(1) = RIXY(1,RITOP)
	         FSTPT(2) = RIXY(2,RITOP)
	      ELSE
	         FSTPT(1) = RIXY(1,1)
	         FSTPT(2) = RIXY(2,1)
	      ENDIF
	      HADFST = .TRUE.
	   ENDIF
C
C add them to output item
	   IF (REV) THEN
C
C deal specially with first point
	      IF ((FLG.AND.1).EQ.0) THEN
	         IF (STRTED) THEN
	            CALL BUNCH_POINT(RIXY(1,I),RIXY(2,I),2)
	            CALL BUNCH_INIT(TOLE,LINWDTH,1.0)
	         ELSE
	            STRTED = .TRUE.
	         ENDIF
	         CALL FLUSH(1)
	         OIENDS = 0
	         CALL BUNCH_POINT(RIXY(1,RITOP),RIXY(2,RITOP),0)
	      ENDIF
C
C rest of points
	      DO 40 I=RITOP-1,1,-1
	         FLG = RIFLG(I+1)
	         IF ((FLG.AND.1).EQ.0) THEN	! finish filtering
	            IF (STRTED) THEN
	               CALL BUNCH_POINT(RIXY(1,I),RIXY(2,I),2)
	               CALL BUNCH_INIT(TOLE,LINWDTH,1.0)
	            ELSE
	               STRTED = .TRUE.
	            ENDIF
	            CALL FLUSH(1)
	            OIENDS = 0
	         ENDIF
	         CALL BUNCH_POINT(RIXY(1,I),RIXY(2,I),0)
40	      CONTINUE
	      FLG = RIFLG(I)			! preserve flag
	      LASTPT(1) = RIXY(1,1)
	      LASTPT(2) = RIXY(2,1)
	   ELSE
	      DO 50 I=1,RITOP
	         FLG = RIFLG(I)
	         IF ((FLG.AND.1).EQ.0) THEN	! finish filtering
	            IF (STRTED) THEN
	               CALL BUNCH_POINT(RIXY(1,I),RIXY(2,I),2)
	               CALL BUNCH_INIT(TOLE,LINWDTH,1.0)
	            ELSE
	               STRTED = .TRUE.
	            ENDIF
	            CALL FLUSH(1)
	            OIENDS = 0
	         ENDIF
	         CALL BUNCH_POINT(RIXY(1,I),RIXY(2,I),0)
50	      CONTINUE
	      LASTPT(1) = RIXY(1,RITOP)
	      LASTPT(2) = RIXY(2,RITOP)
	   ENDIF
C
C have we finished?
	   NVRTS = NVRTS-RITOP
	   IF (NVRTS.GT.0) THEN		! still more to do
	      IF (REV) THEN
	         VV1 = VV1-RITOP
	      ELSE
	         VV1 = VV1+RITOP
	      ENDIF
	      GOTO 10			! round again
	   ENDIF
	ENDIF
C
C tidy up filtering
C
	IF (.NOT.IHNVRT) THEN
	   LASTPT(1) = IHCXY(1)
	   LASTPT(2) = IHCXY(2)
	   CALL BUNCH_POINT(IHCXY(1),IHCXY(2),1)  ! add cursor
	ELSE
	   CALL BUNCH_POINT(IHCXY(1),IHCXY(2),2)  ! don't add cursor
	ENDIF
C
C if we have just filtered a closed feature, move the last point onto
C the first that was output (saved in ADDPTS)
C
	IF (FSTPT(1).EQ.LASTPT(1).AND.FSTPT(2).EQ.LASTPT(2)) THEN
	   COIXY(1,COIIND) = FILTFST(1)
	   COIXY(2,COIIND) = FILTFST(2)
	ENDIF
C
	RETURN
	END
