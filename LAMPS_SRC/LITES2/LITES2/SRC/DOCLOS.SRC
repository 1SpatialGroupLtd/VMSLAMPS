C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-12-07 14:08:32.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE DOCLOS
C
***	IDENT   07DE94
***	MODULE  DOCLOS
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Written					CCB	11-FEB-1985
C
C	LITES2 cartographic editor CLOSE command.
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:END/
***	PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:PACK/
***	PARAMETER/CMN:STAPAR/
***     PARAMETER/CMN:START/		! digitising procedures
C
***	COMMON/CMN:CSTRCT/
***	COMMON/CMN:DOUT/		! cmd dec. output
***	COMMON/CMN:GLOBAL/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:STATE/
***	COMMON/CMN:STRIKE/
C
C functions called
	LOGICAL	STRTER
	LOGICAL	RUBISH
C
	EXTERNAL	MOAN,NASTY
C
C local variables
	REAL	XY(3),V1,V2,X,Y,R
	LOGICAL	BRIDGE
	INTEGER	SECN
	REAL	TMP1,TMP2
	INTEGER	TMP1I,TMP2I
	EQUIVALENCE (TMP1,TMP1I),(TMP2,TMP2I)
	REAL	Z1,Z2
	REAL		CXY(3)		! current position
	INTEGER		CZI		! Z value of position (as
					! INTEGER)
	EQUIVALENCE	(CXY(3),CZI)	! equivalenced
	REAL		THISXY(3)	! position to move to
	INTEGER		THISZI		! Z value of position (as
					! INTEGER)
	EQUIVALENCE	(THISXY(3),THISZI) ! equivalenced
C
C save current cursor position
	CXY(1) = CSXY(1)
	CXY(2) = CSXY(2)
	CZI = CSZI
C
C save secondary command index
	SECN = DSECN
C
C test if bridging from the end of a feature
	BRIDGE = .FALSE.
	IF (SINDEX.EQ.STATE_CONSTRUCT .AND.
     &	    (NDMODE.EQ.END_BRIDGE.OR.NDMODE.EQ.END_BRIDGE_CLOSE)) THEN
	   IF (IHVRT.EQ.IHLST.OR.(IHVRT.EQ.1.AND.IHNVRT)) THEN
	      BRIDGE = .TRUE.
C
C re-find the object in hand
	      IF (.NOT.FO.OR.FOPAK(PAKPNF).NE.IHPAK(PAKPNF).OR.
     &		FOPAK(PAKMAP).NE.IHPAK(PAKMAP) ) THEN
	         LASPAK = IHPAK(PAKLNK)
	         DSECN = 5		! simulate a SEARCH LAST
	         CALL DOSEAR
	         IF (MOANED) GOTO 9999
	      ENDIF
	   ENDIF
	ENDIF
C
C get position to which we are moving the cursor
	IF (BRIDGE) THEN
	   IF (IHVRT.EQ.IHLST) THEN
	      THISXY(1) = FOTHIS(1)
	      THISXY(2) = FOTHIS(2)
	      CALL PUTLNG(FOTHIS(3),THISZI)
	   ELSE
	      THISXY(1) = FOTHAT(1)
	      THISXY(2) = FOTHAT(2)
	      CALL PUTLNG(FOTHAT(3),THISZI)
	   ENDIF
	ELSE
	   THISXY(1) = COTHIS(1,1)
	   THISXY(2) = COTHIS(2,1)
	   CALL PUTLNG(COTHISZ(1),THISZI)
	ENDIF
C
	GOTO (100,200),SECN
C
C Secondary command number out of range
	IF (SECN.EQ.0) GOTO 100	! default to NORMAL
	CALL MSGCMD(NASTY,MSG_ERRSECIND)
	GOTO 9998
C
C Secondary command NORMAL
C
100	IF (BRIDGE) THEN
	   IF (IHVRT.EQ.IHLST) THEN
	      CALL DOFIRS
	   ELSE
	      CALL DOLAST
	   ENDIF
	   NDMODE = END_BRIDGE_CLOSE
	ELSE
	   CSXY(1) = THISXY(1)		! move cursor to first point
	   CSXY(2) = THISXY(2)		!   of construction
	   IF (ZOPT) CALL PUTLNG(THISZI,CSXY(3))
	   CSSTIL = .FALSE.		! cursor has moved
	   FONLIN = .FALSE.		! and is not now on a feature
	   POSCMD = .TRUE.		! have positioned cursor
	ENDIF
	GOTO 9999
C
C Secondary command SQUARE
C
200	V1 = CSXY(1)-CONXY(1,CONIND)
	V2 = CSXY(2)-CONXY(2,CONIND)
	X = (CSXY(2)-THISXY(2))*V1*V2
	Y = (CSXY(1)-THISXY(1))*V1*V2
	V1 = V1*V1
	V2 = V2*V2
	R = V1+V2
	IF (R.EQ.0.0) THEN
	   CALL MOAN(MSG_NOALIGN)
	   GOTO 9998
	ENDIF
	XY(1) = (THISXY(1)*V1-X+CSXY(1)*V2)/R
	XY(2) = (THISXY(2)*V2-Y+CSXY(2)*V1)/R
	IF (RUBISH(XY)) THEN
	   CALL MOAN(MSG_BADPOS)
	   GOTO 9998
	ENDIF
C
C interpolate a new Z for this point
	IF (ZOPT) THEN
	   CALL GETZ_LIST(Z1,CONLST(CONIND))
	   CALL PUTLNG(CSXY(3),Z2)
	   CALL LINEAR_INTERPL(CONXY(1,CONIND),CSXY,XY,Z1,Z2,CSXY(3))
	ENDIF
C
	CSXY(1) = XY(1)			! move cursor to new point
	CSXY(2) = XY(2)
	CSSTIL = .FALSE.		! cursor has moved
	FONLIN = .FALSE.		! and is not now on a feature
	IF (STRTER(START_ADD,START_VISIBLE)) GOTO 9998	! add the point
	IF (BRIDGE) THEN
	   IF (IHVRT.EQ.IHLST) THEN
	      CALL DOFIRS
	   ELSE
	      CALL DOLAST
	   ENDIF
	   NDMODE = END_BRIDGE_CLOSE
	ELSE
	   CSXY(1) = THISXY(1)		! move cursor to first point
	   CSXY(2) = THISXY(2)		!   of construction
	   IF (ZOPT) CALL PUTLNG(THISZI,CSXY(3))
	   POSCMD = .TRUE.		! have positioned cursor
	ENDIF
	GOTO 9999
C
C error exit
9998	CALL IGNCMD
C
9999	RETURN
	END
