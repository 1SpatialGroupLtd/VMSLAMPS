C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-05-10 17:10:00.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE CHCK_CPTS(NSETS,OK_COUNT,COLUMN,CPXY,ENTRY,SDIFFS)
C
***	IDENT	10MY96
***	MODULE	CHCK_CPTS
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	 29-Mar-1988
C
C to find which sets of observations satisfy tolerances for edge setup
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:EFNLUN/
***	PARAMETER/CMN:MOANMESS/
C
***	COMMON/CMN:MAPS/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:PTOLERANCE/
***	COMMON/CMN:WORKS/
C
C Arguments
C
	INTEGER*4	NSETS		! number of sets
	INTEGER		OK_COUNT	! running count of successes
	INTEGER		COLUMN(NSETS)	! set numbers to test
	REAL	  	CPXY(2,4,2*MAX_EDGE_SET) ! computed corners
	INTEGER		ENTRY(*)	! bit map with this group of sets
	REAL		SDIFFS(*)	! sum of ranges for this group
C
C Local Variables
C
	INTEGER		SET
	INTEGER		I
	REAL		RANGES(4)
	REAL		MINX,MINY
	REAL		MAXX,MAXY
	REAL		X,Y
	REAL		SUM_RANGE
	CHARACTER*2	CRNR_NAME(4)
	DATA		CRNR_NAME/'NW','SW','SE','NE'/
C
	if (diaopt) then
	   call writef
	   call expand ('Testing sets %I3',column(1))
	   do 2,i=2,nsets
	      call append(', %I3',column(i))
   2	   continue
	   call ttwstr
	endif
C
	DO 100, I=1,4
	   MINX = CPXY(1,I,COLUMN(1))
	   MINY = CPXY(2,I,COLUMN(1))
	   MAXX = MINX
	   MAXY = MINY
C
C include other sets in range	
	   DO 50, SET = 2,NSETS	
	      X = CPXY(1,I,COLUMN(SET))
	      Y = CPXY(2,I,COLUMN(SET))
	      MINX = MIN(MINX,X)
	      MINY = MIN(MINY,Y)
	      MAXX = MAX(MAXX,X)
	      MAXY = MAX(MAXY,Y)
   50	   CONTINUE
C
C calculate range
	   RANGES(I) = SQRT((MAXX-MINX)**2 + (MAXY-MINY)**2)
C
	   if (diaopt) 
     &	      call writef(
     &	         'Range of points in %S corner is %G0.5 table counts'
     &	            //' (%G0.5 table mm)',
     &	            crnr_name(i),ranges(i),ranges(i)*table_counts)
C
C if this is greater than allowable distance at one corner, then
C this group of sets of observations are no good
	   IF (RANGES(I)*TABLE_COUNTS.GT.EDGE_SET_TOL_MAX) THEN
	      if (diaopt) 
     &	         call writef('Set rejected with range of %G0.5 table mm',
     &	                     ranges(i)*table_counts)
	      GOTO 999
	   ENDIF
  100	CONTINUE
C
C sum ranges, and see if total is within limit
	SUM_RANGE = RANGES(1)+RANGES(2)+RANGES(3)+RANGES(4)
	   if (diaopt) 
     &	      call writef(
     &	      'Sum of ranges of points is %G0.5 table counts'
     &	              //' (%G0.5 table mm)',
     &	            sum_range,sum_range*table_counts)
	IF (SUM_RANGE*TABLE_COUNTS.GT.EDGE_SET_TOL_SUM) THEN
	   if (diaopt) 
     &	      call writef(
     &	         'Set rejected with sum of ranges of %G0.5 table mm',
     &	                     sum_range*table_counts)
	   GOTO 999
	ENDIF
C
C this group is acceptable, so record it
	OK_COUNT = OK_COUNT+1
	SDIFFS(OK_COUNT) = SUM_RANGE
	ENTRY(OK_COUNT) = 0
	DO 150, SET = 1,NSETS
	   ENTRY(OK_COUNT) = IBSET(ENTRY(OK_COUNT),COLUMN(SET))
  150	CONTINUE
C
  999	CONTINUE
	RETURN
	END
