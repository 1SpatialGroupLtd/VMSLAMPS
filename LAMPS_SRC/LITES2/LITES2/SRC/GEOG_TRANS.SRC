        LOGICAL FUNCTION GEOG_TRANS(
     &	         COORDI,SYSIN, ZONEIN, INPAR, UNITIN, 
     &	         COORDO,SYSOUT,ZONEOUT,OUTPAR,UNITOUT)
C
***	MODULE GEOG_TRANS
***	IDENT	10MY96
C
C Copyright Laser-Scan Laboratories Ltd.,Cambridge,England
C 
C Author    Ron Russell				 24-Aug-1988
C
C       This function transforms a coordinate pair from one projection
C	to another. It returns .TRUE. for success
C
C	It operates on R*8 values
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:EFNLUN/
***	PARAMETER/CMN:MOANMESS/
C
***	COMMON/CMN:MAPS/
***	COMMON/LSL$CMNIFF:MD2DES/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:TRANSFORM/
C
C arguments
C
C (input)
	REAL*8		COORDI(2)	! coordinate pair to transform
	INTEGER		SYSIN		! projection code
	INTEGER		ZONEIN		! zone for input
	REAL*8		INPAR(15)	! projection parameters
	INTEGER		UNITIN		! units of input coordinate
C
C (output)
	REAL*8		COORDO(2)	! coordinate pair to transform
	INTEGER		SYSOUT		! projection code
	INTEGER		ZONEOUT		! zone for output
	REAL*8		OUTPAR(15)	! projection parameters
	INTEGER		UNITOUT		! units of output coordinate
C
C w/s
	INTEGER		IERR
	CHARACTER*30	PROJ
	CHARACTER*60	ERR
C
	EXTERNAL	TRANS_EXCP	! exception handler
C
C functions
	INTEGER		SIGCHS
	LOGICAL		CALLR
	LOGICAL		SETUP_GEOG
C
C assume success 
	GEOG_TRANS=.TRUE.
C
C is map descriptor set up correctly? 
	IF (.NOT.MD_OK) THEN
	   CALL MOAN(MSG_NOMDSETUP)
	   GOTO 900
	ENDIF
C
C is shared image mapped yet?
	IF (.NOT.GEOG_SETUP)  GEOG_SETUP = SETUP_GEOG()
	IF (.NOT.GEOG_SETUP) GOTO 900
C
C initilaise GCTPLIB, if not already initialised
	IF (.NOT.GEOG_INI) THEN
C
C initialise arguments for call of GTRN$0 (in GCTPLIB) to specify
C the projection arguments for the LITES2 coordinate system
	   CALL CALLR(FIRSTMD2ARR,LITES2SYS,LITES2ZONE,LITES2PAR,
     &	              LITES2UNIT,%VAL(GEOG_ADDRESSES(XGCTP_PARINIT)))
C
	   GEOG_INI = .TRUE.
	ENDIF
C
C have we just had this point?
C NOTE: if we are transforming on the fly, cannot do this test because
C       we may be transforming the same point into a different projection.
C       When not transforming on the fly - always transforming to and
C       from LITES2 space and GEOGRAPHICALS
C
	IF ((.NOT.DO_FLY_TRANS) .AND.
     &	    (COORDI(1).EQ.PROJXY(1).AND.COORDI(2).EQ.PROJXY(2))) THEN
	   COORDO(1) = GEOGS(1)
	   COORDO(2) = GEOGS(2)
	   GOTO 999
	ENDIF
C
C set up exception handler
	CALL LIB$ESTABLISH(TRANS_EXCP)
	ITREX = .FALSE.
C
	IF (CALLR(COORDI,SYSIN, ZONEIN, INPAR, UNITIN, MAPSCL(0),
     &	               COORDO,SYSOUT,ZONEOUT,OUTPAR,UNITOUT,MAPSCL(0),
     &	               IERR,%VAL(GEOG_ADDRESSES(XGCTP_TRANS)))) THEN
C
C if there has not been an exception, then we have a result
	   IF (.NOT.ITREX) THEN
	      GEOGS(1) = COORDO(1)
	      GEOGS(2) = COORDO(2)
	      IF (.NOT.DO_FLY_TRANS) THEN
	         PROJXY(1) = COORDI(1)
	         PROJXY(2) = COORDI(2)
	      ENDIF
	      GOTO 999
	   ENDIF
C 
	ELSE
C
C get error message
	   CALL CALLR(IERR,PROJ,ERR,%VAL(GEOG_ADDRESSES(XGTRNERR)))
	   CALL MOAN(MSG_STRING,'*** '//ERR(1:SIGCHS(ERR)))
	   IF (IERR.GT.10) THEN
	      CALL INFORM(MSG_GCTPLIBPROJ,PROJ(1:SIGCHS(PROJ)))
	   ELSE
	      CALL INFORM(MSG_GCTPLIBCALL)
	   ENDIF
	ENDIF
C
C error exit
  900	CONTINUE
	PROJXY(1) =  -1E38
	PROJXY(2) =  -1E38
	GEOG_TRANS = .FALSE.
C
  999	RETURN
   	END
