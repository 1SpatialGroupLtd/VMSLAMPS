C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-09-23 10:38:24.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE SETANNO(SET)
C
***	MODULE	SETANNO
***	IDENT	23SE94
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author Clarke Brunt			27-October-1988
C
C To set up drawing attributes for annotations
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:ACS/
***	PARAMETER/CMN:GKSPAR/
***	COMMON/CMN:DRAWIN/
***	COMMON/LSL$CMNFRT:FRTACD/
***	COMMON/CMN:LABELS/
***	COMMON/CMN:MAPS/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:OVERLAY/
***	COMMON/LSL$CMNFRT:PATDEF/
***	COMMON/CMN:PLOT/
***	COMMON/LSL$CMNFRT:SRISCL/
***	COMMON/CMN:SETUP/
***	COMMON/CMN:WORKS/
C
C argument
	LOGICAL	SET			! set, else clear
C
C workspace
	INTEGER	WKID,DISP
	SAVE	WKID
	REAL	NX,NY
	REAL	LIM(4)
	LOGICAL	SAV_DRAW_PRIORITY
	LOGICAL	SAV_SETUP
	REAL	SAV_PLTSCL		! save of values set by SRIUNI
	REAL	SAV_SRISCL
	REAL	SAV_ENLSCL
	REAL	SAV_SRIROT
	REAL	SAV_SRIWID
	REAL	SAV_SCLDIS
	REAL	SAV_NOMLW
	SAVE	SAV_PLTSCL,SAV_SRISCL,SAV_SRIROT,SAV_ENLSCL,SAV_SRIWID
	SAVE	SAV_SETUP,SAV_SCLDIS,SAV_NOMLW,SAV_DRAW_PRIORITY
	REAL	PLOT_RANGE(2)
	REAL	SAV_WINDOW(4)
	SAVE	SAV_WINDOW
	LOGICAL*1	SAV_HWTOPT
	SAVE		SAV_HWTOPT
	REAL	RANGEX,RANGEY
	REAL	TMPSCL
	REAL	LINE_WIDTH
C
	IF (.NOT.SET) GOTO 5000
	SAV_SCLDIS = SCLDIS
	IF (ANNODISP.EQ.0) THEN
	   DISP = OVERLAY_WORKSTATION
	ELSE
	   DISP = ANNODISP
	ENDIF
	WKID = DISP
	IF (PLOT_ON) WKID = PLOT_WKID
	IF (PLOT_ON) THEN
	   CALL SETUP_PLOT
	   SAV_NOMLW = NOMLW
	   NOMLW = PLOT_LWIDTH
	   SAV_HWTOPT = HWTOPT
	   HWTOPT = PLOT_HWT
	   CALL GSVP(1,0.0,NDCX,0.0,NDCY)
	   IF (ANNODISP.LE.2) THEN
	      CALL CPYPAK(4,WINDOW,SAV_WINDOW)
C
C duplicate here the treatment of WINDOW from DODRAW and FLVIEW, so that
C annotations end up in the same place as the actual data
C
C restore saved image window if got one
	      IF (SETUP.AND.HADIMG) CALL CPYPAK(4,WINIMG,WINDOW)
C
C if a transformation is set up (IMAGE SETUP) then transform the corners
C of WINDOW into image/screen space, unless we already have an image
C window saved from last time,
	      IF (SETUP.AND..NOT.HADIMG) CALL TRXWIN(.TRUE.)
C
	      RANGEX = WINDOW(2)-WINDOW(1)
	      RANGEY = WINDOW(4)-WINDOW(3)
	      IF (PLOT_RATIO.GT.0.0) THEN
	         SCLDIS = SCLFRT/PLOT_RATIO
	      ELSEIF (PLOT_SCALE.GT.0.0.AND.MAPSCL(0).GT.0) THEN
	         SCLDIS = SCLFRT*PLOT_SCALE/MAPSCL(0)
	      ELSE		! must be autoscale
	         SCLDIS = MAX(RANGEX/(PLOT_VIEW(2)-PLOT_VIEW(1)),
     &			      RANGEY/(PLOT_VIEW(4)-PLOT_VIEW(3)))/1000.0
	      ENDIF
C
C calculate IFF range required to fill the plot area
	      PLOT_RANGE(1) = (PLOT_VIEW(2)-PLOT_VIEW(1))*SCLDIS*1000.0
	      PLOT_RANGE(2) = (PLOT_VIEW(4)-PLOT_VIEW(3))*SCLDIS*1000.0
C
C see if will fit in WINDOW
	      IF (RANGEX.GT.PLOT_RANGE(1)) THEN
	         WINDOW(2) = WINDOW(1)+PLOT_RANGE(1)
	      ELSE
	         PLOT_VIEW(2) = PLOT_VIEW(1)+RANGEX/SCLDIS/1000.0
	         PLOT_VIEW(2) = MIN(PLOT_SCRSZX,PLOT_VIEW(2))
	      ENDIF
	      IF (RANGEY.GT.PLOT_RANGE(2)) THEN
	         WINDOW(4) = WINDOW(3)+PLOT_RANGE(2)
	      ELSE
	         PLOT_VIEW(4) = PLOT_VIEW(3)+RANGEY/SCLDIS/1000.0
	         PLOT_VIEW(4) = MIN(PLOT_SCRSZY,PLOT_VIEW(4))
	      ENDIF
C
C calculate appropriate workstation window
	      RANGEX = LIMITS(2)-LIMITS(1)
	      RANGEY = LIMITS(4)-LIMITS(3)
	      CALL GSWKWN(PLOT_WKID,
     &		(WINDOW(1)-LIMITS(1))*NDCX/RANGEX,
     &		(WINDOW(2)-LIMITS(1))*NDCX/RANGEX,
     &		(WINDOW(3)-LIMITS(3))*NDCY/RANGEY,
     &		(WINDOW(4)-LIMITS(3))*NDCY/RANGEY )
C
C if a transformation is set up (IMAGE SETUP) then transform the corners
C of WINDOW from image/screen space back to IFF space
	      IF (SETUP) CALL TRXWIN(.FALSE.)
	   ENDIF
	   CALL GSWKVP(PLOT_WKID,
     &		PLOT_VIEW(1),PLOT_VIEW(2),PLOT_VIEW(3),PLOT_VIEW(4))
	   IF (PLOT_CLIP.EQ.0) CALL GSCLIP(GNCLIP)
	ENDIF
CCC
CCC now we might have refresh in all displays
CCC	IF (ANNODISP.LE.2) CALL STDINI	! cancel refresh mode
	CALL STDINI			! cancel refresh mode
	IF (ANNODISP.NE.0.OR.PLOT_ON) THEN
	   IF (WKAC(1)) CALL GDAWK(1)
	   IF (WKAC(2)) CALL GDAWK(2)
	   CALL GACWK(WKID)			! plotter or display on
	   IF (ANNODISP.GT.2) THEN
	      IF (DISPLAY_HADLIM(ANNODISP)) THEN
	         LIM(1) = DISPLAY_LIMITS(1,ANNODISP)
	         LIM(2) = DISPLAY_LIMITS(2,ANNODISP)
	         LIM(3) = DISPLAY_LIMITS(3,ANNODISP)
	         LIM(4) = DISPLAY_LIMITS(4,ANNODISP)
	      ELSE
	         LIM(1) = LIMITS(1)
	         LIM(2) = LIMITS(2)
	         LIM(3) = LIMITS(3)
	         LIM(4) = LIMITS(4)
	      ENDIF
	      IF (PLOT_ON) THEN
	         SCLDIS = MAX((LIM(2)-LIM(1))/(PLOT_VIEW(2)-PLOT_VIEW(1)),
     &			      (LIM(4)-LIM(3))/(PLOT_VIEW(4)-PLOT_VIEW(3)))/1000
	      ELSE
	         SCLDIS = MAX((LIM(2)-LIM(1))/DISPLAY_SIZX(ANNODISP),
     &			      (LIM(4)-LIM(3))/DISPLAY_SIZY(ANNODISP))/1000
	      ENDIF
	      CALL GSWN(1,LIM(1),LIM(2),LIM(3),LIM(4))
	      NY = (LIM(4)-LIM(3))/(LIM(2)-LIM(1))
	      NX = 1.0
	      IF (NY.GT.1.0) THEN
	         NX = 1.0/NY
	         NY = 1.0
	      ENDIF
	      CALL GSVP(1,0.0,NX,0.0,NY)
	      CALL GSWKWN(WKID,0.0,NX,0.0,NY)
	   ENDIF
	ENDIF
C
	TMPSCL = SCLDIS
	IF (PLOT_ON.AND.PLOT_ANNOSCR) TMPSCL = SAV_SCLDIS
	ANNOOFFX = ANNOMMOFFX * TMPSCL
	ANNOOFFY = ANNOMMOFFY * TMPSCL
	ANNOSIZ  = ANNOMMSIZ  * TMPSCL
	ATTROFFY = ANNOSIZ + ANNOSIZ*ABS(OFFPROP)
C
C save settings from CMN:SRISCL, and reset them to allow characters
C in labels to be drawn with a sensible number of points in arcs
C and curves when zoomed in, and get line width correct
	SAV_PLTSCL = PLTSCL
	SAV_SRISCL = SRISCL
	SAV_ENLSCL = ENLSCL
	SAV_SRIROT = SRIROT
	SAV_SRIWID = SRIWID
	CALL SRIUNI(1.0/SCLDIS,SRISCL,SRIROT,1.0/SCLDIS)
CCCC	CALL SRISLW(NOMLW*SCLDIS/SCLFRT)
	CALL SRISLW(NOMLW)
C
C save setting of SETUP, and clear it if drawing into subsidiary window
	SAV_SETUP = SETUP
	IF (ANNODISP.GT.2) SETUP = .FALSE.
C
C only ever draw things once
	SAV_DRAW_PRIORITY = DRAW_PRIORITY
	DRAW_PRIORITY = .FALSE.
C
C Reset pattern definition
	CURPAT = 0
C
	IF (ANNOVER.NE.0) THEN
C
C select bit planes for this overlay
C NB these must be cancelled after use
	   ANNOTATION_OFFSET = OVERLAY_OFFSET(ANNOVER,DISP)
	   ANNOTATION_MASK = 0
	   CALL LIB$INSV(-1,
     &		OVERLAY_OFFSET(ANNOVER,DISP),
     &		OVERLAY_PLANES(ANNOVER,DISP),ANNOTATION_MASK)
	   CALL LSG_PLANE_SELECT(WKID,ANNOTATION_MASK)
	   CALL LSG_PLANE_OFFSET(WKID,ANNOTATION_OFFSET)
	   IF (.NOT.PLOT_ON) THEN
C
C WKID is not > 2 so can test WKAC(3-WKID)
	      IF (ANNODISP.EQ.0.AND.OVERLAY_SHARE.AND.WKAC(3-WKID)) THEN
	         CALL LSG_PLANE_SELECT(3-WKID,ANNOTATION_MASK)
	         CALL LSG_PLANE_OFFSET(3-WKID,ANNOTATION_OFFSET)
	      ENDIF
	   ENDIF
C
C select colour for blanking out texts for this overlay
	   OVERLAY_BLANK_COL = OVERLAY_BLANK(ANNOVER,DISP)
	ELSE
C
	   OVERLAY_BLANK_COL = -1	! force use of ENABLE BLANK colour
	   ANNOTATION_MASK = -1		! write into all planes
	   ANNOTATION_OFFSET = 0
	ENDIF
C
C set polyline and fill area attributes
C (do not draw in ANNOCOL -1, use 1 instead)
	CALL GSPLCI(ABS(ANNOCOL))
C
C line width
	LINE_WIDTH = 1.0
	IF (THKOPT) LINE_WIDTH = ANNOWIDTH/NOMLW
C
C width 0 in FRT means 'normal width' (shouldn't be negative)
	IF (LINE_WIDTH.LE.0.0) LINE_WIDTH = 1.0
	CALL GSLWSC(LINE_WIDTH)
	CALL SRIGSL(0,ANNOHW+1,0.0)	! linetype and hardware symbol
	CALL GSFACI(ABS(ANNOCOL))
	CALL GSFAIS(ANNOAST)
	CALL GSFASI(ANNOAIX)
	CALL SRICOL(ABS(ANNOCOL))	! symbol colour
	OVCOL = ANNOCOL			! in case device dep. wants to know
	GOTO 10000
C
C CLEAR ANNOTATION SETTINGS
C
5000	SCLDIS = SAV_SCLDIS
C
C flush out buffers, unless called from user routine
	IF (.NOT.FROM_USER) THEN
	   CALL LUWK(WKID,GSUPP)
	ENDIF
C
C reset LSL$CMNFRT:SRISCL
	CALL SRIUNI(SAV_PLTSCL,SAV_SRISCL,SAV_SRIROT,SAV_ENLSCL)
	CALL SRISLW(SAV_SRIWID)
	OVCOL = -1
C
C rest SETUP (for drawing into displays 1 and 2)
	SETUP = SAV_SETUP
C
C revert to prioritised drawing (if it was set)
	DRAW_PRIORITY = SAV_DRAW_PRIORITY
C
C Reset pattern definition
	CURPAT = 0
C
C clear plane settings
	ANNOTATION_MASK = -1
	ANNOTATION_OFFSET = 0
	IF (ANNOVER.NE.0) THEN
	   CALL LSG_PLANE_SELECT(WKID,ANNOTATION_MASK)
	   CALL LSG_PLANE_OFFSET(WKID,ANNOTATION_OFFSET)
	   IF (.NOT.PLOT_ON) THEN
	      IF (ANNODISP.EQ.0.AND.OVERLAY_SHARE.AND.WKAC(3-WKID)) THEN
	         CALL LSG_PLANE_SELECT(3-WKID,ANNOTATION_MASK)
	         CALL LSG_PLANE_OFFSET(3-WKID,ANNOTATION_OFFSET)
	      ENDIF
	   ENDIF
	ENDIF
	IF (ANNODISP.NE.0.OR.PLOT_ON) THEN
	   CALL GDAWK(WKID)
	   IF (WKOP(1)) CALL GACWK(1)
	   IF (WKOP(2)) CALL GACWK(2)
	   IF (ANNODISP.GT.2) THEN
	      CALL GSWN(1,LIMITS(1),LIMITS(2),LIMITS(3),LIMITS(4))
	   ENDIF
	   CALL GSVP(1,0.0,NDCX*WFACX,0.0,NDCY*WFACY)
	ENDIF
C
C restore original setting of WINDOW and clipping
	IF (PLOT_ON) THEN
	   IF (ANNODISP.LE.2) CALL CPYPAK(4,SAV_WINDOW,WINDOW)
	   IF (PLOT_CLIP.EQ.0) CALL GSCLIP(GCLIP)
	   NOMLW = SAV_NOMLW
	   HWTOPT = SAV_HWTOPT
	ENDIF
C
10000 	RETURN
	END
