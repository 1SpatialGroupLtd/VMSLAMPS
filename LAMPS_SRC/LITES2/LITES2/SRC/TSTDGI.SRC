C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-06-21 13:44:42.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE TSTDGI(DEV,IBUT,XY,LTD,MENU,SET,TRACK,PUCK,OBUT)
C
***	IDENT	21JN90
***	MODULE	TSTDGI
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	30-Nov-1984
C
C Description
C
C	Subroutine that given digitised coordinates (on table or bitpad)
C	returns the first menu and map and tracking area that they fall
C	in and the internal number of the puck and button that was used.
C
C	If the points do not fall in a menu, map or tracking area then
C	the number -1 is returned.
C
	IMPLICIT NONE
C
C Arguments
C	(input)
	INTEGER*4	DEV		! source of coordinates
					! (BITLIN or DIGLIN)
	INTEGER*4	IBUT		! button number returned by
					! device library
	REAL		XY(2)		! coordinates of point
	REAL		LTD		! limit for testing equivalence
					! of points (thickness of lines)
					! in digitiser units
C	(output)
	INTEGER*4	MENU		! menu that digitised point
					! falls in
	INTEGER*4	SET		! map that digitised point
					! falls in
	INTEGER*4	TRACK		! tracking area that digitised
					! point falls in
	INTEGER*4	PUCK		! number of puck that was used
	INTEGER*4	OBUT		! "normalised" button number
					! returned (-1 for not
					! available)
C
C Included Parameter Files
C
***     PARAMETER/CMN:EFNLUN/		! luns and event flags
***     PARAMETER/CMN:MACMEN/		! parameter file for
					! macros, menus and puck buttons
C
C Common Blocks
C
***     COMMON/CMN:MAPS/		! data about maps
***     COMMON/CMN:MENUS/		! data about menus
***	COMMON/CMN:OTRANS/
***	COMMON/CMN:TRACKS/		! data about tracking areas
***	COMMON/CMN:WORKS/		! data about workstations
C
C Functions called
C
	LOGICAL		INPLGN
	INTEGER*4	TRNBUT
C
C Local Variables
C
	INTEGER*4	I		! counter
	REAL		USEXY(2)
C
C Start of subroutine
C
C assume no maps or menus found
C
	MENU=-1
	SET=-1
	TRACK=-1
	PUCK=-1
	OBUT=-1
C
C check out menus
C
	DO 10, I=1,MENTOP
	   IF (MENDEF(I)) THEN			! menu has been set up
C
C	      see if menu has been set up on this device
C
	      IF (DEV.EQ.MENDEV(I)) THEN
C
C	            see if point is within menu
C
	         IF (INPLGN(XY,4,MNLMTS(1,1,I),LTD)) THEN
	            MENU=I
	            GOTO 20				! menu found
	         ENDIF
	      ENDIF
	   ENDIF
   10	CONTINUE
C
C now check on maps
C
   20	CONTINUE
	DO 30, I=1,MAP_SETUP_TOTAL
	   IF (DEV.EQ.DIGLIN) THEN	! maps can only be on table
C
C convert to IFF units
	      USEXY(1) = XY(1)
	      USEXY(2) = XY(2)
	      CALL TRNUSE(USEXY(1),USEXY(2),CPSCOF(1,1,I),
     &	                        MAPTRNTYP(I))
C
C and compare with map limits - can do simple test as comparing 
C transformed coordinates to IFF UNITS
	      IF (USEXY(1).GE.LMTPTS(1,I).AND.
     &	          USEXY(1).LE.LMTPTS(2,I).AND.
     &	          USEXY(2).GE.LMTPTS(3,I).AND.
     &	          USEXY(2).LE.LMTPTS(4,I)) THEN
	         SET=I		! map found
	         GOTO 40
	      ENDIF
	   ENDIF
   30	CONTINUE
C
C now check on tracking areas
C
   40	CONTINUE
	DO 50, I=1,TRATOP
	   IF (TRADEF(I)) THEN		! tracking area has been set up
C
C	      see if tracking area has been set up on this device
C
	      IF (DEV.EQ.TRADEV(I)) THEN
C
C	            see if point is within tracking area
C
	         IF (INPLGN(XY,4,TRLMTS(1,1,I),LTD)) THEN
	            TRACK=I
	            GOTO 60				! menu found
	         ENDIF
	      ENDIF
	   ENDIF
   50	CONTINUE
C
C find which puck has been pressed
C
   60	CONTINUE
	DO 70, I=1,PUKTOP
	   IF (PUKDEV(I).EQ.DEV) THEN
	      PUCK=I
	      GOTO 80
	   ENDIF
   70	CONTINUE
C
C get normalised button number and return
C
   80	CONTINUE
	IF (PUCK.NE.-1) OBUT=TRNBUT(IBUT,DEV)
	RETURN
	END
