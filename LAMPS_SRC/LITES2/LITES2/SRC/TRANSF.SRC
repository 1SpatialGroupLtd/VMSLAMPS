	SUBROUTINE TRANSF(ARC)
C
***	IDENT	10SE92
***	MODULE	TRANSF
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	08-June-1987
C
C Description
C
C To transform a linear feature
C
	IMPLICIT NONE
C
C Included Parameter Files
C
	INCLUDE 'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:AUXDEF/		! auxiliary array definitions
***	PARAMETER/CMN:CONSTS/
***	PARAMETER/CMN:PACK/		! external pack definitions
***	PARAMETER/CMN:REGPAR/
***     PARAMETER/CMN:START/		! digitising procedures
C
C Common Blocks
C
***	COMMON/CMN:CSTRCT/
***	COMMON/CMN:DEFINE/
***	COMMON/LSL$CMNFRT:FRTCOM/
***	COMMON/CMN:MASTER/
***	COMMON/LSL$CMNIFF:MD2DES/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:OIIH/		! output item data
***	COMMON/CMN:REGCMN/
***	COMMON/CMN:STRIKE/		! found objects, etc.
***	COMMON/CMN:TRANSFORM/
***	COMMON/CMN:VARIAT/
C
C argument
	LOGICAL		ARC		! transforming a circle arc?
C
C function
	LOGICAL		PLANE
C
C Local Variables
C
	INTEGER 	VV1,VV2		! vertices
	INTEGER		NVRTS		! number of vertices wanted
	INTEGER		FLG		! save for ENDS flag
	LOGICAL*1 	REV		! copying backwards
	INTEGER		I
	REAL		TRANXY(2)	! transformed coordinate
	REAL		XY(2)
	REAL		XY1(2)
	REAL		XY2(2)
	REAL		ANG1,ANG2
	REAL		XANG
	REAL		DIST
	REAL		DX,DY
	INTEGER*2	DUMMY(4)
	INTEGER		DUMMYI
	INTEGER		OPER
	INTEGER		NATT
	REAL		PLNE(4)
	LOGICAL		PLNE_DEFINED
	REAL		Z
	REAL		TMPXY(2,3)
	REAL		TMPZ(3)
	LOGICAL		FAR_MOVE
C
	FAR_MOVE = .FALSE.
C
C deal with circle arcs first
	IF (ARC) THEN
C
	   OPER = DEFINITION(P_TRANSFORM)
	   IF (OPER.EQ.0) OPER = DEFINITION(P_OTHER)
C
C transform end points and centre
	   CALL TRNSFRM(IMCXY,XY1)
C
	   CALL TRNSFRM(IHCXY,XY2)
C
	   CALL TRNSFRM(IHAUX(XCENI),TRANXY)
C
C work out plane through these 3 points, with original heights
	   PLNE_DEFINED = .FALSE.
	   IF (ZOPT.AND.IHC_DEFINED) THEN
	      TMPXY(1,1) = XY1(1)
	      TMPXY(2,1) = XY1(2)
	      TMPXY(1,2) = XY2(1)
	      TMPXY(2,2) = XY2(2)
	      TMPXY(1,3) = TRANXY(1)
	      TMPXY(2,3) = TRANXY(2)
	      CALL PUTLNG(IMCXY(3),TMPZ(1))
	      CALL PUTLNG(IHCXY(3),TMPZ(2))
C
C get Z value of centre
	      CALL PLANE_INTERPL(IHAUX(XCENI),IHCOEFFS,TMPZ(3))
	      PLNE_DEFINED = PLANE(TMPXY,TMPZ,PLNE)
	   ENDIF
C
C and radius
	   DIST = SQRT((XY1(1)-TRANXY(1))**2 + (XY1(2)-TRANXY(2))**2)
C
C work out angles between IMCXY and IHCXY and centre of original arc
	   ANG1 = ATAN2(XY1(2)-TRANXY(2),XY1(1)-TRANXY(1))
	   IF (ANG1.LT.0.0) ANG1 = ANG1 + TWOPI
	   ANG2 = ATAN2(XY2(2)-TRANXY(2),XY2(1)-TRANXY(1))
	   IF (ANG2.LT.0.0) ANG2 = ANG2 + TWOPI
C
C first point is at IMCXY
	   CONATT = 0
	   IF (PLNE_DEFINED) CALL ADDZ(TMPZ(1),MXATTR,
     &	                               CONATT,COATTC,COATTV)
	   CALL LSTARR(OPER,CONATT,COATTC,COATTV,.TRUE.)
	   IF (DEFINITION(P_FAR_MOVE) .GT. 0) THEN
	      DX = IMCXY(1) - XY1(1)
	      DY = IMCXY(2) - XY1(2)
	      FAR_MOVE = (DX**2 + DY**2) .GT. FAR_MOVE_IFF**2
	   ENDIF
	   IF (FAR_MOVE)
     &	         CALL LSTARR(DEFINITION(P_FAR_MOVE),
     &	                     CONATT,COATTC,COATTV,.TRUE.)
C
	   CALL ADCORD(XY1,CONATT,COATTC,COATTV)
C
C middle point is either centre of circle, or mid point of curve
	   IF (COIPAK(PAKGT).EQ.CLOTYP.OR.
     &	       COIPAK(PAKGT).EQ.ANTTYP) THEN ! at centre
	      XY(1) = TRANXY(1)
	      XY(2) = TRANXY(2)
	   ELSEIF (COIPAK(PAKGT).EQ.CIRTYP) THEN ! on circumference
	      XANG = ANG2 - ANG1
	      IF (IHAUX(TOTI).GE.0.0) THEN		! anticlockwise
	         IF (XANG.LT.0.0) XANG = XANG + TWOPI
	      ELSE					! clockwise
	         IF (XANG.GT.0.0) XANG = XANG - TWOPI
	      ENDIF
	      XY(1) = TRANXY(1) + COS(ANG1+XANG*0.5)*DIST
	      XY(2) = TRANXY(2) + SIN(ANG1+XANG*0.5)*DIST
	   ELSE			! full circle - go 1/3 round
	      IF (IHAUX(TOTI).GE.0.0) THEN		! anticlockwise
	         XANG = TWOPI * 0.333333
	      ELSE					! clockwise
	         XANG = - TWOPI * 0.33333
	      ENDIF
	      XY(1) = TRANXY(1) + COS(ANG1+XANG)*DIST
	      XY(2) = TRANXY(2) + SIN(ANG1+XANG)*DIST
	   ENDIF
C
C next point
	   CONATT = 0
	   IF (PLNE_DEFINED) THEN
	      CALL PLANE_INTERPL(XY,PLNE,Z)
	      CALL ADDZ(Z,MXATTR,CONATT,COATTC,COATTV)
	   ENDIF
	   CALL LSTARR(OPER,CONATT,COATTC,COATTV,.TRUE.)
	   IF (DEFINITION(P_FAR_MOVE) .GT.0) THEN
	      DX = IHCXY(1) - XY2(1)
	      DY = IHCXY(2) - XY2(2)
	      FAR_MOVE = (DX**2 + DY**2) .GT. FAR_MOVE_IFF**2
	   ENDIF
	   IF (FAR_MOVE)
     &	         CALL LSTARR(DEFINITION(P_FAR_MOVE),
     &	                     CONATT,COATTC,COATTV,.TRUE.)
	   CALL ADCORD(XY,CONATT,COATTC,COATTV)
C
C last point is at IHCXY, except if dealing with circles,
C when go 2/3 round
	   IF (COIPAK(PAKGT).NE.FULTYP) THEN
	      XY(1) = TRANXY(1) + COS(ANG2)*DIST
	      XY(2) = TRANXY(2) + SIN(ANG2)*DIST
	   ELSE
	      IF (IHAUX(TOTI).GE.0.0) THEN		! anticlockwise
	         XANG = TWOPI * 0.6666666
	      ELSE					! clockwise
	         XANG = - TWOPI * 0.6666666
	      ENDIF
	      XY(1) = TRANXY(1) + COS(ANG1+XANG)*DIST
	      XY(2) = TRANXY(2) + SIN(ANG1+XANG)*DIST
	   ENDIF
C
C last point
	   CONATT = 0
	   IF (PLNE_DEFINED) THEN
	      CALL PLANE_INTERPL(XY,PLNE,Z)
	      CALL ADDZ(Z,MXATTR,CONATT,COATTC,COATTV)
	   ENDIF
	   CALL LSTARR(OPER,CONATT,COATTC,COATTV,.TRUE.)
	   CALL TRNSFRM(IHAUX(XCENI),TRANXY)
	   IF (DEFINITION(P_FAR_MOVE) .GT. 0) THEN
	      DX = IHAUX(XCENI) - XY(1)
	      DY = IHAUX(YCENI) - XY(2)
	      FAR_MOVE = (DX**2 + DY**2) .GT. FAR_MOVE_IFF**2
	   ENDIF
	   IF (FAR_MOVE)
     &	         CALL LSTARR(DEFINITION(P_FAR_MOVE),
     &	                     CONATT,COATTC,COATTV,.TRUE.)
	   CALL ADCORD(XY,CONATT,COATTC,COATTV)
C
C genaux it
	   CALL GENAUX(3,COIXY(1,2),COIAUX,COIDSC,
     &	            COIANG,DUMMYI,COIPAK,DUMMY)
C
C linear feature
C
	ELSE
C
	   OPER = DEFINITION(P_TRANSFORM)
	   IF (OPER.EQ.0) OPER = DEFINITION(P_OTHER)
C
	   I = 0
	   IF (.NOT.IMNVRT) THEN
	      CALL TRNSFRM(IMCXY,TRANXY)
	      IF (DEFINITION(P_FAR_MOVE) .GT.0) THEN
	         DX = IMCXY(1) - TRANXY(1)
	         DY = IMCXY(2) - TRANXY(2)
	         FAR_MOVE = (DX**2 + DY**2) .GT. FAR_MOVE_IFF**2
	      ENDIF
C
C point has no attributes
	      CONATT = 0
C
C add a Z value if required
	      IF (ZOPT) CALL ADDZ(IMCXY(3),MXATTR,CONATT,COATTC,COATTV)
C
C insert point with break attributes
	      IF (DEFINITION(P_BREAK).NE.0) THEN
	         CALL LSTARR(DEFINITION(P_BREAK),
     &	            CONATT,COATTC,COATTV,.TRUE.)
	      ELSE
	         CALL LSTARR(DEFINITION(P_OTHER),
     &	               CONATT,COATTC,COATTV,.TRUE.)
	      ENDIF
	      IF (FAR_MOVE)
     &	            CALL LSTARR(DEFINITION(P_FAR_MOVE),
     &	                        CONATT,COATTC,COATTV,.TRUE.)
	      CALL ADCORD(TRANXY,CONATT,COATTC,COATTV)
	      I = I+1				! don't add IMVRT
	   ENDIF
	   IF (IHVRT.GE.IMVRT+I) THEN
	      VV1 = IMVRT+I
	      VV2 = IHVRT
	      REV = (VV2.LT.VV1)	! we are going backwards
	      NVRTS = IABS(VV2-VV1)+1	! number of vertices
	      FLG = 1			! assume visible to first point
C
C Get some vertices
10	      CALL GETVRT(IHPAK,VV1,VV2)
C
C If copying forwards, force first vertex to be visible
C (If this really is the first vertex of a new feature, then FLUSH
C will ensure that it is marked pen-up, but if it is the first vertex
C of a bridged bit, then we don't want it marked invisible.)
	      IF (.NOT.REV.AND.VV1.EQ.1) RIFLG(1) = RIFLG(1).OR.1
C
C add them to output item
	      IF (REV) THEN
C
C deal specially with first point
	         IF (IAND(FLG,1).EQ.0) THEN
	            CALL FLUSH(1)
	            OIENDS = 0
	         ENDIF
	         CALL TRNSFRM(RIXY(1,RITOP),TRANXY)
	         IF (DEFINITION(P_FAR_MOVE) .GT. 0) THEN
	            DX = RIXY(1,RITOP) - TRANXY(1)
	            DY = RIXY(2,RITOP) - TRANXY(2)
	            FAR_MOVE = (DX**2 + DY**2) .GT. FAR_MOVE_IFF**2
	         ENDIF
	         NATT = RINATT
	         CALL LSTARR(OPER,NATT,RIATTC,RIATTV(1,RITOP),.TRUE.)
	         IF (FAR_MOVE)
     &	               CALL LSTARR(DEFINITION(P_FAR_MOVE),
     &	                           NATT,RIATTC,RIATTV(1,RITOP),.TRUE.)
	         CALL ADCORD(TRANXY,NATT,RIATTC,RIATTV(1,RITOP))
	         DO 40 I=RITOP-1,1,-1
	            CALL TRNSFRM(RIXY(1,I),TRANXY)
	            IF (DEFINITION(P_FAR_MOVE) .GT. 0) THEN
	               DX = RIXY(1,I) - TRANXY(1)
	               DY = RIXY(2,I) - TRANXY(2)
	               FAR_MOVE = (DX**2 + DY**2) .GT. FAR_MOVE_IFF**2
	            ENDIF
C
C FLUSH if invisible to this point (remember going backwards)
	            FLG = RIFLG(I+1)
	            IF (IAND(FLG,1).EQ.0) THEN
	               CALL FLUSH(1)
	               OIENDS = 0		! invisible
	            ENDIF
	            NATT = RINATT
	            CALL LSTARR(OPER,NATT,RIATTC,RIATTV(1,I),.TRUE.)
	            IF (FAR_MOVE)
     &	                  CALL LSTARR(DEFINITION(P_FAR_MOVE),
     &	                              NATT,RIATTC,RIATTV(1,I),.TRUE.)
	            CALL ADCORD(TRANXY,NATT,RIATTC,RIATTV(1,I))
40	         CONTINUE
	         FLG = RIFLG(1)		! preserve flag
	      ELSE
	         DO 50 I=1,RITOP
	            CALL TRNSFRM(RIXY(1,I),TRANXY)
	            IF (DEFINITION(P_FAR_MOVE) .GT. 0) THEN
	               DX = RIXY(1,I) - TRANXY(1)
	               DY = RIXY(2,I) - TRANXY(2)
	               FAR_MOVE = (DX**2 + DY**2) .GT. FAR_MOVE_IFF**2
	            ENDIF
C
C Flush if invisible up to the current point
	            FLG = RIFLG(I)
	            IF (IAND(FLG,1).EQ.0) THEN
	               CALL FLUSH(1)
	               OIENDS = 0		! invisible
	            ENDIF
	            NATT = RINATT
	            CALL LSTARR(OPER,NATT,RIATTC,RIATTV(1,I),.TRUE.)
	            IF (FAR_MOVE)
     &	                  CALL LSTARR(DEFINITION(P_FAR_MOVE),
     &	                              NATT,RIATTC,RIATTV(1,I),.TRUE.)
	            CALL ADCORD(TRANXY,NATT,RIATTC,RIATTV(1,I))
50	         CONTINUE
	      ENDIF
C
C have we finished?
	      NVRTS = NVRTS-RITOP
	      IF (NVRTS.GT.0) THEN		! still more to do
	         IF (REV) THEN
	            VV1 = VV1-RITOP
	         ELSE
	            VV1 = VV1+RITOP
	         ENDIF
	         GOTO 10			! round again
	      ENDIF
	   ENDIF
	   IF (.NOT.IHNVRT) THEN
	      CALL TRNSFRM(IHCXY,TRANXY)
	      IF (DEFINITION(P_FAR_MOVE) .GT. 0) THEN
	         DX = IHCXY(1) - TRANXY(1)
	         DY = IHCXY(2) - TRANXY(2)
	         FAR_MOVE = (DX**2 + DY**2) .GT. FAR_MOVE_IFF**2
	      ENDIF
C
C point has no attributes
	      CONATT = 0
C
C add a Z value if required
	      IF (ZOPT) CALL ADDZ(IHCXY(3),MXATTR,CONATT,COATTC,COATTV)
C
C insert point with break attributes
	      IF (DEFINITION(P_BREAK).NE.0) THEN
	         CALL LSTARR(DEFINITION(P_BREAK),
     &	            CONATT,COATTC,COATTV,.TRUE.)
	      ELSE
	         CALL LSTARR(DEFINITION(P_OTHER),
     &	               CONATT,COATTC,COATTV,.TRUE.)
	      ENDIF
	      IF (FAR_MOVE)
     &	         CALL LSTARR(DEFINITION(P_FAR_MOVE),
     &	                     CONATT,COATTC,COATTV,.TRUE.)
	      CALL ADCORD(TRANXY,CONATT,COATTC,COATTV)
	   ENDIF
	ENDIF
C
C if any region selections, feature may have moved in/out of
C selected region
	IF (.NOT.SAREGS) CHASEL = .TRUE.
C
	RETURN
	END
