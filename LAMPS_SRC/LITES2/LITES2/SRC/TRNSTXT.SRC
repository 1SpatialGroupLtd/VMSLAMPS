C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-05-09 11:54:04.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        SUBROUTINE TRNSTXT
C
***     IDENT   09MY96
***     MODULE  TRNSTXT
C
C       Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C       Written                                 RWR	 8-June-1987
C
C	To transform a text or a symbol
C
        IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:AUXDEF/		! auxiliary array definitions
***	PARAMETER/CMN:CONSTS/
***	PARAMETER/CMN:CTXS/
***	PARAMETER/CMN:END/
***	PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:PACK/		! external pack definitions
***	PARAMETER/CMN:REGPAR/
***     PARAMETER/CMN:STAPAR/		! state constants
C
***     COMMON/CMN:CTXS/
***	COMMON/CMN:DEFINE/
***     COMMON/CMN:DOUT/                ! cmd dec. output
***	COMMON/CMN:DRAWIN/
***	COMMON/CMN:CSTRCT/
***	COMMON/LSL$CMNFRT:FRTCOM/
***	COMMON/CMN:MASTER/
***	COMMON/LSL$CMNIFF:MD2DES/
***	COMMON/CMN:MODIFY/
***	COMMON/CMN:OIIH/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:OSPTSZ/
***	COMMON/CMN:REGCMN/
***	COMMON/CMN:RFCTRL/
***     COMMON/CMN:STATE/		! state variables
***	COMMON/CMN:TRANSFORM/
***	COMMON/CMN:STRIKE/
C
C Functions called
C
	LOGICAL		COIDLE
C
C Local Variables
C
	INTEGER*2	NOPTS		! number of points in feature
	INTEGER		I
	INTEGER		ADDR		! address of current CTX
	INTEGER		STAADR,FINADR	! start and end addresses
	REAL		TMPXY(2)
	REAL		TRANXY(2)
	REAL		TMPANG
	INTEGER		TMPTH,OLDTH
	INTEGER		OPER
	INTEGER		DUMMY
	LOGICAL		FAR_MOVE
	REAL		DX,DY
C
	FAR_MOVE = .FALSE.
C
C if not in MODIFY state, get into it (with implicit copy)
C
	IF (SINDEX.NE.STATE_MODIFY) THEN
	   IF (COIDLE(.FALSE.)) GOTO 995 ! do not delete found object
	ENDIF
C
C if doing anything that involves altering the feature at the moment,
C stop it
C
	IF (NDMODE.NE.END_CONSTRUCT.AND.NDMODE.NE.END_MOVE) THEN
	   CALL FRECUR
	   RUBLIN(1) = .FALSE.
	   RUBCHG = .TRUE.
	ENDIF
	NDMODE = END_CONSTRUCT			! just done an offset
C
C this is classed as a transformation (in terms of operations)
	OPER = DEFINITION(P_TRANSFORM)
	IF (OPER.EQ.0) OPER = DEFINITION(P_OTHER)
C
C get number of points to deal with
C
	IF (COIPAK(PAKGT).EQ.SCATYP) THEN	! get number of points 
	   NOPTS=2				! to use
	ELSE
	   NOPTS=1
	ENDIF
C
C deal seperately with texts
C
	IF (COIPAK(PAKGT).EQ.TEXTYP) GOTO 100
C
C symbols
C====================================================================
C
C transform relevant number of points
C
	DO 10, I = 1,NOPTS
	   IF (I.EQ.1) THEN
	      TMPXY(1) = COIXY(1,I+1)
	      TMPXY(2) = COIXY(2,I+1)
	   ENDIF
C
	   CALL TRNSFRM(COIXY(1,I+1),COIXY(1,I+1))
C
	   IF (I.EQ.1 .AND. DEFINITION(P_FAR_MOVE).GT.0) THEN
	      DX = TMPXY(1) - COIXY(1,I+1)
	      DY = TMPXY(2) - COIXY(2,I+1)
	      FAR_MOVE = (DX**2 + DY**2) .GT. FAR_MOVE_IFF**2
	   ENDIF
   10	CONTINUE
C
C update attributes
	CALL LSTARR(OPER,COINATT,COIATTC,COIATTV(1,2),.TRUE.)
	IF (FAR_MOVE)
     &	   CALL LSTARR(DEFINITION(P_FAR_MOVE),
     &	               COINATT,COIATTC,COIATTV(1,2),.TRUE.)

C
C rotate oriented symbols
C
	IF (COIPAK(PAKGT).EQ.ORITYP) THEN
	   COIANG = COIANG + TRNS_ROT
20	   IF (COIANG.LT.0.0) THEN			! now normalise
	      COIANG = COIANG+TWOPI
	      GOTO 20
	   ELSEIF(COIANG.GE.TWOPI) THEN
	      COIANG = COIANG - TWOPI
	      GOTO 20
	   ENDIF
	ENDIF
C
	MODMOD = .TRUE.
C
C if any region selections, feature may have moved in/out of
C selected region
	IF (.NOT.SAREGS) CHASEL = .TRUE.
	GOTO 999
C
C texts
C=======================================================================
C
  100	CONTINUE
C
C get start and end CTXs to work on
C
	IF (SUBTXT) THEN
	   STAADR = COICTXD(CTXD_HOME)
	   FINADR = COICTXD(CTXD_HOME)
	ELSE
	   STAADR = COICTXD(CTXD_FSTCTX)
	   FINADR = COICTXD(CTXD_LSTCTX)
	ENDIF
C
C start of list
C
	ADDR = STAADR
  110	CONTINUE
C
C get coordinate values from this CTX
C
	CALL PUTLNG(%VAL(ADDR+CTX_O_X),TMPXY(1))
	CALL PUTLNG(%VAL(ADDR+CTX_O_Y),TMPXY(2))
	CALL PUTLNG(%VAL(ADDR+CTX_O_RO),TMPANG)
	CALL PUTLNG(%VAL(ADDR+CTX_O_TH),TMPTH)
C
C change its height (if possible)
	IF (HEIOPT) THEN		! allowed to change size
	   OLDTH = TMPTH
	   TMPTH = TMPTH*TRNS_SCL	! ideal size
	   IF (POIOPT) THEN
	      DO 115, I = MIN(TMPTH,24),24
	         IF (OSPTSZ(I).NE.0) THEN
	            TMPTH = I
	            GOTO 116
	         ENDIF
115	      CONTINUE
116	      CONTINUE
	   ELSE
	   ENDIF
	ENDIF
C
C transform coordinates
	CALL TRNSFRM(TMPXY,TRANXY)
	IF (DEFINITION(P_FAR_MOVE) .GT. 0) THEN
	   DX = TMPXY(1) - TRANXY(1)
	   DY = TMPXY(2) - TRANXY(2)
	   FAR_MOVE = (DX**2 + DY**2) .GT. FAR_MOVE_IFF**2
	ENDIF
C
C rotate by angle
	TMPANG=TMPANG + TRNS_ROT
120	IF (TMPANG.LT.0.0) THEN			! now normalise
	   TMPANG=TMPANG+TWOPI
	   GOTO 120
	ELSEIF(TMPANG.GE.TWOPI) THEN
	   TMPANG=TMPANG-TWOPI
	   GOTO 120
	ENDIF
C
C and write the coordinates back
C
	CALL PUTLNG(TRANXY(1),%VAL(ADDR+CTX_O_X))
	CALL PUTLNG(TRANXY(2),%VAL(ADDR+CTX_O_Y))
	CALL PUTLNG(TMPANG,%VAL(ADDR+CTX_O_RO))
	CALL PUTLNG(TMPTH,%VAL(ADDR+CTX_O_TH))
C
C update attributes for this point
	CALL LSTARR(%VAL(ADDR+CTX_O_ATTR),CONATT,
     &	                           COATTC,COATTV,.FALSE.)
	CALL LSTARR(OPER,CONATT,COATTC,COATTV,.TRUE.)
	IF (FAR_MOVE)
     &	   CALL LSTARR(DEFINITION(P_FAR_MOVE),
     &	               CONATT,COATTC,COATTV,.TRUE.)
	CALL ARRLST(CONATT,COATTC,COATTV,
     &                              %VAL(ADDR+CTX_O_ATTR),DUMMY)
C
C if this is home CTX, then update COI variables
C
	IF (ADDR.EQ.COICTXD(CTXD_HOME)) THEN
	   COIXY(1,2) = TRANXY(1)
	   COIXY(2,2) = TRANXY(2)
	   COIANG = TMPANG
	ENDIF
C
C was that the last CTX?
C
	IF (ADDR.NE.FINADR) THEN
	   CALL PUTLNG(%VAL(ADDR+CTX_O_NXTPTR),ADDR)
	   GOTO 110
	ENDIF
C
	MODMOD = .TRUE.
	GOTO 999
C
  995	CALL IGNCMD
  999	CONTINUE
        RETURN
        END
