C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-03-08 15:42:36.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        SUBROUTINE DOINSE
C
***     IDENT   08MR89
***     MODULE  DOINSE
C
C       Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C       Written                                 CCB	20-NOV-1984
C
C	LITES2 cartographic editor INSERT command.
C
        IMPLICIT NONE
C
C Included Parameter Files
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:AUXDEF/
***	PARAMETER/CMN:EFNLUN/
***	PARAMETER/CMN:END/
***     PARAMETER/CMN:MOANMESS/
***	PARAMETER/CMN:PACK/
***     PARAMETER/CMN:START/		! digitising procedures
***	PARAMETER/CMN:STAPAR/
C
C Common Blocks
C
***	COMMON/CMN:CSTRCT/
***	COMMON/CMN:MAPS/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:RFCTRL/
***	COMMON/CMN:STATE/
***	COMMON/CMN:STRIKE/
C
C w/s
	REAL		XY(2,3)
	INTEGER		Z(3)
C
	EXTERNAL	MOAN
C
C functions
	LOGICAL		PLANE
	LOGICAL		STRTER
C
C deal with construct state
	IF (SINDEX.EQ.STATE_CONSTRUCT) GOTO 200
C
C LINE state
C is map read-only?
	IF (MAPRO(FOPAK(PAKMAP))) THEN
	   CALL MOAN(MSG_MAPREADONLY,FOPAK(PAKMAP)+1)
	   GOTO 998
	ENDIF
C
C Must be on line but not on a vertex to INSERT
	IF (.NOT.FONLIN.OR.FONVRT) THEN
	   CALL MOAN(MSG_NOTBETWEEN)
	   CALL LEARN(MSG_USEFRAC)
	   GOTO 998
	ENDIF
C
C set up planes for forcing - use points on either side of inserted point
	IF (ZOPT) THEN
	   CALL HAULIN(0)		! get correct vertices
	   IF (FO_Z_COL.NE.-1) THEN
	      XY(1,1) = FOXY(1,FOVRT-FOVO)
	      XY(2,1) = FOXY(2,FOVRT-FOVO)
	      Z(1)    = FOATTV(FO_Z_COL,FOVRT-FOVO)
	      XY(1,2) = FOXY(1,FOVRT-FOVO+1)
	      XY(2,2) = FOXY(2,FOVRT-FOVO+1)
	      Z(2)    = FOATTV(FO_Z_COL,FOVRT-FOVO+1)
	      XY(1,3) = XY(1,1)
	      XY(2,3) = XY(2,1)
	      Z(3) = Z(1)
	      FORCE_C_SETUP = PLANE(XY,Z,FORCE_COEFFS)
	      IF (CSZI.NE.IFF_ABSENT) THEN
	         FORCE_H_SETUP = .TRUE.
	         FORCE_HEIGHT = CSXY(3)
	      ENDIF
	   ENDIF
	ENDIF
C
	CALL HANDLE				! take object into hand
	NDMODE = END_INSERT			! ready to END
	CALL SETSTA(STATE_EDIT)			! into EDIT state
C
C set up rubber banding
	RUBCHG = .TRUE.
	RUBLIN(1) = .TRUE.
	RUBLIN(2) = .TRUE.
	RUBARR(1,1) = IHXY(1,IHVRT-IHVO)
	RUBARR(2,1) = IHXY(2,IHVRT-IHVO)
	RUBARR(1,2) = IHXY(1,IHVRT-IHVO+1)
	RUBARR(2,2) = IHXY(2,IHVRT-IHVO+1)
	GOTO 999
C
C CONSTRUCT STATE
200	CONTINUE
C
C check that command is valid
C 1) not while generating a feature (curve, arc or polygon)
C 2) not while interpolating points
	IF (CONGEN.OR.((CONFLG(CONIND).AND.START_CURVE).NE.0)) THEN
	   CALL MSGCMD(MOAN,MSG_NOTWHILEGEN)
	   GOTO 998
C
C 3) not while inserting
	ELSEIF (INSRTING) THEN
	   CALL MSGCMD(MOAN,MSG_NOTWHILEINSERT)
	   GOTO 998
	ENDIF
C
C add cursor position
	IF (STRTER(START_ADD,START_VISIBLE)) GOTO 998	! failed
C
C now inserting
	INSRTING = .TRUE.
	FIRST_INSERT = CONIND -1
	GOTO 999
C
C error exit
998	CALL IGNCMD
C
999	RETURN
        END
