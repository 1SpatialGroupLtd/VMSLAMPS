C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1995-03-30 14:26:32.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE DRWCURSPOS(TYPE)
C
***	IDENT	30MR95
***	MODULE	DRWCURSPOS
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	2-Dec-1988
C
C	To write at the current cursor position on the screen
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:ACS/
***	PARAMETER/CMN:EFNLUN/
***     PARAMETER/CMN:MOANMESS/		! moan constants
***	PARAMETER/LSL$CMNLSL:READANG/
C
***	COMMON/CMN:DOUT/
***	COMMON/CMN:DRAWIN/
***	COMMON/LSL$CMNFRT:FRTACD/
***	COMMON/LSL$CMNFRT:FRTCOM/
***	COMMON/CMN:GLOBAL/
***	COMMON/CMN:LABELS/
***	COMMON/CMN:MAPS/
***	COMMON/LSL$CMNIFF:MD2DES/
***	COMMON/CMN:MASTER/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:OVERLAY/
***	COMMON/CMN:RFCTRL/
***	COMMON/CMN:TRANSFORM/
C
C argument
	INTEGER		TYPE		! how to interpret position
					! = CURS_POSITION
					! = CURS_SHEET
					! = CURS_ABSOLUTE
					! = CURS_GEOGRAPHICALS
					! = CURS_TEXT
					! = CURS_TITLE
C
C w/s
	REAL		XX,YY
	REAL*8		ICOORD(2),OCOORD(2)
	REAL		POSXY(3)
	REAL		DX,DY
	REAL		MINX,MAXX,MINY,MAXY
	REAL		EXTX,EXTY
C
C functions
	CHARACTER*(14)	DISPANG
	LOGICAL		GEOG_TRANS
	LOGICAL		TRISCN
	INTEGER		EXPAND
	INTEGER		FINSTR
	EXTERNAL	MOAN
C
	IF (NODISP) GOTO 999		! no display to draw on
C
	IF (ANNODISP.GT.2.AND.
     &			(TYPE.NE.CURS_TEXT.AND.TYPE.NE.CURS_TITLE)) THEN
	   CALL MSGCMD(MOAN,MSG_BADANNODISP)
	   GOTO 999
	ENDIF
C
C test that symbol number has been set up properly
C (but don't need symbol for DRAW TITLE)
	IF (ANNOMARK.LE.0.AND.TYPE.NE.CURS_TITLE) THEN
	   CALL MOAN(MSG_NOMARK)
	   CALL LEARN(MSG_SETMARK)
	   GOTO 999
	ENDIF
C
C get position
	IF (ANNODISP.LE.2) THEN
	   POSXY(1) = CSXY(1)
	   POSXY(2) = CSXY(2)
	ELSE
	   POSXY(1) = DISPLAY_CSXY(1,ANNODISP)
	   POSXY(2) = DISPLAY_CSXY(2,ANNODISP)
	ENDIF
	CALL PUTLNG(CSXY(3),POSXY(3))	! always draw at this height!!
C
C build label
	IF (TYPE.EQ.CURS_POSITION) THEN
	   LABIND = EXPAND('%W%G0.7 %G0.7',%REF(LAB_TEXT),
     &	                  POSXY(1),POSXY(2))
	ELSEIF (TYPE.EQ.CURS_SHEET) THEN
	   LABIND = EXPAND('%W%G0.7 %G0.7',%REF(LAB_TEXT),
     &	                  POSXY(1)/SCLFRT,POSXY(2)/SCLFRT)
	ELSEIF (TYPE.EQ.CURS_ABSOLUTE) THEN
	   LABIND = EXPAND('%W%^D%G0.10 %G0.10',%REF(LAB_TEXT),
     &	                  LITES2ORG(1)+POSXY(1),
     &	                  LITES2ORG(2)+POSXY(2))
	ELSEIF (TYPE.EQ.CURS_GEOGRAPHICALS) THEN
	   ICOORD(1) = POSXY(1) + LITES2ORG(1)
	   ICOORD(2) = POSXY(2) + LITES2ORG(2)
	   IF (GEOG_TRANS(ICOORD,LITES2SYS, LITES2ZONE, LITES2PAR,LITES2UNIT,
     &	               OCOORD,OUTSYS,OUTZONE,PAROUT,OUTUNIT)) THEN
	      LABIND = EXPAND('%W%S  %S',%REF(LAB_TEXT),
     &	   	            DISPANG(OCOORD(2),READANG_LATITUDE),
     &	                    DISPANG(OCOORD(1),READANG_LONGITUDE))
	   ELSE
	      GOTO 999
	   ENDIF
	ELSEIF (TYPE.EQ.CURS_TEXT.OR.TYPE.EQ.CURS_TITLE) THEN
	   CALL SETAUX(%REF(DSTR),DSTRL)
	   LABIND = FINSTR(LAB_TEXT,'text')
	   IF (MOANED) GOTO 999
	ELSE
	   CALL NASTY(MSG_INTERNALERROR)
	   GOTO 999
	ENDIF
C
C set up labelling attributes
	CALL SETANNO(.TRUE.)
C
C set FRTCOM
	FRTFLG = 0
	FRTHW  = 0
	FRTHWL = 0
	FRTWID = ANNOWIDTH
	FRTSIZ = 0.0
	FRTTEX = .FALSE.		! don't draw in italic
	FRTFC = -1			! FRTCOM well and truely nadjered
C
	CALL SRI_SET_Z(POSXY(3))
C
C draw symbol at cursor position
C for all but DRAW TITLE
	IF (TYPE.NE.CURS_TITLE) THEN
	   CALL SRIPLT(ANNOMARK,POSXY(1),POSXY(2),ANNOSIZ,ANNOANGLE)
C
C text position, offset by ANNOOFFX from appropriate corner of symbol box
	   IF (ANNOOFFX .GT. 0.0) THEN
	      DX = ANNOMARK_MAXX*ANNOSIZ + ANNOOFFX
	   ELSEIF (ANNOOFFX .LT. 0.0) THEN
	      DX = ANNOMARK_MINX*ANNOSIZ + ANNOOFFX
	   ELSE
	      DX = 0.0
	   ENDIF
C
	   IF (ANNOOFFY .GT. 0.0) THEN
	      DY = ANNOMARK_MAXY*ANNOSIZ + ANNOOFFY
	   ELSEIF (ANNOOFFY .LT. 0.0) THEN
	      DY = ANNOMARK_MINY*ANNOSIZ + ANNOOFFY
	   ELSE
	      DY = 0.0
	   ENDIF
C
C rotate position of text, wrt locating point of symbol
	   XX = POSXY(1) + DX*ANNOCOS - DY*ANNOSIN
	   YY = POSXY(2) + DX*ANNOSIN + DY*ANNOCOS
	ELSE
	   XX = POSXY(1)
	   YY = POSXY(2)
	ENDIF
C
C this is locating point - work out where bottom left of text should be
C ( I wish we had an AUX array!)
	MINX = 0.0
	MINY = 0.0
	MAXY = ANNOSIZ
	IF (LABIND.GT.0) THEN
	   IF (TRISCN(LAB_TEXT(1:LABIND),ANNOFONT,MAXX,
     &			HWTOPT.AND.ANNOHWT)) GOTO 998
	ELSE
	   MAXX = 0
	ENDIF
C
C reduce length of text by the justification factor of a character
C height to allow for space at end of (last) letter. 
C This is a bit arbitrary; it depends on the TRI being used.
C Don't let it go negative
	IF (ABS(MAXX).GT.JSTPROP) MAXX = MAXX - SIGN(JSTPROP,MAXX)
C
	MAXX = MAXX*ANNOSIZ
C
C move text 
	DX=ANNOLOCATION/3			! integer division
	DY=MOD(ANNOLOCATION,3)
	EXTX=(MAXX-MINX)/2		! half the size in X
	EXTY=(MAXY-MINY)/2		! half the size in Y
	MINX=MINX-EXTX*DX		! alter position in X
	MAXX=MAXX-EXTX*DX
	MINY=MINY-EXTY*DY		! and in Y
	MAXY=MAXY-EXTY*DY
C
	XX = XX + MINX * ANNOCOS - MINY * ANNOSIN
	YY = YY + MINX * ANNOSIN + MINY * ANNOCOS
C
	IF (LABIND.GT.0) THEN
	   IF (BLAOPT) CALL BLANK_LABEL(XX,YY,POSXY(3),
     &		LAB_TEXT(1:LABIND),ANNOFONT,
     &		ANNOANGLE,ANNOSIZ,HWTOPT.AND.ANNOHWT)

	   CALL TRITXT(LAB_TEXT(1:LABIND),ANNOFONT,
     &		XX,YY,ANNOSIZ,ANNOANGLE,HWTOPT.AND.ANNOHWT)
	ENDIF
C
998	IF (ANNODISP.LE.2) OCSXY(1) = CSXY(1)+1.0 ! force refresh re-draw
	CALL SETANNO(.FALSE.)		! cancel attributes
C
999	CONTINUE
	RETURN
	END
