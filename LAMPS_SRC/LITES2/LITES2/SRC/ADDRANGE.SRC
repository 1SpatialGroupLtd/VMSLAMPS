C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1984-11-08 10:40:50.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE ADDRANGE(BUFTOP,BUFLEN,SELBUFF,IERR)
C
***	IDENT	08NO84
***	MODULE	ADDRANGE
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	31-Oct-1984
C
C Description
C
C	Reads an integer, or an integer range, and updates the bit
C	map, SELBUFF with it
C
	IMPLICIT NONE
C
C arguments
C
C    input
	INTEGER*4	BUFTOP		! top value in bit map
	INTEGER*4	BUFLEN		! length of bit map
C    input/output
	INTEGER*4	SELBUFF(BUFLEN) ! bit map
C    output
	INTEGER*4	IERR		! return code
					! =  0 for success
					! = -1 for error
C
C Included Parameter Files
C
***     PARAMETER/CMN:MOANMESS/		! moan constants
C
C Common Blocks
C
C
C Functions called
C
	LOGICAL*1	RDLONG,RDCHS
C
C Local Variables
C
	INTEGER*4	FIRST,SECOND	! first & second number in range
	BYTE		CHAR		! next character in line
	INTEGER*4	I		! counter
	INTEGER*4	J,K		! temporary variables, to
					! optimise loops
	INTEGER*4	WORD		! word of bitmap to be updated
	INTEGER*4	OFFSET		! bit in word to be set
C
C Start of subroutine
C
	IERR=0
C
C read first integer
C
	IF (RDLONG(FIRST)) GOTO 2000	! Paranoid programming!
					! if subroutine called correctly
					! this should never happen
	SECOND=FIRST			! treat single integer as range
C
C check for '-'
C
	IF (.NOT.RDCHS(CHAR)) THEN	! FIRST is not last integer
					! on line
	   IF (CHAR.EQ.'-') THEN	! we have range
	      IF (RDLONG(SECOND)) THEN	! so read second integer
		 CALL MOAN(MSG_MISSINT,FIRST) ! no integer!
		 IERR=-1
		 GOTO 2000
	      ENDIF
	   ELSE	
	      CALL BSCH		! put char back in buffer, and
				! let main routine sort it out
	   ENDIF
	ENDIF
C
C test for valid range
C
	IF (FIRST.GT.SECOND.OR.FIRST.GT.BUFTOP.OR.SECOND
     &			.GT.BUFTOP) THEN
	   IF (FIRST.GT.SECOND) CALL MOAN(MSG_ILLEGLRNG,FIRST,SECOND)
	   IF (FIRST.GT.BUFTOP) CALL MOAN(MSG_ILLEGLVAL,FIRST,BUFTOP)
	   IF (SECOND.GT.BUFTOP.AND.FIRST.NE.SECOND)
     &			CALL MOAN(MSG_ILLEGLVAL,SECOND,BUFTOP)
	   IERR=-1
	   GOTO 2000
	ENDIF
C
C mark up bit map
C
C first the bits up to the end of the first word (if range is that long)
C
	WORD=FIRST/32
	K=WORD*32
	J=MIN(SECOND,K+31)
	DO 10, I=FIRST,J
	   OFFSET=I-K
	   CALL LIB$INSV(1,OFFSET,1,SELBUFF(WORD+1))
   10	CONTINUE
C
C if range extends into next word,
C
	K=SECOND/32
	IF (WORD.NE.K) THEN
C
C	   fill in complete words
C
	   DO 20, I=WORD+2,K
	      SELBUFF(I)=-1
   20	   CONTINUE
C
C	    and bits in last word
C
	   WORD=K
	   J=WORD*32
	   DO 30, I=J,SECOND
	      OFFSET=I-J
	      CALL LIB$INSV(1,OFFSET,1,SELBUFF(WORD+1))
   30	   CONTINUE
	ENDIF
C
C Return
C
 2000	CONTINUE
	RETURN
	END
