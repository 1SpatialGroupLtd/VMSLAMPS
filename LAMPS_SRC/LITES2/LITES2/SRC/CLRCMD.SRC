C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-07-06 15:57:02.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE CLRCMD(ON_ERROR,ON_ABORT)
C
***	IDENT	06JL90
***	MODULE	CLRCMD
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RJH	21-DEC-1984
C
C Description
C
C    This subroutine is part of the LITES2 Command Interface, and its
C purpose is clear all pending commands.
C
	IMPLICIT NONE
C
C Included Parameter Files
C
***     PARAMETER/CMN:EFNLUN/		! LITES2 logical units
***     PARAMETER/CMN:MOANMESS/		! moan constants
***     PARAMETER/CMN:STAPAR/		! state constants
C
C Common Blocks
C
***	COMMON/CMN:AFTER/
***	COMMON/CMN:DFILRD/		! command filename details
***     COMMON/CMN:DIN/			! command decoding input
***     COMMON/CMN:DVAR/		! command decoding variables
***     COMMON/CMN:GLOBAL/		! global variables
***     COMMON/CMN:LVAR/		! line input variables
***     COMMON/CMN:STATE/		! state variables
***	COMMON/LSL$CMNLSL:TXTC/
C
C argument
	LOGICAL		ON_ERROR	! execute AFTER ERROR command
	LOGICAL		ON_ABORT	! execute AFTER ABORT command
C
C Functions called
C
	INTEGER*4	COMLIN		! reads DCL command line if any
	LOGICAL		ENDLIN		! end of current input line ?
	LOGICAL		BOTSTK		! at base of stack ?
	LOGICAL		MACEXE		! executing any macros ?
	LOGICAL		MACINT		! a macro issued interactively ?
	LOGICAL		RSPINP		! 2nd. level interactive input ?
C
C Local Variables
C
	INTEGER*4	CLILEN		! DCL command line length
	LOGICAL		INIFIN		! init. or recovery finished ?
	LOGICAL		INFIL		! input from command file ?
	LOGICAL		INMAC		! executing any macros ?
	LOGICAL		SINMAC		! a macro issued interactively ?
	LOGICAL		INRESP		! 2nd. level interactive input ?
C
C Set various logicals
C
	INIFIN = (WSIDN .OR. RECODN)
	INFIL = (DSAV .GT. DLO)
	INMAC = MACEXE()
	SINMAC = MACINT()
	INRESP = RSPINP()
C
C Check if recovery or initialisation is still in progress, and abandon
C if necessary
C
	IF ((.NOT. RECODN) .AND. WSIDN) THEN
	   RECODN = .TRUE.		! abandon recovery
	   CALL INFORM(MSG_RECOABA)
	ELSE IF (RECODN .AND. (.NOT. (INITDN .AND. WSIDN))) THEN
	   INITDN = .TRUE.		! abandon initialisation
	   WSIDN = .TRUE.		! abandon wk. stn. init.
	   CALL INFORM(MSG_INITABA)
	ENDIF
C
C Check if command line has been read and if so ignore it
C
	IF (.NOT. CLIDN) THEN
	   CLIDN = .TRUE.		! ignore command line
	   CLILEN = COMLIN()
	   IF (CLILEN .NE. 0) CALL INFORM(MSG_CMDLINIGN)
	ENDIF
C
C Check if input is currently second level interactive and if so abandon
C it
C
	IF (INRESP) THEN
	   DTOP = DSAV			! return to previous level
	   CALL VTSTAT			! update status line
	   CALL INFORM(MSG_RSPINPABA)
	ENDIF
C
C Check if any command files are open, and if so close them
C
	IF (INFIL) THEN
	   CALL CLRFIL			! close files, etc.
	   IF (INIFIN) CALL INFORM(MSG_CMDFILABA)
	ENDIF
C
C Check if a new command file is about to be opened and if so ignore it
C
	IF (NEWFIL) THEN
	   NEWFIL = .FALSE.		! don't open new command file
	   IF (INIFIN .AND. (SINDEX .NE. STATE_MACRO)) THEN
	      CALL INFORM(MSG_CMDFILIGN)
	   ENDIF
	ENDIF
C
C Check if currently in MACRO state
C
	IF (SINDEX .EQ. STATE_MACRO) CALL INFORM(MSG_MACDEFABA)
C
C Check if any macros are currently being executed
C
	IF (INMAC .AND. INIFIN .AND. (.NOT. SINMAC)) THEN
	   CALL INFORM(MSG_MACEXEABA)
	ENDIF
C
C Check if the only pending commands are on the interactive input
C line and if the end of this line has not been reached
C
	IF ((.NOT. MOANED) .AND. INIFIN .AND. BOTSTK()) THEN
	   IF (.NOT. ENDLIN()) CALL INFORM(MSG_INPLINABA)
	ENDIF
C
C Clear stack
C
	CALL CLRSTK
C
C Signal that a new line is required
C
	DNEW = .TRUE.
C
C Output the relevant message to guide the user
C
	IF ((INFIL .OR. INMAC) .AND. (.NOT. SINMAC)) THEN
	   CALL LEARN(MSG_RETINTERACT)
	ELSE
	   CALL LEARN(MSG_READYNXTCMD)
	ENDIF
C
C put AFTER ERROR command on stack, if required,
C and were in macro or command file
C
	IF (ON_ERROR) THEN
	   IF ((INFIL.OR.INMAC).AND.AFTER_ERROR_LEN.GT.0) THEN
	      CALL SETEXT(AFTER_ERROR(1:AFTER_ERROR_LEN))
	      DNEW = .FALSE.		! and say it is on the stack!
	   ENDIF
	ELSEIF (ON_ABORT) THEN
	   IF (AFTER_ABORT_LEN.GT.0) THEN
	      CALL SETEXT(AFTER_ABORT(1:AFTER_ABORT_LEN))
	      DNEW = .FALSE.		! and say it is on the stack!
	   ENDIF
	ENDIF
C
C Reset state
C
	CALL RESET
C
C Return
C
	RETURN
	END
