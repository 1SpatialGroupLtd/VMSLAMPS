C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-08-03 17:47:42.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE GTDGXY(LINE,BUTTON,XY,EXSTSU,ABORT)
C
***	IDENT	03AU93
***	MODULE	GTDGXY
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	22-Nov-1984
C
C Description
C
C	Subroutine to read X and Y coordinates from the digitising
C	table.  The table must have already have been opened.
C
C	----	THIS SUBROUTINE IS INSTALLATION DEPENDENT   ---
C
C --- DECwindows Mouse/Screen menu/Table Monitor/Direct Table/
C                Buttons/DSR version ---
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:MACMEN/
***	PARAMETER/CMN:MOANMESS/
C
***	COMMON/CMN:MENUS/
***	COMMON/CMN:MOTIF_MOUSE/
***	COMMON/CMN:OPTION/
***	COMMON/LSL$CMNLSL:TXTC/
***	COMMON/CMN:VAREFN/
***	COMMON/CMN:WORKS/		! data about workstation
C
	INCLUDE '($SSDEF)'		! system paramaters
C
C Arguments
	INTEGER*4	LINE		! digitiser area that was
					! pressed
					! = 2 for bitpad
					! = 3 for digitiser
	INTEGER*4	BUTTON		! button that was pressed
	REAL		XY(2)		! table coordinates
	REAL		XYR(2)		! root window coords
	LOGICAL		EXSTSU		! .TRUE. if button pressed is
					! second highest defined
	LOGICAL		ABORT		! .TRUE. if button pressed
					! was highest defined, or
					! ^C has been pressed
C
C Functions called
	LOGICAL		STRDTB
	LOGICAL		DIGTRN
	LOGICAL		GTYPAC
	LOGICAL		HADBREAK
	INTEGER*4	TRNBUT
	LOGICAL		HAD_ERROR,READ_ERROR
	LOGICAL		HAD_PUCK,READ_PUCK
	LOGICAL		HAD_STREAM,READ_STREAM
	LOGICAL		GET_MOUSE
	INTEGER		GET_MENU,GET_BUTTON
	EXTERNAL	DECWAST		! completion AST
C
C Local Variables
	INTEGER*4	I		! counter
	INTEGER*4	BUFFLEN
	PARAMETER	(BUFFLEN=40)
	BYTE		BUFF(BUFFLEN)	! buffer for direct table reads
	INTEGER*4	COUNT		! no of chars in typeahead buff
	BYTE		BYTE1		! first byte
	INTEGER*4	MASK
	INTEGER*4	LENGTH		! I*4 value of buffer length
C
C additional variables for using table monitor
	LOGICAL		DTBUP		! to remember if there is a
					! read to direct table up
	INTEGER*4	IERR		! return code
	LOGICAL		RMON		! .TRUE. if using table monitor
	BYTE		BU		! puck button number returned
					! by table montor
	INTEGER*4	IX,IY		! coordinates returned by
					! table monitor
C
	EXSTSU = .FALSE.
	ABORT  = .FALSE.
	IF (DTRON.AND.DTBREAD) THEN
	   CALL DTBKIL(DTBCHN)
	   DTBREAD=.FALSE.
	ENDIF
	DTBUP  = .FALSE.
	RMON   = TABINI.AND.MONOPT.AND..NOT.DTRON
C
C read table ... until we get a good result
C direct table read
10	IF (DTRON.AND..NOT.DTBUP) THEN
	   IF (GTYPAC(DTBCHN,COUNT,BYTE1)) THEN	! check type ahead buff
	      IF (COUNT.GT.MXTYPC) THEN
	         CALL INFORM(MSG_NOMOREBUTS,COUNT/15)
	      ENDIF
	   ENDIF
	   DTBUP=STRDTB(DTBFLG,DTBCHN,DTBOSB,DECWAST,BUFFLEN,BUFF)
	ENDIF
C
C clear flag for control C
	CALL SYS$CLREF(%VAL(CLCFLG))
C
C build event flag mask, and wait for something to happen
	MASK = 0				! clear to start with
	CALL EFWM(MASK,CLCFLG)			! control C
	IF (DTBUP) CALL EFWM(MASK,DTBFLG)	! add direct table read
	IF (RMON) CALL EFWM(MASK,TABPUK,TABERR)	! monitor puck and error
	IF (BALINI) CALL EFWM(MASK,FBFLG,TBFLG)	! mouse buttons, motion
	IF (SCRINI) CALL EFWM(MASK,TABFLG)	! screen menu
C
C and wait for it
C If DECwindows workstation is open, then first go and check if an
C event has already happened - if not then come back to wait
	IF (WKOP(1).OR.WKOP(2)) THEN
	   CALL GUIS_SETAST(.FALSE.)
	   GOTO 165
	ENDIF
160	IF (WKOP(1).OR.WKOP(2)) THEN
	   CALL GUIS_MAIN_LOOP(.TRUE.)
	ELSE
	   CALL SYS$WFLOR( %VAL(CLCFLG), %VAL(MASK) )
	ENDIF
C
C check for control C
165	IF (HADBREAK()) THEN			! check for ^C
	   ABORT=.TRUE.
	   GOTO 999
	ENDIF
C
C check what else we have got
	IF (BALINI) THEN			! ball or bitpad
C
C check the mouse...
	   IF (GET_MOUSE(XY(1),XY(2),XYR(1),XYR(2))) THEN ! tracking button
	      BUTTON = 0
	      IF (BITINI) GOTO 50		! deal with bitpad
	      LINE = 4				! on device 4
	      GOTO 600
	   ENDIF
C
	   BUTTON = GET_BUTTON(XY(1),XY(2),XYR(1),XYR(2)) ! other button
	   IF (BUTTON.NE.0) THEN		! was pressed
	      IF (BITINI) GOTO 50		! deal with bitpad
	      LINE = 4				! on device 4
	      GOTO 600
	   ENDIF
	   GOTO 60
C
C deal with bitpad
50	   XY(1) = XYR(1)		! use root window position
	   XY(2) = XYR(2)
	   LINE = 2			! on bitpad line
	   GOTO 600
	ENDIF
C
60	IF (SCRINI) THEN
C
C check the screen menu...
	   BUTTON = GET_MENU()			! menu box
	   IF (BUTTON.NE.0) THEN		! was probed
	      BUTTON = BUTTON-1			! start at 0
	      LINE = 1				! on device 1
	      GOTO 600
	   ENDIF
	ENDIF
C
	IF (DTBUP.AND.DTBOSB(1).NE.0) GOTO 100
C
C check for input from table monitor
	IF (RMON) THEN
	   IF (HAD_ERROR(IERR)) THEN
	      IF (.NOT.READ_ERROR(TXTBUF,TXTPTR,I,IERR)) THEN
	         CALL INFORM(MSG_TABMONERR,I)
	         CALL INFORM(MSG_STRING,TXTDSC)
	      ENDIF
	      GOTO 10					! try again
	   ELSEIF (HAD_PUCK(IERR)) THEN
	      IF (.NOT.READ_PUCK(BU,IX,IY,IERR)) THEN
	         LINE=DIGLIN
	         BUTTON=BU
	         XY(1)=IX
	         XY(2)=IY
	         IF (DTBUP) CALL DTBKIL(DTBCHN) 	! should not
							! happen 
	         GOTO 600
	      ELSE					! error reading
	         GOTO 10				! TRY AGAIN
	      ENDIF
	   ELSEIF (HAD_STREAM(IERR)) THEN
C
C need to perform READ_STREAM to re-prime the blocking AST, even if
C we are not interested in stream, hence the difference here from the
C other GTDGXYs
	      CALL READ_STREAM(IX,IY,IERR)
	   ENDIF
	ENDIF
C
C or what else can it be?
C OK if on DECwindows workstation - go back to wait
	IF (WKOP(1).OR.WKOP(2)) GOTO 160
	CALL INFORM(MSG_NOINPUT)
	GOTO 10
C
C check direct table
C
100	DTBUP=.FALSE.
	IF (.NOT.DTBOSB(1)) THEN		! error
	   CALL LITES2_SIGNAL(DTBOSB(1))
	   GOTO 10
	ENDIF
C
C translate result of read
C
	LENGTH=DTBOSB(2)			! I*2 -> I*4
	IF (LENGTH.LE.0) GOTO 10
	IF (DIGTRN(BUFF,LENGTH,BUTTON,IX,IY,USEFUN,%VAL(FUNADR))) THEN
	   CALL INFORM(MSG_TABERRREAD,BUFF)   ! error in string
	   GOTO 10
	ELSE
	   LINE=DIGLIN
	   XY(1)=IX
	   XY(2)=IY
	ENDIF
C
C here we have got coordinates from table
600	BUTTON=TRNBUT(BUTTON,LINE)	! normalise button number
C
C set EXSTSU and ABORT flags
	IF (BUTTON.NE.-1) THEN
	   DO 20, I=1,PUKTOP
	      IF (PUKDEV(I).EQ.LINE) THEN
	         IF (BUTTON.EQ.PUKBUT(I)) ABORT=.TRUE.
	         IF (BUTTON.EQ.(PUKBUT(I)-1)) EXSTSU=.TRUE.
	         GOTO 999
	      ENDIF
20	   CONTINUE
	ENDIF
C
C we may have just messed up the outstanding table reads in INTERACT
C so make sure it sets one up again
999	TAREAD=.FALSE.
	IF (DTRON) THEN
	   CALL DTBKIL(DTBCHN)
	   DTBREAD=.FALSE.
	ENDIF
	IF (WKOP(1)) CALL GUIS_SETAST(.TRUE.)
	RETURN
	END
