C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-05-08 13:31:58.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*1 FUNCTION TSTWK(NUMBER,WTYPE,NAME_LEN,NAME,PLANES)
C
***	IDENT	08MY96
***	MODULE	TSTWK
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					CCB	24-April-1985
C
C Description
C
C	Hardware dependent routine to check if workstations allowed
C	 ---- This version is for DECwindows implementation ----
C
C	Returns true if workstation NUMBER is permitted
C	Returns workstation type in WTYPE
C
	IMPLICIT NONE
C
	INCLUDE	'($SSDEF)'
	INCLUDE	'SYS$LIBRARY:DECW$XLIBDEF'
***	COMMON/CMN:WORKS/
C
C arguments
	INTEGER		NUMBER		! workstation (1 or 2)
	INTEGER		WTYPE
	INTEGER		NAME_LEN	! length of program name
	CHARACTER*(*)	NAME		! program name
	INTEGER		PLANES		! number of planes available
C
C functions called
	INTEGER	TRNALL		! LSLLIB, translate logical name
	INTEGER	RDLONG		! LSLLIB, read long integer
	INTEGER	XOpenDisplay
	INTEGER	XDefaultScreenOfDisplay
	INTEGER	XDefaultDepthOfScreen
	INTEGER	GKS_COUNT_BITS
C
C workspace
	CHARACTER*4	TRAN
	INTEGER		MAXCOL
	INTEGER		LOCAL_LEN
	PARAMETER	(LOCAL_LEN = 5)
	CHARACTER*(LOCAL_LEN)	LOCAL
	DATA		LOCAL /'MOTIF'/
	INTEGER		DISPLAY,SCREEN
	INTEGER		SAVED_PLANES
	DATA		SAVED_PLANES/-1/
	SAVE		SAVED_PLANES
	RECORD		/X$VISUAL/VISUAL
	INTEGER		COLS
	INTEGER		I
C
C return program name
	NAME_LEN = MIN(LOCAL_LEN,LEN(NAME))
	NAME = LOCAL(1:NAME_LEN)
C
C both displays allowed
	TSTWK = NUMBER.GT.0.AND.NUMBER.LE.4
	IF (.NOT.TSTWK) GOTO 9999
C
C check if this computer is a workstation
	IF (TRNALL('DECW$DISPLAY',TRAN).EQ.SS$_NOLOGNAM) THEN
	   TSTWK = .FALSE.
	   GOTO 9999
	ENDIF
C
C return a workstation type
C leave 6000 and 7000 alone for primary and secondary
	IF (NUMBER.GT.2.OR.(WTYPE.NE.6000.AND.WTYPE.NE.7000)
     &						) WTYPE = 10000+NUMBER
C
C Determine number of colours available (once and for all)
	IF (SAVED_PLANES.LT.0) THEN
	   SAVED_PLANES = 0
	   DISPLAY = XOpenDisplay(%VAL(0))
	   IF (DISPLAY.NE.0) THEN
	      SCREEN = XDefaultScreenOfDisplay(%VAL(DISPLAY))
	      SAVED_PLANES = XDefaultDepthOfScreen(%VAL(SCREEN))
	      CALL X$DEFAULT_VISUAL_OF_SCREEN(SCREEN,VISUAL)
	      IF (VISUAL.X$L_VISU_CLASS .EQ. X$C_DIRECT_COLOR .OR.
     &		  VISUAL.X$L_VISU_CLASS .EQ. X$C_TRUE_COLOR ) THEN
C
C NB GKS_COUNT_BITS is in GKSMOTIFLIB
C
	         SAVED_PLANES = MIN(
     &			GKS_COUNT_BITS(VISUAL.X$L_VISU_RED_MASK),
     &			GKS_COUNT_BITS(VISUAL.X$L_VISU_GREEN_MASK),
     &			GKS_COUNT_BITS(VISUAL.X$L_VISU_BLUE_MASK) )
	      ENDIF
	      CALL XCloseDisplay(%VAL(DISPLAY))
	   ELSE
C
C Here if DECW$DISPLAY defined, but can't open display.
C Assume people are trying to plot with no display, so assume 8 planes
	      SAVED_PLANES = 8
	   ENDIF
	ENDIF
	
	PLANES = SAVED_PLANES
C
C The rest of LITES2 has not been amended for more than 8 planes
C e.g. length of colour arrays, so restrict to 8 for now
	IF (PLANES.GT.8) PLANES = 8
	MAXCOL = 2**PLANES
C For an 8 or 12 plane system, then if WTYPE=7000, use colours 0-249 or
C 0-4079 (leaving the reserved colours alone), unless logical name
C LSL$DECW_MAX_COLOUR is set to some other maximum number of colours,
C otherwise use 7 or 11 planes.
	COLS = -1
	I = TRNALL('LSL$DECW_MAX_COLOUR',TRAN)
	IF (.NOT.I) I = TRNALL('LSL$UIS_MAX_COLOUR',TRAN)
	IF (I) THEN
	   CALL SETAUX(%REF(TRAN),4)
	   IF (.NOT.RDLONG(I)) COLS = I
	ENDIF
C
	IF (MAXCOL.GE.4096.AND.
     &			(WTYPE.EQ.7000.OR.NUMBER.GT.2)) THEN
	   IF (NUMBER.GT.2) GOTO 8
	   IF (COLS.GT.4096.OR.COLS.LT.2) GOTO 8
	   MAXCOL = COLS-1
	   GOTO 9
8	   MAXCOL = 4079		! allow 0-4079 (12 planes)
9	   CONTINUE
	ELSEIF (MAXCOL.GE.2048) THEN
	   IF (WTYPE.EQ.6000) THEN
	      MAXCOL = 2047		! allow 0-2047 (11 planes)
	   ELSE
	      MAXCOL = 1023		! 10 planes + 1 for refresh
	   ENDIF
	ELSEIF (MAXCOL.GE.256.AND.
     &			(WTYPE.EQ.7000.OR.NUMBER.GT.2)) THEN
	   IF (NUMBER.GT.2) GOTO 10
	   IF (COLS.GT.256.OR.COLS.LT.2) GOTO 10
	   MAXCOL = COLS-1
	   GOTO 11
10	   MAXCOL = 239		! allow 0-239 (8 planes)
11	   CONTINUE
	ELSEIF (MAXCOL.GE.128) THEN
	   IF (WTYPE.EQ.6000) THEN
	      MAXCOL = 127		! allow 0-127 (7 planes)
	   ELSE
	      MAXCOL = 63		! 6 planes + 1 for refresh
	   ENDIF
C
C For a 4 plane system, then if WTYPE=7000, use colours 0-15
C unless logical name LSL$DECW_MAX_COLOUR
C is set to some other maximum number of colours,
	ELSEIF (MAXCOL.GE.16.AND.
     &			(WTYPE.EQ.7000.OR.NUMBER.GT.2)) THEN
	   IF (NUMBER.GT.2) GOTO 12
	   IF (COLS.GT.16.OR.COLS.LT.2) GOTO 12
	   MAXCOL = COLS-1
	   GOTO 13
12	   MAXCOL = 15		! allow 0-15 (4 planes)
13	   CONTINUE
	ELSEIF (MAXCOL.GE.8) THEN	! 4 plane system
	   MAXCOL = 7		! allow 0-7
	ELSEIF (MAXCOL.GE.4) THEN
	   MAXCOL = 3
	ELSE				! mono system
	   MAXCOL = 1		! allow 0-1
	ENDIF
C
14	IF (2**(PLANES-1).LE.MAXCOL) GOTO 9999
	PLANES = PLANES-1
	GOTO 14
C
9999	RETURN
	END
