C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-05-09 10:20:42.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION DSRINIT(ON)
C
***	IDENT	09MY96
***	MODULE	DSRINIT
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					CCB	28-Feb-1989
C
C	Hardware dependant version of KERN DSR initialisation
C	   ----   This version is for MOTIF version   ----
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:MOANMESS/
***	COMMON/CMN:KERN/
***	COMMON/CMN:OPTION/
***	COMMON/CMN:WORKS/
C
C argument
	LOGICAL*1	ON		! turn on?
C
C functions called
	LOGICAL		SETUP_USER
	LOGICAL		CALLR
	LOGICAL		CHKENTRY
C
C Returns .TRUE. if DSR is switched on.
C
	DSRINIT = .FALSE.		! assume off
	IF (.NOT.ON) THEN
	   IF (DSRINI.AND.SD_TYPE.NE.SD_DSR) CALL CALLR(
     &			.FALSE.,%VAL(KERN_ADDRESSES(XDSR_INIT)))
	   GOTO 9999
	ENDIF
C
	IF (.NOT.GRAOPT) GOTO 9999	! need ENABLE GRAPHICS
C
C start up the DSR
C
C load shareable image if required
C
	IF (.NOT.KERN_SETUP) THEN
	   KERN_SETUP = SETUP_USER(KERN_LOG_NAME,KERN_MAX_ROUTINES,
     &				KERN_NAMES,KERN_ADDRESSES,
     &				'Stereo Digitiser routines',
     &				'a Stereo Digitiser',
     &				'ENABLE SD',KERN_MAPPED)
	   IF (.NOT.KERN_SETUP) GOTO 9999
	ENDIF
C
C check that we have found sensible addresses (for DSR_INIT only)
	IF (CHKENTRY(KERN_LOG_NAME,1,KERN_NAMES(XDSR_INIT),
     &	               KERN_ADDRESSES(XDSR_INIT))) GOTO 9999
C
C get Stereo Digitiser type (routine is optional)
	SD_TYPE = SD_DSR	! default to DSR instrument
	KRISS_SCALE = 0.3	! default to 0.3 mm pixels
	IF (KERN_ADDRESSES(XDSR_INQUIRE).NE.0) THEN
	   CALL CALLR(1,SD_TYPE,%VAL(KERN_ADDRESSES(XDSR_INQUIRE)))
	   CALL CALLR(2,KRISS_SCALE,%VAL(KERN_ADDRESSES(XDSR_INQUIRE)))
	ENDIF
C
C initialise, if not done already
	IF (.NOT.CALLR(.TRUE.,%VAL(KERN_ADDRESSES(XDSR_INIT)))) GOTO 9990
CCC	IF (.TRUE.) GOTO 9999		! miss out for now
C
C position to DSR to current cursor position and wait for it
	CALL DSRMOVE(.TRUE.)
C
	DSRINIT = .TRUE.
	GOTO 9999
C
9990	CALL MOAN(MSG_STRING,
     &		'Cannot initialise DSR - ABSOR.DAT file not found')
C
9999	RETURN
	END
C
C
C
	SUBROUTINE DSRMOVE(WAIT)
C
***	IDENT	03JL89
***	MODULE	DSRMOVE
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					CCB	28-Feb-1989
C
C	To move DSR to current cursor position
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:EFNLUN/
***	COMMON/CMN:KERN/
***	COMMON/CMN:MAPS/
***	COMMON/CMN:MASTER/
C
C argument
	LOGICAL		WAIT		! wait for move to complete?
C
C workspace
	REAL*8		X,Y,Z
	SAVE		X,Y,Z
C
C if we don't have a Z to hand, then read present one
C (.FALSE. means read actual coordinate, and not a stored one)
	IF (CSZI.EQ.IFF_ABSENT) THEN
	   CALL CALLR(X,Y,Z,.FALSE.,%VAL(KERN_ADDRESSES(XDSR_READ)))
	ELSE
	   Z = CSXY(3)
	ENDIF
	X = CSXY(1) + LITES2ORG(1)	! LITES2 space -> world coords
	Y = CSXY(2) + LITES2ORG(2)
	CALL CALLR(X,Y,Z,WAIT,%VAL(KERN_ADDRESSES(XDSR_MOVE)))
C
	RETURN
	END
