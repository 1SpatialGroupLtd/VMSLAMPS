pseudo-code rules for LCM squashing:

o	the program is a optimising/diagnostic tool its primary purpose is to
	optimise input code. It will also be used to diagnose user declaration
	and use of variables and macros. 

o	lines are read from the current input file
o	The FILE stack is an array of (filename, file_pointer, position-in-file)
o	when LCM files are opened, their details are added to the FILE stack
o	files are closed after an EOF is detected
o	when LCM files are closed, its entry is removed from the FILE stack
o	The current file is always the last element of the FILE stack
o	The program continues until there are no elements on the FILE stack

o	the program will keep a sorted list of declared variables
o	the program will keep a sorted list of declared macros
o	the program will keep a sorted list of declared labels
o	variables and macros can be cancelled and by assigning a counter,
	a check can be kept on how many times it is declared and cancelled

o	lines terminate with an end-of-line
o	lines may consist of many commands separated by "#"
o	# always delimits commands. There are no commands which can span #s 
o	commands starting with "!" invalidate the remainder of the line
o	commands beginning with "@" are file references
o	commands beginning with "%" are LITES2 primary commands
o	commands beginning with an alphabetic character are macro calls
o	commands beginning with a "." and ending with a ":" are labels
o	all other lines are invalid
o	arguments to commands enclosed in  's are variable substitutions
	the trailing ' is optional. Note that it can be used to substitute 	
	entire lines
o	arguments to commands preceded with "$" are environment variables
o	commands cannot span multiple lines

o	LITES2 primary commands will always be truncated to 4 characters or less
o	leading and trailing spaces will be stripped
o	variables used will be checked against variables declared
o	macros used will be checked against macros declared
o	a report of warnings will be generated by the program (a list file)
	consisting of input lines and warnings. if no warnings are generated 
	this file will be deleted
o	lines will be joined to be no more than 255 characters long.
o	commands which cannot entirely be squashed to the current line will be 
	output to a new line

	

POSSIBLE'S
---------

o	As the program keeps a list of variable and macro names, it will be
	possible to generate unique shortened variable/macro names which would
	make the resulting program appear to be a proper object file. (afterall 
	who can read object code?)

o	if no knowledge of actual LITES2 commands is required it would be easier
	to implement this program in C due to the support of structures.

o	it is possible to use variable substitution to create self-modifying
	code (by substituting commands and variables). It will be assumed that
	users haven't reached that level of sophistication.
