!	FILE	OLIGS_UT_JMPPLM.LCM
!	IDENT	'14SE92'
!
! Copyright ©  Laser-Scan Ltd., Cambridge, England.
! Author				Nick Phillips	10-Jul-1991
!
! MOD	Do string on list entries return	NJP	20-Aug-1992
!	stack_seq, upd_dist, previous
!	upd_dist, orig_dist,next upd_dist
! MOD	Debug timing posts added		NJP	14-Sep_1992

!  JUMP PLM macros
!
% MACRO _UT_JUMP_PLM

   ! this macro is called from the JUMP PLM cascade menu.
   ! It calculates the updated absolute distance for the
   ! given weld/distance

   %JUMP .PLMS_'UT_PLMS'

.PLMS_1:

	% ROUTINE 101 6

		% ROUTINE 101 10 SELECT
		% ROUTINE 101 10 UPD_ABS_DIST			
		% ROUTINE 101 10 FROM WELD_TABLE_'O_PIPE_ID
		% ROUTINE 101 10 WHERE ORIG_WELD = 'UT_WELD
		% ROUTINE 101 10 AND TAPE_NUM = 'UT_TAPE';

		% ROUTINE 101 17 J 'DB_ID

		% TEST DB_STATUS
		% ELSE MESSAGE "Weld 'UT_WELD (Tape 'UT_TAPE') not found"
		% JFALSE .FAIL

		% LET _REAL6 = 'DB_RESULT_VALUE1
		% JUMP _UT_JUMP_ATTR

.PLMS_2:

	% ROUTINE 101 6

		% ROUTINE 101 10 SELECT
		% ROUTINE 101 10 UPD_ABS_DIST
		% ROUTINE 101 10 FROM WELD_TABLE_'O_PIPE_ID
		% ROUTINE 101 10 WHERE ORIG_ABS_DIST
		% ROUTINE 101 10 >= 'UT_DIST'
		% ROUTINE 101 10 AND TAPE_NUM = 'UT_TAPE'
		% ROUTINE 101 10 ORDER BY ORIG_ABS_DIST ASC;

		% ROUTINE 101 17 J 'DB_ID


		% TEST DB_STATUS
		% ELSE MESSAGE "Distance 'UT_DIST' (Tape 'UT_TAPE') is out of range"
		% JFALSE .FAIL

		% LET _REAL6 = 'DB_RESULT_VALUE1
		% JUMP _UT_JUMP_ATTR

.PLMS_3:

	% ROUTINE 101 6

		% ROUTINE 101 10 SELECT
		% ROUTINE 101 10 UPD_ABS_DIST
		% ROUTINE 101 10 FROM WELD_TABLE_'O_PIPE_ID
		% ROUTINE 101 10 WHERE UPD_WELD = 'UT_WELD;

		% ROUTINE 101 17 J 'DB_ID
	
		% TEST DB_STATUS
		% ELSE MESSAGE "Weld 'UT_WELD not found"
 		% JFALSE .FAIL

		% LET _REAL6 = 'DB_RESULT_VALUE1
		% JUMP _UT_JUMP_ATTR

.PLMS_4:

		% LET _REAL6 = 'UT_DIST
		% JUMP _UT_JUMP_ATTR


.PLMS_5:

	% ROUTINE 101 6

	% ROUTINE 101 10 SELECT 
		% ROUTINE 101 10 MAX(UPD_ABS_DIST) 
		% ROUTINE 101 10 FROM WELD_TABLE_'O_PIPE_ID W,
		% ROUTINE 101 10 FTR_TABLE_'O_PIPE_ID F 
		% ROUTINE 101 10 WHERE F.MAP_ID = 'O_CUR_MAP_ID AND
		% ROUTINE 101 10 F.FTR_ID = W.FTR_ID;
	

	%TEST DB_STATUS
		% ELSE % MESSAGE Error obtaining distance
		% JFALSE .FAIL

	%ROUTINE 101 17 J 'DB_ID

	% TEST DB_STATUS
		% ELSE % MESSAGE End of Strip Map is not tied in
		% JFALSE .FAIL


	% LET _REAL6 = 'DB_RESULT_VALUE1
	% TEST _REAL6 > 0.0
		% JTRUE _UT_JUMP_ATTR
		% ELSE % PING
		% ELSE % MESSAGE No Tied-In points found
		% JFALSE .FAIL

.PLMS_6:

	% ROUTINE 101 6

	% ROUTINE 101 10 SELECT 
		% ROUTINE 101 10 MIN(UPD_ABS_DIST) 
		% ROUTINE 101 10 FROM WELD_TABLE_'O_PIPE_ID W,
		% ROUTINE 101 10 FTR_TABLE_'O_PIPE_ID F 
		% ROUTINE 101 10 WHERE F.MAP_ID = 'O_CUR_MAP_ID AND
		% ROUTINE 101 10 F.FTR_ID = W.FTR_ID;

	%TEST DB_STATUS
		% ELSE % MESSAGE Error obtaining distance
		% JFALSE .FAIL

	%ROUTINE 101 17 J 'DB_ID

	% TEST DB_STATUS
		% ELSE % MESSAGE Start of Strip Map is not tied in
		% JFALSE .FAIL


	% LET _REAL6 = 'DB_RESULT_VALUE1
	% TEST _REAL6 > 0.0
		% JTRUE _UT_JUMP_ATTR
		% ELSE % PING
		% ELSE % MESSAGE No Tied-In points found
		% JFALSE .FAIL

.FAIL:

% ENDMACRO



%MACRO _UT_JUMP_ATTR

! main macro for JUMP PLM 

  %TEST DEBUG
    %THEN %MESSAGE JUMP PLM started at '$DATETIME'


  %LET L = 0           ! flag whether any rows have been fetched
                       ! set to true when the first row is fetched 
  %LET _INT7 = 0       ! previous ftr_code (to compare with current one)
  %LET _CHAR9 = " "	
  %LET _CHAR10 = " "
	
	% FILE SELECT 1
	% FILE WRITE ADD LOCK
	% FILE WRITE LIST CLEAR PLM_DISP
	% FILE WRITE REMOVE WELD_WINDOW
	% FILE WRITE TOGGLE OFF OVER_WINDOW
	% LET O_WIND_ON = N
	% LET W = 0
	% LET STRING = "0.0"
	% LET _INT1 = 0
	% LET _INT5 = 1

	% ROUTINE 101 6
	% ROUTINE 101 10 SELECT
	% ROUTINE 101 10 TAPE_NUM,
	% ROUTINE 101 10 ORIG_WELD,
	% ROUTINE 101 10 UPD_ABS_DIST,
	% ROUTINE 101 10 ORIG_ABS_DIST,
	% ROUTINE 101 10 UPD_WELD,
	% ROUTINE 101 10 FTR_ID,
	% ROUTINE 101 10 COMMENT,
	% ROUTINE 101 10 FTR_TYPE,
	% ROUTINE 101 10 STACK_SEQ
	% ROUTINE 101 10 FROM
	% ROUTINE 101 10 WELD_TABLE_'O_PIPE_ID	
	% ROUTINE 101 10 WHERE
	% ROUTINE 101 10 UPD_ABS_DIST BETWEEN
	% ROUTINE 101 10 ('_REAL6 - 'UT_RANGE)
	% ROUTINE 101 10 AND ('_REAL6 + 'UT_RANGE)

	% TEST O_ORDER = 0
	  % THEN % ROUTINE 101 10 ORDER BY STACK_SEQ,ORIG_WELD,UPD_ABS_DIST,FTR_ID;
	% TEST O_ORDER = 1
	  % THEN ROUTINE 101 10 ORDER BY UPD_ABS_DIST,FTR_TYPE,FTR_ID;
	% TEST O_ORDER = 2
	  % THEN % ROUTINE 101 10 ORDER BY STACK_SEQ,ORIG_WELD,FTR_TYPE,UPD_ABS_DIST,FTR_ID;

	% TEST DB_STATUS
	% JFALSE _OLIGS_ERROR "Error selecting weld entries"

	% ROUTINE 101 17 J '_INT5

	% LET UT_PRE_ABS = 'DB_RESULT_VALUE3'

	% ROUTINE 101 17 J '_INT5

	% TEST DB_STATUS 
	  % JFALSE .END

	! set scratch variable L to true and use as a flag to 
	! say that at least one record has been found
	% LET L = 1

.RETRIEVE:

	% TEST DB_STATUS 
	  % JFALSE .END

	! truncate values for update absolute distance

	% LET UT_STKS = 'DB_RESULT_VALUE9'
	% LET UT_FTID = 'DB_RESULT_VALUE6
	% LET UT_JMP_ABS = 'DB_RESULT_VALUE3'

! if original absolute distance is null 

	% TEST DB_RESULT_NULL4
          % JFALSE .PAD_MAGTAPE
	% LET UT_ORIGD = -1000
        % LET _CHAR6 = "        "      
        % LET _CHAR2 = "       "
        % LET _CHAR3 = "     "
	% JUMP .MAGTAPE	
.PAD_MAGTAPE:
	  % ROUTINE 101 68 1 2 'DB_RESULT_VALUE4
	  % ASK STRING PAD 8 "'SIG_STR"
	  % LET _CHAR6 = "'$ASK_CHAR1"
          % LET UT_ORIGD = 'DB_RESULT_VALUE4'

.MAGTAPE: 
! MAGTAPE number
	  % LET _INT10 = 'DB_RESULT_VALUE1'	  ! use in do string
	  % ASK STRING PAD 7 "'DB_RESULT_VALUE1"  
	  % LET _CHAR2 = "'$ASK_CHAR1"             

! ORIGINAL weld
	% ASK STRING PAD 5 "'DB_RESULT_VALUE2"
	% LET _CHAR3 = "'$ASK_CHAR1"
	% LET _INT8 = '_CHAR3

! UPDATE weld
	% ASK STRING PAD 6 "'DB_RESULT_VALUE5"
	% LET _CHAR4 = "'$ASK_CHAR1"
	% LET _INT9 = '_CHAR4

	% LET _CHAR5 = "'DB_RESULT_VALUE7"

	% ROUTINE 101 68 1 2 'DB_RESULT_VALUE3
	% ASK STRING PAD 7 "'SIG_STR"
	% LET _CHAR7 = "'$ASK_CHAR1"
	% LET _REAL1 = '_CHAR7
	% LET X = '_CHAR7 - 'STRING

	% TEST _INT1 = 0
	  % THEN LET X = 0
	  % THEN LET _INT1 = 1

	  % TEST DB_RESULT_VALUE8 = 0
	    % JFALSE .FEATURE

	! assign upd_dist to string UNLESS weld has been deleted  
	% TEST DB_RESULT_NULL5	
           % JFALSE .WELD_NUMBER 
	! if true, this is a deleted weld

	! set upd_weld, upd_abs_dist, rel_dist and comment to blanks

		% LET _CHAR4 = "      "
		% LET _CHAR7 = "       "
		% LET _CHAR8 = "       "
                % JTRUE .WELD_ENTRY

.WELD_NUMBER:                
		% LET STRING = 'SIG_STR

		% ROUTINE 101 68 1 2 'X
		% ASK STRING PAD 7 "'SIG_STR'"
		% LET _CHAR8 = "'$ASK_CHAR1"

		! test if weld is update only

		% JUMP .WELD_ENTRY 

.FEATURE:
	
		% TEST DB_RESULT_NULL5
                  %JFALSE .WF_NOT_NULL
		% LET _INT9 = 0
		% LET _CHAR2 = "       "
		% LET _CHAR3 = "     "
		% LET _CHAR4 = "      "

		! truncate calculated relative distance
		! and assign to _CHAR8
.WF_NOT_NULL:
		% ROUTINE 101 68 1 2 'X
		% ASK STRING PAD 7 "'SIG_STR'"
		% LET _CHAR8 = "'$ASK_CHAR1"

		! test if the entry is a defect

		% TEST DB_RESULT_VALUE8 = 2					
			% JFALSE .FTR_CHECK

		! select azimuth and situ

		% ROUTINE 101 8 2
	
		% ROUTINE 101 10 select    AZIMUTH,
		% ROUTINE 101 10           SITU
		% ROUTINE 101 10 from      DFCT_TABLE_'O_PIPE_ID'
		% ROUTINE 101 10 where     FTR_ID = 'DB_RESULT_VALUE6';

		% TEST DB_STATUS
			% JFALSE _OLIGS_ERROR "SQL error in SELECT AZIMUTH,SITU from DFCT_TABLE_..."

		% ROUTINE 101 17 J 'DB_ID	

		% TEST DB_STATUS
			% ELSE MESSAGE WARNING no defect details found in dfct_table for ftr_id 'db_result_value6
			% JFALSE .DFCT_ENTRY

		! if both null - then no descriptor

		% TEST DB_RESULT_NULL1
		% AND DB_RESULT_NULL2
                   % THEN % LET UT_DFC_DSC = " "
		   % JTRUE .DFCT_ENTRY

		! if not both null, situ must be a text string 

		% LET UT_DFC_DSC = "- 'DB_RESULT_VALUE2'"

		! if situ is EXTERNAL, azimuth must be a text string

		% TEST DB_RESULT_NULL1
		   % JTRUE .DFCT_ENTRY

		% ASK STRING EXTRACT 1 2 'DB_RESULT_VALUE1
		% LET CH = "'$ASK_CHAR1'-"
		% ASK STRING EXTRACT 3 4 'DB_RESULT_VALUE1
		% LET CH = 'CH''$ASK_CHAR1
		% TEST DB_RESULT_NULL2
		   % THEN % LET UT_DFC_DSC = "- 'CH"
		   % ELSE % LET UT_DFC_DSC = "'UT_DFC_DSC' - 'CH'" 

		% JUMP .DFCT_ENTRY

.FTR_CHECK:

		% ROUTINE 101 8 2

		% ROUTINE 101 10 SELECT
		% ROUTINE 101 10 FTR_CODE,
		% ROUTINE 101 10 FTR_DESC_ONE,
		% ROUTINE 101 10 FTR_DESC_TWO
		% ROUTINE 101 10 FROM FTR_TABLE_'O_PIPE_ID
		% ROUTINE 101 10 WHERE FTR_ID = 'DB_RESULT_VALUE6;

                % TEST DB_STATUS
                   %JFALSE _OLIGS_ERROR "SQL error in SELECT FTR_CODE,FTR_DESC_ONE,FTR_DESC_TWO FROM FTR_TABLE_..."

		% ROUTINE 101 17 J 'DB_ID

                % TEST DB_STATUS
                   %JFALSE _OLIGS_ERROR "No Feature Record found for Feature 'DB_RESULT_VALUE6 in FTR_TABLE_'O_PIPE_ID"

!  if the FTR_CODE = 999 (Point Only) do not print the line

		% TEST DB_RESULT_VALUE1 = 999
		        % THEN %LET UT_PRE_ABS = 'UT_JMP_ABS'
                        % THEN %ROUTINE 101 17 J '_INT5
			% JTRUE .RETRIEVE

		% TEST _INT7 = 'DB_RESULT_VALUE1 
		% AND _CHAR9 = 'DB_RESULT_VALUE2	
		% AND _CHAR10 = 'DB_RESULT_VALUE3

		% LET _INT7 = 'DB_RESULT_VALUE1 
		% LET _CHAR9 = 'DB_RESULT_VALUE2	
		% LET _CHAR10 = 'DB_RESULT_VALUE3
		% JTRUE .FTR_ENTRY

! now call _O_TRANS_FC to produce comments

	%TEST DB_RESULT_VALUE1 >39#AND DB_RESULT_VALUE1 < 46
	  %THEN _O_TRANS_FC 'DB_RESULT_VALUE1 NULL 'DB_RESULT_VALUE3  
	  %ELSE _O_TRANS_FC 'DB_RESULT_VALUE1 'DB_RESULT_VALUE2 'DB_RESULT_VALUE3  

.FTR_ENTRY:

% LET _CHAR1 =  "'_CHAR2 '_CHAR3 '_CHAR6 '_CHAR4 '_CHAR7 '_CHAR8 '_CHAR5 'O_DESC_B"

% ASK STRING EXTRACT 1 80 "'_CHAR1"
% LET _CHAR1 = "'$ASK_CHAR1'"


.FTR_WRITE:

	%ROUTINE 101 17 J '_INT5

%FILE SELECT 1
%FILE WRITE LIST ADD "'_CHAR1" "SEND _UT_JUMP_HLT 1 '_REAL1 'UT_FTID '_INT10 '_INT8 '_INT9 ""'_CHAR5'"" '_CHAR8' 'UT_JMP_ABS' 'UT_PRE_ABS' 'UT_STKS' 'UT_ORIGD' 'DB_RESULT_VALUE3' 'DB_RESULT_VALUE5'" PLM_DISP

%LET UT_PRE_ABS = 'UT_JMP_ABS'
%JUMP .RETRIEVE



.WELD_ENTRY:

%ROUTINE 101 17 J '_INT5

% LET _CHAR1 = "'_CHAR2 '_CHAR3 '_CHAR6 '_CHAR4 '_CHAR7 '_CHAR8 '_CHAR5'" 

%FILE SELECT 1
%FILE WRITE LIST ADD "'_CHAR1" "SEND _UT_JUMP_HLT 0 '_REAL1 'UT_FTID '_INT10 '_INT8 '_INT9 ""'_CHAR5'"" '_CHAR8' 'UT_JMP_ABS' 'UT_PRE_ABS' 'UT_STKS' 'UT_ORIGD' 'DB_RESULT_VALUE3' 'DB_RESULT_VALUE5'" PLM_DISP
 
%LET UT_PRE_ABS = 'UT_JMP_ABS'
% JUMP .RETRIEVE



.DFCT_ENTRY:

%ROUTINE 101 17 J '_INT5

%LET _CHAR1 = "'_CHAR2 '_CHAR3 '_CHAR6 '_CHAR4 '_CHAR7 '_CHAR8 '_CHAR5' 'UT_DFC_DSC'" 

% ASK STRING EXTRACT 1 80 "'_CHAR1"
% LET _CHAR1 = "'$ASK_CHAR1"


.DFCT_WRITE:

%FILE WRITE LIST ADD "'_CHAR1" "SEND _UT_JUMP_HLT 2 '_REAL1 'UT_FTID '_INT10 '_INT8 '_INT9 ""'_CHAR5'"" '_CHAR8' 'UT_JMP_ABS' 'UT_PRE_ABS' 'UT_STKS' 'UT_ORIGD' 'DB_RESULT_VALUE3' 'DB_RESULT_VALUE5'" PLM_DISP

%LET UT_PRE_ABS = 'UT_JMP_ABS'
%JUMP .RETRIEVE

.END:

	% TEST DEBUG
          % THEN %MESSAGE JUMP PLM Finished at '$DATETIME'
	% FILE SELECT 1
	% FILE WRITE ADD WELD_WINDOW
	% LET O_WIND_ON = Y
	% FILE WRITE TOGGLE ON OVER_WINDOW
	% FILE WRITE REMOVE LOCK

	% TEST L = 0			! no rows selected
        % ABORT FALSE
	 % THEN FILE WRIT LIST ADD "    NO PLM DATA FOUND WITHIN 'UT_RANGE metres of SELECTION  " " " PLM_DISP
	 % THEN FILE WRIT LIST ADD "    Use PLM Summary option in SHOW to check the PLM data range" " " PLM_DISP


% ENDMACRO


% MACRO _UT_JUMP_INIT

! macro to initialise jump plm list box. Called at end of OLIGS.LCM

%FILE SELECT 1
% FILE WRITE LIST ADD "*******************************************************" " " PLM_DISP
% FILE WRITE LIST ADD "*******************************************************" " " PLM_DISP
% FILE WRITE LIST ADD "****OOOOOOOOO**LLL*********II***GGGGGGGG***************" " " PLM_DISP
% FILE WRITE LIST ADD "****OOOOOOOOO**LL**********II**GGGGGGGG****************" " " PLM_DISP
% FILE WRITE LIST ADD "****OO*****OO**LL**********II**GG**********************" " " PLM_DISP
% FILE WRITE LIST ADD "****OO*****OO**LL**********II**GG**********************" " " PLM_DISP
% FILE WRITE LIST ADD "****OO*****OO**LL**********II**GG**********************" " " PLM_DISP
% FILE WRITE LIST ADD "****OO*****OO**LL*******L**II**GG**********************" " " PLM_DISP
% FILE WRITE LIST ADD "****OOOOOOOOO**LLLLLLLLLL**II***GGGGGGG****************" " " PLM_DISP
% FILE WRITE LIST ADD "****OOOOOOOOO**LLLLLLLLLL**II****GGGGGGG***************" " " PLM_DISP
% FILE WRITE LIST ADD "*******************************************************" " " PLM_DISP
% FILE WRITE LIST ADD "*******************************************************" " " PLM_DISP
% FILE WRITE LIST ADD "*******************************************************" " " PLM_DISP
% FILE WRITE LIST ADD "*******************************************************" " " PLM_DISP
% FILE WRITE LIST ADD "*******************************************************" " " PLM_DISP
% FILE WRITE LIST ADD "*******************************************************" " " PLM_DISP
% FILE WRITE LIST ADD "*******************************************************" " " PLM_DISP
% FILE WRITE LIST ADD "*******************************************************" " " PLM_DISP

% FILE WRITE ADD WELD_WINDOW
% WAIT 1
% FILE WRITE REMOVE WELD_WINDOW

% ENDMACRO


%MACRO _UT_JUMP_TIE

! called from DO string when user clicks on an entry in the weld window. 
! It assigns the tie in variables for tape number and original weld to
! the tape number and orig weld selected and populates the widgets in
! boxes APPL_TIE_ENTER and APPL_DEF_ENTER

	! check that tie in task has been loaded
	%FILE SELECT 1
	%TEST AP_TIE = 1
	  %JFALSE .DEF

        ! check that the selected weld is not a deleted weld
        %TEST UT_UPWE = 0
	  %JTRUE .END

	%LET TI_WELD = 'UT_ORWE
	%LET UT_TN = 'UT_TAPE

	%FILE WRITE TEXT VALUE "'TI_WELD'" TXT_TIE_PARA
	%FILE WRITE TEXT VALUE "'UT_TN'" TXT_TIE_PARB

.DEF:

	! check that tie in task has been loaded
	%FILE SELECT 1
	%TEST AP_DEF = 1
	   %JFALSE .END

        !check that the selected weld is not a deleted weld
        %TEST UT_UPWE = 0
	   %JTRUE .END

        %LET DEF_WELD = 'UT_ORWE
	%LET DEF_TN = 'UT_TAPE

	%FILE WRITE TEXT VALUE "'DEF_WELD'" TXT_DEF_PARA
	%FILE WRITE TEXT VALUE "'DEF_TN'" TXT_DEF_PARB

.END:
%ENDMACRO



%MACRO _PLM_SIG

! increments the updated absolute distance of the selected weld window
! feature entry by UT_PLM_SIG

_O_DB_TRANS ROLLBACK "READ WRITE"

%ROUTINE 101 10 UPDATE WELD_TABLE_'O_PIPE_ID'
%ROUTINE 101 10 SET UPD_ABS_DIST = (UPD_ABS_DIST + 'UT_PLM_SIG')
%ROUTINE 101 10 WHERE FTR_ID = 'UT_FTID' AND FTR_TYPE = 1;

_O_CHECK_STATUS  "Error incrementing feature distance"
%ROUTINE 101 5 COMMIT
%ENDMACRO



%MACRO _UT_JUMP_HLT

! called to assign variables when user highlights a weld window line

%LET UT_FTTYPE = '$P1'
%LET _REAL6 = '$P2'
%LET UT_FTID = '$P3'
%LET UT_TAPE = '$P4'
%LET UT_ORWE = '$P5'
%LET UT_UPWE = '$P6'
%LET UT_FTC = '$P7'
%LET UT_FTREL = '$P8'
%LET UT_ABS = '$P9'
%LET UT_PREVIOUS_ABS = '$P10'
%LET UT_STACK = '$P11'
%LET UT_ORIG_DIST = '$P12'
%LET UT_NEXT_UPD = '$P13'
%LET UT_NEXT_UPW = '$P14'
%TEST UT_FTTYPE <> 1
  %JTRUE _UT_JUMP_TIE

%ENDMACRO
