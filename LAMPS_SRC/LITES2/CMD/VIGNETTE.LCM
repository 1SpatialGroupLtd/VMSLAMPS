!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! LITES2 Vignette Generation facility                        !
! Copyright Laser-Scan Laboratories Ltd., Cambridge, England !
!                                                            !
! Author   - Matt Wenham  -  9th Dec 1997                    !
! Modified - Clarke Brunt - 19th Jun 1998                    !
! Modified - Clarke Brunt - 13th Jul 1998                    !
! Modified - Clarke Brunt - 17th Jul 1998                    !
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

%abandon

%enable substitution
%enable sort
%sort priority

%ask status variable _tempb
%test $ask_int 1 = 0
%then %declare integer _tempb

%let _tempb = '$optinfo
%disable inform
%ask status macro _del_if_defined
%test $ask_int 1
%then %cancel macro _del_if_defined
%test _tempb
%then %enable inform

%macro _del_if_defined
%ask status '$p1' '$p2'
%test $ask_int 1 = 0
%abort true
%let _tempb = '$optinfo
%disable inform
%cancel '$p1 '$p2
%test _tempb
%then %enable inform
%endmacro

_del_if_defined macro _vig_sel_bad
%macro _vig_sel_bad
%endmacro

_del_if_defined macro viginit
%macro viginit

%abandon

%ask status variable _neat_box_
%test $ask_int 1 = 0
%then %declare real _neat_box_4
_del_if_defined variable _TEMPX
_del_if_defined variable _TEMPY
_del_if_defined variable _TEMPI
_del_if_defined variable _TEMPJ
_del_if_defined variable _TEMPK
_del_if_defined variable _THIS_FSN
_del_if_defined variable _VIG_FC
_del_if_defined variable _FIRST_EDGE
_del_if_defined variable _LAST_EDGE
_del_if_defined variable VIG_MOUSE

%ask status variable vig_buffer_dist
%test $ask_int 1 = 0
%then %declare real vig_buffer_dist
%then %let vig_buffer_dist = 50

%ask status variable vig_solid_dist
%test $ask_int 1 = 0
%then %declare real vig_solid_dist
%then %let vig_solid_dist = 10

%ask status variable vig_fade_dist
%test $ask_int 1 = 0
%then %declare real vig_fade_dist
%then %let vig_fade_dist = 10

%ask status variable vig_start_fc
%test $ask_int 1 = 0
%then %declare integer vig_start_fc
%then %let vig_start_fc = 10002

%ask status variable vig_no_fcs
%test $ask_int 1 = 0
%then %declare integer vig_no_fcs
%then %let vig_no_fcs = 10

%ask status variable vig_coast_fc
%test $ask_int 1 = 0
%then %declare integer vig_coast_fc
%then %let vig_coast_fc = 10000

%ask status variable vig_region_fc
%test $ask_int 1 = 0
%then %declare integer vig_region_fc
%then %let vig_region_fc = 10001

%DECLARE REAL _TEMPX
%DECLARE REAL _TEMPY
%DECLARE INTEGER _TEMPI
%DECLARE INTEGER _TEMPJ
%DECLARE INTEGER _TEMPK
%DECLARE INTEGER _THIS_FSN
%DECLARE INTEGER _VIG_FC
%DECLARE INTEGER _FIRST_EDGE
%DECLARE INTEGER _LAST_EDGE
%DECLARE CHAR VIG_MOUSE

%test $p1 = ""
%else %let vig_buffer_dist = '$p1'

%test $p2 = ""
%else %let vig_solid_dist = '$p2'

%test $p3 = ""
%else %let vig_fade_dist = '$p3'

%test $p4 = ""
%else %let vig_start_fc = '$p4'

%test $p5 = ""
%else %let vig_no_fcs = '$p5'

%test $p6 = ""
%else %let vig_coast_fc = '$p6'

%test $p7 = ""
%else %let vig_region_fc = '$p7'

%endmacro

viginit

! _snap_to_neat is used by vigcheck. If the start or end of a feature is very
! close to the neat line it lets the user move the point onto the neat line.
! Sets _tempi to -1 if user chooses to do so.

_del_if_defined macro _snap_to_neat
%macro _snap_to_neat

%test $found					! Get out if nothing found
%abort false

%let vig_mouse = "XXXX"
%test $first					! Check for first or last point
%then %let vig_mouse = "Start"
%test $last
%then %let vig_mouse = "End"
%test vig_mouse = "XXXX"
%abort true					! Get out if neither

! Find which neat line edge the point is closest to, and how far away it is

%let _tempx = abs ('_neat_box_1' - '$cursx')
%let _tempi = 1

%let _tempy = abs ('_neat_box_2' - '$cursx')
%test _tempy < '_tempx'
%then %let _tempx = '_tempy'
%then %let _tempi = 2

%let _tempy = abs ('_neat_box_3' - '$cursy')
%test _tempy < '_tempx'
%then %let _tempx = '_tempy'
%then %let _tempi = 3

%let _tempy = abs ('_neat_box_4' - '$cursy')
%test _tempy < '_tempx'
%then %let _tempx = '_tempy'
%then %let _tempi = 4

! If the distance is less than 0.05, ask whether to snap point to neat line

%test _tempx < 0.05
%abort false

%message "'vig_mouse' of this feature is close to neat line. Move it onto neat line?"
%inquire vig_mouse "Mouse Button 2 or Return to move, Mouse Button 3 or ""N"" to leave"
%test vig_mouse = "MOUSE3"
%or vig_mouse = "n"
%or vig_mouse = "N"
%abort true

! Move point onto neat line

%edit
%test _tempi = 1
%then %pos '_neat_box_1' '$cursy'
%test _tempi = 2
%then %pos '_neat_box_2' '$cursy'
%test _tempi = 3
%then %pos '$cursx' '_neat_box_3'
%test _tempi = 4
%then %pos '$cursx' '_neat_box_4'
%end

%search last
%let _tempi = -1

%endmacro

_del_if_defined macro _zoom_feat
%macro _zoom_feat
%let _tempx = ('$box1' + '$box2') / 2
%let _tempy = ('$box3' + '$box4') / 2
%position '_tempx' '_tempy'
%let _tempx = ('_neat_box_2' - '_neat_box_1') / ('$BOX 2' - '$BOX 1')
%let _tempy = ('_neat_box_4' - '_neat_box_3') / ('$BOX 4' - '$BOX 3')
%test _tempx > '_tempy'
%then %let _tempx = '_tempy'
%test _tempx > 20
%then %let _tempx = 20
%let _tempx = '_tempx' / '$ZOOM'
%zoom '_tempx'
%endmacro

! _add_corner sets condition flag true if corner added, else false
_del_if_defined macro _add_corner
%macro _add_corner

! Add corner $P1 of the neat box to region 2. Corners are numbered 1-4
! starting at bottom left. Nothing done if $P1 outside this range.

%test $p1 = 1
%then %region 2 point '_neat_box_1' '_neat_box_3'
%abort true
%test $p1 = 2
%then %region 2 point '_neat_box_1' '_neat_box_4'
%abort true
%test $p1 = 3
%then %region 2 point '_neat_box_2' '_neat_box_4'
%abort true
%test $p1 = 4
%then %region 2 point '_neat_box_2' '_neat_box_3'
%abort true
%endmacro

_del_if_defined macro _close_long
%macro _close_long

! Close region 2 corresponding to last found feature the 'long' way around
! the neat line. Feature ends on edge $P1 of the neat line, and $P2 corners
! are to be added. $P3 can be set to a single dash (minus sign) to reverse the
! direction - use with caution, results may be unpredictable.

! First need to add corner nearest to last point on feature, and then traverse
! around the square. Find which way feature has been digitised. If feature
! (region) runs clockwise, need to advance around edge anti-clockwise, and
! vice versa. Direction held in _tempi: 1 is clockwise, -1 is anti-clockwise.

%let _tempx = '$REGIONAREA 2'
%test _tempx > 0
%then %let _tempi = '$P3'-1
%else %let _tempi = '$P3'1

! Find first corner to add, store in _tempj. Assume we're advancing clockwise.

%test $p1 = 1
%then %let _tempj = 2
%test $p1 = 2
%then %let _tempj = 4
%test $p1 = 3
%then %let _tempj = 1
%test $p1 = 4
%then %let _tempj = 3

! Adjust if we're advancing anti-clockwise

%test _tempi = -1
%then %let _tempj = '_tempj' - 1
%test _tempj = 0
%then %let _tempj = 4

! Now add $P2 corners, using _tempk as a counter.

%let _tempk = '$P2'
.add_next_corner:
_add_corner '_tempj'
%let _tempj = '_tempj' + '_tempi'
%test _tempj = 0
%then %let _tempj = 4
%test _tempj = 5
%then %let _tempj = 1

%let _tempk = '_tempk' - 1
%test _tempk = 0
%jfalse .add_next_corner

%endmacro

! _make_box is used by viginner. It constructs a rectangular region
! round the neatline plus a margin.

_del_if_defined macro _make_box
%macro _make_box
%test $region '$p1'
%then %cancel region '$p1'
%let _tempx = '_neat_box_1' - '$p2' 
%let _tempy = '_neat_box_3' - '$p2'
%region '$p1' point '_tempx' '_tempy'
%let _tempx = '_neat_box_2' + '$p2' 
%region '$p1' point '_tempx' '_tempy'
%let _tempy = '_neat_box_4' + '$p2'
%region '$p1' point '_tempx' '_tempy'
%let _tempx = '_neat_box_1' - '$p2' 
%region '$p1' point '_tempx' '_tempy'
%endmacro

! _check_adjacent sets condition flag true if edges were adjacent, else false
_del_if_defined macro _check_adjacent
%macro _check_adjacent

%test _first_edge = 1                            ! Check for bottom left corner
%and _last_edge = 3
%then _add_corner 1
%abort true

%test _first_edge = 3                            ! Check bottom left again
%and _last_edge = 1
%then _add_corner 1
%abort true

%test _first_edge = 2                            ! Check for bottom right corner
%and _last_edge = 3
%then _add_corner 4
%abort true

%test _first_edge = 3                            ! Check bottom right again
%and _last_edge = 2
%then _add_corner 4
%abort true

%test _first_edge = 1                            ! Check for top left corner
%and _last_edge = 4
%then _add_corner 2
%abort true

%test _first_edge = 4                            ! Check top left again
%and _last_edge = 1
%then _add_corner 2
%abort true

%test _first_edge = 2                            ! Check for top right corner
%and _last_edge = 4
%then _add_corner 3
%abort true

%test _first_edge = 4                            ! Check bottom left again
%and _last_edge = 2
%then _add_corner 3
%abort true

%endmacro

_del_if_defined macro get_neat
%macro get_neat

%test $found
%jtrue .neat_feat

%inquire _neat_box_1 "X-coordinate of left of neat line? "
%inquire _neat_box_2 "X-coordinate of right of neat line? "
%inquire _neat_box_3 "Y-coordinate of bottom of neat line? "
%inquire _neat_box_4 "Y-coordinate of top of neat line? "
%jump .got_neat

.neat_feat:

%let _neat_box_1 = '$BOX 1
%let _neat_box_2 = '$BOX 2
%let _neat_box_3 = '$BOX 3
%let _neat_box_4 = '$BOX 4
%aba

.got_neat:

%message "Position of neat line established"
%message

%endmacro

! vigregion allows the user to define a region of interest such as a single
! coastline and associated islands. Region define by a single feature of FC
! VIG_REGION_FC. This is then used by vigbuffer to exclude features when
! bufferring. Region stored in REGION 1.

_del_if_defined macro vigregion
%macro vigregion

%aba

%test $region 1
%then %cancel region 1

%select all
%select fc 'vig_region_fc'

%search nearest
%region 1
%del
%draw region 1

%endmacro

_del_if_defined macro vigcheck
%macro vigcheck

%aba
! Set up region 3 to be area of neat line.
_make_box 3 0

_vig_sel
_del_if_defined macro _vig_sel_bad
%save selections _vig_sel_bad

%let _tempb = '$optinfo
%disable inform
%search all

.check_next_feat:
%let _this_fsn = '$FSN

%test $inregion 3
%jtrue .check_if_closed
%enable inform
%message "Feature FSN '$FSN' lies outside neat line."
%disable inform
%aba
_vig_sel_bad
%select fsn '_this_fsn
%cancel macro _vig_sel_bad
%save selections _vig_sel_bad
_vig_sel
%search last

.check_if_closed:
%test $closed
%jtrue .feat_closed

%first
%test $cursx='_neat_box_1
%or   $cursx='_neat_box_2
%or   $cursy='_neat_box_3
%or   $cursy='_neat_box_4
%jtrue .check_last
%enable inform
%message "Open feature FSN '$FSN' does not start on neat line."
_snap_to_neat
%test _tempi = -1
%jtrue .check_last
%disable inform
%aba
_vig_sel_bad
%select fsn '_this_fsn
%cancel macro _vig_sel_bad
%save selections _vig_sel_bad
_vig_sel
%search last

.check_last:
last
%test $cursx='_neat_box_1
%or   $cursx='_neat_box_2
%or   $cursy='_neat_box_3
%or   $cursy='_neat_box_4
%jtrue .check_intersect
%enable inform
%message "Open feature FSN '$FSN' does not end on neat line."
_snap_to_neat
%test _tempi = -1
%jtrue .check_intersect
%disable inform
%aba
_vig_sel_bad
%select fsn '_this_fsn
%cancel macro _vig_sel_bad
%save selections _vig_sel_bad
_vig_sel
%search last

.check_intersect:
%aba
%test $region 2
%then %cancel region 2
%search last
%region 2

! Find on which edge of the neat line box the feature starts and finishes.
! Sides 1-4 correspond with $BOX definition, see HELP VAR SYS $BOX.

%first						! Get to first point on feature
%let _first_edge = 0				! Initialise
%test $cursx = '_neat_box_1			! Find the edge
%then %let _first_edge = 1
%test $cursx = '_neat_box_2
%then %let _first_edge = 2
%test $cursy = '_neat_box_3
%then %let _first_edge = 3
%test $cursy = '_neat_box_4
%then %let _first_edge = 4

%last						! Get to last point on feature
%let _last_edge = 0				! Initialise
%test $cursx = '_neat_box_1			! Find the edge
%then %let _last_edge = 1
%test $cursx = '_neat_box_2
%then %let _last_edge = 2
%test $cursy = '_neat_box_3
%then %let _last_edge = 3
%test $cursy = '_neat_box_4
%then %let _last_edge = 4

! Now determine how to close the feature
! Firstly, does feature start and end on same edge of neat line? If so,
! region will close nicely. However, user may want to go the other way around
! the neat line.

%test _first_edge = '_last_edge'

! Feature starts and ends on different edges. If these edges are adjacent, can
! add single 'corner' point to region 2 to close along neat line.
%else _check_adjacent

! If _check_adjacent has returned false, then the
! Feature must begin and end on opposite sides of the neat line. Close it one
! way around (arbitrary).
%else _close_long '_last_edge' 2

%aba
%geometry cancel 1
%enable continue
%geometry region 1 2
%cancel region 2
%disable continue
%test $geometry 1
%geometry cancel 1
%jtrue .get_next_feat
%enable inform
%message "Open feature FSN '_this_fsn' self-intersects as above."
%disable inform
%aba
_vig_sel_bad
%select fsn '_this_fsn
%cancel macro _vig_sel_bad
%save selections _vig_sel_bad
_vig_sel

%jump .get_next_feat

.feat_closed:
%geometry cancel 1
%enable continue
%geometry feature 1 2
%disable continue
%test $geometry 1
%geometry cancel 1
%jtrue .get_next_feat
%enable inform
%message "Closed feature FSN '$FSN' self-intersects as above."
%disable inform
%aba
_vig_sel_bad
%select fsn '_this_fsn
%cancel macro _vig_sel_bad
%save selections _vig_sel_bad
_vig_sel

.get_next_feat:

%enable continue
%search next
%disable continue
%test $found
%jtrue .check_next_feat

%cancel region 3

_vig_sel_bad
%draw map

%test _tempb
%then %enable inform

%endmacro

_del_if_defined macro vigclose
%macro vigclose

%aba
%select all
_vig_sel
%set fc 'vig_coast_fc'
%search all
%region 2
.close_next_feat:
%aba
%cancel region 2
%search last
%region 2
%test $closed
%jtrue .feat_closed

! Find on which edge of the neat line box the feature starts and finishes.
! Sides 1-4 correspond with $BOX definition, see HELP VAR SYS $BOX.

%first						! Get to first point on feature
%let _first_edge = 0				! Initialise
%test $cursx = '_neat_box_1			! Find the edge
%then %let _first_edge = 1
%test $cursx = '_neat_box_2
%then %let _first_edge = 2
%test $cursy = '_neat_box_3
%then %let _first_edge = 3
%test $cursy = '_neat_box_4
%then %let _first_edge = 4
%test _first_edge = 0				! Did we get anything?
%jfalse .got_first_edge
%message "Feature FSN '$FSN' does not start on neat line."
%message "Did you use VIGCHECK first?"
%jump .close_out

.got_first_edge:

%last						! Get to last point on feature
%let _last_edge = 0				! Initialise
%test $cursx = '_neat_box_1			! Find the edge
%then %let _last_edge = 1
%test $cursx = '_neat_box_2
%then %let _last_edge = 2
%test $cursy = '_neat_box_3
%then %let _last_edge = 3
%test $cursy = '_neat_box_4
%then %let _last_edge = 4
%test _last_edge = 0				! Did we get anything?
%jfalse .got_last_edge
%message "Feature FSN '$FSN' does not end on neat line."
%message "Did you use VIGCHECK first?"
%jump .close_out

.got_last_edge:

! Now determine how to close the feature
! Firstly, does feature start and end on same edge of neat line? If so,
! region will close nicely. However, user may want to go the other way around
! the neat line.

%test _first_edge = '_last_edge'
%jfalse .not_same_edge
%test $p1
%jtrue .feat_closed
_zoom_feat					! Zoom so feature is on screen
%draw arearegion 2				! Show user the area
.same_edge_bad_input:
%message "Close feature like this? Mouse Button 2 or Return to accept."
%inquire vig_mouse "Mouse Button 3 or ""N"" to close opposite way around neat line."
%mess 'vig_mouse'
%test vig_mouse = ""
%or vig_mouse = "MOUSE2"
%jtrue .feat_closed
%test vig_mouse = "MOUSE3"
%or vig_mouse = "N"
%or vig_mouse = "n"
%then _close_long '_last_edge' 4
%test vig_mouse = "MOUSE3"
%or vig_mouse = "N"
%or vig_mouse = "n"
%jtrue .feat_closed
%raspberry
%message
%jump .same_edge_bad_input

.not_same_edge:

! Feature starts and ends on different edges. If these edges are adjacent, can
! add single 'corner' point to region 2 to close along neat line.

_check_adjacent
%jfalse .not_adjacent

%test $p1
%jtrue .feat_closed
_zoom_feat					! Zoom so feature is on screen
%draw arearegion 2				! Draw closed feature area
.adjacent_edge_bad_input:
%message "Close feature like this? Mouse Button 2 or Return to accept."
%inquire vig_mouse "Mouse Button 3 or ""N"" to close opposite way around neat line."
%test vig_mouse = ""
%or vig_mouse = "MOUSE2"
%jtrue .feat_closed
%test vig_mouse = "MOUSE3"
%or vig_mouse = "N"
%or vig_mouse = "n"
%jtrue .close_adj_long
%raspberry
%message
%jump .adjacent_edge_bad_input

.close_adj_long:

! Close feature the long way around the neat line. Region 2 needs to be
! re-made to eliminate corner already added.

%cancel region 2
%search last
%region 2
_close_long '_last_edge' 3
%jump .feat_closed

.not_adjacent:

! Feature must begin and end on opposite sides of the neat line. Close it one
! way around (arbitrary) and check whether this is what's wanted. Reverse and
! close it the other if not, remembering to reverse the feature back at the
! end.

_close_long '_last_edge' 2
_zoom_feat					! Zoom so feature is on screen
%draw arearegion 2				! Draw closed feature area
.opposite_edge_bad_input:
%message "Close feature like this? Mouse Button 2 or Return to accept."
%inquire vig_mouse "Mouse Button 3 or ""N"" to close opposite way around neat line."
%test vig_mouse = ""
%or vig_mouse = "MOUSE2"
%jtrue .feat_closed
%test vig_mouse = "MOUSE3"
%or vig_mouse = "N"
%or vig_mouse = "n"
%jtrue .close_oppo_other
%raspberry
%message
%jump .opposite_edge_bad_input

.close_oppo_other:

! Close feature the other way around the neat line. Region 2 needs to be
! re-made to eliminate corners already added. Reverse feature and use
! _close_long with '-' to close the other way from above. Reversal of feature
! means _close_long is passed _first_edge not _last_edge.

%cancel region 2
%search last
%reverse
%search last
%region 2
_close_long '_first_edge' 2 -
%search last
%reverse

.feat_closed:
%aba
%feature region 2

%enable continue
%search next
%disable continue
%test $found
%jtrue .close_next_feat

.close_out:
%aba
%cancel region 2

%select all
_vig_sel
%select fc 'vig_coast_fc'
%draw

%endmacro

_del_if_defined macro viglandwater
%macro viglandwater

%abandon
%select all
%select fc 'vig_coast_fc' 
%test $region 1
%then %select inregion 1
%geometry cancel 3

%inquire vig_mouse "Put cursor in the sea and press Mouse Button 2 or Return"

%disable inform
%search nearest
%enable inform
%geometry cancel 2
%geometry feature 2 2

.nextfeat:

%enable continue
%disable inform
%search next
%enable inform
%disable continue
%test $found
%jfalse .featdone

%geometry cancel 1
%geometry feature 1 2

%test $ingeometry 2
%or $cutgeometry 2
%jfalse .feat_island

%test $P1
%jtrue .feat_lake

_zoom_feat
%draw geometry 1
%message "Is this feature a lake? Hit Mouse Button 2 or Return if so."
%inquire vig_mouse "Hit Mouse Button 3 or type ""N"" if feature is an island."
%test vig_mouse = "MOUSE3"
%or vig_mouse = "N"
%or vig_mouse = "n"
%jtrue .feat_island

.feat_lake:
%geometry add 1 3
%jump .nextfeat

.feat_island:
%geometry add 1 2

%jump .nextfeat

.featdone:

%geometry cancel 1
%test $geometry 3
%then %geometry rename 3 1

%endmacro

_del_if_defined macro viginner
%macro viginner

! Check if any feature of vig_region_fc exists
! If so, then proceed straight to check for intersection
%select all
%select fc 'vig_region_fc'
%enable continue
%disable inform
%locate all
%enable inform
%disable continue
%test $found
%then %abandon
%jtrue .check_outer_buffer

viglandwater '$P1

%message
%message "Creating smooth outer buffer..."

%geometry cancel 3
%geometry buffer 2 3 'vig_buffer_dist'

%set fc 'vig_region_fc' 
%feature geometry 3
%geometry cancel 3

%message "Filtering outer buffer..."
%select all
%select fc 'vig_region_fc'
%disable inform
%search all
%enable inform
.next_outer_filter:
%filter
%enable continue
%disable inform
%search next
%enable inform
%disable continue
%test $found
%jtrue .next_outer_filter

.check_outer_buffer:
%message "Checking outer buffer for self-intersection..."
%geometry cancel 3
%select all
%select fc 'vig_region_fc'
%disable inform
%search all
%enable inform
.next_outer_check:
%geometry cancel 5
%enable continue
%geometry feature 5 2
%disable continue
%test $geometry 5
%else %message "Outer buffer FSN '$FSN' self-intersects as above."
%else %message "Edit it, then repeat VIGINNER."
%abort false

%geometry add 5 3
%geometry cancel 5
%enable continue
%disable inform
%search next
%enable inform
%disable continue
%test $found
%jtrue .next_outer_check

%message "Deleting temporary outer buffer features..."
%select all
%select fc 'vig_region_fc'
%disable inform
%search all
%enable inform
.next_outer_delete:
%delete
%enable continue
%disable inform
%search next
%enable inform
%disable continue
%test $found
%jtrue .next_outer_delete

%message "Creating inner solid vignette..."
%geometry cancel 6
%let _tempx = 2*'vig_buffer_dist'
_make_box 2 '_tempx'
%geometry region 6 2
%cancel region 2
%geometry cancel 4
%geometry andnot 6 3 4
%geometry cancel 6

%let _tempx = ('vig_buffer_dist' - 'vig_solid_dist') / 4
%test _tempx = 0.0
%then %geometry cancel 4
%then %geometry rename 3 4
%jtrue .no_buffer

%geometry cancel 3
%geometry cancel 6
%geometry buffer 4 6 '_tempx'
%geometry cancel 5
%geometry rename 6 5
%geometry buffer 5 6 '_tempx'
%geometry cancel 5
%geometry rename 6 5
%geometry buffer 5 6 '_tempx'
%geometry cancel 5
%geometry rename 6 5
%geometry buffer 5 6 '_tempx'
%geometry cancel 5
%geometry rename 6 5

%geometry cancel 4				! Geom 4 no longer needed
_make_box 2 0
%geometry region 3 2
%cancel region 2
%geometry andnot 3 5 4				! Create inner vignette area
%geometry cancel 3
%geometry cancel 5

%set fc 'vig_region_fc'				! Set dummy region feature

%feature geometry 4
%geometry cancel 4

%message "Filtering inner solid vignette..."
%disable inform
%search all
%enable inform
.next_inner_filter:
%filter
%enable continue
%disable inform
%search next
%enable inform
%disable continue
%test $found
%jtrue .next_inner_filter

.no_buffer:

%let _tempb = 'vig_start_fc' + 'vig_no_fcs' - 1
%select all
_vig_sel
%select fc 'vig_region_fc'
%select fc 'vig_start_fc' - '_tempb'

%endmacro

_del_if_defined macro vigcreate
%macro vigcreate

%message "Checking solid inner vignette for self-intersection..."
%geometry cancel 3
%select all
%select fc 'vig_region_fc'
%disable inform
%search all
%enable inform

.next_inner_check:
%geometry cancel 6
%enable continue
%geometry feature 6 2
%disable continue
%test $geometry 6
%else %message "Inner solid vignette FSN '$FSN' self-intersects as above."
%else %message "Edit it, then repeat VIGCREATE."
%abort false

%geometry add 6 3
%geometry cancel 6
%enable continue
%disable inform
%search next
%enable inform
%disable continue
%test $found
%jtrue .next_inner_check

%test $P1 = ""
%and $geometry 1
%then %message "Creating lake features..."
%then %set fc 'vig_start_fc'
%then %feature geometry 1

%test $P1 >= 0
%and $geometry 1
%then %message "Creating lake features..."
%then %set fc '$P1'
%then %feature geometry 1

%message "Creating vignettes..."
%test $region 2
%then %cancel region 2
_make_box 2 0					! Make neat line box in region 2
%geometry region 6 2				! Convert to geometry
%cancel region 2				! Region no longer needed

%let _vig_fc = 'vig_start_fc'
%let _tempi  = 0

.next_fade:

%let _tempy = '_tempi' * ('vig_fade_dist'/'vig_no_fcs') ! Distance out for this stripe
%geometry cancel 4
%test _tempy = 0.0
%then %geometry copy 3 4
%else %geometry buffer 3 4 '_tempy'		! Create geometry
%geometry cancel 5
%geometry and 4 6 5				! Clip vignette to neat line
%geometry cancel 4
%geometry andnot 5 2 4				! Remove land from vignette area
%geometry cancel 5

%set fc '_vig_fc'
%feature geometry 4				! Create vignette feature
%geometry cancel 4

%let _vig_fc = '_vig_fc' + 1			! Next feature code
%let _tempi = '_tempi' + 1
%test _tempi < 'vig_no_fcs'
%jtrue .next_fade

%geometry cancel 3
%geometry cancel 6
%let _tempb = 'vig_start_fc' + 'vig_no_fcs' - 1
%select all
_vig_sel
%select fc 'vig_region_fc'
%select fc 'vig_start_fc' - '_tempb'
%draw

%endmacro

_del_if_defined macro vigdelete
%macro vigdelete

%aba

%let _tempb = 'vig_start_fc' + 'vig_no_fcs' - 1
%select all
%select fc 'vig_start_fc' - '_tempb'
%test $region 1
%then %select inregion 1

%enable continue
%search all
.delete_next:
%test $found
%jfalse .delete_end
%delete
%search next
%jump .delete_next

.delete_end:
%disable continue

%let _tempb = 'vig_start_fc' + 'vig_no_fcs' - 1
%select all
_vig_sel
%select fc 'vig_start_fc' - '_tempb'
%select fc 'vig_region_fc'
%draw

%endmacro

_del_if_defined macro vigclean
%macro vigclean

%aba

%select all
%select fc 'vig_region_fc'
%test $p1 = "full"
%or $p1 = "FULL"
%then %select fc 'vig_coast_fc' 

%enable continue
%search all
.clean_next:
%test $found
%jfalse .clean_end
%delete
%search next
%jump .clean_next

.clean_end:
%disable continue
%let _tempb = 'vig_start_fc' + 'vig_no_fcs' - 1
%select all
_vig_sel
%select fc 'vig_start_fc' - '_tempb'
%select fc 'vig_region_fc'
%draw

%endmacro

%ask string file_find lsl$exe:vignette.lic
%test $ask_char 1 = ""
%then %disable inform
%then %cancel macro _vig_sel_bad
%then %cancel macro viginit
%then %cancel macro _snap_to_neat
%then %cancel macro _zoom_feat
%then %cancel macro _add_corner
%then %cancel macro _close_long
%then %cancel macro _make_box
%then %cancel macro _check_adjacent
%then %cancel macro get_neat
%then %cancel macro vigregion
%then %cancel macro vigcheck
%then %cancel macro vigclose
%then %cancel macro viglandwater
%then %cancel macro viginner
%then %cancel macro vigcreate
%then %cancel macro vigdelete
%then %cancel macro vigclean
%then %cancel macro _del_if_defined
%then %cancel variable _neat_box_
%then %cancel variable vig_buffer_dist
%then %cancel variable vig_solid_dist
%then %cancel variable vig_fade_dist
%then %cancel variable vig_start_fc
%then %cancel variable vig_no_fcs
%then %cancel variable vig_coast_fc
%then %cancel variable vig_region_fc
%then %cancel variable _TEMPX
%then %cancel variable _TEMPY
%then %cancel variable _TEMPI
%then %cancel variable _TEMPJ
%then %cancel variable _TEMPK
%then %cancel variable _THIS_FSN
%then %cancel variable _VIG_FC
%then %cancel variable _FIRST_EDGE
%then %cancel variable _LAST_EDGE
%then %cancel variable VIG_MOUSE
%then %cancel variable _tempb
%then %enable inform
%then %message "+----------------------------------------------------------------------+"
%then %message "| You are not licenced to use the LITES2 Vignette Generation Facility. |"
%then %message "| Please contact Laser-Scan Customer Services on +44 (0)1223 420414.   |"
%then %message "+----------------------------------------------------------------------+"
%else %message "+-------------------------------------+"
%else %message "| LITES2 Vignette Generation enabled. |"
%else %message "+-------------------------------------+"
!end VIGNETTE.LCM
