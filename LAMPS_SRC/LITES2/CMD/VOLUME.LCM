!! LITES2 command file to set things up for volume calculation! user routine!! Copyright Laser-Scan Ltd, Milton Rd, Cambridge, England!! Author Clarke Brunt			CCB 17-May-1991! Modified for auto positioning		CCB 14-Jun-1991!! This command file should be invoked when in INITIAL state! Logical name LSL$LITES2ROUTINES_n (where n is the value of! variable vol_routine below, default 101) should be defined to! point to the image file VOLUME_ROUTINE.EXE!! Things we need enabled to work%enable z%enable substitution!! Declare variables%decl real vol_rmsres	! rms residual in plane fit%decl real vol_maxres	! max residual in plane fit%decl real vol_curs3	! cursor position%decl int vol_dospace	! use profile spacing/number%decl int vol_dostep	! step along profile%decl real vol_space	! requested profile spacing%decl real vol_uspace	! used profile spacing%decl real vol_step	! step along profiles%decl int vol_nprof	! number of profiles%decl int vol_unprof	! used number of profiles%decl int vol_prof	! particular profile number%decl int vol_profno	! profile number near cursor%decl real vol_angle	! angle of profiles%decl real vol_cosang	! cosine%decl real vol_sinang	! sine%decl int vol_routine	! which user routine%decl real vol_area	! area of single profile%decl real vol_volume	! final answer%decl char vol_string	! temporary string!! Some defaults%let vol_dospace = 0%let vol_dostep = 0%let vol_nprof = 3%let vol_space = 10.0%let vol_step = 10.0%let vol_angle = 0.0%let vol_routine = 101!! Call this macro to set the parameters%macro vol_set%test vol_dospace%then %let vol_string = "Yes"%else %let vol_string = "No"%inquire vol_string "Do you want to set a profile spacing? (default 'vol_string): "%test vol_string=""%jtrue .L1   %test vol_string   %then %let vol_dospace=-1   %else %let vol_dospace=0.L1:%test vol_dospace%jtrue .L2   %inquire vol_string "Number of profiles (default 'vol_nprof): "   %test vol_string=""   %else %let vol_nprof='vol_string   %jump .L3.L2:   %inquire vol_string "Spacing of profiles (default 'vol_space): "   %test vol_string=""   %else %let vol_space='vol_string.L3:%inquire vol_string "Angle of profiles (default 'vol_angle): "%test vol_string=""%else %let vol_angle='vol_string%test vol_dostep%then %let vol_string = "Yes"%else %let vol_string = "No"%inquire vol_string "Do you want to step along the profiles? (default 'vol_string): "%test vol_string=""%jtrue .L4   %test vol_string   %then %let vol_dostep=-1   %else %let vol_dostep=0.L4:%test vol_dostep%jfalse .L5   %inquire vol_string "Step distance (default 'vol_step): "   %test vol_string=""   %else %let vol_step='vol_string.L5:%endm!! Call this macro with a found feature which defines the bounding! polygon of the area over which a volume is to be measured.! If routine succeeds, then the RMS and max residual in Z when a plane! is fitted to the points are displayed.! The number of profiles to be measured, and their angle (degrees! anti-clockwise from horizontal) are set.%macro vol_init%let vol_prof = 0%let vol_cosang = cos('vol_angle)%let vol_sinang = sin('vol_angle)%routine 'vol_routine 2 'vol_nprof 'vol_angle 'vol_space 'vol_dospace%abort false%mess RMS residual 'vol_rmsres, max residual 'vol_maxres%mess 'vol_unprof profiles will be measured, at a spacing of 'vol_uspace%endm!! Call this macro to prepare to digitise a profile. Parameter is number! of profile (1 to number of profiles).! If routine succeeds, then variables are set to the cursor position! at which the profile begins.%macro vol_prep	! expects $P1=profile number%let vol_prof='$p1%routine 'vol_routine 3 'vol_prof%abort false%mess Profile 'vol_prof starts at 'vol_curs1 'vol_curs2 'vol_curs3%endm!! Call this macro to enter the digitised profile (vol_prep above must! be called first). Calls to this macro may be repeated if necessary.! The profile must be the found feature (points in it may be digitised! in any order).! If routine succeeds, then the RMS and max residual by which the! entered profile deviates from its ideal line are displayed.! The feature is deleted, and is replaced by one in which all points! are moved perpendicularly onto the ideal profile, any points outside! the polygon are discarded, the points are put into order, and points! are added where the profile crosses the polygon boundary (at the height! of the plane, unless a digitised point comes within 1/100th of the! profile separation, in which case this point is moved onto the boundary).! Parts of the profile outside the polygon are represented by invisible! segments.! The cross-sectional area of the profile is calculated and displayed.%macro vol_prof!! undefine Z cursor position, otherwise it will be used for all! coordinates output - this will be amended in a future release! of LITES2 (after V3.4)%pos '$cursx '$cursy%routine 'vol_routine 4%abort false%mess RMS residual 'vol_rmsres, max residual 'vol_maxres%mess Profile 'vol_prof has area 'vol_area%endm!! Call this macro to calculate the volume when all profiles have! been measured.! The volume is displayed.%macro vol_vol%routine 'vol_routine 5%abort false%mess Volume is 'vol_volume%endm!! Call this macro to calculate the profile number near the cursor%macro vol_near%routine 'vol_routine 6%abort false%mess Cursor is near profile 'vol_profno%endm!%macro vol_next%test vol_prof>='vol_nprof%then %mess No next profile%abort true%let vol_prof='vol_prof+1vol_prep 'vol_prof%abort false%pos 'vol_curs1 'vol_curs2	! let user adjust Z%endm!%macro vol_start%start%force angle 'vol_angle%test vol_dostep		! is stepping required%abort false%let vol_curs1 = '$cursx+'vol_step*'vol_cosang%let vol_curs2 = '$cursy+'vol_step*'vol_sinang%pos 'vol_curs1 'vol_curs2	! let user adjust Z%endm!%macro vol_end%end%search lastvol_prof%abort falsevol_next%endm