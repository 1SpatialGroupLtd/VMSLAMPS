C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-08-04 11:30:52.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	PROGRAM	UISMENUS
C
***	MODULE	UISMENUS
***	IDENT	02AU89
C
C	Copyright (C), Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Created						AC  19-Oct-1988
C	Amended to suppress creation of mailbox		FJB 21-May-1989
C
C ......................................................................
C
C Program to setup a tree of menus and mailbox text to a specified
C destination
C
	IMPLICIT NONE
C
C Parameters:
	INTEGER		 INLUN		!
	PARAMETER	(INLUN=1)	!
	INCLUDE 	'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE		'LSL$CMNLSL:READSTR.PAR'
	INCLUDE		'LSL$CMNUISMENUS:UISMENUSMSG.PAR'
C
C Common:
	INCLUDE		'LSL$CMNUISMENUS:UISMENUS.CMN'
	INCLUDE		'LSL$CMNUISMENUS:SYMNAM.CMN'
	INCLUDE		'LSL$CMNLSL:TXTC.CMN'
	INCLUDE		'LSL$CMNLSL:EXPC.CMN'
C
C W/s:
	CHARACTER*(256)	LOGICAL_NAME  ! logical name assigned to mailbox
	INTEGER		LOGICAL_NAME_LEN  

	CHARACTER*(256)	IN_FILE	      ! input file containing .CDL file-
	INTEGER		IN_FILE_LEN	  ! names and menu colours

	CHARACTER*(256)	CDL_FILE	  ! name of current .CDL file
	INTEGER		CDL_FILE_LEN

	CHARACTER*(256)	PRIMARY		! primary command from IN_FILE
	INTEGER		PRIM_LEN

	LOGICAL*4	STATUS		! return status code
	INTEGER		IERR		! return error code
	INTEGER		LINE		! current line being read
	BYTE		CH		! single character
	BYTE		TEXT(256)	! text buffer

	INTEGER		MBX_ID		! ID for mailbox to be written 
	INTEGER		MENU_ID		! to

	REAL*4		RED		! Red component of console color
	REAL*4		GREEN		! Green   ditto
	REAL*4		BLUE		! Blue    ditto

	LOGICAL*4	NOT_OK		! Something wrong getting colour
C
C Functions:
	LOGICAL*4	RDREAL		! reads a real from file
	LOGICAL*4	RDCHS		! reads a character from file
	INTEGER		READSTR		! reads a string from file
	INTEGER*4	FLROPN		! open a text file for reading
	INTEGER*4	FLRLIN		! read a line from a text file
	INTEGER*4	FLRCLO		! close a text file
C
	LOGICAL*4	SETUP_COMM	! establishes communication with
C					! channel with the specified 
C					! logical name 
	LOGICAL*4	MBX_SETUP	! creates a mailbox because 
C					! LITES is lazy
	LOGICAL*4	CLD_INIT	! decode the command line
	LOGICAL*4	WSUI$MAKE_ASYNC_CONSOLE	  ! create a menu that
C						  ! behaves async.
C					
	LOGICAL*4	RESPOND		! routine that is called when
	EXTERNAL	RESPOND		! an event occurs in a menu
C
C ......................................................................
C
C Initialise....
	CALL LSL_INIT()
	CALL WSUI$INIT()
C
C Decode command line
	STATUS = CLD_INIT(IN_FILE,IN_FILE_LEN,LOGICAL_NAME,
     &				LOGICAL_NAME_LEN)
	IF (.NOT.STATUS) GOTO 999
C
C Create a mailbox 
	IF(NEED_MBOX)THEN
	   STATUS = MBX_SETUP(LOGICAL_NAME,LOGICAL_NAME_LEN)
	   IF (.NOT.STATUS) GOTO 999
	ENDIF
C
C Attempt to open file containing a list of .CDL files and menu colours
	STATUS=FLROPN(INLUN,IN_FILE(1:IN_FILE_LEN),IERR)
	IF (.NOT.STATUS) THEN
	   CALL LSL_PUTMSG(UISMEN__OPNFIL,IN_FILE(1:IN_FILE_LEN))
	   CALL LSL_ADDMSG(STATUS)
	   CALL LSL_ADDMSG(IERR)
	   GOTO 999
	ENDIF
C
C Keep a count of which line we are on
	LINE = 0
C
C Read in the next line 
10	STATUS=FLRLIN(,,,IERR)
	LINE=LINE+1
	IF (STATUS.EQ.LSL__EOF) GOTO 20
	IF (.NOT.STATUS) THEN
	   CALL LSL_PUTMSG(UISMEN__ERRINPUT)
	   CALL LSL_ADDMSG(STATUS)
	   CALL LSL_ADDMSG(IERR)
	   GOTO 998
	ENDIF
C
C Check if valid line to read - loop back if not
	CALL BSLN
	IF (RDCHS(CH)) GOTO 10		! ignore empty lines
	IF (CH.EQ.'!') GOTO 10		! ignore comment lines
	CALL BSCH			! backspace
C
C Get primary command (loop back if necessary) and upper-case it 
	PRIM_LEN = READSTR(PRIMARY,,ON_SPACE)
	IF (PRIM_LEN.EQ.0) GOTO 10
	CALL STR$UPCASE(PRIMARY,PRIMARY)
C
C ......................................................................
C		C R E A T E   N E W   M E N U
C
	IF (PRIMARY(1:PRIM_LEN).EQ.'FILE') THEN
C
C get the filename
	   CDL_FILE_LEN = READSTR(CDL_FILE,,ON_SPACE)
	   IF (CDL_FILE_LEN.EQ.0) THEN
	      CALL LSL_PUTMSG(UISMEN__NOCDLFILE)
	      GOTO 998
	   ENDIF
C
C place it in a NULL terminated byte array
	   CALL EXPAND('%W%S',TEXT,CDL_FILE)
	   TEXT(CDL_FILE_LEN+1) = 0
C
C attempt to create menu from this
	   MENU_ID = WSUI$MAKE_ASYNC_CONSOLE(TEXT,0,0,RESPOND,.FALSE.)
	   IF (MENU_ID.EQ.0) THEN
	      CALL LSL_PUTMSG(UISMEN__FAILMENU,TEXT)
	      GOTO 999
	   ENDIF
C
C loop back
	   GOTO 10
	ENDIF
C
C ......................................................................
C		S E T   B A C K G R O U N D   C O L O U R
C
	IF (PRIMARY(1:PRIM_LEN).EQ.'BACKGROUND') THEN
C
C get Red, Green and Blue components
	   NOT_OK=RDREAL(RED)
	   IF (NOT_OK) GOTO 997
	   NOT_OK=RDREAL(GREEN)
	   IF (NOT_OK) GOTO 997
	   NOT_OK=RDREAL(BLUE)
	   IF (NOT_OK) GOTO 997
C
C update colour
	   CALL WSUI$SET_CONSOLE_COLOURS(3,RED,GREEN,BLUE)
C
C loop back
	   GOTO 10
	ENDIF
C
C ......................................................................
C		S E T   F O R E G R O U N D   C O L O U R
C
	IF (PRIMARY(1:PRIM_LEN).EQ.'FOREGROUND') THEN
C
C get Red, Green and Blue components
	   NOT_OK=RDREAL(RED)
	   IF (NOT_OK) GOTO 997
	   NOT_OK=RDREAL(GREEN)
	   IF (NOT_OK) GOTO 997                                        
	   NOT_OK=RDREAL(BLUE)
	   IF (NOT_OK) GOTO 997
C
C update colour
	   CALL WSUI$SET_CONSOLE_COLOURS(2,RED,GREEN,BLUE)
C
C loop back
	   GOTO 10
	ENDIF
C
C ......................................................................
C		S E T   H I L I T E   C O L O U R
C
	IF (PRIMARY(1:PRIM_LEN).EQ.'HILITE') THEN
C
C get Red, Green and Blue components
	   NOT_OK=RDREAL(RED)
	   IF (NOT_OK) GOTO 997
	   NOT_OK=RDREAL(GREEN)
	   IF (NOT_OK) GOTO 997
	   NOT_OK=RDREAL(BLUE)
	   IF (NOT_OK) GOTO 997
C
C update colour
	   CALL WSUI$SET_CONSOLE_COLOURS(1,RED,GREEN,BLUE)
C
C loop back
	   GOTO 10
	ENDIF
C
C Haven't matched any of the primary commands so fail
	CALL LSL_PUTMSG(UISMEN__UNKPRIM,PRIMARY(1:PRIM_LEN))
	GOTO 998
C
C ......................................................................
C		C L O S E   F I L E
C
20	STATUS=FLRCLO(INLUN,IERR)
	IF (.NOT.STATUS) THEN
	   CALL LSL_PUTMSG(UISMEN__CLSFIL,IN_FILE(1:IN_FILE_LEN))
	   CALL LSL_ADDMSG(STATUS)
	   CALL LSL_ADDMSG(IERR)
	   GOTO 999
	ENDIF
C
C Attempt to establish communication with mailbox
	IF (NEED_MBOX) THEN
	   STATUS = SETUP_COMM(LOGICAL_NAME,LOGICAL_NAME_LEN,MBX_ID)
	   IF (.NOT.STATUS) GOTO 999
	ENDIF
C
C and bring up the menus
	CALL MAIN_LOOP(MBX_ID)
	GOTO 1000
C
C ......................................................................
C		U N E X P E C T E D   C O L O U R
C            
997	CALL LSL_PUTMSG(UISMEN__BADCOLOUR)
C
C ......................................................................
C		U N E X P E C T E D   I N P U T
C
998	CALL LSL_ADDMSG(UISMEN__BADINPUT,LINE,IN_FILE(1:IN_FILE_LEN))
	GOTO 1000
C
C ......................................................................
C		U N E X P E C T E D   F A I L U R E
C
999	CALL LSL_ADDMSG(UISMEN__ABORT)
	GOTO 1000
C
C Finished.....
1000	CALL LSL_EXIT
	STOP
	END

