C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-08-04 11:34:12.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION RESPOND
C
***	MODULE	RESPOND
***	IDENT	03AU89
C
C	Copyright (C), Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Created						AC   19-Oct-1988
C	Amended for return code 997			FJB  21-May-1989
C	Added return codes 996 and 995 			AC   8-June-1989
C	Added variable symbol name		FJB	27-July-1989
C	Added return codes 991 to 994 		FJB	03-August-1989
C
C ......................................................................
C
C AST routine that responds to events in the menu(s)
C
	IMPLICIT NONE
C
C Common:
	INCLUDE		'LSL$CMNUISMENUS:UISMENUS.CMN'
	INCLUDE		'LSL$CMNUISMENUS:SYMNAM.CMN'
C
C W/s:
	INTEGER*2	STRLEN                  ! string length
	INTEGER*4	DESCR(2)		! descriptor
	EQUIVALENCE	(DESCR(1),STRLEN)       ! to copy CMD_LEN
C
	INTEGER		CODE			! current return code
	INTEGER		CONSOLE			! current menu id.
	INTEGER		OBJ_TYPE	
	INTEGER		OBJ_ID
	INTEGER		VALUE
	INTEGER		N,J			! loop counters
	INTEGER		SAV_LEN			! save command length
C
	LOGICAL		STATE			! on or off
	LOGICAL		STATUS
	LOGICAL		OK
	LOGICAL		HAD_SECOND_DELIMIT	! got a command
C
	BYTE		DELIMIT		! save delimiting character
	BYTE		BUFFER(255)	! buffer for part of CMD_TEXT
C
C Functions:
	LOGICAL*4	WSUI$GET_QUEUE_ENTRY
	LOGICAL*4	WSUI$GET_NAMED_CONSOLE
	LOGICAL*4	LIB$SET_SYMBOL
C
C ......................................................................
C
C attempt to retrieve any menu event
	CONSOLE = 0
	CODE = -1
	OBJ_TYPE = 0
	OBJ_ID = 0
	CMD_LEN = 255
	NEED_MBOX = .TRUE.
C
C get event details	
	STATUS = WSUI$GET_QUEUE_ENTRY(CONSOLE,OBJ_TYPE,OBJ_ID,CODE,
     &			CMD_TEXT,CMD_LEN,STATE,VALUE)
C
C
	   CALL DO_MONITOR(OBJ_TYPE,OBJ_ID,STATE)
C
C if OK, check return codes for termination,
	IF (STATUS) THEN
C
C*********************************************************************
C
C ( return code 999 is processed within the library menu routine)
C
C*********************************************************************
C
C complete after posting command if return code is 998
	   IF (CODE.EQ.998) QUIT = .TRUE.
C
C*********************************************************************
C
C settup DCL symbol if return code is 997 
	   IF (CODE.EQ.997)THEN
C
C derive a false character string reference
	      DESCR(1) = 0
	      DESCR(2) = %LOC(CMD_TEXT)
	      STRLEN = CMD_LEN
C
C and define symbol
	      OK=LIB$SET_SYMBOL(SYMBOL_NAME(1:SYMBOL_NAME_LEN),DESCR,1)
C
C and suppress sending to mailbox and complete
	      NEED_MBOX = .FALSE.
	      QUIT = .TRUE.
	   ENDIF
C
C*********************************************************************
C
C if return code is 996 or 995 then set all toggles in this menu
	   IF (CODE.EQ.996) CALL SET_TOGGLES(CONSOLE,.TRUE.)
C
C*********************************************************************
C
	   IF (CODE.EQ.995) CALL SET_TOGGLES(CONSOLE,.FALSE.)
C
C*********************************************************************
C
C if return code is 994 call a new menu with all toggles and choices
C reset and do not send any thing to the mailbox
	   IF (CODE .EQ. 994)THEN
	      CONSOLE = WSUI$GET_NAMED_CONSOLE(CMD_TEXT)
	      CALL SET_TOGGLES(CONSOLE,.FALSE.)
	      CALL SET_GROUPS(CONSOLE)
	      CALL WSUI$DISPLAY_CONSOLE(CONSOLE)
	      RETURN
	   ENDIF
C
C*********************************************************************
C
C if return code is 993 decode CMD_TEXT to get both a string to post to 
C mailbox, as in 001 code, and to get menu name and then call that menu,
C as in 999 code. Then set flag to post string in s/r MAIN_LOOP.
C
	   IF (CODE .EQ. 993)THEN
C
C Initialise
	      DO 310,J=1,255
		 BUFFER(J) = 0
 310	      CONTINUE
	      HAD_SECOND_DELIMIT = .FALSE.
	      J=1
C
C Assume first character is to be the delimiting character
	      DELIMIT = CMD_TEXT(1)
C
C Split cmd_text into two strings - one for posting 
C and the other for a menu
	      DO 320,N=2,CMD_LEN
		 IF(CMD_TEXT(N) .NE. DELIMIT )THEN
		     IF(.NOT.HAD_SECOND_DELIMIT)THEN
                        CMD_TEXT(N-1) = CMD_TEXT(N)
			SAV_LEN = N-1
		     ELSE 
			BUFFER(J)=CMD_TEXT(N)
			J=J+1
		     ENDIF
	         ELSE
		     HAD_SECOND_DELIMIT = .TRUE.
		 ENDIF
 320	      CONTINUE
C
C Tidy ends of text buffers
	      BUFFER(J) = 0
	      DO 330,N=SAV_LEN+1,CMD_LEN
		 CMD_TEXT(N) = 0
 330	      CONTINUE
	      CMD_LEN = SAV_LEN

C
C call the required menu
	      CONSOLE = WSUI$GET_NAMED_CONSOLE(BUFFER)
	      CALL WSUI$DISPLAY_CONSOLE(CONSOLE)
C
	   ENDIF
C
C*********************************************************************
C
C if return code is 992 decode CMD_TEXT to get both a string to post to
C mailbox, as in 001 code, and to get menu name,
C reset that menus' choices and toggles and then call that menu,
C as in 994 code. Then set flag to post string in s/r MAIN_LOOP.
C
	   IF (CODE .EQ. 992)THEN
C
C Initialise
	      DO 210,J=1,255
		 BUFFER(J) = 0
 210	      CONTINUE
	      HAD_SECOND_DELIMIT = .FALSE.
	      J=1
C
C Assume first character is to be the delimiting character
	      DELIMIT = CMD_TEXT(1)
C
C Split cmd_text into two strings - one for posting
C and the other for a menu
	      DO 220,N=2,CMD_LEN
		 IF(CMD_TEXT(N) .NE. DELIMIT )THEN
		     IF(.NOT.HAD_SECOND_DELIMIT)THEN
                        CMD_TEXT(N-1) = CMD_TEXT(N)
			SAV_LEN = N-1
		     ELSE 
			BUFFER(J)=CMD_TEXT(N)
			J=J+1
		     ENDIF
	         ELSE
		     HAD_SECOND_DELIMIT = .TRUE.
		 ENDIF
 220	      CONTINUE
C
C Tidy ends of text buffers
	      BUFFER(J) = 0
	      DO 230,N=SAV_LEN+1,CMD_LEN
		 CMD_TEXT(N) = 0
 230	      CONTINUE
	      CMD_LEN = SAV_LEN

C
C call the required menu
	      CONSOLE = WSUI$GET_NAMED_CONSOLE(BUFFER)
	      CALL SET_TOGGLES(CONSOLE,.FALSE.)
	      CALL SET_GROUPS(CONSOLE)
	      CALL WSUI$DISPLAY_CONSOLE(CONSOLE)
C
	   ENDIF
C
C
C*********************************************************************
C
C just complete if return code is 991
	   IF (CODE.EQ.991)THEN
	      QUIT = .TRUE.
	      NEED_MBOX = .FALSE.
	   ENDIF
C
C*********************************************************************
C
C and then set event flag to spring main loop
C ( includes return code 001 )
	   CALL SET_EVENT_FLAG(MAIN_EFN,.TRUE.)
C
C 
	ENDIF
C
C finished....
	RETURN
	END  
	
