C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-08-14 13:27:58.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C
C This is an example of a LITES2/FPP text drawing shareable image
C
	SUBROUTINE DRAW_TEXT(
     &		TEXT,FC,SC,XPOS,YPOS,AUX,TRITXT,SRIPLT,TRISCN)
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author Clarke Brunt	7-Dec-1986
C ammended by Ron Russell, 24 -Jul-1987, for use on AEG photoplotters
C
C To plot Hydro numerical text, on AEG photo-plotters, using flashed
C numbers
C Based on Hydro routines HQPARS,HQPLOT
C
C The routine is expected to be used as a shareable image by LITES2
C and FPP, on logical name LSL$TEXT_ROUTINE.
C
C To link it do the following:
C	$ FORTRAN TEXT_ROUTINE.SRC
C	$ LINK/share TEXT_ROUTINE,SYS$INPUT:/opt
C       universal=DRAW_TEXT
C	$ Define LSL$TEXT_ROUTINE disk:[directory]TEXT_ROUTINE.EXE
C
	IMPLICIT NONE
C
C define layout of AUX array (copy of LITES2 CMN:AUXDEF.PAR)
C
	PARAMETER AUXLEN = 8	! length of auxiliary array
	PARAMETER ANGI = 1	! angle
	PARAMETER COSI = 2	! cosine
	PARAMETER SINI = 3	! sine
	PARAMETER SIZI = 4	! size
	PARAMETER MINXI= 5	! minimum x
	PARAMETER MAXXI= 6	! maximum x
	PARAMETER MINYI= 7	! minimum y
	PARAMETER MAXYI= 8	! maximum y
C
C arguments
	CHARACTER*(*) TEXT		! text to draw
	INTEGER	FC			! feature code
C
C SC is always the real FRTSC when passed by LITES2/FPP. FRTHW is the
C next but one longword, so we access it as SC(3). This relies on
C LITES2/FPP and common block LSL$CMNFRT:FRTCOM.CMN not being changed.
	INTEGER	SC(3)			! secondary code (font) from FRT
	REAL	XPOS,YPOS		! coordinate
	REAL	AUX(AUXLEN)		! array of extra information
	LOGICAL	TRITXT			! FRTLIB routine to draw text
	LOGICAL	SRIPLT			! FRTLIB routine to draw symbol
	LOGICAL	TRISCN			! FRTLIB routine to size text
C
C Values of N are:
C	1 - reduced sounding
C	2 - hairline sounding
C	3 - ordinary sounding
C	4 - spotheight or berth number
C	5 - contour label
C
C data
	INTEGER	IFONT(5)	! FRT font for each N
	DATA	IFONT/4,3,4,3,3/! 3 is upright, 4 italic
C
	REAL	SIZEM(5)	! size of main figures (mm)
	DATA	SIZEM/1.55,1.65,1.65,1.50,1.25/
C
	REAL	SIZES(5)	! size of subscript (mm)
	DATA	SIZES/1.22,1.15,1.35,0.0,0.0/
C
C Shift to optically centre digit 0-9 for N 1-5
	REAL	OPTCEN(0:9,5)
	DATA	OPTCEN/ 0.056,-0.256, 0.042, 0.0  , 0.0  ,	! N=1
     &			0.054, 0.0  ,-0.103, 0.066,-0.045,
     &			0.050,-0.269, 0.0  , 0.0  , 0.0  ,	! N=2
     &			0.0  , 0.013,-0.013, 0.013,-0.025,
     &			0.060,-0.273, 0.045, 0.0  , 0.0  ,	! N=3
     &			0.058, 0.0  ,-0.110, 0.070,-0.048,
     &			0.043,-0.010, 0.0  , 0.0  , 0.0  ,	! N=4
     &			0.0  , 0.011,-0.011, 0.011,-0.021,
     &			0.036,-0.008, 0.0  , 0.0  , 0.0  ,	! N=5
     &			0.0  , 0.009,-0.009, 0.009,-0.017/
C
C Shift after each digit 0-9 for N 1-5
	REAL	ONMOVE(0:9,5)
	DATA	ONMOVE/ 1.311, 1.219, 1.250, 1.303, 1.303,	! N=1
     &			1.249, 1.303, 1.406, 1.369, 1.348,
     &			1.425, 1.219, 1.288, 1.288, 1.288,	! N=2
     &			1.288, 1.275, 1.301, 1.275, 1.313,
     &			1.395, 1.298, 1.331, 1.388, 1.388,	! N=3
     &			1.330, 1.388, 1.498, 1.458, 1.436,
     &			1.300, 1.000, 1.250, 1.300, 1.300,	! N=4
     &			1.300, 1.300, 1.300, 1.300, 1.300,
     &			1.083, 0.833, 1.041, 1.083, 1.083,	! N=5
     &			1.083, 1.083, 1.083, 1.083, 1.083/
C
C Shift to left for main figures if subscript present for N 1-4
	REAL	XSUBS(4)
	REAL	XSUBD1(4)	! for sounding >10 and <20
	REAL	XSUBD2(4)	! for sounding >=20 and <30
	DATA	XSUBS / 0.314, 0.385, 0.295, 0.265/
	DATA	XSUBD1/ 1.084, 1.084, 1.084, 0.000/
	DATA	XSUBD2/ 1.150, 1.150, 1.150, 0.000/
C
C Shift up for main figures if subscript present for N 1-4
	REAL	YSUB(4)
	DATA	YSUB  / 0.268, 0.242, 0.297, 0.000/
C
C Movement down for subscript for N 1-4
	REAL	SUBY(4)
	DATA	SUBY  / 0.610, 0.550, 0.675, 0.000/
C
C Movement to right after digit 0-9 for subscript 1-9 for N 1-3
	REAL	SUBX(0:9,9,3)
	DATA	SUBX  / 0.839, 0.783, 0.783, 0.783, 0.811,! sub=1, N=1
     &			0.783, 0.783, 0.783, 0.783, 0.783,
     &			1.027, 0.914, 0.970, 0.998, 1.055,! sub=2
     &			0.998, 0.998, 0.914, 1.027, 0.998,
     &			0.998, 0.914, 0.970, 0.970, 0.970,! sub=3
     &			0.970, 0.970, 0.914, 0.970, 0.970,
     &			0.914, 0.914, 0.914, 0.914, 0.914,! sub=4
     &			0.914, 0.914, 0.914, 0.914, 0.914,
     &			1.027, 0.914, 0.970, 1.027, 0.970,! sub=5
     &			0.970, 0.998, 0.914, 0.998, 0.998,
     &			1.027, 0.914, 0.970, 0.970, 0.970,! sub=6
     &			0.970, 0.970, 0.914, 0.970, 0.970,
     &			1.027, 0.914, 0.970, 0.970, 0.970,! sub=7
     &			0.970, 0.970, 0.914, 0.970, 0.970,
     &			1.027, 0.914, 0.970, 0.998, 0.970,! sub=8
     &			0.970, 0.998, 0.914, 0.970, 0.970,
     &			1.027, 0.914, 0.970, 0.970, 0.970,! sub=9
     &			0.970, 0.970, 0.914, 0.970, 0.970,
     &			1.068, 0.948, 1.068, 1.068, 1.038,! sub=1, N=2
     &			1.038, 1.038, 0.888, 1.068, 1.008,
     &			1.237, 1.087, 1.177, 1.267, 1.237,! sub=2
     &			1.177, 1.177, 0.997, 1.237, 1.147,
     &			1.237, 1.087, 1.177, 1.267, 1.237,! sub=3
     &			1.177, 1.177, 0.997, 1.237, 1.147,
     &			1.117, 1.087, 1.207, 1.177, 1.117,! sub=4
     &			1.087, 1.087, 0.997, 1.147, 1.057,
     &			1.237, 1.117, 1.267, 1.267, 1.237,! sub=5
     &			1.207, 1.177, 0.997, 1.267, 1.177,
     &			1.237, 1.117, 1.237, 1.267, 1.237,! sub=6
     &			1.177, 1.177, 0.997, 1.267, 1.117,
     &			1.237, 1.117, 1.177, 1.267, 1.267,! sub=7
     &			1.177, 1.177, 0.997, 1.267, 1.147,
     &			1.237, 1.117, 1.267, 1.267, 1.267,! sub=8
     &			1.207, 1.237, 0.997, 1.267, 1.177,
     &			1.237, 1.117, 1.267, 1.267, 1.267,! sub=9
     &			1.207, 1.237, 0.997, 1.267, 1.147,
     &			0.893, 0.833, 0.833, 0.833, 0.863,! sub=1, N=3
     &			0.833, 0.833, 0.833, 0.833, 0.833,
     &			1.093, 0.973, 1.033, 1.063, 1.123,! sub=2
     &			1.063, 1.063, 0.973, 1.093, 1.063,
     &			1.063, 0.973, 1.033, 1.033, 1.033,! sub=3
     &			1.033, 1.033, 0.973, 1.033, 1.033,
     &			0.973, 0.973, 0.973, 0.973, 0.973,! sub=4
     &			0.973, 0.973, 0.973, 0.973, 0.973,
     &			1.093, 0.973, 1.033, 1.093, 1.033,! sub=5
     &			1.033, 1.063, 0.973, 1.063, 1.063,
     &			1.093, 0.973, 1.033, 1.033, 1.033,! sub=6
     &			1.033, 1.033, 0.973, 1.033, 1.033,
     &			1.093, 0.973, 1.033, 1.033, 1.033,! sub=7
     &			1.033, 1.033, 0.973, 1.033, 1.033,
     &			1.093, 0.973, 1.033, 1.063, 1.033,! sub=8
     &			1.033, 1.063, 0.973, 1.033, 1.033,
     &			1.093, 0.973, 1.033, 1.033, 1.033,! sub=9
     &			1.033, 1.033, 0.973, 1.033, 1.033/
C
C slug number for flashed main and subscript 0, for fonts 1-5
	INTEGER	SLUG_BASE(2,5)
	DATA	SLUG_BASE/ 30, 40,	! font 1
     &	                   50, 60,	! font 2
     &	                   70, 80,	! font 3
     &	                   80, 30,	! font 4
     &	                   60, 30/	! font 5
C
C slug number for point sizes 1-24, char/punc, light/medium
	BYTE	SLUG(24,2,2)
	DATA	SLUG	/ 1, 1, 1, 1, 1, 0, 2, 2, 3, 4, 4,99, ! UL char
     &			 99,98, 6, 6,97,97,97,96,96,96,94,94,
     &			  1, 1, 1, 1, 1, 1, 1, 0, 2, 3, 3, 4, ! UL punc
     &			  5, 5,99,99,98,98, 6, 6,97,97,96,96,
     &			  2, 2, 2, 2, 3, 4, 5,99,98, 6,97,97, ! UM char
     &			 96,96,96,94,94,94,92,92,92,92,29,29,
     &			  1, 1, 1, 1, 1, 1, 0, 2, 3, 3, 4, 5, ! UM punc
     &			  5,98,98, 6, 6, 6,97,97,96,95,95,95/
C
C line weigth for point sizes 1-24, char/punc, light/medium
	REAL	WEIGHT(24,2,2)
	DATA	WEIGHT	/0.100,0.100,0.100,0.100,0.100,0.127, ! UL char
     &			 0.152,0.152,0.178,0.200,0.200,0.250,
     &			 0.250,0.275,0.300,0.300,0.350,0.350,
     &			 0.350,0.400,0.400,0.400,0.500,0.500,
     &			 0.100,0.100,0.100,0.100,0.100,0.100, ! UL punc
     &			 0.100,0.127,0.152,0.178,0.178,0.200,
     &			 0.229,0.229,0.250,0.250,0.275,0.275,
     &			 0.300,0.300,0.350,0.350,0.400,0.400,
     &			 0.152,0.152,0.152,0.152,0.178,0.200, ! UM char
     &			 0.229,0.250,0.275,0.300,0.350,0.350,
     &			 0.400,0.400,0.400,0.500,0.500,0.500,
     &			 0.600,0.600,0.600,0.600,0.800,0.800,
     &			 0.100,0.100,0.100,0.100,0.100,0.100, ! UM punc
     &			 0.127,0.152,0.178,0.178,0.200,0.229,
     &			 0.229,0.275,0.275,0.300,0.300,0.300,
     &			 0.350,0.350,0.400,0.400,0.450,0.450/
C
C workspace
	INTEGER	N			! Hydro numerical text 'font'
	INTEGER	NFONT			! Hydro plotter font
	REAL	AMFS			! size of main figures
	REAL	SFS			! size of subscript
	INTEGER	SND			! 10 * actual sounding value
	INTEGER	MAIN			! main part as integer
	INTEGER	ISUB			! subscript as integer
	INTEGER	NDIG			! digits in main part
	LOGICAL*1 DRYING		! drying height? (i.e. negative)
	BYTE	CH			! character
	LOGICAL*1 INSUB			! in subscript
	LOGICAL*1 HADSUB		! had subscript
	INTEGER	IARR(8)			! array of digits
	REAL	SAZ,CAZ			! sine and cosine of angle
	REAL	COG			! optical centre of gravity
	INTEGER	I			! loop counter
	REAL	X,Y			! position
	REAL	X1,Y1,X2,Y2		! positions for underline
	INTEGER	PTR			! pointer into text string
	LOGICAL*1 HADESC		! had an escape character
	REAL	CHWID			! width of character
	CHARACTER*2 CCH			! pair of characters
	INTEGER	SAVHW			! save of FRTHW
	INTEGER	ULUM			! light (1) or medium (2)
	INTEGER	PUNC			! char (1) or punc (2)
	INTEGER	POINT			! point size
	REAL	SIZE			! adjusted size
C
	SAZ = AUX(SINI)			! sine of angle (copy from AUX)
	CAZ = AUX(COSI)			! cosine of angle
C
	IF (FC.LT.901.OR.FC.GT.905) THEN	! ordinary text
C
C calculate position of bottom left of text (allow justification)
	   X = XPOS+AUX(MINXI)*AUX(COSI)-AUX(MINYI)*AUX(SINI)
	   Y = YPOS+AUX(MINXI)*AUX(SINI)+AUX(MINYI)*AUX(COSI)
C
	   SAVHW = SC(3)		! save FRTHW
	   ULUM = 2			! assume UM
	   IF (FC.EQ. 801.OR.FC.EQ. 802.OR.
     &	       FC.EQ.1801.OR.FC.EQ.1802) ULUM = 1	! it's UL
	   POINT = NINT(AUX(SIZI)*4.0)	! get point size
	   IF (POINT.LE.0) POINT = 1
	   IF (POINT.GT.24) POINT = 24
	   HADESC = .FALSE.		! not escaped yet
C
C loop for each character in the string
C
	   DO 2 I=1,LEN(TEXT)
	      CCH(:1) = TEXT(I:I)
	      IF (CCH(:1).EQ.CHAR(0)) GOTO 2 ! skip nulls
	      IF (CCH(:1).EQ.'$') THEN	! its an escape sequence
	         HADESC = .NOT.HADESC
	         IF (HADESC) GOTO 2	! set escaped flag and wait
	      ENDIF
	      IF (HADESC) THEN
	         CCH(:1) = CHAR(ICHAR(CCH(:1))+128)	! escaped
	         HADESC = .FALSE.	! but no others
	      ENDIF
	      IF (CCH(:1).NE.' ') THEN	! skip spaces
	         PUNC = 2		! assume punctuation
	         IF ((CCH(:1).GE.'0'.AND.CCH(:1).LE.'9').OR.
     &		     (CCH(:1).GE.'A'.AND.CCH(:1).LE.'Z').OR.
     &		     (CCH(:1).GE.'a'.AND.CCH(:1).LE.'z').OR.
     &		      CCH(:1).EQ.'&' .OR.CCH(:1).EQ.'$' .OR.
     &		      CCH(:1).EQ.'.') PUNC = 1
C
	         N = 1			! just one char
	         IF (CCH(:1).EQ.'$') THEN
	            N = 2		! duplicate $
	            CCH(2:2) = '$'
	         ENDIF
C
C adjust size according to line weight
	         SIZE = (AUX(SIZI)-WEIGHT(POINT,PUNC,ULUM))*10.0/9.0
C
C set FRTHW to the slug to be used
	         SC(3) = SLUG(POINT,PUNC,ULUM)
	         CALL TRITXT(CCH(:N),SC,X,Y,SIZE,AUX(ANGI))
	      ENDIF
	      CALL TRISCN(CCH(:N),SC,CHWID)	! get width of char
	      CHWID = CHWID*AUX(SIZI)
	      X = X + CHWID*CAZ		! add spacing vector
	      Y = Y + CHWID*SAZ
2	   CONTINUE
	   SC(3) = SAVHW		! restore FRTHW
	   GOTO 9999
	ENDIF
C
C 901 to 905 are numerical text
	N = FC-900
	NFONT = IFONT(N)		! FRT font to use
	AMFS = SIZEM(N) 		! size of main figures
	SFS = SIZES(N)		 	! size of subscript
C
C parse the text string
	PTR = 0
5	PTR = PTR+1
	IF (PTR.GT.LEN(TEXT)) GOTO 99
	CH = ICHAR(TEXT(PTR:PTR))
	IF (CH.EQ.' '.OR.CH.EQ.9) GOTO 5! ignore leading space and tab
	DRYING = CH.EQ.'-'		! is it negative
	IF (CH.NE.'+'.AND.CH.NE.'-') PTR = PTR-1	! no sign
	MAIN = 0			! main part zero
	NDIG = 0			! no digits in main part yet
	ISUB = 0			! subscript zero
	INSUB = .FALSE.			! not in subscript
	HADSUB = .FALSE.		! not had subscript
C
C get next character
10	PTR = PTR+1
	IF (PTR.LE.LEN(TEXT)) THEN
	   CH = ICHAR(TEXT(PTR:PTR))
	   IF (CH.EQ.'.') THEN		! decimal point
	      IF (INSUB) GOTO 99	! already had one
	      INSUB = .TRUE.
	      GOTO 10
	   ENDIF
	   IF (CH.EQ.' '.OR.CH.EQ.9) GOTO 20	! end of number
	   IF (CH.LT.'0'.OR.CH.GT.'9') GOTO 99	! illegal char
	   IF (INSUB) THEN		! in subscript part
	      IF (HADSUB) GOTO 99	! already had subscript digit
	      ISUB = CH-48		! subscript value
	      HADSUB = .TRUE.		! now had subscript digit
	   ELSE				! in main part
	      IF (MAIN.NE.0.OR.CH.NE.'0') THEN	! ignore leading zeros
	         NDIG = NDIG+1		! count main digits
	         IF (NDIG.GT.8) GOTO 99	! too many
	         IARR(NDIG) = CH-48	! actual digit value
	         MAIN = 10*MAIN+IARR(NDIG) ! add in digit
	      ENDIF
	   ENDIF
	   GOTO 10			! back for next digit
	ENDIF
C
C end of number
20	IF (NDIG.EQ.0) THEN		! no main digits
	   NDIG = 1			! so insert leading zero
	   IARR(1) = 0
	ENDIF
	SND = 10*MAIN + ISUB		! 10 * actual value
	GOTO 100			! number OK
C
99	TYPE *,'Bad numerical text string ',TEXT
	GOTO 9999
C
C reject subscripts if spot height or contour label
100	IF (ISUB.GT.0.AND.N.GE.4) THEN
	   TYPE *,
     & 'Spot height or contour label has subscript, therefore rejected'
	   TYPE *,'Text input was ',TEXT
	   GOTO 9999
	ENDIF
C
C Get to start position of text
	X = 0.0
	Y = 0.0
	IF (ISUB.EQ.0) THEN		! no subscript
C
	   IF (NDIG.EQ.1) THEN
C
C For a single digit, use optical centre of the digit
C (Actually no reason to move digit at all, but the correction factors
C below are based on this being done)
	      COG = OPTCEN(IARR(1),N)
	   ELSE
C
C Optical centre if halfway between that of first and last characters
	      COG = 0.0
	      DO 30 I=1,NDIG-1
	         COG = COG+ONMOVE(IARR(I),N)+OPTCEN(IARR(I+1),N)
30	      CONTINUE
	      COG = 0.5*COG
	   ENDIF
C
C Allow for optical centre
	   X = X-COG
	ELSE				! has subscript
C
C Move start position up
	   Y = Y+YSUB(N)
C
C Move start position left
	   IF (MAIN.LT.10) THEN		! single digit
	      X = X-XSUBS(N)
	   ELSEIF(MAIN.LT.20) THEN	! 10 to <20
	      X = X-XSUBD1(N)
	   ELSE
	      X = X-XSUBD2(N)		! 20 to <30 (hopefully)
	   ENDIF
	ENDIF
C
C Make specific corrections (NB SND is 10*actual value)
	IF (N.LE.3) THEN		! only for soundings
	   IF (SND.EQ.2) THEN
	      X = X-0.1
	   ELSEIF (SND.EQ.3) THEN
	      X = X-0.2
	   ELSEIF (SND.EQ.4) THEN
	      X = X-0.1
	   ELSEIF (SND.GE.5.AND.SND.LE.10) THEN
	      X = X-0.2
	   ELSEIF (MAIN.GE.2.AND.MAIN.LE.9.AND.MAIN.NE.7.AND.
     &		   ISUB.GE.2.AND.
     &		   SND.NE.44.AND.SND.NE.94) THEN
	      X = X-0.1
	   ELSEIF (SND.EQ.70.OR.SND.EQ.77) THEN
	      X = X-0.1
	   ELSEIF (SND.EQ.112) THEN
	      X = X+0.1
	   ELSEIF (SND.GE.111.AND.SND.LE.119) THEN
	      X = X+0.2
	   ELSEIF (SND.GE.171.AND.SND.LE.179) THEN
	      X = X+0.1
	   ENDIF
	   IF (MAIN.GE.10.AND.ISUB.EQ.1) X = X+0.1
	ENDIF
C
C Remember initial position for underlining drying heights
C (Include move from centre to bottom left of character box)
	X1 = X-AMFS*0.333
	Y1 = Y-SUBY(N)-AMFS*0.5
C
C Plot the main figures
	DO 60 I=1,NDIG
	   X = X+OPTCEN(IARR(I),N)
C
C plot figure as flashed symbol
	   CALL SRIPLT(SLUG_BASE(1,N)+IARR(I),XPOS+X*CAZ-Y*SAZ,
     &	            YPOS+X*SAZ+Y*CAZ,AMFS,AUX(ANGI),.TRUE.)
	   IF (I.LT.NDIG) X = X+ONMOVE(IARR(I),N)
60	CONTINUE
C
C Plot the subscript
	IF (ISUB.GT.0) THEN
	   X = X+SUBX(IARR(NDIG),ISUB,N)	! move right
	   Y = Y-SUBY(N)			! move down
C
C Allow for difference in character size
	   X2 = X-(AMFS-SFS)*0.333
	   Y2 = Y-(AMFS-SFS)*0.5
C
C plot figure as flashed symbol
	   CALL SRIPLT(SLUG_BASE(2,N)+ISUB,XPOS+X2*CAZ-Y2*SAZ,
     &	            YPOS+X*SAZ+Y*CAZ,AMFS,AUX(ANGI),.TRUE.)
	ENDIF
C
C Underline drying height
	IF (.NOT.DRYING) GOTO 9999	! if not, then that's all
C
	GOTO (3000,2000,3000),N
	GOTO 9999			! others should not be negative
C
C Upright soundings (N=2)
2000	IF (ISUB.GT.0) THEN
	   X2 = X-0.15-AMFS*0.333	! end line before subscript
	ELSE
	   IF (MAIN.GE.10) THEN		! two digits
	      X2 = X1+1.95
	   ELSE				! single digit
	      X2 = X1+1.3
	   ENDIF
	ENDIF
	GOTO 9000			! draw it
C
C Reduced italic (N=1) and italic (N=3) soundings
3000	Y1 = Y1+0.1
	IF (ISUB.GT.0) THEN
	   IF (MAIN.GE.10) THEN
	      X1 = X1-0.1
	      IF (ISUB.GT.1) THEN
	         X2 = X-0.45
	      ELSE
	         X2 = X-0.25
	      ENDIF
	      X2 = X2-AMFS*0.333
	   ELSE
	      IF (ISUB.EQ.4) GOTO 301
	      IF (ISUB.EQ.7) GOTO 301
	      IF (MAIN.EQ.1) GOTO 307
	      IF (MAIN.EQ.7) GOTO 307
	      IF (ISUB.EQ.1) GOTO 301
	      X1 = X1-0.4
	      X2 = X-0.35-AMFS*0.333
	      GOTO 9000			! draw it
C
C Single digit with subscript 4 or 7, or 1 (digit not 1 or 7)
301	      X1 = X1-0.4
	      X2 = X-0.15-AMFS*0.333
	      GOTO 9000
C
C Single digit 1 or 7 with subscript
307	      IF (ISUB.EQ.1) THEN
	         X1 = X1-0.43
	         X2 = X-0.1
	      ELSEIF (ISUB.EQ.2) THEN
	         X1 = X1-0.5
	         X2 = X-0.3
	      ELSEIF (ISUB.EQ.4.OR.ISUB.EQ.6.OR.ISUB.EQ.7) THEN
	         X1 = X1-0.4
	         X2 = X-0.2
	      ELSE
	         X1 = X1-0.45
	         X2 = X-0.25
	      ENDIF
	      X2 = X2-AMFS*0.333
	      GOTO 9000			! draw it
	   ENDIF
	ELSE
C
C No subscript
	   IF (MAIN.GE.10) THEN
	      IF (MAIN.EQ.11) THEN
	         X2 = X1+1.75
	      ELSE
	         X2 = X1+1.95
	      ENDIF
	   ELSE
	      X1 = X1-0.5
	      X2 = X1+1.3
	   ENDIF
	ENDIF
C
C Draw line using underline character in font
9000	CALL TRITXT('_',NFONT,
     &		XPOS+X1*CAZ-Y1*SAZ,YPOS+X1*SAZ+Y1*CAZ,X2-X1,AUX(ANGI))
C
9999	RETURN
	END
