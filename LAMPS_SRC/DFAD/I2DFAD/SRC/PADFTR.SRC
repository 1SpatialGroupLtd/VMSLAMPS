C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-08-14 09:52:28.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE PADFTR
C
***	IDENT	22MR88
***	MODULE	PADFTR
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England.
C Author: M. Dhillon, 2 June 1983
C
CMOD	Modernised to use LSLLIB and other recent developments
C						JMB 22-Mar-1988
C
C
C Subroutine to output a pad feature to a DMA DLMS DFAD (Defense 
C Mapping Agency Digital Land Mass Simulation Digital Feature Analysis
C Data) magtape.
C
	IMPLICIT NONE
C 
C Common block
C
***	COMMON /HERE:CHECKS/
***	COMMON /LSL$CMNDLMS:DFAD/
***	COMMON /HERE:DESCR/
***	COMMON /HERE:STATE/
***	COMMON /HERE:PARAMS/
C
C Workspace
C
	INTEGER*2 	OFFSET		! index into DFABUF
C
C Code starts here
C Now make the feature type equal to 3 ie: pad feature, but since that 
C means setting the two appropriate bits and all the other bits in all 
C the words are set as well, we may as well set all bits in all words.
C Note that the checksum is not called because in 1's complement terms
C all we are doing is adding negative(all 36 bits set) zero to it, so
C the current value of the checksum is the final value.
C Start by checking if it is necessary to output a pad feature.
C
C
C Next line commented out to force output of pad feature even when buffer is
C empty.
CCC	IF (DFAPTR .EQ. 1) GOTO 1000		! ie: return
	DO 100	OFFSET=DFAPTR,1199,2
	   CALL LIB$INSV('3FFFF'X,0,18,DFABUF(OFFSET))
	   CALL LIB$INSV('3FFFF'X,0,18,DFABUF(OFFSET+1))
100	CONTINUE
C
C Next line not required.
CCC	DFAPTR = OFFSET
C
C
C  When the buffer contains only padding set the checksum to -0 (all bits set)
	IF (DFAPTR.EQ.1) THEN
	  CHKSUM(1) = '3FFFF'X
	  CHKSUM(2) = '3FFFF'X
	ENDIF
C
C The next word is the checksum itself, so write this out to DFABUF,
C but since the do-loop variable is undefined outside the scope of the 
C loop we must assert the offset value.
	OFFSET = 1201
	DFAPTR = OFFSET
	CALL LIB$INSV(CHKSUM(1),0,18,DFABUF(OFFSET))
	CALL LIB$INSV(CHKSUM(2),0,18,DFABUF(OFFSET+1))
C The last word of the feature is all zeroes
	OFFSET = OFFSET +2
	DFAPTR = OFFSET
	CALL LIB$INSV(0,0,18,DFABUF(OFFSET))
	CALL LIB$INSV(0,0,18,DFABUF(OFFSET+1))
C Now check if everything has been done
	OFFSET = OFFSET +2
	DFAPTR = OFFSET
	IF (DFAPTR .NE. 1205) THEN
	   CALL WRITEF('Error in outputting pad feature')
	   GOTO 1000
	END IF
C 
C Now write it out to magtape
C
	BLKTYP = FTRBLK
	CALL WRTMAG
C
C ...and finish here
C
1000	RETURN
	END
