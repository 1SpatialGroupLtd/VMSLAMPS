C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-03-24 16:19:38.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION OBTNAC()
C
***	IDENT 22MR88
***	MODULE OBTNAC
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England.
C Author: M. Dhillon, 17 May 1983
C
CMOD	Modernised to use LSLLIB and other recent developments
C						JMB 22-Mar-1988
C
C
C Subroutine to obtain the DFAD data from an IFF file AC entry.
C
	IMPLICIT NONE
C
***	COMMON /HERE:SCRIPT/
***	COMMON /HERE:IFFILE/
***	COMMON /HERE:AUXIL/
***	COMMON /HERE:PARAMS/
***	COMMON /HERE:DESCR/
***	COMMON /HERE:STATE/
***	COMMON /LSL$CMNLSL:LSLLIBMSG.PAR/
***	COMMON /LSL$CMNLSL:EXPC/
***	COMMON /LSL$CMNLSL:CMDCOM/
***	COMMON /LSL$CMNLSL:EXCEPTION/
***	COMMON /LSL$CMNLSL:MTOVCM/
C
C functions called
	INTEGER RDCOMM			! read command
C
C Workspace
C
	INTEGER 	CMD		! command number from RDCOMM
C
C Command tables to use
	INTEGER		GETAC_CMD_TABLE
	EXTERNAL	GETAC_CMD_TABLE
C
C Return .TRUE. unless succesful
C
	OBTNAC = .TRUE.
C
C Goto start of line
C
	CALL BSLN
C
C Start by reading any command
C
10	CMD = RDCOMM(GETAC_CMD_TABLE)
C
C Check for succesful completion of commands read
C
	IF (CMD .EQ. 0) THEN
	   IF ((ERRNUM).OR.(ERRNUM.EQ.LSL__UNEXPEOL)) THEN
	      OBTNAC = .FALSE.			! finished
	      GOTO 1000				! so return
	   ELSE
	      GOTO 1000				! give up
	   ENDIF
	ENDIF
C
C otherwise interpret commands
C
	GOTO (100,200,300,400,500,600,700,800,900) CMD
C
C Fall through with an invalid command
C
	CALL WRITEF('Unrecognised FADT record field')
	GOTO 10				! try again
C
C Commands obeyed here and parameters checked for sensible values
C
C Feature type
C
100	FTYPE = INTARG(1)
	IF (FTYPE .LT. MINTYP .OR. FTYPE .GT. MAXTYP) THEN
	   CALL WRITEF('Feature Type out of range - returned %N',
     &								FTYPE)
	END IF 
	GOTO 10
C
C Predominant height
C
200	HEIGHT = INTARG(1)
	IF (HEIGHT .LT. MINHGT .OR. HEIGHT .GT. MAXHGT) THEN
	   CALL WRITEF(
     &		'Predominant height out of range - returned %N',
     &								HEIGHT)
	END IF
	GOTO 10
C
C Feature Identification code
C
300	FID = INTARG(1)
	IF (FID .LT. MINFID .OR. FID .GT. MAXFID) THEN
	   CALL WRITEF('Feature Identification code out of range')
	   CALL WRITEF('    - returned %N', FID)
	END IF
	GOTO 10
C
C Security classification code
C
400	IF (INTARG(1) .LT. MINSEC .OR. INTARG(1) .GT. MAXSEC) THEN
	   CALL WRITEF(
     &	'Security code out of range - returned %^L%N', INTARG(1))
	END IF
	IF (SECRTY.GE.0.AND.INTARG(1).NE.SECRTY) THEN
	   CALL EXPAND('Feature %^L%N: Security code', FAC )
	   CALL WRITAP(' %^L%N does not match that specified', 
     &			INTARG(1))
	ENDIF
	GOTO 10
C
C Releasibility code
C
500	IF (INTARG(1) .LT. MINREL .OR. INTARG(1) .GT. MAXREL) THEN
	   CALL WRITEF(
     &	'Releasibility code out of range - returned %N', INTARG(1) )
	END IF
	IF (RELEAS.GE.0.AND.INTARG(1).NE.RELEAS) THEN
	   CALL EXPAND('Feature %^L%N: Releasability code', FAC )
	   CALL WRITAP(' %^L%N does not match that specified', 
     &			INTARG(1))
	ENDIF
	GOTO 10
C
C Surface material category
C
600	SURFAM = INTARG(1)
	IF (SURFAM .LT. MINSUR .OR. SURFAM .GT. MAXSUR) THEN
	   CALL WRITEF('Surface material category out of range')
	   CALL WRITEF('    -returned %N', SURFAM)
	END IF
	GOTO 10
C
C Width of feature OR density(structures per area)
C
700 	IF (FTYPE .EQ. 0 .OR. FTYPE .EQ. 1) THEN
	   WIDTH = INTARG(1)
	   IF (WIDTH .LT. MINWID .OR. WIDTH .GT. MAXWID) THEN
	      CALL WRITEF(
     &	           'Width of feature out of range - returned %N',
     &								 WIDTH)
	   END IF
	ELSE
	   DENSTY = INTARG(1)
	   IF (DENSTY .LT. MINDEN .OR. DENSTY .GT. MAXDEN) THEN
	      CALL WRITEF('Density of features out of range')
	      CALL WRITEF('    -returned %N', DENSTY)
	    END IF
	END IF
	GOTO 10
C
C Length of feature OR directivity OR % of roof coverage
C
800	IF (FTYPE .EQ. 0) THEN   
	   LENGTH = INTARG(1)
	   IF (LENGTH .LT. MINLEN .OR. LENGTH .GT. MAXLEN) THEN
	      CALL WRITEF('Length of feature out of range')
	      CALL WRITEF('    - returned %N', LENGTH)
	   END IF
	ELSE IF (FTYPE .EQ. 1) THEN
	   DIRECT = INTARG(1)
	   IF (DIRECT .LT. MINDIR .OR. DIRECT .GT. MAXDIR) THEN
	      CALL WRITEF('Directivity out of range - returned %N',
     &								DIRECT)
	   END IF
	ELSE
	   ROOF = INTARG(1)
	   IF (ROOF .LT. MINROF .OR. ROOF .GT. MAXROF) THEN
	      CALL WRITEF('%%age roof coverage out of range')
	      CALL WRITEF('    - returned %N', ROOF)
	   END IF
	END IF
	GOTO 10
C
C Orientation of feature OR %age of tree coverage
C
900	IF (FTYPE .EQ. 0) THEN
	   ORIENT = INTARG(1)
	   IF ( (ORIENT.LT.MINORT.OR.ORIENT.GT.MAXORT) .AND.
     &		 ORIENT.NE.63 ) THEN
	      CALL WRITEF('Orientation of feature out of range')
	      CALL WRITEF('    - returned %N', ORIENT)
	   END IF
	ELSE IF (FTYPE .NE. 1) THEN
	   TREE = INTARG(1)
	   IF (TREE .LT. MINTRE .OR. TREE .GT. MAXTRE) THEN
	      CALL WRITEF('%%age tree coverage out of range')
 	      CALL WRITEF('    - returned %N', TREE)
	   END IF
	END IF
	GOTO 10
C
C and finish here
C
1000	RETURN
	END
