	SUBROUTINE OUTFTR(FBLNUM)
C
***	IDENT 14JL88
***	MODULE OUTFTR
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England.
C Author: M. Dhillon, 19 May 1983
C Modified: C.C. Brunt, 24 Aug 1983
C
CMOD	Modernised to use LSLLIB and other recent developments
C						JMB 22-Mar-1988
C
CMOD	To add difference between local and manuscript origins
C	to the coordinates before outptutting them
C						JMB 14-July-1988
C
C
C Subroutine to output a feature record to a DMA DLMS DFAD(Defense
C Mapping Agency Digital Land Mass Simulation Digital Feature Analysis
C Data) magtape.
C
C Feature records have the following format:
C
C
C Word	 Bits	#bits	Contents		Range
C
C 1	 1-14	14	FAC			1-9999
C	15-16	2	Feature TYPE		0-3
C	17-26	10	predominant HEIGHT	+/- 511
C	27-36	10	Feature IDentification	1-980
C
C 2	 1- 5	5	SURFAce Material categ	1-13
C	 6-36		varies with FTYPE...
C
C for point feature
C 2	 6-11	6	ORIENTation		0-31, 63
C	12-18	7	LENGTH/radius		0-127
C	19-25	7	WIDTH			0-127
C	26-36	11	number of coordinates	0-2047
C
C for linear feature
C 2	 6- 7	2	DIRECTivity		1-3
C	 8-14	7	WIDTH			0-127
C	15-23		not used
C	24-36	13	number of coordinates	0-8191
C
C for areal features
C 2	 6- 9	4	DENSiTY of features	0-13
C	10-13	4	% TREE coverage		0-10
C	14-17	4	% ROOF coverage		0-10
C	18-23		not used
C	24-36	13	number of coordinates	0-8191
C
C NOTE that in the table above, bit positions are in Univac convention
C ie bit 1 is the most significant ('rightmost') bit, and counting is
C thus in the opposite direction to on the VAX
C
C NOTE that in the code below, bit positions are in VAX convention -
C ie starting at 0, not at 1 - and that the Univac words are split into
C 2 1/2 words (the low half is always odd numbered index, the high half
C has and index one greater & thus even).
C
	IMPLICIT NONE
C
C Common blocks
C
***	COMMON /HERE:CHECKS/
***	COMMON /HERE:IFFILE/
***	COMMON /LSL$CMNDLMS:DFAD/
***	COMMON /HERE:DESCR/
***	COMMON /HERE:STATE/
***	COMMON /HERE:PARAMS/
C
C
C
C functions called
C
	INTEGER*4	LIB$INSV	! extract, no sign extend
	INTEGER*4	LIB$EXTZV	! insert into specified 
C					! bitfield
C passed
	INTEGER*2	FBLNUM		! feature block number
C
C workspace
	INTEGER*2	OFFSET		! offset for DFABUF
	INTEGER*4	XCOORD		! X co-ordinate
	INTEGER*4	YCOORD		! Y co-ordinate
C
C code starts here
C Start at the beginning (a very good place to start)
C
	IF (DFAPTR .EQ. 1) THEN
C
C Unset the checksum
C
	   CHKSUM(1) = 0
	   CHKSUM(2) = 0
	END IF
C
C Set the offset and pointer to the start of the buffer
C
	OFFSET = DFAPTR
C
C Now we are in the feature, the feature header to be exact
C
	INFTR = .TRUE.
	INFHDR = .TRUE.
C
C Insert the FAC into the correct place in DFABUF
C
	CALL LIB$INSV(FAC,4,14,DFABUF(OFFSET+1))
C
C ...and next the Feature type
C
	CALL LIB$INSV(FTYPE,2,2,DFABUF(OFFSET+1))
C
C ...and the predominant height
C Put height in units of 2m per unit
C
	HEIGHT = HEIGHT/2
C
C The height can be negative so set the first bit of the Univac 
C bitfield
C
	IF (HEIGHT .LT. 0) THEN
	   CALL LIB$INSV(1,1,1,DFABUF(OFFSET+1))
	   HEIGHT = HEIGHT * -1
	ELSE
	   CALL LIB$INSV(0,1,1,DFABUF(OFFSET+1))
	END IF
C
C ...and now the magnitude of the height
C First extract the ninth bit of the height and put it in the
C appropriate field
C
	IF ((HEIGHT .AND. '100'X) .NE. 0) THEN
	   CALL LIB$INSV(1,0,1,DFABUF(OFFSET+1))
	ELSE
	   CALL LIB$INSV(0,0,1,DFABUF(OFFSET+1))
	END IF
C
C ...and the rest of it to the low order Univac 1/2 word
C
	CALL LIB$INSV(HEIGHT,10,8,DFABUF(OFFSET))
C
C ...finish the word by inserting the Feature Identification code
C
	CALL LIB$INSV(FID,0,10,DFABUF(OFFSET))
C
C Evaluate the checksum
C
	CALL CHECK(DFABUF(OFFSET),CHKSUM)
C
C Start the second word by updating the offset and the pointer
C
	OFFSET = OFFSET + 2
	DFAPTR = OFFSET
C
C Check if this feature record is full
C
	IF (OFFSET .EQ. 1201) GOTO 200
C
C The second word varies according to the Feature type, apart from the
C surface material category
C
10	CALL LIB$INSV(SURFAM,13,5,DFABUF(OFFSET+1))
C
C ...and now for the variations
C
	IF (FTYPE .EQ. 0) THEN
	   CALL LIB$INSV(ORIENT,7,6,DFABUF(OFFSET+1))	! orientation
	   CALL LIB$INSV(LENGTH,0,7,DFABUF(OFFSET+1))	! length/radius
	   CALL LIB$INSV(WIDTH,11,7,DFABUF(OFFSET))	! width
C
C Now for the no. of co-ords in the feature
C
	   CALL LIB$INSV(STLEN,0,11,DFABUF(OFFSET))	! no. of points
	ELSE
C
C Now consider linear features
C
	   IF (FTYPE .EQ. 1) THEN
	      CALL LIB$INSV(DIRECT,11,2,DFABUF(OFFSET+1)) ! directivity
	      CALL LIB$INSV(WIDTH,4,7,DFABUF(OFFSET+1))	  ! width
C
C Fill up the unused bitfield with zeroes
C
	      CALL LIB$INSV(0,0,4,DFABUF(OFFSET+1))
	      CALL LIB$INSV(0,13,5,DFABUF(OFFSET))
	   ELSE				! assume it is an areal feature
C
C Now for the no. of structures per area
C
	      CALL LIB$INSV(DENSTY,9,4,DFABUF(OFFSET+1))  ! density
	      CALL LIB$INSV(TREE,5,4,DFABUF(OFFSET+1))	! % tree cover
	      CALL LIB$INSV(ROOF,1,4,DFABUF(OFFSET+1))  ! % roof cover
C
C ...and fill up the unused bitfield with zeroes
C
	      CALL LIB$INSV(0,0,1,DFABUF(OFFSET+1))
	      CALL LIB$INSV(0,13,5,DFABUF(OFFSET))
	   END IF
C
C Now put the no. of co-ordinates into DFABUF
C
	   CALL LIB$INSV(STLEN,0,13,DFABUF(OFFSET))
	END IF
C
C Now that the second word is there, update the checksum
C
	CALL CHECK(DFABUF(OFFSET),CHKSUM)
C
C We are no longer in the feature header
C
	INFHDR = .FALSE.
C
C Now for the rest of the feature record
C Put the co-ordinates into DFABUF
C
	DO 100 STPTR=1,STLEN
	   OFFSET = OFFSET+2
	   DFAPTR = OFFSET
C
C Check if they will all fit into one feature record, if not then
C finish the current block
C
	   IF (OFFSET .EQ. 1201) GOTO 200
C
C Before putting the co-ordinates into DFABUF, check that they are 
C within the given range, and convert them to type integer.
C
50	   IF ( STBUF(1,STPTR).LT.RANGE(1) ) THEN
	      CALL WRITEF(
     &		'longitude %N (X) in feature %N is too small',
     &				STPTR,		  FAC )
	   ELSEIF ( STBUF(1,STPTR).GT.RANGE(2) ) THEN
	      CALL WRITEF(
     &		'longitude %N (X) in feature %N is too large',
     &				STPTR,		  FAC )
	   ENDIF
C
	   IF ( STBUF(2,STPTR).LT.RANGE(3) ) THEN
	      CALL WRITEF(
     &		'latitude  %N (Y) in feature %N is too small',
     &				STPTR,		  FAC )
	   ELSEIF ( STBUF(2,STPTR).GT.RANGE(4) ) THEN
	      CALL WRITEF(
     &		'latitude  %N (Y) in feature %N is too large',
     &				STPTR,		  FAC )
	   ENDIF
C
C Points should all be positive, so round them by adding 0.5
C Also add diffence between the local and manuscript origins
C
	   XCOORD = IFIX(STBUF(1,STPTR) + LON_ORIGIN_DIFF + 0.5)
	   YCOORD = IFIX(STBUF(2,STPTR) + LAT_ORIGIN_DIFF + 0.5)
C
C Now add the latitude of the co-ordinate to DFABUF
C
	   CALL LIB$INSV(YCOORD,0,18,DFABUF(OFFSET+1))
C
C Now add the longitude of the co-ordinate to DFABUF
C
	   CALL LIB$INSV(XCOORD,0,18,DFABUF(OFFSET))
C
C ...and now update the checksum
C
	   CALL CHECK(DFABUF(OFFSET),CHKSUM)
C
C ...and for the next set of co-ordinates
C
100	CONTINUE
C
C End of co-ordinates - out of feature
C
	INFTR = .FALSE.
	OFFSET = OFFSET + 2
	DFAPTR = OFFSET
	IF (OFFSET .EQ. 1201) GOTO 200
	GOTO 1000			! otherwise return
C
C Now write the checksum word into DFABUF
C
200	CALL LIB$INSV(CHKSUM(1),0,18,DFABUF(OFFSET))
	CALL LIB$INSV(CHKSUM(2),0,18,DFABUF(OFFSET+1))
C
C Now write the final word of the feature record ie: all zeroes
C
	OFFSET = OFFSET + 2
	DFAPTR = OFFSET
	DFABUF(OFFSET) = 0
	DFABUF(OFFSET+1) = 0
C
C Now output the block to magtape
C
	IF (.NOT. DIAG) GOTO 300
	CALL WRITEF('Outputting feature block %^W%N', FBLNUM)
300	BLKTYP = FTRBLK
	CALL WRTMAG
	FBLNUM = FBLNUM + 1
C
C Now reset variables to indicate start of a new block
C
	OFFSET = 1
	DFAPTR = OFFSET
	CHKSUM(1) = 0
	CHKSUM(2) = 0
C
C Check if bits of this feature are to go into another feature record
C
	IF (INFHDR) GOTO 10
	IF (INFTR) GOTO 50
C
C ....and finish here
C
1000	RETURN
	END	
