C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-03-22 14:43:22.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE WRTMAG
C
***	IDENT 22MR88
***	MODULE WRTMAG
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England.
C Author: M. Dhillon, 23 May 1983
C
CMOD	Modernised to use LSLLIB and other recent developments
C						JMB 22-Mar-1988
C
C
C Subroutine to write a record out to magtape
C
	IMPLICIT NONE
C
C Common blocks
C
***	COMMON/LSL$CMNDLMS:DFAD/
***	COMMON/HERE:STATE/
***	COMMON/HERE:PARAMS/
***	COMMON/LSL$CMNLSL:MTOVCM/
C
C Functions called
C
	INTEGER*4	MTOWRB		! writes a block to magtape
	INTEGER*4	MTOEOF		! writes a tapemark to magtape
C
C Workspace
C
	INTEGER*4	ERROR		! function return value
	INTEGER*4	OERR		! to expand error into
	INTEGER*4	OUTLEN		! no. of bytes in record
	INTEGER*4	OFFSET		! pointer into DFABUF
C
C Code starts here
	OUTLEN = 0
	IF (BLKTYP .EQ. MANHED) OUTLEN = 27
	IF (BLKTYP .EQ. TRAILR) OUTLEN = 27
	IF (BLKTYP .EQ. FTRBLK) OUTLEN = 2709
	IF (BLKTYP .EQ. DSIHED) OUTLEN = 648
	IF (BLKTYP .EQ. ACCHED) OUTLEN = 2700
	IF (OUTLEN .LE. 0) THEN
	   CALL WRITEF('Invalid blocktype, returned %N',BLKTYP)
	   GOTO 1000			! return
	END IF
	IF (BLKTYP .EQ. DSIHED .OR. BLKTYP .EQ. ACCHED) GOTO 150
	OFFSET = 1
	DFAPTR = OFFSET
C
C Univac have the unfortunate habit (apart from using 36 bit words) of
C regarding the most significant stripe (in VAX terms) as the least
C significant. Thus we must reverse the order of the stripes in the
C buffer - each set of 1,2,3,4,... must become a set of ...,4,3,2,1
C
C Note that thus we reverse blocks of 9 stripes (2 words) which has the
C additional result of reversing the order of the words.
C So after swapping we would have our buffer containing stripes in a 
C  sensible order, but words in reversed pairs.
C
C Therefore the sensible thing to do is to reverse the order of the 
C words while putting them into another buffer, before swapping.
C The sequence is really quite simple, and relies on the fact that
C 9*8 = 2*36 = 72  -  ie 9 bytes are equivalent to 2 Univac words
C and we can ensure that we pack every 2 Univac words into 9 bytes in
C BYTBUF 
C
C Therefore for each pair of Univac words:
C
C word 2 comes first...
C low 1/2 word -> byte1, byte2, bottom 2 bits of byte3
C high 1/2 word ->  top 6 bits of byte3, byte4, bottom 4 bits of byte5
C
C words 1 comes after it...
C low 1/2 word ->  top 4 bits of byte5, byte6, bottom 6 bits of byte7
C high 1/2 ->  top 2 bits of byte7, byte8, byte9
C
C Let us do this for all the pairs in the record
C
	DO 100 BYTCNT=1,OUTLEN,9
	   CALL LIB$INSV(DFABUF(OFFSET+2),0,18,BYTBUF(BYTCNT))
	   CALL LIB$INSV(DFABUF(OFFSET+3),2,18,BYTBUF(BYTCNT+2))
	   CALL LIB$INSV(DFABUF(OFFSET),4,18,BYTBUF(BYTCNT+4))
	   CALL LIB$INSV(DFABUF(OFFSET+1),6,18,BYTBUF(BYTCNT+6))
	   OFFSET = OFFSET + 4
	   DFAPTR = OFFSET
100	CONTINUE
C 
C Finally swap the stripes around
C
	CALL SWAP(BYTBUF,OUTLEN,.FALSE.)
C
C ...and write this out to magtape
C 
150	ERROR = MTOWRB(BYTBUF,OUTLEN)
	IF (.NOT.ERROR) THEN
	   OERR = MTOERR		! expand the error into OERR
	   CALL LSL_PUTMSG(ERROR)
	   CALL LSL_ADDMSG(OERR)
	   GOTO 1000			! return
	END IF
C
C ...and finish here
C
1000	RETURN
	END
