C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-07-14 17:44:36.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION FIND_LOCAL_ORIGIN
C
***	IDENT	14JL88
***	MODULE	FIND_LOCAL_ORIGIN
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author J.M. Billing				14 July 1988
C
C
	IMPLICIT NONE
C
C common blocks...
C
***	COMMON/HERE:DESCR/		! contains file details
***	COMMON/HERE:I2DFADMSG.PAR/	! for messages
***	COMMON/LSL$CMNIFF:MD2DES/	! for error returns from IFF
C
C w/s variables
	INTEGER		IELEN		! length of IFF entry
C
C Assume success
C
	FIND_LOCAL_ORIGIN = .TRUE.
C
C First rewind the file, to ensure it is at the beginning
C
	CALL IFFRWD
C
C Clear flag to indicate have not yet found an MD2
C If this is clear at point when map header is processed, the
C local origin will be taken to be the same as the manuscript origin
C
	FOUND_MD2 = .FALSE.
C
C Now search for the MD entry
C
	CALL IFFNXC('MD',IELEN)
C
C Check that MD has been found
C
	IF (IELEN.EQ.-1) THEN
C
C Warn user if MD not found
C
	   CALL LSL_PUTMSG(I2D__ABSENTMD)
C
C Check that the Map Descriptor is of correct length for type 2
C
	ELSEIF (IELEN.NE.MD2LEN) THEN
C
C Warn the user if MD is not type 2
C
	   CALL LSL_PUTMSG(I2D__NOTMD2)
C
C Otherwise, MD is correct length for type 2, so read it
C
	ELSE
	   CALL EIHR(MD2ARR,MD2LEN,1)
C
C Check that type of map header is correct
C
C Check for unset MD, and warn user if it is found
C
	   IF (MATV2.EQ.-1) THEN
	      CALL LSL_PUTMSG(I2D__UNSETMD)
C
C Check for non-type 2 MD
C
	   ELSEIF (MATV2.NE.2) THEN
	      CALL LSL_PUTMSG(I2D__NOTMD2)
C
C Otherwise, it is a type 2 map descriptor, so set flag
C to indicate we have found it
C
	   ELSE
	      FOUND_MD2 = .TRUE.
C
C Now store away the local origin read from the MD2
C
	      LATLOCAL = SNGL (MD2LOC(2))
	      LONLOCAL = SNGL (MD2LOC(1))
C
	   ENDIF
	ENDIF
C
C Finally rewind the file, to restore it to its original position
C
	CALL IFFRWD
C
	RETURN				! back to the main program
	END
