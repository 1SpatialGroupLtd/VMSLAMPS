	LOGICAL	FUNCTION GETCMD()
C
***	IDENT	10DE93
***	MODULE	GETCMD
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs,  3 March 1983
C Modified for I2DFAD: M. Dhillon, 5 May 1983
C Modified  CC Brunt
C
CMOD	Modernised to use LSLLIB and other recent developments
C						JMB 22-Mar-1988
C
C
C this function reads the command line, and obeys any commands there
C to be obeyed. It returns TRUE if the program should tidy up & exit,
C FALSE otherwise.
C
	IMPLICIT NONE
C
	INCLUDE 'HERE:PARAMS.CMN'
	INCLUDE 'HERE:IFFILE.CMN'
	INCLUDE 'HERE:DESCR.CMN'
	INCLUDE 'HERE:I2DFADMSG.PAR'
	INCLUDE 'LSL$CMNLSL:CLD.CMN'
C
C Command Language Definitions:
	EXTERNAL	I2DFAD_CLD
C
C w/s variables
	LOGICAL		ABSENT	   ! .T. if file param. not found
	LOGICAL		THERE	   ! .T. if qual found
	LOGICAL		LOCAL      ! .T. if qual. is local
	LOGICAL		LOCNEG     ! set .T. if qual. locally negated
C
        LOGICAL		LOCERR     ! .T. - local error reporting
C
C Functions called:
	INTEGER*4	DCL_FILE   ! reads & parses file title from DCL 
C			           ! command line
	INTEGER*4	DCL_QUAL   ! looks for specified qualifier
        INTEGER*4       DCL_STARTUP! looks for command line
        INTEGER*4       DCL_CML	   ! gets command line
	INTEGER*4	DCL_INT	   ! get integer from qual
	INTEGER*4	DCL_STR    ! get string form qual
C
C...................................................................
C
C Initialise things
C
	LOCERR =.TRUE.		 ! local error reporting
	LOCAL  =.FALSE.          ! set .T. if qual. is local
        LOCNEG =.FALSE.          ! set .T. if qual. locally negated
C
C....................................................................
C
C Get command line for verb I2DFAD. DCL_STARTUP will return set to
C SS$_NORMAL if all well.
C
	GETCMD=DCL_STARTUP('I2DFAD'    	! command verb
     &      		,.FALSE.		! don't split par lists
     &      		,I2DFAD_CLD		! CLD module name
     &      		,LOCERR)        	! local error reporting
        IF (.NOT.GETCMD) GOTO 10 		! return
C
C....................................................................
C
C Check for qualifiers
C
C
C Check for /(NO)APPEND
C
	GETCMD = DCL_QUAL('APPEND'	! qual. name
     &     	,APP			! returned .T. if qual. found
     &          ,LOCAL		  	! .T. if qual local to parameter
     &		,LOCNEG		  	! .T. if qual locally negated
     &          ,LOCERR)		! .T.-local error reporting
	IF (.NOT.GETCMD) GOTO 10	! return
C
C Check for /(NO)DIAGNOSTICS
C
	GETCMD = DCL_QUAL('DIAGNOSTICS' ! qual. name
     &     	,DIAG			! returned .T. if qual. found
     &          ,LOCAL		  	! .T. if qual local to parameter
     &		,LOCNEG		  	! .T. if qual locally negated
     &          ,LOCERR)		! .T.-local error reporting
	IF (.NOT.GETCMD) GOTO 10	! return
C
C Check for /(NO)REWIND
C
	GETCMD = DCL_QUAL('REWIND'	! qual. name
     &     	,REWIND			! returned .T. if qual. found
     &          ,LOCAL		  	! .T. if qual local to parameter
     &		,LOCNEG		  	! .T. if qual locally negated
     &          ,LOCERR)		! .T.-local error reporting
	IF (.NOT.GETCMD) GOTO 10	! return
C
C If /REWIND present, then /APPEND cannot be, and flag must be set
C to prevent append taking place
C
	IF (REWIND) APP = .FALSE.
C
C Check for /SECURITY
C
	GETCMD = DCL_QUAL('SECURITY' ! qual. name
     &     	,THERE			! returned .T. if qual. found
     &          ,LOCAL		  	! .T. if qual local to parameter
     &		,LOCNEG		  	! .T. if qual locally negated
     &          ,LOCERR)		! .T.-local error reporting
	IF (.NOT.GETCMD) GOTO 10	! return
C
C Set up default
C
	SECRTY = -1	
C
C Find any SECURITY specified
C
	IF (THERE) THEN
	   GETCMD = DCL_INT('SECURITY',LOCERR)
	   IF (.NOT.GETCMD) GOTO 10
C
	   IF (NUMINT.GT.0) SECRTY = IARRAY(1)
C
	   IF ((SECRTY.LT.0).OR.(SECRTY.GT.99)) THEN
	      CALL LSL_PUTMSG(I2D__INVALSEC)
	      GETCMD = I2D__INVALSEC
	      GOTO 10
	   ENDIF
	ENDIF
C
C Check for /RELEASABILITY
C
	GETCMD = DCL_QUAL('RELEASABILITY' ! qual. name
     &     	,THERE			! returned .T. if qual. found
     &          ,LOCAL		  	! .T. if qual local to parameter
     &		,LOCNEG		  	! .T. if qual locally negated
     &          ,LOCERR)		! .T.-local error reporting
	IF (.NOT.GETCMD) GOTO 10	! return
C
C Set up default
C
	RELEAS = -1	
C
C Find any SECURITY specified
C
	IF (THERE) THEN
	   GETCMD = DCL_INT('RELEASABILITY',LOCERR)
	   IF (.NOT.GETCMD) GOTO 10
C
	   IF (NUMINT.GT.0) RELEAS = IARRAY(1)
C
	   IF ((RELEAS.LT.0).OR.(RELEAS.GT.99)) THEN
	      CALL LSL_PUTMSG(I2D__INVALREL)
	      GETCMD = I2D__INVALREL
	      GOTO 10
	   ENDIF
	ENDIF
C
C Check for /DEVICE
C
	GETCMD = DCL_QUAL('DEVICE' ! qual. name
     &     	,THERE			! returned .T. if qual. found
     &          ,LOCAL		  	! .T. if qual local to parameter
     &		,LOCNEG		  	! .T. if qual locally negated
     &          ,LOCERR)		! .T.-local error reporting
	IF (.NOT.GETCMD) GOTO 10	! return
C
C Set up default
C
	TAPEDEVICE = 'MTA0:'
	TAPEDEVLEN = 5
C
C Find any SECURITY specified
C
	IF (THERE) THEN
	   GETCMD = DCL_STR('DEVICE',LOCERR)
	   IF (.NOT.GETCMD) GOTO 10
C
	   IF (NUMSTR.GT.0) THEN
	      TAPEDEVICE = CARRAY(1)(1:STR_LEN(1))
	      TAPEDEVLEN = STR_LEN(1)
	   ENDIF
	ENDIF
C
C Check for /(NO)CHANGE2
C
	GETCMD = DCL_QUAL('CHANGE2' ! qual. name
     &     	,CHANGE2		! returned .T. if qual. found
     &          ,LOCAL		  	! .T. if qual local to parameter
     &		,LOCNEG		  	! .T. if qual locally negated
     &          ,LOCERR)		! .T.-local error reporting
	IF (.NOT.GETCMD) GOTO 10	! return
C
C Get input IFF file-name
C
	GETCMD = DCL_FILE('IN_FILESPEC'	!parameter label
     &		,'LSL$IF:DFAD.IFF;0'	! default file-name
     &		,ABSENT  	  	! .T. if no file-name
     &		,.FALSE.		! don't expect list of files
     &          ,LOCERR)		! .T.-local error reporting
C
C Transfer file-spec to a local variable
C
	IF (GETCMD) THEN
	   FILNAM = FILARY(1)(1:FIL_LEN(1))
	   FILLEN = FIL_LEN(1)
	ELSE
	   GOTO 10 			! return
	ENDIF 
C
C Exit
C			
10	RETURN
   	END
