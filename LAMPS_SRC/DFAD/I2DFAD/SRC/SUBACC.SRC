	LOGICAL FUNCTION SUBACC(NOFTRS,STRLEN)
C
***  	IDENT 14JL88
***	MODULE SUBACC
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England.
C Author: M. Dhillon, 25 May 1983.
C Modified to bring into line with DTEDIFF: CC Brunt, 8 November 1983
C
CMOD	Modernised to use LSLLIB and other recent developments
C						JMB 22-Mar-1988
CMOD	DRC 22-Jun-88  to skip any registration features in layer 0
C
CMOD	To round first and last point co-ordinates to nearest
C	integer before comparing them to see if feature is closed
C						JMB 14-July-1988
C
CMOD	To add difference between local and manuscript origins
C	to accuracy subregion coordinates before outputting them
C						JMB 14-July-1988
C
C
	IMPLICIT NONE
C
C Parameter file
C
***	PARAMETER/LSL$CMNDLMS:FORMAT/	! for angle formats
C
C Common blocks
C
***	COMMON /LSL$CMNDLMS:DFAD/
***	COMMON /HERE:PARAMS/
***	COMMON /HERE:I2DFADMSG.PAR/
***	COMMON /HERE:DESCR/
***	COMMON /LSL$CMNIFF:IFFHAN/
***	COMMON /LSL$CMNIFF:MHMCE/
***	COMMON /LSL$CMNLSL:TXTC/
C
C we are passed
C
	INTEGER*2	NOFTRS		! no. of features in overlay 0
	INTEGER*2	STRLEN		! length of field per
					! sub-region in chars
C
C Functions called
C
	LOGICAL 	GETSAC		! get sub-region accuracy
C
C Workspace
C
	INTEGER		I		! do loop counter
	INTEGER*2	THINT		! TH entry value
	LOGICAL		HADNF1		! had NF 1
	LOGICAL		HADEF		! had EF entry
	LOGICAL		HADAC		! had AC entry
	LOGICAL		HADST		! had ST entry
	INTEGER*2	ACTYPE		! AC type of feature
	INTEGER*2	NPTS		! no. of points in ST entry
	INTEGER*2	IENDS		! IFF end of ST parameter
	LOGICAL		FTRONE		! true if in feature one
	LOGICAL		FTRCLO		! true if feature closed
	LOGICAL		BKEFNF		! true if back to EF from NF
	LOGICAL		BKEFEO		! true if back to EF from EO
	INTEGER*2	IECODE		! feature code of entry in hand
	INTEGER*2	IELEN		! length of entry in hand
	INTEGER*2	LSTFAC		! last feature analysis code
	INTEGER*2	FSTATE		! FS entry parameter
	INTEGER*2	ABSHSF		! absoloute horizontal accuracy
	INTEGER*2	RELHSF		! relative horizontal accuracy
	LOGICAL		HADEO		! true if had EO
	INTEGER*4	TEMP		! temporary
	INTEGER*4	SAVED_LPOSH 	! saved entry in hand position
C
C Code starts here
C Assume disaster is imminent
C
	SUBACC = .TRUE.
C
C There are no features as yet
C
	NOFTRS = 0
	LSTFAC = 0
C
C Work out the total length of the accuracy subregion data...
C this is the length of the accuracy fields + blank fills, plus the
C field for how many points, followed by 14 coordinate pairs (not all
C necessarily full)
C
	STRLEN = 8+8+2 + 14*( 9+10 )
C
C At this point we have just entered layer 0 within the IFF file, the
C first accuracy sub-region feature is the next entry in the file.
C
5	CALL IFFNXT(IECODE,IELEN)
	IF (IELEN .EQ. -1) THEN
	   CALL LSL_PUTMSG(I2D__UNEXPEOF)
	   GOTO 1000
	END IF
	IF (IELEN .LT. 0) THEN
	   CALL LSL_PUTMSG(I2D__UNRDIFF,LPOSH)
	   GOTO 1000
	END IF
C
C It is not necessary to have any features at all in layer 0, if this
C is the case the next entry will be an EO entry.
C
	IF (IECODE .EQ. 'EO') THEN
	   HADEF = .TRUE.
	   GOTO 900
	END IF
	IF (IECODE .EQ. 'VO') GOTO 5
	IF (IECODE .NE. 'NF') THEN
	   CALL WRITEF('Unexpected entry %C at %^L%O, where first 
     & 			feature of layer 0 expected', IECODE,LPOSH)
	   GOTO 1000
	END IF
	GOTO 100		! proceed if all is well
C
C and onto the other entries in layer 0
C
10	CALL IFFNXT(IECODE,IELEN)
	IF (IELEN .EQ. -1) THEN
	   CALL LSL_PUTMSG(I2D__UNEXPEOF)
	   GOTO 1000
	END IF
	IF (IELEN .LT. 0) THEN
	   CALL LSL_PUTMSG(I2D__UNRDIFF,LPOSH)
	   GOTO 1000
	END IF
C
C ....and take appropriate action
C
	IF (IECODE .EQ. 'NF') GOTO 100
	IF (IECODE .EQ. 'AC') GOTO 300
	IF (IECODE .EQ. 'ST') GOTO 700
	IF (IECODE .EQ. 'EF') GOTO 800
	IF (IECODE .EQ. 'EO') GOTO 900
C
C Unknown code
C
	GOTO 10
C	
C NF - New feature entry
C
C	Look ahead to see if its a registration mark
100	SAVED_LPOSH=LPOSH
	CALL IFFNXC('FS',IELEN)
C
	IF(IELEN.EQ.-1)THEN
	  CALL LSL_PUTMSG(I2D__UNEXPEOF)
	  GOTO 1000
	ENDIF
	IF(IELEN.LT.0)THEN
	  CALL LSL_PUTMSG(I2D__UNRDIFF,LPOSH)
          GOTO 1000
	ENDIF
C
	CALL EIHRI(FSTATE,1,1)
C Skip any registration marks (feature code 300)
C
	IF(FSTATE.EQ.300)THEN
	  CALL IFFNXC('EF',IELEN)
C
	  IF(IELEN.EQ.-1)THEN
	    CALL LSL_PUTMSG(I2D__UNEXPEOF)
	    GOTO 1000
	  ENDIF
	  IF(IELEN.LT.0)THEN
	    CALL LSL_PUTMSG(I2D__UNRDIFF,LPOSH)
            GOTO 1000
	  ENDIF
	  HADEF=.TRUE.
	  GOTO 10
	ENDIF
C
C	Set back pointer
	CALL IFFPKE(IECODE,IELEN,SAVED_LPOSH)
C
	NOFTRS = NOFTRS + 1
C
	IF(NOFTRS.GT.9) THEN
	  CALL WRITEF('ACC - More than 9 sub-region acc features')
	ENDIF
C
120	CALL EIHRI(FAC,1,1)
	HADEF = .FALSE.
	HADAC = .FALSE.			! no AC yet
	HADST = .FALSE.			! no ST yet
	STLEN = 0
	FTRCLO = .FALSE.
	GOTO 10
C
C AC - Ancilliary code entry
C
300	CALL EIHRI(ACTYPE,1,1)
	IF (ACTYPE .NE. FADACC) THEN
	   CALL WRITEF('ACC - Error in AC type of FSN = %N', FAC)
	   CALL WRITEF('%^W%N found where %N expected - ignored',
     &						 ACTYPE, FADACC)
	END IF
C
	CALL EIHR(TXTBUF,IELEN-3,4)
C
C set up txtptr
	TXTPTR = (IELEN-3)*2
	IF (TXTBUF(TXTPTR).EQ.0) TXTPTR = TXTPTR - 1
	HADAC = .TRUE.
	GOTO 10
C
C ST - Co-ordinate STring entry (there may be more than one per ftr)
C First obtain the no. of points in the entry
700	HADST = .TRUE.
	CALL EIHRS(NPTS,IENDS)
	IF ((STLEN+NPTS) .GT. 15) THEN
	   CALL WRITEF('ACC region %N, too many points %N',
     &						FAC, STLEN+NPTS)
	   GOTO 1000
	ENDIF
C ...and now get the actual co-ords into STBUF
	CALL EIHRR(STBUF(1,STLEN+1),NPTS*2,1)
	STLEN = STLEN + NPTS
	GOTO 10
C
C EF - End of feature entry
C
800	HADEF = .TRUE.
	IF (HADAC) THEN
C Ensure the we do not allow RDCOMM to try to process any nulls
	   DO 810 I = 1,TXTPTR
	      IF (TXTBUF(I) .EQ. 0) THEN
	         TXTPTR=I-1
	         GOTO 820
	      ENDIF
810	   CONTINUE
820	   IF (GETSAC(ABSHSF,RELHSF)) THEN
	      CALL WRITEF(
     &  'ACC - Error in AC of sub-region feature, values are')
	      CALL WRITEF(
     & 'absh %^W%N, relh %N',ABSHSF,RELHSF)
	   ENDIF
	ELSE
	   CALL WRITEF(
     &	'ACC - no AC in sub-region feature FSN = %N',FAC)
	   CALL WRITEF('Sub-region accuracies set to zero')
	   ABSHSF = 0
	   RELHSF = 0
	ENDIF
	CALL EXPAND('%W%P0%^W%I4    %I4    ', BYTBUF(BYTCNT),
     &		 	ABSHSF, RELHSF)
	BYTCNT = BYTCNT + 16
C
	IF (.NOT.HADST) THEN
	   CALL WRITEF(
     &	'ACC - no ST entry in sub-region feature %N,FAC')
	   CALL WRITEF('All coordinates left blank')
	   GOTO 850
	ENDIF
C
C Check to see if the last point is the same as the first, ie: it is
C only there to close the feature and must not be written out to the 
C magtape
C
	IF (NINT(STBUF(1,STLEN)) .EQ. NINT(STBUF(1,1)) .AND.
     &	   NINT(STBUF(2,STLEN)) .EQ. NINT(STBUF(2,1))) THEN
	   FTRCLO = .TRUE.
	   STLEN = STLEN - 1
	END IF
850	CALL EXPAND('%W%P0%I2', BYTBUF(BYTCNT), STLEN)
	BYTCNT = BYTCNT + 2
C Now the co-ordinates must be output in the form:
C 		DDMMSS.SH		Latitude
C		DDDMMSS.SH		Longitude
C The convention used was that X corresponds to longitude, and Y to
C latitude.
C The IFF co-ordinates are in tenths of a second, therefore they must
C be converted to degrees, minutes, and seconds before output
C The coordinates must also have the difference between the local
C and manuscript origins added to them before being output
C Start with latitude.
	DO 860 I=1,STLEN 
C First the latitude
	   TEMP = IFIX(STBUF(2,I) + LAT_ORIGIN_DIFF) + MHLAMO
	   CALL ADDANG( BYTBUF(BYTCNT), TEMP, DD, TENTH, HEMI )
	   BYTCNT = BYTCNT + 9
C and now the longitude
	   TEMP = IFIX(STBUF(1,I) + LON_ORIGIN_DIFF) + MHLOMO
	   CALL ADDANG( BYTBUF(BYTCNT), TEMP, DDD, TENTH, HEMI )
	   BYTCNT = BYTCNT + 10
860	CONTINUE
C
C The DFAD format expects upto 14 co-ordinate pairs, therefore it is 
C important to blank fill the remaining co-ordinates. If the feature
C was closed be careful to add an extra co-ordinate pair.
C
	BYTCNT = BYTCNT + (14-STLEN)*19
	IF (BKEFNF) THEN
	   BKEFNF = .FALSE.
	   GOTO 120
	ELSE IF (BKEFEO) THEN
	   BKEFEO = .FALSE.
	   GOTO 950
	END IF
	GOTO 10
C
C EO - End of overlay entry
C
900	HADEO = .TRUE.
	IF (NOFTRS.EQ.0)GOTO 950
	IF (.NOT.HADEF) THEN
	   CALL WRITEF('Missing EF entry at %^L%O', LPOSH)
	   BKEFEO = .TRUE.
	   GOTO 800
	END IF
C
C .....and finish here
C
950	IF (.NOT.(HADEO)) THEN
	   CALL WRITEF('Missing EO entry at end of layer 0')
	   GOTO 900
	END IF
	SUBACC = .FALSE.
1000	RETURN
	END
