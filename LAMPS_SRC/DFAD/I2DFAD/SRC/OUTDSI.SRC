C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-08-14 11:46:04.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION OUTDSI
C
***	IDENT 29JL93
***	MODULE OUTDSI
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England.
C Written: 1984
C
CMOD	Modernised to use LSLLIB and other recent developments
C						JMB 22-Mar-1988
C
CMOD	Nulls forced to spaces, 
C	and spaces within numbers forced to zero    FJB	07-Oct-1988
CMOD	Handle DFADB product type.		    JMC	30-Jul-1993
C	 
C
C This function writes a Data Set Identification(DSI) record to 
C magtape. It returns false if succesful.
C
	IMPLICIT NONE
C
C Parameter file
C
***	PARAMETER/LSL$CMNDLMS:FORMAT/	! for angle formats
C
***	COMMON /HERE:AUXIL/
***	COMMON /LSL$CMNDLMS:DFAD/           
***	COMMON /HERE:PARAMS/
***	COMMON /HERE:STATE/
***	COMMON /LSL$CMNIFF:MHMCE/
***	COMMON /LSL$CMNIFF:IFFHAN/
C
	INTEGER*2	N	! loop counter
	BYTE		DFAD1C_ED1 ! number representing DFAD level 1C edition 1
	PARAMETER	(DFAD1C_ED1 = 5)
	BYTE		DFAD1C_ED2 ! number representing DFAD level 1C edition 2
	PARAMETER	(DFAD1C_ED2 = 4)
C
C Code starts here
C Assume disaster is imminent.
C
	OUTDSI = .TRUE.
C
C Reset pointer into BYTBUF
C
	BYTCNT = 1
C
C The easiest thing to do is to use violib output
C Start by putting empty spaces in first.
C
	CALL VIOCLR(BYTBUF,648,32)
C 
C The first three characters will be the DSI sentinel.
C
	CALL EXPAND('%WDSI', BYTBUF(BYTCNT))
	BYTCNT = BYTCNT + 3
C
C Next the Security Classification code, followed by two characters
C which correspond to the Security Control and Release markings, and
C are reserved DoD use only, we shall leave these blank.
C
	CALL EXPAND('%W%A1', BYTBUF(BYTCNT),MHSECD)
	BYTCNT = BYTCNT + 3
C
C .....and so to the Security handling description
C
	CALL EXPAND('%W%A27', BYTBUF(BYTCNT),MHSHD)
	BYTCNT = BYTCNT + 27
C
C .....and 26 blanks ie: reserved for future use.
C
	BYTCNT = BYTCNT + 26
C
C Next the DMA series Designator for product type
C - first the text part of it from the TASK name
C
	CALL EXPAND('%W%A4', BYTBUF(BYTCNT),MHTASK)
	BYTCNT = BYTCNT + 4
C
C - and then the digit part from the LEVEL number
C
C If the digit part has the number which represents level 1C
C then this number must be output as 'B'
        
	IF (MHLEV.EQ.DFAD1C_ED2) THEN
	  MHLEV = 'B'
	  CALL EXPAND('%W%A1',BYTBUF(BYTCNT),MHLEV)
	ELSE IF (MHLEV.EQ.DFAD1C_ED1) THEN
	  MHLEV = 'C'
	  CALL EXPAND('%W%A1',BYTBUF(BYTCNT),MHLEV)
	ELSE
	  CALL EXPAND('%W%^B%I1',BYTBUF(BYTCNT),MHLEV)
	ENDIF
	BYTCNT = BYTCNT+1
C
C ....and the unique manuscript number
C
	CALL EXPAND('%W%A15', BYTBUF(BYTCNT),MHREFN)
	BYTCNT = BYTCNT + 15
C
C ....the next 8 characters are reserved for future use ie: blanks
C
	BYTCNT = BYTCNT + 8
C
C ....and the data edition number
C
	CALL EXPAND('%W%P0%^B%I2', BYTBUF(BYTCNT),MHEDN)
	BYTCNT = BYTCNT + 2
C
C ....and the match/merge version
C
	CALL EXPAND('%W%A1', BYTBUF(BYTCNT),MHMMV)
	BYTCNT = BYTCNT + 1
C
C ....and then the maintenance date, this must be output in the format
C YYMM. Since it is present in the map header in terms of binary days
C since whenever, a routine must be called to convert from binary days 
C to a calender date and then to write it to BYTBUF.
C
	CALL ADDDAT(BYTBUF(BYTCNT),MHMDTE,YYMM,.FALSE.)
	BYTCNT = BYTCNT + 4
C
C ....and similarilly for the match/merge date
C
	CALL ADDDAT(BYTBUF(BYTCNT),MHMMD,YYMM,.FALSE.)
	BYTCNT = BYTCNT + 4
C
C ....and on to the maintenance description code
C
	CALL EXPAND('%W%A4', BYTBUF(BYTCNT),MHMCDE)
	BYTCNT = BYTCNT + 4
C
C ....and the producer codes
C
	CALL EXPAND('%W%A8', BYTBUF(BYTCNT),MHPCDE)
	BYTCNT = BYTCNT + 8
C
C The next 16 spaces are reserved for future use ie:blanks
C
	BYTCNT = BYTCNT + 16
C
C ...and on to the product specification  stock number
C
	CALL EXPAND('%W%A9', BYTBUF(BYTCNT),MHPSSN)
	BYTCNT = BYTCNT + 9
C
C ...and the product spec change number 
C
	CALL EXPAND('%W%P0%^B%I2', BYTBUF(BYTCNT),MHPSCN)
	BYTCNT = BYTCNT + 2
C
C ...and the product specification date
C
	CALL ADDDAT(BYTBUF(BYTCNT),MHPSDT,YYMM,.FALSE.)
	BYTCNT = BYTCNT + 4
C
C ....and the vertical Datum (Mean Sea Level)
C
	CALL EXPAND('%W%A3', BYTBUF(BYTCNT),MHVDTM)
	BYTCNT = BYTCNT + 3
C
C ...and the horizontal datum code
C
	CALL EXPAND('%W%A5', BYTBUF(BYTCNT),MHHDTM)
	BYTCNT = BYTCNT + 5
C
C ...and the digitising collection system
C
	CALL EXPAND('%W%A10', BYTBUF(BYTCNT),MHDSYS)
	BYTCNT = BYTCNT + 10
C
C ...and the compilation date
C
	CALL ADDDAT(BYTBUF(BYTCNT),MHCDTE,YYMM,.FALSE.)
	BYTCNT = BYTCNT + 4
C
C This is reserved for 22 chars reserved for future use ie:blanks
C
	BYTCNT = BYTCNT + 22
C
C The latitudes and longitudes of co-ordinates are represented in the 
C map header in terms of integer tenths of a second. The DFAD format 
C requires them to be in degrees, minutes, and seconds.
C Therefore it is necessary to make this conversion before
C output. So now we call a routine to do all those
C things for the latitude of the manuscript origin.
C
	CALL ADDANG(BYTBUF(BYTCNT),MHLAMO,DD,TENTH,HEMI)
	BYTCNT = BYTCNT + 9
C
C ...and similarilly for the longitude of the manuscript origin
C
	CALL ADDANG(BYTBUF(BYTCNT),MHLOMO,DDD,TENTH,HEMI)
	BYTCNT = BYTCNT + 10
C
C ...and the same for the latitude of the SW corner of feature 1
C
	CALL ADDANG(BYTBUF(BYTCNT),MHLASW,DD,TENTH,HEMI)
	BYTCNT = BYTCNT + 9
C
C ...and of course the longitude of the SW corner of feature 1
C
	CALL ADDANG(BYTBUF(BYTCNT),MHLOSW,DDD,TENTH,HEMI)
	BYTCNT = BYTCNT + 10
C
C ...and the same for the latitude of the NE corner of feature 1
C
	CALL ADDANG(BYTBUF(BYTCNT),MHLANE,DD,TENTH,HEMI)
	BYTCNT = BYTCNT + 9
C
C ...and of course the longitude of the NE corner of feature 1
C
	CALL ADDANG(BYTBUF(BYTCNT),MHLONE,DDD,TENTH,HEMI)
	BYTCNT = BYTCNT + 10
C
C Note the co-ordinates of the other corners, the extent etc. can be
C calculated from the above info, but don't bother just yet.
C
C The next 100 chars are reserved for DMA use only, so leave blank 
C
	BYTCNT = BYTCNT + 100
C
C The next 100 chars are reserved for the producing nation use only, so
C leave blank
C
	BYTCNT = BYTCNT + 100
C
C Finally the last 206 chars are reserved for future use ie:blank
C
	BYTCNT = BYTCNT + 206
C
C Now check to see if the whole record has been written out
C
	IF (BYTCNT .NE. 649) THEN
	   CALL WRITEF('Incorrect length, %N of DSI block', BYTCNT)
	   GOTO 1000
	END IF
C
C Force nulls to be spaces
C
	DO 2000,N=1,648
	   IF(BYTBUF(N) .EQ. 0) CALL EXPAND('%W%S',BYTBUF(N),' ')
2000	CONTINUE
C
C Force spaces to be zeros
C
        DO 2010,N=88,102,1
	   IF(BYTBUF(N) .EQ. 32) CALL EXPAND('%W%S',BYTBUF(N),'0')
2010	CONTINUE
C
C Force spaces to be zeros
C
        DO 2020,N=136,141,1
	   IF(BYTBUF(N) .EQ. 32) CALL EXPAND('%W%S',BYTBUF(N),'0')
2020	CONTINUE
C
C Force spaces to be zeros
C
        DO 2030,N=160,163,1
	   IF(BYTBUF(N) .EQ. 32) CALL EXPAND('%W%S',BYTBUF(N),'0')
2030	CONTINUE
C
C Force spaces within geographicals to be zeros
C
        DO 2040,N=186,242,1
	   IF(BYTBUF(N) .EQ. 32) CALL EXPAND('%W%S',BYTBUF(N),'0')
2040	CONTINUE
C
C Now write this record to magtape
C
	BLKTYP = DSIHED
	CALL WRTMAG
C
C ... and finish safely here
C
	OUTDSI = .FALSE.
1000	RETURN
	END
