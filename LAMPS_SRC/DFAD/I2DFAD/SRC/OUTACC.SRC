C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1995-09-27 10:51:48.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION OUTACC(GOTOVL)
C
***	IDENT 27SE95
***	MODULE	OUTACC
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England.
C Author: M. Dhillon, 25 May 1983.
C
CMOD	Modernised to use LSLLIB and other recent developments
C						JMB 22-Mar-1988
C
CMOD	Force nulls to spaces, and spaces within geographicals to zeros.
C						FJB 07-Oct-1988
C
C
C This function writes an Accuracy Description Record (ACC) to 
C magtape. It returns false if succesful.
C 
	IMPLICIT NONE
C
***	COMMON /LSL$CMNDLMS:DFAD/
***	COMMON /HERE:PARAMS/
***	COMMON /HERE:STATE/
***	COMMON /LSL$CMNIFF:MHMCE/
***	COMMON /LSL$CMNIFF:IFFHAN/
C
C Functions called
C
	LOGICAL 	SUBACC		! deals with sub-regions
C
C passed
C
	LOGICAL		GOTOVL		! true if overlay zero present
C
C Workspace
C
	INTEGER*4	NUMPTR		! saved text pointer
	INTEGER*2	SUBREG		! no. of acc sub-region	
	INTEGER*2	FTRLEN		! length of feature in chars
	INTEGER*2	J,K,N		! loop counters
	INTEGER*2	N1		! counter
	INTEGER*2	N2		! counter
	INTEGER*4	NUMCOO		! coordinate counter
C                
C
C Code starts here
C Assume disaster is imminent
C
	OUTACC = .TRUE.
C
C Reset pointer into BYTBUF
C
	BYTCNT = 1
C
C The easiest thing to do is to use violib output
C Start by putting empty spaces 
C
	CALL VIOCLR(BYTBUF,2700,32)
C
C The first three characters will be the 'ACC' sentinel
C
	CALL EXPAND('%WACC',BYTBUF(BYTCNT))
	BYTCNT = BYTCNT + 3
C
C Next the absolute horizontal accuracy of the product in metres ,
C followed by four blanks, followed by the relative horizontal accuracy
C of the product in metres, followed by another four blanks, followed 
C by the vertical heighting accuracy.
C
	IF (MHAHAC.EQ.-1) THEN
	   CALL APPEND('%W%P0%S%(4 %)', BYTBUF(BYTCNT),'NA  ')
	ELSE
	   CALL APPEND('%W%P0%I4%(4 %)', BYTBUF(BYTCNT),MHAHAC)
	ENDIF
	BYTCNT = BYTCNT + 8
C
	IF (MHRHAC.EQ.-1) THEN
	   CALL APPEND('%W%P0%S%(4 %)', BYTBUF(BYTCNT),'NA  ')
	ELSE
	   CALL APPEND('%W%P0%I4%(4 %)', BYTBUF(BYTCNT),MHRHAC)
	ENDIF
	BYTCNT = BYTCNT + 8
C
	IF (MHVHAC.EQ.-1) THEN
	   CALL APPEND('%W%P0%S', BYTBUF(BYTCNT),'NA  ')
	ELSE
	   CALL APPEND('%W%P0%I4', BYTBUF(BYTCNT),MHVHAC)
	ENDIF
	BYTCNT = BYTCNT + 4
C
C This is followed by 32 spaces (reserved for later use)
C
	BYTCNT = BYTCNT + 32
C
C This is followed by the Multiple Accuracy Outline flag. This value is
C not yet available so we shall have to save the pointer and come back
C to it later.
C
	NUMPTR = BYTCNT
	BYTCNT = BYTCNT + 2
C
C Check to see if overlay zero is present and needs processing, if not
C get values for FTRLEN and SUBREG so as to fill up the ACC block with
C blanks.
C
	IF (.NOT. GOTOVL) THEN
	   SUBREG = 0
	   FTRLEN = 8+8+2 + 14*(9+10)
C
C Now it is time to call SUBACC to output the sub region accuracy info
C from the features in layer 0 of the IFF file.
C
	ELSEIF (SUBACC(SUBREG,FTRLEN)) THEN
	   CALL WRITEF('ACC - Error in sub region accuracies')
	   GOTO 1000
	END IF
C
C The DFAD format expects upto 9 features per accuracy block, therefore
C it is necessary to blank fill for the missing features.
C
	BYTCNT = BYTCNT + (9-SUBREG)*FTRLEN
C
C Now wind up by going back to BYTBUF and putting in the value for the
C Multiple Accuracy Outline flag.
C
	CALL EXPAND('%W%P0%^W%I2', BYTBUF(NUMPTR),SUBREG)
C
C ....and finish by writing 87 blanks to the block, and check that the
C the block has been written.
C
	BYTCNT = BYTCNT + 87
	IF (BYTCNT .NE. 2701) THEN
	   CALL WRITEF('ACC - Incorrect length of ACC block')
	   GOTO 1000
	END IF
C 
C Force nulls to be spaces
C
	DO 2000,N=1,2700
	   IF(BYTBUF(N) .EQ. 0) CALL EXPAND('%W%S',BYTBUF(N),' ')
2000	CONTINUE
C
C Loop to look at each accuracy sub-region  (upto 9 allowed)
C
	DO 2020, J=74,2346,284
C
C Calculate extent of geographical coordinates by extracting number of
C coordinates from buffer and multiplying by 19.
C
	   N1 = BYTBUF(J)
	   N2 = BYTBUF(J+1)
       	   NUMCOO = 19*(10*(N1-48) + (N2-48))
	   IF(NUMCOO .LT. 19) GOTO 2020
C
C Force spaces within geographicals to be zeros
C
           DO 2010,K=J,J+1+NUMCOO,1
	      IF(BYTBUF(K) .EQ. 32) CALL EXPAND('%W%S',BYTBUF(K),'0')
2010	   CONTINUE
C
2020	CONTINUE
C
C Now write this record to magtape
C
	BLKTYP = ACCHED
	CALL WRTMAG
C
C Now we have succesfully finished.
C
	OUTACC = .FALSE.
1000	RETURN
	END
