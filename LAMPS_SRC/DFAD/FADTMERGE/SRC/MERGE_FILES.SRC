C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-02-03 16:20:58.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION MERGE_FILES ()
C
***	MODULE MERGE_FILES
***	IDENT 06JA88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing		6 Jan 1988
C
C Function to deal with actually reading each feature and attempting
C to match it to an FADT record, creating and outputing a new feature
C to the output IFF file.
C Returns .TRUE. if completes successfully.
C
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$FADTMERGE:FADTMERGE.CMN'
	INCLUDE 'LSL$FADTCMN:FADT.CMN'
C
C
C Functions
	LOGICAL	FIND_NF		! find (copy as far) as next NF
	LOGICAL	READ_FADT	! read specified fadt record
	LOGICAL	SKIP_TO_EF	! skip (no copy) to next EF
	LOGICAL	COPY_START_NF	! copy to FS entry
	LOGICAL	CONSTRUCT_AC	! construct AC7 with FADT after FS
	LOGICAL	MARK_FADT	! mark current FADT as used
	LOGICAL FIND_MH		! find map header
	LOGICAL UPDATE_MH	! update MH from FADT file
	LOGICAL CONSTRUCT_ACCREG ! construct layer 0 with ACCREGs
	LOGICAL FIND_LAYER_ONE	! move to layer after layer 0,
				! copying layer 0 on the way
	LOGICAL	COPY_TO_END	! copy rest of input iff file
C
C Assume success
C
	MERGE_FILES = .TRUE.
C
C Alter fields of map header for which data is present in FADT file
C
	IF (HEADER) THEN
C
C Read/Copy IFF file as far as MH, map header, entry
C
	   IF (.NOT.FIND_MH()) GOTO 950
	   IF (.NOT.UPDATE_MH()) GOTO 950
	ENDIF
C
C Copy as far as layer 1, constructing layer 0 with accuracy region
C data in it if required, or copy any existing layer zero otherwise.
C
	IF (ACCURACY) THEN
	   IF (.NOT.CONSTRUCT_ACCREG()) GOTO 950
	ELSE
	   IF (.NOT.FIND_LAYER_ONE()) GOTO 950
	ENDIF
C
C If not to perform iff/fadt feature merge, then copy as far as end
C of iff file (EJ) and exit
C
	IF (.NOT.MERGE) THEN
	   IF (.NOT.COPY_TO_END()) GOTO 950
	   GOTO 999
	ENDIF
C
C Read/Copy IFF file as far as entry before next NF
C
10	IF (.NOT.FIND_NF()) GOTO 900	! .FALSE. if not there i.e. EOF
C
C Read FADT with FAC = FSN
C
	IF (.NOT.READ_FADT(FADT,FSN,FADTLUN)) THEN
C
C Move past/reject and report feature if no matching FADT record
C
	   CALL REPORT_FEATURE()
	   IF (.NOT.SKIP_TO_EF()) GOTO 950	! Error
C
	ELSE
C
C Copy up to FS entry in current feature if has matching FADT record
C
	   IF (.NOT.COPY_START_NF()) GOTO 950
C
C Construct AC in output feature from input FADT record
C
	   IF (.NOT.CONSTRUCT_AC()) GOTO 950
C
C Mark FADT record as read
C
	   IF (.NOT.MARK_FADT()) GOTO 950
	ENDIF
C
	GOTO 10
C
C Have reached EOF, so report on any unmatched FADT records
C
900	CALL REPORT_FADT()
	GOTO 999
C
C Deal with errors
C
950	MERGE_FILES = .FALSE.
C
C Exit
C
999	RETURN
	END	
