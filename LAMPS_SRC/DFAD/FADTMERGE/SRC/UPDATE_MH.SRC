C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-09-26 16:48:48.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION UPDATE_MH()
C
***	MODULE UPDATE_MH
***	IDENT 26SE89
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England.
C Author: J.M. Billing			28 Jan 1988
C
CMOD	Minor mods to write 'DFAD' into task field instead of type field
C	and blank out trailing bytes in reference field		26 Sep 1989
C
C Function to copy MCE map header data from relevant Header, DSI and
C ACC records in indexed FADT file to current output IFF file.
C Returns .TRUE. if succeeds.
C
	IMPLICIT NONE
C
C common blocks
	INCLUDE 'LSL$FADTMERGE:FADTMERGE.CMN'
	INCLUDE 'LSL$FADTCMN:DSI.CMN'
	INCLUDE 'LSL$FADTCMN:ACC.CMN'
	INCLUDE 'LSL$FADTCMN:HEADER.CMN'
	INCLUDE 'LSL$CMNIFF:MHMCE.CMN'
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'
C
C w/s
	INTEGER*2	I	! count
	INTEGER		DATE	! to pass date for conversion
	INTEGER		DAY
	INTEGER		MONTH
	INTEGER		YEAR
C
C functions
	LOGICAL	READ_DSI	! read dsi records
	LOGICAL	READ_ACC	! read acc records
	LOGICAL	READ_HEADER	! read dlms fadt header page records
C
C Assume success
C
	UPDATE_MH = .TRUE.
C
C Report it to SYS$OUTPUT or list file as required
C
	CALL EXPAND('Updating IFF map header from FADT')
	CALL APPEND(' file records.')
C
	IF (HAD_LIST) THEN
C
C Select list output file
C
	   CALL FLWSEL(LISTLUN)
	   CALL FLWSTR
C
	ELSE
	   CALL TTWSTR
	ENDIF
C
C Now set up the values in the MCE map header
C
C First the descriptor
C
	MHDESC(1) = MHI4SZ		! size of MH in long words
	MHDESC(2) = 1			! customer (MCE)
	MHDESC(3) = 0
	MHDESC(4) = 0
C
C Constant data
C
	MHTASK(1) = ICHAR('D')		! Task entry
	MHTASK(2) = ICHAR('F')
	MHTASK(3) = ICHAR('A')
	MHTASK(4) = ICHAR('D')
C
	MHMANU = 1			! Manuscript type. 1=culture
C
	MHCOOR = 3			! Coord type = geog
C
C Attempt to read header record
C
	IF (.NOT.READ_HEADER()) THEN
C
C If none found, output details as required
C
	   CALL EXPAND('   No DLMS FADT header record found.')
C
	   IF (HAD_LIST) THEN
	      CALL FLWSEL(LISTLUN)
	      CALL FLWSTR
C
	   ELSE
	      CALL TTWSTR
	   ENDIF
	   GOTO 20
	ENDIF
C
C Data drawn from header
C
C WAC/WAG id
C
	CALL EXPAND('%^W%N4',HDR1.WAC_NUM)
	CALL APPEND('%^W%N2',HDR1.WAC_CELL)
	CALL APPEND('%^W%N2',HDR1.WAG_CELL)
	DO 10 I = 1,8
	   IF (EXPBUF(I).EQ.ICHAR(' ')) EXPBUF(I) = ICHAR('0') 
	   MHWAC(I) = EXPBUF(I)
10	CONTINUE
C
C Security
C
	MHSEC = HDR1.SEC
	MHREL = HDR1.REL
	MHSECD = ICHAR(HDR1.SEC_CODE(1:1))
C
C Coverage
C
	CALL LL2INT(HDRSW.LAT , MHLASW)
	CALL LL2INT(HDRSW.LONG, MHLOSW)
	CALL LL2INT(HDRNE.LAT , MHLANE)
	CALL LL2INT(HDRNE.LONG, MHLONE)
	CALL LL2INT(HDRMO.LAT , MHLAMO)
	CALL LL2INT(HDRMO.LONG, MHLOMO)
C
	MHLASE = MHLASW
	MHLOSE = MHLONE
	MHLANW = MHLANE
	MHLONW = MHLOSW
C
	MHLAEX = ABS(MHLASW - MHLANE)
	MHLOEX = ABS(MHLOSW - MHLONE)
C
C Digitising information - scale
C
	MHDGSC = HDR1.DIG_SCALE
C
C Specification - validation rules
C
	CALL SETAUX(%REF(HDR2.VAL_RULES),4)
	CALL RDLONG(MHVAL)
	CALL BSLN
C
C Attempt to read ACC record
C
20	IF (.NOT.READ_ACC()) THEN
C
C If none found, output details to list file if required
C
	   CALL EXPAND('   No FADT accuracy record found.')
C
	   IF (HAD_LIST) THEN
	      CALL FLWSEL(LISTLUN)
	      CALL FLWSTR
C
	   ELSE
	      CALL TTWSTR
	   ENDIF
	   GOTO 30
	ENDIF
C
C Data drawn from ACC record
C Note -1(NA) in FADT file becomes 0(unset) in IFF file
C Vertical accuracies unset
C
	MHAHAC = ACC.ABSOLUTE_HORIZ
	IF (MHAHAC.LT.0) MHAHAC = 0
C
	MHRHAC = ACC.RELATIVE_HORIZ
	IF (MHRHAC.LT.0) MHRHAC = 0
C
	MHVHAC = ACC.PREDOM_HEIGHT
	IF (MHVHAC.LT.0) MHVHAC = 0
C
	MHAVAC = 0
	MHRVAC = 0
C
C Attempt to read DSI record
C
30	IF (.NOT.READ_DSI()) THEN
C
C If none found, output details to list file if required
C
	   CALL EXPAND('   No FADT DSI record found.')
C
	   IF (HAD_LIST) THEN
	      CALL FLWSEL(LISTLUN)
	      CALL FLWSTR
C
	   ELSE
	      CALL TTWSTR
	   ENDIF
	   GOTO 110
	ENDIF
C
C Data drawn from DSI record
C
C Sheet identity
C
C Level of map
C
	MHLEV = ICHAR(DSI1.LEVEL) - ICHAR('0')
C
C Transfer the square identifier to the unique reference no.
C remembering to put spaces into trailing bytes, leaving space
C for level character
C
	DO 40 I = 1,7
	   MHREFN(I) = ICHAR(HDR2.SQUARE_ID(I:I))
40	CONTINUE
C
C Transfer the square identifier number to the unique reference no.
C
	MHREFN(8) = ICHAR(HDR1.SQUARE_ID_LEVEL(1:1))
C
C Pad out the remaining bytes with spaces
C
	DO 45 I = 9,15
	   MHREFN(I) = ICHAR(' ')
45	CONTINUE
C
C Match/Merge version
C
	MHMMV = ICHAR(DSI1.MATCHMERGE_VERSION)
C
C (Data) Edition number
C
	CALL SETAUX(%REF(DSI2.DATA_EDITION),2)
	CALL RDINT(I)
	MHEDN = I
	CALL BSLN
C
C Maintenance Date
C
	MHMDTE = 0
	CALL SETAUX(%REF(DSI2.MAINTENANCE_DATE),4)
	CALL RDLONG(DATE)
	IF (DATE.GT.0) THEN
	   DAY = 1
	   MONTH = MOD(DATE,100)
	   YEAR = 1900 + DATE/100
	   CALL DTOBIN(DAY,MONTH,YEAR,MHMDTE)
	ENDIF
	CALL BSLN
C
C Maintenance Code
C
	DO 50 I = 1,4
	   MHMCDE(I) = ICHAR(DSI2.MAINTENANCE_CODE(I:I))
50	CONTINUE
C
C Match/Merge Date
C
	MHMMD = 0
	CALL SETAUX(%REF(DSI2.MATCHMERGE_DATE),4)
	CALL RDLONG(DATE)
	IF (DATE.GT.0) THEN
	   DAY = 1
	   MONTH = MOD(DATE,100)
	   YEAR = 1900 + DATE/100
	   CALL DTOBIN(DAY,MONTH,YEAR,MHMMD)
	ENDIF
	CALL BSLN
C
C Compilation date
C
	MHCDTE = 0
	CALL SETAUX(%REF(DSI2.COMPILATION_DATE),4)
	CALL RDLONG(DATE)
	IF (DATE.GT.0) THEN
	   DAY = 1
	   MONTH = MOD(DATE,100)
	   YEAR = 1900 + DATE/100
	   CALL DTOBIN(DAY,MONTH,YEAR,MHCDTE)
	ENDIF
	CALL BSLN
C
C Product spec. ident./stock no.
C
	DO 60 I = 1,9
	   MHPSSN(I) = ICHAR(DSI3.PROD_ID(I:I))
60	CONTINUE
C
C Product spec. edition change no.
C
	CALL SETAUX(%REF(DSI3.PROD_ED),2)
	CALL RDINT(I)
	MHPSCN = I
	CALL BSLN
C
C Product spec. date
C
	MHPSDT = 0
	CALL SETAUX(%REF(DSI3.PROD_DATE),4)
	CALL RDLONG(DATE)
	IF (DATE.GT.0) THEN
	   DAY = 1
	   MONTH = MOD(DATE,100)
	   YEAR = 1900 + DATE/100
	   CALL DTOBIN(DAY,MONTH,YEAR,MHPSDT)
	ENDIF
	CALL BSLN
C
C Digitising system
C
	DO 70 I = 1,10
	   MHDSYS(I) = ICHAR(DSI4.DIG_SYS(I:I))
70	CONTINUE
C
C Country producer code
C
	DO 80 I = 1,8
	   MHPCDE(I) = ICHAR(DSI4.COUNTRY(I:I))
80	CONTINUE
C
C Datum
C
	DO 90 I = 1,5
	   MHHDTM(I) = ICHAR(DSI5.DATUM(I:I))
90	CONTINUE
C
C Security handling description - broken in two to fit in DSI records
C
	DO 100 I = 1,13
	   MHSHD(I)    = ICHAR(DSI5.SECURITY(I:I))
	   MHSHD(I+13) = ICHAR(DSI6.SECURITY(I:I))
100	CONTINUE
	   MHSHD(27)   = ICHAR(DSI6.SECURITY(14:14))
C
C Select output IFF file
C
110	CALL IFFSEL(OUTLUN)
C
C Now write new map header out to output iff file
C
	CALL IFFMH(MHARR, MHLEN)
C
C Output blank line to list/terminal
C
	CALL EXPAND
C
	IF (HAD_LIST) THEN
	   CALL FLWSEL(LISTLUN)
	   CALL FLWSTR
C
	ELSE
	   CALL TTWSTR
	ENDIF
C
C Exit
C
	RETURN
	END
