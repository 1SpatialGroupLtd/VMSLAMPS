C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-03-30 13:39:14.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE EOPTR
C
***	IDENT	30MR88
***	MODULE	EOPTR
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 16 March 1983
C
C This routine outputs an EO entry, then goes back to the relevant NO
C and adds a pointer to the EO to it, and finally returns to where it
C started from
C
C common blocks
C
***     PARAMETER/HERE:DFAD2IMSG/
***	COMMON/HERE:STATE/	! for LPOSNO
***	COMMON/HERE:PARAMS/	! for DIAG
***	COMMON/LSL$CMNIFF:IFFHAN/	! for LPOSH
C
C workspace...
C
	INTEGER*2	IELEN, IECODE
	INTEGER*4	EOPOSN		! where the EO is
C
C Remember - LPOSE is the next position to be written at (ie the
C last word written + 1)
C
C firstly we reposition to the NO entry matching our soon-to-be EO
C
	CALL IFFPKE( IECODE, IELEN, LPOSNO )
	IF ( IECODE.NE.'NO'.OR.IELEN.EQ.-1) THEN
	   CALL LSL_PUTMSG(DFAD2I__NOLPOSERR, LPOSNO) !error repositioning
	   IF (IELEN.NE.-1) THEN                      !to NO at LPOSNO
	      CALL LSL_PUTMSG(DFAD2I__NOENTERR, IECODE)  !found IECODE entry
	   ELSE
	      CALL LSL_PUTMSG(DFAD2I__UNEXPEOF)   !unexpected end of IFF file
	   ENDIF
	   CALL LSL_PUTMSG(DFAD2I__RECOVER)       !attempting to recover 
	ELSE                                      !& continue
C
C	 otherwise, we have the entry safely in hand - add pointer
C	 to where we shall write the EO entry
C
	   CALL EIHWL( LPOSE, 1, 3 )	! write into the NO entry
C
	ENDIF
C
C we can now safely write the EO entry, which will get written at
C LPOSE quite naturally
C
	CALL IFFEO
C
	RETURN
	END
