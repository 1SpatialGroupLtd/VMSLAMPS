C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-05-18 16:29:52.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE POINT
C
***	IDENT	18MY88
***	MODULE	POINT
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs,  4 March 1983
C
C This routine reads in the next word of a feature, and interprets it
C as a coordinate, which it shoves into STBUF
C
	IMPLICIT NONE
C
C common
C
***     PARAMETER/HERE:DFAD2IMSG/
***	COMMON/HERE:SCRIPT/		! for TOTPTS
***	COMMON/HERE:DESCR/		! feature description (STBUF)
***	COMMON/HERE:STATE/		! for FTRONE
***	COMMON/HERE:PARAMS/		! for DIAG_FULL
***	COMMON/LSL$CMNDLMS:DFAD/	! for 1/2 words
C
C functions
C
	INTEGER*4	LIB$EXTZV	! extract zero extended field
C
C we are going to read the next point - incerement STPTR
C
	STPTR  = STPTR +1		! got another coordinate
C
C we have X as longitude, ie bits 19-36 (Univac counting), and
C Y as latitude - bits 1-18 (Univac counting). Thus we have X
C as the low 1/2 word, Y as the high 1/2 word.
C
C The offsets are sign and magnitude, and a negative value means that
C this point is where the feature goes off the map. However,
C conventionally only the Y value will be set negative. If the X value
C is set, we shall ignore it as an edge marker, and complain to the
C user. However, if the Y value is set, count it, note this feature
C goes external, and carry on.
C
	IF ( DFABUF(DFAPTR).GT.'1FFFF'X )THEN
	   DFABUF(DFAPTR) = DFABUF(DFAPTR).AND.'1FFFF'X
	   CALL LSL_PUTMSG(
     &		DFAD2I__LONGNEGTIV, STPTR, FAC) !longitude STPTR in FAC -ve
  	   CALL LSL_PUTMSG(DFAD2I__NOTEXTERN) !not counted as going external 
	ENDIF
C
	IF ( DFABUF(DFAPTR+1).GT.'1FFFF'X )THEN
	   DFABUF(DFAPTR+1) = DFABUF(DFAPTR+1).AND.'1FFFF'X
	   EXTERN = .TRUE.			! feature goes external
	   EXTPTS = EXTPTS+1			! another such point
	ENDIF
C
	STBUF( 1,STPTR ) = DFABUF( DFAPTR )
	STBUF( 2,STPTR ) = DFABUF( DFAPTR+1 )
C
C We obtain our RAnge values from the first feature in the map,
C or from the DSI block.
C It seems a sensible precaution to check all subsequent points against
C that range, and complain if they are outside it
C Note that DONHDR is set true after we have output the RAnge, etc,
C ie this will not be triggered for feature 1 in a change 2 tape
C
	IF (DONHDR) THEN
	   IF ( STBUF(1,STPTR).LT.RANGE(1) ) THEN
	      CALL LSL_PUTMSG(                   !long STPTR in feature 
     &		DFAD2I__LONGSMALL, STPTR, FAC)        ! FAC too small
	   ELSEIF ( STBUF(1,STPTR).GT.RANGE(2) ) THEN
	      CALL LSL_PUTMSG(                   !long STPTR in feature 
     &		DFAD2I__LONGLARGE, STPTR, FAC)        ! FAC too large
	   ENDIF
C
	   IF ( STBUF(2,STPTR).LT.RANGE(3) ) THEN
	      CALL LSL_PUTMSG(                   !lat STPTR in feature 
     &		DFAD2I__LATSMALL, STPTR, FAC)         ! FAC too small
	   ELSEIF ( STBUF(2,STPTR).GT.RANGE(4) ) THEN
	      CALL LSL_PUTMSG(                   !lat STPTR in feature 
     &		DFAD2I__LATLARGE, STPTR, FAC)         ! FAC too large
	   ENDIF
	ENDIF
C
C and we have now read that word - increment the buffer pointer
C
	DFAPTR = DFAPTR+2		! so ready for next point
C
C do we want to write those out for the user?
C
C	IF ( DIAG_FULL ) THEN	! bit set
C	   CALL WRITEF('point %I4 is %F9.1, %F9.1',
C     &			STPTR, STBUF(1,STPTR), STBUF(2,STPTR) )
C	ENDIF
C
C and count the point
C
	TOTPTS = TOTPTS+1
C
C and that's the lot
C
	RETURN
	END
