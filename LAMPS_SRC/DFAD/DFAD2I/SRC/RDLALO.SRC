	LOGICAL FUNCTION RDLALO( ISLAT )
C
***	IDENT	18MY88
***	MODULE	RDLALO
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author 	TJ Ibbs, 6 June 1983
C Modified 	CC Brunt, 26 August 1983 and 4 October 1983
C Modified	DRC 14-March-88		For use with DCL qualifiers.
C		External command table removed.
C
C 	Reads a  latitude  or longitude (according to ISLAT), and
C	converts to tenths of seconds of arc.
C 	The format of the latitude value is DDMMSS.SH where H is
C	either N or S
C 	The format of the longitude value is DDDMMSS.SH where H is
C	either E or W
C
C 	Returns FALSE if something goes wrong, else TRUE
C
C-------------------------------------------------------------------
C
	IMPLICIT NONE
C
C we were passed
C
	LOGICAL		ISLAT	! is it a latitude we want?
C
***     PARAMETER/HERE:DFAD2IMSG/
***     COMMON/HERE:PARAMS/     ! for DIAG
***	COMMON/HERE:SCRIPT/	! for searching for a map
***	COMMON/HERE:IFFILE/	! IFF filename
***	COMMON/HERE:STATE/	! for searching for a map
***	COMMON/LSL$CMNLSL:CMDCOM/	! contains INTARG and REALAR
***	COMMON/LSL$CMNLSL:TXTC/
C
C we call
C
	LOGICAL		RDCHS	! to read a character
	LOGICAL		RDLONG	! to read longword
	LOGICAL		RDREAL	! to read real
C
C we also need
C
	CHARACTER*4	LALO	! descriptor for what it is
	REAL		TENSEC	! collect the angle in this
	BYTE		CHAR	! for RDCHS
C
C---------------------------------------------------------------------
C assume we fail
C
	RDLALO = .TRUE.
        TENSEC = 0
C
C are we reading a latitude or longitude value ?
C
	IF ( ISLAT ) THEN
	   LALO = ' Lat'
	ELSE
	   LALO = 'Long'
	ENDIF
C
	CALL BSLN			! set to start of line
C
C	Read the degree field into INTARG(1)
	IF(ISLAT)THEN
	  CALL SETWIN(,2)		!2 characters for latitude
	ELSE
	  CALL SETWIN(,3)		!3 characters for longitude
	ENDIF
C
	IF(RDLONG(INTARG(1)))THEN
	   CALL LSL_PUTMSG( DFAD2I__RDDEGERR )   !unable to read degrees field
	   GOTO 999
	ENDIF	  
C	
C	Test if the field is valid
	IF(ISLAT)THEN
	  IF((INTARG(1).GT.90).OR.(INTARG(1).LT.0))THEN
	    CALL LSL_PUTMSG( DFAD2I__LATDEGERR )  !lat degrees invalid
	    GOTO 999
	  ENDIF
	ELSE
	  IF((INTARG(1).GT.180).OR.(INTARG(1).LT.0))THEN
	    CALL LSL_PUTMSG( DFAD2I__LONGDEGERR ) !long degrees invalid
	    GOTO 999
	  ENDIF
	ENDIF
C
C	Convert to tenths of seconds
	TENSEC = INTARG(1)*36000.0
C
C	Read the minutes field into INTARG(2)
	CALL SETWIN(,2)			!2 characters for minutes field
	IF(RDLONG(INTARG(2)))THEN
	  CALL LSL_PUTMSG( DFAD2I__RDMINERR )  !unable to read minutes field
	  GOTO 999
	ENDIF	  
C
C 	Check validity of the minutes field.
	IF (INTARG(2).LT.0.OR.INTARG(2).GT.60)THEN    ! minutes field invalid
	   CALL LSL_PUTMSG( DFAD2I__INVALIDMIN, INTARG(2), LALO ) 
           GOTO 999
	ENDIF
C
C	Convert to tenths of seconds and add to total
	TENSEC = TENSEC + INTARG(2)*600.0
C
C 	Read seconds field
C	The seconds value is read into REALAR(1)
	CALL SETWIN(,4)			!4 characters
	IF(RDREAL(REALAR(1)))THEN
	  CALL LSL_PUTMSG( DFAD2I__RDSECERR )   !seconds field missing
	  GOTO 999
	ENDIF
C
C	Test the validity of the seconds field
	IF (REALAR(1).LT.0.OR.REALAR(1).GT.60.0) THEN  !seconds field invalid
	   CALL LSL_PUTMSG( DFAD2I__INVALIDSEC, REALAR(1), LALO )
	   GOTO 999
	ENDIF
C
C	Convert to tenths of seconds and add to total
	TENSEC = TENSEC + REALAR(1)*10.0
C
C 	check for hemisphere
	CALL SETWIN(,1)			!just 1 character
C
	IF(RDCHS(CHAR))THEN
	  CALL LSL_PUTMSG( DFAD2I__RDNSEWERR )  ! hemis char not present
	  GOTO 999
	ENDIF
C
	IF(ISLAT)THEN
	  IF(CHAR.NE.'N'.AND.CHAR.NE.'n'.AND.
     &       CHAR.NE.'S'.AND.CHAR.NE.'s')THEN
	    CALL LSL_PUTMSG( DFAD2I__INVALIDNS ) !unrecognised lat hemis char
	    GOTO 999
	  ELSE IF(CHAR.EQ.'S'.OR.CHAR.EQ.'s')THEN
	    TENSEC= -TENSEC
	  ENDIF
	ELSE		
	  IF(CHAR.NE.'E'.AND.CHAR.NE.'e'.AND.
     &       CHAR.NE.'W'.AND.CHAR.NE.'w')THEN
	    CALL LSL_PUTMSG( DFAD2I__INVALIDEW ) !unrecognised long hemis char
	    GOTO 999
	  ELSE IF(CHAR.EQ.'W'.OR.CHAR.EQ.'w')THEN
	    TENSEC= -TENSEC
	  ENDIF
	ENDIF
C
C 	Set up the manuscript search values
	IF ( ISLAT ) THEN
	   SKLAT  = TENSEC
	   SERLAT = .TRUE.
        ELSE
	   SKLONG = TENSEC
	   SERLON = .TRUE.
	ENDIF
C
C 	no searching by number
	SERNUM = .FALSE.
C
C 	but definitely searching...
	SKIP   = .TRUE.
C
	IF ( DIAG_BRIEF ) THEN
	   CALL EXPAND('%Situde under search is ',LALO)
	   CALL APPEND('%I3%I2%F4.1',INTARG(1), INTARG(2), REALAR(1) )
	   IF(ISLAT)THEN
	     IF(TENSEC.LT.0)THEN
               CALL APPEND ('S')
	     ELSE
	       CALL APPEND ('N')
	     ENDIF
	   ELSE
	     IF(TENSEC.LT.0)THEN
               CALL APPEND ('W')
	     ELSE
	       CALL APPEND ('E')
	     ENDIF
	   ENDIF
	   CALL TTWLIN
	ENDIF
C
C regardless, we have now finished
C
	RDLALO = .FALSE.
C
999	RETURN
	END
