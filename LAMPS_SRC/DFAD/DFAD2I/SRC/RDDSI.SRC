C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-08-14 11:49:28.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION RDDSI
C
***	IDENT	29JL93
***	MODULE	RDDSI
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 22 March 1983
C Modified CC Brunt, 8 Novemeber 1983
C
C This subroutine reads the DSI (Date Set Identification) block which
C it expects to find in BYTBUF.
C As usual, we return FALSE if all goes OK, and TRUE if something goes
C wrong (ie we were stopped from interpreting the block properly)
C
	IMPLICIT NONE
C
***     PARAMETER/HERE:DFAD2IMSG/
***	PARAMETER/LSL$CMNDLMS:FORMAT/	! angle formats
***	COMMON/HERE:PARAMS/	! for DIAG_FULL
***	COMMON/LSL$CMNIFF:MHMCE/! MCE map header
***	COMMON/LSL$CMNDLMS:DFAD/	! for BYTBUF, BYTLEN
C
C functions called
C
	LOGICAL		RDINT	! read an integer(*2)
	INTEGER		RDTEXT	! read a block of text
	INTEGER		RDFANG	! read fixed format angle
	INTEGER		RDYYMM	! read a YYMM date
C
C workspace
C
	INTEGER*2	DCP1,DCP2	! decode pointer saves
	BYTE		DSI(3)		! for holding byte chars 'DSI'
        BYTE            IGNORE(50)      ! data to ignore
	CHARACTER*50	WHERE		! for where an error occurred
	INTEGER*2	PTR		! locally saved pointer
C
	INTEGER*2	NUMBER	! word version
	BYTE		NUMBYT	! byte version
	CHARACTER*1	CH	! 
	BYTE		DFAD1C_ED1 ! DFAD level 1C edition 1 numeric to use instead
				! of 'C' because MCEHED reads integers
	PARAMETER	(DFAD1C_ED1 = 5)
	BYTE		DFAD1C_ED2 ! DFAD level 1C  edition 2 numeric to use instead
				! of 'B' because MCEHED reads integers
	PARAMETER	(DFAD1C_ED2 = 4)
C
	EQUIVALENCE    (NUMBER, NUMBYT)
C
C
C be pessimistic initially
C
	RDDSI = .TRUE.
C
C
C set up the input buffer as our current text buffer
C
	CALL SETAUX( BYTBUF, BYTCNT )
	CALL DCPSAV( DCP1 )
C
C the first three characters should be DSI - let us check that first
C of all...
C
	IF ( .NOT.RDTEXT( DSI, 3 ) ) THEN
	   CALL LSL_PUTMSG(DFAD2I__DSISENTERR ) !unable to read DSI sentinel
	   RETURN
	ELSEIF ( DSI(1).NE.'D' .OR. DSI(2).NE.'S' .OR.
     &		 DSI(3).NE.'I' ) THEN
	   CALL LSL_PUTMSG(                   !unexp char at start of DSI block
     &		  DFAD2I__DSIUNEXPC, DSI(1) )
	   RETURN
	ENDIF
C
C so we have our block ID - we can carry on with the rest now.
C
C the very first character is the security classification code
C
	WHERE = 'Security code descriptor'
	CALL DCPSAV(PTR)
	IF ( .NOT.RDTEXT( MHSECD, 1 ) ) THEN
C unable to read field in DSI block; filling with a space
           CALL LSL_PUTMSG(
     &	      DFAD2I__DSIBLKERR, WHERE )
           CALL LSL_PUTMSG(DFAD2I__DSIPUTSP)
C
C If there is a read error then output spaces to MH variable
C
	   CALL SPACE(MHSECD,1)
	   CALL SETWIN(PTR+1,)
	ENDIF
C
	IF (DIAG_FULL) CALL WRITEF('%S ''%A1''',WHERE,MHSECD)
C
C the next two characters are 'for DoD use only' security control and
C release markings - we shall ignore them for the moment
C
	WHERE = 'Security/release control'
	CALL DCPSAV(PTR)
	IF ( .NOT.RDTEXT( IGNORE, 2 ) ) THEN
C unable to read field in DSI block; 
	   CALL LSL_PUTMSG(
     &	      DFAD2I__DSIBLKERR, WHERE )
	   CALL SETWIN(PTR+2,)
	ENDIF
C
C don't print out
C	IF (DIAG_FULL) CALL WRITEF('%S ''%A2''',WHERE,DSI(1) )
C
C now we deal with the security handling description - this we can copy
C straight across into the map header
C
	WHERE = 'Security handling descriptor'
	CALL DCPSAV(PTR)
	IF ( .NOT.RDTEXT( MHSHD, 27 ) ) THEN
C unable to read field in DSI block; filling with spaces
	   CALL LSL_PUTMSG(
     &	      DFAD2I__DSIBLKERR, WHERE )
           CALL LSL_PUTMSG(DFAD2I__DSIPUTSP)
C	  
C
C If there is a read error then output spaces to MH variable
C
	   CALL SPACE(MHSHD,27)
	   CALL SETWIN(PTR+27,)
	ENDIF
C
	IF (DIAG_FULL) CALL WRITEF('%S ''%A27''',WHERE,MHSHD(1) )
C
C we must ignore the next bit...
C
	WHERE = 'Reserved field 1'
	CALL DCPSAV(PTR)
	IF ( .NOT.RDTEXT( IGNORE, 26 ) ) THEN
	   CALL LSL_PUTMSG(
C unable to read field in DSI block; 
     &	      DFAD2I__DSIBLKERR, WHERE )
	   CALL SETWIN(PTR+26,)
	ENDIF
C
C next we have the Series Designator - this is read as two parts into
C the map header
C
	WHERE = 'Series designator - task'
	CALL DCPSAV(PTR)
	IF ( .NOT.RDTEXT( MHTASK, 4 ) ) THEN
C unable to read field in DSI block; filling with spaces
	   CALL LSL_PUTMSG(
     &	      DFAD2I__DSIBLKERR, WHERE )
   	   CALL LSL_PUTMSG(DFAD2I__DSIPUTSP)
C
C If there is a read error then output spaces to MH variable
C
	   CALL SPACE(MHTASK,4)
	   CALL SETWIN(PTR+4,)
	ENDIF
C
	IF (DIAG_FULL) CALL WRITEF('%S ''%A4''',WHERE,MHTASK(1) )
C
C and the second part
C
	WHERE = 'Series designator - level'
	CALL DCPSAV(PTR)
	CALL SETWIN( , 1 )			! only one digit
	IF ( .NOT.RDTEXT( MHLEV,1 ) ) THEN
C unable to read field in DSI block; outputting zero
	   CALL LSL_PUTMSG(
     &	      DFAD2I__DSIBLKERR, WHERE )
   	   CALL LSL_PUTMSG(DFAD2I__DSIPUT0)
C
C If there is a read error assume value to be zero
C
	   MHLEV = 0
	   CALL SETWIN(PTR+1,)
	ELSE 
	   CALL SETWIN( , )
	ENDIF
C
C change MHLEV value of B or C to number representing DFAD level 1C.
C Test also for ACSII 4 to allow for files which were incorrectly
C set to '4' by a version of I2DFAD which had a bug.
C
	IF (CHAR(MHLEV).EQ.'B'.OR.CHAR(MHLEV).EQ.'4') THEN
	   MHLEV = DFAD1C_ED2
	ELSE IF (CHAR(MHLEV).EQ.'C') THEN
	   MHLEV = DFAD1C_ED1
	ELSE
	   CH = CHAR(MHLEV)
	   READ(CH,'(I1)') MHLEV
	ENDIF
	IF (DIAG_FULL) CALL WRITEF('%S ''%^B%I1''',WHERE,MHLEV )
C
C and we then have a unique reference code for this manuscript...
C
	WHERE = 'Unique reference code'
	CALL DCPSAV(PTR)
	IF ( .NOT.RDTEXT( MHREFN, 15 ) ) THEN
C unable to read field in DSI block; filling with spaces
	   CALL LSL_PUTMSG(
     &	      DFAD2I__DSIBLKERR, WHERE )
           CALL LSL_PUTMSG(DFAD2I__DSIPUTSP)
C
C If there is a read error then output spaces to MH variable
C
	   CALL SPACE(MHREFN,15)
	   CALL SETWIN(PTR+15,)
	ENDIF
C
	IF (DIAG_FULL) CALL WRITEF('%S ''%A15''',WHERE,MHREFN )
C
C and another block to ignore
C
	WHERE = 'Reserved block 2'
	CALL DCPSAV(PTR)
	IF ( .NOT.RDTEXT( IGNORE, 8 ) ) THEN
C unable to read field in DSI block; 
	   CALL LSL_PUTMSG(
     &	      DFAD2I__DSIBLKERR, WHERE )
C
C If there is a read error then output spaces to MH variable
C
	   CALL SETWIN(PTR+8,)
	ENDIF
C
C so we can now read in the data edition number
C
	WHERE = 'Data edition number'
	CALL DCPSAV(PTR)
C
	CALL SETWIN( , 2 )	! only 2 digits
	IF ( RDINT(NUMBER) ) THEN
C unable to read field in DSI block; outputting zero
	   CALL LSL_PUTMSG(
     &	      DFAD2I__DSIBLKERR, WHERE )
           CALL LSL_PUTMSG(DFAD2I__DSIPUT0)
C
C If there is a read error assume value to be zero
C
	   NUMBER = 0
	   CALL SETWIN(PTR+2,)
	ELSE 
	   CALL SETWIN( , )
	ENDIF
C
	MHEDN = NUMBYT		! copy it over
	IF (DIAG_FULL) CALL WRITEF('%S %N',WHERE,MHEDN)
C
C and then the match/merge version
C
	WHERE = 'Match/merge version'
	CALL DCPSAV(PTR)
	IF ( .NOT.RDTEXT( MHMMV, 1 ) ) THEN
C unable to read field in DSI block; filling with spaces
	   CALL LSL_PUTMSG(
     &	      DFAD2I__DSIBLKERR, WHERE )
           CALL LSL_PUTMSG(DFAD2I__DSIPUTSP)
C
C If there is a read error then output spaces to MH variable
C
	   CALL SPACE(MHMMV,1)
	   CALL SETWIN(PTR+1,)
	ENDIF
C
	IF (DIAG_FULL) CALL WRITEF('%S ''%A1''',WHERE,MHMMV )
C
C and two dates, which we shall read cunningly
C
	WHERE = 'Maintenance date'
	CALL DCPSAV(PTR)
	IF ( .NOT.RDYYMM(MHMDTE) ) THEN

C unable to read field in DSI block; outputting zero
	   CALL LSL_PUTMSG(
     &	      DFAD2I__DSIBLKERR, WHERE )
           CALL LSL_PUTMSG(DFAD2I__DSIPUT0)
C
C If error make value o
C
	   MHMDTE = 0
	   CALL SETWIN(PTR+4,)
	ENDIF	   	    
	IF (DIAG_FULL) THEN
	   CALL EXPAND('%S ',WHERE)
	   CALL OUTDAT(MHMDTE)
	ENDIF
C
	WHERE = 'Match/merge date'
	IF ( .NOT.RDYYMM(MHMMD) ) THEN
C
C unable to read field in DSI block; outputting zero
	   CALL LSL_PUTMSG(
     &	      DFAD2I__DSIBLKERR, WHERE )
           CALL LSL_PUTMSG(DFAD2I__DSIPUT0)
C
C If error make value o
C
	   MHMMD = 0
	   CALL SETWIN(PTR+4,)
	ENDIF	   	    
C
	IF (DIAG_FULL) THEN
	   CALL EXPAND('%S ',WHERE)
	   CALL OUTDAT(MHMMD)
	ENDIF
C
C and we're back to copying for the maintenance description code
C
	WHERE = 'Maintenance description code'
	CALL DCPSAV(PTR)
	IF ( .NOT.RDTEXT( MHMCDE, 4 ) ) THEN
C unable to read field in DSI block; filling with spaces
	   CALL LSL_PUTMSG(
     &	      DFAD2I__DSIBLKERR, WHERE )
           CALL LSL_PUTMSG(DFAD2I__DSIPUTSP)
C
C If there is a read error then output spaces to MH variable
C
	   CALL SPACE(MHMCDE,4)
	   CALL SETWIN(PTR+4,)
	ENDIF

	IF (DIAG_FULL) CALL WRITEF('%S ''%A4''',WHERE,MHMCDE(1) )
C
C next comes the producer code
C
	WHERE = 'Producer code'
	CALL DCPSAV(PTR)
	IF ( .NOT.RDTEXT( MHPCDE, 8 ) ) THEN
C unable to read field in DSI block; filling with spaces
	   CALL LSL_PUTMSG(
     &	      DFAD2I__DSIBLKERR, WHERE )
           CALL LSL_PUTMSG(DFAD2I__DSIPUTSP)
C
C If there is a read error then output spaces to MH variable
C
	   CALL SPACE(MHPCDE,8)
	   CALL SETWIN(PTR+8,)
	ENDIF
C
	IF (DIAG_FULL) CALL WRITEF('%S ''%A8''',WHERE,MHPCDE(1) )
C
C ignore some more
C
	WHERE = 'Reserved field 3'
	CALL DCPSAV(PTR)
	IF ( .NOT.RDTEXT( IGNORE, 16 ) ) THEN
C unable to read field in DSI block; 
	   CALL LSL_PUTMSG(
     &	      DFAD2I__DSIBLKERR, WHERE )
C
	   CALL SETWIN(PTR+16,)
	ENDIF
C
C and after that we have the product spec. stock 'number'
C
	WHERE = 'Product spec stock number'
	CALL DCPSAV(PTR)
	IF ( .NOT.RDTEXT( MHPSSN, 9 ) ) THEN
C unable to read field in DSI block; filling with spaces
	   CALL LSL_PUTMSG(
     &	      DFAD2I__DSIBLKERR, WHERE )
           CALL LSL_PUTMSG(DFAD2I__DSIPUTSP)
C
C If there is a read error then output spaces to MH variable
C
	   CALL SPACE(MHPSSN,9)
	   CALL SETWIN(PTR+9,)
	ENDIF
C
	IF (DIAG_FULL) CALL WRITEF('%S ''%A9''',WHERE,MHPSSN(1) )
C
C next let's read the product specification change number
C
	WHERE = 'Product spec change number'
	CALL DCPSAV(PTR)
C
	CALL SETWIN( , 2 )	! only 2 digits
	IF ( RDINT( NUMBER ) ) THEN
C unable to read field in DSI block; outputting zero
	   CALL LSL_PUTMSG(
     &	      DFAD2I__DSIBLKERR, WHERE )
           CALL LSL_PUTMSG(DFAD2I__DSIPUT0)
C
C If there is a read error assume value to be zero
C
	   NUMBER = 0
	   CALL SETWIN(PTR+2,)
	ELSE 
	   CALL SETWIN( , )
	ENDIF
C
	MHPSCN = NUMBYT
	IF (DIAG_FULL) CALL WRITEF('%S %N',WHERE,MHPSCN)
C
C and another date - the product spec date
C
	WHERE = 'Product spec date'
	IF ( .NOT.RDYYMM(MHPSDT) )THEN
C
C unable to read field in DSI block; outputting zero
	   CALL LSL_PUTMSG(
     &	      DFAD2I__DSIBLKERR, WHERE )
           CALL LSL_PUTMSG(DFAD2I__DSIPUT0)
C
C If error make value o
C
	   MHPSDT = 0
	   CALL SETWIN(PTR+4,)
	ENDIF	   	    
C
	IF (DIAG_FULL) THEN
	   CALL EXPAND('%S ',WHERE)
	   CALL OUTDAT( MHPSDT )
	ENDIF
C
C back to straight copying again for the vertical datum
C
	WHERE = 'Vertical datum'
	CALL DCPSAV(PTR)
	IF ( .NOT.RDTEXT( MHVDTM, 3 ) ) THEN
C unable to read field in DSI block; filling with spaces
	   CALL LSL_PUTMSG(
     &	      DFAD2I__DSIBLKERR, WHERE )
           CALL LSL_PUTMSG(DFAD2I__DSIPUTSP)
C
C If there is a read error then output spaces to MH variable
C
	   CALL SPACE(MHVDTM,3)
	   CALL SETWIN(PTR+3,)
	ENDIF

	IF (DIAG_FULL) CALL WRITEF('%S ''%A3''',WHERE,MHVDTM )
C
C followed by the horizontal datum
C
	WHERE = 'Horizontal datum'
	CALL DCPSAV(PTR)
	IF ( .NOT.RDTEXT( MHHDTM, 5 ) ) THEN
C unable to read field in DSI block; filling with spaces
	   CALL LSL_PUTMSG(
     &	      DFAD2I__DSIBLKERR, WHERE )
           CALL LSL_PUTMSG(DFAD2I__DSIPUTSP)
C
C If there is a read error then output spaces to MH variable
C
	   CALL SPACE(MHHDTM,5)
	   CALL SETWIN(PTR+5,)
	ENDIF
	IF (DIAG_FULL) CALL WRITEF('%S ''%A5''',WHERE,MHHDTM )
C
C and then the collection system
C
	WHERE = 'Digitising collection system'
	CALL DCPSAV(PTR)
	IF ( .NOT.RDTEXT( MHDSYS, 10 ) ) THEN
C unable to read field in DSI block; filling with spaces
	   CALL LSL_PUTMSG(
     &	      DFAD2I__DSIBLKERR, WHERE )
           CALL LSL_PUTMSG(DFAD2I__DSIPUTSP)
C
C If there is a read error then output spaces to MH variable
C
	   CALL SPACE(MHDSYS,10)
	   CALL SETWIN(PTR+10,)
	ENDIF
	IF (DIAG_FULL) CALL WRITEF('%S ''%A10''',WHERE,MHDSYS )
C
C and then we have the compilation date
C
	WHERE = 'Compilation date'
	CALL DCPSAV(PTR)
	IF ( .NOT.RDYYMM( MHCDTE ) ) THEN
C unable to read field in DSI block; outputting zero
	   CALL LSL_PUTMSG(
     &	      DFAD2I__DSIBLKERR, WHERE )
           CALL LSL_PUTMSG(DFAD2I__DSIPUT0)
C
C If error make value o
C
	   MHCDTE = 0
	   CALL SETWIN(PTR+4,)
	ENDIF	   	    
	IF (DIAG_FULL) THEN
	   CALL EXPAND('%S ',WHERE)
	   CALL OUTDAT(MHCDTE)
	ENDIF
C
C and ignore some more
C
	WHERE = 'Reserved field 4'
	CALL DCPSAV(PTR)
	IF ( .NOT.RDTEXT( IGNORE, 22 ) ) THEN
C unable to read field in DSI block; 
	   CALL LSL_PUTMSG(
     &	      DFAD2I__DSIBLKERR, WHERE )
C
	   CALL SETWIN(PTR+22,)
	ENDIF
C
C followed by some origin information... (all in hemisphere format)
C
	WHERE = 'Manuscript origin (lat) '
	CALL DCPSAV(PTR)
	IF ( .NOT.RDFANG( DD, TENTH, HEMI, MHLAMO ) ) THEN
C unable to read field in DSI block; outputting zero
	   CALL LSL_PUTMSG(
     &	      DFAD2I__DSIBLKERR, WHERE )
           CALL LSL_PUTMSG(DFAD2I__DSIPUT0)
C
C if error make angle 0
	    MHLAMO = 0
	    CALL SETWIN(PTR+9,)
	ENDIF
C
	IF (DIAG_FULL) THEN
	   CALL EXPAND('%S ',WHERE)
	   CALL OUTANG( MHLAMO )
	ENDIF
C
	WHERE = 'Manuscript origin (long)'
	CALL DCPSAV(PTR)
	IF ( .NOT.RDFANG( DDD, TENTH, HEMI, MHLOMO ) ) THEN
C unable to read field in DSI block; outputting zero
	   CALL LSL_PUTMSG(
     &	      DFAD2I__DSIBLKERR, WHERE )
           CALL LSL_PUTMSG(DFAD2I__DSIPUT0)
C
C if error make angle 0
	    MHLOMO = 0
	    CALL SETWIN(PTR+10,)
	ENDIF
C
	IF (DIAG_FULL) THEN
	   CALL EXPAND('%S ',WHERE)
	   CALL OUTANG( MHLOMO )
	ENDIF
C
C and some information about the extent of the map (ie feature 1)
C
	WHERE = 'South west corner (lat) '
	CALL DCPSAV(PTR)
	IF ( .NOT.RDFANG( DD, TENTH, HEMI, MHLASW ) ) THEN
C unable to read field in DSI block; outputting zero
	   CALL LSL_PUTMSG(
     &	      DFAD2I__DSIBLKERR, WHERE )
           CALL LSL_PUTMSG(DFAD2I__DSIPUT0)
C
C if error make angle 0
	    MHLASW = 0
	    CALL SETWIN(PTR+9,)
	ENDIF
C
	IF (DIAG_FULL) THEN
	   CALL EXPAND('%S ',WHERE)
	   CALL OUTANG( MHLASW )
	ENDIF
C
	WHERE = 'South west corner (long)'
	CALL DCPSAV(PTR)
	IF ( .NOT.RDFANG( DDD, TENTH, HEMI, MHLOSW ) ) THEN
C unable to read field in DSI block; outputting zero
	   CALL LSL_PUTMSG(
     &	      DFAD2I__DSIBLKERR, WHERE )
           CALL LSL_PUTMSG(DFAD2I__DSIPUT0)
C
C if error make angle 0
	    MHLOSW = 0
	    CALL SETWIN(PTR+10,)
	ENDIF
C
	IF (DIAG_FULL) THEN
	   CALL EXPAND('%S ',WHERE)
	   CALL OUTANG( MHLOSW )
	ENDIF
C
	WHERE = 'North east corner (lat) '
	CALL DCPSAV(PTR)
	IF ( .NOT.RDFANG( DD, TENTH, HEMI, MHLANE ) ) THEN
C unable to read field in DSI block; outputting zero
	   CALL LSL_PUTMSG(
     &	      DFAD2I__DSIBLKERR, WHERE )
           CALL LSL_PUTMSG(DFAD2I__DSIPUT0)
C
C if error make angle 0
	    MHLANE = 0
	    CALL SETWIN(PTR+9,)
	ENDIF
C
	IF (DIAG_FULL) THEN
	   CALL EXPAND('%S ',WHERE)
	   CALL OUTANG( MHLANE )
	ENDIF
C
	WHERE = 'North east corner (long)'
	CALL DCPSAV(PTR)
C
	IF ( .NOT.RDFANG( DDD, TENTH, HEMI, MHLONE ) ) THEN
C unable to read field in DSI block; outputting zero
	   CALL LSL_PUTMSG(
     &	      DFAD2I__DSIBLKERR, WHERE )
           CALL LSL_PUTMSG(DFAD2I__DSIPUT0)
C
C if error make angle 0
	    MHLONE = 0
	    CALL SETWIN(PTR+10,)
	ENDIF
C
	IF (DIAG_FULL) THEN
	   CALL EXPAND('%S ',WHERE)
	   CALL OUTANG( MHLONE )
	ENDIF
C
C Check that the decode pointer is up to where we expect it
C
	CALL DCPSAV( DCP2 )
	IF ( DCP2-DCP1 .NE. 242 ) THEN
	   CALL LSL_PUTMSG(
     &	      DFAD2I__DSINUMERR )     !incorrect no. of chars read
	   RETURN
	ENDIF
C
C and that is all the data we need to read from this buffer, so
C we can safely return with our job finished
C
	RDDSI = .FALSE.				! success at last
C
	IF (DIAG_FULL) CALL WRITEF
C
	RETURN					! return with it
C
C this is our standard 'failed to read' error return - it shouldn't
C ever actually be needed
C
C unable to read field in DSI block; 
99999	CALL LSL_PUTMSG(
     &	   DFAD2I__DSIBLKERR, WHERE )
	RETURN
	END
