C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-05-11 11:29:32.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE OUTHDR
C
***	IDENT	10MA90
***	MODULE	OUTHDR
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 15 March 1983
C Modified CC Brunt, 25 August 1983
C Modified J Barber, 14 April 1988 to create 2MD2
C Modified P Pan, 10 May 1990 to set MHMANU and MHCOOR
C
C This subroutine outputs the information obtained from the manuscript
C header(s) (including the DSI and ACC blocks, if such are found)
C It is called after the first feature has been read, since this
C feature circumscribes the manuscript
C
C If we are a change 2 map (ie no DSI or ACC block) then we must take
C RAnge, and so on, from the manuscript header/first feature.
C
C If we are change 3, then we get almost everything from the DSI and
C ACC blocks.
C
	IMPLICIT NONE
C
C common blocks...
C
***	COMMON/HERE:SCRIPT/		! contains manuscript descn
***	COMMON/HERE:STATE/		! whether output header, etc
***	COMMON/HERE:DESCR/		! for STBUF, RANGE
***	COMMON/LSL$CMNIFF:IFFHAN/	! for   LPOSH 
***	COMMON/LSL$CMNIFF:MHMCE/	! for map header
***	COMMON/LSL$CMNIFF:MD2DES/	! for type 2map descriptor
***	COMMON/LSL$CMNLSL:EXPC/		! for EXPBUF, etc
C
C workspace...
C
	INTEGER*4	I		! DO loop variable
	REAL		CFT(10,2)	! cubic coefficients
	REAL		CPTS(4,4)	! corner points
	BYTE		DATBUF(10)	! to hold the date
	BYTE		TIMBUF(9)	! and the time
	INTEGER*2	ZERO, ONE
	REAL		POINT(2)	! for corner point features
	INTEGER*2	ISTAT(4)	! similarly
C
	ZERO = 0			! set the simple numbers
	ONE  = 1
C
C set the MHMANU and MHCOOR
C
        MHMANU = 1			! 1 is Culture
        MHCOOR = 3			! 3 is geog 1/10 seconds
C
C set up header stuff - first the range of the map
C
	IF ( CHANGE.EQ.2 ) THEN
C
C	 If we are change 2 then we obtain the range from the first
C	 feature on the map, which we will have just read in.
C	 Let us be cautious - we don't know what order the points go
C	 in, or which is which (although we do know they define a
C	 rectangle!)
C
C	 the order we want is Xmin, Xmax, Ymin, Ymax (X=long, Y=lat)
C
	   RANGE(1) = MIN(STBUF(1,1),STBUF(1,2),STBUF(1,3),STBUF(1,4))
	   RANGE(2) = MAX(STBUF(1,1),STBUF(1,2),STBUF(1,3),STBUF(1,4))
	   RANGE(3) = MIN(STBUF(2,1),STBUF(2,2),STBUF(2,3),STBUF(2,4))
	   RANGE(4) = MAX(STBUF(2,1),STBUF(2,2),STBUF(2,3),STBUF(2,4))
C
C	 and then set the relevant fields in the mapheader
C
C	 the map origin was read in from the manuscript header block-
C
	   MHLOMO = LONG0
	   MHLAMO = LAT0
C
C	 and the coordinates of the corners are then obtained by
C	 adding the RANGE offsets to the origin values...
C
	   MHLOSW = RANGE(1)+MHLOMO
	   MHLONE = RANGE(2)+MHLOMO
	   MHLASW = RANGE(3)+MHLAMO
	   MHLANE = RANGE(4)+MHLAMO
C
C	 and then the level indicator for this map
C
	   MHLEV = LEVEL
C
C	 and note that we are a DLMS map
C
	   CALL EXPAND('%WSPECXDLMS',MHPSSN)
C
	ELSE
C
C	 our range entry is obtained as the lat/long of the extremes,
C	 minus the lat/long of the origin of the manuscript (remember,
C	 all coordinates are entered as offsets from the origin)
C
	   RANGE(1) = MHLOSW-MHLOMO	! long, SW corner
	   RANGE(2) = MHLONE-MHLOMO	! long, NE corner
	   RANGE(3) = MHLASW-MHLAMO	! lat,  SW corner
	   RANGE(4) = MHLANE-MHLAMO	! lat,  NE corner
C
	ENDIF
C
C from the corners we know, we can calculate the other corners,
C and the extent of the map...
C
	MHLANW = MHLANE			! corners first
	MHLONW = MHLOSW
	MHLASE = MHLASW
	MHLOSE = MHLONE
C
C and the extents (exact extents, unlike those in the manuscript
C descriptor, which are rounded up)
C
	MHLAEX = MHLANW - MHLASW
	MHLOEX = MHLOSE - MHLOSW
C
C and we can now also output the RAnge entry
C
	CALL IFFRA( RANGE )             ! for RAnge
        CALL IFFHI                      ! for HIstory entry
C
C
C and we output the map header next, after setting up the descriptor at
C the front... (this tells us what sort of map header it is)
C
	MHDESC(1) = 174		! there are 174 long words in it
	MHDESC(2) = 1		! and it's an MCE map header (OS = 2)
	MHDESC(3) = 0		! end of the descriptor
	MHDESC(4) = 0
C
C
C we also have various things from the manuscript header block
C to insert before we write it out
C
C first the WAG/WAC information...
C
	CALL EXPAND('%W%P0%I4%I2%I2',MHWAC,WAGNUM,WAGWAC,WAGCEL)
C
C and now actually output the thing
C
	CALL IFFMH( MHARR, MHLEN )
C
C set up the map descriptor
C
	MD2PRJ  = 100			! geographical coords.
C horizontal datum
	IF(MHHDTM(4).EQ.'8'.AND.MHHDTM(5).EQ.'4')THEN
	   MD2SPH = 22
	ELSE
	   MD2SPH = 5			! Assume WGS 72 
	ENDIF
C
	MD2UNT  = 110			! tenths of seconds of arc
	MD2LOC(2) = MHLAMO       	! origin latitude in degrees
	MD2LOC(1) = MHLOMO      	! origin longitude in degrees
        MATV2 = 2                       ! MD type
C
C output the map descriptor
C
	CALL IFFMD( MD2ARR, MD2LEN )
C
C That's the map start stuff - now to the things for our new section
C
C We start with the New Section itself...
C
C  work out the time we are doing all of this
C
	CALL TIME(TIMBUF)
	TIMBUF(9) = 0
C
C  and the date
C
	CALL DATE(DATBUF)
	DATBUF(10) = 0
C
C lower-case 2nd and 3rd letters of month name
C
	DATBUF(5) = DATBUF(5)-'A'+'a'
	DATBUF(6) = DATBUF(6)-'A'+'a'
C
	CALL EXPAND('Created by DFAD2I on %AZ at %AZ',
     &					  DATBUF,TIMBUF )
C
C and thus we have our New Section declaration
C
	CALL IFFNS(EXPBUF, EXPLEN)
C
C and now the cubic coefficients...
C
	DO 100 I = 1,10
	   CFT(I,1) = 0.0
	   CFT(I,2) = 0.0
100	CONTINUE
C
	CFT(2,1) = 1.0		! the sole non-zero elements
	CFT(3,2) = 1.0		! are set up
C
	CALL IFFCC(CFT)		! output the cubic coefficients
C
C lastly, we must output CP array -
C The corner points are thus:
C
C	the first variable is x,y for digitised, x,y for required
C	coordinates. In this case, we thus have these two identical
C
C	the second variable gives us which corner - in the standard
C	order NW, SW, SE, NE. We shall be boring and assign all of
C	these explicitly, because it's clearer what we're doing then
C
C Let us go through the first set of corner points
C
C 1st corner - NW corner of the map
C
	CPTS(1,1) = RANGE(1)		! X is X zero
	CPTS(2,1) = RANGE(4)		! Y is the Y extent
C
C 2nd corner - SW corner (origin) of the map
C
	CPTS(1,2) = RANGE(1)		! since it's the origin
	CPTS(2,2) = RANGE(3)		! these must be zero
C
C 3rd corner - SE corner of the map
C
	CPTS(1,3) = RANGE(2)		! X is the X extent
	CPTS(2,3) = RANGE(3)		! Y is Y zero
C
C 4th corner - NE corner of the map
C
	CPTS(1,4) = RANGE(2)		! X is the X extent
	CPTS(2,4) = RANGE(4)		! Y is the Y extent
C
C and we can copy this first set of corner point values into the
C second set...
C
	DO 200 I = 1,4			! loop round all corners
	   CPTS(3,I) = CPTS(1,I)	!    for X
	   CPTS(4,I) = CPTS(2,I)	!    and for Y
200	CONTINUE
C
C and now we can output it
C
	CALL IFFCP(CPTS)
C
C and so we may now start layer 0
C for a change 3 map, this will contain any accuracy subregions,
C otherwise it will be empty
C
C and remember where this NO is (or is about to be)
C
	LPOSNO = LPOSE		! we'll come back later to add a
C				! pointer to the matching EO
C this is layer 0
C
	LAYER = 0
	CALL IFFNO( LAYER, ZERO, 0 )
C
C unset the LSTTYP (last FTYPE) memory (to force a change of overlay)
C
	LSTTYP = -1
C
C and note that we have actually done all of this!
C
	DONHDR = .TRUE.
C
C
	RETURN				! and return with it all done
	END
