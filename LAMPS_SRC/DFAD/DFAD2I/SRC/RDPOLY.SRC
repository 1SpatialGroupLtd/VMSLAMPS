C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-05-10 18:06:20.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE RDPOLY( NUMPOL )
C
***	IDENT	10MA90
***	MODULE	RDPOLY
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 19 May 1983
C Modified CC Brunt, 8 November 1983
C MOD feature code for accuracy polygons set to 301 and 
C remove output of TH thickness entry
C            S Hancock 22-Feb-1985
C Modified P Pan, 10 May 1990 	     To set TH entry to 0
C
C This subroutine reads NUMPOL accuracy polygons from the ACC block,
C and outputs features as required - each with an accuracy AC
C
	IMPLICIT NONE
C
***     PARAMETER/HERE:DFAD2IMSG/
***	PARAMETER/LSL$CMNDLMS:FORMAT/	! angle formats
***	COMMON/HERE:PARAMS/	! for DIAG
***	COMMON/LSL$CMNIFF:MHMCE/! MCE map header
***	COMMON/LSL$CMNLSL:EXPC/	! for EXPBUF, etc
***	COMMON/LSL$CMNDLMS:DFAD/! for BYTBUF, BYTLEN
C
C passed
C
	INTEGER*2	NUMPOL	! number of polygons to read
C
C functions called
C
	INTEGER		RDTEXT	! read a block of text
	INTEGER		RDFANG	! read a fixed format angle
	LOGICAL		RDCH	! read a single character
	LOGICAL		RDINT	! to read an integer
C
C workspace
C
	INTEGER*2	DCP2		! decode pointer save
C
C
	INTEGER*2	ABSHAC		! absolute horizontal accuracy
	INTEGER*2	RELHAC		! relative ditto
	INTEGER*2	NUMPTS		! how many points in the thing
C
	INTEGER*4	IANGLE		! integer angle
	REAL		STBUF( 2, 15 )	! real storage buffer
	INTEGER*4	BASE(2)		! base (origin) of map
C
	INTEGER*2	DCPWAS		! remember position in line
	INTEGER*4	LENGTH		! total length of a subregion
	BYTE		IGNORE( 10 )	! to ignore chars into
C
C by remembering where each region definition starts, and how long
C a definition MAY be, we can always skip to the next one by simply
C adding LENGTH to the DCPTR position before we read the region
C
	INTEGER*2	POL		! loop variable for polygons
	INTEGER*2	CNR		! and for poly corners
	INTEGER*2	XY		! and then for x,y coords
	LOGICAL		XYDDD(2)	! to store DD, DDD correctly
C
C
	INTEGER*2	ZERO		! sic
	INTEGER*2	ISTAT(4)	! IT, etc
C
	INTEGER*2	ITH		! TH line thinkness
C
	DATA	ISTAT /0,0,0,0/
C
	ITH = 0				! line thinkness set to 0
C
C Remember - X is longitude, Y is latitude. BUT the angles are actually
C presented in the opposite order to that...
C
C we must remember whether 'tis X or Y that has the long degree field
C
	XYDDD(1) = DDD			! long/X
	XYDDD(2) = DD			! lat/Y
C
C remember where our origin is, so we can subtract it from coords
C
	BASE(1) = MHLOMO		! X
	BASE(2) = MHLAMO		! Y
C
C
C
C work out the total length of the accuracy subregion data...
C this is the length of the accuracy fields + blank fills, plus the
C field for how many points, followed by 14 coordinate pairs (not all
C necessarily full)
C
	LENGTH = 8+8+2 + 14*( 9+10 )
C
C
	DO 500 POL = 1, NUMPOL		! loop around for all polygons
C
C	 first we remember where in the buffer we are now...
C
	   CALL DCPSAV( DCPWAS )
C
	   IF (DIAG_FULL) CALL WRITEF('Reading polygon %^W%N',POL)
C
C	 now we read in the accuracy information relating to this
C	 subregion...
C
	   CALL SETWIN( , 4 )
	   IF ( RDINT( ABSHAC ) ) GOTO 9999
	   CALL SETWIN( , 4 )
	   IF ( .NOT.RDTEXT( IGNORE, 4 ) ) GOTO 9999
	   CALL SETWIN( , 4 )
	   IF ( RDINT( RELHAC ) ) GOTO 9999
	   CALL SETWIN( , 4 )
	   IF ( .NOT.RDTEXT( IGNORE, 4 ) ) GOTO 9999
C
C     now find out how many points there are to define this accuracy
C	 subregion...
C
	   CALL SETWIN( , 2 )
	   IF ( RDINT( NUMPTS ) ) GOTO 9999
	   CALL SETWIN( , )
C
	   IF ( NUMPTS.LT.3 ) THEN
	      CALL LSL_PUTMSG(                    !ACC region POL, NUMPTS 
     &	         DFAD2I__ACCPTSERR, POL, NUMPTS ) !cannot define a region
	      GOTO 9999
	   ELSEIF ( NUMPTS.GT.14 ) THEN
	      CALL LSL_PUTMSG(                    !ACC region POL, too 
     &	         DFAD2I__ACCTOOMNY, POL, NUMPTS ) ! many points NUMPTS
	      GOTO 9999
	   ENDIF
C
C	 and at last we may read in the points
C
	   DO 200 CNR = 1, NUMPTS	! loop for all corners
	      DO 250 XY = 2,1,-1	! and for x,y in each corner
C
	         IF ( .NOT.RDFANG( XYDDD(XY), TENTH, HEMI, IANGLE ) ) THEN
		    CALL LSL_PUTMSG(
     &		       DFAD2I__ACCANGERR, POL, CNR, XY) !ACC region POL, 
		    GOTO 9999                  ! error in angle CNR, XY
		 ENDIF
C
		 STBUF( XY, CNR ) = IANGLE - BASE(XY)
C
	         IF (DIAG_FULL) THEN
	            CALL EXPAND('Angle %^W%N(%^W%N) of region %^W%N',
     &					CNR,XY,		 POL )
	            CALL OUTANG( IANGLE )
		    CALL WRITEF(' offset %I8',INT(STBUF(XY,CNR)))
	         ENDIF
C
250	      CONTINUE			! next x,y
200	   CONTINUE			! next corner of polygon
C
C check position of decode pointer
C
	   CALL DCPSAV( DCP2 )
	   IF ( (DCP2-DCPWAS) .NE. 18+NUMPTS*19 ) THEN
	      CALL LSL_PUTMSG(
     &	         DFAD2I__ACCHNOERR, POL ) !ACC region POL, incorrect 
	      GOTO 9999                    ! no. of chars read
	   ENDIF
C
C	 so by here we have an STBUF with NUMPTS points in it
C	 Let us create a feature to define this accuracy subregion
C
C	 we already know what feature number we are
C
	   ZERO = 0			! just in case
	   CALL IFFNF( POL, ZERO )	! FSN is polygon number
C
C	 and set feature code as specfied in MCE/2220/3
C
	   ISTAT(1) = 301
	   CALL IFFFS( ISTAT )
C
 	   CALL IFFTH( ITH )
C
C	 next we must have the accuracy AC
C
	   CALL EXPAND('absh%^W%I4 absv%I4 relh%I4 relv%I4',
     &			ABSHAC,      0, RELHAC,      0  )
C
	   CALL IFFAC( FADACC, 0, EXPBUF )
	   IF (DIAG_FULL) CALL TTWLIN
C
C	 and we may now actually output our points
C	 but wait - let us ensure that the feature is closed, since
C	 that is nicer to deal with...
C
	   IF ( INT(STBUF(1,1)).NE.INT(STBUF(1,NUMPTS)) .OR.
     &		INT(STBUF(2,1)).NE.INT(STBUF(2,NUMPTS)) ) THEN
	      NUMPTS = NUMPTS+1			! need another point
	      STBUF(1,NUMPTS) = STBUF(1,1)	! close the region
	      STBUF(2,NUMPTS) = STBUF(2,1)
	   ENDIF
C
	   ZERO = 0
	   CALL IFFST( STBUF, NUMPTS, ZERO )
C
C	 and we are now free to close the feature
C
	   CALL IFFEF
C
C	 and then work our way to the end of this subregion...
C
	   DCPWAS = DCPWAS + LENGTH
	   CALL DCPSET( DCPWAS )
C
500	CONTINUE			! next polygon
C
C
C and that is all the data we need to read from this buffer, so
C we can safely return with our job finished
C
	RETURN
C
C error return - just complain & ignore the rest
C
9999	CALL DCPSAV( DCPWAS )
	CALL LSL_PUTMSG(DFAD2I__ACCHARERR, DCPWAS) !ACC region reading- 
C                                            ! error around char DCPWAS
        CALL LSL_PUTMSG(DFAD2I__ACCABANDON) !abandon ACC region reading 
	RETURN
C
	END

