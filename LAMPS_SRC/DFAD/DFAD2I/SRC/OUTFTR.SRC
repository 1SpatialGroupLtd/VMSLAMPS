	SUBROUTINE OUTFTR
C
***	IDENT	10MA90
***	MODULE	OUTFTR
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C MOD feature codes set to 100+TYPE		S Hancock  22-Feb-1985
C MOD Output of thickness entry removed         D R Catlow 03-Jun-1988
C MOD set the TH entry to 0 			P Pan      10-May-1990
C     and switch on/off the SYMBOL bit of ISTAT
C
C Author TJ Ibbs, 11 March 1983
C
C This routine is called to output a completed feature to the
C IFF file (which we assume is open!)
C
        IMPLICIT NONE
C
	PARAMETER STMAX = 190	! maximum size of an ST entry
C common blocks
C
***     PARAMETER/HERE:DFAD2IMSG/
***	COMMON/HERE:SCRIPT/	! for TOTFTR
***	COMMON/HERE:DESCR/	! for feature storage
***	COMMON/HERE:STATE/	! for FTRONE, LPOSNO
***	COMMON/LSL$CMNIFF:IFFHAN/	! for LPOSH
C
C workspace...
C
	INTEGER*2	FSN		! feature serial number
	INTEGER*2	ISTAT(4)	! for FS
	INTEGER*2	ZERO		! nought
	INTEGER*2	IENDS		! start of feature?
	INTEGER*2	TODO		! how many points to output
	INTEGER*2	DONE		! how many points output so far
	INTEGER*2	ITH		! line thinkness
	INTEGER*4	I		! loop counter
C
C
	ITH = 0				! set thinkness to 0
	ZERO = 0			! set zero up
C
C If this is the first feature of the map, then it specifies the
C range of the map (the first feature is the whole manuscript).
C In that case, we must output header information to the IFF file
C
	IF ( FTRONE ) THEN		! just read first feature
C
C
C	 thus we have in hand the first feature of the manuscript
C	 firstly, it should have FAC 1 (!)
C	 secondly, if it is not a closed feature (the Americans don't
C	 always close it) then we must add a closing point
C
	   IF ( FAC.NE.1 ) THEN
	      CALL LSL_PUTMSG(DFAD2I__FACNUMERR, FAC) !first feature is not 
C                                                     !FAC1 but FAC
	      CALL LSL_PUTMSG(DFAD2I__CONTMANUS)      !continuing with this mss
	   ENDIF
C
C	 check that we have five points, ie a closed feature
C
	   IF ( STPTR.NE.5 ) THEN		! can't be closed
	      CALL LSL_PUTMSG(DFAD2I__STPTRERR, STPTR) !first feature has
	      IF ( STPTR.NE.4 ) THEN                   ! STPTR points
	         CALL LSL_PUTMSG(DFAD2I__CONTINUE)     !attempting to continue
	      ELSE
	         CALL WRITEF('    Closing first feature')
	         STBUF(1,5) = STBUF(1,1)
	         STBUF(2,5) = STBUF(2,1)
	         STPTR      = 5		! fifth closing point
	      ENDIF
	   ENDIF
C
C	 output the map header, etc, and layer 0, if not already done
C
	   IF (.NOT.DONHDR) CALL OUTHDR	! output start of IFF file
C
	   FTRONE = .FALSE.		! end of feature one
C
	ENDIF
C
C now, if we have changed the type of feature, then we must also
C start a new overlay...
C
C We have already created layer 0, and we want layer 1 next. In general
C we would expect area features after layer 0, so we want them to be in
C layer 1. Area features have FTYPE 2, so the value 3-FTYPE would seem
C a simple one to use (feature types 0-2 map to layers 3-1)
C
C We must remember where the NO is, so that when we output the
C corresponding EO we can go back and insert a pointer to that EO
C
	IF ( FTYPE.NE.LSTTYP ) THEN	! start a new overlay
	   CALL EOPTR			! end the last one
	   LAYER  = 3-FTYPE		! choose a layer - 1-3
	   LPOSNO = LPOSE		! remember where NO will go
	   CALL IFFNO( LAYER, ZERO, 0 )	! and start it
	ENDIF
C
C next, let us open the new feature...
C since we don't trust IFFLIB, we shall reset ZERO as well
C
	FSN  = FAC			! use FAC as FSN
	ZERO = 0			! just in case
	CALL IFFNF( FAC, ZERO )
C
C and then set its FS...
C feature codes are:
C			100 - point (FTYPE 0)
C			101 - line  (FTYPE 1)
C			102 - area  (FTYPE 2)
C
	IF(HAD_FC)THEN
	  ISTAT(1) = FID + ((FTYPE+1) * 1000)
	ELSE
	  ISTAT(1) = 100+FTYPE
	ENDIF
C
C if FTYPE is point, then switch on the SYMBOL bit 
C on the 3rd word of ISTAT 
C
 	IF ( FTYPE.EQ.0 ) ISTAT(3) = ISTAT(3).OR.'4000'X
C
	CALL IFFFS( ISTAT )
C
 	CALL IFFTH( ITH )
C
C and now we must output its AC
C
	CALL OUTAC
C
C and output the points in it...
C we output them in chunks of STMAX maximum
C
	IENDS = 0			! start of feature
	TODO = STPTR			! have STPTR points to output
	DONE = 0			! have output none so far
C
C effectively a WHILE loop -
C
C	 while DONE < STPTR
C	 do    output up to STMAX more points
C
100	IF ( DONE.EQ.STPTR ) GOTO 200	! finished, output all
	TODO = STPTR-DONE		! how many left to do?
	IF ( TODO.GT.STMAX ) TODO = STMAX ! STMAX at a time
C
	CALL IFFST( STBUF(1,DONE+1), TODO, IENDS )
C
	IENDS = 1			! carry on with ftr
	DONE = DONE+TODO		! done so many now
	GOTO 100			! more to do?
C
200	CONTINUE			! escape from the repetition
C
C and now close the feature
C
	CALL IFFEF
C
C and count it
C
	TOTFTR = TOTFTR+1
C
C and if it went external, count that too
C
	IF (EXTERN) EXTFTR = EXTFTR+1
C
C
	RETURN
	END
