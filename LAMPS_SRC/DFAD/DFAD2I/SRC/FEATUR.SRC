C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-03-16 18:45:14.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE FEATUR
C
***	IDENT	16MR88
***	MODULE	FEATUR
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs,  3 March 1983
C
C this is to read in a feature block from /DFAD/, determine what sort
C of feature it represents and deal with it
C
C this routine will have been called because we have read in a new
C block from magtape. It may (typically) have to deal with:
C
C	 header, points
C
C	 header, points, continued on next block
C
C	 points, continued on next block
C
C	 points, header, points, continued on next block
C
C and so on
C
C
C common blocks
C
***	COMMON/LSL$CMNDLMS:DFAD/	! for 1/2 word buffer
***	COMMON/HERE:DESCR/	! for feature storage
***	COMMON/HERE:STATE/	! state we are in (in a feature?)
C
C functions called
C
	INTEGER*4	LIB$EXTZV	! extract a zero extended field
C
C workspace...
C
	INTEGER*4	TEMP		! temporary storage
	INTEGER*4	I		! loop counter
C
C if we run out of buffer to read from at any stage then we return
C up a level (with the appropriate flags set in /STATE/) to read a
C new block in, and be called again...
C
C if we are starting a new feature (ie not IN a FeaTuRe) then we must
C read in the feature header (the first two words of a feature)
C
100	IF ( .NOT.INFTR ) THEN		! if starting new feature,
	   LSTTYP = FTYPE		! remember the type of the last
	   CALL FTRHD1			! then read the first hdr word
	   INFTR  = .TRUE.		! in a feature and so we are
	   INFHDR = .TRUE.		! in the feature header now
	   IF ( DFAPTR.GT.DFALEN ) RETURN
	ENDIF
C
	IF ( INFHDR ) THEN		! if in the feature header
	   CALL FTRHD2			! then read the second word
	   INFHDR = .FALSE.		! now no longer in header
	   INFTR  = .TRUE.		! but still in a feature
	   EXTERN = .FALSE.		! this feature (so far) doesn't
C					! leave the map
	   IF ( DFAPTR.GT.DFALEN ) RETURN
	ENDIF
C
C the feature types are:
C
C	0 => point feature	)
C	1 => line feature	) - worth plotting
C	2 => area feature	)
C	3 => pad feature	  - ignore
C
C Thus if FTYPE is 3, we whould skip reading it, and ignore the
C rest of this block
C
	IF ( FTYPE.EQ.3 ) THEN
	   INFTR  = .FALSE.		! no longer in a feature
	   INFHDR = .FALSE.		! nor in a header
	   RETURN			! return at once
	ENDIF
C
C so we must have something (at least one word) to read...
C we go into a loop to read the remaining points we need
C
	DO 500 I = STPTR+1, STLEN
	   CALL POINT				! read the next point
	   IF ( DFAPTR.GT.DFALEN ) RETURN	! any more in buffer?
500	CONTINUE
C
C so by here we have read all the points we wish - let us
C output the entire feature to the IFF file...
C
	CALL OUTFTR
C
C and note that we no longer have a feature...
C
	INFTR  = .FALSE.		! not in a feature
	INFHDR = .FALSE.		! can't be in a feature header!
C
C should we return for a new block, or continue with this one?
C
	IF ( DFAPTR.GT.DFALEN ) THEN
	   RETURN			! get new block
	ELSE
	   GOTO 100			! or carry on
	ENDIF
C
	END
