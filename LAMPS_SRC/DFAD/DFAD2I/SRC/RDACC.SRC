C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1995-09-22 17:52:04.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION RDACC
C
***	IDENT	22SE95
***	MODULE	RDACC
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 22 March 1983
C Modified CC Brunt, 8 November 1983
C
C This function reads the ACC record which it expects to find in
C BYTBUF
C
C It returns TRUE if it fails, or FALSE if all goes well
C
	IMPLICIT NONE
C
***     PARAMETER/HERE:DFAD2IMSG/
***	COMMON/HERE:PARAMS/	! for DIAG_FULL
***	COMMON/LSL$CMNDLMS:DFAD/! for BYTBUF, BYTLEN
***	COMMON/LSL$CMNIFF:MHMCE/! MCE map header
C
C functions called
C
	LOGICAL		RDINT	! read an integer(*2)
	INTEGER		RDTEXT	! read a block of text
C
C workspace
C
	INTEGER*2	DCP1,DCP2	! decode pointer saves
	INTEGER*2	PTR		! locally saved pointer
	BYTE		ACC(3)		! for holding byte chars 'ACC'
	BYTE		NA(4)		! for holding byte chars 'NA'
	BYTE		IGNORE(50)	! data to ignore
	CHARACTER*50	WHERE		! for where an error occurred
	INTEGER*2	SUBREG		! number of accuracy subregions
C
	INTEGER*2	NUM
	INTEGER		I
C
C
C be pessimistic initially
C
	RDACC = .TRUE.
C
C
C set up the input buffer as our current text buffer
C
	CALL SETAUX( BYTBUF, BYTCNT )
	CALL DCPSAV( DCP1 )
C
C the first three characters should be ACC - let us check that first
C of all...
C
	IF ( .NOT.RDTEXT( ACC, 3 ) ) THEN
	   CALL LSL_PUTMSG(DFAD2I__ACCSENTERR) !unable to read ACC sentinel
	   RETURN
	ELSEIF ( ACC(1).NE.'A' .OR. ACC(2).NE.'C' .OR.
     &		 ACC(3).NE.'C' ) THEN
	   CALL LSL_PUTMSG(
     &		DFAD2I__ACCUNEXPC, ACC(1) ) !unexp char at start of ACC block
	   RETURN
	ENDIF
C
C so we have our block ID - we can carry on with the rest now.
C
C first we have the absolute horizontal accuracy over the whole map -
C the worst accuracy from any part of the map
C
	WHERE = 'Absolute horizontal accuracy'
	CALL DCPSAV(PTR)
	CALL SETWIN( , 4 )
	IF ( RDINT( NUM ) ) THEN
	   CALL DCPSET(PTR)
	   CALL SETWIN( , 4 )
	   I = RDTEXT(NA,4)
	   IF ((NA(1).EQ.'N').AND.(NA(2).EQ.'A')) THEN
	      NUM = -1
	      CALL SETWIN( , )
	   ELSE
C unable to read field in ACC block; outputting zero
	      CALL LSL_PUTMSG(
     &	         DFAD2I__ACCBLKERR, WHERE )
	      CALL LSL_PUTMSG(DFAD2I__ACCPUT0)
C
C If there is a read error assume value to be zero
C
	      NUM = 0
	      CALL SETWIN(PTR+4,)
	   ENDIF
	ELSE 
	   CALL SETWIN( , )
	ENDIF
C
C
	MHAHAC = NUM
	IF (DIAG_FULL) CALL WRITEF('%S %N',WHERE,MHAHAC)
C
	WHERE = 'first blank'
	CALL DCPSAV(PTR)
	CALL SETWIN( , 4 )
	IF ( .NOT.RDTEXT( IGNORE, 4) ) THEN 
C unable to read field in ACC block; 
	   CALL LSL_PUTMSG(
     &	      DFAD2I__ACCBLKERR, WHERE )
	   CALL SETWIN(PTR+4,)
	ENDIF
C
	WHERE = 'Relative horizontal accuracy'
	CALL SETWIN( , 4 )
	IF ( RDINT( NUM ) ) THEN
	   CALL DCPSET(PTR)
	   CALL SETWIN( , 4 )
	   I = RDTEXT(NA,4)
	   IF ((NA(1).EQ.'N').AND.(NA(2).EQ.'A')) THEN
	      NUM = -1
	      CALL SETWIN( , )
	   ELSE
C unable to read field in ACC block; outputting zero
	      CALL LSL_PUTMSG(
     &	         DFAD2I__ACCBLKERR, WHERE )
	      CALL LSL_PUTMSG(DFAD2I__ACCPUT0)
C
C If there is a read error assume value to be zero
C
	      NUM = 0
	      CALL SETWIN(PTR+4,)
	   ENDIF
	ENDIF
C
	MHRHAC = NUM
	IF (DIAG_FULL) CALL WRITEF('%S %N',WHERE,MHRHAC)
C
	WHERE = 'second blank'
	CALL DCPSAV(PTR)
	CALL SETWIN( , 4 )
	IF ( .NOT.RDTEXT( IGNORE, 4 ) ) THEN
C unable to read field in ACC block; 
	   CALL LSL_PUTMSG(
     &	      DFAD2I__ACCBLKERR, WHERE )
C
C If there is a read error assume value to be zero
C
	   CALL SETWIN(PTR+4,)
	ENDIF
C
	WHERE = 'Vertical heighting accuracy'
	CALL DCPSAV(PTR)
	CALL SETWIN( , 4 )
	IF ( RDINT( NUM ) ) THEN
	   CALL DCPSET(PTR)
	   CALL SETWIN( , 4 )
	   I = RDTEXT(NA,4)
	   IF ((NA(1).EQ.'N').AND.(NA(2).EQ.'A')) THEN
	      NUM = -1
	      CALL SETWIN( , )
	   ELSE
C
C unable to read field in ACC block; outputting zero
C
	      CALL LSL_PUTMSG(
     &	         DFAD2I__ACCBLKERR, WHERE )
	      CALL LSL_PUTMSG(DFAD2I__ACCPUT0)
C
C If there is a read error assume value to be zero
C
	      NUM = 0
	      CALL SETWIN(PTR+4,)
	   ENDIF
	ELSE
	   CALL SETWIN( , )
	ENDIF
C
	MHVHAC = NUM
	IF (DIAG_FULL) CALL WRITEF('%S %N',WHERE,MHVHAC)
C
C the next 32 characters are reserved for future use
C
	WHERE = 'Reserved for additional accuracy values'
	CALL DCPSAV(PTR)
	IF ( .NOT.RDTEXT( IGNORE, 32 ) ) THEN
C unable to read field in ACC block; 
	   CALL LSL_PUTMSG(
     &        DFAD2I__ACCBLKERR, WHERE )
C
	   CALL SETWIN(PTR+32,)
	ENDIF
C
C we must now find out how many accuracy subregions we require to read
C in (to output into layer zero)
C
	WHERE = 'Number of accuracy subregions'
	CALL DCPSAV(PTR)
C
	CALL SETWIN( , 2 )			! only 2 digits
C
	IF ( RDINT( SUBREG ) ) THEN
C
C unable to read field in ACC block; outputting zero
C
	   CALL LSL_PUTMSG(
     &	      DFAD2I__ACCBLKERR, WHERE )
  	   CALL LSL_PUTMSG(DFAD2I__ACCPUT0)
C
C If there is a read error assume value to be zero
C
	   SUBREG = 0
	   CALL SETWIN(PTR+2,)
	ENDIF
C
	IF ( SUBREG.GT.9 ) THEN
C                                !value SUBREG too large for ACC
	   CALL LSL_PUTMSG(           
     &		   DFAD2I__ACCLARGE, SUBREG, WHERE )
	   RETURN
C
	ENDIF
C
	CALL SETWIN( , )
C
	IF (DIAG_FULL) CALL WRITEF('%S %^W%N',WHERE,SUBREG)
C
C check that decode pointer is OK so far
C
	CALL DCPSAV( DCP2 )
	IF( DCP2-DCP1 .NE. 57 ) THEN
	   CALL LSL_PUTMSG(        !incorrect no of chars read 
     &	      DFAD2I__ACCNUMERR )
	   RETURN
	ENDIF
C
C since we are a change 3 (or greater) tape, we must output the
C header information (map header, etc) now...
C
	CALL OUTHDR
C
C and now we read & create accuracy subregions as appropriate
C
	IF (SUBREG.GT.0) CALL RDPOLY( SUBREG )
C
	IF (DIAG_FULL) CALL WRITEF
C
C and that is all the data we need to read from this buffer, so
C we can safely return with our job finished
C
	RDACC = .FALSE.				! success at last
	RETURN
C
C standard 'failed to read' error return - shouldn't be needed
C
C unable to read field in ACC block; 
99999	CALL LSL_PUTMSG(
     &	   DFAD2I__ACCBLKERR, WHERE )
	RETURN
	END
