C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-05-31 16:10:38.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION GETCOMLIN
C
***	MODULE GETCOMLIN
***	IDENT  31MY88
C	
C	Copyright Laser-scan laboratories Ltd, Cambridge, England.
C
C       Author Jon Barber
C	created 11-March-88
C
C	Description	 
C
	IMPLICIT NONE
C
C
C Command definitions:
	EXTERNAL	DFAD2I_CLD
	INTEGER		DFAD2I_CLD
C
C
C Common blocks:
C
***     PARAMETER/HERE:DFAD2IMSG/
***     PARAMETER/LSL$CMNLSL:LSLLIBMSG/ 
***	COMMON/LSL$CMNLSL:TXTC/
***     COMMON/LSL$CMNLSL:CLD/ 
***	COMMON/HERE:IFFILE/
***	COMMON/HERE:STATE/
***	COMMON/HERE:PARAMS/        
***     COMMON/HERE:DESCR/
***	COMMON/HERE:SCRIPT/
C
C Functions:
C
	INTEGER*4	DCL_CML
	INTEGER*4	DCL_STARTUP
	INTEGER*4	DCL_QUAL
	INTEGER*4	DCL_INT
	INTEGER*4	DCL_FILE
	INTEGER*4       DCL_STR
C
C Longword:
C
	INTEGER		I		! loop variable
	INTEGER		FILLEN		! temp variable
	LOGICAL		ABSENT
        LOGICAL         LOCAL           ! for DCL_QUAL
        LOGICAL         LOCNEG          ! for DCL_QUAL 
	LOGICAL		HAD_DIAG	! had diag qualifier
	LOGICAL		HAD_QUAL	! had the requested qualifier
        LOGICAL         DEVICE 		! had a tape device qual
        LOGICAL         LATI		! had latitude qual
        LOGICAL         LONGI		! had long qual
        LOGICAL         MANUS		! had manuscript qual
        LOGICAL         RELS		! had releas qual
        LOGICAL         SECU		! had sec qual
	LOGICAL		NOFILE		! had file-spec
C
C Function:
C
	LOGICAL		RDLALO		! translate latlong to .1 secs	
C
C ......................................................................
C
C Initialise flags
C
        REWIND =.FALSE.
	DEVICE =.FALSE.
	DIAG_FULL =.FALSE.           
	DIAG_BRIEF =.FALSE.
	LATI =.FALSE.
	LONGI =.FALSE.
	MANUS =.FALSE.
	RELS =.FALSE.
	SECU =.FALSE.
        INVAL = .FALSE.
	HAD_FC = .FALSE.
	DUMP = .FALSE.		! *** temporary whilst debugging ***
				! *** should be .FALSE.		 ***
C
C    set up defaults 
C
        TAPEUN = 'MTA0:'
        SECRTY = 0
        RELEAS = 0
        SKIP = .FALSE.      ! read blk by blk unless told not to
        SERNUM = .FALSE.
        SERLAT = .FALSE.
        SERLON = .FALSE.
        SKIPTO = 0          !(n)th map on tape if REWIND specified
C                           !(n)th from current position if not 
C 
C
C Get command line for our command verb DFAD2I. DCL_STARTUP will
C return set to SS$_NORMAL if all is well
C
	GETCOMLIN=DCL_STARTUP('DFAD2I'     !Command Verb
     &	                       ,.FALSE.    !Don't split parameter lists
     &                         ,DFAD2I_CLD !CLD module name
     &                         ,.TRUE.)    !Local error reporting
	IF (.NOT. GETCOMLIN) GOTO 70
C        
C Check for /FC
	GETCOMLIN=DCL_QUAL('FC',HAD_FC,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.GETCOMLIN) GOTO 70
C
C Check for /DEVICE
C
	GETCOMLIN=DCL_QUAL('DEVICE',DEVICE,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.GETCOMLIN) GOTO 70
C
        IF (DEVICE) THEN
           GETCOMLIN = DCL_STR('DEVICE', .TRUE.)
           IF (.NOT.GETCOMLIN) GOTO 70    
           TAPEUN = CARRAY(1)
        ENDIF
C
C    check for /Rewind
C
        GETCOMLIN = DCL_QUAL('REWIND', REWIND, LOCAL, LOCNEG,.TRUE.)
        IF (.NOT.GETCOMLIN) GOTO 70
C
C    get output file-spec
	GETCOMLIN=DCL_FILE('OUTPUT_IFF_FILE_SPEC','LSL$IF:IFF.IFF'
     &              			,NOFILE,.FALSE.,.TRUE.)
	IF (.NOT.GETCOMLIN) GOTO 70
C
C    Transfer the file-spec to our common variable
	FILNAM = FILARY(1)(:FIL_LEN(1))
C
C Check for /DIAGNOSTICS
C
	GETCOMLIN=DCL_QUAL('DIAGNOSTICS', HAD_DIAG, LOCAL, LOCNEG, .TRUE.)
	IF (.NOT.GETCOMLIN) GOTO 70
C
	IF(HAD_DIAG)THEN
	  GETCOMLIN=DCL_QUAL(
     &                  'DIAGNOSTICS.BRIEF'	! qual. name
     &        		,DIAG_BRIEF	! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,.TRUE.)	! set-local error reporting
	  IF(.NOT.GETCOMLIN) GOTO 70
C
	  GETCOMLIN=DCL_QUAL(
     &                  'DIAGNOSTICS.FULL'	! qual. name
     &        		,DIAG_FULL	! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,.TRUE.)	! set-local error reporting
	  IF(.NOT.GETCOMLIN) GOTO 70
C
C	If just diagnostics, then set to diagnostics brief
	  IF(.NOT.(DIAG_BRIEF.OR.DIAG_FULL))DIAG_BRIEF=.TRUE.
	ENDIF
C
C Now /DUMP
C
	GETCOMLIN = DCL_QUAL('DUMP'	! qual. name
     &     	,DUMP          		! returned .T. if qual. found
     &          ,LOCAL 		  	! .T. if qual local to parameter
     &		,LOCNEG   	  	! .T. if qual locally negated
     &          ,.TRUE.)          	! .T.-local error reporting
	IF (.NOT.GETCOMLIN) GOTO 70	! return
C
C Check for /DUMP=filespec
C
	IF (DUMP) THEN    	  
	  GETCOMLIN = DCL_FILE('DUMP'	! label
     &	            ,'DFADDUMP.LIS'	! default filespec
     &	            ,ABSENT		! .T. if absent
     &	            ,.FALSE.      	! don't expect DUMP of files
     &              ,.TRUE.)      	! .T.-local error reporting
C
	  IF (.NOT.GETCOMLIN) GOTO 70	! return
C
	  IF (.NOT.ABSENT) THEN		! File specified
            DUMPFILE = FILARY(1)(1:FIL_LEN(1))
	    DUMPLEN = FIL_LEN(1)
	  ELSE
	    DUMPFILE = 'SYS$OUTPUT'
	    DUMPLEN = 10
	  ENDIF
	ENDIF
C
C Check for /LATITUDE
C
	GETCOMLIN=DCL_QUAL('LATITUDE', LATI, LOCAL, LOCNEG, .TRUE.)
	IF (.NOT.GETCOMLIN) GOTO 70
C
     	IF(LATI) THEN
     	   GETCOMLIN = DCL_STR ('LATITUDE', .TRUE.)
           IF (.NOT.GETCOMLIN) GOTO 70
	   CALL EXPAND('%W%S',TXTBUF,CARRAY(1)(1:STR_LEN(1)))
           IF ( RDLALO (.TRUE.)) THEN 
              INVAL = .TRUE.
              GOTO 70
           ENDIF
        ENDIF
C
C Check for /LONGITUDE
C
	GETCOMLIN=DCL_QUAL('LONGITUDE',LONGI,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.GETCOMLIN) GOTO 70
C
        IF(LONGI) THEN
           GETCOMLIN = DCL_STR ('LONGITUDE', .TRUE.)
           IF (.NOT.GETCOMLIN) GOTO 70
	   CALL EXPAND('%W%S',TXTBUF,CARRAY(1)(1:STR_LEN(1)))
           IF ( RDLALO (.FALSE.)) THEN
              INVAL = .TRUE.
              GOTO 70
           ENDIF
        ENDIF
C
C   check for /Manuscript !SKIPTO (n)th map on tape, 
C                         ! defaults to next map
C
 	GETCOMLIN=DCL_QUAL('MANUSCRIPT',MANUS,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.GETCOMLIN) GOTO 70
C
        IF (MANUS) THEN
           GETCOMLIN = DCL_INT('MANUSCRIPT', .TRUE.)
           IF (.NOT.GETCOMLIN) GOTO 70
           SKIPTO = IARRAY(1)
           SKIP = .TRUE.
           SERNUM = .TRUE.
           SERLAT = .FALSE.
           SERLON = .FALSE.
        ELSE
           SERNUM = .FALSE. 
        ENDIF
C
C
C check for /Releasability
C
	GETCOMLIN=DCL_QUAL('RELEASABILITY',RELS,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.GETCOMLIN) GOTO 70
C
        IF (RELS) THEN
           GETCOMLIN = DCL_INT('RELEASABILITY', .TRUE.)
           IF (.NOT.GETCOMLIN) GOTO 70  
           RELEAS = IARRAY(1)
        ENDIF
C
        IF(RELEAS.LT.0 .OR. RELEAS.GT.99)THEN
           CALL LSL_PUTMSG(                !releasability out of range
     &          DFAD2I__RELEASERR, RELEAS) !   must be 0 to 99
           INVAL = .TRUE.
           GOTO 70
        ENDIF
C
C  check for /Security     
C
C
	GETCOMLIN=DCL_QUAL('SECURITY',SECU,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.GETCOMLIN) GOTO 70
C
        IF (SECU) THEN
           GETCOMLIN = DCL_INT('SECURITY', .TRUE.)
           IF (.NOT.GETCOMLIN) GOTO 70
           SECRTY = IARRAY(1)
        ENDIF
C
        IF(SECRTY.LT.0 .OR. SECRTY.GT.99)THEN
           CALL LSL_PUTMSG(                !security out of range
     &          DFAD2I__SECURERR, SECRTY)  !   must be 0 to 99
           INVAL = .TRUE.
           GOTO 70
        ENDIF
C
C
70      IF (GETCOMLIN) THEN
           IF (.NOT.INVAL) GETCOMLIN = LSL__NORMAL
        ENDIF
C
	RETURN
	END
