C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-03-16 17:46:50.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE FTRHD1
C
***	IDENT	16MR88
***	MODULE	FTRHD1
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs,  4 March 1983
C Modified CC Brunt,	24 August 1983
C
	IMPLICIT NONE
C
C This subroutine reads in the first word of a new feature header
C
C Features have the following format:
C
C Word	 Bits	#bits	Contents		Range
C
C 1	 1-14	14	FAC			1-9999
C	15-16	2	Feature TYPE		0-3
C	17-26	10	predominant HEIGHT	+/- 511
C	27-36	10	Feature IDentification	1-980
C
C 2	 1- 5	5	SURFAce Material categ	1-13
C	 6-36		varies with FTYPE...
C
C for point feature
C 2	 6-11	6	ORIENTation		0-31, 63
C	12-18	7	LENGTH/radius		0-127
C	19-25	7	WIDTH			0-127
C	26-36	11	number of coordinates	0-2047
C
C for linear feature
C 2	 6- 7	2	DIRECTivity		1-3
C	 8-14	7	WIDTH			0-127
C	15-23		not used
C	24-36	13	number of coordinates	0-8191
C
C for areal features
C 2	 6- 9	4	DENSiTY of features	0-13
C	10-13	4	% TREE coverage		0-10
C	14-17	4	% ROOF coverage		0-10
C	18-23		not used
C	24-36	13	number of coordinates	0-8191
C
C NOTE that in the table above, bit positions are in Univac convention
C ie bit 1 is the most significant ('rightmost') bit, and counting is
C thus in the opposite direction to on the VAX
C
C NOTE that in the code below, bit positions are in VAX convention -
C ie starting at 0, not at 1 - and that the Univac words are split into
C 2 1/2 words (the low half is always odd numbered index, the high half
C has and index one greater & thus even).
C
C We only read the first word of the thing...
C
C common blocks...
C
***	COMMON/LSL$CMNDLMS:DFAD/	! buffer of 1/2 words
***	COMMON/HERE:DESCR/	! to hold feature description
***	COMMON/HERE:STATE/	! what state we're in (feature header)
C
C functions used...
C
	INTEGER*4	LIB$EXTZV	! extract, no sign extend
	LOGICAL		RDMAG		! read block off tape
C
C workspace...
C
	INTEGER*4	ONE		! offset of words
	INTEGER*4	TEMP1, TEMP2	! temporary storage
	INTEGER*4	SIGN		! set for negative
C
C the first word of a feature header (ie of the first 2 words of a
C feature) is the same format for all features...
C
C sort out the offset we shall work at - ONE points at the
C low 1/2 word of the word
C
	ONE = DFAPTR			! the first word we look at
C
C first we have the FAC (Feature Analysis Code)
C
	FAC    = LIB$EXTZV( 4, 14, DFABUF(ONE+1) )
C
C and next we have the Feature Type in bits 15-16 (really 14-15)
C
	FTYPE  = LIB$EXTZV( 2, 2, DFABUF(ONE+1) )
C
C and then the predominant height of the feature, in bits 17-26
C (ie really bits 16-17 of the low 1/2 word, 'plus' the first 8 bits
C of the top 1/2 word). This value can range from -511 to +511 on
C the tape, in 'signed magnitude' form, and is in units of 2 metres.
C Thus we must patch together the two parts of the value, convert from
C 1s complement to 2s complement if it is negative (sign bit set), and
C finally multiply by 2 to get the value in metres.
C
	SIGN   = LIB$EXTZV(  1, 1, DFABUF(ONE+1) )	! the sign
	TEMP1  = LIB$EXTZV(  0, 1, DFABUF(ONE+1) )	! high part
	TEMP2  = LIB$EXTZV( 10, 8, DFABUF(ONE) )	! low part
C
C patch the magnitude together...
C
	HEIGHT = TEMP2 .OR. ISHFT(TEMP1, 8)
C
C and check the sign...
C
	IF (SIGN.NE.0) HEIGHT = -HEIGHT
C
C convert to proper metres
C
	HEIGHT = HEIGHT*2
C
C Now we extract the FID (Feature IDentification code) from bits
C 27-36 (really bits 8-17 of the top 1/2 word)
C
	FID    = LIB$EXTZV( 0, 10, DFABUF(ONE) )
C
C so we have read the first word - increment the pointer
C
	DFAPTR = DFAPTR+2
C
	RETURN
	END
