	SUBROUTINE FTRHD2
C
***	IDENT	18MY88
***	MODULE	FTRHD2
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs,  4 March 1983
C
	IMPLICIT NONE
C
C This subroutine reads in the second word of a new feature header
C
C Features have the following format:
C
C Word	 Bits	#bits	Contents		Range
C
C 1	 1-14	14	FAC			1-9999
C	15-16	2	Feature TYPE		0-3  (pt,line,area,pad)
C	17-26	10	predominant HEIGHT	+/- 511
C	27-36	10	Feature IDentification	1-980
C
C 2	 1- 5	5	SURFAce Material categ	1-13
C	 6-36		varies with FTYPE...
C
C for point feature
C 2	 6-11	6	ORIENTation		0-31, 63
C	12-18	7	LENGTH/radius		0-127
C	19-25	7	WIDTH			0-127
C	26-36	11	number of coordinates	0-2047
C
C for linear feature
C 2	 6- 7	2	DIRECTivity		1-3
C	 8-14	7	WIDTH			0-127
C	15-23		not used
C	24-36	13	number of coordinates	0-8191
C
C for areal features
C 2	 6- 9	4	DENSiTY of features	0-13
C	10-13	4	% TREE coverage		0-10
C	14-17	4	% ROOF coverage		0-10
C	18-23		not used
C	24-36	13	number of coordinates	0-8191
C
C NOTE that in the table above, bit positions are in Univac convention
C ie bit 1 is the most significant ('rightmost') bit, and counting is
C thus in the opposite direction to on the VAX
C
C NOTE that in the code below, bit positions are in VAX convention -
C ie starting at 0, not at 1 - and that the Univac words are split into
C 2 1/2 words (the low half is always odd numbered index, the high half
C has and index one greater & thus even).
C
C We are, of course, dealing with the 2nd word only
C
C common blocks...
C
***	COMMON/LSL$CMNDLMS:DFAD/	! buffer of 1/2 words
***	COMMON/HERE:DESCR/	! to hold feature description
***	COMMON/HERE:STATE/	! what state we're in (feature header)
***	COMMON/HERE:PARAMS/	! for DIAG setting
C
C functions used...
C
	INTEGER*4	LIB$EXTZV	! extract, no sign extend
	LOGICAL		RDMAG		! read block off tape
C
C workspace...
C
	INTEGER*4	TWO		! offset of words
	INTEGER*4	SIGN		! set for negative
C
C
C TWO points to the second word of the header...
C
	TWO = DFAPTR			! next word to deal with
C
C and we have the final common thing, which is the Surface Material
C Category code number, occupying bits 1-5 of the high 1/2 word
C
	SURFAM = LIB$EXTZV( 13, 5, DFABUF(TWO+1) )
C
C the remaining things depend on what sort of feature we have in hand -
C let's dive in and deceive the eye with the quickness of our hands...
C
	IF ( FTYPE.EQ.0 ) THEN			! point feature
	   ORIENT = LIB$EXTZV( 7, 6, DFABUF(TWO+1) )	! extract angle
	   OMNI   = ORIENT.EQ.63
	   LENGTH = LIB$EXTZV(  0, 7, DFABUF(TWO+1))	! symbol length
	   WIDTH  = LIB$EXTZV( 11, 7, DFABUF(TWO))	! symbol width
	   STLEN  = LIB$EXTZV(  0,11, DFABUF(TWO))	! number of pts
	ELSE
	   IF ( FTYPE.EQ.1 ) THEN		! linear feature
	      DIRECT = LIB$EXTZV( 11, 2, DFABUF(TWO+1))	! directivity
	      WIDTH  = LIB$EXTZV(  4, 7, DFABUF(TWO+1))	! width
	   ELSE					! assume area feature
	      DENSTY = LIB$EXTZV( 9, 4, DFABUF(TWO+1))	! ftrs per area
	      TREE   = LIB$EXTZV( 5, 4, DFABUF(TWO+1))	! tree coverage
	      ROOF   = LIB$EXTZV( 1,4, DFABUF(TWO+1))	! roof coverage
	   ENDIF
	   STLEN  = LIB$EXTZV(  0,13, DFABUF(TWO))	! number of pts
	ENDIF
C
C and that should leave us with a completed feature header - we now
C only need to read STLEN points into STBUF
C
	DFAPTR = DFAPTR+2	! increment to next word to be read
	INFTR  = .TRUE.		! and we are now in a feature
	STPTR = 0		! but have read no points yet
C
C and possibly do diagnostics
C
C
	IF ( DIAG_FULL ) CALL PRFHDR
C
C
C so return with the header read - ready to get points in now
C
	RETURN
	END
