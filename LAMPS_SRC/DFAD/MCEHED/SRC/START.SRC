	LOGICAL FUNCTION START( IFFLUN, RDONLY )
C
***	IDENT	17JN88
***	MODULE	START
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 25 May 1983
C
CMOD	Modified to use LSLLIB.			JMB	29 Feb 1988
C
C
C This reads in the initial command line, to obtain the file to
C read/edit, and actually opens that file
C
C As traditional, we return FALSE if it all failed, and TRUE if
C the program may carry on
C
	IMPLICIT NONE
C
C passed
C
	INTEGER*2	IFFLUN	! lun to open file on
	LOGICAL		RDONLY	! true if file opened for read only
C
C Functions called:
	INTEGER*4	DCL_FILE   ! reads & parses file title from DCL 
C			           ! command line
	INTEGER*4	DCL_QUAL   ! looks for specified qualifier
        INTEGER*4       DCL_STARTUP! looks for command line
        INTEGER*4       DCL_CML	   ! gets command line
	INTEGER*2	DCL_REAL   ! get real from command qual
C
C common blocks
C
	INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'	! IFF library common, error 
					! returns
	INCLUDE 'LSL$CMNLSL:CLD.CMN'	! Command Line Def common block
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR' ! LSL message codes
C
C Command Language Definitions:
	EXTERNAL	MCEHED_CLD
C
C and we have as workspace
C
	LOGICAL		ABSENT	! flag absent param/qual
	LOGICAL		LOCAL   ! .T. if qual. is local
	LOGICAL		LOCNEG  ! set .T. if qual. locally negated
        LOGICAL		LOCERR  ! .T. - local error reporting
	LOGICAL		OK	! function return codes
	CHARACTER*128	IFFNAM	! IFF file name
	INTEGER*2	IFFLEN	! IFF file name length
	CHARACTER*128	ACTNAM	! actual IFF file name
	INTEGER*4	ACTLEN	! and the length of the name
C
C...................................................................
C
C Initialise things
C
	LOCERR =.TRUE.		 ! local error reporting
	LOCAL  =.FALSE.          ! set .T. if qual. is local
        LOCNEG =.FALSE.          ! set .T. if qual. locally negated
C
	START  = .TRUE.		! assume we will fail
	RDONLY = .FALSE.	! and that we want to edit
C
C so we start off by reading our command line (prompting for it if
C necessary)
C
C
C....................................................................
C
C Get command line for verb MCEHED. DCL_STARTUP will return set to
C SS$_NORMAL if all well.
C
	OK=DCL_STARTUP('MCEHED'    	! command verb
     &      		,.FALSE.		! don't split par lists
     &      		,MCEHED_CLD		! CLD module name
     &      		,LOCERR)        	! local error reporting
        IF (.NOT.OK) THEN
	   CALL WRITEF('*** ERROR *** Reading command line')
	   GOTO 10 		! return
	ENDIF
C
C....................................................................
C
C Check for qualifier
C
C
C Check for /READONLY
C
	OK = DCL_QUAL('READONLY'! qual. name
     &     	,RDONLY			! returned .T. if qual. found
     &          ,LOCAL		  	! .T. if qual local to parameter
     &		,LOCNEG		  	! .T. if qual locally negated
     &          ,LOCERR)		! .T.-local error reporting
	IF (.NOT.OK) THEN
	   CALL WRITEF ('*** ERROR *** Reading command qualifiers')
	   GOTO 10	! return
	ENDIF
C
C Get input IFF file-name
C
	OK = DCL_FILE('IN_FILESPEC'	!parameter label
     &		,'LSL$IF:IFF.IFF;0'	! default file-name
     &		,ABSENT  	  	! .T. if no file-name
     &		,.FALSE.		! don't expect list of files
     &          ,LOCERR)		! .T.-local error reporting
C
C Transfer file-spec to a local variable
C
	IF (OK) THEN
	   IFFNAM = FILARY(1)(1:FIL_LEN(1))
	   IFFLEN = FIL_LEN(1)
	ELSE
	   CALL WRITEF('*** ERROR *** Reading filename')
	   GOTO 10 			! return
	ENDIF 
C
C
C on reaching here, we may expect to know what file we require,
C so now open it as appropriate...
C
C in the arcane laws of the IFF library, an explicit extension
C (3rd argument) of zero means open for read only.
C
	IF ( RDONLY ) THEN
	   CALL IFFOPN( IFFLUN, IFFNAM, 0 )
	ELSE
	   CALL IFFOPN( IFFLUN, IFFNAM )
	ENDIF
C
C and check whether that succeeded or not
C
	IF ( IERCD.NE.0 .OR. IERNM.NE.1 ) THEN
	   CALL WRITEF('*** ERROR *** Opening IFF file %S',IFFNAM)
	   GOTO 10		! return
	ENDIF
C
C tell the user what they got
C
	CALL IFFINQ( ACTNAM, ACTLEN )	! find the actual filename
	CALL EXPAND('File %S opened for',ACTNAM(1:ACTLEN))
	IF ( RDONLY ) THEN
	   CALL WRITAP(' reading only')
	ELSE
	   CALL WRITAP(' edit')
	ENDIF
C
C and rewind just for safety
C
	CALL IFFRWD
C
C return with success
C
	START = .FALSE.
C
10	RETURN
C
	END
