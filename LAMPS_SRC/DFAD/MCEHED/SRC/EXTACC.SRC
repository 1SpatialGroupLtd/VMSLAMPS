C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1995-09-28 10:18:22.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION EXTACC( CMD, MIN, MAX, WHERE, LONG )
C
***	IDENT	28SE95
***	MODULE	EXTACC
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author JM Cadogan, 27 September 1995
C
	IMPLICIT NONE
C
C Function adapted from EXTINT. Extracts either an integer or the string 'NA'
C from the current input buffer, prompting if necessary, and will update 
C WHERE if it finds something sensible
C
C It returns TRUE if we update the value, FALSE otherwise
C
C we were passed
C n.b. WHERE may well be an INTEGER*4 or a BYTE
C
	INTEGER*4	CMD	! tells PROMPT which integer this is
	INTEGER*4	MIN	! minimum value allowed
	INTEGER*4	MAX	! maximum value allowed
	BYTE		WHERE(4)! our result goes into here
	LOGICAL		LONG	! is WHERE I*4 or BYTE?
	INTEGER*2	PTR	! locally saved pointer
	BYTE		NA(2)	! for holding byte chars 'NA'
	LOGICAL		HADNA	! TRUE if had 'NA' value
C
C the following functions are used
C
	LOGICAL		RDCHS	! read next significant char
	LOGICAL		PROMPT	! prompt for an argument
	LOGICAL		RDLONG	! read the integer
	LOGICAL		CHKINT	! check it's in range
	LOGICAL		UNSET	! see if they commanded us to unset it
	INTEGER		RDTEXT	! read a block of text
C
C we also need
C
	INTEGER		I	! loop counter
	INTEGER		NBYT	! number of bytes
	BYTE		CHAR	! character read by RDCHS
	LOGICAL		REPROM	! should we reprompt?
	INTEGER*4	NUMBER	! to read the number into
	BYTE		NUMBYT(4)	! byte equivalent
	EQUIVALENCE	( NUMBER, NUMBYT )
C
C assume we fail to do the update
C
	EXTACC = .FALSE.
C
C initially, only prompt if need to
C
	REPROM = .FALSE.
C
C initialise NA
C
	NA(1) = ' '
	NA(2) = ' '
	HADNA = .FALSE.
C
C do we already have an argument?
C
10	IF ( REPROM .OR. RDCHS(CHAR) ) THEN	! no argument, prompt
	   IF ( PROMPT(CMD,.TRUE.) ) RETURN	! no reply
	ELSE
	   CALL BSCH			! else unread the char
	ENDIF
C
C now reprompt on an error
C
	REPROM = .TRUE.
C
C first, let us see if they have asked us to UNSET this variable
C
	IF ( UNSET() ) THEN			! yes, they did
	   IF ( .NOT.RDCHS(CHAR) ) THEN
	      CALL WRITEF('*** ERROR *** '//
     &			'Unexpected "%A1" found after unset command',
     &					CHAR )
	      GOTO 10
	   ELSE
	      CALL WRITEF('Integer field now unset')
	      NUMBER = 0			! equivalent to zero
	   ENDIF
C
	ELSE
C
C	 but no, not UNSET, so let's see if it is a valid integer
C
	   CALL DCPSAV(PTR)
	   IF ( RDLONG(NUMBER) ) THEN		! failed to read it
	      CALL DCPSET(PTR)
	      I = RDTEXT(NA,2)
	      IF (((NA(1).EQ.'N').OR.(NA(1).EQ.'n')).AND.
     &		  ((NA(2).EQ.'A').OR.(NA(2).EQ.'a'))) THEN
		 HADNA = .TRUE.
		 NUMBER = -1
	      ELSE
	         CALL TTWSTR('*** ERROR *** Number or "NA" expected' )
	         GOTO 10
	      ENDIF
	   ENDIF
C
C   is there anything extraneous after the number?
C
	   IF ( .NOT.RDCHS(CHAR) ) THEN
	      CALL WRITEF('*** ERROR *** '//
     &			'Unexpected "%A1" found after number or "NA"',
     &						CHAR )
	      GOTO 10
	   ENDIF
C
C	 but here, it was valid - is it in range? (No need for check if NA)
C
	   IF (.NOT.HADNA) THEN
	      IF ( .NOT.CHKINT(MIN,MAX,NUMBER) ) THEN	! out of range
	         CALL TTWSTR( '*** ERROR *** Number out of range' )
	         GOTO 10
	      ENDIF
	   ENDIF
	ENDIF
C
	IF (LONG) THEN
	   NBYT=4
	ELSE
	   NBYT=1
	ENDIF
C
	DO 20 I=1,NBYT
	   WHERE(I) = NUMBYT(I)
20	CONTINUE
C
	EXTACC = .TRUE.
	RETURN
C
	END
