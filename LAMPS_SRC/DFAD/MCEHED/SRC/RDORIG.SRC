C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-03-03 18:44:28.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION RDORIG( TENSEC )
C
***	IDENT	29FE88
***	MODULE	RDORIG
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 18 March 1983
C Modified CC Brunt, 24 August 1983
C
CMOD	Modified to use LSLLIB.			JMB	29 Feb 1988
C
C
C This function reads a coordinate, generally part of an origin
C definition, which may be of the following forms:
C
C	ddd mm ss.s			eg  20 23 10.1
C					  -120 15 00.0
C
C	ddd mm				eg  20 23
C					   -79 0
C
C The function returns TRUE if it fails to read a legal angle,
C in which case TENSEC is undefined !
C It returns FALSE if it does well, and returns the angle as real
C tenths of a second in TENSEC
C
C We must remember that if there is a negative sign, we have to
C work out the angle and THEN negate it.
C
	IMPLICIT NONE
C
C parameters
C
	PARAMETER	MINUS = '-'
C
C
C passed
C
	REAL		TENSEC		! return angle in
C					! (tenths of a second)
C
C functions called
C
	LOGICAL		RDCHS		! read a character
	LOGICAL		RDINT		! read an int*2 number
	LOGICAL		RDREAL		! read a real number
C
C workspace
C
	BYTE		CHAR		! a character
	INTEGER*2	NUM		! a number
	REAL		RNUM		! a real number
	REAL		ACCUM		! accumulate angle here
	LOGICAL		NEGATE		! true if thing is -ve
C
C be pessimistic
C
	RDORIG = .TRUE.			! assume we will fail
C
	IF ( RDCHS( CHAR ) ) THEN	! nothing left on the line
	   CALL WRITEF('*** ERROR *** No angle found in origin spec')
	   RETURN
	ELSEIF ( CHAR.EQ.MINUS ) THEN	! it's a negative angle
	   NEGATE = .TRUE.		! will need to negate it
	ELSE
	   NEGATE = .FALSE.		! don't negate
	ENDIF
C
	CALL BSCH			! unread the char
C
C so we are now ready to read the number of degrees in the angle...
C
	IF ( RDINT( NUM ) ) THEN	! no number there
	   CALL WRITEF('*** ERROR *** No degree part in origin spec')
	   RETURN
	ELSE
	   IF ( NUM.GT.360 ) THEN	! value too great
	      CALL WRITEF('*** ERROR *** '//
     &			  'Degree field too large in origin spec')
	      RETURN
	   ELSE
C
C if we found minus earlier, then make NUM positive
C
	      IF (NEGATE) NUM = -NUM
	      ACCUM = NUM * 36000.0	! convert to seconds/10
	   ENDIF
	ENDIF
C
C and now read the minutes part
C
	IF ( RDINT( NUM ) ) THEN	! no number there
	   CALL WRITEF('*** ERROR *** No minute part in origin spec')
	   RETURN
	ELSE
	   IF ( NUM.GT.60 ) THEN	! value too great
	      CALL WRITEF('*** ERROR ***'//
     &			  'Minute field too large in origin spec')
	      RETURN
	   ELSEIF ( NUM.LT.0 ) THEN
	      CALL WRITEF('*** ERROR ***'//
     &			  'Minute field may not be negative')
	      RETURN
	   ELSE
	      ACCUM = ACCUM + (NUM*600.0)	! in seconds/10
	   ENDIF
	ENDIF
C
C and lastly, we read the (optional) seconds field, which may
C include fractional seconds
C
	IF ( .NOT.RDREAL( RNUM ) ) THEN
	   IF ( RNUM.GT.60.0 ) THEN	! value too great
	      CALL WRITEF('*** ERROR ***'//
     &			  'Seconds field too large in origin spec')
	      RETURN
	   ELSEIF ( RNUM.LT.0.0 ) THEN
	      CALL WRITEF('*** ERROR ***'//
     &			  'Seconds field may not be negative')
	      RETURN
	   ELSE
	      ACCUM = ACCUM + (RNUM*10.0)	! in seconds/10
	   ENDIF
	ENDIF
C
C now check if it should be negative
C
	IF (NEGATE) THEN
	   ACCUM = -ACCUM
	ENDIF
C
C and we return with success
C
	TENSEC = ACCUM
	RDORIG = .FALSE.
C
	RETURN
	END
