	LOGICAL FUNCTION UNSET
C
***	IDENT	29FE88
***	MODULE	UNSET
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 3 June 1983
C
CMOD	Modified to use LSLLIB.			JMB	29 Feb 1988
C
C
C This attempts to read UNSET (or a synonym), and returns TRUE if
C it does (otherwise FALSE)
C
	IMPLICIT NONE
C
C we need common so we can unset messages from RDCOMM
C
	INCLUDE 'LSL$CMNLSL:CMDCOM.CMN'	! for NOMESS
	INCLUDE 'LSL$CMNLSL:EXCEPTION.CMN'
C
C and we must actually read the command
C
	INTEGER*4	RDCOMM		! reads a command
C
C into somewhere
C
	INTEGER*4	CMD		! where to read it
	INTEGER		OLDCP		! save the DCPTR
C
C and we thus need a command table to look it up in
C
	INTEGER*4	UNSET_CMD_TABLE
	EXTERNAL	UNSET_CMD_TABLE
C
C
C so we guess that we won't find it...
C
	UNSET = .FALSE.
C
C and remember where we are in the current input line
C
	CALL DCPSAV( OLDCP )
C
C and try to read the word
C
	NOMESS = .TRUE.			! suppress messages
	CMD = RDCOMM( UNSET_CMD_TABLE )
	NOMESS = .FALSE.		! reenable messages
C
C and now look to see what we got
C If we found UNSET, then return with success
C If we found an unrecognised character, unread what we read and
C undo the error - this is the case we would expect if there was
C further info on the line
C If we read nothing, but had no error, then the rest of the line
C was empty
C
	IF ( CMD.EQ.0 ) THEN		! wasn't unset
	   IF ( ERRNUM.NE.0 ) THEN	! but was something else
	      CALL DCPSET( OLDCP )	! back to where we were
	      ERRNUM = 0		! unset the error
	   ENDIF
	ELSE				! WAS unset
	   UNSET = .TRUE.
	ENDIF
C
	RETURN
	END
