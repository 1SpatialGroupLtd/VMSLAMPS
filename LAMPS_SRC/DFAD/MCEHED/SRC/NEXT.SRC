	SUBROUTINE NEXT( RDONLY, EXIT )
C
***	IDENT	29FE88
***	MODULE	NEXT
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 25 May 1983
C
CMOD	Modified to use LSLLIB.			JMB	29 Feb 1988
C
C
C This function collects the next line from the user, and obeys the
C relevant commands.
C
	IMPLICIT NONE
C
C
C passed
C
	LOGICAL		RDONLY		! IN - true if file was opened
C					! readonly
	LOGICAL		EXIT		! OUT - set true if EXITing -
C					! ie output a changed mapheader
C
C NOTE that we mayn't EXIT if RDONLY is true (can't write mapheader out
C to a file we've decided only to read)
C
C functions
C
	INTEGER		TTRSTR		! prompt for a command
	INTEGER*4	RDCOMM		! read a command
	LOGICAL		PROMPT		! try for an EDIT argument
	LOGICAL		RDCHS		! read next significant char
C
C common
C
	INCLUDE 'LSL$CMNLSL:CMDCOM.CMN'	! for error numbers, etc
	INCLUDE 'LSL$CMNLSL:EXCEPTION.CMN'
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'
C
C workspace
C
	INTEGER		RES		! result from TTRLIN, etc
	INTEGER*4	CMD		! command we read
	INTEGER*4	IERR		! general error return
	BYTE		CHAR		! for RDCHS
C
C command tables
C
	INTEGER*4	MAIN_CMD_TABLE
	EXTERNAL	MAIN_CMD_TABLE		! the initial one
C
	INTEGER*4	EDIT_CMD_TABLE
	EXTERNAL	EDIT_CMD_TABLE		! for EDITing fields
C
C assume we don't write the map header out
C
	EXIT = .FALSE.
C
C prompt for a command...
C
10	RES = TTRSTR( , , 'mcehed> ', IERR )
C
	IF (.NOT.RES) THEN
	   IF (RES.EQ.LSL__EOF) THEN	! ^Z - leave program
C					! we EXIT / QUIT as appropriate
	      IF (RDONLY) THEN
	         EXIT = .FALSE.
	         GOTO 122
	      ELSE
	         EXIT = .TRUE.
	         RETURN
	      ENDIF
	   ELSE
	      CALL WRITEF('*** ERROR *** Reading response to prompt')
	      CALL LSL_PUTMSG(RES)
	      CALL LSL_ADDMSG(IERR)
	      GOTO 10
	   ENDIF
	ENDIF
C
C so we have a command line - interpret it...
C
	CALL BSLN			! start at the beginning of it
C
C firstly, we try reading it with the main command table
C this will tell us if we are trying to leave the program
C
20	ERRNUM = 0			! clear any outstanding errors
	NOMESS = .TRUE.			! disable error messages
	CMD = RDCOMM( MAIN_CMD_TABLE )
	NOMESS = .FALSE.		! reenable error messages
	IF ( CMD.EQ.0 ) THEN
	   IF (ERRNUM.EQ.LSL__UNEXPEOL) GOTO 10   ! nothing - reprompt
	   IF (ERRNUM.EQ.LSL__UNEXPCMD) GOTO 200  ! not in this table 
	   CALL CMDERR			    ! interpret the error
	   GOTO 10			    ! reprompt anyway
	ENDIF
C
C
C choose what to do - MAIN command table
C
	GOTO ( 110, 120, 125, 130, 140 ), CMD
C
	CALL WRITEF('*** INTERNAL ERROR *** '//
     &			'unknown MAIN command %N',CMD)
C
C *** EXIT
C
110	IF ( RDONLY ) THEN
	   CALL WRITEF('*** ERROR *** File opened readonly - '//
     &			'EXIT not allowed')
	   GOTO 10			! reprompt
	ELSE
C
C	 was that all of the command line? it certainly should be
C
	   IF ( .NOT.RDCHS(CHAR) ) THEN
	      CALL WRITEF('*** ERROR *** '//
     &			   'Unexpected "%A1" after EXIT',CHAR)
	      GOTO 10
	   ELSE
	      EXIT = .TRUE.
	      RETURN			! do the EXIT
	   ENDIF
	ENDIF
C
C
C *** QUIT
C
120	EXIT = .FALSE.
C
C was that all of the command line? it certainly should be
C
	IF ( .NOT.RDCHS(CHAR) ) THEN
	   CALL WRITEF('*** ERROR ***'//
     &			'Unexpected "%A1" after QUIT',CHAR)
	   GOTO 10
	ENDIF
C
122	IF ( .NOT.RDONLY ) CALL WRITEF('*** WARNING *** '//
     &					'Not writing out map header')
	RETURN
C
C
C *** Q, QU, QUI
C
125	CALL WRITEF('*** ERROR *** Please type the whole command QUIT')
	GOTO 10
C
C
C *** SHOW - find out what section to show
C
130	CALL SHOW
	GOTO 10
C
C
C *** HELP
C
140	CALL HELP			! to write out help info
	GOTO 10				! reprompt
C
C
C if they don't know what sort of value to give, ie an argument is
C missing, then we shall prompt for the right sort of answer
C PROMPT will set the argument up as we would expect it to be
C for EDIT
C
200	CALL BSLN			! back to start of line again
	CMD = RDCOMM( EDIT_CMD_TABLE )
	IF ( CMD.EQ.0 ) GOTO 10		! nothing, or some sort of
C					! error, it already complained
C
C so we have something to edit - are we ALLOWED to edit?
C
	IF ( RDONLY ) THEN
	   CALL WRITEF(
     &		'*** ERROR *** File was opened read only - '//
     &		'editing not allowed')
	ELSE
	   CALL EDIT( CMD )		! do the edit
	ENDIF
	GOTO 10				! reprompt
C
C
	END
