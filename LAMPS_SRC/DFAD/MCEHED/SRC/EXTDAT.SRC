	LOGICAL FUNCTION EXTDAT( CMD, BINDAY )
C
***	IDENT	29FE88
***	MODULE	EXTDAT
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 31 May 1983
C
CMOD	Modified to use LSLLIB.			JMB 29 Feb 1988
C
C This function extracts a date (in any of the following formats:
C
C		dd MMM yyyy	or	dd MMM yy
C	or	dd mm  yyyy	or	dd mm  yy
C	or	dd/mm/ yyyy	or	dd-MMM-yyy
C	or	..... )
C
C from the command line, prompting if needs be, and inserts it into
C BINDAY as binary days
C
C We return FALSE if we FAIL, TRUE if we succeed
C
C NOTE that this is the reverse of the usual LSL system
C
C If we don't find a date, then we will prompt for it
C
	IMPLICIT NONE
C
C passed
C
	INTEGER*4	CMD		! tells PROMPT what to ask
	INTEGER*4	BINDAY		! where to put the date
C
C functions called
C
	LOGICAL		RDCHS		! read next significant char
	LOGICAL		PROMPT		! prompt for the date
	LOGICAL		RDINT		! read an integer (*2)
	INTEGER*4	RDSTR		! read a string
	INTEGER*4	RDCOMM		! read a command (month name)
	LOGICAL		DTOBIN		! convert date to binary days
	LOGICAL		UNSET		! unset the date?
C
C common for arguments
C
	INCLUDE 'LSL$CMNLSL:CMDCOM.CMN'	! RDCOMM common block
C
C and we have workspace
C
	PARAMETER	HYPHEN = '-'
	PARAMETER	SLASH  = '/'
C
	INTEGER*4	DAY		! day in month
	INTEGER*4	MONTH		! month in year
	CHARACTER*3	MONTHD		! name of month
	INTEGER*4	YEAR		! year (full number)
C
	LOGICAL		HADSEP		! separated by / or - ??
	BYTE		SEPCH		! whichever it was
	LOGICAL		REPROM		! should we reprompt?
C
	BYTE		CHAR		! what RDCHS reads
	INTEGER*2	NUM		! short number
	INTEGER*4	NUMBER		! long number
	EQUIVALENCE	(NUM,NUMBER)
C
	CHARACTER*3	NAME(12)	! names of the months
	INTEGER		LENGTH(12)	! lengths of the months
C
C and the command table for months
C
	INTEGER*4	DATE_CMD_TABLE
	EXTERNAL	DATE_CMD_TABLE
C
C set up the names of the months
C
	DATA	NAME  / 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
     &			'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec' /
C
C and the lengths - note we assume that February is long
C
	DATA	LENGTH/ 31, 29, 31, 30, 31, 30,
     &			31, 31, 30, 31, 30, 31 /
C
C
C assume failure
C
	EXTDAT = .FALSE.
C
C don't prompt regardless, initially
C
	REPROM = .FALSE.
C
C and check if we need to prompt
C
10	IF ( REPROM .OR. RDCHS(CHAR) ) THEN	! no date on the line
	   IF ( PROMPT(CMD,.TRUE.) ) RETURN	! prompt for it
	ELSE
	   CALL BSCH				! unread the char
	ENDIF
C
C so by here, we have SOMETHING on the line - hopefully a date
C
	HADSEP = .FALSE.			! assume no separator
	REPROM = .TRUE.				! on error, reprompt
C
C so we start off by reading the day number
C
	NUMBER = 0				! clear our number
C
	IF ( RDINT(NUM) ) THEN			! no day number there
	   IF ( UNSET() ) THEN			! are they UNSETting it
	      BINDAY = 0			! yes, so do so
	      CALL WRITEF('Date field now unset')
	      EXTDAT = .TRUE.			! and that's OK
	      RETURN				! so we've finished
	   ELSE
	      CALL WRITEF('*** ERROR *** Trying to read day number')
	      GOTO 10
	   ENDIF
	ELSEIF ( NUM.GT.31 ) THEN		! but no, we got a no.
	   CALL WRITEF('*** ERROR *** Day %N is too large',NUM)
	   GOTO 10
	ELSEIF ( NUM.LT.1 ) THEN
	   CALL WRITEF('*** ERROR *** Day %N is too small',NUM)
	   GOTO 10
	ELSE
	   DAY = NUMBER				! accept the day
	ENDIF
C
C and now read the month - this might be separated by either a
C space, a hyphen or a slash, and it might be a string or a number
C
20	IF ( RDCHS(CHAR) ) THEN
C
C	 ha - we ran out of line
C
	   CALL WRITEF('*** ERROR *** Unexpected end of line - '//
     &			'no month')
	   GOTO 10
C
	ELSE
C
	   IF ( .NOT.HADSEP .AND.
     &			 CHAR.EQ.SLASH .OR. CHAR.EQ.HYPHEN ) THEN
C
C	    we have found a separator - note the fact, and what it is,
C	    and then try to read the month yet again
C
	         HADSEP = .TRUE.		! have a separator
	         SEPCH  = CHAR			! and this is it
	         GOTO 20			! read after the sepch
C
	   ELSE
C
	      CALL BSCH				! unread the char
	      IF ( RDINT(NUM) ) THEN		! wasn't a month number
C
C	       so we try and read the month as command
C	       we already know that there is something there to read
C
	         MONTH = RDCOMM( DATE_CMD_TABLE )
	         IF ( MONTH.EQ.0 ) GOTO 10	! error
C
C	        so now we should have MONTH set
C
	      ELSE
C
C	       whereas here, we have simply read an integer...
C
	         MONTH = NUMBER
C
	      ENDIF
	   ENDIF
	ENDIF
C
C and is the month number sensible?
C
	IF ( MONTH.GT.12 .OR. MONTH.LT.1 ) THEN
	   CALL WRITEF('*** ERROR *** Month %N is out of range',MONTH)
	   GOTO 10
	ELSE
	   MONTHD = NAME(MONTH)
	ENDIF
C
C so now we can check whether the day number is rational for that
C month...
C
	IF ( DAY.GT.LENGTH(MONTH) ) THEN
	   CALL WRITEF('*** ERROR *** There are only %N days '//
     &				'in month %S',
     &				LENGTH(MONTH),   NAME(MONTH) )
	   GOTO 10
	ENDIF
C
C and now for the year - possibly preceded by a separator
C
	IF ( HADSEP ) THEN
	   IF ( RDCHS(CHAR) ) THEN
	      CALL WRITEF('*** ERROR *** Unexpected end of line - '//
     &				'no year')
	      GOTO 10
	   ELSEIF ( CHAR.NE.SEPCH ) THEN
	      CALL WRITEF('*** ERROR *** '//
     &	'Unexpected "%A1" found where separator "%A1" was expected',
     &		     CHAR,			 SEPCH )
	      GOTO 10
	   ENDIF
	ENDIF
C
C and the year number
C
	IF ( RDINT(NUM) ) THEN
	   CALL WRITEF('*** ERROR *** Cannot read year')
	   GOTO 10
	ELSE
	   YEAR = NUMBER
	ENDIF
C
C was there rubbish left on the line?
C
	IF ( .NOT.RDCHS(CHAR) ) THEN
	   CALL WRITEF('*** ERROR *** '//
     &			'Unexpected "%A1" found after date',CHAR)
	   GOTO 10
	ENDIF
C
C and check whether we must add 1900...
C
	IF ( YEAR.LT.0 ) THEN
	   CALL WRITEF('*** ERROR *** Negative year is not allowed')
	ELSEIF ( YEAR.LT.100 ) THEN
	   YEAR = YEAR+1900			! make to 19xx form
	ELSEIF ( YEAR.LT.1900 ) THEN
	   CALL WRITEF('*** ERROR *** '//
     &			'Date may not be before 1-Jan-1900')
	   GOTO 10
	ELSEIF ( YEAR.GT.9999 ) THEN
	   CALL WRITEF('*** ERROR *** Year %N is too large',YEAR)
	ENDIF
C
C now for the final check on how many days in the month...
C
	IF ( MONTH.EQ.2 .AND. DAY.EQ.29 ) THEN
	   IF ( MOD(YEAR,4).NE.0 .OR. MOD(YEAR,100).EQ.0 ) THEN
	      IF ( MOD(YEAR,400).NE.0 ) THEN
	         CALL WRITEF('*** ERROR *** '//
     &		'The year %N is not a leap year - only 28 days in Feb',
     &			  YEAR )
	         GOTO 10
	      ENDIF
	   ENDIF
	ENDIF
C
C
C so we now have a (hopefully) legal date - convert it to binary days
C (note that this sets ALL of longword NUMBER, which is why we need to
C clear it at the beginning of this routine - the VAX leaves the old
C value in situ!)
C
	IF ( .NOT.DTOBIN( DAY, MONTH, YEAR, NUMBER ) ) THEN
C
C	 we have succesfuly transformed our date - copy it over
C
	   BINDAY = NUMBER
	   EXTDAT = .TRUE.		! it all went well
	ENDIF
C
	RETURN
	END
