C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-03-03 18:23:48.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION EXTSTR( CMD, LENGTH, DESTN )
C
***	IDENT	29FE88
***	MODULE	EXTSTR
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 3 June 1983
C
	IMPLICIT NONE
C
CMOD	Modified to use LSLLIB.			JMB	29 Feb 1988
C
C This function extracts a string from the current input buffer,
C prompting if necessary, and will update DESTN if it finds something
C sensible
C
C It returns TRUE if we update the value, FALSE otherwise
C
C we were passed
C
	INTEGER*4	CMD	! tells PROMPT which integer this is
	INTEGER*4	LENGTH	! the length of the 'string'
	BYTE		DESTN(LENGTH)	! our result goes into here
C
C the following functions are used
C
	LOGICAL		RDCHS	! read next significant char
	LOGICAL		PROMPT	! prompt for an argument
	INTEGER*4	READSTR	! read the string
	LOGICAL		CHKSTR	! check if it's too long
	LOGICAL		UNSET	! see if they commanded us to unset it
C
C we also need
C
	BYTE		CHAR	! character read by RDCHS
	LOGICAL		REPROM	! should we reprompt?
	INTEGER*4	IERR	! return from READSTR
C
C and quote symbols...
C
	PARAMETER	SQUOTE = ''''
	PARAMETER	DQUOTE = '"'
C
C and to store the string
C
	INCLUDE 'LSL$CMNLSL:CMDCOM.CMN'	! for STARLE, etc
	INCLUDE 'LSL$CMNLSL:READSTR.PAR'! for READSTR
C
C assume we fail to do the update
C
	EXTSTR = .FALSE.
C
C initially, only prompt if need to
C
	REPROM = .FALSE.
C
C do we already have an argument?
C
10	IF ( REPROM .OR. RDCHS(CHAR) ) THEN	! no argument, prompt
	   IF ( PROMPT(CMD,.TRUE.) ) RETURN	! no reply
	ELSE
	   CALL BSCH			! else unread the char
	ENDIF
C
C now reprompt on an error
C
	REPROM = .TRUE.
C
C first, let us see if they have asked us to UNSET this variable
C
	IF ( UNSET() ) THEN			! yes, they did
	   IF ( .NOT.RDCHS(CHAR) ) THEN
	      CALL WRITEF('*** ERROR *** '//
     &			  'Unexpected "%A1" found after unset command',
     &					CHAR )
	      GOTO 10
	   ELSE
	      DESTN(1) = 0			! null string
	      CALL WRITEF('String field now unset')
	      EXTSTR = .TRUE.			! success
	      RETURN				! that's the lot
	   ENDIF
C
	ELSE			! we must try for a string
C
C	 but no, not UNSET, so let's see if it is a valid string
C
	   IF ( RDCHS(CHAR) ) GOTO 10	! null response again
C
C	 but there was something - assume it's OK
C
	   IF ( CHAR.NE.SQUOTE .AND. CHAR.NE.DQUOTE ) THEN
	      CALL WRITEF('*** ERROR *** '//
     &		'Unexpected "%A1" - string must be in quotes',CHAR)
	      GOTO 10
	   ENDIF
C
	   STARLE = 80			! length to read (?!)
	   IERR = READSTR(STARST,CHAR,ON_CHAR2,.FALSE.) ! read string
	   IF ( IERR.EQ.0 ) THEN	! no string read
	      CALL WRITEF('*** WARNING *** No string read')
	      GOTO 10
	   ENDIF
C
C	 and check there is nothing left on the line
C
	   IF ( .NOT.RDCHS(CHAR) ) THEN
	      CALL WRITEF('*** ERROR *** '//
     &				'Unexpected "%A1" after string',CHAR)
	      GOTO 10
	   ENDIF
C
C	 otherwise, we presumably have the string ready in hand...
C
	   STARLE = IERR		! rework the length
C
C	 and do a final check...
C	 since we read a string of up to 80, we must check that it
C	 wasn't really that long
C
	   IF ( CHKSTR(LENGTH) ) THEN	! is the length correct?
	      CALL PUTSTR( DESTN, LENGTH )	! yes, copy it over
	      EXTSTR = .TRUE.			! success
	      RETURN
	   ELSE
	      GOTO 10				! or try again
	   ENDIF
	ENDIF
C
	END
