C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-06-18 15:54:38.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION READ_DEF
C
***	MODULE READ_DEF
***	IDENT 18JN92
C
C	Copyright Laser-Scan Ltd., Cambridge, England.
C
C	Created					JMC	21-May-1992
C
C	DFAD FADTINPUT Utility - Read FADT defaults file
C
C Description
C
C	Reads the FADT header defaults file which contains default values
C	for the ACC DSI and DLMS forms.
C
C	Returns FALSE if something drastic goes wrong, TRUE otherwise
C
	IMPLICIT NONE
C
C Included Parameter Files
C
	INCLUDE 'LSL$FADTINPUT:FADTINPUTMSG.PAR'
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'  ! LSLLIB message definitions
C
C Common Blocks
C
	INCLUDE 'LSL$CMNLSL:CMDCOM.CMN'	! command decoding
	INCLUDE 'LSL$FADTINPUT:FADTINPUT.CMN'
	INCLUDE 'LSL$CMNLSL:STATUS.CMN'	! LSLLIB status flag
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'	! text buffer
C
C Functions called
C
	INTEGER*4	FLROPN		! open file for reading
	INTEGER*4	FLRCLO		! close file for reading
	INTEGER*4	FLRLIN		! read in line from file
	INTEGER*4	RDCOMM		! read a command
	LOGICAL		RDCHS		! read next character
	LOGICAL		READ_ACC_DEF
	LOGICAL		READ_DSI_DEF
	LOGICAL		READ_DLMS_DEF
	LOGICAL		READ_FADT_DEF
C
C Local Variables
C
	INTEGER*4	RESULT		! command read result
	INTEGER*4	ERRCOD		! LSLLIB error code
	INTEGER*4	RETCOD		! system error code
	BYTE		CH		! character read
C
C External declaration
C
	INTEGER*4	DEFCMD_CMD_TABLE
	EXTERNAL	DEFCMD_CMD_TABLE
C
C Assume that everything goes well
C
	READ_DEF = .TRUE.
C
C Open our FADT defaults file, read only
C
	ERRCOD = FLROPN(DEFLUN,DEFFIL,RETCOD)
C
C If unsuccessful output message
C
	IF (.NOT. ERRCOD) THEN
	   CALL LSL_PUTMSG(FADTIN__ERROPNDEF,DEFFIL(1:DEFLEN))
	   CALL LSL_ADDMSG(ERRCOD)
	   IF (ERRCOD .EQ. LSL__SYSOPEN) CALL LSL_ADDMSG(RETCOD)
	   GOTO 9999
	ENDIF
C
C Haven't got a line yet
C
	LINE = 0
C
C So let us read in the lines, one by one
C
500	LINE = LINE+1
C
	ERRCOD = FLRLIN(,,,RETCOD)
	IF (ERRCOD .EQ. LSL__EOF) GOTO 800
C
C If unsuccessful output message
C
	IF (.NOT. ERRCOD) THEN
	   CALL LSL_PUTMSG(FADTIN__ERRREAD_DEF,DEFFIL(1:DEFLEN),LINE)
	   CALL LSL_ADDMSG(ERRCOD)
	   IF (ERRCOD .EQ. LSL__SYSREAD) CALL LSL_ADDMSG(RETCOD)
	   GOTO 9999
	ENDIF
C
C Now reset the decoding pointer to the start of the line
C
	CALL BSLN
C
C Check for a comment delimiter - ignore an empty line
C
	IF ( RDCHS( CH ) ) GOTO 500
	IF ( CH.EQ.PLING ) THEN
	   GOTO 500			! ignore line
	ELSE
	   CALL BSLN			! unread non-pling
	ENDIF
C
C Now, read the command from the line
C
	RESULT = RDCOMM(DEFCMD_CMD_TABLE)
C
C and check that there was one
C
	IF (RESULT .LE. 0) GOTO 5555
C
C Despatch according to command
C
	GOTO (510,520,530,540) RESULT
C
C Unknown command
C
	CALL LSL_PUTMSG(FADTIN__UNKCMD,CMDNST)
	GOTO 5555
C
C FADT defaults file - ACC record
C
510	IF ( .NOT. READ_ACC_DEF() ) GOTO 5555
	GOTO 500
C
C FADT defaults file - DSI record
C
520	IF ( .NOT. READ_DSI_DEF() ) GOTO 5555
	GOTO 500
C
C FADT defaults file - DLMS record
C
530	IF ( .NOT. READ_DLMS_DEF() ) GOTO 5555
	GOTO 500
C
C FADT defaults file - FADT record
C
540	IF ( .NOT. READ_FADT_DEF() ) GOTO 5555
	GOTO 500
C
C Error decoding line
C
5555	CALL LSL_ADDMSG(FADTIN__LINEINDEF,LINE)
	LSL_STATUS = FADTIN__LINEINDEF		! reduce error status
C
C delay so messages can be seen
	CALL LSL_WAIT(3, 2)
	GOTO 500
C
C Close the file
C
800	ERRCOD = FLRCLO(DEFLUN,RETCOD)
C
C If unsuccessful output message
C
	IF (.NOT. ERRCOD) THEN
	   CALL LSL_PUTMSG(FADTIN__ERRCLODEF,DEFFIL(1:DEFLEN))
	   CALL LSL_ADDMSG(ERRCOD)
	   IF (ERRCOD .EQ. LSL__SYSCLOSE) CALL LSL_ADDMSG(RETCOD)
	   GOTO 9999
	ENDIF
	GOTO 9000
C
C Failure
C
9999	READ_DEF = .FALSE.
C
C Return
C
9000	RETURN
	END
