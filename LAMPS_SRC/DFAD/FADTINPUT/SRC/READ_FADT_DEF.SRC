C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-06-17 09:29:30.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION READ_FADT_DEF
C
***	MODULE READ_FADT_DEF
***	IDENT 17JN92
C
C	Copyright Laser-Scan Ltd., Cambridge, England.
C
C	Created					JMC	20-May-1992
C
C	DFAD FADTINPUT Utility - Read FADT entries from FADT Defaults file
C
C Description
C
C	Reads an FADT entry from the FADT header defaults file.
C
C	Returns FALSE if something drastic goes wrong, TRUE otherwise
C
	IMPLICIT NONE
C
C Included Parameter Files
C
	INCLUDE 'LSL$FADTINPUT:FADTINPUTMSG.PAR'
	INCLUDE 'LSL$CMNLSL:READSTR.PAR'	! string reading
C
C Common Blocks
C
	INCLUDE 'LSL$FADTINPUT:FADTINPUT.CMN'
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'		! text input
C
C Local Variables
C
	INTEGER*2	ARG_COUNT	! count FADT arguements
	INTEGER*2	I,INT		! workspace integers
	INTEGER		LEN		! length of string
	INTEGER		NOINT		! RDINT return flag
	CHARACTER*8	STRING		! scratch string
C
C Functions
C
	INTEGER		READSTR		! string reading
	LOGICAL		RDINT		! read word integer
C
C Assume that everything goes well
C
	READ_FADT_DEF = .TRUE.
C
C increment count of FADT entries
	FADT_COUNT = FADT_COUNT + 1
C
C initialise FADT arguements counter
	ARG_COUNT = 0
C
C Read next argument
500	ARG_COUNT = ARG_COUNT + 1
	LEN = READSTR(STRING,PLING,ON_SPACE)
C
C If arguement is null set the null flag then read next arguement
	IF (STRING(1:4).EQ.'NULL') THEN
C
C FID has to be the key field so put in array as first arguement
C and type as second.
	   IF (ARG_COUNT.EQ.1)  THEN
	      FADT_DEFS(FADT_COUNT,2,2) = -999
	   ELSEIF (ARG_COUNT.EQ.2) THEN
	      FADT_DEFS(FADT_COUNT,1,2) = -999
	   ELSE
	      FADT_DEFS(FADT_COUNT,ARG_COUNT,2) = -999
	   ENDIF
	   IF (ARG_COUNT.EQ.MAX_FADT_ARGS) GOTO 9000
	   GOTO 500
	ENDIF
C
C read arguement into integer
	I = DCPTR
	CALL SETAUX(%REF(STRING),LEN)
	NOINT = RDINT(INT)
C
C 
	GOTO (510,520,530,540,550,560,570,580,590) ARG_COUNT
C
C FADT Type
510	IF ((INT.LT.0).OR.(INT.GT.2).OR.NOINT) THEN
	   CALL LSL_PUTMSG(FADTIN__INVTYP)
	   GOTO 9999
	ENDIF
	GOTO 600
C
C FADT FID
520	IF ((INT.LT.100).OR.(INT.GT.999).OR.NOINT) THEN
	   CALL LSL_PUTMSG(FADTIN__INVFID)
	   GOTO 9999
	ENDIF
	GOTO 600
C
C FADT Height
530	IF ((INT.LT.-1022).OR.(INT.GT.1022).OR.NOINT) THEN
	   CALL LSL_PUTMSG(FADTIN__INVHEI)
	   GOTO 9999
	ENDIF
	GOTO 600
C
C FADT security
540	IF ((INT.LT.0).OR.(INT.GT.99).OR.NOINT) THEN
	   CALL LSL_PUTMSG(FADTIN__INVSEC)
	   GOTO 9999
	ENDIF
C
C FADT releasibility
550	IF ((INT.LT.0).OR.(INT.GT.99).OR.NOINT) THEN
	   CALL LSL_PUTMSG(FADTIN__INVREL)
	   GOTO 9999
	ENDIF
	GOTO 600
C
C FADT SMC
560	IF ((INT.LT.0).OR.(INT.GT.31).OR.NOINT) THEN
	   CALL LSL_PUTMSG(FADTIN__INVSMC)
	   GOTO 9999
	ENDIF
	GOTO 600
C
C FADT Ori/Dir/Den
570	IF ((INT.LT.0).OR.(INT.GT.31).OR.NOINT) THEN
	   IF (INT.NE.63) THEN
	      CALL LSL_PUTMSG(FADTIN__INVORI)
	      GOTO 9999
	   ENDIF
	ENDIF
	GOTO 600
C
C FADT Width/%-roof
580	IF ((INT.LT.0).OR.(INT.GT.127).OR.NOINT) THEN
	   CALL LSL_PUTMSG(FADTIN__INVWID)
	   GOTO 9999
	ENDIF
	GOTO 600
C
C FADT Length/%-tree
590	IF ((INT.LT.0).OR.(INT.GT.127).OR.NOINT) THEN
	   CALL LSL_PUTMSG(FADTIN__INVLEN)
	   GOTO 9999
	ENDIF
C
C Set entry in FADT_DEFS table
C FID has to be the key field so put in array as first arguement
C and type as second.
C
600	IF (ARG_COUNT.EQ.1)  THEN
	   FADT_DEFS(FADT_COUNT,2,1) = INT
	ELSEIF (ARG_COUNT.EQ.2) THEN
	   FADT_DEFS(FADT_COUNT,1,1) = INT
	ELSE
	   FADT_DEFS(FADT_COUNT,ARG_COUNT,1) = INT
	ENDIF
	CALL BSLN
	DCPTR = I
C
C Exit if last arguement
	IF (ARG_COUNT.EQ.MAX_FADT_ARGS) THEN
	   GOTO 9000
	ELSE
	   GOTO 500
	ENDIF
C
C Failure
C
9999	READ_FADT_DEF = .FALSE.
C
C Return
C
9000	RETURN
	END
