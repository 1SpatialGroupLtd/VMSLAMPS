C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-06-12 18:24:12.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION COPY_OLD_FADT()
C
***	MODULE COPY_OLD_FADT
***	IDENT 13JA88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England.
C Author: J.M. Billing			13 Jan 1988
C
C Function to copy an existing indexed fadt file to an FADT file with
C the same name but a more recent version number, so that it can
C then be edited while keeping a backup original.
C Returns .TRUE. if succeeds
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$FADTINPUT:FADTINPUT.CMN'
	INCLUDE 'LSL$FADTINPUT:FADTINPUTMSG.PAR'
	INCLUDE 'LSL$FADTCMN:FADT.CMN'
	INCLUDE '($FORIOSDEF)'
	INCLUDE '($FORDEF)'
C
C w/s variables
	INTEGER		OK
	INTEGER		STATUS
	LOGICAL		OLDOPN
	LOGICAL		NEWOPN
C
C Init file open flags
C
	OLDOPN = .FALSE.
	NEWOPN = .FALSE.
C
C Assume success
C
	COPY_OLD_FADT = .TRUE.
C
C Tell user what is happening
C
	CALL FORM_MSG(	'Copying existing FADT file to new version'//
     &			' of file for editing. Please wait.',0)
C
C Open the existing file
C
	OPEN (	UNIT = FADTLUN,
     &		FILE = FADTFILE (1:FADTLEN),
     &		ORGANIZATION = 'INDEXED',
     &		ACCESS = 'KEYED',
     &		RECORDTYPE = 'FIXED',
     &		FORM = 'UNFORMATTED',
     &		RECL = 5,
     &		KEY = (1:2:INTEGER),
     &		STATUS = 'OLD',
     &		IOSTAT = OK)
C
C Check for errors
C
	IF (OK.NE.0) GOTO 30
C
C Set flag showing old file open
C
	OLDOPN = .TRUE.
C
C Open new file with same name
C
	OPEN (	UNIT = FADTLUN_COPY,
     &		FILE = FADTFILE (1:FADTLEN),
     &		ORGANIZATION = 'INDEXED',
     &		ACCESS = 'KEYED',
     &		RECORDTYPE = 'FIXED',
     &		FORM = 'UNFORMATTED',
     &		RECL = 5,
     &		KEY = (1:2:INTEGER),
     &		STATUS = 'NEW',
     &		IOSTAT = OK)
C
C Check for errors
C
	IF (OK.NE.0) GOTO 30
C
C Set flag showing new file open
C
	NEWOPN = .TRUE.
C
C Read first record from old file
C
	READ (	UNIT = FADTLUN,
     &		KEYGE = MIN_FADTKEY,
     &		KEYID = 0,
     &		IOSTAT = OK) FADT
C
C Check for errors
C
10	IF (OK.NE.0) THEN
	   CALL ERRSNS(,,,,STATUS)
	   IF (	(STATUS.NE.FOR$_ENDDURREA).AND.
     &		(STATUS.NE.FOR$_ATTACCNON))   GOTO 30
	   GOTO 40
	ENDIF
C
C Write to output
C
	WRITE (UNIT = FADTLUN_COPY, IOSTAT = OK) FADT
C
C Check for errors
C
	IF (OK.NE.0) GOTO 30
C
C Read next record
C
	READ (UNIT = FADTLUN, IOSTAT = OK) FADT
C
C Repeat loop
C
	GOTO 10
C
C Deal with errors while opening/copying FADT file
C
30	IF (HAD_LNM) THEN
C
C Determine the type of error
C
	   CALL ERRSNS(,,,,STATUS)
C
C If using logical names, just output ordinary error messages
C
	   CALL WRITEF()
	   CALL LSL_PUTMSG(FADTIN__UNOPNFADT)
	   CALL LSL_ADDMSG(STATUS)
	ELSE
C
C Deal with error while opening file under control of forms
C
	   CALL FORM_MSG('Unable to open FADT file',5)
	ENDIF
C
C Indicate failure to open file
C
	COPY_OLD_FADT = .FALSE.
C
C Close files
C
40	IF (OLDOPN) THEN
	   OLDOPN = .FALSE.
	   CLOSE(UNIT=FADTLUN,IOSTAT=OK)
	   IF (OK.NE.0) GOTO 30
	ENDIF
C
	IF (NEWOPN) THEN
	   NEWOPN = .FALSE.
	   CLOSE(UNIT=FADTLUN_COPY,IOSTAT=OK)
	   IF (OK.NE.0) GOTO 30
	ENDIF
C
C Exit
C
	RETURN
	END 
