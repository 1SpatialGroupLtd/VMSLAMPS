	LOGICAL FUNCTION DATE_VALIDATE(DATE)
C
***	MODULE DATE_VALIDATE
***	IDENT 10MA88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England.
C Author: J.M. Billing				10 Mar 1988
C
C Function to validate date in string in format:
C		YYMM
C		DDMMMYY
C Returns .TRUE. if valid
C
	IMPLICIT NONE
C
C common blocks
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'
C
C arguments
	CHARACTER*(*)	DATE
C
C w/s variables
	INTEGER*2	I
	INTEGER*2	DAY
	INTEGER*2	MONTH
	INTEGER*2	YEAR
	CHARACTER*3	MN_NAME(12)
	INTEGER*2	MN_LEN(12)
C
C functions
	LOGICAL		RDINT
C
C Set up month names/lengths
C
	DATA (MN_NAME(I),I=1,12)/'JAN','FEB','MAR','APR','MAY','JUN',
     &				 'JUL','AUG','SEP','OCT','NOV','DEC'/
C
	DATA (MN_LEN(I),I=1,12)/    31,   28,   31,   30,   31,   30,
     &				    31,   31,   30,   31,   30,   31/
C
C Assume valid
C
	DATE_VALIDATE = .TRUE.
C
C Find which format it is, deal with YYMM first
C
	IF (LEN(DATE).EQ.4) THEN
C
C Convert from string to integer
C
	   CALL SETAUX(%REF(DATE),4)
	   IF (RDINT(YEAR)) THEN
	      CALL FORM_MSG('Date invalid.',0)
	      GOTO 900
	   ENDIF
C
C If zero, then unset
C
	   IF (YEAR.EQ.0) GOTO 999
C
C Split up integer into year/month
C
	   MONTH = MOD (YEAR,100)
	   YEAR  = YEAR / 100
C
C Check year and month
C
	   CALL EXPAND
	   EXPBUF(1) = 'X'
	   IF (YEAR.GT.99) CALL APPEND('Year exceeds 99. ')
	   IF (YEAR.LT.00) CALL APPEND('Year less than 0. ')
	   IF (MONTH.GT.12) CALL APPEND('Month exceeds 12. ')
	   IF (MONTH.LT.1) CALL APPEND('Month less than 1. ')
C
	   IF (EXPBUF(1).NE.'X') THEN
	      CALL FORM_MSG(EXPDSC,0)
	      GOTO 900
	   ENDIF
C
	   GOTO 999
	ENDIF
C
C Otherwise, format is DDMMMYY
C
C
C Convert from string to integer
C Day in month
C
	   CALL SETAUX(%REF(DATE),2)
	   IF (RDINT(DAY)) THEN
	      CALL FORM_MSG('Date invalid.',0)
	      GOTO 900
	   ENDIF
C
C Year
C
	   CALL SETAUX(%REF(DATE(6:7)),2)
	   IF (RDINT(YEAR)) THEN
	      CALL FORM_MSG('Date invalid.',0)
	      GOTO 900
	   ENDIF
C
C Check if leap year
C
	   IF ((YEAR.NE.0).AND.(MOD(YEAR,4).EQ.0)) THEN
	      MN_LEN(2) = 29
	   ELSE
	      MN_LEN(2) = 28
	   ENDIF
C
C Month
C
	   DO 10 I = 1,12
	      IF (MN_NAME(I).EQ.DATE(3:5)) THEN
	         MONTH = I
	         GOTO 20
	      ENDIF
10	   CONTINUE
C
	   MONTH = 15
C
C Now validate
C
20	   CALL EXPAND
	   EXPBUF(1) = 'X'
	   IF (YEAR.GT.99) CALL APPEND('Year exceeds 99. ')
	   IF (YEAR.LT.0) CALL APPEND('Year less than 1. ')
	   IF (MONTH.EQ.15) CALL APPEND('Month unrecognised. ')
	   IF (DAY.LT.1) CALL APPEND('Day less than 1. ')
	   IF ((MONTH.GE.1).AND.(MONTH.LE.12)) THEN
	      IF (DAY.GT.MN_LEN(MONTH)) CALL APPEND(
     &				     'Day too large, maximum %^W%N '//
     &				     'for this month. ',MN_LEN(MONTH))
	   ENDIF
C
	   IF (EXPBUF(1).NE.'X') THEN
	      CALL FORM_MSG(EXPDSC,0)
	      GOTO 900
	   ENDIF
C
	GOTO 999
C
C Errors
C
900	DATE_VALIDATE = .FALSE.
C
C Exit
C
999	CALL BSLN
	RETURN
	END
