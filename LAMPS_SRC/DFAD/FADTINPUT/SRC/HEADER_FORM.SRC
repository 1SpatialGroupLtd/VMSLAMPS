C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-06-18 10:57:20.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION HEADER_FORM()
C
***	MODULE HEADER_FORM
***	IDENT 18JN92
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England.
C Author   : J.M. Billing 			18 Jan 1988
C
C Modified : J.M. Billing			13 June 1988
C To allow for 8 characters in the square identifier field on
C the header form, with the last character being the level
C i.e. 1 or 2
C
C Function to accept header as input through header form.
C Returns .TRUE. if succeeds.
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$FADTINPUT:FADTINPUT.CMN'
	INCLUDE 'LSL$FADTCMN:HEADER.CMN'
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'
C
C w/s variables
	INTEGER		TERM	! form field input terminator
	INTEGER		STATUS	! status of last FDV call
	CHARACTER*10	FID	! form field identifier
	CHARACTER*100	FVAL	! form field contents
	CHARACTER*30	TODAY	! today's date/time
	INTEGER		I
C
C functions
	LOGICAL		HEADER_READ
	LOGICAL		HEADER_WRITE
	LOGICAL		RDINT
	LOGICAL		RDLONG
	LOGICAL		LATLONG_VALIDATE
	LOGICAL		DATE_VALIDATE
	LOGICAL		TRNALL
C
C Assume success
C
	HEADER_FORM = .TRUE.
C
C Clear screen and set up form
C
	CALL FDV$CLRSH('HEADER')
C
C Try to read and set up any current header values in form
C
	IF (HEADER_READ()) THEN
C
C In file so transfer them to form
C
	   CALL FDV$PUT(HDRSW.LAT,'SWLAT')
	   CALL FDV$PUT(HDRSW.LONG,'SWLONG')
	   CALL FDV$PUT(HDRNE.LAT,'NELAT')
	   CALL FDV$PUT(HDRNE.LONG,'NELONG')
	   CALL FDV$PUT(HDRMO.LAT,'MOLAT')
	   CALL FDV$PUT(HDRMO.LONG,'MOLONG')
	   CALL FDV$PUT(HDR1.SEC_CODE(1:1),'SECODE')
	   CALL FDV$PUT(HDR2.ANALYSIS_DATE,'ANDATE')
	   CALL FDV$PUT(HDR2.SQUARE_ID//HDR1.SQUARE_ID_LEVEL,'SQID')
	   CALL FDV$PUT(HDR2.VAL_RULES,'VALRUL')
C
C The rest need conversion to string format before transfer to form
C
	   IF (HDR1.WAC_NUM.GE.0) THEN
	      CALL EXPAND('%^W%N',HDR1.WAC_NUM)
	   ELSE
	      CALL EXPAND('NA')
	   ENDIF
	   CALL FDV$PUT(EXPDSC,'WACNO')
C
	   IF (HDR1.WAC_CELL.GE.0) THEN
	      CALL EXPAND('%^W%N',HDR1.WAC_CELL)
	   ELSE
	      CALL EXPAND('NA')
	   ENDIF
	   CALL FDV$PUT(EXPDSC,'WACCEL')
C
	   IF (HDR1.WAG_CELL.GE.0) THEN
	      CALL EXPAND('%^W%N',HDR1.WAG_CELL)
	   ELSE
	      CALL EXPAND('NA')
	   ENDIF
	   CALL FDV$PUT(EXPDSC,'WAGCEL')
C
	   CALL EXPAND('%^W%N',HDR1.SEC)
	   CALL FDV$PUT(EXPDSC,'SEC')
C
	   CALL EXPAND('%^W%N',HDR1.REL)
	   CALL FDV$PUT(EXPDSC,'REL')
C
	   CALL EXPAND('%N',HDR1.DIG_SCALE)
	   CALL FDV$PUT(EXPDSC,'DIGSC')
C
C Otherwise, read/setup defaults from form
C
	ELSE
C
C Put today's date into analysis date if null
C
	   IF (HDR2_DEF.ANALYSIS_DATE.EQ.'TODAY') THEN
	      CALL LIB$DATE_TIME(TODAY)
	      HDR2.ANALYSIS_DATE(1:2) = TODAY(1:2)
	      HDR2.ANALYSIS_DATE(3:5) = TODAY(4:6)
	      HDR2.ANALYSIS_DATE(6:7) = TODAY(10:11)
	   ELSEIF (HDR2_DEF.ANALYSIS_DATE.NE.'       ') THEN
C
C Ensure that any leading space in the analysis date is a 0
	      HDR2.ANALYSIS_DATE = HDR2_DEF.ANALYSIS_DATE
	      IF (HDR2.ANALYSIS_DATE(1:1).EQ.' ') 
     &	         HDR2.ANALYSIS_DATE(1:1) = '0'
	   ELSE
	      HDR2.ANALYSIS_DATE = HDR2_DEF.ANALYSIS_DATE
	   ENDIF
C
C Now put the default date on the form
C
	   CALL FDV$PUT(HDR2.ANALYSIS_DATE,'ANDATE')
C
	   HDRSW.LAT = HDRSW_DEF.LAT
	   CALL FDV$PUT(HDRSW.LAT,'SWLAT')
	   HDRSW.LONG = HDRSW_DEF.LONG
	   CALL FDV$PUT(HDRSW.LONG,'SWLONG')
	   HDRNE.LAT = HDRNE_DEF.LAT
	   CALL FDV$PUT(HDRNE.LAT,'NELAT')
	   HDRNE.LONG = HDRNE_DEF.LONG
	   CALL FDV$PUT(HDRNE.LONG,'NELONG')
	   HDRMO.LAT = HDRMO_DEF.LAT
	   CALL FDV$PUT(HDRMO.LAT,'MOLAT')
	   HDRMO.LONG = HDRMO_DEF.LONG
	   CALL FDV$PUT(HDRMO.LONG,'MOLONG')
	   HDR1.SEC_CODE = HDR1_DEF.SEC_CODE
	   CALL FDV$PUT(HDR1.SEC_CODE(1:1),'SECODE')
C
C Return square id and square id level in separate parts
C
	   HDR2.SQUARE_ID = HDR2_DEF.SQUARE_ID
	   HDR1.SQUARE_ID_LEVEL = HDR1_DEF.SQUARE_ID_LEVEL
	   FVAL(1:7) = HDR2.SQUARE_ID
	   FVAL(8:8) = HDR1.SQUARE_ID_LEVEL
	   CALL FDV$PUT(FVAL,'SQID')
C
	   HDR2.VAL_RULES = HDR2_DEF.VAL_RULES
	   CALL FDV$PUT(HDR2.VAL_RULES,'VALRUL')
C
C The rest need conversion from string format
C
	   HDR1.WAC_NUM = HDR1_DEF.WAC_NUM
	   IF (HDR1.WAC_NUM.GE.0) THEN
	      CALL EXPAND('%^W%N',HDR1.WAC_NUM)
	   ELSEIF (HDR1.WAC_NUM.EQ.-999) THEN	! expand null string
	      CALL EXPAND('%S',' ')
	   ELSE
	      CALL EXPAND('NA')
	   ENDIF
	   CALL FDV$PUT(EXPDSC,'WACNO')
C
	   HDR1.WAC_CELL = HDR1_DEF.WAC_CELL
	   IF (HDR1.WAC_CELL.GE.0) THEN
	      CALL EXPAND('%^W%N',HDR1.WAC_CELL)
	   ELSEIF (HDR1.WAC_CELL.EQ.-999) THEN	! expand null string
	      CALL EXPAND('%S',' ')
	   ELSE
	      CALL EXPAND('NA')
	   ENDIF
	   CALL FDV$PUT(EXPDSC,'WACCEL')
C
	   HDR1.WAG_CELL = HDR1_DEF.WAG_CELL
	   IF (HDR1.WAG_CELL.GE.0) THEN
	      CALL EXPAND('%^W%N',HDR1.WAG_CELL)
	   ELSEIF (HDR1.WAG_CELL.EQ.-999) THEN	! expand null string
	      CALL EXPAND('%S',' ')
	   ELSE
	      CALL EXPAND('NA')
	   ENDIF
	   CALL FDV$PUT(EXPDSC,'WAGCEL')
C
	   IF (HDR1_DEF.SEC.EQ.-999) THEN	! expand null string
	      CALL EXPAND('%S',' ')
	   ELSE
	      HDR1.SEC = HDR1_DEF.SEC
	      CALL EXPAND('%^W%N',HDR1.SEC)
	   ENDIF
	   CALL FDV$PUT(EXPDSC,'SEC')
C
	   IF (HDR1_DEF.REL.EQ.-999) THEN	! expand null string
	      CALL EXPAND('%S',' ')
	   ELSE
	      HDR1.REL = HDR1_DEF.REL
	      CALL EXPAND('%^W%N',HDR1.REL)
	   ENDIF
	   CALL FDV$PUT(EXPDSC,'REL')
C
	   IF (HDR1_DEF.DIG_SCALE.EQ.-999) THEN	! expand null string
	      CALL EXPAND('%S',' ')
	   ELSE
	      HDR1.DIG_SCALE = HDR1_DEF.DIG_SCALE
	      CALL EXPAND('%^L%N',HDR1.DIG_SCALE)
	   ENDIF
	   CALL FDV$PUT(EXPDSC,'DIGSC')
	ENDIF
C
C Now get first field
C
	CALL FDV$GET(FVAL, TERM, 'SQID')
	CALL FDV$GCF(FID)
C
C Check if abort form terminator
C
	IF (TERM.EQ.ABORT_FORM) GOTO 140
C
C Now process fields in turn as user specifies
C
C SW corner latitude (DDMMSS.SH)
C
10	IF (FID.EQ.'SWLAT') THEN
C
	   HDRSW.LAT = FVAL
	   IF (.NOT.LATLONG_VALIDATE(HDRSW.LAT)) GOTO 110
C
C SW corner longitude (DDDMMSS.SH)
C
	ELSEIF (FID.EQ.'SWLONG') THEN
C
	   HDRSW.LONG = FVAL
	   IF (.NOT.LATLONG_VALIDATE(HDRSW.LONG)) GOTO 110
C
C NE corner latitude (DDMMSS.SH)
C
	ELSEIF (FID.EQ.'NELAT') THEN
C
	   HDRNE.LAT = FVAL
	   IF (.NOT.LATLONG_VALIDATE(HDRNE.LAT)) GOTO 110
C
C NE corner longitude (DDDMMSS.SH)
C
	ELSEIF (FID.EQ.'NELONG') THEN
C
	   HDRNE.LONG = FVAL
	   IF (.NOT.LATLONG_VALIDATE(HDRNE.LAT)) GOTO 110
C
C Digitising Scale, default 50000, (6 digits), validation by FMS
C
	ELSEIF (FID.EQ.'DIGSC') THEN
C
C Convert to longword integer
C
	   CALL SETAUX(%REF(FVAL),100)
	   IF (RDLONG(HDR1.DIG_SCALE)) THEN
	      CALL FORM_MSG('Illegal integer for digitising scale, '//
     &				'please re-enter',0)
	      GOTO 110
	   ENDIF
C
C WAC Number (1-9999) validation done by FMS
C
	ELSEIF (FID.EQ.'WACNO') THEN
C
C Convert to integer. If string is 'NA' then swap it with -1
C
	   IF (FVAL.EQ.'NA') FVAL='-1'
	   CALL SETAUX(%REF(FVAL),100)
	   IF (RDINT(HDR1.WAC_NUM)) THEN
	      CALL FORM_MSG('Illegal integer for WAC number, '//
     &				'please re-enter',0)
	      GOTO 110
	   ENDIF
C
C WAC cell (1-25) validation done here
C
	ELSEIF (FID.EQ.'WACCEL') THEN
C
C Convert to integer. If string is 'NA' then swap it with -1
C
	   IF (FVAL.EQ.'NA') THEN
	      HDR1.WAG_CELL = -1
	   ELSE
	      CALL SETAUX(%REF(FVAL),100)
	      IF (RDINT(HDR1.WAC_CELL)) THEN
	         CALL FORM_MSG('Illegal integer for WAC cell, '//
     &			 	'please re-enter',0)
	         GOTO 110
	      ENDIF
C
C Validate
C
	      IF ((HDR1.WAC_CELL.LT.1).OR.(HDR1.WAC_CELL.GT.25)) THEN
	         CALL FORM_MSG('WAC Cell must be in range 1-25, '//
     &				'please re-enter',0)
	         GOTO 110
	      ENDIF
	   ENDIF
C
C WAG cell (1-16) validation done here
C

	ELSEIF (FID.EQ.'WAGCEL') THEN
C
C Convert to integer. If string is 'NA' then swap it with -1
C
	   IF (FVAL.EQ.'NA') THEN
	      HDR1.WAG_CELL = -1
	   ELSE
              CALL SETAUX(%REF(FVAL),100)
	      IF (RDINT(HDR1.WAG_CELL)) THEN
	         CALL FORM_MSG('Illegal integer for WAG cell, '//
     &				'please re-enter',0)
	         GOTO 110
	      ENDIF
C
C Validate
C
	      IF ((HDR1.WAG_CELL.LT.1).OR.(HDR1.WAG_CELL.GT.16)) THEN
	         CALL FORM_MSG('WAG Cell must be in range 1-16, '//
     &				'please re-enter',0)
	         GOTO 110
	      ENDIF
	   ENDIF
C
C Security (00-99) validation by FMS
C
	ELSEIF (FID.EQ.'SEC') THEN
C
C Convert to integer
C
	   CALL SETAUX(%REF(FVAL),100)
	   IF (RDINT(HDR1.SEC)) THEN
	      CALL FORM_MSG('Illegal integer for security, '//
     &				'please re-enter',0)
	      GOTO 110
	   ENDIF
C
C Releasability (00-99) validation by FMS
C
	ELSEIF (FID.EQ.'REL') THEN
C
C Convert to integer
C
	   CALL SETAUX(%REF(FVAL),100)
	   IF (RDINT(HDR1.REL)) THEN
	      CALL FORM_MSG('Illegal integer for releasability, '//
     &				'please re-enter',0)
	      GOTO 110
	   ENDIF
C
C Analysis date DD-MMM-YY e.g. 25-JAN-88, limited validation by FMS
C
	ELSEIF (FID.EQ.'ANDATE') THEN
C
	   IF (.NOT.DATE_VALIDATE(FVAL(1:7))) GOTO 110
	   HDR2.ANALYSIS_DATE = FVAL
C
C Square identifier, last digit is level (1 or 2)
C
	ELSEIF (FID.EQ.'SQID') THEN
C
	   HDR2.SQUARE_ID = FVAL(1:7)
	   HDR1.SQUARE_ID_LEVEL = FVAL(8:8)
C
C Validate last digit, which must be '1' or '2'
C
	   IF ((HDR1.SQUARE_ID_LEVEL.NE.'1').AND.
     &	       (HDR1.SQUARE_ID_LEVEL.NE.'2')) THEN
	      CALL FORM_MSG('Last digit of square identifier must be'//
     &				' level, i.e. 1 or 2',0)
	      GOTO 110
	   ENDIF
C
C Manuscript Origin Latitude (DDMMSS.SH)
C
	ELSEIF (FID.EQ.'MOLAT') THEN
C
	   HDRMO.LAT = FVAL
	   IF (.NOT.LATLONG_VALIDATE(HDRMO.LAT)) GOTO 110
C
C Manuscript origin longitude (DDDMMSS.SH)
C
	ELSEIF (FID.EQ.'MOLONG') THEN
C
	   HDRMO.LONG = FVAL
	   IF (.NOT.LATLONG_VALIDATE(HDRMO.LONG)) GOTO 110
C
C Security code 'X,X' no validation
C
	ELSEIF (FID.EQ.'SECODE') THEN
C
	   HDR1.SEC_CODE(1:1) = FVAL
C
C Validation rules 'XX-XX' no validation
C
	ELSEIF (FID.EQ.'VALRUL') THEN
C
	   HDR2.VAL_RULES = FVAL
	ENDIF
C
C Act on terminator
C
	CALL FDV$PFT
C
C Find status i.e. has form been completed successfully
C
	CALL FDV$STAT(STATUS)
C
C Check if successful end of form
C
	IF ((STATUS.EQ.1).AND.(TERM.EQ.0)) GOTO 120
C
C Get new field identifier
C
	CALL FDV$GCF(FID)
C
C Get next field
C
110	CALL FDV$GET(FVAL,TERM,FID)
C
C Check if abort form terminator
C
	IF (TERM.EQ.ABORT_FORM) GOTO 140
C
	GOTO 10
C 
C Have reached end of form, so rewrite DSI
C
120	IF (.NOT.HEADER_WRITE()) GOTO 130
	GOTO 140
C
C Errors
C
130	HEADER_FORM = .FALSE.
C
C Exit, remebering to reset LSLLIB decode buffer to TXTBUF 
C
140	CALL BSLN
	RETURN
	END
