C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-05-31 18:05:42.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION READ_LOGICAL_NAMES()
C
***	MODULE READ_LOGICAL_NAMES
***	IDENT 29MY88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			29 MAY 1988
C
C Function to check for and read, if found, the logical name
C deifinitions which can be used to control the overall function
C and input and output file specifications used by FADTINPUT
C The logical names are:
C
C	LSL$FADTINPUT_ACTION	1 Create new FADT file
C				2 Edit existing fadt file
C				3 List existing FADT file
C
C	LSL$FADTINPUT_FADT	FADT file specification
C
C	LSL$FADTINPUT_RULE	Validation rule file specification
C
C	LSL$FADTINPUT_LIST	List output file specification
C
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$FADTINPUT:FADTINPUT.CMN'
	INCLUDE 'LSL$FADTINPUT:FADTINPUTMSG.PAR'
C
C w/s
	CHARACTER*200	FILNAM		! temporary store for file specs
	CHARACTER*200	COMMANDSTR	! from LSL$FADTINPUT_ACTION
	INTEGER		I,J		! temporary count
C
C functions
	LOGICAL		TRNALL		! translate logical name
	INTEGER		PARFILN		! parse file spec
C
C Assume success
C
	READ_LOGICAL_NAMES = .TRUE.
C
C Initialise the flags dealing with logical names
C
	HAD_LNM = .FALSE.	! .T. if had logical names
	WANT_FORMS = .TRUE.	! .T. if ever going to use forms
C
C Check if action lnm is defined, exit if it is not
C
	IF (.NOT.TRNALL('LSL$FADTINPUT_ACTION',COMMANDSTR)) GOTO 999
C
C Set flag to indicate not spooling list file
C
	SPOOL = .FALSE.
C
C Set up the command semaphore
C
	COMMAND = ICHAR(COMMANDSTR) - ICHAR('0')
C
C Check if the value is legal
C
	IF ((COMMAND.LT.1).OR.(COMMAND.GT.3)) THEN
	   CALL LSL_PUTMSG(FADTIN__ILLEGLNM,'LSL$FADTINPUT_ACTION')
	   GOTO 900
	ENDIF
C
C Set flag to indicate using logical names
C
	HAD_LNM = .TRUE.
C
C Attempt to read the FADT file specification
C
	IF (TRNALL('LSL$FADTINPUT_FADT',FILNAM)) THEN
C
C Have found logical name, so now parse it
C
	   READ_LOGICAL_NAMES = PARFILN(FADTFILE, FADTLEN, FILNAM,
     &		'LSL$FADT:FADT.FADT;0',.TRUE.)	
C
C Now check for errors in parsing the FADT file spec
C
	   IF (.NOT.READ_LOGICAL_NAMES) THEN
	      CALL LSL_PUTMSG(FADTIN__ILLEGLNM,'LSL$FADTINPUT_FADT')
	      GOTO 900
	   ENDIF
	ENDIF
C
C Set flag to indicate we want FADT file
C
	WANT_FADT = .TRUE.
C
C Now look for the appropriate file specifications, depending
C on the command value specified
C
	IF ((COMMAND.EQ.1).OR.(COMMAND.EQ.2)) THEN
C
C Creating or editing an FADT file, 
C Want to check for rule file
C
	   IF (TRNALL('LSL$FADTINPUT_RULE',FILNAM)) THEN
C
C Have found logical name, so now parse it
C
	      READ_LOGICAL_NAMES = PARFILN(RULEFILE, RULELEN, FILNAM,
     &		'LSL$DFAD_RULE:VALTAB.RULE;0',.TRUE.)	
C
C Now check for errors in parsing the rule file spec
C
	      IF (.NOT.READ_LOGICAL_NAMES) THEN
	         CALL LSL_PUTMSG(FADTIN__ILLEGLNM,'LSL$FADTINPUT_RULE')
	         CALL LSL_ADDMSG(READ_LOGICAL_NAMES)
	         GOTO 900
	      ENDIF
C
C Set flag to indicate we want a rule file
C
	      WANT_RULE = .TRUE.
C
C Otherwise, if no rule file specification logical name, don't
C use a rule file
C
	   ELSE
	      WANT_RULE = .FALSE.
	   ENDIF
C
C Check if performing a list operation
C
	ELSEIF (COMMAND.EQ.3) THEN
C
C Set flag to indicate don't want forms 
C i.e. doing this non-interactively
C
	   WANT_FORMS = .FALSE.
C
C Examine list file specification logical name
C
	   IF (TRNALL('LSL$FADTINPUT_LIST',FILNAM)) THEN
C
C Have found logical name, so now parse it
C
	      READ_LOGICAL_NAMES = PARFILN(LISTFILE, LISTLEN, FILNAM,
     &		'FADT.LIS;0',.TRUE.)	
C
C Now check for errors in parsing the list file spec
C
	      IF (.NOT.READ_LOGICAL_NAMES) THEN
	         CALL LSL_PUTMSG(FADTIN__ILLEGLNM,'LSL$FADTINPUT_RULE')
	         CALL LSL_ADDMSG(READ_LOGICAL_NAMES)
	         GOTO 900
	      ENDIF
C
C Set flag to indicate we want a list file
C
	      WANT_LIST = .TRUE.
C
C Otherwise, set up a default list file spec, based on
C the input FADT file spec
C
	   ELSE
C
C Make up a default list filename using FADT filename
C
C Find start of main part of FADT file spec
C
	      I = INDEX(FADTFILE,']')
	      IF (I.EQ.0) I = INDEX(FADTFILE,':')
C
C Find end of main part
C
	      J = INDEX(FADTFILE(I+1:),'.')
	      IF (J.EQ.0) J = INDEX(FADTFILE(I+1:),' ')
C
C Create list file spec and put it into field
C
	      FILNAM = FADTFILE(I+1:I+J-1)//'.LIS'
C
C Set file to indicate we want a list file
C
	      WANT_LIST = .TRUE.
	   ENDIF
	ENDIF
C
	GOTO 999
C
C Errors
C
900	READ_LOGICAL_NAMES = .FALSE.
	WANT_FORMS = .FALSE.
C
C Exit
C
999	RETURN
	END
