	LOGICAL FUNCTION LIST_FADT()
C
***	MODULE LIST_FADT
***	IDENT 13JU88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England.
C Author   : J.M. Billing			14 Jan 1988
C
C Modified : J.M. Billing			13 June 1988
C To perform full error checking and reporting in FORTRAN file 
C operations
C
C Function to output current FADT record to currently open
C text list file
C Returns .TRUE. if successful
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$FADTINPUT:FADTINPUT.CMN'
	INCLUDE 'LSL$FADTCMN:FADT.CMN'
	INCLUDE '($FORIOSDEF)'
	INCLUDE '($FORDEF)'
C
C w/s variables
	INTEGER*2	LINENO	! number of lines on current page
	INTEGER		OK
	INTEGER		IERR
	INTEGER		IO_STAT
	INTEGER		STATUS
C
C functions
	INTEGER		FLWSEL
	INTEGER		FLWSTR
C
C Assume success
C
	LIST_FADT = .TRUE.
C
C Select list output file
C
	OK = FLWSEL (LISTLUN)
	IF (.NOT.OK) THEN
	   CALL LSL_PUTMSG(OK)
	   LIST_FADT = .FALSE.
	   GOTO 10
	ENDIF
C
C Now read first FADT entry.
C
	READ (	UNIT = FADTLUN,
     &		KEYGE = 1,
     &		KEYID = 0,
     &		IOSTAT = IO_STAT) FADT
C
C Set current page line count to show need page header
C
	LINENO = PAGELEN
C
C Check for errors, but only report if not end of file error
C
10	IF (IO_STAT.NE.0) THEN
	   CALL ERRSNS(,,,,STATUS)
C
	   IF (	(STATUS.NE.FOR$_ENDDURREA).AND.
     &		(STATUS.NE.FOR$_ATTACCNON)) THEN
	      CALL LSL_PUTMSG(STATUS)
	      GOTO 30
	   ENDIF
C
	   IF (STATUS.EQ.FOR$_ATTACCNON) THEN
	      CALL FLWRTF
	      CALL FLWRTF('PREMATURE END OF FADT FILE')
	   ENDIF
C
	   GOTO 40
	ENDIF
C
C Check if need new page
C
	IF (LINENO.EQ.PAGELEN) THEN
	   LINENO = 0
C
C Do formfeed
C
	   CALL EXPAND ('%A1', FORMFEED)
	   OK = FLWSTR(, IERR)
	   IF (.NOT.OK) GOTO 20
C
C Output new page heading
C
	   CALL EXPAND(	'FADT record contents')
	   OK = FLWSTR(, IERR)
	   IF (.NOT.OK) GOTO 20
C
	   CALL EXPAND(	'     FAC    Type     FID  Height     Sec'//
     &			'     Rel     SMC  OrDiDe  WidRof  LenTre')
	   OK = FLWSTR(, IERR)
	   IF (.NOT.OK) GOTO 20
C
	   CALL EXPAND( '              0                         '//
     &			'                     Ori   Width  Length')
	   OK = FLWSTR(, IERR)
	   IF (.NOT.OK) GOTO 20
C
	   CALL EXPAND(	'              1                         '//
     &			'                     Dir   Width     -  ')
	   OK = FLWSTR(, IERR)
	   IF (.NOT.OK) GOTO 20
C
	   CALL EXPAND( '              2                         '//
     &			'                     Den  %%-roof  %%-tree')
	   OK = FLWSTR(, IERR)
	   IF (.NOT.OK) GOTO 20
C
	   CALL EXPAND
	   OK = FLWSTR(, IERR)
	   IF (.NOT.OK) GOTO 20
	ENDIF
C
C Increase line count
C
	LINENO = LINENO + 1
C
C Output this FADT
C
C
C Expand current FADT
C
	CALL EXPAND('%^W%I7 %I7 %I7 ', FADT.FAC, FADT.FAT, FADT.FID)
	CALL APPEND('%^W%I7 %I7 %I7 ', FADT.HEIGHT, FADT.SEC, FADT.REL)
	CALL APPEND('%^W%I7 %I7 ', FADT.SMC, FADT.ORI_DIR_DEN)
	CALL APPEND('%^W%I7 %I7 ', FADT.WIDTH_ROOF, FADT.LENGTH_TREE)
C
C Output it to list
C
	OK = FLWSTR(, IERR)
	IF (.NOT.OK) GOTO 20
C
C Read next sequential record
C
	READ (UNIT=FADTLUN,IOSTAT=IO_STAT) FADT
	GOTO 10
C
C LSLLIB type errors
C
20	CALL LSL_PUTMSG(OK)
	CALL LSL_ADDMSG(IERR)
C
C Other errors
C
30	LIST_FADT = .FALSE.
C
C exit
C
40	RETURN
	END
