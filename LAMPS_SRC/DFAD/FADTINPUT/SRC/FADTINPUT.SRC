C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-06-16 14:15:34.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	PROGRAM FADTINPUT
C
***	MODULE FADTINPUT
***	IDENT 09JN92
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author : J.M. Billing		13 Jan 1988
C
C Utility to allow input/modification/verification of ACC/DSI/FADT
C records in FADT indexed files.
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$FADTINPUT:FADTINPUT.CMN'
	INCLUDE '($SSDEF)'
C
C w/s
	INTEGER		STATUS
	INTEGER		NSTACK(2000) 	! array for sorting use
C
C Functions
	LOGICAL		FADTINPUT_INIT
	LOGICAL		FORM_SETUP
	LOGICAL		FORM_CLOSEDOWN
	LOGICAL		COMMAND_FORM
	LOGICAL		LIST_FORM
	LOGICAL		FILE_FORM
	LOGICAL		ENTER_RECORDS
	LOGICAL		OUTPUT_LIST
	LOGICAL		CLOSE_FILES
	LOGICAL		OPEN_FILES
	LOGICAL		READ_DEF
	INTEGER*4	CF
	EXTERNAL	CF              ! comparison function for sorting
	EXTERNAL	SWAP		! swapping routine for sorting
C
C Assume normal completetion
C
	STATUS = SS$_NORMAL
C
C Initialise LSLLIB
C
	CALL LSL_INIT
C
C Initialise FADTINPUT variables
C
	IF (.NOT.FADTINPUT_INIT()) GOTO 10
C
C Set up forms and workspaces
C Exit with abort status if fails
C
	IF (.NOT.FORM_SETUP()) GOTO 10
C
C Read FADT defaults
C
	IF (.NOT.READ_DEF()) GOTO 10
C
C Now sort FADT_DEFS into ascending order of FID
	CALL QUICK_SORT( FADT_DEFS, FADT_COUNT, CF, SWAP, NSTACK)
C
C Get command options
C Exit with abort status if fails
C
5	IF (.NOT.COMMAND_FORM()) GOTO 10
C
C Check if want to exit
C
	IF (COMMAND.EQ.4) GOTO 20
C
C Get relevant file names
C Loop back to command form on failure
C
	IF (COMMAND.EQ.3) THEN		! List option is 3
	   IF (.NOT.LIST_FORM()) GOTO 7
	ELSE
	   IF (.NOT.FILE_FORM()) GOTO 7
	ENDIF
C
C Open files
C Loop back to command form via close files if fails
C
	IF (.NOT.OPEN_FILES()) GOTO 7
C
C Do data entry or list out FADT file
C Loop back to command form via close files if fails
C
	IF (COMMAND.EQ.3) THEN
	   IF (.NOT.OUTPUT_LIST()) GOTO 7
	ELSE
	   IF (.NOT.ENTER_RECORDS()) GOTO 7
	ENDIF
C
C Close files
C
	IF (.NOT.CLOSE_FILES()) GOTO 10
C
C Go round again for next command if not using logical names
C to control actions
C
	IF (.NOT.HAD_LNM) GOTO 5
C
C Exit successfully
C
	GOTO 20
C
C Possibly non-fatal error
C Exit with abort status if fails
C
7	IF (.NOT.CLOSE_FILES()) GOTO 10
C
C Go round again for next command if not under logical name control
C
	IF (.NOT.HAD_LNM) GOTO 5
	GOTO 15
C
C Error routine
C
10	CALL CLOSE_FILES()
15	STATUS = SS$_ABORT
C
C Shut down forms prior to exit
C
20	IF (.NOT.FORM_CLOSEDOWN()) STATUS = SS$_ABORT
C
C Exit, clearing screen if have been using forms
C
	IF (WANT_FORMS) CALL WRITEF(
     &		'%A1%A1%A1%A1',FORMFEED,FORMFEED,FORMFEED,FORMFEED)
C
	CALL LSL_EXIT(STATUS)
	END 
