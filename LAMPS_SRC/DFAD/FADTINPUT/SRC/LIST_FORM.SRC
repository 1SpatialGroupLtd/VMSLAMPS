C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-05-29 20:29:32.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION LIST_FORM ()
C
***	MODULE LIST_FORM
***	IDENT 14JA88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England.
C Author: J.M. Billing			14 Jan 1988
C
C Function to handle form to deal with input of FADT file spec
C and output list file spec.
C Returns .TRUE. if completes successfully.
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$FADTINPUT:FADTINPUT.CMN'
C
C w/s
	CHARACTER*100	FILNAM		! file spec input from form
	CHARACTER*10	FID		! field identifier
	INTEGER		TERM		! form field terminator
	LOGICAL		OK		! return code status
	INTEGER		I,J		! for locating FADT file name
C
C functions
	LOGICAL		PARFILN		! parse file spec
	LOGICAL		TRNALL		! translate logical name
	INTEGER		SIGCHS		! number of sig't chrs in string
C
C Assume success
C
	LIST_FORM = .TRUE.
C
C Determine if logical names are being used, and skip this if they are
C
	IF (HAD_LNM) GOTO 20
C
C Set up defaults for file specifications
C
	WANT_FADT = .TRUE.
	FADTFILE = 'LSL$FADT:FADT.FADT;0'
	FADTLEN = LEN(FADTFILE)
C
	WANT_LIST = .TRUE.
	LISTFILE = 'FADT.LIS;0'
	LISTLEN = LEN(LISTFILE)
C
C Set up first field to access
C
5	FID = 'FADT'
C
C Set up the form
C
	CALL FDV$CLRSH('LSTFIL')
C
C Now read in file spec field, as named by FID
C
10	CALL FDV$GET(FILNAM,TERM,FID)
C
C Decide which is current file spec and process it
C
	IF (FID.EQ.'FADT') THEN
C
C It is FADT, so attempt to parse
C
	   OK = PARFILN (FADTFILE, FADTLEN, FILNAM, 
     &			'LSL$FADT:FADT.FADT;0', .TRUE. )
C
C If not legal, tell user and force re-entry
C
	   IF (.NOT.OK) THEN
	      CALL FORM_MSG('Illegal FADT file specification, '//
     &				'please reenter.',0)
	      GOTO 10
C
C If legal, set flag to indicate FADT must be opened
C
	   ELSE
	      WANT_FADT = .TRUE.
	   ENDIF
C
C Make up a default list filename using FADT filename
C
C Find start of main part of FADT file spec
C
	   I = INDEX(FADTFILE,']')
	   IF (I.EQ.0) I = INDEX(FADTFILE,':')
C
C Find end of main part
C
	   J = INDEX(FADTFILE(I+1:),'.')
	   IF (J.EQ.0) J = INDEX(FADTFILE(I+1:),' ')
C
C Create list file spec and put it into field
C
	   FILNAM = FADTFILE(I+1:I+J-1)//'.LIS'
	   CALL FDV$PUT(FILNAM,'LIST')
C
C Otherwise, if this is the list file spec, so attempt to parse it
C
	ELSEIF (FID.EQ.'LIST') THEN
	   OK = PARFILN(LISTFILE, LISTLEN, FILNAM,
     &			'FADT.LIS;0', .TRUE.)
C
C If not legal, tell user and force re-entry
C 
	   IF (.NOT.OK) THEN
	      CALL FORM_MSG('Illegal list file specification, '//
     &				'please reenter.',0)
	      GOTO 10
C
C If legal, set flag to indicate list file must be opened
C
	   ELSE
	      WANT_LIST = .TRUE.
	   ENDIF
C
	ELSE
	   IF (FILNAM.EQ.'Y') THEN
	      SPOOL = .TRUE.
	   ELSEIF (FILNAM.EQ.'N') THEN
	      SPOOL = .FALSE.
	   ELSE
	      CALL FORM_MSG('Should be ''Y'' or ''N''.',0)
	      GOTO 10
	   ENDIF
	ENDIF
C
C Check if finished
C
	IF (TERM.EQ.0) GOTO 20
C
C Otherwise process terminator, and find which field to move to
C
	CALL FDV$PFT
	CALL FDV$GCF(FID)
	GOTO 10
C
C Exit
C
20	RETURN
	END
