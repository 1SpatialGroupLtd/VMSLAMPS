C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-06-18 19:18:46.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION FADT_WRITE (REC,LUN)
C
***	MODULE FADT_WRITE
***	IDENT 13JU88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author   : J.M. Billing		13 Jan 1988
C
C Modified : J.M. Billing		13 June 1988
C To perform full error checking in FORTRAN file operations
C
C Function to attempt to write FADT record REC to FADT file on LUN.
C Will first attempt to read record, and if it exists, will REWRITE
C rather than write.
C Returns .TRUE. if succeeds.
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$FADTINPUT:FADTINPUT.CMN'
	INCLUDE 'LSL$FADTCMN:FADT.CMN'
	INCLUDE '($FORIOSDEF)'
	INCLUDE '($FORDEF)'
C
C arguments
	RECORD /FADT_STRUCT/ REC	! record passed for writing
	INTEGER	LUN			! lun to be written on
C
C w/s variables
	INTEGER STATUS			! error condition
	INTEGER IO_STAT			! error condition in read
	RECORD /FADT_STRUCT/ FADT_TEMP	! Dummy FADT record
C
C Assume success
C
	FADT_WRITE = .TRUE.
C
C Attempt to read FADT record into dummy variable to test if it exists
C
	READ (	UNIT = LUN,
     &		KEY = REC.FAC,
     &		KEYID = 0,
     &		IOSTAT = IO_STAT) FADT_TEMP
C
C Check for error, if none, then should WRITE record
C
	IF (IO_STAT.NE.0) THEN
	   CALL ERRSNS (,,,,STATUS)
C
C In particular, record not found, which indicates should WRITE new
C record.
C
	   IF (STATUS.NE.FOR$_ATTACCNON) THEN
	      CALL LSL_PUTMSG(STATUS)	! some other error
	      FADT_WRITE = .FALSE.
C
	   ELSE
	      WRITE (UNIT = LUN, IOSTAT = IO_STAT) REC
	   ENDIF
C
C Read record successfully, so must REWRITE new copy
C
	ELSE
	   REWRITE (UNIT = LUN, IOSTAT = IO_STAT) REC
	ENDIF
C
C Exit
C
	RETURN
	END
