C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-02-10 17:04:06.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION ACCREG_FORM(REG)
C
***	MODULE ACCREG_FORM
***	IDENT 18JA88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England.
C Author: J.M. Billing			18 Jan 1988
C
C Function to accept input through form for ACCREG record for
C accuracy region specified by REG. Key calculated for REG=n by:
C ACCREG(n)     KEY = ACCREG_BASE + n * ACCREG_INC
C ACCREGLL(n,m) KEY = ACCREG_BASE + n * ACCREG_INC + m * ACCREG_PT
C Returns .TRUE. if succeeds
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$FADTINPUT:FADTINPUT.CMN'
	INCLUDE 'LSL$FADTCMN:ACC.CMN'
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'
C
C argument
	INTEGER*2	REG
C
C w/s variables
	CHARACTER*10	FID		! form field identifier
	CHARACTER*200	FVAL		! form value string
	CHARACTER*10	LLSTR		! temp, to id lat/long fields
	INTEGER*2	I		! count
	INTEGER		TERM		! form field terminator
	INTEGER		STATUS		! status of last FDV call
C
C functions:
	LOGICAL		RDINT
	LOGICAL		ACCREG_READ
	LOGICAL		ACCREG_WRITE
	LOGICAL		LATLONG_VALIDATE
C
C Assume success
C
	ACCREG_FORM = .TRUE.
C
C Set up the form
C
	CALL FDV$CLRSH('ACCREG')
C
C Try to read ACCREG from FADT file
C
	IF (ACCREG_READ(REG)) THEN
C
C Have ACCREG, so display current values
C -1 in accuracy fields implies 'NA'
C
	   IF (ACCREG(REG).ABS_HORIZ.GE.0) THEN
	      CALL EXPAND('%^W%N', ACCREG(REG).ABS_HORIZ)
	   ELSE
	      CALL EXPAND('NA')
	   ENDIF
	   CALL FDV$PUT(EXPDSC, 'ABS')
C
	   IF (ACCREG(REG).REL_HORIZ.GE.0) THEN
	      CALL EXPAND('%^W%N', ACCREG(REG).REL_HORIZ)
	   ELSE
	      CALL EXPAND('NA')
	   ENDIF
	   CALL FDV$PUT(EXPDSC, 'REL')
C
	   CALL EXPAND('%^W%N', ACCREG(REG).NO_POINTS)
	   CALL FDV$PUT(EXPDSC, 'NUM')
C
C Including values of any lat/long fields
C
	   DO 5 I = 1, ACCREG(REG).NO_POINTS
C
	      CALL EXPAND('%^W%N  ',I)
	      FID = 'LAT'
	      FID(4:4) = CHAR(EXPBUF(1))
	      FID(5:5) = CHAR(EXPBUF(2))
	      CALL EXPAND('%S',ACCREGLL(REG,I).LAT)
	      CALL FDV$PUT(EXPDSC, FID)
C
	      CALL EXPAND('%^W%N  ',I)
	      FID = 'LONG'
	      FID(5:5) = CHAR(EXPBUF(1))
	      FID(6:6) = CHAR(EXPBUF(2))
	      CALL EXPAND('%S',ACCREGLL(REG,I).LONG)
	      CALL FDV$PUT(EXPDSC, FID)
5	   CONTINUE
C
C Otherwise, set up default values
C
	ELSE
	   ACCREG(REG).ABS_HORIZ = -1		! 'NA'
	   ACCREG(REG).REL_HORIZ = -1		! 'NA'
	   ACCREG(REG).NO_POINTS = 0		! '0'
C
C Including nulls for lat/long values
C
	   DO 7 I = 1,14
	      ACCREGLL(REG,I).LAT = ' '
	      ACCREGLL(REG,I).LONG = ' '
7	   CONTINUE
	ENDIF
C
C Set FID to point to first field
C
	FID = 'ABS'
C
C Now allow user to change/enter values, returned in FVAL(=TXTBUF)
C
10	CALL FDV$GET(FVAL,TERM,FID)
C
C Check if abort form terminator
C
	IF (TERM.EQ.ABORT_FORM) GOTO 30
C
C Now read integer values into ACCREG record
C
C Reset decode pointer
C
	CALL SETAUX(%REF(FVAL),200)
C
C Read each integer
C
	IF (FID.EQ.'ABS') THEN
	   IF (FVAL.EQ.'NA') THEN
	      ACCREG(REG).ABS_HORIZ = -1
	   ELSEIF (RDINT(ACCREG(REG).ABS_HORIZ)) THEN
	      GOTO 20
	   ENDIF
C
	ELSEIF (FID.EQ.'REL') THEN
	   IF (FVAL.EQ.'NA') THEN
	      ACCREG(REG).REL_HORIZ = -1
	   ELSEIF (RDINT(ACCREG(REG).REL_HORIZ)) THEN
	      GOTO 20
	   ENDIF
C
	ELSEIF (FID.EQ.'NUM') THEN
	   IF (RDINT(ACCREG(REG).NO_POINTS)) GOTO 20
	   IF (ACCREG(REG).NO_POINTS.GT.14) THEN
	      CALL FORM_MSG('Maximum number of region points is 14',0)
	      GOTO 10
	   ELSEIF (ACCREG(REG).NO_POINTS.LT.3) THEN
	      CALL FORM_MSG('Minimum number of region points is 3',0)
	      GOTO 10
	   ENDIF
C
C Deal with latitude values
C
	ELSEIF (FID(1:3).EQ.'LAT') THEN
	   I = 0
C
C Increment I until find poscript number of 'LAT' in FID
C
12	   I = I + 1
	   CALL EXPAND('%^W%N  ',I)
C
C Check if number in EXPBUF(='nn') is equal to 
C number after 'LAT' in FID
C
	   IF  ((CHAR(EXPBUF(1)).NE.FID(4:4)).OR.
     &		(CHAR(EXPBUF(2)).NE.FID(5:5))) GOTO 12
C
C I now contains index number of latitude value entered
C
	   ACCREGLL(REG,I).LAT = FVAL
	   IF(.NOT.LATLONG_VALIDATE(ACCREGLL(REG,I).LAT)) GOTO 10
C
C Deal with longitude values
C
	ELSEIF (FID(1:4).EQ.'LONG') THEN
	   I = 0
C
C Increment I until find poscript number of 'LONG' in FID
C
15	   I = I + 1
	   CALL EXPAND('%^W%N  ',I)
C
C Check if number in EXPBUF(='nn') is equal to 
C number after 'LONG' in FID
C 
	   IF  ((CHAR(EXPBUF(1)).NE.FID(5:5)).OR.
     &		(CHAR(EXPBUF(2)).NE.FID(6:6))) GOTO 15
C
C I now contains index number of longitude value entered
C
	   ACCREGLL(REG,I).LONG = FVAL
	   IF(.NOT.LATLONG_VALIDATE(ACCREGLL(REG,I).LONG)) GOTO 10
	ENDIF
C
C Process terminator
C
	CALL FDV$PFT
C
C Check status, so that if RETURN is terminator can tell if form
C completed successfully
C
	CALL FDV$STAT(STATUS)
C
C Save old FID, so that can restore it if attempting to enter too
C many points, and get name of new one
C
	FVAL = FID
	CALL FDV$GCF(FID)
C
C Check terminator and attempting to enter too many points
C and loop if not finished
C
	IF (TERM.NE.0) THEN
C
C Check if latitude i.e. start of new point
C
	   IF (FID(1:3).EQ.'LAT') THEN
	      I = 0
C
17	      I = I + 1
	      CALL EXPAND('%^W%N  ',I)
C
C Restore old FID if have gone too far
C
	      IF (I.GT.ACCREG(REG).NO_POINTS) THEN
	         CALL FORM_MSG('Attempt to enter too many points',0)
	         FID = FVAL
C
	      ELSEIF   ((CHAR(EXPBUF(1)).NE.FID(4:4)).OR.
     &			(CHAR(EXPBUF(2)).NE.FID(5:5))) THEN
	         GOTO 17
	      ENDIF
	   ENDIF
C
C Go round again
C
	   GOTO 10
	ENDIF
C
C Check status, and if not completed form successfully, go round again
C
	IF (STATUS.NE.1) GOTO 10
C
C Now output new ACCREG record
C
	IF (.NOT.ACCREG_WRITE(REG)) THEN
	   CALL FORM_MSG('Cannot write that to FADT file',0)
	   ACCREG_FORM = .FALSE.
	ENDIF
	GOTO 30
C
C Error
C
20	CALL FORM_MSG('This entry is not valid, please try again',0)
	GOTO 10
C
C Exit
C
30	CALL BSLN
	RETURN
	END
