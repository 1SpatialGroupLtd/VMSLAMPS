C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-06-17 15:07:40.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION ACC_FORM()
C
***	MODULE ACC_FORM
***	IDENT 17JN92
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England.
C Author   : J.M. Billing			18 Jan 1988
C
C Modified : J.M. Billing			13 June 1988
C To allow for 2 characters in the field determining the number
C of accuracy regions (i.e. 00 - 09) to conform with the
C DLMS specification even though one of the characters will
C always be zero.
C
C Function to accept input through form for ACC.
C Returns .TRUE. if succeeds
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$FADTINPUT:FADTINPUT.CMN'
	INCLUDE 'LSL$FADTCMN:ACC.CMN'
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'
C
C w/s variables
	CHARACTER*100	FVAL		! form field value
	CHARACTER*10	FID		! field identifier
	INTEGER		TERM		! field terminator
	INTEGER		STATUS		! FDV call exit status
	INTEGER*2	REG		! accuracy region number
C
C functions:
	LOGICAL		RDINT
	LOGICAL		ACC_READ
	LOGICAL		ACC_WRITE
	LOGICAL		ACCREG_FORM
	LOGICAL		TRNALL
C
C Assume success
C
	ACC_FORM = .TRUE.
C
C Set up the form
C
	CALL FDV$CLRSH('ACC')
C
C Try to read ACC from FADT file
C
	IF (ACC_READ()) THEN
C
C Have ACC, so display current values
C -1 in accuracy field implies 'NA'
C
	   IF (ACC.ABSOLUTE_HORIZ.GE.0) THEN
	      CALL EXPAND('%^W%N', ACC.ABSOLUTE_HORIZ)
	   ELSE
	      CALL EXPAND('NA')
	   ENDIF
	   CALL FDV$PUT(EXPDSC, 'ABS')
C
	   IF (ACC.RELATIVE_HORIZ.GE.0) THEN
	      CALL EXPAND('%^W%N', ACC.RELATIVE_HORIZ)
	   ELSE
	      CALL EXPAND('NA')
	   ENDIF
	   CALL FDV$PUT(EXPDSC, 'REL')
C
	   IF (ACC.PREDOM_HEIGHT.GE.0) THEN
	      CALL EXPAND('%^W%N', ACC.PREDOM_HEIGHT)
	   ELSE
	      CALL EXPAND('NA')
	   ENDIF
	   CALL FDV$PUT(EXPDSC, 'PRDHGT')
C
	   CALL EXPAND('0%^W%N', ACC.MULTIPLE_OUTLINE)
	   CALL FDV$PUT(EXPDSC, 'MULOUT')
C
C Otherwise, set up default values
C
	ELSE
	   ACC.MULTIPLE_OUTLINE = ACC_DEF.MULTIPLE_OUTLINE
	   IF (ACC.MULTIPLE_OUTLINE.EQ.-999) THEN	! expand null string
	      CALL EXPAND('%S',' ')
	   ELSE
	      CALL EXPAND('%^W%N', ACC.MULTIPLE_OUTLINE)
	   ENDIF
	   CALL FDV$PUT(EXPDSC, 'MULOUT')
C
	   ACC.ABSOLUTE_HORIZ = ACC_DEF.ABSOLUTE_HORIZ
	   IF (ACC.ABSOLUTE_HORIZ.GE.0) THEN
	      CALL EXPAND('%^W%N', ACC.ABSOLUTE_HORIZ)
	   ELSEIF (ACC.ABSOLUTE_HORIZ.EQ.-999) THEN	! expand null string
	      CALL EXPAND('%S',' ')
	   ELSE
	      CALL EXPAND('NA')
	   ENDIF
	   CALL FDV$PUT(EXPDSC, 'ABS')
C
	   ACC.RELATIVE_HORIZ = ACC_DEF.RELATIVE_HORIZ 
	   IF (ACC.RELATIVE_HORIZ.GE.0) THEN
	      CALL EXPAND('%^W%N', ACC.RELATIVE_HORIZ)
	   ELSEIF (ACC.RELATIVE_HORIZ.EQ.-999) THEN	! expand null string
	      CALL EXPAND('%S',' ')
	   ELSE
	      CALL EXPAND('NA')
	   ENDIF
	   CALL FDV$PUT(EXPDSC, 'REL')
C
	   ACC.PREDOM_HEIGHT = ACC_DEF.PREDOM_HEIGHT
	   IF (ACC.PREDOM_HEIGHT.GE.0) THEN
	      CALL EXPAND('%^W%N', ACC.PREDOM_HEIGHT)
	   ELSEIF (ACC.PREDOM_HEIGHT.EQ.-999) THEN	! expand null string
	      CALL EXPAND('%S',' ')
	   ELSE
	      CALL EXPAND('NA')
	   ENDIF
	   CALL FDV$PUT(EXPDSC, 'PRDHGT')
	ENDIF
C
C Set first field to be entered to ABS
C
	FID = 'ABS'
C
C Now allow user to change/enter next value
C
10	CALL FDV$GET(FVAL,TERM,FID)
C
C Check if abort form terminator
C
	IF (TERM.EQ.ABORT_FORM) GOTO 30
C
C Now read integer values into ACC record
C
C If string is 'NA' then swap it with -1
C
	IF (FVAL.EQ.'NA') FVAL='-1'
C
C Reset decode pointer
C
	CALL SETAUX(%REF(FVAL),100)
C
C Read each integer
C
	IF (FID.EQ.'ABS') THEN
	   IF (RDINT(ACC.ABSOLUTE_HORIZ)) GOTO 20
C
	ELSEIF (FID.EQ.'REL') THEN
	   IF (RDINT(ACC.RELATIVE_HORIZ)) GOTO 20
C
	ELSEIF (FID.EQ.'PRDHGT') THEN
	   IF (RDINT(ACC.PREDOM_HEIGHT)) GOTO 20
C
	ELSEIF (FID.EQ.'MULOUT') THEN
	   IF (RDINT(ACC.MULTIPLE_OUTLINE)) GOTO 20
C
C Check that the value is legal (between 0 and 9)
C
	   IF ( (ACC.MULTIPLE_OUTLINE.LT.0).OR.
     &		(ACC.MULTIPLE_OUTLINE.GT.9)) THEN
	      CALL FORM_MSG('This value should be between 00 and 09',0)
	      GOTO 10
	   ENDIF
	ENDIF
C
C Process terminator
C
	CALL FDV$PFT
C
C Find status i.e. is everything ok
C
	CALL FDV$STAT(STATUS)
C
C Find next field
C
	CALL FDV$GCF(FID)
C
C If not RETURN, loop again
C
	IF (TERM.NE.0) GOTO 10
C
C If status not ok (i.e. form not complete), loop again
C
	IF (STATUS.NE.1) GOTO 10
C
C Now deal with any accuracy regions
C
	IF (ACC.MULTIPLE_OUTLINE.GT.0) THEN
	   DO 15 REG = 1, ACC.MULTIPLE_OUTLINE
	      IF (.NOT.ACCREG_FORM(REG)) GOTO 25
15	   CONTINUE
	ENDIF
C
C Now output new ACC record
C
	IF (.NOT.ACC_WRITE()) GOTO 25
	GOTO 30
C
C Error
C
20	CALL FORM_MSG('This entry is not valid, please try again',0)
	GOTO 10
C
25	ACC_FORM = .FALSE.
C
C Exit
C
30	CALL BSLN
	RETURN
	END
