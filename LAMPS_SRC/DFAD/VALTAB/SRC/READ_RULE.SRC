C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-09-05 13:20:02.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION READ_RULE()
C
***	MODULE READ_RULE
***	IDENT 05SE90
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England.
C Author: J.M. Billing			3 Feb 1988
C Modified: J.M. Cadogan		5 Sep 1990
C
	IMPLICIT NONE
C
C common blocks
	INCLUDE 'LSL$CMNLSL:READSTR.PAR'    ! LSLLIB text buffer
	INCLUDE 'VALTAB2INDEX.CMN'
	INCLUDE 'LSL$FADTCMN:RULE.CMN'
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'	! text buffer
C
C Functions
C
	INTEGER*4	FLRLIN		! read line from file
	LOGICAL		RDLONG		! read a longword integer
	LOGICAL		RDINT		! read a word integer
	LOGICAL		RDCHS		! read a character skipping blanks
	LOGICAL		READSTR		! read a string
C
C w/s variables
	INTEGER		IO_STAT		! I/O status return
	CHARACTER*122	RULE_LINE	! rule line from VALTAB file
	INTEGER*4	LEN		! string length
	INTEGER*4	RETCOD		! system error code
	INTEGER*4	STATUS		! function return status
	INTEGER*4	CODE		! element in record key
	INTEGER*4	TYPE		! element in record key
	INTEGER*4	LEV		! element in record key
	INTEGER*4	PTR		! element in record key
	INTEGER*4	I		! loop counter
	INTEGER*2	NPOS		! column position in file
	BYTE		ICH		! character read
C
C Assume success
C
	READ_RULE = .TRUE.
	CALL SET_TXTLIM(122)
C
C Find next line, will be started by a digit in column 2
C
5	IO_STAT = FLRLIN(,,,RETCOD)
	IF (.NOT.IO_STAT) GOTO 900		! error
C
	CALL BSLN
	LEN = READSTR(RULE_LINE,,,RETCOD)
C
C Loop if not start of line
C
	IF (RULE_LINE(2:2).LT.'0'.OR.RULE_LINE(2:2).GT.'9') GOTO 5
C
C Otherwise read the record into the RULE structure starting with RULE.KEY
C
	CALL BSLN
C
C Read CODE, TYPE, LEV, and PTR entries, then do calculation to obtain
C the RULE.KEY.
C
	STATUS = RDLONG(CODE)
	STATUS = RDLONG(TYPE)
	STATUS = RDLONG(LEV)
	STATUS = RDLONG(PTR)
C
	RULE.KEY = PTR+10*(LEV+10*(TYPE+10*CODE))
C
C Now read HEIGHT section.
C
	STATUS = RDCHS(ICH)			! discard colon
C
C Read RULE.HEIGHT_ID and RULE.HEIGHT 1,2,3,4
C 
	STATUS = RDINT(RULE.HEIGHT_ID)
	NPOS = 23
	DO 10 I =1,4
	   CALL SETWIN(NPOS,6)
	   STATUS = RDINT(RULE.HEIGHT(I))
	   IF (STATUS) RULE.HEIGHT(I) = 0
	   NPOS = NPOS + 6
10	CONTINUE	
C
C Now read SMC section.
C
	CALL SETWIN(NPOS)
	STATUS = RDCHS(ICH)			! discard colon
C
C Read RULE.SMC_ID and RULE.SMC 1,2,3,4
C 
	STATUS = RDINT(RULE.SMC_ID)
	NPOS = 50
	DO 20 I =1,4
	   CALL SETWIN(NPOS,3)
	   STATUS = RDINT(RULE.SMC(I))
	   IF (STATUS) RULE.SMC(I) = 0
	   NPOS = NPOS + 3
20	CONTINUE	
C
C Now read ORI/DIR/DEN section.
C
	CALL SETWIN(NPOS)
	STATUS = RDCHS(ICH)			! discard colon
C
C Read RULE.ORI_DIR_DEN_ID and RULE.ORI_DIR_DEN 1,2,3,4
C 
	STATUS = RDINT(RULE.ORI_DIR_DEN_ID)
	NPOS = 65
	DO 30 I =1,4
	   CALL SETWIN(NPOS,3)
	   STATUS = RDINT(RULE.ORI_DIR_DEN(I))
	   IF (STATUS) RULE.ORI_DIR_DEN(I) = 0
	   NPOS = NPOS + 3
30	CONTINUE	
C
C Now read WIDTH ROOF section.
C
	CALL SETWIN(NPOS)
	STATUS = RDCHS(ICH)			! discard colon
C
C Read RULE.WIDTH_ROOF_ID and RULE.WIDTH_ROOF 1,2,3,4
C 
	STATUS = RDINT(RULE.WIDTH_ROOF_ID)
	NPOS = 80
	DO 40 I =1,4
	   CALL SETWIN(NPOS,4)
	   STATUS = RDINT(RULE.WIDTH_ROOF(I))
	   IF (STATUS) RULE.WIDTH_ROOF(I) = 0
	   NPOS = NPOS + 4
40	CONTINUE	
C
C Now read LENGTH TREE section.
C
	CALL SETWIN(NPOS)
	STATUS = RDCHS(ICH)			! discard colon
C
C Read RULE.LENGTH_TREE_ID and RULE.LENGTH_TREE 1,2,3,4
C 
	STATUS = RDINT(RULE.LENGTH_TREE_ID)
	NPOS = 99
	DO 50 I =1,4
	   CALL SETWIN(NPOS,4)
	   STATUS = RDINT(RULE.LENGTH_TREE(I))
	   IF (STATUS) RULE.LENGTH_TREE(I) = 0
	   NPOS = NPOS + 4
50	CONTINUE	
C
C Now read NEXT pointer
C
	CALL SETWIN(NPOS)
	STATUS = RDCHS(ICH)			! discard colon
	STATUS = RDINT(RULE.NEXT)
C
	GOTO 999
C
C Errors
C
900	READ_RULE = .FALSE.
C
C Exit
C
999	RETURN
	END
