C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-03-27 15:17:00.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION AC_VAL()
C
***	IDENT	26MR91
***	MODULE	AC_VAL
C
C	Copyright Laser-Scan Laboratories, Cambridge, England.
C	Author	Andrew Morris
C	Created June 1984
C
CMOD	Modified from original DFADVAL for BAE/Saudi to do
C	more extensive validation against DLMS spec and optional
C	rule file.	
C	This routine comes from code originally in DFADVAL main
C	routine.				JMB 17 Jan 1988
C
	IMPLICIT NONE
C
C common blocks
	INCLUDE 'LSL$DFADVAL:DFADVAL.CMN'
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'
	INCLUDE 'LSL$CMNLSL:CMDCOM.CMN'
C
C w/s variables
	INTEGER		CMD			! command number
	INTEGER		I			! temporary/count
C
C externals
	EXTERNAL	ACKW_CMD_TABLE
C
C functions
	LOGICAL		FADT_VALIDATE
	LOGICAL		ACCREG_VAL
	INTEGER		RDCOMM
C
C Assume success
C
	AC_VAL = .TRUE.
C
C Check entry inside feature
C
10	IF (LEVEL.LT.FTRLEV) THEN
	   CALL FLWRTF('E    AC entry not within feature')
	   NERRS = NERRS+1
	END IF
	CALL EIHRI(ACN,1,1)	! read AC number
C
C Skip tests if a registration feature in layer 0
	IF(FCODE.EQ.300.AND.OSN.EQ.0)GOTO 50
C
C Update AC number within feature
C
	NACS = NACS + 1
C
C Record if it is AC7 or AC8
C
	IF (ACN.EQ.8) THEN
	   HADAC8 = .TRUE.
	   FADTARR(ITYPE) = -1
	   IF (.NOT.ACCREG_VAL()) GOTO 40
C
C Check up on AC7s
C
	ELSE IF (ACN.EQ.7) THEN
	   HADAC7 = .TRUE.
C
C don't examine AC if feature type to be obtained from FS entry
C and AC validation has not been requested.
C
	   IF (.NOT.(ACSW.OR.TYPE_FROM_AC)) GOTO 50
C
C Clear counts indicating which fields of FADT are found
C There are more than the actual number of fields in an FADT
C record to differentiate between variants for different types
C
	   DO 20 I = 1,20
	      FADTCOUNT(I) = 0
20	   CONTINUE
C
C if want to examine AC, get its text into TXTBUF
C
	   CALL EIHR(TXTBUF,IELEN-3,4)
C
C set up txtptr
C
	   TXTPTR = (IELEN-3)*2
	   IF (TXTBUF(TXTPTR).EQ.0) TXTPTR = TXTPTR - 1
	   IF (TXTPTR.GT.80) THEN
	      IF (TXTPTR.GT.1024) TXTPTR = 1024
	      CALL SET_TXTLIM(TXTPTR)
	   ENDIF
C
	   CALL BSLN
	   FADTARR(ITYPE) = -1
C
C read FADT from AC7 text using command table in 'free format' 
C
C Look up in command table
C
	   NOMESS=.TRUE.
C	   
30	   CMD = RDCOMM(ACKW_CMD_TABLE)
C
C If have found a command/field, inc count showing that field found
C so can check found once and once only
C
	   IF (CMD.GT.0) THEN
	      FADTCOUNT(CMD) = FADTCOUNT(CMD) + 1
C
C And it has arguments, take the first
C
	      IF (CMDICT.GT.0) FADTARR(CMD) = INTARG(1)
C
C Report if has more than one
C
	      IF ((CMDICT.NE.1).AND.(WNGSW)) THEN
	         CALL EXPAND('W    FSN %I: More than one value ',FSN)
	         CALL APPEND('in AC7/FADT record field %S',%REF(CMDFST))
	         CALL FLWSTR
	         NWNGS = NWNGS + 1
	         CALL EXPAND('Feature %N: more than one value ',FSN)
	         CALL APPEND('in FADT record field %S',%REF(CMDFST))
	         CALL LCM_MSG(EXPDSC)
	      ENDIF
C
C Loop to get next field
C
	      GOTO 30
	   ENDIF
C
C extract the feature type if required
	   IF(TYPE_FROM_AC)THEN
	     TYPE=FADTARR(ITYPE)
	   ENDIF
C	  
C Check for type being undefined
	   IF(TYPE.EQ.-1)THEN
	     CALL FLWRTF
     +       ('E    FSN %^L%I: Feature type undefined ',FSN)
	     NERRS = NERRS+1
	     CALL EXPAND('Feature %N: ',FSN)
	     CALL APPEND('Feature type undefined')
	     CALL LCM_MSG(EXPDSC)
	     GOTO 50
	   ENDIF
C	     
C Now validate it
C
	   IF (.NOT.FADT_VALIDATE()) GOTO 40
C
C validate ACs?
C
	   IF (.NOT.ACSW)GOTO 50

C
C perform checks on types here only when the type comes from AC.
C
	   IF(TYPE_FROM_AC)THEN
C
C feature-1 not type 2?
C
	      IF (FSN.EQ.1.AND.TYPE.NE.2) THEN
	         CALL FLWRTF('E    Feature 1 not type 2')
	         NERRS = NERRS+1
	         CALL LCM_MSG('Feature 1: not type 2')
	      END IF
C
	      IF ( OSN.GT.0 .AND. INFSW .AND. NFTRS.EQ.1 .AND. NACS.EQ.1) 
     +           CALL FLWRTF('     First feature %^L%N is type %^W%N',
     +                       FSN,TYPE )
C
C check type sequence i.e must be same in layer
C
	      IF (HADTYP) THEN
	         IF (WNGSW.AND.TYPE.NE.LTYPE) THEN
	            CALL FLWRTF
     +     ('W    FSN %^L%I: Change from type %^W%I to %I within layer',
     +     FSN,LTYPE,TYPE)
	            NWNGS = NWNGS+1
	            CALL EXPAND('Feature %N: change from type ',FSN)
	            CALL APPEND('%^W%I to %I ',LTYPE,TYPE)
	            CALL APPEND('within layer')
	            CALL LCM_MSG(EXPDSC)
	         ENDIF
	      ELSE
	         HADTYP = .TRUE.
	         LTYPE = TYPE
	      ENDIF
C
C Check if type > last type
C
	      IF (WNGSW.AND.TYPE.GT.LTYPE) THEN
	         CALL FLWRTF
     +  ('W    FSN %^L%I: Feature type (%^W%N) > last feature type (%N)'
     +  ,FSN,TYPE,LTYPE)
	         NWNGS = NWNGS+1
	         CALL EXPAND('Feature %N: ',FSN)
	         CALL APPEND('feature type (%N)',TYPE)
	         CALL APPEND(' > last feature type (%N)',LTYPE)
	         CALL LCM_MSG(EXPDSC)
	      ENDIF
	   ENDIF
	ENDIF
C
	GOTO 50
C
C Errors
C
40	AC_VAL = .FALSE.
C
C Exit
C
50	RETURN
	END
