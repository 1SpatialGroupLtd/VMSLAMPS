C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-10-13 11:15:40.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION NF_VAL()
C
***	IDENT	13OC89
***	MODULE	NF_VAL
C
C	Copyright Laser-Scan Laboratories, Cambridge, England.
C	Author	Andrew Morris
C	Created June 1984
C
CMOD	Modified from original DFADVAL for BAE/Saudi to do
C	more extensive validation against DLMS spec and optional
C	rule file.	
C	This routine comes from code originally in DFADVAL main
C	routine.				JMB 17 Jan 1988
C
	IMPLICIT NONE
C
C Common block
	INCLUDE 'LSL$DFADVAL:DFADVAL.CMN'
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'
	INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'
C

C Locals
	INTEGER*4	SAVED_LPOSH	!as it says
C
C-------------------------------------------------------------------
C Assume success
C
	NF_VAL = .TRUE.
C
C Check within layer
C
	IF (LEVEL.LT.OVLLEV) THEN
	   CALL FLWRTF('E    Feature not within layer')
	   NERRS = NERRS+1
C
C Check that previous feature terminated
C
	ELSE IF (LEVEL.EQ.FTRLEV) THEN
	   CALL EF_VAL
	   CALL FLWRTF('E    Feature not terminated')
	   NERRS = NERRS+1
	END IF
C
C Get feature number
C
	CALL EIHRI(FSN,1,1)	! read feature number
	FSN = IAND(FSN,65535)	! convert to unsigned longword
C
C If layer 0 we must check whether the feature is a registration
C mark (ie. feature code 300)
	IF(OSN.EQ.0)THEN
	  SAVED_LPOSH=LPOSH
	  CALL IFFNXC('FS',IELEN)
	  IF(IELEN.EQ.-1)THEN
	    CALL IFFPKE(IECODE,IELEN,SAVED_LPOSH)
	    GOTO 999
	  ENDIF	    
C
	  CALL EIHRI(FCODE,1,1)	! read feature code
	  IF(FCODE.EQ.300)THEN
	    GOTO 999
	  ELSE
	    CALL IFFPKE(IECODE,IELEN,SAVED_LPOSH)
	  ENDIF
        ENDIF
C	  
C features missing from sequence?
C
	IF (INFSW.AND.FSN.GT.LFSN+1) THEN
	   IF (FSN.EQ.LFSN+2) THEN
	      CALL FLWRTF('     FSN %^L%N missing',LFSN+1)
	   ELSE
	      CALL FLWRTF('     FSN %^L%N - %N missing',LFSN+1,FSN-1)
	   END IF
	END IF
C
C illegal feature number?
C
	IF (FSN.GT.16383) THEN
	   CALL FLWRTF('E    FSN %^L%I: Illegal feature number (
     +greater than 16383)',FSN)
	   NERRS = NERRS+1
	   CALL EXPAND('Feature %N: ',FSN)
	   CALL APPEND('illegal feature number (greater than 16383)')
	   CALL LCM_MSG(EXPDSC)
C
C feature out of sequence?
C
	ELSE IF (FSN.LE.LFSN) THEN
	   CALL FLWRTF
     +     ('E    FSN %^L%I: Out of sequence',FSN)
	   NERRS = NERRS+1
	   CALL EXPAND('Feature %N: ',FSN)
	   CALL APPEND('out of sequence')
	   CALL LCM_MSG(EXPDSC)
	ELSE
	   LFSN = FSN
	END IF
C
C had a feature-1?
C
	IF (FSN.EQ.1.AND.OSN.GT.0) HADF1 = .TRUE.
C
	LEVEL = FTRLEV		! level now feature level
	NFTRS = NFTRS+1		! count number of features in layer
	NACS = 0		! No AC's found yet
	HADAC7 = .FALSE.	! not had AC7
	HADAC8 = .FALSE.	! not had AC8
	HADST = .FALSE.		! not had ST
C
C Exit
C
999	RETURN
	END
