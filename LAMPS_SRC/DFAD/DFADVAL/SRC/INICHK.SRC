	SUBROUTINE INICHK(CLW)
C
***	IDENT	02FE96
***	MODULE	INICHK
C
C	Copyright Laser-Scan Laboratories Ltd, Cambrige, England
C	Author:	Andrew Morris
C	Created June 1984
C
CMOD	New 'safe' criterion to all for folds	ACM	18-Jul-1984
C
C Notes which points are X or Y turning points 
C (maxima or minima), and finds polyline box.
C
C Zero length segments must already have been removed
C
	IMPLICIT	NONE
C
***	COMMON/HERE:INTCHK/
***	COMMON/HERE:DFADVAL/
***	COMMON/HERE:CLOCKC/
C
C Parameters out
	LOGICAL*1	CLW		! clockwise?
C
C Workspace
	INTEGER		I,IT,I0,I1,I2
	INTEGER		DX,DY,LDX,LDY	! edge vectors
	INTEGER		XSENSE,YSENSE	! increasing in X,Y ?
	LOGICAL		XTURN,YTURN	! turning point?
C
C functions
	INTEGER		IABS,NINT
C
C Note that P is indexed from 1 to NPTS, whereas T is indexed from 0
C
	XLL = T(1,0)
	XUR = XLL
	YLL = T(2,0)
	YUR = YLL
	I1 = 0
C
C Find first edge with significant length
C
	LDX = T(1,1)-T(1,0)
	LDY = T(2,1)-T(2,0)
	XSENSE = LDX
	YSENSE = LDY
C
C Find all other significant edges, noting which end points
C are local X or Y turning points, and find polyline box.
C
	XTURN = .FALSE.
	YTURN = .FALSE.
	DO 20 I = 1,TNPTS-2	! for every point after the first
	DX = T(1,I+1)-T(1,I)
	DY = T(2,I+1)-T(2,I)
	IF ((DX.EQ.0).AND.(DY.EQ.0)) GOTO 20	! bridge over
C
C Check for X turning point
C
	TURN(I) = 0	! not yet turning point
	IF (LDX.NE.0) XSENSE = LDX
	IF (XSENSE.GE.0) THEN
	   IF (DX.LT.0) THEN
	      TURN(I) = 1	! local xmax
	      XTURN = .TRUE.
	      IF (T(1,I).GT.XUR) XUR = T(1,I)
	   END IF
	ELSE IF (DX.GT.0) THEN
	   TURN(I) = 1		! local xmin
	   XTURN = .TRUE.
	   IF (T(1,I).LT.XLL) XLL = T(1,I)
	END IF
C
C Check for Y turning point
C
	IF (LDY.NE.0) YSENSE = LDY
	IF (YSENSE.GE.0) THEN
	   IF (DY.LT.0) THEN
	      TURN(I) = TURN(I)+2	! local ymax
	      YTURN = .TRUE.
	      IF (T(2,I).GT.YUR) YUR = T(2,I)
	   END IF
	ELSE IF (DY.GT.0) THEN
	   TURN(I) = TURN(I)+2	! local ymin
	   YTURN = .TRUE.
	   IF (T(2,I).LT.YLL) THEN
	      YLL = T(2,I)
	      I1 = I	! note index of global ymin for CLW check
	   END IF
	END IF
C
	TURN(I) = TURN(I)+1
C
C Turn(I) now = 1 if vertex T(I) is not a turning point
C                2 if I is an X turning point
C                3 if I is a Y turning point
C                4 if I is both
C
	LDX = DX
	LDY = DY
20	CONTINUE	! end of loop for every point
C
C If there is not both an X and a Y turning point
C then the polyline cannot possibly cross itself, while if there
C is niether an X or Y turning point then it cannot touch itself either
C
	IF (WNGSW) THEN
	   SAFE(0,0,1) = .NOT.(XTURN.OR.YTURN)
	ELSE
	   SAFE(0,0,1) = .NOT.(XTURN.AND.YTURN)
	END IF
C
C is it clockwise?
C
	I0 = I1-1
	IF (I0.LT.0) I0 = TNPTS-2
	I2 = I1+1
	IF (I2.GT.TNPTS-1) I2 = 1


	  DO 175 I=0,TNPTS-2
	    CALL CLMIN(TREAL(1,I),TREAL(2,I),I)
175	  CONTINUE
C
	  IF(TREAL(1,0).NE.TREAL(1,TNPTS-1).OR.TREAL(2,0).NE.TREAL(2,TNPTS-1))
     &	  CALL CLMIN(TREAL(1,TNPTS-1),TREAL(2,TNPTS-1),TNPTS-1)
C
C
	  CALL CLOCK(CLW)	! Returns CLW true if clockwise

CCC	CLW = (T(1,I1)-T(1,I0))*(T(2,I2)-T(2,I0)).LT.
CCC     +        (T(2,I1)-T(2,I0))*(T(1,I2)-T(1,I0))
C
30	RETURN
	END
