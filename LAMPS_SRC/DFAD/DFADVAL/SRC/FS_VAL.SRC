C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-03-26 16:07:06.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION FS_VAL()
C
***	IDENT	26MR91
***	MODULE	FS_VAL
C
C	Copyright Laser-Scan Laboratories, Cambridge, England.
C	Author	Andrew Morris
C	Created June 1984
C
CMOD	Modified from original DFADVAL for BAE/Saudi to do
C	more extensive validation against DLMS spec and optional
C	rule file.	
C	This routine comes from code originally in DFADVAL main
C	routine.				JMB 17 Jan 1988
C
	IMPLICIT NONE
C
C common blocks
	INCLUDE 'LSL$DFADVAL:DFADVAL.CMN'
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'
C
C assume success
C
	FS_VAL = .TRUE.
C
C Check that FS entry is within feature
C
	IF (LEVEL.LT.FTRLEV) THEN
	   CALL FLWRTF('E    FS entry not within feature')
	   NERRS = NERRS+1
	END IF
C
C Otherwise, read feature type from FS
C
	CALL EIHRI(FCODE,1,1)	! read feature code
C
C If FC is 100 to 102 then type is 0,1,2
C
	IF(FCODE.GE.100.AND.FCODE.LE.102)THEN
	   TYPE=FCODE-100
C
C If FC is 300, (registration) ignore it
C
	ELSEIF(FCODE.EQ.300)THEN
	   NFTRS=NFTRS-1
	   GOTO 205
C
C If layer zero, ignore it
C
	ELSEIF(OSN.EQ.0) THEN
	   GOTO 205
C
C if getting feature type from AC 7s, skip the FS examination
C
	ELSEIF (TYPE_FROM_AC) THEN
	   GOTO 205
C
C have an illegal type
C
	ELSE
	   CALL FLWRTF
     +     ('E    FSN %^L%I: Illegal feature code, %^W%I',FSN,FCODE)
	   NERRS = NERRS+1
	   CALL EXPAND('Feature %N: ',FSN)
	   CALL APPEND('illegal feature code, %^W%N',FCODE)
	   CALL LCM_MSG(EXPDSC)
	   TYPE=-1
	   GOTO 205		! return
	ENDIF
C
C feature-1 not type 2?
C
	IF (FSN.EQ.1.AND.TYPE.NE.2) THEN
	   CALL FLWRTF('E    Feature 1 not type 2')
	   NERRS = NERRS+1
	   CALL EXPAND('Feature %N: ',FSN)
	   CALL APPEND('not type 2')
	   CALL LCM_MSG(EXPDSC)
	END IF
C
	IF (OSN.GT.0.AND.INFSW.AND.NFTRS.EQ.1) CALL FLWRTF
     +     ('     First feature %^L%N is type %^W%N',FSN,TYPE)
C
C check type same within layer
C
	IF (HADTYP) THEN
	   IF (WNGSW.AND.TYPE.NE.LTYPE) THEN
	      CALL FLWRTF
     +     ('W    FSN %^L%I: Change from type %^W%I to %I within layer',
     +        FSN,LTYPE,TYPE)
	      NWNGS = NWNGS+1
	      CALL EXPAND('Feature %N: ',FSN)
	      CALL APPEND('change from type ')
	      CALL APPEND('%^W%I to %I within layer',LTYPE,TYPE)
	      CALL LCM_MSG(EXPDSC)
	   END IF
	ELSE
	   HADTYP = .TRUE.
	   LTYPE = TYPE
	END IF
C
C Check type sequence
C
	IF (WNGSW.AND.TYPE.GT.LTYPE) THEN
	   CALL FLWRTF
     +	   ('W    FSN %^L%I: Feature type (%N) > last feature type (%N)'
     +      ,FSN,TYPE,LTYPE)
	   NWNGS = NWNGS+1
	   CALL EXPAND('Feature %N: ',FSN)
	   CALL APPEND('feature type (%N)',TYPE)
	   CALL APPEND(' > last feature type (%N)',LTYPE)
	   CALL LCM_MSG(EXPDSC)
	END IF
C
C Exit
C
205	RETURN
	END
