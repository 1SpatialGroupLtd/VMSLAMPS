C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-03-08 09:20:56.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION MH_VAL()
C
***	IDENT	17JA88
***	MODULE	MH_VAL
C
C	Copyright Laser-Scan Laboratories, Cambridge, England.
C	Author	Andrew Morris
C	Created June 1984
C
CMOD	Modified from original DFADVAL for BAE/Saudi to do
C	more extensive validation against DLMS spec and optional
C	rule file.	
C	This routine comes from code originally in DFADVAL main
C	routine.				JMB 17 Jan 1988
C
	IMPLICIT NONE
C
C common block
	INCLUDE 'HERE:DFADVAL.CMN'
	INCLUDE 'LSL$CMNIFF:MHMCE.CMN'
C
C w/s variables
	INTEGER		MAX_LAT		! maximum latitude 90*60*60*10
	INTEGER		MAX_LONG	! maximum longitude 180*60*60*10
C
C assume success
C
	MH_VAL = .TRUE.
C
C Set up defaults
C
	TNFTRS = 0		! No. of features in map
	NFTRS = 0		! No. of features in layer
	NREG = 0		! No. registration mark ftrs, layer 0
	NERRS = 0		! No. of errors in map
	NWNGS = 0		! No. of warnings in map
	HADF1 = .FALSE.		! Not had feature 1
	TNPTS = 0		! Total number of points
	LTYPE = 10		! default last feature type
	CALL EIHR(MHARR,MIN0(IELEN,MHLEN),1)	! read MH into COMMON
C
C set up coordinate ranges
C
	XMIN = MHLOSW-MHLOMO
	XMAX = MHLOSE-MHLOMO
	YMIN = MHLASW-MHLAMO
	YMAX = MHLANW-MHLAMO
C
C Map Header information
C
	IF (INFSW) THEN
	   CALL FLWRTF('Unique reference - %A',MHREFN)
	   CALL FLWRTF(' ')
	   CALL EXPAND('SW corner   ')
	   CALL CVT(MHLASW,MHLOSW)
	   CALL FLWLIN()
	   CALL EXPAND('SE corner   ')
	   CALL CVT(MHLASE,MHLOSE)
	   CALL FLWLIN()
	   CALL EXPAND('NE corner   ')
	   CALL CVT(MHLANE,MHLONE)
	   CALL FLWLIN()
	   CALL EXPAND('NW corner   ')
	   CALL CVT(MHLANW,MHLONW)
	   CALL FLWLIN()
	   CALL EXPAND('Map extents ')
	   CALL CVT(MHLAEX,MHLOEX)
	   CALL FLWLIN()
	   CALL EXPAND('Map origin  ')
	   CALL CVT(MHLAMO,MHLOMO)
	   CALL FLWLIN()
	END IF
C
C Check descriptor
C
	IF (MHDESC(2).NE.1) THEN
	   CALL FLWRTF('E    Descriptor not of correct customer type')
	   NERRS = NERRS + 1
	ENDIF
C
C corners not square?
C
	IF (MHLASW.NE.MHLASE.OR.
     +      MHLANW.NE.MHLANE.OR.
     +      MHLONW.NE.MHLOSW.OR.
     +      MHLONE.NE.MHLOSE) THEN
	   CALL FLWRTF('E    Corners not square')
	   NERRS = NERRS+1
	END IF
C
C corners not anticlockwise ?
C
	IF ((MHLANE.LT.MHLASE).OR.
     &	    (MHLANW.LT.MHLASW).OR.
     &	    (MHLONE.LT.MHLONW).OR.
     &	    (MHLOSE.LT.MHLOSW) ) THEN
	   CALL FLWRTF('E    Corners not correctly ordered')
	   NERRS = NERRS + 1
	ENDIF
C
C Lat/long extent incompatible with corners?
C
	IF (MHLAEX.NE.(MHLANE-MHLASE).OR.
     +      MHLAEX.NE.(MHLANW-MHLASW)) THEN
	   CALL FLWRTF('E    Lat  extent incompatible with corners')
	   NERRS = NERRS+1
	END IF
	IF (MHLOEX.NE.(MHLONE-MHLONW).OR.
     +      MHLOEX.NE.(MHLOSE-MHLOSW)) THEN
	   CALL FLWRTF('E    Long extent incompatible with corners')
	   NERRS = NERRS+1
	END IF
C
C Lat/long of map origin not 1 min SW of SW map corner?
C
	IF (MHLAMO.NE.MHLASW-600) THEN
	   CALL FLWRTF
     +  ('E    Lat of map origin not 1 min south of SW map corner')
	   NERRS = NERRS+1
	END IF
	IF (MHLOMO.NE.MHLOSW-600) THEN
	   CALL FLWRTF
     +  ('E    Long of map origin not 1 min west of SW map corner')
	   NERRS = NERRS+1
	END IF
C
C Check latitudes in range +/- 90*60*60*10 geographicals
C
	MAX_LAT = 90*60*60*10
C
	IF (ABS(MHLASW).GT.MAX_LAT) THEN
	   CALL FLWRTF('E    SW corner latitude not between +/-90 deg')
	   NERRS = NERRS + 1
	ENDIF
C
	IF (ABS(MHLASE).GT.MAX_LAT) THEN
	   CALL FLWRTF('E    SE corner latitude not between +/-90 deg')
	   NERRS = NERRS + 1
	ENDIF
C
	IF (ABS(MHLANW).GT.MAX_LAT) THEN
	   CALL FLWRTF('E    NW corner latitude not between +/-90 deg')
	   NERRS = NERRS + 1
	ENDIF
C
	IF (ABS(MHLANE).GT.MAX_LAT) THEN
	   CALL FLWRTF('E    NE corner latitude not between +/-90 deg')
	   NERRS = NERRS + 1
	ENDIF
C
	IF (ABS(MHLAMO).GT.MAX_LAT) THEN
	   CALL FLWRTF('E    Map origin latitude not between +/-90 deg')
	   NERRS = NERRS + 1
	ENDIF
C
	IF (ABS(MHLAEX).GT.MAX_LAT) THEN
	   CALL FLWRTF('E    Map extent latitude not between +/-90 deg')
	   NERRS = NERRS + 1
	ENDIF
C
C Check longitudes in range +/- 180*60*60*10 geographicals
C
	MAX_LONG = 180*60*60*10
C
	IF (ABS(MHLOSW).GT.MAX_LONG) THEN
	   CALL FLWRTF('E    SW corner longitude not between '//
     &				'+/-180 deg')
	   NERRS = NERRS + 1
	ENDIF
C
	IF (ABS(MHLOSE).GT.MAX_LONG) THEN
	   CALL FLWRTF('E    SE corner longitude not between '//
     &				'+/-180 deg')
	   NERRS = NERRS + 1
	ENDIF
C
	IF (ABS(MHLONW).GT.MAX_LONG) THEN
	   CALL FLWRTF('E    NW corner longitude not between '//
     &				'+/-180 deg')
	   NERRS = NERRS + 1
	ENDIF
C
	IF (ABS(MHLONE).GT.MAX_LONG) THEN
	   CALL FLWRTF('E    NE corner longitude not between '//
     &				'+/-180 deg')
	   NERRS = NERRS + 1
	ENDIF
C
	IF (ABS(MHLOMO).GT.MAX_LONG) THEN
	   CALL FLWRTF('E    Map origin longitude not between '//
     &				'+/-180 deg')
	   NERRS = NERRS + 1
	ENDIF
C
	IF (ABS(MHLOEX).GT.MAX_LONG) THEN
	   CALL FLWRTF('E    Map extent longitude not between '//
     &				'+/-180 deg')
	   NERRS = NERRS + 1
	ENDIF
C
C Check accuracies in range
C
	IF ((MHAHAC.LT.0).OR.(MHAHAC.GT.9999)) THEN
	   CALL FLWRTF('E    Absolute horizontal accuracy not in'//
     &			' range 0-9999m')
	   NERRS = NERRS + 1
	ENDIF
C
	IF ((MHRHAC.LT.0).OR.(MHRHAC.GT.9999)) THEN
	   CALL FLWRTF('E    Relative horizontal accuracy not in'//
     &			' range 0-9999m')
	   NERRS = NERRS + 1
	ENDIF
C
	IF ((MHVHAC.LT.0).OR.(MHVHAC.GT.9999)) THEN
	   CALL FLWRTF('E    Predominant height accuracy not in'//
     &			' range 0-9999m')
	   NERRS = NERRS + 1
	ENDIF
C
C Set flags, count, level to show have had MH
C
	HADMH = .TRUE.
	IMAP = IMAP+1
	LEVEL = MAPLEV		! level now map level
C
C exit
C
	RETURN
	END
