C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-06-16 13:04:32.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION ST_VAL()
C
***	IDENT	16JN88
***	MODULE	ST_VAL
C
C	Copyright Laser-Scan Laboratories, Cambridge, England.
C	Author	Andrew Morris
C	Created June 1984
C
CMOD	Modified from original DFADVAL for BAE/Saudi to do
C	more extensive validation against DLMS spec and optional
C	rule file.	
C	This routine comes from code originally in DFADVAL main
C	routine.				JMB 17 Jan 1988
C
C
	IMPLICIT NONE
C
C common blocks
	INCLUDE 'LSL$DFADVAL:DFADVAL.CMN'
	INCLUDE 'LSL$DFADVAL:INTCHK.CMN'
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'
C
C w/s variables
	INTEGER		IENDS		! end point status in ST entry
C
C Assume success
C
	ST_VAL = .TRUE.
C
C Skip any registration feature
	IF(OSN.EQ.0.AND.FCODE.EQ.300)GOTO 999
C
C Check ST within feature
C
190	IF (LEVEL.LT.FTRLEV) THEN
	   CALL FLWRTF('E    ST entry not within feature')
	   NERRS = NERRS+1
	END IF
C
C find number of points
C
	HADST = .TRUE.
	CALL EIHRS(NPTS,IENDS)	! read number of coords
C
C check not too many coords to hold in P
C
	IF (TNPTS+NPTS.GT.8191) THEN
	   IF (TYPE.EQ.1) THEN
	      CALL FLWRTF
     +     ('E    FSN %^L%I: Linear feature with more than 8191 points',
     &			FSN)
C
	      CALL EXPAND('Feature %N: ',FSN)
	      CALL APPEND('linear feature with > 8191 points')
	      CALL LCM_MSG(EXPDSC)
C
	   ELSE IF (TYPE.EQ.2) THEN
	      CALL FLWRTF
     +  ('E    FSN %^L%I: Area feature with more than 8191 points',FSN)
C
	      CALL EXPAND('Feature %N: ',FSN)
	      CALL APPEND('area feature with > 8191 points')
	      CALL LCM_MSG(EXPDSC)
	   END IF
C
	   NPTS = 8191-TNPTS
	   NERRS = NERRS+1
	END IF
C
C Check it it is an accuracy subregion, and that it has 3-14 points
C
	IF (OSN.EQ.0) THEN
	   IF (TNPTS+NPTS.LT.3) THEN
	      CALL EXPAND('E    FSN %I: Accuracy subregion',FSN)
	      CALL APPEND(' has less than 3 points')
	      NERRS = NERRS + 1
	      CALL FLWSTR
C
	      CALL EXPAND('Feature %N: ',FSN)
	      CALL APPEND('accuracy subregion has less than 3 points')
	      CALL LCM_MSG(EXPDSC)
	   ENDIF
C
	   IF (TNPTS+NPTS.GT.14) THEN
	      CALL EXPAND('E    FSN %I: Accuracy subregion',FSN)
	      CALL APPEND(' has more than 14 points')
	      NERRS = NERRS + 1
	      CALL FLWSTR
C
	      CALL EXPAND('Feature %N: ',FSN)
	      CALL APPEND('accuracy subregion has more than 14 points')
	      CALL LCM_MSG(EXPDSC)
	   ENDIF
	ENDIF
C
C read real coords into P(2,1:NPTS)
C
	CALL EIHRR(P,NPTS*2,1)
C
C round to integer coords, appending to T and counting repeat points
C
	CALL REPCHK
C
C Exit
C
999	RETURN
	END
