	LOGICAL FUNCTION EF_VAL()	! deals with EF entry
C
***	MODULE	EF_VAL
***	IDENT	01FE96
C
C
CMOD	Modified to correct failure to create correct LITES2
C	command file entries for area features
C					JMB	17 June 1988
C
CMOD	Modified for BAE/Saudi to do more extensive validation
C	with more messages and a LITES2 command file.
C					JMB	17 Jan 1988
C
CMOD	Check linear features as well as areal features for
C	crossing or touching themselves	ACM	18-Jul-1984
C
C	Copyright Laser-Scan Laboratories Ltd, Cambridge, England.
C	Author:	Andrew Morris
C	Created June 1984
C
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'	! IFF file pointers
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'	! message output
	INCLUDE 'LSL$CMNIFF:MHMCE.CMN'	! map header block
	INCLUDE 'LSL$DFADVAL:DFADVAL.CMN'
	INCLUDE 'LSL$DFADVAL:INTCHK.CMN'
C
C workspace
	INTEGER		NREPS		! No. of zero length segments
	LOGICAL*1	CLW		! is P clockwise?
	INTEGER		I		! loop counter
	LOGICAL		XOUT,YOUT	! coords out of range?
C
C functions
	INTEGER		FLWRTF
	LOGICAL		INTCHK		! intersection check
C
C Assume success
C
	EF_VAL = .TRUE.
C
C Check if it is a registration mark in layer 0
	IF (OSN.EQ.0.AND.FCODE.EQ.300) THEN
	   GOTO 70
	ENDIF
C
C Check if it is correct FC if layer zero
C
	IF ((OSN.EQ.0).AND.(FCODE.NE.301)) THEN
	   CALL FLWRTF('E    FSN %I: Accuracy region feature with'//
     &			' illegal feature code (%N).',
     &			FSN,FCODE)
	   NERRS = NERRS+1
C
	   CALL EXPAND('Feature %N: ',FSN)
	   CALL APPEND('accuracy region feature with illegal ')
	   CALL APPEND('feature code (%N).',FCODE)
C
C Output similar message to lcm file
C
	   CALL LCM_MSG(EXPDSC)
	ENDIF
C
C Too many accuracy subregions ?
C
	IF ((OSN.EQ.0).AND.((NFTRS-NREG).GT.9)) THEN
	   CALL EXPAND('Feature %N: ',FSN)
	   CALL APPEND(' more than 9 accuracy regions.')
	   CALL APPEND(' This feature is supernumerary.')
C
C Output message to lcm file
C
	   CALL LCM_MSG(EXPDSC)
	ENDIF
C
C If checking for ACs
C
	IF(ACSW)THEN
C
C accuracy subregion feature without AC8?
C
	   IF (OSN.EQ.0.AND.NFTRS.GT.0.AND..NOT.HADAC8) THEN
	      CALL FLWRTF
     +        ('E    FSN %I: Accuracy subregion without AC8',FSN)
	      NERRS = NERRS+1
	      CALL EXPAND('Feature %N: ',FSN)
	      CALL APPEND('accuracy subregion without AC8')
C
C Output message to lcm file
C
	      CALL LCM_MSG(EXPDSC)
C
C non accuracy subregion feature without AC7?
C
	   ELSEIF (OSN.GT.0.AND.NFTRS.GT.0.AND..NOT.HADAC7)THEN
	      CALL FLWRTF('E    FSN %I: No AC7 in feature',FSN)
	      NERRS = NERRS+1
	      CALL EXPAND('Feature %N: ',FSN)
	      CALL APPEND('no AC7 in feature')
C
C Output message to lcm file
C
	      CALL LCM_MSG(EXPDSC)
	   ENDIF
	END IF
C
C no points in feature?
C
	IF (TNPTS.EQ.0) THEN
	   CALL FLWRTF('E    FSN %I: No points in feature',FSN)
	   NERRS = NERRS+1
	END IF
C
C Finish is type is undefined and this is not accuracy region, or if
C there are no points
C
	IF ((TYPE.EQ.-1.AND.OSN.NE.0).OR.TNPTS.EQ.0) GOTO 70
C
C If accuracy subregion, do checks on its area, if has suitable
C number of points
C
	IF ((OSN.EQ.0).AND.(TNPTS.GE.3).AND.(TNPTS.LE.14)) GOTO 61
C
C Decide on other checks appropriate to feature type
C
	GOTO (20,30,40) TYPE+1
	GOTO 70		! return
C
C here if it is a point feature (type = 0)
C
20	IF (WNGSW.AND.(TNPTS.GT.1)) THEN
	   CALL FLWRTF
     +  ('W    FSN %I: Point feature with > 1 (%N) points',FSN,TNPTS)
	   NWNGS = NWNGS+1
	   CALL EXPAND('Feature %N: ',FSN)
	   CALL APPEND('point feature with > 1 (%N) points',TNPTS)
C
C Output similar message to lcm file
C
	   CALL LCM_MSG(EXPDSC)
	END IF
	IF (TNPTS.GT.2047) THEN
	   CALL FLWRTF
     +  ('E    FSN %I: Point feature with > 2047 (%N) points',FSN,TNPTS)
	   NERRS = NERRS+1
	   CALL EXPAND('Feature %N: ',FSN)
	   CALL APPEND('point feature with > 2047 (%N) points',TNPTS)
C
C Output similar message to lcm file
C
	   CALL LCM_MSG(EXPDSC)
	END IF
	GOTO 65		! return
C
C here if it is a line feature (type = 1)
C
30	IF (TNPTS.LT.2) THEN
	   CALL FLWRTF
     +  ('E    FSN %I: Line feature with < 2 (%N) non-repeated points'
     +  ,FSN,TNPTS)
	   NERRS = NERRS+1
	   CALL EXPAND('Feature %N: ',FSN)
	   CALL APPEND('line feature with < 2 (%N) non-repeated ',TNPTS)
	   CALL APPEND('points')
C
C Output similar message to lcm file
C
	   CALL LCM_MSG(EXPDSC)
	END IF
	GOTO 60		! check for intersections
C
C here for area feature (type = 2)
C
40	IF (FSN.NE.1) GOTO 50
C
C here to check feature-1 point string
C
	IF (TNPTS.NE.5) THEN
	   CALL FLWRTF
     +  ('E    FSN %I: Feature-1 with %N point%m (not 5)',FSN,TNPTS)
	   NERRS = NERRS+1
	   CALL EXPAND('Feature %N: ',FSN)
	   CALL APPEND('feature-1 with %N point%m (not 5)',TNPTS)
C
C Output similar message to lcm file
C
	   CALL LCM_MSG(EXPDSC)
	   GOTO 65	! return
	END IF
C
C does feature 1 point string give true map corners?
C only check if BOUNDS checking enabled.
C
	IF (.NOT.BOUNDS) GOTO 65
C
	IF (T(1,0).NE.XMIN.OR.T(2,0).NE.YMIN) THEN
	   CALL FLWRTF('E    FSN %I: Point 1 not SW corner',FSN)
	   NERRS = NERRS+1
	   CALL EXPAND('Feature %N: ',FSN)
	   CALL APPEND('map outline feature, point 1 not SW corner')
C
C Output similar message to lcm file
C
	   CALL LCM_MSG(EXPDSC)
	END IF
C
	IF (T(1,1).NE.XMAX.OR.T(2,1).NE.YMIN) THEN
	   CALL FLWRTF('E    FSN %I: Point 2 not SE corner',FSN)
	   NERRS = NERRS+1
	   CALL EXPAND('Feature %N: ',FSN)
	   CALL APPEND('map outline feature, point 2 not SE corner')
C
C Output similar message to lcm file
C
	   CALL LCM_MSG(EXPDSC)
	END IF
C
	IF (T(1,2).NE.XMAX.OR.T(2,2).NE.YMAX) THEN
	   CALL FLWRTF('E    FSN %I: Point 3 not NE corner',FSN)
	   NERRS = NERRS+1
	   CALL EXPAND('Feature %N: ',FSN)
	   CALL APPEND('map outline feature, point 3 not NE corner')
C
C Output similar message to lcm file
C
	   CALL LCM_MSG(EXPDSC)
	END IF
C
	IF (T(1,3).NE.XMIN.OR.T(2,3).NE.YMAX) THEN
	   CALL FLWRTF('E    FSN %I: Point 4 not NW corner',FSN)
	   NERRS = NERRS+1
	   CALL EXPAND('Feature %N: ',FSN)
	   CALL APPEND('map outline feature, point 4 not NW corner')
C
C Output similar message to lcm file
C
	   CALL LCM_MSG(EXPDSC)
	END IF
C
	IF (T(1,4).NE.XMIN.OR.T(2,4).NE.YMIN) THEN
	   CALL FLWRTF('E    FSN %I: Point 5 not SW corner',FSN)
	   NERRS = NERRS+1
	   CALL EXPAND('Feature %N: ',FSN)
	   CALL APPEND('map outline feature, point 5 not SW corner')
C
C Output similar message to lcm file
C
	   CALL LCM_MSG(EXPDSC)
	END IF
C
	GOTO 65		! return
C
C here to check a non feature-1 point string
C
C less than 4 points?
C
50	IF (TNPTS.LT.4) THEN
	   CALL FLWRTF
     +  ('E    FSN %I: Area feature with < 4 (%N) non-repeated points',
     +  FSN,TNPTS)
	   NERRS = NERRS+1
	   CALL EXPAND('Feature %N: ',FSN)
	   CALL APPEND('area feature with < 4 (%N) non-repeated',TNPTS)
	   CALL APPEND(' points')
C
C Output similar message to lcm file
C
	   CALL LCM_MSG(EXPDSC)
	END IF
C
C is it closed?
C
	IF (T(1,0).NE.T(1,TNPTS-1).OR.T(2,0).NE.T(2,TNPTS-1)) THEN
	   CALL FLWRTF('E    FSN %I: Area feature is not closed',FSN)
	   NERRS = NERRS+1
	   CALL EXPAND('Feature %N: ',FSN)
	   CALL APPEND('area feature is not closed')
C
C Output similar message to lcm file
C
	   CALL LCM_MSG(EXPDSC)
	   T(1,TNPTS) = T(1,0)
	   T(2,TNPTS) = T(2,0)
	   TNPTS = TNPTS+1
	END IF
C
C find all turning points, polyline box and whether clockwise
C
60	IF (TNPTS.LT.4) GOTO 65		! can't self intersect
61	CALL INICHK(CLW)
	IF (TYPE.EQ.2.AND.CLW) THEN
	   CALL FLWRTF
     +  ('E    FSN %I: Area feature is clockwise',FSN)
	   NERRS = NERRS+1
	   CALL EXPAND('Feature %N: ',FSN)
	   CALL APPEND('area feature is clockwise')
C
C Output similar message to lcm file
C
	   CALL LCM_MSG(EXPDSC)
	END IF
C
C Do loopcheck on the feature if was specified with the 
C appropriate command qualifiers
C
	IF (LOPSW) THEN
	   NINTS = 0
	   REPRUN = .FALSE.
C
C Check for intersections
C
	   IF(.NOT.INTCHK())THEN
	      CALL FLWRTF
     &        ('E    FSN %I: Feature with more than 50 '//
     &         'intersection points',FSN)
	      CALL EXPAND('Feature %N: ',FSN)
	      CALL APPEND('more than 50 intersection points')
C
C Output similar message to lcm file
C
	      CALL LCM_MSG(EXPDSC)
	      GOTO 500
	   ENDIF
C
	   IF (WNGSW) THEN
	      REPRUN = .TRUE.
	      IF(.NOT.INTCHK())THEN
	        CALL FLWRTF
     &        ('E    FSN %I: Feature with more than 50 '//
     &         'intersection points',FSN)
	        CALL EXPAND('Feature %N: ',FSN)
	        CALL APPEND('more than 50 intersection points')
C
C Output similar message to lcm file
C
	        CALL LCM_MSG(EXPDSC)
	        GOTO 500
	      ENDIF
	   END IF
C
C Output postion of first point of feature to LCM file if there 
C have been any lcm messages output to the command file since 
C the last call to LCM_POS
C
	   CALL LCM_POS(P(1,1),P(2,1))
C
C Report touch/cross intersections
C This routine may output messages/positions to the lcm
C
500	   CALL REPINT
	END IF
C
C	GOTO 66			! avoid writing 1st pt to lcm again
C
C Output postion of first point of feature to LCM file if there 
C have been any lcm messages output to the command file since 
C the last call to LCM_POS
C
65	CALL LCM_POS(P(1,1),P(2,1))
C
C check all coordinate ranges, if /BOUNDS qualifier in operation
C
66	IF (.NOT.BOUNDS) GOTO 70
	DO 67 I = 0,TNPTS-1
	   XOUT = T(1,I).LT.XMIN.OR.T(1,I).GT.XMAX
	   YOUT = T(2,I).LT.YMIN.OR.T(2,I).GT.YMAX
	   IF (XOUT.OR.YOUT) THEN
	      IF (XOUT.AND.YOUT) THEN
	         CALL FLWRTF
     +  ('E    FSN %I: Both coords of point %N out of range',FSN,I+1)
	      ELSE IF (XOUT) THEN
	         CALL FLWRTF
     +  ('E    FSN %I: X coord of point %N out of range',FSN,I+1)
	      ELSE
	         CALL FLWRTF
     +  ('E    FSN %I: Y coord of point %N out of range',FSN,I+1)
	      END IF
	      NERRS = NERRS+1
C
	      CALL EXPAND('Feature %N: X or/and Y co-ordinates'//
     &			' of point %N'//
     &			' out of range.',FSN,I+1)
C
C Output similar message to LITES2 command file
C
	      CALL LCM_MSG(EXPDSC)
C
C Output postion of point to LCM file 
C
	      CALL LCM_POS(FLOAT(T(1,I)),FLOAT(T(2,I)))
	   END IF
67	CONTINUE
C
70	HADAC7 = .FALSE.
	HADAC8 = .FALSE.
	HADST = .FALSE.
	TNPTS = 0
	LEVEL = OVLLEV		! level now layer level
C
C Exit
C
	RETURN
	END
