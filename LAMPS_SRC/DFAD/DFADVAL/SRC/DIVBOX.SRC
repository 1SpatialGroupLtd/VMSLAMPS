	SUBROUTINE DIVBOX
C
***	IDENT	18JL84
***	MODULE	DIVBOX
C
C	Copyright Laser-Scan Laboratories Ltd, Cambridge, England.
C
C	Author:	Andrew Morris
C	Created June 1984
C
CMOD	New 'Safe' criterion to allow for folds	ACM	18-Jul-1984
C
C Divides each path section in box NBOX at depth DEP
C into the quarter boxes of this box which it intersects.
C
	IMPLICIT	NONE
C
***	COMMON/HERE:DFADVAL/
***	COMMON/HERE:INTCHK/
C
C Workspace
	INTEGER		NEXTDP	! next box depth
	INTEGER		NPTH	! No. of paths in current box
	INTEGER		I,J,K	! loop counters
	INTEGER		ISTART,IFIN	! section enp. indices
	INTEGER		NBOXES	! No. of boxes intersected
	INTEGER		STABOX	! first box intersected
	INTEGER		MIDBOX	! mid box intersected
	INTEGER		FINBOX	! last box intersected
	LOGICAL		XTURN,YTURN	! turning point?
C
	NEXTDP = DEP+1		! next box level
	WID = BOXWID(NEXTDP)
C
	DO 10 I = 0,3
10	NPATHS(NEXTDP,I) = 0	! zero path count for each box
C
	DO 50 I = 1,NPATHS(DEP,NBOX)	! for each path in box
	ISTART = BOX(DEP,NBOX,I,1)	! index of first segment
	IFIN = BOX(DEP,NBOX,I,2)	! index of last segment
C
C First segment must get special treatment
	BOXPX = T(1,ISTART-1)-LL(1,DEP)
	BOXPY = T(2,ISTART-1)-LL(2,DEP)
	BOXQX = T(1,ISTART)-LL(1,DEP)
	BOXQY = T(2,ISTART)-LL(2,DEP)
	PIX = BOXPX/WID
	PIY = BOXPY/WID
	QIX = BOXQX/WID
	QIY = BOXQY/WID
C
C Find which is first box intersected by first segment
	CALL PLACE(STABOX,MIDBOX,FINBOX,NBOXES)
C
C Open path record for first segment
	NPTH = NPATHS(NEXTDP,STABOX)+1
	NPATHS(NEXTDP,STABOX) = NPTH
	BOX(NEXTDP,STABOX,NPTH,1) = ISTART
	SAFE(NEXTDP,STABOX,NPTH) = SAFE(DEP,NBOX,I)
C
C Prepare for PLACing rest of this path
	BOXQX = BOXPX
	BOXQY = BOXPY
	QIX = PIX
	QIY = PIY
C
	DO 40 J = ISTART,IFIN	! for each segment in path
C
	BOXPX = BOXQX
	BOXPY = BOXQY
	BOXQX = T(1,J)-LL(1,DEP)
	BOXQY = T(2,J)-LL(2,DEP)
	PIX = QIX
	PIY = QIY
	QIX = BOXQX/WID
	QIY = BOXQY/WID
C
C Usually both end points are in same box, so...
	IF ((PIX.EQ.QIX).AND.(PIY.EQ.QIY)) GOTO 40
C
C Here segment must cross box boundary(s), so...
	CALL PLACE(STABOX,MIDBOX,FINBOX,NBOXES)
C
C Put segment index into each box it crosses
	GOTO (40,30,20) NBOXES
C
C WARNING -if there is a path to this line, something is wrong!
	GOTO 40	! DEBUG
C
C Open and close path in MIDBOX with just one segment
20	NPTH = NPATHS(NEXTDP,MIDBOX)+1
	NPATHS(NEXTDP,MIDBOX) = NPTH
	BOX(NEXTDP,MIDBOX,NPTH,1) = J
	BOX(NEXTDP,MIDBOX,NPTH,2) = J
	SAFE(NEXTDP,MIDBOX,NPTH) = .TRUE.
C
C Close path in previous box
30	BOX(NEXTDP,STABOX,NPATHS(NEXTDP,STABOX),2) = J
C
C Open path in new box
	NPTH = NPATHS(NEXTDP,FINBOX)+1
	NPATHS(NEXTDP,FINBOX) = NPTH
	BOX(NEXTDP,FINBOX,NPTH,1) = J
	SAFE(NEXTDP,FINBOX,NPTH) = SAFE(DEP,NBOX,I)
C
40	CONTINUE	! end of loop for each segment
C
C Close last path subsection
	BOX(NEXTDP,FINBOX,NPATHS(NEXTDP,FINBOX),2) = IFIN
C
50	CONTINUE	! end of loop for each path
C
C Check for intersection possibilities within each new path section
	DO 120 I = 0,3
	DO 110 J = 1,NPATHS(NEXTDP,I)
	IF (.NOT.SAFE(NEXTDP,I,J)) THEN
	   XTURN = .FALSE.
	   YTURN = .FALSE.
	   DO 100 K = BOX(NEXTDP,I,J,1),BOX(NEXTDP,I,J,2)
	   GOTO (100,60,70,80) TURN(K)
60	   XTURN = .TRUE.
	   GOTO 90
70	   YTURN = .TRUE.
	   GOTO 90
80	   SAFE(NEXTDP,I,J) = .FALSE.
	   GOTO 110
90	   IF (WNGSW) THEN
	      IF (XTURN.OR.YTURN) THEN
	         SAFE(NEXTDP,I,J) = .FALSE.
	         GOTO 110
	      END IF
	   ELSE IF (XTURN.AND.YTURN) THEN
	      SAFE(NEXTDP,I,J) = .FALSE.
	      GOTO 110
	   END IF
100	   CONTINUE
	   SAFE(NEXTDP,I,J) = .TRUE.
	END IF
110	CONTINUE
120	CONTINUE
C
	RETURN
	END
