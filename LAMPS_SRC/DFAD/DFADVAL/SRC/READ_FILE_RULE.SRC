C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-06-14 10:44:46.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION READ_FILE_RULE (FID,FAT,LEV,NUM,FIELD,ID,L)
C
***	MODULE READ_FILE_RULE
***	IDENT 14JN88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England.
C Author: J.M. Billing			14 Jan 1988
C
C Modified : J.M. Billing		14 June 1988
C To report FORTRAN file read errors with LSL_PUTMSG rather than
C LIB$SIGNAL
C
C Function to attempt to read validation rule from indexed rule file.
C Rule will have key:
C	Rule No. + 10 * (Level + 10 * ( FAT + 10 * FID ) )
C Only the part of the rule relating to the current field is required.
C The field is identified by the value of FIELD :
C	1 FAC		2 Height	3 FAT		4 FID
C	5 Security	6 Releasability	7 SMC		8 Ori/Dir/Den
C	9 Width/Roof	10 Length/Tree
C Only height, smc, ori/dir/den, width/roof and length/tree have
C columns in the rule file.
C Returns .TRUE. if finds rule.
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$DFADVAL:DFADVAL.CMN'
	INCLUDE 'LSL$FADTCMN:RULE.CMN'
	INCLUDE '($FORIOSDEF)'
	INCLUDE '($FORDEF)'
C
C arguments
	INTEGER*2	FID		! fid for key
	INTEGER*2	FAT		! fat for key
	INTEGER*2	LEV		! file level for key
	INTEGER*2	NUM		! rule number for key
	INTEGER*2	FIELD		! which field is wanted
	INTEGER*2	ID		! interpretation indicator
	INTEGER*2	L(4)		! value range limits
C
C w/s
	INTEGER*4	KEY		! key for rule in file
	INTEGER*4	I		! general purpose temporary
	INTEGER		STATUS		! error status
	INTEGER		IO_STAT		! io completetion status
C
C Assume success
C
	READ_FILE_RULE = .TRUE.
C
C Check if rule file deals with this field
C
	IF ((FIELD.GT.10).OR.((FIELD.LT.7).AND.(FIELD.NE.2))) GOTO 10
C
C Check if rule file in use, and find rule if it is
C
	IF (.NOT.RULEOPN) GOTO 10	! no rule file open
C
C Calculate key
C KEY = NUM + 10 * (LEV + 10 * ( FAT + 10 * FID))
C Split into subcalculations to ensure coerce to INTEGER*4
C
	IF ((FID.GT.1600).OR.(FAT.GT.10).OR.(LEV.GT.10).OR.(NUM.GT.10))
     &				GOTO 10
C
	KEY = FAT + 10*FID
	KEY = LEV+ 10*KEY
	KEY = 10 * KEY
	KEY = KEY + NUM
C
C Read rule with calculated key
C
	READ (	UNIT = RULELUN,
     &		KEY = KEY,
     &		KEYID = 0,
     &		IOSTAT = IO_STAT) RULE
C
C Check for errors
C
	IF (IO_STAT.NE.0) THEN
	   CALL ERRSNS(,,,, STATUS)
C
C In particular, report error if not record not found
C
	   IF (STATUS.NE.FOR$_ATTACCNON) CALL LSL_PUTMSG(STATUS)
C
C No rule file open/record not found
C
	   GOTO 10
C
C Otherwise, have found and read the rule
C
	ELSE
C
C Decide which field is of interest
C
	   IF (FIELD.EQ.2) THEN
	      ID = RULE.HEIGHT_ID
	      L(1) = RULE.HEIGHT(1)
	      L(2) = RULE.HEIGHT(2)
	      L(3) = RULE.HEIGHT(3)
	      L(4) = RULE.HEIGHT(4)
C
	   ELSEIF (FIELD.EQ.7) THEN
	      ID = RULE.SMC_ID
	      L(1) = RULE.SMC(1)
	      L(2) = RULE.SMC(2)
	      L(3) = RULE.SMC(3)
	      L(4) = RULE.SMC(4)
C
	   ELSEIF (FIELD.EQ.8) THEN
	      ID = RULE.ORI_DIR_DEN_ID
	      L(1) = RULE.ORI_DIR_DEN(1)
	      L(2) = RULE.ORI_DIR_DEN(2)
	      L(3) = RULE.ORI_DIR_DEN(3)
	      L(4) = RULE.ORI_DIR_DEN(4)
C
	   ELSEIF (FIELD.EQ.9) THEN
	      ID = RULE.WIDTH_ROOF_ID
	      L(1) = RULE.WIDTH_ROOF(1)
	      L(2) = RULE.WIDTH_ROOF(2)
	      L(3) = RULE.WIDTH_ROOF(3)
	      L(4) = RULE.WIDTH_ROOF(4)
C
	   ELSEIF (FIELD.EQ.10) THEN
	      ID = RULE.LENGTH_TREE_ID
	      L(1) = RULE.LENGTH_TREE(1)
	      L(2) = RULE.LENGTH_TREE(2)
	      L(3) = RULE.LENGTH_TREE(3)
	      L(4) = RULE.LENGTH_TREE(4)
	   ENDIF
	ENDIF
C
	GOTO 20
C
C No rule file/no rule found
C
10	READ_FILE_RULE = .FALSE.
C
C Exit
C
20	RETURN
	END
