	LOGICAL FUNCTION INTCHK
C
***	IDENT	11AU95
***	MODULE	INTCHK
C
C	Copyright Laser-Scan Laboratories Ltd, Cambridge, England.
C	Author	Andrew Morris
C	Created June 1984
C
CMOD	Adjusted to account for rerun to catch touching segments
C	separated by box subdivision boundaries	ACM	23-Jul-1984
C
C Finds and reports all points where polyline T touches or
C crosses itself, not including the closing point if the
C polyline is declared as closed.
C
C For a detailed description of the program, see INTCHK.MEM
C
	IMPLICIT NONE
C
***	COMMON/HERE:INTCHK/
***	COMMON/HERE:DFADVAL/
C
C Parameters in
C
C Workspace
	INTEGER		I,J,K,L	! loop counters
	INTEGER		NSEGS	! No.of segs in path
	INTEGER		NPTH	! No.of paths in box
	INTEGER		IA,IB	! start and end segs of line
	INTEGER		IBOX(0:MAXDEP)	! box numbers
	INTEGER		IX,IY	! current box index coords
	REAL		MIN_BOXWID ! min value for a box width
	PARAMETER	(MIN_BOXWID = 0.0001)
C
C Functions
	INTEGER	MAX0
	LOGICAL		SEGCHK	! to perform crossing segment check
C
C----------------------------------------------------------------------
C
	INTCHK=.TRUE.		! assume success
C
C Too few segments to cross eachother?
	IF (TNPTS.LE.2) GOTO 100	! return
C
C If there is not both an X and a Y turning point
C then the polyline cannot possibly cross itself
	IF (SAFE(0,0,1)) GOTO 100	! return
C
C Put whole polyline into box 0 at level 0
	NPATHS(0,0) = 1	! No. of paths in box at level 0 is 1
	BOX(0,0,1,1) = 1! index 1 of line 1 in box 0 at level 0 is 1
	BOX(0,0,1,2) = TNPTS-1	! last index is TNPTS
C
C Find width of outer box
	BOXWID(0) = MAX0(XUR-XLL,YUR-YLL)+2+TOL
C
C Find lower left corner of this box
	LL(1,0) = (XLL+XUR-BOXWID(0))/2.0
	LL(2,0) = (YLL+YUR-BOXWID(0))/2.0
	IF (REPRUN) THEN	! shift box to catch tricky touch points
	   LL(1,0) = LL(1,0)-TOL
	   LL(2,0) = LL(2,0)-TOL
	END IF
C
C Set dimensions of subsequent box subdivisions to be used.
C Limit the minimum size of a box width to integer overflow during division
C later.
C
	DO 10 I = 1,MAXDEP
	BOXWID(I) = BOXWID(I-1)/2
10	IF (BOXWID(I).LT.MIN_BOXWID) BOXWID(I) = MIN_BOXWID
C
C Initialise recursive procedure and procede
	DEP = 0
20	IBOX(DEP) = -1
30	IBOX(DEP) = IBOX(DEP)+1	! boxes are numberes 0 to 3
	IF (IBOX(DEP).GT.3) THEN! if no more boxes at depth DEP then
	   DEP = DEP-1		! pop box depth,
	   IF (DEP.GT.0) GOTO 30! until stack empty.
	   GOTO 100		! return
	END IF
C
	NBOX = IBOX(DEP)
	NPTH = NPATHS(DEP,NBOX)	! No. of paths in box
	IF (NPTH.EQ.0) GOTO 30	! move on to next box
	IF ((NPTH.EQ.1).AND.SAFE(DEP,NBOX,1)) GOTO 30
C
C Find next box lower left corner
	IF (DEP.NE.0) THEN
	   IX = NBOX/2
	   IY = NBOX-2*IX
	   LL(1,DEP) = LL(1,DEP-1)+IX*BOXWID(DEP)
	   LL(2,DEP) = LL(2,DEP-1)+IY*BOXWID(DEP)
	END IF
C
	NSEGS = 0		! count No. of segments in box
	DO 40 I = 1,NPTH
40	NSEGS = NSEGS+BOX(DEP,NBOX,I,2)-BOX(DEP,NBOX,I,1)
	NSEGS = NSEGS+NPTH
C
	IF ((NSEGS.GE.MINSGS).AND.(DEP.LT.MAXDEP)) THEN
	   CALL DIVBOX		! subdivide into 4 boxes
	   DEP = DEP+1		! push box depth
	   GOTO 20		! start over at new depth
	ELSE			! else check for intersections
	   DO 90 I = 1,NPTH
	   IA = BOX(DEP,NBOX,I,1)! index of frst seg in path I
	   IB = BOX(DEP,NBOX,I,2)! index of last seg in path I
C
C If necessary check path for crossing itself
	   IF (.NOT.SAFE(DEP,NBOX,I)) THEN
	      DO 50 J = IA,IB-2
	      DO 50 K = J+2,IB
50	      IF(.NOT.SEGCHK(J,K))GOTO 99
	   END IF
	   IF (I.EQ.NPTH) GOTO 30	! move on to next box
C
C Check path for crossing any other path in same box
	   DO 60 J = IA,IB	! for each segment in path I do
	   DO 60 K = I+1,NPTH	! for each path after path I do
	   DO 60 L = BOX(DEP,NBOX,K,1),BOX(DEP,NBOX,K,2)
60	   IF(.NOT.SEGCHK(J,L))GOTO 99	! for each segment in path K
90	   CONTINUE		! end of I loop
	   GOTO 30		! repeat for next box
	END IF
	GOTO 100
C
99	INTCHK=.FALSE.
C
100	RETURN
	END
