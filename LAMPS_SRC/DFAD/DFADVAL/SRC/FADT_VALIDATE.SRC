	LOGICAL FUNCTION FADT_VALIDATE()
C
***	MODULE FADT_VALIDATE
***	IDENT 14JA88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England.
C Author: J.M. Billing			14 Jan 1988
C
C Function to validate fields in an FADT record according
C to any rule file in use. All fields are validated.
C Check is made to see that correct fields for given type are
C used once and once only.
C	 1 FAC		 2 Height	 3 FAT		 4 FID
C	 5 Security	 6 Rel'blty	 7 SMC		 
C	 8 Ori(point)	 9 Wid(point)	10 Len(point)	
C	11 Dir(line)	12 Wid(line)	13 n/a(line)	
C	14 Den(area)	15 Roof(area)	16 Tree(area)
C Outputs messages indicating failing records and they fields likely
C to be to blame
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$DFADVAL:DFADVAL.CMN'
	INCLUDE 'LSL$FADTCMN:RULE.CMN'
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'
	INCLUDE 'LSL$CMNIFF:MHMCE.CMN'
C
C functions
	LOGICAL		READ_FILE_RULE
	LOGICAL		READ_DEF_RULE
	LOGICAL		CHECK_BY_RULE
C
C w/s
	INTEGER*2	FID		! current feature identifier
	INTEGER*2	LEV		! file level
	INTEGER*2	VAR_BASE	! lower limit of records variant
	INTEGER*2 	L(4)		! value limits for validation
	INTEGER*2	ID		! rule interpretation indicator
	INTEGER*2	CURRENT		! field currently being tested
	INTEGER*2	I		! general temporary
	INTEGER*2	RULE_NUM	! current rule number
	LOGICAL		OK(3)		! phase overall valid/inval flag
	LOGICAL		VALID(3,10)	! valid/invalid fields in
					! each phase (default/gen/spec)
	INTEGER*2	PHASE		! 1=def, 2=gen, 3=spec rules
	INTEGER*2	LF		! last field to be checked
	INTEGER		TEMP
C
C Assume success
C
	OK(1) = .TRUE.
	OK(2) = .TRUE.
	OK(3) = .TRUE.
C
C Set up word length level
C
	LEV = MHLEV
C
C Init VALID flags
C
	DO 10 I = 1,10
	   VALID(1,I) = .TRUE.
	   VALID(2,I) = .TRUE.
	   VALID(3,I) = .TRUE.
10	CONTINUE
C
C----------------------------------------------------------------------
C First check that correct fields are filled in once and once only
C
C Set last field to be checked to be 10
C
	LF = 10
C
C If this is a line, then get width field into line width elements
C from point width elements (do a swap)
C Set last field to be 9
C
	IF (FADTARR(ITYPE).EQ.1) THEN
	   TEMP = FADTARR(IWIDL)
	   FADTARR(IWIDL) = FADTARR(IWIDP)
	   FADTARR(IWIDP) = TEMP
	   TEMP = FADTCOUNT(IWIDL)
	   FADTCOUNT(IWIDL) = FADTCOUNT(IWIDP)
	   FADTCOUNT(IWIDP) = TEMP
C
	   LF = 9
	ENDIF
C
C Calculate base index of variant fields for this feature type
C
	VAR_BASE = 8 + FADTARR(ITYPE)*3	! variant part for this type
C
C Check type field is present and legal, exit if not
C
	IF (FADTCOUNT(ITYPE).LT.1) THEN
	   CALL FLWRTF('E    FSN %I: Field typ not present',FSN)
	   NERRS = NERRS + 1
	   CALL EXPAND('Feature %N: ',FSN)
	   CALL APPEND('no typ field in AC7 text')
	   CALL LCM_MSG(EXPDSC)
	   GOTO 900
	ENDIF
C
	IF ((FADTARR(ITYPE).LT.0).OR.(FADTARR(ITYPE).GT.2)) THEN
	   CALL FLWRTF('E    FSN %I: Field typ does not obey DLMS spec',
     &				FSN)
	   NERRS = NERRS + 1
	   CALL EXPAND('Feature %N: ',FSN)
	   CALL APPEND('field typ does not obey DLMS spec')
	   CALL LCM_MSG(EXPDSC)
	   GOTO 900
	ENDIF
C
C Check other fields present
C
	DO 11 I = 2,16
C
C Check for unused field in line feature
C
	   IF (I.EQ.13) THEN
	      TEMP = TEMP
C
C Check for present variant parts not compatible with this type
C
	   ELSEIF ((I.GT.7).AND.
     &		   ((I.LT.VAR_BASE).OR.(I.GE.(VAR_BASE+3))).AND.
     &		    (FADTCOUNT(I).NE.0) ) THEN
	      CALL EXPAND('E    FSN %I: Field %S should not',
     &				FSN,FADTNAME(I))
	      CALL APPEND(' be present with this type')
	      CALL FLWSTR
	      NERRS = NERRS + 1
	      CALL EXPAND('Feature %N: ',FSN)
	      CALL APPEND('field %S should not ',FADTNAME(I))
	      CALL APPEND('be present with this type')
	      CALL LCM_MSG(EXPDSC)
C
C Check for field not present which should be
C
	   ELSEIF ((FADTCOUNT(I).LT.1).AND.
     &		   ((I.LE.7).OR.
     &		    ((I.GE.VAR_BASE).AND.(I.LE.VAR_BASE+2)) ) ) THEN
	      CALL EXPAND('E    FSN %I: Field %S not present',
     &				FSN,FADTNAME(I))
	      CALL FLWSTR
	      NERRS = NERRS + 1
	      CALL EXPAND('Feature %N: ',FSN)
	      CALL APPEND('field %S not present',FADTNAME(I))
	      CALL LCM_MSG(EXPDSC)
C
C Check for field present more than once
C
	   ELSEIF (FADTCOUNT(I).GT.1) THEN
	      CALL EXPAND('E    FSN %I: Field %S present more than once',
     &				FSN,FADTNAME(I))
	      CALL FLWSTR
	      NERRS = NERRS + 1
	      CALL EXPAND('Feature %N: ',FSN)
	      CALL APPEND('field %S present more than once',FADTNAME(I))
	      CALL LCM_MSG(EXPDSC)
	   ENDIF
11	CONTINUE
C
C Move variant part to positions 8,9,10 so validation algorithm
C only has to deal with same ten elements in array
C
	DO 12 I = 0,2
	   FADTARR(8+I) = FADTARR(VAR_BASE+I)
12	CONTINUE
C
C
C----------------------------------------------------------------------
C Start by checking all rules against defaults from DLMS spec
C
C Set start field to 2 (i.e. the one after fac)
C
	CURRENT = 2
C
C Read defaults for current field
C
20	IF (READ_DEF_RULE(FADTARR(ITYPE),CURRENT,ID,L)) THEN
C
C Check that value obeys rule
C
	   IF (.NOT.CHECK_BY_RULE(FADTARR(CURRENT),ID,L)) THEN
C
C If invalid, output message if wanted, and reset message flag
C so no further messages output
C
C Calculate the offset of in name array of the field
C causing the problem, remembering to allow for the
C variant parts of the record
C
	      I = CURRENT
	      IF (CURRENT.GE.8) I = VAR_BASE + (CURRENT - 8)
C
C Now set up the error message
C
	      CALL EXPAND('E    FSN %I: Field %S does not obey',
     &				FSN,FADTNAME(I))
	      CALL APPEND(' DLMS specification.')
	      CALL FLWSTR
	      NERRS = NERRS + 1
	      CALL EXPAND('Feature %N: ',FSN)
	      CALL APPEND('field %S does not obey',FADTNAME(I))
	      CALL APPEND(' DLMS specification.')
	      CALL LCM_MSG(EXPDSC)
C
C and set flag showing this field has caused a rule failure and
C fail whole validation
C
	      VALID(1,CURRENT) = .FALSE.
	      OK(1) = .FALSE.
	   ENDIF ! if .not.check_by_rule
C
	ENDIF ! if read_def_rule
C
C Check if first feature - if it is, then SMC must be 10
C
	IF ((FSN.EQ.1).AND.(OSN.EQ.1).AND.
     &	    (CURRENT.EQ.ISMC).AND.
     &	    (FADTARR(ISMC).NE.10).AND.
     &	    (FADTARR(ISMC).NE.6) ) THEN
	   CALL EXPAND('E    Feature 1 must have smc 6 or 10')
	   CALL FLWSTR
	   NERRS = NERRS + 1
	   CALL EXPAND('Feature 1: must have smc 6 or 10')
	   CALL LCM_MSG(EXPDSC)
	   VALID(1,ISMC) = .FALSE.
	   OK(1) = .FALSE.
	ENDIF
C
C Move onto next field, if there is one
C
	CURRENT = CURRENT+1
	IF (CURRENT.LE.LF) GOTO 20
C
C If there is no rule file, finish here
C
	IF (.NOT.RULEOPN) GOTO 900
C
C----------------------------------------------------------------------
C Now deal with general rules  (fid=0) and 
C specific rules (fid=fadtarr(ifid))
C
C Set up fid to be zero - i.e. do general rules first
C
	FID = 0
C
C Set phase variable to 2, showing checking general rules
C
	PHASE = 2
C
C Set start field 2
C
25	CURRENT = 2
C
C Set rule to zero
C
	RULE_NUM = 0
C
C Check this field has not failed DLMS spec, dont bother to validate
C against rules if it has.
C
30	IF (.NOT.VALID(1,CURRENT)) GOTO 35
C
C Read rule for current field
C
	IF (READ_FILE_RULE(	FID,		! fid=0 or fadtarr(ifid)
     &				FADTARR(ITYPE),	! fat
     &				LEV,		! file level
     &				RULE_NUM,	! current rule
     &				CURRENT,	! current field
     &				ID,		! rule indicator
     &				L		! rule value ranges
     &				)) THEN
C
C Check that value obeys rule
C
	   IF (.NOT.CHECK_BY_RULE(FADTARR(CURRENT),ID,L)) THEN
C
C Set flag showing this field has caused a rule failure
C
	      VALID(PHASE,CURRENT) = .FALSE.
	      OK(PHASE) = .FALSE.
C
	   ENDIF ! if .not.check_by_rule
C
	ENDIF ! if read_def_rule
C
C Move onto next field, if there is one
C
	CURRENT = CURRENT+1
	IF (CURRENT.LE.LF) GOTO 30
C
C try next rule, if there is one, resetting current field
C
	IF ((RULE.NEXT.GT.0).AND.
     &	    (RULE.NEXT.LT.9).AND.
     &	    (.NOT.OK(PHASE)) ) THEN
	   RULE_NUM = RULE.NEXT
	   CURRENT = 2
	   OK(PHASE) = .TRUE.
	   GOTO 30
	ENDIF ! if next rule exists and failed previous one
C
C Output warning message if have failed this phase and if wanted
C
	IF ((.NOT.OK(PHASE)).AND.(WNGSW)) THEN
C
C Find the next failing field for this phase
C
	   CURRENT = 2
35	   IF (VALID(PHASE,CURRENT)) THEN
	      CURRENT = CURRENT + 1
	      IF (CURRENT.GT.LF) GOTO 40
	      GOTO 35
	   ENDIF
C
C Do the message and output message saying which field failed
C
C
C Calculate the offset of in name array of the field
C causing the problem, remembering to allow for the
C variant parts of the record
C
	   I = CURRENT
	   IF (CURRENT.GE.8) I = VAR_BASE + (CURRENT - 8)
C
C Now set up the error message
C
	   CALL EXPAND('W    FSN %I: Field %S may not obey validation',
     &			FSN,FADTNAME(I))
	   IF (FID.EQ.0) THEN
	      CALL APPEND(' table general rules.')
	   ELSE
	      CALL APPEND(' table specific rules.')
	   ENDIF
	   CALL FLWSTR
	   NWNGS = NWNGS + 1
C
C And do the LITES2 command file
C
	   CALL EXPAND('Feature %N: ',FSN)
	   CALL APPEND('field %S may not obey ',FADTNAME(I))
	   IF (FID.EQ.0) THEN
	      CALL APPEND(' validation table general rules.')
	   ELSE
	      CALL APPEND(' validation table specific rules.')
	   ENDIF
	   CALL LCM_MSG(EXPDSC)
C
C Go to next invalid field
C
	   CURRENT = CURRENT + 1
	   IF (CURRENT.LE.LF) GOTO 35
C
	ENDIF ! if not ok and wngsw
C
C Find FID for specific rules if there is one and if
C have not failed whole validation on general rules
C
40	IF (	(FID.EQ.0).AND.(PHASE.EQ.2).AND.
     &		(FADTARR(IFID).NE.0).AND.
     &		(FADTARR(IFID).LE.1600)	) THEN
	   FID = FADTARR(IFID)
	   PHASE = 3		! specific rule phase
	   GOTO 25
	ENDIF
C
C----------------------------------------------------------------------
C Exit
C
900	FADT_VALIDATE = .TRUE.
	RETURN
	END
