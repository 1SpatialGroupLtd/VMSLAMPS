C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-02-05 15:32:00.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION SEGCHK(IP,IQ)
C
***	MODULE SEGCHK
***	IDENT 05FE96
C
C	Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C
C	Author  : A.T. Timms 			21 January 1987
C
CMOD928 /IGNORE=POLYGONS option supported		TJH 22-Oct-1990
CMOD	Made to return SS$_NORMAL for success instead of
C	.TRUE. (as specified by QUADSCAN documentation)	ACM 21-Feb-1989
C
C	Subroutine called by QUADSCAN to find intersections and touching
C	(or near touching) segments.
C
C 	Reports segment intersection if distance of segment STBUF(IP) 
C	to STBUF(IP+1) is less than TOL/(2*sqrt(2)) units from segment
C	STBUF(IQ) to STBUF(IQ+1), and segments are not parallel.
C
C 	Does not report intersection if this distance is greater than 
C	TOL/2.
C
C.......................................................................
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE	'($SSDEF)'
C
C Commons
***	PARAMETER/HERE:DFADVALMSG/
***	COMMON/HERE:INTCHK/
***	COMMON/HERE:DFADVAL/
C
C workspace
C
	REAL		P1X,P1Y,P2X,P2Y		! P1 and P2 coords
	REAL		Q1X,Q1Y,Q2X,Q2Y		! Q1 and Q2 coords
	REAL		DXP,DYP,DXQ,DYQ		! P12 and Q12
	REAL		D1P,D2P,D1Q,D2Q	! dists of points from lines
	REAL		DET,A
	REAL		LP,LQ			! pseudo lengths
	REAL		RLP,RLQ			! exact lengths
	REAL		X,Y			! int pnt coords
	INTEGER		INTYP			! touch = 0, cross = 1
	INTEGER		NT			! loop counter
C
C Parameters in
	INTEGER		IP,IQ		! indices of start vectors
C
	SEGCHK=.TRUE.		!set to success
C
C.......................................................................
C If IP and IQ are adjacent vectors then don't look for the intersection
C which WILL be found.
C
	IF (ABS(IQ-IP).EQ.1) GOTO 50	! ignore adjacent points
C
C.......................................................................
C If IP and IQ are first and last vectors in a closed feature we WILL
C also find an intersection so ignore such cases.
C
	IF (IP.EQ.1.AND.IQ.EQ.TNPTS-1) GOTO 50
	IF (IP.EQ.TNPTS-1.AND.IQ.EQ.1) GOTO 50	
C
C.......................................................................
C
	P1X = TREAL(1,IP-1)
	P1Y = TREAL(2,IP-1)
	P2X = TREAL(1,IP)
	P2Y = TREAL(2,IP)
C
	Q1X = TREAL(1,IQ-1)
	Q1Y = TREAL(2,IQ-1)
	Q2X = TREAL(1,IQ)
	Q2Y = TREAL(2,IQ)
C
C.......................................................................
C Check for edge-box intersection (most won't intersect)
C
	IF (MAX(P1X,P2X).LT.MIN(Q1X,Q2X)-TOL) GOTO 50
	IF (MIN(P1X,P2X).GT.MAX(Q1X,Q2X)+TOL) GOTO 50
	IF (MAX(P1Y,P2Y).LT.MIN(Q1Y,Q2Y)-TOL) GOTO 50
	IF (MIN(P1Y,P2Y).GT.MAX(Q1Y,Q2Y)+TOL) GOTO 50
C
C.......................................................................
C Check for both ends of edge P12 on same side of line of edge Q12
C (Colinear edges past box test must intersect in any case)
C
	DXQ = Q2X-Q1X
	DYQ = Q2Y-Q1Y
	LQ = ABS(DXQ)+ABS(DYQ)
	D1P = ((P1Y-Q1Y)*DXQ-(P1X-Q1X)*DYQ)/LQ
	D2P = ((P2Y-Q1Y)*DXQ-(P2X-Q1X)*DYQ)/LQ
	IF ((D1P.GT.TOL).AND.(D2P.GT.TOL)) GOTO 50	! both one side
	IF ((D1P.LT.-TOL).AND.(D2P.LT.-TOL)) GOTO 50! both othr side
C
C.......................................................................
C Here if edge P12 touches/crosses line through edge Q12
C Check for both ends of edge Q12 on same side of line of edge P12
C
	DXP = P2X-P1X
	DYP = P2Y-P1Y
	LP = ABS(DXP)+ABS(DYP)
	D1Q = ((Q1Y-P1Y)*DXP-(Q1X-P1X)*DYP)/LP
	D2Q = ((Q2Y-P1Y)*DXP-(Q2X-P1X)*DYP)/LP
	IF ((D1Q.GT.TOL).AND.(D2Q.GT.TOL)) GOTO 50	! both one side
	IF ((D1Q.LT.-TOL).AND.(D2Q.LT.-TOL)) GOTO 50! both othr side
C
C.......................................................................
C Here if there is intersection - now find it
C
	DET = DXQ*DYP-DYQ*DXP
	IF (DET.EQ.0) GOTO 50
C
C.......................................................................
C is touch distance realy less than TOL?
C
	RLQ = SQRT(DXQ**2+DYQ**2)
	D1P = D1P*LQ/RLQ
	D2P = D2P*LQ/RLQ
	IF ((D1P.GT.TOL).AND.(D2P.GT.TOL)) GOTO 50	! both one side
	IF ((D1P.LT.-TOL).AND.(D2P.LT.-TOL)) GOTO 50! both othr side
	RLP = SQRT(DXP**2+DYP**2)
	D1Q = D1Q*LP/RLP
	D2Q = D2Q*LP/RLP
	IF ((D1Q.GT.TOL).AND.(D2Q.GT.TOL)) GOTO 50	! both one side
	IF ((D1Q.LT.-TOL).AND.(D2Q.LT.-TOL)) GOTO 50! both othr side
C
	A = ((Q1Y-P1Y)*DXP-(Q1X-P1X)*DYP)/DET
	X = Q1X+A*DXQ
	Y = Q1Y+A*DYQ
C
C.......................................................................
C it IS a genuine intersection point, do the segs. just nearly touch? 
	IF (D1P*D2P.GT.0.OR.D1Q*D2Q.GT.0) THEN
	   INTYP = 0
	ELSE
C ...or cross
	   INTYP = 1
	END IF
C
	IF (.NOT.REPRUN) GOTO 30
	DO 20 NT = 1,NINTS
 	   IF (INTS(NT,1).EQ.IP.AND.INTS(NT,2).EQ.IQ) GOTO 40
20	CONTINUE
C
C.......................................................................
C add intersection found into list
30	IF (NINTS.EQ.MAXNTS) THEN
	  CALL LSL_PUTMSG(DV__TOOMNYINTS)
	  SEGCHK=.FALSE.		!signal failure
	  GOTO 50
	END IF
C
	NINTS = NINTS+1
C
	INTS(NINTS,1) = IP
	INTS(NINTS,2) = IQ
	INTS(NINTS,3) = INTYP
	INTS(NINTS,4) = NINT(X)
	INTS(NINTS,5) = NINT(Y)
C
C Wasn't that easy !!!
C...................................................................
C
40	CONTINUE
50	RETURN
   	END
