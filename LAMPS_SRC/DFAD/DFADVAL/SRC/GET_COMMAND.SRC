	LOGICAL FUNCTION GET_COMMAND()
C
***	MODULE	GET_COMMAND
***	IDENT	28MR91
C
C Copyright Laser-Scan Laboratories Ltd.,Cambridge,England
C Author : J.M. Billing		6 Jan 1987
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$DFADVAL:DFADVAL.CMN'
	INCLUDE 'LSL$CMNLSL:CLD.CMN'
C
C Command Language Definitions:
	EXTERNAL	DFADVAL_CLD
C
C w/s variables
	LOGICAL		ABSENT	   ! .T. if file param. not found
	LOGICAL		THERE	   ! .T. if param there
	LOGICAL		LOCAL      ! .T. if qual. is local
	LOGICAL		LOCNEG     ! set .T. if qual. locally negated
C
	LOGICAL		HAD_QUAL   ! had qualifier?
	LOGICAL		HAD_KEY	   ! had keyword?
        LOGICAL		LOCERR     ! .T. - local error reporting
C
C Functions called:
	INTEGER*4	DCL_FILE   ! reads & parses file title from DCL 
C			           ! command line
	INTEGER*4	DCL_QUAL   ! looks for specified qualifier
        INTEGER*4       DCL_STARTUP! looks for command line
        INTEGER*4       DCL_CML	   ! gets command line
	INTEGER*2	DCL_REAL   ! get real from command qual
	INTEGER*4	DCL_INT	   ! read integers
	INTEGER		I	   ! loop counter
C
C...................................................................
C
C Initialise things
C
	LOCERR =.TRUE.		 ! local error reporting
	LOCAL  =.FALSE.          ! set .T. if qual. is local
        LOCNEG =.FALSE.          ! set .T. if qual. locally negated
C
C....................................................................
C
C Get command line for verb DFADVAL. DCL_STARTUP will return set to
C SS$_NORMAL if all well.
C
	GET_COMMAND=DCL_STARTUP('DFADVAL'    	! command verb
     &      		,.FALSE.		! don't split par lists
     &      		,DFADVAL_CLD		! CLD module name
     &      		,LOCERR)        	! local error reporting
        IF (.NOT.GET_COMMAND) GOTO 10 		! return
C
C....................................................................
C
C Check for qualifiers
C
C
C Check for /(NO)PRINTER
C
	GET_COMMAND = DCL_QUAL('PRINTER'! qual. name
     &     	,PRINTER		! returned .T. if qual. found
     &          ,LOCAL		  	! .T. if qual local to parameter
     &		,LOCNEG		  	! .T. if qual locally negated
     &          ,LOCERR)		! .T.-local error reporting
	IF (.NOT.GET_COMMAND) GOTO 10	! return
C
C Set up output file name
C
	IF (PRINTER) THEN
	   LISTFILE = 'DFADVAL.SPL_TEMP'
	   LISTLEN = 16
	ELSE
	   LISTFILE = 'SYS$OUTPUT:'
	   LISTLEN = 11
	ENDIF
C
C---------------------------------------------------------------------
C Check for /TYPE and associated keywords
	GET_COMMAND = DCL_QUAL('TYPE'	! qual. name
     &     	,HAD_QUAL		! returned .T. if qual. found
     &          ,LOCAL		  	! .T. if qual local to parameter
     &		,LOCNEG		  	! .T. if qual locally negated
     &          ,LOCERR)		! .T.-local error reporting
	IF (.NOT.GET_COMMAND) GOTO 10	! return
C
	IF (HAD_QUAL)THEN
	  GET_COMMAND=DCL_QUAL(
     &                  'TYPE.AC'	! qual. name
     &        		,HAD_KEY	! returned .T. if keyword found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,LOCERR)	! set-local error reporting
	  IF(.NOT.GET_COMMAND) GOTO 10
C
	  IF(HAD_KEY)TYPE_FROM_AC=.TRUE.
C
	  GET_COMMAND=DCL_QUAL(
     &                  'TYPE.FS'	! qual. name
     &        		,HAD_KEY	! returned .T. if keyword found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,.TRUE.)	! set-local error reporting
	  IF(.NOT.GET_COMMAND) GOTO 10
C
	  IF(HAD_KEY)TYPE_FROM_AC=.FALSE.	  
C
	ELSE
C	If qualifier isn't present take the feature type from the FS.
	  TYPE_FROM_AC=.FALSE.	
	ENDIF
C
C---------------------------------------------------------------------
C Check for /AC
C
	ACSW=.TRUE.
	GET_COMMAND = DCL_QUAL('AC'	! qual. name
     &     	,HAD_QUAL		! returned .T. if qual. found
     &          ,LOCAL		  	! .T. if qual local to parameter
     &		,LOCNEG		  	! .T. if qual locally negated
     &          ,LOCERR)		! .T.-local error reporting
	IF (.NOT.GET_COMMAND) GOTO 10	! return
	IF (HAD_QUAL) ACSW=.TRUE.
C
C Check for /NOAC
	GET_COMMAND = DCL_QUAL('NOAC'	! qual. name
     &     	,HAD_QUAL		! returned .T. if qual. found
     &          ,LOCAL		  	! .T. if qual local to parameter
     &		,LOCNEG		  	! .T. if qual locally negated
     &          ,LOCERR)		! .T.-local error reporting
	IF (.NOT.GET_COMMAND) GOTO 10	! return
	IF(HAD_QUAL) ACSW=.FALSE.
C	
C Check for /(NO)DUPLICATES
C
	DUPLICATES=.TRUE.
	GET_COMMAND = DCL_QUAL('DUPLICATES'	! qual. name
     &     	,DUPLICATES		! returned .T. if qual. found
     &          ,LOCAL		  	! .T. if qual local to parameter
     &		,LOCNEG		  	! .T. if qual locally negated
     &          ,LOCERR)		! .T.-local error reporting
	IF (.NOT.GET_COMMAND) GOTO 10	! return
C
C Check for /(NO)BOUNDS
C
	BOUNDS=.TRUE.
	GET_COMMAND = DCL_QUAL('BOUNDS' ! qual. name
     &     	,BOUNDS			! returned .T. if qual. found
     &          ,LOCAL		  	! .T. if qual local to parameter
     &		,LOCNEG		  	! .T. if qual locally negated
     &          ,LOCERR)		! .T.-local error reporting
	IF (.NOT.GET_COMMAND) GOTO 10	! return
C
C /LAYER qualifier
C
	GET_COMMAND=DCL_QUAL('LAYER'		! qual. name
     &        		,HAD_LAYER	! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,LOCERR)	! set-local error reporting
	IF(.NOT.GET_COMMAND) GOTO 10
C
C if the switch was present, then record as much, and read its value(s)
C into the CLD common block, where we will leave them.
C
 	IF ( HAD_LAYER ) THEN
	   GET_COMMAND = DCL_INT( 'LAYER',		! qualifier name
     &			      .TRUE. )		! deal with errors itself
C
	   IF ( .NOT.GET_COMMAND ) GOTO 10	! failed - give up
C
	   NUM_LAYERS = NUMINT
	   DO 20 I = 1, NUM_LAYERS
	      LAYER_LIST(I) = IARRAY(I)
20	   CONTINUE
	ENDIF
C
C
C Check for /(NO)WARNINGS
C
	GET_COMMAND = DCL_QUAL('WARNINGS' ! qual. name
     &     	,WNGSW			! returned .T. if qual. found
     &          ,LOCAL		  	! .T. if qual local to parameter
     &		,LOCNEG		  	! .T. if qual locally negated
     &          ,LOCERR)		! .T.-local error reporting
	IF (.NOT.GET_COMMAND) GOTO 10	! return
C
C Check for /(NO)INFORMATION
C
	GET_COMMAND = DCL_QUAL('INFORMATION' ! qual. name
     &     	,INFSW			! returned .T. if qual. found
     &          ,LOCAL		  	! .T. if qual local to parameter
     &		,LOCNEG		  	! .T. if qual locally negated
     &          ,LOCERR)		! .T.-local error reporting
	IF (.NOT.GET_COMMAND) GOTO 10	! return
C
C Check for /TOLERANCE
C
	GET_COMMAND = DCL_QUAL('TOLERANCE' ! qual. name
     &     	,THERE			! returned .T. if qual. found
     &          ,LOCAL		  	! .T. if qual local to parameter
     &		,LOCNEG		  	! .T. if qual locally negated
     &          ,LOCERR)		! .T.-local error reporting
	IF (.NOT.GET_COMMAND) GOTO 10	! return
C
C Set up default
C
	TOL = 1.0	
C
C Find any tolerance specified
C
	IF (THERE) THEN
	   GET_COMMAND = DCL_REAL('TOLERANCE',LOCERR)
	   IF (.NOT.GET_COMMAND) GOTO 10
	   IF (NUMREA.GT.0) TOL = RARRAY(1)
	ENDIF
C
C Check for /(NO)LOOPCHECK
C
	GET_COMMAND = DCL_QUAL('LOOPCHECK' ! qual. name
     &     	,LOPSW			! returned .T. if qual. found
     &          ,LOCAL		  	! .T. if qual local to parameter
     &		,LOCNEG		  	! .T. if qual locally negated
     &          ,LOCERR)		! .T.-local error reporting
	IF (.NOT.GET_COMMAND) GOTO 10	! return
C
C Now /LIST
C
	GET_COMMAND = DCL_QUAL('LIST'	! qual. name
     &     	,LIST			! returned .T. if qual. found
     &          ,LOCAL 		  	! .T. if qual local to parameter
     &		,LOCNEG   	  	! .T. if qual locally negated
     &          ,LOCERR)          	! .T.-local error reporting
	IF (.NOT.GET_COMMAND) GOTO 10	! return
C
C Check for /LIST=filespec
C
	IF (LIST) THEN    	  
	   GET_COMMAND = DCL_FILE('LIST'	! label
     &	            ,'DFADVAL.LIS'	! default filespec
     &	            ,ABSENT		! .T. if absent
     &	            ,.FALSE.      	! don't expect list of files
     &              ,LOCERR)      	! .T.-local error reporting
C
	   IF (.NOT.GET_COMMAND) GOTO 10	! return
C
C If list file specified, then use the name
C
	   IF (.NOT.ABSENT) THEN		! File specified
              LISTFILE = FILARY(1)(1:FIL_LEN(1))
	      LISTLEN = FIL_LEN(1)
	   ENDIF
	ENDIF
C
C Now /RULES
C
	GET_COMMAND = DCL_QUAL('RULES'	! qual. name
     &     	,RULES          	! returned .T. if qual. found
     &          ,LOCAL 		  	! .T. if qual local to parameter
     &		,LOCNEG   	  	! .T. if qual locally negated
     &          ,LOCERR)          	! .T.-local error reporting
	IF (.NOT.GET_COMMAND) GOTO 10	! return
C
C Check for /RULE=filespec
C
	IF (RULES) THEN    	  
	   GET_COMMAND = DCL_FILE('RULES'	! label
     &	            ,'LSL$DFAD_RULE:VALTAB.RULE' ! default filespec
     &	            ,ABSENT		! .T. if absent
     &	            ,.FALSE.      	! don't expect RULE of files
     &              ,LOCERR)      	! .T.-local error reporting
C
	   IF (.NOT.GET_COMMAND) GOTO 10	! return
C
C If RULE file specified, then use the name
C
	   IF (.NOT.ABSENT) THEN		! File specified
              RULEFILE = FILARY(1)(1:FIL_LEN(1))
	      RULELEN = FIL_LEN(1)
	   ENDIF
	ENDIF
C
C Now /LITES2
C
	GET_COMMAND = DCL_QUAL('LITES2'	! qual. name
     &     	,LITES2          	! returned .T. if qual. found
     &          ,LOCAL 		  	! .T. if qual local to parameter
     &		,LOCNEG   	  	! .T. if qual locally negated
     &          ,LOCERR)          	! .T.-local error reporting
	IF (.NOT.GET_COMMAND) GOTO 10	! return
C
C Check for /LITES2=filespec
C
	IF (LITES2) THEN    	  
	   GET_COMMAND = DCL_FILE('LITES2'		! label
     &	            ,'LSL$LITES2CMD:DFADVAL.LCM'	! default filespec
     &	            ,ABSENT		! .T. if absent
     &	            ,.FALSE.      	! don't expect LITES2 of files
     &              ,LOCERR)      	! .T.-local error reporting
C
	   IF (.NOT.GET_COMMAND) GOTO 10	! return
C
C If LITES2 file specified, then use the name
C
	   IF (.NOT.ABSENT) THEN		! File specified
              LITES2FILE = FILARY(1)(1:FIL_LEN(1))
	      LITES2LEN = FIL_LEN(1)
	   ENDIF
	ENDIF
C
C Get input IFF file-name
C
	GET_COMMAND = DCL_FILE('IN_FILESPEC'	!parameter label
     &		,'LSL$IF:IFF.IFF;0'	! default file-name
     &		,ABSENT  	  	! .T. if no file-name
     &		,.FALSE.		! don't expect list of files
     &          ,LOCERR)		! .T.-local error reporting
C
C Transfer file-spec to a local variable
C
	IF (GET_COMMAND) THEN
	   INFILE = FILARY(1)(1:FIL_LEN(1))
	   INLEN = FIL_LEN(1)
	ELSE
	   GOTO 10 			! return
	ENDIF 
C
C As we may want to write out the command line to a list file lets 
C get it !
C
	GET_COMMAND=DCL_CML(CMLSTR,CMLEN,.TRUE.) 
C			
10	RETURN
   	END
