C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-03-08 09:21:46.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION VALIDATE()
C
***	IDENT	17JA88
***	MODULE	VALIDATE
C
C	Copyright Laser-Scan Laboratories, Cambridge, England.
C	Author	Andrew Morris
C	Created June 1984
C
CMOD	Modified from original DFADVAL for BAE/Saudi to do
C	more extensive validation against DLMS spec and optional
C	rule file, produce more messages and generate optional
C	LITES2 command file.	
C	This routine comes from code originally in DFADVAL main
C	routine.				JMB 17 Jan 1988
C
C common blocks
	INCLUDE 'HERE:DFADVAL.CMN'
C
C functions
	LOGICAL		AC_VAL
	LOGICAL		FS_VAL
	LOGICAL		MH_VAL
	LOGICAL		NF_VAL
	LOGICAL		NO_VAL
	LOGICAL		NS_VAL
	LOGICAL		ST_VAL
	LOGICAL		EF_VAL
	LOGICAL		EM_VAL
	LOGICAL		EO_VAL
C
C Assume success
C
	VALIDATE = .TRUE.
C
C Set up variables for validation phase
C
	IMAP = 0		! zero various counts
	LEVEL = FILLEV		! now at file level
	HADMH = .FALSE.		! not yet seen MH entry yet
	HADAC7 = .FALSE.	! no AC7 yet
	HADAC8 = .FALSE.	! no AC8 yet
	HADF1 = .FALSE.		! no feature 1 yet
	HADST = .FALSE.		! no point string yet
	HADTYP = .FALSE.	! no feature type yet
	LTYPE = 10		! first type must be < infinity
	TNPTS = 0		! no points in any feature yet
	NFTRS = 0		! no features yet
	NREG = 0		! no registration marks yet
C
C Now take each entry in turn, validating as you go
C
10	CALL IFFNXT(IECODE,IELEN)	! find next IFF entry
	IF (IELEN.EQ.-1) THEN
	   GOTO 20			! sum up and exit?
	ELSEIF (IECODE.EQ.'NF') THEN
	   IF (.NOT.NF_VAL()) GOTO 30	! New Feature entry
	ELSEIF (IECODE.EQ.'ST') THEN
	   IF (.NOT.ST_VAL()) GOTO 30	! point STring entry
	ELSEIF (IECODE.EQ.'FS') THEN
	   IF (.NOT.FS_VAL()) GOTO 30	! Feature Status entry
	ELSEIF (IECODE.EQ.'AC') THEN
	   IF (.NOT.AC_VAL()) GOTO 30	! Anciliary Code entry
	ELSEIF (IECODE.EQ.'EF') THEN
	   IF (.NOT.EF_VAL()) GOTO 30	! End of Feature entry
	ELSEIF (IECODE.EQ.'NO') THEN
	   IF (.NOT.NO_VAL()) GOTO 30	! New layer entry
	ELSEIF (IECODE.EQ.'EO') THEN
	   IF (.NOT.EO_VAL()) GOTO 30	! End of layer entry
	ELSEIF (IECODE.EQ.'NS') THEN
	   IF (.NOT.NS_VAL()) GOTO 30	! New Section entry
	ELSEIF (IECODE.EQ.'MH') THEN
	   IF (.NOT.MH_VAL()) GOTO 30	! Map Header entry
	ELSEIF (IECODE.EQ.'EM') THEN
	   IF (.NOT.EM_VAL()) GOTO 30	! End of Map entry
	ELSEIF (IECODE.EQ.'EJ') THEN
	   GOTO 20	! End of Job entry
	ENDIF
	GOTO 10				! move on to next entry
C
C here to End Job
C
20	IF (LEVEL.GE.MAPLEV) THEN
	   IF (.NOT.EM_VAL()) GOTO 30
	ENDIF
C
	GOTO 40
C
C Errors
C
30	VALIDATE = .FALSE.
C
C Exit
C
	RETURN
40	END
