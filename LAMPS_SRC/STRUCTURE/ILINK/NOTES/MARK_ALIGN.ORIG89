	SUBROUTINE MARK_ALIGN(	PT,NXT,PRV,NEAREST,PT_DST,PT_PR_FTR,
     &				PT_SEEN,QDAT,FTR_PTS,PNT_FTR,
     &				MAXPTS,MAXOUTFTRS)
 
***	IDENT	05OC89
***	MODULE	MARK_ALIGN
 
C	Copyright : Laser-Scan Laboratories Ltd., Cambridge, England
C	Created   : 					ACM 06-Jul-1988

CMOD	Fix bug after label 60 (JPT1, not IPT1)		WJJ 05-Oct-1989
CMOD	Changed criterion for whether points are marked
C	as being on aligned sections			ACM 28-Sep-1988
CMOD	Changed min length to align from 0.002*MAXRANGE
C	to 2*JNTOL					ACM 27-Sep-1988

	IMPLICIT NONE

C Parameters
	INTEGER*4	MAX_INTER
	PARAMETER(	MAX_INTER = 100)

	INCLUDE		'LSL$CMNILINK:ILINKMSG.PAR'

C Commons
	INCLUDE		'LSL$CMNILINK:ILINK.CMN'

C Data in
	INTEGER*4	MAXPTS,MAXOUTFTRS
	INTEGER*4	NXT(MAXPTS)
	INTEGER*4	PRV(MAXPTS)
	INTEGER*4	NEAREST(MAXPTS)
	INTEGER*4	FTR_PTS(2,MAXOUTFTRS)
	INTEGER*4	PT_PR_FTR(MAXPTS)

	REAL*4		PT(2,MAXPTS)
	REAL*4		PT_DST(MAXPTS)

	LOGICAL*1	QDAT(MAXPTS)
	LOGICAL*1	PT_SEEN(MAXPTS)
	LOGICAL*1	PNT_FTR(MAXOUTFTRS)

C Workspace
	INTEGER*4	I,J,K			! misc integers
	INTEGER*4	IPTSTA,IPTFIN		! ftr end pt PT indices
	INTEGER*4	JPTSTA,JPTFIN		! ftr end pt PT indices
	INTEGER*4	IPT,IPT1,IPT2,IPTPRV	! pt indices
	INTEGER*4	JPT,JPT1,JPT2
	INTEGER*4	KPT,KPT1,KPT2
	INTEGER*4	IFTR,JFTR
	INTEGER*4	IFTR1,IFTR2,JFTR1,JFTR2	! ftr indices
	INTEGER*4	N_INTER			! inter pt count
	INTEGER*4	INTER(MAX_INTER)	! inter pt PT indices

	REAL*4		FTR_LEN			! feature length
	REAL*4		LEN			! link length
	REAL*4		DX,DY			! seg vector
	REAL*4		MIN_LEN  		! min length to align

	LOGICAL*4	CLOSED			! closed ftr?
	LOGICAL*4	STARTED			! had pt after start?
	LOGICAL*4	ALIGNED
 
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Marks (with QDAT) all points which are on a feature section
C	that will be aligned (to or from) according to NEAREST.
C
C	The criterion for whether or not the vector connecting any two
C	consecutive points (IPT,NXT(IPT)) will be marked is that this
C	pair must point via NEAREST either to a pair in another feature
C	separated, if at all, only by points which are marked as 'seen',
C	by PT_SEEN, or to the same point.
C
C	These inter-aligned seen but unused pts are also marked.
C
C	Note that PT_DST must be set on input, and also that closed
C	features here are represented as circular linked lists.
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
 
	MIN_LEN = 2*JNTOL	! this may have to be made a /QUALIFIER

	CALL VIOCLR(QDAT,N_PTS)			! set all QDAT = .FALSE.

	DO 30 IFTR = 1,N_PR_FTRS		! for every feature
	  IF (PNT_FTR(IFTR)) GOTO 30		! point ftr?
	  IPTSTA = FTR_PTS(1,IFTR)		! first pt in ftr
	  IPTFIN = FTR_PTS(2,IFTR)		! last pt in ftr
	  IF (IPTSTA.LT.1.OR.IPTFIN.LT.1) GOTO 30	! ftr deleted?
	  IF (NXT(IPTSTA).EQ.NIL) GOTO 30	! point ftr
	  IF (NXT(IPTFIN).EQ.IPTSTA) IPTFIN = IPTSTA	! closed ftr
	  IPT2 = IPTSTA

10	  IPT1 = IPT2
	  IPT2 = NXT(IPT1)
	  JPT1 = IPT1
15	  JPT1 = NEAREST(JPT1)
	  IF (JPT1.NE.NIL) THEN
	    JPT2 = IPT2
20	    JPT2 = NEAREST(JPT2)
	    IF (JPT2.NE.NIL) THEN

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C old criterion
C	      ALIGNED = NXT(JPT1).EQ.JPT2.OR.NXT(JPT2).EQ.JPT1
CC     &               .OR.JPT1.EQ.JPT2
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C new criterion
	      IF (JPT1.EQ.JPT2) THEN
	        ALIGNED = .TRUE.
	        GOTO 24
	      END IF

C Aligned if JPT1 is not separated from JPT2 by any 'unseen' points

	      ALIGNED = .FALSE.			! assume not aligned
	      KPT = JPT1
	      N_INTER = 0
21	      KPT = NXT(KPT)
	      IF (KPT.EQ.JPT2) THEN
	        ALIGNED = .TRUE.
	        GOTO 24
	      ELSE IF (KPT.EQ.NIL.OR.KPT.EQ.JPT1) THEN
	        GOTO 22				! not aligned forwards
	      ELSE IF (PT_SEEN(KPT)) THEN
	        IF (N_INTER.LT.MAX_INTER) THEN
	          N_INTER = N_INTER+1	! up to MAX_INTER inter pts
	          INTER(N_INTER) = KPT
	          GOTO 21
	        END IF
	      END IF

22	      KPT = JPT2
	      N_INTER = 0
23	      KPT = NXT(KPT)
	      IF (KPT.EQ.JPT1) THEN
	        ALIGNED = .TRUE.
	      ELSE IF (KPT.EQ.NIL.OR.KPT.EQ.JPT2) THEN
	        GOTO 24				! not aligned backwards
	      ELSE IF (PT_SEEN(KPT)) THEN
	        IF (N_INTER.LT.MAX_INTER) THEN
	          N_INTER = N_INTER+1  ! count up to MAX_INTER inter pts
	          INTER(N_INTER) = KPT
	          GOTO 23
	        END IF
	      END IF

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

24	      IF (ALIGNED) THEN			! mark as aligned
	        QDAT(IPT1) = .TRUE.
	        QDAT(IPT2) = .TRUE.
	        QDAT(JPT1) = .TRUE.
	        QDAT(JPT2) = .TRUE.
	        DO 27 I = 1,N_INTER		! also mark inter-pts
	          QDAT(INTER(I)) = .TRUE.
27	        CONTINUE
	        GOTO 25
	      END IF
	      GOTO 20
	    END IF
	    GOTO 15
	  END IF

25	  IF (IPT2.NE.IPTFIN) GOTO 10
30	CONTINUE

C Unmark all aligned sections with length < MIN_LEN where whole feature
C is not being aligned or aligned onto

	DO 110 IFTR = 1,N_PR_FTRS
	  IF (PNT_FTR(IFTR)) GOTO 110		! point-ftr
	  IPTSTA = FTR_PTS(1,IFTR)		! first pt in ftr
	  IF (IPTSTA.EQ.NIL) GOTO 110		! ftr shared or deleted
	  IF (NXT(IPTSTA).EQ.NIL) GOTO 110	! single-pt ftr
	  IPTFIN = FTR_PTS(2,IFTR)		! last pt in ftr
	  CLOSED = NXT(IPTFIN).EQ.IPTSTA	! closed ftr?

	  FTR_LEN = PT_DST(IPTFIN)		! length of ftr IFTR
	  IF (CLOSED)THEN
	    DX = PT(1,IPTSTA)-PT(1,IPTFIN)
	    DY = PT(2,IPTSTA)-PT(2,IPTFIN)
	    FTR_LEN = FTR_LEN+SQRT(DX*DX+DY*DY)
	    IPTFIN = IPTSTA
	  ENDIF

	  IPT2 = IPTSTA
	  STARTED = .FALSE.
	  GOTO 50
 
C Find start of next run of aligned pts (IPT1)

40	  IPT2 = NXT(IPT2)
	  STARTED = .TRUE.
50	  IF (.NOT.QDAT(IPT2)) GOTO 100		! pt not aligned
	  IPT1 = IPT2				! start of aligned run

C Find end of run of aligned pts (IPT2)

60	  IF (IPT2.EQ.IPTFIN.AND.STARTED) GOTO 70! end of ftr
	  IPTPRV = IPT2
	  IPT2 = NXT(IPT2)
	  STARTED = .TRUE.
	  IF (QDAT(IPT2)) GOTO 60
	  IF (PT_SEEN(IPT2)) GOTO 60		! good idea???
	  IPT2 = IPTPRV

C Do not unmark if length of aligned run is reasonably long or if
C feature is completely aligned 

70	  IF (CLOSED.AND.IPT2.EQ.IPTSTA) THEN
	    LEN = FTR_LEN-PT_DST(IPT1)
	  ELSE
	    LEN = PT_DST(IPT2)-PT_DST(IPT1)	! length of aligned run
	  ENDIF

	  IF (LEN.GT.MIN_LEN.OR.
     &	     (IPT1.EQ.IPTSTA.AND.IPT2.EQ.IPTFIN)) GOTO 100

C Do not unmark if ftr being aligned onto is completely aligned

CCCWJJ NOTE: does not detect a whole feature being aligned onto this.

	  JPT1 = NEAREST(IPT1)			! pt mapped onto by IPT1
	  JPT2 = NEAREST(IPT2)			! pt mapped onto by IPT2
CCCWJJ bug-fix
CCCWJJ	  IF (IPT1.NE.NIL) THEN
CCCWJJ	    JFTR = PT_PR_FTR(IPT1)
	  IF (JPT1.NE.NIL) THEN
	    JFTR = PT_PR_FTR(JPT1)
	    JPTSTA = FTR_PTS(1,JFTR)
	    JPTFIN = FTR_PTS(2,JFTR)
	    IF ((JPT1.EQ.JPTSTA.AND.JPT2.EQ.JPTFIN).OR.
     &	        (JPT1.EQ.JPTFIN.AND.JPT2.EQ.JPTSTA)) GOTO 100
	  END IF

C Unmark all pts from IPT1 to IPT2 inclusive

	  JPT = IPT1
	  GOTO 90
80	  JPT = NXT(JPT)
90	  QDAT(JPT) = .FALSE.
	  IF (JPT.NE.IPT2) GOTO 80

100	  IF (IPT2.NE.IPTFIN) GOTO 40		! loop for next pt
110	CONTINUE				! loop for next ftr

	END
 
