C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-01-13 16:14:46.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION BREAK_FTRS(
     &			PT,CC,NXT,PRV,NEAREST,PT_PR_FTR,PDAT,
     &			FTR_PTS,FTR_START,FTR_INFTR,FTR_IFC2,FTR_LAYER,
     &			FTR_ORIG_PR_FTR,IN_FTR_STATUS,
     &			MAXPTS,MAXINFTRS,MAXOUTFTRS)
 
***	MODULE	BREAK_FTRS
***	IDENT	13JA93

C	Copyright : Laser-Scan Ltd., Cambridge, England
C	Created   : ACM					Aug 1986

CMOD	Made a function					TJH 27-May-1987
CMOD	Introduced FTR_LAYER for new /LCP qualifier	ACM 21-Mar-1988
CMOD	Remove first argument (NUM) from CREATE_FTR	 JB  8-May-1992

	IMPLICIT NONE

C Parameters
	INCLUDE		'($SSDEF)'

	INCLUDE		'LSL$CMNILINK:ILINKMSG.PAR'

C Commons
	INCLUDE		'LSL$CMNILINK:ILINK.CMN'

C Data
	INTEGER*4	MAXPTS,MAXINFTRS,MAXOUTFTRS
	INTEGER*4	FTR_PTS(2,MAXOUTFTRS)
	INTEGER*4	FTR_START(MAXOUTFTRS)
	INTEGER*4	FTR_INFTR(MAXOUTFTRS)
	INTEGER*4	FTR_ORIG_PR_FTR(MAXOUTFTRS)
	INTEGER*2	FTR_IFC2(MAXOUTFTRS)
	INTEGER*2	FTR_LAYER(MAXOUTFTRS)
	INTEGER*4	NXT(MAXPTS),PRV(MAXPTS)
	INTEGER*4	NEAREST(MAXPTS)
	INTEGER*4	PT_PR_FTR(MAXPTS)
	REAL*4		PT(2,MAXPTS)
	LOGICAL*1	PDAT(MAXPTS)
	INTEGER*4	CC(MAXPTS)
	BYTE		IN_FTR_STATUS(MAXINFTRS)

C Workspace
	INTEGER*4	IPTSTA,IPTFIN		! ftr end pt PT indices
	INTEGER*4	IPT,ISTA,IFIN		! pt index
	INTEGER*4	IN_FTR			! input-ftr index
	INTEGER*4	I_PR_FTR,NEWFTR		! processed-ftr index
c
c	INTEGER*2	FC			! ftr code or code index
c	INTEGER*2	ILI			! ftr LAYER index
c
	INTEGER*4	FC			! ftr code or code index
	INTEGER*4	ILI			! ftr LAYER index
	LOGICAL*4	FIRST			! first link in ftr?
	BYTE		STATUS			! input-ftr status

C Functions
	LOGICAL*4	CREATE_PT
	LOGICAL*4	CREATE_FTR

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Breaks ftrs into separate links at every point marked as a node
C
C	Every feature will still have unique start and end pts
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

	BREAK_FTRS = SS$_NORMAL

	DO 20 I_PR_FTR = 1,N_ORIG_PR_FTRS
	  IN_FTR = FTR_INFTR(I_PR_FTR)		! get input-ftr index
	  IPTSTA = FTR_PTS(1,I_PR_FTR)		! start pt PT index
	  IPTFIN = FTR_PTS(2,I_PR_FTR)		! fin pt PT index
	  IF (IPTSTA.EQ.NIL.OR.IPTFIN.EQ.NIL) GOTO 20	! ftr deleted
	  IF (IPTSTA.EQ.IPTFIN) GOTO 20		! 1-pt ftr
	  IF (NXT(IPTSTA).EQ.IPTFIN) GOTO 20	! 1-vec ftr

	  PDAT(IPTSTA) = .TRUE.
	  PDAT(IPTFIN) = .TRUE.

	  IPT  = IPTSTA
	  ISTA = IPTSTA
	  FC   = FTR_IFC2(I_PR_FTR)
	  ILI  = FTR_LAYER(I_PR_FTR)
	  FIRST = .TRUE.

10	  IPT = NXT(IPT)
	  IF (.NOT.PDAT(IPT)) GOTO 10

C Find index of next ftr

	  IF (FIRST) THEN
	    NEWFTR = I_PR_FTR
	  ELSE
	    NEWFTR = N_PR_FTRS+1
	  END IF

C Create new ftr end pt if necessary

	  IF (IPT.EQ.IPTFIN) THEN
	    IF (FIRST) GOTO 15
C	    IN_FTR_STATUS(IN_FTR) = BROKEN	! mark ftr as "broken"
	    IFIN = IPTFIN
	  ELSE
	    BREAK_FTRS = CREATE_PT(	PT(1,IPT),PT(2,IPT),CC(IPT),
     &					NEWFTR,PT,CC,PT_PR_FTR,MAXPTS)
	    IF (.NOT.BREAK_FTRS) GOTO 60	! return

	    IFIN = N_PTS
	    NXT(PRV(IPT)) = IFIN
	    PRV(IFIN) = PRV(IPT)
	    NXT(IFIN) = NIL
	    PRV(IPT) = NIL
	    NEAREST(IFIN) = NEAREST(IPT)
	  END IF

	  IF (NEWFTR.EQ.I_PR_FTR) THEN
	    FTR_PTS(2,I_PR_FTR) = IFIN
	  ELSE
	    BREAK_FTRS = CREATE_FTR(ISTA,IFIN,FC,ILI,IN_FTR,I_PR_FTR,
     &				FTR_PTS,FTR_START,FTR_IFC2,FTR_LAYER,
     &				FTR_INFTR,FTR_ORIG_PR_FTR,MAXOUTFTRS)

	    IF (.NOT.BREAK_FTRS) GOTO 60	! return

	  END IF

	  ISTA = IPT
15	  FIRST = .FALSE.
	  IF (IPT.NE.IPTFIN) GOTO 10
20	CONTINUE

C Set up PT_PR_FTR for all new ftrs

	DO 30 I_PR_FTR = N_ORIG_PR_FTRS+1,N_PR_FTRS
	  IPTSTA = FTR_PTS(1,I_PR_FTR)
	  IPTFIN = FTR_PTS(2,I_PR_FTR)
	  IPT = IPTSTA
	  GOTO 50
40	  IPT = NXT(IPT)
50	  PT_PR_FTR(IPT) = I_PR_FTR
	  IF (IPT.NE.IPTFIN) GOTO 40
30	CONTINUE

60	IF (BREAK_FTRS) BREAK_FTRS = SS$_NORMAL
	RETURN 
	END

