C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-04-11 18:53:36.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION NOCYCLES(N,NCYCLES)

***	IDENT	11AP88
***	MODULE	NOCYCLES

C	Copyright : Laser-Scan Laboratories Ltd., Cambridge, England
C	Created   : 					ACM 21-Mar-1988

	IMPLICIT NONE

	INCLUDE	'LSL$CMNILINK:ILINK.CMN'	! has FCPAIR,MAXFCS

C Data in
	INTEGER*4	N			! num of nodes in matrix

C Data out
	INTEGER*4	NCYCLES			! num of cycles in matrx

C Workspace
	INTEGER*2	FROM(MAXFCS)
	INTEGER*2	STEP(MAXFCS)
	INTEGER*2	ISTEP,I,J
	LOGICAL*1	INPATH(MAXFCS)
	LOGICAL*1	SEEN(MAXFCS)
	LOGICAL*1	CONNECTED

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Counts the number of cycles in the directed network given by the
C	connection matrix FCPAIR, where I is connected TO J if
C	FCPAIR(I,J) =.TRUE.
C
C	Works by traversing depth-first the entire network specified by
C	the FCPAIR connection matrix.
C
C	STEP records the index of the node at each step in the current
C	path.
C
C	INPATH records whether or not a node is in the current path
C	(this is redundant, and you could tell whether a node was in the
C	path so far by looking through the ISTEP node indices in STEP,
C	but this would take longer).
C
C	SEEN notes whether each node has been visited at any stage
C	during the traversal so far.
C
C	FROM notes the node moved onto from each node in the current
C	path, so that when the scan backs back up to this node it can
C	decide which node to look for a connection to next.
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Function returns TRUE iff there are no cycles
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

	NOCYCLES = .TRUE.
	NCYCLES = 0
	DO 10 I = 1,N
	  INPATH(I) = .FALSE.
	  FROM(I) = 0
	  SEEN(I) = .FALSE.
10	CONTINUE
	STEP(1) = 1
	SEEN(1) = .TRUE.
	INPATH(1) = .TRUE.
	ISTEP = 1
20	DO 50 I = FROM(STEP(ISTEP))+1,N
	  CONNECTED = FCPAIR(I,STEP(ISTEP)).EQ.-1
	  IF (CONNECTED) THEN
	    IF (INPATH(I)) THEN			! cycle

C This section of code could be used if it was required to SEE all of
C the cycles found.
C	LOGICAL		CYCLE
C	      CYCLE = .FALSE.			! show cycle
C	      TYPE*,'*** CYCLE ***'
C	      DO 30 J = 1,ISTEP
C	        IF (I.EQ.STEP(J)) CYCLE = .TRUE.
C	        IF (CYCLE) TYPE*,STEP(J)
C30	      CONTINUE

	      SEEN(I) = .TRUE.
	      NCYCLES = NCYCLES+1		! count cycle
	      NOCYCLES = .FALSE.
	    END IF
	    IF (SEEN(I)) GOTO 50
	    SEEN(I) = .TRUE.
	    INPATH(I) = .TRUE.
	    FROM(STEP(ISTEP)) = I
	    ISTEP = ISTEP+1			! step ahead
	    STEP(ISTEP) = I
	    GOTO 20
	  END IF
50	CONTINUE
	INPATH(STEP(ISTEP)) = .FALSE.
	IF (ISTEP.EQ.1) THEN
60	  IF (STEP(1).EQ.N) GOTO 70
	  STEP(1) = STEP(1)+1
	  IF (SEEN(STEP(1))) GOTO 60
	  SEEN(STEP(1)) = .TRUE.
	  INPATH(STEP(1)) = .TRUE.
	ELSE
	  ISTEP = ISTEP-1			! step back
	END IF
	GOTO 20
70	END
