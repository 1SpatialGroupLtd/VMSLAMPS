	LOGICAL*4 FUNCTION GET_FCC()
 
***	IDENT	12AU87
***	MODULE	GET_FCC

C	Copyright : Laser-Scan Laboratories, Cambridge, England

CMOD	Changed to use INT_RIPPLESORT in place of IRIPPLESORT,
C	so that this can be called from LSLLIB when/if
C	INT_RIPPLESORT is standardised.			ACM  12-Aug-1987
CMOD	Made a function, FCC file format changed, converted
C 	to FILEIO and command table added		TJH 27-May-1987
C	Created   ACM: 					    August 1984

	IMPLICIT NONE

C Parameters
	INCLUDE		'($SSDEF)'

	INCLUDE		'LSL$CMNLSL:LSLLIBMSG.PAR' 
	INCLUDE		'LSL$CMNLSL:READSTR.PAR'
	INCLUDE		'LSL$CMNILINK:ILINKMSG.PAR' 

C Commons
	INCLUDE		'LSL$CMNILINK:ILINK.CMN' 
	INCLUDE		'LSL$CMNILINK:ILINKCHAR.CMN' 
	INCLUDE		'LSL$CMNLSL:EXCEPTION.CMN' 

C Workspace
	INTEGER*4	IERR		! error return
	INTEGER*4	I,J,K		! temp vars
	INTEGER*4	LINEID		! line number
	INTEGER*4	LEN		! string length
	INTEGER*4	INDEX(MAXFCPFCC)! for INT_RIPPLESORT

	LOGICAL*4	HAD_FCCREC	! had a FCC record?
	LOGICAL*4	OK		! error return

	BYTE		CH		! a character

	CHARACTER*3     FCCCHR		! for FCC record identifier
	CHARACTER*16    STRING		! for FCC record identifier

	DATA FCCCHR	/'FCC'/

C Functions
	INTEGER*4	GET_FCC_ARGS
	INTEGER*4	FLROPN
	INTEGER*4	FLRLIN
	INTEGER*4	READSTR

	LOGICAL*4	RDCHS
	LOGICAL*4	RDLONG

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Function reads FC-combinations from FCCFILE.
C
C	FCC file must be in the format:
C 		!
C 		! Optional comment(s)
C 		FCC fcc-integer <CR>
C 		old-fc-integer,old-fc-integer,old-fc-integer...
C
C	Or:
C 		! Optional comments
C 		FCC fcc-integer old-fc-integer,old-fc-integer...<CR>
C 		old-fc-integer,old-fc-integer,old-fc-integer...
C
C	Ranges of old FC values may be expressed using the syntax n:m
C	where N is the start of the range and m is the end (inclusive)
C
C
C	Returns SS$_NORMAL if successful or one of a variety of LSLLIB 
C	or ILINK condition codes if fails.
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

	GET_FCC = SS$_NORMAL

C Open the FCC file 

	OK = FLROPN(1,FCCFILE(:FCC_LEN),IERR)
	IF (.NOT.OK) THEN
	  GET_FCC = ILINK__OPNFCC
	  CALL LSL_PUTMSG(GET_FCC,FCCFILE(:FCC_LEN))
	  CALL LSL_ADDMSG(OK)
	  CALL LSL_ADDMSG(IERR)
	  GOTO 80
	END IF

C No feature code combinations read  - yet

	N_FCCS = 0

C Now read a record from the file
C Three types of record may be read:
C -	a comment preceeded by a "!"
C -	an FCC record preceeded by "FCC"
C -	a continuation of an FCC record (which has FC numbers only)

	LINEID = 0
10	LINEID = LINEID+1			! increment line counter
	OK = FLRLIN(,,,IERR)
	IF (OK.EQ.LSL__EOF) THEN	! end of file
	  OK = SS$_NORMAL
	  GOTO 30
	END IF

C Some other less desirable error!
	IF (.NOT.OK) THEN
	  GET_FCC = ILINK__BADFCCLIN
	  CALL LSL_PUTMSG(GET_FCC,LINEID)
	  CALL LSL_ADDMSG(OK)
	  CALL LSL_ADDMSG(IERR)
	  GOTO 70
	END IF

	CALL BSLN

	IF (RDCHS(CH)) GOTO 10		! EOL?

	IF (CH.EQ.'!') GOTO 10		! ignore comment lines

C Is this a data line without having first had an FCC record?

	IF (CH.GE.'0'.AND.CH.LE.'9') THEN

C Continuation line without FCC record?

	  IF (HAD_FCCREC) THEN
	    CALL BSCH
	    GOTO 20			! decode the FC arguments
	  ELSE
	    GET_FCC = ILINK__BADFCCLIN
	    CALL LSL_PUTMSG(GET_FCC,LINEID)
	    GOTO 70			! return
	  END IF
	END IF
	CALL BSCH			! backspace
	LEN = READSTR(STRING,0,ON_SPACE,.TRUE.,IERR)

C Error reading FCC record?

	IF (.NOT.IERR) THEN
	  GET_FCC = ILINK__BADFCCLIN
	  CALL LSL_PUTMSG(GET_FCC,LINEID)
	  CALL LSL_ADDMSG(IERR)	
	  GOTO 70
	END IF

C Found "FCC" record identifier?

	CALL STR$UPCASE(STRING(:LEN),STRING(:LEN))	! uppercase str.
	IF (STRING(:LEN).EQ.FCCCHR(:MIN(3,LEN))) THEN
	  N_FCCS = N_FCCS+1

C Read FCC value
	  IF (RDLONG(SHFC4(N_FCCS))) THEN
	    GET_FCC = ILINK__BADSHFCC
	    CALL LSL_PUTMSG(GET_FCC,LINEID)
	    CALL LSL_ADDMSG(ERRNUM)
	    IF (ERRNUM.EQ.LSL__HADEXCP) CALL LSL_ADDMSG(LSL_EXCP)
	    GOTO 70
	  END IF
	  HAD_FCCREC = .TRUE.
	ELSE
	  GET_FCC = ILINK__BADFCCLIN
	  CALL LSL_PUTMSG(GET_FCC,LINEID)
	  CALL LSL_ADDMSG(IERR)	
	  GOTO 70
	END IF

C Pass whole string (or remainer of FCC record) for argument and
C argument range decoding

20	GET_FCC = GET_FCC_ARGS(LINEID)
	IF (.NOT.GET_FCC) GOTO 70
	GOTO 10

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

C Put each FC-combination into increasing order
 
30	IF (N_FCCS.LE.0) GOTO 60
	DO 40 I = 1,N_FCCS
	  CALL INT_RIPPLESORT(FCC4(1,I),INDEX,N_FCPFCC(I),.TRUE.)
40	CONTINUE

C Eliminate any duplicate FCs within each combination

	DO 60 I = 1,N_FCCS
	  K = 1
	  DO 50 J = 2,N_FCPFCC(I)
	    IF (FCC4(J,I).EQ.FCC4(K,I)) GOTO 50
	    K = K+1
	    FCC4(K,I) = FCC4(J,I)
50	  CONTINUE
	  N_FCPFCC(I) = K
60	CONTINUE

70	CALL FLRCLO(1)		! close FCC file

80	RETURN
	END
