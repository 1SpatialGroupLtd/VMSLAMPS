C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-02-05 12:21:32.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	PROGRAM T

***	MODULE	T
***	IDENT	05FE90

C	Copyright : Laser-Scan Laboratories Ltd., Cambridge, England

C	Created  					WJJ	05-Feb-1990

	IMPLICIT NONE
	
C Parameters
	INCLUDE		'($SSDEF)'

C Commons
	INCLUDE		'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE		'LSL$CMNILINK:ILINK.CMN'
	INCLUDE		'LSL$CMNILINK:ILINKCHAR.CMN'

C Workspace
	INTEGER*2	IECODE,IELEN	! for IFFNXT
	INTEGER*2	WORD		! a word

	INTEGER*4	OSN		! layer number
	INTEGER*4	FC,FSN		! *4 feature code, FSN
	INTEGER*4	IFC		! FC index in FCS4 array
	INTEGER*4	ILI		! layer index in LAYER array

	LOGICAL*4	HAD_CB, IN_F	! had CB entry in feature, infeature?

	INTEGER*4	N_NF,N_EF,N_CB0,I4


CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Function to scan the input IFF file to determine:
C
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

	CALL LSL_INIT(.FALSE.)
	CALL IFFOPN(INLUN,'T;0')

C Initialise counters

	MAXPTS_CMN = 0
	MAXINFTRS_CMN = 0

	N_NF = 0
	N_CB0 = 0
	N_EF = 0
	IN_F = .FALSE.
	HAD_CB = .FALSE.

C Select and rewind input IFF file

	CALL IFFSEL(INLUN)
	CALL IFFRWD
10	CALL IFFNXT(IECODE,IELEN)
	IF (IELEN.LT.0) GOTO 60
	IF (IECODE.EQ.'NF') GOTO 11
	IF (IECODE.EQ.'FS') GOTO 12
	IF (IECODE.EQ.'NO') GOTO 14
	IF (IECODE.EQ.'CB') GOTO 30
	IF (IECODE.EQ.'EF') GOTO 40
	IF (IECODE.EQ.'EJ') GOTO 50
	GOTO 10

C NF entry

11	CALL EIHR(WORD,1,1)
	I4 = WORD
	IF (IN_F) CALL WRITEF('NF %N when in feature %N', I4, FSN)
	FSN = I4
	N_NF = N_NF+1
	IN_F = .TRUE.
	HAD_CB = .FALSE.
	GOTO 10

C FS entry - decide whether feature has been selected for processing

12	FC = 0				! clear longword
	CALL EIHR(WORD,1,1)		! read feature code
	FC = WORD			! convert word to long
	IF (.NOT.IN_F) CALL WRITEF('FS not in feature %N', FSN)
	GOTO 10

C NO entry - decide whether layer has been selected for processing

14	OSN = 0				! clear longword
	CALL EIHR(WORD,1,1)		! read layer number
	OSN = WORD			! convert word to long
	IF (IN_F) CALL WRITEF('NO %N when in feature %N', OSN, FSN)
	GOTO 10

C CB entry

30	CALL EIHRCB_HEAD(CBH)
	IF (.NOT.IN_F) CALL WRITEF('CB not in feature %N', FSN)
	IF (CBH.FLAGS.EQ.0 .OR. .NOT.HAD_CB) MAXINFTRS_CMN=MAXINFTRS_CMN+1
	IF (CBH.FLAGS.EQ.0 .AND. HAD_CB) N_CB0 = N_CB0 + 1
	HAD_CB = .TRUE.
	GOTO 10

C End feature

40	IF (.NOT.HAD_CB) MAXINFTRS_CMN = MAXINFTRS_CMN+1
	IF (.NOT.IN_F) CALL WRITEF('EF not in feature %N', FSN)
	IN_F = .FALSE.
	N_EF = N_EF + 1
	HAD_CB = .FALSE.
	GOTO 10

C End job

50	CALL IFFCLO(INLUN)
	GOTO 70

C Unexpected end of file

60	CALL WRITEF('Unexpected end-of-file')
	GOTO 50

70	CALL WRITEF('N_NF = %N', N_NF)
	CALL WRITEF('N_EF = %N', N_EF)
	CALL WRITEF('N_CB0 = %N', N_CB0)
	CALL WRITEF('MAX_INFTRS = %N', MAXINFTRS_CMN)
	END
