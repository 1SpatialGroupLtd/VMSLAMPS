C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-11-18 16:46:04.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION GET_ACP()
 
***	IDENT	18NO91
***	MODULE	GET_ACP
 
C	Copyright : Laser-Scan Laboratories, Cambridge, England
 
C	Author	  : Andrew Morris			21-Jun-1988
 
	IMPLICIT	NONE

C Parameters
	INCLUDE		'($SSDEF)'

	INCLUDE		'LSL$CMNILINK:ILINKMSG.PAR'
	INCLUDE		'LSL$CMNLSL:LSLLIBMSG.PAR'

C Commons
	INCLUDE		'LSL$CMNLSL:TXTC.CMN'
	INCLUDE		'LSL$CMNLSL:EXPC.CMN'
	INCLUDE		'LSL$CMNLSL:EXCEPTION.CMN'
	INCLUDE		'LSL$CMNLSL:CLD.CMN'
	INCLUDE		'LSL$CMNILINK:ILINK.CMN'
	INCLUDE		'LSL$CMNILINK:ILINKCHAR.CMN'

C Workspace
	INTEGER*4	IERR			! error return
	INTEGER*4	I
	INTEGER*4	AC1,AC2			! an AC pair
	INTEGER*4	OK			! ret code
	INTEGER*4	LINE_NUM		! ACP-file line No.

	BYTE		CH			! a character
 
C Functions
	LOGICAL*4	RDCHS
	LOGICAL*4	RDLONG
	INTEGER*4	FLROPN,FLRLIN,FLRCLO

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Reads AC-pairs from ACPFILE
C
C	File has free-format as below on every line:
C
C		AC1	AC2
C
C	This specifies that features with AC AC1 will have this AC code
C	replaced by AC2 (and vice versa) whenever the feature into which
C	the original feature containing this AC has been merged has
C	direction opposite to that of the original feature. 
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

	GET_ACP = SS$_NORMAL

C Open /ACP file 

	OK = FLROPN(1,ACPFILE(:ACP_LEN),IERR)
	IF (.NOT.OK) THEN
	  GET_ACP = ILINK__OPNACP
	  CALL LSL_PUTMSG(GET_ACP,ACPFILE(:ACP_LEN))
	  CALL LSL_ADDMSG(OK)
	  CALL LSL_ADDMSG(IERR)
	  GOTO 999
	END IF

	N_ACPRS = 0
	LINE_NUM = 0

10	OK = FLRLIN(,,,IERR)
	LINE_NUM = LINE_NUM+1
	IF (OK.EQ.LSL__EOF) GOTO 30	! end of file read
	IF (.NOT.OK) THEN
	  GET_ACP = ILINK__BADACPLIN
	  CALL LSL_PUTMSG(GET_ACP,LINE_NUM,ACPFILE(:ACP_LEN))
	  CALL LSL_ADDMSG(OK)
	  CALL LSL_ADDMSG(IERR)
	  GOTO 999
	END IF

	CALL BSLN
	IF (RDCHS(CH)) GOTO 10		! empty line?
	IF (CH.EQ.'!') GOTO 10		! comment
	CALL BSCH			! backspace

	IF (RDLONG(AC1)) THEN
	  GET_ACP = ILINK__BADACPLIN
	  CALL LSL_PUTMSG(GET_ACP,LINE_NUM,ACPFILE(:ACP_LEN))
	  IF (ERRNUM.NE.LSL__UNEXPEOL) THEN
	    CALL LSL_ADDMSG(ERRNUM)
	    IF (ERRNUM.EQ.LSL__HADEXCP) THEN
	      CALL LSL_ADDMSG(LSL_EXCP)
	    END IF
	  END IF
	  GOTO 999
	END IF

	IF (RDLONG(AC2)) THEN
	  GET_ACP = ILINK__BADACPLIN
	  CALL LSL_PUTMSG(GET_ACP,LINE_NUM,ACPFILE(:ACP_LEN))
	  IF (ERRNUM.NE.LSL__UNEXPEOL) THEN
	    CALL LSL_ADDMSG(ERRNUM)
	    IF (ERRNUM.EQ.LSL__HADEXCP) THEN
	      CALL LSL_ADDMSG(LSL_EXCP)
	    END IF
	  END IF
	  GOTO 999
	END IF

C Check ACs are all different, not equal to 1 or 9 (reserved by ILINK),
C and within range 1..32767

	IF (AC1.LE.1.OR.AC1.EQ.9.OR.AC2.LE.1.OR.AC2.EQ.9.OR.
     &	    AC1.GT.32767.OR.AC2.GT.32767) THEN
	  GET_ACP = ILINK__ILLEGALAC
	  CALL LSL_PUTMSG(GET_ACP)
	  GOTO 999
	END IF

	DO 20 I = 1,N_ACPRS
	  IF (AC1.EQ.AC2.OR.
     &	      AC1.EQ.ACPAIR(1,I).OR.AC1.EQ.ACPAIR(2,I).OR.
     &	      AC2.EQ.ACPAIR(1,I).OR.AC2.EQ.ACPAIR(2,I)) THEN
	    GET_ACP = ILINK__EQUALACS
	    CALL LSL_PUTMSG(GET_ACP)
	    GOTO 999
	  END IF
20	CONTINUE

	IF (N_ACPRS.GE.MAXACPRS) THEN
	  GET_ACP = ILINK__TOOMNYACPRS
	  CALL LSL_PUTMSG(GET_ACP,MAXACPRS)
	  GOTO 999
	END IF

	N_ACPRS = N_ACPRS+1
	ACPAIR(1,N_ACPRS) = AC1
	ACPAIR(2,N_ACPRS) = AC2

	GOTO 10				! read next line from ACP file
30	CALL FLRCLO(1)
 
999	RETURN
	END
