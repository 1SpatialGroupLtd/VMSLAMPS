C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-09-06 18:43:40.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION CHKPTS2(PFTR,QFTR,IP,IQ)
 
***	MODULE	CHKPTS2
***	IDENT	06SE88
 
C	Copyright : Laser-Scan Laboratories Ltd., Cambridge, England
C	Created   : ACM					     06-Sep-1988
 
	IMPLICIT NONE

C Parameters 
	INCLUDE		'($SSDEF)'

	INCLUDE		'LSL$CMNILINK:ILINKMSG.PAR'

C Commons
	INCLUDE		'LSL$CMNLSL:STATUS.CMN'
	INCLUDE		'LSL$CMNILINK:ILINK.CMN'

C Data in
	INTEGER*4	PFTR,QFTR	! ftr indices
	INTEGER*4	IP		! pt P PT index
	INTEGER*4	IQ		! pt Q PT index

C Workspace
	INTEGER*4	IR		! pt R PT index

	REAL*4		PX,PY		! point P coords
	REAL*4		QX,QY		! point Q coords
	REAL*4		SQDIST		! sq dist betw P and Q

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Sets PT_SEEN = .TRUE. only for points P which are now within
C	alignment tolerance of some other point Q which is eligible
C	to point to P but is now pointing to some other point.
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
 
	CHKPTS2 = SS$_NORMAL	! assume success

C Do not consider points not within alignment tolerance
C	px = pt(1,ip)
C	py = pt(2,ip)
	CALL ASSIGN_VAL(%VAL(PT_START+8*(IP-1)),PX,4)
	CALL ASSIGN_VAL(%VAL(PT_START+8*(IP-1)+4),PY,4)

C	qx = pt(1,iq)
C	qy = pt(2,iq)
	CALL ASSIGN_VAL(%VAL(PT_START+8*(IQ-1)),QX,4) 
	CALL ASSIGN_VAL(%VAL(PT_START+8*(IQ-1)+4),QY,4)

	SQDIST = (PX-QX)**2+(PY-QY)**2
	IF (SQDIST.GT.JNTOL_SQ) GOTO 10		! return
 
C Points are from separate features and are within alignment tolerance
C and are therefore eligable for joining
 
C	ir = nearest(ip)
	CALL ASSIGN_VAL(%VAL(NEAREST_START+4*(IP-1)),IR,4)

C	if (ir.ne.nil.and.ir.ne.iq) pt_seen(iq) = .true.
	IF (IR.NE.NIL.AND.IR.NE.IQ)
     &	  CALL ASSIGN_VAL(.TRUE.,%VAL(PT_SEEN_START+(IQ-1)),1)

C	ir = nearest(iq)
	CALL ASSIGN_VAL(%VAL(NEAREST_START+4*(IQ-1)),IR,4)

C	if (ir.ne.nil.and.ir.ne.ip) pt_seen(ip) = .true.
	IF (IR.NE.NIL.AND.IR.NE.IP)
     &	  CALL ASSIGN_VAL(.TRUE.,%VAL(PT_SEEN_START+(IP-1)),1)

10	RETURN 
	END
