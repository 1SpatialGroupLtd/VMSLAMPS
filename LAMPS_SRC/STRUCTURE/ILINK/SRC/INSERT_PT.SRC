	LOGICAL*4 FUNCTION INSERT_PT(X,Y,IFTR,IP,PNT,MARK)

***	MODULE	INSERT_PT
***	IDENT	03JN93

C	Copyright : Laser-Scan Ltd., Cambridge, England

CMOD1218 Add NO_BETWEEN_CHECK if a proper intersection
C	 is known					 JB 26-Apr-1993
CMOD	 Return zero point index, if point not added	WJJ 15-Jan-1991
CMOD	 Converted to use Point Accuracy Codes		ACM 05-Dec-1988
CMOD	 Made a function				TJH 28-May-1987
C	 Created   : ACM				       Aug 1986

	IMPLICIT NONE

C Parameters
	INCLUDE		'($SSDEF)'

	INCLUDE		'LSL$CMNILINK:ILINKMSG.PAR'

C Commons
	INCLUDE		'LSL$CMNILINK:ILINK.CMN'
	INCLUDE		'LSL$CMNILINK:ILINKCHAR.CMN'

C Data in
	REAL*4		X,Y		! coords of pt to be inserted
	INTEGER*4	IFTR		! ftr index of pt IP
	INTEGER*4	IP		! PT index of start of vector into
C					! which new pt is to be inserted
	INTEGER*4	PNT		! index of pt inserted
	LOGICAL*4	MARK		! mark inserted pt as node?

C Workspace
	INTEGER*4	IPTPRV,IPTNXT	! pt index
	INTEGER*4	IPTSTA,IPTFIN	! pt index
	INTEGER*4	CC_STA,CC_FIN	! adjacent pt cap codes
	INTEGER*4	CCD		! new cap code

	REAL*4		X_STA,Y_STA	! pt IP coords
	REAL*4		X_FIN,Y_FIN	! pt (IP+1) coords
	REAL*4		X_NXT,Y_NXT	! point PT(IPTNXT)
	REAL*4		DIST		! dist from PT(IP) to (X,Y)
	REAL*4		DISTNXT		! dist from PT(IP) to PT(IPTNXT)

	LOGICAL*4	LOGICAL		! temp LOGICAL   value

C Functions
	LOGICAL*4	CREATE_PT
	LOGICAL*4	BETWEEN
	INTEGER*4	PICPAC

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Inserts point with coords (X,Y) into vector from point with
C	index IP. If point is not between or near to ends, return a
C	zero point index as a flag for (geometric) failure. Leave the
C	function value return for CREATE_PT failure...
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

	INSERT_PT = SS$_NORMAL			! assume success
	PNT = 0					! but no point added !!

C Do not try to insert a pt into a pt-ftr

C	logical = pnt_ftr(iftr)
	CALL ASSIGN_VAL(%VAL(PNT_FTR_START+(IFTR-1)),LOGICAL,1)
	IF (LOGICAL) GOTO 60			! return

C Find start pt P(IP) and end pt P(IP+1) coords

C	x_sta = pt(1,ip)
C	y_sta = pt(2,ip)
C	cc_sta = cc(ip)
	CALL ASSIGN_VAL(%VAL(PT_START+8*(IP-1)),X_STA,4)
	CALL ASSIGN_VAL(%VAL(PT_START+8*(IP-1)+4),Y_STA,4)
	CALL ASSIGN_VAL(%VAL(CC_START+4*(IP-1)),CC_STA,4)

C	x_fin = pt(1,ip+1)
C	y_fin = pt(2,ip+1)
C	cc_fin = cc(ip+1)
	CALL ASSIGN_VAL(%VAL(PT_START+8*IP),X_FIN,4)
	CALL ASSIGN_VAL(%VAL(PT_START+8*IP+4),Y_FIN,4)
	CALL ASSIGN_VAL(%VAL(CC_START+4*IP),CC_FIN,4)

C Determine new capture_code
	
	CCD = PICPAC(CC_STA,CC_FIN)

C If BETWEEN is known to be true (calculated intersection) don't try to
C test between-ness, as rounding errors can lead to the wrong answer

	IF (NO_BETWEEN_CHECK) THEN
	   NO_BETWEEN_CHECK = .FALSE.		! turn off assumptions
	   GOTO 45				! about intersection pt
	ENDIF

C Check (X,Y) is on line segment between PT(IP) and PT(IP+1) exclusive
C and do nothing if (X,Y) is not between PT(IP) amd PT(IP+1) inclusive

	IF (.NOT.BETWEEN(X_STA,Y_STA,X,Y,X_FIN,Y_FIN,COORD_TOL)) THEN

	  IF (ABS(X-X_STA).LT.COORD_TOL .AND.
     &	      ABS(Y-Y_STA).LT.COORD_TOL) THEN
	    PNT = IP			! return start-point
	    GOTO 40

	  ELSEIF (ABS(X-X_FIN).LT.COORD_TOL .AND.
     &	          ABS(Y-Y_FIN).LT.COORD_TOL) THEN
	    PNT = IP+1			! return end-point
	    GOTO 40
	  ENDIF

	  GOTO 60			! no point added or close
	ENDIF

C Between = true; find dist of pt (X,Y) from pt IP

45	CONTINUE

	DIST = ABS(X-X_STA)+ABS(Y-Y_STA)

	IPTSTA = IP
	IPTFIN = IP+1
	GOTO 20

C Move along till next pt is further away from start than new pt

10	IF (IPTNXT.EQ.IPTFIN) GOTO 60		! return
	IPTSTA = IPTNXT

C20	iptnxt = nxt(iptsta)
20	CALL ASSIGN_VAL(%VAL(NXT_START+4*(IPTSTA-1)),IPTNXT,4)

C	x_nxt = pt(1,iptnxt)
C	y_nxt = pt(2,iptnxt)
	CALL ASSIGN_VAL(%VAL(PT_START+8*(IPTNXT-1)),X_NXT,4)
	CALL ASSIGN_VAL(%VAL(PT_START+8*(IPTNXT-1)+4),Y_NXT,4)

	DISTNXT = ABS(X_NXT-X_STA)+ABS(Y_NXT-Y_STA)
	IF (DISTNXT.LT.DIST-COORD_TOL) GOTO 10

	IF (DISTNXT.LT.DIST+COORD_TOL) THEN
	  PNT = IPTNXT
	  GOTO 40				! return
	ELSE
	  IPTPRV = IPTSTA			! insert new pt
	END IF

C Here to create a new pt at (X,Y) and insert it between IPTPRV and
C IPTNXT

30	INSERT_PT = CREATE_PT(
     &			X,Y,CCD,IFTR,		! create new pt
     &			%VAL(PT_START),
     &			%VAL(CC_START),
     &			%VAL(PT_PR_FTR_START),
     &			MAXPTS_CMN)
	IF (.NOT.INSERT_PT) GOTO 60		! return with error

C	nxt(iptprv) = n_pts			! link into pt list
C	prv(n_pts) = iptprv
C	nxt(n_pts) = iptnxt
C	prv(iptnxt) = n_pts
	CALL ASSIGN_VAL(N_PTS,%VAL(NXT_START+4*(IPTPRV-1)),4)
	CALL ASSIGN_VAL(IPTPRV,%VAL(PRV_START+4*(N_PTS-1)),4)
	CALL ASSIGN_VAL(IPTNXT,%VAL(NXT_START+4*(N_PTS-1)),4)
	CALL ASSIGN_VAL(N_PTS,%VAL(PRV_START+4*(IPTNXT-1)),4)

	PNT = N_PTS
	GOTO 50

C point not BETWEEN

C	pt(1,pnt) = x			! move PNT to (X,Y)
C	pt(2,pnt) = y
40	CALL ASSIGN_VAL(X,%VAL(PT_START+8*(PNT-1)),4)
	CALL ASSIGN_VAL(Y,%VAL(PT_START+8*(PNT-1)+4),4)

50	IF (MARK) THEN
C	  PDAT(PNT) = .TRUE.		! mark PNT as at a node
	  CALL ASSIGN_VAL(.TRUE.,%VAL(PDAT_START+(PNT-1)),1)
	END IF

60	IF (INSERT_PT) INSERT_PT = SS$_NORMAL

	RETURN
	END

