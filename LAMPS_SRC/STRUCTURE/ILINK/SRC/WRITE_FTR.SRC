C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-05-18 19:35:44.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION WRITE_FTR(
     &		ORIG_PR_FTR,
     &		PT,CC,NEAREST,NXT,PRV,FTR_PTS,FTR_START,
     &		FTR_NDS,FTR_INFTR,FTR_IFC2,FTR_DAT,PNT_FTR,
     &		FTR_ORIG_PR_FTR,IN_FTR_STATUS,IN_FTR_ADDR,
     &		HEADSHR,SHR,
     &		MAXPTS,MAXINFTRS,MAXOUTFTRS,MAXSHRS)

***	IDENT	18MY93
***	MODULE	WRITE_FTR

C	Copyright : Laser-Scan Laboratories Ltd., Cambridge, England

CMOD	Converted to accept CB in place of ST entries	ACM 07-Apr-1988
CMOD	Added arg to INTRNLERR message			ACM 14-Aug-1987
CMOD	Made a function					TJH 27-May-1987
C	Created   : ACM					Aug 1986

	IMPLICIT NONE

	INCLUDE		'($SSDEF)'

	INCLUDE		'LSL$CMNILINK:ILINKMSG.PAR'

	INCLUDE		'LSL$CMNILINK:ILINK.CMN'

C Data in/out
	INTEGER*4	ORIG_PR_FTR	! orig pr-ftr index
	INTEGER*4	MAXPTS,MAXINFTRS,MAXOUTFTRS,MAXSHRS
	INTEGER*4	FTR_PTS(2,MAXOUTFTRS)
	INTEGER*4	FTR_START(MAXOUTFTRS)
	INTEGER*4	FTR_NDS(2,MAXOUTFTRS)
	INTEGER*4	FTR_DAT(2,MAXOUTFTRS)
	INTEGER*4	FTR_INFTR(MAXOUTFTRS)
	INTEGER*4	FTR_ORIG_PR_FTR(MAXOUTFTRS)
	INTEGER*4	NEAREST(MAXPTS)
	INTEGER*4	NXT(MAXPTS),PRV(MAXPTS)
	INTEGER*4	IN_FTR_ADDR(MAXINFTRS)
	INTEGER*4	HEADSHR(MAXOUTFTRS)
	INTEGER*4	SHR(2,MAXSHRS)

	BYTE		IN_FTR_STATUS(MAXINFTRS)
	INTEGER*4	CC(MAXPTS)

	INTEGER*2	FTR_IFC2(MAXOUTFTRS)

	REAL*4		PT(2,MAXPTS)

	LOGICAL*1	PNT_FTR(MAXOUTFTRS)

C Workspace
	INTEGER*4	I
	INTEGER*4	IN_FTR			! input-ftr index
	INTEGER*4	I_PR_FTR		! cntinuatn pr-ftr index
	INTEGER*4	BASE_PR_FTR		! base-ftr index

	LOGICAL*4	IS_BASE_FTR		! base-ftr?
	LOGICAL*4	DELETED			! ftr deleted?

C Functions
	LOGICAL*4	WRITE_PART_FTR
	LOGICAL*4	WRITE_WHOLE_FTR
	LOGICAL*4	APPEND_FTR

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Writes to IFF output file (as in userguide) all new ftrs
C	resulting from original ftr ORIG_PR_FTR input for processing
C
C	Ftr data is taken from internal data structure and also from
C	input IFF file as necessary
C
C	For each original feature there may be zero or more resulting
C	output features, depending on how many of its parts are
C	base-features (non-base-features, ie. features which have been
C	merged with some other geometrically identical features, are
C	not written).
C
C	If the BREAK or MERGE processes are in effect then each
C	ILINK internal feature is written as a single feature,
C	otherwise all of the internal part-features which go to
C	make up an input feature are appended and written as a single
C	feature.
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

	WRITE_FTR = SS$_NORMAL		! assume success

	N_OUT_PTS = 0			! zero pt count

C The first output ftr for orig pr-ftr ORIG_PR_FTR is always ORIG_PR_FTR

C Write/append ftr - if is base-ftr and is not deleted

	DELETED = FTR_PTS(2,ORIG_PR_FTR).EQ.NIL

	IF (.NOT.DELETED) THEN
	  IF (HAD_BREAK.OR.HAD_MERGE) THEN
	    IS_BASE_FTR = FTR_PTS(1,ORIG_PR_FTR).GT.0
	    IF (IS_BASE_FTR) THEN
	      WRITE_FTR = WRITE_PART_FTR(	! write part ftr
     &		ORIG_PR_FTR,
     &		PT,CC,NEAREST,NXT,PRV,FTR_PTS,FTR_START,
     &		FTR_INFTR,FTR_IFC2,PNT_FTR,FTR_NDS,FTR_DAT,
     &		IN_FTR_STATUS,IN_FTR_ADDR,
     &		HEADSHR,SHR,
     &		MAXPTS,MAXINFTRS,MAXOUTFTRS,MAXSHRS)
	    END IF
	  ELSE
	    WRITE_FTR = APPEND_FTR(	! accumulate part feature
     &		ORIG_PR_FTR,
     &		PT,NEAREST,NXT,PRV,FTR_PTS,FTR_START,
     &		BASE_PR_FTR,MAXPTS,MAXOUTFTRS)
	  END IF
	  IF (.NOT.WRITE_FTR) GOTO 50	! if error, return
	END IF

C Any continuation ftrs are found as a contiguous sequence of ftrs which
C have the original-feature index ORIG_PR_FTR

	IN_FTR = FTR_INFTR(ORIG_PR_FTR)
	IF (IN_FTR_STATUS(IN_FTR).NE.BROKEN) GOTO 40

C Find first continuation-ftr index

	I_PR_FTR = LAST_PR_FTR
10	IF (FTR_ORIG_PR_FTR(I_PR_FTR).NE.ORIG_PR_FTR) THEN
	  IF (I_PR_FTR.GE.N_PR_FTRS) THEN
	    WRITE_FTR = ILINK__INTRNLERR
	    CALL LSL_PUTMSG(WRITE_FTR,1,'WRITE_FTR')	! debug
	    GOTO 50
	  END IF
	  I_PR_FTR = I_PR_FTR+1
	  GOTO 10
	END IF

C Write/append ftr I_PR_FTR - if not deleted

20	DELETED = FTR_PTS(2,I_PR_FTR).EQ.NIL

	IF (.NOT.DELETED) THEN
	  IF (HAD_BREAK.OR.HAD_MERGE) THEN
	    IS_BASE_FTR = FTR_PTS(1,I_PR_FTR).GT.0
	    IF (IS_BASE_FTR) THEN
	      WRITE_FTR = WRITE_PART_FTR(	! write part feature
     &		I_PR_FTR,
     &		PT,CC,NEAREST,NXT,PRV,FTR_PTS,FTR_START,
     &		FTR_INFTR,FTR_IFC2,PNT_FTR,FTR_NDS,FTR_DAT,
     &		IN_FTR_STATUS,IN_FTR_ADDR,
     &		HEADSHR,SHR,
     &		MAXPTS,MAXINFTRS,MAXOUTFTRS,MAXSHRS)
	    END IF
	  ELSE
	    WRITE_FTR = APPEND_FTR(	! accumulate part feature
     &		I_PR_FTR,
     &		PT,NEAREST,NXT,PRV,FTR_PTS,FTR_START,
     &		BASE_PR_FTR,MAXPTS,MAXOUTFTRS)
	  END IF
	  IF (.NOT.WRITE_FTR) GOTO 50	! if error, return
	END IF

C Check for further continuation ftrs

	IF (I_PR_FTR.EQ.N_PR_FTRS) GOTO 30
	I_PR_FTR = I_PR_FTR+1
	IF (FTR_ORIG_PR_FTR(I_PR_FTR).EQ.ORIG_PR_FTR) GOTO 20
30	LAST_PR_FTR = I_PR_FTR

40	IF (N_OUT_PTS.GT.0.AND..NOT.(HAD_BREAK.OR.HAD_MERGE)) THEN
	  WRITE_FTR = WRITE_WHOLE_FTR(
     &		PT,CC,ORIG_PR_FTR,BASE_PR_FTR,FTR_PTS,FTR_START,
     &		FTR_DAT,FTR_INFTR,PNT_FTR,IN_FTR_ADDR,nearest,
     &		MAXPTS,MAXINFTRS,MAXOUTFTRS)
	END IF

50	RETURN
	END
