C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-02-04 18:18:00.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION CHKNDS(IFTR,JFTR,INODE,JNODE)
 
***	IDENT	04FE93
***	MODULE	CHKNDS
 
C	Copyright : Laser-Scan Ltd., Cambridge, England
C	Created   : ACM					Nov 1986

CMOD1171 Do not change the values of coords x1, x2 by using
C	 weighting factors if they are identical, avoiding 
C	 rounding errors 				 JB 04-Jan-1993
C
CMOD1063 Both NODE coords changed to new position after 
C	 merging					 JB 14-Nov-1991
C	 (REMOVE 					 JB 04-Jan-1993)
C
CMOD	Converted to use Point Accuracy Codes		ACM 02-Dec-1988
CMOD	Made a function					ACM 10-Sep-1987
CMOD	Changed node weight record from *1 to *2	ACM 17-Aug-1987

	IMPLICIT NONE
 
C Parameters 
	INCLUDE		'($SSDEF)'

	INCLUDE		'LSL$CMNILINK:ILINKMSG.PAR'
 
C Commons
	INCLUDE		'LSL$CMNILINK:ILINK.CMN'
 
C Data in
	INTEGER*4	IFTR,JFTR		! ftr indices (not used)
	INTEGER*4	INODE,JNODE		! node indices

C Workspace
	INTEGER*4	IBASE,JBASE		! base-node indices
	INTEGER*4	INT4			! temp INTEGER*4

	INTEGER*2	IWT,JWT			! node weights
	INTEGER*2	NEW_WT			! new node weight

	REAL*4		DX,DY			! vec between nodes
	REAL*4		NEW_X,NEW_Y		! new node position
	REAL*4		XI,XJ,YI,YJ		! temp coords
	REAL*4		REALX,REALY		! temp coords
 
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Merges nodes INODE and JNODE if within smaller tolerance.
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

	CHKNDS = SS$_NORMAL	! assume success

C Find base-node indices

	IBASE = INODE

C10	int4 = base_node(ibase)

10	CALL ASSIGN_VAL(%VAL(BASE_NODE_START+4*(IBASE-1)),INT4,4)

	IF (INT4.NE.NIL) THEN
	  IBASE = INT4
	  GOTO 10
	END IF

	JBASE = JNODE

C20	int4 = base_node(jbase)

20	CALL ASSIGN_VAL(%VAL(BASE_NODE_START+4*(JBASE-1)),INT4,4)

	IF (INT4.NE.NIL) THEN
	  JBASE = INT4
	  GOTO 20
	END IF

	IF (IBASE.EQ.JBASE) GOTO 30		! return

C Check node separation

C	dx = npt(1,ibase) - npt(1,jbase)
	CALL ASSIGN_VAL(%VAL(NPT_START+8*(IBASE-1)),DX,4)
	CALL ASSIGN_VAL(%VAL(NPT_START+8*(JBASE-1)),REALX,4)

C	dy = npt(2,ibase) - npt(2,jbase)
	CALL ASSIGN_VAL(%VAL(NPT_START+8*(IBASE-1)+4),DY,4)
	CALL ASSIGN_VAL(%VAL(NPT_START+8*(JBASE-1)+4),REALY,4)


C Do not change identical coords

	if (dx.eq.realx .and. dy.eq.realy) then

C Take JBASE into IBASE

C	   base_node(jbase) = ibase
	   call assign_val(ibase,%val(base_node_start+4*(jbase-1)),4)

C	   iwt = nwt(ibase)
C	   jwt = nwt(jbase)
	   call assign_val(%val(nwt_start+2*(ibase-1)),iwt,2)
	   call assign_val(%val(nwt_start+2*(jbase-1)),jwt,2)

	   new_wt = iwt+jwt

C	   nwt(ibase) = new_wt
	   call assign_val(new_wt,%val(nwt_start+2*(ibase-1)),2)

	   goto 30
	endif


	DX = DX-REALX
	DY = DY-REALY

	IF (DX*DX+DY*DY .GT. NSTOL_SQ) GOTO 30		! return

C Take JBASE into IBASE

C	base_node(jbase) = ibase
	CALL ASSIGN_VAL(IBASE,%VAL(BASE_NODE_START+4*(JBASE-1)),4)

C Reposition node IBASE to new centre-of-mass

C	iwt = nwt(ibase)
C	jwt = nwt(jbase)
	CALL ASSIGN_VAL(%VAL(NWT_START+2*(IBASE-1)),IWT,2)
	CALL ASSIGN_VAL(%VAL(NWT_START+2*(JBASE-1)),JWT,2)

	NEW_WT = IWT+JWT

C	nwt(ibase) = new_wt
	CALL ASSIGN_VAL(NEW_WT,%VAL(NWT_START+2*(IBASE-1)),2)

C	npt(1,ibase) = (iwt*npt(1,ibase)+jwt*npt(1,jbase))/nwt(ibase)
C	npt(2,ibase) = (iwt*npt(2,ibase)+jwt*npt(2,jbase))/nwt(ibase)

	CALL ASSIGN_VAL(%VAL(NPT_START+8*(IBASE-1)),XI,4)
	CALL ASSIGN_VAL(%VAL(NPT_START+8*(JBASE-1)),XJ,4)
	CALL ASSIGN_VAL(%VAL(NPT_START+8*(IBASE-1)+4),YI,4)
	CALL ASSIGN_VAL(%VAL(NPT_START+8*(JBASE-1)+4),YJ,4)
C
	NEW_X = (IWT*XI+JWT*XJ)/NEW_WT
	NEW_Y = (IWT*YI+JWT*YJ)/NEW_WT
C
C Put new x,y into both NODE positions in NPT
C
	CALL ASSIGN_VAL(NEW_X,%VAL(NPT_START+8*(IBASE-1)),4)
	CALL ASSIGN_VAL(NEW_Y,%VAL(NPT_START+8*(IBASE-1)+4),4)
C
c	CALL ASSIGN_VAL(NEW_X,%VAL(NPT_START+8*(JBASE-1)),4)
c	CALL ASSIGN_VAL(NEW_Y,%VAL(NPT_START+8*(JBASE-1)+4),4)
C
30	RETURN
	END
C
