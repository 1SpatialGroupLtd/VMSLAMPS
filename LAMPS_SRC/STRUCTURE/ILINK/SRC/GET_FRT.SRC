C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-03-07 20:39:36.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION GET_FRT(FRTINT)
 
***	IDENT	07MR91
***	MODULE	GET_FRT

C	Copyright : Laser-Scan Laboratories, Cambridge, England

CMOD	Use new dynamic FRTLIB				 JB 05-Mar-1991
CMOD	Changed to use INT_RIPPLESORT in place of IRIPPLESORT,
C	so that this can be called from LSLLIB when/if
C	INT_RIPPLESORT is standardised.			ACM 12-Aug-1987
CMOD	Made a function					TJH 28-May-1987
C
C	Author	  : Andrew Morris			       Oct 1986

	IMPLICIT	NONE

C Parameters
	INCLUDE		'($SSDEF)'
	INCLUDE		'LSL$CMNILINK:ILINKMSG.PAR'

C Commons
	INCLUDE		'LSL$CMNFRT:FRTCOM.CMN'
	INCLUDE		'LSL$CMNILINK:ILINK.CMN'
C
C Arguments
	INTEGER*2	FRTINT(6,FRTCNT)	! the actual FRTINT array
C						! pointed to in the calling
C						! routine by FRTINT_LOC
C Workspace
	INTEGER*4	I
	INTEGER*4	FC			! feature-code
	INTEGER*4	GT			! graphical-type
	LOGICAL*4	ERROR			! error?
	INTEGER*4	INDEX(MAXFCS)		! for INT_RIPPLESORT
 
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Uses FRT file to set up array STRFCS of features-codes which
C	have graphical-type STRFC (symbol-string), and array REJFC of
C	feature-codes which have a graphical-type which is not suitable
C	for processing by ILINK and are therefore to be rejected from
C	processing (viz. circular arcs CLOTYP, ANTTYP, CIRTYP, FULTYP)
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

	GET_FRT = SS$_NORMAL

C Find FCs which have GT = CLOTYP...FULTYP

	N_REJFCS = 0
	N_STRFCS = 0

	DO 30 I = 1,FRTCNT
	  FC = FRTINT(1,I)
	  GT = FRTINT(2,I)

C	GT	Meaning
C	 1	line string
C	 2	clockwise circle arc
C	 3	anti-clockwise circle arc
C	 4	circum-circle arc
C	 5	full circumcircle
C	 6	interpolated curve
C	 7	unoriented symbol
C	 8	oriented symbol
C	 9	scaled symbol
C	10	text
C	11	symbol string
C	12	fill area

C	  GT :   1  2  3  4  5  6  7  8  9 10 11 12
	  GOTO (30,10,10,10,10,30,30,30,30,30,20,30) GT
	  GOTO 30

C ILINK cannot process implicit circular arcs

10	  IF (N_REJFCS.EQ.MAXFCS) THEN	! Check for overflow
	    GET_FRT = ILINK__PROCFRT
	    CALL LSL_PUTMSG(GET_FRT)
	    CALL LSL_ADDMSG(ILINK__TOOMNYRJFCS,MAXFCS)
	    GOTO 40
	  END IF
	  N_REJFCS = N_REJFCS+1
	  REJFCS(N_REJFCS) = FC
	  GOTO 30	  

C ILINK must give special treatment to symbol strings

20	  IF (N_STRFCS.EQ.MAXFCS) THEN	! Check for overflow
	    GET_FRT = ILINK__PROCFRT
	    CALL LSL_PUTMSG(GET_FRT)
	    CALL LSL_ADDMSG(ILINK__TOOMNYPRFCS,MAXFCS)
	    GOTO 40
	  END IF
	  N_STRFCS = N_STRFCS+1
	  STRFCS(N_STRFCS) = FC
30	CONTINUE

C Sort FCs into increasing order so that binary-search can be used to
C see whether an FC is in this list later on

	HAD_REJFCS = N_REJFCS.GT.0
	HAD_STRFCS = N_STRFCS.GT.0
	IF (HAD_REJFCS)CALL INT_RIPPLESORT(REJFCS,INDEX,N_REJFCS,.TRUE.)
	IF (HAD_STRFCS)CALL INT_RIPPLESORT(STRFCS,INDEX,N_STRFCS,.TRUE.)

40	RETURN
	END

