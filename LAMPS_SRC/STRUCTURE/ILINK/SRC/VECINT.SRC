C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-10-11 16:09:40.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION VECINT(	P1X4,P1Y4,P2X4,P2Y4,
     &					Q1X4,Q1Y4,Q2X4,Q2Y4,
     &					PF,QF,X4,Y4,
     &					PROPER_CUT,
     &					PARALLEL,
     &					IEND1,IEND2,
     &					E1X,E1Y,E2X,E2Y,DTOL)
 
***	IDENT	11OC88
***	MODULE	VECINT
 
C	Copyright : Laser-Scan Laboratories Ltd., Cambridge, England
C	Created   : ACM					Jun 1986

CMOD	Added PROPER_CUT argument to get around
C	nasty bug in CHECK_MAP logic		ACM	26-5-1988
 
	IMPLICIT NONE
 
C Parameters
	REAL*4		RTOL			! smallest signif real*4
	REAL*4		ATOL			! smallest signif angle
	PARAMETER(	RTOL = 1E-4,	ATOL = 2E-3)
 
C Data in
	REAL*4		P1X4,P1Y4,P2X4,P2Y4	! vector P end pts
	REAL*4		Q1X4,Q1Y4,Q2X4,Q2Y4	! vector Q end pts
	REAL*4		DTOL			! smallest signif dist
 
C Data out
	REAL*4		X4,Y4			! intersection point
	REAL*8		PF			! (X,Y) = P+PF*P1P2
	REAL*8		QF			! (X,Y) = Q+QF*Q1Q2
	REAL*4		E1X,E1Y,E2X,E2Y		! ends of int-interval
	LOGICAL*1	PROPER_CUT		! non-trivial crossover?
	LOGICAL*1	PARALLEL		! parallel intersection?
	INTEGER*4	IEND1,IEND2		! for each of E1 & E2,
C						  = -1 if is P-end
C						  =  0 if P-end & Q-end
C						  =  1 if is Q-end
 
C Workspace
	REAL*8		X8,Y8			! intersection point
	REAL*8		P1X8,P1Y8,P2X8,P2Y8	! vector P end pts
	REAL*8		Q1X8,Q1Y8,Q2X8,Q2Y8	! vector Q end pts
	REAL*8		P1P2X,P1P2Y		! vector P2-P1
	REAL*8		Q1Q2X,Q1Q2Y		! vector Q2-Q1
	REAL*8		P1Q1X,P1Q1Y		! vector Q1-P1
	REAL*8		P2Q2X,P2Q2Y		! vector Q2-P2
	REAL*8		PLEN,QLEN		! P1P2,Q1Q2 lengths
	REAL*8		DST1P,DST2P	! dists of P1 and P2 from Q12
	REAL*8		DST1Q,DST2Q	! dists of Q1 and Q2 from P12
	REAL*8		D1Q,D2Q
	REAL*8		P(2,4)			! end pt array
	REAL*8		D(4)			! dists along line
	REAL*8		E0X,E0Y,E3X,E3Y		! ...
	REAL*8		T			! temp real val
	REAL*8		D1P,D2P
	REAL*8		DET			! a determinant

	INTEGER*4	L(4)			! end pt indices
	INTEGER*4	I,J,K

	LOGICAL*1	PVEC_CUTS_QLIN		! vec P cuts line Q?
	LOGICAL*1	QVEC_CUTS_PLIN		! vec Q cuts line P?
	LOGICAL*1	COLINEAR		! vectors colinear?
	LOGICAL*1	P_IS_POINT,Q_IS_POINT	! is vec single pt?
 
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Function returns true and finds intersection point if and only
C	if there is intersection.
C
C	If vectors intersect but are parallel then intersection pt
C	returned is midpoint of overlapping section, and the ends of
C	the intersecting segment are returned in E1 and E2, while
C	IEND1 and IEND2 tell whether each of E1 and E2 is a P-end,
C	a Q-end, or both.
C
C	It is assumed that the two vectors have already passed the
C	"box test", ie.
C
C Check for vector box intersection
C
C	INTERSECTION = .FALSE.
C
C	IF (MAX(P1X,P2X).LT.MIN(Q1X,Q2X)-DTOL) GOTO 10
C	IF (MIN(P1X,P2X).GT.MAX(Q1X,Q2X)+DTOL) GOTO 10
C	IF (MAX(P1Y,P2Y).LT.MIN(Q1Y,Q2Y)-DTOL) GOTO 10
C	IF (MIN(P1Y,P2Y).GT.MAX(Q1Y,Q2Y)+DTOL) GOTO 10
C
C	INTERSECTION = VECINT(	P1X,P1Y,P2X,P2Y,
C     &				Q1X,Q1Y,Q2X,Q2Y,
C     &				PF,QF,X,Y,
C     &				PARALLEL,
C     &				IEND1,IEND2,
C     &				E1X,E1Y,E2X,E2Y,DTOL)
C
C10	CONTINUE
C
C	Note that the bulk of the code that follows is only used
C	when vectors are both parallel and colinear, which is very
C	rare on average. The routine is in fact designed for optimal
C	speed overall.
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
 
	VECINT = .FALSE.			! assume no intersection
	PROPER_CUT = .FALSE.			! assume no non-triv cut
 
	P1X8 = P1X4				! convert *4 to *8
	P1Y8 = P1Y4
	P2X8 = P2X4
	P2Y8 = P2Y4

	Q1X8 = Q1X4
	Q1Y8 = Q1Y4
	Q2X8 = Q2X4
	Q2Y8 = Q2Y4

	P1P2X = P2X8-P1X8			! vector P1P2
	P1P2Y = P2Y8-P1Y8
 
	Q1Q2X = Q2X8-Q1X8			! vector Q1Q2
	Q1Q2Y = Q2Y8-Q1Y8
 
	PLEN = SQRT(P1P2X*P1P2X+P1P2Y*P1P2Y)
	QLEN = SQRT(Q1Q2X*Q1Q2X+Q1Q2Y*Q1Q2Y)
	IF (PLEN.LT.RTOL.OR.QLEN.LT.RTOL) GOTO 50

	DET = Q1Q2X*P1P2Y-Q1Q2Y*P1P2X
 
C If parallel (or one or both vecs has no length), check for colinearity
 
	PARALLEL = ABS(DET)/(PLEN*QLEN).LT.ATOL	! sin(ang bet P&Q vecs)

	IF (PARALLEL) THEN
	  P1Q1X = Q1X8-P1X8			! vector P1Q1
	  P1Q1Y = Q1Y8-P1Y8

	  D1P = P1Q1Y*Q1Q2X - P1Q1X*Q1Q2Y 	! P1Q1.NQ
	  D1Q = P1Q1Y*P1P2X - P1Q1X*P1P2Y	! P1Q1.NP

C Check whether either vec is a single point

	  P_IS_POINT = PLEN.LT.DTOL
	  Q_IS_POINT = QLEN.LT.DTOL

	  IF (P_IS_POINT.AND.Q_IS_POINT) THEN
	    IF (ABS(P1Q1X).LT.DTOL.AND.ABS(P1Q1Y).LT.DTOL) THEN
	      E1X = P1X8
	      E1Y = P1Y8
	      E2X = Q1X8
	      E2Y = Q2Y8
	      IEND1 = 0
	      IEND2 = 0
	      X8 = (P1X8+P2X8+Q1X8+Q2X8)/4D0
	      Y8 = (P1Y8+P2Y8+Q1Y8+Q2Y8)/4D0
	      PF = 0.5
	      QF = 0.5
	      GOTO 40				! return successful
	    END IF
	  END IF

	  IF (Q_IS_POINT) THEN
	    COLINEAR = ABS(D1Q)/PLEN.LT.DTOL
	  ELSE
	    COLINEAR = ABS(D1P)/QLEN.LT.DTOL
	  END IF
	  IF (.NOT.COLINEAR) GOTO 50		! return unsuccessful
 
C Vecs are colinear and vec boxes intersect, so they must overlap
 
C Find end-points of overlapping section by finding relative position
C of all 4 end pts along shared line and taking the 2 in the centre
 
C Intersection pt required is the midpoint of these two points
 
	  P(1,1) = P1X8				! put end pts into array
	  P(2,1) = P1Y8
	  P(1,2) = P2X8
	  P(2,2) = P2Y8
	  P(1,3) = Q1X8
	  P(2,3) = Q1Y8
	  P(1,4) = Q2X8
	  P(2,4) = Q2Y8
 
C D(1..4) are dists of P1, P2, Q1, Q2 from P1 in direction P1P2 or Q1Q2
 
	  IF (P_IS_POINT) THEN
	    DO 5 I = 1,4			! end pt inds into array
	      L(I) = I				! & put dists into array
	      D(I) = Q1Q2X*(P(1,I)-P(1,1)) + Q1Q2Y*(P(2,I)-P(2,1))
5	    CONTINUE
	  ELSE
	    DO 10 I = 1,4			! end pt inds into array
	      L(I) = I				! & put dists into array
	      D(I) = P1P2X*(P(1,I)-P(1,1)) + P1P2Y*(P(2,I)-P(2,1))
10	    CONTINUE
	  END IF
 
C Sort D and L together by increasing D
 
	  DO 30 I = 2,4
	    DO 20 J = I,2,-1
	      IF (D(J).GE.D(J-1)) GOTO 30
	      T = D(J)				! swap distance
	      D(J) = D(J-1)
	      D(J-1) = T
	      K = L(J)				! swap index
	      L(J) = L(J-1)
	      L(J-1) = K
20	    CONTINUE
30	  CONTINUE
 
C Set E1, E2, IEND1 and IEND2 as defined above

	  E0X = P(1,L(1))
	  E0Y = P(2,L(1))

	  E1X = P(1,L(2))
	  E1Y = P(2,L(2))

	  E2X = P(1,L(3))
	  E2Y = P(2,L(3))

	  E3X = P(1,L(4))
	  E3Y = P(2,L(4))

	  IF (D(1).EQ.D(2).OR.D(2).EQ.D(3)) THEN
	    IEND1 = 0
	  ELSE IF (L(2).LE.2) THEN
	    IEND1 = -1
	  ELSE
	    IEND1 = 1
	  END IF

	  IF (D(2).EQ.D(3).OR.D(3).EQ.D(4)) THEN
	    IEND2 = 0
	  ELSE IF (L(3).LE.2) THEN
	    IEND2 = -1
	  ELSE
	    IEND2 = 1
	  END IF

C Set (X,Y) = mid-point of intersecting segment

	  X8 = (E1X+E2X)/2D0
	  Y8 = (E1Y+E2Y)/2D0
 
C Find corresponding values for PF and QF
 
	  IF (MAX(ABS(P1P2X),ABS(P1P2Y)).GT.RTOL) THEN
	    IF (ABS(P1P2X).GT.ABS(P1P2Y)) THEN
	      PF = (X8-P1X8)/P1P2X
	    ELSE
	      PF = (Y8-P1Y8)/P1P2Y
	    END IF
	  ELSE
	    PF = 0
	  END IF
 
	  IF (MAX(ABS(Q1Q2X),ABS(Q1Q2Y)).GT.RTOL) THEN
	    IF (ABS(Q1Q2X).GT.ABS(Q1Q2Y)) THEN
	      QF = (X8-Q1X8)/Q1Q2X
	    ELSE
	      QF = (Y8-Q1Y8)/Q1Q2Y
	    END IF
	  ELSE
	    QF = 0
	  END IF
 
	  GOTO 40				! return successful
	END IF				! end of code for parallel case
 
	P1Q1X = Q1X8-P1X8			! vector P1Q1
	P1Q1Y = Q1Y8-P1Y8
	P2Q2X = Q2X8-P2X8			! vector P2Q2
	P2Q2Y = Q2Y8-P2Y8
 
	D1P = P1Q1Y*Q1Q2X - P1Q1X*Q1Q2Y 	! P1Q1.NQ
	D2P = P2Q2Y*Q1Q2X - P2Q2X*Q1Q2Y		! P2Q2.NQ

	DST1P = D1P/QLEN			! dist of P1 from Q12
	DST2P = D2P/QLEN			! dist of P2 from Q12
 
C If vec P all one side of line Q then return
 
	IF (DST1P.GT. DTOL.AND.DST2P.GT. DTOL) GOTO 50
	IF (DST1P.LT.-DTOL.AND.DST2P.LT.-DTOL) GOTO 50
 
	D1Q = P1Q1Y*P1P2X - P1Q1X*P1P2Y		! P1Q1.NP
	D2Q = P2Q2Y*P1P2X - P2Q2X*P1P2Y		! P2Q2.NP
 
	DST1Q = D1Q/PLEN			! dist of Q1 from P12
	DST2Q = D2Q/PLEN			! dist of Q2 from P12
 
C If vec Q all one side of line P then return
 
	IF (DST1Q.GT. DTOL.AND.DST2Q.GT. DTOL) GOTO 50
	IF (DST1Q.LT.-DTOL.AND.DST2Q.LT.-DTOL) GOTO 50
 
C Vectors intersect - do they cross over non-trivially?

	PVEC_CUTS_QLIN = (DST1P.GT. DTOL.AND.DST2P.LT.-DTOL).OR.
     &	                 (DST1P.LT.-DTOL.AND.DST2P.GT. DTOL)

	QVEC_CUTS_PLIN = (DST1Q.GT. DTOL.AND.DST2Q.LT.-DTOL).OR.
     &	                 (DST1Q.LT.-DTOL.AND.DST2Q.GT. DTOL)

	PROPER_CUT = PVEC_CUTS_QLIN.AND.QVEC_CUTS_PLIN

C calculate intersection point
 
	PF = D1P/DET
	QF = D1Q/DET
	PF = MIN(1D0,MAX(0D0,PF))
	QF = MIN(1D0,MAX(0D0,QF))

	X8 = P1X8+PF*P1P2X
	Y8 = P1Y8+PF*P1P2Y

	X4 = X8
	Y4 = Y8 

40	VECINT = .TRUE.
50	RETURN
	END

