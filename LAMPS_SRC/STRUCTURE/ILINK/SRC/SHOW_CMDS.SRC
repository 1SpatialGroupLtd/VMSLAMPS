C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-09-14 18:18:44.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE SHOW_CMDS
C
***	MODULE	SHOW_CMDS
***	IDENT	14SE93
C
C	Copyright : Laser-Scan Ltd., Cambridge, England
C	Created   : ACM					     Month 1986
C
CMOD1293Revised to reflect new /SYMBOL functionality	 JB 14-Sep-1993
CMOD	Revised to reflect new CLD file			ACM 10-Sep-1987
CMOD	Bug in several filespec len args fixed		ACM 19-Aug-1987
CMOD	Formatting of shared feature codes tidied	TJH 02-Jun-1987
C
	IMPLICIT NONE
C
C Commons
	INCLUDE		'LSL$CMNILINK:ILINK.CMN'
	INCLUDE		'LSL$CMNILINK:ILINKCHAR.CMN'
C
C Workspace
	INTEGER*4	I,J,K,LO,HI
	LOGICAL*4	NOT_FIRST
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Show ILINK command interpretation
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C Show input filename
C
	CALL WRITEF  (' Input from                   : %S',
     &	  INFILE(1:IN_LEN))
C
C Show output filename, if applicable
C
	CALL EXPAND(' Output to                    : ')
C
	IF (HAD_SORTARMS) THEN
	  CALL APPEND('No output file - file is processed in-situ')
C
	ELSEIF (HAD_VERIFY) THEN
	  CALL APPEND('No output file - join verification only')
C
	ELSE
	  CALL APPEND('%S',OUTFILE(1:OUT_LEN))
	END IF
C
	CALL TTWLIN
C
C Show process
C
	CALL EXPAND  (' Process                      : ')
C
	IF (HAD_LLJOIN) THEN
	  CALL APPEND('LLJOIN - Feature alignment')
C
	ELSEIF (HAD_MERGE) THEN
	  CALL APPEND('MERGE - Feature merging')
C
	ELSEIF (HAD_PPJOIN) THEN
	  IF (HAD_VERIFY) THEN
	    CALL APPEND('PPJOIN - Tolerance verification')
	  ELSE
	    CALL APPEND('PPJOIN - Ends with ends junction formation')
	  ENDIF
C
	  CALL TTWLIN
C
	  IF (HAD_PROJECT) THEN
	    CALL EXPAND('                              :'//
     &					' ends projected.')
	  ELSE
	     CALL EXPAND('                              :'//
     &					' end onto end.')
	  END IF
C
	ELSEIF (HAD_LPJOIN) THEN
	  IF (HAD_VERIFY) THEN
	    CALL APPEND('LPJOIN - Tolerance verification')
	  ELSE
	    CALL APPEND('LPJOIN - Ends with lines junction formation')
	  END IF
C
	  CALL TTWLIN
C
	  IF (HAD_VERTEX) THEN
	    CALL EXPAND('                              :'//
     &					' with vertex priority')
	  ELSE
	    CALL EXPAND('                              :'//
     &					' with no vertex priority')
	  ENDIF
C
	  CALL TTWLIN
C
	  IF (HAD_SYMBOL) THEN
	    CALL EXPAND('                              :'//
     &					' with symbol priority.')
	  ELSE
	    CALL EXPAND('                              :'//
     &					' with no symbol priority.')
	  ENDIF
C
	ELSEIF (HAD_BREAK) THEN
	  CALL APPEND('BREAK - Breaking features at junctions')
C
	ELSEIF (HAD_STRUCTURE) THEN
	  CALL APPEND('STRUCTURE - Junction Structure formation')
C
	ELSEIF (HAD_SORTARMS) THEN
	  CALL APPEND('SORTARMS - Arm sorting')
C
	ELSEIF (HAD_FREE_ENDS) THEN
	  CALL APPEND('FREE_ENDS - (fc:%N, layer:%N)',
     &	     FREE_ENDS_FC,FREE_ENDS_LAYER)
	ENDIF
C
	CALL TTWLIN
C
	IF (HAD_SORTARMS) GOTO 100
C
	IF (HAD_LLJOIN.OR.HAD_LPJOIN.OR.HAD_PPJOIN) THEN
	  CALL WRITEF  (' Join tolerance               : %F8.3',JNTOL)
	ENDIF
C
	IF (HAD_LPJOIN.OR.(HAD_PPJOIN.AND.HAD_PROJECT)) CALL WRITEF
     &	               (' Max vector extension         : %F8.3',EXTOL)
C
	IF (HAD_LPJOIN.OR.HAD_PPJOIN) THEN
	  CALL WRITEF  (' Min verification tolerance   : %F8.3',VRTOL)
	END IF
C
	IF (NEED_NODATA) GOTO 100
C
C Show layers to be processed
C
	CALL EXPAND    (' Layers to be processed       : ')
C
	IF (.NOT.HAD_LAYERS) THEN
	  CALL APPEND('All layers, (excluding layer 0).')
C
	ELSE
	  HI = 0
	  NOT_FIRST = .FALSE.
10	  LO = HI+1
	  HI = LO
20	  IF (HI.GE.N_LAYERS) GOTO 30
	  IF (LAYER(HI)+1.EQ.LAYER(HI+1)) THEN
	    HI = HI+1
	    GOTO 20
	  END IF
30	  IF (NOT_FIRST) CALL APPEND(', ')
	  NOT_FIRST = .TRUE.
	  IF (LO.EQ.HI) THEN
	    CALL APPEND('%N',LAYER(LO))
	  ELSE
	    CALL APPEND('%N:%N',LAYER(LO),LAYER(HI))
	  END IF
	  IF (HI.LT.N_LAYERS) GOTO 10
	ENDIF
C
	CALL TTWLIN

C Parent-feature identifiers given (AC type 9 entries)

	IF (HAD_MERGE.OR.HAD_BREAK) THEN
	  CALL EXPAND  (' Parent-feature entries?      : ')
	  IF (HAD_PARENT) THEN
	    CALL APPEND('Yes.')
	  ELSE
	    CALL APPEND('No.')
	  END IF
	  CALL TTWLIN
	ENDIF
C
C Report free-end (1-arm) nodes?
C
	IF (HAD_STRUCTURE) THEN
	  CALL EXPAND  (' Report free-end nodes        :')
	  IF (HAD_FREE_ENDS) THEN
	    CALL APPEND(' Yes.')
	  ELSE
	    CALL APPEND(' No.')
	  END IF
	  CALL TTWLIN
	ENDIF
C
C Show any LITES2 command file specified
C
	IF (HAD_LITES2) THEN
	  CALL WRITEF(' LITES2 command file          : %S',
     &	    LITES2FILE(:LI_LEN))
	ENDIF
C
C Show any FRT file specified
C
	IF (HAD_FRT) THEN
	  CALL WRITEF(' FRT file                     : %S',
     &	    FRTFILE(1:FRT_LEN))
	ENDIF
C
C Show any TOL file specified
C
	IF (HAD_TOL) THEN
	  CALL WRITEF(' TOL file                     : %S',
     &	    TOLFILE(1:TOL_LEN))
	ENDIF
C
C Show any PAC file specified
C
	IF (HAD_PAC) THEN
	  CALL WRITEF(' PAC file                     : %S',
     &	    PACFILE(1:PAC_LEN))
	ENDIF
C
C Show LC Pairs specified
C
	IF (HAD_SORTARMS) GOTO 75
C
	IF (HAD_LCP.AND.N_LAYERS.GT.0) THEN
	  CALL WRITEF(' LCP file                     : %S',
     &	    LCPFILE(1:LCP_LEN))
	  CALL WRITEF(' Layer pairs specified')
	  CALL SHOW_PAIRS(N_LAYERS,MAXLAYERS,LAYER,FCPAIR)
	END IF
C
C Show FC Pairs specified
C
	IF (HAD_FCP.AND.N_FCS.GT.0) THEN
	  CALL WRITEF(' FCP file                     : %S',
     &	    FCPFILE(1:FCP_LEN))
	  CALL WRITEF(' Feature code pairs specified')
	  CALL SHOW_PAIRS(N_FCS,MAXLAYERS,FCS4,FCPAIR)
	ENDIF
C
C Show AC Pairs specified
C
	IF (HAD_ACP.AND.N_ACPRS.GT.0) THEN
	  CALL WRITEF(' ACP file                     : %S',
     &	    ACPFILE(1:ACP_LEN))
	  CALL WRITEF(' AC pairs specified')
	  DO 70 I = 1,N_ACPRS
	    CALL WRITEF    ('    swap  %^W%I4  with  %^W%I4',
     &	      ACPAIR(1,I),ACPAIR(2,I))
70	  CONTINUE
	ENDIF
C
C Show FC-Combinations specified
C
75	IF (.NOT.HAD_MERGE) GOTO 100
C
	CALL WRITEF  (' General shared-feature code  : %^W%N',SHRFC2)
C
	IF (HAD_FCC.AND.N_FCCS.GT.0) THEN
	  CALL WRITEF(' FCC file                     : %S',
     &	    FCCFILE(1:FCC_LEN))
	  CALL WRITEF(
     &	  ' Feature codes for particular shared-feature combinations')
	  CALL WRITEF('   Shared code       Combining feature codes')
C
	  DO 90 I = 1,N_FCCS
	    CALL EXPAND('        %I5         ',SHFC4(I))
	    CALL APPEND('   (%N',FCC4(1,I))
	    DO 80 J = 2,N_FCPFCC(I)
	      CALL APPEND(',%N',FCC4(J,I))
80	    CONTINUE
	    CALL APPEND(')')
	    CALL TTWLIN
90	  CONTINUE
	ENDIF
C
100	RETURN
	END
C
