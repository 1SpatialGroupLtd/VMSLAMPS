C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-06-21 15:20:28.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION CHKPTS(PFTR,QFTR,IP,IQ)
 
***	MODULE	CHKPTS
***	IDENT	20JN88
 
C	Copyright : Laser-Scan Laboratories Ltd., Cambridge, England

CMOD	Introduced FTR_LAYER for new /LCP qualifier	ACM 21-Mar-1988
CMOD	Made into a function				ACM 10-Sep-1987
CMOD	Added arg to INTRNLERR message			ACM 14-Aug-1987
CMOD	Should be a a function but return status actually
C	passed using /LSL_STATUS/CHKPTS as a temporary
C	frig as QUALLIB is currently subroutine based	TJH 29-May-1987
C	Created   : ACM					       Nov 1986
 
	IMPLICIT NONE

C Parameters 
	INCLUDE		'($SSDEF)'

	INCLUDE		'LSL$CMNILINK:ILINKMSG.PAR'

C Commons
	INCLUDE		'LSL$CMNLSL:STATUS.CMN'
	INCLUDE		'LSL$CMNILINK:ILINK.CMN'

C Data in
	INTEGER*4	PFTR,QFTR	! ftr indices
	INTEGER*4	IP		! pt P PT index
	INTEGER*4	IQ		! pt Q PT index

C Workspace
	INTEGER*4	IR		! pt R PT index
	INTEGER*4	RFTR		! ftr index
	INTEGER*4	ILO,IHI
	INTEGER*4	HIFTR,LOFTR

	INTEGER*2	HFC,RFC		! ftr codes

	REAL*4		REAL4		! temp REAL*4 value
	REAL*4		PX,PY		! point P coords
	REAL*4		QX,QY		! point Q coords
	REAL*4		SQDIST		! sq dist betw P and Q

	LOGICAL*4	MAP		! reassign NEAREST?
	LOGICAL*4	SEEN
 
C Functions
	BYTE		LTEQGT		! gives priority ordering
 
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Points P to Q &/or Q to P or neither in such a way that in the
C	end every point will be pointed (by NEAREST) to the nearest
C	point with lowest higher priority which is within alignment
C	tolerance (priority coming before distance, given that distance
C	is within tolerance).
C
C	Also ensures that all pts ever eligable for joining are marked
C	with PT_SEEN = .TRUE.
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
 
	CHKPTS = SS$_NORMAL	! assume success

C Do not point between points not within alignment tolerance
C	px = pt(1,ip)
C	py = pt(2,ip)
	CALL ASSIGN_VAL(%VAL(PT_START+8*(IP-1)),PX,4)
	CALL ASSIGN_VAL(%VAL(PT_START+8*(IP-1)+4),PY,4)

C	qx = pt(1,iq)
C	qy = pt(2,iq)
	CALL ASSIGN_VAL(%VAL(PT_START+8*(IQ-1)),QX,4) 
	CALL ASSIGN_VAL(%VAL(PT_START+8*(IQ-1)+4),QY,4)

	SQDIST = (PX-QX)**2+(PY-QY)**2
	IF (SQDIST.GT.JNTOL_SQ) GOTO 60		! return
 
C Points are from separate features and are within alignment tolerance
C and are therefore eligable for joining
 
	IF (LTEQGT(PFTR,QFTR)) 1,2,3

1	ILO = IP
	IHI = IQ
	LOFTR = PFTR
	HIFTR = QFTR
	GOTO 4

2	CHKPTS = ILINK__INTRNLERR
	CALL LSL_PUTMSG(CHKPTS,1,'CHKPTS')	! debug
	GOTO 60

3	ILO = IQ
	IHI = IP
	LOFTR = QFTR
	HIFTR = PFTR

4	CONTINUE

C ILO will map to IHI if ILO is not yet mapped, or else if the point
C IR onto which it is mapped has higher priority than IHI, or else if
C it has the same priority then if it is nearer to IHI than IR
 
C10	ir = nearest(ilo)
10	CALL ASSIGN_VAL(%VAL(NEAREST_START+4*(ILO-1)),IR,4)

	IF (IR.EQ.NIL) THEN
	  MAP = .TRUE.
	ELSE
C	  rftr = pt_pr_ftr(ir)
	  CALL ASSIGN_VAL(%VAL(PT_PR_FTR_START+4*(IR-1)),RFTR,4)

	  IF (LTEQGT(HIFTR,RFTR)) 20,30,40

20	  IF (HAD_FCP.OR.HAD_LCP) THEN
	    IF (HAD_FCP) THEN
C	      hfc = ftr_ifc2(hiftr)
C	      rfc = ftr_ifc2(rftr)
	      CALL ASSIGN_VAL(%VAL(FTR_IFC2_START+2*(HIFTR-1)),HFC,2)
	      CALL ASSIGN_VAL(%VAL(FTR_IFC2_START+2*(RFTR-1)),RFC,2)
	    ELSE
C	      hfc = ftr_layer(hiftr)
C	      rfc = ftr_layer(rftr)
	      CALL ASSIGN_VAL(%VAL(FTR_LAYER_START+2*(HIFTR-1)),HFC,2)
	      CALL ASSIGN_VAL(%VAL(FTR_LAYER_START+2*(RFTR-1)),RFC,2)
	    END IF
	    IF (FCPAIR(HFC,RFC)) THEN
	      MAP = .TRUE.
	    ELSE
	      GOTO 30
	    END IF
	  ELSE
	    MAP = .TRUE.
	  END IF
	  GOTO 50

C30	  map = sqdist.lt.minsqdist(ilo)
30	  CALL ASSIGN_VAL(%VAL(MINSQDIST_START+4*(ILO-1)),REAL4,4)
	  MAP = SQDIST.LT.REAL4
	  GOTO 50

40	  IF (HAD_FCP.OR.HAD_LCP) THEN
	    IF (HAD_FCP) THEN
C	      hfc = ftr_ifc2(hiftr)
C	      rfc = ftr_ifc2(rftr)
	      CALL ASSIGN_VAL(%VAL(FTR_IFC2_START+2*(HIFTR-1)),HFC,2)
	      CALL ASSIGN_VAL(%VAL(FTR_IFC2_START+2*(RFTR-1)),RFC,2)
	    ELSE
C	      hfc = ftr_layer(hiftr)
C	      rfc = ftr_layer(rftr)
	      CALL ASSIGN_VAL(%VAL(FTR_LAYER_START+2*(HIFTR-1)),HFC,2)
	      CALL ASSIGN_VAL(%VAL(FTR_LAYER_START+2*(RFTR-1)),RFC,2)
	    END IF
	    IF (FCPAIR(HFC,RFC)) THEN
	      MAP = .FALSE.
	    ELSE
	      GOTO 30
	    END IF
	  ELSE
	    MAP = .FALSE.
	  END IF
	END IF
 
C50	pt_seen(ilo) = .TRUE.
50	CALL ASSIGN_VAL(.TRUE.,%VAL(PT_SEEN_START+(ILO-1)),1)

C 	pt_seen(ihi) = .TRUE.
	CALL ASSIGN_VAL(.TRUE.,%VAL(PT_SEEN_START+(IHI-1)),1)

	IF (MAP) THEN
C	  nearest(ilo) = ihi
C	  minsqdist(ilo) = sqdist
	  CALL ASSIGN_VAL(IHI,%VAL(NEAREST_START+4*(ILO-1)),4)
	  CALL ASSIGN_VAL(SQDIST,%VAL(MINSQDIST_START+4*(ILO-1)),4)
	END IF

60	RETURN 
	END
