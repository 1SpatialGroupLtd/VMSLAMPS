C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-01-13 16:43:30.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION ADD_FTR(FC,IFC,ILI,IN_FTR,
     &				 PT,CC,NXT,PRV,PT_PR_FTR,
     &				 FTR_PTS,FTR_START,
     &				 FTR_IFC2,FTR_LAYER,FTR_INFTR,
     &				 FTR_ORIG_PR_FTR,PNT_FTR,
     &				 MAXPTS,MAXINFTRS,MAXOUTFTRS)

***	MODULE	ADD_FTR
***	IDENT	13JA93
 
C	Copyright : Laser-Scan Ltd., Cambridge, England

C	Created   : ACM					       Dec 1986

CMOD	Made a function					TJH 28-May-1987
CMOD	Added FTR_LAYER setting for new /LCP qual	ACM 21-Mar-1988
CMOD	Remove NUM from argument list			 JB  8-May-1992

	IMPLICIT NONE

C Parameters
	INCLUDE		'($SSDEF)'

	INCLUDE		'LSL$CMNILINK:ILINKMSG.PAR'

C Commons
	INCLUDE		'LSL$CMNILINK:ILINK.CMN'

C Data in/out 
	INTEGER*4	FC		! ftr FC
	INTEGER*4	IFC		! ftr FCS4 index
	INTEGER*4	ILI		! ftr LAYER index
	INTEGER*4	IN_FTR		! input-ftr index
	INTEGER*4	MAXPTS,MAXINFTRS,MAXOUTFTRS
	INTEGER*4	NXT(MAXPTS),PRV(MAXPTS)
	INTEGER*4	PT_PR_FTR(MAXPTS)
	INTEGER*4	FTR_PTS(2,MAXOUTFTRS)
	INTEGER*4	FTR_START(MAXOUTFTRS)
	INTEGER*2	FTR_IFC2(MAXOUTFTRS)
	INTEGER*2	FTR_LAYER(MAXOUTFTRS)
	INTEGER*4	FTR_INFTR(MAXOUTFTRS)
	INTEGER*4	FTR_ORIG_PR_FTR(MAXOUTFTRS)
	LOGICAL*1  	PNT_FTR(MAXOUTFTRS)
	REAL*4		PT(2,MAXPTS)
	INTEGER*4	CC(MAXPTS)

C Workspace
	INTEGER*4	I,TFC
	INTEGER*4	IPTSTA		! PT index of first new pt

C Functions
	LOGICAL*4	CREATE_FTR	
	LOGICAL*4	CREATE_PT	

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Adds feature in LINKPTS to ILINK data structure
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

	ADD_FTR = SS$_NORMAL

C If FCP file was used then store FC index in FTR_IFC, else store FC

	IF (HAD_FCP) THEN
	  TFC = IFC
	ELSE
	  TFC = FC
	END IF

C Treat one-pt-ftrs as zero-length vectors

	IF (NLPTS.EQ.1) THEN
	  IF (.NOT.NEED_DATA_PER_POINT) GOTO 10
	  NLPTS = 2
	  LINKPTS(1,2) = LINKPTS(1,1)
	  LINKPTS(2,2) = LINKPTS(2,1)
	  LINKCCS(2) = LINKCCS(1)
10	  PNT_FTR(N_PR_FTRS+1) = .TRUE.
	END IF

C Note line start & end PT indices, and FC index

	ADD_FTR = CREATE_FTR(N_PTS+1,N_PTS+NLPTS,TFC,ILI,IN_FTR,
     &				N_PR_FTRS+1,FTR_PTS,FTR_START,FTR_IFC2,
     &				FTR_LAYER,FTR_INFTR,FTR_ORIG_PR_FTR,
     &				MAXOUTFTRS)

	IF (.NOT.ADD_FTR) GOTO 30		! return, with error

C Append line points to PT linked list

	IF (.NOT.NEED_DATA_PER_POINT) GOTO 30	! return, with success

	DO 20 I = 1,NLPTS
	  ADD_FTR = CREATE_PT(	LINKPTS(1,I),LINKPTS(2,I),LINKCCS(I),
     &				N_PR_FTRS,PT,CC,PT_PR_FTR,MAXPTS)

	  IF (.NOT.ADD_FTR) GOTO 30		! return, with error

	  PRV(N_PTS) = N_PTS-1
	  NXT(N_PTS) = N_PTS+1
20	CONTINUE

	PRV(N_PTS-NLPTS+1) = NIL
	NXT(N_PTS) = NIL

30	IF (ADD_FTR) ADD_FTR = SS$_NORMAL
	RETURN
	END

