C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-08-08 11:59:48.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION SORTARMS(X,Y,NARMS)

***	MODULE  SORTARMS
***	IDENT	08AU88
C 
C	Copyright : Laser-Scan Laboratories Ltd., Cambridge, England

CMOD	Converted to accept CB in place of ST entries	ACM 06-Apr-1988
CMOD	Made a function					TJH 28-May-1987
C	Created   : ACM					       Jul 1986

	IMPLICIT NONE

C Parameters
	INCLUDE		'($SSDEF)'

	INCLUDE		'LSL$CMNILINK:ILINKMSG.PAR'

C Commons
	INCLUDE		'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE		'LSL$CMNIFF:IFFJUN.CMN'
	INCLUDE		'LSL$CMNILINK:ILINK.CMN'
	INCLUDE		'LSL$CMNLSL:STATUS.CMN'

C Data in
	REAL*4		X,Y			! node coords
	INTEGER*2	NARMS			! # node arms

C Workspace
	INTEGER*4	CBPOS(MAXAPN)		! CB start address
	INTEGER*4	JB			! JB address
	INTEGER*4	I,J			! loop indices
	INTEGER*4	NPTS			! # pts in CB
	INTEGER*4	INT4			! temp int*4 val

	INTEGER*2	N_PROPER_ARMS		! # arms for non-pt ftrs
	INTEGER*2	JO			! junction offset
	INTEGER*2	IPT(MAXAPN)		! point index within CB
	INTEGER*2	IARM			! arm index
	INTEGER*2	IECODE,IELEN		! for IFFPKE
	INTEGER*2	INT2			! temp int*2 val

	REAL*4		DX,DY			! vector leaving node
	REAL*4		ENDP(2),NXTP(2)		! first/last 2 pts in CB
	REAL*4		REL4			! temp real*4 val
	REAL*4		ANG(MAXAPN)		! arm angle

	LOGICAL*4	OK
	LOGICAL*4	START			! arm at start/end of CB

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Sorts arms in node-in-hand into order anti-clockwise from
C	3 o'clock
C
C	Angle for point-features (only) is 0
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

	SORTARMS = SS$_NORMAL	! assume the best

C Test for too many arms at one node for data structure to cope with

	IF (NARMS.GT.MAXAPN) THEN
	  SORTARMS = ILINK__TOOMNYAPN
	  CALL LSL_PUTMSG(SORTARMS,MAXAPN)
	  GOTO 60
	END IF

C Note current JB address and junction offset

	JB = LPOSH
	JO = IFPOSJ

C Put CB-pointer and CB-point index for each arm into local arrays

	DO 10 IARM = 1,NARMS
	  CALL JIHR(IARM,CBPOS(IARM),IPT(IARM))
	  OK = IERCD.EQ.0.AND.IERNM.EQ.1
	  IF (.NOT.OK) THEN
	    SORTARMS = ILINK__BADJNSTR
	    CALL LSL_PUTMSG(SORTARMS)
	    GOTO 60
	  END IF
10	CONTINUE

C Find arm angles and put these into a local array also

	N_PROPER_ARMS = 0
	DO 20 IARM = 1,NARMS

C Take CB entry into hand

	  CALL IFFPKE(IECODE,IELEN,CBPOS(IARM))
	  IF (IECODE.NE.'CB') THEN
	    SORTARMS = ILINK__BADADDR
	    CALL LSL_PUTMSG(SORTARMS)
	    GOTO 60
	  END IF

C Get coords of first/last two points

	  START = IPT(IARM).EQ.1
	  CALL GETARM(ENDP,NXTP,START,NPTS)

C Find arm angle

	  IF (NPTS.LT.2) THEN
	    ANG(IARM) = 0
	  ELSE
	    N_PROPER_ARMS = N_PROPER_ARMS+1
	    DX = NXTP(1)-ENDP(1)
	    DY = NXTP(2)-ENDP(2)
	    IF (DX.EQ.0.AND.DY.EQ.0) THEN
	      ANG(IARM) = 0
	    ELSE
	      ANG(IARM) = ATAN2(DY,DX)
	      IF (ANG(IARM).LE.0) ANG(IARM) = ANG(IARM)+TWOPI
	    END IF
	  END IF
20	CONTINUE	  

C Ripple sort CBPOS and IPT by ANG

	IF (NARMS.GT.1) THEN
	  DO 40 I = 2,NARMS
	    DO 30 J = I,2,-1
	      IF (ANG(J).GE.ANG(J-1)) GOTO 40
	      REL4 = ANG(J)
	      INT4 = CBPOS(J)
	      INT2 = IPT(J)
	      ANG(J) = ANG(J-1)
	      CBPOS(J) = CBPOS(J-1)
	      IPT(J) = IPT(J-1)
	      ANG(J-1) = REL4
	      CBPOS(J-1) = INT4
	      IPT(J-1) = INT2
30	    CONTINUE
40	  CONTINUE
	END IF

C Relocate current junction

	CALL IFJPKJ(X,Y,NARMS,JB,JO)
	IF (NARMS.EQ.-1) THEN
	  SORTARMS = ILINK__BADJNSTR
	  CALL LSL_PUTMSG(SORTARMS)
	  GOTO 60
	END IF

C Replace CBPOS and IPT into arm fields in order

	DO 50 IARM = 1,NARMS
	  CALL JIHW(IARM,CBPOS(IARM),IPT(IARM))
50	CONTINUE

C Count No. of nodes with No. of arms = N_PROPER_ARMS

	IF (N_PROPER_ARMS.EQ.0) THEN
	  N_0_NODES = N_0_NODES+1
	ELSE IF (N_PROPER_ARMS.EQ.1) THEN
	  N_1_NODES = N_1_NODES+1
	ELSE IF (N_PROPER_ARMS.EQ.2) THEN
	  N_2_NODES = N_2_NODES+1
	ELSE IF (N_PROPER_ARMS.EQ.3) THEN
	  N_3_NODES = N_3_NODES+1
	ELSE IF (N_PROPER_ARMS.EQ.4) THEN
	  N_4_NODES = N_4_NODES+1
	ELSE
	  N_5PLUS_NODES = N_5PLUS_NODES+1
	END IF

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

C As SORTARMS is invoked as as argument to IFJSCN the value SORTARMS
C returs in R0 will not be available to the routine invoking
C IFJSCN. We therefore use /STATUS/LSL_STATUS to return the
C success of the function.

60	LSL_STATUS = SORTARMS
	RETURN
	END
