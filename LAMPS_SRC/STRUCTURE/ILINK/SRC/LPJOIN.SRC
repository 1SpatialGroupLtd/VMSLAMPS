C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-05-25 18:33:40.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION LPJOIN(PT,CC,
     &		NXT,PRV,NEAREST,PT_DST,PT_PR_FTR,PDAT,QDAT,PT_SEEN,
     &		FTR_PTS,FTR_START,PNT_FTR,FTR_INFTR,FTR_ORIG_PR_FTR,
     &		FTR_IFC2,FTR_LAYER,IN_FTR_STATUS,WORKSPACE,
     &		MAXPTS,MAXINFTRS,MAXOUTFTRS,MAXNODES)

***	MODULE	LPJOIN
***	IDENT	25MY93

C	Copyright : Laser-Scan Ltd., Cambridge, England

CMOD1232 Pass PT array to DEL1				 JB 25-May-1993

CMOD	 Introduced FTR_LAYER for new /LCP qualifier	ACM 21-Mar-1988
CMOD	 Made to use the new standard QUADSCAN		ACM 10-Sep-1987
CMOD	 Made a function				TJH 29-May-1987

C	Created   : ACM					       Jul 1986

	IMPLICIT NONE

C Parameters
	INCLUDE		'($SSDEF)'
	INCLUDE		'LSL$CMNILINK:ILINKMSG.PAR'

C Commons
	INCLUDE		'LSL$CMNLSL:STATUS.CMN'
	INCLUDE		'LSL$CMNILINK:ILINK.CMN'

C Data in/out
	INTEGER*4	MAXPTS,MAXINFTRS,MAXOUTFTRS,MAXNODES
	INTEGER*4	NEAREST(MAXPTS)
	INTEGER*4	NXT(MAXPTS)
	INTEGER*4	PRV(MAXPTS)
	INTEGER*4	FTR_PTS(2,MAXOUTFTRS)
	INTEGER*4	FTR_START(MAXOUTFTRS)
	INTEGER*4	FTR_INFTR(MAXOUTFTRS)
	INTEGER*4	PT_PR_FTR(MAXPTS)
	INTEGER*4	FTR_ORIG_PR_FTR(MAXOUTFTRS)
	INTEGER*4	WORKSPACE(12,MAXNODES)
	INTEGER*4	CC(MAXPTS)

	INTEGER*2	FTR_IFC2(MAXOUTFTRS)
	INTEGER*2	FTR_LAYER(MAXOUTFTRS)

	BYTE		IN_FTR_STATUS(MAXINFTRS)

	LOGICAL*1	PDAT(MAXPTS)
	LOGICAL*1	QDAT(MAXPTS)
	LOGICAL*1  	PT_SEEN(MAXPTS)
	LOGICAL*1	PNT_FTR(MAXOUTFTRS)

	REAL*4		PT(2,MAXPTS)
	REAL*4		PT_DST(MAXPTS)

C Externals
	LOGICAL*4	CHKVEX3
	EXTERNAL	CHKVEX3

C Functions
	LOGICAL*4	L2A
	LOGICAL*4	BREAK_FTRS
	LOGICAL*4	QUADSCAN

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Joins feature-ends to nearby features. See LPJSUB for details.
C
C	Note that no end will be joined to any point within EXTOL of
C	the end of any other end-vector. PPJOIN will do this properly.
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C Assume success
	LPJOIN = SS$_NORMAL

C Set up priorities for 3 different classes of candidate line end points

	IF (HAD_VERTEX) THEN
	  VRTX_PRI = TOP
	  PROJ_PRI = MID
	  PERP_PRI = BOT
	ELSE
	  PROJ_PRI = TOP
	  VRTX_PRI = MID
	  PERP_PRI = BOT
	END IF

C Find or create pts at the best position to move every feature end onto

	CALL WRITEF('	Finding new line-end positions')

	IF (HAD_LCP) THEN
	  LPJOIN = QUADSCAN(
     &		CHKVEX3,	! vector-pair processing routine
     &		MAXPTS,		! PT dimension
     &		PT,		! coords of all points in image
     &		N_PTS,		! num of pts in PT
     &		XMIN,XMAX,YMIN,YMAX,! point coord ranges
     &		.FALSE.,	! treat PT as contig array, not lnkd lst
     &		1,		! not using linked-list pointers
     &		NXT,		! linked-list ptrs for PT
     &		JNTOL,		! join tolerance
     &		N_PR_FTRS,	! num of ftrs
     &		FTR_PTS,	! list of ftr start/end PT inds
     &		FTR_LAYER,	! ftr layer LAYER index
     &		.FALSE.,	! treat as lines of vectors, not points
     &		.TRUE.,		! use layer-pair check
     &		FCPAIR,		! which FC pairs to check?
     &		MAXFCS,		! FCPAIR dimension
     &		.TRUE.,		! do check features with themselves
     &		MAXNODES,	! WORKSPACE dimension
     &		WORKSPACE,	! workspace
     &		HAD_MONITOR)	! show running % completion?
	ELSE
	  LPJOIN = QUADSCAN(
     &		CHKVEX3,	! vector-pair processing routine
     &		MAXPTS,		! PT dimension
     &		PT,		! coords of all points in image
     &		N_PTS,		! num of pts in PT
     &		XMIN,XMAX,YMIN,YMAX,! point coord ranges
     &		.FALSE.,	! treat PT as contig array, not lnkd lst
     &		1,		! not using linked-list pointers
     &		NXT,		! linked-list ptrs for PT
     &		JNTOL,		! join tolerance
     &		N_PR_FTRS,	! num of ftrs
     &		FTR_PTS,	! list of ftr start/end PT inds
     &		FTR_IFC2,	! ftr feature code
     &		.FALSE.,	! treat as lines of vectors, not points
     &		HAD_FCP,	! use FC-pair check if had FCPfile only
     &		FCPAIR,		! which FC pairs to check?
     &		MAXFCS,		! FCPAIR dimension
     &		.TRUE.,		! do check features with themselves
     &		MAXNODES,	! WORKSPACE dimension
     &		WORKSPACE,	! workspace
     &		HAD_MONITOR)	! show running % completion?
	END IF
	IF (.NOT.LPJOIN) GOTO 10

C Convert lists for closed-loops into circular lists

	CALL A2L(	PT,NXT,PRV,FTR_PTS,MAXPTS,MAXOUTFTRS)

C Set distance of each point along feature

	CALL SET_PT_DST(PT,NXT,PT_DST,FTR_PTS,MAXPTS,MAXOUTFTRS)

C Undo joins which are within tol of ftr ends, as ftr ends are better
C joined using PPJOIN later

	CALL WRITEF('	Undoing joins too close to feature ends')
	CALL UNDO_END_JOINS(
     &			PT,NEAREST,NXT,PT_PR_FTR,PT_DST,FTR_PTS,PNT_FTR,
     &			MAXPTS,MAXOUTFTRS)

C Undo any loops formed which are too short

	CALL WRITEF('	Checking for negligibly short loops')
	CALL UNDO_SMALL_LOOPS(
     &			NEAREST,PT_PR_FTR,PT_DST,FTR_PTS,PNT_FTR,
     &			MAXPTS,MAXOUTFTRS)

C Remove all inserted-points which are not going to be joined to

	CALL WRITEF('	Removing surplus inserted points')
	CALL DEL1(	NXT,PRV,NEAREST,PT_PR_FTR,PT_SEEN,PDAT,QDAT,
     &			FTR_PTS,PNT_FTR,.FALSE.,.FALSE.,
     &			PT,MAXPTS,MAXOUTFTRS)

C Move line end-points onto lines and mark join pts as nodes

	CALL WRITEF('	Moving ends within join tolerance onto lines')
	CALL MOVE_ENDS_TO_LINES(
     &			PT,NEAREST,NXT,PRV,
     &			FTR_PTS,PNT_FTR,
     &			MAXPTS,MAXOUTFTRS)

C Convert circuler lists for closed-loops into open lists

	LPJOIN = L2A(	PT,CC,NXT,PRV,PT_PR_FTR,PDAT,
     &			FTR_PTS,MAXPTS,MAXOUTFTRS)
	IF (.NOT.LPJOIN) GOTO 10

C If /VERIFY is in effect then there's no need for BREAK_FTRS
C (I'm not sure if this is necessary or not, so don't skip - ACM)
C	IF (HAD_VERIFY) GOTO 10

C Break ftrs into separate ftrs where they cross

	CALL WRITEF('	Breaking features at every node')

	LPJOIN = BREAK_FTRS(PT,CC,NXT,PRV,NEAREST,PT_PR_FTR,PDAT,
     &			FTR_PTS,FTR_START,FTR_INFTR,FTR_IFC2,FTR_LAYER,
     &			FTR_ORIG_PR_FTR,IN_FTR_STATUS,
     &			MAXPTS,MAXINFTRS,MAXOUTFTRS)

10	IF (LPJOIN) LPJOIN = SS$_NORMAL

	RETURN
	END

