C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-12-06 18:12:58.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION GET_LCP()
C 
***	IDENT	06DE93
***	MODULE	GET_LCP
C
C	Copyright : Laser-Scan, Cambridge, England
C
CMOD1319 Allow '!' comment delimiter along LCP line	JB 26-Nov-1993
C
C	Author	  : Andrew Morris			      Mar 1988
C
C	Adapted from GET_FCP.SRC
 
	IMPLICIT	NONE

C Parameters
	INCLUDE		'($SSDEF)'

	INCLUDE		'LSL$CMNILINK:ILINKMSG.PAR'
	INCLUDE		'LSL$CMNLSL:LSLLIBMSG.PAR'

C Commons
	INCLUDE		'LSL$CMNLSL:TXTC.CMN'
	INCLUDE		'LSL$CMNLSL:EXPC.CMN'
	INCLUDE		'LSL$CMNLSL:EXCEPTION.CMN'
	INCLUDE		'LSL$CMNLSL:CLD.CMN'
	INCLUDE		'LSL$CMNILINK:ILINK.CMN'
	INCLUDE		'LSL$CMNILINK:ILINKCHAR.CMN'

C Functions
	LOGICAL*4	INSET
	LOGICAL*4	RDCHS
	LOGICAL*4	RDRANG
	LOGICAL*4	RDLONG
	INTEGER*4	FLROPN,FLRLIN,FLRCLO

C Workspace
	INTEGER*4	IERR			! error return
	INTEGER*4	I,J,I1,I2,L4
	INTEGER*4	L4_FROM,L4_TO
	INTEGER*4	ROW,COL			! 2D array indices
	INTEGER*4	N_LCPRS			! No. of layer pairs
	INTEGER*4	LCPR(2,MAXLAYERPRS)	! layer pairs
	INTEGER*4	IDX(MAXLAYERS)		! layer index array
	INTEGER*4	LMIN,LMAX		! min & max layers
	INTEGER*4	OK			! ret code
	INTEGER*4	LINE_NUM		! LCP-file line No.

	LOGICAL*4	PRO(MAXLAYERS,MAXLAYERS)! process layer-pair?
	LOGICAL*4	ERROR			! error?
	LOGICAL*4	END			! comment encountered?
	BYTE		CH			! a character
 
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Reads layer-pairs from LCPFILE and sets up corresponding logical
C	array for QUADSCAN
C
C	File has free-format as below on every line:
C
C		l1 l2[:l3] <,l4[:l5]>
C
C	This specifies that all features in layer l1 will be pair-wise
C	processed against all features in the list of layers that
C	follows.
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

	GET_LCP = SS$_NORMAL

C Set HAD_LAYERS = .TRUE. as although /LAYER is disallowed with /LCP,
C /LCP implicitly selects just those layers within the LCP file for
C processing 

	HAD_LAYERS = .TRUE.
	END        = .FALSE.

C Open /LCP file 

	OK = FLROPN(1,LCPFILE(:LCP_LEN),IERR)
	IF (.NOT.OK) THEN
	  GET_LCP = ILINK__OPNLCP
	  CALL LSL_PUTMSG(GET_LCP,LCPFILE(:LCP_LEN))
	  CALL LSL_ADDMSG(OK)
	  CALL LSL_ADDMSG(IERR)
	  GOTO 110
	ENDIF

	N_LCPRS = 0
	LINE_NUM = 0

10	OK = FLRLIN(,,,IERR)
	LINE_NUM = LINE_NUM+1
	IF (OK.EQ.LSL__EOF) GOTO 50		! end of file read
	IF (.NOT.OK) THEN
	  GET_LCP = ILINK__BADLCPLIN
	  CALL LSL_PUTMSG(GET_LCP,LINE_NUM,LCPFILE(:LCP_LEN))
	  CALL LSL_ADDMSG(OK)
	  CALL LSL_ADDMSG(IERR)
	  GOTO 110
	ENDIF

	CALL BSLN
	IF (RDCHS(CH)) GOTO 10			! empty line?
	IF (CH.EQ.'!') GOTO 10			! comment

	CALL BSCH				! backspace
	IF (RDLONG(L4_FROM)) THEN
	  GET_LCP = ILINK__BADLCPLIN
	  CALL LSL_PUTMSG(GET_LCP,LINE_NUM,LCPFILE(:LCP_LEN))
	  IF (ERRNUM.NE.LSL__UNEXPEOL) THEN
	    CALL LSL_ADDMSG(ERRNUM)
	    IF (ERRNUM.EQ.LSL__HADEXCP) THEN
	      CALL LSL_ADDMSG(LSL_EXCP)
	    ENDIF
	  ENDIF

	  GOTO 110
	ENDIF

20	IF (RDRANG(I1,I2,END)) THEN
	  DO 30 L4_TO = I1,I2
	    IF (N_LCPRS.GE.MAXLAYERPRS) THEN
	      GET_LCP = ILINK__TOOMNYLAYERPRS
	      CALL LSL_PUTMSG(GET_LCP,MAXLAYERPRS)
	      GOTO 110
	    ENDIF

	    N_LCPRS = N_LCPRS+1
	    LCPR(1,N_LCPRS) = L4_FROM
	    LCPR(2,N_LCPRS) = L4_TO
30	  CONTINUE

	  IF (.NOT.END) GOTO 20
	ENDIF

	GOTO 10					! read next line

50	CALL FLRCLO(1)
 
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C Form array containing one of each layer from layer-pairs given
 
	N_LAYERS = 0
	HAD_LCP = N_LCPRS.GT.0
	IF (.NOT.HAD_LCP) GOTO 110		! return
 
	L4 = LCPR(1,1)
	LAYER(1) = L4
	LMIN = L4
	LMAX = L4
	N_LAYERS = 1
 
	DO 80 I = 1,N_LCPRS			! for each pair do
	  L4 = LCPR(1,I)			! first layer in -pair
	  IF (INSET(LAYER,N_LAYERS,L4,ROW)) GOTO 60
	  N_LAYERS = N_LAYERS+1			! count unmatched layer
	  LMIN = MIN(L4,LMIN)
	  LMAX = MAX(L4,LMAX)
	  LAYER(N_LAYERS) = L4			! add new layer
	  ROW = N_LAYERS

60	  L4 = LCPR(2,I)			! second layer in -pair
	  IF (INSET(LAYER,N_LAYERS,L4,COL)) GOTO 70
	  N_LAYERS = N_LAYERS+1
	  LMIN = MIN(L4,LMIN)
	  LMAX = MAX(L4,LMAX)
	  LAYER(N_LAYERS) = L4
	  COL = N_LAYERS

70	  PRO(ROW,COL) = .TRUE.
80	CONTINUE
 
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

C Sort layers array into increasing order so that binary search can be
C used later for finding layer-index index from layer-index as each
C feature is read in
 
	CALL INT_RIPPLESORT(LAYER,IDX,N_LAYERS,.TRUE.)
 
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

C Set up corresponding LOGICAL   2D arrays for QUADSCAN,
C	 = +1 (TRUE) if pair was entered in this order,
C	 = -1 (TRUE) if pair was specified in reverse order,
C	 =  0 (FALSE) if pair was not specified
C Note that 2D fields not set will have value 0 (FALSE)
 
	DO 100 ROW = 1,N_LAYERS
	  DO 90 COL = 1,N_LAYERS
	    IF (PRO(IDX(ROW),IDX(COL))) THEN
	      FCPAIR(ROW,COL) = 1   ! same array as used for FC-pairs
	      IF (ROW.NE.COL) FCPAIR(COL,ROW) = -1
	    END IF
90	  CONTINUE
100	CONTINUE

110	RETURN
	END

