	LOGICAL*4 FUNCTION TRANSFER_FTR(
     &		IN_FTR,IN_FTR_ADDR,MAXINFTRS)
C
***	MODULE	TRANSFER_FTR
***	IDENT	13OC93
C
C	Copyright : Laser-Scan Ltd., Cambridge, England
C
C	Created   : ACM					       Aug 1986
C
CMOD	Made a function					TJH 29-May-1987
CMOD	Converted to accept CBs instead of STs		ACM 06-Apr-1988
CMOD1304Add KEEP=PARENT					 JB 13-Oct-1993
C
	IMPLICIT NONE

C Parameters
	INCLUDE		'($SSDEF)'

	INCLUDE		'LSL$CMNILINK:ILINKMSG.PAR'

C Commons
	INCLUDE		'LSL$CMNILINK:ILINK.CMN'
	INCLUDE		'LSL$CMNILINK:ILINKCHAR.CMN'

C Data in
	INTEGER*4	IN_FTR			! input ftr index
	INTEGER*4	MAXINFTRS		! max # input ftrs
	INTEGER*4	IN_FTR_ADDR(MAXINFTRS)	! input ftr address

C Workspace
	INTEGER*4	ADDR			! IFF address

	INTEGER*2	FSN,ISN			! for IFFNF
	INTEGER*2	ACTYPE			! AC type
	INTEGER*2	IECODE,IELEN		! for IFFPKE

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Transfers ftr IN_FTR from input to output IFF file
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

	TRANSFER_FTR = SS$_NORMAL	! assume success

C Locate input ftr IN_FTR in IFF input

	ADDR = IN_FTR_ADDR(IN_FTR)
	CALL IFFSEL(INLUN)
	CALL IFFPKE(IECODE,IELEN,ADDR)

	IF (IECODE.NE.'NF') THEN
	  TRANSFER_FTR = ILINK__BADADDR
	  CALL LSL_PUTMSG(TRANSFER_FTR)
	  GOTO 30
	ENDIF

C Get original FSN

	CALL EIHRI(FSN,1,1)

C Write NF entry

	CALL IFFSEL(OUTLUN)
	ISN = 0
	CALL IFFNF(FSN,ISN)

C Write intermediate ftr entries

	CALL IFFSEL(INLUN)
10	CALL IFFNXT(IECODE,IELEN)
	IF (IELEN.EQ.-1) THEN
	  TRANSFER_FTR = ILINK__UNEXPEOF
	  CALL LSL_PUTMSG(TRANSFER_FTR,INFILE(:IN_LEN))
	  GOTO 30
	ENDIF

	IF (IECODE.EQ.'JP') THEN
	   GOTO 10

	ELSEIF (IECODE.EQ.'EF') THEN
	   GOTO 20

C Do not copy over AC type-9 entries

	ELSEIF (IECODE.EQ.'AC') THEN
	  CALL EIHRI(ACTYPE,1,1)
	  IF (ACTYPE.EQ.9) THEN			! ignore AC type 9
	    IF (.NOT.HAD_KEEP_PARENT) GOTO 10	! unless forced to transfer
	  ENDIF

	ELSEIF (IECODE.EQ.'CB') THEN
	  CALL EIHRCB_HEAD(CBH)		! read CB from INFILE
	  CALL EIHRCB_DATA(BIG_CBD)
	  CALL IFFSEL(OUTLUN)
	  CALL PUT_CB()			! write CB to OUTFILE
	  CALL IFFSEL(INLUN)
	  GOTO 10
	ENDIF

	CALL EIHCPY(OUTLUN)
	GOTO 10

C Write EF entry

20	CALL IFFSEL(OUTLUN)
	CALL IFFEF

30	RETURN
	END

