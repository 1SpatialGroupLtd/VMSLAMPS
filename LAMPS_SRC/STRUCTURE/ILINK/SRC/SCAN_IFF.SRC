	LOGICAL*4 FUNCTION SCAN_IFF()

***	MODULE	SCAN_IFF
***	IDENT	04AP89

C	Copyright : Laser-Scan Laboratories Ltd., Cambridge, England

CMOD	Made to count multiple pen-up CBs properly	ACM 04-Apr-1989
CMOD	Made to count features which are going to be
C	rejected, so that GET_DATA doesn't run short	ACM 15-Mar-1989
CMOD	Changed so that MAXPTS counts only pts needed	ACM 07-Apr-1988
CMOD	Converted to accept CB in place of ST entries	ACM 06-Apr-1988
CMOD 2/499 Consider all invisible moves as a new feature
C	when calculating number of features		TJH 20-Jul-1987

C	Created  					TJH 27-May-1987

	IMPLICIT NONE
	
C Parameters
	INCLUDE		'($SSDEF)'

	INCLUDE		'LSL$CMNILINK:ILINKMSG.PAR'

C Commons
	INCLUDE		'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE		'LSL$CMNILINK:ILINK.CMN'
	INCLUDE		'LSL$CMNILINK:ILINKCHAR.CMN'

C Workspace
	INTEGER*2	IECODE,IELEN	! for IFFNXT
	INTEGER*2	WORD		! a word

	INTEGER*4	OSN		! layer number
	INTEGER*4	FC		! *4 feature code
	INTEGER*4	IFC		! FC index in FCS4 array
	INTEGER*4	ILI		! layer index in LAYER array

	LOGICAL*4	TAKE_FTR	! feature to be processed?
	LOGICAL*4	TAKE_LAYER	! ftrs for processing in layer?
	LOGICAL*4	HAD_CB		! had CB entry in feature?

C Functions
	LOGICAL*4	ISEARCH		! binary search

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Function to scan the input IFF file to determine:
C
C 	1) number of features
C 	2) number of points
C
C	These data are returned via ILINK.CMN common block.
C
C	Function returns one of 2 condition codes:
C
C		SS$_NORMAL 		- if all is well
C		ILINK__UNEXPEOF 	- if unexpected end of file
C
C	All error reporting is done within SCAN_IFF
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

	SCAN_IFF = SS$_NORMAL	! assume success

C Initialise counters

	MAXPTS_CMN = 0
	MAXINFTRS_CMN = 0

	TAKE_LAYER = .FALSE.
	TAKE_FTR = .FALSE.
	HAD_CB = .FALSE.

C Select and rewind input IFF file

	CALL IFFSEL(INLUN)
	CALL IFFRWD
10	CALL IFFNXT(IECODE,IELEN)
	IF (IELEN.LT.0) GOTO 60
	IF (IECODE.EQ.'FS') GOTO 12
	IF (IECODE.EQ.'NO') GOTO 14
	IF (IECODE.EQ.'CB') GOTO 30
	IF (IECODE.EQ.'EF') GOTO 40
	IF (IECODE.EQ.'EJ') GOTO 50
	GOTO 10

c FS entry - decide whether feature has been selected for processing

12	FC = 0				! clear longword
	CALL EIHR(WORD,1,1)		! read feature code
	FC = WORD			! convert word to long
	IF (TAKE_LAYER) THEN
	  IF (HAD_FCP) THEN
	    TAKE_FTR = ISEARCH(FCS4,N_FCS,FC,IFC)
	  ELSE
	    TAKE_FTR = .TRUE.
	  END IF
	ELSE
	  TAKE_FTR = .FALSE.
	END IF
	GOTO 10

C NO entry - decide whether layer has been selected for processing

14	OSN = 0				! clear longword
	CALL EIHR(WORD,1,1)		! read layer number
	OSN = WORD			! convert word to long
	IF (PROCESS_ALL_LAYERS) THEN
	  TAKE_LAYER = OSN.GT.0
	ELSE IF (NEED_DATA_PER_FEATURE) THEN
	  TAKE_LAYER = ISEARCH(LAYER,N_LAYERS,OSN,ILI)
	ELSE
	  TAKE_LAYER = .FALSE.
	END IF
	GOTO 10

C CB entry

30	IF (TAKE_FTR) THEN
	  CALL EIHRCB_HEAD(CBH)
	  MAXPTS_CMN = MAXPTS_CMN+CBH.NROW
	END IF
	IF (CBH.FLAGS.EQ.0.OR..NOT.HAD_CB) MAXINFTRS_CMN=MAXINFTRS_CMN+1
	HAD_CB = .TRUE.
	GOTO 10

C End feature

40	IF (.NOT.HAD_CB) MAXINFTRS_CMN = MAXINFTRS_CMN+1
	HAD_CB = .FALSE.
	TAKE_FTR = .FALSE.
	GOTO 10

C End job

50	CALL IFFRWD
	SCAN_IFF = SS$_NORMAL	
	GOTO 70

C Unexpected end of file

60	SCAN_IFF = ILINK__UNEXPEOF
	CALL LSL_PUTMSG(SCAN_IFF,INFILE(:IN_LEN))

70	RETURN
	END
