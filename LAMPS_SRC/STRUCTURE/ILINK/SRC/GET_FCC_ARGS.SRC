C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-12-09 15:56:48.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION GET_FCC_ARGS(LINEID)

***	MODULE	GET_FCC_ARGS
***	IDENT	29MY87
C 
C	Copyright : Laser-Scan Laboratories, Cambridge, England

C	Created						TJH 28-May-1987
 
	IMPLICIT NONE

C Data in
	INTEGER*4	LINEID		! current record number

C Parameters
	INCLUDE		'($SSDEF)'

	INCLUDE		'LSL$CMNILINK:ILINKMSG.PAR' 
	INCLUDE		'LSL$CMNLSL:LSLLIBMSG.PAR' 

C Commons
	INCLUDE		'LSL$CMNILINK:ILINK.CMN' 
	INCLUDE		'LSL$CMNILINK:ILINKCHAR.CMN' 
	INCLUDE		'LSL$CMNLSL:TXTC.CMN' 
	INCLUDE		'LSL$CMNLSL:EXCEPTION.CMN' 

C Workspace
	INTEGER*4	I,J,K
	BYTE		CH		! a character
	INTEGER*4	FIRST, SECOND	! old FC arguments

C Functions
	LOGICAL*4	RDCHS
	LOGICAL*4	RDLONG

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Function decodes FC-combinations from FCCFILE record, passed
C	via /TXTC/TXTBUF.
C
C	Ranges of old FC values may be expressed using the syntax n:m
C	where N is the start of the range and m is the end (inclusive)
C
C	Individual feature codes may be separated by spaces or commas.
C
C	Returns SS$_NORMAL if successful or one of a variety of LSLLIB 
C	or ILINK condition codes if fails.
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

	GET_FCC_ARGS = SS$_NORMAL	! assume the best

C Remove any commas

	DO 10 I = DCPTR,TXTPTR
	  IF (TXTBUF(I).EQ.',') TXTBUF(I) = ' '
10	CONTINUE

C End of line?

20	IF (RDCHS(CH)) GOTO 60
	IF (CH.EQ.'!') GOTO 60		! comment
	CALL BSCH

C Get first integer

	IF (RDLONG(FIRST)) GOTO 50
	SECOND = FIRST			! treat single integer as range

C Check for ':'

	IF (.NOT.RDCHS(CH)) THEN	! FIRST is not last integer
C					! on line
	  IF (CH.EQ.':') THEN		! we have range
	    IF (RDLONG(SECOND)) GOTO 50 ! so read second integer
	  ELSE	
	    CALL BSCH			! put char back in buffer, and
C					! sort it out next time around
	  END IF
	END IF

C Test for valid range

	IF (FIRST.GT.SECOND) THEN
	  GET_FCC_ARGS = ILINK__FCCRANGE
	  CALL LSL_PUTMSG(GET_FCC_ARGS,FIRST,SECOND,LINEID)
	ELSEIF (FIRST.LT.0.OR.FIRST.GT.32767) THEN
	  GET_FCC_ARGS = ILINK__INVFCCARG
	  CALL LSL_PUTMSG(GET_FCC_ARGS,FIRST,LINEID)
	ELSEIF (SECOND.LT.0.OR.SECOND.GT.32767.AND.FIRST.NE.SECOND) THEN
	  GET_FCC_ARGS = ILINK__INVFCCARG
	  CALL LSL_PUTMSG(GET_FCC_ARGS,SECOND,LINEID)
	END IF

	IF (.NOT.GET_FCC_ARGS) GOTO 60

C Now expand the FC 'range' into FCC4

	DO 30 I = FIRST,SECOND
	  IF (N_FCPFCC(N_FCCS)+1.GT.MAXFCPFCC) GOTO 40
	  N_FCPFCC(N_FCCS) = N_FCPFCC(N_FCCS)+1
	  FCC4(N_FCPFCC(N_FCCS),N_FCCS) = I
30	CONTINUE
	GOTO 20

C Too many FCC argunments specified - probably within an n:m range
C specification!

40	GET_FCC_ARGS = ILINK__TOOMNYFCARG
	CALL LSL_PUTMSG(GET_FCC_ARGS,LINEID,MAXFCPFCC)
	GOTO 60

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

50	GET_FCC_ARGS = ILINK__MISSFC
	CALL LSL_PUTMSG(GET_FCC_ARGS,LINEID) ! no integer!
	CALL LSL_ADDMSG(ERRNUM)

	IF (ERRNUM.EQ.LSL__HADEXCP) THEN
	  CALL LSL_ADDMSG(LSL_EXCP)
	END IF

60	RETURN
	END
