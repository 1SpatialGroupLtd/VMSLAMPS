C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-06-07 19:27:18.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION LININT(	P1X,P1Y,P2X,P2Y,
     &					Q1X,Q1Y,Q2X,Q2Y,
     &					PF,QF,X,Y,
     &					PARALLEL,
     &					INT_ON_PVEC,INT_ON_QVEC,
     &					IEND1,IEND2,
     &					E1X,E1Y,E2X,E2Y)
 
***	IDENT	26SE86
***	MODULE	LININT
 
C	Copyright : Laser-Scan Laboratories Ltd., Cambridge, England
C	Created   : ACM					Sep 1986
 
	IMPLICIT NONE
 
C Parameters
	REAL*4		ZEROPLUS		! smallest safe real*4
	REAL*4		ZEROMINUS
	REAL*4		ONEPLUS
	PARAMETER(	ZEROPLUS	= 1E-4)
	PARAMETER(	ZEROMINUS	= -ZEROPLUS)
	PARAMETER(	ONEPLUS		= 1+ZEROPLUS)
 
C Data in
	REAL*4		P1X,P1Y,P2X,P2Y		! 2 pts on line P
	REAL*4		Q1X,Q1Y,Q2X,Q2Y		! 2 pts on line Q
 
C Data out
	REAL*4		X,Y			! intersection point
	REAL*4		PF			! (X,Y) = P+PF*P1P2
	REAL*4		QF			! (X,Y) = Q+QF*Q1Q2
	REAL*4		E1X,E1Y,E2X,E2Y		! ends of int-interval
	LOGICAL*1	PARALLEL		! parallel intersection?
	LOGICAL*1	INT_ON_PVEC,INT_ON_QVEC	! int pt on vecs?
	INTEGER*4	IEND1,IEND2		! for each of E1 & E2,
C						  = -1 if is P-end
C						  =  0 if P-end & Q-end
C						  =  1 if is Q-end
 
C Workspace
	REAL*4		P1P2X,P1P2Y		! vector P2-P1
	REAL*4		Q1Q2X,Q1Q2Y		! vector Q2-Q1
	REAL*4		P1Q1X,P1Q1Y		! vector Q1-P1
	REAL*4		P2Q2X,P2Q2Y		! vector Q2-P2
	REAL*4		D1P,D2P		! dists of P1 and P2 from Q12
	REAL*4		D1Q,D2Q		! dists of Q1 and Q2 from P12
	REAL*4		DET			! a determinant
	REAL*4		DTOL			! dist tolerance
	REAL*4		P(2,4)			! end pt array
	REAL*4		D(4)			! dists along line
	REAL*4		E0X,E0Y,E3X,E3Y		! ...
	REAL*4		T			! temp real value
	INTEGER*4	L(4)			! end pt indices
	INTEGER*4	I,J,K
	LOGICAL*1	COLINEAR		! vectors colinear?
	LOGICAL*1	OVERLAP			! vectors overlap?
 
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Function returns true if the lines P12 and Q12 intersect
C	at a point or if the lines are identical.
C
C	If the lines intersect at a single point then intersection
C	point coords are returned in (X,Y).
C
C	If lines intersect but are parallel then if the vectors P12
C	and Q12 overlap, the intersection pt returned is the midpoint
C	of the overlapping section, and the ends of the intersecting
C	section are returned in E1 and E2, while IEND1 and IEND2 tell
C	whether each of E1 and E2 is a P-end, a Q-end, or both.
C
C	Note that the bulk of the code that follows is only used
C	when vectors are both parallel and colinear, which is very
C	rare on average. The routine is in fact designed for optimal
C	speed overall.
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
 
	LININT = .FALSE.			! assume no intersection
	INT_ON_PVEC = .FALSE.
	INT_ON_QVEC = .FALSE.
 
	P1P2X = P2X-P1X				! vector P1P2
	P1P2Y = P2Y-P1Y
 
	Q1Q2X = Q2X-Q1X				! vector Q1Q2
	Q1Q2Y = Q2Y-Q1Y
 
	DET = Q1Q2X*P1P2Y-Q1Q2Y*P1P2X
	DTOL = ABS(DET)*ZEROPLUS		! dist tolerance
 
C If parallel then check for colinearity
 
	PARALLEL = ABS(DET).LT.ZEROPLUS
	IF (PARALLEL) THEN
	  P1Q1X = Q1X-P1X			! vector P1Q1
	  P1Q1Y = Q1Y-P1Y
	  D1P = P1Q1Y*Q1Q2X - P1Q1X*Q1Q2Y 	! P1Q1.NQ

	  COLINEAR = ABS(D1P).LE.DTOL
	  IF (.NOT.COLINEAR) GOTO 50		! return
 
C Vecs are parallel and colinear, so they may overlap

C Find end-points of possible overlapping section by finding relative
C position of all 4 end pts along shared line and taking the 2 in the
C centre
 
	  P(1,1) = P1X				! put end pts into array
	  P(2,1) = P1Y
	  P(1,2) = P2X
	  P(2,2) = P2Y
	  P(1,3) = Q1X
	  P(2,3) = Q1Y
	  P(1,4) = Q2X
	  P(2,4) = Q2Y
 
C D(1..4) are dists of P1, P2, Q1, Q2 from P1 in direction P1P2
 
	  DO 10 I = 1,4				! end pt inds into array
	    L(I) = I				! & put dists into array
	    D(I) = P1P2X*(P(1,I)-P(1,1)) + P1P2Y*(P(2,I)-P(2,1))
10	  CONTINUE
 
C Sort D and L together by increasing D
 
	  DO 30 I = 2,4
	    DO 20 J = I,2,-1
	      IF (D(J).GE.D(J-1)) GOTO 30
	      T = D(J)				! swap distance
	      D(J) = D(J-1)
	      D(J-1) = T
	      K = L(J)				! swap index
	      L(J) = L(J-1)
	      L(J-1) = K
20	    CONTINUE
30	  CONTINUE
 
C Set E1, E2, IEND1 and IEND2 as defined above

	  E0X = P(1,L(1))
	  E0Y = P(2,L(1))

	  E1X = P(1,L(2))
	  E1Y = P(2,L(2))

	  E2X = P(1,L(3))
	  E2Y = P(2,L(3))

	  E3X = P(1,L(4))
	  E3Y = P(2,L(4))

C See if vectors overlap

	  OVERLAP = L(1).LE.2.NEQV.L(2).LE.2
	  OVERLAP = OVERLAP.OR.
     &	          (.NOT.OVERLAP.AND.ABS(E1X-E2X).LT.ZEROPLUS
     &	                       .AND.ABS(E1Y-E2Y).LT.ZEROPLUS)

	  IF (OVERLAP) THEN
	    INT_ON_PVEC = .TRUE.
	    INT_ON_QVEC = .TRUE.

	    IF (E0X.EQ.E1X.AND.E0Y.EQ.E1Y) THEN
	      IEND1 = 0
	    ELSE IF (L(2).LE.2) THEN
	      IEND1 = -1
	    ELSE
	      IEND1 = 1
	    END IF

	    IF (E2X.EQ.E3X.AND.E2Y.EQ.E3Y) THEN
	      IEND2 = 0
	    ELSE IF (L(3).LE.2) THEN
	      IEND2 = -1
	    ELSE
	      IEND2 = 1
	    END IF

C Set (X,Y) = mid-point of intersecting segment

	    X = (E1X+E2X)/2
	    Y = (E1Y+E2Y)/2
 
C Find corresponding values for PF and QF
 
	    IF (ABS(P1P2X).GT.ZEROPLUS) THEN
	      PF = (X-P1X)/P1P2X
	    ELSE IF (ABS(P1P2Y).GT.ZEROPLUS) THEN
	      PF = (Y-P1Y)/P1P2Y
	    ELSE
	      PF = 0
	    END IF
 
	    IF (ABS(Q1Q2X).GT.ZEROPLUS) THEN
	      QF = (X-Q1X)/Q1Q2X
	    ELSE IF (ABS(Q1Q2Y).GT.ZEROPLUS) THEN
	      QF = (Y-Q1Y)/Q1Q2Y
	    ELSE
	      QF = 0
	    END IF
	  END IF
 
	  GOTO 40				! return
	END IF
 
C Lines intersect, so find intersection point
 
	P1Q1X = Q1X-P1X				! vector P1Q1
	P1Q1Y = Q1Y-P1Y

	P2Q2X = Q2X-P2X				! vector P2Q2
	P2Q2Y = Q2Y-P2Y
 
	D1P = P1Q1Y*Q1Q2X - P1Q1X*Q1Q2Y 	! P1Q1.NQ
	D1Q = P1Q1Y*P1P2X - P1Q1X*P1P2Y		! P1Q1.NP

	PF = D1P/DET
	QF = D1Q/DET

	X = P1X+PF*P1P2X
	Y = P1Y+PF*P1P2Y
 
	INT_ON_PVEC = PF.GE.ZEROMINUS.AND.PF.LE.ONEPLUS
	INT_ON_QVEC = QF.GE.ZEROMINUS.AND.QF.LE.ONEPLUS

40	LININT = .TRUE.
50	END
