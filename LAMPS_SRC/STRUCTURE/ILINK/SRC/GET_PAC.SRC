	LOGICAL*4 FUNCTION GET_PAC()
 
***	IDENT	28MY93
***	MODULE	GET_PAC
 
C	Copyright : Laser-Scan, Cambridge, England
C	Author	  : Andrew Morris			    30-Nov-1988
CMOD	Reset NEWPAC(0), PACODE(0) to MIN_PAC-1 	WJJ  2-Feb-1990
 
	IMPLICIT	NONE

C Parameters
	INCLUDE		'($SSDEF)'
	INCLUDE		'LSL$CMNLSL:READSTR.PAR'
	INCLUDE		'LSL$CMNILINK:ILINKMSG.PAR'
	INCLUDE		'LSL$CMNLSL:LSLLIBMSG.PAR'

C Commons
	INCLUDE		'LSL$CMNFRT:FRTACD.CMN'
	INCLUDE		'LSL$CMNLSL:EXPC.CMN'
	INCLUDE		'LSL$CMNLSL:EXCEPTION.CMN'
	INCLUDE		'LSL$CMNILINK:ILINK.CMN'
	INCLUDE		'LSL$CMNILINK:ILINKCHAR.CMN'

C Workspace
	INTEGER*4	IERR			! error return
	INTEGER*4	I
	INTEGER*4	OK			! ret code
	INTEGER*4	LINE_NUM		! PAC-file line No.
	INTEGER*4	OLD_PAC,NEW_PAC		! old & new PAC codes
	BYTE		CH			! a character
 
C Functions
	LOGICAL*4	ACDFND_NAME
	LOGICAL*4	RDCHS
	LOGICAL*4	RDLONG,RDREAL
	INTEGER*4	FLROPN,FLRLIN,FLRCLO
	INTEGER*4	READSTR

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Reads new Point Attribute Codes from PACFILE corresponding to
C	each original PAC.
C
C	Text from '!' to end of line is ignored.
C
C	First non comment line holds the attribute name which is to be
C	used for point capture method, as follows:
C
C	  capture-method-attribute-name
C	    up to 20 characters
C
C	All other non comment lines have free-format as follows:
C
C	  oldcapture-method-code  new-capture-method-code
C	  integer                 integer
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

	GET_PAC = SS$_NORMAL

C Open /PAC file 

	OK = FLROPN(1,PACFILE(:PAC_LEN),IERR)
	IF (.NOT.OK) THEN
	  GET_PAC = ILINK__OPNPAC
	  CALL LSL_PUTMSG(GET_PAC,PACFILE(:PAC_LEN))
	  CALL LSL_ADDMSG(OK)
	  CALL LSL_ADDMSG(IERR)
	  GOTO 999
	END IF

	N_PACS = 0
	LINE_NUM = 0

C Get attribute name

10	OK = FLRLIN(,,,IERR)
	LINE_NUM = LINE_NUM+1
	IF (OK.EQ.LSL__EOF) THEN	! end of file read
	  GET_PAC = ILINK__NOATTNAM
	  CALL LSL_PUTMSG(GET_PAC,PACFILE(:PAC_LEN))
	  GOTO 30
	END IF
	IF (.NOT.OK) THEN
	  GET_PAC = ILINK__BADPACLIN
	  CALL LSL_PUTMSG(GET_PAC,LINE_NUM,PACFILE(:PAC_LEN))
	  CALL LSL_ADDMSG(OK)
	  CALL LSL_ADDMSG(IERR)
	  GOTO 30
	END IF

	CALL BSLN
	IF (RDCHS(CH)) GOTO 10		! enpty line?
	IF (CH.EQ.'!') GOTO 10		! comment
	CALL BSCH			! backspace

	CAP_LEN = READSTR(CAP_NAM,,ON_SPACE,,IERR)
	IF (.NOT.IERR) THEN
	  GET_PAC = ILINK__BADPACLIN
	  CALL LSL_PUTMSG(GET_PAC,LINE_NUM)
	  CALL LSL_ADDMSG(IERR)	
	  GOTO 30
	END IF

	CALL STR$UPCASE(CAP_NAM(:CAP_LEN),CAP_NAM(:CAP_LEN))

C Look up corresponding attribute code in the FRT file (FRTINI has
C already been called by GET_FRT)

	OK = .NOT.ACDFND_NAME(CAP_NAM(:CAP_LEN))
	IF (.NOT.OK) THEN
	  GET_PAC = ILINK__NOATTCOD
	  CALL LSL_PUTMSG(GET_PAC,CAP_NAM(:CAP_LEN))
	  GOTO 30
	END IF

	CAP_CODE = ACD_CODE
	MIN_PAC = ACD_MIN_MAX_I(1)
	MAX_PAC = ACD_MIN_MAX_I(2)
C
C Reset default/missing code values
	PACODE(0) = MIN_PAC-1	! I don't think this is used - WJJ
	NEWPAC(0) = MIN_PAC-1

	IF (MAX_PAC-MIN_PAC+1.GT.PAC_RANGE) THEN
	  GET_PAC = ILINK__BADPACRANGE
	  CALL LSL_PUTMSG(GET_PAC,PAC_RANGE)
	  GOTO 30
	END IF

C New capture-method codes

20	OK = FLRLIN(,,,IERR)
	LINE_NUM = LINE_NUM+1
	IF (OK.EQ.LSL__EOF) GOTO 30	! end of file read
	IF (.NOT.OK) THEN
	  GET_PAC = ILINK__BADPACLIN
	  CALL LSL_PUTMSG(GET_PAC,LINE_NUM,PACFILE(:PAC_LEN))
	  CALL LSL_ADDMSG(OK)
	  CALL LSL_ADDMSG(IERR)
	  GOTO 30
	END IF

	CALL BSLN
	IF (RDCHS(CH)) GOTO 20		! enpty line?
	IF (CH.EQ.'!') GOTO 20		! comment
	CALL BSCH			! backspace

	IF (RDLONG(OLD_PAC)) THEN	! read old PAC code
	  GET_PAC = ILINK__BADPACLIN
	  CALL LSL_PUTMSG(GET_PAC,LINE_NUM,PACFILE(:PAC_LEN))
	  IF (ERRNUM.NE.LSL__UNEXPEOL) THEN
	    CALL LSL_ADDMSG(ERRNUM)
	    IF (ERRNUM.EQ.LSL__HADEXCP) CALL LSL_ADDMSG(LSL_EXCP)
	  END IF
	  GOTO 30
	END IF
	IF (OLD_PAC.LT.MIN_PAC.OR.OLD_PAC.GT.MAX_PAC) THEN
	  GET_PAC = ILINK__BADPAC
	  CALL LSL_PUTMSG(GET_PAC,LINE_NUM,MIN_PAC,MAX_PAC)
	  GOTO 30
	END IF

	IF (RDLONG(NEW_PAC)) THEN	! read new PAC code
	  IF (ERRNUM.EQ.LSL__UNEXPEOL) THEN
	    NEW_PAC = OLD_PAC		! default is old PAC code
	  ELSE
	    GET_PAC = ILINK__BADPACLIN
	    CALL LSL_PUTMSG(GET_PAC,LINE_NUM,PACFILE(:PAC_LEN))
	    IF (ERRNUM.NE.LSL__UNEXPEOL) THEN
	      CALL LSL_ADDMSG(ERRNUM)
	      IF (ERRNUM.EQ.LSL__HADEXCP) CALL LSL_ADDMSG(LSL_EXCP)
	    END IF
	    GOTO 30
	  END IF
	END IF
	IF (NEW_PAC.LT.MIN_PAC.OR.NEW_PAC.GT.MAX_PAC) THEN
	  GET_PAC = ILINK__BADPAC
	  CALL LSL_PUTMSG(GET_PAC,LINE_NUM,MIN_PAC,MAX_PAC)
	  GOTO 30
	END IF

	IF (N_PACS.EQ.MAXPACS) THEN
	  CALL LSL_PUTMSG(ILINK__TOOMNYPACS,MAXPACS)
	  GET_PAC = ILINK__TOOMNYPACS
	  GOTO 30
	END IF
	N_PACS = N_PACS+1
	PACODE(N_PACS) = OLD_PAC
	NEWPAC(N_PACS) = NEW_PAC
	PAC_LIN(OLD_PAC-MIN_PAC+1) = N_PACS

	GOTO 20				! read next line from PAC file
30	CALL FLRCLO(1)

999	RETURN
	END
