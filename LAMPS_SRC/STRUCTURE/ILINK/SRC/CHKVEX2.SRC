	LOGICAL*4 FUNCTION CHKVEX2(PFTR,QFTR,IP,IQ)

***	MODULE	CHKVEX2
***	IDENT	26AP93

C	Copyright : Laser-Scan Ltd., Cambridge, England

CMOD1218 Do not use BETWEEN in INSERT_PT if intersection
C	 known to be a proper cut (no_between_check)	 JB 26-APR-1992

CMOD	Changed tolerance from 1E-4 to COORD_TOL based on
C	max coordinate magnitude.			ACM 15-Sep-1988
CMOD	Changed to be a function			ACM 10-Sep-1987

C	Created   : ACM					       Dec 1986

	IMPLICIT NONE

C Parameters
	INCLUDE		'($SSDEF)'

	INCLUDE		'LSL$CMNILINK:ILINKMSG.PAR'

C Commons
	INCLUDE		'LSL$CMNLSL:STATUS.CMN'	! for temp. frig
	INCLUDE		'LSL$CMNILINK:ILINK.CMN'

C Data in
	INTEGER*4	PFTR,QFTR	! line indices
	INTEGER*4	IP		! pt at start of P vector
	INTEGER*4	IQ		! pt at start of Q vector

C Workspace
	REAL*4		P1X,P1Y,P2X,P2Y	! vector P end pts
	REAL*4		Q1X,Q1Y,Q2X,Q2Y	! vector Q end pts
	REAL*4		X,Y		! intersection pt
	REAL*4		E1X,E1Y,E2X,E2Y	! for VECINT

	REAL*8		PF,QF		! scale factors

	INTEGER*4	IEND1,IEND2	! for VECINT
	INTEGER*4	IPT		! for INSERT_PT

	LOGICAL*1	PARALLEL	! vecs parallel?
	LOGICAL*1	PROPER_CUT	! vecs realy cross over?

	LOGICAL*4	P_IS_POINT,Q_IS_POINT	! is vec single pt?
	LOGICAL*4	VECTORS_INTERSECT
	LOGICAL*4	MARK		! mark inserted pt as node?

C Functions
	LOGICAL*4	VECINT		! do vecs intersect?
	LOGICAL*4	INSERT_PT
C Data
	DATA		MARK/.TRUE./	! do mark inserted pts as nodes

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	If vectors intersect then both have a point inserted at this
C	intersection point. 
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

	CHKVEX2 = SS$_NORMAL	! assume success

C Don't intersect neighbours in same ftr

	IF (PFTR.EQ.QFTR) THEN
	  IF (ABS(IP-IQ).EQ.1) GOTO 60	! return
	ENDIF

C Check for vector boxes within tolerance

C	p1x = pt(1,ip)
C	p2x = pt(1,ip+1)
	CALL ASSIGN_VAL(%VAL(PT_START+8*(IP-1)),P1X,4)
	CALL ASSIGN_VAL(%VAL(PT_START+8*(IP)),P2X,4)

C	q1x = pt(1,iq)
C	q2x = pt(1,iq+1)
	CALL ASSIGN_VAL(%VAL(PT_START+8*(IQ-1)),Q1X,4)
	CALL ASSIGN_VAL(%VAL(PT_START+8*(IQ)),Q2X,4)

	IF (MAX(P1X,P2X).LT.MIN(Q1X,Q2X)-COORD_TOL) GOTO 60	! return
	IF (MIN(P1X,P2X).GT.MAX(Q1X,Q2X)+COORD_TOL) GOTO 60	! return

C	p1y = pt(2,ip)
C	p2y = pt(2,ip+1)
	CALL ASSIGN_VAL(%VAL(PT_START+8*(IP-1)+4),P1Y,4)
	CALL ASSIGN_VAL(%VAL(PT_START+8*(IP)+4),P2Y,4)

C	q1y = pt(2,iq)
C	q2y = pt(2,iq+1)
	CALL ASSIGN_VAL(%VAL(PT_START+8*(IQ-1)+4),Q1Y,4)
	CALL ASSIGN_VAL(%VAL(PT_START+8*(IQ)+4),Q2Y,4)

	IF (MAX(P1Y,P2Y).LT.MIN(Q1Y,Q2Y)-COORD_TOL) GOTO 60	! return
	IF (MIN(P1Y,P2Y).GT.MAX(Q1Y,Q2Y)+COORD_TOL) GOTO 60	! return

C Boxes are within tolerance

C See if vectors intersect, using COORD_TOL tolerance

	VECTORS_INTERSECT = VECINT(	P1X,P1Y,P2X,P2Y,
     &					Q1X,Q1Y,Q2X,Q2Y,
     &					PF,QF,X,Y,
     &	           			PROPER_CUT,PARALLEL,IEND1,IEND2,
     &					E1X,E1Y,E2X,E2Y,COORD_TOL)

	IF (VECTORS_INTERSECT) THEN
	  IF (PARALLEL) THEN

C Check whether either vec is a single point

C	    p_is_point = pnt_ftr(pftr)
C	    q_is_point = pnt_ftr(qftr)
	    CALL ASSIGN_VAL(%VAL(PNT_FTR_START+(PFTR-1)),P_IS_POINT,1)
	    CALL ASSIGN_VAL(%VAL(PNT_FTR_START+(QFTR-1)),Q_IS_POINT,1)

	    IF (IEND1) 10,30,20

C E1 is an end pt of P-vec and not of Q-vec, so insert E1 into Q-vec

10	    IF (.NOT.Q_IS_POINT) THEN
	      CHKVEX2 = INSERT_PT(E1X,E1Y,QFTR,IQ,IPT,MARK)
	      IF (.NOT.CHKVEX2) GOTO 60
	    END IF
	    GOTO 30

C E1 is an end pt of Q-vec and not of P-vec, so insert E1 into P-vec

20	    IF (.NOT.P_IS_POINT) THEN
	      CHKVEX2 = INSERT_PT(E1X,E1Y,PFTR,IP,IPT,MARK)
	      IF (.NOT.CHKVEX2) GOTO 60
	    END IF

30	    IF (IEND2) 40,60,50

C E2 is an end pt of P-vec and not of Q-vec, so insert E2 into Q-vec

40	    IF (.NOT.Q_IS_POINT) THEN
	      CHKVEX2 = INSERT_PT(E2X,E2Y,QFTR,IQ,IPT,MARK)
	      IF (.NOT.CHKVEX2) GOTO 60
	    END IF
	    GOTO 60

C E2 is an end pt of Q-vec and not of P-vec, so insert E2 into P-vec

50	    IF (.NOT.P_IS_POINT) THEN
	      CHKVEX2 = INSERT_PT(E2X,E2Y,PFTR,IP,IPT,MARK)
	      IF (.NOT.CHKVEX2) GOTO 60
	    END IF

	  ELSE
	    IF (PROPER_CUT) NO_BETWEEN_CHECK = .TRUE.
	    CHKVEX2 = INSERT_PT(X,Y,PFTR,IP,IPT,MARK)
	    IF (.NOT.CHKVEX2) GOTO 60

	    IF (PROPER_CUT) NO_BETWEEN_CHECK = .TRUE.
	    CHKVEX2 = INSERT_PT(X,Y,QFTR,IQ,IPT,MARK)
	    IF (.NOT.CHKVEX2) GOTO 60
	  END IF
	END IF

60	IF (CHKVEX2) CHKVEX2 = SS$_NORMAL
	RETURN
	END

