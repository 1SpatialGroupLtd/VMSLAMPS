	LOGICAL*4 FUNCTION APPEND_FTR(
     &		ORIG_PR_FTR,PT,NEAREST,NXT,PRV,FTR_PTS,FTR_START,
     &		BASE_PR_FTR,MAXPTS,MAXOUTFTRS)

***	MODULE	APPEND_FTR
***	IDENT	08JL88

C	Copyright : Laser-Scan Laboratories Ltd., Cambridge, England

CMOD	Corrected so that sense of ftr traversal is correct
C	when more than two ftrs are merged into one	ACM 19-May-1988
CMOD	Converted to accept CB in place of ST entries	ACM 07-Apr-1988
CMOD	Added arg to INTRNLERR message			ACM 14-Aug-1987
CMOD	Now gives internal error message if BASE_PR_FTR=0
C							TJH 07-Jul-1987
CMOD	Made a function					TJH 27-May-1987
C	Created   : ACM					       Nov 1985

	IMPLICIT NONE

C Parameters
	INCLUDE		'($SSDEF)'
	INCLUDE		'LSL$CMNILINK:ILINKMSG.PAR'

C Commons
	INCLUDE		'LSL$CMNILINK:ILINK.CMN'

C Arguments
	INTEGER*4	ORIG_PR_FTR
C	index of processed-feature to be appended

	INTEGER*4	MAXPTS,MAXOUTFTRS
	INTEGER*4	NEAREST(MAXPTS)
	INTEGER*4	NXT(MAXPTS),PRV(MAXPTS)
	INTEGER*4	FTR_PTS(2,MAXOUTFTRS)
	INTEGER*4	FTR_START(MAXOUTFTRS)
	INTEGER*4	BASE_PR_FTR	! base-ftr index

	REAL*4		PT(2,MAXPTS)

C Workspace
	INTEGER*4	BASE_IPTSTA,BASE_IPTFIN	! base ftr end pts
	INTEGER*4	BASEPT		! base PT index
	INTEGER*4	ORIGPT		! original PT index
	INTEGER*4	NCOLS,I		! num of cols in CB

	LOGICAL*4	DELETED		! pt deleted?
	LOGICAL*4	FORWARDS	! is ftr to be taken "forwards"?
	LOGICAL*4	IS_BASE_PR_FTR	! is ftr a "base feature"?
	LOGICAL*4	SECOND_TRY	! special treatment required?

	REAL*4		DX,DY		! pt separation vector

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Appends base- and corresponding original- PT indices for
C	PRocessed-feature ORIG_PR_FTR to (BASE_IPT/ORIG_IPT/N_OUT_PTS)
C	which can be used later to set up (using SET_CB) and output
C	(using PUT_CB) a CB entry.
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

C Assume success

	APPEND_FTR = SS$_NORMAL	

C Find base-ftr index

	BASE_PR_FTR = ORIG_PR_FTR
	FORWARDS = .TRUE.

10	IS_BASE_PR_FTR = (FTR_PTS(1,ABS(BASE_PR_FTR)).NE.NIL)
	IF (.NOT.IS_BASE_PR_FTR) THEN
C Note sense of original feature traversal with respect to its base ftr
	  BASE_PR_FTR = FTR_PTS(2,ABS(BASE_PR_FTR))
	  IF (BASE_PR_FTR.LT.0) FORWARDS = .NOT.FORWARDS
	  IF (BASE_PR_FTR.EQ.NIL) THEN
	    APPEND_FTR = ILINK__INTRNLERR
	    CALL LSL_PUTMSG(APPEND_FTR,1,'APPEND_FTR')
	    GOTO 999
	  END IF
	  GOTO 10
	END IF

	BASE_PR_FTR = ABS(BASE_PR_FTR)

	IF (FORWARDS) THEN
	  BASE_IPTSTA = FTR_PTS(1,BASE_PR_FTR)
	  BASE_IPTFIN = FTR_PTS(2,BASE_PR_FTR)
	ELSE
	  BASE_IPTSTA = FTR_PTS(2,BASE_PR_FTR)
	  BASE_IPTFIN = FTR_PTS(1,BASE_PR_FTR)
	END IF

C Do not append 1-pt continuation ftrs

	IF (BASE_IPTSTA.EQ.BASE_IPTFIN.AND.N_OUT_PTS.GT.0) GOTO 999

C Find original PT which is mapped onto BASE_IPTSTA

	IF (BASE_PR_FTR.EQ.ORIG_PR_FTR) THEN
	  ORIGPT = BASE_IPTSTA
	ELSE
	  SECOND_TRY = .FALSE.			! first try
15	  ORIGPT = FTR_START(ORIG_PR_FTR)

20	  DELETED = PRV(ORIGPT).EQ.-1
	  IF (DELETED) GOTO 30
	  IF (SECOND_TRY) GOTO 40
	  IF (ORIGPT.EQ.BASE_IPTSTA) GOTO 40
	  IF (NEAREST(ORIGPT).EQ.BASE_IPTSTA) GOTO 40
	  DX = PT(1,ORIGPT)-PT(1,BASE_IPTSTA)
	  DY = PT(2,ORIGPT)-PT(2,BASE_IPTSTA)
	  IF (ABS(DX).LT.ZEROPLUS.AND.ABS(DY).LT.ZEROPLUS) GOTO 40
30	  IF (NXT(ORIGPT).NE.NIL) THEN
	    ORIGPT = NXT(ORIGPT)
	    GOTO 20
	  END IF

	  IF (SECOND_TRY) THEN
	    APPEND_FTR = ILINK__INTRNLERR	! bug if gets here
	    CALL LSL_PUTMSG(APPEND_FTR,2,'APPEND_FTR')
	    GOTO 999				! return
	  ENDIF

	  SECOND_TRY = .TRUE.			! use 1st non deleted pt
	  GOTO 15

	ENDIF
40	CONTINUE

C Include all link ends

	IF (N_OUT_PTS.EQ.0) N_OUT_PTS = 1	! overwrite first point
	BASE_IPT(N_OUT_PTS) = BASE_IPTSTA	! base_pt index, for X,Y
	ORIG_IPT(N_OUT_PTS) = ORIGPT		! orig PT index,  "other

C If pt ftr then thats it

	IF (BASE_IPTSTA.EQ.BASE_IPTFIN) GOTO 999! return

C Take in intermediate pts

	BASEPT = BASE_IPTSTA

50	IF (FORWARDS) THEN			! get next base pt
	  BASEPT = NXT(BASEPT)
	ELSE
	  BASEPT = PRV(BASEPT)
	END IF

60	DELETED = PRV(ORIGPT).EQ.-1		! get next orig pt
	IF (DELETED) GOTO 70
	IF (ORIGPT.EQ.BASEPT) GOTO 80
	IF (NEAREST(ORIGPT).EQ.BASEPT) GOTO 80
	DX = PT(1,ORIGPT)-PT(1,BASEPT)
	DY = PT(2,ORIGPT)-PT(2,BASEPT)
	IF (ABS(DX).LT.ZEROPLUS.AND.ABS(DY).LT.ZEROPLUS) GOTO 80
70	IF (NXT(ORIGPT).NE.NIL) THEN
	  ORIGPT = NXT(ORIGPT)
	  GOTO 60
	END IF

80	IF (N_OUT_PTS.GE.ILINK_MAXCBROW) THEN
	  APPEND_FTR = ILINK__TOOMNYPPF
	  CALL LSL_PUTMSG(APPEND_FTR,ILINK_MAXCBROW)
	  GOTO 999			! return
	END IF

	N_OUT_PTS = N_OUT_PTS+1
	BASE_IPT(N_OUT_PTS) = BASEPT	! base_pt index (for X,Y)
	ORIG_IPT(N_OUT_PTS) = ORIGPT	! orig PT index (for other)

	IF (BASEPT.NE.BASE_IPTFIN) GOTO 50

999	RETURN
	END

