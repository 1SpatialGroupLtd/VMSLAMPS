C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-08-08 12:31:06.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION SORT_ARMS(FILENAME,MONITOR)

***	MODULE	SORT_ARMS
***	IDENT	08AU88

C	Copyright : Laser-Scan Laboratories Ltd., Cambridge, England

CMOD	Made a function					TJH 28-May-1987
C	Created   : ACM					       Jul 1986
C 
	IMPLICIT NONE

C Parameters
	INCLUDE		'($SSDEF)'

	INCLUDE		'LSL$CMNILINK:ILINKMSG.PAR'

C Commons
	INCLUDE		'LSL$CMNLSL:STATUS.CMN'
	INCLUDE		'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE		'LSL$CMNIFF:IFFJUN.CMN'

C Data in
	CHARACTER*(*)	FILENAME		! IFF file to be sorted
	LOGICAL*4	MONITOR			! monitor progress?

C Workspace
	INTEGER*4	ISN
	INTEGER*2	IECODE,IELEN		! for IFFNXT
	REAL*4		PCENT,LPCENT,PCF	! % process completion

C Externals
	INTEGER*4	SORTARMS
	EXTERNAL	SORTARMS

C Functions
	INTEGER*4	IFFMODIFY

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Sorts arms in each node into order anti-clockwise from 3 o'clock
C
C	Works on currently selected IFF file in-situ
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

C Open file to have arms sorted

	SORT_ARMS = IFFMODIFY(1,FILENAME(:INDEX(FILENAME,' ')-1),
     &	  ,,.FALSE.,1)
	IF (.NOT.SORT_ARMS) GOTO 20

C Find SH entry and take No. of sectors on each axis into hand

	CALL IFFNXC('SH',IELEN)
	IF (IELEN.EQ.-1) THEN		! end-of-file encountered
	  SORT_ARMS = ILINK__NOJNSTR
	  CALL LSL_PUTMSG(SORT_ARMS,FILENAME)
	  GOTO 15
	END IF

C Initialise % count

	PCF = 100.0/(IFSNUM(1)*IFSNUM(2))
	PCENT = 0
	LPCENT = 0
	IF (MONITOR) WRITE(*,'(1X,F6.1,''%'')') PCENT

C Apply routine SORTARMS to each node in each node-sector

	CALL IFFRWD				! rewind
	DO 10 ISN = 1,IFSNUM(1)*IFSNUM(2)

C Initialise LSL_STATUS which we will use to return the success
C of SORTARMS
	  LSL_STATUS = SS$_NORMAL

	  CALL IFJSCN(ISN,SORTARMS)

C As SORTARMS is passed as data to IFJSCN, the value SORTARMS returns
C in R0 will not be available to SORT_ARMS which is invoking IFJSCN. We
C therefore use /STATUS/LSL_STATUS to return the success of the function

	  IF (.NOT.LSL_STATUS) THEN
	    SORT_ARMS = LSL_STATUS
	    GOTO 15
	  END IF

C Show progress?

	  IF (.NOT.MONITOR) GOTO 10
	  PCENT = ISN*PCF
	  IF (PCENT-LPCENT.GT.0.1) THEN		! don't WRITE too often
	    WRITE(*,'(1H+,F6.1)') PCENT
	    LPCENT = PCENT
	  END IF
10	CONTINUE
 
	PCENT = 100
	IF (MONITOR) WRITE(*,'(1H+,F6.1)') PCENT

15	CALL IFFCLO(1)

20	RETURN
	END

