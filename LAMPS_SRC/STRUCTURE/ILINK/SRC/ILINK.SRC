C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-09-09 16:47:02.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	PROGRAM ILINK

***	MODULE	ILINK
***	IDENT	09SE96

C	Copyright: Laser-Scan Ltd., Cambridge, England
C
CMOD1466						JB	09-Feb-1995
C	Max number of fc pairs increase from 300 to 500
C
CMOD1424						JB	07-Nov-1994
C	Reinstate the /FCP functionality in LINKNODE by
C	removing it! (undoing MOD1073)
C	Version 5.5
C
CMOD1381						JB	08-Jul-1994
C	Implement the original SET_CB functionality for /PPJOIN and 
C	/LPJOIN to keep the point attribute assignment for moving 
C	points, but keep the strict point assignment for /LLJOIN and 
C	higher, with NULL point attributes given for moved or new 
C	points.
C	Version 5.4
C
CMOD1319						JB	10-Dec-1993
C	No. of points per feature increased from 15000 to 60000 in
C	ILINK.CMN and ILINK.STR.
C	Unpredictable jumps to the closing CONTINUE of a DO loop removed
C	in REMOVE_2NODES
C	Version 5.3
C
CMOD1304						JB	13-Oct-1993
C	Use /KEEP=PARENT to enable the transfer of ACs type 9
C
CMOD1293						JB	13-Sep-1993
C	New /SYMBOL for the LPJOIN process to enable the moving of 
C	symbol (point) features onto linework
C	Version 5.2
C
CMOD1232						JB	25-May-1993
C	New message BADMINTOL for /MINTOL value below the dataset
C	resolution
C	New qualifier /WARNING for extra debug information, in particular
C	for the deletion of original points in DEL3
C	Version 5.1
C
CMOD1231						JB	20-May-1993
C	Fix per-point attribute to coordinate assignment by comparing the
C	x,y values directly within the CB block with the internal PT
C	arrays
C	Set NEWPAC(0) to a sensible value to signal to SET_CB to output
C	IFF_ABSENT at an known PAC code
C
CMOD1218						JB/PGH	18-Apr-1993
C	(Fix CHKPTS1 for equal feature priority, at the same point)
C	Fix BETWEEN to not give a result depending on MINTOL for identical 
C	points in the two segments
C	Also do not use BETWEEN for known proper intersections for INSERT_PT
C	in CHKVEX2/BREAK
C	Fix SORT_AND_MERGE to not access nxt(0) or prv(0)
C
CMOD1210						PGH	22-Mar-1993
C	Fix WRITE_JB to get the address of the final CB correctly
C
CMOD1073						JB/WJJ	01-Mar-1993
C	Set COORD_TOL to max coord value/2.0E6 instead of /0.5E6
C	Use FCPAIR comparisons in QUADSCAN/CHKNDS in LINKNODE
C	Copy RO entries from input to output file
C	Version 5.0
C
CMOD1171						JB/WJJ	27-Jan-1993
C	Fix bug in SORT_AND_MERGE which deletes features which have
C	identical start nodes and end nodes with same start angle, and
C	therefore assumes they are the same feature. Check the features
C	point by point for identicality. (May also make the changes in
C	MARK_ALIGN redundant)
C	Add messages NOMERGE, NOTMERGE to SORT_AND_MERGE
C	Also in LINKNODE delete short segments between nodes as this
C	occasionally confuses the alignments
C
C 	27-1-92 Fix LTEQGT so that feature codes mapped onto themselves
C	via FCP/LCP file use the FSN to determine priority
C
C	Version 4.9
C
CMOD1155						JB	23-Nov-1992
C	Fix bug which deletes features occasionally while in LLJOIN,
C	changing MARK_ALIGN again
C	Version 4.8
C
CMOD1132						JB	07-Aug-1992
C	Use /KEEP=FSN to use parent FSNs in the output features in the
C	/BREAK or /MERGE processes
C	Version 4.7b
C
CMOD1127						JB	20-Jul-1992
C	Skip multiple invisible moves to single points
C	Version 4.7a
C
CMOD1114						JB	08-May-1992
C	Remove BYTE NUM as a count in GET_DATA, ADD_FTR, CREATE_FTR, 
C	and BREAK_FTRS
C
CMOD1099						JB	06-Apr-1992
C	Fix bug allowing mis-association oF CB attributes (incl. Z values)
C	Version 4.7
C
CMOD1063						JB	15-Nov-1991
C	Fix bug deleting one of 2 aligned features while merging in LLJOIN
C	Version 4.6 (Also add /MINLEN for debug)
C
CMOD1060						JB	07-Nov-1991
C	Add /ABSOLUTE qualifier to output all coords as absolute
C	Replace LCM_OPEN with LITES2_OPN and START_LCM with START_LITES2
C
CMOD	Move COLH_XY initialisation to correct place	ST	09-Sep-1991
C	to avoid errors in SORTARMS
C
CMOD	Version 4.5  Add /MINTOL			ST	09-Aug-1991
CMOD	Version 4.4B					WJJ/JB	07-Mar-1991
CMOD	Version 4.4A					WJJ	30-Aug-1990
CMOD	Version 4.4					WJJ	30-Apr-1990
CMOD	Version 4.3					WJJ	12-Feb-1990
CMOD	Explicitly set PAC_LIN(0) - cosmetic?		WJJ	02-Feb-1990
CMOD	Introduced /FREE_ENDS qualifier			ACM 	06-Dec-1988
CMOD	Converted to use Point Accuracy Codes		ACM 	05-Dec-1988
CMOD	Converted to accept CB in place of ST entries	ACM 	06-Apr-1988
CMOD	Introduced FTR_LAYER for new /LCP qualifier	ACM 	21-Mar-1988
CMOD	Introduced /VERIFY and /LIST			ACM  	10-Dec-1987
CMOD	Changed message for ftrs 'transfered' to ftrs
C	'deselected' when /STRUCTURE is active		ACM  	13-Oct-1987
CMOD	Changed version from 2.0 to 3.0			ACM  	16-Sep-1987
CMOD	Removed "resequence" operation option		ACM 	10-Sep-1987
CMOD	Changed info message "1 arm (unattached links)" to
C	"1 arm (unattached link ends)"			ACM  	17-Aug-1987
CMOD 2/498 Version ident now includes date of link	TJH  	20-Jul-1987
CMOD	FCPAIR now LOGICAL*1 to match QUADLIB		PGH  	15-Jul-1987
CMOD	LITES2 command file now opened with LCM_OPEN	TJH  	15-Jun-1987
CMOD	Restructured for functions, SCAN_IFF added	TJH  	27-May-1987
C
C	Created: ACM						July   1986
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE		'($SSDEF)'
	INCLUDE		'($STSDEF)'
	INCLUDE		'LSL$CMNILINK:ILINKMSG.PAR'
C
C Commons
	INCLUDE 	'LSL$CMNILINK:ILINK.CMN'
	INCLUDE 	'LSL$CMNILINK:ILINKCHAR.CMN'
	INCLUDE 	'LSL$CMNLSL:STATUS.CMN'
C
C Workspace
	INTEGER*4	MAXPTS		! max # points
	INTEGER*4	MAXINFTRS	! max # ftrs in input
	INTEGER*4	MAXOUTFTRS	! max # ftrs in output
	INTEGER*4	MAXNODES	! max # nodes
	INTEGER*4	MAXARMS		! max # node arms
	INTEGER*4	MAXSHRS		! max # sharing ftrs
	INTEGER*4	I
	LOGICAL*4	CANNOT_TRANSFER
	LOGICAL*4	NODES_FOUND

	CHARACTER*80	DOTLINE

C Data
	DATA	DOTLINE/' ***************************************
     &****************************************'/

C Functions
	LOGICAL*4	ALLOCATE_MEMORY
	LOGICAL*4	BREAK
	LOGICAL*4	GET_CMDS	! decode cmd line
	LOGICAL*4	GET_DATA
	LOGICAL*4	GET_LOOKUP_FILES! decode lookup files
	LOGICAL*4	LITES2_OPN	! opens LITES2 command file
	LOGICAL*4	LINKNODE
	LOGICAL*4	LLJOIN
	LOGICAL*4	LPJOIN
	LOGICAL*4	PUT_FTRS
	LOGICAL*4	PPJOIN
	LOGICAL*4	REMOVE_2NODES
	LOGICAL*4	SORT_AND_MERGE
	LOGICAL*4	SORT_ARMS
	LOGICAL*4	SCAN_IFF	! scans IFF input file

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	See ILINK documentation in the STRUCTURE module.
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C Initialise

	CALL LSL_INIT(.TRUE.)		! initialise LSLLIB with timer

C Get DCL-like parameters and qualifiers

	LSL_STATUS = GET_CMDS()		! get parameters and qualifiers
	IF (.NOT.LSL_STATUS) GOTO 1000

C Declare ILINK version

	CALL WRITEF
	CALL VERSION('ILINK Version 5.6')

C Open and read contents of lookup files

	LSL_STATUS = GET_LOOKUP_FILES()
	IF (.NOT.LSL_STATUS) GOTO 1000

C Start up PME performance monitor

C	IF (HAD_PME) CALL PME_INIT()

C Initialise CB required-column header array for reading X, Y

	COLH_XY(1) = IFF_C_X		! from LSL$CMNIFF:CB.STR
	COLH_XY(2) = IFF_C_Y

C No need for dynamic memory allocation for file being processed in-situ

	IF (NEED_NODATA) GOTO 10

C Do a pre-scan of the input IFF file to determine:
C 1) number of features
C 2) number of points
C 3) maximum number of points in a feature

	CALL WRITEF(' Scanning IFF file for dynamic memory allocation')

	LSL_STATUS = SCAN_IFF()
	IF (.NOT.LSL_STATUS) GOTO 1000

C Allocate memory accordingly

	LSL_STATUS = ALLOCATE_MEMORY()
	IF (.NOT.LSL_STATUS) GOTO 1000

C Set local copies of dynamically assigned array dimensions (why?)

	MAXPTS     = MAXPTS_CMN
	MAXINFTRS  = MAXINFTRS_CMN
	MAXOUTFTRS = MAXOUTFTRS_CMN
	MAXNODES   = MAXNODES_CMN
	MAXARMS    = MAXARMS_CMN
	MAXSHRS    = MAXSHRS_CMN
C
C Initialise capture code as specified in /TOL or /PAC files
C
C These lines have been moved (copied) above the branch for in-situ
C processing.
C This is because when sorting junction arms the values are undefined
C and it did not work.
C
	IF (.NOT.(HAD_TOL.OR.HAD_PAC)) THEN
	  MIN_PAC  = 1
	  CAP_CODE = -1			! dummy code (is -1 safe?)
	END IF
C
C Set up PAC tolerances for the undefined PA code (MIN_PAC-1), since
C tolerances will always be taken from PAC tolerances in CC, whether
C had /TOL or not

	PACODE(0)    = MIN_PAC-1
	NEWPAC(0)    = MIN_PAC-1
	PAC_JNTOL(0) = JNTOL
	PAC_EXTOL(0) = EXTOL
	PAC_LIN(0)   = 0

C Initialise JOIN_COUNT(1..NDIVS) = 0

	DO 5 I = 1,NDIVS
5	JOIN_COUNT(I) = 0

C Read data into data structure

	CALL WRITEF(' Reading data from IFF input')
	LSL_STATUS = GET_DATA(
     &			%VAL(PT_START),
     &			%VAL(CC_START),
     &			%VAL(NXT_START),
     &			%VAL(PRV_START),
     &			%VAL(PT_PR_FTR_START),
     &			%VAL(FTR_PTS_START),
     &			%VAL(FTR_START_START),
     &			%VAL(FTR_IFC2_START),
     &			%VAL(FTR_LAYER_START),
     &			%VAL(FTR_INFTR_START),
     &			%VAL(FTR_ORIG_PR_FTR_START),
     &			%VAL(PNT_FTR_START),
     &			%VAL(IN_FTR_STATUS_START),
     &			%VAL(IN_FTR_ADDR_START),
     &			MAXPTS,MAXINFTRS,MAXOUTFTRS)
	IF (.NOT.LSL_STATUS) GOTO 1000

C Show command interpretation

10	CALL WRITEF()
	CALL WRITEF(' ILINK COMMAND INTERPRETATION')
	CALL WRITEF('%S',DOTLINE)
	CALL WRITEF()
	CALL SHOW_CMDS()
	CALL WRITEF()
	CALL WRITEF(' ILINK LOG')
	CALL WRITEF('%S',DOTLINE)
	CALL WRITEF()

	IF (HAD_DEBUG) CALL LIB$SHOW_TIMER

	N_ORIG_PTS 	= N_PTS		! note no. of original points
	N_ORIG_PR_FTRS 	= N_PR_FTRS	! note no. of original features

C Check there is work to be done

	IF (NEED_DATA_PER_FEATURE.AND.N_PR_FTRS.LT.1) THEN
	  CALL LSL_PUTMSG(ILINK__NOPRFTRS)
	  GOTO 1000
	ENDIF

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C	G E N E R A T E    A    L I T E S 2    F I L E ?

	IF (HAD_LITES2) THEN

C Use IFF approximate output file range read by GET_DATA

	  LSL_STATUS = LITES2_OPN(LITES2LUN,LITES2FILE(:LI_LEN),
     &				  OUT_RANGE,.FALSE.)
	  IF (LSL_STATUS) THEN
	    LITES2_OPEN = .TRUE.
	  ELSE
	    GOTO 1000
	  END IF
	END IF

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C	D O   G E O M E T R I C    P R O C E S S    S  P E C I F I E D

	IF (HAD_LLJOIN .OR. HAD_MERGE) THEN

	  CALL WRITEF(' Aligning')

	  LSL_STATUS = LLJOIN(
     &			%VAL(PT_START),
     &			%VAL(CC_START),
     &			%VAL(NXT_START),
     &			%VAL(PRV_START),
     &			%VAL(NEAREST_START),
     &			%VAL(MINSQDIST_START),
     &			%VAL(PT_DST_START),
     &			%VAL(PT_SEEN_START),
     &			%VAL(PDAT_START),
     &			%VAL(QDAT_START),
     &			%VAL(PT_PR_FTR_START),
     &			%VAL(FTR_PTS_START),
     &			%VAL(FTR_START_START),
     &			%VAL(FTR_IFC2_START),
     &			%VAL(FTR_LAYER_START),
     &			%VAL(FTR_INFTR_START),
     &			%VAL(PNT_FTR_START),
     &			%VAL(FTR_ORIG_PR_FTR_START),
     &			%VAL(IN_FTR_STATUS_START),
     &			%VAL(WORKSPACE_START),
     &			MAXPTS,MAXINFTRS,MAXOUTFTRS,MAXNODES)

	  IF (.NOT.LSL_STATUS) GOTO 1000

	  IF (HAD_DEBUG) CALL LIB$SHOW_TIMER

	ELSEIF (HAD_LPJOIN) THEN
	  CALL WRITEF(' Joining ends to lines')
	  LSL_STATUS = LPJOIN(
     &			%VAL(PT_START),
     &			%VAL(CC_START),
     &			%VAL(NXT_START),
     &			%VAL(PRV_START),
     &			%VAL(NEAREST_START),
     &			%VAL(PT_DST_START),
     &			%VAL(PT_PR_FTR_START),
     &			%VAL(PDAT_START),
     &			%VAL(QDAT_START),
     &			%VAL(PT_SEEN_START),
     &			%VAL(FTR_PTS_START),
     &			%VAL(FTR_START_START),
     &			%VAL(PNT_FTR_START),
     &			%VAL(FTR_INFTR_START),
     &			%VAL(FTR_ORIG_PR_FTR_START),
     &			%VAL(FTR_IFC2_START),
     &			%VAL(FTR_LAYER_START),
     &			%VAL(IN_FTR_STATUS_START),
     &			%VAL(WORKSPACE_START),
     &			MAXPTS,MAXINFTRS,MAXOUTFTRS,MAXNODES)

	  IF (.NOT.LSL_STATUS) GOTO 1000

	  IF (HAD_DEBUG) CALL LIB$SHOW_TIMER

	ELSEIF (HAD_BREAK .OR. HAD_FREE_ENDS) THEN
	  CALL WRITEF(' Breaking features')
	  LSL_STATUS = BREAK(
     &			%VAL(PT_START),
     &			%VAL(CC_START),
     &			%VAL(NXT_START),
     &			%VAL(PRV_START),
     &			%VAL(NEAREST_START),
     &			%VAL(PT_PR_FTR_START),
     &			%VAL(PDAT_START),
     &			%VAL(FTR_PTS_START),
     &			%VAL(FTR_START_START),
     &			%VAL(FTR_INFTR_START),
     &			%VAL(FTR_ORIG_PR_FTR_START),
     &			%VAL(FTR_IFC2_START),
     &			%VAL(FTR_LAYER_START),
     &			%VAL(IN_FTR_STATUS_START),
     &			%VAL(WORKSPACE_START),
     &			MAXPTS,MAXINFTRS,MAXOUTFTRS,MAXNODES)

	  IF (.NOT.LSL_STATUS) GOTO 1000

	  IF (HAD_DEBUG) CALL LIB$SHOW_TIMER
	ENDIF

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C	F O R M    L I N K  /  N O D E    S T R U C T U R E  ?

	IF (	HAD_LLJOIN .OR.
     &		HAD_LPJOIN .OR.
     &		HAD_PPJOIN .OR.
     &		HAD_MERGE  .OR.
     &		HAD_BREAK  .OR.
     &		HAD_FREE_ENDS .OR.
     &		HAD_STRUCTURE) THEN

	  IF (HAD_PPJOIN .OR. HAD_LLJOIN .OR. HAD_MERGE) THEN
	    NSTOL = JNTOL
	  ELSE
	    NSTOL = COORD_TOL
	  ENDIF

C NSTOL must always be larger than the difference between two large
C coordinates which are equal in the first 6 significant figures

	  NSTOL = MAX(NSTOL,COORD_TOL)

	  LSL_STATUS = LINKNODE(
     &			%VAL(PT_START),
     &			%VAL(NXT_START),
     &			%VAL(PT_DST_START),
     &  		%VAL(FTR_PTS_START),
     &			%VAL(FTR_IFC2_START),
     &			%VAL(FTR_LAYER_START),
     &			%VAL(FTR_NDS_START),
     &			%VAL(PNT_FTR_START),
     &			%VAL(BASE_NODE_START),
     &			%VAL(NPT_START),
     &			%VAL(NWT_START),
C     &			%VAL(NHT_START),
     &			%VAL(HEADARM_START),
     &			%VAL(ARM_START),
     &			%VAL(WORKSPACE_START),
     &  		MAXPTS,MAXOUTFTRS,
     &  		MAXARMS,MAXNODES)

	  IF (.NOT.LSL_STATUS) GOTO 1000

	  IF (HAD_DEBUG) CALL LIB$SHOW_TIMER
	  NODES_FOUND = .TRUE.
	ENDIF

C If had PPJOIN then determine final node positions

	IF (HAD_PPJOIN) THEN
	  CALL WRITEF(' Joining ends to ends')

	  LSL_STATUS = PPJOIN(
     &			%VAL(HEADARM_START),
     &			%VAL(ARM_START),
     &			%VAL(NPT_START),
     &			MAXNODES,MAXARMS)

	  IF (.NOT.LSL_STATUS) GOTO 1000

	  IF (HAD_DEBUG) CALL LIB$SHOW_TIMER
	ENDIF

	IF (HAD_LLJOIN .OR. HAD_MERGE .OR.
     &	   (HAD_LPJOIN .AND. .NOT.HAD_VERIFY)) THEN

C Sort node arms and merge duplicate features into shared-features

	  CALL EXPAND  (' Sorting node arms')

	  IF (HAD_LLJOIN .OR. HAD_MERGE)
     &	    CALL APPEND(' and merging duplicate features')
	  CALL TTWLIN

	  LSL_STATUS = SORT_AND_MERGE(
     &			%VAL(PT_START),
     &			%VAL(NXT_START),
     &			%VAL(PRV_START),
     &			%VAL(FTR_PTS_START),
     &			%VAL(FTR_NDS_START),
     &			%VAL(FTR_ORIG_PR_FTR_START),
     &			%VAL(ARM_START),
     &			%VAL(HEADARM_START),
     &			%VAL(SHR_START),
     &			%VAL(HEADSHR_START),
     &			MAXPTS,MAXOUTFTRS,
     &			MAXNODES,MAXARMS,MAXSHRS)

	  IF (.NOT.LSL_STATUS) GOTO 1000

	  IF (HAD_DEBUG) CALL LIB$SHOW_TIMER
	ENDIF

C If HAD_LLJOIN or HAD_MERGE then check for unwanted 2-nodes

	IF (HAD_LLJOIN .OR. HAD_MERGE) THEN
	  CALL WRITEF(' Removing invalid 2-nodes')

	  LSL_STATUS = REMOVE_2NODES(
     &			%VAL(NXT_START),
     &			%VAL(PRV_START),
     &			%VAL(FTR_START_START),
     &			%VAL(FTR_PTS_START),
     &			%VAL(FTR_NDS_START),
     &			%VAL(FTR_DAT_START),
     &			%VAL(HEADSHR_START),
     &			%VAL(SHR_START),
     &			%VAL(FTR_ORIG_PR_FTR_START),
     &			%VAL(PNT_FTR_START),
     &			%VAL(HEADARM_START),
     &			%VAL(ARM_START),
     &			MAXPTS,MAXOUTFTRS,MAXNODES,MAXARMS,MAXSHRS)

	  IF (.NOT.LSL_STATUS) GOTO 1000

	  IF (HAD_DEBUG) CALL LIB$SHOW_TIMER
	ENDIF

C If process may have broken features then mark those which are broken

	IF (NEED_DATA_PER_POINT .AND. .NOT.HAD_VERIFY)
     &	  CALL SET_BROKEN(
     &			%VAL(FTR_PTS_START),
     &			%VAL(FTR_INFTR_START),
     &			%VAL(IN_FTR_STATUS_START),
     &			%VAL(FTR_ORIG_PR_FTR_START),
     &			MAXINFTRS,MAXOUTFTRS)

C Write output file

	IF (.NOT.NEED_NODATA) THEN
	  IF (.NOT.HAD_VERIFY) CALL WRITEF(' Writing to IFF output')
	  LAST_PR_FTR = N_ORIG_PR_FTRS+1

	  LSL_STATUS = PUT_FTRS(
     &			%VAL(PT_START),
     &			%VAL(CC_START),
     &			%VAL(NEAREST_START),
     &			%VAL(NXT_START),
     &			%VAL(PRV_START),
     &			%VAL(FTR_PTS_START),
     &			%VAL(FTR_START_START),
     &			%VAL(FTR_NDS_START),
     &			%VAL(FTR_DAT_START),
     &			%VAL(FTR_INFTR_START),
     &			%VAL(FTR_IFC2_START),
     &			%VAL(PNT_FTR_START),
     &			%VAL(FTR_ORIG_PR_FTR_START),
     &			%VAL(IN_FTR_ADDR_START),
     &			%VAL(IN_FTR_STATUS_START),
     &			%VAL(HEADARM_START),
     &			%VAL(ARM_START),
     &			%VAL(HEADSHR_START),
     &			%VAL(SHR_START),
     &			%VAL(NPT_START),
     &			%VAL(NOD_ADDR_START),
     &			MAXPTS,MAXINFTRS,MAXOUTFTRS,
     &			MAXSHRS,MAXARMS,MAXNODES)

	  IF (.NOT.LSL_STATUS) GOTO 1000

	  IF (.NOT.HAD_VERIFY .AND. HAD_DEBUG) CALL LIB$SHOW_TIMER
	ENDIF

C Close all IFF files - here with success only!

	IF (IN_OPEN) THEN
	  CALL IFFCLO(INLUN)
	  IN_OPEN = .FALSE.
	ENDIF	
C
	IF (OUT_OPEN) THEN
	  CALL IFFCLO(OUTLUN,SS$_NORMAL)
	  OUT_OPEN = .FALSE.
	ENDIF

C Sort node arms in-situ

	IF (HAD_SORTARMS) THEN
	  CALL WRITEF(' Sorting node arms')
	  IF (HAD_STRUCTURE) THEN
	    LSL_STATUS = SORT_ARMS(OUTFILE,HAD_MONITOR)
	  ELSE
	    LSL_STATUS = SORT_ARMS(INFILE,HAD_MONITOR)
	  END IF

	  IF (.NOT.LSL_STATUS) GOTO 1000
	  IF (HAD_DEBUG) CALL LIB$SHOW_TIMER
	ENDIF

C Summarise process statistics

	CALL WRITEF()
	CALL WRITEF(' ILINK STATISTICS')
	CALL WRITEF('%S',DOTLINE)
	CALL WRITEF()

	IF (HAD_SORTARMS .AND. .NOT.HAD_STRUCTURE) THEN
	  NODES_FOUND = .TRUE.
	  GOTO 20
	END IF

	CANNOT_TRANSFER = NEED_DATA_PER_FEATURE .AND.
     &			  PROCESS_ALL_LAYERS .AND. .NOT.HAD_FCP

	IF (.NOT.(CANNOT_TRANSFER.OR.HAD_VERIFY)) THEN
	  IF (.NOT.HAD_STRUCTURE) THEN
	    CALL WRITEF(' Input features transfered    :
     & (Point %N),  (Other %N)',N_TR_PFTRS,N_TR_OFTRS)
	  ELSE
	    CALL WRITEF(' Input features deselected    :
     & (Point %N),  (Other %N)',N_TR_PFTRS,N_TR_OFTRS)
	  ENDIF
	ENDIF

	IF (NEED_DATA_PER_FEATURE)
     &	CALL WRITEF(' Input features processed     :
     & (Point %N),  (Open %N),  (Closed %N)',
     &	N_ORIG_PR_PFTRS,N_ORIG_PR_OFTRS,N_ORIG_PR_CFTRS)

	IF (NEED_DATA_PER_FEATURE.AND..NOT.HAD_VERIFY)
     &	CALL WRITEF(' Processed features output    :
     & (Point %N),  (Open %N),  (Closed %N)',
     &	N_PR_PFTRS,N_PR_OFTRS,N_PR_CFTRS)

	CALL WRITEF
	CALL WRITEF(' Total features in IFF input  : %N',
     &	  N_IN_FTRS)

	IF (.NOT.HAD_VERIFY)
     &	CALL WRITEF(' Total features in IFF output : %N',
     &	  N_TR_PFTRS+N_TR_OFTRS+
     &	  N_PR_PFTRS+N_PR_OFTRS+N_PR_CFTRS)

	CALL WRITEF

20	IF (NODES_FOUND) THEN
	  CALL WRITEF(
     &	  ' Nodes found joined to 0 arms  (single point features): %N'
     &							,N_0_NODES)
	  CALL WRITEF(
     &    '                       1 arm   (unattached link ends) : %N'
     &							,N_1_NODES)
	  CALL WRITEF(
     &    '                       2 arms  (link joined to link)  : %N'
     &							,N_2_NODES)
	  CALL WRITEF(
     &    '                       3 arms  (link joined to links) : %N'
     &							,N_3_NODES)
	  CALL WRITEF(
     &    '                       4 arms  (link joined to links) : %N'
     &							,N_4_NODES)
	  CALL WRITEF(
     &    '                      5+ arms  (link joined to links) : %N'
     &	    						,N_5PLUS_NODES)
	  N_NODES_OUTPUT = N_0_NODES+N_1_NODES+N_2_NODES
     &	                  +N_3_NODES+N_4_NODES+N_5PLUS_NODES
	  CALL WRITEF
	  CALL WRITEF(
     &	  '                                            Total     : %N',
     &	    N_NODES_OUTPUT)

C Warn if proper-node-arms output do not balance non-pt-ftr ends
C (Actually, dont't bother. Ignorance is bliss!)
C	  CALL CHECK_ARM_BALANCE(%VAL(FTR_PTS_START),MAXOUTFTRS)

	ENDIF

C Print a histogram showing distribution of join distances over the
C verification range VRTOL to JNTOL

	IF (HAD_PPJOIN .OR. HAD_LPJOIN) CALL JOIN_HISTOGRAM()

C Shut down PME performance monitor

C	IF (HAD_PME) CALL PME_EXIT

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C Close any open files and exit.

1000	IF (IN_OPEN) CALL IFFCLO(INLUN)

	IF (OUT_OPEN) THEN
	  IF (.NOT.LSL_STATUS) THEN
	    IF (IBITS(LSL_STATUS,0,3).NE.%LOC(STS$K_WARNING)) THEN
	      CALL IFFCDL(OUTLUN) 		! delete file
	    ELSE
	      CALL IFFCLO(OUTLUN,SS$_ABORT)	! close file
	    ENDIF

	  ELSE
	    CALL IFFCLO(OUTLUN,SS$_NORMAL)	! close file
	  ENDIF
	ENDIF

	IF (LITES2_OPEN) CALL FLWCLO(LITES2LUN)

	CALL LSL_EXIT (LSL_STATUS)

	IF (HAD_LIST) CALL FLWCLO(LISTLUN)

	END

