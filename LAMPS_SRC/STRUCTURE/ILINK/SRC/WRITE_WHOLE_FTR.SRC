	LOGICAL*4 FUNCTION WRITE_WHOLE_FTR(
     &		PT,CC,ORIG_PR_FTR,BASE_PR_FTR,FTR_PTS,FTR_START,
     &		FTR_DAT,FTR_INFTR,PNT_FTR,IN_FTR_ADDR,nearest,
     &		MAXPTS,MAXINFTRS,MAXOUTFTRS)
C
***	MODULE	WRITE_WHOLE_FTR
***	IDENT	13OC93
C
C	Copyright : Laser-Scan Ltd., Cambridge, England
C
C	Created   : ACM					       Jul 1986
C
CMOD	Made a function, IFF entries which lie between
C	ST and EF are now copied to the output file.	TJH 04-Jun-1987
CMOD	Added arg to INTRNLERR message			ACM 14-Aug-1987
CMOD	Converted to accept CB in place of ST entries	ACM 06-Apr-1988
CMOD	Bug-fixes: don't copy JP's/spot EF in input 	WJJ 07-Feb-1990
CMOS1304Add KEEP=PARENT					 JB 13-Oct-1993

	IMPLICIT NONE

C Parameters
	INCLUDE		'($SSDEF)'

	INCLUDE		'LSL$CMNILINK:ILINKMSG.PAR'

C Commons
	INCLUDE		'LSL$CMNLSL:STATUS.CMN'
	INCLUDE		'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE		'LSL$CMNILINK:ILINK.CMN'
	INCLUDE		'LSL$CMNILINK:ILINKCHAR.CMN'

C Data in
	INTEGER*4	ORIG_PR_FTR		! orig pr-ftr index
	INTEGER*4	BASE_PR_FTR		! orig base-pr-ftr index
	INTEGER*4	MAXPTS,MAXINFTRS,MAXOUTFTRS
	INTEGER*4	FTR_PTS(2,MAXOUTFTRS)
	INTEGER*4	FTR_START(MAXOUTFTRS)
	INTEGER*4	FTR_DAT(2,MAXOUTFTRS)
	INTEGER*4	FTR_INFTR(MAXOUTFTRS)
	INTEGER*4	IN_FTR_ADDR(MAXINFTRS)
	integer*4	nearest(maxpts)

	REAL*4		PT(2,MAXPTS)

	INTEGER*4	CC(MAXPTS)

	LOGICAL*1	PNT_FTR(MAXOUTFTRS)

C Workspace
	INTEGER*4	IN_FTR			! input-ftr index
	INTEGER*4	PR_FTR			! processed-ftr index
	INTEGER*4	FC4			! ftr code or code index
	INTEGER*4	ADDR			! IFF address

	INTEGER*2	FSN,ISN			! for NF entry
	INTEGER*2	ACTYPE			! AC type
	INTEGER*2	IECODE,IELEN		! for IFFPKE

	LOGICAL*4	CLOSED			! ftr closed loop?

C Data
	INTEGER*2	ISTAT(4)		! for IFFFS
	DATA ISTAT/4*0/

C Functions
	LOGICAL*4	SET_CB

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Writes whole-feature ORIG_PR_FTR with point string LINKPTS
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

	WRITE_WHOLE_FTR = SS$_NORMAL	! assume success

C Check ftr has pts
	IF (N_OUT_PTS.LT.1) THEN	! debug

C We will continue processing after this error so leave SS$_NORNAL
C in R0 on return

	  CALL LSL_PUTMSG(ILINK__INTRNLERR,1,'WRITE_WHOLE_FTR')
	  LSL_STATUS = SS$_NORMAL	! patch LSL_STATUS
	  FTR_PTS(2,ORIG_PR_FTR) = NIL
	  GOTO 140
	ENDIF

	CLOSED = PT(1,BASE_IPT(1)).EQ.PT(1,BASE_IPT(N_OUT_PTS)).AND.
     &	         PT(2,BASE_IPT(1)).EQ.PT(2,BASE_IPT(N_OUT_PTS))

C Check for one-vec ftrs with zero length

	IF (N_OUT_PTS.EQ.2.AND.CLOSED) N_OUT_PTS = 1

C Don't output non-point ftrs with only 1 point

	IF (N_OUT_PTS.EQ.1.AND..NOT.PNT_FTR(ORIG_PR_FTR)) GOTO 140

C Find ftr corresponding to original ftr ORIG_PR_FTR in input file

	IN_FTR = FTR_INFTR(ORIG_PR_FTR)
	ADDR = IN_FTR_ADDR(IN_FTR)
	CALL IFFSEL(INLUN)
	CALL IFFPKE(IECODE,IELEN,ADDR)

	IF (IECODE.NE.'NF') THEN
	  WRITE_WHOLE_FTR = ILINK__BADADDR
	  CALL LSL_PUTMSG(WRITE_WHOLE_FTR)
	  GOTO 140
	ENDIF

C Get original FSN

	CALL EIHRI(FSN,1,1)

C Write NF entry

	CALL IFFSEL(OUTLUN)
	N_OT_FTRS = N_OT_FTRS+1
	ISN = 0
	CALL IFFNF(FSN,ISN)

C Write any other entries between NF and CB entry for this ftr

	CALL IFFSEL(INLUN)
40	CALL IFFNXT(IECODE,IELEN)

	IF (IELEN.EQ.-1) THEN
	  WRITE_WHOLE_FTR = ILINK__UNEXPEOF
	  CALL LSL_PUTMSG(WRITE_WHOLE_FTR,INFILE(:IN_LEN))
	  GOTO 140
	ENDIF

	IF (IECODE.EQ.'CB') GOTO 130		! end before CB entry

	IF (IECODE.EQ.'AC') THEN
	  CALL EIHRI(ACTYPE,1,1)
	  IF (ACTYPE.EQ.9) THEN			! ignore AC type 9 entries
	    IF (.NOT.HAD_KEEP_PARENT) GOTO 40	! unless forced to transfer
	  ENDIF
	ENDIF

C Don't copy JP's
	IF (IECODE.EQ.'JP') GOTO 40

	CALL EIHCPY(OUTLUN)
	GOTO 40

C Prepare to write CB entry

130	CALL IFFSEL(OUTLUN)
	FTR_DAT(FTR_ST,ORIG_PR_FTR) = LPOSE	! note CB IFF address
	FTR_DAT(FTR_NP,ORIG_PR_FTR) = N_OUT_PTS	! and No of pts

C Decide which feature to take any non X,Y attributes from

	IF (HAD_MERGE) THEN
	  PR_FTR = BASE_PR_FTR
	ELSE
	  PR_FTR = ORIG_PR_FTR
	ENDIF

	IN_FTR = FTR_INFTR(PR_FTR)

C Assemble CB for output in CBH/BIG_CBD using PT indices set up by
C APPEND_FTR

	WRITE_WHOLE_FTR = SET_CB(
     &		IN_FTR,PT,CC,FTR_PTS,FTR_START,IN_FTR_ADDR,nearest,
     &		MAXPTS,MAXINFTRS,MAXOUTFTRS)

	IF (.NOT.WRITE_WHOLE_FTR) GOTO 140

C Write CB entry

	CALL PUT_CB()

C Count each type of ftr output

	IF (N_OUT_PTS.EQ.1) THEN
	  N_PR_PFTRS = N_PR_PFTRS+1		! count point-ftrs
	ELSEIF (CLOSED) THEN
	  N_PR_CFTRS = N_PR_CFTRS+1		! count closed-ftrs
	ELSE
	  N_PR_OFTRS = N_PR_OFTRS+1		! count open-ftrs
	ENDIF

C Finally copy any other entries which come after the last CB in the
C feature to the output file. Do NOT copy any CB entries. 
	CALL IFFSEL(INLUN)

C Next entry is already in hand, repoke.
	ADDR = LPOSH
	CALL IFFPKE(IECODE,IELEN,ADDR)
	GOTO 65
C
60	CALL IFFNXT(IECODE,IELEN)
	IF (IELEN.EQ.-1) THEN
	  WRITE_WHOLE_FTR = ILINK__UNEXPEOF
	  CALL LSL_PUTMSG(WRITE_WHOLE_FTR,INFILE(:IN_LEN))
	  GOTO 140
	ENDIF

65	IF (IECODE.EQ.'NF') GOTO 70
	IF (IECODE.EQ.'EO') GOTO 70
	IF (IECODE.EQ.'EM') GOTO 70
	IF (IECODE.EQ.'EJ') GOTO 70
	IF (IECODE.EQ.'EF') GOTO 70
	IF (IECODE.EQ.'CB') GOTO 60		! ignore CB entry
	IF (IECODE.EQ.'JP') GOTO 60		! ignore JP entry
	CALL EIHCPY(OUTLUN)
	GOTO 60

C Write EF entry

70	CALL IFFSEL(OUTLUN)
	CALL IFFEF

140	RETURN
	END

