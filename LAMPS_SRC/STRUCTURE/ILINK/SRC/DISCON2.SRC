C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-07-11 12:22:54.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE DISCON2(
     &		NXT,PRV,NEAREST,PT_SEEN,PDAT,FTR_PTS,
     &		MAXPTS,MAXOUTFTRS)

***	IDENT	29MY87
***	MODULE	DISCON2

C	Copyright : Laser-Scan Laboratories Ltd., Cambridge, England
C	Created   : ACM					Month 1986

	IMPLICIT NONE

	INCLUDE		'LSL$CMNILINK:ILINK.CMN'

C Data in
	INTEGER*4	MAXPTS,MAXOUTFTRS
	INTEGER*4	NXT(MAXPTS),PRV(MAXPTS)
	INTEGER*4	NEAREST(MAXPTS)
	INTEGER*4	FTR_PTS(2,MAXOUTFTRS)

	LOGICAL*1	PDAT(MAXPTS)
	LOGICAL*1	PT_SEEN(MAXPTS)

C Workspace
	INTEGER*4	IPTSTA,IPTFIN		! start/fin pt indices
	INTEGER*4	JPTSTA,JPTFIN		! start/fin pt indices
	INTEGER*4	IPT,JPT,KPT		! pt indices
	INTEGER*4	IPT_STA,IPT_FIN		! pt indices
	INTEGER*4	JPT_STA,JPT_FIN		! pt indices
	INTEGER*4	IFTR			! ftr indices

	LOGICAL  	IN_RUN			! in run of pts?
	LOGICAL  	SEEN			! pt ever pointed to?
	LOGICAL  	POINTING		! pt points to pt?
	LOGICAL  	POINTED_TO		! pt pointed-to by pt?
	LOGICAL  	FREE_BEFORE,FREE_AFTER

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Sets PT_SEEN = .FALSE. for runs of pts which are seen but not
C	pointing or pointed to, and are bounded in either direction by
C	a non-seen, non-pointing and non-pointed-to point
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC


C Use PDAT to mark all points which are pointed to

	DO 1 IPT = 1,N_PTS
	  PDAT(IPT) = .FALSE.
1	CONTINUE

	DO 2 IPT = 1,N_PTS
	  JPT = NEAREST(IPT)
	  IF (JPT.NE.NIL) PDAT(JPT) = .TRUE.
2	CONTINUE

	DO 70 IFTR = 1,N_PR_FTRS
	  IPTSTA = FTR_PTS(1,IFTR)
	  IPTFIN = FTR_PTS(2,IFTR)
	  IF (IPTSTA.EQ.NIL.OR.IPTFIN.EQ.NIL) GOTO 70	! ftr deleted
	  IF (IPTSTA.EQ.IPTFIN) GOTO 70		! 1-pt ftr
	  IPT = IPTSTA				! first pt in ftr
	  IN_RUN = .FALSE.			! flag run not open
	  GOTO 20

10	  IPT = NXT(IPT)			! move to next pt in ftr
20	  JPT = NEAREST(IPT)

	  SEEN = PT_SEEN(IPT)
	  POINTED_TO = PDAT(IPT)
	  POINTING = NEAREST(IPT).NE.NIL

	  IF (POINTING.OR.POINTED_TO.OR..NOT.SEEN) GOTO 30

	  IF (IN_RUN) THEN			! already in run
	    IPT_FIN = IPT			! note latest pt in run
	  ELSE
	    IN_RUN = .TRUE.			! flag run open
	    IPT_STA = IPT			! note first pt in run
	    IPT_FIN = IPT			! note latest pt in run
	    JPT_STA = JPT
	  END IF
	  GOTO 60				! move to next pt in ftr

C Here if IPT is not in run

30	  IF (.NOT.IN_RUN) GOTO 60
	  IN_RUN = .FALSE.
	  IF (IPT_STA.EQ.IPT_FIN) GOTO 55

C Find whether start or end of run is free

	  KPT = PRV(IPT_STA)
	  IF (KPT.NE.NIL) THEN
	    SEEN = PT_SEEN(KPT)
	    POINTED_TO = PDAT(KPT)
	    POINTING = NEAREST(KPT).NE.NIL
	    FREE_BEFORE = .NOT.(SEEN.OR.POINTING.OR.POINTED_TO)
	  ELSE
	    FREE_BEFORE = .TRUE.
	  END IF

	  KPT = NXT(IPT_FIN)
	  IF (KPT.NE.NIL) THEN
	    SEEN = PT_SEEN(KPT)
	    POINTED_TO = PDAT(KPT)
	    POINTING = NEAREST(KPT).NE.NIL
	    FREE_BEFORE = .NOT.(SEEN.OR.POINTING.OR.POINTED_TO)
	  ELSE
	    FREE_AFTER= .TRUE.
	  END IF

	  IF (FREE_BEFORE) THEN
	    JPT_STA = IPT_STA
	    JPT_FIN = PRV(IPT_FIN)
	  ELSE IF (FREE_AFTER) THEN
	    JPT_STA = NXT(IPT_STA)
	    JPT_FIN = IPT_FIN
	  END IF

	  IF (FREE_BEFORE.OR.FREE_AFTER) THEN
	    JPT = JPT_STA
	    GOTO 50
40	    JPT = NXT(JPT)
50	    PT_SEEN(JPT) = .FALSE.
	    IF (JPT.NE.JPT_FIN) GOTO 40
	  END IF

55	  IF (IPT.NE.IPTFIN) GOTO 20

60	  IF (IPT.NE.IPTFIN) GOTO 10
	  IF (IN_RUN) GOTO 30
70	CONTINUE
 
	END
