C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-08-20 17:19:28.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION ALLOCATE_MEMORY()

***	MODULE	ALLOCATE_MEMORY
***	IDENT	20AU92

C	Copyright : Laser-Scan Ltd., Cambridge, England

CMOD	Converted to use Point Accuracy Codes		ACM 01-Dec-1988
CMOD	Introduced FTR_LAYER for new /LCP qualifier	ACM 21-Mar-1988
CMOD	Changed NWT record size from *1 to *2		ACM 17-Aug-1987
CMOD	Made a function, ILINKSTAT file stuff removed.	TJH 27-May-1987

C	Created   : ACM					       Jan 1986

	IMPLICIT NONE

C Parameters
	INCLUDE		'($SSDEF)'

	INCLUDE		'LSL$CMNILINK:ILINKMSG.PAR'

C Commons
	INCLUDE		'LSL$CMNILINK:ILINK.CMN'

C Workspace
	INTEGER*4	N_PAGES		! # pages requested
	INTEGER*4	STORE_SIZE	! workspace size in bytes
	INTEGER*4	RETADR(2)	! ends of store alloc, in bytes
	INTEGER*4	PT_SIZE		! PT array size in bytes
	INTEGER*4	CC_SIZE		! CC array size in bytes
	INTEGER*4	PT_DST_SIZE	!      "     "   "   "
	INTEGER*4	PT_PR_FTR_SIZE	!      "     "   "   "
	INTEGER*4	MINSQDIST_SIZE
	INTEGER*4	NEAREST_SIZE
	INTEGER*4	NEAREST_INV_SIZE
	INTEGER*4	NXT_SIZE
	INTEGER*4	PRV_SIZE
	INTEGER*4	PDAT_SIZE
	INTEGER*4	QDAT_SIZE
	INTEGER*4	PT_SEEN_SIZE
	INTEGER*4	IN_FTR_ADDR_SIZE
	INTEGER*4	IN_FTR_STATUS_SIZE
	INTEGER*4	FTR_PTS_SIZE
	INTEGER*4	FTR_START_SIZE
	INTEGER*4	FTR_DAT_SIZE
	INTEGER*4	FTR_ORIG_PR_FTR_SIZE
	INTEGER*4	FTR_INFTR_SIZE
	INTEGER*4	HEADSHR_SIZE
	INTEGER*4	SHR_SIZE
	INTEGER*4	FTR_IFC2_SIZE
	INTEGER*4	FTR_LAYER_SIZE
	INTEGER*4	PNT_FTR_SIZE
	INTEGER*4	WORKSPACE_SIZE
	INTEGER*4	NPT_SIZE
	INTEGER*4	NWT_SIZE
	INTEGER*4	NHT_SIZE
	INTEGER*4	BASE_NODE_SIZE
	INTEGER*4	NOD_ADDR_SIZE
	INTEGER*4	HEADARM_SIZE
	INTEGER*4	ARM_SIZE
	INTEGER*4	FTR_NDS_SIZE

C Functions
	INTEGER*4	SYS$EXPREG

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Allocates memory according to input file size and process
C	required.
C
C	Function returns set to SS$_NORMAL if all is well
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

	ALLOCATE_MEMORY = SS$_NORMAL

C Set up basic dimensions according to process required

	IF (NEED_DATA_PER_POINT) THEN
	  IF (HAD_LLJOIN.OR.HAD_MERGE) THEN
	    MAXPTS_CMN = 2*MAXPTS_CMN+2*MAXINFTRS_CMN*MAX(BPF,1.0)
	  ELSE
	    MAXPTS_CMN = MAXPTS_CMN+2*MAXINFTRS_CMN*MAX(BPF,1.0)
	  END IF
C The following means of estimating the maximum required number of
C output features is in fact over generous, because MAXINFTRS_CMN
C counts ALL input features, whether they are selected for processing
C or not. It would be more efficient (though I havn't got time to do
C it right now, and this mat not be very important) to keep a separate
C count o fthe number of input features actually selected for processing
	  MAXOUTFTRS_CMN = (BPF+1)*MAXINFTRS_CMN
	  MAXNODES_CMN = 2*MAXOUTFTRS_CMN
	  MAXARMS_CMN = MAXNODES_CMN
	  MAXSHRS_CMN = MAXOUTFTRS_CMN
	ELSE IF (NEED_DATA_PER_FEATURE) THEN
	  MAXPTS_CMN = 1
	  MAXOUTFTRS_CMN = (BPF+1)*MAXINFTRS_CMN
	  MAXNODES_CMN = 2*MAXOUTFTRS_CMN
	  MAXARMS_CMN = MAXNODES_CMN
	  MAXSHRS_CMN = 1
	ELSE
	  MAXPTS_CMN = 1
	  MAXOUTFTRS_CMN = 1
	  MAXNODES_CMN = 1
	  MAXARMS_CMN = 1
	  MAXSHRS_CMN = 1
	END IF

C Set up array sizes

	PT_SIZE			 = 8 * MAXPTS_CMN
	CC_SIZE			 = 4 * MAXPTS_CMN
	PT_DST_SIZE		 = 4 * MAXPTS_CMN
	PT_PR_FTR_SIZE		 = 4 * MAXPTS_CMN
	MINSQDIST_SIZE		 = 4 * MAXPTS_CMN
	NEAREST_SIZE		 = 4 * MAXPTS_CMN
	NEAREST_INV_SIZE	 = 4 * MAXPTS_CMN
	NXT_SIZE		 = 4 * MAXPTS_CMN
	PRV_SIZE		 = 4 * MAXPTS_CMN
	PDAT_SIZE		 = 1 * MAXPTS_CMN
	QDAT_SIZE		 = 1 * MAXPTS_CMN
	PT_SEEN_SIZE		 = 1 * MAXPTS_CMN

	IN_FTR_ADDR_SIZE	 = 4 * MAXINFTRS_CMN
	IN_FTR_STATUS_SIZE	 = 1 * MAXINFTRS_CMN

	FTR_PTS_SIZE		 = 8 * MAXOUTFTRS_CMN
	FTR_START_SIZE		 = 4 * MAXOUTFTRS_CMN
	FTR_NDS_SIZE		 = 8 * MAXOUTFTRS_CMN
	FTR_DAT_SIZE		 = 8 * MAXOUTFTRS_CMN
	FTR_ORIG_PR_FTR_SIZE	 = 4 * MAXOUTFTRS_CMN
	FTR_INFTR_SIZE		 = 4 * MAXOUTFTRS_CMN
	HEADSHR_SIZE		 = 4 * MAXOUTFTRS_CMN
	FTR_IFC2_SIZE		 = 2 * MAXOUTFTRS_CMN
	FTR_LAYER_SIZE		 = 2 * MAXOUTFTRS_CMN
	PNT_FTR_SIZE		 = 1 * MAXOUTFTRS_CMN

	WORKSPACE_SIZE		 = 48 * MAXNODES_CMN
	NPT_SIZE		 = 8 * MAXNODES_CMN
	NWT_SIZE		 = 2 * MAXNODES_CMN
C	NHT_SIZE		 = 4 * MAXNODES_CMN
	NOD_ADDR_SIZE		 = 8 * MAXNODES_CMN
	BASE_NODE_SIZE		 = 4 * MAXNODES_CMN
	HEADARM_SIZE		 = 4 * MAXNODES_CMN

	SHR_SIZE		 = 8 * MAXSHRS_CMN

	ARM_SIZE		 = 8 * MAXARMS_CMN

C Find total storage requirement in bytes

	STORE_SIZE = FIXED_SIZE + CC_SIZE	 + PT_SIZE
     &				+ PT_DST_SIZE	 + PT_PR_FTR_SIZE
     &				+ NEAREST_SIZE	 + NEAREST_INV_SIZE
     &				+ NXT_SIZE	 + PRV_SIZE
     &				+ QDAT_SIZE	 + PDAT_SIZE
     &				+ MINSQDIST_SIZE + PT_SEEN_SIZE

     &				+ IN_FTR_ADDR_SIZE      + FTR_DAT_SIZE
     &				+ IN_FTR_STATUS_SIZE    + FTR_PTS_SIZE
     &				+ FTR_ORIG_PR_FTR_SIZE  + FTR_INFTR_SIZE
     &				+ FTR_IFC2_SIZE         + FTR_LAYER_SIZE
     &				+ FTR_NDS_SIZE	        + FTR_START_SIZE
     &				+ HEADSHR_SIZE	        + PNT_FTR_SIZE

     &				+ WORKSPACE_SIZE
     &				+ NPT_SIZE		+ NWT_SIZE
     &				+ NOD_ADDR_SIZE		+ HEADARM_SIZE
     &				+ BASE_NODE_SIZE	! + NHT_SIZE

     &				+ SHR_SIZE

     &				+ ARM_SIZE 

C Allocate workspace

	N_PAGES = (STORE_SIZE-1)/512+1
	ALLOCATE_MEMORY = SYS$EXPREG(%VAL(N_PAGES),RETADR,,)

C Find space successfully allocated

	STORE_SIZE = RETADR(2)-RETADR(1)+1

C If the full amount could not be allocated then give up

	IF (.NOT.ALLOCATE_MEMORY) THEN
	  CALL LSL_PUTMSG(ILINK__SPACELIM,STORE_SIZE)
	  CALL LSL_ADDMSG(ALLOCATE_MEMORY)
	  GOTO 10
	END IF

C Set up array start-addreses

	PT_START		= RETADR(1)
	CC_START		= PT_START 	    + PT_SIZE
	PT_DST_START		= CC_START 	    + CC_SIZE
	PT_PR_FTR_START		= PT_DST_START 	    + PT_DST_SIZE
	MINSQDIST_START		= PT_PR_FTR_START   + PT_PR_FTR_SIZE
	NEAREST_START		= MINSQDIST_START   + MINSQDIST_SIZE
	NEAREST_INV_START	= NEAREST_START     + NEAREST_SIZE
	NXT_START		= NEAREST_INV_START + NEAREST_INV_SIZE
	PRV_START		= NXT_START 	    + NXT_SIZE
	PDAT_START		= PRV_START 	    + PRV_SIZE
	QDAT_START		= PDAT_START 	    + PDAT_SIZE
	PT_SEEN_START		= QDAT_START 	    + QDAT_SIZE
	IN_FTR_ADDR_START	= PT_SEEN_START     + PT_SEEN_SIZE
	IN_FTR_STATUS_START	= IN_FTR_ADDR_START + IN_FTR_ADDR_SIZE

	FTR_PTS_START		= IN_FTR_STATUS_START
     &						  + IN_FTR_STATUS_SIZE

	FTR_START_START		= FTR_PTS_START   + FTR_PTS_SIZE
	FTR_DAT_START		= FTR_START_START + FTR_START_SIZE
	FTR_ORIG_PR_FTR_START	= FTR_DAT_START   + FTR_DAT_SIZE

	FTR_INFTR_START		= FTR_ORIG_PR_FTR_START
     &						  + FTR_ORIG_PR_FTR_SIZE

	HEADSHR_START		= FTR_INFTR_START + FTR_INFTR_SIZE
	SHR_START		= HEADSHR_START   + HEADSHR_SIZE
	FTR_IFC2_START		= SHR_START       + SHR_SIZE
	PNT_FTR_START		= FTR_IFC2_START  + FTR_IFC2_SIZE
	WORKSPACE_START		= PNT_FTR_START   + PNT_FTR_SIZE
	NPT_START		= WORKSPACE_START + WORKSPACE_SIZE
	NWT_START		= NPT_START 	  + NPT_SIZE
C	NHT_START		= NWT_START 	  + NWT_SIZE
	BASE_NODE_START		= NWT_START 	  + NWT_SIZE
	NOD_ADDR_START		= BASE_NODE_START + BASE_NODE_SIZE
	HEADARM_START		= NOD_ADDR_START  + NOD_ADDR_SIZE
	ARM_START		= HEADARM_START   + HEADARM_SIZE
	FTR_NDS_START		= ARM_START 	  + ARM_SIZE
	FTR_LAYER_START		= FTR_NDS_START   + FTR_NDS_SIZE

10	IF (ALLOCATE_MEMORY) ALLOCATE_MEMORY = SS$_NORMAL

	RETURN
	END

