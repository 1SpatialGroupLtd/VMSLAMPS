C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-04-28 18:59:26.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE THIN(P,NIN,IP,NOUT,TOL)

***	MODULE	THIN
***	IDENT	28AP92

C	Copyright Laser-Scan Ltd, Cambridge, England
C	Author    ACM 					Feb 1986

	IMPLICIT  NONE

C Parameters in
	INTEGER*4	NIN		! No. of pts in P
	REAL*4		P(2,NIN)	! line to be thinned
	REAL*4		TOL		! max dev from original line

C Parameters out
	INTEGER*4	IP(NIN)		! indices of P pts retained
	INTEGER*4	NOUT		! num of P pts retained

C Workspace
	INTEGER*4	I,IMAX
	INTEGER*4	LO,HI		! indices into W
	REAL*4		PX,PY		! pt P
	REAL*4		AX,AY,BX,BY	! pts A & B
	REAL*4		ABX,ABY		! vec from A to B
	REAL*4		DX,DY
	REAL*4		DIST,MAXDIST
	REAL*4		SQDIST,MAXSQDIST,SQLEN,SQTOL

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	IP returns indices of P pts remaining after as many points from
C	line P as possible have been removed so that the distance of
C	the final line from original line P is never greater than TOL.
C
C	Line end-points are unchanged
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

	SQTOL = TOL*TOL
	LO = 1
	HI = NIN
	IP(LO) = 1
	IP(HI) = NIN
	IF (HI.LT.2) GOTO 40

	AX = P(1,IP(LO))
	AY = P(2,IP(LO))

C Find P index from LO to HI of a pt furthest from line A -> B, or
C furthest from point A if A = B

10	BX = P(1,IP(HI))
	BY = P(2,IP(HI))

	MAXDIST = 0
	MAXSQDIST = 0
	ABX = BX-AX
	ABY = BY-AY
	SQLEN = ABX*ABX + ABY*ABY

C	IF (ABS(SQLEN).GT.1E-5) THEN		! A .ne. B
C
	IF (ABS(SQLEN).GT.SQTOL) THEN		! A .ne. B
	  DO 20 I = IP(LO)+1, IP(HI)-1
	    DIST = ABS( (P(1,I)-AX)*ABY - (P(2,I)-AY)*ABX )
	    IF (DIST.LE.MAXDIST) GOTO 20

	    MAXDIST = DIST
	    IMAX = I
20	  CONTINUE

	  MAXSQDIST = MAXDIST*MAXDIST/SQLEN
	ELSE					! A .eq. B
	  DO 25 I = IP(LO)+1,IP(HI)-1
	    DX = P(1,I)-AX
	    DY = P(2,I)-AY
	    SQDIST = DX*DX + DY*DY
	    IF (SQDIST.LE.MAXSQDIST) GOTO 25

	    MAXSQDIST = SQDIST
	    IMAX = I
25	  CONTINUE
	ENDIF

30	IF (MAXSQDIST.GT.SQTOL) THEN
	  HI = HI-1
	  IP(HI) = IMAX
	  IF (HI.EQ.LO) GOTO 40		! return
	ELSE
	  LO = LO+1
	  IP(LO) = IP(HI)
	  IF (IP(LO).EQ.NIN) GOTO 40	! return

	  AX = P(1,IP(LO))
	  AY = P(2,IP(LO))
	  HI = HI+1
	ENDIF

	GOTO 10

40	NOUT = LO

C If only 2 pts left and these are equal then set NOUT = 1

	IF (NOUT.EQ.2) THEN
	  IF (P(1,IP(1)).EQ.P(1,IP(2)) .AND.
     &	      P(2,IP(1)).EQ.P(2,IP(2))) NOUT = 1
	ENDIF

	END
 
