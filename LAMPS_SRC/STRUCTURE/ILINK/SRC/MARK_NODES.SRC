	SUBROUTINE MARK_NODES(	NXT,NEAREST,PT_PR_FTR,PDAT,FTR_PTS,
     &				MAXPTS,MAXOUTFTRS)
 
***	IDENT	29MY87
***	MODULE	MARK_NODES
 
C	Copyright : Laser-Scan Laboratories Ltd., Cambridge, England
C	Created   : ACM					Mar 1986
 
	IMPLICIT NONE
 
C Data in
	INTEGER*4	MAXPTS,MAXOUTFTRS
	INTEGER*4	NXT(MAXPTS)
	INTEGER*4	NEAREST(MAXPTS)
	INTEGER*4	PT_PR_FTR(MAXPTS)
	INTEGER*4	FTR_PTS(2,MAXOUTFTRS)

	LOGICAL*1	PDAT(MAXPTS)

	INCLUDE		'LSL$CMNILINK:ILINK.CMN'
 
C Workspace
	INTEGER*4	IPTSTA,IPTFIN		! ftr end pt PT indices
	INTEGER*4	IPT,IPTNXT		! consec pty indices
	INTEGER*4	JPT,JPTNXT		! consec pt indices
	INTEGER*4	I_PR_FTR		! pr-ftr indices
	INTEGER*4	J_PR_FTR,J_PR_FTRNXT	! pr-ftr indices
	LOGICAL  	CLOSED			! closed ftr? 
	LOGICAL  	CONTINUOUS		! mapping continuous?

C Functions
	BYTE		LTEQGT			! priority ordering

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Mark every point as "at a node" when it is connected and it is
C	at a discontinuity in connected-to line index or connected-to
C	line contiguity
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

	CALL VIOCLR(PDAT,N_PTS)		! set PDAT = .FALSE.

	DO 30 I_PR_FTR = 1,N_PR_FTRS

	  IPTSTA = FTR_PTS(1,I_PR_FTR)
	  IPTFIN = FTR_PTS(2,I_PR_FTR)
	  IF (IPTSTA.EQ.NIL.OR.IPTFIN.EQ.NIL) GOTO 30	! ftr deleted

	  CLOSED = NXT(IPTFIN).EQ.IPTSTA

	  PDAT(IPTSTA) = .TRUE.
	  JPT = NEAREST(IPTSTA)
	  IF (JPT.NE.NIL) PDAT(JPT) = .TRUE.

	  IF (IPTSTA.EQ.IPTFIN) GOTO 30		! single pt ftr

	  IF (.NOT.CLOSED) THEN
	    PDAT(IPTFIN) = .TRUE.
	    JPT = NEAREST(IPTFIN)
	    IF (JPT.NE.NIL) PDAT(JPT) = .TRUE.
	  END IF

	  IPT = IPTSTA
	  JPT = NEAREST(IPT)

	  IF (JPT.EQ.NIL) THEN
	    J_PR_FTR = NIL
	  ELSE
	    J_PR_FTR = PT_PR_FTR(JPT)
	  END IF
	  GOTO 20

10	  IPT = IPTNXT
	  JPT = JPTNXT
	  J_PR_FTR = J_PR_FTRNXT

20	  IPTNXT = NXT(IPT)
	  JPTNXT = NEAREST(IPTNXT)

	  IF (JPTNXT.EQ.NIL) THEN
	    J_PR_FTRNXT = NIL
	  ELSE
	    J_PR_FTRNXT = PT_PR_FTR(JPTNXT)
	  END IF

C If at discontinuity (in connected-to ftr index or in connected-to ftr
C contiguity), then mark pair to either side of discontinuity as at a
C node
	  IF (J_PR_FTR.EQ.J_PR_FTRNXT) THEN
	    IF (J_PR_FTR.EQ.NIL) THEN
	      CONTINUOUS = .TRUE.		! non-aligned section
	    ELSE IF (JPT.NE.NIL.AND.JPTNXT.NE.NIL) THEN
	      CONTINUOUS = NXT(JPT).EQ.JPTNXT.OR.
     &	                   NXT(JPTNXT).EQ.JPT.OR.
     &	                   JPT.EQ.JPTNXT	! jpts same or joined
	    END IF
	  ELSE
	    CONTINUOUS = .FALSE.
	  END IF
	  
	  IF (.NOT.CONTINUOUS) THEN

	    IF (JPT.NE.NIL) THEN
	      PDAT(IPT) = .TRUE.
	      PDAT(JPT) = .TRUE.
	    END IF

	    IF (JPTNXT.NE.NIL) THEN
	      PDAT(IPTNXT) = .TRUE.
	      PDAT(JPTNXT) = .TRUE.
	    END IF

	  END IF
 
25	  IF (IPTNXT.NE.IPTFIN) GOTO 10		! loop for next pt

C If closed ftr then check IPTFIN

	  IF (CLOSED.AND.IPTFIN.NE.IPTSTA) THEN
	    IPTFIN = IPTSTA
	    GOTO 25
	  END IF

30	CONTINUE				! loop for next ftr

C Make sure all pts are marked up correctly

	DO 50 I_PR_FTR = 1,N_PR_FTRS

	  IPTSTA = FTR_PTS(1,I_PR_FTR)
	  IPTFIN = FTR_PTS(2,I_PR_FTR)
	  IF (IPTSTA.EQ.NIL.OR.IPTFIN.EQ.NIL) GOTO 50	! ftr deleted

	  IPT = IPTSTA
	  GOTO 45

40	  IPT = NXT(IPT)
45	  JPT = NEAREST(IPT)
	  IF (JPT.NE.NIL) THEN
	    IF (PDAT(JPT)) PDAT(IPT) = .TRUE.
	  END IF
	  IF (IPT.NE.IPTFIN) GOTO 40

50	CONTINUE

	END
 

