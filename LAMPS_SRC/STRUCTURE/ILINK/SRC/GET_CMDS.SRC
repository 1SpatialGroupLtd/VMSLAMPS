C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1997-12-23 12:26:00.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION GET_CMDS()

***	MODULE	GET_CMDS
***	IDENT	23DE97

C	Copyright : Laser-Scan Ltd., Cambridge, England
C
CMOD1585 Add /KEEP=COLINEAR flag                       MJGW 23-Dec-1997
C
CMOD1357 Issue TOOMNYLAYERS warning if there are too many
C	 layers						 JB 22-Apr-1994
C
CMOD1304 Add /KEEP=PARENT				 JB 13-Oct-1993
C
CMOD1293 Add /SYMBOL qualifier for the LPJOIN process to enable
C	 symbol (point) features to be moved onto line features
C	 (On by default, turn off with /NOSYMBOL)	 JB 14-Sep-1993
C
CMOD1232 Add /WARNING					 JB 25-May-1993
CMOD1210 Set input revision level for output file	PGH 22-Mar-1993
CMOD1132 Add /KEEP=FSN					 JB 07-Aug-1992
CMOD	 Add /MINLEN qualifier			 	 JB 18-Nov-1991
CMOD	 Add /ABSOLUTE qualifier			 JB 06-Nov-1991
CMOD	 Add /MINTOL qualifier			 	 ST 09-Aug-1991
C
CMOD	Restrict BPF to [1,100]				WJJ 12-Feb-1990
CMOD	Made to use untranslated LSL$LITES2CMD		ACM 04-Apr-1989
CMOD	Introduced new /TOL, /PAC and /FREE_ENDS quals	ACM 13-Dec-1988
CMOD	Introduced new /ACP qualifier			ACM 21-Jun-1988
CMOD	Introduced new /LCP qualifier			ACM 21-Mar-1988
CMOD	Introduced /VERIFY, /VRTOL & /LIST qualifiers	ACM 10-Dec-1987
CMOD	Changed to conform with new CLD file		ACM 10-Sep-1987
CMOD	If /STRUCTURE, output file-spec default has
C	extension '.IFJ'				TJH 09-Sep-1987
CMOD	Changed to use INT_RIPPLESORT in place of IRIPPLESORT,
C	so that this can be called from LSLLIB when/if
C	INT_RIPPLESORT is standardised.			ACM 12-Aug-1987
CMOD 2/499 Version number stripped from o/p IFF file	TJH 20-Jul-1987
CMOD	/LITES2 qualifier added				TJH 12-Jun-1987
CMOD	Made a function, ILINKSTAT related qualifiers
C	removed and all error returns via R0. LSLLIB
C	IFF file opening routines used and error messages
C	tidied.						TJH 27-May-1987
C
C	Created   : ACM					       Jan 1986
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Function to decode ILINK command line and to open the IFF input
C	and output files. All errors are reported within the function.
C	Function returns SS$_NORMAL if all is well or one of a variety
C	of LSLLIB or CLI condition values on failure. 
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
	IMPLICIT NONE
C
C Common
	INCLUDE		'LSL$CMNLSL:CLD.CMN'
	INCLUDE		'LSL$CMNLSL:TXTC.CMN'
	INCLUDE		'LSL$CMNLSL:FILENAME.CMN'
	INCLUDE		'LSL$CMNLSL:EXPC.CMN'
	INCLUDE		'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE		'LSL$CMNILINK:ILINK.CMN'
	INCLUDE		'LSL$CMNILINK:ILINKCHAR.CMN'

C Parameters
	INCLUDE		'LSL$CMNILINK:ILINKMSG.PAR'
	INCLUDE		'($SSDEF)'

C Workspace
	INTEGER*4	I		! temporary integer
	INTEGER*4	IERR		! error return code
	INTEGER*4	CREATED(2)	! dummy quadword for IFFINQ
	INTEGER*4	REVISED(2)	! dummy quadword for IFFINQ
	INTEGER*2	NREV		! dummy word for IFFINQ
	INTEGER*4	FILLEN		! temp variable
	INTEGER*4	INDEX(MAX_LONG)	! IARRAY index array
	CHARACTER*128   FILNAM		! temp filename/filespec
	LOGICAL*4	TERMINAL	! SYS$OUTPUT is terminal?

C DCL command decoding stuff
	LOGICAL*4	ABSENT,PRESENT,HAD_QUAL,NEGATED

C Functions
	INTEGER*4	DCL_STARTUP,DCL_QUAL,DCL_FILE,DCL_INT,DCL_REAL
	LOGICAL*4	IFFCREATE	! create/open IFF file for write
	LOGICAL*4	IFFOPEN		! open existing IFF file to read
	LOGICAL*4	TRNALL		! translate logical names
	LOGICAL*4	FLWOPN		! open file for write access

C External
	INTEGER*4	ILINK_CLD
	INTEGER*4	LIST_OUTPUT
	EXTERNAL	ILINK_CLD	! DCL command definitions
	EXTERNAL	LIST_OUTPUT	! /LIST output routine

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C Get command line

	GET_CMDS = DCL_STARTUP('ILINK',.FALSE.,ILINK_CLD,.TRUE.)
	IF (.NOT.GET_CMDS) GOTO 20	! return

C Test for obsolete qualifier

	GET_CMDS = DCL_QUAL('ONEARM',HAD_QUAL,PRESENT,NEGATED,.TRUE.)
	IF (.NOT.GET_CMDS) GOTO 20	! return

	IF (HAD_QUAL) THEN
	   GET_CMDS = SS$_ABORT
	   CALL LSL_PUTMSG (ILINK__OBSOLETE, 'ONEARM')
	   GOTO 20
	ENDIF

C Get /STRUCTURE qualifier next as this affects the default output file
C extension

	GET_CMDS = DCL_QUAL('STRUCTURE',HAD_STRUCTURE,PRESENT,NEGATED,
     &								.TRUE.)
	IF (.NOT.GET_CMDS) GOTO 20	! return

C Get input file-spec

	GET_CMDS = DCL_FILE('INFILE','LSL$IF:IFF.IFF',
     &					ABSENT,.FALSE.,.TRUE.)
	IF (.NOT.GET_CMDS) GOTO 20	! return
	INFILE = FILARY(1)(1:FIL_LEN(1))
	IN_LEN = FIL_LEN(1)

C Check for /LIST[=filespec] next, as LIST file should catch any error
C messages

	GET_CMDS = DCL_QUAL('LIST',HAD_LIST,PRESENT,NEGATED,.TRUE.)
	IF (.NOT.GET_CMDS) GOTO 20

	IF (HAD_LIST) THEN
	  CALL PUTFLN(INFILE(:IN_LEN))	! get default LIST file-spec

	  HAD_NOD =.FALSE.
	  HAD_DEV =.FALSE.
	  HAD_DIR =.FALSE.
	  HAD_NAM= .TRUE.

	  STR_EXT = 'LIS'
	  LEN_EXT = 3
	  CALL EXPFLN(LISTFILE,LIST_LEN)

	  GET_CMDS
     &	  = DCL_FILE('LIST',LISTFILE(:LIST_LEN),ABSENT,.FALSE.,.TRUE.)
	  IF (.NOT.GET_CMDS) GOTO 20

	  IF (.NOT.ABSENT) THEN
	    LISTFILE = FILARY(1)(:FIL_LEN(1))
	    LIST_LEN = FIL_LEN(1)
	  END IF

	  CALL LSL_SET_OUTPUT(LIST_OUTPUT)

	  GET_CMDS = FLWOPN(LISTLUN,LISTFILE(:LIST_LEN),IERR)
	  IF (.NOT.GET_CMDS) GOTO 20
	END IF

C Get /SORTARMS and /VERIFY qualifiers next as these require no output
C file
	GET_CMDS = DCL_QUAL('SORTARMS',HAD_SORTARMS,PRESENT,NEGATED,
     &								.TRUE.)
	IF (.NOT.GET_CMDS) GOTO 20	! return

	GET_CMDS = DCL_QUAL('VERIFY',HAD_VERIFY,PRESENT,NEGATED,.TRUE.)
	IF (.NOT.GET_CMDS) GOTO 20	! return

	IF (.NOT.(HAD_VERIFY.OR.HAD_SORTARMS)) THEN
	  CALL PUTFLN(INFILE(:IN_LEN))	! get default OUTPUT file-spec

	  IF (HAD_STRUCTURE) THEN
	    STR_EXT = 'IFJ'
	    LEN_EXT = 3
	  END IF

	  CALL EXPFLN(FILNAM,FILLEN)

	  GET_CMDS
     &	  = DCL_FILE('OUTFILE',FILNAM(:FILLEN),ABSENT,.FALSE.,.TRUE.)
	  IF (.NOT.GET_CMDS) GOTO 20	! return

	  IF (ABSENT) THEN
	    CALL LSL_PUTMSG(ILINK__MISSOUTFILE)
	    GET_CMDS = SS$_ABORT
	    GOTO 20
	  ENDIF

	  OUTFILE = FILARY(1)(1:FIL_LEN(1))
	  OUT_LEN = FIL_LEN(1)
	END IF

C Check for /ABSOLUTE

	GET_CMDS = DCL_QUAL('ABSOLUTE',HAD_ABS,PRESENT,NEGATED,.TRUE.)
	IF (.NOT.GET_CMDS) GOTO 20	! return

C Check for /LITES2[=filespec]

	GET_CMDS = DCL_QUAL('LITES2',HAD_LITES2,PRESENT,NEGATED,.TRUE.)
	IF (.NOT.GET_CMDS) GOTO 20	! return

	IF (HAD_LITES2) THEN

C Get default LITES2 file-spec. First translate LSL$LITES2CMD.

	  GET_CMDS = TRNALL('LSL$LITES2CMD',LITES2FILE)
	  IF (.NOT.GET_CMDS) THEN
	    CALL LSL_PUTMSG(ILINK__FAILTRLG,'LSL$LITES2CMD')
	    CALL LSL_ADDMSG(GET_CMDS)
	    GOTO 20
	  END IF

C Get input filename from the input file-spec

C - use untranslated LSL$LITES2CMD, as the DCL_FILE routine appears to
C be incapable of substituting the translated name with any user
C specified directory correctly.

	  CALL PUTFLN(INFILE(:IN_LEN))
	  LITES2FILE = 'LSL$LITES2CMD:LCM.LCM'
	  LI_LEN = 21
	  IF (HAD_NAM) THEN
	    LITES2FILE = 'LSL$LITES2CMD:'//STR_NAM(1:LEN_NAM)//'.LCM'
	    LI_LEN = LEN_NAM+18
	  END IF
	  GET_CMDS = DCL_FILE('LITES2',LITES2FILE(:LI_LEN),ABSENT,
     &				.FALSE.,.TRUE.)
	  IF (.NOT.GET_CMDS) GOTO 20

C Transfer the file-spec to our common variable?

	  IF  (.NOT.ABSENT) THEN
	    LITES2FILE = FILARY(1)(:FIL_LEN(1))
	    LI_LEN = FIL_LEN(1)
	  END IF
	END IF

C Check for /ACP

	GET_CMDS = DCL_QUAL('ACP',HAD_ACP,PRESENT,NEGATED,.TRUE.)
	IF (.NOT.GET_CMDS) GOTO 20	! return

C Get /ACP file-spec

	IF (HAD_ACP) THEN
	  GET_CMDS = DCL_FILE('ACP','ACP.ACP;0',ABSENT,.FALSE.,.TRUE.)
	  IF (.NOT.GET_CMDS) GOTO 20	! return
	  IF (ABSENT) THEN
	    ACPFILE = 'ACP.ACP;0'
	  ELSE
	    ACPFILE = FILARY(1)(1:FIL_LEN(1))
	    ACP_LEN = FIL_LEN(1)
	  END IF
	END IF

C Check for /FCP

	GET_CMDS = DCL_QUAL('FCP',HAD_FCP,PRESENT,NEGATED,.TRUE.)
	IF (.NOT.GET_CMDS) GOTO 20	! return

C Get /FCP file-spec

	IF (HAD_FCP) THEN
	  GET_CMDS = DCL_FILE('FCP','FCP.FCP;0',ABSENT,.FALSE.,.TRUE.)
	  IF (.NOT.GET_CMDS) GOTO 20	! return
	  IF (ABSENT) THEN
	    FCPFILE = 'FCP.FCP;0'
	  ELSE
	    FCPFILE = FILARY(1)(1:FIL_LEN(1))
	    FCP_LEN = FIL_LEN(1)
	  END IF
	END IF

C Check for /LCP

	GET_CMDS = DCL_QUAL('LCP',HAD_LCP,PRESENT,NEGATED,.TRUE.)
	IF (.NOT.GET_CMDS) GOTO 20	! return

C Get /LCP file-spec

	IF (HAD_LCP) THEN
	  GET_CMDS = DCL_FILE('LCP','LCP.LCP;0',ABSENT,.FALSE.,.TRUE.)
	  IF (.NOT.GET_CMDS) GOTO 20	! return
	  IF (ABSENT) THEN
	    LCPFILE = 'LCP.LCP;0'
	  ELSE
	    LCPFILE = FILARY(1)(1:FIL_LEN(1))
	    LCP_LEN = FIL_LEN(1)
	  END IF
	END IF

C Check for /FCC

	GET_CMDS = DCL_QUAL('FCC',HAD_FCC,PRESENT,NEGATED,.TRUE.)
	IF (.NOT.GET_CMDS) GOTO 20	! return

C Get /FCC file-spec

	IF (HAD_FCC) THEN
	  GET_CMDS = DCL_FILE('FCC','FCC.FCC;0',ABSENT,.FALSE.,.TRUE.)
	  IF (.NOT.GET_CMDS) GOTO 20	! return
	  IF (ABSENT) THEN
	    FCCFILE = 'FCC.FCC;0'
	  ELSE
	    FCCFILE = FILARY(1)(1:FIL_LEN(1))
	    FCC_LEN = FIL_LEN(1)
	  END IF
	END IF

C Check for /FRT

	GET_CMDS = DCL_QUAL('FRT',HAD_FRT,PRESENT,NEGATED,.TRUE.)
	IF (.NOT.GET_CMDS) GOTO 20	! return

C Get /FRT file-spec

	IF (HAD_FRT) THEN
	  GET_CMDS
     &	  = DCL_FILE('FRT','LSL$FRT:FRT.FRT;0',ABSENT,.FALSE.,.TRUE.)
	  IF (.NOT.GET_CMDS) GOTO 20	! return
	  IF (ABSENT) THEN
	    FRTFILE = 'LSL$FRT:FRT.FRT;0'
	  ELSE
	    FRTFILE = FILARY(1)(1:FIL_LEN(1))
	    FRT_LEN = FIL_LEN(1)
	  END IF
	END IF

C Check for /TOL

	GET_CMDS = DCL_QUAL('TOL',HAD_TOL,PRESENT,NEGATED,.TRUE.)
	IF (.NOT.GET_CMDS) GOTO 20	! return

C Get /TOL file-spec

	IF (HAD_TOL) THEN
	  GET_CMDS = DCL_FILE('TOL','TOL.TOL;0',ABSENT,.FALSE.,.TRUE.)
	  IF (.NOT.GET_CMDS) GOTO 20	! return
	  IF (ABSENT) THEN
	    TOLFILE = 'TOL.TOL;0'
	  ELSE
	    TOLFILE = FILARY(1)(1:FIL_LEN(1))
	    TOL_LEN = FIL_LEN(1)
	  END IF
	END IF

C Check for /PAC

	GET_CMDS = DCL_QUAL('PAC',HAD_PAC,PRESENT,NEGATED,.TRUE.)
	IF (.NOT.GET_CMDS) GOTO 20	! return

C Get /PAC file-spec

	IF (HAD_PAC) THEN
	  GET_CMDS = DCL_FILE('PAC','PAC.PAC;0',ABSENT,.FALSE.,.TRUE.)
	  IF (.NOT.GET_CMDS) GOTO 20	! return
	  IF (ABSENT) THEN
	    PACFILE = 'PAC.PAC;0'
	  ELSE
	    PACFILE = FILARY(1)(1:FIL_LEN(1))
	    PAC_LEN = FIL_LEN(1)
	  END IF
	END IF

C Get any /LAYERS selections

	GET_CMDS = DCL_QUAL('LAYERS',HAD_LAYERS,PRESENT,NEGATED,.TRUE.)
	IF (.NOT.GET_CMDS) GOTO 20	! return
	IF (HAD_LAYERS) THEN
	  GET_CMDS = DCL_INT('LAYERS',.TRUE.)

	  IF (NUMINT.GT.300) THEN
	    GET_CMDS = ILINK__TOOMNYLAYERS
	    CALL LSL_PUTMSG(ILINK__TOOMNYLAYERS, MAXLAYERS)
	  ENDIF

	  IF (.NOT.GET_CMDS) GOTO 20	! return

	  IF (NUMINT.GT.0) THEN
	    CALL INT_RIPPLESORT(IARRAY,INDEX,NUMINT,.TRUE.)
	    DO 10 I = 1,NUMINT
	      IF (IARRAY(I).LT.0.OR.IARRAY(I).GT.32767) THEN
	        GET_CMDS = ILINK__INVALLAY
	        CALL LSL_PUTMSG(GET_CMDS,IARRAY(I))
	        GOTO 20
	      ENDIF

	      LAYER(I) = IARRAY(I)
10	    CONTINUE

	    N_LAYERS = NUMINT
	  ENDIF
	ENDIF

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

C	G E T   P R O C E S S	(/STRUCTURE is already got)

C Get /BREAK qualifier

	GET_CMDS = DCL_QUAL('BREAK',HAD_BREAK,PRESENT,NEGATED,.TRUE.)
	IF (.NOT.GET_CMDS) GOTO 20	! return

C Get /FREE_ENDS = (FC:n, LAYER:n) qualifier

	HAD_FREE_ENDS_LAYER = .FALSE.
	HAD_FREE_ENDS = .FALSE.

	GET_CMDS = DCL_QUAL(
     &	  'FREE_ENDS',HAD_FREE_ENDS,PRESENT,NEGATED,.TRUE.)
	IF (.NOT.GET_CMDS) GOTO 20	! return

C - If had this qualifier, check for arguments

	IF (HAD_FREE_ENDS) THEN

C - Get free-ends feature code

	  GET_CMDS = DCL_QUAL('FREE_ENDS.FC',HAD_QUAL,PRESENT,NEGATED,
     &	    .TRUE.)
	  IF (GET_CMDS.NE.SS$_NORMAL) RETURN
	  IF (HAD_QUAL) THEN
	    GET_CMDS = DCL_INT('FC',.TRUE.)
	    IF (GET_CMDS.NE.SS$_NORMAL) RETURN
	    FREE_ENDS_FC = IARRAY(1)
	    HAD_FREE_ENDS_LAYER = .TRUE.
	  ELSE
	    FREE_ENDS_FC = 0
	  END IF

C - Get free-ends layer number

	  GET_CMDS
     &	  = DCL_QUAL('FREE_ENDS.LAYER',HAD_QUAL,PRESENT,NEGATED,.TRUE.)
	  IF (GET_CMDS.NE.SS$_NORMAL) RETURN
	  IF (HAD_QUAL) THEN
	    GET_CMDS = DCL_INT('LAYER',.TRUE.)
	    IF (GET_CMDS.NE.SS$_NORMAL) RETURN
	    FREE_ENDS_LAYER = IARRAY(1)
	    HAD_FREE_ENDS_LAYER = .TRUE.
	  ELSE

C - Will be set later to highest layer in input IFF +1

	    FREE_ENDS_LAYER = 0
	  ENDIF
	ENDIF

C Get /KEEP qualifier

	HAD_KEEP	  = .FALSE.
	HAD_KEEP_COLINEAR = .FALSE.
	HAD_KEEP_FSN	  = .FALSE.
	HAD_KEEP_PARENT   = .FALSE.

	GET_CMDS = DCL_QUAL('KEEP',HAD_KEEP,PRESENT,NEGATED,.TRUE.)
	IF (.NOT.GET_CMDS) GOTO 20			! return

C - If had this qualifier, check for arguments

	IF (HAD_KEEP) THEN

C - Get KEEP=FSN

	  GET_CMDS = DCL_QUAL('KEEP.FSN',HAD_QUAL,PRESENT,NEGATED,.TRUE.)
	  IF (GET_CMDS.NE.SS$_NORMAL) RETURN
C
	  IF (HAD_QUAL) THEN
C	    GET_CMDS = DCL_INT('FSN',.TRUE.)
C	    IF (GET_CMDS.NE.SS$_NORMAL) RETURN
C
C	    KEEP_FSN = IARRAY(1)
	    HAD_KEEP_FSN = .TRUE.
C	  ELSE
C	    KEEP_FSN = 1
	  ENDIF
C
C - Get KEEP=PARENT

	  GET_CMDS = DCL_QUAL('KEEP.PARENT',HAD_QUAL,PRESENT,NEGATED,.TRUE.)
	  IF (GET_CMDS.NE.SS$_NORMAL) RETURN
C
	  IF (HAD_QUAL) THEN
C	    GET_CMDS = DCL_INT('PARENT',.TRUE.)
C	    IF (GET_CMDS.NE.SS$_NORMAL) RETURN
C
C	    KEEP_PARENT = IARRAY(1)
	    HAD_KEEP_PARENT = .TRUE.
C	  ELSE
C	    KEEP_PARENT = 1
	  ENDIF
C
C - Get KEEP=COLINEAR

	  GET_CMDS = DCL_QUAL('KEEP.COLINEAR',HAD_QUAL,PRESENT,NEGATED,.TRUE.)
	  IF (GET_CMDS.NE.SS$_NORMAL) RETURN
C
	  IF (HAD_QUAL) HAD_KEEP_COLINEAR = .TRUE.
C
	ENDIF
C
C Get /LLJOIN qualifier

	GET_CMDS = DCL_QUAL('LLJOIN',HAD_LLJOIN,PRESENT,NEGATED,.TRUE.)
	IF (.NOT.GET_CMDS) GOTO 20	! return

C Get /LPJOIN qualifier

	GET_CMDS = DCL_QUAL('LPJOIN',HAD_LPJOIN,PRESENT,NEGATED,.TRUE.)
	IF (.NOT.GET_CMDS) GOTO 20	! return

C Get /MERGE qualifier

	GET_CMDS = DCL_QUAL('MERGE',HAD_MERGE,PRESENT,NEGATED,.TRUE.)
	IF (.NOT.GET_CMDS) GOTO 20	! return

C Get /PPJOIN qualifier

	GET_CMDS = DCL_QUAL('PPJOIN',HAD_PPJOIN,PRESENT,NEGATED,.TRUE.)
	IF (.NOT.GET_CMDS) GOTO 20	! return

C Check that some process has been specified

	IF (.NOT.(HAD_BREAK.OR.HAD_FREE_ENDS.OR.HAD_LLJOIN.OR.
     &	     HAD_LPJOIN.OR.HAD_MERGE.OR.
     &	     HAD_PPJOIN.OR.HAD_SORTARMS.OR.HAD_STRUCTURE)) THEN
	  GET_CMDS = ILINK__NOPROCESS
	  CALL LSL_PUTMSG(GET_CMDS)
	  GOTO 20			! return
	END IF

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

C	G E T   O T H E R   Q U A L I F I E R S

C Get /BPF qualifier (average number of breaks per feature)

	GET_CMDS = DCL_QUAL('BPF',HAD_BPF,PRESENT,NEGATED,.TRUE.)
	IF (.NOT.GET_CMDS) GOTO 20	! return
	IF (HAD_BPF) THEN
	  GET_CMDS = DCL_REAL('BPF',.TRUE.)
	  IF (.NOT.GET_CMDS) GOTO 20	! return
	  IF (RARRAY(1).GE.1.0 .AND. RARRAY(1).LE.100) THEN
	    BPF = RARRAY(1)
	  ELSE
	    GET_CMDS = ILINK__INVALBPF
	    CALL LSL_PUTMSG(GET_CMDS)
	    GOTO 20
	  END IF
	ELSE
	  BPF = 2.0			! default
	END IF

C Get /JNTOL qualifier (join-tolerance)

	GET_CMDS = DCL_QUAL('JNTOL',HAD_JNTOL,PRESENT,NEGATED,.TRUE.)
	IF (.NOT.GET_CMDS) GOTO 20	! return

	IF (HAD_JNTOL) THEN
	  GET_CMDS = DCL_REAL('JNTOL',.TRUE.)
	  IF (.NOT.GET_CMDS) GOTO 20	! return

	  IF (RARRAY(1).GE.0) THEN
	    JNTOL = RARRAY(1)
	  ELSE
	    GET_CMDS = ILINK__INVALJNTOL
	    CALL LSL_PUTMSG(GET_CMDS)
	    GOTO 20
	  END IF
	ELSE
	  JNTOL = ZEROPLUS			! default
	END IF

	JNTOL_PLUS = JNTOL+10*ZEROPLUS
	JNTOL_SQ = JNTOL**2

C Get /EXTOL qualifier (vector extension tolerance)

	GET_CMDS = DCL_QUAL('EXTOL',HAD_EXTOL,PRESENT,NEGATED,.TRUE.)
	IF (.NOT.GET_CMDS) GOTO 20	! return

	IF (HAD_EXTOL) THEN
	  GET_CMDS = DCL_REAL('EXTOL',.TRUE.)
	  IF (.NOT.GET_CMDS) GOTO 20	! return
	  IF (RARRAY(1).GE.0) THEN
	    EXTOL = RARRAY(1)
	  ELSE
	    GET_CMDS = ILINK__INVALEXTOL
	    CALL LSL_PUTMSG(GET_CMDS)
	    GOTO 20
	  END IF
	ELSE
	  EXTOL = JNTOL
	END IF

	EXTOL_SQ = EXTOL**2
	EXJNTOL = MAX(EXTOL,JNTOL)
	EXJNTOL_SQ = EXJNTOL**2

C Get /VRTOL qualifier (minimum join-verification tolerance)

	GET_CMDS = DCL_QUAL('VRTOL',HAD_VRTOL,PRESENT,NEGATED,.TRUE.)
	IF (.NOT.GET_CMDS) GOTO 20	! return

	IF (HAD_VRTOL) THEN
	  GET_CMDS = DCL_REAL('VRTOL',.TRUE.)
	  IF (.NOT.GET_CMDS) GOTO 20	! return
	  IF (RARRAY(1).GE.0.AND.RARRAY(1).LE.JNTOL-ZEROPLUS) THEN
	    VRTOL = RARRAY(1)
	  ELSE
	    GET_CMDS = ILINK__INVALVRTOL
	    CALL LSL_PUTMSG(GET_CMDS)
	    GOTO 20
	  END IF
	ELSE
	  VRTOL = 0			! default
	END IF
	VRTOL_SQ = VRTOL**2

	VER_RANGE = JNTOL-VRTOL

C Get /MINLEN qualifier (minumum line length)

	GET_CMDS = DCL_QUAL('MINLEN',HAD_MINLEN,PRESENT,NEGATED,.TRUE.)
	IF (.NOT.GET_CMDS) GOTO 20	! return

	IF (HAD_MINLEN) THEN
	  GET_CMDS = DCL_REAL('MINLEN',.TRUE.)
	  IF (.NOT.GET_CMDS) GOTO 20	! return
	  IF (RARRAY(1).GE.0.0) THEN
	    MINLEN = RARRAY(1)
	  ELSE
	    GET_CMDS = ILINK__INVALMINLEN
	    CALL LSL_PUTMSG(GET_CMDS)
	    GOTO 20
	  END IF
	END IF

C Get /MINTOL qualifier (minumum point separation to avoid duplicate
C points)

	GET_CMDS = DCL_QUAL('MINTOL',HAD_MINTOL,PRESENT,NEGATED,.TRUE.)
	IF (.NOT.GET_CMDS) GOTO 20	! return

	IF (HAD_MINTOL) THEN
	  GET_CMDS = DCL_REAL('MINTOL',.TRUE.)
	  IF (.NOT.GET_CMDS) GOTO 20	! return
	  IF (RARRAY(1).GE.0.0) THEN
	    MINTOL = RARRAY(1)
	  ELSE
	    GET_CMDS = ILINK__INVALMINTOL
	    CALL LSL_PUTMSG(GET_CMDS)
	    GOTO 20
	  END IF
	END IF

C Get /WARNING qualifier

	GET_CMDS =DCL_QUAL('WARNING',HAD_WARNING,PRESENT,NEGATED,.TRUE.)
	IF (.NOT.GET_CMDS) GOTO 20	! return

C Get /MONITOR qualifier

	GET_CMDS =DCL_QUAL('MONITOR',HAD_MONITOR,PRESENT,NEGATED,.TRUE.)
	IF (.NOT.GET_CMDS) GOTO 20	! return

C Get /PARENT qualifier

	GET_CMDS = DCL_QUAL('PARENT',HAD_PARENT,PRESENT,NEGATED,.TRUE.)
	IF (.NOT.GET_CMDS) GOTO 20	! return

C Get /PROJECT qualifier

	GET_CMDS =DCL_QUAL('PROJECT',HAD_PROJECT,PRESENT,NEGATED,.TRUE.)
	IF (.NOT.GET_CMDS) GOTO 20	! return
	IF (HAD_TOL) HAD_PROJECT = .TRUE.

C Get /PME qualifier

C	GET_CMDS = DCL_QUAL('PME',HAD_PME,PRESENT,NEGATED,.TRUE.)
C	IF (.NOT.GET_CMDS) GOTO 20	! return

C Get /DEBUG qualifier

	GET_CMDS = DCL_QUAL('DEBUG',HAD_DEBUG,PRESENT,NEGATED,.TRUE.)
	IF (.NOT.GET_CMDS) GOTO 20	! return

C Get /SYMBOL qualifier

	GET_CMDS = DCL_QUAL('SYMBOL',HAD_SYMBOL,PRESENT,NEGATED,.TRUE.)
	IF (.NOT.GET_CMDS) GOTO 20	! return

C Get /VERTEX qualifier

	GET_CMDS = DCL_QUAL('VERTEX',HAD_VERTEX,PRESENT,NEGATED,.TRUE.)
	IF (.NOT.GET_CMDS) GOTO 20	! return

C Get /SHRFC special feature-code for shared-features

	GET_CMDS = DCL_QUAL('SHRFC',HAD_SHRFC,PRESENT,NEGATED,.TRUE.)
	IF (.NOT.GET_CMDS) GOTO 20	! return
	IF (HAD_SHRFC) THEN
	  GET_CMDS = DCL_INT('SHRFC',.TRUE.)
	  IF (.NOT.GET_CMDS) GOTO 20	! return
	  IF (IARRAY(1).LT.0.OR.IARRAY(1).GT.32767) THEN
	    GET_CMDS = ILINK__INVALFC
	    CALL LSL_PUTMSG(GET_CMDS,IARRAY(1))
	    GOTO 20			! return
	  ELSE
	    SHRFC2 = IARRAY(1)
	  END IF
	END IF

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

C Can /MONITOR be used?

	CALL TEST_TERM('SYS$OUTPUT',TERMINAL,IERR)
	IF (.NOT.IERR) CALL LSL_PUTMSG(IERR)
	IF (.NOT.TERMINAL) HAD_MONITOR = .FALSE.
	IF (HAD_LIST) HAD_MONITOR = .FALSE.

C Set processing flags

	NEED_DATA_PER_POINT
     &	= HAD_LLJOIN.OR.HAD_LPJOIN.OR.HAD_BREAK.OR.HAD_FREE_ENDS.OR.
     &	  HAD_MERGE
	NEED_DATA_PER_FEATURE = .NOT.HAD_SORTARMS
	NEED_NODATA = HAD_SORTARMS.AND..NOT.HAD_STRUCTURE
	PROCESS_ALL_LAYERS 
     &	= NEED_DATA_PER_FEATURE.AND..NOT.(HAD_LAYERS.OR.HAD_LCP)

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

C	O P E N    I N P U T    F I L E

	IF (.NOT.NEED_NODATA) THEN
	  GET_CMDS = IFFOPEN(INLUN,INFILE(:IN_LEN),,.FALSE.,1)
	  IF (.NOT.GET_CMDS) GOTO 20	! file didn't open OK

C Get the full input file-spec as actually opened

	  CALL IFFINQ(INFILE,IN_LEN,CREATED,REVISED,NREV)
	  IN_OPEN = .TRUE.
	END IF

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

C	O P E N   O U T P U T   F I L E ?

	IF (.NOT.(NEED_NODATA.OR.HAD_VERIFY)) THEN

C Open output file for writing

	  GET_CMDS = IFFCREATE(OUTLUN,OUTFILE(:OUT_LEN),,,.FALSE.)
	  IF (.NOT.GET_CMDS) GOTO 20	! file didn't open OK
	  CALL IFFIRV(1)		! input revision level so get CBs

C Get the full input file-spec as actually opened

	  CALL IFFINQ(OUTFILE,OUT_LEN,CREATED,REVISED,NREV)
	  OUT_OPEN = .TRUE.
	END IF

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

20	IF (GET_CMDS) GET_CMDS = SS$_NORMAL

	RETURN
	END

