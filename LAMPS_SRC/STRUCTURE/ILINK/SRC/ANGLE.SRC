	REAL*8 FUNCTION ANGLE(	IARM,
     &				PT,NXT,PRV,NPT,FTR_PTS,FTR_NDS,ARM,
     &				MAXPTS,MAXOUTFTRS,MAXNODES,MAXARMS)

***	IDENT	16JN88
***	MODULE	ANGLE

C	Copyright : Laser-Scan Laboratories Ltd., Cambridge, England
C	Created   : ACM					Aug 1986

	IMPLICIT NONE

	INCLUDE		'LSL$CMNILINK:ILINK.CMN'

C Data in
	INTEGER*4	IARM		! arm index
	INTEGER*4	MAXPTS,MAXOUTFTRS,MAXNODES,MAXARMS
	INTEGER*4	FTR_PTS(2,MAXOUTFTRS)
	INTEGER*4	FTR_NDS(2,MAXOUTFTRS)
	INTEGER*4	NXT(MAXPTS),PRV(MAXPTS)
	INTEGER*4	ARM(2,MAXARMS)

	REAL*4		PT(2,MAXPTS)
	REAL*4		NPT(2,MAXNODES)

C Workspace
	INTEGER*4	I,J,K
	INTEGER*4	IPT		! point index
	INTEGER*4	IFTR		! link index
	INTEGER*4	INODE		! node index
	INTEGER*4	IPTSTA,IPTFIN	! link start and end pt indices
	INTEGER*4	STANOD,FINNOD	! node inds at either end of ftr

	REAL*8		DX,DY		! vector leaving node

	LOGICAL  	LEAVING		! link leaving node?
	LOGICAL  	ONEVEC		! one vector link?

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Returns orientation of arm IARM away from node, angle measured
C	in radians anticlockwise from the positive X-direction.
C
C	Data-structure must be proper link/node structure here
C
C	Angle for point-features (only) is 0
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

	IFTR = ARM(ARM_FTR,IARM)
	LEAVING = IFTR.GT.0		! ftr leaving or ariving?
	IFTR = ABS(IFTR)

	STANOD = FTR_NDS(1,IFTR)
	FINNOD = FTR_NDS(2,IFTR)
	
	IPTSTA = FTR_PTS(1,IFTR)	! start pt index
	IPTFIN = FTR_PTS(2,IFTR)	! end pt index

	ONEVEC = NXT(IPTSTA).EQ.IPTFIN	! one-vec ftr?

C Angle for single-pt ftrs will always be returned = 0

	IF (IPTSTA.EQ.IPTFIN) THEN
	  ANGLE = 0D0
	  RETURN
	END IF

	IF (ONEVEC) THEN
	  IF (LEAVING) THEN
	    DX = DBLE(NPT(1,FINNOD))-DBLE(NPT(1,STANOD))
	    DY = DBLE(NPT(2,FINNOD))-DBLE(NPT(2,STANOD))
	  ELSE
	    DX = DBLE(NPT(1,STANOD))-DBLE(NPT(1,FINNOD))
	    DY = DBLE(NPT(2,STANOD))-DBLE(NPT(2,FINNOD))
	  END IF
	ELSE IF (LEAVING) THEN
	  DX = DBLE(PT(1,NXT(IPTSTA)))-DBLE(NPT(1,STANOD))
	  DY = DBLE(PT(2,NXT(IPTSTA)))-DBLE(NPT(2,STANOD))
	ELSE
	  DX = DBLE(PT(1,PRV(IPTFIN)))-DBLE(NPT(1,FINNOD))
	  DY = DBLE(PT(2,PRV(IPTFIN)))-DBLE(NPT(2,FINNOD))
	END IF

	IF (DX.EQ.0D0.AND.DY.EQ.0D0) THEN
	  ANGLE = 0D0
	ELSE
	  ANGLE = ATAN2(DY,DX)
	  IF (ANGLE.LE.0D0) ANGLE = ANGLE+DBLE(TWOPI)
	END IF

	END

