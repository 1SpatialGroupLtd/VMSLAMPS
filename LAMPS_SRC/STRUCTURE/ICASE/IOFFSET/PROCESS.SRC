C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-11-24 15:11:54.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE PROCESS(CLOSED,FTRS)
C
***	MODULE PROCESS
***	IDENT 26AU86
C
	IMPLICIT NONE
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England
C Author S. Hancock
C
***	COMMON/LSL$CMNIOFFSET:IOFFSET/
C
	LOGICAL		CLOSED
	INTEGER*4	FTRS
C
	INTEGER*4	TOTPTS	! total input points
	INTEGER*4	OPTR	! pointer to current end of output array
C
	INTEGER*4	FNUM	! feature number ( |CHAIN(I)| )
	INTEGER*4	FDIR	! feature direction ( sign of CHAIN(I) )
C
	REAL*4		D1,D2
	REAL*4		X1,Y1
	REAL*4		X2,Y2
	REAL*4		X3,Y3
	REAL*4		ZL(2)
	INTEGER*4	NOFF
	INTEGER*4	NP
	INTEGER*4	I,J,K
	INTEGER*2	CUR_OFC
	INTEGER*4	OSTART
	LOGICAL*4	REV
C
	FTRS=0
C
C read in all features for chain
C
	TOTPTS=0
	DO 10 I=1,CHNLEN
	FNUM=CHAIN(I)
	FDIR=1
	IF(FNUM.LT.0)THEN
	   FDIR=-1
	   FNUM=-FNUM
	ENDIF
	CALL GETFTR(TOTPTS,FNUM,FDIR)
C
C adjust TOTPTS to allow for last point of each feature being equal to 
C first point of next
C
	TOTPTS=TOTPTS-1
10	CONTINUE
	TOTPTS=TOTPTS+1
C
C process first segment
C
	IF(CLOSED)THEN
C
C first get offset at start of last segment
C
	   D1=WIDTH(ZIFC(TOTPTS-1))
	   D2=D1
	   X1=ZIN(1,TOTPTS-1)
	   Y1=ZIN(2,TOTPTS-1)
	   X2=ZIN(1,TOTPTS)
	   Y2=ZIN(2,TOTPTS)
	   NOFF=2
	   CALL OFFSET
	1  (NOFF,D1,D2,X1,Y1,X2,Y2,X3,Y3,0.0,0.0,ZL,NP,REV)
C
C then get offset point for last seg/first seg
C
	   X1=ZIN(1,TOTPTS-1)
	   Y1=ZIN(2,TOTPTS-1)
	   X2=ZIN(1,1)
	   Y2=ZIN(2,1)
	   X3=ZIN(1,2)
	   Y3=ZIN(2,2)
	   D1=WIDTH(ZIFC(TOTPTS-1))
	   D2=WIDTH(ZIFC(1))
	   NOFF=3
	   CALL OFFSET
	1  (NOFF,D1,D2,X1,Y1,X2,Y2,X3,Y3,ZL(1),ZL(2),ZOUT(1,1),NP,REV)
C
C fudge awkward cases
C
	   IF(NP.EQ.0)THEN
	      ZOUT(1,1)=ZL(1)
	      ZOUT(2,1)=ZL(2)
	   ELSE IF(NP.GT.1)THEN
	      ZOUT(1,1)=ZOUT(1,NP)
	      ZOUT(2,1)=ZOUT(2,NP)
	   ENDIF
	   OPTR=1
	ELSE
C
C for open chains, first output point is offset to (X1,Y1) perpendicular to P1P2
C
	   D1=WIDTH(ZIFC(1))
	   D2=D1
	   X1=ZIN(1,1)
	   Y1=ZIN(2,1)
	   X2=ZIN(1,2)
	   Y2=ZIN(2,2)
	   NOFF=2
	   CALL OFFSET
	1  (NOFF,D1,D2,X1,Y1,X2,Y2,X3,Y3,0.0,0.0,ZOUT(1,1),NP,REV)
	   OPTR=1
	ENDIF
	ZOFC(1)=OFCODE(ZIFC(1))
C
C process interior points
C
	DO 40 I=2,TOTPTS-1
	X1=ZIN(1,I-1)
	Y1=ZIN(2,I-1)
	X2=ZIN(1,I)
	Y2=ZIN(2,I)
	X3=ZIN(1,I+1)
	Y3=ZIN(2,I+1)
	D1=D2
	D2=WIDTH(ZIFC(I))
	NOFF=3
	CALL OFFSET(NOFF,D1,D2,X1,Y1,X2,Y2,X3,Y3,
	1    ZOUT(1,OPTR),ZOUT(2,OPTR),ZOUT(1,OPTR+1),NP,REV)
	DO 35 J=1,NP
	ZOFC(OPTR+J)=OFCODE(ZIFC(I))
35	CONTINUE
	IF(REV.AND.DLOOP)ZOFC(OPTR)=-(1+ZOFC(OPTR))
	OPTR=OPTR+NP
40	CONTINUE
C
C finish off chain
C
	IF(CLOSED)THEN
	   ZOUT(1,OPTR+1)=ZOUT(1,1)
	   ZOUT(2,OPTR+1)=ZOUT(2,1)
	   OPTR=OPTR+1
	ELSE
	   X1=ZIN(1,TOTPTS-1)
	   Y1=ZIN(2,TOTPTS-1)
	   X2=ZIN(1,TOTPTS)
	   Y2=ZIN(2,TOTPTS)
	   D1=D2
	   NOFF=-2
	   CALL OFFSET
	1  (NOFF,D1,D2,X1,Y1,X2,Y2,X3,Y3,0.0,0.0,ZOUT(1,OPTR+1),NP,REV)
	   IF(REV.AND.DLOOP)ZOFC(OPTR)=-(1+ZOFC(OPTR))
	   OPTR=OPTR+NP
	ENDIF
C
C remove reversed segments
C
	IF(DLOOP)CALL REMOVE_REV(OPTR)
C and close if closed
	IF(CLOSED)THEN
	   ZOUT(1,OPTR)=ZOUT(1,1)
	   ZOUT(2,OPTR)=ZOUT(2,1)
	ENDIF
C
C output new features
C
	CUR_OFC=ZOFC(1)
	OSTART=1
	DO 50 I=2,OPTR-1
	IF(ZOFC(I).NE.CUR_OFC)THEN
	   FTRS=FTRS+1
	   CALL PUTFTR(OSTART,I,CUR_OFC)
	   OSTART=I
	   CUR_OFC=ZOFC(I)
	ENDIF
50	CONTINUE
C
C and last feature
C
	FTRS=FTRS+1
	CALL PUTFTR(OSTART,OPTR,CUR_OFC)
C
	RETURN
	END
