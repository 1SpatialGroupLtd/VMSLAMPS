C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-11-24 15:19:56.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION GET_COMMAND
C
***	MODULE	GET_COMMAND
***	IDENT	24NO88
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					SGH	24-Nov-1988
C
C	IEXPAND Program - Get and decode command line
C
	IMPLICIT NONE
C
C Common Blocks
C
***	COMMON/LSL$CMNIOFFSET:IOFFSET/	
***	COMMON/LSL$CMNLSL:CLD/		! DCL command decoding
***	COMMON/LSL$CMNLSL:FILENAME/	! LSLLIB filename expansion
***	COMMON/LSL$CMNLSL:STATUS/	! LSLLIB status flag
C
C Functions called
C
        INTEGER*4       DCL_STARTUP	! looks for command line
	INTEGER*4	DCL_FILE	! reads & parses file title
	INTEGER*4	DCL_QUAL	! looks for specified qualifier
	INTEGER*4	DCL_INT		! read integers
	INTEGER*4	DCL_REAL	! read reals
	INTEGER*4	EXPFLN		! expand filename
C
C Local variables
C
	CHARACTER*80	IN_TEM
	INTEGER*4	OK		! error return
	INTEGER*4	I		! counter
	LOGICAL*4	ABSENT		! set if file param. not found
	LOGICAL*4	LOCAL		! set if qual. is local
	LOGICAL*4	LOCNEG		! set if qual. locally negated
        LOGICAL*4	GOT_PAR
        LOGICAL*4	WHINGE		! set-local error reporting
C
C Command Language Definitions
C
	EXTERNAL	IOFFSET_CLD
C
C Initialisation for command line decoding
C
	WHINGE = .TRUE.			! report errors locally
C
C Get command line. DCL_STARTUP will return SS$NORMAL if all well.
C
	OK=DCL_STARTUP('IOFFSET'	! command verb
     &      ,.FALSE.			! don't split parameter lists
     &      ,IOFFSET_CLD		! CLD module name
     &      ,WHINGE)			! set -local error reporting
        IF(.NOT.OK) GOTO 999
C
C Get input file-name 
C
	IN_TEM='LSL$IF:.IFF'
	OK=DCL_FILE('IN_FILESPEC'	! parameter label
     &		,IN_TEM			! default file-name
     &		,ABSENT			! set if no file-name
     &		,.FALSE.		! don't expect list of files
     &          ,WHINGE)		! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C Transfer file-spec 
C
	IPFILE = FILARY(1)(1:FIL_LEN(1))
	IPLEN = FIL_LEN(1)
C
C Set up the default output filename - the input filename is already in 
C the FILENAME common block, as a result of calling DCL_FILE
C
	HAD_VER = .FALSE.
	OK = EXPFLN(OPFILE,OPLEN)
	IF (.NOT. OK) CALL LSL_PUTMSG(OK)	! just a warning
C
C Get output file-name if it is there
C
	OK=DCL_FILE('OUT_FILESPEC'	! parameter label
     &		,OPFILE(1:OPLEN)	! default is input filename
     &		,ABSENT			! set if no file-name
     &		,.FALSE.		! don't expect list of files
     &          ,WHINGE)		! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C Set file-spec 
C
	IF (.NOT. ABSENT) THEN
	   OPFILE = FILARY(1)(1:FIL_LEN(1))
	   OPLEN = FIL_LEN(1)
	ENDIF
C
C /PARAMETER qualifier
C
	PARFILE='.PAR'
	PARLEN=4
	OK=DCL_QUAL('PARAMETER'		! qual. name
     &        		,GOT_PAR	! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C If we have the qualifier, get the actual filename which is REQUIRED 
C so must be there
C
	IF (GOT_PAR) THEN
	   OK=DCL_FILE('PARAMETER'	! qualifier
     &		,PARFILE(1:PARLEN)	! default file-name
     &		,ABSENT			! set if no file-name
     &		,.FALSE.		! don't expect list of files
     &          ,WHINGE)		! set-local error reporting
	   IF(.NOT.OK) GOTO 999
C
C Set file-spec 
C
	   PARFILE= FILARY(1)(1:FIL_LEN(1))
	   PARLEN = FIL_LEN(1)
	ENDIF
C
C Assign function value
C
999	GET_COMMAND = OK
C
C Return
C
	RETURN
	END
