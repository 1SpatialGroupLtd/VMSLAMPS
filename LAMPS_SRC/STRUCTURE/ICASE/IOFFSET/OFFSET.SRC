C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-11-24 14:26:52.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE OFFSET(N,D1,D2,XA,YA,XB,YB,XC,YC,XL,YL,ZOFF,NP,REV)
C
***	MODULE OFFSET
***	IDENT 26AU86
C
	IMPLICIT NONE
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England
C Author S. Hancock
C
***	COMMON/LSL$CMNIOFFSET:IOFFSET/
C
C generate point(s) offset from point B=(XB,YB) at a distance D1 from AB and
C distance D2 to BC on right of segments AB and AC.
C
C the output points are entered in the array ZOFF
C
C if possible, last point generated should lie on offset to BC
C
C previous point generated is passed to allow checking of reversing direction
C
C N is number of points received - 
C			2 (start of string)
C			-2 (end of string)
C			or 3
C
C NP is set to number of new points generated - this will normally be 1
C but could be 0 (e.g. inside tight corners) or >1 (e.g. outside sharp 
C corners)
C
	INTEGER*4	N
	INTEGER*4	NP
	REAL*4		D1,D2
	REAL*4		XA,YA
	REAL*4		XB,YB
	REAL*4		XC,YC
	REAL*4		ZOFF(2,*)
	REAL*4		XL,YL
	LOGICAL*4	REV
C
	REAL*4		SINE
	REAL*4		DOT
	REAL*4		LEN1,LEN2
	REAL*4		U1,V1		! vector AB
	REAL*4		U2,V2		! vector BC
	REAL*4		U3,V3
	REAL*4		XOFF1,YOFF1
	REAL*4		XOFF2,YOFF2
	REAL*4		XCENT,YCENT
	REAL*4		RADIUS
	REAL*4		ANGLE1,ANGLE2
C
	REAL*4		LINE1(2,2)
	REAL*4		LINE2(2,2)
	REAL*4		POINT(2)
	INTEGER*4	INT
C
	REAL*8		A,B,C,D,E,F
	REAL*8		T,U
	REAL*8		DET
	INTEGER		I
C
	IF(N.EQ.2)THEN
C
C (ZOFF(1,1),ZOFF(2,1)) is offset on right distance D1 to AB at A
C
	   U1=XB-XA
	   V1=YB-YA
	   NP=1
	   LEN1=SQRT(U1*U1+V1*V1)
C
C check not too short
C
	   IF(LEN1.LT.0.0001)THEN
	      PRINT*,'OFFSET - segment of length < 0.0001 ignored'
	      NP=0
	      GOTO 900
	   ENDIF
C
	   ZOFF(1,1)=XA+(V1*D1)/LEN1
	   ZOFF(2,1)=YA-(U1*D1)/LEN1
	   GOTO 900
	ELSE IF(N.EQ.-2)THEN
C
C (ZOFF(1,1),ZOFF(2,1)) is offset on right distance D1 to AB at B
C
	   U1=XB-XA
	   V1=YB-YA
	   NP=1
	   LEN1=SQRT(U1*U1+V1*V1)
C
C check not too short
C
	   IF(LEN1.LT.0.0001)THEN
	      PRINT*,'OFFSET - segment of length < 0.0001 ignored'
	      NP=0
	      GOTO 900
	   ENDIF
C
	   ZOFF(1,1)=XB+(V1*D1)/LEN1
	   ZOFF(2,1)=YB-(U1*D1)/LEN1
	   GOTO 900
	ENDIF
	IF(N.NE.3)THEN
	   PRINT*,'Invalid number of points passed to OFFSET routine'
	   NP=0
	   GOTO 900
	ENDIF
C
C N=3 (usual case)
C
C if offset on both sides is zero, output point is B
C
	IF(D1.EQ.0.0.AND.D2.EQ.0.0)THEN
	   NP=1
	   ZOFF(1,1)=XB
	   ZOFF(2,1)=YB
	   GOTO 900
	ENDIF
	U1=XB-XA
	V1=YB-YA
	U2=XC-XB
	V2=YC-YB
	LEN1=SQRT(U1*U1+V1*V1)
	LEN2=SQRT(U2*U2+V2*V2)
C
C check neither too short
C
	IF(LEN1.LT.0.0001.OR.LEN2.LT.0.0001)THEN
	   PRINT*,'OFFSET - segment of length < 0.0001 ignored'
	   NP=0
	   GOTO 900
	ENDIF
C
C dot product of AB and BC, and sine of angle between them
C
	DOT=U1*U2+V1*V2
	SINE=(U1*V2-U2*V1)/(LEN1*LEN2)
C
	IF(ABS(SINE).LT.0.01)THEN
C
C almost straight - intersection may have problems, so do it here
C
	   NP=1
	   ZOFF(1,1)=XB+(V1*D1)/LEN1
	   ZOFF(2,1)=YB-(U1*D1)/LEN1
	   GOTO 900
	ENDIF
C
C get intersection of offset segments
C
C intersection point, (XI,YI), should satisfy
C
C XI = XL + T*(XB-XA) = XC + (D2/LEN2)*(YC-YB) + U*(XB-XC)
C YI = YL + T*(YB-YA) = YC + (D2/LEN2)*(XB-XC) + U*(YB-YC)
C
C solve these for T and U and consider special cases
C
200	A=U1
	B=U2
	C=V1
	D=V2
	E=XC+V2*(D2/LEN2)-XL
	F=YC-U2*(D2/LEN2)-YL
C
	DET=A*D-B*C
	T=(D*E-B*F)/DET
	U=(A*F-C*E)/DET
C
	NP=1
	ZOFF(1,1)=XL+T*(XB-XA)
	ZOFF(2,1)=YL+T*(YB-YA)
C
C check segment reversal
C
900	REV=.FALSE.
	IF(N.EQ.3)THEN
	   DO 910 I=1,NP
	   U3=ZOFF(1,I)-XL
	   V3=ZOFF(2,I)-YL
	   IF((U1*U3+V1*V3).LT.0.0)REV=.TRUE.
910	   CONTINUE
	ENDIF
	RETURN
	END
