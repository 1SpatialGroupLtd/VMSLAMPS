	SUBROUTINE OFFSET(N,D1,D2,XA,YA,XB,YB,XC,YC,XL,YL,ZOFF,NP,REV,NT)
C
***	MODULE OFFSET
***	IDENT 26AU86
C
	IMPLICIT NONE
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England
C Author S. Hancock
C
***	COMMON/CMN:CLEXP/
C
C generate point(s) offset from point B=(XB,YB) at a distance D1 from AB and
C distance D2 to BC on right of segments AB and AC.
C
C the output points are entered in the array ZOFF
C
C if possible, last point generated should lie on offset to BC
C
C previous point generated is passed to allow checking of reversing direction
C
C N is number of points received - 
C			2 (start of string)
C			-2 (end of string)
C			or 3
C
C NP is set to number of new points generated - this will normally be 1
C but could be 0 (e.g. inside tight corners) or >1 (e.g. outside sharp 
C corners)
C
	INTEGER*4	N
	INTEGER*4	NP
	REAL*4		D1,D2
	REAL*4		XA,YA
	REAL*4		XB,YB
	REAL*4		XC,YC
	REAL*4		ZOFF(2,*)
	REAL*4		XL,YL
	LOGICAL*4	REV
	INTEGER*4	NT
C
	REAL*4		SINE
	REAL*4		DOT
	REAL*4		PAR_TOL
	REAL*4		LEN1,LEN2
	REAL*4		U1,V1		! vector AB
	REAL*4		U2,V2		! vector BC
	REAL*4		U3,V3
	REAL*4		XOFF1,YOFF1
	REAL*4		XOFF2,YOFF2
	REAL*4		XCENT,YCENT
	REAL*4		RADIUS
	REAL*4		ANGLE1,ANGLE2
C
	REAL*4		LINE1(2,2)
	REAL*4		LINE2(2,2)
	REAL*4		POINT(2)
	INTEGER*4	INT
C
	REAL*8		A,B,C,D,E,F
	REAL*8		T,U
	REAL*8		DET
	INTEGER		I
C
	DATA		PAR_TOL/0.1/
C
	IF(N.EQ.2)THEN
	   NT=0
C
C (ZOFF(1,1),ZOFF(2,1)) is offset on right distance D1 to AB at A
C
	   U1=XB-XA
	   V1=YB-YA
	   NP=1
	   LEN1=SQRT(U1*U1+V1*V1)
C
C check not too short
C
	   IF(LEN1.LT.0.0001)THEN
	      PRINT*,'OFFSET - segment of length < 0.0001 ignored'
	      NP=0
	      GOTO 900
	   ENDIF
C
	   ZOFF(1,1)=XA+(V1*D1)/LEN1
	   ZOFF(2,1)=YA-(U1*D1)/LEN1
	   GOTO 900
	ELSE IF(N.EQ.-2)THEN
C
C (ZOFF(1,1),ZOFF(2,1)) is offset on right distance D1 to AB at B
C
	   NT=0
	   U1=XB-XA
	   V1=YB-YA
	   NP=1
	   LEN1=SQRT(U1*U1+V1*V1)
C
C check not too short
C
	   IF(LEN1.LT.0.0001)THEN
	      PRINT*,'OFFSET - segment of length < 0.0001 ignored'
	      NP=0
	      GOTO 900
	   ENDIF
C
	   ZOFF(1,1)=XB+(V1*D1)/LEN1
	   ZOFF(2,1)=YB-(U1*D1)/LEN1
	   GOTO 900
	ENDIF
	IF(N.NE.3)THEN
	   PRINT*,'Invalid number of points passed to OFFSET routine'
	   NP=0
	   GOTO 900
	ENDIF
C
C N=3 (usual case)
C
C if offset on both sides is zero, output point is B
C
	IF(D1.EQ.0.0.AND.D2.EQ.0.0)THEN
	   NP=1
	   ZOFF(1,1)=XB
	   ZOFF(2,1)=YB
	   GOTO 900
	ENDIF
	U1=XB-XA
	V1=YB-YA
	U2=XC-XB
	V2=YC-YB
	LEN1=SQRT(U1*U1+V1*V1)
	LEN2=SQRT(U2*U2+V2*V2)
C
C check neither too short
C
	IF(LEN1.LT.0.0001.OR.LEN2.LT.0.0001)THEN
	   PRINT*,'OFFSET - segment of length < 0.0001 ignored'
	   NP=0
	   GOTO 900
	ENDIF
C
C dot product of AB and BC, and sine of angle between them
C
	DOT=U1*U2+V1*V2
	SINE=(U1*V2-U2*V1)/(LEN1*LEN2)
C
C first case: SINE > TOL	turning left by more than critical angle
C          or SINE > 0, DOT < 0	turning left by more 90 degrees
C
	IF((SINE.GT.PAR_TOL).OR.(SINE.GT.0.0.AND.DOT.LT.0.0))THEN
C
C use at least two points to get round corner - offsets at B to AB and to BC
C plus, if necessary, a number of points on an arc connecting them
C
	   NT=4
C
	   XOFF1=(V1*D1)/LEN1
	   YOFF1=-(U1*D1)/LEN1
	   XOFF2=(V2*D2)/LEN2
	   YOFF2=-(U2*D2)/LEN2
C
C centre of arc is B if D1=D2, otherwise we get it as the intersection
C of the perp. bisector of O1,O2 with B,O1 (if D1>D2) or B,O2 (D1<D2)
C
	   IF(D1.EQ.D2)THEN
	      XCENT=XB
	      YCENT=YB
	      RADIUS=D1
	   ELSE
C
C LINE1 is p.b.
C
	      LINE1(1,1)=XB+(XOFF1+XOFF2)*0.5
	      LINE1(2,1)=YB+(YOFF1+YOFF2)*0.5
	      LINE1(1,2)=LINE1(1,1)+(YOFF1-YOFF2)
	      LINE1(2,2)=LINE1(2,1)+(XOFF2-XOFF1)
C
	      IF(D1.GT.D2)THEN
C
C LINE2 is B,O1
C
	         LINE2(1,1)=XB
	         LINE2(2,1)=YB
	         LINE2(1,2)=XB+XOFF1
	         LINE2(2,2)=YB+YOFF1
	      ELSE
C
C LINE2 is B,O2
C
	         LINE2(1,1)=XB
	         LINE2(2,1)=YB
	         LINE2(1,2)=XB+XOFF2
	         LINE2(2,2)=YB+YOFF2
	      ENDIF
C
	      CALL INTSCT(LINE1,LINE2,POINT,INT)
	      XCENT=POINT(1)
	      YCENT=POINT(2)
	      RADIUS=SQRT((XB+XOFF1-XCENT)**2+(YB+YOFF1-YCENT)**2)
	   ENDIF
C
C get angle from centre to O1 and O2
C
	   ANGLE1=ATAN2(YB+YOFF1-YCENT,XB+XOFF1-XCENT)
	   ANGLE2=ATAN2(YB+YOFF2-YCENT,XB+XOFF2-XCENT)
	   IF(ANGLE2.LT.ANGLE1)ANGLE2=ANGLE2+6.28318
C
C no of points
C
	   NP=2+((ANGLE2-ANGLE1)*5.0)
	   DO 120 I=1,NP-1
	   ZOFF(1,I)=XCENT+RADIUS*COS(ANGLE1+(0.2*(I-1)))
	   ZOFF(2,I)=YCENT+RADIUS*SIN(ANGLE1+(0.2*(I-1)))
120	   CONTINUE
	   ZOFF(1,NP)=XB+XOFF2
	   ZOFF(2,NP)=YB+YOFF2
	   GOTO 900
	ELSE IF(ABS(SINE).LT.PAR_TOL)THEN
	   IF(DOT.GT.0.0)THEN
C
C almost straight on
C
C if offset width is same for both segments, proceed with intersection
C
	      IF(D1.EQ.D2)THEN
	         IF(SINE.LT.0.01)THEN
C
C straight - intersection may have problems, so do it here
C
	            NT=2
	            NP=1
	            ZOFF(1,1)=XB+(V1*D1)/LEN1
	            ZOFF(2,1)=YB-(U1*D1)/LEN1
	            GOTO 900
	         ELSE
	            GOTO 200
	         ENDIF
	      ENDIF
C
C otherwise, generate two points, namely offsets at B from AB and BC
C maybe should check whether we're inside corner or outside first
C
	      NT=3
	      NP=2
	      ZOFF(1,1)=XB+(V1*D1)/LEN1
	      ZOFF(2,1)=YB-(U1*D1)/LEN1
	      ZOFF(1,2)=XB+(V2*D2)/LEN2
	      ZOFF(2,2)=YB-(U2*D2)/LEN2
	      GOTO 900
	   ELSE
C
C almost doubling back
C
C ************************************************************************
C we should probably test the distance between A and C compared with D1+D2
C - if AB and BC are long segments, normal intersection is probably best
C ************************************************************************
C
C since SINE > 0, AB turns right into BC, so we should generate a point
C inside the corner
C
C just set to second offset point for time being
C
	      NT=5
	      NP=1
	      ZOFF(1,1)=XB+(V2*D2)/LEN2
	      ZOFF(2,1)=YB-(U2*D2)/LEN2
	   ENDIF
	   GOTO 900
	ENDIF
C
C usual case - try to get intersection of offset segments
C
C intersection point, (XI,YI), should satisfy
C
C XI = XL + T*(XB-XA) = XC + (D2/LEN2)*(YC-YB) + U*(XB-XC)
C YI = YL + T*(YB-YA) = YC + (D2/LEN2)*(XB-XC) + U*(YB-YC)
C
C solve these for T and U and consider special cases
C
200	A=U1
	B=U2
	C=V1
	D=V2
	E=XC+V2*(D2/LEN2)-XL
	F=YC-U2*(D2/LEN2)-YL
C
	DET=A*D-B*C
	T=(D*E-B*F)/DET
	U=(A*F-C*E)/DET
C
	IF(T.GT.0.0.AND.U.GT.0.0)THEN
	   NT=1
	   NP=1
	   ZOFF(1,1)=XL+T*(XB-XA)
	   ZOFF(2,1)=YL+T*(YB-YA)
	ELSE IF(U.LT.0.0)THEN
C
	   NT=6
	   NP=1
	   ZOFF(1,1)=XL+T*(XB-XA)
	   ZOFF(2,1)=YL+T*(YB-YA)
C
C set to offset at C
C
C	   ZOFF(1,1)=XC+(V2*D2)/LEN2
C	   ZOFF(2,1)=YC-(U2*D2)/LEN2
	ELSE
C
C use intersection point
C
	   NT=7
	   NP=1
	   ZOFF(1,1)=XL+T*(XB-XA)
	   ZOFF(2,1)=YL+T*(YB-YA)
C
C previous attempt - set to offset at B
C
C	   ZOFF(1,1)=XB+(V2*D2)/LEN2
C	   ZOFF(2,1)=YB-(U2*D2)/LEN2
	ENDIF
C
C check segment reversal
C
900	REV=.FALSE.
	IF(N.EQ.3)THEN
	   DO 910 I=1,NP
	   U3=ZOFF(1,I)-XL
	   V3=ZOFF(2,I)-YL
	   IF((U1*U3+V1*V3).LT.0.0)REV=.TRUE.
910	   CONTINUE
	ENDIF
	RETURN
	END
