	LOGICAL FUNCTION READ_PRIO
C
***	IDENT	15MR91
***	MODULE	READ_PRIO
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RJH	03-Sep-1986
C
C	OS RELHT Program - Read the file containing FC priorities
C
C Description
C
C	Each line in the file is of the form
C
C		<n1>	<n2>	<FC range>
C
C	where	n1 is a relative priority starting at 1
C	    	n2 is set to 0 if there is no doubt about the relative 
C			priority, and 1 if there is likely to be a 
C			conflict with other features
C		FC range is a range of feature codes
C
	IMPLICIT NONE
C
C Included Parameter Files
C
***	PARAMETER/HERE:LUN/		! logical unit numbers
***	PARAMETER/HERE:RELHTMSG/	! message definitions
***	PARAMETER/LSL$CMNLSL:LSLLIBMSG/	! LSLLIB message definitions
***	PARAMETER/LSL$CMNLSL:READSTR/	! LSLLIB string terminators
C
C Common Blocks
C
***	COMMON/HERE:CONTROL/		! control variables
***	COMMON/HERE:PRIO_TABLE/		! feature code priority table
C
C Functions called
C
	INTEGER*4	FLROPN		! open file for reading
	INTEGER*4	FLRCLO		! close file open for reading
	INTEGER*4	FLRLIN		! read line from file
	INTEGER*4	READSTR		! read string
	LOGICAL		RDINT		! read integer
	LOGICAL		FC_RANGE	! read FC range
C
C Local Variables
C
	INTEGER*4	L		! current line no.
	INTEGER*4	INP_LEN		! input line length
	INTEGER*4	ERRCOD		! LSLLIB error code
	INTEGER*4	RETCOD		! system error code
	INTEGER*4	STRADR		! address of buffer
	INTEGER*4	PRIO		! current priority
	INTEGER*4	DOUBT		! doubt value
	LOGICAL		BAD_TABLE	! bad format for table ?
	LOGICAL		TOO_BIG		! line too long
	LOGICAL		EOF		! end of file ?
	CHARACTER*80	INP_LINE	! input line without comments
C
C Initialisation
C
	L = 0
	HIGH_PRIO = 0
	BAD_TABLE = .FALSE.
C
C Open the file
C
	ERRCOD = FLROPN(PRIO_LUN,PRIO_FILE,RETCOD)
C
C If unsuccessful output message
C
	IF (.NOT. ERRCOD) THEN
	   CALL LSL_PUTMSG(RELHT__ERROPNPRIO,
     &	      PRIO_FILE(1:PRIO_LEN),PRIO_LUN)
	   CALL LSL_ADDMSG(ERRCOD)
	   IF (ERRCOD .EQ. LSL__SYSOPEN) CALL LSL_ADDMSG(RETCOD)
	   GOTO 999
	ENDIF
C
C Read the priority table
C
	IF (HAD_LOG) CALL LSL_PUTMSG(RELHT__READPRIO,
     &	      PRIO_FILE(1:PRIO_LEN))
C
C Get the next line from file
C
100	L = L + 1
	TOO_BIG = .FALSE.
	ERRCOD = FLRLIN(,,,RETCOD)
C
C Check for end of file 
C
	IF (ERRCOD .EQ. LSL__EOF) THEN
	   EOF = .TRUE.
	   IF (L .EQ. 1) THEN
	      CALL LSL_PUTMSG(RELHT__UNEXPEOF)
	      CALL LSL_ADDMSG(RELHT__LINENUM,L)
	      BAD_TABLE = .TRUE.
	   ENDIF
C
C Check for line too long
C
	ELSE IF (ERRCOD .EQ. LSL__RECTOOBIG) THEN
	   CALL LSL_PUTMSG(RELHT__LINETRUNC)
	   CALL LSL_ADDMSG(RELHT__LINENUM,L)
	   CALL LSL_ADDMSG(ERRCOD)
	   TOO_BIG = .TRUE.
	ENDIF
C
C Strip the comments off
C
	IF (ERRCOD .OR. TOO_BIG) THEN
	   CALL BSLN
	   INP_LEN = READSTR(INP_LINE,'!',ON_CHAR,.TRUE.,ERRCOD)
C
C Get the buffer address and set up an auxiliary buffer
C
	   IF (ERRCOD .AND. (INP_LEN .GT. 0)) THEN
	      STRADR = %LOC(INP_LINE)
	      CALL SETAUX(%VAL(STRADR),INP_LEN)
C
C Now start reading the line - first the priority and doubt index
C
	      BAD_TABLE = RDINT(PRIO)
	      IF (.NOT. BAD_TABLE) BAD_TABLE = RDINT(DOUBT)
C
C and the range if not at end of line
C
	      IF (BAD_TABLE) THEN
	         CALL LSL_PUTMSG(RELHT__UNEXPEOL)
	      ELSE
	         IF (PRIO .GT. HIGH_PRIO) HIGH_PRIO = PRIO
	         BAD_TABLE = (.NOT. FC_RANGE(L,PRIO,DOUBT))
	      ENDIF
	      IF (BAD_TABLE) CALL LSL_ADDMSG(RELHT__LINENUM,L)
C
C Error reading string
C
	   ELSE IF (.NOT. ERRCOD) THEN
	      CALL LSL_PUTMSG(RELHT__SOFTERR)
	      CALL LSL_ADDMSG(ERRCOD)
	      BAD_TABLE = .TRUE.
	   ENDIF
C
C Error reading file
C
	ELSE IF (.NOT.EOF) THEN
	   CALL LSL_PUTMSG(RELHT__ERRREADPRIO)
	   CALL LSL_ADDMSG(RELHT__LINENUM,L)
	   CALL LSL_ADDMSG(ERRCOD)
	   IF (ERRCOD .EQ. LSL__SYSREAD) CALL LSL_ADDMSG(RETCOD)
	   BAD_TABLE = .TRUE.
	ENDIF
C
C Repeat if more to get
C
	IF (.NOT. (EOF.OR.BAD_TABLE)) GO TO 100
C
C Close the file
C
	ERRCOD = FLRCLO(PRIO_LUN,RETCOD)
C
C If unsuccessful output message
C
	IF (.NOT. ERRCOD) THEN
	   CALL LSL_PUTMSG(RELHT__ERRCLOPRIO,PRIO_LUN)
	   CALL LSL_ADDMSG(ERRCOD)
	   IF (ERRCOD.EQ.LSL__SYSCLOSE) CALL LSL_ADDMSG(RETCOD)
	ENDIF
C
C Assign function value
C
999	READ_PRIO = ((ERRCOD.OR.EOF) .AND. .NOT.BAD_TABLE)
C
C Return
C
	RETURN
	END
C
