C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-09-12 11:06:58.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION BINARY_CHOP( LOOKFOR, LOCATION )
C
***	IDENT	12SE86
***	MODULE	BINARY_CHOP
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C Author TJ Ibbs, 28 July 1986
C Pinched from IPATCH and modified for RELHT 
C    by R J Hulme, 10 September 1986
C
C to search for the value in FS_LIST that is just below LOOKFOR
C and return the index of that value in LOCATION
C
C returns FALSE if it fails to find such an index
C
	IMPLICIT NONE
C
C arguments
C
	INTEGER*4	LOOKFOR		! value to search for
	INTEGER		LOCATION	! where we found it
C
C **********************************************************************
C parameter files
C
***	PARAMETER/HERE:RELHTMSG/	! message definitions
C
C common files
C
***	COMMON/HERE:POINTERS/		! pointers into IFF files
C
C workspace
C
	INTEGER		TOP,BOT,MID	! for simple binary chop
C
C **********************************************************************
C assume that we succeed
C
	BINARY_CHOP = .TRUE.
C
C and initialise the chop
C
     	BOT = 0
 	TOP = LIST_TOP + 1
C
C **********************************************************************
C make the next guess
C
2000	   MID = (TOP+BOT)/2
C
C are we within this area of the file?
C
	   IF ( LOOKFOR.GE.FS_LIST(MID) .AND.
     &		LOOKFOR.LT.FS_LIST(MID+1) ) THEN
	      LOCATION = MID
	      GOTO 9000
	   ENDIF
C
C if we have contracted our search window down to zero (or even
C crossed its ends over!) then we must give up
C
	   IF ( BOT.GE.TOP ) THEN
	      CALL LSL_PUTMSG( RELHT__BINCHOPERR, LOOKFOR )
	      BINARY_CHOP = .FALSE.
	      GOTO 9000
	   ENDIF
C
C now choose which side of our partition we are on
C
	   IF ( LOOKFOR.LT.FS_LIST(MID) ) THEN
	      TOP = MID
	   ELSE
	      IF (MID.EQ.BOT) MID=MID+1
	      BOT = MID
	   ENDIF
C
C and try again
C
	   GOTO 2000
C
C **********************************************************************
C and we come down here and return
C
9000	RETURN
	END
