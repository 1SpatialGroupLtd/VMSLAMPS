C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1997-03-12 13:35:34.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE DETER(LIST,IDET)
C
***	MODULE	DETER
***	IDENT	12MR97
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
C
CMOD Calls to WAIT changed to LSL_WAIT			TJH 15-Nov-1991
CMOD Messages output using TXTOUT			TJH 30-Jul-1986
CMOD Side of line data missing message output only if 
C    DEBUG is set					TJH 08-Jul-1986
CMOD Inconsistent side of line error reported if 
C    DIAGNOSTICS off.					ATT 04-Jul-1986
CMOD Error/warning messages made more explicit and code 
C    tidied.						ATT 26-Jun-1986
CMOD Checks etc....finally fixed ???			ATT 25-Jun-1986
CMOD Checks for consistent and inconsistent up/down-hill 
C    information changed and more added.		ATT 16-Jun-1986
CMOD Checks for consistent and inconsistent up/down-hill 
C    information changed.				ATT 13-Jun-1986
C    Created						TJH 03-Jun-1986
C
C To DETERmine whether a triangle should bulge up or down!
C Get the up-hill/down-hill information (JFREES) for the neighbours of 
C the vertex points of the triangle passed in LIST. Determine from these
C data whether the triangle bows downward or upward. This may conflict
C with (and should override) the slope derivatives determined for the 
C vertices of this triangle (in SLP). Check as we go that the neighbour 
C up-hill/down-hill information for this triangle is consistent within 
C the triangle. If it is not then return IDET = 0. We will have to rely
C on the slope derivatives in the event of such a failure.
C 
	IMPLICIT NONE
C
	INCLUDE 'LSL$DTMCREATESYS:GRIDPARAMS.PAR'
C
	INCLUDE 'LSL$DTMCREATESYS:CONTRL.CMN'
	INCLUDE 'here:trigrid_DATQ.CMN'
	INCLUDE 'LSL$DTMCREATESYS:GRAFCS.CMN'
	INCLUDE 'LSL$DTMCREATESYS:FINDIT.CMN'
	INCLUDE 'LSL$DTMCREATESYS:IOLUNS.CMN'
	INCLUDE 'LSL$DTMCREATESYS:STORIT.CMN'
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'
C
	INTEGER	 IDET		! IDET can return 3 possible values:
C
C		 1 = triangle bulges upward
C		 0 = conflicting/absent neighbour up-hill/downhill info.
C		-1 = triangle bulges downward
C
	INTEGER	 I,J,K,L	! loop vars.
	INTEGER	 TMPSLP		! temp. single up/down-hill indicater
	INTEGER	 ISLP		! single up-hill/down-hill indicater
	INTEGER  ITEM(NTMSIZ)	! list of neighbour side flags
	INTEGER	 JPOS,KPOS	! node position within NTEM()
	INTEGER  LIST(3)	! list of nodes
	INTEGER	 NUMBER		! number of nodes in list
	INTEGER  NTEM(NTMSIZ)	! list of neighbours
	REAL	 XTEMP,YTEMP	! position of an error 
C
C ......................................................................
C
C Reset the last resort up-hill/down-hill flag used only when
C a pair of node up-hill/down-hill flags were not available and no 
C inconsistencies were detected and no nodes are flagged as "unknown"(2)
	ISLP=-2
	DO 10 I=1,3
C
C Get neighbours for each of the 3 vertices
	   CALL GETNAY(LIST(I),ITEM,NTMSIZ,NUMBER)
	   J=MOD(I,3)+1
	   K=MOD(I+1,3)+1
C
C Determine the position of the 2 other vertices in the Ith vertex's
C neighbour list
	   CALL FINPOS(LIST(J),ITEM,NTMSIZ,NUMBER,JPOS)	  
	   CALL FINPOS(LIST(K),ITEM,NTMSIZ,NUMBER,KPOS)	  
C
C Get the up=hill/down-hill neighbour information from storage.
	   CALL GETSID(LIST(I),NTEM,NTMSIZ,NUMBER)
C
C Then index into it using the indices derived from the neighbour list
C using FINPOS. Check that we have (consistent) up-hill/down-hill info.
C If no info available for this node loop for the next node. If we fall
C through the loop no info. was available. If we discover an 
C inconsistency complain, loudly.
C
C Consistent so we move on
	   IF (NTEM(JPOS).EQ.-1.AND.NTEM(KPOS).EQ.-1
     &		.OR.
     &	  NTEM(JPOS).EQ.1.AND.NTEM(KPOS).EQ.1) GOTO 50  
C
C Inconsistent so lets go warn about it
	   IF (NTEM(JPOS).EQ.-1.AND.NTEM(KPOS).EQ.1
     &		.OR.
     &	  NTEM(JPOS).EQ.1.AND.NTEM(KPOS).EQ.-1) GOTO 20 
C
C All these (2's and 0's) mean we have no side of line information so 
C keep going round the loop.
	   IF (NTEM(JPOS).EQ.2.AND.NTEM(KPOS).EQ.2) GOTO 10 
	   IF (NTEM(JPOS).EQ.0.AND.NTEM(KPOS).EQ.0) GOTO 10 
	   IF (NTEM(JPOS).EQ.0.AND.NTEM(KPOS).EQ.2) GOTO 10 
	   IF (NTEM(JPOS).EQ.2.AND.NTEM(KPOS).EQ.0) GOTO 10 
C
C If we've got this far put the line info we do have into TMPSLP 
	   TMPSLP=NTEM(JPOS)
	   IF (TMPSLP.EQ.0.OR.TMPSLP.EQ.2) TMPSLP=NTEM(KPOS)
C
C Inconsistancy_ ISLP isn't unset or the same as TMPSLP.... warnings !
	   IF (ISLP.NE.-2.AND.ISLP.NE.TMPSLP) GOTO 20
C
C We have got this far so put TMPSLP into ISLP
	   ISLP=TMPSLP
C
10	CONTINUE
C
C All the pairs of neighbour links were contained an "unknown" (2) or
C "on string" (0) value. Try for a single up-hill/down-hill flag
	IDET=0
	IF (ISLP.NE.-2) IDET=ISLP
	IF (DEBUG) THEN
	   IF (IDET.EQ.0) THEN		! No side of line info
	      CALL EXPAND(
     &		'*** WARNING *** side of line information not '//
     &			'available in triangle')
	      CALL TXTOUT(.TRUE.)
	      IF (GRAPHICS) CALL LSL_WAIT(1,2) ! wait for 1 sec.
	      GOTO 30
	   ELSE		 ! Only one piece of side of line info
	      CALL EXPAND(
     &		 '*** WARNING *** only one item of side of line '//
     &			'information available in triangle')
	      CALL TXTOUT(.TRUE.)
	      IF (GRAPHICS) CALL LSL_WAIT(1,2) ! wait for 1 sec.
	      GOTO 30
	   ENDIF
	ENDIF
C
	GOTO 60
C
C This is where we warn about inconsistent side of line info ...
20	CALL EXPAND('*** WARNING *** inconsistent side of line '//
     &			'information in triangle with nodes')
	CALL TXTOUT(.TRUE.)
C 
C and set IDET to zero
	IDET=0 
C 
C give the position of the errors
30	DO 40 I=1,3	
	   CALL VALUE (XTEMP,MD(1,LIST(I)),1)
	   CALL VALUE (YTEMP,MD(2,LIST(I)),2)
	   CALL EXPAND('              %N, position %F %F'
     &				       ,LIST(I)     ,XTEMP,YTEMP)
	   CALL TXTOUT(.FALSE.)
	   IF (GRAPHICS) CALL LSL_WAIT(1,2) ! wait for 1 sec.
40	CONTINUE
	GOTO 60
50	IDET=ISIGN(1,NTEM(JPOS))
60	RETURN
	END
