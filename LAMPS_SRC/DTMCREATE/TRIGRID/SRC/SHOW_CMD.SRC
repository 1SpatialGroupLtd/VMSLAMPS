	LOGICAL FUNCTION SHOW_CMD()
C
***	MODULE	SHOW_CMD
***	IDENT	23AU88
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Created						TJH  06-Apr-1988
C MOD 23-Aug-88  For use with LSLA type header.
C
C
C SHOW - show things about TRIGRID.
C
C Function returns .true. if all is well
C
	IMPLICIT NONE
C
C W/s
	INTEGER		I
	INTEGER*4       CMD     ! decoded command number
	LOGICAL		OK,IERR	! function_returns
C
C Parameters:
	REAL		DEGRAD		! degrees to radians conversion
	PARAMETER	(DEGRAD=0.017 453 2925)
	INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'
	INCLUDE 'LSL$CMNDTI:DTIPAR.PAR'
C
C Common:
	INCLUDE 'LSL$DTMCREATESYS:CONTRL.CMN'
	INCLUDE 'LSL$DTMCREATESYS:DTMDET.CMN'
	INCLUDE 'LSL$DTMCREATESYS:IOLUNS.CMN'
	INCLUDE 'LSL$DTMCREATESYS:FINDIT.CMN'
	INCLUDE 'LSL$DTMCREATESYS:GRAFCS.CMN'
	INCLUDE 'LSL$DTMCREATESYS:GRAFDEV.CMN'
	INCLUDE 'LSL$DTMCREATESYS:STORIT.CMN'
	INCLUDE 'LSL$DTMCREATESYS:TRYVAR.CMN'
	INCLUDE 'LSL$CMNDTI:DTIPROJ.CMN'
	INCLUDE 'LSL$CMNDTI:DTIHDR.CMN'
	INCLUDE 'LSL$CMNLSL:FILENAME.CMN'
	INCLUDE 'LSL$CMNLSL:CMDCOM.CMN'
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'
C
C Functions
	LOGICAL		RDCOMM  ! read command from line
	LOGICAL		DTI_PRINT_HEADER
	LOGICAL		DTI_WRITE_PROJ_REC
C
C Command table
	EXTERNAL	SHOW_CMD_TABLE
	INTEGER*4	SHOW_CMD_TABLE
C
C ......................................................................
C
	SHOW_CMD=.TRUE.			! assume success
	CMD = RDCOMM(SHOW_CMD_TABLE)
C
C		label           ! command         cmd
	GOTO (	10,		! error/nothing	- 1
     &		70,		! data_type	- 2
     &		20,		! enable 	- 3
     &		40,		! files		- 4
     &		60,		! header_type	- 5
     &		30,		! limits	- 6
     &		90,		! sidelength	- 7
     &		80,		! size		- 8
     &		100,		! units		- 9
     &		110		! window	- 10
     &		), CMD+1
C
10	CALL WRITEF 
	CALL WRITEF('%S Specifying command SHOW',ERROR)
	CALL WRITEF
	CALL WRITEF('Available SHOW command qualifiers are:')
	CALL WRITEF
	CALL WRITEF('DATA_TYPE    ENABLE       FILES    HEADER_TYPE'//
     &			'     LIMITS     SIDELENGTH')
	CALL WRITEF
	CALL WRITEF('SIZE         UNITS        WINDOW')
	CALL WRITEF 
	SHOW_CMD=.FALSE.
	GOTO 120
C
C
C ......................................................................
C ENABLE
20	CALL EXPAND
     &	('AUTO_LIMITS ......................................... ')
	IF (ATOLIM) THEN
	   CALL WRTAPP('On')
	ELSE
	   CALL WRTAPP('Off')
	ENDIF
	CALL EXPAND
     &	('DIAGNOSTICS ......................................... ')
	IF (DIAG) THEN
	   CALL WRTAPP('On')
	ELSE
	   CALL WRTAPP('Off')
	ENDIF
	CALL EXPAND
     &	('GRAPHICS ............................................ ')
	IF (GRAPHICS) THEN
	   CALL WRTAPP('On')
	ELSE
	   CALL WRTAPP('Off')
	ENDIF
	CALL EXPAND
     &	('SMOOTH .............................................. ')
	IF (LINEAR.EQ.0) THEN
	   CALL WRTAPP('On')
	   CALL WRITEF('(Smooth patch interpolation)')
	ELSE
	   CALL WRTAPP('Off')
	   CALL WRITEF('(Linear facet interpolation)')
	ENDIF
	CALL EXPAND
     &	('NINT ................................................ ')
	IF (TRUNCATE) THEN
	   CALL WRTAPP('Off')
	ELSE
	   CALL WRTAPP('On')
	ENDIF
	CALL EXPAND
     &	('ORTHOGONAL .......................................... ')
	IF (ORTHOG) THEN
	   CALL WRTAPP('On')
	ELSE
	   CALL WRTAPP('Off')
	ENDIF
	CALL EXPAND
     &	('TRACE ............................................... ')
	IF (TRACE) THEN
	   CALL WRTAPP('On')
	ELSE
	   CALL WRTAPP('Off')
	ENDIF
	GOTO 120 
C
C ......................................................................
C "LIMITS" - interpolation limits
30	IF (HADTRILIM) THEN
	   CALL WRITEF(
     &	'Individual triangle undershoot limit ................. %F9.3'
     &                                                 ,USHOT)
	   CALL WRITEF(
     &	'Individual triangle overshoot limit .................. %F9.3'
     &                                                 ,OSHOT)
	ELSE
	   CALL WRITEF('No individual triangle interpolation '//
     &		'limits will be applied')
	ENDIF
	IF (HADLIM) THEN
	   CALL WRITEF(
     &	'Whole DTM lower z-value limit ........................ %F9.3'
     &                                                 ,BOTTOM)
	   CALL WRITEF(
     &	'Whole DTM upper z-value limit ........................ %F9.3'
     &                                                 ,UPPER)

	ELSE
	   CALL WRITEF('No whole DTM Z-limits will '//
     &		'be applied')
	ENDIF
	GOTO 120
C
C ......................................................................
C SHOW FILES
40	CALL WRITEF('Input files:')
	IF (OPNDTA) THEN
C
C Use PUTFLN to separate our file specification into its component
C parts of NODE::DEV:[DIR]FILE.EXT;VER etc
	   CALL STR$UPCASE(ITLE(:TITLEN),ITLE(:TITLEN))
	   CALL PUTFLN(ITLE(:TITLEN))
	   STR_EXT='DTA'
	   LEN_EXT=3
	   CALL EXPFLN(ITLE,TITLEN)
	   CALL WRITEF('.DTA file:   %S',ITLE(1:TITLEN))
	   STR_EXT='NOD'
	   LEN_EXT=3
	   CALL EXPFLN(ITLE,TITLEN)
	   CALL WRITEF('.NOD file:   %S',ITLE(1:TITLEN))
	   STR_EXT='DER'
	   LEN_EXT=3
	   CALL EXPFLN(ITLE,TITLEN)
	   CALL WRITEF('.DER file:   %S',ITLE(1:TITLEN))
	ELSE
	   CALL WRITEF('The input files are undefined')
	ENDIF
	CALL WRITEF
	CALL WRITEF('Output file:')
	IF (DTI_NAME_LENGTH(LGC4).NE.0) THEN
	   IF (.NOT.GEOEXT.OR.SIDEX.EQ.0) THEN
	      CALL WRITEF('             %S',
     &			DTI_NAME(LGC4)(1:DTI_NAME_LENGTH(LGC4)))
	      CALL WRITEF('             (DTI file window '//
     &		'or size are currently undefined)')
	   ELSE
C
C Set up the DTIHDR common block for a DTI output file "opened" on LGC8
C which shows the current characteristics of the output DTI file, which
C we will actually open on LGC4 once the GO command has been given 
C
	      DTILUN_INUSE(LGC8)=.TRUE.
	      DTI_NAME(LGC8)=DTI_NAME(LGC4)
	      DTI_NAME_LENGTH(LGC8)=DTI_NAME_LENGTH(LGC4)
	      HEADER_TYPE(LGC8)=DTI_HDR_TYPE
	      DATA_TYPE(LGC8)=DTI_DATA_TYPE
	      IF (DTI_HDR_TYPE.EQ.DTI_LSLA)THEN
	         X_GRID(LGC8)=SIDEX
	         Y_GRID(LGC8)=SIDEY
	         X_OFFSET(LGC8)=XMIN
	         Y_OFFSET(LGC8)=YMIN
	      ELSE
	         LONORI(LGC8)=XMIN		! lon origin (10ths secs)
	         LATORI(LGC8)=YMIN		! lat origin (10ths secs)
	         LATINT(LGC8)=SIDEX	! lat grid interval (10ths secs)
	         LONINT(LGC8)=SIDEY	! lon grid interval (10ths secs)
C
C Convert LATINT and LONINT to ground metres
	         X_GRID(LGC8)=
     &			6 371 229.3 * COS((LATORI(LGC8)/36000.)*DEGRAD)
     &                  * FLOAT(LONINT(LGC8))*DEGRAD / 36 000.0
	         Y_GRID(LGC8)=6 371 229.3 
     &			* FLOAT(LATINT(LGC8))*DEGRAD / 36 000.0
	         LATREC(1,LGC8)=YMIN	! SW latitude
	         LATREC(2,LGC8)=YMAX	! NW latitude
	         LATREC(3,LGC8)=YMAX	! NE latitude
	         LATREC(4,LGC8)=YMIN	! SE latitude
	         LONREC(1,LGC8)=XMIN	! SW longitude
	         LONREC(2,LGC8)=XMIN	! NW longitude
	         LONREC(3,LGC8)=XMAX	! NE longitude
	         LONREC(4,LGC8)=XMAX	! SE longitude
	      ENDIF
	      IF (HAD_PROJ.AND.DTI_HDR_TYPE.EQ.DTI_LSLA) THEN
	         DTIPROJ_ORIGIN(1,LGC8)=XMIN
	         DTIPROJ_ORIGIN(2,LGC8)=YMIN
	         DTIPROJ_SAMPLE(1,LGC8)=SIDEX
	         DTIPROJ_SAMPLE(2,LGC8)=SIDEY
	         DTIPROJ_UNITS(LGC8)=PROJAR_UNITS
	         DTIPROJ_SPHEROID(LGC8)=PROJAR_SPHEROID
	         DTIPROJ_PROJECTION(LGC8)=PROJAR_PROJECTION
	         DTIPROJ_USER_SPHEROID(1,LGC8)=PROJAR_USER_SPHEROID(1)
	         DTIPROJ_USER_SPHEROID(2,LGC8)=PROJAR_USER_SPHEROID(2)
	         DO 50 I=1,15
	            DTIPROJ_PROJ_PARAMS(I,LGC8)=PROJAR_PROJ_PARAMS(I)
50	         CONTINUE
	         OK=DTI_WRITE_PROJ_REC(LGC8,DEFAULT_LSLA_HEADER,IERR)
	         IF (.NOT.OK) THEN
	            CALL LSL_PUTMSG(OK)
	            CALL LSL_ADDMSG(IERR)
	            SHOW_CMD=.FALSE.
	            GOTO 120
	         ENDIF
	      ENDIF
C
	      IF (DTI_HDR_TYPE.NE.DTI_LSLA) THEN
	          OK=DTI_PRINT_HEADER(LGC8,UNITS_DEG,.TRUE.)
	      ELSE
	          OK=DTI_PRINT_HEADER(LGC8,UNITS_MET,.TRUE.)
	      ENDIF
	      IF (.NOT.OK) THEN
	         CALL LSL_PUTMSG(OK)
	         SHOW_CMD=.FALSE.
	         GOTO 120
	      ENDIF
	   ENDIF
	ELSE
	   CALL WRITEF('The DTI output file is undefined')
	ENDIF
	GOTO 120
C
C ......................................................................
C SHOW HEADER_TYPE
60	CALL WRITEF
	CALL EXPAND(
     &   'DTI header type ..................................... ')
	IF     (DTI_HDR_TYPE.EQ.5) THEN
	   CALL WRITAP('LSLA')
	ELSEIF (DTI_HDR_TYPE.EQ.2) THEN
	   CALL WRITAP('UHL1')
	ELSEIF (DTI_HDR_TYPE.EQ.3) THEN
	   CALL WRITAP('TED4')
	ENDIF
	GOTO 120
C
C ......................................................................
C SHOW DATA_TYPE
70	CALL WRITEF
	CALL EXPAND(
     &   'DTI data type ....................................... ')
	IF (DTI_DATA_TYPE.EQ.2) THEN
	   CALL WRITAP('WORD')
	ELSEIF (DTI_DATA_TYPE.EQ.3) THEN
	   CALL WRITAP('LONGWORD')
	ELSEIF (DTI_DATA_TYPE.EQ.4) THEN
	   CALL WRITAP('REAL')
	ENDIF
	GOTO 120
C
C ......................................................................
C SHOW SIZE
80	CALL EXPAND
     &	('Number of columns ................................... ')
	IF (NROW.EQ.0.OR.NCOL.EQ.0) THEN
	   CALL WRTAPP('Unset')
	ELSE
	   CALL WRTAPP('%N',NCOL)
	ENDIF
	CALL EXPAND
     &	('Number of rows ...................................... ')
	IF (NROW.EQ.0.OR.NCOL.EQ.0) THEN
	   CALL WRTAPP('Unset')
	ELSE
	   CALL WRTAPP('%N',NROW)
	ENDIF
	GOTO 120
C
C ......................................................................
C SHOW SIDELENGTH
90	CALL WRITEF
	CALL EXPAND
     &	('X-sidelength ........................................ ')
	IF (SIDE) THEN
	   CALL WRTAPP('%F8.2',SIDEX)
	ELSE
	   CALL WRTAPP('Unset')
	ENDIF
	CALL EXPAND
     &	('Y-sidelength ........................................ ')
	IF (SIDE) THEN
	   CALL WRTAPP('%F8.2',SIDEY)
	ELSE
	   CALL WRTAPP('Unset')
	ENDIF
	GOTO 120
C
C ......................................................................
C SHOW UNITS
C
100	CALL EXPAND('Window to be specified in ')
	IF (UNITS.EQ.2) THEN
	   CALL WRTAPP('metres')
	ELSEIF (UNITS.EQ.3) THEN
	   CALL WRTAPP('seconds of arc')
	ELSEIF (UNITS.EQ.4) THEN
	   CALL WRTAPP('latlong (degrees, minutes and seconds)')
	ELSEIF (UNITS.EQ.5) THEN
	   CALL WRTAPP('projection units')
	ENDIF
	GOTO 120
C
C ......................................................................
C SHOW WINDOW
C
C Show triangulation coverage
110	CALL SHOW_WINDOW(VMIN(1),VMAX(1),VMIN(2),VMAX(2),UNITS,GEOEXT,
     &			.TRUE.,OPNDTA)
C
C Show window, but check SIDE, if so XMAX, YMAX are set
	IF (SIDE) THEN 
	   CALL SHOW_WINDOW(XMIN,XMAX,YMIN,YMAX,UNITS,GEOEXT,
     &			.FALSE.,OPNDTA)
	ELSE
	   CALL SHOW_WINDOW(XMIN,SMAX,YMIN,TMAX,UNITS,GEOEXT,
     &			.FALSE.,OPNDTA)
	ENDIF
120	RETURN
	END
