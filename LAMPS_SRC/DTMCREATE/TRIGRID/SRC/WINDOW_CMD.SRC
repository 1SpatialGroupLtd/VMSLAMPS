C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-01-18 11:39:42.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION WINDOW_CMD(XMIN,YMIN,XMAX,YMAX,TTIN,UNITS)
C
***	MODULE	WINDOW_CMD
***	IDENT	21DE88
C
C	Copyright (C), Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Created						TJH 21-Dec-1988
C
C Function to get the (X,Y) limits for the WINDOW xmin,ymin,xmax,ymax
C command. If argument(s) are missing the user is prompted
C
C Function returns .TRUE. if all is well.
C
	IMPLICIT NONE
C
C Arguments:
	REAL	XMIN,XMAX,YMIN,YMAX	! window extents
	INTEGER	UNITS			! Window units
	LOGICAL TTIN			! input from TT:?
C
C Parameters:
	INCLUDE 'LSL$CMNDTI:DTIDEF.PAR'	! DTILIB parameters
	INCLUDE 'LSL$CMNDTI:DTIPAR.PAR'	! DTILIB parameters
	INCLUDE	'LSL$DTMCREATESYS:MESPAR.PAR'
C
C W/s:
	LOGICAL		OK		! function return
	INTEGER*4	LLDEGS(4)	! window values in seconds
C
C Function
	LOGICAL		READLL		! reads lat/long
C
C Common:
	INCLUDE	'LSL$CMNLSL:CMDCOM.CMN'
C
C ......................................................................
C
	WINDOW_CMD=.FALSE.			! assume failure
	IF (CMDRCT.NE.4.AND.UNITS.NE.UNITS_DEG) THEN
	   IF (TTIN)THEN
	       CALL WRITEF('%S Unable to read WINDOW arguments',WARNING)
	   ELSE
	       CALL WRITEF('%S Unable to read WINDOW arguments',ERROR)
	   ENDIF
	   CALL WRITEF(
     &		'Command requires 2 x,y coordinate pairs (SW and NE)')
	   CALL EXPAND('specified in ')
	   IF (UNITS.EQ.2) THEN
	      CALL WRTAPP('metres')
	   ELSEIF (UNITS.EQ.3) THEN
	      CALL WRTAPP('seconds of arc')
	   ELSEIF (UNITS.EQ.4) THEN
	      CALL WRTAPP('latlong (degrees, minutes and seconds)')
	   ELSEIF (UNITS.EQ.5) THEN
	      CALL WRTAPP('projection units')
	   ENDIF
	   GOTO 999
	ENDIF
C
	GOTO (60,60,30,40,60) UNITS
C
C
C-----------------------------------------------------------------------
C	Seconds
30	REALAR(1)=REALAR(1)*10
	REALAR(2)=REALAR(2)*10
	REALAR(3)=REALAR(3)*10
	REALAR(4)=REALAR(4)*10
	GOTO 60
C
C-----------------------------------------------------------------------
C	Degrees, Minutes & Seconds
C	Call READLL to convert to .1 seconds
C
40	IF (READLL(LLDEGS,4)) THEN
	   CALL WRITEF('%S specifying WINDOW',ERROR)
	   CALL WRITEF('Unable to use supplied LATLONG values')
	   CALL WRITEF('Window values must be given in the order:')
	      CALL WRITEF(
     &		'SW:  latitude longitude   NE:  latitude longitude')
	   GOTO 999
	ELSE
	   REALAR(2)=LLDEGS(1)*10
	   REALAR(1)=LLDEGS(2)*10
	   REALAR(4)=LLDEGS(3)*10
	   REALAR(3)=LLDEGS(4)*10
	ENDIF
C
C ......................................................................
C Now test that the window args are sensible
60	IF (REALAR(1).GT.REALAR(3).OR.REALAR(2).GT.REALAR(4)) THEN
	   CALL WRITEF(
     &	'%S window values must be given in the order:',ERROR)
	   IF (UNITS.EQ.4) THEN
	      CALL WRITEF(
     &		'SW:  latitude longitude   NE:  latitude longitude')
	   ELSE
	      CALL WRITEF('SW:  xmin ymin      NE:  xmax ymax ')
	   ENDIF
	   CALL WRITEF
	ELSEIF (REALAR(1).EQ.REALAR(3)) THEN
	   CALL WRITEF(
     &	'%S window values define a zero width window',ERROR)
	   CALL WRITEF
	ELSEIF (REALAR(2).EQ.REALAR(4)) THEN
	   CALL WRITEF(
     &	'%S window values define a zero height window',ERROR)
	   CALL WRITEF
	ELSE
C
C Copy the 4 good WINDOW arguments for return to calling routine
	   XMIN=REALAR(1)
	   YMIN=REALAR(2)
	   XMAX=REALAR(3)
	   YMAX=REALAR(4)
	   WINDOW_CMD=.TRUE.
	ENDIF
C
999	RETURN
	END
