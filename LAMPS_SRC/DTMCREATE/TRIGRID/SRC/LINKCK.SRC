C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1997-03-12 16:09:30.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE LINKCK(IHERE,ITHERE,IEND,NTEM,NUMBER,NPOS)
C
***	MODULE	LINKCK
***	IDENT	12MR97
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Created 				    TJH  04-Jun-1986
C
C Used in conjunction with FINPOS. If FINPOS cannot find a specified
C node in NTEM it returns NPOS as 0. We report this fact. LINKCK is
C only used when FINPOS is used to find the next or previous node to
C IHERE within a string. If the previous/next node is not found in
C NTEM then the string is logically broken at this point. Panic's
C constraint code has probably failed, or our contour has been crossed 
C by a river which was constrained after the contour. Report this then 
C set the next 2 node's neighbours from IHERE to node MIN(IEND,IHERE+2)
C to be "unknown" (2). 
C
C This should allow us to "jump" the gap in the line. (I hope!)
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$DTMCREATESYS:CONTRL.CMN'
	INCLUDE 'here:trigrid_DATQ.CMN'
	INCLUDE 'LSL$DTMCREATESYS:GRIDPARAMS.PAR'
	INCLUDE 'LSL$DTMCREATESYS:IOLUNS.CMN'
	INCLUDE 'LSL$DTMCREATESYS:FINDIT.CMN'
	INCLUDE 'LSL$DTMCREATESYS:STORIT.CMN'
C
C Integer:
	INTEGER	 NTEM(NTMSIZ)	! list of neighbours
	INTEGER  LINSID(NTMSIZ)	! neighbour side up-hill/down-hill flags
	INTEGER	 IHERE,ITHERE	! current/other node on the string
	INTEGER	 IEND		! last point in string
	INTEGER	 KNODE		! loop variable
	INTEGER	 KSTART		! loop control
	INTEGER	 NPOS		! position within NTEM()
	INTEGER	 NUMBER		! number of nodes in list
C
C ......................................................................
C
C Did we find the desired node in NTEM?
	IF (NPOS.GT.0) GOTO 30
C
	IF (DEBUG) THEN
	   IF (IHERE.GT.ITHERE) THEN
	     CALL WRITEF('*** WARNING *** Cannot find previous node '//
     &		'(%N) in string in neighbour list',ITHERE)
	   ELSE
	     CALL WRITEF('*** WARNING *** Cannot find next node '//
     &		'(%N) in string in neighbour list',IHERE+1)
	   ENDIF
	ENDIF
C
C Flag all of HERE's neighbour up-hill/down-hill entries as "unknown"
	DO 10 KNODE=1,NTMSIZ
	  LINSID(KNODE)=2
10	CONTINUE
	CALL PUTSID(IHERE,LINSID,NTMSIZ,NUMBER)
C
C And then blast the next 2 nodes in the string's neighbours too
	KSTART=IHERE+1
	DO 20 KNODE=KSTART,MIN(IHERE+2,IEND)
	   CALL GETNAY(KNODE,NTEM,NTMSIZ,NUMBER)
	   CALL PUTSID(KNODE,LINSID,NTMSIZ,NUMBER)
C
C Bump the value of IHERE so "jumping" the gap
	   IHERE=IHERE+1
20	CONTINUE
30	RETURN
	END
