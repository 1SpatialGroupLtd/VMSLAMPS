	SUBROUTINE PUTNAY(NOD,NTEM,LAXDUM,NUM)
C
***	MODULE	PUTNAY
***	IDENT	12MR97
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	Converted to LSLLIB			TJH	18-Mar-1988
CMOD    Ripped off from PANIC with PANDORA common
C	blocks					TJH     02-Jun-1986
CMOD    Scratch file can be opened mid session  TJH     24-Jul-1984
CMOD	NTEM dimensioned to NTMSIZ via 
C	GRIDPARAMS.PAR  			 DM     05-Jul-1984
CMOD	TEXTOT replaced by WRITEF		 DM	03-Jul-1984
CMOD	More efficient random writes		 DM	11-Jun-1984
CMOD	Old routine GTRECN now in-line		 DM	08-Jun-1984
CMOD	Inefficient NTEM(LAX) now NTEM(50)	 DM	06-Jun-1984
CMOD	NAYB now in MD				 DM	29-May-1984
C	Standardised				TJH 	25-May-1984
C
C Put the neighbours of a node (NOD) into storage, get them from
C NTEM. There are num of them, and LAX room for them in NTEM.
C
C Split the list into groups of 10, and store in the random
C access file. Leave a pointer to the start in MD(5,...). Allocate
C storage in groups of 10 neighbours as necessary by using
C the stack.
C
	INCLUDE 'LSL$DTMCREATESYS:GRIDPARAMS.PAR'
C
	INCLUDE 'here:trigrid_DATQ.CMN'
	INCLUDE 'LSL$DTMCREATESYS:FINDIT.CMN'
	INCLUDE 'LSL$DTMCREATESYS:IOLUNS.CMN'
	INCLUDE 'LSL$DTMCREATESYS:MESSAGE.CMN'
	INCLUDE 'LSL$DTMCREATESYS:STORIT.CMN'
C
C W/s
	DIMENSION NTEM(NTMSIZ)
C
	INTEGER	  I,J
	INTEGER	  NTEM2(0:10)		! for efficient writes
C
C ......................................................................
C
C Get node spawn pointer sign for initial record in case these are
C active
	I=ISIGN(1,MD(5,NOD))
C
C Delete NOD from the data file structure, if it is already there
	CALL REMNOD(NOD)
C
C Get a record to use from the stack list of the free chain records
	LREC=ISTACK(IPSTCK)
C
C Add one to the stack pointer, check it is not too large
	LREC=IPSTCK
C
C Add one to the stack pointer, checking that it is not too large
	IF (IPSTCK.LT.NSTACK) THEN
	   IPSTCK=IPSTCK+1
	ELSE
	   GOTO 70			! report fatal error and exit
	ENDIF
C Put a pointer to it in MD(5,...), and give it old spawn sign
	MD(5,NOD)=LREC*I
C Calculate how many records will be needed altogether
	IFR=(NUM-1)/10+1
C Go through and write the records
	J=-9
	DO 30 I=1,IFR
	   J=J + 10
C If this is last record for node, collect number in record (M).
C If it is not the last record M is the record for continuation
	   M=NUM - J + 1
	   IF (I.NE.IFR) THEN
C Collect a free record from the stack
	      MREC=ISTACK(IPSTCK)
C Add one to the stack pointer, checking that it is not too large
	      IF (IPSTCK.LT.NSTACK) THEN
	         IPSTCK=IPSTCK+1
	      ELSE
	         GOTO 70		! report fatal error and exit
	      ENDIF
	      M=-MREC
	   ENDIF
C Check whether this record is in memory file or disk file
	   IF (LREC.LE.NFREES) THEN
C In memory file area
	      LA=0
	      DO 10 L=J,J+9
	         LA=LA+1
	         IFREES(LA,LREC)=NTEM(L)
10	      CONTINUE
	      IFREES(11,LREC)=M
	   ELSE
C If the random access file was'nt opened before, we certainly need
C it now! 
	      IF (.NOT.DISKFL) THEN  ! DISKFL set (or not!) in SETUP.SRC
	         OPEN(UNIT=LGC7,FILE='TRIGRID.TMP',STATUS='SCRATCH',
     &	   ACCESS='DIRECT',FORM='UNFORMATTED',RECL=11,ERR=40)
	         CALL WRITEF
     &		('There are now too many records for memory (%N)',LREC)
	         CALL WRITEF('Opening random access disk file')
	         DISKFL=.TRUE.
	      ENDIF
C
C Write the record out - ten neighbours, next record (or length
C of present record if +ve), and polygon limit rectangle
	      DO 20 L=0,9
	         NTEM2(L)=NTEM(J+L)
20	      CONTINUE
	      NTEM2(10)=M
	      LOFF=LREC-NFREES
	      WRITE (LGC7,REC=LOFF,ERR=50) NTEM2
	   ENDIF
C Update the record number for the next record
	   LREC=MREC
30	CONTINUE
C That's it
	GOTO 90
C
C ......................................................................
C 			E R R O R S
C
C Error opening random file
40	CALL LSL_GETMSG(TRIDER__OPNSCR,MESSAGE,MESLEN)
	CALL EXPAND('%'//MESSAGE(:MESLEN)//'TRIGRID.TMP - PUTNAY')
	CALL TXTOUT(.TRUE.)
	GOTO 60
C
C Error during random write
50	CALL LSL_GETMSG(TRIDER__RANDWRT,MESSAGE,MESLEN)
	CALL EXPAND('%'//MESSAGE(:MESLEN)//' - PUTNAY')
	CALL TXTOUT(.TRUE.)
C
C Get secondary RMS/FORTRAN error
60	CALL ERRSNS(,I,J)
	IF (J.EQ.0) J=I
	CALL LSL_GETMSG(J,MESSAGE,MESLEN)	! what went wrong
	I=INDEX(MESSAGE,'!') - 1	! (ignore any FAO stuff)
	IF (MESLEN.LE.0) I=MESLEN
	GOTO 80
C
C Insufficient stack
70	CALL LSL_GETMSG(TRIDER__STACKOVR,MESSAGE,MESLEN)
80	CALL ALARMS(MESSAGE(:I)//' - PUTNAY')
C
C ......................................................................
C
90	RETURN
	END
