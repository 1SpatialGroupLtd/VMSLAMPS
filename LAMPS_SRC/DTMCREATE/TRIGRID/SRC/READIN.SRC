	LOGICAL FUNCTION READIN()
C
***	MODULE	READIN
***	IDENT	02MR89
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	Overall Z-limits now correctly scaled for
C	linear facet option				TJH  02-Mar-1989
CMOD	BOTTOM now set to -300000.0 not 0.0, overall
C	limits now not reset if linear option used	TJH  03-Jan-1989
C	Created from PANACEA PANDORA's namesake		TJH  05-Apr-1988
C
C Function to read in all data required for gridding of the
C triangulation.
C
C Function returns .TRUE. if all is well. 
C
	IMPLICIT NONE
C
C Functions:
	LOGICAL		RDUNF	! efficient Fortran reads
C
C Parameters:
	INCLUDE '($RMSDEF)/NOLIST'
	INCLUDE 'LSL$DTMCREATESYS:GRIDPARAMS.PAR'
	INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'
	INCLUDE 'LSL$CMNTRIGRID:TRIGRIDMSG.PAR'
C
C Common:
	INCLUDE 'LSL$DTMCREATESYS:CONTRL.CMN'
	INCLUDE 'LSL$DTMCREATESYS:DTMDET.CMN'
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'
	INCLUDE 'LSL$DTMCREATESYS:FINDIT.CMN'
	INCLUDE 'LSL$DTMCREATESYS:GRAFCS.CMN'
	INCLUDE 'LSL$DTMCREATESYS:GRAFDEV.CMN'
	INCLUDE 'LSL$DTMCREATESYS:IOLUNS.CMN'
	INCLUDE 'LSL$DTMCREATESYS:MESSAGE.CMN'
	INCLUDE 'LSL$DTMCREATESYS:TPOLGY.CMN'
	INCLUDE 'LSL$DTMCREATESYS:STORIT.CMN'
	INCLUDE 'LSL$DTMCREATESYS:TRYVAR.CMN'
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'
	INCLUDE 'LSL$DTMCREATESYS:ZONVAR.CMN'
	INCLUDE 'LSL$DTMCREATESYS:RESOLUTION.CMN'
C
C W/s:
	INTEGER		I,J	
	LOGICAL		OK			! function return
	INTEGER		IDUMMY			! dummy variable
	INTEGER		NLONG			! no. longwords to read
	INTEGER		LONGWD(37450)		! for efficient reads
	EQUIVALENCE    (TPOLGY(1),LONGWD(1))
C
C ......................................................................
C
	READIN=.TRUE.
C
C Set interpolation add-on restriction for linear facet
C option (0), or for unrestricted smooth patch option (300000).
C Also for the maximum upper and lower range limits.
	IF (LINEAR.EQ.1) THEN  	  ! linear facet approach
	   UREST=0.0	 
	   OREST=0.0	 
	   USHOT=0.0
	   OSHOT=0.0
	   TRACE=.FALSE.
	   ATOLIM=.FALSE.
	ENDIF
C
	IF (.NOT.HADLIM) THEN	  ! interpolation limits explicitly set?
CCC	   UPPER=300000.0	  ! No? Reset all the option defaults
CCC	   BOTTOM=-300000.0	  ! to no effect values
	   UPPER=MAX_RES_REAL	  ! No? Reset all the option defaults
	   BOTTOM=-MAX_RES_REAL	  ! to no effect values
	ENDIF
C
	IF (.NOT.HADTRILIM) THEN
CCC	   USHOT=300000.0
CCC	   OSHOT=300000.0
	   USHOT=MAX_RES_REAL
	   OSHOT=MAX_RES_REAL
	ENDIF
C
C Get node/neighbour details from file into memory. Read data.
C Set scaled lower x,y limits to zero
	MX1=0
	MY1=0
C
C Set overall Z-limits as scaled integer
	CALL CONVER(UPPER,J,3)	! absolute upper
	UPPER=J
	CALL CONVER(BOTTOM,J,3)	! absolute lower
	BOTTOM=J
C If using the smooth patch option integer scale the interpolation
C limits supplied earlier
	IF (LINEAR.EQ.0) THEN		! smooth patch option
CCC	   UREST=AMIN1(AMAX1(USHOT*VSCAL(3),0.0),300000.0)
CCC	   OREST=AMIN1(AMAX1(OSHOT*VSCAL(3),0.0),300000.0)
	   UREST=AMIN1(AMAX1(USHOT*VSCAL(3),0.0),MAX_RES_REAL)
	   OREST=AMIN1(AMAX1(OSHOT*VSCAL(3),0.0),MAX_RES_REAL)
	ENDIF
C
C Read in data set and next point in box markers for each point,
C these markers are now read into MD(4,n) 
	IF (DIAG) THEN
	   CALL FRAMED_MES(1,0)
	ENDIF
	OK=RDUNF(LGC1,MD,5*NP)
	IF (.NOT.OK)GOTO 50		! report error and exit
C
C Next read the first point in box index info. - we can just waste 
C this...
	OK=RDUNF(LGC1,LONGWD,NBI*NBJ)
	IF (.NOT.OK) GOTO 50		! report error and exit
C
C Next the number of points in the triangulation, pre-TRIEDIT.
C (NP will be updated by TRIEDIT thus preventing identification
C of those points that were added post-triangulation).
	READ (LGC1,END=10,ERR=50) IDUMMY
	GOTO 20
10	CALL WRITEF(WARNING//
     &		  'Reading old pattern .DTA file. No')
	CALL WRITEF(
     &		  '                feature code information available.')
	HADTOP=.FALSE.
	GOTO 30
C
C Now the feature code byte array TPOLGY() - equivalenced onto
C LONGWD(). If EOF detected this is not a new pattern .DTA file which
C would contain feature code information.
20	NLONG=NP/4
	IF (MOD(NP,4).NE.0) NLONG=NLONG+1
	OK=RDUNF(LGC1,LONGWD,NLONG)
	IF (OK.EQ.RMS$_EOF) THEN	! old pattern .DTA file
	   CALL WRITEF(WARNING//
     &		  'Reading old pattern .DTA file. No')
	   CALL WRITEF(
     &		  '                feature code information available.')
	   HADTOP=.FALSE.
	   GOTO 30		! EOF, implies old pattern .DTA file
	ELSE IF (.NOT.OK.AND.OK.NE.RMS$_EOF) THEN
	   GOTO 50 		! report error and exit
	ENDIF	   
C
C Finally read in any projection information
	OK=RDUNF(LGC1,PROJAR,PROJAR_LEN/2)
	IF (OK.EQ.RMS$_EOF) THEN
	   CALL WRITEF(WARNING//
     &		  'No projection information available for DTI header')
	   GOTO 30	! EOF, implies old pattern input IFF/DTI file
	ELSE IF (.NOT.OK.AND.OK.NE.RMS$_EOF) THEN
	   GOTO 50 			! report error and exit
	ELSE
	   HAD_PROJ=.TRUE.		! had projection info.
	ENDIF	   
C
C Close file
30	CLOSE (UNIT=LGC1)
C
C Read in the slope derivatives 
	IF (DIAG) THEN
	   CALL FRAMED_MES(2,0)
	ENDIF
C
C interpolated imaginary points
	OK=RDUNF(LGC5,MD,5*LIMPOL)
	IF (.NOT.OK)GOTO 60		! report error and exit
C
C Read slopes in for full data set
	DO 40 I=1,NP
	   OK=RDUNF(LGC5,SLP(1,I),5)
40	CONTINUE
	IF (.NOT.OK)GOTO 60		! report error and exit
	CLOSE (UNIT=LGC5)
	GOTO 90
C
C ......................................................................
C
C			   E R R O R S 
C
C Error reading from .DTA file
50	CALL LSL_PUTMSG(TRIGRID__RDDTA)
	GOTO 70
60	CALL LSL_PUTMSG(TRIGRID__RDSLP)
70	CALL ERRSNS(,I,J)		! find out what the problem is
	CALL LSL_GETMSG(J,MESSAGE,MESLEN)
	J=INDEX(MESSAGE,'!') - 1		! (ignore any FAO stuff)
	IF (J.EQ.0) J=MESLEN
	CALL WRITEF('%'//MESSAGE(1:J))
80	READIN=.FALSE.
90	RETURN
	END
