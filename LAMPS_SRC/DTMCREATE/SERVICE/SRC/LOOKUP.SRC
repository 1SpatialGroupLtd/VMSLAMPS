C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1999-08-23 13:57:40.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*2 FUNCTION LOOKUP
C
***	MODULE	LOOKUP
***	IDENT	23AU99
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
CMOD	Now puts ':' on end of device got from 
C	LSL$DTMCREATETERMINAL				TJH 06-Jul-1988
CMOD	DTMCREATE version. LSL$DTMCREATETERMINAL now used
C	to overcome the problem with terminal servers.  TJH 19-Nov-1987
CMOD	SIGMA 6100 graphics added			TJH 29-Jul-1986
CMOD	Startup default now VT100=.TRUE.		TJH 20-Jun-1985
CMOD	Reference to LSL$PANLOOKUP added		TJH 30-Apr-1985
CMOD	SIGMA 7000 graphics added			TJH 15-Apr-1985
CMOD	Now reads graphics device type from file instead
C	of just option availability.			TJH 27-Mar-1985
C	Created						TJH 27-Apr-1984
C
C Function to stare at the DTMCREATE terminal lookup file ,line by line,
C to ascertain the level of DTMCREATE graphics supported by that
C terminal.
C Terminal line name is passed in COMMON/DTMJPI/. Function returns are:
C
C 	-1	= 	could'nt find terminal in lookup file
C        0      =       proposed graphics selection all tickity-boo
C        1      =       proposed graphics selection invalid
C	 2      =       error reading lookup file
C
C Terminal line graphics characteristics in "LSL$LOOKUP:TERMTYPE.DAT"
C may be changed at will by a site manager enabling lines to be swapped 
C without major confusion to DTMCREATE.
C
	IMPLICIT NONE
C
C W/s
	BYTE		CHR	! for reading from TXTBUF
	INTEGER		EQUAL	! return from STR$COMPARE
	INTEGER*2       I	! temp var
	INTEGER*4	LINE	! current line of lookup file
	INTEGER*4       IGRAPH  ! file terminal graphics number
	LOGICAL		INAME   ! we are in the middle of an option name
	LOGICAL		OK,IERR	! function return
	CHARACTER*7     OUR_TERM! terminal name read from file
	INTEGER		OUR_LEN	! its length
	CHARACTER*7     RDNAME  ! terminal name read from file
	LOGICAL		ALPHA	! on Alpha/AXP
C
C Functions:
	INTEGER*4 	FLRLIN	! to read a line from it
	LOGICAL	        RDLONG  ! to real a long integer 
	LOGICAL         RDCHS   ! to read one char. skipping spaces
	LOGICAL         RDCH    ! to read one char.
	INTEGER		SIGCHS	! # of significant chars in string
	LOGICAL		TRNALL	! translate logical name
	LOGICAL		IS_ALPHA_AXP
	INTEGER		STR$COMPARE
C
	INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'
	INCLUDE 'LSL$DTMCREATESYS:DTMJPI.CMN'
	INCLUDE 'LSL$DTMCREATESYS:GRAFDEV.CMN'
	INCLUDE '($SSDEF)/NOLIST'
C
C ......................................................................
C
	LOOKUP = 0			! assume the best
	VT100=.TRUE.
	T4010=.FALSE.
	T4014=.FALSE.
	T4100=.FALSE.
	S6100=.FALSE.
	GPX=.FALSE.
	S7000=.FALSE.
	ALPHA=IS_ALPHA_AXP()
C
C ......................................................................
C Attempt to translate logical name LSL$DTMCREATETERMINAL. If we can
C then we use its translation as our current terminal ident (OUR_TERM)
C thus overcoming the problems of LTxxx idents produced by a terminal
C server.
	OK=TRNALL('LSL$DTMCREATETERMINAL',OUR_TERM)
	IF (OK) THEN				! log name translated!
	   CALL STR$UPCASE(OUR_TERM,OUR_TERM)	! upper case the name
	   OUR_LEN=SIGCHS(OUR_TERM)	   
C
C If no ':' on terminal translated from logical name, put one on
	   IF (OUR_TERM(OUR_LEN:OUR_LEN).NE.':') THEN
	      OUR_LEN=OUR_LEN+1
	      OUR_TERM(OUR_LEN:OUR_LEN)=':'
	   ENDIF
	ELSE
	   IF (OK.NE.SS$_NOLOGNAM) THEN	! report error
	       CALL EXPAND(
     &		'%S translating logical name LSL$DTMCREATETERMINAL',
     &						ERROR)
	       GOTO 80
	   ELSE
	      OUR_TERM=TERMINAL(:TERMLEN)
	      OUR_LEN=TERMLEN
	   ENDIF
	ENDIF

C
C ......................................................................
C Read the lookup file line by line 
	LINE = 0			! init. line counter
10	OK=FLRLIN(,,,IERR)
	IF (.NOT.OK) THEN
	   IF (OK.EQ.LSL__EOF) THEN
	     GOTO 80
	   ELSE
	      CALL WRITEF(
     &		'%S reading lookup file at line %N',ERROR,LINE)
	      CALL LSL_PUTMSG(OK)
	      CALL LSL_ADDMSG(IERR)
	      LOOKUP=2
	      GOTO 100
	   ENDIF
	ENDIF
	LINE = LINE+1
	IF (TXTPTR.EQ.0) GOTO 10  	! blank line
C
	CALL BSLN
	TXTBUF(TXTPTR+1)=0     		! append a null terminator
	IF (RDCHS(CHR)) GOTO 10		! end of line
	IF (CHR.EQ.'!') GOTO 10		! comment  - ignore
C
	CALL BSCH			! backspace one character
	DO 20 I=1,OUR_LEN		
	   IF (RDCH(CHR)) GOTO 10  	! end of line, no tt type after 
	   RDNAME(I:I) = CHAR(CHR)	! make up terminal name
20	CONTINUE
C
C Upper case the name
	CALL STR$UPCASE(RDNAME,RDNAME)
C
C ......................................................................
C
C If all chars of OUR_TERM match, we have found the right line. Now
C read the graphic DEVICE type
C
	EQUAL=STR$COMPARE(OUR_TERM(:OUR_LEN),RDNAME(:OUR_LEN))
	IF (EQUAL.EQ.0) THEN
30	   IF(RDCHS(CHR)) GOTO 70	! read a char., skipping spaces
	   CALL BSCH			! backspace one char.
	   INAME=.FALSE.		! reset inside name flag
	   I=0			 	! and the length counter
40	      IF (RDCH(CHR)) THEN
	         IF (INAME) GOTO 60 	! e.o.l and in a name?
	         GOTO 70
	      ENDIF
C
	      IF (CHR.NE.'!'
     &		 .AND.CHR.NE.9
     &		 .AND.CHR.NE.' '
     &		 .AND.CHR.NE.0) GOTO 50
	      IF (INAME) GOTO 60	! we have a complete name 
	   GOTO 40
50	      INAME=.TRUE.		! we are inside an option name
	      I=I+1
C
C Convert to character
	      RDNAME(I:I)=CHAR(CHR)
	   GOTO 40
C
C ......................................................................
C Upper case the name and then set device type flags as appropriate
60	CALL STR$UPCASE(RDNAME,RDNAME)
	IF (RDNAME(1:5).EQ.'VT100') THEN
	      VT100 =.TRUE.
	   ELSEIF (.NOT.ALPHA.AND.RDNAME(1:5).EQ.'T4100') THEN
	      T4100 =.TRUE.
	      VT100=.FALSE.
	   ELSEIF (.NOT.ALPHA.AND.RDNAME(1:5).EQ.'T4010') THEN
	      T4010 =.TRUE.
	      VT100=.FALSE.
	   ELSEIF (.NOT.ALPHA.AND.RDNAME(1:5).EQ.'T4014') THEN
	      T4014 =.TRUE.
	      VT100=.FALSE.
	   ELSEIF (.NOT.ALPHA.AND.RDNAME(1:5).EQ.'S6100') THEN
	      S6100=.TRUE.
	      VT100=.FALSE.
	   ELSEIF (.NOT.ALPHA.AND.RDNAME(1:5).EQ.'S7000') THEN
	      S7000 =.TRUE.
	      VT100 =.FALSE.
	   ELSEIF (RDNAME(1:3).EQ.'GPX') THEN
	      GPX  =.TRUE.
	      VT100=.FALSE.
	   ENDIF
C
C Invalid graphic option?
	   IF ((RDNAME(1:5).EQ.'NONE').OR.VT100) GOTO 90
	   GOTO 100				! graphic option & tt
	ENDIF	       				!	  are compatible
	GOTO 10
C
C ......................................................................
C
C Errors:
C 1) Error on read..
70	CALL WRITEF('%S reading lookup file at line %N',ERROR,LINE)
	VT100=.TRUE.
	LOOKUP=2
	GOTO 100
C
C 2) OUR_TERM name not found in lookup file
80	LOOKUP = -1	
	VT100=.TRUE.
	GOTO 100
C
C 3) invalid graphics option selected
90	LOOKUP = 1      
	VT100=.TRUE.
C
C ......................................................................
C
100	RETURN
	END
