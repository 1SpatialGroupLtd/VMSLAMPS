C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-11-09 12:07:54.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION READLL(RESULT,NUMVAL)
C
***	IDENT	08OC87
***	MODULE	READLL
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C	Author 	 : D R Catlow
C	Created  : 28 October 85
C	Modified : 09 October 87  - Use with LSLLIB
C
C	Function to read lat/long values and convert to seconds of arc.
C 	Reads a free format angle from TXTC returning TRUE if an error 
C	occurs, FALSE if it all works
C	Up to 4 values may be read by the function.
C
C 	The required format is 
C	[DD]D [MM] [SS] H	where H is hemisphere
C
	IMPLICIT NONE
C
***	COMMON/LSL$CMNLSL:TXTC/
C
C	Arguments:
	INTEGER*4	RESULT(4)	! lat and long in seconds
	INTEGER*4	NUMVAL		! number of values to read
C
C parameters - hemisphere letters (compulsory!)
C
	PARAMETER	POSN = 'N'	! upper case hemisphere letters
	PARAMETER	POSE = 'E'
	PARAMETER	NEGS = 'S'
	PARAMETER	NEGW = 'W'
	PARAMETER	POSNLC = 'n'	! lower case hemisphere letters
	PARAMETER	POSELC = 'e'
	PARAMETER	NEGSLC = 's'
	PARAMETER	NEGWLC = 'w'
C
C 	Functions:
C
	LOGICAL		RDCH	! read a char, exact
	LOGICAL		RDINT	! read a number (int*2)
C
C  	Workspace 
C
	INTEGER*4	I	! counter
	INTEGER*4	ACCUM	! accumulate angle in here
	INTEGER*4	NUMBER
	INTEGER*2	NUM	! an integer
	BYTE		CH	! a character
C
	EQUIVALENCE	(NUM,NUMBER)
C**********************************************************************
C
	READLL = .TRUE.		! be pessimistic
C
	CALL BSLN
C
C	Set to first numeric character (ie skip COVER command)
10	DO 20 I=DCPTR,TXTPTR
	   IF (RDCH(CH))GOTO 110	! error
	   IF (CH.GT.47.AND.CH.LT.58)GOTO 30
20	CONTINUE
C
30	DO 100 I=1,NUMVAL
	   CALL BSCH
C	Read degree part - occupying 3 characters
C
	   ACCUM = 0
C
	   IF ( RDINT(NUM) ) THEN
C	   CALL EXPAND('*** Degrees field of angle blank/missing')
C	   CALL WRITAP(' - angle abandoned')
	      RETURN
	   ENDIF
C
C 	and accumulate our result...
C
	   ACCUM = NUMBER * 3600		! in seconds
C
C	Test if minutes is present
40	   IF(RDCH(CH))THEN
C	  CALL WRITEF('*** Unexpected end of line')
	      GOTO 110
	   ELSE
	      IF(CH.EQ.32)GOTO 40		! space
	      IF(CH.GT.64)GOTO 70		! alpha character
	      IF(CH.LT.48.OR.CH.GT.57)THEN
C	    CALL WRITEF('*** Unexpected character in angle')
	         GOTO 110
	      ENDIF
	      CALL BSCH
	   ENDIF
C 	Minutes
C
	   IF ( RDINT(NUM) ) THEN
C	   CALL EXPAND('*** Minutes field of angle blank/missing')
C	   CALL WRITAP(' - angle abandoned')
	      GOTO 110
	   ENDIF
C
C 	and accumulate...
C
	   ACCUM = ACCUM + NUMBER*60	! in seconds
C
C	Test if seconds is present
50	   IF(RDCH(CH))THEN
C	  CALL WRITEF('*** Unexpected end of line')
	      GOTO 110
	   ELSE
	      IF(CH.EQ.32)GOTO 50		! space
	      IF(CH.GT.64)GOTO 70		! alpha character
	      IF(CH.LT.48.OR.CH.GT.57)THEN
C	    CALL WRITEF('*** Unexpected character in angle')
	         GOTO 110
	      ENDIF
	      CALL BSCH
	   ENDIF
C 	Seconds
C
	   IF ( RDINT(NUM) ) THEN
C	   CALL EXPAND('*** Seconds field of angle blank/missing')
C	   CALL WRITAP(' - angle abandoned')
	      RETURN
	   ENDIF
C
C 	otherwise, accumulate this too
C
	   ACCUM = ACCUM + NUMBER		! seconds
C
C	Hemisphere character
60	   IF (RDCH(CH)) GOTO 110
	   IF(CH.EQ.32)GOTO 60
C
C is it a negative type hemisphere
C
70	   IF(I.EQ.1.OR.I.EQ.3)THEN
	      IF(CH.EQ.'W'.OR.CH.EQ.'w'.OR.CH.EQ.'E'.OR.CH.EQ.'e')THEN
	         CALL WRITEF('Lat and Long values supplied in wrong order')
	         GOTO 110
	      ENDIF
	   ELSE
	      IF(CH.EQ.'N'.OR.CH.EQ.'n'.OR.CH.EQ.'S'.OR.CH.EQ.'s')THEN
	         CALL WRITEF('Lat and Long values supplied in wrong order')
	         GOTO 110
	      ENDIF
	   ENDIF
C
	   IF (CH.EQ.'S'.OR.CH.EQ.'s')THEN
	      ACCUM= -ACCUM 
	      GOTO 80
	   ENDIF
C
	   IF (CH.EQ.'W'.OR.CH.EQ.'w')THEN
	      ACCUM= -ACCUM
	      GOTO 80
	   ENDIF
C
	   IF (CH.EQ.'N'.OR.CH.EQ.'n')GOTO 80
	   IF (CH.EQ.'E'.OR.CH.EQ.'e')GOTO 80

	   GOTO 110
C
C     	We now have a sensible (?) angle 
C
80	   RESULT(I)=ACCUM
	   IF(I.NE.NUMVAL)THEN
90	      IF(RDCH(CH))THEN
	         GOTO 110
C	Move to next numeric value (allows skipping of , and -)
	      ELSE
	         IF (CH.GT.47.AND.CH.LT.58)GOTO 100
	         GOTO 90
	      ENDIF
	   ENDIF
C
100	CONTINUE
C
	READLL = .FALSE.
C
C----------------------------------------------------------------------------
C
110	RETURN
C
	END
