C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1985-09-23 18:41:44.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	PROGRAM P2I
C
***	MODULE	P2I
***	IDENT	23SE85
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
C	Created 				TJH 	23-Sep-1985
C
	INCLUDE 'LSL$CMNVIO:EXPC.CMN'
	INCLUDE 'LSL$CMNVIO:TXTC.CMN'
	INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'
C
C
C sizes of arrays:
	PARAMETER	MHLEN = 350	! map header
	PARAMETER	MDLEN = 31	!     descriptor
	INTEGER*2	MAPHED(MHLEN)	! map header
	INTEGER*2	MAPDES(MDLEN)	!     descriptor
C
C preset workspace:
	INTEGER*2 	IECODE
	INTEGER*2 	IELEN
	INTEGER*2	ISEQ		! for feature seq no
	INTEGER*2	ISTAT(4)	! for IFFFS (preset)
C
	INTEGER   	I,III,J,K
	INTEGER*2	LASLAY		! previous layer number
	INTEGER*2	LAYER		! current layer number
	INTEGER 	LASNOD		! previous node number
	INTEGER		NPTS		! number of points for plotting
	INTEGER*2	NAMLEN	! length of filename
C
C 	character stuff:
	CHARACTER*1	CNULL	! null char. for string termination
	CHARACTER*70	FILENM	! input IFF file name
C
C functions:
	INTEGER		TXTCML	! to read a tt: line
C
C logical:
	LOGICAL*1	RDFILT	! to decode a command line
C
	REAL	  	RANGE(4)	! for IFF range entry
	REAL		CPARR(4,4)	!  "   "  corner points
	REAL		CCARR(2,10)	!  "   "  calib coeffs
	REAL		XYBUF(2,200)	! buffer for ST entries
C
	LOGICAL		FIRST		! .T. - 1st feat. init. range
	LOGICAL		TRIFF		! .T. output to IFF file
	LOGICAL		INFEAT		! .T. when inside a feature
C
C presets:
	DATA		MAPDES(1)/-1/
	DATA		CPARR/0.0,1.0, 0.0,1.0,
     &			      0.0,0.0, 0.0,0.0,
     &			      1.0,0.0, 1.0,0.0,
     &			      1.0,1.0, 1.0,1.0/
	DATA		CCARR/0.0,1.0,8*0.0,
     &			      2*0.0,1.0,7*0.0/
	DATA		ISTAT(1),ISTAT(2),ISTAT(3),ISTAT(4)/5,0,0,0/
	DATA 		CNULL/' '/	
	DATA 		LUN/1/
C
C
C......................................................................
C
C get command line...
10	IERR=TXTCML('P2I> ')
 
C error (or ^ z ), nothing, something
	IF(IERR)20,10,30
 
20	IF(IERR.NE.-10)
     &		 CALL WRITEF(' **** Getcml error %N',IERR)
 
	CALL EXIT
 
30	IF(.NOT.RDFILT(FILENM,70,'lsl$if:iff.BRK',.FALSE.,
     &			.FALSE.,.FALSE.,NAMLEN))GOTO 35
C
C bad file title
	CALL WRITEF(' **** Illegal command line')
	CALL FLTERR(NAMLEN)	! file title error
	GOTO 10
C
C ......................................................................
C
35	CALL WRITEF('+++ Input from .BRK file:  %S', FILENM(:NAMLEN))
	OPEN (UNIT=2,ERR=999,FILE=FILENM(:NAMLEN),STATUS='OLD'
     &		,FORM='FORMATTED')
	GOTO 36
C
999	CALL WRITEF ('Unable to open input file.')
	CALL EXIT
C
36	JJJ=INDEX(FILENM,'.')
	FILENM=FILENM(:JJJ)//'IFF'
	CALL WRITEF('+++ Output to  .IFF file:  %S', FILENM(:NAMLEN))
C
C start the beast up
	CALL IFFOPN(LUN,FILENM)
	CALL IFFSEL(LUN)
C
C Initial layer number
	LAYER=1
	FIRST=.TRUE.
C
C put the standard stuff in
	    CALL IFFRA(RANGE)
	    CALL IFFMH(MAPHED, MHLEN)
	    CALL IFFMD(MAPDES, MDLEN)
C
C Make a suitable NS entry
	    CALL EXPAND
     &       ('Dump from .BRK file')
	    CALL IFFNS(EXPBUF)
	    CALL IFFCC(CCARR)
	    CALL IFFCP(CPARR)
	    LPOSNO=LPOSE
	    CALL IFFNO(1,0,0)
C
C Main loop starts here
10001   READ(2,*,END=104,ERR=1011) N,ITYPE,ZDEF
	      NFEAT=NFEAT+1
	      IPEN=0
	      ISEQ=0
	      CALL IFFNF(NFEAT, ISEQ)
	      CALL IFFFS(ISTAT)
	      CALL IFFTH(24)
C
C Check for no more data
	   IF (N.EQ.0) GOTO 104
	   JJJ=0
	   DO 102 J=1,N
	      READ (2,*,END=104,ERR=1011) (XYBUF(K,JJJ+1),K=1,2),DUMMY
	      JJJ=JJJ+1
	      IF (FIRST) THEN
	   	RANGE(1)=XYBUF(1,1)
	   	RANGE(2)=XYBUF(1,1)
	   	RANGE(3)=XYBUF(2,1)
	   	RANGE(4)=XYBUF(2,1)
	      ENDIF
	      FIRST=.FALSE.
C Determine range
	      IF (XYBUF(1,J).LT.RANGE(1)) RANGE(1)=XYBUF(1,J)
	      IF (XYBUF(1,J).GT.RANGE(2)) RANGE(2)=XYBUF(1,J)
	      IF (XYBUF(2,J).LT.RANGE(3)) RANGE(3)=XYBUF(2,J)
	      IF (XYBUF(2,J).GT.RANGE(4)) RANGE(4)=XYBUF(2,J)
              IF (J.EQ.200) THEN
		CALL IFFST(XYBUF,200,IPEN)  
		JJJ=0
		IPEN=1
	      ENDIF
102	   CONTINUE
              IF (JJJ.GT.0) CALL IFFST(XYBUF,JJJ,IPEN) ! flush buffer 
	      CALL IFFEF
	GOTO 10001
C
C Do IFF house keeping, modifying RANGE, CP's and EO,EM,EJ stuff
104	   CALL IFFPKE(IECODE,IELEN,LPOSNO)
	   IF (IELEN.EQ.-1.OR.IECODE
     &			     .NE.'NO') GOTO 60	! unexpected eof
	   CALL EIHWL(LPOSE,1,3)		! patch EO address
	   CALL IFFEO
	   CALL IFFEM
	   CALL IFFEJ
C
C Range entry
	   CALL IFFRWD
	   CALL IFFNXC('RA',IELEN)
	   IF (IELEN.EQ.-1) GOTO 60		! unexpected eof
	   CALL EIHWR(RANGE,4,1)
C
C CP entry
	   CALL IFFNXC('CP',IELEN)
	   IF (IELEN.EQ.-1) GOTO 60		! unexpected eof
	   CPARR(1,1)=RANGE(1)
	   CPARR(2,1)=RANGE(4)
	   CPARR(1,2)=RANGE(1)
	   CPARR(2,2)=RANGE(3)
	   CPARR(1,3)=RANGE(2)
	   CPARR(2,3)=RANGE(3)
	   CPARR(1,4)=RANGE(2)
	   CPARR(2,4)=RANGE(4)
C
	   DO 50 I=1,4
	      DO 40 J=1,2
		 CPARR(J+2,I) = CPARR(J,I)
40	      CONTINUE
50	   CONTINUE
C
	   CALL EIHWR(CPARR,16,1)	   	   	   
	   GOTO 70
C
C IFF error
60	   CALL WRITEF(
     &		'*** WARNING - Unexpected EOF detected in IFF file')
	   CALL WRITEF(
     &		'              while modifying RA or CP entry')
C
C Close the file
70	   CALL IFFCLO(LUN)
1011	CALL EXIT
	END
