;
; * This file is part of the LAMPS distribution, released as a software
; * preservation project to archive digital history for future historians.
; * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
; *
; * Timestamp of this file for the 2002 release was: 1999-08-11 15:40:06.000000000 +0100
; *
; * This program is free software: you can redistribute it and/or modify
; * it under the terms of the GNU General Public License as published by
; * the Free Software Foundation, version 3.
; *
; * This program is distributed in the hope that it will be useful, but
; * WITHOUT ANY WARRANTY; without even the implied warranty of
; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
; * General Public License for more details.
; *
; * You should have received a copy of the GNU General Public License
; * along with this program. If not, see http://www.gnu.org/licenses/.
;
	.TITLE	PANIO
	.IDENT	/11AU99/
 
; Copyright Laser-Scan Laboratories Limited, Cambridge, England.
;
; Author: D. Meader
;
;MOD	LOSECH added				 DM	03-Apr-1985
;MOD	INCH added, generally tidied		 DM	02-Apr-1985
;MOD	Breakpoint traps removed		 DM	05-Jul-1984
;	Created from RFs rude routines		 DM	27-Jun-1984
;
; Passall terminal read/write routines for PANACEA.
 
	.LIBRARY/LSL$LIBRARY:LSLMACLIB/

	CODE_PSECT	PANIO

; OK=INITEK() - Assign a channel to LSL$TK

 	.ENTRY INITEK,^M<>
	$ASSIGN_S	DEVNAM=TERM_NAME,-
			CHAN=CHANNEL
	BLBC	R0,10$
	CLRL	BUF_PTR		; initialise the buffer pointer
10$:	RET
 
; OK=INCH(ICH) - Read a byte from LSL$TK, returning it in ICH

	.ENTRY INCH,^M<>
	$QIOW_S	EFN=#13,-
		CHAN=CHANNEL,-
		FUNC=#IO$_READVBLK!IO$M_NOECHO!IO$M_NOFILTR,-
		P1=@4(AP),-
		P2=#1
	RET
 
; OK=OUCH(ICH) - buffer up a byte ICH, sending it to LSL$TK when the
;		 buffer is full

	 .ENTRY	OUCH,^M<>
	MOVL	BUF_PTR,R0		; get current buffer pointer
	MOVB	@4(AP),BYTE_BUFFER[R0]	; put new byte into it
	INCL	BUF_PTR			; bump the buffer pointer
	CMPL	BUF_PTR,#BUF_SIZ	; buffer full ?
	BGEQU	10$			; yes - flush it
	MOVL	#1,R0			; no - indicate success
	RET
10$:	CALLS	#0,FLUSH
	RET

; OK=FLUSH() - Force out buffer

	.ENTRY	FLUSH,^M<>
	$QIOW_S	EFN=#12,-
		CHAN=CHANNEL,-
		FUNC=#IO$_WRITEVBLK!IO$M_NOFORMAT,-
		P1=BYTE_BUFFER,-
		P2=BUF_PTR
	BLBC	R0,10$
	CLRL	BUF_PTR
10$:	RET
 
; OK=LOSECH() - Lose any redundant characters returned by the Tek

	.ENTRY LOSECH,^M<>
	$SETIMR_S	EFN=#13,-	; wait for 20 milliseconds
			DAYTIM=MS20
	BLBC	R0,10$
	$WAITFR_S	EFN=#13
	BLBC	R0,10$
	$QIOW_S	EFN=#13,-
		CHAN=CHANNEL,-
		FUNC=#IO$_READVBLK!IO$M_NOECHO!IO$M_NOFILTR!IO$M_TIMED,-
		IOSB=ISB,-
		P1=LOSEBF,-		; buffer address
		P2=#LOSELN,-		; buffer length
		P3=#0			; zero time-out
	BLBC	R0,10$			; successfully queued ?
	MOVZWL	ISB,R0
	CMPL	R0,#SS$_TIMEOUT		; ok if time-out
	BNEQ	10$
	MOVL	#SS$_NORMAL,R0
10$:	RET

	DATA_PSECT	PANIO

; workspace
TERM_NAME:	.ASCID	/LSL$TK/
CHANNEL:	.BLKW	1
BUF_PTR:	.BLKL	1
ISB:		.BLKL	2		; I/O status block
MS20:		.LONG	-200000,-1	; 20ms wait
 
BUF_SIZ = 128				; buffer for OUCH
BYTE_BUFFER:	.BLKB	BUF_SIZ
LOSELN = 80				; buffer for LOSECH
LOSEBF:		.BLKB	LOSELN

	.PSECT
	.END
