C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-01-26 12:49:54.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE INWORD(LONGWORD,WORD,MSG)
C
***	IDENT	08JL86
***	MODULE	INWORD
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created for LITES2			RWR	 5-Nov-1984
C	Adapted for FPP				RWR	 3-Jun-1986
C
C Description
C
C	This subroutine examines the bits of a word to output
C	where the state changes within it
C
	IMPLICIT NONE
C
C Arguments
C
C ---- input
C
	INTEGER*4	LONGWORD	! word of bitmap to be examined
	INTEGER*4	WORD		! position of LONGWORD in bitmap
	CHARACTER*(*)	MSG		! message to pass to OTPLSTRG
C
C Included Parameter Files
C
C
C Common Blocks
C
***     COMMON/HERE:BTMAPDIS/		! global variables for output
	! of bit map
C
C Functions called
C
	INTEGER*4	LIB$EXTZV
C
C Local Variables
C
	INTEGER*4	I		! counter
	INTEGER*4	BIT		! current bit
	INTEGER*4	NUMBER		! number represented by BIT
C
C Start of subroutine
C
	NUMBER=WORD*32-33		! zero number for this word
C
	DO 10, I=0,31			! examine each bit in turn
C
	   NUMBER=NUMBER +1		! increment number
C
C ignore bits above top of bit map
C
	   IF (NUMBER.GT.TOPBITMP) THEN
	      IF (INRANGE) SECOND=NUMBER-1
	      GOTO 20
	   ENDIF
C
	   BIT=LIB$EXTZV(I,1,LONGWORD)	! extract bit
C
	   IF (BIT.EQ.1) THEN		! bit is set
	      IF (.NOT.INRANGE) THEN	! change of state
	         CALL OTPLSTRG(MSG)	! output last range
	         FIRST=NUMBER		! and start a new range
	         INRANGE=.TRUE.
	      ENDIF
	   ELSE				! bit is not set
	      IF (INRANGE) THEN		! change of state
	         SECOND=NUMBER-1	! last number was end of range
	         INRANGE=.FALSE.
	      ENDIF
	   ENDIF
10	CONTINUE			! end of loop
C
C Return
C
20	CONTINUE
	RETURN
	END
