C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-01-26 13:47:46.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION INSERT_STRING(NF,NEW_FEATURE)
C
***	MODULE	INSERT_STRING
***	IDENT	28JL87
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Created 					TJH 28-Jul-1987
C
C Transfer data from /COORDS/ buffers into the triangulation
C
C Function returns TRUE if succesful, otherwise FALSE
C 
	IMPLICIT NONE
C
C Arguments:
	INTEGER	  NF(2)		! IFF feature serial /internal #
C
C W/s
	LOGICAL	  NEW_FEATURE	! new IFF feature?
	INTEGER	  KOND		! point insertion counter
	INTEGER	  I,J,K,L,M	! temporary variables
	LOGICAL	  OK		! for error reporting
	BYTE	  IFCODE	! DTM feature code
	INTEGER	  IDAT(3)	! a point as scaled integer
	INTEGER	  JDAT(3)	! last point as scaled integer
	LOGICAL	  ZBITPAT1	! Z coordinate as a bit pattern
	REAL	  D(4)		! temp coords
	EQUIVALENCE(ZBITPAT1,D(3))
	LOGICAL	  ZBITPAT2	! Z coordinate as a bit pattern
	EQUIVALENCE(ZBITPAT2,D(4))
C
C Parameters
	INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'
C
C Common blocks
	INCLUDE 'LSL$CMNTRIEDIT:COMMAND.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:COORDS.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:DATQ.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:TPOLGY.CMN'
	INCLUDE 'LSL$CMNIFF:CB.STR'
C
C Function:
	LOGICAL	INSRTP		! inserts point into triangulation
C
C ......................................................................
C
	INSERT_STRING=.TRUE.		! assume success
C
C If this is a ridge or river string set the appropriate FC
	IF (RIDPTS) IFCODE=2			! bit 1
	IF (RIVPTS) IFCODE=1			! bit 0
C
C Read the string point by point. KOND indicates which point in
C the string has been read, allowing for breaks where the string
C passes outside the map area.
	KOND=0
	DO 20 J=1,NCOORD
C
C Perform any height alterations. Omit any points with the IFF "unset" 
C flag height.
	   IF (ABS(ITYP).LE.2) THEN
	      D(1)=TBUF4(1,J)
	      D(2)=TBUF4(2,J)
	      D(3)=TBUF4(3,J)
	      IF (ZBITPAT1.EQ.IFF_ABSENT) GOTO 20 ! test as bit pattern
	      IF (MULT.OR.DIVIDE) D(3)=D(3)*MFACTR
	      IF (FEET2M) D(3)=D(3)/3.2808455
	      IF (M2FEET) D(3)=D(3)*3.2808455
	   ELSE
	      D(1)=TBUF4(1,J)
	      D(2)=TBUF4(2,J)
	      D(3)=TBUF4(3,J)
	      D(4)=TBUF4(4,J)
	      IF (ZBITPAT1.EQ.IFF_ABSENT) GOTO 20 ! test as bit pattern
	      IF (ZBITPAT2.EQ.IFF_ABSENT) GOTO 20 ! uncomment for cliffs
	      IF (MULT.OR.DIVIDE) THEN
	         D(3)=D(3)*MFACTR
	         D(4)=D(4)*MFACTR
	      ENDIF
	      IF (FEET2M) THEN
	         D(3)=D(3)/3.2808455
	         D(4)=D(4)/3.2808455
	      ENDIF
	      IF (M2FEET) THEN
	         D(3)=D(3)*3.2808455
	         D(4)=D(4)*3.2808455
	      ENDIF
	   ENDIF
	   DO 10 K=1,3
	      CALL CONVER(D(K),IDAT(K),K)
10	   CONTINUE
C**********************************************************************
C When cliff insertion is implemented IDAT and JDAT need a 4th element
C which needs converting here.
C**********************************************************************
C
C If this is a ridge/valley breakline line mark the z value negative
	   IF (ITYP.LT.0) IDAT(3)=-IDAT(3)
C Insert point into triangulation, with a marker indicating whether
C this is first point in the string. IDAT is the incoming point,
C JDAT is the last point on the string unless KOND is zero, in
C which case it is unset. Function returns .T. if we try to insert
C across a zero width triangle - most probably a cliffline!
	   IF (INSRTP(IDAT,JDAT,KOND,IFCODE,NEW_FEATURE)) GOTO 30
C Get next point
20	CONTINUE
	GOTO 40
C
C ......................................................................
C
30	INSERT_STRING=.FALSE.
40	RETURN
	END
