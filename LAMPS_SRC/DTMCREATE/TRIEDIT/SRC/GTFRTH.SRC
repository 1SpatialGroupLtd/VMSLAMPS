C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-01-26 13:39:20.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE GTFRTH(NODA,NODB,NODC,NODD)
C
***	MODULE	GTFRTH
***	IDENT	07DE87
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	Converted for TRIEDIT			TJH	07-Dec-1987
CMOD	Bug fix (I-1 ==> I+1); tidied		 DM	17-Jul-1984
CMOD    NTEM dimensioned to NTMSIZ via DIMS.PAR  DM     05-Jul-1984
CMOD	Messages standardised			 DM	29-May-1984
C	Standardised				TJH 	25-May-1984
C
C Given an edge (NODA to NODB), and a known third point (NODC)
C find the other third point (NODD) on the far side of the edge.
C
C Parameters:
	INCLUDE 'LSL$CMNTRIEDIT:TRIEDITMSG.PAR'
	INCLUDE 'LSL$CMNTRIEDIT:DIMS.PAR'
C
C Common:
	INCLUDE 'LSL$CMNTRIEDIT:DATQ.CMN'
	INCLUDE 'LSL$DTMCREATESYS:MESSAGE.CMN'
C
C W/s:
	INTEGER	NTEM(NTMSIZ)
C
C ......................................................................
C
C Set NODD to a value it can't possibly have
	NODD=-1
C
C Pick up list of neighbours for NODA, and find the points either
C side of NODB. The one we want is the one that is not NODC.
	CALL GETNAY(NODA,NTEM,NTMSIZ,NUM)
C
C Check for case that NODA and NODB are imaginary points
	IF (NODA.GT.LIMPOL.OR.NODB.GT.LIMPOL) GOTO 10
C
C Yes they are imaginary, are they next to each other?
	IF (IABS(NODA-NODB).LE.1) THEN
C
C We are trying to go outside the imaginary frame round the area.
	   CALL LSL_GETMSG(TRIEDIT__LOST,MESSAGE,MESLEN)
	   CALL ALARMS(1,0,MESSAGE(:MESLEN)//' - GTFRTH')
	ENDIF
C
C Check for the case where NODB is the first and last node - this
C complicates the position of the nodes either side
10	IF (NODB.NE.NTEM(1)) GOTO 20
C
C NODB is the start/end of rotation node, so the two to check are
C the second and the penultimate
	IF (NTEM(2).NE.NODC) NODD=NTEM(2)
	IF (NTEM(NUM-1).NE.NODC) NODD=NTEM(NUM-1)
	GOTO 50
C
C Normal case of looking either side of NODB in the list. Find NODB in
C the list
20	DO 30 I=1,NUM
	   IF (NTEM(I).EQ.NODB) GOTO 40
30	CONTINUE
C
C KIN not found - not possible?
	CALL LSL_GETMSG(TRIEDIT__LIST,MESSAGE,MESLEN)
	CALL ALARMS(1,0,MESSAGE(:MESLEN)//' - GTFRTH')
C
C Get NODD as the node before or after NODB in the list
40	IF (NTEM(I-1).NE.NODC) NODD=NTEM(I-1)
	IF (NTEM(I+1).NE.NODC) NODD=NTEM(I+1)
C
C Check for sensible NODD value.
50	IF (NODD.EQ.-1) THEN
	   CALL LSL_GETMSG(TRIEDIT__LOST4TH,MESSAGE,MESLEN)
	   CALL ALARMS(1,0,MESSAGE(:MESLEN)//' - GTFRTH')
	ENDIF
	RETURN
	END
