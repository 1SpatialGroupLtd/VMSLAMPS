;
; * This file is part of the LAMPS distribution, released as a software
; * preservation project to archive digital history for future historians.
; * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
; *
; * Timestamp of this file for the 2002 release was: 1999-08-25 11:52:24.000000000 +0100
; *
; * This program is free software: you can redistribute it and/or modify
; * it under the terms of the GNU General Public License as published by
; * the Free Software Foundation, version 3.
; *
; * This program is distributed in the hope that it will be useful, but
; * WITHOUT ANY WARRANTY; without even the implied warranty of
; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
; * General Public License for more details.
; *
; * You should have received a copy of the GNU General Public License
; * along with this program. If not, see http://www.gnu.org/licenses/.
;
	.TITLE	TTEMUL
	.IDENT	/25AU99/
;
; Copyright Laser-Scan Laboratories Limited, Cambridge, England.
;
; Author: D. Meader
;
;MOD	WKSLIB based WKTTEM added for S6100	TJH	12-Aug-1986
;MOD	R5 preserved in VSALOF, VSALFC & VSALON	 DM	04-Apr-1986
;MOD	More devices supported by TKTTEM	 DM	04-Apr-1985
;MOD	VSALFC added				 DM	04-Oct-1984
;MOD	TKTTEM added				 DM	05-Jul-1984
;	Created 				 DM	14-May-1984
;
; Terminal emulation routine for the graphics display.
; Characters typed at the keyboard are reported on the graphics screen
; (at the current writing position).

	.LIBRARY/LSL$LIBRARY:LSLMACLIB/

	DATA_PSECT	VS

	$DSCDEF

IPIOSB:	.BLKQ	1		; input i/o status block
IPBUFF:	.BLKB	1		; input buffer
IPSAVE:	.BLKB	1		; saved input buffer

OPDESC:	.WORD	1		; descriptor for output to screen
	.BYTE	DSC$K_DTYPE_T	; type TEXT
	.BYTE	DSC$K_CLASS_S	; class STRING
	.ADDRESS IPBUFF

TMASK:	.QUAD	0		; terminator bit mask
TTNAME:	.ASCID	/TT/

	$IODEF

IPQIO:	$QIO	FUNC=IO$_READVBLK!IO$M_NOECHO!IO$M_NOFILTR, -
		IOSB=IPIOSB, -
		EFN=11, -
		P1=IPBUFF, -
		P2=1, -
		P3=0, -
		P4=TMASK
IPCHAN=IPQIO+QIO$_CHAN

;
; for flushing sigmex 6100 series text output
IWKID:	.LONG	1			; workstation ID (not used)
IDUMMY: .LONG	0			; control flags (not used)
IXPOS:	.LONG	0			; text X location
IYPOS:	.LONG	0			; text Y location
CSIZ:	.LONG	0			; character spacing
CCOL:	.LONG	15			; character colour on Sigmex 6100

MBYX:	.FLOAT	9.0			; width of one character
MBYY:	.FLOAT	0.0

	CODE_PSECT	VS

;
; status=ASNCHN() - assign a channel for input
;
	.ENTRY	ASNCHN,^M<>
	$ASSIGN_S	DEVNAM=TTNAME, -
			CHAN=IPCHAN
	RET
;
; status=VSTTEM(BUFFER,NCHARS) - characters are read from the terminal,
; displayed on the graphics screen and appended to BUFFER. The routine
; returns when a terminator is read, leaving the number of characters
; in NCHARS. The Sigma has rather a weird character set, so we do the
; best we can for DELETE.
;
	.ENTRY	VSTTEM,^M<R2,R3,R4,R5>
	MOVL	4(AP),R2		; remember address of descriptor
	MOVZWL	DSC$W_LENGTH(R2),R3	; length of BUFFER
	MOVL	DSC$A_POINTER(R2),R5	; address of actual text
	CLRL	R2			; pointer into text (char count)
	CLRL	R4			; 'had delete ?' flag

10$:	$QIOW_G	IPQIO			; queue input (& wait for some)
	BLBC	R0,15$			; OK ?

	CMPB	IPBUFF,#26		; got ^Z ?
	BNEQ	12$
	MOVL	#RMS$_EOF,R0		; set up status
	BRB	80$			; for return
12$:	CMPB	IPBUFF,#27		; got <ESC> ?
	BNEQ	20$
	MOVB	#36,IPBUFF		; echo it as a dollar sign
	PUSHAL	OPDESC			; send character to the Sigma
	CALLS	#1,G^VSCHRS
	CALLS	#0,G^VSGEN
	BRB	80$			; and terminate

15$:	MOVZWL	IPIOSB,R0		; move QIO status code to R0
80$:	MOVL	R2,@8(AP)		; return number of chars read
	RET

20$:	CMPB	IPBUFF,#32		; got a control character ?
	BLSS	80$			; yes - treat it as a terminator

	CMPB	IPBUFF,#127		; got DELETE ?
	BNEQ	40$
	TSTL	R2			; already at start of line ?
	BEQL	10$			; yes - ignore the DEL
	TSTL	R4			; no - already deleting ?
	BLSS	30$
	MNEGL	#1,R4			; set the flag
	MOVB	#124,IPBUFF		; output a '|' first time
	PUSHAL	OPDESC			; send character to the Sigma
	CALLS	#1,G^VSCHRS		; (relies on VSLIB buffering)
30$:	MOVB	-(R2)[R5],IPBUFF	; output the deleted character
	BRB	70$

40$:	INCL	R4			; bump the 'had delete ?' flag
	BNEQ	50$			; was it set ?
	MOVB	IPBUFF,IPSAVE		; yes - output trailing '|'
	MOVB	#124,IPBUFF
	PUSHAL	OPDESC			; send character to the Sigma
	CALLS	#1,G^VSCHRS		; (relies on VSLIB buffering)
	MOVB	IPSAVE,IPBUFF		; restore typed character
50$:	CMPL	R2,R3			; room in BUFFER for new char ?
	BLSS	60$
	MOVB	#127,IPBUFF		; no - output a blob
	BRB	70$
60$:	MOVB	IPBUFF,(R2)+[R5]	; put character into BUFFER
70$:	PUSHAL	OPDESC			; send character to the Sigma
	CALLS	#1,G^VSCHRS
	CALLS	#0,G^VSGEN
	BRW	10$			; go back for next character

;
; CALL VSALOF - disable the alpha screen (if present).
;
	.ENTRY	VSALOF,^M<R4,R5>
	MOVL	#^X2401,R4		; set up the intruction
	JSB	$VSCBFW			; buffer the instruction
	MOVL	#^X01F8,R4		; Video Status Register 1
	JSB	$VSCBFW
	CLRL	R4			; Video Status Register 2
	JSB	$VSCBFW
	CLRL	R4			; Video Status Register 3
	JSB	$VSCBFW
	JSB	$VFLUSH			; flush it all out
	RET

;
; CALL VSALFC - disable the alpha screen (if present), leaving up
;		the cursor.
;
	.ENTRY	VSALFC,^M<R4,R5>
	MOVL	#^X2401,R4		; set up the intruction
	JSB	$VSCBFW			; buffer the instruction
	MOVL	#^X01F8,R4		; Video Status Register 1
	JSB	$VSCBFW
	MOVL	#^X0008,R4		; Video Status Register 2
	JSB	$VSCBFW
	CLRL	R4			; Video Status Register 3
	JSB	$VSCBFW
	JSB	$VFLUSH			; flush it all out
	RET
;
; CALL VSALON - enable the alpha screen (if present).
;
	.ENTRY	VSALON,^M<R4,R5>
	MOVL	#^X2401,R4		; set up the intruction
	JSB	$VSCBFW			; buffer the instruction
	MOVL	#^X01FF,R4		; Video Status Register 1
	JSB	$VSCBFW
	CLRL	R4			; Video Status Register 2
	JSB	$VSCBFW
	CLRL	R4			; Video Status Register 3
	JSB	$VSCBFW
	JSB	$VFLUSH			; flush it all out
	RET

;
; status=TKTTEM(BUFFER,NCHARS,MUART) - chars are read from the terminal,
; displayed on the graphics screen and appended to BUFFER. The routine
; returns when a terminator is read, leaving the number of characters
; in NCHARS. If MUART, use WOSPLIB to display the characters.
;

	.ENTRY	TKTTEM,^M<R2,R3,R4,R5>
	MOVL	4(AP),R2		; remember address of descriptor
	MOVZWL	DSC$W_LENGTH(R2),R3	; length of BUFFER
	MOVL	DSC$A_POINTER(R2),R5	; address of actual text
	CLRL	R2			; pointer into text (char count)
	CLRL	R4			; 'had delete ?' flag

10$:	$QIOW_G	IPQIO			; queue input (& wait for some)
	BLBC	R0,15$			; OK ?

	CMPB	IPBUFF,#26		; got ^Z ?
	BNEQ	12$
	MOVL	#RMS$_EOF,R0		; set up status
	BRB	80$			; for return
12$:	CMPB	IPBUFF,#27		; got <ESC> ?
	BNEQ	20$
	MOVB	#36,IPBUFF		; echo it as a dollar sign
	BSBB	$TOTEK			; send character to the Tek
	BRB	80$			; and terminate

15$:	MOVZWL	IPIOSB,R0		; move QIO status code to R0
80$:	MOVL	R2,@8(AP)		; return number of chars read
	RET

20$:	CMPB	IPBUFF,#32		; got a control character ?
	BLSS	80$			; yes - treat it as a terminator

	CMPB	IPBUFF,#127		; got DELETE ?
	BNEQ	40$
	TSTL	R2			; already at start of line ?
	BEQL	10$			; yes - ignore the DEL
	TSTL	R4			; no - already deleting ?
	BLSS	30$
	MNEGL	#1,R4			; set the flag
	MOVB	#92,IPBUFF		; output a '\' first time
	BSBB	$TOTEK			; send character to the Tek
30$:	MOVB	-(R2)[R5],IPBUFF	; output the deleted character
	BRB	70$

40$:	INCL	R4			; bump the 'had delete ?' flag
	BNEQ	50$			; was it set ?
	MOVB	IPBUFF,IPSAVE		; yes - output trailing '\'
	MOVB	#92,IPBUFF
	BSBB	$TOTEK			; send character to the Tek
	MOVB	IPSAVE,IPBUFF		; restore typed character
50$:	CMPL	R2,R3			; room in BUFFER for new char ?
	BLSS	60$
	MOVB	#42,IPBUFF		; no - output a blob
	BRB	70$
60$:	MOVB	IPBUFF,(R2)+[R5]	; put character into BUFFER
70$:	BSBB	$TOTEK			; send character to the Tek
	BRW	10$			; go back for next character

; subroutine to send the character to the Tek.

$TOTEK:	.JSB_ENTRY
	BLBC	@12(AP),10$		; decide whether to use WOSPLIB
	PUSHR	#^M<R4>			; WOSPLIB clobbers this
	PUSHAL	OPDESC			; send character to the Tek
	CALLS	#1,G^CHARS
	PUSHAL	MBYY			; advance ready for next char
	PUSHAL	MBYX
	CALLS	#2,G^MOVBY
	CALLS	#0,G^LDWAIT
	POPR	#^M<R4>
	RSB

10$:	PUSHAL	IPBUFF			; send character to the Tek
	CALLS	#1,G^OUCH
	CALLS	#0,G^FLUSH
	RSB
;
; status=WKTTEM(BUFFER,NCHARS,X_TEXT_POSN,Y_TEXT_POSN,CHAR_WIDTH) 
; Characters are read from the terminal displayed on the graphics
; screen and appended to BUFFER. The routin returns when a terminator
; is read, leaving the number of characters in NCHARS. 
;
	.ENTRY	WKTTEM,^M<R2,R3,R4,R5>
	MOVL	4(AP),R2		; remember address of descriptor
	MOVZWL	DSC$W_LENGTH(R2),R3	; length of BUFFER
	MOVL	DSC$A_POINTER(R2),R5	; address of actual text
	CLRL	R2			; pointer into text (char count)
	CLRL	R4			; 'had delete ?' flag
;
; get start x,y position for text echo
	MOVL	@12(AP),IXPOS		; X position
	MOVL	@16(AP),IYPOS		; Y position
	MOVL	@20(AP),CSIZ		; character width

10$:	$QIOW_G	IPQIO			; queue input (& wait for some)
	BLBC	R0,15$			; OK ?

	CMPB	IPBUFF,#26		; got ^Z ?
	BNEQ	12$
	MOVL	#RMS$_EOF,R0		; set up status
	BRB	80$			; for return
12$:	CMPB	IPBUFF,#27		; got <ESC> ?
	BNEQ	20$
	MOVB	#36,IPBUFF		; echo it as a dollar sign
	BSBW	$TOSIG			; send character to the Sigmex
	BRB	80$			; and terminate
	
15$:	MOVZWL	IPIOSB,R0		; move QIO status code to R0
80$:	MOVL	R2,@8(AP)		; return number of chars read
	MOVL	IXPOS,@16(AP)		; return new X write position
	RET

20$:	CMPB	IPBUFF,#32		; got a control character ?
	BLSS	80$			; yes - treat it as a terminator

	CMPB	IPBUFF,#127		; got DELETE ?
	BNEQ	40$
	TSTL	R2			; already at start of line ?
	BEQL	10$			; yes - ignore the DEL

30$:	MOVB	-(R2)[R5],IPBUFF	; output the deleted character
	MOVL	#0,CCOL			; assuming 0 is background
	PUSHAL	CCOL
	CALLS	#1,G^WSTXCI		; set text colour to background
	SUBL2	CSIZ,IXPOS		; decrement x position by CSIZ
	BSBW	$TOSIG			; send character to the Sigmex
	SUBL2	CSIZ,IXPOS		; decrement x position by CSIZ
	MOVL	#15,CCOL		; assuming 15 is text colour
	PUSHAL	CCOL
	CALLS	#1,G^WSTXCI		; restore text colour
	BRW	10$			; go back for next character

40$:	CMPL	R2,R3			; room in BUFFER for new char ?
	BLSS	60$
	MOVB	#127,IPBUFF		; no - output a blob
	BRB	70$
60$:	MOVB	IPBUFF,(R2)+[R5]	; put character into BUFFER
70$:	BSBB	$TOSIG			; send character to the Sigmex
	BRW	10$			; go back for next character

; subroutine to send the character to the Sigmex 61xx

$TOSIG:	.JSB_ENTRY
	PUSHAL	OPDESC			; send character to the Sigmex
	PUSHAL	IYPOS			; at this x,y
	PUSHAL	IXPOS			;            position
	CALLS	#3,G^WTX		; using WKSLIB,s WTX
	PUSHAL	IDUMMY			; control flags (not used)
	PUSHAL	IWKID			; workstation ID (not used)
	CALLS	#2,G^WUWK		; flush echo
	ADDL2	CSIZ,IXPOS		; increment x position by CSIZ

	RSB

	.END
