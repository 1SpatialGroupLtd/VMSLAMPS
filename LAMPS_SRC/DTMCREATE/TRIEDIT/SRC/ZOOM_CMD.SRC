	SUBROUTINE ZOOM_CMD(IX,IY,IZOOM)
C
***	MODULE	ZOOM_CMD
***	IDENT	21DE87
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
C Routine to get zoom window limits and then to redraw the screen
C
	IMPLICIT NONE
C
C Arguments (in):
	INTEGER	IX,IY			! Centre of ZOOM (screen units)
	INTEGER	IZOOM			! zoom flag
C
C W/s:
	INTEGER	JA,IA			! zoom xmin ymin
	INTEGER	JB,IB			! zoom xmzx ymax
	INTEGER JLC_ZOO			! zoom x size
	INTEGER JLR_ZOO			! zoom y size
	INTEGER	I,IOPT			! temp vars
	INTEGER	IX1,IY1,IX2,IY2		! zoom limits (screen units)
	BYTE	CH			! a character from TXTBUF
	REAL	ZFACTOR			! the zoom factor
	INTEGER	GINPX,GINPY		! cursor posn - integer units
	INTEGER	IXMIN,IXMAX,IYMIN,IYMAX
C
C Functions:
	LOGICAL	RDREAL
	LOGICAL	RDCHS
C
C Parameters:
	INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'
C
C Common:
	INCLUDE 'LSL$CMNTRIEDIT:DATQ.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:CONTR.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:RCONVI.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:ANNOT.CMN'
	INCLUDE 'LSL$CMNLSL:CMDCOM.CMN'
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'
C
C ......................................................................
C
C
C See if the user has specified a zoom factor on the command line. If
C not assume a X 3 zoom.
	IF (CMDRCT.EQ.0) THEN
	   ZFACTOR=5.0
	ELSE
	   IF (REALAR(1).LT.0.01.OR.REALAR(1).GT.100.0) THEN
	      CALL OUTOPT(WARNING//'Argument out of range')
	      CALL OUTOPT('ZOOM command ignored')
	      GOTO 10
	   ELSE
	      ZFACTOR=REALAR(1)
	   ENDIF
	ENDIF
C
C Convert cursor position into integer units
	CALL CONPOS(IX,IY,IX,IY)
C
C Centre new zoom window about the cursor position (GIXPX,GINPY)	
	JLR_ZOO=JLR/ZFACTOR
	JLC_ZOO=JLC/ZFACTOR
	JA=IX-JLC_ZOO/2
	IA=IY-JLR_ZOO/2
	JB=IX+JLC_ZOO/2
	IB=IY+JLR_ZOO/2
C
C Check that these are in range and truncate if not
	CALL CONVER(VMIN(1),IXMIN,1)	
	JA=MAX(IXMIN,JA)
	CALL CONVER(VMIN(2),IYMIN,2)	
	IA=MAX(IYMIN,IA)
	CALL CONVER(VMAX(1),IXMAX,1)	
	JB=MIN(IXMAX,JB)
	CALL CONVER(VMAX(2),IYMAX,2)
	IB=MIN(IYMAX,IB)
C
C......Save previous screen increments, and
C......corresponding integer scaled limits ready for a mooz etc
	JSRP=JSR
	JSCP=JSC
	JLRP=JLR
	JLCP=JLC
C......Calculate integer scaled range of zoom window that will replace
C......the present limits
	JSR=IA
	JLR=IB-IA
	JFR=IB
	JSC=JA
	JLC=JB-JA
	JFC=JB
C
C Compute which and how many points lie within the presently specified
C window. This is taken to mean not only those that lie within the
C window itself, but also those whose polygon enclosing rectangles
C cover the window. This ensures that we do not miss finding lines
C that cross the window but do not have nodes inside the window.
	CALL WINDOW(0)
C
C Update the picture
	CALL UPDATE(6,IZOOM)
C Plot zoom position on contour map and points, using the window
C object.
	CALL POSCON(IX1,IY1,JSC,JSR)
	CALL POSCON(IX2,IY2,JFC,JFR)
	CALL FRAME(IX1,IX2,IY1,IY2,4)
10	RETURN
	END
