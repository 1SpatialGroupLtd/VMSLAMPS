C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1999-08-24 15:55:44.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION NAYCON(TRITLE,TRIFF)
C
***	MODULE	NAYCON
***	IDENT	24AU99
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	Converted for TRIEDIT			TJH	07-Dec-1987
CMOD	RANGE now uses window limits
C	EO address now patched into NO entry	TJH	26-Feb-1986
CMOD	Option to output to IFF file added	TJH	19-Sep-1985
CMOD	NTEM dimensioned to NTMSIZ via DIMS.PAR	 DM	05-Jul-1984
CMOD	Optimized a bit; call to OUTBUF added	 DM	06-Jun-1984
CMOD	NAYB now in MAC		 		 DM	29-May-1984
C	Standardised				TJH 	25-May-1984
C
C Plot neighbour connections, based on what is visible in the window
C Returns .true. if all is well
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'
	INCLUDE 'LSL$CMNTRIEDIT:TRIEDITMSG.PAR'
	INCLUDE 'LSL$CMNTRIEDIT:DIMS.PAR'
C
C Common:
	INCLUDE 'LSL$CMNTRIEDIT:CONTR.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:COMMAND.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:DATQ.CMN'
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'
	INCLUDE 'LSL$CMNIFF:MD2DES.CMN'
	INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE 'LSL$DTMCREATESYS:IOLUNS.CMN'
	INCLUDE 'LSL$DTMCREATESYS:DTMJPI.CMN'
	INCLUDE 'LSL$DTMCREATESYS:MESSAGE.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:IFCTRL.CMN'
C
C W/s:
	INTEGER		NODE,LASNOD	! current, previous node
	INTEGER		NUMBER		! number of neighbours
	INTEGER		LASTL		! last used line type
	LOGICAL		OK		! function return
	INTEGER*2 	IECODE
	INTEGER*2 	IELEN
	INTEGER*2	ISEQ		! for feature seq no
	INTEGER*2	ISTAT(4)	! for IFFFS (preset)
	INTEGER		INSIDE		! for inside window test
	INTEGER		NUMSTS		! number of STs in IFF feature
	INTEGER   	I,III,J,K,L
	INTEGER*2	LASCOD		! previous feature code number
	REAL		XYBUF(2,5)	! buffer for ST entries
	INTEGER*2	NFEAT		! number of IFF features
	LOGICAL		FIRST		! .T. - 1st feat. init. range
	LOGICAL		TRIFF		! .T. output to IFF file
C
	DATA		ISTAT/4*0/
C
	INTEGER		NAYS(NTMSIZ)
	CHARACTER*(*)	TRITLE		! IFF file-spec
C
C
C Functions:
	LOGICAL	HADCTRLC		! had CTRL/C?
	LOGICAL	IFINIT			! starts an IFF file
C
C......................................................................
C	
	NAYCON=.TRUE.			! assume success
C Are there any points in the window store?
	IF (NPINW.LE.0) GOTO 90
	LASTL=-32768
C
C Output to IFF file?
	IF (TRIFF) THEN
C Calculate the current window limits for the IFF range
	   CALL IFF_VALUE(RANGE(1),JSC,1)
	   CALL IFF_VALUE(RANGE(2),JFC,1)
	   CALL IFF_VALUE(RANGE(3),JSR,2)
	   CALL IFF_VALUE(RANGE(4),JFR,2)
	   CPARR(1,1)=RANGE(1)
	   CPARR(2,1)=RANGE(4)
	   CPARR(1,2)=RANGE(1)
	   CPARR(2,2)=RANGE(3)
	   CPARR(1,3)=RANGE(2)
	   CPARR(2,3)=RANGE(3)
	   CPARR(1,4)=RANGE(2)
	   CPARR(2,4)=RANGE(4)
	   DO 20 I=1,4
	      DO 10 J=1,2
	         CPARR(J+2,I) = CPARR(J,I)
10	      CONTINUE
20	   CONTINUE
C
C Open the IFF file and put the range etc into it
	   OK=IFINIT(TRITLE,LGC1)
	   IF (.NOT.OK) GOTO 90
C
C Initialise last feature code number
	   LASCOD=1
	   NFEAT=0
	   FIRST=.TRUE.
	   LASNOD=-1
	   NUMSTS=0
	ENDIF
C
C ......................................................................
C 			M A I N    L O O P
	CALL HADCTRLC			! clear any outstanding CTRL/C
	DO 50 J=1,NPINW
	   IF (TRIFF) THEN
	      CALL BAR (NPINW,J,5)
	   ENDIF
	   NODE=INWNPT(J)
C
C Check this is not a deleted point
	   IF (IABS(MAC(5,NODE)).EQ.1) GOTO 50
C
C For each in-window point in turn get its neighbours from random
C memory/disk file
	   CALL GETNAY(NODE,NAYS,NTMSIZ,NUMBER)
	   DO 30 I=1,NUMBER
	      K=NAYS(I)
C
C Check whether point K is inside the window
	      CALL LACWIN(MAC(1,K),MAC(2,K),INSIDE)
C
C Do not draw link if neighbour has higher node number than node,
C and point K is in the window.
	      IF (NODE.GT.K.AND.INSIDE.EQ.1) GOTO 30
C
C Select line type for drawing (continuous=7, discont=8, or
C imaginary=9).
	      IF (.NOT.TRIFF) THEN
	         IF (NODE.LE.LIMPOL.OR.K.LE.LIMPOL) THEN
	            L=9		! imaginary
	         ELSE
	            IF (MAC(3,NODE).LT.0.AND.MAC(3,K).LT.0) THEN
	               L=8		! breakline 
	            ELSE
	               L=7		! ordinary
	            ENDIF
	         ENDIF
	         IF (L.NE.LASTL) THEN
	            CALL NEWOBJ(L)
	            LASTL=L
	         ENDIF
C
C Write every link to screen, clipping as necessary on the way
	         CALL LACCLP(MAC(1,K),MAC(2,K),1)
	         CALL LACCLP(MAC(1,NODE),MAC(2,NODE),-1)
	      ELSE
C
C Differentiate between data types by using different feature codes
C 1) ordinary node
C 2) discontinuity
	         IF (NODE.LE.LIMPOL.OR.K.LE.LIMPOL) THEN
	            ISTAT(1)=IMAGINARY_LINK_FC ! imaginary point link
	         ELSE
	            IF (MAC(3,NODE).LT.0.AND.MAC(3,K).LT.0) THEN
	               ISTAT(1)=BREAKLINE_LINK_FC  ! breakline link
	            ELSE
	               ISTAT(1)=LINK_FC		! ordinary link
	            ENDIF
	         ENDIF
C
C are we to start a new feature?
	         IF (ISTAT(1).NE.LASCOD
     &				.OR.NUMSTS.EQ.50) THEN
	            NUMSTS=0
	            IF (INFT) THEN		! flush buffer 
	               INFT=.FALSE.		! and flag end 
	               CALL IFFEF		! end current feature
	            ENDIF
	         ENDIF
C
C Finished this nodes neighbours?
	         IF (NODE.NE.LASNOD) THEN
	            IF (INFT) THEN		! flush buffer 
	               INFT=.FALSE.		! and flag end 
	               CALL IFFEF		! end current feature
	            ENDIF
	         ENDIF
C
C Now start a new feature if necessary
	         IF (.NOT.INFT) THEN
	            LASNOD=NODE
	            NFEAT=NFEAT+1
	            ISEQ=0
	            CALL IFFNF(NFEAT,ISEQ)
	            CALL IFFFS(ISTAT)
	            LASCOD=ISTAT(1)
	            INFT=.TRUE.
	         ENDIF
C
C Clip line to fit window and output a 2 pt. ST to IFF file
	         CALL TRICLP(MAC(1,NODE),MAC(2,NODE),MAC(1,K),MAC(2,K))
	      ENDIF
	      NUMSTS=NUMSTS+1
30	   CONTINUE
40	   IF (HADCTRLC()) GOTO 60
50	CONTINUE
C			E N D  O F  M A I N   L O O P
C ......................................................................
C
C Do IFF house keeping, modifying RANGE, CP's and EO,EM,EJ stuff
60	IF (TRIFF) THEN
	   IF (INFT) THEN
	      CALL IFFEF
	   ENDIF
C
C Output a frame around the area in the imaginary points overlay for fun
	   NFEAT=NFEAT+1			! increment no. features
	   ISEQ=0				! internal seq. number
	   CALL IFFNF(NFEAT, ISEQ)		! create new feature hdr
	   ISTAT(1)=FRAME_FC			! imag. pt. code for box
	   CALL IFFFS(ISTAT)			! feature code as above
	   XYBUF(1,1)=RANGE(1)			! use range for coords.
	   XYBUF(2,1)=RANGE(3)
	   XYBUF(1,2)=RANGE(1)
	   XYBUF(2,2)=RANGE(4)
	   XYBUF(1,3)=RANGE(2)
	   XYBUF(2,3)=RANGE(4)
	   XYBUF(1,4)=RANGE(2)
	   XYBUF(2,4)=RANGE(3)
	   XYBUF(1,5)=RANGE(1)
	   XYBUF(2,5)=RANGE(3)
	   CALL IFFST(XYBUF,5,0)		! flush coords to file
	   CALL IFFEF				! end feature
	   CALL IFFUNO(LPOSNO)
	   CALL IFFEO
	   CALL IFFEM
	   CALL IFFEJ
C
C Close the file
	   CALL IFFCLO(LGC1)
	ELSE
	   CALL OUTBUF
	ENDIF
90	RETURN
	END
