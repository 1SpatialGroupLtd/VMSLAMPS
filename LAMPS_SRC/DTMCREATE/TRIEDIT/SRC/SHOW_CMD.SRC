C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-02-03 18:33:04.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION SHOW_CMD
C
***	MODULE	SHOW_CMD
***	IDENT	31JA89
C
C	Copyright (C), Laser-Scan Laboratories Ltd., Cambridge, England
C
CMOD	UNITS,INVERSE and DATUM commands added		TJH 19-Jan-1989
C	Created						TJH 23-Jul-1987
C
C Function to show command status eg SHOW GRAPHICS. 
C
C Function returns .TRUE. if all is well, .FALSE. if an error
C
	IMPLICIT NONE
C
C W/s
	BYTE		CH	! for use with RDCHS
	INTEGER		CMD     ! decoded command number
	REAL		WINXMIN,WINXMAX,WINYMIN,WINYMAX
	INTEGER		I
C
C Function:
	INTEGER		RDCOMM
	INTEGER		SIGCHS
C
C Parameters:
	INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'
C
C Common blocks:
	INCLUDE 'LSL$CMNTRIEDIT:COMMAND.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:CONTR.CMN'
	INCLUDE 'LSL$CMNLSL:CMDCOM.CMN'
	INCLUDE 'LSL$CMNLSL:EXCEPTION.CMN'
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'
	INCLUDE 'LSL$CMNLSL:FILENAME.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:FILNMS.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:INFILES.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:RCONVI.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:SELECTIONS.CMN'
C
C Command table:
	EXTERNAL	SHOW_CMD_TABLE
	INTEGER		SHOW_CMD_TABLE
C
C ......................................................................
C
	SHOW_CMD=.TRUE.			! assume success
C	
	CMD=RDCOMM(SHOW_CMD_TABLE)	! get command
	IF (ERRNUM.NE.LSL__NORMAL) THEN
	   IF (ERRNUM.EQ.LSL__UNEXPCMD) THEN
	      CALL EXPAND(WARNING//' unexpected %S',CMDNST)
	      CALL OUTOPT(EXPDSC)
	      GOTO 15
	   ELSEIF (ERRNUM.EQ.LSL__AMBIG) THEN
	      CALL EXPAND(WARNING//' ambiguous command %S',CMDNST)
	      CALL OUTOPT(EXPDSC)
	      GOTO 15
	   ELSE
	      GOTO 10
	   ENDIF
	ENDIF
	CMD=CMD+1
	GOTO (
     &		10,			! error/nothing	  - cmd=1
     &		160,			! DATUM			2
     &		80,			! SELECTIONS		3
     &		120,			! BREAKLINES		4
     &		130,			! RIDGELINES		5
     &		140,			! RIVERS		6
     &		90,			! LAYER			7
     &		100,			! FC			8
     &		20,			! FRT			9
     &		150,			! HEIGHTS		10
     &		30,			! WINDOW		11
     &		110,			! ASSIGNMENTS		12
     &		50,			! UNITS			13
     &		170,			! ENABLE		14
     &		60,			! FILES			15
     &		40			! IFF_OUTPUT		16
     &			), CMD
C
C Command number out of range
	CALL OUTOPT('Command not yet implemented')
	SHOW_CMD=.FALSE.
	GOTO 999
C
C ......................................................................
C Error
10	CALL OUTOPT(ERROR//'Specifying command SHOW')
15	CALL OUTOPT(' ')
	CALL OUTOPT('Available SHOW command qualifiers are:')
	CALL OUTOPT(' ')
	CALL OUTOPT(
     &		'ASSIGNMENTS    BREAKLINES     DATUM      '//
     &		'ENABLE    FC        FILES')
	CALL OUTOPT(' ')
	CALL OUTOPT(
     &		'FRT            HEIGHTS        '//
     &		'IFF_OUTPUT LAYER     RIDGELINES')
	CALL OUTOPT(' ')
	CALL OUTOPT(
     &		'RIVERS         SELECTIONS     UNITS      WINDOW')
	CALL OUTOPT(' ')
	SHOW_CMD=.FALSE.
	GOTO 999
C
C ......................................................................
C SHOW FRT
C
20	IF (HADFRT) THEN
	   CALL EXPAND('FRT file is %S',FRTNAM(:FRTLEN))
	   CALL OUTOPT(EXPDSC)
	ELSE
	   CALL OUTOPT('No FRT file selected')
	ENDIF
	CALL OUTOPT(' ')
	GOTO 999
C
C ......................................................................
C SHOW WINDOW
C
C Show triangulation coverage
30	CALL OUTOPT(' ')
	CALL SHOW_WINDOW(VMIN(1),VMAX(1),VMIN(2),VMAX(2),UNITS,.TRUE.)
C
C Compute real world coords of current window
	CALL VALUE(WINXMIN,JSC,1)
	CALL VALUE(WINXMAX,JFC,1)
	CALL VALUE(WINYMIN,JSR,2)
	CALL VALUE(WINYMAX,JFR,2)
C
C Show window
	CALL OUTOPT(' ')
	CALL SHOW_WINDOW(WINXMIN,WINXMAX,WINYMIN,WINYMAX,UNITS,.FALSE.)
	GOTO 999
C
C ......................................................................
C SHOW IFF_OUTPUT_CHARACTERISTICS
C
40	CALL OUTOPT('OUTPUT IFF FILE CHARACTERISTICS:')
	CALL OUTOPT(' ')
	CALL OUTOPT(
     &	'Layer for triangles (DRAW TRIANGLES ''iff-file-spec''),')
	CALL OUTOPT(
     &	're-contouring (DRAW CONTOURS ''iff-file-spec'') and '//
     &	'normal node')
	CALL EXPAND('output (IFF command)........'//
     &		'.................................%^W%N',LAYER)
	CALL OUTOPT(EXPDSC)
	CALL EXPAND('Layer for breakline node '//
     &	'output..............................%^W%N',BREAKLINE_LAYER)
	CALL OUTOPT(EXPDSC)
	CALL EXPAND('Layer for cliffline node '//
     &	'output..............................%^W%N',CLIFF_LAYER)
	CALL OUTOPT(EXPDSC)
	CALL EXPAND('Feature code for plot '//
     &	'frame..................................%^W%N',FRAME_FC)
	CALL OUTOPT(EXPDSC)
	CALL EXPAND('Feature code for strings of normal '//
     &	'nodes (IFF command) ......%^W%N',STRING_FC)
	CALL OUTOPT(EXPDSC)
	CALL EXPAND('Feature code for individual normal '//
     &	'nodes (IFF command) ......%^W%N',POINT_FC)
	CALL OUTOPT(EXPDSC)
	CALL EXPAND('Feature code for strings of river '//
     &	'nodes (IFF command) .......%^W%N',RIVER_STRING_FC)
	CALL OUTOPT(EXPDSC)
	CALL EXPAND('Feature code for individual river '//
     &	'nodes (IFF command) .......%^W%N',RIVER_POINT_FC)
	CALL OUTOPT(EXPDSC)
	CALL EXPAND('Feature code for strings of ridge '//
     &	'nodes (IFF command) .......%^W%N',RIDGE_STRING_FC)
	CALL OUTOPT(EXPDSC)
	CALL EXPAND('Feature code for individual ridge nodes '//
     &	'(IFF command) .......%^W%N',RIDGE_POINT_FC)
	CALL OUTOPT(EXPDSC)
	CALL EXPAND('Feature code for cliff strings (IFF '//
     &		'command) ................%^W%N',CLIFF_STRING_FC)
	CALL OUTOPT(EXPDSC)
	CALL OUTOPT('Feature code for normal triangle links ')
	CALL EXPAND('(DRAW TRIANGLES ''iff-file-spec'' '//
     &		'command) ....................%^W%N',LINK_FC)
	CALL OUTOPT(EXPDSC)
	CALL OUTOPT('Feature code for breakline triangle links '//
     &	'(DRAW TRIANGLES ')
	CALL EXPAND('''iff-file-spec'' command) '//
     &	  '....................................%^W%N',BREAKLINE_LINK_FC)
	CALL OUTOPT(EXPDSC)
	CALL OUTOPT('Feature code for imaginary triangle '//
     &	'links (DRAW TRIANGLES ')
	CALL EXPAND('''iff-file-spec'' command) .........'//
     &	'...........................%^W%N',IMAGINARY_LINK_FC)
	CALL OUTOPT(EXPDSC)
	CALL OUTOPT('Feature code for intermediate contours '//
     &	'(DRAW CONTOURS')
	CALL EXPAND('''iff-file-spec'' command) ..........'//
     &	'..........................%^W%N',CONTOUR_FC)
	CALL OUTOPT(EXPDSC)
	CALL OUTOPT('Feature code for index contours '//
     &	'(DRAW CONTOURS')
	CALL EXPAND('''iff-file-spec'' command) ....'//
     &	'................................%^W%N',INDEX_CONTOUR_FC)
	CALL OUTOPT(EXPDSC)
	CALL OUTOPT(' ')
	GOTO 999
C
C ......................................................................
C SHOW UNITS
C
50	CALL EXPAND('Window to be specified in ')
	IF (UNITS.EQ.2) THEN
	   CALL APPEND('metres')
	ELSEIF (UNITS.EQ.3) THEN
	   CALL APPEND('seconds of arc')
	ELSEIF (UNITS.EQ.4) THEN
	   CALL APPEND('latlong (degrees, minutes and seconds)')
	ELSEIF (UNITS.EQ.5) THEN
	   CALL APPEND('projection units')
	ENDIF
	CALL OUTOPT(EXPDSC)
	GOTO 999
C
C ......................................................................
C FILES
60	CALL PUTFLN(ITLE,ITLEN)
	STR_EXT='NOD'
	LEN_EXT=3
	CALL EXPFLN(ITLE,ITLEN)
	CALL EXPAND('.NOD file:  %S',ITLE(1:SIGCHS(ITLE)))
	CALL OUTOPT(EXPDSC)
	STR_EXT='DTA'
	LEN_EXT=3
	CALL EXPFLN(ITLE,ITLEN)
	CALL EXPAND('.DTA file:  %S',ITLE(1:SIGCHS(ITLE)))
	CALL OUTOPT(EXPDSC)
	CALL OUTOPT ('FILEIN files:')
	IF (NUM_INFILES.EQ.0) THEN
	   CALL OUTOPT('No FILEIN input files sucessfully read yet.')
	ELSE
	   DO 70 I=1,NUM_INFILES
	      CALL EXPAND('Input file #%N:  %S',I,
     &			INFILES(I)(1:SIGCHS(INFILES(I))))
	      CALL OUTOPT(EXPDSC)
70	   CONTINUE
	ENDIF
	GOTO 999
C
C ......................................................................
C SHOW SELECTIONS
C
80	CALL OUTOPT(' ')
C
C ......................................................................
C SHOW LAYERS
C
	CALL OUTOPT('LAYERS:')
90	CALL DISPLBTMP(
     &		'Layers selected for input:',
     &		'All layers deselected',
     &		 BMAX,
     &		 USEOV)
C	
	IF (CMD.EQ.7) GOTO 999
	CALL OUTOPT(' ')
C
C ......................................................................
C SHOW FC
C
	CALL OUTOPT('FCs:')
100	CALL DISPLBTMP(
     &		'Feature codes selected for input:',
     &		'All feature codes deselected',
     &		 BMAX,
     &		 USEFC)
C
	GOTO 999
C
C ......................................................................
C SHOW ASSIGNMENTS
110	CALL OUTOPT(' ')
C
C ......................................................................
C SHOW BREAKLINES
C
	CALL OUTOPT('BREAKLINES:')
120	CALL DISPLBTMP(
     &		'Layers assigned for breaklines:',
     &		'No layers assigned for breaklines',
     &		 BMAX,
     &		 BREKOV)
	CALL DISPLBTMP(
     &		'Feature codes assigned for breaklines:',
     &		'No feature codes assigned for breaklines',
     &		 BMAX,
     &		 BREKFC)
	IF (CMD.EQ.4) GOTO 999
	CALL OUTOPT(' ')
C ......................................................................
C SHOW RIDGELINES
C
	CALL OUTOPT('RIDGELINES:')
130	CALL DISPLBTMP(
     &		'Layers assigned for ridgelines:',
     &		'No layers assigned for ridgelines',
     &		 BMAX,
     &		 OVRID)
	CALL DISPLBTMP(
     &		'Feature codes assigned for ridgelines:',
     &		'No feature codes assigned for ridgelines',
     &		 BMAX,
     &		 FCRID)
	IF (CMD.EQ.5) GOTO 999
	CALL OUTOPT(' ')
C
C ......................................................................
C SHOW RIVERS
C
	CALL OUTOPT('RIVERS:')
140	CALL DISPLBTMP(
     &		'Layers assigned for rivers:',
     &		'No layers assigned for rivers',
     &		 BMAX,
     &		 OVRIV)
	CALL DISPLBTMP(
     &		'Feature codes assigned for rivers:',
     &		'No feature codes assigned for rivers',
     &		 BMAX,
     &		 FCRIV)
	GOTO 999
C
C
C ......................................................................
C SHOW HEIGHTS
C
150	IF (AC2HT) THEN
	   CALL OUTOPT
     &		('Incoming heights expected in IFF type 2 AC entries')
	ELSE
	   CALL OUTOPT
     &		('Incoming heights expected in IFF type 3 AC entries')
	ENDIF
	IF (MFACTR.EQ.1.0) THEN 
	   CALL OUTOPT('MULTIPLYBY and DIVIDEBY are disabled.')
C
	ELSE
	   IF (DIVIDE) THEN
	      CALL EXPAND
     &      	('Incoming heights to be divided by %F8.3 ',1./MFACTR)
	      CALL OUTOPT(EXPDSC)
	   ENDIF
	   IF (MULT) THEN
	      CALL EXPAND
     &         ('Incoming heights to be multiplied by %F8.3 ',MFACTR)
	      CALL OUTOPT(EXPDSC)
	   ENDIF
	ENDIF	
	IF (M2FEET) THEN 
	   CALL OUTOPT
     &	  ('Incoming heights to be converted to feet')
	ELSEIF (FEET2M) THEN
	   CALL OUTOPT
     &	  ('Incoming heights to be converted to metres')
	ELSE
	   CALL OUTOPT
     &    ('No imperial or metric conversion to be applied to '//
     &	  'incoming heights')
	ENDIF
C
160	CALL EXPAND(
     &	'Height datum %F to be added to all incoming heights',DATUM)
	CALL OUTOPT(EXPDSC)
	IF (CMD.EQ.2) GOTO 999
	IF (INVERSE) THEN
	   CALL OUTOPT('All incoming heights are to be inverted')
	ELSE
	   CALL OUTOPT('No inversion to be applied to incoming heights')
	ENDIF
	GOTO 999
C
C ......................................................................
C ENABLE
170	CALL EXPAND('DIAGNOSTICS .................'//
     &			'................................. ')
	IF (DIAGNOS) THEN
	   CALL APPEND('On')
	ELSE
	   CALL APPEND('Off')
	ENDIF
	CALL OUTOPT(EXPDSC)
	CALL EXPAND
     &      ('DIVIDEBY ...................'//
     &			'..................................')
	IF (DIVIDE) THEN
	   CALL APPEND(' On')
	   CALL OUTOPT(EXPDSC)
	   CALL EXPAND('Incoming heights to be divided by '//
     &			'............................%F8.3 ',1./MFACTR)
	ELSE
	   CALL APPEND(' Off')
	ENDIF
	CALL OUTOPT(EXPDSC)
	CALL EXPAND
     &      ('INTEGER_HEIGHT .............'//
     &			'.................................. ')
	IF (AC2HT) THEN
	   CALL APPEND ('On')
	   CALL OUTOPT(EXPDSC)
	   CALL OUTOPT
     &		('Incoming heights expected in IFF type 2 AC entries')
	ELSE
	   CALL APPEND ('Off')
	   CALL OUTOPT(EXPDSC)
	   CALL OUTOPT
     &		('Incoming heights expected in IFF type 3 AC entries')
	ENDIF
	CALL EXPAND('INVERSE .....................'//
     &			'................................. ')
	IF (INVERSE) THEN
	   CALL APPEND('On')
	ELSE
	   CALL APPEND('Off')
	ENDIF
	CALL OUTOPT(EXPDSC)
	CALL EXPAND
     &      ('MULTIPLYBY .................'//
     &			'..................................')
	IF (MULT) THEN
	   CALL APPEND(' On')
	   CALL OUTOPT(EXPDSC)
	   CALL EXPAND('Incoming heights to be multiplied by '//
     &			'.........................%F8.3 ',MFACTR)
	ELSE
	   CALL APPEND(' Off')
	ENDIF
	CALL OUTOPT(EXPDSC)
	CALL EXPAND
     &      ('PME ........................'//
     &			'.................................. ')
	IF (PMEING) THEN
	   CALL APPEND('On')
	ELSE
	   CALL APPEND('Off')
	ENDIF
	CALL OUTOPT(EXPDSC)
	CALL EXPAND
     &      ('TOFEET .....................'//
     &			'.................................. ')
	IF (M2FEET) THEN
	   CALL APPEND('On')
	ELSE
	   CALL APPEND('Off')
	ENDIF
	CALL OUTOPT(EXPDSC)
	CALL EXPAND
     &      ('TOMETRES ...................'//
     &			'.................................. ')
	IF (FEET2M) THEN
	   CALL APPEND('On')
	ELSE
	   CALL APPEND('Off')
	ENDIF
	CALL OUTOPT(EXPDSC)
	GOTO 999
C
C ......................................................................
C
999	RETURN
	END
