C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-01-26 13:04:36.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION WINDOW_CMD(IZOOM)
C
***	MODULE	WINDOW_CMD
***	IDENT	19JA89
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD New UNITS command accommodated			TJH 19-Jan-1989
CMOD 567 Now correctly truncates typed window args	TJH 06-Jun-1988
CMOD Optional window definition arguments added, made a
C    function						TJH 21-Apr-1988
C    Created 						TJH 21-Dec-1987
C
C    Function to get window limits and then to redraw the screen
C    Function returns true if all is well
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	IZOOM			! zoom flag
C
C W/s:
	INTEGER	IX,IY			! position	
	INTEGER	I			! temp var
	INTEGER IA,IB,JA,JB		! sub-window limits (int units)
	INTEGER	IX1,IY1,IX2,IY2		! zoom limits (screen units)
	INTEGER	LLDEGS(4)		! window values in seconds
C
C Function
	LOGICAL		READLL		! reads lat/long
C
C Parameters:
	INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'
C
C Common:
	INCLUDE 'LSL$CMNTRIEDIT:ANNOT.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:COMMAND.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:CONTR.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:DATQ.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:RCONVI.CMN'
	INCLUDE 'LSL$CMNLSL:CMDCOM.CMN'
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'
C
C ......................................................................
C
	WINDOW_CMD=.TRUE.			! assume success
C
	IF (IZOOM.EQ.0) THEN
	   JSRP=ISAVSR
	   JSCP=ISAVSC
	   JLRP=ISAVLR
	   JLCP=ISAVLC
	ENDIF
C
C Call update to reset the window parameters but not to do any
C calculations
	CALL UPDATE(8,IZOOM)
C
C Original view window already drawn by points and points plotted.
C now draw frame inside it for the old zoom area (if any), using
C the frame object.
	SCALSC=AMIN1(FLOAT(JSCRN)/FLOAT(JLC),FLOAT(ISCRN)/FLOAT(JLR))
	CALL POSCON(IX,IY,JSCP,JSRP)
	CALL POSCON(IX1,IY1,JSCP+JLCP,JSRP+JLRP)
	CALL FRAME(IX,IX1,IY,IY1,3)
C
C Now discover details of new zoom area, either from command line
C or cursor
	IF (CMDRCT.EQ.0) THEN
	   CALL ZOOMAR(JA,IA,JB,IB)
	ELSE
	   IF (CMDRCT.NE.4.AND.UNITS.NE.4) THEN	! 4 good args. ?
	      IF (TTIN)THEN
	         CALL OUTOPT(WARNING//'Unable to read WINDOW arguments')
	      ELSE
	         CALL OUTOPT(ERROR//'Unable to read WINDOW arguments')
	      ENDIF
	      CALL EXPAND(
     &		'Command requires 2 x,y coordinate pairs (SW and NE)')
	      CALL EXPAND('specified in ')
	      IF (UNITS.EQ.2) THEN
	         CALL APPEND('metres')
	      ELSEIF (UNITS.EQ.3) THEN
	         CALL APPEND('seconds of arc')
	      ELSEIF (UNITS.EQ.5) THEN
	         CALL APPEND('projection units')
	      ENDIF
	      CALL OUTOPT(EXPDSC)
	      CALL OUTOPT('please respecify or use the cursor')
	      WINDOW_CMD=.FALSE.
	   ELSE
C
C Decode the 4 window arguments
C
	      GOTO (30,30,10,20,30) UNITS
C
C-----------------------------------------------------------------------
C	Seconds
10	      REALAR(1)=REALAR(1)*10
	      REALAR(2)=REALAR(2)*10
	      REALAR(3)=REALAR(3)*10
	      REALAR(4)=REALAR(4)*10
	      GOTO 30
C
C-----------------------------------------------------------------------
C	Degrees, Minutes & Seconds
C	Call READLL to convert to .1 seconds
C
20	      IF (READLL(LLDEGS,4)) THEN
	         CALL OUTOPT(ERROR//'specifying WINDOW')
	         CALL OUTOPT('Unable to use supplied LATLONG values')
	         CALL OUTOPT('Window values must be given in the order:')
	         CALL OUTOPT(
     &		   'SW:  latitude longitude   NE:  latitude longitude')
	         CALL OUTOPT('please respecify or use the cursor')
	         GOTO 40
	      ELSE
	         REALAR(2)=LLDEGS(1)*10
	         REALAR(1)=LLDEGS(2)*10
	         REALAR(4)=LLDEGS(3)*10
	         REALAR(3)=LLDEGS(4)*10
	      ENDIF
C
C Now test that the window args are sensible
30	      IF (REALAR(1).GE.REALAR(3).OR.REALAR(2).GE.REALAR(4)) THEN
	         CALL OUTOPT(ERROR//
     &			'window values must be given in the order:')
	         IF (UNITS.EQ.4) THEN
	            CALL OUTOPT(
     &		'SW:  latitude longitude   NE:  latitude longitude')
	         ELSE
	            CALL OUTOPT('SW:  xmin ymin      NE:  xmax ymax')
	         ENDIF
	         CALL OUTOPT('please respecify or use the cursor')
	         CALL OUTOPT(' ')
	         WINDOW_CMD=.FALSE.
	      ELSE
	         REALAR(1)=MIN(VMAX(1),MAX(REALAR(1),VMIN(1)))
	         REALAR(2)=MIN(VMAX(2),MAX(REALAR(2),VMIN(2)))
	         REALAR(3)=MAX(VMIN(1),MIN(REALAR(3),VMAX(1)))
	         REALAR(4)=MAX(VMIN(2),MIN(REALAR(4),VMAX(2)))
	         CALL CONVER(REALAR(1),JA,1)
	         CALL CONVER(REALAR(2),IA,2)
	         CALL CONVER(REALAR(3),JB,1)
	         CALL CONVER(REALAR(4),IB,2)
C Save previous screen increments, and
C corresponding integer scaled limits ready for a mooz etc
	         JSRP=JSR
	         JSCP=JSC
	         JLRP=JLR
	         JLCP=JLC
C Calculate integer scaled range of zoom window that will replace
C the present limits
	         JSR=IA
	         JLR=IB-IA
	         JFR=IB
	         JSC=JA
	         JLC=JB-JA
	         JFC=JB
	      ENDIF
	   ENDIF
	ENDIF
C
C If the WINDOW command went wrong return to whole triangulation window
40	IF (.NOT.WINDOW_CMD) THEN
	   CALL CONVER(VMIN(1),JA,1)
	   CALL CONVER(VMIN(2),IA,2)
	   CALL CONVER(VMAX(1),JB,1)
	   CALL CONVER(VMAX(2),IB,2)
C Calculate integer scaled range of zoom window that will replace
C the present limits
	   JSR=IA
	   JLR=IB-IA
	   JFR=IB
	   JSC=JA
	   JLC=JB-JA
	   JFC=JB
	ENDIF
C
C Set a marker to indicate to the window generator called in
C zoom that this is a complete recalculation
	I=0
C
C Check window points
	CALL WINDOW(I)
C
C Update the picture
	CALL UPDATE(6,IZOOM)
C
C Plot zoom position on contour map and points, using the window
C object.
	CALL POSCON(IX1,IY1,JA,IA)
	CALL POSCON(IX2,IY2,JB,IB)
	CALL FRAME(IX1,IX2,IY1,IY2,4)
	RETURN
	END
