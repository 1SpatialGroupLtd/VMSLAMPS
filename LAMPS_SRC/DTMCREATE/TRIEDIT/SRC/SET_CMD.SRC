	LOGICAL FUNCTION SET_CMD(IZOOM)
C
***	MODULE	SET_CMD
***	IDENT	17MR93
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD    Force an upper limit on INSERT_HT so		 ST 17-Mar-1993
C       that it won't overflow when output to screen
CMOD	No longer differentiates "open"/"closed" cliffs	TJH 21-Jul-1988
CMOD	Now SET FLAG UNFLAGGED not NORMAL		TJH 04-Jul-1988
C	Created						TJH 23-Dec-1987
C
C Function to set up defaults for data insertion using the INSERT
C command and IFF output using the IFF, DRAW CONTOUR or DRAW TRIANGLES
C commands
C
C Returns .true. if all is well
	IMPLICIT NONE
C
C Argument:
	INTEGER		IZOOM	! zoom flag
C
C W/s
	INTEGER		PTR	! saved DCPTR
	INTEGER		CMD     ! decoded command number
	BYTE		CH
	CHARACTER*80 	STR
	INTEGER*4	STRLEN
C
C Parameters:
	INCLUDE 	'LSL$DTMCREATESYS:MESPAR.PAR'
	INCLUDE 	'LSL$CMNLSL:LSLLIBMSG.PAR'
C
C Common:
	INCLUDE 	'LSL$CMNTRIEDIT:COMMAND.CMN'
	INCLUDE 	'LSL$CMNLSL:EXCEPTION.CMN'
	INCLUDE 	'LSL$CMNTRIEDIT:TTTYPE.CMN'
	INCLUDE 	'LSL$CMNLSL:EXPC.CMN'
	INCLUDE 	'LSL$CMNLSL:CMDCOM.CMN'
C
C Functions:
	LOGICAL  	RDCHS		! read character from TXTBUF
	LOGICAL		RDREAL		! read a real*4  "  	"
	LOGICAL  	RDCOMM		! read command from TXTBUF
	LOGICAL		GET_FC		! read feature code
	LOGICAL		GET_LAYER	! read layer number
	INTEGER*2	EXPAND
C
C Command table:
	EXTERNAL	SET_CMD_TABLE
	INTEGER		SET_CMD_TABLE
	EXTERNAL	HEIGHT_CMD_TABLE
	INTEGER		HEIGHT_CMD_TABLE
	EXTERNAL	TYPE_CMD_TABLE
	INTEGER		TYPE_CMD_TABLE
	EXTERNAL	FLAG_CMD_TABLE
	INTEGER		FLAG_CMD_TABLE
C
C ......................................................................
C
	SET_CMD=.TRUE.			! assume success
C
	CMD=RDCOMM(SET_CMD_TABLE)	! get command
C
C Error?
	IF (ERRNUM.NE.LSL__NORMAL) THEN
	   SET_CMD=.FALSE.
	   IF (ERRNUM.EQ.LSL__UNEXPCMD) THEN
	      CALL EXPAND(WARNING//' unexpected %S',CMDNST)
	      CALL OUTOPT(EXPDSC)
	   ELSEIF (ERRNUM.EQ.LSL__AMBIG) THEN
	      CALL EXPAND(WARNING//' ambiguous command %S',CMDNST)
	      CALL OUTOPT(EXPDSC)
	   ELSEIF (ERRNUM.EQ.LSL__UNEXPEOL) THEN
	      GOTO 10
	   ENDIF
	   GOTO 20
	ENDIF
C
	CMD=CMD+1
	GOTO (
     &		10,	! error/nothing
     &		30,	! type
     &		70,	! height
     &		80,	! feature flag
     &		130,	! triangle_accuracy
     &		140,	! normal_string_fc
     &		150,	! normal_point_fc
     &		160,	! river_string_fc
     &		170,	! river_point_fc
     &		180,	! ridge_string_fc
     &		190,	! ridge_point_fc
     &		200,	! cliff_string_fc
     &		210,	! layer
     &		220,	! breakline_layer
     &		230,	! cliff_layer
     &		240,	! link_fc
     &		250,	! breakline link fc
     &		260,	! imaginary link fc
     &		270,	! contour_fc
     &		280,	! index_contour_fc
     &		290	! frame_fc
     &			), CMD	
C
C
C Command number out of range
	CALL OUTOPT('Command not yet implemented')
	GOTO 310
C
C ......................................................................
C Error reading SET cmd
10	CALL OUTOPT(ERROR//'Specifying command SET')
20	CALL OUTOPT(' ')
	CALL OUTOPT('Available SET command qualifiers are:')
	CALL OUTOPT(' ')
	CALL OUTOPT(
     &	'BREAKLINE_LAYER    BREAKLINE_LINK_FC    '//
     &			'CLIFF_LAYER    CLIFF_STRING_FC')
	CALL OUTOPT(' ')
	CALL OUTOPT(
     &	'CONTOUR_FC         FEATURE_FLAG         FRAME_FC       HEIGHT')
	CALL OUTOPT(' ')
	CALL OUTOPT(
     &	'IMAGINARY_LINK_FC  INDEX_CONTOUR_FC     LAYER          LINK_FC')
	CALL OUTOPT(' ')
	CALL OUTOPT(
     &	'NORMAL_POINT_FC    NORMAL_STRING_FC     RIDGE_POINT_FC '//
     &			'RIDGE_STRING_FC')
	CALL OUTOPT(' ')
	CALL OUTOPT(
     &	'RIVER_POINT_FC     RIVER_STRING_FC      TRIANGLE_ACCURACY')
	CALL OUTOPT(' ')
	CALL OUTOPT('TYPE')
	CALL OUTOPT(' ')
	GOTO 310
C
C ......................................................................
C SET TYPE - breakline or normal
30	IF (RDCHS(CH)) THEN
	   CALL OUTOPT(WARNING//'Unexpected end of SET TYPE command')
	   CALL OUTOPT('Specify either NORMAL or BREAKLINE')
	ELSE
	   CALL BSCH
	   CMD=RDCOMM(TYPE_CMD_TABLE)
	   GOTO (
     &		 40,			! error
     &		 50,			! breakline
     &		 60			! normal
     &			), CMD+1
C
C Error reading SET TYPE cmd
40	   CALL OUTOPT(WARNING//'Unexpected end of SET TYPE command')
	   CALL OUTOPT(
     &	   'SET TYPE command arguments are NORMAL or BREAKLINE')
	   GOTO 310
C
50	   INSERT_BRE=.TRUE.
	   GOTO 300
C
60	   INSERT_BRE=.FALSE.
	ENDIF
	GOTO 300
C
C ......................................................................
C SET HEIGHT - 'real' or MULTIVALUED
70	IF (RDCHS(CH)) THEN
	   CALL OUTOPT(WARNING//'Unexpected end of SET HEIGHT command')
	   CALL OUTOPT('Either supply a floating point '//
     &			'value or the keyword MULTIVALUED')
	   GOTO 300	  
	ELSE
	   CALL BSCH
C
C Try reading a real height value. If fails try reading "MULTIVALUED"
	   CALL DCPSAV(PTR)
	   IF (RDREAL(REALAR(1))) THEN
	      CALL DCPSET(PTR)		
	      CMD=RDCOMM(HEIGHT_CMD_TABLE)
	      IF (CMD.EQ.1) THEN
	         INSERT_HT=0.0
	         INSERT_MVAL=.TRUE.
	      ELSE
	         CALL OUTOPT(
     &			WARNING//'Error reading SET HEIGHT argument')
	         CALL OUTOPT(
     &			'Either supply a floating point '//
     &			'value or the keyword MULTIVALUED')
	      ENDIF
	   ELSE
	      INSERT_HT=REALAR(1)
	      INSERT_MVAL=.FALSE.
	      IF (ABS(INSERT_HT).GT.9999999.0) THEN
		 INSERT_HT = SIGN(1.0,INSERT_HT)*9999999.0
		 STRLEN=EXPAND('%WS Number too large. Defaulting to %F0.1',
     &		                STR,INSERT_HT)
		 CALL OUTOPT(WARNING//STR(1:STRLEN))
	      ENDIF
	   ENDIF
	ENDIF
	GOTO 300
C
C ......................................................................
C SET FEATURE_FLAG
80	IF (RDCHS(CH)) THEN
	   CALL OUTOPT(WARNING//
     &		'Unexpected end of SET FEATURE_FLAG command')
	   CALL OUTOPT('Specify either UNFLAGGED, RIVER or RIDGELINE')
	ELSE
	   CALL BSCH
	   CMD=RDCOMM(FLAG_CMD_TABLE)
	   GOTO (
     &		90,	! err
     &		100,	! unflagged
     &		110,	! river
     &		120	! ridgeline
     &			), CMD+1
C
C Error reading SET FEATURE_FLAG cmd
90	   CALL OUTOPT(
     &		WARNING//'Unexpected end of SET FEATURE_FLAG command')
	   CALL OUTOPT(
     &	   	'SET FEATURE_FLAG command arguments are '//
     &		'UNFLAGGED, RIVER or RIDGELINE')
	   GOTO 310

C SET FEATURE_FLAG UNFLAGGED
100	   INSERT_FC=0
	   GOTO 300
C
C ......................................................................
C SET FEATURE_FLAG RIVER
110	   INSERT_FC=1
	   GOTO 300
C
C ......................................................................
C SET FEATURE_FLAG RIDGELINE
120	   INSERT_FC=2
	ENDIF
	GOTO 300
C
C ......................................................................
C SET TRIANGLE_ACCURACY
130	CALL TRAC_CMD(IZOOM)
	GOTO 300
C
C ......................................................................
C SET STRING_FC - FC for ordinary strings
140	SET_CMD=GET_FC('ordinary strings',STRING_FC)
	GOTO 310
C
C ......................................................................
C SET POINT_FC - FC for ordinary points
150	SET_CMD=GET_FC('ordinary points',POINT_FC)
	GOTO 310
C
C ......................................................................
C SET RIVER_STRING_FC - FC for river strings
160	SET_CMD=GET_FC('river strings',RIVER_STRING_FC)
	GOTO 310
C
C ......................................................................
C SET RIVER_POINT_FC - FC for river points
170	SET_CMD=GET_FC('river points',RIVER_POINT_FC)
	GOTO 310
C
C ......................................................................
C SET RIDGE_STRING_FC - FC for ridge strings
180	SET_CMD=GET_FC('ridgeline strings',RIDGE_STRING_FC)
	GOTO 310
C
C ......................................................................
C SET RIDGE_POINT_FC - FC for ridge points
190	SET_CMD=GET_FC('ridge points',RIDGE_POINT_FC)
	GOTO 310
C
C ......................................................................
C SET CLIFF_STRING_FC - FC for cliff strings 
200	SET_CMD=GET_FC('cliff strings',CLIFF_STRING_FC)
	GOTO 310
C
C ......................................................................
C SET LAYER - layer for ordinary points
210	SET_CMD=GET_LAYER('ordinary nodes',LAYER)
	GOTO 310
C
C ......................................................................
C SET BREAKLINE_LAYER - layer for breakline points
220	SET_CMD=GET_LAYER('breakline nodes',BREAKLINE_LAYER)
	GOTO 310
C
C ......................................................................
C SET CLIFF_LAYER - layer for cliff points
230	SET_CMD=GET_LAYER('cliffline nodes',CLIFF_LAYER)
	GOTO 310
C
C ......................................................................
C SET LINK_FC - triangle links between normal (continuous) nodes
240	SET_CMD=GET_FC('normal triangle links',LINK_FC)
	GOTO 310
C
C ......................................................................
C SET BREAKLINE_LINK_FC - triangle links between breakline nodes
250	SET_CMD=GET_FC('breakline triangle links',BREAKLINE_LINK_FC)
	GOTO 310
C
C ......................................................................
C SET IMAGINARY_LINK_FC - triangle links between imaginary nodes
260	SET_CMD=GET_FC('imaginary triangle links',IMAGINARY_LINK_FC)
	GOTO 310
C
C ......................................................................
C SET CONTOUR_FC - contour FC
270	SET_CMD=GET_FC('contours',CONTOUR_FC)
	GOTO 310
C
C ......................................................................
C SET INDEX_CONTOUR_FC - index contour FC
280	SET_CMD=GET_FC('index contours',INDEX_CONTOUR_FC)
C
C ......................................................................
C SET FRAME - bounding frame
290	SET_CMD=GET_FC('the bounding frame',FRAME_FC)
C
300	IF (VT100) CALL POINTS(2)	! Update the tell-back area
310	RETURN
	END
