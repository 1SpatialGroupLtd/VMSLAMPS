C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-01-26 12:33:04.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION FEATURE_CHECKS(ITYP,HADLEF,HADRIG,HADAC2,
     &			RIDPTS,RIVPTS,
     &			HADAC3,AC2HT,AC3HT,NF,IGNORE_FEATURE)
C
***	MODULE	FEATURE_CHECKS
***	IDENT	26JL88
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Created 					TJH 28-Jul-1988
C
C Check that a feature's Acs and point attributes are consistent within
C the feature and with the definition of the feature's role - e.g. cliff
C If a cliff string is found to have varying left and right heights
C (i.e. no fixed type 80 and 81 ACs) ITYP will be changed to -4
C
	IMPLICIT NONE
C
C Arguments (in/out)
	INTEGER	  ITYP		! see /COORDS/ comments
C
C Arguments (in)
	LOGICAL	  HADLEF	! had a type 80 AC?
	LOGICAL	  HADRIG	! had a type 81 AC?
	LOGICAL	  RIDPTS	! .T. if ridgeline
	LOGICAL	  RIVPTS	! .T. if river
	LOGICAL	  HADAC2  	! read a type 2 AC ?
	LOGICAL	  HADAC3  	! read a type 2 AC ?
	LOGICAL	  AC2HT		! expect hts. in type 2 AC's
	LOGICAL	  AC3HT		! expect hts. in type 2 AC's
	INTEGER	  NF(2)		! Features FSN and internal seq. #
C
C Arguments (out)
	LOGICAL	  IGNORE_FEATURE! .T. if feature to be skipped
C
C Parameters:
	INCLUDE 'LSL$CMNIFF:CB.STR'
	INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'
C W/s
	INTEGER	  I
	LOGICAL	  OK		! for error reporting
	INTEGER	  NUMCBS	! number of CBS in feature
	INTEGER   FTRPTS	! number of points in whole ftr
	LOGICAL   SIMPLE	! .T. if simple xy or xyz CB
	INTEGER	  NCOLS		! number of columns	
	INTEGER	  COLS(IFF_MAXCBCOL)! the columns in the CB
	LOGICAL*1 HADZS		! had a Z dimension in CB?
	LOGICAL*1 PTLEF,PTRIG	! or type 80 and 81 (zleft & zright)
C
C Function:
	LOGICAL	IFS_CB_SCAN
C
	INCLUDE	'LSL$DTMCREATESYS:MESSAGE.CMN'
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'
C
C ......................................................................
C
	IGNORE_FEATURE=.FALSE.			! assume ftr is good
	FEATURE_CHECKS=.TRUE.			! assume all is well	
	PTLEF=.FALSE.
	PTRIG=.FALSE.
	HADZS=.FALSE.
C
C Scan the feature to determine its dimensionality. We don't
C need a height AC for example if it had a Z or zleft and zrigt
C dimension.
C If it is flagged as a cliff and has only 2 dimensions then 
C we need a type 80 and a type 81 AC in the feature. If it is a 
C 3 dimensional feature we don't need any height ACs
C
	OK=IFS_CB_SCAN(NCOLS,COLS,NUMCBS,FTRPTS,SIMPLE)
	IF (.NOT.OK) THEN
	   CALL LSL_GETMSG(OK,MESSAGE,MESLEN)
	   CALL OUTOPT(MESSAGE(1:MESLEN))
	   FEATURE_CHECKS=.FALSE.
	   GOTO 30
	ENDIF
C
C Did we acually detect height ACs of the desired type ? 
C 1) Does a 2D string have appropriate height ACs
	DO 10 I=1,NCOLS
	   IF (COLS(I).EQ.80) PTLEF=.TRUE.	! zleft
	   IF (COLS(I).EQ.81) PTRIG=.TRUE.	! zright
	   IF (COLS(I).EQ.93) HADZS=.TRUE.	! z
10	CONTINUE
C
C 3D string- X,Y,Z?
	IF (HADZS) ITYP=ISIGN(2,ITYP)
C
C If cliff has per point left/right hts, set ITYP to -4
	IF ((ABS(ITYP).EQ.3).AND.PTLEF.AND.PTRIG) THEN
	   ITYP=-4
	ENDIF
C
	IF (.NOT.HADZS) THEN
	   IF (ABS(ITYP).EQ.1) THEN		! contour
	      IF ((AC2HT.AND..NOT.HADAC2)
     &		   .OR.
     &		   (AC3HT.AND..NOT.HADAC3)) THEN
	         CALL EXPAND(WARNING//
     &			'Feature with FSN %N (%N) has no type'
     &				  ,NF(1),NF(2))
	         IF (AC2HT) THEN
	            CALL APPEND('2')
	         ELSEIF (AC3HT) THEN
	            CALL APPEND('3')
	         ENDIF
	         CALL OUTOPT(EXPDSC)
	         CALL OUTOPT('                 AC - feature ignored')
	         GOTO 20
	      ENDIF
	   ELSEIF (ABS(ITYP).EQ.3) THEN	! cliff
	      IF (.NOT.HADLEF.OR..NOT.HADRIG) THEN
	         CALL EXPAND(WARNING//
     &			'Fixed height cliff feature with FSN %N (%N)'
     &				  ,NF(1),NF(2))
	         CALL OUTOPT(EXPDSC)
	         CALL OUTOPT(
     &			'                 has missing type 80 '//
     &			'or 81 AC - feature ignored')
	         GOTO 20
	      ENDIF
	   ENDIF
	ENDIF
C
C 2) XYZ string - shouldn't have any height or cliff ACs
	IF ((ABS(ITYP.EQ.2))
     &		.AND.(HADAC2.OR.HADAC3.OR.HADLEF.OR.HADRIG)) THEN
	   CALL EXPAND(WARNING//
     &			'3D feature with FSN %N (%N) has '
     &				,NF(1),NF(2))
	   CALL APPEND('conflicting AC and')
	   CALL OUTOPT(EXPDSC)
	   CALL OUTOPT(
     &		 '                 coordinate heights - feature ignored')
	   GOTO 20
	ENDIF
	IF ((ABS(ITYP.EQ.4))
     &		.AND.(HADAC2.OR.HADAC3.OR.HADLEF.OR.HADRIG)) THEN
	   CALL EXPAND(WARNING//
     &			'Cliff feature with FSN %N (%N) has '
     &				,NF(1),NF(2))
	   CALL APPEND('conflicting AC and')
	   CALL OUTOPT(EXPDSC)
	   CALL OUTOPT(
     &		 '                 coordinate heights - feature ignored')
	   GOTO 20
	ENDIF
C
C 3) Cliff with more than simple xy or simple xyz z2 dimensions. 
	IF (ABS(ITYP).EQ.4) THEN
	   IF (PTLEF.XOR.PTRIG) THEN
	      CALL EXPAND(WARNING//
     &			'Cliff feature with FSN %N (%N) has '
     &				,NF(1),NF(2))
	      IF (PTLEF) THEN
	         CALL APPEND('only left side')
	      ELSEIF(PTRIG) THEN
	         CALL APPEND('only right side')
	      ENDIF
	      CALL OUTOPT(EXPDSC)
	      CALL OUTOPT(
     &		 '                 coordinate heights - feature ignored')
	      GOTO 20
	   ENDIF
	ENDIF
C
C Cliffs must be defined by at least 4 points ...
	IF (ABS(ITYP).EQ.3) THEN
	   IF (FTRPTS.LT.4) THEN
	      CALL EXPAND(WARNING//
     &		'IFF cliff feature %N (%N) has less than',NF(1),NF(2))
	      CALL OUTOPT(EXPDSC)
	      CALL OUTOPT(
     &			'                 4 points - feature ignored')
	      GOTO 20
	   ENDIF
	ENDIF
C
C Check that a cliff has not been declared as a river or ridge!
	IF (RIDPTS.AND.ABS(ITYP).GE.3) THEN
	   CALL EXPAND(WARNING//
     &		'IFF cliff feature %N (%N) is also assigned as'
     &					,NF(1),NF(2))
	   CALL OUTOPT(EXPDSC)
	   CALL OUTOPT(
     &			'                a ridgeline - feature ignored')
	   GOTO 20
	ELSEIF (RIVPTS.AND.ABS(ITYP).GE.3) THEN
	   CALL EXPAND(WARNING//
     &		'IFF cliff feature %N (%N) is also assigned as'
     &					,NF(1),NF(2))
	   CALL OUTOPT(EXPDSC)
	   CALL OUTOPT(
     &			'                a river - feature ignored')
	   GOTO 20
	ENDIF
	GOTO 30
C
20	IGNORE_FEATURE=.TRUE.			! waste feature on return
C
30	RETURN
	END
