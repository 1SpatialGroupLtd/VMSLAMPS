C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-01-26 12:31:20.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE ENTBOX(IX,IY,IZ,IFCODE,IERR)
C
***	MODULE	ENTBOX
***	IDENT	07DE87
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	Converted for TRIEDIT			TJH	07-Dec-1987
CMOD	Feature coding added			TJH	26-Mar-1986
CMOD	TEXTOT replaced by OUTOPT		 DM	03-Jul-1984
CMOD	INDB and NAYB now in MAC		 DM	29-May-1984
C	Standardised				TJH	25-May-1984
C
C Store IX,IY,IZ as a new node in the data set, by adding it onto
C end of the data presently there, and updating the box structure
C at the same time. The feature code array element TPOLGY(NP) is
C set to the value of IFCODE.
C The last point stored was NP, and on exit IERR records any error
C condition that may exist
C
C Write a warning about data limits if we are in graphics mode
C and we have crossed the 10% space left threshold.
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER		IX,IY,IZ! x,y,z position
	BYTE		IFCODE	! "feature code" for change
C				! 0 = normal
C				! 1 = river
C				! 2 = ridgeline
	INTEGER		IERR	! error return
C
C W/s
	INTEGER		K,L,M	! temp. variables
C
C Parameters:
	INCLUDE	'LSL$DTMCREATESYS:MESPAR.PAR'
	INCLUDE 'LSL$CMNTRIEDIT:TRIEDITMSG.PAR'
C
C Common:
	INCLUDE	'LSL$DTMCREATESYS:MESSAGE.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:DATQ.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:TPOLGY.CMN'
C
C ......................................................................
C
	IF (NPINW.NE.-1.AND.NP.EQ.NMAX*0.9) THEN
	   CALL OUTOPT(WARNING//'90% of available data space used!')
	ENDIF
C
C Call the garbage collector if we have reached NMAX (the maximum
C number of points that can be held in memory).
	IF (NP.EQ.NMAX) CALL GARBAG
C
C Check if we can add another data location to the list (hopefully
C garbage collection may have allowed us a bit more room if things
C are close).
	IF (NP.LT.NMAX) THEN
	   NP=NP+1
	ELSE
	   CALL LSL_GETMSG(TRIEDIT__STACKOVR,MESSAGE,MESLEN)
	   CALL ALARMS(1,0,MESSAGE(:MESLEN))	! close down and quit
	ENDIF
C
C Store the point
	MAC(1,NP)=IX
	MAC(2,NP)=IY
	MAC(3,NP)=IZ
	TPOLGY(NP)=IFCODE
C
C Tack it onto the box structure. Calculate its box number
	K=MAC(2,NP)/MYI*NBJ+MAC(1,NP)/MXI+1
C
C Check through the box for end of box list
	L=IN(K)
	IF (L.EQ.0) THEN
C
C This is first point in box, put number in index, and go to
C the section dealing with next point in box, and string marking
	   IN(K)=NP
	ELSE
C
C Check for a next point in the box chain indicated by MAC(4,...).
10	   M=L
	   L=IABS(MAC(4,L))
	   IF (L.NE.NPMAX) GOTO 10
C
C End of chain has been reached. the last point in box was M. So
C give it the pointer to the new box, but retain its string
C indicator sign (+ve or -ve).
	   MAC(4,M)=NP*ISIGN(1,MAC(4,M))
	ENDIF
C
C Tack on the new point at end of list including its string marker
	MAC(4,NP)=NPMAX*LASTSN
C
C Indicate no neighbours have yet been written to file
	MAC(5,NP)=1
	RETURN
	END
