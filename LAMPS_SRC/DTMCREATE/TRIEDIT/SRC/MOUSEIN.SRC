	SUBROUTINE MOUSEIN(XL,YL,X,Y,IVAL)
C
***	MODULE	MOUSEIN
***	IDENT	24AU99
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
C	Created					TJH 08-Dec-1987
C
C Get screen position (X,Y) when a button is pressed on a GPX mouse.
C IVAL is the value of the button pressed by the user.
C
	IMPLICIT NONE
C
C Arguments:
	REAL 		XL,YL		! start coords.
	REAL		X,Y		! position
	INTEGER		IVAL		! button ident
C
C W/s
	INTEGER		BUTTON		! button # used
	INTEGER		MASK		! EF mask
	INTEGER		IX,IY,IXA,IYA
C
C Functions:
	LOGICAL		HAD_MOUSE
	INTEGER		GET_BUTTON
C
C Common:
	INCLUDE 'LSL$CMNTRIEDIT:ANNOT.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:CONTR.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:GKS.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:MOUSE.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:VAREFN.CMN'
C
C ......................................................................
C
	FBFLG=9				! nominate an EFN number!
	TBFLG=8				! nominate an EFN number!
C
C Switch the mouse on 
	CALL BALINIT(.TRUE.)
C
C Put up the cursor
	PLANE_MASK=.NOT.15
	CALL LSG_PLANE_SELECT(WKID,PLANE_MASK)
	CALL LSG_PLANE_OFFSET(WKID,4)
	CALL LSG_SET_CURSOR(WKID,XL,YL,.TRUE.) !start cursor
	MASK=0				! clear to start with
	MASK=IBSET(0,MOD(FBFLG,32)).OR.IBSET(0,MOD(TBFLG,32))
C
10	CALL SYS$WFLOR(%VAL(FBFLG),%VAL(MASK))
C
C Find out which button has been pressed?
	BUTTON=GET_BUTTON()
	IF (BUTTON.NE.0) GOTO 20
C
C so presumably was the mouse
	CALL HAD_MOUSE		! to clear event flag
	CALL GET_MOUSE_POSITION(X,Y)
C
C Convert real screen values to scaled integer
	CALL CONPOS(IXA,IYA,INT(X)-IXSH,INT(Y)-IYSH)
C
C Check they are in the present window (that user has not careered
C wildly round the screen). Limit the cursor to the data window.
	IXP=MAX0(MIN0(IXA,JFC),JSC)
	IYP=MAX0(MIN0(IYA,JFR),JSR)
C Convert these checked coordinates back into screen ones.
	CALL POSCON(IX,IY,IXP,IYP)
	IX=IX + IXSH
	IY=IY + IYSH
	CALL LSG_SET_CURSOR(WKID,
     &			FLOAT(IX),
     &			FLOAT(IY),
     &			.TRUE.) 		! move cursor 
	GOTO 10
C
20	CALL HAD_MOUSE		! to clear event flag
C
C Note cursor position
	CALL GET_MOUSE_POSITION(X,Y)
C
C Find out which button has been pressed?
	IF (BUTTON.EQ.1) THEN
	   IVAL='P'			! FB 1 ==> 'point'
	ELSEIF (BUTTON.EQ.2) THEN
	   IVAL='M'			! FB 2 ==> 'master point'
	ELSEIF (BUTTON.EQ.3) THEN
	   IVAL='E'			! FB 3 ==> 'end point'
	ENDIF
C
C Switch the cursor and mouse off
	PLANE_MASK=-1
	CALL LSG_PLANE_SELECT(WKID,PLANE_MASK)
	CALL LSG_PLANE_OFFSET(WKID,0)
	CALL LSG_SET_CURSOR(WKID,
     &			FLOAT(IX),
     &			FLOAT(IY),
     &			.FALSE.) 	      ! cursor off
	CALL BALINIT(.FALSE.)
	RETURN
	END
C
C
	INTEGER FUNCTION GET_BUTTON
C
***	IDENT	14JN85
***	MODULE	GET_BUTTON
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					CCB	14-May-1985
C
C Returns non-zero button number if one has been pressed
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$CMNTRIEDIT:MOUSE.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:VAREFN.CMN'
C
	GET_BUTTON = BUTTON_NUMBER		! button number
	IF (BUTTON_NUMBER.NE.0) THEN		! one was pressed
	   BUTTON_NUMBER = 0			! clear it
	   CALL SYS$CLREF(%VAL(FBFLG))		! clear event flag
	ENDIF
C
	RETURN
	END
C
C
	SUBROUTINE BUTTON_AST(ASTPRM)
C
***	IDENT	04NO87
***	MODULE	BUTTON_AST
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					CCB	14-May-1985
C
C Vaxstation 1 mouse button AST routine
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$CMNTRIEDIT:MOUSE.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:VAREFN.CMN'
C
C argument
C A real AST parameter if called from UIS, but the button number
C from MOTIF. UIS button 'number' is in BUTTON_TOKEN
	INTEGER*4	ASTPRM
C
	EXTERNAL	MOUSE_AST
C
C workspace
	INTEGER		BUT
	LOGICAL		MOTIF
C
	IF (BUTTON_TOKEN.EQ.0) THEN
	   BUT = ASTPRM-1			! MOTIF version
	   MOTIF = .TRUE.
	ELSE
	   BUT = BUTTON_TOKEN.AND.3		! actual number (0-2)
	   MOTIF = .FALSE.
	ENDIF
	IF (BUTTON_TOKEN.LT.0.OR.MOTIF) THEN	! button is down
	   IF (BUTTON_NUMBER.EQ.0) THEN		! last one has been read
	      BUTTON_NUMBER = BUT+1
	      CALL SYS$SETEF(%VAL(FBFLG))	! set event flag
	   ENDIF
	ENDIF
C
	RETURN
	END
C
C
	SUBROUTINE MOUSE_AST(ASTPRM)
C
***	IDENT	14JN85
***	MODULE	MOUSE_AST
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					CCB	14-May-1985
C
C Vaxstation 1 mouse movement AST routine
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$CMNTRIEDIT:MOUSE.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:VAREFN.CMN'
C
C argument
	INTEGER*4	ASTPRM(2)
C
	IF (MOUSE_ON) THEN		! still turned on
	   MOUSE_MOVE = .TRUE.		! mouse has moved
	   CALL SYS$SETEF(%VAL(TBFLG))	! set event flag
	ENDIF
C
	RETURN
	END
C
C
	LOGICAL	FUNCTION HAD_MOUSE
C
***	IDENT	14JN85
***	MODULE	HAD_MOUSE
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					CCB	14-May-1985
C
C True if mouse has moved
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$CMNTRIEDIT:MOUSE.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:VAREFN.CMN'
C
	HAD_MOUSE = MOUSE_MOVE			! has it moved
	IF (MOUSE_MOVE) THEN
	   MOUSE_MOVE = .FALSE.			! hasn't now
	   CALL SYS$CLREF(%VAL(TBFLG))	! clear event flag
	ENDIF
C
	RETURN
	END
C
