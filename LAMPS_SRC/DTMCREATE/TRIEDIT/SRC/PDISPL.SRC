C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-01-26 12:54:38.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE PDISPL(IOPTA,IOPTB,IOBJ)
C
***	MODULE	PDISPL
***	IDENT	07DE87
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	Converted for TRIEDIT			TJH	07-Dec-1987
CMOD	Colours added for feature coding, both for
C	individual pnt. display and STP strings TJH	22-Apr-1986
CMOD	Feature codes added in TPOLGY()		TJH	26-Mar-1986
CMOD	Only the discontinuous points now marked with 
C	a small square for breaklines option	TJH	20-Jun-1985	
CMOD	Single points output with a '+' symbol 
C	by STPOS command (IOPTA=5). These were
C	formerly invisible to the user, bad
C	news for 3d strings via IFF spt. hts.!	TJH	10-Dec-1984
CMOD	Optimized a bit; call to OUTBUF added	 DM	06-Jun-1984
CMOD	INDB and NAYB now in MAC		 DM	29-May-1984
C	Standardised				TJH 	25-May-1984
C
	INCLUDE 'LSL$CMNTRIEDIT:ANNOT.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:DATQ.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:TPOLGY.CMN'
C
C Display some facet of a point depending on IOPTA: 
C	1=post
C	2=sequence number
C	3=type of data point
C	4=string sign
C	5=connecting lines between pts in same string inside the window
C	6=ridgeline points
C	7=river points
C
C IOPTB is only used to indicate the type of z-value posting to be done.
C IOBJ is the object type to be used for doing the display.
C Pen colour is swapped for different feature codes.
C
	LOGICAL		DATCOL	! pen colour selected for data pts.
	LOGICAL		RIDCOL	! pen colour selected for river pts.
	LOGICAL		RIVCOL	! pen colour selected for river pts.
	LOGICAL		BRKCOL	! pen colour selected for breakline pts.
	LOGICAL		IMACOL	! pen colour selected for imaginary pts.
C
C Function:
	LOGICAL	HADCTRLC		! had CTRL/C?
C
C ......................................................................
C
C Check for no points in the window, or the window being switched
C off
	IF (NPINW.LE.0) GOTO 230
C There are some - initialise the colour flags
	DATCOL=.TRUE.
	RIDCOL=.FALSE.
	RIVCOL=.FALSE.
	BRKCOL=.FALSE.
	IMACOL=.FALSE.
C
C Set initial pen colour to default
	CALL NEWOBJ(IOBJ)
C Check each point individually
	LAST=INWNPT(1)
	CALL HADCTRLC			! clear any outstanding CTRL/C
	DO 210 I=1,NPINW
	   J=INWNPT(I)
C Check point J is not an imaginary point
	   IF (J.LE.LIMPOL) GOTO 150
C Check this is not a deleted point
	   IF (IABS(MAC(5,J)).EQ.1) GOTO 200
C Check the point is in the window
	   CALL LACWIN(MAC(1,J),MAC(2,J),INSIDE)
	   IF (INSIDE.EQ.0) GOTO 150
C Convert to screen coordinates
	   CALL POSCON(IX,IY,MAC(1,J),MAC(2,J))
C
C Choose appropriate display for point
	   GOTO (10,60,70,80,100,160,180),IOPTA
C
C ......................................................................
C
C Post the data value at the point, checking IOPTB for whether
C data position only is to be displayed, posting only, or both
10	   IF (TPOLGY(J)-1) 20,30,40
20	   CALL NEWOBJ(7)
	   GOTO 50
30	   CALL NEWOBJ(1)
	   GOTO 50
40	   CALL NEWOBJ(2)
50	   IF (IOPTB.NE.-1) CALL PLSYMB(IX,IY,1)
	   IF (IOPTB.NE.1) CALL POST(IX+10,IY,MAC(3,J),A,0)
	   GOTO 200
C
C ......................................................................
C
C Post the sequence number (a) above any z-value already posted,
C starting the sequence after the first imaginary point.
60	   A=J-LIMPOL
	   CALL POST(IX+10,IY+10*KMULT,K,A,1)
	   GOTO 200
C
C ......................................................................
C
C Plot the type of point, discontinuous (breakline) points
C are plotted out with a small square
70	   IF (MAC(3,J).LT.0) THEN
	      IF (J.LT.LIMPOL) THEN
	         IF (.NOT.IMACOL) THEN
	            IMACOL=.TRUE.
	            BRKCOL=.FALSE.
	            DATCOL=.FALSE.
	            IMACOL=.FALSE.
	            CALL NEWOBJ(9)
	         ENDIF	   
	      ELSE
	         IF (.NOT.BRKCOL) THEN
	            BRKCOL=.TRUE.
	            IMACOL=.FALSE.
	            DATCOL=.FALSE.
	            IMACOL=.FALSE.
	            CALL NEWOBJ(8)
	         ENDIF	   
	      ENDIF
	      CALL PLSYMB(IX,IY,7)
	   ENDIF
	   GOTO 200
C
C ......................................................................
C
C Plot the string sequence indicator of the points in the window
C as either an asterisk or a diamond for every point - plotted
C above the point location.
80	   IF(MAC(4,J).GT.0)GOTO 90
	   CALL PLSYMB(IX,IY+10,2)
	   GOTO 200
90	   CALL PLSYMB(IX,IY+10,1)
	   CALL PLSYMB(IX,IY+10,3)
	   GOTO 200
C
C ......................................................................
C
C Join the strings together (that occur inside the window) with a
C line to show which string is which. As the sign of the string
C marker alternates, so does the line type.
100	   IF (LAST.NE.J-1) GOTO 150
	   IF (TPOLGY(J)-1) 110,120,130
110	   IF (DATCOL) GOTO 140
	   DATCOL=.TRUE.
	   RIDCOL=.FALSE.
	   RIVCOL=.FALSE.
	   CALL NEWOBJ(IOBJ)
	   GOTO 140
120	   IF (RIVCOL) GOTO 140
	   DATCOL=.FALSE.
	   RIDCOL=.FALSE.
	   RIVCOL=.TRUE.
	   CALL NEWOBJ(1)
	   GOTO 140
130	   IF (RIDCOL) GOTO 140
	   DATCOL=.FALSE.
	   RIVCOL=.FALSE.
	   RIDCOL=.TRUE.
	   CALL NEWOBJ(2)
C Previous point was in the window list. Is that and the present
C one in the same string?
140	   IF (ISIGN(1,MAC(4,LAST)).NE.ISIGN(1,MAC(4,J))
     &		.AND.ISIGN(1,MAC(4,J)).NE.ISIGN(1,MAC(4,J+1)))THEN
	      CALL PLSYMB(IX,IY,1)		! single point string
	   ENDIF
C
	   IF (ISIGN(1,MAC(4,LAST)).NE.ISIGN(1,MAC(4,J))) GOTO 150
C Yes it was, so join these two points
	   CALL LACCLP(MAC(1,LAST),MAC(2,LAST),1)
	   CALL LACCLP(MAC(1,J),MAC(2,J),-1)
150	   LAST=J
	   GOTO 200
C
C ......................................................................
C
C Plot ridgeline points with a diamond
160	   IF (TPOLGY(J).EQ.2) THEN
	      IF (RIDCOL) GOTO 170
	      RIDCOL=.TRUE.
	      DATCOL=.FALSE.
	      CALL NEWOBJ(2)
170	      CALL PLSYMB(IX,IY,2)
	   ENDIF
	   GOTO 200
C
C ......................................................................
C
C Plot river points with a cross
180	   IF (TPOLGY(J).EQ.1) THEN
	      IF (RIDCOL) GOTO 190
	      RIVCOL=.TRUE.
	      DATCOL=.FALSE.
	      CALL NEWOBJ(1)
190	      CALL PLSYMB(IX,IY,3)
	   ENDIF
C
C ......................................................................
C
200	   IF (HADCTRLC()) GOTO 220
210	CONTINUE
220	CALL OUTBUF
230	CALL NEWOBJ(IOBJ)
	RETURN
	END
