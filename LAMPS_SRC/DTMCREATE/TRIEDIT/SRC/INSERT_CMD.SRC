C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-01-26 12:47:36.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE INSERT_CMD(IX,IY,KEY)
C
***	MODULE	INSERT_CMD
***	IDENT	21DE87
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
C 	Created						TJH 22-Dec-1987
C
C Change a point or a string. Ask user which, and also ask it for
C the new height to be used
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER		IX,IY		! position of point
	INTEGER		KEY		! key pressed
C
C Parameters:
	INCLUDE 	'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE 	'LSL$DTMCREATESYS:MESPAR.PAR'
C
C Common:
	INCLUDE 	'LSL$CMNTRIEDIT:DATQ.CMN'
	INCLUDE 	'LSL$CMNTRIEDIT:COMMAND.CMN'
	INCLUDE 	'LSL$DTMCREATESYS:MESSAGE.CMN'
	INCLUDE 	'LSL$CMNTRIEDIT:TTTYPE.CMN'
	INCLUDE 	'LSL$CMNLSL:EXPC.CMN'
	INCLUDE 	'LSL$CMNLSL:TXTC.CMN'
C
C W/s
	INTEGER		KOND		! inserted point counter
	REAL		H		! new height
	INTEGER		LMULT		! breakline flag
	INTEGER		IH		! new height (internal space)
	BYTE		IFCODE		! new feature code
	INTEGER		I,J		! temp vars
	LOGICAL		OK		! function return
	INTEGER		MVAL		! multivalued string flag
	INTEGER		LIST(3)		! triangle list
	LOGICAL		FIRST		! first point in insertion?
	INTEGER		OLD_NP		! number of points before ins.
C
C Function:
	LOGICAL		ADDPNT		! adds a pt to triangulation
C
C ......................................................................
C
	KOND=0				! inserted point counter
	OLD_NP=NP
C
C Set up breakline status, height and FC for the master point
	IF (INSERT_MVAL) THEN
	   MVAL=1
	ELSE
	   MVAL=0
	   H=INSERT_HT
	ENDIF
	LMULT=-1
	IF (.NOT.INSERT_BRE) LMULT=1
C
C Plot a dot at the measured position
10	CALL PLOTQ(IX,IY,1)
	CALL PLOTQ(IX,IY,-1)
	CALL OUTBUF
C
C Check whether this is the first insertion in this string
	FIRST=.FALSE.			! usually
	IF (KOND.NE.0.AND.MVAL.EQ.1) GOTO 20
	IF (KOND.NE.0) GOTO 30
	IF (KEY.EQ.'M'.OR.KEY.EQ.'E') THEN
	   FIRST=.TRUE.			! started on a master point
	ELSE
	   CALL OUTOPT(WARNING//
     &	     'First point must be a master point - command abandoned')
	   GOTO 40
	ENDIF
C
C Read height value for the new master point
20	IF (INSERT_MVAL) THEN
	   IF (KEY.EQ.'E'.AND.KOND.NE.0) THEN
	      IF (T4010) THEN
	         CALL RITVAL('Fin ht: ',H,I,1)
	      ELSE
	         CALL RITVAL('Final height: ',H,I,1)
	      ENDIF
	   ELSEIF (KEY.EQ.'M'.OR.KEY.EQ.'E') THEN
	      IF (T4010) THEN
	         CALL RITVAL('Ht: ',H,I,1)
	      ELSE
	         CALL RITVAL('Height: ',H,I,1)
	      ENDIF
	   ENDIF
	ENDIF
C
C Convert window xy to integer scaled value xy, and convert
C unscaled height to integer scaled value.
30	I=IX
	J=IY
	CALL CONPOS(LIST(1),LIST(2),I,J)
	CALL CONVER(H,IH,3)
C
C Convert height to negative if it is a discontinuous point.
	LIST(3)=IH*LMULT
C
C Insert this point into the list of backlogged points, or flush it
C out as appropriate. ADDPNT returns .TRUE. if we fail.
	IF (ADDPNT(LIST,IX,IY,KOND,MVAL,LMULT,KEY,INSERT_FC)) GOTO 40
C
C Check whether more points with same value/type are to be
C inserted as a continuation of the present insertion string
	IF (KEY.NE.'E') THEN
	   CALL XHAIR(IX,IY,KEY)
	   GOTO 10
	ENDIF
40	IF (NP-OLD_NP.GT.0) THEN
	   IF (VT100) THEN
	      CALL POINTS(2)		! update the tell-back area
	   ENDIF
	   CALL EXPAND('%N node%m added, total now %N',NP-OLD_NP,NP)
	   CALL OUTOPT(EXPDSC)
	   CALL OUTOPT(' ')
	ENDIF
	RETURN
	END
