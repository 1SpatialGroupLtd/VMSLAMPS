C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-01-26 12:28:40.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE DELPNT(NOD)
C
***	MODULE	DELPNT
***	IDENT	07DE87
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	Converted for TRIEDIT			TJH	07-Dec-1987
C Created 					MJM	04-Mar-1987
C
C
C Parameters:
	INCLUDE 'LSL$CMNTRIEDIT:DIMS.PAR'
	INCLUDE 'LSL$CMNTRIEDIT:TRIEDITMSG.PAR'
C
C Common:
	INCLUDE 'LSL$CMNTRIEDIT:DATQ.CMN'
	INCLUDE 'LSL$DTMCREATESYS:MESSAGE.CMN'
C
	DIMENSION NTEM(NTMSIZ),CIRC(NTMSIZ),EQA(3),EQB(3),IXY(2),LIST(4)
C
C ......................................................................
C
C......Remove a node entirely from the network, and retriangulate over
C......the hole left behind
C
C......Remember NOD position in surrounding polygon
	IX=MAC(1,NOD)
	IY=MAC(2,NOD)
C......Get neighbours of point to be removed from triangulation
	CALL GETNAY(NOD,NTEM,NTMSIZ,NUM)
C......Ensure there are no end point duplicates
	IF(NTEM(1).EQ.NTEM(NUM))NUM=NUM-1
C......Delete node link from NOD to neighbours in the neighbour lists
	DO 10 I=1,NUM
	   CALL DELCON(NTEM(I),NOD)
10	CONTINUE
C......Duff the node, and return its free space to the stack
	CALL REMNOD(NOD)
C......Ensure that no repetition is kept of first/last nodes
	IF(NTEM(1).EQ.NTEM(NUM))NUM=NUM-1
C......Get the radius of the circumscribing circle of all the possible
C......triangles that could be formed round the edge of the polygon,
C......store them in CIRC if they form an acceptable triangle that
C......lies inside the polygon.
	DO 20 I=1,NUM
	   CALL DELTRA(NTEM,NTMSIZ,NUM,I,CIRC(I))
20	CONTINUE
C......Go through the polygon list until only 3 points remain. Then all
C......retriangulation will have taken place.
	NUMR=NUM-3
	DO 50 IRED=1,NUMR
C......Use the angle list to determine possible retriangulation.
C......every triangle I,J,K is checked as a possible one to form on
C......the basis of possessing the smallest radius, and lying inside
C......the polygon.
	   L=0
	   EQUI=10.E25
	   DO 30 I=1,NUM
	      IF(CIRC(I).LT.EQUI) THEN
C......Smaller radius (squared) than any previous valid triangle for
C......this polygon
	         L=I
	         EQUI=CIRC(I)
	      ENDIF
30	   CONTINUE
	   IF (L.EQ.0) THEN
	      CALL LSL_GETMSG(TRIEDIT__NOTRI,MESSAGE,MESLEN)
	      CALL ALARMS(1,0,MESSAGE(1:MESLEN)//' - DELPNT')
	   ENDIF
C
C......L is the position in NTEM of the node to use with L+1 and L+2
C......to form the next triangle in the retriangulation for the
C......polygon, so (1) form new links between the triangle nodes
C......concerned, and (2) reduce polygon size stored in ntem and in
C......circ, and (3) calculate new radius index for old polygon
C......nodes L and L+2 with L+1 omitted.
C
C......Get nodes either side of node L (NODH AND NODJ) and either
C......side of node L+2 (NODJ and NODL)
	   M=L-1
	   IF(M.EQ.0)M=NUM
	   NODH=NTEM(M)
	   NODI=NTEM(L)
	   M=MOD(L,NUM)+1
	   NODJ=NTEM(M)
	   M=MOD(M,NUM)+1
	   NODK=NTEM(M)
	   M=MOD(M,NUM)+1
	   NODL=NTEM(M)
C......Add link from NODI to NODJ and vice versa
	   CALL INJOIN(NODK,NODH,NODI,NODJ)
	   CALL INJOIN(NODI,NODJ,NODK,NODL)
C......If we are in the last cycle, do not update CIRC and NTEM
	   IF(IRED.NE.NUMR) THEN
C......Shrink the list of neighbours in NTEM and indices in CIRC to omit
C......node L+1
	      M=MOD(L,NUM)+1
	      DO 40 I=M,NUM
	         NTEM(I)=NTEM(I+1)
	         CIRC(I)=CIRC(I+1)
40	      CONTINUE
	      NUM=NUM-1
C......Calculate new equilaterality index for nodes either side of
C......node L+1 (these are now nodes L-1 and L).
	      M=MIN0(L,NUM)-1
	      IF(M.EQ.0)M=NUM
	      CALL DELTRA(NTEM,NTMSIZ,NUM,M,CIRC(M))
	      L=MIN0(L,NUM)
	      CALL DELTRA(NTEM,NTMSIZ,NUM,L,CIRC(L))
	   ENDIF
50	CONTINUE
C......All done successfully
	RETURN
	END
