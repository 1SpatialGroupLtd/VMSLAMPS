C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-01-26 12:48:04.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION INSRTP(IDAT,JDAT,KOND,IFCODE,NEW_FEATURE)
C
***	MODULE	INSRTP
***	IDENT	25AU88
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	NEW_FEATURE added			TJH	25-Aug-1988
CMOD	Converted for TRIEDIT			TJH	07-Dec-1987
CMOD	TPOLGY() feature codes added		TJH     26-Mar-1986
CMOD	Now a function together with LINEQN to 
C	cope with clifflines			TJH	19-Mar-1986
CMOD	The word according to St. Michael	 DM	30-Jan-1985
CMOD    NTEM dimensioned to NTMSIZ via DIMS.PAR  DM     05-Jul-1984
CMOD	Old routine NEARLY now a function,
CMOD	DELLNK, FRMLNK now in-line		 DM	08-Jun-1984
C	Standardised				TJH	25-May-1984
C
C......Insert a point (IDAT) into the triangulation. If this is
C......the first point KOND=0 on entry, otherwise it is the position
C......of the latest point on the string. The insertion of a point has
C......two phases related to: a) its insertion in a triangle, on a
C......triangle side, or at a triangle vertex, and b) connection
C......of the point to previous point in the string. Stage (b)
C......only occurs if this is not the first point in the string.
C......Function returns .T. if something has gone wrong.
C
	INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'
	INCLUDE 'LSL$CMNTRIEDIT:DIMS.PAR'
	INCLUDE 'LSL$CMNTRIEDIT:DATQ.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:TPOLGY.CMN'
C
	BYTE		IFCODE	! "feature code" 
C				! 0 = normal
C				! 1 = river
C				! 2 = ridgeline
C
	DIMENSION IDAT(3),JDAT(3)
	DIMENSION LIST(NTMSIZ),NTEM(NTMSIZ),IXY(2),ITEMP(2,2),
     1  EQA(3),EQB(3)
C
	LOGICAL	  OK
	LOGICAL	  NEARLY
	LOGICAL	  LINEQN
	LOGICAL	  NEW_FEATURE	! started a new ftr or just within one?
C
C ......................................................................
C
	INSRTP=.FALSE.		! assume the best	
C......Update the point count for this string
	KOND=KOND+1
C......Check point for lying inside the perimeter of the map area
C......covered by the triangulation presently held in memory. This
C......is always a rectangular area, and hence can be checked very
C......quickly.
	IF (IDAT(1).LT.MX1.OR.IDAT(1).GT.MX2.OR.
     1      IDAT(2).LT.MY1.OR.IDAT(2).GT.MY2) GOTO 210
C......Point lies inside the map area. Check whether there is a previous
C......point in the string.
	IF (KOND.NE.1) GOTO 10
C......Update string sign marker, as this is the first point on a new
C......string
	IF (NEW_FEATURE) THEN
	   NEW_FEATURE=.FALSE.
	   LASTSN=-LASTSN
	ENDIF
	GOTO 160
C......Check previous point and the present point are not coincident.
10	IF (.NOT.
     &	   NEARLY(IDAT(1),IDAT(2),JDAT(1),JDAT(2),LIMDIS)) GO TO 20
C......Ignore this point, and return
	KOND=KOND-1
	GOTO 250
C
C************ MAP PATH FROM PREVIOUS POINT TO PRESENT POINT ***********
C
C......We have to join the previous point in the string to this point,
C......chopping all links crossed on the way between them thus creating
C......a possible myriad of new points on the way to the present point
C......(still waiting for insertion).
C
C......Check for the line joining previous and present points with all
C......sides of all triangles along the path in between the two points.
C......Start with the triangles around the previous point, and work
C......towards the location of the present point. 
C......Every new point inserted on the way to the present point becomes 
C......(in its turn) the previous point.
C
C......Get most recent previously inserted node number
20	NPREV=NP
C......Get equation of the line between previous and present point. If
C......distance D is zero we most probably have crossed a cliffline.
C......LINEQN returns .F. in this case
	OK=LINEQN(JDAT(1),JDAT(2),IDAT(1),IDAT(2),D,EQA)
	IF (.NOT.OK) GOTO 240
	D2=D*D
C......Get neighbours of the last inserted point (NP)
	CALL GETNAY(NP,NTEM,NTMSIZ,NUM)
C......Go through all the sides unconected with NPREV to determine
C......possible intersection, and hence path of the inserted line
	DO 150 I=2,NUM
	   J=NTEM(I-1)
	   K=NTEM(I)
C......Calculate line equation for the edge from nodes J to K
	   OK=LINEQN(MAC(1,J),MAC(2,J),MAC(1,K),MAC(2,K),D,EQB)
	   IF (.NOT.OK) GOTO 240
C......Calculate intersection between edge and new insertion line
	   CALL INTSEC(EQA,EQB,IXY,IPAR)
C......Check for being parallel. This is not the case we want if
C......they are parallel
	   IF (IPAR.EQ.1) GOTO 150
C......Test for being the correct intersection (i.e. lying closer to
C......IDAT than JDAT is to IDAT
	   CALL EUCLID(IDAT(1),IDAT(2),IXY(1),IXY(2),A,0)
	   IF (A.GT.D2) GOTO 150
C......Store outside triangle edge points temporarily (for use 
C......in INTONL)
	   ITEMP(1,1)=MAC(1,J)
	   ITEMP(1,2)=MAC(2,J)
	   ITEMP(2,1)=MAC(1,K)
	   ITEMP(2,2)=MAC(2,K)
C......Check for intersection at ends of outside edge (ie at vertices)
	   CALL INTONL(IXY,ITEMP,2,1,MARK)
C......Check for no intersection
	   IF (MARK.EQ.0) GOTO 150
C......Intersection exists with the outside edge, does it also exist
C......from the edge with the inserted line direction? (in other words
C......does the present point occur before the intersection has been
C......reached?)
	   ITEMP(1,1)=JDAT(1)
	   ITEMP(1,2)=JDAT(2)
	   ITEMP(2,1)=IDAT(1)
	   ITEMP(2,2)=IDAT(2)
	   CALL INTONL(IXY,ITEMP,2,1,LARK)
C......Check intersection type - first: none present, but there
C......was one with a polygon external edge.
	   IF (LARK.NE.0) GOTO 50
C......No intersection is present, so present point must lie in this
C......triangle, if the intersection is closer to idat than to JDAT
	   CALL EUCLID(JDAT(1),JDAT(2),IXY(1),IXY(2),B,0)
	   IF (A.GT.B) GOTO 150
C......Intersection is nearest IDAT, but we need to check that it is
C......not parallel to one of the sides coming from the previous
C......inserted point - NP. If it is MARK will be set to 2 (left node 
C......intersection) or 3 (right node intersection). 
C......MARK=1 indicates we are inside the triangle and not on its edge.
	   IF (MARK.EQ.1) GOTO 40
C......We are along one of the sides. Decide which one.
	   IF (MARK.EQ.3) GOTO 30
C......Along the left edge. Assemble sides in question and insert 
C......the point
	   LIST(1)=NP
	   LIST(2)=J
	   LIST(3)=K
	   KOINC=1
	   GOTO 170
C......Along right edge. Assemble sides ( 3rd point is next neighbour of
C......NP, as rotationally we are dealing with the next triangle).
30	   LIST(1)=NP
	   LIST(2)=K
	   L=I+1
	   IF(I.EQ.NUM)L=2
	   LIST(3)=NTEM(L)
	   KOINC=1
	   GOTO 170
C......We are inside the correct triangle. Load list with triangle
C......corners, and then insert point
40	   LIST(1)=NP
	   LIST(2)=J
	   LIST(3)=K
	   KOINC=0
	   GOTO 170
C......Second: along the insert path but not at present point. Do the
C......usual extra point insertion, and cycle round
50	   IF (LARK.EQ.1) GOTO 90
C......Third: at previous point. This must mean we have just crossed
C......a very thin triangle and the previous intersection and this one
C......are almost the same.
	   IF (LARK.EQ.2) GOTO 70
C......Fourth: at present point. this is either a vertex replacement
C......or an edge split using the present point.
	   IF (MARK.GT.1) GOTO 60
C......Split edge for present point
	   LIST(1)=J
	   LIST(2)=K
	   LIST(3)=NP
	   KOINC=1
	   GOTO 170
C......Vertex replacement
60	   LIST(1)=J
	   IF (MARK.EQ.3) LIST(1)=K
	   KOINC=-1
	   GOTO 170
C
C......Previous point intersection. Caused by a node very close to an
C......intervening triangle side (LT LIMDIS) leading to an intersection
C......value close to the previous point, although in effect slightly
C......(but marginally) further along the insert path.
C
C......Check for intersection with left or right edge nodes (J or K).
C......If this is the case we need to pick it as the extra point
C......(by replacement)
70	   IF (MARK.NE.1) GOTO 90
C
C......No left/right node intersection. We must not insert another node
C......as we are too close to the previous one, but can instead cut the
C......edge that intersected with the insertion line in two, and join
C......the previous node onto its fourth point. This is a type of
C......partial node-on-edge insertion without adding a node.
C
C......Get fourth node
	   CALL GTFRTH(J,K,NPREV,NPTD)
C
C......We must check whether any such link would pass outside the limits
C......of the triangle being crossed. This can be done by checking for
C......nodes J or K lying inside the triangle that would be created.
C......If either does then we must choose to replace that node instead.
C
C......Assemble the triangle NPREV,NPTD,K and test whether J falls
C......inside.
	   MARK=0
	   CALL INSTST(NPREV,NPTD,K,J,ICOND)
	   IF (ICOND.EQ.1) MARK=2
C......Assemble the triangle NPREV,NPTD,J and test whether k falls
C......inside.
	   CALL INSTST(NPREV,NPTD,J,K,ICOND)
	   IF (ICOND.EQ.1) MARK=MARK + 3
C......MARK now has values of (0=link removal, 2=replace J, 3=replace K,
C......5=replace whichever of J and K is closest to IDAT)
	   IF (MARK.EQ.0) GOTO 80
	   IF (MARK.NE.5) GOTO 90
C......Choose closest to IDAT, and do vertex replacement
	   MARK=2
	   CALL EUCLID(MAC(1,J),MAC(2,J),IDAT(1),IDAT(2),A,0)
	   CALL EUCLID(MAC(1,K),MAC(2,K),IDAT(1),IDAT(2),B,0)
	   IF (B.LT.A) MARK=3
	   GOTO 90
C
C......Or do a link removal, as J and K fall outside the new triangle.
C
C......Form a link between nodes NPREV and NPTD (bi-directional) by
C......inserting NPREV in NPTD's list between J and K, and similarly
C......inserting NPTD in NPEV's list between the same pair of nodes.
80	   CALL INJOIN(NPREV,J,NPTD,K)
	   CALL INJOIN(NPTD,J,NPREV,K)
C......Remove the link between J and K (in both directions)
	   CALL DELCON(J,K)
	   CALL DELCON(K,J)
C......All modified. Now go around and try again
	   GOTO 20
C
C*********************** EXTRA POINT INSERTION **********************
C
C......The usual situation - create a new point and redistribute links
C......to the neighbours. Plot extra point (if interactive window is in
C......operation).
90	   IF (NPINW.EQ.-1) GOTO 100
C......Draw the point on the screen, if the screen is switched on and
C......the point lies inside the present window
	   CALL DPOINT(IXY(1),IXY(2),6,3,1)
C......Interpolate the data point height linearly between the first
C......point on this insertion string and JDAT(3) weighted according
C......to distance.
100	   CALL EUCLID(MAC(1,LSTART),MAC(2,LSTART),IXY(1),IXY(2),A,1)
	   CALL EUCLID(IDAT(1),IDAT(2),IXY(1),IXY(2),B,1)
	   IZ=(IABS(MAC(3,LSTART))+(IABS(IDAT(3))-IABS(MAC(3,LSTART)))
     1	       *A/(A+B))*ISIGN(1,MAC(3,LSTART))
C......Check for type of intersection with triangle edge. MARK=1 
C......indicates an intersection in the middle of the edge, MARK=2 
C......at left end node and MARK=3 at right hand node.
	   IF (MARK-2) 110,120,130
C......Apparently in middle of edge.
110	   LIST(1)=J
	   LIST(2)=K
	   LIST(3)=NPREV
C......Add intersection point to the data set.
	   CALL ENTBOX(IXY(1),IXY(2),IZ,IFCODE,IERR)
C......Update connections
	   CALL ONEDGE(LIST,NTMSIZ,NP)
C......Carry on inserting points on the way to present point
	   GOTO 140
C......Left node needs replacement with new point. Store new point with
C......coordinates of the old one
120	   CALL ENTBOX(MAC(1,J),MAC(2,J),IZ,IFCODE,IERR)
C......Replace vertex connections
	   CALL ONVRTX(J,NTEM,NTMSIZ,NUM,NP)
	   GOTO 140
C......Right node needs replacement with new point. Store new point with
C......coordinates of the old one
130	   CALL ENTBOX(MAC(1,K),MAC(2,K),IZ,IFCODE,IERR)
	   CALL ONVRTX(K,NTEM,NTMSIZ,NUM,NP)
C......Return to get next part of line using edges stored in NTEM
C......JDAT is updated to the new point just entered to ensure that
C......the line equation intersection check (INTONL) does not find
C......a back path towards the previous point.
140	   JDAT(1)=MAC(1,NP)
	   JDAT(2)=MAC(2,NP)
	   GOTO 20
150	CONTINUE
C......No intersection has been found with any of the proferred edges.
C......This means that we are now in the triangle that contains the
C......present point, and hence can now go and put it into the structure
C
C************************ INSERT PRESENT POINT ***********************
C
C......Find which triangle the present point lies inside, or on,
C......by finding the point to which it is closest, and then looking
C......at its triangles in turn until it is found to lie inside, or
C......on the vertex, or on the side of one of them. if it does not lie
C......in any of them then get its neighbours in turn, until the
C......correct triangle is found.
160	CALL GETTRY(IDAT(1),IDAT(2),LIST,NTMSIZ,KOINC)
C......Check for inside triangle (KOINC=0), on an edge (KOINC=1), or
C......on a vertex (KOINC=-1)
170	IF(KOINC)180,190,200
C......On a vertex (KOINC=-1 and vertex is LIST(1)). Add new point to
C......data retaining vertex position, but changing vertex value to new
C......one
180	J=LIST(1)
	CALL ENTBOX(MAC(1,J),MAC(2,J),IDAT(3),IFCODE,IERR)
C......Substitute new vertex for old one
	CALL ONVRTX(J,NTEM,NTMSIZ,NUM,NP)
C......Modify the present point location to agree with the new vertex
	IDAT(1)=MAC(1,NP)
	IDAT(2)=MAC(2,NP)
	GOTO 220
C......Inside the triangle (KOINC=0 and triangle is NPTA,NPTB,NPTC). Add
C......new point to the data set
190	CALL ENTBOX(IDAT(1),IDAT(2),IDAT(3),IFCODE,IERR)
	CALL INTRYG(LIST,NTMSIZ,NP)
	GOTO 220
C......Add new point to the data set as an edge break
200	CALL ENTBOX(IDAT(1),IDAT(2),IDAT(3),IFCODE,IERR)
	CALL ONEDGE(LIST,NTMSIZ,NP)
	GOTO 220
C......Point outside map area - reset the point on string marker
210	KOND=0
C......Copy new point into old point buffer
220	DO 230 I=1,3
	   JDAT(I)=IDAT(I)
230	CONTINUE
C......Remember the node number that has just been reached
	LSTART=NP
C......Draw the point on the screen if the window is switched on, and
C......the point is inside the window
	CALL DPOINT(IDAT(1),IDAT(2),6,3,1)
	GOTO 250
C
C LINEQN returned an error
240	CALL OUTOPT(WARNING//
     &		'Zero width triangle detected, probably cliffline')
	CALL OUTOPT('Further insertion abandoned')
	INSRTP=.TRUE.
250	RETURN
	END
