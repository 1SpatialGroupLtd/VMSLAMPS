C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-01-26 13:57:10.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE PUTNAY(NOD,NTEM,LAX,NUM)
C
***	MODULE	PUTNAY
***	IDENT	31JL87
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	Converted for LSLLIB message formats	TJH	31-Jul-1987
CMOD    Scratch file can be opened mid session  TJH     24-Jul-1984
CMOD	NTEM dimensioned to NAYMAX via DIMS.PAR  DM     05-Jul-1984
CMOD	TEXTOT replaced by WRITEF		 DM	03-Jul-1984
CMOD	More efficient random writes		 DM	11-Jun-1984
CMOD	Old routine GTRECN now in-line		 DM	08-Jun-1984
CMOD	Inefficient NTEM(LAX) now NTEM(50)	 DM	06-Jun-1984
CMOD	NAYB now in MAC				 DM	29-May-1984
C	Standardised				TJH 	25-May-1984
C
C Put the neighbours of a node (NOD) into storage, get them from
C NTEM. There are num of them, and LAX room for them in NTEM.
C
C Split the list into groups of 10, and store in the random
C access file. Leave a pointer to the start in MAC(5,...). Allocate
C storage in groups of 10 neighbours as necessary by using
C the stack.
C
C Parameters:
	INCLUDE 'LSL$CMNTRIEDIT:DIMS.PAR'
	INCLUDE 'LSL$CMNTRIEDIT:TRIEDITMSG.PAR'
	INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'
C
C Common:
	INCLUDE 'LSL$DTMCREATESYS:MESSAGE.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:DATQ.CMN'
	INCLUDE 'LSL$DTMCREATESYS:IOLUNS.CMN'
C
	INTEGER	  NTEM(NTMSIZ)
C
	INTEGER	  I,J
	INTEGER	  NTEM2(0:10)		! for efficient writes
C
C ......................................................................
C
C Get node spawn pointer sign for initial record in case these are
C active
	I=ISIGN(1,MAC(5,NOD))
C Delete NOD from the data file structure, if it is already there
	CALL REMNOD(NOD)
C Get a record to use from the stack list of the free chain records
	LREC=ISTACK(IPSTCK)
C Add one to the stack pointer, check it is not too large
	IF (IPSTCK+1.GT.NSTACK) THEN
	   CALL LSL_GETMSG(TRIEDIT__STACKOVR,MESSAGE,MESLEN)
	   CALL ALARMS(1,0,MESSAGE(:MESLEN)//' - PUTNAY1')
	ELSE
	   IPSTCK=IPSTCK+1
	ENDIF
C Put a pointer to it in MAC(5,...), and give it old spawn sign
	MAC(5,NOD)=LREC*I
C Calculate how many records will be needed altogether
	IFR=(NUM-1)/10+1
C Go through and write the records
	J=-9
	DO 30 I=1,IFR
	   J=J + 10
C If this is last record for node, collect number in record (M).
C If it is not the last record M is the record for continuation
	   M=NUM - J + 1
	   IF (I.NE.IFR) THEN
C Collect a free record from the stack
	      MREC=ISTACK(IPSTCK)
C Add one to the stack pointer, check it is not too large
	      IF (IPSTCK+1.GT.NSTACK) THEN
	         CALL LSL_GETMSG(TRIEDIT__STACKOVR,MESSAGE,MESLEN)
	         CALL ALARMS(1,0,MESSAGE(:MESLEN)//' - PUTNAY2')
	      ELSE
	         IPSTCK=IPSTCK+1
	      ENDIF
	      M=-MREC
	   ENDIF
C Check whether this record is in memory file or disk file
	   IF (LREC.LE.NFREES) THEN
C In memory file area
	      LA=0
	      DO 10 L=J,J+9
	         LA=LA+1
	         IFREES(LA,LREC)=NTEM(L)
10	      CONTINUE
	      IFREES(11,LREC)=M
	   ELSE
C If the random access file was'nt opened before, we certainly need
C it now! 
	      IF (.NOT.DISKFL) THEN  ! DISKFL set (or not!) in SETUP.SRC
	         OPEN(UNIT=LGC2,FILE='TRIEDIT.TMP',STATUS='SCRATCH',
     &		ACCESS='DIRECT',FORM='UNFORMATTED',RECL=11,ERR=50)
	         CALL EXPAND(WARNING//
     &		'There are now too many records for memory (%N)',LREC)
	         CALL OUTOPT(EXPDSC)
	         CALL OUTOPT
     &		('Opening random access disk file '//
     &			'- processing will now be slower')
	         DISKFL=.TRUE.
	      ENDIF
C
C Write the record out - ten neighbours, next record (or length
C of present record if +ve), and polygon limit rectangle
	      DO 20 L=0,9
	         NTEM2(L)=NTEM(J+L)
20	      CONTINUE
	      NTEM2(10)=M
	      LOFF=LREC-NFREES
	      WRITE (LGC2,REC=LOFF,ERR=40) NTEM2
	   ENDIF
C Update the record number for the next record
	   LREC=MREC
30	CONTINUE
C That's it
	GOTO 70
C
C Write error
40	CALL ERRSNS(,I,J)
	IF (J.EQ.0) J=I
	CALL OUTOPT(' ')
	CALL LSL_GETMSG(TRIEDIT__RANDWRT,MESSAGE,MESLEN)
	CALL EXPAND('%'//MESSAGE(1:MESLEN),'PUTNAY')
	CALL OUTOPT(EXPDSC)
	GOTO 60					! get secondary message
C
C File opening errors.
50	CALL ERRSNS(,I,J)
	IF (J.EQ.0) THEN J=I
	   CALL OUTOPT(' ')
	   CALL LSL_GETMSG(TRIEDIT__OPNSCR,MESSAGE,MESLEN)
	   CALL OUTOPT(MESSAGE(1:MESLEN))
C
C Get secondary RMS/FORTRAN error
60	   CALL LSL_GETMSG(J,MESSAGE,MESLEN)	! what went wrong
	   MESLEN=INDEX(MESSAGE,'!') - 1	! (ignore any FAO stuff)
	   IF (MESLEN.LT.0) MESLEN=I
	   CALL ALARMS(1,0,MESSAGE(:MESLEN))	! close down & exit
C
C Normal termination
70	   RETURN
	   END
