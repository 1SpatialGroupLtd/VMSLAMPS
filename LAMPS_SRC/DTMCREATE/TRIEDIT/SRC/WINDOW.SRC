C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1999-08-24 15:00:12.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE WINDOW(IOPT)
C
***	MODULE	WINDOW
***	IDENT	24AU99
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	Converted for TRIEDIT			TJH	07-Dec-1987
CMOD	NTEM dimensioned to NTMSIZ via DIMS.PAR	 DM	05-Jul-1984
CMOD	NAYB now in MAC				 DM	29-May-1984
C	Standardised				TJH 	25-May-1984
C
C Compute which and how many points lie within the presently specified
C window. This is taken to mean not only those that lie within the
C window itself, but also those whose polygon enclosing rectangles
C cover the window. This ensures that we do not miss finding lines
C that cross the window but do not have nodes inside the window.
C Some of this set will still not fall in the window, but will be
C relatively unnumerous. the accuracy of representation is given
C by level. LEVEL=0 provides point in window test. LEVEL=1 adds
C neighbours in window test. LEVEL=2 does the full McCoy with
C a definitive solution. This is user selectable (default is 0),
C as much time can be taken up on super precision calculation
C and storage access by levels 1 and 2. Usually level 0 is a
C perfectly good approximation.
C
C IOPT is either 0 or 1. If zero it indicates a complete restart
C has to be made. If 1 then a list already exists on points
C that can be used, and this only needs modifying by ommitting those
C points no longer valid (used for successive zooms).
C
	INCLUDE 'LSL$CMNTRIEDIT:CONTR.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:DATQ.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:DIMS.PAR'
C
	DIMENSION NTEM(NTMSIZ)
C
C ......................................................................
C
C......Check for window not being activated
	IF (NPINW.EQ.-1) GOTO 60
C......Window is active. Check option
	LASTN=NP
	IF (IOPT.EQ.1) LASTN=NPINW
C......Set points in window to zero
	NPINW=0
C......Are there any points in the old window list?
	IF (LASTN.LE.0) GOTO 60
C......Set number of points in the window to zero, and start anti-kick
C......device, using border object
	CALL NEWOBJ(3)
	CALL BAR(LASTN,0,2)
C......Check that we are not in a zoom. If we are not then all points
C......will be visible from limpol+1 onwards (all non-imaginary ones)
	MARK=1
	IF ((JSC.NE.ISAVSC).OR.(JSR.NE.ISAVSR).OR.
     1     (JLC.NE.ISAVLC).OR.(JLR.NE.ISAVLR)) MARK=0
C......Go through the list
	DO 50 I=1,LASTN
C......Pick up the requisite node number depending on iopt
	   IF (IOPT.EQ.0) NODE=I
	   IF (IOPT.EQ.1) NODE=INWNPT(I)
C......Check node is valid (ie not deleted from the list)
	   IF (IABS(MAC(5,NODE)).EQ.1) GOTO 40
C......Check for unzoomed case (all points notionally visible)
	   IF (MARK.EQ.1) GOTO 30
C
C*************************** ALL LEVELS ********************************
C
C......Check for level 0 - inside window check
	   CALL LACWIN(MAC(1,NODE),MAC(2,NODE),INSIDE)
	   IF (INSIDE.EQ.1) GOTO 30
	   IF (LEVEL.EQ.0) GOTO 40
C
C************************** LEVELS 1 & 2 ******************************
C
C......Point not inside window, but may have neighbour or rectangle
C......in or covering the window.
	   CALL GETNAY(NODE,NTEM,NTMSIZ,NUM)
C......Check for a neighbour inside the window
	   DO 10 J=1,NUM
	      K=NTEM(J)
	      CALL LACWIN(MAC(1,K),MAC(2,K),INSIDE)
	      IF (INSIDE.EQ.1) GOTO 30
10	   CONTINUE
C......Give up now unless using level 2
	   IF (LEVEL.EQ.1) GOTO 40
C
C**************************** LEVEL 2 *********************************
C
C......Check (for level 2) all the neighbour links for crossing the
C......window. If they do then we want to keep this point.
C
C......Go through the neighbour list
	   DO 20 J=1,NUM
	      K=NTEM(J)
C......Check all radial connections to neighbours.
C......Pick up node NODE and node K locations in separate variables
C......as the clipper may well clip them on output!
	      IXA=MAC(1,NODE)
	      IYA=MAC(2,NODE)
	      IXB=MAC(1,K)
	      IYB=MAC(2,K)
C......Use the window clipper to determine the result
	      CALL CLIP(IXA,IYA,IXB,IYB,ISIG)
	      IF (ISIG.NE.0) GOTO 30
20	   CONTINUE
C......Node is most definitely outside the window, together with all
C......its appurtenances.
	   GOTO 40
C......Node considered to be inside
30	   CALL RPLWND(0,NODE)
40	   CALL BAR(LASTN,I,2)
50	CONTINUE
60	RETURN
	END
