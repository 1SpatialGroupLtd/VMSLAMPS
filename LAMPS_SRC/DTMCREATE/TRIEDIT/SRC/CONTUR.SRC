C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-01-26 12:25:20.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE CONTUR
C
***	MODULE	CONTUR
***	IDENT	07DE87
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	Converted for TRIEDIT, LCONT removed from
C	PLTRYC arg. list			TJH	07-Dec-1987
CMOD	Added overflow parameter to PLTRYC call  AS     25-Jun-1985
CMOD	Added a bar during contouring            AS     25-Jun-1985
CMOD    NTEM dimensioned to NTMSIZ via DIMS.PAR TJH     05-Jul-1984
CMOD	LCONT passed as an argument to PLTRYC	 DM	07-Jun-1984
CMOD	Tidied					 DM	06-Jun-1984
CMOD	NAYB now in MAC				 DM	29-May-1984
C	Standardised				TJH 	25-May-1984
C
C Contour the triangle set inside the present window.
C
C
	IMPLICIT NONE
C
C Parameters:
	INTEGER		MHLEN
	PARAMETER	(MHLEN = 350)	! map header
	INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'
	INCLUDE 'LSL$CMNTRIEDIT:DIMS.PAR'
C
C W/s
	INTEGER		I,J		! temp vars
	INTEGER		NOD		! a point within the window
	INTEGER	       INA,INB,NODA,NODB! neighbouring points
	INTEGER*2	IELEN		! length of IFF entry
	LOGICAL		OFLOW		! IFF overflow
	INTEGER		LIST(3)		! a triangle
	INTEGER		NTEM(NTMSIZ)	! neighbours of a point
	INTEGER		NUM		! the number of neighbours found
	INTEGER*2	MAPHED(MHLEN)	! map header
	LOGICAL		OK		! function return
	REAL		CCARR(2,10)	!  IFF calib coeffs
C
C presets:
	DATA		CCARR/0.0,1.0,8*0.0,
     &			      2*0.0,1.0,7*0.0/
C
C Common:
	INCLUDE 'LSL$CMNTRIEDIT:ANNOT.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:COMMAND.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:CONTR.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:DATQ.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:IFCTRL.CMN'
	INCLUDE 'LSL$DTMCREATESYS:DTMJPI.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:RCONVI.CMN'
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'
	INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE 'LSL$CMNIFF:MD2DES.CMN'
	INCLUDE 'LSL$DTMCREATESYS:IOLUNS.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:ICI.CMN'
C
C Function:
	LOGICAL	HADCTRLC		! had CTRL/C?
C
C ....................................................................
C
	IF (CONIFF) THEN
	   FIRSTCALL=.TRUE.		! initialise counters etc
	   CALL BAR(NPINW,0,5)		! start a bar 	
C
C Calculate the current window limits for the IFF range
	   CALL IFF_VALUE(RANGE(1),JSC,1)
	   CALL IFF_VALUE(RANGE(2),JFC,1)
	   CALL IFF_VALUE(RANGE(3),JSR,2)
	   CALL IFF_VALUE(RANGE(4),JFR,2)
C
C Set up the CP entry
	   CPARR(1,1)=RANGE(1)
	   CPARR(2,1)=RANGE(4)
	   CPARR(1,2)=RANGE(1)
	   CPARR(2,2)=RANGE(3)
	   CPARR(1,3)=RANGE(2)
	   CPARR(2,3)=RANGE(3)
	   CPARR(1,4)=RANGE(2)
	   CPARR(2,4)=RANGE(4)
	   DO 20 I=1,4
	      DO 10 J=1,2
	         CPARR(J+2,I) = CPARR(J,I)
10	      CONTINUE
20	   CONTINUE
C
C put the standard stuff in
	   CALL IFFRA(RANGE)
	   CALL IFFHI
	   CALL IFFMH(MAPHED, MHLEN)
C
C
C Set the MD flag to say that we have a type 2 Map Descriptor and
C put the origin offset into the OO field of the MD
	   MATV2=2
	   MD2LOC(1)=VMIN(1)
	   MD2LOC(2)=VMIN(2)
	   CALL IFFMD(MD2ARR, MD2LEN)
C
C Make a suitable NS entry
	   I=INDEX(IMAGNAME,']')
	   CALL EXPAND
     &       ('Contours output by %S, using %S',
     &            USERNAME(1:USERLEN),IMAGNAME(I+1:IMAGELEN))
	   CALL IFFNS(EXPBUF)
	   CALL IFFCC(CCARR)
	   CALL IFFCP(CPARR)
	   LPOSNO=LPOSE
	   CALL IFFNO(LAYER,0,0)
	   INFT=.FALSE.
	ENDIF
C Go through the list of points in the window
	CALL HADCTRLC			! clear any outstanding CTRL/C
	DO 70 I=1,NPINW
	   IF (CONIFF) CALL BAR(NPINW,I,5)	! show progress
	   NOD=INWNPT(I)
C
C Is this an imaginary or a deleted point?
	   IF (NOD.LE.LIMPOL.OR.IABS(MAC(5,NOD)).EQ.1) GOTO 60
C
C No it isn't, get neighbours
	   CALL GETNAY(NOD,NTEM,NTMSIZ,NUM)
C
C Go through list of neighbours looking for contourable triangles
	   NODA=NTEM(1)
	   CALL LACWIN(MAC(1,NODA),MAC(2,NODA),INA)
	   DO 50 J=2,NUM
	      NODB=NTEM(J)
C
C Check whether this neighbouring point is in the window
	      CALL LACWIN(MAC(1,NODB),MAC(2,NODB),INB)
C
C Check for both neighbours being imaginary
	      IF (NODA.LE.LIMPOL.AND.NODB.LE.LIMPOL) GOTO 40
C
C If either of them are not in the window, force a contouring of
C this triangle
	      IF (INA.EQ.0.OR.INB.EQ.0) GOTO 30
C
C Both in window. check we only contour once (where possible) by
C ensuring NODA and NODB are both higher in the list than NOD.
	      IF (NODA.LT.NOD.OR.NODB.LT.NOD) GOTO 40
C
C Contour this triangle
30	      LIST(1)=NOD
	      LIST(2)=NODA
	      LIST(3)=NODB
	      IF (INDEX_ZGAP.NE.0.0) THEN
	         CALL NEWOBJ(2)			! set pen colour
	         CALL PLTRYC(LIST,INDEX_ZGAP,ZGAP,.TRUE.,OFLOW)
	      ENDIF
	      IF (ZGAP.NE.0.0) THEN
	         CALL NEWOBJ(1)			! set pen colour
	         CALL PLTRYC(LIST,INDEX_ZGAP,ZGAP,.FALSE.,OFLOW)
	      ENDIF
	      IF (OFLOW) GOTO 90		! IFF generator full
C
C Update NODA, INA
40	      NODA=NODB
	      INA=INB
50	   CONTINUE
60	   IF (HADCTRLC()) GOTO 80
70	CONTINUE
80	CALL OUTBUF
	GOTO 100
C
C ......................................................................
C			E R R O R S
C
90	CALL OUTOPT(WARNING//'Too many features for IFF file')
100	RETURN
	END
