C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-01-26 12:22:28.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION CHANGE_CMD()
C
***	MODULE	CHANGE_CMD
***	IDENT	25JA89
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	No longer overides IH sign if changing type	TJH 04-Jul-1988
C 	Created						TJH 22-Dec-1987
C
C Change a point or a string. 
C
	IMPLICIT NONE
C
C W/s
	INTEGER		CMD     	! decoded command number
	BYTE		CH		! a character in TXTBUF
	REAL		H		! new height
	INTEGER		IH		! new height (internal space)
	BYTE		IFCODE		! new feature code
	INTEGER		I		! temp var
	INTEGER		ICHANG		! change type
	CHARACTER*4	WORD		! general text
	CHARACTER*6	AMOUNT(2)	! "NODE" or "STRING"
	INTEGER		IX,IY		! point location (screen units)
	INTEGER		KEY		! puck key pressed
	INTEGER		KLOSE		! ID of found point
	INTEGER		IALL		! 1=node, 2=string
C
C Parameters:
	INCLUDE 	'LSL$DTMCREATESYS:MESPAR.PAR'
	INCLUDE 	'LSL$CMNLSL:LSLLIBMSG.PAR'
C
C Common:
	INCLUDE 	'LSL$CMNTRIEDIT:COMMAND.CMN'
	INCLUDE 	'LSL$CMNTRIEDIT:TTTYPE.CMN'
	INCLUDE 	'LSL$CMNLSL:EXCEPTION.CMN'
	INCLUDE		'LSL$CMNTRIEDIT:DATQ.CMN'
	INCLUDE 	'LSL$CMNLSL:TXTC.CMN'
	INCLUDE 	'LSL$CMNLSL:EXPC.CMN'
	INCLUDE 	'LSL$CMNLSL:CMDCOM.CMN'
C
C Functions:
	LOGICAL		GINTOL	! checks pt. is in tolerance of cursor
	LOGICAL  	RDCHS	! read character from TXTBUF
	LOGICAL  	RDREAL	! read REAL*4 from TXTBUF
	LOGICAL  	RDCOMM	! read command from TXTBUF
	INTEGER		SIGCHS
C
C Command table:
	INTEGER		CHANGEATT_CMD_TABLE
	EXTERNAL	CHANGEATT_CMD_TABLE
	INTEGER		CHANGEN_CMD_TABLE
	EXTERNAL	CHANGEN_CMD_TABLE
	INTEGER		FLAG_CMD_TABLE
	EXTERNAL	FLAG_CMD_TABLE
	INTEGER		TYPE_CMD_TABLE
	EXTERNAL	TYPE_CMD_TABLE
C
C ......................................................................
C
	CHANGE_CMD=.TRUE.
C
	AMOUNT(1)='NODE'
	AMOUNT(2)='STRING'
C
	CMD=RDCOMM(CHANGEN_CMD_TABLE)	! get command
C
C Error?
	IF (ERRNUM.NE.LSL__NORMAL) THEN
	   IF (ERRNUM.EQ.LSL__UNEXPCMD) THEN
	      CALL EXPAND('%S unexpected %S',WARNING,CMDNST)
	      CALL OUTOPT(EXPDSC)
	   ELSEIF (ERRNUM.EQ.LSL__AMBIG) THEN
	      CALL EXPAND('%S ambiguous command %S',WARNING,CMDNST)
	      CALL OUTOPT(EXPDSC)
	   ELSEIF (ERRNUM.EQ.LSL__UNEXPEOL) THEN
	      GOTO 10
	   ENDIF
	   GOTO 20
	ENDIF
C
	CMD=CMD+1
	GOTO (
     &		10,	! error/nothing
     &		30,	! node
     &		40	! string
     &			), CMD	
C
C
C ......................................................................
C Error
10	CALL OUTOPT(ERROR//'Specifying command CHANGE')
20	CALL OUTOPT(' ')
	CALL OUTOPT('Available CHANGE command qualifiers are:')
	CALL OUTOPT(' ')
	CALL OUTOPT('NODE    STRING')
	CALL OUTOPT(' ')
	CHANGE_CMD=.FALSE.
	GOTO 180
C
C CHANGE NODE
30	IALL=1
	WORD='NO'
	GOTO 50
C
C CHANGE STRING
40	IALL=2
	WORD='YES'
C
C Get next argument
50	CMD=RDCOMM(CHANGEATT_CMD_TABLE)
	CMD=CMD+1
	GOTO (
     &		60,	! error/nothing
     &		70,	! type
     &		110,	! height
     &		120	! feature flag
     &			), CMD	
C
C
C Error reading CHANGE cmd
60	CALL EXPAND(WARNING//'Unexpected end of CHANGE %S command',
     &				AMOUNT(IALL)(1:SIGCHS(AMOUNT(IALL))))
	CALL OUTOPT(EXPDSC)
	CALL EXPAND(
     &	 'CHANGE %S command arguments are TYPE, HEIGHT or FEATURE_FLAG',
     &		AMOUNT(IALL)(1:SIGCHS(AMOUNT(IALL))))
	CALL OUTOPT(EXPDSC)
	CHANGE_CMD=.FALSE.
	GOTO 180
C
C ......................................................................
C CHANGE TYPE - breakline or normal
70	IF (RDCHS(CH)) THEN
	   CALL EXPAND(
     &		WARNING//'Unexpected end of CHANGE %S TYPE command',
     &		AMOUNT(IALL)(1:SIGCHS(AMOUNT(IALL))))
	   CALL OUTOPT(EXPDSC)
	   CALL OUTOPT('Specify either NORMAL or BREAKLINE')
	   CHANGE_CMD=.FALSE.
	ELSE
	   CALL BSCH
	   CMD=RDCOMM(TYPE_CMD_TABLE)
	   GOTO (
     &		 80,			! error
     &		 90,			! breakline
     &		 100			! normal
     &			), CMD+1
C
C Error reading CHANGE TYPE cmd
80	   CALL EXPAND(
     &		WARNING//'Unexpected end of CHANGE %S TYPE command',
     &		AMOUNT(IALL)(1:SIGCHS(AMOUNT(IALL))))
	   CALL OUTOPT(EXPDSC)
	   CALL EXPAND(
     &	   'CHANGE %S TYPE command arguments are NORMAL or BREAKLINE',
     &		AMOUNT(IALL)(1:SIGCHS(AMOUNT(IALL))))
	   CALL OUTOPT(EXPDSC)
	   CHANGE_CMD=.FALSE.
	   GOTO 180
C
90	   IH=-1
	   ICHANG=3
	   GOTO 170
C
100	   IH=1
	   ICHANG=3
	ENDIF
	GOTO 170
C
C ......................................................................
C CHANGE HEIGHT - 'real' or MULTIVALUED
110	IF (RDCHS(CH)) THEN
	   CALL EXPAND(
     &		  WARNING//'Missing CHANGE %S HEIGHT argument'
     &				,AMOUNT(IALL)(1:SIGCHS(AMOUNT(IALL))))
	   CALL OUTOPT(EXPDSC)
	   CHANGE_CMD=.FALSE.
	ELSE
	   CALL BSCH
C
C Try reading a real height value. 
	   IF (RDREAL(H)) THEN
	      CALL EXPAND(
     &		  ERROR//'reading CHANGE %S HEIGHT argument'
     &				,AMOUNT(IALL)(1:SIGCHS(AMOUNT(IALL))))
	      CALL OUTOPT(EXPDSC)
	      CHANGE_CMD=.FALSE.
	   ELSE
	      ICHANG=2
	      CALL CONVER(H,IH,3)
	      GOTO 170
	   ENDIF
	ENDIF
	GOTO 180
C
C ......................................................................
C CHANGE FEATURE_FLAG
120	IF (RDCHS(CH)) THEN
	   CALL EXPAND(WARNING//
     &		'Unexpected end of CHANGE %S FEATURE_FLAG command',
     &				AMOUNT(IALL)(1:SIGCHS(AMOUNT(IALL))))
	   CALL OUTOPT(EXPDSC)
	   CALL OUTOPT('Specify either UNFLAGGED, RIVER or RIDGELINE')
	   CHANGE_CMD=.FALSE.
	ELSE
	   CALL BSCH
	   CMD=RDCOMM(FLAG_CMD_TABLE)
	   GOTO (
     &		130,	! err
     &		140,	! unflagged
     &		150,	! river
     &		160	! ridgeline
     &			), CMD+1
C
C Error reading CHANGE FEATURE_FLAG cmd
130	   CALL EXPAND(WARNING//
     &		'Unexpected end of CHANGE %S FEATURE_FLAG command',
     &		AMOUNT(IALL)(1:SIGCHS(AMOUNT(IALL))))
	   CALL OUTOPT(EXPDSC)
	   CALL EXPAND(
     &	   	'CHANGE %S FEATURE_FLAG command arguments are '//
     &		'UNFLAGGED or RIVER or RIDGELINE',
     &			AMOUNT(IALL)(1:SIGCHS(AMOUNT(IALL))))
	   CALL OUTOPT(EXPDSC)
	   CHANGE_CMD=.FALSE.
	   GOTO 180

C CHANGE FEATURE_FLAG UNFLAGGED
140	   IFCODE=0
	   ICHANG=1
	   GOTO 170
C
C ......................................................................
C CHANGE FEATURE_FLAG RIVER
150	   IFCODE=1
	   ICHANG=1
	   GOTO 170
C
C ......................................................................
C CHANGE FEATURE_FLAG RIDGELINE
160	   IFCODE=2
	   ICHANG=1
	   GOTO 170
	ENDIF
	GOTO 180
C
C Get the point to be changed & check that a point is within tolerance
170	CALL XHAIR(IX,IY,KEY)
	IF (GINTOL(IX,IY,KLOSE)) THEN
	   IF (KLOSE.LE.LIMPOL) THEN
	      CALL OUTOPT(WARNING//
     &		'You cannot CHANGE an imaginary point')
	      CHANGE_CMD=.FALSE.
	   ELSE
C
C Give IH the sign it should have for this string, then modify the point
C or string required, using point object
	      IF (ICHANG.NE.3) THEN
	         IH=IH*ISIGN(1,MAC(3,KLOSE))
	      ENDIF
	      CALL MODIFP(KLOSE,WORD,IH,6,6,ICHANG,IFCODE)
	   ENDIF
	ENDIF
	ICHANG=0
180	RETURN
	END
