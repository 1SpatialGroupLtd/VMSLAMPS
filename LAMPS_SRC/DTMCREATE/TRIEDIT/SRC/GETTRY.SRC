C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-01-26 13:36:36.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE GETTRY(IX,IY,LIST,LMAX,KOINC)
C
***	MODULE	GETTRY
***	IDENT	07DE87
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	Converted for TRIEDIT			TJH	07-Dec-1987
CMOD	Number of ripples increased to 100000   TJH	26-Sep-1985
CMOD	Edge tolerance lowered in PTINP call	 DM	15-Apr-1985
CMOD	Tidied					 DM	20-Jul-1984
CMOD    NTEM dimensioned to NTMSIZ via DIMS.PAR  DM     05-Jul-1984
CMOD	Old routine NEARLY now a function	 DM	08-Jun-1984
CMOD	Reflect new size of MAC in PTINP call	 DM	07-Jun-1984
CMOD	NAYB now in MAC				 DM	29-May-1984
C	Standardised				TJH 	25-May-1984
C
C Find where the point IX,IY lies in terms of the map triangle
C coverage. On exit LIST holds the vertices of the triangle
C surrounding the point, and KOINC indicates the status of the
C search.
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE 'LSL$CMNTRIEDIT:DIMS.PAR'
	INCLUDE 'LSL$CMNTRIEDIT:TRIEDITMSG.PAR'
C
C Arguments:
	INTEGER	IX,IY		! the point in question
	INTEGER	LMAX		! space available for triang vertices
	INTEGER	LIST(LMAX)	! vertices of the containing triangle
	INTEGER	KOINC		! KOINC holds search result:
C				! -1 = on a vertex,
C				!  0 = inside a triangle, and,
C				! +1 indicates that the point IX,IY
C				! lies on a triangle edge. 
C				! When KOINC=-1 the only node listed is 
C				! the vertex on which it falls, the rest
C				! are unset. When KOINC=+1 the first two
C				! nodes in list are the vertices at the 
C				! end of the edge on which IX,IY lies,
C				! and the other two are the vertices of 
C				! the two triangles lying on the base
C				! edge of the first two.
C
C Common:
	INCLUDE 'LSL$CMNTRIEDIT:DATQ.CMN'
	INCLUDE 'LSL$DTMCREATESYS:IOLUNS.CMN'
	INCLUDE 'LSL$DTMCREATESYS:MESSAGE.CMN'
C
C W/s
	REAL	D,DIST		! distances
	INTEGER	I,J,K,L,M	! temp vars
	INTEGER	ICOND		! result of P.I.P test:
C				! 	ICOND=0=outside,
C				! 	ICOND=1=inside, 
C				! 	ICOND=2=vertex, or,
C				! 	ICOND=3=side.
	INTEGER	IOFF		! ripple marker
	INTEGER	IVERT		! used to order triangle nodes
	INTEGER	JTEM(4)		! temp triangle store (1st vertex twice)
	INTEGER	KLOSE		! seed node at the centre of the ripple 
	INTEGER	LAST		! ripple limit reached during ripple
	INTEGER	NUM		! number of neighbours
	INTEGER	NOD,NODE	! nodes
	INTEGER NODA,NODB	! other nodes in triangle
	INTEGER	LIMIT,MIMIT	! limits controlling ripples
	INTEGER	NTEM(NTMSIZ)	! neighbour list
C
C Function:
	LOGICAL	  NEARLY
C
C ......................................................................
C
C Set neighbour ripple marker to zero
	ISQPOS=0
C
C****************** BOX SEARCH FOR NEAREST POINT **********************
C
C Find node closest to IX,IY by finding its box, and then doing
C an expanding box ripple search for the nearest point.
	CALL RIPPLE(IX,IY,KLOSE)
	NOD=KLOSE
C
C Check for NOD having the same location as IX,IY
	IF (NEARLY(IX,IY,MAC(1,NOD),MAC(2,NOD),LIMDIS)) GOTO 120
C
C*************** NEIGHBOUR SEARCH FOR CORRECT TRIANGLE *****************
C
C Not coincident. Need to find the triangle containing IX,IY
C starting with NOD and its neighbours. If this proves
C to be no use expand the search one ring, and try again with the
C new list of neighbours.
C
C Set spawning node list counter to 1 - the seed node at the
C center of the ripple (KLOSE).
10	ISQPOS=1
	ISEQNC(1)=KLOSE
	IRIPLE(1)=1
	LIMIT=1
	MIMIT=1
	MAC(5,KLOSE)=-MAC(5,KLOSE)
C
C Do up to a maximum of 100000 ripples! Should be enough for anyone.
	DO 80 I=1,100000
C
C Look through the list left from the last ripple
	   DO 40 J=MIMIT,LIMIT
	      NODE=ISEQNC(J)
C
C Mark this node as a completed spawning node, to ensure it is not
C picked up again
	      MAC(5,NODE)=-IABS(MAC(5,NODE))
C
C Copy node number into NOD (for general use as winner)
	      NOD=NODE
C
C Is this node close enough to be IX,IY?
	      IF (NEARLY(IX,IY,MAC(1,NOD),MAC(2,NOD),LIMDIS)) GOTO 120
	      CALL GETNAY(NODE,NTEM,NTMSIZ,NUM)
C
C Check first in list for being coincident
	      NOD=NTEM(1)
	      IF (NEARLY(IX,IY,MAC(1,NOD),MAC(2,NOD),LIMDIS)) GOTO 120
C
C Go through the list of neighbours, forming triangles
	      DO 20 K=2,NUM
	         L=NTEM(K-1)
	         M=NTEM(K)
C
C Has either node been tried before as a spawning node?
	         IF (MAC(5,L).LT.0.OR.MAC(5,M).LT.0) GOTO 20
C
C No, they have not. check them for being coincident vertices with
C IX,IY
	         NOD=M
	         IF (NEARLY(IX,IY,MAC(1,NOD),MAC(2,NOD),LIMDIS))
     &		    GOTO 120
C
C Test this triangle for containing the IX,IY location. Fill
C temporary array with the three nodes, plus the first one again
	         JTEM(1)=NODE
	         JTEM(2)=L
	         JTEM(3)=M
	         JTEM(4)=NODE
	         CALL PTINP(MAC,5,NMAX,JTEM,4,IX,IY,1.0E-6,ICOND,IVERT)
C
C Check condition marker on exit from PTINP (ICOND=0=outside,
C ICOND=1=inside, ICOND=2=vertex, ICOND=3=side).
	         IF (ICOND.GT.0) GOTO 90
C
C Get next triangle for this neighbour
20	      CONTINUE
C
C All triangles for this node completed. Assemble any of the nodes
C neighbours that have not spawned already into the growing new
C list for the next ripple
	      DO 30 K=1,NUM
	         L=NTEM(K)
	         IF (MAC(5,L).GE.0) THEN
C
C Node is to be a spawning node. Record which one it is in the
C sequential list held in ISEQNC
	            IF (ISQPOS.LT.ISQMAX) THEN
	               ISQPOS=ISQPOS+1
	            ELSE
	               CALL LSL_GETMSG(TRIEDIT__NOSPAWN,MESSAGE,MESLEN)
	               CALL ALARMS(1,0,MESSAGE(1:MESLEN))
	            ENDIF
	            ISEQNC(ISQPOS)=L
	         ENDIF
30	      CONTINUE
C
C All new points for this node assembled. Get next node in ripple
40	   CONTINUE
C
C No luck with the first batch of neighbours. Check that we have some
C nodes to check - if not then something quite awful has happened, as
C the point IX,IY cannot be found in any of the triangles! 
	   IF (ISQPOS.LE.LIMIT) THEN
	      CALL LSL_GETMSG(TRIEDIT__PTLOST,MESSAGE,MESLEN)
	      CALL ALARMS(1,0,MESSAGE(1:MESLEN))
	   ENDIF
C
C Set ripple limit reached during this ripple
	   LAST=MIN0(I+1,3)
	   IRIPLE(LAST)=ISQPOS
C
C Make any adjustments in the storage if more than three ripples
C have taken place. Deal with first two ripples.
	   IF (I.LE.2) THEN
	      MIMIT=IRIPLE(I)+1
	      LIMIT=IRIPLE(I+1)
	      ISQPOS=LIMIT
	   ELSE
C
C At least three ripples, so can remove first from spawning list
C and move them all down to maintain only two layers of ripples.
C switch off spawn markers for the first ripple held in IRIPLE.
50	      L=IRIPLE(1)
	      DO 60 K=1,L
	         M=ISEQNC(K)
	         MAC(5,M)=IABS(MAC(5,M))
60	      CONTINUE
C
C Move spawn nodes for ripple 3 into ripple 2, and ripple 2 into
C ripple 1.
	      J=ISQPOS-IRIPLE(1)
	      DO 70 K=1,J
	         L=L+1
	         ISEQNC(K)=ISEQNC(L)
70	      CONTINUE
C
C Move the ripple markers as well
	      IOFF=IRIPLE(1)
	      IRIPLE(1)=IRIPLE(2)-IOFF
	      IRIPLE(2)=IRIPLE(3)-IOFF
	      IRIPLE(3)=ISQPOS-IOFF
	      ISQPOS=IRIPLE(3)+1
C
C Reset the loop markers to go through the next ripple
	      MIMIT=1
	      LIMIT=IRIPLE(1)
	   ENDIF
C
C Go and collect the next ripple for testing
80	CONTINUE
C
C****************** TRIANGLE EDGE/INTERIOR CHECK *********************
C
C Triangle contains IX,IY. ICOND indicates whether it is internal
C to the triangle (ICOND=1), or on an edge (ICOND=3). The case of
C ICOND=2 (vertex) should not be possible as it has already been
C exhaustively checked for. (Up with which I will not put!)
C
C Point lies in triangle, but may be very close to one of the
C sides while not actually being upon it. Must therefore calculate
C an intersection between perpendiculars to each side and check for
C the smallest. If that smallest is less than LIMD then this is
C really an intersection with that side.
C
C Go through each side of the triangle in turn
90	DIST=10.E20
	DO 100 I=1,3
C
C Pick up the details for this side
	   NODA=JTEM(I)
	   NODB=JTEM(I+1)
C
C Calculate perpendicular distance from IX,IY to triangle edge
	   CALL PERPEN(
     1	      MAC(1,NODA),MAC(2,NODA),MAC(1,NODB),MAC(2,NODB),IX,IY,D)
C
C Keep this edge and distance if it is the closest so far
	   IF (DIST.LT.D) GOTO 100
	   DIST=D
	   IVERT=I
100	CONTINUE
C
C Check whether IX,IY is truly inside the triangle, or can be
C defined as being on the edge. Set KOINC as a marker.
	KOINC=0
	IF (INT(DIST).LE.LIMDIS) KOINC=1
C
C Save the triangle nodes in list in the order that will ensure
C that the first two nodes indicate the shortest perpendicular
	DO 110 I=1,3
	   LIST(I)=JTEM(IVERT)
	   IVERT=MOD(IVERT,3)+1
110	CONTINUE
	GOTO 130
C
C IX,IY coincident with NOD within LIMD scaled units
120	KOINC=-1
	LIST(1)=NOD
C
C************************ CLEAN UP THE MESS **************************
C
C Ensure that all the record markers are uncontaminated before
C leaving routine!
130	IF (ISQPOS.EQ.0) GOTO 150
	DO 140 I=1,ISQPOS
	   J=ISEQNC(I)
	   MAC(5,J)=IABS(MAC(5,J))
140	CONTINUE
150	RETURN
	END
