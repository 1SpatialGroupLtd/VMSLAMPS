C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-01-26 13:34:44.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE GARBAG
C
***	MODULE	GARBAG
***	IDENT	07DE87
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	Converted for TRIEDIT			TJH	07-Dec-1987
CMOD	The word according to St Michael	MJM	04-Mar-1987
CMOD	Feature codes added			TJH	26-Mar-1986
CMOD	NPANIC decremented for duff nodes 	TJH	11-Oct-1985
CMOD    NTEM dimensioned to NTMSIZ via DIMS.PAR TJH     05-Jul-1984
CMOD	INDB and NAYB now in MAC		 DM	29-May-1984
C	Standardised				TJH 	25-May-1984
C
C Garbage collect as much as possible by removing all duff points
C from the data set, and from the memory/disk file. This may make
C a vital difference for complex much overwritten data sets.
C
C Parameters:
	INCLUDE 'LSL$CMNTRIEDIT:DIMS.PAR'
	INCLUDE 'LSL$CMNTRIEDIT:TRIEDITMSG.PAR'
C
C Common:
	INCLUDE 'LSL$CMNTRIEDIT:DATQ.CMN'
	INCLUDE	'LSL$CMNTRIEDIT:RCONVI.CMN'
	INCLUDE	'LSL$CMNTRIEDIT:TPOLGY.CMN'
	INCLUDE 'LSL$DTMCREATESYS:MESSAGE.CMN'
C
	INTEGER NTEM(NTMSIZ)
C
C******************** DEVELOP DUFF NODE LIST *******************
C
	NPDECR=0
	NPINW=0
C
C Get a list of new point numbers for old points (in INWNPT).
C Modify the logical string markers as we go to break strings
C where nodes have been duffed, and to ensure an alternation
C of string signs.
	NEWNP=0
	JSIGN=ISIGN(1,MAC(4,1))
	LSIGN=JSIGN
	DO 10 I=1,NP
C
C Mark duff point
	   IF(MAC(5,I).EQ.1) THEN
	      J=-1
	      LSIGN=0
	   ELSE
	      NEWNP=NEWNP+1
	      J=NEWNP
	      K=ISIGN(1,MAC(4,I))
	      IF(LSIGN.NE.K)JSIGN=-JSIGN
	      LSIGN=K
	      MAC(4,I)=IABS(MAC(4,I))*JSIGN
	   ENDIF
C
C record new node number for old node position
	   INWNPT(I)=J
10	CONTINUE
C check for any duff points, and return if none found
	IF(NEWNP.EQ.NP)GOTO 90
C
C**************** MODIFY FIRST POINT IN BOX LIST ******************
C
C take care of the first point in box index stored in array in.
	NBOX=NBI*NBJ
	CALL BAR(NBOX,0,7)
	DO 50 I=1,NBOX
C pick up first point in box number, and check for duffness
	   J=IN(I)
	   IF(J.GT.0) THEN
20	      IF(INWNPT(J).EQ.-1) THEN
C
C This is a duff node. so we need to loop through the index to
C points in boxes chain MAC(4,*) and find the first non-duff node
C in the box to substitute for this present duff one.
	         J=IABS(MAC(4,J))
C Check that this one is not marking last point in box (set to
C NPMAX).
	         IF(J.NE.NPMAX)GOTO 20
C
C End of chain - no first point in box found - it must be empty
C so set it to zero to indicate this fact.
	         J=0
	         K=0
	      ENDIF
C
C Convert the first point in box node (j) to next node in chain
	      IF(J.NE.0)K=INWNPT(J)
	      IN(I)=K
	   ENDIF
C
C********** MODIFY REMAINING POINTS IN THE BOX CHAIN *************
C
C Move the next point in box pointer similarly, modifying its node
C pointer on the way, and checking for it being a duff node.
	   IF(J.NE.0) THEN
C
C Remember node pointing to next in chain (JJ), the next in chain (J),
C the new number for the next in chain (K), and its sign (L)
30	      JJ=J
	      J=IABS(MAC(4,J))
	      K=INWNPT(J)
	      L=ISIGN(1,MAC(4,JJ))
C
C Check for next in chain being last point in box (npmax)
40	      IF(J.NE.NPMAX) THEN
C
C Check for duffness of next in chain
	         IF(K.EQ.-1) THEN
C
C Duff. Get next node in the chain, new node number
	            J=IABS(MAC(4,J))
	            K=INWNPT(J)
	            GOTO 40
	         ENDIF
C
C Store the next point in in chain as the new node number, and
C then check for new next in chain in this box
	         MAC(4,JJ)=K*L
	         GOTO 30
	      ELSE
C
C End of chain has been reached
	         MAC(4,JJ)=NPMAX*L
	      ENDIF
	   ENDIF
	   CALL BAR(NBOX,I,7)
C
C Get next box chain
50	CONTINUE
	CALL BAR(NBOX,NBOX,7)
C
C********************* COMPRESS POINT LIST **********************
C
C Now go through the nodes and node lists changing all the entries
C as necessary, and returning nodes to the point list.
C
C Start a bar up to act as anti-kick device, as this could be a
C fairly painful process
	CALL BAR(NP,0,8)
	DO 80 NODE=1,NP
C
C Check node for being duff (dont do it if it is!)
	   IF(INWNPT(NODE).NE.-1) THEN
C
C Get neighbour list for node. this has no duff nodes in it but
C will need alteration to allow the gaps for duff nodes in the
C data list to be removed.
	      CALL GETNAY(NODE,NTEM,NTMSIZ,NUMBER)
	      DO 60 I=1,NUMBER
	         J=NTEM(I)
	         IF (INWNPT(J).EQ.-1) THEN
	            CALL LSL_GETMSG(TRIEDIT__DUFFNOD,MESSAGE,MESLEN)
	            CALL ALARMS(1,0,MESSAGE(1:MESLEN))
	         ELSE
	            NTEM(I)=INWNPT(J)
	         ENDIF
60	      CONTINUE
C
C Save the newly modified neighbour list back into the file
C structure as the links for the new node (newn)
	      NEWN=INWNPT(NODE)
	      CALL PUTNAY(NEWN,NTEM,NTMSIZ,NUMBER)
C
C Move the data for node to its new location
	      DO 70 I=1,3
	         MAC(I,NEWN)=MAC(I,NODE)
70	      CONTINUE
C
C And trot along behind updating the feature code array
	      TPOLGY(NEWN)=TPOLGY(NODE)
C
C Move the next point in box chain to its final resting place
	      MAC(4,NEWN)=MAC(4,NODE)
	   ELSE
C
C If we have thrown out one of our original nodes from Panic,
C record the fact so that we may decrement NPANIC accordingly.
	      IF (NODE.LE.NPANIC) NPDECR=NPDECR+1
	   ENDIF
C
C update the bar anti-kick device, and deal with the next point
	   CALL BAR(NP,NODE,8)
80	CONTINUE
	CALL BAR(NP,NP,8)
C
C Replace the old NP by the new NP
	NP=NEWNP
C
C********************** REINSTATE THE WINDOW *******************
C
C All updating is now complete. restore the window
	CALL WINDOW(0)
C That's all. If required decrement the number of pre-TRIEDIT 
C nodes.
90	IF (NPANIC.NE.-32767)NPANIC=NPANIC-NPDECR
	RETURN
	END
