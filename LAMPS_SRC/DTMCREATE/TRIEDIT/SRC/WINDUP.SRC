C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1999-08-12 12:13:26.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE WINDUP(IFF)
C
***	MODULE	WINDUP
***	IDENT	12AU99
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	Now handles cliffs with varying Z		TJH  01-Aug-1988
CMOD	Converted for TRIEDIT				TJH  07-Dec-1987
C
C Output the modified data and triangulation files to files
C specified by the user. Triangle files (.NOD and .DTA) are
C standard output. An IFF file of modified strings may be 
C produced as an option
C
	IMPLICIT NONE
C
C Argument:
	LOGICAL	  IFF		! output an IFF file ?
C
C Parameters:
	INCLUDE 'LSL$CMNTRIEDIT:DIMS.PAR'
	INCLUDE	'LSL$CMNTRIEDIT:TRIEDITMSG.PAR'
	INCLUDE '($SSDEF)/NOLIST'
C
C Common:
	INCLUDE 'LSL$CMNTRIEDIT:COMMAND.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:DATQ.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:FILNMS.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:IFCTRL.CMN'
	INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE 'LSL$DTMCREATESYS:IOLUNS.CMN'
	INCLUDE 'LSL$DTMCREATESYS:MESSAGE.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:RCONVI.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:TPOLGY.CMN'
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'
C
C
C Functions:
	LOGICAL	  IFINIT	! fire up an output IFF file
	LOGICAL	  WRTUNF	! efficient Fortran unformatted write
	LOGICAL	  NEWFIL	! opens files
C
C W/s:
	INTEGER   I,J,K		! loop vars
	INTEGER*2 IELEN		! IFF entry length
	INTEGER	  IPNTS		! number of points in string
	LOGICAL	  OK		! function return
	INTEGER	  ISHELL	! shell marker
	INTEGER	  NBOX		! number of boxes
	INTEGER	  NTEM(NTMSIZ)	! neighbour list
	INTEGER	  NUM		! number of neighbours
	INTEGER	  NLONG		! number of longwords of TPOLGY()
	INTEGER	  LONGWD(37500)	! for efficient writes
	INTEGER	  KFIRST	! index of first non-imaginary pt.
	EQUIVALENCE    (TPOLGY(1),LONGWD(1))
C
C ......................................................................
C
C Clear the screen
	CALL SCNCLR
C Set the line object to frame/border (for any anti-kick bars).
	CALL NEWOBJ(3)
C
C************************* OUTPUT IFF FILE ***************************
C
C Go through the data set dumping all the relevant rubbish on the
C way. This involves splitting the data set back into strings, and
C writing out the strings in IFF format. 
C
	IF (IFF) THEN  		! IFF output file required
	   IF (NEWIFF) THEN	! filename specified after IFF cmd ?
	      DO 10 I=IFTLEN,1,-1
	         IF (IFITLE(I:I).EQ.']'
     &                            .OR.IFITLE(I:I).EQ.'>') GOTO 20
	         IF (IFITLE(I:I).EQ.'.') GOTO 30
10	      CONTINUE
20	      I=IFTLEN+1
30	      IFITLE=IFITLE(1:I-1)//'.IFF'
	      IFTLEN=I+3
	      CALL IFFORV(1)		! output CBs
	      OK=IFINIT(IFITLE,LGC1)
	      IF (.NOT.OK) GOTO 190
C
	   ELSE				! use the default original name 
C
	      DO 40 I=ITLEN,1,-1
	         IF (ITLE(I:I).EQ.']'
     &                            .OR.ITLE(I:I).EQ.'>') GOTO 50
	         IF (ITLE(I:I).EQ.'.') GOTO 60
40	      CONTINUE
50	      I=ITLEN+1
60	      ITLE=ITLE(1:I-1)//'.IFF'
	      ITLEN=I+3
	      CALL IFFORV(1)		! output CBs
	      OK=IFINIT(ITLE,LGC1)
	      IF (.NOT.OK) GOTO 190
	   ENDIF  		       ! end of IFF file-name variations
C
C Set beginning of first string to first non-imaginary point in the
C data
	   KFIRST=LIMPOL+1
C
C  Do IFF windup procedure once for each layer to be output:
	   CALL BAR(NP-KFIRST,0,9)
	   CURRENT_LAYER=LAYER
	   CALL IFF_WINDUP(1,KFIRST)		! ordinary strings
	   CALL BAR(NP-KFIRST,0,10)
	   CALL IFF_WINDUP(2,KFIRST)		! breakline strings
	   CALL BAR(NP-KFIRST,0,11)
	   CALL IFF_WINDUP(3,KFIRST)		! cliffline strings
C
C Do IFF house keeping,modifying RANGE, CP's and EO,EM,EJ stuff
	   CALL IFFUNO(LPOSNO)   
	   CALL IFFEO
	   CALL IFFEM
	   CALL IFFEJ
	   CALL IFFRWD
C
C Range entry
	   CALL IFFNXC(%REF('RA'),IELEN)
	   IF (IELEN.EQ.-1) GOTO 90	! unexpected eof
	   CALL EIHWR(RANGE,4,1)
C
C CP entry
	   CALL IFFNXC(%REF('CP'),IELEN)
	   IF (IELEN.EQ.-1) GOTO 90	! unexpected eof
	   CPARR(1,1)=RANGE(1)
	   CPARR(2,1)=RANGE(4)
	   CPARR(1,2)=RANGE(1)
	   CPARR(2,2)=RANGE(3)
	   CPARR(1,3)=RANGE(2)
	   CPARR(2,3)=RANGE(3)
	   CPARR(1,4)=RANGE(2)
	   CPARR(2,4)=RANGE(4)
C
	   DO 80 I=1,4
	      DO 70 K= 1,2
	         CPARR(K+2,I) = CPARR(K,I)
70	      CONTINUE
80	   CONTINUE
C
	   CALL EIHWR(CPARR,16,1)	   	   	   
	   GOTO 100
90	   CALL LSL_GETMSG(TRIEDIT__UNEXPEOF,MESSAGE,MESLEN)
	   CALL OUTOPT(MESSAGE(1:MESLEN))
C Close the file
100	   CALL IFFCLO(LGC1)
C
	ELSE			! .NOD and .DTA files to be output
C
C*************************** DATA/NODE FILES **************************
C
C Create file name extensions for the node and data files
	   IF (NEWSAV) THEN 	! was a new filename supplied for SAVE ?
C
C YES !  Add appropriate .NOD and .DTA extensions
C 1) the data transfer file (.DTA)
	      DO 110 I=SAVLEN,1,-1
	         IF (SAVTIT(I:I).EQ.']'
     &                            .OR.SAVTIT(I:I).EQ.'>') GOTO 120
	         IF (SAVTIT(I:I).EQ.'.') GOTO 130
110	      CONTINUE
120	      I=SAVLEN+1
130	      SAVTIT=SAVTIT(1:I-1)//'.DTA'
	      SAVLEN=I+3 ! set str. length to new expanded string len.
	      IF (NEWFIL(LGC1,SAVTIT(:SAVLEN),1,0,0,1)) THEN
	         CALL ALARMS(0,-1,' ')		! close down & exit
	      ENDIF
C 2) The node transfer file
	      SAVTIT=SAVTIT(1:I)//'NOD'
	      IF (NEWFIL(LGC3,SAVTIT(:SAVLEN),1,0,0,1)) THEN
	         CALL ALARMS(0,-1,' ')		! close down & exit
	      ENDIF
	   ELSE       ! use the original, default filename
C
C 1) the data transfer file (.DTA)
	      DO 140 I=ITLEN,1,-1
	         IF (ITLE(I:I).EQ.']'
     &                            .OR.ITLE(I:I).EQ.'>') GOTO 150
	         IF (ITLE(I:I).EQ.'.') GOTO 160
140	      CONTINUE
150	      I=ITLEN+1
160	      ITLE=ITLE(1:I-1)//'.DTA'
	      ITLEN=I+3  ! set str. length to new expanded string len.
	      IF (NEWFIL(LGC1,ITLE(:ITLEN),1,0,0,1)) THEN
	         CALL ALARMS(0,-1,' ')		! close down & exit
	      ENDIF
C
C 2) The node transfer file
	      ITLE=ITLE(1:I)//'NOD'
	      IF (NEWFIL(LGC3,ITLE(:ITLEN),1,0,0,1)) THEN
	         CALL ALARMS(0,-1,' ')		! close down & exit
	      ENDIF
	   ENDIF	
C
C Deal with removing the duff points (if any) first. This involves
C closing up the data file if any duff points are found, and
C renumbering the indexes, including the neighbour lists, as may
C be necessary.
C
C Garbage collect to remove duff points
	   CALL GARBAG
C Now we can output the data file and the node neighbour file.
C
C************************** DATA FILE OUTPUT ************************
C
C Write header record containing sizes and scaling etc. Also set 
C shell marker in the header to zero, so that later programs know
C that the order is not shell order.
	   ISHELL=0
	   WRITE (LGC1) LIMPOL,NP,NPMAX,NBI,NBJ,MX2,MY2,MXI,MYI,ISHELL,
     1			(VMIN(I),VMAX(I),VSCAL(I),OFFSET(I),I=1,3)
C Write out the data set, and the next point in box marker
	   OK=WRTUNF(LGC1,MAC,5*NP)
	   IF (.NOT.OK) GO TO 180
C Write out the first point in box information
	   NBOX=NBI*NBJ
	   OK=WRTUNF(LGC1,IN,NBOX)
	   IF (.NOT.OK) GO TO 180
C
C Write out the number of pre-TRIEDIT nodes in the triangulation
	   WRITE(LGC1) NPANIC
C
C Finally the feature code byte array TPOLGY()
	   NLONG=NP/4
	   IF (MOD(NP,4).NE.0) NLONG=NLONG+1
	   OK=WRTUNF(LGC1,LONGWD,NLONG)
C
C Close the file to avoid problems with buffers in a later crash.
	   CLOSE(UNIT=LGC1)
C
C Now do the node/neighbour file. This is a change from a purely
C PANIC output file in that the neighbour list is given in point
C order, not shell order. This should not affect the running of
C PANDORA and similar programs as they only work on the data set
C a polygon/node at a time, and make no assumptions about order.
C
C Start a bar
	   CALL BAR(NP,0,4)
C Clear the output buffer
	   CALL WRTNOD(I,1,-1)
C Go through for each node
	   DO 170 I=1,NP
C Collect the node's neighbours from memory/disk file
	      CALL GETNAY(I,NTEM,NTMSIZ,NUM)
C Write the record out to the buffered output
	      CALL WRTNOD(I,1,1)
	      CALL WRTNOD(NUM,1,1)
	      CALL WRTNOD(NTEM,NUM,1)
C Record progress
	      CALL BAR(NP,I,4)
170	   CONTINUE
C Empty the node buffer and close the file
	   CALL WRTNOD(I,1,0)
	   CLOSE (UNIT=LGC3)
	ENDIF
	GOTO 190			! all done
C
C ......................................................................
C Error
180	CALL OUTOPT(' ')
	CALL LSL_GETMSG(TRIEDIT__WRTDTA,MESSAGE,MESLEN)
	CALL OUTOPT(MESSAGE(1:MESLEN))
	CALL LSL_GETMSG(OK,MESSAGE,MESLEN)	! what went wrong
	J=INDEX(MESSAGE,'!') - 1		! (ignore any FAO stuff)
	IF (J.LE.0) J=MESLEN
	CALL ALARMS(1,0,MESSAGE(:J))		! close down & exit
190	CALL IFFORV(0)				! don't output CBs
	RETURN
	END
