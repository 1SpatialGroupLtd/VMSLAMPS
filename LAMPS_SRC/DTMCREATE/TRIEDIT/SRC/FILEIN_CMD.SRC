C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-01-27 17:27:52.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION FILEIN_CMD(IZOOM)
C
***	MODULE	FILEIN_CMD
***	IDENT	27JA89
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
C Allows user to introduce data into the triangulation from an IFF file 
C sitting on the disk. This file will be mapped into the triangulation, 
C and will 
C	a) always replace any nodes it may cover,
C	b) always have connections between its individual members of
C	   a string, and,
C	c) can deal with either single points or long strings using
C	   the same system.
C
C Returns .T. if all is well
C
	IMPLICIT NONE
C
C Argument (in):
	INTEGER	IZOOM		! screen zoom level
C
C Parameters:
	INCLUDE	'LSL$DTMCREATESYS:MESPAR.PAR'
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'
C
C Common:
	INCLUDE	'LSL$CMNLSL:EXPC.CMN'
	INCLUDE	'LSL$CMNLSL:TXTC.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:COMMAND.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:TTTYPE.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:INFILES.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:FILNMS.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:DATQ.CMN'
	INCLUDE	'LSL$DTMCREATESYS:MESSAGE.CMN'
	INCLUDE 'LSL$DTMCREATESYS:IOLUNS.CMN'
	INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'
C
C W/s
	INTEGER		I	! number of points added
	BYTE		CH	! a character
	LOGICAL		OK,IERR	! for error returns
	LOGICAL		EOF	! end of file detected?
C
C Functions
	LOGICAL		GETFILNAM ! get file-spec
	LOGICAL		RDCHS	! read char. skipping spaces
	LOGICAL		TTRSTR	! read from TT:
	INTEGER		SIGCHS	! get number of significant characters
C
C ......................................................................
C
	FILEIN_CMD=.FALSE.			! assume failure
C
	CALL OUTOPT(' ')
C
C Get name of IFF file for input. If no filename supplied on command
C line, prompt for one 
	IF (RDCHS(CH)) THEN			! empty line
	   IF (TTIN) THEN
	      TXTPTR=80
	      IF (VT100) THEN
	         OK=TTRSTR(,,'IFF file? ',IERR)
	         IF (.NOT.OK) THEN
	            IF (OK.EQ.LSL__EOF) GOTO 10
	            CALL LSL_GETMSG(OK,MESSAGE,MESLEN)
	            CALL OUTOPT(MESSAGE(1:MESLEN))
	            CALL LSL_GETMSG(IERR,MESSAGE,MESLEN)
	            CALL OUTOPT(MESSAGE(1:MESLEN))
	            GOTO 10	
	         ENDIF
	         IF (TXTPTR.EQ.0) THEN
	            GOTO 10
	         ENDIF
	      ELSE
	         CALL TEXTOT('IFF file? ',0)
	         CALL TEXTIN(TXTDSC,EOF)
	         IF (EOF) GOTO 10
	      ENDIF
	      CALL BSLN
	      IF (RDCHS(CH)) GOTO 10
	   ELSE
	      CALL OUTOPT(ERROR//
     &		'The FILEIN command requires an IFF file-spec argument')
	      CALL OUTOPT(' ')
	      GOTO 10
	   ENDIF
	ENDIF
	CALL BSCH
C
C Try and read a file-spec
	OK=GETFILNAM(IFITLE,IFTLEN,'LSL$IF:IFF.IFF;0',.TRUE.,%REF('!'))
	IF (.NOT.OK) THEN
	   CALL OUTOPT(ERROR//'Unable to interpret IFF file-spec')
	   GOTO 10
	ENDIF
C
C Uppercase spec and then try opening the file
	CALL STR$UPCASE(IFITLE,IFITLE)
C
C Open and dragoon the IFF input revision level to 1 - treat all CB, ST
C and ZS entries as if they are CBs 
	CALL IFFERM( .FALSE. )		! switch off errors
	CALL IFFOPN( LGC1, IFITLE, 0 )
	CALL IFFERM( .TRUE. )	! reinstate IFFLIB error reporting
C
C was there an error in opening the file?
C
	IF ( IERCD.NE.0 ) THEN
	   CALL LSL_GETMSG(LSL__IFFOPEN,MESSAGE,MESLEN)
	   CALL EXPAND('%WS%'//MESSAGE(1:MESLEN),MESSAGE,IFITLE(:IFTLEN))
	   CALL OUTOPT(MESSAGE(1:SIGCHS(MESSAGE)))
	   CALL LSL_GETMSG(IERNM,MESSAGE,MESLEN)
	   CALL OUTOPT(MESSAGE(1:MESLEN))
	   FILEIN_CMD=.FALSE.
	   GOTO 10
	ELSE		! file opened OK - switch read lookahead on
	   CALL IFFRLA(.TRUE.)
	   CALL IFFIRV(1)
	   CALL EXPAND('IFF file %S opened for read',IFITLE(:IFTLEN))
	   CALL OUTOPT(EXPDSC)
C
C Note the spec of the file that we successfully read from for SHOW FILES
	   IF (NUM_INFILES+1.GT.MAX_INFILES) THEN
	      CALL OUTOPT(WARNING//
     &		'Too many input files for file-spec storage. You may')
	      CALL OUTOPT(
     &		'                read further input files using '//
     &		'the FILEIN command')
	      CALL OUTOPT(
     &		'                but TRIEDIT will no longer store '//
     &		'their names for the')
	      CALL OUTOPT(
     &		'                SHOW FILES command. This warning '//
     &		'has no effect on')
	      CALL OUTOPT(
     &		'                data input or the triangulation.')
	   ELSE
	      NUM_INFILES=NUM_INFILES+1
	      INFILES(NUM_INFILES)=IFITLE
	   ENDIF
	ENDIF
C
C Get the data from the file string by string, and point by point
C and insert it into the triangulation
	CALL DATAIN(IZOOM,I)
	IF (VT100) THEN
	   CALL VTCLR(0)		! clear away the tell-back area
	   CALL POINTS(2)		! Update the tell-back area
	ENDIF
	CALL EXPAND('%N node%m added, total now %N',I,NP)
	CALL OUTOPT(EXPDSC)
	FILEIN_CMD=.TRUE.
C
10	RETURN
	END
