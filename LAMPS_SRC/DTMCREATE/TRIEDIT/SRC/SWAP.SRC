C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-02-03 10:29:32.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE SWAP
C
***	MODULE	SWAP
***	IDENT	03FE89
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	Repeated warning message removed		TJH  03-Feb-1989
CMOD	LINEQN now a function to cope with clifflines   TJH  19-Mar-1986
C	Subroutine created from former INTACT code and 
C	all topological checks added.			TJH  10-Sep-1985
C
C Quite often the basic triangulation will break sequences of points
C rather than preserve the connection between them. This is usually
C not a problem, unless it occurs along a discontinuity. If the
C break does so, then the swap diagonals command allows the user to
C maintain continuity by rejoining the other diagonal in the
C quadrilateral. SWAP checks that inter node links will not be be
C crossed by swapping (except the internal link between NPTA and NPTB 
C of course). It also checks that it really is a quadrilateral
C before attempting to swap otherwise a zero width or height triangle 
C may result. 
C
C
C Parameters:
	INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'
	INCLUDE 'LSL$CMNTRIEDIT:DIMS.PAR'
	INCLUDE '($SSDEF)'
C
C Common blocks:
	INCLUDE 'LSL$CMNTRIEDIT:CONTR.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:DATQ.CMN'
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:INPARM.CMN'
	INCLUDE 'LSL$CMNTRIEDIT:NODBUF.CMN'
C
	DIMENSION IDAT(3),JDAT(3)
	DIMENSION LIST(NTMSIZ),NTEM(NTMSIZ),IXY(2),ITEMP(2,2),
     1  EQA(3),EQB(3)
C
	INTEGER		KEY	! 'key' pressed
	LOGICAL*4	LINEQN
C
C ......................................................................
C
C Get user to locate the cross hairs in the middle of the diagonal 
C to be altered.
10	CALL XHAIR(IX,IY,KEY)
C
C Convert from screen coordinates to integer scaled coordinates
	CALL CONPOS(IXA,IYA,IX,IY)
C
C Find which triangle we are inside. Check for vertex intersection
C (this should not happen).
	CALL GETTRY(IXA,IYA,LIST,4,KOINC)
	IF (KOINC.NE.-1) GOTO 20
C
C Write rude message, and try again
	CALL OUTOPT(WARNING//
     &		'Cursor must be near middle of edge - try again')
	CALL KBELL
	GOTO 10
C
C Store the points in NPTA to NPTC
20	NPTA=LIST(1)
	NPTB=LIST(2)
	NPTC=LIST(3)
C
C Get the fourth point
	CALL GTFRTH(NPTA,NPTB,NPTC,NPTD)
C
C ......................................................................
C
C Calculate path from NPTC to NPTD to ensure that no other links are
C crossed.  If so then we must, I think, give up as otherwise very bad
C structures may occur, including triangles cutting through the boundary
C of formerly sound closed breaklines.
C
C Check for the line NPTC-NPTD intersecting with any side of all 
C triangles along the path in between the two points. Start with the
C triangles around NPTC, and work towards the location of NPTD.
C
C
C Get equation of the line between NPTC and NPTD
	IF (.NOT.(LINEQN(MAC(1,NPTC),MAC(2,NPTC),
     &				MAC(1,NPTD),MAC(2,NPTD),D,EQA))) GOTO 50
	D2=D*D
C
C Get neighbours of NPTC
	CALL GETNAY(NPTC,NTEM,NTMSIZ,NUMBER)
C
C Go through all the sides unconected with NPTC to determine
C possible intersection, and hence path of the proposed link line
	DO 30 I=2,NUMBER
	   J=NTEM(I-1)
	   K=NTEM(I)
C
C Don't check intersections with line NPTA-NPTB!
	   IF (J.EQ.NPTA.AND.K.EQ.NPTB
     &		.OR.K.EQ.NPTA.AND.J.EQ.NPTB) GOTO 30
C
C Calculate line equation for the edge from nodes J to K
	   IF (.NOT.(LINEQN(MAC(1,J),MAC(2,J),MAC(1,K),MAC(2,K),D,EQB)))
     &								GOTO 50
C
C Calculate intersection between edge and proposed link line
	   CALL INTSEC(EQA,EQB,IXY,IPAR)
C
C Check for being parallel. This is quite OK if they are parallel!
	   IF (IPAR.EQ.1) GOTO 30
C Test for being the correct intersection (i.e. lying closer to
C NPTD than NPTD is to NPTC
	   CALL EUCLID(MAC(1,NPTD),MAC(2,NPTD),IXY(1),IXY(2),A,0)
	   IF (A.GT.D2) GOTO 30
C
C Store outside triangle edge points temporarily (for use 
C in INTONL)
	   ITEMP(1,1)=MAC(1,J)
	   ITEMP(1,2)=MAC(2,J)
	   ITEMP(2,1)=MAC(1,K)
	   ITEMP(2,2)=MAC(2,K)
C
C Check for intersection at ends of outside edge (ie at vertices),
C as this is OK/not very harmful.
	   CALL INTONL(IXY,ITEMP,2,1,MARK)
C
C Check for intersection away from a node
	   IF (MARK.EQ.0) GOTO 30
C Intersection exists with the outside edge, does it also exist
C from the edge with the inserted line direction? (in other words
C does the present point occur before the intersection has been
C reached?)
	   ITEMP(1,1)=MAC(1,NPTC)
	   ITEMP(1,2)=MAC(2,NPTC)
	   ITEMP(2,1)=MAC(1,NPTD)
	   ITEMP(2,2)=MAC(2,NPTD)
	   CALL INTONL(IXY,ITEMP,2,1,LARK)
C
C Check intersection type - first: none present, but there
C was one with a polygon external edge.
	   IF (LARK.NE.0) THEN
C
C Second: along the insert path but not at present point. No
C problem here, just cycle round
	      IF (LARK.EQ.1) GOTO 30
C
C Third: at previous point. This must mean we have just crossed
C a very thin triangle and the previous intersection and this one
C are almost the same.
	      IF (LARK.EQ.2) GOTO 40
	   ENDIF
30	CONTINUE
C
C If we get this far no intersection has been found with any of the 
C proferred edges.
C
C......................................................................
C   
C
C Now check that we are not dealing with a reentrant quadrilateral
C which would mean that the new triangle formed by the swap operation
C would lie OUTSIDE the area of the original quadrilateral.  This
C could lead to problems with breaklins. We can easily test for this by
C ensuring that line NPTA-NPTB is intersected by the proposed link
C line NPTC-NPTD.
C
C Calculate line equation for the line NPTA_NPTB
	IF (.NOT.(LINEQN(MAC(1,NPTA),MAC(2,NPTA),
     &			MAC(1,NPTB),MAC(2,NPTB),ABDIST,EQB))) GOTO 50
C
C Calculate intersection between line NPTA-NPTB and proposed link line
C (already calc. as equation EQA).
	CALL INTSEC(EQA,EQB,IXY,IPAR)
C
C Check for being parallel. This is dreadful if they are parallel!
	IF (IPAR.EQ.1) GOTO 40		! no point in going on
C
C
C Check that the intersection point is between NPTA and NPTB
	CALL EUCLID(MAC(1,NPTA),MAC(2,NPTA),IXY(1),IXY(2),XYDIS1,1)
	CALL EUCLID(MAC(1,NPTB),MAC(2,NPTB),IXY(1),IXY(2),XYDIS2,1)
	IF (XYDIS1.GT.ABDIST.OR.XYDIS2.GT.ABDIST) THEN
	   CALL OUTOPT(WARNING//
     &		'Unable to swap diagonal - polygon is re-entrant')
	   GOTO 60
	ENDIF
C
C ......................................................................
C
C Next check that the bounding polygon is a quadrilateral,
C not a triangle caused by three of the 4 points being in line. Swap 
C would otherwise end up producing a zero height or zero width 
C triangle.
	CALL PERPEN(MAC(1,NPTC),MAC(2,NPTC),MAC(1,NPTD),MAC(2,NPTD),
     &		    MAC(1,NPTA),MAC(2,NPTA),DIST1)
	CALL PERPEN(MAC(1,NPTC),MAC(2,NPTC),MAC(1,NPTD),MAC(2,NPTD),
     &		    MAC(1,NPTB),MAC(2,NPTB),DIST2)
C
	IF (ABS(DIST1).LT.0.5.OR.ABS(DIST2).LT.0.5) THEN
	   CALL OUTOPT(WARNING//
     &	    'Unable to swap diagonal - polygon is not quadrilateral')
	   CALL KBELL
	   GOTO 60
	ENDIF
C
C ......................................................................
C
C We have passed the tests, we can actually swap this link!
C
C Remove the link between NPTA and NPTB (in both directions)
	CALL DELCON(NPTA,NPTB)
	CALL DELCON(NPTB,NPTA)
C
C Draw empty squares along deleted line (use frame/border object)
	CALL DRWLNK(NPTA,NPTB,3,6,0)
C
C Enter a connection between NPTC and NPTD (both ways)
	CALL INJOIN(NPTD,NPTA,NPTC,NPTB)
	CALL INJOIN(NPTC,NPTA,NPTD,NPTB)
C
C Draw filled in squares along the new link
	CALL DRWLNK(NPTC,NPTD,3,5,0)
	GOTO 60				! and all is well
C
C ......................................................................
C
C But never mind, eh?
40	CALL OUTOPT(WARNING//
     &	   'Bad intersection with adjacent triangle would occur')
	GOTO 60
C
C LINEQN returned with a problem with a zero width triangle. This is 
C almost certainly a cliffline - we can't intersect with clifflines.
50	CALL OUTOPT
     &	   (WARNING//'Cliffline or zero width triangle detected.')
60	RETURN
	END
