	SUBROUTINE RECONN(NEWN,NAY,NOLD)
C
***	MODULE	RECONN
***	IDENT	31JL87
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	Converted for LSLLIB message formats	TJH	31-Jul-1987
CMOD	NTEM dimensioned to NAYMAX via DIMS.PAR	 DM	05-Jul-1984
CMOD	Messages standardised			 DM	29-May-1984
C	Standardised				TJH 	25-May-1984
C
C Disconnect node nold from its fellow neighbours list (NAY), and
C reconnect the list to node NEWN.
C
	INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'
	INCLUDE 'LSL$DTMCREATESYS:MESSAGE.CMN'
	INCLUDE 'LSL$CMNTRIANG:TRIANGMSG.PAR'
	INCLUDE 'LSL$CMNTRIANG:DIMS.PAR'
C
	DIMENSION LIST(NAYMAX)
C
C ......................................................................
C
C......Get fellow neighbours list
	CALL GETNAY(NAY,LIST,NAYMAX,NUM)
C......Find nold in the list and substitute NEWN. It may occur twice if
C......it is in the first position and this is not an imaginary node
	MARK=0
	DO 10 I=1,NUM
	   IF (LIST(I).NE.NOLD) GOTO 10
	   LIST(I)=NEWN
	   MARK=1
C......Can give up now if this change was not the first neighbour
C......in list
	   IF (I.NE.1) GOTO 20
10	CONTINUE
C......Check for at least one change having been made
C......'NOLD has not been found' case is not possible (?)
	IF (MARK.NE.1) THEN
	   CALL LSL_GETMSG(TRIANG__NOLD,MESSAGE,MESLEN)
	   CALL ALARMS(MESSAGE(:MESLEN))
	ENDIF
C......Put list for NAY back in storage in its altered form
20	CALL PUTNAY(NAY,LIST,NAYMAX,NUM)
	RETURN
	END

