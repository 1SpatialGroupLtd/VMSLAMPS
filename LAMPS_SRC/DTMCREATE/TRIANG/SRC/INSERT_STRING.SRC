C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-10-08 15:35:28.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION INSERT_STRING(NP,LAX,KAFFIR,ISTRNG,NF,
     &			NEW_FEATURE)
C
***	MODULE	INSERT_STRING
***	IDENT	27OC89
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
CMOD	An attempt to improve the resolution by		ST  30-Sep-1992
C       increasing 300000 range to value MAX_RES_REAL
C       (in common RESOLUTION in service routine)
C	for duplicates					TJH 27-Oct-1989
CMOD	KLIFFN not updated until cliff point is checked
C	for duplicates					TJH 27-Oct-1989
CMOD	Null posts now recognised via DTILIB parameters
C	appropriate to data type, not merely 
C	blanket -32767					TJH 03-Jan-1989
CMOD	Now rejects points in ZS with z values that 
C	are 'unset'					TJH 05-Jul-1988
C	Created 					TJH 28-Jul-1987
C
C Read-in strings from IFF file and buffers then up in /COORDS/ for
C transfer into the TRIANG box structure.
C
C Function returns TRUE if succesful
C 
	IMPLICIT NONE
C
C Arguments:
	INTEGER	  NP		! number of pts. in MD
	INTEGER   LAX 		! The of data points that can be held 
C				  is reduced from NPMAX to LAX by
C 				  the number of imaginary frame points
C				  that are included - one
C				  in every box around the periphery
	INTEGER	  KAFFIR	! number of cliff lines input
	INTEGER	  ISTRNG	! number of strings input
	INTEGER	  NF(2)		! IFF feature serial /internal #
	LOGICAL	  NEW_FEATURE	! new string feature?
C
C W/s
	REAL	  A,S		! temporary variables
	LOGICAL   HADINS	! .T. - pts of feat. inside clip bound
	INTEGER	  I,J,K,L,M	! temporary variables
	INTEGER	  IA,IB,IC	! temporary variables
	INTEGER	  JA,JB,JC,KA	! temporary variables
	INTEGER	  KPT		! number of pts. retained from string
	LOGICAL	  OK		! for error reporting
	LOGICAL	  OUTSIDE	! .T. if  line strays outside clip bound
C
C Parameters
	INTEGER    NSTRNG	! max number of input strings allowed
	PARAMETER  (NSTRNG=100000) 
	INCLUDE 'LSL$CMNTRIANG:TRIANGMSG.PAR'
	INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'
	INCLUDE 'LSL$CMNDTI:DTIPAR.PAR'
C
C Common blocks
	INCLUDE 'LSL$CMNTRIANG:CONTRL.CMN'
	INCLUDE 'LSL$CMNTRIANG:COORDS.CMN'
	INCLUDE 'LSL$CMNTRIANG:STORAG.CMN'
	INCLUDE 'LSL$CMNTRIANG:TPOLGY.CMN'
	INCLUDE 'LSL$CMNTRIANG:ZONVAR.CMN'
	INCLUDE 'LSL$CMNTRIANG:FINDIT.CMN'
	INCLUDE 'LSL$CMNTRIANG:STACKA.CMN'
	INCLUDE 'LSL$CMNTRIANG:MARK.CMN'
	INCLUDE 'LSL$DTMCREATESYS:RESOLUTION.CMN'
C
	INCLUDE 'LSL$CMNIFF:CB.STR'
C
	LOGICAL	  ZBITPAT1	! Z coordinate as a bit pattern
	EQUIVALENCE(ZBITPAT1,D(3))
	LOGICAL	  ZBITPAT2	! Z coordinate as a bit pattern
	EQUIVALENCE(ZBITPAT2,D(4))
C
	SAVE	KPT,HADINS,OUTSIDE
C
C ......................................................................
C
	INSERT_STRING=.TRUE.		! assume success
C
C Reset re-entrant string flags
	IF (NEW_FEATURE) THEN
	   KPT=0
	   OUTSIDE=.FALSE.
	   HADINS=.FALSE.
	   NEW_FEATURE=.FALSE.
	   ISTRNG=ISTRNG+1		! increment string counter
	   IF (ISTRNG.GT.NSTRNG) THEN
	      CALL LSL_PUTMSG(TRIANG__TOOMNYSTR,NSTRNG)
	      GOTO 120
	   ENDIF
	ENDIF
C
	DO 110 J=1,NCOORD
C
C Perform any height alterations. Ensure, however, that points with a
C null height are not altered - this is a reserved flag height
C for selective input from DTI file
C We omit any points with the DTI null or IFF "unset" flag height.
C NB. The default "null" height in a DTI file varied with data type
	   IF (ABS(ITYP).LE.2) THEN
	      IF (.NOT.IFFILE) THEN
	         IF (TBUF4(3,J).EQ.DTI_NULL_REAL) GOTO 110
	      ENDIF
	      D(1)=TBUF4(1,J)
	      D(2)=TBUF4(2,J)
	      D(3)=TBUF4(3,J)
	      IF (ZBITPAT1.EQ.IFF_ABSENT) GOTO 110 ! test as bit pattern
	      IF (MULT.OR.DIVIDE) D(3)=D(3)*MFACTR
	      IF (FEET2M) D(3)=D(3)/3.2808455
	      IF (M2FEET) D(3)=D(3)*3.2808455
	   ELSE			! some form of IFF cliff
	      D(1)=TBUF4(1,J)
	      D(2)=TBUF4(2,J)
	      D(3)=TBUF4(3,J)
	      D(4)=TBUF4(4,J)
	      IF (ZBITPAT1.EQ.IFF_ABSENT) GOTO 110 ! test as bit pattern
	      IF (ZBITPAT2.EQ.IFF_ABSENT) GOTO 110 
	      IF (MULT.OR.DIVIDE) THEN
	         D(3)=D(3)*MFACTR
	         D(4)=D(4)*MFACTR
	      ENDIF
	      IF (FEET2M) THEN
	         D(3)=D(3)/3.2808455
	         D(4)=D(4)/3.2808455
	      ENDIF
	      IF (M2FEET) THEN
	         D(3)=D(3)*3.2808455
	         D(4)=D(4)*3.2808455
	      ENDIF
	   ENDIF
C   
C Is this point inside the area?
	   DO 10 K=1,2
	      IF (D(K).LT.VMIN(K).OR.D(K).GT.VMAX(K)) GOTO 100
10	   CONTINUE
C
C No, so check we have space for it
	   NP=NP+1
	   KPT=KPT+1
	   IF (NP.EQ.LAX*0.9) THEN
	      CALL WRITEF(
     &    '%S 90%% of available memory filled (%N points)'
     &                                      ,WARNING,NP)
	      CALL WRITEF
     &       ('               Maximum points allowed for input is %N'
     &								,LAX)
	   ENDIF
	   IF (NP.GT.LAX) THEN
	      CALL LSL_PUTMSG(TRIANG__TOOMNYPTS,LAX)
	      GOTO 120
	   ENDIF
C
CCCCCCC Integer scale the x,y,z values, ensuring they lie between 1-300000
C
	   DO 20 K=1,3
	      A=OFFSET(K)+(D(K)-VMIN(K))*VSCAL(K)
C	      MD(K,NP)=AMAX1(AMIN1(A+0.5,300000.0),1.0)
	      MD(K,NP)=AMAX1(AMIN1(A+0.5,MAX_RES_REAL),1.0)
20	   CONTINUE
C
C If this is a cliff/breakline line mark the z value negative
	   IF (ITYP.LT.0) THEN
	      MD(3,NP)=-MD(3,NP)
	   ENDIF
C
C Determine box occupied by this point, and update the box index
C by getting the first point marker for the box, chasing through
C the box list using the next point index (MD(4,...)), and checking that
C no incoming point is a duplicate of one already in the list.
C
C Ensure we are allowing for points on the boundary by getting
C a little range added and subtracted to the position of the point.
C Thus many times if the point falls on the border between a number
C of boxes, the duplicate check will cover more than one box
C contents.
	   IB=MAX0((MD(2,NP)-KANGE)/MYI+1,1)
	   IC=MIN0((MD(2,NP)+KANGE)/MYI+1,NBI)
	   JB=MAX0((MD(1,NP)-KANGE)/MXI+1,1)
	   JC=MIN0((MD(1,NP)+KANGE)/MXI+1,NBJ)
C
C Set up loops to go through the boxes
	   DO 70 IA=IB,IC
	      KA=(IA-1)*NBJ
	      DO 60 JA=JB,JC
	         L=KA+JA
C
C Does the box have anything in it already?
	         L=IN(L)
	         IF (L.EQ.0) GOTO 60
C
C Some points already exist in the box. Check for duplicates
30	         DO 40 M=1,2
	            IF (ABS(MD(M,NP)-MD(M,L)).GT.KANGE) GOTO 50
40	         CONTINUE
C
C This is a duplicate. Write a message and omit this point
	         IF (DIAG) THEN
	            CALL WRITEF(
     &			'Duplicate or near duplicate point at '//
     &			'(X,Y) %(2%F12.3%)',D(1),D(2))
	         ENDIF
	         NP=NP-1
	         KPT=KPT-1
	         GOTO 110
C
C All ok so far, chase along the rest of the list.
50	         L=ABS(MD(4,L))
	         IF (L.NE.NPMAX) GOTO 30
C
C Continue the search for duplicates in other boxes.
60	      CONTINUE
70	   CONTINUE
C
C No problem with this point. 
	   HADINS=.TRUE.
C
C If this is a cliff point scale its RHS height. Otherwise KLIFFN
C remains set to -NPMAX
	   IF (ABS(ITYP).GE.3) THEN
	      A=OFFSET(3)+(D(4)-VMIN(3))*VSCAL(3)
C	      KLIFFN(NP)=AMAX1(AMIN1(A+0.5,300000.0),1.0)
	      KLIFFN(NP)=AMAX1(AMIN1(A+0.5,MAX_RES_REAL),1.0)
	      KAFFIR=KAFFIR+1		! count cliff points
	   ENDIF
C
C Are we dealing with a re-entrant bit of string? If so treat the
C segment which has re-entered the map as a new string. Otherwise the
C logical connectivity of the pieces of string will cause problems to
C the triangulation constraint algorithm.
	   IF (OUTSIDE) THEN
	      OUTSIDE=.FALSE.
	      KPT=1
	      ISTRNG=ISTRNG+1
	      IF (ISTRNG.GT.NSTRNG) THEN
	         CALL LSL_PUTMSG(TRIANG__TOOMNYSTR,NSTRNG)
	         GOTO 120
	      ENDIF
	   ENDIF
C If it's the first point accepted from this string then change the 
C sign marker and thus alter MD.
	   IF (KPT.EQ.1) THEN
	      MARK=-MARK
	   ENDIF
C
C If this is a ridge or river string set the appropriate entry in 
C TPOLGY()
	   IF (RIDPTS) TPOLGY(NP)=2			! bit 1
	   IF (RIVPTS) TPOLGY(NP)=1			! bit 0
C
C No problem with this point, so tack it into its favourite box
	   K=MD(2,NP)/MYI*NBJ+MD(1,NP)/MXI+1
	   L=IN(K)
	   IF (L.NE.0) GOTO 80
C
C This is first point in box, put number in index, and zero next
C point marker in MD(4,...).
	   IN(K)=NP
	   GOTO 90
C
C Check for a next point in the box chain indicated by MD(4,...).
80	   M=L
	   L=ABS(MD(4,L))
	   IF (L.NE.NPMAX) GOTO 80
C
C End of chain has been reached. the last point in box was M.
C But retain it's string indicator (signed MARK).
C
	   MD(4,M)=NP*ISIGN(1,MD(4,M))  
C Tack on the new point at the end of the list including it's string 
C marker.
90	   MD(4,NP)=NPMAX*MARK
	   GOTO 110
100	   IF (HADINS) OUTSIDE=.TRUE.
110	CONTINUE
C
	GOTO 130
C
C ......................................................................
C
120	INSERT_STRING=.FALSE.
130	RETURN
	END
