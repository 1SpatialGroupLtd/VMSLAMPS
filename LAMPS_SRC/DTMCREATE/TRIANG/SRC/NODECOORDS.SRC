	SUBROUTINE NODECOORDS_PRE_CONSTRAINT
C
***	MODULE	NODECOORDS_PRE_CONSTRAINT
***	IDENT	23MR93
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C       Author						Steve Townrow
C
C Outputs the informational message COORDS to display the coordinates of the
C given node which is useful when a fatal error occurs.
C The array containing the coords will be MD before the CONSTRAINT phase and
C MAC after, and as we can't include STORAG and DATQ common blocks as they
C overlay, we have a common block, ERROR which has the X and Y set by the
C calling routine. The common block containing the OFFSET, VSCAL and VMIN
C values is different before and during the constaint phase so we need two
C routines. Or pass all the arguments in.
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE 'LSL$CMNTRIANG:TRIANGMSG.PAR'
C
C Common:
	INCLUDE 'LSL$CMNTRIANG:STACKA.CMN'
	INCLUDE 'LSL$CMNTRIANG:ERROR.CMN'
C
	REAL*4	XTMP,YTMP
C ......................................................................
C
	IF (ERRCOORDS) THEN
	   XTMP=(REAL(ERRNODX)-OFFSET(1))/VSCAL(1)+VMIN(1)
	   YTMP=(REAL(ERRNODY)-OFFSET(2))/VSCAL(2)+VMIN(2)
	   CALL LSL_PUTMSG(TRIANG__COORDS,XTMP,YTMP)
	   ERRCOORDS = .FALSE.
	ENDIF
C
	RETURN
	END
C
C
	SUBROUTINE NODECOORDS_CONSTRAINT
C
***	MODULE	NODECOORDS_CONSTRAINT
***	IDENT	22MR93
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C       Author						Steve Townrow
C
C Outputs the informational message COORDS to display the coordinates of the
C given node which is useful when a fatal error occurs.
C The array containing the coords will be MD before the CONSTRAINT phase and
C MAC after, and as we can't include STORAG and DATQ common blocks as they
C overlay, we have a common block, ERROR which has the X and Y set by the
C calling routine. The common block containing the OFFSET, VSCAL and VMIN
C values is different before and during the constaint phase so we need two
C routines. Or pass all the arguments in.
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE 'LSL$CMNTRIANG:TRIANGMSG.PAR'
C
C Common:
	INCLUDE 'LSL$CMNTRIANG:RCONVI.CMN'
	INCLUDE 'LSL$CMNTRIANG:ERROR.CMN'
C
	REAL*4	XTMP,YTMP
C ......................................................................
C
	IF (ERRCOORDS) THEN
	   XTMP=(REAL(ERRNODX)-OFFSET(1))/VSCAL(1)+VMIN(1)
	   YTMP=(REAL(ERRNODY)-OFFSET(2))/VSCAL(2)+VMIN(2)
	   CALL LSL_PUTMSG(TRIANG__COORDS,XTMP,YTMP)
	   ERRCOORDS = .FALSE.
	ENDIF
C
	RETURN
	END
