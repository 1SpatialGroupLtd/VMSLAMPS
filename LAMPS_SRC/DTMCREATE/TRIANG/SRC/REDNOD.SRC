C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-01-26 14:12:10.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE REDNOD(LUN,NAY,N,IERR)
C
***	MODULE	REDNOD
***	IDENT	31JL87
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	Converted for LSLLIB message formats	TJH	31-Jul-1987
CMOD	NAY dimensioned to NAYMAX via DIMS.PAR	 DM	05-Jul-1984
CMOD	TEXTOT replaced by OUTOPT		 DM	03-Jul-1984
CMOD	Inefficient NAY(N) replaced by NAY(50)	 DM	06-Jun-1984
CMOD	Error message for EOF			 DM	05-Jun-1984
CMOD	RDUNF introduced			 DM	24-May-1984
C	Standardised				TJH	14-May-1984
C
C......Read through the node/neighbour file. If IERR is -1 on entry
C......clear the buffer. Set IERR to 0 on exit unless an error has
C......occurred. NBUF is unused data position marker for buffer, NSIZE
C......is the size of the buffer, and the buffer is NODS. N numbers
C......are needed from the buffer, and should be put into NAY.
C
	INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'
	INCLUDE 'LSL$DTMCREATESYS:MESSAGE.CMN'
	INCLUDE 'LSL$CMNTRIANG:TRIANGMSG.PAR'
	INCLUDE 'LSL$CMNTRIANG:DIMS.PAR'
	INCLUDE 'LSL$CMNTRIANG:NODBUF.CMN'
	INCLUDE '($RMSDEF)'
C
	DIMENSION NAY(NAYMAX)
C
	LOGICAL OK		! function return
C
C function:
	LOGICAL RDUNF		! efficient unformatted Fortran read
C
C ......................................................................
C
C......Check for first time command.
	IF (IERR.EQ.-1) NBUF=1
	NUM=0
C......is buffer empty?
10	IF (NBUF.NE.1) GOTO 20
C......yes, get a dollop from the binary record file
	IERR=1
	OK=RDUNF(LUN,NODS,NSIZE)
	IF (.NOT.OK) THEN
	   IF (OK.EQ.RMS$_EOF) GO TO 40	! EOF ?
	   CALL WRITEF(' ')
	   CALL LSL_GETMSG(TRIANG__RDNOD,MESSAGE,MESLEN)
	   CALL EXPAND('%'//MESSAGE(:MESLEN))
	   CALL TXTOUT(.FALSE.)
	   CALL LSL_GETMSG(OK,MESSAGE,MESLEN)
	   J=INDEX(MESSAGE,'!') - 1		! (ignore any FAO stuff)
	   IF (J.LT.0) J=MESLEN
	   CALL ALARMS(MESSAGE(:J))		! close down & exit
	ENDIF
C
C......numbers now available, how many numbers are still required?
20	IERR=0
	K=NBUF + MIN0(N-NUM,NSIZE-NBUF+1) - 1
	DO 30 I=NBUF,K
	   NUM=NUM + 1
	   NAY(NUM)=NODS(I)
30	CONTINUE
C......update NBUF - marking position of first unused number in buffer
	NBUF=K + 1
	IF (NBUF.GT.NSIZE) NBUF=1
C......have the N numbers been supplied yet?
	IF (NUM.NE.N) GOTO 10
C
C......yes they have - all finished
C......check no zero is present - used as filler in last record
40	IF (NAY(N).EQ.0) THEN
	   CALL LSL_GETMSG(TRIANG__NODEOF,MESSAGE,MESLEN)
	   CALL ALARMS(MESSAGE(:MESLEN))
	ENDIF
	RETURN
	END
