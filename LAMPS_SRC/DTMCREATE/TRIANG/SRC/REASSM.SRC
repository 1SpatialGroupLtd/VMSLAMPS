	SUBROUTINE REASSM(LUN)
C
***	MODULE	REASSM
***	IDENT	02JA91
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	Call to WAIT changed to LSL_WAIT		TJH  21-Dec-1990
CMOD	Converted for LSLLIB message formats		TJH  31-Jul-1987
CMOD	Even saints make changes...	                MJM  04-Mar-1987
CMOD	The word according to St Michael! Cliffs fixed. MJM  18-Feb-1987
CMOD	The F77 compiler has thrown out NUM, (this has
C	happened in other modules) now NUMBER		TJH  30-Jul-1986
CMOD	Messages now output using TXTOUT to accommodate
C	Sigmex 6164 code				TJH  28-Jul-1986
CMOD	Messages output with graphics calls if required TJH  21-Jul-1986
CMOD	Feature codes in TPOLGY() reordered correctly!	TJH  17-Jul-1986
CMOD	Feature codes in TPOLGY() reordered too		TJH  21-Mar-1986
C	Created 				    MJM/TJH  06-Oct-1985
C
C......Reassemble lines in the correct data order and string markers
C......allowing for patches which may have been inserted in the strings
C
C Parameters:
	INCLUDE 'LSL$CMNTRIANG:DIMS.PAR'
	INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'
	INCLUDE 'LSL$CMNTRIANG:TRIANGMSG.PAR'
C
C Common:
	INCLUDE 'LSL$DTMCREATESYS:MESSAGE.CMN'
	INCLUDE 'LSL$CMNTRIANG:CONTRL.CMN'
	INCLUDE 'LSL$CMNTRIANG:DATQ.CMN'
	INCLUDE 'LSL$DTMCREATESYS:GRAFCS.CMN'
	INCLUDE 'LSL$DTMCREATESYS:GRAFDEV.CMN'
	INCLUDE 'LSL$CMNTRIANG:TPOLGY.CMN'
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'
C
	INTEGER KLIFF		! a single RHS cliff height
	BYTE	IFEAT		! one element of TPOLGY
	INTEGER	NTEM(NAYMAX)	! neighbour list
C
C ......................................................................
C
C......Check for no patching having been performed
	IF(NPATCH.EQ.0)RETURN
C......Go through the node/neighbour store, ammending all neighbours to
C......their new node number - which will have increased depending on
C......the exact number of nodes inserted at each patch point.
C
C......Determine new node corresponding to every old node position from
C......1 to NP (there were only NPOLDS nodes before).
C
C......Set one more patch position than has really been used
	LAST=NPATCH+1
	IPATCH(1,LAST)=NPOLDS
	IPATCH(2,LAST)=NPOLDS
	IPATCH(3,LAST)=NPOLDS-1
C......Accumulate NPOS - the number of new nodes, (NP), while assigning
C......new positions to each old node in turn.
C......New node numbers for old nodes are held in INWNPT.
	IF (DIAG) THEN
	   IF (GRAPHICS.AND.(.NOT.GPX)) THEN
	      CALL EXPAND('Restructuring data order')
	      CALL TXTOUT(.TRUE.)
	      CALL LSL_WAIT(2,2)	! wait for 2 seconds
	   ELSE
	      CALL FRAMED_MES(3,0)
	   ENDIF
	   CALL PERCENT('of nodes reordered',0,NP,10,-1)
	ENDIF
	NPOS=0
	DO 30 I=1,LAST
C......Store the new node numbers for all before the patch
	   IF(I.EQ.1) THEN
	      J=1
	   ELSE
	      J=IPATCH(1,I-1)+1
	   ENDIF
	   K=IPATCH(1,I)
	   DO 10 L=J,K
	      NPOS=NPOS+1
	      INWNPT(L)=NPOS
	      IF (MAC(5,L).EQ.1) INWNPT(L)=-NPOS
10	   CONTINUE
C......Store the new node numbers for the patch itself
	   JA=IPATCH(2,I)
	   KA=IPATCH(3,I)
	   IF(KA.GE.JA) THEN
	      DO 20 L=JA,KA
	         NPOS=NPOS+1
	         INWNPT(L)=NPOS
	         IF (MAC(5,L).EQ.1) INWNPT(L)=-NPOS
20	      CONTINUE
	   ENDIF
30	CONTINUE
	IF (DIAG) THEN
	   CALL PERCENT('of nodes reordered',NPOS,NP,10,0)
	   IF (GRAPHICS) CALL LSL_WAIT(2,2)	! wait for 2 seconds
	ENDIF
C......Whinge if NPOS does not equal NP
	IF (NPOS.NE.NP) THEN
	   CALL LSL_GETMSG(TRIANG__BADCOUNT,MESSAGE,MESLEN)
	   CALL ALARMS('%'//MESSAGE(:MESLEN))
	ENDIF
	IF (DIAG) THEN
	   CALL PERCENT('of nodes reordered',NPOS,NP,10,1)
	ENDIF
C......Store the data, last point in box, and node/neighbours for the
C......newly acquired patch insert point set - in reverse order.
	REWIND LUN
	J=NPOLDS+1
	DO 40 LA=J,NP
	   L=NP-LA+J
c......check for a node having been duffed in this patch, and pretend
c......it has a dummy list of 3 neighbours if it has
	   IF(IABS(MAC(5,L)).NE.1) THEN
	      CALL GETNAY(L,NTEM,NAYMAX,NUMBER)
	   ELSE
	      NUMBER=3
	   ENDIF
	   WRITE(LUN)(MAC(M,L),M=1,4),NUMBER
	   WRITE(LUN)(NTEM(M),M=1,NUMBER)
	   IFEAT=TPOLGY(L)
	   WRITE(LUN)IFEAT
	   KLIFF=KLIFFN(L)
	   WRITE(LUN)KLIFF
40	CONTINUE
C......Go through data, last pnt in box, node/neighbour list in correct
C......reverse order, fetching all newly acquired patch pnt information
C......from file.
	IF (DIAG) THEN
	   IF (GRAPHICS.AND.(.NOT.GPX)) THEN
	      CALL EXPAND('String reassembly')
	      CALL TXTOUT(.TRUE.)
	      CALL LSL_WAIT(2,2)	! wait for 2 seconds
	   ELSE
	      CALL FRAMED_MES(4,0)
	   ENDIF
	   CALL PERCENT('of strings reassembled',0,NP,10,-1)
	ENDIF
	REWIND LUN
C.......Set flip-flop conditions to choose next node in list between
C.......file or memory
	IDECFL=NP
	NEXNDF=IABS(INWNPT(IDECFL))
	IDECWS=NPOLDS
	NEXNDW=IABS(INWNPT(IDECWS))
	DO 70 NA=1,NP
	   IF (DIAG) THEN
	      CALL PERCENT('of strings reassembled',0,NP,10,0)
	   ENDIF
	   NOD=NP-NA+1
C......Check for this node being in the old patched area (and hence on
C......file rather than in memory), and then fetch it.
	   IF((NEXNDF.GT.NEXNDW).AND.(IDECFL.GT.NPOLDS)) THEN
	      READ(LUN)(MAC(M,NOD),M=1,4),NUMBER
	      READ(LUN)(NTEM(M),M=1,NUMBER)
	      READ(LUN)IFEAT
	      TPOLGY(NOD)=IFEAT
	      READ(LUN)KLIFF
	      KLIFFN(NOD)=KLIFF
	      J=IABS(MAC(4,NOD))
	      K=ISIGN(1,MAC(4,NOD))
	      IF(J.NE.NPMAX)THEN
	         MAC(4,NOD)=IABS(INWNPT(J))*K
	      ELSE
	         MAC(4,NOD)=NPMAX*K
	      ENDIF
	      INODE=IDECFL
	      IDECFL=IDECFL-1
	      NEXNDF=IABS(INWNPT(IDECFL))
	   ELSE
	      DO 50 I=1,3
	         MAC(I,NOD)=MAC(I,IDECWS)
50	      CONTINUE
	      IF(INWNPT(IDECWS).GT.0) THEN
	         CALL GETNAY(IDECWS,NTEM,NAYMAX,NUMBER)
	      ENDIF
C......node is duff, ensure that MAC(5,*) is marked to show it duff
	      J=IABS(MAC(4,IDECWS))
	      K=ISIGN(1,MAC(4,IDECWS))
	      IF (J.NE.NPMAX) THEN
	         MAC(4,NOD)=IABS(INWNPT(J))*K
	      ELSE
	         MAC(4,NOD)=NPMAX*K
	      ENDIF
C
C......Ensure that the cliff heights in KLIFFN and the feature code 
C......bytes in TPOLGY() are reordered correctly as well
	      KLIFFN(NOD)=KLIFFN(IDECWS)
	      TPOLGY(NOD)=TPOLGY(IDECWS)
	      INODE=IDECWS
	      IDECWS=IDECWS-1
	      IF(IDECWS.NE.0)NEXNDW=IABS(INWNPT(IDECWS))
	   ENDIF
C......Modify the node numbers in NTEM to the new node number list
C......and write them out to storage, unless we are dealing with a
C......duff node
	   IF (INWNPT(INODE).GT.0) THEN
	      DO 60 I=1,NUMBER
	         J=NTEM(I)
	         NTEM(I)=IABS(INWNPT(J))
60	      CONTINUE
	      CALL PUTNAY(NOD,NTEM,NAYMAX,NUMBER)
	   ELSE
	      MAC(5,NOD)=1
	   ENDIF
70	CONTINUE
	IF (DIAG) THEN
	   CALL PERCENT('of strings reassembled',NA,NP,10,1)
	ENDIF
C......Modify the first point in box markers to the new node number list
	NBOX=NBI*NBJ
	DO 80 I=1,NBOX
	   J=IN(I)
	   IF(J.NE.0)IN(I)=IABS(INWNPT(J))
80	CONTINUE
C......That's all
	RETURN
	END
