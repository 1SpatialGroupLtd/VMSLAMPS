C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-12-21 15:24:08.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE SETUP(L1,L2,L3,L4,L5,L6,L7,L8,L9,L10,L11,SODMIN,
     &			SODMAX,SODSCL,SODOFF)
C
***	MODULE	SETUP
***	IDENT	02JA91
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	Call to WAIT changed to LSL_WAIT		TJH 21-Dec-1990
CMOD	TTTYPE.CMN changed to be LSL$DTMCREATESYS:GRAFCS.CMN
C							TJH 11-Aug-1986
C	Severely hacked from PANDEMON	    	    MJM/TJH 01-Oct-1985
C
C......Routine to bridge between triangulation phase and constraint 
C......phase; these use overlaid common blocks. 
C......Get the node/neighbour data set from TRIANG transfer file and
C......get data into memory, put neighbours into a random file (on
C......disk or in memory depending on space available, and size of
C......data set)
C
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'
	INCLUDE 'LSL$CMNTRIANG:CONTRL.CMN'
	INCLUDE 'LSL$CMNTRIANG:DATQ.CMN'
	INCLUDE 'LSL$CMNTRIANG:DIMS.PAR'
	INCLUDE 'LSL$DTMCREATESYS:IOLUNS.CMN'
	INCLUDE 'LSL$CMNTRIANG:RCONVI.CMN'
	INCLUDE 'LSL$DTMCREATESYS:MESSAGE.CMN'
	INCLUDE 'LSL$DTMCREATESYS:GRAFCS.CMN'
	INCLUDE 'LSL$DTMCREATESYS:GRAFDEV.CMN'
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'
	INCLUDE '($RMSDEF)'
C
	DIMENSION NTEM(NAYMAX)
C
C Just for Michael (The REALLY rude variable names have been changed!)
	DIMENSION SODMIN(3),SODMAX(3),SODSCL(3),SODOFF(3)
C
	CHARACTER*80 	TEXT
	CHARACTER*80 	ITLE
	INTEGER	  	ITLEN
	INTEGER	  	I,J
	LOGICAL	  	OK	  	! function return
C
C function:
	LOGICAL	  	RDUNF		! efficient Fortran reads
C
C ......................................................................
C
C Copy our argument list variables into constraint phase common block
	DO 10 I=1,3
	   VMIN(I)=SODMIN(I)
	   VMAX(I)=SODMAX(I)
	   VSCAL(I)=SODSCL(I)
	   OFFSET(I)=SODOFF(I)
10	CONTINUE
	LIMPOL=L1
	NP=L2
	NPMAX=L3
	NBI=L4
	NBJ=L5
	MX2=L6
	MY2=L7
	MXI=L8
	MYI=L9
	ISHELL=L10
	KAFFIR=L11
	NBOX=NBI*NBJ
C
C......Store the sign of the last string in the data set
	LASTSN=ISIGN(1,MAC(4,NP))
C
C Rewind the node transfer file
	REWIND LGC3
C
C......Open the random scratch file that is to hold the neighbours
C......ready for use as needed. NB: record length needs to be
C......11*(standard integer length in operation, in this one). This
C......gives the length in bytes. NB: if there is enough room in memory
C......for the data set, then the system automatically dispenses with
C......the random file. If there is not enough room im memory then the
C......whole of memory is used, and than whatever disk space is needed.
	IF (NFREES.LE.NP) THEN
	   OPEN(UNIT=LGC1,FILE='TRIANG.TMP',STATUS='SCRATCH',
     1		ACCESS='DIRECT',FORM='UNFORMATTED',RECL=11,ERR=70)
	   DISKFL=.TRUE.
	ENDIF
C
C......Fill the stack up from 1 to NSTACK
	IF (DIAG) THEN		! slow - but tells user
	   CALL PERCENT('of structure initialised',1,NSTACK+NMAX,10,-1)
	   DO 20 I=1,NSTACK
	      CALL PERCENT('of structure initialised',I,NSTACK+NMAX,10,0)
	      ISTACK(I)=I
20	   CONTINUE
	ELSE			! much faster
	   DO 30 I=1,NSTACK
	      ISTACK(I)=I
30	   CONTINUE
	ENDIF
C
C......Set the stack pointer to no records being used yet, starting
C......with record 2, as record 1 is used in MAC(5,...) to indicate no
C......entry is present.
	IPSTCK=2
C
C......Set entry point into the structure to indicate record 1 (unused)
C......for each node
	IF (DIAG) THEN		! slow - but tells user
	   DO 40 I=1,NMAX
	      CALL PERCENT(
     &		'of structure initialised',NSTACK+I,NSTACK+NMAX,10,0)
	      MAC(5,I)=1
40	   CONTINUE
	   CALL PERCENT('of structure initialised',1,NSTACK+NMAX,10,1)
	ELSE			! much faster
	   DO 50 I=1,NMAX
	      MAC(5,I)=1
50	   CONTINUE
	ENDIF
C
C......Get neighbours in for each point in turn and write a random file.
C......Complete node/neighbour list is stored in NTEM. There are NUMN
C......neighbours for point IPNT.
	IERR=-1
	IF (DIAG) THEN
	   IF (GRAPHICS.AND.(.NOT.GPX)) THEN
	      CALL EXPAND(
     &		'Setting up random access node/neighbour list')
	      CALL TXTOUT(.TRUE.)
	      CALL LSL_WAIT(1,2) 		! wait for 1 sec.
	   ELSE
	      CALL FRAMED_MES(7,0)
	   ENDIF
	   CALL PERCENT('of memory set up',I,NP,10,-1)
	ENDIF
	DO 60 I=1,NP
	   IF (DIAG) THEN
	      CALL PERCENT('of memory set up',I,NP,10,0)
	   ENDIF
	   CALL REDNOD(LGC3,IPNT,1,IERR)
	   CALL REDNOD(LGC3,NUMN,1,IERR)
	   IF (NUMN.GE.NAYMAX) THEN
	      CALL LSL_GETMSG(TRIANG__TOMNYNEIB,MESSAGE,MESLEN)
	      CALL EXPAND('%'//MESSAGE(:MESLEN),NAYMAX)
	      CALL ALARMS(EXPDSC)
	   ENDIF
	   CALL REDNOD(LGC3,NTEM,NUMN,IERR)	! read neighbour record
	   CALL PUTNAY(IPNT,NTEM,NAYMAX,NUMN)	! store them away
60	CONTINUE
	IF (DIAG) THEN
	   CALL PERCENT('of memory set up',I,NP,10,1)
	ENDIF
C
	GOTO 90				! all done
C
C ......................................................................
C
C File handling errors.
70	CALL WRITEF(' ')
	CALL LSL_GETMSG(TRIANG__OPNSCR,MESSAGE,MESLEN)
	CALL EXPAND('%'//MESSAGE(:MESLEN))
	CALL TXTOUT(.FALSE.)
	CALL ERRSNS(,I,J)		! find out what the problem is
	IF (J.EQ.0) J=I
80	CALL LSL_GETMSG(J,MESSAGE,MESLEN)
	J=INDEX(MESSAGE,'!') - 1		! (ignore any FAO stuff)
	IF (J.LT.0) J=MESLEN
	CALL ALARMS(MESSAGE(:MESLEN))		! close down & exit
C
90	RETURN
	END
