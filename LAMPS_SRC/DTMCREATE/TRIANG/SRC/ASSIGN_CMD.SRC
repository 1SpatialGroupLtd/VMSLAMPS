C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-01-26 13:06:38.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION ASSIGN_CMD()
C
***	MODULE	ASSIGN_CMD
***	IDENT	27JL87
C
C	Copyright (C), Laser-Scan Laboratories Ltd., Cambridge, England
C
CMOD	Now outputs more help after wrong command	TJH 26-Jan-1989
C	Created						TJH 23-Jul-1987
C
C Function to set IFF assignments 'on' eg ASSIGN FC_RIVER 1,2,3.
C Use in conjunction with function DEASSIGN 
C
C Function returns .TRUE. if all is well, .FALSE. if an error
C
	IMPLICIT NONE
C
C W/s
	BYTE		CH	! one byte
	INTEGER		CMD     ! decoded command number
C
C
C Parameters:
	INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'
C Common blocks:
	INCLUDE 'LSL$CMNTRIANG:CONTRL.CMN'
	INCLUDE 'LSL$CMNTRIANG:SELECTIONS.CMN'
C
C Functions:
	LOGICAL 	RD_LY_ASN	! read layer assignments
	LOGICAL 	RDCHS	! read one character
	LOGICAL 	RD_FC_ASN	! read FC assignments
	LOGICAL 	RDCOMM  ! read command from line
C
C Command table:
	EXTERNAL	ASSIGN_CMD_TABLE
	INTEGER		ASSIGN_CMD_TABLE
C
C ......................................................................
C
	ASSIGN_CMD=.TRUE.			! assume success
C
	CMD=RDCOMM(ASSIGN_CMD_TABLE)	! get command
C
C Check that an argument was supplied
	IF (CMD.GE.1) THEN
	   IF (RDCHS(CH)) THEN
	      CALL WRITEF(WARNING//
     &		'You must specify at least one integer argument')
	      GOTO 100
	   ELSE
	      CALL BSCH
	      IF ((CH.LT.'0'.OR.CH.GT.'9').AND.CMD.GT.4) THEN
	         CALL EXPAND(WARNING//'ASSIGN ')
	         IF (CMD.EQ.5) THEN
	            CALL APPEND('BREAKLINE_LAYER')
	         ELSEIF (CMD.EQ.6) THEN
	            CALL APPEND('CLIFF_LAYER')
	         ELSEIF (CMD.EQ.7) THEN
	            CALL APPEND('RIDGE_LAYER')
	         ELSEIF (CMD.EQ.8) THEN
	            CALL APPEND('RIVER_LAYER')
	         ENDIF
	         CALL WRTAPP(' arguments must be integers '//
     &				'in the range 0 - 32767')
	         GOTO 100
	      ENDIF
	   ENDIF
	ENDIF
	GOTO (
     &		10,	! nothing/error
     &		20,	! BREAKLINE_FC
     &		30,	! CLIFF_FC
     &		40,	! RIDGE_FC
     &		50,	! RIVERS_FC
     &		60,	! BREAKLINE_LAYER
     &		70,	! CLIFF_LAYER
     &		80,	! RIDGE_LAYER
     &		90	! RIVER_LAYER
     &			), CMD+1
C
C
C command number out of range
	CALL WRITEF('Command not yet implemented')
	ASSIGN_CMD=.FALSE.
	GOTO 100
C
C ......................................................................
C Error
10	CALL WRITEF(ERROR//'Specifying command ASSIGN')
	CALL WRITEF(' ')
	CALL WRITEF('Available ASSIGN command qualifiers are:')
	CALL WRITEF(' ')
	CALL WRITEF('BREAKLINE_FC      BREAKLINE_LAYER      '//
     &			'CLIFF_FC        CLIFF_LAYER')
	CALL WRITEF(' ')
	CALL WRITEF('RIDGE_FC          RIDGE_LAYER          '//
     &			'RIVER_FC        RIVER_LAYER')
	CALL WRITEF(' ')
	ASSIGN_CMD=.FALSE.
	GOTO 100
C
C ......................................................................
C ASSIGN BREAKLINE_FC
20	IF (.NOT.RD_FC_ASN(.TRUE.,BREKFC,HADFRT)) ASSIGN_CMD=.FALSE.
	GOTO 100	   
C
C ......................................................................
C ASSIGN CLIFF_FC
30	IF (.NOT.RD_FC_ASN(.TRUE.,FCCLC,HADFRT)) ASSIGN_CMD=.FALSE.
	GOTO 100	   
C
C ......................................................................
C ASSIGN RIDGE_FC
40	IF (.NOT.RD_FC_ASN(.TRUE.,FCRID,HADFRT)) ASSIGN_CMD=.FALSE.
	GOTO 100	   
C
C ......................................................................
C ASSIGN RIVER_FC
50	IF (.NOT.RD_FC_ASN(.TRUE.,FCRIV,HADFRT)) ASSIGN_CMD=.FALSE.
	GOTO 100	   
C
C ......................................................................
C ASSIGN BREAKLINE_LAYER
60	IF (.NOT.RD_LY_ASN(.TRUE.,BREKOV)) ASSIGN_CMD=.FALSE.
	GOTO 100	   
C
C ......................................................................
C ASSIGN CLIFF_LAYER
70	IF (.NOT.RD_LY_ASN(.TRUE.,OVCLC)) ASSIGN_CMD=.FALSE.
	GOTO 100
C
C ......................................................................
C ASSIGN RIDGE_LAYER
80	IF (.NOT.RD_LY_ASN(.TRUE.,OVRID)) ASSIGN_CMD=.FALSE.
	GOTO 100
C
C ......................................................................
C ASSIGN RIDGE_LAYER
90	IF (.NOT.RD_LY_ASN(.TRUE.,OVRIV)) ASSIGN_CMD=.FALSE.
	GOTO 100
C ......................................................................
C
100	RETURN
	END
