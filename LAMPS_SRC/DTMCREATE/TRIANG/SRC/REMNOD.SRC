C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-01-26 14:12:16.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE REMNOD(NOD)
C
***	MODULE	REMNOD
***	IDENT	31JL87
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	Converted for LSLLIB message formats	TJH	31-Jul-1987
C	From PANDEMON				MJM/TJH	06-Oct-1985
C
C Remove any entry in the data structure that may exist for
C the neighbours of NOD. First check MAC(5,...) for being unset. If it
C is not set to 1 then follow all records through the structure
C until a non-negative 11th value is found, return each record to
C the stack, and unset the MAC(5,...) entry. this is done by setting
C it to 1, a record number not used in the system.
C
	INCLUDE 'LSL$CMNTRIANG:DATQ.CMN'
	INCLUDE 'LSL$DTMCREATESYS:IOLUNS.CMN'
	INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'
	INCLUDE 'LSL$DTMCREATESYS:MESSAGE.CMN'
	INCLUDE 'LSL$CMNTRIANG:TRIANGMSG.PAR'
C
	INTEGER I,J,M
	INTEGER NTEM(10)
	INTEGER NTEM2(11)		! for efficient reading
C
	EQUIVALENCE (NTEM(1),NTEM2(1)),(M,NTEM2(11))
C
C ......................................................................
C
C......Check MAC(5,...) - is this point duff?
	KREC=IABS(MAC(5,NOD))
	IF (KREC.EQ.1) GOTO 30
C......Entry exists. follow through the structure and delete it
C......Reduce the number of the stack pointer
10	IPSTCK=IPSTCK-1
C......Check for an error condition (IPSTCK must not be 1 or less as
C......the first record is reserved)
	IF (IPSTCK.LE.1) THEN
	   CALL LSL_GETMSG(TRIANG__STACKRET,MESSAGE,MESLEN)
	   CALL ALARMS(MESSAGE(:MESLEN)//' - REMNOD')
	ENDIF
C......Return the record
	ISTACK(IPSTCK)=KREC
C......Check for memory or disk file
	IF (KREC.LE.NFREES) THEN
C......Memory file - get next record indicator
	   M=IFREES(11,KREC)
	ELSE
C......Disk file storage
	   LOFF=KREC-NFREES
	   READ (LGC1,REC=LOFF,ERR=20) NTEM2
	ENDIF
C......Check for no more records to pick up
	IF (M.GT.0) THEN
C......Unset this node list entry to show it's not there
	   MAC(5,NOD)=1
	   GOTO 30
	ELSE
C......Another record needs to be released
	   KREC=IABS(M)
	ENDIF
	GOTO 10
C
C......Error and EOF fatal problems
20	CALL ERRSNS(,I,J)			! identify error
	IF (J.EQ.0) J=I
	CALL LSL_GETMSG(TRIANG__RDNOD,MESSAGE,MESLEN)	! get,
	CALL EXPAND('%'//MESSAGE(:MESLEN))	! format,
	CALL TXTOUT(.FALSE.)			! and output message.
	CALL LSL_GETMSG(J,MESSAGE,MESLEN)	! get 2ndary message
	J=INDEX(MESSAGE,'!') - 1		! (ignore any FAO stuff)
	IF (J.LT.0) J=MESLEN			! set message length
	CALL ALARMS(MESSAGE(:J))		! close down & exit
30	RETURN
	END
