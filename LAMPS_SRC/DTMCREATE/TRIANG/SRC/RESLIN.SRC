C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-12-21 15:23:00.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE RESLIN(IOPT,LUN)
C
***	MODULE	RESLIN
***	IDENT	02JA91
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	Call to WAIT changed to LSL_WAIT		TJH  21-Dec-1990
CMOD	Resets to correct colour after patch		TJH  11-Jul-1888
CMOD	Converted for LSLLIB message formats		TJH  31-Jul-1987
CMOD	The word according to St. Michael!		MJM  18-Feb-1987
CMOD	Messages now output using TXTOUT to accommodate
C	Sigmex 6164 code				TJH  30-Jul-1986
CMOD	ERASE called before outputting graphics text    TJH  23-Jul-1986
CMOD	Graphics output added				TJH  17-Jul-1986
C	Created 				    MJM/TJH  06-Oct-1985
C
C Restore all links between lines in the data set, eg: 
C breaklines (IOPT=1), contour lines (IOPT=2), etc.
C
C Parameters:
	INCLUDE 'LSL$CMNTRIANG:DIMS.PAR'
	INCLUDE 'LSL$CMNTRIANG:TRIANGMSG.PAR'
C
C Common:
	INCLUDE 'LSL$DTMCREATESYS:MESSAGE.CMN'
	INCLUDE 'LSL$CMNTRIANG:CONTRL.CMN'
	INCLUDE 'LSL$CMNTRIANG:DATQ.CMN'
	INCLUDE 'LSL$DTMCREATESYS:GRAFCS.CMN'
	INCLUDE 'LSL$DTMCREATESYS:GRAFDEV.CMN'
	INCLUDE	'LSL$CMNLSL:EXPC.CMN'
C
	CHARACTER*70 TEXT
	CHARACTER*10 CTYPE(2)
	INTEGER	     CLEN(2)
	DIMENSION NTEM(NAYMAX),IDAT(4),JDAT(4)
C
C ......................................................................
C
C If graphics increase width of lines representing the strings
	IF (GRAPHICS) THEN
	   CALL WIDTH(2)
	ENDIF
C Set up strings for progress captions
	TEXT=' '
	CTYPE(1)='breaklines'
	CLEN(1)=10
	CTYPE(2)='contours'
	CLEN(2)=8
C Set basic unpatched colour for string, can do this whether
C we are going to plot them or not. NB: Breaklines are plotted
C in colour 4 if unbroken, colour 5 if patched by PATCHP, and in
C colour 6 if a patched point. similarly normal lines are in
C colour 1 if unbroken, colour 2 If PATCHP has been called, and
C in colour 3 if used to mark an insertion. white is allocated
C to all node replacement intersections.
	IF(IOPT.EQ.1) THEN
	   KOLOR=4
	ELSE
	   KOLOR=1
	ENDIF
	KWHIT=7
C
C Store present value of NP (to ensure we don't try to patch any
C patches!)
C
	NPOLDS=NP
C
C Go through the lines to be repaired
C
	IF (DIAG) THEN
	   IF (GRAPHICS.AND.(.NOT.GPX)) THEN
	      TEXT='Patching '//CTYPE(IOPT)(:CLEN(IOPT))
	      CALL EXPAND('%S',TEXT)
	      CALL TXTOUT(.TRUE.)
	      CALL LSL_WAIT (1,2) ! wait for 1 sec.
	      CALL COLOUR(KOLOR,.FALSE.)
	   ELSE
	      CALL FRAMED_MES(IOPT+4,0)
	   ENDIF
	ENDIF
C
C Set number of patches to zero
	NPATCH=0
C
C Get the start of a line string (unless we have reached NPOLDS)
	IPATBG=LIMPOL
	IF (DIAG) THEN
	   CALL PERCENT('of '//CTYPE(IOPT)(:CLEN(IOPT))//' patched',
     &			IPATBG-LIMPOL,NPOLDS-LIMPOL,10,-1)
	   IF (GRAPHICS) CALL COLOUR(KOLOR,.FALSE.)
	ENDIF
10	IPATBG=IPATBG+1
C
	IF(IPATBG.LT.NPOLDS) THEN
	   IF (DIAG) THEN
	      CALL PERCENT('of '//CTYPE(IOPT)(:CLEN(IOPT))//' patched',
     &			IPATBG-LIMPOL,NPOLDS-LIMPOL,10,0)
	      IF (GRAPHICS) CALL COLOUR(KOLOR,.FALSE.)
	   ENDIF
C
C Get sign of this string, and find the end
	   LASAGN=ISIGN(1,MAC(4,IPATBG))
	   DO 20 IPNEND=IPATBG,NPOLDS
	      IF(LASAGN.NE.ISIGN(1,MAC(4,IPNEND)))GOTO 30
20	   CONTINUE
	   IPNEND=NPOLDS+1
C
C Then check for string of the correct type with more than one node
C
30	   IPNEND=IPNEND-1
	   IF(IPNEND-IPATBG.GT.0) THEN
	      IF((IOPT.EQ.1.AND.MAC(3,IPATBG).LT.0).OR.
     1	       (IOPT.EQ.2.AND.MAC(3,IPATBG).GT.0)) THEN
C Set colour for line (if graphics is on), and move to first point
C in the string 
	         IF (GRAPHICS) THEN
	            CALL COLOUR(KOLOR,.FALSE.)
	            IX=MAC(1,IPATBG)
	            IY=MAC(2,IPATBG)
	            CALL LNKNOD(IX,IY,0)
	         ENDIF
C
C For every point in the string, check for next node on string
C being one of its neighbours. NB: We must check that the present
C node or the next node is not a duffed node - if it is getnay
C will get worried! 
C
	         IPKEND=IPNEND-1
	         IPNODE=IPATBG-1
C
C Draw what we are doing?
C
	         IF (GRAPHICS) THEN
	            CALL TRANS(MAC(1,IPATBG),MAC(2,IPATBG),KX,KY)
	            CALL MOVABS(KX,KY)
	         ENDIF
40	         IPNODE=IPNODE+1
	         IF (IPNODE.LE.IPKEND) THEN 
	            IPNOD1=IPNODE+1
	            IF(IABS(MAC(5,IPNODE)).EQ.1.OR.
     1	           IABS(MAC(5,IPNOD1)).EQ.1) GOTO 40
	            CALL GETNAY(IPNODE,NTEM,NAYMAX,NUMBER)
	            DO 50 K=1,NUMBER
C Node found in list? Plot it out if GRAPHICS
	               IF (NTEM(K).EQ.IPNOD1) THEN
	                  IF (GRAPHICS) THEN
	                     IX=MAC(1,IPNOD1)
	                     IY=MAC(2,IPNOD1)
	                     CALL LNKNOD(IX,IY,1)
	                  ENDIF
	                  GOTO 40
	               ENDIF
50	            CONTINUE
C
C ......................................................................
C
C Next node not found in the node list - so we have a gap in
C the line. Do an patch/insert job to fill the gap. 
C IPNODE and IPNOD1 will be remain unchanged, extra nodes will be 
C added in between but positioned as new strings at the end of the 
C data set. This requires a rather different windup procedure to 
C sort out the muddle.
C
	            IPKOLD=NP+1
	            DO 60 J=1,3
	               JDAT(J)=MAC(J,IPNODE)
	               IDAT(J)=MAC(J,IPNOD1)
60	            CONTINUE
	            JDAT(4)=KLIFFN(IPNODE)
	            IDAT(4)=KLIFFN(IPNOD1)
	            CALL PATCHP(IDAT,JDAT,KOLOR+1,KOLOR+2,KWHIT)
	            IF (GRAPHICS) CALL COLOUR(KOLOR,.FALSE.)
C
C ......................................................................
C
C Determine which nodes have been added to the structure and
C keep a record of their location in the data array.
C
	            IF (IPKOLD.LE.NP) THEN
	               IF (NPATCH.GT.MPATCH) THEN
	                  CALL LSL_GETMSG(TRIANG__TOOMNYPAT,MESSAGE,MESLEN)
	                  CALL ALARMS(MESSAGE(:MESLEN))
	               ELSE
	                  NPATCH=NPATCH+1
	               ENDIF
	               IPATCH(1,NPATCH)=IPNODE
	               IPATCH(2,NPATCH)=IPKOLD
	               IPATCH(3,NPATCH)=NP
	            ENDIF
	            GOTO 40
	         ENDIF
	      ENDIF
	   ENDIF
	   IPATBG=IPNEND
	   GOTO 10
	ENDIF
C
C ......................................................................
C
C That's it
	IF (DIAG) THEN
	   CALL PERCENT('of '//CTYPE(IOPT)(:CLEN(IOPT))//' patched',
     &		IPATBG-LIMPOL,NPOLDS-LIMPOL,10,1)
	   IF (GRAPHICS) CALL COLOUR(KOLOR,.FALSE.)
	ENDIF

	IF (GRAPHICS) CALL OUTBUF
C
C Reassemble lines so that they include the added patches
C
	CALL REASSM(LUN)
C
C Remove any duff nodes that may have been created by vertex
C replacement (a form of garbage collection). 
	CALL DUFNOD
C
	RETURN
	END
