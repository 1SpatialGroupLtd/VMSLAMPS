C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-01-26 14:12:12.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE REJOIN(NEWN,NAY,NOLD)
C
***	MODULE	REJOIN
***	IDENT	07MR86
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author	M.J.McCullagh				March-1986
C
C Replace node nold in the neighbour list for NAY, and connect
C node NEWN in its place. The difference between RECONN and REJOIN
C is that REJOIN does not object if NOLD is not found in the list.
C
	INCLUDE 'DIMS.PAR'
C
	DIMENSION LIST(NAYMAX)
C
C ......................................................................
C
C Get fellow neighbours list
	CALL GETNAY(NAY,LIST,NAYMAX,NUM)
C Find NOLD in the list and substitute NEWN. It may occur twice if
C it is in the first position and this is not an imaginary node
	DO 10 I=1,NUM
	   IF(LIST(I).NE.NOLD)GOTO 10
	   LIST(I)=NEWN
C Can give up now if this change was not the first neighbour in list
	   IF(I.NE.1)GOTO 20
10	CONTINUE
C Put list for nay back in storage in its altered form
20	CALL PUTNAY(NAY,LIST,NAYMAX,NUM)
	RETURN
	END

