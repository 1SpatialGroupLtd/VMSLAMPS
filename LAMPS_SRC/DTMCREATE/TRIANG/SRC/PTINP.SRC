C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-01-26 13:11:24.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE PTINP(IXY,MMAC,NMAC,LIST,NODES,IX,IY,EPS,ICOND,IVERT)
C
***	MODULE	PTINP
***	IDENT	04SE85
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
CMOD    Calc. at label 560 now uses REAL*8	TJH      04-Sep-1985
C	Standardised				TJH	25-May-1984
C
C......Determine if the point (IX,IY) lies within
C......the closed curve of the concave or convex polygon defined
C......by the nodes numbers held in list, for the data held in IXY.
C......On output ICOND is set to indicate
C......the result. 0 = outside, 1 = inside, 2 = vertex, 3 = side
C......ICOND = -1 indicates an error in polygon input. IVERT is set
C......to the vertex number for the beginning of an edge when ICOND=3
C......and to the vertex when ICOND=2. EPS is an absolute distance
C......that can be allowed to consider that IX,IY is lying on an edge.
C
C
	DIMENSION IXY(MMAC,NMAC),LIST(NODES)
C
C ......................................................................
C
C......Reset the intersections counter
	ISECT=0
C......Set the processing switch to normal
	IPROC=1
C......Set vertex indicator to first node
	IVERT=1
C......Find an intial point where the x coord is not zero
	IPTR=0
10	IPTR=IPTR+1
	NODE=LIST(IPTR)
	IXT=IXY(1,NODE)-IX
	IYT=IXY(2,NODE)-IY
	IF(IXT.NE.0)GOTO 20
	IF(NODES.GT.IPTR)GOTO 10
C......Input error, all of the R values are on the R axis
	ICOND=-1
	GOTO 240
C......Examine each of the nodes/sides with reference to the test point
20	DO 210 I=1,NODES
	   IXI=IXT
	   IYI=IYT
	   ITERM=IPTR
	   IPTR=MOD(IPTR,NODES)+1
	   NODE=LIST(IPTR)
	   IXT=IXY(1,NODE)-IX
	   IYT=IXY(2,NODE)-IY
C......Branch to process the line segment on the basis of what the
C......previous situation was: IPROC = 1 normal processing, IPROC = 2
C......initial point on c axis
	   IF(IPROC.EQ.2)GOTO 110
C
C......Normal processing
C
C......Is the terminal point on the y axis
	   IF(IXT.NE.0)GOTO 40
C......Terminal point on y axis, save sign of x
	   ISIGNX=IXI
C......Are the terminal and test points coincident?
	   IF(IYT.NE.0)GOTO 30
C......Test point is on a vertex
	   ICOND=2
	   IVERT=IPTR
	   GOTO 240
C......Test and terminal points not coincidental, set sign switch for Y
30	   ISIGNY=IYI
	   IPROC=2
	   GO TO 210
C
C......Does the polygon side cross the Y axis
C
C......What is initial point X coord.
40	   IF(IXI.GT.0)GOTO 50
C......Initial point X coord. is neg, if terminal neg, pos Y not crossed
	   IF(IXT.GT.0)GOTO 60
	   GOTO 210
C......Initial point X coord. is pos, if terminal pos, pos Y not crossed
50	   IF(IXT.GT.0)GOTO 210
C......Points lie in different halves--left and right, where are they
C......in respect to the x axis
60	   IF(IYI) 80,100,70
C......Initial point y coord is pos, if terminal pos, pos y axis crossed
70	   IF(IYT.LT.0)GOTO 90
	   GOTO 200
C......Initial point y coord. is neg, if terminal neg, pos y not crossed
80	   IF(IYT.LE.0)GOTO 210
C......Initial and terminal points are in opposite quadrants, calculate
C......the intersection of the side with the y axis, 
90	   Y=SNGL(DFLOAT(IYI)-DFLOAT(IYT-IYI)*DFLOAT(IXI)/DFLOAT(IXT-IXI))
C......and the x axis
	   X=SNGL(DFLOAT(IXI)-DFLOAT(IXT-IXI)*DFLOAT(IYI)/DFLOAT(IYT-IYI))
C......Take the closest to zero of these two to indicate whether we are
C......on a side
	   IF(AMIN1(ABS(Y),ABS(X)).LT.EPS)GOTO 220
C......If y is pos, increment no. of intersections.
	   IF(Y.GT.0)GOTO 200
C......Deal with next point
	   GOTO 210
C......Initial point lies on x axis, where is terminal point
100	   IF(IYT) 210,220,200
C
C......Initial point known to be on y axis
C
110	   IPROC=1
C......Is this terminal point also on the y axis
	   IF(IXT)150,120,160
C......Both ends of the current line segment are on the y axis, decide
C......if any portion is coincident with the pos y, and if the test
C......point is on a vertex
120	   IF(IYT)140,130,180
C......Test point and a vertex are coincident
130	   ICOND=2
	   IVERT=IPTR
	   GO TO 240
C......Terminal point of this line segment is below x axis, if the
C......initial point was at or above it, the test point lies on a side
140	   IF(IYI.LT.0)GOTO 190
	   GOTO 220
C
C......Terminal point not on y axis
C
150	   IF(ISIGNX.GT.0)GOTO 170
	   GOTO 210
160	   IF(ISIGNX.GE.0)GOTO 210
170	   IF(IYI.GT.0)GOTO 200
	   GOTO 210
C
C......Terminal point of this line segment is above the y axis
C
C......If initial point was below it, the test point lies on a side
180	   IF(IYI.LE.0)GOTO 220
C......The current line segment is on the y axis, and above the x axis
C......continue special processing
190	   IPROC=2
	   GO TO 210
C......Increment intersection count
200	   ISECT=ISECT+1
210	CONTINUE
	GOTO 230
C......(IX,IC) lies on a side of the polygon
220	ICOND=3
	IVERT=ITERM
	GOTO 240
C......Determine whether the count of intersections of the y axis is
C......even (point outside - ICOND=0), or odd (point inside - ICOND=1)
230	ICOND=MOD(ISECT,2)
240	IF(IVERT.EQ.NODES)IVERT=1
	RETURN
	END

