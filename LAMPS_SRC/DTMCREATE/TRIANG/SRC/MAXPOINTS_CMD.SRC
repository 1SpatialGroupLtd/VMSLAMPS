C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-01-26 16:59:28.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION MAXPOINTS_CMD(LAX)
C
***	MODULE	MAXPOINTS_CMD
**	IDENT	23JL87
C
C	Copyright (C), Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Created						TJH 23-Jul-1987
C
C Function to set max. points from the values supplied using MAXPOINTS
C command. If argument is missing the user is prompted.
C
C Function returns .TRUE. if all is well.
C
	IMPLICIT NONE
C
C Argument:
	INTEGER	        LAX 	! The of data points that can be held 
C
C Parameters:
	INCLUDE	'LSL$DTMCREATESYS:MESPAR.PAR'
C
C Common:
	INCLUDE	'LSL$CMNLSL:CMDCOM.CMN'
	INCLUDE	'LSL$CMNTRIANG:CONTRL.CMN'
	INCLUDE	'LSL$CMNTRIANG:FINDIT.CMN'
C
C Function:
	LOGICAL		LONGIN	! reads integers from terminal
C
C ......................................................................
C
	MAXPOINTS_CMD=.TRUE.				! assume success
C
	IF (FIXMPT) THEN
	   CALL WRITEF
     &    ('%S You can''t change MAXPOINTS now as workspace',WARNING)
	   CALL WRITEF
     &    ('                  allocation has begun')
	   GOTO 10
	ENDIF

	IF (CMDICT.NE.1) THEN
	   IF (TTIN) THEN
	      CALL EXPAND(WARNING)
	   ELSE
	      CALL EXPAND(ERROR)
	   ENDIF	   
	   CALL WRTAPP('You must specify an integer argument'//
     &		' to the MAXPOINTS command')
	   CALL WRITEF('                For example MAXPOINTS 74000')
	   IF (TTIN) THEN
	      MAXPOINTS_CMD=LONGIN('Maximum expected number of points? ')
	      IF (.NOT.MAXPOINTS_CMD) GOTO 10
	   ELSE
	      MAXPOINTS_CMD=.FALSE.
	      GOTO 10
	   ENDIF	   
	ENDIF
C
	IF (INTARG(1).LE.0) THEN
	   IF (TTIN) THEN
	      CALL EXPAND(WARNING)
	   ELSE
	      CALL EXPAND(ERROR)
	   ENDIF	   
	      CALL WRTAPP('MAXPOINTS argument must be greater than 0')
	   GOTO 10
	ENDIF
C
	IF (INTARG(1).GT.LAX) THEN
	   CALL WRITEF
	   CALL WRITEF('%S Too many points. (Max. possible number ',
     &			ERROR)
	   CALL WRITEF('                without redimensioning = %^L%N)'
     &								,LAX)
	   CALL WRITEF('%S MAXPOINTS has not been set',WARNING)
	   CALL WRITEF(
     &	   '                  Do you need to have so many points?')
	   MAXPOINTS_CMD=.FALSE.
	   GOTO 10
	ELSE
	   MAXPTS=INTARG(1)
	ENDIF
C
C Write a warning if the shell size is likely to be close to the
C node/neighbour stack size.
	IF (INT(SQRT(FLOAT(MAXPTS)))*4.GT.NIX-ISTACK) THEN
	   CALL WRITEF
	   CALL WRITEF('%S Overrun of neighbour stack space may occur'
     &			,WARNING)
	   CALL WRITEF(
     &		'                  Do you need to have so many points?')
	ENDIF
10	RETURN
	END
