C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-12-21 15:41:16.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE WINDUP
C
***	MODULE	WINDUP
***	IDENT	02JA91
C
C	Copyright (C), Laser-Scan Laboratories Ltd., Cambridge, England
C
CMOD	Calls to WAIT changed to LSL_WAIT		TJH  21-Dec-1990
CMOD	Now writes projection data 			TJH  22-Dec-1988
CMOD	Converted for LSLLIB message formats		TJH  31-Jul-1987
CMOD	Messages output using TXTOUT			TJH  31-Jul-1986
CMOD	TPOLGY() added.					TJH  21-Mar-1986
CMOD	No. pts. in triangulation written at end 
C     	of .DTA file					TJH  11-Oct-1985
C
	INTEGER   	I,J	! temp vars.
	LOGICAL	  	OK	! function return
C
	INCLUDE 'LSL$CMNTRIANG:TRIANGMSG.PAR'
	INCLUDE 'LSL$DTMCREATESYS:MESSAGE.CMN'
	INCLUDE 'LSL$CMNTRIANG:CONTRL.CMN'
	INCLUDE 'LSL$CMNTRIANG:DATQ.CMN'
	INCLUDE 'LSL$CMNTRIANG:DIMS.PAR'
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'
	INCLUDE 'LSL$DTMCREATESYS:IOLUNS.CMN'
	INCLUDE 'LSL$CMNTRIANG:RCONVI.CMN'
	INCLUDE 'LSL$CMNTRIANG:TPOLGY.CMN'
	INCLUDE 'LSL$DTMCREATESYS:GRAFCS.CMN'
	INCLUDE 'LSL$DTMCREATESYS:GRAFDEV.CMN'
	INCLUDE '($SSDEF)'
C
	INTEGER	  NTEM(NAYMAX)
C
C function:
	LOGICAL	  WRTUNF	! efficient Fortran unformatted write
C
	INTEGER		LONGWD(37500)		! for efficient writes
	EQUIVALENCE    (TPOLGY(1),LONGWD(1))
C
C  ................................................................
C
C Rewing the node/neighbour file that we used for transfer from 
C the triangulation phase. We may as well use it now for output
C of the now constrained node neighbours.
	REWIND LGC3
C
C Now we can output the data file and the node neighbour file.
C Write header record containing sizes and scaling etc. Also set 
C shell marker in the header to zero, so that later programs know
C that the order is not shell order.
	ISHELL=0
	IF (DIAG) THEN
	   IF (GRAPHICS.AND.(.NOT.GPX)) THEN
	      CALL EXPAND('Writing to .DTA and .NOD files')
	      CALL TXTOUT(.TRUE.)
	      CALL LSL_WAIT(2,2)		! wait for 2 seconds
	   ELSE
	      CALL FRAMED_MES(9,0)
	   ENDIF
	ENDIF
	WRITE(LGC2)LIMPOL,NP,NPMAX,NBI,NBJ,MX2,MY2,MXI,MYI,ISHELL,
     &             (VMIN(I),VMAX(I),VSCAL(I),OFFSET(I),I=1,3)
C
C Write out the data set, and the next point in box marker
	OK=WRTUNF(LGC2,MAC,5*NP)
	IF (.NOT.OK) GOTO 20
C
C Write out the first point in box information
	NBOX=NBI*NBJ
	OK=WRTUNF(LGC2,IN,NBOX)
	IF (.NOT.OK) GOTO 20
C
C And finally the number of points in the triangulation, pre-PANDEMON.
C (REDPTS will be updated by PANDEMON thus preventing identification
C of those points that were added post-triangulation).
	WRITE (LGC2) NP
C
C Write the feature code byte array TPOLGY()
	NLONG=NP/4
	IF (MOD(NP,4).NE.0) NLONG=NLONG+1
	OK=WRTUNF(LGC2,LONGWD,NLONG)
	IF (.NOT.OK) GOTO 20
C
C If projection information write it out
	OK=WRTUNF(LGC2,PROJAR,PROJAR_LEN/2)
	IF (.NOT.OK) GOTO 20
C
C Now do the node/neighbour file. This is a change from a TRIANG 
C without constraint output file in that the neighbour list is given 
C in point order, not shell order. This should not affect the running of
C PANDORA and similar programs as they only work on the data set
C a polygon/node at a time, and make no assumptions about order.
C
	IF (GRAPHICS) CALL LSL_WAIT(2,2)		! wait for 2 seconds
C
C Clear the output buffer
	CALL WRTNOD(I,1,-1)
C
C Go through for each node
	IF (DIAG) CALL PERCENT('of output complete',0,NP,10,-1)
	DO 10 I=1,NP
	   IF (DIAG) CALL PERCENT('of output complete',I,NP,10,0)
C
C Collect the node's neighbours from memory/disk file
	   CALL GETNAY(I,NTEM,NAYMAX,NUM)
C
C Write the record out to the buffered output
	   CALL WRTNOD(I,1,1)
	   CALL WRTNOD(NUM,1,1)
	   CALL WRTNOD(NTEM,NUM,1)
10	CONTINUE
	IF (DIAG) CALL PERCENT('of output complete',I,NP,10,1)
	CALL EXPAND
     &	('There are %N points in the constrained triangulation',NP)
	IF (GRAPHICS) THEN
	   CALL TXTOUT(.TRUE.)
	   CALL LSL_WAIT(2,2)		! wait for 2 seconds
	   CALL ERASE			! delete text before
	ELSE
	   CALL TXTOUT(.FALSE.)
	ENDIF				! alpha plane overwrites it
	CALL WRTNOD(I,1,0)		! empty the node buffer
	OPNNOD=.FALSE.			! flag file is closed
	GOTO 30			! return
C
C ......................................................................
C
20	CALL EXPAND(' ')
	CALL TXTOUT(.TRUE.)
	CALL LSL_GETMSG(TRIANG__WRTDTA,MESSAGE,MESLEN)
	CALL EXPAND('%'//MESSAGE(:MESLEN))
	CALL TXTOUT(.TRUE.)
C
C Get secondary RMS/FORTRAN error
	CALL LSL_GETMSG(OK,MESSAGE,MESLEN)	! what went wrong
	I=MESLEN
	MESLEN=INDEX(MESSAGE,'!') - 1		! (ignore any FAO stuff)
	IF (MESLEN.LT.0) MESLEN=I
	CALL ALARMS(MESSAGE(:MESLEN))		! close down & exit
30	RETURN
	END
