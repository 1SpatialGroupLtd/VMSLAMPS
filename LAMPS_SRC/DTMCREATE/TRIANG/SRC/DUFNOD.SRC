C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-01-26 14:08:12.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE DUFNOD
C
***	MODULE	DUFNOD
***	IDENT	04MR87
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
CMOD	MJM'S Panzer Mark 263/9367.9A (Para. 67.4 (d))	MJM 04-Mar-1987
C	Author						MJM 18-Feb-1987
C
C
C Garbage collect by removing all duff points from the data set
C that remain after vertex replacement activities earlier on by
C PATCHP.
C
C Parameters:
	INCLUDE 'LSL$CMNTRIANG:DIMS.PAR'
C
C Common:
	INCLUDE 'LSL$CMNTRIANG:CONTRL.CMN'
	INCLUDE 'LSL$CMNTRIANG:DATQ.CMN'
	INCLUDE 'LSL$DTMCREATESYS:GRAFCS.CMN'
	INCLUDE 'LSL$DTMCREATESYS:GRAFDEV.CMN'
	INCLUDE 'LSL$CMNTRIANG:RCONVI.CMN'
	INCLUDE 'LSL$CMNTRIANG:TPOLGY.CMN'
C
	BYTE	TPOL		! feature code byte
C
	DIMENSION NTEM(NAYMAX)
C
C********************** DEVELOP NEW NODE LIST *************************
C
C get a list of new point numbers for old points (in INWNPT).
	NEWNP=0
	JSIGN=ISIGN(1,MAC(4,1))
	LSIGN=JSIGN
	DO 10 I=1,NP
C mark duff point
	   IF (IABS(MAC(5,I)).EQ.1) THEN
	      J=-1
	      LSIGN=0
	   ELSE
	      NEWNP=NEWNP+1
	      J=NEWNP
	      K=ISIGN(1,MAC(4,I))
	      IF (LSIGN.NE.K) JSIGN=-JSIGN
	      LSIGN=K
	      MAC(4,I)=IABS(MAC(4,I))*JSIGN
	   ENDIF
C record new node number for old node position
	   INWNPT(I)=J
10	CONTINUE
C check for any duff points, and return if none found
	IF (NEWNP.EQ.NP) GOTO 90		! return
C
C******************** MODIFY FIRST POINT IN BOX LIST *******************
C
C take care of the first point in box index stored in array IN.
	NBOX=NBI*NBJ
	DO 50 I=1,NBOX
C pick up first point in box number, and check for duffness
	   J=IN(I)
	   IF (J.GT.0) THEN
20	      IF(INWNPT(J).EQ.-1) THEN
C this is a duff node. so we need to loop through the index to
C points in boxes chain (MAC(4,*)) and find the first non-duff node
C in the box to substitute for this present duff one.
	         J=IABS(MAC(4,J))
C check that this one is not marking last point in box (set to
C NPMAX).
	         IF (J.NE.NPMAX) GOTO 20
C end of chain - no first point in box found - it must be empty
C so set it to zero to indicate this fact.
	         J=0
	         K=0
	      ENDIF
C convert the first point in box node (J) to its new node number
	      IF(J.NE.0)K=INWNPT(J)
	      IN(I)=K
	   ENDIF
C move the next point in box pointer similarly, modifying its node
C pointer on the way, and checking for it being a duff node.
	   IF (J.NE.0) THEN
30	      JJ=J
	      J=IABS(MAC(4,J))
	      K=INWNPT(J)
	      L=ISIGN(1,MAC(4,JJ))
40	      IF (J.NE.NPMAX) THEN
	         IF (K.EQ.-1) THEN
C it is duff, so get the next one until a non-duff value is found
	            J=IABS(MAC(4,J))
	            K=INWNPT(J)
	            GOTO 40
	         ENDIF
	         MAC(4,JJ)=K*L
	         GOTO 30
	      ELSE
	         MAC(4,JJ)=NPMAX*L
	      ENDIF
	   ENDIF
50	CONTINUE
C
C************************* COMPRESS POINT LIST *************************
C
C now go through the nodes and node lists changing all the entries
C as necessary, and returning nodes to the point list.
C
	DO 80 NODE=1,NP
C check node for being duff (dont do it if it is!)
	   IF(INWNPT(NODE).NE.-1) THEN
C get neighbour list for node. this has no duff nodes in it but
C will need alteration to allow the gaps for duff nodes in the
C data list to be removed.
	      CALL GETNAY(NODE,NTEM,NAYMAX,NUMBER)
C alter any nodes that are above the duff node values, using the
C number of duff nodes before the node in question as the reduction
C factor (all done in setoff).
	      DO 60 I=1,NUMBER
	         J=NTEM(I)
	         NTEM(I)=INWNPT(J)
60	      CONTINUE
C save the newly modified neighbour list back into the file
C structure as the links for the new node (NEWN)
	      NEWN=INWNPT(NODE)
	      CALL PUTNAY(NEWN,NTEM,NAYMAX,NUMBER)
C move the data for node to its new location
	      DO 70 I=1,3
	         KLIFFN(NEWN)=KLIFFN(NODE)
	         TPOLGY(NEWN)=TPOLGY(NODE)
	         MAC(I,NEWN)=MAC(I,NODE)
70	      CONTINUE
C store the new next point in box node number
	      MAC(4,NEWN)=MAC(4,NODE)
	   ENDIF
C update the bar anti-kick device, and deal with the next point
80	CONTINUE
C replace the old NP by the new NP
	NP=NEWNP
C that's all
90	RETURN
	END
