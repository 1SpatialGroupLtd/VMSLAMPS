C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-01-26 14:07:44.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE DISPLBTMP(NOR_MSG,NONE_MSG,BMAX,BITMAP)
C
***	MODULE	DISPLBTMP
***	IDENT	08JL86
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Modified for TRIANG				TJH 30-Jul-1987
C	Created	for LITES2				RWR  5-Nov-1984
C	Adapted for FPP					RWR  3-Jun-1986
C
C Description
C
C	This subroutine displays which bits of a bitmap are set.
C	It outputs NOR_MSG followed by a list of integers or ranges
C	of integers indicating the bits that are set.  If no bits are
C	set then NONE_MSG is output.
C
	IMPLICIT NONE
C
C Arguments
C
C ----- input
C
	CHARACTER*(*)	NOR_MSG		! message to be output as 
	! header
	CHARACTER*(*)	NONE_MSG	! message to be output if
	! no bits set
	INTEGER*4	BMAX		! size of bitmap in longwords
C
	INTEGER*4	BITMAP(BMAX)
	! bitmap
C
C Common Blocks
C
	INCLUDE 'HERE:BTMAPDIS.CMN'	! global variables for this
	! subroutine
C
C Functions called
C
	INTEGER*4	EXPAND
C
C Local Variables
C
	INTEGER*4	WORD		! counter
C
C Initialise common BTMAPDIS
C
	OUTADD=%LOC(OUTBUF)		! set up fake descriptor
	OUTLIM=80
C
	STARTD=.FALSE.
	INRANGE=.FALSE.
	FIRST=-1
	SECOND=-2
	TOPBITMP=BMAX*32-1
	TOPWORD=BMAX
C
C Examine words of bitmap in turn. If state changes look more closely
C at the word involved  
C
	DO 10, WORD=1,TOPWORD
	   IF ((INRANGE.AND.BITMAP(WORD).NE.-1).OR.
     &	       (.NOT.INRANGE.AND.BITMAP(WORD).NE.0)) THEN
	      CALL INWORD(BITMAP(WORD),WORD,NOR_MSG)
	   ENDIF
10	CONTINUE
C
C Flush out buffer, if there has been any output
C
	IF (STARTD) THEN
	   IF (INRANGE.AND.SECOND.LT.FIRST) SECOND=TOPBITMP
	   IF (FIRST.EQ.SECOND) THEN	! output number
	      OUTPTR=OUTPTR+EXPAND('%W%^L%N',OUTBUF(OUTPTR+1),FIRST)
	   ELSE				! output range
	      OUTPTR=OUTPTR+EXPAND('%W%^L%N-%N',OUTBUF(OUTPTR+1),
     &				FIRST,SECOND)
	   ENDIF
	   CALL WRITEF('%S',OUTDSC)
	ELSE
	   CALL WRITEF(NONE_MSG)		! no output
	ENDIF
C
C Return
C
	RETURN
	END
