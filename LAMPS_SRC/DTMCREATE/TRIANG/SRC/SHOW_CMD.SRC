C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-02-03 18:27:18.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION SHOW_CMD(LAX)
C
***	MODULE	SHOW_CMD
***	IDENT	23DE88
C
C	Copyright (C), Laser-Scan Laboratories Ltd., Cambridge, England
C
CMOD	ENABLE,UNITS,INVERSE and DATUM commands added	TJH 23-Dec-1988
C	Created						TJH 23-Jul-1987
C
C Function to show command status eg SHOW GRAPHICS. 
C
C Function returns .TRUE. if all is well, .FALSE. if an error
C
	IMPLICIT NONE
C
C Argument
	INTEGER   LAX 		! The of data points that can be held 
C				  is reduced from NPMAX to LAX by
C 				  the number of imaginary frame points
C				  that are included - one
C				  in every box around the periphery
C
C W/s
	BYTE		CH	! for use with RDCHS
	INTEGER		CMD     ! decoded command number
	INTEGER		I
C
C Function:
	INTEGER		RDCOMM
C
C Parameters:
	INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'

C Common blocks:
	INCLUDE 'LSL$CMNTRIANG:CONTRL.CMN'
	INCLUDE 'LSL$CMNTRIANG:SELECTIONS.CMN'
	INCLUDE 'LSL$CMNTRIANG:INFILES.CMN'
	INCLUDE 'LSL$CMNTRIANG:FINDIT.CMN'
	INCLUDE 'LSL$CMNTRIANG:STACKA.CMN'
	INCLUDE 'LSL$CMNTRIANG:STORAG.CMN'
	INCLUDE 'LSL$CMNTRIANG:ZONVAR.CMN'
	INCLUDE 'LSL$DTMCREATESYS:GRAFCS.CMN'
	INCLUDE 'LSL$CMNLSL:FILENAME.CMN'
C
C Command table:
	EXTERNAL	SHOW_CMD_TABLE
	INTEGER		SHOW_CMD_TABLE
C
	INTEGER		SIGCHS
C
C ......................................................................
C
	SHOW_CMD=.TRUE.			! assume success
C
	CMD=RDCOMM(SHOW_CMD_TABLE)	! get command
	CMD=CMD+1
	GOTO (
     &		10,			! error/nothing	1
     &		130,			! DATUM		2
     &		20,			! SELECTIONS	3
     &		60,			! BREAKLINES	4
     &		70,			! CLIFFLINES	5
     &		80,			! RIDGELINES	6
     &		90,			! RIVERS	7
     &		30,			! LAYER		8
     &		40,			! FC		9
     &		100,			! FORMAT	10
     &		110,			! FRT		11
     &		120,			! HEIGHTS	12
     &		150,			! MAXPOINTS	13
     &		160,			! WINDOW	14
     &		170,			! ZLIMITS	15
     &		50,			! ASSIGNMENTS	16
     &		180,			! UNITS		17
     &		190,			! ENABLE	18
     &		200			! FILES		19
     &			), CMD
C
C Command number out of range
	CALL WRITEF('Command not yet implemented')
	SHOW_CMD=.FALSE.
	GOTO 220
C
C ......................................................................
C Error
10	CALL WRITEF(ERROR//'Specifying command SHOW')
	CALL WRITEF
	CALL WRITEF('Available SHOW command qualifiers are:')
	CALL WRITEF
	CALL WRITEF(
     &	'ASSIGNMENTS      BREAKLINES      CLIFFLINES     DATUM      '//
     &			'ENABLE    FC')
	CALL WRITEF
	CALL WRITEF('FILES            FORMAT          FRT            '//
     &			'HEIGHTS    LAYER')
     	CALL WRITEF
	CALL WRITEF(
     &	'MAXPOINTS        RIDGELINES      RIVERS          SELECTIONS')
	CALL WRITEF
	CALL WRITEF('UNITS      	 WINDOW          ZLIMITS')
	CALL WRITEF
	SHOW_CMD=.FALSE.
	GOTO 220
C
C ......................................................................
C SHOW SELECTIONS
C
20	CALL WRITEF
C
C ......................................................................
C SHOW LAYERS
C
	CALL WRITEF('LAYERS:')
30	CALL DISPLBTMP(
     &		'Layers selected for input:',
     &		'All layers deselected',
     &		 BMAX,
     &		 USEOV)
C	
	IF (CMD.EQ.8) GOTO 220
	CALL WRITEF
C
C ......................................................................
C SHOW FC
C
	CALL WRITEF('FCs:')
40	CALL DISPLBTMP(
     &		'Feature codes selected for input:',
     &		'All feature codes deselected',
     &		 BMAX,
     &		 USEFC)
C
	GOTO 220
C
C ......................................................................
C SHOW ASSIGNMENTS
50	CALL WRITEF
C
C ......................................................................
C SHOW BREAKLINES
C
	CALL WRITEF('BREAKLINES:')
60	CALL DISPLBTMP(
     &		'Layers assigned for breaklines:',
     &		'No layers assigned for breaklines',
     &		 BMAX,
     &		 BREKOV)
	CALL DISPLBTMP(
     &		'Feature codes assigned for breaklines:',
     &		'No feature codes assigned for breaklines',
     &		 BMAX,
     &		 BREKFC)
	IF (CMD.EQ.4) GOTO 220
	CALL WRITEF
C
C ......................................................................
C SHOW CLIFFLINES
C
	CALL WRITEF('CLIFFLINES:')
70	CALL DISPLBTMP(
     &		'Layers assigned for cliffs:',
     &		'No layers assigned for cliffs',
     &		 BMAX,
     &		 OVCLC)
	CALL DISPLBTMP(
     &		'Feature codes assigned for cliffs:',
     &		'No feature codes assigned for cliffs',
     &		 BMAX,
     &		 FCCLC)
	IF (CMD.EQ.5) GOTO 220
	CALL WRITEF
C
C ......................................................................
C SHOW RIDGELINES
C
	CALL WRITEF('RIDGELINES:')
80	CALL DISPLBTMP(
     &		'Layers assigned for ridgelines:',
     &		'No layers assigned for ridgelines',
     &		 BMAX,
     &		 OVRID)
	CALL DISPLBTMP(
     &		'Feature codes assigned for ridgelines:',
     &		'No feature codes assigned for ridgelines',
     &		 BMAX,
     &		 FCRID)
	IF (CMD.EQ.6) GOTO 220
	CALL WRITEF
C
C ......................................................................
C SHOW RIVERS
C
	CALL WRITEF('RIVERS:')
90	CALL DISPLBTMP(
     &		'Layers assigned for rivers:',
     &		'No layers assigned for rivers',
     &		 BMAX,
     &		 OVRIV)
	CALL DISPLBTMP(
     &		'Feature codes assigned for rivers:',
     &		'No feature codes assigned for rivers',
     &		 BMAX,
     &		 FCRIV)
	GOTO 220
C
C ......................................................................
C SHOW FORMAT
C
100	IF (IFFILE) THEN
	   CALL WRITEF
     &     ('Input expected from IFF file')
	ELSE
	   CALL WRITEF
     &     ('Input expected from DTI file')
	ENDIF
	GOTO 220
C
C ......................................................................
C SHOW FRT
C
110	IF (HADFRT) THEN
	   CALL WRITEF('FRT file is %S',FRTNAM(:FRTLEN))
	ELSE
	   CALL WRITEF('No FRT file selected')
	ENDIF
	GOTO 220
C
C ......................................................................
C SHOW HEIGHTS
C
120	IF (AC2HT) THEN
	   CALL WRITEF
     &		('Incoming heights expected in IFF type 2 AC entries')
	ELSE
	   CALL WRITEF
     &		('Incoming heights expected in IFF type 3 AC entries')
	ENDIF
	IF (MFACTR.EQ.1.0) THEN 
	   CALL WRITEF('MULTIPLYBY and DIVIDEBY are disabled.')
C
	ELSE
	   IF (DIVIDE) CALL WRITEF
     &      ('Incoming heights to be divided by %F8.3 ',1./MFACTR)
	   IF (MULT) CALL WRITEF
     &      ('Incoming heights to be multiplied by %F8.3 ',MFACTR)
	ENDIF	
	IF (M2FEET) THEN 
	   CALL WRITEF
     &	  ('Incoming heights to be converted to feet')
	ELSEIF (FEET2M) THEN
	   CALL WRITEF
     &	  ('Incoming heights to be converted to metres')
	ELSE
	   CALL WRITEF
     &    ('No imperial or metric conversion to be applied to '//
     &	  'incoming heights')
	ENDIF
C
130	CALL WRITEF(
     &	'Height datum %F to be added to all incoming heights',DATUM)
	IF (CMD.EQ.2) GOTO 220
140	IF (INVERSE) THEN
	   CALL WRITEF('All incoming heights are to be inverted')
	ELSE
	   CALL WRITEF('No inversion to be applied to incoming heights')
	ENDIF
	GOTO 220
C
C ......................................................................
C SHOW MAXPOINTS
C
150	CALL WRITEF
     &	('Estimated number of incoming points = %N '
     &                                                    ,MAXPTS)
	CALL WRITEF
     &	('(Max possible number without redimensioning = %N)'
     &                                                   ,LAX)
	GOTO 220
C
C ......................................................................
C SHOW WINDOW
C
160	CALL SHOW_WINDOW(VMIN(1),VMAX(1),VMIN(2),VMAX(2),UNITS,GEOEXT)
	GOTO 220
C
C ......................................................................
C SHOW ZLIMITS 
C
170	IF (HADZ) THEN
	   CALL WRITEF('Zmin = %F8.3  zmax = %F8.3',VMIN(3),VMAX(3))
	ELSE
	   CALL WRITEF('Z-limits currently undefined')
	ENDIF
	GOTO 220
C
C ......................................................................
C SHOW UNITS
C
180	CALL EXPAND('Window to be specified in ')
	IF (UNITS.EQ.2) THEN
	   CALL WRTAPP('metres')
	ELSEIF (UNITS.EQ.3) THEN
	   CALL WRTAPP('seconds of arc')
	ELSEIF (UNITS.EQ.4) THEN
	   CALL WRTAPP('latlong (degrees, minutes and seconds)')
	ELSEIF (UNITS.EQ.5) THEN
	   CALL WRTAPP('projection units')
	ENDIF
	GOTO 220
C
C ......................................................................
C ENABLE
190	CALL EXPAND('CONSTRAINT ..................'//
     &			'................................. ')
	IF (CONSTR) THEN
	   CALL WRTAPP('On')
	ELSE
	   CALL WRTAPP('Off')
	ENDIF
	CALL EXPAND('DIAGNOSTICS .................'//
     &			'................................. ')
	IF (DIAG) THEN
	   CALL WRTAPP('On')
	ELSE
	   CALL WRTAPP('Off')
	ENDIF
	CALL EXPAND
     &      ('DIVIDEBY ...................'//
     &			'..................................')
	IF (DIVIDE) THEN
	   CALL WRTAPP(' On')
	   CALL WRITEF('Incoming heights to be divided by '//
     &			'...........................%F8.3 ',1./MFACTR)
	ELSE
	   CALL WRTAPP(' Off')
	ENDIF
	CALL EXPAND('GRAPHICS ....................'//
     &			'................................. ')
	IF (GRAPHICS) THEN
	   CALL WRTAPP('On')
	ELSE
	   CALL WRTAPP('Off')
	ENDIF
	CALL EXPAND
     &      ('INTEGER_HEIGHT .............'//
     &			'.................................. ')
	IF (AC2HT) THEN
	   CALL WRTAPP ('On')
	   CALL WRITEF
     &	   ('(Incoming IFF heights expected in type 2 AC entries)')
	ELSE
	   CALL WRTAPP ('Off')
	   CALL WRITEF
     &	   ('(Incoming IFF heights expected in type 3 AC entries)')
	ENDIF
	CALL EXPAND('INVERSE .....................'//
     &			'................................. ')
	IF (INVERSE) THEN
	   CALL WRTAPP('On')
	ELSE
	   CALL WRTAPP('Off')
	ENDIF
	CALL EXPAND
     &      ('MULTIPLY ..................'//
     &			'.................................. ')
	IF (MULT) THEN
	   CALL WRTAPP('On')
	   CALL WRITEF('Incoming heights to be multiplied by '//
     &			'........................%F8.3 ',MFACTR)
	ELSE
	   CALL WRTAPP(' Off')
	ENDIF
	CALL EXPAND
     &      ('PME ........................'//
     &			'.................................. ')
	IF (PMEING) THEN
	   CALL WRTAPP('On')
	ELSE
	   CALL WRTAPP('Off')
	ENDIF
	CALL EXPAND('SQUARE ......................'//
     &			'................................. ')
	IF (CPSQUR) THEN
	   CALL WRTAPP('On')
	ELSE
	   CALL WRTAPP('Off')
	ENDIF
	CALL EXPAND
     &      ('TOFEET .....................'//
     &			'.................................. ')
	IF (M2FEET) THEN
	   CALL WRTAPP('On')
	ELSE
	   CALL WRTAPP('Off')
	ENDIF
	CALL EXPAND
     &      ('TOMETRES ...................'//
     &			'.................................. ')
	IF (FEET2M) THEN
	   CALL WRTAPP('On')
	ELSE
	   CALL WRTAPP('Off')
	ENDIF
	GOTO 220

C
C ......................................................................
C
200	CALL WRITEF ('INPUT:')
	IF (NUM_INFILES.EQ.0) THEN
	   CALL WRITEF('No input files sucessfully read yet.')
	ELSE
	   DO 210 I=1,NUM_INFILES
	   CALL WRITEF('Input file #%N:  %S',I,
     &			INFILES(I)(1:SIGCHS(INFILES(I))))
210	   CONTINUE
	ENDIF
	CALL WRITEF
	CALL WRITEF('OUTPUT:')
	IF (.NOT.OPNDTA) THEN	
	   CALL WRITEF('Output filename not yet specified.')
	ELSE
	   CALL PUTFLN(OUTNAM,OUTLEN)
	   STR_EXT='NOD'
	   LEN_EXT=3
	   CALL EXPFLN(OUTNAM,OUTLEN)
	   CALL WRITEF('.NOD file:  %S',OUTNAM(1:SIGCHS(OUTNAM)))
	   STR_EXT='DTA'
	   LEN_EXT=3
	   CALL EXPFLN(OUTNAM,OUTLEN)
	   CALL WRITEF('.DTA file:  %S',OUTNAM(1:SIGCHS(OUTNAM)))
	ENDIF
220	RETURN
	END
