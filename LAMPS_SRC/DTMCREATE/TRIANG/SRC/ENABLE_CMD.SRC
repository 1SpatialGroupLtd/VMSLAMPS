C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1999-08-23 15:48:36.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION ENABLE_CMD()
C
***	MODULE	ENABLE_CMD
***	IDENT	23AU99
C
C	Copyright (C), Laser-Scan Laboratories Ltd., Cambridge, England
C
CMOD	New INVERSE command				TJH 21-Dec-1988
C	Created						TJH 23-Jul-1987
C
C Function to set command switches 'on' eg ENABLE GRAPHICS. This
C replaces the grotty CMDLIB + or - mechanism and must be used in
C conjunction with function DISABLE for turning switches off again. 
C
C Function returns .TRUE. if all is well, .FALSE. if an error
C
	IMPLICIT NONE
C
C W/s
	BYTE		CH	! for use with RDCHS
	INTEGER		CMD     ! decoded command number
C
C Parameters:
	INCLUDE		'LSL$DTMCREATESYS:MESPAR.PAR'
C
C Common blocks:
	INCLUDE 'LSL$CMNTRIANG:CONTRL.CMN'
	INCLUDE 'LSL$CMNLSL:CMDCOM.CMN'
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'
	INCLUDE 'LSL$DTMCREATESYS:GRAFCS.CMN'
	INCLUDE 'LSL$DTMCREATESYS:GRAFDEV.CMN'
	INCLUDE 'LSL$CMNLSL:STATUS.CMN'
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'
C
C Functions:
	LOGICAL 	LONGIN	! get integer argument
	LOGICAL  	RDCHS	! read character from line
	LOGICAL  	RDCH	! read character from line
	LOGICAL 	RDCOMM  ! read command from line
	LOGICAL 	REALIN  ! get real argument
	LOGICAL		IS_ALPHA_AXP
C
C Command table:
	EXTERNAL	ENABLE_CMD_TABLE
	INTEGER		ENABLE_CMD_TABLE
C
C ......................................................................
C
	ENABLE_CMD=.TRUE.			! assume success
C
	CMD=RDCOMM(ENABLE_CMD_TABLE)	! get command
	GOTO (
     &		10,	! error/nothing
     &		20,	! constraint
     &		30,	! diagnostics
     &		40,	! divideby
     &		50,	! graphics
     &		60,	! integer_height
     &		70,	! inverse
     &		80,	! multiplyby
     &		90,	! pme
     &		100,	! square
     &		110,	! tofeet
     &		120	! tometres
     &			), CMD+1
C
C
C command number out of range
	CALL WRITEF('Command not yet implemented')
	ENABLE_CMD=.FALSE.
	GOTO 130
C
C ......................................................................
C Error
10	CALL WRITEF(ERROR//'Specifying command ENABLE')
	CALL WRITEF
	CALL WRITEF('Available ENABLE command qualifiers are:')
	CALL WRITEF
	CALL WRITEF(
     &		'CONSTRAINT        DIAGNOSTICS    DIVIDEBY     '//
     &			'GRAPHICS   INTEGER_HEIGHT')
	CALL WRITEF
	CALL WRITEF(
     &		'INVERSE           MULTIPLYBY     PME          '//
     &			'SQUARE     TOFEET')
	CALL WRITEF
	CALL WRITEF('TOMETRES')
	CALL WRITEF
	ENABLE_CMD=.FALSE.
	GOTO 130
C
C ......................................................................
C ENABLE CONSTRAINT
C
20	CONSTR=.TRUE.
	GOTO 130
C
C ......................................................................
C ENABLE DIAGNOSTICS
30	DIAG=.TRUE.
	GOTO 130
C
C ......................................................................
C ENABLE DIVIDEBY 'real'
C
40	IF (MULT) THEN
	   CALL WRITEF
	   CALL WRITEF
     &	   ('%S You are already planning to multiply by %F8.3',
     &		WARNING				    ,MFACTR)
	   CALL WRITEF
     &     ('ENABLE DIVIDEBY command now overrides '//
     &	  			  'ENABLE MULTIPLYBY command')
	   MULT=.FALSE.
	ENDIF
	IF (CMDRCT.EQ.0) THEN
	   IF (TTIN) THEN
	      CALL EXPAND(WARNING)
	   ELSE
	      CALL EXPAND(ERROR)
	   ENDIF	   
	   CALL WRTAPP('You must specify a value for DIVIDEBY')
	   CALL WRITEF('For example ENABLE DIVIDEBY 3.8')
	   IF (TTIN) THEN
	      ENABLE_CMD=REALIN('Divideby by what? ')
	      IF (.NOT.ENABLE_CMD) GOTO 130
	   ELSE
	      ENABLE_CMD=.FALSE.
	      GOTO 130
	   ENDIF	   
	ENDIF
	IF (REALAR(1).LE.0.0) THEN
	   IF (TTIN) THEN
	      CALL EXPAND(WARNING)
	   ELSE
	      CALL EXPAND(ERROR)
	   ENDIF	   
	      CALL WRTAPP(
     &		'ENABLE DIVIDEBY argument must be greater than 0.0')
	ELSE
	   DIVIDE=.TRUE.
	   MFACTR=1.0/REALAR(1)
	ENDIF
	GOTO 130
C
C ......................................................................
C ENABLE GRAPHICS
C
C Graphics options available are limited by the user's terminal.
50	CALL GRAFCK			! GRAPHICS returned via /GRAFCS/
	GOTO 130
C
C ......................................................................
C ENABLE INTEGER_HEIGHT
C
60	AC2HT=.TRUE.
	GOTO 130
C
C ......................................................................
C ENABLE INVERSE
C
70	INVERSE=.TRUE.
	GOTO 130
C
C ......................................................................
C ENABLE MULTIPLYBY 'real'
C
80	IF (DIVIDE) THEN
	   CALL WRITEF
	   CALL WRITEF('%S You are already planning to divide by %F8.3',
     &			WARNING				    ,1.0/MFACTR)
	   CALL WRITEF
     &     ('ENABLE MULTIPLYBY command now overrides '//
     &	  			  'ENABLE DIVIDEBY command')
	   DIVIDE=.FALSE.
	ENDIF
	IF (CMDRCT.EQ.0) THEN
	   IF (TTIN) THEN
	      CALL WRITEF('%S You must specify a value for MULTIPLYBY',
     &			WARNING)
	   ELSE
	      CALL WRITEF('%S You must specify a value for MULTIPLYBY',
     &			ERROR)
	   ENDIF	   
	   CALL WRITEF('For example ENABLE MULTIPLY 3.8')
	   IF (TTIN) THEN
	      ENABLE_CMD=REALIN('Multiply by what? ')
	      IF (.NOT.ENABLE_CMD) GOTO 130
	   ELSE
	      ENABLE_CMD=.FALSE.
	      GOTO 130
	   ENDIF	   
	ENDIF
C
	IF (REALAR(1).LE.0.0) THEN
	   IF (TTIN) THEN
	      CALL EXPAND(WARNING)
	   ELSE
	      CALL EXPAND(ERROR)
	   ENDIF	   
	   CALL WRTAPP(
     &		'ENABLE MULTIPLY argument must be greater than 0.0')
	ELSE
	   MULT=.TRUE.
	   MFACTR=REALAR(1)
	ENDIF
	GOTO 130
C
C ......................................................................
C ENABLE PME  - Performance monitor and evaluation
C
90	IF (PMEING) THEN
	   CALL WRITEF('%S You are already using PME !', WARNING)
	ELSE
	   IF (IS_ALPHA_AXP()) THEN
	      CALL WRITEF('%S PME is not available on Alpha/AXP', WARNING)
	   ELSE
	      CALL PME_INIT
	      PMEING=.TRUE.
	   ENDIF
	ENDIF
	GOTO 130
C
C ......................................................................
C ENABLE SQUARE
C
100	CPSQUR=.TRUE.
	GOTO 130
C
C ......................................................................
C ENABLE TOFEET
C
110	M2FEET=.TRUE.
	GOTO 130
C
C ......................................................................
C ENABLE TOMETRES
C
120	FEET2M=.TRUE.
C
130	RETURN
	END
