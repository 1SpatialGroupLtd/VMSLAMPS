C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-01-26 13:08:02.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION DTI_LIMITS(FINISHED,COLUMN)
C
***	MODULE	DTI_LIMITS
***	IDENT	23AU88
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Created 					TJH 28-Jul-1987
CMOD Make FIXMAX etc all absolute values for DTED file MWSR 20-Jun-1988
CMOD Parameter DTI_DTED replaced by parameter DTI_TED4  DRC 23-Aug-1988
C
C
C Put the start and stop col/row limits in /MATLIM/ for that portion of
C the DTI file that lies within the DTI WINDOW. 
C At this stage we can determine whether any of the DTI file data lies
C within the triangulation WINDOW. If not, FINISHED is set .TRUE.
C
C Function returns TRUE if succesful
C 
	IMPLICIT NONE
C
C Argument (return):
	LOGICAL	  FINISHED	! finished with file?
	INTEGER	  COLUMN	! start column
C
C Parameters
	INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'
	INCLUDE 'LSL$CMNDTI:DTIPAR.PAR'
C
C Common blocks
	INCLUDE 'LSL$CMNTRIANG:COORDS.CMN'
	INCLUDE 'LSL$CMNDTI:DTIHDR.CMN'
	INCLUDE 'LSL$CMNDTI:DTIPROJ.CMN'
	INCLUDE 'LSL$CMNTRIANG:CONTRL.CMN'
	INCLUDE 'LSL$CMNTRIANG:MATLIM.CMN'
	INCLUDE 'LSL$CMNTRIANG:STACKA.CMN'
C
C ......................................................................
C
	DTI_LIMITS=.TRUE.		! assume success
	FINISHED=.FALSE.
C
C Check that we have not been given a bit type DTI!
	IF (DATA_TYPE(INLUN).EQ.DATA_BIT) THEN
	   CALL WRITEF('%S DTI file is BIT data type - ignoring file'
     &			,WARNING)
	   FINISHED=.TRUE.
	   GOTO 20
	ELSEIF (DATA_TYPE(INLUN).EQ.DATA_BYTE) THEN
	   CALL WRITEF('%S DTI file is BYTE data type - ignoring file'
     &			,WARNING)
	   FINISHED=.TRUE.
	   GOTO 20
	ENDIF
C
C If DTED calculate the offset of col_1, row_1
	IF (HEADER_TYPE(INLUN).EQ.DTI_TED4) THEN
	   SIDEX=LONINT(INLUN)
	   X_OFFSET(INLUN)=(LONREC(1,INLUN)-LONORI(INLUN))/SIDEX
	   SIDEY=LATINT(INLUN)
	   Y_OFFSET(INLUN)=(LATREC(1,INLUN)-LATORI(INLUN))/SIDEY
	   FIXMIN = X_OFFSET(INLUN) + LONORI(INLUN)
	   FIXMAX = FIXMIN +FLOAT(X_EXTENT(INLUN)-1)*SIDEX
	   FIYMIN = Y_OFFSET(INLUN) + LATORI(INLUN)
	   FIYMAX = FIYMIN +FLOAT(Y_EXTENT(INLUN)-1)*SIDEY
	ELSEIF(HEADER_TYPE(INLUN)
     &			.EQ.DTI_LSLA.AND.HAD_PROJ_RECORD(INLUN)) THEN
	   SIDEX=DTIPROJ_SAMPLE(1,INLUN)
	   SIDEY=DTIPROJ_SAMPLE(2,INLUN)
	   X_OFFSET(INLUN)=DTIPROJ_ORIGIN(1,INLUN)
	   Y_OFFSET(INLUN)=DTIPROJ_ORIGIN(2,INLUN)
	   FIXMIN = X_OFFSET(INLUN)
	   FIYMIN = Y_OFFSET(INLUN)
	   FIXMAX = FIXMIN +FLOAT(X_EXTENT(INLUN)-1)*SIDEY
	   FIYMAX = FIYMIN +FLOAT(Y_EXTENT(INLUN)-1)*SIDEY
	ELSE
	   SIDEX=X_GRID(INLUN)
	   SIDEY=Y_GRID(INLUN)
	   FIXMIN=X_OFFSET(INLUN)
	   FIXMAX=FIXMIN + FLOAT(X_EXTENT(INLUN)-1)*SIDEX
	   FIYMIN=Y_OFFSET(INLUN)
	   FIYMAX=FIYMIN + FLOAT(Y_EXTENT(INLUN)-1)*SIDEY
	ENDIF
C
C Do a rapid test to see whether we have ANY posts within the DTI 
C file that lie within the area defined by EXTENT
	IF (FIXMAX.LT.VMIN(1)
     &		.OR.FIYMAX.LT.VMIN(2)
     &		.OR.FIXMIN.GT.VMAX(1)
     &		.OR.FIYMIN.GT.VMAX(2)) THEN
	   CALL WRITEF(
     &	    '%S No posts in DTI file lie within triangulation extent'
     &					,WARNING)
	   FINISHED=.TRUE.		! nothing more to read
	   GOTO 20		! report and return
	ENDIF
C
C Calculate the number of columns ...
	STARTC=1
	IF (VMIN(1).GT.FIXMIN) 
     &			STARTC=1+NINT((VMIN(1)-FIXMIN)/SIDEX)
	STOPC=X_EXTENT(INLUN)
	IF (VMAX(1).LT.FIXMAX)
     &	    	STOPC=X_EXTENT(INLUN)-ABS(NINT((VMAX(1)-FIXMAX)/SIDEX))
C
C ... and rows of the DTM which are bounded by the user defined EXTENT
	STARTR=1
	IF (VMIN(2).GT.FIYMIN) 
     &			STARTR=1+NINT((VMIN(2)-FIYMIN)/SIDEY)
	STOPR=Y_EXTENT(INLUN)
	IF (VMAX(2).LT.FIYMAX)
     &	    	STOPR=Y_EXTENT(INLUN)-ABS(NINT((VMAX(2)-FIYMAX)/SIDEY))
	COLUMN=STARTC-1
	IF (STOPR-STARTR.GT.TBUFMAX) THEN
	   CALL WRITEF(WARNING//
     &			'too many DTI rows for internal buffer.')
	   CALL WRITEF(
     &		'                 Only row %N to row %N will be used',
     &					STARTR,		STARTR+TBUFMAX)
	ENDIF
	GOTO 20
C
C ......................................................................
C
10	DTI_LIMITS=.FALSE.
20	RETURN
	END
