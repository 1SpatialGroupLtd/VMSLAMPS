	SUBROUTINE CLIFLN(IPNT,LPNT,LOOP,IERR)
C
***	MODULE	CLIFLN
***	IDENT	24OC89
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	Converted for LSLLIB message formats	TJH	31-Jul-1987
C Author	M.J.McCullagh				March-1986
C
C Insert a cliff line along the connected segments starting
C at IPNT and extending at maximum to LPNT. The Z value to use
C to the left of the cliff is MAC(3,*), and on the right of the
C cliff is KLIFFN(*). If LOOP is set (1) then attempt to extend
C the cliff line to include the link from LPNT to INPT. This
C option is particularly useful when a closed cliff line is
C required - such as a raised island coastline etc. If at any
C stage a break in the line is met, then the cliff tranformation
C stop, and IERR be set (1).
C
C Parameters:
	INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'
	INCLUDE 'LSL$CMNTRIANG:DIMS.PAR'
	INCLUDE 'LSL$CMNTRIANG:TRIANGMSG.PAR'
C
C Common:
	INCLUDE 'LSL$DTMCREATESYS:MESSAGE.CMN'
	INCLUDE 'LSL$CMNTRIANG:DATQ.CMN'
C
	BYTE	TPOL
	DATA TPOL/0/
	DIMENSION KTEM(NAYMAX),LTEM(NAYMAX)
C
C ......................................................................
C
C D E T E R M I N E   S T A R T   C H A R A C T E R I S T I C S 
C
C Unset the error flag
	IERR=0
C Get sign of last string so we can make string sequence correct
	LASTSN=ISIGN(1,MAC(4,NP))
C Set the present point, depending on whether we are dealing with
C a closed loop or not. Also set final cliff point (KEND).
	IF (LOOP.EQ.0) THEN
	   NOWP=IPNT+1
	   KEND=LPNT-1
	ELSE
	   NOWP=IPNT
	   KEND=LPNT
	ENDIF
C Remember node number equivalent to NOWP in the left side of
C cliff string.
	NPA=NP+1
	NPST=NPA
C Change string sign for the new string (left side of cliff).
	LASTSN=-LASTSN
C
C ......................................................................
C
C S E T   U P   N E W   C L I F F   C H A I N
C
C Create the new nodes to match the present string, and give
C them the same node-neighbour connections.
	DO 10 I=NOWP,KEND
	   IX=MAC(1,I)
	   IY=MAC(2,I)
	   IZ=MAC(3,I)
	   JZ=KLIFFN(I)
	   CALL ENTPOS(IX,IY,IZ,JZ,TPOL)
	   CALL GETNAY(I,KTEM,NAYMAX,NUM)
	   CALL PUTNAY(NP,KTEM,NAYMAX,NUM)
10	CONTINUE
C
C ......................................................................
C
C F O R   E V E R Y   N O D E   A L O N G   T H E   C L  I F F
C
C Check NOWP for having reached the end of the string (loop case)
C or next to end of string (no loop case)
20	IF (NOWP.LE.KEND) THEN
C The present point has been set, now get the point before (LAST)
C and the point after NOWP (NEXT). Similarly for left side string
C (NPL and NPN).
	   LAST=NOWP-1
	   NEXT=NOWP+1
	   NPL=NPA-1
	   NPN=NPA+1
C
C ......................................................................
C
C P R E V I O U S   N O D E S   O N   L E F T/R I G H T   O F  C L I F F
C
C Firstly get the previous point on string node number (LAST, NPL)
	   IF (NOWP.EQ.IPNT) THEN
C For the first point in the string (must be a loop)
	      LAST=LPNT
	      NPL=NP
	   ELSE
C For any other points on a string (loop or non loop)
	      LAST=NOWP-1
	      IF (NOWP.EQ.IPNT+1) THEN
C If second point on the string check for loop/non-loop
	         IF (LOOP.EQ.1) THEN
C Loop situation - take previous point
	            NPL=NPA-1
	         ELSE
C Non loop situation - take starting string point
	            NPL=IPNT
	         ENDIF
	      ELSE
C If later than second point can always choose the previous one
	         NPL=NPA-1
	      ENDIF
	   ENDIF
C
C ......................................................................
C
C   D E T E R M I N E   N E X T   N O D E S   O N   L E F T / R I G H T
C   O F   C L I F F
C
C Now get the next point on string node number (NEXT, NPN)
	   IF (NOWP.EQ.LPNT) THEN
C For the last point in the string (must be a loop)
	      NEXT=IPNT
	      NPN=NPST
	   ELSE
C For any other points on a string (loop or non loop)
	      NEXT=NOWP+1
	      IF (NOWP.EQ.LPNT-1) THEN
C If penultimate point on the string check for loop/non-loop
	         IF (LOOP.EQ.1) THEN
C Loop situation - take next point in string (last point)
	            NPN=NP
	         ELSE
C Non loop situation - take next point in original string (LPNT)
	            NPN=LPNT
	         ENDIF
	      ELSE
C If earlier than penultimate we can always choose the next one
	         NPN=NPA+1
	      ENDIF
	   ENDIF
C
C ......................................................................
C
C  G E T  L F T/R I G H T  S E P A R A T I O N  O F  N E I G H B O U R S
C  O F   P R E S E N T   C L I F F   P O I N T
C
C Get neighbours of NOWP
	   CALL GETNAY(NOWP,KTEM,NAYMAX,NUM)
C Check for a link back to LAST and forward to NEXT exists, and
C remember where these are.
	   CALL FINPOS(LAST,KTEM,NAYMAX,NUM,LPOS)
	   CALL FINPOS(NEXT,KTEM,NAYMAX,NUM,NPOS)
	   IF (LPOS.EQ.0.OR.NPOS.EQ.0) THEN
C String sequence has been interrupted by other data and cannot be
C continued. must therefore give up now, resetting number of points
C retained to the best possible situation.
	      IERR=1
	      NP=NPA-1
	      RETURN
	   ENDIF
C Insert right side cliff height
	   MAC(3,NOWP)=-KLIFFN(NOWP)
C Left side links are LAST to NEXT in clockwise order, and right
C side links are from NEXT to LAST. Allocate left links to a newly
C created node on the new string, and the right links to the old
C node. NB: the right side retains the LAST/NEXT connections with
C NOWP.
C
C ......................................................................
C
C   C R E A T E   L E F T   S I D E   O F   C L I F F   L I N K 
C   S T R U C T U R E
C
C Get the left side links.
	   CALL GTLINK(LPOS,NPOS,KTEM,NAYMAX,NUM,LTEM,KEM)
C Substitute the new LAST/NEXT links (NPL and NPN) - the list
C in LTEM always contains at least two nodes (LAST,NEXT).
	   LTEM(1)=NPL
	   LTEM(KEM)=NPN
C Ensure we have enough room to expand the neighbour list in the
C next operation (at maximum increase of 3 nodes).
	   JEM=KEM+3
	   IF (JEM.GT.NAYMAX) THEN
	      CALL LSL_GETMSG(TRIANG__TOMNYNEIB,MESSAGE,MESLEN)
	      CALL ALARMS(MESSAGE(:MESLEN)//' - CLIFFLN')
	   ELSE
C Add links to jump the gap in the structure (down the vertical
C cliff!) to node NOWP, and LAST, and complete the cycle using NPL.
	      LTEM(JEM-2)=NOWP
	      LTEM(JEM-1)=LAST
	      LTEM(JEM)=NPL
	   ENDIF
C Write out the node connections for new node NPA
	   CALL PUTNAY(NPA,LTEM,NAYMAX,JEM)
C
C ......................................................................
C
C  R E C O N N E C T   L E F T   N E I G H B O U R S   F O R   C L I F F
C
C There are three cases - second node on open cliff, penultimate node
C on open cliff, and central nodes on open cliff and all closed cliff
C nodes.
	   IF (LOOP.EQ.0.AND.NOWP.EQ.IPNT+1) THEN
C First point on open cliff joins left and right edges together
C find other node (NPEN) that pairs with IPNT to indicate location
C for insertion of cliff chain start node. This search is through
C the original NOWP node list.
	      I=LPOS+1
	      IF (I.GT.NUM) THEN
	         I=1
	         IF (KTEM(1).EQ.KTEM(NUM))I=2
	      ENDIF
	      NPEN=KTEM(I)
C Insert the new cliff chain point in the list for the node at the
C beginning of the cliff
	      CALL INJOIN(NPA,NOWP,IPNT,NPEN)
C Reconnect the left side neighbours to new left side cliff line node
	      DO 30 I=1,KEM
	         IF (LTEM(I).NE.IPNT) THEN
	            CALL REJOIN(NPA,LTEM(I),NOWP)
	         ENDIF
30	      CONTINUE
C Last point on cliff joins left and right edges together
	   ELSEIF (LOOP.EQ.0.AND.NOWP.EQ.LPNT-1) THEN
C Find other node (NPEN) that pairs with LPNT to indicate location
C for insertion of cliff chain end node
	      I=NPOS-1
	      IF (I.EQ.0) THEN
	         I=NUM
	         IF (KTEM(1).EQ.KTEM(NUM))I=NUM-1
	      ENDIF
	      NPEN=KTEM(I)
C Insert the end of cliff new node in the last node of cliff's
C neighbour list
	      CALL INJOIN(NPA,NOWP,LPNT,NPEN)
C Reconnect the left side neighbours to new left side cliff line node
	      DO 40 I=1,KEM
	         IF (LTEM(I).NE.LPNT) THEN
	            CALL REJOIN(NPA,LTEM(I),NOWP)
	         ENDIF
40	      CONTINUE
	   ELSE
C When either we have a closed cliff or we are in the middle section
C of an open cliff then simply reconnect the LHS neighbours to the
C new LHS cliff line node
	      DO 50 I=1,KEM
	         CALL REJOIN(NPA,LTEM(I),NOWP)
50	      CONTINUE
	   ENDIF
C
C ......................................................................
C
C   N O W   U P D A T E   T H E   R. H. S.  C L I F F  N O D E S
C
C Get the right side links of NOWP
	   CALL GTLINK(NPOS,LPOS,KTEM,NAYMAX,NUM,LTEM,KEM)
C Add in links across the cliff divide (up the cliff face)
	   JEM=KEM+3
	   IF (JEM.GT.NAYMAX) THEN
	      CALL LSL_GETMSG(TRIANG__TOMNYNEIB,MESSAGE,MESLEN)
	      CALL ALARMS(MESSAGE(:MESLEN)//' - CLIFFLN')
	   ELSE
	      LTEM(JEM-2)=NPA
	      LTEM(JEM-1)=NPN
	      LTEM(JEM)=NEXT
	      IF (NEXT.EQ.NPN)JEM=JEM-1
	   ENDIF
C Write out the reduced RHS NOWP list, augmented by vertical links
C up the cliff face.
	   CALL PUTNAY(NOWP,LTEM,NAYMAX,JEM)
C All done for this point, get the next NOWP on the string
	   NOWP=NOWP+1
	   NPA=NPA+1
	   GOTO 20
	ENDIF
C That's all
	RETURN
	END
