C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-01-26 13:13:20.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE WRTNOD(NTEM,NUMNOD,IOP)
C
***	MODULE WRTNOD
***	IDENT	31JL87
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	Converted for LSLLIB message formats	TJH	31-Jul-1987
CMOD	WRTUNF introduced			 DM	25-May-1984
C
C Buffers the node/neighbour output lists into a reasonable binary
C record length for whatever machine is being used.
C
	INCLUDE 'LSL$CMNTRIANG:NODBUF.CMN'
	INCLUDE 'LSL$DTMCREATESYS:IOLUNS.CMN'
	INCLUDE 'LSL$DTMCREATESYS:MESSAGE.CMN'
	INCLUDE 'LSL$CMNTRIANG:TRIANGMSG.PAR'
	DIMENSION NTEM(NUMNOD)
C
	LOGICAL OK		! function return
C
C function:
	LOGICAL WRTUNF		! efficient Fortran unformatted write
C
C ......................................................................
C
C......Check for initialisation or last bufferful
	IF (IOP)10,60,20
C
C......Initialisation
10	NBUF=0
	GOTO 70 			 ! return
C
C......Add a bufferful and write it out if necessary
20	K=1
	L=NUMNOD
C
C......Check for a full buffer
30	J=NSIZE-NBUF
	IF (J.GT.0) GOTO 40
C
C......Write it out
	OK=WRTUNF(LGC3,NODS,NSIZE)
	IF (.NOT.OK) THEN
	   CALL LSL_GETMSG(TRIANG__WRTNOD,MESSAGE,MESLEN)
	   CALL EXPAND('%'//MESSAGE(:MESLEN))
	   CALL TXTOUT(.FALSE.)
	   CALL LSL_GETMSG(OK,MESSAGE,MESLEN)
	   CALL ALARMS(MESSAGE(1:MESLEN))
	ENDIF
	NBUF=0
	GOTO 30
C
C......Transfer K to L of NTEM to buffer. Modify L if not enough room
40	IF (J.LT.L-K+1)L=K+J-1
C
C......Enough space to add L-K+1 numbers to the buffer
	DO 50 I=K,L
	   NBUF=NBUF+1
	   NODS(NBUF)=NTEM(I)
50	CONTINUE
C
C......All done if numnod numbers have been transfered
	IF (L.EQ.NUMNOD) GOTO 70  !return
C
C......some numbers left, update K,L and repeat
	K=L+1
	L=NUMNOD
	GOTO 30
C
C......Empty buffer after putting zero marker in next space in buffer
C......in the buffer is not already full
60	IF (NBUF.EQ.0) GOTO 70
	IF (NBUF.NE.NSIZE)NODS(NBUF+1)=0
	OK=WRTUNF(LGC3,NODS,NSIZE)
	IF (.NOT.OK) THEN
	   CALL LSL_GETMSG(TRIANG__WRTNOD,MESSAGE,MESLEN)
	   CALL EXPAND('%'//MESSAGE(:MESLEN))
	   CALL TXTOUT(.FALSE.)
	   CALL LSL_GETMSG(OK,MESSAGE,MESLEN)
	   CALL ALARMS(MESSAGE(1:MESLEN))
	ENDIF
70	RETURN
	END
