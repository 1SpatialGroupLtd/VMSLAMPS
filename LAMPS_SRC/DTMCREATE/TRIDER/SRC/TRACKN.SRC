C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1999-08-24 11:16:32.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE TRACKN(MNOD,KTEM,MIX,N,IXPOS,IYPOS,IZVAL,LGC8)
C
***	MODULE	TRACKN
***	IDENT	24AU99
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
CMOD	DTMCREATE version with LSLLIB			TJH 23-Nov-1987
CMOD	Graphics added					TJH  30-Jul-1986
C	Standardised/incorporated into LSL DTMCREATE	TJH  29-Jun-1984
C
C
C Pick up layers of nodes, starting with node mnod to generate
C paths from a particular node (derivative calculation case)
C
C The neighbours are put into KTEM (KIXSIZ long). There are N
C neighbours on completion of the search and weed process. All paths
C are terminated at discontinuities rather than be carried across.
C
C IXPOS,IYPOS should be the location of node MNOD
C IZVAL is the value at the node at IXPOS,IYPOS, and is used to
C check for the need to enlarge the layer search because of similar
C valued nodes.
C
C Parameters:
	INCLUDE 'LSL$CMNTRIDER:TRIDERMSG.PAR'
	INCLUDE 'LSL$DTMCREATESYS:GRIDPARAMS.PAR'
C
C Common:
	INCLUDE 'LSL$DTMCREATESYS:MESSAGE.CMN'
	INCLUDE 'LSL$DTMCREATESYS:FINDIT.CMN'
	INCLUDE 'LSL$DTMCREATESYS:STACK.CMN'
	INCLUDE 'LSL$DTMCREATESYS:STORAG.CMN'
	INCLUDE 'LSL$DTMCREATESYS:GRAFCS.CMN'
	INCLUDE 'LSL$DTMCREATESYS:GRAFDEV.CMN'
C
	DIMENSION KTEM(KIXSIZ)
	DIMENSION JTEM(NTMSIZ)
C
C ......................................................................
C
C Set MAXL layers at start to 1
	MAXL=1
C Pick up the first level neighbours
	IPNT=MNOD
	CALL GETNAY(IPNT,KTEM,MIX,N,LGC8)
	IF(IPNT.GT.LIMPOL)N=N-1
C
C it is important to have a good value distribution amongst the
C neighbours. Therefore the number of layers being searched is
C increased automatically if 0.2 or fewer of the nodes collected
C so far have different values from the one supplied on entry.
C Similarly if the ratio of distances to the closest/furthest
C connected node is too extreme (ie in valley crossing situations)
C then collect additional layers.
C
C Set distance collection limits
	DMN=10.E20
	DMX=-DMN
C
C Set accumulative proportions of different values
	NSAME=0
	MARK=0
	NFIRS=N
C
C Look through the initial collection
	DO 10 I=1,N
	   J=KTEM(I)
C
C Mark any discontinuous nodes in the list.
	   IF(MD(3,J).LT.0)KTEM(I)=-J
	   D=FLOAT(IXPOS-MD(1,J))**2+FLOAT(IYPOS-MD(2,J))**2
	   DMN=AMIN1(DMN,D)
	   DMX=AMAX1(DMX,D)
	   IF(IABS(MD(3,J)).EQ.IZVAL)NSAME=NSAME+1
10	CONTINUE
C
C Add layers to give stability in odd distribution cases
	DMN=SQRT(DMN)
	DMX=SQRT(DMX)
	IF(DMN/DMX.LT.0.2)MAXL=MAXL+1
	IF(DMN/DMX.LT.0.1)MAXL=MAXL+1
C
C Check for necessary layer increase, if none has been asked for
C (NB KAXL appears not to be defined anywhere. It will presumably
C  default to 0, and MAXL will not be equal to it. CCB 24-Aug-1999)
	IF(MAXL.EQ.KAXL.AND.FLOAT(NSAME)/FLOAT(N).GT.0.8) THEN
	   MAXL=MAXL+1
	   MARK=1
	ENDIF
C
C Check for no more layers to consider (ie MAXL has not been
C altered).
	IF(MAXL.EQ.1)RETURN
C
C We now have the first level neighbours of a node, and can go on
C to add further layers.
	LSTA=1
	LSTO=N
C
C Start loop through the layers requested/needed (upto MAXL - which
C may expand as more points are gathered).
	J=0
20	J=J+1
C
C Get neighbours for all nodes in KTEM from LSTA to LSTO.
C Put any new neighbours into the list of nodes to expand for the next
C layer search.
	DO 40 K=LSTA,LSTO
	   L=KTEM(K)
C
C Ignore this point if it is marked -ve, as it is a terminating
C discontinuity
	   IF(L.LT.0)GOTO 40
C
C Get neighbours for point L
	   CALL GETNAY(L,JTEM,150,NUM,LGC8)
C
C Go through them checking for any new additions to the point found
C list (held in KTEM, N long), remembering not to look at the last
C node in the list for real nodes (same as start node in list).
	   IF(L.GT.LIMPOL)NUM=NUM-1
	   DO 30 M=1,NUM
	      MA=JTEM(M)
C
C Check that we do not include the starting point
	      IF(MA.EQ.IPNT)GOTO 30
C
C Put MA in the list if it is not already in the list
	      IF(NAYB(MA).GT.0) THEN
C
C Point MA is a new neighbour, not found previously. Check for
C room for any more neighbours
	         IF(N.EQ.MIX)GOTO 50
C
C Plenty of room, so put it in the list
	         N=N+1
	         KTEM(N)=MA
	         NAYB(MA)=-IABS(NAYB(MA))
C
C If this is a discontinuous point mark it negative
	         IF(MD(3,MA).LT.0)KTEM(N)=-MA
C
C If it has the same value as IZVAL, increment NSAME
	         IF(IABS(MD(3,MA)).EQ.IZVAL)NSAME=NSAME+1
	      ENDIF
30	   CONTINUE
40	CONTINUE
C
C Move onto next layer search. If nothing is found for last layer
C (all points in the data set collected!) then quit looking.
	IF(N.EQ.LSTO)GOTO 50
C
C Update layer markers for looking for new points for the next
C layer.
	LSTA=LSTO+1
	LSTO=N
C
C Check for all points in last layer being discontinuous
	IF(LSTA.GT.LSTO)GOTO 50
C
C Check whether too many nodes still have the same value as IZVAL
	IF(FLOAT(NSAME)/FLOAT(N).GT.0.8) THEN
	   MAXL=MAXL+1
	   MARK=1
	ENDIF
C
C Go on to next layer (if any are left)
	IF(J.LT.MAXL)GOTO 20
C
C All layers now complete for this IXPOS,IYPOS. Remove
C the negative signs from discontinuous points. Also remove
C IZVAL copies if mark has been set.
50	IF (N.LE.0) THEN
	   CALL LSL_GETMSG(TRIDER__NONEIGHB,MESSAGE,MESLEN)
	   CALL ALARMS(MESSAGE(:MESLEN))
	ENDIF
	K=0
	DO 60 I=1,N
	   J=IABS(KTEM(I))
	   NAYB(J)=IABS(NAYB(J))
C
C Remove duplicates of IZVAL from the list (if MARK has been set)
	   IF(MARK.EQ.1) THEN
	      IF(I.GT.NFIRS) THEN
	         IF(IABS(MD(3,J)).NE.IZVAL)K=K+1
	      ELSE
	         K=K+1
	      ENDIF
	   ELSE
	      K=K+1
	   ENDIF
	   KTEM(K)=J
60	CONTINUE
	N=K
C
C All done
	RETURN
	END

