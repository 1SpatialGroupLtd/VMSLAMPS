C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-11-23 13:36:30.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE CRAMER(IPNT,NUM,IOPT,SLOP)
C
***	MODULE	CRAMER
***	IDENT	23NO87
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
CMOD	DTMCREATE version using LSLLIB			TJH 23-Nov-1987
CMOD	Bug fix, lower triangle of A() zeroed instead of
C	upper. This would upset some derivative estimates
C	if a lower order fit had to be attempted.   MJM/TJH 29-Jul-1986
C	Standardised/incorporated into LSL DTMCREATE  	TJH 29-Jun-1984
C
C Calculate partial derivatives in x and y at point IPNT
C using those points listed in NTEM
C
C
	DIMENSION SLOP(5)
	DIMENSION A(5,5),B(5),C(6)
C
C Parameters:
	INCLUDE  'LSL$CMNTRIDER:TRIDERMSG.PAR'
C
C Common:
	INCLUDE  'LSL$DTMCREATESYS:MESSAGE.CMN'
	INCLUDE  'LSL$DTMCREATESYS:FINDIT.CMN'
	INCLUDE  'LSL$DTMCREATESYS:STORAG.CMN'
	INCLUDE  'LSL$DTMCREATESYS:ZONVAR.CMN'
	INCLUDE  'LSL$DTMCREATESYS:IOLUNS.CMN'
C
C ......................................................................
C
C Set order of fit to second order at first attempt, unless there
C are too few nodes (fewer than 7), or we are estimating derivatives
C to be used for interpolating imaginary values, in which case a
C more conservative estimate ought to be used.
	IF(NUM.LT.7.OR.IOPT.EQ.4) THEN
	   IORD=1
	   NCOEF=2
	ELSE
	   IORD=2
	   NCOEF=5
	ENDIF
C
C Get node location and value
	IXPOS=MD(1,IPNT)
	IYPOS=MD(2,IPNT)
	IZVAL=IABS(MD(3,IPNT))
C
C Set derivatives to zero in case of solution failure (too few data
C points, bad distribution etc)
	DO 10 I=1,5
	   SLOP(I)=0.0
10	CONTINUE
C
C Zero the SSCP matrix for the order of fit being attempted
C Bug reported here by MJM 25-Jul-1986,  A(I,J) had been A(J,I)!
20	DO 40 I=1,NCOEF
	   B(I)=0.0
	   DO 30 J=1,NCOEF
	      A(I,J)=0.0
30	   CONTINUE
40	CONTINUE
C
C Go through all the points in the neighbour list. KOUNT
C keeps track of how many are used in the calculation.
	KOUNT=0
	DO 70 L=1,NUM
	   M=IABS(NTEM(L))
C
C Check for option (4) required. If so must not use this point
C if imaginary
	   IF(IOPT.EQ.4.AND.M.LE.LIMPOL)GOTO 70
C
C Get locational/value comparison between this point (M) and the
C point in question (IXPOS,IYPOS)
	   C(1)=MD(1,M)-IXPOS
	   C(2)=MD(2,M)-IYPOS
	   Z=IABS(MD(3,M))-IZVAL
C
C Get power series upto second order fit
	   IF(IORD.EQ.2) THEN
	      C(3)=C(1)**2
	      C(4)=C(1)*C(2)
	      C(5)=C(2)**2
	   ENDIF
C
C Get SSCP matrix and RHS, allowing appropriate weighting to every
C added term
	   DO 60 J=1,NCOEF
	      B(J)=B(J)+C(J)*Z
	      DO 50 K=J,NCOEF
	         A(J,K)=A(J,K)+C(J)*C(K)
50	      CONTINUE
60	   CONTINUE
	   KOUNT=KOUNT+1
C
C Get next point
70	CONTINUE
C
C If there are too few points left on the go (<7) then
C automatically reduce to first order before calculating
	IF(KOUNT.LT.7) THEN
	   IORD=1
	   NCOEF=2
	ENDIF
C
C Get lower triangle copied to upper triangle
	DO 90 J=1,NCOEF
	   DO 90 K=J,NCOEF
	      A(K,J)=A(J,K)
80	      CONTINUE
90	CONTINUE
C
C Get coefficients for the surface
	CALL SOLVE(A,B,5,NCOEF,IERR)
C
	IF(IERR.EQ.0) THEN
C
C Copy coefficients into slope store
	   DO 100 I=1,NCOEF
	      SLOP(I)=B(I)
100	   CONTINUE
C
	ELSE
C Drop an order if possible. If already first order then drop a
C weighting level if possible
	   IF(IORD.EQ.1) THEN
C
C All strategies have failed. give up (derivatives set to zero)	
C Give the unfortunate user coordinate position
	      CALL VALUE(XPOS,MD(1,IPNT),1)
	      CALL VALUE(YPOS,MD(2,IPNT),2)
	      CALL LSL_GETMSG(TRIDER__DERFAIL,MESSAGE,MESLEN)
	      CALL EXPAND('%'//MESSAGE(:MESLEN),XPOS,YPOS)
	      CALL TXTOUT(.TRUE.)
	      RETURN
	   ENDIF
C
C Reduce the order and try again
	   IORD=1
	   NCOEF=2
	   GOTO 20
	ENDIF
	RETURN
	END
