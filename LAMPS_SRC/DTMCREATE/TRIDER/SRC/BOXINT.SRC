C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-01-03 10:17:42.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE BOXINT(IOPT)
C
***	MODULE	BOXINT
***	IDENT	03JA91
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
CMOD	Call to WAIT changed to LSL_WAIT		TJH  02-Jan-1990
CMOD	Converted to LLSLLIB for TRIDER			TJH  19-Nov-1987
CMOD	Graphics added					TJH  30-Jul-1986
CMOD	Diagnostic printout modulus now varied
C	with size of dataset				TJH  05-Jul-1985
CMOD	Search loop incrementing out 1 box wide 
C	now increased to 1000 cycles 			TJH  25-Jun-1985
C	Standardised/incorporated into LSL PANACEA	TJH  29-May-1985
C
C
C Full-blown box interpolation sequence wanted. Get box nearest the
C imaginary point, and expand in layers until a) sufficient points have
C been found, and b) there is a reasonable distribution of points in the
C area. 
C
C Parameters:
	INCLUDE 'LSL$CMNTRIDER:TRIDERMSG.PAR'
C
C Common:
	INCLUDE 'LSL$DTMCREATESYS:CONTRL.CMN'
	INCLUDE 'LSL$DTMCREATESYS:FINDIT.CMN'
	INCLUDE 'LSL$DTMCREATESYS:STORAG.CMN'
	INCLUDE 'LSL$DTMCREATESYS:TRYVAR.CMN'
	INCLUDE 'LSL$DTMCREATESYS:ZONVAR.CMN'
	INCLUDE 'LSL$DTMCREATESYS:IOLUNS.CMN'
	INCLUDE 'LSL$DTMCREATESYS:GRAFCS.CMN'
	INCLUDE 'LSL$DTMCREATESYS:GRAFDEV.CMN'
	INCLUDE 'LSL$DTMCREATESYS:MESSAGE.CMN'
C
	INTEGER	  	I		! temporary variable
	LOGICAL	  	OK		! function return
C
C Function:
	LOGICAL	  WRTUNF		! efficient Fortran writes
C
C ......................................................................
C
C Set up a scratch file to store extended neighbours of imaginary
C points
C
	OPEN (UNIT=LGC1,FILE='TRIDER.TMP',STATUS='SCRATCH',
     &	      FORM='UNFORMATTED',ERR=70)
C
C Set marker value positive for later use as a derivative
C marker (a -ve value indicates derivative need calculating)
	DO 10 I=1,NP
	   MD(4,I)=IABS(MD(4,I))
10	CONTINUE
C
C Now cycle through the imaginary points, finding the extended
C neighbours.
	IF (DIAG) THEN
	  CALL PERCENT('of imaginary point neighbourhoods determined',
     &		0,LIMPOL,10,-1)
	ENDIF
	DO 50 I=1,LIMPOL
C
C Get box location of this imaginary point
	   IPOS=MIN0(MAX0((MD(2,I)/MYI)+1,1),NBI)
	   JPOS=MIN0(MAX0((MD(1,I)/MXI)+1,1),NBJ)
C
C Pick up points in expanding hollow square until sufficient
C points have been found and are sufficiently well distributed
C zero point number and distribution counters. Square expands in
C increment of one box wide (INC).
C NB: The use of an expanding hollow square ensures that the points
C nearest to the interpolation point are included at the head of
C the list. This means that if space runs out (KIX) then the
C most important ones have been collected already.
	   N=0
	   KOVER=0
	   DO 20 INC=1,10000
	      LINC=INC-1
C
C Determine limits of hollow square for this expansion cycle
	      IA=IPOS-LINC
	      IB=IPOS+LINC
	      JA=JPOS-LINC
	      JB=JPOS+LINC
C
C Get increment between edges of square
	      KINC=MAX0(IB-IA,1)
C
C Get boxes lying on top and bottom edge of hollow square
	      CALL PICSQU(N,KOVER,IA,IB,1,JA,JB,KINC)
C
C Get boxes along the left and right sides of hollow square
C there are none if this is the first square size.
	      IF (INC.NE.1)CALL PICSQU(N,KOVER,IA,IB,KINC,JA+1,JB-1,1)
C
C All boxes checked for this pass. Are there enough points?
	      IF (N.LT.10) GOTO 20
C
C Have all available points been found?
	      IF (N.EQ.NP-LIMPOL) GOTO 30
C
C If KIX points have been found in this pass, it is not possible to
C add any more. So take what we have and use them.
	      IF (N.EQ.KIX) GOTO 30
C
C Are they distributed reasonably? This is defined as more than one
C box being used, and more than 1.5 rows worth of boxes with points
C out of the total for the present hollow square size.
	      IF (KOVER.LT.2.OR.KOVER.LT.(INC*2-1)*2-INC) GOTO 20
C
C Sufficient points, and reasonable distribution, so get derivatives
C of all points in the area, and then calculate an interpolation
	      GOTO 30
20	   CONTINUE
C
C Check for enough points or distribution to manage an interpolation
	   IF (N.LE.2) THEN
	      CALL LSL_GETMSG(TRIDER__NOPTSIM,MESSAGE,MESLEN)
	      IF (GRAPHICS) CALL LSL_WAIT(4,2)	! wait for 4 seconds
	      CALL ALARMS(MESSAGE(:MESLEN))
	   ENDIF
C
C Calculate necessary radius of search taking into account the shape
C of the hollow square area and making allowances for edge effect on
C the hollow square shape. Also allow for any offset that may have been
C included to allow repositioning of imaginary points.
30	   KA=MIN0(IB,NBI)-MAX0(IA,1)+1
	   KB=MIN0(JB,NBJ)-MAX0(JA,1)+1
	   KDIST=MAX0(KA,KB)*MAX0(MXI,MYI)+KOFF
C
C Mark all points found ready for derivative estimation by turning
C the number presently there to negative.
	   DO 40 J=1,N
	      K=NTEM(J)
	      MD(4,K)=-IABS(MD(4,K))
40	   CONTINUE
C
C Now save the point list for this imaginary point, and coverage.
	   WRITE(LGC1)N,KDIST
	   OK=WRTUNF(LGC1,NTEM,N)
	   IF (.NOT.OK) GOTO 80
	   IF (DIAG) THEN
	     CALL PERCENT('of imaginary point neighbourhoods determined'
     &			,I,LIMPOL,10,0)
	   ENDIF
50	CONTINUE
	IF (DIAG) THEN
	   CALL PERCENT('of imaginary point neighbourhoods determined',
     &		I,LIMPOL,10,1)
	   CALL EXPAND
     &  	('%N imaginary point neighbourhoods determined'
     &		     ,LIMPOL)
	   CALL TXTOUT(.TRUE.)
	ENDIF
C
C Check whether we have too many derivative estimates wanted to be
C held at one time
	KOUNT=0
	DO 60 I=1,NP
	   IF (MD(4,I).LT.0) KOUNT=KOUNT+1
60	CONTINUE
	IF (KOUNT.GT.LAX) THEN
	   CALL LSL_GETMSG(TRIDER__DERIVOVR,MESSAGE,MESLEN)
	   IF (GRAPHICS) CALL LSL_WAIT(4,2)	! wait for 4 seconds
	   CALL ALARMS(MESSAGE(:MESLEN))
	ENDIF
C
C Rewind point list file, calculate derivatives for all real points
C using the 4 to indicate that only marked points need be considered.
	REWIND LGC1
	CALL DERIV(4)
C
C Go through the point lists calculating interpolations.
	CALL INTERP(IOPT)
C
C Close scratch file
	CLOSE (UNIT=LGC1)
	RETURN
C
C ......................................................................
C 			E R R O R S.
C Error opening scratch file
70	CALL LSL_GETMSG(TRIDER__OPNSCR,MESSAGE,MESLEN)
	CALL EXPAND('%'//MESSAGE(:MESLEN))
	CALL TXTOUT(.FALSE.)
	GOTO 90
C
C Error writing to scratch file
80	CALL LSL_GETMSG(TRIDER__WRTSCR,MESSAGE,MESLEN)
	CALL EXPAND('%'//MESSAGE(:MESLEN))
	CALL TXTOUT(.FALSE.)

90	CALL ERRSNS(,I,J)		! find out what the problem is
	IF (J.EQ.0) J=I
100	CALL LSL_GETMSG(J,MESSAGE,MESLEN)
	J=INDEX(MESSAGE,'!') - 1		! (ignore any FAO stuff)
	IF (J.LT.0) J=MESLEN
	CALL ALARMS(MESSAGE(:MESLEN))		! close down & exit
	END
