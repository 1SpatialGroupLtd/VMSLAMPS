C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1999-08-24 10:53:04.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	PROGRAM TRIDER
C
***	MODULE	TRIDER
***	IDENT	24AU99
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Became TRIDER					TJH  20-Nov-1987
C
	IMPLICIT NONE
C
C
C TRIDER reads the node/neighbour file, once as neighbours for
C derivative estimation, and again (possibly several times) as
C triangles for mapping onto the dtm grid. Data storage is in array
C MD, but SLP has elements 1 to 5 present to store the
C estimated derivatives at every node.
C
C Steps are as follows: 1) reading the data file into memory,
C 2) placing imaginary points to a given distance away from the
C data area, 3) setting their z values a) to some fixed value,
C b) to the trend of the data set, and partial derivatives to
C the coeeficients of the trend, c) interpolation by either box
C search growth, or by Thiessen neighbour layer connections,
C 3) estimating derivatives for all real points.
C
C
C W/s
	INTEGER IOPT		! imaginary pt interp option
	INTEGER	LAYER		! # shells
	INTEGER IZF		! scaled integer fixed z value
	LOGICAL	OK		! function return
C
C Parameters:
	INCLUDE 'LSL$DTMCREATESYS:GRIDPARAMS.PAR'
C
C Common:
	INCLUDE 'LSL$DTMCREATESYS:CONTRL.CMN'
	INCLUDE 'LSL$DTMCREATESYS:FINDIT.CMN'
	INCLUDE 'LSL$DTMCREATESYS:NODBUF.CMN'
	INCLUDE 'LSL$DTMCREATESYS:STACK.CMN'
	INCLUDE 'LSL$DTMCREATESYS:STORAG.CMN'
	INCLUDE 'LSL$DTMCREATESYS:TRYVAR.CMN'
	INCLUDE 'LSL$DTMCREATESYS:ZONVAR.CMN'
	INCLUDE 'LSL$DTMCREATESYS:IOLUNS.CMN'
	INCLUDE	'LSL$DTMCREATESYS:GRAFCS.CMN'
	INCLUDE 'LSL$DTMCREATESYS:GRAFDEV.CMN'
C
C Function:
	LOGICAL	EXAMINE_TERM	! examine terminal
	LOGICAL	READIN		! read in command and nodes
	LOGICAL	DTMJPI		! get process information
	LOGICAL IS_ALPHA_AXP
C
C Setup: I/O files, maximum number of points (NMAX) in data,
C maximum number of neighbours that can be held (KIX), maximum
C size of slope storage array (SLP) - LAX, the maximum
C size of the box structure carried over from PANIC - NAX,
C node/neighbour buffer size (NSIZE).
C
C ......................................................................
C
C
	GONOFF=.FALSE.	! no graphics device active yet
C
C ......................................................................
C
C Initialise LSLLIB
	CALL LSL_INIT
C
C Announce
	OK=DTMJPI()
	IF (.NOT.OK) GOTO 10
C
C Check what SYS$OUTPUT is assigned to and if a terminal is it a CRT?
	OK=EXAMINE_TERM()
	IF (.NOT.OK) GOTO 10
C
C Get the resolution size from the logical LSL$DTMCREATE_RESOLUTION
	CALL RESLOG()
C
C LUNS
	LGC1=1
	LGC2=2
	LGC3=3
	LGC4=4
	LGC5=5
	LGC6=6
	LGC7=7
	LGC8=8
C
C Set up working dimensions
	NMAX=120000
	LAX=75000
	KIX=KIXSIZ
	NAX=75000
	NSIZE=2048
C
C Set number of free chain records available in memory (NFREES),
C set total size of free chain available to user (including disk)
C effectively unlimited for use in TRIDER.
	NFREES=120000
	NSTACK=120000
C
C Get input and output details from the user
	OK=READIN(IOPT,IZF,LAYER)
	IF (.NOT.OK) GOTO 10
C
C Initialise graphics (if selected).
	IF (GRAPHICS) THEN
	   CALL GINIT(FLOAT(MX2+KOFF*2),FLOAT(MY2+KOFF*2))
	   CALL COLOUR(13,.FALSE.)	! set colour for imaginary pts.
	   CALL FRAME			! draw frame around data area
	ENDIF
C
C Set up the random file holding node/neighbour relationships
	CALL SETUP(LGC3,LGC8)
C
C Get data, give imaginary points z values and derivatives, either
C calculated from the trend, fixed values, or interpolated from
C the local data.
	CALL GETFIL(IOPT,IZF,LAYER)
C
C Estimate derivatives for the whole data set
	CALL DERIV(IOPT)
C
C Close derivative output file
C
	CLOSE (UNIT=LGC2)
C
C All complete, so finish with graphics, (if selected).
C
	IF (GRAPHICS) CALL FINIT
C
C If PME is running switch it off
10	IF (PMEING.AND..NOT.IS_ALPHA_AXP()) CALL PME_EXIT
	CALL FILCLO(OK)
	CALL LSL_EXIT(OK)
	END
