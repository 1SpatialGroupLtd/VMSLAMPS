C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-11-27 10:45:56.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE DERIV(IOPT)
C
***	MODULE	DERIV
***	IDENT	19NO87
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
CMOD	Converted to LLSLLIB for TRIDER			TJH  19-Nov-1987
CMOD	Graphics added					TJH  30-Jul-1986
CMOD    Imaginary point slopes output to LGC2 using
C	same unformatted write as non-imaginary points  
C	when IOPT<=0					TJH  22-Aug-1985
CMOD	Diagnostic printout modulus now varied
C	with size of dataset				TJH  05-Jul-1985
C	Standardised/incorporated into LSL DTMCREATE  	TJH  30-May-1985
C
C Calculate derivatives of all real nodes in the triangulation.
C
C
C Parameters:
	INCLUDE 'LSL$CMNTRIDER:TRIDERMSG.PAR'
C
C Common:
	INCLUDE 'LSL$DTMCREATESYS:CONTRL.CMN'
	INCLUDE 'LSL$DTMCREATESYS:FINDIT.CMN'
	INCLUDE 'LSL$DTMCREATESYS:STORAG.CMN'
	INCLUDE 'LSL$DTMCREATESYS:ZONVAR.CMN'
	INCLUDE 'LSL$DTMCREATESYS:IOLUNS.CMN'
	INCLUDE 'LSL$DTMCREATESYS:GRAFCS.CMN'
	INCLUDE 'LSL$DTMCREATESYS:GRAFDEV.CMN'
	INCLUDE 'LSL$DTMCREATESYS:MESSAGE.CMN'
C
C W/s
	LOGICAL	  	OK		! function return
	REAL		SLOP(5)
C
C Function:
	LOGICAL	  WRTUNF		! efficient Fortran writes
C
C ......................................................................
C
	IPA=0
	IF (GRAPHICS) THEN
	   IF (IOPT.EQ.4) THEN
	      CALL COLOUR(5,.FALSE.)! col for intermediate interpolation
	   ELSE
	      CALL COLOUR(14,.FALSE.)	! colour for final interpolation
	   ENDIF
	ENDIF
	IF (DIAG) THEN
	  IF (GRAPHICS.AND..NOT.GPX) THEN
	   CALL EXPAND('Starting derivative calculation phase')
	   CALL TXTOUT(.TRUE.)
	  ELSE
	   IF (IOPT.EQ.4) THEN
	      CALL FRAMED_MES(1,0)
	   ELSE
	      CALL FRAMED_MES(5,0)
	   ENDIF
	  ENDIF
	ENDIF
C
C If we have already provided estimates for imaginary points by
C using the trend or fixed options (IOPT=0 or IOPT=-1) then just
C dump out to file the contents of SLP up until the end of the
C imaginary points (LIMPOL).  This is done to correctly offset the
C derivative data in the file which we will be calculating and writing
C out below.
C
	IF (IOPT.LE.0) THEN
	   DO 10 I=1,LIMPOL
	      OK=WRTUNF(LGC2,SLOP,5)
	      IF (.NOT.OK) GOTO 50
10	   CONTINUE
	ENDIF	
	IF (DIAG) THEN
	   CALL PERCENT('of partial derivatives estimated',
     &		0,NP,10,-1)
	ENDIF
	DO 40 IPNT=1,NP
	   IF (DIAG) THEN
	      CALL PERCENT('of partial derivatives estimated',
     &		IPNT,NP,10,0)
	   ENDIF
C Do not provide estimates for imaginary points if they have
C already been calculated by trend, or fixed at zero (IOPT=0 or
C IOPT=-1).

	   IF (IPNT.LE.LIMPOL.AND.IOPT.LE.0)GOTO 30
C
C If IOPT = 4 (midway derivative estimates during interpolation)
C we can skip estimating derivatives for any point that has a
C +ve value in MD(4,IPNT). This can save quite a bit of time.
C
	   IF(IOPT.EQ.4.AND.MD(4,IPNT).GE.0)GOTO 30
C
C Read in neighbours via buffer, so that we can accumulate a list
C of neighbours, being quite excessively careful to stop expanding
C if we cross a discontinuity.
C
	   IX=MD(1,IPNT)
	   IY=MD(2,IPNT)
	   IZ=IABS(MD(3,IPNT))
	   CALL TRACKN(IPNT,NTEM,KIX,NUM,IX,IY,IZ,LGC8)
	   IPA=IPA+1
C
C Estimate first derivative of location IPNT in array MD out of
C the selection held in NTEM from 1 to NUM, where each element
C is the number of a point neighbouring IPNT.
C
	   CALL CRAMER(IPNT,NUM,IOPT,SLOP)
C
C Write out the derivative estimated to file if IOPT is not 4, else
C store the slope estimates in SLP with a pointer to them in MD(*,4).
C
	   IF (IOPT.EQ.4) THEN
	      DO 20 J=1,5
	         MD(4,IPNT)=IPA
	         SLP(J,IPA)=SLOP(J)
20	      CONTINUE
	   ELSE
	      OK=WRTUNF(LGC2,SLOP,5)
	      IF (.NOT.OK) GOTO 50
	   ENDIF
C
C Output graphics if desired
	   IF (GRAPHICS) THEN
	      CALL DOT(MD(1,IPNT),MD(2,IPNT))
	      IF (IOPT.EQ.4) THEN
	         CALL COLOUR(5,.FALSE.)	! col. for intermediate interp.
	      ELSE
	         CALL COLOUR(14,.FALSE.)! colour for final interpolation
	      ENDIF
	   ENDIF
30	   CONTINUE
40	CONTINUE
	IF (DIAG) THEN
	   CALL PERCENT('of partial derivatives estimated',
     &	   IPNT,NP,10,1)
	ENDIF
	IF (DIAG) THEN
	   CALL EXPAND
     &     ('Partial derivatives estimated for %N points'
     &                                           ,IPA)
	   CALL TXTOUT(.TRUE.)
	   IF (GRAPHICS) THEN
	      IF (IOPT.EQ.4) THEN
	         CALL COLOUR(5,.FALSE.)	! col. for intermediate interp.
	      ELSE
	         CALL COLOUR(14,.FALSE.)! colour for final interpolation
	      ENDIF
	   ENDIF
	ENDIF
	RETURN
C
C ......................................................................
C 			E R R O R S.
C 
C Error writing to scratch file
50	CALL LSL_GETMSG(TRIDER__WRTSCR,MESSAGE,MESLEN)
	CALL EXPAND('%'//MESSAGE(:MESLEN))
	CALL TXTOUT(.FALSE.)
	CALL ERRSNS(,I,J)		! find out what the problem is
	IF (J.EQ.0) J=I
	CALL LSL_GETMSG(J,MESSAGE,MESLEN)
	J=INDEX(MESSAGE,'!') - 1		! (ignore any FAO stuff)
	IF (J.LT.0) J=MESLEN
	CALL ALARMS(MESSAGE(:MESLEN))		! close down & exit
	END
