C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-01-31 12:59:32.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION IMAGINARY_CMD(IOPT,LAYER)
C
***	MODULE	IMAGINARY_CMD
***	IDENT	31JA89
C
C	Copyright (C), Laser-Scan Laboratories Ltd., Cambridge, England
C
CMOD	Imaginary relocation proportion now tested for 
C	range bounds 0 - 1				TJH 31-JAN-1989
CMOD	SHELLNEIGHBOUR text now SHELL_NEIGHBOUR		TJH 13-Jan-1989
CMOD	Real fixed point value now FIXEDZ not Z		TJH 07-Apr-1988
C	Created						TJH 13-Oct-1987
C
C Function to set IFF output file options
C
C Function returns .TRUE. if all is well, .FALSE. if an error
C
	IMPLICIT NONE
C
C Arguments 
	INTEGER	IOPT	! imaginary point option	      (in/out)
	INTEGER LAYER	! # layers for shell/neighbour interp (out)
C
C W/s
	LOGICAL		OK,IERR		! function return
	BYTE		CH		! a character
	INTEGER		CMD     	! decoded command number
	CHARACTER*16	OPTION		! option text
	INTEGER		OPTLEN
C
C Functions:
	LOGICAL 	RDCOMM  	! read command from line
	LOGICAL		TTRSTR		! read from terminal
	LOGICAL		RDCHS		! read char. from TXTBUF
	LOGICAL		RDREAL		! read real from TXTBUF
	LOGICAL		REALIN		! read real from tt
C
C Command table:
	EXTERNAL	IMAGINARY_CMD_TABLE
	INTEGER		IMAGINARY_CMD_TABLE
C
C Parameters:
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'
C
C Common:
	INCLUDE	'LSL$DTMCREATESYS:CONTRL.CMN'
	INCLUDE	'LSL$DTMCREATESYS:FINDIT.CMN'
	INCLUDE 'LSL$CMNLSL:CMDCOM.CMN'
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'
C
C Command tables
	INTEGER  IMAGE_CMD_TABLE,SMOOTH_CMD_TABLE
	EXTERNAL IMAGE_CMD_TABLE,SMOOTH_CMD_TABLE
C
C ......................................................................
C
	IMAGINARY_CMD=.TRUE.		! assume success
	NOMESS=.TRUE.			! turn off CMDLIB messages
C
C ......................................................................
10	CMD=RDCOMM(IMAGE_CMD_TABLE)
C
	GOTO (20, 80, 90, 100, 110), CMD+1
C
20	GOTO (30, 40, 50, 60) ,IOPT+2
30	OPTION='FIXED'
	OPTLEN=5   ! length of OPTION
	GOTO 70
40	OPTION='TREND'
	OPTLEN=5   ! length of OPTION
	GOTO 70
50	OPTION='BOX'
	OPTLEN=3
	GOTO 70
60	OPTION='SHELL_NEIGHBOUR'
	OPTLEN=14
70	CALL WRITEF
	IF (TTIN) THEN
	   CALL WRITEF(
     &	   '%S Please use the IMAGINARY command again and '//
     &		'choose from FIXED,',WARNING)
	   CALL WRITEF(
     &	   '                 TREND, BOX or SHELL_NEIGHBOUR '//
     &			'as the first command argument.')
	   CALL WRITEF(
     &	   '                 The default method of '//
     &				'imaginary point estimation is')
	   CALL WRITEF(
     &		'                 %S, which remains unchanged '
     &			,OPTION(:OPTLEN))
	ELSE
	   CALL WRITEF('%S Missing IMAGINARY command arguments',ERROR)
	   CALL WRITEF
	ENDIF
	GOTO 190
C
C ......................................................................
C
C "FIXED" estimatiom of imaginary points
C
80	IOPT=-1
	IF (RDCHS(CH)) THEN  ! no numeric arguments supplied
	   IF (TTIN) THEN
	      IMAGINARY_CMD=REALIN('Fixed height value')
	      IF (.NOT.IMAGINARY_CMD) GOTO 190
	   ELSE
	      CALL WRITEF('%S Missing FIXED height value',ERROR)
	      GOTO 190
	   ENDIF	   
	ELSE
	   CALL BSCH
	   IF (RDREAL(REALAR(1))) THEN
	      CALL WRITEF('%S Reading FIXED height value',ERROR)
	      GOTO 190   			! error or ^Z
	   ENDIF
	ENDIF
	FIXEDZ=REALAR(1)
	GOTO 180
C
C ......................................................................
C
C "TREND" estimatiom of imaginary points
C
90	IOPT=0
	GOTO 180
C
C C
C "BOX" estimatiom of imaginary points
C
100	IOPT=1
	GOTO 120
C
C ......................................................................
C
C "SHELL/NEIGHBOUR" estimation of imaginary points
C
110	IOPT=2
C
C Set standard number of layers for SHELL/NEIGHBOUR approach to 3
	LAYER=3
120	IF (.NOT.RDCHS(CH)) THEN
	   CALL BSCH
	ELSE
	   IF (TTIN) THEN
	      CALL WRITEF
	      CALL WRITEF('Specify weighting function for imaginary '//
     &		'point interpolation')
	      TXTPTR=80
	      OK=TTRSTR(,,'Unweighted, linear, quadratic, quartic ? '
     &							,IERR)
	      IF (OK) THEN
	         CALL BSLN
	      ELSE
	         IF (OK.NE.LSL__EOF) THEN
	            CALL LSL_PUTMSG(OK)
	            CALL LSL_ADDMSG(IERR)
	            GOTO 190
	         ENDIF
	      ENDIF
	   ELSE
	      CALL WRITEF('%S Missing weighting function name',ERROR)
	      GOTO 190   ! error or ^Z
	   ENDIF
	ENDIF
C
	CMD=RDCOMM(SMOOTH_CMD_TABLE)
	GOTO (130, 140, 150, 160, 170), CMD+1
C
130	CALL WRITEF
	CALL WRITEF('%S "LINEAR" interpolation selected by default',
     &		   WARNING)
	KWT=1
	GOTO 180
C
C UNWEIGHTED imaginary point interpolation
140	KWT=0
	GOTO 180
C
C LINEAR  imaginary point interpolation
150	KWT=1
	GOTO 180
C
C QUADRATIC  imaginary point interpolation
160	KWT=2
	GOTO 180
C
C QUARTIC  imaginary point interpolation
170	KWT=4
C 
C ......................................................................
C Imaginary point re-location 
C
180	IF (RDCHS(CH)) THEN  ! no numeric arguments supplied
	   IF (TTIN) THEN
	      IMAGINARY_CMD=
     &	      REALIN('Imaginary point relocation proportion (0 - 1): ')
	      IF (.NOT.IMAGINARY_CMD) GOTO 190
	   ELSE
	      CALL WRITEF('%S Missing relocation proportion',ERROR)
	      GOTO 190
	   ENDIF	   
	ELSE
	   CALL BSCH
	   IF (RDREAL(REALAR(1))) THEN
	      CALL WRITEF('%S Reading relocation proportion',ERROR)
	      GOTO 190   ! error or ^Z
	   ENDIF
	ENDIF
	IF (REALAR(1).LT.0.0.OR.REALAR(1).GT.1.0) THEN
	      CALL WRITEF(ERROR//
     &		'Relocation proportion must lie in the range 0 - 1')
	ELSE
	   RELOC=REALAR(1)
	ENDIF
	GOTO 200
C
C ......................................................................
C
190	IMAGINARY_CMD=.FALSE.
200	NOMESS=.FALSE.
	RETURN
	END
