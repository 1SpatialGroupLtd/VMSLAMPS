C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-02-03 13:49:12.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION FILEIN_CMD()
C
***	MODULE	FILEIN_CMD
***	IDENT	03FE89
C
C	Copyright (C), Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Created						TJH 20-Nov-1987
C
C Function to get input file-specs from FILEIN command. If argument is
C missing the user is prompted.  Checks that a FILEIN command is
C appropriate at this stage of interaction.
C
C Function returns .TRUE. if all is well, otherwise .FALSE.
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE	'LSL$DTMCREATESYS:MESPAR.PAR'
	INCLUDE	'LSL$CMNTRIDER:TRIDERMSG.PAR'
C
C Common:
	INCLUDE	'LSL$CMNLSL:TXTC.CMN'
	INCLUDE	'LSL$CMNLSL:FILENAME.CMN'
	INCLUDE	'LSL$DTMCREATESYS:IOLUNS.CMN'
	INCLUDE	'LSL$DTMCREATESYS:MESSAGE.CMN'
	INCLUDE	'LSL$DTMCREATESYS:CONTRL.CMN'
C
C W/s
	LOGICAL		AMBIG	! had an ambiguous file name ?
	BYTE		CH		! a character
	INTEGER		I,J		! temp vars.
	LOGICAL		BLANK,OK,IERR	! for error returns
	CHARACTER*100	DEFNAM	! default device/directory for filename
C
C Functions
	LOGICAL		GETFILNAM 	! get file-spec
	LOGICAL		GETSPEC 	! jacket for LIB$FIND_FILE
	LOGICAL		RDCHS		! read char. skipping spaces
	LOGICAL		TTRSTR		! read from TT:
	LOGICAL		TRNALL		! translate logical name
	LOGICAL		SIGCHS
C
C ......................................................................
C
	FILEIN_CMD=.TRUE.		! assume success
C
C ......................................................................
C
	BLANK=RDCHS(CH)			! empty line ...
	IF (BLANK.OR.CH.EQ.'!') THEN	! or comment?
	   IF (TTIN) THEN
	      CALL WRITEF('%S You must specify a file-spec argument'//
     &		' to the FILEIN command',WARNING)
	   ELSE
	      CALL WRITEF('%S You must specify a file-spec argument'//
     &		'to the FILEIN command',ERROR)
	   ENDIF	   
	   IF (TTIN) THEN
	      CALL WRITEF('For example FILEIN SWAREA.DTA')
	      OK=TTRSTR(,,'Read from which file? ',IERR)
	      IF (OK) THEN
	         CALL BSLN
	      ELSE
	         CALL LSL_PUTMSG(OK)
	         CALL LSL_ADDMSG(IERR)
	         GOTO 50
	      ENDIF
	      IF (TXTPTR.EQ.0) GOTO 50		! empty line
	   ELSE
	      GOTO 50  ! someone got their indirect file wrong !!
	   ENDIF
	ENDIF
C
C ......................................................................
C
C Try interpreting the file-spec
	CALL BSCH
	IF (.NOT.TRNALL('LSL$DTMCREATE_WORK',DEFNAM)) THEN
	    DEFNAM='SYS$DISK:[]'
	ENDIF
	OK=GETFILNAM(ITLE,
     &			TITLEN,
     &			DEFNAM(1:SIGCHS(DEFNAM))//'.DTA;0',
     &			.TRUE.,
     &			%REF('!'))
	IF (.NOT.OK) THEN
	   CALL WRITEF('%S Unable to interpret input file-spec',ERROR)
	   CALL LSL_PUTMSG(OK)
	   GOTO 50
	ENDIF
C
C Now make up the file specs - .DTA .NOD and .DER and open the files
C Use MESSAGE as workspace!
	OK=GETSPEC(ITLE,TITLEN,MESSAGE,MESLEN,'.DTA',' ',AMBIG)
	IF (.NOT.OK) THEN
	   CALL STR$UPCASE(ITLE,ITLE)
	   CALL WRITEF('%S opening input file',ERROR)
	   CALL LSL_PUTMSG(TRIDER__SEAFILE,ITLE(:TITLEN))
	   CALL LSL_ADDMSG(OK)
	   GOTO 50
	ENDIF
C
C Use PUTFLN to separate our file specification into its component
C parts of NODE::DEV:[DIR]FILE.EXT;VER etc
	CALL STR$UPCASE(ITLE,MESSAGE(:MESLEN))
	TITLEN=MESLEN
	CALL PUTFLN(ITLE,TITLEN)
C
C 1) the data transfer file (.DTA)
	STR_EXT='DTA'
	LEN_EXT=3
	CALL EXPFLN(ITLE,TITLEN)
C
C After all that try to open the file!
	OPEN (UNIT=LGC1,FILE=ITLE(:TITLEN),STATUS='OLD',
     &	      READONLY,FORM='UNFORMATTED',ERR=10)
	CALL WRITEF('.DTA file %S opened for read',
     &		    ITLE(:TITLEN))
	OPNDTA=.TRUE.
C
C 2) the node transfer file
	STR_EXT='NOD'
	LEN_EXT=3
	CALL EXPFLN(ITLE,TITLEN)
	OPEN (UNIT=LGC3,FILE=ITLE(:TITLEN),STATUS='OLD',
     &	      READONLY,FORM='UNFORMATTED',ERR=20)
	CALL WRITEF('.NOD file %S opened for read',ITLE(:TITLEN))
	OPNNOD=.TRUE.
C
C 3) the derivative transfer file
	STR_EXT='DER'
	LEN_EXT=3
	CALL EXPFLN(ITLE,TITLEN)
	OPEN (UNIT=LGC2,FILE=ITLE(:TITLEN),STATUS='NEW',
     &	      FORM='UNFORMATTED',ERR=30)
	CALL WRITEF('.DER file %S opened for write',ITLE(:TITLEN))
	OPNDER=.TRUE.
	GOTO 60
C
C ......................................................................
C 			E R R O R S.
C Error opening file
10	CALL LSL_GETMSG(TRIDER__OPNDTA,MESSAGE,MESLEN)
	GOTO 40
20	CALL LSL_GETMSG(TRIDER__OPNNOD,MESSAGE,MESLEN)
	GOTO 40
30	CALL LSL_GETMSG(TRIDER__OPNDER,MESSAGE,MESLEN)
40	CALL EXPAND('%'//MESSAGE(:MESLEN),ITLE(:TITLEN))
	CALL TXTOUT(.FALSE.)
	CALL ERRSNS(,I,J)		! find out what the problem is
	IF (J.EQ.0) J=I
	CALL LSL_GETMSG(J,MESSAGE,MESLEN)
	J=INDEX(MESSAGE,'!') - 1		! (ignore any FAO stuff)
	IF (J.LT.0) J=MESLEN
	CALL WRITEF('%'//MESSAGE(:MESLEN))
	IF (OPNDTA) THEN
	   STR_EXT='DTA'
	   LEN_EXT=3
	   CALL EXPFLN(ITLE,TITLEN)
	   CLOSE(UNIT=LGC1,DISP='KEEP')
	   OPNDTA=.FALSE.
	   CALL WRITEF('.DTA file %S closed',ITLE(:TITLEN))
	ENDIF
	IF (OPNNOD) THEN
	   STR_EXT='NOD'
	   LEN_EXT=3
	   CALL EXPFLN(ITLE,TITLEN)
	   CLOSE(UNIT=LGC3,DISP='KEEP')
	   OPNNOD=.FALSE.
	   CALL WRITEF('.NOD file %S closed',ITLE(:TITLEN))
	ENDIF
C
C ......................................................................
C
50	FILEIN_CMD=.FALSE.
C
60	RETURN
	END
