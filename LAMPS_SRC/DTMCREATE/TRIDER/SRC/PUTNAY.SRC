	SUBROUTINE PUTNAY(NOD,NTEM,LAX,NUM,LUNB)
C
***	MODULE	PUTNAY
***	IDENT	23NO87
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
CMOD	DTMCREATE version with LSLLIB			TJH 23-Nov-1987
CMOD	Graphics added					TJH 30-Jul-1986
C	Standardised/incorporated into LSL DTMCREATE	TJH 30-May-1985
C
C
C Put the neighbours of a node (NOD) into storage, get them from
C NTEM. There are NUM of them, and LAX room for them in NTEM.
C the random access file lun is LUNB.
C
C Parameters:
	INCLUDE 'LSL$CMNTRIDER:TRIDERMSG.PAR'
	INCLUDE  'LSL$DTMCREATESYS:GRIDPARAMS.PAR'
C
C Common:
	INCLUDE 'LSL$DTMCREATESYS:MESSAGE.CMN'
	INCLUDE  'LSL$DTMCREATESYS:STACK.CMN'
	INCLUDE  'LSL$DTMCREATESYS:IOLUNS.CMN'
	INCLUDE  'LSL$DTMCREATESYS:GRAFCS.CMN'
	INCLUDE  'LSL$DTMCREATESYS:GRAFDEV.CMN'
C
	DIMENSION NTEM(NTMSIZ)
	INTEGER	  NTEM2(0:10)		! for efficient writes
C
C ......................................................................
C
C Split the list into groups of 10, and store in the random
C access file. leave a pointer to the start in NAYB. Allocate
C storage in groups of 10 neighbours as necessary by using
C the stack.
C
	MREC=0
C
C Get a record to use, from the stack list of the free chain records
	LREC=IPSTCK
C
C Add one to the stack pointer, checking that it is not too large
	IF (IPSTCK.LT.NSTACK) THEN
	   IPSTCK=IPSTCK+1
	ELSE
	   GOTO 80			! report fatal error and exit
	ENDIF
C
C Put a pointer to it in NAYB
	NAYB(NOD)=LREC
C
C Calculate how many records will be needed altogether
	IFR=(NUM-1)/10+1
C
C Go through and write the records
	DO 60 I=1,IFR
	   J=(I-1)*10+1
	   K=J+9
C
C Here is a blank bit of record going to be written, then
C clear it to zero (in case this is an ICL non-clear machine!)
	   IF(K.LE.NUM)GOTO 20
	   M=NUM+1
	   DO 10 L=M,K
	      NTEM(L)=0
10	   CONTINUE
C
C If this is last record for node, collect number in record (M).
C If it is not the last record M is the record for continuation
20	   M=NUM-J+1
	   IF(I.EQ.IFR)GOTO 30
C
C Get a record to use, from the stack list of the free chain records
	   MREC=IPSTCK
C
C Add one to the stack pointer, checking that it is not too large
	   IF (IPSTCK.LT.NSTACK) THEN
	      IPSTCK=IPSTCK+1
	   ELSE
	      GOTO 80			! report fatal error and exit
	   ENDIF
	   M=-MREC
C
C Check whether this record is in memory file or disk file
30	   IF(LREC.LE.NFREES) THEN		! in memory file area
	      LA=0
	      DO 40 L=J,K
	         LA=LA+1
	         IFREES(LA,LREC)=NTEM(L)
40	      CONTINUE
	      IFREES(11,LREC)=M
	   ELSE					! to disk file		
C
C Write the record out - ten neighbours, next record (or length
C of present record if +ve).
	      LOFF=LREC-NFREES
	      DO 50 L=0,9
	         NTEM2(L)=NTEM(J+L)
50	      CONTINUE
	      NTEM2(10)=M
	      LOFF=LREC-NFREES
	      WRITE (LUNB,REC=LOFF,ERR=70) NTEM2
	   ENDIF
C
C Update the record number for the next record
	   LREC=MREC
60	CONTINUE
C
C That's it
	RETURN
C
C ......................................................................
C 			E R R O R S
C
C Error during random write
70	CALL ERRSNS(,I,J)
	IF (J.EQ.0) THEN J=I
	   CALL LSL_GETMSG(TRIDER__RANDWRT,MESSAGE,MESLEN)
	   CALL EXPAND('%'//MESSAGE(:MESLEN),'PUTNAY')
	   CALL TXTOUT(.TRUE.)
C
C Get secondary RMS/FORTRAN error
	   CALL LSL_GETMSG(J,MESSAGE,MESLEN)	! what went wrong
	   MESLEN=INDEX(MESSAGE,'!') - 1		! (ignore any FAO stuff)
	   IF (MESLEN.LT.0) MESLEN=I
	   GOTO 90
C
C Insufficient stack
80	   CALL LSL_GETMSG(TRIDER__STACKOVR,MESSAGE,MESLEN)
90	   CALL ALARMS(MESSAGE(:MESLEN))
	   END
