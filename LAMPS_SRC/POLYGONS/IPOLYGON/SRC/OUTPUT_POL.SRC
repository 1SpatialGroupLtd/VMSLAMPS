C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-05-12 16:37:50.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C
C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	LOGICAL*4 FUNCTION OUTPUT_POL()
C
***	MODULE	OUTPUT_POL
***	IDENT	12MY92
C
	IMPLICIT NONE
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
	LOGICAL*4	ACTUAL_OUTPUT_POL
C
C	........................................................................
C
	OUTPUT_POL = ACTUAL_OUTPUT_POL(
     &			POLMAX,TABMAX,POLNEST_MAX, PARTS_MAX,
     &			%VAL(PTR$_DUFF_POLYGON),
     &			%VAL(PTR$_NEST_START),
     &			%VAL(PTR$_POLY_AREA),
     &			%VAL(PTR$_POLY_START),
     &			%VAL(PTR$_TREE_IN_POLY),
     &			%VAL(LOC_PTR$_T_PTRS),
     &			%VAL(LOC_PTR$_P_PTRS),
     &			%VAL(LOC_PTR$_RETRACE)
     &		  )
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	LOGICAL*4 FUNCTION ACTUAL_OUTPUT_POL(
     &		POLMAX,TABMAX,POLNEST_MAX,PARTS_MAX,
     &		DUFF_POLYGON,
     &		NEST_START,
     &		POLY_AREA,
     &		POLY_START,
     &		TREE_IN_POLY,
     &		T_PTRS,
     &		P_PTRS,
     &		RETRACE
     &	)
C
C

***	MODULE	ACTUAL_OUTPUT_POL
***	IDENT	04NO91
C
C	Copyright Laser-Scan Ltd., Cambridge, England
C
CMOD	Now passes output IFF LUN to GET_POLY_LABEL	TJH  29-Mar-1989
CMOD	Use of FC pair file to turn seed point FC into
C	poly boundary FC				AC   11-Aug-1988
CMOD	Take into account nested trees as well as nested
C	polygons					AC   24-Jul-1988
CMOD	Modified call to IFF_HEADER and new calls to
C	CLOSE_IFF_OUT. Revisions to
C	cope with new COMMAND.CMN and output both 
C	labels and idents. Inclusion of zero-area 
C	polygons in nested boundaries			AC   24-May-1988
CMOD	Only output summary if /LOG set (MOD 2/470)	TJH  22-May-1987
C
C	Author						TJH  13-Mar-1987
C
C
C Function to output the hard earned closed polygon data to IFF file.
C If the user specified /OPTIONS=NEST (default), 1st order nested
C polygons are included. 
C
C Function returns SS$_NORMAL if all is well or one of a variety of
C IPOLYGON error codes on failure.
C
C ......................................................................
C
	IMPLICIT NONE
C
C Parameters:
	INTEGER*2	X,Y
	PARAMETER 	(X=1, Y=2)
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNIPOLYGON:IPOLYGONMSG.PAR'
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
	INTEGER		SS$_ABORT
	EXTERNAL	SS$_ABORT	! failure
	INTEGER		STS$K_WARNING
	EXTERNAL	STS$K_WARNING
C
C Common:
	INCLUDE		'LSL$CMNIPOLYGON:COMMAND.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:FILE.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:COVERAGES.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:TREES.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:TABLES.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:SECTOR.CMN'
	INCLUDE		'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE		'LSL$CMNLSL:TXTC.CMN'
	INCLUDE		'LSL$CMNLSL:STATUS.CMN'
C
C Arguments
	INTEGER*4	POLMAX
	INTEGER*4	TABMAX
	INTEGER*4	POLNEST_MAX
	INTEGER*4	PARTS_MAX
C
	INTEGER		DUFF_POLYGON((POLMAX+31)/32)
	INTEGER		NEST_START(POLMAX+1)
	REAL		POLY_AREA(POLMAX)
	INTEGER		POLY_START(3,POLMAX)
	INTEGER		TREE_IN_POLY(POLMAX)
C
C W/s:
	LOGICAL		DOAC		! transfer seed pt ACs?
	INTEGER		DUFPOL		! count of duf polygons
	INTEGER		FSN		! FSN of seed point
	INTEGER		AFSN		! ABS(FSN)
	INTEGER*2	IFSN,ISQ	! feature serial no. 
	INTEGER*2	FSARR(4)	! feature status
	INTEGER		I,J,K		! tmp vars
	INTEGER*2	IENDS		! pen control 1=down, 0=up
	LOGICAL		LASTPTR		! pointer to last nested poly
C					! (unused)
	INTEGER		LPOSNO		! address of NO
	INTEGER	  	NLOOP		! number of 200 pt. STs
	INTEGER		NOBJ		! number of nested objects -
	INTEGER	  	NNEST		! number of nested polygons
	INTEGER	  	NTREE		! number of nested trees
	INTEGER	  	NPTS		! number of coords
	INTEGER		POLOUT		! number of polygons output
	INTEGER	  	POLY_INDX	! current polygon
	INTEGER	      P_PTRS(POLNEST_MAX) ! pointers to nested polys
	INTEGER	      T_PTRS(POLNEST_MAX) ! pointers to nested trees
	INTEGER*2	RET_FC		! FC to be used for poly boundary
	INTEGER*2	SEED_FC		! FC of seed point within poly
C
C
	REAL		DOUGHNUT_AREA	! poly area less nests
	REAL		RETRACE(2,POLNEST_MAX+3) ! for retracing steps
	CHARACTER*256	TEXT(COVMAX)	! polygon label texts
	INTEGER*2 	LENGTH(COVMAX)	! lengths of TEXTs
	INTEGER		UNDEFPOL	! count of undefined polygons
	LOGICAL		UNDEF		! .T. if undefined polygon
C
C Functions:
	LOGICAL		EXT1V		! extract 1-bit field
	INTEGER		NESTED_TREES	! adds trees to nested poly list
	INTEGER		FIRST_NEST	! gets 1st order nested polys
	INTEGER		GET_POLY	! gets polygon coords
	INTEGER		GET_TREE	! gets tree coordinates
	INTEGER		GET_POLY_LABEL	! gets polygon label
	INTEGER		GET_POLY_IDENT	! gets polygon ident
	INTEGER		GET_SEED_FSN	! gets FSN of polygon seed pt.
	INTEGER		IFF_HEADER	! outputs IFF header entries
	INTEGER		IFFMODIFY	! outputs IFF header entries
	LOGICAL		GET_PAIRED_FC	! converts seed point FC to poly
C					! boundary FC
	LOGICAL		PROCESS_AC_TEXT	! modify propagated ACs
	DATA		FSARR/4*0/	! array used to specify new feature
C
C ......................................................................
C
	ACTUAL_OUTPUT_POL=%LOC(SS$_NORMAL)
C
	CALL FRAMED_MES('Writing Polygon Boundary File',29)
C
C
	ACTUAL_OUTPUT_POL=IFFMODIFY(POLLUN,POL_FILE(:POL_LEN),,
     &					POL_FILE_ID,.FALSE.)
	IF (.NOT.ACTUAL_OUTPUT_POL) THEN
	   ACTUAL_OUTPUT_POL=%LOC(SS$_ABORT)
	   DELETE=.TRUE.
	   GOTO 65				
	ENDIF
C
C Put the /CLOSED_CODES=(FC:'integer') argument into feature code
C field of FSARR (or its default)
	IFSN=0
C
C Reset counters for total polygons output, undefined & duff polygons
	POLOUT=0
	UNDEFPOL=0
	DUFPOL=0
C
C We will transfer any ACs from the seed point
	IF (HAD_SEED) THEN
	   DOAC=(USE_AC.OR.USE_TEXT)
	ELSE
	   DOAC=.FALSE.
	ENDIF
C
C Make all the header entries (including layer 0)
	ACTUAL_OUTPUT_POL=IFF_HEADER(POLLUN,.TRUE.,.FALSE.,.FALSE.)
	IF (.NOT.ACTUAL_OUTPUT_POL) GOTO 65
C
C Create polygon layer (1 by default)
	CALL IFFSEL(POLLUN)
	LPOSNO=LPOSE
	CALL IFFNO(POL_LAY,0,0)
C
C ......................................................................
C    L O O P    F O R    E  A C H    P O L Y G O N   I N    T U R N
C
	DO 60 POLY_INDX=1,NUM_POLY
C
C Ensure that this is not a duff polygon
	   IF (EXT1V(POLY_INDX,DUFF_POLYGON(1))) THEN
	      DUFPOL=DUFPOL+1
	      GOTO 60
	   ENDIF
C
C No need to output bounding polygon if no nesting
	   IF (.NOT.HAD_NEST.AND.(POLY_INDX.EQ.BOUND_POL)) GOTO 60
C
C No nests (yet)
	   NNEST=0
	   NTREE=0
C
C Is this an unwanted isolated polygon? If so ignore it.
	   IF (POLY_START(1,POLY_INDX).LT.0) GOTO 60
C
C Are we to do nests? And if so are there any?
	   IF (HAD_NEST) THEN
C
C Avoid bounding polygon's nests!!!!
	      IF (POLY_INDX.NE.BOUND_POL) THEN
C
C Does the polygon contain any nested polygons?
	         IF (NEST_START(POLY_INDX).GT.0) THEN
	            CALL IFFSEL(INLUN)
	            ACTUAL_OUTPUT_POL=FIRST_NEST(POLY_INDX,P_PTRS,NNEST,
     &				.TRUE.,LASTPTR)
	            IF (.NOT.ACTUAL_OUTPUT_POL) GOTO 65
	         ENDIF
	      ENDIF
C
C Are we to deal with trees?
	      IF (ONE_USE) THEN
	         IF (TREE_IN_POLY(POLY_INDX).GT.0) THEN
	            CALL IFFSEL(INLUN)
	 	    ACTUAL_OUTPUT_POL=NESTED_TREES(POLY_INDX,T_PTRS,NTREE)
		    IF (.NOT.ACTUAL_OUTPUT_POL) GOTO 65
	         ENDIF
	      ENDIF
	   ENDIF
C
C Thus the total number of nested objects is....
	   NOBJ=NNEST+NTREE
C
C ......................................................................
C
C If seed point FSN is to be used for poly lable or its FC is to be used to
C determine the boundary FC then get seed point details.
	   IF (USE_FSN.OR.HAD_FC_PAIR) THEN
	      ACTUAL_OUTPUT_POL=GET_SEED_FSN(POLY_INDX,FSN,SEED_FC)
	      IF (.NOT.ACTUAL_OUTPUT_POL) GOTO 65
	   ENDIF
C
C If /SEED=(USE:FSN) specified convert seed point FSN to unsigned word (via
C AFSN) and thence to IFSN, otherwise just increment IFSN. Note that FSN is
C retained for use in GET_SEED_LABEL called by GET_POLY_LABEL. 
	   IF (USE_FSN) THEN
	      AFSN=ABS(FSN)
	      IF (AFSN.GT.32767) AFSN=AFSN-65536
	      IFSN = AFSN
	   ELSE
	      IFSN=IFSN+1
	   ENDIF
C
C Setup FSARR to have the correct FC for the poly boundary, use POL_FC by
C default
	   FSARR(1)=POL_FC
	   IF (HAD_FC_PAIR) THEN
	      IF (GET_PAIRED_FC(SEED_FC,RET_FC)) FSARR(1)=RET_FC
	   ENDIF
C
C Create a new feature
	   ISQ=0
	   CALL IFFSEL(POLLUN)
	   CALL IFFNF(IFSN,ISQ)
	   POLOUT=POLOUT+1
	   CALL IFFFS(FSARR)
C
C If desired calculate the area of the polygon allowing for nests
	   IF (HAD_AREA) THEN
	      DOUGHNUT_AREA=POLY_AREA(POLY_INDX)
	      IF (NNEST.GT.0) THEN
	         DO 10 I=1,NNEST
	            DOUGHNUT_AREA=DOUGHNUT_AREA-POLY_AREA(P_PTRS(I))
10	         CONTINUE
	      ENDIF
	   ENDIF
C
C If labels are to be written out then...
	   IF (POL_LABEL) THEN
	      UNDEF = .FALSE.
	      ACTUAL_OUTPUT_POL=GET_POLY_LABEL(POLY_INDX,TEXT,
     &					LENGTH,UNDEF,DOAC,POLLUN)
	      IF (.NOT.ACTUAL_OUTPUT_POL) GOTO 65

	      IF (UNDEF) UNDEFPOL=UNDEFPOL+1

	      CALL IFFSEL(POLLUN)
	      IF(HAD_PROP)THEN
C
C modify texts: IN_PREFIX text --> OUT_PREFIX text
		ACTUAL_OUTPUT_POL=PROCESS_AC_TEXT(TEXT,LENGTH)
	   	IF (.NOT.ACTUAL_OUTPUT_POL) GOTO 65
C
C output ACs for all covers
	         DO 15 I=1,NUM_COVER
	         TXTPTR=LENGTH(I)
	         CALL COPY_STRING(TEXT(I),TXTDSC)
	         CALL IFFAC(POL_CVR_AC(I),DOUGHNUT_AREA,TXTBUF,LENGTH(I))
	         IF(HAD_CONCAT.AND.I.EQ.1)GOTO 16	! only output one AC
15	         CONTINUE
16	         CONTINUE
	      ELSE
	         TXTPTR=LENGTH(1)
	         CALL COPY_STRING(TEXT(1),TXTDSC)
	         CALL IFFAC(POL_LABEL_AC,DOUGHNUT_AREA,TXTBUF,LENGTH(1))
	      ENDIF
	   ENDIF
C
C If idents are to be written out then...
	   IF (POL_IDENT) THEN
		ACTUAL_OUTPUT_POL=GET_POLY_IDENT(POLY_INDX,TEXT,LENGTH)
	   	IF (.NOT.ACTUAL_OUTPUT_POL) GOTO 65
	   	CALL IFFSEL(POLLUN)
	   	TXTPTR=LENGTH(1)
	   	CALL COPY_STRING(TEXT(1),TXTDSC)
	   	CALL IFFAC(POL_IDENT_AC,DOUGHNUT_AREA,TXTBUF,LENGTH(1))
	   ENDIF
C
C Get polygon's coordinates
	   POLY_PTS=0
	   CALL IFFSEL(INLUN)
	   ACTUAL_OUTPUT_POL=GET_POLY(POLY_INDX)
	   IF (.NOT.ACTUAL_OUTPUT_POL) GOTO 65
	   CALL IFFSEL(POLLUN)
	   IENDS=0
C
C If we do have nests we will plot them before terminating the outside
C polygon POLY_INDX. So we must therefore save the last 2 points for
C plotting later.
	   IF (NOBJ.GT.0) THEN
	      NLOOP=(POLY_PTS-2)/200
	      NPTS=(POLY_PTS-2)
	      RETRACE(X,NOBJ)=POLY_BUF(X,POLY_PTS-2)
	      RETRACE(Y,NOBJ)=POLY_BUF(Y,POLY_PTS-2)
	      RETRACE(X,NOBJ+1)=POLY_BUF(X,POLY_PTS-1)
	      RETRACE(Y,NOBJ+1)=POLY_BUF(Y,POLY_PTS-1)
	      RETRACE(X,NOBJ+2)=POLY_BUF(X,POLY_PTS)
	      RETRACE(Y,NOBJ+2)=POLY_BUF(Y,POLY_PTS)
	   ELSE
	      NLOOP=POLY_PTS/200
	      NPTS=POLY_PTS
	   ENDIF
	   J=0
	   IF (NLOOP.GT.0) THEN
	      DO 20 I=1,NLOOP
	         CALL IFFST(POLY_BUF(1,J+1),200,IENDS)
	         IENDS=1	   	   
	         J=J+200
20	      CONTINUE
	   ENDIF
	   IF (MOD(NPTS,200).NE.0) THEN
	      CALL IFFST(POLY_BUF(1,J+1),MOD(NPTS,200),IENDS)
	   ENDIF
C
C Are we to do 1st order nesting?
	   IF (HAD_NEST) THEN
	      IF (NOBJ.GT.0) THEN
C
C Get the coordinates of the 1st order nested object(s)
	         DO 40 I=1,NOBJ
	            POLY_PTS=0
	            CALL IFFSEL(INLUN)
C
C Nested polygons come before the nested trees - once GET_POLY or GET_TREE
C have been called nested objects all look the same - ie a set of coordinates
C in POLY_BUF
	            IF (I.LE.NNEST) THEN
		       ACTUAL_OUTPUT_POL=GET_POLY(P_PTRS(I))
	            ELSE
		       ACTUAL_OUTPUT_POL=GET_TREE(T_PTRS(I-NNEST))
		    ENDIF
		    IF (.NOT.ACTUAL_OUTPUT_POL) GOTO 65
C
C Store the first point of this polygon/tree for retracing back out of the
C nests
	            CALL IFFSEL(POLLUN)
	            IF (I.NE.NOBJ) THEN
	               RETRACE(X,NOBJ-I)=POLY_BUF(X,POLY_PTS)
	               RETRACE(Y,NOBJ-I)=POLY_BUF(Y,POLY_PTS)
	            ENDIF
	            IENDS=0
	            NLOOP=POLY_PTS/200
	            J=0
	            IF (NPTS.GT.0) THEN
	               DO 30 K=1,NLOOP
	                  CALL IFFST(POLY_BUF(1,J+1),200,IENDS)
	                  IENDS=1	   	   
	                  J=J+200
30	               CONTINUE
	            ENDIF
	            IF (MOD(POLY_PTS,200).NE.0) THEN
	               CALL IFFST(POLY_BUF(1,J+1),
     &				MOD(POLY_PTS,200),IENDS)
	            ENDIF
40	         CONTINUE
C
C Now output the coordinates needed to retrace our steps back to the
C outer polygon - invisible steps first
	         IENDS=0
	         DO 50 I=1,NOBJ
	            CALL IFFST(RETRACE(1,I),1,IENDS)
50	         CONTINUE
	         IENDS=1
	         CALL IFFST(RETRACE(1,NOBJ+1),2,IENDS)
	      ENDIF
	   ENDIF
C
C End feature
	   CALL IFFEF
60	CONTINUE
C
C End layer etc
	CALL IFFSEL(POLLUN)
	CALL IFFUNO(LPOSNO)
	CALL IFFEO
	CALL IFFEM
	CALL IFFEJ

65	IF (DELETE.OR..NOT.ACTUAL_OUTPUT_POL.OR.
     &	      (IBITS(LSL_STATUS,0,3).EQ.%LOC(STS$K_WARNING))) THEN
	   CALL IFFCLO(POLLUN,%LOC(SS$_ABORT)) ! close output file
	ELSE
	   CALL IFFCLO(POLLUN,%LOC(SS$_NORMAL))! close output file
	ENDIF

	IF (IERCD.NE.0) THEN			! error?
	   ACTUAL_OUTPUT_POL=IPOL__CLPOLIFF		! error closing file
	   CALL LSL_PUTMSG(ACTUAL_OUTPUT_POL,POL_FILE(:POL_LEN))!tell user
	ENDIF
C
	IF (.NOT.ACTUAL_OUTPUT_POL) THEN
	   ACTUAL_OUTPUT_POL=%LOC(SS$_ABORT)
	ELSE
	   IF (HAD_LOG) THEN
	      CALL EXPAND(
     &	      'Number of features output to /POLYGONS file ........ %N',
     &								POLOUT)
	      IF (HAD_LIS) THEN
	         CALL FLWLIN
	      ELSE
	         CALL TTWLIN
	      ENDIF
	      IF (DUFPOL.GT.0) THEN
	         CALL EXPAND(
     &	      'Number of duff polygons omitted from output ........ %N',
     &							     	DUFPOL)
	         IF (HAD_LIS) THEN
	            CALL FLWLIN
	         ELSE
	            CALL TTWLIN
	         ENDIF
	      ENDIF
	      IF (UNDEFPOL.GT.0) THEN
	         CALL EXPAND(
     &	      'Number of polygons with undefined labels ........... %N',
     &							     	UNDEFPOL)
	         IF (HAD_LIS) THEN
	            CALL FLWLIN
	         ELSE
	            CALL TTWLIN
	         ENDIF
	      ENDIF
	   ENDIF
	ENDIF
C
C Finished....
	RETURN
	END
