C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-07-23 12:30:42.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C
C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	LOGICAL*4 FUNCTION CHECK_LRCODE_LABEL(
     &		POLY_INDX,TEXT,LENGTH,OLD_TEXT,OLD_LENGTH,UNDEF,FIRST_SEG)
C
***	MODULE	CHECK_LRCODE_LABEL
***	IDENT	23JL93
C
	IMPLICIT NONE
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
C Arguments:
	INTEGER		POLY_INDX	! the polygon in question
	CHARACTER*(*)	TEXT		! the polygon label
	INTEGER*2	LENGTH		! the length of TEXT
	CHARACTER*(*)	OLD_TEXT	! the previous segment label 
	INTEGER*2 	OLD_LENGTH	! prev. segment label length 
	LOGICAL		UNDEF		! .T. if undefined polygon
	LOGICAL	  	FIRST_SEG	! reading first seg. in polygon?
C
	LOGICAL*4	ACTUAL_CHECK_LRCODE_LABEL
C
C	........................................................................
C
	CHECK_LRCODE_LABEL = ACTUAL_CHECK_LRCODE_LABEL(
     &		POLY_INDX,TEXT,LENGTH,OLD_TEXT,OLD_LENGTH,UNDEF,FIRST_SEG,
     &			POLMAX,TABMAX,POLNEST_MAX, PARTS_MAX,
     &			%VAL(PTR$_POLY_PARTS),
     &			%VAL(PTR$_POLY_START),
     &			%VAL(PTR$_SEGTAB),
     &			%VAL(PTR$_STTAB)
     &		  )
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	LOGICAL*4 FUNCTION ACTUAL_CHECK_LRCODE_LABEL(
     &		POLY_INDX,TEXT,LENGTH,OLD_TEXT,OLD_LENGTH,UNDEF,FIRST_SEG,
     &		POLMAX,TABMAX,POLNEST_MAX,PARTS_MAX,
     &		POLY_PARTS,
     &		POLY_START,
     &		SEGTAB,
     &		STTAB
     &	)
C

***	MODULE	ACTUAL_CHECK_LRCODE_LABEL
***	IDENT	30OC91
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
CMOD    The ACINCON and ACMISS messages now have the correct arguments
C       passed so that they do not crash. (Mod 1258).	ST  23-Jul-1993
C       the feature when /KEEP has not been specified.	ST  08-Apr-1993
CMOD	Modified to be used in conjunction with ASSIGN_LRCODE
C							AC   02-Jun-1988
C	Author						TJH  26-Aug-1987
C
C All the segments forming a polygon are found and the appropriate left or 
C right AC is read. The user is warned if the polygon has comflicting segment 
C texts and ACTUAL_CHECK_LRCODE_LABEL returns UNDEF as true. This will cause omission
C of the polygon from the output file.
C
C Nests are not included
C
C Function returns SS$_NORMAL if all is well or one of a variety of
C IPOLYGON error codes on failure.
C
C ......................................................................
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNIPOLYGON:IPOLYGONMSG.PAR'
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
C
C Common:
	INCLUDE		'LSL$CMNIPOLYGON:COMMAND.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:FILE.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:TABLES.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:SECTOR.CMN'
	INCLUDE		'LSL$CMNLSL:TXTC.CMN'
C
C Arguments:
	INTEGER		POLY_INDX	! the polygon in question
	CHARACTER*(*)	TEXT		! the polygon label
	INTEGER*2	LENGTH		! the length of TEXT
	CHARACTER*(*)	OLD_TEXT	! the previous segment label 
	INTEGER*2 	OLD_LENGTH	! prev. segment label length 
	LOGICAL		UNDEF		! .T. if undefined polygon
	LOGICAL	  	FIRST_SEG	! reading first seg. in polygon?
C
	INTEGER*4	POLMAX
	INTEGER*4	TABMAX
	INTEGER*4	POLNEST_MAX
	INTEGER*4	PARTS_MAX
C
	INTEGER		POLY_PARTS(2,POLMAX*4)
	INTEGER		POLY_START(3,POLMAX)
	INTEGER*4	SEGTAB(2,TABMAX)
	INTEGER*4	STTAB(2,TABMAX)
C
C W/s
	INTEGER*2 ACTYPE	! type of AC 
	INTEGER   FSN,ISQ	! feature serial number, internal no.
	INTEGER*2 IECODE,IELEN	! IFF entry code and length
	LOGICAL	  HAD_LEFT	! had label for left poly
	LOGICAL	  HAD_RIGHT	! had label for right poly
	INTEGER   I		! temp. vars.
	INTEGER*2 IENDS		! line state (coded bitwise)
	INTEGER	  IREV		! if -ve then reverse segment
	CHARACTER*256 MESTXT	! error message text
	INTEGER*2 MESLEN	! its length
	CHARACTER*256 MESTXT2	! error message text
	INTEGER*2 MESLEN2	! its length
	INTEGER*2 NPTS		! number of coord pairs to be read
	INTEGER   SEGPTR	! pointer into SEGTAB
	INTEGER   SEGSTOP	! pointer into SEGTAB
C
C Functions:
	INTEGER	  EXPAND	! format messages
	INTEGER	  STR$COMPARE_EQL	
C				! string comparison 
C
C ......................................................................
C
	ACTUAL_CHECK_LRCODE_LABEL=%LOC(SS$_NORMAL)
C
C Define the start index into POLY_PARTS
	SEGPTR=IABS(POLY_START(1,POLY_INDX))
C
C Store sign of segment pointer. If negative we will have to
C reverse this segment for contiguous polygon boundary formation
	CALL IFFSEL(INLUN)
C
C ......................................................................
C		N E X T   S E G M E N T
C
10	IREV=ISIGN(1,POLY_PARTS(1,SEGPTR))
C
C Jump to first segment of the polygon (IFF address stored
C in /TABLES/SEGTAB)
	CALL IFFPKE(IECODE,IELEN,
     &				SEGTAB(2,ABS(POLY_PARTS(1,SEGPTR))))
	IF (IELEN.LE.-1) GOTO 30	! eof?
	IF (IECODE.NE.'NF') THEN
	   ACTUAL_CHECK_LRCODE_LABEL=IPOL__LOST
	   CALL LSL_PUTMSG(ACTUAL_CHECK_LRCODE_LABEL,IECODE)
	   GOTO 70
	ENDIF
C
C This is a new segment...
	HAD_LEFT=.FALSE.
	HAD_RIGHT=.FALSE.
	CALL EIHRI(FSN,1,1)
	CALL EIHRI(ISQ,1,2)
C
C ......................................................................
C		N E X T   E N T R Y   I N   S E G M E N T
C
20	CALL IFFNXT(IECODE,IELEN)
	IF (IELEN.LE.-1) GOTO 30	! eof?
C
C 	Only interested in AC entries - an EF indicates we have gone too far
	IF (IECODE.NE.'EF'.AND.IECODE.NE.'AC') GOTO 20
C
C if we get this far then the most recent segment did not have the relevant 
C left/right code - thus report the error
	IF (IECODE.EQ.'EF') GOTO 50
C
C AC found - read type and act depending on the direction of polygon
C formation and direction of this segment. The rules are:
C
C 	Polygon formed clockwise:
C		 Use type RIGHT AC if segment used forwards  (IREV =  1)
C		 Use type LEFT  AC if segment used backwards (IREV = -1)
C 	Polygon formed anticlockwise:
C		 Use type LEFT  AC if segment used forwards  (IREV =  1)
C		 Use type RIGHT AC if segment used backwards (IREV = -1)
C
	CALL EIHRI(ACTYPE,1,1)			! read AC type
	IF (ACTYPE.EQ.LFT_CODE) THEN
	   IF (HAD_LEFT) GOTO 20		! use only 1st LFT_CODE AC
	   HAD_LEFT=.TRUE.
	ENDIF
	IF (ACTYPE.EQ.RGT_CODE) THEN
	   IF (HAD_RIGHT) GOTO 20		! use only 1st RGT_CODE AC 
	   HAD_RIGHT=.TRUE.
	ENDIF
C
C Have a left/right code that we have not seen before
	IF (CLOCK) THEN				! clockwise polygon
	   IF (ACTYPE.EQ.RGT_CODE.AND.IREV.EQ.1	! read this AC?
     &			.OR.
     &	       ACTYPE.EQ.LFT_CODE.AND.IREV.EQ.-1) THEN
	      CALL READ_AC_TEXT(TEXT,LENGTH,IELEN)
	   ELSE
	      GOTO 20				! unwanted AC
	   ENDIF	   
	ELSE					! anticlockwise poly
	   IF (ACTYPE.EQ.LFT_CODE.AND.IREV.EQ.1	! read this AC?
     &			.OR.
     &	       ACTYPE.EQ.RGT_CODE.AND.IREV.EQ.-1) THEN
	      CALL READ_AC_TEXT(TEXT,LENGTH,IELEN)
	   ELSE
	      GOTO 20				! unwanted AC
	   ENDIF	   
	ENDIF
C
C When we get here we have a polygon label read from the AC text field.
C If first segment for polygon simply get next segment. Otherwise we
C must test that the ACs are consistent for this polygon.
	IF (FIRST_SEG) THEN
	   FIRST_SEG=.FALSE.
	   OLD_TEXT=TEXT	   		! remember text
	   OLD_LENGTH=LENGTH			! and length
	ELSE
C
C Have a left/right code that should be tested against the previous one
	   I=STR$COMPARE_EQL(TEXT(:LENGTH),OLD_TEXT(:OLD_LENGTH))
	   IF (I.EQ.1) GOTO 40
	ENDIF
C
C ......................................................................
C		M O V E   O N T O   N E X T   S E G M E N T
C
C Have we finished the polygon? If not get next segment forming the
C polygon and add its coordinates into POLY_BUF
	IF (POLY_PARTS(2,SEGPTR).EQ.0) GOTO 70	! return
	SEGPTR=POLY_PARTS(2,SEGPTR)
	GOTO 10
C
C ......................................................................
C		U N E X P E C T E D   E O F
C
30	ACTUAL_CHECK_LRCODE_LABEL=IPOL__UNEXPEOF
	CALL LSL_PUTMSG(ACTUAL_CHECK_LRCODE_LABEL,SEED_FILE(:SEED_LEN))
	GOTO 70
C
C ......................................................................
C		I N C O N S I S T E N T   A C    C O D E S
C	
40	MESLEN=EXPAND('%WS ',MESTXT)
	IF (.NOT.OPT_KEEP) THEN
	   MESLEN2=EXPAND('%WS - polygon deleted',MESTXT2)
	ELSE
	   MESLEN2=EXPAND('%WS ',MESTXT2)
	ENDIF
	CALL LSL_PUTMSG(IPOL__ACINCON,MESTXT(1:MESLEN),FSN,MESTXT2(1:MESLEN2))
	CALL LSL_ADDSTR('Current segment: '//TEXT(:LENGTH))
	CALL LSL_ADDSTR('Previous segment: '//OLD_TEXT(:OLD_LENGTH))
	MESLEN=EXPAND('%WSPolygon labels in AC texts '//
     &			'inconsistent in feature with '//
     &		 	'FSN %N - polygon abandoned',MESTXT,FSN)
	GOTO 60
C
C ......................................................................
C 		N O   L E F T / R I G H T   A C   C O D E
C
50	MESLEN=EXPAND('%WS,',MESTXT)
	IF (.NOT.OPT_KEEP) THEN
	   MESLEN2=EXPAND('%WS - polygon deleted',MESTXT2)
	ELSE
	   MESLEN2=EXPAND('%WS ',MESTXT2)
	ENDIF
	CALL LSL_PUTMSG(IPOL__ACMISS,MESTXT(1:MESLEN),FSN,MESTXT2(1:MESLEN2))
C
C .....................................................................
C
C		W R I T E   B U G   R E P O R T 
C
C Get the coordinate string so can locate error
60	CALL IFFPKE(IECODE,IELEN,STTAB(1,IABS(POLY_PARTS(1,SEGPTR))))
	IF (IELEN.LT.0) THEN
	   ACTUAL_CHECK_LRCODE_LABEL=IPOL__LOST
	   CALL LSL_PUTMSG(ACTUAL_CHECK_LRCODE_LABEL)
	   GOTO 70
	ENDIF
	CALL EIHRS(NPTS,IENDS)
	CALL EIHRR(POLY_BUF(1,1),2,1)
C
C Write out to LITES
	IF (HAD_LITES) THEN
	   CALL FLWSEL(LITESLUN)
	   CALL FLWRTF('%%MESSAGE Polygon labelling error:')
	ENDIF
	CALL MES_OUT(POLY_BUF(1,1),MESTXT,MESLEN)
C
C Don't try to get any more segments for this polygon
	TEXT='Undefined polygon'
	LENGTH=17
	UNDEF=.TRUE.
C
C ......................................................................
C
70	RETURN
	END
