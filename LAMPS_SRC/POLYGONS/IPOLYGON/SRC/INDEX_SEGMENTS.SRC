C
C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	LOGICAL*4 FUNCTION INDEX_SEGMENTS()
C
***	MODULE	INDEX_SEGMENTS
***	IDENT	08MY92
C
	IMPLICIT NONE
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
	LOGICAL*4	ACTUAL_INDEX_SEGMENTS
C
C	........................................................................
C
	INDEX_SEGMENTS = ACTUAL_INDEX_SEGMENTS(
     &			POLMAX,TABMAX,POLNEST_MAX, PARTS_MAX,
     &			%VAL(PTR$_DUFF_POLYGON),
     &			%VAL(PTR$_NEST_START),
     &			%VAL(PTR$_POLY_LIST),
     &			%VAL(PTR$_POLY_PARTS),
     &			%VAL(PTR$_POLY_START),
     &			%VAL(PTR$_SEGMENT_INDEX),
     &			%VAL(PTR$_TREE_IN_POLY),
     &			%VAL(LOC_PTR$_T_PTRS),
     &			%VAL(LOC_PTR$_P_PTRS)
     &		  )
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	LOGICAL*4 FUNCTION ACTUAL_INDEX_SEGMENTS(
     &		POLMAX,TABMAX,POLNEST_MAX,PARTS_MAX,
     &		DUFF_POLYGON,
     &		NEST_START,
     &		POLY_LIST,
     &		POLY_PARTS,
     &		POLY_START,
     &		SEGMENT_INDEX,
     &		TREE_IN_POLY,
     &		T_PTRS,
     &		P_PTRS
     &	)
***	MODULE	ACTUAL_INDEX_SEGMENTS
***	IDENT	26MR90
C
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Author						SH   08-Nov-1989
C
C
C Function to set up arrays to give the polygon (with 1st order nests and
C contained trees) containing a given directed segment.
C
C Based on OUTPUT_ASCII
C
C Function returns SS$_NORMAL if all is well or one of a variety of
C IPOLYGON error codes on failure.
C
C ......................................................................
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNIPOLYGON:IPOLYGONMSG.PAR'
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
C
C Common:
	INCLUDE		'LSL$CMNIPOLYGON:COMMAND.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:COVERAGES.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:FILE.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:TREES.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:TABLES.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:SECTOR.CMN'
	INCLUDE		'LSL$CMNLSL:EXPC.CMN'
C Arguments
	INTEGER*4	POLMAX
	INTEGER*4	TABMAX
	INTEGER*4	POLNEST_MAX
	INTEGER*4	PARTS_MAX
C
	INTEGER		DUFF_POLYGON((POLMAX+31)/32)
	INTEGER		NEST_START(POLMAX+1)
	INTEGER*4	POLY_LIST(2,TABMAX*2)
	INTEGER		POLY_PARTS(2,POLMAX*4)
	INTEGER		POLY_START(3,POLMAX)
	INTEGER*4	SEGMENT_INDEX(-TABMAX:TABMAX)
	INTEGER		TREE_IN_POLY(POLMAX)
	INTEGER		T_PTRS(POLNEST_MAX)
	INTEGER		P_PTRS(POLNEST_MAX)

C
C
C W/s:
	INTEGER	  FSN		! feature serial number
	INTEGER	  I,J		! loop var
	LOGICAL	  LASTPTR	! pointer to last nested poly (unused)
	INTEGER	  NNEST		! number of nested polygons
	INTEGER	  NTREE		! number of nested trees
	INTEGER	  POLY_INDX	! current polygon
	INTEGER   SEGPTR	! pointer into SEGTAB
C
C Functions:
	LOGICAL		EXT1V		! extract 1-bit field
	INTEGER		FIRST_NEST	! gets 1st order nested polys
	INTEGER		NESTED_TREES	! gets nested trees
C
C Workspace:
	INTEGER		SEG		! directed segment
	INTEGER		SEGPOS		! position of segment in array
	INTEGER		POLPOS		! position in array of start
					! of current poly
	INTEGER		RINGPOS		! position in array of start
					! of current poly/nest/tree
	INTEGER		NSEG		! number of segments processed

C ......................................................................
C
	ACTUAL_INDEX_SEGMENTS=%LOC(SS$_NORMAL)
C
	CALL FRAMED_MES('Creating Segment Index for Propagation',38)
C
C Zeroise counter for segments, and clear arrays
	NSEG=0
	DO 5 I=1,TABMAX*2
	POLY_LIST(1,I)=0
	POLY_LIST(2,I)=0
	J=I
	IF(J.GT.TABMAX)J=TABMAX-J
	SEGMENT_INDEX(J)=0
5	CONTINUE
C
C ......................................................................
C            D O   B O U N D I N G   P O L Y G O N   F I R S T.
C
C Check that the bounding polygon is not duff
	IF (BOUND_POL.EQ.-9999) THEN
	   GOTO 30
	ENDIF
C
C Get the segments relating to this polygon	   
	SEGPTR=IABS(POLY_START(1,BOUND_POL))
	POLPOS=NSEG+1
	RINGPOS=NSEG+1
C
10	NSEG=NSEG+1
	SEG=POLY_PARTS(1,SEGPTR)
	POLY_LIST(1,NSEG)=SEG
	SEGMENT_INDEX(SEG)=POLPOS
C
C Have we finished the polygon? If not get next segment forming the polygon 
	IF (POLY_PARTS(2,SEGPTR).EQ.0)	GOTO 20
	SEGPTR=POLY_PARTS(2,SEGPTR)
	GOTO 10
20	POLY_LIST(2,RINGPOS)=NSEG-(RINGPOS-1)	! number of segments in ring
C
C ......................................................................
C    L O O P    F O R    E  A C H    P O L Y G O N   I N    T U R N
C
30	DO 100 POLY_INDX=1,NUM_POLY
C
C Ensure that this is not a duff polygon
	   IF (EXT1V(POLY_INDX,DUFF_POLYGON(1))) THEN
	      GOTO 100
	   ENDIF
C
C No nests or trees (yet)
	   NNEST=0
	   NTREE=0
C
C Is this the bounding polygon - which we have already done?
	   IF (POLY_INDX.EQ.BOUND_POL) GOTO 100
C
C Is this an unwanted isolated polygon? If so ignore it.
	   IF (POLY_START(1,POLY_INDX).LT.0) GOTO 100
C
C If we are to output nesting, does the polygon contain any nested
C polygons?
	   IF (HAD_NEST) THEN
	      IF (NEST_START(POLY_INDX).GT.0) THEN
	         ACTUAL_INDEX_SEGMENTS=FIRST_NEST(POLY_INDX,P_PTRS,NNEST,
     &			.TRUE.,LASTPTR)
	         IF (.NOT.ACTUAL_INDEX_SEGMENTS) GOTO 900
	      ENDIF
	   ENDIF
C
C Get the segments relating to this polygon	   
	   SEGPTR=IABS(POLY_START(1,POLY_INDX))
	   POLPOS=NSEG+1
	   RINGPOS=NSEG+1
C
40	   NSEG=NSEG+1
	   SEG=POLY_PARTS(1,SEGPTR)
	   POLY_LIST(1,NSEG)=SEG
	   SEGMENT_INDEX(SEG)=POLPOS
C
C Have we finished the polygon? If not get next segment forming the polygon 
	   IF (POLY_PARTS(2,SEGPTR).EQ.0) GOTO 50
	   SEGPTR=POLY_PARTS(2,SEGPTR)
	   GOTO 40
50	   POLY_LIST(2,RINGPOS)=NSEG-(RINGPOS-1)	! segments in ring
C
C Are we to do 1st order nesting? If so, append the FSNs of the nested
C polygon's segments
	   IF (HAD_NEST) THEN
C
C process the 1st order nested polygon(s)
	      DO 80 I=1,NNEST
C
C Get the segments relating to this NESTED polygon	   
	         SEGPTR=IABS(POLY_START(1,P_PTRS(I)))
	         RINGPOS=NSEG+1
C
60	         NSEG=NSEG+1
	         SEG=POLY_PARTS(1,SEGPTR)
	         POLY_LIST(1,NSEG)=SEG
	         SEGMENT_INDEX(SEG)=POLPOS
C
C Have we finished the polygon? If not get next segment forming the polygon 
		 IF (POLY_PARTS(2,SEGPTR).EQ.0)	GOTO 70
		 SEGPTR=POLY_PARTS(2,SEGPTR)
	         GOTO 60
C record number of segments in polygon, but negate to indicate a nested poly
70	         POLY_LIST(2,RINGPOS)=-(NSEG-(RINGPOS-1))
80	      CONTINUE
	   ENDIF
C
C Are we to process trees?
	   IF (ONE_USE.AND.HAD_NEST) THEN
	      IF (TREE_IN_POLY(POLY_INDX).GT.0) THEN
	         ACTUAL_INDEX_SEGMENTS=NESTED_TREES(POLY_INDX,T_PTRS,NTREE)
	         IF (.NOT.ACTUAL_INDEX_SEGMENTS) GOTO 900
	      ENDIF
C
	      DO 180 I=1,NTREE
C
	         SEGPTR=IABS(POLY_START(1,T_PTRS(I)))
	         RINGPOS=NSEG+1
C
160	         NSEG=NSEG+1
	         SEG=POLY_PARTS(1,SEGPTR)
	         POLY_LIST(1,NSEG)=SEG
	         SEGMENT_INDEX(SEG)=POLPOS
C
C Have we finished the polygon? If not get next segment forming the tree
		 IF (POLY_PARTS(2,SEGPTR).EQ.0)	GOTO 170
		 SEGPTR=POLY_PARTS(2,SEGPTR)
	         GOTO 160
C record number of segments in polygon, but negate to indicate a nested poly
170	         POLY_LIST(2,RINGPOS)=-(NSEG-(RINGPOS-1))
180	      CONTINUE
	   ENDIF
100	CONTINUE
C set a positive value beyond the end of the list, to terminate a reading
C the polygon list directly
	POLY_LIST(2,NSEG+1)=TABMAX+1
900	RETURN
	END
