C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-04-07 18:08:18.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4  FUNCTION CHECK_IFF_OUT()
C
***	MODULE	CHECK_IFF_OUT
***	IDENT	07AP89
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
CMOD	Now sets flags to show file opened OK		TJH 07-Apr-1989
C	Author						AC  19-May-1988
C
C Function to check ability to open selected IPOLYGON output files.
C
C Function returns one of 2 condition codes:
C
C	SS$_NORMAL	- success
C	SS$_ABORT	- something went wrong
C
C All file-specs and their lengths are taken from /FILCHS/ common.
C
C CHECK_IFF_OUT modifies the file-spec held in common to match the full
C file specification of the file acutally opened on disk. CHECK_IFF_OUT
C also sets the file-open flags in /FILE/ common as appropriate
C
C All error reporting is done locally.
C
C .....................................................................
C
	IMPLICIT NONE
C
C Parameters:
	INTEGER*4 	SS$_ABORT
	EXTERNAL  	SS$_ABORT	! bad luck!
	INTEGER*4 	SS$_NORMAL
	EXTERNAL  	SS$_NORMAL	! normal successful completion
	INCLUDE 	'LSL$CMNIPOLYGON:IPOLYGONMSG.PAR'
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
C
C Workspace:
	INTEGER		CREATED(2)	! dummy quadword for IFFINQ
	INTEGER*2	NREV		! dummy word for IFFINQ
	INTEGER		REVISED(2)	! dummy quadword for IFFINQ
C
C Common:
	INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE 'LSL$CMNIPOLYGON:COMMAND.CMN'
	INCLUDE 'LSL$CMNPOLYGONS:FILE.CMN'
C
C Functions:
	LOGICAL		IFFCREATE	! open new IFF file to write
C
C.......................................................................
C
	CHECK_IFF_OUT = %LOC(SS$_NORMAL)     ! normal completion
C
C Ensure that the "did the file initially open OK" flags are unset
	SEG_OPENED=.FALSE.
	POL_OPENED=.FALSE.
	PIP_OPENED=.FALSE.
C
C Check for /POLYGONS IFF file?
C
	IF (OPT_POL) THEN
C
C Try to create it....
	   CHECK_IFF_OUT=IFFCREATE(POLLUN,POL_FILE(:POL_LEN),,,HAD_LOG)
	   IF (.NOT.CHECK_IFF_OUT) GOTO 10
C
C Get the file id of the opened file
	   CALL IFFSEL(POLLUN)
	   CALL IFFID(POL_FILE_ID)
C
C Get the full output file-spec as actually opened
	   CALL IFFINQ(POL_FILE,POL_LEN,CREATED,REVISED,NREV)
C
C Now close it untill later
	   CALL IFFCLO(POLLUN)	
C
C If error while closing then...
	   IF (IERCD.NE.0) THEN			
	      CHECK_IFF_OUT=IPOL__CLPOLIFF
	      CALL LSL_PUTMSG(CHECK_IFF_OUT,POL_FILE(:POL_LEN))
	      GOTO 10
	   ENDIF
	   POL_OPENED=.TRUE.	! /POLYGONS file opened ok
	ENDIF
C
C.......................................................................
C
C Check for /SEGMENTS IFF file?
C
	IF (OPT_SEG) THEN
C
C Try to create it....
	   CHECK_IFF_OUT=IFFCREATE(SEGLUN,SEG_FILE(:SEG_LEN),,,HAD_LOG)
	   IF (.NOT.CHECK_IFF_OUT) GOTO 10
C
C Get the file id of the opened file
	   CALL IFFSEL(SEGLUN)
	   CALL IFFID(SEG_FILE_ID)
C
C Get the full output file-spec as actually opened
	   CALL IFFINQ(SEG_FILE,SEG_LEN,CREATED,REVISED,NREV)
C
C Now close it untill later
	   CALL IFFCLO(SEGLUN)	
C
C If error while closing then...
	   IF (IERCD.NE.0) THEN			
	      CHECK_IFF_OUT=IPOL__CLSEGIFF
       	      CALL LSL_PUTMSG(CHECK_IFF_OUT,SEG_FILE(:SEG_LEN))
	      GOTO 10
	   ENDIF
	   SEG_OPENED=.TRUE.	! /SEGMENTS file opened ok
	ENDIF
C
C.......................................................................
C
C Check for /PIP IFF file?
C
	IF (OPT_PIP) THEN
C
C Try to create it....
	   CHECK_IFF_OUT=IFFCREATE(PIPLUN,PIP_FILE(:PIP_LEN),,,HAD_LOG)
	   IF (.NOT.CHECK_IFF_OUT) GOTO 10
C
C Get the file id of the opened file
	   CALL IFFSEL(PIPLUN)
	   CALL IFFID(PIP_FILE_ID)
C
C Get the full output file-spec as actually opened
	   CALL IFFINQ(PIP_FILE,PIP_LEN,CREATED,REVISED,NREV)
C
C Now close it untill later
	   CALL IFFCLO(PIPLUN)	
C
C If error while closing then...
	   IF (IERCD.NE.0) THEN			
	      CHECK_IFF_OUT=IPOL__CLPIPIFF
	      CALL LSL_PUTMSG(CHECK_IFF_OUT,PIP_FILE(:PIP_LEN))
	      GOTO 10
	   ENDIF
	   PIP_OPENED=.TRUE.	! /PIP file opened ok
	ENDIF
C
C.......................................................................
C
10	IF (CHECK_IFF_OUT) THEN
	   CHECK_IFF_OUT=%LOC(SS$_NORMAL)
	ELSE
	   CHECK_IFF_OUT=%LOC(SS$_ABORT)
	   DELETE=.TRUE.			! delete o/p files
	ENDIF
C
	RETURN
	END
