C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-05-12 15:37:30.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C
C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	LOGICAL*4 FUNCTION ASSIGN_LRCODE()
C
***	MODULE	ASSIGN_LRCODE
***	IDENT	08MY92
C
	IMPLICIT NONE
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
	LOGICAL*4	ACTUAL_ASSIGN_LRCODE
C
C	........................................................................
C
	ASSIGN_LRCODE = ACTUAL_ASSIGN_LRCODE(
     &			POLMAX,TABMAX,POLNEST_MAX, PARTS_MAX,
     &			%VAL(PTR$_NEST_START),
     &			%VAL(PTR$_POLY_DONE),
     &			%VAL(PTR$_POLY_START),
     &			%VAL(LOC_PTR$_P_PTRS)
     &		  )
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	LOGICAL*4 FUNCTION ACTUAL_ASSIGN_LRCODE(
     &		POLMAX,TABMAX,POLNEST_MAX,PARTS_MAX,
     &		NEST_START,
     &		POLY_DONE,
     &		POLY_START,
     &		PTRS
     &	)
C
C
***	MODULE	ACTUAL_ASSIGN_LRCODE
***	IDENT	13JL88
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Author						AC   25-May-1988
C	(Constructed from parts of OUTPUT_POL and GET_SEGAC_TEXT)
C
C	Function to assign a label for each polygon, obtained from the left/
C	right codes on the input segments.
C
C ..........................................................................
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNIPOLYGON:IPOLYGONMSG.PAR'
	INTEGER		SS$_ABORT
	EXTERNAL	SS$_ABORT	! error
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
C
C Common:
	INCLUDE		'LSL$CMNIPOLYGON:COMMAND.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:FILE.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:TABLES.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:SECTOR.CMN'
	INCLUDE		'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE		'LSL$CMNLSL:TXTC.CMN'
C
C Arguments
	INTEGER*4	POLMAX
	INTEGER*4	TABMAX
	INTEGER*4	POLNEST_MAX
	INTEGER*4	PARTS_MAX
C
	INTEGER		NEST_START(POLMAX+1)
	INTEGER		POLY_DONE(POLMAX)
	INTEGER		POLY_START(3,POLMAX)
	INTEGER		PTRS(POLNEST_MAX)

C W/s:
	INTEGER		NUM_SUCCESS	! # of polygons successfully labeled
	INTEGER		NUM_FAIL	! # of polygons that failed labelling
	INTEGER		NUMDUFF		! tmp variable
	INTEGER		I		! tmp variable
	INTEGER		NNEST		! number of nested polygons
	INTEGER	  	POLY_INDX	! current polygon
	LOGICAL		LASTPTR		! pointer to last netsed polygon
C					! (unused)
	LOGICAL		UNDEF		! polygon has inconsistent L/R codes
	LOGICAL		FIRST_SEG	! first segment in entire poly boundary
C					! including INNER boundaries
	CHARACTER*255	TEXT		! label from current segment
	INTEGER*2	LENGTH		! length of TEXT
	CHARACTER*255	OLD_TEXT	! label from FIRST_SEG
	INTEGER*2	OLD_LENGTH	! length of OLD_TEXT
C
C Functions:
	LOGICAL		EXT1V		! extract 1-bit field
	INTEGER		FIRST_NEST	! gets 1st order nested polys
	INTEGER		CHECK_LRCODE_LABEL
C					! checks poly label
C
C ......................................................................
C
	ACTUAL_ASSIGN_LRCODE=%LOC(SS$_NORMAL)
C
C Tell user of progress?
	CALL FRAMED_MES('Assigning Left/Right Codes',26)
C
C All IFF reading is from the segment file
	CALL IFFSEL(INLUN)
C
C Set counters
	NUM_SUCCESS=0
	NUM_FAIL=0
C
C ......................................................................
C    L O O P    F O R    E  A C H    P O L Y G O N   I N    T U R N
C
	DO 60 POLY_INDX=1,NUM_POLY
C
C Ensure that this is not a duff polygon
C	   IF (EXT1V(POLY_INDX,DUFF_POLYGON(1))) GOTO 60
C
C By default there are no nests
	   NNEST = 0
C
C Is this an unwanted isolated polygon? If so ignore it.
	   IF (POLY_START(1,POLY_INDX).LT.0) GOTO 60
C
C Are we to do nests? And if so are there any?
	   IF (HAD_NEST) THEN
C
C Avoid bounding polygon's nests (remembering that the bounding polygon, 
C although technically an isolation, has direction CLOCK) !!!!
	      IF (POLY_INDX.NE.BOUND_POL) THEN
C
C Does the polygon contain any nested polygons?
	         IF (NEST_START(POLY_INDX).GT.0) THEN
C
C If so get them...
	            ACTUAL_ASSIGN_LRCODE=FIRST_NEST(POLY_INDX,PTRS,NNEST,
     &				.TRUE.,LASTPTR)
	            IF (.NOT.ACTUAL_ASSIGN_LRCODE) GOTO 80
	         ENDIF
	      ENDIF
	   ENDIF

C Assume that the polygon has been defined
	   UNDEF=.FALSE.
C
C Go and get the label for the outer boundary of the polygon, and check for 
C consistency
	   FIRST_SEG=.TRUE.
	   ACTUAL_ASSIGN_LRCODE=CHECK_LRCODE_LABEL(POLY_INDX,
     &		TEXT,LENGTH,OLD_TEXT,OLD_LENGTH,UNDEF,FIRST_SEG)
	   IF (.NOT.ACTUAL_ASSIGN_LRCODE) GOTO 80
	   IF (UNDEF) GOTO 55		! undefined polygon?
C
C Now go and check the labels on any nested polygons
	   IF (NNEST.GT.0) THEN
	      DO 70 I=1,NNEST
	         ACTUAL_ASSIGN_LRCODE=CHECK_LRCODE_LABEL(PTRS(I),
     &		     TEXT,LENGTH,OLD_TEXT,OLD_LENGTH,UNDEF,FIRST_SEG)
	         IF (.NOT.ACTUAL_ASSIGN_LRCODE) GOTO 80
	         IF (UNDEF) GOTO 55	! undefined polygon?
70	      CONTINUE
	   ENDIF
C
C Note that this poly has consistent L/R coding
	   POLY_DONE(POLY_INDX)=.TRUE.
	   NUM_SUCCESS = NUM_SUCCESS+1
	   GOTO 60
C
C Note that this poly has inconsistent L/R coding
55	   POLY_DONE(POLY_INDX)=.FALSE.
C
C If /OPTIONS=UNDEFINED:DELETE then mark the polygon as duff
	   IF (.NOT.OPT_KEEP) CALL DUFF_POLY(POLY_INDX,NUMDUFF)
	   NUM_FAIL = NUM_FAIL+1
C
C Finished this polygon
60	CONTINUE
C
C ......................................................................
C
C Give summary?
	IF (HAD_LOG) THEN
	   CALL EXPAND(
     &	    'Number of polygons with consistent labelling ........ %N',
     &							NUM_SUCCESS)
	   IF (HAD_LIS) THEN
	      CALL FLWLIN
	   ELSE
	      CALL TTWLIN
	   ENDIF

	   IF (NUM_FAIL.GT.0) THEN
	      CALL EXPAND(
     &	    'Number of polygons with failed labelling ............ %N',
     &							NUM_FAIL)
	      IF (HAD_LIS) THEN
	         CALL FLWLIN
	      ELSE
	         CALL TTWLIN
	      ENDIF
	   ENDIF
	ENDIF
C
C ......................................................................
C
C finished function - if jump to here direct then function has been aborted
80	RETURN
	END

