C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-05-12 12:06:04.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C
C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	LOGICAL*4 FUNCTION GET_COVER_LABEL(POLY_INDX,TEXT,LENGTH,UNDEF)
C
***	MODULE	GET_COVER_LABEL
***	IDENT	08MY92
C
	IMPLICIT NONE
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
C
C Arguments:
	INTEGER		POLY_INDX	! the polygon in question
	CHARACTER*(*)	TEXT(COVMAX)	! the polygon labels
	INTEGER*2	LENGTH(COVMAX)	! the lengths of TEXT
	LOGICAL		UNDEF		! .T. if undefined polygon
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
	LOGICAL*4	ACTUAL_GET_COVER_LABEL
C
C	........................................................................
C
	GET_COVER_LABEL = ACTUAL_GET_COVER_LABEL(
     &			POLY_INDX,TEXT,LENGTH,UNDEF,
     &			POLMAX,TABMAX,POLNEST_MAX, PARTS_MAX,
     &			%VAL(PTR$_COVER_POINT) ,
     &			%VAL(PTR$_POLY_DONE),
     &			%VAL(PTR$_POLY_PARTS),
     &			%VAL(PTR$_POLY_START),
     &			%VAL(PTR$_SEGTAB)
     &		  )
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	LOGICAL*4 FUNCTION ACTUAL_GET_COVER_LABEL(POLY_INDX,TEXT,LENGTH,UNDEF,
     &		POLMAX,TABMAX,POLNEST_MAX,PARTS_MAX,
     &		COVER_POINT ,
     &		POLY_DONE,
     &		POLY_PARTS,
     &		POLY_START,
     &		SEGTAB
     &	)
C
C
***	MODULE	ACTUAL_GET_COVER_LABEL
***	IDENT	28NO89
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Author						SH  08-Nov-1989
C
C Function to get the label text and the length of label for the
C polygon POLY_INDX. This function is only used if the user specified /COVER
C
C Function works by taking the text field of the relevant ACs from the first 
C segment in the polygon. If the polygon is known to have failed in being 
C labelled then the label 'Undefined Polygon' is returned and UNDEF set to .T.
C
C Function returns SS$_NORMAL if all is well or one of a variety of
C IPOLYGON error codes on failure.
C
C ......................................................................
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNIPOLYGON:IPOLYGONMSG.PAR'
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
	INTEGER		SS$_ABORT
	EXTERNAL	SS$_ABORT	! bad luck !
C
C Arguments:
	INTEGER		POLY_INDX	! the polygon in question
	CHARACTER*(*)	TEXT(COVMAX)	! the polygon labels
	INTEGER*2	LENGTH(COVMAX)	! the lengths of TEXT
	LOGICAL		UNDEF		! .T. if undefined polygon
C 
	INTEGER*4	POLMAX
	INTEGER*4	TABMAX
	INTEGER*4	POLNEST_MAX
	INTEGER*4	PARTS_MAX
C
	INTEGER*4	COVER_POINT(-TABMAX:TABMAX,COVMAX)
	INTEGER		POLY_DONE(POLMAX)
	INTEGER		POLY_PARTS(2,POLMAX*4)
	INTEGER		POLY_START(3,POLMAX)
	INTEGER*4	SEGTAB(2,TABMAX)

C
C Common:
	INCLUDE		'LSL$CMNIPOLYGON:COMMAND.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:COVERAGES.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:FILE.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:TABLES.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:SECTOR.CMN'
	INCLUDE		'LSL$CMNLSL:TXTC.CMN'
C
C W/s
	INTEGER   I		! tmp var
	INTEGER   COVER
	INTEGER   SEGPTR	! pointer into SEGTAB
	INTEGER   SEG
	INTEGER   ASEG
	INTEGER*2 IECODE	! tmp var
	INTEGER*2 IELEN		! tmp var
	INTEGER	  FSN		! FSN of segment
	INTEGER	  IFSN		! IFSN of segment
	INTEGER*2 ACTYPE	! AC type 
	INTEGER*2	ACLEN
	INTEGER*4	ACDSC(2)	! fake string descriptor
	EQUIVALENCE	(ACDSC,ACLEN)
	BYTE		ACBUF(256)
	CHARACTER*256	ACTEXT
	INTEGER	  IREV		! which direction of this segment forms
C				! part of the poly boundary?
	INTEGER*2 PFXLEN
C
C ......................................................................
C
	ACTUAL_GET_COVER_LABEL=%LOC(SS$_NORMAL)
C
C Are we dealing with a polygon that has been kept despite having failed in 
C L/R code assignment?
	IF (.NOT.POLY_DONE(POLY_INDX)) THEN
	   DO 5 I=1,NUM_COVER
	   TEXT(I) = 'Undefined Polygon'
	   LENGTH(I) = 17
5	   CONTINUE
	   UNDEF = .TRUE.
	   GOTO 10
	ENDIF
C
C select input
	CALL IFFSEL(INLUN)
C
C First segment of the polygon
	SEGPTR=IABS(POLY_START(1,POLY_INDX))
	SEG=POLY_PARTS(1,SEGPTR)
C
C ......................................................................
C		N E X T   S E G M E N T
C
C for each cover:
	DO 100 COVER=1,NUM_COVER
C
C get the associated segment:
	ASEG=COVER_POINT(SEG,COVER)
C
C
C Store sign of associated segment
	IREV=SIGN(1,ASEG)
C
C Jump to the associated segment
	CALL IFFPKE(IECODE,IELEN,SEGTAB(2,IABS(ASEG)))
C
C Unexpected end of file
	IF (IELEN.LE.-1) THEN
	   ACTUAL_GET_COVER_LABEL=IPOL__UNEXPEOF
	   CALL LSL_PUTMSG(ACTUAL_GET_COVER_LABEL,IN_FILE(:IN_LEN))
	   ACTUAL_GET_COVER_LABEL=%LOC(SS$_ABORT)
	   GOTO 10
	ENDIF
C
C Unexpected type of entry - was expecting a NF
	IF (IECODE.NE.'NF') THEN
	   ACTUAL_GET_COVER_LABEL=IPOL__LOST
	   CALL LSL_PUTMSG(ACTUAL_GET_COVER_LABEL,IECODE)
	   ACTUAL_GET_COVER_LABEL=%LOC(SS$_ABORT)
	   GOTO 10
	ENDIF
C
C Read in FSN and IFSN
	CALL EIHRI(FSN,1,1)
	CALL EIHRI(IFSN,1,1)
C
C Get next IFF entry 
20	CALL IFFNXT(IECODE,IELEN)
C
C Unexpected end of file
	IF (IELEN.LE.-1) THEN
	   ACTUAL_GET_COVER_LABEL=IPOL__UNEXPEOF
	   CALL LSL_PUTMSG(ACTUAL_GET_COVER_LABEL,IN_FILE(:IN_LEN))
	   ACTUAL_GET_COVER_LABEL=%LOC(SS$_ABORT)
	   GOTO 10
	ENDIF
C
C Unexpected end of feature
	IF (IECODE.EQ.'EF') THEN
	   ACTUAL_GET_COVER_LABEL=IPOL__LOST
	   CALL LSL_PUTMSG(ACTUAL_GET_COVER_LABEL,IECODE)
	   ACTUAL_GET_COVER_LABEL=%LOC(SS$_ABORT)
	   GOTO 10
	ENDIF
C
C If not an AC entry then get next entry
	IF (IECODE.NE.'AC') GOTO 20
C
C AC found - read type and act depending on the direction of polygon
C formation and direction of this segment. The rules are:
C
C 	Polygon formed clockwise:
C		 Use type RIGHT AC if segment used forwards  (IREV =  1)
C		 Use type LEFT  AC if segment used backwards (IREV = -1)
C 	Polygon formed anticlockwise:
C		 Use type LEFT  AC if segment used forwards  (IREV =  1)
C		 Use type RIGHT AC if segment used backwards (IREV = -1)
C
	CALL EIHRI(ACTYPE,1,1)
C
C Check the AC text prefix
	CALL EIHR(TXTBUF,IELEN-3,4)
	TXTPTR=(IELEN-3)*2
	ACLEN=TXTPTR
	IF(TXTPTR.GT.0)THEN
	   IF (TXTBUF(TXTPTR).EQ.0) TXTPTR=TXTPTR-1
	   CALL COPY_STRING(TXTDSC,ACTEXT)
	ENDIF
C
C do we have a prefix match?
	DO 40 I=1,NUM_TXT(COVER)
	PFXLEN=IN_CVR_LEN(I,COVER)
	IF(PFXLEN.EQ.0)GOTO 45
	IF(ACLEN.LT.PFXLEN)GOTO 40
	IF(ACTEXT(:PFXLEN).EQ.IN_CVR_TXT(I,COVER)(:PFXLEN))GOTO 45
40	CONTINUE
	GOTO 20					! no prefix match
C
C Check if this AC has the text we want and if so leave 
C
45	IF (CLOCK) THEN					! clockwise polygon
	   IF ((ACTYPE.EQ.RGT_CVR_CODE(COVER)).AND.(IREV.EQ. 1) ! read this AC?
     &			.OR.
     &	       (ACTYPE.EQ.LFT_CVR_CODE(COVER)).AND.(IREV.EQ.-1)) THEN
	      CALL READ_AC_TEXT(TEXT(COVER),LENGTH(COVER),IELEN)
	      GOTO 100			! text found - go on to next cover
	    ENDIF
	ELSE						! anticlockwise poly
	   IF ((ACTYPE.EQ.LFT_CVR_CODE(COVER)).AND.(IREV.EQ. 1)	! read this AC?
     &			.OR.
     &	       (ACTYPE.EQ.RGT_CVR_CODE(COVER)).AND.(IREV.EQ.-1)) THEN
	      CALL READ_AC_TEXT(TEXT(COVER),LENGTH(COVER),IELEN)
	      GOTO 100			! text found - go on to next cover
	   ENDIF
	ENDIF
C
C Not the AC we wanted, go back for another one
	GOTO 20
100	CONTINUE
C
C finished...
10	RETURN
	END
