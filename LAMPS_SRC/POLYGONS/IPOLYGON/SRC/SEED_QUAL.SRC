C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-09-19 18:05:28.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION SEED_QUAL()
C
***	MODULE	SEED_QUAL
***	IDENT	19SE91
C
C	Copyright (C), Laser-Scan Ltd., Cambridge, England
C
CMOD	Correction of /SEED=LAYER:int [,...]		 JB 17-Sep-1991
CMOD	Correction of /SEED=FC:int [,...]		TJH 19-Nov-1990
CMOD	Addition of the /SEED=PAIR option		 AC 11-Aug-1988
CMOD	Now doesn't test for seed file equal to input
C	file when no seed file read!			TJH 01-Nov-1987
C
C	Created						TJH 27-Aug-1987
C
C Function to decode IPOLYGONS /[NO]SEED='keywords' qualifier
C
C All results are returned via /COMMAND/ 
C
C Function returns SS$_NORMAL if all is well or one of a variety of
C CLI errors on failure.
C
C .........................................................................
C
	IMPLICIT NONE
C
C Parameters:
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL
	INCLUDE 	'LSL$CMNIPOLYGON:IPOLYGONMSG.PAR'
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
C
C Common:
	INCLUDE 	'LSL$CMNIPOLYGON:COMMAND.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:FILE.CMN'
	INCLUDE 	'LSL$CMNLSL:CLD.CMN'
	INCLUDE 	'LSL$CMNLSL:FILENAME.CMN'
C
C W/s
	INTEGER		I		! loop counter
	LOGICAL		HAD_QUAL	! is specified qualifier present
	LOGICAL		HAD_KEY		! is specified keyword present
	LOGICAL		ABSENT		! is file-spec absent?
	LOGICAL		LOCAL      	! is qualifier local?
	LOGICAL		LOCNEG     	! qualifier locally negated?
C
	LOGICAL		HAD_SEED_AC
	LOGICAL		HAD_SEED_SURROUND
	LOGICAL		HAD_SEED_USE_FSN
	LOGICAL		HAD_SEED_USE_AC
C
C Functions:
	INTEGER		DCL_QUAL	! looks for specified qualifier
	INTEGER		DCL_FILE	! gets qualifier args. (file)
	INTEGER		DCL_INT		! gets qualifier args. (integer)
	INTEGER		DCL_STR		! gets qualifier args. (string)
	INTEGER		EXPFLN		! gets file-spec from /FILENAME/
	INTEGER		STR$COMPARE	! compare strings
	INTEGER		READ_PAIR_FILE	! read FC pairs from ASCII file
C
C ......................................................................
C
	SEED_QUAL=%LOC(SS$_NORMAL)
C
C By default no seed points are to be used
	HAD_SEED = .FALSE.
C
C is the /SEED qualifier present?
	SEED_QUAL=DCL_QUAL('SEED',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.SEED_QUAL) GOTO 10
	IF (.NOT.HAD_QUAL) GOTO 10
C
C Note that seed points are to be used
	HAD_SEED = .TRUE.
C
C Setup defaults
	SURTXT = 'Surrounding Void'	! label for bounding polygon
	SURLEN = 16
C
	NUM_FC_SEED   = 0		! no seed pt FCs specified
	NUM_LAY_SEED  = 0		! no seed pt layers specified
C
	HAD_SEED_FILE = .FALSE.		! no separate seed pt file
	HAD_SEED_FC   = .FALSE.		! seed pts not specified by FC
	HAD_SEED_LAY  = .FALSE.		! seed pts not specified by layer
	HAD_SEED_AC   = .FALSE.
C
	HAD_SEED_SURROUND = .FALSE.
	HAD_SEED_USE_FSN  = .FALSE.
	HAD_SEED_USE_AC   = .FALSE.
C
	USE_TEXT = .TRUE.		! get label from TX entry 
	USE_FSN  = .FALSE.		! do not use seed pt FSN
	USE_AC   = .FALSE.		! do not use seed pt AC
	SEED_AC  = 82			! use specified AC if USE_AC is .T.
C
C Has the user specified a separate seed pt file?
	SEED_QUAL=DCL_QUAL('SEED.FILE',HAD_KEY,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.SEED_QUAL) GOTO 10
	HAD_SEED_FILE = HAD_KEY
C
C If so then get the filename parsed against LSL$IF:IFF.IFF 
	IF (HAD_SEED_FILE) THEN
		SEED_QUAL=DCL_FILE('SEED.FILE','LSL$IF:IFF.IFF',
     &						ABSENT,.FALSE.,.TRUE.)
	        IF (.NOT.SEED_QUAL) GOTO 10
	        SEED_QUAL=EXPFLN(SEED_FILE,SEED_LEN)
	        IF (.NOT.SEED_QUAL) GOTO 10
C
C Check this is not the same file as the input segment file
		CALL STR$UPCASE(SEED_FILE,SEED_FILE)
	       	I=STR$COMPARE(SEED_FILE(:SEED_LEN),IN_FILE(:IN_LEN))
	        IF (I.EQ.0) THEN
			SEED_QUAL=IPOL__SAMEFILE
			CALL LSL_PUTMSG(SEED_QUAL)
			GOTO 10
		ENDIF
	ENDIF
C
C Has the user specified a FC pair file?
C
	SEED_QUAL=DCL_QUAL('SEED.PAIR',HAD_KEY,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.SEED_QUAL) GOTO 10
	HAD_FC_PAIR = HAD_KEY
C
C If so get the filename parsed against LSL$IF:IFF.FCP
	IF (HAD_FC_PAIR) THEN
		SEED_QUAL=DCL_FILE('SEED.PAIR','LSL$IF:IFF.FCP',
     &						ABSENT,.FALSE.,.TRUE.)
	        IF (.NOT.SEED_QUAL) GOTO 10
	        SEED_QUAL=EXPFLN(PAIR_FILE,PAIR_LEN)
	        IF (.NOT.SEED_QUAL) GOTO 10
C
C and read its contents into an array
		CALL STR$UPCASE(PAIR_FILE,PAIR_FILE)
		SEED_QUAL=READ_PAIR_FILE()
		IF (.NOT.SEED_QUAL) GOTO 10
	ENDIF
C
C Has the user specified an AC from which the label might be taken...
	SEED_QUAL=DCL_QUAL('SEED.AC',HAD_KEY,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.SEED_QUAL) GOTO 10
	HAD_SEED_AC = HAD_KEY
C
C If so then...
	IF (HAD_SEED_AC) THEN
C
C get it and ...
		SEED_QUAL=DCL_INT('SEED.AC',.TRUE.)
		IF (.NOT.SEED_QUAL) GOTO 10
C
C if it lies in the correct range ...
		IF (IARRAY(1).LT.0.OR.IARRAY(1).GT.32767) THEN
			SEED_QUAL=IPOL__INVALAC
			CALL LSL_PUTMSG(SEED_QUAL,IARRAY(1))
			GOTO 10
		ENDIF
C
C then use it.
		SEED_AC = IARRAY(1)
	ENDIF
C
C Has the user specified a set of FCs by which the seed pts can be identified 
	SEED_QUAL=DCL_QUAL('SEED.FC',HAD_KEY,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.SEED_QUAL) GOTO 10
	HAD_SEED_FC = HAD_KEY
C
C If so then ...
	IF (HAD_SEED_FC) THEN
C
C get them all at once
		SEED_QUAL=DCL_INT('SEED.FC',.TRUE.)
		IF (.NOT.SEED_QUAL) GOTO 10
C
C If there are too many then fail, otherwise
		NUM_FC_SEED = NUMINT
	        IF (NUM_FC_SEED.GT.FC_SEED_MAX) THEN
			SEED_QUAL=IPOL__TOOMNYFC
			CALL LSL_PUTMSG(SEED_QUAL,NUM_FC_SEED,FC_SEED_MAX)
	            	GOTO 10
		ENDIF
C
C Go thru them one at a time
		DO 30 I=1,NUM_FC_SEED
C
C and if they are in the corrrect range
			IF (IARRAY(I).LT.0.OR.IARRAY(I).GT.32767) THEN
				SEED_QUAL=IPOL__INVALFC
				CALL LSL_PUTMSG(SEED_QUAL,IARRAY(I))
				GOTO 10
			ENDIF
C
C then use them
			FC_SEED(I)=IARRAY(I)
30		CONTINUE
	ENDIF	      
C
C Has the user specified layers by which the seed pts can be identified 
	SEED_QUAL=DCL_QUAL('SEED.LAYER',HAD_KEY,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.SEED_QUAL) GOTO 10
	HAD_SEED_LAY = HAD_KEY
C
C If so then ...
	IF (HAD_SEED_LAY) THEN
C
C get them all at once
		SEED_QUAL=DCL_INT('SEED.LAYER',.TRUE.)
	       	IF (.NOT.SEED_QUAL) GOTO 10
C
C If there are too many then fail, otherwise
		NUM_LAY_SEED = NUMINT
	        IF (NUM_LAY_SEED.GT.SEED_LAY_MAX) THEN
			SEED_QUAL=IPOL__TOOMNYLAY
	                CALL LSL_PUTMSG(SEED_QUAL,NUM_LAY_SEED,SEED_LAY_MAX)
	            	GOTO 10
		ENDIF
C
C Go thru them one at a time
	        DO 40 I=1,NUM_LAY_SEED
C
C and if they are in the corrrect range
	        	IF (IARRAY(I).LT.1 .OR. IARRAY(I).GT.32767) THEN
				SEED_QUAL=IPOL__INVALLAY
				CALL LSL_PUTMSG(SEED_QUAL,IARRAY(I))
	                  	GOTO 10
			ENDIF
C
C then use them
			LAY_SEED(I)=IARRAY(I)	  
40		CONTINUE
	ENDIF
C
C Cannot get USE:FSN and USE:TEXT and USE:AC on command line due to CLD 
C construction
C
C Has the user overridden the /SEED=USE:TEXT default with /SEED=USE:KEY
C
	SEED_QUAL=DCL_QUAL('SEED.USE.FSN',HAD_KEY,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.SEED_QUAL) GOTO 10
	HAD_SEED_USE_FSN = HAD_KEY
C
	IF (HAD_SEED_USE_FSN) THEN 
		USE_FSN = .TRUE.
		USE_TEXT = .FALSE.
	ENDIF
C
C Has the user overridden the /SEED=USE:TEXT default with /SEED=USE:KEY
C
	SEED_QUAL=DCL_QUAL('SEED.USE.AC',HAD_KEY,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.SEED_QUAL) GOTO 10
	HAD_SEED_USE_AC = HAD_KEY
C
	IF (HAD_SEED_USE_AC) THEN
		USE_AC   = .TRUE.
		USE_TEXT = .FALSE.
	ENDIF
C
C Has the user overridden the label to be used for the bounding polygon?
C
	SEED_QUAL=DCL_QUAL('SEED.SURROUND',HAD_KEY,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.SEED_QUAL) GOTO 10
	HAD_SEED_SURROUND = HAD_KEY
C
C If so then...
	IF (HAD_SEED_SURROUND) THEN
C
C get the input string
		SEED_QUAL=DCL_STR('SEED.SURROUND',.TRUE.)
		IF (.NOT.SEED_QUAL) GOTO 10
C
C If the first character is a " then assume terminated with a ", thus chop out
C the bit in the middle, otherwise...
		IF (CARRAY(1)(1:1).EQ.'"') THEN
			SURLEN=STR_LEN(1)-2
		        SURTXT=CARRAY(1)(2:STR_LEN(1)-1)
		ELSE
C
C use it all
			SURLEN=STR_LEN(1)
			SURTXT=CARRAY(1)(:STR_LEN(1))
		ENDIF
	ENDIF
C
C Finished...
10	RETURN
	END
C
