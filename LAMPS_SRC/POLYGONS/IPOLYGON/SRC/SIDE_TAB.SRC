C
C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	LOGICAL*4 FUNCTION SIDE_TAB()
C
***	MODULE	SIDE_TAB
***	IDENT	12MY92
C
	IMPLICIT NONE
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
	LOGICAL*4	ACTUAL_SIDE_TAB
C
C	........................................................................
C
	SIDE_TAB = ACTUAL_SIDE_TAB(
     &			POLMAX,TABMAX,POLNEST_MAX, PARTS_MAX,
     &			%VAL(PTR$_NEST_START),
     &			%VAL(PTR$_POLY_START),
     &			%VAL(LOC_PTR$_P_PTRS)
     &		  )
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	LOGICAL*4 FUNCTION ACTUAL_SIDE_TAB(
     &		POLMAX,TABMAX,POLNEST_MAX,PARTS_MAX,
     &		NEST_START,
     &		POLY_START,
     &		PTRS
     &	)
C
***	MODULE	ACTUAL_SIDE_TAB
***	IDENT	17AU88
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
CMOD	Modified to include trees			AC   24-Jun-1988
C	Author						TJH  18-Mar-1987
C
C
C Function identifies left/right polygons for segments and tabulates
C the results in /POLYGONS/LR_SEGMENT. 
C
C Function returns SS$_NORMAL if all is well or one of a variety of
C POLYGONS error codes on failure.
C
C ......................................................................
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
C
C Common:
	INCLUDE		'LSL$CMNIPOLYGON:COMMAND.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:FILE.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:TREES.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:TABLES.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:SECTOR.CMN'
	INCLUDE		'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE		'LSL$CMNLSL:TXTC.CMN'
C
C Arguments
	INTEGER*4	POLMAX
	INTEGER*4	TABMAX
	INTEGER*4	POLNEST_MAX
	INTEGER*4	PARTS_MAX
C
	INTEGER		NEST_START(POLMAX+1)
	INTEGER		POLY_START(3,POLMAX)
C
C W/s:
	LOGICAL   	LASTPTR		! pointer to last nested poly
	INTEGER	  	NNEST		! number of nested polygons
	INTEGER	  	POLY_INDX	! current polygon
	INTEGER		TREE_INDX	! current tree
	INTEGER	      PTRS(POLNEST_MAX) ! pointers to nested polys
	INTEGER   	SEGPTR		! pointer into SEGTAB
	REAL		APOINT(2)	! coordinate of point on tree
C
C Functions:
	LOGICAL		EXT1V		! extract 1-bit field
	INTEGER		FIRST_NEST	! gets 1st order nested polys
	LOGICAL		VIOCLR		! clears array
	LOGICAL		FILL_TAB	! actually fills up tables
C
C ......................................................................
C
	ACTUAL_SIDE_TAB=%LOC(SS$_NORMAL)
C
C To ensure that the curious "duplicate' polygons created by nesting
C are properly ignored except when being considered as first order
C nests, we will use the old /POLYGONS/LRUSED table
C to flag when a polygon side value in LR_SEGMENT is set explictly
C by nesting. We must first clear the LRUSED flags array.
C
	ACTUAL_SIDE_TAB=VIOCLR(LRUSED(1,1),8*FSN_BITMAP_MAX,0)
	IF (.NOT.ACTUAL_SIDE_TAB) GOTO 60
C
C Clear LR_SEGMENT array
C	ACTUAL_SIDE_TAB=VIOCLR(LR_SEGMENT(1,1),4*FSN_BITMAP_MAX,0) !!!!!!!!!!!!!
C
	ACTUAL_SIDE_TAB=VIOCLR(LR_SEGMENT(1,1),4*FSNMAX,0)
	IF (.NOT.ACTUAL_SIDE_TAB) GOTO 60
C
C ......................................................................
C		B O U N D A R Y    S E G M E N T S
C
	DO 50 POLY_INDX=1,NUM_POLY
C
C No nests (yet)
	   NNEST=0
C
C Ensure that this is not a duff polygon
C	   IF (EXT1V(POLY_INDX,DUFF_POLYGON(1))) GOTO 50
C
C Avoid bounding polygon's nests!!!!
	   IF (POLY_INDX.NE.BOUND_POL) THEN
C
C Is the polygon an unwanted isolated polygon? Ignore if it is
	      IF (POLY_START(1,POLY_INDX).LE.0) GOTO 50
C
C Does the polygon contain any nested polygons?
	      IF (NEST_START(POLY_INDX).GT.0) THEN
	         CALL IFFSEL(INLUN)
	         ACTUAL_SIDE_TAB=FIRST_NEST(POLY_INDX,PTRS,NNEST,
     &				.TRUE.,LASTPTR)
	         IF (.NOT.ACTUAL_SIDE_TAB) GOTO 60
	      ENDIF
	   ENDIF
C
C ......................................................................
C
C Get the segments relating to this polygon	   
	   SEGPTR=IABS(POLY_START(1,POLY_INDX))

	   ACTUAL_SIDE_TAB=FILL_TAB(POLY_INDX,NNEST,SEGPTR,PTRS)
	   IF (.NOT.ACTUAL_SIDE_TAB) GOTO 60
50	CONTINUE
C
C If we are not using segments that end at one-arm junctions then we
C are now finished....
	IF (.NOT.ONE_USE) GOTO 60
C
C ......................................................................
C	N O N - B O U N D A R Y    S E G M E N T S
C
	DO 950 TREE_INDX=1,NUM_TREE
C
C Trees cannot have nests
	   NNEST=0
C
C Get the segments relating to this tree
	   SEGPTR=IABS(TREE_START(1,TREE_INDX))
C
C Find out which polygon this tree lies in
	   POLY_INDX=TREE_START(2,TREE_INDX)
	   IF (POLY_INDX.NE.-1) THEN
C
C Now we know what polygon index to give to this tree fill up table
	      ACTUAL_SIDE_TAB=FILL_TAB(POLY_INDX,NNEST,SEGPTR,PTRS)
	      IF (.NOT.ACTUAL_SIDE_TAB) GOTO 60
	   ENDIF
C
950	CONTINUE
C
C ......................................................................
C			F I N I S H E D 
C
60	RETURN
	END

