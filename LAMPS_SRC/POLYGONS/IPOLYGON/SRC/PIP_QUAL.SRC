	INTEGER*4 FUNCTION PIP_QUAL()
C
***	MODULE	PIP_QUAL
**	IDENT	07MR90
C
C	Copyright (C), Laser-Scan Laboratories Ltd., Cambridge, England
C
CMOD	Now accepts FC 0				TJH 07-Mar-1990
C	Created						AC  23-May-1988
C
C Function to decode IPIP /PIP= qualifier
C
C All results are returned via /COMMAND/ 
C
C Function returns SS$_NORMAL if all is well or one of a variety of
C CLI errors on failure.
C
C ........................................................................
C
	IMPLICIT NONE
C
C Parameters:
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL
	INCLUDE 	'LSL$CMNIPOLYGON:IPOLYGONMSG.PAR'
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
C
C Common:
	INCLUDE 	'LSL$CMNIPOLYGON:COMMAND.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:FILE.CMN'
	INCLUDE 	'LSL$CMNLSL:CLD.CMN'
	INCLUDE 	'LSL$CMNLSL:FILENAME.CMN'
C
C W/s:
	LOGICAL		LOCAL		! tmp var
	LOGICAL		LOCNEG		! tmp var
	LOGICAL		ABSENT		! tmp var
	LOGICAL		HAD_QUAL	! qualifier was present
	LOGICAL		HAD_KEY		! keyword was present
C
C Function:
	INTEGER		DCL_QUAL	! looks for specified qualifier
	INTEGER		DCL_FILE	! looks for a filename
	INTEGER		DCL_INT		! looks for an integer
	INTEGER		PUTFLN		! sets up filename components
	INTEGER		EXPFLN		! generates a filename
C
C ......................................................................
C
	PIP_QUAL=%LOC(SS$_NORMAL)
C
C By default points-in-polygons are not to be output
	OPT_PIP = .FALSE.
C
C Is the /PIP qualifier present ?
	PIP_QUAL=DCL_QUAL('PIP',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.PIP_QUAL) GOTO 10
	IF (.NOT.HAD_QUAL) GOTO 10
C
C Note that points-in-polygons are to be output
	OPT_PIP = .TRUE.
C
C Setup defaults
	PIP_LABEL = .FALSE.	! no labels
	PIP_IDENT = .FALSE.	! no identifiers
C
	PIP_LAY = 1		! Output to layer 1
	PIP_FC = 1		! output using FC 1
	PIP_ITERATE = 1		! just one iteration to place point
	PIP_LABEL_AC = 82	! AC for labels (if any)
	PIP_IDENT_AC = 82	! AC for identifiers (if any)
C
	HAD_NEST = .TRUE.	! must involve nesting
C
C Are labels to be output?
	PIP_QUAL=DCL_QUAL('PIP.LABEL',HAD_KEY,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.PIP_QUAL) GOTO 10
	PIP_LABEL = HAD_KEY
C
C If labels are to be output ...
	IF (PIP_LABEL) THEN
		PIP_QUAL=DCL_QUAL('PIP.CONTAIN_LABEL_AC',HAD_KEY,LOCAL,
     &								LOCNEG,.TRUE.)
		IF (.NOT.PIP_QUAL) GOTO 10
C
C and an AC is specified...
		IF (HAD_KEY) THEN
			PIP_QUAL=DCL_INT('PIP.CONTAIN_LABEL_AC',.TRUE.)
			IF (.NOT.PIP_QUAL) GOTO 10
C
C and it lies in the correct range ...
			IF ((IARRAY(1).LT.0).OR.(IARRAY(1).GT.32767)) THEN
				PIP_QUAL = IPOL__INVALAC
				CALL LSL_PUTMSG(PIP_QUAL,IARRAY(1))
				GOTO 10
			ENDIF
C
C then use it
			PIP_LABEL_AC = IARRAY(1)
C
C if propagating and not using a file to specify the output AC types,
C use this as the contain code
		IF(HAD_PROP.AND.(.NOT.HAD_CVR_FILE))
     &					PIP_CVR_AC(1)=PIP_LABEL_AC
		ENDIF	
	ENDIF
C
C Are identifiers to be output?
	PIP_QUAL=DCL_QUAL('PIP.IDENT',HAD_KEY,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.PIP_QUAL) GOTO 10
	PIP_IDENT = HAD_KEY
C
C If identifiers are to be output...
	IF (PIP_IDENT) THEN
		PIP_QUAL=DCL_QUAL('PIP.CONTAIN_IDENT_AC',HAD_KEY,LOCAL,
     &								LOCNEG,.TRUE.)
		IF (.NOT.PIP_QUAL) GOTO 10
C
C and an AC is specified...
		IF (HAD_KEY) THEN
			PIP_QUAL=DCL_INT('PIP.CONTAIN_IDENT_AC',.TRUE.)
			IF (.NOT.PIP_QUAL) GOTO 10
C
C and it lies in the correct range ...
			IF ((IARRAY(1).LT.0).OR.(IARRAY(1).GT.32767)) THEN
				PIP_QUAL = IPOL__INVALAC
				CALL LSL_PUTMSG(PIP_QUAL,IARRAY(1))
				GOTO 10
			ENDIF
C
C the use it
			PIP_IDENT_AC = IARRAY(1)
		ENDIF	
	ENDIF
C
C Has the user specified an output layer?
	PIP_QUAL=DCL_QUAL('PIP.LAYER',HAD_KEY,LOCAL,LOCNEG,.TRUE.)	
	IF (.NOT.PIP_QUAL) GOTO 10
C
C If so then get it....
	IF (HAD_KEY) THEN
		PIP_QUAL=DCL_INT('PIP.LAYER',.TRUE.)
		IF (.NOT.PIP_QUAL) GOTO 10
C
C and if it lies in the correct range ...
		IF (IARRAY(1).LT.1.OR.IARRAY(1).GT.32767) THEN
			PIP_QUAL=IPOL__INVALLAY
			CALL LSL_PUTMSG(PIP_QUAL,IARRAY(1))
			GOTO 10
	      	ENDIF
C
C the use it
		PIP_LAY=IARRAY(1)	  
	ENDIF
C
C Has the user specified a FC?
	PIP_QUAL=DCL_QUAL('PIP.FC',HAD_KEY,LOCAL,LOCNEG,.TRUE.)	
	IF (.NOT.PIP_QUAL) GOTO 10
C
C if so then get it...
	IF (HAD_KEY) THEN
		PIP_QUAL=DCL_INT('PIP.FC',.TRUE.)
		IF (.NOT.PIP_QUAL) GOTO 10
C
C and it lies in the correct range....
		IF (IARRAY(1).LT.0.OR.IARRAY(1).GT.32767) THEN
			PIP_QUAL=IPOL__INVALFC
			CALL LSL_PUTMSG(PIP_QUAL,IARRAY(1))
			GOTO 10
	      	ENDIF
C
C then use it
		PIP_FC=IARRAY(1)	  
	ENDIF
C
C Has the user specified the number of interations to be used to place the
C point?
	PIP_QUAL=DCL_QUAL('PIP.ITERATE',HAD_KEY,LOCAL,LOCNEG,.TRUE.)	
	IF (.NOT.PIP_QUAL) GOTO 10
C
C If so then get it....
	IF (HAD_KEY) THEN
		PIP_QUAL=DCL_INT('PIP.ITERATE',.TRUE.)
		IF (.NOT.PIP_QUAL) GOTO 10
C
C and if it lies in the correct range
		IF (IARRAY(1).LT.1.OR.IARRAY(1).GT.1000) THEN
			PIP_QUAL=IPOL__INVALIT
			CALL LSL_PUTMSG(PIP_QUAL,IARRAY(1))
			GOTO 10
	      	ENDIF
C
C then use it
		PIP_ITERATE=IARRAY(1)	  
	ENDIF
C
C Make up a default output filename from the input file (ensure a .PIP
C extension)
	PIP_QUAL=PUTFLN(IN_FILE(:IN_LEN))
	IF (.NOT.PIP_QUAL) GOTO 10
	HAD_VER=.FALSE.
	STR_EXT='PIP'
	LEN_EXT=3
	PIP_QUAL=EXPFLN(PIP_FILE,PIP_LEN)
	IF (.NOT.PIP_QUAL) GOTO 10
C
C Has the user specified an output file?
	PIP_QUAL = DCL_QUAL('PIP.OUTPUT',HAD_KEY,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.PIP_QUAL) GOTO 10
C
C If so get it (parsed gaianst the default filename)
	IF (HAD_KEY) THEN    	  
		PIP_QUAL = DCL_FILE('PIP.OUTPUT',
     &				PIP_FILE(:PIP_LEN),ABSENT,.FALSE.,.TRUE.)
		IF (.NOT.PIP_QUAL) GOTO 10
C
C Use it if its there
		IF (.NOT.ABSENT) THEN
			PIP_FILE = FILARY(1)(1:FIL_LEN(1))
			PIP_LEN = FIL_LEN(1)
		ENDIF
	ENDIF
C
C Finished....
10	RETURN
	END

