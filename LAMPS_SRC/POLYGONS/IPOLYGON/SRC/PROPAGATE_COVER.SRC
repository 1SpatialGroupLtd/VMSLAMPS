C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-05-11 19:29:44.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C
C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	LOGICAL*4 FUNCTION PROPAGATE_COVER()
C
***	MODULE	PROPAGATE_COVER
***	IDENT	08MY92
C
	IMPLICIT NONE
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
	LOGICAL*4	ACTUAL_PROPAGATE_COVER
C
C	........................................................................
C
	PROPAGATE_COVER = ACTUAL_PROPAGATE_COVER(
     &			POLMAX,TABMAX,POLNEST_MAX, PARTS_MAX,
     &			%VAL(PTR$_COVER_POINT) ,
     &			%VAL(PTR$_COVER_STACK),
     &			%VAL(PTR$_POLY_LIST),
     &			%VAL(PTR$_SEGMENT_INDEX),
     &			%VAL(PTR$_SEGTAB),
     &		  )
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	LOGICAL*4 FUNCTION ACTUAL_PROPAGATE_COVER(
     &		POLMAX,TABMAX,POLNEST_MAX,PARTS_MAX,
     &		COVER_POINT ,
     &		COVER_STACK,
     &		POLY_LIST,
     &		SEGMENT_INDEX,
     &		SEGTAB
     &	)
C
C
C
***	MODULE	ACTUAL_PROPAGATE_COVER
***	IDENT	26MR90
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Author						SH   07-Nov-1989
C
C	Function to propagate codes from initially coded segments to
C	all segments, for each coverage.
C
C ..........................................................................
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNIPOLYGON:IPOLYGONMSG.PAR'
	INTEGER		SS$_ABORT
	EXTERNAL	SS$_ABORT	! error
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
C
C Common:
	INCLUDE		'LSL$CMNIPOLYGON:COMMAND.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:FILE.CMN'
	INCLUDE 	'LSL$CMNPOLYGONS:COVERAGES.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:TABLES.CMN'
	INCLUDE		'LSL$CMNLSL:TXTC.CMN'
C
C Arguments
	INTEGER*4	POLMAX
	INTEGER*4	TABMAX
	INTEGER*4	POLNEST_MAX
	INTEGER*4	PARTS_MAX
C
	INTEGER*4	COVER_POINT(-TABMAX:TABMAX,COVMAX)
	INTEGER*4	COVER_STACK(TABMAX)
	INTEGER*4	POLY_LIST(2,TABMAX*2)
	INTEGER*4	SEGMENT_INDEX(-TABMAX:TABMAX)
	INTEGER*4	SEGTAB(2,TABMAX)

C
C W/s:
	INTEGER		I,J,L
	INTEGER		COVER
	INTEGER		SEG
	INTEGER		NSEGS
	INTEGER		COVER_STACK_PTR
	INTEGER		S0
	INTEGER		S,T
	INTEGER*2	IECODE,IELEN	! IFF entry code and length
	INTEGER*2	ACTYPE
	INTEGER*2	ACLEN
	INTEGER*4	ACDSC(2)	! fake string descriptor
	EQUIVALENCE	(ACDSC,ACLEN)
	BYTE		ACBUF(256)
	CHARACTER*256	ACTEXT
	INTEGER*4	ADDRESS		! IFF address
	LOGICAL		DEBUG
C
C Functions:
C
C ......................................................................
C
	ACTUAL_PROPAGATE_COVER=%LOC(SS$_NORMAL)
C
C For each segment, look in the IFF file to see if it has ACs for the
C various coverages
C
	DO 100 SEG=1,TABMAX
	ADDRESS=SEGTAB(2,SEG)
	IF(ADDRESS.LE.0)GOTO 100
C
C assume not in any coverage
	DO 10 COVER=1,NUM_COVER
	COVER_POINT(SEG,COVER)=0
	COVER_POINT(-SEG,COVER)=0
10	CONTINUE
C
C Jump to the start of the feature
	CALL IFFPKE(IECODE,IELEN,ADDRESS)
C
C Unexpected end of file
	IF (IELEN.LE.-1) THEN
	   ACTUAL_PROPAGATE_COVER=IPOL__UNEXPEOF
	   CALL LSL_PUTMSG(ACTUAL_PROPAGATE_COVER,IN_FILE(:IN_LEN))
	   ACTUAL_PROPAGATE_COVER=%LOC(SS$_ABORT)
	   GOTO 900
	ENDIF
C
C Unexpected type of entry - was expecting a NF
	IF (IECODE.NE.'NF') THEN
	   ACTUAL_PROPAGATE_COVER=IPOL__LOST
	   CALL LSL_PUTMSG(ACTUAL_PROPAGATE_COVER,IECODE)
	   ACTUAL_PROPAGATE_COVER=%LOC(SS$_ABORT)
	   GOTO 900
	ENDIF
C
C Get next IFF entry 
20	CALL IFFNXT(IECODE,IELEN)
C
C Unexpected end of file
	IF (IELEN.LE.-1) THEN
	   ACTUAL_PROPAGATE_COVER=IPOL__UNEXPEOF
	   CALL LSL_PUTMSG(ACTUAL_PROPAGATE_COVER,IN_FILE(:IN_LEN))
	   ACTUAL_PROPAGATE_COVER=%LOC(SS$_ABORT)
	   GOTO 900
	ENDIF
C
C End of feature
	IF (IECODE.EQ.'EF') GOTO 100
C
C If not an AC entry then get next entry
	IF (IECODE.NE.'AC') GOTO 20
C
C AC found - read type and text
C
	CALL EIHRI(ACTYPE,1,1)
	CALL EIHR(TXTBUF,IELEN-3,4)
	TXTPTR=(IELEN-3)*2
	ACLEN=TXTPTR
	IF(TXTPTR.GT.0)THEN
	   IF (TXTBUF(TXTPTR).EQ.0) TXTPTR=TXTPTR-1
	   CALL COPY_STRING(TXTDSC,ACTEXT)
	ENDIF
C
C Check against L/R types and texts for each coverage
C
	DO 40 COVER=1,NUM_COVER
C do we have a prefix match?
	DO 30 I=1,NUM_TXT(COVER)
	L=IN_CVR_LEN(I,COVER)
	IF(L.EQ.0)GOTO 35
	IF(ACLEN.LT.L)GOTO 30
	IF(ACTEXT(:L).EQ.IN_CVR_TXT(I,COVER)(:L))GOTO 35 ! prefix match found
30	CONTINUE
	GOTO 40
C and does the AC type match?
35	IF (ACTYPE.EQ.LFT_CVR_CODE(COVER))THEN
	   COVER_POINT(SEG,COVER)=TABMAX+1
	ELSE IF (ACTYPE.EQ.RGT_CVR_CODE(COVER))THEN
	   COVER_POINT(-SEG,COVER)=TABMAX+1
	ENDIF
40	CONTINUE
	GOTO 20
C
100	CONTINUE
C
C propagate initial segments for each cover (those with COVER_POINT=TABMAX+1)
	DO 200 COVER=1,NUM_COVER
	COVER_STACK_PTR=0
C
110	DO 120 SEG=1,TABMAX
	IF(COVER_POINT(SEG,COVER).EQ.TABMAX+1)THEN
	   S0=SEG
	   S=S0
	   GOTO 130
	ELSE IF(COVER_POINT(-SEG,COVER).EQ.TABMAX+1)THEN
	   S0=-SEG
	   S=S0
	   GOTO 130
	ENDIF
120	CONTINUE
C
C no initial segment to propagate, so thats the end of this coverage
	GOTO 200
130	COVER_POINT(S,COVER)=S0
C
C find the polygon, (nested polygons, trees) containing S
	I=SEGMENT_INDEX(S)
	IF(I.EQ.0)THEN
C S is not in a polygon - unlikely, but it might have been in a tree
C	   PRINT*,'Segment',S,' not present in any polygon'
	   GOTO 110
	ENDIF
C
C first polygon
	NSEGS=POLY_LIST(2,I)
	IF(NSEGS.LT.0)THEN
	   PRINT*,'Nested polygon when initial polygon expected'
	ENDIF
	DO 140 J=I,I+NSEGS-1
	T=POLY_LIST(1,J)
C T is a segment of the polygon containing S
	IF(COVER_POINT(T,COVER).EQ.0)THEN
C point T at S0
	   COVER_POINT(T,COVER)=S0
	   IF(HAD_PROP_FULL)THEN
C FULL propagation: put -T on the stack
	      IF(COVER_STACK_PTR.GE.TABMAX)THEN
	         PRINT*,'Stack overflow'
	      ENDIF
	      COVER_STACK_PTR=COVER_STACK_PTR+1
	      COVER_STACK(COVER_STACK_PTR)=-T
	   ENDIF
	ENDIF
140	CONTINUE
C
C next nested polygon or tree
150	I=I+NSEGS
	NSEGS=POLY_LIST(2,I)
	IF(NSEGS.GE.0)GOTO 170			! no more nests
	NSEGS=-NSEGS
	DO 160 J=I,I+NSEGS-1
	T=POLY_LIST(1,J)
C T is a segment of the polygon containing S
	IF(COVER_POINT(T,COVER).EQ.0)THEN
C point T at S0
	   COVER_POINT(T,COVER)=S0
	   IF(HAD_PROP_FULL)THEN
C put -T on the stack
	      IF(COVER_STACK_PTR.GE.TABMAX)THEN
	         PRINT*,'Stack overflow'
	      ENDIF
	      COVER_STACK_PTR=COVER_STACK_PTR+1
	      COVER_STACK(COVER_STACK_PTR)=-T
	   ENDIF
	ENDIF
160	CONTINUE
	GOTO 150
C
C now take a segment off the stack
170	IF(COVER_STACK_PTR.EQ.0)GOTO 110	! there are none
	S=COVER_STACK(COVER_STACK_PTR)
	COVER_STACK_PTR=COVER_STACK_PTR-1
C see whether it is already accounted for
	IF(COVER_POINT(S,COVER).EQ.0)THEN
	   GOTO 130
	ELSE
	   GOTO 170
	ENDIF
C
200	CONTINUE
C
C output current status
900	IF(DEBUG)THEN
	   DO 910 I=-NUM_SEG,NUM_SEG
	   IF(I.EQ.0)GOTO 910
	   J=COVER_POINT(I,1)
	   IF(J.NE.0)THEN
	      WRITE(99,9500)ISIGN(1,I)*SEGTAB(1,IABS(I)),
	1	ISIGN(1,J)*SEGTAB(1,IABS(J))
9500	      FORMAT(5I5)
	   ELSE
	      WRITE(99,9500)I,0
	   ENDIF
910	CONTINUE
	ENDIF
	RETURN
	END
