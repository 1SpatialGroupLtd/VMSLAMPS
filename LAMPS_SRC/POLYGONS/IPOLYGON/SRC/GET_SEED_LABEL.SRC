C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-05-12 16:14:42.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C
C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	LOGICAL*4 FUNCTION GET_SEED_LABEL(
     &			POLY_INDX,TEXT,LENGTH,UNDEF,DOAC,LUN)
C
***	MODULE	GET_SEED_LABEL
***	IDENT	12MY92
C
	IMPLICIT NONE
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
C Arguments:
	INTEGER		POLY_INDX	! the polygon in question
	CHARACTER*(*)	TEXT		! the seed point label text
	INTEGER*2	LENGTH		! the length of TEXT
	INTEGER		FSN		! INPUT FSN of seed point
	LOGICAL		UNDEF		! .T. if undefined polygon
	LOGICAL		DOAC		! transfer seed pt ACs?
	INTEGER*2	LUN		! output file lun
C
	LOGICAL*4	ACTUAL_GET_SEED_LABEL
C
C	........................................................................
C
	GET_SEED_LABEL = ACTUAL_GET_SEED_LABEL(
     &			POLY_INDX,TEXT,LENGTH,UNDEF,DOAC,LUN,
     &			POLMAX,TABMAX,POLNEST_MAX, PARTS_MAX,
     &			%VAL(PTR$_POLY_DONE),
     &			%VAL(PTR$_SEED_ADDRESS)
     &		  )
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	LOGICAL*4 FUNCTION ACTUAL_GET_SEED_LABEL(
     &		POLY_INDX,TEXT,LENGTH,UNDEF,DOAC,LUN,
     &		POLMAX,TABMAX,POLNEST_MAX,PARTS_MAX,
     &		POLY_DONE,
     &		SEED_ADDRESS
     &	)

***	MODULE	ACTUAL_GET_SEED_LABEL
***	IDENT	27FE90
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
CMOD	Now also tests for polygons flagged as isolations
C 	(which should have been rejected) but have got 
C	through due to bad junction structure		TJH  27-Feb-1990
CMOD	Output file LUN now passed in arg list		TJH  29-Mar-1989
CMOD	Derived from GET_TEXT				AC   06-Jun-1988
C	Author						TJH  26-Feb-1987
C
C
C Function to get the label text and the length of label for the seed
C point in polygon POLY_INDX. 
C
C Function returns SS$_NORMAL if all is well or one of a variety of
C IPOLYGON error codes on failure.
C
C ......................................................................
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER		POLY_INDX	! the polygon in question
	CHARACTER*(*)	TEXT		! the seed point label text
	INTEGER*2	LENGTH		! the length of TEXT
	INTEGER		FSN		! INPUT FSN of seed point
	LOGICAL		UNDEF		! .T. if undefined polygon
	LOGICAL		DOAC		! transfer seed pt ACs?
	INTEGER*2	LUN		! output file lun
C
	INTEGER*4	POLMAX
	INTEGER*4	TABMAX
	INTEGER*4	POLNEST_MAX
	INTEGER*4	PARTS_MAX
C
	INTEGER		POLY_DONE(POLMAX)
	INTEGER*4	SEED_ADDRESS(TABMAX)
C
C Parameters:
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNIPOLYGON:IPOLYGONMSG.PAR'
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
C
C Common:
	INCLUDE		'LSL$CMNIPOLYGON:COMMAND.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:FILE.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:TABLES.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:SECTOR.CMN'
	INCLUDE		'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE		'LSL$CMNLSL:TXTC.CMN'
C
C W/s
	INTEGER*2 ACTYPE	! type of AC entry
	INTEGER*2 IECODE,IELEN	! IFF entry code and length
	INTEGER*4 TMP_MARK	! position in IFF file
C
C Function:
	INTEGER*2	EXPAND  ! generate text string
C
C ......................................................................
C
	ACTUAL_GET_SEED_LABEL=%LOC(SS$_NORMAL)
C
C Assume that the polygon has been defined
	UNDEF=.FALSE.
C
C Check for bounding polygon
	IF (POLY_INDX.EQ.BOUND_POL) THEN
	   IF (USE_FSN) THEN
	      TEXT='65535'
	      LENGTH=5
	   ELSE
	      TEXT=SURTXT
	      LENGTH=SURLEN
	   ENDIF
	   GOTO 30
	ENDIF
C
C Are we dealing with a polygon that has been kept despite having failed
C in seed point assignment, or one which should have been rejected as
C an isolation but has got through due to bad junction structure?
	IF ((POLY_DONE(POLY_INDX).EQ.0)
     &			.OR.(POLY_DONE(POLY_INDX).EQ.-32767)) GOTO 100
C
C Jump to seed point feature
	IF (HAD_SEED_FILE) THEN
	   CALL IFFSEL(SEEDLUN)
	ELSE
	   CALL IFFSEL(INLUN)
	ENDIF
	TMP_MARK = LPOSH
	CALL IFFPKE(IECODE,IELEN,SEED_ADDRESS(POLY_DONE(POLY_INDX)))
C
C Unexpected end of file
	IF (IELEN.EQ.-1) GOTO 110
C
C Unexpected type of IFF entry?
	IF (IECODE.NE.'NF') THEN
	   ACTUAL_GET_SEED_LABEL=IPOL__LOST
	   CALL LSL_PUTMSG(ACTUAL_GET_SEED_LABEL,IECODE)
	   GOTO 30
	ENDIF
C
	FSN=0			! clear longword
	CALL EIHRI(FSN,1,1)	! read feature serial no.
C
  	IF (USE_FSN) LENGTH=EXPAND('%WS%N',TEXT,FSN)
C
10	CALL IFFNXT(IECODE,IELEN)
C
C Unexpected end of file
	IF (IELEN.EQ.-1) GOTO 110
C
C Are we to transfer any ACs from the seed point?
	IF (IECODE.EQ.'AC') THEN
	   CALL EIHRI(ACTYPE,1,1)
	   IF (USE_AC.AND.(ACTYPE.EQ.SEED_AC)) THEN
	      CALL READ_AC_TEXT(TEXT,LENGTH,IELEN)
	   ELSE
	      IF (DOAC) CALL EIHCPY(LUN)
	   ENDIF
	ENDIF
C
C Deal with text entry
	IF (USE_TEXT.AND.(IECODE.EQ.'TX')) THEN
	   CALL EIHR(TXTBUF,IELEN,1)
	   LENGTH=IELEN*2
	   IF (TXTBUF(LENGTH).EQ.0) LENGTH=LENGTH-1
	   TXTPTR=LENGTH
	   CALL COPY_STRING(TXTDSC,TEXT)
	ENDIF

	IF (IECODE.NE.'EF') GOTO 10

	CALL IFFPKE(IECODE,IELEN,TMP_MARK)
	GOTO 30
C
C ......................................................................
C
C		U N D E F I N E D   P O L Y G O N 
C
100	IF (USE_FSN) THEN
	   TEXT='65535'
	   LENGTH=5
	ELSE
	   TEXT='Undefined polygon'
	   LENGTH=17
	ENDIF	
	UNDEF=.TRUE.
	GOTO 30
C
C ......................................................................
C
C		U N E X P E C T E D   E N D   O F   F I L E
C
110	ACTUAL_GET_SEED_LABEL=IPOL__UNEXPEOF
	IF (HAD_SEED_FILE) THEN
      	   CALL LSL_PUTMSG(ACTUAL_GET_SEED_LABEL,SEED_FILE(:SEED_LEN))
	ELSE
      	   CALL LSL_PUTMSG(ACTUAL_GET_SEED_LABEL,IN_FILE(:IN_LEN))
	ENDIF
	GOTO 30

30	RETURN
	END

