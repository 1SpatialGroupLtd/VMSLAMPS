C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-03-07 10:59:34.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION POLYGONS_QUAL()
C
***	MODULE	POLYGONS_QUAL
**	IDENT	07MR90
C
C	Copyright (C), Laser-Scan Laboratories Ltd., Cambridge, England
C
CMOD	Now accepts FC 0 				TJH 07-Mar-1989
CMOD	Now reads in the POLygon ACs rather than ConTaiN ACs 
C							AC  12-Jan-1989
C	Created						AC  23-May-1988
C
C Function to decode IPOLYGONS /POLYGONS= qualifier
C
C All results are returned via /COMMAND/ 
C
C Function returns SS$_NORMAL if all is well or one of a variety of
C CLI errors on failure.
C
C ........................................................................
C
	IMPLICIT NONE
C
C Parameters:
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL
	INCLUDE 	'LSL$CMNIPOLYGON:IPOLYGONMSG.PAR'
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
C
C Common:
	INCLUDE 	'LSL$CMNIPOLYGON:COMMAND.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:FILE.CMN'
	INCLUDE 	'LSL$CMNLSL:CLD.CMN'
	INCLUDE 	'LSL$CMNLSL:FILENAME.CMN'
C
C W/s:
	LOGICAL		LOCAL		! tmp var
	LOGICAL		LOCNEG		! tmp var
	LOGICAL		ABSENT		! tmp var
	LOGICAL		HAD_QUAL	! qualifier was present 
	LOGICAL		HAD_KEY		! keyword was present
C
C Function:
	INTEGER		DCL_QUAL	! looks for specified qualifier
	INTEGER		DCL_FILE	! looks for a filename
	INTEGER		DCL_INT		! looks for an  integer 
	INTEGER		PUTFLN		! sets up filename components
	INTEGER		EXPFLN		! generates a filename from components
C
C ......................................................................
C
	POLYGONS_QUAL=%LOC(SS$_NORMAL)
C
C By default polygon boundary features are not output
	OPT_POL = .FALSE.
C
C Is the /POLYGONS qualifier present?
	POLYGONS_QUAL=DCL_QUAL('POLYGONS',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.POLYGONS_QUAL) GOTO 10
	IF (.NOT.HAD_QUAL) GOTO 10
C
C Note that polygon boundary features are to be output
	OPT_POL = .TRUE.
C
C Setup defaults
	POL_LABEL = .FALSE.	! No labels 
	POL_IDENT = .FALSE.	! No identifiers
C
	POL_LAY = 1		! Output to layer 1
	POL_FC = 1		! Output using FC 1
C
	POL_LABEL_AC = 82	! AC for labels (if used)
	POL_IDENT_AC = 82	! AC for identifiers (if used)	
C
C Are labels to be output?
	POLYGONS_QUAL=DCL_QUAL('POLYGONS.LABEL',HAD_KEY,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.POLYGONS_QUAL) GOTO 10
	POL_LABEL = HAD_KEY
C
C If labels are to be output...
	IF (POL_LABEL) THEN
		POLYGONS_QUAL=DCL_QUAL('POLYGONS.LABEL_AC',HAD_KEY,LOCAL,
     &								LOCNEG,.TRUE.)
		IF (.NOT.POLYGONS_QUAL) GOTO 10
C
C and an AC is specified...
		IF (HAD_KEY) THEN
			POLYGONS_QUAL=DCL_INT('POLYGONS.LABEL_AC',.TRUE.)
			IF (.NOT.POLYGONS_QUAL) GOTO 10
C
C and it lies in the correct range...
			IF ((IARRAY(1).LT.0).OR.(IARRAY(1).GT.32767)) THEN
				POLYGONS_QUAL = IPOL__INVALAC
				CALL LSL_PUTMSG(POLYGONS_QUAL,IARRAY(1))
				GOTO 10
			ENDIF
C
C then use it
			POL_LABEL_AC = IARRAY(1)
C
C if propagating and not using a file to specify the output AC types,
C use this as the contain code
		IF(HAD_PROP.AND.(.NOT.HAD_CVR_FILE))
     &					POL_CVR_AC(1)=POL_LABEL_AC
		ENDIF
	ENDIF
C
C Are identifiers to be output?
	POLYGONS_QUAL=DCL_QUAL('POLYGONS.IDENT',HAD_KEY,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.POLYGONS_QUAL) GOTO 10
	POL_IDENT = HAD_KEY
C
C If identifiers are to be output...
	IF (POL_IDENT) THEN
		POLYGONS_QUAL=DCL_QUAL('POLYGONS.IDENT_AC',HAD_KEY,LOCAL,
     &								LOCNEG,.TRUE.)
		IF (.NOT.POLYGONS_QUAL) GOTO 10
C
C and an AC is specified....
		IF (HAD_KEY) THEN
			POLYGONS_QUAL=DCL_INT('POLYGONS.IDENT_AC',.TRUE.)
			IF (.NOT.POLYGONS_QUAL) GOTO 10
C
C and it lies in the correct range...
			IF ((IARRAY(1).LT.0).OR.(IARRAY(1).GT.32767)) THEN
				POLYGONS_QUAL = IPOL__INVALAC
				CALL LSL_PUTMSG(POLYGONS_QUAL,IARRAY(1))
				GOTO 10
			ENDIF
C
C the use it...
			POL_IDENT_AC = IARRAY(1)
		ENDIF
	ENDIF
C
C Has the user specified an output layer?
	POLYGONS_QUAL=DCL_QUAL('POLYGONS.LAYER',HAD_KEY,LOCAL,LOCNEG,.TRUE.)	
	IF (.NOT.POLYGONS_QUAL) GOTO 10
C 
C if so get it ...
	IF (HAD_KEY) THEN
		POLYGONS_QUAL=DCL_INT('POLYGONS.LAYER',.TRUE.)
		IF (.NOT.POLYGONS_QUAL) GOTO 10
C 
C and if it lies in the correct range...
		IF (IARRAY(1).LT.1.OR.IARRAY(1).GT.32767) THEN
			POLYGONS_QUAL=IPOL__INVALLAY
			CALL LSL_PUTMSG(POLYGONS_QUAL,IARRAY(1))
			GOTO 10
	      	ENDIF
C
C then use it
		POL_LAY=IARRAY(1)	  
	ENDIF
C
C Has thge user specified a FC?
	POLYGONS_QUAL=DCL_QUAL('POLYGONS.FC',HAD_KEY,LOCAL,LOCNEG,.TRUE.)	
	IF (.NOT.POLYGONS_QUAL) GOTO 10
C
C If so get it...
	IF (HAD_KEY) THEN
		POLYGONS_QUAL=DCL_INT('POLYGONS.FC',.TRUE.)
		IF (.NOT.POLYGONS_QUAL) GOTO 10
C
C and if it lies in the correct range...
		IF (IARRAY(1).LT.0.OR.IARRAY(1).GT.32767) THEN
			POLYGONS_QUAL=IPOL__INVALFC
			CALL LSL_PUTMSG(POLYGONS_QUAL,IARRAY(1))
			GOTO 10
	      	ENDIF
C
C then use it
		POL_FC=IARRAY(1)	  
	ENDIF
C
C Make up a default output filename from the input segment file (ensure a .IFF
C extension)
	POLYGONS_QUAL=PUTFLN(IN_FILE(:IN_LEN))
	IF (.NOT.POLYGONS_QUAL) GOTO 10
	HAD_VER=.FALSE.
	STR_EXT='IFF'
	LEN_EXT=3
	POLYGONS_QUAL=EXPFLN(POL_FILE,POL_LEN)
	IF (.NOT.POLYGONS_QUAL) GOTO 10
C
C Has the user specified an output file?
	POLYGONS_QUAL = DCL_QUAL('POLYGONS.OUTPUT',HAD_KEY,LOCAL,
     &								LOCNEG,.TRUE.)
	IF (.NOT.POLYGONS_QUAL) GOTO 10
C
C If so get it (parsed against the default filename)
	IF (HAD_KEY) THEN
		POLYGONS_QUAL = DCL_FILE('POLYGONS.OUTPUT',
     &				POL_FILE(:POL_LEN),ABSENT,.FALSE.,.TRUE.)
		IF (.NOT.POLYGONS_QUAL) GOTO 10
C
C Use it if its there
		IF (.NOT.ABSENT) THEN
			POL_FILE = FILARY(1)(1:FIL_LEN(1))
			POL_LEN = FIL_LEN(1)
		ENDIF
	ENDIF
C
C Finished....
10	RETURN
	END

