C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-05-19 18:16:36.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION IFF_HEADER(LUN,POL,SEG,PIP)
C
***	MODULE	IFF_HEADER
***	IDENT	19MY88
C
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
CMOD	Now deals with POLygon, L/R SEGment or Point In Polygon output
C							AC   19-May-1988
CMOD	Now outputs SH entry				TJH  25-Aug-1987
C	Created						TJH  13-Mar-1987
C
C
C Function to write standard IFF header entries to the outfile(s)
C
C Function returns one of 2 condition codes:
C
C	SS$_NORMAL		-   all is well
C	IPOLYGON__UNEXPEOF	-   unexpected end of IFF file.
C
	IMPLICIT NONE
C
C Parameters:
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL
	INCLUDE		'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE		'LSL$CMNIPOLYGON:IPOLYGONMSG.PAR'
C
C Common:
	INCLUDE   'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE   'LSL$CMNIFF:IFFJUN.CMN'
	INCLUDE	  'LSL$CMNIPOLYGON:COMMAND.CMN'
	INCLUDE	  'LSL$CMNPOLYGONS:FILE.CMN'
	INCLUDE	  'LSL$CMNPOLYGONS:SECTOR.CMN'
	INCLUDE	  'LSL$CMNPOLYGONS:TABLES.CMN'
C
C Arguments:
	INTEGER	  LUN		! IFF output file LUN
C				! only one flag should be set to .T.
	LOGICAL	  POL		! closed polygon output	 
	LOGICAL	  SEG		! L/R segment output
	LOGICAL	  PIP		! point-in-polygon output
C
C Integer*2:
	INTEGER*2 IFSN,ISQ	! feature serial number/ internal no.
	INTEGER*2 IECODE,IELEN	! entry found & its length
	INTEGER*2 LAYER		! layer number
C
C Integer*4:
	INTEGER	  I,J		! loop variable
	INTEGER	  LPOSNO	! position of NO entry
	INTEGER	  NXTLAY	! position of next EO entry
	REAL      STP(2),ORI(2)	! temp. vars for IFFSH
C
C ......................................................................
C
	IFF_HEADER=%LOC(SS$_NORMAL)
C
	CALL IFFSEL(INLUN)
	CALL IFFRWD
C
10	CALL IFFSEL(INLUN)
20	CALL IFFNXT(IECODE,IELEN)
	IF (IELEN.LT.0) GOTO 100
	IF (IECODE.EQ.'NF') GOTO 30
	IF (IECODE.EQ.'EF') GOTO 40
	IF (IECODE.EQ.'JP') GOTO 20
	IF (IECODE.EQ.'JB') GOTO 20
	IF (IECODE.EQ.'VO') GOTO 20
	IF (IECODE.EQ.'NO') GOTO 50
	IF (IECODE.EQ.'EO') GOTO 60
	IF (IECODE.EQ.'RA') GOTO 70
	IF (IECODE.EQ.'NS') GOTO 90
	IF (IECODE.EQ.'EM') GOTO 110
	IF (IECODE.EQ.'SH') GOTO 80
	CALL EIHCPY(LUN)
	GOTO 20
C
C NF entry
30	CALL EIHRI(IFSN,1,1)
	CALL IFFSEL(LUN)
	ISQ=0
	CALL IFFNF(IFSN,ISQ)
	GOTO 10
C
C EF entry
40	CALL IFFSEL(LUN)
	CALL IFFEF
	GOTO 10
C
C NO entry
50	CALL EIHRI(LAYER,1,1)
	IF (LAYER.EQ.0) THEN
	   CALL IFFSEL(LUN)
	   LPOSNO=LPOSE
	   CALL IFFNO(0,0,0)
	ELSE
	   IF (IELEN.EQ.4) THEN
	      CALL EIHRL(NXTLAY,1,3)
	      CALL IFFPKE(IECODE,IELEN,NXTLAY)
	   ELSE
	      CALL IFFNXC('EO',IELEN)
	   ENDIF
	   IF (IELEN.LT.0) GOTO 100
	ENDIF
	GOTO 10
C
C EF - end layer
60	CALL IFFSEL(LUN)
	CALL IFFUNO(LPOSNO)
	CALL IFFEO
	GOTO 10
C
C RA entry
70	CALL IFFSEL(LUN)
	CALL IFFRA(IN_FIL_RANGE(1))
	GOTO 10
C 
C SH entry
80	IF (SEG) THEN
	   STP(1) = (IN_FIL_RANGE(2)-IN_FIL_RANGE(1))/(NUMBOX*3)+0.002
	   STP(2) = (IN_FIL_RANGE(4)-IN_FIL_RANGE(3))/(NUMBOY*3)+0.002
	   ORI(1) = IN_FIL_RANGE(1)-0.001
	   ORI(2) = IN_FIL_RANGE(3)-0.001
	   CALL IFFSEL(LUN)
	   CALL IFFSH(ORI(1),ORI(2),STP(1),STP(2),NUMBOX*3,NUMBOY*3)
	ENDIF
	GOTO 10
C
C NS entry
90	CALL IFFSEL(LUN)

C
C closed POLygon output ?
	IF (POL) CALL IFFNS(
     &		'Closed polygon features created by IPOLYGON')
C
C L/R SEGment output ?
	IF (SEG) CALL IFFNS(
     &		'Left/right coded segment features created by IPOLYGON')
C
C Point In Polygon output ?
	IF (PIP) CALL IFFNS(
     &		'Point features in polygons created by IPOLYGON')
	
	GOTO 10
C
C ......................................................................
C
100	IFF_HEADER=IPOL__UNEXPEOF
	CALL LSL_PUTMSG(IFF_HEADER,IN_FILE(:IN_LEN))
C
110	RETURN
	END
