C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-03-26 12:26:08.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION READ_COV_FILE()
C
***	MODULE	READ_COV_FILE
***	IDENT	30NO89
C
C	Copyright (C), Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Created						SGH  23-Nov-1989
C
C Function to read in the input and output ACs and associated text to define
C the coverages
C
C .......................................................................
C
	IMPLICIT NONE
C
C Parameters:
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
	INCLUDE 	'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNIPOLYGON:IPOLYGONMSG.PAR'
C
C Common:
	INCLUDE		'LSL$CMNLSL:TXTC.CMN'
	INCLUDE		'LSL$CMNLSL:EXPC.CMN'
	INCLUDE		'LSL$CMNLSL:EXCEPTION.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:FILE.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:COVERAGES.CMN'
	INCLUDE		'LSL$CMNIPOLYGON:COMMAND.CMN'
C
C W/s:
	INTEGER		IERR		! return error code
	LOGICAL*4	STATUS		! return status code
	INTEGER		LINE		! current line being read
	BYTE		CH		! single character
	BYTE		QUOTE		! "
	INTEGER*2	LFT_C_CODE
	INTEGER*2	RGT_C_CODE
	INTEGER*2	IN_C_LEN
	CHARACTER*255	IN_C_TXT
	INTEGER*2	OUT_C_LEN
	CHARACTER*255	OUT_C_TXT
	INTEGER*2	LFT_C_AC
	INTEGER*2	RGT_C_AC
	INTEGER*2	CTN_C_AC
	INTEGER*2	POL_C_AC
	INTEGER*2	PIP_C_AC
	INTEGER*4	RET
	INTEGER		COV,TXT
C
C Functions:
	LOGICAL*4	RDCHS		! reads a character, skipping sp/tab
	LOGICAL*4	RDINT		! reads a word from file
	LOGICAL*4	READSTR		! reads a string
	INTEGER*4	FLROPN		! open a text file for reading
	INTEGER*4	FLRLIN		! read a line from a text file
	INTEGER*4	FLRCLO		! close a text file
C
C ......................................................................
C
	READ_COV_FILE = %LOC(SS$_NORMAL)
C
C Note how many coverages have been read in 
	NUM_COVER = 0
	TXT = 0
C
C ........................................................................
C		O P E N   P A I R   F I L E
C
	STATUS=FLROPN(COVLUN,COV_FILE(1:COV_LEN),IERR)
	IF (.NOT.STATUS) THEN
	   READ_COV_FILE= IPOL__OPCOV
	   CALL LSL_PUTMSG(READ_COV_FILE,COV_FILE(1:COV_LEN))
	   CALL LSL_ADDMSG(STATUS)
	   CALL LSL_ADDMSG(IERR)
	   GOTO 999
	ENDIF
C
C ........................................................................
C
C Keep a count of which line we are on
	LINE = 0
C
C Read in the next line 
10	STATUS=FLRLIN(,,,IERR)
	LINE=LINE+1
	IF (STATUS.EQ.LSL__EOF) THEN
	   IF(NUM_COVER.GT.0)NUM_TXT(NUM_COVER)=TXT
	   GOTO 20
	ENDIF
	IF (.NOT.STATUS) THEN
	   READ_COV_FILE=IPOL__BADCOV
	   CALL LSL_PUTMSG(READ_COV_FILE,LINE,COV_FILE(1:COV_LEN))
	   CALL LSL_ADDMSG(STATUS)
	   CALL LSL_ADDMSG(IERR)
	   GOTO 999
	ENDIF
C
C Check if valid line to read - loop back if not
	CALL BSLN
	IF (RDCHS(CH)) GOTO 10		! ignore empty lines
	IF (CH.EQ.'!') GOTO 10		! ignore comment lines
	CALL BSCH			! backspace
C
C Read in coverage no, two ACs, two prefixes and five more ACs from this line...
	IF (RDINT(COV)) GOTO 30
C two integers
	IF (RDINT(LFT_C_CODE)) GOTO 30
	IF (RDINT(RGT_C_CODE)) GOTO 30
C two strings
C find start quote
	QUOTE='"'
	IF(RDCHS(CH))GOTO 30
	IF(CH.NE.QUOTE)GOTO 30	
C read up to a quote, and include leading spaces
	IN_C_LEN=READSTR(IN_C_TXT,QUOTE,,.FALSE.,RET)
	IF(.NOT.RET)GOTO 30
C	IN_C_LEN=IN_C_LEN-1
	IF(RDCHS(CH))GOTO 30
	IF(CH.NE.QUOTE)GOTO 30	
C read up to a quote, and include leading spaces
	OUT_C_LEN=READSTR(OUT_C_TXT,QUOTE,,.FALSE.,RET)
	IF(.NOT.RET)GOTO 30
C	OUT_C_LEN=OUT_C_LEN-1
C and five integers
	IF (RDINT(LFT_C_AC)) GOTO 30
	IF (RDINT(RGT_C_AC)) GOTO 30
	IF (RDINT(CTN_C_AC)) GOTO 30
	IF (RDINT(POL_C_AC)) GOTO 30
	IF (RDINT(PIP_C_AC)) GOTO 30
C
C We have a valid line
C
	IF(COV.EQ.NUM_COVER)THEN
C another text combination for the current cover
	   IF (TXT.EQ.MAXTXT) THEN
	      READ_COV_FILE = IPOL__TOOMNYTXT
	      CALL LSL_PUTMSG(READ_COV_FILE,COVMAX,COV_FILE(1:COV_LEN))
	      GOTO 20
	   ENDIF
	   TXT=TXT+1
	   IF(NUM_COVER.GT.0)IN_CVR_TXT(TXT,NUM_COVER)=IN_C_TXT
	   IF(NUM_COVER.GT.0)IN_CVR_LEN(TXT,NUM_COVER)=IN_C_LEN
	   IF(NUM_COVER.GT.0)OUT_CVR_TXT(TXT,NUM_COVER)=OUT_C_TXT
	   IF(NUM_COVER.GT.0)OUT_CVR_LEN(TXT,NUM_COVER)=OUT_C_LEN
C
	ELSE IF(COV.EQ.NUM_COVER+1)THEN
	   IF (NUM_COVER.EQ.COVMAX) THEN
	      READ_COV_FILE = IPOL__TOOMNYCOV
	      CALL LSL_PUTMSG(READ_COV_FILE,COVMAX,COV_FILE(1:COV_LEN))
	      GOTO 20
	   ENDIF
C record number of texts for last cover
	   IF(NUM_COVER.GT.0)NUM_TXT(NUM_COVER)=TXT
C save the AC types for this coverage
	   NUM_COVER = NUM_COVER+1
	   LFT_CVR_CODE(NUM_COVER)=LFT_C_CODE
	   RGT_CVR_CODE(NUM_COVER)=RGT_C_CODE
	   LFT_CVR_AC(NUM_COVER)=LFT_C_AC
	   RGT_CVR_AC(NUM_COVER)=RGT_C_AC
	   CTN_CVR_AC(NUM_COVER)=CTN_C_AC
	   POL_CVR_AC(NUM_COVER)=POL_C_AC
	   PIP_CVR_AC(NUM_COVER)=PIP_C_AC
	   TXT=1
	   IN_CVR_TXT(TXT,NUM_COVER)=IN_C_TXT
	   IN_CVR_LEN(TXT,NUM_COVER)=IN_C_LEN
	   OUT_CVR_TXT(TXT,NUM_COVER)=OUT_C_TXT
	   OUT_CVR_LEN(TXT,NUM_COVER)=OUT_C_LEN
	ELSE
	   READ_COV_FILE = IPOL__INVCOVSEQ
	   CALL LSL_PUTMSG(READ_COV_FILE,COVMAX,COV_FILE(1:COV_LEN))
	   GOTO 20
	ENDIF
C
	GOTO 10
C
C ........................................................................
C		E R R O R   R E A D I N G   F C
C
30	READ_COV_FILE=IPOL__BADCOV
	CALL LSL_PUTMSG(READ_COV_FILE,LINE,COV_FILE(1:COV_LEN))
	IF (ERRNUM.NE.LSL__UNEXPEOL) THEN
	   CALL LSL_ADDMSG(ERRNUM)
	   IF (ERRNUM.EQ.LSL__HADEXCP) CALL LSL_ADDMSG(LSL_EXCP)
	ENDIF
C
C ........................................................................
C		C L O S E   P A I R   F I L E
C
20	STATUS=FLRCLO(COVLUN,IERR)
	IF (.NOT.STATUS) THEN
	   READ_COV_FILE= IPOL__CLCOV
	   CALL LSL_PUTMSG(READ_COV_FILE,COV_FILE(1:COV_LEN))
	   CALL LSL_ADDMSG(STATUS)
	   CALL LSL_ADDMSG(IERR)
	ENDIF
C
C Finished.....
999	RETURN
	END
