C
C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	LOGICAL*4 FUNCTION BOX_SEED()
C
***	MODULE	BOX_SEED
***	IDENT	08MY92
C
	IMPLICIT NONE
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
	LOGICAL*4	ACTUAL_BOX_SEED
C
C	........................................................................
C
	BOX_SEED = ACTUAL_BOX_SEED(
     &			POLMAX,TABMAX,POLNEST_MAX, PARTS_MAX,
     &			%VAL(PTR$_SEEDBOX),
     &			%VAL(PTR$_SEED_ADDRESS),
     &			%VAL(PTR$_SEED_COORD)
     &		  )
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	LOGICAL*4 FUNCTION ACTUAL_BOX_SEED(
     &		POLMAX,TABMAX,POLNEST_MAX,PARTS_MAX,
     &		SEEDBOX,
     &		SEED_ADDRESS,
     &		SEED_COORD
     &	)
C
***	MODULE	ACTUAL_BOX_SEED
***	IDENT	10AP87
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Author						TJH  26-Feb-1987
C
C
C Function to form the sectored spatial index needed for seed point
C determination. The boxes are allocated using the segment data range.
C
C Function returns SS$_NORMAL if all is well or one of a variety of
C IPOLYGON error codes on failure.
C
C ......................................................................
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNIPOLYGON:IPOLYGONMSG.PAR'
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
C
C Common:
	INCLUDE		'LSL$CMNIPOLYGON:COMMAND.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:FILE.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:TABLES.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:SECTOR.CMN'
C
C Arguments
	INTEGER*4	POLMAX
	INTEGER*4	TABMAX
	INTEGER*4	POLNEST_MAX
	INTEGER*4	PARTS_MAX
C
	INTEGER*2	SEEDBOX(POLMAX+1)
	INTEGER*4	SEED_ADDRESS(TABMAX)
	REAL		SEED_COORD(2,POLMAX+1)
C
C W/s
	REAL	  COORDX,COORDY	! seed point position
C
	LOGICAL   EMPTY		! flag for empty box
C
	INTEGER*2 BOX		! current box
	INTEGER*2 INDX		! temp var.
	INTEGER*2 IECODE,IELEN	! IFF entry code and length
	INTEGER*2 IENDS		! line state (coded bitwise)
	INTEGER*2 MARK		! sets sign of box contents
	INTEGER*2 NPTS		! number of coord pairs to be read
	INTEGER*2 SEED_PNT	! current seed point
C
	INTEGER   IBOX		! found box no.
	INTEGER	  NX,NY		! for box calc.
C
C ......................................................................
C
	ACTUAL_BOX_SEED=%LOC(SS$_NORMAL)
C
C If /SEED_FILE was specified we have had a separate seed point file.
C Select this, otherwise the addresses in SEED_ADDRESS won't tally!
	IF (HAD_SEED_FILE) CALL IFFSEL(SEEDLUN)
C
C Set first point and sign of box contents
	INDX=1
	MARK=1
C
C Get the all the seed points which lie within each box in turn
	DO 20 BOX=1,NUMBOX*NUMBOY
	   EMPTY=.TRUE.			! presume empty box
	   SBOX_START(BOX)=INDX
	   DO 10 SEED_PNT=1,NUM_SEED_PTS
	      CALL IFFPKE(IECODE,IELEN,SEED_ADDRESS(SEED_PNT))
	      IF (IELEN.LE.-1) GOTO 30	! eof?
	      IF (IECODE.NE.'NF') THEN
	         ACTUAL_BOX_SEED=IPOL__LOST
	         CALL LSL_PUTMSG(ACTUAL_BOX_SEED,IECODE)
	         GOTO 40
	      ELSE
	         CALL IFFNXC('ST',IELEN)
	         IF (IELEN.LE.-1) GOTO 30	! eof?
	         CALL EIHRS(NPTS,IENDS)
	         CALL EIHRR(COORDX,1,1)	 	! read [1st] coord - X
	         CALL EIHRR(COORDY,1,3)	 	! read [1st] coord - Y
	      ENDIF
C
C Determine box number containing this coordinate
	      NX = (COORDX-BOXORIX)/BOXSTPX
	      NY = (COORDY-BOXORIY)/BOXSTPY
	      IBOX= NY*NUMBOX + NX + 1
C
C Matches current box?
	      IF (BOX.EQ.IBOX) THEN
	         IF (EMPTY) THEN
	            EMPTY=.FALSE.		! yes!
	            IF (INDX.GT.1) THEN		! change sign of entries
	               MARK=ISIGN(1,SEEDBOX(INDX-1))
	               MARK=-MARK
	            ENDIF
	         ENDIF
	         SEEDBOX(INDX)=SEED_PNT*MARK
	         SEED_COORD(1,SEED_PNT)=COORDX
	         SEED_COORD(2,SEED_PNT)=COORDY
	         INDX=INDX+1
	      ENDIF
10	   CONTINUE
	   IF (EMPTY) THEN
	      SBOX_START(BOX)=-SBOX_START(BOX)	! flag box as empty
	   ENDIF
20	CONTINUE
	GOTO 40
C
C ......................................................................
C
C Unexpected end of file
30	ACTUAL_BOX_SEED=IPOL__UNEXPEOF
	CALL LSL_PUTMSG(ACTUAL_BOX_SEED,SEED_FILE(:SEED_LEN))
C
C ......................................................................
C
40	IF (HAD_SEED_FILE) CALL IFFSEL(INLUN)
	RETURN
	END
