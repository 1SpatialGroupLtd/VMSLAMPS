	INTEGER*4  FUNCTION CLOSE_FILES()
C
***	MODULE	CLOSE_FILES
***	IDENT	12JL88
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
CMOD 	some functionality moved into DELETE_IFF_OUT	AC   16-Jun-1988
C	Author						TJH  12-Feb-1987
C
C Function to close all open IPOLYGON files. If DELETE has been set then
C all output IFF files (which are already closed) are deleted by the call to
C DELETE_IFF_OUT()
C
C Function returns one of 2 condition codes:
C
C	SS$_NORMAL	- success
C	SS$_ABORT	- something went wrong
C
C All file-specs and their lengths are taken from /FILCHS/ common.
C
C All error reporting is done locally.
C
	IMPLICIT NONE
C
C Parameters:
	INTEGER*4	STS$K_WARNING
	EXTERNAL  	STS$K_WARNING	! bit mask for warning severity
	INTEGER*4 	SS$_ABORT
	EXTERNAL  	SS$_ABORT	! bad luck!
	INTEGER*4 	SS$_NORMAL
	EXTERNAL  	SS$_NORMAL	! normal successful completion
	INCLUDE 	'LSL$CMNIPOLYGON:IPOLYGONMSG.PAR'
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNLSL:LSLLIBMSG.PAR'
C
C Functions:
	LOGICAL		IFFCLO		! closes IFF file
	LOGICAL		IFFCDL		! closes and deletes IFF file
	INTEGER		FLWCLO		! close list file
	INTEGER		FLWDEL		! closes and deletes list file
	INTEGER		FLWPRT		! closes and prints list file
	INTEGER		FLWSPL		! closes and spools list file
	INTEGER		DELETE_IFF_OUT	! deletes unwanted IFF output
C
C Workspace:
	INTEGER		IERR		! for error return	
C
C Common:
	INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE 'LSL$CMNIPOLYGON:COMMAND.CMN'
	INCLUDE 'LSL$CMNPOLYGONS:FILE.CMN'
	INCLUDE 'LSL$CMNLSL:STATUS.CMN'
C
C.......................................................................
C
	CLOSE_FILES = %LOC(SS$_NORMAL)     ! normal completion
C
C Do we need to delete output IFF files?
C
	CLOSE_FILES = DELETE_IFF_OUT()
C	
C Close segments IFF input file
C
	IF (INFLO) THEN
	   CALL IFFCLO(INLUN)			! current input file
	   IF (IERCD.NE.0) THEN			! error?
	      CLOSE_FILES=IPOL__CLSRCIFF		! error closing file
	      CALL LSL_PUTMSG(CLOSE_FILES,IN_FILE(:IN_LEN))!tell user
	   ENDIF
	ENDIF
C
C ......................................................................
C
C Close segments IFF input file
C
	IF (SEEDFLO) THEN
	   CALL IFFCLO(SEEDLUN)			! current input file
	   IF (IERCD.NE.0) THEN			! error?
	      CLOSE_FILES=IPOL__CLSEEDIFF		! error closing file
	      CALL LSL_PUTMSG(CLOSE_FILES,SEED_FILE(:SEED_LEN))!tell user
	   ENDIF
	ENDIF
C
C ......................................................................
C
C If required, close the listing file and print/delete it
C
	IF (LISFLO) THEN
	   IF (HAD_PRINT .AND..NOT.HAD_LIS) THEN
	      CLOSE_FILES=FLWSPL(LISLUN,IERR)
	      IF (CLOSE_FILES.NE.LSL__NORMAL) THEN	! error?
	         CLOSE_FILES=IPOL__CLLIST		! not spooled
	         CALL LSL_PUTMSG(CLOSE_FILES,LIS_FILE(:LIS_LEN))
C
C Give any secondary error message
	         IF (IERR.NE.0) CALL LSL_ADDMSG(IERR)
	      ENDIF
	   ENDIF
C
C
C If required, close the listing file and print it
C
	   IF (HAD_PRINT.AND.HAD_LIS) THEN
	      CLOSE_FILES=FLWPRT(LISLUN,IERR)
	      IF (CLOSE_FILES.NE.LSL__NORMAL) THEN	! error?
	         CLOSE_FILES=IPOL__CLLIST			! not spooled
	         CALL LSL_PUTMSG(CLOSE_FILES,LIS_FILE(:LIS_LEN))
C
C Give any secondary error message
	         IF (IERR.NE.0) CALL LSL_ADDMSG(IERR)
	      ENDIF
	   ENDIF	
C
C If /PRINTER not specified, just close the /OUTPUT file
C
	   IF (.NOT.HAD_PRINT) THEN
	      CLOSE_FILES=FLWCLO(LISLUN,IERR)
	      IF (CLOSE_FILES.NE.LSL__NORMAL) THEN	! error?
	         CLOSE_FILES=IPOL__CLLIST		! close failed
	         CALL LSL_PUTMSG(CLOSE_FILES)		! tell user
C
C Give any secondary error message
	         IF (IERR.NE.0) CALL LSL_ADDMSG(IERR)
	      ENDIF
	   ENDIF	
	ENDIF
C
C ......................................................................
C
C If required, close the /LITES2 file
C
	IF (LITESFLO) THEN
	   CLOSE_FILES=FLWCLO(LITESLUN,IERR)
	   IF (CLOSE_FILES.NE.LSL__NORMAL) THEN		! error?
	      CLOSE_FILES=IPOL__CLLITES			! close failed
	      CALL LSL_PUTMSG(CLOSE_FILES,LITES_FILE(:LITES_LEN))
C
C Give any secondary error message
	      IF (IERR.NE.0) CALL LSL_ADDMSG(IERR)
	   ENDIF
	ENDIF	
C
C.......................................................................
C
10	IF (CLOSE_FILES) THEN
	   CLOSE_FILES=%LOC(SS$_NORMAL)
	ELSE
	   CLOSE_FILES=%LOC(SS$_ABORT)
	ENDIF
	RETURN
	END
