C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-08-17 12:01:20.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION LRCODE_QUAL()
C
***	MODULE	LRCODE_QUAL
***	IDENT	17AU88
C
C	Copyright (C), Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Created						AC  24-May-1988
C
C Function to decode IPOLYGONS /LRCODE='keywords' qualifier
C
C All results are returned via /COMMAND/ 
C
C Function returns SS$_NORMAL if all is well or one of a variety of
C CLI errors on failure.
C
C .....................................................................
C

	IMPLICIT NONE
C
C Parameters:
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL
	INCLUDE 	'LSL$CMNIPOLYGON:IPOLYGONMSG.PAR'
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
C
C Common:
	INCLUDE 	'LSL$CMNIPOLYGON:COMMAND.CMN'
	INCLUDE 	'LSL$CMNLSL:CLD.CMN'
C
C W/s:
	LOGICAL		LOCAL      	! tmp var
	LOGICAL		LOCNEG     	! tmp var
	LOGICAL		HAD_QUAL	! Had /LRCODE qualifier
	LOGICAL		HAD_KEY		! Had keyword from
C					! {LEFT_AC,RIGHT_AC}
C Functions:
	INTEGER		DCL_QUAL	! looks for specified qualifier
	INTEGER		DCL_INT		! gets qualifier args. (integer)
C
C ......................................................................
C
	LRCODE_QUAL=%LOC(SS$_NORMAL)
C
C By default L/R coding is not to be used
	HAD_LRCODE = .FALSE.
C
C is the /LRCODE qualifier present?
	LRCODE_QUAL=DCL_QUAL('LRCODE',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.LRCODE_QUAL) GOTO 10
	IF (.NOT.HAD_QUAL) GOTO 10
C
C Note that L/R coding is to be used
	HAD_LRCODE = .TRUE.
C
C Setup defaults
	LFT_CODE = 4	! AC giving left code
	RGT_CODE = 5	! AC giving right code
C
C Has the user specified a different left code?
	LRCODE_QUAL=DCL_QUAL('LRCODE.LEFT_AC',HAD_KEY,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.LRCODE_QUAL) GOTO 10
C
C If so then get it...
	IF (HAD_KEY) THEN
		LRCODE_QUAL=DCL_INT('LRCODE.LEFT_AC',.TRUE.)
		IF (.NOT.LRCODE_QUAL) GOTO 10
C
C and if it lies in the correct range ...
		IF (IARRAY(1).LT.0.OR.IARRAY(1).GT.32767) THEN
			LRCODE_QUAL=IPOL__INVALAC
			CALL LSL_PUTMSG(LRCODE_QUAL,IARRAY(1))
			GOTO 10
		ENDIF
C
C then use it
		LFT_CODE=IARRAY(1)
	ENDIF
C
C Has the user specified a different right code?
	LRCODE_QUAL=DCL_QUAL('LRCODE.RIGHT_AC',HAD_KEY,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.LRCODE_QUAL) GOTO 10
C
C If so then get it...
	IF (HAD_KEY) THEN
		LRCODE_QUAL=DCL_INT('LRCODE.RIGHT_AC',.TRUE.)
		IF (.NOT.LRCODE_QUAL) GOTO 10
C
C and if it lies in the correct range ...
		IF (IARRAY(1).LT.0.OR.IARRAY(1).GT.32767) THEN
			LRCODE_QUAL=IPOL__INVALAC
			CALL LSL_PUTMSG(LRCODE_QUAL,IARRAY(1))
			GOTO 10
		ENDIF
C
C then use it
		RGT_CODE=IARRAY(1)
	ENDIF
C
C finished
10	RETURN
	END

