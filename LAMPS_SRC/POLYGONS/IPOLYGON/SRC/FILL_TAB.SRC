C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-05-12 15:01:06.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C
C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
	LOGICAL*4 FUNCTION FILL_TAB(POLY_INDX,NNEST,SEGPTR,PTRS)
C
***	MODULE	FILL_TAB
***	IDENT	12MY92
C
	IMPLICIT NONE
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
C Arguments:
	INTEGER	  	POLY_INDX	! current polygon
	INTEGER		NNEST		! number of nested polygons
	INTEGER   	SEGPTR		! pointer into SEGTAB
	INTEGER	      PTRS(POLNEST_MAX) ! pointers to nested polys
C
	LOGICAL*4	ACTUAL_FILL_TAB
C
C	........................................................................
C
	FILL_TAB = ACTUAL_FILL_TAB(POLY_INDX,NNEST,SEGPTR,PTRS,
     &			POLMAX,TABMAX,POLNEST_MAX, PARTS_MAX,
     &			%VAL(PTR$_POLY_PARTS),
     &			%VAL(PTR$_POLY_START),
     &			%VAL(PTR$_SEGTAB)
     &		  )
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	LOGICAL*4 FUNCTION ACTUAL_FILL_TAB(POLY_INDX,NNEST,SEGPTR,PTRS,
     &		POLMAX,TABMAX,POLNEST_MAX,PARTS_MAX,
     &		POLY_PARTS,
     &		POLY_START,
     &		SEGTAB
     &	)
C

***	MODULE	ACTUAL_FILL_TAB
***	IDENT	17AU88
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Author	- derived from the old SIDE_TAB		AC  23-June-1987
C
C Function identifies left/right polygons for segments and tabulates
C the results in /POLYGONS/LR_SEGMENT. 
C
C Function returns SS$_NORMAL if all is well or one of a variety of
C POLYGONS error codes on failure.
C
C ......................................................................
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNIPOLYGON:IPOLYGONMSG.PAR'
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
C
C Common:
	INCLUDE		'LSL$CMNIPOLYGON:COMMAND.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:FILE.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:TABLES.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:SECTOR.CMN'
	INCLUDE		'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE		'LSL$CMNLSL:TXTC.CMN'
C
C Arguments:
	INTEGER	  	POLY_INDX	! current polygon
	INTEGER		NNEST		! number of nested polygons
	INTEGER   	SEGPTR		! pointer into SEGTAB
C
	INTEGER*4	POLMAX
	INTEGER*4	TABMAX
	INTEGER*4	POLNEST_MAX
	INTEGER*4	PARTS_MAX
C
	INTEGER	      PTRS(POLNEST_MAX) ! pointers to nested polys
C
	INTEGER		POLY_PARTS(2,POLMAX*4)
	INTEGER		POLY_START(3,POLMAX)
	INTEGER*4	SEGTAB(2,TABMAX)
C
C W/s:
	INTEGER		FSN		! FSN of seed point (longword)
	INTEGER		I		! tmp var
	INTEGER		IREV		! segment direction
C
C Functions:
	LOGICAL		BBCS		! checks/sets bitmap element
	LOGICAL		EXT1V		! extract 1-bit field
C
C ......................................................................
C
	ACTUAL_FILL_TAB=%LOC(SS$_NORMAL)
C
C Store sign of segment pointer. If negative we have to
C reverse this segment for contiguous polygon boundary formation
10	IREV=ISIGN(1,POLY_PARTS(1,SEGPTR))
	FSN=SEGTAB(1,IABS(POLY_PARTS(1,SEGPTR)))
C
C Be careful as we may have created either clockwise or anti_clockwise
C polygons (and segment may have to be reversed for either!) so set 
C either the LHS or RHS polygon index in LR_SEGMENT
	IF (.NOT.CLOCK) THEN
	   IF (IREV.LT.0) THEN
	      IF (.NOT.(EXT1V(FSN,LRUSED(1,2)))) THEN
	         LR_SEGMENT(2,FSN)=POLY_INDX
	      ENDIF
	   ELSE
	      IF (.NOT.(EXT1V(FSN,LRUSED(1,1)))) THEN
          	 LR_SEGMENT(1,FSN)=POLY_INDX
              ENDIF
	   ENDIF
	ELSE
	   IF (IREV.LT.0) THEN
	      IF (.NOT.(EXT1V(FSN,LRUSED(1,1)))) THEN
	         LR_SEGMENT(1,FSN)=POLY_INDX
	      ENDIF
	   ELSE
	      IF (.NOT.(EXT1V(FSN,LRUSED(1,2)))) THEN
	         LR_SEGMENT(2,FSN)=POLY_INDX
	      ENDIF
	   ENDIF
	ENDIF
C
C Have we finished the polygon? If not get next segment forming the
C polygon 
	IF (POLY_PARTS(2,SEGPTR).NE.0) THEN
	   SEGPTR=POLY_PARTS(2,SEGPTR)
	   GOTO 10
	ENDIF
C
C ......................................................................
C
C Get the FSNs of any nested polygon's segments. Note that NNEST is set to zero
C before check on bounding polygon, so bounding poly nests are avoided
C
C Does the polygon contain any nested polygons?
	DO 40 I=1,NNEST
C
C Get the FSNs of the segments forming 1st order nested polygon(s)
	   SEGPTR=IABS(POLY_START(1,PTRS(I)))
C
C Store sign of segment pointer. If negative we have to
C reverse this segment for contiguous polygon boundary formation
30	   IREV=ISIGN(1,POLY_PARTS(1,SEGPTR))
	   FSN=SEGTAB(1,IABS(POLY_PARTS(1,SEGPTR)))

C Be careful as we may have created either clockwise or anti_clockwise
C polygons (and segment may have to be reversed for either!) so set 
C either the LHS or RHS polygon index in LR_SEGMENT
	   IF (CLOCK) THEN
	      IF (IREV.GT.0) THEN
	         IF (.NOT.BBCS(FSN,LRUSED(1,2))) THEN
                    CALL LSL_PUTMSG(IPOL__MULTISEG,FSN)
	            IF (HAD_LIS) CALL FLWRTF('Segment with FSN '//
     &			         '%N used to form multiple polygons',FSN)
	         ENDIF
	         LR_SEGMENT(2,FSN)=POLY_INDX
	      ELSE
	         IF (.NOT.BBCS(FSN,LRUSED(1,1))) THEN
	            CALL LSL_PUTMSG(IPOL__MULTISEG,FSN)
	            IF (HAD_LIS) CALL FLWRTF('Segment with FSN '//
     &			        '%N used to form multiple polygons',FSN)
	         ENDIF
	         LR_SEGMENT(1,FSN)=POLY_INDX
	      ENDIF
	   ELSE
	      IF (IREV.GT.0) THEN
	         IF (.NOT.BBCS(FSN,LRUSED(1,1))) THEN
	            CALL LSL_PUTMSG(IPOL__MULTISEG,FSN)
	            IF (HAD_LIS) CALL FLWRTF('Segment with FSN '//
     &			        '%N used to form multiple polygons',FSN)
	         ENDIF
	         LR_SEGMENT(1,FSN)=POLY_INDX
	      ELSE
	         IF (.NOT.BBCS(FSN,LRUSED(1,2))) THEN
	            CALL LSL_PUTMSG(IPOL__MULTISEG,FSN)
	            IF (HAD_LIS) CALL FLWRTF('Segment with FSN '//
     &			        '%N used to form multiple polygons',FSN)
	         ENDIF
	         LR_SEGMENT(2,FSN)=POLY_INDX
	      ENDIF
	   ENDIF
C
C Have we finished the 1st order nested polygon?
	   IF (POLY_PARTS(2,SEGPTR).NE.0) THEN
C
C It would appear not. Get the next segment forming the polygon 
	      SEGPTR=POLY_PARTS(2,SEGPTR)
	      GOTO 30
	   ENDIF
40	CONTINUE

60	RETURN
	END

