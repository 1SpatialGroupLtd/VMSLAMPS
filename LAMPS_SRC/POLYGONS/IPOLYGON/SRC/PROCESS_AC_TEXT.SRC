C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-03-26 13:24:58.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION PROCESS_AC_TEXT(TEXT,LENGTH)
C
***	MODULE	PROCESS_AC_TEXT
***	IDENT	01DE89
C
C	Copyright (C), Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Created						SGH 27-Nov-1989
C
C Modifies texts in ACs, replacing input prefix by output prefix
C If concatenating, put all text into the first
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
	INCLUDE 	'LSL$CMNIPOLYGON:IPOLYGONMSG.PAR'
C
C Common:
	INCLUDE		'LSL$CMNIPOLYGON:COMMAND.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:COVERAGES.CMN'
C
C Arguments:
	CHARACTER*256	TEXT(COVMAX)	! polygon label texts
	INTEGER*2 	LENGTH(COVMAX)	! lengths of TEXTs
C
C W/s
	INTEGER		I,J,L
C ......................................................................
C
	PROCESS_AC_TEXT=%LOC(SS$_NORMAL)
	IF(LENGTH(1).EQ.17.AND.TEXT(1).EQ.'Undefined Polygon')GOTO 900
	DO 100 I=1,NUM_COVER
	IF(IN_CVR_LEN(1,I).EQ.0)THEN
C null input prefix
	   IF(OUT_CVR_LEN(1,I).NE.0)THEN
C non-null output prefix
	      TEXT(I)=
     &		OUT_CVR_TXT(1,I)(:OUT_CVR_LEN(1,I))//TEXT(I)(:LENGTH(I))
	      LENGTH(I)=OUT_CVR_LEN(1,I)+LENGTH(I)
	   ENDIF
	   GOTO 100
	ENDIF
C find prefix for I-th cover matching (part of) TEXT(I)
	DO 80 J=1,NUM_TXT(I)
	L=IN_CVR_LEN(J,I)
	IF(LENGTH(I).LT.L)GOTO 80
	IF(TEXT(I)(:L).NE.IN_CVR_TXT(J,I)(:L))GOTO 80
C prefix J matches
	IF(LENGTH(I).EQ.L)THEN
C text is just prefix
	   TEXT(I)=OUT_CVR_TXT(J,I)(:OUT_CVR_LEN(J,I))
	   LENGTH(I)=OUT_CVR_LEN(J,I)
	ELSE
	   IF(OUT_CVR_LEN(J,I).EQ.0)THEN
C null output prefix
	      TEXT(I)=TEXT(I)(L+1:LENGTH(I))
	      LENGTH(I)=LENGTH(I)-L
	   ELSE
	      TEXT(I)=
     &		OUT_CVR_TXT(J,I)(:OUT_CVR_LEN(J,I))//TEXT(I)(L+1:LENGTH(I))
	      LENGTH(I)=OUT_CVR_LEN(J,I)+LENGTH(I)-L
	   ENDIF
	ENDIF
	GOTO 100
80	CONTINUE
	PRINT*,'Error processing AC texts'
100	CONTINUE
C
	IF(HAD_CONCAT)THEN
	   DO 200 I=2,NUM_COVER
	   IF(LENGTH(I)+LENGTH(1).GT.256)THEN
C truncate if total length will be too great
	      PROCESS_AC_TEXT=IPOL__ACTRUNC
	      CALL LSL_PUTMSG(PROCESS_AC_TEXT)
	      GOTO 220
	   ENDIF
	   TEXT(1)=TEXT(1)(:LENGTH(1))//TEXT(I)(:LENGTH(I))
	   LENGTH(1)=LENGTH(1)+LENGTH(I)
200	   CONTINUE
220	   CONTINUE
	ENDIF
900	RETURN
	END
