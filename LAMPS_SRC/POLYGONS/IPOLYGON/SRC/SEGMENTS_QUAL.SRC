C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-03-26 12:27:02.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION SEGMENTS_QUAL()
C
***	MODULE	SEGMENTS_QUAL
**	IDENT	28NO89
C
C	Copyright (C), Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Created						AC  23-May-1988
C
C Function to decode IPOLYGONS /SEGMENTS= qualifier
C
C All results are returned via /COMMAND/ 
C
C Function returns SS$_NORMAL if all is well or one of a variety of
C CLI errors on failure.
C
	IMPLICIT NONE
C
C Parameters:
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL
	INCLUDE 	'LSL$CMNIPOLYGON:IPOLYGONMSG.PAR'
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
C
C Common:
	INCLUDE 	'LSL$CMNIPOLYGON:COMMAND.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:FILE.CMN'
	INCLUDE 	'LSL$CMNLSL:CLD.CMN'
	INCLUDE 	'LSL$CMNLSL:FILENAME.CMN'
C
C W/s:
	LOGICAL		LOCAL		! tmp var
	LOGICAL		LOCNEG		! tmp var
	LOGICAL		ABSENT		! tmp var
	LOGICAL		HAD_QUAL	! qualifier was present
	LOGICAL		HAD_KEY		! keyword was present
	CHARACTER*255	FC_TXT		! string in /SELECT_FC="..."
	INTEGER*2	FC_LEN
C
C Functions:
	INTEGER		DCL_QUAL	! looks for a specified qualifier
	INTEGER		DCL_FILE	! looks for a specified keyword
	INTEGER		DCL_INT		! looks for an integer
	INTEGER		DCL_STR		! looks for a string
	INTEGER		PUTFLN		! sets up filename components
	INTEGER		EXPFLN		! generates a filename
	LOGICAL		READ_FCS	! read FC selections from string
C
C ......................................................................
C
	SEGMENTS_QUAL=%LOC(SS$_NORMAL)
C
C By default coded segments are not to be output
	OPT_SEG = .FALSE.
C
C is the /SEGMENTS qualifier present?
	SEGMENTS_QUAL=DCL_QUAL('SEGMENTS',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.SEGMENTS_QUAL) GOTO 10
	IF (.NOT.HAD_QUAL) GOTO 10
C
C Note that coded segments are to be output
	OPT_SEG = .TRUE.
C
C setup defaults
	SEG_LABEL = .FALSE.	! no labels
	SEG_IDENT = .FALSE.	! no identifiers
	HAD_JUN = .FALSE.	! junction-structure to be thrown away
	HAD_SELECT = .FALSE.	! no selection by FC on output
C
C ACs to be used for labels
	LFT_LABEL_AC = 4	
	RGT_LABEL_AC = 5
	CTN_LABEL_AC = 12
C
C ACs to be used for identifiers
	LFT_IDENT_AC = 4
	RGT_IDENT_AC = 5
	CTN_IDENT_AC = 12
C
C NOTE: these will override anything set up with the /OPTIONS qualifier
	HAD_NEST = .TRUE.	! nesting to be taken in account
	OPT_KEEP = .TRUE.	! keep unlabelled polygons
C
C Are labels to be output?
	SEGMENTS_QUAL=DCL_QUAL('SEGMENTS.LABEL',HAD_KEY,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.SEGMENTS_QUAL) GOTO 10
	IF (HAD_KEY) SEG_LABEL = .TRUE.
	IF (.NOT.SEG_LABEL) GOTO 20
C
C Has a new left-label AC been supplied?
	SEGMENTS_QUAL=DCL_QUAL('SEGMENTS.LEFT_LABEL_AC',HAD_KEY,LOCAL,
     &								LOCNEG,.TRUE.)
	IF (.NOT.SEGMENTS_QUAL) GOTO 10
C
C If so...
	IF (HAD_KEY) THEN
		SEGMENTS_QUAL=DCL_INT('SEGMENTS.LEFT_LABEL_AC',.TRUE.)
		IF (.NOT.SEGMENTS_QUAL) GOTO 10
C
C and it lies in range ...
		IF ((IARRAY(1).LT.0).OR.(IARRAY(1).GT.32767)) THEN
			SEGMENTS_QUAL = IPOL__INVALAC
			CALL LSL_PUTMSG(SEGMENTS_QUAL,IARRAY(1))
			GOTO 10
		ENDIF
C
C then use it
		LFT_LABEL_AC = IARRAY(1)
C
C if propagating and not using a file to specify the output AC types,
C use this as the left code
		IF(HAD_PROP.AND.(.NOT.HAD_CVR_FILE))
     &					LFT_CVR_AC(1)=LFT_LABEL_AC
	ENDIF
C
C Has a new right-label AC been supplied?
	SEGMENTS_QUAL=DCL_QUAL('SEGMENTS.RIGHT_LABEL_AC',HAD_KEY,LOCAL,
     &								LOCNEG,.TRUE.)
	IF (.NOT.SEGMENTS_QUAL) GOTO 10
C
C If so...
	IF (HAD_KEY) THEN
		SEGMENTS_QUAL=DCL_INT('SEGMENTS.RIGHT_LABEL_AC',.TRUE.)
		IF (.NOT.SEGMENTS_QUAL) GOTO 10
C
C and it lies in range ...
		IF ((IARRAY(1).LT.0).OR.(IARRAY(1).GT.32767)) THEN
			SEGMENTS_QUAL = IPOL__INVALAC
			CALL LSL_PUTMSG(SEGMENTS_QUAL,IARRAY(1))
			GOTO 10
		ENDIF
C
C then use it
		RGT_LABEL_AC = IARRAY(1)
C
C if propagating and not using a file to specify the output AC types,
C use this as the right code
		IF(HAD_PROP.AND.(.NOT.HAD_CVR_FILE))
     &					RGT_CVR_AC(1)=RGT_LABEL_AC
	ENDIF
C
C Has a new contain-label AC been supplied?
	SEGMENTS_QUAL=DCL_QUAL('SEGMENTS.CONTAIN_LABEL_AC',HAD_KEY,LOCAL,
     &								LOCNEG,.TRUE.)
	IF (.NOT.SEGMENTS_QUAL) GOTO 10
C
C If so...
	IF (HAD_KEY) THEN
		SEGMENTS_QUAL=DCL_INT('SEGMENTS.CONTAIN_LABEL_AC',.TRUE.)
		IF (.NOT.SEGMENTS_QUAL) GOTO 10
C
C and it lies in range ...
		IF ((IARRAY(1).LT.0).OR.(IARRAY(1).GT.32767)) THEN
			SEGMENTS_QUAL = IPOL__INVALAC
			CALL LSL_PUTMSG(SEGMENTS_QUAL,IARRAY(1))
			GOTO 10
		ENDIF
C
C then use it
		CTN_LABEL_AC = IARRAY(1)
C
C if propagating and not using a file to specify the output AC types,
C use this as the contain code
		IF(HAD_PROP.AND.(.NOT.HAD_CVR_FILE))
     &					CTN_CVR_AC(1)=CTN_LABEL_AC
	ENDIF	
C
C Are identifiers to be output?
20	SEGMENTS_QUAL=DCL_QUAL('SEGMENTS.IDENT',HAD_KEY,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.SEGMENTS_QUAL) GOTO 10
	IF (HAD_KEY) SEG_IDENT = .TRUE.
	IF (.NOT.SEG_IDENT) GOTO 30
C
C Has a new left-identifier AC been supplied?
	SEGMENTS_QUAL=DCL_QUAL('SEGMENTS.LEFT_IDENT_AC',HAD_KEY,LOCAL,
     &								LOCNEG,.TRUE.)
	IF (.NOT.SEGMENTS_QUAL) GOTO 10
C
C If so...
	IF (HAD_KEY) THEN
		SEGMENTS_QUAL=DCL_INT('SEGMENTS.LEFT_IDENT_AC',.TRUE.)
		IF (.NOT.SEGMENTS_QUAL) GOTO 10
C
C and it lies in range ...
		IF ((IARRAY(1).LT.0).OR.(IARRAY(1).GT.32767)) THEN
			SEGMENTS_QUAL = IPOL__INVALAC
			CALL LSL_PUTMSG(SEGMENTS_QUAL,IARRAY(1))
			GOTO 10
		ENDIF
C
C then use it
		LFT_IDENT_AC = IARRAY(1)
	ENDIF
C
C Has a new right-identifier AC been supplied?
	SEGMENTS_QUAL=DCL_QUAL('SEGMENTS.RIGHT_IDENT_AC',HAD_KEY,LOCAL,
     &								LOCNEG,.TRUE.)
	IF (.NOT.SEGMENTS_QUAL) GOTO 10
C
C If so...
	IF (HAD_KEY) THEN
		SEGMENTS_QUAL=DCL_INT('SEGMENTS.RIGHT_IDENT_AC',.TRUE.)
		IF (.NOT.SEGMENTS_QUAL) GOTO 10
C
C and it lies in range ...
		IF ((IARRAY(1).LT.0).OR.(IARRAY(1).GT.32767)) THEN
			SEGMENTS_QUAL = IPOL__INVALAC
			CALL LSL_PUTMSG(SEGMENTS_QUAL,IARRAY(1))
			GOTO 10
		ENDIF
C
C then use it
		RGT_IDENT_AC = IARRAY(1)
	ENDIF
C
C Has a new contain-identifier AC been supplied?
	SEGMENTS_QUAL=DCL_QUAL('SEGMENTS.CONTAIN_IDENT_AC',HAD_KEY,LOCAL,
     &								LOCNEG,.TRUE.)
	IF (.NOT.SEGMENTS_QUAL) GOTO 10
C
C If so...
	IF (HAD_KEY) THEN
		SEGMENTS_QUAL=DCL_INT('SEGMENTS.CONTAIN_IDENT_AC',.TRUE.)
		IF (.NOT.SEGMENTS_QUAL) GOTO 10
C
C and it lies in range ...
		IF ((IARRAY(1).LT.0).OR.(IARRAY(1).GT.32767)) THEN
			SEGMENTS_QUAL = IPOL__INVALAC
			CALL LSL_PUTMSG(SEGMENTS_QUAL,IARRAY(1))
			GOTO 10
		ENDIF
C
C then use it
		CTN_IDENT_AC = IARRAY(1)
	ENDIF	
C
C Has the user specified that junction-structure should be retained?
30	SEGMENTS_QUAL=DCL_QUAL('SEGMENTS.JUNCTIONS',HAD_KEY,LOCAL,
     &								LOCNEG,.TRUE.)
	IF (.NOT.SEGMENTS_QUAL) GOTO 10
	IF (HAD_KEY) HAD_JUN = .TRUE.
C
C Make up a default output filename from the input segment file but with a .IFF
C or .IFJ extension depending on the state of /SEGMENTS=[NO]JUNCTIONS
	SEGMENTS_QUAL=PUTFLN(IN_FILE(:IN_LEN))
	IF (.NOT.SEGMENTS_QUAL) GOTO 10
	HAD_VER=.FALSE.
	IF (HAD_JUN) THEN
		STR_EXT='IFJ'
		LEN_EXT=3
	      	SEGMENTS_QUAL=EXPFLN(SEG_FILE,SEG_LEN)
		IF (.NOT.SEGMENTS_QUAL) GOTO 10
	ELSE
		STR_EXT='IFF'
		LEN_EXT=3
		SEGMENTS_QUAL=EXPFLN(SEG_FILE,SEG_LEN)
		IF (.NOT.SEGMENTS_QUAL) GOTO 10
	ENDIF
C
C Has the user specified an output file?
	SEGMENTS_QUAL=DCL_QUAL('SEGMENTS.OUTPUT',HAD_KEY,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.SEGMENTS_QUAL) GOTO 10
C
C If so get it (parsed against the default filename)
	IF (HAD_KEY) THEN
		SEGMENTS_QUAL = DCL_FILE('SEGMENTS.OUTPUT',
     &				SEG_FILE(:SEG_LEN),ABSENT,.FALSE.,.TRUE.)
		IF (.NOT.SEGMENTS_QUAL) GOTO 10
C
C Use it if its there
		IF (.NOT.ABSENT) THEN
			SEG_FILE = FILARY(1)(1:FIL_LEN(1))
			SEG_LEN = FIL_LEN(1)
		ENDIF
	ENDIF
C
C Are we to select by FC on output?
	SEGMENTS_QUAL=
     &		DCL_QUAL('SEGMENTS.SELECT_FC',HAD_KEY,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.SEGMENTS_QUAL) GOTO 10
	IF (HAD_KEY) THEN
	   HAD_SELECT = .TRUE.
	   SEGMENTS_QUAL=DCL_STR('SEGMENTS.SELECT_FC',.TRUE.)
	   IF (.NOT.SEGMENTS_QUAL) GOTO 10
C remove quotes if used
	   IF (CARRAY(1)(1:1).EQ.'"') THEN
	      FC_LEN=STR_LEN(1)-2
	      FC_TXT=CARRAY(1)(2:STR_LEN(1)-1)
	   ELSE
C
C otherwise use it all
	      FC_LEN=STR_LEN(1)
	      FC_TXT=CARRAY(1)(:STR_LEN(1))
	   ENDIF
C read the FCs from the text
	   SEGMENTS_QUAL=READ_FCS(FC_TXT,FC_LEN)
	   IF(.NOT.SEGMENTS_QUAL)THEN
C	      SEGMENTS_QUAL = IPOL__INVALFCSEL
	      SEGMENTS_QUAL = IPOL__INVALAC
	      CALL LSL_PUTMSG(SEGMENTS_QUAL,IARRAY(1))
	      GOTO 10
	   ENDIF
	ENDIF
C
C
C Finished...
10	RETURN
	END
