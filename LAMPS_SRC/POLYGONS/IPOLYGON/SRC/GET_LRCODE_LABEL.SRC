C
C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	LOGICAL*4 FUNCTION GET_LRCODE_LABEL(POLY_INDX,TEXT,LENGTH,UNDEF)
C
***	MODULE	GET_LRCODE_LABEL
***	IDENT	12MY92
C
	IMPLICIT NONE
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
C Arguments:
	INTEGER		POLY_INDX	! the polygon in question
	CHARACTER*(*)	TEXT		! the polygon label
	INTEGER*2	LENGTH		! the length of TEXT
	LOGICAL		UNDEF		! .T. if undefined polygon
C
	LOGICAL*4	ACTUAL_GET_LRCODE_LABEL
C
C	........................................................................
C
	GET_LRCODE_LABEL = ACTUAL_GET_LRCODE_LABEL(POLY_INDX,TEXT,LENGTH,UNDEF,
     &			POLMAX,TABMAX,POLNEST_MAX, PARTS_MAX,
     &			%VAL(PTR$_POLY_DONE),
     &			%VAL(PTR$_POLY_PARTS),
     &			%VAL(PTR$_POLY_START),
     &			%VAL(PTR$_SEGTAB)
     &		  )
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	LOGICAL*4 FUNCTION ACTUAL_GET_LRCODE_LABEL(POLY_INDX,TEXT,LENGTH,UNDEF,
     &		POLMAX,TABMAX,POLNEST_MAX,PARTS_MAX,
     &		POLY_DONE,
     &		POLY_PARTS,
     &		POLY_START,
     &		SEGTAB
     &	)
C
C

***	MODULE	ACTUAL_GET_LRCODE_LABEL
***	IDENT	12JL88
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
CMOD	Modified to complement ASSIGN_LRCODE and CHECK_LRCODE_LABEL
C							AC   27-May-1988
C	Author						TJH  26-Feb-1987
C
C Function to get the label text and the length of label for the
C polygon POLY_INDX. This function is only used if the user specified
C /LRCODE
C
C Function works by taking the text field of the relevant AC from the first 
C segment in the polygon. If the polygon is known to have failed in being 
C labelled then the label 'Undefined Polygon' is returned and UNDEF set to .T.
C
C Function returns SS$_NORMAL if all is well or one of a variety of
C IPOLYGON error codes on failure.
C
C ......................................................................
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNIPOLYGON:IPOLYGONMSG.PAR'
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
	INTEGER		SS$_ABORT
	EXTERNAL	SS$_ABORT	! bad luck !
C Common:
	INCLUDE		'LSL$CMNIPOLYGON:COMMAND.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:FILE.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:TABLES.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:SECTOR.CMN'
	INCLUDE		'LSL$CMNLSL:TXTC.CMN'
C
C Arguments:
	INTEGER		POLY_INDX	! the polygon in question
	CHARACTER*(*)	TEXT		! the polygon label
	INTEGER*2	LENGTH		! the length of TEXT
	LOGICAL		UNDEF		! .T. if undefined polygon
C
	INTEGER*4	POLMAX
	INTEGER*4	TABMAX
	INTEGER*4	POLNEST_MAX
	INTEGER*4	PARTS_MAX
C
	INTEGER		POLY_DONE(POLMAX)
	INTEGER		POLY_PARTS(2,POLMAX*4)
	INTEGER		POLY_START(3,POLMAX)
	INTEGER*4	SEGTAB(2,TABMAX)
C
C W/s
	INTEGER   I		! tmp var
	INTEGER   SEGPTR	! pointer into SEGTAB
	INTEGER*2 IECODE	! tmp var
	INTEGER*2 IELEN		! tmp var
	INTEGER	  FSN		! FSN of segment
	INTEGER	  IFSN		! IFSN of segment
	INTEGER*2 ACTYPE	! AC type 
	INTEGER	  IREV		! which direction of this segment forms
C				! part of the poly boundary?
C
C ......................................................................
C
	ACTUAL_GET_LRCODE_LABEL=%LOC(SS$_NORMAL)
C
C Are we dealing with a polygon that has been kept despite having failed in 
C L/R code assignment?
	IF (POLY_DONE(POLY_INDX).EQ.0
     &			.OR. POLY_DONE(POLY_INDX).EQ.-32767) THEN
	   TEXT = 'Undefined Polygon'
	   LENGTH = 17
	   UNDEF = .TRUE.
	   GOTO 10
	ENDIF
C
C Define the start index into POLY_PARTS
	SEGPTR=IABS(POLY_START(1,POLY_INDX))
C
C Store sign of segment pointer. If negative we will have to
C reverse this segment for contiguous polygon boundary formation
	CALL IFFSEL(INLUN)
	IREV=ISIGN(1,POLY_PARTS(1,SEGPTR))
C
C Jump to first segment of the polygon (IFF address store in /TABLES/SEGTAB)
	CALL IFFPKE(IECODE,IELEN,SEGTAB(2,ABS(POLY_PARTS(1,SEGPTR))))
C
C Unexpected end of file
	IF (IELEN.LE.-1) THEN
	   ACTUAL_GET_LRCODE_LABEL=IPOL__UNEXPEOF
	   CALL LSL_PUTMSG(ACTUAL_GET_LRCODE_LABEL,IN_FILE(:IN_LEN))
	   ACTUAL_GET_LRCODE_LABEL=%LOC(SS$_ABORT)
	   GOTO 10
	ENDIF
C
C Unexpected type of entry - was expecting a NF
	IF (IECODE.NE.'NF') THEN
	   ACTUAL_GET_LRCODE_LABEL=IPOL__LOST
	   CALL LSL_PUTMSG(ACTUAL_GET_LRCODE_LABEL,IECODE)
	   ACTUAL_GET_LRCODE_LABEL=%LOC(SS$_ABORT)
	   GOTO 10
	ENDIF
C
C Read in FSN and IFSN
	CALL EIHRI(FSN,1,1)
	CALL EIHRI(IFSN,1,1)
C
C Get next IFF entry 
20	CALL IFFNXT(IECODE,IELEN)
C
C Unexpected end of file
	IF (IELEN.LE.-1) THEN
	   ACTUAL_GET_LRCODE_LABEL=IPOL__UNEXPEOF
	   CALL LSL_PUTMSG(ACTUAL_GET_LRCODE_LABEL,IN_FILE(:IN_LEN))
	   ACTUAL_GET_LRCODE_LABEL=%LOC(SS$_ABORT)
	   GOTO 10
	ENDIF
C
C Unexpected end of feature
	IF (IECODE.EQ.'EF') THEN
	   ACTUAL_GET_LRCODE_LABEL=IPOL__LOST
	   CALL LSL_PUTMSG(ACTUAL_GET_LRCODE_LABEL,IECODE)
	   ACTUAL_GET_LRCODE_LABEL=%LOC(SS$_ABORT)
	   GOTO 10
	ENDIF
C
C If not an AC entry then get next entry
	IF (IECODE.NE.'AC') GOTO 20
C
C AC found - read type and act depending on the direction of polygon
C formation and direction of this segment. The rules are:
C
C 	Polygon formed clockwise:
C		 Use type RIGHT AC if segment used forwards  (IREV =  1)
C		 Use type LEFT  AC if segment used backwards (IREV = -1)
C 	Polygon formed anticlockwise:
C		 Use type LEFT  AC if segment used forwards  (IREV =  1)
C		 Use type RIGHT AC if segment used backwards (IREV = -1)
C
	CALL EIHRI(ACTYPE,1,1)			! read AC type
C
C Check if this AC has the text we want and if so leave 
C
	IF (CLOCK) THEN					! clockwise polygon
	   IF ((ACTYPE.EQ.RGT_CODE).AND.(IREV.EQ. 1)	! read this AC?
     &			.OR.
     &	       (ACTYPE.EQ.LFT_CODE).AND.(IREV.EQ.-1)) THEN
	      CALL READ_AC_TEXT(TEXT,LENGTH,IELEN)
	      GOTO 10					! text found - finish
	    ENDIF
	ELSE						! anticlockwise poly
	   IF ((ACTYPE.EQ.LFT_CODE).AND.(IREV.EQ. 1)	! read this AC?
     &			.OR.
     &	       (ACTYPE.EQ.RGT_CODE).AND.(IREV.EQ.-1)) THEN
	      CALL READ_AC_TEXT(TEXT,LENGTH,IELEN)
	      GOTO 10					! text found - finish
	   ENDIF
	ENDIF
C
C Not the AC we wanted, go back for another one
	GOTO 20
C
C finished...
10	RETURN
	END

