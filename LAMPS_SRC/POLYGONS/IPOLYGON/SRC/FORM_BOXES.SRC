C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-08-22 11:53:26.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION FORM_BOXES()
C
***	MODULE	FORM_BOXES
***	IDENT	22AU88
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
CMOD	Modified to call new FRAMED_MES()		AC    5-Jul-1988
C	Author						TJH  20-Feb-1987
C
C
C Function to select the sectored spatial indices needed for seed point
C and nested polygon determination.
C
C Function returns SS$_NORMAL if all is well or one of a variety of
C IPOLYGON error codes on failure.
C
C ......................................................................
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
C
C Common:
	INCLUDE		'LSL$CMNIPOLYGON:COMMAND.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:FILE.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:SECTOR.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:TABLES.CMN'
C
C W/s:
	REAL		MEAN		! pretty average variable really
C
C Functions:
	INTEGER		BOX_SEED	! sets up seed box structure
	INTEGER		BOX_POLY	! sets up polygon box structure
C
C ......................................................................
C
C        S E T    U P   T H E   P O L Y G O N   B O X   S T R U C T U R E
C 
	CALL FRAMED_MES(
     &	'Setting up Spatial Index for Polygons',37)
C
C Calculate how many boxes will be required to ensure that there are
C at most 5 polygons in a box
	CALL CALC_BOXES()
C
	FORM_BOXES=BOX_POLY()
C
	IF (FORM_BOXES) THEN
	   IF (HAD_LOG) THEN
	      CALL EXPAND(
     &	     'Number of boxes in X direction....................... %N',
     &							NUMBOX)
	      IF (HAD_LIS) THEN
	         CALL FLWLIN
	      ELSE
	         CALL TTWLIN
	      ENDIF
	      CALL EXPAND(
     &	     'Number of boxes in Y direction....................... %N',
     &							NUMBOY)
	      IF (HAD_LIS) THEN
	         CALL FLWLIN
	      ELSE
	         CALL TTWLIN
	      ENDIF
	      MEAN=FLOAT((NUMBOX*NUMBOY))/FLOAT(NUM_POLY)
	      CALL EXPAND(
     &	     'Mean number of boxes per polygon .................... %F',
     &								MEAN)
	      IF (HAD_LIS) THEN
	         CALL FLWLIN
	      ELSE
	         CALL TTWLIN
	      ENDIF
	      MEAN=FLOAT(NUM_POLY)/FLOAT((NUMBOX*NUMBOY))
	      CALL EXPAND(
     &	     'Mean number of polygons per box ..................... %F',
     &								MEAN)
	      IF (HAD_LIS) THEN
	         CALL FLWLIN
	      ELSE
	         CALL TTWLIN
	      ENDIF
	   ENDIF
	ELSE
	   GOTO 10
	ENDIF
C
C ......................................................................
C
C        S E T    U P   T H E   S E E D   B O X    S T R U C T U R E ?
C
	IF (HAD_SEED) THEN
	   CALL FRAMED_MES(
     &	   'Setting up Spatial Index for Seed Points',40)
C
	   FORM_BOXES=BOX_SEED()
	   IF (FORM_BOXES) THEN
	      IF (HAD_LOG) THEN
	         CALL EXPAND(
     &	     'Number of boxes in X direction....................... %N',
     &							NUMBOX)
	         IF (HAD_LIS) THEN
	            CALL FLWLIN
	         ELSE
	            CALL TTWLIN
	         ENDIF
	         CALL EXPAND(
     &	     'Number of boxes in Y direction....................... %N',
     &							NUMBOY)
	         IF (HAD_LIS) THEN
	            CALL FLWLIN
	         ELSE
	            CALL TTWLIN
	         ENDIF
	         MEAN=FLOAT(NUM_SEED_PTS)/FLOAT((NUMBOX*NUMBOY))
	         CALL EXPAND(
     &	     'Mean number of seed points per box .................. %F',
     &								MEAN)
	         IF (HAD_LIS) THEN
	            CALL FLWLIN
	         ELSE
	            CALL TTWLIN
	         ENDIF
	      ENDIF
	   ENDIF
	ENDIF
C
C ......................................................................
C
C If all is well so be it. If we have had to warn the user (but
C continued processing) upgrade to severity ERROR now to stop further
C processing.
10	IF (FORM_BOXES) THEN
	   FORM_BOXES=%LOC(SS$_NORMAL)
	ELSE
	   DELETE=.TRUE.
	ENDIF
	RETURN
	END
