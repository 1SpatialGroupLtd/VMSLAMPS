C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-05-12 15:46:14.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C
C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	LOGICAL*4 FUNCTION GET_SEED_ADDRESS()
C
***	MODULE	GET_SEED_ADDRESS
***	IDENT	12MY92
C
	IMPLICIT NONE
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
	LOGICAL*4	ACTUAL_GET_SEED_ADDRESS
C
C	........................................................................
C
	GET_SEED_ADDRESS = ACTUAL_GET_SEED_ADDRESS(
     &			POLMAX,TABMAX,POLNEST_MAX, PARTS_MAX,
     &			%VAL(PTR$_SEED_ADDRESS)
     &		  )
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	LOGICAL*4 FUNCTION ACTUAL_GET_SEED_ADDRESS(
     &		POLMAX,TABMAX,POLNEST_MAX,PARTS_MAX,
     &		SEED_ADDRESS
     &	)
C

***	MODULE	ACTUAL_GET_SEED_ADDRESS
***	IDENT	20FE87
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Author						TJH  20-Feb-1987
C
C Function to determine the adderess of each seed point feature within
C separate seed point input IFF file.
C
C All error message output is done within ACTUAL_GET_SEED_ADDRESS(). 
C
C All address tables are stored  in /TABLES/.
C
C Function returns SS$_NORMAL if all is well or one of a variety
C of IPOLYGON message codes if things go wrong.
C
C ......................................................................
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNIPOLYGON:IPOLYGONMSG.PAR'
	INTEGER		SS$_ABORT
	EXTERNAL	SS$_ABORT	! error
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
C
C Common:
	INCLUDE		'LSL$CMNIPOLYGON:COMMAND.CMN'
	INCLUDE 	'LSL$CMNLSL:FILENAME.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:FILE.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:TABLES.CMN'
	INCLUDE		'LSL$CMNIFF:IFFHAN.CMN'
C
C Arguments
	INTEGER*4	POLMAX
	INTEGER*4	TABMAX
	INTEGER*4	POLNEST_MAX
	INTEGER*4	PARTS_MAX
C
	INTEGER*4	SEED_ADDRESS(TABMAX)
C
C Workspace:
	INTEGER	  FSN		! feature serial number
	INTEGER*2 I		! temporary variables
	INTEGER*2 IECODE,IELEN	! IFF entry code and length
	INTEGER*2 IFC		! feature code
	INTEGER	  ISQ		! internal sequence number
	INTEGER*2 LAYER		! layer number
	INTEGER   NFPOSN	! position of NF entry
	LOGICAL   SEED_PT	! seed point feature?
C
C Functions:
	LOGICAL	IDENTIFY_SEED	! identifies seed point features
	LOGICAL	SKIP_LAYER	! checks for and skips contents of lyr 0
C
C ......................................................................
C
	ACTUAL_GET_SEED_ADDRESS=%LOC(SS$_NORMAL)	! assume success
C
	CALL IFFSEL(SEEDLUN)
10	CALL IFFNXT(IECODE,IELEN)
	IF (IELEN.EQ.-1) GOTO 50		! unexpected eof
	IF (IECODE.EQ.'NF') GOTO 20
	IF (IECODE.EQ.'NO') GOTO 40
	IF (IECODE.EQ.'FS') GOTO 30
	IF (IECODE.EQ.'EJ') GOTO 60
	GOTO 10
C
C ......................................................................
C
C NF - initialise for the new feature.
20	NFPOSN=LPOSH
	GOTO 10
C
C ......................................................................
C
C FS - Feature status
C
C We must check whether the current feature has been identified as a
C seed point feature via its layer or feature code.
C
30	CALL EIHRI(IFC,1,1)		! read feature code
	SEED_PT=IDENTIFY_SEED(LAYER,IFC)
C
C If it is a seed point record its start position
	IF (SEED_PT) THEN
	   IF (NUM_SEED_PTS+1.GE.TABMAX) THEN
	      ACTUAL_GET_SEED_ADDRESS=IPOL__TOOMNYSEED
	      CALL LSL_PUTMSG(ACTUAL_GET_SEED_ADDRESS,TABMAX)
	      GOTO 60
	   ELSE
	      NUM_SEED_PTS=NUM_SEED_PTS+1    ! got a seed point!
	      SEED_ADDRESS(NUM_SEED_PTS)=NFPOSN ! record feat. posn.
	   ENDIF
	ENDIF
	GOTO 10
C
C ......................................................................
C
C NO - New layer
40	CALL EIHRI(LAYER,1,1)
C
C Test for, and if necessary, skip all entries in layer 0. 
	ACTUAL_GET_SEED_ADDRESS=SKIP_LAYER(LAYER,IELEN,SEED_FILE(:SEED_LEN))
	IF (.NOT.ACTUAL_GET_SEED_ADDRESS) GOTO 60	! got lost? - return
	GOTO 10
C
C ......................................................................
C
C Unexpected end of file
50	ACTUAL_GET_SEED_ADDRESS=IPOL__UNEXPEOF
	CALL LSL_PUTMSG(ACTUAL_GET_SEED_ADDRESS,SEED_FILE(:SEED_LEN))
C
C ......................................................................
C
60	IF (ACTUAL_GET_SEED_ADDRESS) THEN
	   ACTUAL_GET_SEED_ADDRESS=%LOC(SS$_NORMAL)
	ELSE
	   DELETE=.TRUE.			! delete output files
	ENDIF
	RETURN
	END
