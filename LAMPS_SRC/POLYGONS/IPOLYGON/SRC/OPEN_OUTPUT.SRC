	INTEGER*4  FUNCTION OPEN_OUTPUT(USRSTR,USRLEN)
C
***	MODULE	OPEN_OUTPUT
***	IDENT	20MY92
C
C	Copyright Laser-Scan Ltd., Cambridge, England
C	Author						TJH	11-Feb-1987
C
C
CMOD	Replaced START_LOG() with OPEN_LOG() from LSLIB	 SG	20-May-1992
C
CMOD1056 Get MD entry for origin offset if HAD_ABS	 JB 	04-Nov-1991
C	 Uses START_LITES2 (was START_LCM) to open LITES2 file
C
CMOD	Now gives up if a file-open error occurs	TJH	07-Apr-1989
C
CMOD	Some functionality concerned with the /OUTPUT and pointin-polygon IFF
C	files has been moved into CHECK_IFF_OUT 	 AC	19-May-1988
C
C
C Function to open all selected IPOLYGON output files.
C
C Function returns one of 2 condition codes:
C
C	SS$_NORMAL	- success
C	SS$_ABORT	- something went wrong
C
C All file-specs and their lengths are taken from /FILCHS/ common.
C
C OPEN_OUTPUT modifies the file-spec held in common to match the full
C file specification of the file acutally opened on disk. OPEN_OUTPUT
C also sets the file-open flags in /FILE/ common as appropriate
C
C All error reporting is done locally.
C
	IMPLICIT NONE
C
C Arguments:
	CHARACTER*1024	USRSTR		! complete parsed command line
	INTEGER		USRLEN		! its length
C
C Parameters:
	INTEGER*4 	SS$_ABORT
	EXTERNAL  	SS$_ABORT	! bad luck!
	INTEGER*4 	SS$_NORMAL
	EXTERNAL  	SS$_NORMAL	! normal successful completion
	INCLUDE 	'LSL$CMNIPOLYGON:IPOLYGONMSG.PAR'
	INCLUDE 	'LSL$CMNPOLYGONS:POLYGONSMSG.PAR'
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
C
C Common:
	INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE 'LSL$CMNIFF:MD2DES.CMN'
	INCLUDE 'LSL$CMNIPOLYGON:COMMAND.CMN'
	INCLUDE 'LSL$CMNPOLYGONS:FILE.CMN'
C
C Functions:
	INTEGER		FLWOPN		! opens list file for write
	INTEGER		START_LITES2	! writes out /LITES2 LCM header
C					! local replacement for START_LCM
	INTEGER		LOG_OPEN	! open a log file
C
C Workspace:
	INTEGER		CREATED(2)	! dummy quadword for IFFINQ
	INTEGER*2	IELEN		! length of IFF entry
	INTEGER		IERR		! for error return	
	INTEGER*2	NREV		! dummy word for IFFINQ
	REAL		RANGE(4)	! IFF coordinate range NB. local
	INTEGER		REVISED(2)	! dummy quadword for IFFINQ
C
C.......................................................................
C
	OPEN_OUTPUT = %LOC(SS$_NORMAL)     ! normal completion
C
	LITESFLO = .FALSE.	! .T. if /LITES2 file open
	LISFLO   = .FALSE.	! .T. if /LIST file open
C
C.......................................................................
C Open /LITES2 command file, if required.
C
	IF (HAD_LITES) THEN
	   OPEN_OUTPUT = FLWOPN(LITESLUN,LITES_FILE(:LITES_LEN),IERR)
	   IF (OPEN_OUTPUT) THEN		! did it open ok?
	      LITESFLO = .TRUE.
	      IF (HAD_LOG) CALL LSL_PUTMSG(IPOL__LITESOPNOUT,
     &			LITES_FILE(:LITES_LEN))
	   ELSE					! file open error
	      OPEN_OUTPUT = IPOL__OPLITES	! tell user
	      CALL LSL_PUTMSG(OPEN_OUTPUT,LITES_FILE(:LITES_LEN))
	      CALL LSL_ADDMSG(IERR)		! give any 2ndary error
	      GOTO 10
	   ENDIF
C
C Write header into LITES2 LCM file
C Select and then read range from segment IFF file
C
	   CALL IFFSEL(INLUN)
	   CALL IFFRWD
	   CALL IFFNXC('RA',IELEN)
	   IF (IELEN.LT.0) THEN		! unexpected eof?
	      OPEN_OUTPUT = IPOL__UNEXPEOF
	      CALL LSL_PUTMSG(OPEN_OUTPUT,IN_FILE(:IN_LEN))
	      GOTO 10
	   ELSE
	      CALL EIHRR(RANGE,4,1)
	   ENDIF
C
C Get MD if had /ABSOLUTE
C
	   IF (HAD_ABS) THEN
	      CALL IFFNXC('MD',IELEN)
	      IF (IELEN.EQ.-1) THEN
		 OPEN_OUTPUT = POLY__MDABSENT
		 CALL LSL_PUTMSG(POLY__MDABSENT)
		 GOTO 10
	      ELSEIF (IELEN.NE.MD2LEN) THEN
		 CALL LSL_PUTMSG(POLY__MDDEFAULT)	! no MD2 available
		 MD2LOC(1) = 0
		 MD2LOC(2) = 0
	      ELSE
		 CALL EIHR(MD2ARR,MD2LEN,1)
		 IF (MATV2.NE.2) THEN
		    CALL LSL_PUTMSG(POLY__MDDEFAULT)	! no MD2 available
		    MD2LOC(1) = 0
		    MD2LOC(2) = 0
		 ENDIF
	      ENDIF
	   ENDIF
C
C Replacement for START_LCM to print ABSOLUTE messages if HAD_ABS
C
	   OPEN_OUTPUT = START_LITES2(LITESLUN,RANGE,USRSTR,USRLEN,IERR)
	   IF (.NOT.OPEN_OUTPUT) THEN
	      CALL LSL_PUTMSG(OPEN_OUTPUT)
	      IF (IERR.NE.%LOC(SS$_NORMAL)) CALL LSL_ADDMSG(IERR)
	      GOTO 10
	   ENDIF
C
	   CALL IFFRWD
	ENDIF
C
C.......................................................................
C Open /LIST listing file, if required.
C
	IF (HAD_LIS.OR.HAD_PRINT) THEN 
	   OPEN_OUTPUT = FLWOPN(LISLUN,LIS_FILE(:LIS_LEN),IERR)
	   IF (OPEN_OUTPUT) THEN		! did it open ok?
	      LISFLO=.TRUE.
	      IF (HAD_LOG.AND.LIS_FILE(:LIS_LEN).NE.'SYS$OUTPUT:') THEN
	         OPEN_OUTPUT = IPOL__LSTOPNOUT	! yes, tell user 
	         CALL LSL_PUTMSG(OPEN_OUTPUT,LIS_FILE(:LIS_LEN))
	      ENDIF
C
CCC	.---------------------------------------------------------------.
CCC	|      Write header into file					|
CCC	|								|
CCC	|      OPEN_OUTPUT=START_LOG(LISLUN,USRSTR,USRLEN,IERR)		|
CCC	|      IF (.NOT.OPEN_OUTPUT) THEN				|
CCC	|         CALL LSL_PUTMSG(OPEN_OUTPUT)				|
CCC	|         IF (IERR.NE.%LOC(SS$_NORMAL)) CALL LSL_ADDMSG(IERR)	|
CCC	|      ENDIF							|
CCC	`---------------------------------------------------------------'
C	open the log file. START_LOG was a non-standard old-style function
C	and is replaced by LOG_OPEN.

	      OPEN_OUTPUT=LOG_OPEN(LISLUN,USRSTR(1:USRLEN),HAD_LOG)
	      IF (.NOT.OPEN_OUTPUT) THEN
	         CALL LSL_PUTMSG(OPEN_OUTPUT)
	      ENDIF
	   ELSE					! file open error
	      OPEN_OUTPUT = IPOL__OPLIST	! tell user
	      CALL LSL_PUTMSG(OPEN_OUTPUT,LIS_FILE(:LIS_LEN))
	      CALL LSL_ADDMSG(IERR)		! give any 2ndary error
	   ENDIF
	ENDIF
C
C.......................................................................
C
10	IF (OPEN_OUTPUT) THEN
	   OPEN_OUTPUT=%LOC(SS$_NORMAL)
C
C Now that all the file opening is over we can turn /LOG on if the
C user is directing output to file
	   IF (HAD_LIS) HAD_LOG=.TRUE.
	ELSE
	   OPEN_OUTPUT=%LOC(SS$_ABORT)
	   DELETE=.TRUE.			! delete o/p files
	ENDIF
C
	RETURN
	END
