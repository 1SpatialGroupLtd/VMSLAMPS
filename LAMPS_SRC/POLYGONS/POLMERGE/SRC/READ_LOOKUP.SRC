C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-09-25 17:45:00.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION READ_LOOKUP ()
C
***	MODULE READ_LOOKUP
***	IDENT 25SE87
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Coded					DRC 	11-Aug-1987
C
C	Function:
C	Reads the contents of the POLMERGE lookup file, and extracts
C	polygon coding information contained in each definition set.
C	
C	Successive definition sets are separated by a blank line.
C	The first line in a definition set contains the label of a
C	'primary polygon'.
C	The remaining lines contains the labels of 'secondary polygons',
C	one label per line.  The order of the secondary labels determines
C	their priority.
C	Comment lines distinguished by a ! are ignored.
C	
	IMPLICIT NONE
C
C 	Workspace:
C
	INTEGER*4	IERR		!function return
	INTEGER*4	I,J		!counter
	INTEGER*4	STRING_LENGTH	!length of string read
	INTEGER*4	SEC_LABEL	!number of secondary label
C					!within a definition set
	LOGICAL*1	HAD_PRIMARY_POLY_LABEL	!start of definition set
	BYTE		CH		!single character
C
	INTEGER*4	STRING_DESCR1(2)	!descriptor
	BYTE		STRING_BUFFER(255)	!for temporary string
C
C	Parameters:
	INTEGER*4	LOOKUP_UNIT
	PARAMETER	(LOOKUP_UNIT = 5)
C
C 	Commons:
	INCLUDE 'LSL$CMNPOLMERGE:POLMERGEMSG.PAR'	! for ON_SPACE
	INCLUDE 'LSL$CMNLSL:READSTR.PAR'	! for ON_SPACE
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE	'LSL$CMNPOLMERGE:POLMERGE_LOOKUP.CMN'
	INCLUDE	'LSL$CMNPOLYGONS:FILE.CMN'
C
C	Functions
	INTEGER*4	RDCHS		!to read single character
	INTEGER*4       READSTR		!to read a string
C
	INTEGER*4	FLROPN		!open file for read
	INTEGER*4	FLRLIN		!read a line from file
	INTEGER*4	FLRCLO		!close the file
C
	INTEGER*4	REMOVE_DOUBLE_SPACES! to remove surplus
C					!spaces from a char string
	INTEGER*4	STR$COMPARE_EQL	!to test if two strings are equal
	LOGICAL		FIRST_TIME      !first time round loop
C
C---------------------------------------------------------------------------
C
C	Assume function is successful
	READ_LOOKUP=.TRUE.
C
C	Open the POLMERGE lookup file specified on the DCL command line
C	as read only
	IERR = FLROPN ( LOOKUP_UNIT, LOOKUP_FILE )
	IF(IERR.NE.LSL__NORMAL)THEN
	  CALL LSL_PUTMSG(IERR)
	  READ_LOOKUP=IERR		!signal failure
	  GOTO 999			!return
	ENDIF
C
C	Initialise polygon label counters
	NUMBER_PRIMARY_LABELS=0
	NUMBER_SECONDARY_LABELS=0
	SEC_LABEL=0
	FIRST_TIME = .TRUE.
C
C	Opened successfully, so search for definition sets.
C	Read a line.
10	IERR = FLRLIN ( )
	IF(IERR.NE.LSL__NORMAL)THEN
	  IF(IERR.EQ.LSL__EOF)GOTO 900	!eof
	  CALL LSL_PUTMSG(IERR)
	  READ_LOOKUP=IERR		!signal failure
	  GOTO 900
	ENDIF
C
	CALL BSLN			!start of line
C
C	Start of a definition set is indicated by a blank line.
	IF(RDCHS(CH))THEN		!blank line, so.....
	  IF (NUMBER_PRIMARY_LABELS+1 .GT. MAX_LABELS) THEN
	     READ_LOOKUP = PMERGE__TOOMNYCODES
	     CALL LSL_PUTMSG(PMERGE__TOOMNYCODES)
	     GOTO 900
	  ENDIF
	  NUMBER_PRIMARY_LABELS=NUMBER_PRIMARY_LABELS+1
	  HAD_PRIMARY_POLY_LABEL=.FALSE.
	  SEC_LABEL=0
	  FIRST_TIME =.FALSE.
	  GOTO 10
	ENDIF
C
C	Is it a comment line ?
	IF(CH .EQ. '!')GOTO 10
	IF (FIRST_TIME) THEN 
C
C first line of file may be polygon label
	  IF (NUMBER_PRIMARY_LABELS+1 .GT. MAX_LABELS) THEN
	     READ_LOOKUP = PMERGE__TOOMNYCODES
	     CALL LSL_PUTMSG(PMERGE__TOOMNYCODES)
	     GOTO 900
	  ENDIF
	  NUMBER_PRIMARY_LABELS=NUMBER_PRIMARY_LABELS+1
	  HAD_PRIMARY_POLY_LABEL=.FALSE.
	  SEC_LABEL=0
	  FIRST_TIME = .FALSE.
	ENDIF
C
C	Therefore must be a polygon label.
C	Is it a primary polygon label?
	IF(.NOT.HAD_PRIMARY_POLY_LABEL)THEN
C
C	Set to beginning of line
	  CALL BSLN
C	Set up string descriptor for temporary string
	  STRING_DESCR1(1)= 255
	  STRING_DESCR1(2)= %LOC(STRING_BUFFER)
C
C	Read code into temporary string
C	We read everything on the line, but skip leading spaces/tabs
	  STRING_LENGTH = READSTR 
     &              (STRING_DESCR1,-1,ON_EOL,.TRUE.)
C
C	Modify length
	  STRING_DESCR1(1)= STRING_LENGTH
C	Set up string descriptor for destination string
	  PPL_DESCR(1,NUMBER_PRIMARY_LABELS)=255
	  PPL_DESCR(2,NUMBER_PRIMARY_LABELS)=
     &              %LOC(PRIMARY_POLY_LABEL(1,NUMBER_PRIMARY_LABELS))
C
C	Remove non-significant spaces from the string
	  STRING_LENGTH = REMOVE_DOUBLE_SPACES(STRING_DESCR1,
     &              PPL_DESCR(1,NUMBER_PRIMARY_LABELS))
C
C	Modify length
	  PPL_DESCR(1,NUMBER_PRIMARY_LABELS)=STRING_LENGTH
C
	  HAD_PRIMARY_POLY_LABEL=.TRUE.
C
	ELSE
C	Read a secondary polygon label		
C	Update total and definition set counters
	  IF (NUMBER_SECONDARY_LABELS +1 .GT. MAX_LABELS) THEN
	     READ_LOOKUP = PMERGE__TOOMNYCODES
	     CALL LSL_PUTMSG(PMERGE__TOOMNYCODES)
	     GOTO 900
	  ENDIF
	  NUMBER_SECONDARY_LABELS=NUMBER_SECONDARY_LABELS+1
	  SEC_LABEL=SEC_LABEL+1
C	Set to beginning of line
	  CALL BSLN
C	Set up string descriptor for temporary string
	  STRING_DESCR1(1)= 255
	  STRING_DESCR1(2)= %LOC(STRING_BUFFER)
C
C	Read into temporary string.
C	We read up to the end of line, and skip any leading spaces/tabs
	  STRING_LENGTH = READSTR 
     &    (STRING_DESCR1,-1,ON_EOL,.TRUE.)
C
C	Modify length
	  STRING_DESCR1(1)= STRING_LENGTH
C
C	Set up string descriptor for destination string
	  SPL_DESCR(1,NUMBER_SECONDARY_LABELS)=255
	  SPL_DESCR(2,NUMBER_SECONDARY_LABELS)=
     &        %LOC(SECONDARY_POLY_LABEL(1,NUMBER_SECONDARY_LABELS))
C
C	Remove non-significant spaces from the string
	  STRING_LENGTH= REMOVE_DOUBLE_SPACES(STRING_DESCR1
     &         ,SPL_DESCR(1,NUMBER_SECONDARY_LABELS))
C
C	Modify length
	  SPL_DESCR(1,NUMBER_SECONDARY_LABELS)=STRING_LENGTH
C
C	Now test if we've already had this secondary label
	  IF(NUMBER_SECONDARY_LABELS.NE.1)THEN
	    DO 200 I=1,NUMBER_SECONDARY_LABELS-1
	       IERR=STR$COMPARE_EQL
     &                  (SPL_DESCR(1,NUMBER_SECONDARY_LABELS),
     &                   SPL_DESCR(1,I))
	       IF(IERR.EQ.0)THEN		!strings are equal
	         NUMBER_SECONDARY_LABELS=NUMBER_SECONDARY_LABELS-1
	         GOTO 250
	       ENDIF
200	    CONTINUE
	  ENDIF
C
	  I=NUMBER_SECONDARY_LABELS
C
C	Encode the code map
250	  POLYGON_LABEL_MAP(NUMBER_PRIMARY_LABELS,SEC_LABEL)=I
C
	ENDIF
C
	GOTO 10
C	
C----------------------------------------------------------------------------
C
900	IERR = FLRCLO ( LOOKUP_UNIT )
	IF(.NOT.IERR)CALL LSL_PUTMSG(IERR)
C
C
999	RETURN
C
	END
