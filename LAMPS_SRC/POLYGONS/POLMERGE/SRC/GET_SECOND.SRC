C
C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	SUBROUTINE GET_SECOND(POLY_INDX,SEGPTR)
C
***	MODULE	GET_SECOND
***	IDENT	12MY92
C
	IMPLICIT NONE
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
C args
	INTEGER*4  POLY_INDX
	INTEGER*4  SEGPTR
C
C	........................................................................
C
	CALL ACTUAL_GET_SECOND(POLY_INDX,SEGPTR,
     &			POLMAX,TABMAX,POLNEST_MAX, PARTS_MAX,
     &			%VAL(PTR$_POLY_PARTS),
     &			%VAL(PTR$_POLY_START),
     &			%VAL(PTR$_SEGTAB)
     &		  )
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	SUBROUTINE ACTUAL_GET_SECOND(POLY_INDX,SEGPTR,
     &		POLMAX,TABMAX,POLNEST_MAX,PARTS_MAX,
     &		POLY_PARTS,
     &		POLY_START,
     &		SEGTAB
     &	)
C

***	MODULE	ACTUAL_GET_SECOND
***	IDENT	05OC87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    03-Oct-1987
C
C returns in SEGPTR the first segment in the polygon which has 
C different neighbours from the first 
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
C
C Arguments
	INTEGER*4  POLY_INDX
	INTEGER*4  SEGPTR
C
	INTEGER*4	POLMAX
	INTEGER*4	TABMAX
	INTEGER*4	POLNEST_MAX
	INTEGER*4	PARTS_MAX
C
	INTEGER		POLY_PARTS(2,PARTS_MAX)
	INTEGER		POLY_START(3,POLMAX)
	INTEGER*4	SEGTAB(2,TABMAX)
C
C Common Blocks
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:TABLES.CMN'
C
C Functions
	LOGICAL   CHECK_SAME
C
C Local Varaiables
	INTEGER   SAVPOLY1,SAVPOLY2 ! saved polygon indices
	INTEGER   POLY1,POLY2   !polygon indices
	LOGICAL   SAME_POLIES   ! same poly indices as prev seg
	INTEGER   FSNNUM        ! feature serial number
	LOGICAL   DIFFERENT
	INTEGER   INDX
	LOGICAL	  FIRST_TIME
C
	SEGPTR = IABS(POLY_START(1,POLY_INDX))
	FIRST_TIME  = .TRUE.
C
	SAME_POLIES = .TRUE.
10	FSNNUM = SEGTAB(1,ABS(POLY_PARTS(1,SEGPTR)))
	POLY1 = LR_SEGMENT(1,FSNNUM)
	POLY2 = LR_SEGMENT(2,FSNNUM)
	IF ( .NOT. FIRST_TIME)THEN
	   SAME_POLIES = CHECK_SAME(POLY1,POLY2,SAVPOLY1,SAVPOLY2)
C
	   IF (SAME_POLIES) THEN
C
C check there's not a horrible single node neighbour
	      IF (POLY1 .EQ. POLY_INDX) THEN
	         INDX = POLY2
	      ELSE
	         INDX = POLY1
	      ENDIF
	      CALL CHECK_NODE_NEIGH
     &          (INDX,FSNNUM,DIFFERENT)
	      IF ( DIFFERENT) THEN
	         SAME_POLIES =.FALSE.
	      ENDIF
	   ENDIF
	ENDIF
	SAVPOLY1 = POLY1
	SAVPOLY2 = POLY2
C
C get next seg
	FIRST_TIME = .FALSE.
	IF (SAME_POLIES) THEN
	   SEGPTR = POLY_PARTS(2,SEGPTR)
           IF (SEGPTR .NE. 0) GOTO 10
        ENDIF
	RETURN
	END
