C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-05-18 19:47:34.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C
C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	INTEGER*4	FUNCTION NEIGHBOURS(SUBJ_INDEX)
C
***	MODULE	NEIGHBOURS
***	IDENT	12MY92
C
	IMPLICIT NONE
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
C Argument
	INTEGER    	SUBJ_INDEX    	! index of poly to merge
C
	INTEGER*4	ACTUAL_NEIGHBOURS
C
C	........................................................................
C
	NEIGHBOURS = ACTUAL_NEIGHBOURS(SUBJ_INDEX,
     &			POLMAX,TABMAX,POLNEST_MAX, PARTS_MAX,
     &			%VAL(PTR$_POLY_START)
     &		  )
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	INTEGER*4 FUNCTION ACTUAL_NEIGHBOURS(SUBJ_INDEX,
     &		POLMAX,TABMAX,POLNEST_MAX,PARTS_MAX,
     &		POLY_START
     &	)
C
C
***	MODULE	ACTUAL_NEIGHBOURS
***	IDENT	26OC87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    03-Oct-1987
C
C  calls routines which find a polygons ACTUAL_NEIGHBOURS, selects the polygon
C for merging based on the selected lookup mechanism.
C It then calls MERGE for the selected neighbour and all those 
C ACTUAL_NEIGHBOURS with the same polygon code.
C
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNPOLMERGE:POLMERGEMSG.PAR'
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
C
C Argument
	INTEGER    	SUBJ_INDEX    	! index of poly to merge
C
	INTEGER*4	POLMAX
	INTEGER*4	TABMAX
	INTEGER*4	POLNEST_MAX
	INTEGER*4	PARTS_MAX
C
	INTEGER		POLY_START(3,POLMAX)
C
C Common:
	INCLUDE		'LSL$CMNPOLMERGE:COMMAND.CMN'
	INCLUDE		'LSL$CMNPOLMERGE:MERGE.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'($STSDEF)'
C
C Functions
	INTEGER*4   	GET_NEIGH	!gets poly ACTUAL_NEIGHBOURS 
	INTEGER*4   	MERGE_BY_LOOKUP !to find valid neighbour 
C					!according to label lookup rules
	INTEGER*4   	MERGE_BY_HIGHER !to find neighbour with higher
C					!numeric code
	INTEGER*4   	MERGE_BY_LOWER 	!to find neighbour with lower
C				 	!numeric code
	LOGICAL     	FIND_LARGEST 	! finds the larget neighbour
	LOGICAL     	FIND_SMALLEST	! finds the larget neighbour
	INTEGER*4   	FIND_EXTRA   	! finds other neighbour polies
	INTEGER*4  	 MERGE	     	!attempt to merge poly
	INTEGER*4       FIND_OTHERS     ! finds extra polygon ACTUAL_NEIGHBOURS
	INTEGER*4       GET_ACTXT       ! gets poly code
	INTEGER*4       GET_BY_TEXT
C
C Local Varaiables
	INTEGER	EXTRAS(POLY_SEG_MAX) ! pointers into neigh_buf of extra
C				    ! polygons to be merged
	INTEGER	NUM_EXTRA	    ! number of extra polies to merge
	INTEGER I
	INTEGER OBJ_INDEX	    ! poly to merge into	
	INTEGER REAL_NEIGH	    ! see MERGE for explanation
	INTEGER LASTNEST            ! pointer to last nested poly
	LOGICAL NOCODE
	INTEGER EXTRA_REAL_NEIGH
	INTEGER EXTRA_OBJ
	BYTE    STRBUF(255)
	INTEGER STRLEN
	INTEGER SEGPTR
	INTEGER SAV_NEIGH
C
	ACTUAL_NEIGHBOURS = %LOC(SS$_NORMAL)
C
	NOCODE  = .FALSE.
C
C get its ACTUAL_NEIGHBOURS into neigh_buf
	ACTUAL_NEIGHBOURS = GET_NEIGH(SUBJ_INDEX,LASTNEST)
	SAV_NEIGH = NUM_NEIGH
	IF (.NOT. ACTUAL_NEIGHBOURS) GOTO 999
C
	IF (MER_BY_LARGE) THEN
C find largest neighbour
	   ACTUAL_NEIGHBOURS = FIND_LARGEST(OBJ_INDEX,REAL_NEIGH)
	   IF (.NOT. ACTUAL_NEIGHBOURS) GOTO 999
C
C reset up neighbour buffer for case when lookup and large both set
	   NUM_NEIGH = 1
	   NEIGH_BUF(1,1) = OBJ_INDEX
	   NEIGH_BUF(2,1) = REAL_NEIGH
	ENDIF
C
	IF (MER_BY_SMALL) THEN
C
C find smallest neighbour
	   ACTUAL_NEIGHBOURS= FIND_SMALLEST(OBJ_INDEX,REAL_NEIGH)
	   IF (.NOT. ACTUAL_NEIGHBOURS) GOTO 999
C
C reset up neighbour buffer for case when lookup and small both set
	   NUM_NEIGH = 1
	   NEIGH_BUF(1,1) = OBJ_INDEX
	   NEIGH_BUF(2,1) = REAL_NEIGH
	ENDIF
C
	IF (MER_BY_LOOKUP) THEN
C
C find neighbour according to lookup table
	   ACTUAL_NEIGHBOURS= MERGE_BY_LOOKUP(SUBJ_INDEX,OBJ_INDEX,REAL_NEIGH)
	   IF(.NOT.ACTUAL_NEIGHBOURS)GOTO 999
	ENDIF
C
	IF (MER_BY_UPPER) THEN
C
C find neighbour with higher numeric code
	   ACTUAL_NEIGHBOURS= MERGE_BY_HIGHER(SUBJ_INDEX,OBJ_INDEX,REAL_NEIGH)
	   IF(.NOT.ACTUAL_NEIGHBOURS)GOTO 999
	ENDIF
C
	IF (MER_BY_LOWER) THEN
C
C find neighbour with lower numeric code
	   ACTUAL_NEIGHBOURS= MERGE_BY_LOWER(SUBJ_INDEX,OBJ_INDEX,REAL_NEIGH)
	   IF(.NOT.ACTUAL_NEIGHBOURS)GOTO 999
	ENDIF
C
C get the polygon code of the object poly
	SEGPTR=IABS(POLY_START(1,ABS(OBJ_INDEX)))
	ACTUAL_NEIGHBOURS= GET_ACTXT(SEGPTR,ABS(OBJ_INDEX),
     &	            .TRUE.,STRBUF,STRLEN,.FALSE.)
	IF (.NOT. ACTUAL_NEIGHBOURS) THEN
	   IF (ACTUAL_NEIGHBOURS.NE. PMERGE__MISSAC) GOTO 999
	   NOCODE  = .TRUE.
	ENDIF
C
C find those ACTUAL_NEIGHBOURS with the same code as the selected one
	IF (SAV_NEIGH .GT. 1) THEN
	   NUM_NEIGH = SAV_NEIGH
	   ACTUAL_NEIGHBOURS = FIND_OTHERS(ABS(OBJ_INDEX),EXTRAS,NUM_EXTRA)
	   IF (.NOT. ACTUAL_NEIGHBOURS) THEN
	      IF (ACTUAL_NEIGHBOURS.NE. PMERGE__MISSAC) GOTO 999
	      NOCODE  = .TRUE.
	   ENDIF
        ENDIF
C
C first merge into the selected object
	ACTUAL_NEIGHBOURS = MERGE(SUBJ_INDEX,OBJ_INDEX,REAL_NEIGH,LASTNEST)
	IF(.NOT.ACTUAL_NEIGHBOURS)GOTO 999
	IF (NOCODE) GOTO 999
C
	IF (SAV_NEIGH .GT. 1.AND. (NUM_EXTRA .GT. 0)) THEN
C
20	   ACTUAL_NEIGHBOURS = GET_NEIGH(SUBJ_INDEX,LASTNEST)
	   ACTUAL_NEIGHBOURS = GET_BY_TEXT(STRBUF,STRLEN,EXTRA_OBJ,
     &	                            EXTRA_REAL_NEIGH)
	   IF (.NOT. ACTUAL_NEIGHBOURS) THEN
	      ACTUAL_NEIGHBOURS = %LOC(SS$_NORMAL)
	      GOTO 999
	   ENDIF
	   ACTUAL_NEIGHBOURS =
     &	      MERGE(SUBJ_INDEX,EXTRA_OBJ,EXTRA_REAL_NEIGH,LASTNEST)
     	   IF ((IBITS(ACTUAL_NEIGHBOURS,0,3).EQ.STS$K_ERROR).OR.
     &	        (IBITS(ACTUAL_NEIGHBOURS,0,3).EQ.STS$K_SEVERE)) GOTO 999
	   IF (NUM_NEIGH .EQ. 1 ) GOTO 999
	   GOTO 20
	ENDIF
C
C
C merge into the ACTUAL_NEIGHBOURS with the same code
C	IF (NUM_NEIGH .GT. 1) THEN
C	   DO 20 I = 1,NUM_EXTRA
C
C check the neighbour hasn't been zapped in a previous merge
C              IF(POLY_START(1,ABS(NEIGH_BUF(1,EXTRAS(I)))).EQ.0)GOTO 20
C	      IF (NEIGH_BUF(2,EXTRAS(I)) .NE. 0) THEN
C               IF(POLY_START(1,ABS(NEIGH_BUF(2,EXTRAS(I)))).EQ.0)GOTO 20
C	      ENDIF
C	      ACTUAL_NEIGHBOURS = MERGE
C     &	      (SUBJ_INDEX,NEIGH_BUF(1,EXTRAS(I)),NEIGH_BUF(2,EXTRAS(I)),
C     &	      LASTNEST)
C	      IF(.NOT.ACTUAL_NEIGHBOURS)GOTO 999
C20	   CONTINUE
C	ENDIF   	   
C
999	RETURN
	END
