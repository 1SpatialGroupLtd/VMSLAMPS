C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-05-18 19:43:20.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C
C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	INTEGER*4 FUNCTION GET_ACTXT(
     &			PTR,POLY_INDX,THISPOLY,CHARBUF,NUMCHS,DIRECT)
C
***	MODULE	GET_ACTXT
***	IDENT	12MY92
C
	IMPLICIT NONE
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
C arguments
	INTEGER*4	PTR		! pointer into POLY_PARTS
	INTEGER*4	POLY_INDX	! current polygon
	LOGICAL		THISPOLY        ! true if we've to look
C					! for code for POLY_INDX
	BYTE		CHARBUF(255)	! to hold AC text
	INTEGER*4	NUMCHS		! number of chars read
	LOGICAL		DIRECT		! no fooling about - use pointer
C
	INTEGER*4	ACTUAL_GET_ACTXT
C
C	........................................................................
C
	GET_ACTXT = ACTUAL_GET_ACTXT(
     &			PTR,POLY_INDX,THISPOLY,CHARBUF,NUMCHS,DIRECT,
     &			POLMAX,TABMAX,POLNEST_MAX, PARTS_MAX,
     &			%VAL(PTR$_POLY_PARTS),
     &			%VAL(PTR$_POLY_START),
     &			%VAL(PTR$_SEGTAB)
     &		  )
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	INTEGER*4 FUNCTION ACTUAL_GET_ACTXT(
     &		PTR,POLY_INDX,THISPOLY,CHARBUF,NUMCHS,DIRECT,
     &		POLMAX,TABMAX,POLNEST_MAX,PARTS_MAX,
     &		POLY_PARTS,
     &		POLY_START,
     &		SEGTAB
     &	)
C

***	MODULE	ACTUAL_GET_ACTXT
***	IDENT	10OC87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    06-Jul-1987
C
C finds the polygons on either side of segment (pointer into poly_parts
C PTR). and gets the AC text of the polygon which is or isn't POLY_INDX
C (depinding on THISPOLY) and 
C returns it in CHARBUF
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNPOLMERGE:POLMERGEMSG.PAR'
	INCLUDE 	'LSL$CMNPOLYGONS:POLYGONSMSG.PAR'
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
C
C Common:
	INCLUDE		'LSL$CMNPOLMERGE:COMMAND.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:FILE.CMN'
	INCLUDE		'LSL$CMNPOLMERGE:MERGE.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:TABLES.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE         'LSL$CMNIFF:IFFHAN.CMN'
C
C arguments
	INTEGER*4	PTR		! pointer into POLY_PARTS
	INTEGER*4	POLY_INDX	! current polygon
	LOGICAL		THISPOLY        ! true if we've to look
C					! for code for POLY_INDX
	BYTE		CHARBUF(255)	! to hold AC text
	INTEGER*4	NUMCHS		! number of chars read
	LOGICAL		DIRECT		! no fooling about - use pointer
C
	INTEGER*4	POLMAX
	INTEGER*4	TABMAX
	INTEGER*4	POLNEST_MAX
	INTEGER*4	PARTS_MAX
C
	INTEGER		POLY_PARTS(2,PARTS_MAX)
	INTEGER		POLY_START(3,POLMAX)
	INTEGER*4	SEGTAB(2,TABMAX)
C
C function 
	INTEGER*4       GET_MOTHER      ! gets mother poly
C
C Local Varaiables
	INTEGER*2 	IECODE,IELEN	!IFF code and length
	INTEGER*2	NCHS		! number of characters in string
	INTEGER*2	NWORDS		! number of words to read
	INTEGER*2	WORD		! current word number
	INTEGER*2	TYPE		! AC type        
	INTEGER*4 	POLY1,POLY2	!left and right poly indices
	INTEGER*4 	INDX		!chosen polygon index
	INTEGER*4	IREV		!-VE if seg to be reversed
	INTEGER*4	IPHAN		!-VE if its a phantom isolation
	INTEGER*4	NFNUM		!FSN
	INTEGER*4	SPTR		! pointer into POLY_PARTS
	INTEGER*4       MOTHER          ! gets mother polygon
C
C assume success
	ACTUAL_GET_ACTXT=%LOC(SS$_NORMAL)
C
	IF (DIRECT ) THEN
	   SPTR =PTR
	   GOTO 7
	ENDIF
C
C find out the polygons on either side of segment
	POLY1	= LR_SEGMENT(1,SEGTAB(1,ABS(POLY_PARTS(1,PTR))))
	POLY2	= LR_SEGMENT(2,SEGTAB(1,ABS(POLY_PARTS(1,PTR))))
	IF (THISPOLY) THEN
	   IF(POLY1 .EQ. POLY_INDX) THEN
	      INDX = POLY1
	   ELSEIF (POLY2 .EQ. POLY_INDX) THEN
	      INDX = POLY2
	   ELSE
C
C should not happen
	      CALL LSL_PUTMSG(PMERGE__INTRNLERR,1,'ACTUAL_GET_ACTXT')
	      ACTUAL_GET_ACTXT= PMERGE__INTRNLERR
	      GOTO 1000
	   ENDIF
	ELSE
	   IF(POLY1 .EQ. POLY_INDX) THEN
	      INDX = POLY2
	   ELSEIF (POLY2 .EQ. POLY_INDX) THEN
	      INDX = POLY1
	   ELSE
C
C should not happen
	      CALL LSL_PUTMSG(PMERGE__INTRNLERR,2,'ACTUAL_GET_ACTXT')
	      ACTUAL_GET_ACTXT= PMERGE__INTRNLERR
	      GOTO 1000
	   ENDIF
	ENDIF
C
C
5	IPHAN  = ISIGN(1,POLY_START(1,INDX))
	IF (IPHAN.LT. 0) THEN
C
C the case when the polygon to get the code from is an isolation
C we prefer to get its mother's code
	   ACTUAL_GET_ACTXT = GET_MOTHER(INDX,MOTHER)
	   IF (.NOT. ACTUAL_GET_ACTXT) GOTO 1000
	   INDX = MOTHER
C	   INDX = POLY_START(3,INDX)
	   GOTO 5
	ENDIF
C
C check indx to see if we really get the code from it 
	IF (POLY_START(2,INDX) .NE. 0) THEN
	   SPTR = POLY_START(2,ABS(INDX))
	ELSE
C
C get segment pointer into POLY_PARTS
           SPTR = ABS(POLY_START(1,ABS(INDX)))
C
C I'm not sure about this line!!!
	   IF (SPTR .EQ. 0) SPTR = PTR
	ENDIF
C
C
C poke to the FSN of the start segement of the neighbour poly
C
C get the sign of the segment pointer. This tells us in which direction
C the segment is pointing. If its negative then its going in the 
C opposite direction and so we need to find the right hand code AC 
C rather than the left.
C
7	IREV=ISIGN(1,POLY_PARTS(1,SPTR))
C
	CALL IFFPKE(IECODE,IELEN,
     &		SEGTAB(2,ABS(POLY_PARTS(1,SPTR))))
	IF (IELEN.LE.-1) GOTO 999	! eof?
	IF (IECODE.NE.'NF') THEN
	   ACTUAL_GET_ACTXT=PMERGE__LOST
	   CALL LSL_PUTMSG(ACTUAL_GET_ACTXT,IECODE)
	   GOTO 1000
	ENDIF
	CALL EIHRI(NFNUM,1,1)
	NFNUM = IAND(NFNUM,65535)
C
C now look for the AC types 4 or 5
10	CALL IFFNXT(IECODE,IELEN)
	IF (IELEN.LE.-1) GOTO 999	! eof?
	IF (IECODE.EQ.'EF')THEN
	   ACTUAL_GET_ACTXT=PMERGE__MISSAC
	   IF (HAD_ACCHECK) THEN
	      CALL LSL_PUTMSG(ACTUAL_GET_ACTXT,NFNUM)
	   ENDIF
	   GOTO 1000
	ENDIF
	IF (IECODE.EQ.'AC')GOTO 20
	GOTO 10
20	CALL EIHR(TYPE,1,1)
C
C We are only looking for AC types 4 or 5
	IF ((TYPE .NE. 4).AND. (TYPE.NE.5))GOTO 10
C
C don't want left code if  reversed
	IF ((TYPE .EQ. 4).AND. (IREV .LT. 0)) GOTO 10
C
C don't want right code if not reversed
	IF ((TYPE .EQ. 5).AND. (IREV .GT. 0)) GOTO 10
C
C we've got the AC we want if we get here
	NWORDS = IELEN-3	! calculate remaining words
	NUMCHS = NWORDS*2	! calculate no. of characters
C
	CALL EIHR(CHARBUF,NWORDS,4) ! read character string
C check for null ch. at end of string, and modify NUMCHS accordingly
	IF(CHARBUF(NUMCHS).EQ.0)NUMCHS=NUMCHS-1		
	GOTO 1000
C
C Unexpected end of file
999	ACTUAL_GET_ACTXT=PMERGE__UNEXPEOF
	CALL LSL_PUTMSG(ACTUAL_GET_ACTXT,IN_FILE(:IN_LEN))
1000	RETURN
	END
