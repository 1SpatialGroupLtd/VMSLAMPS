C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-05-14 20:12:28.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C
C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	LOGICAL*4 FUNCTION CHECK_AC_TEXT()
C
***	MODULE	CHECK_AC_TEXT
***	IDENT	12MY92
C
	IMPLICIT NONE
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
	LOGICAL*4	ACTUAL_CHECK_AC_TEXT
C
C	........................................................................
C
	CHECK_AC_TEXT = ACTUAL_CHECK_AC_TEXT(
     &			POLMAX,TABMAX,POLNEST_MAX, PARTS_MAX,
     &			%VAL(PTR$_DUFF_POLYGON),
     &			%VAL(PTR$_NEST_START),
     &			%VAL(PTR$_POLY_START),
     &			%VAL(LOC_PTR$_P_PTRS)
     &		  )
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	LOGICAL*4 FUNCTION ACTUAL_CHECK_AC_TEXT(
     &		POLMAX,TABMAX,POLNEST_MAX,PARTS_MAX,
     &		DUFF_POLYGON,
     &		NEST_START,
     &		POLY_START,
     &		PTRS
     &	)
C
C
***	MODULE	ACTUAL_CHECK_AC_TEXT
***	IDENT	24SE87
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Author						MWSR 23-Sep-1987
C
C
C Function to check consistency of AC coding
C
C
C Function returns SS$_NORMAL if all is well or one of a variety of
C POLMERGE error codes on failure.
C ......................................................................
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNPOLMERGE:POLMERGEMSG.PAR'
	INCLUDE		'($STSDEF)'
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
C
C Common:
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:SECTOR.CMN'
C
C Arguments
	INTEGER*4	POLMAX
	INTEGER*4	TABMAX
	INTEGER*4	POLNEST_MAX
	INTEGER*4	PARTS_MAX
C
	INTEGER		DUFF_POLYGON((POLMAX+31)/32)
	INTEGER		NEST_START(POLMAX+1)
	INTEGER		POLY_START(3,POLMAX)
C
C W/s:
	LOGICAL		FIRST_SEG		! reading first polygon segment 
	INTEGER		I			! temp. var.
	INTEGER*2	OLD_LENGTH		! prev. segment label length 
	CHARACTER*255	OLD_TEXT		! the previous segment label 
	INTEGER*2	LENGTH
	CHARACTER*255	TEXT      
	INTEGER		POLY_INDX
	LOGICAL		UNDEF
	INTEGER 	NNEST			! number of nests
	INTEGER*4	PTRS(POLNEST_MAX)	! pointers to nested polys
	INTEGER*4	DUMPTR			! dummy arg
	LOGICAL		HAD_ERR
	LOGICAL*4	STATUS
C
C Functions:
	LOGICAL		EXT1V			! extract 1-bit field
	INTEGER		CHECK_SEGAC_LABEL	! get and check AC text
	INTEGER		FIRST_NEST		!get nests
C
C ......................................................................
C
	STATUS=%LOC(SS$_NORMAL)
C
	CALL FRAMED_MES(15)		! indicate progress
	HAD_ERR = .FALSE.
C
C
C ......................................................................
C    L O O P    F O R    E  A C H    P O L Y G O N   I N    T U R N
C
	NNEST=0
	DO 60 POLY_INDX=1,NUM_POLY
C
	   NNEST=0
	   UNDEF = .FALSE.
C Carefully avoid processing the bounding polygon, (we need this)
	   IF (POLY_INDX.EQ.BOUND_POL) GOTO 60
C
C
C Is this an unwanted polygon?  If so ignore it.
	   IF (POLY_START(1,POLY_INDX).LE.0) GOTO 60
C
C Avoid doing any duff polygons
	   IF (EXT1V(POLY_INDX,DUFF_POLYGON(1))) GOTO 60
C
	   FIRST_SEG=.TRUE.
	   STATUS=CHECK_SEGAC_LABEL(POLY_INDX,
     &		TEXT,LENGTH,OLD_TEXT,OLD_LENGTH,UNDEF,FIRST_SEG)
	   IF (.NOT.STATUS) GOTO 999
	   IF (UNDEF) THEN		! undefined polygon?
	      STATUS = PMERGE__ACINCON
C
C continue but remember the error
	      HAD_ERR = .TRUE.
              GOTO 60
	   ENDIF
C
C get nested polygon
C
	   IF (NEST_START(POLY_INDX) .GT. 0) THEN
	      STATUS= FIRST_NEST(POLY_INDX,PTRS,NNEST,.TRUE.,DUMPTR)
	   ENDIF
C
C Now get and check the AC texts on any nested polygons
	   IF (NNEST.GT.0) THEN
	      DO 50 I=1,NNEST
	         STATUS=CHECK_SEGAC_LABEL(PTRS(I),
     &		   TEXT,LENGTH,OLD_TEXT,OLD_LENGTH,UNDEF,FIRST_SEG)
	         IF (.NOT.STATUS) GOTO 999
	         IF (UNDEF) THEN		! undefined polygon?
	            STATUS = PMERGE__ACINCON
	            HAD_ERR = .TRUE.
C
C continue but remember the error
                    GOTO 60
	         ENDIF
50	      CONTINUE
	   ENDIF
60	CONTINUE
C
	IF (STATUS.AND.HAD_ERR) STATUS = PMERGE__ACINCON
C
C ......................................................................
C
999	ACTUAL_CHECK_AC_TEXT = STATUS
	RETURN
	END
	
