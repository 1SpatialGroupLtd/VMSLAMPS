	LOGICAL*4 FUNCTION CMDLIN()
C
***	MODULE	CMDLIN
***	IDENT	04NO91
C
C	Copyright Laser-Scan Ltd., Cambridge, England
C
CMOD 2/470
C	Author						MWSR 23-Jun-1987
C
C
C Get, parse and decode POLMERGE command line. All results returned via
C /COMMAND/ common block. All error message output is done within
C CMDLIN().
C
C All files which need to be opened are opened at this stage via
C OPEN_FILES() 
C
C Function returns SS$_NORMAL if all is well or one of a variety
C of LSLLIB and CLI errors if things go wrong.
C
C ......................................................................
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNPOLMERGE:POLMERGEMSG.PAR'
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
C
C Common:
	INCLUDE		'LSL$CMNPOLMERGE:COMMAND.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:FILE.CMN'
	INCLUDE 	'LSL$CMNLSL:CLD.CMN'
	INCLUDE 	'LSL$CMNLSL:FILENAME.CMN'
C
C
C Command Language Definitions
	EXTERNAL        POLMERGE_CLD
C W/S
	INTEGER		I		! loop variable
	INTEGER*4	OK		! return status
	INTEGER*4	WHINGE		! local error reporting
	LOGICAL		ABSENT		! is file-spec absent?
	LOGICAL		LOCAL      	! is qualifier local?
	LOGICAL		LOCNEG     	! qualifier locally negated?
	LOGICAL		HAD_RSMA	! had /RATIO = (SMALL)
	LOGICAL		HAD_NOAET       ! had /AREA = (NOELIM_TOL)
	LOGICAL		HAD_NOAMT       ! had /AREA = (NOMERGE_TOL)
	LOGICAL		HAD_NORET       ! had /RATIO= (NOELIM_TOL)
	LOGICAL		HAD_NORMT       ! had /RATIO= (NOMERGE_TOL)
	LOGICAL         HAD_NORAREA     ! had /RATIO= (NOAREA_TOL)
C
C Functions called
	INTEGER		DCL_FILE	! reads and parses file title 
C					! from DCL command line
	INTEGER		DCL_QUAL	! looks for specified qualifier
	INTEGER		DCL_REAL	! gets qualifier args. (real)
	INTEGER		DCL_STR		! gets qualifier args. (string)
	INTEGER    	DCL_STARTUP	! gets parsed command line
	INTEGER		EXPFLN		! gets file-spec from /FILENAME/
	INTEGER		OPEN_FILE 	! opens files
C
	WHINGE = .TRUE.			! report errors locally
C ......................................................................
C Set up some unused qualifier variables common to POLYGONS.SERVICE
C
	HAD_LITES = .FALSE.
	HAD_ABS   = .FALSE.
	HAD_PRINT = .FALSE.
C
C Get command line for verb POLMERGE. DCL_STARTUP will return set to
C SS$_NORMAL if all well.
C
	OK=DCL_STARTUP('POLMERGE',.FALSE.,POLMERGE_CLD,.TRUE.)
	IF (.NOT. OK) GOTO 999
C
C Check for /LOG
	OK=DCL_QUAL('LOG',HAD_LOG,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT. OK) GOTO 999
C
C check for /PME
	OK=DCL_QUAL('PME',PME,LOCAL,LOCNEG,.TRUE.)
	IF (OK) THEN
	   IF (PME) THEN
	      CALL PME_INIT
	   ENDIF
	ELSE
	   GOTO 999
	ENDIF
C
C Check for /ACCHECK
	OK=DCL_QUAL('ACCHECK',HAD_ACCHECK,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT. OK) GOTO 999
C
C Check for /BOUNDING
	OK=DCL_QUAL('BOUNDING',HAD_BOUNDING,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT. OK) GOTO 999
C Get input file-name 
C
	   OK=DCL_FILE('P1'		! parameter label
     &		,'LSL$IF:IFF.IFJ'	! default file-name
     &		,ABSENT			! set if no file-name
     &		,.FALSE.		! don't expect list of files
     &          ,WHINGE)		! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C Transfer file-spec 
C
	IN_FILE = FILARY(1)(1:FIL_LEN(1))
	IN_LEN = FIL_LEN(1)
C
C Set up the default output filename - the input filename is already in 
C the FILENAME common block, as a result of calling DCL_FILE
C
	HAD_VER = .FALSE.
	OK = EXPFLN(OUT_FILE,OUT_LEN)
	IF (.NOT. OK) CALL LSL_PUTMSG(OK)	! just a warning
C
C Get output file-name if it is there
C
	OK=DCL_FILE('P2'			! parameter label
     &		,OUT_FILE(1:OUT_LEN)	! default is input filename
     &		,ABSENT			! set if no file-name
     &		,.FALSE.		! don't expect list of files
     &          ,WHINGE)		! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C Set file-spec 
C
	IF (.NOT. ABSENT) THEN
	   OUT_FILE = FILARY(1)(1:FIL_LEN(1))
	   OUT_LEN = FIL_LEN(1)
	ENDIF
C
C Another likely failure will be our attempt to open the optional LOOKUP
C file for input. This is selected with the qualifier
C /LOOKUP =file-spec
C
	OK=DCL_QUAL('LOOKUP',HAD_LOOKUP
     &					,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT. OK) GOTO 999
	IF (HAD_LOOKUP) THEN
	    OK=DCL_FILE('LOOKUP','LSL$LOOKUP:LOOKUP.DAT',
     &					ABSENT,.FALSE.,.TRUE.)
	    IF (.NOT. OK) GOTO 999
	    OK=EXPFLN(LOOKUP_FILE,LOOKUP_LEN)
	    IF(.NOT. OK) CALL LSL_PUTMSG(OK)
	ENDIF
C
	OK= DCL_QUAL('LIST',HAD_LIS,LOCAL,LOCNEG,.TRUE.)
	IF (OK) THEN
	   IF (HAD_LIS) THEN    	  
	      IF (HAD_LIS) OK=
     &           DCL_FILE('LIST','SYS$DISK:POLMERGE.LIS',ABSENT,
     &						.FALSE.,.TRUE.)
	      HAD_LIS=.TRUE.
	      IF (OK) THEN
	         IF (ABSENT) THEN
	            LIS_FILE='SYS$DISK:POLMERGE.LIS'
	            LIS_LEN = 21
	         ELSE
	            LIS_FILE = FILARY(1)(1:FIL_LEN(1))
	            LIS_LEN = FIL_LEN(1)
	            CALL STR$UPCASE(LIS_FILE(:LIS_LEN),	! from
     &				    LIS_FILE(:LIS_LEN))	! to
	         ENDIF
	      ENDIF
	   ENDIF
	ENDIF
C
	OK=OPEN_FILE()
	IF (.NOT. OK) GOTO 999
C ......................................................................
C
C Check for remaining qualifiers, we could have:
C			/AREA = (keywords)
C			/ELIMINATE = (keywords)
C			/MERGE = (keywords)
C			/RATIO = (keywords)
C ......................................................................
C Check for /AREA
	 OK=DCL_QUAL('AREA',HAD_AREA,LOCAL,LOCNEG,.TRUE.)
C
	IF (.NOT. OK) GOTO 999
	IF (HAD_AREA) THEN
C
C check for two possible keywords
	   OK=DCL_QUAL
     &	       ('AREA.MERGE_TOL',HAD_AMT,LOCAL,LOCNEG,.TRUE.)
	   IF (.NOT. OK) GOTO 999
	   IF (HAD_AMT) THEN		
C
C find out specified merge tolerance
	      OK=DCL_REAL('AREA.MERGE_TOL',.TRUE.)
	      IF (.NOT. OK) GOTO 999
	      IF (RARRAY(1).LT.0.) THEN
		 OK=PMERGE__INVALMERTOL
		 CALL LSL_PUTMSG(OK,RARRAY(1))
	      ELSEIF (NUMREA .GT. 0) THEN
		 AREA_MER_TOL =RARRAY(1)
	      ENDIF
	   ENDIF
	   OK=DCL_QUAL
     &	       ('AREA.ELIM_TOL',HAD_AET,LOCAL,LOCNEG,.TRUE.)
	   IF (.NOT. OK) GOTO 999
	   IF (HAD_AET) THEN    
C
C find out specified eliminate tolerance
	      OK=DCL_REAL('AREA.ELIM_TOL',.TRUE.)
	      IF (.NOT. OK) GOTO 999
	      IF (RARRAY(1).LT.0.) THEN
		 OK=PMERGE__INVALELIMTOL
		 CALL LSL_PUTMSG(OK,RARRAY(1))
	      ELSEIF (NUMREA .GT. 0) THEN
		 AREA_ELIM_TOL =RARRAY(1)
	      ENDIF
	      IF (.NOT. HAD_AMT.OR. NUMREA .EQ. 0) THEN
	         AREA_MER_TOL = AREA_ELIM_TOL
	      ENDIF
	   ELSE
	      IF(HAD_AMT) THEN
		 HAD_AET = .TRUE.
		 AREA_ELIM_TOL = AREA_MER_TOL
	      ENDIF
	   ENDIF
C
C must test explicitly for negated keywords
	   HAD_AET = .TRUE.
	   OK=DCL_QUAL
     &	       ('AREA.NOELIM_TOL',HAD_NOAET,LOCAL,LOCNEG,.TRUE.)
	   IF (.NOT. OK) GOTO 999
	   IF (HAD_NOAET) THEN
	      HAD_AET = .FALSE.
	   ENDIF
	   HAD_AMT = .TRUE.
	   OK=DCL_QUAL
     &	       ('AREA.NOMERGE_TOL',HAD_NOAMT,LOCAL,LOCNEG,.TRUE.)
	   IF (.NOT. OK) GOTO 999
	   IF (HAD_NOAMT) THEN
	      HAD_AMT = .FALSE.
	   ENDIF
	ENDIF
C
C Check for /ELIMINATE
	OK=DCL_QUAL('ELIMINATE',HAD_ELIMINATE,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT. OK) GOTO 999
	IF (HAD_ELIMINATE) THEN
C
C Check for ELIMINATE.BY_LOOKUP
C
	   OK=DCL_QUAL
     &	      ('ELIMINATE.BY_LOOKUP',ELIM_BY_LOOKUP,LOCAL,LOCNEG,.TRUE.)
	   IF (.NOT. OK) GOTO 999
C
C Check for ELIMINATE.BY_UPPER
C
	   OK=DCL_QUAL
     &	       ('ELIMINATE.BY_UPPER',ELIM_BY_UPPER,LOCAL,LOCNEG,.TRUE.)
	   IF (.NOT. OK) GOTO 999
C
C Check for ELIMINATE.BY_LOWER
C
	   OK=DCL_QUAL
     &	       ('ELIMINATE.BY_LOWER',ELIM_BY_LOWER,LOCAL,LOCNEG,.TRUE.)
	   IF (.NOT. OK) GOTO 999
	ENDIF
C
C
C Check for /MERGE
	OK=DCL_QUAL('MERGE',HAD_MERGE,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT. OK) GOTO 999
	IF (HAD_MERGE) THEN
C
C Check for MERGE.BY_LOOKUP
C
	   OK=DCL_QUAL
     &	       ('MERGE.BY_LOOKUP',MER_BY_LOOKUP,LOCAL,LOCNEG,.TRUE.)
	   IF (.NOT. OK) GOTO 999
C
C Check for MERGE.BY_LARGE
C
	   OK=DCL_QUAL
     &	       ('MERGE.BY_LARGER',MER_BY_LARGE,LOCAL,LOCNEG,.TRUE.)
	   IF (.NOT. OK) GOTO 999
C
C Check for MERGE.BY_SMALL
C
	   OK=DCL_QUAL
     &	       ('MERGE.BY_SMALLER',MER_BY_SMALL,LOCAL,LOCNEG,.TRUE.)
	   IF (.NOT. OK) GOTO 999
C
C Check for MERGE.BY_UPPER
C
	   OK=DCL_QUAL
     &	       ('MERGE.BY_UPPER',MER_BY_UPPER,LOCAL,LOCNEG,.TRUE.)
	   IF (.NOT. OK) GOTO 999
C
C Check for MERGE.BY_LOWER
C
	   OK=DCL_QUAL
     &	       ('MERGE.BY_LOWER',MER_BY_LOWER,LOCAL,LOCNEG,.TRUE.)
	   IF (.NOT. OK) GOTO 999
C
C set up default 
	   IF (.NOT. (MER_BY_LOWER .OR. MER_BY_UPPER .OR.  MER_BY_LARGE
     &	   .OR. MER_BY_SMALL .OR. MER_BY_LOOKUP)) THEN
	      IF(HAD_LOOKUP) THEN
	         MER_BY_LOOKUP = .TRUE.
	      ELSE
	         MER_BY_LARGE  = .TRUE.
	      ENDIF
	   ENDIF
	ENDIF
C
C Check for /RATIO
	 OK=DCL_QUAL('RATIO',HAD_RATIO,LOCAL,LOCNEG,.TRUE.)
C
	IF (.NOT. OK) GOTO 999
	IF (HAD_RATIO) THEN
C
C check for 5 possible qualifiers
	   OK=DCL_QUAL
     &	       ('RATIO.MERGE_TOL',HAD_RMT,LOCAL,LOCNEG,.TRUE.)
	   IF (.NOT. OK) GOTO 999
	   IF (HAD_RMT) THEN		
C
C find out specified merge tolerance
	      OK=DCL_REAL('RATIO.MERGE_TOL',.TRUE.)
	      IF (.NOT. OK) GOTO 999
	      IF (RARRAY(1).LT.0.) THEN
		 OK=PMERGE__INVALMERTOL
		 CALL LSL_PUTMSG(OK,RARRAY(1))
	      ELSEIF  (NUMREA .GT. 0) THEN
		 RATIO_MER_TOL =RARRAY(1)
	      ENDIF
	   ENDIF
	   OK=DCL_QUAL
     &	       ('RATIO.ELIM_TOL',HAD_RET,LOCAL,LOCNEG,.TRUE.)
	   IF (.NOT. OK) GOTO 999
	   IF (HAD_RET) THEN    
C
C find out specified eliminate tolerance
	      OK=DCL_REAL('RATIO.ELIM_TOL',.TRUE.)
	      IF (.NOT. OK) GOTO 999
	      IF (RARRAY(1).LT.0.) THEN
		 OK=PMERGE__INVALELIMTOL
		 CALL LSL_PUTMSG(OK,RARRAY(1))
	      ELSEIF (NUMREA .GT. 0 ) THEN
		 RATIO_ELIM_TOL =RARRAY(1)
	      ENDIF
	      IF (.NOT. HAD_RMT) THEN
		 RATIO_MER_TOL = RATIO_ELIM_TOL
	      ENDIF
	   ELSE
	     IF(HAD_RMT) THEN
	        RATIO_ELIM_TOL = RATIO_MER_TOL
	     ENDIF
	   ENDIF
C
C check for RATIO.LARGER
	   OK=DCL_QUAL
     &	       ('RATIO.LARGER',RATIO_LARGE,LOCAL,LOCNEG,.TRUE.)
	   IF (.NOT. OK) GOTO 999
	   
C
C check for RATIO.SMALLER
	   OK=DCL_QUAL
     &	       ('RATIO.SMALLER',HAD_RSMA,LOCAL,LOCNEG,.TRUE.)
	   IF (.NOT. OK) GOTO 999
	   IF (HAD_RSMA) RATIO_LARGE=.FALSE.
	   IF ((.NOT. RATIO_LARGE).AND. (.NOT. HAD_RSMA))THEN
	      RATIO_LARGE = .TRUE.
	   ENDIF
C
C
C must test explicitly for negated keywords
	   HAD_RET = .TRUE.
	   OK=DCL_QUAL
     &	       ('RATIO.NOELIM_TOL',HAD_NORET,LOCAL,LOCNEG,.TRUE.)
	   IF (.NOT. OK) GOTO 999
	   IF (HAD_NORET) THEN
	      HAD_RET = .FALSE.
	   ENDIF
	   HAD_RMT = .TRUE.
	   OK=DCL_QUAL
     &	       ('RATIO.NOMERGE_TOL',HAD_NORMT,LOCAL,LOCNEG,.TRUE.)
	   IF (.NOT. OK) GOTO 999
	   IF (HAD_NORMT) THEN
	      HAD_RMT = .FALSE.
	   ENDIF
C
C check for RATIO = (AREA_TOL)
	   RATIO_AREA_TOL = AREA_MER_TOL
	   OK=DCL_QUAL
     &	       ('RATIO.AREA_TOL',HAD_RATIOAREA,LOCAL,LOCNEG,.TRUE.)
	   IF (.NOT. OK) GOTO 999
	   IF (HAD_RATIOAREA) THEN    
C
C find out specified ratio area tolerance
	      OK=DCL_REAL('RATIO.AREA_TOL',.TRUE.)
	      IF (.NOT. OK) GOTO 999
	      IF (RARRAY(1).LT.0.) THEN
		 OK=PMERGE__INVALMERTOL
		 CALL LSL_PUTMSG(OK,RARRAY(1))
	      ELSEIF (NUMREA .GT. 0 ) THEN
		 RATIO_AREA_TOL=RARRAY(1)
	      ENDIF
	   ENDIF
C
C specifically negated 
	   HAD_RATIOAREA =.TRUE.
	   OK=DCL_QUAL
     &	       ('RATIO.NOAREA_TOL',HAD_NORAREA,LOCAL,LOCNEG,.TRUE.)
	   IF (.NOT. OK) GOTO 999
	   IF (HAD_NORAREA) THEN
	      HAD_RATIOAREA = .FALSE.
	   ENDIF
C
	ENDIF
C
C ......................................................................
C set up onearm stuff 
	ONE_WARN = .TRUE.
	ONE_DEL = .TRUE.
	ONE_IGN = .TRUE.
C
C ......................................................................
C
	IF (OK) OK=%LOC(SS$_NORMAL)
C
999	CMDLIN = OK
C
	RETURN
	END
C
