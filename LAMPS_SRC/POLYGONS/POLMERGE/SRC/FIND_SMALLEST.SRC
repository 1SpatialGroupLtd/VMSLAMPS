C
C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	LOGICAL FUNCTION FIND_SMALLEST(INDEX,REAL_NEIGH)
C
***	MODULE	FIND_SMALLEST
***	IDENT	12MY92
C
	IMPLICIT NONE
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
C arguments
	INTEGER		INDEX		! the index of the smallest polygon
	INTEGER		REAL_NEIGH      ! rael neighbour index
C
	LOGICAL		ACTUAL_FIND_SMALLEST
C
C	........................................................................
C
	FIND_SMALLEST = ACTUAL_FIND_SMALLEST(INDEX,REAL_NEIGH,
     &			POLMAX,TABMAX,POLNEST_MAX, PARTS_MAX,
     &			%VAL(PTR$_POLY_AREA)
     &		  )
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	LOGICAL FUNCTION ACTUAL_FIND_SMALLEST(INDEX,REAL_NEIGH,
     &		POLMAX,TABMAX,POLNEST_MAX,PARTS_MAX,
     &		POLY_AREA
     &	)
C

***	MODULE	ACTUAL_FIND_SMALLEST
***	IDENT	10OC87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    29-Jun-1987
C
C looks at all the polygons in NEIGH_BUF and finds the one with the 
C smallest area
C
	IMPLICIT NONE
C
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNPOLMERGE:POLMERGEMSG.PAR'
C
C Common:
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:TABLES.CMN'
	INCLUDE		'LSL$CMNPOLMERGE:MERGE.CMN'
	INCLUDE		'LSL$CMNPOLMERGE:COMMAND.CMN'
C 
C arguments
	INTEGER		INDEX		! the index of the smallest polygon
	INTEGER		REAL_NEIGH      ! rael neighbour index
C
	INTEGER*4	POLMAX
	INTEGER*4	TABMAX
	INTEGER*4	POLNEST_MAX
	INTEGER*4	PARTS_MAX
C
	REAL		POLY_AREA(POLMAX)
C
C Local Varaiables
	REAL		WEE		! stores area
	INTEGER		I		! counter
C
	ACTUAL_FIND_SMALLEST=.TRUE.
	INDEX = 0
C
C make initial value the area of the whole map
	WEE = (IN_FIL_RANGE(2)-IN_FIL_RANGE(1))*(IN_FIL_RANGE(4)-
     &	IN_FIL_RANGE(3))
	DO 10 I = 1,NUM_NEIGH
	   IF (POLY_AREA(ABS(NEIGH_BUF(1,I))) .LT. WEE) THEN
C
C don't count bounding polygon
	      IF (NEIGH_BUF(1,I).EQ. BOUND_POL) THEN
	          IF (HAD_BOUNDING) THEN
	             ACTUAL_FIND_SMALLEST= .FALSE.
	             GOTO 999
	          ENDIF
	          GOTO 10
	      ENDIF
C
	      WEE = POLY_AREA(ABS(NEIGH_BUF(1,I)))
	      INDEX = NEIGH_BUF(1,I)
	      REAL_NEIGH = NEIGH_BUF(2,I)
	   ENDIF
10	CONTINUE
	IF (INDEX .EQ. 0) ACTUAL_FIND_SMALLEST = .FALSE.
C
999	RETURN
	END
