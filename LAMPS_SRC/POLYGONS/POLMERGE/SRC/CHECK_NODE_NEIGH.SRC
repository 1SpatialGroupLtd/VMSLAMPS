C
C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	INTEGER*4 FUNCTION CHECK_NODE_NEIGH(INDX,FSN,IS_DIFFERENT)
C
***	MODULE	CHECK_NODE_NEIGH
***	IDENT	12MY92
C
	IMPLICIT NONE
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
C arguments
	INTEGER*4	INDX
	INTEGER*4	FSN
	LOGICAL		IS_DIFFERENT
C
	INTEGER*4	ACTUAL_CHECK_NODE_NEIGH
C
C	........................................................................
C
	CHECK_NODE_NEIGH = ACTUAL_CHECK_NODE_NEIGH(INDX,FSN,IS_DIFFERENT,
     &			POLMAX,TABMAX,POLNEST_MAX, PARTS_MAX,
     &			%VAL(PTR$_POLY_PARTS),
     &			%VAL(PTR$_POLY_START),
     &			%VAL(PTR$_SEGTAB)
     &		  )
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	INTEGER*4 FUNCTION ACTUAL_CHECK_NODE_NEIGH(INDX,FSN,IS_DIFFERENT,
     &		POLMAX,TABMAX,POLNEST_MAX,PARTS_MAX,
     &		POLY_PARTS,
     &		POLY_START,
     &		SEGTAB
     &	)
C

***	MODULE	ACTUAL_CHECK_NODE_NEIGH
***	IDENT	25OC88
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    25-Aug-1987
C	MOD  FSN declared as INTEGER*4		DRC     25-Oct-1988
C
C finds segment with FSN within polygon INDX and determines whether 
C the following segment has the same neighbouring polygon 
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNPOLMERGE:POLMERGEMSG.PAR'
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
C
C Common Blocks
	INCLUDE		'LSL$CMNPOLMERGE:MERGE.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:TABLES.CMN'
C
C arguments
	INTEGER*4	INDX
	INTEGER*4	FSN
	LOGICAL		IS_DIFFERENT
C
	INTEGER*4	POLMAX
	INTEGER*4	TABMAX
	INTEGER*4	POLNEST_MAX
	INTEGER*4	PARTS_MAX
C
	INTEGER		POLY_PARTS(2,PARTS_MAX)
	INTEGER		POLY_START(3,POLMAX)
	INTEGER*4	SEGTAB(2,TABMAX)
C
C Local Varaiables
	INTEGER*4	SEGPTR		! pointer to segment in SEGTAB
	INTEGER*4	TMPINDX		! temp for poly index
	INTEGER*4	POLY1,POLY2     ! left and right poly indices
	INTEGER*4	FIRSTINDX
	LOGICAL		FOUNDFSN
C
C
	ACTUAL_CHECK_NODE_NEIGH=%LOC(SS$_NORMAL)
C
	SEGPTR=IABS(POLY_START(1,INDX))
	IF (SEGPTR .EQ. 0) THEN
	   CALL LSL_PUTMSG(PMERGE__INTRNLERR,1,'ACTUAL_CHECK_NODE_NEIGH')
	   ACTUAL_CHECK_NODE_NEIGH= PMERGE__INTRNLERR
	   GOTO 999
	ENDIF
C
	FOUNDFSN = .TRUE.
	IS_DIFFERENT = .TRUE.
C
C store the neighbour poly for the first segment
	POLY1 = LR_SEGMENT(1,SEGTAB(1,ABS(POLY_PARTS(1,SEGPTR))))
	POLY2 = LR_SEGMENT(2,SEGTAB(1,ABS(POLY_PARTS(1,SEGPTR))))
	IF (POLY1 .EQ. INDX) THEN
	   FIRSTINDX = POLY2
	ELSE
	   IF (POLY2 .EQ. INDX) THEN
	      FIRSTINDX = POLY1
	   ELSE
C
C this error should not happen - it is internal
	      CALL LSL_PUTMSG(PMERGE__INTRNLERR,2,'ACTUAL_CHECK_NODE_NEIGH')
	      ACTUAL_CHECK_NODE_NEIGH= PMERGE__INTRNLERR
	      GOTO 999
	   ENDIF
	ENDIF
C
10	IF (SEGTAB(1,ABS(POLY_PARTS(1,SEGPTR))) .EQ. FSN) THEN
	   FOUNDFSN = .TRUE.
	   POLY1 = LR_SEGMENT(1,SEGTAB(1,ABS(POLY_PARTS(1,SEGPTR))))
	   POLY2 = LR_SEGMENT(2,SEGTAB(1,ABS(POLY_PARTS(1,SEGPTR))))
C
C  found the required FSN so check the LR codes
C 
C one of these polygons should be the current polygon ie INDX
C the other one is the adjacent polygon 
	   IF (POLY1 .EQ. INDX) THEN
	      TMPINDX = POLY2
	   ELSE
	      IF (POLY2 .EQ. INDX) THEN
	         TMPINDX = POLY1
	      ELSE
C
	        CALL LSL_PUTMSG(PMERGE__INTRNLERR,2,'ACTUAL_CHECK_NODE_NEIGH')
	        ACTUAL_CHECK_NODE_NEIGH= PMERGE__INTRNLERR
	         GOTO 999
	      ENDIF
	   ENDIF
C
C now get the following segment
	   SEGPTR = POLY_PARTS(2,SEGPTR)
	   IF (SEGPTR .EQ. 0) THEN
	      POLY1 = FIRSTINDX
	      POLY2 = INDX
	   ELSE
	      POLY1 = LR_SEGMENT(1,SEGTAB(1,ABS(POLY_PARTS(1,SEGPTR))))
	      POLY2 = LR_SEGMENT(2,SEGTAB(1,ABS(POLY_PARTS(1,SEGPTR))))
	   ENDIF
	   IF (POLY1 .EQ. TMPINDX) THEN
	      IS_DIFFERENT = .FALSE.
	   ELSEIF(POLY2 .EQ. TMPINDX) THEN
	      IS_DIFFERENT = .FALSE.
	   ENDIF
	   GOTO 50
	ENDIF
C
C Get pointer to next segment in polygon
	SEGPTR=POLY_PARTS(2,SEGPTR)
C
C Have we finished the polygon? If not get next segment forming the
C polygon 
	IF(SEGPTR.EQ.0)THEN
	   GOTO 50			! return
	ENDIF
C
C check for end of data
	IF (POLY_PARTS(1,SEGPTR) .EQ. 0) THEN
	   GOTO 50
	ENDIF
	GOTO 10
C
50	IF (.NOT. FOUNDFSN) THEN
	   CALL LSL_PUTMSG(PMERGE__INTRNLERR,3,'ACTUAL_CHECK_NODE_NEIGH')
	   ACTUAL_CHECK_NODE_NEIGH= PMERGE__INTRNLERR
	   GOTO 999
	ENDIF
999	RETURN
	END
