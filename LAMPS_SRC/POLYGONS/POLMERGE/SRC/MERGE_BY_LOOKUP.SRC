C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-10-10 16:36:44.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION MERGE_BY_LOOKUP 
     &                     (SUBJ_INDEX,OBJ_INDEX,REAL_NEIGH)
C
***	MODULE	MERGE_BY_LOOKUP
***	IDENT	10OC87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author D R CATLOW
C
C Created					DRC    13-Aug-1987
C
C Function:
C Looks at all the polygons in NEIGH_BUF in turn, and determines
C whether it is a valid candidate for merging on the basis of the
C polygon label.  The neighbouring polygon that both matches and
C has the highest priority for merging, is returned.
C
	IMPLICIT NONE
C
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
C
C Common:
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'LSL$CMNPOLMERGE:POLMERGE_LOOKUP.CMN'
	INCLUDE		'LSL$CMNPOLMERGE:MERGE.CMN'
	INCLUDE		'LSL$CMNPOLMERGE:COMMAND.CMN'
C 
C Arguments
	INTEGER*4	SUBJ_INDEX	! index of the primary polygon
	INTEGER*4	OBJ_INDEX	! the index of the secondary 
C					! polygon that has a valid
C					! merge code, and the highest
C					! merge priority.
	INTEGER*4	REAL_NEIGH	! real neighbour index
C Locals
	INTEGER*4	I,J		! counters
	INTEGER*4	PRIORITY	! relative priority
	INTEGER*4	SECONDARY_LABEL_INDEX	!index of the neighbour
C					! in the secondary polygon list
C Functions
	INTEGER*4	TEST_SECONDARY_POLY_LABEL !find match in secondary
C					!poly list for this polygon
C
C-------------------------------------------------------------------------
C
C Assume success
	MERGE_BY_LOOKUP=.TRUE.
C
C Special case:
C Is the primary polygon flagged as matching with all other polygons
C In which case we simply return the index of the first neighbour in
C NEIGH_BUF	
	IF(POLYGON_LABEL_MAP(PRIMARY_LABEL_INDEX,1).EQ.0)THEN
	   IF(NEIGH_BUF(1,1).EQ.BOUND_POL)THEN
	     IF(NUM_NEIGH.EQ.1)THEN
	       MERGE_BY_LOOKUP=.FALSE.
	       GOTO 50
	     ENDIF
	     OBJ_INDEX=NEIGH_BUF(1,2)
	     REAL_NEIGH=NEIGH_BUF(2,2)
	   ELSE
	     OBJ_INDEX=NEIGH_BUF(1,1)
	     REAL_NEIGH=NEIGH_BUF(2,1)
	   ENDIF
	   GOTO 50
	ENDIF
C
C Initialise secondary polygon label priority
	PRIORITY=32767
	OBJ_INDEX=0
C Test each polygon in turn.
	DO 40 I = 1,NUM_NEIGH
C
C don't count bounding polygon
	   IF (NEIGH_BUF(1,I).EQ. BOUND_POL) THEN
	      IF (HAD_BOUNDING) THEN
	          MERGE_BY_LOOKUP = .FALSE.
	          GOTO 999
	      ENDIF
	      GOTO 40
	   ENDIF
C
C Does the label of this polygon match a label in the secondary polygon
C label list
C
	   SECONDARY_LABEL_INDEX=
     &     TEST_SECONDARY_POLY_LABEL(ABS(NEIGH_BUF(1,I)))
	   IF(SECONDARY_LABEL_INDEX.EQ.0)GOTO 40	!no match in
C							!secondary list
C It's in the scondary polygon list!
C Is it also a candidate for merging into the primary polygon?
C
	   DO 20 J=1,MAX_LABELS
C Match with primary polygon found - J indicates relative priority
	      IF(POLYGON_LABEL_MAP(PRIMARY_LABEL_INDEX,J).EQ.
     &           SECONDARY_LABEL_INDEX)GOTO 30
C
C No match with primary polgyon 
	      IF(POLYGON_LABEL_MAP(PRIMARY_LABEL_INDEX,J).EQ.0)GOTO 40
C	
20	   CONTINUE
	   GOTO 40
C
C Has this secondary polygon got a higher priority than any of the other
C neighbouring secondary polygons
C Note that if both secondary polygons have the same priority the index
C for the first polygon in the neighbour list is returned.
C
30	   IF(J.LT.PRIORITY)THEN
             PRIORITY=J
	     OBJ_INDEX=NEIGH_BUF(1,I)
	     REAL_NEIGH=NEIGH_BUF(2,I)
	   ENDIF
C
40	CONTINUE
C
50	IF(OBJ_INDEX.EQ.0)MERGE_BY_LOOKUP=.FALSE.
C
999	RETURN
C
	END
