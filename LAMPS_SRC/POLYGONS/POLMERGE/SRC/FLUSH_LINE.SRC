C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-09-30 18:53:42.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        LOGICAL FUNCTION FLUSH_LINE(LAST_STPOS,PTNO,START_POS)
C
***     IDENT   30SE87
***     MODULE  FLUSH_LINE
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
CMOD	Last edited				 DM	03-Dec-1986
C	Created 				RJH	27-Oct-1986
C
C	IMP IFILTER Program - Output line string to IFF file
C
C Description
C
C
        IMPLICIT NONE
C
C
C Local Parameters
C
	INTEGER*4	MAXST		! max. no. of ST points
	PARAMETER	(MAXST = 200)
C
C Arguments
C
C	
	INTEGER*4	LAST_STPOS	! pos of last ST
	INTEGER*4	PTNO		! last point number
	INTEGER*4       START_POS       ! index of first point
C				        ! to output in poly_buf
C
C Common Blocks
C
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE 	'LSL$CMNIFF:IFFHAN.CMN'
C
C Functions called
C
	LOGICAL		ST_OUT		! outputs a ST entry
C
C Local variables
C
	INTEGER*4	FIRST		! first point to output
	INTEGER*4	LAST		! last point to output
	INTEGER*2	NUM_PTS		! number of points to output
	INTEGER*2	IENDS		! pen up/pen down flag
	LOGICAL		OK		! everything OK ?
	INTEGER*4       SAVPTS
C
C Initialisation
C
	FIRST = START_POS
	NUM_PTS = 0
	IENDS = 0
C
C Output the next ST entry
C
100	FIRST = FIRST + NUM_PTS
	SAVPTS = NUM_PTS
	NUM_PTS = MIN(POLY_PTS-(FIRST-START_POS),MAXST)
	IF (NUM_PTS .GT. 0) THEN
	   LAST_STPOS = LPOSE
	   OK = ST_OUT(POLY_BUF(1,FIRST),NUM_PTS,IENDS)
	ENDIF
C
C Repeat if enough ST's have not yet been output
	IENDS = 1
	IF (OK .AND. (NUM_PTS .EQ. MAXST)) GO TO 100
C
	PTNO = NUM_PTS
	IF (NUM_PTS .EQ. 0) PTNO = SAVPTS 
C Assign function value
C
	FLUSH_LINE = OK
C
	RETURN
        END
