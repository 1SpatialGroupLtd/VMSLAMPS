C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-05-18 18:32:40.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C
C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	INTEGER*4 FUNCTION ADJACENT(POLY_INDX,NESTED)
C
***	MODULE	ADJACENT
***	IDENT	12MY92
C
	IMPLICIT NONE
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
	INTEGER*4	ACTUAL_ADJACENT
C
C argument
	INTEGER   POLY_INDX	! IN - current polygon
	LOGICAL   NESTED	! IN - are we looking at nested pols
C
C	........................................................................
C
	ADJACENT = ACTUAL_ADJACENT(
     &			POLY_INDX,NESTED,
     &			POLMAX,TABMAX,POLNEST_MAX, PARTS_MAX,
     &			%VAL(PTR$_POLY_PARTS),
     &			%VAL(PTR$_POLY_START),
     &			%VAL(PTR$_SEGTAB)
     &		  )
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	INTEGER*4 FUNCTION ACTUAL_ADJACENT(POLY_INDX,NESTED,
     &		POLMAX,TABMAX,POLNEST_MAX,PARTS_MAX,
     &		POLY_PARTS,
     &		POLY_START,
     &		SEGTAB
     &	)
C

***	MODULE	ACTUAL_ADJACENT
***	IDENT	15OC87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    28-Jul-1987
C
C Returns in INDEXBUF  the poly indices of the ACTUAL_ADJACENT polygons of
C the polygon with index POLY_INDX . 
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNPOLMERGE:POLMERGEMSG.PAR'
	INCLUDE		'($SSDEF)'
C
C Common:
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'LSL$CMNPOLMERGE:MERGE.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:TABLES.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:SECTOR.CMN'
C
C argument
C
	INTEGER   POLY_INDX	! IN - current polygon
	LOGICAL   NESTED	! IN - are we looking at nested pols
C
	INTEGER*4	POLMAX
	INTEGER*4	TABMAX
	INTEGER*4	POLNEST_MAX
	INTEGER*4	PARTS_MAX
C
	INTEGER		POLY_PARTS(2,PARTS_MAX)
	INTEGER		POLY_START(3,POLMAX)
	INTEGER*4	SEGTAB(2,TABMAX)
C
C function
	INTEGER   GET_MOTHER    ! gets the mother polygon
C
C Local Varaiables
	INTEGER   SEGPTR	! pointer into SEGTAB
	INTEGER	  POLY1,POLY2   ! temp polygon index storage
	INTEGER	  SAVINDX	! saved index 
	INTEGER   TMPINDX       ! temp 
	INTEGER   FIRST_INDX    ! index of first poly neigh
	LOGICAL	  FIRST_TIME	! is it first time round
	INTEGER   I		! counter
	INTEGER   NFNUM
	INTEGER   MOTHER
C
	ACTUAL_ADJACENT=SS$_NORMAL
C
	SAVINDX = 0
	SEGPTR=IABS(POLY_START(1,POLY_INDX))
	IF(SEGPTR .EQ. 0) THEN
	   CALL LSL_PUTMSG(PMERGE__INTRNLERR,1,'ACTUAL_ADJACENT')
	   ACTUAL_ADJACENT= PMERGE__INTRNLERR
	   GOTO 999
	ENDIF
	NFNUM = SEGTAB(1,ABS(POLY_PARTS(1,SEGPTR)))
	FIRST_TIME = .TRUE.
C
C loop for each segment in turn
C
C look at the polygons on the left and right of the current segment
10	POLY1 = LR_SEGMENT(1,SEGTAB(1,ABS(POLY_PARTS(1,SEGPTR))))
	POLY2 = LR_SEGMENT(2,SEGTAB(1,ABS(POLY_PARTS(1,SEGPTR))))
C 
C one of these polygons should be the current polygon ie POLY_INDX
C the other one is the ACTUAL_ADJACENT polygon we are looking for
	IF (POLY1 .EQ. POLY_INDX) THEN
	   TMPINDX = POLY2
	ELSE
	   IF (POLY2 .EQ. POLY_INDX) THEN
	      TMPINDX = POLY1
	   ELSE
C
C this error should not happen - it is internal
	      CALL LSL_PUTMSG(PMERGE__INTRNLERR,2,'ACTUAL_ADJACENT')
	      ACTUAL_ADJACENT= PMERGE__INTRNLERR
	      GOTO 999
	   ENDIF
	ENDIF
C
	IF (TMPINDX .NE. SAVINDX) THEN
C
C ignore current poly 
	   IF (TMPINDX .EQ. POLY_INDX) GOTO 15
	   IF (NUM_NEIGH+1 .GT. POLY_SEG_MAX) THEN
	      ACTUAL_ADJACENT = PMERGE__TOOMNYNEIGH
	      CALL LSL_PUTMSG(ACTUAL_ADJACENT,NFNUM)
	      GOTO 999
	   ENDIF
	   NUM_NEIGH= NUM_NEIGH+1
C
	   IF (NESTED) THEN
C
C flag nested neighbours as negative
	      NEIGH_BUF(1,NUM_NEIGH) = -TMPINDX
	      NEIGH_BUF(2,NUM_NEIGH) = POLY_INDX
	   ELSEIF (POLY_START(1,TMPINDX) .LT. 0) THEN
C 
C in this case the neighbour is one of these isolated phantoms
	      NEIGH_BUF(2,NUM_NEIGH) = TMPINDX
C
C the actual ACTUAL_ADJACENT index is the mother polygon
	      ACTUAL_ADJACENT = GET_MOTHER(TMPINDX,MOTHER)
	      NEIGH_BUF(1,NUM_NEIGH) = MOTHER
	   ELSE
C
C the normal case
	      NEIGH_BUF(1,NUM_NEIGH) = TMPINDX
	      NEIGH_BUF(2,NUM_NEIGH) = 0
	   ENDIF
15	   SAVINDX = TMPINDX
	   IF (FIRST_TIME) THEN
	      FIRST_INDX = SAVINDX
	   ENDIF
	ENDIF
C
C Get pointer to next segment in polygon
	SEGPTR=POLY_PARTS(2,SEGPTR)
C
C Have we finished the polygon? If not get next segment forming the
C polygon 
	IF(SEGPTR.EQ.0)THEN
	   GOTO 50			! return
	ENDIF
C
C check for end of data
	IF (POLY_PARTS(1,SEGPTR) .EQ. 0) THEN
	   GOTO 50
	ENDIF
	FIRST_TIME = .FALSE.
	GOTO 10
C
C should never have index of first one the same as the last
C This can happen if there is more than one segment in
C the actual first or last links
C
50      IF (NEIGH_BUF(1,NUM_NEIGH) .EQ. FIRST_INDX.AND. 
     &	(.NOT. FIRST_TIME).AND. (NUM_NEIGH .NE. 1)) THEN
	   NUM_NEIGH= NUM_NEIGH- 1
	ENDIF
C
999	RETURN
	END
