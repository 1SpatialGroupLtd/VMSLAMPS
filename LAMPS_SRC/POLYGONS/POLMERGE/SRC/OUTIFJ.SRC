C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-05-18 18:47:56.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C
C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	INTEGER*4 FUNCTION OUTIFJ()
C
***	MODULE	OUTIFJ
***	IDENT	12MY92
C
	IMPLICIT NONE
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
	INTEGER*4	ACTUAL_OUTIFJ
C
C	........................................................................
C
	OUTIFJ = ACTUAL_OUTIFJ(
     &			POLMAX,TABMAX,POLNEST_MAX, PARTS_MAX,
     &			%VAL(PTR$_DUFF_POLYGON),
     &			%VAL(PTR$_POLY_START)
     &		  )
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	INTEGER*4 FUNCTION ACTUAL_OUTIFJ(
     &		POLMAX,TABMAX,POLNEST_MAX,PARTS_MAX,
     &		DUFF_POLYGON,
     &		POLY_START
     &	)
C

***	MODULE	ACTUAL_OUTIFJ
***	IDENT	15OC87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    01-Jul-1987
C
C The main output routine of POLMERGE 
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNPOLMERGE:POLMERGEMSG.PAR'
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
C
C Common:
	INCLUDE		'LSL$CMNPOLMERGE:COMMAND.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:FILE.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:TABLES.CMN'
	INCLUDE		'LSL$CMNIFF:IFFHAN.CMN'
C
C argument
	INTEGER*4	POLMAX
	INTEGER*4	TABMAX
	INTEGER*4	POLNEST_MAX
	INTEGER*4	PARTS_MAX
C
	INTEGER		DUFF_POLYGON((POLMAX+31)/32)
	INTEGER		POLY_START(3,POLMAX)
C
C Functions
	LOGICAL		EXT1V		! to see if a bit is set
	INTEGER*4	IFF_HEADER	! sets up IFF header entries
	INTEGER*4	WRITPOL		! outputs one polygon
C
C Local Varaiables
	INTEGER*4	LPOSNO		! store no address 
	INTEGER*4	NUM_WRITTEN	! number of segs output by
C					! each call to WRITPOL
	INTEGER*4	NUM_OUT_SEGS	! total number of output segments
	INTEGER*4	POLY_INDX	! current polygon
C
C-------------------------------------------------------------------------
C
	ACTUAL_OUTIFJ = %LOC(SS$_NORMAL)
C
	CALL FRAMED_MES(9)
	NUM_OUT_SEGS=0
C
	CALL IFFSEL(OUTLUN)
	CALL IFFTDY
	CALL IFFSEL(INLUN)
C
C set up prelim IFF stuff
	ACTUAL_OUTIFJ = IFF_HEADER(OUTLUN)	
	IF(.NOT. ACTUAL_OUTIFJ) GOTO 1000
C
C create output layer
	CALL IFFSEL(OUTLUN)
	LPOSNO=LPOSE
	CALL IFFNO(1,0,0)
C ......................................................................
C    L O O P    F O R    E  A C H    P O L Y G O N   I N    T U R N
C
	DO 50 POLY_INDX=1,NUM_POLY
C
C Ensure that this is not a duff polygon
	   IF (EXT1V(POLY_INDX,DUFF_POLYGON(1))) THEN
	      GOTO 50
	   ENDIF
C
C Ignore bounding poly
	   IF (POLY_INDX .EQ. BOUND_POL) GOTO 50
C
C Is this an isolated polygon? If so ignore it.
	   IF (POLY_START(1,POLY_INDX).LE.0)GOTO 50
C
C do the business
	   CALL IFFSEL(INLUN)
	   ACTUAL_OUTIFJ = WRITPOL(POLY_INDX,NUM_WRITTEN)        	      
	   NUM_OUT_SEGS=NUM_OUT_SEGS+NUM_WRITTEN
	   IF(.NOT. ACTUAL_OUTIFJ) GOTO 1000
50	CONTINUE
C
C End layer etc
	CALL IFFSEL(OUTLUN)
	CALL IFFUNO(LPOSNO)
	CALL IFFEO
	CALL IFFEM
	CALL IFFEJ
C
	IF (HAD_LOG) THEN
	   CALL EXPAND(
     &	    'Number of segments written to output file ......... %N',
     &							  NUM_OUT_SEGS)
	   IF (HAD_LOG) then
	      CALL TTWLIN
	   ELSE
	      CALL FLWLIN
	   ENDIF
	   CALL TTWSTR(' ')
	   CALL TTWSTR(' ')
	ENDIF
C
1000	RETURN
	END
