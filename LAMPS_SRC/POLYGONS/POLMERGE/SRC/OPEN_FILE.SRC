	  INTEGER*4  FUNCTION OPEN_FILE()
C
***	MODULE	OPEN_FILE
***	IDENT	09JL93
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Author						MWSR 23-Jun-1987
C
CMOD1250 Use LOG_OPEN rather than opening file explcitly
C       and trying to use LSLSHR's private START_LOG.	ST	9/7/93
C
C Function to open the segment 
C IFF file for input to POLMERGE.
C
C Function returns one of 2 condition codes:
C
C	SS$_NORMAL	- success
C	SS$_ABORT	- something went wrong
C
C All file-specs and their lengths are taken from /FILCHS/ common.
C
C OPEN_FILE modifies the file-spec held in common to match the full
C file specification of the file acutally opened on disk. OPEN_FILE
C also sets the file-open flags in /FILE/ common as appropriate
C
C All error reporting is done locally.
C
	IMPLICIT NONE
C
C Parameters:
	INTEGER*4 	SS$_ABORT
	EXTERNAL  	SS$_ABORT	! bad luck!
	INTEGER*4 	SS$_NORMAL
	EXTERNAL  	SS$_NORMAL	! normal successful completion
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE	    	'LSL$CMNPOLMERGE:POLMERGEMSG.PAR'
	INCLUDE	    	'LSL$CMNPOLYGONS:POLYGONSMSG.PAR'
C
C Common:
	INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE 'LSL$CMNPOLMERGE:COMMAND.CMN'
	INCLUDE 'LSL$CMNPOLYGONS:FILE.CMN'
	INCLUDE 'LSL$CMNPOLYGONS:TABLES.CMN'
C
C Function:
	INTEGER*4	IFFOPEN		! open existing IFF file to read
	INTEGER*4	FLROPN
	INTEGER*4	FLWOPN
	INTEGER*4	IFFCREATE	!create new IFF file
	INTEGER*4	LOG_OPEN	! open a log file
C
C Workspace:
	INTEGER*4	IERR		! for error return	
	INTEGER*4	CREATED(2)	! dummy quadword for IFFINQ
	INTEGER*4	REVISED(2)	! dummy quadword for IFFINQ
	INTEGER*2	NREV		! dummy word for IFFINQ
	INTEGER*2	PLEN		! tmp file-spec length
	INTEGER*2	IELEN
C
C
C.......................................................................
C
	OPEN_FILE = %LOC(SS$_NORMAL)     ! normal completion
	INFLO = .FALSE.		! .T. if segment IFF file open
C
C.......................................................................
C
C make the input file memory mapped
C
	CALL IFFMAP(.TRUE.)
C Open segment IFF input file
C
	OPEN_FILE= IFFOPEN(INLUN,IN_FILE(:IN_LEN),,HAD_LOG)
C
	  IF (OPEN_FILE) THEN			
	  INFLO=.TRUE.
C
C Get the full input file-spec as actually opened
C
	  CALL IFFINQ(IN_FILE,IN_LEN,CREATED,REVISED,NREV)
C
C quickly get the range for default tolerances
C
	  CALL IFFSEL(INLUN)
	  CALL IFFNXC('RA',IELEN)
	  IF (IELEN .EQ. -1) THEN
	     OPEN_FILE=PMERGE__UNEXPEOF
	     CALL LSL_PUTMSG(OPEN_FILE,IN_FILE(:IN_LEN))
	     GOTO 10
	  ELSE
	     CALL EIHRR(IN_FIL_RANGE(1),4,1)
C
C work out default tolerances
C
	     AREA_MER_TOL = ((IN_FIL_RANGE(2)-IN_FIL_RANGE(1))*
     &	     (IN_FIL_RANGE(4)-IN_FIL_RANGE(3)))/100
	     AREA_ELIM_TOL = AREA_MER_TOL
C
C ratio tolerances while we're at it
	     RATIO_MER_TOL = 8
	     RATIO_ELIM_TOL = 8	   
	   ENDIF
	ELSE
	  OPEN_FILE= %LOC(SS$_ABORT)
	  GOTO 10				! file didn't open OK
	ENDIF
C
C open lookup file if necessary	
	IF (HAD_LOOKUP) THEN
	   OPEN_FILE = FLROPN(LKPLUN,LOOKUP_FILE(:LOOKUP_LEN),IERR)
	   IF (.NOT. OPEN_FILE) THEN
	     CALL LSL_PUTMSG(PMERGE__OPLOOKUP,LOOKUP_FILE(:LOOKUP_LEN))
	      CALL LSL_PUTMSG(OPEN_FILE)
	      CALL LSL_PUTMSG(IERR)
	      OPEN_FILE =%LOC(SS$_ABORT)
	      GOTO 10
	   ENDIF
	   LKPFLO = .TRUE.
	   IF (HAD_LOG) THEN
	      CALL LSL_PUTMSG
     &	      (PMERGE__LKPOPNREAD,LOOKUP_FILE(:LOOKUP_LEN))
	   ENDIF
	ENDIF
C
C
C
C.......................................................................
C
C Open /LIST listing file, if required.
C
	IF (HAD_LIS.OR.HAD_PRINT) THEN 
	   OPEN_FILE=LOG_OPEN(LISLUN,LIS_FILE(:LIS_LEN),HAD_LOG)
	   IF (OPEN_FILE) THEN
	      LISFLO=.TRUE.
	      IF (HAD_LOG.AND.LIS_FILE(:LIS_LEN).NE.'SYS$OUTPUT:') THEN
		 OPEN_FILE = PMERGE__LSTOPNOUT ! yes, tell user 
		 CALL LSL_PUTMSG(OPEN_FILE,LIS_FILE(:LIS_LEN))
	      ENDIF
	   ELSE
	      GOTO 10
	   ENDIF
	ENDIF
C
C open output IFF file
	OPEN_FILE = IFFCREATE(OUTLUN,OUT_FILE(:OUT_LEN),,,HAD_LOG)
	CALL IFFMAP(.FALSE.)
	IF (OPEN_FILE) THEN
	   OUTFLO=.TRUE.
C
C Get the full output file-spec as actually opened
C
	   CALL IFFINQ(OUT_FILE,OUT_LEN,CREATED,REVISED,NREV)
 	 ELSE
	    OPEN_FILE= %LOC(SS$_ABORT)
	    GOTO 10				! file didn't open OK
	 ENDIF
C
10	IF (OPEN_FILE) THEN
            OPEN_FILE= %LOC(SS$_NORMAL) ! normal completion?
C Now that all the file opening is over we can turn /LOG on if the
C user is directing output to file
	   IF (HAD_LIS) HAD_LOG=.TRUE.
	ENDIF
C
	RETURN
	END
