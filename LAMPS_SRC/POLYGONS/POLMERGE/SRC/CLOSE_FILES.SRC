C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-10-15 13:20:14.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	  INTEGER*4  FUNCTION CLOSE_FILES()
C
***	MODULE	CLOSE_FILES
***	IDENT	15OC87
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Author						MWSR 23-Jun-1987
C
C Function to close all open POLMERGE files.
C
C Function returns one of 2 condition codes:
C
C	SS$_NORMAL	- success
C	SS$_ABORT	- something went wrong
C
C All file-specs and their lengths are taken from /FILCHS/ common.
C
C All error reporting is done locally.
C
	IMPLICIT NONE
C
C Parameters:
	INTEGER*4	STS$K_WARNING
	EXTERNAL  	STS$K_WARNING	! bit mask for warning severity
	INTEGER*4 	SS$_ABORT
	EXTERNAL  	SS$_ABORT	! bad luck!
	INTEGER*4 	SS$_NORMAL
	EXTERNAL  	SS$_NORMAL	! normal successful completion
	INCLUDE 	'LSL$CMNPOLMERGE:POLMERGEMSG.PAR'
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNLSL:LSLLIBMSG.PAR'
C
C Functions:
	LOGICAL		IFFCLO		! closes IFF file
	INTEGER		FLRCLO		! close list file
	INTEGER		FLWCLO		! close list file
C
C Workspace:
	INTEGER		IERR		! for error return	
C
C Common:
	INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE 'LSL$CMNPOLMERGE:COMMAND.CMN'
	INCLUDE 'LSL$CMNPOLYGONS:FILE.CMN'
	INCLUDE 'LSL$CMNLSL:STATUS.CMN'
C
C.......................................................................
C
	CLOSE_FILES = %LOC(SS$_NORMAL)     ! normal completion
C
C Close segments IFF input file
C
	IF (INFLO) THEN
	  CALL IFFCLO(INLUN)			! current input file
	    IF (IERCD.NE.0) THEN			! error?
	    CLOSE_FILES=PMERGE__CLINIFF		! error closing file
	    CALL LSL_PUTMSG(CLOSE_FILES,IN_FILE(:IN_LEN))!tell user
	  ENDIF
	ENDIF
C
C ......................................................................
C
C Close output IFF file
C
	IF (OUTFLO) THEN
	   IF (DELETE) THEN
	      CALL IFFCDL(OUTLUN) 		! delete output file
	   ELSEIF (IBITS(LSL_STATUS,0,3).EQ.%LOC(STS$K_WARNING)) THEN
	      CALL IFFCLO(OUTLUN,%LOC(SS$_ABORT)) ! close output file
	   ELSE
	      CALL IFFCLO(OUTLUN,%LOC(SS$_NORMAL))! close output file
	   ENDIF
	   IF (IERCD.NE.0) THEN		! error?
	    CLOSE_FILES=PMERGE__CLOUTIFF	! error closing file
	    CALL LSL_PUTMSG(CLOSE_FILES,OUT_FILE(:OUT_LEN))!tell user
	   ENDIF
	ENDIF
C
C ......................................................................
C
C If required, close the LOOKUP file
C
	IF (LKPFLO) THEN
	   CLOSE_FILES=FLRCLO(LKPLUN,IERR)
	   IF (CLOSE_FILES.NE.LSL__NORMAL) THEN		! error?
	      CLOSE_FILES=PMERGE__CLLOOKUP		! close failed
	      CALL LSL_PUTMSG(CLOSE_FILES,LOOKUP_FILE(:LOOKUP_LEN))
C
C Give any secondary error message
	      IF (IERR.NE.0) CALL LSL_ADDMSG(IERR)
	   ENDIF
	ENDIF	
C
C
C.......................................................................
C close /LIST file
	IF (LISFLO) THEN
	    CLOSE_FILES=FLWCLO(LISLUN,IERR)
	    IF (CLOSE_FILES.NE.LSL__NORMAL) THEN	! error?
	       CLOSE_FILES=PMERGE__CLLIST		! close failed
	         CALL LSL_PUTMSG(CLOSE_FILES)		! tell user
C
C Give any secondary error message
	         IF (IERR.NE.0) CALL LSL_ADDMSG(IERR)
	    ENDIF
	ENDIF

C
10	IF (CLOSE_FILES) THEN
	   CLOSE_FILES=%LOC(SS$_NORMAL)
	ELSE
	   CLOSE_FILES=%LOC(SS$_ABORT)
	ENDIF
	RETURN
	END
