C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-05-14 19:24:00.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C
C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	LOGICAL*4 FUNCTION GET_POLYGON(START_PTR)
C
***	MODULE	GET_POLYGON
***	IDENT	12MY92
C
	IMPLICIT NONE
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
	LOGICAL*4	ACTUAL_GET_POLYGON
C
C argument
	INTEGER   START_PTR	! pointer to first seg of poly
C
C	........................................................................
C
	GET_POLYGON = ACTUAL_GET_POLYGON(START_PTR,
     &			POLMAX,TABMAX,POLNEST_MAX, PARTS_MAX,
     &			%VAL(PTR$_POLY_PARTS),
     &			%VAL(PTR$_SEGTAB)
     &		  )
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	LOGICAL*4 FUNCTION ACTUAL_GET_POLYGON(START_PTR,
     &		POLMAX,TABMAX,POLNEST_MAX,PARTS_MAX,
     &		POLY_PARTS,
     &		SEGTAB
     &	)
C

***	MODULE	ACTUAL_GET_POLYGON
***	IDENT	21SE87
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Author						MWSR 22-Jun-1987
C 	From TJH's IPOLYGON 
C
C
C Function to get all the coordinates defining polygon POLY_INDX.
C GET_POLY() returns the coordinates in POLYGONS/POLY_BUF. There
C are /POLYGONS/POLY_PTS of them.
C
C Function returns SS$_NORMAL if all is well or one of a variety of
C IPOLYGON error codes on failure.
C
C ......................................................................
C
	IMPLICIT NONE
C
C Parameters:
	INTEGER*2	X,Y
	PARAMETER 	(X=1, Y=2)
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNPOLYGONS:POLYGONSMSG.PAR'
	INCLUDE 	'LSL$CMNPOLMERGE:POLMERGEMSG.PAR'
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
C
C Common:
	INCLUDE		'LSL$CMNPOLYGONS:FILE.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:TABLES.CMN'
C
C argument
	INTEGER   START_PTR	! pointer to first seg of poly
C
	INTEGER*4	POLMAX
	INTEGER*4	TABMAX
	INTEGER*4	POLNEST_MAX
	INTEGER*4	PARTS_MAX
C
	INTEGER		POLY_PARTS(2,PARTS_MAX)
	INTEGER*4	SEGTAB(2,TABMAX)
C W/s
	INTEGER*2 IECODE,IELEN	! IFF entry code and length
	INTEGER*2 IENDS		! line state (coded bitwise)
	INTEGER*2 NPTS,NUM	! number coords to be read/reversed
	INTEGER   I,J,N		! temp. vars.
	INTEGER	  IREV		! if -ve then reverse segment
	INTEGER   SEGPTR	! pointer into SEGTAB
C
C ......................................................................
C
	ACTUAL_GET_POLYGON=%LOC(SS$_NORMAL)
C
	SEGPTR=IABS(START_PTR)
C
C Store sign of segment pointer. If negative we will have to
C reverse this segment for contiguous polygon boundary formation
10	IREV=ISIGN(1,POLY_PARTS(1,SEGPTR))
C
C Jump to first segment of the polygon (IFF address stored
C in /TABLES/SEGTAB)
	CALL IFFPKE(IECODE,IELEN,
     &				SEGTAB(2,ABS(POLY_PARTS(1,SEGPTR))))
	IF (IELEN.LE.-1) GOTO 40	! eof?
	IF (IECODE.NE.'NF') THEN
	   ACTUAL_GET_POLYGON=PMERGE__LOST
	   CALL LSL_PUTMSG(ACTUAL_GET_POLYGON,IECODE)
	   GOTO 50
	ENDIF
	NUM=0				! number of points in segment
20	CALL IFFNXT(IECODE,IELEN)
	IF (IELEN.LE.-1) GOTO 40	! eof?
	IF (IECODE.NE.'EF'.AND.IECODE.NE.'ST') GOTO 20
	IF (IECODE.EQ.'EF') GOTO 30
	CALL EIHRS(NPTS,IENDS)
C
C Check if there is room in POLY_BUF and then read in the (possibly
C unreversed) segment onto the end of POLY_BUF
	IF (POLY_PTS+NUM.GT.POLY_BUF_MAX) THEN
	   ACTUAL_GET_POLYGON=POLY__POLPTS
	   CALL LSL_PUTMSG(ACTUAL_GET_POLYGON,POLY_BUF_MAX)
	   GOTO 50
	ENDIF
	CALL EIHRR(POLY_BUF(X,POLY_PTS+1),NPTS*2,1)
	POLY_PTS=POLY_PTS+NPTS
	NUM=NUM+NPTS
	GOTO 20
C
C Do we need to reverse this segment ?
30	IF (IREV.EQ.-1) THEN
C
C Check if there is room in REVERSE's buffer for the segment string
	   IF (NUM.GT.SEG_BUF_MAX) THEN
	      ACTUAL_GET_POLYGON=POLY__SEGPTS
	      CALL LSL_PUTMSG(ACTUAL_GET_POLYGON,SEG_BUF_MAX)
	      GOTO 50
	   ELSE
	      CALL REVERSE(POLY_BUF(X,POLY_PTS+1-NUM),NUM)
	   ENDIF
	ENDIF
C
C Get pointer to next segment in polygon
	SEGPTR=POLY_PARTS(2,SEGPTR)
C
C Have we finished the polygon? If not get next segment forming the
C polygon and add its coordinates into POLY_BUF
	IF(SEGPTR.EQ.0)THEN
	   CALL DUPLICATES		! removes duplicate coords
	   GOTO 50			! return
	ENDIF
C
C Ccheck for end of data
	IF (POLY_PARTS(1,SEGPTR) .EQ. 0) THEN
	   CALL DUPLICATES 
	   GOTO 50
	ENDIF
	GOTO 10
C
C ......................................................................
C
C Unexpected end of file
40	ACTUAL_GET_POLYGON=PMERGE__UNEXPEOF
	CALL LSL_PUTMSG(ACTUAL_GET_POLYGON,IN_FILE(:IN_LEN))
C
50	RETURN
	END
