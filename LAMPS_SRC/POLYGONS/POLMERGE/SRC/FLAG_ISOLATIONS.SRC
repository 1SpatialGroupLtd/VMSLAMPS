C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-05-13 13:50:38.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C
C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	LOGICAL*4 FUNCTION FLAG_ISOLATIONS()
C
***	MODULE	FLAG_ISOLATIONS
***	IDENT	12MY92
C
	IMPLICIT NONE
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
	LOGICAL*4	ACTUAL_FLAG_ISOLATIONS
C
C	........................................................................
C
	FLAG_ISOLATIONS = ACTUAL_FLAG_ISOLATIONS(
     &			POLMAX,TABMAX,POLNEST_MAX, PARTS_MAX,
     &			%VAL(PTR$_DUFF_POLYGON),
     &			%VAL(PTR$_POLY_START)
     &		  )
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	LOGICAL*4 FUNCTION ACTUAL_FLAG_ISOLATIONS(
     &		POLMAX,TABMAX,POLNEST_MAX,PARTS_MAX,
     &		DUFF_POLYGON,
     &		POLY_START
     &	)
C

***	MODULE	ACTUAL_FLAG_ISOLATIONS
***	IDENT	15OC87
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Author						TJH  20-Feb-1987
C	Modified for POLMERGE				MWSR 23-Jun-1987
C
C  flags all polygons with no neighbours as isolated
C
C Function returns SS$_NORMAL if all is well or one of a variety of
C POLMERGE error codes on failure.
C ......................................................................
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNPOLMERGE:POLMERGEMSG.PAR'
	INCLUDE		'($STSDEF)'
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
C
C Common:
	INCLUDE		'LSL$CMNPOLMERGE:COMMAND.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:FILE.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:TABLES.CMN'
C
C Arguments
	INTEGER*4	POLMAX
	INTEGER*4	TABMAX
	INTEGER*4	POLNEST_MAX
	INTEGER*4	PARTS_MAX
C
	INTEGER		DUFF_POLYGON((POLMAX+31)/32)
	INTEGER		POLY_START(3,POLMAX)
C
C W/s:
	INTEGER	  ISOL		! number of isolated polygons
	INTEGER   ISOL_INDX     ! poly index of an isolated poly
	INTEGER	  POLY_INDX	! current polygons ident
	INTEGER	  I		! counter
	LOGICAL   ISOLATED
C
C Functions:
	LOGICAL	  EXT1V		! extract 1-bit field
	INTEGER   CHECK_ISOL    ! checks to see if a polygon is isolated
C
C ......................................................................
C
	ACTUAL_FLAG_ISOLATIONS=%LOC(SS$_NORMAL)
C
C
C
C ......................................................................
C    L O O P    F O R    E  A C H    P O L Y G O N   I N    T U R N
C
	ISOL=0
	DO 10 POLY_INDX=1,NUM_POLY
C
C Carefully avoid processing the bounding polygon, (we need this)
	   IF (POLY_INDX.EQ.BOUND_POL) GOTO 10
C
C Avoid doing any duff polygons
	   IF (EXT1V(POLY_INDX,DUFF_POLYGON(1))) GOTO 10
C
C
	   IF  ( POLY_START(1,POLY_INDX).LT. 0) THEN
C
C check to see if neighbour is a real isolation
	      ACTUAL_FLAG_ISOLATIONS =CHECK_ISOL(POLY_INDX,ISOL_INDX,ISOLATED) 
	      IF (.NOT. ACTUAL_FLAG_ISOLATIONS) GOTO 20
	      IF (ISOLATED) THEN
	         ISOL=ISOL+1
	         CALL ISOL_POLY(ISOL_INDX)
	      ENDIF
	   ENDIF
10	CONTINUE
C
C 
C
C ......................................................................
C
C Tell user what has been done?
	IF (HAD_LOG) THEN
	   CALL EXPAND(
     &	    'Number of polygons examined ......................... %N',
     &							       NUM_POLY)
	   IF (HAD_LIS) THEN
	      CALL FLWLIN
	   ELSE
	      CALL TTWLIN
	   ENDIF
	   CALL EXPAND(
     &	    'Number of isolated polygons ......................... %N',
     &								 ISOL)
	   IF (HAD_LIS) THEN
	      CALL FLWLIN
	   ELSE
	      CALL TTWLIN
	   ENDIF
	ENDIF
C
C ......................................................................
C
20	RETURN
	END
	
