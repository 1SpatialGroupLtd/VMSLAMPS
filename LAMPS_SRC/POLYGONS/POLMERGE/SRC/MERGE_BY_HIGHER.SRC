	INTEGER*4 FUNCTION MERGE_BY_HIGHER
     &                     (SUBJ_INDEX,OBJ_INDEX,REAL_NEIGH) 
C
***	MODULE	MERGE_BY_HIGHER
***	IDENT	10OC87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author D R CATLOW
C
C Created					DRC    26-Aug-1987
C
C Function:
C Determines using CHECK_NUMERIC_LABEL whether the label
C associated with SUBJ_INDEX polygon is numeric, and then looks 
C at all the polygons in NEIGH_BUF in turn to find a neighbour
C with a numeric code that is higher.
C When a number of neighbours have higher codes, the index of the
C neighbouring polygon with the lowest value is returned.
C In the event of more than 1 neighbouring polygon having the same
C numeric value, the index of the first polygon encounterd
C in the neighbour list is returned.
C The index of the valid neighbour is returned in OBJ_INDEX.
C
C Only polygons with labels composed ENTIRELY of numerals are
C considered.  The routine CHECK_NUMERIC_LABEL is called to
C perform this check, and return the decoded number.
C The numeric label is treated as a floating point value,
C although in most circumstances it is likely to be integer.
C
C If the label of the SUBJ_INDEX polygon is not numeric the
C function returns FALSE.
C If none of the neighbouring polygons have a numeric label
C higher than that of the SUBJ_INDEX polygon,
C OBJ_INDEX will be 0, and the function will return FALSE.
C 
C 
	IMPLICIT NONE
C
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
C
C Common:
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'LSL$CMNPOLMERGE:MERGE.CMN'
	INCLUDE		'LSL$CMNPOLMERGE:COMMAND.CMN'
C 
C Arguments
	INTEGER*4	SUBJ_INDEX	! index of the primary polygon
	INTEGER*4	OBJ_INDEX	! the index of the secondary 
C					! polygon that has the highest
C					! numeric label
	INTEGER*4	REAL_NEIGH	! real neighbour index
C
C Locals
	REAL		SUBJECT_VALUE	! numeric value of subject polygon
	REAL		OBJECT_VALUE	! numeric value of object polygon
	REAL		LOWEST_OBJECT_VALUE	! numeric value of object
C					! polygon that is the lowest valid
C					! value
	INTEGER*4	IERR		! function return
	INTEGER*4	I		! counter
	LOGICAL		FIRST		! first valid neighbour? (.T.)
C
C Functions
	INTEGER*4	CHECK_NUMERIC_LABEL	!to check if the label
C					!is composed entirely of numeric
C					!characters forming a valid number.
C					
C-------------------------------------------------------------------------
C Assume success
	MERGE_BY_HIGHER=.TRUE.
C
C Initialise secondary polygon index
	OBJ_INDEX=0
C
C Test the label of the SUBJ_INDEX polygon.
	IERR=CHECK_NUMERIC_LABEL(SUBJ_INDEX,SUBJECT_VALUE)
	IF(.NOT.IERR)THEN		!not a valid numeric label
	  MERGE_BY_HIGHER=.FALSE.	!signal failure
	  GOTO 999
	ENDIF
C
C Set FIRST to true to indicate that the first neighbour with a higher
C value that is found, is the first such neighbour.
	FIRST=.TRUE.
C
C Now test each neighbour polygon in turn.
	DO 10 I = 1,NUM_NEIGH
C
	   IF(NEIGH_BUF(1,I).EQ.0)GOTO 10
C
C don't count bounding polygon
	   IF (NEIGH_BUF(1,I).EQ. BOUND_POL) THEN
	      IF (HAD_BOUNDING) THEN
	          MERGE_BY_HIGHER = .FALSE.
	          GOTO 999
	      ENDIF
	      GOTO 10
	   ENDIF
C
	   IERR=CHECK_NUMERIC_LABEL(ABS(NEIGH_BUF(1,I)),OBJECT_VALUE)
	   IF(.NOT.IERR)GOTO 10		!not a numeric label
C
C Is the object value less than the subject value?
	   IF(OBJECT_VALUE.LE.SUBJECT_VALUE)GOTO 10	!no
C
C Is the object value lower than the current lowest valid object value?
C If first polygon set lowest object value equal to the object value
	   IF(FIRST)THEN
             LOWEST_OBJECT_VALUE=OBJECT_VALUE
	     OBJ_INDEX=NEIGH_BUF(1,I)
	     REAL_NEIGH=NEIGH_BUF(2,I)
	     FIRST=.FALSE.
	   ELSE
C Test if label value is lower than the lowest valid value
	     IF(OBJECT_VALUE.LT.LOWEST_OBJECT_VALUE)THEN
C Update lowest object value,obj_index and real_neigh
               LOWEST_OBJECT_VALUE=OBJECT_VALUE
	       OBJ_INDEX=NEIGH_BUF(1,I)
	       REAL_NEIGH=NEIGH_BUF(2,I)
	     ENDIF
           ENDIF
C	
10	CONTINUE
C
C	If obj_index is still set to 0 (ie. no valid neighbour has 
C	been found), set function return to false.
	IF(OBJ_INDEX.EQ.0)MERGE_BY_HIGHER=.FALSE.
C
999	RETURN
C
	END
