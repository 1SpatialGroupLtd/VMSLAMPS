C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-05-18 18:34:42.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C
C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	INTEGER*4 FUNCTION CALC_AREAS_RATIOS()
C
***	MODULE	CALC_AREAS_RATIOS
***	IDENT	12MY92
C
	IMPLICIT NONE
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
	INTEGER*4	ACTUAL_CALC_AREAS_RATIOS
C
C	........................................................................
C
	CALC_AREAS_RATIOS = ACTUAL_CALC_AREAS_RATIOS(
     &			POLMAX,TABMAX,POLNEST_MAX, PARTS_MAX,
     &			%VAL(PTR$_DUFF_POLYGON),
     &			%VAL(PTR$_NEST_START),
     &			%VAL(PTR$_POLY_AREA),
     &			%VAL(LOC_PTR$_POLY_OUTER),
     &			%VAL(PTR$_POLY_PERIM),
     &			%VAL(PTR$_POLY_START),
     &			%VAL(LOC_PTR$_P_PTRS)
     &		  )
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	INTEGER*4 FUNCTION ACTUAL_CALC_AREAS_RATIOS(
     &		POLMAX,TABMAX,POLNEST_MAX,PARTS_MAX,
     &		DUFF_POLYGON,
     &		NEST_START,
     &		POLY_AREA,
     &		POLY_OUTER,
     &		POLY_PERIM,
     &		POLY_START,
     &		PTRS
     &	)
C
***	MODULE	ACTUAL_CALC_AREAS_RATIOS
***	IDENT	26OC87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    25-Jun-1987
C
C Calculates the area of all polygons taking into account nested 
C polygons
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
C
C Common Blocks
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'LSL$CMNPOLMERGE:MERGE.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:SECTOR.CMN'
	INCLUDE		'LSL$CMNPOLMERGE:COMMAND.CMN'
C
C Arguments
	INTEGER*4	POLMAX
	INTEGER*4	TABMAX
	INTEGER*4	POLNEST_MAX
	INTEGER*4	PARTS_MAX
C
	INTEGER		DUFF_POLYGON((POLMAX+31)/32)
	INTEGER		NEST_START(POLMAX+1)
	REAL		POLY_AREA(POLMAX)
	REAL		POLY_OUTER(POLMAX)
	REAL		POLY_PERIM(POLMAX)
	INTEGER		POLY_START(3,POLMAX)
C
C Functions
	INTEGER*4	FIRST_NEST	     ! gets the nestedpolygons
	LOGICAL		EXT1V		     ! extract 1 bit field
C
C Local Varaiables
	INTEGER*4	NNEST		     ! number of nested pols
	INTEGER*4	POLY_INDX	     ! polygon index
	INTEGER*4	I                    ! counter
	INTEGER*4       PTRS(POLNEST_MAX)    ! pointers to nested polys
	REAL		DOUGHNUT_AREA	     ! temp new area storage	
	REAL		PERIMETER	     ! length of polygon strings
	REAL		MIN_RATIO,MAX_RATIO  ! max/min ratios
	REAL		MIN_AREA,MAX_AREA    ! max/min areas
	LOGICAL		FIRST_TIME	     ! first polygon
	INTEGER*4       DUMPTR		     ! dummy arg
	REAL		RATIO
C
	ACTUAL_CALC_AREAS_RATIOS=%LOC(SS$_NORMAL)
C ......................................................................
C	IF (.NOT. (HAD_AREA .OR. HAD_RATIO)) GOTO 60 !why are we here?
	IF (HAD_RATIO) THEN
	    CALL FRAMED_MES(12)
	ELSE
	    CALL FRAMED_MES(11)
	ENDIF
	FIRST_TIME = .TRUE.
C
C    L O O P    F O R    E  A C H    P O L Y G O N   I N    T U R N
C
	DO 50 POLY_INDX=1,NUM_POLY
C
C Ensure that this is not a duff polygon
	   IF (EXT1V(POLY_INDX,DUFF_POLYGON(1))) THEN
	     GOTO 50
	   ENDIF
C
C No nests (yet)
	   NNEST=0
C
C Is this an unwanted isolated polygon? If so ignore it.
	   IF (POLY_START(1,POLY_INDX).LT.0) GOTO 50
C
C
C Avoid bounding polygon's nests!!!!
	   IF (POLY_INDX.NE.BOUND_POL) THEN
C
C Does the polygon contain any nested polygons?
	      IF (NEST_START(POLY_INDX).GT.0) THEN
	         CALL IFFSEL(INLUN)
	         ACTUAL_CALC_AREAS_RATIOS=
     &	   	    FIRST_NEST(POLY_INDX,PTRS,NNEST,.TRUE.,DUMPTR)
	         IF (.NOT.ACTUAL_CALC_AREAS_RATIOS) GOTO 60
	      ENDIF
C
C      calculate the area of the polygon allowing for nests
C POLY_AREA already holds the overall area of the polygon.
C
	      DOUGHNUT_AREA=POLY_AREA(POLY_INDX)
	      IF (NNEST.GT.0) THEN
	         DO 10 I=1,NNEST
	            DOUGHNUT_AREA=DOUGHNUT_AREA-POLY_AREA(PTRS(I))
C
C while we've conveniently got first order nested polys - update
C mother polygon record for them
		    POLY_START(3,PTRS(I)) = POLY_INDX
10	         CONTINUE
	      ENDIF
	      POLY_AREA(POLY_INDX) = DOUGHNUT_AREA

C max min stuff
	      IF (FIRST_TIME) THEN
	           MAX_AREA = POLY_AREA(POLY_INDX)
	           MIN_AREA = POLY_AREA(POLY_INDX)
	      ENDIF
	      IF (POLY_AREA(POLY_INDX) .GT. MAX_AREA) THEN
	         MAX_AREA = POLY_AREA(POLY_INDX)
	      ENDIF
	      IF(POLY_AREA(POLY_INDX) .LT. MIN_AREA) THEN
	         MIN_AREA = POLY_AREA(POLY_INDX)
	      ENDIF
C
C work out the perimeter /area ratio if required
	      POLY_OUTER(POLY_INDX) = POLY_PERIM(POLY_INDX)
	      IF (HAD_RATIO) THEN 
	        IF (NNEST .GT. 0) THEN
		   DO 20 I = 1,NNEST
		      POLY_PERIM(POLY_INDX) = POLY_PERIM(PTRS(I))
     &			+POLY_PERIM(POLY_INDX) 
20		   CONTINUE
	        ENDIF
	        RATIO = POLY_PERIM(POLY_INDX)/
     &	        SQRT(POLY_AREA(POLY_INDX))
		IF (FIRST_TIME) THEN
	           MAX_RATIO = RATIO
	           MIN_RATIO = RATIO
	        ENDIF
	        IF (RATIO .GT. MAX_RATIO) THEN
	           MAX_RATIO= RATIO
	        ENDIF
	        IF(RATIO.LT. MIN_RATIO) THEN
	           MIN_RATIO= RATIO
	        ENDIF
	      ENDIF
	      FIRST_TIME = .FALSE.
	   ENDIF
50	CONTINUE
C
C
	IF (HAD_LOG) THEN
	    
	  CALL EXPAND(
     &	     'Maximum Polygon area ... %F',
     &							MAX_AREA)
	      IF (HAD_LIS) THEN
	         CALL FLWLIN
	      ELSE
	         CALL TTWLIN
	      ENDIF
C
	  CALL EXPAND(
     &	     'Minimum Polygon area ... %F',
     &							MIN_AREA)
	      IF (HAD_LIS) THEN
	         CALL FLWLIN
	      ELSE
	         CALL TTWLIN
	      ENDIF
	  IF (HAD_RATIO) THEN
	     CALL EXPAND(
     &	     'Maximum Polygon perimiter/area  ratio... %F',
     &							MAX_RATIO)
	      IF (HAD_LIS) THEN
	         CALL FLWLIN
	      ELSE
	         CALL TTWLIN
	      ENDIF
C
	     CALL EXPAND(
     &	     'Minimum Polygon perimeter/area  ratio... %F',
     &							MIN_RATIO)
	      IF (HAD_LIS) THEN
	         CALL FLWLIN
	      ELSE
	         CALL TTWLIN
	      ENDIF
	   ENDIF
	ENDIF
60	RETURN
	END
