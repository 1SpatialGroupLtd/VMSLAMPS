C
C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	INTEGER*4 FUNCTION FIND_COMMON(
     &		POLY_INDX,NEIGH_INDX,PREV,NEXT,NUM_BOUND,
     &		FIRST_COMMON,LAST_COMMON, FIRST,LAST)
C
***	MODULE	FIND_COMMON
***	IDENT	12MY92
C
	IMPLICIT NONE
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
	INCLUDE 'LSL$CMNPOLYGONS:PARAMS.PAR'
C
C arguments
	INTEGER*4 POLY_INDX			!index of polygon
	INTEGER*4 NEIGH_INDX			!index of neighbour to be found
	INTEGER*4 PREV(BOUND_MAX)	!ptrs to segment b4 first implicated
	INTEGER*4 NEXT(BOUND_MAX)	!ptrs to segment after	last implicated
	INTEGER*4 FIRST				!pointers to first segment
	INTEGER*4 LAST				!pointers to last segment
	INTEGER*4 FIRST_COMMON(BOUND_MAX)	!pointers to 1st common seg
	INTEGER*4 LAST_COMMON(BOUND_MAX)	!pointers to last common seg
	INTEGER*4 NUM_BOUND   			!num of boundaries found
C
	INTEGER*4	ACTUAL_FIND_COMMON
C
C	........................................................................
C
	FIND_COMMON = ACTUAL_FIND_COMMON(
     &		POLY_INDX,NEIGH_INDX,PREV,NEXT,NUM_BOUND,
     &		FIRST_COMMON,LAST_COMMON, FIRST,LAST,
     &		POLMAX,TABMAX,POLNEST_MAX, PARTS_MAX,
     &		%VAL(PTR$_POLY_PARTS),
     &		%VAL(PTR$_POLY_START),
     &		%VAL(PTR$_SEGTAB)
     &	  )
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	INTEGER*4 FUNCTION ACTUAL_FIND_COMMON(
     &		POLY_INDX,NEIGH_INDX,PREV,NEXT,NUM_BOUND,
     &		FIRST_COMMON,LAST_COMMON, FIRST,LAST,
     &		POLMAX,TABMAX,POLNEST_MAX,PARTS_MAX,
     &		POLY_PARTS,
     &		POLY_START,
     &		SEGTAB
     &	)
C

***	MODULE	ACTUAL_FIND_COMMON
***	IDENT	24SE87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    14-Jul-1987
C
C Finds the segment indices within poly_parts of the crucial segments
C of polygon POLY_INDX . ie those which neighbour on NEIGH_INDX
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNPOLMERGE:POLMERGEMSG.PAR'
	INCLUDE		'($SSDEF)'
C
C Common:
	INCLUDE		'LSL$CMNPOLMERGE:MERGE.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:TABLES.CMN'
C
C arguments
	INTEGER*4 POLY_INDX			!index of polygon
	INTEGER*4 NEIGH_INDX			!index of neighbour to be found
	INTEGER*4 PREV(BOUND_MAX)	!ptrs to segment b4 first implicated
	INTEGER*4 NEXT(BOUND_MAX)	!ptrs to segment after	last implicated
	INTEGER*4 FIRST				!pointers to first segment
	INTEGER*4 LAST				!pointers to last segment
	INTEGER*4 FIRST_COMMON(BOUND_MAX)	!pointers to 1st common seg
	INTEGER*4 LAST_COMMON(BOUND_MAX)	!pointers to last common seg
	INTEGER*4 NUM_BOUND   			!num of boundaries found
C
	INTEGER*4	POLMAX
	INTEGER*4	TABMAX
	INTEGER*4	POLNEST_MAX
	INTEGER*4	PARTS_MAX
C
	INTEGER		POLY_PARTS(2,PARTS_MAX)
	INTEGER		POLY_START(3,POLMAX)
	INTEGER*4	SEGTAB(2,TABMAX)
C
C
C function
	INTEGER		CHECK_NODE_NEIGH !checks for single node neigh
C
C Local Varaiables
	INTEGER*4	SAVPTR		! saved value of pointer
	INTEGER*4	SEGPTR		! pointer to segment in SEGTAB
	INTEGER*4	OTHSAVPTR       ! saved value of every pointer
	INTEGER*4	TMPINDX		! temp for poly index
	INTEGER*4	POLY1,POLY2     ! left and right poly indices
	INTEGER*4	SAVFIRST	! saved first pointer
	LOGICAL		RECENTLY_FOUND  !neighbour found last time round
	LOGICAL		FIRST_TIME	! first time round loop
	LOGICAL		FIRST_IMPLICATED !is the first seg implicated
	LOGICAL		LAST_IMPLICATED  !is the last seg implicated
	LOGICAL		ALL_IMPLICATED  ! are all segs implicated?
	LOGICAL		HAD_NEXT	! found next pointer?
	LOGICAL		HAD_PREV	! found previous pointer
	INTEGER		NF1,NF2
	LOGICAL		DIFFERENT	! for CHECK_NODE_NEIGH
C
	ACTUAL_FIND_COMMON=SS$_NORMAL
C
C Initialise logicals
	HAD_PREV = .FALSE.
	HAD_NEXT = .FALSE.
	LAST_IMPLICATED = .FALSE.
	FIRST_IMPLICATED = .FALSE.
	ALL_IMPLICATED = .TRUE.
	RECENTLY_FOUND = .FALSE.
C
	SEGPTR=IABS(POLY_START(1,POLY_INDX))
	IF (SEGPTR .EQ. 0) THEN
C this error should not happen - it is internal
	   CALL LSL_PUTMSG(PMERGE__INTRNLERR,1,'ACTUAL_FIND_COMMON')
	   ACTUAL_FIND_COMMON= PMERGE__INTRNLERR
	   GOTO 1000
	ENDIF
	NF1= SEGTAB(1,ABS(POLY_PARTS(1,SEGPTR)))
	NF2 = SEGTAB(1,ABS(POLY_PARTS(1,ABS(POLY_START(1,NEIGH_INDX)))))
	FIRST = SEGPTR
	SAVFIRST = FIRST
	FIRST_TIME = .TRUE.
	NUM_BOUND = 0
C
10	POLY1 = LR_SEGMENT(1,SEGTAB(1,ABS(POLY_PARTS(1,SEGPTR))))
	POLY2 = LR_SEGMENT(2,SEGTAB(1,ABS(POLY_PARTS(1,SEGPTR))))
C 
C one of these polygons should be the current polygon ie POLY_INDX
C the other one is the adjacent polygon 
	IF (POLY1 .EQ. POLY_INDX) THEN
	   TMPINDX = POLY2
	ELSE
	   IF (POLY2 .EQ. POLY_INDX) THEN
	      TMPINDX = POLY1
	   ELSE
C
C this error should not happen - it is internal
	      CALL LSL_PUTMSG(PMERGE__INTRNLERR,2,'ACTUAL_FIND_COMMON')
	      ACTUAL_FIND_COMMON= PMERGE__INTRNLERR
	      GOTO 1000
	   ENDIF
	ENDIF
C
	IF (RECENTLY_FOUND) THEN
C
C Ignore any second and subsequent implicated segments
	   IF (TMPINDX .EQ. NEIGH_INDX) THEN
C
C only ignore after we've checked that we haven't got a funny single 
C node join
	     ACTUAL_FIND_COMMON = CHECK_NODE_NEIGH
     &       (TMPINDX,SEGTAB(1,ABS(POLY_PARTS(1,SEGPTR))),DIFFERENT)
	     IF (.NOT. ACTUAL_FIND_COMMON) GOTO 1000
	     IF (.NOT. DIFFERENT) THEN
	        LAST_IMPLICATED = .TRUE.
	        GOTO 40
	     ENDIF
C
	   ELSE
	      ALL_IMPLICATED = .FALSE.
	   ENDIF
C first segment after implicated must be next
	   NEXT(NUM_BOUND)  = SEGPTR 
	   LAST_COMMON(NUM_BOUND) = OTHSAVPTR
	   HAD_NEXT = .TRUE.
	   RECENTLY_FOUND = .FALSE.
	   IF(TMPINDX .NE. NEIGH_INDX)GOTO 35
	ENDIF
	IF (TMPINDX .EQ. NEIGH_INDX) THEN
C
C this segment is implicated
	   IF ((NUM_BOUND +1) .GT. BOUND_MAX) THEN
	      ACTUAL_FIND_COMMON = PMERGE__TOOMNYBOUNDS
	      CALL LSL_PUTMSG(ACTUAL_FIND_COMMON,NF1,NF2)
	      GOTO 1000
	   ENDIF
	   NUM_BOUND = NUM_BOUND+1
	   FIRST_COMMON(NUM_BOUND) = SEGPTR
C
	   IF (.NOT. FIRST_TIME) THEN
	      PREV(NUM_BOUND) = SAVPTR
	      HAD_PREV= .TRUE.
C
C we've had the neighbour but we may come across it again in the
C normal non-complex situation if its the first time round
	   ELSE
	      FIRST_IMPLICATED = .TRUE.
	   ENDIF
	   RECENTLY_FOUND = .TRUE.
	   LAST_IMPLICATED = .TRUE.
	ELSE
	   ALL_IMPLICATED  = .FALSE.
	ENDIF
35	SAVPTR=SEGPTR
C Get pointer to next segment in polygon
40	OTHSAVPTR = SEGPTR
	SEGPTR=POLY_PARTS(2,SEGPTR)
C
C Have we finished the polygon? If not get next segment forming the
C polygon 
	IF(SEGPTR.EQ.0)THEN
	   GOTO 50			! return
	ENDIF
C
C check for end of data
	IF (POLY_PARTS(1,SEGPTR) .EQ. 0) THEN
	   GOTO 50
	ENDIF
	FIRST_TIME = .FALSE.
	LAST_IMPLICATED = .FALSE.
	GOTO 10
C
C now sort out the awkward situations
C
50	IF (LAST_IMPLICATED) THEN
	   LAST = PREV(NUM_BOUND)
	   LAST_COMMON(NUM_BOUND) = OTHSAVPTR
	ELSE
	   LAST = SAVPTR
	ENDIF
	IF (FIRST_IMPLICATED) THEN
	   FIRST = NEXT(1)
	   PREV(1) = LAST
	ENDIF
	IF (LAST_IMPLICATED .AND. (.NOT. FIRST_IMPLICATED)) THEN
	   NEXT(NUM_BOUND) = FIRST
	ENDIF
	IF (FIRST_IMPLICATED .AND. LAST_IMPLICATED) THEN
	   IF (NUM_BOUND .GE. 2) THEN
C
C ensure its not a single node neighbour between first and last 
C segments
	      ACTUAL_FIND_COMMON =CHECK_NODE_NEIGH
     &        (TMPINDX,SEGTAB(1,ABS(POLY_PARTS(1,SAVFIRST))),DIFFERENT)
	      IF (.NOT. ACTUAL_FIND_COMMON) GOTO 1000 
	      IF (DIFFERENT) THEN
	         NEXT(NUM_BOUND) = FIRST_COMMON(1)
	         PREV(1) = LAST_COMMON(NUM_BOUND)
	         GOTO 999
	      ENDIF
	   ENDIF
	   FIRST_COMMON(1) = FIRST_COMMON(NUM_BOUND)
	   NUM_BOUND = NUM_BOUND-1
	ENDIF
999	IF (ALL_IMPLICATED) THEN
C
C if all the segments are implicated then its a single node neighbour
C if we have only one boundary
	   IF (NUM_BOUND .LT. 2) THEN 
	      NUM_BOUND = 0
	   ENDIF
	ENDIF
1000	RETURN
	END
