C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-03-02 15:07:04.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C
C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	INTEGER*4 FUNCTION ELIMINATE(POLY_INDX)
C
***	MODULE	ELIMINATE
***	IDENT	02MR93
C
	IMPLICIT NONE
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
C argument
	INTEGER*4	POLY_INDX	     ! polygon index
C
	INTEGER*4	ACTUAL_ELIMINATE
C
C	........................................................................
C
	ELIMINATE = ACTUAL_ELIMINATE(POLY_INDX,
     &			POLMAX,TABMAX,POLNEST_MAX, PARTS_MAX,
     &			%VAL(PTR$_NEST_START),
     &			%VAL(PTR$_POLY_AREA),
     &			%VAL(PTR$_POLY_PARTS),
     &			%VAL(PTR$_POLY_PERIM),
     &			%VAL(PTR$_POLY_START),
     &			%VAL(PTR$_SEGTAB),
     &			%VAL(LOC_PTR$_P_PTRS),
     &			%VAL(LOC_PTR$_MOTHER_POINTER)
     &		  )
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	INTEGER*4 FUNCTION ACTUAL_ELIMINATE(POLY_INDX,
     &		POLMAX,TABMAX,POLNEST_MAX,PARTS_MAX,
     &		NEST_START,
     &		POLY_AREA,
     &		POLY_PARTS,
     &		POLY_PERIM,
     &		POLY_START,
     &		SEGTAB,
     &		PTRS,
     &		MOTHER_POINTER
     &	)
C

***	MODULE	ACTUAL_ELIMINATE
***	IDENT	14OC87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    04-Aug-1987
C
C deletes the polygon if specified 
C ELIMINATE_BY_LOOKUP function added		DRC     14-Aug-1987
C ELIMINATE_BY_LOWER and ELIMINATE_BY_HIGHER
C calls added                                   DRC     26-Aug-1987
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNPOLMERGE:POLMERGEMSG.PAR'
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
C
C Common:
	INCLUDE		'LSL$CMNPOLMERGE:COMMAND.CMN'
	INCLUDE		'LSL$CMNPOLMERGE:MERGE.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:TABLES.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:SECTOR.CMN'
C
C argument
	INTEGER*4	POLY_INDX	     ! polygon index
C
	INTEGER*4	POLMAX
	INTEGER*4	TABMAX
	INTEGER*4	POLNEST_MAX
	INTEGER*4	PARTS_MAX
C
	INTEGER		NEST_START(POLMAX+1)
	REAL		POLY_AREA(POLMAX)
	INTEGER		POLY_PARTS(2,PARTS_MAX)
	REAL		POLY_PERIM(POLMAX)
	INTEGER		POLY_START(3,POLMAX)
	INTEGER*4	SEGTAB(2,TABMAX)
	INTEGER		MOTHER_POINTER(POLMAX)
C
C Functions
	INTEGER*4   	FIRST_NEST  ! gets 1st order nested polys
	INTEGER*4       ELIMINATE_BY_LOOKUP!to find if this
C				    ! polygon and its mother match
C				    ! in the lookup table.
	INTEGER*4	ELIMINATE_BY_LOWER ! has mother a lower label val
	INTEGER*4	ELIMINATE_BY_HIGHER !to test if current polygon's
C				    ! mother has a higher label value
C
	INTEGER*4       GET_MOTHER  		! MOther!!!
	INTEGER*4       ADJACENT		! to get neighbours
	INTEGER*4       MERGE_FOR_ELIM 		! to merge into nests with same
C				       		! code as mother
C Local Varaiables
	INTEGER*4	NNEST		     ! number of nested pols
	INTEGER*4       PTRS(POLNEST_MAX)    ! pointers to nested polys
	INTEGER*4   	LASTNEST	     ! pointer tolast nestedpoly
	INTEGER*4	POLY1,POLY2	     !remp poly indices
	INTEGER*4       MOTHER		     ! POLY_INDX'S mother
	INTEGER*4	PHAN		     ! phantom neighbour
	INTEGER*4	I		     ! counter
C
C------------------------------------------------------------------------
C
	ACTUAL_ELIMINATE = %LOC(SS$_NORMAL)
C
C find the phantom neighbour
C
	NNEST = 0
10	POLY1 = LR_SEGMENT
     &	   (1,SEGTAB(1,ABS(POLY_PARTS(1,ABS(POLY_START(1,POLY_INDX))))))
	POLY2 = LR_SEGMENT
     &	   (2,SEGTAB(1,ABS(POLY_PARTS(1,ABS(POLY_START(1,POLY_INDX))))))
C 
	IF (POLY1 .EQ. POLY_INDX) THEN
	   PHAN = POLY2
	ELSE
     	   IF (POLY2 .EQ. POLY_INDX) THEN
	      PHAN = POLY1
	   ELSE
	      CALL LSL_PUTMSG(PMERGE__INTRNLERR,1,'ELIMINATE')
	      ACTUAL_ELIMINATE= PMERGE__INTRNLERR
	      GOTO 999
	   ENDIF
	ENDIF
C
C If phantom has no mother eliminate but give warning mess
	IF (POLY_START(3,PHAN).EQ.0) THEN
	   CALL LSL_PUTMSG(PMERGE__PHANNOMOTH,POLY_INDX)
	   GOTO 15
	ENDIF
C
C find the mother polygon
	ACTUAL_ELIMINATE = GET_MOTHER(PHAN,MOTHER)
	IF (.NOT. ACTUAL_ELIMINATE ) GOTO 999
C update pointer to mother polygon for nested polies
	MOTHER_POINTER(POLY_INDX) = MOTHER
C
C	MOTHER = POLY_START(3,PHAN)
C
C see if we've still to ELIMINATE after considering user 
C specified rules
C
	IF (ELIM_BY_UPPER)THEN
C determine whether the label of POLY_INDX and MOTHER are both
C numeric, and that the value of the MOTHER label is higher
	   ACTUAL_ELIMINATE = ELIMINATE_BY_HIGHER(POLY_INDX,MOTHER)
	   IF(.NOT.ACTUAL_ELIMINATE)GOTO 999
	ENDIF
C	   
	IF (ELIM_BY_LOWER)THEN
C determine whether the label of POLY_INDX and MOTHER are both
C numeric, and that the value of the MOTHER label is lower
	   ACTUAL_ELIMINATE = ELIMINATE_BY_LOWER(POLY_INDX,MOTHER)
	   IF(.NOT.ACTUAL_ELIMINATE)GOTO 999
	ENDIF
C
	IF (ELIM_BY_LOOKUP) THEN
C determine whether this polygon is specified as a primary polygon
C in the lookup table
	   ACTUAL_ELIMINATE = ELIMINATE_BY_LOOKUP(POLY_INDX,MOTHER)
	   IF(.NOT.ACTUAL_ELIMINATE)GOTO 999
	ENDIF
C
C and delete it
15	POLY_START(1,POLY_INDX) = 0	
C
C also delete phantom 
	POLY_START(1,PHAN) = 0
C
C update mother polygons for nests
	IF (NEST_START(POLY_INDX) .GT. 0) THEN
	   ACTUAL_ELIMINATE = FIRST_NEST(MOTHER,PTRS,NNEST,.TRUE.,LASTNEST)
	   DO 20 I = 1,NNEST
C
C
C  there might be a nest with a code the same as the mother poly
C this must be merged - so get them into neigh_buf here
	      NUM_NEIGH = 0
	      ACTUAL_ELIMINATE = ADJACENT(PTRS(I),.TRUE.)
	      IF (.NOT. ACTUAL_ELIMINATE ) GOTO 999
C
C update mother polygons for nests
	      POLY_START(3,PTRS(I)) = MOTHER
20	   CONTINUE
	ENDIF
C
C  there might be a nest with a code the same as the mother poly
C  do the merging here
C
C update perimiter and ratios for mother
	IF (HAD_AREA.OR. HAD_RATIO) THEN
	   POLY_AREA(MOTHER) = 
     &	   POLY_AREA(MOTHER) + POLY_AREA(ABS(POLY_INDX))
	ENDIF
	IF (HAD_RATIO) THEN
	   IF (NNEST .NE. 0) THEN
	      DO 30 I = 1,NNEST
	         POLY_PERIM(MOTHER) = POLY_PERIM(MOTHER) 
     &	         + POLY_PERIM(PTRS(I))
30	      CONTINUE
	   ENDIF
	ENDIF
C
C  there might be a nest with a code the same as the mother poly
C  do the merging here
C
	IF (NNEST .GT. 0) THEN
	   ACTUAL_ELIMINATE = MERGE_FOR_ELIM(MOTHER,LASTNEST)
	   IF (.NOT. ACTUAL_ELIMINATE ) GOTO 999
	ENDIF
C
C	
999	RETURN
	END
