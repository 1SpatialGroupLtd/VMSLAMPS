C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-05-18 19:44:46.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C
C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	INTEGER*4 FUNCTION GET_NEIGH(POLY_INDX,LASTPTR)
C
***	MODULE	GET_NEIGH
***	IDENT	12MY92
C
	IMPLICIT NONE
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
C argument
	INTEGER   POLY_INDX	! IN - current polygon
	INTEGER   LASTPTR       ! OUT - pointer to last polygon
C
	INTEGER*4	ACTUAL_GET_NEIGH
C
C	........................................................................
C
	GET_NEIGH = ACTUAL_GET_NEIGH(POLY_INDX,LASTPTR,
     &			POLMAX,TABMAX,POLNEST_MAX, PARTS_MAX,
     &			%VAL(PTR$_NEST_START),
     &			%VAL(LOC_PTR$_P_PTRS)
     &		  )
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	INTEGER*4 FUNCTION ACTUAL_GET_NEIGH(POLY_INDX,LASTPTR,
     &		POLMAX,TABMAX,POLNEST_MAX,PARTS_MAX,
     &		NEST_START,
     &		PTRS
     &	)
C

***	MODULE	ACTUAL_GET_NEIGH
***	IDENT	06OC87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    29-Jun-1987
C
C Returns in NEIGH_BUF the poly indices of the neighbouring polygons of
C the polygon with index POLY_INDX . 
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNPOLMERGE:POLMERGEMSG.PAR'
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
C
C Common:
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:TABLES.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:SECTOR.CMN'
	INCLUDE		'LSL$CMNPOLMERGE:MERGE.CMN'
C
C argument
C
	INTEGER   POLY_INDX	! IN - current polygon
	INTEGER   LASTPTR       ! OUT - pointer to last polygon
C
C Arguments
	INTEGER*4	POLMAX
	INTEGER*4	TABMAX
	INTEGER*4	POLNEST_MAX
	INTEGER*4	PARTS_MAX
C
	INTEGER		NEST_START(POLMAX+1)
C
C function
	INTEGER*4 FIRST_NEST    ! gets first order nested polys
	INTEGER*4 ADJACENT	! gets adjacent polys
C 
C Local Varaiables
	INTEGER   NNEST		! num of nested polys
	INTEGER   PTRS(POLNEST_MAX)    ! pointers to nested polys
	INTEGER   I		! counter
C
	ACTUAL_GET_NEIGH=%LOC(SS$_NORMAL)
C
	LASTPTR = 0
	NUM_NEIGH= 0
C get the adjacent polygons into NEIGH_BUF
	ACTUAL_GET_NEIGH = ADJACENT (POLY_INDX,.FALSE.)
	IF (.NOT. ACTUAL_GET_NEIGH) GOTO 999
C
C now we have to add to the list nested polygons which also qualify
C as being neighbours.
C
	IF (NEST_START(POLY_INDX) .EQ. 0) GOTO 999	!no nests
C 
C get all the first order nested polygons 
	ACTUAL_GET_NEIGH = FIRST_NEST(POLY_INDX,PTRS,NNEST,.TRUE.,LASTPTR)
	IF (.NOT. ACTUAL_GET_NEIGH ) GOTO 999
	IF (NNEST .GT. 0) THEN
	   DO 70 I = 1,NNEST
	      ACTUAL_GET_NEIGH = ADJACENT(PTRS(I),.TRUE.)
	      IF (.NOT. ACTUAL_GET_NEIGH) GOTO 999
70	   CONTINUE
	ENDIF
C
999	RETURN
	END
