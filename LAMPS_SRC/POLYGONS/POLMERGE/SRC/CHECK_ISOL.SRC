C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-05-18 18:35:50.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C
C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	INTEGER*4 FUNCTION CHECK_ISOL(POLY_INDX,OUT_INDX,ISOLATED)
C
***	MODULE	CHECK_ISOL
***	IDENT	12MY92
C
	IMPLICIT NONE
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
	INTEGER*4	ACTUAL_CHECK_ISOL
C
C Arguments
	INTEGER*4	POLY_INDX	!current poly 
	INTEGER*4	OUT_INDX	!polygon index of non-phantom ISOLATION
	LOGICAL         ISOLATED        !it is isolated
C
C	........................................................................
C
	CHECK_ISOL = ACTUAL_CHECK_ISOL(POLY_INDX,OUT_INDX,ISOLATED,
     &			POLMAX,TABMAX,POLNEST_MAX, PARTS_MAX,
     &			%VAL(PTR$_POLY_PARTS),
     &			%VAL(PTR$_POLY_START),
     &			%VAL(PTR$_SEGTAB)
     &		  )
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	INTEGER*4 FUNCTION ACTUAL_CHECK_ISOL(POLY_INDX,OUT_INDX,ISOLATED,
     &		POLMAX,TABMAX,POLNEST_MAX,PARTS_MAX,
     &		POLY_PARTS,
     &		POLY_START,
     &		SEGTAB
     &	)
C

***	MODULE	ACTUAL_CHECK_ISOL
***	IDENT	15OC87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    02-Jul-1987
C
C looks at segments of the polygon 
C if more than two poly indexes are found then the polygon can't be
C isolated
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNPOLMERGE:POLMERGEMSG.PAR'
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
C
C Common:
	INCLUDE		'LSL$CMNPOLMERGE:MERGE.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:TABLES.CMN'
C
C Arguments
	INTEGER*4	POLY_INDX	!current poly 
	INTEGER*4	OUT_INDX	!polygon index of non-phantom ISOLATION
	LOGICAL         ISOLATED        !it is isolated
C
	INTEGER*4	POLMAX
	INTEGER*4	TABMAX
	INTEGER*4	POLNEST_MAX
	INTEGER*4	PARTS_MAX
C
	INTEGER		POLY_PARTS(2,PARTS_MAX)
	INTEGER		POLY_START(3,POLMAX)
	INTEGER*4	SEGTAB(2,TABMAX)
C
C function
	INTEGER*4       CHECK_NODE_NEIGH !checks for single node neigh
C
C Local Varaiables
	INTEGER*4	SEGPTR		!pointer to segments
	INTEGER*4       POLY1,POLY2     !polygon indices on either side
	INTEGER*4	FSNUM		!FSN 
	LOGICAL		FIRST_TIME      !first time round loop
	INTEGER*4	NEIGH           !neighbour indices
	LOGICAL		DIFFERENT
C
	ACTUAL_CHECK_ISOL = %LOC(SS$_NORMAL)
	DIFFERENT = .FALSE.
	ISOLATED = .TRUE.
C
	SEGPTR=IABS(POLY_START(1,POLY_INDX))
	IF(SEGPTR .EQ. 0) THEN
	   CALL LSL_PUTMSG(PMERGE__INTRNLERR,1,'ACTUAL_CHECK_ISOL')
	   ACTUAL_CHECK_ISOL= PMERGE__INTRNLERR
	   GOTO 999
	ENDIF
	FIRST_TIME = .TRUE.
C
C loop for each segment in turn
C look at the polygons on the left and right of the current segment
C
10	FSNUM = SEGTAB(1,ABS(POLY_PARTS(1,SEGPTR)))
	POLY1 = LR_SEGMENT(1,FSNUM)
	POLY2 = LR_SEGMENT(2,FSNUM)
	IF (FIRST_TIME) THEN
	   IF (POLY1 .EQ. POLY_INDX) THEN
	      NEIGH = POLY2
	   ELSE
	      NEIGH = POLY1
	   ENDIF
C
C check for single node neigh
	   ACTUAL_CHECK_ISOL=CHECK_NODE_NEIGH
     &       (NEIGH,FSNUM,DIFFERENT)
	   IF (.NOT. ACTUAL_CHECK_ISOL) GOTO 999
	   IF (DIFFERENT) THEN
	      ISOLATED = .FALSE.
	      GOTO 999
	   ENDIF
	   FIRST_TIME = .FALSE.
	   GOTO 20
	ENDIF
	IF (POLY1 .NE. NEIGH .AND. POLY1 .NE. POLY_INDX) THEN
C
C poly 1 hasn't been seen before so poly isn't isolated
	   ISOLATED = .FALSE.
	   GOTO 999
	ENDIF
	IF (POLY2 .NE. NEIGH .AND. POLY2 .NE. POLY_INDX) THEN
C
C poly 2 hasn't been seen before so poly isn't isolated
	   ISOLATED = .FALSE.
	   GOTO 999
	ENDIF
C
C check for single node neigh
	ACTUAL_CHECK_ISOL = CHECK_NODE_NEIGH
     &       (NEIGH,FSNUM,DIFFERENT)
	IF (.NOT. ACTUAL_CHECK_ISOL) GOTO 999
	IF (DIFFERENT) THEN
	   ISOLATED = .FALSE.
	   GOTO 999
	ENDIF
C
20	SEGPTR=POLY_PARTS(2,SEGPTR)
	IF(SEGPTR.EQ.0)THEN
	   IF (POLY1 .EQ. POLY_INDX) THEN
	      OUT_INDX = POLY2
	   ELSE
	      OUT_INDX = POLY1
	   ENDIF
	   GOTO 999			! return
	ENDIF
	GOTO 10
C
999	RETURN
	END
