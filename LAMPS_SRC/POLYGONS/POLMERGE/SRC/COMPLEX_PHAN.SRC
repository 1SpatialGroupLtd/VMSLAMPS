C
C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	INTEGER*4 FUNCTION COMPLEX_PHAN(
     &		OBJ_INDEX,SUBJ_INDEX,SPREV,OPREV,SNEXT,ONEXT,SFIRSTCOM,
     &		OFIRSTCOM, SLASTCOM,OLASTCOM,NUM_BOUND,LASTNEST,MOTHER)
C
***	MODULE	COMPLEX_PHAN
***	IDENT	12MY92
C
	IMPLICIT NONE
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
C arguments
	INTEGER  NUM_BOUND		!number of boundaries 	
	INTEGER  SUBJ_INDEX	  	!index of subject polygon
	INTEGER  OBJ_INDEX	  	!index of object polygon
	INTEGER  SPREV(NUM_BOUND)       !ptrs to previous segs in subj
	INTEGER  OPREV(NUM_BOUND)       !ptrs to previous segs in obj
	INTEGER  SNEXT(NUM_BOUND)       !ptrs to next segs in subj
	INTEGER  ONEXT(NUM_BOUND)       !ptrs to next segs in obj
	INTEGER  SFIRSTCOM(NUM_BOUND)   !ptrs to 1st implic seg in subj
	INTEGER  OFIRSTCOM(NUM_BOUND)   !ptrs to 1st implic seg in obj
	INTEGER  SLASTCOM(NUM_BOUND)    !ptrs to last implic seg in subj
	INTEGER  OLASTCOM(NUM_BOUND)    !ptrs to last implic seg in obj
	INTEGER  LASTNEST		!pointer to last nested poly
	INTEGER  MOTHER			! the mother polygon
C
	INTEGER*4	ACTUAL_COMPLEX_PHAN
C
C	........................................................................
C
	COMPLEX_PHAN = ACTUAL_COMPLEX_PHAN(
     &		OBJ_INDEX,SUBJ_INDEX,SPREV,OPREV,SNEXT,ONEXT,SFIRSTCOM,
     &		OFIRSTCOM, SLASTCOM,OLASTCOM,NUM_BOUND,LASTNEST,MOTHER,
     &			POLMAX,TABMAX,POLNEST_MAX, PARTS_MAX,
     &			%VAL(PTR$_NEST_START),
     &			%VAL(PTR$_POLNEST),
     &			%VAL(PTR$_POLY_AREA),
     &			%VAL(PTR$_POLY_PARTS),
     &			%VAL(LOC_PTR$_POLY_OUTER),
     &			%VAL(PTR$_POLY_PERIM),
     &			%VAL(PTR$_POLY_RANGE),
     &			%VAL(PTR$_POLY_START),
     &			%VAL(PTR$_SEGTAB)
     &		  )
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	INTEGER*4 FUNCTION ACTUAL_COMPLEX_PHAN(
     &		OBJ_INDEX,SUBJ_INDEX,SPREV,OPREV,SNEXT,ONEXT,SFIRSTCOM,
     &		OFIRSTCOM, SLASTCOM,OLASTCOM,NUM_BOUND,LASTNEST,MOTHER,
     &		POLMAX,TABMAX,POLNEST_MAX,PARTS_MAX,
     &		NEST_START,
     &		POLNEST,
     &		POLY_AREA,
     &		POLY_PARTS,
     &		POLY_OUTER,
     &		POLY_PERIM,
     &		POLY_RANGE,
     &		POLY_START,
     &		SEGTAB
     &	)
C
C

***	MODULE	ACTUAL_COMPLEX_PHAN
***	IDENT	26OC87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    22-Jul-1987
C
C Deals with the situation when a polygon to be merged has more
C than one common boundary with its neighbour which is a phantom
C ie
C          _____________________
C          |                   |
C          |          O        |    S = subject
C          |    ___________    |    O = object
C          |   |   |    | |    |
C          |   |   | S  | |    |
C          |   |   |    | |    |
C          |   ------------    |
C          |                   |
C          |                   |
C          ---------------------
C 
C
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNPOLMERGE:POLMERGEMSG.PAR'
	INCLUDE 	'LSL$CMNPOLYGONS:POLYGONSMSG.PAR'
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
C
C Common:
	INCLUDE		'LSL$CMNPOLMERGE:COMMAND.CMN'
	INCLUDE		'LSL$CMNPOLMERGE:MERGE.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:TABLES.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:SECTOR.CMN'
C
C arguments
	INTEGER  NUM_BOUND		!number of boundaries 	
	INTEGER  SUBJ_INDEX	  	!index of subject polygon
	INTEGER  OBJ_INDEX	  	!index of object polygon
	INTEGER  SPREV(NUM_BOUND)       !ptrs to previous segs in subj
	INTEGER  OPREV(NUM_BOUND)       !ptrs to previous segs in obj
	INTEGER  SNEXT(NUM_BOUND)       !ptrs to next segs in subj
	INTEGER  ONEXT(NUM_BOUND)       !ptrs to next segs in obj
	INTEGER  SFIRSTCOM(NUM_BOUND)   !ptrs to 1st implic seg in subj
	INTEGER  OFIRSTCOM(NUM_BOUND)   !ptrs to 1st implic seg in obj
	INTEGER  SLASTCOM(NUM_BOUND)    !ptrs to last implic seg in subj
	INTEGER  OLASTCOM(NUM_BOUND)    !ptrs to last implic seg in obj
	INTEGER  LASTNEST		!pointer to last nested poly
	INTEGER  MOTHER			! the mother polygon
C Arguments
	INTEGER*4	POLMAX
	INTEGER*4	TABMAX
	INTEGER*4	POLNEST_MAX
	INTEGER*4	PARTS_MAX
C
	INTEGER		NEST_START(POLMAX+1)
	INTEGER		POLNEST(2, POLNEST_MAX)
	REAL		POLY_AREA(POLMAX)
	INTEGER		POLY_PARTS(2,PARTS_MAX)
	REAL		POLY_OUTER(POLMAX)
	REAL		POLY_PERIM(POLMAX)
	REAL		POLY_RANGE(4,POLMAX)
	INTEGER		POLY_START(3,POLMAX)
	INTEGER*4	SEGTAB(2,TABMAX)
C
C Functions
	INTEGER  GET_POLY		!gets a polygon into hand
	INTEGER  GET_POLYGON		!almost the same as above
	INTEGER  UPDATE_SEGMENTS_COMPLEX	!
	REAL     AREA			!finds signed area of poly
	REAL	 LENGTH			!gets the length of the string
	INTEGER	 CHECK_ISOL   !checks if phantoms neigh is isolated
C
C Local Varaiables
	INTEGER I,J			!counter
	INTEGER SINDX,OINDX,OINDX2	!temporary array indices
	INTEGER SINDX3,OINDX3
	INTEGER OFFSET			! the difference between
C					! index of implicated
C					! segments in object and subject
C					! polygons 
	INTEGER PTR,SAVPTR		!pointers into POLY_PARTS 
	LOGICAL IN_SUBJECT		!in the subject poly?
	LOGICAL HAD_REAL		!had the real new poly yet?
	INTEGER POLY1,POLY2,POLY	!polygon indices
	INTEGER START(BOUND_MAX)        !
	LOGICAL ONODE(BOUND_MAX)	! boundary a single node neigh
	LOGICAL SNODE(BOUND_MAX)	! do on subject side 
	REAL	DIRECT			! stores the area
	INTEGER NBOUND			! boundary counters
	INTEGER POLY_NUM
	INTEGER NTIMES		        ! counts loops
	LOGICAL HAD_SNODE
	LOGICAL ISOLATED
C
	ACTUAL_COMPLEX_PHAN = %LOC(SS$_NORMAL)
	I =1
C
C find the link in the object poly common with the first in the subject
10	IF(SEGTAB(1,ABS(POLY_PARTS(1,OFIRSTCOM(I)))).NE.
     &	   SEGTAB(1,ABS(POLY_PARTS(1,SLASTCOM(1)))))
     &  THEN
	   I = I+1
	   GOTO 10
	ENDIF
C
C the offset allows us to calculate the corresponding object index given
C a subject index
	OFFSET = I
	IF (OFFSET .EQ. NUM_BOUND) OFFSET = 0
C
C  as a check make sure the last common seg of the implicated bit is the
C same as the first
	IF(SEGTAB(1,ABS(POLY_PARTS(1,OLASTCOM(I)))).NE.
     &	SEGTAB(1,ABS(POLY_PARTS(1,SFIRSTCOM(1)))))
     &	THEN
	   ACTUAL_COMPLEX_PHAN = PMERGE__INTRNLERR
	   CALL LSL_PUTMSG(ACTUAL_COMPLEX_PHAN,1,'ACTUAL_COMPLEX_PHAN')
	   GOTO 120
	ENDIF
C
C initialise logical arrays
	DO 20 I = 1,NUM_BOUND
	   SNODE(I) =.FALSE.
	   ONODE(I) =.FALSE.
20	CONTINUE
C
C form each of the merged polygons - NUM_BOUND of them
	  DO 30  I = 1,NUM_BOUND
	   OINDX = (NUM_BOUND-I)+1 +OFFSET
	   IF (OINDX .GT. NUM_BOUND) OINDX = OINDX-NUM_BOUND
	   OINDX2 = OINDX +1
	   IF (OINDX2 .GT. NUM_BOUND) OINDX2 = 1
	   SINDX = I+1
	   SINDX3 = I-1
	   IF (SINDX3 .EQ. 0) SINDX3 = NUM_BOUND
	   OINDX3 = OINDX -1 
	   IF (OINDX3 .EQ. 0) OINDX3 = NUM_BOUND
	   IF (SINDX .GT. NUM_BOUND) SINDX = 1
C
C redirect the pointer to form a new poly
	   POLY_PARTS(2,SPREV(I)) = ONEXT(OINDX) 	
	   IF (ONEXT(OINDX) .EQ. OFIRSTCOM(OINDX2)) THEN
C
C in this case we have a single node neighbour in the subject side
	      SNODE(SINDX3) = .TRUE.
	      POLY_PARTS(2,SPREV(I)) = 0
	   ENDIF
C
C must also check for the awkward ones when polies are joined
C by one node	
	   IF (SNEXT(I) .EQ. SFIRSTCOM(SINDX)) THEN
C
C in this case we have a single node neighbour in the object side
	      ONODE(OINDX3) = .TRUE.
	      POLY_PARTS(2,OPREV(OINDX)) = 0
	   ENDIF
30	CONTINUE
C 
C now go round the new polygons to check there are no zero pointers
C where there shouldn't be
C this bit of code is particularly liable to get into infinite loops
C if things go wrong - so collapse after a reasonable number of times
C 
	NBOUND = 1
	DO 90 I =1,NUM_BOUND
	   HAD_SNODE = .FALSE.
C
	   SINDX = I+1
	   IF (SINDX .GT. NUM_BOUND) SINDX = 1
	   OINDX = (NUM_BOUND-I)+1 +OFFSET
	   IF (OINDX .GT. NUM_BOUND) OINDX = OINDX-NUM_BOUND
	   OINDX2 = OINDX +1
	   IF (OINDX2 .GT. NUM_BOUND) OINDX2 = 1
C
	   NTIMES = 0
	   IF (SNODE(I) ) THEN
C
C single node neighbour on subject side
	      HAD_SNODE  = .TRUE.
	      START(NBOUND) = SNEXT(I)
	      PTR = START(NBOUND)
	      NBOUND =NBOUND +1
	      SAVPTR = PTR
40	      IF (PTR .EQ. SPREV(SINDX)) GOTO 45
	      IF (PTR .EQ. 0) THEN
		 PTR = ABS(POLY_START(1,SUBJ_INDEX))
	         POLY_PARTS(2,SAVPTR) = PTR
	      ENDIF
	      SAVPTR = PTR
	      PTR = POLY_PARTS(2,PTR)	      
	      NTIMES = NTIMES +1
	      IF (NTIMES .GE. (POLY_SEG_MAX*5)) THEN
	         ACTUAL_COMPLEX_PHAN = PMERGE__INTRNLERR
	         CALL LSL_PUTMSG(ACTUAL_COMPLEX_PHAN,2,'ACTUAL_COMPLEX_PHAN')
	         GOTO 120
	      ENDIF
	      GOTO 40
	   ENDIF
C
45	   NTIMES = 0
	   IF (ONODE(OINDX)) THEN
C
C single node neighbour on object side
	      START(NBOUND) = ONEXT(OINDX)
	      PTR = START(NBOUND)
	      NBOUND = NBOUND +1
	      SAVPTR = PTR
50	      IF (PTR .EQ. OPREV(OINDX2)) THEN 
	        POLY_PARTS(2,PTR) = 0
	        GOTO 60
	      ENDIF
	      IF (PTR .EQ. 0) THEN
		 PTR = ABS(POLY_START(1,OBJ_INDEX))
	         POLY_PARTS(2,SAVPTR) = PTR
	      ENDIF
	      SAVPTR = PTR
	      PTR = POLY_PARTS(2,PTR)	      
	      NTIMES = NTIMES+1
	      IF (NTIMES .GE. (POLY_SEG_MAX*5)) THEN
	         ACTUAL_COMPLEX_PHAN = PMERGE__INTRNLERR
	         CALL LSL_PUTMSG(ACTUAL_COMPLEX_PHAN,3,'ACTUAL_COMPLEX_PHAN')
	         GOTO 120
	      ENDIF
	      GOTO 50
	   ENDIF
C
C the normal case
60	   IF (HAD_SNODE ) GOTO 80
	   IN_SUBJECT = .TRUE.
	   DO 65 J =1,NUM_BOUND
	       IF (SNEXT(I) .EQ. SFIRSTCOM(J)) GOTO 90
	       IF (SNEXT(I) .EQ. SLASTCOM(J)) GOTO 90
65	   CONTINUE
	   START(NBOUND) = SNEXT(I)
	   PTR = START(NBOUND)
	   NBOUND = NBOUND +1
	   IF (PTR .EQ. SPREV(SINDX)) THEN
	      IN_SUBJECT = .FALSE.
	   ENDIF
	   NTIMES = 0
70	   SAVPTR = PTR
	   PTR = POLY_PARTS(2,PTR)
	   IF (PTR .EQ. 0) THEN
	      IF (IN_SUBJECT )THEN
	         PTR = ABS(POLY_START(1,SUBJ_INDEX))
	         POLY_PARTS(2,SAVPTR) = PTR
	      ELSE
	         PTR = ABS(POLY_START(1,OBJ_INDEX))
	         POLY_PARTS(2,SAVPTR) = PTR
	      ENDIF
	   ENDIF
	   IF (PTR .EQ. OPREV(OINDX)) GOTO 80
	   IF (PTR .EQ. SPREV(SINDX)) THEN
	      IN_SUBJECT = .FALSE.
	   ENDIF
	   NTIMES = NTIMES +1
	   IF (NTIMES .GE. (POLY_SEG_MAX*5)) THEN
	      ACTUAL_COMPLEX_PHAN = PMERGE__INTRNLERR
	      CALL LSL_PUTMSG(ACTUAL_COMPLEX_PHAN,4,'ACTUAL_COMPLEX_PHAN')
	      GOTO 120
	   ENDIF
	   GOTO 70
80	POLY_PARTS(2,PTR) = 0
90	CONTINUE
	NBOUND = NBOUND-1
C
C more nested polygons are bound to result 
	IF (LASTNEST .GT. 0 )THEN
	   POLNEST(2,LASTNEST) = NUM_NEST+1
	ELSE
	   NEST_START(MOTHER) = NUM_NEST+1
	ENDIF
C
C now update various things
	DO 100 I = 1,NBOUND
	   POLY_PTS = 0
	   ACTUAL_COMPLEX_PHAN = GET_POLYGON(START(I))
	   IF (.NOT. ACTUAL_COMPLEX_PHAN) GOTO 120
	   DIRECT = AREA()
C
C all polygons should be phantoms
	   IF (DIRECT .GT. 0) THEN
	      ACTUAL_COMPLEX_PHAN = PMERGE__INTRNLERR
	      CALL LSL_PUTMSG(ACTUAL_COMPLEX_PHAN,5,'ACTUAL_COMPLEX_PHAN')
	      GOTO 120
	   ENDIF
	   IF (I .EQ. 1) THEN
	      POLY_START(1,SUBJ_INDEX) = -START(I)
	      POLY_AREA(SUBJ_INDEX) =ABS(DIRECT)
	      POLY_NUM = SUBJ_INDEX
	   ELSE
	      IF (NUM_POLY+1.GT.POLMAX) THEN
	         ACTUAL_COMPLEX_PHAN=POLY__TOOMNYPOL
	         CALL LSL_PUTMSG(ACTUAL_COMPLEX_PHAN,POLMAX)
	         GOTO 120
	      ENDIF
	      NUM_POLY = NUM_POLY+1
	      POLY_NUM = NUM_POLY
	      POLY_AREA(NUM_POLY) =ABS(DIRECT)
	      POLY_START(1,NUM_POLY) = -START(I)
	      IF (NUM_NEST+1.GT.POLNEST_MAX) THEN
	         ACTUAL_COMPLEX_PHAN=  POLY__TOOMNYNEST
	         CALL LSL_PUTMSG(ACTUAL_COMPLEX_PHAN,POLNEST_MAX)
	         GOTO 120
	      ENDIF
	      NUM_NEST = NUM_NEST+1
	      POLNEST(2,NUM_NEST) =  NUM_NEST+1
	      POLNEST(1,NUM_NEST) = POLY_NUM
	   ENDIF
C	   
C update range for new poly
	   CALL CALC_RANGE
     &	   (POLY_BUF,POLY_PTS,POLY_RANGE(1,POLY_NUM),.TRUE.)
C
C update lr_segments for the new polies
	   ACTUAL_COMPLEX_PHAN=UPDATE_SEGMENTS_COMPLEX
     &	   (POLY_NUM,SUBJ_INDEX,OBJ_INDEX)
	   IF (.NOT. ACTUAL_COMPLEX_PHAN) GOTO 120
C
C and perimeter
	   POLY_PERIM(POLY_NUM) = LENGTH(POLY_PTS,POLY_BUF)
	   POLY_OUTER(POLY_NUM) = POLY_PERIM(POLY_NUM)
C
C and the mother poly
	   POLY_START(3,POLY_NUM) = MOTHER
C
C determine whether new phantom's neighbour is to be flagged 
Cas isolated
C
	   ACTUAL_COMPLEX_PHAN = CHECK_ISOL(POLY_NUM,POLY,ISOLATED) 
	   IF (.NOT. ACTUAL_COMPLEX_PHAN) GOTO 120
	   IF (ISOLATED) THEN
	      CALL ISOL_POLY(POLY)
	   ENDIF
C
100	CONTINUE
C
	POLNEST(2,NUM_NEST) = 0	
	LASTNEST = NUM_NEST
C
120	RETURN
	END
