C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-05-18 18:40:22.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C
C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	LOGICAL FUNCTION FIND_LARGEST(OUT_INDEX,REAL_NEIGH)
C
***	MODULE	FIND_LARGEST
***	IDENT	12MY92
C
	IMPLICIT NONE
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
	LOGICAL	ACTUAL_FIND_LARGEST
C
C arguments
	INTEGER		OUT_INDEX	! the index of the largest POLYGON
	INTEGER         REAL_NEIGH
C
C	........................................................................
C
	FIND_LARGEST = ACTUAL_FIND_LARGEST(OUT_INDEX,REAL_NEIGH,
     &			POLMAX,TABMAX,POLNEST_MAX, PARTS_MAX,
     &			%VAL(PTR$_POLY_AREA)
     &		  )
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	LOGICAL FUNCTION ACTUAL_FIND_LARGEST(OUT_INDEX,REAL_NEIGH,
     &		POLMAX,TABMAX,POLNEST_MAX,PARTS_MAX,
     &		POLY_AREA
     &	)
C

***	MODULE	ACTUAL_FIND_LARGEST
***	IDENT	10OC87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    29-Jun-1987
C
C looks at all the polygons in NEIGH_BUF and finds the one with the 
C largest area
C
	IMPLICIT NONE
C
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNPOLMERGE:POLMERGEMSG.PAR'
C
C Common:
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'LSL$CMNPOLMERGE:MERGE.CMN'
	INCLUDE		'LSL$CMNPOLMERGE:COMMAND.CMN'
C 
C arguments
	INTEGER		OUT_INDEX	! the index of the largest POLYGON
	INTEGER         REAL_NEIGH
C
C Arguments
	INTEGER*4	POLMAX
	INTEGER*4	TABMAX
	INTEGER*4	POLNEST_MAX
	INTEGER*4	PARTS_MAX
C
	REAL		POLY_AREA(POLMAX)
C
C Local Varaiables
	REAL		BIG		! stores area
	INTEGER		I		! counter
	INTEGER		INDEX
C
C Assume success
	ACTUAL_FIND_LARGEST =.TRUE.
	BIG = 0.0
	INDEX = 0
	DO 10 I = 1,NUM_NEIGH
	   IF (POLY_AREA(ABS(NEIGH_BUF(1,I))) .GT. BIG) THEN
C
C don't count bounding polygon
	      IF (NEIGH_BUF(1,I).EQ. BOUND_POL) THEN
	          IF (HAD_BOUNDING) THEN
	             ACTUAL_FIND_LARGEST = .FALSE.
	             GOTO 999
	          ENDIF
	          GOTO 10
	      ENDIF
C	      
	      BIG = POLY_AREA(ABS(NEIGH_BUF(1,I)))
	      INDEX = NEIGH_BUF(1,I)
	      REAL_NEIGH = NEIGH_BUF(2,I)
	   ENDIF
10	CONTINUE
	OUT_INDEX = INDEX	
	IF (INDEX .EQ. 0) ACTUAL_FIND_LARGEST = .FALSE.
C
999	RETURN
	END
