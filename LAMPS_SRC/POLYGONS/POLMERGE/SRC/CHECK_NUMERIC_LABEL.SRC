C
C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	INTEGER*4 FUNCTION CHECK_NUMERIC_LABEL(POL_INDEX,LABEL_VALUE)
C
***	MODULE	CHECK_NUMERIC_LABEL
***	IDENT	12MY92
C
	IMPLICIT NONE
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C Arguments
	INTEGER*4	POL_INDEX	!polygon to test
	REAL		LABEL_VALUE	!decoded polygon label value
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
	INTEGER*4	ACTUAL_CHECK_NUMERIC_LABEL
C
C	........................................................................
C
	CHECK_NUMERIC_LABEL = ACTUAL_CHECK_NUMERIC_LABEL(POL_INDEX,LABEL_VALUE,
     &			POLMAX,TABMAX,POLNEST_MAX, PARTS_MAX,
     &			%VAL(PTR$_POLY_START)
     &		  )
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	INTEGER*4 FUNCTION ACTUAL_CHECK_NUMERIC_LABEL (POL_INDEX,LABEL_VALUE,
     &		POLMAX,TABMAX,POLNEST_MAX,PARTS_MAX,
     &		POLY_START
     &	)
C
***	MODULE	ACTUAL_CHECK_NUMERIC_LABEL
***	IDENT	11SE87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author D R CATLOW
C
C Created					DRC    26-Aug-1987
C
C Function:
C Retrieves the AC text label for POL_INDEX, and tests whether
C it consists of a SINGLE numeric value.
C The function returns FALSE (failure) if the AC contains any non-
C numeric character with the exception of . + - , or if the
C string consists of mutiple numeric values deliminated by spaces.
C Eg. 10 104 is considered invalid.  Leading and trailing spaces
C are ignored.
C
C The numeric value is decoded and placed in LABEL_VALUE as a
C floating point number, and the function is set to TRUE if
C successful.
C 
	IMPLICIT NONE
C
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
C
C Common:
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
C 
C Arguments
	INTEGER*4	POL_INDEX	!polygon to test
	REAL		LABEL_VALUE	!decoded polygon label value
C
	INTEGER*4	POLMAX
	INTEGER*4	TABMAX
	INTEGER*4	POLNEST_MAX
	INTEGER*4	PARTS_MAX
C
	INTEGER		POLY_START(3,POLMAX)

C W/S
	REAL		TEMP_VALUE	!decoded real value
	INTEGER*4	IERR		!function return
	INTEGER*4	SEGPTR		!segment pointer
	INTEGER*4	STRLEN		!number of chs. in STRBUF
	BYTE		STRBUF(255)	!buffer to hold AC label
	BYTE		CH		!single character
C
C Functions
	INTEGER*4	GET_ACTXT	!gets label of this polygon
	LOGICAL		RDCHS		!to read single character in
C					!STRBUF
	LOGICAL		RDREAL		!to read real value from STRBUF
C-----------------------------------------------------------------------
C
C	Assume an invalid polygon label
	ACTUAL_CHECK_NUMERIC_LABEL=.FALSE.
C
C	Get segment pointer
	SEGPTR=IABS(POLY_START(1,POL_INDEX))
C
C	Use GET_ACTEXT to retrieve the label for this polygon
	IERR = GET_ACTXT(SEGPTR,POL_INDEX,.TRUE.,STRBUF,STRLEN,.FALSE.)
C
	LABEL_VALUE=0.0
C
	CALL SETAUX(STRBUF,STRLEN)	!decode from STRBUF
C
C	Use RDREAL to read a number
	IF(RDREAL(TEMP_VALUE))GOTO 999	!error in reading value
C
C	Check for anything else in the buffer, in which case
C	we signal an error.
	IF(RDCHS(CH))THEN		!no more characters
	  LABEL_VALUE=TEMP_VALUE
	  ACTUAL_CHECK_NUMERIC_LABEL=.TRUE.
	ENDIF
C
999	RETURN
C
	END
