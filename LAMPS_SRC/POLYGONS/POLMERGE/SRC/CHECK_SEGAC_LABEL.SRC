C
C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	LOGICAL*4 FUNCTION CHECK_SEGAC_LABEL(
     &		POLY_INDX,TEXT,LENGTH,OLD_TEXT,OLD_LENGTH,UNDEF,FIRST_SEG)
C
***	MODULE	CHECK_SEGAC_LABEL
***	IDENT	12MY92
C
	IMPLICIT NONE
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
C Arguments:
	INTEGER		POLY_INDX	! the polygon in question
	CHARACTER*(*)	TEXT		! the polygon label
	INTEGER*2	LENGTH		! the length of TEXT
	CHARACTER*(*)	OLD_TEXT	! the previous segment label 
	INTEGER*2 	OLD_LENGTH	! prev. segment label length 
	LOGICAL		UNDEF		! .T. if undefined polygon
	LOGICAL	  	FIRST_SEG	! reading first seg. in polygon?
C
	LOGICAL*4	ACTUAL_CHECK_SEGAC_LABEL
C
C	........................................................................
C
	CHECK_SEGAC_LABEL = ACTUAL_CHECK_SEGAC_LABEL(
     &		POLY_INDX,TEXT,LENGTH,OLD_TEXT,OLD_LENGTH,UNDEF,FIRST_SEG,
     &			POLMAX,TABMAX,POLNEST_MAX, PARTS_MAX,
     &			%VAL(PTR$_POLY_PARTS),
     &			%VAL(PTR$_POLY_START),
     &			%VAL(PTR$_SEGTAB),
     &			%VAL(PTR$_STTAB)
     &		  )
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	LOGICAL*4 FUNCTION ACTUAL_CHECK_SEGAC_LABEL(
     &		POLY_INDX,TEXT,LENGTH,OLD_TEXT,OLD_LENGTH,UNDEF,FIRST_SEG,
     &		POLMAX,TABMAX,POLNEST_MAX,PARTS_MAX,
     &		POLY_PARTS,
     &		POLY_START,
     &		SEGTAB,
     &		STTAB
     &	)
C

***	MODULE	ACTUAL_CHECK_SEGAC_LABEL
***	IDENT	30OC91
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Author						TJH  26-Aug-1987
C       Stolen for POLMERGE				MWSR 23-Sep-1987
C
C All the segments forming the polygon are found and
C the appropriate left (type 4) or right (type 5) AC is read. All 
C the ACs are read (including nests) to perform a consistency check.
C The user is warned if the polygon has comflicting segment texts
C and ACTUAL_CHECK_SEGAC_LABEL returns UNDEF as true. This will cause omission
C of the polygon from the output file.
C
C Function returns SS$_NORMAL if all is well or one of a variety of
C IPOLYGON error codes on failure.
C
C ......................................................................
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNPOLMERGE:POLMERGEMSG.PAR'
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
C
C Arguments:
	INTEGER		POLY_INDX	! the polygon in question
	CHARACTER*(*)	TEXT		! the polygon label
	INTEGER*2	LENGTH		! the length of TEXT
	CHARACTER*(*)	OLD_TEXT	! the previous segment label 
	INTEGER*2 	OLD_LENGTH	! prev. segment label length 
	LOGICAL		UNDEF		! .T. if undefined polygon
	LOGICAL	  	FIRST_SEG	! reading first seg. in polygon?
C
	INTEGER*4	POLMAX
	INTEGER*4	TABMAX
	INTEGER*4	POLNEST_MAX
	INTEGER*4	PARTS_MAX
C
	INTEGER		POLY_PARTS(2,PARTS_MAX)
	INTEGER		POLY_START(3,POLMAX)
	INTEGER*4	SEGTAB(2,TABMAX)
	INTEGER*4	STTAB(2,TABMAX)
C
C Common:
	INCLUDE		'LSL$CMNPOLMERGE:COMMAND.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:FILE.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:TABLES.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:SECTOR.CMN'
	INCLUDE		'LSL$CMNLSL:TXTC.CMN'
C
C W/s
	INTEGER*2 ACTYPE	! type of AC 
	INTEGER   FSN,IFSN	! feature serial number, internal no.
	INTEGER*2 IECODE,IELEN	! IFF entry code and length
	LOGICAL	  HADAC4,HADAC5	! had type 4 and type 5 AC respectively?
	INTEGER   I		! temp. vars.
	INTEGER*2 IENDS		! line state (coded bitwise)
	INTEGER	  IREV		! if -ve then reverse segment
	CHARACTER*256 MESTXT	! error message text
	INTEGER*2 MESLEN	! its length
	INTEGER*2 NPTS		! number of coord pairs to be read
	INTEGER   SEGPTR	! pointer into SEGTAB
	INTEGER   SEGSTOP	! pointer into SEGTAB
C
C Functions:
	INTEGER	  EXPAND
	INTEGER	  STR$COMPARE_EQL
C
C ......................................................................
C
	ACTUAL_CHECK_SEGAC_LABEL=%LOC(SS$_NORMAL)
C
C Define the start index into POLY_PARTS
	SEGPTR=IABS(POLY_START(1,POLY_INDX))
C
C Store sign of segment pointer. If negative we will have to
C reverse this segment for contiguous polygon boundary formation
	CALL IFFSEL(INLUN)
10	IREV=ISIGN(1,POLY_PARTS(1,SEGPTR))
C
C Jump to first segment of the polygon (IFF address stored
C in /TABLES/SEGTAB)
	CALL IFFPKE(IECODE,IELEN,
     &				SEGTAB(2,ABS(POLY_PARTS(1,SEGPTR))))
	IF (IELEN.LE.-1) GOTO 30	! eof?
	IF (IECODE.NE.'NF') THEN
	   ACTUAL_CHECK_SEGAC_LABEL=PMERGE__LOST
	   CALL LSL_PUTMSG(ACTUAL_CHECK_SEGAC_LABEL,IECODE)
	   GOTO 40
	ENDIF
	HADAC4=.FALSE.
	HADAC5=.FALSE.
	CALL EIHRI(FSN,1,1)
	CALL EIHRI(IFSN,1,1)
20	CALL IFFNXT(IECODE,IELEN)
	IF (IELEN.LE.-1) GOTO 30	! eof?
	IF (IECODE.NE.'EF'.AND.IECODE.NE.'AC') GOTO 20
	IF (IECODE.EQ.'EF') GOTO 40
C
C AC found - read type and act depending on the direction of polygon
C formation and direction of this segment. The rules are:
C
C 	Polygon formed clockwise:
C		 Use type 5 AC if segment used forwards (IREV = 1)
C		 Use type 4 AC if segment used backwards (IREV = -1)
C 	Polygon formed anticlockwise:
C		 Use type 4 AC if segment used forwards (IREV = 1)
C		 Use type 5 AC if segment used backwards (IREV = -1)
C
	CALL EIHRI(ACTYPE,1,1)			! read AC type
	IF (ACTYPE.EQ.4) THEN
	   IF (HADAC4) GOTO 20			! use only 1st AC 4
	   HADAC4=.TRUE.
	ENDIF
	IF (ACTYPE.EQ.5) THEN
	   IF (HADAC5) GOTO 20			! use only 1st AC 5
	   HADAC5=.TRUE.
	ENDIF
	IF (CLOCK) THEN				! clockwise polygon
	   IF (ACTYPE.EQ.5.AND.IREV.EQ.1	! read this AC?
     &			.OR.
     &	       ACTYPE.EQ.4.AND.IREV.EQ.-1) THEN
	      CALL READ_AC_TEXT(TEXT,LENGTH,IELEN)
	   ELSE
	      GOTO 20				! unwanted AC
	   ENDIF	   
	ELSE					! anticlockwise poly
	   IF (ACTYPE.EQ.4.AND.IREV.EQ.1	! read this AC?
     &			.OR.
     &	       ACTYPE.EQ.5.AND.IREV.EQ.-1) THEN
	      CALL READ_AC_TEXT(TEXT,LENGTH,IELEN)
	   ELSE
	      GOTO 20				! unwanted AC
	   ENDIF	   
	ENDIF
C
C When we get here we have a polygon label read from the AC text field.
C If first segment for polygon simply get next segment. Otherwise we
C must test that the ACs are consistent for this polygon.
	IF (FIRST_SEG) THEN
	   FIRST_SEG=.FALSE.
	ELSE
	   I=STR$COMPARE_EQL(TEXT(:LENGTH),OLD_TEXT(:OLD_LENGTH))
	   IF (I.EQ.1) THEN
	      CALL LSL_PUTMSG(PMERGE__ACINCON,FSN,IFSN)
	      CALL LSL_ADDSTR('Current segment: '//TEXT(:LENGTH))
	      CALL LSL_ADDSTR(
     &			    'Previous segment: '//OLD_TEXT(:OLD_LENGTH))
	      IF (HAD_LITES) THEN
	         CALL FLWSEL(LITESLUN)
	         CALL FLWRTF('%%MESSAGE Polygon labelling error:')
	      ENDIF
	      MESLEN=EXPAND('%WSPolygon labels in AC texts '//
     &			'inconsistent in feature with '//
     &		 	'FSN %N - polygon abandoned',MESTXT,FSN)
	      CALL IFFPKE(IECODE,IELEN,STTAB(1,
     &					IABS(POLY_PARTS(1,SEGPTR))))
	      IF (IELEN.LT.0) THEN
	         ACTUAL_CHECK_SEGAC_LABEL=PMERGE__LOST
	         CALL LSL_PUTMSG(ACTUAL_CHECK_SEGAC_LABEL)
	         GOTO 40
	      ENDIF
	      CALL EIHRS(NPTS,IENDS)
	      CALL EIHRR(POLY_BUF(1,1),2,1)
	      CALL MES_OUT(POLY_BUF(1,1),MESTXT,MESLEN)
C Don't try to get any more segments for this polygon.
	      CALL DUFF_POLY(POLY_INDX,I)
	      TEXT='Undefined polygon'
	      LENGTH=17
	      UNDEF=.TRUE.
	      GOTO 40
	   ENDIF
	ENDIF
	OLD_TEXT=TEXT	   			! remember text
	OLD_LENGTH=LENGTH			! and length
C
C Have we finished the polygon? If not get next segment forming the
C polygon and add its coordinates into POLY_BUF
	IF (POLY_PARTS(2,SEGPTR).EQ.0) GOTO 40	! return
	SEGPTR=POLY_PARTS(2,SEGPTR)
	GOTO 10
C
C ......................................................................
C
C Unexpected end of file
30	ACTUAL_CHECK_SEGAC_LABEL=PMERGE__UNEXPEOF
	CALL LSL_PUTMSG(ACTUAL_CHECK_SEGAC_LABEL,IN_FILE(:IN_LEN))
C
C ......................................................................
C
40	RETURN
	END
