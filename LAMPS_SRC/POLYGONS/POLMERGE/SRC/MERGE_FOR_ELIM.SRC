C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-05-18 18:47:10.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C
C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	INTEGER*4 FUNCTION MERGE_FOR_ELIM(POLY_INDX,LASTNEST)
C
***	MODULE	MERGE_FOR_ELIM
***	IDENT	12MY92
C
	IMPLICIT NONE
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
C Argument
	INTEGER    	POLY_INDX    	! index of poly to merge
	INTEGER 	LASTNEST        ! pointer to last nested poly
C
	INTEGER*4	ACTUAL_MERGE_FOR_ELIM
C
C	........................................................................
C
	MERGE_FOR_ELIM = ACTUAL_MERGE_FOR_ELIM(POLY_INDX,LASTNEST,
     &			POLMAX,TABMAX,POLNEST_MAX, PARTS_MAX,
     &			%VAL(PTR$_POLY_START)
     &		  )
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	INTEGER*4 FUNCTION ACTUAL_MERGE_FOR_ELIM(POLY_INDX,LASTNEST,
     &		POLMAX,TABMAX,POLNEST_MAX,PARTS_MAX,
     &		POLY_START
     &	)
C

***	MODULE	ACTUAL_MERGE_FOR_ELIM
***	IDENT	14OC87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    03-Oct-1987
C
C routine to deal with polygon merging made necessary after an 
C elimination has taken place.
C the relevant neighbours are already in NEIGH_BUF
C 
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNPOLMERGE:POLMERGEMSG.PAR'
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
C
C Argument
	INTEGER    	POLY_INDX    	! index of poly to merge
	INTEGER 	LASTNEST        ! pointer to last nested poly
C
	INTEGER*4	POLMAX
	INTEGER*4	TABMAX
	INTEGER*4	POLNEST_MAX
	INTEGER*4	PARTS_MAX
C
	INTEGER		POLY_START(3,POLMAX)
C
C Common:
	INCLUDE		'LSL$CMNPOLMERGE:COMMAND.CMN'
	INCLUDE		'LSL$CMNPOLMERGE:MERGE.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
C
C Functions
	INTEGER*4  	 MERGE	     	!attempt to merge poly
	INTEGER*4       FIND_OTHERS     ! finds extra polygon ACTUAL_MERGE_FOR_ELIM
	INTEGER*4       GET_ACTXT       ! gets poly code
C
C Local Varaiables
	INTEGER	EXTRAS(POLY_SEG_MAX) ! pointers into neigh_buf of extra
C				    ! polygons to be merged
	INTEGER	NUM_EXTRA	    ! number of extra polies to merge
	INTEGER I
C
	ACTUAL_MERGE_FOR_ELIM = %LOC(SS$_NORMAL)
C
C find those neighbours with the same code as the selected one
	IF (NUM_NEIGH .GT. 1) THEN
	   ACTUAL_MERGE_FOR_ELIM = FIND_OTHERS(POLY_INDX,EXTRAS,NUM_EXTRA)
	   IF(.NOT.ACTUAL_MERGE_FOR_ELIM)GOTO 999
        ENDIF
C
C merge into the neighs with the same code
	IF (NUM_NEIGH .GT. 1) THEN
	   DO 20 I = 1,NUM_EXTRA
C
C check the neighbour hasn't been zapped in a previous merge
              IF(POLY_START(1,ABS(NEIGH_BUF(1,EXTRAS(I)))).EQ.0)GOTO 20
	      IF (NEIGH_BUF(2,EXTRAS(I)) .NE. 0) THEN
               IF(POLY_START(1,ABS(NEIGH_BUF(2,EXTRAS(I)))).EQ.0)GOTO 20
	      ENDIF
	      ACTUAL_MERGE_FOR_ELIM = MERGE
     &	      (POLY_INDX,NEIGH_BUF(1,EXTRAS(I)),NEIGH_BUF(2,EXTRAS(I)),
     &	      LASTNEST)
	      IF(.NOT.ACTUAL_MERGE_FOR_ELIM)GOTO 999
20	   CONTINUE
	ENDIF   	   
C
999	RETURN
	END
