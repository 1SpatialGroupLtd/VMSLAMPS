C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-05-18 19:33:54.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C
C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	INTEGER*4	FUNCTION AMALGAMATE()
C
***	MODULE	AMALGAMATE
***	IDENT	12MY92
C
	IMPLICIT NONE
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
	INTEGER*4	ACTUAL_AMALGAMATE
C
C	........................................................................
C
	AMALGAMATE = ACTUAL_AMALGAMATE(
     &			POLMAX,TABMAX,POLNEST_MAX, PARTS_MAX,
     &			%VAL(PTR$_DUFF_POLYGON),
     &			%VAL(PTR$_ISOL_POLYGON),
     &			%VAL(PTR$_POLY_AREA),
     &			%VAL(PTR$_POLY_PERIM),
     &			%VAL(PTR$_POLY_START)
     &		  )
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	INTEGER*4 FUNCTION ACTUAL_AMALGAMATE(
     &		POLMAX,TABMAX,POLNEST_MAX,PARTS_MAX,
     &		DUFF_POLYGON,
     &		ISOL_POLYGON,
     &		POLY_AREA,
     &		POLY_PERIM,
     &		POLY_START
     &	)
C
***	MODULE	ACTUAL_AMALGAMATE
***	IDENT	26OC87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    26-Jun-1987
C
C deals with each polygon in turn and passes to MERGE or ELIMINATE
C depending on whether its an isolated polygon or not
C returns SS$_NORMAL if all is well
C
C Call to TEST_PRIMARY_POLY_LABEL added if MER_BY_LOOKUP has been specified.
C DRC 12-Aug-87
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNPOLMERGE:POLMERGEMSG.PAR'
	INCLUDE		'($STSDEF)'
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
C
C Common:
	INCLUDE		'LSL$CMNPOLMERGE:COMMAND.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:FILE.CMN'
	INCLUDE		'LSL$CMNPOLMERGE:POLMERGE_LOOKUP.CMN'
C
C Arguments
	INTEGER*4	POLMAX
	INTEGER*4	TABMAX
	INTEGER*4	POLNEST_MAX
	INTEGER*4	PARTS_MAX
C
	INTEGER		DUFF_POLYGON((POLMAX+31)/32)
	INTEGER		ISOL_POLYGON((POLMAX+31)/32)
	REAL		POLY_AREA(POLMAX)
	REAL		POLY_PERIM(POLMAX)
	INTEGER		POLY_START(3,POLMAX)
C
C Functions
	INTEGER*4	NEIGHBOURS	!attempt to merge poly
C					! (calls MERGE)
	INTEGER*4	ELIMINATE	!eliminate isolated poly
	LOGICAL	  	EXT1V		! extract 1-bit field
	INTEGER*4	TEST_PRIMARY_POLY_LABEL	!to test if the polygon
C					!label is in the lookup table
C
C Local Varaiables
	INTEGER*4	POLY_INDX	!current poly
	INTEGER*4	NUM_MERGE	!number of merged polys
	INTEGER*4	NUM_FOR_MERGE	!number of polygons
C					!considered for merging
	REAL		RATIO		!ratio
C
	ACTUAL_AMALGAMATE =%LOC(SS$_NORMAL)
C
C do we want to be here
	IF (.NOT. HAD_MERGE) GOTO 60
C
	CALL FRAMED_MES(13)
	NUM_FOR_MERGE=0
	NUM_MERGE=0
	IF (HAD_LOG) THEN
	   IF (HAD_AMT) THEN
	   CALL EXPAND 
     &	  ('Area Tolerance ........................................ %F',
     &	   AREA_MER_TOL)
	      IF (HAD_LIS) THEN
	         CALL FLWLIN
	      ELSE
	         CALL TTWLIN
	      ENDIF
  	   ENDIF
	   IF (HAD_RMT) THEN
	   CALL EXPAND 
     &    ('Ratio Tolerance ....................................... %F',
     &	   RATIO_MER_TOL)
	      IF (HAD_LIS) THEN
	         CALL FLWLIN
	      ELSE
	         CALL TTWLIN
	      ENDIF
	   ENDIF
	   IF (HAD_RATIOAREA) THEN
	   CALL EXPAND 
     &    ('Ratio Area Tolerance .................................. %F',
     &	   RATIO_AREA_TOL)
	      IF (HAD_LIS) THEN
	         CALL FLWLIN
	      ELSE
	         CALL TTWLIN
	      ENDIF
	   ENDIF
	   IF (HAD_LOOKUP) THEN
	   CALL EXPAND 
     &	 		('Lookup File ......... %S',LOOKUP_FILE(:LOOKUP_LEN))
	      IF (HAD_LIS) THEN
	         CALL FLWLIN
	      ELSE
	         CALL TTWLIN
	      ENDIF
           ENDIF
	ENDIF
C
C ......................................................................
C    L O O P    F O R    E  A C H    P O L Y G O N   I N    T U R N
C
	DO 50 POLY_INDX=1,NUM_POLY
C
C Ensure that this is not a duff polygon
	   IF (EXT1V(POLY_INDX,DUFF_POLYGON(1))) GOTO 50
C
C Is this an unwanted polygon?  If so ignore it.
	   IF (POLY_START(1,POLY_INDX).LE.0) GOTO 50
C
C Avoid bounding polygon
	   IF (POLY_INDX.EQ.BOUND_POL) GOTO 50
C
10	   IF (.NOT.(EXT1V(POLY_INDX,ISOL_POLYGON(1))))  THEN
C
C its not isolated
C
C
C its a candidate for merging
C If /LOOKUP then test if it the polygon is specified in the
C the primary polygon list
	      IF (HAD_LOOKUP)THEN
	         PRIMARY_LABEL_INDEX=TEST_PRIMARY_POLY_LABEL(POLY_INDX) 
	         IF(PRIMARY_LABEL_INDEX.EQ.0)GOTO 50
	         IF(.NOT. (HAD_RMT .OR. HAD_AMT)) GOTO 40
	      ENDIF
C
C had /RATIO = (MERGE_TOL)
	      IF (HAD_RMT) THEN
	         RATIO=POLY_PERIM(POLY_INDX)/SQRT(POLY_AREA(POLY_INDX))
	         IF (RATIO_LARGE) THEN
C
C get rid rid of long thinnies
	            IF (RATIO .GE. RATIO_MER_TOL) THEN
		        IF (HAD_RATIOAREA) THEN
C
C only merge if the area is less than the area tolerance specified
C with /ratio = (areatol)
		           IF (POLY_AREA(POLY_INDX).LT. RATIO_AREA_TOL)
     &			   THEN
			      GOTO 40	!merge
			   ENDIF
		        ELSE
	                   GOTO 40	!merge regardless of area
			ENDIF
	            ENDIF
		 ELSE
C
C get rid of fatties
	            IF (RATIO .LT. RATIO_MER_TOL) THEN
		        IF (HAD_RATIOAREA) THEN
		           IF (POLY_AREA(POLY_INDX).LT. RATIO_AREA_TOL)
     &			   THEN
			      GOTO 40	!merge
			   ENDIF
		        ELSE
	                   GOTO 40	!merge regardless of area
			ENDIF
	            ENDIF
	         ENDIF
	      ENDIF
	 
	      IF (HAD_AMT)THEN
C
C if smaller than area tolerance merge
	         IF (POLY_AREA(POLY_INDX) .LE. AREA_MER_TOL) GOTO 40
	      ELSE
	         GOTO 40
	      ENDIF
C
C if we've got thus far don't merge
              GOTO 50
40	      NUM_FOR_MERGE = NUM_FOR_MERGE+1
	      ACTUAL_AMALGAMATE = NEIGHBOURS(POLY_INDX)
     	      IF ((IBITS(ACTUAL_AMALGAMATE,0,3).EQ.STS$K_ERROR).OR.
     &         (IBITS(ACTUAL_AMALGAMATE,0,3).EQ.STS$K_SEVERE)) GOTO 60
              IF (.NOT. ACTUAL_AMALGAMATE) GOTO 50
	      NUM_MERGE = NUM_MERGE+1
	      GOTO 10 !check polygon again
	   ENDIF
C
50      CONTINUE
C ......................................................................
C
C Tell user what has been done?
	IF (HAD_LOG) THEN
	   CALL EXPAND(
     &	    'Number of polygons considered for merging ......... %N',
     &							  NUM_FOR_MERGE)
	   IF (HAD_LIS) THEN
	      CALL FLWLIN
	   ELSE
	      CALL TTWLIN
	   ENDIF
	   CALL EXPAND(
     &	    'Number of polygons merged ......................... %N',
     &							      NUM_MERGE)
	   IF (HAD_LIS) THEN
	      CALL FLWLIN
	   ELSE
	      CALL TTWLIN
	   ENDIF
	ENDIF
C
C	Reset condition state
	ACTUAL_AMALGAMATE =%LOC(SS$_NORMAL)
C
60	RETURN
	END
