C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-09-30 17:50:00.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION FLUSH_OUT(MAXARMF,MAXARML,
     &	                 START_POS)
C
***	MODULE	FLUSH_OUT
***	IDENT	30SE87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    02-Jul-1987
C
C Comments
C
	IMPLICIT NONE
C
C outputs the JPs and STs of a feature with coordinates held in 
C POLY_BUF
C
C arguments
	INTEGER*2	MAXARMF         !max no of arms in 1st junc
	INTEGER*2       MAXARML		!max no of arms in last junc
	INTEGER*4	START_POS       !index of first point in POLY_BUF
C
C Common Blocks
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:FILE.CMN'
	INCLUDE         'LSL$CMNPOLYGONS:HIT.CMN'
	INCLUDE         'LSL$CMNPOLMERGE:IFJ.CMN'
	INCLUDE         'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE         'LSL$CMNIFF:IFFJUN.CMN'
C
C Functions
	LOGICAL         FLUSH_LINE	
C
C Local Varaiables
	REAL		JCPOSF(2)	!coords of first junction
	REAL         	JCPOSL(2)	!coords of last junction
	INTEGER		STPOS1,STPOS2	!positions of first and last STs
	INTEGER		PTNO            !vertex number of last point
	INTEGER*2       IECODE,IELEN
	INTEGER*4 	JPPOSF,JPPOSL	! pos of 1st,last JP in feature
C					! i/p file
C
	FLUSH_OUT = .FALSE.
C
C output the first JP
	CALL IFFSEL(OUTLUN)
	JPPOSF = LPOSE
	CALL IFFJP(HTPOSH,HTPOSJ)
C
C output the string
        STPOS1 = LPOSE
C 
	IF (.NOT. (FLUSH_LINE(STPOS2,PTNO,START_POS)))GOTO 999
C
C output the second JP
	JPPOSL = LPOSE
	CALL IFFJP (HTPOSH,HTPOSJ)
C
C  the EF
	CALL IFFEF
C
C add the two nodes to the file
C      
	JCPOSF(1) = POLY_BUF(1,START_POS)
	JCPOSF(2) = POLY_BUF(2,START_POS)
C
	CALL ADDNOD(JCPOSF(1),JCPOSF(2),STPOS1,1,MAXARMF)
C
C enter position of junction into jp entry
C
	CALL IFFPKE(IECODE,IELEN,JPPOSF)
	IF (IECODE.NE.'JP') GO TO 999
	CALL EIHWI(HTPOSH,2,1)
	CALL EIHWI(HTPOSJ,1,3)
C
C Repeat for the 2nd end point.
	JCPOSL(1) = POLY_BUF(1,START_POS+POLY_PTS-1)
	JCPOSL(2) = POLY_BUF(2,START_POS+POLY_PTS-1)
	CALL ADDNOD(JCPOSL(1),JCPOSL(2),STPOS2,PTNO,MAXARML)
	CALL IFFPKE(IECODE,IELEN,JPPOSL)
	IF (IECODE.NE.'JP')GOTO 999
	CALL EIHWI(HTPOSH,2,1)
	CALL EIHWI(HTPOSJ,1,3)
C
C
	FLUSH_OUT = .TRUE.
C
999	RETURN
	END
