C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-05-18 18:31:46.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	PROGRAM POLMERGE
C
***	MODULE	POLMERGE
***	IDENT	18MY92
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
CMOD	POLYGONS_INIT now modifies LSL_STATUS	SG	18-May-1992
C
CMOD1056 Jon Barber					31-Oct-1991
C	Remove some command variables common to POLMERGE and IPOLYGON
C	from COMMAND.CMN into SERVICE:PARAMS.PAR for the addition of 
C	/ABS in IPOLYGON
C
CMOD	Call version to announce ourself	PGH	15-May-1991
CMOD	Calls to FORM_POLYGONS and TAB_BUILD	MWSR	11-Oct-1988
C	ISOLATIONS for service routine compatibility
C
C 	Created					MWSR    24-Jun-1987
C
C.............................................................................
C	POLMERGE is the Laser-Scan automatic IFF POLYGON MERGing and elimination
C	utility. It forms part of the Laser-Scan POLYGONS Package. 
C
C	POLMERGE is designed to be run in batch mode and all options may be
C	specified on the command line. No user interaction is required during
C	processing.
C 
C	POLMERGE operates on an IFF junction structured (IFJ) file. Because
C	output is also to an IFJ file the program may be used as a pre-processor
C	before polygon creation using IPOLYGON.
C
C	Polygon merging takes place by means of user-defined rules. Both a look
C	up table and program qualifiers may be incorporated in their definition.
C
C	Command format
C		$ POLMERGE in-file-spec out-file-spec
C
C		Command qualifiers				Defaults
C								--------
C			/[NO]ACCHECK			 	/ACCHECK
C			/[NO]AREA=(tolerance-spec[...])		See text
C			/[NO]BOUNDING				/NOBOUNDING
C			/[NO]ELIMINATE(				See text
C			/[NO]LOG				/NOLOG
C			/[NO]LIST				/NOLIST
C			/LOOKUP = file-spec			No lookup file
C			/[NO]MERGE = (merging-option)		See Text
C			/[NO]RATIO=(tolerance-spec[...])	/NORATIO
C.............................................................................
C 
	IMPLICIT NONE
C
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
C
C Common:
	INCLUDE 	'LSL$CMNLSL:STATUS.CMN'
	INCLUDE 	'LSL$CMNPOLYGONS:FILE.CMN'
	INCLUDE 	'LSL$CMNPOLMERGE:COMMAND.CMN'
C
C Functions
	INTEGER*4	CMDLIN		!gets the command line
	INTEGER*4	READ_LOOKUP	!read codes from lookup file
	INTEGER*4	CLOSE_FILES	!close files!
	INTEGER*4	TAB_BUILD	!creates tables
	INTEGER*4	FORM_POLYGONS   !forms the polygons
	INTEGER*4	FORM_BOXES	!forms box structure
	INTEGER*4	ISOLATIONS	! determines isolated polygons
	INTEGER*4	NESTS		! determines polygon nesting
	INTEGER*4	CALC_AREAS_RATIOS ! calculate poly areas/ratios
	INTEGER*4	AMALGAMATE      ! amalgamate polygons
	INTEGER*4	EXTERMINATE     ! eliminate polygons
	INTEGER*4	OUTIFJ		! output 
	INTEGER*4       CHECK_AC_TEXT   ! check the AC consistency
	INTEGER*4       GET_BOUNDING	! get the bounding polygon
	INTEGER*4	FLAG_ISOLATIONS ! flag isolated polygons
C
C Local Variables
	INTEGER*4	STATUS,OK	!hold  status 
	INTEGER*2	LEFT_CODE
	INTEGER*2	RIGHT_CODE
	INTEGER*4	DUMTREE,DUMPOLY,DUMISOL
C
C ......................................................................
C initialise
C
	CALL SET_EXPMAX(255)
	CALL SET_TXTLIM(255)
C
	CALL LSL_INIT				!LSLLIB
	CALL VERSION('POLMERGE')		!announce ourselves
	CALL POLYGONS_INIT			!polygons service library
C
C	........................................................................
C	get the command line
C
	IF (LSL_STATUS) THEN
	  LSL_STATUS = CMDLIN()
	ENDIF
C
C	........................................................................
C	if lookup has been specified, read the table
C
	IF (LSL_STATUS) THEN
	  IF (LKPFLO) LSL_STATUS = READ_LOOKUP()
	ENDIF
C
C	........................................................................
C	build up the segment tables
C
	IF (LSL_STATUS) THEN
	  CALL FRAMED_MES(6)			! indicate progress
	  LEFT_CODE = 4
	  RIGHT_CODE = 5
	  LSL_STATUS =TAB_BUILD(
     &		.FALSE.,.FALSE.,HAD_ACCHECK,LEFT_CODE,RIGHT_CODE,ONE_WARN)
	ENDIF
C
C	........................................................................
C	form the polygons
C
	IF (LSL_STATUS) THEN
	  CALL FRAMED_MES(3)			! indicate progress
	  LSL_STATUS = FORM_POLYGONS(CLOCK,.FALSE.,.TRUE.,DUMPOLY,DUMTREE)
	ENDIF
C
C	........................................................................
C	get the bounding polygon
C
	IF (LSL_STATUS) THEN
	  LSL_STATUS =GET_BOUNDING(CLOCK)
	ENDIF
C
C	........................................................................
C	form the boxes to speed up nested polygon calculations
C
	IF (LSL_STATUS) THEN
	  LSL_STATUS = FORM_BOXES()
	ENDIF
C
C	........................................................................
C	find isolated polygons
C
	IF (LSL_STATUS) THEN
	  CALL FRAMED_MES(8)			! indicate progress
	  LSL_STATUS = ISOLATIONS(CLOCK,.TRUE.,DUMISOL)
	ENDIF
C
C	........................................................................
C	flag isolated polygons
C
	IF (LSL_STATUS) THEN
	  LSL_STATUS = FLAG_ISOLATIONS()
	ENDIF
C
C	........................................................................
C	work out nesting
C
	IF (LSL_STATUS) THEN
	  CALL FRAMED_MES(4)			! indicate progress
	  LSL_STATUS = NESTS()
	ENDIF
C
C	........................................................................
C	if /ACCHECK check AC consistency
C
	IF (LSL_STATUS) THEN
	  IF (HAD_ACCHECK) LSL_STATUS = CHECK_AC_TEXT()
	ENDIF
C
C	........................................................................
C	work out areas of polygons
C
	IF (LSL_STATUS) THEN
	  LSL_STATUS = CALC_AREAS_RATIOS()	
	ENDIF
C
C	........................................................................
C	now do the business
C
	IF (LSL_STATUS) THEN
	  LSL_STATUS = AMALGAMATE()
	ENDIF
C
	IF (LSL_STATUS) THEN
	  LSL_STATUS = EXTERMINATE()
	ENDIF
C
C	........................................................................
C
	IF (LSL_STATUS) THEN
	  LSL_STATUS = OUTIFJ()				!output
	ENDIF
C
C..............................................................................
C
10	STATUS = LSL_STATUS
	OK = CLOSE_FILES()
	IF ((.NOT.OK).AND.(.NOT.STATUS)) THEN
	   LSL_STATUS=STATUS			! set $STATUS to original error
	ENDIF
C
C
C..............................................................................
C
        IF (PME) CALL PME_EXIT
	CALL LSL_EXIT
	END
