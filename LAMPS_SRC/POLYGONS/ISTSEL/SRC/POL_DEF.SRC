	LOGICAL FUNCTION POL_DEF ()
C
***	MODULE	POL_DEF
***	IDENT	19JN87
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C
CMOD	File-spec now have explicit length		TJH 19-Jun-1987
C
C	Created                         G.S.Tobiss 27-January-1987
C
C
C Module to open definition file and read in the codes
C needed for processing using ISTSEL.
C
	IMPLICIT NONE
C
C Parameters
	INTEGER*4	SS$_NORMAL	!Normal successful completion
	EXTERNAL	SS$_NORMAL
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE 'LSL$CMNLSL:READSTR.PAR'
	INCLUDE 'HERE:PARAMS.PAR'
	INCLUDE 'HERE:ISTSELMSG.PAR'
C
C Common
	INCLUDE 'HERE:COMMAND.CMN'
	INCLUDE 'LSL$CMNLSL:CLD.CMN'
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'
C
C Functions
	LOGICAL		FLROPN		!opens definition file
	LOGICAL		FLRLIN		!reads line from file
	LOGICAL		READSTR		!reads line from TXTBUF
C
C Workspace variables
	INTEGER		LINEID		!line number
	LOGICAL		OK		!error flag
	LOGICAL		HAD_NEW		!confirms new code given
	LOGICAL		RDCHS		!reads a single character
	CHARACTER*256	TMPBUF		!temporary buffer for string
	BYTE		COMMA		!to seperate codes in TXTBUF
	BYTE		ICH		!holds ASCII value of RDCHS read
	INTEGER*4	RETVAL		!error codefor READSTR
	INTEGER*4	I,J,K,L		!counters for array checking
	INTEGER*4	STLEN		!Length of line of data
	INTEGER*4	IERR		!for error return
C
	PARAMETER	(COMMA=',')
C
C--------------------------------------------------------------
C
	POL_DEF=%LOC(SS$_NORMAL)
C
C First open definition file
	OK=FLROPN(DEFLUN,DEFFIL(:DEF_LEN),IERR)
	IF (OK) THEN
	   IF (HAD_LOG) THEN
	      POL_DEF=ISTSEL__DEFOPENED
	      CALL LSL_PUTMSG(POL_DEF,DEFFIL(:DEF_LEN))
	   ENDIF
	ELSE
	   POL_DEF=ISTSEL__OPDEF
	   CALL LSL_PUTMSG(POL_DEF,DEFFIL(:DEF_LEN))
	   CALL LSL_ADDMSG(OK)
	   IF (IERR.NE.LSL__NORMAL.AND.IERR.NE.0) CALL LSL_ADDMSG(IERR)
	   GOTO 80
	ENDIF
C
C First trap the EOF condition - valid if we've
C had at least one new code.
C
	HAD_NEW=.FALSE.
	NEWNUM=0		!initialise new code counter
	OLDNUM=0		!and for the old ones
	LINEID=0
10	LINEID=LINEID+1
	OK=FLRLIN(,,,IERR)
	IF (.NOT.OK) THEN
	   IF (OK.EQ.LSL__EOF)THEN		! EOF but is it valid?
	      IF (.NOT.HAD_NEW) THEN
	         POL_DEF=ISTSEL__NODATA
	         CALL LSL_PUTMSG(POL_DEF,DEFFIL(:DEF_LEN))
	         GOTO 80
	      ELSE
	         POL_DEF=%LOC(SS$_NORMAL)		!It's valid
	         GOTO 30		!send control to check codes
	      ENDIF
	   ELSE
	      POL_DEF=ISTSEL__READEF
	      CALL LSL_PUTMSG(POL_DEF,LINEID,DEFFIL(:DEF_LEN))
	      CALL LSL_ADDMSG(IERR)
	      GOTO 80
	   ENDIF
	ENDIF
C
C OK so lets check for comments and blank lines. If we find any
C new codes then read them into the next position in NEWC
	CALL BSLN
	IF (RDCHS(ICH)) GOTO 10		!blank line so skip it
	IF (ICH.EQ.'!') GOTO 10		!comment so ignore it
	IF (ICH.EQ.'%') THEN		!new polygon group
	   HAD_NEW=.TRUE.
	   NEWNUM=NEWNUM+1
	   IF (NEWNUM.GT.MAXC) THEN	!too many codes?
	      POL_DEF=ISTSEL__MAXCODEEX
	      CALL LSL_PUTMSG(POL_DEF,'new',LINEID,MAXC)
	      GOTO 80
	   ENDIF
	   OLDNUM=0			!reset OLDNUM
	   STLEN=READSTR(TMPBUF,COMMA,ON_CHAR)
	   NEWC(NEWNUM)=TMPBUF(1:STLEN)
	   NEWLEN(NEWNUM)=STLEN		!remember length of each string
	   GOTO 10
	ENDIF
C
C We've come this far so the data must be the group of
C codes being amalgamated into the new group - so lets read
C it. OLDC is 100 x 100 so use NEWNUM and OLDNUM to control
C entries into it. First make sure that we've had at least one
C new code.
C
	IF (.NOT.HAD_NEW) THEN
	   POL_DEF=ISTSEL__FOR
	   CALL LSL_PUTMSG(POL_DEF,LINEID,DEFFIL(:DEF_LEN))
	   GOTO 80
	ENDIF
C
C OK to go on...
C
	CALL BSCH				!Backspace one character
20	OLDNUM=OLDNUM+1				!increment old code
	IF (OLDNUM.GT.MAXC) THEN		!too many codes?
	   POL_DEF=ISTSEL__MAXCODEEX
	   CALL LSL_PUTMSG(POL_DEF,'old',LINEID,MAXC)
	   GOTO 80
	ENDIF
C
C We need to remember the number of codes read into each row of OLDC
C so that exact limits for each array can be used when the contents
C each of the rows is checked for duplication.
C
	STLEN=READSTR(TMPBUF,COMMA,ON_CHAR,,RETVAL)
	OLDC(NEWNUM,OLDNUM)=TMPBUF(1:STLEN)
	OLDCLEN(NEWNUM,OLDNUM)=STLEN		!remember element length
	OLDLEN(NEWNUM)=OLDNUM			!remember element number
	IF (RETVAL.EQ.LSL__STREOL) GOTO 10	!return for next line
	GOTO 20					!return for next code	
C
C Now we need to check for duplicate codes between the different rows
C of OLDC. The Y dimension of the array is stored in NEWNUM, the X for
C each row in the seperate elements of OLDLEN. We need 4 nested DO loops
C so that each element in a row can be compared to all the elements in
C the rows below it
C
30	IF (NEWNUM.NE.1) THEN
	   DO 70 I=1,NEWNUM-1
	      DO 60 J=1,OLDLEN(I)
	         DO 50 K=I+1,NEWNUM
	            DO 40 L=1,OLDLEN(K)
	               IF (OLDC(I,J).EQ.OLDC(K,L)) THEN
	                  POL_DEF=ISTSEL__DUPCODES
	                  CALL LSL_PUTMSG(POL_DEF,OLDC(I,J)
     &			  (1:OLDCLEN(I,J)),LINEID,DEFFIL(:DEF_LEN))
	               ENDIF
40	            CONTINUE
50	         CONTINUE
60	      CONTINUE
70	   CONTINUE
	ENDIF
C
C Return to ISTSEL after closing file
C
80	CALL FLRCLO(DEFLUN)
	IF (POL_DEF) POL_DEF=%LOC(SS$_NORMAL)
	RETURN
	END
