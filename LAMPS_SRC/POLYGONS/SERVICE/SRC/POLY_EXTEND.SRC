C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-05-18 14:26:10.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	LOGICAL FUNCTION POLY_EXTEND(
     &		NARMS,STPOSN,STEND,JBX,JBY,NXTPTR,JUNC,LRSIDE,ABORT,PROBE,
     &		CLOSE_PTR,CLOSED,CLOCK,ONE_USE)
C
***	MODULE	POLY_EXTEND
***	IDENT	30AP92
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
C	Arguments:
		INTEGER*2 NARMS		! number of arms from junction
		INTEGER   STPOSN	! position of connecting ST in file
		INTEGER*2 STEND		! end of ST connected to junction
		REAL	  JBX,JBY	! junction coords
		INTEGER	  NXTPTR	! general pointer
		INTEGER*2 JUNC		! points to required end (1/2)
		INTEGER*2 LRSIDE	! left(1) or right(2) hand segment side
		LOGICAL	  ABORT		! polygon aborted?
		LOGICAL	  PROBE		! actually use segment or just probing?
		INTEGER	  CLOSE_PTR	! 1st closure STACK_PTR value
C
	LOGICAL		ACTUAL_POLY_EXTEND
C
C	........................................................................
C
	POLY_EXTEND = ACTUAL_POLY_EXTEND(
     &		NARMS,STPOSN,STEND,JBX,JBY,NXTPTR,JUNC,LRSIDE,ABORT,PROBE,
     &		CLOSE_PTR,CLOSED,CLOCK,ONE_USE,
     &		POLMAX,TABMAX,
     &		%VAL(PTR$_SEGTAB),
     &		%VAL(PTR$_STTAB)
     &	)
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	LOGICAL FUNCTION ACTUAL_POLY_EXTEND(
     &		NARMS,STPOSN,STEND,JBX,JBY,NXTPTR,JUNC,LRSIDE,ABORT,PROBE,
     &		CLOSE_PTR,CLOSED,CLOCK,ONE_USE,
     &		POLMAX, TABMAX,SEGTAB, STTAB)
C
***	MODULE	ACTUAL_POLY_EXTEND
***	IDENT	30OC91
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
CMOD	NXTPTR now passed to NXTARM			TJH  30-Mar-1989
CMOD	Simplified use of the /ONEARM qualifier		AC   24-Jun-1988
C	Author						TJH  07-Sep-1987
C
C
C Function to control the process of getting the next segment for the
C polygon. 
C
C If PROBE is true we don't actually put the segment onto the stack
C or take any heed of /LRUSED/LRUSED flags and merely return the address
C of the next segment in STPOSN. 
C
C Function returns SS$_NORMAL if all is well or one of a variety of
C IPOLYGON error codes on failure.
C
C ......................................................................
C
	IMPLICIT NONE
C Parameters:
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNPOLYGONS:POLYGONSMSG.PAR'
	INCLUDE		'($STSDEF)'
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
C
C Common:
	INCLUDE		'LSL$CMNPOLYGONS:FILE.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:STACKS.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:TABLES.CMN'
	INCLUDE		'LSL$CMNIFF:IFFHAN.CMN'
C
C Arguments:
	INTEGER*2 NARMS		! number of arms from junction
	INTEGER   STPOSN	! position of connecting ST in file
	INTEGER*2 STEND		! end of ST connected to junction
	REAL	  JBX,JBY	! junction coords
	INTEGER	  NXTPTR	! general pointer
	INTEGER*2 JUNC		! points to required end (1/2)
	INTEGER*2 LRSIDE	! left(1) or right(2) hand segment side
	LOGICAL	  ABORT		! polygon aborted?
	LOGICAL	  PROBE		! actually use segment or just probing?
	INTEGER	  CLOSE_PTR	! 1st closure STACK_PTR value
C
C If CLOSE_PTR has non 0 then poly. has already closed once at that
C STACK_PTR value but the first and closure segment STPOSN's
C didn't tally. We could however, close poly. if further growth is not
C possible due to 1 arm junctions. 
C
	LOGICAL	  CLOSED	! polygon closed?
	LOGICAL	  CLOCK		! /OPTIONS=CLOCKWISE specified?
	LOGICAL	  ONE_USE	! /ONEARM=USE specified?
C
	INTEGER*4	POLMAX
	INTEGER*4	TABMAX
	INTEGER*4	SEGTAB(2,TABMAX)
	INTEGER*4	STTAB(2,TABMAX)
C
C
C W/s
	REAL	  COORD(2)	! position for error message
	LOGICAL	  UNWOUND	! polygon formation stacks unwound?
C
C Functions:
	LOGICAL		ABORT_POLY	! erase all evidence of poly
	LOGICAL		BINSEA		! binary search
	LOGICAL		NXTARM		! finds next arm for polygon
	LOGICAL		SET_LRUSED	! set side used flag
C
C ......................................................................
C
	ACTUAL_POLY_EXTEND=%LOC(SS$_NORMAL)
	ABORT=.FALSE.
C
	IF (.NOT.(NXTARM(NARMS,STPOSN,STEND,JBX,JBY,
     &		SEGTAB(1,NXTPTR),UNWOUND,CLOSE_PTR,CLOSED,CLOCK,
     &			ONE_USE,NXTPTR))) THEN
	   ACTUAL_POLY_EXTEND=ABORT_POLY()	! abandon polygon
	   ABORT=.TRUE.
	   GOTO 10	
	ENDIF
C
C So many 1 arm junctions in poly that we have completely unwound the
C formation stacks? If so abandon polygon.
	IF (UNWOUND) THEN
	   ACTUAL_POLY_EXTEND=ABORT_POLY()	! abandon polygon
	   ABORT=.TRUE.
	   GOTO 10	
	ENDIF
	COORD(1)=JBX
	COORD(2)=JBY
	IF (.NOT.(BINSEA(NXTPTR,STPOSN,
     &			SEGTAB(1,NXTPTR),COORD))) THEN
	   ACTUAL_POLY_EXTEND=ABORT_POLY()	! abandon polygon
	   ABORT=.TRUE.
	   GOTO 10
	ENDIF
C
C Work out direction of this segment.
	CALL SEGDIR(STEND,JUNC,LRSIDE)
C
C Get new arm string position
	STPOSN=STTAB(JUNC,NXTPTR)
C
C Set LRUSED flag to say that we have used this segment in the
C current direction? If only PROBE'ing then don't.
	IF (.NOT.PROBE) THEN
	   ACTUAL_POLY_EXTEND=SET_LRUSED(SEGTAB(1,NXTPTR),LRSIDE)
	   IF (.NOT.ACTUAL_POLY_EXTEND) THEN
	      ACTUAL_POLY_EXTEND=ABORT_POLY()	! abandon polygon
	      ABORT=.TRUE.
	      GOTO 10	
	   ENDIF
	ENDIF
10	RETURN
	END
