C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-05-14 18:47:10.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	LOGICAL*4 FUNCTION GEN_PNT_IN_POLY(
     &		POLY_INDX,P__PTRS,NNEST,T__PTRS,NTREE,CLOCK,GEN_POINT,ITERATE)
C
***	MODULE	GEN_PNT_IN_POLY
***	IDENT	30AP92
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
C	Arguments:
		INTEGER		POLY_INDX	! the polygon in question
		INTEGER		T__PTRS(POLNEST_MAX) ! nested trees
		INTEGER		P__PTRS(POLNEST_MAX) ! nested boundaries
		INTEGER		NTREE		! # of nested trees
		INTEGER		NNEST		! # of nested boundaries
		LOGICAL		CLOCK		! how polygon is directed
		REAL		GEN_POINT(2)	! the generated point (if any)
		INTEGER*2	ITERATE		! maximum # of iterations
C
	LOGICAL*4	ACTUAL_GEN_PNT_IN_POLY
C
C	........................................................................
C
	GEN_PNT_IN_POLY = ACTUAL_GEN_PNT_IN_POLY(
     &		POLY_INDX,P__PTRS,NNEST,T__PTRS,NTREE,CLOCK,GEN_POINT,ITERATE,
     &		POLMAX,POLNEST_MAX,
     &		%VAL(PTR$_POLY_RANGE)
     &	)
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	LOGICAL*4 FUNCTION ACTUAL_GEN_PNT_IN_POLY(
     &		POLY_INDX,P__PTRS,NNEST, T__PTRS,NTREE,CLOCK,GEN_POINT,ITERATE,
     &		POLMAX, POLNEST_MAX, POLY_RANGE)
C
***	MODULE	ACTUAL_GEN_PNT_IN_POLY
***	IDENT	12AU88
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Created 						AC 17-May-1988
C
C	Function to generate a point GEN_POINT(2) that lies inside the polygon
C	identified by POLY_INDX. P__PTRS(1:NNEST) and T__PTRS(1:NTREE) represent
C	nested boundaries and linework. 
C
C	The algorithm can iterate towards a locally optimal solution. The 
C	ITERATE parameter determines the max. number of iterations allowed.
C	Iteration will stop earlier if the generated point stops moving.
C
C ......................................................................
C
	IMPLICIT NONE
C
C Parameters:
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
C
C Common:
	INCLUDE		'LSL$CMNPOLYGONS:TRANSITIONS.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
C
C Arguments:	
	INTEGER*4	POLMAX
	INTEGER*4	POLNEST_MAX

	INTEGER		POLY_INDX	! the polygon in question
	INTEGER		NTREE		! # of nested trees
	INTEGER		NNEST		! # of nested boundaries
	LOGICAL		CLOCK		! how polygon is directed
	REAL		GEN_POINT(2)	! the generated point (if any)
	INTEGER*2	ITERATE
C
	REAL		POLY_RANGE(4,POLMAX)
	INTEGER		T__PTRS(POLNEST_MAX)
	INTEGER		P__PTRS(POLNEST_MAX)
C
C W/s:
	INTEGER		I,CNT		! iteration loop counter
	REAL		XLO,YLO		! bounding rectangle of 
	REAL		XHI,YHI		! the polygon
	REAL		XMID,YMID	! mid-point coordinates
	REAL		DX,DY		! movement of generated point
C					! since last iteration
C
C Functions:
	LOGICAL*4	GET_ALL_TRANS	! get boundary cutting transitions
	LOGICAL*4	GET_BIGGEST_TRANS ! find the largest IN-OUT step
C
C ............................................................................
C
	ACTUAL_GEN_PNT_IN_POLY = %LOC(SS$_NORMAL)
C
C Get extent of polygon
	DX = POLY_RANGE(2,POLY_INDX)-POLY_RANGE(1,POLY_INDX)
	DY = POLY_RANGE(4,POLY_INDX)-POLY_RANGE(3,POLY_INDX)
	TRANS_TOL = MAX(DX,DY) * 1.0E-6
C
C Stop iterating if moves less than 0.1% of extent
	DX = DX * 0.001
	DY = DY * 0.001
C
C Find an X coordinate such that a vertical section MUST pass through the 
C polygon
	XLO = POLY_RANGE(1,POLY_INDX)
	XHI = POLY_RANGE(2,POLY_INDX)
	XMID = (XLO+XHI)/2.0
C
C Iterate a maximum of ITERATE times....	
	DO 30 CNT=1,ITERATE
C
C ............................................................................
C		V E R T I C A L   S E C T I O N
C
	   CALL CLEAR_TRANS
	   ACTUAL_GEN_PNT_IN_POLY = GET_ALL_TRANS(.TRUE.,POLY_INDX,
     &						.TRUE.,CLOCK,XMID)
	   IF (.NOT.ACTUAL_GEN_PNT_IN_POLY) GOTO 40
C
C If nested boundaries then find associated transitions
   	   IF (NNEST.GT.0) THEN
	      DO 10 I=1,NNEST
		 ACTUAL_GEN_PNT_IN_POLY = GET_ALL_TRANS(.TRUE.,P__PTRS(I),
     &						.TRUE.,CLOCK,XMID)
		 IF (.NOT.ACTUAL_GEN_PNT_IN_POLY) GOTO 40
10	      CONTINUE
	   ENDIF
C
C If nested linework then introduce degenerate transitions
   	   IF (NTREE.GT.0) THEN
	      DO 15 I=1,NTREE
		 ACTUAL_GEN_PNT_IN_POLY = GET_ALL_TRANS(.FALSE.,T__PTRS(I),
     &						.TRUE.,CLOCK,XMID)
		 IF (.NOT.ACTUAL_GEN_PNT_IN_POLY) GOTO 40
15	      CONTINUE
	   ENDIF
C
C Find the biggest section between an IN and OUT transition pair and return
C it in YLO, YHI. Thus (XMID,YLO)-(XMID,YHI) lies inside the polygon.
	   ACTUAL_GEN_PNT_IN_POLY = GET_BIGGEST_TRANS(YLO,YHI)
	   IF (.NOT.ACTUAL_GEN_PNT_IN_POLY) GOTO 40
C
C Take mid-point of that line
	   YMID=(YLO+YHI)/2.0
C
C ............................................................................
C		H O R I Z O N T A L    S E C T I O N
C
	   CALL CLEAR_TRANS
	   ACTUAL_GEN_PNT_IN_POLY = GET_ALL_TRANS(.TRUE.,POLY_INDX,
     &						.FALSE.,CLOCK,YMID)
	   IF (.NOT.ACTUAL_GEN_PNT_IN_POLY) GOTO 40
C
C If nested boundaries then find associated transitions
	   IF (NNEST.GT.0) THEN
	      DO 20 I=1,NNEST
		 ACTUAL_GEN_PNT_IN_POLY = GET_ALL_TRANS(.TRUE.,P__PTRS(I),
     &						.FALSE.,CLOCK,YMID)
		 IF (.NOT.ACTUAL_GEN_PNT_IN_POLY) GOTO 40
20	      CONTINUE
	   ENDIF
C
C If nested linework then introduce degenerate transitions
   	   IF (NTREE.GT.0) THEN
	      DO 25 I=1,NTREE
		 ACTUAL_GEN_PNT_IN_POLY = GET_ALL_TRANS(.FALSE.,T__PTRS(I),
     &						.FALSE.,CLOCK,YMID)
		 IF (.NOT.ACTUAL_GEN_PNT_IN_POLY) GOTO 40
25	      CONTINUE
	   ENDIF
C
C Find the biggest section between an IN and OUT transition pair and return
C it in XLO, XHI. Thus (XLO,YMID)-(XHI,YMID) lies inside the polygon.
	   ACTUAL_GEN_PNT_IN_POLY = GET_BIGGEST_TRANS(XLO,XHI)
	   IF (.NOT.ACTUAL_GEN_PNT_IN_POLY) GOTO 40
C
C Take mid-point of that line
	   XMID=(XLO+XHI)/2.0
C
C If not the first iteration then if generated point has not moved much
C then finish
	   IF (	(CNT.GT.1).AND.
     &		(ABS(XMID-GEN_POINT(1)).LT.DX) .AND.
     &		(ABS(YMID-GEN_POINT(2)).LT.DY)       ) GOTO 40
C
C Remember new generated point and loop back
	   GEN_POINT(1)=XMID
	   GEN_POINT(2)=YMID
C
30	CONTINUE
C
C Finished....
40	RETURN
	END

