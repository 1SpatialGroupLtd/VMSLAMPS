C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-05-18 14:21:24.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	LOGICAL*4 FUNCTION NESTS()
C
***	MODULE	NESTS
***	IDENT	30AP92
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
	LOGICAL*4	ACTUAL_NESTS
C
C	........................................................................
C
	NESTS = ACTUAL_NESTS(
     &		POLMAX,PCOVER_MAX,PBMAX,POLNEST_MAX,POSPOL_MAX,TABMAX,
     &		%VAL(PTR$_NEST_START),
     &		%VAL(PTR$_PCOVER_BOX),
     &		%VAL(PTR$_PCOVER_START),
     &		%VAL(PTR$_POLBOX),
     &		%VAL(PTR$_POLNEST),
     &		%VAL(PTR$_POLY_RANGE),
     &		%VAL(LOC_PTR$_POSPOL),
     &	  )
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	LOGICAL*4 FUNCTION ACTUAL_NESTS(
     &		POLMAX,PCOVER_MAX,PBMAX,POLNEST_MAX,POSPOL_MAX,TABMAX,
     &		NEST_START, PCOVER_BOX, PCOVER_START, POLBOX,
     &		POLNEST, POLY_RANGE, POSPOL)
C
***	MODULE	ACTUAL_NESTS
***	IDENT	30OC91
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Author						TJH  05-Mar-1987
C
C
C Function to determine any polygon nesting.
C
C ACTUAL_NESTS uses the sectored spatial index created by FORM_BOXES
C et al. All results are stored in /SECTOR/ NEST_START and POLNEST
C (For a description of these arrays see the comments in the SECTOR
C common file, SECTOR.CMN).
C
C Function returns SS$_NORMAL if all is well or one of a variety of
C IPOLYGON error codes on failure.
C
C ......................................................................
C
	IMPLICIT NONE
C
C Common:
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNPOLYGONS:POLYGONSMSG.PAR'
	INCLUDE		'LSL$CMNPOLYGONS:FILE.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:TABLES.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:SECTOR.CMN'
C
C Parameters:
	INTEGER*2	X,Y
	PARAMETER 	(X=1, Y=2)
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
C
C Arguments:
C
	INTEGER*4	POLMAX
	INTEGER*4	POLNEST_MAX
	INTEGER*4	PCOVER_MAX
	INTEGER*4	PBMAX
	INTEGER*4	POSPOL_MAX
	INTEGER*4	TABMAX
C
	INTEGER		NEST_START(POLMAX+1)
	INTEGER		PCOVER_BOX(PCOVER_MAX)
	INTEGER		PCOVER_START(POLMAX+1)
	INTEGER		POLBOX(PBMAX)
	INTEGER		POLNEST(2, POLNEST_MAX)
	REAL		POLY_RANGE(4,POLMAX)
	INTEGER	  	POSPOL(POSPOL_MAX) ! list of possible nested polygons
C
C W/s
	INTEGER	  BOXES(BOXMAX) ! list of boxes
	INTEGER	  IN		! for point in pol return
	INTEGER   I,J,K		! temp. vars.
	INTEGER	  INEST		! number of polygons nested
	INTEGER	  NBOX		! number of boxes within polygon
	INTEGER	  NINDEX	! index into POLNEST
	INTEGER	  NNEST		! number of polygons containing ACTUAL_NESTS
	INTEGER	  NPOL		! number of polygons
	INTEGER	  NXTSIGN	! sign of next index into POLNEST
	INTEGER	  POLSIGN	! sign of poly index into POLNEST
	INTEGER	  POLY_INDX	! current polygons ident
C
	REAL	  APOINT(2)	! a coordinate
	REAL	  PXMIN,PXMAX	! polygon range avoiding array indexing
	REAL	  PYMIN,PYMAX	!   "       "      "       "      "
C
	LOGICAL	  GOT_BOUND	! got the bounding coords for poly yet?
	LOGICAL	  HADNEST	! had nesting inside poly yet?
C
C Functions:
	LOGICAL	  EXT1V		! extract 1-bit field
	INTEGER   GET_POLPNT	! gets a single polygon coordinate
	INTEGER   GET_POLY	! gets & orders polygons coordinates
	INTEGER	  PNTPOL	! point in polygon test
C
C ......................................................................
C
	ACTUAL_NESTS=%LOC(SS$_NORMAL)
C
	INEST=0
	NNEST=0
	NINDEX=1
	HADNEST=.FALSE.
C
C ......................................................................
C    L O O P    F O R    E  A C H    P O L Y G O N   I N    T U R N
C
	DO 90 POLY_INDX=1,NUM_POLY
C
C Carefully avoid processing the bounding polygon
	   IF (POLY_INDX.EQ.BOUND_POL) GOTO 90
C
C Set pointer into POLNEST for this polygon
	   NEST_START(POLY_INDX)=NINDEX
C
C And flags for POLNEST
	   IF (HADNEST) THEN
	      HADNEST=.FALSE.
	   ENDIF
C
C Haven't read in coords for this polygons boundary yet..
	   GOT_BOUND=.FALSE.
C
C Get the box (or boxes) containing (or covered by) this polygon
	   NBOX=0
	   POLSIGN=ISIGN(1,PCOVER_BOX(PCOVER_START(POLY_INDX)))
	   DO 10 I=PCOVER_START(POLY_INDX),PCOVER_MAX
	      NXTSIGN=ISIGN(1,PCOVER_BOX(I))
	      IF ((NXTSIGN.NE.POLSIGN).OR.(PCOVER_BOX(I).EQ.0)) GOTO 20
	      BOXES(NBOX+1)=IABS(PCOVER_BOX(I))
	      NBOX=NBOX+1
10	   CONTINUE
C
C We have now got all the NBOX boxes covered by polygon POL_INDEX
C stored away in BOXES. Make a list of all the polygons that lie
C within those NBOX boxes. We can then test to see if any of them
C lie within our current polygon POLY_INDX.
20	   NPOL=0		! no possible nesting polygons - yet
	   DO 50 I=1,NBOX
	      POLSIGN=ISIGN(1,POLBOX(PBOX_START(BOXES(I))))
	      DO 40 J=PBOX_START(BOXES(I)),PBMAX
	         NXTSIGN=ISIGN(1,POLBOX(J))
	         IF ((NXTSIGN.NE.POLSIGN).OR.(POLBOX(J).EQ.0)) GOTO 50
C
C Check that we haven't already had this polygon in our list
	         IF (NPOL.GT.1) THEN
	            DO 30 K=1,NPOL
	               IF (ABS(POLBOX(J)).EQ.POSPOL(K)) GOTO 40
30	            CONTINUE
	         ENDIF
C
C Check that we have room for this possibly nested polygon in POSPOL
	         IF (NPOL+1.GT.POSPOL_MAX) THEN
	            ACTUAL_NESTS=POLY__POSNEST
	            CALL LSL_PUTMSG(ACTUAL_NESTS,POSPOL_MAX)
	            GOTO 100
	         ENDIF
	         POSPOL(NPOL+1)=IABS(POLBOX(J))
	         NPOL=NPOL+1
40	      CONTINUE
50	   CONTINUE
C
C We now have a list (POSPOL) of all the polygons which lie inside the
C box (or boxes) covered by polygon POLY_INDX and which could therefore 
C possibly be nested inside it. We can do the primary test for being
C nested by using the polygon ranges in POLY_RANGE. If all 4 bounds
C of a candidate polygon lie inside the range of polygon POLY_INDX
C we must go on to do a definitive test using the point in polygon
C routine. If any one candidate polygon bound lies outside the
C range of polygon POLY_INDX we can quickly ignore it and get the
C next candidate polygon.
60	   PXMIN=POLY_RANGE(1,POLY_INDX)
	   PXMAX=POLY_RANGE(2,POLY_INDX)
	   PYMIN=POLY_RANGE(3,POLY_INDX)
	   PYMAX=POLY_RANGE(4,POLY_INDX)
C
C ......................................................................
C
C   C H E C K   F O R   N E S T I N G    I N S I D E   P O L Y G O N
C
	   IF (NPOL.EQ.0) GOTO 80 ! unless there are none to consider
C
	   DO 70 I=1,NPOL
C
C Don't check polygon POLY_INDX against itself!
	      IF (POSPOL(I).EQ.POLY_INDX) GOTO 70
	      IF (POLY_RANGE(1,POSPOL(I)).LT.PXMIN) GOTO 70
	      IF (POLY_RANGE(2,POSPOL(I)).GT.PXMAX) GOTO 70
	      IF (POLY_RANGE(3,POSPOL(I)).LT.PYMIN) GOTO 70
	      IF (POLY_RANGE(4,POSPOL(I)).GT.PYMAX) GOTO 70
C
C If we fall through all the above tests we have a possible nested
C polygon on our hands. It could, however, lie outside an "L" shaped
C POLY_INDX polygon so we must now (painfully) do a point in polygon
C test on it, to see if it REALLY lies within polygon POLY_INDX.
C
C If we haven't already done this for the current polygon we must
C get the coordinates which define the polygon POLY_INDX. The
C function GET_POLY() returns the (/POLYGONS/POLY_PTS) coordinates for
C polygon POLY_INDX in /POLYGONS/POLY_BUF
	      IF (.NOT.GOT_BOUND) THEN
	         POLY_PTS=0
	         ACTUAL_NESTS=GET_POLY(POLY_INDX)
	         IF (.NOT.ACTUAL_NESTS) GOTO 100
	         GOT_BOUND=.TRUE.
	      ENDIF
C
C Now get a single coordinate from the candidate polygon.
	      ACTUAL_NESTS=GET_POLPNT(APOINT,POSPOL(I))
	      IF (.NOT.ACTUAL_NESTS) GOTO 100
C
C And let PNTPOL do the point in polygon test.
	      IN=PNTPOL(APOINT,POLY_BUF,POLY_PTS)
	      IF (IN.EQ.1) THEN   	! point in polygon?
C
C This candidate has won election to the nested polygon list for
C our current polygon POLY_INDX.
	         INEST=INEST+1
	         HADNEST=.TRUE.
	         POLNEST(1,NINDEX)=POSPOL(I)
	         POLNEST(2,NINDEX)=NINDEX+1
	         IF (NINDEX+1.GT.POLNEST_MAX) THEN
	            ACTUAL_NESTS=POLY__TOOMNYNEST
	            CALL LSL_PUTMSG(ACTUAL_NESTS,POLNEST_MAX)
	            GOTO 100
	         ENDIF
	         NINDEX=NINDEX+1
	         NUM_NEST = INEST
	      ENDIF
70	   CONTINUE
C
C If our polygon contained no nested polygons, reset the polygon's
C index (NEST_START) into POLNEST to zero. Zero tells us later that
C there are no nested polygons to consider in this polygon.
80	   IF (.NOT.HADNEST) THEN
	      NEST_START(POLY_INDX)=0
	   ELSE
	      NNEST=NNEST+1
	      POLNEST(2,(NINDEX-1)) = 0
	   ENDIF
90	CONTINUE
C
C Tell user what has been done?
	IF (HAD_LOG) THEN
	   CALL EXPAND(
     &	    'Number of polygons examined ......................... %N',
     &							NUM_POLY)
	   IF (HAD_LIS) THEN
	      CALL FLWLIN
	   ELSE
	      CALL TTWLIN
	   ENDIF
	   CALL EXPAND(
     &	    'Number of polygons containing nested polygons ....... %N',
     &								NNEST)
	   IF (HAD_LIS) THEN
	      CALL FLWLIN
	   ELSE
	      CALL TTWLIN
	   ENDIF
	   CALL EXPAND(
     &	    'Number of polygons nested inside others ............. %N',
     &								INEST)
	   IF (HAD_LIS) THEN
	      CALL FLWLIN
	   ELSE
	      CALL TTWLIN
	   ENDIF
	ENDIF
C
C ......................................................................
C
100	RETURN
	END
