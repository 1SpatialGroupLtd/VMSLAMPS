C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-12-01 12:21:36.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION GET_BOUNDARY_BOXES(HADBOX)
C
***	MODULE	GET_BOUNDARY_BOXES
***	IDENT	01DE94
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C       MOD 1438					ST  1-Dec-1994
C       Make sure the current box (CUR_BOX) is always flagged as being
C	covered by the polygon in hand. Before this, polygons whose
C       segments went between diagonal boxes weren't flagged as
C       covering the current box.
C
C	Author						AC  29-June-1988
C
C	Function to implicate all boxes thru which the polygon boundary
C	(maintained in POLY_BUF(2,1:POLY_PTS)) goes thru. The simple 
C	vectors (ie those that produce horizontal or vertical runs of
C	boxes) are handled here while the more complicated ones are farmed
C	out to GET_LINE_BOXES()
C
C ......................................................................
C
	IMPLICIT NONE
C
C Parameters:
	INTEGER		X,Y		   !
	PARAMETER      (X=1,Y=2)	   !
	INTEGER		SS$_NORMAL	   !
	EXTERNAL	SS$_NORMAL	   !
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
C
C Common:
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:SECTOR.CMN'
C
C Arguments:
C	LOGICAL		HADBOX(*)	   ! boxes implicated by boundary
	LOGICAL		HADBOX(BOXMAX)	   ! boxes implicated by boundary
C
C W/s:
	INTEGER		CUR_NX,CUR_NY	   ! sector coord of current box
	INTEGER		CUR_BOX		   ! index of current box
	INTEGER		LAST_NX,LAST_NY	   ! sector coord of last box
	INTEGER		LAST_BOX	   ! index of last box
	INTEGER		I,J		   ! tmp var.
C
C Functions:
	LOGICAL*4	GET_LINE_BOXES	   ! flag boxes that do not lie on
C					   ! a vert. or horz. line
C ...........................................................................
C	
	GET_BOUNDARY_BOXES=%LOC(SS$_NORMAL)
C
C find which box contains the starting point and set it
	LAST_NX=(POLY_BUF(X,1)-BOXORIX)/BOXSTPX
	LAST_NY=(POLY_BUF(Y,1)-BOXORIY)/BOXSTPY
	LAST_BOX=LAST_NY*NUMBOX+LAST_NX+1
	HADBOX(LAST_BOX)=.TRUE.
C
C For each subsequent point in the boundary....
	DO 100 I=2,POLY_PTS
C
C find the box containing the current box
	   CUR_NX=(POLY_BUF(X,I)-BOXORIX)/BOXSTPX
	   CUR_NY=(POLY_BUF(Y,I)-BOXORIY)/BOXSTPY
	   CUR_BOX=CUR_NY*NUMBOX+CUR_NX+1
C
C If this is the same as the last box then nothing to do - move onto next point
	   IF (CUR_BOX.EQ.LAST_BOX) GOTO 90
C
C If the current and last boxes have the same X coordinate....
	   IF (CUR_NX.EQ.LAST_NX) THEN
	      CUR_BOX=LAST_BOX
C
C fill them in 'by-hand'...
	      IF (CUR_NY.GT.LAST_NY) THEN
C
C going up or...
		 DO 60 J=LAST_NY+1,CUR_NY
		    CUR_BOX=CUR_BOX+NUMBOX
		    HADBOX(CUR_BOX)=.TRUE.
60		 CONTINUE
	      ELSE
C
C going down
		 DO 65 J=LAST_NY-1,CUR_NY,-1
		    CUR_BOX=CUR_BOX-NUMBOX
		    HADBOX(CUR_BOX)=.TRUE.
65   		 CONTINUE
	      ENDIF
C
C all done - move onto next point
	      GOTO 90
	   ENDIF
C
C If the current and last boxes have the same Y coordinate....
	   IF (CUR_NY.EQ.LAST_NY) THEN
C
C fill them in 'by-hand'...
	      CUR_BOX=LAST_BOX
C
C going right or...
	      IF (CUR_NX.GT.LAST_NX) THEN
		 DO 70 J=LAST_NX+1,CUR_NX
		    CUR_BOX=CUR_BOX+1
		    HADBOX(CUR_BOX)=.TRUE.
70		 CONTINUE
	      ELSE
C
C going left
		 DO 75 J=LAST_NX-1,CUR_NX,-1
		    CUR_BOX=CUR_BOX-1
		    HADBOX(CUR_BOX)=.TRUE.
75		 CONTINUE
	      ENDIF
C
C all done - move onto next point
	      GOTO 90
	   ENDIF
C
C The boxes implicated do not lie on a horizontal or vertical lines - ie a bit
C more complicated. Thus call a new routine.
	   GET_BOUNDARY_BOXES=GET_LINE_BOXES(HADBOX,I)
	   IF (.NOT.GET_BOUNDARY_BOXES) GOTO 110
C
C All boxes now flagged for that vector, remember the last box
90	   LAST_NX=CUR_NX
	   LAST_NY=CUR_NY
	   LAST_BOX=CUR_BOX
C
C Always make sure the current box has been flagged
C
	   HADBOX(CUR_BOX)=.TRUE.
C
C Move onto the next point...
100	CONTINUE
C
C Finished........
110	RETURN
	END
