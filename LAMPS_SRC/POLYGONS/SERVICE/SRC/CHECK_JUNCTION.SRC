C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-05-13 18:59:14.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION CHECK_JUNCTION(JBPOSN,OFFSET,
     &				ONE_WARN,SEED_PT)
C
***	MODULE	CHECK_JUNCTION
***	IDENT	01NO91
C
C	Copyright Laser-Scan Ltd., Cambridge, England
C
CMOD1056 Send absolute coords if requested		 JB  01-Nov-1991
C
CMOD	Now sends warning to terminal and file		TJH  10-Apr-1989
CMOD	No longer output BADJUN message and text,
C	now only warns about 0 arm junctions on seed ptsTJH  04-Apr-1989
CMOD	BUF(2) no longer always zero!			TJH  01-Nov-1987
C	Author						TJH  09-Sep-1987
C
C Function to get a junction into hand and check that it has more than 
C one arm. If not warning messages are generated and if applicable,
C commands sent to the LITES2 file.
C
C Function returns SS$_NORMAL if all is well or one of a variety
C of IPOLYGON message codes if things go wrong.
C
C ......................................................................
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER   JBPOSN	! position of JB containing junction
	INTEGER*2 OFFSET	! offset of junction in JB
	LOGICAL	  ONE_WARN	! /ONEARM=WARN specified?
	LOGICAL   SEED_PT	! seed point feature?
C
C Parameters:
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNPOLYGONS:POLYGONSMSG.PAR'
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
C
C Common:
	INCLUDE		'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE		'LSL$CMNIFF:MD2DES.CMN'
C
C W/s
	INTEGER*2 IECODE,IELEN	! IFF entry code and length
	INTEGER	  JPPOS		! address of JP
	REAL	  JBX,JBY	! position of junction
	CHARACTER*256 MESTXT	! error message text
	INTEGER*2 MESLEN	! temporary variable
	INTEGER*2 NARMS		! number of arms from junction
	REAL	  BUF(2)	! position of junction
	EQUIVALENCE	(JBX,BUF(1))
	EQUIVALENCE	(JBY,BUF(2))
C
C Function:
	INTEGER*2	EXPAND
C
C ......................................................................
C
	CHECK_JUNCTION=%LOC(SS$_NORMAL)
C
C Remember position of the JP that precipitated this check
 	JPPOS=LPOSH
C
C Poke to the junction pointed to by the JP
	CALL IFJPKJ(JBX,JBY,NARMS,JBPOSN,OFFSET)
C
C If the junction has no arms always tell the user! If only one
C arm only tell the user if /ONEARM=WARN was specified
	IF((NARMS.EQ.0)
     &		.OR.(NARMS.EQ.1.AND.ONE_WARN.AND..NOT.SEED_PT))THEN
C
C No arms is pretty serious - ensure that TAB_BUILD knows about this
C and can stop further IPOLYGON processing once the TAB_BUILD checks are
C complete. 
	   IF (NARMS.EQ.0) CHECK_JUNCTION=POLY__BADJUN
	   IF (HAD_LITES) THEN
	      CALL FLWSEL(LITESLUN)
	      CALL FLWRTF('%%MESSAGE Junction check error:')
	   ENDIF
	   IF (HAD_LIS.OR.HAD_LITES) THEN
	      IF (HAD_ABS) THEN
		 MESLEN=EXPAND(
     &			'%WS%^W%N arm junction detected at (%F, %F)',
     &			MESTXT,NARMS,JBX+MD2LOC(1),JBY+MD2LOC(2))
	      ELSE
	         MESLEN=EXPAND(
     &			'%WS%^W%N arm junction detected at (%F, %F)',
     &			MESTXT,NARMS,JBX,JBY)
	      ENDIF
C
	      CALL MES_OUT(BUF,MESTXT,MESLEN)
	   ENDIF
	   CALL LSL_PUTMSG(POLY__BADJUN,NARMS,JBX,JBY)
	ENDIF
C
C Poke back onto the JP position recorded earlier
	CALL IFFPKE(IECODE,IELEN,JPPOS)
	IF (IECODE.NE.'JP'.OR.IELEN.LT.0) THEN
	   CHECK_JUNCTION=POLY__LOST
	   CALL LSL_PUTMSG(CHECK_JUNCTION)
	ENDIF
C
	RETURN
	END
C
