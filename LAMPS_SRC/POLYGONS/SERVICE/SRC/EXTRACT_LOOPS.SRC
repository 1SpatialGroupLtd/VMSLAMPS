C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-05-18 15:28:38.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	LOGICAL*4 FUNCTION EXTRACT_LOOPS(
     &			LAST_SEG_INDEX, MINSEG, MAXSEG, HAD_PERIM)
C
***	MODULE	EXTRACT_LOOPS
***	IDENT	30AP92
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
	INTEGER		LAST_SEG_INDEX	
	INTEGER		MINSEG		
	INTEGER		MAXSEG		
	LOGICAL		HAD_PERIM
C
	LOGICAL*4	ACTUAL_EXTRACT_LOOPS
C
C	........................................................................
C
	EXTRACT_LOOPS = ACTUAL_EXTRACT_LOOPS(
     &			LAST_SEG_INDEX,MINSEG,MAXSEG,HAD_PERIM,
     &			POLMAX,TABMAX,
     &			%VAL( PTR$_POLY_STACK),
     &			%VAL( PTR$_TMP_POLY_STACK),
     &			%VAL( PTR$_SIDE_STACK),
     &			%VAL( PTR$_TMP_SIDE_STACK)
     &		  )
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	LOGICAL*4 FUNCTION ACTUAL_EXTRACT_LOOPS(
     &		LAST_SEG_INDEX,MINSEG,MAXSEG,HAD_PERIM,
     &		POLMAX,TABMAX,
     &		POLY_STACK,TMP_POLY_STACK,SIDE_STACK,TMP_SIDE_STACK)
C
***	MODULE	ACTUAL_EXTRACT_LOOPS
***	IDENT	30OC91
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Author						AC  20-Jun-1987
C
C	Function that takes in a polygon defined as a stack of directed edges
C	POLY_STACK(1:STACK_PTR) and extracts the loops from it - placing them
C	in TMP_POLY_STACK(1:TMP_STACK_PTR). A loop is a set of directed edges 
C	that do not contain the same edge in two directions.
C
C	Note that loops may be nested 
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNPOLYGONS:POLYGONSMSG.PAR'
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
	INTEGER		SS$_ABORT
	EXTERNAL	SS$_ABORT	! failure
C
C Common:
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:STACKS.CMN'
C
C Arguments:
C		- parameters to be passed onto FLUSH_POLY() -
	INTEGER		LAST_SEG_INDEX	!
	INTEGER		MINSEG		!
	INTEGER		MAXSEG		!
	LOGICAL		HAD_PERIM	!
C
C Arguments
	INTEGER*4	POLMAX
	INTEGER*4	TABMAX
C
	INTEGER		POLY_STACK(TABMAX)
	BYTE		SIDE_STACK(TABMAX)
	INTEGER		TMP_POLY_STACK(TABMAX)
	BYTE		TMP_SIDE_STACK(TABMAX)
C
C
C W/s:
	LOGICAL	        DBLE_DIGIT	! flag indicating double digitising
C					! has been detected
	INTEGER		DEPTH		! depth of loop nesting
	INTEGER		SRTS(RINGMAX)	! start and end entries in POLY_STACK
	INTEGER		ENDS(RINGMAX)	! of a loop - ie the same edge in 
C					! different directions
	INTEGER		I,J,K,L		! tmp vars.
	INTEGER		TMP_SRT		! loop variables used for checking for
	INTEGER		TMP_END		! nested loops within found loop
C
C Functions:
	LOGICAL*4	FLUSH_POLY	! creates poly defined in TMP_POLY_STACK
C
C ...................................................................
C
	ACTUAL_EXTRACT_LOOPS=%LOC(SS$_NORMAL)
	DBLE_DIGIT=.FALSE.
C
C	set up conditions as if the entire POLY_STACK is contained between a 
C	pair of reversed segments
	SRTS(1)=0
	ENDS(1)=STACK_PTR+1
	DEPTH=1
C
C ...................................................................
C		F I N D   L O O P
C
C 	SRTS and ENDS are locations of pairs of reversed segments, the 
C	segements that could actually form a loop do not include these
20	I=SRTS(DEPTH)+1
	J=ENDS(DEPTH)-1
C
C 	check that the reversed pair were not adjacent, if so there are no
C	other segments to consider
	IF (I.GT.J) GOTO 30
C
C	check every segment in the new loop
	DO 100 TMP_SRT=I,J-1
C
C	   (except for those segments already used is inner loops)
	   IF (POLY_STACK(TMP_SRT).EQ.0) GOTO 100
C
C	   against every other one 
	   DO 110 TMP_END=TMP_SRT+1,J
C
C	      if (TMP_SRT,TMP_END) form a reversed pair then....
	      IF (POLY_STACK(TMP_SRT)+POLY_STACK(TMP_END).EQ.0) THEN
C
C ...................................................................
C 		S T O R E   N E W   L O O P
C
C		 check there is space to store another loop
		 IF (DEPTH.EQ.RINGMAX) THEN
		    ACTUAL_EXTRACT_LOOPS=POLY__TOOMNYRING
		    CALL LSL_PUTMSG(ACTUAL_EXTRACT_LOOPS,RINGMAX)
		    ACTUAL_EXTRACT_LOOPS=%LOC(SS$_ABORT)
		    GOTO 50
		 ENDIF
C
C		 store details of new loop
		 DEPTH = DEPTH+1
		 SRTS(DEPTH)=TMP_SRT
		 ENDS(DEPTH)=TMP_END	 
C
C		 and try again....
		 GOTO 20
	      ENDIF
110	   CONTINUE
100	CONTINUE
C
C	Can only get here if all the segments between I and J inclusive do not
C	have a reversed pair of segments, so all the non-zero segments must 
C	form a loop
	K = 0
	DO 120 L=I,J
C
C	   if this segment forms part of a loop then....
	   IF (POLY_STACK(L).NE.0) THEN
C
C	      include it on the TMP... stacks for use by FLUSH_POLY()
	      K=K+1
	      TMP_POLY_STACK(K)=POLY_STACK(L)
	      TMP_SIDE_STACK(K)=SIDE_STACK(L)
	      POLY_STACK(L)=0
	   ENDIF	
120	CONTINUE
C
C	if there were any segments forming a loop then create a new polygon
	IF (K.GT.0) THEN
	   TMP_STACK_PTR=K
	   ACTUAL_EXTRACT_LOOPS=FLUSH_POLY(LAST_SEG_INDEX,MINSEG,MAXSEG,
     &		HAD_PERIM,.FALSE.,.FALSE.)
	   IF (.NOT.ACTUAL_EXTRACT_LOOPS) THEN
	      IF (ACTUAL_EXTRACT_LOOPS.NE.POLY__DBLDIG) GOTO 50
	      DBLE_DIGIT=.TRUE.
	      ACTUAL_EXTRACT_LOOPS=%LOC(SS$_NORMAL)
	   ENDIF
	ENDIF

C ...................................................................
C		L O O S E   O L D   L O O P
C
C	if we have now dealt with the first loop then we are finished
30	IF (DEPTH.EQ.1) GOTO 50
C
C	now set the reversed segment pair to zero so they will not be found
C	again, and pop the loop details off the stack
	POLY_STACK(I-1)=0
	POLY_STACK(J+1)=0
	DEPTH=DEPTH-1
C
C 	now that an inner loop has been removed see if the containing loop can
C	be output
	GOTO 20
C
C ...................................................................
C cant combine the next 3 lines into one as fortran whinges
C
50	IF (ACTUAL_EXTRACT_LOOPS.AND.DBLE_DIGIT) THEN
	   ACTUAL_EXTRACT_LOOPS=POLY__DBLDIG	
	ENDIF
C
C ...................................................................
C finished....
	RETURN	
	END
