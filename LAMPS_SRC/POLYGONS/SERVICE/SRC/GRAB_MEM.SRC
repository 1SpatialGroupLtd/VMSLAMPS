	LOGICAL FUNCTION GRAB_MEMORY()
C
***	MODULE	GRAB_MEMORY
***	IDENT	30AP92
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C	........................................................................
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
	INCLUDE 'LSL$CMNPOLYGONS:POLYGONSMSG.PAR'
C
	INTEGER		I8,I4,I2,R8,BY,L1
	PARAMETER (I4 = 4)
	PARAMETER (I8 = 8)
	PARAMETER (I2 = 2)
	PARAMETER (R8 = 8)
	PARAMETER (BY = 1)
	PARAMETER (L1 = 1)
C
C arguments
	LOGICAL  OK
C
	INTEGER*4	MEM_WANTED
	INTEGER*4	MEM_GOT
	INTEGER		MAX_POLMAX
	INTEGER		TEMP
C
C functions
	INTEGER*4	MY_MALLOC
C
C...............................................................................
C	set all the pointers to 0 as no memory has been assigned yet.
C	
	PTR$_COVER_POINT	= 0
	PTR$_COVER_STACK	= 0
	PTR$_DUFF_POLYGON	= 0
	PTR$_INARM_STACK	= 0
	PTR$_ISOL_POLYGON	= 0
	PTR$_JPOFF		= 0
	PTR$_JPTAB		= 0
	PTR$_JUNC_STACK		= 0
	PTR$_NARMS_STACK	= 0
	PTR$_NEST_STACK		= 0
	PTR$_OFFSET_STACK	= 0
	PTR$_PCOVER_BOX		= 0
	PTR$_PCOVER_START	= 0
	PTR$_POLBOX		= 0
	PTR$_POLNEST		= 0
	PTR$_POLY_AREA		= 0
	PTR$_POLY_DONE		= 0
	PTR$_POLY_LIST		= 0
	PTR$_POLY_PARTS		= 0
	PTR$_POLY_PERIM		= 0
	PTR$_POLY_RANGE		= 0
	PTR$_POLY_STACK		= 0
	PTR$_POLY_START		= 0
	PTR$_SEEDBOX		= 0
	PTR$_SEED_ADDRESS	= 0
	PTR$_SEED_COORD		= 0
	PTR$_SEGMENT_INDEX	= 0
	PTR$_SEGTAB		= 0
	PTR$_SIDE_STACK		= 0
	PTR$_STTAB		= 0
	PTR$_TMP_POLY_STACK	= 0
	PTR$_TMP_SIDE_STACK	= 0
	PTR$_TREE_IN_POLY	= 0
	PTR$_TRIEDARM_STACK	= 0
C
	LOC_PTR$_NEST		= 0
	LOC_PTR$_POSPOL		= 0
	LOC_PTR$_PTRS		= 0
	LOC_PTR$_SEG_PAIRED	= 0
	LOC_PTR$_P_PTRS		= 0
	LOC_PTR$_T_PTRS		= 0
	LOC_PTR$_POS_SEED	= 0
	LOC_PTR$_POLY_OUTER	= 0
	LOC_PTR$_MOTHER_POINTER	= 0
C	
	MEM_GOT = 0
	OK = .TRUE.
C
C	........................................................................
C	INTEGER*4	COVER_POINT(-TABMAX:TABMAX,COVMAX)
C
	IF (OK) THEN
	  MEM_WANTED = I4*(2*TABMAX)*COVMAX 
	  PTR$_COVER_POINT = MY_MALLOC(MEM_WANTED)
	  OK = PTR$_COVER_POINT.NE.0
	  IF (OK) MEM_GOT = MEM_GOT + MEM_WANTED
	ENDIF
C
C	........................................................................
C	INTEGER*4	COVER_STACK(TABMAX)
C
	IF (OK) THEN
	  MEM_WANTED = I4*TABMAX
	  PTR$_COVER_STACK = MY_MALLOC( MEM_WANTED)
	  OK = PTR$_COVER_STACK.NE.0
	  IF (OK) MEM_GOT = MEM_GOT + MEM_WANTED
	ENDIF
C
C	........................................................................
C	INTEGER		DUFF_POLYGON((POLMAX+31)/32)
C
	IF (OK) THEN
	  MEM_WANTED = I4*(POLMAX+31)/32
	  PTR$_DUFF_POLYGON = MY_MALLOC( MEM_WANTED)
	  OK = PTR$_DUFF_POLYGON.NE.0
	  IF (OK) MEM_GOT = MEM_GOT + MEM_WANTED
	ENDIF
C
C	........................................................................
C	BYTE		INARM_STACK(TABMAX)
C
	IF (OK) THEN
	  MEM_WANTED = BY*TABMAX
	  PTR$_INARM_STACK = MY_MALLOC( MEM_WANTED)
	  OK = PTR$_INARM_STACK.NE.0
	  IF (OK) MEM_GOT = MEM_GOT + MEM_WANTED
	ENDIF
C
C	........................................................................
C	INTEGER		ISOL_POLYGON((POLMAX+31)/32)
C
	IF (OK) THEN
	  MEM_WANTED = I4*(POLMAX+31)/32 
	  PTR$_ISOL_POLYGON = MY_MALLOC( MEM_WANTED)
	  OK = PTR$_ISOL_POLYGON.NE.0
	  IF (OK) MEM_GOT = MEM_GOT + MEM_WANTED
	ENDIF
C
C	........................................................................
C	INTEGER*2	JPOFF(2,TABMAX)
C
	IF (OK) THEN
	  MEM_WANTED = I2*2*TABMAX 
	  PTR$_JPOFF = MY_MALLOC( MEM_WANTED) 
	  OK = PTR$_JPOFF.NE.0
	  IF (OK) MEM_GOT = MEM_GOT + MEM_WANTED
	ENDIF
C
C	........................................................................
C	INTEGER*4	JPTAB(2,TABMAX)
C
	IF (OK) THEN
	  MEM_WANTED = I4*2*TABMAX 
	  PTR$_JPTAB = MY_MALLOC( MEM_WANTED)
	  OK = PTR$_JPTAB.NE.0
	  IF (OK) MEM_GOT = MEM_GOT + MEM_WANTED
	ENDIF
C
C	........................................................................
C	INTEGER		JUNC_STACK(TABMAX)
C
	IF (OK) THEN
	  MEM_WANTED = I4*TABMAX 
	  PTR$_JUNC_STACK = MY_MALLOC( MEM_WANTED)
	  OK = PTR$_JUNC_STACK.NE.0
	  IF (OK) MEM_GOT = MEM_GOT + MEM_WANTED
	ENDIF
C
C	........................................................................
C	INTEGER*2	NARMS_STACK(TABMAX)
C
	IF (OK) THEN
	  MEM_WANTED = I2*TABMAX
	  PTR$_NARMS_STACK = MY_MALLOC( MEM_WANTED)
	  OK = PTR$_NARMS_STACK.NE.0
	  IF (OK) MEM_GOT = MEM_GOT + MEM_WANTED
	ENDIF
C
C	........................................................................
C	INTEGER		NEST_START(POLMAX+1)
C
	IF (OK) THEN
	  MEM_WANTED = I4* (POLMAX +1) 
	  PTR$_NEST_START = MY_MALLOC( MEM_WANTED)
	  OK = PTR$_NEST_START.NE.0
	  IF (OK) MEM_GOT = MEM_GOT + MEM_WANTED
	ENDIF
C
C	........................................................................
C	INTEGER*2	OFFSET_STACK(TABMAX)
C
	IF (OK) THEN
	  MEM_WANTED = I2*TABMAX 
	  PTR$_OFFSET_STACK = MY_MALLOC( MEM_WANTED)
	  OK = PTR$_OFFSET_STACK.NE.0
	  IF (OK) MEM_GOT = MEM_GOT + MEM_WANTED
	ENDIF
C
C	........................................................................
C	INTEGER		PCOVER_BOX(PCOVER_MAX)
C
	IF (OK) THEN
	  MEM_WANTED = I4*PCOVER_MAX
	  PTR$_PCOVER_BOX = MY_MALLOC( MEM_WANTED)
	  OK = PTR$_PCOVER_BOX.NE.0
	  IF (OK) MEM_GOT = MEM_GOT + MEM_WANTED
	ENDIF
C
C	........................................................................
C	INTEGER		PCOVER_START(POLMAX+1)
C
	IF (OK) THEN
	  MEM_WANTED = I4*(POLMAX+1) 
	  PTR$_PCOVER_START = MY_MALLOC( MEM_WANTED)
	  OK = PTR$_PCOVER_START.NE.0
	  IF (OK) MEM_GOT = MEM_GOT + MEM_WANTED
	ENDIF
C
C	........................................................................
C	INTEGER		POLBOX(PBMAX)
C
	IF (OK) THEN
	  MEM_WANTED = I4*PBMAX
	  PTR$_POLBOX = MY_MALLOC( MEM_WANTED)
	  OK = PTR$_POLBOX.NE.0
	  IF (OK) MEM_GOT = MEM_GOT + MEM_WANTED
	ENDIF
C
C	........................................................................
C	INTEGER		POLNEST(2, POLNEST_MAX)
C
	IF (OK) THEN
	  MEM_WANTED = I4*2*(POLNEST_MAX) 
	  PTR$_POLNEST = MY_MALLOC( MEM_WANTED)
	  OK = PTR$_POLNEST.NE.0
	  IF (OK) MEM_GOT = MEM_GOT + MEM_WANTED
	ENDIF
C
C	........................................................................
C	REAL		POLY_AREA(POLMAX)
C
	IF (OK) THEN
	  MEM_WANTED = I8*POLMAX
	  PTR$_POLY_AREA = MY_MALLOC( MEM_WANTED)
	  OK = PTR$_POLY_AREA.NE.0
	  IF (OK) MEM_GOT = MEM_GOT + MEM_WANTED
	ENDIF
C
C	........................................................................
C	INTEGER		POLY_DONE(POLMAX)
C
	IF (OK) THEN
	  MEM_WANTED = I4*POLMAX
	  PTR$_POLY_DONE = MY_MALLOC( MEM_WANTED)
	  OK = PTR$_POLY_DONE.NE.0
	  IF (OK) MEM_GOT = MEM_GOT + MEM_WANTED
	ENDIF
C
C	........................................................................
C	INTEGER*4	POLY_LIST(2,TABMAX*2)
C
	IF (OK) THEN
	  MEM_WANTED = I4*2*(TABMAX*2)
	  PTR$_POLY_LIST = MY_MALLOC( MEM_WANTED)
	  OK = PTR$_POLY_LIST.NE.0
	  IF (OK) MEM_GOT = MEM_GOT + MEM_WANTED
	ENDIF
C
C	........................................................................
C	INTEGER		POLY_PARTS(2,PARTS_MAX)
C
	IF (OK) THEN
	  MEM_WANTED = I4*2*(PARTS_MAX)
	  PTR$_POLY_PARTS = MY_MALLOC( MEM_WANTED)
	  OK = PTR$_POLY_PARTS.NE.0
	  IF (OK) MEM_GOT = MEM_GOT + MEM_WANTED
	ENDIF
C
C	........................................................................
C	REAL		POLY_PERIM(POLMAX)
C
	IF (OK) THEN
	  MEM_WANTED = R8*POLMAX
	  PTR$_POLY_PERIM = MY_MALLOC( MEM_WANTED)
	  OK = PTR$_POLY_PERIM.NE.0
	  IF (OK) MEM_GOT = MEM_GOT + MEM_WANTED
	ENDIF
C
C	........................................................................
C	REAL		POLY_RANGE(4,POLMAX)
C
	IF (OK) THEN
	  MEM_WANTED = R8*4*POLMAX
	  PTR$_POLY_RANGE = MY_MALLOC( MEM_WANTED)
	  OK = PTR$_POLY_RANGE.NE.0
	  IF (OK) MEM_GOT = MEM_GOT + MEM_WANTED
	ENDIF
C
C	........................................................................
C	INTEGER		POLY_STACK(TABMAX)
C
	IF (OK) THEN
	  MEM_WANTED = I4*TABMAX
	  PTR$_POLY_STACK = MY_MALLOC( MEM_WANTED)
	  OK = PTR$_POLY_STACK.NE.0
	  IF (OK) MEM_GOT = MEM_GOT + MEM_WANTED
	ENDIF
C
C	........................................................................
C	INTEGER		POLY_START(3,POLMAX)
C
	IF (OK) THEN
	  MEM_WANTED = I4*3*POLMAX
	  PTR$_POLY_START = MY_MALLOC( MEM_WANTED)
	  OK = PTR$_POLY_START.NE.0
	  IF (OK) MEM_GOT = MEM_GOT + MEM_WANTED
	ENDIF
C
C	........................................................................
C	INTEGER*2	SEEDBOX(POLMAX+1)
C
	IF (OK) THEN
	  MEM_WANTED = I2*(POLMAX+1)
	  PTR$_SEEDBOX = MY_MALLOC( MEM_WANTED)
	  OK = PTR$_SEEDBOX.NE.0
	  IF (OK) MEM_GOT = MEM_GOT + MEM_WANTED
	ENDIF
C

C
C	........................................................................
C	INTEGER*4	SEED_ADDRESS(TABMAX)
C
	IF (OK) THEN
	  MEM_WANTED = I4*TABMAX
	  PTR$_SEED_ADDRESS= MY_MALLOC( MEM_WANTED)
	  OK = PTR$_SEED_ADDRESS.NE.0
	  IF (OK) MEM_GOT = MEM_GOT + MEM_WANTED
	ENDIF

C	........................................................................
C	REAL		SEED_COORD(2,POLMAX+1)
C
	IF (OK) THEN
	  MEM_WANTED = R8*(POLMAX+1)
	  PTR$_SEED_COORD = MY_MALLOC( MEM_WANTED)
	  OK = PTR$_SEED_COORD.NE.0
	  IF (OK) MEM_GOT = MEM_GOT + MEM_WANTED
	ENDIF
C
C	........................................................................
C	INTEGER*4	SEGMENT_INDEX(-TABMAX:TABMAX)
C
	IF (OK) THEN
	  MEM_WANTED = I4*2*TABMAX
	  PTR$_SEGMENT_INDEX = MY_MALLOC( MEM_WANTED)
	  OK = PTR$_SEGMENT_INDEX.NE.0
	  IF (OK) MEM_GOT = MEM_GOT + MEM_WANTED
	ENDIF
C
C	........................................................................
C	INTEGER*4	SEGTAB(2,TABMAX)
C
	IF (OK) THEN
	  MEM_WANTED = I4*2*TABMAX
	  PTR$_SEGTAB = MY_MALLOC( MEM_WANTED)
	  OK = PTR$_SEGTAB.NE.0
	  IF (OK) MEM_GOT = MEM_GOT + MEM_WANTED

	ENDIF
C
C	........................................................................
C	BYTE		SIDE_STACK(TABMAX)
C
	IF (OK) THEN
	  MEM_WANTED = BY*TABMAX
	  PTR$_SIDE_STACK = MY_MALLOC( MEM_WANTED)
	  OK = PTR$_SIDE_STACK.NE.0
	  IF (OK) MEM_GOT = MEM_GOT + MEM_WANTED
	ENDIF
C
C	........................................................................
C	INTEGER*4	STTAB(2,TABMAX)
C
	IF (OK) THEN
	  MEM_WANTED = I4*2*TABMAX
	  PTR$_STTAB = MY_MALLOC( MEM_WANTED)
	  OK = PTR$_STTAB.NE.0
	  IF (OK) MEM_GOT = MEM_GOT + MEM_WANTED
	ENDIF
C
C	........................................................................
C	INTEGER		TMP_POLY_STACK(TABMAX)
C
	IF (OK) THEN
	  MEM_WANTED = I4*TABMAX
	  PTR$_TMP_POLY_STACK = MY_MALLOC( MEM_WANTED)
	  OK = PTR$_TMP_POLY_STACK.NE.0
	  IF (OK) MEM_GOT = MEM_GOT + MEM_WANTED
	ENDIF
C
C	........................................................................
C	BYTE		TMP_SIDE_STACK(TABMAX)
C
	IF (OK) THEN
	  MEM_WANTED = BY*TABMAX
	  PTR$_TMP_SIDE_STACK = MY_MALLOC( MEM_WANTED)
	  OK = PTR$_TMP_SIDE_STACK.NE.0
	  IF (OK) MEM_GOT = MEM_GOT + MEM_WANTED
	ENDIF
C
C	........................................................................
C	INTEGER		TREE_IN_POLY(POLMAX)
C
	IF (OK) THEN
	  MEM_WANTED = I4*POLMAX
	  PTR$_TREE_IN_POLY = MY_MALLOC( MEM_WANTED)
	  OK = PTR$_TREE_IN_POLY.NE.0
	  IF (OK) MEM_GOT = MEM_GOT + MEM_WANTED
	ENDIF
C
C	........................................................................
C	BYTE		TRIEDARM_STACK(JARMS_MAX,TABMAX)
C
	IF (OK) THEN
	  MEM_WANTED = BY*JARMS_MAX*TABMAX
	  PTR$_TRIEDARM_STACK = MY_MALLOC( MEM_WANTED)
	  OK = PTR$_TRIEDARM_STACK.NE.0
	  IF (OK) MEM_GOT = MEM_GOT + MEM_WANTED
	ENDIF
C
C	........................................................................
C	INTEGER*4	NEST(POLNEST_MAX)
C
	IF (OK) THEN
	  MEM_WANTED = I4*POLNEST_MAX
	  LOC_PTR$_NEST = MY_MALLOC( MEM_WANTED)
	  OK = LOC_PTR$_NEST.NE.0
	  IF (OK) MEM_GOT = MEM_GOT + MEM_WANTED
	ENDIF
C
C	........................................................................
C	INTEGER*4	POSPOL(POSPOL_MAX)
C
	IF (OK) THEN
	  MEM_WANTED = I4*POSPOL_MAX
	  LOC_PTR$_POSPOL = MY_MALLOC( MEM_WANTED)
	  OK = LOC_PTR$_POSPOL.NE.0
	  IF (OK) MEM_GOT = MEM_GOT + MEM_WANTED
	ENDIF
C
C	........................................................................
C	INTEGER*4	PTRS(POLNEST_MAX)
C
	IF (OK) THEN
	  MEM_WANTED = I4*POLNEST_MAX
	  LOC_PTR$_PTRS = MY_MALLOC( MEM_WANTED)
	  OK = LOC_PTR$_PTRS.NE.0
	  IF (OK) MEM_GOT = MEM_GOT + MEM_WANTED
	ENDIF
C
C	........................................................................
C	LOGICAL *1	SEG_PAIRED(TABMAX)
C
	IF (OK) THEN
	  MEM_WANTED = L1*TABMAX
	  LOC_PTR$_SEG_PAIRED = MY_MALLOC( MEM_WANTED)
	  OK = LOC_PTR$_SEG_PAIRED.NE.0
	  IF (OK) MEM_GOT = MEM_GOT + MEM_WANTED
	ENDIF
C
C	........................................................................
C	INTEGER		T_PTRS(POLNEST_MAX)
C
	IF (OK) THEN
	  MEM_WANTED = I4*POLNEST_MAX
	  LOC_PTR$_T_PTRS = MY_MALLOC( MEM_WANTED)
	  OK = LOC_PTR$_T_PTRS.NE.0
	  IF (OK) MEM_GOT = MEM_GOT + MEM_WANTED
	ENDIF
C
C	........................................................................
C	INTEGER		P_PTRS(POLNEST_MAX)
C
	IF (OK) THEN
	  MEM_WANTED = I4*POLNEST_MAX
	  LOC_PTR$_P_PTRS = MY_MALLOC( MEM_WANTED)
	  OK = LOC_PTR$_P_PTRS.NE.0
	  IF (OK) MEM_GOT = MEM_GOT + MEM_WANTED
	ENDIF
C
C	........................................................................
C	INTEGER		POS_SEED (2,POSPOL_MAX)
C
	IF (OK) THEN
	  MEM_WANTED = I4*POLNEST_MAX
	  LOC_PTR$_POS_SEED = MY_MALLOC( MEM_WANTED)
	  OK = LOC_PTR$_POS_SEED.NE.0
	  IF (OK) MEM_GOT = MEM_GOT + MEM_WANTED
	ENDIF
C
C	........................................................................
C	REAL		POLY_OUTER (POLMAX)
C
	IF (OK) THEN
	  MEM_WANTED = R8*POLMAX
	  LOC_PTR$_POLY_OUTER = MY_MALLOC( MEM_WANTED)
	  OK = LOC_PTR$_POLY_OUTER.NE.0
	  IF (OK) MEM_GOT = MEM_GOT + MEM_WANTED
	ENDIF
C
C	........................................................................
C	INTEGER		MOTHER_POINTER (POLMAX)
C
	IF (OK) THEN
	  MEM_WANTED = I4*POLMAX
	  LOC_PTR$_MOTHER_POINTER = MY_MALLOC( MEM_WANTED)
	  OK = LOC_PTR$_MOTHER_POINTER.NE.0
	  IF (OK) MEM_GOT = MEM_GOT + MEM_WANTED
	ENDIF
C
C	........................................................................
C	REAL	RETRACE(2,POLNEST_MAX+3)
C
	IF (OK) THEN
	  MEM_WANTED = R8*2*(POLNEST_MAX+3)
	  LOC_PTR$_RETRACE = MY_MALLOC( MEM_WANTED)
	  OK = LOC_PTR$_RETRACE.NE.0
	  IF (OK) MEM_GOT = MEM_GOT + MEM_WANTED
	ENDIF
C
C	........................................................................
C	if mallocing was unsuccessful, suggest a new value for POLMAX
C
	IF (.NOT.OK) THEN
	  TEMP = (274 + 2*BOXMAX) +
     &		 INT (  REAL( 96+8*COVMAX+JARMS_MAX) *  TABMAX/POLMAX  )
	  MAX_POLMAX = INT(MEM_GOT/TEMP)
C
	  CALL LSL_ADDMSG (POLY__ALLOCD,MEM_GOT)
	  CALL LSL_ADDMSG (POLY__SUGGEST, MAX_POLMAX)
	  CALL WRITEF
	ENDIF
C
C	........................................................................
C
9999	GRAB_MEMORY = OK
	RETURN
	END

C
C
	INTEGER*4 FUNCTION MY_MALLOC( SIZE)
C
***	MODULE	MY_MALLOC
***	IDENT	24AP92
C
C 	Copyright Laser Scan Ltd, Cambridge, England
C
C	........................................................................
C	Author	
C		Sunil Gupta
C
C	History
C		Created					Sunil	24-apr-1992
C
C	Purpose
C		to allocate a contiguous block of memory of the specified number
C		of bytes and return its pointer 
C		
C	........................................................................
C	Notes
C		The function returns the pointer is successful and 0 if not 
C		successful
C
C	........................................................................
C	
	IMPLICIT NONE
C
	INCLUDE 'LSL$CMNPOLYGONS:POLYGONSMSG.PAR'
C
C	Arguments
		INTEGER*4	SIZE
C
C	Functions
		INTEGER*4	LIB$GET_VM
C
C	Local Variables
		INTEGER*4	STATUS
		INTEGER*4	BASE_ADDR
C
C	........................................................................
C	
	STATUS = LIB$GET_VM( SIZE,BASE_ADDR)		!try to get memory
	IF (.NOT.STATUS) THEN
	   BASE_ADDR = 0			! no luck, reset address
	   CALL WRITEF
	   CALL LSL_PUTMSG (POLY__MEMORY)
	   CALL LSL_ADDMSG (STATUS)
	ENDIF
C
C	........................................................................
C
	MY_MALLOC = BASE_ADDR
	RETURN
	END

