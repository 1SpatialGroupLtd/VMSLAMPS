C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-05-13 18:57:18.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	REAL FUNCTION AREA ()
C
***	MODULE AREA
**	IDENT 02AP87
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Coded					TJH 	10-Mar-1987
C
C Finds the signed area of a polygon defined by /POLYGONS/POLY_BUF
C having POLY_PTS defining coordinates.
C
C Area is returned +ve if the string coords. are in anticlockwise order
C -ve if clockwise.
C 
	IMPLICIT NONE
C
C W/s:
	INTEGER       I			! loop var.
	INTEGER       IVRTX		! number of points in poly - 1
C
C Reals:
	REAL		A,X1,Y1,XP,YP	! temp vars.
	REAL		XOFF,YOFF	! coordinate offset from:
	REAL		XORIG,YORIG	! local origin for polygon
C
C Parameters:
	INTEGER*2	X,Y
	PARAMETER 	(X=1, Y=2)
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
C
C Common:
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
C
C ......................................................................
C
	IVRTX=-1
	XORIG=POLY_BUF(X,1)
	YORIG=POLY_BUF(Y,1)
	A=0.0
	DO 50 I=1,POLY_PTS
	   IF (IVRTX) 10,20,30
C
10	   IVRTX=0				! first point
	   GO TO 50
C
20	   IVRTX=1				! second point
	   GO TO 40
C
C ... third and subsequent points.
30	   XOFF=POLY_BUF(X,I)-XORIG
	   YOFF=POLY_BUF(Y,I)-YORIG
	   A=A + (XOFF )     * (YOFF ) +
     &	       (  XP - XOFF) * (  YP + YOFF) +
     &	       (  -XP  )     * (  YP    )
40	   XP=POLY_BUF(X,I)-XORIG
	   YP=POLY_BUF(Y,I)-YORIG
50	CONTINUE
C
	AREA=A/2.0
	RETURN
	END
