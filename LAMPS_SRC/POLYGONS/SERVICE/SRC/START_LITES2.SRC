C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-01-22 17:39:06.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION START_LITES2(LUN,DRANGE,CMDSTR,CMDLEN,IERR)
C
***	MODULE	START_LITES2
***	IDENT	22JA96
C
C	Copyright Laser-Scan Ltd., Cambridge, England
C
C	Author						TJH	15-Apr-1987
C
CMOD	PREP_INFO no longer exists in sharable image of LSLLIB. Caused this
C	routine to fail. Sources of PREP_INFO copied to LOCAL_PREP_INFO. Dont
C	know how long this will continue to work. 	 SG	20-May-1992
C	
CMOD	Pinched and renamed (from START_LCM) for POLYGONS to output 
C	ABSOLUTE coords	 				 JB 	04-Nov-1991
C
CMOD    Prevent program being stuck in infinite loop	 ST	22-Jan-1996
C       when attempting to output qualifiers and their
C	arguments that exceed a line length in the
C       guidance file. Mod 1526.
C
C Function to create a standard IMP pattern log file header.
C
C Function returns one of:
C
C		LSL__NORMAL  - all is well
C		LSL__SYSERR  - failed - system message in IERR
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER*2	LUN	! the LUN of the output file
	REAL		DRANGE(4)! data extent
	CHARACTER*(*)	CMDSTR	! the command line to be printed out
C
C Optional arguments:
	INTEGER	        CMDLEN	! length of command line
	INTEGER	        IERR	! system error return
C
C Parameters:
	INCLUDE '($SSDEF)'
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 'LSL$CMNIFF:MD2DES.CMN'
C
C Workspace:
	INTEGER		CLEN	! temp. cmd line length
	CHARACTER*80	TITSTR	! title string
	INTEGER	        TITLEN	! length of title string
	CHARACTER*80	JPISTR	! the GETJPI line to be printed out
	INTEGER	        JPILEN	! length of GETJPI line
	INTEGER 	ERRET	! error return
	INTEGER		I,J	! temporary variables
	INTEGER		ISTART,IEND,STARTPOS	! temp. vars.
C
C Functions:
	INTEGER EXPAND
	LOGICAL HAVE_I_AN_ARG	! is optional argument present?
	INTEGER SYS$GETJPIW	! get Job/Process Information
	INTEGER LOCAL_PREP_INFO	! prepares data for header
C
C ......................................................................
C
	TITLEN=70
	IF (HAVE_I_AN_ARG(4)) THEN
	   CLEN=CMDLEN
	ELSE
	   CLEN=LEN(CMDSTR)
	ENDIF
C
C Prepare all the data for output - get process info and uppercase and
C remove any trailing spaces from cmd line string
	START_LITES2=LOCAL_PREP_INFO(CMDSTR,CLEN,TITSTR,TITLEN,
     &					JPISTR,JPILEN,ERRET)
 	IF (.NOT.START_LITES2) GOTO 40
C
C If optional 4th argument supplied, return cmd string length less any
C trailing spaces
	IF (HAVE_I_AN_ARG(4)) THEN
	   CMDLEN=CLEN
	ENDIF
C
C and write out all the info
	CALL FLWSEL(LUN)
C
	IF (HAD_ABS) THEN
	  CALL FLWRTF('%%ABSOLUTE %F %F',DRANGE(1)+MD2LOC(1), 
     &					 DRANGE(3)+MD2LOC(2))
	  CALL FLWRTF('%%ABSOLUTE %F %F',DRANGE(2)+MD2LOC(1),
     &					 DRANGE(4)+MD2LOC(2))
	ELSE
	  CALL FLWRTF('%%POSITION %F %F',DRANGE(1),DRANGE(3))
	  CALL FLWRTF('%%POSITION %F %F',DRANGE(2),DRANGE(4))
	ENDIF
C
	CALL FLWRTF('%%ABANDON')
	CALL FLWRTF('%%MESSAGE ')
	CALL FLWRTF('%%MESSAGE                L I T E S 2   '//
     &			'C O M M A N D   F I L E')
	CALL FLWRTF('%%MESSAGE ')
	CALL FLWRTF('%%MESSAGE                              created by')
	CALL FLWRTF('%%MESSAGE ')
	TITSTR='%MESSAGE '//TITSTR(:TITLEN)
	TITLEN=TITLEN+9
	CALL FLWSTR(TITSTR,TITLEN)
	CALL FLWRTF('%%MESSAGE ')
	JPISTR='%MESSAGE '//JPISTR(:JPILEN)
	JPILEN=JPILEN+9
	CALL FLWSTR(JPISTR,JPILEN)
C
	CALL FLWRTF('%%MESSAGE  ')
	CALL FLWRTF('%%MESSAGE Command line:')
	CALL FLWRTF('%%MESSAGE  ')
C
C Now output the command line. Look for suitable breaks if more than
C 68 characters long.
	IEND=0
	ISTART=1
10	STARTPOS = MIN(CLEN,IEND+69)+1
	DO 20 I=STARTPOS,ISTART,-1
	   J=I
	   IF(CMDSTR(I:I).EQ.' '.OR.CMDSTR(I:I).EQ.','.OR.I.EQ.CLEN)THEN
	      GOTO 30
     	   ELSEIF (CMDSTR(I:I).EQ.'/') THEN
	      J=J-1
	      GOTO 30
	   ENDIF
20	CONTINUE
C
C And output each chunck
30	IF (J.LE.ISTART) THEN
	   IEND=J+68
	   CALL FLWRTF('%%MESSAGE %S-',CMDSTR(ISTART:IEND))
	   ISTART = IEND + 1
	ELSE
	   IEND=J
	   CALL FLWRTF('%%MESSAGE %S',CMDSTR(ISTART:IEND))
	   ISTART=IEND+1
	ENDIF
C
C and possibly loop back for the rest of the command line
	IF (ISTART.LT.CLEN) GOTO 10
	CALL FLWRTF('%%MESSAGE ')
	CALL FLWRTF('%%MESSAGE ======================================'//
     &			'================================')
	CALL FLWRTF('%%MESSAGE ')
	CALL FLWRTF('%%ABANDON')
	CALL FLWRTF('%%ABANDON')
C
C ......................................................................
C
40	IF (START_LITES2) THEN
	   START_LITES2=LSL__NORMAL
	   IF (HAVE_I_AN_ARG(5)) THEN
	      IERR=SS$_NORMAL
	   ENDIF
	ELSE
	   START_LITES2=LSL__SYSERR
	   IF (HAVE_I_AN_ARG(5)) THEN
	      IERR=ERRET
	   ENDIF
	ENDIF
C
	RETURN
	END
C
C
C
C
	INTEGER*4 FUNCTION LOCAL_PREP_INFO(CMDSTR,CMDLEN,TITSTR,TITLEN,
     &					JPISTR,JPILEN,IERR)
C
***	MODULE	LOCAL_PREP_INFO
***	IDENT	13AP87
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
CMOD	Modified for general LSLLIB use.		TJH  13-Apr-1987
C	Author						TJH  13-Apr-1987
C
C Function gets process information and trims and uppercases command
C line for the START_LOG and START_LCM functions. 
C
C Function returns one of:
C
C		LSL__NORMAL  - all is well
C		LSL__SYSERR  - failed - system message in IERR
C
	IMPLICIT NONE
C
C Arguments:
	CHARACTER*(*)	CMDSTR	! the command line to be printed out
	INTEGER	        CMDLEN	! length of command line
	INTEGER	        IERR	! system error return
	CHARACTER*(*)	JPISTR	! the GETJPI line to be printed out
	INTEGER	        JPILEN	! length of GETJPI line
	CHARACTER*(*)	TITSTR	! title string
	INTEGER	        TITLEN	! length of title string
	CHARACTER*40	TMPSTR	! temporary string
	INTEGER	        TMPLEN	! temp variable
C
C Functions:
	INTEGER EXPAND
	INTEGER STR$TRIM	! strip trailing spaces/tabs
	INTEGER STR$UPCASE	! uppercase string
	INTEGER SYS$GETJPIW	! get Job/Process Information
C
C Parameters:
	INTEGER   ITMLEN	! size of item list
	PARAMETER (ITMLEN=25)
	INCLUDE '($SSDEF)'
	INCLUDE '($JPIDEF)'
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'
C
C Workspace:
	CHARACTER*39  SEPP	! '=======' separator
	CHARACTER*23  TIME	! as it suggests
	CHARACTER*128 IMAGNAME	! name of image being executed
	INTEGER	      IMAGELEN	! no. of chars
	CHARACTER*15  PRCNAM	! name of process
	INTEGER       PRCLEN	! no. of chars
	CHARACTER*7   TERMINAL	! terminal name
	INTEGER       TERMLEN	! no. of chars
	CHARACTER*15  USERNAME	! name of user
	INTEGER       USERLEN	! no. of chars
	INTEGER	      I,J,K	! temporary variables
	INTEGER       IOSB	! status at completion of Sys service
	INTEGER*2     IOSBW(2)	! bottom word is error code
C
	EQUIVALENCE  (IOSB,IOSBW)
C
	INTEGER*4     ITMLST(ITMLEN)
	INTEGER*2     ITMLST2(2*ITMLEN)
C
	EQUIVALENCE  (ITMLST,ITMLST2)
C
	DATA SEPP/'======================================='/
C
C ......................................................................
C
C Assume the best
	LOCAL_PREP_INFO=SS$_NORMAL
C
C Set up the item list ( see SYSTEM SERVICES Reference Manual)
	ITMLST2(1)=128
	ITMLST2(2)=JPI$_IMAGNAME
	ITMLST (3/2+1)=%LOC(IMAGNAME)
	ITMLST (5/2+1)=%LOC(IMAGELEN)
C
	ITMLST2(7)=7
	ITMLST2(8)=JPI$_TERMINAL
	ITMLST(9/2+1)=%LOC(TERMINAL)
	ITMLST(11/2+1)=%LOC(TERMLEN)
C
	ITMLST2(13)=15
	ITMLST2(14)=JPI$_PRCNAM
	ITMLST (15/2+1)=%LOC(PRCNAM)
	ITMLST (17/2+1)=%LOC(PRCLEN)
C
	ITMLST2(19)=15
	ITMLST2(20)=JPI$_USERNAME
	ITMLST (21/2+1)=%LOC(USERNAME)
	ITMLST (23/2+1)=%LOC(USERLEN)
C
	ITMLST (25/2+1)=0		! to terminate it
C
C Queue the request
	LOCAL_PREP_INFO=SYS$GETJPIW(,		! efn
     &                  ,		! pid
     &                  ,		! prcnam
     &                  ITMLST,		! itmlst
     &                  IOSB,		! iosb
     &                  ,		! astadr
     &                  ,)		! astprm
C
C Branch if failed to queue
	IF (LOCAL_PREP_INFO.NE.SS$_NORMAL) GOTO 20
C
C Did the request complete OK ? - give up if it failed
	IF (IOSBW(1).EQ.SS$_NORMAL) THEN
	   IERR=IOSBW(1)
C
C Tidy things up
	   USERLEN=INDEX(USERNAME,' ')-1
	   IF (USERLEN.LE.0) USERLEN=12
	   IF (TERMLEN.LE.0) THEN
	      TERMLEN=7
	      TERMINAL='UNKNOWN'
	   ENDIF
C
C Extract the image name
	   IMAGNAME=IMAGNAME(INDEX(IMAGNAME,'][') + 1:)
	   I=MAX(INDEX(IMAGNAME,']'),INDEX(IMAGNAME,'>'),
     &		INDEX(IMAGNAME,':')) + 1
	   J=I + INDEX(IMAGNAME(I:),'.') - 2
	   IF (J.LT.I) J=IMAGELEN
C
C Get the time
	   CALL SYS$ASCTIM(,TIME,,)
C
C Make up the title string. First double space the image name characters
	   TMPLEN=1
	   TMPSTR(TMPLEN:TMPLEN)=' '
	   DO 10 K=I,J
	      TMPLEN=TMPLEN+1
	      TMPSTR(TMPLEN:TMPLEN)=IMAGNAME(K:K)
	      TMPLEN=TMPLEN+1
	      TMPSTR(TMPLEN:TMPLEN)=' '
10	   CONTINUE	   
C
C Then calculate length of '====' required to centre TMPSTR in middle of
C a TITLEN length record.
	   K=(TITLEN-TMPLEN)/2
	   TITSTR=SEPP(:K)//TMPSTR(:TMPLEN)//SEPP(:TITLEN-(TMPLEN+K))
C
C Make up the process information string
	   JPILEN=EXPAND('%WS%S invoked by %S using terminal %S at %S'
     &		,JPISTR,IMAGNAME(I:J),USERNAME(:USERLEN),
     &			TERMINAL(:TERMLEN),TIME)
	   
C
C Calc. length of command line string less any trailing spaces.
	   LOCAL_PREP_INFO=STR$TRIM(CMDSTR,CMDSTR,CMDLEN)
	   IF (.NOT.LOCAL_PREP_INFO) GOTO 20
C
C Uppercase the command line
	   LOCAL_PREP_INFO=STR$UPCASE(CMDSTR,CMDSTR)
	ELSE
	   IERR=0			! clear longword
	   IERR = IOSBW(1)		! transfer system error (word)
	ENDIF
C
C ......................................................................
C
C Only here with bad condition value if GETJPIW failed to queue, or one
C of the other system service calls went wrong. 
C
20	IF (LOCAL_PREP_INFO) THEN
	   LOCAL_PREP_INFO=LSL__NORMAL
	ELSE
	   LOCAL_PREP_INFO=LSL__SYSERR
	ENDIF
	RETURN
	END

