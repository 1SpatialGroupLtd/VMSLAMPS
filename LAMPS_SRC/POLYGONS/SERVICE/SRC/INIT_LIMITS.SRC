C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-05-20 11:37:58.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE INIT_LIMITS()
C
***	MODULE	INIT_LIMITS
***	IDENT	30AP92
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
	IMPLICIT NONE
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
	INCLUDE 'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 'LSL$CMNPOLYGONS:POLYGONSMSG.PAR'

	INTEGER		GET_LOGICAL
	INTEGER		LSL_PUTMSG

	INTEGER		AVE_SIDES
	INTEGER		STATUS
C
C	........................................................................
C
	CALL WRITEF()
C
C	........................................................................
C	set the value of POLMAX and report if it is not the default
C
	POLMAX	  = GET_LOGICAL('LSL$POLYGONS_POLMAX',DEF_POLMAX,10,999999)

	IF (POLMAX.EQ.DEF_POLMAX) THEN
	  STATUS = LSL_PUTMSG (POLY__DEFPOL,POLMAX)
	  IF (.NOT.STATUS) CALL LSL_PUTMSG(STATUS)
	ELSE
	  STATUS = LSL_PUTMSG (POLY__POLVAL,POLMAX)
	  IF (.NOT.STATUS) CALL LSL_PUTMSG(STATUS)
	ENDIF
C
C	........................................................................
C
	AVE_SIDES = GET_LOGICAL('LSL$POLYGONS_AVERAGE_SIDES',DEF_SIDES,3,10)
C
	IF (AVE_SIDES.EQ.DEF_SIDES) THEN
	  STATUS = LSL_PUTMSG (POLY__DEFSID,AVE_SIDES)
	  IF (.NOT.STATUS) CALL LSL_PUTMSG(STATUS)
	ELSE
	  STATUS = LSL_PUTMSG (POLY__SIDVAL,AVE_SIDES)
	  IF (.NOT.STATUS) CALL LSL_PUTMSG(STATUS)
	ENDIF
C
C	........................................................................
C
	CALL WRITEF()
C
C	........................................................................
C

	TABMAX		= POLMAX*AVE_SIDES/2
	PBMAX		= BOXMAX*POLMAX/2	! max polygons in box struct
	PCOVER_MAX	= POLMAX*5		! max box references in PCOVER
	POLNEST_MAX	= POLMAX*4		! Max nest references in POLNEST
	POSPOL_MAX	= POLMAX		! Max nest refs per polygon
	PARTS_MAX	= POLMAX*4		! Max entries in POLY__PARTS
C
C	........................................................................
C
	RETURN
	END
