C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-05-14 19:59:50.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	LOGICAL*4 FUNCTION PNT_IN_POLY(POLY_INDX,APOINT,IN)
C
***	MODULE	PNT_IN_POLY
***	IDENT	30AP92
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
C	Arguments:
		INTEGER		POLY_INDX	! the polygon in question
		REAL		APOINT(2)	! the point in question
		INTEGER		IN		! point in polygon?
C
	LOGICAL*4	ACTUAL_PNT_IN_POLY
C
C	........................................................................
C
	PNT_IN_POLY = ACTUAL_PNT_IN_POLY(
     &			POLY_INDX,APOINT,IN,
     &			POLMAX, POLNEST_MAX,
     &			%VAL(PTR$_NEST_START),
     &			%VAL(LOC_PTR$_PTRS),
     &		  )
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	LOGICAL*4 FUNCTION ACTUAL_PNT_IN_POLY(
     &		POLY_INDX, APOINT, IN,
     &		POLMAX, POLNEST_MAX, NEST_START, PTRS)
C
***	MODULE	ACTUAL_PNT_IN_POLY
***	IDENT	18MY88
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Created 						AC 13-May-1988
C
C Function to test whether the point APOINT lies inside the polygon POLY_INDX
C taking into account the holes formed by first order nesting.
C
C IN returns one of 3 values:
C
C		-1 = point outside polygon
C		 0 = point on an edge or vertex
C		 1 = point in polygon
C
C Function returns SS$_NORMAL if all is well or one of a variety of
C IPOLYGON error codes on failure.
C
C ......................................................................
C
	IMPLICIT NONE
C
C Parameters:
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
C
C Common:
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:SECTOR.CMN'
C
C Arguments:
	INTEGER		POLY_INDX	! the polygon in question
	REAL		APOINT(2)	! the point in question
	INTEGER		IN		! point in polygon?

C
	INTEGER*4	POLMAX
	INTEGER*4	POLNEST_MAX
C
	INTEGER		NEST_START(POLMAX+1)
	INTEGER		PTRS(POLNEST_MAX)	! pointers to nested polygons

C W/s:
	LOGICAL		LASTPTR		! pointer to last nested poly
C					! (unused)
	INTEGER		I		! tmp vars
	INTEGER		NNEST		! number of nested polygons
C
C Functions:
	LOGICAL*4	GET_POLY	!
	LOGICAL*4	FIRST_NEST	!
	INTEGER		PNTPOL		!
C
C ......................................................................
C
	ACTUAL_PNT_IN_POLY=%LOC(SS$_NORMAL)
C
C Get the outer boundary of the specified polygon into hand
	POLY_PTS=0
	ACTUAL_PNT_IN_POLY=GET_POLY(POLY_INDX)
	IF (.NOT.ACTUAL_PNT_IN_POLY) GOTO 20
C
C Test whether the point lies within this outer boundary, if it does not then
C the test is the result of ACTUAL_PNT_IN_POLY
	IN = PNTPOL(APOINT,POLY_BUF,POLY_PTS)
	IF (IN.NE.1) GOTO 20
C
C If the polygon has no first order nests then test is complete
	IF (NEST_START(POLY_INDX).LE.0) GOTO 20
C
C The point lies within the outer boundary, now must test whether it lies 
C outside the inner boundaries, so get a list of them
	ACTUAL_PNT_IN_POLY=FIRST_NEST(POLY_INDX,PTRS,NNEST,.TRUE.,LASTPTR)
	IF (.NOT.ACTUAL_PNT_IN_POLY) GOTO 20
C
C ......................................................................
C    L O O P   F O R   E A C H   I N N E R   B O U N D A R Y
C
	DO 10 I=1,NNEST
C
C Get (one of) the inner boundaries into hand
	 	POLY_PTS=0
		ACTUAL_PNT_IN_POLY=GET_POLY(PTRS(I))
		IF (.NOT.ACTUAL_PNT_IN_POLY) GOTO 20
C
C Test where the point lies outside the inner boundary, thus reverse the
C result from PNTPOL noting that the function terminates if the point lies 
C inside the inner boundary (ie outside the polygon) or on the inner boundary
C (ie on the polygon boundary) 
		IN = -PNTPOL(APOINT,POLY_BUF,POLY_PTS)
		IF (IN.NE.1) GOTO 20
C
10	CONTINUE
C
C point lies inside the inner bounadry and outside all the inner boundaries,
C that is it lies inside the polygon and IN has value 1
20	RETURN
	END

