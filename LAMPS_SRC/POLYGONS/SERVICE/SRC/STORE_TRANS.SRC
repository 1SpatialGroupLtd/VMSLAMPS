C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-04-30 18:41:44.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE STORE_TRANS(IN_TRANS,COORD)
C
***	MODULE	STORE_TRANS
***	IDENT	15AU88
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Created 						AC 17-May-1988
C
C ......................................................................
C
	IMPLICIT NONE
C
C Routine to store away transition information in the common block TRANSITIONS.
C The list is ordered according to the value in COORD and the type of transition
C is given by IN_TRANS. The routine keeps the list ordered by a crude insertion
C procedure but the list should not become long. If the list is already full the
C routine does not fail but an overflow flag is set.
C
C Arguments:
	LOGICAL		IN_TRANS	! IN or OUT transition	
	REAL		COORD		! Coordinate of transition
C
C Commons:
	INCLUDE 'LSL$CMNPOLYGONS:TRANSITIONS.CMN'
C	
C W/s:
	INTEGER		I,J		! temporary variables
 	LOGICAL		FOUND		! temporary variable
C
C ......................................................................
C
	FOUND = .FALSE.
C
C Find where, relative to already stored transitions, this transition is located
	DO 100 I=1,NTRANS
C
C If COORD.EQ.TRANS_COORD(I) and this is an OUT transition or ...
		IF (ABS(TRANS_COORD(I)-COORD).LT.TRANS_TOL) THEN
C			IF (.NOT.IN_TRANS) THEN
			IF (IN_TRANS) THEN 
				FOUND = .TRUE.
				GOTO 130
			ENDIF
		ELSE
C
C if COORD.LT.TRANS_COORD(I) then want to insert it before here.
			IF (COORD.LT.TRANS_COORD(I)) THEN
				FOUND = .TRUE.
				GOTO 130
			ENDIF
		ENDIF
100	CONTINUE
C
130	IF (FOUND) THEN
C
C Transition has to be inserted in the middle of the list 
		IF (NTRANS.EQ.MAX_TRANS) THEN
C
C if the maximum number of transitions are already stored then pretend to loose 
C the one at the tail of the list but note that the array has overflowed
			NTRANS = NTRANS-1
			TRANS_OVER = .TRUE.
		ENDIF
C
C move all transitions above the new one up by one place
		DO 120 J=NTRANS,I,-1
			TRANS_COORD(J+1) = TRANS_COORD(J)
			TRANS_IN(J+1) = TRANS_IN(J)
120		CONTINUE
C
C insert the new transition and...
		TRANS_COORD(I) = COORD
		TRANS_IN(I) = IN_TRANS
C
C note we have an extra one on the list
		NTRANS = NTRANS+1
	ELSE
C
C transition to be placed at end of list, 
		IF (NTRANS.EQ.MAX_TRANS) THEN
C
C if lsit is already full then note it has overflowed but store nothing
			TRANS_OVER = .TRUE.
		ELSE
C
C otherwise note we have a new entry on the list and store it away at the end
C of the list
			NTRANS = NTRANS+1
			TRANS_COORD(NTRANS) = COORD
			TRANS_IN(NTRANS) = IN_TRANS
		ENDIF
	ENDIF
C
C Finished...
	RETURN
	END
