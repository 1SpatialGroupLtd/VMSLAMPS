C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-05-18 16:29:14.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
	LOGICAL FUNCTION FIND_CURRENT_ARM(
     &		STPOSN,OP_STPOSN,JUNC,NARMS,FIRST_VERTEX,NXTPTR)
C
C
***	MODULE	FIND_CURRENT_ARM
***	IDENT	30AP92
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
C	Arguments:
		INTEGER   STPOSN	! position of connecting ST in file
		INTEGER   OP_STPOSN	! position of ST at other end of ftr
		INTEGER*2 JUNC		! points to required end (1/2)
C					! JUNC = 1 = last point in feature 
C					! JUNC = 2 = first point in feature 
		INTEGER*2 NARMS		! number of arms from junction
		LOGICAL*1 FIRST_VERTEX	! 1st vertex of link at junction?
		INTEGER*2 VERTEX	! vertex of link at junction
		INTEGER	  NXTPTR	! general segment pointer
C
	LOGICAL	ACTUAL_FIND_CURRENT_ARM
C
C	........................................................................
C
	FIND_CURRENT_ARM = ACTUAL_FIND_CURRENT_ARM(
     &			STPOSN,OP_STPOSN,JUNC,NARMS,FIRST_VERTEX,NXTPTR,
     &			POLMAX,TABMAX,
     &			%VAL( PTR$_SEGTAB),
     &			%VAL( PTR$_STTAB),
     &			%VAL( PTR$_INARM_STACK),
     &		  )
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	LOGICAL FUNCTION ACTUAL_FIND_CURRENT_ARM(
     &		STPOSN,OP_STPOSN,JUNC,NARMS,FIRST_VERTEX,NXTPTR,
     &		POLMAX,TABMAX,
     &		SEGTAB, STTAB,INARM_STACK
     &	)
C
***	MODULE	ACTUAL_FIND_CURRENT_ARM
***	IDENT	30OC91
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
CMOD	Copes with single point ST at end of feature	TJH  28-Mar-1989
C	Author						TJH  02-Sep-1987
C
C
C Function to find 'current arm' in a junction (i.e. the one that we
C have just trotted along to get there).
C
C Function returns SS$_NORMAL if all is well or one of a variety of
C IPOLYGON error codes on failure.
C ......................................................................
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER   STPOSN	! position of connecting ST in file
	INTEGER   OP_STPOSN	! position of ST at other end of ftr
	INTEGER*2 JUNC		! points to required end (1/2)
C				! JUNC = 1 = last point in feature 
C				! JUNC = 2 = first point in feature 
	INTEGER*2 NARMS		! number of arms from junction
	LOGICAL*1 FIRST_VERTEX	! 1st vertex of link at junction?
	INTEGER*2 VERTEX	! vertex of link at junction
	INTEGER	  NXTPTR	! general segment pointer
C
C	Arguments
		INTEGER*4	POLMAX
		INTEGER*4	TABMAX
C
		BYTE		INARM_STACK(TABMAX)
		INTEGER*4	SEGTAB(2,TABMAX)
		INTEGER*4	STTAB(2,TABMAX)
C
C
C Parameters:
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNPOLYGONS:POLYGONSMSG.PAR'
	INCLUDE		'($STSDEF)'
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
C
C Common:
	INCLUDE		'LSL$CMNPOLYGONS:FILE.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:STACKS.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:TABLES.CMN'
	INCLUDE		'LSL$CMNIFF:IFFHAN.CMN'
C
C W/S
	INTEGER*2	I	! loop counter
	INTEGER*2 	IECODE,IELEN	! IFF entry code and length
	INTEGER*2 	IENDS	! line state (coded bitwise)
	CHARACTER*256 	MESTXT	! error message text
	INTEGER*2 	MESLEN	! its length
	INTEGER*2 	NPTS	! number of coord pairs to be read
	INTEGER   	POSN	! position of connecting ST in file
	INTEGER*2 	NXTOFF	! holds offset of next junction (JB)
	REAL	  	JBX,JBY	! junction coords
	INTEGER   	NXTJB	! position of next JB of polygon
C
C Functions:
	INTEGER*2 	EXPAND	! expand text string
C
C ......................................................................
C
	ACTUAL_FIND_CURRENT_ARM=%LOC(SS$_NORMAL)	! assume success
C
C Use JUNC to overcome finding the original arm in a closed loop
C segment which starts and closes at the same junction.
C Be especially careful of a 1 point ST at the end of a feature as
C the vertex = 1 test will go wrong - use the relative addresses of the
C STs to get the right "end"
	DO 10 I = 1,NARMS
	   FIRST_VERTEX=.FALSE.
	   CALL JIHR(I,POSN,VERTEX)
	   IF (POSN.EQ.STPOSN) THEN
	      IF (VERTEX.EQ.1) THEN
	         IF (POSN.EQ.MIN(STPOSN,OP_STPOSN)) THEN
	            FIRST_VERTEX=.TRUE.
	         ENDIF
	      ENDIF
	      IF ((JUNC.EQ.2.AND..NOT.FIRST_VERTEX)
     &			.OR.(JUNC.EQ.1.AND.FIRST_VERTEX)) THEN
	         INARM_STACK(STACK_PTR)=I
	         GOTO 20
	      ENDIF
	   ENDIF
10	CONTINUE
C
C ......................................................................
C
C Unable to find current arm
	IF (HAD_LITES) THEN
	   CALL FLWSEL(LITESLUN)
	   CALL FLWRTF('%%MESSAGE Polygon formation error:')
	ENDIF
	MESLEN=EXPAND('%WS'//
     &	      'Unable to find current arm in feature with'
     &	      //' FSN %N - polygon abandoned'
     &	       ,MESTXT,SEGTAB(1,NXTPTR))
	CALL IFFPKE(IECODE,IELEN,STTAB(1,NXTPTR))
15	IF (IELEN.LT.0) THEN
	   ACTUAL_FIND_CURRENT_ARM=POLY__LOST
	   CALL LSL_PUTMSG(ACTUAL_FIND_CURRENT_ARM)
	   GOTO 20
	ENDIF
	CALL EIHRS(NPTS,IENDS)
	CALL EIHRR(POLY_BUF(1,1),2,1)
	CALL MES_OUT(POLY_BUF(1,1),MESTXT,MESLEN)
	ACTUAL_FIND_CURRENT_ARM=POLY__LOSTARM
20	RETURN
	END
