C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-05-18 15:25:02.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	LOGICAL*4 FUNCTION POLY_COMPLETE(
     &		MINSEG,MAXSEG,LAST_SEG_INDEX,NXTPTR,CLOCK,HAD_PERIM,ONE_USE)
C
***	MODULE	POLY_COMPLETE
***	IDENT	30AP92
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
		INTEGER   MAXSEG	! max number of segments in a polygon
		INTEGER   MINSEG	! min number of segments in a polygon
		INTEGER	  LAST_SEG_INDEX! last segment position in POLY_PARTS
		INTEGER	  NXTPTR	! general segment pointer
		LOGICAL	  CLOCK		! clockwise polygon formation?
		LOGICAL	  HAD_PERIM	! calculate perimeter?
		LOGICAL	  ONE_USE	! /ONEARM=USE speciofied?
C	
	LOGICAL*4	ACTUAL_POLY_COMPLETE
C
C	........................................................................
C
	POLY_COMPLETE = ACTUAL_POLY_COMPLETE(
     &		MINSEG,MAXSEG,LAST_SEG_INDEX,NXTPTR,CLOCK,HAD_PERIM,ONE_USE,
     &			POLMAX, TABMAX,
     &			%VAL(PTR$_POLY_STACK),
     &			%VAL(PTR$_TMP_POLY_STACK),
     &			%VAL(PTR$_SIDE_STACK),
     &			%VAL(PTR$_TMP_SIDE_STACK),
     &			%VAL(LOC_PTR$_SEG_PAIRED)
     &		  )
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	LOGICAL*4 FUNCTION ACTUAL_POLY_COMPLETE(
     &		MINSEG,MAXSEG,LAST_SEG_INDEX,NXTPTR, CLOCK,HAD_PERIM,ONE_USE,
     &		POLMAX, TABMAX, POLY_STACK, TMP_POLY_STACK, SIDE_STACK,
     &		TMP_SIDE_STACK, SEG_PAIRED)
C
***	MODULE	ACTUAL_POLY_COMPLETE
***	IDENT	30OC91
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Author						TJH  03-Sep-1987
C
C Function that takes in a polygon definition as a list of directed edges in
C POLY_STACK(1:STACK_PTR). If an edge is used twice (once in each direction)
C then it cannot contribute to an area boundary. If all the segments can be so
C accounted for then we have the boundary round some isolated linework. Thus
C call FLUSH_POLY() indicating a tree is being output.
C
C Otherwise at least some of the segments form part of an area boundary so pass
C to EXTRACT_LOOPS() to pick out the actual boundary segments.
C
C Function returns SS$_NORMAL if all is well or one of a variety of
C IPOLYGON error codes on failure.
C
	IMPLICIT NONE
C
C
C Parameters:
	INCLUDE 	'LSL$CMNPOLYGONS:POLYGONSMSG.PAR'
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
	INTEGER		SS$_ABORT
	EXTERNAL	SS$_ABORT	! failure
C
C Common:
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:STACKS.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:TABLES.CMN'
C
C Arguments:
	INTEGER   MAXSEG	! max number of segments in a polygon
	INTEGER   MINSEG	! min number of segments in a polygon
	INTEGER	  LAST_SEG_INDEX! last segment position in POLY_PARTS
	INTEGER	  NXTPTR	! general segment pointer
	LOGICAL	  CLOCK		! clockwise polygon formation?
	LOGICAL	  HAD_PERIM	! calculate perimeter?
	LOGICAL	  ONE_USE	! /ONEARM=USE speciofied?
C
	INTEGER*4	POLMAX
	INTEGER*4	TABMAX
	INTEGER		POLY_STACK(TABMAX)
	INTEGER		TMP_POLY_STACK(TABMAX)
	BYTE		SIDE_STACK(TABMAX)
	BYTE		TMP_SIDE_STACK(TABMAX)
	LOGICAL*1	SEG_PAIRED(TABMAX) ! .T. then the same segment in the 
C					! opposite dirn also in the segment list
C
C W/s:
	INTEGER		I,J		! loop vars
	LOGICAL		TREE_FLAG	! segment list represents a tree
C Functions:
	LOGICAL		EXTRACT_LOOPS 	! breaks up segment list into polys
	LOGICAL		FLUSH_POLY	! outputs segment list as a tree
C
C ......................................................................
C
	ACTUAL_POLY_COMPLETE=%LOC(SS$_NORMAL)
C
C If using segments that do not necessarily form part of a boundary between 
C two DIFFERENT polygons then....
 	IF (ONE_USE) THEN
C
C By default assume the stack is not a tree
	   TREE_FLAG=.FALSE.
C
C If there are an odd number of segments then obviously not a tree
	   IF (MOD(STACK_PTR,2).NE.0) THEN
	      GOTO 60
	   ENDIF
C
C Now check to see if there are any unmatched segments
	   CALL VIOCLR(SEG_PAIRED(1),STACK_PTR,.FALSE.)
	   DO 40 I=1,STACK_PTR-1
	      IF (SEG_PAIRED(I)) GOTO 40
	      DO 50 J=I+1,STACK_PTR
		 IF (SEG_PAIRED(J)) GOTO 50
C
C POLY_STACK(I) and POLY_STACK(J) represent the same segment going in opposite
C directions - thus cannot contribute to an areal boundary
		 IF (POLY_STACK(I)+POLY_STACK(J).EQ.0) THEN
		    SEG_PAIRED(I)=.TRUE.
		    SEG_PAIRED(J)=.TRUE.
		    GOTO 40
		 ENDIF
50	      CONTINUE
C
C did not manage to pair up segment I, thus not a tree...
	      GOTO 60
40	   CONTINUE
C
C Every segment had a reversed segment, thus it is a tree....
	   TREE_FLAG=.TRUE.
C
C Transfer the whole of POLY_STACK to TMP_POLY_STACK and....
60	   DO 100 I=1,STACK_PTR
	      TMP_POLY_STACK(I) = POLY_STACK(I)
	      TMP_SIDE_STACK(I) = SIDE_STACK(I)
100	   CONTINUE
	   TMP_STACK_PTR = STACK_PTR
C
C output it via FLUSH_POLY as a tree
	   ACTUAL_POLY_COMPLETE=FLUSH_POLY(LAST_SEG_INDEX,MINSEG,MAXSEG,
     &		HAD_PERIM,.TRUE.,TREE_FLAG)
	ELSE
C ......................................................................
C
C If we are being careful to ignore segments that boundaries between different
C parts of the SAME polygon then....
C
	   ACTUAL_POLY_COMPLETE=EXTRACT_LOOPS(LAST_SEG_INDEX,MINSEG,MAXSEG,
     &		HAD_PERIM)
	ENDIF

10	RETURN
	END
