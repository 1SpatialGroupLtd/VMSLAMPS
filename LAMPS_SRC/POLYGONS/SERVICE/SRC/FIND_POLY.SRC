C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-05-14 19:43:06.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	LOGICAL*4 FUNCTION FIND_POLY(APOINT,POLY_INDX)
C
C
***	MODULE	FIND_POLY
***	IDENT	30AP92
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
	REAL		APOINT(2)	! The point being tested for
	INTEGER		POLY_INDX	! the returned polygon index
C
	LOGICAL*4	ACTUAL_FIND_POLY
C
C	........................................................................
C
	FIND_POLY = ACTUAL_FIND_POLY(
     &			APOINT,POLY_INDX,
     &			POLMAX,PBMAX,
     &			%VAL( PTR$_POLBOX),
     &			%VAL( PTR$_POLY_START)
     &		  )
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	LOGICAL*4 FUNCTION ACTUAL_FIND_POLY(APOINT,POLY_INDX,
     &			POLMAX,PBMAX,POLBOX,POLY_START)
C
***	MODULE	ACTUAL_FIND_POLY
***	IDENT	12OC88
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
CMOD	Modified to deal with empty sectors correctly	AC 12-Oct-1988
C	Created 					AC 03-Jun-1988
C
C	Routine to find the polygon that contains the location APOINT
C	Does this by checking all polygons via the sectored spatial index
C	Uses PNT_IN_POLY() to check for inclusion - thus takes into account
C	first order nesting
C
	IMPLICIT NONE
C
C Parameters:
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
C
C Common:
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:SECTOR.CMN'
C
C Arguments:
	REAL		APOINT(2)	! The point being tested for
	INTEGER		POLY_INDX	! the returned polygon index
C
C	Arguments
		INTEGER*4	POLMAX
		INTEGER*4	PBMAX
C
		INTEGER		POLBOX(PBMAX)
		INTEGER		POLY_START(3,POLMAX)
C
C					! a value of -1 indicates no polygon
C					! was found
C W/s:
	REAL		DX,DY		! real-space coordinates
	INTEGER		NX,NY,NUM	! box coordinates
	INTEGER		I		! index into array
	INTEGER		IN		! indicates inside/outside
	INTEGER		FLAG		! termination flag
	INTEGER		P		! current poly being tested
C
C Functions:
	LOGICAL*4	PNT_IN_POLY	! checks point-in-polygon
C
C ...........................................................................
C
C By default we have not found the polygon
	POLY_INDX = -1
C
C Move into sector space
	DX = APOINT(1) - BOXORIX
	DY = APOINT(2) - BOXORIY
C
C If outside (to the left or below) then cannot find a polygon
	IF ((DX.LT.0.0).OR.(DY.LT.0.0)) GOTO 10
C
C Move into sector coordinates
	NX = DX/BOXSTPX
	NY = DY/BOXSTPY
C
C If outside (to the right or above) then cannot find a polygon
	IF ((NX.GE.NUMBOX).OR.(NY.GE.NUMBOY)) GOTO 10
C
C Find box containing point
	NUM = NY*NUMBOX + NX + 1
	I = PBOX_START(NUM)
	IF (I.LE.0) GOTO 10
	FLAG = ISIGN(1,POLBOX(I))
C
C loop thru all polygons in box (using polygon sign as termination flag)
20	P = 0
	P = ABS(POLBOX(I))
C
C do not test isolations or bounding polygon
	IF ((POLY_START(1,P).LT.0).OR.(P.EQ.BOUND_POL)) GOTO 30
C
C check for inclusion in this polygon
	ACTUAL_FIND_POLY = PNT_IN_POLY(P,APOINT(1),IN)
	IF (.NOT.ACTUAL_FIND_POLY) GOTO 10
C
C if found then return
	IF (IN.EQ.1) THEN
		POLY_INDX = P
		GOTO 10	
	ENDIF
C
C loop back if more polygons	
30	I = I+1
	IF (ISIGN(1,POLBOX(I)).EQ.FLAG) GOTO 20
C
10	RETURN
	END

