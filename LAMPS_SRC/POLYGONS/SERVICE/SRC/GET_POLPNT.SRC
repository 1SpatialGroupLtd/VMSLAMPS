C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-05-14 18:50:46.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	LOGICAL*4 FUNCTION GET_POLPNT(APOINT,POLY_INDEX)
C
***	MODULE	GET_POLPNT
***	IDENT	30AP92
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
C	Arguments:
		REAL	APOINT(2)		! a polygon coordinate
		INTEGER	POLY_INDEX		! from this polygon
C
	LOGICAL*4	ACTUAL_GET_POLPNT
C
C	........................................................................
C
	GET_POLPNT = ACTUAL_GET_POLPNT(
     &		APOINT,POLY_INDEX,
     &		POLMAX,PARTS_MAX,TABMAX,
     &		%VAL(PTR$_POLY_PARTS),
     &		%VAL(PTR$_POLY_STACK),
     &		%VAL(PTR$_POLY_START),
     &		%VAL(PTR$_SEGTAB)
     &	  )
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	LOGICAL*4 FUNCTION ACTUAL_GET_POLPNT(APOINT,POLY_INDEX,
     &		POLMAX,PARTS_MAX,TABMAX,
     &		 POLY_PARTS, POLY_STACK, POLY_START,SEGTAB)
C
***	MODULE	ACTUAL_GET_POLPNT
***	IDENT	05MR87
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Author						TJH  05-Mar-1987
C
C
C Function to get a single coordinate (APOINT) from polygon POLY_INDEX.
C
C Function returns SS$_NORMAL if all is well or one of a variety of
C IPOLYGON error codes on failure.
C
C ......................................................................
C
	IMPLICIT NONE
C
C Arguments:
	REAL	APOINT(2)	! a polygon coordinate
	INTEGER	POLY_INDEX		! from this polygon
C
	INTEGER*4	POLMAX
	INTEGER*4	PARTS_MAX
	INTEGER*4	TABMAX
C
	INTEGER		POLY_PARTS(2,PARTS_MAX)
	INTEGER		POLY_STACK(TABMAX)
	INTEGER		POLY_START(3,POLMAX)
	INTEGER*4	SEGTAB(2,TABMAX)
C
C Parameters:
	INTEGER*2	X,Y
	PARAMETER 	(X=1, Y=2)
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNPOLYGONS:POLYGONSMSG.PAR'
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
C
C Common:
	INCLUDE		'LSL$CMNPOLYGONS:FILE.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:TABLES.CMN'
C
C W/s
	INTEGER*2 IECODE,IELEN	! IFF entry code and length
	INTEGER*2 IENDS		! line state (coded bitwise)
	INTEGER*2 NPTS		! number coords to be read/reversed
	INTEGER   SEGPTR	! pointer into SEGTAB
C
C ......................................................................
C
	ACTUAL_GET_POLPNT=%LOC(SS$_NORMAL)
C
	SEGPTR=IABS(POLY_START(1,POLY_INDEX))
C
C Jump to first segment of the polygon (IFF address stored
C in /TABLES/SEGTAB)
	CALL IFFPKE(IECODE,IELEN,
     &				SEGTAB(2,ABS(POLY_PARTS(1,SEGPTR))))
	IF (IELEN.LE.-1) GOTO 20	! eof?
C
C Landed on start of feature OK?
	IF (IECODE.NE.'NF') THEN
	   ACTUAL_GET_POLPNT=POLY__LOST	! it would appear not!!
	   CALL LSL_PUTMSG(ACTUAL_GET_POLPNT,IECODE)
	   GOTO 30
	ENDIF
C
10	CALL IFFNXT(IECODE,IELEN)
	IF (IELEN.LE.-1) GOTO 20	! eof?
	IF (IECODE.NE.'ST') GOTO 10
	CALL EIHRS(NPTS,IENDS)
	CALL EIHRR(APOINT(X),2,1)
	GOTO 30
C
C ......................................................................
C
C Unexpected end of file
20	ACTUAL_GET_POLPNT=POLY__UNEXPEOF
	CALL LSL_PUTMSG(ACTUAL_GET_POLPNT,SEED_FILE(:SEED_LEN))
C
30	RETURN
	END
