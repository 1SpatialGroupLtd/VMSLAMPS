C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-05-05 12:36:40.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION GET_ST_ADDRESSES(STPOSN,LAST_STPOSN)
C
***	MODULE	GET_ST_ADDRESSES
***	IDENT	03SE87
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Author						TJH  03-Sep-1987
C
C
C Before we can find the 'current' arm in a junction we must determine
C whether there is more than one ST in the current inter-junction link.
C We currently only have the address of the 1st ST (in STPOSN) and this
C will not match the address in the JB if the junction is at the far end
C of the link in another ST. We must therefore calc the address of the
C ST (if any) at the far end of the link. 
C
C If only 1 ST in link LAST_STPOSN = STPOSN.
C
C Function returns SS$_NORMAL if all is well or one of a variety of
C IPOLYGON error codes on failure.
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER   LAST_STPOSN	! position of last ST in feature
	INTEGER   STPOSN	! position of 1st ST in feature
C
C Parameters:
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNPOLYGONS:POLYGONSMSG.PAR'
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
C
C Common:
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:TABLES.CMN'
	INCLUDE		'LSL$CMNIFF:IFFHAN.CMN'
C
C W/s
	INTEGER*2 IECODE,IELEN	! IFF entry code and length
C
C ......................................................................
C
	GET_ST_ADDRESSES=%LOC(SS$_NORMAL)
C
	LAST_STPOSN=STPOSN
	CALL IFFPKE(IECODE,IELEN,STPOSN)
	IF (IELEN.LT.0) THEN
	   GET_ST_ADDRESSES=POLY__LOST
	   CALL LSL_PUTMSG(GET_ST_ADDRESSES)
	   GOTO 20
	ENDIF
10	CALL IFFNXT(IECODE,IELEN)
	IF (IELEN.LT.0) THEN
	   GET_ST_ADDRESSES=POLY__LOST
	   CALL LSL_PUTMSG(GET_ST_ADDRESSES)
	   GOTO 20
	ENDIF
	IF (IECODE.EQ.'ST') THEN
	   LAST_STPOSN=LPOSH
	ELSEIF (IECODE.EQ.'EF') THEN
	   GOTO 20
	ENDIF
	GOTO 10
20	RETURN
	END
