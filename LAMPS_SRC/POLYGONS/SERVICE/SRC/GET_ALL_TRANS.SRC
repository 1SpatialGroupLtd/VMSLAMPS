	LOGICAL*4 FUNCTION GET_ALL_TRANS(POLY,INDX,VERT,CLOCK,COORD)
C
***	MODULE	GET_ALL_TRANS
***	IDENT	12AU88
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Created 						AC 17-May-1988
C
C	Function to get all the transitions along the VERT/horz section with
C	X/y coordinate COORD. POLY indicates whether INDX is the identifier
C	of a polygon boundary or internal linework.
C
C ......................................................................
C
	IMPLICIT NONE
C
C Parameters:
	INTEGER		SS$_NORMAL
	EXTERNAL 	SS$_NORMAL	! normal successful completion
	INCLUDE		'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNPOLYGONS:POLYGONSMSG.PAR'
C
C Commons:
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
C
C Arguments:
C
	LOGICAL		POLY		! not a zero-area polygon?
	INTEGER		INDX		! the tree or polygon in question
	LOGICAL		CLOCK		! .T. the polygon boundary is clockwise
	LOGICAL		VERT		! .T. the inter. line is vertical
	REAL		COORD		! x/y coordinate of inter. line
C
C W/s:
	REAL		SRT_PT(2)	! start point of current vector
	REAL		END_PT(2)	! end point of current vector
	INTEGER		I		! temporary variable
	LOGICAL		FIRST_VEC	! .T. untill vector is processed
	LOGICAL		TCLOCK		! (anti)clockwise taking into account
C					! x <-> y reflection
C
C					! Details of how vector intersects
C					! intersection line
	LOGICAL		DIRN		!	dirn of vector
	REAL		INTER_PT	!	coord of intersection
	INTEGER		INTER_TYPE	!	type of intersection
C
	LOGICAL		TRANS_TYPE	! .T.    IN type transition
C					! .F.   OUT type transition
C
C Functions:
	LOGICAL*4	GET_POLY	! gets a polygon into hand
	LOGICAL*4	GET_TREE	! gets a tree into hand
C
C ......................................................................
C
	GET_ALL_TRANS = %LOC(SS$_NORMAL)
	TCLOCK = CLOCK
C
C Get the specified polygon (or tree) into hand
	POLY_PTS=0
	IF (POLY) THEN
		GET_ALL_TRANS=GET_POLY(INDX)
	ELSE
		GET_ALL_TRANS=GET_TREE(INDX)
	ENDIF
	IF (.NOT.GET_ALL_TRANS) GOTO 85
C
C If intersection line is horizontal then need to reverse ordering
 	IF (.NOT.VERT) TCLOCK = .NOT.TCLOCK
C
C As yet no vectors have been processed
	FIRST_VEC = .TRUE.
C
C set up a few variables to make life easier later on
	I = 1
	END_PT(1) = POLY_BUF(1,I)
	END_PT(2) = POLY_BUF(2,I)
C
C move onto next point
80	I = I+1
C
C if all points have been exhausted finish off. This explicit test is 
C used instead of a DO loop because new points may be tagged onto the 
C end of POLY_BUF and the value of POLY_PTS altered
	IF (I.GT.POLY_PTS) GOTO 85
C
C set up next vector
	SRT_PT(1) = END_PT(1)
	SRT_PT(2) = END_PT(2)
	END_PT(1) = POLY_BUF(1,I)
	END_PT(2) = POLY_BUF(2,I)
C
C determine how vector intersects with inter. line
	CALL GET_INTER(VERT,COORD,SRT_PT,END_PT,INTER_TYPE,INTER_PT,DIRN)
C
C goto NOINTER, COINC, TERMINATE, CROSS, START
	GOTO (80,300,310,320,330), INTER_TYPE
C
C vector is COINCIDENT with intersection line
300	IF (FIRST_VEC) THEN
C
C if no vector has been processed and there is space left...
 		IF (POLY_PTS.EQ.POLY_BUF_MAX) THEN
			GET_ALL_TRANS = POLY__POLPTS
			GOTO 85
		ENDIF
C
C then store this point onto end of polygon to be processed again later
		POLY_PTS = POLY_PTS+1
		POLY_BUF(1,POLY_PTS) = END_PT(1)
		POLY_BUF(2,POLY_PTS) = END_PT(2)
	ENDIF
	GOTO 80	      
C
C vector TERMINATES on intersection line, note that a vector has been processed
310	FIRST_VEC = .FALSE.
C
C determine transition type and note that the vector terminated on the inter. 
C line. The actual transition point cannot be determined untill the next vector
C that starts on the inter. line is processed
	TRANS_TYPE = ((TCLOCK.AND..NOT.DIRN).OR.(.NOT.TCLOCK.AND.DIRN))
	CALL HALF_TRANS(.TRUE.,TRANS_TYPE,INTER_PT)
	GOTO 80
C
C vector CROSSES intersection line, note that a vector has been processed
320	FIRST_VEC = .FALSE.
C
C determine transition type and store away transition point directly
	TRANS_TYPE = ((TCLOCK.AND..NOT.DIRN).OR.(.NOT.TCLOCK.AND.DIRN))
	CALL STORE_TRANS(TRANS_TYPE,INTER_PT)
	GOTO 80
C
C vector STARTS on intersection line
330	IF (FIRST_VEC) THEN
C
C if no vector has been processed and there is space left...
 		IF (POLY_PTS.EQ.POLY_BUF_MAX) THEN
			GET_ALL_TRANS = POLY__POLPTS
			GOTO 85
		ENDIF
C
C then store this point onto end of polygon to be processed again later
		POLY_PTS = POLY_PTS+1
		POLY_BUF(1,POLY_PTS) = END_PT(1)
		POLY_BUF(2,POLY_PTS) = END_PT(2)
	ELSE	      
C
C otherwise note the transition type and note that vector started on inter. line
C this means that the correct transitions can be determined from this point and
C the one before that terminated on the inter. line
		TRANS_TYPE = ((TCLOCK.AND..NOT.DIRN).OR.(.NOT.TCLOCK.AND.DIRN))
		CALL HALF_TRANS(.FALSE.,TRANS_TYPE,INTER_PT)
	ENDIF
	GOTO 80
C
C finished...
85	RETURN
	END

