	SUBROUTINE GET_INTER(VERTICAL,LINE_VAL,SRT_PT,END_PT,
     &					INTER_TYPE,INTER_PT,DIRN)
C
***	MODULE	GET_INTER
***	IDENT	17MY88
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Created 						AC 16-May-1988
C
C Subroutine which determines where the vector specified by SRT_PT and END_PT 
C intersects with the vertical (VERTICAL.EQ..TRUE.) or horizontal (VERTICAL.EQ.
C .FALSE.) line with coordinate LINE_VAL. This second line is called the
C intersection line. 
C
C 	INTER_TYPE:	1    	   - vector does not intersect the inter. line
C 			2 	   - vector and inter. line are coincident
C			3	   - vector terminates on inter. line
C			4	   - vector crosses the inter. line
C			5	   - vector starts on inter. line
C
C	INTER_PT:       x/y	   - coordinate of intersection on inter. line
C
C	DIRN:	        .TRUE.	   - END_PT.GT.SRT_PT in dirn of inter. line
C		        .FALSE.	   - END_PT.LT.SRT_PT in dirn of inter. line
C
C ......................................................................
C
	IMPLICIT NONE
C
C Arguments:
	LOGICAL		VERTICAL	! vertical/horizontal inter. line
	REAL		SRT_PT(2)	! start point of vector being tested
	REAL		END_PT(2)	! end point of vector being tested
	REAL		LINE_VAL	! the X/Y coordinate of the inter. line
	INTEGER		INTER_TYPE	! type of intersection
	REAL		INTER_PT	! coordinate of intersection
	LOGICAL		DIRN		! direction of intersection
C
C W/s:
	REAL		DX0,DX1		! vector x coordinates measured from 
C					! vertical inter. line
	REAL		DY0,DY1		! vector y coordinates measured from 
C					! horizontal inter. line
	LOGICAL		SRT_ON_LINE	! SRT_PT lies on the inter. line
	LOGICAL		END_ON_LINE	! END_PT lies on the inter. line
C
C ......................................................................
C
C Deal with vertical and horizontal intersection lines separately
	IF (.NOT.VERTICAL) GOTO 10
C
C ......................................................................
C    V E R T I C A L   I N T E R S E C T I O N   L I N E
C
C Get shortest distance between start and end points and intersection line
	DX0 = SRT_PT(1)-LINE_VAL
	DX1 = END_PT(1)-LINE_VAL
C
C Determine whether start and end points actually lie on the intersection line
	SRT_ON_LINE = (ABS(DX0).LT.1.0E-8)
	END_ON_LINE = (ABS(DX1).LT.1.0E-8)
C
C If both start and end points lie on the intersection line then the vector and
C line are coincident
	IF (SRT_ON_LINE.AND.END_ON_LINE) THEN
		INTER_TYPE = 2
		GOTO 20
	ENDIF
C
C Note in which direction the vector crosses the intersection line, if indeed it
C does
	DIRN = (DX1.GT.DX0)	
C
C If both start and end points do not lie on the intersection line then...
	IF (.NOT.SRT_ON_LINE.AND..NOT.END_ON_LINE) THEN
C
C either the vector does not intersect the line...
		IF (DX0*DX1.GT.0.0) THEN
			INTER_TYPE = 1
			GOTO 20
		ENDIF
C
C or it does. In the latter case the Y coordinate of the intersection must be 
C calculated and the type of intersection noted
		INTER_TYPE = 4
		INTER_PT = SRT_PT(2) - DX0*(END_PT(2)-SRT_PT(2))/(DX1-DX0)
		GOTO 20
	ENDIF
C
C If one of the vector end points lies on the intersection line then its Y
C coordinate can be used for the intersection point. Remember to note the type
C of intersection found
	IF (SRT_ON_LINE) THEN
		INTER_TYPE = 5
		INTER_PT = SRT_PT(2)
	ELSE
		INTER_TYPE = 3
		INTER_PT = END_PT(2)
	ENDIF			
C
C finished...		
	GOTO 20
C
C ......................................................................
C    H O R I Z O N T A L   I N T E R S E C T I O N   L I N E
C
C Get shortest distance between start and end points and intersection line
10	DY0 = SRT_PT(2)-LINE_VAL
	DY1 = END_PT(2)-LINE_VAL
C
C Determine whether start and end points actually lie on the intersection line
	SRT_ON_LINE = (ABS(DY0).LT.1.0E-8)
	END_ON_LINE = (ABS(DY1).LT.1.0E-8)
C
C If both start and end points lie on the intersection line then the vector and
C line are coincident
	IF (SRT_ON_LINE.AND.END_ON_LINE) THEN
		INTER_TYPE = 2
		GOTO 20
	ENDIF
C
C Note in which direction the vector crosses the intersection line, if indeed it
C does
	DIRN = (DY1.GT.DY0)	
C
C If both start and end points do not lie on the intersection line then...
	IF (.NOT.SRT_ON_LINE.AND..NOT.END_ON_LINE) THEN
C
C either the vector does not intersect the line...
		IF (DY0*DY1.GT.0.0) THEN
			INTER_TYPE = 1
			GOTO 20
		ENDIF
C
C or it does. In the latter case the X coordinate of the intersection must be 
C calculated and the type of intersection noted
		INTER_TYPE = 4
		INTER_PT = SRT_PT(1) - DY0*(END_PT(1)-SRT_PT(1))/(DY1-DY0)
		GOTO 20
	ENDIF
C
C If one of the vector end points lies on the intersection line then its X
C coordinate can be used for the intersection point. Remember to note the type
C of intersection found
	IF (SRT_ON_LINE) THEN
		INTER_TYPE = 5
		INTER_PT = SRT_PT(1)
	ELSE
		INTER_TYPE = 3
		INTER_PT = END_PT(1)
	ENDIF			
C
C finished...		
20	RETURN
	END

