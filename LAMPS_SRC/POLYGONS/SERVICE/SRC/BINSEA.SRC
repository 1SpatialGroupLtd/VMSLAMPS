C-------------------------------------------------------------------------------

C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	LOGICAL FUNCTION BINSEA(RESULT,VALUE,FSN,COORD)
C
***	MODULE	BINSEA
***	IDENT	30AP92
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
C Arguments
	INTEGER*4 RESULT	! result of search
	INTEGER*4 VALUE		! search value
	INTEGER*4 FSN		! feature serial no.
	REAL	  COORD(2)	! position for LITES2 error
C
	LOGICAL	ACTUAL_BINSEA
C
C	........................................................................
C
	BINSEA = ACTUAL_BINSEA(
     &			RESULT,VALUE,FSN,COORD,
     &			POLMAX,TABMAX,
     &			%VAL(PTR$_STTAB)
     &		  )
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	LOGICAL FUNCTION ACTUAL_BINSEA(
     &		RESULT,VALUE,FSN,COORD,
     &		POLMAX,TABMAX, STTAB)
C
***	MODULE	ACTUAL_BINSEA
***	IDENT	30OC91
C
C Copyright Laserscan Laboratories Limited, Cambridge, England.
C
C
C	Ripped off from Bob Daly's CODSEG code and
C	converted to LSLLIB				TJH 24-Feb-1987
C	MOD  RESULT changed to INTEGER*4		DRC 24-Oct-1988
C
C Binary search to find the entry (RESULT) whose value in
C STTAB is the same as the search value (VALUE). Current segment
C FSN passed from FORM_POLYGONS is (FSN). If no identical
C value is found then the one immediately below is chosen.
C The number of entries in STTAB is defined by LIMIT (>=1).
C
C Function returns SS$_NORMAL if successful, POLY__NOARM if fails
C
C ......................................................................
C
	IMPLICIT NONE
C
C Arguments
	INTEGER*4 RESULT	! result of search
	INTEGER*4 VALUE		! search value
	INTEGER*4 FSN		! feature serial no.
	REAL	  COORD(2)	! position for LITES2 error
C
C Other Arguments
	INTEGER*4	POLMAX
	INTEGER*4	TABMAX
	INTEGER*4	STTAB(2,TABMAX)
C
C
C Parameters:
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNPOLYGONS:POLYGONSMSG.PAR'
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
C
C Common:
	INCLUDE		'LSL$CMNPOLYGONS:TABLES.CMN'
C
C W/s
	CHARACTER*256 MESTXT	! error message text
	INTEGER*2 MESLEN	! its length
	INTEGER*4 BASE,TOP,SPLIT
C
C Function:
	INTEGER*2 EXPAND
C
C ......................................................................
C
	ACTUAL_BINSEA=%LOC(SS$_NORMAL)
	BASE=1
	TOP=NUM_SEG
C
C Check validity of limits.
	IF (BASE.GT.TOP) GOTO 50
C
C Check its a sensible VALUE.
	IF (VALUE.LT.STTAB(1,BASE)) GOTO 50
C
C If the VALUE is above the top table entry then choose top entry.
	IF (VALUE.LT.STTAB(1,TOP)) GOTO 10
	RESULT=TOP
	GOTO 60				! return
C
C Loop.
10	SPLIT=(TOP+BASE)/2
	IF (SPLIT.EQ.BASE) GOTO 20
	IF (STTAB(1,SPLIT).GT.VALUE) GOTO 30
	IF (STTAB(2,SPLIT).LT.VALUE) GOTO 40
20	RESULT=SPLIT
	GOTO 60				! return
C
30	TOP=SPLIT
	GOTO 10
C
40	BASE=SPLIT
	GOTO 10
C
C ......................................................................
C Error - bad VALUE given.
C
50	ACTUAL_BINSEA=POLY__NOARM
	IF (HAD_LITES) THEN
	   CALL FLWSEL(LITESLUN)
	   CALL FLWRTF('%%MESSAGE Polygon formation error:')
	ENDIF
	MESLEN=EXPAND('%WS'//
     &	   'No junction arms to follow in feature with '
     &	   //'FSN %N - polygon abandoned',MESTXT,FSN)
	CALL MES_OUT(COORD,MESTXT,MESLEN)
C
C ......................................................................
C
60	RETURN
	END
