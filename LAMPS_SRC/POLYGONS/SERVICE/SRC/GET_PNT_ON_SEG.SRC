C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	INTEGER FUNCTION GET_PNT_ON_SEG(PTR,APOINT)
C
***	MODULE	GET_PNT_ON_SEG
***	IDENT	30AP92
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
	INTEGER   PTR		! pto to SEGTAB - gives FSN and address
	REAL	  APOINT(2)	! returned coordinate
C
	INTEGER		ACTUAL_GET_PNT_ON_SEG
C
C	........................................................................
C
	GET_PNT_ON_SEG = ACTUAL_GET_PNT_ON_SEG(
     &		PTR,APOINT,
     &		POLMAX,TABMAX,
     &		%VAL(PTR$_SEGTAB)
     &	  )
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	INTEGER FUNCTION ACTUAL_GET_PNT_ON_SEG(PTR,APOINT,POLMAX,TABMAX,SEGTAB)
C
***	MODULE	ACTUAL_GET_PNT_ON_SEG
***	IDENT	12AU88
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C 	Author					AC  03-Jun-1988
C
C	Function to return a point APOINT on the segment referenced by
C	SEGTAB(2,PTR). The point is the mid-point of the first two points
C 	in the segment unless it only has one coordinate in which case
C	that is returned.
C
C ......................................................................
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNPOLYGONS:POLYGONSMSG.PAR'
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
	INTEGER		SS$_ABORT
	EXTERNAL	SS$_ABORT	! failure
C
C Arguments:
	INTEGER   PTR		! pointer into SEGTAB - gives FSN and address
	REAL	  APOINT(2)	! returned coordinate
C
	INTEGER*4	POLMAX
	INTEGER*4	TABMAX
	INTEGER*4	SEGTAB(2,TABMAX)
C
C Common:
	INCLUDE		'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:TABLES.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:FILE.CMN'
C
C W/s
	INTEGER*4 TMP_MARK	! marker so can reset IFF file
	INTEGER*2 ACTYPE	! type of AC 
	INTEGER*2 IECODE,IELEN	! IFF entry code and length
	INTEGER*2 IENDS		! line state (coded bitwise)
	INTEGER*2 NPTS		! number of coord pairs to be read
	REAL	  TWO_POINTS(2,2) ! read in two points from ST 
C
C .......................................................................
C
	ACTUAL_GET_PNT_ON_SEG = %LOC(SS$_NORMAL)
C
C Mark where we currently are in the segment file
	CALL IFFSEL(INLUN)
	TMP_MARK = LPOSH
C
C Move to start of feature with specified segment
	CALL IFFPKE(IECODE,IELEN,SEGTAB(2,PTR))
C
C Unexpected end of file
	IF (IELEN.EQ.-1) GOTO 40
C
C Unexpected type of IFF entry?
	IF (IECODE.NE.'NF') GOTO 30
C
C Now cycle round to find an ST entry
20	CALL IFFNXT(IECODE,IELEN)
C
C Unexpected end of file
	IF (IELEN.LE.-1) GOTO 40
C
C Unexpected end of feature
	IF (IECODE.EQ.'EF') GOTO 30
C
C If not an AC entry then get next entry
	IF (IECODE.NE.'ST') GOTO 20
C
	CALL EIHRS(NPTS,IENDS)
	IF (NPTS.EQ.1) THEN
		CALL EIHRR(APOINT(1),2,1)
	ELSE
		CALL EIHRR(TWO_POINTS(1,1),4,1)
		APOINT(1) = (TWO_POINTS(1,1) + TWO_POINTS(1,2))*0.5
		APOINT(2) = (TWO_POINTS(2,1) + TWO_POINTS(2,2))*0.5
	ENDIF
C
C Return to original position 
	CALL IFFSEL(INLUN)
	CALL IFFPKE(IECODE,IELEN,TMP_MARK)
	GOTO 10
C
C ......................................................................
C		U N E X P E C T E D   I F F   E N T R Y
C
30	ACTUAL_GET_PNT_ON_SEG=POLY__LOST
	CALL LSL_PUTMSG(ACTUAL_GET_PNT_ON_SEG)
	ACTUAL_GET_PNT_ON_SEG=%LOC(SS$_ABORT)
	GOTO 10
C
C ......................................................................
C		U N E X P E C T E D   E N D   O F   F I L E
C
40	ACTUAL_GET_PNT_ON_SEG=POLY__UNEXPEOF
	CALL LSL_PUTMSG(ACTUAL_GET_PNT_ON_SEG,IN_FILE(:IN_LEN))
	ACTUAL_GET_PNT_ON_SEG=%LOC(SS$_ABORT)
C
C ......................................................................
C			F I N I S H E D
C
10	RETURN
	END

