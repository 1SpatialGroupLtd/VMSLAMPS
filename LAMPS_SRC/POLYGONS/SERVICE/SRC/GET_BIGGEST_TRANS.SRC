C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-05-05 12:10:36.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION GET_BIGGEST_TRANS(LO,HI)
C
***	MODULE	GET_BIGGEST_TRANS
***	IDENT	12AU88
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Created 						AC 17-May-1988
C
C Routine to retrieve the IN-OUT pair of transitions with the largest 
C coordinate difference between them.
C
C ......................................................................
C
	IMPLICIT NONE
C
C Parameters:
	INTEGER		SS$_NORMAL	!
	EXTERNAL	SS$_NORMAL	! normal successful completion
	INCLUDE 'LSL$CMNPOLYGONS:POLYGONSMSG.PAR'
C
C Arguments:
	REAL		LO		! coordinate of IN transition
	REAL		HI		! coordinate of OUT transition
C
C Commons:
	INCLUDE 'LSL$CMNPOLYGONS:TRANSITIONS.CMN'
C
C W/s:
	REAL		PRV_BEST	! previous best largest interval 
C					! ie HI-LO
	REAL		DELTA		! current interval size
	REAL		TEMP		! temp var.
	LOGICAL		IN_TEST		! expected IN or OUT transition
	INTEGER		I		! loop counter
C
C ......................................................................
C
	GET_BIGGEST_TRANS=%LOC(SS$_NORMAL)
C
C Must be an even # of transitions and at least two of them
	IF ((NTRANS.LT.2).OR.(MOD(NTRANS,2).NE.0)) THEN
		GET_BIGGEST_TRANS = POLY__PIPFAIL
		GOTO 100
	ENDIF
C
C Previously best interval - since negative first positive interval
C will become previous best
 	PRV_BEST = -9999.0
C
C ..........................................................................
C			S O R T   T R A N S I T I O N S
C
C transitions should be IN - OUT - IN -.. starting with an IN 
	IN_TEST = .TRUE.
C
C loop through all transitions
	DO 50 I=1,NTRANS
C
C if transition is not of the expected type....
	   IF (		(IN_TEST.AND..NOT.TRANS_IN(I)) .OR.
     &			(.NOT.IN_TEST.AND.TRANS_IN(I))	)THEN
C
C and neither is the one after it....
	      IF (	(IN_TEST.AND..NOT.TRANS_IN(I+1)) .OR.
     &			(.NOT.IN_TEST.AND.TRANS_IN(I+1))      ) THEN
C
C then we have a sever problem - abort
		 GET_BIGGEST_TRANS = POLY__PIPFAIL
		 GOTO 100
	      ENDIF
C
C So transition I is of the wrong type but transition I+1 is of the correct
C type - so if they were swapped all would be OK. Thus check the transitions
C have not been misordered due to rounding error of the coordinates.
C
C If transitions could not have been misorderd by rounding error then fail
	      IF (ABS(TRANS_COORD(I+1)-TRANS_COORD(I)).GT.TRANS_TOL) THEN
		 GET_BIGGEST_TRANS = POLY__PIPFAIL
		 GOTO 100
	      ENDIF
C
C Assume that transitions were misordered so swap them round - giving both 
C the same (mid-point) coordinate
	      TEMP = (TRANS_COORD(I)+TRANS_COORD(I+1))/2.0
	      TRANS_COORD(I) = TEMP
	      TRANS_COORD(I+1) = TEMP
	      TRANS_IN(I) = .NOT.TRANS_IN(I)
	      TRANS_IN(I+1) = .NOT.TRANS_IN(I+1)
	   ENDIF
C
C Next transition is different
	   IN_TEST = .NOT.IN_TEST
50	CONTINUE
C
C ..........................................................................
C
C		F I N D   I N T E R V A L S
C
C Now just go thru the IN-OUT transition pairs ....
	DO 60 I=1,NTRANS/2
C
C get the length of line in the polygon ....
	   DELTA = TRANS_COORD(I*2) - TRANS_COORD(I*2-1)
C
C and if it is non-degenerate ....
	   IF (DELTA.GT.5.0E-8) THEN
C
C and larger than the previous best then ....
	      IF (DELTA.GT.PRV_BEST) THEN
C
C make it the previous best and rememeber the coordinates
		 PRV_BEST = DELTA
		 LO = TRANS_COORD(I*2-1)
		 HI = TRANS_COORD(I*2)
	      ENDIF
	   ENDIF
60	CONTINUE
C
C finished...
100	RETURN
	END
