C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-05-14 19:49:26.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	LOGICAL*4 FUNCTION LOCATE_TREES()
C
***	MODULE	LOCATE_TREES
***	IDENT	30AP92
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
	LOGICAL*4	ACTUAL_LOCATE_TREES
C
C	........................................................................
C
	LOCATE_TREES = ACTUAL_LOCATE_TREES(
     &			POLMAX,PARTS_MAX,
     &			%VAL(PTR$_POLY_PARTS),
     &			%VAL(PTR$_TREE_IN_POLY)
     &		  )
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	LOGICAL*4 FUNCTION ACTUAL_LOCATE_TREES(
     &		POLMAX,PARTS_MAX, POLY_PARTS,TREE_IN_POLY)
C
***	MODULE	ACTUAL_LOCATE_TREES
***	IDENT	30OC91
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Author						AC 24-June-1988
C
C	Function to locate each tree (if any) within a polygon
C
C ......................................................................
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNPOLYGONS:POLYGONSMSG.PAR'
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
	INTEGER		SS$_ABORT
	EXTERNAL	SS$_ABORT	! failure
C
C Common:
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:TREES.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:TABLES.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:SECTOR.CMN'
C
C Arguments:
C
	INTEGER*4	POLMAX
	INTEGER*4	PARTS_MAX
	INTEGER		POLY_PARTS(2,PARTS_MAX)
	INTEGER		TREE_IN_POLY(POLMAX)
C
C W/s:
	INTEGER		I		! tmp var.
	INTEGER	  	POLY_INDX	! found polygon
	INTEGER		TREE_INDX	! current tree
	INTEGER   	SEGPTR		! pointer into POLY_PARTS
	REAL		APOINT(2)	! coordinate of point on tree
	INTEGER		NUM_SUCCESS	! # of trees placed
	INTEGER		NUM_FAIL	! # of trees not placed
C
C Functions:
	LOGICAL		GET_PNT_ON_SEG	! get a point lying on segment
	LOGICAL		FIND_POLY	! find polygon containing point
C
C ......................................................................
C
	ACTUAL_LOCATE_TREES=%LOC(SS$_NORMAL)
C
	TREE_CNT=0
	NUM_SUCCESS=0
	NUM_FAIL=0
C
	CALL VIOCLR(TREE_IN_POLY,POLMAX*4,0)
	CALL IFFSEL(INLUN)
C
C Loop through all the trees
	DO 50 TREE_INDX=1,NUM_TREE
C
C Get the segments relating to this tree
	   SEGPTR=IABS(TREE_START(1,TREE_INDX))
C
C Find a point on the first segment of the tree	
	   ACTUAL_LOCATE_TREES=GET_PNT_ON_SEG(POLY_PARTS(1,SEGPTR),APOINT(1))
	   IF (.NOT.ACTUAL_LOCATE_TREES) GOTO 60
C
C Find out which polygon this point lies in
	   ACTUAL_LOCATE_TREES=FIND_POLY(APOINT,POLY_INDX)
	   IF (.NOT.ACTUAL_LOCATE_TREES) GOTO 60
C
C What if cannot find polygon
	   IF (POLY_INDX.EQ.-1) THEN
	      TREE_START(2,TREE_INDX)=0
	      NUM_FAIL=NUM_FAIL+1
	      GOTO 50
	   ENDIF
C
C Another success!!
	   NUM_SUCCESS=NUM_SUCCESS+1
C
C Store the polygon index	      
	   TREE_START(2,TREE_INDX)=POLY_INDX
C
C There are too many trees
	   IF (TREE_CNT.EQ.TREEMAX) THEN
	      ACTUAL_LOCATE_TREES=POLY__TOOMNYTREE
	      CALL LSL_PUTMSG(ACTUAL_LOCATE_TREES,TREEMAX)
	      ACTUAL_LOCATE_TREES=%LOC(SS$_ABORT)
	      GOTO 60
	   ENDIF
C
C We have another tree to store
	   TREE_CNT=TREE_CNT+1
C
C Does this polygon have any trees in it already?
	   IF (TREE_IN_POLY(POLY_INDX).EQ.0) THEN
C
C Currently TREE_IN_POLY(POLY_INDX) is set to zero so change it
	      TREE_IN_POLY(POLY_INDX)=TREE_CNT
	   ELSE
	      I=TREE_IN_POLY(POLY_INDX)
25	      IF (POLTREE(2,I).NE.0) THEN
		 I=POLTREE(2,I)
		 GOTO 25
	      ENDIF
C
C Currently POLTREE(2,I) is set to zero so change it
	      POLTREE(2,I)=TREE_CNT		
	   ENDIF
C
C Add the tree into the list of trees for this polygon
           POLTREE(1,TREE_CNT)=TREE_INDX	      
	   POLTREE(2,TREE_CNT)=0
C
50	CONTINUE
C
C ........................................................................
C
C Tell user what has been done?
	IF (HAD_LOG) THEN
	   CALL EXPAND(
     &	    'Number of trees located inside polygons ............. %N',
     &							NUM_SUCCESS)
	   IF (HAD_LIS) THEN
	      CALL FLWLIN
	   ELSE
	      CALL TTWLIN
	   ENDIF
	   IF (NUM_FAIL.GT.0) THEN
	      CALL EXPAND(
     &	    'Number of trees not located inside polygons ......... %N',
     &							NUM_FAIL)
	      IF (HAD_LIS) THEN
	         CALL FLWLIN
	      ELSE
	         CALL TTWLIN
	      ENDIF
	   ENDIF
	ENDIF
C
C ......................................................................
C
C Finished....
60	RETURN
	END

