C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	LOGICAL FUNCTION GET_BOUNDING(CLOCK)
C
***	MODULE	GET_BOUNDING
***	IDENT	30AP92
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
	LOGICAL		CLOCK	! polygons formed clockwise?
C
	LOGICAL		ACTUAL_GET_BOUNDING
C
C	........................................................................
C
	GET_BOUNDING = ACTUAL_GET_BOUNDING(
     &			CLOCK,
     &			POLMAX,
     &			%VAL(PTR$_POLY_AREA),
     &			%VAL(PTR$_POLY_RANGE)
     &		  )
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	LOGICAL FUNCTION ACTUAL_GET_BOUNDING(CLOCK,POLMAX,POLY_AREA,POLY_RANGE)
C
***	MODULE	ACTUAL_GET_BOUNDING
***	IDENT	12AU88
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
CMOD	Use the sign of area to eliminate candidates before the
C 	doing test against AREATMP 			AC   09-Aug-1988
CMOD	ISIGN of POLY_AREA no longer used as areas can
C	get very big!					TJH  27-Oct-1987
CMOD	Now uses signed area, not range!		TJH  09-Sep-1987
C	Author						TJH  26-Feb-1987
C
C
C Routine to determine the bounding polygon. Polygon number of
C the bounding polygon is returned in /POLYGON/ BOUND_POL
C
C Function returns SS$_NORMAL if all is well or POLY__BOUNDING
C on error
C ......................................................................
C
	IMPLICIT NONE
C
C Argument:
	LOGICAL		CLOCK	! polygons formed clockwise?
C
	INTEGER*4	POLMAX
	REAL		POLY_AREA(POLMAX)
	REAL		POLY_RANGE(4,POLMAX)
C
C Parameters:
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONSMSG.PAR'
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
C
C Common:
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
C
C W/S
	INTEGER	  I				! loop variables
	REAL	  AREATMP			! temp variables
	REAL 	  BOUND_XMIN,BOUND_XMAX,BOUND_YMIN,BOUND_YMAX
C						! temp variables
C
C ......................................................................
C
	ACTUAL_GET_BOUNDING=%LOC(SS$_NORMAL)
C
	AREATMP=0.0
C
C Use the signed area of the polygon. The polygon with the biggest area
C that is signed to be formed in the opposite direction to that of
C polygon formation must be the bounding polygon. 
	DO 10 I=1,NUM_POLY
	   IF (CLOCK) THEN
	      IF (POLY_AREA(I).GT.0.0) THEN
		 IF (ABS(POLY_AREA(I)).GE.AREATMP) THEN
		    AREATMP=ABS(POLY_AREA(I))
	            BOUND_POL=I
		 ENDIF
	      ENDIF
	   ELSE
	      IF (POLY_AREA(I).LT.0.0) THEN
		 IF (ABS(POLY_AREA(I)).GE.AREATMP) THEN
		    AREATMP=ABS(POLY_AREA(I))
	            BOUND_POL=I
		 ENDIF
	      ENDIF
	   ENDIF	      
10	CONTINUE
C
C Did any polygon qualify?
	IF (BOUND_POL.EQ.0) THEN
	   ACTUAL_GET_BOUNDING=POLY__BOUNDING
	   CALL LSL_PUTMSG(ACTUAL_GET_BOUNDING)
	   GOTO 30
	ENDIF
C
C Now check that the idiot user hasn't supplied a whole
C archipeligo of unconnected "bounding" polygons. If so, abort.
	BOUND_XMIN=POLY_RANGE(1,BOUND_POL)
	BOUND_XMAX=POLY_RANGE(2,BOUND_POL)
	BOUND_YMIN=POLY_RANGE(3,BOUND_POL)
	BOUND_YMAX=POLY_RANGE(4,BOUND_POL)
	DO 20 I=1,NUM_POLY
	   IF (     (POLY_RANGE(1,I).LT.BOUND_XMIN)
     &	       .OR. (POLY_RANGE(2,I).GT.BOUND_XMAX)
     &	       .OR. (POLY_RANGE(3,I).LT.BOUND_YMIN)
     &	       .OR. (POLY_RANGE(4,I).GT.BOUND_YMAX)) THEN
	      ACTUAL_GET_BOUNDING=POLY__BOUNDING
	      CALL LSL_PUTMSG(ACTUAL_GET_BOUNDING)
	      GOTO 30
	   ENDIF
20	CONTINUE
30	RETURN
	END
