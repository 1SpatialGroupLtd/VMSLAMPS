C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-05-14 19:44:00.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	LOGICAL*4 FUNCTION FIRST_NEST(POLY_INDX,PTRS,NNEST,ONLYISOL,LASTPTR)
C
***	MODULE	FIRST_NEST
***	IDENT	30AP92
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
		INTEGER	  POLY_INDX		! current polygon
		INTEGER	  PTRS(POLNEST_MAX)	! pointers to nested polys
		INTEGER	  NNEST			! number of nested polygons
		LOGICAL   ONLYISOL		! true if only dealing with 
						! isolated polys
		LOGICAL   LASTPTR		! pointer to last nested poly
C
	LOGICAL*4	ACTUAL_FIRST_NEST
C
C	........................................................................
C
	FIRST_NEST = ACTUAL_FIRST_NEST(
     &			POLY_INDX,PTRS,NNEST,ONLYISOL,LASTPTR,
     &			POLNEST_MAX, POLMAX,
     &			%VAL( PTR$_NEST_START),
     &			%VAL( PTR$_POLNEST),
     &			%VAL( PTR$_DUFF_POLYGON),
     &			%VAL( PTR$_POLY_START),
     &			%VAL( LOC_PTR$_NEST)
     &		  )
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	LOGICAL*4 FUNCTION ACTUAL_FIRST_NEST(
     &			POLY_INDX, PTRS, NNEST, ONLYISOL, LASTPTR,
     &			POLNEST_MAX, POLMAX,
     &			NEST_START, POLNEST, DUFF_POLYGON, POLY_START, 
     &			NEST)
C
***	MODULE	ACTUAL_FIRST_NEST
***	IDENT	11MY91
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Author							TJH  12-Mar-1987
C
CMOD	Use previously determined nesting info for speed	PGH 11-May-1991
C
C
C Function to determine first level nested polygons within a list
C of nested polygons for polygon POLY_INDX
C
C Function returns SS$_NORMAL if all is well or one of a variety of
C POLMERGE error codes on failure.
C
C ......................................................................
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
C
C Common:
	INCLUDE		'LSL$CMNPOLYGONS:FILE.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:TABLES.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:SECTOR.CMN'
C
C	Arguments:
		INTEGER*4	POLMAX
		INTEGER*4	POLNEST_MAX
C
		INTEGER	POLY_INDX		! current polygon
		INTEGER	PTRS(POLNEST_MAX)	! pointers: nested polys
		INTEGER	NNEST			! num of nested polygons
		LOGICAL ONLYISOL		! only isolated polygons?
		LOGICAL LASTPTR			! pointer to last nested poly
C
		INTEGER	DUFF_POLYGON((POLMAX+31)/32)
		INTEGER	NEST_START (POLMAX+1)
		INTEGER	POLNEST(2, POLNEST_MAX)
		INTEGER	POLY_START(3,POLMAX)
		INTEGER	  NEST(POLNEST_MAX)	! nested polys
C
C W/s:
		INTEGER   I,J			! temp. vars.
		INTEGER   IN			! for PNTPOL return
		INTEGER	  NINDEX		! no. poss nested polys
		INTEGER   PTR			! pointer into POLNEST
		INTEGER	  STARTSIGN,NXTSIGN	! for decoding POLNEST
		LOGICAL	  HAD_POL		! had polygon coords?
C
		REAL	  APOINT(2)		! a coordinate
C
C Functions:
		LOGICAL	  EXT1V			! extract 1-bit field
C
C ......................................................................
C
	ACTUAL_FIRST_NEST=%LOC(SS$_NORMAL)
C
C Make a compact list of the polygons nested within polygon POLY_INDX
	NINDEX=0
	NNEST = 0
	PTR=NEST_START(POLY_INDX)
C
C Is this a duff polygon?
10	I=POLNEST(1,PTR)		! convert word to long
	IF (.NOT.EXT1V(I,DUFF_POLYGON(1))) THEN
C
	  IF (ONLYISOL) THEN
C Is this an isolation polygon? We only want it if it is
	      IF (POLY_START(1,POLNEST(1,PTR)).LT.0)THEN
	         NINDEX=NINDEX+1
	         NEST(NINDEX)=POLNEST(1,PTR)
	      ENDIF
	  ELSE
	      IF (POLY_START(1,POLNEST(1,PTR)).GT.0)THEN
	         NINDEX=NINDEX+1
	         NEST(NINDEX)=POLNEST(1,PTR)
	      ENDIF
	  ENDIF
	ENDIF
	LASTPTR = PTR
	PTR=POLNEST(2,PTR)
	IF (PTR .EQ. 0) GOTO 20
	GOTO 10
C
C We now have a list (NEST) of the (NINDEX) nested polygons which lie
C within polygon POLY_INDX. As we are only interested in first level
C nesting get only the biggest polygons flagged as isolations which
C are themselves not nested.
20	IF (NINDEX.EQ.1) THEN
	   NNEST=1
	   PTRS(1)=NEST(1)
	ELSE
C
C for each polygon I, check if it is nested in polygon J
	   DO 40 I=1,NINDEX
	      DO 30 J=1,NINDEX
	         IF (I.EQ.J) GOTO 30	! Don't check polygon against itself!
	         PTR=NEST_START(NEST(J))
C
C check the nest list for polygon J looking for reference to polygon I
25	            IF (PTR.EQ.0) GOTO 30 ! no more nests for polygon J
	            IF (POLNEST(1,PTR).EQ.NEST(I)) GOTO 40 ! I is in J
	            PTR=POLNEST(2,PTR)	  ! on to next nest in J
	            GOTO 25
30	      CONTINUE
C
C if get here, then polygon I is in no polygon J, so is a first nest.
	      NNEST=NNEST+1
	      PTRS(NNEST)=NEST(I)
40	   CONTINUE
	ENDIF		 
50	RETURN
	END
