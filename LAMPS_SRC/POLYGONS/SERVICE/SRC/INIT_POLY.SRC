C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	LOGICAL*4 FUNCTION INIT_POLY()
C
***	MODULE	INIT_POLY
***	IDENT	30AP92
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
C functions
	INTEGER*4	ACTUAL_INIT_POLY
C
CC

C	........................................................................
C
	INIT_POLY = ACTUAL_INIT_POLY(
     &		POLMAX,TABMAX,
     &		%VAL(PTR$_COVER_STACK),
     &		%VAL(PTR$_INARM_STACK),
     &		%VAL(PTR$_JUNC_STACK),
     &		%VAL(PTR$_NARMS_STACK),
     &		%VAL(PTR$_OFFSET_STACK),
     &		%VAL(PTR$_POLY_STACK),
     &		%VAL(PTR$_SIDE_STACK),
     &		%VAL(PTR$_TMP_POLY_STACK),
     &		%VAL(PTR$_TMP_SIDE_STACK),
     &		%VAL(PTR$_TRIEDARM_STACK)
     &	)
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	LOGICAL*4 FUNCTION ACTUAL_INIT_POLY(
     &			POLMAX,TABMAX,
     &			COVER_STACK, INARM_STACK, JUNC_STACK, NARMS_STACK,
     &			OFFSET_STACK, POLY_STACK, SIDE_STACK, TMP_POLY_STACK,
     &			TMP_SIDE_STACK, TRIEDARM_STACK)
C
***	MODULE	ACTUAL_INIT_POLY
***	IDENT	28MR88
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
CMOD	VIOCLR only used (<STACK_PTR) array elements 	TJH  28-Mar-1989
CMOD	Do not increment polygon counter at this stage	AC   24-Jun-1988
C	Author						TJH  20-Feb-1987
C
C Function to initialise workspace for a new polygon and to clear
C any evidence of a previous polygon from /LRUSED/LRUSED and /STACKS/*
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNPOLYGONS:POLYGONSMSG.PAR'
C
C Common:
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:STACKS.CMN'
C
C ARGS
C
	INTEGER*4	POLMAX
	INTEGER*4	TABMAX
C
	INTEGER*4	COVER_STACK(TABMAX)
	BYTE		INARM_STACK(TABMAX)
	INTEGER		JUNC_STACK(TABMAX)
	INTEGER*2	NARMS_STACK(TABMAX)
	INTEGER*2	OFFSET_STACK(TABMAX)
	INTEGER		POLY_STACK(TABMAX)
	BYTE		SIDE_STACK(TABMAX)
	INTEGER		TMP_POLY_STACK(TABMAX)
	BYTE		TMP_SIDE_STACK(TABMAX)
	BYTE		TRIEDARM_STACK(JARMS_MAX,TABMAX)
	
C
C Function:
	LOGICAL		VIOCLR		! clears array
C
C ......................................................................
C
C Reset stack pointer
	STACK_PTR=MAX(STACK_PTR,1)
C
C ......................................................................
C
C Clear all the /STACKS/ arrays
C
C POLY_STACK - list of the segments forming a single polygon
	ACTUAL_INIT_POLY=VIOCLR(POLY_STACK(1),STACK_PTR*4,0)
	IF (.NOT.ACTUAL_INIT_POLY) GOTO 30
C
C JUNC_STACK - addresses of junctions used so far in the polygon
	ACTUAL_INIT_POLY=VIOCLR(JUNC_STACK(1),STACK_PTR*4,0)
	IF (.NOT.ACTUAL_INIT_POLY) GOTO 30
C
C OFFSET_STACK - offsets of junctions used so far in the polygon
	ACTUAL_INIT_POLY=VIOCLR(OFFSET_STACK(1),STACK_PTR*2,0)
	IF (.NOT.ACTUAL_INIT_POLY) GOTO 30
C
C NARMS_STACK - no. of arms in each       "    "  "  "   "   "
	ACTUAL_INIT_POLY=VIOCLR(NARMS_STACK(1),STACK_PTR*2,0)
	IF (.NOT.ACTUAL_INIT_POLY) GOTO 30
C
C INARM_STACK - the arm we entered each junction on 
	ACTUAL_INIT_POLY=VIOCLR(INARM_STACK(1),STACK_PTR,0)
	IF (.NOT.ACTUAL_INIT_POLY) GOTO 30
C
C TRIEDARM_STACK - the arms tried so far in each junction (bitwise)
	ACTUAL_INIT_POLY=VIOCLR(TRIEDARM_STACK(1,1),TABMAX*JARMS_MAX,0)
	IF (.NOT.ACTUAL_INIT_POLY) GOTO 30
C
C SIDE_STACK - side of segment used in polygon
	ACTUAL_INIT_POLY=VIOCLR(SIDE_STACK(1),STACK_PTR,0)
	IF (.NOT.ACTUAL_INIT_POLY) GOTO 30
C
C STACK_PTR - pointer to current valid end of stack
	STACK_PTR=0
C ......................................................................
C 	
30	RETURN
	END

