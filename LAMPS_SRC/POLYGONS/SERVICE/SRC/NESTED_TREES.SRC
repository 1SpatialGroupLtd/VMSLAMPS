C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-05-14 19:56:20.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	LOGICAL*4 FUNCTION NESTED_TREES(POLY_INDX,PTRS,NTREE)
C
***	MODULE	NESTED_TREES
***	IDENT	30AP92
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
C	Arguments:
		INTEGER	  POLY_INDX		! current polygon
		INTEGER	  PTRS(POLNEST_MAX)	! pointers to nested polys
		INTEGER	  NTREE			! number of nested polygons
C
	LOGICAL*4	ACTUAL_NESTED_TREES
C
C	........................................................................
C
	NESTED_TREES = ACTUAL_NESTED_TREES(
     &			POLY_INDX,PTRS,NTREE,
     &			POLMAX,POLNEST_MAX,
     &			%VAL(PTR$_TREE_IN_POLY)
     &		  )
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	LOGICAL*4 FUNCTION ACTUAL_NESTED_TREES(POLY_INDX,PTRS,NTREE,
     &			POLMAX,POLNEST_MAX,TREE_IN_POLY)
C
***	MODULE	ACTUAL_NESTED_TREES
***	IDENT	12AP89
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
CMOD	Now gets ALL trees in poly, not just first!	TJH 03-Apr-1989
C	Author						AC  24-June-1988
C
C	Function to return those trees that are nested within polygon
C	POLY_INDX. The number of trees is given by NTREE and the identifiers
C	returned in PTRS
C
C ......................................................................
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNPOLYGONS:POLYGONSMSG.PAR'
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
	INTEGER		SS$_ABORT
	EXTERNAL	SS$_ABORT	! failure
C
C Common:
	INCLUDE		'LSL$CMNPOLYGONS:FILE.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:TREES.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:TABLES.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:SECTOR.CMN'
C
C Arguments:
C
	INTEGER*4	POLMAX
	INTEGER*4	POLNEST_MAX
C
	INTEGER		TREE_IN_POLY(POLMAX)
	INTEGER	  	POLY_INDX		! current polygon
	INTEGER	  	PTRS(POLNEST_MAX)	! pointers to nested polys
	INTEGER	  	NTREE			! number of nested polygons
C
C W/s:
	INTEGER   I			! ptr into POLTREE
C
C ......................................................................
C
	ACTUAL_NESTED_TREES=%LOC(SS$_NORMAL)
C
C lookup if any trees nested in poly POLY_INDX
	I=TREE_IN_POLY(POLY_INDX)
C
C If so get a non-zero entry in POLTREE where to start, otherwise finish 
20	IF (I.EQ.0) GOTO 30
C
C If already stored too many trees then must report an error
	IF (NTREE.EQ.POLNEST_MAX) THEN
	   ACTUAL_NESTED_TREES=POLY__TOOMNYTREE
	   CALL LSL_PUTMSG(ACTUAL_NESTED_TREES,POLNEST_MAX)
	   ACTUAL_NESTED_TREES=%LOC(SS$_ABORT)
	   GOTO 30
	ENDIF
C
C Have another tree, store it away
	NTREE=NTREE+1
	PTRS(NTREE)=POLTREE(1,I)
	I=POLTREE(2,I)
C
C get another one?
	GOTO 20
C
C Finished...
30	RETURN
	END

