C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-05-18 16:12:36.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C-------------------------------------------------------------------------------
C				THE WRAPPER
C-------------------------------------------------------------------------------
C
C
C
C
	LOGICAL*4 FUNCTION READ_NEXT_JUNC(JUNC,NXTPTR,NXTJB,NXTOFF,NARMS)
C
***	MODULE	READ_NEXT_JUNC
***	IDENT	30AP92
C
C	Copyright Laser Scan Ltd, Cambridge, England
C
C	Author		Sunil Gupta			30-april-1992
C
C
C	........................................................................
C
	INCLUDE 'LSL$CMNPOLYGONS:ARRAY_PTRS.CMN'
C
C	Arguments:
		INTEGER*2 JUNC		! points to required end (1/2)
		INTEGER	  NXTPTR	! segment pointer
		INTEGER   NXTJB		! position of next JB of polygon
		INTEGER*2 NXTOFF	! holds offset of next JUNCion (JB)
		INTEGER*2 NARMS		! number of arms from junction
C
	LOGICAL*4	ACTUAL_READ_NEXT_JUNC
C
C	........................................................................
C
	READ_NEXT_JUNC = ACTUAL_READ_NEXT_JUNC(
     &			JUNC,NXTPTR,NXTJB,NXTOFF,NARMS,
     &			POLMAX,TABMAX,
     &			%VAL(PTR$_JPOFF),
     &			%VAL(PTR$_JPTAB),
     &			%VAL(PTR$_JUNC_STACK),
     &			%VAL(PTR$_NARMS_STACK),
     &			%VAL(PTR$_OFFSET_STACK)
     &		  )
C
C	........................................................................
C
	RETURN
	END
C
C-------------------------------------------------------------------------------
C			    THE PROPER FUNCTION
C-------------------------------------------------------------------------------
C
C
C
	LOGICAL*4 FUNCTION ACTUAL_READ_NEXT_JUNC(
     &		JUNC, NXTPTR, NXTJB, NXTOFF, NARMS,
     &		POLMAX, TABMAX, 
     &		JPOFF, JPTAB, JUNC_STACK, NARMS_STACK, OFFSET_STACK)
C
***	MODULE	ACTUAL_READ_NEXT_JUNC
***	IDENT	03SE87
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Author						TJH  03-Sep-1987
C
C Function to read in next junction as we go round our polygon
C
C Function always returns SS$_NORMAL!
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE 	'LSL$CMNPOLYGONS:PARAMS.PAR'
	INCLUDE 	'LSL$CMNPOLYGONS:POLYGONSMSG.PAR'
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
C
C Common:
	INCLUDE		'LSL$CMNPOLYGONS:POLYGONS.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:TABLES.CMN'
	INCLUDE		'LSL$CMNPOLYGONS:STACKS.CMN'
C
C Arguments:
	INTEGER*2 JUNC		! points to required end (1/2)
	INTEGER	  NXTPTR	! segment pointer
	INTEGER   NXTJB		! position of next JB of polygon
	INTEGER*2 NXTOFF	! holds offset of next junction (JB)
	INTEGER*2 NARMS		! number of arms from junction
C
	INTEGER*4	POLMAX
	INTEGER*4	TABMAX
	INTEGER*2	JPOFF(2,TABMAX)
	INTEGER*4	JPTAB(2,TABMAX)
	INTEGER		JUNC_STACK(TABMAX)
	INTEGER*2	NARMS_STACK(TABMAX)
	INTEGER*2	OFFSET_STACK(TABMAX)
C
C W/S
	REAL	  JBX,JBY	! junction coords
C
C ......................................................................
C
	ACTUAL_READ_NEXT_JUNC=%LOC(SS$_NORMAL)
C
	NXTJB = JPTAB(JUNC,NXTPTR)
	NXTOFF = JPOFF(JUNC,NXTPTR)
	CALL IFJPKJ(JBX,JBY,NARMS,NXTJB,NXTOFF)
C
C Record the address of this junction that we are passing through
	NARMS_STACK(STACK_PTR)=NARMS
	JUNC_STACK(STACK_PTR)=NXTJB
	OFFSET_STACK(STACK_PTR)=NXTOFF
	RETURN
	END
