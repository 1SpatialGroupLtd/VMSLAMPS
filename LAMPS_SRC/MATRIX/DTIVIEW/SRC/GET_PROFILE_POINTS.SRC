C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-04-28 15:36:58.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION GET_PROFILE_POINTS (MCMD,X1,Y1,X2,Y2)
C
***	IDENT	28AP93
***	MODULE	GET_PROFILE_POINTS
C
C	Copyright : Laser-Scan, Cambridge, England
C	Author    : D R Catlow
C	Created   : 16 March 1988
C
CMOD	Stop seconds values being multiplied by MWSR   29-Nov-1988
C	10 twice
CMOD	Use projection units			MWSR   23-Nov-1988	
CMOD	Absolute coordinates for metre values	MWSR	22-Nov-1988
C
C	Function to get the start and end coordinate points of
C	a profile.
C	
	IMPLICIT NONE
C	
C DTILIB common
***	COMMON/LSL$CMNDTI:DTIHDR/
***	COMMON/LSL$CMNDTI:DTIPROJ/
C
C LSLLIB common
***	COMMON/LSL$CMNLSL:CMDCOM/
C
***	COMMON/HERE:MODEL/		! contains UNITS etc.
***	COMMON/HERE:DTIQIO/		! 
***	COMMON/HERE:TAB/		! contains HAD_VDU
***	COMMON/HERE:TRANS/		! has TAB_DTI transformation
***	COMMON/HERE:DTICMN/		! contains MAP_SET
C
C	Argument
	LOGICAL		MCMD		! true if the command is
C					! issued from a menu box.
	INTEGER*4	X1,Y1		! profile start coords (returned)
	INTEGER*4	X2,Y2		! profile end coords (returned)
C
C	Local
	INTEGER*4	LLDEGS(4)	! values in seconds
	INTEGER*4	X_TAB,Y_TAB	! table coordinates
	INTEGER*4	CMD		! menu command number
C
C	Function
	LOGICAL		READLL		! reads lat/long
	LOGICAL		RDREAL		! read real value
	LOGICAL		WAIT_INPUT	! to wait for input
	LOGICAL		READ_PUCK	! read puck data
	LOGICAL		IN_MENU		! test if in menu area
C
C************************************************************************
C
	GET_PROFILE_POINTS = .FALSE.
C
C	Deal with PROFILE command from terminal
C	
C	If no arguments are supplied, treat as though menu command
	IF(CMDACT.EQ.0)MCMD=.TRUE.
C	  	
	IF(.NOT.MCMD)THEN
	  IF(CMDACT.NE.4.AND.UNITS.NE.4)THEN
	    CALL WRITEF('%S Specifying command PROFILE',ERROR_BELL)
	    CALL WRITEF('Command requires 4 arguments')
	    GOTO 999
	  ENDIF
C
C	Matrix units
	  IF     (UNITS.EQ.1)THEN
	    X1=NINT(REALAR(1))
	    Y1=NINT(REALAR(2))
	    X2=NINT(REALAR(3))
	    Y2=NINT(REALAR(4))
C
C	Metre units
	  ELSE IF(UNITS.EQ.2)THEN
	    IF (HAD_ABSOLUTE) THEN
	      X1=NINT((REALAR(1)-X_OFFSET(1))/X_GRID(1))+1
	      Y1=NINT((REALAR(2)-Y_OFFSET(1))/Y_GRID(1))+1
	      X2=NINT((REALAR(3)-X_OFFSET(1))/X_GRID(1))+1
	      Y2=NINT((REALAR(4)-Y_OFFSET(1))/Y_GRID(1))+1
	    ELSE
	      X1=NINT(REALAR(1)/X_GRID(1))+1
	      Y1=NINT(REALAR(2)/Y_GRID(1))+1
	      X2=NINT(REALAR(3)/X_GRID(1))+1
	      Y2=NINT(REALAR(4)/Y_GRID(1))+1
	    ENDIF
C
C	Latlong units
	  ELSE IF(UNITS.EQ.4)THEN
	    IF(READLL(LLDEGS,4,.FALSE.))THEN
	      CALL WRITEF('%S Specifying command PROFILE',ERROR_BELL)
	      CALL WRITEF
     &        ('Latitude and longitude values supplied in wrong format')
	      GOTO 999
	    ENDIF
	    REALAR(1)=LLDEGS(1)
	    REALAR(2)=LLDEGS(2)
	    REALAR(3)=LLDEGS(3)
	    REALAR(4)=LLDEGS(4)
C
C projection units
	  ELSEIF(UNITS.EQ.5)THEN
	    IF (HAD_ABSOLUTE) THEN 
	      X1=NINT((REALAR(1)-DTIPROJ_ORIGIN(1,1))
     &             /DTIPROJ_SAMPLE(1,1))+1
	      Y1=NINT((REALAR(2)-DTIPROJ_ORIGIN(2,1))
     &             /DTIPROJ_SAMPLE(2,1))+1
	      X2=NINT((REALAR(3)-DTIPROJ_ORIGIN(1,1))
     &             /DTIPROJ_SAMPLE(1,1))+1
	      Y2=NINT((REALAR(4)-DTIPROJ_ORIGIN(2,1))
     &             /DTIPROJ_SAMPLE(2,1))+1
C
	    ELSE
	      X1=NINT(REALAR(1)/DTIPROJ_SAMPLE(1,1))+1
	      Y1=NINT(REALAR(2)/DTIPROJ_SAMPLE(2,1))+1
	      X2=NINT(REALAR(3)/DTIPROJ_SAMPLE(1,1))+1
	      Y2=NINT(REALAR(4)/DTIPROJ_SAMPLE(2,1))+1
	    ENDIF
	  ENDIF	      	      
C
	  IF(UNITS.EQ.3.OR.UNITS.EQ.4)THEN
	    X1=NINT(REALAR(2)*10)
	    Y1=NINT(REALAR(1)*10)
	    X1=((X1-LONREC(1,1))/LONINT(1))+1
	    Y1=((Y1-LATREC(1,1))/LATINT(1))+1
	    X2=NINT(REALAR(4)*10)
	    Y2=NINT(REALAR(3)*10)
	    X2=((X2-LONREC(1,1))/LONINT(1))+1
	    Y2=((Y2-LATREC(1,1))/LATINT(1))+1
	  ENDIF
C
C	Check that the start coordinates are within the DTM
	  IF(X1.LT.1.OR.X1.GT.X_EXTENT(1).OR.
     &       Y1.LT.1.OR.Y1.GT.Y_EXTENT(1))THEN
	     CALL WRITEF('%S Specifying coordinates of start point',ERROR_BELL)
	     CALL WRITEF('Point is outside DTM bounds')
	     GOTO 999
	  ENDIF	   
C
C	Check that the end coordinates are within the DTM
	  IF(X2.LT.1.OR.X2.GT.X_EXTENT(1).OR.
     &       Y2.LT.1.OR.Y2.GT.Y_EXTENT(1))THEN
	     CALL WRITEF('%S Specifying coordinates of end point',ERROR_BELL)
	     CALL WRITEF('Point is outside DTM bounds')
	     GOTO 999				!reprompt
	  ENDIF	   
	  GOTO 900
	ENDIF
C
C	If the command is issued via the menu, then we need to
C	prompt for start and end coordinate values
C	This is also done, if the PROFILE command is given from the
C	terminal, without any arguments.
C
	IF(MCMD)THEN
C
C	First prompt for the start x and y coordinate values
100	   IF(.NOT.WAIT_INPUT('Start x and y coordinates',.TRUE.,.TRUE.))
     &     GOTO 999
C
C	If input is from the terminal and expected format is not LATLONG
C	then........
	   IF(HAD_VDU)THEN
             IF(UNITS.NE.4)THEN
	       IF(RDREAL(REALAR(1)))GOTO 100	!reprompt
	       IF(RDREAL(REALAR(2)))GOTO 100	!reprompt
C
C	If input is from the terminal and expected format is LATLONG
C	then........
	     ELSE
C	Convert to seconds of arc 
               IF(READLL(LLDEGS,2,.FALSE.))THEN
	         CALL WRITEF
     &	   ('Latitude and longitude values supplied in wrong format')
	         GOTO 100				!reprompt
	       ELSE
	         REALAR(1)=LLDEGS(1)		!lat in seconds
	         REALAR(2)=LLDEGS(2)		!long in seconds
	       ENDIF
	     ENDIF
C
C	Convert coordinates to nearest DTI value
	     IF     (UNITS.EQ.1)THEN			!matrix
	        X1=NINT(REALAR(1))
	        Y1=NINT(REALAR(2))
C
	     ELSE IF(UNITS.EQ.2)THEN			!metres
		IF (HAD_ABSOLUTE)THEN
	           X1=NINT((REALAR(1)-X_OFFSET(1))/X_GRID(1))+1
	           Y1=NINT((REALAR(2)-Y_OFFSET(1))/Y_GRID(1))+1
		ELSE
	           X1=NINT((REALAR(1))/X_GRID(1))+1
	           Y1=NINT((REALAR(2))/Y_GRID(1))+1
		ENDIF
C
	     ELSEIF (UNITS.EQ.3 .OR. UNITS.EQ.4)THEN	!secs or LATLONG
	        X1=NINT(REALAR(2)*10)
	        Y1=NINT(REALAR(1)*10)
	        X1=((X1-LONREC(1,1))/LONINT(1))+1
	        Y1=((Y1-LATREC(1,1))/LATINT(1))+1
C
	     ELSE				     !projection units
	        IF (HAD_ABSOLUTE) THEN 
	           X1=NINT((REALAR(1)-DTIPROJ_ORIGIN(1,1))
     &             /DTIPROJ_SAMPLE(1,1))+1
	           Y1=NINT((REALAR(2)-DTIPROJ_ORIGIN(2,1))
     &             /DTIPROJ_SAMPLE(2,1))+1
	        ELSE
	           X1=NINT(REALAR(1)/DTIPROJ_SAMPLE(1,1))+1
	           Y1=NINT(REALAR(2)/DTIPROJ_SAMPLE(2,1))+1
	        ENDIF
	     ENDIF
C
C	If input is from the table puck then......
	   ELSE 
C
C	First check that a map has been set up on the table
	     IF(.NOT.MAP_SET)THEN
	       CALL WRITEF('%S Inputting coordinates from table',ERROR_BELL)
	       CALL WRITEF('No map setup has been performed')
	       GOTO 999				!return
	     ENDIF
C
C	Read the table coordinates
	     IF(READ_PUCK(BUTTON,X_TAB,Y_TAB,IERR))THEN
               CALL SHOW_ERROR(IERR)
	       GOTO 999
	     ENDIF
C	Test we are not in the menu area
	     IF(IN_MENU(X_TAB,Y_TAB,CMD))THEN
	       CALL WRITEF('%S Inputting coordinates from table',ERROR_BELL)
	       CALL WRITEF('Digitised point lies inside the menu')
	       GOTO 100				!reprompt
	     ENDIF
C
C	Convert from table coordinates to DTI coordinates
	     X1=NINT(TAB_DTI(1,1)*X_TAB+TAB_DTI(1,2)*Y_TAB+TAB_DTI(1,3))
	     Y1=NINT(TAB_DTI(2,1)*X_TAB+TAB_DTI(2,2)*Y_TAB+TAB_DTI(2,3))
C
C       Output coordinates to follow the prompt
	     TTOBEL = .TRUE.	!signal to VIO$PUT_OUTPUT
	     CALL WRITEF('%N %N',X1,Y1)
	     TTOBEL = .FALSE.
	  ENDIF
C
C	Check that the start coordinates are within the DTM
	  IF(X1.LT.1.OR.X1.GT.X_EXTENT(1).OR.
     &       Y1.LT.1.OR.Y1.GT.Y_EXTENT(1))THEN
	     CALL WRITEF
     &    ('%S Specifying coordinates of start point',ERROR_BELL)
	     CALL WRITEF('Point is outside DTM bounds')
	     GOTO 100				!reprompt
	  ENDIF	   
C	
C	Now prompt for the end x and y coordinate values
200	  IF(.NOT.WAIT_INPUT('End   x and y coordinates',.TRUE.,.TRUE.))
     &    GOTO 999
C
C	If input is from the terminal and expected format is not LATLONG
C	then........
	  IF(HAD_VDU)THEN
            IF(UNITS.NE.4)THEN
	      IF(RDREAL(REALAR(3)))GOTO 200	!reprompt
	      IF(RDREAL(REALAR(4)))GOTO 200	!reprompt
C
C	If input is from the terminal and expected format is LATLONG
C	then........
	    ELSE
C	Convert to seconds of arc 
              IF(READLL(LLDEGS,2,.FALSE.))THEN
	        CALL WRITEF
     &	     ('Latitude and longitude values supplied in wrong format')
	        GOTO 200				!reprompt
	      ELSE
	        REALAR(3)=LLDEGS(1)			!lat in seconds
	        REALAR(4)=LLDEGS(2)			!long in seconds
	      ENDIF
	    ENDIF
C
C	Convert coordinates to nearest DTI value
	    IF     (UNITS.EQ.1)THEN			!matrix
	        X2=NINT(REALAR(3))
	        Y2=NINT(REALAR(4))
C
	    ELSE IF(UNITS.EQ.2)THEN			!metres
		IF (HAD_ABSOLUTE) THEN
	           X2=NINT((REALAR(3)-X_OFFSET(1))/X_GRID(1))+1
	           Y2=NINT((REALAR(4)-Y_OFFSET(1))/Y_GRID(1))+1
		ELSE
	           X2=NINT((REALAR(3))/X_GRID(1))+1
	           Y2=NINT((REALAR(4))/Y_GRID(1))+1
		ENDIF
C
	    ELSEIF(UNITS .EQ. 3 .OR. UNITS .EQ. 4)THEN	!secs or LATLONG
	        X2=NINT(REALAR(4)*10)
	        Y2=NINT(REALAR(3)*10)
	        X2=((X2-LONREC(1,1))/LONINT(1))+1
	        Y2=((Y2-LATREC(1,1))/LATINT(1))+1
C
	    ELSE					!projection
	        IF (HAD_ABSOLUTE) THEN 
	           X2=NINT((REALAR(3)-DTIPROJ_ORIGIN(1,1))
     &             /DTIPROJ_SAMPLE(1,1))+1
	           Y2=NINT((REALAR(4)-DTIPROJ_ORIGIN(2,1))
     &             /DTIPROJ_SAMPLE(2,1))+1
	        ELSE
	           X2=NINT(REALAR(3)/DTIPROJ_SAMPLE(1,1))+1
	           Y2=NINT(REALAR(4)/DTIPROJ_SAMPLE(2,1))+1
	        ENDIF
C
	    ENDIF
C
C	If input is from the table puck then......
	  ELSE 
C
C	Read the table coordinates
	    IF(READ_PUCK(BUTTON,X_TAB,Y_TAB,IERR))THEN
               CALL SHOW_ERROR(IERR)
	       GOTO 999
	    ENDIF
C
C	Test we are not in the menu area
	    IF(IN_MENU(X_TAB,Y_TAB,CMD))THEN
	       CALL WRITEF('%S Inputting coordinates from table',ERROR_BELL)
	       CALL WRITEF('Digitised point lies inside the menu')
	       GOTO 200				!reprompt
	    ENDIF
C
C	Convert from table coordinates to DTI coordinates
	    X2=NINT(TAB_DTI(1,1)*X_TAB+TAB_DTI(1,2)*Y_TAB+TAB_DTI(1,3))
	    Y2=NINT(TAB_DTI(2,1)*X_TAB+TAB_DTI(2,2)*Y_TAB+TAB_DTI(2,3))
C
C       Output coordinates to follow the prompt
	    TTOBEL = .TRUE.			!signal to VIO$PUT_OUTPUT
	    CALL WRITEF('%N %N',X2,Y2)
	    TTOBEL = .FALSE.
	  ENDIF
C
C	Check that the end coordinates are within the DTM
	  IF(X2.LT.1.OR.X2.GT.X_EXTENT(1).OR.
     &       Y2.LT.1.OR.Y2.GT.Y_EXTENT(1))THEN
	     CALL WRITEF
     &       ('%S Specifying coordinates of end point',ERROR_BELL)
	     CALL WRITEF('Point is outside DTM bounds')
	     GOTO 200				!reprompt
	  ENDIF
	ENDIF	   
C
C	Signal success
900	GET_PROFILE_POINTS=.TRUE.
C
999	MCMD=.FALSE.
	RETURN
	END	  
C
