	LOGICAL FUNCTION SYMBOL_CLEAR_CMD()
C
***	MODULE	SYMBOL_CLEAR_CMD
***	IDENT	22JL88
C
C Copyright Laser Scan Laboratories Limited, Cambridge, England
C
C Created by					ALB  19-Jul-1988
C
C Function to clear symbols from display and to set symbol array entry
C to undefined
C
	IMPLICIT NONE
C
C common blocks
C
***	COMMON/HERE:MODEL/
***	COMMON/HERE:USER_SYMBOLS/
C
C W/s.
C
	LOGICAL OK		! return code
	LOGICAL EOL		! end of line
	INTEGER	CMD		! command number
	INTEGER I		! loop controls.
	INTEGER SYM_NUM		! symbol number
	INTEGER*2 BUFF_PTR	! to remember buffer pointer
	BYTE CH			! for use with RDCH & RDCHS
C
C define check table
C
	EXTERNAL 	CLEARSYM_CMD_TABLE
	INTEGER 	CLEARSYM_CMD_TABLE
C
C Functions.
C
	INTEGER 	RDCOMM
	LOGICAL*1	RDLONG
	LOGICAL*1 	RDCHS
	LOGICAL		FRTFND
C
C***********************************************************************
C
C Initialise.
C
	SYMBOL_CLEAR_CMD=.TRUE.		! assume success
C
C***********************************************************************
C
C set logical switches for required checks to .TRUE.
C
	CALL DCPSAV(BUFF_PTR)			! save the buffer pointer
	CMD = RDCOMM(CLEARSYM_CMD_TABLE)
	GOTO (
     &		5,		! probably check number or range supplied
     &		300		! ALL found
     &			) CMD+1
5	CONTINUE
	CALL DCPSET(BUFF_PTR)			! reset buffer pointer
10	CONTINUE
	EOL = RDCHS(CH)
	IF(.NOT.EOL) THEN				! more feature codes
	   IF ((CH.GE.48).AND.(CH.LE.57)) THEN		! 0 - 9
	      GOTO 200
	   ELSE						! unexpected char
	      CALL WRITEF('%S Specifying command CLEAR SYMBOL',ERROR_BELL)
	      CALL WRITEF('Unexpected character "%^B%C" '//
     &		'at this point.',CH)
	      SYMBOL_CLEAR_CMD = .FALSE.
	      GOTO 999
	   ENDIF
	ELSE						! no more FC's
	   CALL WRITEF('%S Specifying command CLEAR SYMBOL',ERROR_BELL)
	   CALL WRITEF('Command require symbol number ')
	   SYMBOL_CLEAR_CMD = .FALSE.
	   GOTO 999
	ENDIF
C
C***********************************************************************
C
C Got a number backspace and read as an integer assign to SYM_NUM
C
200	CONTINUE
	CALL BSCH
	IF(RDLONG(SYM_NUM)) THEN
	   CALL WRITEF('%S Specifying command CLEAR SYMBOL',ERROR_BELL)
	   CALL WRITEF('Error reading integer number')
	   SYMBOL_CLEAR_CMD = .FALSE.
	   GOTO 999
	ENDIF
C
C clear symbol if visible
C
	IF(SYMBOL_LDATA(7,SYM_NUM)) THEN 	! only visible symbols
C
C Look up feature code in FRT
C
	   OK = FRTFND(SYMBOL_IDATA(4,SYM_NUM))	
C
C clear symbol from display
C
	   CALL SRICOL(0)			! set colour to black
	   CALL PLOT_SYMBOL(	SYMBOL_IDATA(4,SYM_NUM),! feat code
     &				SYMBOL_RDATA(2,SYM_NUM),! DTI x coord
     &				SYMBOL_RDATA(3,SYM_NUM),! DTI y coord
     &				.FALSE.,		! not IFF data
     &				.TRUE.,			! clear mode
     &				SYM_NUM)		! button or symbol num
	   SYMBOL_LDATA(6,SYM_NUM) = .FALSE.
	   SYMBOLS_USED = SYMBOLS_USED - 1
	   CALL SRICOL(-1)			! set colour to FRTCOL
	ENDIF
	GOTO 1000
C
C clear all symbols 
C
300	CONTINUE
	CALL SRICOL(0)			! set colour to black
	DO 310 I=1,MAX_SYMBOLS
	   IF(SYMBOL_LDATA(7,I)) THEN 	! only visible symbols
C
C Look up feature code in FRT
C
	      OK = FRTFND(SYMBOL_IDATA(4,I))	
C
C clear symbol all from display
C
	      CALL PLOT_SYMBOL(	SYMBOL_IDATA(4,I),	! feat code
     &				SYMBOL_RDATA(2,I),	! DTI x coord
     &				SYMBOL_RDATA(3,I),	! DTI y coord
     &				.FALSE.,		! not IFF data
     &				.TRUE.,			! clear mode
     &				I)			! button or symbol num
	      SYMBOL_LDATA(6,I) = .FALSE.
	      SYMBOLS_USED = SYMBOLS_USED - 1
	   ENDIF
310	CONTINUE
	CALL SRICOL(-1)			! set colour to FRTCOL
C
C***********************************************************************
C
999	CONTINUE	
1000	CONTINUE
	RETURN
C
	END
