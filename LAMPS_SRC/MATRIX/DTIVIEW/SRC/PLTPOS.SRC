C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-02-22 09:21:40.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE PLTPOS(ADVANCE,CLEAR)
C
***	MODULE	PLTPOS
***	IDENT	22FE88
C
C	Copyright : Laser-Scan Laboratories Ltd, Cambridge, England
C	Author    : DRC
C	Created   : Dec 1984
C
CMOD	Changed to use GKS			ACM	Apr-1985
C
	IMPLICIT NONE
C
C parameters in
	LOGICAL		ADVANCE		! advance quadrant?
	LOGICAL		CLEAR		! routine called to set up
C				!transformation matrix for clearing
C				!quartered screen
C
***	COMMON/HERE:VIEW/
***	COMMON/HERE:DEVICE/
***	COMMON/HERE:GKSCMN/
C
	REAL*8		F	! a scaling factor
	REAL		U	! 1 world-unit = U device- units
	REAL		DX,DY	! window limit adjustments
	REAL		OX,OY	! device origin
	REAL		WXC,WYC	! world centre
	REAL		WXR,WYR	! world X and Y ranges
	REAL		DUMMY	! dummy real
	REAL		BORDER	! size of border to leave
	REAL		SCAFAC	! picture scale factor
	INTEGER		WKID	! workstation identifier
	LOGICAL		DUNSEC	! set plot pos for TEK yet
C
C************************************************************************
C
C	Map world window to (a part of) the screen, occupying only
C	95% of the available area 
C
C************************************************************************
C
C       Do we have an approriate device?
	IF (.NOT.(PRIMARY.OR.SECONDARY))GOTO 999
C
C------------------------------------------------------------------------
C 	Advance quad only when about to draw 
C	and present quad has been drawn on
	IF (AUTO) THEN
	  IF (ADVANCE.AND.VIEW_SHOWN(1,QUAD)) THEN
	    IF (SPLIT) QUAD = QUAD+1
	    IF (QUAD.GT.4) QUAD = 1
	  END IF
	ELSE
	  QUAD = 0	! always draw non-auto scaled pic in seg 1
	END IF
C
	DUNSEC=.FALSE.
C adjust transformations for selected plotting devices
	IF(PRIMARY)THEN
	  WKID=1
	  GOTO 20
	ENDIF
C
10	DUNSEC=.TRUE.
	IF(SECONDARY)THEN
	  WKID = TEK
	  GOTO 20
	ENDIF
C
	GOTO 80				! return
C
C
C expand WC window to same shape as screen
20	IF(.NOT.CLEAR)THEN
	  WXMIN = VWMINX
	  WXMAX = VWMAXX
	  WYMIN = VWMINY
	  WYMAX = VWMAXY
	ENDIF
C
	IF((CLEAR).OR.(WXMIN.EQ.WXMAX)) THEN	! world may still be undefined
	  WXMIN = 0
	  WXMAX = SCRNDX(WKID)
	  WYMIN = 0
	  WYMAX = SCRNDY(WKID)
	END IF
C
	F = ((WYMAX-WYMIN)/(WXMAX-WXMIN))*(SCRNDX(WKID)/SCRNDY(WKID))
C
	IF (F.GE.1) THEN
	  DX = (WXMAX-WXMIN)*(F-1)/2
	  WXMIN = WXMIN-DX
	  WXMAX = WXMAX+DX
	ELSE
	  DY = (WYMAX-WYMIN)*(1/F-1)/2
	  WYMIN = WYMIN-DY
	  WYMAX = WYMAX+DY
	END IF
C
C set WC (world-coords) to NDC (normalised-device-coords) transf.
C with world window in centre of screen
	CALL GSWN(1,WXMIN,WXMAX,WYMIN,WYMAX)
	F = SCRNDY(WKID)/SCRNDX(WKID)
	CALL GSVP(1,0.0,1.0,0.0,F)
C
C	Select normalisation transformation
	CALL GSELNT(1)
C
C set NDC to DC (device-coords) transformation
	CALL GSWKWN(WKID,0.0,1.0,0.0,F)
	CALL GSWKVP(WKID,0.0,SCRNDX(WKID),0.0,SCRNDY(WKID))
C
C set segment transformation to limit view to 95% of screen area,
C which may be whole screen or a screen quarter
	WXR = WXMAX-WXMIN			! world ranges
	WYR = WYMAX-WYMIN
C
C Set size of margin, and scale factor
	IF (CLEAR) THEN
	   BORDER = 0.0			! nothing for clearing
	ELSE
	   BORDER = 0.0125		! small border for models
	ENDIF
	SCAFAC = 0.5-2.0*BORDER
C
	DX = BORDER*WXR				! margin width
	DY = BORDER*WYR
C
	IF (.NOT.AUTO) THEN			! no auto-scaling?
	  CALL GEVTM(	WXMIN,WYMIN,		! fixed point
     +			MAT(5)*WXR,MAT(6)*WYR,	! shift vector
     +			0.0,			! rotation
     +			MAT(1),MAT(4))		! scale factors
C
	ELSE IF (SPLIT) THEN
	  WXC = WXR/2				! screen centre
	  WYC = WYR/2
	  GOTO (30,40,50,60) QUAD		! depending on quadrant
C
30	  CALL GEVTM(WXMIN,WYMIN,DX,WYC+DY,0.0,SCAFAC,SCAFAC)    !UL
	  GOTO 70
40	  CALL GEVTM(WXMIN,WYMIN,WXC+DX,WYC+DY,0.0,SCAFAC,SCAFAC)!UR
	  GOTO 70
50	  CALL GEVTM(WXMIN,WYMIN,WXC+DX,DY,0.0,SCAFAC,SCAFAC)    !LR
	  GOTO 70
60	  CALL GEVTM(WXMIN,WYMIN,DX,DY,0.0,SCAFAC,SCAFAC)        !LL
70	  CONTINUE
	ELSE
	  SCAFAC = SCAFAC*2.0
	  CALL GEVTM(WXMIN,WYMIN,DX,DY,0.0,SCAFAC,SCAFAC) !full screen
	ENDIF
C
C
80	IF (.NOT.DUNSEC) GOTO 10 ! repeat window setting for secondary dev
C
C---------------------------------------------------------------------------
999	RETURN
	END
