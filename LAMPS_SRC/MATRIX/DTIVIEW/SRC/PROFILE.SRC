C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-04-28 19:14:42.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE PROFILE(X1,Y1,X2,Y2)
C
***	MODULE	PROFILE
***	IDENT	28AP93
C
C	Copyright : Laser-Scan Ltd, Cambridge, England
C	Created   : Jan 1985, but totally rewritten July 1985.
C	Author    : DRC
C
CMOD	 Handle NULL heights correctly			   17-Oct-186
C
CMOD1225						JB 28-Apr-1993 
C	 Use ground length rather then grid size multiples
C
C	Routine to draw a profile of the terrain surface between 
C	DTI coordinate point X1,Y1 and coordinate point X2,Y2.
C
	IMPLICIT NONE
C
C	DTVIEW commons:
***	COMMON/HERE:DRCTRL/
***	COMMON/HERE:DTICMN/
***	COMMON/HERE:DEVICE/
***	COMMON/HERE:VIEW/
***	COMMON/HERE:GKSCMN/
C
***	COMMON/LSL$CMNDTI:DTIHDR/
C
C	Arguments:
	INTEGER*4	X1		!DTI 
	INTEGER*4	Y1		!coord-
	INTEGER*4	X2		!inate
	INTEGER*4	Y2		!values
C
C	Workspace
	REAL		X,Y		!plot coords
	REAL		ORIENT		!profile orientation
	REAL		PREVY		!previous value of Y
	REAL		DIFFX		!abs diff. between X2,X1
	REAL		DIFFY		!abs diff. between Y2,Y1
	REAL		XIN		!x intersection pt
	REAL		YIN		!Y intersection pt
	INTEGER*4	RETVAL		!function return value
	INTEGER*4	YPOS		!NINT(YIN)
	INTEGER*4	XPOS		!NINT(XIN)
	INTEGER*4	XPLOT		!X plot value
	INTEGER*4	STEP		!loop increment -1 or 1
	INTEGER*4	TEMPX,TEMPY	!temp variables
	INTEGER*4	THISZ		!height at current point
	INTEGER*4	SAMPLE		!loop
	INTEGER*4	LINE		!counters
	LOGICAL		NOPLOT		!to plot or not to plot?
C
C	Local functions
	INTEGER*4	ICOL		!returns colour index
	INTEGER*4	DTI_READ_WORD_DATA	!return single DTI value
C
C**************************************************************************
C	Test for duplicate points
C
	IF (X1.EQ.X2.AND.Y1.EQ.Y2)GOTO 999	!return, without drawing
C						!a profile
C--------------------------------------------------------------------------
C
	NOPLOT=.TRUE.				!automatic scaling
C
C	Initialise view limits
	VWMINX= 100 000.0
	VWMINY= 100 000.0
	VWMAXY=-100 000.0
	VWMAXX=-100 000.0
C
C	Reverse points if necessary ie if X1 is greater than X2
	IF (X1.GT.X2) THEN
	  TEMPX=X1
	  TEMPY=Y1
	  X1=X2
	  Y1=Y2
	  X2=TEMPX
	  Y2=TEMPY
	ENDIF
C	  
C	Differences in x and y
C	- used to determine the best direction for scan
 	DIFFX=ABS(X2-X1)
	DIFFY=ABS(Y2-Y1)
C
	YSCALE=DEFZSC			!vertical exaggeration
C
C************************************************************************
C	Simple horizontal line
C
50	IF (DIFFY.EQ.0) THEN		!view from south
	  XSCALE = X_GRID(1)
	  XPLOT  = -1			!start at 0 at first sample
	  PREVY  = YSCALE
C
	  DO 100 SAMPLE=X1,X2
C
	     XPLOT=XPLOT+1			!update x plot position
C
	     RETVAL=DTI_READ_WORD_DATA(1,THISZ,SAMPLE,Y1)
	     IF(.NOT.RETVAL)THEN
	       CALL LSL_PUTMSG(RETVAL)
 	       GOTO 999
	     ENDIF
C
	     IF(THISZ.LE.-32767)THEN		!null height	     
	       Y=PREVY				!leave Y unchanged
	       CALL GSPLCI(0)			!draw in black
	     ELSE
	       Y=FLOAT(THISZ)*YSCALE
	       CALL GSPLCI(ICOL(THISZ))
	     ENDIF
	     X=FLOAT(XPLOT)*XSCALE		!actual plot positions
C
	     VWMINX=MIN(VWMINX,X)		!update plot limits
	     VWMAXX=MAX(VWMAXX,X)
	     VWMINY=MIN(VWMINY,Y)
	     VWMAXY=MAX(VWMAXY,Y)
C
	     PREVY=Y
C
	     IF(.NOT.NOPLOT)THEN
C	     If first point do an invisible move
		IF(SAMPLE.EQ.X1)THEN
		  CALL G3MVTO(X,Y)
	        ELSE
	          CALL G3LNTO(X,Y)		! draw line to...
	        ENDIF
	     ENDIF
C
100       CONTINUE	
C
	  IF(.NOT.NOPLOT)CALL EOPIC		! ensure last line is drawn
	  GOTO 500
	ENDIF
C
C***********************************************************************
C	Simple vertical line
C
150	IF (DIFFX.EQ.0) THEN		
	  XSCALE = Y_GRID(1)		! view from the west
	  XPLOT  = -1
	  PREVY  = YSCALE
C
	  IF(Y1.GT.Y2)THEN
	    STEP=-1
	  ELSE
	    STEP=1
	  ENDIF
C
	  DO 200 LINE=Y1,Y2,STEP
C
	    XPLOT=XPLOT+1			!update x plot position
C
	     RETVAL=DTI_READ_WORD_DATA(1,THISZ,X1,LINE)
	     IF(.NOT.RETVAL)THEN
	       CALL LSL_PUTMSG(RETVAL)
 	       GOTO 999
	     ENDIF
C
	     IF(THISZ.LE.-32767)THEN		!null height	     
	       Y=PREVY				!leave Y unchanged
	       CALL GSPLCI(0)			!draw in black
	     ELSE
	       Y=FLOAT(THISZ)*YSCALE
	       CALL GSPLCI(ICOL(THISZ))
	     ENDIF
	     X=FLOAT(XPLOT)*XSCALE		!actual plot positions
C
	     PREVY=Y
C
	     VWMINX=MIN(VWMINX,X)		!update plot limits
	     VWMAXX=MAX(VWMAXX,X)
	     VWMINY=MIN(VWMINY,Y)
	     VWMAXY=MAX(VWMAXY,Y)
C
	     IF(.NOT.NOPLOT)THEN
C	     If first point do an invisible move
		IF(LINE.EQ.Y1)THEN
		  CALL G3MVTO(X,Y)
	        ELSE
	          CALL G3LNTO(X,Y)		! draw line to...
	        ENDIF
	     ENDIF
C
200       CONTINUE	
C
	  IF(.NOT.NOPLOT)CALL EOPIC		! ensure last line is drawn
	  GOTO 500
	ENDIF
C
C***********************************************************************
C	More complicated case of a non vertical or horizontal line
C
	IF (DIFFY.GT.DIFFX) GOTO 320
C
C-----------------------------------------------------------------------
C	Scan vertically
C
	XPLOT = -1
	PREVY = YSCALE
C
	ORIENT = ATAN2(DIFFY,DIFFX)
	XSCALE = X_GRID(1)/COS(ORIENT)
C
	DO 300 SAMPLE=X1,X2
C
	  XPLOT=XPLOT+1
C
	  IF(SAMPLE.EQ.X1)THEN
	    YPOS=Y1
	    GOTO 250
	  ENDIF
C
	  IF(SAMPLE.EQ.X2)THEN
	    YPOS=Y2
	    GOTO 250
	  ENDIF
C
C	  Calculate intersection of sample line SAMPLE with the line
C	  connecting vertex cells X1,Y1 and X2,Y2
C	  YIN is the real Y intersection point
C	  YPOS is the nearest integer to YIN
C
	  YIN=(Y1+(Y2-Y1)*(SAMPLE-X1)/(X2-X1))
	  YPOS=NINT(YIN)
C
250       RETVAL=DTI_READ_WORD_DATA(1,THISZ,SAMPLE,YPOS)
	  IF(.NOT.RETVAL)THEN
	    CALL LSL_PUTMSG(RETVAL)
 	    GOTO 999
	  ENDIF
C
	  IF(THISZ.LE.-32767)THEN		!null height	     
	    Y=PREVY				!leave Y unchanged
	    CALL GSPLCI(0)			!draw in black
	  ELSE
	    Y=FLOAT(THISZ)*YSCALE
	    CALL GSPLCI(ICOL(THISZ))
	  ENDIF
C
	  X = FLOAT(XPLOT)*XSCALE		!actual plot positions
C
	  PREVY=Y
C
	  VWMINX=MIN(VWMINX,X)		!update plot limits
	  VWMAXX=MAX(VWMAXX,X)
	  VWMINY=MIN(VWMINY,Y)
	  VWMAXY=MAX(VWMAXY,Y)
C
	  IF(.NOT.NOPLOT)THEN
	    IF(SAMPLE.EQ.X1)THEN
	       CALL G3MVTO(X,Y)		!invisible move
	    ELSE
	       CALL G3LNTO(X,Y)		!move to
	    ENDIF
	  ENDIF
C
300	CONTINUE
C
        IF(.NOT.NOPLOT)CALL EOPIC		! ensure last line is drawn
	GOTO 500
C
C***********************************************************************
C	Scan vertically
C
320	XPLOT = -1
	PREVY = YSCALE
C
	ORIENT= ATAN2(DIFFY,DIFFX)
	XSCALE = Y_GRID(1)/SIN(ORIENT)
C
	IF(Y1.GT.Y2)THEN
	  STEP=-1
	ELSE
	  STEP=1
	ENDIF
C
	DO 400 LINE=Y1,Y2,STEP
	  XPLOT=XPLOT+1
C
	  IF(LINE.EQ.Y1)THEN
	    XPOS=X1
	    GOTO 350
	  ENDIF
C
	  IF(LINE.EQ.Y2)THEN
	    XPOS=X2
	    GOTO 350
	  ENDIF
C
C	  Calculate intersection of sample line LINE with the line
C	  connecting vertex cells X1,Y1 and X2,Y2
C	  XIN is the real X intersection point
C	  XPOS is the nearest integer to XIN
C
	  XIN=(X1+(X2-X1)*(LINE-Y1)/(Y2-Y1))
	  XPOS=NINT(XIN)
C
350	  RETVAL=DTI_READ_WORD_DATA(1,THISZ,XPOS,LINE)
	  IF(.NOT.RETVAL)THEN
	    CALL LSL_PUTMSG(RETVAL)
 	    GOTO 999
	  ENDIF
C
	  IF(THISZ.LE.-32767)THEN		!null height	     
	    Y=PREVY				!leave Y unchanged
	    CALL GSPLCI(0)			!draw in black
	  ELSE
	    Y=FLOAT(THISZ)*YSCALE
	    CALL GSPLCI(ICOL(THISZ))
	  ENDIF
C
	  X=FLOAT(XPLOT)*XSCALE		!actual plot positions
C
	  PREVY=Y
C
	  VWMINX=MIN(VWMINX,X)		!update plot limits
	  VWMAXX=MAX(VWMAXX,X)
	  VWMINY=MIN(VWMINY,Y)
	  VWMAXY=MAX(VWMAXY,Y)
C
	  IF(.NOT.NOPLOT)THEN
	    IF(LINE.EQ.Y1)THEN
	       CALL G3MVTO(X,Y)		!invisible move
	    ELSE
	       CALL G3LNTO(X,Y)		!move to
	    ENDIF
	  ENDIF
C
400	CONTINUE
C
C
C********************************************************************
C	Second pass
C
500	IF (.NOT.NOPLOT)GOTO 999
C
	NOPLOT=.FALSE.
C
	IF (PRIMARY.OR.SECONDARY)THEN
C
	   CALL PLTPOS(.TRUE.,.FALSE.)	! now know min and max
C 					! x and y plot values.
	   CALL GSSGT		        !set segment transf
C
	   IF (PRIMARY)THEN
              CALL SHOTRN(1)
	      VIEW_SHOWN(1,QUAD) = .TRUE.
	   ENDIF
	   IF (SECONDARY)THEN
              CALL SHOTRN(2)
	      VIEW_SHOWN(2,QUAD) = .TRUE.
	   ENDIF
	ENDIF
C
	GOTO 50
C
C----------------------------------------------------------------------------
C Close segment (provided displays and use, and started plotting)
C
999	IF (.NOT.NOPLOT) CALL EOPIC
C
	RETURN
	END
C
