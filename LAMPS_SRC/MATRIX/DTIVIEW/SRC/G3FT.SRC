	SUBROUTINE G3FT(X, Y, XX, YY)
C
***	MODULE G3FT
***	IDENT 21OC92
C
C Copyright Laser-Scan Ltd., Cambridge, England
C Author R. Fairbairns
C
C Coded May 1982
C
CMOD	Modified to us GKS calls only, and extra subroutines
C	G3ORIGIN, G3UNIT, G3FILL added		ACM	   May-1985
C	G3TX added				CCB	 1-Oct-1986
C	G3AREA added				 JB	20-Oct-1992
C
	IMPLICIT NONE
C
***	COMMON/LSL$CMNIFF:IFFHAN/
C
C DTVIEW commons
C
***	COMMON/HERE:DEVICE/
***	COMMON/HERE:VIEW/
***	COMMON/HERE:DRCTRL/
***	COMMON/HERE:GKSCMN/
***	COMMON/HERE:CULTRE/
C
***	PARAMETER/HERE:GKSPAR/
C
C Gino-3 calls, coded in FORTRAN, for the benefit of TEKLIB users
C :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
C
C NOTE :For version using dummy GKS segment routines,
C	transformation from world to segment-world coords must
C	be de-commented-out
C
C arguments:
	INTEGER*4	X, Y		! the vector
	REAL		XX, YY		! or, again, the vector
	CHARACTER*(*)	STRING		! string for GTX
	INTEGER		FILCOL		! fill-area colour index
	REAL		UNIT		! NDC:WC units ratio
C
C workspace:
	REAL		SWX,SWY
	REAL		NEX,NEY
C
	REAL		RX, RY		! the same
	REAL		WX,WY		! world coords
	REAL		X1,Y1,X2,Y2	! old and new origin coords
	REAL		DX,DY		! shift in world origin
	REAL		VSDX		! VSLIB X range
	REAL		XMIN,XMAX	! world X range
	REAL		YMIN,YMAX	! world Y range
	REAL		PX(4),PY(4)	! polyline points
	REAL		AX(1000),AY(1000) ! area points
	REAL		F		! odd working real
	REAL		RDUMMY		! dummy real
	INTEGER*2	IELEN
	INTEGER		ID		! workstation ID No.
	INTEGER		IDUMMY		! dummy integer argument
	INTEGER		WKID
	INTEGER		I,N
C
C the code:
C
C * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
C
	ENTRY G3AREA(XX, YY, I, N)
C
C Called at point 2 and above from SRIGFA
C
	RX = XX
	RY = YY
C
	IF (PRIMARY.OR.SECONDARY) THEN
	  IF (I.EQ.2) THEN			! fill in first point
	    AX(1) = XCUR			! at second
	    AY(1) = YCUR
	    IF (TRANSF) THEN
	      AX(1) = WMAT(1)*AX(1)+WMAT(5)
	      AY(1) = WMAT(4)*AY(1)+WMAT(6)
	    ENDIF
	  ENDIF
C
	  AX(I) = RX
	  AY(I) = RY
	  IF (TRANSF) THEN
	    AX(I) = WMAT(1)*AX(I)+WMAT(5)
	    AY(I) = WMAT(4)*AY(I)+WMAT(6)
	  ENDIF
C
	  IF (DEBUG) CALL WRITEF('Drawing vector to: %F %F',AX(I),AY(I))
C
	  IF (I.EQ.N) CALL GFA(N,AX,AY)
	ENDIF
C
	IF (PLOT_IFF.AND.ACTIVE_IFF) THEN
	  IF (NULL_FEATURE) THEN
	    LASTX = RX
	    LASTY = RY
	    RETURN
	  ENDIF
C
          IF (.NOT.INFT) CALL IFNWFT(LASTX, LASTY)
	  IF (RX.EQ.LASTX .AND. RY.EQ.LASTY) RETURN
          LASTX = RX
	  LASTY = RY
	  CALL IFADPT(LASTX, LASTY)
	ENDIF
C
	RETURN
C
C * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
C
	ENTRY G3LNTO(XX, YY)
C
C Called at point 2 and above from SRIGPL
C
	RX = XX
	RY = YY
C
	IF (PRIMARY.OR.SECONDARY) THEN
	  PX(1) = XCUR
	  PX(2) = RX
	  PY(1) = YCUR
	  PY(2) = RY
	  XCUR = PX(2)
	  YCUR = PY(2)
	  IF (TRANSF) THEN
	    PX(1) = WMAT(1)*PX(1)+WMAT(5)
	    PX(2) = WMAT(1)*PX(2)+WMAT(5)
	    PY(1) = WMAT(4)*PY(1)+WMAT(6)
	    PY(2) = WMAT(4)*PY(2)+WMAT(6)
	  END IF
C
	  IF (DEBUG) CALL WRITEF('Drawing vector from: %F %F to %F %F',
     &						PX(1),PY(1),PX(2),PY(2))
	  CALL GPL(2,PX,PY)
	END IF
C
	IF (PLOT_IFF.AND.ACTIVE_IFF) THEN
	  IF (NULL_FEATURE) THEN
	    LASTX = RX
	    LASTY = RY
	    RETURN
	  ENDIF
C
          IF (.NOT.INFT) CALL IFNWFT(LASTX, LASTY)
	  IF (RX.EQ.LASTX .AND. RY.EQ.LASTY) RETURN
          LASTX = RX
	  LASTY = RY
	  CALL IFADPT(LASTX, LASTY)
	ENDIF
C
	RETURN
C
C * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
C
	ENTRY G3MVTO(XX, YY)
C
	IF (PRIMARY.OR.SECONDARY) THEN	  
          XCUR = XX
	  YCUR = YY
	  IF (DEBUG) CALL WRITEF('Invisible move to: %F %F',XX,YY)
	END IF
C
	IF (PLOT_IFF.AND.ACTIVE_IFF) THEN
          CALL FLUSH(.TRUE.)
	  LASTX = XX
	  LASTY = YY
	ENDIF
C
	RETURN
C
C * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
C
	ENTRY EOPIC
C
C Update the workstations
	IF (PRIMARY) CALL GUWK(1,GSUPP)
	IF (SECONDARY) CALL GUWK(2,GSUPP)
C
	IF (PLOT_IFF.AND.ACTIVE_IFF) THEN
	   CALL FLUSH(.TRUE.)
	   CALL IFFSEL(1)
	   CALL IFFUNO(LPOSNO)
	   CALL IFFEO
	ENDIF
C
	RETURN
C
C * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
C
	ENTRY ENDIFF
C	Finally close the IFF file and fill out range entry
C
	IF (PLOT_IFF) THEN
	  CALL IFFTXT		! write descriptive text feature
	  CALL IFFEM
	  CALL IFFEJ
C
C now rewind and do the RAnge entry
	  CALL IFFRWD
	  CALL IFFNXC('RA',IELEN)
	  RANGE(1)=VWMINX
	  RANGE(2)=VWMAXX
	  RANGE(3)=VWMINY
	  RANGE(4)=VWMAXY
	  CALL EIHWR(RANGE,4,1)
	  CALL IFFCLO(1)
	  PLOT_IFF=.FALSE.
	  ACTIVE_IFF=.FALSE.
	ENDIF
C
	RETURN
C
C********************************************************************
C
	ENTRY G3ORIGIN(XX,YY)
C
C Moves world origin to GKS NDC position (XX,YY)
C
	MAT(5) = XX
	MAT(6) = YY
C
	RETURN
C
C * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
C
	ENTRY G3UNIT(UNIT)
C
C Sets NDC:world scale factor to UNIT
C
	MAT(1) = UNIT
	MAT(4) = UNIT
C
	RETURN
C
C * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
C
	ENTRY G3FILL(SWX,SWY,NEX,NEY,FILCOL)
C
C As VSFILL
C
	IF (PRIMARY.OR.SECONDARY) THEN
	   PX(1) = SWX
	   PX(2) = NEX
	   PX(3) = NEX
	   PX(4) = SWX
C
	   PY(1) = SWY
	   PY(2) = SWY
	   PY(3) = NEY
	   PY(4) = NEY
C
	   IF (TRANSF) THEN
	     PX(1) = WMAT(1)*PX(1)+WMAT(5)
	     PX(2) = WMAT(1)*PX(2)+WMAT(5)
	     PX(3) = WMAT(1)*PX(3)+WMAT(5)
	     PX(4) = WMAT(1)*PX(4)+WMAT(5)
C
	     PY(1) = WMAT(4)*PY(1)+WMAT(6)
	     PY(2) = WMAT(4)*PY(2)+WMAT(6)
	     PY(3) = WMAT(4)*PY(3)+WMAT(6)
	     PY(4) = WMAT(4)*PY(4)+WMAT(6)
	   ENDIF
C
	   CALL GSFAIS(1)		! set fill-area style to solid
	   CALL GSFACI(FILCOL)		! set fill-area colour
	   CALL GFA(4,PX,PY)		! fill-area
	   XCUR = NEX
	   YCUR = NEY
	ENDIF
C
	RETURN
C
C * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
C
	ENTRY G3TX(SWX,SWY,STRING)
C
	IF(PRIMARY.OR.SECONDARY)THEN
C
	  PX(1) = SWX
	  PY(1) = SWY
C
	  IF(TRANSF)THEN
	    PX(1) = WMAT(1)*PX(1)+WMAT(5)
	    PY(1) = WMAT(4)*PY(1)+WMAT(6)
	  ENDIF
C
	  CALL GTX(PX,PY,STRING)		! text
	ENDIF
C
80	RETURN
	END
C
