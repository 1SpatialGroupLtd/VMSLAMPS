C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1995-12-22 15:34:12.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	PROGRAM DTIVIEW
C
***	MODULE DTIVIEW
***	IDENT  15NO94
C
	IMPLICIT NONE
C
C Copyright Laser-Scan Ltd., Cambridge, England
C
C Created            :	 December 1984
C Author             : 	 D R Catlow (Based on progam DTMTEK)
C
C Major modifications:
C Modified to use GKS				ACM  May-1985
C Modified to add a culture overlay option 	DRC  Sep-1985
C Major changes to command structure and        DRC  Jan-1988
C use of DTILIB and extended GKSLDLIB
C Modified to add user specified symbols 	
C and to include a fog capability 		ALB  Jul-1988
C
CMOD ENABLE/DISABLE ABSOLUTE commands added    MWSR  21-Nov-1988 
CMOD Call to DTI_UNITS added		       MWSR  23-Nov-1988
CMOD New routines SET_IFFWIN, RESET_IFFWIN
C    Translate automatic table set up logical name
C    Introduce ENABLE/DISABLE TABLE	       
C    Translate automatic window setting log    MWSR  28-Nov-1988
C    name
CMOD Set HADSF when SYMBOL SCALING factor set  MWSR  29-Nov-1988
CMOD New routine SHOW_SYMBOLS		       MWSR  29-Nov-1988
CMOD Make EF_VDU = 4 to avoid conflict with
C    IFF LUNs					DRC  15-Feb-1989
CMOD To correct ZSTEP parameter			 PP  30-May-1990
C
CMOD1225					 JB  27-Apr-1993
C	Limit PHI to between -80 and 80 degrees to
C	avoid internal array overflows
C	Use proper ground length for PROFILE IFF output,
C	instead of the DTI sample size multiple
C
CMOD1426					 JB  15-Nov-1994
C	Use FRTSHR, FRT_GRAPH_INIT to initialise 
C	FRT files
C
CMOD1519					 JB 22-Dec-1995
C	Use double precision angular variables eg. PHI, THETA etc.
C
C-------------------------------------------------------------------------
C
***	PARAMETER/LSL$CMNLSL:LSLLIBMSG/
***	PARAMETER/LSL$CMNDTI:DTILIBMSG/
***	PARAMETER/LSL$CMNDTI:DTIPAR/
***	PARAMETER/HERE:GKSPAR/
C
	INCLUDE 	'($DVIDEF)'
	INCLUDE		'($DCDEF)'
C
***	COMMON/LSL$CMNLSL:CMDCOM/
***	COMMON/LSL$CMNLSL:TXTC/
***	COMMON/LSL$CMNDTI:DTIHDR/
C
***	COMMON/HERE:DTICMN/
***	COMMON/HERE:DTIQIO/
***	COMMON/HERE:DRCTRL/
***	COMMON/HERE:DEVICE/
***	COMMON/HERE:VIEW/
***	COMMON/HERE:MODEL/
***	COMMON/HERE:TAB/
***	COMMON/HERE:GKSCMN/
***     COMMON/HERE:CULTRE/
***	COMMON/HERE:SELECT/			! contains IFF feat selections
***	COMMON/HERE:USER_SYMBOLS/		! contains user symbol array
***	COMMON/HERE:FOG/			! fog parameters
C
C workspace
	INTEGER*4	CMD			! decoded command number
	INTEGER		I			! integer
	INTEGER*4	IQUAD			! quadrant to clear
	INTEGER*4	NAMLEN			! filename length
C
	INTEGER*4	RETVAL			! function return code
	INTEGER*4	ERROR			! system error code
	INTEGER*4	VAL			! for GETDVI
	INTEGER*4	X1,Y1,X2,Y2		! two DTI points
	INTEGER*4	X_TAB,Y_TAB		! table coords
	INTEGER*4	SYM_NUM			! symbol
	INTEGER*4	OLD_DTI(2,2)		! old DTI file window
	INTEGER*4	NEW_DTI(2,2)		! new DTI file window
	INTEGER*4	MAX_ZSTEP		! maximum value for zstep 
C
	LOGICAL		OK			! return code
	LOGICAL		MCMD			! true if command from menu
	LOGICAL		CRT			! output to CRT?
C
	BYTE		CH
C
	CHARACTER*7	PROMPT			! program prompt
	CHARACTER*80	LINE
	CHARACTER*5	COMPASS(4)		! 4 viewing points
	CHARACTER*7	UNITS_TYPE(5)		! 4 units type
	LOGICAL		SYMBOL_UNDEFINE_MESS	! symbol undefine message
C
	REAL		XT1,XT2,YT1,YT2		! temp IFF window values
	CHARACTER*1	TRANSLATION		! log name translation
	LOGICAL		DEFAULT_WINDOW		! default windows
C
C primary command table
	EXTERNAL	DTIVIEW_CMD_TABLE
C
C secondary command tables
	EXTERNAL	ENABLE_CMD_TABLE	! enable/disable qualifiers
	EXTERNAL	LABEL_CMD_TABLE		! label qualifiers
	EXTERNAL	LEGEND_CMD_TABLE	! legend qualifiers
	EXTERNAL	SETUP_CMD_TABLE		! setup qualifiers
	EXTERNAL	SET_CMD_TABLE		! set commands
	EXTERNAL	DEFAULT_CMD_TABLE	! default commands
	EXTERNAL	SHOW_CMD_TABLE		! show qualifiers
	EXTERNAL	COMPASS_CMD_TABLE	! compass points
	EXTERNAL	SEL_CMD_TABLE		! select qualifiers
	EXTERNAL	UNIT_CMD_TABLE		! units qualifiers
	EXTERNAL	DRAW_CMD_TABLE		! draw qualifiers
	EXTERNAL	CLEAR_CMD_TABLE		! clear qualifiers
C
C control/C handler
	EXTERNAL	CTRLCAST
	EXTERNAL 	PUT_OUTPUT
C
C functions called
	INTEGER*4	DTI_PRINT_HEADER	! to print DTI header details
	INTEGER*4	DTI_CLOSE		! to unmap a DTI file
	INTEGER*4	DTI_CREATE		! to create a DTI file
	INTEGER*4	DTI_UNITS		! tests for valid units
C
	INTEGER		SYS$ASSIGN		! assign I/O channels
	INTEGER*4	LIB$SPAWN		! spawns DCL operations
	INTEGER*4	LIB$DELETE_FILE		! to delete temporary files 
						! created by culture overlay 
						! option
	INTEGER		LIB$GETDVI		! get term characteristics etc.
	INTEGER*4	LIB$FIND_FILE		! to test for presence of
C						! DTIVIEWEXTRA on LSL$EXE:
	INTEGER*4	GETFILNAM		! filename parsing
	INTEGER*4	TEST_TERM		! input a terminal?
	INTEGER*4 	FLRSEL			! select unit
	INTEGER*4 	FLRLIN			! read line from a command file
	INTEGER*4	FLRCLO			! to close indirect command file
C
	INTEGER*4	TRNALL			! translate logical name
	INTEGER*4	RDCOMM			! parse command against command
C						! table entries
C
	LOGICAL		DTMJPI			! process info introduction
	LOGICAL		RDREAL			! read real
	LOGICAL		RDLONG			! read long
	LOGICAL		RDCHS			! read character
	LOGICAL		RDCH			! read character
	LOGICAL		HAD_PUCK		! had puck input?
	LOGICAL		READ_PUCK		! read puck input
	LOGICAL		IN_MENU			! table coords in menu area?
	LOGICAL		INIT_TAB		! initialise table monitor
	LOGICAL		WAIT_INPUT		! wait for kybd or table input
	LOGICAL		FRTINI			! to read FRT file
	LOGICAL		SRIINI			! to read SRI file
	LOGICAL		RDSEL			! read fc selection
	LOGICAL		RDLAY			! read layer selection
	LOGICAL		RDFSN			! read fsn. selection
	LOGICAL		TSTWK			! returns availability of a
						! primary or sec device and id
	LOGICAL		GET_DTI_COORDS		! do that
	LOGICAL		OPEN_FILE		! routine to map DTI file
	LOGICAL		OPEN_IFF_FILE		! routine to open input IFF 
	LOGICAL		CREATE_IFF_FILE		! routine to create an output
						! IFF file
	LOGICAL		GET_PROFILE_POINTS	! read profile start and end
	LOGICAL		GET_WINDOW_POINTS	! read window coordinates
C 
	LOGICAL		PROCESS_SYMBOLS		! process symbols
	LOGICAL		CLEAR_SYM_CMD		! clear symbol 
	LOGICAL		SYMBOL_CMD		! symbol parameters
	LOGICAL		FOG_CMD			! fog parameters
	LOGICAL		EXTRA_OK		! .t. if extra DTIVIEW options
C						! are callable
C
C-----------------------------------------------------------------------------
C Menu definition:
C
	DATA BOXMAP/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     +	             1, 2, 3, 4, 5, 6, 7, 8, 0,17,18,11, 0,
     +		    12,13,14,15, 0,16, 9,10, 0,19,20,21, 0,
     +		     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     +		    25,24,35,36,26,27,28,29,30,31,32,33,34,
     +		    22,23,37,38,39,40, 0, 0, 0, 0, 0, 0, 0,
     +		     0, 0,41,42,43,44,49,50,53,54,55,58,59,
     +		     0, 0,45,46,47,48,52,51, 0,57,56,60,61/
C
C               enable options          units     dtiview menu
C     AUT, BAT, DIV, FIS, OVE, PC1, MAT, MET,    , FIL, WIN, MAP,    ,
C     GRA, PRI, SEC, IFO,    , PC2, SEC, LAT,    , IFF, IFW, FRT,    ,
C
C        view commands                  display commands
C       N,   E, DIS, HEI, PHI, THE, ISO, PER, PRO, OVE, LAB, LEG, LUT,
C       W,   S, ZSC, ZST, ZLI, DEF, quadrant      clear       planes   
C
C        show   ANN, DEV, ENA, IFF,   1,   2, FUL,   1,   2,   5,   6,
C               FIL, SEL, SET, VIE,   4,   3,    ,   4,   3,   7,   8,
C
C     NB. Not all DTIVIEW commands are contained on the menu.
C
C
C-----------------------------------------------------------------------
C Initialise various libraries and open GKS
C
	CALL LSL_INIT(.TRUE.)		! initialise LSLLIB
	CALL SET_TXTLIM(80)		! set max line length
	CALL LSL_SET_OUTPUT(PUT_OUTPUT)
C
	CALL DTI_INIT
	OK = DTMJPI()
C
	CALL GOPKS(6)
C
C-----------------------------------------------------------------------
C Set up program promt
	PROMPT = 'DTIVIEW'
C
C Set up directions for SHOW VIEW command.
	COMPASS(1) = 'WEST'
	COMPASS(2) = 'SOUTH'
	COMPASS(3) = 'EAST'
	COMPASS(4) = 'NORTH'
C
C Set up units for UNITS command
	UNITS_TYPE(1)='MATRIX'
	UNITS_TYPE(2)='METRES'
	UNITS_TYPE(3)='SECONDS'
	UNITS_TYPE(4)='LATLONG'
	UNITS_TYPE(5)='PROJECTION'
C
C Default working units are matrix units (ie. col and row values)
	UNITS=1
C
C Set default viewing parameters
	DEFHOV = 300.0			! height of view (metres)
	DOV    = 300.0			! distance (metres)
	DEFPHI = 45.0			! phi (x rotation)
	DEFTHT = -30.0			! theta (y rotation)
	DEFZSC = 1.0			! vertical exaggeration
	DIRECT = 1			! viewing direction from west
	X_SAMPLE = 1                    ! x sampling interval
	Y_SAMPLE = 1                    ! y sampling interval
C
C Set default fog parameters
	FOG_COLOUR     = 0		! black
	FOG_VISIBILITY = 1000.0		! visibility 1000.0 metres
C
C Planes and number of colours
	PICTURE(1)	= .TRUE.	! picture 1 enabled
	PICTURE(2)	= .TRUE.	! picture 2 enabled
	NOPLNS    	= 5
	PLANE_MASK 	= 2**NOPLNS-1
        LNDCOL 		= (2**NOPLNS)-3
	OVERLAY_COLOURS = (2**(8-NOPLNS))-1
	MAXCOL 		= LNDCOL
	STEPS 		= LNDCOL	! number of display colours
	SEACOL		= 14		! max sea colours
C
C Default selections
C Initialise all selections (ie. no restriction on what is plotted)
	LYSMOD = .FALSE.
	FCSMOD = .FALSE.
	FSNMOD = .FALSE.
C
	CALL VIOCLR(LAYMAP,LAYMAX*4,-1)	! reset the whole bit-map.
	CALL VIOCLR(FCMAP,FCMAX*4,-1)	! reset the whole bit-map.
	CALL VIOCLR(FSNMAP,FSNMAX*4,-1)	! reset the whole bit-map.
C
C Other default values
	AUTO    = .TRUE.		! ENABLE AUTOSCALE
	FISHNET = .FALSE.		! no fishnet representation
	DTICOL  = .TRUE.		! colours over whole DTI
	HADSTP  = .FALSE.		! not had STEP command
	BATH    = .FALSE.		! bathymetry option not selected
	COLOUR_IFF = .FALSE.		! don't create a new IFF feature
C					! everytime the colour changes
	HAD_ABSOLUTE = .TRUE.		! absolute coordinates
	HADFRT       = .FALSE.
C
	LAND_FC  = 1			! fc. for land profiles
	SEA_FC   = 2			! fc. for sea profiles
	LAYER    = 1                    ! layer in output IFF file
	NULL_FC  = 3			! fc for points outside ZLIMITS
	TEXT_FC  = 64			! fc. for text
C
	MASK  = .TRUE.			! don't mask below culture
	SYMSF = 1.0			! symbol scaling factor
	TK_LINESTYLE = 1		! TEK 4000 linestyle index
C
C Default label and legend parameters
	LABSIZ = 1
	LABX   = 0.5			! centre of
	LABY   = 0.5			! screen
	LABCOL = 1
	LEGSIZ = 0.25
	LEGX   = 0.005
	LEGY   = 0.15
C
C Size of menu
	NX_MNU = 13			! menu has 13 columns
	NY_MNU = 8			! menu has 8 rows
C
C Graphics devices etc.
	PRIMARY          =.FALSE.	! primary device not enabled
	SECONDARY        =.FALSE.	! secondary device not enabled
	INIT_PRIMARY     =.FALSE.	! primary device not initialised	
	INIT_SECONDARY   =.FALSE.	! secondary device not intialised
	PRIMARY_DEVICE   =.FALSE.	! primary device supported?
	SECONDARY_DEVICE =.FALSE.       ! secondary device supported?
	PLOT_IFF         =.FALSE.	! DISABLE IFF_OUTPUT
C
	MENU_SET = .FALSE.		! menu not yet located
	MAP_SET  = .FALSE.		! map not yet located
C
	QUAD   = 0			! full
	SPLIT  = .FALSE.		! screen
C
	HADTMP = .FALSE.		! no temporary files
	HADIFF = .FALSE.		! input IFF file not yet 
C					! specified
	DEBUG  = .FALSE.		! internal debug messages
					! switched off
	OVERLAY = .FALSE.		! culture overlay option is
C					! not selected
C
C---------------------------------------------------------------------------
C Assign Input/Output channels etc.
C
C Is input is from command file?
	CMDFIL = .TRUE.			! assume so
	RETVAL = TEST_TERM('SYS$INPUT',TERM,IERR)
	IF (.NOT.RETVAL) THEN
	   IF (RETVAL.EQ.LSL__SYSERR) THEN
	      CALL LSL_PUTMSG(IERR)
	   ELSE
	      CALL LSL_PUTMSG(RETVAL)
	   ENDIF
	ELSE
	   CMDFIL = .NOT.TERM		! input from command file
	ENDIF
C
C Assign input channel, and set up control/C handler
	CTRLC = .FALSE.
	IF (.NOT.CMDFIL) THEN
	  IERR = SYS$ASSIGN('SYS$INPUT',IN_CHAN,,)
	  IF (.NOT.IERR) THEN
	    CALL LSL_PUTMSG(IERR)
	    GOTO 9000		! exit
	  ENDIF
	  CALL SET_OUTBAND_AST(CTRLCAST,8)
	ENDIF
	HADQIO = .FALSE.	! no QIO active
C
C Is output is to a terminal?
	IERR=LIB$GETDVI(DVI$_DEVCLASS,,'SYS$OUTPUT',VAL,,)
	IF (IERR) THEN			! success
	   IF (VAL.EQ.DC$_TERM)TERM=.TRUE. ! it is a terminal
	ELSE
	   CALL LIB$SIGNAL(%VAL(IERR))
	ENDIF
C
	IF(TERM)THEN
	  IERR=LIB$GETDVI(DVI$_TT_SCOPE,,'SYS$OUTPUT',VAL,,)
	  IF (IERR) THEN
	     CRT=VAL.EQ.1
	  ELSE
	     CALL LIB$SIGNAL(%VAL(IERR))
	  ENDIF	
C
C Assign output channel
	  IERR = SYS$ASSIGN('SYS$OUTPUT',OUT_CHAN,,)
	  IF (.NOT.IERR) THEN
	    CALL LSL_PUTMSG(IERR)
	    GOTO 9000		! exit
	  ENDIF
	ELSE
	  CRT=.FALSE.
	ENDIF
C
C----------------------------------------------------------------------
C Initialise digitising table
	TABLE=.TRUE.			! initial assumption
	RETVAL = TRNALL('LSL$AUTO_ENABLE_TABLE',TRANSLATION)
	IF(.NOT.RETVAL.OR.TRANSLATION.NE.'1')THEN
	   TABLE = .FALSE.
	   GOTO 5
	ELSE
	   TABLE = .TRUE.
	ENDIF
C
	IF(TABLE) THEN
	   IF (INIT_TAB(,IERR)) THEN
	      CALL WRITEF
     &	      ('%S Error initialising table monitor',WARN_BELL)
	       CALL WRITEF
     &        ('DTIVIEW will assume no table is available')
	      TABLE=.FALSE.
	      GOTO 4
	   ENDIF
	ENDIF
C
C Set event flag numbers
	CALL RETURN_EFN(EF_POINT,EF_STREAM,EF_ERROR,EF_VDU,EF_LAST)
	GOTO 5
C
4	EF_VDU=4
C
C Set up text pointers for WAIT_INPUT
5	TXTPTR = 80
C
C------------------------------------------------------------------------
C Get next command from keyboard or table puck
C
10	CTRLC = .FALSE.			! clear any CTRL/C
C
C----------------------------------------------------------------------
C If an indirect command file is opened, read a command from
C the next line in the file
C
	IF(HAD_INDIRECT_FILE)THEN
	  RETVAL = FLRSEL(9)
	  RETVAL = FLRLIN()
	  IF(RETVAL.NE.LSL__NORMAL)THEN
	    IF(RETVAL.NE.LSL__EOF)THEN
	      CALL WRITEF('%S Reading from command file',ERROR_BELL)
              CALL WRITEF('Returning to terminal input')
	    ELSE
C	      CALL WRITEF('%S Reading from command file',ERROR_BELL)
	      CALL WRITEF('End of command file detected')
	    ENDIF
	    GOTO 4850		!to close the file 
	  ELSE
C
C Echo the command on the terminal
	    CALL BSLN
	    CALL EXPAND('DTIVIEW> ')
	    CALL APPEND(TXTDSC)
	    CALL TTWSTR
	  ENDIF
	  HAD_VDU=.TRUE.	!treat as though cmd read from terminal
	  GOTO 20
	ENDIF
C
C-----------------------------------------------------------------------
C
	IF (.NOT.WAIT_INPUT(PROMPT,.TRUE.,.TRUE.)) GOTO 9000
C
C-----------------------------------------------------------------------
C Keyboard input
C
20	CONTINUE
	IF (HAD_VDU) THEN
	  MOVE_SYMBOLS = .FALSE.
	  MCMD=.FALSE.
	  NOMESS=.FALSE.
	  IF (RDCHS(CH)) GOTO 10	! empty line
	  IF (CH.EQ.'!') GOTO 10	! comment!
	  IF (CH.EQ.'@') GOTO 8000	! open indirect command file
	  CALL BSLN
C
C Test against DTIVIEW primary command table
	  CMD = RDCOMM(DTIVIEW_CMD_TABLE)	! read keyboard command line
	  IF(CMD.LE.0)THEN
	    CALL WRITEF('%S Specifying DTIVIEW command',ERROR_BELL)
            GOTO 10		! unrecognised command
	  ENDIF
C
	  NOMESS=.TRUE.
C
C	FILEIN     WINDOW    SETUP     HELP
C	EXIT       SHOW      ENABLE    DISABLE
C	DIRECTION  HEIGHT    DISTANCE  PHI     
C	THETA      ZSCALE    PERSPECT  ISOMETRIC
C	PROFILE    ZINTERVAL ZLIMITS   TKSTYLE 
C	QUADRANT   CLEAR     COLOURS   
C	DRAW       LUT       LEGEND    LABEL
C	SET        IFF       IFFWINDOW OVERLAY
C	FRT        SRI       SELECT    DESELECT
C	UNITS      WAIT      SPAWN
C	DEBUG      PLANES    SAMPLE    PAUSE
C	SYMBOL     RETURN    FOG
C
	  GOTO (
     &	  100,       200,      300,      400,   
     &	  9000,      500,      600,      700,
     &	  800,       900,      1000,     1100,
     &    1200,      1300,     1400,     1500,
     &    1600,      1700,     1800,     
     &	  2100,      2200,     2300,
     &    2600,      2700,     2800,     2900,
     &    3000,      3100,     3200,     3300,
     &	  3400,      3500,     3600,     3700, 
     &    3900,      4000,     4100,
     &    4300,      4400,     4500,     4600,
     &	  4700,      4800,     4900), CMD
C
C-----------------------------------------------------------------------
C Get command via puck button
	ELSEIF (HAD_PUCK(IERR)) THEN
	  IF (READ_PUCK(BUTTON,X_TAB,Y_TAB,IERR)) THEN
	    CALL SHOW_ERROR(IERR)
	    GOTO 10
	  ENDIF
C
	  IF(IN_MENU(X_TAB,Y_TAB,CMD)) THEN	!from menu
	    MOVE_SYMBOLS = .FALSE.
	    MCMD=.TRUE. 
C
C Execute command from menu
C
C	ENABLE AUTO, ENABLE BATH, ENABLE DIVIDE, ENABLE FISH,
C	ENABLE OVER, ENABLE PIC 1, UNITS MAT, UNITS MET,
C	UNITS SEC, UNITS LATLONG, SETUP MAP, ENABLE GRAPHICS,
C	ENABLE PRIMARY, ENABLE SECONDARY, ENABLE IFF_OUTPUT, ENABLE PIC 2,
C	FILEIN, WINDOW, IFF, IFFWINDOW, FRT,
C	DIRECTION W, DIRECTION S, DIRECTION N, DIRECTION E,
C	PHI, THETA,
C	ISOMETRIC, PERSPECTIVE, PROFILE, OVERLAY, DRAW LABEL,
C	DRAW LEGEND, LUT, DISTANCE, HEIGHT, ZSCALE,
C	ZSTEP, ZLIMITS, DEFAULT VIEW, SHOW ANNOTATION, SHOW DEVICE,
C	SHOW ENABLE, SHOW IFF, SHOW FILEIN, SHOW SELECT, SHOW SETTINGS,
C	SHOW VIEW, QUAD 1, QUAD 2, QUAD 3, QUAD 4,
C	CLEAR, CLEAR 1, CLEAR 2, CLEAR 3, CLEAR 4,
C	PLANES 5, PLANES 6, PLANES 7, PLANES 8
C
	  GOTO (
     &   610,    620,    630,    695,   		!4
     &   670,    615,   3900,   3900,			!8
     &  3900,   3900,    350,    640,   		!12
     &   680,	 690,    645,    615,			!16
     &   100,    200,   3100,   3200,  3400,		!21
     &   800,    800,    800,    800,			!25
     &  1100,	1200,					!27
     &  1500,   1400,   1600,   3300,  2600,		!32
     &  2600,   2700,   1000,    900,  1300,		!37
     &  1700,   1800,   3030,    510,   570,		!42
     &   520,    530,    540,    550,   580,		!47
     &   560,    2100,   2100,  2100,   2100,   	!52
     &  2200,    2200,   2200,  2200,   2200,		!57
     &  4400,    4400,   4400,  4400) CMD		!61
C
	  ELSE
	     SYM_NUM = BUTTON
	     OK = PROCESS_SYMBOLS(SYM_NUM,X_TAB,Y_TAB,.TRUE.)  
	  ENDIF
	ENDIF
C
	GOTO 10
C
C-----------------------------------------------------------------------
C	FILEIN 
C
C Call Function OPEN_DTI_FILE to read DTI input filename,
C and map it into memory.
C
C Input DTI file is opened on 1
C
100	IF(MCMD)THEN
          CALL WRITEF('%S> FILEIN',PROMPT)
	  GOTO 102
	ENDIF
C	
	IF(RDCHS(CH))THEN
	  CALL WRITEF('%S Specifying command FILEIN',ERROR_BELL)
	  CALL WRITEF('Input DTI filename is missing')
	  GOTO 102
	ELSE
	  CALL BSCH
	ENDIF
C
101	IF(.NOT.OPEN_FILE(1))THEN
102	  CALL BSLN
	  IF(.NOT.WAIT_INPUT('Input DTI filename',.FALSE.,.TRUE.))
     &    GOTO 10
	  GOTO 101
	ENDIF
C
C Set up ZLIMITS and ZSTEP
	ZLOWER=MIN_WVALUE(1)
	ZUPPER=MAX_WVALUE(1)
	HADSTP=.FALSE.
	CALL SETCOL
C
C translate logical name which tells us if we've to set up a small 
C default window
	RETVAL = TRNALL('LSL$MATRIX_DEFAULT_WINDOW',TRANSLATION)
	IF(.NOT. RETVAL.OR.TRANSLATION.NE.'1')THEN
	   DEFAULT_WINDOW=.FALSE.
	ELSE
	   DEFAULT_WINDOW=.TRUE.
	ENDIF
C
C Set default area of interest in DTM
	DTI_WINDOW_SWX(1) = 1
	DTI_WINDOW_SWY(1) = 1
	IF(DEFAULT_WINDOW)THEN
	   DTI_WINDOW_NEX(1) = MIN(200,X_EXTENT(1))
	   DTI_WINDOW_NEY(1) = MIN(200,Y_EXTENT(1))
	ELSE
	   DTI_WINDOW_NEX(1) = X_EXTENT(1)
	   DTI_WINDOW_NEY(1) = Y_EXTENT(1)
	ENDIF	   
C
C Confirm successful opening of file, by
C writing out header details
	CALL WRITEF(' ')
	IERR=DTI_PRINT_HEADER(1,UNITS,HAD_ABSOLUTE)
	IF(.NOT.IERR)CALL LSL_PUTMSG(IERR)
C
	NLINES  = DTI_WINDOW_NEX(1)
	NPTS    = DTI_WINDOW_NEY(1)
C
	DTMOFX  = 0
	DTMOFY  = 0
C
C	Initialise window height values
	MODMIN  = 0
	MODMAX  = 0
C
C if symbols enabled then flag symbols as unused
C
	IF(SYMBOLS_DEFINED.GT.0) THEN
	   CALL WRITEF('%S symbols in current view will be '//
     &	   'flagged as unused',WARN_BELL)
	   CALL WRITEF('If you attempt to move symbol '//
     &	   'it will not be cleared prior to redrawing')
	   DO 110 I = 1,MAX_SYMBOLS
	      IF(SYMBOL_LDATA(6,I)) THEN
	         SYMBOL_LDATA(6,I) = .FALSE.
	         SYMBOLS_USED = SYMBOLS_USED - 1
	      ENDIF
110	   CONTINUE
	ENDIF
C
	IF (HADIFF .AND. (.NOT.HADWIN)) THEN
	   CALL SET_IFFWIN	! set up default IFF window
	ENDIF
	IF (HADIFF) CALL IFFTRN	! set up IFF/DTI transformation matrix
	GOTO 10
C
C-------------------------------------------------------------------------
C 	WINDOW - set DTM rectangular window (old DTO and MODELSIZE)
C
200	IF(MCMD)CALL WRITEF('%S> WINDOW',PROMPT)
C
	IF(.NOT.DTILUN_INUSE(1))THEN
	  CALL WRITEF('%S Specifying command WINDOW',ERROR_BELL)	  
	  CALL WRITEF('The input DTM must be specified before WINDOW')
	  GOTO 10
	ENDIF
C
C store the old DTI window coords
	OLD_DTI(1,1) = DTI_WINDOW_SWX(1)
	OLD_DTI(2,1) = DTI_WINDOW_NEX(1)
	OLD_DTI(1,2) = DTI_WINDOW_SWY(1)
	OLD_DTI(2,2) = DTI_WINDOW_NEY(1)
C
	IF(.NOT.GET_WINDOW_POINTS(MCMD))GOTO 10
C
	NEW_DTI(1,1) = DTI_WINDOW_SWX(1)
	NEW_DTI(2,1) = DTI_WINDOW_NEX(1)
	NEW_DTI(1,2) = DTI_WINDOW_SWY(1)
	NEW_DTI(2,2) = DTI_WINDOW_NEY(1)
C
        NLINES = (DTI_WINDOW_NEX(1)-DTI_WINDOW_SWX(1))+1
	NPTS   = (DTI_WINDOW_NEY(1)-DTI_WINDOW_SWY(1))+1
	DTMOFX = DTI_WINDOW_SWX(1)-1
	DTMOFY = DTI_WINDOW_SWY(1)-1
C
	MODMIN = 0		! new window, so window
	MODMAX = 0		! height limits not yet known
C
	IF(HADIFF)THEN 
	   CALL RESET_IFFWIN(OLD_DTI,NEW_DTI,WIND,WIND)	
	   CALL IFFTRN	! set up IFF/DTI transformation matrix
	ENDIF
	GOTO 10
C
C-------------------------------------------------------------------------
C	SETUP  - position map or menu on digitising table
C
C Setup command is only valid if the table monitor system has
C been successfully initialised
C
300	IF(.NOT.TABLE)THEN
	  CALL WRITEF('%S Specifying command SETUP',ERROR_BELL)
	  CALL WRITEF
     &	  ('Command is invalid if the table has not been initialised')
	  GOTO 10
	ENDIF
C
C Check the qualifier.
	CMD = RDCOMM(SETUP_CMD_TABLE)	
	IF (CMD.LE.0) THEN	! qualifier unrecognised
	  CALL WRITEF('%S Specifying command SETUP',ERROR_BELL)
	  CALL WRITEF('Command qualifiers are MAP or MENU')
	  GOTO 10 
	ENDIF
C
	IF(CMD.EQ.1)THEN		!map
350	  IF(MCMD)CALL WRITEF('%S> SETUP MAP',PROMPT)
	  IF(.NOT.DTILUN_INUSE(1))THEN
	    CALL WRITEF('%S Specifying command SETUP MAP',ERROR_BELL)
	    CALL WRITEF
     &      ('The input DTM must be specified before SETUP MAP')
	    GOTO 10
	  ENDIF
C
	  CALL SET_MAP
	  GOTO 10
	ENDIF
C
	IF(CMD.EQ.2)THEN		!menu
	  CALL SET_MENU
	  GOTO 10
	ENDIF
C
C-------------------------------------------------------------------------
C 	HELP				! use system on-line help
C
400	CALL HELP
	GOTO 10
C
C-------------------------------------------------------------------------
C 	SHOW - provide information on current settings of
C
C various parameters
C check the SHOW qualifier
C
500	CMD = RDCOMM(SHOW_CMD_TABLE)	
C
	IF (CMD.LE.0) THEN	! qualifier unrecognised
	  CALL WRITEF('%S Specifying command SHOW',ERROR_BELL)
	  CALL WRITEF('SHOW options are
     & ANNOTATION, DEVICE, ENABLE, IFF, FILEIN')
	  CALL WRITEF('                 SELECTIONS, SETTINGS, '//
     &    'SYMBOLS or VIEW')
	  GOTO 10 
	ENDIF
C
	GOTO (510,520,530,540,550,560,570,580,590)CMD	
C
C-------------------------------------------------------------------------
C 	SHOW ANNOTATION label and legend parameters
C
510	IF(MCMD)CALL WRITEF('%S> SHOW ANNOTATION',PROMPT)
C
	CALL WRITEF
	CALL WRITEF('Label Position  : %F5.3 %F5.3',LABX,LABY)
	CALL WRITEF('Label Size      : %N',LABSIZ)
	CALL WRITEF('Label Colour    : %N',LABCOL)
	CALL WRITEF
	CALL WRITEF('Legend Position : %F5.3 %F5.3',LEGX,LEGY)
	CALL WRITEF('Legend Size     : %F3.2',LEGSIZ)
	CALL WRITEF
	GOTO 10
C
C------------------------------------------------------------------------
C	SHOW ENABLE
C
520	IF(MCMD)CALL WRITEF('%S> SHOW ENABLE',PROMPT)
C
	CALL WRITEF
	CALL WRITEF('Current status:')
	CALL WRITEF(' ')
	CALL EXPAND('ABSOLUTE       ')
	IF(HAD_ABSOLUTE)THEN
	  CALL APPEND('   On       ')
	ELSE
	  CALL APPEND('  Off       ')
	ENDIF
	CALL APPEND('AUTOSCALE      ')
	IF(AUTO)THEN
	  CALL APPEND('   On       ')
	ELSE
	  CALL APPEND('  Off       ')
	ENDIF
	CALL APPEND('BATHYMETRY     ')
	IF(BATH)THEN
	  CALL APPEND('   On       ')
	ELSE
	  CALL APPEND('  Off       ')
	ENDIF
	CALL TTWLIN
C
	CALL EXPAND ('COLOUR_IFF     ')
	IF(COLOUR_IFF)THEN
	  CALL APPEND('   On       ')
	ELSE
	  CALL APPEND('  Off       ')
	ENDIF
	CALL APPEND('DIVIDE         ')
	IF(SPLIT)THEN
	  CALL APPEND('   On       ')
	ELSE
	  CALL APPEND('  Off       ')
	ENDIF
	CALL APPEND('FISHNET        ')
	IF(FISHNET)THEN
	  CALL APPEND('   On       ')
	ELSE
	  CALL APPEND('  Off       ')
	ENDIF
	CALL TTWLIN
C
	CALL EXPAND('FOG            ')
	IF(HAD_FOG)THEN
	  CALL APPEND('   On       ')
	ELSE
	  CALL APPEND('  Off       ')
	ENDIF
	CALL APPEND('GRAPHICS       ')
	IF(PRIMARY.OR.SECONDARY)THEN
	  CALL APPEND('   On       ')
	ELSE
	  CALL APPEND('  Off       ')
	ENDIF
	CALL APPEND('IFF_OUTPUT     ')
	IF(PLOT_IFF)THEN
	  CALL APPEND('   On       ')
	ELSE
	  CALL APPEND('  Off       ')
	ENDIF
	CALL TTWLIN
C
	CALL EXPAND('OVERLAY        ')
	IF(OVERLAY)THEN
	  CALL APPEND('   On       ')
	ELSE
	  CALL APPEND('  Off       ')
	ENDIF
	CALL APPEND('PICTURE 1      ')
	IF(PICTURE(1))THEN
	  CALL APPEND('   On       ')
	ELSE
	  CALL APPEND('  Off       ')
	ENDIF
	CALL APPEND('PICTURE 2      ')
	IF(PICTURE(2))THEN
	  CALL APPEND('   On       ')
	ELSE
	  CALL APPEND('  Off       ')
	ENDIF
	CALL TTWLIN
	CALL EXPAND('PRIMARY        ')
	IF(PRIMARY)THEN
	  CALL APPEND('   On       ')
	ELSE
	  CALL APPEND('  Off       ')
	ENDIF
	CALL APPEND('SECONDARY      ')
	IF(SECONDARY)THEN
	  CALL APPEND('   On       ')
	ELSE
	  CALL APPEND('  Off       ')
	ENDIF
	CALL APPEND('SYMBOLS        ')
	IF(SYMBOLS)THEN
	  CALL APPEND('   On       ')
	ELSE
	  CALL APPEND('  Off       ')
	ENDIF
	CALL TTWLIN
	CALL EXPAND('TABLE          ')
	IF(TABLE)THEN
	  CALL APPEND('   On       ')
	ELSE
	  CALL APPEND('  Off       ')
	ENDIF
	CALL TTWLIN
	CALL WRITEF(' ')
	GOTO 10
C
C------------------------------------------------------------------------
C 	SHOW IFF - display information about selected IFF overlay file 
C
530	IF(MCMD)CALL WRITEF('%S> SHOW IFF',PROMPT)
C
	IF(.NOT.OVERLAY)THEN
	  CALL WRITEF('%S Specifying command SHOW IFF',ERROR_BELL)
	  CALL WRITEF('Overlay options are not enabled')
	  GOTO 10
	ENDIF
C
	CALL WRITEF
C
	IF(.NOT.HADIFF)THEN
	  CALL WRITEF
	  CALL WRITEF
     &    ('%S The input IFF file is undefined',WARN_BELL)
	  CALL WRITEF
	  GOTO 10
	ENDIF
C
	CALL WRITEF
	CALL WRITEF('%S',INPUT_IFF_NAME(1:INPUT_IFF_LENGTH))
	CALL WRITEF
	CALL WRITEF('IFF file range:')
	IF (HAD_ABSOLUTE)THEN
	   CALL WRITEF
     &          ('SW: %F9.1 %F9.1  NE: %F9.1 %F9.1',
     &          RANGE_VALUES(1)+ORIGIN_OFFSET(1),
     &          RANGE_VALUES(3)+ORIGIN_OFFSET(2),
     &	        RANGE_VALUES(2)+ORIGIN_OFFSET(1),
     &          RANGE_VALUES(4)+ORIGIN_OFFSET(2))
	ELSE
	   CALL WRITEF
     &          ('SW: %F9.1 %F9.1  NE: %F9.1 %F9.1',
     &          RANGE_VALUES(1),
     &          RANGE_VALUES(3),
     &	        RANGE_VALUES(2),
     &          RANGE_VALUES(4))
	ENDIF
	CALL WRITEF('IFF file window :')
	IF (HAD_ABSOLUTE) THEN
	   CALL WRITEF
     &          ('SW: %F9.1 %F9.1  NE: %F9.1 %F9.1',
     &          WIND(1,1)+ORIGIN_OFFSET(1),
     &          WIND(1,2)+ORIGIN_OFFSET(2),
     &	        WIND(2,1)+ORIGIN_OFFSET(1),
     &          WIND(2,2)+ORIGIN_OFFSET(2))
	ELSE
	   CALL WRITEF
     &          ('SW: %F9.1 %F9.1  NE: %F9.1 %F9.1',
     &          WIND(1,1),
     &          WIND(1,2),
     &	        WIND(2,1),
     &          WIND(2,2))
	ENDIF
	CALL WRITEF
	GOTO 10
C
C------------------------------------------------------------------------
C       SHOW FILEIN
C
C Is a DTI file opened on the LUN?
C
540	IF(MCMD)CALL WRITEF('%S> SHOW FILEIN',PROMPT)
C
	IF(.NOT.DTILUN_INUSE(1))THEN
	  CALL WRITEF
	  CALL WRITEF
     &    ('%S The input DTI file is undefined',WARN_BELL)
	  CALL WRITEF
	  GOTO 10
	ENDIF
C
C Print out what we know about the file
	CALL WRITEF
	RETVAL=DTI_PRINT_HEADER(1,UNITS,HAD_ABSOLUTE)
	IF(.NOT.RETVAL)CALL LSL_PUTMSG(RETVAL)
	GOTO 10
C
C------------------------------------------------------------------------
C	SELECTIONS
C
550	IF(MCMD)CALL WRITEF('%S> SHOW SELECTIONS',PROMPT)
C
	IF(.NOT.OVERLAY)THEN
	  CALL WRITEF('%S Specifying command SHOW SELECTIONS',ERROR_BELL)
	  CALL WRITEF('Overlay options are not enabled')
	  GOTO 10
	ENDIF
C
	CALL SHSELE			! to show selections
	GOTO 10
C
C------------------------------------------------------------------------
C 	SHOW VIEW - display current viewing parameters
C
560	IF(MCMD)CALL WRITEF('%S> SHOW VIEW',PROMPT)
C
	CALL WRITEF
	CALL WRITEF('Theta                : %F0.2', DEFTHT)
	CALL WRITEF('Phi                  : %F0.2', DEFPHI)
	CALL WRITEF('Viewing direction    : From the %S',COMPASS(DIRECT))
	CALL WRITEF('Vertical exaggeration: %F0.2', DEFZSC)
	CALL WRITEF('Viewing distance     : %F0.2', DOV)    
	CALL WRITEF('Height of view       : %F0.2', DEFHOV)
	IF(HAD_FOG) THEN
	   CALL WRITEF
	   CALL WRITEF('Fog colour index     : %I0',FOG_COLOUR)
	   CALL WRITEF('Visibility distance  : %F0.2',FOG_VISIBILITY)
	ENDIF
	CALL WRITEF
	CALL WRITEF('Z Limits             : %N to %N',ZLOWER,ZUPPER)
	CALL WRITEF('Z Step               : %N',STPINT)
	CALL WRITEF
	CALL WRITEF('Sampling interval along columns : %N',X_SAMPLE)
	CALL WRITEF('Sampling interval along rows    : %N',Y_SAMPLE)
	CALL WRITEF
	GOTO 10
C
C-------------------------------------------------------------------------
C	SHOW DEVICE
C
570	IF(MCMD)CALL WRITEF('%S> SHOW DEVICE',PROMPT)
C
	CALL WRITEF(' ')
C
	CALL EXPAND('PRIMARY        ')
	IF(PRIMARY)THEN
	  CALL APPEND('   On       ')
	ELSE
	  CALL APPEND('  Off       ')
	ENDIF
	CALL APPEND('SECONDARY      ')
	IF(SECONDARY)THEN
	  CALL APPEND('   On       ')
	ELSE
	  CALL APPEND('  Off       ')
	ENDIF
	CALL TTWLIN
	CALL WRITEF
	CALL WRITEF('%N Planes allocated to PICTURE 1',NOPLNS)
C
	IF(NOPLNS.NE.4)
     &  CALL WRITEF('%N Planes allocated to PICTURE 2',8-NOPLNS)
	CALL WRITEF
	CALL WRITEF('Maximum number of colours  for terrain view : %N',
     &  MAXCOL)
	CALL WRITEF('Number of colours selected for terrain view : %N',
     &	STEPS)
	CALL WRITEF('Maximum number of overlay colours           : %N',
     &  OVERLAY_COLOURS)        
	CALL WRITEF
	IF(SPLIT)THEN
	  CALL WRITEF('Divided screen is enabled')
	  CALL WRITEF('Current quadrant number : %N',QUAD)
	ELSE
	  CALL WRITEF('Full screen is enabled')
	ENDIF
	CALL WRITEF
	IF(AUTO)THEN
	  CALL WRITEF('AUTOSCALE is enabled')
	ELSE
	  CALL WRITEF('AUTOSCALE is disabled')
          CALL WRITEF
     &    ('Origin (NDC)    : %F0.2 %F0.2', MAT(5),MAT(6))
	  CALL WRITEF
     &    ('Scale factor    : %F0.2',MAT(1))
	ENDIF
	CALL WRITEF
	GOTO 10
C
C-------------------------------------------------------------------------
C	SHOW SETTINGS
C
580	IF(MCMD)CALL WRITEF('%S> SHOW SETTINGS',PROMPT)
C
	CALL WRITEF(' ')
	CALL WRITEF('Current Settings:')
	CALL WRITEF
	CALL EXPAND('LAND_FC      ')
	CALL APPEND('%^W%I5       ',LAND_FC)
	CALL APPEND('LAYER        ')
	CALL APPEND('%^W%I5       ',LAYER)
	CALL APPEND('LINE_STYLE   ')
	CALL APPEND('%I5',TK_LINESTYLE)
	CALL TTWLIN
	CALL WRITEF
C
	CALL EXPAND('ORIGIN     ')
	CALL APPEND('%F5.2 %F5.2   ',MAT(5),MAT(6))
	CALL APPEND('NULL_FC      ')
	CALL APPEND('%^W%I5       ',NULL_FC)
	CALL APPEND('SCALE        ')
	CALL APPEND('%F5.2',MAT(1))
	CALL TTWLIN
	CALL WRITEF
C
	CALL EXPAND('SEA_FC       ')
	CALL APPEND('%^W%I5       ',SEA_FC)
	CALL APPEND('SYMBOL_SCALE ')
	CALL APPEND('%F5.2       ',SYMSF)
	CALL APPEND('TEXT_FC      ')
	CALL APPEND('%^W%I5',TEXT_FC)
	CALL TTWLIN
	CALL WRITEF
	GOTO 10
C
C------------------------------------------------------------------------
C 	SHOW SYMBOLS - display current defined symbols
C
590	CONTINUE
C
	CALL SHOW_SYMBOLS
	GOTO 10
C
C-------------------------------------------------------------------------
C	ENABLE
C
C Get the appropriate qualifier
C
600	CMD = RDCOMM(ENABLE_CMD_TABLE)
C
	GOTO
     &  (610,620,630,640,650,670,680,690,695,615,625,635,665,685,675)
     &  CMD	
C
	CALL WRITEF('%S Specifying command ENABLE',ERROR_BELL)
	CALL WRITEF
     &  ('Command qualifiers are '// 
     &  'ABSOLUTE, AUTOSCALE, BATHYMETRY, COLOUR_IFF, DIVIDE ')
	CALL WRITEF
     &  ('                       '//
     &  'FISHNET, FOG, GRAPHICS, IFF_OUTPUT, OVERLAY')
	CALL WRITEF
     &  ('                       '//
     &  'PICTURE, PRIMARY, SECONDARY, SYMBOLS or TABLE')
	GOTO 10
C
C-----------------------------------------------------------------------
C	ENABLE AUTOSCALE
C
C If the command has been issued from the menu, then it acts as
C a flip flop, and we should turn the option off if already selected
C
610	IF(MCMD.AND.AUTO)GOTO 710
	AUTO=.TRUE.
	IF(MCMD)CALL WRITEF('%S> ENABLE AUTOSCALE',PROMPT)
	GOTO 10
C
C---------------------------------------------------------------------
C	ENABLE PICTURE
C
C Check for a picture number
C
615	IF(MCMD)THEN
	  IF(CMD.EQ.6)THEN
	    INTARG(1)=1
C if picture 1 is already enabled, then translate command into
C	DISABLE PICTURE 1
	    IF(PICTURE(1))GOTO 715
	    CALL WRITEF('%S> ENABLE PICTURE 1',PROMPT)
	  ELSE
	    INTARG(1)=2
C	IF picture 2 is already enabled, then translate command into
C	DISABLE PICTURE 2
	    IF(PICTURE(2))GOTO 715
	    CALL WRITEF('%S> ENABLE PICTURE 2',PROMPT)
	  ENDIF
	ENDIF
C
	IF(.NOT.(PRIMARY.OR.SECONDARY))THEN
	  CALL WRITEF('%S Specifying command ENABLE PICTURE',ERROR_BELL)
	  CALL WRITEF('No graphics device is currently enabled')
	  GOTO 10
	ENDIF
C
	IF(NOPLNS.EQ.4)THEN
	  CALL WRITEF('%S Specifying command ENABLE PICTURE',ERROR_BELL)
	  CALL WRITEF
     &    ('Command is not valid for a 4 planes graphics device')
	  GOTO 10
	ENDIF
C
	IF(MCMD)GOTO 617
C
	IF(CMDICT.NE.1)THEN
	  CALL WRITEF('%S Specifying command ENABLE PICTURE',ERROR_BELL)
	  CALL WRITEF('Command requires an integer argument')
	  GOTO 10
	ENDIF
C
	IF(INTARG(1).LT.1.OR.INTARG(1).GT.2)THEN
	  CALL WRITEF('%S Specifying command ENABLE PICTURE',ERROR_BELL)
	  CALL WRITEF('Command requires a picture number of 1 or 2')
	  GOTO 10
	ENDIF
C
617	IF(INTARG(1).EQ.1)THEN
	  IF(PICTURE(2))THEN
	    IF(PRIMARY.AND.(WTYPE(1).NE.9900))CALL LSG_PLANE_VISIBLE(1,-1)
	    IF(SECONDARY)CALL LSG_PLANE_VISIBLE(2,-1)
	    PICTURE(1)=.TRUE.
	    PICTURE(2)=.TRUE.
	  ELSE
	    IF(PRIMARY.AND.(WTYPE(1).NE.9900))
     &         CALL LSG_PLANE_VISIBLE(1,PLANE_MASK)
	    IF(SECONDARY)CALL LSG_PLANE_VISIBLE(2,PLANE_MASK)
	    PICTURE(1)=.TRUE.
	    PICTURE(2)=.FALSE.
	  ENDIF
	ENDIF
C
	IF(INTARG(1).EQ.2)THEN
	  IF(NOPLNS.EQ.4)GOTO 10
	  IF(PICTURE(1))THEN
	    IF(PRIMARY.AND.(WTYPE(1).NE.9900))CALL LSG_PLANE_VISIBLE(1,-1)
	    IF(SECONDARY)CALL LSG_PLANE_VISIBLE(2,-1)
	    PICTURE(1)=.TRUE.
	    PICTURE(2)=.TRUE.
	  ELSE
	    IF(PRIMARY.AND.(WTYPE(1).NE.9900))
     &         CALL LSG_PLANE_VISIBLE(1,.NOT.PLANE_MASK)
	    IF(SECONDARY)CALL LSG_PLANE_VISIBLE(2,.NOT.PLANE_MASK)
	    PICTURE(2)=.TRUE.
	    PICTURE(1)=.FALSE.
	  ENDIF
	ENDIF
C
	GOTO 10
C
C---------------------------------------------------------------------
C	ENABLE BATHYMETRY
C
C	If the command has been issued from the menu, then it acts as
C	a flip flop, and we should turn the option off if already selected
C
620     IF(MCMD.AND.BATH)GOTO 720
C
	BATH=.TRUE.
	IF(MCMD)CALL WRITEF('%S> ENABLE BATHYMETRY',PROMPT)
C
	IF(MIN_WVALUE(1).GE.0)CALL WRITEF
     &	  ('%S Current DTM does not contain any negative heights',
     &    WARN_BELL)
C
	IF(INIT_PRIMARY)
     &     CALL LSG_SET_LUT(1,'LSL$LOOKUP:UNDERSEA.DAT')
	IF(INIT_SECONDARY)
     &     CALL LSG_SET_LUT(2,'LSL$LOOKUP:UNDERSEA.DAT')
C
	MAXCOL = SEACOL
	STEPS = SEACOL
C
	HADSTP = .FALSE.		! cancel any STEP command
	CALL SETCOL			! and reset colours
C
	GOTO 10
C
C----------------------------------------------------------------------
C	ENABLE COLOUR_IFF
C
625	COLOUR_IFF=.TRUE.
	GOTO 10
C
C----------------------------------------------------------------------
C	ENABLE DIVIDE
C
C	If the command has been issued from the menu, then it acts as
C	a flip flop, and we should turn the option off if already selected
C
630     IF(MCMD.AND.SPLIT)GOTO 730
	SPLIT = .TRUE.
        QUAD = 1			! default quadrant
	IF(MCMD)CALL WRITEF('%S> ENABLE DIVIDE',PROMPT)
C
        IF(PRIMARY)VIEW_SHOWN(1,QUAD) = .FALSE.
	IF(SECONDARY)VIEW_SHOWN(2,QUAD)=.FALSE.
	GOTO 10
C
C----------------------------------------------------------------------
C 	ENABLE SYMBOLS
C
635	IF(.NOT.EXTRA_OK)THEN
	  IERR=0
	  RETVAL = LIB$FIND_FILE('LSL$EXE:DTIVIEWEXTRA.EXE'
     &                           ,LINE,IERR,,,,0)
	  IF(RETVAL)EXTRA_OK=.TRUE.
	ENDIF
C	  
	IF(.NOT.EXTRA_OK)THEN
	  CALL WRITEF('%S Specifying command ENABLE SYMBOLS',ERROR_BELL)
	  CALL WRITEF('Symbols option cannot be activated')
	  GOTO 10
	ENDIF
C
	SYMBOLS=.TRUE.
	GOTO 10
C
C----------------------------------------------------------------------
C	ENABLE GRAPHICS
C
C	If the command has been issued from the menu, then it acts as
C	a flip flop, and we should turn the option off if already selected
C
640 	IF(MCMD.AND.(PRIMARY.OR.SECONDARY))GOTO 740
C
C	Determine if a primary graphics device is available
C	and get workstation type identifier
	PRIMARY_DEVICE = TSTWK(1,WTYPE(1))
	IF(.NOT.PRIMARY_DEVICE)THEN
	  PRIMARY=.FALSE.
	ELSE
	  PRIMARY=.TRUE.
C	Initialise the primary device if not done already
	  IF(.NOT.INIT_PRIMARY)CALL INIT_DEVICE(1)
C	Activate the primary device
	  CALL GACWK(1)
	ENDIF
C
C	Now determine if a secondary graphics device is also
C	available in this version, and get workstation type identifier
	SECONDARY_DEVICE = TSTWK(2,WTYPE(2))
	IF(.NOT.SECONDARY_DEVICE)THEN
	  SECONDARY=.FALSE.
	ELSE
	  SECONDARY=.TRUE.
C	Initialise the secondary device if not done already
	  IF(.NOT.INIT_SECONDARY)CALL INIT_DEVICE(2)
C	Activate the secondary device
	  CALL GACWK(2)
	ENDIF
C
	IF(MCMD)CALL WRITEF('%S> ENABLE GRAPHICS',PROMPT)
	GOTO 10
C
C----------------------------------------------------------------------
C	ENABLE IFF_OUTPUT
C
645	IF(MCMD)THEN
          CALL WRITEF('%S> ENABLE IFF_OUTPUT',PROMPT)
	  GOTO 660
	ENDIF
C
	IF(RDCHS(CH))THEN
	  CALL WRITEF('%S Specifying command IFF_OUTPUT',ERROR_BELL)
	  CALL WRITEF('Output IFF filename is missing')
	  GOTO 660
	ELSE
	  CALL BSCH
	ENDIF
C
650	IF(.NOT.CREATE_IFF_FILE())THEN
660	  CALL BSLN
	  IF(.NOT.WAIT_INPUT('Output IFF filename',.FALSE.,.TRUE.))GOTO 10
	  GOTO 650
	ENDIF
C
	PLOT_IFF=.TRUE.
	ACTIVE_IFF=.TRUE.
	GOTO 10
C
C----------------------------------------------------------------------
C 	ENABLE FOG
C
665	HAD_FOG=.TRUE.
	GOTO 10
C
C----------------------------------------------------------------------
C	ENABLE OVERLAY
C
C	If the command has been issued from the menu, then it acts as
C	a flip flop, and we should turn the option off if already selected
C
670	IF(MCMD.AND.OVERLAY)GOTO 770
C
	IF(MCMD)CALL WRITEF('%S> ENABLE OVERLAY',PROMPT)
C
C	Test for presence of DTIVIEWEXTRA on LSL$EXE
	IF(.NOT.EXTRA_OK)THEN
	  IERR=0
	  RETVAL = LIB$FIND_FILE('LSL$EXE:DTIVIEWEXTRA.EXE'
     &                           ,LINE,IERR,,,,0)
	  IF(RETVAL)EXTRA_OK=.TRUE.
	ENDIF
C	  
	IF(.NOT.EXTRA_OK)THEN
	  CALL WRITEF('%S Specifying command ENABLE OVERLAY',ERROR_BELL)
	  CALL WRITEF('Vector overlay option cannot be activated')
	  GOTO 10
	ENDIF
C
	IF (X_SAMPLE.NE.1 .OR. Y_SAMPLE.NE.1)THEN
	  CALL WRITEF('%S Specifying command ENABLE OVERLAY',ERROR_BELL)
	  CALL WRITEF('Overlay options are currently only available')
	  CALL WRITEF('with a column and row sampling interval of 1')
	  CALL WRITEF('Overlay options are not enabled')
	  GOTO 10
	ENDIF
C
        OVERLAY=.TRUE.
	GOTO 10
C
C----------------------------------------------------------------------
C	ENABLE TABLE
C
675	IF (.NOT.TABLE) THEN
	   IF (INIT_TAB(,IERR)) THEN
	      CALL WRITEF
     &	      ('%S Error initialising table monitor',WARN_BELL)
	       CALL WRITEF
     &        ('DTIVIEW will assume no table is available')
	      TABLE=.FALSE.
	      GOTO 10
	   ENDIF
	   TABLE = .TRUE.
C
C 	Set event flag numbers
	   CALL RETURN_EFN(EF_POINT,EF_STREAM,EF_ERROR,EF_VDU,EF_LAST)
	ENDIF
	GOTO 10
C
C----------------------------------------------------------------------
C	ENABLE PRIMARY
C
C	If the command has been issued from the menu, then it acts as
C	a flip flop, and we should turn the option off if already selected
C
680	IF(MCMD.AND.PRIMARY)GOTO 780
C
	IF(MCMD)CALL WRITEF('%S> ENABLE PRIMARY',PROMPT)
C
	PRIMARY_DEVICE = TSTWK(1,WTYPE(1))
	IF(.NOT.PRIMARY_DEVICE)THEN
	  PRIMARY=.FALSE.
	  CALL WRITEF('%S Specifying command ENABLE PRIMARY',ERROR_BELL)
	  CALL WRITEF('A PRIMARY graphics device is not supported')
	  GOTO 10
	ENDIF
C
	PRIMARY=.TRUE.
	IF(.NOT.INIT_PRIMARY)CALL INIT_DEVICE(1)
C	Activate the primary device
	CALL GACWK(1)
	GOTO 10
C
C----------------------------------------------------------------------
C	ENABLE ABSOLUTE
C
685	HAD_ABSOLUTE = .TRUE.
	GOTO 10
C
C----------------------------------------------------------------------
C	ENABLE SECONDARY
C
C	If the command has been issued from the menu, then it acts as
C	a flip flop, and we should turn the option off if already selected
C
690	IF(MCMD.AND.SECONDARY)GOTO 790
C
	IF(MCMD)CALL WRITEF('%S> ENABLE SECONDARY',PROMPT)
C
	SECONDARY_DEVICE = TSTWK(2,WTYPE(2))
	IF(.NOT.SECONDARY_DEVICE)THEN
	  SECONDARY=.FALSE.
	  CALL WRITEF('%S Specifying command ENABLE SECONDARY',ERROR_BELL)
	  CALL WRITEF('A SECONDARY graphics device is not supported')
	  GOTO 10
	ENDIF
C
	SECONDARY=.TRUE.
	IF(.NOT.INIT_SECONDARY)CALL INIT_DEVICE(2)
C	Activate the primary device
	CALL GACWK(2)
	GOTO 10
C
C----------------------------------------------------------------------
C	ENABLE FISHNET
C	If the command has been issued from the menu, then it acts as
C	a flip flop, and we should turn the option off if already selected
C
695	IF(MCMD.AND.FISHNET)GOTO 795
C
	IF (X_SAMPLE.NE.Y_SAMPLE) THEN
	  CALL WRITEF('%S Specifying command ENABLE FISHNET',ERROR_BELL)
	  CALL WRITEF
     & ('Fishnet representation is currently only available with')
	  CALL WRITEF
     & ('an equal sampling interval along the columns and rows')
	  CALL WRITEF('Fishnet option is not enabled')
	  FISHNET = .FALSE.
C
	  GOTO 10
	ENDIF
C
	FISHNET = .TRUE.
	IF (MCMD) CALL WRITEF('%S> ENABLE FISHNET',PROMPT)
	GOTO 10
C
C----------------------------------------------------------------------
C	DISABLE
C
C	Get the appropriate qualifier
C
700	CMD = RDCOMM(ENABLE_CMD_TABLE)
C
	GOTO
     &  (710,720,730,740,750,770,780,790,795,715,725,735,765,785,775)
     &  CMD	
C
	CALL WRITEF('%S Specifying command DISABLE',ERROR_BELL)
	CALL WRITEF
     &  ('Command qualifiers are '// 
     &  'ABSOLUTE, AUTOSCALE, BATHYMETRY, COLOUR_IFF, DIVIDE ')
	CALL WRITEF
     &  ('                       '//
     &  'FISHNET, FOG, GRAPHICS, IFF_OUTPUT, OVERLAY')
	CALL WRITEF
     &  ('                       '//
     &  'PICTURE, PRIMARY, SECONDARY, SYMBOLS or TABLE')
	GOTO 10
C
C-----------------------------------------------------------------------
C	DISABLE AUTOSCALE
C
710	AUTO=.FALSE.
C
	IF(MCMD)CALL WRITEF('%S> DISABLE AUTOSCALE',PROMPT)
	GOTO 10
C
C-----------------------------------------------------------------------
C	DISABLE PICTURE
C
715	IF(MCMD)CALL WRITEF('%S> DISABLE PICTURE %N',PROMPT,INTARG(1))
C
	IF(.NOT.(PRIMARY.OR.SECONDARY))THEN
	  CALL WRITEF('%S Specifying command DISABLE PICTURE',ERROR_BELL)
	  CALL WRITEF('No graphics device is currently enabled')
	  GOTO 10
	ENDIF
C
	IF(NOPLNS.EQ.4)THEN
	  CALL WRITEF('%S Specifying command DISABLE PICTURE',ERROR_BELL)
	  CALL WRITEF
     &    ('Command is not valid for a 4 planes graphics device')
	  GOTO 10
	ENDIF
C
	IF(MCMD)GOTO 717
C
	IF(CMDICT.NE.1)THEN
	  CALL WRITEF('%S Specifying command DISABLE PICTURE',ERROR_BELL)
	  CALL WRITEF('Command requires an integer argument')
	  GOTO 10
	ENDIF
C
	IF(INTARG(1).LT.1.OR.INTARG(1).GT.2)THEN
	  CALL WRITEF('%S Specifying command DISABLE PICTURE',ERROR_BELL)
	  CALL WRITEF('Command requires a picture number of 1 or 2')
	  GOTO 10
	ENDIF
C
717	IF(INTARG(1).EQ.1)THEN
	  IF(PRIMARY.AND.(WTYPE(1).NE.9900))
     &    CALL LSG_PLANE_VISIBLE(1,.NOT.PLANE_MASK)
	  IF(SECONDARY)CALL LSG_PLANE_VISIBLE(2,.NOT.PLANE_MASK)
	  PICTURE(1)=.FALSE.
	  PICTURE(2)=.TRUE.
	ENDIF
C
	IF(INTARG(1).EQ.2)THEN
	  IF(NOPLNS.EQ.4)GOTO 10
	  IF(PRIMARY.AND.(WTYPE(1).NE.9900))
     &    CALL LSG_PLANE_VISIBLE(1,PLANE_MASK)
	  IF(SECONDARY)CALL LSG_PLANE_VISIBLE(2,PLANE_MASK)
	  PICTURE(2)=.FALSE.
	  PICTURE(1)=.TRUE.
	ENDIF
C
	GOTO 10
C
C---------------------------------------------------------------------
C	DISABLE BATHYMETRY
C
720     BATH=.FALSE.
C
	IF(MCMD)CALL WRITEF('%S> DISABLE BATHYMETRY',PROMPT)
C
	IF(INIT_PRIMARY)
     &     CALL LSG_SET_LUT(1,'LSL$LOOKUP:DTIVIEW5.DAT')
	IF(INIT_SECONDARY)
     &     CALL LSG_SET_LUT(2,'LSL$LOOKUP:DTIVIEW5.DAT')
C
	MAXCOL = LNDCOL
	STEPS = LNDCOL
	HADSTP = .FALSE.		! cancel any STEP command
	CALL SETCOL			! and reset colours
	GOTO 10
C
C---------------------------------------------------------------------
C	DISABLE COLOUR_IFF
C
725	COLOUR_IFF = .FALSE.
	GOTO 10
C
C----------------------------------------------------------------------
C	DISABLE DIVIDE
C
730     SPLIT = .FALSE.
        QUAD = 0
	IF(MCMD)CALL WRITEF('%S> DISABLE DIVIDE',PROMPT)
C
        IF(PRIMARY)VIEW_SHOWN(1,QUAD) = .FALSE.
	IF(SECONDARY)VIEW_SHOWN(2,QUAD)=.FALSE.
C
	GOTO 10
C
C----------------------------------------------------------------------
C 	DISABLE SYMBOLS
C
735	SYMBOLS=.FALSE.
	GOTO 10
C
C----------------------------------------------------------------------
C	DISABLE GRAPHICS
C
C	Disable all graphics devices
C
740	IF(MCMD)CALL WRITEF('%S> DISABLE GRAPHICS',PROMPT)
C
C	Deactivate the primary device
	PRIMARY=.FALSE.
	CALL GDAWK(1)
C
C	Dectivate the secondary device
	SECONDARY=.FALSE.
	CALL GDAWK(2)
C
	GOTO 10
C
C----------------------------------------------------------------------
C	DISABLE IFF_OUTPUT
C
750	IF(MCMD)CALL WRITEF('%S> DISABLE IFF_OUTPUT',PROMPT)
C
	IF(PLOT_IFF)THEN
          CALL ENDIFF
	  ACTIVE_IFF=.FALSE.
	ENDIF
C
	PLOT_IFF=.FALSE.
C
	GOTO 10
C
C----------------------------------------------------------------------
C 	DISABLE FOG
C
765	HAD_FOG=.FALSE.
	GOTO 10
C
C----------------------------------------------------------------------
C	DISABLE OVERLAY
C
770     IF(MCMD)CALL WRITEF('%S> DISABLE OVERLAY',PROMPT)
	OVERLAY=.FALSE.
	GOTO 10
C
C----------------------------------------------------------------------
C	DISABLE TABLE
C
775     IF(TABLE)CALL CLOSE_TAB (IERR)
	TABLE = .FALSE.
C
C	Reset event flag, and cancel any existing QIOS
	EF_VDU=4
	CALL SYS$CANCEL(%VAL(IN_CHAN))
	HADQIO=.FALSE.
	GOTO 10
C
C----------------------------------------------------------------------
C	DISABLE PRIMARY
C
C	Deactivate the primary device
C
780	IF(MCMD)CALL WRITEF('%S> DISABLE PRIMARY',PROMPT)
C
	PRIMARY=.FALSE.
	CALL GDAWK(1)
	GOTO 10
C
C----------------------------------------------------------------------
C	DISABLE ABSOLUTE
C
785	HAD_ABSOLUTE = .FALSE.
	GOTO 10
C
C----------------------------------------------------------------------
C	DISABLE SECONDARY
C
C	Deactivate the secondary device
790	IF(MCMD)CALL WRITEF('%S> DISABLE SECONDARY',PROMPT)
C
	SECONDARY=.FALSE.
	CALL GDAWK(2)
	GOTO 10
C
C----------------------------------------------------------------------
C	DISABLE FISHNET
C
795	IF(MCMD)CALL WRITEF('%S> DISABLE FISHNET',PROMPT)
C
	FISHNET=.FALSE.
	GOTO 10
C
C----------------------------------------------------------------------
C 	DIRECTON of view
800	IF (MCMD) THEN
	  DIRECT = CMD-21
	  CALL WRITEF('%S> DIRECTION %S',PROMPT,COMPASS(DIRECT))
	  GOTO 10
	ENDIF
C
C	Check direction qualifier
	CMD = RDCOMM(COMPASS_CMD_TABLE)
	IF (CMD.LE.0) THEN
	   CALL WRITEF('*** ERROR *** Specifying direction of view')
	   CALL WRITEF
     &  ('Command should be followed by NORTH, SOUTH, EAST or WEST')
	ELSE
	   DIRECT = CMD
	ENDIF
	GOTO 10
C
C------------------------------------------------------------------------
C 	HEIGHT of viewpoint
C
C 	If from MENU, then prompt for height
C
900	IF(MCMD)THEN
	  CALL WRITEF('%S> HEIGHT',PROMPT)
910	  IF (.NOT.WAIT_INPUT('Height of viewpoint',.FALSE.,.TRUE.)
     &							) GOTO 10
	  IF (RDREAL(REALAR(1))) GOTO 910
	  DEFHOV=REALAR(1)
	  GOTO 10
	ENDIF
C
	IF(CMDRCT.NE.1)THEN
	  CALL WRITEF('%S Specifying command HEIGHT',ERROR_BELL)
	  CALL WRITEF('Command requires 1 real argument')
	  GOTO 10
	ENDIF
C
	DEFHOV = REALAR(1)
	GOTO 10
C
C------------------------------------------------------------------------
C 	DISTANCE of viewpoint
C
C 	If from MENU, prompt for distance
C
1000	IF(MCMD)THEN
	  CALL WRITEF('%S> DISTANCE',PROMPT)
1010	  IF (.NOT.WAIT_INPUT('Distance of viewpoint',.FALSE.,.TRUE.)
     &							) GOTO 10
	  IF (RDREAL(REALAR(1))) GOTO 1010
	  CMDRCT=1
	ENDIF
C
	IF(CMDRCT.NE.1)THEN
	  CALL WRITEF('%S Specifying command DISTANCE',ERROR_BELL) 
	  CALL WRITEF('Command requires 1 real argument')
	  GOTO 10
	ENDIF
C
	IF(REALAR(1).LE.0)THEN
	  CALL WRITEF('%S Specifying command DISTANCE',ERROR_BELL)
	  CALL WRITEF('Command requires a real argument greater than 1')
	  GOTO 10
	ENDIF
C
	DOV = REALAR(1)
	GOTO 10
C
C------------------------------------------------------------------------
C 	PHI - set view rotation (ISOMETRIC or PERSPECTIVE)
C
C 	If from MENU prompt for rotation value
C
1100	IF(MCMD)THEN
	  CALL WRITEF('%S> PHI',PROMPT)
1110	  IF (.NOT.WAIT_INPUT('PHI (degrees)',.FALSE.,.TRUE.)) GOTO 10
	  IF (RDREAL(REALAR(1))) GOTO 1110
	  CMDRCT=1
	ENDIF
C
	IF(CMDRCT.NE.1)THEN
	  CALL WRITEF('%S Specifying command PHI',ERROR_BELL)
	  CALL WRITEF('Command requires 1 real argument')
	  GOTO 10
	ENDIF
C
	IF(ABS(REALAR(1)).GT.80)THEN
	  CALL WRITEF('%S Specifying command PHI',ERROR_BELL)
	  CALL WRITEF
     &    ('Command requires a rotation value in the range -80 to 80')
	  GOTO 10
	ENDIF
C
	DEFPHI = REALAR(1)	
	GOTO 10
C
C------------------------------------------------------------------------
C 	THETA - set the model tilt value (ISOMETRIC views)
C
C 	If from MENU prompt for rotation value
C
1200	IF(MCMD)THEN
	  CALL WRITEF('%S> THETA',PROMPT)
1210	  IF (.NOT.WAIT_INPUT('THETA (degrees)',.FALSE.,.TRUE.)) GOTO 10
	  IF (RDREAL(REALAR(1))) GOTO 1210
	  CMDRCT = 1
	ENDIF
C
	IF(CMDRCT.NE.1)THEN
	  CALL WRITEF('%S Specifying command THETA',ERROR_BELL)
	  CALL WRITEF('Command requires 1 real argument')
	  GOTO 10
	ENDIF
C
	IF(REALAR(1).LT.-90.OR.REALAR(1).GT.0)THEN
	  CALL WRITEF('%S Specifying command THETA',ERROR_BELL)
	  CALL WRITEF
     &    ('Command requires a rotation value in the range 0 to -90')
	  GOTO 10
	ENDIF
C
	DEFTHT = REALAR(1)	
	GOTO 10
C
C------------------------------------------------------------------------
C 	ZSCALE - defines the vertical exaggeration of the view
C
C 	If from MENU prompt for value
C
1300	IF(MCMD)THEN
	  CALL WRITEF('%S> ZSCALE',PROMPT)
1310	  IF (.NOT.WAIT_INPUT
     &    ('Vertical exaggeration',.FALSE.,.TRUE.)) GOTO 10
	  IF (RDREAL(REALAR(1))) GOTO 1310
	  DEFZSC = REALAR(1)
	  GOTO 10
	ENDIF
C
	IF(CMDRCT.NE.1)THEN
	  CALL WRITEF('%S Specifying command ZSCALE',ERROR_BELL)
	  CALL WRITEF('Command requires 1 real argument')
	  GOTO 10
	ENDIF
C
	DEFZSC = REALAR(1)	
	GOTO 10
C
C------------------------------------------------------------------------
C 	PERSPECTIVE view generation
C
1400	IF (MCMD) CALL WRITEF('%S> PERSPECTIVE',PROMPT)
	IF (.NOT.DTILUN_INUSE(1)) THEN
	  CALL WRITEF('%S Specifying command PERSPECTIVE',ERROR_BELL)	  
	  CALL WRITEF('The input DTM is undefined')
	  GOTO 10
	ENDIF
C
	IF (.NOT.(PRIMARY.OR.SECONDARY.OR.PLOT_IFF)) THEN
	  CALL WRITEF('%S Specifying command PERSPECTIVE',ERROR_BELL)	  
	  CALL WRITEF
     &    ('No graphics device or output IFF file is enabled')
	  GOTO 10
	ENDIF
C
	PRSPVW = .TRUE.
C
	IF(HADTMP)THEN
C	Unmap and delete all temporary visibility matrices
C
	  RETVAL=DTI_CLOSE(2,.FALSE.,.TRUE.,ERROR)
	  IF(.NOT.RETVAL)THEN
	    CALL LSL_PUTMSG(RETVAL)
	  ENDIF
C
	  RETVAL=LIB$DELETE_FILE ('LSL$DTI:VISIBILITY.GRD;*')
	  IF(.NOT.RETVAL)THEN
	    CALL LSL_PUTMSG(RETVAL)
	    CALL WRITEF
     &      ('*** WARNING *** Error deleting temporary visibility grid')
	  ENDIF
C
	  HADTMP=.FALSE.
	ENDIF
C
	IF(OVERLAY.OR.FISHNET.OR.SYMBOLS)THEN
	  RETVAL=DTI_CREATE (2,'LSL$DTI:VISIBILITY.GRD',22,
     &                       4,32,1,NLINES,NPTS,ERROR)
C
	  IF(.NOT.RETVAL)THEN
	    CALL LSL_PUTMSG(RETVAL)
	    IF(RETVAL.EQ.DTI__SYSERR)CALL LSL_PUTMSG(ERROR)
	    CALL WRITEF('%S Creating visibility matrix',ERROR_BELL)
	    HADTMP=.FALSE.
	    IF(OVERLAY)CALL WRITEF('OVERLAY option is disabled')
	    OVERLAY=.FALSE.
	    IF(FISHNET)CALL WRITEF('FISHNET option is disabled')
	    FISHNET=.FALSE.
	    IF(SYMBOLS)CALL WRITEF('SYMBOL option is disabled')
	    SYMBOLS=.FALSE.
	  ELSE
	    HADTMP=.TRUE.
	  ENDIF	  
C
	ENDIF
C
C	Generate the perspective view
	CALL MODEL
	GOTO 10
C
C***********************************************************************
C 	ISOMETRIC view generation
C
1500	IF(MCMD)CALL WRITEF('%S> ISOMETRIC',PROMPT)
C
	IF (.NOT.DTILUN_INUSE(1)) THEN
	  CALL WRITEF('%S Specifying command ISOMETRIC',ERROR_BELL)	  
	  CALL WRITEF('The input DTM is undefined')
	  GOTO 10
	ENDIF
C
	IF (.NOT.(PRIMARY.OR.SECONDARY.OR.PLOT_IFF)) THEN
	  CALL WRITEF('%S Specifying command ISOMETRIC',ERROR_BELL)	  
	  CALL WRITEF
     &    ('No graphics device or output IFF file is enabled')
	  GOTO 10
	ENDIF
C
	PRSPVW = .FALSE.
C
	IF(HADTMP)THEN
C	Unmap the temporary visibility matrix
	  RETVAL=DTI_CLOSE(2,.FALSE.,.TRUE.,ERROR)
	  IF(.NOT.RETVAL)THEN
	    CALL LSL_PUTMSG(RETVAL)
	  ENDIF
C
C	Delete the visibility matrix
	  RETVAL=LIB$DELETE_FILE ('LSL$DTI:VISIBILITY.GRD;0')
	  IF(.NOT.RETVAL)THEN
	    CALL LSL_PUTMSG(RETVAL)
	    CALL WRITEF
     &      ('%S Error deleting temporary visibility grid',WARN_BELL)
	  ENDIF
C
	  HADTMP=.FALSE.
	ENDIF
C
	IF(OVERLAY.OR.FISHNET.OR.SYMBOLS) THEN
	  RETVAL=DTI_CREATE (2,'LSL$DTI:VISIBILITY.GRD',22,
     &                       4,32,1,NLINES,NPTS,ERROR)
C
	  IF(.NOT.RETVAL)THEN
	    CALL LSL_PUTMSG(RETVAL)
	    IF(RETVAL.EQ.DTI__SYSERR)CALL LSL_PUTMSG(ERROR)
	    CALL WRITEF('%S Creating visibility matrix',ERROR_BELL)
	    HADTMP=.FALSE.
	    IF(OVERLAY)CALL WRITEF('OVERLAY option is disabled')
	    OVERLAY=.FALSE.
	    IF(FISHNET)CALL WRITEF('FISHNET option is disabled')
	    FISHNET=.FALSE.
	    IF(SYMBOLS)CALL WRITEF('SYMBOL option is disabled')
	    SYMBOLS=.FALSE.
	  ELSE
	    HADTMP=.TRUE.
	  ENDIF	  
C
	ENDIF
C
C	Generate the isometric view
	CALL MODEL
	GOTO 10
C
C-------------------------------------------------------------------------
C 	PROFILE	Calculate and draw profile along line x1,y1 x2,y2
C
1600	IF(MCMD)CALL WRITEF('%S> PROFILE',PROMPT)
C
	IF (.NOT.DTILUN_INUSE(1)) THEN
	  CALL WRITEF('%S Specifying command PROFILE',ERROR_BELL)	  
	  CALL WRITEF('The input DTM is undefined')
	  GOTO 10
	ENDIF
C
	IF (.NOT.(PRIMARY.OR.SECONDARY.OR.PLOT_IFF)) THEN
	  CALL WRITEF('%S Specifying command PROFILE',ERROR_BELL)	  
	  CALL WRITEF
     &    ('No graphics device or output IFF file is enabled')
	  GOTO 10
	ENDIF
C
C	Get the profile points
	IF(.NOT.GET_PROFILE_POINTS(MCMD,X1,Y1,X2,Y2))GOTO 10
C
C	Generate the profile
	CALL PROFILE(X1,Y1,X2,Y2)
	GOTO 10
C
C-------------------------------------------------------------------------
C 	ZSTEP define height interval for colour allocation
C
C 	from MENU so prompt for interval value
1700	IF(MCMD)THEN
	  CALL WRITEF('%S> ZSTEP',PROMPT)
1710	  IF (.NOT.WAIT_INPUT('Height step',.FALSE.,.TRUE.)) GOTO 10
	  IF (RDLONG(INTARG(1))) GOTO 1710
	ENDIF
C
	IF (CMDICT.NE.1) THEN
	  CALL WRITEF('%S Specifying command ZSTEP',ERROR_BELL)
	  CALL WRITEF('Command requires 1 integer argument') 
	  GOTO 10
	ENDIF
C
	IF (BATH) THEN
	   MAX_ZSTEP = ABS(MAX_WVALUE(1)) + ABS(MIN_WVALUE(1))
	ELSE
	   MAX_ZSTEP = ABS(MAX_WVALUE(1))
	ENDIF
C
	IF (INTARG(1).LT.1.OR.INTARG(1).GT.MAX_ZSTEP) THEN
	  CALL WRITEF('%S Specifying command ZSTEP',ERROR_BELL)
	  CALL WRITEF(
     & 'Height value should be in the range 1 to %^W%N',MAX_ZSTEP)
	  GOTO 10
	ENDIF
C
	STPINT = INTARG(1)
	HADSTP = .TRUE.				! had STEP command
	CALL SETCOL				! set colour
	GOTO 10
C
C--------------------------------------------------------------------------
C 	ZLIMITS define height range for colour allocation.
C
C	Heights outside the range are shown in white.
C
C 	from MENU so prompt for interval value
C
1800	IF(MCMD)THEN
	  CALL WRITEF('%S> ZLIMITS',PROMPT)	  
1810	  IF (.NOT.WAIT_INPUT
     &       ('Lower and Upper Z Values',.FALSE.,.TRUE.)) GOTO 10
	  IF (RDLONG(INTARG(1))) GOTO 1810
	  IF (RDLONG(INTARG(2))) GOTO 1810
	  CMDICT=2
	ENDIF
C
	IF (CMDICT.NE.2) THEN
	  CALL WRITEF('%S Specifying colour ZLIMITS',ERROR_BELL)
	  CALL WRITEF('Command requires 2 integer arguments') 
	  GOTO 10
	ENDIF
C
C	Validate the input Z values
	IF(INTARG(2).LE.INTARG(1))THEN
	  CALL WRITEF('%S Specifying command ZLIMITS',ERROR_BELL)
	  CALL WRITEF('Upper Z value must exceed lower Z value')
	  GOTO 10
	ENDIF
C
	IF(INTARG(1).LT.MIN_WVALUE(1).OR.
     &     INTARG(1).GT.MAX_WVALUE(1).OR.
     &     INTARG(2).LT.MIN_WVALUE(1).OR.
     &     INTARG(2).GT.MAX_WVALUE(1))THEN
	  CALL WRITEF('%S Specifying command ZLIMITS',ERROR_BELL)
	  CALL WRITEF(
     & 'Z Limits must lie within the range %^W%N to %^W%N',
     &  MIN_WVALUE(1),MAX_WVALUE(1))  
	  GOTO 10
	ENDIF
C
	ZLOWER=INTARG(1)
	ZUPPER=INTARG(2)
C
	HADSTP=.TRUE.
	CALL SETCOL				! set colour
	GOTO 10
C
C--------------------------------------------------------------------------
C 	Selection of QUADRANT
C
2100	IF(MCMD)THEN
	  INTARG(1)=CMD-48
	  CALL WRITEF('%S> QUADRANT %N',PROMPT,INTARG(1))
	ENDIF
C
	IF (.NOT.SPLIT) THEN	! not allowed
	  CALL WRITEF('%S Specifying command QUADRANT',ERROR_BELL)
	  CALL WRITEF('Divided screen is not enabled')
	  GOTO 10
	ENDIF
C
	IF(MCMD)GOTO 2150
C
        IF (CMDICT.NE.1)THEN
           CALL WRITEF('%S Specifying command QUADRANT',ERROR_BELL)
           CALL WRITEF('Command requires 1 integer argument')
           GOTO 10
	ENDIF
C	  
	IF (INTARG(1).GT.4.OR.INTARG(1).LE.0) THEN
	   CALL WRITEF('%S Specifying command QUADRANT',ERROR_BELL)
	   CALL WRITEF('Quadrant number should be in range 1 to 4')
	   GOTO 10
	ENDIF
C
2150	QUAD = INTARG(1)		! set up quad.
	IF(PRIMARY)VIEW_SHOWN(1,QUAD) = .FALSE.
	IF(SECONDARY)VIEW_SHOWN(2,QUAD) = .FALSE.
C
	GOTO 10
C
C------------------------------------------------------------------------
C 	CLEAR  - Clear any enabled graphics device
C
C	If a divided screen is enabled, then the user may
C	optionally specify a quadrant number.
C
2200	IF(MCMD)THEN
	  INTARG(1)=CMD-53
	  IF(INTARG(1).EQ.0)THEN
            CALL WRITEF('%S> CLEAR',PROMPT)
	  ELSE
	    CALL WRITEF('%S> CLEAR QUADRANT %N',PROMPT,INTARG(1))
	  ENDIF
C
	  IF(.NOT.(PRIMARY.OR.SECONDARY))THEN
	    CALL WRITEF('%S Specifying command CLEAR',ERROR_BELL)
	    CALL WRITEF('No graphics device is currently enabled')
	    GOTO 10
	  ENDIF
C
	  IF(INTARG(1).GT.0.AND.(.NOT.SPLIT))THEN
	    CALL WRITEF('%S Specifying command CLEAR QUADRANT',ERROR_BELL)
	    CALL WRITEF('A divided screen is not enabled')
	    GOTO 10
	  ENDIF
C
	  IQUAD=INTARG(1)
	  GOTO 2240
	ENDIF
C
C--------------------------------------------------------------------------
C	Command from the terminal
	IF(.NOT.(PRIMARY.OR.SECONDARY))THEN
	  CALL WRITEF('%S Specifying command CLEAR',ERROR_BELL)
	  CALL WRITEF('No graphics device is currently enabled')
	  GOTO 10
	ENDIF
C
C	Check for CLEAR qualifier
	IF(RDCHS(CH))THEN
	  IQUAD=0
	  GOTO 2240
	ELSE
	  CALL BSCH
	ENDIF
C
C	Check which qualifier is present
	CMD=RDCOMM(CLEAR_CMD_TABLE)
	IF(CMD.LE.0)THEN
	  CALL WRITEF('%S Specifying command CLEAR',ERROR_BELL)
	  CALL WRITEF('Command qualifiers are PICTURE, QUADRANT '//
     &	  'or SYMBOL')
	  GOTO 10
	ENDIF
C
	GOTO (2220,2250)CMD
C
C------------------------------------------------------------------------------
C	CLEAR QUADRANT
C	Is a divided screen selected
2220	IF(.NOT.SPLIT)THEN
	  CALL WRITEF('%S Specifying command CLEAR QUADRANT',ERROR_BELL)
	  CALL WRITEF('A divided screen is not enabled')
	  GOTO 10
	ENDIF
C
C	Check for an associated quadrant number
	IF(CMDICT.NE.1)THEN
	  CALL WRITEF('%S Specifying command CLEAR QUADRANT',ERROR_BELL)
          CALL WRITEF
     &    ('Command requires a quadrant nunmber in the range 1 to 4')
	  GOTO 10
	ENDIF
C
C	Check that the quadrant number is in the valid range
	IF(INTARG(1).LT.1.OR.INTARG(1).GT.4)THEN
	  CALL WRITEF('%S Specifying command CLEAR QUADRANT',ERROR_BELL)
          CALL WRITEF
     &    ('Command requires a quadrant nunmber in the range 1 to 4')
	  GOTO 10
	ENDIF	
C
C	Transfer argument to QUAD.  This ensures that after clearing
C	the current quadrant is the cleared quadrant.
	IQUAD=INTARG(1)
C
2240	CALL CLEAR(IQUAD,-1)
C
C	Ensure the linestyle is still correct (this is required because
C	of some peculiarity in the TKLIB?)
	IF((PRIMARY.AND.INIT_PRIMARY).AND.(WTYPE(1).EQ.9900))THEN
          CALL GSLN(TK_LINESTYLE)
	ENDIF
C
	GOTO 10
C
C---------------------------------------------------------------------------
C	CLEAR PICTURE
C
C	Which picture
C
2250	IF(NOPLNS.EQ.4)THEN
	  CALL WRITEF('%S Specifying command CLEAR PICTURE',ERROR_BELL)
	  CALL WRITEF
     &    ('Command is not valid for a 4 planes graphics device')
	  GOTO 10
	ENDIF
C
	IF(CMDICT.NE.1)THEN
	  CALL WRITEF('%S Specifying command CLEAR PICTURE',ERROR_BELL)
	  CALL WRITEF('Command requires an integer argument')
	  GOTO 10
	ENDIF
C
	IF(INTARG(1).LT.1.OR.INTARG(1).GT.2)THEN
	  CALL WRITEF('%S Specifying command CLEAR PICTURE',ERROR_BELL)
	  CALL WRITEF('Command requires a picture number of 1 or 2')
	  GOTO 10
	ENDIF
C
	IQUAD=QUAD
	CALL CLEAR(IQUAD,INTARG(1))
	GOTO 10
C
C---------------------------------------------------------------------------
C 	COLOURS	define number of display colours
C
2300	IF (CMDICT.NE.1)THEN
	   CALL WRITEF('%S Specifying command COLOURS',ERROR_BELL)
	   CALL WRITEF('Command requires 1 integer argument')
	   GOTO 10
	ENDIF
C
2350	IF (INTARG(1).GT.MAXCOL.OR.INTARG(1).LT.1) THEN
	   CALL WRITEF('%S Specifying command COLOURS',ERROR_BELL)
	   CALL WRITEF('Number of colours should be in the range 1 to %N'
     &	  ,MAXCOL)
	  GOTO 10
	ENDIF
C
	STEPS = INTARG(1)	! save number of colour steps requested
	HADSTP = .FALSE.	! not had a STEP command
	CALL SETCOL		! set colours
	GOTO 10
C
C------------------------------------------------------------------------
C	DRAW 
C
2600	IF(MCMD)THEN
	  CMD=CMD-31
	  IF(CMD.EQ.1)CALL WRITEF('%S> DRAW LABEL',PROMPT)
	  IF(CMD.EQ.2)CALL WRITEF('%S> DRAW LEGEND',PROMPT)
	ENDIF
C
C	Check that a graphics device is enabled
	IF(.NOT.(PRIMARY.OR.SECONDARY))THEN
	  CALL WRITEF('%S Specifying command DRAW',ERROR_BELL)
	  CALL WRITEF('No graphics device is currently enabled')
	  GOTO 10
	ENDIF
C
	IF(MCMD)GOTO 2640
C
C	Get command qualifier
	CMD=RDCOMM(DRAW_CMD_TABLE)
	IF(CMD.LE.0)THEN
	  CALL WRITEF('%S Specifying command DRAW',ERROR_BELL)
	  CALL WRITEF('Command qualifiers are LABEL, LEGEND '//
     &	  'or SYMBOL')	
	ENDIF
C
C	DRAW LABEL
C
2640	IF(CMD.EQ.1)THEN
	  IF(MCMD)THEN
2645        IF(.NOT.WAIT_INPUT('Label text',.FALSE.,.TRUE.)) GOTO 10
	  ENDIF
C
C	Check for some characters to output
	  IF(RDCH(CH))THEN
	    CALL WRITEF('%S Specifying command DRAW LABEL',ERROR_BELL)
	    CALL WRITEF
     &      ('Command requires a text string of up to 80 characters')
	    IF(MCMD)THEN
	      GOTO 2645
	    ELSE
	      GOTO 10
	    ENDIF
	  ELSE
	    CALL BSCH	!backspace over read character
	  ENDIF
C	    
C	Check for no more than 80 characters
	  IF((TXTPTR-DCPTR+1).GT.80)THEN
	    CALL WRITEF
     &      ('%S Specifying command DRAW LABEL',ERROR_BELL)
	    CALL WRITEF('More than 80 characters in text string')
	    IF(MCMD)THEN
              GOTO 2645
	    ELSE
              GOTO 10
	    ENDIF
	  ENDIF
C
	  CALL ANNOTATE	  		! to anotate display
	  TEXT_SHOWN(QUAD) = .TRUE.
	  GOTO 10
	ENDIF
C
C	DRAW LEGEND
	IF(CMD.EQ.2)THEN
C
2660	  IF((PRIMARY.AND.WTYPE(1).EQ.9900).AND.(.NOT.SECONDARY))THEN
	    CALL WRITEF('%S Specifying command DRAW LEGEND')
	    CALL WRITEF('No legend can be shown on a TEKTRONIX 4014')
	    GOTO 10
	  ENDIF
C
	  CALL PLTPOS(.FALSE.,.FALSE.)
	  LEGEND_SHOWN(QUAD) = .TRUE.
	  CALL GSSGT		! set segment transformation
C
	  IF(BATH)THEN
	    CALL LEGBAT		! generate legend for bathymetric option
	  ELSE
	    CALL DRAW_LEGEND		! generate normal legend
          ENDIF
C
	  GOTO 10
	ENDIF
C
C	DRAW SYMBOL
	IF(CMD.EQ.3) THEN
	   OK = PROCESS_SYMBOLS(0,1,1,.FALSE.)	! redraws all symbols
	   GOTO 10
	ENDIF
C
	GOTO 10
C
C------------------------------------------------------------------------
C	LUT - read in specified colour table
C
C	Check if a graphics device has been enabled
2700	IF(MCMD)CALL WRITEF('%S> LUT',PROMPT)
C
	IF(.NOT.(PRIMARY.OR.SECONDARY))THEN
	  CALL WRITEF('%S Specifying command LUT',ERROR_BELL)
	  CALL WRITEF('No graphics device is currently enabled')
	  GOTO 10
	ENDIF
C
        IF((PRIMARY.AND.WTYPE(1).EQ.9900).AND.(.NOT.SECONDARY))THEN
	  CALL WRITEF('%S Specifying command LUT',ERROR_BELL)
	  CALL WRITEF('Command not valid for a TEKTRONIX 4014')
	  GOTO 10
	ENDIF
C
C	If from the menu, prompt for the LUT filename
	IF(MCMD)THEN
	  IF(.NOT.WAIT_INPUT('LUT Filename',.FALSE.,.TRUE.))GOTO 10
	ENDIF
C	  
	IF(PRIMARY.AND.WTYPE(1).NE.9900)CALL LUTSET(1)
	IF(SECONDARY.AND.SECONDARY_DEVICE)CALL LUTSET(2)
C
	GOTO 10
C
C------------------------------------------------------------------------
C	LEGEND parameter specification
C
C	Test which qualifier has been supplied
2800	CMD=RDCOMM(LEGEND_CMD_TABLE)
	IF(CMD.LE.0)THEN
	  CALL WRITEF('%S Specifying command LEGEND',ERROR_BELL)
	  CALL WRITEF('Command qualifiers are POSITION or SIZE')
	  GOTO 10
	ENDIF
C
	GOTO (2810,2850)CMD	
C
C------------------------------------------------------------------------
C	LEGEND POSITION
C
C	Check for 2 arguments
2810	IF(CMDACT.NE.2)THEN
	  CALL WRITEF('%S Specifying command LEGEND POSITION',ERROR_BELL)
	  CALL WRITEF('Command requires 2 real arguments')
	  GOTO 10
	ENDIF
C
C	Check values are in range 0 to 1
2840	IF(REALAR(1).LT.0.0.OR.REALAR(1).GT.1.0.OR.
     &     REALAR(2).LT.0.0.OR.REALAR(2).GT.1.0)THEN
	  CALL WRITEF('%S Specifying command LEGEND POSITION',ERROR_BELL)
	  CALL WRITEF
     &    ('Command requires 2 real arguments in the range 0 to 1')
	  GOTO 10
	ENDIF
C
	LEGX = REALAR(1)
	LEGY = REALAR(2)
	GOTO 10
C
C-------------------------------------------------------------------------
C	LEGEND SIZE
C
C       Set scaling factor for legend 0.0 to 1.0
2850	IF(CMDACT.NE.1)THEN
	  CALL WRITEF('%S Specifying command LEGEND SIZE',ERROR_BELL)
	  CALL WRITEF('Command requires 1 real argument')
	  GOTO 10
	ENDIF
C	  
2860	IF (REALAR(1).LT.0.0.OR.REALAR(1).GT.1.0) THEN
	  CALL WRITEF('%S Specifying command LEGEND SIZE',ERROR_BELL)
	  CALL WRITEF
     &	  ('Command requires a real argument in the range 0 to 1')
	  GOTO 10
	ENDIF
C
	LEGSIZ = REALAR(1)
	GOTO 10
C
C--------------------------------------------------------------------------
C	LABEL
C
C	Test which qualifier has been supplied
2900	CMD=RDCOMM(LABEL_CMD_TABLE)
	IF(CMD.LE.0)THEN
	  CALL WRITEF('%S Specifying command LABEL',ERROR_BELL)
	  CALL WRITEF
     &    ('Command qualifiers are CLEAR, COLOUR, POSITION or SIZE')
	  GOTO 10
	ENDIF
C
	GOTO (2910,2920,2940,2970)CMD	
C
C------------------------------------------------------------------------
C	LABEL CLEAR
C
C	Treated in the same way as the command CLEAR PICTURE 2
2910	IF (.NOT.(PRIMARY.OR.SECONDARY))THEN
	   CALL WRITEF('%S Specifying command LABEL CLEAR',ERROR_BELL)
	   CALL WRITEF('No graphics device is currently enabled')
	   GOTO 10
	ENDIF
C
C	Check if primary device is a TEK 4014
        IF((PRIMARY.AND.WTYPE(1).EQ.9900).AND.(.NOT.SECONDARY))THEN
	   CALL WRITEF('%S Specifying command LABEL CLEAR',ERROR_BELL)
	   CALL WRITEF('Command is not valid for a TEKTRONIX 4014')
	   GOTO 10
	ENDIF
C
C	Check if the device has only 4 planes
	IF (NOPLNS.EQ.4)THEN
	   CALL WRITEF('%S Specifying command LABEL CLEAR',ERROR_BELL)
	   CALL WRITEF
     &     ('Command is not valid for a 4 planes graphics device')
	   GOTO 10
	ENDIF
C
	CALL CLEAR(QUAD,2)
 	GOTO 10 
C
C------------------------------------------------------------------------
C	LABEL COLOUR
C
2920	IF(CMDICT.NE.1)THEN
	  CALL WRITEF('%S Specifying command LABEL COLOUR',ERROR_BELL)
	  CALL WRITEF('Command requires 1 integer argument')
	  GOTO 10
	ENDIF
C
C	Check if the primary device has only 4 planes
	IF (NOPLNS.EQ.4)THEN
	   CALL WRITEF('%S Specifying command LABEL CLEAR',ERROR_BELL)
	   CALL WRITEF
     &     ('Command is not valid for a 4 planes graphics device')
	   GOTO 10
	ENDIF
C
	IF(INTARG(1).LT.1.OR.INTARG(1).GT.OVERLAY_COLOURS)THEN
	  CALL WRITEF('%S Specifying command LABEL COLOUR',ERROR_BELL)
	  CALL WRITEF
     &    ('Command requires an integer in the range 1 to %N',
     &    OVERLAY_COLOURS)
	  GOTO 10
	ENDIF
C
	LABCOL=INTARG(1)
C
	GOTO 10
C
C------------------------------------------------------------------------
C	LABEL POSITION
C
2940	IF(CMDACT.NE.2)THEN
	  CALL WRITEF('%S Specifying command LABEL POSITION',ERROR_BELL)
	  CALL WRITEF('Command requires 2 real arguments')
	  GOTO 10
	ENDIF
C
C	Check values are in range 0 to 1
	IF(REALAR(1).LT.0.0.OR.REALAR(1).GT.1.0.OR.
     &     REALAR(2).LT.0.0.OR.REALAR(2).GT.1.0)THEN
	  CALL WRITEF('%S Specifying command LABEL POSITION',ERROR_BELL)
	  CALL WRITEF
     &    ('Command requires 2 real arguments in the range 0 to 1')
	  GOTO 10
	ENDIF
C
	LABX = REALAR(1)
	LABY = REALAR(2)
C
	GOTO 10
C
C------------------------------------------------------------------------
C	LABEL SIZE
C
C	Check for an integer argument
2970	IF(CMDICT.NE.1)THEN
	  CALL WRITEF('%S Specifying command LABEL SIZE',ERROR_BELL)
	  CALL WRITEF('Command requires 1 integer argument')
	  GOTO 10
	ENDIF
C
	IF(INTARG(1).LT.1.OR.INTARG(1).GT.4)THEN
	  CALL WRITEF('%S Specifying command LABEL SIZE',ERROR_BELL)
	  CALL WRITEF('Command requires an integer in the range 1 to 4')
	  GOTO 10
	ENDIF
C
	LABSIZ = INTARG(1)
	GOTO 10 
C
C------------------------------------------------------------------------
C 	SET command
C
C	Get command qualifier
3000	CMD=RDCOMM(SET_CMD_TABLE)
	IF(CMD.LE.0)THEN
	  CALL WRITEF('%S Specifying command SET',ERROR_BELL)
	  CALL WRITEF
     &    ('Command qualifiers are DEFAULT, LAND_FC, LAYER, '//
     &	  'LINE_STYLE')
	  CALL WRITEF
     &    ('                       NULL_FC, ORIGIN, SCALE, SEA_FC,
     & SYMBOL_SCALE,')
	  CALL WRITEF
     &    ('                       TEXT_FC')
	  GOTO 10
	ENDIF
C
	GOTO(3010,3040,3050,3060,3070,3080,3090,3095,3075,3085)CMD
C
C---------------------------------------------------------------------
C	Set default
C
3010	CMD=RDCOMM(DEFAULT_CMD_TABLE)
	IF(CMD.LE.0)THEN
	  CALL WRITEF('%S Specifying command SET DEFAULT',ERROR_BELL)
	  CALL WRITEF('Command qualifiers are ANNOTATION or VIEW')
	  GOTO 10
	ENDIF
C
	GOTO (3020,3030)CMD
C
C	Set default annotation
3020	LABSIZ = 1			! label size
	LABX   = 0.5			! label x position
	LABY   = 0.5			! label y position
	LABCOL = 1			! label colour
	LEGSIZ = 0.25			! legend scaling factor
	LEGX   = 0.005			! legend x position
	LEGY   = 0.15			! legend y position
	GOTO 10
C
C	Set default view
3030	IF(MCMD)CALL WRITEF('%S> SET DEFAULT VIEW',PROMPT)
	DEFHOV   = 300.0		! height of view 
	DEFPHI   = 45.0			! phi
	DEFTHT   = -30.0		! theta
	DEFZSC   = 1.0			! vertical exaggeration
	DOV      = 300.0		! distance
	DIRECT   = 1			! west
	X_SAMPLE = 1			! sampling along cols
	Y_SAMPLE = 1			! sampling along rows
	GOTO 10 
C
C--------------------------------------------------------------------
C	SET LAND_FC
C
C	Set the feature code used to identify land profiles in the
C	output IFF file
C
3040	IF(CMDICT.NE.1)THEN
	  CALL WRITEF('%S Specifying command SET LAND_FC',ERROR_BELL)
	  CALL WRITEF('Command requires 1 integer argument')
	  GOTO 10
	ENDIF
C
	IF(INTARG(1).LT.0.OR.INTARG(1).GT.32767)THEN	    
	  CALL WRITEF('%S Specifying command SET LAND_FC',ERROR_BELL)
	  CALL WRITEF
     & ('Command requires a feature code value in the range 0 to 32767')
	  GOTO 10
	ENDIF
C
	LAND_FC=INTARG(1)
	GOTO 10
C
C-----------------------------------------------------------------------
C	SET SEA_FC
C
C	Set the feature code used to identify sea profiles in the
C	output IFF file
C
3050	IF(CMDICT.NE.1)THEN
	  CALL WRITEF('%S Specifying command SET SEA_FC',ERROR_BELL)
	  CALL WRITEF('Command requires 1 integer argument')
	  GOTO 10
	ENDIF
C
	IF(INTARG(1).LT.0.OR.INTARG(1).GT.32767)THEN	    
	  CALL WRITEF('%S Specifying command SET SEA_FC',ERROR_BELL)
	  CALL WRITEF
     & ('Command requires a feature code value in the range 0 to 32767')
	  GOTO 10
	ENDIF
C
	SEA_FC=INTARG(1)
	GOTO 10
C
C------------------------------------------------------------------------
C	SET LAYER
C
C	Set layer used to contain profiles in an output IFF file
3060	IF(CMDICT.NE.1)THEN
	  CALL WRITEF('%S Specifying command SET LAYER',ERROR_BELL)	  
	  CALL WRITEF('Command requires an integer argument')
	  GOTO 10
	ENDIF
C
	IF(INTARG(1).LT.1.OR.INTARG(1).GT.32767)THEN
	  CALL WRITEF('%S Specifying command SET LAYER',ERROR_BELL)	  
	  CALL WRITEF
     &    ('Command requires a layer number  in the range 1 to 32767')
	  GOTO 10
	ENDIF
C
	LAYER = INTARG(1)
	GOTO 10
C
C------------------------------------------------------------------------
C	SET NULL_FC
C
3070	IF(CMDICT.NE.1)THEN
	  CALL WRITEF('%S Specifying command SET NULL_FC',ERROR_BELL)	  
	  CALL WRITEF('Command requires an integer argument')
	  GOTO 10
	ENDIF
C
	IF(INTARG(1).LT.1.OR.INTARG(1).GT.32767)THEN
	  CALL WRITEF('%S Specifying command SET NULL_FC',ERROR_BELL)	  
	  CALL WRITEF
     &    ('Command requires a layer number  in the range 1 to 32767')
	  GOTO 10
	ENDIF
C
	NULL_FC = INTARG(1)
	GOTO 10
C------------------------------------------------------------------------
C	SET LINESTYLE
C
C	First test if this version supports a primary TEKTRONIX device
3075	PRIMARY_DEVICE = TSTWK(1,WTYPE(1))
	IF((.NOT.PRIMARY_DEVICE).OR.(WTYPE(1).NE.9900))THEN
	  CALL WRITEF('%S Specifying command TKSTYLE',ERROR_BELL)
	  CALL WRITEF('Primary graphics device is not a TEKTRONIX 4014')
	  GOTO 10
	ENDIF
C
	IF(CMDICT.NE.1)THEN
	  CALL WRITEF('%S Specifying command TKSTYLE',ERROR_BELL)
	  CALL WRITEF('Command requires 1 integer argument')
	  GOTO 10
	ENDIF
C
	IF(INTARG(1).LT.1.OR.INTARG(1).GT.5)THEN
	  CALL WRITEF('%S Specifying command TKSTYLE',ERROR_BELL)
	  CALL WRITEF('Command requires an integer in the range 1 to 5')
	  GOTO 10
	ENDIF
C
	TK_LINESTYLE=INTARG(1)+1
        CALL GSLN(TK_LINESTYLE)
	GOTO 10
C
C------------------------------------------------------------------------
C	SET ORIGIN
C
3080	IF(CMDACT.NE.2)THEN
	  CALL WRITEF('%S Specifying command ORIGIN',ERROR_BELL)
	  CALL WRITEF('Command requires 2 real arguments')
	  GOTO 10
	ENDIF
C
	CALL G3ORIGIN(REALAR(1),REALAR(2))
	IF(AUTO)AUTO=.FALSE.
	GOTO 10
C
C--------------------------------------------------------------------
C	SET TEXT_FC
C
C	Set the feature code used to identify text in the
C	output IFF file
3085	IF(CMDICT.NE.1)THEN
	  CALL WRITEF('%S Specifying command SET TEXT_FC',ERROR_BELL)
	  CALL WRITEF('Command requires 1 integer argument')
	  GOTO 10
	ENDIF
C
	IF(INTARG(1).LT.0.OR.INTARG(1).GT.32767)THEN	    
	  CALL WRITEF('%S Specifying command SET TEXT_FC',ERROR_BELL)
	  CALL WRITEF
     & ('Command requires a feature code value in the range 0 to 32767')
	  GOTO 10
	ENDIF
C
	TEXT_FC=INTARG(1)
	GOTO 10
C
C------------------------------------------------------------------------
C	SET SCALE
C 
C 	SCALE (ie define plot units)
3090	IF(CMDACT.NE.1)THEN
	  CALL WRITEF('%S Specifying command SCALE',ERROR_BELL)
	  CALL WRITEF('Command requires 1 real argument')
	  GOTO 10
	ENDIF
C
	CALL G3UNIT(REALAR(1))
	IF (AUTO) AUTO=.FALSE.
	GOTO 10
C
C------------------------------------------------------------------------
C	SET SYMBOL_SCALE
C
3095	IF(CMDACT.NE.1)THEN
	  CALL WRITEF('%S Specifying command SET SYMBOL_SCALE',ERROR_BELL)
	  CALL WRITEF('Command requires 1 real argument')
	  GOTO 10
	ENDIF
C
	SYMSF = REALAR(1)
	HADSF = .TRUE.
	GOTO 10
C
C-------------------------------------------------------------------------
C LAND (set maximum land colours)
C
C3600	IF (INTARG(1).LE.0.OR.INTARG(1).GT.60) THEN
C	  CALL WRITEF('*** ERROR *** Specifying number of land colours')
C          CALL WRITEF('Command requires an integer between 1 and 60')
C	  GOTO 10
C	ENDIF
C
C	IF (BATH)THEN
C	  CALL WRITEF('*** ERROR *** Specifying number of land colours')
C          CALL WRITEF('Command not valid with bathymetry option')
C	  GOTO 10
C	ENDIF
C
C        LNDCOL = INTARG(1)
C	MAXCOL = LNDCOL
C	STEPS  = LNDCOL
C	HADSTP = .FALSE.		! cancel any STEP command
C	CALL SETCOL
C
C	GOTO 10
C
C************************************************************************
C SEA (set maximum sea colours)
C
C3700	IF (INTARG(1).LE.0.OR.INTARG(1).GT.14) THEN
C	  CALL WRITEF('*** ERROR *** Specifying number of sea colours')
C          CALL WRITEF('Command requires an integer between 1 and 14')
C	  GOTO 10
C	ENDIF
C
C	IF (BATH)THEN
C	  CALL WRITEF('*** ERROR *** Specifying number of sea colours')
C          CALL WRITEF('Command not valid without bathymetry option')
C	  CALL WRITEF('Use command BATHYMETRY to select this option')
C	  GOTO 10
C	ENDIF
C
C	SEACOL = INTARG(1)
C	MAXCOL = SEACOL
C	STEPS  = SEACOL
C  	HADSTP = .FALSE.		!cancel any STEP command
C	CALL SETCOL			!recalculate step/colour allocation
C
C	GOTO 10
C
C************************************************************************
C 	IFF open input IFF file containing the overlay data
C
3100	IF(MCMD)CALL WRITEF('%S> IFF',PROMPT)
C
	IF(.NOT.OVERLAY)THEN
	  CALL WRITEF('%S Specifying command IFF',ERROR_BELL)
	  CALL WRITEF('Overlay options are not enabled')
	  GOTO 10
	ENDIF
C
	IF(MCMD)GOTO 3120
C
	IF(RDCHS(CH))THEN
	  CALL WRITEF('%S Specifying command IFF',ERROR_BELL)
	  CALL WRITEF('Input IFF filename is missing')
	  GOTO 3120
	ELSE
	  CALL BSCH
	ENDIF
C
3110	IF(.NOT.OPEN_IFF_FILE())THEN
3120	  CALL BSLN
	  IF(.NOT.WAIT_INPUT('Input IFF filename',.FALSE.,.TRUE.))GOTO 10
	  GOTO 3110
	ENDIF
C
	HADIFF=.TRUE.
	IF(DTILUN_INUSE(1))CALL IFFTRN	
C
	GOTO 530		!print out IFF details (as SHOW IFF)
C
C-------------------------------------------------------------------------
C	IFFWINDOW 
C
C	Define IFF window for DTI to IFF registration
C
3200	IF(MCMD)CALL WRITEF('%S> IFFWINDOW',PROMPT)
C
	IF(.NOT.OVERLAY)THEN
	  CALL WRITEF('%S Specifying command IFFWINDOW',ERROR_BELL)
	  CALL WRITEF('Overlay options are not enabled')
	  GOTO 10
	ENDIF
C
	IF(.NOT.HADIFF)THEN
	  CALL WRITEF('%S Specifying command IFFWINDOW',ERROR_BELL)
	  CALL WRITEF('No input IFF has been specified')
	  GOTO 10
	ENDIF
C	 
C	If command is from the menu, then prompt for window values
	IF(MCMD)THEN
3250	  IF(.NOT.WAIT_INPUT
     &      ('IFF Window SW corner',.FALSE.,.TRUE.))GOTO 10
	  IF(RDREAL(REALAR(1)))GOTO 3250
	  IF(RDREAL(REALAR(2)))GOTO 3250
C
3260	  IF(.NOT.WAIT_INPUT
     &      ('IFF Window NE corner',.FALSE.,.TRUE.))GOTO 10
	  IF(RDREAL(REALAR(3)))GOTO 3260
	  IF(RDREAL(REALAR(4)))GOTO 3260
	  CMDACT=4		!4 arguments
	ENDIF
C
	IF(CMDACT.NE.4)THEN		!prompt for window values
	  CALL WRITEF('%S Specifying command IFFWINDOW',ERROR_BELL)
	  CALL WRITEF('Command requires 4 real arguments')
	  GOTO 10
	ENDIF
C
3230	IF((REALAR(1).GE.REALAR(3)).OR.(REALAR(2).GE.REALAR(4)))THEN
	  CALL WRITEF('%S Specifying command IFFWINDOW',ERROR_BELL)
	  CALL WRITEF('NE corner should exceed SW corner')
	  IF(MCMD)GOTO 3250
	  GOTO 10
	ENDIF
C
C
	IF (HAD_ABSOLUTE) THEN
	   XT1 = REALAR(1)-ORIGIN_OFFSET(1)
	   YT1 = REALAR(2)-ORIGIN_OFFSET(2)
	   XT2 = REALAR(3)-ORIGIN_OFFSET(1)
	   YT2 = REALAR(4)-ORIGIN_OFFSET(2)
	ELSE
	   XT1 = REALAR(1)
	   YT1 = REALAR(2)
	   XT2 = REALAR(3)
	   YT2 = REALAR(4)
	ENDIF
C
C	Check if window is inside map range and generate warning
	IF(XT1.LT.RANGE_VALUES(1).OR.
     &     YT1.LT.RANGE_VALUES(3).OR.
     &     XT2.GT.RANGE_VALUES(2).OR.
     &     YT2.GT.RANGE_VALUES(4))THEN
	  CALL WRITEF
     &    ('%S Specified window outside IFF file coordinate range',
     &    WARN_BELL)
	ENDIF
C
	WIND(1,1)=XT1
	WIND(1,2)=YT1
	WIND(2,1)=XT2
	WIND(2,2)=YT2
	HADWIN=.TRUE.
C
	CALL IFFTRN	!recalculate IFF to DTI transformation
C
	GOTO 10
C
C----------------------------------------------------------------------
C	OVERLAY	- plot selected IFF features on the previously
C
C	generated terrain base.
C
3300	IF(MCMD)CALL WRITEF('%S> OVERLAY',PROMPT)
C
	IF(.NOT.OVERLAY)THEN
	  CALL WRITEF('%S Specifying command OVERLAY',ERROR_BELL)
	  CALL WRITEF('Overlay options are not enabled')
	  GOTO 10
	ENDIF
C
	IF(.NOT.HADTMP)THEN
	  CALL WRITEF('%S Specifying command OVERLAY',ERROR_BELL)
          CALL WRITEF
     &    ('Before overlay it is necessary to generate a terrain view')
	  CALL WRITEF('Use the command ISOMETRIC or PERSPECTIVE')
          GOTO 10
	ENDIF
C
	IF(NOPLNS.EQ.8)THEN
	  CALL WRITEF('%S Specifying command OVERLAY',ERROR_BELL)
	  CALL WRITEF('Overlay not possible with a planes setting of 8')
	  GOTO 10
	ENDIF
C
	IF(.NOT.HADIFF)THEN
	  CALL WRITEF('%S Specifying command OVERLAY',ERROR_BELL)
	  CALL WRITEF('No IFF file has been specified')
	  GOTO 10
	ENDIF
C
	IF(.NOT.HADFRT)THEN
	  CALL WRITEF('%S Specifying command OVERLAY',ERROR_BELL)
	  CALL WRITEF('No FRT file has been specified')
	  GOTO 10
	ENDIF
C
	CALL TRANSFORM_IFF		! perform overlay
C
	GOTO 10	 
C
C------------------------------------------------------------------------
C	FRT - read in specified Feature Representation Table
C
3400	IF(MCMD)CALL WRITEF('%S> FRT',PROMPT)
C
	IF (.NOT.OVERLAY .AND. .NOT.SYMBOLS) THEN
	  CALL WRITEF('%S Specifying command FRT',ERROR_BELL)
	  CALL WRITEF('Overlay or symbol options are not enabled')
	  GOTO 10
	ENDIF
C
	IF(MCMD)GOTO 3455
C
3450	IF(RDCHS(CH))THEN
	  CALL WRITEF('%S Specifying command FRT',ERROR_BELL)
	  CALL WRITEF('Input FRT filename is missing')
3455	  IF(.NOT.WAIT_INPUT('Input FRT filename',.FALSE.,.TRUE.))GOTO 10
	ELSE
	  CALL BSCH
	ENDIF
C
	RETVAL = GETFILNAM(FRTTIT,NAMLEN,'LSL$FRT:FRT.FRT;0',.TRUE.)
	IF (.NOT.RETVAL) THEN
	  CALL LSL_PUTMSG(RETVAL)
	  GOTO 10
	ENDIF
C
C if symbols enabled then flag symbols as undefined
C
	IF(HADFRT .AND. SYMBOLS_DEFINED.GT.0) THEN
	   SYMBOL_UNDEFINE_MESS = .TRUE.
C
	   DO 3460 I = 1,MAX_SYMBOLS
	      IF (SYMBOL_LDATA(5,I)) THEN
		 IF (SYMBOL_UNDEFINE_MESS) THEN
	            CALL WRITEF('%S symbols are being undefined',
     &		    WARN_BELL)
		    SYMBOL_UNDEFINE_MESS = .FALSE.
		 ENDIF
C
	         SYMBOL_LDATA(5,I) = .FALSE.
		 IF(SYMBOL_LDATA(6,I)) THEN
	            SYMBOLS_USED = SYMBOLS_USED - 1
	            SYMBOL_LDATA(6,I) = .FALSE.
		 ENDIF
C
	         SYMBOL_LDATA(7,I) = .FALSE.
	         SYMBOL_LDATA(8,I) = .FALSE.
		 SYMBOLS_DEFINED = SYMBOLS_DEFINED - 1
	      ENDIF
3460	   CONTINUE
	ENDIF
C
	HADFRT = .FALSE.
	IF (FRTINI(FRTTIT(:NAMLEN))) GOTO 3455
	CALL FRT_GRAPH_INIT
C
	HADFRT = .TRUE.
	GOTO 10
C
C------------------------------------------------------------------------
C	SRI -read in specified symbol representation IFF file
C 	for defining symbols referenced by the FRT file.
C
3500	IF(.NOT.OVERLAY .AND. .NOT.SYMBOLS) THEN
	  CALL WRITEF('%S Specifying command SRI',ERROR_BELL)
	  CALL WRITEF('Overlay and symbol options are not enabled')
	  GOTO 10
	ENDIF
C
3550	IF(RDCHS(CH))THEN
	  CALL WRITEF('%S Specifying command SRI',ERROR_BELL)
	  CALL WRITEF('Input SRI filename is missing')
3555	  IF(.NOT.WAIT_INPUT('Input SRI filename',.FALSE.,.TRUE.))GOTO 10
C
	ELSE
	  CALL BSCH
	ENDIF
C	  
	RETVAL = GETFILNAM(SRITIT,NAMLEN,'LSL$FRT:SRI.SRI;0',.TRUE.)
	IF (.NOT.RETVAL) THEN
	  CALL LSL_PUTMSG(RETVAL)
	  GOTO 10
	ENDIF
C
C if symbols enabled then flag symbols as undefined
C
	IF (HADSRI .AND. SYMBOLS_DEFINED.GT.0) THEN
	   SYMBOL_UNDEFINE_MESS = .TRUE.
	   DO 3560 I = 1,MAX_SYMBOLS
	      IF (SYMBOL_LDATA(5,I)) THEN
		 IF(SYMBOL_UNDEFINE_MESS) THEN
	            CALL WRITEF('%S symbols are being undefined',
     &		    WARN_BELL)
		    SYMBOL_UNDEFINE_MESS = .FALSE.
		 ENDIF
C
	         SYMBOL_LDATA(5,I) = .FALSE.
		 IF(SYMBOL_LDATA(6,I)) THEN
	            SYMBOLS_USED = SYMBOLS_USED - 1
	            SYMBOL_LDATA(6,I) = .FALSE.
		 ENDIF
C
	         SYMBOL_LDATA(7,I) = .FALSE.
	         SYMBOL_LDATA(8,I) = .FALSE.
		 SYMBOLS_DEFINED = SYMBOLS_DEFINED - 1
	      ENDIF
3560	   CONTINUE
	ENDIF	
C
	HADSRI = .FALSE.
	IF (SRIINI(SRITIT(:NAMLEN))) GOTO 3555
	HADSRI = .TRUE.
	GOTO 10
C
C--------------------------------------------------------------------
C 	SELECT, SELECT FC, SELECT LAYER, SELECT FSN, SELECT ALL
C
3600	IF(.NOT.OVERLAY)THEN
	  CALL WRITEF('%S Specifying command SELECT',ERROR_BELL)
	  CALL WRITEF('Overlay options are not enabled')
	  GOTO 10
	ENDIF
C
	CMD = RDCOMM(SEL_CMD_TABLE)	! look for qualifier
	IF (CMD.LE.0) THEN
	  CALL WRITEF('%S Specifying command SELECT',ERROR_BELL)
	  CALL WRITEF('Command qualifiers are ALL, FC, FSN or LAYER')
	  GOTO 10
	ENDIF
C
	GOTO (3610,3620,3630,3640) CMD
C
C 	SELECT FC
3610	IF (RDSEL(.TRUE.,.FALSE.)) GOTO 10
	GOTO 10
C
C 	SELECT LAYER 
3620	IF (RDLAY(.TRUE.)) GOTO 10
	GOTO 10
C
C 	SELECT FSN
3630	IF (RDFSN(.TRUE.)) GOTO 10
	GOTO 10
C
C 	SELECT ALL  Reset all selections
3640	LYSMOD = .FALSE.
	FCSMOD = .FALSE.
	FSNMOD = .FALSE.
C
	CALL VIOCLR(LAYMAP,LAYMAX*4,-1)	 ! reset the whole bit-map.
	CALL VIOCLR(FCMAP,FCMAX*4,-1)	 ! reset the whole bit-map.
	CALL VIOCLR(FSNMAP,FSNMAX*4,-1)	 ! reset the whole bit-map.
	GOTO 10
C
C***********************************************************************
C 	DESELECT, DESELECT FC, DESELECT LAYER, DESELECT FSN
C
3700	IF(.NOT.OVERLAY)THEN
	  CALL WRITEF('%S Specifying command DESELECT',ERROR_BELL)
	  CALL WRITEF('Overlay options are not enabled') 
	  GOTO 10
	ENDIF
C
	CMD = RDCOMM(SEL_CMD_TABLE)
	IF(CMD.LE.0.OR.CMD.EQ.4)THEN
	  CALL WRITEF('%S Specifying command DESELECT',ERROR_BELL)
	  CALL WRITEF('Command qualifiers are  FC, FSN or LAYER')
	  GOTO 10
	ENDIF
C
	GOTO (3710,3720,3730) CMD
C
C 	DESELECT FC
C
3710	IF (RDSEL(.FALSE.,.FALSE.)) GOTO 10
	GOTO 10
C
C 	DESELECT LAYER
3720	IF (RDLAY(.FALSE.)) GOTO 10
	GOTO 10
C
C 	DESELECT FSN
3730	IF (RDFSN(.FALSE.)) GOTO 10
	GOTO 10
C
C-----------------------------------------------------------------------
C	UNITS
C
3900	IF(MCMD)THEN
	  CMD=CMD-6
	  CALL WRITEF('%S> UNITS %S',PROMPT,UNITS_TYPE(CMD))
C
	ELSE
	  CMD=RDCOMM(UNIT_CMD_TABLE)	
	  IF(CMD.LE.0) THEN! unrecognised command
	    CALL WRITEF('%S Specifying command UNITS',ERROR_BELL)
	    CALL WRITEF
     &	 ('Command qualifiers are MATRIX, METRES, SECONDS,  LATLONG '//
     &   'or PROJECTION')
	    GOTO 10
	  ENDIF
	ENDIF
C
C test if the specified units are valid
	IF (DTILUN_INUSE(1)) THEN
	   RETVAL = DTI_UNITS(1,CMD)
	   IF (.NOT. RETVAL) THEN
	      IF (RETVAL .EQ. DTI__INVUNITS) THEN
	         CALL WRITEF('%S Specifying command UNITS',ERROR)
		 CALL WRITEF
     &          ('Command qualifier is invalid for the input file')
	      ELSE
		 CALL LSL_PUTMSG(RETVAL)
	      ENDIF
	      GOTO 10
	   ENDIF
	ENDIF
C
	UNITS=CMD
	GOTO 10
C
C----------------------------------------------------------------------------
C	WAIT
C
C	Hibernate for specified number of seconds
C
4000	IF(CMDRCT.NE.1)THEN
	  CALL WRITEF('%S Specifying command WAIT',ERROR_BELL)
	  CALL WRITEF('Command requires a real argument')
	  GOTO 10
	ENDIF
C
	CALL LIB$WAIT (REALAR(1))
	GOTO 10
C
C----------------------------------------------------------------------------
C	SPAWN DCL process - primarily designed for file management
C
4100	I=0
4110	IF(RDCH(CH))THEN
	  GOTO 4120
	ELSE	
	  I=I+1
	  IF(I.GT.80)THEN
	    CALL WRITEF('%S Specifying command SPAWN',ERROR_BELL)
	    CALL WRITEF('DCL command line cannot exceed 80 characters')
	    GOTO 10
	  ENDIF	  
	  LINE(I:I)=CHAR(CH)
	  GOTO 4110
	ENDIF
C
4120	IF(I.EQ.0)THEN
	  CALL WRITEF('%S Specifying command SPAWN',ERROR_BELL)
	  CALL WRITEF('Command requires a valid DCL command')
	  GOTO 10
	ENDIF
C
C cancel CTRL/C recognition during spawn
	IF (.NOT.CMDFIL) CALL SET_OUTBAND_AST
	IERR= LIB$SPAWN (LINE(1:MIN(I,80)))
	IF (.NOT.CMDFIL) CALL SET_OUTBAND_AST(CTRLCAST,8)
	IF(.NOT.IERR)THEN
          CALL LIB$SIGNAL(%VAL(IERR)) !error
	  CALL WRITEF('%S Unable to spawn command, returning to DTIVIEW',
     &              ERROR_BELL)
	ENDIF
	CALL WRITEF
C
	GOTO 10
C
C--------------------------------------------------------------------------
C	DEBUG messages on/off 
C
4300	IF(CMDNEG)THEN
	  DEBUG=.FALSE.
	ELSE
	  DEBUG=.TRUE.
	ENDIF
C
	GOTO 10
C
C--------------------------------------------------------------------------
C	PLANES - select how many planes to allocate to picture 1
C
C	- remainder are allocated to picture 2 for overlay
4400	IF(MCMD)THEN
	  INTARG(1)=CMD-53
	  CALL WRITEF('%S> PLANES %N',PROMPT,INTARG(1))
	  GOTO 4450
	ENDIF
C
	IF(CMDICT.NE.1)THEN
	  CALL WRITEF('%S Specifying command PLANES',ERROR_BELL)
	  CALL WRITEF('Command requires 1 integer argument')
	  GOTO 10
	ENDIF
C
	IF(INTARG(1).LT.4.OR.INTARG(1).GT.8)THEN
	  CALL WRITEF('%S Specifying command PLANES',ERROR_BELL)
	  CALL WRITEF
     &    ('Command requires 1 integer argument in the range 4 to 8')
	  GOTO 10
	ENDIF
C
4450	NOPLNS = INTARG(1)
	PLANE_MASK = 2**NOPLNS-1
        LNDCOL = (2**NOPLNS)-3
	MAXCOL = LNDCOL
	STEPS = MAXCOL
C
C	Determine number of overlay colours
	IF(NOPLNS.GT.4)THEN
	   OVERLAY_COLOURS=(2**(8-NOPLNS))-1
	ELSE
	   OVERLAY_COLOURS=0
	ENDIF
C
C	Call INIT_DEVICE to read in colour table appropriate to
C	PLANES setting, and do plane selection
C
	IF(PRIMARY .AND. INIT_PRIMARY)CALL INIT_DEVICE(1)
	IF(SECONDARY .AND. INIT_SECONDARY)CALL INIT_DEVICE(2)
C
C	If via menu, put out message to confirm selection
	IF(MCMD)CALL WRITEF
     &		('Use of %N planes for Picture 1 selected',NOPLNS)
	GOTO 10
C--------------------------------------------------------------------------
C	SAMPLE
C
4500	IF(CMDICT.NE.2)THEN
	  CALL WRITEF('%S Specifying command SAMPLE',ERROR_BELL)
	  CALL WRITEF('Command requires 2 integer arguments')
	  GOTO 10
	ENDIF
C
	IF(INTARG(1).LT.1.OR.INTARG(2).LT.1)THEN
	  CALL WRITEF('%S Specifying command SAMPLE',ERROR_BELL)
	  CALL WRITEF
     &    ('Command requires 2 positive integer arguments')
	  GOTO 10
	ENDIF
C
	IF (FISHNET .AND. INTARG(1).NE.INTARG(2)) THEN
	  CALL WRITEF('%S Specifying command SAMPLE',ERROR_BELL)
	  CALL WRITEF
     & ('Fishnet representation is currently only available with')
	  CALL WRITEF
     & ('an equal sampling interval along the columns and rows')
	  CALL WRITEF('Fishnet option is disabled')
	  FISHNET=.FALSE.
	ENDIF
C
	IF (OVERLAY .AND. (INTARG(1).NE.1 .OR. INTARG(2).NE.1)) THEN
	  CALL WRITEF('%S Specifying command SAMPLE',ERROR_BELL)
	  CALL WRITEF
     &    ('Enable overlay options are only available with
     & sample intervals of 1')
	  CALL WRITEF('Overlay options have been disabled')
	  OVERLAY=.FALSE.
	ENDIF
C
	X_SAMPLE=INTARG(1)
	Y_SAMPLE=INTARG(2)
C
	GOTO 10
C
C-------------------------------------------------------------------------
C	PAUSE
C
C	halt processing until CR is pressed
C
4600	CALL DTIV_PAUSE
	GOTO 10
C
C-------------------------------------------------------------------------
C	SYMBOL
C
C	symbol parameters
C
4700	CONTINUE
C
	OK = SYMBOL_CMD()
	GOTO 10
C
C------------------------------------------------------------------------
C 	RETURN
C
4800	CONTINUE
	IF(.NOT.HAD_INDIRECT_FILE)THEN
	  CALL WRITEF('%S Specifying command RETURN',ERROR_BELL)
	  CALL WRITEF
     &    ('The RETURN command is only valid in a command file')
	  GOTO 10
	ENDIF
C
	CALL WRITEF('Returning to terminal input')
C
C	Close the indirect command file
4850	RETVAL=FLRCLO(9)
	IF(.NOT.RETVAL)CALL LSL_PUTMSG(RETVAL)
	HAD_INDIRECT_FILE=.FALSE.
	GOTO 10
C
C------------------------------------------------------------------------
C	FOG
C
4900	CONTINUE
	OK = FOG_CMD()
	GOTO 10
C
C------------------------------------------------------------------------
C 	@ Indirect command file input
C
8000	CONTINUE
	CALL OPEN_COMMAND_FILE
	GOTO 10
C
C------------------------------------------------------------------------
C 	EXIT
C
C	Close and unmap any DTI files
C	The input DTM
C
9000	IF(DTILUN_INUSE(1))THEN
	  RETVAL= DTI_CLOSE(1,.FALSE.,.FALSE.,ERROR)
	  IF(RETVAL.NE.DTI__NORMAL)THEN
	    CALL LSL_PUTMSG(RETVAL)
	    IF(RETVAL.EQ.DTI__SYSERR)CALL LSL_PUTMSG(ERROR)
	  ENDIF
	ENDIF
C
C	Any visibility matrix
	IF(DTILUN_INUSE(2))THEN
	  RETVAL= DTI_CLOSE(2,.FALSE.,.FALSE.,ERROR)
	  IF(RETVAL.NE.DTI__NORMAL)THEN
	    CALL LSL_PUTMSG(RETVAL)
	    IF(RETVAL.EQ.DTI__SYSERR)CALL LSL_PUTMSG(ERROR)
	  ENDIF
	ENDIF
C
C	Delete all visibility grids
	RETVAL=LIB$DELETE_FILE ('LSL$DTI:VISIBILITY.GRD;*')
C
C	Close graphics devices and any output IFF file
	IF(PRIMARY.AND.INIT_PRIMARY)    CALL GDAWK(1)
	IF(SECONDARY.AND.INIT_SECONDARY)CALL GDAWK(2)
	IF(PLOT_IFF)CALL ENDIFF
C
C	Close GKS
	CALL GCLKS
C
C	Close down the table monitor
	IF(TABLE)CALL CLOSE_TAB (IERR)
C
	END
C
