	SUBROUTINE ENCODE_IFF(XFROM,YFROM,XTO,YTO,IVAL,DIR)
C
***	MODULE	ENCODE_IFF
***	IDENT	27JL88
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C	Created   : 10SE85
C	Author    : D R Catlow
C
C	Modified  : DRC                                        Jan-1988
C	            To use DTILIB calls.
C
C	Routine for DTVIEW culture overlay 
C	The points lying between the supplied coordinate points XFROM,
C	YFROM and XTO,YTO are determined, a check for their visibility
C	status is made, and if visible the culture plotting routine
C	CULPLT is called.
C
C-------------------------------------------------------------------------
C
	IMPLICIT NONE
C
C	Arguments
	INTEGER*4	XFROM		!start DTI x coordinate
	INTEGER*4	YFROM		!start DTI y coordinate
	INTEGER*4	XTO		!end   DTI x coordinate
	INTEGER*4	YTO		!end   DTI y coordinate
	INTEGER*2	IVAL		!feature code value
	INTEGER*4	DIR		!direction to scan
C
C	DTVIEW commons:
***	COMMON/LSL$CMNDTI:DTIHDR/
C
***	COMMON/HERE:MODEL/
***	COMMON/HERE:CULTRE /
***	COMMON/HERE:FOG/
C
C	Functions
	INTEGER*4	DTI_READ_BYTE_DATA ! to test visibility of cell
C
C	Locals
	BYTE		VIS		! visibility status
C
	REAL		XIN		! scan line x and y
	REAL		RSAMPLE
	REAL		RLINE
	REAL		YIN		! intersection points.
	INTEGER*4	RETVAL		! function return code
	INTEGER*4	XVALUE
	INTEGER*4	YVALUE
	INTEGER*4	STEP		! scan line incremental step
	INTEGER*4	DIFFX		! abs. diff between XFROM,XTO
	INTEGER*4	DIFFY		! abs. diff between YFROM,YTO
	INTEGER*4	SAMPLE		! scan line
	INTEGER*4	LINE		! counters
	INTEGER*4	XPOS		! nearest int. of XIN
	INTEGER*4	YPOS		! nearest int. of YIN
C
C**********************************************************************
C
C	used to determine the best direction to scan
	DIFFX = ABS(XFROM-XTO)	
	DIFFY = ABS(YFROM-YTO)
C
C	Encode point?	
	IF(DIFFX.EQ.0.AND.DIFFY.EQ.0)GOTO 999
C
C--------------------------------------------------------------------------
C
	IF(DIFFY.EQ.0)THEN	
C	Simple horizontal line
	  STEP=X_SAMPLE				! ------> 
	  IF(XFROM.GT.XTO)STEP=-X_SAMPLE	! <------ 
C
	  DO 100 SAMPLE=XFROM,XTO,STEP
C
C	Test whether pt. SAMPLE,YFROM is visible
50	     XVALUE=SAMPLE-DTMOFX
	     YVALUE=YFROM-DTMOFY
	     IF(XVALUE.LT.1.OR.XVALUE.GT.X_EXTENT(2).OR.
     &          YVALUE.LT.1.OR.YVALUE.GT.Y_EXTENT(2))THEN
	        VIS=0
	     ELSE
	        RETVAL=DTI_READ_BYTE_DATA(2,VIS,XVALUE,YVALUE)
	        IF(.NOT.RETVAL)THEN
	          CALL LSL_PUTMSG(RETVAL)
	          GOTO 999
	        ENDIF
	     ENDIF
C
	     IN_FOG = .FALSE.
	     IF(VIS.EQ.1)THEN		! visible
                CALL CULPLT(SAMPLE,YFROM,IVAL)
	     ELSEIF(VIS.EQ.2)THEN		! in fog
		IN_FOG = .TRUE.
                CALL CULPLT(SAMPLE,YFROM,IVAL)
	     ELSE
	        STALIN=.TRUE.
	     ENDIF
C
100       CONTINUE			! get next pt
C
C	If sampling ensure that the XTO is considered
	  IF((STEP.LT.-1.AND.SAMPLE.GT.XTO).OR.
     &       (STEP.GT.1. AND.SAMPLE.LT.XTO))THEN
	     SAMPLE=XTO
	     GOTO 50		!jump back into the loop
	  ENDIF
C
	GOTO 999			! all done
	ENDIF
C
C*****************************************************************************
C
	IF(DIFFX.EQ.0)THEN
C	Simple vertical line
	  STEP=Y_SAMPLE				! upwards
	  IF(YFROM.GT.YTO)STEP=-Y_SAMPLE	! downwards
C
	  DO 200 LINE=YFROM,YTO,STEP
C	Test whether pt. SAMPLE,YFROM is visible
C	Test whether pt. SAMPLE,YFROM is visible
150	     XVALUE=XFROM-DTMOFX
	     YVALUE=LINE-DTMOFY
	     IF(XVALUE.LT.1.OR.XVALUE.GT.X_EXTENT(2).OR.
     &          YVALUE.LT.1.OR.YVALUE.GT.Y_EXTENT(2))THEN
	        VIS=0
	     ELSE
	        RETVAL=DTI_READ_BYTE_DATA(2,VIS,XVALUE,YVALUE)
	        IF(.NOT.RETVAL)THEN
	          CALL LSL_PUTMSG(RETVAL)
	          GOTO 999
	        ENDIF
	     ENDIF
C
	     IN_FOG = .FALSE.
	     IF(VIS.EQ.1)THEN		! visible
	        CALL CULPLT(XFROM,LINE,IVAL)
	     ELSEIF(VIS.EQ.2)THEN		! in fog
		IN_FOG = .TRUE.
	        CALL CULPLT(XFROM,LINE,IVAL)
	     ELSE
	        STALIN=.TRUE.
	     ENDIF
C
200	  CONTINUE			! get next pt
C
C	If sampling ensure that the YTO is considered
	  IF((STEP.LT.-1.AND.LINE.GT.YTO).OR.
     &       (STEP.GT.1. AND.LINE.LT.YTO))THEN
	     LINE=YTO
	     GOTO 150		!jump back into the loop
	  ENDIF
C
	  GOTO 999			! all done
	ENDIF
C
C*************************************************************************
C
C	More complicated case of a non-vertical or non-horizontal line
C	Decide whether to scan horizontally or vertically
C
	IF(DIR.EQ.2)GOTO 350
	IF(DIR.EQ.1)GOTO 210
	IF(DIFFY.GT.DIFFX)GOTO 350	! scan horizontally
C
C	Scan vertically
C
210	STEP=X_SAMPLE			! ----->
	IF(XFROM.GT.XTO)STEP=-X_SAMPLE	! <-----
C
	DO 300 SAMPLE =XFROM,XTO,STEP	
C	calculate intersection of sample line SAMPLE with a line
C	connecting vertex cells XFROM,YFROM and XTO,YTO.
C	YIN is real Y intersection point
C	YPOS is nearest integer to YIN
C
	   RSAMPLE=FLOAT(SAMPLE)+0.001
	   YIN =(YFROM+(YTO-YFROM)*(RSAMPLE-XFROM)/(XTO-XFROM))
	   YPOS=NINT(YIN)
C
C	Test whether pt. SAMPLE,YPOS is visible
C	Test whether pt. SAMPLE,YFROM is visible
	   XVALUE=SAMPLE-DTMOFX
	   YVALUE=YPOS-DTMOFY
	   IF(XVALUE.LT.1.OR.XVALUE.GT.X_EXTENT(2).OR.
     &       YVALUE.LT.1.OR.YVALUE.GT.Y_EXTENT(2))THEN
	     VIS=0
	   ELSE
	     RETVAL=DTI_READ_BYTE_DATA(2,VIS,XVALUE,YVALUE)
	     IF(.NOT.RETVAL)THEN
	       CALL LSL_PUTMSG(RETVAL)
	       GOTO 999
	     ENDIF
	   ENDIF
C
	   IN_FOG = .FALSE.
	   IF(VIS.EQ.1)THEN		! visible 
	      CALL CULPLT(SAMPLE,YPOS,IVAL)
	   ELSEIF(VIS.EQ.2)THEN		! in fog
	      IN_FOG = .TRUE.
	      CALL CULPLT(SAMPLE,YPOS,IVAL)
	   ELSE
	     STALIN=.TRUE.
	   ENDIF
C
300     CONTINUE			! next pt
C
        GOTO 999			! all done
C
C*************************************************************************
C
C       Scan vertically
C
350	STEP=Y_SAMPLE			! upwards
	IF(YFROM.GT.YTO)STEP=-Y_SAMPLE	! downwards
C
	DO 400 LINE =YFROM,YTO,STEP	
	   RLINE=FLOAT(LINE)+0.001
	   XIN =(XFROM+(XTO-XFROM)*(RLINE-YFROM)/(YTO-YFROM))
	   XPOS=NINT(XIN)
C	Test whether pt. XPOS,LINE is visible
C	Test whether pt. SAMPLE,YFROM is visible
	   XVALUE=XPOS-DTMOFX
	   YVALUE=LINE-DTMOFY
	   IF(XVALUE.LT.1.OR.XVALUE.GT.X_EXTENT(2).OR.
     &        YVALUE.LT.1.OR.YVALUE.GT.Y_EXTENT(2))THEN
	      VIS=0
	   ELSE
	      RETVAL=DTI_READ_BYTE_DATA(2,VIS,XVALUE,YVALUE)
	      IF(.NOT.RETVAL)THEN
	        CALL LSL_PUTMSG(RETVAL)
	        GOTO 999
	      ENDIF
	   ENDIF
C
	   IN_FOG = .FALSE.
	   IF(VIS.EQ.1)THEN		! visible
	      CALL CULPLT(XPOS,LINE,IVAL)
	   ELSEIF(VIS.EQ.2)THEN		! in fog
	      IN_FOG = .TRUE.
	      CALL CULPLT(XPOS,LINE,IVAL)
	   ELSE
	     STALIN=.TRUE.
	   ENDIF
C
400     CONTINUE			! next pt
C
C**************************************************************************
C
999	RETURN				
	END
