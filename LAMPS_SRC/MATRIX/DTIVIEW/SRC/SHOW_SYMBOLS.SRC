C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-12-01 15:16:54.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE SHOW_SYMBOLS
C
***	MODULE	SHOW_SYMBOLS
***	IDENT	01DE88
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    29-Nov-1988
C Based on ALB code.
C Outputs user defined symbol information for SHOW SYMBOL command.
C
	IMPLICIT NONE
C
C Parameters
C
C Arguments
C
C Common Blocks
***	COMMON/LSL$CMNDTI:DTIHDR/
***	COMMON/LSL$CMNDTI:DTIPROJ/
***	COMMON/HERE:USER_SYMBOLS/	! contains user symbol array
***	COMMON/HERE:MODEL/	
C
C Functions
C
C Local Variables
	REAL*4		XPOS,YPOS
	INTEGER*4	LLDEGS(2)
	INTEGER*4	I
	INTEGER*4	DEGR,MINU,SECO
	LOGICAL		NEGA
C
	CALL WRITEF
	IF(.NOT.SYMBOLS) THEN
	   CALL WRITEF('Symbols not enabled ')
	   GOTO 10
	ENDIF
	CALL WRITEF('Number of symbols currently defined : %I0',
     &	SYMBOLS_DEFINED)
	CALL WRITEF('Number of symbols currently used : %I0',
     &	SYMBOLS_USED)
C
	CALL WRITEF
     &	('-----------------------------'
     &  //'---------------------------------|')
	CALL WRITEF
     &	('| Symbol no |   FC  |   X position  '
     &  //'|   Y position  | Visible |')
	CALL WRITEF
     &	('-----------------------------'
     &  //'---------------------------------|')
	DO 100 I = 1,MAX_SYMBOLS
C 
	   IF(.NOT.(SYMBOL_LDATA(5,I).AND.SYMBOL_LDATA(6,I)))GOTO 100
C
C expand the string for symbol number and FC
	   CALL EXPAND('|    %I3    |%I5  |',I,SYMBOL_IDATA(4,I))
C
C expand the DTI coordinates according to the current units
	   GOTO(10,20,30,40,50)UNITS
C
C UNITS matrix
10	   CALL APPEND('     %I5     |     %I5     |',
     &	   NINT(SYMBOL_RDATA(2,I)),NINT(SYMBOL_RDATA(3,I))) 
	   GOTO 70
C
C UNITS metres
20	   IF(HAD_ABSOLUTE)THEN
	     XPOS=X_OFFSET(1)+(SYMBOL_RDATA(2,I)-1)*X_GRID(1)
	     YPOS=Y_OFFSET(1)+(SYMBOL_RDATA(3,I)-1)*Y_GRID(1)
	   ELSE
	     XPOS = (SYMBOL_RDATA(2,I)-1)*X_GRID(1)
	     YPOS = (SYMBOL_RDATA(3,I)-1)*Y_GRID(1)
	   ENDIF
	   CALL APPEND('  %F10.2   |  %F10.2   |',XPOS,YPOS)
	   GOTO 70
C
C UNITS seconds
30	   LLDEGS(1)=LONREC(1,1)+((NINT(SYMBOL_RDATA(2,I))-1)*LONINT(1))
	   LLDEGS(2)=LATREC(1,1)+((NINT(SYMBOL_RDATA(3,I))-1)*LATINT(1))
	   CALL APPEND('  %I10   |  %I10   |',LLDEGS(1),LLDEGS(2))
	   GOTO 70
C
C UNITS latlong
40	   LLDEGS(1)=LONREC(1,1)+((NINT(SYMBOL_RDATA(2,I))-1)*LONINT(1))
	   LLDEGS(2)=LATREC(1,1)+((NINT(SYMBOL_RDATA(3,I))-1)*LATINT(1))
C
	   CALL DTI_CVTANG(LLDEGS(1),NEGA,DEGR,MINU,SECO)
	   CALL APPEND('%P   %I3 %P0%I2 %P0%I2',DEGR,MINU,SECO)
	   IF(NEGA)THEN
	      CALL APPEND('W   |')
	   ELSE
	      CALL APPEND('E   |')
	   ENDIF
	   CALL DTI_CVTANG(LLDEGS(2),NEGA,DEGR,MINU,SECO)
	   CALL APPEND('%P   %I3 %P0%I2 %P0%I2',DEGR,MINU,SECO)
	   IF(NEGA)THEN
	      CALL APPEND('S   |')
	   ELSE
	      CALL APPEND('N   |')
	   ENDIF
	   GOTO 70
C
C UNITS projection
50	   IF(HAD_ABSOLUTE)THEN
	     XPOS=DTIPROJ_ORIGIN(1,1)+
     &       (SYMBOL_RDATA(2,I)-1)*DTIPROJ_SAMPLE(1,1)
	     YPOS=DTIPROJ_ORIGIN(2,1)+
     &       (SYMBOL_RDATA(3,I)-1)*DTIPROJ_SAMPLE(2,1)
	   ELSE
	     XPOS = (SYMBOL_RDATA(2,I)-1)*DTIPROJ_SAMPLE(1,1)
	     YPOS = (SYMBOL_RDATA(3,I)-1)*DTIPROJ_SAMPLE(2,1)
	   ENDIF
	   CALL APPEND('  %F10.2   |  %F10.2   |',XPOS,YPOS)
	   GOTO 70
C
C output the rest of the line
70	   IF(SYMBOL_LDATA(7,I)) THEN
	      CALL APPEND('   YES   |')
	   ELSE
	      CALL APPEND('   NO    |')
	   ENDIF
C
	   CALL TTWLIN
100	CONTINUE
C
	CALL WRITEF
     &	('-----------------------------'
     &  //'---------------------------------|')
	CALL WRITEF
C
999	RETURN
	END
