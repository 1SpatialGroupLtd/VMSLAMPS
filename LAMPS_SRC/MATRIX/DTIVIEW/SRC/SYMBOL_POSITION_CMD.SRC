C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-11-29 18:59:52.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION SYMBOL_POSITION_CMD()
C
***	MODULE	SYMBOL_POSITION_CMD
***	IDENT	29NO88
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C
CMOD Use projection units			MWSR    23-Nov-1988
CMOD Add absolute positioning for metre values	MWSR	22-Nov-1988
C Create by ALB						21-Jul-1988
C	
C Function to set the position of a symbol.  The position arguments are in
C the units specified by the UNITS command.
C This command provides an alternative method of positioning or moving 
C symbols if a digitising table is not available.
C
C	Function returns .TRUE. if successful.
C
	IMPLICIT NONE
C
C DTILIB common
***	COMMON/LSL$CMNDTI:DTIHDR/
***	COMMON/LSL$CMNDTI:DTIPROJ/
C LSLLIB common
***	COMMON/LSL$CMNLSL:CMDCOM/
C
***	COMMON/HERE:MODEL/		! contains UNITS etc.
***	COMMON/HERE:DTIQIO/		! 
***	COMMON/HERE:TAB/		! contains HAD_VDU
***	COMMON/HERE:TRANS/		! has TAB_DTI transformation
***	COMMON/HERE:DTICMN/		! contains MAP_SET
***	COMMON/HERE:USER_SYMBOLS/	! user defined symbols
C
C W/s
	INTEGER*4	X1,Y1,X2,Y2	! window values in matrix units
	INTEGER*4	LLDEGS(4)	! window values in seconds
	INTEGER		SYM_NUM		! symbol number
	LOGICAL		OK		! return code
C
C Function
	LOGICAL		READLL		! reads lat/long
	LOGICAL		PROCESS_SYMBOLS	! process to plot symbols
C
C ......................................................................
C
	SYMBOL_POSITION_CMD=.TRUE.		! assume success
C
	IF (CMDRCT.NE.3.AND.UNITS.NE.4) THEN
C
C First check for special case when symbol number is equal to 0
C
	   IF(CMDRCT.GT.0.AND.REALAR(1).EQ.0) THEN
	      SYM_NUM = NINT(REALAR(1))	!  symbol number
	      GOTO 50
	   ENDIF
C
	   CALL WRITEF('%S Specifying command SYMBOL POSITION ',
     &	   ERROR_BELL)
	   CALL WRITEF
     &	  ('Command requires symbol number and x,y coordinate pair')
	   SYMBOL_POSITION_CMD =.FALSE.
	   GOTO 999
	ENDIF
C
	SYM_NUM = NINT(REALAR(1))	!  symbol number
C
	IF((SYM_NUM.LT.1).OR.(SYM_NUM.GT.MAX_SYMBOLS)) THEN
	   CALL WRITEF('%S Specifying command SYMBOL POSITION ',
     &	   ERROR_BELL)
	   CALL WRITEF
     &	   ('Symbol number less than 1 or greater than %I0',
     &     MAX_SYMBOLS)
	   SYMBOL_POSITION_CMD =.FALSE.
	   GOTO 999
	ENDIF
C
C----------------------------------------------------------------------
C
	GOTO (10,20,30,40,45) UNITS
C
C----------------------------------------------------------------------
C	Matrix units
C
10	CONTINUE
	X1=NINT(REALAR(2))
	Y1=NINT(REALAR(3))
	GOTO 50
C
C----------------------------------------------------------------------
C	Metres
C
20	CONTINUE
	IF (HAD_ABSOLUTE)THEN
	   X1=NINT((REALAR(2)-X_OFFSET(1))/X_GRID(1))+1
	   Y1=NINT((REALAR(3)-Y_OFFSET(1))/Y_GRID(1))+1
	ELSE
	   X1=NINT((REALAR(2))/X_GRID(1))+1
	   Y1=NINT((REALAR(3))/Y_GRID(1))+1
	ENDIF
	GOTO 50
C
C-----------------------------------------------------------------------
C	Seconds
C
30	CONTINUE
	Y1=NINT(REALAR(2)*10)
	X1=NINT(REALAR(3)*10)
	X1=((X1-LONREC(1,1))/LONINT(1))+1
	Y1=((Y1-LATREC(1,1))/LATINT(1))+1
	GOTO 50
C
C-----------------------------------------------------------------------
C	Degrees, Minutes & Seconds
C	Call READLL to convert to .1 seconds
C
40	CONTINUE
	IF (READLL(LLDEGS,2,.TRUE.)) THEN
	   CALL WRITEF('%S Specifying symbol position ',ERROR_BELL)
	   CALL WRITEF('Unable to use supplied LATLONG values')
	   SYMBOL_POSITION_CMD =.FALSE.
	   GOTO 999
	ELSE
	   Y1=LLDEGS(1)*10
	   X1=LLDEGS(2)*10
	   X1=((X1-LONREC(1,1))/LONINT(1))+1
	   Y1=((Y1-LATREC(1,1))/LATINT(1))+1
	ENDIF
	GOTO 50
C
C----------------------------------------------------------------------
C	Projection units
C
45	CONTINUE
	IF (HAD_ABSOLUTE) THEN 
	   X1=NINT((REALAR(2)-DTIPROJ_ORIGIN(1,1))
     &             /DTIPROJ_SAMPLE(1,1))+1
	   Y1=NINT((REALAR(3)-DTIPROJ_ORIGIN(2,1))
     &             /DTIPROJ_SAMPLE(2,1))+1
	ELSE
	   X1=NINT(REALAR(2)/DTIPROJ_SAMPLE(1,1))+1
	   Y1=NINT(REALAR(3)/DTIPROJ_SAMPLE(2,1))+1
	ENDIF
	GOTO 50
C----------------------------------------------------------------------
C
50	CONTINUE
C
C call subroutine to try to position symbol on ISO or PER display
C
	OK = PROCESS_SYMBOLS(SYM_NUM,X1,Y1,.FALSE.)
	IF(.NOT.OK) THEN
	   SYMBOL_POSITION_CMD = .FALSE.
	   GOTO 999
	ENDIF
	GOTO 1000
C
C----------------------------------------------------------------------
C
999	CONTINUE
1000	CONTINUE
	RETURN
	END
