C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-12-10 14:40:38.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION PARSE_FORMAT()
C
***	MODULE PARSE_FORMAT
***	IDENT	02DE87
C
C	Copyright (C), Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Created						JMB 02-Dec-1987
C
C Function to parse format string in FORBUF, check it is legal
C and extract information on the number of fields and the field width.
C These are placed in NUM_FIELD and SIZE_FIELD.
C This user defined format is used for the text file output in DTI to
C text file conversion.
C Function returns .TRUE. if all is well.
C
	IMPLICIT NONE
C
C Parameters :
	INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'
C
C Common block :
	INCLUDE	'LSL$CMNLSL:CMDCOM.CMN'
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'
	INCLUDE	'LSL$CMNDTI2TEXT:CONTROL.CMN'
C
C w/s
	BYTE		CH		! input characters
	LOGICAL		NONE		! flag for input success
	INTEGER		I		! count variable
C
C Functions:
	LOGICAL		SETAUX		! Changing input buffer
	LOGICAL		RDCHS		! Read character
	LOGICAL		RDINT		! Read integer
C
C ......................................................................
C
	PARSE_FORMAT = .TRUE.		! assume success
C
C Set up format string as new text input buffer
C
	CALL SETAUX (%REF(TEXT_FORMAT), TEXT_FORMAT_LEN)
C
C Read first character, should be '(', and check it
C
	NONE = RDCHS(CH)
	IF ((CH.NE.'(').OR.NONE) GOTO 900	! error in format
C
C Look for integer specifying number of fields
C
	NONE = RDINT (NUM_FIELD)
	IF (NONE) NUM_FIELD = 1			! no number, so 1 field
C
C Look for 'F' or 'I' format type specifier
C
	NONE = RDCHS(NUM_TYPE)
	IF (NONE.OR.
     &		((NUM_TYPE.NE.'F').AND.(NUM_TYPE.NE.'I')) ) GOTO 900
C
C Look for number (real or integer) specifying field width
C Do integer format first
C
	IF (NUM_TYPE.EQ.'I') THEN
	   NONE = RDINT (SIZE_FIELD)
	   IF (NONE) GOTO 900			! no number so error
C
C Now do real format
C
	ELSEIF (NUM_TYPE.EQ.'F') THEN
	   NONE = RDINT (SIZE_FIELD)		! total field size
	   IF (NONE) GOTO 900			! error
	   NONE = RDCHS(CH)			! might be '.'
	   IF (NONE) GOTO 900			! error
C
C If find a '.' read number after it
C
	   IF (CH.EQ.'.') THEN
	      NONE = RDINT (DEC_PLACES)
	      IF (NONE.OR.(DEC_PLACES.GT.SIZE_FIELD-1)) GOTO 900 ! error
	   ENDIF
	ENDIF
C
C Look for final ')'
C
	NONE = RDCHS(CH)
	IF (NONE.OR.(CH.NE.')')) GOTO 900	! last thing is ')'
C
C Set up record width
C
	WIDTH_RECORD = NUM_FIELD * SIZE_FIELD
	IF (WIDTH_RECORD.GE.256) GOTO 900	! too big, so error
	GOTO 950
C
C Deal with errors
C
900	PARSE_FORMAT = .FALSE.
C
C Exit
C
950	CALL BSLN	! reset input buffer to /TXTC/ default
	RETURN
	END
