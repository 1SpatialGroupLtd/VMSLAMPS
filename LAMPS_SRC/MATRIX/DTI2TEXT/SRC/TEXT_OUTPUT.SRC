C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-08-08 17:34:30.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION TEXT_OUTPUT (RCOL,WCOL,LCOL,BCOL,
     &						NROWS,YSTART)
C
***	MODULE TEXT_OUTPUT
***	IDENT	08AU91
C
C	Copyright (C), Laser-Scan Ltd., Cambridge, England
C
CMOD1022				Jon  Barber	8-Aug-1991
C	Implement output of BIT data
C	Correct output of window not starting at DTI SW corner
C	Use I12 format for LONG integer DTI values to cope with
C	the LONG NULL value of -2147483648
C
CMOD	Include null handling for all data types       MWSR 08-Dec-1988
CMOD	Treat bytes as unsigned words		       MWSR 25-Nov-1988
C	Created						JMB 02-Dec-1987
C
C Function to output a single column of dti file passed as one of the
C array arguments to the output text file, formatting it into a string
C buffer according to default or user defined formats.
C Function returns .TRUE. if all is well.
C
	IMPLICIT NONE
C
C Parameters :
	INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'
C
C Common block :
	INCLUDE	'LSL$CMNLSL:CMDCOM.CMN'
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'
	INCLUDE 'LSL$CMNDTI:DTIHDR.CMN'
	INCLUDE 'LSL$CMNDTI:DTIPAR.PAR'
C
	INCLUDE	'LSL$CMNDTI2TEXT:CONTROL.CMN'
	INCLUDE 'LSL$CMNDTI2TEXT:DTI2TEXTMSG.PAR'
C
C Arguments
	INTEGER		NROWS			 ! No of values
	INTEGER		YSTART			 ! start column
C
C Column vector, dynamic according to column size for particular file:
	REAL*4		RCOL (NROWS)		 ! Real
	INTEGER*4	LCOL (NROWS)		 ! Longword
	INTEGER*2	WCOL (NROWS)		 ! Word
	BYTE		BCOL (NROWS)		 ! Byte or bit
C
C w/s
	CHARACTER*255	OUT_STR			 ! output string
	INTEGER		I,J			 ! count variables
	LOGICAL		OK			 ! for error codes
	INTEGER		IERR			 ! for error codes
	INTEGER		YEND			 ! end column
C
	INTEGER*4       BIT_COL(MAX_Y)	 	 ! BIT column output
	INTEGER*2       UNSIGNED_COL(MAX_Y)	 ! unsigned byte column
	INTEGER*2	UNSIGNED_BVAL		 ! unsigned byte
	BYTE		BVAL			 ! signed byte
	EQUIVALENCE	(UNSIGNED_BVAL,BVAL)	
C
C functions :
	INTEGER*2	BNULL_SUBST		 ! find byte null val	
C						 ! NB - WORD function
	INTEGER*4	LNULL_SUBST		 ! find long null val	
	REAL		RNULL_SUBST		 ! find real null val	
	INTEGER*2	WNULL_SUBST		 ! find word null val	
	INTEGER		FLWSTR			 ! write string
	INTEGER		LIB$EXTZV		 ! extract BIT value
C
C ......................................................................
C
	YEND = NROWS -1 + YSTART
C
	TEXT_OUTPUT = .TRUE.		! assume succes
C
C if its byte data then pre-process it to turn it into unsigned byte
C data
	IF (DATA_TYPE(DTILUN) .EQ. DATA_BYTE) THEN
	   DO 2 I = 1,NROWS
	      BVAL = BCOL(I)
	      UNSIGNED_COL(I) = UNSIGNED_BVAL
2	   CONTINUE
C
C if its bit data then pre-process it to turn it into integer
C data. YSTART, YEND are positions of relevent bits in the byte column
C
	ELSEIF (DATA_TYPE(DTILUN) .EQ. DATA_BIT) THEN
	   DO 3 I = YSTART,YEND
	      BIT_COL(I-YSTART+1) = LIB$EXTZV(I-1,1,BCOL)
3	   CONTINUE
	ENDIF
C
C Output each item in column, putting it into appropriate position
C in output string
C
	DO 5 I = 1,NROWS,NUM_FIELD
C
C Take action dependent on data type to output column data
C
	   GOTO (
     &		10,		! bytes now turned into words
     &		20,		! word
     &		30,		! longword
     &		40,		! real
     &		50		! bit
     &		), DATA_TYPE(DTILUN)
C
C Type not known
C
	   CALL WRITEF ('%S Unrecognised datatype in DTI file', ERROR)
	   CALL LSL_PUTMSG(D2T__UNRECDT)
	   TEXT_OUTPUT = .FALSE.
	   GOTO 60
C
C Output current string which has just been filled
C
4	   OK = FLWSTR (OUT_STR(:WIDTH_RECORD), IERR)
	   IF (.NOT.OK) THEN
	      CALL WRITEF ('%S Cannot write line to output file %S',
     &			ERROR,TXTFILE(:TXTLEN))
	      CALL LSL_PUTMSG(D2T__WRREC)
	      CALL LSL_ADDMSG(OK)
	      CALL LSL_ADDMSG(IERR)
	      TEXT_OUTPUT = .FALSE.
	      GOTO 60
	   ENDIF
C
5	CONTINUE
C
	GOTO 70
C
C ..................................................................
C Now to output text to file taking into account any user format
C and the type of the data
C
C ..................................................................
C Byte data
C
10	IF (HAD_FORMAT) THEN
	   IF (I.GT.NROWS-NUM_FIELD) THEN
	      WRITE (OUT_STR, TEXT_FORMAT(:TEXT_FORMAT_LEN))
     &	            (BNULL_SUBST(UNSIGNED_COL(J)), J = I, NROWS)
	   ELSE
	      WRITE (OUT_STR, TEXT_FORMAT(:TEXT_FORMAT_LEN))
     &	            (BNULL_SUBST(UNSIGNED_COL(J)), J = I, I-1+NUM_FIELD)
	   ENDIF
	ELSE
	   IF (I.GT.NROWS-NUM_FIELD) THEN
	      WRITE (OUT_STR, '(8I10)') 
     &        (BNULL_SUBST(UNSIGNED_COL(J)), J = I, NROWS)
	   ELSE
	      WRITE (OUT_STR, '(8I10)') 
     &        (BNULL_SUBST(UNSIGNED_COL(J)), J = I, I-1+NUM_FIELD)
	   ENDIF
	ENDIF
	GOTO 4
C
C ..................................................................
C Word data
C
20	IF (HAD_FORMAT) THEN
	   IF (I.GT.NROWS-NUM_FIELD) THEN
	      WRITE (OUT_STR, TEXT_FORMAT(:TEXT_FORMAT_LEN))
     &	            (WNULL_SUBST(WCOL(J)), J = I, NROWS)
	   ELSE
	      WRITE (OUT_STR, TEXT_FORMAT(:TEXT_FORMAT_LEN))
     &	            (WNULL_SUBST(WCOL(J)), J = I, I-1+NUM_FIELD)
	   ENDIF
	ELSE
	   IF (I.GT.NROWS-NUM_FIELD) THEN
	      WRITE (OUT_STR, '(8I10)') 
     &		    (WNULL_SUBST(WCOL(J)), J = I, NROWS)
	   ELSE
	      WRITE (OUT_STR, '(8I10)') 
     &		    (WNULL_SUBST(WCOL(J)), J = I, I-1+NUM_FIELD)
	   ENDIF
	ENDIF
	GOTO 4
C
C ..................................................................
C Longword data
C
30	IF (HAD_FORMAT) THEN
	   IF (I.GT.NROWS-NUM_FIELD) THEN
	      WRITE (OUT_STR, TEXT_FORMAT(:TEXT_FORMAT_LEN))
     &	            (LNULL_SUBST(LCOL(J)), J = I, NROWS)
	   ELSE
	      WRITE (OUT_STR, TEXT_FORMAT(:TEXT_FORMAT_LEN))
     &	            (LNULL_SUBST(LCOL(J)), J = I, I-1+NUM_FIELD)
	   ENDIF
	ELSE
	   IF (I.GT.NROWS-NUM_FIELD) THEN
	      WRITE (OUT_STR, '(6I12)') 		! Use 12 for LONG NULL
     &        (LNULL_SUBST(LCOL(J)), J = I, NROWS)
	   ELSE
	      WRITE (OUT_STR, '(6I12)') 
     &        (LNULL_SUBST(LCOL(J)), J = I, I-1+NUM_FIELD)
	   ENDIF
	ENDIF
	GOTO 4
C
C ..................................................................
C Real data
C
40	IF (HAD_NINT) THEN
	   IF (HAD_FORMAT) THEN
	      IF (I.GT.NROWS-NUM_FIELD) THEN
	         WRITE (OUT_STR, TEXT_FORMAT(:TEXT_FORMAT_LEN))
     &	               (NINT(RNULL_SUBST(RCOL(J))), J = I, NROWS)
	      ELSE
	         WRITE (OUT_STR, TEXT_FORMAT(:TEXT_FORMAT_LEN))
     &	              (NINT(RNULL_SUBST(RCOL(J))), J = I, I-1+NUM_FIELD)
	      ENDIF
	   ELSE
	      IF (I.GT.NROWS-NUM_FIELD) THEN
	         WRITE (OUT_STR, '(8I10)') 
     &           (NINT(RNULL_SUBST(RCOL(J))), J = I, NROWS)
	      ELSE
	         WRITE (OUT_STR, '(8I10)') 
     &		 (NINT(RNULL_SUBST(RCOL(J))), J = I, I-1+NUM_FIELD)
	      ENDIF
	   ENDIF
C
C No rounding required
C
	ELSE
	   IF (HAD_FORMAT) THEN
	      IF (I.GT.NROWS-NUM_FIELD) THEN
	         WRITE (OUT_STR, TEXT_FORMAT(:TEXT_FORMAT_LEN))
     &	               (RNULL_SUBST(RCOL(J)), J = I, NROWS)
	      ELSE
	         WRITE (OUT_STR, TEXT_FORMAT(:TEXT_FORMAT_LEN))
     &	               (RNULL_SUBST(RCOL(J)), J = I, I-1+NUM_FIELD)
	      ENDIF
	   ELSE
	      IF (I.GT.NROWS-NUM_FIELD) THEN
	         WRITE (OUT_STR, '(8F10.3)') 
     &           (RNULL_SUBST(RCOL(J)), J = I, NROWS)
	      ELSE
	         WRITE (OUT_STR, '(8F10.3)') 
     &		 (RNULL_SUBST(RCOL(J)), J = I, I-1+NUM_FIELD)
	      ENDIF
	   ENDIF
	ENDIF
	GOTO 4
C
C ..................................................................
C Bit data
C
50	IF (HAD_FORMAT) THEN
	   IF (I.GT.NROWS-NUM_FIELD) THEN
	      WRITE (OUT_STR, TEXT_FORMAT(:TEXT_FORMAT_LEN))
     &	            (BIT_COL(J), J = I, NROWS)
	   ELSE
	      WRITE (OUT_STR, TEXT_FORMAT(:TEXT_FORMAT_LEN))
     &	            (BIT_COL(J), J = I, I-1+NUM_FIELD)
	   ENDIF
	ELSE
	   IF (I.GT.NROWS-NUM_FIELD) THEN
	      WRITE (OUT_STR, '(40I2)') (BIT_COL(J), J = I, NROWS)
	   ELSE
	      WRITE (OUT_STR, '(40I2)') (BIT_COL(J), J = I, 
     &						I-1+NUM_FIELD)
	   ENDIF
	ENDIF
	GOTO 4
C
C ..................................................................
C Deal with errors
C
60	TEXT_OUTPUT = .FALSE.
C
C Exit
C
70	RETURN
	END
