C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-08-08 17:04:58.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION FORMAT_CMD()
C
***	MODULE FORMAT_CMD
***	IDENT 08AU91
C
C	Copyright (c), Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Created					JMB 02-Dec-1987
C
C Function to set up output record format (text) as specified by
C the user.
C Default is (10F8.3)
C Returns .TRUE. for successful completion, .FALSE. if problems.
C
C
	IMPLICIT NONE
C
C Parameters :
	INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'
C
C Common blocks :
	INCLUDE 'LSL$CMNDTI2TEXT:CONTROL.CMN'
	INCLUDE 'LSL$CMNLSL:CMDCOM.CMN'
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'
	INCLUDE 'LSL$CMNDTI:DTIPAR.PAR'
	INCLUDE 'LSL$CMNDTI:DTIHDR.CMN'
C
C w/s
	BYTE		CH	! for use with RDCHS
	INTEGER		NCHS	! number of characters
	INTEGER		I,J	! count variables
	LOGICAL		OK,IERR	! error return code
C
C Functions
	LOGICAL		PARSE_FORMAT	! parse user defined format
C
	LOGICAL 	RDCHS	! read character from line
	INTEGER		TTRSTR	! read line from terminal
C
C .....................................................................
C
	FORMAT_CMD = .TRUE.	! assume succes
C
C Check if format given on the command line
C If not and  terminal input, output message and accept another input
C line otherwise, give error message, indirect file is wrong.
C
	IF (RDCHS(CH)) THEN	! check no format on command line
	   IF (TTIN) THEN       ! 
	      CALL WRITEF
	      IF (.NOT.HAD_FORMAT) THEN
	         CALL WRITEF('Current format is default')
	      ELSE
	         CALL WRITEF('Current format is %S',
     &				TEXT_FORMAT(:TEXT_FORMAT_LEN))
	      ENDIF
	      CALL EXPAND('Enter new format, or press <return> to')
	      CALL WRITAP(' invoke default (10F8.3 or 10I8).')
C
C get input from terminal to indicate format
C checking that it is read correctly
C
	      TXTPTR = 80
	      OK = TTRSTR( ,
     &			NCHS,
     &			'New format, eg 12F6.2 or 8I10 ? ', IERR)
	      IF (.NOT.OK) THEN
	         FORMAT_CMD = .FALSE.
	         CALL LSL_PUTMSG(OK)
	         CALL LSL_ADDMSG(IERR)
	         GOTO 999
	      ENDIF
C
C Check if want default
C
	      IF (NCHS.EQ.0) THEN
	         HAD_FORMAT = .FALSE.		! set default
C
		 IF (DTIOPN .AND. DATA_TYPE(DTILUN).EQ.DATA_LONG) THEN
	            NUM_FIELD = 6
	            SIZE_FIELD = 12
		    WIDTH_RECORD = 72
		 ELSEIF (DTIOPN .AND. DATA_TYPE(DTILUN).EQ.DATA_BIT) THEN
	            NUM_FIELD = 40
	            SIZE_FIELD = 2
		    WIDTH_RECORD = 80
		 ELSE
	            NUM_FIELD = 8
	            SIZE_FIELD = 10
		    WIDTH_RECORD = 80
		 ENDIF
	         DEC_PLACES = 3
C
	         GOTO 999			! return
C
C otherwise, accept run-time format (slower than using default)
C
	      ELSE
	         NCHS = NCHS - 1
	         IF (NCHS.LT.0) THEN		! error or ^Z
	            FORMAT_CMD = .FALSE.
	            CALL WRITEF('%S Error reading format', ERROR)
	         ENDIF
	   	 CALL BSLN			! reset to start of line
	      ENDIF
C
C input is from indirect file, but no format given on line
C
	   ELSE
	      FORMAT_CMD = .FALSE.
	      CALL WRITEF('%S Must specify format with format command',
     &				ERROR)
	      GOTO 999				! error
	   ENDIF
C
C format is included on same line as command, so set up pointers
C
	ELSE
	   CALL BSCH			! move back 1 to format's start
	   NCHS = TXTPTR - DCPTR	! number of chars in format
	ENDIF
C
C now DCPTR points to start of format
C and TXTPTR points to end
C with NCHS equal to number of characters in it.
C Now copy to TEXT_FORMAT and add brackets to each end
C
	J = 1
	DO 10 I = DCPTR, TXTPTR
	   J = J + 1
	   TEXT_FORMAT(J:J) = CHAR(TXTBUF(I))
10	CONTINUE
C
	TEXT_FORMAT(1:1) = '('
	TEXT_FORMAT(NCHS+3:NCHS+3) = ')'
	TEXT_FORMAT(NCHS+4:NCHS+4) = CHAR(0)
	TEXT_FORMAT_LEN = NCHS+3
C
C Call routine to parse format specification if there is one
C and set up variables desribing it.
C
	IF (.NOT.PARSE_FORMAT()) THEN
	   CALL WRITEF('%S Illegal user defined format %S, '// 
     &			'default format reinstated', 
     &			ERROR, TEXT_FORMAT(:TEXT_FORMAT_LEN))
	   FORMAT_CMD = .FALSE.
C
	   IF (DTIOPN .AND.DATA_TYPE(DTILUN).EQ.DATA_LONG) THEN
	      NUM_FIELD = 6
	      SIZE_FIELD = 12
	      WIDTH_RECORD = 72
	   ELSEIF (DTIOPN .AND. DATA_TYPE(DTILUN).EQ.DATA_BIT) THEN
	      NUM_FIELD = 40
	      SIZE_FIELD = 2
	      WIDTH_RECORD = 80
	   ELSE
	      NUM_FIELD = 8
	      SIZE_FIELD = 10
	      WIDTH_RECORD = 80
	   ENDIF
C
	   DEC_PLACES = 3
	   HAD_FORMAT = .FALSE.
	   GOTO 999
	ENDIF
C
C Show have set up format successfully
C
	HAD_FORMAT = .TRUE.
	FORMAT_CMD = .TRUE.
C
999	RETURN
	END
C
