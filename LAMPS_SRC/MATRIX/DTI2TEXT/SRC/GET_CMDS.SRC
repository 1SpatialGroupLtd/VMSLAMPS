C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-11-25 15:35:50.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION GET_CMDS()
C
***	MODULE	GET_CMDS
***	IDENT	25NO88
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Created					JMB	01-Dec-1987
C
C 
C 
	IMPLICIT NONE
C
C Parameters :
	INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'
	INCLUDE '($SSDEF)/NOLIST'
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'
C
C Common blocks :
	INCLUDE 'LSL$CMNDTI2TEXT:CONTROL.CMN'
 	INCLUDE 'LSL$CMNLSL:CMDCOM.CMN'
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'
	INCLUDE 'LSL$CMNDTI2TEXT:DTI2TEXTMSG.PAR'
C
C
C W/s:
	BYTE		CH	! for use with RDCHS
	INTEGER		CMD     ! decoded command number
	LOGICAL		OK	! function return
	INTEGER		IERR	! error code
C
C Define command tables:
	EXTERNAL	DTI2TEXT_CMD_TABLE
	INTEGER		DTI2TEXT_CMD_TABLE
C
C Functions:
	LOGICAL		CONVERT_CMD	! do conversion
	LOGICAL		DISABLE_CMD	! decode disable keywords
	LOGICAL		ENABLE_CMD	! decode enable keywords
	LOGICAL		FILEIN_CMD	! get input file-spec
	LOGICAL		FILEOUT_CMD	! get and open output files
	LOGICAL		FORMAT_CMD	! get output record format
	LOGICAL		NULL_CMD	! set null values
	LOGICAL		RETURN_CMD	! return from indirect input
	LOGICAL         SHOW_CMD	! show status
	LOGICAL		UNITS_CMD	! get units command
	LOGICAL		WAIT_CMD	! wait for specified time
	LOGICAL		WINDOW_CMD	! get WINDOW command args
	LOGICAL		HELP_CMD	! give help information
	LOGICAL		SPAWN_CMD	! DCL spawn command
C
	INTEGER		FLRCLO		! close file
	INTEGER         FLRSTR		! read record from file
	INTEGER         FLROPN		! open file for LSLLIB FILEO	
	LOGICAL		GETFILNAM	! read file-spec
	LOGICAL  	RDCHS		! read character from line
	LOGICAL  	RDCH		! read character from line
	LOGICAL 	RDCOMM  	! read command from line
	INTEGER		RDFILN		! reads and parses a filename
	INTEGER		TTRSTR  	! read line from terminal
C
C ......................................................................
C
C Get an input line from the terminal or the input file
C
10	TXTPTR=80
	IF (TTIN) THEN
	   OK=TTRSTR(,,'DTI2TEXT> ',IERR)
	ELSE
	   CALL FLRSEL(INDLUN)		! input file selected
	   OK=FLRSTR(,,IERR)
	ENDIF
C
C Check that input line read correctly
C
	IF (.NOT.OK) THEN
	   IF (OK.EQ.LSL__EOF) THEN
	      IF (TTIN) GOTO 220	! end of file = exit
	   ENDIF
	   CALL LSL_PUTMSG(OK)
	   CALL LSL_ADDMSG(IERR)
	   GOTO 20			! close indirect input
	ENDIF
C
C echo and decode the line
C
	IF (.NOT.TTIN) THEN
	   CALL EXPAND('DTI2TEXT> ')
	   CALL APPEND(TXTDSC)		! echo indirect input
	   CALL TTWSTR
	ENDIF
C
C Reset decoding pointer
C
	CALL BSLN
C
C Read first character. Look for comment or empty line
C
	IF (RDCHS(CH)) GOTO 10		! substantially empty line
	IF (CH.EQ.'!') GOTO 10		! comment!
C
C Look for indirect file start
C
	IF (TTIN) THEN
	   IF (CH.EQ.'@') THEN
	      IF (RDCHS(CH)) THEN	! substantially empty line
	         CALL WRITEF('%S "@" must precede a file-spec',WARNING)
	         GOTO 20
	      ELSE
	         CALL BSCH		! Move back to start of name
	      ENDIF
C
C Get indirect file name from command line
C
	      OK=GETFILNAM(INDFILE,INDLEN,
     &				'SYS$DISK:[].COM;0',.TRUE.,%REF('!'))
	      IF (.NOT.OK) THEN
	         CALL LSL_PUTMSG(OK)
	         CALL LSL_ADDMSG(IERR)
	         GOTO 20
	      ENDIF
C
C and open indirect file, informing user and checking for errors
C
	      OK=FLROPN(INDLUN, INDFILE(:INDLEN), IERR)
C
	      IF (OK) THEN
	         CALL WRITEF('Command input now being read from %S'
     &					,INDFILE(:INDLEN))
	         TTIN=.FALSE.		! not reading from terminal
	         GOTO 10		! start reading from file
	      ELSE
	         CALL WRITEF('%S Can''t open indirect command file %S'
     &			  ,WARNING,INDFILE(:INDLEN))
	         CALL LSL_PUTMSG(OK)
	         CALL LSL_ADDMSG(IERR)
	         GOTO 20
	      ENDIF
	   ENDIF			! CH .. @
	ENDIF
C
	CALL BSCH			! un-read non-'@'
C
C Now deal with first command, looking it up in table.
C
	CMD=RDCOMM(DTI2TEXT_CMD_TABLE)
	GOTO (	20,	! unrecognised
     &		30,	! convert 	
     &		40,	! enable		
     &		50,	! disable		
     &		60,	! format
     &		70,	! units		
     &		80,	! null
     &		130,	! show		
     &		140,	! filein		
     &		150,	! fileout		
     &		160,	! return		
     &		190,	! pause		
     &		200,	! wait		
     &		210,	! window
     &		215,	! help
     &		220,	! quit
     &		217	! spawn
     &	      		), CMD+1
C
C command number out of range
C
	CALL WRITEF('Command not yet implemented')
C
C close indirect input following disaster
C
20	IF (.NOT.TTIN) THEN
	   TTIN=.TRUE.
	   OK = FLRCLO(INDLUN, IERR)
	   IF (.NOT.OK) THEN
	      CALL WRITEF('%S closing indirect file %S',
     &			ERROR, INDFILE(:INDLEN))
	      CALL LSL_PUTMSG(D2T__CLIND)
	      CALL LSL_ADDMSG(OK)
	      CALL LSL_ADDMSG(IERR)
	   ENDIF
	   CALL WRITEF
	   CALL WRITEF('%S Indirect file error - returning to '//
     &			'terminal input',WARNING)
	ENDIF
	GOTO 10
C
C ......................................................................
C Convert : do the DTI to text conversion
C
30	IF (.NOT.CONVERT_CMD()) GOTO 20
	GOTO 10
C
C ......................................................................
C Enable 'sub-command'
C
40	IF (.NOT.ENABLE_CMD()) GOTO 20
	GOTO 10
C
C ......................................................................
C Disable 'sub-command'
C
50	IF (.NOT.DISABLE_CMD()) GOTO 20
	GOTO 10
C
C ......................................................................
C FORMAT
C
60	IF (.NOT.FORMAT_CMD()) GOTO 20
	GOTO 10
C
C ......................................................................
C UNITS
C
70	IF (.NOT.UNITS_CMD()) GOTO 20
	GOTO 10
C
C ......................................................................
C NULL
C
80	IF (.NOT.NULL_CMD()) GOTO 20
	GOTO 10
C
C ......................................................................
C SHOW
C
130	IF (.NOT.SHOW_CMD()) GOTO 20
	GOTO 10
C
C
C ......................................................................
C FILEIN [file-spec]
C
140	IF (.NOT.FILEIN_CMD()) GOTO 20
	GOTO 10
C
C ......................................................................
C FILEOUT [filespec]
C
150	IF (.NOT.FILEOUT_CMD()) GOTO 20
	GOTO 10
C
C ......................................................................
C RETURN - return to terminal input
C
160	IF (TTIN) THEN
	   CALL EXPAND('RETURN command ignored - ')
	   CALL WRITAP('input is already from terminal.')
	ELSE
	   CALL EXPAND('RETURN command detected ') 
	   CALL WRITAP('- returning to terminal input')
	ENDIF
	IF (.NOT.TTIN) THEN
	   OK = FLRCLO(INDLUN, IERR)
	   IF (.NOT.OK) THEN
	      CALL WRITEF('%S closing indirect file %S',
     &			ERROR, INDFILE(:INDLEN))
	      CALL LSL_PUTMSG(OK)
	      CALL LSL_ADDMSG(IERR)
	   ENDIF
	ENDIF
	TTIN = .TRUE.
	GOTO 10
C
C ......................................................................
C PAUSE
C
190	CALL PAUSE(TTIN)
	GOTO 10
C
C ......................................................................
C WAIT
C
200	IF (.NOT.WAIT_CMD(TTIN)) GOTO 20
	GOTO 10
C
C ......................................................................
C WINDOW
C
210	IF (.NOT.WINDOW_CMD()) GOTO 20
	GOTO 10
C
C ......................................................................
C HELP
C
215	IF (.NOT.HELP_CMD()) GOTO 20
	GOTO 10
C
C ......................................................................
C SPAWN
C
217	IF (.NOT.SPAWN_CMD()) GOTO 20
	GOTO 10
C
C ......................................................................
C QUIT
C
220	GET_CMDS=SS$_NORMAL
C
230	IF (TXTOPN) CALL FLWDEL(TXTLUN)
	IF (DTIOPN) CALL DTI_CLOSE(DTILUN,.FALSE.,.TRUE.,IERR)
	RETURN
	END
