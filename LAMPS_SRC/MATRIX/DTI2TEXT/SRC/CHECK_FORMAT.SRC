	LOGICAL FUNCTION CHECK_FORMAT()
C
***	MODULE CHECK_FORMAT
***	IDENT	08AU91
C
C	Copyright (C), Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Created						JMB 02-Dec-1987
C
C Function to check if format specified is legal given range of
C data in specified DTI input file.
C i.e. to avoid output conversion errors etc.
C NB. Takes no account of NULL values in DTI file, and output conversion
C errors may result
C
C Function returns .TRUE. if all is well.
C
	IMPLICIT NONE
C
C Parameters :
	INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'
C
C Common block :
	INCLUDE 'LSL$CMNDTI:DTIHDR.CMN'
	INCLUDE 'LSL$CMNDTI:DTIPAR.PAR'
	INCLUDE	'LSL$CMNLSL:CMDCOM.CMN'
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'
	INCLUDE	'LSL$CMNDTI2TEXT:CONTROL.CMN'
C
C w/s
	INTEGER*2	MAXDIG		! Number of digits in dti max
	INTEGER*2	MINDIG		! Number of digits in dti min
C
C ......................................................................
C
	CHECK_FORMAT = .TRUE.		! assume success
C Word/byte data
C
	IF (DATA_TYPE(DTILUN).EQ.DATA_WORD .OR.
     &	    DATA_TYPE(DTILUN).EQ.DATA_BYTE) THEN
C
	   IF (MAX_WVALUE(DTILUN).EQ.0) THEN
	      MAXDIG = 1
	   ELSE
	      MAXDIG = INT(LOG10(FLOAT(ABS(MAX_WVALUE(DTILUN)))))+1
	   ENDIF
	   IF (MAX_WVALUE(DTILUN).LT.0) MAXDIG = MAXDIG + 1
C
	   IF (MIN_WVALUE(DTILUN).EQ.0) THEN
	      MINDIG = 1
	   ELSE
	      MINDIG = INT(LOG10(FLOAT(ABS(MIN_WVALUE(DTILUN)))))+1
	   ENDIF
	   IF (MIN_WVALUE(DTILUN).LT.0) MINDIG = MINDIG + 1
C
	   MAXDIG = MAX (MAXDIG, MINDIG)
C
C Long word data
C
	ELSEIF (DATA_TYPE(DTILUN).EQ.DATA_LONG) THEN
C
	   IF (MAX_LVALUE(DTILUN).EQ.0) THEN
	      MAXDIG = 1
	   ELSE
	      MAXDIG = INT(LOG10(FLOAT(ABS(MAX_LVALUE(DTILUN)))))+1
	   ENDIF
	   IF (MAX_LVALUE(DTILUN).LT.0) MAXDIG = MAXDIG + 1
C
	   IF (MIN_LVALUE(DTILUN).EQ.0) THEN
	      MINDIG = 1
	   ELSE
	      MINDIG = INT(LOG10(FLOAT(ABS(MIN_LVALUE(DTILUN)))))+1
	   ENDIF
	   IF (MIN_LVALUE(DTILUN).LT.0) MINDIG = MINDIG + 1
C
	   MAXDIG = MAX (MAXDIG, MINDIG)
C
C  Bit data
C
	ELSEIF (DATA_TYPE(DTILUN).EQ.DATA_BIT) THEN
	   MAXDIG = 1
C
C Real data
C
	ELSEIF (DATA_TYPE(DTILUN).EQ.DATA_REAL) THEN
C
	   IF (MAX_RVALUE(DTILUN).EQ.0) THEN
	      MAXDIG = 1
	   ELSE
	      MAXDIG = INT(LOG10(ABS(MAX_RVALUE(DTILUN))))+1
	   ENDIF
	   IF (MAX_RVALUE(DTILUN).LT.0) MAXDIG = MAXDIG + 1
C
	   IF (MIN_RVALUE(DTILUN).EQ.0) THEN
	      MINDIG = 1
	   ELSE
	      MINDIG = INT(LOG10(ABS(MIN_RVALUE(DTILUN))))+1
	   ENDIF
	   IF (MIN_RVALUE(DTILUN).LT.0) MINDIG = MINDIG + 1
C
	   MAXDIG = MAX (MAXDIG, MINDIG)
C
C Check if have appropriate format, taking into account
C possible rounding of output (NINT)
C adjust number of digits to allow for any decimal places or point
C
	   IF (.NOT.HAD_NINT) THEN
	      MAXDIG = MAXDIG + 1 + DEC_PLACES
C
	      IF (HAD_FORMAT.AND.(NUM_TYPE.NE.'F')) THEN
	         CALL WRITEF ('%S Require real format for real data',
     &				ERROR)
	         CHECK_FORMAT = .FALSE.
	         MAXDIG = 0
	      ENDIF
C
	   ELSE ! have had nint
	      IF (HAD_FORMAT.AND.(NUM_TYPE.NE.'I')) THEN
	         CALL WRITEF ('%S Require integer format for '//
     &				'rounded real data', ERROR)
	         CHECK_FORMAT = .FALSE.
	         MAXDIG = 0
	      ENDIF
	   ENDIF
	ENDIF
C
C Check any user defined format is appropriate if have integer data
C
	IF (HAD_FORMAT .AND. DATA_TYPE(DTILUN).NE.DATA_REAL) THEN
	   IF (NUM_TYPE.NE.'I') THEN
	      CALL WRITEF('%S Require integer format for integer data',
     &				ERROR)
	      CHECK_FORMAT = .FALSE.
	      MAXDIG = 0
	   ENDIF
	ENDIF
C
C MAXDIG now contains the maximum field width which could be encountered
C Add one for space
C
	MAXDIG = MAXDIG + 1
C
	IF (CHECK_FORMAT.AND.(MAXDIG.GT.SIZE_FIELD)) THEN
	   CALL WRITEF ('%S Text field format too narrow,'//
     &			' please redefine ', ERROR)
	   CHECK_FORMAT = .FALSE.
	ENDIF
C
C Exit
	RETURN
	END
C
