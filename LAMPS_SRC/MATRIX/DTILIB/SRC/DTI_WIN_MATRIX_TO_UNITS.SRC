	INTEGER*4 FUNCTION DTI_WIN_MATRIX_TO_UNITS(DTI_LUN, 
     &  X_MATRIX_SW,Y_MATRIX_SW, X_MATRIX_NE, Y_MATRIX_NE ,
     &  UNITS, ROTATION, 
     &  ABSOLUTE, X_OUT_SW, Y_OUT_SW,X_OUT_NE,Y_OUT_NE)
C
***	MODULE	DTI_WIN_MATRIX_TO_UNITS
***	IDENT	05AP89
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
CMOD	Don't switch coords for units_dti	MWSR	05-Apr-1989
CMOD	Add BADWINDOW return code		MWSR    17-Mar-1989
C 	Created					MWSR    03-Feb-1989
C
C converts DTI window matrix coordinates to required units 
C taking into account 
C whether supplied values are absolute or relative or whether the 
C file is rotated.
C routine relies on DTI_MATRIX_TO_UNITS to check the arguments
C
C----------------------------------------------------------------------
C
	IMPLICIT NONE
C
***	PARAMETER/LSL$CMNDTI:DTIPAR/
***	PARAMETER/LSL$CMNDTI:DTILIBMSG/
***	COMMON/LSL$CMNDTI:DTIHDR/
C
C arguments
	INTEGER*4	DTI_LUN	    	!IN - LUN on which DTI is open
	INTEGER*4	X_MATRIX_SW	!IN - x matrix sw
	INTEGER*4	Y_MATRIX_SW	!IN - y matrix sw
	INTEGER*4	X_MATRIX_NE	!IN - x matrix ne
	INTEGER*4	Y_MATRIX_NE	!IN - y matrix ne
	INTEGER*4	UNITS		!IN - What type of UNITS? 
	INTEGER*4	ROTATION	!IN - position of origin
	LOGICAL		ABSOLUTE	!IN - relative or absolute 
	REAL*8		X_OUT_SW	!OUT - x sw coordinate
	REAL*8		Y_OUT_SW	!OUT - y sw coordinate
	REAL*8		X_OUT_NE	!OUT - x ne coordinate
	REAL*8		Y_OUT_NE	!OUT - Y ne coordinate
C
C function
	INTEGER*4	DTI_MATRIX_TO_UNITS
	LOGICAL		HAVE_I_AN_ARG
C
C Local Variables
	REAL*8		TEMPX, TEMPY
	LOGICAL		HAD_ABSOLUTE
	INTEGER*4	ROTATE
C
C check for optional values
	IF(HAVE_I_AN_ARG(8))THEN
	  HAD_ABSOLUTE = ABSOLUTE
	ELSE
	  HAD_ABSOLUTE = .TRUE.	!by default add offset values
	ENDIF
C
	IF(.NOT.HAVE_I_AN_ARG(7))THEN
	  ROTATE = 0		!default no rotation
	ELSE
	  ROTATE = ROTATION
	ENDIF
C	
C test the values
	IF (X_MATRIX_SW .LT. 1 .OR.X_MATRIX_SW.GT.X_EXTENT(DTI_LUN).OR. 
     &     X_MATRIX_NE  .LT. 1 .OR.X_MATRIX_NE.GT.X_EXTENT(DTI_LUN).OR.
     &     Y_MATRIX_SW  .LT. 1 .OR.Y_MATRIX_SW.GT.Y_EXTENT(DTI_LUN).OR.
     &     Y_MATRIX_NE  .LT. 1 .OR. Y_MATRIX_NE .GT. Y_EXTENT(DTI_LUN))
     &     THEN
           DTI_WIN_MATRIX_TO_UNITS = DTI__BADWINDOW
	   GOTO 999
	ENDIF
C
C convert the corner values
	DTI_WIN_MATRIX_TO_UNITS = DTI_MATRIX_TO_UNITS
     &                            (DTI_LUN, 
     &  			  REAL(X_MATRIX_SW),
     &                            REAL(Y_MATRIX_SW), 
     &                            UNITS, ROTATE, HAD_ABSOLUTE, 
     &  			   X_OUT_SW, Y_OUT_SW)
	IF (.NOT. DTI_WIN_MATRIX_TO_UNITS) GOTO 999
C
	DTI_WIN_MATRIX_TO_UNITS = DTI_MATRIX_TO_UNITS
     &                            (DTI_LUN, 
     &  			  REAL(X_MATRIX_NE),
     &                            REAL(Y_MATRIX_NE), 
     &                            UNITS, ROTATE, HAD_ABSOLUTE, 
     &  			   X_OUT_NE, Y_OUT_NE)
	IF (.NOT. DTI_WIN_MATRIX_TO_UNITS) GOTO 999
C 
C
	IF (UNITS .EQ. UNITS_DTI) GOTO 999
C	
C switch around the values if rotated
	IF (ROTATE.EQ. 1) THEN
C
C north west
	   TEMPY = Y_OUT_NE
	   Y_OUT_NE = Y_OUT_SW
	   Y_OUT_SW = TEMPY 
C
	ELSEIF(ROTATE.EQ. 2) THEN
C
C north east
	   TEMPX = X_OUT_NE
	   TEMPY = Y_OUT_NE
	   X_OUT_NE = X_OUT_SW
	   Y_OUT_NE = Y_OUT_SW
	   X_OUT_SW = TEMPX
	   Y_OUT_SW = TEMPY
C
	ELSEIF(ROTATE.EQ. 3) THEN
C
C south east
	   TEMPX = X_OUT_NE
	   X_OUT_NE  =  X_OUT_SW
	   X_OUT_SW = TEMPX
	ENDIF
C
999	RETURN
	END
