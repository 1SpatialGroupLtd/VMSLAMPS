C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-05-04 18:12:20.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION DTI_UNITS_TO_MATRIX(DTI_LUN,X_VAL,Y_VAL,
     &		UNITS, ROTATION, ABSOLUTE, X_MATRIX, Y_MATRIX)
C
***	MODULE	DTI_UNITS_TO_MATRIX
***	IDENT	04MY94
C
C Copyright Laser-Scan Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C	AT PRESENT, NEVER USED IN DTILIB
C
C 	Created					MWSR    02-Feb-1989
C
CMOD1045					  JB	19-Sep-1991
C	 Take mod (2*PI) for LATINT etc.
C
CMOD1066					  JB	26-Nov-1991
C	 Calculate matrix values using a real LON/LATINT calculated from 
C	 LON/LATREC and X/Y_EXTENT, rather than using a possibly rounded 
C	 value
C
CMOD1361 					  JB	29-Apr-1994
C	 Fix mod(2PI) calculations
C
C Converts X Y coords in specified units to DTI matrix units 
C taking into account whether supplied values are absolute or 
C relative or whether the  file is rotated.
C
C----------------------------------------------------------------------
C
	IMPLICIT NONE
C
C parameters
***	PARAMETER/LSL$CMNDTI:DTIDEF/
***	PARAMETER/LSL$CMNDTI:DTIPAR/
***	PARAMETER/LSL$CMNDTI:DTILIBMSG/
C
***	COMMON/LSL$CMNDTI:DTIHDR/
***	COMMON/LSL$CMNDTI:DTIPROJ/
C
C arguments
	INTEGER*4	DTI_LUN	    	! IN - LUN on which DTI is open
	REAL*8		X_VAL		! IN - x coordinate
	REAL*8		Y_VAL		! IN - y coordinate
	INTEGER*4	UNITS		! IN - What type of UNITS
	INTEGER*4	ROTATION	! IN - position of origin
	LOGICAL		ABSOLUTE	! IN - relative or absolute 
	REAL*4		X_MATRIX	! OUT - x matrix position
	REAL*4		Y_MATRIX	! OUT - y matrix position
C
C function
	INTEGER*4	DTI_UNITS	! tests for valid units
	LOGICAL		HAVE_I_AN_ARG
C
C local Variables
	REAL		X_RELATIVE	! relative coords
	REAL		Y_RELATIVE
	LOGICAL		HAD_ABSOLUTE
	INTEGER*4	ROTATE
	INTEGER*4	I_MOD,I
	REAL*8		D_MOD,TEMP
	REAL*8		DLATINT,DLONINT
C
C ***************************************************************
C test if the supplied LUN number is valid
	IF (DTI_LUN.LT.1 .OR. DTI_LUN.GT.MAX_DTI) THEN
	  DTI_UNITS_TO_MATRIX = DTI__BADLUN	! LUN out of range
	  GOTO 999				! return
 	ENDIF
C
C test of the supplied LUN is in use
	IF (.NOT.DTILUN_INUSE(DTI_LUN)) THEN
	  DTI_UNITS_TO_MATRIX = DTI__LUNUNUSED	! no file opened on LUN
	  GOTO 999				! return
	ENDIF
C
C test if UNITS is valid
	IF (UNITS.NE.0 .AND.
     &      UNITS.NE.UNITS_DTI .AND.
     &      UNITS.NE.UNITS_MET .AND.
     &	    UNITS.NE.UNITS_SEC .AND.
     &	    UNITS.NE.UNITS_DEG .AND.
     &      UNITS.NE.UNITS_PROJ) THEN
	   DTI_UNITS_TO_MATRIX=DTI__BADUNITS	! unrecognised 
	   GOTO 999
	ENDIF
C
C test units against file
	DTI_UNITS_TO_MATRIX = DTI_UNITS(DTI_LUN,UNITS)
	IF (.NOT.DTI_UNITS_TO_MATRIX) GOTO 999	
C
	IF (HAVE_I_AN_ARG(6)) THEN
	  HAD_ABSOLUTE = ABSOLUTE
	ELSE
	  HAD_ABSOLUTE = .TRUE.		! by default add offset values
	ENDIF
C
	IF (.NOT.HAVE_I_AN_ARG(5)) THEN
	  ROTATE = 0			! default no rotation
	ELSE
	  ROTATE = ROTATION
	ENDIF
C
C check rotation argument
	IF (ROTATE .NE. DTI_ORDER_SW .AND.
     &      ROTATE .NE. DTI_ORDER_NW .AND.
     &      ROTATE .NE. DTI_ORDER_NE .AND.	
     &      ROTATE .NE. DTI_ORDER_SE) THEN
	   DTI_UNITS_TO_MATRIX = DTI__BADROTATION	! unrecognised 
	   GOTO 999
	ENDIF
C
C start real work here
C
C first remove origin offset if dealing in absolutes
	IF (HAD_ABSOLUTE) THEN
	   IF (UNITS .EQ. UNITS_MET) THEN
	      X_RELATIVE = X_VAL - X_OFFSET(DTI_LUN)
	      Y_RELATIVE = Y_VAL - Y_OFFSET(DTI_LUN)
C
	   ELSEIF (UNITS .EQ. UNITS_PROJ) THEN
	      X_RELATIVE = X_VAL - DTIPROJ_ORIGIN(1,DTI_LUN)
	      Y_RELATIVE = Y_VAL - DTIPROJ_ORIGIN(2,DTI_LUN)
C
	   ELSEIF (UNITS.EQ.UNITS_SEC .OR. UNITS.EQ.UNITS_DEG) THEN
C
C Take mod 2*PI
	      I_MOD = 360*3600*10
	      D_MOD = I_MOD
C
	      LONINT(DTI_LUN)   = MOD(LONINT(DTI_LUN),I_MOD)
	      LATINT(DTI_LUN)   = MOD(LATINT(DTI_LUN),I_MOD)
C
	      LONORI(DTI_LUN)   = MOD(LONORI(DTI_LUN),I_MOD)
	      LATORI(DTI_LUN)   = MOD(LATORI(DTI_LUN),I_MOD)
C
	      DO 5 I = 1,4
		LONREC(I,DTI_LUN) = MOD(LONREC(I,DTI_LUN),I_MOD)
		LATREC(I,DTI_LUN) = MOD(LATREC(I,DTI_LUN),I_MOD)
5	      CONTINUE
C
C Get real interval value
C
Cmod	      DLATINT = DBLE(LATREC(3,DTI_LUN)-LATORI(DTI_LUN)) /
C     &					DBLE(Y_EXTENT(DTI_LUN)-1)
Cmod	      DLATINT = DMOD(DLATINT, D_MOD)
C
Cmod	      DLONINT = DBLE(LONREC(3,DTI_LUN)-LONORI(DTI_LUN)) /
C     &					DBLE(X_EXTENT(DTI_LUN)-1)
Cmod	      DLONINT = DMOD(DLONINT, D_MOD)
C
	      TEMP = DMOD(X_VAL,D_MOD) - LONREC(1,DTI_LUN)
	      X_RELATIVE = DMOD(TEMP,D_MOD)
C
	      TEMP = DMOD(Y_VAL,D_MOD) - LATREC(1,DTI_LUN)
	      Y_RELATIVE = DMOD(TEMP,D_MOD)
C
	   ELSE
	      X_RELATIVE = X_VAL
	      Y_RELATIVE = Y_VAL
	   ENDIF
C
	ELSE
	   X_RELATIVE  = X_VAL
	   Y_RELATIVE  = Y_VAL
	ENDIF
C
C got the relative units - now work out DTI coords	
C branch according to units
	GOTO (100,200,300,300,500) UNITS
C 
C-----------------------------------------------------------------------
C matrix units - stupid so do very little
100	X_MATRIX = X_RELATIVE
	Y_MATRIX = Y_RELATIVE
	GOTO 600
C
C-----------------------------------------------------------------------
C metres
200	CONTINUE
C
C branch according to rotation
	GOTO (210,220,230,240) ROTATE+1 
C
C south west
210	X_MATRIX = X_RELATIVE/X_GRID(DTI_LUN)+1
	Y_MATRIX = Y_RELATIVE/Y_GRID(DTI_LUN)+1
	GOTO 600
C
C north west
220	X_MATRIX = X_EXTENT(DTI_LUN)-Y_RELATIVE/X_GRID(DTI_LUN)
	Y_MATRIX = X_RELATIVE/Y_GRID(DTI_LUN)+1
	GOTO 600
C
C north east
230	X_MATRIX = X_EXTENT(DTI_LUN)-X_RELATIVE/X_GRID(DTI_LUN)
	Y_MATRIX = Y_EXTENT(DTI_LUN)-Y_RELATIVE/Y_GRID(DTI_LUN)
	GOTO 600
C
C south east
240	X_MATRIX = Y_RELATIVE/X_GRID(DTI_LUN)+1
	Y_MATRIX = Y_EXTENT(DTI_LUN)-X_RELATIVE/Y_GRID(DTI_LUN)
	GOTO 600
C 
C-----------------------------------------------------------------------
C seconds (or deg min sec)
300	CONTINUE
C
C always absolute
	HAD_ABSOLUTE = .TRUE.
C
C branch according to rotation
	GOTO (310,320,330,340)ROTATE+1 
C
C south west
310	X_MATRIX = X_RELATIVE/LONINT(DTI_LUN) + 1
	Y_MATRIX = Y_RELATIVE/LATINT(DTI_LUN) + 1
	GOTO 600
C
C north west
320	X_MATRIX = X_EXTENT(DTI_LUN) - Y_RELATIVE/LONINT(DTI_LUN)
	Y_MATRIX = X_RELATIVE/LATINT(DTI_LUN) + 1
	GOTO 600
C
C north east
330	X_MATRIX = X_EXTENT(DTI_LUN) - X_RELATIVE/LONINT(DTI_LUN)
	Y_MATRIX = Y_EXTENT(DTI_LUN) - Y_RELATIVE/LATINT(DTI_LUN)
	GOTO 600
C
C south east
340	X_MATRIX = Y_RELATIVE/LONINT(DTI_LUN) + 1
	Y_MATRIX = Y_EXTENT(DTI_LUN) - X_RELATIVE/LATINT(DTI_LUN)
	GOTO 600
C
C-----------------------------------------------------------------------
C projection units
500	CONTINUE
C
C branch according to rotation
	GOTO (510,520,530,540) ROTATE+1 
C
C south west
510	X_MATRIX = X_RELATIVE/DTIPROJ_SAMPLE(1,DTI_LUN)+1
	Y_MATRIX = Y_RELATIVE/DTIPROJ_SAMPLE(2,DTI_LUN)+1
	GOTO 600
C
C north west
520	X_MATRIX = X_EXTENT(DTI_LUN) -
     &			Y_RELATIVE/DTIPROJ_SAMPLE(1,DTI_LUN)
	Y_MATRIX = X_RELATIVE/DTIPROJ_SAMPLE(2,DTI_LUN)+1
	GOTO 600
C
C north east
530	X_MATRIX = X_EXTENT(DTI_LUN) -
     &  		X_RELATIVE/DTIPROJ_SAMPLE(1,DTI_LUN)
	Y_MATRIX = Y_EXTENT(DTI_LUN) -
     &  		Y_RELATIVE/DTIPROJ_SAMPLE(2,DTI_LUN)
	GOTO 600
C
C south east
540	X_MATRIX = Y_RELATIVE/DTIPROJ_SAMPLE(1,DTI_LUN) + 1
	Y_MATRIX = Y_EXTENT(DTI_LUN) -
     &			X_RELATIVE/DTIPROJ_SAMPLE(2,DTI_LUN)
	GOTO 600
C
C-----------------------------------------------------------------------
C
600	DTI_UNITS_TO_MATRIX = DTI__NORMAL
C
999	RETURN
	END
C
