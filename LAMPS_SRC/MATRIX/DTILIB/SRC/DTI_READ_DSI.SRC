C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-05-04 15:16:44.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION DTI_READ_DSI ( DTI_LUN )
C
***	IDENT	04MY94
***	MODULE	DTI_READ_DSI
C
C	Copyright : Laser-Scan, Cambridge, England
C	Author    : D R Catlow
C	Created   : 02 December 1987
C
C	Modified  : DRC 03AU88 to replace DTI_DTED with DTI_TED4
C
C	DTILIB Function.   
C
C	Reads the DSI record contained in the header of a DTED type
C	DTI header, and extracts the latlong corner and origin values,
C	and latlong grid intervals.
C	The header details are transferred to the common block DTIHDR.
C
C	The function returns true if successful.
C	Any system error is returned in RETVAL.
C
C----------------------------------------------------------------------------
C
	IMPLICIT NONE
C
C parameters
***	PARAMETER/LSL$CMNDTI:DTIDEF/
***	PARAMETER/LSL$CMNDTI:DTIPAR/
***	PARAMETER/LSL$CMNDTI:DTILIBMSG/
C
***	COMMON/LSL$CMNDTI:DTIHDR/
C
C arguments
	INTEGER*4	DTI_LUN			! LUN on which to open file
C
C local
	INTEGER*4	ERROR			! DTI_READSI error code
C
C****************************************************************************
C Test if the supplied LUN number is valid
	IF (DTI_LUN.LT.1 .OR. DTI_LUN.GT.MAX_DTI) THEN
	  DTI_READ_DSI=DTI__BADLUN		! LUN out of range
	  GOTO 999				! return
	ENDIF
C
C Test of the supplied LUN is in use
	IF (.NOT.DTILUN_INUSE(DTI_LUN)) THEN
	  DTI_READ_DSI=DTI__LUNUNUSED		! no file opened on LUN
	  GOTO 999				! return
	ENDIF
C
C Test if the file is a DTED file
	IF (HEADER_TYPE(DTI_LUN).NE.DTI_TED4) THEN
	  DTI_READ_DSI=DTI__BADHEADER		! bad header
	  GOTO 999
	ENDIF
C
C--------------------------------------------------------------------------
C
	CALL DTI_READSI(DATA_OFFSET(DTI_LUN)-1, %VAL(SEC_ADDR(DTI_LUN)),
     &			DTI_LUN,ERROR)
C
C Check for any error
	IF (ERROR.NE.DTI__NORMAL) THEN
	  DTI_READ_DSI = ERROR
	ELSE
	  DTI_READ_DSI = DTI__NORMAL		! signal success
	ENDIF
C
999	RETURN
	END	   
C
C****************************************************************************
C
	SUBROUTINE DTI_READSI (HEADER_SIZE,HEADER_ARRAY,WHICH_DTI,IERR)
C
***	IDENT	22OC86
***	MODULE	DTI_READSI
C
C	Copyright : Laser-Scan, Cambridge, England
C	Author    : D R Catlow
C
CMOD1045	  : JB  19SE91 take mod 2*PI for LATINT etc. to avoid
C				later integer overflows
CMOD1148	  : JB  17SE92 do not allow LATINT/LONINT to be left as 0
C				for an unset DSI record
CMOD1361	  : JB  28AP94 remove various error lines
C
	IMPLICIT NONE
C
***	PARAMETER/LSL$CMNDTI:DTILIBMSG/
***	COMMON/LSL$CMNDTI:DTIHDR/
C
C arguments
	INTEGER*4	HEADER_SIZE	! size of header area
	BYTE		HEADER_ARRAY(0:HEADER_SIZE)
	INTEGER*4	WHICH_DTI	! which DTI file
	INTEGER*4	IERR		! error code
C
C function
	INTEGER*4	DTI_RDFANG	! reads an angle in 10ths secs.
	INTEGER*4	RDLONG		! reads a longword
C
C local
	REAL*8		TEMP
	REAL*8		D_MOD
	INTEGER*4	I_MOD
	INTEGER*4	I
	LOGICAL		UNSET
C
C***************************************************************************
C
	UNSET = .FALSE.				! assume header set
	CALL SETAUX(HEADER_ARRAY(421),98)
C
C Get origin
	IF (DTI_RDFANG(
     &		.FALSE.,.TRUE.,.TRUE., LATORI(WHICH_DTI))) GOTO 900
	IF (DTI_RDFANG(
     &		.TRUE., .TRUE.,.TRUE., LONORI(WHICH_DTI))) GOTO 900
C
C Get extents
	IF(DTI_RDFANG(
     &		.FALSE.,.FALSE.,.TRUE.,LATREC(1,WHICH_DTI))) GOTO 900
	IF(DTI_RDFANG(
     &		.TRUE. ,.FALSE.,.TRUE.,LONREC(1,WHICH_DTI))) GOTO 900
C
	IF(DTI_RDFANG(
     &		.FALSE.,.FALSE.,.TRUE.,LATREC(2,WHICH_DTI))) GOTO 900
	IF(DTI_RDFANG(
     &		.TRUE. ,.FALSE.,.TRUE.,LONREC(2,WHICH_DTI))) GOTO 900
C
	IF(DTI_RDFANG(
     &		.FALSE.,.FALSE.,.TRUE.,LATREC(3,WHICH_DTI))) GOTO 900
	IF(DTI_RDFANG(
     &		.TRUE. ,.FALSE.,.TRUE.,LONREC(3,WHICH_DTI))) GOTO 900
C
	IF(DTI_RDFANG(
     &		.FALSE.,.FALSE.,.TRUE.,LATREC(4,WHICH_DTI))) GOTO 900
	IF(DTI_RDFANG(
     &		.TRUE. ,.FALSE.,.TRUE.,LONREC(4,WHICH_DTI))) GOTO 900
C
C Get matrix intervals
	CALL SETWIN(89,4)
	IF (RDLONG(LATINT(WHICH_DTI))) GOTO 900
	CALL SETWIN(,4)
	IF (RDLONG(LONINT(WHICH_DTI))) GOTO 900
C
C Set some fundamental values if the TED4 DSI was unset, assuming that the
C values are in arcseconds/10
C
	IF (LATINT(WHICH_DTI).EQ.0) THEN
	   LATINT(WHICH_DTI) = Y_GRID(WHICH_DTI) 
	   UNSET = .TRUE.
	ENDIF
C
	IF (LONINT(WHICH_DTI).EQ.0) THEN
	   LONINT(WHICH_DTI) = X_GRID(WHICH_DTI) 
	   UNSET = .TRUE.
	ENDIF
C
C Take mod 2*PI = 360 degrees
C
	D_MOD = 360*60*60*10		! convert to arcsec/10
C
	IF (UNSET) THEN
	   LONREC(1,WHICH_DTI) = LONORI(WHICH_DTI) 
	   LATREC(1,WHICH_DTI) = LATORI(WHICH_DTI) 
C
	   IF (LATREC(1,WHICH_DTI) .EQ. LATREC(3,WHICH_DTI)) THEN
	     TEMP = LATORI(WHICH_DTI) +
     &		(Y_EXTENT(WHICH_DTI)-1) * LATINT(WHICH_DTI)
	     LATREC(3,WHICH_DTI) = DMOD(TEMP, D_MOD)
	     LATREC(2,WHICH_DTI) = LATREC(3,WHICH_DTI) 
	   ENDIF
C
	   IF (LONREC(1,WHICH_DTI) .EQ. LONREC(3,WHICH_DTI)) THEN
	     TEMP = LONORI(WHICH_DTI) + 
     &		(X_EXTENT(WHICH_DTI)-1) * LONINT(WHICH_DTI)
	     LONREC(3,WHICH_DTI) = DMOD(TEMP, D_MOD)
	     LONREC(4,WHICH_DTI) = LONREC(3,WHICH_DTI) 
	   ENDIF
C
	   LONREC(2,WHICH_DTI) = LONREC(1,WHICH_DTI) 
	   LATREC(4,WHICH_DTI) = LATREC(1,WHICH_DTI) 
	ENDIF
C
C Take mod 2*PI
	I_MOD = 360*60*60*10		! convert to arcsec/10
C
	LATINT(WHICH_DTI) = MOD(LATINT(WHICH_DTI),I_MOD)
	LONINT(WHICH_DTI) = MOD(LONINT(WHICH_DTI),I_MOD)
	LATORI(WHICH_DTI) = MOD(LATORI(WHICH_DTI),I_MOD)
	LONORI(WHICH_DTI) = MOD(LONORI(WHICH_DTI),I_MOD)
C
	DO 5 I = 1,4
	   LONREC(I,WHICH_DTI) = MOD(LONREC(I,WHICH_DTI),I_MOD)
	   LATREC(I,WHICH_DTI) = MOD(LATREC(I,WHICH_DTI),I_MOD)
5	CONTINUE
C
C Set up two offset values
C	X_OFFSET(WHICH_DTI)=LONREC(1,WHICH_DTI)
C	Y_OFFSET(WHICH_DTI)=LATREC(1,WHICH_DTI)
C
	IERR=DTI__NORMAL	! signal success 
	GOTO 999
C
C-------------------------------------------------------------------------
C
900	IERR=DTI__BADDSI
C
999	RETURN
	END
C
C*************************************************************************
C
	LOGICAL FUNCTION DTI_RDFANG( LARGE, TENTH, HEMI, RESULT )
C
***	IDENT	26JL85
***	MODULE	DTI_RDFANG
C
C	Copyright Laser-Scan Ltd., Cambridge, England
C
C 	Author TJ Ibbs, 22 March 1983
C
CMOD Lower case hemisphere letters added for DMASUM   TJH  26-Jul-1985
C Modified CC Brunt, 10 October 1983 (TENTH arg added)
C Modified CC Brunt, 27 October 1983 (HEMI arg added)
C
C To read a fixed format angle from TXTC the current text buffer
C returning TRUE if an error occurs, FALSE if it all works
C
C The different forms are:
C			[D]DDMMSS[.S][H]	where H is hemisphere
C
C if LARGE then 3 digit degrees, if TENTH then have TENTH seconds
C if HEMI then has a hemisphere letter
C
	IMPLICIT NONE
C
C parameters - hemisphere letters
	PARAMETER	POSN = 'N'	! upper case hemisphere letters
	PARAMETER	POSE = 'E'
	PARAMETER	NEGS = 'S'
	PARAMETER	NEGW = 'W'
	PARAMETER	POSNLC = 'n'	! lower case hemisphere letters
	PARAMETER	POSELC = 'e'
	PARAMETER	NEGSLC = 's'
	PARAMETER	NEGWLC = 'w'
C
C we call
	INTEGER*4	RDCH	! read a char, exact
	INTEGER*4	RDINT	! read a number (int*2)
	INTEGER*4	RDREAL	! read a real number
C
C we were passed
	LOGICAL		LARGE	! true if we have 3 digit degrees
	LOGICAL		TENTH	! true if decimal seconds
	LOGICAL		HEMI	! true if hemisphere letter
C
C and we return
	INTEGER*4	RESULT	! in tenths of a second
C
C and workspace
	INTEGER*4	ACCUM	! accumulate angle in here
	INTEGER*2	NUM	! a number
	INTEGER*4	NUMBER	! a bigger number
	REAL		RNUM	! a real number
	BYTE		CHAR	! a character
	INTEGER*2	DCP1,DCP2  ! decode pointer saves
	INTEGER*2	LENGTH	! expected no. of chars
C
	EQUIVALENCE	(NUM,NUMBER)
C
	DTI_RDFANG = .TRUE.	! be pessimistic
	NUMBER = 0		! make sure upper two bytes are zero
	CALL DCPSAV( DCP1 )	! decode pointer on entry
C
C deal with degrees first...
C
C the degrees field occupies the next 2 or 3 characters
C
C we want to concern ourselves with the next few characters alone, so
C we set a window from this position onwards
C
	IF (LARGE) THEN
	   CALL SETWIN( ,3 )		! 3 digits
	   LENGTH = 7
	ELSE
	   CALL SETWIN( , 2 )		! 2 digits
	   LENGTH = 6
	ENDIF
C
C and read the degrees
	IF (RDINT(NUM)) THEN
	   CALL EXPAND('*** Degrees field of angle blank/missing')
	   CALL WRITAP(' - angle abandoned')
	   GOTO 1999
	ENDIF
C
C and accumulate our result...
C
	ACCUM = NUMBER * 36000		! in tenths of a second
C
C we now want to deal with the next field - the minutes
C
	CALL SETWIN( ,2 )		! 2 digits
C
	IF (RDINT(NUM) ) THEN
	   CALL EXPAND('*** Minutes field of angle blank/missing')
	   CALL WRITAP(' - angle abandoned')
	   GOTO 1999
	ENDIF
C
C and accumulate...
C
	ACCUM = ACCUM + NUMBER*600	! in tenths of a second
C
C lastly (for numbers) we have the seconds field
C
	IF (TENTH) THEN
	   CALL SETWIN( ,4 )		! 4 characters
	   LENGTH = LENGTH + 2
	ELSE
	   CALL SETWIN( ,2 )		! 2 characters
	ENDIF
C
	IF (RDREAL(RNUM) ) THEN
	   CALL EXPAND('*** Seconds field of angle blank/missing')
	   CALL WRITAP(' - angle abandoned')
	   GOTO 1999
	ENDIF
C
C otherwise, accumulate this too
C
	ACCUM = ACCUM + (RNUM*10.0)	! again, tenths of a second
C
	CALL SETWIN( , )		! unset our window constraints
C
C Now check the decode pointer
C
	CALL DCPSAV( DCP2 )
	IF ( (DCP2-DCP1).NE.LENGTH ) THEN
	   CALL TTWSTR('*** Error reading angle - angle abandoned')
	   GOTO 1999
	ENDIF
C
	IF (HEMI) THEN
C
C now we must inspect what hemisphere the angle is in, to decide
C whether it should be positive or negative
C
	   IF (RDCH(CHAR)) THEN
	      CALL EXPAND('*** No hemisphere character found in angle')
	      CALL WRITAP(' (found ''%C'') - angle abandoned',CHAR)
	      GOTO 1999
	   ENDIF
C
C is it a negative type hemisphere, then?
C
	   IF ( CHAR.EQ.NEGS .OR. CHAR.EQ.NEGW 
     &			.AND.CHAR.NE.NEGSLC .AND. CHAR.NE.NEGWLC) THEN
	      ACCUM = -ACCUM		! was negative
C
	   ELSEIF (CHAR.NE.POSN .AND. CHAR.NE.POSE 
     &			.AND.CHAR.NE.POSNLC .AND. CHAR.NE.POSELC) THEN
	      CALL EXPAND('*** Unrecognised hemisphere letter in angle')
	      CALL WRITAP(' (letter ''%C'') - angle abandoned', CHAR)
	      GOTO 1999
	   ENDIF
C
	ENDIF
C
C so we have a sensible (?) angle - return it to the user
C
	RESULT = ACCUM
	DTI_RDFANG = .FALSE.
C
1999	RETURN
	END
C
