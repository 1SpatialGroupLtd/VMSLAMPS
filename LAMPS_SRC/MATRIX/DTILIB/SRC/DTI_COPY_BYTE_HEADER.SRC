C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-08-01 10:33:48.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION DTI_COPY_BYTE_HEADER 
     &                     ( DTI_LUN, BYTE_ARRAY, TO,
     &			     NUMBER_BYTES, BYTE_OFFSET,
     &			     RETVAL)
C
***	IDENT	01AU88
***	MODULE	DTI_COPY_BYTE_HEADER
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C	Author    : D R Catlow
C	Created   : 13 November 1986
C
C	Modified  : DRC 29JL88  To return an error if the supplied byte
C		    offset in combination with the number of bytes to
C		    copy would result in data partly being copied to
C		    or from the data area.
C
C	Modified  : DRC 01AU88 to check for write access if we
C	            are copying from the user array to the header area.
C
C	DTILIB Function.   
C
C	If TO is true, copies contents of BYTE_ARRAY to the DTI header 
C	at postion BYTE_OFFSET.
C	If TO is false, transfers part of the DTI byte header to
C	to BYTE_ARRAY.
C
C	The function returns true if successful.
C	Any system error is returned in RETVAL.
C
C------------------------------------------------------------------------
C
	IMPLICIT NONE
C
C parameters
	INCLUDE '($SSDEF)'
C
***	PARAMETER/LSL$CMNDTI:DTIDEF/
***	PARAMETER/LSL$CMNDTI:DTIPAR/
***	PARAMETER/LSL$CMNDTI:DTILIBMSG/
C
***	COMMON/LSL$CMNDTI:DTIHDR/
C
C arguments
	INTEGER*4		NUMBER_BYTES	!length of BYTE_ARRAY
	BYTE			BYTE_ARRAY(NUMBER_BYTES)!user array
	INTEGER*4		BYTE_OFFSET	!Offset in header
	LOGICAL			TO		!If .t. transfer from
C						!user array to header
	INTEGER*4		DTI_LUN		!which DTI file?
	INTEGER*4		RETVAL		!error return code
C
C  local
	INTEGER*4		ERROR		!system error code
C
C****************************************************************************
C
C	Test if the supplied LUN number is valid
	IF(DTI_LUN.LT.1.OR.DTI_LUN.GT.MAX_DTI)THEN
	  DTI_COPY_BYTE_HEADER=DTI__BADLUN		!LUN out of range
	  GOTO 999					!Return
	ENDIF
C
C	Test of the supplied LUN is in use
	IF(.NOT.DTILUN_INUSE(DTI_LUN))THEN
	  DTI_COPY_BYTE_HEADER=DTI__LUNUNUSED		!LUN not in use
	  GOTO 999					!Return
	ENDIF
C
C	Test for write access if we are copying from the byte
C	array to the header area
	IF(TO.AND.READ_ONLY(DTI_LUN))THEN
	  DTI_COPY_BYTE_HEADER=DTI__READONLY		!read only access
	  GOTO 999
	ENDIF
C
C	Test if the supplied byte offset lies within the header area
	IF(BYTE_OFFSET.LT.0.OR.
     &     BYTE_OFFSET.GT.DATA_OFFSET(DTI_LUN)-NUMBER_BYTES)THEN
	  DTI_COPY_BYTE_HEADER=DTI__BADHEADOFF		!Bad data offset
	  GOTO 999					!Return
	ENDIF
C
C----------------------------------------------------------------------------
C
	IF( TO )THEN		!copy to header area
	  CALL COPY_BH_TO   (DATA_OFFSET(DTI_LUN)-1,
     &		             %VAL(SEC_ADDR(DTI_LUN)),
     &			     BYTE_ARRAY,
     &			     NUMBER_BYTES,
     &			     BYTE_OFFSET,ERROR)
C
	  IF(ERROR.NE.SS$_NORMAL)THEN
	    DTI_COPY_BYTE_HEADER=DTI__SYSERR
	    RETVAL=ERROR
	    GOTO 999
	  ENDIF
C
	ELSE			!copy from header area
	  CALL COPY_BH_FROM (DATA_OFFSET(DTI_LUN)-1,
     &		             %VAL(SEC_ADDR(DTI_LUN)),
     &			     BYTE_ARRAY,
     &			     NUMBER_BYTES,
     &			     BYTE_OFFSET,ERROR)
	  IF(ERROR.NE.SS$_NORMAL)THEN
	    DTI_COPY_BYTE_HEADER=DTI__SYSERR
	    RETVAL=ERROR
	    GOTO 999
	  ENDIF
C
	ENDIF
C
C---------------------------------------------------------------------------
C
	DTI_COPY_BYTE_HEADER=DTI__NORMAL
C
999	RETURN
C
	END
C
C****************************************************************************
C
	SUBROUTINE COPY_BH_TO
     &  (HEADER_SIZE,HEADER_ARRAY,USER_ARRAY,ARRAY_SIZE,B_OFF,ERROR)
C
***	IDENT	04NO86
***	MODULE	COPY_BH_TO
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C	Author    : D R Catlow
C
C	Subroutine for DTI_COPY_BYTE_HEADER to transfer bytes
C	from user array to DTI data area.
C
	IMPLICIT NONE
C
C arguments
	INTEGER*4	HEADER_SIZE		!Size of header
	BYTE		HEADER_ARRAY(0:HEADER_SIZE)!Byte header
	INTEGER*4	ARRAY_SIZE		!Size of user array (ie.
C						!number of bytes to transfer)
	BYTE		USER_ARRAY(ARRAY_SIZE)
	INTEGER*4	B_OFF			!Byte offset in header
	INTEGER*4	ERROR			!return error code
C
C function
	INTEGER*4	VIOMV3			!transfer bytes
C---------------------------------------------------------------------------
C
	ERROR = VIOMV3(USER_ARRAY,ARRAY_SIZE,HEADER_ARRAY(B_OFF))
C	
999	RETURN
C
	END
C
C****************************************************************************
C
	SUBROUTINE COPY_BH_FROM
     &  (HEADER_SIZE,HEADER_ARRAY,USER_ARRAY,ARRAY_SIZE,B_OFF,ERROR)
C
***	IDENT	04NO86
***	MODULE	COPY_BH_FROM
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C	Author    : D R Catlow
C
	IMPLICIT NONE
C
C arguments
	INTEGER*4	HEADER_SIZE		!Size of header
	BYTE		HEADER_ARRAY(0:HEADER_SIZE)!Byte header
	INTEGER*4	ARRAY_SIZE		!Size of user array (ie.
C						!number of bytes to transfer)
	BYTE		USER_ARRAY(ARRAY_SIZE)
	INTEGER*4	B_OFF			!Byte offset in header
	INTEGER*4	ERROR			!return error code
C
C function
	INTEGER*4	VIOMV3			!transfer bytes
C---------------------------------------------------------------------------
C
	ERROR = VIOMV3(HEADER_ARRAY(B_OFF),ARRAY_SIZE,USER_ARRAY)
C	
999	RETURN
C
	END
