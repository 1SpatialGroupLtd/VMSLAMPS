	INTEGER*4 FUNCTION DTI_READ_REAL_DATA
     &                     (DTI_LUN, REAL_READ, X_POSN ,Y_POSN )
C
***	IDENT	17JL91
***	MODULE	DTI_READ_REAL_DATA
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C	Author    : D R Catlow
C
C	DTILIB Function.   
C
C	Reads a real value from the DTI data area at position 
C	X_POSN,Y_POSN
C
C	The function returns true if successful.
C
C---------------------------------------------------------------------------
C
	IMPLICIT NONE
C
C parameters
	INCLUDE '($SSDEF)'
C
***	PARAMETER/LSL$CMNDTI:DTIDEF/
***	PARAMETER/LSL$CMNDTI:DTIPAR/
***	PARAMETER/LSL$CMNDTI:DTILIBMSG/
C
***	COMMON/LSL$CMNDTI:DTIHDR/
C
C arguments
	REAL			REAL_READ	!Value of real
	INTEGER*4		DTI_LUN		!which DTI file?
	INTEGER*4		X_POSN		!Column value
	INTEGER*4		Y_POSN		!Row value
C
C****************************************************************************
C
C	Test if the supplied LUN number is valid
	IF(DTI_LUN.LT.1.OR.DTI_LUN.GT.MAX_DTI)THEN
	  DTI_READ_REAL_DATA=DTI__BADLUN		!LUN out of range
	  GOTO 999					!Return
	ENDIF
C
C	Test if the supplied LUN is in use
	IF(.NOT.DTILUN_INUSE(DTI_LUN))THEN
	  DTI_READ_REAL_DATA=DTI__LUNUNUSED		!LUN not in use
	  GOTO 999					!Return
	ENDIF
C
C	Test if the file is set up to receive real data
	IF(DATA_TYPE(DTI_LUN).NE.DATA_REAL)THEN
	  DTI_READ_REAL_DATA=DTI__DATAMISMATCH		!Data type mismatch
	  GOTO 999
	ENDIF
C
C	Test if the supplied x and y positions are within the data area
	IF(X_POSN.LE.0.OR.X_POSN.GT.X_EXTENT(DTI_LUN).OR.
     &	   Y_POSN.LE.0.OR.Y_POSN.GT.Y_EXTENT(DTI_LUN))THEN
	  DTI_READ_REAL_DATA=DTI__BADDATAPOS		!Bad data position
	  GOTO 999					!Return
	ENDIF
C
C----------------------------------------------------------------------------
C	O.K. now write the value of the word
	CALL DTI_RR_DATA (%VAL(SEC_ADDR(DTI_LUN)+DATA_OFFSET(DTI_LUN)),
     & 		          X_POSN,Y_POSN,REAL_READ,DTI_LUN)
C
	DTI_READ_REAL_DATA=DTI__NORMAL	!Signal success
C
999	RETURN
C
	END
C
C****************************************************************************
C
	SUBROUTINE DTI_RR_DATA
     &  (DATA_ARRAY,COL_POSN,ROW_POSN,VALUE,WHICH_DTI)
C
***	IDENT	13OC86
***	MODULE	DTI_RR_DATA
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C	Author    : D R Catlow
C	Mod	  : PGH/JB	Redefine DATA_ARRAY
C
	IMPLICIT NONE
C
***	COMMON/LSL$CMNDTI:DTIHDR/
C
C arguments
	INTEGER*4	WHICH_DTI		!which DTI file
CCC	REAL		DATA_ARRAY(Y_EXTENT(WHICH_DTI),!data array
CCC  &				   X_EXTENT(WHICH_DTI))
C
	REAL		DATA_ARRAY(*)
C Above declaration used to work, but violates the Fortran standard,
C in that an array bound expression may not refer to another array!
C The compiler now objects, so change to assumed size array (*).
C
	INTEGER*4	N
	INTEGER*4	MAX_Y,MAX_X
	INTEGER*4	COL_POSN		!x coordinate
	INTEGER*4	ROW_POSN		!y coordinate
	REAL		VALUE			!word value
C
C---------------------------------------------------------------------------
	MAX_Y = Y_EXTENT(WHICH_DTI)
C	MAX_X = X_EXTENT(WHICH_DTI)
C
C Transfer value - very easy
C	VALUE=DATA_ARRAY(ROW_POSN,COL_POSN)
C
	N = MAX_Y*(COL_POSN-1) + ROW_POSN
	VALUE=DATA_ARRAY(N)
C
	RETURN
	END
C
