C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-07-18 16:53:24.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION DTI_INIT_BYTE_DATA
     &                     ( DTI_LUN, 
     &			     INIT_VALUE, 
     &			     X_POSN, Y_POSN, 
     &			     X_NUMBER ,Y_NUMBER)
C
***	IDENT	18JL91
***	MODULE	DTI_INIT_BYTE_DATA
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C	Author    : D R Catlow
C	Created   : 23 February 1987
C
C	Modified  : DRC 01AU88 to check for write access to the
C	            file opened on DTI_LUN
C
C	DTILIB Function.   
C
C	Initialises the whole or part of the DTI data area 
C	to the given byte value
C
C	If X_POSN, Y_POSN, X_NUMBER and Y_NUMBER arguments are
C	missing, the whole of the data area is initialised.
C	Otherwise X_POSN and Y_POSN represent the start position,
C	and X_NUMBER and Y_NUMBER the number of columns and
C	rows to intialise.
C
C	The function returns true if successful.
C
C-----------------------------------------------------------------------
C
	IMPLICIT NONE
C
C parameters
	INCLUDE '($SSDEF)'
C
***	PARAMETER/LSL$CMNDTI:DTIDEF/
***	PARAMETER/LSL$CMNDTI:DTIPAR/
***	PARAMETER/LSL$CMNDTI:DTILIBMSG/
C
***	COMMON/LSL$CMNDTI:DTIHDR/
C
C arguments
	INTEGER*4		DTI_LUN		!which DTI file?
	INTEGER*4		X_POSN		!start column value
	INTEGER*4		Y_POSN		!start row value
	INTEGER*4		X_NUMBER	!number of columns
	INTEGER*4		Y_NUMBER	!number of rows
	BYTE			INIT_VALUE	!value to write
C
C local
	INTEGER*4		X,Y,I		!counters
	INTEGER*4		ERROR		!system error return code
	INTEGER*4		NUMBER_BYTES	!number of bytes to clear
	LOGICAL			WHOLE		!set to true if we need
C						!to init whole data area
C functions
C
	LOGICAL			HAVE_I_AN_ARG	!test for presence of argument
C
C****************************************************************************
C
C	Test if the supplied LUN number is valid
	IF(DTI_LUN.LT.1.OR.DTI_LUN.GT.MAX_DTI)THEN
	  DTI_INIT_BYTE_DATA=DTI__BADLUN		!LUN out of range
	  GOTO 999					!Return
	ENDIF
C
C	Test if the supplied LUN is in use
	IF(.NOT.DTILUN_INUSE(DTI_LUN))THEN
	  DTI_INIT_BYTE_DATA=DTI__LUNUNUSED		!LUN not in use
	  GOTO 999					!Return
	ENDIF
C
C	Test for write access to the file
	IF(READ_ONLY(DTI_LUN))THEN
	  DTI_INIT_BYTE_DATA=DTI__READONLY		!read only access
	  GOTO 999
	ENDIF
C
C	Test if the file is set up to contain byte data
	IF(DATA_TYPE(DTI_LUN).NE.DATA_BYTE)THEN
	  DTI_INIT_BYTE_DATA=DTI__DATAMISMATCH		!Data type mismatch
	  GOTO 999
	ENDIF
C
C----------------------------------------------------------------------------
C
C	Do we have a third argument?
	IF(HAVE_I_AN_ARG(3))THEN
C	Test that the remaining 3 optional arguments are present
	   DO 100 I=4,6
	      IF(.NOT.HAVE_I_AN_ARG(I))THEN
	        DTI_INIT_BYTE_DATA=DTI__MISSARGS	!Missing argument
	        GOTO 999
	      ENDIF			! OK. all arguments present
100	   CONTINUE
C
C	Test if the supplied x and y positions are within the data area
	   IF(X_POSN.LE.0.OR.X_POSN.GT.X_EXTENT(DTI_LUN).OR.
     &	      Y_POSN.LE.0.OR.Y_POSN.GT.Y_EXTENT(DTI_LUN))THEN
	      DTI_INIT_BYTE_DATA=DTI__BADDATAPOS	!Bad data position
	      GOTO 999					!Return
	   ENDIF
C
C	Test the data extents - is the specified area inside the data area?
	   IF(X_POSN+X_NUMBER-1.GT.X_EXTENT(DTI_LUN).OR.
     &	      Y_POSN+Y_NUMBER-1.GT.Y_EXTENT(DTI_LUN))THEN
	     DTI_INIT_BYTE_DATA=DTI__BADDATAEXT		!Bad data extents
	     GOTO 999					!Return
	   ENDIF
	   WHOLE=.FALSE.	!initialise only part of the data area
	ELSE
	   WHOLE=.TRUE.		!initialise the whole of the data area
	ENDIF
C
C--------------------------------------------------------------------------
C
C	Initialise the whole of the data area
C	This involves just one call to INIT_B
C
	IF(WHOLE)THEN
C	Calculate number of bytes to set
	   NUMBER_BYTES=X_EXTENT(DTI_LUN)*Y_EXTENT(DTI_LUN)
C
	   CALL INIT_B (%VAL(SEC_ADDR(DTI_LUN)+DATA_OFFSET(DTI_LUN)), 
     & 		        INIT_VALUE,1,1,NUMBER_BYTES,DTI_LUN,ERROR)
C
C	   Check for any error 
	   IF(ERROR.NE.SS$_NORMAL)THEN
	     DTI_INIT_BYTE_DATA=DTI__SYSERR
	     GOTO 999
	   ENDIF
C
	   DTI_INIT_BYTE_DATA=DTI__NORMAL	!Signal success
	   GOTO 999
	ENDIF
C
C----------------------------------------------------------------------------
C
C	Initialise on a column by column basis
	NUMBER_BYTES=Y_NUMBER	!Number of bytes to initialise each time
	Y=Y_POSN
C
	DO 300 X=X_POSN,(X_POSN+X_NUMBER)-1
C
	   CALL INIT_B (%VAL(SEC_ADDR(DTI_LUN)+DATA_OFFSET(DTI_LUN)), 
     & 		        INIT_VALUE,X,Y,NUMBER_BYTES,DTI_LUN,ERROR)
C
C	   Check for any error 
	   IF(ERROR.NE.SS$_NORMAL)THEN
	     DTI_INIT_BYTE_DATA=DTI__SYSERR
	     GOTO 999
	   ENDIF
C
300	CONTINUE
C
	DTI_INIT_BYTE_DATA=DTI__NORMAL	!Signal success
C
C----------------------------------------------------------------------------
C
999	RETURN
C
	END
C
C****************************************************************************
C
	SUBROUTINE INIT_B
     &	(DATA_ARRAY,INIT_VAL,COL_POS,ROW_POS,NUM_BYTES,WHICH_DTI,ERROR)
C
***	IDENT	13OC86
***	MODULE	INIT_B
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C	Author    : D R Catlow
C	Mod	  : PGH/JB	Redefine DATA_ARRAY
C
C	Subroutine for DTI_INIT_BYTE_DATA to initialise NUM_BYTES.
C	VIOCLR is called to do this.
C
C-----------------------------------------------------------------------
C
	IMPLICIT NONE
C
***	COMMON/LSL$CMNDTI:DTIHDR/
C
C arguments
	INTEGER*4	WHICH_DTI		!which DTI file
CCC	BYTE		DATA_ARRAY(Y_EXTENT(WHICH_DTI),!data array
CCC  &				   X_EXTENT(WHICH_DTI))
C
	BYTE		DATA_ARRAY(*)
C
	BYTE		INIT_VAL		!value to write 
	INTEGER*4	COL_POS			!column value
	INTEGER*4	ROW_POS			!row value
	INTEGER*4	NUM_BYTES		!number of words to copy
	INTEGER*4	ARRAY_SIZE		!size of destination array
	INTEGER*4	ERROR			!VIOCLR return code
C
C function
	INTEGER*4	VIOCLR		!set bytes to a specific value
C
C local
	INTEGER*4	N
	INTEGER*4	MAX_Y,MAX_X
C
C---------------------------------------------------------------------------
	MAX_Y = Y_EXTENT(WHICH_DTI)
C	MAX_X = X_EXTENT(WHICH_DTI)
C
C	ERROR=VIOCLR(DATA_ARRAY(ROW_POS,COL_POS),
C    &               NUM_BYTES,INIT_VAL)
C
	N = MAX_Y*(COL_POS-1) + ROW_POS
	ERROR=VIOCLR(DATA_ARRAY(N),
     &               NUM_BYTES,INIT_VAL)
C	
999	RETURN
	END
C
