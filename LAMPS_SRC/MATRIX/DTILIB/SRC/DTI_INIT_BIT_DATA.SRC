C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-07-18 16:58:26.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION DTI_INIT_BIT_DATA
     &                     ( DTI_LUN, 
     &			     INIT_VALUE, 
     &			     X_POSN, Y_POSN, 
     &			     X_NUMBER ,Y_NUMBER)
C
***	IDENT	18JL91
***	MODULE	DTI_INIT_BIT_DATA
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C	Author    : D R Catlow
C	Created   : 7 April 1987
C
C	Modified  : DRC 01AU88 to check for write access to the
C	            file opened on DTI_LUN
C
C	DTILIB Function.   
C
C	Initialises the whole or part of the DTI data area 
C	to the given bit value
C
C	If X_POSN, Y_POSN, X_NUMBER and Y_NUMBER arguments are
C	missing, the whole of the data area is initialised.
C	Otherwise X_POSN and Y_POSN represent the start position,
C	and X_NUMBER and Y_NUMBER the number of columns and
C	rows to intialise.
C
C	The function returns true if successful.
C
C------------------------------------------------------------------------
C
	IMPLICIT NONE
C
C parameters
	INCLUDE '($SSDEF)'
C
***	PARAMETER/LSL$CMNDTI:DTIDEF/
***	PARAMETER/LSL$CMNDTI:DTIPAR/
***	PARAMETER/LSL$CMNDTI:DTILIBMSG/
C
***	COMMON/LSL$CMNDTI:DTIHDR/
C
C arguments
	BYTE			INIT_VALUE	!value to write
	INTEGER*4		X_POSN		!start column value
	INTEGER*4		Y_POSN		!start row value
	INTEGER*4		X_NUMBER	!number of columns
	INTEGER*4		Y_NUMBER	!number of rows
	INTEGER*4		DTI_LUN		!which DTI file?
C
C local
	INTEGER*4		I		!counter
	INTEGER*4		STARTX		!col start value
	INTEGER*4		STARTY		!row start value
	INTEGER*4		XNO		!number of columns
	INTEGER*4		YNO		!number of rows
	INTEGER*4		ERROR		!system error return code
C
C functions
C
	LOGICAL			HAVE_I_AN_ARG	!test for presence of argument
C
C****************************************************************************
C
C	Test if the supplied LUN number is valid
	IF(DTI_LUN.LT.1.OR.DTI_LUN.GT.MAX_DTI)THEN
	  DTI_INIT_BIT_DATA=DTI__BADLUN	 		!LUN out of range
	  GOTO 999					!Return
	ENDIF
C
C	Test if the supplied LUN is in use
	IF(.NOT.DTILUN_INUSE(DTI_LUN))THEN
	  DTI_INIT_BIT_DATA=DTI__LUNUNUSED		!LUN not in use
	  GOTO 999					!Return
	ENDIF
C
C	Test if the file is set up to contain bit data
	IF(DATA_TYPE(DTI_LUN).NE.DATA_BIT)THEN
	  DTI_INIT_BIT_DATA=DTI__DATAMISMATCH		!Data type mismatch
	  GOTO 999
	ENDIF
C
C	Test for write access to the file
	IF(READ_ONLY(DTI_LUN))THEN
	  DTI_INIT_BIT_DATA=DTI__READONLY		!read only access
	  GOTO 999
	ENDIF
C
C	Test if the supplied value is 0 or 1
	IF(INIT_VALUE.NE.0.AND.INIT_VALUE.NE.1)THEN
	  DTI_INIT_BIT_DATA=DTI__BADDATAVALUE
	  GOTO 999
	ENDIF
C
C	Do we have a third argument?
	IF(HAVE_I_AN_ARG(3))THEN
C	Test that the remaining 3 optional arguments are present
	   DO 100 I=4,6
	      IF(.NOT.HAVE_I_AN_ARG(I))THEN
	        DTI_INIT_BIT_DATA=DTI__MISSARGS	!Missing argument
	        GOTO 999
	      ENDIF			! OK. all arguments present
100	   CONTINUE
C
C	Test if the supplied x and y positions are within the data area
	   IF(X_POSN.LE.0.OR.X_POSN.GT.X_EXTENT(DTI_LUN).OR.
     &	      Y_POSN.LE.0.OR.Y_POSN.GT.Y_EXTENT(DTI_LUN))THEN
	      DTI_INIT_BIT_DATA=DTI__BADDATAPOS	!Bad data position
	      GOTO 999					!Return
	   ENDIF
C
C	Test the data extents - is the specified area inside the data area?
	   IF(X_POSN+X_NUMBER-1.GT.X_EXTENT(DTI_LUN).OR.
     &	      Y_POSN+Y_NUMBER-1.GT.Y_EXTENT(DTI_LUN))THEN
	     DTI_INIT_BIT_DATA=DTI__BADDATAEXT		!Bad data extents
	     GOTO 999					!Return
	   ENDIF
C
	   STARTX=X_POSN
	   STARTY=Y_POSN
	   XNO=X_NUMBER
	   YNO=Y_NUMBER
	ELSE			!Initialise the whole of the data area
	   STARTX=1		!start col position
	   STARTY=1		!start row position
	   XNO=X_EXTENT(DTI_LUN)!number of cols to intialise
	   YNO=Y_EXTENT(DTI_LUN)!number of rows to intialise
	ENDIF
C
C----------------------------------------------------------------------------
C	Initialise on a column by column basis
C
	CALL INIT_BIT (%VAL(SEC_ADDR(DTI_LUN)+DATA_OFFSET(DTI_LUN)), 
     & 		     INIT_VALUE,STARTX,STARTY,XNO,YNO,DTI_LUN)
C
	DTI_INIT_BIT_DATA=DTI__NORMAL	!Signal success
C----------------------------------------------------------------------------
C
999	RETURN
C
	END
C
C****************************************************************************
C
	SUBROUTINE INIT_BIT
     &	(DATA_ARRAY,INIT_VAL,COL_POS,ROW_POS,NUM_X,NUM_Y,WHICH_DTI)
C
***	IDENT	06AP87
***	MODULE	INIT_BIT
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C	Author    : D R Catlow
C	Mod	  : PGH/JB	Redefine DATA_ARRAY
C
	IMPLICIT NONE
C
***	COMMON/LSL$CMNDTI:DTIHDR/
C
C arguments
	INTEGER*4	WHICH_DTI		!which DTI file
CCC	BYTE		DATA_ARRAY(Y_EXTENT(WHICH_DTI)/8,!data array
CCC  &				   X_EXTENT(WHICH_DTI))
C
	BYTE		DATA_ARRAY(*)
C
	BYTE		INIT_VAL		!value to write 
	INTEGER*4	COL_POS			!start column 
	INTEGER*4	ROW_POS			!start row
	INTEGER*4	NUM_X			!number of columns
	INTEGER*4	NUM_Y			!number of rows
C
C local
	INTEGER*4	X,Y,N			!counters
	INTEGER*4	MAX_Y,MAX_X
	INTEGER*4	Y_BYTE			!current byte
	INTEGER*4	BIT_OFFSET		!bit offset in current byte
	BYTE		BYTE_VALUE		!byte data value
C
C---------------------------------------------------------------------------
	MAX_Y = Y_EXTENT(WHICH_DTI)/8
C	MAX_X = X_EXTENT(WHICH_DTI)
C
	DO 200 X=COL_POS,(COL_POS+NUM_X)-1
	   DO 100 Y=ROW_POS,(ROW_POS+NUM_Y)-1
C
C First work out which BYTE we are interested in
	      Y_BYTE=((Y-1)/8)+1
C
C	      BYTE_VALUE=DATA_ARRAY(Y_BYTE,X)
C
	      N = MAX_Y*(X-1) + Y_BYTE
	      BYTE_VALUE=DATA_ARRAY(N)
C
C and the bit offset in the byte
	      BIT_OFFSET=MOD(Y,8)
	      IF(BIT_OFFSET.EQ.0)BIT_OFFSET=8
C	
C Now set the bit.
	      CALL LIB$INSV(INIT_VAL,BIT_OFFSET-1,1,BYTE_VALUE) 
	      DATA_ARRAY(N)=BYTE_VALUE
C
100	   CONTINUE
200	CONTINUE	  
C	
C-----------------------------------------------------------------------
C
999	RETURN
	END
C
