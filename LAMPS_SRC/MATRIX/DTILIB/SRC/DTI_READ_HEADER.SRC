C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-09-09 11:51:28.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION DTI_READ_HEADER ( DTI_LUN, RETVAL )
C
***	IDENT	09SE88
***	MODULE	DTI_READ_HEADER
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C	Author    : D R Catlow
C
C	Modified  : DRC 23FE87 to ensure if data type isn't 
C		    recognised that the data type is set 
C                   to the default of WORD.
C	Modified  : DRC 02AP87 for use with bit data
C	Modified  : DRC 08AP87 to treat data offset value in an ALVY
C	            header as a unsigned word.
C	Modified  : DRC 01AU88 for use with LSLA header
C	Modified  : DRC 03AU88 to replace DTI_DTED with DTI_TED4, and
C		    DEFAULT_ALVY_HEADER
C	Modified  : DRC 09SE88 To read data order values from
C		    a LSLA type header and fill out DTIHDR
C		    variables, and interprete DATA_TYPE as a byte
C	
C--------------------------------------------------------------------------
C	DTILIB Function
C
C	Reads the header details (x,y extent, grid intervals,
C	min/max values, data_type, data_length ) from the DTI
C	file opened on DTI_LUN.  The header details are transferred
C	to the common block DTIHDR.
C
C	The function returns true if successful.
C	
C--------------------------------------------------------------------------
C
	IMPLICIT NONE
C
C parameters
***	PARAMETER/LSL$CMNDTI:DTIDEF/
***	PARAMETER/LSL$CMNDTI:DTIPAR/
***	PARAMETER/LSL$CMNDTI:DTILIBMSG/
C
***	COMMON/LSL$CMNDTI:DTIHDR/
C
C arguments
	INTEGER*4	DTI_LUN			!LUN on which to open file
	INTEGER*4	RETVAL			!system return code
C
C local
	INTEGER*4	X_EXTENT_BYTE_OFFSET	!x extent byte offset
	INTEGER*4	Y_EXTENT_BYTE_OFFSET	!y extent byte offset
	INTEGER*4	X_GRID_BYTE_OFFSET	!x grid interval byte offset
	INTEGER*4	Y_GRID_BYTE_OFFSET	!y grid interval byte offset
	INTEGER*4	MIN_WVALUE_BYTE_OFFSET	!min byte/word data b offset
	INTEGER*4	MAX_WVALUE_BYTE_OFFSET	!max byte/word data b offset
	INTEGER*4	MIN_LVALUE_BYTE_OFFSET	!min real/long data b offset
	INTEGER*4	MAX_LVALUE_BYTE_OFFSET	!max real/long data b offset
	INTEGER*4	DATA_TYPE_BYTE_OFFSET	!data type ident byte offset
	INTEGER*4	DATA_ORDER_BYTE_OFFSET	!data order values byte offset
C
	INTEGER*4	LONGWORD_VALUE		!signed word value	
	INTEGER*2	WORD_VALUE		!word value
	EQUIVALENCE	(WORD_VALUE,LONGWORD_VALUE)
	BYTE		BYTE_VALUE		!byte value
C
C functions
	INTEGER*4	DTI_READ_WORD_HEADER 	!read word from header
	INTEGER*4	DTI_READ_LONG_HEADER 	!read longword from header
	INTEGER*4	DTI_READ_REAL_HEADER 	!read real from header
	INTEGER*4	DTI_READ_BYTE_HEADER	!read byte from the header
C
	INTEGER*4	LIB$EXTZV
C local
	INTEGER*4	IERR			!function return value
	INTEGER*4	ERROR			!function system error value
C
C****************************************************************************
C
C	Test if the supplied LUN number is valid
	IF(DTI_LUN.LT.1.OR.DTI_LUN.GT.MAX_DTI)THEN
	  DTI_READ_HEADER=DTI__BADLUN		!LUN out of range
	  GOTO 999				!Return
	ENDIF
C
C	Test of the supplied LUN is in use
	IF(.NOT.DTILUN_INUSE(DTI_LUN))THEN
	  DTI_READ_HEADER=DTI__LUNUNUSED	!no file opened on LUN
	  GOTO 999				!Return
	ENDIF
C
C----------------------------------------------------------------------------
C	Read header - dependent on header type
C	So first set up byte offset values 
C
	IF	(HEADER_TYPE(DTI_LUN).EQ.DTI_MIKE)THEN
	  X_EXTENT_BYTE_OFFSET  =DTI_PAN_EEXT
	  Y_EXTENT_BYTE_OFFSET  =DTI_PAN_NEXT
	  X_GRID_BYTE_OFFSET    =DTI_PAN_EINT
	  Y_GRID_BYTE_OFFSET    =DTI_PAN_NINT
          MIN_WVALUE_BYTE_OFFSET=DTI_PAN_WMIN
          MAX_WVALUE_BYTE_OFFSET=DTI_PAN_WMAX
	  MIN_LVALUE_BYTE_OFFSET=DTI_PAN_LMIN
	  MAX_LVALUE_BYTE_OFFSET=DTI_PAN_LMAX
	  DATA_TYPE_BYTE_OFFSET	=DTI_PAN_DTYP
C
	ELSE IF (HEADER_TYPE(DTI_LUN).EQ.DTI_UHL1)THEN	  
	  X_EXTENT_BYTE_OFFSET  =DTI_DMA_EEXT
	  Y_EXTENT_BYTE_OFFSET  =DTI_DMA_NEXT
	  X_GRID_BYTE_OFFSET    =DTI_DMA_EINT
	  Y_GRID_BYTE_OFFSET    =DTI_DMA_NINT
          MIN_WVALUE_BYTE_OFFSET=DTI_DMA_WMIN
          MAX_WVALUE_BYTE_OFFSET=DTI_DMA_WMAX
	  MIN_LVALUE_BYTE_OFFSET=DTI_DMA_LMIN
	  MAX_LVALUE_BYTE_OFFSET=DTI_DMA_LMAX
	  DATA_TYPE_BYTE_OFFSET	=DTI_DMA_DTYP
C
	ELSE IF (HEADER_TYPE(DTI_LUN).EQ.DTI_TED4)THEN	  
	  X_EXTENT_BYTE_OFFSET  =DTI_TED_EEXT
	  Y_EXTENT_BYTE_OFFSET  =DTI_TED_NEXT
	  X_GRID_BYTE_OFFSET    =DTI_TED_EINT
	  Y_GRID_BYTE_OFFSET    =DTI_TED_NINT
          MIN_WVALUE_BYTE_OFFSET=DTI_TED_WMIN
          MAX_WVALUE_BYTE_OFFSET=DTI_TED_WMAX
	  MIN_LVALUE_BYTE_OFFSET=DTI_TED_LMIN
	  MAX_LVALUE_BYTE_OFFSET=DTI_TED_LMAX
	  DATA_TYPE_BYTE_OFFSET	=DTI_TED_DTYP
C	
	ELSE IF (HEADER_TYPE(DTI_LUN).EQ.DTI_ALVY.OR.
     &           HEADER_TYPE(DTI_LUN).EQ.DTI_LSLA)THEN	  
	  X_EXTENT_BYTE_OFFSET  =DTI_LSLA_EEXT
	  Y_EXTENT_BYTE_OFFSET  =DTI_LSLA_NEXT
	  X_GRID_BYTE_OFFSET    =DTI_LSLA_EINT
	  Y_GRID_BYTE_OFFSET    =DTI_LSLA_NINT
          MIN_WVALUE_BYTE_OFFSET=DTI_LSLA_WMIN
          MAX_WVALUE_BYTE_OFFSET=DTI_LSLA_WMAX
	  MIN_LVALUE_BYTE_OFFSET=DTI_LSLA_LMIN
	  MAX_LVALUE_BYTE_OFFSET=DTI_LSLA_LMAX
	  DATA_TYPE_BYTE_OFFSET	=DTI_LSLA_DTYP
	  DATA_ORDER_BYTE_OFFSET=DTI_LSLA_DORD
C
	ENDIF
C
C_________________________________________________________________________
C	Set up header sizes (required for header reading routines)
C	For all but ALVY and LSLA headers this is fixed; 
C	for ALVY and LSLA initially use default header size, 
C	and get true size later.
C
	IF      (HEADER_TYPE(DTI_LUN).EQ.DTI_MIKE)THEN
	  DATA_OFFSET(DTI_LUN)=DTI_PAN_DATA
	ELSE IF (HEADER_TYPE(DTI_LUN).EQ.DTI_UHL1)THEN	  
	  DATA_OFFSET(DTI_LUN)=DTI_DMA_DATA
	ELSE IF (HEADER_TYPE(DTI_LUN).EQ.DTI_TED4)THEN	  
	  DATA_OFFSET(DTI_LUN)=DTI_TED_DATA
	ELSE IF (HEADER_TYPE(DTI_LUN).EQ.DTI_ALVY.OR.	  
     &           HEADER_TYPE(DTI_LUN).EQ.DTI_LSLA)THEN
	  DATA_OFFSET(DTI_LUN)=DEFAULT_LSLA_HEADER
	ENDIF
C
C_________________________________________________________________________
C	Use byte offsets to extract details
C
C	X Extent
	IERR=DTI_READ_WORD_HEADER
     &	     (DTI_LUN,X_EXTENT(DTI_LUN),X_EXTENT_BYTE_OFFSET,ERROR)
	IF(IERR.NE.DTI__NORMAL)GOTO 900
C
C	Y Extent	  
	IERR=DTI_READ_WORD_HEADER
     &	     (DTI_LUN,Y_EXTENT(DTI_LUN),Y_EXTENT_BYTE_OFFSET,ERROR)
	IF(IERR.NE.DTI__NORMAL)GOTO 900
C
C	X Grid Interval	  
	IERR=DTI_READ_REAL_HEADER
     &	     (DTI_LUN,X_GRID(DTI_LUN),X_GRID_BYTE_OFFSET,ERROR)
	IF(IERR.NE.DTI__NORMAL)GOTO 900
C
C	Y Grid Interval	  
	IERR=DTI_READ_REAL_HEADER
     &	     (DTI_LUN,Y_GRID(DTI_LUN),Y_GRID_BYTE_OFFSET,ERROR)
	IF(IERR.NE.DTI__NORMAL)GOTO 900
C
C	Minimum byte/word data value	  
	IERR=DTI_READ_WORD_HEADER
     &	     (DTI_LUN,MIN_WVALUE(DTI_LUN),MIN_WVALUE_BYTE_OFFSET,ERROR)
	IF(IERR.NE.DTI__NORMAL)GOTO 900
C
C	Maximum byte/word data value	  
	IERR=DTI_READ_WORD_HEADER
     &	     (DTI_LUN,MAX_WVALUE(DTI_LUN),MAX_WVALUE_BYTE_OFFSET,ERROR)
	IF(IERR.NE.DTI__NORMAL)GOTO 900
C
C	Data type identifier	  
	IERR=DTI_READ_BYTE_HEADER
     &	     (DTI_LUN,BYTE_VALUE,DATA_TYPE_BYTE_OFFSET,ERROR)
	     DATA_TYPE(DTI_LUN)=BYTE_VALUE
	IF(IERR.NE.DTI__NORMAL)GOTO 900
C	
C	If data type isn't recognised, then assume a word.
	IF(DATA_TYPE(DTI_LUN).NE.DATA_BYTE.AND.
     &     DATA_TYPE(DTI_LUN).NE.DATA_WORD.AND.
     &     DATA_TYPE(DTI_LUN).NE.DATA_LONG.AND.
     &     DATA_TYPE(DTI_LUN).NE.DATA_REAL.AND.
     &	   DATA_TYPE(DTI_LUN).NE.DATA_BIT)DATA_TYPE(DTI_LUN)=DATA_WORD
C
C	If the file has a LSLA type header then read the next
C	byte to extract data order values (otherwise assume 
C	converntional ordering of data)
	IF(HEADER_TYPE(DTI_LUN).NE.DTI_LSLA)THEN
	   DTI_ORDER_CORNER(DTI_LUN)=DTI_ORDER_SW
	   DTI_ORDER_DIRECTION(DTI_LUN)=DTI_ORDER_CLOCKWISE
	ELSE
	   IERR=DTI_READ_BYTE_HEADER
     &          (DTI_LUN,BYTE_VALUE,DATA_ORDER_BYTE_OFFSET,ERROR)
	   IF(IERR.NE.DTI__NORMAL)GOTO 900
C	Decode the byte value to get the corner and direction
	   DTI_ORDER_CORNER(DTI_LUN)=LIB$EXTZV(0,4,BYTE_VALUE)
	   DTI_ORDER_DIRECTION(DTI_LUN)=LIB$EXTZV(4,4,BYTE_VALUE)
	ENDIF
C
C	Check the validity of the values
	IF(DTI_ORDER_CORNER(DTI_LUN).NE.DTI_ORDER_SW.AND.
     &     DTI_ORDER_CORNER(DTI_LUN).NE.DTI_ORDER_NW.AND.
     &     DTI_ORDER_CORNER(DTI_LUN).NE.DTI_ORDER_NE.AND.
     &     DTI_ORDER_CORNER(DTI_LUN).NE.DTI_ORDER_SE)THEN
           DTI_READ_HEADER=DTI__INVORDER
	   GOTO 999
	ENDIF
C
   	IF(DTI_ORDER_DIRECTION(DTI_LUN).NE.DTI_ORDER_CLOCKWISE.AND.
     &     DTI_ORDER_DIRECTION(DTI_LUN).NE.DTI_ORDER_ANTICLOCKWISE)THEN
	   DTI_READ_HEADER=DTI__INVORDER	   
	   GOTO 999
	ENDIF
C		
C	Minimum or maximum longword value (only if data type = data_long)
	IF(DATA_TYPE(DTI_LUN).EQ.DATA_LONG)THEN
	  IERR=DTI_READ_LONG_HEADER
     &	       (DTI_LUN,MIN_LVALUE(DTI_LUN),MIN_LVALUE_BYTE_OFFSET,ERROR)
	  IF(IERR.NE.DTI__NORMAL)GOTO 900
C
	  IERR=DTI_READ_LONG_HEADER
     &	       (DTI_LUN,MAX_LVALUE(DTI_LUN),MAX_LVALUE_BYTE_OFFSET,ERROR)
	  IF(IERR.NE.DTI__NORMAL)GOTO 900
	ENDIF
C
C	Minimum or maximum real data value (only if data type = data_real)
	IF(DATA_TYPE(DTI_LUN).EQ.DATA_REAL)THEN
	  IERR=DTI_READ_REAL_HEADER
     &	       (DTI_LUN,MIN_RVALUE(DTI_LUN),MIN_LVALUE_BYTE_OFFSET,ERROR)
	  IF(IERR.NE.DTI__NORMAL)GOTO 900
C
	  IERR=DTI_READ_REAL_HEADER
     &	       (DTI_LUN,MAX_RVALUE(DTI_LUN),MAX_LVALUE_BYTE_OFFSET,ERROR)
	  IF(IERR.NE.DTI__NORMAL)GOTO 900
	ENDIF
C
C	Get start of data area if we're dealing with an ALVY or LSLA header
	IF(HEADER_TYPE(DTI_LUN).EQ.DTI_ALVY.OR.
     &     HEADER_TYPE(DTI_LUN).EQ.DTI_LSLA)THEN
	  IERR=DTI_READ_WORD_HEADER
     &	       (DTI_LUN,WORD_VALUE,DTI_LSLA_DATA,ERROR)
	       DATA_OFFSET(DTI_LUN)=LONGWORD_VALUE	!ie unsigned word
	  IF(IERR.NE.DTI__NORMAL)GOTO 900
C	Check we have a sensible size for header length - otherwise
C	assume the default
	  IF(DATA_OFFSET(DTI_LUN).LT.DEFAULT_LSLA_HEADER)
     &       DATA_OFFSET(DTI_LUN)=DEFAULT_LSLA_HEADER
	ENDIF
C	  
	DTI_READ_HEADER=DTI__NORMAL	! signal success
	GOTO 999
C
C--------------------------------------------------------------------------
C	Error occured while reading the header details
900	DTI_READ_HEADER=DTI__SYSERR	! signal error while reading header
	RETVAL=ERROR			! pass back system error
C
999	RETURN
C
	END
