C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-05-05 12:36:30.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION DTI_PRINT_HEADER ( DTI_LUN, UNITS, 
     &                                        OFFSET,ROTATION )
C
***	IDENT	05MY94
***	MODULE	DTI_PRINT_HEADER
C
C	Copyright : Laser-Scan, Cambridge, England
C	Author    : D R Catlow
C
C	Modified  : DRC 26FE87 to correct bug when printing out
C		    window in seconds.  Latitude value now 
C		    uses DTI_WINDOW_SWY rather DTI_WINDOW_SWX!!
C	Modified  : DRC 02AP87 for use with bit data files
C	Modified  : DRC 29JL87 to use the absolute x and y values
C		    specified for the SW corner contained in 
C		    DTIHDR to output correct ground position if 
C		    UNITS is in metres.
C	Modified  : DRC 11SE87 to print out WINDOW values if set
C	            by calling program
C	Modified  : DRC 16OC87 to print out UHL1 header in Latlong
C	            or Seconds of arc.
C	Modified  : DRC 27AP88 to add metre offset values onto
C		    window values when outputting in metres
C	Modified  : DRC 01AU88 for use with new LSLA header
C	Modified  : DRC 03AU88 to replace DTI_DTED by DTI_TED4
CMOD		  : DRC 16NO88 to allow seconds or degrees units
C		    for LSLA file with a projection record that
C		    indicates the data is in Geographicals.
CMOD		  : DRC 21NO88 for use with optional argument
C		    ADD_OFFSET. This controls whether the values
C		    in X_OFFSET and Y_OFFSET are added to the
C		    metre coordinate values (ie. absolute or
C		    relative coordinates).
CMOD		  : DRC 22NO88 to allow for specification in
C		    projection units
CMOD    	  : MWSR 09DE88 - fix bug when printing out sample 
C		    intervals in projection units
C		  : ACM 02MY89 to ouput Z range as 'unset'
C		    when range is 0 to 0
CMOD1045	  : JB  22SE91 Take mod (2*PI) for LATORI etc.
C
C----------------------------------------------------------------------------
C
C	DTILIB Function.   
C
C Utility function to print certain DTI header values.
C UNITS determines the units used: - possible UNITS values are:
C	1	DTI (matrix) units
C	2	METRES
C	3	SECONDS 			
C	4	DEGREES, MINUTES and SECONDS	
C	5	PROJECTION
C
C	3 and 4 are valid for DTED files, and a LSLA file with a projection
C	record that indicates data is in Geographicals.
C
C----------------------------------------------------------------------------
C
	IMPLICIT NONE
C
C parameters
***	COMMON   /LSL$CMNIFF:MD2NAM/	!holds MD variables that are
C					!used by DTILIB to ensure
C					!compatability with ITRANS.
***	PARAMETER/LSL$CMNDTI:DTIDEF/
***	PARAMETER/LSL$CMNDTI:DTIPAR/
***	PARAMETER/LSL$CMNDTI:DTILIBMSG/
C
***	COMMON/LSL$CMNDTI:DTIHDR/
***	COMMON/LSL$CMNDTI:DTIPROJ/
C
C arguments
	INTEGER*4		DTI_LUN		! LUN on which DTI is open
	INTEGER*4		UNITS		! what type of UNITS
	LOGICAL			OFFSET		! add offset if .true.
	INTEGER*4		ROTATION	! rotation
C
C local
	INTEGER*4		UNIT_INDEX	! units index
	REAL			SWX,SWY		! SW corner
	INTEGER*4		DEGR		! degree part of latlong
	INTEGER*4		MINU		! minute part of latlong
	INTEGER*4		SECO		! seconds part of latlong
	LOGICAL			NEGA		! neg latlong value
	CHARACTER*4		HEADER(5)	! header type
	CHARACTER*4		DATA(5)		! data types
	LOGICAL			ADD_OFFSET	! add offset values?
	INTEGER*4		I		! counter
	REAL*8			X_OUT_SW	! sw corner x
	REAL*8			Y_OUT_SW	! sw corner y
	REAL*8			X_OUT_NE	! ne corner x
	REAL*8			Y_OUT_NE	! ne corner y
	INTEGER*4		ROTATE
	INTEGER*4		I_MOD
C
C function
	LOGICAL			HAVE_I_AN_ARG	! test for presence of argument
	INTEGER*4		SIGCHS		! significant characters
	INTEGER*4		DTI_UNITS	! test the units
C
C****************************************************************************
C Test if the supplied LUN number is valid
	IF(DTI_LUN.LT.1.OR.DTI_LUN.GT.MAX_DTI)THEN
	  DTI_PRINT_HEADER=DTI__BADLUN		! LUN out of range
	  GOTO 999				! return
 	ENDIF
C
C Test of the supplied LUN is in use
	IF(.NOT.DTILUN_INUSE(DTI_LUN))THEN
	  DTI_PRINT_HEADER=DTI__LUNUNUSED	! no file opened on LUN
	  GOTO 999				! return
	ENDIF
C
C Test if UNITS is valid
	IF (UNITS.NE.UNITS_DTI .AND.
     &      UNITS.NE.UNITS_MET .AND.
     &	    UNITS.NE.UNITS_SEC .AND.
     &	    UNITS.NE.UNITS_DEG .AND.
     &      UNITS.NE.UNITS_PROJ) THEN
	   DTI_PRINT_HEADER = DTI__BADUNITS	! unrecognised units
	   GOTO 999
	ENDIF
C
C If projection units test that they are set up in the projection record
	IF (UNITS.EQ.UNITS_PROJ) THEN
	  IF (.NOT.HAD_PROJ_RECORD(DTI_LUN) .OR.
     &		DTIPROJ_UNITS(DTI_LUN).EQ.0) THEN
	    DTI_PRINT_HEADER = DTI__INVUNITS	! invalid UNITS
	    GOTO 999
	  ENDIF
	ENDIF
C  
C Test units against file type
	DTI_PRINT_HEADER = DTI_UNITS(DTI_LUN,UNITS)
	IF (.NOT.DTI_PRINT_HEADER) GOTO 999	
C
	IF(HAVE_I_AN_ARG(3))THEN
	  ADD_OFFSET = OFFSET
	ELSE
	  ADD_OFFSET = .TRUE.	!by default add offset values
	ENDIF
C
	IF(.NOT.HAVE_I_AN_ARG(4))THEN
	  ROTATE= 0		!default no rotation
	ELSE
	  ROTATE = ROTATION
	ENDIF
C
C Check ROTATION argument
	IF (ROTATE.NE.DTI_ORDER_SW .AND.
     &      ROTATE.NE.DTI_ORDER_NW .AND.
     &      ROTATE.NE.DTI_ORDER_NE .AND.	
     &      ROTATE.NE.DTI_ORDER_SE) THEN
	   DTI_PRINT_HEADER = DTI__BADROTATION		! unrecognised 
	   GOTO 999
	ENDIF
C
C--------------------------------------------------------------------------
C Fill out header and data descriptors
	HEADER(1)='MIKE'
	HEADER(2)='UHL1'
	HEADER(3)='TED4'
	HEADER(4)='ALVY'
	HEADER(5)='LSLA'
C
	DATA(1)='BYTE'
	DATA(2)='WORD'
	DATA(3)='LONG'
	DATA(4)='REAL'
	DATA(5)='BIT '
C
C Print details.
C First the bit that isn't UNITS dependent
C
	CALL WRITEF
C	Filename:
	CALL WRITEF('File    :  %S',
     &               DTI_NAME(DTI_LUN)(1:DTI_NAME_LENGTH(DTI_LUN)))
C
	CALL WRITEF('Header  :  %S  Data:  %S',
     &               HEADER(HEADER_TYPE(DTI_LUN)),
     &		     DATA(DATA_TYPE(DTI_LUN)))
C
C
	GOTO(100,200,300,400,500)UNITS
C
C-------------------------------------------------------------------------
C
100	CALL WRITEF
	CALL WRITEF('Units are DTI matrix values')
	CALL WRITEF
	CALL WRITEF('Matrix Coverage   SW:     1     1  NE: %I5 %I5',
     &  		X_EXTENT(DTI_LUN), Y_EXTENT(DTI_LUN))
	IF (DTI_WINDOW_NEX(DTI_LUN).GT.0 .AND.
     &	    DTI_WINDOW_NEY(DTI_LUN).GT.0)
     &		CALL WRITEF('Matrix Window     SW: %I5 %I5  NE: %I5 %I5',
     &  	DTI_WINDOW_SWX(DTI_LUN), DTI_WINDOW_SWY(DTI_LUN),
     &  	DTI_WINDOW_NEX(DTI_LUN), DTI_WINDOW_NEY(DTI_LUN))
C
        CALL WRITEF('Matrix Interval    E:     1         N:     1')
	GOTO 1000
C
C-------------------------------------------------------------------------
C
200	CALL WRITEF
	CALL WRITEF('Units are metres')
	CALL WRITEF
C
	CALL DTI_WIN_MATRIX_TO_UNITS(DTI_LUN, 1,1, X_EXTENT(DTI_LUN),
     &		Y_EXTENT(DTI_LUN), UNITS, ROTATE, 
     &  	ADD_OFFSET, X_OUT_SW, Y_OUT_SW,X_OUT_NE,Y_OUT_NE)
C
	CALL WRITEF
     &  ('Matrix Coverage   SW: %^D%F10.2 %F10.2    NE: %F10.2 %F10.2',
     &  	X_OUT_SW, Y_OUT_SW, X_OUT_NE, Y_OUT_NE)
C
	IF (DTI_WINDOW_NEX(DTI_LUN).GT.0 .AND.
     &	    DTI_WINDOW_NEY(DTI_LUN).GT.0) THEN
	   CALL DTI_WIN_MATRIX_TO_UNITS(DTI_LUN, 
     &     DTI_WINDOW_SWX(DTI_LUN),DTI_WINDOW_SWY(DTI_LUN), 
     &     DTI_WINDOW_NEX(DTI_LUN),DTI_WINDOW_NEY(DTI_LUN), 
     &     UNITS, ROTATE, ADD_OFFSET,
     &	   X_OUT_SW, Y_OUT_SW, X_OUT_NE, Y_OUT_NE)
C
     	   CALL WRITEF
     &	('Matrix Window     SW: %^D%F10.2 %F10.2    NE: %F10.2 %F10.2',
     &     	X_OUT_SW, Y_OUT_SW, X_OUT_NE, Y_OUT_NE)
	ENDIF
C
	IF (ROTATE.EQ.DTI_ORDER_SW .OR. ROTATE.EQ.DTI_ORDER_NE) THEN 
	   CALL WRITEF
     &	   ('Matrix Interval    E: %F10.2                N: %F10.2',
     &	   	X_GRID(DTI_LUN),Y_GRID(DTI_LUN))
	ELSE
	   CALL WRITEF
     &	   ('Matrix Interval    E: %F10.2                N: %F10.2',
     &	   	Y_GRID(DTI_LUN),X_GRID(DTI_LUN))
	ENDIF
C
	GOTO 1000
C
C--------------------------------------------------------------------------
C
300	CALL WRITEF
	CALL WRITEF('Units are seconds')
	CALL WRITEF
C
C Take mod(2*PI)
C
	I_MOD = 360*3600*10
	LONORI(DTI_LUN) = MOD(LONORI(DTI_LUN),I_MOD) 
	LATORI(DTI_LUN) = MOD(LATORI(DTI_LUN),I_MOD) 
	LONINT(DTI_LUN) = MOD(LONINT(DTI_LUN),I_MOD) 
	LATINT(DTI_LUN) = MOD(LATINT(DTI_LUN),I_MOD) 
C
	DO 5 I = 1,4
	  LONREC(I,DTI_LUN) = MOD(LONREC(I,DTI_LUN),I_MOD) 
	  LATREC(I,DTI_LUN) = MOD(LATREC(I,DTI_LUN),I_MOD) 
5	CONTINUE
C
	CALL WRITEF('Matrix Origin       : %I10 %I10',
     &    LATORI(DTI_LUN)/10,LONORI(DTI_LUN)/10)
C
	CALL WRITEF
     &	('Matrix Coverage   SW: %I10 %I10    NE: %I10 %I10',
     &    LATREC(1,DTI_LUN)/10,LONREC(1,DTI_LUN)/10,
     &	  LATREC(3,DTI_LUN)/10,LONREC(3,DTI_LUN)/10)
C
	IF (DTI_WINDOW_NEX(DTI_LUN).GT.0 .AND.
     &      DTI_WINDOW_NEY(DTI_LUN).GT.0) THEN
	   CALL DTI_WIN_MATRIX_TO_UNITS(DTI_LUN, 
     &     	DTI_WINDOW_SWX(DTI_LUN),DTI_WINDOW_SWY(DTI_LUN), 
     &     	DTI_WINDOW_NEX(DTI_LUN),DTI_WINDOW_NEY(DTI_LUN), UNITS,
     &		ROTATE, ADD_OFFSET,
     &		X_OUT_SW, Y_OUT_SW,X_OUT_NE,Y_OUT_NE)
C
           CALL WRITEF
     &	   ('Matrix Window     SW: %I10 %I10    NE: %I10 %I10',
     &     	NINT(Y_OUT_SW/10), NINT(X_OUT_SW/10), 
     &     	NINT(Y_OUT_NE/10), NINT(X_OUT_NE/10))
	ENDIF
C
	IF (ROTATE .EQ. DTI_ORDER_SW .OR. ROTATE.EQ.DTI_ORDER_NE) THEN 
           CALL WRITEF
     &	('Matrix Interval    E:     %I6                N:     %I6',
     &	  	LONINT(DTI_LUN)/10,LATINT(DTI_LUN)/10)
	ELSE
           CALL WRITEF
     &	('Matrix Interval    E:     %I6                N:     %I6',
     &	  	LATINT(DTI_LUN)/10,LONINT(DTI_LUN)/10)
	ENDIF
C
	GOTO 1000
C
C--------------------------------------------------------------------------
C
400     CALL WRITEF
        CALL WRITEF('Units are degrees, minutes, seconds')
	CALL WRITEF
C
C Convert values from tenths secs of arc
	CALL DTI_CVTANG(LATORI(DTI_LUN),NEGA,DEGR,MINU,SECO)
	CALL EXPAND('Matrix Origin       : ')
	CALL APPEND('%P %I3 %P0%I2 %P0%I2',DEGR,MINU,SECO)
	IF(NEGA)THEN
	  CALL APPEND('S  ')
	ELSE
	  CALL APPEND('N  ')
	ENDIF
C
	CALL DTI_CVTANG(LONORI(DTI_LUN),NEGA,DEGR,MINU,SECO)
	CALL APPEND('%P %I3 %P0%I2 %P0%I2',DEGR,MINU,SECO)
	IF(NEGA)THEN
	  CALL APPEND('W  ')
	ELSE
	  CALL APPEND('E  ')
	ENDIF
	CALL TTWSTR
C
	CALL DTI_CVTANG(LATREC(1,DTI_LUN),NEGA,DEGR,MINU,SECO)
	CALL EXPAND('Matrix Coverage   SW: ')
	CALL APPEND('%P %I3 %P0%I2 %P0%I2',DEGR,MINU,SECO)
	IF(NEGA)THEN
	  CALL APPEND('S  ')
	ELSE
	  CALL APPEND('N  ')
	ENDIF
C
	CALL DTI_CVTANG(LONREC(1,DTI_LUN),NEGA,DEGR,MINU,SECO)
	CALL APPEND('%P %I3 %P0%I2 %P0%I2',DEGR,MINU,SECO)
	IF(NEGA)THEN
	  CALL APPEND('W  ')
	ELSE
	  CALL APPEND('E  ')
	ENDIF
C	  
	CALL DTI_CVTANG(LATREC(3,DTI_LUN),NEGA,DEGR,MINU,SECO)
	CALL APPEND(' NE: ')
	CALL APPEND('%P %I3 %P0%I2 %P0%I2',DEGR,MINU,SECO)
	IF(NEGA)THEN
	  CALL APPEND('S  ')
	ELSE
	  CALL APPEND('N  ')
	ENDIF
C
	CALL DTI_CVTANG(LONREC(3,DTI_LUN),NEGA,DEGR,MINU,SECO)
	CALL APPEND('%P %I3 %P0%I2 %P0%I2',DEGR,MINU,SECO)
	IF(NEGA)THEN
	  CALL APPEND('W  ')
	ELSE
	  CALL APPEND('E  ')
	ENDIF
C
	CALL TTWSTR
C
	IF (DTI_WINDOW_NEX(DTI_LUN).GT.0 .AND.
     &	    DTI_WINDOW_NEY(DTI_LUN).GT.0) THEN
	   CALL DTI_WIN_MATRIX_TO_UNITS(DTI_LUN, 
     &     	DTI_WINDOW_SWX(DTI_LUN),DTI_WINDOW_SWY(DTI_LUN), 
     &     	DTI_WINDOW_NEX(DTI_LUN),DTI_WINDOW_NEY(DTI_LUN), 
     &     	UNITS_SEC, ROTATE, ADD_OFFSET,
     &		X_OUT_SW, Y_OUT_SW, X_OUT_NE, Y_OUT_NE)
C
     	  CALL EXPAND('Matrix Window     SW: ')
	  CALL DTI_CVTANG(NINT(Y_OUT_SW), NEGA,DEGR,MINU,SECO)
	  CALL APPEND('%P %I3 %P0%I2 %P0%I2',DEGR,MINU,SECO)
	  IF(NEGA)THEN
	    CALL APPEND('S  ')
	  ELSE
	    CALL APPEND('N  ')
	  ENDIF
C
	  CALL DTI_CVTANG(NINT(X_OUT_SW), NEGA,DEGR,MINU,SECO)
	  CALL APPEND('%P %I3 %P0%I2 %P0%I2',DEGR,MINU,SECO)
	  IF(NEGA)THEN
	    CALL APPEND('W  ')
	  ELSE
	    CALL APPEND('E  ')
	  ENDIF
C	  
	  CALL DTI_CVTANG(NINT(Y_OUT_NE), NEGA,DEGR,MINU,SECO)
	  CALL APPEND(' NE: ')
	  CALL APPEND('%P %I3 %P0%I2 %P0%I2',DEGR,MINU,SECO)
	  IF(NEGA)THEN
	    CALL APPEND('S  ')
	  ELSE
	    CALL APPEND('N  ')
	  ENDIF
C
	  CALL DTI_CVTANG(NINT(X_OUT_NE), NEGA,DEGR,MINU,SECO)
	  CALL APPEND('%P %I3 %P0%I2 %P0%I2',DEGR,MINU,SECO)
	  IF(NEGA)THEN
	    CALL APPEND('W  ')
	  ELSE
	    CALL APPEND('E  ')
	  ENDIF
C
	  CALL TTWSTR
C
	ENDIF
C
	IF (ROTATE.EQ.DTI_ORDER_SW .OR. 
     &      ROTATE.EQ.DTI_ORDER_NE) THEN 
           CALL WRITEF
     &	('Matrix Interval    E:     %I6                N:     %I6',
     &	  	LONINT(DTI_LUN)/10,LATINT(DTI_LUN)/10)
	ELSE
           CALL WRITEF
     &	('Matrix Interval    E:     %I6                N:     %I6',
     &		LATINT(DTI_LUN)/10,LONINT(DTI_LUN)/10)
	ENDIF
C
	GOTO 1000
C----------------------------------------------------------------------------
C Projection Units
C Set up block data
C
500	CALL DTI_PROJDATA
	CALL WRITEF
	DO 510 I=1,MD2_NOUNT
	   IF(DTIPROJ_UNITS(DTI_LUN).EQ.MD2_UNTCD(I))GOTO 520
510	CONTINUE
C
C Invalid unit code
	CALL WRITEF('Unit Code %^L%I4 is Invalid',
     &              DTIPROJ_UNITS(DTI_LUN))
	GOTO 530
C
520	UNIT_INDEX=I
C
C All spheroids known by GCTP are specified in International metres.
C If user specified spheroid, then we talk about projection units.
C Also when dealing with Oblique Stereographic (UKSL format) with user
C specified conformal earth's radius, then talk about projection units
C
	IF (DTIPROJ_SPHEROID(DTI_LUN).EQ.101 .OR.
     &	    DTIPROJ_PROJECTION(DTI_LUN).EQ.22 .AND.
     &      DTIPROJ_PROJ_PARAMS(4,DTI_LUN).GT.0.0) THEN
	   MD2_UNT(3)='projection units'
	ELSE
	   MD2_UNT(3)='metres'
	ENDIF
C
	CALL WRITEF('Units are %S',
     &	            MD2_UNT(UNIT_INDEX)(1:SIGCHS(MD2_UNT(UNIT_INDEX))))
C
530	CALL DTI_WIN_MATRIX_TO_UNITS(DTI_LUN, 
     &  	1,1, X_EXTENT(DTI_LUN), Y_EXTENT(DTI_LUN),
     &  	UNITS, ROTATE, ADD_OFFSET,
     &		X_OUT_SW, Y_OUT_SW, X_OUT_NE, Y_OUT_NE)
C
	CALL WRITEF
     &  ('Matrix Coverage   SW: %^D%F10.2 %F10.2    NE: %F10.2 %F10.2',
     &  	X_OUT_SW, Y_OUT_SW, X_OUT_NE, Y_OUT_NE)
C
	IF (DTI_WINDOW_NEX(DTI_LUN).GT.0 .AND.
     &	    DTI_WINDOW_NEY(DTI_LUN).GT.0) THEN
	   CALL DTI_WIN_MATRIX_TO_UNITS(DTI_LUN, 
     &     	DTI_WINDOW_SWX(DTI_LUN),DTI_WINDOW_SWY(DTI_LUN), 
     &    	DTI_WINDOW_NEX(DTI_LUN),DTI_WINDOW_NEY(DTI_LUN), 
     &     	UNITS, ROTATE, ADD_OFFSET,
     &		X_OUT_SW, Y_OUT_SW, X_OUT_NE, Y_OUT_NE)
C
     	   CALL WRITEF
     &	('Matrix Window     SW: %^D%F10.2 %F10.2    NE: %F10.2 %F10.2',
     &		X_OUT_SW, Y_OUT_SW, X_OUT_NE, Y_OUT_NE)
	ENDIF
C
	IF (ROTATE.EQ.DTI_ORDER_SW .OR. 
     &      ROTATE.EQ.DTI_ORDER_NE) THEN 
	   CALL WRITEF
     &	   ('Matrix Interval    E: %F10.2                N: %F10.2',
     &	   	DTIPROJ_SAMPLE(1,DTI_LUN),DTIPROJ_SAMPLE(2,DTI_LUN))
	ELSE
	   CALL WRITEF
     &	   ('Matrix Interval    E: %F10.2                N: %F10.2',
     &	   	DTIPROJ_SAMPLE(2,DTI_LUN),DTIPROJ_SAMPLE(1,DTI_LUN))
	ENDIF
C
	GOTO 1000
C
C----------------------------------------------------------------------------
C Print out min and max data values. If both = 0, declare unset.
C
1000	IF     (DATA_TYPE(DTI_LUN).EQ.DATA_LONG) THEN
	  IF (MIN_LVALUE(DTI_LUN).NE.0 .OR. MAX_LVALUE(DTI_LUN).NE.0) THEN
	    CALL WRITEF('Value Range         :%I6      to %N',
     &	      MIN_LVALUE(DTI_LUN),MAX_LVALUE(DTI_LUN))
	  ELSE
	    CALL WRITEF('Value Range         : unset')
	  ENDIF
C
	ELSE IF(DATA_TYPE(DTI_LUN).EQ.DATA_REAL) THEN
	  IF (MIN_RVALUE(DTI_LUN).NE.0 .OR. MAX_RVALUE(DTI_LUN).NE.0) THEN
	    CALL WRITEF('Value Range         :%F10.2 to %F10.2',
     &        MIN_RVALUE(DTI_LUN),MAX_RVALUE(DTI_LUN))
	  ELSE
	    CALL WRITEF('Value Range         : unset')
	  ENDIF
C
	ELSE IF(DATA_TYPE(DTI_LUN).EQ.DATA_BYTE) THEN
	  IF (MIN_WVALUE(DTI_LUN).NE.0 .OR. MAX_WVALUE(DTI_LUN).NE.0) THEN
	    CALL WRITEF('Value Range         :%^W%I6   to %^W%I6',
     &        MIN_WVALUE(DTI_LUN),MAX_WVALUE(DTI_LUN))
	  ELSE
	    CALL WRITEF('Value Range         : unset')
	  ENDIF
C
	ELSE IF(DATA_TYPE(DTI_LUN).EQ.DATA_BIT)THEN
	  IF (MIN_WVALUE(DTI_LUN).NE.0 .OR. MAX_WVALUE(DTI_LUN).NE.0) THEN
	    CALL WRITEF('Value Range         :%^W%I6   to %^W%I6',
     &        MIN_WVALUE(DTI_LUN),MAX_WVALUE(DTI_LUN))
	  ELSE
	    CALL WRITEF('Value Range         : unset')
	  ENDIF
C
	ELSE IF(DATA_TYPE(DTI_LUN).EQ.DATA_WORD) THEN
	  IF (MIN_WVALUE(DTI_LUN).NE.0 .OR. MAX_WVALUE(DTI_LUN).NE.0) THEN
	    CALL WRITEF('Value Range         :%^W%I6   to %^W%I6',
     &        MIN_WVALUE(DTI_LUN),MAX_WVALUE(DTI_LUN))
	  ELSE
	    CALL WRITEF('Value Range         : unset')
	  ENDIF
	ENDIF
C
	CALL WRITEF				! blank line
C
	DTI_PRINT_HEADER = DTI__NORMAL		! signal success
C		  
C--------------------------------------------------------------------------	
C
999	RETURN
	END
C
