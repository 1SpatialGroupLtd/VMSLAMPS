C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-02-03 15:06:10.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION DTI_MINMAX_DATA ( DTI_LUN, UPDATE, RETVAL)
C
***	IDENT	03FE94
***	MODULE	DTI_MINMAX_DATA
C
C	Copyright : Laser-Scan, Cambridge, England
C	Author    : D R Catlow
C
C	Modified  : DRC 02AP87 for use with bit data files
C		  : Subroutine DTI_MINMAX_BIT added
C	Modified  : DRC 29SE87 so that INTEGER*2 -32767 null values are
C		  : not included in calculations
C	Modified  : DRC 21JN88 to ensure that if the first data element
C		  : in a word file is -32767, this is not recorded as
C		  : the minimum data value.  See previous MOD
C       Modified  : DRC 03AU88 to replace parameter DTI_DTED with DTI_TED4
C	Modified  : DRC 08DE88 use with new null data parameters. 
C	Modified  : PGH/JB 17JL91 redeclare DATA_ARRAY in DTI_MINMAX_BIT etc.
CMOD1335	  : JB 02FE94 Fix initialisation of data values.
C
C---------------------------------------------------------------------------
C	DTILIB Function.   
C
C	Calculates the minimum and maximum data values for the DTI file
C	opened on DTI_LUN.  The values in DTIHDR are updated.
C	These are only written to the mapped DTI file if UPDATE is true.
C
C	Any system error is returned in RETVAL.
C
C---------------------------------------------------------------------------
C
	IMPLICIT NONE
C
C parameters
***	PARAMETER/LSL$CMNDTI:DTIDEF/
***	PARAMETER/LSL$CMNDTI:DTIPAR/
***	PARAMETER/LSL$CMNDTI:DTILIBMSG/
C
***	COMMON/LSL$CMNDTI:DTIHDR/
C
C arguments
	INTEGER*4	DTI_LUN			!LUN on which DTI is opened
	LOGICAL		UPDATE			!If true update mapped file
	INTEGER*4	RETVAL			!system error code
C
C local
	INTEGER*4	MIN_WVALUE_OFFSET  	!min word value header offset
	INTEGER*4    	MAX_WVALUE_OFFSET  	!max word value header offset
	INTEGER*4	MIN_LVALUE_OFFSET  	!min long value header offset
	INTEGER*4	MAX_LVALUE_OFFSET  	!max long value header offset
	INTEGER*4	IERR		   	!function return code
	INTEGER*4	ERROR		   	!system error return code
C
C functions
	INTEGER*4	DTI_WRITE_WORD_HEADER 	!writes word to header
	INTEGER*4	DTI_WRITE_LONG_HEADER 	!writes longword to header
	INTEGER*4	DTI_WRITE_REAL_HEADER 	!writes real to header
C
C****************************************************************************
C	Test if the supplied LUN number is valid
	IF (DTI_LUN.LT.1 .OR. DTI_LUN.GT.MAX_DTI) THEN
	  DTI_MINMAX_DATA=DTI__BADLUN		!LUN out of range
	  GOTO 999				!Return
	ENDIF
C
C	Test of the supplied LUN is in use
	IF (.NOT.DTILUN_INUSE(DTI_LUN)) THEN
	  DTI_MINMAX_DATA=DTI__LUNUNUSED	!no file opened on LUN
	  GOTO 999				!Return
	ENDIF
C
C--------------------------------------------------------------------------
C	Get the data type for this file, and call the appropriate
C	routine to obtain the minimum and maximum data values
	IF	(DATA_TYPE(DTI_LUN).EQ.DATA_BYTE) THEN
	  CALL DTI_MINMAX_B(%VAL(SEC_ADDR(DTI_LUN)+DATA_OFFSET(DTI_LUN))
     &			 ,DTI_LUN)
C
	ELSE IF (DATA_TYPE(DTI_LUN).EQ.DATA_WORD) THEN
	  CALL DTI_MINMAX_W(%VAL(SEC_ADDR(DTI_LUN)+DATA_OFFSET(DTI_LUN))
     &			 ,DTI_LUN)
C
	ELSE IF (DATA_TYPE(DTI_LUN).EQ.DATA_LONG) THEN
	  CALL DTI_MINMAX_L(%VAL(SEC_ADDR(DTI_LUN)+DATA_OFFSET(DTI_LUN))
     &			 ,DTI_LUN)
C
	ELSE IF (DATA_TYPE(DTI_LUN).EQ.DATA_REAL) THEN
	  CALL DTI_MINMAX_R(%VAL(SEC_ADDR(DTI_LUN)+DATA_OFFSET(DTI_LUN))
     &			 ,DTI_LUN)
C
	ELSE IF (DATA_TYPE(DTI_LUN).EQ.DATA_BIT) THEN
	  CALL DTI_MINMAX_BIT(%VAL(SEC_ADDR(DTI_LUN)+DATA_OFFSET(DTI_LUN))
     &			 ,DTI_LUN)
	ENDIF
C
C--------------------------------------------------------------------------
C Update file if requested
C
	IF (UPDATE) THEN			! Set up header offset values
	  IF	 (HEADER_TYPE(DTI_LUN).EQ.DTI_MIKE) THEN
	    MIN_WVALUE_OFFSET=DTI_PAN_WMIN
	    MAX_WVALUE_OFFSET=DTI_PAN_WMAX
	    MIN_LVALUE_OFFSET=DTI_PAN_LMIN
	    MAX_LVALUE_OFFSET=DTI_PAN_LMAX
C
	  ELSE IF(HEADER_TYPE(DTI_LUN).EQ.DTI_UHL1) THEN
	    MIN_WVALUE_OFFSET=DTI_DMA_WMIN
	    MAX_WVALUE_OFFSET=DTI_DMA_WMAX
	    MIN_LVALUE_OFFSET=DTI_DMA_LMIN
	    MAX_LVALUE_OFFSET=DTI_DMA_LMAX
C
	  ELSE IF(HEADER_TYPE(DTI_LUN).EQ.DTI_TED4) THEN
	    MIN_WVALUE_OFFSET=DTI_TED_WMIN
	    MAX_WVALUE_OFFSET=DTI_TED_WMAX
	    MIN_LVALUE_OFFSET=DTI_TED_LMIN
	    MAX_LVALUE_OFFSET=DTI_TED_LMAX
C
	  ELSE IF(HEADER_TYPE(DTI_LUN).EQ.DTI_ALVY .OR.
     &            HEADER_TYPE(DTI_LUN).EQ.DTI_LSLA) THEN
	    MIN_WVALUE_OFFSET=DTI_LSLA_WMIN
	    MAX_WVALUE_OFFSET=DTI_LSLA_WMAX
	    MIN_LVALUE_OFFSET=DTI_LSLA_LMIN
	    MAX_LVALUE_OFFSET=DTI_LSLA_LMAX
	  ENDIF
C
C	Write appropriate values to mapped file
C
C	MIN_WVALUE and MAX_WVALUE values
C
	  IF     (DATA_TYPE(DTI_LUN).EQ.DATA_BYTE .OR.
     &            DATA_TYPE(DTI_LUN).EQ.DATA_WORD .OR.
     &            DATA_TYPE(DTI_LUN).EQ.DATA_BIT) THEN
C
	    IERR=DTI_WRITE_WORD_HEADER
     &	         (DTI_LUN,MIN_WVALUE(DTI_LUN),MIN_WVALUE_OFFSET,
     &            ERROR)
	    IF(IERR.NE.DTI__NORMAL)GOTO 900
C
            IERR=DTI_WRITE_WORD_HEADER
     &	         (DTI_LUN,MAX_WVALUE(DTI_LUN),MAX_WVALUE_OFFSET,
     &            ERROR)
	    IF(IERR.NE.DTI__NORMAL)GOTO 900
C
C	MIN_LVALUE and MAX_LVALUE values
C
	  ELSE IF (DATA_TYPE(DTI_LUN).EQ.DATA_LONG) THEN
	    IERR=DTI_WRITE_LONG_HEADER
     &	         (DTI_LUN,MIN_LVALUE(DTI_LUN),MIN_LVALUE_OFFSET,
     &            ERROR)
	    IF(IERR.NE.DTI__NORMAL)GOTO 900
C
            IERR=DTI_WRITE_LONG_HEADER
     &	         (DTI_LUN,MAX_LVALUE(DTI_LUN),MAX_LVALUE_OFFSET,
     &            ERROR)
	    IF(IERR.NE.DTI__NORMAL)GOTO 900
C
C	MIN_RVALUE and MAX_RVALUE values
C
	  ELSE IF (DATA_TYPE(DTI_LUN).EQ.DATA_REAL) THEN
	    IERR=DTI_WRITE_REAL_HEADER
     &	         (DTI_LUN,MIN_RVALUE(DTI_LUN),MIN_LVALUE_OFFSET,
     &            ERROR)
	    IF(IERR.NE.DTI__NORMAL)GOTO 900
C
            IERR=DTI_WRITE_REAL_HEADER
     &	         (DTI_LUN,MAX_RVALUE(DTI_LUN),MAX_LVALUE_OFFSET,
     &            ERROR)
	    IF(IERR.NE.DTI__NORMAL)GOTO 900
C
	  ENDIF
	ENDIF
C
	DTI_MINMAX_DATA = DTI__NORMAL		!signal success
	GOTO 999
C--------------------------------------------------------------------------
C	
900	DTI_MINMAX_DATA=IERR
	RETVAL=ERROR		!pass back system error
C		  
999	RETURN
	END
C
C****************************************************************************
	SUBROUTINE DTI_MINMAX_BIT (DATA_ARRAY,WHICH_DTI) 
C
***	IDENT	02AP87
***	MODULE	DTI_MINMAX_BIT
C
C	Copyright : Laser-Scan, Cambridge, England
C	Author    : D R Catlow
C
C	To determine minimum and maximum data values for a DTI
C	file containing bit data.  Since these can only be 0 or 1,
C	as soon as a single bit is found to be set, the routine
C	returns.  The data is examined as bytes - each byte is
C	tested against 0.
C
C--------------------------------------------------------------------------
C
	IMPLICIT NONE
C
***	COMMON/LSL$CMNDTI:DTIHDR/
C
C arguments
	INTEGER*4	WHICH_DTI		!which DTI file?
CCC	BYTE		DATA_ARRAY(X_EXTENT(WHICH_DTI)*
CCC  &                  (Y_EXTENT(WHICH_DTI)/8))
C
	BYTE		DATA_ARRAY(*)
C Above declaration used to work, but violates the Fortran standard,
C in that an array bound expression may not refer to another array!
C The compiler now objects, so change to assumed size array (*).
C
C local
	INTEGER*4	I			!counter
	INTEGER*4	NUMBER_VALUES		!number of values in
C						!data area
	BYTE		BYTE_VALUE		!byte data value
	INTEGER*2	WORD_VALUE		!unsigned data value
C
	INTEGER*2	MIN_WORD		!unsigned min byte value
	INTEGER*2	MAX_WORD		!unsigned max byte value
C
	EQUIVALENCE (BYTE_VALUE,WORD_VALUE)
C
C---------------------------------------------------------------------------
C Initialise min and max values to something unusable
C There is no null bit value
C
	MIN_WORD   = -1
	MAX_WORD   = -1
C	
	NUMBER_VALUES = X_EXTENT(WHICH_DTI)*(Y_EXTENT(WHICH_DTI)/8)
C
	DO 100 I=1,NUMBER_VALUES
	   BYTE_VALUE = DATA_ARRAY(I)
	   IF (WORD_VALUE.GT.0 .AND. WORD_VALUE.LT.255) GOTO 200
	   IF (WORD_VALUE.EQ.255) MAX_WORD=1
	   IF (WORD_VALUE.EQ.0)   MIN_WORD=0
100	CONTINUE
C 
	IF (MAX_WORD.EQ.-1) MAX_WORD = 0
	IF (MIN_WORD.EQ.-1) MIN_WORD = 1
C
	MIN_WVALUE(WHICH_DTI) = MIN_WORD
	MAX_WVALUE(WHICH_DTI) = MAX_WORD
	GOTO 900
C
C	Update min and max values in DTIHDR
200	MIN_WVALUE(WHICH_DTI) = 0
	MAX_WVALUE(WHICH_DTI) = 1
C
900	RETURN
	END
C
C****************************************************************************
C
	SUBROUTINE DTI_MINMAX_B (DATA_ARRAY,WHICH_DTI) 
C
***	IDENT	13OC86
***	MODULE	DTI_MINMAX_B
C
C	Copyright : Laser-Scan, Cambridge, England
C	Author    : D R Catlow
C
C	MOD	05DE86	byte values always treated as unsigned
C
	IMPLICIT NONE
C
***	COMMON/LSL$CMNDTI:DTIHDR/
***	PARAMETER/LSL$CMNDTI:DTIPAR/
C
C arguments
	INTEGER*4	WHICH_DTI		!which DTI file?
CCC	BYTE		DATA_ARRAY(X_EXTENT(WHICH_DTI)*Y_EXTENT(WHICH_DTI))
	BYTE		DATA_ARRAY(*)
C Above declaration used to work, but violates the Fortran standard,
C in that an array bound expression may not refer to another array!
C The compiler now objects, so change to assumed size array (*).
C
C local
	INTEGER*4	I			!counter
	INTEGER*4	NUMBER_VALUES		!number of values in
C						!data area
	BYTE		BYTE_VALUE		!byte data value
	INTEGER*2	WORD_VALUE		!unsigned data value
C
	INTEGER*2	MIN_WORD		!unsigned min byte value
	INTEGER*2	MAX_WORD		!unsigned max byte value
C
	EQUIVALENCE (BYTE_VALUE,WORD_VALUE)
C
C---------------------------------------------------------------------------
C Initialise min and max values
C There is no null byte value
C
	BYTE_VALUE = DATA_ARRAY(1)
	MIN_WORD   = WORD_VALUE
	MAX_WORD   = WORD_VALUE
C	
	NUMBER_VALUES = X_EXTENT(WHICH_DTI)*Y_EXTENT(WHICH_DTI)
C
	DO 100 I=1,NUMBER_VALUES
	   BYTE_VALUE = DATA_ARRAY(I)
	   IF(WORD_VALUE.LT.MIN_WORD) MIN_WORD = WORD_VALUE
	   IF(WORD_VALUE.GT.MAX_WORD) MAX_WORD = WORD_VALUE
100	CONTINUE
C
C	Update min and max values in DTIHDR
	MIN_WVALUE(WHICH_DTI)=MIN_WORD
	MAX_WVALUE(WHICH_DTI)=MAX_WORD
C
	RETURN
	END
C
C****************************************************************************
C
	SUBROUTINE DTI_MINMAX_W (DATA_ARRAY,WHICH_DTI) 
C
***	IDENT	13OC86
***	MODULE	DTI_MINMAX_W
C
C	Copyright : Laser-Scan, Cambridge, England
C	Author    : D R Catlow
C
CMOD1335 JB  2-Feb-1994 Initialise the WORD values sensibly.
C
	IMPLICIT NONE
C
***	COMMON/LSL$CMNDTI:DTIHDR/
***	PARAMETER/LSL$CMNDTI:DTIPAR/
C
C arguments
	INTEGER*4	WHICH_DTI		!which DTI file?
CCC	INTEGER*2   	DATA_ARRAY(X_EXTENT(WHICH_DTI)*Y_EXTENT(WHICH_DTI))
	INTEGER*2	DATA_ARRAY(*)
C Above declaration used to work, but violates the Fortran standard,
C in that an array bound expression may not refer to another array!
C The compiler now objects, so change to assumed size array (*).
C
C local
	INTEGER*4	I			!counter
	INTEGER*4	NUMBER_VALUES		!number of values in
C						!data area
	INTEGER*2	MIN_WORD		!minimum word value
	INTEGER*2	MAX_WORD		!maximum word value
	LOGICAL		HAD_FIRST
C
C---------------------------------------------------------------------------
C	Initialise min and max values
	MIN_WORD = DTI_NULL_WORD
	MAX_WORD = DTI_NULL_WORD
C	
	HAD_FIRST = .FALSE.
	NUMBER_VALUES = X_EXTENT(WHICH_DTI)*Y_EXTENT(WHICH_DTI)
C
	DO 100 I=1,NUMBER_VALUES
	  IF (.NOT.HAD_FIRST .AND. DATA_ARRAY(I).NE.DTI_NULL_WORD) THEN
	    MIN_WORD = DATA_ARRAY(I)
	    MAX_WORD = DATA_ARRAY(I)
	    HAD_FIRST = .TRUE.
	  ENDIF
C
C Skip any NULL data values
	  IF (DATA_ARRAY(I).EQ.DTI_NULL_WORD) GOTO 100
C
	  MIN_WORD = MIN(DATA_ARRAY(I),MIN_WORD)
	  MAX_WORD = MAX(DATA_ARRAY(I),MAX_WORD)
100	CONTINUE
C
C	Check for final values being the same as the initial values.
C	This will only arise if the file contains data values of
C	only -32767, NULL
C
	IF (MIN_WORD.EQ.DTI_NULL_WORD .AND. MAX_WORD.EQ.DTI_NULL_WORD) THEN
	  MIN_WORD = 0
	  MAX_WORD = 0
	ENDIF
C
C	Update min and max values in DTIHDR
	MIN_WVALUE(WHICH_DTI) = MIN_WORD
	MAX_WVALUE(WHICH_DTI) = MAX_WORD
C
	RETURN
	END
C
C****************************************************************************
C
	SUBROUTINE DTI_MINMAX_L (DATA_ARRAY,WHICH_DTI) 
C
***	IDENT	13OC86
***	MODULE	DTI_MINMAX_L
C
C	Copyright : Laser-Scan, Cambridge, England
C	Author    : D R Catlow
C
CMOD1335 JB  2-Feb-1994 Initialise the LONG values sensibly.
C
	IMPLICIT NONE
C
***	COMMON/LSL$CMNDTI:DTIHDR/
***	PARAMETER/LSL$CMNDTI:DTIPAR/
C
C arguments
	INTEGER*4	WHICH_DTI		!which DTI file?
CCC	INTEGER*4   	DATA_ARRAY(X_EXTENT(WHICH_DTI)*Y_EXTENT(WHICH_DTI))
	INTEGER*4	DATA_ARRAY(*)
C Above declaration used to work, but violates the Fortran standard,
C in that an array bound expression may not refer to another array!
C The compiler now objects, so change to assumed size array (*).
C
C local
	INTEGER*4	I			!counter
	INTEGER*4	NUMBER_VALUES		!number of values in
C						!data area
	INTEGER*4	MIN_LONG		!minimum longword value
	INTEGER*4	MAX_LONG		!maximum longword value
	LOGICAL 	HAD_FIRST
C
C---------------------------------------------------------------------------
C	Initialise min and max values
C
	MIN_LONG = DTI_NULL_LONG
	MAX_LONG = DTI_NULL_LONG
C	
	HAD_FIRST = .FALSE.
	NUMBER_VALUES = X_EXTENT(WHICH_DTI)*Y_EXTENT(WHICH_DTI)
C
	DO 100 I=1,NUMBER_VALUES
	  IF (.NOT.HAD_FIRST .AND. DATA_ARRAY(I).NE.DTI_NULL_LONG) THEN
	    MIN_LONG = DATA_ARRAY(I)
	    MAX_LONG = DATA_ARRAY(I)
	    HAD_FIRST = .TRUE.
	  ENDIF
C
C Skip any null values
	  IF (DATA_ARRAY(I).EQ.DTI_NULL_LONG) GOTO 100
C
	  MIN_LONG = MIN(DATA_ARRAY(I),MIN_LONG)
	  MAX_LONG = MAX(DATA_ARRAY(I),MAX_LONG)
100	CONTINUE
C
C	Check for final values being both null values.
	IF (MIN_LONG.EQ.DTI_NULL_LONG .AND. MAX_LONG.EQ.DTI_NULL_LONG) THEN
	  MIN_LONG = 0
	  MAX_LONG = 0
	ENDIF
C
C	Update min and max values in DTIHDR
	MIN_LVALUE(WHICH_DTI) = MIN_LONG
	MAX_LVALUE(WHICH_DTI) = MAX_LONG
C
	RETURN
	END
C
C****************************************************************************
C
	SUBROUTINE DTI_MINMAX_R (DATA_ARRAY,WHICH_DTI) 
C
***	IDENT	13AU91
***	MODULE	DTI_MINMAX_R
C
C	Copyright : Laser-Scan, Cambridge, England
C	Author    : D R Catlow
C
CMOD1045	  : J Barber	13 August 1991
C		    Fix initialisation of real values to cope with 
C		    a DTI file with negative values
C
CMOD1335 JB  2-Feb-1994 Initialise the REAL values sensibly.
C
	IMPLICIT NONE
C
***	COMMON/LSL$CMNDTI:DTIHDR/
***	PARAMETER/LSL$CMNDTI:DTIPAR/
C
C arguments
	INTEGER*4	WHICH_DTI		!which DTI file?
CCC	REAL		DATA_ARRAY(X_EXTENT(WHICH_DTI)*Y_EXTENT(WHICH_DTI))
	REAL		DATA_ARRAY(*)
C
C Above declaration used to work, but violates the Fortran standard,
C in that an array bound expression may not refer to another array!
C The compiler now objects, so change to assumed size array (*).
C
C local
	INTEGER*4	I			!counter
	INTEGER*4	NUMBER_VALUES		!number of values in
C						!data area
	REAL		MIN_REAL		!minimum real value
	REAL		MAX_REAL		!maximum real value
	LOGICAL		HAD_FIRST
C
C---------------------------------------------------------------------------
C Initialise min and max values
C
c	MIN_REAL =  1.7E38
c	MAX_REAL = -1.7E38
c
	MAX_REAL = DTI_NULL_REAL		! NB 1.0E-38 (-0.0) = 
	MIN_REAL = DTI_NULL_REAL		! a sensible value
C
C Leaves -0.0 as max value for DTI files with all negative values
C	MAX_REAL = DTI_NULL_REAL
C
	HAD_FIRST = .FALSE.
	NUMBER_VALUES = X_EXTENT(WHICH_DTI)*Y_EXTENT(WHICH_DTI)
C
	DO 100 I=1,NUMBER_VALUES
	  IF (.NOT.HAD_FIRST .AND. DATA_ARRAY(I).NE.DTI_NULL_REAL) THEN
	    MIN_REAL = DATA_ARRAY(I)
	    MAX_REAL = DATA_ARRAY(I)
	    HAD_FIRST = .TRUE.
	  ENDIF
C
C Skip any null values
	  IF (DATA_ARRAY(I).EQ.DTI_NULL_REAL) GOTO 100
C
	  MIN_REAL = AMIN1(DATA_ARRAY(I),MIN_REAL)
	  MAX_REAL = AMAX1(DATA_ARRAY(I),MAX_REAL)
100	CONTINUE
C
C Check for final values being both null values.
	IF (MIN_REAL.EQ.DTI_NULL_REAL .AND. MAX_REAL.EQ.DTI_NULL_REAL) THEN
	  MIN_REAL = 0
	  MAX_REAL = 0
	ENDIF
C
C Update min and max values in DTIHDR
	MIN_RVALUE(WHICH_DTI) = MIN_REAL
	MAX_RVALUE(WHICH_DTI) = MAX_REAL
C
	RETURN
	END
C
