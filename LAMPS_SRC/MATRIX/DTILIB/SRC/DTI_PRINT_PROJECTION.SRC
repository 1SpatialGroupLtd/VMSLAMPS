C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-03-05 10:25:00.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        INTEGER*4 FUNCTION DTI_PRINT_PROJECTION(DTI_LUN)
C
***	IDENT	05MR93
***	MODULE	DTI_PRINT_PROJECTION
C
C 	Copyright Laser-Scan Laboratories Ltd.,Cambridge,England
C 	Author  : D R Catlow
C	Created : 1 August 1988
C
C	Modified:
CMOD	wi 93/3	RWR 1-Mar-1993	Add extra projections (Cassini,Krovak,
C                               Bonne, Mollweide, Hammer-Aitoff and
C                               Winkel III
C				Also, initialise data from the block data
C				in IFFLIB
C
C	DTILIB Function
C
C	Function to print projection details from
C	the Projection Record for the DTI file opened on DTI_LUN.
C	The projection details are printed from the DTIPROJ
C	common block, and not from the header of the mapped
C	DTI file.
C	Note only details that can be extracted from the common
C	block variables are shown, and no calls to GCTPLIB routines
C	to work out additional information are made.
C	Compare information displayed by similar DTITRANS routine.
C
C----------------------------------------------------------------------
	IMPLICIT NONE
C
C	DTILIB commons
***	COMMON   /LSL$CMNDTI:DTIHDR/
***	COMMON	 /LSL$CMNDTI:DTIPROJ/
***	PARAMETER/LSL$CMNDTI:DTIPAR/
***	PARAMETER/LSL$CMNDTI:DTILIBMSG/
C
***	COMMON   /LSL$CMNIFF:MD2NAM/	!holds MD variables that are
C					!used by DTILIB to ensure
C					!compatability with ITRANS.
C
C Argument:
	INTEGER*4	DTI_LUN		!which DTI file
C
C Locals:
	INTEGER*4	I		!counter
	INTEGER*4	PROJ_INDEX	!projection index
	INTEGER*4	UNIT_INDEX	!units index
	INTEGER*4	SPHEROID_INDEX	!spheroid index
	CHARACTER*1	TYPE		!format for projs 8 & 20
	INTEGER*4	ZONE		!zone identifier
	INTEGER*4	UNIT
C
	CHARACTER*45	ZONESTR
	DATA		ZONESTR/'Zone'/
C
C Parameters
	INTEGER*4	LAT,LONG
	PARAMETER	(LONG=1,LAT=2)
	INTEGER*4	SCL,COORD
	PARAMETER	(COORD=0,SCL=1)
C
C Functions:
	INTEGER*4	SIGCHS	!determines number of significant chs.
C
C****************************************************************************
C
C	Test if the supplied LUN number is valid
	IF(DTI_LUN.LT.1.OR.DTI_LUN.GT.MAX_DTI)THEN
	  DTI_PRINT_PROJECTION=DTI__BADLUN	!LUN out of range
	  GOTO 9999				!Return
 	ENDIF
C
C	Test of the supplied LUN is in use
	IF(.NOT.DTILUN_INUSE(DTI_LUN))THEN
	  DTI_PRINT_PROJECTION=DTI__LUNUNUSED	!no file opened on LUN
	  GOTO 9999				!Return
	ENDIF
C
C-----------------------------------------------------------------------
C	Set up block data
	CALL DTI_PROJDATA
C
C	Print details.
	CALL WRITEF(' ')
C	
C	First the spheroid.
	DO 100, I=1,MD2_NOSPH
	   IF(DTIPROJ_SPHEROID(DTI_LUN).EQ.MD2_SPHCD(I))GOTO 150
100	CONTINUE	 
C
C 	Invalid spheroid code
        CALL WRITEF('Spheroid      :%^L%I4 (Unrecognised)',
     &              DTIPROJ_SPHEROID(DTI_LUN))
	GOTO 180
C
150	SPHEROID_INDEX=I
        CALL WRITEF('Spheroid      :%^L%I4 (%S)',
     &      MD2_SPHCD(SPHEROID_INDEX),
     &	    MD2_SPH(SPHEROID_INDEX)(1:SIGCHS(MD2_SPH(SPHEROID_INDEX))))
C
C	If user defined spheroid, print out associated values
	IF(DTIPROJ_SPHEROID(DTI_LUN).EQ.101)CALL WRITEF
     &	   ('  defined as %^D%F0.3 %F0.3',
     &	   DTIPROJ_USER_SPHEROID(1,DTI_LUN),
     &	   DTIPROJ_USER_SPHEROID(2,DTI_LUN))
C
C----------------------------------------------------------------------
C	Projection Identifier
180	DO 200, I=1,MD2_NOPRJ
	   IF(DTIPROJ_PROJECTION(DTI_LUN).EQ.MD2_PRJCD(I))GOTO 250
200	CONTINUE
C
C	Invalid projection code
	CALL WRITEF('Projection    :%^L%I4 (Unrecognised)',
     &              DTIPROJ_PROJECTION(DTI_LUN))
	GOTO 3000
C
C----------------------------------------------------------------------
250	PROJ_INDEX=I
	IF(DTIPROJ_PROJECTION(DTI_LUN).NE.8.AND.
     &     DTIPROJ_PROJECTION(DTI_LUN).NE.20.AND.
     &     DTIPROJ_PROJECTION(DTI_LUN).NE.21)THEN
	   CALL WRITEF
     &          ('Projection    :%^L%I4 (%S)',
     &          MD2_PRJCD(PROJ_INDEX),
     &	        MD2_PRJ(PROJ_INDEX)(3:SIGCHS(MD2_PRJ(PROJ_INDEX))))
	ELSE
C    Find variant of projection:
	   IF ((DTIPROJ_PROJECTION(DTI_LUN).EQ.8.AND.
     &        DTIPROJ_PROJ_PARAMS(9,DTI_LUN).EQ.0.0).OR.
     &	      ((DTIPROJ_PROJECTION(DTI_LUN).EQ.20.OR.
     &        DTIPROJ_PROJECTION(DTI_LUN).EQ.21).AND.
     &        DTIPROJ_PROJ_PARAMS(13,DTI_LUN).EQ.0.0))THEN
	      TYPE='A'
	   ELSE
	      TYPE='B'
	   ENDIF
C
	   CALL WRITEF('Projection    :%^L%I4 (%S - format %S)',
     &	               MD2_PRJCD(PROJ_INDEX),MD2_PRJ(PROJ_INDEX)
     &	               (3:SIGCHS(MD2_PRJ(PROJ_INDEX))),TYPE)
	ENDIF
C
C----------------------------------------------------------------------
C 	Branch according to projection index
C
	GOTO (3000,400,450,500,500,550,550,600,650,700,750,750,750,
     &	      750, 750,800,850,850,850,850,900,950,1000,
     &	      500,1050,1100,850,850,850,
     &	      3000,3000) PROJ_INDEX
C
C----------------------------------------------------------------------
C 	UTM - only if zone 0
400	CALL WRITEF(' ')
C
	ZONE=DTIPROJ_PROJ_PARAMS(3,DTI_LUN)
	IF(DTIPROJ_PROJ_PARAMS(2,DTI_LUN).LT.0.0) THEN
	  CALL WRITEF('   %S:%I5 (Southern hemisphere)',
     &	               ZONESTR,ZONE)
	ELSE
	  CALL WRITEF('   %S:%I5',ZONESTR,ZONE)
	ENDIF
C
	IF(ZONE.EQ.0) THEN		! need point in geographicals
	  CALL DTI_OUTANG('Longitude of a point in the UTM zone',
     &                 DTIPROJ_PROJ_PARAMS(1,DTI_LUN),
     &	               LONG)
	ENDIF
	GOTO 3000
C
C----------------------------------------------------------------------
C 	State Plane Coordinate system
450	CALL WRITEF(' ')
	ZONE=DTIPROJ_PROJ_PARAMS(3,DTI_LUN)
	CALL WRITEF('   %S:%I5',ZONESTR,ZONE)
	GOTO 3000
C
C----------------------------------------------------------------------
C 	Albers Conical equal area and Lambert Conformal Conic, and Cassini
500	CALL WRITEF(' ')
C
C 	Latitude of standard parallels
	CALL DTI_OUTANG('Latitude of 1st standard parallel',
     &              DTIPROJ_PROJ_PARAMS(3,DTI_LUN),LAT)
	CALL DTI_OUTANG('Latitude of 2nd standard parallel',
     &              DTIPROJ_PROJ_PARAMS(4,DTI_LUN),LAT)
C
	GOTO 2500	!to print out other details
C
C----------------------------------------------------------------------
C 	Mercator and Polar Stereographic
550	CALL WRITEF(' ')
C
C 	Latitude of true scale
	CALL DTI_OUTANG('Latitude of true scale',
     &              DTIPROJ_PROJ_PARAMS(6,DTI_LUN),LAT)
C
C 	Longitude of central meridian (for Mercator)
	IF(PROJ_INDEX.EQ.6) THEN
	  CALL DTI_OUTANG('Longitude of the central meridian',
     &                DTIPROJ_PROJ_PARAMS(5,DTI_LUN),LONG)
C
C 	Polar sterographic, longitude straight down from the pole
	ELSE
	   CALL DTI_OUTANG('Longitude down from N Pole (up from S)',
     &                DTIPROJ_PROJ_PARAMS(5,DTI_LUN),LONG)
	ENDIF
C
	GOTO 2750	!remaining details
C
C----------------------------------------------------------------------
C 	Polyconic
600	CONTINUE
C 	Similar to other conics,therefore
C
	GOTO 2500
C
C----------------------------------------------------------------------
C 	Equidistant Conic 
C
650	CONTINUE
C	Type B is same as other conics
	IF(TYPE.EQ.'B')GOTO 500
C
C 	Type A is slightly different
	CALL WRITEF(' ')
	CALL DTI_OUTANG('Latitude of standard parallel',
     &               DTIPROJ_PROJ_PARAMS(3,DTI_LUN),LAT)
C
	GOTO 2500	!remaining details
C
C----------------------------------------------------------------------
C 	Transverse Mercator
700	CALL WRITEF(' ')
C
C 	Scale factor of Central meridian
	CALL DTI_OUTDBL('Scale factor on central meridian',
     &               DTIPROJ_PROJ_PARAMS(3,DTI_LUN),SCL)
C
	GOTO 2500	!remaining details
C
C----------------------------------------------------------------------
C 	Stereographic, Lambert Azimuthal Equal Area, Azimuthal,
C	Gnomonic and Orthographic 
750	CALL WRITEF(' ')
C
C	Latitude and Longitude of centre of projection
	CALL DTI_OUTANG('Latitude  of centre of projection',
     &               DTIPROJ_PROJ_PARAMS(6,DTI_LUN),LAT)
	CALL DTI_OUTANG('Longitude of centre of projection',
     &               DTIPROJ_PROJ_PARAMS(5,DTI_LUN),LONG)
C
	GOTO 2750	!remaining details
C
C----------------------------------------------------------------------
C 	General Vertical Near-side Perspective
800	CALL WRITEF(' ')
C
C 	Height of perspective point above surface
	CALL DTI_OUTDBL('Height of perspective point above surface',
     &	             DTIPROJ_PROJ_PARAMS(3,DTI_LUN),COORD)
C
C	Latitude and Longitude of centre of projection
	CALL DTI_OUTANG('Latitude  of centre of projection',
     &               DTIPROJ_PROJ_PARAMS(6,DTI_LUN),LAT)
	CALL DTI_OUTANG('Longitude of centre of projection',
     &               DTIPROJ_PROJ_PARAMS(5,DTI_LUN),LONG)
C
	GOTO 2750	!remaining details
C
C----------------------------------------------------------------------
C 	Sinusoidal, Miller Cylindrical,Van der Grinten projection
C 	and Equi-Rectangular, Mollweide, Hammer-Aitoff and Winkel III
850	CALL WRITEF(' ')
C
C 	Latitude of true scale, for equi-rectangular projection
	IF (PROJ_INDEX.EQ.17)
     &	CALL DTI_OUTANG('Latitude of true scale',
     &              DTIPROJ_PROJ_PARAMS(6,DTI_LUN),LAT)
C
C 	Longitude of central meridian
	CALL DTI_OUTANG('Longitude of central meridian',
     &               DTIPROJ_PROJ_PARAMS(5,DTI_LUN),LONG)
C
	GOTO 2750	!remaining details
C
C----------------------------------------------------------------------
C 	Oblique Mercator (Hotine)
900	CALL WRITEF(' ')
C
C 	Scale factor at centre of projection
	CALL DTI_OUTDBL('Scale factor at centre of projection',
     &	            DTIPROJ_PROJ_PARAMS(3,DTI_LUN),SCL)
C
C 	For Type B, print azimuth angle east of north of central line
C	and long. of point on central line where azimuth is measured
	IF (TYPE.EQ.'B') THEN
	   CALL DTI_OUTANG('Azimuth of central line (east of north)',
     &	                DTIPROJ_PROJ_PARAMS(4,DTI_LUN),0)
	   CALL DTI_OUTANG('Longitude of point on central line where '//
     &	               'azimuth measured',
     &                  DTIPROJ_PROJ_PARAMS(5,DTI_LUN),LONG)
	ENDIF
C
C 	Latitude of centre of map, and false origin
	CALL DTI_OUTANG('Latitude of the origin of projection',
     &               DTIPROJ_PROJ_PARAMS(6,DTI_LUN),LAT)
	CALL DTI_OUTDBL('Eastings  of origin',
     &               DTIPROJ_PROJ_PARAMS(7,DTI_LUN),COORD)
	CALL DTI_OUTDBL('Northings of origin',
     &               DTIPROJ_PROJ_PARAMS(8,DTI_LUN),COORD)
C
C 	Type A - end points of central line
C
	IF (TYPE.EQ.'A') THEN
	   CALL DTI_OUTANG('Latitude  of 1st point on central line',
     &	                DTIPROJ_PROJ_PARAMS(10,DTI_LUN),LAT)
	   CALL DTI_OUTANG('Longitude of 1st point on central line',
     &	                DTIPROJ_PROJ_PARAMS(9,DTI_LUN),LONG)
	   CALL DTI_OUTANG('Latitude  of 2nd point on central line',
     &	                DTIPROJ_PROJ_PARAMS(12,DTI_LUN),LAT)
	   CALL DTI_OUTANG('Longitude of 2nd point on central line',
     &	                DTIPROJ_PROJ_PARAMS(11,DTI_LUN),LONG)
	ENDIF
C
	GOTO 3000
C
C----------------------------------------------------------------------
C 	Oblique Mercator (Spherical)
950	CALL WRITEF(' ')
C
C	NB. FALSE EASTINGS AND NORTHINGS ARE NOT PRINTED SINCE
C	THIS WOULD REQUIRE A CALL TO GCTPLIB.
C
C 	Scale factor at centre of projection
	CALL DTI_OUTDBL('Scale factor on false equator',
     &               DTIPROJ_PROJ_PARAMS(3,DTI_LUN),SCL)

C 	False origin (in geographicals).....
	CALL DTI_OUTANG('Latitude  of datum',
     &               DTIPROJ_PROJ_PARAMS(8,DTI_LUN),LAT)
	CALL DTI_OUTANG('Longitude of datum',
     &               DTIPROJ_PROJ_PARAMS(7,DTI_LUN),LONG)
C
C 	Type A - end points of central line
	IF (TYPE.EQ.'A') THEN
	   CALL DTI_OUTANG('Latitude  of 1st point on central line',
     &	                DTIPROJ_PROJ_PARAMS(10,DTI_LUN),LAT)
	   CALL DTI_OUTANG('Longitude of 1st point on central line',
     &	                DTIPROJ_PROJ_PARAMS(9,DTI_LUN),LONG)
	   CALL DTI_OUTANG('Latitude  of 2nd point on central line',
     &	                DTIPROJ_PROJ_PARAMS(12,DTI_LUN),LAT)
	   CALL DTI_OUTANG('Longitude of 2nd point on central line',
     &	                DTIPROJ_PROJ_PARAMS(11,DTI_LUN),LONG)
C
	ELSE
C
C 	Type B - geographical coordinates of vertex
	   CALL DTI_OUTANG('Latitude  of vertex of central line',
     &	                DTIPROJ_PROJ_PARAMS(10,DTI_LUN),LAT)
	   CALL DTI_OUTANG('Longitude of vertex of central line',
     &	                DTIPROJ_PROJ_PARAMS(9,DTI_LUN),LONG)
	ENDIF
C
	GOTO 3000
C
C----------------------------------------------------------------------
C 	Stereographic (UKSL format)
1000	CALL WRITEF(' ')
C
	IF (DTIPROJ_PROJ_PARAMS(4,DTI_LUN).GT.0.0) 
     &	   CALL DTI_OUTDBL('Radius of Conformal Earth',
     &     DTIPROJ_PROJ_PARAMS(4,DTI_LUN),COORD)
C
	CALL DTI_OUTANG('Latitude  of centre of projection',
     &               DTIPROJ_PROJ_PARAMS(6,DTI_LUN),LAT)
	CALL DTI_OUTANG('Longitude of centre of projection',
     &               DTIPROJ_PROJ_PARAMS(5,DTI_LUN),LONG)
C
	GOTO 2750	!for remainder
C
C
C----------------------------------------------------------------------
C 	Krovak
1050	CALL WRITEF(' ')
	CALL DTI_OUTANG('Latitude for conformal projection to sphere',
     &	                DTIPROJ_PROJ_PARAMS(9,DTI_LUN),LAT)
	CALL DTI_OUTANG('Latitude of origin',
     &	                DTIPROJ_PROJ_PARAMS(4,DTI_LUN),LAT)
	CALL DTI_OUTANG('Longitude of origin',
     &	                DTIPROJ_PROJ_PARAMS(3,DTI_LUN),LONG)
	CALL DTI_OUTANG('Latitude of origin on oblique sphere',
     &	                DTIPROJ_PROJ_PARAMS(5,DTI_LUN),LAT)
	CALL DTI_OUTDBL('Scale factor on standard line through origin',
     &	               DTIPROJ_PROJ_PARAMS(6,DTI_LUN),SCL )
C
C and false origin
	GOTO 2750
C
C----------------------------------------------------------------------
C	Bonne
1100	CALL FLWRTF(' ')
	CALL DTI_OUTANG('Latitude of standard parallel',
     &	                  DTIPROJ_PROJ_PARAMS(3,DTI_LUN),LAT)
	CALL DTI_OUTANG('Longitude of the central meridian',
     &	                  DTIPROJ_PROJ_PARAMS(5,DTI_LUN),LONG)
C
C and false origin
	GOTO 2750
C
C----------------------------------------------------------------------
C 	Long of central meridian, latitude of origin, false eastings
C 	and false northings (often common with other projections)
2500	CONTINUE
	CALL DTI_OUTANG('Latitude  of the projection origin',
     &               DTIPROJ_PROJ_PARAMS(6,DTI_LUN),LAT)
	CALL DTI_OUTANG('Longitude of the central meridian',
     &               DTIPROJ_PROJ_PARAMS(5,DTI_LUN),LONG)
C
2750	CONTINUE
	CALL DTI_OUTDBL('Eastings  of origin',
     &               DTIPROJ_PROJ_PARAMS(7,DTI_LUN),COORD)
	CALL DTI_OUTDBL('Northings of origin',
     &               DTIPROJ_PROJ_PARAMS(8,DTI_LUN),COORD)
C
C----------------------------------------------------------------------
C	Units
3000	CALL WRITEF(' ')
	DO 3100 I=1,MD2_NOUNT
	   IF(DTIPROJ_UNITS(DTI_LUN).EQ.MD2_UNTCD(I))GOTO 3250
3100	CONTINUE
C
C 	Invalid unit code
	CALL WRITEF('Units         :%^L%I4 (Unrecognised)',
     &              DTIPROJ_UNITS(DTI_LUN))
	GOTO 4000
C
3250	UNIT_INDEX=I
C 	All spheroids known by GCTP are specified in International 
C	metres. If user specified spheroid, then we talk about 
C	projection units.
C 	Also when dealing with Oblique Stereographic (UKSL format) 
C	with user specified conformal earth's radius, then talk
C 	about projection units
C
	IF (DTIPROJ_SPHEROID(DTI_LUN).EQ.101.OR.
     &	   DTIPROJ_PROJECTION(DTI_LUN).EQ.22.AND.
     &     DTIPROJ_PROJ_PARAMS(4,DTI_LUN).GT.0.0) THEN
	   MD2_UNT(3)='projection units'
	ELSE
	   MD2_UNT(3)='metres'
	ENDIF
C
	CALL WRITEF('Units         :%^L%I4 (%S)',
     &              MD2_UNTCD(UNIT_INDEX),
     &	            MD2_UNT(UNIT_INDEX)(1:SIGCHS(MD2_UNT(UNIT_INDEX))))
C
C----------------------------------------------------------------------
C 	Local origin ie. SW corner
4000	IF(DTIPROJ_PROJECTION(DTI_LUN).EQ.100)THEN
	  CALL WRITEF('Local origin  : %^D%F15.3 (Latitude) '//
     &	               '%F15.3 (Longitude)',
     &                 DTIPROJ_ORIGIN(2,DTI_LUN),
     &                 DTIPROJ_ORIGIN(1,DTI_LUN))
	ELSE
	  CALL WRITEF('Local origin  : %^D%F15.3 (Eastings) '//
     &	               '%F15.3 (Northings)',
     &                 DTIPROJ_ORIGIN(1,DTI_LUN),
     &                 DTIPROJ_ORIGIN(2,DTI_LUN))
	ENDIF
C
C----------------------------------------------------------------------
C	Sample values
5000	IF(DTIPROJ_PROJECTION(DTI_LUN).EQ.100)THEN
	  CALL WRITEF('Sample values : %^D%F15.3 (Latitude) '//
     &	               '%F15.3 (Longitude)',
     &                 DTIPROJ_SAMPLE(2,DTI_LUN),
     &                 DTIPROJ_SAMPLE(1,DTI_LUN))
C
	ELSE
	  CALL WRITEF('Sample values : %^D%F15.3 (Eastings) '//
     &	               '%F15.3 (Northings)',
     &                 DTIPROJ_SAMPLE(1,DTI_LUN),
     &                 DTIPROJ_SAMPLE(2,DTI_LUN))
	ENDIF
C
C
C----------------------------------------------------------------------
	DTI_PRINT_PROJECTION=DTI__NORMAL
C
C----------------------------------------------------------------------
C
9999	RETURN
C
	END
C
C*************************************************************************
C
	SUBROUTINE DTI_OUTANG(PROMPT,PACKED_ANGLE,FLG)
C
***	IDENT 01AU88
***	MODULE DTI_OUTANG
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C	Author    : D R Catlow
C
C	Routine called from DTI_PRINT_PROJECTION to convert from
C	packed Degrees Minutes and Seconds format to seconds.
C	Packed format is SDDDMMSSS.SSS
C	Based on GCTPLIB function PAKS$0
C
	IMPLICIT NONE
C
C	Arguments:
	CHARACTER*(*)	PROMPT		! prompt to use
	INTEGER*4	FLG		! type of angle
					! = 0 for a signed  angle
					! = 1 for longitude
					! = 2 for latitude
	REAL*8		PACKED_ANGLE	! value in DMS packed
C					! format
C	Locals:
	INTEGER*4	DEGS		! degrees
	INTEGER*4	MINS		! minutes
	REAL		SECS		! seconds
	BYTE		HEMI		! hemisphere character
	LOGICAL		MINUS		!.t. if negative value
	CHARACTER*45	TEMP		! to contain prompt
C
C-------------------------------------------------------------------------
C	Unpack the degrees, minutes and seconds
C	
	IF(PACKED_ANGLE.LT.0)MINUS=.TRUE.
	PACKED_ANGLE = DABS(PACKED_ANGLE)
C
C	Extract the degrees field
	DEGS = PACKED_ANGLE/1000000.0
C
C	Extract the minutes field
	MINS = (PACKED_ANGLE - DEGS * 1000000) / 1000
C
C	Extract the seconds field
	SECS = PACKED_ANGLE - DEGS * 1000000 - MINS * 1000
C
C--------------------------------------------------------------------------
C	Output the unpacked value
C
	IF (MINUS) THEN
	   IF (FLG.EQ.0) THEN
	      HEMI='-'
	   ELSEIF (FLG.EQ.1) THEN
	      HEMI='W'
	   ELSE
	      HEMI='S'
	   ENDIF
	ELSE
	   IF (FLG.EQ.0) THEN
	      HEMI='+'
	   ELSEIF (FLG.EQ.1) THEN
	      HEMI='E'
	   ELSE
	      HEMI='N'
	   ENDIF
	ENDIF
C
	TEMP=PROMPT
C
	IF (FLG.EQ.0) THEN
	   IF (SECS.GT.9.9995) THEN
	      CALL EXPAND('   %S: %^B%C%I3 %P0%I2 %^D%^P%F6.3',
     &	               TEMP,HEMI,DEGS,MINS,SECS)
	   ELSE
	      CALL EXPAND('   %S: %^B%C%I3 %P0%I2 0%^D%^P%F5.3',
     &	               TEMP,HEMI,DEGS,MINS,SECS)
	   ENDIF
	ELSE
	   IF (SECS.GT.9.9995) THEN
	      CALL EXPAND('   %S:  %I3 %P0%I2 %^D%^P%F6.3%^B%C',
     &	               TEMP,DEGS,MINS,SECS,HEMI)
	   ELSE
	      CALL EXPAND('   %S:  %I3 %P0%I2 0%^D%^P%F5.3%^B%C',
     &	               TEMP,DEGS,MINS,SECS,HEMI)
	   ENDIF
	ENDIF
C
	CALL TTWSTR
C
	RETURN
C
	END
C---------------------------------------------------------------------
C
	SUBROUTINE DTI_OUTDBL(PROMPT,VAL,FORMAT)
C
***	MODULE DTI_OUTDBL
***	IDENT 29JL88
C
C 	Copyright Laser-Scan Laboratories Ltd.,Cambridge,England
C 	Author    Ron Russell				15-Jan-1986
C
C       This subroutine outputs a string followed by an R*8 value
C
	IMPLICIT NONE
C
C arguments
C
	REAL*8		VAL	
	CHARACTER*(*)	PROMPT		! prompt to use
	INTEGER*4	FORMAT		! = 1 for scale format
					! = not 1, for coordinate format
C
C w/s
C
	CHARACTER*45	TEMP
C
C copy string into a length that we know
C
	TEMP=PROMPT
C
C and output it to selected channel
C
	IF (FORMAT.NE.1) THEN
	   CALL WRITEF('   %S:%^D%F16.3',TEMP,VAL)
	ELSE
	   CALL WRITEF('   %S:    %^D%F0.9',TEMP,VAL)
	ENDIF
C
	RETURN
	END
C
C**************************************************************************
C
	SUBROUTINE DTI_PROJDATA
C
***	MODULE	DTI_PROJDATA
***	IDENT	05JN87
C
C	Copyright: Laser-Scan Laboratories Ltd., Cambridge, England.
C	
CMOD	RWR 1-Mar-1993 - just make sure we have the initialised common
C			 block by externalling it.
C
C	To set up sheroid, units and projection codes
C
***	COMMON/LSL$CMNIFF:MD2NAM/
C
	EXTERNAL	MD2DAT
C
	RETURN
C
	END

