C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-04-05 16:11:48.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION DTI_WIN_UNITS_TO_MATRIX(DTI_LUN, 
     &  X_VAL_SW,Y_VAL_SW, X_VAL_NE, Y_VAL_NE, 
     &  UNITS, ROTATION, 
     &  ABSOLUTE, 
     &  X_MATRIX_SW,Y_MATRIX_SW, X_MATRIX_NE, Y_MATRIX_NE )
C
***	MODULE	DTI_WIN_UNITS_TO_MATRIX
***	IDENT	05AP89
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
CMOD	Don't switch coordinates for UNITS_DTI  MWSR    05_Apr-1989
CMOD	Add BADWINDOW return code		MWSR    17-Mar-1989
C 	Created					MWSR    03-Feb-1989
C
C converts window coordinates in specified units into DTI matrix units
C taking into account 
C whether supplied values are absolute or relative or whether the 
C file is rotated.
C Note that the routine does no checking for validity of units against
C type of DTI file.
C
C----------------------------------------------------------------------
C
	IMPLICIT NONE
C
C parameters
***	PARAMETER/LSL$CMNDTI:DTIDEF/
***	PARAMETER/LSL$CMNDTI:DTIPAR/
***	PARAMETER/LSL$CMNDTI:DTILIBMSG/
C
***	COMMON/LSL$CMNDTI:DTIHDR/
***	COMMON/LSL$CMNDTI:DTIPROJ/
C
C arguments
	INTEGER*4	DTI_LUN	    	!IN - LUN on which DTI is open
	REAL*8		X_VAL_SW	!IN - x sw coordinate
	REAL*8		Y_VAL_SW	!IN - y sw coordinate
	REAL*8		X_VAL_NE	!IN - x ne coordinate
	REAL*8		Y_VAL_NE	!IN - Y ne coordinate
	INTEGER*4	UNITS		!IN - What type of UNITS? 
	INTEGER*4	ROTATION	!IN - position of origin
	LOGICAL		ABSOLUTE	!IN - relative or absolute 
	INTEGER*4	X_MATRIX_SW	!OUT - x matrix sw
	INTEGER*4	Y_MATRIX_SW	!OUT - y matrix sw
	INTEGER*4	X_MATRIX_NE	!OUT - x matrix ne
	INTEGER*4	Y_MATRIX_NE	!OUT - y matrix ne
C
C function
	INTEGER*4	DTI_UNITS_TO_MATRIX
	LOGICAL		HAVE_I_AN_ARG
C
C Local Variables
	REAL*4		TEMPX, TEMPY
	INTEGER*4	ROTATE
	LOGICAL		HAD_ABSOLUTE
	REAL*4		X1,X2,Y1,Y2
C
C check for optional values
	IF(HAVE_I_AN_ARG(8))THEN
	  HAD_ABSOLUTE = ABSOLUTE
	ELSE
	  HAD_ABSOLUTE = .TRUE.	!by default add offset values
	ENDIF
C
	IF(.NOT.HAVE_I_AN_ARG(7))THEN
	  ROTATE = 0		!default no rotation
	ELSE
	  ROTATE = ROTATION
	ENDIF
C
C convert the corner values
	DTI_WIN_UNITS_TO_MATRIX = DTI_UNITS_TO_MATRIX
     &                            (DTI_LUN, 
     &  			  X_VAL_SW,Y_VAL_SW, 
     &                            UNITS, ROTATE, HAD_ABSOLUTE, 
     &  			   X1, Y1)
	IF (.NOT. DTI_WIN_UNITS_TO_MATRIX) GOTO 999
C
	DTI_WIN_UNITS_TO_MATRIX = DTI_UNITS_TO_MATRIX
     &                            (DTI_LUN, 
     &  			  X_VAL_NE,Y_VAL_NE, 
     &                            UNITS, ROTATE, HAD_ABSOLUTE, 
     &  			   X2, Y2)
	IF (.NOT. DTI_WIN_UNITS_TO_MATRIX) GOTO 999
C 
C
	IF (UNITS .EQ. UNITS_DTI) GOTO 100
C
C switch around the values if rotated
	IF (ROTATE.EQ. 1) THEN
C
C north west
	   TEMPX = X2
	   X2= X1
	   X1 = TEMPX 
C
	ELSEIF(ROTATE.EQ. 2) THEN
C
C north east
	   TEMPX = X2
	   X2 = X1
	   X1 = TEMPX 
	   TEMPY = Y2
	   Y2 = Y1
	   Y1 = TEMPY 
C
	ELSEIF(ROTATE.EQ. 3) THEN
C
C south east
	   TEMPY = Y2
	   Y2 = Y1
	   Y1 = TEMPY 
	ENDIF
C
C check the values are OK
100	IF (X1 .LT. 1  .OR. X1 .GT. X_EXTENT(DTI_LUN) .OR.
     &      X2 .LT. 1  .OR. X2 .GT. X_EXTENT(DTI_LUN) .OR.
     &      Y1 .LT. 1  .OR. Y1 .GT. Y_EXTENT(DTI_LUN) .OR.
     &      Y2 .LT. 1  .OR. Y2 .GT. Y_EXTENT(DTI_LUN)) THEN
	    DTI_WIN_UNITS_TO_MATRIX = DTI__BADWINDOW
	ELSE  
C
C nint the values
	   X_MATRIX_SW = NINT(X1)
	   Y_MATRIX_SW = NINT(Y1)
	   X_MATRIX_NE= NINT(X2)
	   Y_MATRIX_NE= NINT(Y2)
	ENDIF
C
999	RETURN
	END
