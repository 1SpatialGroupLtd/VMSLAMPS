	SUBROUTINE PUTBL(CHRGOT,STATUS)
C
***	MODULE PUTBL
***	IDENT  29MR88
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
CMOD	Moved over to logical names in COMMONs	ACM	17-Jul-1984
CMOD	BASHGT is 1 greater that previous top	AJW	25-Apr-1983
CMOD	Always puts out true height of point	AJW	22-Apr-1983
CMOD	Created					AJW	07-Mar-1983
C
C subroutine for DTI patch program to write out the info on the
C bottom line of the screen
C
	IMPLICIT NONE
C
C common block:
***	COMMON/HERE:DTICOM/
***	COMMON/LSL$CMNLSL:EXPC/
***	COMMON/LSL$CMNDTI:DTIHDR/
C
***	PARAMETER/LSL$CMNDTI:DTILIBMSG/
C
C arguments:
	CHARACTER*1 CHRGOT		! latest character
	INTEGER*4   STATUS		! which status line format
	INTEGER*4   DATA_VALUE		! data value from matrix
C
C local
	INTEGER*4   RET			! function return
	BYTE	    BYTE_VALUE		! byte value read
	INTEGER*2   UNSIGNED_VALUE	! unsigned byte value
	INTEGER*2   WORD_VALUE		! word value read
	INTEGER*4   LONG_VALUE		! long value read
	REAL	    REAL_VALUE		! real value read
C
	EQUIVALENCE  (BYTE_VALUE,UNSIGNED_VALUE)
C
C function:
	INTEGER*4   DTI_READ_DATA	! to read a data value
C
C*************************************************************************
C
	IF(STATUS.EQ.1)THEN
C
	  IF(ALLOW_EDIT)THEN
	    CALL EXPAND
     &      ('*** EDIT ENABLED *** Cursor Position (%N,%N)',XCUR,YCUR)
	  ELSE
	    CALL EXPAND
     &      ('*** EDIT DISABLED *** Cursor Position (%N,%N)',XCUR,YCUR)
	  ENDIF
C
C-------------------------------------------------------------------------
	  IF(DATA_TYPE(1).EQ.2)THEN		!word values
	    RET=DTI_READ_DATA(1,WORD_VALUE,XCUR,YCUR)
	    IF(RET.NE.DTI__NORMAL)THEN
	      CALL LSL_PUTMSG(RET)
	      GOTO 999
	    ENDIF
C
	    CALL APPEND(' = %^W%N',WORD_VALUE)
	    GOTO 100
	  ENDIF
C-------------------------------------------------------------------------
	  IF(DATA_TYPE(1).EQ.1)THEN		!byte data
	    RET=DTI_READ_DATA(1,BYTE_VALUE,XCUR,YCUR)
	    IF(RET.NE.DTI__NORMAL)THEN
	      CALL LSL_PUTMSG(RET)
	      GOTO 999
	    ENDIF
C
	    CALL APPEND(' = %^W%N',UNSIGNED_VALUE)  !output as unsigned value
	    GOTO 100
	  ENDIF
C-----------------------------------------------------------------------
	  IF(DATA_TYPE(1).EQ.5)THEN		!bit data
	    RET=DTI_READ_DATA(1,BYTE_VALUE,XCUR,YCUR)
	    IF(RET.NE.DTI__NORMAL)THEN
	      CALL LSL_PUTMSG(RET)
	      GOTO 999
	    ENDIF
C
	    CALL APPEND(' = %^B%N',BYTE_VALUE)  !output as unsigned value
	    GOTO 100
	  ENDIF
C-----------------------------------------------------------------------
	  IF(DATA_TYPE(1).EQ.3)THEN		!longword values
	    RET=DTI_READ_DATA(1,LONG_VALUE,XCUR,YCUR)
	    IF(RET.NE.DTI__NORMAL)THEN
	      CALL LSL_PUTMSG(RET)
	      GOTO 999
	    ENDIF
C
	    CALL APPEND(' = %N',LONG_VALUE)
	    GOTO 100
	  ENDIF
C-----------------------------------------------------------------------
	  IF(DATA_TYPE(1).EQ.4)THEN		!real values
	    RET=DTI_READ_DATA(1,REAL_VALUE,XCUR,YCUR)
	    IF(RET.NE.DTI__NORMAL)THEN
	      CALL LSL_PUTMSG(RET)
	      GOTO 999
	    ENDIF
C
	    CALL APPEND(' = %F10.3',REAL_VALUE)
	    GOTO 100
	  ENDIF
C
	ENDIF
C
C------------------------------------------------------------------------
C
	IF(STATUS.EQ.2)THEN
	  CALL EXPAND
     &    ('*** EDIT ENABLED *** Enter value as character or number>')
	  IF (DTI_NUMLEN.GT.0) THEN
	    CALL APPEND('  %S',DTI_NUMLIN(1:DTI_NUMLEN))
	  ELSEIF (CHRGOT.NE.CHAR(0)) THEN
	    IF (CHRGOT.EQ.' ') THEN
	      CALL APPEND(',<space>=0')
	    ELSE
	      CALL APPEND(' %S1=%N',CHRGOT,INT4)
	    ENDIF
	  ENDIF
	  GOTO 100
	ENDIF
C
C-----------------------------------------------------------------------------
C
	IF(STATUS.EQ.3)THEN
	   CALL EXPAND
     & ('*** EDIT ENABLED ***  Enter value as character or number>')
	   GOTO 100		
	ENDIF
C
C-----------------------------------------------------------------------------
C
	IF(STATUS.EQ.4)THEN
	  CALL EXPAND
     &  ('Character Values: 
     &<space>=0 ,A = %N to %N, Z=%N to %N, step=%N',
     &                     BASHGT,BASHGT+INCHGT-1,
     &                     BASHGT+25*INCHGT,BASHGT+26*INCHGT-1,INCHGT)
	  CALL LIB$PUT_SCREEN(EXPDSC,23,1)
	  GOTO 999
	ENDIF
C
C-----------------------------------------------------------------------------
C
100	CALL LIB$PUT_SCREEN(EXPDSC,24,1)
	CALL LIB$ERASE_LINE
	CALL MY$SET_CURSOR(XCUR,YCUR)
C
	NEWBL=.FALSE.
C
C*************************************************************************
999	RETURN
C
	END
