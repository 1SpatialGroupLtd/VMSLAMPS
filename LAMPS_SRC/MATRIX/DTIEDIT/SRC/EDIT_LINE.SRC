C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-04-19 14:22:48.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION EDIT_LINE(DTI_LUN)
C
***	IDENT	19AP93
***	MODULE  EDIT_LINE
C
C	Copyright : Laser-Scan, Cambridge, England
C	Author    : D R Catlow
C
	IMPLICIT NONE
C
C------------------------------------------------------------------------
C
C	Function to edit  all matrix points along a defined line in 
C	a DTI file to the specified value.
C	The function checks that a file is opened on the LUN, that
C	the coordinates of the line are in range,
C	and that the data value is within range for the DTI data type.
C	It then calls DTI_INIT_DATA or DTI_WRITE_DATA a number of
C	times to perform the edit on the DTI file.
C
C	The function returns TRUE on success, and FALSE if an error
C	has occurred.
C
C-------------------------------------------------------------------------
C	DTILIB commons and parameter files
***	PARAMETER/LSL$CMNDTI:DTIPAR/
***	PARAMETER/LSL$CMNDTI:DTILIBMSG/
C
***	COMMON/LSL$CMNDTI:DTIHDR/
***	COMMON/LSL$CMNLSL:CMDCOM/
C
***	COMMON/HERE:DTICOM/
C
C	Argument:
	INTEGER*4	DTI_LUN		! DTI file number
C
C	Local:
	REAL		REAL_VALUE	! real data value
	INTEGER*4	INT_VALUE	! integer data value
	LOGICAL*4	DATA_VALUE	! passed to DTI_INIT_DATA
	INTEGER*4	RETVAL		! function return
C
	REAL		XIN		! scan line x and y
	REAL		YIN		! intersection points.
	INTEGER*4	DIFFX		! abs. diff between XFROM,XTO
	INTEGER*4	DIFFY		! abs. diff between YFROM,YTO
	INTEGER*4	SAMPLE		! scan line
	INTEGER*4	LINE		! counters
	INTEGER*4	XPOS		! nearest int. of XIN
	INTEGER*4	YPOS		! nearest int. of YIN
C
	EQUIVALENCE	(DATA_VALUE,REAL_VALUE,INT_VALUE)
C
C 	DTILIB functions
	INTEGER*4	DTI_INIT_DATA	! set line in a DTI
C					! file to a given value
	INTEGER*4	DTI_WRITE_DATA	! to write a single data value
C
C****************************************************************************
C	Set function status
	EDIT_LINE =.FALSE.	
C
C----------------------------------------------------------------------------
C	Check that a DTI file is opened on DTI_LUN
	IF(.NOT.DTILUN_INUSE(DTI_LUN))THEN
	  CALL WRITEF('%S Specifying command EDIT LINE',ERROR_BELL)
	  CALL WRITEF('No DTI file has been defined')
	  GOTO 999
	ENDIF
C
C	Check that the option to edit the file is selected
	IF(.NOT.ALLOW_EDIT)THEN
	  CALL WRITEF('%S Specifying command EDIT LINE',ERROR_BELL)
	  CALL WRITEF('EDIT option is not enabled')
	  GOTO 999
	ENDIF
C
C	Check for 5 arguments
	IF(CMDACT.NE.5)THEN
	  CALL WRITEF('%S Specifying command EDIT LINE',ERROR_BELL)
	  IF(CMDACT.EQ.4)THEN
	    CALL WRITEF('Data value is missing')
	  ELSE
	    CALL WRITEF('Command requires 5 arguments')
	  ENDIF
	  GOTO 999
	ENDIF
C
C	Check coordinates are within the DTI coordinate range
	IF(INTARG(1).LT.1.OR.INTARG(1).GT.X_EXTENT(DTI_LUN) .OR.
     &     INTARG(3).LT.1.OR.INTARG(3).GT.X_EXTENT(DTI_LUN) .OR.
     &     INTARG(2).LT.1.OR.INTARG(2).GT.Y_EXTENT(DTI_LUN) .OR.
     &     INTARG(4).LT.1.OR.INTARG(4).GT.Y_EXTENT(DTI_LUN)) THEN
	  CALL WRITEF('%S Specifying command EDIT LINE',ERROR_BELL)
	  CALL WRITEF
     &    ('The coordinates of the line are out of range')
	  GOTO 999
	ENDIF
C
C	Check data value is valid for DTI data type
	IF (DATA_TYPE(DTI_LUN).EQ.DATA_BIT) THEN	!bit data
	  IF (REALAR(1).NE.1 .AND. REALAR(1).NE.0) THEN
	    CALL WRITEF('%S Specifying command EDIT LINE',ERROR_BELL)
	    CALL WRITEF('The data value is invalid for the DTI data type')
	    GOTO 999
	  ENDIF
C
	ELSEIF (DATA_TYPE(DTI_LUN).EQ.DATA_BYTE) THEN	!byte data
	  IF (REALAR(1).LT.0 .OR. REALAR(1).GT.255) THEN
	    CALL WRITEF('%S Specifying command EDIT LINE',ERROR_BELL)
	    CALL WRITEF('The data value is invalid for the DTI data type')
	    GOTO 999
	  ENDIF
C
	ELSEIF (DATA_TYPE(DTI_LUN).EQ.DATA_WORD) THEN	!word data
	  IF (REALAR(1).LT.-32767 .OR. REALAR(1).GT.32767) THEN
	    CALL WRITEF('%S Specifying command EDIT LINE',ERROR_BELL)
	    CALL WRITEF('The data value is invalid for the DTI data type')
	    GOTO 999
	  ENDIF
C
	ELSEIF (DATA_TYPE(DTI_LUN).EQ.DATA_LONG) THEN	!longword data
	  IF (REALAR(1).LT.-2147483648 .OR.
     &        REALAR(1).GT. 2147483647) THEN
	    CALL WRITEF('%S Specifying command EDIT LINE',ERROR_BELL)
	    CALL WRITEF('The data value is invalid for the DTI data type')
	    GOTO 999
	  ENDIF
	ENDIF
C
	IF (DATA_TYPE(DTI_LUN).NE.DATA_REAL) THEN
	  INT_VALUE=REALAR(1)
	ELSE
	  REAL_VALUE=REALAR(1)
	ENDIF
C
C-----------------------------------------------------------------------------
C	Determine the best direction in which to scan convert the line
	DIFFX = ABS(INTARG(3)-INTARG(1))	
	DIFFY = ABS(INTARG(4)-INTARG(2))
C
C	Deal with a single point
	IF(DIFFX.EQ.0.AND.DIFFY.EQ.0)THEN
C
	  RETVAL=DTI_WRITE_DATA(DTI_LUN,
     &                          DATA_VALUE,
     &                          INTARG(1),
     &                          INTARG(2))
	  IF(.NOT.RETVAL)THEN
	    CALL LSL_PUTMSG(RETVAL)
            GOTO 999
	  ENDIF
	  GOTO 500
	ENDIF
C
C--------------------------------------------------------------------------
	IF(DIFFY.EQ.0)THEN	
C
C	Swap the start and end points around if necessary
	  IF(INTARG(1).GT.INTARG(3))THEN
	     XPOS=INTARG(1)
	     YPOS=INTARG(2)
	     INTARG(1)=INTARG(3)
	     INTARG(2)=INTARG(4)
	     INTARG(3)=XPOS
	     INTARG(4)=YPOS
	  ENDIF
C
C	Deal with a horizontal line
	  RETVAL=DTI_INIT_DATA(DTI_LUN,
     &                         DATA_VALUE,
     &			       INTARG(1),
     &			       INTARG(2),
     &                         (INTARG(3)-INTARG(1))+1,
     &                         1)
	  IF(.NOT.RETVAL)THEN
	    CALL LSL_PUTMSG(RETVAL)
	    GOTO 999
	  ENDIF
	  GOTO 500  
	ENDIF
C
C------------------------------------------------------------------------------
	IF(DIFFX.EQ.0)THEN	
C
C	Swap the start and end points around if necessary
	  IF(INTARG(2).GT.INTARG(4))THEN
	     XPOS=INTARG(1)
	     YPOS=INTARG(2)
	     INTARG(1)=INTARG(3)
	     INTARG(2)=INTARG(4)
	     INTARG(3)=XPOS
	     INTARG(4)=YPOS
	  ENDIF
C
C	Deal with a vertical line
	  RETVAL=DTI_INIT_DATA(DTI_LUN,
     &                         DATA_VALUE,
     &			       INTARG(1),
     &			       INTARG(2),
     &                         1,
     &                         (INTARG(4)-INTARG(2))+1)
	  IF(.NOT.RETVAL)THEN
	    CALL LSL_PUTMSG(RETVAL)
	    GOTO 999
	  ENDIF
	  GOTO 500  
	ENDIF
C
C-------------------------------------------------------------------------------
C	More complicated case of a non-vertical or non-horizontal line
C	Decide whether to scan horizontally or vertically
C
	IF(DIFFY.GT.DIFFX)GOTO 350	! scan horizontally
C
C	Swap the start and end points around if necessary
	IF(INTARG(1).GT.INTARG(3))THEN
	  XPOS=INTARG(1)
	  YPOS=INTARG(2)
	  INTARG(1)=INTARG(3)
	  INTARG(2)=INTARG(4)
	  INTARG(3)=XPOS
	  INTARG(4)=YPOS
	ENDIF
C
C	Scan vertically
C
	DO 300 SAMPLE =INTARG(1),INTARG(3),1
C	calculate intersection of sample line SAMPLE with a line
C	connecting vertex cells INTARG(1),INTARG(2) and INTARG(3),INTARG(4)
C	YIN is real Y intersection point
C	YPOS is nearest integer to YIN
C
	   YIN =(INTARG(2)+(INTARG(4)-INTARG(2)) *
     &          (SAMPLE-INTARG(1))/(INTARG(3)-INTARG(1)))
	   YPOS=NINT(YIN)
C
	   RETVAL=DTI_WRITE_DATA(DTI_LUN,
     &                           DATA_VALUE,
     &                           SAMPLE,
     &                           YPOS)
	   IF(.NOT.RETVAL)THEN
	     CALL LSL_PUTMSG(RETVAL)
	     GOTO 999
	   ENDIF
C
300     CONTINUE			! next pt
C
        GOTO 500			! all done
C
C*************************************************************************
C       Scan horizontally
C
C	Swap the start and end points around if necessary
350	IF(INTARG(2).GT.INTARG(4))THEN
	  XPOS=INTARG(1)
	  YPOS=INTARG(2)
	  INTARG(3)=XPOS
	  INTARG(4)=YPOS
	  INTARG(1)=INTARG(3)
	  INTARG(2)=INTARG(4)
	ENDIF
C
	DO 400 LINE =INTARG(2),INTARG(4),1
C
	   XIN =(INTARG(1)+(INTARG(3)-INTARG(1))*
     &          (LINE-INTARG(2))/(INTARG(4)-INTARG(2)))
	   XPOS=NINT(XIN)
C
	   RETVAL=DTI_WRITE_DATA(DTI_LUN,
     &                           DATA_VALUE,
     &                           XPOS,
     &                           LINE)
	   IF(.NOT.RETVAL)THEN
	     CALL LSL_PUTMSG(RETVAL)
	     GOTO 999
	   ENDIF
C
400     CONTINUE			! next pt
C
C--------------------------------------------------------------------------
C Assume range needs updating
500	NEWRAN = .TRUE.
C
C Turn off range update if still in range
C
	IF (DATA_TYPE(DTI_LUN).EQ.DATA_BIT) THEN
C
	ELSEIF (DATA_TYPE(DTI_LUN).EQ.DATA_REAL) THEN
	  IF (REAL_VALUE.LE.MAX_RVALUE(DTI_LUN) .AND.
     &        REAL_VALUE.GE.MIN_RVALUE(DTI_LUN)) NEWRAN=.FALSE.
C
	ELSEIF (DATA_TYPE(DTI_LUN).EQ.DATA_LONG) THEN
	  IF (INT_VALUE.LE.MAX_LVALUE(DTI_LUN) .AND.
     &        INT_VALUE.GE.MIN_LVALUE(DTI_LUN)) NEWRAN=.FALSE.
C
	ELSE
	  IF (INT_VALUE.LE.MAX_WVALUE(DTI_LUN) .AND.
     &        INT_VALUE.GE.MIN_WVALUE(DTI_LUN)) NEWRAN=.FALSE.
	ENDIF
C
C----------------------------------------------------------------------------
C	Signal success
	EDIT_LINE=.TRUE.
C
999	RETURN
	END
C
