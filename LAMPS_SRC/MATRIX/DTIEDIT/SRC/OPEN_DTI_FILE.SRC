C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-08-02 17:46:10.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION OPEN_DTI_FILE(DTI_LUN)
C
***	IDENT	02AU91
***	MODULE	OPEN_DTI_FILE
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C	Author    : D R Catlow
C
CMOD    Set up default units using routine DTI_UNITS	MWSR 23-Nov-1988
CMOD    Extra report argument added to DTI_OPEN		MWSR 01-Dec-1988
C	
	IMPLICIT NONE
C
C------------------------------------------------------------------------
C
C	Function to open an existing DTI file on the requested DTI_LUN.
C	The routine closes any file currently opened on DTI_LUN.
C	The filename specified on the command line (optionally contained
C	within quotation marks) is parsed against the default
C	LSL$DTI:DTI.DTI
C
C	The routine calls DTI_OPEN to open and map the file.
C
C	The function returns TRUE if a file is successfully opened, and
C	FALSE if an error has occured.
C
C-------------------------------------------------------------------------
C
C	DTILIB commons and parameter files
***	COMMON/LSL$CMNDTI:DTIHDR/
C
***	PARAMETER/LSL$CMNDTI:DTIPAR/
***	PARAMETER/LSL$CMNDTI:DTILIBMSG/
C
C 	LSLLIB parameter files
***	COMMON/LSL$CMNLSL:READSTR.PAR/
***	COMMON/LSL$CMNLSL:LSLLIBMSG.PAR/
C
C	DTIEDIT common
***	COMMON/HERE:DTICOM/
C
C arguments
	INTEGER*4	DTI_LUN		! channel number
C
C workspace
C
	INTEGER*4	PSDSTR(2)	! Pseudo string descriptor
	INTEGER*4	ERROR		! function system error code
	INTEGER*4	RETVAL		! function return code
	INTEGER*4	FAKSTR(2)	! fake string
	INTEGER*2	FAKLEN		! fake string length
	BYTE		FAKBUF(128)
	BYTE		CH		! single character
C
	EQUIVALENCE	(FAKLEN,FAKSTR(1))
C
C DTILIB functions
	INTEGER*4	DTI_OPEN	! open and map a file
	INTEGER*4	DTI_CLOSE	! to unmap and close a file
	INTEGER*4	DTI_MINMAX_DATA	! calculate min/max data values
	INTEGER*4	DTI_UNITS	! sets up default units
C
C LSLLIB functions
	INTEGER*4	READSTR		! read string
	LOGICAL		PARFILN		! parse filename
	LOGICAL		RDCHS		! read character
C
C****************************************************************************
C
	OPEN_DTI_FILE=.FALSE.	! Assume function is unsuccessful
C
C	Check for filename on command line
	IF(RDCHS(CH))THEN
	  CALL WRITEF('%S Specifying command FILEIN',ERROR_BELL)
	  CALL WRITEF('Input DTI filename is missing')
	  GOTO 999
	ELSE
	  CALL BSCH
	ENDIF
C
C--------------------------------------------------------------------------
C	Close and unmap any file opened on this channel
C	and update the minimum and maximum values if necessary
100	IF(DTILUN_INUSE(DTI_LUN))THEN
	  IF(NEWRAN)THEN
	     CALL WRITEF(
     &  '--- Determining new maximum and minimum heights - please wait')
	    RETVAL = DTI_MINMAX_DATA (1,.TRUE.,ERROR)
	    IF(RETVAL.NE.DTI__NORMAL)THEN
	      CALL LSL_PUTMSG(RETVAL)
	      IF(RETVAL.EQ.DTI__SYSERR)CALL LSL_PUTMSG(ERROR)
	    ENDIF
	  ENDIF
C
	  RETVAL=DTI_CLOSE(1,.FALSE.,.TRUE.,ERROR)
	  IF(RETVAL.NE.DTI__NORMAL)THEN
	    CALL LSL_PUTMSG(RETVAL)
	    IF(RETVAL.EQ.DTI__SYSERR)CALL LSL_PUTMSG(ERROR)
	    GOTO 999		!get next command
	  ENDIF
	ENDIF
C
C---------------------------------------------------------------------
C
	FAKSTR(2)=%LOC(FAKBUF)	! set up fake string descriptor
	FAKLEN=128
	IF(CH.EQ.34.OR.CH.EQ.39)THEN
	  FAKLEN=READSTR(FAKSTR,CH,ON_CHAR2,.TRUE.)
	ELSE
	  CALL BSCH
	  FAKLEN=READSTR(FAKSTR,' ',ON_CHAR2,.TRUE.)
	ENDIF
C
C	Parse the input file name against LSL$DTI:.DTI
	RETVAL=PARFILN(DTI_NAME(DTI_LUN),
     &                 DTI_NAME_LENGTH(DTI_LUN),
     &	               FAKSTR,
     &	               'LSL$DTI:DTI.DTI',
     &	               .TRUE.)
	IF(RETVAL.NE.LSL__NORMAL)THEN
	   OPEN_DTI_FILE=.FALSE.
	   CALL LSL_PUTMSG(RETVAL)
	   GOTO 999			!return
	ENDIF
C
C------------------------------------------------------------------------
C	Open and map the file
	RETVAL = DTI_OPEN (DTI_LUN, 
     &                     DTI_NAME(DTI_LUN), 
     &                     DTI_NAME_LENGTH(DTI_LUN),
     &                     .TRUE.,
     &	                   ERROR,
     &  		   .TRUE.)
C
	IF(RETVAL.NE.DTI__NORMAL)THEN
	   CALL LSL_PUTMSG(RETVAL)
	   IF(RETVAL.EQ.DTI__SYSERR)CALL LSL_PUTMSG(ERROR)
	   GOTO 999			!return
	ENDIF
C
C	Set the defaults UNITS value to 0 to find units
	UNITS = 0
	RETVAL = DTI_UNITS(DTI_LUN,UNITS)
	IF (.NOT. RETVAL) THEN
	   CALL LSL_PUTMSG(RETVAL)
	   GOTO 999
	ENDIF
C
C-------------------------------------------------------------------------
C
	OPEN_DTI_FILE=.TRUE.		!signal success
C
999	RETURN
	END
C
