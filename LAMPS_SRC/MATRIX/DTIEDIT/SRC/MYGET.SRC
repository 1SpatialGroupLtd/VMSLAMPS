C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-03-29 14:35:46.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE MY$GET_CHAR(XPOS,YPOS,LENGTH,STRING)
C
***	MODULE MY$GET_CHAR
***	IDENT  29MR88
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
CMOD	Moved over to logicak names in COMMONs	ACN	17-Jul-1984
CMOD	BASHGT is previous top +1		AJW	25-Apr-1983
CMOD	Created					AJW	16-Mar-1983
C
C converts DTI data in "array" GETC_ADDR to a char string of length
C LENGTH, from position YPOS,XPOS
C the stuff is converted to chars <space>, A-Z using BASHGT,INCHGT
C
	IMPLICIT NONE
C
C common block:
***	COMMON/HERE:DTICOM/
***	COMMON/LSL$CMNDTI:DTIHDR/
C
C arguments:
	INTEGER*4     XPOS,YPOS		! x and y data position
	INTEGER       LENGTH		! amount to put out
	CHARACTER*(*) STRING		! string to put it in
C
C local workspace:
	REAL		REAL_VALUE	! real data value
	INTEGER*4	X		! counter
	INTEGER*4	NUMBER_X
	INTEGER*4	RET		! function return
	INTEGER*4	DATA_VALUE	! data value read
	INTEGER*2	WORD_VALUE	! word value
	BYTE		BYTE_VALUE	! byte value
C
	EQUIVALENCE	(BYTE_VALUE,WORD_VALUE)
C Function:
	INTEGER*4	DTI_READ_DATA	! to read a data value from the matrix
C
C------------------------------------------------------------------------
C
	NUMBER_X=(XCOUNTS_W-XPOS)+1	! number of x values to calculate
C
	IF(YPOS.GT.YCOUNTS_W)THEN
	  STRING(1:LENGTH)=' '		! output string of spaces
	  GOTO 999
	ENDIF
C
	DATA_VALUE=0
	WORD_VALUE=0
	DO 10 X=1,MIN(LENGTH,NUMBER_X)
C
	  IF     (DATA_TYPE(1).EQ.4)THEN	! real data
	    RET=DTI_READ_DATA(1,REAL_VALUE,XPOS+X-1,YPOS)
	    IF(.NOT.RET)THEN
	      CALL LSL_PUTMSG(RET)
	      GOTO 999
	    ENDIF
	    DATA_VALUE=INT(REAL_VALUE)
	  ELSE IF(DATA_TYPE(1).EQ.1)THEN	! byte data
	    RET=DTI_READ_DATA(1,BYTE_VALUE,XPOS+X-1,YPOS)
	    IF(.NOT.RET)THEN
	      CALL LSL_PUTMSG(RET)
	      GOTO 999
	    ENDIF
	    DATA_VALUE=WORD_VALUE
	  ELSE IF(DATA_TYPE(1).EQ.5)THEN	! byte data
	    RET=DTI_READ_DATA(1,BYTE_VALUE,XPOS+X-1,YPOS)
	    IF(.NOT.RET)THEN
	      CALL LSL_PUTMSG(RET)
	      GOTO 999
	    ENDIF
	    DATA_VALUE=WORD_VALUE
	  ELSE IF(DATA_TYPE(1).EQ.2)THEN	! word data
	    RET=DTI_READ_DATA(1,WORD_VALUE,XPOS+X-1,YPOS)
	    IF(.NOT.RET)THEN
	      CALL LSL_PUTMSG(RET)
	      GOTO 999
	    ENDIF
	    DATA_VALUE=WORD_VALUE
	  ELSE IF(DATA_TYPE(1).EQ.3)THEN	! long data
	    RET=DTI_READ_DATA(1,DATA_VALUE,XPOS+X-1,YPOS)
	    IF(.NOT.RET)THEN
	      CALL LSL_PUTMSG(RET)
	      GOTO 999
	    ENDIF
	  ENDIF
C
C
	  IF     (DATA_VALUE.EQ.0) THEN
	    STRING(X:X)=' '
	  ELSEIF (DATA_VALUE.LT.BASHGT) THEN
	    STRING(X:X)='-'
	  ELSEIF (DATA_VALUE.GT.ZUPPER) THEN
C	  ELSEIF (DATA_VALUE.GT.BASHGT+26*INCHGT-1) THEN
	    STRING(X:X)='+'
	  ELSE
	    STRING(X:X)=CHAR(ICHAR('A')+(DATA_VALUE-BASHGT)/INCHGT)
	  ENDIF
10	CONTINUE
C
C	Pad remainder of character string with ' '
	IF(NUMBER_X.LT.LENGTH)THEN
	   STRING(NUMBER_X+1:LENGTH)=' '	     
	ENDIF
C
999	RETURN
	END
