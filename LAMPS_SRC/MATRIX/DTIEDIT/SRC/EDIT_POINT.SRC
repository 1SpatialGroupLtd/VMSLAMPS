C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-04-19 15:29:02.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION EDIT_POINT(DTI_LUN)
C
***	IDENT	19AP93
***	MODULE  EDIT_POINT
C
C	Copyright : Laser-Scan, Cambridge, England
C	Author    : D R Catlow
C
	IMPLICIT NONE
C
C------------------------------------------------------------------------
C
C	Function to edit a single matrix point in 
C	a DTI file to the specified value.
C	The function checks that a file is opened on the LUN, that
C	the coordinates of the point are in range, and that the data 
C	value is within range for the DTI data type.
C	It then calls DTI_WRITE_DATA to perform the edit on the DTI file.
C
C	The function returns TRUE on success, and FALSE if an error
C	has occurred.
C
C-------------------------------------------------------------------------
C	DTILIB commons and parameter files
***	PARAMETER/LSL$CMNDTI:DTIPAR/
***	PARAMETER/LSL$CMNDTI:DTILIBMSG/
C
***	COMMON/LSL$CMNDTI:DTIHDR/
***	COMMON/LSL$CMNLSL:CMDCOM/
C
***	COMMON/HERE:DTICOM/
C
C	Argument:
	INTEGER*4	DTI_LUN		! DTI file number
C
C	Local:
	REAL		REAL_VALUE	! real data value
	INTEGER*4	INT_VALUE	! integer data value
	LOGICAL*4	DATA_VALUE	! passed to DTI_WRITE_DATA
	INTEGER*4	RETVAL		! function return
C
	EQUIVALENCE	(DATA_VALUE,REAL_VALUE,INT_VALUE)
C
C 	DTILIB functions
	INTEGER*4	DTI_WRITE_DATA	! set point in a DTI
C					! file to a given value
C
C****************************************************************************
C	Set function status
	EDIT_POINT =.FALSE.	
C
C----------------------------------------------------------------------------
C	Check that a DTI file is opened on DTI_LUN
	IF(.NOT.DTILUN_INUSE(DTI_LUN))THEN
	  CALL WRITEF('%S Specifying command EDIT POINT',ERROR_BELL)
	  CALL WRITEF('No DTI file has been defined')
	  GOTO 999
	ENDIF
C
C	Check that the option to edit the file is selected
	IF(.NOT.ALLOW_EDIT)THEN
	  CALL WRITEF('%S Specifying command EDIT POINT',ERROR_BELL)
	  CALL WRITEF('EDIT option is not enabled')
	  GOTO 999
	ENDIF
C
C	Check for 3 arguments
	IF(CMDACT.NE.3)THEN
	  CALL WRITEF('%S Specifying command EDIT POINT',ERROR_BELL)
	  IF(CMDACT.EQ.2)THEN
	    CALL WRITEF('Data value is missing')
	  ELSE
	    CALL WRITEF('Command requires 3 arguments')
	  ENDIF
	  GOTO 999
	ENDIF
C
C	Check coordinates are within the DTI coordinate range
	IF(INTARG(1).LT.1.OR.INTARG(1).GT.X_EXTENT(DTI_LUN).OR.
     &     INTARG(2).LT.1.OR.INTARG(2).GT.Y_EXTENT(DTI_LUN))THEN
	  CALL WRITEF('%S Specifying command EDIT POINT',ERROR_BELL)
	  CALL WRITEF
     &    ('The coordinates of the point are out of range')
	  GOTO 999
	ENDIF
C
C	Check data value is valid for DTI data type
	IF (DATA_TYPE(DTI_LUN).EQ.DATA_BIT) THEN	!bit data
	  IF (REALAR(1).NE.1 .AND. REALAR(1).NE.0) THEN
	    CALL WRITEF('%S Specifying command EDIT POINT',ERROR_BELL)
	    CALL WRITEF('The data value is invalid for the DTI data type')
	    GOTO 999
	  ENDIF
C
	ELSEIF (DATA_TYPE(DTI_LUN).EQ.DATA_BYTE) THEN	!byte data
	  IF (REALAR(1).LT.0 .OR. REALAR(1).GT.255) THEN
	    CALL WRITEF('%S Specifying command EDIT POINT',ERROR_BELL)
	    CALL WRITEF('The data value is invalid for the DTI data type')
	    GOTO 999
	  ENDIF
C
	ELSEIF (DATA_TYPE(DTI_LUN).EQ.DATA_WORD) THEN	!word data
	  IF (REALAR(1).LT.-32767 .OR. REALAR(1).GT.32767) THEN
	    CALL WRITEF('%S Specifying command EDIT POINT',ERROR_BELL)
	    CALL WRITEF('The data value is invalid for the DTI data type')
	    GOTO 999
	  ENDIF
C
	ELSEIF (DATA_TYPE(DTI_LUN).EQ.DATA_LONG) THEN	!longword data
	  IF (REALAR(1).LT.-2147483648 .OR.
     &        REALAR(1).GT.2147483647) THEN
	    CALL WRITEF('%S Specifying command EDIT POINT',ERROR_BELL)
	    CALL WRITEF('The data value is invalid for the DTI data type')
	    GOTO 999
	  ENDIF
	ENDIF
C
	IF(DATA_TYPE(DTI_LUN).NE.DATA_REAL)THEN
	  INT_VALUE=REALAR(1)
	ELSE
	  REAL_VALUE=REALAR(1)
	ENDIF
C
C	Write the data value to the DTI file
	RETVAL=DTI_WRITE_DATA(
     &                       DTI_LUN,
     &                       DATA_VALUE,
     &			     INTARG(1),
     &			     INTARG(2))
	IF(.NOT.RETVAL)THEN
	  CALL LSL_PUTMSG(RETVAL)
	  GOTO 999
	ENDIF
C
C------------------------------------------------------------------------
C Asumme range needs updating
	NEWRAN = .TRUE.
C
C Check if range needs updating
C
	IF (DATA_TYPE(DTI_LUN).EQ.DATA_BIT) THEN
C
	ELSEIF (DATA_TYPE(DTI_LUN).EQ.DATA_REAL) THEN
	  IF (REAL_VALUE.LE.MAX_RVALUE(DTI_LUN) .AND.
     &        REAL_VALUE.GE.MIN_RVALUE(DTI_LUN)) NEWRAN=.FALSE.
C
	ELSEIF (DATA_TYPE(DTI_LUN).EQ.DATA_LONG) THEN
	  IF (INT_VALUE.LE.MAX_LVALUE(DTI_LUN) .OR.
     &        INT_VALUE.GE.MIN_LVALUE(DTI_LUN)) NEWRAN=.FALSE.
C
	ELSE
	  IF (INT_VALUE.LE.MAX_WVALUE(DTI_LUN) .AND.
     &        INT_VALUE.GE.MIN_WVALUE(DTI_LUN)) NEWRAN=.FALSE.
	ENDIF
C
C----------------------------------------------------------------------------
C	Signal success
	EDIT_POINT=.TRUE.
C
999	RETURN
	END
C
