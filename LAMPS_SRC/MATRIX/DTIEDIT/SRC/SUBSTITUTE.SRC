C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-04-19 13:27:48.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION SUBSTITUTE(DTI_LUN)
C
***	IDENT	19AP93
***	MODULE  SUBSTITUTE
C
C	Copyright : Laser-Scan, Cambridge, England
C	Author    : D R Catlow
C
	IMPLICIT NONE
C
C------------------------------------------------------------------------
C
C	Function to substitute all pixels with a given value with
C	a new value.  This is carried out for the whole DTI file
C	or for the specified rectangle if the AREA qualifier is
C	present.
C
C	The function returns TRUE on success, and FALSE if an error
C	has occurred.
C
C-------------------------------------------------------------------------
C	DTILIB commons and parameter files
***	PARAMETER/LSL$CMNDTI:DTIPAR/
***	PARAMETER/LSL$CMNDTI:DTILIBMSG/
C
***	COMMON/LSL$CMNDTI:DTIHDR/
***	COMMON/LSL$CMNLSL:CMDCOM/
C
***	COMMON/HERE:DTICOM/
C
C	Argument:
	INTEGER*4	DTI_LUN		! DTI file number
C
C	Local:
	LOGICAL*4	DATA_VALUE(DTI_MAX_ROWS)  !dummy data array
	REAL*4		REAL_VALUE(DTI_MAX_ROWS)  !real data array
	INTEGER*4	LONG_VALUE(DTI_MAX_ROWS)  !integer data array
	INTEGER*2	WORD_VALUE(DTI_MAX_ROWS)
	BYTE		BYTE_VALUE(DTI_MAX_ROWS)
C
	BYTE		SIGNED_BYTE
	INTEGER*2	UNSIGNED_BYTE
C
	REAL*4		REAL_VALUE1,REAL_VALUE2
	INTEGER*4	INT_VALUE1,INT_VALUE2
	INTEGER*4	CMD
	INTEGER*4	X,Y			  ! counters
	INTEGER*4	START_X,START_Y,END_X,END_Y
	INTEGER*4	NUMBER_ROWS
	INTEGER*4	RETVAL			  ! function return
	INTEGER*4	ERROR
C
	EQUIVALENCE	(DATA_VALUE,REAL_VALUE,LONG_VALUE,
     &                   WORD_VALUE,BYTE_VALUE)
	EQUIVALENCE	(SIGNED_BYTE,UNSIGNED_BYTE)
C
	EXTERNAL	EDIT_CMD_TABLE
C
C 	DTILIB functions
	INTEGER*4	DTI_COPY_DATA	! to copy a column of data values
C
	INTEGER*4	RDCOMM		! to read a command qualifier
C
C****************************************************************************
C	Set function status
	SUBSTITUTE =.FALSE.	
C
C----------------------------------------------------------------------------
C	Check that a DTI file is opened on DTI_LUN
	IF(.NOT.DTILUN_INUSE(DTI_LUN))THEN
	  CALL WRITEF('%S Specifying command SUBSTITUTE',ERROR_BELL)
	  CALL WRITEF('No DTI file has been defined')
	  GOTO 999
	ENDIF
C
C	Check that the option to edit the file is selected
	IF(.NOT.ALLOW_EDIT)THEN
	  CALL WRITEF('%S Specifying command SUBSTITUTE',ERROR_BELL)
	  CALL WRITEF('EDIT options are not enabled')
	  GOTO 999
	ENDIF
C
C	Check that we are not dealing with a byte file, in
C	which case use of the initialise command is to be recommended
	IF (DATA_TYPE(DTI_LUN).EQ.DATA_BIT) THEN
	  CALL WRITEF('%S Specifying command SUBSTITUTE',ERROR_BELL)
	  CALL WRITEF('Command not allowed with BIT data')
	  CALL WRITEF('Use the command EDIT AREA')
	  GOTO 999
	ENDIF
C
C-------------------------------------------------------------------------
	IF(CMDACT.NE.2)THEN
C	Check for the AREA qualifer
	  CMD = RDCOMM(EDIT_CMD_TABLE)
	  IF(CMD.NE.1)THEN
	    CALL WRITEF('%S Specifying command SUBSTITUTE',ERROR_BELL)
	    CALL WRITEF
     &      ('Command requires 2 arguments or the AREA qualifier')
	    GOTO 999
	  ENDIF
C
C	Check for 6 arguments
	  IF(CMDACT.NE.6)THEN
	    CALL WRITEF('%S Specifying command SUBSTITUTE AREA',ERROR_BELL)
	    CALL WRITEF('Command requires 6 arguments')
	    GOTO 999
	  ENDIF
C
C	Check rectangle is correctly specified
	  IF(INTARG(3).LE.INTARG(1).OR.INTARG(4).LE.INTARG(2))THEN
	    CALL WRITEF('%S Specifying command SUBSTITUTE AREA',ERROR_BELL)
	    CALL WRITEF
     &     ('The top righthand point must exceed the bottom 
     &lefthand point')
	    GOTO 999
	  ENDIF
C
C	Check coordinates are within the DTI coordinate range
	  IF(INTARG(1).LT.1.OR.INTARG(1).GT.X_EXTENT(DTI_LUN).OR.
     &       INTARG(3).LT.1.OR.INTARG(3).GT.X_EXTENT(DTI_LUN).OR.
     &       INTARG(2).LT.1.OR.INTARG(2).GT.Y_EXTENT(DTI_LUN).OR.
     &       INTARG(4).LT.1.OR.INTARG(4).GT.Y_EXTENT(DTI_LUN))THEN
	    CALL WRITEF('%S Specifying command SUBSTITUTE AREA',ERROR_BELL)
	    CALL WRITEF
     &      ('The coordinates of the rectangle are out of range')
	    GOTO 999
	  ENDIF
C
	  START_X = INTARG(1)
	  START_Y = INTARG(2)
	  END_X   = INTARG(3)
	  END_Y   = INTARG(4)
	ELSE
	  START_X = 1
	  START_Y = 1
	  END_X   = X_EXTENT(DTI_LUN)
	  END_Y   = Y_EXTENT(DTI_LUN)
	ENDIF
C
C	Check datas value are valid for DTI data type
C	  
C	Check validity of data value
	IF     (DATA_TYPE(DTI_LUN).EQ.DATA_BYTE) THEN		!byte data
	  IF (REALAR(1).LT.0 .OR. REALAR(1).GT.255 .OR.
     &        REALAR(2).LT.0 .OR. REALAR(2).GT.255) THEN
	    CALL WRITEF('%S Specifying command SUBSTITUTE',ERROR_BELL)
	    CALL WRITEF('The data value is invalid for the DTI data type')
	    GOTO 999
	  ENDIF
C
	ELSEIF (DATA_TYPE(DTI_LUN).EQ.DATA_WORD) THEN		!word data
	  IF (REALAR(1).LT.-32767 .OR. REALAR(1).GT.32767.OR.
     &        REALAR(2).LT.-32767 .OR. REALAR(2).GT.32767) THEN
	    CALL WRITEF('%S Specifying command SUBSTITUTE',ERROR_BELL)
	    CALL WRITEF('The data value is invalid for the DTI data type')
	    GOTO 999
	  ENDIF
C
	ELSEIF (DATA_TYPE(DTI_LUN).EQ.DATA_LONG) THEN		!longword data
	  IF (REALAR(1).LT.-2147483648 .OR.
     &        REALAR(1).GT. 2147483647  .OR.
     &        REALAR(2).LT.-2147483648 .OR.
     &        REALAR(2).GT. 2147483647) THEN
	    CALL WRITEF('%S Specifying command SUBSTITUTE',ERROR_BELL)
	    CALL WRITEF('The data value is invalid for the DTI data type')
	    GOTO 999
	  ENDIF
	ENDIF
C
	IF (DATA_TYPE(DTI_LUN).NE.DATA_REAL) THEN
	  INT_VALUE1=INT(REALAR(1))
	  INT_VALUE2=INT(REALAR(2))
	ELSE
	  REAL_VALUE1=REALAR(1)
	  REAL_VALUE2=REALAR(2)
	ENDIF
C
	NUMBER_ROWS = (END_Y-START_Y)+1
C
C	Do the substituting column at a time
	DO 500 X = START_X,END_X
C
	   RETVAL=DTI_COPY_DATA(
     &                       DTI_LUN,
     &                       DATA_VALUE(1),
     &			     .FALSE.,
     &			     X,
     &                       START_Y,
     &                       1,
     &                       NUMBER_ROWS,
     &                       ERROR)
	  IF(.NOT.RETVAL)THEN
	    CALL LSL_PUTMSG(RETVAL)
	    IF(RETVAL.EQ.DTI__SYSERR)CALL LSL_ADDMSG(ERROR)
	    GOTO 999
	  ENDIF
C
C	Do the substitution for this column of data
	  DO 400 Y = 1,NUMBER_ROWS
C
C	Byte - remember to treat the byte as unsigned
	     IF     (DATA_TYPE(DTI_LUN).EQ.DATA_BYTE) THEN
	       SIGNED_BYTE=BYTE_VALUE(Y)
	       IF(UNSIGNED_BYTE.EQ.INT_VALUE1)THEN
                  UNSIGNED_BYTE=INT_VALUE2
	          BYTE_VALUE(Y)=SIGNED_BYTE
	       ENDIF
C
C	Word data
	     ELSEIF (DATA_TYPE(DTI_LUN).EQ.DATA_WORD) THEN
	       IF (WORD_VALUE(Y).EQ.INT_VALUE1) THEN
	           WORD_VALUE(Y)=INT_VALUE2
	       ENDIF
C
C	Longword data
	     ELSEIF (DATA_TYPE(DTI_LUN).EQ.DATA_LONG) THEN
	       IF (LONG_VALUE(Y).EQ.INT_VALUE1) THEN
	           LONG_VALUE(Y)=INT_VALUE2
	       ENDIF
C
C	Real data
	     ELSEIF (DATA_TYPE(DTI_LUN).EQ.DATA_REAL) THEN
	       IF (REAL_VALUE(Y).EQ.REAL_VALUE1) THEN
	           REAL_VALUE(Y)=REAL_VALUE2
	       ENDIF
	     ENDIF
C
400	   CONTINUE
C
	   RETVAL=DTI_COPY_DATA(
     &                       DTI_LUN,
     &                       DATA_VALUE(1),
     &			     .TRUE.,
     &			     X,
     &                       START_Y,
     &                       1,
     &                       NUMBER_ROWS,
     &                       ERROR)
	  IF(.NOT.RETVAL)THEN
	    CALL LSL_PUTMSG(RETVAL)
	    IF(RETVAL.EQ.DTI__SYSERR)CALL LSL_PUTMSG(ERROR)
	    GOTO 999
	  ENDIF
C
500	CONTINUE
C
C
	IF (DATA_TYPE(DTI_LUN).EQ.DATA_REAL) THEN
	  IF (REAL_VALUE2.GT.MAX_RVALUE(DTI_LUN) .OR.
     &        REAL_VALUE2.LT.MIN_RVALUE(DTI_LUN) .OR.
     &        REAL_VALUE1.EQ.MAX_RVALUE(DTI_LUN) .OR.
     &        REAL_VALUE1.EQ.MIN_RVALUE(DTI_LUN)) NEWRAN=.TRUE.
C
	ELSEIF (DATA_TYPE(DTI_LUN).EQ.DATA_LONG) THEN
	  IF (INT_VALUE2.GT.MAX_LVALUE(DTI_LUN) .OR.
     &        INT_VALUE2.LT.MIN_LVALUE(DTI_LUN) .OR.
     &        INT_VALUE1.EQ.MAX_LVALUE(DTI_LUN) .OR.
     &        INT_VALUE1.EQ.MIN_LVALUE(DTI_LUN)) NEWRAN=.TRUE.
C
	ELSE
	  IF (INT_VALUE2.GT.MAX_WVALUE(DTI_LUN) .OR.
     &        INT_VALUE2.LT.MIN_WVALUE(DTI_LUN) .OR.
     &        INT_VALUE1.EQ.MAX_WVALUE(DTI_LUN) .OR.
     &        INT_VALUE1.EQ.MIN_WVALUE(DTI_LUN)) NEWRAN=.TRUE.
	ENDIF
C
C----------------------------------------------------------------------------
C	Signal success
	SUBSTITUTE=.TRUE.
C
999	RETURN
	END
C
