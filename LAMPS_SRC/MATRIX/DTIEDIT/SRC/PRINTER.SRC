	SUBROUTINE PRINTER(NUMBER_X,NUMBER_Y)
C
***	MODULE PRINTER
***	IDENT  15AP88
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C	D R Catlow
C
C	Routine for DTI to output the value display to a text file
C	(rather than VT100 screen) for subsequent printing on the
C	lp:  In orer to achieve this the lines are output in
C	reverse order.
C
C--------------------------------------------------------------------------
C
	IMPLICIT NONE
C
C common block:
***	COMMON/HERE:DTICOM/
***	COMMON/LSL$CMNDTI:DTIHDR/
C
***	PARAMETER/LSL$CMNLSL:READSTR/
C
C arguments:
	INTEGER*2	NUMBER_X	!number of chars on line
	INTEGER*2	NUMBER_Y	!number of lines to output
C
C local workspace:
	INTEGER*4	MAX_WIDTH	!maximum number of chs on line
	PARAMETER	(MAX_WIDTH=132)
	INTEGER*4	X,Y		!column and row counters
	INTEGER*4	POS		!position in output buffer
	INTEGER*4	RET		!function return
	BYTE   		OUT_LINE(MAX_WIDTH)	!line of values
C
	REAL		REAL_VALUE	! real data value
	INTEGER*4	DATA_VALUE	!data value read
	INTEGER*2	WORD_VALUE	! word value
	BYTE		BYTE_VALUE	! byte value
C
	CHARACTER*80	PRINT_FILE	! name of print file
	INTEGER*4	PRINT_FILE_LEN	! length of print file name
	LOGICAL		SPOOL		! spool to line-printer
	INTEGER*4	FAKSTR(2)	! fake string descriptor
	INTEGER*4	FAKLEN		! length of string
	BYTE		FAKBUF(80)
	BYTE		CH		! single character
C
	EQUIVALENCE	(BYTE_VALUE,WORD_VALUE)
	EQUIVALENCE	(FAKLEN,FAKSTR(1))
C
C Function:
	INTEGER*4 PARFILN		! parse filename
	INTEGER*4 READSTR		! read a string
	LOGICAL   RDCHS			! read single character
	INTEGER*4	FLWOPN		! open a file for writing 
	INTEGER*4	FLWCLO		! close the file
	INTEGER*4	FLWLIN		! write a record
	INTEGER*4	FLWSPL		! close the file, delete and spool
C
	INTEGER*4	DTI_READ_DATA	!to read a data value from the matrix
C
C------------------------------------------------------------------------
C
	IF(NUMBER_X.GT.MAX_WIDTH)THEN
	  CALL WRITEF
     &	('%S Specifying command PRINT',ERROR_BELL)
	  CALL WRITEF
     &  ('Number of columns exceeds %N',MAX_WIDTH)
	  CALL WRITEF
     &  ('Number of columns will be truncated')
	  NUMBER_X=MAX_WIDTH
	ENDIF
C
C	Truncate both X_NUMBER and Y_NUMBER if necessary
	IF(YORI+NUMBER_Y.GT.YCOUNTS_W)NUMBER_Y=(YCOUNTS_W-YORI)+1
	IF(XORI+NUMBER_X.GT.XCOUNTS_W)NUMBER_X=(XCOUNTS_W-XORI)+1
C
C	Has a file specification been provided?
	IF(.NOT.RDCHS(CH))THEN
	  CALL BSCH
C
C	Parse the filename
	  FAKSTR(2)=%LOC(FAKBUF)	! set up fake string descriptor
	  FAKLEN=128
	  FAKLEN=READSTR(FAKSTR,' ',ON_CHAR2,.TRUE.)
C
C	Parse the input file name against LSL$COM:.COM
	  RET=PARFILN(PRINT_FILE,
     &                PRINT_FILE_LEN,
     &	              FAKSTR,
     &	              '.DAT',
     &	              .TRUE.)
	  IF(.NOT.RET)THEN
	    CALL LSL_PUTMSG(RET)
	    GOTO 999
	  ENDIF
C
	  SPOOL=.FALSE.			!don't spool on completion
C
	ELSE
C
C	Create a default print file, which on completion is
C	spooled to the printer and deleted from disk	  
	  PRINT_FILE='DTIEDIT.DAT'
	  PRINT_FILE_LEN=11
          SPOOL=.TRUE.
	ENDIF
C
C	Create the file
	RET=FLWOPN(2,PRINT_FILE)
	IF(.NOT.RET)THEN
	  CALL LSL_PUTMSG(RET)
	  GOTO 999
	ENDIF
C
	DO 200 Y = YORI+(NUMBER_Y-1),YORI,-1
C
	   POS = 1
	   DO 100  X = XORI,XORI+(NUMBER_X-1)
C
	  	IF     (DATA_TYPE(1).EQ.4)THEN	! real data
	    	  RET=DTI_READ_DATA(1,REAL_VALUE,X,Y)
	    	  IF(.NOT.RET)THEN
	          CALL LSL_PUTMSG(RET)
	          GOTO 999
	        ENDIF
	        DATA_VALUE=INT(REAL_VALUE)
	        ELSE IF(DATA_TYPE(1).EQ.1)THEN	! byte data
	          RET=DTI_READ_DATA(1,BYTE_VALUE,X,Y)
	          IF(.NOT.RET)THEN
	          CALL LSL_PUTMSG(RET)
	          GOTO 999
	        ENDIF
	        DATA_VALUE=WORD_VALUE
	        ELSE IF(DATA_TYPE(1).EQ.5)THEN	! bit data
	          RET=DTI_READ_DATA(1,BYTE_VALUE,X,Y)
	          IF(.NOT.RET)THEN
	          CALL LSL_PUTMSG(RET)
	          GOTO 999
	        ENDIF
	        DATA_VALUE=WORD_VALUE
	        ELSE IF(DATA_TYPE(1).EQ.2)THEN	! word data
	          RET=DTI_READ_DATA(1,WORD_VALUE,X,Y)
	          IF(.NOT.RET)THEN
	          CALL LSL_PUTMSG(RET)
	          GOTO 999
	        ENDIF
	        DATA_VALUE=WORD_VALUE
	        ELSE IF(DATA_TYPE(1).EQ.3)THEN	! long data
	          RET=DTI_READ_DATA(1,DATA_VALUE,X,Y)
	          IF(.NOT.RET)THEN
	          CALL LSL_PUTMSG(RET)
	          GOTO 999
	        ENDIF
	      ENDIF
C
C	Set the appropriate character to represent this value
	      IF     (DATA_VALUE.EQ.0) THEN
 	             OUT_LINE(POS)=' '
	      ELSEIF (DATA_VALUE.LT.BASHGT) THEN
	             OUT_LINE(POS)='-'
	      ELSEIF (DATA_VALUE.GT.BASHGT+26*INCHGT-1) THEN
	             OUT_LINE(POS)='+'
	      ELSE
	             OUT_LINE(POS)=65+(DATA_VALUE-BASHGT)/INCHGT
	      ENDIF
C
	      POS=POS+1
C
100	   CONTINUE
C
	   RET=FLWLIN(OUT_LINE,POS-1)
	   IF(.NOT.RET)THEN
	     CALL LSL_PUTMSG(RET)
	     GOTO 900
	   ENDIF
C
200	CONTINUE
C
C----------------------------------------------------------------------------
C	Output the filename, window and a step guide before closing
C	the file.
	CALL FLWRTF(' ')
	CALL FLWRTF(' ')
	CALL FLWRTF('DTI file: %S      DTI window: 
     & SW %^W%N %^W%N  NE %^W%N %^W%N',
     &	             DTI_NAME(1)(1:DTI_NAME_LENGTH(1)),
     &		     XORI,YORI,XORI+(NUMBER_X-1),YORI+(NUMBER_Y-1))	   
	CALL FLWRTF(' ')
	CALL FLWRTF
     &  ('Character Values: 
     &<space>=0 ,A = %N to %N, Z=%N to %N, step=%N',
     &                     BASHGT,BASHGT+INCHGT-1,
     &                     BASHGT+25*INCHGT,BASHGT+26*INCHGT-1,INCHGT)
C	
C	Close the file, and spool to the line-printer if necessary
900	IF(SPOOL)THEN
	  RET=FLWSPL(2)
	  IF(.NOT.RET)THEN
	    CALL LSL_PUTMSG(RET)
	    GOTO 999
	  ENDIF
	ELSE
	  RET=FLWCLO(2)
	  IF(.NOT.RET)THEN
	    CALL LSL_PUTMSG(RET)
	    GOTO 999
	  ENDIF
	ENDIF
C
999	RETURN
C
	END
