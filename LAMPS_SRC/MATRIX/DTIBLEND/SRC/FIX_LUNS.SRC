C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-02-08 19:42:42.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE FIX_LUNS()
C
***	MODULE	FIX_LUNS
***	IDENT	08FE89
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
C 	Created 					TJH 12-May-1988
C
C Fix names to the various LUNS set up for DTI input and output
C
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE 'LSL$CMNDTIBLEND:PARAMS.PAR'
	INCLUDE 'LSL$CMNDTI:DTIPAR.PAR'
C
C Common
	INCLUDE 'LSL$CMNDTI:DTIHDR.CMN'
	INCLUDE 'LSL$CMNDTIBLEND:COMMAND.CMN'
	INCLUDE 'LSL$CMNDTIBLEND:FILES.CMN'
	INCLUDE 'LSL$CMNDTIBLEND:PROCESS.CMN'
C
C W/s
	INTEGER		I
C
C ......................................................................
C
C Determine the luns of the two input files.
	DO 10 I=1,MAX_DTI
	   IF (DTI_ACCESS(I).EQ.1
     &	   .OR.DTI_ACCESS(I).EQ.4
     &	   .OR.DTI_ACCESS(I).EQ.3) THEN
	      IF (INLUN(1).EQ.0) THEN
	         INLUN(1)=I
	      ELSE
	         INLUN(2)=I
	      ENDIF
	   ENDIF
10	CONTINUE
C
C IF no NULL value explicitly supplied with the NULL command, set a 
C default null value that is appropriate to the DTI data type
	IF (HAD_NULL) THEN
	   IF (DATA_TYPE(INLUN(1)).EQ.DATA_BYTE) THEN
	      NULL_VALUE=MIN(NULL_VALUE,255.0)
	      NULL_VALUE=MAX(NULL_VALUE,0.0)
	      NULL_BYTE_VALUE=NULL_VALUE
	   ELSEIF (DATA_TYPE(INLUN(1)).EQ.DATA_REAL) THEN
	      NULL_REAL_VALUE=NULL_VALUE
	   ELSEIF (DATA_TYPE(INLUN(1)).EQ.DATA_LONG) THEN
	      NULL_LONG_VALUE=INT(NULL_VALUE)
	   ELSEIF (DATA_TYPE(INLUN(1)).EQ.DATA_WORD) THEN
	      NULL_VALUE=MIN(NULL_VALUE,32767.0)
	      NULL_VALUE=MAX(NULL_VALUE,-32768.0)
	      NULL_WORD_VALUE=INT(NULL_VALUE)
	   ENDIF
	ELSE
	   IF (DATA_TYPE(INLUN(1)).EQ.DATA_BYTE) THEN
	      NULL_BYTE_VALUE=DTI_NULL_BYTE
	   ELSEIF (DATA_TYPE(INLUN(1)).EQ.DATA_REAL) THEN
	      NULL_REAL_VALUE=DTI_NULL_REAL
	   ELSEIF (DATA_TYPE(INLUN(1)).EQ.DATA_LONG) THEN
	      NULL_LONG_VALUE=DTI_NULL_LONG
	   ELSEIF (DATA_TYPE(INLUN(1)).EQ.DATA_WORD) THEN
	      NULL_WORD_VALUE=DTI_NULL_WORD
	   ENDIF
	ENDIF
C
C We have finished with NULL_VALUE for now, set it to be DTI_NULL_REAL
C for general use later 
	NULL_VALUE=DTI_NULL_REAL
C
C Identify the HOLD file LUN (HOLD_LUN) if any
	HOLD_LUN=0
C
C Set up rover guidance file luns
	ROVER_LUN(1)=6	! relates to BLEND file 1 (or only BLEND file)
	ROVER_LUN(2)=7	! relates to 2nd BLEND file (if any)
C
C Identify the BLEND input LUN(s)
	BLEND_LUN(1)=INLUN(1)
	BLEND_LUN(2)=INLUN(2)
	IF (DTI_ACCESS(INLUN(1)).EQ.1) THEN
	   HOLD_LUN=INLUN(1)
	   BLEND_LUN(1)=INLUN(2)
	   BLEND_LUN(2)=0
	ELSEIF (DTI_ACCESS(INLUN(2)).EQ.1) THEN
	   HOLD_LUN=INLUN(2)
	   BLEND_LUN(1)=INLUN(1)
	   BLEND_LUN(2)=0
	ENDIF
	RETURN
	END
