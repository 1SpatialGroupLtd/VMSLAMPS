C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-02-08 19:41:04.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE THRESHOLD_MES(LUN,XPOS,YPOS,INVALUE,INOLD_VALUE,IXYZ,
     &				ROVLUN)
C
***	MODULE	THRESHOLD_MES
***	IDENT	08FE89
C
C	Copyright (C), Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Created						TJH 31-MAY-1988
C
C Subtract old from new DTI post value and checks that THRESHOLD value
C not exceeded. If so output messages to SYS$OUTPUT and if Rover
C or listing file, output message and editor directives to appropriate
C files. 
	IMPLICIT NONE
C
C Arguments:
	INTEGER		LUN		! blend file LUN
	INTEGER		XPOS		! column
	INTEGER		YPOS		! row
	LOGICAL*4	INVALUE		! 4 bytes for new post value
	LOGICAL*4	INOLD_VALUE	! 4 bytes for old post value
	REAL		IXYZ(3)		! posn in user units (relative
C					! to local datum)
	INTEGER		ROVLUN		! rover file lun
C
C W/s
	INTEGER*2	IWORK,JWORK
	LOGICAL*1	EXCEED		! THRESHOLD_VALUE exceeded?
	LOGICAL*4	VALUE		! 4 bytes equivalenced onto:
	REAL*4		RVALUE
	INTEGER*4	LVALUE
	INTEGER*2	WVALUE
	BYTE		BVALUE
	EQUIVALENCE (VALUE,RVALUE,WVALUE,LVALUE,BVALUE)
C
	LOGICAL*4	OLD_VALUE	! 4 bytes equivalenced onto:
	REAL*4		OLD_RVALUE
	INTEGER*4	OLD_LVALUE
	INTEGER*2	OLD_WVALUE
	BYTE		OLD_BVALUE
	EQUIVALENCE (OLD_VALUE,OLD_RVALUE,OLD_WVALUE,OLD_LVALUE,
     &			OLD_BVALUE)
	BYTE		BVAL
	INTEGER*2	UNSIGNED_BVAL
	EQUIVALENCE (UNSIGNED_BVAL,BVAL)
C
C Parameters:
	INCLUDE 'LSL$CMNDTI:DTIPAR.PAR'
	INCLUDE 'LSL$CMNDTI:DTIDEF.PAR'
	INCLUDE 'LSL$CMNDTIBLEND:PARAMS.PAR'
C
C Common:
	INCLUDE 'LSL$CMNDTI:DTIHDR.CMN'
	INCLUDE	'LSL$CMNDTIBLEND:COMMAND.CMN'
	INCLUDE	'LSL$CMNDTIBLEND:PROCESS.CMN'
	INCLUDE	'LSL$CMNDTIBLEND:FILES.CMN'
C
C ......................................................................
C
C Initialise
	EXCEED=.FALSE.
C Set up equivalences
	VALUE=INVALUE
	OLD_VALUE=INOLD_VALUE
C
C Subtract old from new post value and compare with threshold value
	IF (DATA_TYPE(LUN).EQ.DATA_BYTE) THEN
	   JWORK=0
	   BVAL=BVALUE		! convert to unsigned byte
	   JWORK=UNSIGNED_BVAL  ! make word for intrinsic function
	   JWORK=0
	   BVAL=OLD_BVALUE
	   IWORK=UNSIGNED_BVAL	
	   IF (ABS(IWORK-JWORK)
     &		.GT.THRESHOLD_VALUE) EXCEED=.TRUE.
	ELSEIF (DATA_TYPE(LUN).EQ.DATA_WORD) THEN
	   IF (ABS(WVALUE-OLD_WVALUE)
     &		.GT.THRESHOLD_VALUE) EXCEED=.TRUE.
	ELSEIF (DATA_TYPE(LUN).EQ.DATA_LONG) THEN
	   IF (ABS(LVALUE-OLD_LVALUE)
     &		.GT.THRESHOLD_VALUE) EXCEED=.TRUE.
	ELSEIF (DATA_TYPE(LUN).EQ.DATA_REAL) THEN
	   IF (ABS(RVALUE-OLD_RVALUE)
     &		.GT.THRESHOLD_VALUE) EXCEED=.TRUE.
	ENDIF
C
C If EXCEED is true output messages
	IF (EXCEED) THEN
C
C SYS$OUTPUT:
	   IF (HAD_DIAG) THEN
	      CALL WRITEF ('DTI post changed by more than '//
     &		'THRESHOLD value at column %N row %N',XPOS,YPOS)
	      IF (DATA_TYPE(LUN).EQ.DATA_REAL) THEN
	         CALL WRITEF('Old value was %F, new value is %F',
     &					OLD_RVALUE,     RVALUE)
	      ELSEIF (DATA_TYPE(LUN).EQ.DATA_WORD) THEN
	         CALL WRITEF('Old value was %^W%N, new value is %N',
     &					OLD_WVALUE,     WVALUE)
	      ELSEIF (DATA_TYPE(LUN).EQ.DATA_LONG) THEN
	         CALL WRITEF('Old value was %N, new value is %N',
     &					OLD_LVALUE,     LVALUE)
	      ELSEIF (DATA_TYPE(LUN).EQ.DATA_BYTE) THEN
	         CALL WRITEF('Old value was %^W%N, new value is %N',
     &					IWORK,     JWORK)
	      ENDIF
	   ENDIF
C
C LIST file
	   IF (HAD_LIST) THEN
	      CALL FLWSEL(LISLUN)
	      CALL FLWRTF ('DTI post changed by more than '//
     &		'THRESHOLD value at column %N row %N',XPOS,YPOS)
	      IF (DATA_TYPE(LUN).EQ.DATA_REAL) THEN
	         CALL FLWRTF('Old value was %F, new value is %F',
     &					OLD_RVALUE,     RVALUE)
	      ELSEIF (DATA_TYPE(LUN).EQ.DATA_WORD) THEN
	         CALL FLWRTF('Old value was %^W%N, new value is %N',
     &					OLD_WVALUE,     WVALUE)
	      ELSEIF (DATA_TYPE(LUN).EQ.DATA_LONG) THEN
	         CALL FLWRTF('Old value was %N, new value is %N',
     &					OLD_LVALUE,     LVALUE)
	      ENDIF
	   ENDIF
C
C
C ROVER file
	   IF (HAD_DIAG) THEN
	      CALL FLWSEL(ROVLUN)
	      CALL FLWRTF (
     &		'MESSAGE DTI post changed by more than '//
     &		'THRESHOLD value at column %N row %N',XPOS,YPOS)
	      IF (DATA_TYPE(LUN).EQ.DATA_REAL) THEN
	         CALL FLWRTF(
     &			'MESSAGE Old value was %F, new value is %F',
     &					OLD_RVALUE,     RVALUE)
	      ELSEIF (DATA_TYPE(LUN).EQ.DATA_WORD) THEN
	         CALL FLWRTF(
     &			'MESSAGE Old value was %^W%N, new value is %N',
     &					OLD_WVALUE,     WVALUE)
	      ELSEIF (DATA_TYPE(LUN).EQ.DATA_BYTE) THEN
	         CALL FLWRTF(
     &			'MESSAGE Old value was %^W%N, new value is %N',
     &					IWORK,     JWORK)
	      ELSEIF (DATA_TYPE(LUN).EQ.DATA_LONG) THEN
	         CALL FLWRTF(
     &			'MESSAGE Old value was %N, new value is %N',
     &					OLD_LVALUE,     LVALUE)
	      ENDIF
	      CALL FLWRTF('MOVE %N %N',XPOS,YPOS)
	      CALL FLWRTF('PING')
	      CALL FLWRTF('RESPOND')
	   ENDIF
	ENDIF
	RETURN
	END
