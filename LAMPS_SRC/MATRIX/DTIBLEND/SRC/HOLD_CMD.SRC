C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-07-28 13:09:04.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION HOLD_CMD()
C
***	MODULE	HOLD_CMD
***	IDENT	28JL92
C
C	Copyright (C), Laser-Scan Ltd., Cambridge, England
C
C	LSLA file origin offset from projection record 
C	used if available				TJH 08-Feb-1989
CMOD	DTI_DTED replaced by parameter DTI_TED4         DRC 18-Aug-1988
C	Created						TJH 23-Jul-1987
C
C Function to get input file-spec from HOLD command. If argument is
C missing the user is prompted. 
C
C Function returns .TRUE. if all is well, otherwise .FALSE.
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE	'LSL$DTMCREATESYS:MESPAR.PAR'
	INCLUDE 'LSL$CMNDTIBLEND:PARAMS.PAR'
	INCLUDE 'LSL$CMNDTI:DTILIBMSG.PAR'
	INCLUDE 'LSL$CMNDTI:DTIPAR.PAR'
	INCLUDE 'LSL$CMNDTI:DTIDEF.PAR'
C
C Common:
	INCLUDE	'LSL$DTMCREATESYS:MESSAGE.CMN'
	INCLUDE 'LSL$CMNDTI:DTIHDR.CMN'
	INCLUDE 'LSL$CMNDTI:DTIPROJ.CMN'
	INCLUDE	'LSL$CMNDTIBLEND:COMMAND.CMN'
	INCLUDE	'LSL$CMNDTIBLEND:FILES.CMN'
	INCLUDE 'LSL$CMNLSL:CMDCOM.CMN'
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'
C
C W/s
	LOGICAL		AMBIG		! had an ambiguous file name ?
	INTEGER		LUN		! current LUN
	INTEGER		I,N		! temp var
	BYTE		CH		! a character
	LOGICAL		BLANK,OK,IERR	! for error returns
	CHARACTER*128	TMP_NAME	! temp. filename
	INTEGER		TMP_NAME_LENGTH	! temp. filename
C
C Functions
	LOGICAL	  GETSPEC 		! jacket for LIB$FIND_FILE
	LOGICAL	  GETFILNAM 		! get file-spec
	LOGICAL	  RDCHS			! read char. skipping spaces
	LOGICAL	  DTI_CLOSE		! close DTI file
	LOGICAL	  DTI_OPEN		! open/read header of DTI file
	LOGICAL	  DTI_PRINT_HEADER	! print DTI header
	LOGICAL	  DTI_UNITS		! determine DTI units
	LOGICAL	  FLRSTR		! read record from file
	LOGICAL	  RDREAL		! reads a lat. lon. coordinate
	LOGICAL	  REALIN		! reads real numbers
	LOGICAL	  TTRSTR		! read from tt:
C
C ......................................................................
C
	HOLD_CMD=.FALSE.		! assume failure
C
C First check that the user hasn't already specified a HOLD command. He
C cannot HOLD both sides of the join!!
C
	DO 10 I=1,MAX_DTI
	   IF (DTI_ACCESS(I).EQ.1) THEN
	      CALL WRITEF(ERROR//
     &		'A HOLD command has already been accepted. If the HOLD')
	      CALL WRITEF(
     &		'command is used, the other DTI file must '//
     &		'be opened using the BLEND ')
	      CALL WRITEF('command.')
	      GOTO 40
	   ENDIF
10	CONTINUE	     
C
C Now see if the idiot user has already specified 2 BLEND commands!
C
	N=0
	DO 20 I=1,MAX_DTI
	   IF (DTI_ACCESS(I).EQ.2 .OR. DTI_ACCESS(I).EQ.4) THEN
	      N=N+1
	   ENDIF
20	CONTINUE	     
C
	IF (N.EQ.2) THEN
	   CALL WRITEF(ERROR//
     &		'Two BLEND commands have already been accepted. If '
     &           //'the HOLD')
	   CALL WRITEF(
     &		'command is used, only one BLEND command '//
     &		'can be specified.')
	   GOTO 40
	ENDIF
C	
C Seems like the first HOLD command, see if a command argument was
C supplied
C
	BLANK=RDCHS(CH)			! empty line ...
	IF (BLANK.OR.CH.EQ.'!') THEN	! or comment?
	   IF (TTIN) THEN
	      CALL EXPAND('%S',WARNING)
	   ELSE
	      CALL EXPAND('%S',ERROR)
	   ENDIF	   
	   CALL WRTAPP('You must specify a file-spec argument '//
     &		'to the HOLD command')
C
	   IF (TTIN) THEN
	      CALL WRITEF('For example HOLD SW301.DTI')
	      CALL WRITEF
	      OK=TTRSTR(,,'Read from which DTI file? ',IERR)
	      IF (OK) THEN
	         CALL BSLN
	      ELSE
	         CALL LSL_PUTMSG(OK)
	         CALL LSL_ADDMSG(IERR)
	         GOTO 40
	      ENDIF
	      IF (TXTPTR.EQ.0) GOTO 40		! empty line
	   ELSE
	      GOTO 40	! someone got their indirect file wrong !!
	   ENDIF
	ENDIF
C
C ......................................................................
C HOLD command is in context, get next available DTI lun and then
C try interpreting the file-spec
C
	IF (DTI_LUN+1 .GT. MAX_DTI) THEN
	   CALL LSL_PUTMSG(DTI__NOFREELUN)
	   GOTO 40
	ELSE
	   DTI_LUN=DTI_LUN+1
	   LUN=DTI_LUN
	ENDIF
C
	CALL BSCH
	OK=GETFILNAM(DTI_NAME(LUN),	! name
     &		DTI_NAME_LENGTH(LUN),	! name length
     &		'LSL$DTI:DTI.DTI;0',	! default spec
     &		.TRUE.,			! 
     &		%REF('!'))		! stop at comment
	CALL STR$UPCASE(DTI_NAME(LUN),DTI_NAME(LUN))
C
	IF (.NOT.OK) THEN
	   CALL WRITEF(ERROR//'Unable to interpret HOLD file-spec')
	   CALL LSL_PUTMSG(OK)
	   GOTO 40
	ENDIF
C
C Now try to find the file.
C
	OK = GETSPEC(DTI_NAME(LUN),	! name
     &		DTI_NAME_LENGTH(LUN),	! name length
     &		MESSAGE,		! full name of file found
     &		MESLEN,			! length of name found
     &		'LSL$DTI:DTI.DTI;',	! default
     &		' ',
     &		AMBIG)
C
	IF (.NOT.OK) THEN
	   CALL WRITEF('%S searching for file %S',ERROR,
     &			DTI_NAME(LUN)(1:DTI_NAME_LENGTH(LUN)))
	   CALL LSL_PUTMSG(OK)
	   GOTO 40
	ENDIF
C
C Attempt to open the DTI file (readonly)
C
	OK = DTI_OPEN(LUN,		! LUN
     &		DTI_NAME(LUN),		! name
     &		DTI_NAME_LENGTH(LUN),	! name length
     &		.FALSE.,		! no write access
     &		IERR)			! error return
C
	IF (.NOT.OK) THEN
	   CALL WRITEF(ERROR//
     &			'opening HOLD DTI file for readonly input')
	   CALL LSL_PUTMSG(OK)
	   CALL LSL_ADDMSG(IERR)
	   GOTO 40
	ENDIF

C Unless this is a TED4 DTI, now get the differences between the
C origin and the bottom l.h. corner of the bounding rectangle, so
C that the offset of the data can be calculated.
C
	IF ( HEADER_TYPE(LUN).EQ.DTI_TED4 .OR.
     &	    (HEADER_TYPE(LUN).EQ.DTI_LSLA .AND.
     &				HAD_PROJ_RECORD(LUN)) ) THEN
	   IF (HEADER_TYPE(LUN).EQ.DTI_LSLA .AND.
     &				HAD_PROJ_RECORD(LUN)) THEN
	      X_OFFSET(LUN)=DTIPROJ_ORIGIN(1,LUN)
	      Y_OFFSET(LUN)=DTIPROJ_ORIGIN(2,LUN)
	   ENDIF
	ELSE
	   CALL WRITEF(
     &			'Please enter the coordinates of the '//
     &			'bottom left-hand corner ')
	   CALL WRITEF('of %S',DTI_NAME(LUN)(1:DTI_NAME_LENGTH(LUN)))
C
	   IF (TTIN) THEN
	      CALL BSCH
	      OK=REALIN('East then North (X then Y) ')
	      IF (.NOT.OK) GOTO 30
C
	      IF (CMDRCT.NE.2) THEN
	         GOTO 30
	      ELSE
	         X_OFFSET(LUN)=REALAR(1)
	         Y_OFFSET(LUN)=REALAR(2)
	      ENDIF
C
	   ELSE
	      OK=FLRSTR(,,IERR)		! read from command file
	      IF (OK) THEN
	         CALL BSLN
		 IF (RDREAL(X_OFFSET(LUN))) GOTO 30
		 IF (RDREAL(Y_OFFSET(LUN))) GOTO 30
	      ELSE
		 CALL LSL_PUTMSG(OK)
		 CALL LSL_ADDMSG(IERR)
		 GOTO 30
	      ENDIF
	   ENDIF
	ENDIF
C
	IF (HEADER_TYPE(LUN).EQ.DTI_MIKE) THEN
	   OK=DTI_PRINT_HEADER(LUN,UNITS_MET)
C
	ELSEIF (HEADER_TYPE(LUN).EQ.DTI_TED4) THEN
	   OK=DTI_PRINT_HEADER(LUN,UNITS_SEC)
	ELSE
	   UNITS=0
	   OK=DTI_UNITS(LUN,UNITS)
	   IF (OK) OK=DTI_PRINT_HEADER(LUN,UNITS)
	ENDIF
C
	IF (.NOT.OK) THEN
	   CALL LSL_PUTMSG(OK)
	ELSE
	   DTI_ACCESS(LUN)=1		! flag readonly opening
	ENDIF
C
	GOTO 40
C
C ......................................................................
C Close the DTI file
C
30	CALL WRITEF('%S reading DTI offset',ERROR)
	CALL WRITEF('You must specify both the X and the '//
     &					'Y origin offset')
	TMP_NAME=DTI_NAME(LUN)
	TMP_NAME_LENGTH=DTI_NAME_LENGTH(LUN)
C
	OK=DTI_CLOSE(LUN,.FALSE.,.TRUE.,IERR)	
	IF (OK) THEN
	   CALL WRITEF(
     &	    'DTI file %S is now closed. Please respecify '//
     &	    'the HOLD command',TMP_NAME(1:TMP_NAME_LENGTH))
	   DTI_ACCESS(LUN)=0
	   DTI_LUN=DTI_LUN-1
	ELSE
	   CALL LSL_PUTMSG(OK)
	   CALL LSL_ADDMSG(IERR)
	ENDIF
C
40	RETURN
	END
C
