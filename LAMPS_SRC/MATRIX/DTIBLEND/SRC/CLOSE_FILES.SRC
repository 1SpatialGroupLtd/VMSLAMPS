C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-05-31 15:10:24.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4  FUNCTION CLOSE_FILES(OK)
C
***	MODULE	CLOSE_FILES
***	IDENT	06NO87
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Author						TJH  06-Nov-1987
C
C Function to close all open DTIBLEND files.
C
C Function returns one of 2 condition codes:
C
C	SS$_NORMAL	- success
C	SS$_ABORT	- something went wrong
C
C All file-specs and their lengths are taken from /FILES/ common.
C
C All error reporting is done locally.
C
	IMPLICIT NONE
C
C Argument:
	LOGICAL		OK		! current error status (in)
C
C Parameters:
	INTEGER*4	STS$K_WARNING
	EXTERNAL  	STS$K_WARNING	! bit mask for warning severity
	INTEGER*4 	SS$_ABORT
	EXTERNAL  	SS$_ABORT	! bad luck!
	INTEGER*4 	SS$_NORMAL
	EXTERNAL  	SS$_NORMAL	! normal successful completion
	INCLUDE 	'LSL$CMNDTIBLEND:PARAMS.PAR'
	INCLUDE 	'LSL$CMNDTIBLEND:DTIBLENDMSG.PAR'
	INCLUDE 	'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE 	'LSL$CMNDTI:DTILIBMSG.PAR'
C
C Functions:
	LOGICAL		IFFCLO		! closes IFF file
	LOGICAL		DTI_CLOSE	! closes DTI file
	LOGICAL		DTI_MINMAX_DATA	! gets DTI file Z range
	INTEGER		FLRCLO		! close indirect file
	INTEGER		FLWCLO		! close listing/ROVER file
	LOGICAL		LIB$DELETE_FILE
C
C Workspace:
	LOGICAL*4	IERR		! for error return	
	INTEGER		I
C
C Common:
	INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE 'LSL$CMNDTIBLEND:COMMAND.CMN'
	INCLUDE 'LSL$CMNDTIBLEND:FILES.CMN'
	INCLUDE 'LSL$CMNDTIBLEND:PROCESS.CMN'
	INCLUDE 'LSL$CMNDTI:DTIHDR.CMN'
	INCLUDE 'LSL$CMNLSL:STATUS.CMN'
C
C.......................................................................
C
	CLOSE_FILES = %LOC(SS$_NORMAL)     ! normal completion
C
C Close any open IFF file
C
	DO 10 I=1,MAX_IFF
	   IF (IFFLUN_INUSE(I)) THEN
	      CALL IFFCLO(I)			! current input file
	      IF (IERCD.NE.0) THEN		! error?
	         CLOSE_FILES=DTIBLN__CLIFF	! error closing file
	         CALL LSL_PUTMSG(CLOSE_FILES,
     &			IFF_NAME(I)(1:IFF_NAME_LENGTH(I)))
	      ENDIF
	   ENDIF
10	CONTINUE
C
C ......................................................................
C
	DO 20 I=1,MAX_DTI
	   IF (DTILUN_INUSE(I)) THEN
C
C If closing a file opened for write update the header
	      IF (DTI_ACCESS(I).EQ.3.OR.DTI_ACCESS(I).EQ.4) THEN
	         IF (OK) THEN
	            CLOSE_FILES=DTI_MINMAX_DATA((I),.TRUE.,IERR)
	            IF (CLOSE_FILES) THEN
	               CLOSE_FILES=DTI_CLOSE(I,.TRUE.,.FALSE.,IERR)
	            ENDIF
	         ELSE
	            IF (DTI_ACCESS(I).EQ.3) THEN
	               CLOSE_FILES=DTI_CLOSE(I,.FALSE.,.FALSE.,IERR)
	               IF (CLOSE_FILES) THEN
	                  CLOSE_FILES=LIB$DELETE_FILE(DTI_NAME(I)
     &			  (1:DTI_NAME_LENGTH(I)),! file-spec
     &			   ';0')		 ! default
	                  IERR=CLOSE_FILES
	               ENDIF
	            ENDIF
	         ENDIF
	      ELSE	       
	         CLOSE_FILES=DTI_CLOSE(I,.FALSE.,.FALSE.,IERR)
	      ENDIF
	      IF (.NOT.CLOSE_FILES) THEN	! error?
	         CLOSE_FILES=DTIBLN__CLDTI
	         CALL LSL_PUTMSG(CLOSE_FILES,
     &			DTI_NAME(I)(:DTI_NAME_LENGTH(I)))
C
C Give any secondary error message
	         IF (.NOT.IERR) CALL LSL_ADDMSG(IERR)
	      ENDIF
	   ENDIF
20	CONTINUE
C
C ......................................................................
C
C If required, close the indirect command file
C
	IF (.NOT.TTIN) THEN
	   CLOSE_FILES=FLRCLO(INDLUN,IERR)
	   IF (CLOSE_FILES.NE.LSL__NORMAL) THEN	! error?
	      CLOSE_FILES=DTIBLN__CLIND		! close failed
	      CALL LSL_PUTMSG(CLOSE_FILES,IND_NAME(:IND_NAME_LENGTH))
C
C Give any secondary error message
	      IF (.NOT.IERR) CALL LSL_ADDMSG(IERR)
	   ENDIF
	ENDIF	
C
C ......................................................................
C
C If required, close the ROVER command file
C
	DO 30 I=1,2
	   IF (ROVLUN_INUSE(I)) THEN
	      CLOSE_FILES=FLWCLO(ROVER_LUN(I),IERR)
	      IF (CLOSE_FILES.NE.LSL__NORMAL) THEN	! error?
	         CLOSE_FILES=DTIBLN__CLROV		! close failed
	         CALL LSL_PUTMSG(CLOSE_FILES,
     &			ROVER_NAME(I)(1:ROVER_NAME_LENGTH(I)))
C
C Give any secondary error message
	         IF (.NOT.IERR) CALL LSL_ADDMSG(IERR)
	      ENDIF
	   ENDIF	
30	CONTINUE
C
C.......................................................................
C
40	IF (CLOSE_FILES) THEN
	   CLOSE_FILES=%LOC(SS$_NORMAL)
	ELSE
	   CLOSE_FILES=%LOC(SS$_ABORT)
	ENDIF
	RETURN
	END
