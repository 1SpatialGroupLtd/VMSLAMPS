C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-09-10 14:23:52.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION SHOW_CMD()
C
***	MODULE	SHOW_CMD
***	IDENT	10SE96
C
C	Copyright (C), Laser-Scan Laboratories Ltd., Cambridge, England
C
CMOD	SHOW DEFAULTS now SHOW ENABLE			TJH 08-Feb-1989
C	Created						TJH 03-Nov-1987
C
C Function to show command status eg SHOW FILES.
C
C Function returns .TRUE. if all is well, .FALSE. if an error
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'
	INCLUDE 'LSL$CMNDTIBLEND:PARAMS.PAR'
	INCLUDE 'LSL$CMNDTI:DTIDEF.PAR'
	INCLUDE 'LSL$CMNDTI:DTIPAR.PAR'
C
C Common blocks:
	INCLUDE 'LSL$CMNDTI:DTIHDR.CMN'
	INCLUDE 'LSL$CMNDTIBLEND:SELECTIONS.CMN'
	INCLUDE 'LSL$CMNDTIBLEND:PROCESS.CMN'
	INCLUDE 'LSL$CMNDTIBLEND:COMMAND.CMN'
	INCLUDE 'LSL$CMNDTIBLEND:FILES.CMN'
	INCLUDE 'LSL$CMNLSL:FILENAME.CMN'
	INCLUDE 'LSL$CMNLSL:CMDCOM.CMN'
C
C W/s
	LOGICAL*1	HAD_FILE
	BYTE		CH	! for use with RDCHS
	INTEGER		CMD     ! decoded command number
	INTEGER		I
C
C Function:
	INTEGER		RDCOMM
C
C Command table:
	EXTERNAL	SHOW_CMD_TABLE
	INTEGER		SHOW_CMD_TABLE
C
C ......................................................................
C
	SHOW_CMD=.TRUE.			! assume success
C
	NOMESS=.TRUE.			! turn off CMDLIB messages

	CMD=RDCOMM(SHOW_CMD_TABLE)	! get command
	CMD=CMD+1
	GOTO (
     &		20,			! error/nothing	- cmd=1
     &		40,			! BORDER
     &		50,			! ENABLE
     &		80,			! FILES
     &		60,			! NULL
     &		110,			! SELECTIONS
     &		70			! THRESHOLD
     &			), CMD
C
C Command number out of range
	CALL WRITEF('%S Command not yet implemented',ERROR)
	SHOW_CMD=.FALSE.
	GOTO 130
C
C ......................................................................
C SHOW 
C
20	CALL WRITEF
	CALL WRITEF('%S Specifying command SHOW',ERROR)
	CALL WRITEF
	CALL WRITEF('Available SHOW command qualifiers are:')
	CALL WRITEF
	CALL WRITEF('BORDER       ENABLE      FILES     '//
     &			'NULL     SELECTIONS   THRESHOLD')
	GOTO 130
C
C ......................................................................
C SHOW BORDER
40	CALL WRITEF
	CALL WRITEF ('Blend border width ..'//
     &			'....................................... %N',
     &							BORDER_WIDTH)
	GOTO 130
C
C ......................................................................
C SHOW ENABLE
50	CALL WRITEF
	CALL EXPAND('DIAGNOSTICS .................'//
     &			'................................. ')
	IF (HAD_DIAG) THEN
	   CALL WRTAPP('On')
	ELSE
	   CALL WRTAPP('Off')
	ENDIF
	CALL EXPAND
     &      ('DIVIDEBY ...................'//
     &			'..................................')
	IF (DIVIDE) THEN
	   CALL WRTAPP(' On')
	   CALL WRITEF('Incoming heights to be divided by '//
     &			'...........................%F8.3 ',1./MFACTR)
	ELSE
	   CALL WRTAPP(' Off')
	ENDIF
	CALL EXPAND
     &      ('INTEGER_HEIGHT .............'//
     &			'.................................. ')
	IF (AC2HT) THEN
	   CALL WRTAPP ('On')
	   CALL WRITEF
     &	   ('(Incoming IFF heights expected in type 2 AC entries)')
	ELSE
	   CALL WRTAPP ('Off')
	   CALL WRITEF
     &	   ('(Incoming IFF heights expected in type 3 AC entries)')
	ENDIF
	CALL EXPAND('IN_SITU .....................'//
     &			'................................. ')
	IF (INSITU) THEN
	   CALL WRTAPP('On')
	ELSE
	   CALL WRTAPP('Off')
	ENDIF
	CALL EXPAND
     &      ('MULTIPLY ..................'//
     &			'.................................. ')
	IF (MULT) THEN
	   CALL WRTAPP('On')
	   CALL WRITEF('Incoming heights to be multiplied by '//
     &			'........................%F8.3 ',MFACTR)
	ELSE
	   CALL WRTAPP(' Off')
	ENDIF
	CALL EXPAND
     &      ('PME ........................'//
     &			'.................................. ')
	IF (PMEING) THEN
	   CALL WRTAPP('On')
	ELSE
	   CALL WRTAPP('Off')
	ENDIF
	CALL EXPAND
     &      ('TOFEET .....................'//
     &			'.................................. ')
	IF (M2FEET) THEN
	   CALL WRTAPP('On')
	ELSE
	   CALL WRTAPP('Off')
	ENDIF
	CALL EXPAND
     &      ('TOMETRES ...................'//
     &			'.................................. ')
	IF (FEET2M) THEN
	   CALL WRTAPP('On')
	ELSE
	   CALL WRTAPP('Off')
	ENDIF
	CALL EXPAND
     &      ('SMOOTH ...................'//
     &			'.................................. ')
	IF (SMOOTH) THEN
	   CALL WRTAPP('On')
	ELSE
	   CALL WRTAPP('Off')
	ENDIF
	GOTO 130
C
C ......................................................................
C SHOW NULL
60	CALL WRITEF
	CALL EXPAND('Null value ..................'//
     &			'...............................')
	IF (HAD_NULL) THEN
	   IF (DATA_TYPE(INLUN(1)).EQ.DATA_REAL) THEN
	      CALL WRTAPP('%F',NULL_VALUE)
	   ELSE
	      CALL WRTAPP('%N',NINT(NULL_VALUE))
	   ENDIF
	ELSE
	   CALL WRTAPP(' DTILIB default')
	ENDIF
	GOTO 130
C
C ......................................................................
C SHOW THRESHOLD
70	CALL WRITEF
	CALL EXPAND('Threshold change value for messages '//
     &			'........................ ')
	IF (HAD_THRESH) THEN
	   CALL WRTAPP('%F',THRESHOLD_VALUE)
	ELSE
	   CALL WRTAPP('Unset')
	ENDIF
	GOTO 130
C
C ......................................................................
C SHOW FILES
80	CALL WRITEF
	CALL WRITEF('BLEND file:')
	HAD_FILE=.FALSE.
	DO 10 I=1,MAX_DTI
	   IF (DTI_ACCESS(I).EQ.2.OR.DTI_ACCESS(I).EQ.4) THEN
	      IF (HAD_FILE) THEN
	         CALL EXPAND('(2) ')
	      ELSE
	         CALL EXPAND('(1) ')
	      ENDIF
	      CALL WRTAPP('     %S',DTI_NAME(I)(1:DTI_NAME_LENGTH(I)))
	      IF (DTI_ACCESS(I).EQ.4) THEN 
		 CALL WRITEF(
     &			'          (Opened for in_situ modification)')
	      ENDIF
	      HAD_FILE=.TRUE.
	   ENDIF
10	CONTINUE
	IF (.NOT.HAD_FILE) CALL WRITEF('     Not yet specified.')
	CALL WRITEF
	CALL WRITEF('HOLD file:')
	HAD_FILE=.FALSE.
	DO 15 I=1,MAX_DTI
	   IF (DTI_ACCESS(I).EQ.1) THEN
	      CALL WRITEF('     %S',DTI_NAME(I)(1:DTI_NAME_LENGTH(I)))
	      HAD_FILE=.TRUE.
	   ENDIF
15	CONTINUE
	IF (.NOT.HAD_FILE) CALL WRITEF('     None specified.')
	CALL WRITEF
	CALL WRITEF('Output DTI file:')
	HAD_FILE=.FALSE.
	DO 25 I=1,MAX_DTI
	   IF (DTI_ACCESS(I).EQ.3.OR.DTI_ACCESS(I).EQ.4) THEN
	      IF (HAD_FILE) THEN
	         CALL EXPAND('(2) ')
	      ELSE
	         CALL EXPAND('(1) ')
	      ENDIF
	      CALL WRTAPP('     %S',DTI_NAME(I)(1:DTI_NAME_LENGTH(I)))
	      HAD_FILE=.TRUE.
	   ENDIF
25	CONTINUE
	IF (.NOT.HAD_FILE) CALL WRITEF('     Not yet specified.')
	IF (HAD_LIST) THEN
	   CALL WRITEF
	   CALL WRITEF('Listing file:')
	   CALL WRITEF('     %S',LIST_NAME(1:LIST_NAME_LENGTH))
	ENDIF	
	IF (HAD_FRT) THEN
	   CALL WRITEF
	   CALL WRITEF('FRT file:')
	   CALL WRITEF('     %S',FRT_NAME(1:FRT_NAME_LENGTH))
	ENDIF	
	IF (HAD_ROVER) THEN
	   DO 90 I=1,2
C
C Two BLEND files which need rover files?
	      IF (BLEND_LUN(I).EQ.0) GOTO 90
	      CALL WRITEF
	      CALL EXPAND('ROVER file')
	      IF (BLEND_LUN(2).EQ.0) THEN
	         CALL WRTAPP(':')
	      ELSE
	         CALL WRTAPP(' #%N:',I)
	      ENDIF
C
C Make up ROVER RCM file-spec based on BLEND file-spec
	      CALL PUTFLN(DTI_NAME(BLEND_LUN(I)))
	      CALL WRITEF('     %S',
     &			'LSL$ROVERCMD:'//STR_NAM(1:LEN_NAM)//'.RCM;0')
90	   CONTINUE
	ENDIF	
C
	CALL WRITEF
	CALL WRITEF('IFF files:')
	IF (NUM_IFF.EQ.0) THEN
	   CALL WRITEF('     Not yet specified')	   
	ELSE
	   DO 100 I=1,NUM_IFF
	      CALL WRITEF('     %S',IFF_NAME(I)(1:IFF_NAME_LENGTH(I)))
	      CALL WRITEF
	      CALL EXPAND ('     Heights expected in type ')
	      IF (IFF_AC2HT(I)) THEN
	         CALL WRTAPP('2 ACs')
	      ELSE
	         CALL WRTAPP('3 ACs')
	      ENDIF
	      CALL WRITEF
100	   CONTINUE
	ENDIF
	GOTO 130
C
C ......................................................................
C SHOW SELECTIONS
110	CALL WRITEF
	CALL WRITEF('Selections:')
	CALL WRITEF
	IF (NUM_IFF.EQ.0) THEN
	   CALL WRITEF('No IFF files yet specified but current '//
     &			'selections are:')
	   CALL WRITEF
	   CALL WRITEF('Layers:')
	   CALL DISPLBTMP(
     &			'Layers selected for input:',
     &			'All layers deselected',
     &			 BMAX,
     &		 	USEOV,.TRUE.)
	   CALL WRITEF
	   CALL WRITEF('Feature codes:')
	   CALL DISPLBTMP(
     &			'Feature codes selected for input:',
     &			'All feature codes deselected',
     &			 BMAX,
     &			 USEFC,.TRUE.)
	      CALL WRITEF
	      IF (ABS(MFACTR).LT.1.0) THEN
	          CALL WRITEF('Heights to be divided by %F',MFACTR)
	      ELSEIF (ABS(MFACTR).GT.1.0) THEN
		  CALL WRITEF('Heights to be multiplied by %F',MFACTR)
	      ENDIF
	      IF (M2FEET) THEN
		 CALL WRITEF('Heights to be converted to feet')
	      ELSEIF (FEET2M) THEN
		 CALL WRITEF('Heights to be converted to metres')
	      ENDIF
	ELSE	
	   DO 120 I=1,NUM_IFF
	      CALL WRITEF
	      CALL WRITEF('IFF file #%N:',I)
	      CALL WRITEF('     %S',IFF_NAME(I)(1:IFF_NAME_LENGTH(I)))
	      CALL WRITEF
	      CALL EXPAND ('Heights expected in type ')
	      IF (IFF_AC2HT(I)) THEN
	         CALL WRTAPP('2 ACs')
	      ELSE
	         CALL WRTAPP('3 ACs')
	      ENDIF
	      IF (ABS(IFF_MFACTR(I)).LT.1.0) THEN
	          CALL WRITEF(
     &			'Heights to be divided by %F',IFF_MFACTR(I))
	      ELSEIF (ABS(IFF_MFACTR(I)).GT.1.0) THEN
	          CALL WRITEF(
     &			'Heights to be multiplied by %F',IFF_MFACTR(I))
	      ENDIF
	      IF (IFF_M2FEET(I)) THEN
		 CALL WRITEF('Heights to be converted to feet')
	      ELSEIF (IFF_FEET2M(I)) THEN
		 CALL WRITEF('Heights to be converted to metres')
	      ENDIF
	      CALL WRITEF
	      CALL WRITEF('Layers:')
	      CALL DISPLBTMP(
     &			'Layers selected for input:',
     &			'All layers deselected',
     &			 BMAX,
     &		 	IFF_USEOV(1,I),.TRUE.)
	      CALL WRITEF
	      CALL WRITEF('Feature codes:')
	      CALL DISPLBTMP(
     &			'Feature codes selected for input:',
     &			'All feature codes deselected',
     &			 BMAX,
     &			 IFF_USEFC(1,I),.TRUE.)
120	   CONTINUE
	ENDIF
130	CALL WRITEF
	NOMESS=.FALSE.			! restore CMDLIB error reporting
	RETURN
	END
