C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-02-08 19:00:38.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION LOAD_MEAN_EDGE()
C
***	MODULE	LOAD_MEAN_EDGE
***	IDENT	08FE89
C
C	Copyright (C), Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Created						TJH 20-MAY-1988
C
C Loads the new mean edge values into EDGEARR for the BLEND/BLEND case
C
C Function returns .TRUE. if all is well
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE 'LSL$CMNDTIBLEND:DTIBLENDMSG.PAR'
	INCLUDE 'LSL$CMNDTI:DTIPAR.PAR'
	INCLUDE 'LSL$CMNDTIBLEND:PARAMS.PAR'
C
C Common:
	INCLUDE 'LSL$CMNDTI:DTIHDR.CMN'
	INCLUDE	'LSL$CMNDTIBLEND:COMMAND.CMN'
	INCLUDE	'LSL$CMNDTIBLEND:PROCESS.CMN'
	INCLUDE	'LSL$CMNDTIBLEND:FILES.CMN'
	INCLUDE '($SSDEF)/NOLIST'
C
C W/s
	INTEGER		I,J,IWORK,JWORK
	INTEGER		IERR			! error return
	LOGICAL*4	VALUE			! 4 bytes
	REAL*4		RVALUE
	BYTE		BVALUE
	INTEGER*4	LVALUE
	INTEGER*2	WVALUE
	EQUIVALENCE (VALUE,RVALUE,WVALUE,LVALUE,BVALUE)
	BYTE		BVAL
	INTEGER*2	UNSIGNED_BVAL
	EQUIVALENCE (UNSIGNED_BVAL,BVAL)
C
C Functions
	LOGICAL		DTI_COPY_DATA		! copy DTI data!
	LOGICAL		DTI_READ_DATA		! read DTI data!
C
C ......................................................................
C
	LOAD_MEAN_EDGE=SS$_ABORT		! assume failure
C
	IF (HAD_DIAG) THEN
	   CALL WRITEF
	   CALL WRITEF('Two BLEND files specified - calculating '//
     &			'mean values for the common edge')
	   CALL WRITEF
	ENDIF
	IF (HAD_LIST) THEN
	   CALL FLWSEL(LISLUN)
	   CALL FLWRTF
	   CALL FLWRTF('Two BLEND files specified - calculating '//
     &			'mean values for the common edge')
	   CALL FLWRTF
	ENDIF
C
	IF (HORIZONTAL_JOIN) THEN
	   LOAD_MEAN_EDGE=DTI_COPY_DATA(
     &		 BLEND_LUN,			! LUN
     &		 EDGEARR,			! an edge
     &		 .FALSE.,			! copy file to array
     &		 DTI_WINDOW_SWX(BLEND_LUN(1)),	! start col
     &		 SHARED_ROW(BLEND_LUN(1)),	! start row
     &		 DTI_WINDOW_NEX(BLEND_LUN(1))
     &			-DTI_WINDOW_SWX(BLEND_LUN(1))+1,
     &		 1,				! number of rows
     &		 IERR)				! system error
C
	ELSE	! VERTICAL JOIN
C
	   LOAD_MEAN_EDGE=DTI_COPY_DATA(
     &		 BLEND_LUN(1),			! LUN
     &		 EDGEARR,			! an edge
     &		 .FALSE.,			! copy file to array
     &		 SHARED_COL(BLEND_LUN(1)),	! start col
     &		 DTI_WINDOW_SWY(BLEND_LUN(1)),	! start row
     &		 1,				! number of cols
     &		 DTI_WINDOW_NEY(BLEND_LUN(1))
     &			-DTI_WINDOW_SWY(BLEND_LUN(1))+1,
     &		 IERR)				! system error
	ENDIF
	IF (.NOT.LOAD_MEAN_EDGE) THEN
	   CALL LSL_PUTMSG(LOAD_MEAN_EDGE)
	   CALL LSL_ADDMSG(IERR)
	   GOTO 30	        ! close file and return
	ENDIF
C
C We now have in EDGEARR the edge values for the common DTI edge
C from BLEND file 1.  Now read the post values from the common
C edge of blend file 2 to derive the mean. Take great care of the
C DTI file data type and NULL post values!!!
	IF (HORIZONTAL_JOIN) THEN
C
C For each column in turn along the common edge row
	   DO 10 J=1,DTI_WINDOW_NEX(BLEND_LUN(2))
     &			-DTI_WINDOW_SWX(BLEND_LUN(2))+1
	      LOAD_MEAN_EDGE=DTI_READ_DATA(
     &			BLEND_LUN(2),		! lun
     &			VALUE,			! a post
     &			J,			! x posn
     &			SHARED_ROW(BLEND_LUN(2)))! y posn
	      IF (.NOT.LOAD_MEAN_EDGE) THEN
	        CALL LSL_PUTMSG(LOAD_MEAN_EDGE)
		GOTO 30
	      ENDIF
	      IF (DATA_TYPE(BLEND_LUN(2)).EQ.DATA_BYTE) THEN
	         IF (BEDGE(J).EQ.NULL_BYTE_VALUE
     &				.OR.BVALUE.EQ.NULL_BYTE_VALUE) THEN
	            BEDGE(J)=NULL_BYTE_VALUE
	         ELSE
	            BVAL=BEDGE(J)	! convert to unsigned byte
	            JWORK=UNSIGNED_BVAL ! make long to prevent overflow
	            BVAL=BVALUE
	            IWORK=UNSIGNED_BVAL	
	            BEDGE(J)=(IWORK+JWORK)/2	! when finding mean
	         ENDIF
	      ELSEIF (DATA_TYPE(BLEND_LUN(2)).EQ.DATA_WORD) THEN
	         IF (WEDGE(J).EQ.NULL_VALUE
     &				.OR.WVALUE.EQ.NULL_VALUE) THEN
	            WEDGE(J)=NULL_VALUE
	         ELSE
	            JWORK=WEDGE(J)
	            IWORK=WVALUE
	            WEDGE(J)=(IWORK+JWORK)/2
	         ENDIF
	      ELSEIF (DATA_TYPE(BLEND_LUN(2)).EQ.DATA_LONG) THEN
	         IF (LEDGE(J).EQ.NULL_VALUE
     &				.OR.LVALUE.EQ.NULL_VALUE) THEN
	            LEDGE(J)=NULL_VALUE
	         ELSE
	            LEDGE(J)=(LEDGE(J)+LVALUE)/2
	         ENDIF
	      ELSEIF (DATA_TYPE(BLEND_LUN(2)).EQ.DATA_REAL) THEN
	         IF (REDGE(J).EQ.NULL_VALUE
     &				.OR.RVALUE.EQ.NULL_VALUE) THEN
	            REDGE(J)=NULL_VALUE
	         ELSE
	            REDGE(J)=(REDGE(J)+RVALUE)/2.0
	         ENDIF
	      ENDIF
10	   CONTINUE
	ELSE
C
C For each row in turn
	   DO 20 J=1,DTI_WINDOW_NEY(BLEND_LUN(2))
     &			-DTI_WINDOW_SWY(BLEND_LUN(2))+1
	      LOAD_MEAN_EDGE=DTI_READ_DATA(
     &			BLEND_LUN(2),			! lun
     &			VALUE,				! a post
     &			SHARED_COL(BLEND_LUN(2)),	! x posn
     &			J)				! y posn
	      IF (.NOT.LOAD_MEAN_EDGE) THEN
	        CALL LSL_PUTMSG(LOAD_MEAN_EDGE)
		GOTO 30
	      ENDIF
	      IF (DATA_TYPE(BLEND_LUN(2)).EQ.DATA_BYTE) THEN
	         IF (BEDGE(J).EQ.NULL_BYTE_VALUE
     &				.OR.BVALUE.EQ.NULL_BYTE_VALUE) THEN
	            BEDGE(J)=NULL_BYTE_VALUE
	         ELSE
	            BVAL=BEDGE(J)	! convert to unsigned byte
	            JWORK=UNSIGNED_BVAL ! make long to prevent overflow
	            BVAL=BVALUE
	            IWORK=UNSIGNED_BVAL	
	            BEDGE(J)=(IWORK+JWORK)/2	! when finding mean
	         ENDIF
	      ELSEIF (DATA_TYPE(BLEND_LUN(2)).EQ.DATA_WORD) THEN
	         IF (WEDGE(J).EQ.NULL_VALUE
     &				.OR.WVALUE.EQ.NULL_VALUE) THEN
	            WEDGE(J)=NULL_VALUE
	         ELSE
	            JWORK=WEDGE(J)
	            IWORK=WVALUE
	            WEDGE(J)=(IWORK+JWORK)/2
	         ENDIF
	      ELSEIF (DATA_TYPE(BLEND_LUN(2)).EQ.DATA_LONG) THEN
	         IF (LEDGE(J).EQ.NULL_VALUE
     &				.OR.LVALUE.EQ.NULL_VALUE) THEN
	            LEDGE(J)=NULL_VALUE
	         ELSE
	            LEDGE(J)=(LEDGE(J)+LVALUE)/2
	         ENDIF
	      ELSEIF (DATA_TYPE(BLEND_LUN(2)).EQ.DATA_REAL) THEN
	         IF (REDGE(J).EQ.NULL_VALUE
     &				.OR.RVALUE.EQ.NULL_VALUE) THEN
	            REDGE(J)=NULL_VALUE
	         ELSE
	            REDGE(J)=(REDGE(J)+RVALUE)/2.0
	         ENDIF
	      ENDIF
20	   CONTINUE
	ENDIF
	LOAD_MEAN_EDGE=SS$_NORMAL
30	RETURN
	END
