C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-06-06 13:42:08.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION IFF_CMD()
C
***	MODULE	IFF_CMD
***	IDENT	17MY88
C
C	Copyright (C), Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Created						TJH 17-May-1988
C
C Function to get input file-specs from IFF command. If argument is
C missing the user is prompted. The file-specs are placed in
C IFF_NAME(1:MAX_IFF) (MAX_IFF is set in PARAMS.PAR). IFF_CMD
C checks that the file exists before returning.
C
C Function returns .TRUE. if all is well
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE	'LSL$DTMCREATESYS:MESPAR.PAR'
	INCLUDE 'LSL$CMNDTIBLEND:PARAMS.PAR'
C
C Common:
	INCLUDE 'LSL$CMNDTI:DTIHDR.CMN'
	INCLUDE	'LSL$CMNDTIBLEND:SELECTIONS.CMN'
	INCLUDE	'LSL$CMNDTIBLEND:COMMAND.CMN'
	INCLUDE	'LSL$DTMCREATESYS:MESSAGE.CMN'
	INCLUDE	'LSL$CMNDTIBLEND:FILES.CMN'
	INCLUDE 'LSL$CMNLSL:CMDCOM.CMN'
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'
C
C
C W/s
	LOGICAL		AMBIG	! had an ambiguous file name ?
	BYTE		CH		! a character
	INTEGER		I,J		! temp vars.
	LOGICAL		BLANK,OK,IERR	! for error returns
C
C Functions
	LOGICAL		GETFILNAM 	! get file-spec
	LOGICAL		GETSPEC 	! jacket for LIB$FIND_FILE
	LOGICAL		RDCHS		! read char. skipping spaces
	LOGICAL		TTRSTR		! read from TT:
C
C ......................................................................
C
	IFF_CMD=.FALSE.			! assume success
C
C ......................................................................
C
C Test that the user hasn't already sepecified more than MAX_IFF IFF
C files
	IF (NUM_IFF.EQ.MAX_IFF) THEN
	   CALL WRITEF(ERROR//
     &		'DTIBLEND can only accept %N IFF files',MAX_IFF)
	   GOTO 10
	ENDIF	   
C
C See if the user has specified a file to use!
	BLANK=RDCHS(CH)				! empty line ...
	IF (BLANK.OR.CH.EQ.'!') THEN		! or comment?
	   IF (TTIN) THEN
	      CALL WRITEF('%S You must specify a file-spec argument'//
     &		' to the IFF command',WARNING)
	   ELSE
	      CALL WRITEF('%S You must specify a file-spec argument'//
     &		'to the IFF command',ERROR)
	   ENDIF	   
	   IF (TTIN) THEN
	      CALL WRITEF('For example IFF SWAREA.DTA')
	      OK=TTRSTR(,,'Read from which file? ',IERR)
	      IF (OK) THEN
	         CALL BSLN
	      ELSE
	         CALL LSL_PUTMSG(OK)
	         CALL LSL_ADDMSG(IERR)
	         GOTO 10
	      ENDIF
	      IF (TXTPTR.EQ.0) GOTO 10		! empty line
	   ELSE
	      GOTO 10  ! someone got their indirect file wrong !!
	   ENDIF
	ENDIF
C
C ......................................................................
C
C Try interpreting the file-spec
	CALL BSCH
	OK=GETFILNAM(MESSAGE,MESLEN,'LSL$IF:IFF.IFF;',.TRUE.,%REF('!'))
	IF (OK) THEN
C
C Now try to find the file. Use MESSAGE as workspace!
	   OK=GETSPEC(MESSAGE,MESLEN,MESSAGE,MESLEN,'LSL$IF:IFF.IFF;',
     &			' ',AMBIG)
C
C If OK, put the file-spec into the appropriate slot in common
	   IF (OK) THEN
	      IFF_CMD=.TRUE.
C
C Store away number of IFF files specified, file-spec and its length,
C whether heights in AC2 or 3's, and any multiplication factor.
	      NUM_IFF=NUM_IFF+1
	      IFF_NAME(NUM_IFF)=MESSAGE
	      IFF_NAME_LENGTH(NUM_IFF)=MESLEN
	      IFF_AC2HT(NUM_IFF)=AC2HT
	      IFF_M2FEET(NUM_IFF)=M2FEET
	      IFF_FEET2M(NUM_IFF)=FEET2M
	      IFF_MFACTR(NUM_IFF)=MFACTR
C
C Also store away the current selection bitmaps for this file
	      CALL VIOMV3(USEFC,BMAX*4,IFF_USEFC(1,NUM_IFF))
	      CALL VIOMV3(USEOV,BMAX*4,IFF_USEOV(1,NUM_IFF))
C
C Tell the user what has happened
	      CALL WRITEF('IFF file %S selected for read',
     &			IFF_NAME(NUM_IFF)(1:IFF_NAME_LENGTH(NUM_IFF)))
	      CALL WRITEF
	   ELSE
	      CALL STR$UPCASE(MESSAGE(:MESLEN),MESSAGE)
	      CALL WRITEF('%S searching for file %S'
     &			,ERROR,		   MESSAGE(1:MESLEN))
	      CALL LSL_ADDMSG(OK)
	   ENDIF
	ELSE
	   CALL WRITEF('%S Unable to interpret input file-spec',ERROR)
	   CALL LSL_PUTMSG(OK)
	ENDIF
10	RETURN
	END
