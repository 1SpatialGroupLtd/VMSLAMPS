	LOGICAL*4 FUNCTION DESCHK()
C
***	MODULE	DESCHK
***	IDENT	29SE87
C
C	Copyright Laser Scan Laboratories, Cambridge, England.
C
C	Author						TJH 06-Feb-1986
C
C Routine to check the contents of the Map Descriptor attribute
C arrays set up in /MDESC/ to ensure that all the input files share
C common characteristics. Routine will issue warning messages only
C and will not terminate DTIBLEND execution. It is left up to the user
C to interpret the significance of the warnings. 
C 
C Function returns one of 2 condition codes:
C
C	SS$_NORMAL		-   all is well
C	DTIBLN__CONFMD	-   conflicting map descriptors
C
	IMPLICIT NONE
C	
	LOGICAL		HAD_WARNING  ! already warned about this file?
	INTEGER*4	I	     ! loop counter
	INTEGER*4	IFIL	     ! file number
C
C Parameters:
	INCLUDE '($SSDEF)'
	INCLUDE 'LSL$CMNDTIBLEND:PARAMS.PAR'
	INCLUDE 'LSL$CMNDTIBLEND:DTIBLENDMSG.PAR'
C
C Common:
	INCLUDE 'LSL$CMNDTIBLEND:COMMAND.CMN'
	INCLUDE 'LSL$CMNDTIBLEND:DESCK.CMN'
	INCLUDE 'LSL$CMNDTI:DTIPROJ.CMN'
	INCLUDE 'LSL$CMNDTIBLEND:FILES.CMN'
	INCLUDE 'LSL$CMNDTIBLEND:PROCESS.CMN'
C
C ......................................................................
C
C Assume the best
	DESCHK=SS$_NORMAL
C
C If only one input file there is no point in going on
	IF (NUM_IFF.EQ.1.OR.MDTYPE.NE.2) GOTO 60		! return
C
C Check map projection
	DO 30 IFIL=2,NUM_IFF
	   HAD_WARNING=.FALSE.
	   IF (FLPROJ(IFIL).NE.FLPROJ(1)) THEN
	      DESCHK=DTIBLN__CONFLMD
	      CALL LSL_PUTMSG(DESCHK)
	      CALL LSL_ADDMSG(DTIBLN__CONFLPROJ
     &				,IFF_NAME(IFIL)(:IFF_NAME_LENGTH(IFIL)))
	      HAD_WARNING=.TRUE.
	   ENDIF
C
C Check projection dependent parameters
	   DO 10 I=1,15
	      IF (FLPAR(IFIL,I).NE.FLPAR(1,I)) THEN
	         DESCHK=DTIBLN__CONFLMD
	         IF (.NOT.HAD_WARNING) CALL LSL_PUTMSG(DESCHK)
	         CALL LSL_ADDMSG(DTIBLN__CONFLMDPAR
     &				,IFF_NAME(IFIL)(:IFF_NAME_LENGTH(IFIL)))
	         GOTO 20
	      ENDIF
10	   CONTINUE
C
C Check spheroid
20	   IF (FLSPHE(IFIL).NE.FLSPHE(1)) THEN
	      DESCHK=DTIBLN__CONFLMD
	      IF (.NOT.HAD_WARNING) CALL LSL_PUTMSG(DESCHK)
	      CALL LSL_ADDMSG(DTIBLN__CONFLSPHERE
     &				,IFF_NAME(IFIL)(:IFF_NAME_LENGTH(IFIL)))
	   ENDIF
C
C Check user spheroid
	   IF (FLUSPHE(1,IFIL).NE.FLUSPHE(1,1)
     &		.OR.FLUSPHE(2,IFIL).NE.FLUSPHE(2,1)) THEN
	      DESCHK=DTIBLN__CONFLMD
	      IF (.NOT.HAD_WARNING) CALL LSL_PUTMSG(DESCHK)
	      CALL LSL_ADDMSG(DTIBLN__CONFLUSPHERE
     &				,IFF_NAME(IFIL)(:IFF_NAME_LENGTH(IFIL)))
	   ENDIF
C
C Check units
	   IF (FLUNIT(IFIL).NE.FLUNIT(1)) THEN
	      DESCHK=DTIBLN__CONFLMD
	      IF (.NOT.HAD_WARNING) CALL LSL_PUTMSG(DESCHK)
	      CALL LSL_ADDMSG(DTIBLN__CONFLUNIT
     &				,IFF_NAME(IFIL)(:IFF_NAME_LENGTH(IFIL)))
	   ENDIF
30	CONTINUE
C
C ......................................................................
C
C Now check for consistency between IFF and DTI file characteristics
C
C Check map projection
	IF (FLPROJ(1).NE.DTIPROJ_PROJECTION(INLUN(1))) THEN
	   DESCHK=DTIBLN__CONFLMD
	   CALL LSL_PUTMSG(DTIBLN__DTIIFFPRJ)
	ENDIF
C
C Check projection dependent parameters
	DO 40 I=1,15
	   IF (FLPAR(1,I).NE.DTIPROJ_PROJ_PARAMS(INLUN(1),I)) THEN
	      DESCHK=DTIBLN__CONFLMD
	      CALL LSL_ADDMSG(DTIBLN__DTIIFFPRJP)
	      GOTO 50
	   ENDIF
40	CONTINUE
C
C Check spheroid
50	IF (FLSPHE(1).NE.DTIPROJ_SPHEROID(INLUN(1))) THEN
	   DESCHK=DTIBLN__CONFLMD
	   CALL LSL_PUTMSG(DTIBLN__DTIIFFSPH)
	ENDIF
C
C Check user spheroid
	IF (FLUSPHE(1,1).NE.DTIPROJ_USER_SPHEROID(1,INLUN(1))
     &	   .OR.FLUSPHE(2,1).NE.DTIPROJ_USER_SPHEROID(2,INLUN(1))) THEN
	   DESCHK=DTIBLN__CONFLMD
	   CALL LSL_PUTMSG(DTIBLN__DTIIFFUSPH)
	ENDIF
C
C Check units
	IF (FLUNIT(1).NE.DTIPROJ_UNITS(INLUN(1))) THEN
	   DESCHK=DTIBLN__CONFLMD
	   CALL LSL_PUTMSG(DTIBLN__DTIIFFUNI)
	ENDIF
C
60	RETURN
	END
