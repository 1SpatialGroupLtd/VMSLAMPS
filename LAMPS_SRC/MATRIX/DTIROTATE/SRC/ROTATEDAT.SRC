C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-11-25 14:08:40.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION ROTATEDAT(
     &			DTIIN_BYTE_BUFF,
     &			DTIOUT_BYTE_BUFF,
     &			DTIIN_WORD_BUFF,
     &			DTIOUT_WORD_BUFF,
     &			DTIIN_LONG_BUFF,
     &			DTIOUT_LONG_BUFF,
     &			DTIIN_REAL_BUFF,
     &			DTIOUT_REAL_BUFF,
     &			NCOL_IN,NROW_IN,NCOL_OUT,NROW_OUT)
C
***	MODULE	ROTATEDAT
***	IDENT	25NO88
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C
CMOD 681 No longer makes copies of the data, but
C	 addresses the input/output files directly
C	 without using DTILIB. Now takes account of
C	 DTI_ORDER_CORNER and DTI_ORDER_DIRECTION.	TJH 29-Sep-1988
C Created by 						ALB 18-Mar-1988
C
C Data is rotated according to parameters set up by MIRROR and ROTATE
C commands. 
C
	IMPLICIT NONE
C
C parameters
C
	INCLUDE 'LSL$CMNDTI:DTILIBMSG.PAR'
	INCLUDE 'LSL$CMNDTI:DTIPAR.PAR'
C
C common blocks
C
	INCLUDE 'LSL$CMNDTI:DTIHDR.CMN'
	INCLUDE 'LSL$CMNDTIROTATE:CONTROL.CMN'
C
C Arguments
C
	INTEGER*4	NCOL_IN			!num of input columns
	INTEGER*4	NROW_IN			!num of input rows
	INTEGER*4	NCOL_OUT		!num of output columns
	INTEGER*4	NROW_OUT		!num of output rows
C
	BYTE		DTIIN_BYTE_BUFF(NROW_IN,NCOL_IN)   !byte in array
	BYTE		DTIOUT_BYTE_BUFF(NROW_OUT,NCOL_OUT)!byte out array
	INTEGER*2	DTIIN_WORD_BUFF(NROW_IN,NCOL_IN)   !word in array
	INTEGER*2	DTIOUT_WORD_BUFF(NROW_OUT,NCOL_OUT)!word out array
	INTEGER*4	DTIIN_LONG_BUFF(NROW_IN,NCOL_IN)   !long in array
	INTEGER*4	DTIOUT_LONG_BUFF(NROW_OUT,NCOL_OUT)!long out array
	REAL		DTIIN_REAL_BUFF(NROW_IN,NCOL_IN)   !real in array
	REAL		DTIOUT_REAL_BUFF(NROW_OUT,NCOL_OUT)!real out array
C
C w/s
C
	LOGICAL		CRT		!TRUE if terminal a CRT
	INTEGER		RET_CODE	!return code
	INTEGER		IERR		!system error return
	INTEGER		FIRST_COL_OUT	!first column output
	INTEGER		FIRST_ROW_OUT	!first row output
	INTEGER		COL_OUT_INC	!column output increment
	INTEGER		ROW_OUT_INC	!row output increment
	INTEGER		I		!loop counter array subscript
	INTEGER		J		!loop counter array subscript
	INTEGER		K		!array subscript
	INTEGER		L		!array subscript
C
C Function
	LOGICAL		OUTPUT_CRT	!TRUE if SYS$OUTPUT is CRT
C
C***********************************************************************
C
	ROTATEDAT = .TRUE.	! assume ok
C
C find out if output is to a terminal which is a CRT
C
	CRT = OUTPUT_CRT()
C
C --------------------------------------------------------------------
C
C calculate output first column and first row also column and row
C increment 
C
	IF(MIRROR_X.AND..NOT.HAD_ROTATE) THEN
	   FIRST_COL_OUT = 1
	   FIRST_ROW_OUT = NROW_OUT
	   COL_OUT_INC = 1
	   ROW_OUT_INC = -1
	   IF (DTI_ORDER_CORNER(DTIIN_LUN).EQ.0) THEN
	      DTI_ORDER_CORNER(DTIOUT_LUN)=1
	   ELSEIF (DTI_ORDER_CORNER(DTIIN_LUN).EQ.1) THEN
	      DTI_ORDER_CORNER(DTIOUT_LUN)=2
	   ELSEIF (DTI_ORDER_CORNER(DTIIN_LUN).EQ.2) THEN
	      DTI_ORDER_CORNER(DTIOUT_LUN)=3
	   ELSEIF (DTI_ORDER_CORNER(DTIIN_LUN).EQ.3) THEN
	      DTI_ORDER_CORNER(DTIOUT_LUN)=0
	   ENDIF
	   DTI_ORDER_DIRECTION(DTIOUT_LUN)=
     &		ABS(DTI_ORDER_DIRECTION(DTIIN_LUN)-1)
	ELSEIF(MIRROR_BOTH.AND..NOT.HAD_ROTATE) THEN
	   FIRST_COL_OUT = NCOL_OUT
	   FIRST_ROW_OUT = NROW_OUT
	   COL_OUT_INC = -1
	   ROW_OUT_INC = -1
	   IF (DTI_ORDER_CORNER(DTIIN_LUN).EQ.0) THEN
	      DTI_ORDER_CORNER(DTIOUT_LUN)=2
	   ELSEIF (DTI_ORDER_CORNER(DTIIN_LUN).EQ.1) THEN
	      DTI_ORDER_CORNER(DTIOUT_LUN)=3
	   ELSEIF (DTI_ORDER_CORNER(DTIIN_LUN).EQ.2) THEN
	      DTI_ORDER_CORNER(DTIOUT_LUN)=0
	   ELSEIF (DTI_ORDER_CORNER(DTIIN_LUN).EQ.3) THEN
	      DTI_ORDER_CORNER(DTIOUT_LUN)=1
	   ENDIF
	   DTI_ORDER_DIRECTION(DTIOUT_LUN)=DTI_ORDER_DIRECTION(DTIIN_LUN)
	ELSEIF(MIRROR_Y.AND..NOT.HAD_ROTATE) THEN
	   FIRST_COL_OUT = NCOL_OUT
	   FIRST_ROW_OUT = 1
	   COL_OUT_INC = -1
	   ROW_OUT_INC = 1
	   IF (DTI_ORDER_CORNER(DTIIN_LUN).EQ.0) THEN
	      DTI_ORDER_CORNER(DTIOUT_LUN)=3
	   ELSEIF (DTI_ORDER_CORNER(DTIIN_LUN).EQ.1) THEN
	      DTI_ORDER_CORNER(DTIOUT_LUN)=0
	   ELSEIF (DTI_ORDER_CORNER(DTIIN_LUN).EQ.2) THEN
	      DTI_ORDER_CORNER(DTIOUT_LUN)=1
	   ELSEIF (DTI_ORDER_CORNER(DTIIN_LUN).EQ.3) THEN
	      DTI_ORDER_CORNER(DTIOUT_LUN)=2
	   ENDIF
	   DTI_ORDER_DIRECTION(DTIOUT_LUN)=
     &		ABS(DTI_ORDER_DIRECTION(DTIIN_LUN)-1)
	ELSEIF(MIRROR_Y.AND.HAD_ROTATE) THEN
	   FIRST_COL_OUT = 1
	   FIRST_ROW_OUT = 1
	   COL_OUT_INC = 1
	   ROW_OUT_INC = 1
	   IF (DTI_ORDER_CORNER(DTIIN_LUN).EQ.0) THEN
	      DTI_ORDER_CORNER(DTIOUT_LUN)=0
	   ELSEIF (DTI_ORDER_CORNER(DTIIN_LUN).EQ.1) THEN
	      DTI_ORDER_CORNER(DTIOUT_LUN)=1
	   ELSEIF (DTI_ORDER_CORNER(DTIIN_LUN).EQ.2) THEN
	      DTI_ORDER_CORNER(DTIOUT_LUN)=2
	   ELSEIF (DTI_ORDER_CORNER(DTIIN_LUN).EQ.3) THEN
	      DTI_ORDER_CORNER(DTIOUT_LUN)=3
	   ENDIF
	   DTI_ORDER_DIRECTION(DTIOUT_LUN)=
     &		ABS(DTI_ORDER_DIRECTION(DTIIN_LUN)-1)
	ELSEIF(.NOT.HAD_MIRROR.AND.HAD_ROTATE) THEN
	   FIRST_COL_OUT = 1
	   FIRST_ROW_OUT = NROW_OUT
	   COL_OUT_INC = 1
	   ROW_OUT_INC = -1
	   IF (DTI_ORDER_CORNER(DTIIN_LUN).EQ.0) THEN
	      DTI_ORDER_CORNER(DTIOUT_LUN)=3
	   ELSEIF (DTI_ORDER_CORNER(DTIIN_LUN).EQ.1) THEN
	      DTI_ORDER_CORNER(DTIOUT_LUN)=0
	   ELSEIF (DTI_ORDER_CORNER(DTIIN_LUN).EQ.2) THEN
	      DTI_ORDER_CORNER(DTIOUT_LUN)=1
	   ELSEIF (DTI_ORDER_CORNER(DTIIN_LUN).EQ.3) THEN
	      DTI_ORDER_CORNER(DTIOUT_LUN)=2
	   ENDIF
	   DTI_ORDER_DIRECTION(DTIOUT_LUN)=DTI_ORDER_DIRECTION(DTIIN_LUN)
	ELSEIF(MIRROR_X.AND.HAD_ROTATE) THEN
	   FIRST_COL_OUT = NCOL_OUT
	   FIRST_ROW_OUT = NROW_OUT
	   COL_OUT_INC = -1
	   ROW_OUT_INC = -1
	   IF (DTI_ORDER_CORNER(DTIIN_LUN).EQ.0) THEN
	      DTI_ORDER_CORNER(DTIOUT_LUN)=2
	   ELSEIF (DTI_ORDER_CORNER(DTIIN_LUN).EQ.1) THEN
	      DTI_ORDER_CORNER(DTIOUT_LUN)=3
	   ELSEIF (DTI_ORDER_CORNER(DTIIN_LUN).EQ.2) THEN
	      DTI_ORDER_CORNER(DTIOUT_LUN)=0
	   ELSEIF (DTI_ORDER_CORNER(DTIIN_LUN).EQ.3) THEN
	      DTI_ORDER_CORNER(DTIOUT_LUN)=1
	   ENDIF
	   DTI_ORDER_DIRECTION(DTIOUT_LUN)=
     &		ABS(DTI_ORDER_DIRECTION(DTIIN_LUN)-1)
  	ELSE				! mirror both with rotation
	   FIRST_COL_OUT = NCOL_OUT
	   FIRST_ROW_OUT = 1
	   COL_OUT_INC = -1
	   ROW_OUT_INC = 1
	   IF (DTI_ORDER_CORNER(DTIIN_LUN).EQ.0) THEN
	      DTI_ORDER_CORNER(DTIOUT_LUN)=1
	   ELSEIF (DTI_ORDER_CORNER(DTIIN_LUN).EQ.1) THEN
	      DTI_ORDER_CORNER(DTIOUT_LUN)=2
	   ELSEIF (DTI_ORDER_CORNER(DTIIN_LUN).EQ.2) THEN
	      DTI_ORDER_CORNER(DTIOUT_LUN)=3
	   ELSEIF (DTI_ORDER_CORNER(DTIIN_LUN).EQ.3) THEN
	      DTI_ORDER_CORNER(DTIOUT_LUN)=0
	   ENDIF
	   DTI_ORDER_DIRECTION(DTIOUT_LUN)=DTI_ORDER_DIRECTION(DTIIN_LUN)
	ENDIF
C
C transfer from input buffer to output buffer rotating in the process
C
	IF(.NOT.HAD_ROTATE) THEN
	   K = FIRST_COL_OUT
	   DO 200 I = 1,NCOL_IN
	      IF (HAD_DIAG.AND.CRT) THEN
		 CALL PERCENT(' ',1,NCOL_IN,I)
	      ENDIF
	      L = FIRST_ROW_OUT
	      DO 100 J = 1,NROW_IN
C
	         IF((DATA_TYPE(1).EQ.DATA_BYTE).OR.
     & 			(DATA_TYPE(1).EQ.DATA_BYTE)) THEN
	            DTIOUT_BYTE_BUFF(L,K) = DTIIN_BYTE_BUFF(J,I)
C
	         ELSEIF(DATA_TYPE(1).EQ.DATA_WORD) THEN
	            DTIOUT_WORD_BUFF(L,K) = DTIIN_WORD_BUFF(J,I)
C
	         ELSEIF(DATA_TYPE(1).EQ.DATA_LONG) THEN
	            DTIOUT_LONG_BUFF(L,K) = DTIIN_LONG_BUFF(J,I)
C
	         ELSE			!data_type(1) = data_real
	            DTIOUT_REAL_BUFF(L,K) = DTIIN_REAL_BUFF(J,I)
	         ENDIF
	         L = L + ROW_OUT_INC
100	      CONTINUE
	      K = K + COL_OUT_INC
200	   CONTINUE
	ELSE				! by_row = .true.
	   K = FIRST_COL_OUT
	   DO 400 I = 1,NROW_IN
	      IF (HAD_DIAG.AND.CRT) THEN
		 CALL PERCENT(' ',1,NROW_IN,I)
	      ENDIF
	      L = FIRST_ROW_OUT
	      DO 300 J = 1,NCOL_IN
C
	         IF((DATA_TYPE(1).EQ.DATA_BYTE).OR.
     & 			(DATA_TYPE(1).EQ.DATA_BIT)) THEN
	            DTIOUT_BYTE_BUFF(L,K) = DTIIN_BYTE_BUFF(I,J)
C
	         ELSEIF(DATA_TYPE(1).EQ.DATA_WORD) THEN
	            DTIOUT_WORD_BUFF(L,K) = DTIIN_WORD_BUFF(I,J)
C
	         ELSEIF(DATA_TYPE(1).EQ.DATA_LONG) THEN
	            DTIOUT_LONG_BUFF(L,K) = DTIIN_LONG_BUFF(I,J)
C
	         ELSE			!data_type(1) = data_real
	            DTIOUT_REAL_BUFF(L,K) = DTIIN_REAL_BUFF(I,J)
	         ENDIF
	         L = L + ROW_OUT_INC
300	      CONTINUE
	      K = K + COL_OUT_INC
400	   CONTINUE
	ENDIF
C
C ---------------------------------------------------------------------
C
	RETURN
C
	END

