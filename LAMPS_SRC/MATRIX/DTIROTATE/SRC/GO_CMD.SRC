	LOGICAL FUNCTION GO_CMD()
C
***	MODULE GO_CMD
***	IDENT	29AP93
C
C	Copyright : Laser-Scan, Cambridge, England
C
CMOD 681 No longer makes copies of the data, but
C	 addresses the input/output files directly
C	 without using DTILIB				TJH 29-Sep-1988
C
C Created by						ALB 04-Feb-1988
C
C This function does the processing.  The following tasks are performed:-
C
C 1) Test that the input DTI file and output file have been specified. 
C
C 2) Set up output number of columns and number of rows.  Check that
C    the do nothing combination has been requested (ie both HAD_MIRROR
C    and HAD_ROTATE set to .FALSE.) 
C
C 3) Open output DTI file. 
C
C 4) Transfer the header info from input DTI to output DTI
C
C 5) Do processing to rotate data into output array.
C
C 6) Close input and output DTI files
C
C Function returns .TRUE. if all is well.
C
	IMPLICIT NONE
C
C Parameters :
	INCLUDE '($SSDEF)'
	INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'  		! LSL messages
	INCLUDE 'LSL$CMNDTI:DTILIBMSG.PAR'  		! DTI messages
	INCLUDE 'LSL$CMNDTI:DTIPAR.PAR'  		! DTI parameters
	INCLUDE 'LSL$CMNDTI:DTIDEF.PAR'  		! DTI parameters
C
C Common block :
	INCLUDE	'LSL$CMNDTI:DTIHDR.CMN'			!DTILIB common
	INCLUDE	'LSL$CMNLSL:CMDCOM.CMN'			!LSLLIB common
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'
	INCLUDE	'LSL$CMNDTIROTATE:CONTROL.CMN'
C
C w/s
	LOGICAL		OK		! return code
	INTEGER*4	RET_CODE	! return code
	INTEGER*4	IERR		! error code
	INTEGER*4	NCOL		! number of columns for output
	INTEGER*4	NROW		! number of rows for output
C
C Functions :
	INTEGER*4	DTI_CREATE	! create a DTI file
	INTEGER*4	DTI_COPY_HEADER	! intialise output area
	INTEGER*4	DTI_CLOSE	! close DTI files
	LOGICAL		ROTATEDAT	! rotate DTI function
C
C ......................................................................
C
	GO_CMD = .TRUE.	! assume success
C
C test whether whether at least one DTI file has been opened
C
C ........................ >>>> 1 <<<< ..........................
C check whether input DTI available
C
	IF (.NOT.HAD_DTIIN) THEN		! no input DTI file open
	   IF(GO_CMD) THEN
	      CALL WRITEF('%S Specifing command GO',ERROR)
	      GO_CMD=.FALSE.			! command failed
	   ENDIF
	   CALL WRITEF(
     &	        'No input DTI file specified                   	'//
     &		'>> Execute FILEIN command ')
	ENDIF
C
C check whether output DTI available
C
	IF (.NOT.HAD_DTIOUT) THEN		! no input DTI file open
	   IF(GO_CMD) THEN
	      CALL WRITEF('%S Specifing command GO',ERROR)
	      GO_CMD=.FALSE.			! command failed
	   ENDIF
	   CALL WRITEF(
     &	   	'No output DTI file specified                   	'
     &		//'>> Execute FILEOUT command ')
	ENDIF

	IF(.NOT.GO_CMD) THEN
	   GOTO 999		! FILEIN and/or FILEOUT cmds not invoked
	ENDIF
C
C Set up output number of columns and number of rows.  Check that
C the do nothing combination has been requested (ie both HAD_MIRROR and
C HAD_ROTATE set to .FALSE.)
C
C ........................ >>>> 2 <<<< ..........................
C
	IF (HAD_ROTATE) THEN		! switch columns and rows
	   NROW = X_EXTENT(1)
	   NCOL = Y_EXTENT(1)
	ELSE
	   NCOL = X_EXTENT(1)
	   NROW = Y_EXTENT(1)
	ENDIF
	X_GRID(2) = X_GRID(1)		! copy x and y grid intervals 
	Y_GRID(2) = Y_GRID(1)
	IF(.NOT.HAD_ROTATE.AND..NOT.HAD_MIRROR) THEN
	   CALL WRITEF('%S Specifing command GO',ERROR)
	   CALL WRITEF(
     &	   	'Both MIRROR and ROTATE are disabled.')
	   CALL WRITEF(
     &	   	'This combination would result in an '//
     &		'identical output file')
	   CALL WRITEF(
     &	   	'Processing has been aborted')
	   GO_CMD=.FALSE.			! command failed
	   GOTO 999
	ENDIF
C
C
C Open output DTI file
C
C ........................ >>>> 4 <<<< ..........................
C
	
	RET_CODE = DTI_CREATE ( DTIOUT_LUN,	!output DTI lun
     &				DTIFILE(2),	!output file spec
     &				DTILEN(2),	!len of file name
     &				HEADER_TYPE(1),	!input DTI 1 header type
     &				DATA_OFFSET(1),	!header size if LSLA
     &				DATA_TYPE(1),	!data type
     &				NCOL,		!x extent
     &				NROW,		!y extent
     &				IERR)		!system error
	IF(RET_CODE.NE.DTI__NORMAL) THEN
	   CALL LSL_PUTMSG(RET_CODE)
	   IF(RET_CODE.EQ.DTI__SYSERR) THEN
	      CALL LSL_PUTMSG(IERR)
	   ENDIF
	   GO_CMD = .FALSE.
	   GOTO 999
	ENDIF
C
C    Transfer part of the header info from input DTI to output DTI
C
C ........................ >>>> 5 <<<< ..........................
C
C copy header
C
	IF(HEADER_TYPE(DTIIN_LUN).NE.DTI_MIKE)THEN
	  RET_CODE = DTI_COPY_HEADER( DTIIN_LUN,	!input DTI lun
     &				      DTIOUT_LUN,	!output DTI file
     &				IERR)			!system error
	  IF(RET_CODE.NE.DTI__NORMAL) THEN
	     CALL LSL_PUTMSG(RET_CODE)
	     IF(RET_CODE.EQ.DTI__SYSERR) THEN
	       CALL LSL_PUTMSG(IERR)
	     ENDIF
	     GO_CMD = .FALSE.
	     GOTO 999
	  ENDIF
	ENDIF
C
C copy min and max data values 
C
	MIN_RVALUE(2) = MIN_RVALUE(1)
	MAX_RVALUE(2) = MAX_RVALUE(1)
	MIN_LVALUE(2) = MIN_LVALUE(1)
	MAX_LVALUE(2) = MAX_LVALUE(1)
	MIN_WVALUE(2) = MIN_WVALUE(1)
	MAX_WVALUE(2) = MAX_WVALUE(1)
C
C rotate data
C
C ........................ >>>> 6 <<<< ..........................
C
	OK = ROTATEDAT(
     &	 %VAL(SEC_ADDR(DTIIN_LUN)+DATA_OFFSET(DTIIN_LUN)),  ! input DTI
     &	 %VAL(SEC_ADDR(DTIOUT_LUN)+DATA_OFFSET(DTIOUT_LUN)),! output DTI
     &	 %VAL(SEC_ADDR(DTIIN_LUN)+DATA_OFFSET(DTIIN_LUN)),  ! input DTI
     &	 %VAL(SEC_ADDR(DTIOUT_LUN)+DATA_OFFSET(DTIOUT_LUN)),! output DTI
     &	 %VAL(SEC_ADDR(DTIIN_LUN)+DATA_OFFSET(DTIIN_LUN)),  ! input DTI
     &	 %VAL(SEC_ADDR(DTIOUT_LUN)+DATA_OFFSET(DTIOUT_LUN)),! output DTI
     &	 %VAL(SEC_ADDR(DTIIN_LUN)+DATA_OFFSET(DTIIN_LUN)),  ! input DTI
     &	 %VAL(SEC_ADDR(DTIOUT_LUN)+DATA_OFFSET(DTIOUT_LUN)),! output DTI
     &	 X_EXTENT(1),	! number of columns for input
     &	 Y_EXTENT(1),	! number of rows for input
     &	 X_EXTENT(2),	! number of columns for output
     &	 Y_EXTENT(2))	! number of rows for output
	IF(.NOT.OK) THEN
	   GO_CMD = .FALSE.
	   GOTO 999
	ENDIF
C
C Close input and output DTI files
C
C ........................ >>>> 7 <<<< ..........................
C
C first input files
C
	RET_CODE = DTI_CLOSE( DTIIN_LUN,		!input DTI lun
     &				.FALSE.,		!update header 
     &				.TRUE.,			!clear common
     &				IERR)			!system error
	IF(RET_CODE.NE.DTI__NORMAL) THEN
	   CALL LSL_PUTMSG(RET_CODE)
	   IF(RET_CODE.EQ.DTI__SYSERR) THEN
	      CALL LSL_PUTMSG(IERR)
	   ENDIF
	   GO_CMD = .FALSE.
	   GOTO 999
	ENDIF
	HAD_DTIIN  = .FALSE.
C
C Second output file 
C
	RET_CODE = DTI_CLOSE( DTIOUT_LUN,		!output DTI lun
     &				.TRUE.,			!update header 
     &				.TRUE.,			!clear common
     &				IERR)			!system error
	IF(RET_CODE.NE.DTI__NORMAL) THEN
	   CALL LSL_PUTMSG(RET_CODE)
	   IF(RET_CODE.EQ.DTI__SYSERR) THEN
	      CALL LSL_PUTMSG(IERR)
	   ENDIF
	   GO_CMD = .FALSE.
	   GOTO 999
	ENDIF
	HAD_DTIOUT  = .FALSE.
C
999	CONTINUE
C
	RETURN
	END
C
