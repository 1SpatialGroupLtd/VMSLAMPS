C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-08-06 17:35:26.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION COPY_LONG (FROM,TO,HOW)
C
***	IDENT	06AU92
***	MODULE	COPY_LONG
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C	Author    : D R Catlow
C
C	Routine to copy an array of longword values from the input file;
C	convert into another data format if necessary, and transfer
C	to the output file.
C	The data is dealt with on a column by column basis.
C	For longword to byte conversion the data is made to lie within
C	the range 0-255 (all neg. values are output as 0)
C	For longword to word conversion the data is made to lie within
C	the range -32767 to 32767
C
CMOD	Deal with null values appropriately		MWSR 07-Dec-1988
CMOD899 Extend datatype handling to BIT			  JB 13-Jun-1990
C	
	IMPLICIT NONE
C
C	Arguments:
	INTEGER*4	FROM		!input DTI lun
	INTEGER*4	TO		!output DTI lun
	INTEGER*4	HOW		!conversion procedure
C
C	HOW=0	!no data conversion (straight copy)
C	HOW=1	!longword to byte conversion
C	HOW=2	!longword to word conversion
C	HOW=3	!longword to real conversion
C	HOW=4	!longword to bit  conversion
C
***	PARAMETER/LSL$CMNDTI:DTILIBMSG/
***	PARAMETER/LSL$CMNDTI:DTIPAR/
***	COMMON/LSL$CMNDTI:DTIHDR/
C
C locals
	BYTE		BYTE_BUFFER(DTI_MAX_ROWS)
	INTEGER*2	WORD_BUFFER(DTI_MAX_ROWS)
	INTEGER*4	LONG_BUFFER(DTI_MAX_ROWS)
	REAL		REAL_BUFFER(DTI_MAX_ROWS)
C
	INTEGER*4	TEMP_LONG
	INTEGER*2	TEMP_WORD
	BYTE		TEMP_BYTE
C
	INTEGER*4	X,Y		!counters
	INTEGER*4	RETVAL		!function return code
	INTEGER*4	ERROR		!system error code
C
	EQUIVALENCE	(TEMP_WORD,TEMP_LONG)
	EQUIVALENCE	(TEMP_BYTE,TEMP_LONG)
C
C Functions
	INTEGER*4	DTI_COPY_BIT_DATA	!transfer bit data
	INTEGER*4	DTI_COPY_BYTE_DATA	!transfer byte data
	INTEGER*4	DTI_COPY_WORD_DATA	!transfer word data
	INTEGER*4	DTI_COPY_LONG_DATA	!transfer long data
	INTEGER*4	DTI_COPY_REAL_DATA	!transfer real data
C
C---------------------------------------------------------------------------
C Process DTI columns
C
	DO 500 X = 1,X_EXTENT(FROM)
C
	   RETVAL = DTI_COPY_LONG_DATA(FROM,LONG_BUFFER,.FALSE.,
     &                                 X,1,1,Y_EXTENT(FROM),ERROR)
C
	   IF(RETVAL.NE.DTI__NORMAL)THEN
	      CALL LSL_PUTMSG(RETVAL)
	      IF (RETVAL.EQ.DTI__SYSERR)CALL LSL_PUTMSG(RETVAL)
	      COPY_LONG=.FALSE.		!signal failure
	      GOTO 999
	   ENDIF
C
	   IF	   (HOW.EQ.1)THEN		!longword to byte
		   DO 100 Y = 1,Y_EXTENT(FROM)
		      IF(LONG_BUFFER(Y).EQ.DTI_NULL_LONG)THEN
			 BYTE_BUFFER(Y) = DTI_NULL_BYTE
		      ELSE
	  	         TEMP_LONG=MAX(0,MIN(255,LONG_BUFFER(Y)))
		         BYTE_BUFFER(Y)=TEMP_BYTE
		      ENDIF
100		   CONTINUE
C
	   ELSE IF (HOW.EQ.2)THEN		!longword to word
	           DO 200 Y = 1,Y_EXTENT(FROM)
		      IF(LONG_BUFFER(Y).EQ.DTI_NULL_LONG)THEN
			 WORD_BUFFER(Y) = DTI_NULL_WORD
		      ELSE
		         TEMP_LONG=MAX(-32767,MIN(32767,LONG_BUFFER(Y)))
		         WORD_BUFFER(Y)=TEMP_WORD
		      ENDIF
200 		   CONTINUE
C
	   ELSE IF (HOW.EQ.3)THEN		!longword to real
	           DO 300 Y = 1,Y_EXTENT(FROM)
		      IF(LONG_BUFFER(Y).EQ.DTI_NULL_LONG)THEN
			 REAL_BUFFER(Y) = DTI_NULL_REAL
		      ELSE
		         REAL_BUFFER(Y) = LONG_BUFFER(Y)
		      ENDIF
300	  	   CONTINUE
C
	   ELSE IF (HOW.EQ.4)THEN		!longword to bit
	           DO 400 Y = 1,Y_EXTENT(FROM)
		      IF (LONG_BUFFER(Y).EQ.DTI_NULL_LONG)THEN
			 CALL LIB$INSV(0,Y-1,1,BYTE_BUFFER)
		      ELSEIF (LONG_BUFFER(Y).EQ.0)THEN
			 CALL LIB$INSV(0,Y-1,1,BYTE_BUFFER)
		      ELSE		! > 0 or < 0
			 CALL LIB$INSV(1,Y-1,1,BYTE_BUFFER)
		      ENDIF
400	  	   CONTINUE
C
C Fill remainder of buffer with 0
C
		   IF (Y_EXTENT(FROM).NE.Y_EXTENT(TO)) THEN
	              DO 401 Y = Y_EXTENT(FROM)+1,Y_EXTENT(TO)
			 CALL LIB$INSV(0,Y-1,1,BYTE_BUFFER)
401	  	      CONTINUE
		   ENDIF
C
	   ENDIF
C	     
C------------------------------------------------------------------------
C Output the converted data values to the output file
C
	   IF      (HOW.EQ.0)THEN	
	       RETVAL = DTI_COPY_LONG_DATA(TO,LONG_BUFFER,.TRUE.,
     &                                 X,1,1,Y_EXTENT(FROM),ERROR)
	       IF(RETVAL.NE.DTI__NORMAL)THEN
	          CALL LSL_PUTMSG(RETVAL)
	          IF(RETVAL.EQ.DTI__SYSERR)CALL LSL_PUTMSG(RETVAL)
	          COPY_LONG=.FALSE.		!signal failure
	          GOTO 999
	       ENDIF
C
	   ELSE IF (HOW.EQ.1)THEN
	       RETVAL = DTI_COPY_BYTE_DATA(TO,BYTE_BUFFER,.TRUE.,
     &                                 X,1,1,Y_EXTENT(FROM),ERROR)
	       IF(RETVAL.NE.DTI__NORMAL)THEN
	          CALL LSL_PUTMSG(RETVAL)
	          IF(RETVAL.EQ.DTI__SYSERR)CALL LSL_PUTMSG(RETVAL)
	          COPY_LONG=.FALSE.		!signal failure
	          GOTO 999
	       ENDIF
C
	   ELSE IF (HOW.EQ.2)THEN
	       RETVAL = DTI_COPY_WORD_DATA(TO,WORD_BUFFER,.TRUE.,
     &                                 X,1,1,Y_EXTENT(FROM),ERROR)
	       IF(RETVAL.NE.DTI__NORMAL)THEN
	          CALL LSL_PUTMSG(RETVAL)
	          IF(RETVAL.EQ.DTI__SYSERR)CALL LSL_PUTMSG(RETVAL)
	          COPY_LONG=.FALSE.		!signal failure
	          GOTO 999
	       ENDIF
C
	   ELSE IF (HOW.EQ.3)THEN
	       RETVAL = DTI_COPY_REAL_DATA(TO,REAL_BUFFER,.TRUE.,
     &                                 X,1,1,Y_EXTENT(FROM),ERROR)
	       IF(RETVAL.NE.DTI__NORMAL)THEN
	          CALL LSL_PUTMSG(RETVAL)
	          IF(RETVAL.EQ.DTI__SYSERR)CALL LSL_PUTMSG(RETVAL)
	          COPY_LONG=.FALSE.		!signal failure
	          GOTO 999
	       ENDIF
C
	   ELSE IF (HOW.EQ.4)THEN
C
C Output y size may be different to input
C
	       RETVAL = DTI_COPY_BIT_DATA(TO,BYTE_BUFFER,.TRUE.,
     &                                 X,1,1,Y_EXTENT(TO),ERROR)
	       IF(RETVAL.NE.DTI__NORMAL)THEN
	          CALL LSL_PUTMSG(RETVAL)
	          IF(RETVAL.EQ.DTI__SYSERR)CALL LSL_PUTMSG(RETVAL)
	          COPY_LONG=.FALSE.		!signal failure
	          GOTO 999
	       ENDIF
	   ENDIF
C
500	CONTINUE		!do the next column of data
C
C----------------------------------------------------------------------------
C
	COPY_LONG=.TRUE.	!signal success
C
999	RETURN
	END
C
