C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-07-27 12:04:24.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION GO_CMD()
C
***	MODULE GO_CMD
***	IDENT  27JL92
C
C	Copyright (C) Laser-Scan Ltd., Cambridge, England
C
CMOD1129 Fix calculation of windowing for multiple 
C	 input DTI files				  JB 23-Jul-1992
CMOD 	 Call DTI_PRINT_HEADER for output file		MWSR 09-Dec-1988
CMOD 	 Don't calculate minimum origin here		MWSR 08-Dec-1988
CMOD 	 Add size diagnostic messages			MWSR 23-Nov-1988
CMOD 	 Call MODHEAD if we have a projection record	MWSR 16-Nov-1988
CMOD 	 Ensure that all origin values are positive	MWSR 16-Nov-1988
C
C Created by						 ALB 04-Feb-1988
C
C This function does the processing.  The following tasks are performed:-
C
C 1) Test that at least one input DTI file is present and output file
C    has been specified.
C
C 2) Check that if SIZE of output DTI file has been specified the origins
C    lie within output DTI limits.
C
C 3) Work out the size of the output DTI file using input DTI windows and
C    origins.
C
C 4) If calculated size is bigger than any user supplied SIZE then reset user
C    supplied SIZE with warning message to output.
C
C 5) Open output DTI file. 
C
C 6) Transfer some of the header info from first input DTI to output DTI
C
C 7) Initialise output data area.
C
C 8) Map each input to output starting with DTI input file 1.
C
C 9) Void output data areas.
C
C 10) Calculate min and max value for output grid.
C
C 11) If DTED header type then modify DSI or UHL area
C
C 12) Close input and output DTI files
C
C Function returns .TRUE. if all is well.
C
	IMPLICIT NONE
C
C Parameters :
	INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'  	! LSL messages
	INCLUDE 'LSL$CMNDTI:DTILIBMSG.PAR'  	! DTI messages
	INCLUDE 'LSL$CMNDTI:DTIPAR.PAR'  	! DTI parameters
	INCLUDE 'LSL$CMNDTI:DTIDEF.PAR'  	! DTI parameters
C
C Common block :
	INCLUDE	'LSL$CMNDTI:DTIHDR.CMN'		!DTILIB common
	INCLUDE	'LSL$CMNDTI:DTIPROJ.CMN'	!DTILIB common
	INCLUDE	'LSL$CMNLSL:CMDCOM.CMN'		!LSLLIB common
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'
	INCLUDE	'LSL$CMNDTITILE:CONTROL.CMN'
C
C w/s
	LOGICAL		OK		! return code
	INTEGER*4	RET_CODE	! return code
	INTEGER*4	IERR		! error code
	INTEGER		I		! loop counter
	INTEGER*4	XSIZE		! x extent of output DTI
	INTEGER*4	YSIZE		! y extent of output DTI
C
	INTEGER*4	X1		! xmin of void
	INTEGER*4	X2		! xmax of void
	INTEGER*4	Y1		! ymin of void
	INTEGER*4	Y2		! ymax of void
C
C Functions :
	INTEGER*4	DTI_CREATE	! create a DTI file
	INTEGER*4	DTI_COPY_HEADER	! initialise output area
	INTEGER*4	DTI_INIT_DATA	! initialise output area
	INTEGER*4	DTI_MINMAX_DATA	! calculate min and max info.
	INTEGER*4	DTI_CLOSE	! close DTI files
	LOGICAL		COPYDAT		! copy DTI function
	LOGICAL		GETVOID		! get void window in matrix units
	LOGICAL		MODHEAD		! mod DSI or UHL part of DTED header
C
C ......................................................................
C
	GO_CMD = .TRUE.			! assume success
C
C test whether at least one DTI file has been opened
C
C ........................ >>>> 1 <<<< ..........................
C
	IF (NUM_DTIIN.EQ.0) THEN		! no file opened?
	   CALL WRITEF(
     &	        '%S FILEIN command must be used to '//
     &		'open an input DTI file',ERROR)
	   GO_CMD=.FALSE.		! command failed
	ENDIF
	IF(.NOT.DTIFSPEC(DTIOUT_LUN)) THEN
	   CALL WRITEF(
     &	        '%S FILEOUT command must be used to '//
     &		'specify the output DTI file. ',ERROR)
	   GO_CMD=.FALSE.		! command failed
	ENDIF
C
C FILEIN and/or FILEOUT commands not invoked
C
	IF (.NOT.GO_CMD) GOTO 999   
C
C MIN_X/Y_ORIGIN = most south & west origin of all input files wrt the 
C origin of the first file opened as (0,0), set up in OPNDTI 
C
C Ensure all origin values are positive, ie. convert origins to be wrt to 
C this MIN_X/Y_ORIGIN, and change to matrix units. This X/Y_ORIGIN is now
C the position of a file's origin in the output space which has origin 
C (1,1) at what was once MIN_X/Y_ORIGIN.
C
	DO 15 I = 1,NUM_DTIIN
	   X_ORIGIN(I) = X_ORIGIN(I) + ABS(MIN_X_ORIGIN) + 1
	   Y_ORIGIN(I) = Y_ORIGIN(I) + ABS(MIN_Y_ORIGIN) + 1
15	CONTINUE
C
C Check that if SIZE of output DTI file has been specified the origins
C lie within output DTI limits.
C
C ........................ >>>> 2 <<<< ..........................
C
	IF (HAD_SIZE) THEN
	   DO 20 I = 1,NUM_DTIIN
	      IF (X_ORIGIN(I).GT.NCOL .OR. Y_ORIGIN(I).GT.NROW) THEN
	         CALL WRITEF
     &			('%S, Origin values supplied for file %N '//
     &			'exceed output file limits ',WARNING,I)
		 CALL WRITEF
     &			('Input file %S will not be processed ',
     &			DTIFILE(I)(:DTILEN(I)))
		 PROCESS_FILE(I) = .FALSE.
	      ELSE
	         PROCESS_FILE(I) = .TRUE.
	      ENDIF
20	   CONTINUE
	ELSE			! assume that file will be processed
	   DO 25 I = 1,NUM_DTIIN
	      PROCESS_FILE(I) = .TRUE.
25	   CONTINUE
	ENDIF
C
C    Work out the size of the output DTI file using input DTI windows and
C    origins.
C
C ........................ >>>> 3 <<<< ..........................
C
C Get max/min output extents in output space
C
	OUT_XMIN = DTI_WINDOW_SWX(1) + X_ORIGIN(1) - 1
	OUT_YMIN = DTI_WINDOW_SWY(1) + Y_ORIGIN(1) - 1
	OUT_XMAX = DTI_WINDOW_NEX(1) + X_ORIGIN(1) - 1
	OUT_YMAX = DTI_WINDOW_NEY(1) + Y_ORIGIN(1) - 1
C
	DO 30 I = 2,NUM_DTIIN
	   IF (PROCESS_FILE(I)) THEN
	      OUT_XMIN = MIN( OUT_XMIN,
     &				DTI_WINDOW_SWX(I)+X_ORIGIN(I)-1)
	      OUT_YMIN = MIN( OUT_YMIN,
     &				DTI_WINDOW_SWY(I)+Y_ORIGIN(I)-1)
	      OUT_XMAX = MAX(OUT_XMAX,
     &				DTI_WINDOW_NEX(I)+X_ORIGIN(I)-1)
	      OUT_YMAX = MAX( OUT_YMAX,
     &				DTI_WINDOW_NEY(I)+Y_ORIGIN(I)-1)
	   ENDIF
30	CONTINUE
C
	XSIZE = OUT_XMAX - OUT_XMIN + 1
	YSIZE = OUT_YMAX - OUT_YMIN + 1
C
C    If calculated size is bigger than any user supplied SIZE then reset user
C    supplied SIZE with warning message to output.
C
C ........................ >>>> 4 <<<< ..........................
C
	IF (HAD_SIZE) THEN
	   IF (XSIZE.GT.NCOL .OR. YSIZE.GT.NROW) THEN
	      CALL WRITEF
     &        ('%S The supplied columns and/or rows via SIZE '//
     &         'command is too small',WARNING)
	      CALL WRITEF
     &        ('The output DTI file will be created with the '//
     &	      'calculated column and row values.')
	      NCOL = XSIZE
	      NROW = YSIZE
	   ENDIF
	ELSE
	   NCOL = XSIZE
	   NROW = YSIZE
	ENDIF
C
C output some diagnostics
	IF (HAD_DIAG) THEN
	   CALL WRITEF
	   CALL WRITEF('Number of columns in output file ......... %I',
     &		NCOL)
	   CALL WRITEF('Number of rows in output file    ......... %I',
     &		NROW)
	ENDIF
C
C    Open output DTI file. 
C
C ........................ >>>> 5 <<<< ..........................
C
	RET_CODE = DTI_CREATE ( DTIOUT_LUN,		!output DTI lun
     &				DTIFILE(DTIOUT_LUN),	!output file spec
     &				DTILEN(DTIOUT_LUN),	!len of file name
     &				HEADER_TYPE(1),		!input DTI 1 header type
     &				DATA_OFFSET(1),		!header size if LSLA
     &				DATA_TYPE(1),		!data type
     &				NCOL,			!x extent
     &				NROW,			!y extent
     &				IERR)			!system error
	IF (RET_CODE.NE.DTI__NORMAL) THEN
	   CALL LSL_PUTMSG(RET_CODE)
	   IF (RET_CODE.EQ.DTI__SYSERR) CALL LSL_ADDMSG(IERR)
	   GO_CMD = .FALSE.
	   GOTO 999
	ENDIF
C
C    Transfer some of the header info from first input DTI to output DTI
C    
C ........................ >>>> 6 <<<< ..........................
C
C copy header from first input file
C
	IF (HEADER_TYPE(1).NE.DTI_MIKE) THEN
	  RET_CODE = DTI_COPY_HEADER( 1,		!input DTI lun
     &				    DTIOUT_LUN,		!output DTI file
     &				    IERR)		!system error
	  IF(RET_CODE.NE.DTI__NORMAL) THEN
	     CALL LSL_PUTMSG(RET_CODE)
	     IF (RET_CODE.EQ.DTI__SYSERR) CALL LSL_ADDMSG(IERR)
	     GO_CMD = .FALSE.
	     GOTO 999
	  ENDIF
	ENDIF
C
C x and y grid interval, offset
C
	X_GRID(DTIOUT_LUN) = X_GRID(1)
	Y_GRID(DTIOUT_LUN) = Y_GRID(1)
C
	GEOGRAPHICALS(DTIOUT_LUN) = GEOGRAPHICALS(1) 
C
C 11) If DTED header type or there is a projection record then modify 
C DSI or UHL area or projection record
C
C ........................ >>>> 7 <<<< ..........................
C
	IF (HEADER_TYPE(DTIOUT_LUN).EQ.DTI_TED4 .OR. 
     &	    HEADER_TYPE(DTIOUT_LUN).EQ.DTI_UHL1 .OR.
     &	    HAD_PROJ_RECORD(DTIOUT_LUN)) THEN
	   OK = MODHEAD()
	   IF (.NOT.OK) THEN
	      GO_CMD = .FALSE.
	      GOTO 999
	   ENDIF
	ENDIF
C
C    Initialise output data area.
C
C ........................ >>>> 8 <<<< ..........................
C
	IF (DATA_TYPE(DTIOUT_LUN).EQ.DATA_BYTE) THEN 	! for byte 
	   RET_CODE = DTI_INIT_DATA(DTIOUT_LUN,		!output DTI lun
     &				NULL_BYTE_VAL,		!initialisation value
     &				1,			!start column
     &				1,			!start row
     &				NCOL,			!x extent
     &				NROW,			!y extent
     &				IERR)			!system error
C
	ELSEIF(DATA_TYPE(DTIOUT_LUN).EQ.DATA_WORD) THEN ! for word 
	   RET_CODE = DTI_INIT_DATA(DTIOUT_LUN,		!output DIT lun
     &				NULL_WORD_VAL,		!initialisation value
     &				1,			!start column
     &				1,			!start row
     &				NCOL,			!x extent
     &				NROW,			!y extent
     &				IERR)			!system error
C
	ELSEIF(DATA_TYPE(DTIOUT_LUN).EQ.DATA_LONG) THEN ! for long 
	   RET_CODE = DTI_INIT_DATA(DTIOUT_LUN,		!output DIT lun
     &				NULL_LONG_VAL,		!initialisation value
     &				1,			!start column
     &				1,			!start row
     &				NCOL,			!x extent
     &				NROW,			!y extent
     &				IERR)			!system error
C
	ELSEIF(DATA_TYPE(DTIOUT_LUN).EQ.DATA_REAL) THEN ! for real 
	   RET_CODE = DTI_INIT_DATA(DTIOUT_LUN,		!output DIT lun
     &				NULL_REAL_VAL,		!initialisation value
     &				1,			!start column
     &				1,			!start row
     &				NCOL,			!x extent
     &				NROW,			!y extent
     &				IERR)			!system error
	ENDIF
	IF(RET_CODE.NE.DTI__NORMAL) THEN
	   CALL LSL_PUTMSG(RET_CODE)
	   IF(RET_CODE.EQ.DTI__SYSERR) CALL LSL_ADDMSG(IERR)
	   GO_CMD = .FALSE.
	   GOTO 999
	ENDIF
C	   
C Map each input to output starting with DTI input file 1.
C
C ........................ >>>> 9 <<<< ..........................
C
	DO 80 I = 1,NUM_DTIIN
	   IF (PROCESS_FILE(I)) THEN
C
C copy DTI function
C
	      OK = COPYDAT(I)
	      IF (.NOT.OK) THEN
	         GO_CMD = .FALSE.
	         GOTO 999
	      ENDIF
	   ENDIF
80	CONTINUE
C
C void output data areas.
C
C ........................ >>>> 10 <<<< ..........................
C
	DO 100 I = 1,NUM_VOID
	   IF (VOID_SET(I)) THEN
	      OK = GETVOID(I,X1,Y1,X2,Y2)
C
C Do the values need truncating?
C
	      IF (X1.GT.X_EXTENT(DTIOUT_LUN) .OR. X1.LT.1 .OR.
     &		  X2.GT.X_EXTENT(DTIOUT_LUN) .OR. X2.LT.1 .OR.
     &		  Y1.GT.Y_EXTENT(DTIOUT_LUN) .OR. Y1.LT.1 .OR.
     &		  Y2.GT.Y_EXTENT(DTIOUT_LUN) .OR. Y2.LT.1) THEN
	         CALL WRITEF
     &		   ('%S Specified void window %I exceeds matrix limits',
     &		     WARNING,I)
	         CALL WRITEF('Void window will be truncated to fit')
	         X1=MAX(1,MIN(X1,X_EXTENT(DTIOUT_LUN)))
	         X2=MAX(1,MIN(X2,X_EXTENT(DTIOUT_LUN)))
	         Y1=MAX(1,MIN(Y1,Y_EXTENT(DTIOUT_LUN)))
	         Y2=MAX(1,MIN(Y2,Y_EXTENT(DTIOUT_LUN)))
	      ENDIF
C
	      IF(DATA_TYPE(DTIOUT_LUN).EQ.DATA_BYTE) THEN ! for byte 
	         RET_CODE = DTI_INIT_DATA(DTIOUT_LUN,	!output DIT lun
     &				NULL_BYTE_VAL,		!initialisation value
     &				X1,			!start column
     &				Y1,			!start row
     &				X2 - X1 + 1,		!x extent
     &				Y2 - Y1 + 1,		!y extent
     &				IERR)			!system error
C
	      ELSEIF(DATA_TYPE(DTIOUT_LUN).EQ.DATA_WORD) THEN ! for word 
	         RET_CODE = DTI_INIT_DATA(DTIOUT_LUN,	!output DIT lun
     &				NULL_WORD_VAL,		!initialisation value
     &				X1,			!start column
     &				Y1,			!start row
     &				X2 - X1 + 1,		!x extent
     &				Y2 - Y1 + 1,		!y extent
     &				IERR)			!system error
C
	      ELSEIF(DATA_TYPE(DTIOUT_LUN).EQ.DATA_LONG) THEN ! for long 
	         RET_CODE = DTI_INIT_DATA(DTIOUT_LUN,	!output DIT lun
     &				NULL_LONG_VAL,		!initialisation value
     &				X1,			!start column
     &				Y1,			!start row
     &				X2 - X1 + 1,		!x extent
     &				Y2 - Y1 + 1,		!y extent
     &				IERR)			!system error
C
	      ELSEIF(DATA_TYPE(DTIOUT_LUN).EQ.DATA_REAL) THEN ! for real 
	         RET_CODE = DTI_INIT_DATA(DTIOUT_LUN,	!output DIT lun
     &				NULL_REAL_VAL,		!initialisation value
     &				X1,			!start column
     &				Y1,			!start row
     &				X2 - X1 + 1,		!x extent
     &				Y2 - Y1 + 1,		!y extent
     &				IERR)			!system error
	      ENDIF
	      IF (RET_CODE.NE.DTI__NORMAL) THEN
	         CALL LSL_PUTMSG(RET_CODE)
	         IF (RET_CODE.EQ.DTI__SYSERR) CALL LSL_PUTMSG(IERR)
	         GO_CMD = .FALSE.
	         GOTO 999
	      ENDIF
	   ENDIF
100	CONTINUE
C
C Calculate min and max value for output grid.
C
C ........................ >>>> 11 <<<< ..........................
C
	RET_CODE = DTI_MINMAX_DATA( DTIOUT_LUN,		!output DTI lun
     &				.TRUE.,			!update mapped file
     &				IERR)			!system error
C
	IF(RET_CODE.NE.DTI__NORMAL) THEN
	   CALL LSL_PUTMSG(RET_CODE)
	   IF (RET_CODE.EQ.DTI__SYSERR) CALL LSL_PUTMSG(IERR)
	   GO_CMD = .FALSE.
	   GOTO 999
	ENDIF
C
C 12) Close input and output DTI files
C
C ........................ >>>> 12 <<<< ..........................
C first input files
C
	DO 200 I = 1,NUM_DTIIN
	   RET_CODE = DTI_CLOSE( I,			!input DTI lun
     &				.FALSE.,		!update header 
     &				.TRUE.,			!clear common
     &				 IERR)			!system error
	   IF(RET_CODE.NE.DTI__NORMAL) THEN
	      CALL LSL_PUTMSG(RET_CODE)
	      IF (RET_CODE.EQ.DTI__SYSERR) CALL LSL_PUTMSG(IERR)
	      GO_CMD = .FALSE.
	      GOTO 999
	   ENDIF
C
	   DTIFSPEC(I) = .FALSE.
	   WIN_SET(I)  = .FALSE.
	   X_ORIGIN(I) = 1
	   Y_ORIGIN(I) = 1
200	CONTINUE
C
C set flag to say that all files closed
C
	NUM_DTIIN = 0
C
C output information about output file
	CALL DTI_PRINT_HEADER(DTIOUT_LUN,UNITS,HAD_ABSOLUTE)
C
C Second output file 
C
	RET_CODE = DTI_CLOSE(DTIOUT_LUN,		!output DTI lun
     &				.TRUE.,			!update header 
     &				.TRUE.,			!clear common
     &				IERR)			!system error
	IF (RET_CODE.NE.DTI__NORMAL) THEN
	   CALL LSL_PUTMSG(RET_CODE)
	   IF (RET_CODE.EQ.DTI__SYSERR) CALL LSL_ADDMSG(IERR)
	   GO_CMD = .FALSE.
	   GOTO 999
	ENDIF
C
	HAD_SIZE 	     = .FALSE.
	DTIFSPEC(DTIOUT_LUN) = .FALSE.
C
999	CONTINUE
C
	RETURN
	END
C
