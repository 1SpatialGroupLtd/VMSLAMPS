	LOGICAL FUNCTION WINDOW_CMD()
C
***	MODULE	WINDOW_CMD
***	IDENT	24JL92
C
C	Copyright : Laser-Scan, Cambridge, England
C
CMOD	WINDOW values outside DTI are now truncated to 
C	DTI limits as documented in Reference Manual 	TJH 15-Oct-1991
CMOD	Allow window to be specified in proj units     MWSR 23-Nov-1988 
CMOD	Add check for supplied values outside range    MWSR 21-Nov-1988
CMOD    Allow absolute metre coordinates to be input   MWSR 21-Nov-1988
C 	Modified from WINDOW_CMD in DTI2TEXT		ALB 04-Feb-1988
C
C	Function to set the area of interest in the input DTM.
C	The routine interpretes the command line according to the
C	current UNITS setting.
C	The function checks that the window values are sensible,
C	and truncates if they fall outside the DTM bounds.
C
C	Function returns .TRUE. if successful.
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'	
	INCLUDE 'LSL$CMNDTI:DTIDEF.PAR'		! DTILIB common
C	
C Common:
	INCLUDE 'LSL$CMNDTI:DTIHDR.CMN'		! DTILIB common
	INCLUDE 'LSL$CMNDTI:DTIPROJ.CMN'	! DTILIB common
	INCLUDE 'LSL$CMNLSL:CMDCOM.CMN'		! LSLLIB common
	INCLUDE	'LSL$CMNDTITILE:CONTROL.CMN'
C
C W/s
	INTEGER*4	X1,Y1,X2,Y2	! window values in matrix units
	INTEGER*4	LLDEGS(4)	! window values in seconds
	REAL*8		DLATINT,DLONINT
	REAL*8		D_MOD
C
C Function
	LOGICAL		READLL		! reads lat/long
C
C ......................................................................
C
	WINDOW_CMD=.TRUE.		! assume success
C
	IF (NUM_DTIIN.EQ.0) THEN		! no file opened?
	   CALL WRITEF(
     &	        '%S FILEIN command must be used to '//
     &			'open the DTI file first',ERROR)
	   WINDOW_CMD =.FALSE.
	   GOTO 999
	ENDIF
C
	IF (CMDRCT.NE.4.AND.UNITS.NE.4) THEN
	   CALL WRITEF('%S Specifying DTI window arguments',ERROR)
	   CALL WRITEF
     &	  ('Command requires 2 x,y coordinate pairs (SW and NE)')
	   WINDOW_CMD =.FALSE.
	   GOTO 999
	ENDIF
C
	GOTO (10,20,30,40,45) UNITS
C
C----------------------------------------------------------------------
C	Matrix units
C
10	CONTINUE
	X1=NINT(REALAR(1))
	Y1=NINT(REALAR(2))
	X2=NINT(REALAR(3))
	Y2=NINT(REALAR(4))
	GOTO 50
C
C----------------------------------------------------------------------
C	Metres
C
20	CONTINUE
	IF (HAD_ABSOLUTE) THEN 
	   X1=NINT((REALAR(1)-X_OFFSET(NUM_DTIIN))/X_GRID(NUM_DTIIN))+1
	   Y1=NINT((REALAR(2)-Y_OFFSET(NUM_DTIIN))/Y_GRID(NUM_DTIIN))+1
	   X2=NINT((REALAR(3)-X_OFFSET(NUM_DTIIN))/X_GRID(NUM_DTIIN))+1
	   Y2=NINT((REALAR(4)-Y_OFFSET(NUM_DTIIN))/Y_GRID(NUM_DTIIN))+1
	ELSE
	   X1=NINT(REALAR(1)/X_GRID(NUM_DTIIN))+1
	   Y1=NINT(REALAR(2)/Y_GRID(NUM_DTIIN))+1
	   X2=NINT(REALAR(3)/X_GRID(NUM_DTIIN))+1
	   Y2=NINT(REALAR(4)/Y_GRID(NUM_DTIIN))+1
	ENDIF
	GOTO 50
C
C-----------------------------------------------------------------------
C	Seconds
C
30	CONTINUE
C
	D_MOD = 360.0*3600*10
	DLATINT = DBLE(LATREC(3,NUM_DTIIN)-LATORI(NUM_DTIIN)) /
     &					DBLE(Y_EXTENT(NUM_DTIIN)-1)
	DLATINT = DMOD(DLATINT,D_MOD)
	DLONINT = DBLE(LONREC(3,NUM_DTIIN)-LONORI(NUM_DTIIN)) /
     &					DBLE(X_EXTENT(NUM_DTIIN)-1)
	DLONINT = DMOD(DLONINT,D_MOD)
C
	Y1=NINT(REALAR(1)*10)
	X1=NINT(REALAR(2)*10)
	Y2=NINT(REALAR(3)*10)
	X2=NINT(REALAR(4)*10)
C
	X1=(X1-LONREC(1,NUM_DTIIN))/DLONINT + 1
	Y1=(Y1-LATREC(1,NUM_DTIIN))/DLATINT + 1
	X2=(X2-LONREC(1,NUM_DTIIN))/DLONINT + 1
	Y2=(Y2-LATREC(1,NUM_DTIIN))/DLATINT + 1
C
	GOTO 50
C
C-----------------------------------------------------------------------
C	Degrees, Minutes & Seconds
C	Call READLL to convert to .1 seconds
C
40	CONTINUE
C
	D_MOD = 360.0*3600*10
	DLATINT = DBLE(LATREC(3,NUM_DTIIN)-LATORI(NUM_DTIIN)) /
     &					DBLE(Y_EXTENT(NUM_DTIIN)-1)
	DLATINT = DMOD(DLATINT,D_MOD)
	DLONINT = DBLE(LONREC(3,NUM_DTIIN)-LONORI(NUM_DTIIN)) /
     &					DBLE(X_EXTENT(NUM_DTIIN)-1)
	DLONINT = DMOD(DLONINT,D_MOD)
C
	IF (READLL(LLDEGS,4)) THEN
	   CALL WRITEF('%S Specifying DTI window',ERROR)
	   CALL WRITEF('Unable to use supplied LATLONG values')
	   WINDOW_CMD =.FALSE.
	   GOTO 999
	ELSE
	   Y1=LLDEGS(1)*10
	   X1=LLDEGS(2)*10
	   Y2=LLDEGS(3)*10
	   X2=LLDEGS(4)*10
C
	   X1=(X1-LONREC(1,NUM_DTIIN))/DLONINT + 1
	   Y1=(Y1-LATREC(1,NUM_DTIIN))/DLATINT + 1
	   X2=(X2-LONREC(1,NUM_DTIIN))/DLONINT + 1
	   Y2=(Y2-LATREC(1,NUM_DTIIN))/DLATINT + 1
	ENDIF
C
	GOTO 50
C
C----------------------------------------------------------------------
C	Projection units
C
45	CONTINUE
	IF (HAD_ABSOLUTE) THEN 
	   X1=NINT((REALAR(1)-DTIPROJ_ORIGIN(1,NUM_DTIIN))
     &             /DTIPROJ_SAMPLE(1,NUM_DTIIN))+1
	   Y1=NINT((REALAR(2)-DTIPROJ_ORIGIN(2,NUM_DTIIN))
     &             /DTIPROJ_SAMPLE(2,NUM_DTIIN))+1
	   X2=NINT((REALAR(3)-DTIPROJ_ORIGIN(1,NUM_DTIIN))
     &             /DTIPROJ_SAMPLE(1,NUM_DTIIN))+1
	   Y2=NINT((REALAR(4)-DTIPROJ_ORIGIN(2,NUM_DTIIN))
     &             /DTIPROJ_SAMPLE(2,NUM_DTIIN))+1
	ELSE
	   X1=NINT(REALAR(1)/DTIPROJ_SAMPLE(1,NUM_DTIIN))+1
	   Y1=NINT(REALAR(2)/DTIPROJ_SAMPLE(2,NUM_DTIIN))+1
	   X2=NINT(REALAR(3)/DTIPROJ_SAMPLE(1,NUM_DTIIN))+1
	   Y2=NINT(REALAR(4)/DTIPROJ_SAMPLE(2,NUM_DTIIN))+1
	ENDIF
	GOTO 50
C----------------------------------------------------------------------
C	Are the window values sensible?
C
C	Check that window coordinates are within the DTM, if not truncate
C
50	CONTINUE
	IF (X1.GT.X_EXTENT(NUM_DTIIN).OR.X1.LT.1.OR.
     &	   X2.GT.X_EXTENT(NUM_DTIIN).OR.X2.LT.1.OR.
     &	   Y1.GT.Y_EXTENT(NUM_DTIIN).OR.Y1.LT.1.OR.
     &	   Y2.GT.Y_EXTENT(NUM_DTIIN).OR.Y2.LT.1) THEN
	   CALL WRITEF
     &	   ('%S Specified window exceeds matrix limits',WARNING)
	   CALL WRITEF
     &	   ('Window will be truncated to fit')
	   X1=MAX(1,MIN(X1,X_EXTENT(NUM_DTIIN)))
	   X2=MAX(1,MIN(X2,X_EXTENT(NUM_DTIIN)))
	   Y1=MAX(1,MIN(Y1,Y_EXTENT(NUM_DTIIN)))
	   Y2=MAX(1,MIN(Y2,Y_EXTENT(NUM_DTIIN)))
	ENDIF

C	Does the NE coordinate exceed the SW coordinate
C
	IF (X2.LE.X1.OR.Y2.LE.Y1) THEN
	   CALL WRITEF('%S Specifying DTI window',ERROR)
	   CALL WRITEF
     &    ('NE coordinates should exceed SW coordinates')
	   WINDOW_CMD =.FALSE.
	   GOTO 999
	ENDIF
C
C	Transfer to the DTI common block variables
	DTI_WINDOW_SWX(NUM_DTIIN) = X1
	DTI_WINDOW_SWY(NUM_DTIIN) = Y1
	DTI_WINDOW_NEX(NUM_DTIIN) = X2	
	DTI_WINDOW_NEY(NUM_DTIIN) = Y2
C
C Set flag to say that the user has defined a window
	WIN_SET(NUM_DTIIN)=.TRUE.
C
C----------------------------------------------------------------------
C
999	CONTINUE
	RETURN
	END
C
