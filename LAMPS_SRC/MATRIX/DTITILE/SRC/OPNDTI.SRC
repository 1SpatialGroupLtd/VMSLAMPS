C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-07-24 18:20:48.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION OPNDTI()
C
***	MODULE	OPNDTI
***	IDENT	24JL92
C
C Copyright Laser-Scan Limited, Cambridge, England.
C
CMOD1066 Use real LAT/LONINT to avoid rounding errors  	  JB 27-Nov-1991
CMOD 	 Update minimum origin info			MWSR 08-Dec-1988 
CMOD 	 Warnings for different headers and units
C   	 Only calculate default origin if absolute
C  	 Use DTILIB  default null values		MWSR 05-Dec-1988
CMOD	 Use new DTI_UNITS function			MWSR 23-Nov-1988
CMOD	 Add absolute argument to DTI_PRINT_HEADER	MWSR 21-Nov-1988
CMOD 	 Add report argument to DTI_OPEN		MWSR 16-Nov-1988
CMOD	 Use projection record				MWSR 15-Nov-1988	
C
C Created from DTI2TEXT OPNDTI function			 ALB 04-Feb-1988
C
C Opens the DTI file, and sets everything up ready for us to read
C the data.
C
C The function value is .TRUE. if we succeed.
C
	IMPLICIT NONE
C
C Parameters :
	INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'
	INCLUDE 'LSL$CMNDTI:DTIPAR.PAR'
C
C Common :
	INCLUDE 'LSL$CMNDTITILE:CONTROL.CMN'
	INCLUDE 'LSL$CMNDTI:DTIHDR.CMN'
	INCLUDE 'LSL$CMNDTI:DTIPROJ.CMN'
	INCLUDE 'LSL$CMNLSL:CMDCOM.CMN'
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'
C
C W/s :
	LOGICAL	   IERR			! error returns
	LOGICAL	   OK			! error returns
	REAL	   LLDEGS(2)		! 2 lat. long. values
	REAL*8	   DLATINT,DLONINT
	REAL	   APPROX_ZERO
	PARAMETER (APPROX_ZERO = 0.0001)
C
C Functions :
	LOGICAL	  DTI_OPEN		! open/read header of DTI file
	LOGICAL	  DTI_PRINT_HEADER	! print DTI header
	LOGICAL	  FLRSTR		! read record from file
	LOGICAL	  RDREAL		! reads real numbers
	LOGICAL	  TTRSTR		! tt: read string
	INTEGER   DTI_UNITS		! set up default units
C
C ......................................................................
C
	OPNDTI=.TRUE.			! assume success
C
C increment the number of opened files counter
C
	NUM_DTIIN = NUM_DTIIN + 1
C
C Try to open file.
	OK = DTI_OPEN(NUM_DTIIN, DTIFILE(NUM_DTIIN),
     &		DTILEN(NUM_DTIIN),.FALSE.,IERR,.TRUE.)
	IF (.NOT.OK) THEN
	   CALL WRITEF('%S Specifying command FILEIN',ERROR)
	   CALL WRITEF('Failed while opening DTI file %S for input',
     &		DTIFILE(NUM_DTIIN)(:DTILEN(NUM_DTIIN)))
	   CALL LSL_PUTMSG(OK)
	   CALL LSL_ADDMSG(IERR)
C
	   NUM_DTIIN = NUM_DTIIN - 1
	   OPNDTI = .FALSE.
	   GOTO 999
	ENDIF
C
C Set default UNITS to suit file type
C
	UNITS = 0
	OK = DTI_UNITS(NUM_DTIIN,UNITS)
	IF (.NOT.OK) THEN
	   CALL LSL_PUTMSG(OK)
	   GOTO 999
	ENDIF
C
	GEOGRAPHICALS(NUM_DTIIN) = .FALSE.
C
C is it a geographical file?
	IF (HAD_PROJ_RECORD(NUM_DTIIN)) THEN
	   IF ((DTIPROJ_UNITS(NUM_DTIIN).EQ.110) .OR.		!tenths 
     &         (DTIPROJ_UNITS(NUM_DTIIN).EQ.5)   .OR.		!radians
     &         (DTIPROJ_UNITS(NUM_DTIIN).EQ.3)   .OR.		!seconds
     &         (DTIPROJ_UNITS(NUM_DTIIN).EQ.4)) THEN		!degrees
	      GEOGRAPHICALS(NUM_DTIIN) = .TRUE.
	   ENDIF
	ELSE IF(HEADER_TYPE(NUM_DTIIN).EQ.DTI_TED4 .OR.
     &          HEADER_TYPE(NUM_DTIIN).EQ.DTI_UHL1) THEN
	   GEOGRAPHICALS(NUM_DTIIN) = .TRUE.
	ENDIF
C
C if this the first input DTI file then get default units and null value,
C else check that data type is compatible with the first DTI file and that
C it has the same x and y interval
C
C set null value depending on data type of first input DTI file
C
	IF (NUM_DTIIN.EQ.1) THEN  		! the first DTI file.
	   IF(DATA_TYPE(1).EQ.DATA_BYTE) THEN
	      NULL_BYTE_VAL = DTI_NULL_BYTE
	   ELSEIF (DATA_TYPE(1).EQ.DATA_WORD) THEN
	      NULL_WORD_VAL = DTI_NULL_WORD
	   ELSEIF (DATA_TYPE(1).EQ.DATA_LONG) THEN
	      NULL_LONG_VAL = DTI_NULL_LONG
	   ELSEIF (DATA_TYPE(1).EQ.DATA_REAL) THEN
	      NULL_REAL_VAL = DTI_NULL_REAL
	   ELSE
	      CALL WRITEF('%S Specifying command FILEIN',ERROR)
	      CALL WRITEF
     &		('File %S data type %I0 invalid ',
     &			DTIFILE(1)(:DTILEN(1)),DATA_TYPE(1))
	      CALL WRITEF('Only data types 1 2 3 or 4  '//
     &			  '(BYTE WORD LONG or REAL) allowed ')
	      GOTO 998
	   ENDIF
	ELSE		! not the first DTI file
C
C Don't allow files with different datatypes to be tiled
	   IF (DATA_TYPE(NUM_DTIIN).NE.DATA_TYPE(1)) THEN
 	      CALL WRITEF('%S Specifying command FILEIN',ERROR)
	      CALL WRITEF('File %S data type not compatible with '//
     &		'first DTI file',DTIFILE(NUM_DTIIN)(:DTILEN(NUM_DTIIN)))
	      GOTO 998
	   ENDIF
C
C Warn if files have different headers
	   IF (HEADER_TYPE(NUM_DTIIN).NE.HEADER_TYPE(1))THEN
	     CALL WRITEF('%S Header mismatch',WARNING)
	     CALL WRITEF('File %S does not have the same header type '//
     &         'as the first DTI file',
     &		DTIFILE(NUM_DTIIN)(:DTILEN(NUM_DTIIN)))
	   ENDIF
C
C Warn if files have different units
	   IF (HAD_PROJ_RECORD(NUM_DTIIN) .AND. HAD_PROJ_RECORD(1)) THEN
	      IF (DTIPROJ_UNITS(NUM_DTIIN).NE.DTIPROJ_UNITS(1)) THEN
	         CALL WRITEF('%S Units mismatch',WARNING)
	         CALL WRITEF('File %S does not have the same units '//
     &		   'as the first DTI file',
     &		    DTIFILE(NUM_DTIIN)(:DTILEN(NUM_DTIIN)))
	      ENDIF
	   ENDIF
C
C Warn if files have different grid intervals
	   IF (GEOGRAPHICALS(NUM_DTIIN) .AND. GEOGRAPHICALS(1)) THEN
C
	      IF (LATINT(NUM_DTIIN).NE.LATINT(1) .OR.
     &        	  LONINT(NUM_DTIIN).NE.LONINT(1)) THEN
	         CALL WRITEF('%S Grid interval mismatch',WARNING)
	         CALL WRITEF
     &	           ('File %S X or Y grid not equal to first DTI file',
     &			DTIFILE(NUM_DTIIN)(:DTILEN(NUM_DTIIN)))
		 CALL WRITEF('File 1    X grid: %I   Y grid: %I',
     &			LONINT(1),LATINT(1))
		 CALL WRITEF('File %I1    X grid: %I   Y grid: %I',
     &			NUM_DTIIN,LONINT(NUM_DTIIN),LATINT(NUM_DTIIN))
	      ENDIF
	   ELSE
	      IF (ABS(X_GRID(NUM_DTIIN)-X_GRID(1)).GT.APPROX_ZERO .OR.
     &            ABS(Y_GRID(NUM_DTIIN)-Y_GRID(1)).GT.APPROX_ZERO) THEN
	         CALL WRITEF('%S Grid interval mismatch',WARNING)
	         CALL WRITEF
     &		   ('File %S X or Y grid not equal to first DTI file',
     &			DTIFILE(NUM_DTIIN)(:DTILEN(NUM_DTIIN)))
		 CALL WRITEF('File 1     X grid: %F0.4   Y grid: %F0.4',
     &	          	X_GRID(1),Y_GRID(1))
		 CALL WRITEF('File %I1     X grid: %F0.4   Y grid: %F0.4',
     &            	NUM_DTIIN,X_GRID(NUM_DTIIN),Y_GRID(NUM_DTIIN))
	      ENDIF
	   ENDIF
	ENDIF
C
C Fill out default area of interest 
C
	DTI_WINDOW_SWX(NUM_DTIIN) = 1
	DTI_WINDOW_SWY(NUM_DTIIN) = 1
	DTI_WINDOW_NEX(NUM_DTIIN) = X_EXTENT(NUM_DTIIN)
	DTI_WINDOW_NEY(NUM_DTIIN) = Y_EXTENT(NUM_DTIIN)
C
C Report what we've done.
C
	OK=DTI_PRINT_HEADER(NUM_DTIIN,UNITS,HAD_ABSOLUTE)
	IF (.NOT.OK) THEN
	   CALL LSL_PUTMSG(OK)
	   GOTO 998
	ENDIF
C
C Set up default origin - but only if ENABLE ABSOLUTE set
C
	X_ORIGIN(NUM_DTIIN) = 0
	Y_ORIGIN(NUM_DTIIN) = 0
C
C Get real LAT/LONINT to avoid rounding errors
C
	IF (GEOGRAPHICALS(NUM_DTIIN)) THEN
	   DLATINT = DBLE(LATREC(3,NUM_DTIIN)-LATORI(NUM_DTIIN)) /
     &					DBLE(Y_EXTENT(NUM_DTIIN)-1)
	   DLONINT = DBLE(LONREC(3,NUM_DTIIN)-LONORI(NUM_DTIIN)) /
     &					DBLE(X_EXTENT(NUM_DTIIN)-1)
	ENDIF
C
C Get file origins wrt the first file origin
C
	IF (HAD_ABSOLUTE) THEN
	   IF (GEOGRAPHICALS(NUM_DTIIN) .AND. GEOGRAPHICALS(1)) THEN
	      X_ORIGIN(NUM_DTIIN) =
     &	      	NINT( (LONREC(1,NUM_DTIIN)-LONREC(1,1)) / DLONINT)
	      Y_ORIGIN(NUM_DTIIN) = 
     &	      	NINT( (LATREC(1,NUM_DTIIN)-LATREC(1,1)) / DLATINT)
	      CALL WRITEF
     &		('Default origin calculated from header offset')
	   ELSEIF (HAD_PROJ_RECORD(NUM_DTIIN) .AND.
     &		   HAD_PROJ_RECORD(1)) THEN
	      IF (DTIPROJ_UNITS(NUM_DTIIN).EQ.DTIPROJ_UNITS(1)) THEN
	         X_ORIGIN(NUM_DTIIN) = 
     &		   ((DTIPROJ_ORIGIN(1,NUM_DTIIN)-DTIPROJ_ORIGIN(1,1))/
     &               DTIPROJ_SAMPLE(1,NUM_DTIIN))
	         Y_ORIGIN(NUM_DTIIN) =
     &		   ((DTIPROJ_ORIGIN(2,NUM_DTIIN)-DTIPROJ_ORIGIN(2,1))/
     &               DTIPROJ_SAMPLE(2,NUM_DTIIN))
	         CALL WRITEF
     &		    ('Default origin calculated from header offset')
	      ENDIF
	   ENDIF
	ENDIF
C
C update southerly and westerly origin records wrt the origin of the 
C first file opened
C
	IF (NUM_DTIIN.EQ.1) THEN
	   WEST_FILE  = 1
	   SOUTH_FILE = 1
	   MIN_X_ORIGIN = X_ORIGIN(1)
	   MIN_Y_ORIGIN = Y_ORIGIN(1)
	ELSE
	   IF (X_ORIGIN(NUM_DTIIN) .LT. MIN_X_ORIGIN) THEN
	      WEST_FILE    = NUM_DTIIN
	      MIN_X_ORIGIN = X_ORIGIN(NUM_DTIIN)
	   ENDIF
C
	   IF (Y_ORIGIN(NUM_DTIIN) .LT. MIN_Y_ORIGIN) THEN
	      SOUTH_FILE   = NUM_DTIIN
	      MIN_Y_ORIGIN = Y_ORIGIN(NUM_DTIIN)
           ENDIF
	ENDIF
C
	GOTO 999
C
C Close the DTI file
C
998	CONTINUE
	CALL DTI_CLOSE(NUM_DTIIN,.FALSE.,.TRUE.,IERR)	
C
C decrease the number of opened files counter because of error
C
	OPNDTI=.FALSE.
	NUM_DTIIN = NUM_DTIIN - 1
C
999	CONTINUE
C
	RETURN
	END
C
