C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-02-13 18:58:20.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION GET_CMDS()
C
***	MODULE	GET_CMDS
***	IDENT	13FE92
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Modified from GET_CMDS in DTI2TEXT			ALB 04-Feb-1988
C
CMOD1084
C	Now returns SS$_ABORT on EOF			TJH 13-Feb-1992
C
C
C 
C 
	IMPLICIT NONE
C
C Parameters :
	INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'
	INCLUDE '($SSDEF)/NOLIST'
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE 'LSL$CMNDTI:DTILIBMSG.PAR'
C
C Common blocks :
	INCLUDE 'LSL$CMNDTITILE:CONTROL.CMN'
 	INCLUDE 'LSL$CMNLSL:CMDCOM.CMN'
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'
C
C
C W/s:
	INTEGER		I		! loop counter
	BYTE		CH		! for use with RDCHS
	INTEGER		CMD    		! decoded command number
	LOGICAL		OK		! function return
	INTEGER		RET_CODE	! return code
	INTEGER		IERR		! error code
C
C Define command tables:
	EXTERNAL	DTITILE_CMD_TABLE
	INTEGER		DTITILE_CMD_TABLE
C
C Functions:
	LOGICAL		CANCEL_CMD	! cancel something
	LOGICAL		DISABLE_CMD	! decode disable keywords
	LOGICAL		ENABLE_CMD	! decode enable keywords
	LOGICAL		FILEIN_CMD	! get input file-spec and open
	LOGICAL		FILEOUT_CMD	! get output file-spec
	LOGICAL		GO_CMD		! do processing
	LOGICAL		HELP_CMD	! give help information
	LOGICAL		NULL_CMD	! set null values
	LOGICAL		ORIGIN_CMD	! set origin of input in output
	LOGICAL		PAUSE_CMD	! await for user response
C	non function	QUIT_CMD	! quit the command processor
C	non function	RETURN_CMD	! return from indirect input
	LOGICAL         SHOW_CMD	! show status
	LOGICAL		SIZE_CMD	! specify cols and rows in output file
	LOGICAL		SPAWN_CMD	! DCL spawn command
	LOGICAL		UNITS_CMD	! get units command
	LOGICAL		VOID_CMD	! define void
	LOGICAL		WAIT_CMD	! wait for specified time
	LOGICAL		WINDOW_CMD	! set DTI input window
C
	INTEGER		FLRCLO		! close file
	INTEGER         FLRSTR		! read record from file
	INTEGER         FLROPN		! open file for LSLLIB FILEO	
	LOGICAL		GETFILNAM	! read file-spec
	LOGICAL  	RDCHS		! read character from line
	LOGICAL  	RDCH		! read character from line
	LOGICAL 	RDCOMM  	! read command from line
	INTEGER		RDFILN		! reads and parses a filename
	INTEGER		TTRSTR  	! read line from terminal
	INTEGER		DTI_CLOSE	! close DTI files
C
C ......................................................................
C
	GET_CMDS=SS$_NORMAL
C
C Get an input line from the terminal or the input file
C
10	TXTPTR=80
	IF (TTIN) THEN
	   OK=TTRSTR(,,'DTITILE> ',IERR)
	ELSE
	   CALL FLRSEL(INDLUN)		! input file selected
	   OK=FLRSTR(,,IERR)
	ENDIF
C
C Check that input line read correctly
C
	IF (.NOT.OK) THEN
	   IF (OK.EQ.LSL__EOF) THEN
	      GET_CMDS=SS$_ABORT
	      IF (TTIN) GOTO 1000	! end of file = exit
	   ENDIF
	   CALL LSL_PUTMSG(OK)
	   CALL LSL_ADDMSG(IERR)
	   GOTO 800			! close any indirect input
	ENDIF
C
C echo and decode the line
C
	IF (.NOT.TTIN) THEN
	   CALL EXPAND('DTITILE> ')
	   CALL APPEND(TXTDSC)		! echo indirect input
	   CALL TTWSTR
	ENDIF
C
C Reset decoding pointer
C
	CALL BSLN
C
C Read first character. Look for comment or empty line
C
	IF (RDCHS(CH)) GOTO 10		! substantially empty line
	IF (CH.EQ.'!') GOTO 10		! comment!
C
C Look for indirect file start
C
	IF (TTIN) THEN
	   IF (CH.EQ.'@') THEN
	      IF (RDCHS(CH)) THEN	! substantially empty line
	         CALL WRITEF('%S "@" must precede a file-spec',WARNING)
	         GOTO 800
	      ELSE
	         CALL BSCH		! Move back to start of name
	      ENDIF
C
C Get indirect file name from command line
C
	      OK=GETFILNAM(INDFILE,INDLEN,
     &				'SYS$DISK:[].COM;0',.TRUE.,%REF('!'))
	      IF (.NOT.OK) THEN
	         CALL LSL_PUTMSG(OK)
	         CALL LSL_ADDMSG(IERR)
	         GOTO 800
	      ENDIF
C
C and open indirect file, informing user and checking for errors
C
	      OK=FLROPN(INDLUN, INDFILE(:INDLEN), IERR)
C
	      IF (OK) THEN
	         CALL WRITEF('Command input now being read from %S'
     &					,INDFILE(:INDLEN))
	         TTIN=.FALSE.		! not reading from terminal
	         GOTO 10		! start reading from file
	      ELSE
	         CALL WRITEF('%S Can''t open indirect command file %S'
     &			  ,ERROR,INDFILE(:INDLEN))
	         CALL LSL_PUTMSG(OK)
	         CALL LSL_ADDMSG(IERR)
	         GOTO 800
	      ENDIF
	   ENDIF			! CH .. @
	ENDIF
C
	CALL BSCH			! un-read non-'@'
C
C Now deal with first command, looking it up in table.
C
	CMD=RDCOMM(DTITILE_CMD_TABLE)
	GOTO (	20,	! a unrecognised command
     &		30,	! cancel
     &		40,	! disable		
     &		60,	! enable		
     &		80,	! filein		
     &		100,	! fileout		
     &		120,	! go 	
     &		140,	! help
     &		160,	! null
     &		180,	! origin
     &		200,	! pause		
     &		220,	! quit (non function command)
     &		240,	! return (non function command)		
     &		260,	! show		
     &		280,	! size
     &		300,	! spawn
     &		320,	! units		
     &		330,	! void
     &		340,	! wait		
     &		360	! window
     &	      		), CMD+1
C
C command number out of range
C
	CALL WRITEF('Command not yet implemented')
	GOTO 10
C
C unrecognised command
C
20	CONTINUE
	GOTO 800
C
C ......................................................................
C CANCEL 'sub-command'
C
30	IF (.NOT.CANCEL_CMD()) GOTO 800
	GOTO 10
C
C ......................................................................
C DISABLE 'sub-command'
C
40	IF (.NOT.DISABLE_CMD()) GOTO 800
	GOTO 10
C
C ......................................................................
C ENABLE 'sub-command'
C
60	IF (.NOT.ENABLE_CMD()) GOTO 800
	GOTO 10
C
C ......................................................................
C FILEIN [file-spec]
C
80	IF (.NOT.FILEIN_CMD()) GOTO 800
	GOTO 10
C
C ......................................................................
C FILEOUT [filespec]
C
100	IF (.NOT.FILEOUT_CMD()) GOTO 800
	GOTO 10
C
C ......................................................................
C GO : merge input files onto output file and exit utility
C
120	IF (.NOT.GO_CMD()) GET_CMDS=SS$_ABORT
	GOTO 1000
C
C ......................................................................
C HELP
C
140	IF (.NOT.HELP_CMD()) GOTO 800
	GOTO 10
C
C ......................................................................
C NULL
C
160	IF (.NOT.NULL_CMD()) GOTO 800
	GOTO 10
C
C ......................................................................
C ORIGIN
C
180	IF (.NOT.ORIGIN_CMD()) GOTO 800
	GOTO 10
C
C ......................................................................
C PAUSE
C
200	IF (.NOT.PAUSE_CMD()) GOTO 800
	GOTO 10
C
C ......................................................................
C QUIT - exit out of program
C
220	CONTINUE
	GOTO 1000
C
C ......................................................................
C RETURN - return to terminal input
C
240	IF (TTIN) THEN
	   CALL EXPAND('RETURN command ignored - ')
	   CALL WRITAP('input is already from terminal.')
	ELSE
	   CALL EXPAND('RETURN command detected ') 
	   CALL WRITAP('- returning to terminal input')
	ENDIF
	IF (.NOT.TTIN) THEN
	   OK = FLRCLO(INDLUN, IERR)
	   IF (.NOT.OK) THEN
	      CALL WRITEF('%S Closing indirect file %S',
     &			ERROR, INDFILE(:INDLEN))
	      CALL LSL_PUTMSG(OK)
	      CALL LSL_ADDMSG(IERR)
	   ENDIF
	ENDIF
	TTIN = .TRUE.
	GOTO 10
C
C ......................................................................
C SHOW 'sub-command'
C
260	IF (.NOT.SHOW_CMD()) GOTO 800
	GOTO 10
C
C ......................................................................
C SIZE
C
280	IF (.NOT.SIZE_CMD()) GOTO 800
	GOTO 10
C
C ......................................................................
C SPAWN
C
300	IF (.NOT.SPAWN_CMD()) GOTO 800
	GOTO 10
C
C ......................................................................
C UNITS [units]
C
320	IF (.NOT.UNITS_CMD()) GOTO 800
	GOTO 10
C
C ......................................................................
C VOID
C
330	IF (.NOT.VOID_CMD()) GOTO 800
	GOTO 10
C
C ......................................................................
C WAIT
C
340	IF (.NOT.WAIT_CMD(TTIN)) GOTO 800
	GOTO 10
C
C ......................................................................
C WINDOW
C
360	IF (.NOT.WINDOW_CMD()) GOTO 800
	GOTO 10
C
C close any indirect input following disaster
C
800	CONTINUE
	IF (.NOT.TTIN) THEN
	   TTIN=.TRUE.
	   OK = FLRCLO(INDLUN, IERR)
	   IF (.NOT.OK) THEN
	      CALL WRITEF('%S Closing indirect file %S',
     &			ERROR, INDFILE(:INDLEN))
	      CALL LSL_PUTMSG(OK)
	      CALL LSL_ADDMSG(IERR)
	   ENDIF
	   CALL WRITEF
	   CALL WRITEF('%S Indirect file error - returning to '//
     &			'terminal input',WARNING)
	ENDIF
	GOTO 10
C
C prepare to exit
C
1000	CONTINUE
C
C close any opened input DTI files
C
	IF(NUM_DTIIN.GT.0) THEN
	   DO 1020 I=1,NUM_DTIIN
	      RET_CODE = DTI_CLOSE(I,.FALSE.,.TRUE.,IERR)
	      IF(RET_CODE.NE.DTI__NORMAL) THEN
	         CALL LSL_PUTMSG(RET_CODE)
	         IF(RET_CODE.EQ.DTI__SYSERR) THEN
	            CALL LSL_PUTMSG(IERR)
	         ENDIF
	      ENDIF
	      WIN_SET(I) = .FALSE.
1020	   CONTINUE
	ENDIF
	RETURN
	END
