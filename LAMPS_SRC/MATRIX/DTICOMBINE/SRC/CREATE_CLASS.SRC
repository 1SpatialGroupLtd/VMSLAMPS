C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-09-22 17:21:46.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION CREATE_CLASS(CLASS_REQ,SEL,HADVAL)
C
***	IDENT	22SE88
***	MODULE	CREATE_CLASS
C
C	Copyright (C), Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created from CCB's original in LITES2	JHR	19-Sep-1988
C
C Find or create entry in list of classifications.
C
C
C Returns index of entry modified/created.
C
C.......................................................................
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE	'LSL$DTMCREATESYS:MESPAR.PAR'
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE	'($SSDEF)/NOLIST'
C
C Common:
	INCLUDE 'LSL$CMNDTICOMBINE:CLASS_SEL.CMN'
C
C Arguments:
	REAL*4		CLASS_REQ	! classification requested
	LOGICAL		SEL		! select or deselect
	LOGICAL		HADVAL		! had values?
C
C Functions:
	INTEGER		FND_CLASS	! find class in list
C
C Workspace
	INTEGER		CLASS_GOT
	INTEGER		I,N
C
C.......................................................................
C
	CLASS_GOT = FND_CLASS(CLASS_REQ)	! search for requested CLASS
C
	IF (CLASS_GOT.EQ.0) THEN		! no selections for this class
	   IF (NCLSSEL.GE.MAX_CLSSEL) THEN
	      CALL WRITEF(ERROR//'Maximum number of classifications exceeded')
	      GOTO 1000
	   ENDIF
C
C create new entry for this CLASS
	   NCLSSEL = NCLSSEL+1
	   CLASS_GOT = NCLSSEL
	   CLSSEL(CLASS_GOT).TYPE = CLASS_REQ
	   CLSSEL(CLASS_GOT).ALL = .TRUE.	! all values selected
	   CLSSEL(CLASS_GOT).SLCT = .FALSE.	! not yet in select mode
	   CLSSEL(CLASS_GOT).NTOG = 0		! no toggle points
	ENDIF
C
C in case existing entry being switched to absent
	IF (.NOT.(SEL.OR.HADVAL)) THEN		! required absent
	   CLSSEL(CLASS_GOT).ALL = .TRUE.	! all
	   CLSSEL(CLASS_GOT).SLCT = .FALSE.
	   CLSSEL(CLASS_GOT).NTOG = 0
C
C remove any entries for this CLASS
	   N = CLASS_GOT
100	   N = N+1
	   IF (N.LE.NCLSSEL) THEN
	      IF (CLSSEL(CLASS_GOT+N).TYPE.EQ.CLASS_REQ) GOTO 100
	   ENDIF
	   IF (N.GT.CLASS_GOT+1) THEN
	      DO 105 I=N,NCLSSEL
	         CLSSEL(I-N+CLASS_GOT+1) = CLSSEL(I)
105	      CONTINUE
	   ENDIF
	ENDIF
C
C	
1000	CREATE_CLASS = CLASS_GOT		! return index of entry
	RETURN
	END
