C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-04-18 15:29:54.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION PARSE(STR,NCHRS)
C
***	MODULE	PARSE
***	IDENT	17AP91
C
C	Copyright	Laser-Scan Laboratories, Ltd. Cambridge, England
C
CMOD	Bug fix in original unary minus stuff		ACM  23-Feb-1988
CMOD	New unary operators added			TJH  15-Feb-1988
CMOD	added MAX,MIN,bitwise and logicals		 SG  09-apr-1991
CMOD	comma now treated as an operator		 SG  10-apr-1991
CMOD	added IFTHEN function				 SG  11-apr-1991
CMOD	binary and logical operators modified		 SG  17-apr-1991
C	Author		Andrew Morris			25-Apr-1985
C
	IMPLICIT NONE
C
C	PARAMETERS
	INCLUDE 'LSL$CMNDTICOMBINE:CONTROL.CMN'		!for DIAG

***	PARAMETER/HERE:XPRPAR/		! codes for PLS,MNS,etc.
C
C local parameters
	INTEGER		STKSIZ		! max stack height
	PARAMETER(	STKSIZ = 200)
	BYTE		MAXNEST
	PARAMETER	(MAXNEST = 10)
C
C parameters in/out
	INTEGER		NCHRS		! length of string to be parsed
	BYTE		STR(NCHRS)	! byte string to be parsed
C
C workspace
	INTEGER		ICHR		! index into STR
	INTEGER		N1,N2		! height of stacks 1 and 2
	INTEGER		N_OPS		! binary-operator count
	INTEGER		N_VALS		! value-field count
	INTEGER		NEST_PTR	
	BYTE		CHR		! character from STR
	BYTE		WANT
	LOGICAL		ISOP,WASOP	! CHR is/was operator?
	LOGICAL		IS_NUM		! CHR is a number?

	BYTE		STK1(STKSIZ)	! stack 1
	BYTE		STK2(STKSIZ)	! stack 2
	BYTE		NEST(MAXNEST)	! 10 levels of nested blocks
C functions
	INTEGER		PREC		! operator precedence map
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Converts arithmetic expression in byte string STR
C	to its Reverse-Polish form, ignoring spaces, and returns
C	error code as
C
C	       -1 	for success
C		1 	for bracket mismatch
C		2 	for bad character in string
C		3 	for bad operator syntax
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
	N1 = 0					! nothing yet on stack 1
	STK2(1) = NUM				! sign for bottom of S2
	N2 = 1
	ISOP = .TRUE.				! accept init unary '-'
	CHR = ' '
	N_OPS = 0				! no binary ops yet
	N_VALS = 0				! no value-fields yet
	NEST_PTR = 0				! no variable args yEt
C
	IF (DIAG)  CALL WRITEF('INPUT: ')
	DO 30 ICHR = 1,(NCHRS-1)
C						! was last token an op?
	   WASOP = ISOP.OR.(CHR.EQ.LBR).OR.(CHR.EQ.STAB)
	   CHR = STR(ICHR)			! get token 
	   IF (DIAG) CALL WRITEF('%^B%I4',CHR)
	   IS_NUM = CHR.EQ.NUM			! is it a number
						! is it an operator
	   ISOP = ((CHR.GE.PLS).AND.(CHR.LE.IFTHEN)).OR.(CHR.EQ.CMA)
C
	   IF (IS_NUM) THEN			! if a number then
	      N1 = N1+1				! put it onto stack 1
	      STK1(N1) = CHR
	      N_VALS = N_VALS+1			! count value-fields
	   ELSE IF (ISOP) THEN
	      IF (WASOP) THEN			! functions come after ops
	         IF (CHR.EQ.MNS)  CHR = UNA	! unary '-' ?
		 IF ((CHR.GE.BNOT).AND.(CHR.LE.IFTHEN)) THEN
		   N2 = N2 +1			! uranary ops
		   STK2(N2) = CHR
	         ELSE
	            PARSE = 3			! bad operator syntax
	            GOTO 60			! return
	         END IF
	      ELSE				! proper binary operator
10	         IF (PREC(CHR).LE.PREC(STK2(N2))) THEN
	            N1 = N1+1			! move op from S2 to S1
	            STK1(N1) = STK2(N2)
	            N2 = N2-1
	            GOTO 10
	         ENDIF
		 IF (CHR.EQ.CMA) THEN		! don't store comma
		    NEST(NEST_PTR) = NEST(NEST_PTR)+1
		 ELSE
	            N2 = N2+1			! add op to S2
	            STK2(N2) = CHR
	            N_OPS = N_OPS+1		! count binary operators
	         END IF
	      END IF
	   ELSE IF ((CHR.EQ.LBR).OR.(CHR.EQ.STAB)) THEN
	      N2 = N2+1				! add '(' to S2
	      STK2(N2) = CHR
	      IF (CHR.EQ.STAB) THEN
		NEST_PTR = NEST_PTR+1
		NEST(NEST_PTR) = 0
	      ENDIF
	   ELSE IF ((CHR.EQ.RBR).OR.(CHR.EQ.ENDB)) THEN
	      IF (CHR.EQ.ENDB) THEN		! set type of bracket
		 WANT = STAB
	      ELSE
		 WANT = LBR
	      ENDIF
20	      IF (PREC(CHR).LT.PREC(STK2(N2))) THEN
	         N1 = N1+1			! move op from S2 to S1
	         STK1(N1) = STK2(N2)
	         N2 = N2-1
	         GOTO 20
	      ELSE IF (STK2(N2).EQ.WANT) THEN	! should have bracket
	        IF (CHR.EQ.ENDB) THEN		! keep track of varags
		   N1 = N1 +1
		   STK1(N1) = LIT
		   N1 = N1+1
		   STK1(N1) = NEST(NEST_PTR)
		   N_OPS = N_OPS + NEST(NEST_PTR)
		   NEST(NEST_PTR) = 0
		   NEST_PTR = NEST_PTR - 1
		ENDIF
	        N2 = N2-1			! cancel bracket pair
	      ELSE
	         PARSE = 1			! bracket mismatch
	         GOTO 60			! return
	      END IF
 	   ELSE
	      PARSE = 2				! bad character
	      GOTO 60				! return
	   END IF
C
30	CONTINUE				! loop for next char
C
C empty stack 2 onto stack 1
40	IF (N2.GT.1) THEN
	   CHR = STK2(N2)
	   IF (CHR.NE.LBR.AND.CHR.NE.RBR) THEN
	      N1 = N1+1
	      STK1(N1) = CHR
	      N2 = N2-1
	      GOTO 40
	   ELSE
	      PARSE = 1				! bracket mismatch
	      GOTO 60				! return
	   END IF
	END IF
C
C check that No of binary ops matches No of value-fields
	IF (N_OPS.NE.N_VALS-1) THEN
	   PARSE = 3				! bad operator syntax
	   GOTO 60				! return
	END IF
C
C put STK1 into STR
	IF (DIAG) CALL WRITEF('OUTPUT: ')
	DO 50 ICHR = 1,N1
	   IF (DIAG) CALL WRITEF('%^B%I4',STK1(ICHR))
50	STR(ICHR) = STK1(ICHR)
C	
	NCHRS = N1
	PARSE = -1				! signal success
C
60	END
