	INTEGER*4  FUNCTION CLOSE_FILES(WHICH_LUN)
C
***	MODULE	CLOSE_FILES
***	IDENT	14JN91
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Author						TJH  18-Jan-1988
C	Modified DRC 15-Jun-88 to call DTI_PRINT_HEADER before
C	closing the output file.
CMOD    call routine MODHEAD to update origin details  MWSR  24-Nov-1988
CMOD    call ti DTI_UNITS for output file	       MWSR  09-Dec-1988
CMOD	use units for current file		       MWSR  20-Jan-1989
CMOD	tidied added DTIPROJ header block		 SG  14-Jun-1991
C
C Function to close all open DTICOMBINE files.
C Function returns one of 2 condition codes:
C All file-specs and their lengths are taken from /FILES/ common.
C All error reporting is done locally.
C
C	SS$_NORMAL	- success
C	SS$_ABORT	- something went wrong
C
C
	IMPLICIT NONE
C
C Argument (in):
	INTEGER	WHICH_LUN ! lun of file to be closed,  0 if all 
C
C Parameters:
	INTEGER*4	STS$K_WARNING
	EXTERNAL  	STS$K_WARNING	! bit mask for warning severity
	INTEGER*4 	SS$_ABORT
	EXTERNAL  	SS$_ABORT	! bad luck!
	INTEGER*4 	SS$_NORMAL
	EXTERNAL  	SS$_NORMAL	! normal successful completion
	INCLUDE 	'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE 	'LSL$CMNDTI:DTIDEF.PAR'
	INCLUDE 	'LSL$CMNDTI:DTIPAR.PAR'
	INCLUDE 	'LSL$CMNDTI:DTILIBMSG.PAR'
	INCLUDE 	'LSL$DTMCREATESYS:MESPAR.PAR'
C
C Functions:
	LOGICAL		DTI_CLOSE	! closes DTI file
	INTEGER		FLRCLO		! close indirect file
C
C Workspace:
	INTEGER		LUN		! an imput DTI lun
	INTEGER		IERR		! for error return	
	INTEGER		UNITS
C
C Common:
	INCLUDE 'LSL$CMNDTICOMBINE:CONTROL.CMN'
	INCLUDE 'LSL$CMNDTICOMBINE:FILES.CMN'
	INCLUDE 'LSL$CMNDTI:DTIHDR.CMN'
	INCLUDE 'LSL$CMNDTI:DTIPROJ.CMN'
	INCLUDE 'LSL$CMNLSL:STATUS.CMN'
C
C.......................................................................
C
	CLOSE_FILES = %LOC(SS$_NORMAL)     ! normal completion
C
	IF (WHICH_LUN.NE.0) THEN
	   IF (DTILUN_INUSE(WHICH_LUN)) THEN
	      CLOSE_FILES=DTI_CLOSE(WHICH_LUN,.FALSE.,.FALSE.,IERR)
	      IF (CLOSE_FILES.EQ.DTI__NORMAL) THEN	! error?
	         CURRENT_FILE=0
	         WIN_SET(WHICH_LUN)=.FALSE.
	      ELSE
	         CALL LSL_PUTMSG(CLOSE_FILES,
     &		   DTI_NAME(WHICH_LUN)(1:DTI_NAME_LENGTH(WHICH_LUN)))
	         IF (IERR.NE.0) CALL LSL_ADDMSG(IERR)
	      ENDIF
	    ELSE
	      CALL WRITEF(WARNING//'file was not open!')
	      CLOSE_FILES=%LOC(SS$_ABORT)
	   ENDIF
	ELSE
C
C.......................................................................
C Close input DTI files
C
	   DO 10 LUN=1,MAX_DTI-1
	      IF (DTILUN_INUSE(LUN)) THEN
	         CLOSE_FILES=DTI_CLOSE(LUN,.FALSE.,.FALSE.,IERR)
	         IF (CLOSE_FILES.NE.DTI__NORMAL) THEN	! error?
	            CALL LSL_PUTMSG(CLOSE_FILES,
     &			DTI_NAME(LUN)(1:DTI_NAME_LENGTH(LUN)))
	            IF (IERR.NE.0) CALL LSL_ADDMSG(IERR)
	         ENDIF
	      ENDIF
10	   CONTINUE
C
C.......................................................................
C Close output DTI file
C
	   IF (DTILUN_INUSE(MAX_DTI)) THEN
C
C	      ..........................................................
C 	      update the header information if necessary
C
	      IF(HEADER_TYPE(MAX_DTI).EQ.DTI_TED4
     &          .OR.HEADER_TYPE(MAX_DTI).EQ.DTI_UHL1 
     &          .OR.HAD_PROJ_RECORD(MAX_DTI))  CALL MODHEAD
C
C	      ..........................................................
C 	      Do a print header first
C
	      CALL DTI_PRINT_HEADER(
     &			OUTLUN, WIN_UNITS(CURRENT_FILE),HAD_ABSOLUTE)
C
	      CLOSE_FILES=DTI_CLOSE(MAX_DTI,.TRUE.,.FALSE.,IERR)
	      IF (CLOSE_FILES.NE.DTI__NORMAL) THEN	! error?
	         CALL LSL_PUTMSG(CLOSE_FILES,
     &			DTI_NAME(OUTLUN)(1:DTI_NAME_LENGTH(OUTLUN)))
	         IF (IERR.NE.0) CALL LSL_ADDMSG(IERR)
	      ENDIF
	   ENDIF
C
C ......................................................................
C
C If required, close the indirect command file
C
	   IF (.NOT.TTIN) THEN
	      CLOSE_FILES=FLRCLO(INDLUN,IERR)
	      IF (CLOSE_FILES.NE.LSL__NORMAL) THEN		! error?
	         CALL WRITEF(ERROR//'closing indirect command file')
	         CALL LSL_PUTMSG(CLOSE_FILES,INDFILE(1:INDLEN))
	         IF (IERR.NE.0) CALL LSL_ADDMSG(IERR)
	      ENDIF
	   ENDIF	
	ENDIF
C
C.......................................................................
C
	IF (CLOSE_FILES) THEN
	   CLOSE_FILES=%LOC(SS$_NORMAL)
	ELSE
	   CLOSE_FILES=%LOC(SS$_ABORT)
	ENDIF
	RETURN
	END
