C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-03-13 10:03:46.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C	COMMON block for the PARSE and EVLXPR routines which
C	parse and subsequently evaluate a general arithmetic
C	expression contining a mixture of fixed and variable
C	REAL	 numbers
C
	INTEGER		MAXARGS		! max No of args in expr
	INTEGER		MAXCHRS		! nax No of chars in expr
	PARAMETER(	MAXARGS = 50)
	PARAMETER(	MAXCHRS = 100)
C
	REAL		ARGLST(MAXARGS)	! args in same order as in expr
	INTEGER		ARGNUM		! number of args
	BYTE		EXPRSN(MAXCHRS)	! expression coded as above
	INTEGER		EXPRLN		! length of expression
	BYTE		ARGMAP(MAXARGS)	! ARGLST key
	REAL		XPRVAL		! value of evaluated expression
C
	COMMON/XPRCMN/	ARGLST,ARGNUM,EXPRSN,EXPRLN,ARGMAP,XPRVAL
C
C Example (parameters used below are all in EXPR.PAR)
C
C	Variables expected in expression are A and B.
C
C	Expression is	10*AA+4*-(2*AA+5*AA*BB)-BB^CC
C
C	EXPRSN = NUM,TMS,NUM,PLS,NUM,TMS,MNS,LBR,NUM,TMS,NUM,PLS,NUM,
C	         TMS,NUM,TMS,NUM,RBR,MNS,NUM,EXP,NUM
C
C	EXPRLN = 22
C
C	VARARG = AA, BB, CC   -say, although the order is user defined
C
C 	(N.B VARARG not used in DTICOMBINE)
C
C	ARGLST = 10, ?, 4, 2, ?, 5, ?, ?, ?, ?
C
C	ARGMAP =  0, 1, 0, 0, 1, 0, 1, 2, 2, 3  - for this VARARG order
C
C	ARGNUM = 10
C
C	You would now transform EXPRSN into Reverse-Polish form,
C	suitable for subsequent evaluation,
C
C		IERR = PARSE(EXPRSN,EXPRLN)
C		ignores spaces and tabs, and returns IERR as
C	       -1 	for success
C		1 	for bracket mismatch
C		2 	for bad character in string
C		3 	for bad operator syntax
C
C	-which converts EXPRSN to RP form, with new length EXPRLN.
C
C	Now, each time the expression is to be evaluated, you must
C	first fill in the gaps in the ARGLST argument list,
C
C		DO 10 I = 1,ARGNUM
C	10	IF (ARGMAP(I).GT.0) ARGLST(I) = VARARG(ARGMAP(I))
C
C	-and then evaluate the expression,
C
C		IERR = EVLXPR(EXPRSN,EXPRLN,ARGLST,ARGNUM,XPRVAL)
C		returns IERR as
C		-1	for success
C		 1	for invalid RP-syntax
C		 2	for too few values in expression
C		 3	for invalid character in expression
C		 4	for attempt to divide by zero
C
C	-to obtain its value in XPRVAL
