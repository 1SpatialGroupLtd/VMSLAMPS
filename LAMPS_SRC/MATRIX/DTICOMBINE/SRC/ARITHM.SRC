	LOGICAL FUNCTION ARITHM()
C
***	MODULE	ARITHM
***	IDENT	06AU92
C
C	Copyright (C), Laser-Scan Ltd., Cambridge, England
C
C	Created						TJH 18-Jan-1988
C
CMOD    Make result null if any nulls in input	       MWSR 09-Dec-1988
CMOD    Treat bytes as unsigned			       MWSR 24-Nov-1988
CMOD	Classification added				JHR 23-Sep-1988
CMOD	Comments tidied					TJH 12-Sep-1988
CMOD	Corrected bug in variable mapping		 SG 18-Apr-1991
CMOD	Modified to deal with matrix or real_world 
C	coords outside input file			 SG 24-Apr-1991
C
CMOD1124 Fix BYTE reading				 JB 06-Jul-1992
C
CMOD1133 Only set up windows for DTI's in use		 JB 04-Aug-1992
C	 Add return of 0 from EVLXPR to signify NULL values in the
C	 input value list, to further process if NULL_HANDLING true
C	 (for MAX,MIN at present), or not otherwise.
C
C Function to apply the expression to the input DTI files 
C and write the result into the output DTI file
C
C Function returns SS$_NORMAL if all is well, otherwise SS$_ABORT
C
C ......................................................................
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE	'LSL$DTMCREATESYS:MESPAR.PAR'
	INCLUDE	'LSL$CMNDTI:DTIPAR.PAR'
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE	'($SSDEF)/NOLIST'
C
C Common:
	INCLUDE	'LSL$CMNDTI:DTIHDR.CMN'
	INCLUDE	'LSL$CMNDTICOMBINE:CONTROL.CMN'
	INCLUDE	'LSL$CMNDTICOMBINE:FILES.CMN'
	INCLUDE	'LSL$CMNDTICOMBINE:XPRCMN.CMN'
	INCLUDE	'LSL$CMNLSL:EXCEPTION.CMN'
C
C Functions:
	INTEGER	DTI_READ_BYTE_DATA
	INTEGER	DTI_READ_WORD_DATA
	INTEGER	DTI_READ_LONG_DATA
	INTEGER	DTI_READ_REAL_DATA
	INTEGER	DTI_WRITE_BYTE_DATA
	INTEGER	DTI_WRITE_WORD_DATA
	INTEGER	DTI_WRITE_LONG_DATA
	INTEGER	DTI_WRITE_REAL_DATA
	INTEGER	DTI_MINMAX_DATA
	INTEGER LIB$PUT_OUTPUT
	INTEGER	EVLXPR			! evaluate expression
C
C W/s
	INTEGER		IERR		! function return
	INTEGER		I,J,K,INLUN	! loop vars
C
	INTEGER*4	ALONG
	INTEGER*2 	AWORD		! temp storage
	BYTE		ABYTE
	BYTE		TEMP(2)
	EQUIVALENCE(TEMP,AWORD)		! treat byte values as unsigned
C					! on reading
	INTEGER*2	UNSIGNED_WORD
	EQUIVALENCE(UNSIGNED_WORD,ABYTE) ! treat byte values as unsigned
C					 ! for writing to byte buffer
	INTEGER*4	ROW,COL
	INTEGER*4	WIN_ROW,WIN_COL
	INTEGER		MODVAL
	INTEGER		NON_NULL
C
	REAL		REAL_ROW,REAL_COL
	REAL		AREAL
	REAL		APOST(MAX_DTI-1)  ! apost from each in-file
C
	LOGICAL		SET_NULL(MAX_DTI) ! is it a null result in DTI file?
	LOGICAL		HAD_NULL_WARNING  ! output message 
C
	CHARACTER	FILE_ROW
	CHARACTER*1	ESC
	PARAMETER	(ESC = CHAR(27))
C
C ......................................................................
C If window hasn't been set, set window to be entire file
C
	DO 10 I=1,MAX_DTI-1
	   IF (DTILUN_INUSE(I) .AND. .NOT.WIN_SET(I)) THEN
	      DTI_WINDOW_SWX(I)=1
	      DTI_WINDOW_SWY(I)=1
	      DTI_WINDOW_NEX(I)=X_EXTENT(I)
	      DTI_WINDOW_NEY(I)=Y_EXTENT(I)
	   ENDIF
10	CONTINUE
C
C ......................................................................
C Show expression for diagnostics
	MODVAL = X_SIZE/15
C
	IF (MODVAL.EQ.0) MODVAL =1		! prevent divide by zero err
C
	IF (DIAG) THEN
c	    CALL LIB$PUT_OUTPUT(ESC//'[?3l'//ESC//'[1;1H')
	    CALL WRITEF (EXPSTR)
	ENDIF
C..........................................................................
C for each matrix unit in output file calculate a result
C
	HAD_NULL_WARNING = .FALSE.		! had no NULL warning yet
C
	DO 50 I=1,X_SIZE			! for each column
	   IF (.NOT.DIAG .AND. MOD(I,MODVAL).EQ.1)
     &		CALL WRITEF('%N Columns to go',X_SIZE-I)
C
	   DO 40  J=1,Y_SIZE			! for each pixel
	      NON_NULL = 0
C
C	      ............ real world coordinates .......................
C
	      REAL_COL = X_OFFSET(OUTLUN) + (I-1) * X_GRID(OUTLUN)
	      REAL_ROW = Y_OFFSET(OUTLUN) + (J-1) * Y_GRID(OUTLUN)
C
	      IF (DIAG) THEN			! assumes a VT100 terminal
C		CALL LIB$PUT_OUTPUT(ESC//'[3;1H')
	        CALL WRITEF ('matrix: col = %I , row = %I%T',I,J)
	        CALL WRITEF ('abs   : col = %F , row = %F%T',REAL_COL,REAL_ROW)
		CALL WRITEF
	      ENDIF
C
	      DO 20 INLUN=1,MAX_DTI-1		! for each file
	         IF (DTILUN_INUSE(INLUN)) THEN
C
		    SET_NULL(INLUN) = .FALSE.
C
C		    ............. matrix coords in INLUN .....................
C  	
		    COL= 1 + NINT( (REAL_COL-X_OFFSET(INLUN))/X_GRID(INLUN))
		    ROW= 1 + NINT( (REAL_ROW-Y_OFFSET(INLUN))/Y_GRID(INLUN))
C
C		    .... are we in range of window of interest in INLUN ......
C
		    ARITHM = .TRUE.
C
		    IF ( (COL.LT.DTI_WINDOW_SWX(INLUN)) .OR.
     &			 (COL.GT.DTI_WINDOW_NEX(INLUN)) .OR.
     &			 (ROW.LT.DTI_WINDOW_SWY(INLUN)) .OR.
     &			 (ROW.GT.DTI_WINDOW_NEY(INLUN)) ) THEN
		       SET_NULL(INLUN) = .TRUE.
C
		    ELSE
		       IF (DATA_TYPE(INLUN).EQ.DATA_BYTE) THEN
		          ARITHM=DTI_READ_BYTE_DATA(INLUN,ABYTE,COL,ROW)
			  IF (ARITHM) THEN
			     TEMP(1) = ABYTE		! read as unsigned 
			     APOST(INLUN) = AWORD	! byte (value in AWORD)
			  ENDIF
C
 	               ELSEIF (DATA_TYPE(INLUN).EQ.DATA_WORD) THEN
		          ARITHM=DTI_READ_WORD_DATA(INLUN,AWORD,COL,ROW)
		          IF (AWORD.EQ.DTI_NULL_WORD) THEN
			    SET_NULL(INLUN) = .TRUE.
		          ELSEIF (ARITHM) THEN	
			    APOST(INLUN)=AWORD
		          ENDIF
C
	               ELSEIF (DATA_TYPE(INLUN).EQ.DATA_LONG) THEN
		          ARITHM=DTI_READ_LONG_DATA(INLUN,ALONG,COL,ROW)
		          IF (ALONG.EQ.DTI_NULL_LONG) THEN
			    SET_NULL(INLUN) = .TRUE.
		          ELSEIF (ARITHM) THEN	
			    APOST(INLUN)=ALONG
		          ENDIF
C
	               ELSEIF (DATA_TYPE(INLUN).EQ.DATA_REAL) THEN
	                  ARITHM=DTI_READ_REAL_DATA(INLUN,AREAL,COL,ROW)
		          IF (AREAL.EQ.DTI_NULL_REAL) THEN
			    SET_NULL(INLUN) = .TRUE.
		          ELSEIF (ARITHM) THEN
			    APOST(INLUN) = AREAL
		          ENDIF
	               ENDIF
		    ENDIF
C
		    IF (.NOT.ARITHM) THEN
			CALL LSL_PUTMSG(ARITHM)
			GOTO 60
		    ELSEIF (SET_NULL(INLUN)) THEN
		       APOST(INLUN) = DTI_NULL_REAL
		    ELSE
		       NON_NULL = NON_NULL+1
		    ENDIF
C
		    IF (DIAG) THEN
			WIN_COL = COL - DTI_WINDOW_SWX(INLUN) + 1
			WIN_ROW = ROW - DTI_WINDOW_SWY(INLUN) + 1
			CALL EXPAND('file :%C%T','A'+INLUN-1)
			CALL APPEND('matrix (%I4 , %I4 ) ,', COL    , ROW    )
			CALL APPEND('window (%I4 , %I4 ) ,', WIN_COL, WIN_ROW)
		        CALL WRITAP('value = %F%T',APOST(INLUN) )
		    ENDIF
	         ENDIF
20	      CONTINUE
C
	      IF (NON_NULL.EQ.0) THEN
		 XPRVAL = DTI_NULL_REAL		! set null output for
		 GOTO 35			! no inputs
	      ENDIF
C
C..........................................................................
C We now have in APOST(1) a real value for the post in FILEA file
C and in APOST(n) a real value for the corresponding post in the FILEn
C file
C We can now substitute these values into our expression.
C..........................................................................
C
	      DO 30 K=1,ARGNUM
	         IF (ARGMAP(K).NE.0) ARGLST(K) = APOST(ARGMAP(K))	
30	      CONTINUE
C
C..........................................................................
C Now evaluate the expression
C..........................................................................
C
	      ARITHM = .FALSE.
	      XPRVAL = DTI_NULL_REAL	! set null output for default
C
	      IERR = EVLXPR(EXPRSN,EXPRLN,ARGLST,ARGNUM,XPRVAL)
C
C Check for any error or warning
	      IF (IERR.EQ.0) THEN			! NULLs present
		 IF (NULL_HANDLING) THEN
		    IF (HAD_NULL_WARNING) GOTO 32	! sensible result output
C
		    CALL EXPAND (WARNING//'evaluating min/max expression')
		    CALL WRITAP('- NULL values present and ignored')
		    HAD_NULL_WARNING = .TRUE.
		    GOTO 32				! sensible result output
C
		 ELSE
		    IF (HAD_NULL_WARNING) GOTO 35	! no result
C
		    CALL EXPAND (WARNING//'evaluating expression')
		    CALL WRITAP('- NULL values present and returning NULL')
		    HAD_NULL_WARNING = .TRUE.
		    GOTO 35				! no result
		 ENDIF
	      ENDIF
C
	      IF (IERR.GE.1) THEN
		 CALL EXPAND (ERROR//'evaluating expression')
		 IF (IERR.EQ.1) CALL WRITAP('- invalid RP syntax')
		 IF (IERR.EQ.2) CALL WRITAP('- insufficient operators')
		 IF (IERR.EQ.3) CALL WRITAP('- invalid character')
		 IF (IERR.EQ.4) CALL WRITAP('- wrong number of operands')
		 IF (IERR.EQ.5) CALL WRITAP('- forbidden operation')
	         GOTO 60
	      ENDIF
C
32	      IF (CLASS_ENABLED) THEN		! is classification active
	 	 CALL CLASS_INVOKE(XPRVAL)	! check value against classes
	      ENDIF
C
C..........................................................................
C Now (if necessary) convert the result to fit the data type of the
C output DTI file. We must of course check that the result will fit
C without overflow or underflow!
C..........................................................................
C
35	      IF (DIAG) THEN
		CALL WRITEF ('result: %F%T',XPRVAL)
		CALL WRITEF
		CALL WRITEF
	      ENDIF
C
C Write out the result
C
	      IF (BYTE_RESULT) THEN
		 IF (XPRVAL.EQ.DTI_NULL_REAL) THEN
	            UNSIGNED_WORD = DTI_NULL_BYTE
	         ELSEIF (XPRVAL.LT.0.0) THEN
	            CALL WRITEF(ERROR//'Byte underflow at X= %N, Y= %N',I,J)
	         ELSEIF (XPRVAL.GT.255.0) THEN
	            CALL WRITEF(ERROR//'Byte  overflow at X= %N, Y= %N',I,J)
	         ELSE
	            UNSIGNED_WORD = INT(XPRVAL)	    ! convert real to byte
		 ENDIF
C
	         ARITHM = DTI_WRITE_BYTE_DATA(OUTLUN,ABYTE,I,J)
C
	      ELSEIF (WORD_RESULT) THEN
		 IF (XPRVAL.EQ.DTI_NULL_REAL) THEN
		    AWORD = DTI_NULL_WORD
	         ELSEIF (XPRVAL.LT.-32768) THEN
	            CALL WRITEF(ERROR//'Word underflow at X= %N, Y= %N',I,J)
	         ELSEIF (XPRVAL.GT.32767) THEN
	            CALL WRITEF(ERROR//'Word  overflow at X= %N, Y= %N',I,J)
	         ELSE
	            AWORD=INT(XPRVAL)		! convert real to word
		 ENDIF
C
		 ARITHM=DTI_WRITE_WORD_DATA(OUTLUN,AWORD,I,J)
C
	      ELSEIF (LONG_RESULT) THEN
		 IF (XPRVAL.EQ.DTI_NULL_REAL) THEN
		    ALONG = DTI_NULL_LONG
		 ELSE
	            ALONG = INT(XPRVAL)
		 ENDIF
C
		 ARITHM=DTI_WRITE_LONG_DATA(OUTLUN,ALONG,I,J)
C
	      ELSEIF (REAL_RESULT) THEN
		 ARITHM=DTI_WRITE_REAL_DATA(OUTLUN,XPRVAL,I,J)
	      ENDIF
C
	      IF (.NOT.ARITHM) THEN
	         CALL LSL_PUTMSG(ARITHM)
	         GOTO 60
	      ENDIF
40	   CONTINUE
50	CONTINUE
C
C..........................................................................
C Patch in the output file z-range
C..........................................................................
C
	ARITHM = DTI_MINMAX_DATA(OUTLUN,.TRUE.,IERR)
	IF (.NOT.ARITHM) THEN
	   CALL LSL_PUTMSG(ARITHM)
	   CALL LSL_ADDMSG(IERR)
	ENDIF
C
60	IF (ARITHM) THEN
	   ARITHM=SS$_NORMAL
	ELSE
	   ARITHM=SS$_ABORT
	ENDIF
C
	RETURN
	END
C
