C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-09-22 17:24:24.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION STORE_CLASS(INDEX,SEL,INEQ,VAL)
C
***	IDENT	22SE88
***	MODULE	STORE_CLASS
C
C	Copyright (C), Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created from CCB's original in LITES2	JHR	19-Sep-1988
C
C To save a class selection command
C
C.......................................................................
C
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE	'LSL$CMNLSL:INEQ.PAR'
	INCLUDE	'LSL$DTMCREATESYS:MESPAR.PAR'
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'
C
C Common:
	INCLUDE 'LSL$CMNDTICOMBINE:CLASS_SEL.CMN'
	INCLUDE 'LSL$CMNDTICOMBINE:CLASS_PARSE.CMN'
	INCLUDE	'LSL$CMNLSL:EXPC.CMN'
	INCLUDE	'LSL$CMNLSL:TXTC.CMN'
C
C Arguments:
	INTEGER*4	INDEX		! index into CLSSEL array
	LOGICAL		SEL		! select or deselect
	BYTE		INEQ		! inequality type
	REAL*4		VAL(2)		! the range or value
C
C Functions
	INTEGER		CMP_CLASS
	LOGICAL		TST_CLASS
C
C Local Variables
	LOGICAL		S(2)
	INTEGER		DEL(2)
	INTEGER		T,I,C
	INTEGER		TS(2)
	INTEGER		IND
C
C masks for the different inequalities
C 3 values are selected below/on/above particular value
	LOGICAL*1	IQ(3,0:5)
	DATA	IQ/	.FALSE., .TRUE.,.FALSE.,	! =
     &			.FALSE.,.FALSE., .TRUE.,	! >
     &			.FALSE., .TRUE., .TRUE.,	! >=
     &			 .TRUE.,.FALSE.,.FALSE.,	! <
     &			 .TRUE., .TRUE.,.FALSE.,	! <=
     &			 .TRUE.,.FALSE., .TRUE./	! <>
C
	STORE_CLASS = .FALSE.		! assume failure
C
C check room to insert extra toggle points for this CLASS
	T = MAX_CLSTOG - CLSSEL(INDEX).NTOG
	IF (T.LE.0.OR.(RANGE.AND.T.LT.2)) THEN
	   CALL WRITEF(ERROR//'Maximum number of class exceeded')
	   GOTO 999
	ENDIF
C
C get present selection status at values
	IF (SEL.AND..NOT.CLSSEL(INDEX).SLCT) THEN
	   S(1) = .FALSE.
	   S(2) = .FALSE.
	ELSE
	   S(1) = TST_CLASS(INDEX,VAL(1),2)
	   IF (RANGE) S(2) = TST_CLASS(INDEX,VAL(2),2)
	ENDIF
C
	IND = 1				! doing first value
	IF (RANGE) INEQ = INEQ_GEQ	! emulate >= for range
C
C find first toggle .GE. first value
25	DO 30 T=1,CLSSEL(INDEX).NTOG
	   C = CMP_CLASS(CLSSEL(INDEX).TOG(T).VAL,VAL(IND),2)
	   IF (C.GE.0) GOTO 40
30	CONTINUE
C
C all toggles .LT. first value
	C = -1
	T = CLSSEL(INDEX).NTOG+1
C
40	IF (C.NE.0) THEN	! not on toggle point
C
C make space for new toggle point
	   DO 50 I=CLSSEL(INDEX).NTOG,T,-1
	      CLSSEL(INDEX).TOG(I+1) = CLSSEL(INDEX).TOG(I)
50	   CONTINUE
	   CLSSEL(INDEX).NTOG = CLSSEL(INDEX).NTOG + 1
C
C insert new toggle point, setting its selection status to the present
C state at this value
	   CLSSEL(INDEX).TOG(T).VAL = VAL(IND)
	   CLSSEL(INDEX).TOG(T).SEL(1) = S(IND)
	   CLSSEL(INDEX).TOG(T).SEL(2) = S(IND)
	   CLSSEL(INDEX).TOG(T).SEL(3) = S(IND)
	ENDIF
C
C now modify selection status according to the inequality used, and
C whether this is a SELECT or DESELECT command
	IF (IQ(1,INEQ)) CLSSEL(INDEX).TOG(T).SEL(1) = SEL
	IF (IQ(2,INEQ)) CLSSEL(INDEX).TOG(T).SEL(2) = SEL
	IF (IQ(3,INEQ)) CLSSEL(INDEX).TOG(T).SEL(3) = SEL
C
C check if new toggle point is redundant (all three selection values
C same) - if so set DEL to 1
	DEL(IND) = 0
	IF ((CLSSEL(INDEX).TOG(T).SEL(1).EQV.SEL).AND.
     &      (CLSSEL(INDEX).TOG(T).SEL(2).EQV.SEL).AND.
     &      (CLSSEL(INDEX).TOG(T).SEL(3).EQV.SEL) ) DEL(IND) = 1
C
	TS(IND) = T	! preserve index of this toggle point
C
C for a range, repeat for second value, emulating <=
	IF (RANGE.AND.IND.EQ.1) THEN
	   IND = 2
	   INEQ = INEQ_LEQ
	   GOTO 25
	ENDIF
C
C now tidy up, removing unwanted toggle points, i.e. those made
C redundant by the inequality used, and possibly the ones modified
	IF (RANGE) THEN
C
C remove all toggles between TS(1) and TS(2)
	   DO 60 I=TS(2)+DEL(2),CLSSEL(INDEX).NTOG
	      CLSSEL(INDEX).TOG(I+TS(1)-TS(2)-DEL(1)-DEL(2)+1) =
     &					CLSSEL(INDEX).TOG(I)
60	   CONTINUE
	   CLSSEL(INDEX).NTOG =
     &		CLSSEL(INDEX).NTOG-(TS(2)-TS(1)-1+DEL(1)+DEL(2))
C
	ELSEIF (INEQ.EQ.INEQ_LSS.OR.
     &		INEQ.EQ.INEQ_LEQ) THEN
C
C remove all toggles to left of T (=TS(1) for these cases)
	   DO 70 I=T+DEL(1),CLSSEL(INDEX).NTOG
	      CLSSEL(INDEX).TOG(I-T-DEL(1)+1) = CLSSEL(INDEX).TOG(I)
70	   CONTINUE
	   CLSSEL(INDEX).NTOG = CLSSEL(INDEX).NTOG-T-DEL(1)+1
C
	ELSEIF (INEQ.EQ.INEQ_GTR.OR.
     &		INEQ.EQ.INEQ_GEQ) THEN
C
C remove all toggles to right of T (again =TS(1))
	   CLSSEL(INDEX).NTOG = T-DEL(1)
C
	ELSEIF (INEQ.EQ.INEQ_NEQ) THEN
C
C remove all toggles (possibly except T)
	   IF (DEL(1).EQ.0) THEN
	      CLSSEL(INDEX).TOG(1) = CLSSEL(INDEX).TOG(T)
	      CLSSEL(INDEX).NTOG = 1
	   ELSE
	      CLSSEL(INDEX).NTOG = 0
	   ENDIF
	ELSE
C
C leaves =, possibly remove T
	   IF (DEL(1).NE.0) THEN
	      DO 80 I=T+1,CLSSEL(INDEX).NTOG
	         CLSSEL(INDEX).TOG(I-1) = CLSSEL(INDEX).TOG(I)
80	      CONTINUE
	      CLSSEL(INDEX).NTOG = CLSSEL(INDEX).NTOG-1
	   ENDIF
	ENDIF
C
C If removed all toggle points, the set overall selection
	IF (CLSSEL(INDEX).NTOG.EQ.0) CLSSEL(INDEX).ALL = SEL
C
C definitely now in select mode
	CLSSEL(INDEX).SLCT = .TRUE.
	STORE_CLASS = .TRUE.		! success
C
999	RETURN
	END
