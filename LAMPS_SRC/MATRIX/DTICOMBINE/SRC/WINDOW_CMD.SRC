
	LOGICAL FUNCTION WINDOW_CMD()
C
***	MODULE	WINDOW_CMD
***	IDENT	06JL92
C
C	Copyright : Laser-Scan , Cambridge, England
C
CMOD	Add projection units + ENA/DISA ABSOLUTE	MWSR 24-Nov-1988
CMOD	To use origin offset values			 DRC 04-Nov-1988
CMOD	Changed for DTICOMBINE				 TJH 14-Oct-1987
CMOD	Added diagnostics				  SG 25-Apr-1991
C
C	Author    : D R Catlow
C	
C	Function to set the area of interest in the input DTM.
C	The routine interpretes the command line according to the
C	current UNITS setting.
C	The function checks that the window values are sensible,
C	and truncates if they fall outside the DTM bounds.
C
C	Function returns .TRUE. if successful.
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'	
	INCLUDE 'LSL$CMNDTI:DTIPAR.PAR'	! DTILIB parameters
	INCLUDE 'LSL$CMNDTI:DTIDEF.PAR'	! DTILIB parameters
C	
C Common:
	INCLUDE 'LSL$CMNDTI:DTIHDR.CMN'	! DTILIB common
	INCLUDE 'LSL$CMNDTI:DTIPROJ.CMN'
	INCLUDE 'LSL$CMNLSL:CMDCOM.CMN'	! DTILIB common
	INCLUDE	'LSL$CMNDTICOMBINE:CONTROL.CMN'
C
C W/s
	INTEGER*4	X1,Y1,X2,Y2	! window values in matrix units
	INTEGER*4	LLDEGS(4)	! window values in seconds
	LOGICAL		OK
C
C Function
	LOGICAL		READLL		! reads lat/long
C
C ......................................................................
C
	OK=.FALSE.			! assume failure
	IF (CURRENT_FILE.EQ.0) THEN		! no file opened?
	   CALL WRITEF(ERROR//'specifying DTI window')
	   CALL WRITEF('FILEx command must be used to open a DTI file first')
	ELSEIF (CMDRCT.NE.4.AND.WIN_UNITS(CURRENT_FILE).NE.UNITS_DEG) THEN
	   CALL WRITEF(ERROR//'specifying DTI window')
	   CALL WRITEF('Command requires 2 x,y coordinate pairs (SW and NE)')
	ELSE
	   OK = .TRUE.
	ENDIF
	IF (.NOT.OK) GOTO 60
	IF (DIAG) THEN
	   CALL WRITEF('Input Coords:')
	     CALL WRITEF('%TSouth-west: (%T%F ,%F%T)',REALAR(1),REALAR(2))
	     CALL WRITEF('%TNorth-east: (%T%F ,%F%T)',REALAR(3),REALAR(4))
	   CALL WRITEF('file details:')
	   CALL EXPAND('%TOrigin : (')
	     CALL APPEND('%T%F ,' , X_OFFSET(CURRENT_FILE))
	     CALL WRITAP('%F%T)'  , Y_OFFSET(CURRENT_FILE))
	   CALL EXPAND('%TGrid Size: (')
	     CALL APPEND('%T%F ,' , X_GRID(CURRENT_FILE))
	     CALL WRITAP('%F%T)'  , Y_GRID(CURRENT_FILE))
	   CALL EXPAND('%TMatrix Extent: (')
	     CALL APPEND('%T%I ,' , X_EXTENT(CURRENT_FILE))
	     CALL WRITAP('%I%T)'  , Y_EXTENT(CURRENT_FILE))
	   CALL EXPAND('Setting window using coordinate system: ')
	ENDIF
	GOTO (10,20,30,40,45), WIN_UNITS(CURRENT_FILE)
C
C----------------------------------------------------------------------
C	Matrix units
C
10	IF (DIAG) CALL WRITEF('MATRIX')
	X1=NINT(REALAR(1))
	Y1=NINT(REALAR(2))
	X2=NINT(REALAR(3))
	Y2=NINT(REALAR(4))
	GOTO 50
C
C----------------------------------------------------------------------
C	Metres
C
20	IF (DIAG) CALL WRITEF('METRES')
	IF (HAD_ABSOLUTE) THEN 
	   X1=NINT((REALAR(1)-X_OFFSET(CURRENT_FILE))/
     &					X_GRID(CURRENT_FILE))+1
	   Y1=NINT((REALAR(2)-Y_OFFSET(CURRENT_FILE))/
     &					Y_GRID(CURRENT_FILE))+1
	   X2=NINT((REALAR(3)-X_OFFSET(CURRENT_FILE))/
     &					X_GRID(CURRENT_FILE))+1
	   Y2=NINT((REALAR(4)-Y_OFFSET(CURRENT_FILE))/
     &					Y_GRID(CURRENT_FILE))+1
	ELSE
	   X1=NINT(REALAR(1)/X_GRID(CURRENT_FILE))+1
	   Y1=NINT(REALAR(2)/Y_GRID(CURRENT_FILE))+1
	   X2=NINT(REALAR(3)/X_GRID(CURRENT_FILE))+1
	   Y2=NINT(REALAR(4)/Y_GRID(CURRENT_FILE))+1
	ENDIF
	GOTO 50
C
C-----------------------------------------------------------------------
C	Seconds
C
30	IF (DIAG) CALL WRITEF('SECONDS')
	Y1=NINT(REALAR(1)*10)
	X1=NINT(REALAR(2)*10)
	Y2=NINT(REALAR(3)*10)
	X2=NINT(REALAR(4)*10)
	X1=((X1-LONREC(1,CURRENT_FILE))/LONINT(CURRENT_FILE))+1
	Y1=((Y1-LATREC(1,CURRENT_FILE))/LATINT(CURRENT_FILE))+1
	X2=((X2-LONREC(1,CURRENT_FILE))/LONINT(CURRENT_FILE))+1
	Y2=((Y2-LATREC(1,CURRENT_FILE))/LATINT(CURRENT_FILE))+1
	GOTO 50
C
C-----------------------------------------------------------------------
C	Degrees, Minutes & Second, Call READLL to convert to .1 seconds
C
40	IF (DIAG) CALL WRITEF('DEG MIN SEC')
	IF (READLL(LLDEGS,4)) THEN
	   CALL WRITEF('%S specifying DTI window',ERROR)
	   CALL WRITEF('Unable to use supplied LATLONG values')
	   GOTO 60
	ELSE
	   Y1=LLDEGS(1)*10
	   X1=LLDEGS(2)*10
	   Y2=LLDEGS(3)*10
	   X2=LLDEGS(4)*10
	   X1=((X1-LONREC(1,CURRENT_FILE))/LONINT(CURRENT_FILE))+1
	   Y1=((Y1-LATREC(1,CURRENT_FILE))/LATINT(CURRENT_FILE))+1
	   X2=((X2-LONREC(1,CURRENT_FILE))/LONINT(CURRENT_FILE))+1
	   Y2=((Y2-LATREC(1,CURRENT_FILE))/LATINT(CURRENT_FILE))+1
	ENDIF
	GOTO 50
C----------------------------------------------------------------------
C	Projection units
C
45	IF (DIAG) CALL WRITEF('PROJECTION')
	IF (HAD_ABSOLUTE) THEN 
	   X1=NINT((REALAR(1)-DTIPROJ_ORIGIN(1,CURRENT_FILE))
     &             /DTIPROJ_SAMPLE(1,CURRENT_FILE))+1
	   Y1=NINT((REALAR(2)-DTIPROJ_ORIGIN(2,CURRENT_FILE))
     &             /DTIPROJ_SAMPLE(2,CURRENT_FILE))+1
	   X2=NINT((REALAR(3)-DTIPROJ_ORIGIN(1,CURRENT_FILE))
     &             /DTIPROJ_SAMPLE(1,CURRENT_FILE))+1
	   Y2=NINT((REALAR(4)-DTIPROJ_ORIGIN(2,CURRENT_FILE))
     &             /DTIPROJ_SAMPLE(2,CURRENT_FILE))+1
	ELSE
	   X1=NINT(REALAR(1)/DTIPROJ_SAMPLE(1,CURRENT_FILE))+1
	   Y1=NINT(REALAR(2)/DTIPROJ_SAMPLE(2,CURRENT_FILE))+1
	   X2=NINT(REALAR(3)/DTIPROJ_SAMPLE(1,CURRENT_FILE))+1
	   Y2=NINT(REALAR(4)/DTIPROJ_SAMPLE(2,CURRENT_FILE))+1
	ENDIF
	GOTO 50
C
C----------------------------------------------------------------------
C	Are the window values sensible?
C	Does the NE coordinate exceed the SW coordinate

50	IF (DIAG) THEN
	   CALL WRITEF('matrix coords of resulting window')
	   CALL WRITEF('%TSouth-west: (%T%I ,%I%T)',X1,Y1)
	   CALL WRITEF('%TNorth-east: (%T%I ,%I%T)',X2,Y2)
	ENDIF
C
C	Check that start coordinates are within the DTM
C
	OK = .FALSE.
	IF(X1.LT.1.OR.X1.GT.X_EXTENT(CURRENT_FILE).OR.
     &     Y1.LT.1.OR.Y1.GT.Y_EXTENT(CURRENT_FILE).OR.
     &     X2.LT.1.OR.X2.GT.X_EXTENT(CURRENT_FILE).OR.
     &     Y2.LT.1.OR.Y2.GT.Y_EXTENT(CURRENT_FILE)) THEN
	      CALL WRITEF('%S Specifying command WINDOW',ERROR)
	      CALL WRITEF('Supplied values outside DTM bounds')
	ELSEIF ((X2.LE.X1).OR.(Y2.LE.Y1)) THEN
	   CALL WRITEF(ERROR//'specifying DTI window')
	   CALL WRITEF('NE coordinates should exceed SW coordinates')
	ELSE
	   OK = .TRUE.
	ENDIF
	IF (.NOT.OK) GOTO 60
C
	DTI_WINDOW_SWX(CURRENT_FILE) = X1	!transfer to common block
	DTI_WINDOW_SWY(CURRENT_FILE) = Y1
	DTI_WINDOW_NEX(CURRENT_FILE) = X2	
	DTI_WINDOW_NEY(CURRENT_FILE) = Y2
C
	WIN_SET(CURRENT_FILE)=.TRUE.		! set flag for window set OK
	WINDOW_CMD = .TRUE.			! success
	GOTO 70
C
60	WINDOW_CMD=.FALSE.
C
70	RETURN
	END
C
