reverse engineering OF 	EXPRESSION.SRC

IDENT 13MR89				SG
IDENT 17ap91				sg	26-4-91

note all <ERROR> lables cause immediate jump to 160


	initialisations
	take copy of string containing expression and uppercase it
	if first non-space character in file isn't '=' <ERROR>
20	initialise operator-found flag
30	read a character into CH,		if no more GOTO 160
	if CH is a '('
	   if no space on operator stack, <ERROR> 'expression too complex'
	   if too many levels of nesting  <ERROR>
	   push LBR token onto stack and increment levels_of_nesting
	endif
	unget character and attempt to read a real number
	if successful read then
	   if no space on value stack, <ERROR> 'expression too complex'
	   push number onto value stack and GOTO 20
	endif
	ignore any '+' at this stage since they are unary +'s
	if the character was a '-' or '~'
	   if no room on operator stack <ERROR>
	   if character was a '~'
	     set operator to be BNOT binary not
	     if the next character is a ~ set to logical not
	   else
	     operator = UNA 	(unary minus)
	   endif
	   push operator onto STACK and GOTO 20
	endif
	If the error below 50 was LSL__NONUM then
	   look for a function name using RDCOMM()
	   if nothing read <ERROR>
	   if what we read was a variable
	     push number token on operator stack
	     push variable token onto value stack
	     GOTO 60 and look for an operator
	   else
	     if fun was MAX, MIN or IFTHEN,
		insist on a '(' next, otherwise <ERROR>
		push start-of block token onto operator stack
		push start-of-block token onto bracket stack
	     endif
	     push function token onto operator stack
	   endif
	   GOTO 20
	endif
	if exception error in reading number <ERROR>
	<ERROR>

60	read a character		(if none <ERROR>)
	is character a ')'
	  if nothing on bracket stack, <ERROR>mismatched brackets
	  if top of bracket stack a LBR token
	     operator = RBR (right bracket)
	  else
	     operator = END (end of block)
	  endif
	  push operator token onto operator stack
	  pop token off bracket stack
	  GOTO 20
	endif
	if character not in set of valid operators  <ERROR>
	read the next character
	if the same as previous operator found
	  check that is a valid operator with repeating symbols
	elseif '='
	  check that is a valid operator with trailing =
	elseif '>'
	  check that previos symbol was '<'
	else	
	  not a dual symbol operator
	endif
	if ',' was found,
	   if inside a block (check that the top of  Bracket stack is a ENDB)
	     set operator token to be CMA
	   else
	     <ERROR>
	   endif           
	endif
	check that operator stack not overflowing
	push operator onto operator stack
	GOTO 20

150	convert to reverse polish and store success in IERR
	decrement ARGNUM
	if error detected in IERR   show error
	set value of EXPRESSION = TRUE
160	cleanup and get out
