C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1995-01-19 17:10:24.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        INTEGER*4 FUNCTION ASK_ORIGIN(DTILUN)
C
***	MODULE	ASK_ORIGIN
***	IDENT	19JA95
C
C 	Copyright Laser-Scan Ltd., Cambridge, England
C 	Author  : D R Catlow
C
C	Created : 06 October 1987
C	Modified:
C
C	Function for DTITRANS to request the matrix origin values
C	(ie. SW corner)	for the file opened on DTILUN.
C	The values are written to the relevant variables in
C	DTIPROJ.
C	Only called for input (source) DTI file - origin of
C	output is determined as part of transformation operation.
C
C----------------------------------------------------------------------
	IMPLICIT NONE
C
***	COMMON		/LSL$CMNLSL:EXCEPTION/
***	COMMON		/LSL$CMNLSL:EXPC/
***	PARAMETER	/LSL$CMNLSL:LSLLIBMSG/
C
***	COMMON		/LSL$CMNDTI:DTIPROJ/
***	COMMON		/LSL$CMNDTI:DTIHDR/
C
***	COMMON		/HERE:DTITRANS/
***	PARAMETER	/HERE:DTITRANSMSG/
C
C	Arguments:
	INTEGER*4	DTILUN		!which DTI file
C
C	Locals:
	REAL*8		X,Y		!values input read from terminal
	REAL*8		YY		!copy of Y
C
	INTEGER*4	UNITS_INDEX	!units index
	INTEGER*4	J,I		!counter
	INTEGER*4	LEN		!number of characters read
	INTEGER*4	NOCHAR		!length of prompt and default
	INTEGER*4	ERROR		!system error code
	BYTE		ICH		!single character
C
C	Functions:
	INTEGER*4	SIGCHS		!determines no. of sign. chs.
	INTEGER*4	EXPAND		!expands into EXPBUF
	INTEGER*4	TTRSTR		!read response from terminal
	INTEGER*4	RDDBLE		!read REAL*8
	INTEGER*4       RDCHS		!read a single character
C
	CHARACTER*80	STRNG
	INTEGER*4	STRNL
	CHARACTER*80	BLANK		!blank characters
	DATA		(BLANK(I:I),I=1,80)/80*' '/
C
	REAL*8		PI
	PARAMETER	(PI=3.14159265358979323846D0)
C
C----------------------------------------------------------------------
C----------------------------------------------------------------------
C	Assume success
C
50	ASK_ORIGIN=DTRANS__NORMAL
C
C----------------------------------------------------------------------
C 	Set up defaults from common, remembering to reverse the X
C	and Y if we are dealing with LatLong.
C
	IF (DTIPROJ_PROJECTION(DTILUN).EQ.100) THEN
	   X = DTIPROJ_ORIGIN(2,DTILUN)
	   Y = DTIPROJ_ORIGIN(1,DTILUN)
C
	ELSE
	   X = DTIPROJ_ORIGIN(1,DTILUN)
	   Y = DTIPROJ_ORIGIN(2,DTILUN)
	ENDIF
C
	YY=Y
C
C----------------------------------------------------------------------
C	Prompt for values
C
	CALL WRITEF(' ')
100	IF (DTIPROJ_PROJECTION(DTILUN).EQ.100) THEN
	   CALL EXPAND('Define local origin as Latitude Longitude '//
     &	               '(%^D%F0.3, %F0.3): ',X,Y)
	ELSE
	   CALL EXPAND('Define local origin as Eastings Northings '//
     &	               '(%^D%F0.3, %F0.3): ',X,Y)
	ENDIF
C
C----------------------------------------------------------------------
C	Check response
C
	ASK_ORIGIN=TTRSTR(,LEN,EXPDSC,ERROR)
	IF (.NOT.ASK_ORIGIN) THEN
	   IF (ASK_ORIGIN.NE.LSL__EOF) THEN
	      CALL LSL_PUTMSG(ERROR)
C
	   ELSE
	      ASK_ORIGIN=DTRANS__EOF
	      CALL LSL_PUTMSG(ASK_ORIGIN)
	   ENDIF
	   GOTO 999
	ENDIF
C
	IF (LEN.EQ.0) GOTO 250	!take default 
C
C----------------------------------------------------------------------
	CALL BSLN
C
	IF(RDCHS(ICH)) GOTO 100
C
C	Check for ? and print helpful message
C
	IF(ICH.EQ.'?') THEN
	   IF(DTIPROJ_PROJECTION(DTILUN).EQ.100) THEN
	      CALL WRITEF('Enter the Latitude and Longitude of the '//
     &	                  'origin as two real numbers')
	   ELSE
	      CALL WRITEF('Enter the Eastings and Northings of the '//
     &	                  'origin as two real numbers')
	   ENDIF
	   GOTO 100
	ENDIF
C
	CALL BSCH
C
C 	Read the first value
C
	IF (RDDBLE(X)) THEN
	   IF (ERRNUM.EQ.LSL__HADEXCP) THEN
	      CALL LSL_PUTMSG(LSL_EXCP)
	   ELSE
	      CALL LSL_PUTMSG(ERRNUM)
	   ENDIF
	   GOTO 100
	ENDIF	
C
C	Check for both values on same line
	IF (.NOT.RDDBLE(Y)) GOTO 250
C
C 	check for end of line
C
	IF (.NOT.RDCHS(ICH)) THEN
	   CALL LSL_PUTMSG(DTRANS__UNEXPCH,ICH)
	   GOTO 100
	ENDIF
C
C----------------------------------------------------------------------
C	Set up prompt for second value
C
160	IF (DTIPROJ_PROJECTION(DTILUN).NE.100) THEN
	   CALL EXPAND('Northings (%^D%F0.3): ',YY)
	ELSE
	   CALL EXPAND('Longitude (%^D%F0.3): ',YY)
	ENDIF
C
	ASK_ORIGIN=TTRSTR(,LEN,EXPDSC,ERROR)
	IF (.NOT.ASK_ORIGIN) THEN
	   IF (ASK_ORIGIN.NE.LSL__EOF) THEN
	      CALL LSL_PUTMSG(ERROR)
	      GOTO 999			! quit
	   ELSE
	      CALL LSL_PUTMSG(DTRANS__REENTER)
	      GOTO 100			! start again
	   ENDIF
	ENDIF
C
	IF (LEN.EQ.0) GOTO 250		! take default for 2nd value
C
	CALL BSLN
C
C	Read the second value
C
	IF (RDDBLE(Y)) THEN
	   IF (ERRNUM.EQ.LSL__HADEXCP) THEN
	      CALL LSL_PUTMSG(LSL_EXCP)
	   ELSE
	      CALL LSL_PUTMSG(ERRNUM)
	   ENDIF
	   GOTO 100
	ENDIF
C
C 	check for end of line
C
	IF (.NOT.RDCHS(ICH)) THEN
	   CALL LSL_PUTMSG(DTRANS__UNEXPCH,ICH)
	   GOTO 100
	ENDIF
C
C----------------------------------------------------------------------
C 	Check for sensible latlong values 
C	 - first the latitude - in range -90 -> +90
C
250	IF (DTIPROJ_PROJECTION(DTILUN).EQ.100) THEN
	   STRNL=0
	   IF     (DTIPROJ_UNITS(DTILUN).EQ.5
     &            .AND.ABS(X).GT.PI/2.0) THEN
	      STRNL=EXPAND('%WS%^D%F10.7',STRNG,X)
C
	   ELSEIF (DTIPROJ_UNITS(DTILUN).EQ.3
     &            .AND.ABS(X).GT.324000.0) THEN
	      STRNL=EXPAND('%WS%^D%F10.3',STRNG,X)
C
	   ELSEIF (DTIPROJ_UNITS(DTILUN).EQ.4
     &            .AND.ABS(X).GT.90) THEN
	      STRNL=EXPAND('%WS%^D%F8.3',STRNG,X)
C
	   ELSEIF (DTIPROJ_UNITS(DTILUN).EQ.110
     &            .AND.ABS(X).GT.3240000.0) THEN
	      STRNL=EXPAND('%WS%^D%F10.2',STRNG,X)
	   ENDIF	      
C
	   IF (STRNL.GT.0) THEN
	      CALL LSL_PUTMSG(DTRANS__ILLEGLAT,STRNG(1:STRNL))
	      CALL LSL_PUTMSG(DTRANS__REENTER)
	      GOTO 50
	   ENDIF
C
C 	And the longitude - in range -180 -> +180
C
	   STRNL=0
	   IF     (DTIPROJ_UNITS(DTILUN).EQ.5
     &            .AND.ABS(Y).GT.PI) THEN
	      STRNL=EXPAND('%WS%^D%F10.7',STRNG,Y)
C
	   ELSEIF (DTIPROJ_UNITS(DTILUN).EQ.3
     &            .AND.ABS(Y).GT.648000.0) THEN
	      STRNL=EXPAND('%WS%^D%F10.3',STRNG,Y)
C
	   ELSEIF (DTIPROJ_UNITS(DTILUN).EQ.4
     &            .AND.ABS(Y).GT.180.0) THEN
	      STRNL=EXPAND('%WS%^D%F8.3',STRNG,Y)
C
	   ELSEIF (DTIPROJ_UNITS(DTILUN).EQ.110
     &            .AND.ABS(Y).GT.6480000.0) THEN
	      STRNL=EXPAND('%WS%^D%F10.2',STRNG,Y)
	   ENDIF	      
C
	   IF (STRNL.GT.0) THEN
	      CALL LSL_PUTMSG(DTRANS__ILLEGLONG,STRNG(1:STRNL))
	      CALL LSL_PUTMSG(DTRANS__REENTER)
	      GOTO 50
	   ENDIF
C
C 	Transfer these values to common, remembering to switch them
C	around if Latlong
C
	   DTIPROJ_ORIGIN(1,DTILUN) = Y
	   DTIPROJ_ORIGIN(2,DTILUN) = X
	   X_OFFSET(DTILUN) = Y
	   Y_OFFSET(DTILUN) = X
C
	ELSE
	   DTIPROJ_ORIGIN(1,DTILUN) = X
	   DTIPROJ_ORIGIN(2,DTILUN) = Y
	   X_OFFSET(DTILUN) = X
	   Y_OFFSET(DTILUN) = Y
	ENDIF
C
C----------------------------------------------------------------------
999	RETURN
	END
C
