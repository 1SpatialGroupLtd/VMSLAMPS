C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-07-19 12:25:42.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        INTEGER*4 FUNCTION SAMPLE (DTILUN,METHOD,
     &                             XPOS,YPOS,SAMPLE_VALUE) 
C 
***	MODULE	SAMPLE
***	IDENT	19JL91
C
C 	Copyright Laser-Scan Laboratories Ltd.,Cambridge,England
C 	Author  : D R Catlow
C	Created : 21 April 1988
C	Modified:
C
C	Function: 
C	To determine the value of sample point XPOS,YPOS.
C	The value is calculated using the values in the DTI file 
C	opened on DTILUN.
C	The algorithm used is determined by the argument METHOD:
C	METHOD = 1	Nearest neighbour
C	METHOD = 2	Bi-linear Interpolation
C	The sample value may be calculated as an byte, integer or
C	real value depending on the DTI data type.
C
C----------------------------------------------------------------------
C
	IMPLICIT NONE
C
C	DTILIB commons
***	COMMON   /LSL$CMNDTI:DTIHDR/
***	COMMON   /LSL$CMNDTI:DTIPROJ/
C
***	COMMON   /HERE:DTITRANS/
C
***	PARAMETER/LSL$CMNDTI:DTIPAR/
***	PARAMETER/LSL$CMNDTI:DTILIBMSG/
C
C
C Arguments:
	INTEGER*4	DTILUN		  !LUN on which file is opened
	INTEGER*4	METHOD		  !Sampling method
	REAL*8		XPOS		  !X coordinate position
	REAL*8		YPOS		  !Y coordinate position
	REAL		SAMPLE_VALUE	  !Sample value
C
C Locals:
	REAL		REAL_SAMPLE_VALUE(2) !sample values 
	INTEGER*4	ERROR		  !system error code
	INTEGER*4	INT_XPOS	  !integerised value XPOS
	INTEGER*4	INT_YPOS	  !integerised value YPOS
C
C	Temporary values
	REAL		RVALUE(4)
	INTEGER*4	LVALUE(4)	
	INTEGER*2	WVALUE(4)	  !4 surrounding matrix values
	BYTE		BVALUE(4)
	INTEGER*2	UNSIGNED_BVAL
	BYTE		BVAL
	EQUIVALENCE	(BVAL,UNSIGNED_BVAL)
C
C-----------------------------------------------------------------------
C
	REAL		X_DIST(2)	  !X distance of sample point
C					  !with respect to surr. nodes
	REAL		Y_DIST(2)	  !Y distance of sample point
C					  !with respect to surr. nodes
	REAL		SQUARE_DIST(4)	  !4 squared distances
	INTEGER*4	I		  !counter
C
C Functions:
	INTEGER*4	DTI_READ_DATA	  !to read a single data value
	INTEGER*4	DTI_COPY_DATA	  !to read a no. of data values
C
C----------------------------------------------------------------------
C Nearest neighbour method
	IF(METHOD.EQ.1)THEN
C
C Translate XPOS and YPOS into a node value using NINT
	  INT_XPOS = NINT(XPOS/DTIPROJ_SAMPLE(1,DTILUN))+1
	  INT_YPOS = NINT(YPOS/DTIPROJ_SAMPLE(2,DTILUN))+1
C
C Check if either XPOS or YPOS coordinates lie outside the
C bounds of the DTI area.  If they do we return a null
C value in SAMPLE_VALUE.
C
100	  IF(INT_XPOS.LT.1.OR.INT_XPOS.GT.X_EXTENT(DTILUN).OR.
     &       INT_YPOS.LT.1.OR.INT_YPOS.GT.Y_EXTENT(DTILUN))THEN
	    SAMPLE_VALUE=NULL_VALUE(DATA_TYPE(DTILUN))
	    GOTO 900
	  ENDIF
C
C Retrieve the value at this position.
	  IF     (DATA_TYPE(DTILUN).EQ.DATA_REAL)THEN
	    SAMPLE=DTI_READ_DATA
     &             (DTILUN,RVALUE(1),INT_XPOS,INT_YPOS)
	           SAMPLE_VALUE=RVALUE(1)
	  ELSE IF(DATA_TYPE(DTILUN).EQ.DATA_LONG)THEN
	    SAMPLE=DTI_READ_DATA
     &             (DTILUN,LVALUE(1),INT_XPOS,INT_YPOS)
                   SAMPLE_VALUE=FLOAT(LVALUE(1))
	  ELSE IF(DATA_TYPE(DTILUN).EQ.DATA_WORD)THEN
	    SAMPLE=DTI_READ_DATA
     &             (DTILUN,WVALUE(1),INT_XPOS,INT_YPOS)
                   SAMPLE_VALUE=FLOAT(WVALUE(1))
	  ELSE IF(DATA_TYPE(DTILUN).EQ.DATA_BYTE)THEN
	    SAMPLE=DTI_READ_DATA
     &             (DTILUN,BVAL,INT_XPOS,INT_YPOS)
		   SAMPLE_VALUE=FLOAT(UNSIGNED_BVAL)
	  ENDIF
	  GOTO 999
C
C-----------------------------------------------------------------------
C
	ELSEIF(METHOD.EQ.2)THEN
C
C Translate XPOS and YPOS into a node value using INT
	  INT_XPOS = INT(XPOS/DTIPROJ_SAMPLE(1,DTILUN))+1
	  INT_YPOS = INT(YPOS/DTIPROJ_SAMPLE(2,DTILUN))+1
C
C Check if either INT_XPOS or INT_YPOS lie outside the
C bounds of the DTI area.  If they do we return a null
C value in SAMPLE_VALUE.
C
	  IF(INT_XPOS.LT.1.OR.INT_XPOS.GT.X_EXTENT(DTILUN).OR.
     &       INT_YPOS.LT.1.OR.INT_YPOS.GT.Y_EXTENT(DTILUN))THEN
	    SAMPLE_VALUE=NULL_VALUE(DATA_TYPE(DTILUN))
	    GOTO 900
	  ENDIF
C
C Test if we are actually on a node in the matrix ie. are XPOS
C and YPOS exactly divisible by the sample interval.
C In which case no interpolation is required.
	  IF((XPOS/DTIPROJ_SAMPLE(1,DTILUN)+1).EQ.INT_XPOS.AND.
     &       (YPOS/DTIPROJ_SAMPLE(2,DTILUN)+1).EQ.INT_YPOS)THEN
	     GOTO 100
	  ENDIF
C
C Check for special case of one of the values being equal to the
C last row or column
	  IF(INT_XPOS.EQ.X_EXTENT(DTILUN))INT_XPOS=INT_XPOS-1
	  IF(INT_YPOS.EQ.Y_EXTENT(DTILUN))INT_YPOS=INT_YPOS-1
C	
C Retrieve the 4 surrounding values
	  IF      (DATA_TYPE(DTILUN).EQ.DATA_REAL)THEN
	     SAMPLE=DTI_COPY_DATA(DTILUN,
     &                            RVALUE,	!array of values
     &                            .FALSE.,	!copy from data area
     &                            INT_XPOS,	!start x
     &                            INT_YPOS,	!start y
     &                            2,		!2 columns
     &                            2,		!2 rows
     &                            ERROR)	!system error
	   ELSE IF(DATA_TYPE(DTILUN).EQ.DATA_LONG)THEN
	     SAMPLE=DTI_COPY_DATA(DTILUN,
     &                            LVALUE,	!array of values
     &                            .FALSE.,	!copy from data area
     &                            INT_XPOS,	!start x
     &                            INT_YPOS,	!start y
     &                            2,		!2 columns
     &                            2,		!2 rows
     &                            ERROR)	!system error
	   ELSE IF(DATA_TYPE(DTILUN).EQ.DATA_WORD)THEN
	     SAMPLE=DTI_COPY_DATA(DTILUN,
     &                            WVALUE,	!array of values
     &                            .FALSE.,	!copy from data area
     &                            INT_XPOS,	!start x
     &                            INT_YPOS,	!start y
     &                            2,		!2 columns
     &                            2,		!2 rows
     &                            ERROR)	!system error
	   ELSE IF(DATA_TYPE(DTILUN).EQ.DATA_BYTE)THEN
	     SAMPLE=DTI_COPY_DATA(DTILUN,
     &                            BVALUE,	!array of values
     &                            .FALSE.,	!copy from data area
     &                            INT_XPOS,	!start x
     &                            INT_YPOS,	!start y
     &                            2,		!2 columns
     &                            2,		!2 rows
     &                            ERROR)	!system error
	   ENDIF
C
	   IF(.NOT.SAMPLE)THEN
	      CALL LSL_PUTMSG(SAMPLE)
              GOTO 999
	   ENDIF
C
C Check for any null values.  
C This presents a problem when dealing with byte files, 
C since 0 may in fact be valid.
C  Solution adopted is that if INT_XPOS,INT_YPOS is 0,
Cthen 0 is returned without carrying out any interpolation.
C
	   IF (DATA_TYPE(DTILUN).EQ.DATA_BYTE)THEN
	      IF(BVALUE(1).EQ.NULL_VALUE(1))THEN
	        SAMPLE_VALUE=0.0
	        GOTO 900
	      ENDIF
C
	   ELSE IF(DATA_TYPE(DTILUN).EQ.DATA_REAL)THEN
	      IF(RVALUE(1).EQ.NULL_VALUE(4).OR.
     &           RVALUE(2).EQ.NULL_VALUE(4).OR.
     &           RVALUE(3).EQ.NULL_VALUE(4).OR.
     &           RVALUE(4).EQ.NULL_VALUE(4))THEN
	         SAMPLE_VALUE=NULL_VALUE(4)
	         GOTO 900
	      ENDIF
C
	   ELSE IF(DATA_TYPE(DTILUN).EQ.DATA_LONG)THEN
	      IF(LVALUE(1).EQ.NULL_VALUE(3).OR.
     &           LVALUE(2).EQ.NULL_VALUE(3).OR.
     &           LVALUE(3).EQ.NULL_VALUE(3).OR.
     &           LVALUE(4).EQ.NULL_VALUE(3))THEN
	         SAMPLE_VALUE=NULL_VALUE(3)
	         GOTO 900
	      ENDIF
C
	   ELSE IF(DATA_TYPE(DTILUN).EQ.DATA_WORD)THEN
	      IF(WVALUE(1).EQ.NULL_VALUE(2).OR.
     &           WVALUE(2).EQ.NULL_VALUE(2).OR.
     &           WVALUE(3).EQ.NULL_VALUE(2).OR.
     &           WVALUE(4).EQ.NULL_VALUE(2))THEN
	         SAMPLE_VALUE=NULL_VALUE(2)
	         GOTO 900
	      ENDIF
	   ENDIF
C
C--------------------------------------------------------------------
C Test if all the values are the same
C
	   IF (DATA_TYPE(DTILUN).EQ.DATA_REAL)THEN
	      IF(ABS(RVALUE(1)-RVALUE(2)).LT.001.AND.
     &           ABS(RVALUE(1)-RVALUE(3)).LT.001.AND.
     &           ABS(RVALUE(1)-RVALUE(4)).LT.001)THEN
                 SAMPLE_VALUE=RVALUE(1)
	         GOTO 900
	      ENDIF
	   ELSE IF(DATA_TYPE(DTILUN).EQ.DATA_LONG)THEN
	      IF(LVALUE(1).EQ.LVALUE(2).AND.
     &           LVALUE(1).EQ.LVALUE(3).AND.
     &           LVALUE(1).EQ.LVALUE(4))THEN
	         SAMPLE_VALUE=FLOAT(LVALUE(1))
	         GOTO 900
	      ELSE
	         RVALUE(1)=LVALUE(1)
	         RVALUE(2)=LVALUE(2)
	         RVALUE(3)=LVALUE(3)
	         RVALUE(4)=LVALUE(4)
	      ENDIF
	   ELSE IF(DATA_TYPE(DTILUN).EQ.DATA_WORD)THEN
	      IF(WVALUE(1).EQ.WVALUE(2).AND.
     &           WVALUE(1).EQ.WVALUE(3).AND.
     &           WVALUE(1).EQ.WVALUE(4))THEN
	         SAMPLE_VALUE=FLOAT(WVALUE(1))
	         GOTO 900
	      ELSE
	         RVALUE(1)=WVALUE(1)
	         RVALUE(2)=WVALUE(2)
	         RVALUE(3)=WVALUE(3)
	         RVALUE(4)=WVALUE(4)
	      ENDIF
	   ELSE IF(DATA_TYPE(DTILUN).EQ.DATA_BYTE)THEN
	      IF(BVALUE(1).EQ.BVALUE(2).AND.
     &           BVALUE(1).EQ.BVALUE(3).AND.
     &           BVALUE(1).EQ.BVALUE(4))THEN
	         BVAL=BVALUE(1)
	         SAMPLE_VALUE=FLOAT(UNSIGNED_BVAL)
	         GOTO 900
	      ELSE
	         DO 150 I=1,4
	            BVAL=BVALUE(I)
	            RVALUE(I)=FLOAT(UNSIGNED_BVAL)
150              CONTINUE
	      ENDIF	    
	   ENDIF
C
C-------------------------------------------------------------------
C Calculate the 4 squared distances
C
	   X_DIST(1)=XPOS-((INT_XPOS-1)*DTIPROJ_SAMPLE(1,DTILUN))
	   X_DIST(2)=DTIPROJ_SAMPLE(1,DTILUN)-X_DIST(1)
	   Y_DIST(1)=YPOS-((INT_YPOS-1)*DTIPROJ_SAMPLE(2,DTILUN))
	   Y_DIST(2)=DTIPROJ_SAMPLE(2,DTILUN)-Y_DIST(1)
C	  
	   SQUARE_DIST(1)=X_DIST(1)*X_DIST(1)+Y_DIST(1)*Y_DIST(1)
	   SQUARE_DIST(2)=X_DIST(1)*X_DIST(1)+Y_DIST(2)*Y_DIST(2)
	   SQUARE_DIST(3)=X_DIST(2)*X_DIST(2)+Y_DIST(1)*Y_DIST(1)
	   SQUARE_DIST(4)=X_DIST(2)*X_DIST(2)+Y_DIST(2)*Y_DIST(2)
C
C Calculate the weighted average
	   REAL_SAMPLE_VALUE(1)=0.0
	   REAL_SAMPLE_VALUE(2)=0.0
C
	   DO 200 I=1,4
	     REAL_SAMPLE_VALUE(1)=REAL_SAMPLE_VALUE(1)+
     &       (RVALUE(I)/SQUARE_DIST(I))
	     REAL_SAMPLE_VALUE(2)=REAL_SAMPLE_VALUE(2)+
     &       (1.0/SQUARE_DIST(I))
200	   CONTINUE
C
           SAMPLE_VALUE=REAL_SAMPLE_VALUE(1)/REAL_SAMPLE_VALUE(2)
	ENDIF
C
C-----------------------------------------------------------------------
C Signal success
900	SAMPLE=DTI__NORMAL
C
C-----------------------------------------------------------------------
999	RETURN
	END
C
