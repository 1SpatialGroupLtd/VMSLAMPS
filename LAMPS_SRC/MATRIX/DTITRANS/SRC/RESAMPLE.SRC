C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-05-11 14:29:06.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        INTEGER*4 FUNCTION RESAMPLE(DTILUN,METHOD,SAMPLE_VALUE,
     &                              XPOS,YPOS)
C
***	MODULE	RESAMPLE
***	IDENT	04MY88
C
C 	Copyright Laser-Scan Laboratories Ltd.,Cambridge,England
C 	Author  : D R Catlow
C	Created : 25 September 1987
C	Modified:
C
C	Function to determine the value of point XPOS,YPOS.
C	The sample value is calculated using the values in the DTI file 
C	opened on DTILUN.
C	The algorithm used is determined by the argument METHOD:
C	METHOD = 1	Nearest neighbour
C	METHOD = 2	Linear Interpolation
C
C----------------------------------------------------------------------
	IMPLICIT NONE
C
C	DTILIB commons
***	COMMON   /LSL$CMNDTI:DTIHDR/
***	COMMON   /LSL$CMNDTI:DTIPROJ/
***	PARAMETER/LSL$CMNDTI:DTIPAR/
***	PARAMETER/LSL$CMNDTI:DTILIBMSG/
C
***	COMMON   /HERE:DTITRANS/
C
C Arguments:
	INTEGER*4	DTILUN		  !LUN on which DTI file is opened
	INTEGER*4	METHOD		  !Sampling method
	REAL		SAMPLE_VALUE	  !Sample value
	REAL		XPOS		  !X coordinate position
	REAL		YPOS		  !Y coordinate position
C
C Locals:
	REAL		          VALUE(4)
	REAL		REAL_VAL, REAL_VALUE(4)
	INTEGER*4	LONG_VAL, LONG_VALUE(4)
	INTEGER*2	WORD_VAL, WORD_VALUE(4)
	BYTE		BYTE_VAL, BYTE_VALUE(4)
	INTEGER*2	UNSIGNED_BYTE_VAL,
     &			UNSIGNED_BYTE_VALUE(4)
C
	EQUIVALENCE	( REAL_VALUE, WORD_VALUE, 
     &			  UNSIGNED_BYTE_VALUE, LONG_VALUE )
C
C
	REAL		REAL_SAMPLE_VALUE(2) !sample values
	INTEGER*4	IERR		  !function return
	INTEGER*4	ERROR		  !system error code
	INTEGER*4	INT_XPOS	  !integerised value XPOS
	INTEGER*4	INT_YPOS	  !integerised value YPOS
	REAL		X_DIST(2)	  !X distance of sample point
C					  !with respect to surr. nodes
	REAL		Y_DIST(2)	  !Y distance of sample point
C					  !with respect to surr. nodes
	REAL		SQUARE_DIST(4)	  !4 squared distances
	INTEGER*4	I		  !counter
C
C Functions:
	INTEGER*4	DTI_READ_DATA	  !to read a single data value
	INTEGER*4	DTI_COPY_DATA	  !to read a number of data values
C
C----------------------------------------------------------------------
C----------------------------------------------------------------------
	IF(METHOD.EQ.2)THEN
C	Translate XPOS and YPOS into a node value using INT
C
	  INT_XPOS=INT(XPOS/DTIPROJ_SAMPLE(1,DTILUN))+1
	  INT_YPOS=INT(YPOS/DTIPROJ_SAMPLE(2,DTILUN))+1
C
C	  Test if we are actually on a node in the matrix ie. are XPOS
C	  and YPOS exactly divisible by the sample interval.
C	  In which case no interpolation is required.
C
	  IF ((XPOS/DTIPROJ_SAMPLE(1,DTILUN)+1).EQ.INT_XPOS.AND.
     &        (YPOS/DTIPROJ_SAMPLE(2,DTILUN)+1).EQ.INT_YPOS)THEN
	       IF (DATA_TYPE(DTILUN).EQ.1) THEN
 	         RESAMPLE=DTI_READ_DATA(DTILUN,BYTE_VAL,INT_XPOS,INT_YPOS)
		 UNSIGNED_BYTE_VAL = BYTE_VAL
		 IF ( UNSIGNED_BYTE_VAL .LT. 0 )
     &		    UNSIGNED_BYTE_VAL = UNSIGNED_BYTE_VAL + 256
	         SAMPLE_VALUE = UNSIGNED_BYTE_VAL
	       ELSE IF (DATA_TYPE(DTILUN).EQ.2) THEN
 	         RESAMPLE=DTI_READ_DATA(DTILUN,WORD_VAL,INT_XPOS,INT_YPOS)
	         SAMPLE_VALUE = REAL(WORD_VAL)
	       ELSE IF (DATA_TYPE(DTILUN).EQ.3) THEN
 	         RESAMPLE=DTI_READ_DATA(DTILUN,LONG_VAL,INT_XPOS,INT_YPOS)
	         SAMPLE_VALUE = REAL(LONG_VAL)
	       ELSE
 	         RESAMPLE=DTI_READ_DATA(DTILUN,SAMPLE_VALUE,
     &			  		INT_XPOS,INT_YPOS)
	       ENDIF
	     GOTO 999
	  ENDIF
	ENDIF
C
C----------------------------------------------------------------------------
C	Check if either XPOS and YPOS coordinates lie within the bounds
C	of the DTI area.  If they do we return a null value in VALUE.
	IF(METHOD.EQ.1)THEN
C
C	  Translate XPOS and YPOS into a node value using NINT
C
	  INT_XPOS=NINT(XPOS/DTIPROJ_SAMPLE(1,DTILUN))
	  INT_YPOS=NINT(YPOS/DTIPROJ_SAMPLE(2,DTILUN))
C
	  IF(INT_XPOS.LT.1.OR.INT_XPOS.GT.X_EXTENT(DTILUN).OR.
     &       INT_YPOS.LT.1.OR.INT_YPOS.GT.Y_EXTENT(DTILUN))THEN
	     SAMPLE_VALUE = NULL_VALUE(DATA_TYPE(DTILUN))	!outside
	     GOTO 900
	  ENDIF
	ENDIF
C
	IF(METHOD.EQ.2)THEN
C
	  IF(INT_XPOS.LT.1.OR.INT_XPOS.GT.X_EXTENT(DTILUN).OR.
     &       INT_YPOS.LT.1.OR.INT_YPOS.GT.Y_EXTENT(DTILUN))THEN
	     SAMPLE_VALUE = NULL_VALUE(DATA_TYPE(DTILUN))	!outside
	     GOTO 900
	  ENDIF
	ENDIF
C
C----------------------------------------------------------------------
C	Nearest neighbour method
C
	IF(METHOD.EQ.1)THEN
	  IF (DATA_TYPE(DTILUN).EQ.1) THEN
	    RESAMPLE=DTI_READ_DATA(DTILUN,BYTE_VAL,INT_XPOS,INT_YPOS)
	    UNSIGNED_BYTE_VAL = BYTE_VAL
	    IF ( UNSIGNED_BYTE_VAL .LT. 0 )
     &		 UNSIGNED_BYTE_VAL = UNSIGNED_BYTE_VAL + 256
	    SAMPLE_VALUE = UNSIGNED_BYTE_VAL
	  ELSE IF (DATA_TYPE(DTILUN).EQ.2) THEN
	    RESAMPLE=DTI_READ_DATA(DTILUN,WORD_VAL,INT_XPOS,INT_YPOS)
	    SAMPLE_VALUE = REAL(WORD_VAL)
	  ELSE IF (DATA_TYPE(DTILUN).EQ.3) THEN
	    RESAMPLE=DTI_READ_DATA(DTILUN,LONG_VAL,INT_XPOS,INT_YPOS)
	    SAMPLE_VALUE = REAL(LONG_VAL)
	  ELSE 
	    RESAMPLE=DTI_READ_DATA(DTILUN,SAMPLE_VALUE,INT_XPOS,INT_YPOS)
	  ENDIF
	  GOTO 999
	ENDIF	  
C
C-----------------------------------------------------------------------
C	Linear interpolation using the surrounding 4 data values
	IF(METHOD.EQ.2)THEN
C
C	   Check for special case of one of the values being equal on the
C	   last row or column
C
	   IF(INT_XPOS.EQ.X_EXTENT(DTILUN))INT_XPOS=INT_XPOS-1
	   IF(INT_YPOS.EQ.Y_EXTENT(DTILUN))INT_YPOS=INT_YPOS-1
C	
C	   Retrieve the 4 surrounding values
C
	   IF (DATA_TYPE(DTILUN).EQ.1) THEN
	      RESAMPLE=DTI_COPY_DATA ( DTILUN, BYTE_VALUE, .FALSE.,
     &                                INT_XPOS, INT_YPOS, 2, 2, ERROR )
	      DO 10 I = 1, 4
	      UNSIGNED_BYTE_VALUE(I) = BYTE_VALUE(I)
	      IF ( UNSIGNED_BYTE_VALUE(I).LT.0 )
     &		 UNSIGNED_BYTE_VALUE(I) = UNSIGNED_BYTE_VALUE(I) + 256
10	      VALUE(I) = UNSIGNED_BYTE_VALUE(I)
C
	   ELSE IF (DATA_TYPE(DTILUN).EQ.2) THEN
	      RESAMPLE=DTI_COPY_DATA ( DTILUN, WORD_VALUE, .FALSE.,
     &                                INT_XPOS, INT_YPOS, 2, 2, ERROR )
	      DO 20 I = 1, 4
20	      VALUE(I) = REAL(WORD_VALUE(I))
C
	   ELSE IF (DATA_TYPE(DTILUN).EQ.3) THEN
	      RESAMPLE=DTI_COPY_DATA ( DTILUN, LONG_VALUE, .FALSE.,
     &                                INT_XPOS, INT_YPOS, 2, 2, ERROR )
	      DO 30 I = 1, 4
30	      VALUE(I) = REAL(WORD_VALUE(I))
C
	   ELSE IF (DATA_TYPE(DTILUN).EQ.4) THEN
	     RESAMPLE=DTI_COPY_DATA ( DTILUN, REAL_VALUE, .FALSE.,
     &                                INT_XPOS, INT_YPOS, 2, 2, ERROR )
C
	   ENDIF
C
	   IF(.NOT.RESAMPLE)GOTO 999
C
C
C	   Test if all the values are the same
C
	   IF(VALUE(1).EQ.VALUE(2).AND.
     &        VALUE(1).EQ.VALUE(3).AND.
     &        VALUE(1).EQ.VALUE(4))THEN
              SAMPLE_VALUE=VALUE(1)
	      GOTO 900
	   ENDIF
C
C	   Calculate the 4 squared distances
C
	   X_DIST(1)=XPOS-(INT_XPOS*DTIPROJ_SAMPLE(1,DTILUN))
	   X_DIST(2)=DTIPROJ_SAMPLE(1,DTILUN)-X_DIST(1)
	   Y_DIST(1)=YPOS-(INT_YPOS*DTIPROJ_SAMPLE(2,DTILUN))
	   Y_DIST(2)=DTIPROJ_SAMPLE(2,DTILUN)-Y_DIST(1)
C	  
	   SQUARE_DIST(1)=X_DIST(1)**2+Y_DIST(1)**2
	   SQUARE_DIST(2)=X_DIST(1)**2+Y_DIST(2)**2
	   SQUARE_DIST(3)=X_DIST(2)**2+Y_DIST(2)**2
	   SQUARE_DIST(4)=X_DIST(2)**2+Y_DIST(1)**2
C
C	   Calculate the weighted average
C
	   REAL_SAMPLE_VALUE(1)=0.0
	   REAL_SAMPLE_VALUE(2)=0.0
C
	   DO 100 I=1,4
	      REAL_SAMPLE_VALUE(1)=REAL_SAMPLE_VALUE(1)+
     &           (VALUE(I)/SQUARE_DIST(I))
C
	      REAL_SAMPLE_VALUE(2)=REAL_SAMPLE_VALUE(2)+
     &        (1.0/SQUARE_DIST(I))
C
100	   CONTINUE
C
	   SAMPLE_VALUE=(REAL_SAMPLE_VALUE(1)/REAL_SAMPLE_VALUE(2))
	ENDIF
C
C-----------------------------------------------------------------------
C	Signal success
900	RESAMPLE=DTI__NORMAL
C
C-----------------------------------------------------------------------
999	RETURN
C
	END
