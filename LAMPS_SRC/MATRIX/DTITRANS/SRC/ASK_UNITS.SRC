C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1995-01-19 17:42:20.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        INTEGER*4 FUNCTION ASK_UNITS(DTILUN)
C
***	MODULE	ASK_UNITS
***	IDENT	19JA95
C
C 	Copyright Laser-Scan Ltd., Cambridge, England
C 	Author  : D R Catlow
C
C	Created : 06 October 1987
C	Modified:
C
C	Function for DTITRANS to request the units code
C	for the file opened on DTILUN.
C	The code is written to the relevant variable in
C	DTIPROJ.
C
C----------------------------------------------------------------------
	IMPLICIT NONE
C
***	COMMON		/LSL$CMNLSL:EXCEPTION/
***	COMMON		/LSL$CMNLSL:EXPC/
***	PARAMETER	/LSL$CMNLSL:LSLLIBMSG/
C
***	COMMON		/LSL$CMNDTI:DTIPROJ/
C
***	COMMON   	/LSL$CMNIFF:MD2NAM/	!holds MD variables that are
C						!used by DTITRANS to ensure
C						!compatability with ITRANS.
***	COMMON		/HERE:DTITRANS/
***	PARAMETER	/HERE:DTITRANSMSG/
C
C	Arguments:
	INTEGER*4	DTILUN			!which DTI file
C
C	Locals:
	INTEGER*4	UNITS_INDEX		!units index
	INTEGER*4	DEFAULT_UNITS		!default units index
	INTEGER*4	J,I			!counter
	INTEGER*4	LEN			!number of characters read
	INTEGER*4	NOCHAR			!length of prompt and default
	INTEGER*4	ERROR			!system error code
	BYTE		ICH			!single character
C
C	Functions:
	INTEGER*4	SIGCHS			!determines no. of sign. chs.
	INTEGER*4	EXPAND			!expands into EXPBUF
	INTEGER*4	TTRSTR			!read response from terminal
	INTEGER*4	RDLONG			!read INTEGER*4
	INTEGER*4       RDCHS			!read a single character
C
	CHARACTER*80	BLANK			!blank characters
	DATA		(BLANK(I:I),I=1,80)/80*' '/
C
C----------------------------------------------------------------------
C----------------------------------------------------------------------
C	Assume success
C
	ASK_UNITS=DTRANS__NORMAL
C
C----------------------------------------------------------------------
C 	All spheroids known by GCTP are specified in International 
C	metres. If user specified spheroid, then we talk about 
C	projection units.
C 	Also when dealing with Oblique Stereographic (UKSL format) 
C	with user specified conformal earth's radius, then talk
C 	about projection units
C
	IF (DTIPROJ_SPHEROID(DTILUN).EQ.101 .OR.
     &	    DTIPROJ_PROJECTION(DTILUN).EQ.22 .AND.
     &      DTIPROJ_PROJ_PARAMS(4,DTILUN) .GT. 0.0) THEN
	   MD2_UNT(3)='projection units'
C
	ELSE
	   MD2_UNT(3)='metres'
	ENDIF
C
C----------------------------------------------------------------------
C	Deal with the special case where the user has redefined the
C	projection for the source DTI file, and therefore the
C	input unit values may no longer be valid.
C
	IF (DTILUN.EQ.IN_LUN) THEN
	  IF (DTIPROJ_PROJECTION(DTILUN).EQ.2 .AND.
     &        DTIPROJ_UNITS(DTILUN).NE.1)DTIPROJ_UNITS(DTILUN) = 1
C
	  IF (DTIPROJ_PROJECTION(DTILUN).EQ.100 .AND.
     &        DTIPROJ_UNITS(DTILUN).LT.3)DTIPROJ_UNITS(DTILUN) = 110
C
	  IF (DTIPROJ_PROJECTION(DTILUN).NE.100 .AND.
     &        DTIPROJ_UNITS(DTILUN).GT.2)DTIPROJ_UNITS(DTILUN) = 2
	ENDIF
C
C----------------------------------------------------------------------
C	Set up default relevant to projection
C
        DEFAULT_UNITS=DTIPROJ_UNITS(DTILUN)
C
	IF (DTILUN.EQ.OUT_LUN) THEN
	  IF (DTIPROJ_PROJECTION(DTILUN) .NE.
     &	      DTIPROJ_PROJECTION(IN_LUN)) THEN
C
	    IF (DTIPROJ_PROJECTION(DTILUN).EQ.100) THEN
              DEFAULT_UNITS=110	!tenths of seconds of arc
C
	    ELSEIF(DTIPROJ_PROJECTION(DTILUN).EQ.2) THEN
              DEFAULT_UNITS=1	!feet
C
	    ELSE
	      DEFAULT_UNITS=2	!metres
	    ENDIF
C
	  ELSE
	    DEFAULT_UNITS=DTIPROJ_UNITS(IN_LUN)
	  ENDIF
	ENDIF	
C
C----------------------------------------------------------------------
C	Prompt for UNITS value
C
	CALL WRITEF(' ')
C
100	NOCHAR = EXPAND('Enter unit code (%^L%N): ',DEFAULT_UNITS)
	ASK_UNITS=TTRSTR(,LEN,EXPDSC,ERROR)
C
	IF (.NOT.ASK_UNITS) THEN	
	   IF (ASK_UNITS.NE.LSL__EOF) THEN
	      CALL LSL_PUTMSG(ERROR)
C
	   ELSE
	      ASK_UNITS=DTRANS__EOF
	      CALL LSL_PUTMSG(ASK_UNITS)
	   ENDIF
C
	   GOTO 999
	ENDIF
C
	IF (LEN.EQ.0) THEN			! take default
	   J=DEFAULT_UNITS
	   GOTO 250
	ENDIF
C
C----------------------------------------------------------------------
C	Decode the response
C
	CALL BSLN
C
	IF(RDCHS(ICH)) GOTO 100
C
C 	check for ? and if present print explanatory message
C
	IF (ICH.EQ.'?') THEN
	  CALL WRITEF(' ')	
	  CALL WRITEF('Allowable Units and their codes are:-')
	  CALL WRITEF(' ')
	  DO 150, I=1,6/2
	    J=I*2-1
	    CALL WRITEF('%^L%I3 %S  %I3 %S',MD2_UNTCD(J),MD2_UNT(J),
     &	                 MD2_UNTCD(J+1),MD2_UNT(J+1))
150	  CONTINUE
C
	  CALL WRITEF ('%^L%I3 %S  %I3 %S',
     &                   MD2_UNTCD(8),MD2_UNT(8),
     &                   MD2_UNTCD(10),MD2_UNT(10))
C
	  CALL WRITEF('%^L%I3 %S',MD2_UNTCD(12),MD2_UNT(12))
	  GOTO 100
	ENDIF
C
C----------------------------------------------------------------------
C
	CALL BSCH
C
C 	read a value
C
	IF (RDLONG(J)) THEN
	   IF (ERRNUM.EQ.LSL__HADEXCP) THEN
	      CALL LSL_PUTMSG(LSL_EXCP)
	   ELSE
	      CALL LSL_PUTMSG(ERRNUM)
	   ENDIF
C
	   GOTO 100
	ENDIF
C
C----------------------------------------------------------------------
C 	Check if this is a valid units code
C
250	DO 300, I=1,MD2_NOUNT
	   IF (J.EQ.MD2_UNTCD(I))GOTO 350
300	CONTINUE
C
C 	Invalid unit code
C
	CALL LSL_PUTMSG(DTRANS__BADUNITCODE,J)
	GOTO 100
C
350	UNITS_INDEX=I
C
C----------------------------------------------------------------------
C	Code 0 (Unset) and Table and Map units are invalid
C
	IF(J.EQ.0.AND.IMAGEMAP)GOTO 355
C
	IF(.NOT.DO_TRANSFORM)GOTO 355
C
	IF ((J.GT.5 .AND. J.NE.110) .OR. J.EQ.0) THEN
	   CALL LSL_PUTMSG(DTRANS__INVALUNIT,J)
	   CALL LSL_PUTMSG(DTRANS__REENTER)
	   GOTO 100
	ENDIF 
C
C----------------------------------------------------------------------
C 	For geographicals, must have angular units
C
	IF (DTIPROJ_PROJECTION(DTILUN).EQ.100.AND.J.LT.3)THEN
	   CALL LSL_PUTMSG(DTRANS__INVALUNIT,J)
	   CALL LSL_PUTMSG(DTRANS__REENTER)
	   GOTO 100
	ENDIF 
C
C	If not geographicals can only have metres or feet
C
	IF(DTIPROJ_PROJECTION(DTILUN).NE.100 .AND. J.GT.2)THEN
	   CALL LSL_PUTMSG(DTRANS__INVALUNIT,J)
	   CALL LSL_PUTMSG(DTRANS__REENTER)
	   GOTO 100
	ENDIF 
C
C----------------------------------------------------------------------
C 	Check for sensible units for selected spheroid 
C	(cannot have feet and user specified spheroid as we don't 
C	know the relationship between projection units and feet)
C
	IF (DTIPROJ_SPHEROID(DTILUN).EQ.101 .AND. J.EQ.1) THEN
	   CALL LSL_PUTMSG(DTRANS__INVALUNIT,J)
	   CALL LSL_PUTMSG(DTRANS__REENTER)
	   GOTO 100
	ENDIF 
C
C----------------------------------------------------------------------
C	Transfer to common block, and confirm selection
C
355	DTIPROJ_UNITS(DTILUN)=J
	CALL WRITEF('%S(%S)',BLANK(1:NOCHAR),
     &	            MD2_UNT(UNITS_INDEX)
     &              (1:SIGCHS(MD2_UNT(UNITS_INDEX))))
C
C----------------------------------------------------------------------
C
999	RETURN
	END
C
