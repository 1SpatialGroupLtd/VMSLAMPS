C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-03-05 17:41:44.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        INTEGER*4 FUNCTION DTITRANS_DECODE()
C
***	MODULE	DTITRANS_DECODE
***	IDENT	05MR96
C
C 	Copyright Laser-Scan Ltd.,Cambridge,England
C 	Author  : D R Catlow
C	Created : 24 September 1987
C	Modified: 25 April 1988, D J Gugan for SATMAP input
C
CMOD	Imagemap transformation filename now parsed against
C	LSL$RCP:TRANSP.DAT rather than LSL$DTI:2DOR.DAT
C
CMOD993 Do not allow /TRANSFORM and any of /TWO, /THREE, /FOUR
C	or /PROJECTIVE
C
CMOD1533 Add /ROUND_ORIGIN to set origin as a multiple of the
C	 pixel sampling						JB 4-MAR-1996
C
C	Function to decode the DTITRANS command line.
C
C----------------------------------------------------------------------
	IMPLICIT NONE
C
C DTILIB commons
***	COMMON   /LSL$CMNDTI:DTIHDR/
***	PARAMETER/LSL$CMNDTI:DTIPAR/
C
C LSLLIB commons
***	COMMON   /LSL$CMNLSL:CLD/
C
C DTITRANS commons
***	COMMON   /HERE:DTITRANS/
***	PARAMETER/HERE:DTITRANSMSG/
C
C Functions:
        INTEGER*4       DCL_STARTUP! looks for command line
	INTEGER*4	DCL_QUAL   ! looks for specified qualifier
	INTEGER*4	DCL_FILE   ! looks for filename specifications
        INTEGER*4       DCL_STR	   ! looks for qualifier string args.
	INTEGER*4	PARFILN	   ! to parse filename
C Locals:
	INTEGER*4	OK	   ! function return condition
	LOGICAL		HAD_QUAL   ! had this qualifier
	LOGICAL		LOCAL	   ! DCL qualifier
	LOGICAL		LOCNEG	   ! decoding values
C
C Command Language Definitions:
	EXTERNAL	DTITRANS_CLD
C
C----------------------------------------------------------------------
C----------------------------------------------------------------------
C Get the command line
	OK=DCL_STARTUP('DTITRANS',.FALSE.,DTITRANS_CLD,.TRUE.)
        IF (.NOT.OK) GOTO 100 		! return
C
C----------------------------------------------------------------------
C Set up a number of defaults, that may be changed by DCL
C qualifiers.
C
C Transform true by default
	DO_TRANSFORM=.TRUE.		! carry out projection transformation
C
	HAD_LOG		=.FALSE.	! no log output
	HAD_ROUND 	=.FALSE.	! no round origin output
	HAD_WINDOW	=.FALSE.	! no need to prompt for input window
	DO_PROMPT	=.FALSE.	! don't prompt for projection 
C					! parameters unless necessary
	HAD_DESCRIPTOR	=.FALSE.	! not had desriptor qualifier
	DO_SHIFT	=.FALSE.	! don't prompt for any shift values
C
	HEADER_TYPE(OUT_LUN) =DTI_LSLA	! output to DTI file with an
C					! LSLA style header record
	RESAMPLE_METHOD	= LINEAR	! resampling using linear interpolation
	IMAGEMAP 	= .FALSE.
	IFF_FILE 	= .FALSE.
	CONTROL 	= .FALSE.
C
C----------------------------------------------------------------------
C 	Check for the presence of the various qualifiers
C
C----------------------------------------------------------------------
C /LOG
	OK=DCL_QUAL('LOG',HAD_LOG,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.OK) GOTO 100
C
C----------------------------------------------------------------------
C /ROUND_ORIGIN
	OK=DCL_QUAL('ROUND_ORIGIN',HAD_ROUND,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.OK) GOTO 100
C
C----------------------------------------------------------------------
C /DESCRIPTOR
	OK = DCL_QUAL('DESCRIPTOR',HAD_DESCRIPTOR,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.OK) GOTO 100
C
	IF (HAD_DESCRIPTOR) THEN
	   DO_TRANSFORM = .FALSE.
           GOTO 60		! no other qualifiers are relevant
	ENDIF
C----------------------------------------------------------------------
C /PROMPT
	OK=DCL_QUAL('PROMPT',DO_PROMPT,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.OK) GOTO 100
C
C----------------------------------------------------------------------
C /WINDOW
	OK=DCL_QUAL('WINDOW',HAD_WINDOW,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.OK) GOTO 100
C
C----------------------------------------------------------------------
C /TRANSFORM
	OK=DCL_QUAL('TRANSFORM',DO_TRANSFORM,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.OK) GOTO 100
C
C----------------------------------------------------------------------
C /FILE_TYPE
	OK=DCL_QUAL('FILE_TYPE',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.OK) GOTO 100
C
C Test for associated keyword
	IF(HAD_QUAL)THEN
	   OK=DCL_QUAL('FILE_TYPE.LSLA',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	   IF (.NOT.OK) GOTO 100 		! return
	   IF (HAD_QUAL)THEN
	      HEADER_TYPE(OUT_LUN)=DTI_LSLA
	      GOTO 50
	   ENDIF
C
	   OK=DCL_QUAL('FILE_TYPE.UHL1',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	   IF (.NOT.OK) GOTO 100 		! return
	   IF (HAD_QUAL)THEN
	      HEADER_TYPE(OUT_LUN)=DTI_UHL1
	      GOTO 50
	   ENDIF
C
	   OK=DCL_QUAL('FILE_TYPE.TED4',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	   IF (.NOT.OK) GOTO 100 		! return
	   IF (HAD_QUAL)THEN
	      HEADER_TYPE(OUT_LUN)=DTI_TED4
	      GOTO 50
	   ENDIF
	ENDIF
C
C----------------------------------------------------------------------
C /RESAMPLE
C
50	OK=DCL_QUAL('RESAMPLE',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.OK) GOTO 100
C
C Test for associated keyword
	IF(HAD_QUAL)THEN
	   OK=DCL_QUAL('RESAMPLE.NINT',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	   IF (.NOT.OK) GOTO 100 		! return
	   IF (HAD_QUAL)THEN
	      RESAMPLE_METHOD=NEAREST
	      GOTO 65
	   ENDIF
C
	   OK=DCL_QUAL('RESAMPLE.LINEAR',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	   IF (.NOT.OK) GOTO 100		! return
	   IF (HAD_QUAL)THEN
	      RESAMPLE_METHOD=LINEAR
	      GOTO 65
	   ENDIF
	ENDIF
C
C----------------------------------------------------------------------
C /IMAGEMAP
C
65	OK=DCL_QUAL('IMAGEMAP',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.OK) GOTO 100
C
C Get orientation file specification
	IF(HAD_QUAL)THEN
	  IMAGEMAP=.TRUE.
	  OK=DCL_STR('IMAGEMAP',.TRUE.)
	  IF(OK)THEN
	    TWODOR_NAME=CARRAY(1)(:STR_LEN(1)) ! transfer filename
	    TWODOR_NAME_LENGTH=STR_LEN(1)
	  ENDIF
C
C Parse the supplied filename against the default
	  OK=PARFILN(TWODOR_NAME,
     &               TWODOR_NAME_LENGTH,
     &               CARRAY,
     &               'LSL$RCP:TRANSP.DAT;0',
     &              .TRUE.)
	   IF(.NOT.OK) THEN
	      CALL LSL_PUTMSG(OK)
	      GOTO 100
	   ENDIF
	ENDIF
C
C----------------------------------------------------------------------
C /TWO 
	OK=DCL_QUAL('TWO',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.OK) GOTO 100
	IF(HAD_QUAL) THEN
	   TWO = .TRUE.
	   OK=DCL_STR('TWO',.TRUE.)
	   IF(OK)THEN
	      RECTIFY_NAME=CARRAY(1)(:STR_LEN(1)) ! transfer filename
	      RECTIFY_NAME_LENGTH=STR_LEN(1)
	   ELSE
	      GOTO 100
	   ENDIF
C
C Parse the supplied filename against the default
C
	   OK=PARFILN(RECTIFY_NAME,
     &               RECTIFY_NAME_LENGTH,
     &               CARRAY,
     &               'RECTIFY.DAT;0',
     &              .TRUE.)
	   IF(.NOT.OK) THEN
	      CALL LSL_PUTMSG(OK)
	      GOTO 100
	   ENDIF
	ENDIF
C
C----------------------------------------------------------------------
C /THREE 
	OK=DCL_QUAL('THREE',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.OK) GOTO 100
	IF(HAD_QUAL) THEN
	   THREE = .TRUE.
	   OK=DCL_STR('THREE',.TRUE.)
	   IF(OK)THEN
	      RECTIFY_NAME=CARRAY(1)(:STR_LEN(1)) ! transfer filename
	      RECTIFY_NAME_LENGTH=STR_LEN(1)
	   ELSE
	      GOTO 100
	   ENDIF
C
C Parse the supplied filename against the default
C
	   OK=PARFILN(RECTIFY_NAME,
     &               RECTIFY_NAME_LENGTH,
     &               CARRAY,
     &               'RECTIFY.DAT;0',
     &              .TRUE.)
	   IF(.NOT.OK) THEN
	      CALL LSL_PUTMSG(OK)
	      GOTO 100
	   ENDIF
	ENDIF
C
C----------------------------------------------------------------------
C /FOUR
	OK=DCL_QUAL('FOUR',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.OK) GOTO 100
	IF(HAD_QUAL) THEN
	   FOUR = .TRUE.
	   OK=DCL_STR('FOUR',.TRUE.)
	   IF(OK)THEN
	      RECTIFY_NAME=CARRAY(1)(:STR_LEN(1)) ! transfer filename
	      RECTIFY_NAME_LENGTH=STR_LEN(1)
	   ELSE
	      GOTO 100
	   ENDIF
C
C Parse the supplied filename against the default
C
	   OK=PARFILN(RECTIFY_NAME,
     &               RECTIFY_NAME_LENGTH,
     &               CARRAY,
     &               'RECTIFY.DAT;0',
     &              .TRUE.)
	   IF(.NOT.OK) THEN
	      CALL LSL_PUTMSG(OK)
	      GOTO 100
	   ENDIF
	ENDIF
C
C----------------------------------------------------------------------
C /PROJECTIVE
C
	OK=DCL_QUAL('PROJECTIVE',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.OK) GOTO 100
C
	IF(HAD_QUAL) THEN
	   PROJECTIVE = .TRUE.
	   OK=DCL_STR('PROJECTIVE',.TRUE.)
	   IF(OK)THEN
	      RECTIFY_NAME=CARRAY(1)(:STR_LEN(1)) ! transfer filename
	      RECTIFY_NAME_LENGTH=STR_LEN(1)
	   ELSE
	      GOTO 100
	   ENDIF
C
C Parse the supplied filename against the default
C
	   OK=PARFILN(RECTIFY_NAME,
     &               RECTIFY_NAME_LENGTH,
     &               CARRAY,
     &               'RECTIFY.DAT;0',
     &              .TRUE.)
	   IF(.NOT.OK) THEN
	      CALL LSL_PUTMSG(OK)
	      GOTO 100
	   ENDIF
	ENDIF
C
C----------------------------------------------------------------------
C /IFF
C
67	OK=DCL_QUAL('IFF',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.OK) GOTO 100
C
C Get orientation file specification
	IF(HAD_QUAL)THEN
	  IFF_FILE=.TRUE.
	  OK=DCL_STR('IFF',.TRUE.)
	  IF(OK)THEN
	    IFF_NAME=CARRAY(1)(:STR_LEN(1)) ! transfer filename
	    IFF_NAME_LENGTH=STR_LEN(1)
	  ENDIF
C
C Parse the supplied filename against the default
	  OK=PARFILN(IFF_NAME,
     &               IFF_NAME_LENGTH,
     &               CARRAY,
     &               'LSL$IF:DTITRANS.IFF',
     &              .TRUE.)
	   IF(.NOT.OK) THEN
	      CALL LSL_PUTMSG(OK)
	      GOTO 100
	   ENDIF
	ENDIF
C
C----------------------------------------------------------------------
C /SHIFT qualifier
C
	OK=DCL_QUAL('SHIFT',DO_SHIFT,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.OK) GOTO 100
C
C----------------------------------------------------------------------
C Get input DTI-file-name
C
60	OK=DCL_FILE('IN_FILESPEC','LSL$DTI:DTI.DTI;0',
     &                 LOCAL,.FALSE.,.TRUE.)
	IF (.NOT.OK) GOTO 100			! return
C
C Transfer file-spec to a local variable
        DTI_NAME(IN_LUN)=FILARY(1)(1:FIL_LEN(1))
	DTI_NAME_LENGTH(IN_LUN)=FIL_LEN(1)
C
C-----------------------------------------------------------------------
C Get output filename - default based on input DTI-file-name
	IF(HAD_DESCRIPTOR)GOTO 100
C
C-----------------------------------------------------------------------
C
	OK=DCL_FILE('OUT_FILESPEC',
     &               DTI_NAME(IN_LUN)(1:DTI_NAME_LENGTH(IN_LUN)),
     &               LOCAL,.FALSE.,.TRUE.)
	IF (.NOT.OK) GOTO 100			! return
C
C Transfer file-spec to a local variable
        DTI_NAME(OUT_LUN)=FILARY(1)(1:FIL_LEN(1))
	DTI_NAME_LENGTH(OUT_LUN)=FIL_LEN(1)
C
C----------------------------------------------------------------------
C
	CONTROL = TWO .OR. THREE .OR. FOUR .OR. PROJECTIVE
C
C Transform implicitly true in CLD, so check check that none of the
C other disallowed combinations have slipped in
C
	IF (DO_TRANSFORM .AND. 
     &		(CONTROL .OR. IFF_FILE .OR. IMAGEMAP)) THEN
	   CALL LSL_PUTMSG(DTRANS__NOTRANSFORM)
	   DO_TRANSFORM = .FALSE.
	ENDIF
C
C----------------------------------------------------------------------
C Set up return status
C
100     IF (OK)THEN
           DTITRANS_DECODE = DTRANS__NORMAL
	ELSE
	   DTITRANS_DECODE = DTRANS__BADQUAL
	ENDIF	
C----------------------------------------------------------------------
C
999	RETURN
   	END
C
