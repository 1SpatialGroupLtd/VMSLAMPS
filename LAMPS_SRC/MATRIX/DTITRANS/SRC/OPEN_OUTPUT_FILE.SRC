C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-07-19 12:27:08.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        INTEGER*4 FUNCTION OPEN_OUTPUT_FILE()
C
***	MODULE	OPEN_OUTPUT_FILE
***	IDENT	19JL91
C
C 	Copyright Laser-Scan Laboratories Ltd.,Cambridge,England
C 	Author  : D R Catlow
C	Created : 25 September 1987
C	Modified:
C
CMOD	Always create a projection record in the output file if LSLA
C
C	Function for DTITRANS to open the output DTI file.
C	The routine ensures that significant records from the
C	input file are copied to the output, and that if output
C	is to an ALVY file, a Projection Record is written.
C
C----------------------------------------------------------------------
	IMPLICIT NONE
C
C	DTILIB commons
***	COMMON   /LSL$CMNDTI:DTIHDR/
***	COMMON	 /LSL$CMNDTI:DTIPROJ/
***	PARAMETER/LSL$CMNDTI:DTIPAR/
***	PARAMETER/LSL$CMNDTI:DTILIBMSG/
C
C	DTITRANS commons
***	COMMON   /HERE:DTITRANS/
***	PARAMETER/HERE:DTITRANSMSG/
C
C Functions:
	INTEGER*4	DTI_CREATE	   !to create a DTI file
	INTEGER*4	DTI_WRITE_PROJ_REC !to write a DTI Proj. Record
	INTEGER*4	DTI_COPY_HEADER	   !to copy header records
C
C Locals:
	INTEGER*4	IERR		   !function return
	INTEGER*4	ERROR		   !system error code
C
C----------------------------------------------------------------------
C----------------------------------------------------------------------
C Work out the size of the header of the output file.
C This is only necessary if output is to an LSLA file.
C
	IF (HEADER_TYPE(OUT_LUN).EQ.DTI_LSLA) THEN
C
C If input file is already a LSLA then make the header size equal
C to the input...
C
	  IF (HEADER_TYPE(IN_LUN).EQ.DTI_LSLA .OR.
     &        HEADER_TYPE(IN_LUN).EQ.DTI_ALVY) THEN
             DATA_OFFSET(OUT_LUN)=DATA_OFFSET(IN_LUN) ! with/w'out proj
	  ELSE
	     DATA_OFFSET(OUT_LUN)=DEFAULT_LSLA_HEADER ! no proj'n
	  ENDIF
C
C ... and extend if necessary, to allow for a Projection Record
C
C	  IF (DO_TRANSFORM .AND. (.NOT.HAD_PROJ_RECORD(IN_LUN)))
C
C Already contains proj'n length if flagged 
C
	  IF (.NOT.HAD_PROJ_RECORD(IN_LUN)) DATA_OFFSET(OUT_LUN) = 
     &			DATA_OFFSET(OUT_LUN) + DTIPROJ_RECORD_LENGTH
C
	ENDIF
C
C----------------------------------------------------------------------
C Call DTI_CREATE to create and map the output DTI file
C
	DATA_TYPE(OUT_LUN) = DATA_TYPE(IN_LUN)
C
	OPEN_OUTPUT_FILE=DTI_CREATE(
     &                           OUT_LUN,
     &                           DTI_NAME(OUT_LUN),
     &                           DTI_NAME_LENGTH(OUT_LUN),
     &				 HEADER_TYPE(OUT_LUN),
     &				 DATA_OFFSET(OUT_LUN),
     &				 DATA_TYPE(IN_LUN),
     &                           X_EXTENT(OUT_LUN),
     &                           Y_EXTENT(OUT_LUN),
     &                           ERROR)
C
	IF (.NOT.OPEN_OUTPUT_FILE)THEN
	   CALL LSL_PUTMSG(OPEN_OUTPUT_FILE)
	   IF (OPEN_OUTPUT_FILE.EQ.DTI__SYSERR)CALL LSL_PUTMSG(ERROR)
	   GOTO 999
	ENDIF
C
C----------------------------------------------------------------------
C Transfer header details from input to output
C and write a Projection Record if appropriate
C
	IF ( (HEADER_TYPE(IN_LUN).EQ.DTI_LSLA .OR.
     &        HEADER_TYPE(IN_LUN).EQ.DTI_ALVY) .AND.
     &        HEADER_TYPE(OUT_LUN).EQ.DTI_LSLA ) THEN
C
	   OPEN_OUTPUT_FILE = DTI_COPY_HEADER(
     &				IN_LUN,OUT_LUN,ERROR,.FALSE.)
C
	   IF (.NOT.OPEN_OUTPUT_FILE)THEN
	      CALL LSL_PUTMSG(OPEN_OUTPUT_FILE)
	      IF (OPEN_OUTPUT_FILE.EQ.DTI__SYSERR)CALL LSL_PUTMSG(ERROR)
	      CALL DTI_CLOSE(OUT_LUN,.FALSE.,.FALSE.,ERROR)
	      GOTO 999
	   ENDIF
	ENDIF
C
	IF (HEADER_TYPE(OUT_LUN).EQ.DTI_LSLA) THEN
C
C Don't do any more if not transforming, or no input proj'n
C
C	  IF ( .NOT.DO_TRANSFORM .AND.
C    &         .NOT.HAD_PROJ_RECORD(IN_LUN) ) GOTO 999
C
C Determine position of Projection Record in output header
C If input file had a Projection Record, then write modified
C record at the same offset.....
C
	  IF (HAD_PROJ_RECORD(IN_LUN))THEN
	     DTIPROJ_RECORD_OFFSET(OUT_LUN)=DTIPROJ_RECORD_OFFSET(IN_LUN)
C
C ...otherwise, write on to the end of the output header	     
C
	  ELSE
	     DTIPROJ_RECORD_OFFSET(OUT_LUN)=DEFAULT_LSLA_HEADER
	  ENDIF
C
          OPEN_OUTPUT_FILE=DTI_WRITE_PROJ_REC(
     &	  			    OUT_LUN,
     &                              DTIPROJ_RECORD_OFFSET(OUT_LUN),
     &                              ERROR)
C
	  IF (.NOT.OPEN_OUTPUT_FILE)THEN
	     CALL LSL_PUTMSG(OPEN_OUTPUT_FILE)
	     IF (OPEN_OUTPUT_FILE.EQ.DTI__SYSERR)CALL LSL_PUTMSG(ERROR)
	     CALL DTI_CLOSE(OUT_LUN,.FALSE.,.FALSE.,ERROR)
	     GOTO 999
	  ENDIF
	ENDIF	
C
C----------------------------------------------------------------------
C Print out projection details of output file.
C
	IF (DO_TRANSFORM.OR.X_SHIFT.NE.0.OR.Y_SHIFT.NE.0)THEN
	  CALL WRITEF(' ')
	  CALL WRITEF('Final Projection Data for output DTI file')
	  CALL WRITEF('*****************************************')
	  CALL WRITEF(' ')
	  CALL PRINT_PROJ_REC(OUT_LUN)
	ENDIF
C
C----------------------------------------------------------------------
900	OPEN_OUTPUT_FILE=DTI__NORMAL
C
C----------------------------------------------------------------------
999	RETURN
	END
C
