C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1995-01-19 17:59:12.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        INTEGER*4 FUNCTION ASK_PROJECTION(DTILUN)
C
***	MODULE	ASK_PROJECTION
***	IDENT	19JA95
C
C 	Copyright Laser-Scan Ltd., Cambridge, England
C 	Author  : D R Catlow
C
C	Created : 02 October 1987
C	Modified:
C
C	Function for DTITRANS to request the projection code
C	and any associated parameters for the file opened on
C	DTILUN.
C	The values are written to the relevant variables in
C	DTIPROJ.
C	Based on ITRANS routine ASKMD.
C
C----------------------------------------------------------------------
	IMPLICIT NONE
C
***	COMMON		/LSL$CMNLSL:EXCEPTION/
***	COMMON		/LSL$CMNLSL:EXPC/
***	PARAMETER	/LSL$CMNLSL:LSLLIBMSG/
C
***	COMMON   	/LSL$CMNIFF:MD2NAM/	!holds MD variables that are
C						!used by DTITRANS to ensure
C						!compatability with ITRANS.
C
***	COMMON		/LSL$CMNDTI:DTIPROJ/
C
***	COMMON		/HERE:DTITRANS/
***	PARAMETER	/HERE:DTITRANSMSG/
C
C	Arguments:
	INTEGER*4	DTILUN		!which DTI file
C
C	Locals:
	REAL*8		X,Y		!values read  
	INTEGER*4	PROJ_INDEX	!projection index
	INTEGER*4	SPHEROID_TYPE	! spherical type projection
					! = 0 for shperoidal
					! = 1 for shperical
					! = 3 for don't care (geogs)
	INTEGER*4	I,J,K		!loop counters
	INTEGER*4	LEN		!number of characters read
	INTEGER*4	NOCHAR		!length of prompt and default
	INTEGER*4	ERROR		!system error code
	BYTE		ICH		!single character
C
C	Functions:
	INTEGER*4	ASK_PROJ_PARAMS	!ask for projection parameters
	INTEGER*4	SIGCHS		!gets number of significant chs.
	INTEGER		TTRSTR		!read response from terminal
	INTEGER		EXPAND		!expand into EXPBUF
	INTEGER		RDDBLE		!read REAL*8
	INTEGER		RDLONG		!read INTEGER*4
	INTEGER		RDCHS		!read single character
C
	CHARACTER*80	BLANK		!blank characters
	DATA		(BLANK(I:I),I=1,80)/80*' '/
C
C----------------------------------------------------------------------
C----------------------------------------------------------------------
C	Set up prompt
C
100	J = DTIPROJ_PROJECTION(IN_LUN)
	NOCHAR = EXPAND('Enter projection code (%^L%N): ',J)
C
C	Read response
C
	ASK_PROJECTION=TTRSTR(,LEN,EXPDSC,ERROR)
C
	IF(.NOT.ASK_PROJECTION) THEN		!error
	  IF (ASK_PROJECTION.NE.LSL__EOF) THEN
	     CALL LSL_PUTMSG(ERROR)
C
	  ELSE
	     ASK_PROJECTION=DTRANS__EOF
	     CALL LSL_PUTMSG(ASK_PROJECTION)
	  ENDIF
C
	  GOTO 999
	ENDIF
C
	IF (LEN.EQ.0) GOTO 205			!accept default
C
C----------------------------------------------------------------------
C	Decode the response
C
	CALL BSLN
C
	IF (RDCHS(ICH)) GOTO 100		!reprompt
C
C----------------------------------------------------------------------
C 	If ? then list all available projections in pairs
C
	IF (ICH.EQ.'?') THEN
	  CALL WRITEF(' ')	
	  CALL WRITEF('Allowable projections and their codes are:-')
	  CALL WRITEF(' ')
	  DO 200, I=1,MD2_NOPRJ/2
	     J=I*2-1
	     CALL WRITEF
     &       ('%^L%I3%S  %I3%S',MD2_PRJCD(J),  MD2_PRJ(J),
     &				MD2_PRJCD(J+1),MD2_PRJ(J+1))
200	  CONTINUE
C
C 	And any odd one.....
C
	  IF (MOD(MD2_NOPRJ,2).NE.0) CALL WRITEF
     &       ('%^L%I3 %S', MD2_PRJCD(MD2_NOPRJ),MD2_PRJ(MD2_NOPRJ))
C
C 	And an additional explanation.....
	  CALL WRITEF(' ')
	  CALL WRITEF('Note: projections marked "*" are defined for '//
     &	              'the sphere, not the spheroid.')
	  CALL WRITEF('      If a spheroid is defined, then the sphere '//
     &	              'with the same surface area')
	  CALL WRITEF('      as the spheroid is used')
C
	  GOTO 100	
	ENDIF
C
C----------------------------------------------------------------------
C	Read a projection value
C
	CALL BSCH
C
	IF (RDLONG(J)) THEN
	   CALL LSL_PUTMSG(ERRNUM)
	   GOTO 100
	ENDIF
C
C----------------------------------------------------------------------
C	Check for 0 ie. unset projection - this is valid only for
C	the IMAGEMAP option.
C
205	IF(IMAGEMAP)THEN
	  IF(J.EQ.0)THEN
            I=1
	    GOTO 400
	  ENDIF
	ENDIF
C
C 	Check if the projection code is valid
C
	DO 210, I=1,MD2_NOPRJ
	   IF (J.EQ.MD2_PRJCD(I))THEN
	      PROJ_INDEX=I
	      GOTO 220
	   ENDIF
210	CONTINUE
C
C 	Invalid projection code
C
	CALL LSL_PUTMSG(DTRANS__BADPROJCODE,J)
	GOTO 100			!reprompt
C
C----------------------------------------------------------------------
C 	Check for sensible projection:
C
C 	Projection code of 0 not allowed
C
220	IF (J.EQ.0) THEN
	  IF (.NOT.DO_TRANSFORM) GOTO 400
	  CALL LSL_PUTMSG(DTRANS__BADPROJCODE,J)
	  CALL LSL_PUTMSG(DTRANS__REENTER)
	  GOTO 100
	ENDIF
C
C 	UK national grid is on AIRY spheroid
C
	IF (J.EQ.101 .AND. DTIPROJ_SPHEROID(DTILUN).NE.9) THEN
	   CALL LSL_PUTMSG(DTRANS__BADPRJSPH,
     &	               MD2_PRJ(PROJ_INDEX)
     &                 (3:SIGCHS(MD2_PRJ(PROJ_INDEX))),
     &	               MD2_SPH(10)(1:SIGCHS(MD2_SPH(10))))
	   CALL LSL_PUTMSG(DTRANS__REENTER)
	   GOTO 100
C
C 	SPS projection is on CLARKE 1866 spheroid
C
	ELSEIF (J.EQ.2 .AND. DTIPROJ_SPHEROID(DTILUN).NE.0) THEN
	   CALL LSL_PUTMSG(DTRANS__BADPRJSPH,
     &	        MD2_PRJ(PROJ_INDEX)
     &          (3:SIGCHS(MD2_PRJ(PROJ_INDEX))),
     &	        MD2_SPH(1)(1:SIGCHS(MD2_SPH(1))))
	   CALL LSL_PUTMSG(DTRANS__REENTER)
	   GOTO 100
C
C 	Stereographic (UKSL formulae) is on INTERNATIONAL spheroid
C
	ELSEIF (J.EQ.22 .AND. DTIPROJ_SPHEROID(DTILUN).NE.4) THEN
	   CALL LSL_PUTMSG(DTRANS__BADPRJSPH,
     &	        MD2_PRJ(PROJ_INDEX)
     &          (3:SIGCHS(MD2_PRJ(PROJ_INDEX))),
     &	        MD2_SPH(5)(1:SIGCHS(MD2_SPH(5))))
	   CALL LSL_PUTMSG(DTRANS__REENTER)
	   GOTO 100
	ENDIF
C
C----------------------------------------------------------------------
C	Transfer projection code and index
C
400	DTIPROJ_PROJECTION(DTILUN) = J
	PROJ_INDEX = I
C
C	Determine type of spheroid.
	SPHEROID_TYPE = 0		!spheroidal
C
	IF (DTIPROJ_PROJECTION(DTILUN).EQ.100) SPHEROID_TYPE=3	!Geog.
C
	I = INDEX(MD2_PRJ(PROJ_INDEX),'*')
	IF (DTIPROJ_PROJECTION(DTILUN).EQ.19 .OR.
     &	    DTIPROJ_PROJECTION(DTILUN).EQ.20 .OR.	! spheres
     &	    DTIPROJ_PROJECTION(DTILUN).EQ.101 .AND.
     &     (DTIPROJ_USER_SPHEROID(1,DTILUN) .EQ.
     &      DTIPROJ_USER_SPHEROID(2,DTILUN) .OR.
     &	    DTIPROJ_USER_SPHEROID(2,DTILUN).EQ.0.0) .OR.
     &	    I.NE.0) SPHEROID_TYPE=1			! spherical projection
C
C----------------------------------------------------------------------
C	Confirm selection
C
	CALL WRITEF('%S(%S)',BLANK(1:NOCHAR),
     &	            MD2_PRJ(PROJ_INDEX)
     &              (1:SIGCHS(MD2_PRJ(PROJ_INDEX))))
C
C----------------------------------------------------------------------
C	Get the parameters for this projection
C
	ASK_PROJECTION = ASK_PROJ_PARAMS(DTILUN)
	IF (.NOT.ASK_PROJECTION) GOTO 999
C
C----------------------------------------------------------------------
C	Signal success
C
900	ASK_PROJECTION=DTRANS__NORMAL
C
C----------------------------------------------------------------------
C
999	RETURN
	END
C
