C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-07-05 14:03:14.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C
C Cell array functions
C ====================
C
C *********************************************************************
C
C	PIXEL IMAGE PRIMITIVE
C	=====================
C
C
C NB - as it stands, this code will not work for the case when
C Y is the primary drawing direction (i.e. PIXROT) and there is more
C than one column, since 6100 can only do X as primary direction.
C Fortunately, this does not affect ROVER, which draws in single
C strips.
	SUBROUTINE	LSG_PIXEL_ARRAY(
     &		PX,PY,NX,NY,VX1,VX2,VY1,VY2,SCX,SCY,PXARR)
C
**	MODULE	LSG_PIXEL_ARRAY
**	IDENT	05JL88
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Clarke Brunt	 8-Jun-1987
C
	IMPLICIT NONE
C
***	COMMON/GKSDAT/
***	COMMON/GKSESL/
C
C Arguments:
C
	REAL	PX			! X coord (w.c.)
	REAL	PY			! Y coord
	INTEGER	NX,NY			! size of array, and direction
	INTEGER	VX1,VX2,VY1,VY2		! portion of array
	INTEGER	SCX,SCY			! scale factors
	BYTE	PXARR(*)		! array of pixels
C
C Workspace
	INTEGER	DX,DY			! device coordinate
	INTEGER	REPX,REPY
	INTEGER	NROWS,NCOLS
	INTEGER	TEMP
	INTEGER	PIND,XIND,YIND
	INTEGER	STRIPS,XPOS,YPOS
	INTEGER	I,J
	INTEGER*4	PIXL
	BYTE		PIXB
	EQUIVALENCE	(PIXL,PIXB)
	INTEGER	BMAX			! size of pixel array
	PARAMETER	(BMAX=1448)
	BYTE		B(BMAX)
C
C check arguments
	IF (NX.EQ.0.OR.NX.EQ.0) GOTO 200
	IF (VX1.LT.1.OR.VX2.GT.ABS(NX).OR.VX1.GT.VX2) GOTO 200
	IF (VY1.LT.1.OR.VY2.GT.ABS(NY).OR.VY1.GT.VY2) GOTO 200
	IF (SCX.LE.0.OR.SCY.LE.0) GOTO 200
C
C is this workstation active? - if not ignore it
	IF (.NOT.WSACT) GOTO 200
C
C ensure that our transformation is up to date
	IF (UPTRN) CALL GUPTRN	! update it
C
C is everything clipped (ie nothing visible)
	IF (CLPALL) GOTO 200
C
	NCOLS = VX2-VX1+1
	NROWS = VY2-VY1+1
	REPX = SIGN(SCX,NX)
	REPY = SIGN(SCY,NY)
C
	IF (PIXROT) THEN
	   TEMP = NCOLS
	   NCOLS = NROWS
	   NROWS = TEMP
	   TEMP = REPY
	   REPY = REPX
	   REPX = -TEMP
	ENDIF
C
C Convert world position to device coordinate
	CALL GKSW2V(1,PX,PY,DX,DY)
	XPOS = DX
	YPOS = DY
C
C check if user's array can be used directly, without copying
	IF ((POFF.EQ.0).AND.((VY1.EQ.VY2).OR.
     &      (VX1.EQ.1.AND.VX2.EQ.ABS(NX).AND..NOT.PIXROT))) THEN! yes
	   CALL WCAB(XPOS,YPOS,1,1,NCOLS,NROWS,REPX,REPY,1,1,
     &					PXARR((VY1-1)*ABS(NX)+VX1))
	   GOTO 200
	ENDIF
C
C need to copy the array (NB only copes with up to 1448 pixels for now)
	YIND = 1
	STRIPS = 0
	PIND = 1
	DO 20 J=VY1,VY2
	   XIND = 0
	   STRIPS = STRIPS+1
	   DO 10 I=VX1,VX2
	      PIXL = 0
	      PIXB = PXARR(XIND+YIND)
	      IF (POFF.NE.0) PIXL = ISHFT(PIXL,POFF)	! apply offset
	      B(PIND) = PIXB.AND.PSEL			! apply mask
	      PIND = PIND+1
	      XIND = XIND+1
10	   CONTINUE
C
C Check if array is full - if so output it
	   IF (PIXROT.OR.J.EQ.VY2.OR.BMAX-PIND.LT.VX2-VX1+1) THEN
C
C and output it
	      IF (PIXROT) THEN
	         CALL WCAB(XPOS,YPOS,1,1,STRIPS,NROWS,REPX,REPY,1,1,B)
	         XPOS = XPOS+STRIPS*REPX*PXSIZ
	      ELSE
	         CALL WCAB(XPOS,YPOS,1,1,NCOLS,STRIPS,REPX,REPY,1,1,B)
	         YPOS = YPOS+STRIPS*REPY*PXSIZ
	      ENDIF
	      STRIPS = 0
	      PIND = 1
	   ENDIF
C
	   YIND = YIND+ABS(NX)
20	CONTINUE
C
200	RETURN
	END
C
	SUBROUTINE	LSG_FILL_RECTANGLE(PX,PY)
C
**	MODULE	LSG_FILL_RECTANGLE
**	IDENT	08JN87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Clarke Brunt	 8-Jun-1987
C
	IMPLICIT NONE
C
***	COMMON/GKSDAT/
***	COMMON/GKSESL/
C
C Arguments:
C
	REAL	PX(2)			! X coords
	REAL	PY(2)			! Y coords
C
C Workspace
	REAL	X(4),Y(4)
	INTEGER	ISXY(2),IEXY(2)
C
C is this workstation active? - if not ignore it
	IF (.NOT.WSACT) GOTO 200
C
C ensure that our transformation is up to date
	IF (UPTRN) CALL GUPTRN	! update it
C
C is everything clipped (ie nothing visible)
	IF (CLPALL) GOTO 200
C
C if it's anything other than solid fill, let GFA do it
	IF (CFASTY.NE.GSOLID) THEN
	   X(1) = PX(1)
	   Y(1) = PY(1)
	   X(3) = PX(2)
	   Y(3) = PY(2)
	   X(2) = X(1)
	   Y(2) = Y(3)
	   X(4) = X(3)
	   Y(4) = Y(1)
	   CALL GFA(4,X,Y)
	   GOTO 200
	ENDIF
C
C Convert world position to device coordinate
	CALL GKSW2V(1,PX(1),PY(1),ISXY(1),ISXY(2))
	CALL GKSW2V(1,PX(2),PY(2),IEXY(1),IEXY(2))
	CALL WBFA(ISXY,IEXY)
C
200	RETURN
	END
C
	SUBROUTINE	LSG_PLANE_SELECT(WKID,MASK)
C
**	MODULE	LSG_PLANE_SELECT
**	IDENT	08JN87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Clarke Brunt	 8-Jun-1987
C
C Set plane selection mask
C
	IMPLICIT NONE
C
***	COMMON/GKSDAT/
***	COMMON/GKSESL/
C
C Arguments:
C
	INTEGER	WKID			! unused
	BYTE	MASK			! plane selection mask
C
C workspace
	INTEGER	LMASK
	BYTE	BMASK
	EQUIVALENCE (LMASK,BMASK)
C
	PSEL = MASK
	LMASK = 0
	BMASK = MASK
C
C make viewport 2 current, so 1 can be altered
C 2 must be made visible first
	CALL WVPV(WKID,2,1)
	CALL WCVP(WKID,2)
C
C modify viewport 1, to give new plane mask
	CALL WVPCR(WKID,1,0,0,1,0,LMASK,0,RASTX-1,0,RASTY-1,
     &			-32767,32767,-32767,32767)
C
C back to viewport 1, and reset it's window and viewport
C then make 2 invisible again
	CALL WCVP(1,1)
	CALL WVPV(WKID,2,0)
	CALL GSWKWN(WKID,WSWIN(1),WSWIN(2),WSWIN(3),WSWIN(4))
C
	RETURN
	END
C
	SUBROUTINE	LSG_PLANE_OFFSET(WKID,OFFSET)
C
**	MODULE	LSG_PLANE_OFFSET
**	IDENT	08JN87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Clarke Brunt	 8-Jun-1987
C
C Specify bit offset (shift) for writing index
C
	IMPLICIT NONE
C
***	COMMON/GKSDAT/
***	COMMON/GKSESL/
C
C Arguments:
C
	INTEGER	WKID			! unused
	INTEGER	OFFSET			! plane offset
C
	POFF = OFFSET
	RETURN
	END
C
	SUBROUTINE	LSG_ROTATION_MODE(WKID,ROT)
C
**	MODULE	LSG_ROTATION_MODE
**	IDENT	08JN87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Clarke Brunt	 8-Jun-1987
C
C Set rotation mode for pixel arrays
C
	IMPLICIT NONE
C
***	COMMON/GKSDAT/
***	COMMON/GKSESL/
C
C Arguments:
C
	INTEGER		WKID			! unused
	LOGICAL*1	ROT			! rotate?
C
	PIXROT = ROT
	RETURN
	END
C
	SUBROUTINE	LSG_PLANE_VISIBLE(WKID,MASK)
C
**	MODULE	LSG_PLANE_VISIBLE
**	IDENT	08JN87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Clarke Brunt	 8-Jun-1987
C
C Set plane visibility mask
C
	IMPLICIT NONE
C
***	COMMON/GKSDAT/
***	COMMON/GKSESL/
C
C Arguments:
C
	INTEGER	WKID			! unused
	BYTE	MASK			! visibility mask
C
C workspace
	INTEGER	LMASK
	BYTE	BMASK
	EQUIVALENCE (LMASK,BMASK)
C
	PVIS = MASK
C
	LMASK = 0
	BMASK = MASK
	CALL WSZVP(WKID,LMASK)
	CALL WUWK(WKID,0)		! flush it out
C
	RETURN
	END
C
	SUBROUTINE	LSG_ZOOM_IMAGE(WKID,PX,PY,ZF)
C
**	MODULE	LSG_ZOOM_IMAGE
**	IDENT	08JN87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Clarke Brunt	 8-Jun-1987
C
C Zoom image
C
	IMPLICIT NONE
C
***	COMMON/GKSDAT/
***	COMMON/GKSESL/
C
C Arguments:
C
	INTEGER	WKID			! unused
	REAL	PX,PY			! position (w.c.)
	INTEGER	ZF			! zoom factor
C
C no-op for Sigma6100
C
	RETURN
	END
C
	SUBROUTINE	LSG_SET_CURSOR(WKID,PX,PY,ON)
C
**	MODULE	LSG_SET_CURSOR
**	IDENT	08JN87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Clarke Brunt	 8-Jun-1987
C
C Set cursor position and visibility
C
	IMPLICIT NONE
C
***	COMMON/GKSDAT/
***	COMMON/GKSESL/
C
C Arguments:
C
	INTEGER	WKID			! unused
	REAL	PX,PY			! position (w.c.)
	LOGICAL*1	ON		! visible?
C
C workspace
	INTEGER	ION
	INTEGER	DX,DY			! device coordinate
C
C Convert world position to device coordinate
	CALL GKSW2V(1,PX,PY,DX,DY)
C
C move to position, and turn cursor on/off
	ION = 0
	IF (ON) ION = 1
	CALL WSCURS(0,0,0,ION,0,0)
	CALL WMOVCR(DX,DY)
C
	RETURN
	END
