C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1982-06-10 12:29:00.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION RDREAL(R)
C
***	MODULE	RDREAL
***	IDENT	10JN82
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
C Author: M.C. Fulford
C
C	Values returned conform with RDNUM	 DM	09-Jun-1982
C	Created					MCF	18-Sep-1979
C
C Reads a real number.
C Syntax of numbers is as FORTRAN real, but exponent may be
C represented by '&' as well as 'E'
C e.g.  -123.45&7       654.3&-21   -12.34
C Note that the exponent may not be preceded by a space.
C 
C The function result is .TRUE. if no number is found.
C
	BYTE	  ICH
	LOGICAL*1 NEGTVE,HADDOT,HADEXP
	REAL	  R			! result
C
	LOGICAL RDCH,RDCHS		! read characters
C
	R=0.0
	HADDOT=.FALSE.
	HADEXP=.FALSE.
	RDREAL=.TRUE.
C
C ... start of mantissa or exponent.
5	NEGTVE=.FALSE.					! implicit plus
C
C ... skip leading spaces or tabs, & deal with sign.
10	IF (RDCH(ICH)) GO TO 90
	IF (ICH.EQ.' ' .OR. ICH.EQ.9) GO TO 10
	IF (ICH.EQ.'+') GO TO 15
	IF (ICH.NE.'-') GO TO 20
	NEGTVE=.TRUE.
C
C ... now loop to extract digits
15	IF (RDCH(ICH)) GO TO 80
20	N=ICH-48
	IF (N.LT.0.OR.N.GT.9) GO TO 50
	RDREAL=.FALSE.				! got a number
	IF (NEGTVE) N=-N
	IF (HADEXP) GO TO 40
	IF (HADDOT) GO TO 30
C
	R=R*10.0 + FLOAT(N)			! digit before '.'
	GO TO 15
C
30	FRACTN=FRACTN*0.1			! digit after '.'
	R=R + FRACTN*FLOAT(N)
	GO TO 15
C
40	NEXP=NEXP*10 + N			! digit after '&' or 'E'
	GO TO 15
C
C ... not a digit - is it a 'legal' dot ?
50	IF (ICH.NE.'.') GO TO 60
	IF (HADDOT.OR.HADEXP) GO TO 70		! exit
	HADDOT=.TRUE.				! dot
	FRACTN=1.0
	GO TO 15
C
C ... then is it a legal '&' or 'E' ?
60	IF (ICH.NE.'&'.AND.ICH.NE.'E'.AND.ICH.NE.'e') GO TO 70	! exit
	IF (HADEXP.OR.R.EQ.0.0) GO TO 70	! trap E4 etc (invalid)
	HADEXP=.TRUE.
	NEXP=0
	GO TO 5
C
C ... end of the number.
70	CALL BSCH
80	IF (HADEXP) R=R*(10.0**NEXP)
C
90	RETURN
	END
C
	LOGICAL FUNCTION RREAL8(R)
	ENTRY	RDDBLE(R)
C
***	MODULE	RREAL8
***	IDENT	10JN82
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
C Author: D. Meader
C
C	1.3D2 etc recognised			 DM	10-Jun-1982
C	Values returned conform with RDNUM	 DM	09-Jun-1982
C	Created from RDREAL			 DM	19-Feb-1982
C
C Reads a double-length real number.
C Syntax of numbers is as FORTRAN real, but exponent may be
C represented by '&' as well as 'E'
C e.g.  -123.45&7       654.3&-21   -12.34
C Note that the exponent may not be preceded by a space.
C
C The function result is .TRUE. if no number is found.
C
	BYTE	  ICH
	LOGICAL*1 NEGTVE,HADDOT,HADEXP
	REAL*8	  FRACTN
	REAL*8	  R			! result
C
	LOGICAL RDCH,RDCHS		! read characters
C
	R=0.0D0
	HADDOT=.FALSE.
	HADEXP=.FALSE.
	RREAL8=.TRUE.
C
C ... start of mantissa or exponent.
5	NEGTVE=.FALSE.					! implicit plus
C
C ... skip leading spaces or tabs, & deal with sign.
10	IF (RDCH(ICH)) GO TO 90
	IF (ICH.EQ.' ' .OR. ICH.EQ.9) GO TO 10
	IF (ICH.EQ.'+') GO TO 15
	IF (ICH.NE.'-') GO TO 20
	NEGTVE=.TRUE.
C
C ... now loop to extract digits
15	IF (RDCH(ICH)) GO TO 80
20	N=ICH-48
	IF (N.LT.0.OR.N.GT.9) GO TO 50
	RREAL8=.FALSE.				! got a number
	IF (NEGTVE) N=-N
	IF (HADEXP) GO TO 40
	IF (HADDOT) GO TO 30
C
	R=R*1.0D1 + FLOAT(N)			! digit before '.'
	GO TO 15
C
30	FRACTN=FRACTN*0.1D0			! digit after '.'
	R=R + FRACTN*FLOAT(N)
	GO TO 15
C
40	NEXP=NEXP*10 + N			! digit after '&' or 'E'
	GO TO 15
C
C ... not a digit - is it a 'legal' dot ?
50	IF (ICH.NE.'.') GO TO 60
	IF (HADDOT.OR.HADEXP) GO TO 70		! exit
	HADDOT=.TRUE.				! dot
	FRACTN=1.0D0
	GO TO 15
C
C ... then is it a legal '&' or 'E' ?
60	IF (ICH.NE.'E'.AND.ICH.NE.'e'.AND.ICH.NE.'D'.AND.ICH.NE.'d'.AND.
     &	    ICH.NE.'&') GO TO 70		! exit
	IF (HADEXP.OR.R.EQ.0.0D0) GO TO 70	! trap E4 etc (invalid)
	HADEXP=.TRUE.
	NEXP=0
	GO TO 5
C
C ... end of the number.
70	CALL BSCH
80	IF (HADEXP) R=R*(1.0D1**NEXP)
C
90	RETURN
	END
