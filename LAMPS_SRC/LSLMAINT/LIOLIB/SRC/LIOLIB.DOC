	LIOLIB - Input/Output library for Laseraid system
	=================================================

0. INTRODUCTION
---------------

	LIOLIB is a library which contains a set of I/O routines which
are the result of gathering together and standardising the various
routines developed for the Laseraid suite of programs. These routines
are designed to be used to augment/replace the Fortran library I/O
routines and can be used in two ways:

	(A) For programs such as Laseraid or SOL, which do not use
	    the Fortran I/O system, these routines provide a way
	    of providing console I/O without wasting valuable 
	    memory space which would be the case if the Fortran
	    I/O system were to be invoked.

	(B) The other use is for programs which use the normal file
	    I/O routines (OPEN, ASSIGN, CLOSE etc.) that are provided,
	    but which require more convenient encode/decode facilities
	    than are provided by the Fortran library (various IFF
	    utility programs for example.)

	In the following decription, optional arguments are enclosed in
square brackets thus: [NCHS]

	This library may be found in [30,4]LIOLIB.OLB, the sources being
in DB:[30,4]

1. COMMON BLOCKS
----------------

	Two blocks are provided, one for a line which is to be decoded
and the other for a line that has been encoded.

	COMMON /TXTC/ DCPTR, TXTPTR, TXTLIM, TXTBUF(80)

	INTEGER DCPTR		the index of the next character to be
				decoded.
	INTEGER TXTPTR		the number of characters in the line
	INTEGER TXTLIM		the size of TXTBUF (initially set to 80)
	BYTE TXTBUF(80)		the array holding the line. The length
				can be increased by re-defining the array
				in a COMMON statement in the user program
				and setting TXTLIM appropriately.

	COMMON /EXPC/ EXPLEN, EXPVFC, EXPBUF(80)

	INTEGER EXPLEN		number of characters encoded.
	INTEGER EXPVFC		vertical format control character
	INTEGER EXPBUF(80)	array holding the line. The length can
				also be increased by providing a new
				COMMON definition statement.

2. I/O ROUTINES
---------------

	There are three kinds of I/O routines, dealing with:
		(i) reading command lines
		(ii) general file I/O
		(iii) terminal-only I/O


2.1 READ COMMAND LINE
---------------------

	GETCML (BUF, IRC, [PROMPT] , [LUN] )

	BYTE BUF(80)		buffer to receive command line (which
				will have a null byte appended to it.)
	INTEGER IRC		return code, thus:
				    +n - number of characters in line
				     0 - blank line
				    -n - error (-10 is end of file)
	BYTE PROMPT()		prompt string, usually supplied as
				a literal string. If omitted, a prompt
				is manufactured from the task name.
	INTEGER LUN		unit number, 5 by default. This unit
				should not be used for any other purpose.

	GETCML provides a means of obtaining command lines, with all
the required options, including indirect command files, handled
automatically. The basic method is for the program to keep asking for
command lines until 'end of file' is returned, at which point the program
should exit. This will then enable the task to be invoked in the usual
ways, for example:

	>TSK command line

	>TSK
	TSK> command line
	TSK> command line
	TSK> @indirect
	TSK> command line
	TSK> ^Z

	>RUN TSK
	TSK> command line
	TSK> ^Z

	>TSK @indirect

	This routine returns a logical result which is .TRUE. if the
line returned is the MCR line. This information is quite useless, 
except for a certain eccentric program (namely IED.)

2.2 TERMINAL I/O
----------------

	These few routines use the unit defined by the contents of
the location .MOLUN (which is assigned to TI:) and therefore require to
be task built with the Fortran library (a fairly common occurrence) or
that this location be preset & the unit assigned explicitly.

2.2.1 read a line from the terminal
-----------------------------------

	CALL TTRLIN ([BUF], [NCHS], [LEN])

	BYTE BUF()		array to receive the line
	INTEGER NCHS		number of characters read
	INTEGER LEN		maximum length of line

	If any of the arguments are omitted, defaults from COMMON/TXTC/
are used. Thus CALL TTRLIN is equivalent to CALL TTRLIN(TXTBUF,TXTLIM,TXTPTR).

2.2.2 Write a line to terminal
------------------------------

	CALL TTWLIN ([BUF], [NCHS], [VFC])	write line to terminal

	BYTE BUF()		array holding line
	INTEGER NCHS		length of line
	BYTE VFC		vertical format character

	If BUF is omitted, EXPBUF is used; if NCHS is omitted, the
length is determined by the terminating null byte of BUF; and if VFC
is omitted, EXPVFC is used. Thus the following calls are possible:

	CALL TTWLIN('line to be typed')
	CALL TTWLIN(ARRAY,LEN)
	CALL TTWLIN('Type in value:',,'$')
	CALL TTWLIN

	Where the last call types out the contents of /EXPC/.

	EXPVFC is always reset to 'space' by TTWLIN ( & is preset to it
at load time.) In general, vertical formatting can be ignored, but for
special effects see table 2-11 of the I/O drivers reference manual.

	CALL MSG([BUF])

	BYTE BUF()		array of characters, with null terminator

	Writes a line to the terminal, preceded by the task name. Thus
CALL MSG('error 49') produces:

	...H2O -- error 49

	As in TTWLIN, if BUF is ommitted, EXPBUF is used.

2.2.3 Attach & detach terminal
------------------------------

	CALL TTATT		attaches it
	CALL TTDET		detaches it

2.3 GENERAL DEVICE I/O
----------------------

	These routines allow access to any file-structured device (which
of course includes TI:) using the Fortran library to set up device names
etc. The functions for opening files & reading & writing lines return
a logical result which is .TRUE. if an error occurred. The value of the
error code can be obtained by supplying an argument to the function. This
allows the routines to be used in the following way:

	LOGICAL FLROPN
	CALL ASSIGN (4, 'SY:INPUT.DAT')
	IF (FLROPN(4, IERR)) GOTO 900
	.. process file ..

900	CALL WRITEF('Error %N when opening file', IERR)
	...

2.3.1 Opening files
-------------------

	err = FLROPN (LUN, [IERR])	opens file for reading on unit
					LUN, returning error code in IERR.
					Opening a file also selects it, as
					more than one file can be open at 
					a time.

	err = FLWOPN (LUN, [IERR])	as FLROPN, but for writing.

	FLWSEL (LUN)			selects unit for writing
	FLRSEL (LUN)			selects unit for reading

2.3.2 reading & writing
-----------------------

	err = FLRLIN ([BUF], [NCHS], [LEN], [IERR])
					is equivalent to TTRLIN

	err = FLWLIN ([BUF], [NCHS], [IERR])
					is equivalent to TTWLIN

2.3.3 closing files
-------------------

	FLWCLO				closes the current output file

	FLWPRT				spools the current output file

	FLRCLO				closes input file

3. ENCODING & DECODING
----------------------

	The basic routines manipulate the contents of the two text buffers.
The I/O routines can be used to read & write using these buffers.

3.1 ENCODING INTO /EXPC/
------------------------

	EXPAND (FORMAT, ARG1, ARG2, ARG3, ARG4 ...)

				The byte vector FORMAT (usually a literal string)
			is copied into EXPBUF until a null byte is found,
			with certain escape characters causing the arguments
			to be encoded. The escape character is % and the 
			combination %x in the format causes the next argument
			to be encoded in various ways, depending on what the
			character x is. 
	
			%C -  1 or 2 ASCII chars
			%N -  a minimum width integer (decimal)
			%In - a signed integer of width n (default 6)
			%Ln - as for %In but a long integer (default width minimum)
			%On - unsigned octal integer, width n (default minimum)
			%Ed -  a real number with D digits (default 4)
			%&d - as %E but uses '&' for subscipt 10
			%Sn -  a .ASCIZ string - maximum of n chars (default 80.)
			%Ff.d - a fixed field real
			  F & D both optional, defaults 9 & 3
			%R - 3 RAD50 characters (also %5)
			%W - next arg replaces EXPBUF as buffer
			%Q - return length of line so far to next arg

				The following combinations do not take an argument
			%% - output %
			%  - %space is ignored and can terminate numbers
			%T - tab
			%Px - set padding character for integers to x
			%Bn - set base for next integer to n (default 10.)
			%U - set unsigned mode for next integer
			%M - 'S' or <null> depending on multiplicity of
				last integer output with %I,%N,%L or %O
			%m - as %M but produces 's' (lower case)
			%$ - set prompt format controls
			%(n ...%) - repeat section n (default 1) times

	APPEND			is the same as EXPAND, but appends the text
			to the end of the string already in EXPBUF.

	Calling EXPAND with no arguments sets up a null line in /EXPC/,
calling APPEND with no arguments does nothing.

3.2 DECODING FROM /TXTC/
------------------------

	end = RDCH (ICH)	returns the next character from the buffer
			in the byte variable ICH. The result of the function
			is "end of line reached" (in which case ICH is zero.)

	BSCH			backspaces one character

	BSLN			backspaces to start of line,note that
				this routine must be called explicitly
				whenever a line has been read in and is
				to be decoded.

4. USEFUL ROUTINES
------------------

	Several routines are provided which use the above-mentioned routines
to provide a set of useful operations.

	end = RDCHS(ICH)	as RDCH but skips any spaces

	nodig = RDINT(N)	reads a signed decimal integer, returning
				the value in the integer N. The result of
				the function is .TRUE. if no digits were
				read.

	nodig = RDREAL(R)	as RDINT, but reads a real number

	nodig = RDOCT(N)	as RDINT, but reads an octal number

	nodig = RDLONG(N)	as RDINT, but returns an INTEGER*4 value

	error = RDFILT(BUF, BUFLEN, DEF, ALLNUM, ALLVER, ALLBLK, IRC)
				reads a general file name, filling in
				missing items from a default file name.

		BYTE BUF()	buffer to receive file name
		INTEGER BUFLEN	length of BUF
		BYTE DEF()	default filename (usually a literal string)
		LOGICAL*1 ALLNUM allow special 'numerical' filenames
		LOGICAL*1 ALLVER allow version numbers in filename
		LOGICAL*1 ALLBLK allow blank filenames
		INTEGER IRC	return code:
					+n - number of characters in BUF
					 0 - blank filename (only if ALLBLK set)
					-n - error in filename

	WRITEF			as EXPAND, but calls TTWLIN afterwards

	FLWRTF			as EXPAND, but calls FLWLIN afterwards

	MSGF			as EXPAND, but calls MSG afterwards




					M.C.Fulford
