C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-07-08 09:58:08.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION GKS_CLIP_POLY(LIMIT,XORY,HILO,
     &	 NPOLY,MAXPOL,POLPTR,NEWPOL,NPTS,MAXPTS,PTS,PPTR)
C
**	MODULE	GKS_CLIP_POLY
**	IDENT	08JL92
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Clarke Brunt	26-Jan-1991
C
C Clip one or more polygons to a single horizontal/vertical line
C Returns number of output polygons (which is also in NPOLY)
C The arguments are left ready for another call with a different line
C
C This version does not increase the number of polygons (which is
C usually 1). Connecting lines are left along the clipping limit.
C The routine from which it was derived has two extra arguments,
C MAXINT and INTPT, which may still be being passed by calling
C routines. The back pointers in PPTR are no longer used, but are again
C retained for compatibility.
C
	IMPLICIT NONE
C
C On entry LIMIT contains the clipping limit, XORY is 1 if limit is X
C and 2 if Y, HILO is 1 if want stuff above limit or -1 if below.
C PTS is an array of data points in no particular order - NPTS are
C presently used and more may be added on the end by this routine.
C NPOLY is the number of input polygons. POLPTR contains an index into
C PTS for a single point belonging to each polygon.
C PPTR contains indices of next/previous connected points.
C The polygons are traced using these pointers until they return to
C their start - the start/end point need not be duplicated.
C NEWPOL is a workspace array which is copied back into POLPTR
C on completion.
C MAXPOL - max number of resulting polygons.
C
C The output of the routine is a number of polygons constructed the
C the same way as for input.
C
C Arguments
	REAL	LIMIT		! in - the clipping limit
	INTEGER	XORY 		! in - 1 if x limit, 2 if y
	INTEGER	HILO 		! in - 1 if high side wanted, 2 if low
	INTEGER	NPOLY		! in/out - number of polygons
	INTEGER	MAXPOL		! in - max number of polygons
	INTEGER	POLPTR(MAXPOL)	! in/out - pointers to a point for each poly
	INTEGER	NEWPOL(MAXPOL)	! workspace - ditto
	INTEGER	NPTS		! in/out - number of used points in PTS,PPTR
	INTEGER	MAXPTS		! in - max number of points
	REAL	PTS(2,MAXPTS)	! in/out - data points
	INTEGER	PPTR(2,MAXPTS)	! in/out - for/back pointers
C
C Internal variables
	INTEGER	P,I
	REAL	U1,U2
	INTEGER	FIRST,NEXT,PREV,LEFT
	LOGICAL	INSIDE
	INTEGER	NNEW
C
	NNEW = 0		! no new polygons to start with
C
C For each polygon
	DO 500 P=1,NPOLY
C
C Find a point that is definitely inside - if none then forget this polygon
	   FIRST = POLPTR(P)
	   I = FIRST
C
C get distance that point is inside limit
110	   U2 = (PTS(XORY,I)-LIMIT)*HILO
	   IF (U2.LE.0.0) THEN
	      I = PPTR(1,I)
	      IF (I.EQ.FIRST) GOTO 500	! entire polygon is clipped
	      GOTO 110
	   ENDIF
	   INSIDE = .TRUE.		! now inside unclipped area
	   FIRST = I			! begin with this point
	   NEXT = PPTR(1,I)
C
200	   PREV = I
	   I = NEXT
	   NEXT = PPTR(1,I)
	   U1 = U2
C
C get distance that next point is inside limit
	   U2 = (PTS(XORY,I)-LIMIT)*HILO
C
C If both points on/outside limit, then if we are already outside limit
C do nothing, but if inside then remember leaving at previous point
	   IF (U1.LE.0.0.AND.U2.LE.0.0) THEN
	      IF (INSIDE) THEN
	         LEFT = PREV
	         PPTR(1,PREV) = 0	! point nowhere
	         INSIDE = .FALSE.
	      ENDIF
C
C If both points on/inside limit, then if we are already inside limit
C do nothing, but if outside then connect previous point up to the point
C where we left
	   ELSEIF (U1.GE.0.0.AND.U2.GE.0.0) THEN
	      IF (.NOT.INSIDE) THEN
	         PPTR(1,LEFT) = PREV
	         PPTR(2,PREV) = LEFT
	         LEFT = 0
	         INSIDE = .TRUE.
	      ENDIF
	   ELSE				! crosses clip line
C
C If we reach here, we have a line that crosses the clipping limit, so
C generate a new intersection point and set pointers to include it.
C
	      IF (NPTS.GE.MAXPTS) THEN
	         CALL WRITEF('GKS_CLIP_POLY - too many points in polygon')
	         GOTO 500
	      ENDIF
	      NPTS = NPTS+1
	      PTS(XORY,NPTS) = LIMIT
	      PTS(3-XORY,NPTS) =
     &		(PTS(3-XORY,I)*U1-PTS(3-XORY,PREV)*U2)/(U1-U2)
	      IF (U1.LT.0.0) THEN	! implies U2.GT.0.0
	         PPTR(1,LEFT) = NPTS
	         PPTR(1,NPTS) = I
	         PPTR(2,NPTS) = LEFT
	         PPTR(2,I) = NPTS
	         LEFT = 0
	         INSIDE = .TRUE.
	      ELSE			! implies U2.LT.0.0,U1.GT.0.0
	         LEFT = NPTS
	         PPTR(1,NPTS) = 0	! point nowhere
	         PPTR(2,NPTS) = PREV
	         PPTR(1,PREV) = NPTS
	         INSIDE = .FALSE.
	      ENDIF
	   ENDIF
C
C If not back to starting point yet, then proceed with next point
	   IF (I.NE.FIRST) GOTO 200
C
C Add clipped polygon to output list
	   IF (NNEW.GE.MAXPOL) THEN
	      CALL WRITEF('GKS_CLIP_POLY - too many polygons')
	      GOTO 500
	   ENDIF
	   NNEW = NNEW+1
	   NEWPOL(NNEW) = FIRST
C
500	CONTINUE
C
C copy new polygons back to old ones
	NPOLY = NNEW
	DO 600 I=1,NPOLY
	   POLPTR(I) = NEWPOL(I)
600	CONTINUE
C	
	GKS_CLIP_POLY = NPOLY	! return number of output polygons
	RETURN
C
	END
