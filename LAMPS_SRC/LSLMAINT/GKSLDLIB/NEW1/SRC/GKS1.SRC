C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-03-26 13:01:54.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C 	CONTROL FUNCTIONS
C	=================
C
	SUBROUTINE	GOPKS(ERRFIL)
C
**	MODULE	GOPKS
**	IDENT	26MR92
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					SCM	27-July-1983
C
	IMPLICIT NONE
C
	EXTERNAL GKSBLK		! ensure that block data is linked in
C
C OPEN GKS	- includes initialising of data structures and variables
C
C Arguments:
	INTEGER	ERRFIL			! error message file
C
C
***	COMMON/GKSDAT1/			! GKS data structures
***	COMMON/GKSESL/			! GKS error state list
C
C Set up initial indices and  default modes
	GKSERR 	= 0		! no errors yet
	TRNCUR	= 1		! use normalisation transformation 0
	PLIND	= 1		! use polyline bundle table 1
	ENCLIP	= .TRUE.	! enable clipping
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GCLKS
C
**	MODULE	GCLKS
**	IDENT	27JL83
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					SCM	27-July-1983
C
C CLOSE GKS	
C
	IMPLICIT NONE
C
***	COMMON/GKSESL/
C
	GKSERR	= 0				! no errors
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GOPWK(WKID,CONID,WTYPE)
C
**	MODULE	GOPWK
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					SCM	27-Jul-1983
C Add initialise fill area update		TJI	27-Nov-1984
C
C OPEN WORKSTATION   - sets up World Coordinates and Normalised Device
C			  Coordinates to be 1 metre on the film with the
C			  origin at the bottom left hand corner
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	WKID			! workstation-identifier
	INTEGER	CONID			! connection-identifier
	INTEGER	WTYPE			! workstation type
C
***	COMMON/GKSDAT1/
***	COMMON/GKSESL/
***	COMMON/THKPAR/			! LDLIB common block
C
C Local variables
	REAL NULL
C
	GKSERR	= 0			! no errors
C
C set up correct device units (mm or cm)
	CALL GKSUNI
C
20	WKIDS = WKID
	DEFER = GASTI	! deferral mode is At Some TIme
	REGEN = GSUPPD	! implicit regeneration suppressed
	UPTRN = .TRUE.	! update transformation
	UPLIN = .TRUE.	! update polyline attributes
	UPFA  = .TRUE.	! update fill area attributes
	UPTX  = .TRUE.	! update text attributes
C
	CCOLI = -1	! ensure colour set first time round
	CLWID = 0.0	! and linewidth
	CTXHGT = -1.0	! and text height
C
C LDLIB (or WOSPLIB etc. device). Pass CONID and WTYPE in case useful.
	CALL	LDINIT(INIARG,CONID,WTYPE)
C
C Make sure that MSPOT and MSEP in common /THKPAR/ have non-zero values
C (they should have been set by LDLIB)
C If preset, MSPOT is the line thickness and MSEP is the line
C separation to give solid fill in device units (cm, mm, or whatever,
C according to DCUNIT). If unset, then we set them to be 0.0001 metres
	IF (MSPOT.LE.0.0) MSPOT = DCUNIT*0.0001
	IF (MSEP .LE.0.0) MSEP  = MSPOT
C
C Get the size of the available film area in device units.
C Device units are considered to be mms, so if they are, for example,
C cms (such as on the BENSON plotter) then the plot will be 10 times
C too large
	CALL LDFPPM(4,NULL,DCMAXX,DCMAXY)
C
C use -1 version of ORIGIN (device units), this is what WOSPLIB does
	CALL ORIGIN(-DCMAXX/2,-DCMAXY/2,-1)
	CALL UNITS(DCUNIT)
C
	GNOMLW  = MSPOT
	GNOMSEP = MSEP
C
C Convert to metres
	DCMAXX  = DCMAXX/DCUNIT
	DCMAXY  = DCMAXY/DCUNIT
	GNOMLW  = GNOMLW/DCUNIT
	GNOMSEP = GNOMSEP/DCUNIT
C
C Set workstation viewport to entire area
	CALL GSWKVP(WKID,0.0,DCMAXX,0.0,DCMAXY)
C
999	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GCLWK(WKID)
C
**	MODULE	GCLWK
**	IDENT	27JL83
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					SCM	27-July-1983
C
C CLOSE WORKSTATION
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	WKID			! workstation-identifier
C
***	COMMON/GKSDAT1/
***	COMMON/GKSESL/
C
	GKSERR = 0
	CALL LDINIT(0)
C
9999	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GACWK(WKID)
C
**	MODULE	GACWK
**	IDENT	27JL83
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					SCM	27-July-1983
C
C ACTIVATE WORKSTATION
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	WKID			! workstation-identifier
C
***	COMMON/GKSDAT1/
***	COMMON/GKSESL/
C
	GKSERR = 0
	WSACT = .TRUE.
9999	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GDAWK(WKID)
C
**	MODULE	GDAWK
**	IDENT	27JL83
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					SCM	27-July-1983
C
C DEACTIVATE WORKSTATION
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	WKID			! workstation-identifier
C
***	COMMON/GKSDAT1/
***	COMMON/GKSESL/
C
	GKSERR = 0
	WSACT = .FALSE.
9999	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GCLRWK(WKID,COFL)
C
**	MODULE	GCLRWK
**	IDENT	29FE84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					RD	14-Nov-1983
C
C CLEAR WORKSTATION
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	WKID			! workstation-identifier
	INTEGER COFL			! control flag
C
***	COMMON/GKSDAT1/
***	COMMON/GKSESL/
C
	GKSERR = 0
	CALL LDWAIT			! execute all deferred actions
	IF (PC) THEN
	   CALL PCFRAM(1.0)
	ELSE
	   CALL DIFRAM(1)
	ENDIF
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GUWK(WKID,REGFL)
C
**	MODULE	GUWK
**	IDENT	16MY84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					CCB	16-May-1984
C
C UPDATE WORKSTATION
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	WKID			! workstation-identifier
	INTEGER	REGFL			! regeneration flag
C
***	COMMON/GKSDAT1/
***	COMMON/GKSESL/
C
	GKSERR = 0
	CALL LDWAIT
C
9999	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GSDS(WKID,DEFMOD,REGMOD)
C
**	MODULE	GSDS
**	IDENT	27JL83
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					SCM	27-July-1983
C
C SET DEFERRAL STATE
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	WKID			! workstation-identifier
	INTEGER	DEFMOD			! deferral mode
	INTEGER	REGMOD			! implicit regeneration mode
C
***	COMMON/GKSDAT1/
***	COMMON/GKSESL/
C
	GKSERR = 0
	IF (DEFMOD .LT. GASAP .OR. DEFMOD .GT. GASTI) GOTO 10
	DEFER = DEFMOD
C
C nasty call to GUWK (second argument ignored)
	IF (DEFER.EQ.GASAP.AND.WSACT) CALL GUWK(WKID,0)
10	IF (REGMOD .LT. GSUPPD .OR. REGMOD .GT. GALLOW) GOTO 9999
	REGEN= REGMOD
C
9999	RETURN
	END
C
C***********************************************************************
C
C	OUTPUT FUNCTIONS
C	================
C
	SUBROUTINE	GPL(N,PX,PY)
C
**	MODULE	GPL
**	IDENT	28OC83
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					SCM	27-July-1983
C
C POLYLINE
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER N			! number of points
	REAL	PX(N)			! X coords of points in WC
	REAL	PY(N)			! Y coords of points in WC
C
***	COMMON/GKSDAT1/
***	COMMON/GKSESL/
C
C Functions:
	LOGICAL	GKCLIP			! clips a straight line to
					! rectangular boundaries
C
C Internal variables:
	INTEGER	I			! loop variable
	REAL	PX1,PX2,PY1,PY2		! X and Y coordinates
	REAL	CURX,CURY		! current position
C
	GKSERR	= 0
C
	IF (N.LT.2) THEN
	   GKSERR = 100
	   GOTO 9999
	ENDIF
C
C
C Is this workstation active?
	   IF (.NOT.WSACT) GOTO 100
C
C Make sure transformation is up to date
	   IF (UPTRN) CALL GUPTRN
C
C Is everything clipped ?
	   IF (CLPALL) GOTO 100
C
C Make sure polyline attributes are up to date
	   IF (UPLIN) CALL GUPLIN
C
C unset current position to force move
	   CURX = 1E38
	   CURY = 1E38
C
C Loop for each segment of this polyline.
	   DO 90 I = 1, N-1
	      PX1 = PX(I)
	      PY1 = PY(I)
	      PX2 = PX(I+1)
	      PY2 = PY(I+1)
	      IF (ENCLIP) THEN
	         IF (GKCLIP(PX1,PY1,PX2,PY2)) GOTO 90
	      ENDIF
C transform World Coordinates to Workstation Device Coordinates
	      PX1 = (PX1*SCALEX)+OFFX
	      PX2 = (PX2*SCALEX)+OFFX
	      PY1 = (PY1*SCALEY)+OFFY
	      PY2 = (PY2*SCALEY)+OFFY
	      IF (PX1.NE.CURX.OR.PY1.NE.CURY) CALL MOVTO(PX1,PY1)
	      CALL LINTO(PX2,PY2)
	      CURX = PX2		! update current position
	      CURY = PY2
90	   CONTINUE
	   IF (DEFER .EQ. GASAP) THEN
	      CALL LDWAIT
	   ENDIF
100	CONTINUE
C
9999	RETURN
	END
C
C***********************************************************************
C
C	OUTPUT ATTRIBUTES (Workstation independent primitive attributes)
C	=================
C
C
	SUBROUTINE	GSPLI(INDEX)
C
**	MODULE	GSPLI
**	IDENT	29FE84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					SCM	27-July-1983
C
C SET POLYLINE INDEX
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	INDEX			! polyline index
C
***	COMMON/GKSDAT1/
***	COMMON/GKSESL/
C
	GKSERR	= 0			! no errors yet
	IF (INDEX .LT. 1 .OR. INDEX .GT. PLMAX) GOTO 10
	IF (INDEX .EQ.PLIND) GOTO 20	! if current already, ignore
	PLIND = INDEX			! set it to current index
	UPLIN = .TRUE.		! attributes need updating
	GOTO 20
C
10	GKSERR = 60			! polyline index is invalid
C
20	RETURN
C
	END
C
C***********************************************************************
C
	SUBROUTINE	GSLN(LTYPE)
C
**	MODULE	GSLN
**	IDENT	26AP84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Clarke Brunt	26-April-1984
C
C SET LINETYPE
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	LTYPE			! linetype
C
***	COMMON/GKSDAT1/
***	COMMON/GKSESL/
C
	GKSERR = 0
	IF (LTYPE.LE.0) GOTO 10
	ILTYPE = LTYPE
	UPLIN = .TRUE.		! attributes need updating
	GOTO 20
10	GKSERR = 62			! linetype .LE. 0
20	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GSLWSC(LWIDTH)
C
**	MODULE	GSLWSC
**	IDENT	26AP84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Clarke Brunt	26-April-1984
C
C SET LINEWIDTH SCALE FACTOR
C
	IMPLICIT NONE
C
C Arguments:
	REAL	LWIDTH			! linewidth scale factor
C
***	COMMON/GKSDAT1/
***	COMMON/GKSESL/
C
	GKSERR = 0
C
	IF (LWIDTH.LE.0.0) GOTO 10
	ILWID = LWIDTH
	UPLIN = .TRUE.		! attributes need updating
	GOTO 20
10	GKSERR = 90			! linewidth scale factor .LE. 0
20	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GSPLCI(COLI)
C
**	MODULE	GSPLCI
**	IDENT	26AP84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Clarke Brunt	26-April-1984
C
C SET POLYLINE COLOUR INDEX
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	COLI			! polyline colour index
C
***	COMMON/GKSDAT1/
***	COMMON/GKSESL/
C
	GKSERR = 0
	IF (COLI.LT.0) GOTO 10
	ICOLI = COLI
	UPLIN = .TRUE.		! attributes need updating
	GOTO 20
10	GKSERR = 85			! colour index .LT. 0
20	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GSASF(LASF)
C
**	MODULE	GSASF
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Clarke Brunt	26-April-1984
C Update of fill area required, too	Tony J Ibbs	27-Nov-1984
C
C SET ASPECT SOURCE FLAGS
C
	IMPLICIT NONE
C
***	COMMON/GKSDAT1/
***	COMMON/GKSESL/
C
C Arguments:
	INTEGER	LASF(ASFMAX)			! list of flags
C
	INTEGER	I				! loop counter
C
	GKSERR = 0
	DO 11 I=1,ASFMAX
	   GASF(I) = LASF(I)
11	CONTINUE
	UPLIN = .TRUE.		! polyline attributes need updating
	UPFA  = .TRUE.		! also fill area attributes
	UPTX  = .TRUE.		! also text attributes
C
	RETURN
	END
C
C***********************************************************************
C
C	WORKSTATION ATTRIBUTES (Representations)
C	========================================
C
C
	SUBROUTINE	GSPLR(WKID,PLI,LTYPE,LWIDTH,COLI)
C
**	MODULE	GSPLR
**	IDENT	29FE84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					SCM	27-Jul-1983
C Colour added					PGH	29-Feb-1984
C
C SET POLYLINE REPRESENTATION
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	WKID			! workstation-identifier
	INTEGER	PLI			! polyline index
	INTEGER	LTYPE			! linetype
	REAL	LWIDTH			! line width scale factor
	INTEGER	COLI			! colour index
C
***	COMMON/GKSDAT1/
***	COMMON/GKSESL/
C
	GKSERR = 0
	IF (PLI .LT. 1 .OR. PLI .GT. PLMAX ) GOTO 10
	IF (LTYPE .LE. 0) GOTO 20
	IF (LWIDTH .LE. 0) GOTO 30
	IF (COLI .LT. 0 ) GOTO 40
	PLTYPE(PLI) = LTYPE		! store values in bundle table
	PLWDTH(PLI) = LWIDTH
	PLCOL(PLI)  = COLI
	IF (PLI .NE. PLIND) GOTO 9999	! apply if current index
	UPLIN = .TRUE.		! attributes need updating
	GOTO 9999
C
10	GKSERR	= 60			! polyine index is invalid
	GOTO 9999
20	GKSERR	= 62			! linetype is invalid
	GOTO 9999
30	GKSERR	= 90			! linewidth scale factor invalid
	GOTO 9999
40	GKSERR	= 86			! colour index is invalid
C
9999	RETURN
C
	END
C
C***********************************************************************
C
C	TRANSFORMATION FUNCTIONS
C	========================
C
C
	SUBROUTINE	GSWN(TRN,XMIN,XMAX,YMIN,YMAX)
C
**	MODULE	GSWN
**	IDENT	27JL83
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					SCM	27-July-1983
C
C SET WINDOW 
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	TRN			! window number
	REAL	XMIN,XMAX,YMIN,YMAX	! rectangular boundaries
C
***	COMMON/GKSDAT1/
***	COMMON/GKSESL/
C
	INTEGER TRNTMP			! temporary copy of TRN so as
C					! not to pass back new value.
C
	GKSERR	= 0			! no errors yet
	TRNTMP=TRN+1			! convert to Fortran index
	IF (TRNTMP .LT. 1 .OR. TRNTMP .GT. TRNMAX) GOTO 10
	IF (XMAX .LE. XMIN .OR. YMAX .LE. YMIN) GOTO 20
	WINDOW(1,TRNTMP) = XMIN
	WINDOW(2,TRNTMP) = XMAX
	WINDOW(3,TRNTMP) = YMIN
	WINDOW(4,TRNTMP) = YMAX
	UPTRN = .TRUE.		! transformation needs updating
	GOTO 30
C
10	GKSERR	= 50			! transformation invalid
	GOTO 30
20	GKSERR	= 51			! rectangle definition invalid
C
30	RETURN
C
	END
C
C***********************************************************************
C
	SUBROUTINE	GSVP(TRN,XMIN,XMAX,YMIN,YMAX)
C
**	MODULE	GSVP
**	IDENT	27JL83
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					SCM	27-July-1983
C
C SET VIEWPORT
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	TRN			! viewport number
	REAL	XMIN,XMAX,YMIN,YMAX	! rectangular boundaries
C
***	COMMON/GKSDAT1/
***	COMMON/GKSESL/
C
	INTEGER TRNTMP			! temporary copy of TRN so as
C					! not to pass back new value.
C
	GKSERR	= 0			! no errors yet
	TRNTMP = TRN+1			! convert to Fortran index
	IF (TRNTMP .LT. 1 .OR. TRNTMP .GT. TRNMAX) GOTO 10
	IF (XMAX .LE. XMIN .OR. YMAX .LE. YMIN) GOTO 20
	IF (XMIN .LT. 0.0 .OR. XMAX .GT. 1.0 .OR.
     &	    YMIN .LT. 0.0 .OR. YMAX .GT. 1.0) GOTO 30
	VIEWPT(1,TRNTMP) = XMIN
	VIEWPT(2,TRNTMP) = XMAX
	VIEWPT(3,TRNTMP) = YMIN
	VIEWPT(4,TRNTMP) = YMAX
	UPTRN = .TRUE.		! transformation needs updating
	GOTO 40
C
10	GKSERR	= 50		! transformation number invalid
	GOTO 40
20	GKSERR	= 51		! rectangle definition is invalid
	GOTO 40
30	GKSERR	= 53		! viewport not within NDC unit square
C
40	RETURN
C
	END
C
C***********************************************************************
C
	SUBROUTINE	GSWKWN(WKID,XMIN,XMAX,YMIN,YMAX)
C
**	MODULE	GSWKWN
**	IDENT	27OC83
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					RD	27-Oct-1983
C
C SET WORKSTATION WINDOW
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	WKID			! workstation-identifier
	REAL	XMIN,XMAX,YMIN,YMAX	! rectangular boundaries
C
***	COMMON/GKSDAT1/
***	COMMON/GKSESL/
C
	GKSERR = 0
	IF (XMAX .LE. XMIN .OR. YMAX .LE. YMIN) GOTO 20
	IF (XMIN .LT. 0.0 .OR. XMAX .GT. 1.0 .OR.
     &	    YMIN .LT. 0.0 .OR. YMAX .GT. 1.0) GOTO 30
	WSWIN(1) = XMIN
	WSWIN(2) = XMAX
	WSWIN(3) = YMIN
	WSWIN(4) = YMAX
	UPTRN = .TRUE.
	GOTO 9999
C
20	GKSERR	= 51	! rectangle definition is invalid
	GOTO 9999
30	GKSERR	= 53	! workstation window not within NDC unit square
C
9999	RETURN
C
	END
C
C***********************************************************************
C
	SUBROUTINE	GSWKVP(WKID,XMIN,XMAX,YMIN,YMAX)
C
**	MODULE	GSWKVP
**	IDENT	27OC83
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					RD	27-Oct-1983
C
C SET WORKSTATION VIEWPORT
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	WKID			! workstation-identifier
	REAL	XMIN,XMAX,YMIN,YMAX	! rectangular boundaries
C
***	COMMON/GKSDAT1/
***	COMMON/GKSESL/
C
	GKSERR = 0
	IF (XMAX .LE. XMIN .OR. YMAX .LE. YMIN) GOTO 20
	IF (((XMAX-XMIN) .GT. DCMAXX) .OR.
     &	    ((YMAX-YMIN) .GT. DCMAXY)) GOTO 30
	WSVIEW(1) = XMIN
	WSVIEW(2) = XMAX
	WSVIEW(3) = YMIN
	WSVIEW(4) = YMAX
	UPTRN = .TRUE.
	GOTO 9999
C
20	GKSERR = 51	! rectangle definition invalid
	GOTO 9999
30	GKSERR = 54	! workstation viewport not within display space
C
9999	RETURN
C
	END
C
C***********************************************************************
C
	SUBROUTINE	GSELNT(TRN)
C
**	MODULE	GSELNT
**	IDENT	27OC83
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					SCM	27-July-1983
C
C SELECT NORMALISATION TRANSFORMATION
C and set clipping limits to viewport
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	TRN			! transformation number
C
***	COMMON/GKSDAT1/
***	COMMON/GKSESL/
C
	INTEGER TRNTMP		! temporary copy of TRN so as not to
C				! pass back new value
	GKSERR	= 0			! no errors yet
	TRNTMP=TRN+1			! convert to Fortran index
	IF (TRNTMP .LT. 1 .OR. TRNTMP .GT.TRNMAX) GOTO 10
	TRNCUR	= TRNTMP		! set currently selected
C					! normalisation transformation
	UPTRN = .TRUE.			! transformation needs updating
	GOTO 20
C
10	GKSERR	= 50			! transformation number invalid
C
20	RETURN
C
	END
C
C***********************************************************************
C
	SUBROUTINE	GSCLIP(CLSW)
C
**	MODULE	GSCLIP
**	IDENT	31JL84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					CCB	31-July-1984
C
C SET CLIPPING INDICATOR
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	CLSW			! clipping indicator
C
***	COMMON/GKSDAT1/
***	COMMON/GKSESL/
C
	ENCLIP = (CLSW.EQ.GCLIP)
	RETURN
C
	END
C
C***********************************************************************
C
C	INQUIRY FUNCTIONS
C	=================
C
	SUBROUTINE GQASF(ERRIND,LASF)
C
***	MODULE	GQASF
***	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					CCB	 1-May-1984
C Allow up to ASFMAX returns now		TJI	17-Nov-1984
C
C INQUIRE ASPECT SOURCE FLAGS
C
	IMPLICIT NONE
C
***	COMMON/GKSDAT1/		! GKS data structures
***	COMMON/GKSESL/
C
C Arguments:
	INTEGER	ERRIND		! Error indicator
	INTEGER	LASF(ASFMAX)	! Aspect source flags
C
	INTEGER	I
C
	GKSERR = 0		! inquiry functions can't gen errors
	ERRIND = 0		! only give indications of them !!
C
	DO 11 I=1,ASFMAX
	   LASF(I) = GASF(I)
11	CONTINUE
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE GQMDS(WTYPE,ERRIND,COOUNI,RX,RY,LX,LY)
C
***	MODULE	GQMDS
***	IDENT	14SE83
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					SCM	14-Sept-1983
C
C INQUIRE MAXIMUM DISPLAY SURFACE SIZE
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	WTYPE		! Workstation type
	INTEGER	ERRIND		! Error indicator
	INTEGER	COOUNI		! Device Coordinate Units
	REAL	RX,RY		! Max. display surface size in DC
	INTEGER	LX,LY		! no. of device units in X and Y
C
***	COMMON/GKSDAT1/		! GKS data structures
***	COMMON/GKSESL/
C
	GKSERR = 0		! inquiry functions can't gen errors
	ERRIND = 0		! only give indications of them !!
C
	COOUNI = GMETRE		! units are in metres
	RX = DCMAXX	! film size in metres
	RY = DCMAXY
	LX  = 32000		! 6 micron device units
	LY  = 32000
C
999	RETURN
	END
C
C
C***********************************************************************
C
	SUBROUTINE GQPLF(
     &		WTYPE,N,ERRIND,NLT,LT,NLW,NOMLW,RLWMIN,RLWMAX,NPPLI)
C
***	MODULE	GQPLF
***	IDENT	16MY84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					CCB	16-May-1984
C
C INQUIRE POLYLINE FACILITIES
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	WTYPE		! Workstation type
	INTEGER	N		! list element requested
	INTEGER	ERRIND		! Error indicator
	INTEGER NLT		! number of available linetypes
	INTEGER	LT		! N'th element of available linetypes
	INTEGER NLW		! number of available linewidths
	REAL	NOMLW		! nominal linewidth (DC)
	REAL	RLWMIN,RLWMAX	! range of linewidths
	INTEGER	NPPLI		! number of predefined polyline indices
C
***	COMMON/GKSDAT1/		! GKS data structures
***	COMMON/GKSESL/
***	COMMON/THKPAR/		! LDLIB common block
C
	GKSERR = 0		! inquiry functions can't gen errors
	ERRIND = 0		! only give indications of them !!
C
C this is a grey area regarding the linewidth on Sigma
	NLT = 4			! number of linetypes
	LT = N			! just return N as N'th type
	NLW = 0			! continuous range of linewidths
	NOMLW = GNOMLW		! nominal linewidth in DC
	RLWMIN = NOMLW		! also the minimum
	RLWMAX = 10.0*NOMLW	! rather arbitrary maximum
	NPPLI = PLMAX
C
999	RETURN
	END
C
C
C***********************************************************************
C
	SUBROUTINE GQLN(ERRIND,LTYPE)
C
***	MODULE	GQLN
***	IDENT	01MA84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					CCB	1-May-1984
C
C INQUIRE LINETYPE
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	ERRIND		! Error indicator
	INTEGER	LTYPE		! line type
C
***	COMMON/GKSDAT1/		! GKS data structures
***	COMMON/GKSESL/
C
	GKSERR = 0		! inquiry functions can't gen errors
	ERRIND = 0		! only give indications of them !!
C
	LTYPE = ILTYPE
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE GQLWSC(ERRIND,LWIDTH)
C
***	MODULE	GQLWSC
***	IDENT	01MA84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					CCB	1-May-1984
C
C INQUIRE LINE WIDTH SCALE FACTOR
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	ERRIND		! Error indicator
	REAL	LWIDTH		! line width scale factor
C
***	COMMON/GKSDAT1/		! GKS data structures
***	COMMON/GKSESL/
C
	GKSERR = 0		! inquiry functions can't gen errors
	ERRIND = 0		! only give indications of them !!
C
	LWIDTH = ILWID
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE GQPLCI(ERRIND,COLI)
C
***	MODULE	GQPLCI
***	IDENT	01MA84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					CCB	1-May-1984
C
C INQUIRE POLYLINE COLOUR INDEX
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	ERRIND		! Error indicator
	INTEGER	COLI		! polyline colour index
C
***	COMMON/GKSDAT1/		! GKS data structures
***	COMMON/GKSESL/
C
	GKSERR = 0		! inquiry functions can't gen errors
	ERRIND = 0		! only give indications of them !!
C
	COLI = ICOLI
C
	RETURN
	END
C
C***********************************************************************
C
C	GKSLDLIB UTILITIES
C	==================
C
	SUBROUTINE GUPTRN
C
***	MODULE	GUPTRN
***	IDENT	19SE84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Clarke Brunt	19-Sep-1984
C
C Update the tranformation
C
	IMPLICIT NONE
C
***	COMMON/GKSDAT1/		! GKS data structures
C
C w/s
	REAL	NDCSCX,NDCSCY	! scaling part of WC to NDC transform
	REAL	NDCOFX,NDCOFY	! offset  part of WC to NDC transform
	REAL	DCSC		! scaling part of NDC to DC transform
	REAL	DCOFX, DCOFY	! offset  part of NDC to DC transform
C
C Work out the scaling factor and offset for WC to NDC transformation.
C Effective formula for transforming a coord is:-
C	XN = XVMIN + (XW-XWMIN) * ((XVMAX-XVMIN)/(XWMAX-XWMIN))
C	YN = YVMIN + (YW-YWMIN) * ((YVMAX-YVMIN)/(YWMAX-YWMIN))
C
C This formula needs to be put into the form:-
C	XN = (XW*NDCSCX) + NDCOFX
C	YN = (YW*NDCSCY) + NDCOFY
C
	NDCSCX = (VIEWPT(2,TRNCUR)-VIEWPT(1,TRNCUR))
     &		/(WINDOW(2,TRNCUR)-WINDOW(1,TRNCUR))
	NDCSCY = (VIEWPT(4,TRNCUR)-VIEWPT(3,TRNCUR))
     &		/(WINDOW(4,TRNCUR)-WINDOW(3,TRNCUR))
	NDCOFX = VIEWPT(1,TRNCUR) - (WINDOW(1,TRNCUR)*NDCSCX)
	NDCOFY = VIEWPT(3,TRNCUR) - (WINDOW(3,TRNCUR)*NDCSCY)
C
C A similar formula has to be used to transform NDC to DC with the
C difference that the shape of the workstation window has to be
C preserved within the workstation viewport (bottom left corner
C is fixed).
	DCSC = MIN(((WSVIEW(2)-WSVIEW(1))
     &		   /(WSWIN (2)-WSWIN (1)))
     &		  ,((WSVIEW(4)-WSVIEW(3))
     &		   /(WSWIN (4)-WSWIN (3))))
	DCOFX = WSVIEW(1) - (WSWIN(1)*DCSC)
	DCOFY = WSVIEW(3) - (WSWIN(3)*DCSC)
C
C Both transformations have to be combined in the form:-
C	XD = (((XW*NDCSCX*DCSC) + (NDCOFX*DCSC)+DCOFX
C	YD = (((YW*NDCSCY*DCSC) + (NDCOFY*DCSC)+DCOFY
C
	SCALEX = NDCSCX * DCSC
	SCALEY = NDCSCY * DCSC
	OFFX = (NDCOFX*DCSC) + DCOFX
	OFFY = (NDCOFY*DCSC) + DCOFY
C
C Work out the clipping limits.
C These correspond to the area of overlap in NDC space between
C the viewport and the workstation window transformations.
C Logical variable CLPALL is set if there is no overlap.
	CLPALL = .FALSE.
C Is there any overlap at all?
	IF ((VIEWPT(1,TRNCUR).GT.WSWIN(2))
     &  .OR.(VIEWPT(2,TRNCUR).LE.WSWIN(1))
     &  .OR.(VIEWPT(3,TRNCUR).GT.WSWIN(4))
     &  .OR.(VIEWPT(4,TRNCUR).LE.WSWIN(3))) GOTO 5
C
C Define the clipping limits to be the overlapping rectangle.
	CLIPLO(1) = MAX(VIEWPT(1,TRNCUR),WSWIN(1))	! W
	CLIPHI(1) = MIN(VIEWPT(2,TRNCUR),WSWIN(2))	! E
	CLIPLO(2) = MAX(VIEWPT(3,TRNCUR),WSWIN(3))	! S
	CLIPHI(2) = MIN(VIEWPT(4,TRNCUR),WSWIN(4))	! N
C
C Transform the clipping limits into WC space so that clipping can
C be done before transforming coordinates. This is not GKS standard.
C To do this we use the formulas:-
C	XW = (XN-NDCOFX) / NDCSCX
C	YW = (YN-NDCOFY) / NDCSCY
C
	CLIPLO(1) = (CLIPLO(1)-NDCOFX) / NDCSCX
	CLIPHI(1) = (CLIPHI(1)-NDCOFX) / NDCSCX
	CLIPLO(2) = (CLIPLO(2)-NDCOFY) / NDCSCY
	CLIPHI(2) = (CLIPHI(2)-NDCOFY) / NDCSCY
	GOTO 20
C
C No overlap
5	CLPALL = .TRUE.
C
C the transformation is now up to date
20	UPTRN = .FALSE.
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE GUPLIN
C
***	MODULE	GUPLIN
***	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Clarke Brunt	26-April-1984
C Take account of need to set UPFA	Tony J Ibbs	27-Nov-1984
C
C Update the polyline attributes
C
	IMPLICIT NONE
C
C local variables
	INTEGER	NLTYPE,NCOLI
	REAL	NLWID
C
***	COMMON/GKSDAT1/		! GKS data structures
***	COMMON/THKPAR/		! LDLIB common block
C
	IF (GASF(1).EQ.GBUNDL) THEN
	   NLTYPE = PLTYPE(PLIND)
	ELSE
	   NLTYPE = ILTYPE
	ENDIF
C
	IF (GASF(2).EQ.GBUNDL) THEN
	   NLWID = PLWDTH(PLIND)
	ELSE
	   NLWID = ILWID
	ENDIF
C
	IF (GASF(3).EQ.GBUNDL) THEN
	   NCOLI = PLCOL(PLIND)
	ELSE
	   NCOLI = ICOLI
	ENDIF
C
	IF (NLTYPE.NE.CLTYPE) THEN
	   CLTYPE = NLTYPE
	   GOTO (110,120,130,140), NLTYPE
110	   CALL DOTTED(0)			! solid line
	   GOTO 300
120	   CALL DASHED(1,4,3,0)			! dashed
	   GOTO 150
130	   CALL DOTTED(1)			! dotted
	   GOTO 150
140	   CALL DASHED(1,6,3,1)			! dash-dot
150	   UPFA = .TRUE.			! changes fill area
	   UPTX = .TRUE.			! and text
	ENDIF
C
300	IF (NLWID.LE.1.0) NLWID = 0.0	! ie turn off thick lines
	IF (NLWID.NE.CLWID) THEN
	   CLWID = NLWID
	   CALL THICK(NLWID*MSPOT/DCUNIT)	! set required thickness
	   IF (NLWID.NE.FALWID) UPFA = .TRUE.	! check fill area
	   IF (NLWID.NE.0.0) UPTX = .TRUE.	! check text
	ENDIF
C
600	IF (NCOLI.NE.CCOLI) THEN
	   CCOLI = NCOLI
	   CALL PEN (NCOLI)			! and colour
	   UPFA  = .TRUE.			! and fill area update
	   UPTX  = .TRUE.			! also text attributes
	ENDIF
C
900	UPLIN = .FALSE.		! polyline now up to date
	RETURN
	END
C
C***********************************************************************
C
	LOGICAL FUNCTION GKCLIP(X1,Y1,X2,Y2)
C
***	MODULE	GKCLIP
***	IDENT	23JL80
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Authors many and varied but mainly Paul Hardy based on algorithms
C by P. Woodsford and P.Cross, with tidies by R.Fairbairns
C
C Created July 1980
C
C to clip a straight line to rectangular boundaries.
C function value is TRUE if no visible result.
C
	IMPLICIT NONE
C
	REAL X1,Y1,X2,Y2	! coords of ends of line
C
***	COMMON/GKSDAT1/		! contains boundaries
C
	PARAMETER X=1,Y=2	! for clarity
C w/s
	REAL P(2,2)		! our copies of the points
	REAL D(2)		! DX,DY is line vector
	REAL R			! temp variable
	INTEGER DEP,INDEP	! X or Y depending which axis considered
	INTEGER HIGH,LOW	! 1 or 2 to indicate ends of line
C
C set everything up
	GKCLIP=.FALSE.			! assume visible result
	P(X,1)=X1			! take copy of args
	P(Y,1)=Y1
	P(X,2)=X2
	P(Y,2)=Y2
	D(X)=X2-X1			! calculate vector
	D(Y)=Y2-Y1
C
C now loop for both axes
	DO 30 DEP=X,Y
	   INDEP=3-DEP			! independent axis
	   LOW=1			! guess which end lowest
	   IF(D(INDEP).LT.0.0) LOW=2	! upside down
	   HIGH=3-LOW			! the other end
	   IF(P(INDEP,HIGH).LT.CLIPLO(INDEP)) GOTO 50 ! out bottom
	   IF(P(INDEP,LOW ).GT.CLIPHI(INDEP)) GOTO 50 ! out top
	   IF(D(INDEP).EQ.0.0) GOTO 30	! parallel to frame this axis
C
C here to consider low end
	   R=P(INDEP,LOW)-CLIPLO(INDEP) ! distance from frame
	   IF(R.GE.0.0) GOTO 20		! inside frame
C
C clip low end
	   P(DEP,LOW)=P(DEP,LOW)-R*D(DEP)/D(INDEP) ! similar triangles
	   P(INDEP,LOW)=CLIPLO(INDEP) ! push onto frame
C
C now lets consider the high end
20	   R=CLIPHI(INDEP)-P(INDEP,HIGH) ! distance from frame
	   IF(R.GE.0.0) GOTO 30		! inside frame
C
C clip high end
	   P(DEP,HIGH)=P(DEP,HIGH)+R*D(DEP)/D(INDEP) ! similar triangles
	   P(INDEP,HIGH)=CLIPHI(INDEP) ! push onto frame
C
30	   CONTINUE			! loop for both axes
C
C copy args back
	X1=P(X,1)
	Y1=P(Y,1)
	X2=P(X,2)
	Y2=P(Y,2)
40	RETURN
C
C here with all invisible
50	GKCLIP=.TRUE.
	GOTO 40
C
	END
C
C***********************************************************************
C
	SUBROUTINE GKSW2D(WKID,WX,WY,DX,DY)
C
***	MODULE	GKSW2D
***	IDENT	10AU84
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author: Clarke Brunt
C
C Created August 1984
C
C To convert world coordinate WX,WY to device coordinate DX,DY
C on workstation WKID
C
	IMPLICIT NONE
C
***	COMMON/GKSDAT1/
***	COMMON/GKSESL/
C
C arguments
	INTEGER	WKID		! worstation identifier
	REAL	WX,WY		! input world coordinate
	REAL	DX,DY		! output device coordinate
C
	GKSERR = 0
C
C Make sure transformation is up to date
	IF (UPTRN) CALL GUPTRN
	DX = (WX*SCALEX)+OFFX
	DY = (WY*SCALEY)+OFFY
C
	RETURN
	END
C
C**********************************************************************
C
	SUBROUTINE GKSD2W(WKID,DX,DY,WX,WY)
C
***	MODULE	GKSD2W
***	IDENT	10AU84
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author: Clarke Brunt
C
C Created February 1985
C
C To convert device coordinate DX,DY to world coordinate WX,WY
C on workstation WKID
C
	IMPLICIT NONE
C
***	COMMON/GKSDAT1/
***	COMMON/GKSESL/
C
C arguments
	INTEGER	WKID		! worstation identifier
	REAL	DX,DY		! input device coordinate
	REAL	WX,WY		! output world coordinate
C
	GKSERR = 0
C
C Make sure transformation is up to date
	IF (UPTRN) CALL GUPTRN
C
	WX = (DX-OFFX)/SCALEX
	WY = (DY-OFFY)/SCALEY
C
	RETURN
	END
C
C**********************************************************************
C
	SUBROUTINE GD2W(WKID,DX,DY,WX,WY)
C
***	MODULE	GD2W
***	IDENT	10AU84
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author: Clarke Brunt
C
C Created August 1984
C
C To scale device coordinate lengths DX,DY to world coordinate WX,WY
C on workstation WKID (only one in any case)
C
	IMPLICIT NONE
C
***	COMMON/GKSDAT1/
***	COMMON/GKSESL/
C
C arguments
	INTEGER WKID		! for compatibility with 2 workstation
	REAL	DX,DY		! input device coordinate
	REAL	WX,WY		! output world coordinate
C
C Make sure transformation is up to date
	IF (UPTRN) CALL GUPTRN
C
	WX = DX / SCALEX
	WY = DY / SCALEY
C
	RETURN
	END
C
C**********************************************************************
C
	SUBROUTINE GW2D(WKID,WX,WY,DX,DY)
C
***	MODULE	GW2D
***	IDENT	14MY84
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author: Clarke Brunt
C
C Created May 1985
C
C To scale world coordinate lengths WX,WY to device coordinate DX,DY
C on workstation WKID (only one in any case)
C
	IMPLICIT NONE
C
***	COMMON/GKSDAT1/
***	COMMON/GKSESL/
C
C arguments
	INTEGER WKID		! for compatibility with 2 workstation
	REAL	WX,WY		! input world coordinate
	REAL	DX,DY		! output device coordinate
C
C Make sure transformation is up to date
	IF (UPTRN) CALL GUPTRN
C
	DX = WX*SCALEX
	DY = WY*SCALEY
C
	RETURN
	END
C
C**********************************************************************
C
	SUBROUTINE GKSDAT(DEV,LDARG,USEPC)
C
***	MODULE	GKSDAT
***	IDENT	10AU84
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author: Clarke Brunt
C
C Created April 1985
C
C To set control variables
C
	IMPLICIT NONE
C
***	COMMON/GKSDAT1/
C
C arguments
	INTEGER DEV		! device number (ignored)
	INTEGER LDARG		! argument for LDINIT
	LOGICAL*1 USEPC		! use PCFRAM rather than DIFRAM
C
C Set things in common block
	INIARG = LDARG
	PC = USEPC
C
	RETURN
	END
C
C *********************************************************************
C
	SUBROUTINE	GESC(ESCID,DATA)
C
**	MODULE	GESC
**	IDENT	29MY86
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Clarke Brunt	9-May-1986
C
C ESCAPE
C
	IMPLICIT NONE
C
***	COMMON/GFADAT1/
***	COMMON/GKSDAT1/
***	COMMON/GKSESL/
C
C Arguments
	INTEGER ESCID			! escape identifier
	REAL	DATA(2)			! other data
C
C Despatch on escape type
	GKSERR = 0
	IF (ESCID.EQ.3) GOTO 300
	IF (ESCID.EQ.103) GOTO 3000
	GKSERR = 180			! function not supported
	GOTO 9999
C
C Set fill area line width and spacing
300	CONTINUE
C
C Zero width will cause the nominal width to be used
C If spacing is less than width, then set a sensible value
C
	IF (DATA(1).GE.0.0) GFAWID = DATA(1)
	GFAGAP = DATA(2)
	IF (GFAGAP.LT.GFAWID) GFAGAP = 2.0*GFAWID
	GOTO 9999
C
C Inquire fill area line width and spacing
3000	DATA(1) = GFAWID
	DATA(2) = GFAGAP
C
9999	RETURN
	END
