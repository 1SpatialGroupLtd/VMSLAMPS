C
C Cell array functions
C ====================
C
C *********************************************************************
C
C	PIXEL IMAGE PRIMITIVE
C	=====================
C
C
	SUBROUTINE	LSG_PIXEL_ARRAY(
     &		PX,PY,NX,NY,VX1,VX2,VY1,VY2,SCX,SCY,PXARR)
C
**	MODULE	LSG_PIXEL_ARRAY
**	IDENT	03NO88
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Clarke Brunt	 8-Jun-1987
C
	IMPLICIT NONE
C
***	COMMON/GKSDAT2/
***	COMMON/GKSESL/
C
C Arguments:
C
	REAL	PX			! X coord (w.c.)
	REAL	PY			! Y coord
	INTEGER	NX,NY			! size of array, and direction
	INTEGER	VX1,VX2,VY1,VY2		! portion of array
	INTEGER	SCX,SCY			! scale factors
	BYTE	PXARR(*)		! array of pixels
C
C Functions
	INTEGER	LIB$EXTZV
C
C Workspace
	REAL	DX,DY			! device coordinate
	REAL	SX,SY			! size
	INTEGER	NROWS,NCOLS
	INTEGER*4 BLOC,OFF
	INTEGER	VPAK
	INTEGER	TEMP
	INTEGER	PIND,XIND,YIND
	INTEGER	STRIPS,XPOS,YPOS
	INTEGER	I,J
	INTEGER	DEV
	PARAMETER	(DEV=2)		! only ARGS
	INTEGER	DIR
	INTEGER	BMAX			! size of pixel array
	PARAMETER	(BMAX=1024)
	BYTE		B(BMAX)
C
C check arguments
	IF (NX.EQ.0.OR.NX.EQ.0) GOTO 200
	IF (VX1.LT.1.OR.VX2.GT.ABS(NX).OR.VX1.GT.VX2) GOTO 200
	IF (VY1.LT.1.OR.VY2.GT.ABS(NY).OR.VY1.GT.VY2) GOTO 200
	IF (SCX.LE.0.OR.SCY.LE.0) GOTO 200
C
C is this workstation active? - if not ignore it
	IF (.NOT.WSACT(DEV)) GOTO 200
C
C ensure that our transformation is up to date
	IF (UPTRN(DEV)) CALL GUPTRN(DEV)	! update it
C
C is everything clipped (ie nothing visible)
	IF (CLPALL(DEV)) GOTO 200
C
	NCOLS = VX2-VX1+1
	NROWS = VY2-VY1+1
C
	IF (PIXROT(DEV)) THEN
	   TEMP = NCOLS
	   NCOLS = NROWS
	   NROWS = TEMP
	ENDIF
C
C work out size of pixels
	SX = DCMAXX(DEV)/RASTX(DEV)
	SY = DCMAXY(DEV)/RASTY(DEV)
C
C Convert world position to device coordinate
	CALL GKSW2D(WKIDS(DEV),PX,PY,DX,DY)
C
C Obtain pixel position
	XPOS = DX/SX
	YPOS = DY/SY
C
C work out drawing direction
	IF (PIXROT(DEV)) THEN
	   IF (NX.GT.0) THEN
	      IF (NY.GT.0) THEN
	         DIR = 5
	      ELSE
	         DIR = 4
	      ENDIF
	   ELSE
	      IF (NY.GT.0) THEN
	         DIR = 6
	      ELSE
	         DIR = 7
	      ENDIF
	   ENDIF
	ELSE
	   IF (NX.GT.0) THEN
	      IF (NY.GT.0) THEN
	         DIR = 0
	      ELSE
	         DIR = 3
	      ENDIF
	   ELSE
	      IF (NY.GT.0) THEN
	         DIR = 1
	      ELSE
	         DIR = 2
	      ENDIF
	   ENDIF
	ENDIF
C
	VPAK = 0
	IF (PACK(DEV).EQ.8) VPAK = 3
C
C check if user's array can be used directly, without copying
	IF ((VY1.EQ.VY2).OR.(VX1.EQ.1.AND.VX2.EQ.ABS(NX))) THEN	! yes
	   BLOC = %LOC(PXARR)
	   OFF = (VY1-1)*ABS(NX)+VX1-1 
	   IF (PACK(DEV).EQ.1) OFF = OFF/8
	   BLOC = BLOC+OFF
	   CALL VSPXWT2(SCX-1,DIR,VPAK,XPOS,YPOS,NCOLS,NROWS,%VAL(BLOC))
	   GOTO 200
	ENDIF
C
C need to copy the array (NB only copes with up to 1024 pixels for now)
	YIND = 1
	STRIPS = 0
	PIND = 1
	DO 20 J=VY1,VY2
	   XIND = 0
	   STRIPS = STRIPS+1
	   IF (PACK(DEV).EQ.8) THEN
	      DO 10 I=VX1,VX2
	         B(PIND) = PXARR(XIND+YIND)
	         PIND = PIND+1
	         XIND = XIND+1
10	      CONTINUE
	   ELSE
	      DO 11 I=VX1,VX2
	         CALL LIB$INSV( LIB$EXTZV(XIND+YIND-1,1,PXARR),
     &						     PIND-1,1,B)
	         PIND = PIND+1
	         XIND = XIND+1
11	      CONTINUE
	   ENDIF
C
C Check if array is full - if so output it
	   IF (J.EQ.VY2.OR.BMAX*8/PACK(DEV)-PIND.LT.VX2-VX1+1) THEN
C
C and output it
	      IF (PIXROT(DEV)) THEN
	         CALL VSPXWT2(SCX-1,DIR,VPAK,XPOS,YPOS,STRIPS,NROWS,B)
	         XPOS = XPOS-STRIPS*SIGN(SCX,NY)
	      ELSE
	         CALL VSPXWT2(SCX-1,DIR,VPAK,XPOS,YPOS,NCOLS,STRIPS,B)
	         YPOS = YPOS+STRIPS*SIGN(SCX,NY)
	      ENDIF
	      STRIPS = 0
	      PIND = 1
	   ENDIF
C
	   YIND = YIND+ABS(NX)
20	CONTINUE
C
200	RETURN
	END
C
	SUBROUTINE	LSG_FILL_RECTANGLE(PX,PY)
C
**	MODULE	LSG_FILL_RECTANGLE
**	IDENT	08JN87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Clarke Brunt	 8-Jun-1987
C
C For now this routine will only work for solid fill on ARGS.
C It could be upgraded to check for TEK workstation and call GFA
C as required (since no hardware fill on TEK).
C
	IMPLICIT NONE
C
***	COMMON/GKSDAT2/
***	COMMON/GKSESL/
C
C Arguments:
C
	REAL	PX(2)			! X coords
	REAL	PY(2)			! Y coords
C
C Workspace
	INTEGER	DEV
	PARAMETER	(DEV=2)
	REAL	X(4),Y(4)
C
C is this workstation active? - if not ignore it
	IF (.NOT.WSACT(DEV)) GOTO 200
C
C ensure that our transformation is up to date
	IF (UPTRN(DEV)) CALL GUPTRN(DEV)	! update it
C
C is everything clipped (ie nothing visible)
	IF (CLPALL(DEV)) GOTO 200
C
C ensure that our fill area attributes are up to date
	IF (UPFA(DEV)) CALL GUPFA(DEV)
C
C if it's anything other than solid fill, let GFA do it
	IF (CFASTY(DEV).NE.GSOLID) THEN
	   X(1) = PX(1)
	   Y(1) = PY(1)
	   X(3) = PX(2)
	   Y(3) = PY(2)
	   X(2) = X(1)
	   Y(2) = Y(3)
	   X(4) = X(3)
	   Y(4) = Y(1)
	   CALL GFA(4,X,Y)
	   GOTO 200
	ENDIF
C
C Convert world position to device coordinate
	CALL GKSW2D(WKIDS(DEV),PX(1),PY(1),X(1),Y(1))
	CALL GKSW2D(WKIDS(DEV),PX(2),PY(2),X(2),Y(2))
C
	CALL VSFILL(X(1),Y(1),X(2),Y(2))
C
200	RETURN
	END
C
	SUBROUTINE	LSG_PLANE_SELECT(WKID,MASK)
C
**	MODULE	LSG_PLANE_SELECT
**	IDENT	08JN87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Clarke Brunt	 8-Jun-1987
C
C Set plane selection mask
C
	IMPLICIT NONE
C
***	COMMON/GKSDAT2/
***	COMMON/GKSESL/
C
C Arguments:
C
	INTEGER	WKID			! unused
	BYTE	MASK			! plane selection mask
C
C function called
	INTEGER	GETDEV
C
C workspace
	INTEGER	DEV
	INTEGER	BASE
	INTEGER	NUM
	INTEGER	LMASK
	BYTE	BMASK
	EQUIVALENCE (LMASK,BMASK)
C
	GKSERR = GETDEV(DEV,WKID)
	IF (GKSERR.NE.0) GOTO 200
	PSEL(DEV) = MASK
	IF (DEV.EQ.GTEK) GOTO 200
C
C now convert bit pattern to a base plane and number of planes
C n.b. only works if planes are contiguous
C We zero extend the mask into a long, then divide by 2 to effect
C a right shift, and use IF (... to check the bottom bit (grubby!)
	LMASK = 0
	BMASK = MASK
	BASE = 0
	NUM = 0
	IF (LMASK.NE.0) THEN
10	   IF (.NOT.LMASK) THEN
	      LMASK = LMASK/2
	      BASE = BASE+1
	      GOTO 10
	   ENDIF
20	   IF (LMASK) THEN
	      LMASK = LMASK/2
	      NUM = NUM+1
	      GOTO 20
	   ENDIF
	ENDIF
	CALL VSDEF(1,NUM,BASE)
C
200	RETURN
	END
C
	SUBROUTINE	LSG_PLANE_OFFSET(WKID,OFFSET)
C
**	MODULE	LSG_PLANE_OFFSET
**	IDENT	08JN87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Clarke Brunt	 8-Jun-1987
C
C Specify bit offset (shift) for writing index
C
	IMPLICIT NONE
C
***	COMMON/GKSDAT2/
***	COMMON/GKSESL/
C
C Arguments:
C
	INTEGER	WKID			! unused
	INTEGER	OFFSET			! plane offset
C
C function called
	INTEGER	GETDEV
C
C workspace
	INTEGER	DEV
C
	GKSERR = GETDEV(DEV,WKID)
	IF (GKSERR.NE.0) GOTO 200
C
C POFF is actually ignored - it is assumed that the user will always
C expect the colour index to be shifted up to the first plane selected.
C The ARGS performs this operation naturally, with no offsetting.
	POFF(DEV) = OFFSET
200	RETURN
	END
C
C
	SUBROUTINE	LSG_PACKING_MODE(WKID,MODE)
C
**	MODULE	LSG_PACKING_MODE
**	IDENT	08JN87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Clarke Brunt	 8-Jun-1987
C
C Specify packing mode for pixel array (1 or 8 for bit/byte)
C
	IMPLICIT NONE
C
***	COMMON/GKSDAT2/
***	COMMON/GKSESL/
C
C Arguments:
C
	INTEGER	WKID			! unused
	INTEGER	MODE			! packing mode
C
C function called
	INTEGER	GETDEV
C
C workspace
	INTEGER	DEV
C
	GKSERR = GETDEV(DEV,WKID)
	IF (GKSERR.NE.0) GOTO 200
C
	IF (MODE.EQ.1.OR.MODE.EQ.8) PACK(DEV) = MODE
200	RETURN
	END
C
	SUBROUTINE	LSG_ROTATION_MODE(WKID,ROT)
C
**	MODULE	LSG_ROTATION_MODE
**	IDENT	08JN87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Clarke Brunt	 8-Jun-1987
C
C Set rotation mode for pixel arrays
C
	IMPLICIT NONE
C
***	COMMON/GKSDAT2/
***	COMMON/GKSESL/
C
C Arguments:
C
	INTEGER		WKID			! unused
	LOGICAL*1	ROT			! rotate?
C
C function called
	INTEGER	GETDEV
C
C workspace
	INTEGER	DEV
C
	GKSERR = GETDEV(DEV,WKID)
	IF (GKSERR.NE.0) GOTO 200
C
	PIXROT(DEV) = ROT
200	RETURN
	END
C
	SUBROUTINE	LSG_PLANE_VISIBLE(WKID,MASK)
C
**	MODULE	LSG_PLANE_VISIBLE
**	IDENT	08JN87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Clarke Brunt	 8-Jun-1987
C
C Set plane visibility mask
C
	IMPLICIT NONE
C
***	COMMON/GKSDAT2/
***	COMMON/GKSESL/
C
C Arguments:
C
	INTEGER	WKID			! unused
	BYTE	MASK			! visibility mask
C
C function called
	INTEGER	GETDEV
C
C workspace
	INTEGER	DEV
	INTEGER	LMASK
	BYTE	BMASK
	EQUIVALENCE (LMASK,BMASK)
C
	GKSERR = GETDEV(DEV,WKID)
	IF (GKSERR.NE.0) GOTO 200
C
	PVIS(DEV) = MASK
	IF (DEV.EQ.GTEK) GOTO 200
C
C zero extend the mask to long, then enable the planes
	LMASK = 0
	BMASK = MASK
	CALL VSZDO(LMASK)
C
200	RETURN
	END
C
	SUBROUTINE	LSG_ZOOM_IMAGE(WKID,PX,PY,ZF)
C
**	MODULE	LSG_ZOOM_IMAGE
**	IDENT	08JN87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Clarke Brunt	 8-Jun-1987
C
C Zoom image
C
	IMPLICIT NONE
C
***	COMMON/GKSDAT2/
***	COMMON/GKSESL/
C
C Arguments:
C
	INTEGER	WKID			! unused
	REAL	PX,PY			! position (w.c.)
	INTEGER	ZF			! zoom factor
C
C function called
	INTEGER	GETDEV
	REAL	DX,DY			! device coordinate
C
C workspace
	INTEGER	DEV
C
	GKSERR = GETDEV(DEV,WKID)
	IF (GKSERR.NE.0) GOTO 200
	IF (DEV.EQ.GTEK) GOTO 200
C
C Convert world position to device coordinate
	CALL GKSW2D(WKID,PX,PY,DX,DY)
C
C move cursor there, and zoom about it
C N.B Should move cursor back to where the user wants it really
	CALL VSCSWT(DX,DY)
	CALL VSZOOM(8,ZF-1,ZF-1)
200	RETURN
	END
C
	SUBROUTINE	LSG_SET_CURSOR(WKID,PX,PY,ON)
C
**	MODULE	LSG_SET_CURSOR
**	IDENT	08JN87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Clarke Brunt	 8-Jun-1987
C
C Set cursor position and visibility
C
	IMPLICIT NONE
C
***	COMMON/GKSDAT2/
***	COMMON/GKSESL/
C
C Arguments:
C
	INTEGER	WKID			! unused
	REAL	PX,PY			! position (w.c.)
	LOGICAL*1	ON		! visible?
C
C function called
	INTEGER	GETDEV
	REAL	DX,DY			! device coordinate
C
C workspace
	INTEGER	DEV
C
	GKSERR = GETDEV(DEV,WKID)
	IF (GKSERR.NE.0) GOTO 200
	IF (DEV.EQ.GTEK) GOTO 200
C
C Convert world position to device coordinate
	CALL GKSW2D(WKID,PX,PY,DX,DY)
C
C move to position, and turn cursor on/off
	CALL VSCSWT(DX,DY)
	CALL VSCURS(ON)
C
200	RETURN
	END
