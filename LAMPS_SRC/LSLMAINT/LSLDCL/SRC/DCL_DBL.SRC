	INTEGER*4 FUNCTION DCL_DBL(CLD_LABEL,WHINGE)
C
***	MODULE	DCL_DBL
***	IDENT	22OC85
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Author						TJH 24-Sep-1985
C
C Function gets any real*8 arguments associated with the DCL qualifier 
C CLD_LABEL and puts them into DBLRAY(). Up to MAX_ARR arguments can be
C decoded and stored. Function returns set to SS$_NORMAL if all is well.
C Local error reporting (via condition handler) may be invoked by 
C setting WHINGE .true..
C
	IMPLICIT NONE
C
	INTEGER*4 	CLI$_ABSENT, CLI$GET_VALUE
	EXTERNAL 	CLI$_ABSENT
C
	CHARACTER*16	CHAR_ARRAY	! found string argument
	INTEGER*2	CHAR_LEN        ! length of found string arg.
	CHARACTER*(*)	CLD_LABEL	! the CLD label for qualifier
	INTEGER*4	I		! loop var.
	INTEGER*4	IERR		! for error return
	LOGICAL*4	REPORT	! .T.= condition handler error reporting
	LOGICAL*4	WHINGE		! .T. if local error reporting
C
C condition handler
	EXTERNAL	DCL_ERRET
C
C Common block to control error reporting in condition handler
	COMMON /REPORT/ REPORT	
C
	INCLUDE 	'($SSDEF)'
	INCLUDE 	'($STSDEF)'
C
	INCLUDE 	'LSL$CMNLSL:CLD.CMN'
C
C ......................................................................
C
	NUMDBL=0		! initialise number of args. counter
	REPORT=WHINGE		! is condition handler to scream?
C
C Establish condition handler
	CALL LIB$ESTABLISH( DCL_ERRET )
C
C Get first value for our label
	DCL_DBL= CLI$GET_VALUE (CLD_LABEL,
     &				 CHAR_ARRAY,
     &				 CHAR_LEN)
C
C ......................................................................
C
C Repeat until the list is depleted
C
	DO WHILE (DCL_DBL)
	    NUMDBL=NUMDBL+1
C
C Trap the potential DBLRAY() overflow and issue the rather appropriate
C VMS error "result parse buffer overflow"
	    IF (NUMDBL.GT.MAX_ARR) THEN
	        DCL_DBL='38118'X
	        CALL LIB$SIGNAL
     &			( %VAL(DCL_DBL) ) ! report error locally?
C
C Revert to normal error processing
	        CALL LIB$REVERT
	        RETURN
	    ENDIF
C
C
C As we have had to use a CLD $QUOTED_STRING type qualifier to get the 
C arguments in, the CLI will not have trapped any non numeric characters
C in what we are assuming will be real numbers
	    DO 10 I=1,CHAR_LEN
	      IF ((CHAR_ARRAY(I:I).LT.'0'
     &		  	.OR.CHAR_ARRAY(I:I).GT.'9')
     &	  	  	.AND.CHAR_ARRAY(I:I).NE.'+'
     &	  	  	.AND.CHAR_ARRAY(I:I).NE.'-'
     &	  	  	.AND.CHAR_ARRAY(I:I).NE.'.') 
     &						THEN
C
C Since the CLI does'nt know about real numbers we will have to issue a 
C fraudulent message: "invalid syntax for value specification" here.
C
	        DCL_DBL='38088'X
	        CALL LIB$SIGNAL( %VAL(DCL_DBL) )
	        IF (WHINGE) THEN		! report error locally ?
	            TYPE *,' \',CHAR_ARRAY(:CHAR_LEN),'\'
	        ENDIF
C
C Revert to normal error processing
	        CALL LIB$REVERT
	        RETURN
	     ENDIF
10	   CONTINUE
C
C Finally read the actual number!
	   READ(CHAR_ARRAY,*,ERR=20) DBLRAY(NUMDBL)
	   DCL_DBL= CLI$GET_VALUE (CLD_LABEL,
     &				    CHAR_ARRAY,
     &				    CHAR_LEN)
	END DO
C
C ......................................................................
C
C Make sure termination status was correct
C
	IF (DCL_DBL.OR.(DCL_DBL.EQ. %LOC(CLI$_ABSENT) )) THEN
	   DCL_DBL=SS$_NORMAL
	ELSE IF (.NOT. DCL_DBL
     &		.AND.(IBITS(DCL_DBL,0,3).NE.STS$K_WARNING)) THEN
     	   CALL LIB$SIGNAL( %VAL(DCL_DBL) ) ! signal error
	ENDIF
C
C Revert to normal error processing
	CALL LIB$REVERT
	RETURN	
C
C ......................................................................
C
C Error on internal read
C
20	CALL ERRSNS(,,,,DCL_DBL)
	CALL LIB$SIGNAL ( %VAL(DCL_DBL) ) 
C
C Revert to normal error processing
	CALL LIB$REVERT
	RETURN 		!  or just return to signal the error.
	END
