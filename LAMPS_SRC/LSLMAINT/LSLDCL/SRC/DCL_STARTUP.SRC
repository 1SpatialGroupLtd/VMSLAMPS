C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-01-06 11:36:04.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION DCL_STARTUP(VERB,PROMPT,SPLT_LIS,
     &						CLD_MODULE,WHINGE)
C
***	MODULE	DCL_STARTUP
***	IDENT	06JA86
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
CMOD	All input via CLI$PARSE if nothing on the
C	command line, NOT via prompt on LIB$GET_FOREIGN TJH  06-Jan-1986
CMOD	Condition handler added				TJH  22-Oct-1985
C 	Author						TJH  27-Aug-1985
C
C Function parses a DCL command line supplied via a foreign command.
C Function returns set to SS$_NORMAL if all is well. Local error 
C reporting (via LIB$SIGNAL) may be invoked by setting WHINGE .true..
C If no arguments are supplied for the foreign command then the user 
C supplied PROMPT is output.
C 
	IMPLICIT NONE
C
C condition handler
	EXTERNAL	DCL_ERRET
C
	INTEGER 	CLI$DCL_PARSE, LIB$GET_FOREIGN, LIB$GET_INPUT
	EXTERNAL	LIB$GET_INPUT
C
	CHARACTER*256	CMDSTR		! the cmd. string for parsing
	INTEGER*4       CLD_MODULE	! the CLD module name
	INTEGER*2 	NBYTES 		! length of cmd. string
	CHARACTER*(*)	PROMPT		! user supplied prompt
	LOGICAL*4	REPORT		! .T. if local error reporting
	LOGICAL*4	SPLT_LIS	! .T.= split parameter lists
	LOGICAL*4	WHINGE		! .T. if local error reporting
	CHARACTER*(*)	VERB		! the command verb eg 'BACKUP'
C
C Common block to control error reporting in condition handler
	COMMON /REPORT/ REPORT	
C
	INCLUDE '($RMSDEF)'
	INCLUDE '($SSDEF)'
	INCLUDE '($STSDEF)'
C
C ......................................................................
C
	REPORT=WHINGE		       ! is condition handler to scream?
C
C Establish condition handler
	CALL LIB$ESTABLISH( DCL_ERRET )
C
	DCL_STARTUP=LIB$GET_FOREIGN(CMDSTR,	! to receive cmd. string
     &			       	    	  ,	! no user prompt 
     &			            NBYTES)	! length of cmd. string
C
C Nothing found?
	IF (NBYTES.EQ.0) THEN
	   NBYTES=1
	   CMDSTR(1:1)=' '
	ENDIF
C
	IF (DCL_STARTUP) THEN
C
C If desired then split parameter lists into separate parameters by
C replacing the list separators (commas) with spaces
	    IF (SPLT_LIS) CALL DCL_COMMA(CMDSTR, NBYTES)
C
C Add the command verb to the start of the string
	    CMDSTR=VERB//' '//CMDSTR(:NBYTES)
C
C Parse command line
	    DCL_STARTUP=CLI$DCL_PARSE(CMDSTR,   ! string to be parsed
     &				 CLD_MODULE  	! CLD module
     &				,LIB$GET_INPUT,%VAL(0))
	    IF (DCL_STARTUP) THEN
		DCL_STARTUP=SS$_NORMAL
C
C If required report error but don't repeat a warning message as the 
C CLI routines will signal errors themselves
	    ELSE IF (IBITS(DCL_STARTUP,0,3).NE.STS$K_WARNING) THEN
		CALL LIB$SIGNAL (%VAL(DCL_STARTUP)) ! report it
            ENDIF
C
C Revert to normal error processing
	    CALL LIB$REVERT
	    RETURN
C
	ELSE IF (DCL_STARTUP.NE.RMS$_EOF
     &	     .AND.
     &	     (IBITS(DCL_STARTUP,0,3).NE.STS$K_WARNING))THEN ! err or ^Z?
	    CALL LIB$SIGNAL (%VAL(DCL_STARTUP)) ! report it
	ELSE IF (DCL_STARTUP.EQ.RMS$_EOF) THEN	! ^Z
	    CALL EXIT
	ENDIF	    
C
C Revert to normal error processing
	CALL LIB$REVERT
	RETURN
	END
