C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1985-10-23 10:34:58.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION DCL_QUAL(QUAL,HAD_QUAL,LOCAL,LOCNEG,WHINGE)
C
***	MODULE	DCL_QUAL
***	IDENT	16SE85
C
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Created 				TJH	27-Aug-1985
C
C Function searches for the DCL qualifier specified by QUAL and HAD_QUAL
C is set .TRUE. if qualifier is found. Function returns set to 
C SS$_NORMAL if all is well. Local error reporting (via condition
C handler ) may be invoked by setting  WHINGE .true.. 
C If the qualifier is locally present (ie comes after a 
C parameter not after the verb) then LOCAL is set .TRUE.. This could
C be useful if DCL_QUAL is used to decode qualifiers which have
C the CLD definition "PLACEMENT = POSITIONAL" set. If a qualifier is
C locally negated (ie present as /NO_THING) then LOCNEG is set true.
C
	IMPLICIT NONE
C
	INTEGER*4 	CLI$_ABSENT, CLI$_PRESENT, CLI$_DEFAULTED,
     &			CLI$_NEGATED, CLI$_LOCNEG, CLI$_LOCPRES
	EXTERNAL 	CLI$_ABSENT, CLI$_PRESENT, CLI$_DEFAULTED,
     &			CLI$_NEGATED, CLI$_LOCNEG, CLI$_LOCPRES
	INTEGER 	CLI$PRESENT
C
	CHARACTER*(*)	QUAL		! the desired DCL qualifier
	LOGICAL		HAD_QUAL	! .T. if qualifier found
	LOGICAL		LOCAL		! .T. if qualifier locally set
	LOGICAL		LOCNEG		! .T. if qual. locally negated
	LOGICAL*4	REPORT		! .T. if local error reporting
	LOGICAL*4	WHINGE		! .T. if local error reporting
C
C condition handler
	EXTERNAL	DCL_ERRET
C
C Common block to control error reporting in condition handler
	COMMON /REPORT/ REPORT	
C
C
	INCLUDE '($SSDEF)'
	INCLUDE '($STSDEF)'
C
C ......................................................................
C
	HAD_QUAL = .FALSE.		! we won't find it
	LOCAL = .FALSE.			! if so it is global
	LOCNEG = .FALSE.		! or if local it is positive
	REPORT=WHINGE		! is condition handler to scream?
C
C Establish condition handler
	CALL LIB$ESTABLISH( DCL_ERRET )
C
	DCL_QUAL = CLI$PRESENT(QUAL)	
C
	IF (DCL_QUAL) THEN
	   HAD_QUAL = .TRUE.			! set flag
	ELSE IF ((DCL_QUAL.NE.%LOC(CLI$_ABSENT)
     &		.AND.
     &           DCL_QUAL.NE.%LOC(CLI$_DEFAULTED)
     &		.AND.
     &           DCL_QUAL.NE.%LOC(CLI$_LOCNEG)
     &		.AND.
     &           DCL_QUAL.NE.%LOC(CLI$_NEGATED)
     &		.AND.
     &		(IBITS(DCL_QUAL,0,3).NE.STS$K_WARNING))) THEN
C
	   CALL LIB$SIGNAL (%VAL(DCL_QUAL))	! signal the error
C
C Revert to normal error processing
	   CALL LIB$REVERT
	   RETURN
	ENDIF
C
C If the qualifier was locally present ie after a parameter, then
C signal this fact.
	IF (DCL_QUAL.EQ.%LOC(CLI$_LOCPRES)) LOCAL = .TRUE.
C
C If the qualifier was locally negated do the same
	IF (DCL_QUAL.EQ.%LOC(CLI$_LOCNEG)) LOCNEG = .TRUE.
C
C Make sure termination status is correct
	IF ((DCL_QUAL.EQ.%LOC(CLI$_ABSENT)
     &		.OR.
     &           DCL_QUAL.EQ.%LOC(CLI$_DEFAULTED)
     &		.OR.
     &           DCL_QUAL.EQ.%LOC(CLI$_LOCNEG)
     &		.OR.
     &           DCL_QUAL.EQ.%LOC(CLI$_LOCPRES)
     &		.OR.
     &           DCL_QUAL.EQ.%LOC(CLI$_PRESENT)
     &		.OR.
     &           DCL_QUAL.EQ.%LOC(CLI$_NEGATED))) DCL_QUAL = SS$_NORMAL
C
C Revert to normal error processing
	CALL LIB$REVERT
	RETURN
	END
