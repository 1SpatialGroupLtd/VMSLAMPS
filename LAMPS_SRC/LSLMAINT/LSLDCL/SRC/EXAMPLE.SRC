	PROGRAM	EXAMPLE
C
***	MODULE	EXAMPLE
***	IDENT	12SE85
C
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Author						TJH  30-Aug-1985
C
C EXAMPLE header for a LSL utility showimg use of new LSLLIB DCL 
C command handling routines.
C
	IMPLICIT NONE
C
	INCLUDE '($RMSDEF)'
	INCLUDE '($SSDEF)'
	INCLUDE '($STSDEF)'
	INCLUDE '($FORDEF)'
	INCLUDE 'LSL$CMNLSL:CLD.CMN'
C
C We need to specify that the error is not to be reflected
C
	PARAMETER	SUPERR = '10000000'X
C
C Command Language Definitions
	EXTERNAL       EXAMPLE_CLD
C W/S
	LOGICAL*4	ABSENT		! .T. if file param. not found
	INTEGER*4	CMLEN		! the length of parsed cmd. line
	CHARACTER*1024  CMLSTR		! show off the parsed cmd. line
	INTEGER*2	FCODE(128)	! qualifier argument 
	INTEGER*4	I		! tmp. var.
	LOGICAL		LOCAL		! .T. if qual. is local
	LOGICAL		LOCNEG		! set .TRUE. if qual. is 
C					! locally negated
	INTEGER*4	NUM_FC		! our record of number of FCs
	LOGICAL*4	OK		! for error return another way
	CHARACTER*128	P2_FIL		! output file-spec
	INTEGER*4	P2_LEN		! length of output file-spec
	INTEGER*4	STATUS		! for error return
	CHARACTER*128	STR_ARG		! argument for /LOOK_FOR
	REAL		TOLER		! qualifier argument 
	LOGICAL*4	WHINGE		! .T. if local error reporting
C
C Qualifier flags
	LOGICAL		HAD_FC		! set .TRUE. if /FEATURE_CODE
	LOGICAL		HAD_LOG		! set .TRUE. if /LOG
	LOGICAL		HAD_LOO		! set .TRUE. if /LOOK_FOR
	LOGICAL		HAD_TOL		! set .TRUE. if /TOLERANCE
C
C Functions called
	INTEGER*4	DCL_FILE	! reads and parses file title 
C					  from DCL command line
	INTEGER*4	DCL_INT		! gets qualifier args. (integer)
	INTEGER*4	DCL_QUAL	! looks for specified qualifier
	INTEGER*4	DCL_REAL	! gets qualifier args. (real)
	INTEGER*4	DCL_STARTUP	! gets and parses the DCL 
C					  command line	
	INTEGER*4	DCL_STR		! gets qualifier args. (strings)
	INTEGER*4	DCL_CML	
C
C ......................................................................
C
C Initialise things.
C
	CALL TMRINI		! start collecting timing statistics
	WHINGE = .TRUE.		! LSLDCL local error reporting
	HAD_LOG = .FALSE. 	! set .TRUE. if /LOG
	HAD_TOL = .FALSE.	! set .TRUE. if /TOLERANCE
	HAD_FC = .FALSE.	! set .TRUE. if /FEATURE_CODE
	HAD_LOO = .FALSE.	! set .TRUE. if /LOOK_FOR
	LOCAL = .FALSE.		! set .TRUE. if qual. is local
	LOCNEG = .FALSE.	! set .TRUE. if qual. is 
				! locally negated
	NUM_FC = 0		! number of feature codes selected
C	
C
C ......................................................................
C
C Get command line for our command verb EXAMPLE. DCL_STARTUP will return
C set to SS$_NORMAL if all is well. 
C
	STATUS=DCL_STARTUP('EXAMPLE'	! command verb
     &			   ,'_From: '	! prompt if nothing there 
     &			   ,.FALSE.	! don't split parameter lists
     &			   ,EXAMPLE_CLD ! CLD module name
     &			   ,WHINGE)	! .T. - local error reporting
	IF (STATUS.NE.SS$_NORMAL) CALL EXIT (STATUS.OR.SUPERR)
C
C Purely for the purpose of showing the use of DCL_CML we shall use it 
C here, quite unnecessarily!
C
	OK=DCL_CML(CMLSTR, CMLEN, .FALSE.)
	IF (.NOT.OK) CALL EXIT (STATUS.OR.SUPERR)
	TYPE *,'Parsed command line = ',CMLSTR(:CMLEN)
C
C ......................................................................
C
C Check for qualifiers, we could have /LOG, /FEATURE_CODES=(int,...),
C /TOLERANCE=real and /LOOK_FOR=(string,...)
C
C
C First /LOG
C
	STATUS=DCL_QUAL('LOG'	 	! qualifier name
     &			,HAD_LOG	! returned .T. if qual. found
     &			,LOCAL	 	! .T. if qual local to parameter
     &			,LOCNEG  	! .T. if qual. negated locally
     &			,WHINGE) 	! .T. - local error reporting
	IF (STATUS.NE.SS$_NORMAL) CALL EXIT (STATUS.OR.SUPERR)
C
C Now /FEATURE_CODES
C
	STATUS=DCL_QUAL('FEATURE_CODES'	! qualifier name
     &			,HAD_FC 	! returned .T. if qual. found
     &			,LOCAL	 	! .T. if qual local to parameter
     &			,LOCNEG  	! .T. if qual. negated locally
     &			,WHINGE) 	! .T. - local error reporting
C
	IF (STATUS.NE.SS$_NORMAL) THEN
	    CALL EXIT (STATUS.OR.SUPERR)
	ELSE IF (HAD_FC) THEN		 ! get the arguments
C
	   STATUS=DCL_INT('FEATURE_CODES'! qualifier name
     &			  ,WHINGE) 	! .T. - local error reporting
	   IF (STATUS.NE.SS$_NORMAL) CALL EXIT (STATUS.OR.SUPERR)
C
C Transfer the args. to our local array
C
	   IF (NUMINT.GE.1) THEN
	       DO 10 I=1,NUMINT		
	           FCODE(I)=IARRAY(I)
10	       CONTINUE
	       NUM_FC=NUMINT
	   ENDIF
	ENDIF
C
C
C Now /LOOK_FOR (using the logical variable OK for error return this 
C time by way of example)
C
	OK = DCL_QUAL ( 'LOOK_FOR'	! qualifier name
     &			,HAD_LOO	! returned .T. if qual. found
     &			,LOCAL	 	! .T. if qual local to parameter
     &			,LOCNEG  	! .T. if qual. negated locally
     &			,WHINGE) 	! .T. - local error reporting
C
C Now get the string argument(s) for /LOOK_FOR (and we can leave them 
C in /CLDCHR/ since this is only qualifier which has string args.)
	IF (OK) THEN
	   OK=DCL_STR('LOOK_FOR'	! qualifier name
     &		      ,WHINGE) 		! .T. - local error reporting
C
	   IF (.NOT.OK) CALL EXIT (OK.OR.SUPERR)
	ELSE		
	   CALL EXIT (OK.OR.SUPERR)
	ENDIF
C
C Now /TOLERANCE
C
	STATUS=DCL_QUAL('TOLERANCE'	! qualifier name
     &			,HAD_TOL	! returned .T. if qual. found
     &			,LOCAL	 	! .T. if qual local to parameter
     &			,LOCNEG  	! .T. if qual. negated locally
     &			,WHINGE) 	! .T. - local error reporting
C
	IF (STATUS.NE.SS$_NORMAL) THEN
	    CALL EXIT (STATUS.OR.SUPERR)
	ELSE IF(HAD_TOL) THEN		! get the arguments
	   STATUS=DCL_REAL('TOLERANCE'	! qualifier name
     &			   ,WHINGE)	! .T. - local error reporting
C
	   IF (STATUS.NE.SS$_NORMAL) CALL EXIT (STATUS.OR.SUPERR)
C
C Transfer the args. to our local variable by way of example
C
	   IF (NUMREA.EQ.1) TOLER=RARRAY(1)
	ENDIF
C
C
C ......................................................................
C
C Now get the command parameters, in our example they are the input 
C file(s) and the output file. First the output file, so that we may
C leave the possible multiple input file-spec(s) in the /CLDCHR/ 
C common block for later reference without recourse to copyiny them 
C around un-necessarily.
C
	OK=DCL_FILE('OUT_FILESPEC'	! parameter or qualifier label
     &		   ,'LSL$IF:IFF.IFF;'	! default filename
     &		   ,ABSENT		! .T. if no filename found
     &		   ,.FALSE.		! don't expect list of filenames
     &		   ,WHINGE)		! .T. - local error reporting
C
C Transfer the file-spec to our local variable
C
	IF (OK) THEN
	    P2_FIL=FILARY(1)(:FIL_LEN(1))	   	    	   
	    P2_LEN=FIL_LEN(1)
	ELSE		
	   CALL EXIT (OK.OR.SUPERR)
	ENDIF
C
C Finally get the input file(s)
C
	OK=DCL_FILE('IN_FILESPEC'	! parameter or qualifier label
     &		   ,'LSL$IF:IFF.IFF;'	! default filename
     &		   ,ABSENT		! .T. if no filename found
     &		   ,.TRUE.		! expect list of filenames
     &		   ,WHINGE)		! .T. - local error reporting
C
	IF (.NOT.OK) CALL EXIT(OK.OR.SUPERR)
C
C ......................................................................
C
C And now, purely for the purposes of example... 
C (but normally useful code goes in here which does things with the 
C information gleaned from the command line).
C 
	IF (HAD_LOG) TYPE *,'/LOG'
C
	IF (HAD_FC) THEN
	    TYPE *, '/FEATURE_CODES set with the following args. -'
	    DO 20 I=1,NUM_FC
	       TYPE *, FCODE(I)
20	    CONTINUE
	ENDIF
C
	IF (HAD_TOL) TYPE *,'/TOLERANCE = ', TOLER
C
	IF (HAD_LOO) THEN
	    TYPE *, '/LOOK_FOR set with the following args. -'
	    DO 25 I=1,NUMSTR
	        TYPE *, CHARAY(I)(:STR_LEN(I))
25	    CONTINUE
	ENDIF
C
	DO 30 I=1,NUMFIL
	    TYPE *, 'Input file (',I,') = ', FILARY(I)(:FIL_LEN(I))
30 	CONTINUE
	TYPE *, 'Output file = ', P2_FIL(:P2_LEN)
C
C ......................................................................
C
C Now exit setting $STATUS as we go
C
	CALL EXIT (STATUS.OR.SUPERR)
	END
