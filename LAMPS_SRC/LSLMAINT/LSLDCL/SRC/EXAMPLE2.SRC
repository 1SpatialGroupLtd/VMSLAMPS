C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1985-09-25 12:15:38.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	PROGRAM	EXAMPLE2
C
***	MODULE	EXAMPLE2
***	IDENT	11SE85
C
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Author						TJH  11-Sep-1985
C
C Another example header for a LSL utility showing use of new LSLLIB 
C DCL command handling routines with particular regard to use of 
C positional qualifiers for a utility such as IMERGE.
C
C This header will handle a command line of the form:
C
C $ EXAMPLE2/LOG/SINGLE_LAYER=int/OUTPUT=file-spec -
C	_infile1/LAYER=(int,...),infile2/LAYER=(int,...), -
C 	_infileN/INLAYER=(int,...)
C
C Where specific layer number selections may be made for each individual
C infile.
C
C Or, alternatively:
C
C $ EXAMPLE2/LOG/SINGLE_LAYER=int/LAYER=(int,...)/OUTPUT=file-spec -
C	_infile1,infile2,infile3,infile4
C
C Where the layer selections made with /LAYER are applied globally to
C all the input files. In both sample command lines output is made to 
C the file specified with the /OUTPUT qualifier 
 
C ......................................................................
C
	IMPLICIT NONE
C
	INCLUDE '($RMSDEF)'
	INCLUDE '($SSDEF)'
	INCLUDE '($STSDEF)'
	INCLUDE 'LSL$CMNLSL:CLD.CMN'
C
C We need to specify that the error is not to be reflected
C
	PARAMETER	SUPERR = '10000000'X
C
C Command Language Definitions
	EXTERNAL        EXAMPLE2_CLD
C W/S
	LOGICAL*4	ABSENT		! .T. if file param. not found
	INTEGER*4	G_LAYRS(128)	! for global layer selections
	INTEGER*4	GLONUM		! number of layers globally sel.
	INTEGER*4	I,J		! tmp. vars.
	CHARACTER*128	INFILE(8)	! input file-specs
	INTEGER*4	ILAYRS(128,8)	! input file layer selections
	INTEGER*4	LENFIL(8)	! length of input file-spec
	LOGICAL*4	LIST		! controls search of file lists
	LOGICAL		LOCAL		! .T. if qual. is local
	LOGICAL		LOCNEG		! .T. if qual. locally negated
	INTEGER*4	NUM_LAY(8)	! number of layers selected
	INTEGER*4	NUMPAR		! no. input parameters specified
	LOGICAL*4	OK		! for error return another way
	INTEGER*4	SLAYER		! output file layer
	INTEGER*4	OUFILN		! length of output file spec
	CHARACTER*2	PARAMS(8) 	! parameter names
	LOGICAL*4	WHINGE		! .T. if local error reporting
C
C Qualifier flags
	LOGICAL		GLOB_LAY	! .TRUE. if /LAYER is global
	LOGICAL		HAD_ILAY	! set .TRUE. if /LAYER
	LOGICAL		HAD_LOG		! set .TRUE. if /LOG
	LOGICAL		HAD_SLAY	! set .TRUE. if /SINGLE_LAYER
	LOGICAL		HAD_OUT		! set .TRUE. if /OUTPUT
C
C Functions called
	INTEGER*4	DCL_FILE	! reads and parses file title 
C					  from DCL command line
	INTEGER*4	DCL_INT		! gets qualifier args. (integer)
	INTEGER*4	DCL_QUAL	! looks for specified qualifier
	INTEGER*4	DCL_REAL	! gets qualifier args. (real)
	INTEGER*4	DCL_STARTUP	! gets and parses the DCL 
C					  command line	
	INTEGER*4	DCL_STR		! gets qualifier args. (strings)
C
	DATA PARAMS/'P1','P2','P3','P4','P5','P6','P7','P8'/
C
C ......................................................................
C
C Initialise things.
C
	CALL TMRINI		! start collecting timing statistics
C
	LIST	=	.FALSE. ! parameters are single files not lists
	WHINGE 	= 	.TRUE.	! LSLDCL local error reporting
	HAD_LOG = 	.FALSE.	! set .TRUE. if /LOG
	GLOB_LAY = 	.FALSE.	! .TRUE. if /LAYER is global
	HAD_SLAY = 	.FALSE.	! set .TRUE. if /SINGLE_LAYER
	HAD_ILAY = 	.FALSE.	! set .TRUE. if /LAYER
	LOCAL 	= 	.FALSE.	! set .TRUE. if qual. is local
	LOCNEG 	= 	.FALSE.	! set .TRUE. if qual. is 
C				! locally negated
C
C ......................................................................
C
C Get command line for our command verb EXAMPLE2. DCL_STARTUP will 
C return set to SS$_NORMAL if all is well. 
C
	OK=DCL_STARTUP('EXAMPLE2'	! command verb
     &		      ,'_Input-file1: '	! prompt if nothing there 
     &		      ,.TRUE.		! split parameter list
     &		      ,EXAMPLE2_CLD 	! CLD module name
     &		      ,WHINGE)	 	! .T. - local error reporting
	IF (.NOT.OK) CALL EXIT (OK.OR.SUPERR)
C
C
C ......................................................................
C
C Check for qualifiers, we could have /LOG, /LAYER=(int,...),
C /SINGLE_LAYER=(int,...) and /OUTPUT=file-spec
C
C First /LOG - if present HAD_LOG will be returned .T.
C
	OK = DCL_QUAL ( 'LOG'	 	! qualifier name
     &			,HAD_LOG	! returned .T. if qual. found
     &			,LOCAL	 	! .T. if qual local to parameter
     &			,LOCNEG  	! .T. if qual. negated locally
     &			,WHINGE) 	! .T. - local error reporting

	IF (.NOT.OK) CALL EXIT (OK.OR.SUPERR)
C
C Now /SINGLE_LAYER - if present HAD_SLAY will be returned .T.

C
	OK = DCL_QUAL ( 'SINGLE_LAYER'	! qualifier name
     &			,HAD_SLAY	! returned .T. if qual. found
     &			,LOCAL	 	! .T. if qual local to parameter
     &			,LOCNEG  	! .T. if qual. negated locally
     &			,WHINGE) 	! .T. - local error reporting

	IF (.NOT.OK) THEN
	    CALL EXIT (OK.OR.SUPERR)
	ELSE IF (HAD_SLAY) THEN			! get the arguments
	   OK=DCL_INT('SINGLE_LAYER',WHINGE)
	   IF (.NOT.OK) CALL EXIT (OK.OR.SUPERR)
C
C Transfer the output layer to a local variable
	   SLAYER=IARRAY(1)
	ENDIF
C
C Now try /LAYER in a global sense (ie after the verb but BEFORE
C the parameters) If is is in this position then we may assume the
C user wishes the selection arguments to apply to all the imput files
C Our call to DCL_QUAL will return LOCAL as .F. if we have a global
C useage of /LAYER.
C
	OK = DCL_QUAL ( 'LAYER'	 	! qualifier name
     &			,HAD_ILAY	! returned .T. if qual. found
     &			,LOCAL	 	! .T. if qual local to parameter
     &			,LOCNEG  	! .T. if qual. negated locally
     &			,WHINGE) 	! .T. - local error reporting
C
	IF (.NOT.OK) THEN
	    CALL EXIT (OK.OR.SUPERR)
C
	ELSE IF (HAD_ILAY.AND..NOT.LOCAL) THEN	! get the arguments
	   OK = DCL_INT('LAYER'		! qualifier name
     &			,WHINGE) 	! .T. - local error reporting
C
	   IF (.NOT.OK) CALL EXIT (OK.OR.SUPERR)
C
C Transfer the args. to our local array ...
C
	    DO 10 I=1,NUMINT		
	        G_LAYRS(I)=IARRAY(I)
10	    CONTINUE
	    GLONUM=NUMINT
C
C ... and set the flag to say we have a global layer selection
	   GLOB_LAY=.TRUE.
	ENDIF
C
C Now get the infiles which if GLOB_LAY is not set .TRUE. will probably 
C have /LAYER qualifiers interspersed between them.
C
C Get the required first infile 'P1', all the others are optional.
C
	OK=DCL_FILE(PARAMS(1)		! parameter or qualifier label
     &		   ,'LSL$IF:IFF.IFF;'	! default filename
     &		   ,ABSENT		! .T. if no filename found
     &		   ,.FALSE.		! don't expect list of filenames
     &		   ,WHINGE)		! .T. - local error reporting
C
	IF (.NOT.OK) CALL EXIT(OK.OR.SUPERR)
C
C Transfer the file-spec to a local variable 
	INFILE(1)=FILARY(1)(:FIL_LEN(1))
	LENFIL(1)=FIL_LEN(1)
	NUMPAR=1	! store the number of input file parameters read
C
C Now see if there is a /LAYER qualifier in the environment of this
C parameter (/LAYER was declared with "PLACEMENT=POSITIONAL" in the 
C EXAMPLE2.CLD module). Only bother if an overriding global selection 
C has not been set.
C
	IF (.NOT.GLOB_LAY) THEN
C
	OK = DCL_QUAL ( 'LAYER'	 	! qualifier name
     &			,HAD_ILAY	! returned .T. if qual. found
     &			,LOCAL	 	! .T. if qual local to parameter
     &			,LOCNEG  	! .T. if qual. negated locally
     &			,WHINGE) 	! .T. - local error reporting
C
	   IF (.NOT.OK) THEN
	       CALL EXIT (OK.OR.SUPERR)
C
C get the arguments
	   ELSE IF (HAD_ILAY.AND.LOCAL) THEN	
	      OK=DCL_INT('LAYER'	! qualifier name
     &			,WHINGE) 	! .T. - local error reporting
C
	      IF (.NOT.OK) CALL EXIT (OK.OR.SUPERR)
C
C Transfer the args. to our local array ...
C
	       DO 20 J=1,NUMINT		
	           ILAYRS(J,1)=IARRAY(J)
20	       CONTINUE
	       NUM_LAY(1)=NUMINT
	   ENDIF
	ENDIF
C
C No loop for any other input file specs, we can have up to 8 infiles.
C
	DO 40 I=2,3
C
	   OK=DCL_FILE(PARAMS(I)	! parameter or qualifier label
     &		     ,'LSL$IF:IFF.IFF;'	! default filename
     &		     ,ABSENT		! .T. if no filename found
     &		     ,.FALSE.		! don't expect list of filenames
     &		     ,WHINGE)		! .T. - local error reporting
C
	   IF (.NOT.OK) CALL EXIT(OK.OR.SUPERR)
C
	   IF (ABSENT) GOTO 50	! no more input file parameters
C
C If we get here we will have got a file-spec in FILARY(1) which we must
C copy into a local variable.
C
	   INFILE(I)=FILARY(1)(:FIL_LEN(1))
	   LENFIL(I)=FIL_LEN(1)	
	   NUMPAR=I	! increment number of input file parameters read
C
C As with P1 see if there is a /LAYER qualifier in the environment of
C this parameter. Only bother if an overriding global selection 
C has not been set
C
	IF (.NOT.GLOB_LAY) THEN
C
	OK = DCL_QUAL ( 'LAYER'	 	! qualifier name
     &			,HAD_ILAY	! returned .T. if qual. found
     &			,LOCAL	 	! .T. if qual local to parameter
     &			,LOCNEG  	! .T. if qual. negated locally
     &			,WHINGE) 	! .T. - local error reporting
C
	   IF (.NOT.OK) THEN
	       CALL EXIT (OK.OR.SUPERR)
C
	   ELSE IF (HAD_ILAY.AND.LOCAL) THEN	! get the arguments
	      OK=DCL_INT('LAYER'		! qualifier name
     &			,WHINGE) 	! .T. - local error reporting
C
	      IF (.NOT.OK) CALL EXIT (OK.OR.SUPERR)
C
C Transfer the args. to our local array ...
C
	       DO 30 J=1,NUMINT		
	           ILAYRS(J,I)=IARRAY(J)
30	       CONTINUE
	       NUM_LAY(I)=NUMINT
	   ENDIF
	ENDIF
40	CONTINUE	
C
C ......................................................................
C
C
C Finally /OUTPUT=file-spec
C
C Now get the file-spec argument for /OUTPUT. /OUTPUT must be "present"
C as it is a default qualifier. If the user doesn't supply /OUTPUT
C explicitly then the name of the first input file will be used.
C As this is the last call to DCL_FILE we can leave the output 
C file-spec lying in FILARY() 
C
50	OK = DCL_QUAL ( 'OUTPUT' 	! qualifier name
     &			,HAD_OUT	! returned .T. if qual. found
     &			,LOCAL	 	! .T. if qual local to parameter
     &			,LOCNEG  	! .T. if qual. negated locally
     &			,WHINGE) 	! .T. - local error reporting
C
	IF (OK) THEN
	   OK=DCL_FILE('OUTPUT'		! parameter or qualifier label
     &		     ,INFILE(1)(:LENFIL(1)) ! default filename
     &		     ,ABSENT		! .T. if no filename found
     &		     ,.FALSE.		! don't expect list of filenames
     &		     ,WHINGE)		! .T. - local error reporting
C
	   IF (.NOT.OK) CALL EXIT (OK.OR.SUPERR)
	ELSE		
	   CALL EXIT (OK.OR.SUPERR)
	ENDIF
C
C ......................................................................
C
C And now, purely for the purposes of example... 
C (but normally useful code goes in here which does things with the 
C information gleaned from the command line).
C 
	IF (GLOB_LAY) THEN
	   TYPE *, 'Global selection of input file layers:'
	   DO 60 J=1,GLONUM
	   TYPE *, G_LAYRS(J)	! input file layer selections
60	   CONTINUE
	ENDIF
C
	IF (HAD_LOG) TYPE *,'/LOG set'
C
	IF (HAD_SLAY) THEN
	    TYPE *, '/SINGLE_LAYER set to: ' ,SLAYER
	ENDIF
C
C
	IF (HAD_OUT) THEN
	    TYPE *, '/OUTPUT set to: ',FILARY(1)(:FIL_LEN(1))
	ENDIF
C
	DO 80 I=1,NUMPAR
	    TYPE *, 'Input file (',I,') = ', INFILE(I)(:LENFIL(I))
	     IF (NUM_LAY(I).GE.1) THEN	! number of layers selected
		TYPE *, 'With the following layer selections:'
		DO 70 J=1,NUM_LAY(I)
		   TYPE *, ILAYRS(J,I)	! input file layer selections
70	        CONTINUE
	      ELSE
		TYPE *, '(With no layers selected.)'		
	     ENDIF
80	CONTINUE
C
C ......................................................................
C
C Now exit setting $STATUS as we go
C
	CALL EXIT (OK.OR.SUPERR)
	END
