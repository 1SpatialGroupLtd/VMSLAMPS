C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-10-20 13:20:42.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE RD_IDE(IDEFUL, IDEBYT, IDEPTR, MAXIDE, IDETXT)
C
***	MODULE RD_IDE
***	IDENT 20OC86
C
	IMPLICIT CHARACTER*1 (A-Z)
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England
C Author R. Fairbairns
C
C Coded July 1981
C
C To read ADC.IDE file for PVV
C
C arguments:
	INTEGER*4	IDEFUL		! size of array IDEPTR
	INTEGER*4	IDEBYT 		! size of array IDETXT
	INTEGER*4	IDEPTR(IDEFUL)	! to hold pointers to module name/IDENT
C					!			pairs in IDETXT
	INTEGER*4	MAXIDE		! returns the number of entries made
C					!			in IDEPTR
	BYTE		IDETXT(IDEBYT)	! holds a sequence of .ASCIC strings
C					!   of module names and their IDENTs
C
***	COMMON/RMSCTL/
C
C special TXTC with vast TXTBUF
***	COMMON/TXTC/
C
C w/s:
	INTEGER*4	BUFPTR		! pointer on IDETXT
	INTEGER*4	I		! loop variable
D	INTEGER*4	IDENTP		! pointer to IDENT
D	INTEGER*4	NAMPTR		! pointer to module name
C
C open the file and connect it up
	CALL RD_OPEN('ADC.IDE')
	CALL RD_CONNECT
C
C initialise
	MAXIDE = 0
	BUFPTR = 1
C
C loop to read file
10	CALL RD_GET
	IF (RDEOFF) GOTO 70
C
C copy module name out of file record
	DO I = 1,62
	  IF (TXTBUF(I) .EQ. ' ') GOTO 30
	  IDETXT(BUFPTR+I) = TXTBUF(I)
	ENDDO
C
C fall through if 62-character module name(!)
	I = 63
C
C space encountered within module name field
30	IF (I.EQ.1) GOTO 10		! null name (?)
C
C now allocate space for it in IDEPTR
	MAXIDE = MAXIDE+1
	IF (MAXIDE .GT. IDEFUL) GOTO 60
	IDEPTR(MAXIDE) = BUFPTR
C
C make up .ASCIC string of module name
	IDETXT(BUFPTR) = I-1
	BUFPTR = BUFPTR+I
C
C is there and IDENT there?
	IF (TXTPTR .LT. 63) I = 63
	IF (TXTPTR .LT. 63) GOTO 50
C
C now read IDENT
	DO I = 63,TXTPTR
	  IF (TXTBUF(I) .EQ. ' ') GOTO 50
	  IDETXT(BUFPTR+I-62) = TXTBUF(I)
	ENDDO
C
C fall through, typically, with IDENT ending at end of record
	I = TXTPTR+1
C
C make up IDENT .ASCIC string
50	IDETXT(BUFPTR) = I-63
	BUFPTR = BUFPTR+I-62
	GOTO 10
C
C IDEPTR overflowed
60	CALL WRITEF('Module table overflowed')
	CALL WRITEF('First line lost is %AD', TXTDSC)
	MAXIDE = MAXIDE-1
C
C end of file
70	CALL RD_CLOSE
D	IF (MAXIDE .EQ. 0) GOTO 90
D	DO 80 I = 1,MAXIDE
D	NAMPTR = IDEPTR(I)
D	IDENTP = NAMPTR+IDETXT(NAMPTR)+1
D	CALL WRITEF('%N: Module %AC ident %AC',
D     &               I,IDETXT(NAMPTR), IDETXT(IDENTP))
D80	CONTINUE
	RETURN
C
C no IDENTs read
D90	CALL WRITEF('RD_IDE - no IDENTs read')
D	RETURN
C
	END
