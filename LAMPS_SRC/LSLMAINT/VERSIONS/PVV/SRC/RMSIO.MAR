;
; * This file is part of the LAMPS distribution, released as a software
; * preservation project to archive digital history for future historians.
; * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
; *
; * Timestamp of this file for the 2002 release was: 1995-01-23 15:02:28.000000000 +0000
; *
; * This program is free software: you can redistribute it and/or modify
; * it under the terms of the GNU General Public License as published by
; * the Free Software Foundation, version 3.
; *
; * This program is distributed in the hope that it will be useful, but
; * WITHOUT ANY WARRANTY; without even the implied warranty of
; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
; * General Public License for more details.
; *
; * You should have received a copy of the GNU General Public License
; * along with this program. If not, see http://www.gnu.org/licenses/.
;
	.TITLE	RMSIO
	.IDENT	/20OC86/
 
; Copyright Laser-Scan Laboratories, Ltd., Cambridge, England
; Author  R. Fairbairns		Coded July 1981
 
; define macro library
	.LIBRARY	/LSL$LIBRARY:LSLMACLIB/
 
; RMS input and output routines for program PVV
 
; define RMS workspace
	COMMON	RMS_DATA
 
RD_RAB:		$RAB	FAB=RD_FAB,-	; related FAB
			RAC=SEQ,-	; sequential access
			ROP=RAH		; read ahead transfers
 
RD_XAB_PRO:	$XABPRO			; defaults: read from file header
 
RD_XAB_ALL:	$XABALL	NXT=RD_XAB_PRO	; defaults: ...
 
RD_XAB_FHC:	$XABFHC	NXT=RD_XAB_ALL	; defaults: ...
 
RD_FAB:		$FAB	DNM=<.OBJ>,-	; default file name
			FOP=SQO		; sequential processing only
 
WT_RAB:		$RAB	FAB=WT_FAB,-	; related FAB
			RAC=SEQ,-	; sequential access
			ROP=WBH		; write behind transfers
 
WT_FAB:		$FAB	DNM=<.OBJ>,-	; default file name
			FOP=<SQO,TEF>	; sequential processing only,
					; truncate at end of file
 
; texts
FAB_ACTFNM:	.BLKL	2		; used to store actual file name used
					; in OPEN or CREATE call
 
RD_FAB_FNM:	.ASCID	/TEST/		; (default) file name used in RD_OPEN
 
OPEN_TXT:	.ASCID	/open/		   ; used
CREATE_TXT:	.ASCID	/create/	   ;  in error routine
MOAN_TXT:	.ASCID	/Can't %S file %S/ ;    moan generation
 
; define 'text' input common block
	COMMON	TXTC
 
DCPTR:	.BLKW		1		; decode pointer
TXTPTR:	.BLKW		1		; end of line pointer
TXTTYP:	.BLKB		2		; string descriptor guff
TXTADD:	.ADDRESS	TXTBUF		; pointer to buffer
TXTLIM:	.BLKW		1		; maximum size of buffer (set by FORTRAN)
TXTCLI:	.BLKW		1		; marker 'had CLI line'
TXTBUF:	.BLKB		80		; buffer for text read from file
; (NB FORTRAN program will typically redefine at least size of TXTBUF)
 
; define 'RMS control' common block
	COMMON	RMSCTL
 
RDEOFF:	.BLKB		1		; TRUE after eof found on read file
; (not very much of this, is there?)
 
	CODE_PSECT RMSIO
 
 
; * * *   R M S   r e a d   c a l l s
 
 
; RD_OPEN		open read file on RD_FAB
 
; argument
;	name	of file to be opened
;		<default TEST>
 
 .ENTRY	RD_OPEN, ^M<R11>
 
	JSB	G^VIO$1ST		; init arg reading
	MOVAQ	RD_FAB_FNM, R0		; default argument
	JSB	G^VIO$GNA		; get argument, if any
	MOVAQ	(R0), R1		; copy, since R0 is destroyed by $FAB_STORE
	MOVQ	(R1), FAB_ACTFNM	; save actual filename opened
 
; RMS operations
	$FAB_STORE	FAB=RD_FAB,-	; set up non-constant bits of FAB
			XAB=RD_XAB_FHC,- ; XAB chain
			FNA=@4(R1),-	; name of file
			FNS=(R1)	; and its length
	$OPEN		FAB=RD_FAB, ERR=OPEN_ERROR
 
; initialise
	CLRB	RDEOFF			; no eof found yet (strangely enough)
	RET
 
 
; RD_CONNECT		connect read RAB to its FAB
 
 .ENTRY	RD_CONNECT, ^M<>
 
	$CONNECT	RAB=RD_RAB, ERR=RD_ERROR
	RET
 
 
 
; RD_CLOSE		close read file input
 
 .ENTRY	RD_CLOSE, ^M<>
 
	$CLOSE		FAB=RD_FAB, ERR=RD_ERROR
	RET
 
 
 
; * * *   R M S   w r i t e   c a l l s
 
 
 
; WT_CREATE		create write file on WT_FAB
 
; argument
;	name	of file to be created
;		<default TEST>
 
 .ENTRY	WT_CREATE, ^M<R11>
 
	JSB	G^VIO$1ST		; init arg reading
	MOVAQ	RD_FAB_FNM, R0		; default argument
	JSB	G^VIO$GNA		; get argument, if any
	MOVAQ	(R0), R1		; copy, since R0 is destroyed by $FAB_STORE
	MOVQ	(R1), FAB_ACTFNM	; save actual filename quoted
 
; RMS operations
	$FAB_STORE	FAB=WT_FAB,-	; set up non-constant bits of FAB
			XAB=RD_XAB_FHC,- ; XAB chain
			FNA=@4(R1),-	; name of file
			FNS=(R1)	; and its length
	MOVB	RD_FAB+FAB$B_ORG, FAB$B_ORG(R0) ; copy file organisation
	MOVB	RD_FAB+FAB$B_RAT, FAB$B_RAT(R0) ;      record attributes
	MOVB	RD_FAB+FAB$B_RFM, FAB$B_RFM(R0) ;      record format
	$CREATE		FAB=WT_FAB, ERR=CREATE_ERROR
	RET
 
 
; WT_CONNECT		connect read RAB to its FAB
 
 .ENTRY	WT_CONNECT, ^M<>
 
	$CONNECT	RAB=WT_RAB, ERR=WT_ERROR
	RET
 
 
 
; WT_CLOSE		close read file input
 
 .ENTRY	WT_CLOSE, ^M<>
 
	$CLOSE		FAB=WT_FAB, ERR=WT_ERROR
	RET
 
 
 
; * * *		R e a d i n g   f r o m   f i l e
 
 
; RD_GET		get record from file
 
; arguments are:
; 1:	buffer		address of buffer (default TXTBUF)
; 2:	bufsiz		size of buffer (default TXTLIM)
; 3:	reclen		size of record read (default TXTPTR)
 
 .ENTRY	RD_GET, ^M<R2,R3,R11>
 
	JSB	G^VIO$1ST		; initialise VIOLIB argument mechanism
	MOVAB	TXTBUF, R0		; default buffer
	JSB	G^VIO$GNA		; get buffer arg, if present
	MOVAB	(R0), R1		; preserve that
	MOVAW	TXTLIM, R0		; default buffer size
	JSB	G^VIO$GNA		; get buffer size arg, if present
	MOVAW	(R0), R2		; preserve that, too
	MOVAW	TXTPTR, R0		; default record length
	JSB	G^VIO$GNA		; get record length arg, if present
	MOVAW	(R0), R3		; preserve that, as well
 
; now do the RMS stuff associated with the transfer
	$RAB_STORE	RAB=RD_RAB,-	; preset RAB's
			UBF=(R1),-	; user buffer address, and
			USZ=(R2)	; its size
	$GET		RAB=RD_RAB,-	; get the record
			ERR=RD_ERROR	; (standard error routine)
 
; recover length of record read
	MOVW	RD_RAB+RAB$W_RSZ, (R3)	; from RAB
	RET
 
 
; * * *		W r i t i n g   t o   f i l e
 
 
; WT_PUT		put record to file
 
; arguments are:
; 1:	buffer		address of buffer (default TXTBUF)
; 2:	bufsiz		size of buffer (default TXTLIM)
 
 .ENTRY	WT_PUT, ^M<R2,R3,R11>
 
	JSB	G^VIO$1ST		; initialise VIOLIB argument mechanism
	MOVAB	TXTBUF, R0		; default buffer
	JSB	G^VIO$GNA		; get buffer arg, if present
	MOVAB	(R0), R1		; preserve that
	MOVAW	TXTPTR, R0		; default buffer size
	JSB	G^VIO$GNA		; get buffer size arg, if present
	MOVAW	(R0), R2		; preserve that, too
 
; now do the RMS stuff associated with the transfer
	$RAB_STORE	RAB=WT_RAB,-	; preset RAB's
			RBF=(R1),-	; user buffer address, and
			RSZ=(R2)	; its size
	$PUT		RAB=WT_RAB,-	; put the record
			ERR=WT_ERROR	; (standard error routine)
	RET
 
 
 
; * * *   E r r o r   r o u t i n e s
 
 
; OPEN_ERROR		error exit from OPEN
 
OPEN_ERROR: .WORD 0
 
	PUSHL	RD_FAB+FAB$L_STS	; save error
	MOVAQ	OPEN_TXT, R0		; type of operation
	BRB	OPCRER			; join CREATE error
 
 
; RD_ERROR		error exit from read RMS calls
 
RD_ERROR: .WORD	0
 
	MOVL	RD_RAB+RAB$L_STS, R0	; obtain error code
	CMPL	R0, #RMS$_EOF		; is it end of file?
	BEQL	10$			; if EQL, it is - treat differently
	PUSHL	R0			; save for exit, later
	PUSHL	R0			; arg for signal
	CALLS	#1, G^LIB$SIGNAL	; signal error
	POPR	#^M<R0>			; recover register
	$EXIT_S	R0			; toodle-pip
 
; end of file encountered
10$:	MNEGB	#1, RDEOFF		; signal to calling program
	RET
 
 
; CREATE_ERROR		error exit from CREATE
 
CREATE_ERROR: .WORD 0
 
	PUSHL	WT_FAB+FAB$L_STS	; save error code
	MOVAQ	CREATE_TXT, R0		; type of operation
 
; OPEN and CREATE common
OPCRER:	PUSHAQ	FAB_ACTFNM		; actual filename specified
	PUSHAQ	(R0)			; type of operation
	PUSHAQ	MOAN_TXT		; proforma message
	CALLS	#3, G^WRITEF		; generate basic message
	$EXIT_S	(SP)			; exit, offering reason for failure
 
 
; WT_ERROR		error exit from write RMS calls
 
WT_ERROR: .WORD	0
 
	MOVL	WT_RAB+RAB$L_STS, R0	; obtain error code
	PUSHL	R0			; save for exit, later
	PUSHL	R0			; arg for signal
	CALLS	#1, G^LIB$SIGNAL	; signal error
	POPR	#^M<R0>			; recover register
	$EXIT_S	R0			; toodle-pip
 
 
 
; * * *   M i s c e l l a n y
 
; EXT_HDREC		extract contents of a 'text' header record
 
; argument:
;	desc	descriptor of character string to be set up as content of record
 
 .ENTRY	EXT_HDREC, ^M<R11>
 
	JSB	G^VIO$1ST		; initialise argument reading
	JSB	G^VIO$GNA		; obtain argument
; (should diagnose argument missing, really)
	SUBL3	#2, TXTPTR, (R0)+	; decrease length
	ADDL3	#2, TXTADD, (R0)	; increase address
	RET
 
; CHSTR_LEN		patch length of a CHARACTER variable
 
; arguments
;	char	variable whose length is to be patched
;	len	length to set it to
 
 .ENTRY	CHSTR_LEN, ^M<R11>
 
	JSB	G^VIO$1ST		; initialise argument reading
	JSB	G^VIO$GNA		; obtain argument
; (should diagnose argument missing, really)
	MOVAQ	(R0), R1		; copy against next GNA
	JSB	G^VIO$GNA		; next arg
; (should diagnose argument missing, really)
	MOVW	(R0), (R1)		; perform aperation
	RET
 
	.END
