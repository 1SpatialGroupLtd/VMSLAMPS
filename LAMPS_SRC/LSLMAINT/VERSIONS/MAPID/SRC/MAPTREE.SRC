C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-01-08 16:53:32.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	PROGRAM MAPTREE
C
***	MODULE MAPTREE
***	IDENT  05SE91
C
C Copyright Laser-Scan Laboratories Limited,Cambridge,England
C Author Paul Hardy
C
C	Written and typed				PGH	09-Apr-1982
C	Amended to cope with LITES2			PGH	17-Jan-1984
C	Amended to cope with VMS V5			PGH	 9-Aug-1991
C	Amended for long symbol names			PGH	 5-Sep-1991
C	Add supression of external references		PGH	 5-Sep-1991
C	Amended for V5.4-3				PGH	 8-Jan-1992
C
C program for printing module call tree
C from VAX LINK maps.
C
	IMPLICIT NONE
C
	CHARACTER CLINE*80	! command line
	INTEGER*2 CLEN		! length of command line
	CHARACTER MLINE*132	! line from map
	INTEGER*2 MLEN		! length of line from map
	CHARACTER DATE*17	! date of linking
	CHARACTER MODULE*16	! module name
	CHARACTER MODLST(500)*16! list of all modules
	INTEGER*2 NLST		! how many so far
	CHARACTER MODTAB(200,500)*16 ! and the modules they call
	INTEGER*2 NTAB(500)	! and how many of each
	LOGICAL*1 DONE(500)	! whether it is done yet
	LOGICAL*1 FULL		! full tree rather than brief
	LOGICAL*1 NOSHR		! suppress references to shared images
	CHARACTER SYMBOL*16	! symbol being considered
	CHARACTER MODBUF*16	! module calling SYMBOL
	CHARACTER ROOT*16	! root module name
	INTEGER*2 RLEN		! its length
	INTEGER*4 IERR		! general error code
	INTEGER*2 LINPTR,SPCPTR ! line pointers
	INTEGER*2 NSAV,SAVJ(200),SAVI(200) ! stack for recursion
	INTEGER*2 INDENT	! indentation factor
	INTEGER*2 INDLIM	! indentation limit
	CHARACTER CH*1
	INTEGER*2 LEVEL		! level of nesting
	INTEGER*2 I,J,K,LST
	CHARACTER FULBRE*5	! full or brief tree
	INTEGER*2 FBLEN		! length of above
	CHARACTER SHRMSG*24	! externals suppressed
	INTEGER*2 SHRLEN	! length of above
C
C routines called
	INTEGER INDEX
C
	DATA NTAB/500*0/
	DATA DONE/500*.FALSE./
	DATA INDENT/8/
C
C general init - assume success
	IERR = 1
	NLST = 0
C
C get hold of filename 
	WRITE(6,6600)
6600	FORMAT(' ','Filename ?  ',$)
	READ(5,5000,END=900)CLEN,CLINE
5000	FORMAT(Q,A)
	IF(CLEN.LE.0) GOTO 800
	CALL STR$UPCASE(CLINE(1:CLEN),CLINE(1:CLEN))
C
C get files
	OPEN (UNIT=1,NAME=CLINE(1:CLEN)//'.MAP',TYPE='OLD',
     &    READONLY,SHARED,ERR=800)
	OPEN (UNIT=2,NAME=CLINE(1:CLEN)//'.LIS',
     &    TYPE='NEW')
	WRITE(6,6605)CLINE(1:CLEN)//'.LIS'
6605	FORMAT(' ','Tree listing will be in ',A)
C
C get root module name
	WRITE(6,6610)
6610	FORMAT(' ','Root module name ?  ',$)
	READ(5,5000)RLEN,ROOT
	IF (ROOT.EQ.' ') THEN 
	   ROOT=CLINE(1:CLEN)
	   RLEN=CLEN
	ENDIF
	CALL STR$UPCASE(ROOT(1:RLEN),ROOT(1:RLEN))
	WRITE(6,6615)ROOT(1:RLEN)
6615	FORMAT(' ','Root module is ',A)
C
C full tree ??
	WRITE(6,6620)
6620	FORMAT(' ','Include duplicated subtrees ?  ',$)
	READ(5,5000)I,CH
	FULL=(CH.EQ.'Y'.OR.CH.EQ.'y')
	IF (FULL) THEN
	   FULBRE='Full'
	   FBLEN=4
	ELSE
	   FULBRE='Brief'
	   FBLEN=5
	ENDIF
C
C suppress externals  ??
	WRITE(6,6625)
6625	FORMAT(' ','Suppress externals from shared libraries ?  ',$)
	READ(5,5000)I,CH
	NOSHR=(CH.EQ.'Y'.OR.CH.EQ.'y')
	IF (NOSHR) THEN
	   SHRMSG=' externals suppressed, '
	   SHRLEN=23
	ELSE
	   SHRMSG=' '
	   SHRLEN=1
	ENDIF
C
	WRITE(6,6630)
6630	FORMAT(' ','Tree indent factor (default 8) ?  ',$)
	READ(5,5010)I
5010	FORMAT(I)
	IF (I.GT.0) INDENT = I
	I = 0
	WRITE(6,6640)
6640	FORMAT(' ','Tree depth limit (default is no limit) ?  ',$)
	READ(5,5010)I
	IF (I.GT.0.AND.I.LT.100) THEN
	   INDLIM = I
	ELSE
	   INDLIM = 99
	ENDIF
C
C get date, and print header
5	READ(1,1000,END=600)MLEN,MLINE
	IF (MLEN.LT.81) GOTO 5
	DATE = MLINE(66:82)
	WRITE(2,2000)CLINE(1:CLEN),DATE,
     &        FULBRE(1:FBLEN),SHRMSG(1:SHRLEN),INDENT,INDLIM
	WRITE(6,2000)CLINE(1:CLEN),DATE,
     &        FULBRE(1:FBLEN),SHRMSG(1:SHRLEN),INDENT,INDLIM
2000	FORMAT(' ','Module call tree from ',A,'.MAP linked on ',A/
     &         ' ',A,' tree,',A,'Indent ',I2,' spaces, Max tree depth ',
     &            I2,' modules.')
C
C read lines, extracting as needed
10	READ(1,1000,END=600)MLEN,MLINE
1000	FORMAT(Q,A)
6000	FORMAT(' ',A)
	IF (MLEN.LT.43) GOTO 12
	IF (INDEX(MLINE(1:MLEN),'Psect').NE.0) GOTO 300
	IF (INDEX(MLINE(1:MLEN),'VAX').NE.0) GOTO 15
	GOTO 10
C
C have we a module name on a line by itself ?
12	IF (MLINE(1:31).EQ.' '.OR.MLINE(32:43).NE.' ') GOTO 10
	MODULE = MLINE(1:MLEN)
	GOTO 10
C
C extract the bits we want
15	IF (MLINE(1:16).NE.' ') MODULE = MLINE(1:16)
	IF(INDEX(MLINE(1:MLEN),'.OLB').NE.0) THEN  ! from library
	   IF (INDEX(MLINE(1:MLEN),'.OBJ').EQ.0) GOTO 10 ! and not local
	ENDIF
	IF(INDEX(MLINE(1:MLEN),'.EXE').NE.0) GOTO 10 ! from shared image
	IF(INDEX(MLINE(1:MLEN),'Page').NE.0) GOTO 10 ! page header
	IF(INDEX(MLINE(1:MLEN),'Message').NE.0) GOTO 10 ! page header
	IF(MLINE(37:42).EQ.' ') GOTO 10
C
C and add the module to the list
	NLST = NLST + 1
	WRITE (6,6010)NLST,MODULE
	IF(NLST.GT.500) STOP 'MODULE buffer overflow'
	MODLST(NLST) = MODULE
	GOTO 10
C
C skip to cross reference
300	WRITE(6,6010)NLST,' Modules found'
6010	FORMAT(' ',I4,' ',A)
310	READ(1,1000,END=700)MLEN,MLINE
	IF (MLINE(55:59).NE.'Cross') GOTO 310
	WRITE(6,6000) 'Cross reference found'
C
C now read cross reference, building up call sequence
400	READ(1,1000,END=500)MLEN,MLINE
	IF (MLEN.LT.50) GOTO 400
	LINPTR=1			  ! for benefit of continuation lines
	IF (MLINE(1:50).EQ.' ') GOTO 405  ! which this one is
	LINPTR = INDEX(MLINE(1:MLEN),'-R')
	IF (LINPTR.EQ.0) GOTO 400
C skip external references if asked.
	IF (NOSHR.AND.(MLINE(LINPTR+2:LINPTR+2).EQ.'X')) GOTO 400
	DO 403 I=LINPTR+3,MLEN
	   IF (MLINE(I:I).NE.' ') GOTO 404
403	   CONTINUE
	GOTO 400
404	SYMBOL = MLINE(1:16)
	MODULE = MLINE(I:I+15)
	LINPTR=I+16
C
C get names of referencing modules
405	DO 430 I=1,4
	   DO 410 J=LINPTR,MLEN
	      IF(MLINE(J:J).EQ.' ') GOTO 410
	      LINPTR = J
	      GOTO 411
410	      CONTINUE
	   GOTO 435  ! nothing left on line
411	   SPCPTR = 0
	   DO 415 J=LINPTR,MLEN
	      IF(MLINE(J:J).NE.' ') GOTO 415
	      SPCPTR = J-1
	      GOTO 416
415	      CONTINUE
C
C here with a module name
416	   MODBUF = MLINE(LINPTR:SPCPTR)
	   LINPTR = SPCPTR+1
	   LST = 0
	   DO 420 J=1,NLST
420	      IF(MODLST(J).EQ.MODBUF) LST = J
	   IF(LST.EQ.0) GOTO 430
C
C add to list
	   NTAB(LST) = NTAB(LST) + 1
	   IF(NTAB(LST).GT.200) STOP 'MODULE table overflow'
	   MODTAB(NTAB(LST),LST) = SYMBOL
430	   CONTINUE
435	CONTINUE
CCC	WRITE(6,*)SYMBOL,MODULE,MODBUF
	GOTO 400
C
C output what we have accumulated
500	WRITE(6,6070)
6070	FORMAT(' ','Scanning tree now')
	NSAV = 0
	I = 0
	DO 505 K=1,NLST
505	IF(MODLST(K).EQ.ROOT) I = K
	IF (I.NE.0) GOTO 507
	I = 1
	WRITE(6,6080)ROOT(1:MIN0(RLEN,16)),MODLST(I)
6080	FORMAT(' ','Root module "',A,'" not found - using ',A)
507	WRITE(2,2040)MODLST(I)
2040	FORMAT(' ','Root Module = ',A)
C
C loop here for all modules and their called routines
510	   J=0
520	      J = J+1
	      IF (J.GT.NTAB(I)) GOTO 560
	      MODULE = MODTAB(J,I)
	      LST = 0
	      DO 530 K=1,NLST
530	         IF(MODLST(K).EQ.MODULE) LST = K
	      CH = ' '
	      IF (DONE(LST)) CH = '*'
	      LEVEL = NSAV*INDENT+1
	      IF (LEVEL+17.GT.120) THEN
	         LEVEL=LEVEL-100
	         CH = '^'
	         IF (DONE(LST)) CH = '#'
	         WRITE(6,6000)'Output line overflow corrected'
	      ENDIF
C if at max tree depth and more to go then mark as truncated
	      IF (NSAV.EQ.INDLIM.AND.NTAB(LST).GT.0) CH = '+'
	      WRITE(2,2030) CH,MODULE	! usual case
2030	      FORMAT(<LEVEL>X,A,A)
C
C that's done - is there more ?
	      IF (LST.EQ.0) GOTO 520	! not in module list
	      IF (DONE(LST)) GOTO 520	! been here before
	      IF (NSAV.GE.INDLIM) GOTO 520 ! max tree depth
	      IF (NTAB(LST).LE.0) GOTO 520 ! no subtree
	      IF (.NOT.FULL) DONE(LST) = .TRUE.
	      DO 540 K=1,NSAV
540	         IF (SAVI(K).EQ.LST) GOTO 520  ! recursive call
	      NSAV = NSAV + 1
	      IF (NSAV.GT.200) STOP 'Tree overflow'
	      SAVI(NSAV) = I
	      SAVJ(NSAV) = J
	      I = LST
	      GOTO 510
560	   IF (NSAV.LE.0) GOTO 600
	   J=SAVJ(NSAV)
	   I=SAVI(NSAV)
	   NSAV = NSAV - 1
	   GOTO 520
C
C that's all
600	CLOSE (UNIT=1)
	CLOSE (UNIT=2)
	GOTO 900
C
C here with error in reading
700	WRITE(6,6091)
6091	FORMAT(' ','No cross reference in map file')
	GOTO 900
C
C here with error on open
800	WRITE(6,1060)CLINE(1:CLEN)
1060	FORMAT(' ','"',A,'.MAP" is not available.')
	IERR = 2320	! %SYSTEM-W-NOSUCHFILE
C
C general exit
900	CALL EXIT(IERR)
	END
