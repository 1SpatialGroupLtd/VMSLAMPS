C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1982-05-20 16:50:14.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	PROGRAM MAPXRF
C
***	MODULE MAPXRF
***	IDENT  20MY82
C
C Copyright Laser-Scan Laboratories Limited,Cambridge,England
C Author Paul Hardy
C
C	Written and typed				PGH	09-Apr-1982
C
C program for generating module call cross references
C from VAX LINK maps.
C
	IMPLICIT CHARACTER*1 (A-Z)
C
	CHARACTER CLINE*80	! command line
	INTEGER*2 CLEN		! length of command line
	CHARACTER MLINE*132	! line from map
	INTEGER*2 MLEN		! length of line from map
	CHARACTER DATE*17	! date of linking
	CHARACTER MODULE*16	! module name
	CHARACTER MODLST(300)*16! list of all modules
	INTEGER*2 NLST		! how many so far
	CHARACTER MODTAB(100,300)*16 ! and the modules they call
	INTEGER*2 NTAB(300)	! and how many of each
	CHARACTER SYMBOL*16	! symbol being considered
	CHARACTER MODBUF*16	! module calling SYMBOL
	INTEGER*4 IERR		! general error code
	INTEGER*2 LINPTR,SPCPTR ! line pointers
	INTEGER*2 I,J,K,LST
C
C routines called
	INTEGER INDEX
C
	DATA NTAB/300*0/
C
C general init - assume success
	IERR = 1
	NLST = 0
C
C get hold of filename 
	WRITE(6,6600)
6600	FORMAT(' ','Filename ?  ',$)
	READ(5,5000,END=900)CLEN,CLINE
5000	FORMAT(Q,A)
	IF(CLEN.LE.0) GOTO 800
C
C get files
	OPEN (UNIT=1,NAME=CLINE(1:CLEN)//'.MAP',TYPE='OLD',
     &    READONLY,SHARED,ERR=800)
	OPEN (UNIT=2,NAME=CLINE(1:CLEN)//'.LIS',
     &    TYPE='NEW')
C
C get date, and print header
5	READ(1,1000,END=600)MLEN,MLINE
	IF (MLEN.LT.81) GOTO 5
	DATE = MLINE(66:82)
	WRITE(2,2000)CLINE(1:CLEN),DATE
2000	FORMAT(' ','Module calls from ',A,'.MAP linked on ',A//
     &   ' ','Module          Calls modules ...'/)
C
C read lines, extracting as needed
10	READ(1,1000,END=600)MLEN,MLINE
1000	FORMAT(Q,A)
6000	FORMAT(' ',A)
	IF (MLEN.LT.43) GOTO 12
	IF (MLINE(1:5).EQ.'Psect') GOTO 300
	IF (MLINE(2:6).EQ.'Psect') GOTO 300
	IF (MLINE(3:7).EQ.'Psect') GOTO 300
	IF (MLINE(43:43).EQ.'_') GOTO 15
	GOTO 10
C
C have we a module name on a line by itself ?
12	IF (MLINE(1:31).EQ.' '.OR.MLINE(32:43).NE.' ') GOTO 10
	MODULE = MLINE(1:MLEN)
	GOTO 10
C
C extract the bits we want
15	IF (MLINE(1:16).NE.' ') MODULE = MLINE(1:16)
	IF(INDEX(MLINE(44:79),'.OLB').NE.0) GOTO 10
	IF(INDEX(MLINE(44:79),'.EXE').NE.0) GOTO 10
C
C and add the module to the list
	NLST = NLST + 1
	IF(NLST.GT.300) STOP 'MODULE buffer overflow'
	MODLST(NLST) = MODULE
D	WRITE(6,6010)NLST,MODULE
6010	FORMAT(' ',I4,A)
	GOTO 10
C
C skip to cross reference
300	WRITE(6,6010)NLST,' Modules found'
310	READ(1,1000,END=700)MLEN,MLINE
	IF (MLINE(55:59).NE.'Cross') GOTO 310
	WRITE(6,6000) 'Cross reference found'
C
C now read cross reference, building up call sequence
400	READ(1,1000,END=500)MLEN,MLINE
	IF (MLEN.LT.50) GOTO 400
	IF (MLINE(1:50).EQ.' ') GOTO 405
	IF (MLINE(17:17).NE.'0'.AND.MLINE(17:17).NE.'8') GOTO 400
	IF (MLINE(50:53).EQ.' ') GOTO 400
	SYMBOL = MLINE(1:16)
	MODULE = MLINE(34:49)
405	CONTINUE
C
C get names of referencing modules
	LINPTR = 50
	DO 430 I=1,4
	   DO 410 J=LINPTR,MLEN
	      IF(MLINE(J:J).EQ.' ') GOTO 410
	      LINPTR = J
	      GOTO 411
410	      CONTINUE
	   GOTO 435  ! nothing left on line
411	   SPCPTR = 0
	   DO 415 J=LINPTR,MLEN
	      IF(MLINE(J:J).NE.' ') GOTO 415
	      SPCPTR = J-1
	      GOTO 416
415	      CONTINUE
C
C here with a module name
416	   MODBUF = MLINE(LINPTR:SPCPTR)
	   LINPTR = SPCPTR+1
	   LST = 0
	   DO 420 J=1,NLST
420	      IF(MODLST(J).EQ.MODBUF) LST = J
	   IF(LST.EQ.0) GOTO 430
C
C add to list
	   NTAB(LST) = NTAB(LST) + 1
	   IF(NTAB(NLST).GT.100) STOP 'MODULE table overflow'
	   MODTAB(NTAB(LST),LST) = SYMBOL
D	   WRITE(6,6020)SYMBOL,MODULE,MODBUF
D6020	   FORMAT(' ',3A16)
430	   CONTINUE
435	CONTINUE
	GOTO 400
C
C output what we have accumulated
500	DO 550 I=1,NLST
	   K=MIN0(NTAB(I),4)
	   WRITE(2,2030) MODLST(I),(MODTAB(J,I),J=1,K)
2030	   FORMAT(' ',5A16)
	   IF(NTAB(I).LE.4) GOTO 550
	   WRITE(2,2040) (MODTAB(J,I),J=5,NTAB(I))
2040	   FORMAT(' ',16X,4A16)
550	   CONTINUE
C
C that's all
600	CLOSE (UNIT=1)
	CLOSE (UNIT=2)
	GOTO 900
C
C here with error in reading
700	WRITE(6,6091)
6091	FORMAT(' ','No cross reference in map file')
	GOTO 900
C
C here with error on open
800	WRITE(6,1060)CLINE(1:CLEN)
1060	FORMAT(' ','"',A,'.MAP" is not available.')
	IERR = 2320	! %SYSTEM-W-NOSUCHFILE
C
C general exit
900	CALL EXIT(IERR)
	END
