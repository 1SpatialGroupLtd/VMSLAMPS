C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1985-05-29 15:21:12.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION BRECH(CH)
C
***	MODULE BRECH
***	IDENT 29MY85
C
**	UNLESS PDP
	IMPLICIT NONE
**	ENDC
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England
C Author R. Fairbairns
C
C Coded 25.v.81
C
C To read one byte from the current record being buffered by the
C  block access routines
C
	BYTE CH
C
C CH is to hold the character read
C    set 0 if end of record
C
C function result is TRUE iff end of record reached
C
**	IF PDP
C
***	COMMON/BRECAC/
C
C function called
	INTEGER RFBYTE
C
C are we at end of record?
	IF (BRECLE.LE.0) GOTO 10
C
C not: read the byte
	CH = RFBYTE(BRECPT)
	BRECLE = BRECLE-1
	BRECH = .FALSE.
	RETURN
C
C end of record
10	CH = 0
	BRECH = .TRUE.
	RETURN
C
**	IFF
C
C VAX version - relays to RDCH
C
C function called
	LOGICAL		RDCH		! read a character from the line
C
C not a difficult job:
	BRECH = RDCH(CH)
	RETURN
C
**	ENDC
C
	END
