	SUBROUTINE BUNCH_FILTER
C
***	MODULE	BUNCH_FILTER
***	IDENT	17NO86
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
C Author: D. Meader
C
CMOD	Substantially modified for general use:	RJH	15-Oct-1986
CMOD	   renamed from FILTER,
CMOD	   doesn't deal with junction data,
CMOD	   amended common blocks/parameters,
CMOD	   uses RES for resolution
CMOD	Converged				 DM	28-May-1986
CMOD	Split out from BUNCH			 DM	18-Mar-1986
CMOD	S re-enabled (set S=0 to turn it off)	 DM	21-Nov-1983
CMOD	Checks for spike (pts 1 & 3 coincident)	 DM	17-Oct-1983
CMOD	Now checks 2nd point in segment too	 DM	04-Nov-1982
C	Created 				 DM	27-Oct-1982
C
C Look at the last three master points to see if the middle one is
C consistent with a feature containing only straight lines and sharp
C corners. If it isn't, we toss it out.
C The second point in a segment is a special case which is also checked.
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:PARAMS/
C
***	COMMON/CMN:MPEP/
C
	INTEGER	  LATEST	! NMP(1)
	INTEGER	  ONEAGO,TWOAGO	! NMP(1)-1, NMP(1)-2
	REAL	  DELTA		! offset for line intersection
	REAL	  DX12,DY12,DS	! relative coordinates
	REAL	  DX13,DY13	! more relative coordinates
	REAL	  DX23,DY23
	REAL	  SINTMP,COSTMP	! temporary sin,cos
C
C ......................................................................
C
	LATEST=NMP(1)
	IF (LATEST.LE.1) GO TO 90		! need at least 2 points
	ONEAGO=LATEST - 1
	IF (LATEST.EQ.2) GO TO 10		! special if only 2 pnts
	TWOAGO=ONEAGO - 1
C
C ... is the middle point too close to the LATEST ?
	DX12=MP1(X,ONEAGO) - MP1(X,TWOAGO)	! get vector (1)---(2)
	DY12=MP1(Y,ONEAGO) - MP1(Y,TWOAGO)	! (LATEST is (3))
	DX13=MP1(X,LATEST) - MP1(X,TWOAGO)	! and (1)---(3)
	DY13=MP1(Y,LATEST) - MP1(Y,TWOAGO)
C
10	DX23=MP1(X,LATEST) - MP1(X,ONEAGO)	! and (2)---(3)
	DY23=MP1(Y,LATEST) - MP1(Y,ONEAGO)
	DS=DX23*DX23 + DY23*DY23		! distance**2 (2)---(3)
	IF (DS.GT.E(1)*E(1)) GO TO 20
C
C ... yes - try to tidy up by projecting (3) onto direction (1)---(2).
C ... if we can't do that, just delete a point (if we can !)
	IF (LATEST.LT.3) GO TO 30		! special if only 2 pnts
	IF (DS.LT.RES) GO TO 30			! check (2),(3) not same
	DS=SQRT(DX12*DX12 + DY12*DY12)		! distance (1)---(2)
	COSTMP=DX12/DS				! project point (3) ...
	SINTMP=DY12/DS				! onto line (1)---(2)
	DELTA=DX13*COSTMP + DY13*SINTMP		! get offset from NMP-2
	MP1(X,ONEAGO)=MP1(X,TWOAGO) + DELTA*COSTMP   ! move NMP-1
	MP1(Y,ONEAGO)=MP1(Y,TWOAGO) + DELTA*SINTMP
	GO TO 40				! (losing original NMP)
C
C ... no - then are the three points too nearly collinear ?
20	IF (LATEST.LT.3) GO TO 90		! need 3 points now
	DS=SQRT(DX13*DX13 + DY13*DY13)
	IF (S(1).GT.0.AND.DS.GT.S(1)) GO TO 90  ! check S not violated
	IF (DS.LT.RES) GO TO 90			! check (1),(3) not same
	COSTMP=DX13/DS			! find perp. dist. between ...
	SINTMP=DY13/DS			! (2) and line joining (1)---(3)
	IF (ABS(DX12*SINTMP - DY12*COSTMP).GT.H(1)) GO TO 90
C
C ... superimposed points.
30	MP1(X,ONEAGO)=MP1(X,LATEST)		! remove master pnt (2)
	MP1(Y,ONEAGO)=MP1(Y,LATEST)
40	NMP(1)=LATEST - 1
C
90	RETURN
	END
