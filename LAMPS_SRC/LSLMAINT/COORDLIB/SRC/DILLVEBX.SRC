	LOGICAL*4 FUNCTION DILLVEBX(
     &	PT,N_PTS,MAX_PTS,NEXT_PT,MAX_NEXT,SEC,MAX_SECS)

***     IDENT   04OC89
***     MODULE  DILLVEBX

C       Copyright : Laser-Scan Laboratories Ltd, Cambridge, England.

C       Author    : ACM					   Jan 1986
CMOD795 Remove QUADSCANMSG.PAR			     JB 17-Aug-1989
CMOD	Use REAL*8 in box/vector intersection		WJJ	 4-Oct-1989

	IMPLICIT        NONE

***     COMMON/CMN:QUADCMN/

C Parameters
	INCLUDE	'($SSDEF)'

C Data in/out
	INTEGER*4	N_PTS,MAX_PTS,MAX_NEXT,MAX_SECS
	REAL*4		PT(2,MAX_PTS)	! point list
	INTEGER*4	NEXT_PT(MAX_NEXT) ! linked-list ptrs for PT
	INTEGER*4	SEC(3,MAX_SECS,4)
C			box section PT sec start index, PT sec end
C			index and line index, in box NBOX

C Workspace
	INTEGER*4	I,J,K		! misc. integers
	INTEGER*4	NSEX		! No. of sections in current box
	INTEGER*4	ILINE		! section line number
	INTEGER*4	NEXT_DP		! next box depth
	INTEGER*4	ISEC		! SECtion index
	INTEGER*4	IPT,JPT		! consecutive segment indices
	INTEGER*4	IPTSTA,IPTFIN	! more point indices
	INTEGER*4	NBOXES		! No. of boxes intersected
	INTEGER*4	JSEC		! SEC index at depth NEXT_DP
	REAL*8		X1,X2,X3,X4,Y1,Y2,Y3,Y4 ! X and Y box limits
	REAL*8		A1,A2,A3,A4,B1,B2,B3,B4 ! temp real values
	REAL*8		ABX,ABY,ABXY    ! more temp real values
	REAL*8		MIN_X,MAX_X,MIN_Y,MAX_Y ! seg box limits
	LOGICAL*4	ABOVE(16)	! box corner above seg line?
	LOGICAL*4	INBOX(4)	! is this point in this box?
	LOGICAL*4	INSEC(4)	! is a section open in this box?

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Divides each vector-section from the linked-list PT in box
C	NBOX at depth DEP between the quarter boxes of this box which
C	it intersects.
C
C	Closed loops must br circular linked lists with "last point"
C	index NOT equal to "first point" index.
C
C	Boxes are numbered      2 ! 4
C                             ----!----
C                               1 ! 3
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

	DILLVEBX = SS$_NORMAL

	NEXT_DP = DEP+1			! next box level

	DO 10 I = 1,4
	  SECSTA(I,NEXT_DP) = SECSTA(I,DEP)+NSECS(I,DEP)
	  NSECS(I,NEXT_DP) = 0		! zero sec count for each box
	  NPTS(I,NEXT_DP) = 0		! zero pt count for each box
10	CONTINUE

	X1 = LL(1,DEP)-TCHTOL/2		! set box limits
	X2 = X1+BOXWID(1,NEXT_DP)
	X3 = X2+TCHTOL			! note that boxes overlap
	X4 = X3+BOXWID(1,NEXT_DP)	! by TCHTOL

	Y1 = LL(2,DEP)-TCHTOL/2
	Y2 = Y1+BOXWID(2,NEXT_DP)
	Y3 = Y2+TCHTOL
	Y4 = Y3+BOXWID(2,NEXT_DP)

C Loop for each section in this box

	DO 60 ISEC = SECSTA(NBOX,DEP),SECSTA(NBOX,NEXT_DP)-1

	  IPTSTA = SEC(SEC_STA,ISEC,NBOX)
	  IPTFIN = SEC(SEC_FIN,ISEC,NBOX)
	  ILINE = SEC(SEC_LIN,ISEC,NBOX)! line number for this section

	  DO 20 I = 1,4	  	  	! no box has a section open here
20	  INSEC(I) = .FALSE.

	  JPT = IPTSTA

C Start loop here for each vector in section ISEC

30	  IPT = JPT
	  JPT = NEXT_PT(IPT)
	  A1 = PT(1,IPT)		! find segment-box
	  A2 = PT(1,JPT)
	  IF (A1.LE.A2) THEN	  
	    MIN_X = A1
	    MAX_X = A2
	  ELSE
	    MIN_X = A2
	    MAX_X = A1
	  END IF
	  A3 = PT(2,IPT)
	  A4 = PT(2,JPT)
	  IF (A3.LE.A4) THEN
	    MIN_Y = A3
	    MAX_Y = A4
	  ELSE
	    MIN_Y = A4
	    MAX_Y = A3
	  END IF

C Find which boxes this segment intersects (it may be in all four)

C Find which quarter-box corners are above (or else to the left of)
C the line containing the segment
	  ABX = A1 - A2			! set up frequently used terms
	  ABY = A3 - A4
	  ABXY = A1*A4 - A3*A2

	  A1 = X1*ABY+ABXY
	  A2 = X2*ABY+ABXY
	  A3 = X3*ABY+ABXY
	  A4 = X4*ABY+ABXY

	  B1 = Y1*ABX
	  B2 = Y2*ABX
	  B3 = Y3*ABX
	  B4 = Y4*ABX

C Which of the 4 corners of each of the 4 boxes is ABOVE the line
C through PT(IPT) and PT(JPT)?

	  ABOVE(1) = A1.GE.B1
	  ABOVE(2) = A1.GE.B2
	  ABOVE(3) = A1.GE.B3
	  ABOVE(4) = A1.GE.B4

	  ABOVE(5) = A2.GE.B1
	  ABOVE(6) = A2.GE.B2
	  ABOVE(7) = A2.GE.B3
	  ABOVE(8) = A2.GE.B4

	  ABOVE(9) = A3.GE.B1
	  ABOVE(10) = A3.GE.B2
	  ABOVE(11) = A3.GE.B3
	  ABOVE(12) = A3.GE.B4

	  ABOVE(13) = A4.GE.B1
	  ABOVE(14) = A4.GE.B2
	  ABOVE(15) = A4.GE.B3
	  ABOVE(16) = A4.GE.B4

C A segment intersects a box if and only if the segment box intersects
C the box and one or other pairs of diagonal corners are on opposite
C sides of the segment line -and it is known that the segment intersects
C the union of these four boxes, so...

	  INBOX(1) = (X3.GE.MIN_X).AND.(Y3.GE.MIN_Y).AND.
     &        ((ABOVE(1).NEQV.ABOVE(11)).OR.(ABOVE(3).NEQV.ABOVE(9)))
	  INBOX(2) = (X3.GE.MIN_X).AND.(Y2.LE.MAX_Y).AND.
     &        ((ABOVE(2).NEQV.ABOVE(12)).OR.(ABOVE(4).NEQV.ABOVE(10)))
	  INBOX(3) = (X2.LE.MAX_X).AND.(Y3.GE.MIN_Y).AND.
     &        ((ABOVE(5).NEQV.ABOVE(15)).OR.(ABOVE(7).NEQV.ABOVE(13)))
	  INBOX(4) = (X2.LE.MAX_X).AND.(Y2.LE.MAX_Y).AND.
     &        ((ABOVE(6).NEQV.ABOVE(16)).OR.(ABOVE(8).NEQV.ABOVE(14)))

	  DO 40 I = 1,4			! open/close secs in each box
	    IF (INBOX(I)) THEN
	      NPTS(I,NEXT_DP) = NPTS(I,NEXT_DP)+1
	      IF (.NOT.INSEC(I)) THEN	! start new section?
	        NSEX = NSECS(I,NEXT_DP)+1
	        NSECS(I,NEXT_DP) = NSEX
	        JSEC = SECSTA(I,NEXT_DP)+NSEX-1
	        IF (JSEC.GT.MAX_SECS) THEN
		   CALL WRITEF
     & ('*** Error - insufficient line section workspace in QUADSCAN')
	           DILLVEBX = SS$_ABORT
	           GOTO 70		! return
	        END IF
	        SEC(SEC_STA,JSEC,I) = IPT
	        SEC(SEC_LIN,JSEC,I) = ILINE
	        INSEC(I) = .TRUE.
	      END IF
	    ELSE IF (INSEC(I)) THEN	! stop section in this box?
	      JSEC = SECSTA(I,NEXT_DP)+NSECS(I,NEXT_DP)-1
	      SEC(SEC_FIN,JSEC,I) = IPT
	      INSEC(I) = .FALSE.
	    END IF
40	  CONTINUE        		! loop for next box

	  IF (JPT.NE.IPTFIN) GOTO 30	! loop for next vector

45	  DO 50 I = 1,4			! close any sections still open
	    IF (INSEC(I)) THEN
	      JSEC = SECSTA(I,NEXT_DP)+NSECS(I,NEXT_DP)-1
	      SEC(SEC_FIN,JSEC,I) = IPTFIN
	    END IF
50	  CONTINUE

60	CONTINUE      			! loop for next sec in main box

70	RETURN
	END
 
