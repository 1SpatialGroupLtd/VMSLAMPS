C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-11-14 17:18:28.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE MCONAL(XY)
C
**	MODULE	MCONAL
**	IDENT	14NO86
C
C Copyright Laser Scan Laboratories Ltd, Cambridge, England.
C Author Paul Hardy
C
	IMPLICIT NONE
C
C Coded May 76
C Rewritten for SOLADI 7.ix.76
C Upgraded 2.viii.78 not to buffer
C Upgraded 16.viii.78 to clip
C Changed to McConalogues method RD 19.iii.81
C Transferred to LITES2	CCB 25.x.84
C Add argument ONSCR and replace calls to STDBFA 
C with calls to ADDPTS. RJH 11.iii.85
C Increment size depends on ONSCR		RJH	18-Mar-1985
C Enhanced tolerance control for curves.	CCB	 3-Apr-1986
C Copied from LITES2, modified for general use:	RJH	22-Oct-1986
C    removed common block DRAWIN,
C    argument ONSCR transferred to INTCOM,
C    calculate increment size using INCSIZ
C
C McConalogues interpolation routine. 
C
C This program really is inscrutable.
C
C Expects 6 points and interpolate between centre span (3-4).
C Should only really require 4 pts but this way it is 
C compatable with INTRPL. The points extrapolated at each end
C by INTRPL are not used at all.
C The routine first works out the gradients at points 3 and 4
C and then works out the length of the arc between them and
C the associated radius of curvature. Points are then
C generated along the arc until the sum of the increments 
C exceeds the arc length.
C
C arguments
	REAL	XY(2,6)		! XY hold the master points
C
***	COMMON/CMN:INTCOM/
C
C functions
	REAL	INCSIZ		! calculates increment size
C
C w/s
	INTEGER I
	REAL DFX,DFY
	REAL R,SINTH(2),COSTH(2),SUMSIN,SUMCOS
	REAL INC,SUMINC,G,F,E,T,B1,C1,TEMP1,TEMP2
	REAL UV(2)
C
C Work out gradients at points 3 and 4 for the start, middle 
C or end of line.
	IF (ENDCON.EQ.0) THEN
C Middle
	   CALL GRAD(XY(1,2),2,SINTH(1),COSTH(1),R)
	   CALL GRAD(XY(1,3),2,SINTH(2),COSTH(2),TEMP1)
	ELSEIF (ENDCON.GT.0) THEN
C Start
	   CALL GRAD(XY(1,3),1,SINTH(1),COSTH(1),R)
	   CALL GRAD(XY(1,3),2,SINTH(2),COSTH(2),TEMP1)
	ELSE
C End
	   CALL GRAD(XY(1,2),2,SINTH(1),COSTH(1),R)
	   CALL GRAD(XY(1,2),3,SINTH(2),COSTH(2),TEMP1)
	ENDIF
C
C Now work out constants involved in the curve generation
20	SUMINC=0.0
	DFX=XY(1,4)-XY(1,3)
	DFY=XY(2,4)-XY(2,3)
	G=(DFX*DFX)+(DFY*DFY)
	SUMCOS=COSTH(1)+COSTH(2)
	SUMSIN=SINTH(1)+SINTH(2)
	F=(DFX*SUMCOS)+(DFY*SUMSIN)
	E=7-(COSTH(1)*COSTH(2))-(SINTH(1)*SINTH(2))
C Now work out the arc length
	T=(3*(SQRT((F*F)+(2*E*G))-F))/E
	TEMP1=6/(T**3)
	TEMP2=3/(T*T)
	B1=(TEMP1*DFX)-(TEMP2*SUMCOS)
	C1=(TEMP1*DFY)-(TEMP2*SUMSIN)
C Now get the increment size
C This is approximately distance between interpolated points
	INC = INCSIZ(TOL,R)
C
C Now generate the new points between points 3 and 4
30	SUMINC=SUMINC+INC
	IF (SUMINC.GE.T) GOTO 80
	TEMP1=(SUMINC*SUMINC)/(2*T)
	TEMP2=((T*SUMINC*SUMINC)/2)-((SUMINC**3)/3)
C Now get the generated point (U,V)
	UV(1)=XY(1,3)+(SUMINC*COSTH(1))+((COSTH(2)-COSTH(1))*TEMP1)
     &    +(B1*TEMP2)
	UV(2)=XY(2,3)+(SUMINC*SINTH(1))+((SINTH(2)-SINTH(1))*TEMP1)
     &    +(C1*TEMP2)
	CALL ADDPTS(1,UV,ONSCR)
	GOTO 30
C
C finish off by falling through to draw last point
80	CALL ADDPTS(1,XY(1,4),ONSCR)
	RETURN
	END
