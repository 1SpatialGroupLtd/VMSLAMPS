C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-08-17 15:03:28.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION DILLPTBX(
     &		PT,N_PTS,MAX_PTS,NEXT_PT,MAX_NEXT,SEC,MAX_SECS)

***     IDENT   17AU89
***     MODULE  DILLPTBX

C       Copyright : Laser-Scan Laboratories Ltd, Cambridge, England.

C       Author    : ACM					   Mar 1986
CMOD795 Remove QUADSCANMSG.PAR			     JB 17-Aug-1989

	IMPLICIT        NONE

***     COMMON/CMN:QUADCMN/

C Parameters
	INCLUDE	'($SSDEF)'

C Data in/out
	INTEGER*4	N_PTS,MAX_PTS,MAX_NEXT,MAX_SECS
	REAL*4		PT(2,MAX_PTS)	! point list
	INTEGER*4	NEXT_PT(MAX_NEXT)! linked-list ptrs for PT
	INTEGER*4	SEC(3,MAX_SECS,4)
C			box section PT sec start index, PT sec end
C			index and line index, in box NBOX

C Workspace
	INTEGER*4	I,J,K		! misc. integers
	INTEGER*4	NSEX		! No. of sections in current box
	INTEGER*4	ILINE		! section line number
	INTEGER*4	NEXT_DP		! next box depth
	INTEGER*4	ISEC		! SECtion index
	INTEGER*4	LIPT,IPT	! consecutive point indices
	INTEGER*4	START,FIN	! more point indices
	INTEGER*4	NBOXES		! No. of boxes intersected
	INTEGER*4	JSEC		! SEC index at depth NEXT_DP
	REAL*4		X,Y		! point coords
	REAL*4		X1,X2,X3,X4	! box X limits
	REAL*4		Y1,Y2,Y3,Y4	! box Y limits
	LOGICAL*4	INBOX(4)	! is this point in this box?
	LOGICAL*4	INSEC(4)	! is a section open in this box?
	LOGICAL*4	RIGHT,LEFT,UP,DOWN

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Divides each point-section in box NBOX at depth DEP between
C	the quarter boxes of this box which it intersects.
C
C	PT is treated as a linked list, not as a contiguous array.
C
C	Boxes are numbered      2 ! 4
C                             ----!----
C                               1 ! 3
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

	DILLPTBX = SS$_NORMAL

	NEXT_DP = DEP+1			! next box level

	DO 10 I = 1,4
	  SECSTA(I,NEXT_DP) = SECSTA(I,DEP)+NSECS(I,DEP)
	  NSECS(I,NEXT_DP) = 0		! zero sec count for each box
	  NPTS(I,NEXT_DP) = 0		! zero pt count for each box
10	CONTINUE

	X1 = LL(1,DEP)-TCHTOL/2		! set box limits
	X2 = X1+BOXWID(1,NEXT_DP)
	X3 = X2+TCHTOL			! note that boxes overlap
	X4 = X3+BOXWID(1,NEXT_DP)	! by TCHTOL

	Y1 = LL(2,DEP)-TCHTOL/2
	Y2 = Y1+BOXWID(2,NEXT_DP)
	Y3 = Y2+TCHTOL
	Y4 = Y3+BOXWID(2,NEXT_DP)

C Loop for each section in this box

	DO 70 ISEC = SECSTA(NBOX,DEP),SECSTA(NBOX,NEXT_DP)-1

	  START = SEC(SEC_STA,ISEC,NBOX)
	  FIN   = SEC(SEC_FIN,ISEC,NBOX)
	  ILINE = SEC(SEC_LIN,ISEC,NBOX)! line number for this section

	  DO 20 I = 1,4	  	  	! no box has a section open here
20	  INSEC(I) = .FALSE.

C Loop for each point in section ISEC

	  LIPT = NIL
	  IPT = START
	  GOTO 40
30	  LIPT = IPT
	  IPT = NEXT_PT(LIPT)
40	  X = PT(1,IPT)
	  Y = PT(2,IPT)

C Find which boxes this point is in -it may be all four as they overlap
C and it is known that it is in at least one

	  RIGHT = X.GE.X2
	  LEFT = X.LE.X3
	  UP = Y.GE.Y2
	  DOWN = Y.LE.Y3

	  INBOX(1) = LEFT.AND.DOWN
	  INBOX(2) = LEFT.AND.UP
	  INBOX(3) = RIGHT.AND.DOWN
	  INBOX(4)  = RIGHT.AND.UP

C Open/close sections in each box

	  DO 50 I = 1,4
	    IF (INBOX(I)) THEN
	      NPTS(I,NEXT_DP) = NPTS(I,NEXT_DP)+1
	      IF (.NOT.INSEC(I)) THEN
	        NSEX = NSECS(I,NEXT_DP)+1	! start new section
	        NSECS(I,NEXT_DP) = NSEX
	        JSEC = SECSTA(I,NEXT_DP)+NSEX-1
	        IF (JSEC.GT.MAX_SECS) THEN
		   CALL WRITEF
     & ('*** Error - insufficient line section workspace in QUADSCAN')
	           DILLPTBX = SS$_ABORT
	           GOTO 80		! return
	        END IF
	        SEC(SEC_STA,JSEC,I) = IPT
	        SEC(SEC_LIN,JSEC,I) = ILINE
	        INSEC(I) = .TRUE.
	      END IF
	    ELSE IF (INSEC(I)) THEN	! stop section in this box?
	      JSEC = SECSTA(I,NEXT_DP)+NSECS(I,NEXT_DP)-1
	      SEC(SEC_FIN,JSEC,I) = LIPT! index of pt before IPT
	      INSEC(I) = .FALSE.
	    END IF
50	  CONTINUE        		! loop for next box
	  IF (IPT.NE.FIN) GOTO 30	! loop for next point in section

	  DO 60 I = 1,4			! close any sections still open
	    IF (INSEC(I)) THEN
	      JSEC = SECSTA(I,NEXT_DP)+NSECS(I,NEXT_DP)-1
	      SEC(SEC_FIN,JSEC,I) = FIN
	    END IF
60	  CONTINUE

70	CONTINUE      			! loop for next sec in main box

80	RETURN
	END
 
