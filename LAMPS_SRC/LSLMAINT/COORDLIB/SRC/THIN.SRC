	SUBROUTINE THIN(IN_POINTS,NUMBER_IN,OUT_POINTS,NUMBER_OUT,
     &             LOOPED,TOL)

***	MODULE	THIN
***	IDENT	16SE87

C	Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C	Created   : ACM   Vectorise version		 Feb 1986
C	Modified  : DRC   for use in COORDLIB         04 Sep 1987 
C	
C
	IMPLICIT NONE
C
***	PARAMETER/LSL$CMNCOORD:MAXPTS/	! max. no. of points in line
C Arguments
	REAL		IN_POINTS(2,MAXPTS)! line to be thinned
	INTEGER*4	NUMBER_IN	! number of points in line
	REAL		OUT_POINTS(2,MAXPTS)! line to be thinned
	INTEGER*4	NUMBER_OUT	! number of points in line
	LOGICAL		LOOPED		! is the line to be looped?
	REAL		TOL		! max. dev of thinned line
C					! from original
C
	INTEGER*4	W(MAXPTS)
	INTEGER*4	I,IMAX
	INTEGER*4	LO,HI		! indices into W
	REAL*4		PX,PY		! pt P
	REAL*4		AX,AY,BX,BY	! pts A & B
	REAL*4		ABX,ABY		! vec from A to B
	REAL*4		DIST,MAXDIST
	REAL*4		SQDIST,MAXSQDIST,SQLEN,SQTOL

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Output line is input line with as many points as possible
C	removed so that the distance of output line from input line 
C	is never greater than TOL.
C
C	Line end-points are unchanged
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

	SQTOL = TOL**2
	LO = 1
	HI = NUMBER_IN
	W(LO) = 1
	W(HI) = NUMBER_IN
	IF (HI.LT.2) GOTO 40
	AX = IN_POINTS(1,W(LO))
	AY = IN_POINTS(2,W(LO))

C Find P index from LO to HI of a pt furthest from line A -> B, or
C furthest from point A if A = B

10	BX = IN_POINTS(1,W(HI))
	BY = IN_POINTS(2,W(HI))
	MAXDIST = 0
	MAXSQDIST = 0
	ABX = BX-AX
	ABY = BY-AY
	SQLEN = ABX**2+ABY**2

	IF (ABS(SQLEN).GT.1E-5) THEN	! A .ne. B
	  DO 20 I = W(LO)+1,W(HI)-1
	    DIST = ABS((IN_POINTS(1,I)-AX)*ABY-(IN_POINTS(2,I)-AY)*ABX)
	    IF (DIST.LE.MAXDIST) GOTO 20
	    MAXDIST = DIST
	    IMAX = I
20	  CONTINUE
	  MAXSQDIST = MAXDIST**2/SQLEN
	ELSE				! A .eq. B
	  DO 25 I = W(LO)+1,W(HI)-1
	    SQDIST = (IN_POINTS(1,I)-AX)**2+(IN_POINTS(2,I)-AY)**2
	    IF (SQDIST.LE.MAXSQDIST) GOTO 25
	    MAXSQDIST = SQDIST
	    IMAX = I
25	  CONTINUE
	END IF

30	IF (MAXSQDIST.GT.SQTOL) THEN
	  HI = HI-1
	  W(HI) = IMAX
	  IF (HI.EQ.LO) GOTO 40		! return
	ELSE
	  LO = LO+1
	  W(LO) = W(HI)
	  IF (W(LO).EQ.NUMBER_IN) GOTO 40	! return
	  AX = IN_POINTS(1,W(LO))
	  AY = IN_POINTS(2,W(LO))
	  HI = HI+1
	END IF
	GOTO 10
40	DO 50 I = 1,LO
	  OUT_POINTS(1,I) = IN_POINTS(1,W(I))
	  OUT_POINTS(2,I) = IN_POINTS(2,W(I))
50	CONTINUE
	NUMBER_OUT = LO

C If only 2 pts left and these are equal then set NQ = 1

	IF (NUMBER_OUT.EQ.2) THEN
	  IF (OUT_POINTS(1,1).EQ.OUT_POINTS(1,2).AND.
     &        OUT_POINTS(2,1).EQ.OUT_POINTS(2,2))NUMBER_OUT = 1
	END IF
C
	RETURN
C
	END
 
