C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-11-17 17:06:32.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        SUBROUTINE DP_LINE(NUMPTS,THIS_LINE)

***     IDENT   17NO86
***     MODULE  DP_LINE
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created 				RJH	27-Oct-1986
C
C	Douglas-Peucker Filter - Filter a whole line
C
C Description
C
C	This is the LSL version of the Douglas-Peucker line filtering 
C	algorithm.
C
C	Routines called	:	REDUCE, ADDPTS
C	Other routines	:	DP_INIT
C	Parameter Files	:	MAXPTS, XYIND
C	Common Blocks	:	DP_CONTROL
C
C	Prior to filtering any lines, DP_INIT should be called to 
C	initialise the common block. It should also be called if 
C	the tolerance changes.
C
C	This routine transfers points into the format required by the 
C	filtering routine, and on completion of filtering, outputs the
C	points. Note that the number of points which can be processed is
C	limited, and if a line has more than the maximum, the extra 
C	points will be ignored.
C
C	Users are required to supply the subroutine ADDPTS with the 
C	following specification :-
C
C		SUBROUTINE ADDPTS(NPTS,XY,DRAW)
C
C		INTEGER*4	NPTS		! number of points
C		REAL		XY(2,NPTS)	! line string
C		LOGICAL*1	DRAW		! draw line on screen ?
C
C	It is referenced by
C
C		CALL ADDPTS(NPTS,XY,DRAW)
C
C	and allows the points either to be buffered up for subsequent 
C	output or passed to a graphics library for display on a screen.
C
C	Thus it is possible to start with a complete line and simply 
C	add the filtered points to an output buffer as in IFILTER. 
C	Alternatively, as in LITES2, the original line could be read in 
C	section by section and the filtered points copied to the 
C	output item using the normal flushing mechanism. 
C
C	Note that display on the screen is not relevant to filtering, 
C	so the last argument to ADDPTS will always be false.
C
        IMPLICIT NONE
C
C Included Parameter Files
C
***	PARAMETER/LSL$CMNCOORD:XYIND/	! coordinate indices
***	PARAMETER/LSL$CMNCOORD:MAXPTS/	! max. no. of points in line
C
C Arguments
C
	INTEGER*4	NUMPTS			! number of points
	REAL*4		THIS_LINE(2,NUMPTS)	! the line string
C
C Common Blocks
C
***	COMMON/CMN:DP_CONTROL/		! lateral tolerance
C
C Local variables
C
	REAL*4		X_IN(MAXPTS)	! input X-coordinates
	REAL*4		Y_IN(MAXPTS)	! input Y-coordinates
	INTEGER*2	L_IN		! the number of them
	INTEGER*2	PTR_OUT(MAXPTS)	! pointers to output coordinates
	INTEGER*2	L_OUT		! the number of them
	INTEGER*4	I		! counter
	INTEGER*4	F		! index of first point to output
C
C Check the number of points
C
	IF (NUMPTS .GT. MAXPTS) NUMPTS = MAXPTS
C
C Transfer the points for passing to the routine to do the work
C
	DO 100 I=1,NUMPTS
	   X_IN(I) = THIS_LINE(X,I)
	   Y_IN(I) = THIS_LINE(Y,I)
100	CONTINUE
	L_IN = NUMPTS
	L_OUT = 0
C
C Apply the Douglas Peucker filter
C
	CALL REDUCE(X_IN,Y_IN,L_IN,LATERAL,PTR_OUT,L_OUT)
C
C Transfer the points to be retained into the output line
C
	F = 1
	DO 200 I=1,L_OUT-1
	   IF (PTR_OUT(I+1) .GT. (PTR_OUT(I)+1)) THEN
	      CALL ADDPTS(PTR_OUT(I)-F+1,THIS_LINE(X,F),.FALSE.)
	      F = PTR_OUT(I+1)
	   ENDIF
200	CONTINUE
	CALL ADDPTS(PTR_OUT(L_OUT)-F+1,THIS_LINE(X,F),.FALSE.)
C
C Return
C
	RETURN
        END
