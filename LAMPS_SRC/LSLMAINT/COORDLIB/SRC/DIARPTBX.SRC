	LOGICAL*4 FUNCTION DIARPTBX(PT,N_PTS,MAX_PTS,SEC,MAX_SECS)

***     IDENT   17AU89
***     MODULE  DIARPTBX

C       Copyright : Laser-Scan Laboratories Ltd, Cambridge, England.

C       Author    : ACM					   Mar 1986
CMOD795 Remove QUADSCANMSG.PAR			     JB 17_Aug-1989

	IMPLICIT        NONE

***     COMMON/CMN:QUADCMN/

C Parameters
	INCLUDE		'($SSDEF)'

C Data in/out
	INTEGER*4	N_PTS,MAX_PTS,MAX_SECS
	REAL*4		PT(2,MAX_PTS)	! point list
	INTEGER*4	SEC(3,MAX_SECS,4)
C			box section PT sec start index, PT sec end
C			index and line index, in box NBOX

C Workspace
	INTEGER*4	I,J,K		! misc. integers
	INTEGER*4	NSEX		! No. of sections in current box
	INTEGER*4	ILINE		! section line number
	INTEGER*4	NEXTDP		! next box depth
	INTEGER*4	ISEC		! SECtion index
	INTEGER*4	IPT		! point index
	INTEGER*4	START,FIN	! more point indices
	INTEGER*4	NBOXES		! No. of boxes intersected
	INTEGER*4	JSEC		! SEC index at depth NEXTDP
	REAL*4		X,Y		! point coords
	REAL*4		X1,X2,X3,X4	! box X limits
	REAL*4		Y1,Y2,Y3,Y4	! box Y limits
	LOGICAL*4	INBOX(4)	! is this point in this box?
	LOGICAL*4	INSEC(4)	! is a section open in this box?
	LOGICAL*4	RIGHT,LEFT,UP,DOWN

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Divides each point-section in box NBOX at depth DEP between
C	the quarter boxes of this box which it intersects.
C
C	PT is treated as a contiguous array, not a linked list.
C
C	Boxes are numbered      2 ! 4
C                             ----!----
C                               1 ! 3
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

	DIARPTBX = SS$_NORMAL

	NEXTDP = DEP+1			! next box level

	DO 10 I = 1,4
	  SECSTA(I,NEXTDP) = SECSTA(I,DEP)+NSECS(I,DEP)
	  NSECS(I,NEXTDP) = 0		! zero sec count for each box
	  NPTS(I,NEXTDP) = 0		! zero pt count for each box
10	CONTINUE

	X1 = LL(1,DEP)-TCHTOL/2		! set box limits
	X2 = X1+BOXWID(1,NEXTDP)
	X3 = X2+TCHTOL			! note that boxes overlap
	X4 = X3+BOXWID(1,NEXTDP)	! by TCHTOL

	Y1 = LL(2,DEP)-TCHTOL/2
	Y2 = Y1+BOXWID(2,NEXTDP)
	Y3 = Y2+TCHTOL
	Y4 = Y3+BOXWID(2,NEXTDP)

C Loop for each section in this box

	DO 60 ISEC = SECSTA(NBOX,DEP),SECSTA(NBOX,NEXTDP)-1

	  START = SEC(SEC_STA,ISEC,NBOX)
	  FIN   = SEC(SEC_FIN,ISEC,NBOX)
	  ILINE = SEC(SEC_LIN,ISEC,NBOX)! line number for this section

	  DO 20 I = 1,4	  	  	! no box has a section open here
20	  INSEC(I) = .FALSE.

C Loop for each point in section ISEC

	  DO 40 IPT = START,FIN
	    X = PT(1,IPT)
	    Y = PT(2,IPT)

C Find which boxes this point is in -it may be all four as they overlap
C and it is known that it is in at least one

	    RIGHT = X.GE.X2
	    LEFT = X.LE.X3
	    UP = Y.GE.Y2
	    DOWN = Y.LE.Y3

	    INBOX(1) = LEFT.AND.DOWN
	    INBOX(2) = LEFT.AND.UP
	    INBOX(3) = RIGHT.AND.DOWN
	    INBOX(4)  = RIGHT.AND.UP

C Open/close sections in each box

	    DO 30 I = 1,4
	      IF (INBOX(I)) THEN
	        NPTS(I,NEXTDP) = NPTS(I,NEXTDP)+1
	        IF (.NOT.INSEC(I)) THEN
	          NSEX = NSECS(I,NEXTDP)+1	! start new section
	          NSECS(I,NEXTDP) = NSEX
	          JSEC = SECSTA(I,NEXTDP)+NSEX-1
	          IF (JSEC.GT.MAX_SECS) THEN
		     CALL WRITEF
     &  ('*** Error - insufficient line section workspace in QUADSCAN')
		     DIARPTBX = SS$_ABORT
	             GOTO 70		! return
	          END IF
	          SEC(SEC_STA,JSEC,I) = IPT
	          SEC(SEC_LIN,JSEC,I) = ILINE
	          INSEC(I) = .TRUE.
	        END IF
	      ELSE IF (INSEC(I)) THEN	! stop section in this box?
	        JSEC = SECSTA(I,NEXTDP)+NSECS(I,NEXTDP)-1
	        SEC(SEC_FIN,JSEC,I) = IPT-1
	        INSEC(I) = .FALSE.
	      END IF
30	    CONTINUE        		! loop for next box
40	  CONTINUE			! loop for next point in section

	  DO 50 I = 1,4			! close any sections still open
	    IF (INSEC(I)) THEN
	      JSEC = SECSTA(I,NEXTDP)+NSECS(I,NEXTDP)-1
	      SEC(SEC_FIN,JSEC,I) = FIN
	    END IF
50	  CONTINUE

60	CONTINUE      			! loop for next sec in main box

70	RETURN
	END

