	SUBROUTINE BEZIER(IN_POINTS,NUMBER_IN,OUT_POINTS,NUMBER_OUT,
     &                    GAP,HUG,LOOPED,ERROR)
C
***	IDENT	22OC87
***	MODULE	BEZIER
C
C	Copyright : Laser-Scan Laboratories Ltd., Cambridge, England
C	Created   : ACM   Vectorise version		 Dec 1985
C	Modified  : DRC   for use in COORDLIB         04 Sep 1987 
C	
	IMPLICIT NONE
C
***	PARAMETER/LSL$CMNCOORD:MAXPTS/	! max. no. of points in line
C Arguments
	REAL		IN_POINTS(2,MAXPTS)! line to be regulated
	INTEGER*4	NUMBER_IN	! number of points in line
	REAL		OUT_POINTS(2,MAXPTS)! smoothed line
	INTEGER*4	NUMBER_OUT	! number of smoothed coords
	REAL		GAP		! smoothing lateral tolerance
	REAL		HUG		! corner hug tolerance
	LOGICAL		LOOPED		! is the line to be looped?
	INTEGER*4	ERROR		! error code
C
C local parameters
	REAL		RTOL		! real tolerance
	PARAMETER(	RTOL = 1E-4)
C
	REAL		SQRTOL
	PARAMETER(	SQRTOL = RTOL**2)
C
C workspace
	REAL		TS(MAXPTS)!workspace array
C
	REAL		X1,Y1,X2,Y2	! Bezier guide pts
	INTEGER		NPTS		! No. of pts interpolated in sec
	INTEGER		IP		! P index
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Interpolates input line using Bezier polynomial interpolation
C	formula with Bezier guide pts at line end pts and at seg mid pts
C
C	Ref "Algotithms for Graphics and Image Processing" by
C	Theo Pavlidis, p. 221,227
C
C	Distance of curve from original pts is < HUG tolerance, and
C	dist from str line joining consc pts to true curve is < GAP
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
	IF (LOOPED) THEN
	  IF (IN_POINTS(1,1).EQ.IN_POINTS(1,NUMBER_IN).AND.
     &        IN_POINTS(2,1).EQ.IN_POINTS(2,NUMBER_IN))
     &        NUMBER_IN = NUMBER_IN-1
	  X1 = (IN_POINTS(1,NUMBER_IN)+IN_POINTS(1,1))/2
	  Y1 = (IN_POINTS(2,NUMBER_IN)+IN_POINTS(2,1))/2
	  X2 = (IN_POINTS(1,1)+IN_POINTS(1,2))/2
	  Y2 = (IN_POINTS(2,1)+IN_POINTS(2,2))/2
	  IP = 1
	ELSE
	  X1 = IN_POINTS(1,1)
	  Y1 = IN_POINTS(2,1)
	  IF (NUMBER_IN.GT.3) THEN
	    X2 = (IN_POINTS(1,2)+IN_POINTS(1,3))/2
	    Y2 = (IN_POINTS(2,2)+IN_POINTS(2,3))/2
	  ELSE
	    X2 = IN_POINTS(1,NUMBER_IN)
	    Y2 = IN_POINTS(2,NUMBER_IN)
	  END IF
	  IP = 2
	END IF
C
	NUMBER_OUT = 1
10	CALL BEZIER_INTERP(X1,IN_POINTS(1,IP),X2,Y1,IN_POINTS(2,IP),Y2,
     &	                   HUG,GAP,OUT_POINTS(1,NUMBER_OUT),
     &                     MAXPTS-NUMBER_OUT+1,
     &                     NPTS,TS,ERROR)
C
	IF (ERROR.NE.0)GOTO 20
C
	NUMBER_OUT = NUMBER_OUT+NPTS-1
	IP = IP+1
	X1 = X2
	Y1 = Y2
	IF (LOOPED) THEN
	  IF (IP.GT.NUMBER_IN) GOTO 20
	  IF (IP.EQ.NUMBER_IN) THEN
	    X2 = (IN_POINTS(1,NUMBER_IN)+IN_POINTS(1,1))/2
	    Y2 = (IN_POINTS(2,NUMBER_IN)+IN_POINTS(2,1))/2
	    GOTO 10
	  END IF
	ELSE
	  IF (IP.EQ.NUMBER_IN) GOTO 20
	  IF (IP.EQ.NUMBER_IN-1) THEN
	    X2 = IN_POINTS(1,NUMBER_IN)
	    Y2 = IN_POINTS(2,NUMBER_IN)
	    GOTO 10
	  END IF
	END IF
C
	X2 = (IN_POINTS(1,IP)+IN_POINTS(1,IP+1))/2
	Y2 = (IN_POINTS(2,IP)+IN_POINTS(2,IP+1))/2
	GOTO 10
C
20	RETURN
C
	END
