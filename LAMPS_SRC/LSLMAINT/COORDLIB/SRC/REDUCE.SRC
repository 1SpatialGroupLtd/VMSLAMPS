        SUBROUTINE REDUCE(X,Y,L,DMINI,IPNTR,IP)
C
***     IDENT   30OC86
***     MODULE  REDUCE
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created 				RJH	13-Oct-1986
C
C	IMP IFILTER Program - Douglas-Peucker filter routine
C
C Source
C
C	The source code and comments below are copied from an 
C	unpublished set of collected algorithms by D. H. Douglas of the 
C	University of Ottawa. 
C
C	The only change to the routine as listed is the use of 
C	IMPLICIT NONE and the declaration of arguments and local 
C	variables.
C
C Purpose
C
C	To reduce the number of points representing a line by selecting 
C	points along it based on the principle of minimum 
C	offset ...(method 2)
C
C Usage
C
C	CALL REDUCE(X,Y,L,DMINI,IPNTR,IP)
C
C Arguments
C
C	X	- L long vector representing X coordinates of points 
C		  along a line
C	Y	- L long vector representing Y coordinates of points 
C		  along a line
C	L	- length of the vectors representing the line
C	DMINI	- minimum offset tolerance for the reduction defaults to
C		  a toleration value
C	IPNTR	- returned IP long INTEGER*2 vector of pointers which 
C		  represent points in the original line selected by the 
C		  reduction procedure
C	IP	- length of the vector IPNTR which represents the number
C		  of points in the reduced or caricatured line
C
C Remarks
C
C	The input variables X, Y, L, and DMINI are not altered. The 
C	reduced or caricatured result is represented by IPNTR, a vector 
C	of pointers to the selected points of the original line. The 
C	vectors X, Y, and IPNTR must be dimensioned to a minimum value 
C	of L in the calling program.
C
C	Written by D. H. Douglas, Simon Fraser University, 11/72
C
C Method
C
C	The method is the one of minimum offset. This version stacks 
C	the location of previously isolated points at the end of IPNTR 
C	thereby saving time on each iteration.
C
C Subprograms required
C
C	None
C
        IMPLICIT NONE
C
C Local Parameters
C
	REAL*4		TOLER		! minimum value for offeset tol.
	PARAMETER	(TOLER = 1.0E-6)
C
C Arguments
C
	INTEGER*2	L		! no. of points in line
	REAL*4		X(L)		! X coordinates
	REAL*4		Y(L)		! Y coordinates
	REAL*4		DMINI		! minimum offset tolerance
	INTEGER*2	IPNTR(L)	! pointers to original points
	INTEGER*2	IP		! no. of pointers to remainder
C
C Local Variables
C
	INTEGER*2	NP
	INTEGER*2	N
	INTEGER*2	M
	INTEGER*2	I
	INTEGER*2	NM
	REAL*4		DMIN
	REAL*4		DMAX
	REAL*4		DY
	REAL*4		DX
	REAL*4		D
	REAL*4		D1
	REAL*4		D2
	REAL*4		DI
	REAL*4		DXDY
	REAL*4		DYDX
	REAL*4		YND
	REAL*4		XND
C
C Start
C
	DMIN = DMINI
	IF (DMIN .LT. TOLER) DMIN = 0.005
	IP = 1
	NP = L
	IPNTR(IP) = 1
	N = 1
	IPNTR(NP) = L
1	M = IPNTR(NP)
	DY = Y(M) - Y(N)
	DX = X(M) - X(N)
	D = SQRT(DY*DY + DX*DX)
	DMAX = 0.0
	I = N
2	IF (D .GT. TOLER) GO TO 9
C
C In the event two points of a tested segment are within a distance 
C TOLER of each other
C
6	I = I + 1
	IF (I .GE. M) GO TO 3
	D1 = X(N) - X(I)
	D2 = Y(N) - Y(I)
	DI = SQRT(D1*D1 + D2*D2)
	IF (DI .LE. DMAX) GO TO 6
	DMAX = DI
	NM = I
	GO TO 6
C
C Tested segment tends to vertical
C
9	IF (ABS(DX) .GT. ABS(DY)) GO TO 7
	DXDY = DX/DY
	YND = DXDY*Y(N)
15	I = I + 1
	IF (I .GE. M) GO TO 18
	DI = X(I) - X(N) + YND - DXDY*Y(I)
	DI = ABS(DI)
	IF (DI .LE. DMAX) GO TO 15
	DMAX = DI
	NM = I
	GO TO 15
18	DMAX = ABS(DMAX*DY/D)
	GO TO 3
C
C Tested segment tends to horizontal
C
7	DYDX = DY/DX
	XND = DYDX*X(N)
5	I = I + 1
	IF (I .GE. M) GO TO 8
	DI = Y(I) - Y(N) + XND - DYDX * X(I)
	DI = ABS(DI)
	IF (DI .LE. DMAX) GO TO 5
	DMAX = DI
	NM = I
	GO TO 5
8	DMAX = ABS(DMAX*DX/D)
3	IF (DMAX .LT. DMIN) GO TO 4
C
C Add to the stack the location of this point
C
	NP = NP - 1
	IPNTR(NP) = NM
	GO TO 1
C
C Add this point to the pointer list and remove its reference from the 
C stack
C
4	IP = IP + 1
	IPNTR(IP) = M
	NP = NP + 1
	IF (M .GE. L) RETURN
	N = M
	GO TO 1
        END
