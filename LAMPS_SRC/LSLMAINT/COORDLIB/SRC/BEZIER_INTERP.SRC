C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-09-16 13:53:44.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE BEZIER_INTERP
     &	(X0,X1,X2,Y0,Y1,Y2,HUG,GAP,P,MAXP,NPTS,TS,IERR)
C
***	IDENT	07SE87
***	MODULE	BEZIER_INTERP
C
C	Copyright : Laser-Scan Laboratories Ltd., Cambridge, England
C	Created   : ACM					Aug 1985
C	Modified  : DRC  for use by COORDLIB	     07 Sep 1987
C
	IMPLICIT NONE
C
C parameters in
	REAL		GAP		! lateral deviation tolerance
	REAL		HUG		! corner hug tolerance
	REAL		X0,Y0,X1,Y1,X2,Y2	! 3 Bezier guide pts
	INTEGER		MAXP		! max No of pts incl endpts
C
C parameters out
	REAL		P(2,MAXP)	! point output
	INTEGER		IERR		! error code
	INTEGER		NPTS		! No of interpolated pts
C					  not including end pts
C local parameters
	REAL		RTOL		! real tolerance
	PARAMETER(	RTOL = 1E-4)
C
	REAL		SQRTOL
	PARAMETER(	SQRTOL = RTOL**2)
C
	REAL		MINW,MAXW
	PARAMETER(	MINW = 1)
	PARAMETER(	MAXW = 10)
C
	REAL		LOG2		! log(2)
	PARAMETER(	LOG2 = 0.69314718)
C
	REAL		ONE		! 1 minus a little bit
	PARAMETER(	ONE = 1-RTOL)
C
C workspace
	INTEGER		LO,HI		! ptrs into P and TS
	REAL		W,W1		! weight for P1
	REAL		XLO,YLO,XHI,YHI	! current section end pts
	REAL		TS(MAXP)	! parameter values
	REAL		TLO,THI,T	! parameter values
	REAL		X,Y		! interp point
	REAL		DX,DY		! segment vector
	REAL		SQGAP,MAXSQGAP	! square gap value
	REAL		LEN,SQLEN	! length
	REAL		A,B,C		! coeffs
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Interpolates up to MAXP points along Bezier polynomial for
C	parameter T = 0 to 1, with
C		W = "weight" given to P1 to pull curve into the corner
C		A = (1-T)^(W+1), C = T^(W+1) & A+B+C = 1
C		X(T) = A*X0+B*X1+C*X2
C		Y(T) = A*Y0+B*Y1+C*Y2
C	such that the gap between the straight line joining any two
C	consecutive points and the curve is never greater than GAP
C
C	Both end points P(T=0) and P(T=1) are included
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C error codes
C	0	normal successful completion
C	1	end pts coincident
C	2	MAXP too small & process not completed
C	3	other error & process not completed
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C check GAP not too small, but don't bother to give any error
	MAXSQGAP = MAX(GAP,10*RTOL)**2
C
C check HUG is not too small
	IF (HUG.LT.RTOL) THEN
	  NPTS = 3
	  P(1,1) = X0
	  P(2,1) = Y0
	  P(1,2) = X1
	  P(2,2) = Y1
	  P(1,3) = X2
	  P(2,3) = Y2
	  GOTO 21
	END IF
C
C set up end points
	XLO = X0
	YLO = Y0
	XHI = X2
	YHI = Y2
C
C find weight for P1 which will pull in corner to within HUG tolerance
	DX = X1-(X0+X2)/2
	DY = Y1-(Y0+Y2)/2
	LEN = SQRT(DX**2+DY**2)
	IF (LEN.LT.RTOL) THEN
	  NPTS = 2
	  P(1,1) = X0
	  P(2,1) = Y0
	  P(1,2) = X2
	  P(2,2) = Y2
	  GOTO 21
	END IF
C	W = MIN(MAXW,MAX(1,INT(LOG(LEN/HUG)/LOG2+ONE)))
	W = MIN(MAXW,MAX(MINW,LOG(LEN/HUG)/LOG2))
	W1 = W+1
C
C put end points into either end of P
	LO = 1
	HI = MAXP
	P(1,LO) = XLO
	P(2,LO) = YLO
	P(1,HI) = XHI
	P(2,HI) = YHI
	TS(LO) = 0
	TS(HI) = 1
C
C check for end points coincident
	IF (ABS(XLO-XHI).LT.RTOL.AND.ABS(YLO-YHI).LT.RTOL) THEN
	  IERR = 0
	  NPTS = 1
	  RETURN
	END IF
C
C find furthest point on curve from P(lo) to P(hi)
C
10	XLO = P(1,LO)
	YLO = P(2,LO)
	XHI = P(1,HI)
	YHI = P(2,HI)
	TLO = TS(LO)
	THI = TS(HI)
C
	T = (TLO+THI)/2
C
	A = (1-T)**W1		! this is computationally expensive
	C = T**W1		! - if W is restricted to integer values
	B = 1-A-C		! you can use table look-up instead
C
	X = A*X0+B*X1+C*X2
	Y = A*Y0+B*Y1+C*Y2
C
	DX = XHI-XLO
	DY = YHI-YLO
	SQLEN = DX**2+DY**2
	IF (SQLEN.LT.SQRTOL) THEN
	  IERR = 3
	  RETURN
	END IF
C
	SQGAP = (Y-YLO)*DX-(X-XLO)*DY
	SQGAP = SQGAP*SQGAP/SQLEN
C
	IF (SQGAP.LE.MAXSQGAP) THEN	! move to right along curve
17	  LO = LO+1
	  IF (LO.GE.HI) THEN
	    IERR = 2
	    RETURN
	  END IF
	  P(1,LO) = P(1,HI)		! hi pt becomes lo point
	  P(2,LO) = P(2,HI)
	  TS(LO) = TS(HI)
	  IF (HI.NE.MAXP) THEN
	    HI = HI+1
	    GOTO 10			! for next point
	  ELSE
	    GOTO 20			! successful return
	  END IF
	ELSE				! else move left
	  HI = HI-1
	  IF (HI.LE.LO) THEN
	    IERR = 2
	    RETURN
	  END IF
	  P(1,HI) = X
	  P(2,HI) = Y
	  TS(HI) = T
	  GOTO 10			! for next point
	END IF
C
20	NPTS = LO
21	IERR = 0
	END
