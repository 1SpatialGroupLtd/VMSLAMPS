C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-08-14 14:33:16.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        SUBROUTINE BUNCH_POINT(XB,YB,FORCED)
C
***     IDENT   14AU91
***     MODULE  BUNCH_POINT
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created 				RJH	16-Oct-1986
C
C	LSL BUNCH Filter - Deal with a single point
C
C Description
C
C	This routine calls BUNCH to deal with the given point. It 
C	flushes the master point buffer whenever it becomes full, and 
C	at the end of the line. See BUNCH for an explanation of the 
C	arguments.
C	
        IMPLICIT NONE
C
C Included Parameter Files
C
***	PARAMETER/CMN:PARAMS/		! parameters for BUNCH
C
C Arguments
C
	REAL*4		XB		! X coordinate of point
	REAL*4		YB		! Y coordinate of point
	INTEGER*4	FORCED		! flag for special functions 
C
C Common Blocks
C
***	COMMON/CMN:MPEP/		! master point buffer
C
C Functions called
C
	LOGICAL*4	BUNCH		! do the work for this point
C
C Local Variables
C
	INTEGER*4	I		! counter
	INTEGER*4	NUM_ADD		! number of points to add
C
C Filter this point
C
	IF (BUNCH(XB,YB,FORCED)) THEN
C
C Flush the master point buffer if it is full
C
C Need space for a call of BUNCH which may add 2 master points in 'worst' case
C
	   IF (NMP(1) .GE. MAXMP-1) THEN
C	   IF (NMP(1) .EQ. MAXMP) THEN
	      NUM_ADD = NMP(1) - MINMP
	      CALL ADDPTS(NUM_ADD,MP1,.FALSE.)
	      DO 10 I=NUM_ADD+1,NMP(1)
	         MP1(X,I-NUM_ADD) = MP1(X,I)
	         MP1(Y,I-NUM_ADD) = MP1(Y,I)
10	      CONTINUE
	      NMP(1) = MINMP
	   ENDIF
	ENDIF
C
C If finished the current line, flush out all the remaining master 
C points
C
	IF (FORCED .NE. 0) THEN
	   CALL ADDPTS(NMP(1),MP1,.FALSE.)
	   NMP(1) = 0
	ENDIF
C
C Return
C
	RETURN
        END
