C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-03-15 14:34:12.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C***********************************************************************
C Routines for Vaxstation
C These only operate on the first workstation for now
C***********************************************************************
C
	SUBROUTINE	SET_MOUSE_AST(AST)
C
**	MODULE	SET_MOUSE_AST
**	IDENT	15MR91
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Call routine AST when mouse motion is detected within GKS window
C The routine is passed the DCB address by value (the WCB is 4 byte
C further on).
C Pass 0 by value to cancel the AST.
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER*4	AST		! AST routine
C
***	COMMON/GKSDAT2/
***	COMMON/GKSRF/
C
C workspace
	INTEGER	WKID
C
	DO 10 WKID=1,2
	   IF (.NOT.RFWK(WKID)) GOTO 10
	      CALL UIS$SET_POINTER_AST(
     &		DCB(RFDEV(WKID)),WCB(RFDEV(WKID)),
     &		AST,%LOC(DCB(RFDEV(WKID))),
     &		0.0,0.0,DCMAXX(RFDEV(WKID)),DCMAXY(RFDEV(WKID)))
10	CONTINUE
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	SET_MOVE_AST(AST)
C
**	MODULE	SET_MOVE_AST
**	IDENT	27JA88
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Call routine AST when window is moved around screen
C The routine is passed the DCB address by value (the WCB is 4 byte
C further on).
C Pass 0 by value to cancel the AST.
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER*4	AST		! AST routine
C
***	COMMON/GKSDAT2/
***	COMMON/GKSRF/
C
C workspace
	INTEGER	WKID
C
	DO 10 WKID=1,2
	   IF (.NOT.RFWK(WKID)) GOTO 10
	   CALL UIS$SET_MOVE_INFO_AST(
     &		WCB(RFDEV(WKID)),AST,%LOC(DCB(RFDEV(WKID))))
10	CONTINUE
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	SET_BUTTON_AST(AST,TOKEN)
C
**	MODULE	SET_BUTTON_AST
**	IDENT	14JN85
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Call routine AST when mouse button activity occurs within GKS window
C The routine is passed the DCB address by value (the WCB is 4 byte
C further on).
C Pass 0 by value to cancel the AST.
C
C TOKEN is a variable in which to put information on which button.
C Sign bit set (negative) for down transition, clear (positive) for up.
C Remaining bits set to 400,401,402 for three buttons
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER*4	AST		! AST routine
	INTEGER*4	TOKEN		! variable for button token
C
***	COMMON/GKSDAT2/
***	COMMON/GKSRF/
C
C workspace
	INTEGER	WKID
C
	DO 10 WKID=1,2
	   IF (.NOT.RFWK(WKID)) GOTO 10
C
	   CALL UIS$SET_BUTTON_AST(
     &		DCB(RFDEV(WKID)),WCB(RFDEV(WKID)),
     &		AST,%LOC(DCB(RFDEV(WKID))),TOKEN,
     &		0.0,0.0,DCMAXX(RFDEV(WKID)),DCMAXY(RFDEV(WKID)))
10	CONTINUE
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GUIS_PUSH_VIEWPORT(WKID)
C
**	MODULE	GUIS_PUSH_VIEWPORT
**	IDENT	15SE87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C To push viewport to back
C
	IMPLICIT NONE
C
***	COMMON/GKSDAT2/
***	COMMON/GKSESL/
C
C argument
	INTEGER	WKID
C
C function called
	INTEGER	GETDEV
C
C workspace
	INTEGER	DEV
C
	GKSERR = GETDEV(DEV,WKID)
	IF (GKSERR.NE.0) GOTO 9999
C
	CALL UIS$PUSH_VIEWPORT(WCB(DEV))
C
9999	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GUIS_POP_VIEWPORT(WKID)
C
**	MODULE	GUIS_POP_VIEWPORT
**	IDENT	15SE87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C To pop viewport to front
C
	IMPLICIT NONE
C
***	COMMON/GKSDAT2/
***	COMMON/GKSESL/
C
C argument
	INTEGER	WKID
C
C function called
	INTEGER	GETDEV
C
C workspace
	INTEGER	DEV
C
	GKSERR = GETDEV(DEV,WKID)
	IF (GKSERR.NE.0) GOTO 9999
C
	CALL UIS$POP_VIEWPORT(WCB(DEV))
C
9999	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GUIS_REVEAL_VIEWPORT(WKID)
C
**	MODULE	GUIS_REVEAL_VIEWPORT
**	IDENT	15SE87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C To make viewport visible
C
	IMPLICIT NONE
C
	INCLUDE	'SYS$LIBRARY:UISUSRDEF'
***	COMMON/GKSDAT2/
***	COMMON/GKSESL/
C
C argument
	INTEGER	WKID
C
C function called
	INTEGER	GETDEV
	LOGICAL	UIS$GET_VIEWPORT_ICON
C
C workspace
	INTEGER	DEV
	INTEGER	ATTI(5)
	REAL	ATTR(5)
	EQUIVALENCE	(ATTI,ATTR)
	DATA	ATTI/WDPL$C_ABS_POS_X,0,WDPL$C_ABS_POS_Y,0,0/
C
	GKSERR = GETDEV(DEV,WKID)
	IF (GKSERR.NE.0) GOTO 9999
C
	IF (VISIBLE(DEV)) GOTO 9999
	IF (UIS$GET_VIEWPORT_ICON(WCB(DEV))) GOTO 9999
	ATTR(2) = WPOSX(DEV)
	ATTR(4) = WPOSY(DEV)
	CALL UIS$MOVE_VIEWPORT(WCB(DEV),ATTI)
	VISIBLE(DEV) = .TRUE.
C
9999	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GUIS_CONCEAL_VIEWPORT(WKID)
C
**	MODULE	GUIS_CONCEAL_VIEWPORT
**	IDENT	15SE87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C To make viewport visible
C
	IMPLICIT NONE
C
	INCLUDE	'SYS$LIBRARY:UISUSRDEF'
***	COMMON/GKSDAT2/
***	COMMON/GKSESL/
C
C argument
	INTEGER	WKID
C
C function called
	INTEGER	GETDEV
	LOGICAL	UIS$GET_VIEWPORT_ICON
C
C workspace
	INTEGER	DEV
	INTEGER	ATTI(3)
	DATA	ATTI/WDPL$C_PLACEMENT,WDPL$M_INVISIBLE,0/
C
	GKSERR = GETDEV(DEV,WKID)
	IF (GKSERR.NE.0) GOTO 9999
C
	IF (.NOT.VISIBLE(DEV)) GOTO 9999
	IF (UIS$GET_VIEWPORT_ICON(WCB(DEV))) GOTO 9999
	CALL UIS$GET_VIEWPORT_POSITION(WCB(DEV),WPOSX(DEV),WPOSY(DEV))
	CALL UIS$MOVE_VIEWPORT(WCB(DEV),ATTI)
	VISIBLE(DEV) = .FALSE.
C
9999	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GET_VIEWPORT_POSITION(X,Y)
C
**	MODULE	GET_VIEWPORT_POSITION
**	IDENT	15SE87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C To obtain position of bottom left of viewport relative to screen (cm)
C
	IMPLICIT NONE
C
***	COMMON/GKSDAT2/
C
C arguments
	REAL	X,Y
C
C just deal with workstation 1 for now
	CALL UIS$GET_VIEWPORT_POSITION(WCB(1),X,Y)
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GET_MOUSE_POSITION(X,Y)
C
**	MODULE	GET_MOUSE_POSITION
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Return world coordinates of mouse position
C
	IMPLICIT NONE
C
***	COMMON/GKSDAT2/
C
C Arguments
	REAL		X,Y		! mouse position
C
C functions
	INTEGER		UIS$GET_POINTER_POSITION
C
C workspace
	REAL		XX,YY
	SAVE		XX,YY
	INTEGER		DEV
C
C if outside viewport then return same values as last time
	DO 10 DEV=1,WSMAX
	   IF (WKIDS(DEV).EQ.1.OR.WKIDS(DEV).EQ.2) THEN
C
C returns 0 if outside viewport, in which case return same values
C as last time
	      IF (UIS$GET_POINTER_POSITION(
     &			DCB(DEV),WCB(DEV),X,Y).NE.0) THEN
	         CALL GKSD2W(WKIDS(DEV),X,Y,XX,YY)
	         GOTO 99
	      ENDIF
	   ENDIF
10	CONTINUE
99	X = XX
	Y = YY
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	SET_MOUSE_POSITION(X,Y)
C
**	MODULE	SET_MOUSE_POSITION
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Set world coordinates of mouse pointer
C
	IMPLICIT NONE
C
***	COMMON/GKSDAT2/
C
C Arguments:
	REAL		X,Y		! mouse position
C
C workspace
	REAL		XX,YY
C
C just deal with workstation 1 for now
	CALL GKSW2D(WKIDS(1),X,Y,XX,YY)
	CALL UIS$SET_POINTER_POSITION(DCB(1),WCB(1),XX,YY)
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GUIS_DISMOD(N)
C
**	MODULE GUIS_DISMOD
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Set display mode to stored or refresh
C
	IMPLICIT NONE
C
***	COMMON/GKSRF/
C
C Arguments:
	INTEGER		N		! 0->stored, else refresh
C
	CALL GUIS_RFSTOP		! stop refresh picture
	IF (N.EQ.0) THEN
	   DIVRF = .FALSE.		! set diversion
	ELSE
	   DIVRF = .TRUE.		! set diversion
	   RFBUFP(1) = 0		! clear refresh buffer
	   RFBUFP(2) = 0
	   RFPTR(1) = 0			! and coordinate buffer
	   RFPTR(2) = 0
	ENDIF
C
	RETURN
	END	
C
C***********************************************************************
C
	SUBROUTINE	GUIS_REFRSH
C
**	MODULE	GUIS_REFRSH
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Set refresh picture going
C
	IMPLICIT NONE
C
***	COMMON/GKSRF/
C
	TMRON = .TRUE.
	CALL GUIS_TMRAST
C
	RETURN
	END	
C
C***********************************************************************
C
	SUBROUTINE	GUIS_TMRAST
C
**	MODULE	GUIS_TMRAST
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Refresh timer AST
C
	IMPLICIT NONE
C
***	COMMON/GKSRF/
C
	IF (TMRON) THEN			! if timer on then
	   CALL GUIS_DRAWRF		! draw refresh
C
C re-schedule ourselves in a while (if required)
	   IF (TMRON) CALL SYS$SETIMR(
     &		%VAL(TMREFN),TMRTIM,%VAL(TMRADR),%VAL(TMREFN))
	ENDIF
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GUIS_RFSTOP
C
**	MODULE	GUIS_RFSTOP
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Stop the refresh picture
C
	IMPLICIT NONE
C
***	COMMON/GKSRF/
C
	IF (TMRON) THEN				! if timer is on
	   TMRON = .FALSE.			! request off
	   CALL SYS$CANTIM(%VAL(TMREFN),)	! cancel it
	   IF (RFON) CALL GUIS_DRAWRF		! remove refresh
	ENDIF
	IF (RFCON) CALL GUIS_DRWCUR		! remove cursor
	RFON = .FALSE.				! refresh not now on
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GUIS_DRAWRF
C
**	MODULE	GUIS_DRAWRF
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Draw the refresh picture
C
	IMPLICIT NONE
C
***	COMMON/GKSDAT2/
***	COMMON/GKSRF/
C
C workspace
	INTEGER	I,PTR,WKID
	REAL	X(5),Y(5)
C
C cursor
C toggle if wanted on, and either blink or not on
	IF (CURSON.AND.(CURBNK.OR..NOT.RFCON)) CALL GUIS_DRWCUR
C
C refresh buffer
	DO 10 WKID=1,2
	   IF (.NOT.RFWK(WKID)) GOTO 10
	   PTR = 1
	   DO 20 I=1,RFPTR(WKID)
	      CALL UIS$PLOT_ARRAY(DCB(RFDEV(WKID)),6,
     &		RFPTS(I,WKID),RFBUFX(PTR,WKID),RFBUFY(PTR,WKID))
	      PTR = PTR+RFPTS(I,WKID)
20	   CONTINUE
C
C rubber lines
	   IF (RFRUB(1).OR.RFRUB(2)) THEN
	      IF (RFRUB(1)) THEN
	         IF (RFWIN.AND.
     &		RFX(2,WKID).GT.RFX(1,WKID).AND.
     &		RFY(2,WKID).GT.RFY(1,WKID)) THEN
	            X(1) = RFX(1,WKID)	! SW corner
	            Y(1) = RFY(1,WKID)
	            X(3) = RFX(2,WKID)	! NE corner (cursor)
	            Y(3) = RFY(2,WKID)
	            X(2) = X(1)	! NW corner (y OK already)
	            Y(2) = Y(3)
	            X(4) = X(3)	! SE corner
	            Y(4) = Y(1)
	            X(5) = X(1)	! back to SW
	            Y(5) = Y(1)
	            CALL UIS$PLOT_ARRAY(DCB(RFDEV(WKID)),6,5,X,Y)
	            GOTO 10
	         ENDIF
	         PTR = 1
	         I = 2
	      ELSE
	         PTR = 2
	         I = 1
	      ENDIF
	      IF (RFRUB(2)) I = I+1
	      CALL UIS$PLOT_ARRAY(DCB(RFDEV(WKID)),
     &			6,I,RFX(PTR,WKID),RFY(PTR,WKID))
	   ELSE
C
C no rubber lines, so if no other refresh or blinking cursor,
C then may as well cancel the timer
	      IF (RFPTR(1).EQ.0.AND.RFPTR(2).EQ.0.AND.
     &			.NOT.(CURSON.AND.CURBNK)) TMRON = .FALSE.
	   ENDIF
10	CONTINUE
C
900	RFON = .NOT.RFON
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GUIS_DRWCUR
C
**	MODULE	GUIS_DRWCUR
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Draw the refresh cursor
C
	IMPLICIT NONE
C
***	COMMON/GKSDAT2/
***	COMMON/GKSRF/
C
C workspace
	REAL		X(3),Y(3)
	REAL		SIZE
	INTEGER		WKID
C
	IF (LRGCUR) THEN
	   SIZE = 0.1
	ELSE
	   SIZE = 0.005
	ENDIF
C
	DO 10 WKID=1,2
	   IF (.NOT.RFWK(WKID)) GOTO 10
	   X(1) = RFX(2,WKID)-SIZE
	   X(2) = RFX(2,WKID)+SIZE
	   Y(1) = RFY(2,WKID)
	   Y(2) = Y(1)
	   CALL UIS$PLOT_ARRAY(DCB(RFDEV(WKID)),6,2,X,Y)
	   X(1) = RFX(2,WKID)
	   X(2) = X(1)
	   Y(1) = RFY(2,WKID)-SIZE
	   Y(2) = RFY(2,WKID)+SIZE
	   CALL UIS$PLOT_ARRAY(DCB(RFDEV(WKID)),6,2,X,Y)
10	CONTINUE
C
	RFCON = .NOT.RFCON
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GUIS_RFBUF(WKID,N,X,Y)
C
**	MODULE	GUIS_RFBUF
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C To buffer refresh picture
C
	IMPLICIT NONE
C
***	COMMON/GKSRF/
C
C arguments
	INTEGER	WKID			! 1 or 2
	INTEGER	N			! number of points
	REAL	X(N),Y(N)		! coordinates
C
C workspace
	INTEGER	I,PTS
C
	IF (RFPTR(WKID).LT.RFMAX) THEN
	   PTS = MIN(N,RFBUFM-RFBUFP(WKID))
	   IF (PTS.GT.0) THEN
	      RFPTR(WKID) = RFPTR(WKID)+1
	      RFPTS(RFPTR(WKID),WKID) = PTS
	      DO 10 I=1,PTS
	         RFBUFX(RFBUFP(WKID)+I,WKID) = X(I)
	         RFBUFY(RFBUFP(WKID)+I,WKID) = Y(I)
10	      CONTINUE
	      RFBUFP(WKID) = RFBUFP(WKID)+PTS
	   ENDIF
	ENDIF
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GUIS_CSWT(X,Y)
C
**	MODULE	GUIS_CSWT
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C To write refresh cursor position
C
	IMPLICIT NONE
C
***	COMMON/GKSDAT2/
***	COMMON/GKSRF/
C
C arguments
	REAL	X,Y			! coordinates
C
	CALL GKSW2D(1,X,Y,RFX(2,1),RFY(2,1))
	CALL GKSW2D(2,X,Y,RFX(2,2),RFY(2,2))
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GUIS_CURSEL(SIZE,ON,BLINK)
C
**	MODULE	GUIS_CURSEL
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C To set cursor size, whether on, and whether blinking
C
	IMPLICIT NONE
C
***	COMMON/GKSRF/
C
C arguments
	INTEGER	SIZE			! 0->small, else large
	LOGICAL*1 ON
	LOGICAL*1 BLINK
C
	LRGCUR = SIZE.NE.0
	CURSON = ON
	CURBNK = BLINK
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GUIS_SETRUB(RUBLIN,RUBARR,WINBOX)
C
**	MODULE	GUIS_SETRUB
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C To set rubber band lines
C
	IMPLICIT NONE
C
***	COMMON/GKSDAT2/
***	COMMON/GKSRF/
C
C arguments
	LOGICAL*1 RUBLIN(2)		! lines on?
	REAL	RUBARR(2,2)		! coordinates
	LOGICAL*1 WINBOX		! want window box?
C
	RFRUB(1) = RUBLIN(1)
	RFRUB(2) = RUBLIN(2)
	RFWIN = WINBOX
	IF (RFRUB(1)) THEN
	   CALL GKSW2D(1,RUBARR(1,1),RUBARR(2,1),RFX(1,1),RFY(1,1))
	   CALL GKSW2D(2,RUBARR(1,1),RUBARR(2,1),RFX(1,2),RFY(1,2))
	ENDIF
	IF (RFRUB(2)) THEN
	   CALL GKSW2D(1,RUBARR(1,2),RUBARR(2,2),RFX(3,1),RFY(3,1))
	   CALL GKSW2D(2,RUBARR(1,2),RUBARR(2,2),RFX(3,2),RFY(3,2))
	ENDIF
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	SET_POINTER_VISIBILITY(ON,PX,PY)
C
**	MODULE	SET_POINTER_VISIBILITY
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C To set visibility of mouse pointer in a particular region
C (in particular, to turn it off)
C Can be called more than once for different regions.
C When turning on again, region must match that when turned off.
	IMPLICIT NONE
C
***	COMMON/GKSDAT2/
***	COMMON/GKSESL/
C
C Arguments:
	LOGICAL	ON			! visible?
	REAL	PX(2)			! X coords
	REAL	PY(2)			! Y coords
C
C Workspace
	REAL	X1,Y1,X2,Y2
	INTEGER*2	PATT(16)
	DATA		PATT/16*0/
C
C just deal with workstation 1 for now
	CALL GKSW2D(1,PX(1),PY(1),X1,Y1)
	CALL GKSW2D(1,PX(2),PY(2),X2,Y2)
	IF (ON) THEN
	   CALL UIS$SET_POINTER_PATTERN(DCB(1),WCB(1),,,,,X1,Y1,X2,Y2)
	ELSE
	   CALL UIS$SET_POINTER_PATTERN(
     &			DCB(1),WCB(1),PATT,1,0,0,X1,Y1,X2,Y2)
	ENDIF	
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE GUIS_GETCB(WKID,DCB_ARG,WCB_ARG)
C
***	IDENT	07MR89
***	MODULE	GUIS_GETCB
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C To return display and window identifiers for a caller to do
C whatever they like with
C
        IMPLICIT NONE
C
***	COMMON/GKSDAT2/
***	COMMON/GKSESL/
C
C argument
	INTEGER	WKID,DCB_ARG,WCB_ARG
C
C function called
	INTEGER	GETDEV
C
C workspace
	INTEGER	DEV
C
	GKSERR = GETDEV(DEV,WKID)
	IF (GKSERR.NE.0) GOTO 9999
C
	DCB_ARG = DCB(DEV)
	WCB_ARG = WCB(DEV)
C
9999	RETURN
	END
