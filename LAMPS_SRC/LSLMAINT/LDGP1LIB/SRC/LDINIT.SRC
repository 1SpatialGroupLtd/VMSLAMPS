C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-10-20 12:17:36.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE LDINIT(ACTION,DUMMY1,DUMMY2)
C
***	IDENT	20OC88
***	MODULE	LDINIT
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C LDLIB lookalike for KERN GP1 plotter
C
C to initialise plotting device
C
C Author R.W. Russell					 6-Sep-1988
C
	IMPLICIT	NONE
C
C arguments
C
	INTEGER		ACTION		! = 0 for close
					!   otherwise open
	INTEGER		DUMMY1		! ignored
	INTEGER		DUMMY2		! ignored
C
C parameters
C
	INCLUDE		'($DCDEF)/NOLIST'
	INCLUDE 	'($DVIDEF)/NOLIST'
	INCLUDE 	'($SSDEF)/NOLIST'
C
C common block
C
***	COMMON/CMN:GP1CMN/
C
C w/s
	LOGICAL		ERR
	INTEGER		IERR
	CHARACTER*3	TRANSLATION
	INTEGER		MODE
	REAL		ORGWIN(6)
	REAL		ORGX,ORGY
	INTEGER		I
C
C functions
	INTEGER		SET_LOGICAL
	INTEGER		TRNALL
	INTEGER		TEST_TERM
	LOGICAL		RDLONG
C
C initialise or close?
C
	IF (ACTION.EQ.0) GOTO 500
C
C initialise plotting table
C =========================
C
C If logical name LSL$KERNGP1 is not set up, then write to a file
C called "KERNGP1.DAT"
C
C If logical name LSL$KERNGP1 is set up and is a terminal line, then
C write to that, and assume it is a plotting table
C
C If logical name LSL$KERNGP1 is set up and is not a terminal line, then
C write to it as though it is a file
C
	MODE = 0
	IERR = TRNALL(OUT_NAM,TRANSLATION)
	IF (IERR.EQ.SS$_NOLOGNAM) THEN
	   CALL GPINIT(MODE,DEF_NAM,1,ERR)
	ELSE
C
C is it a terminal?
	   IF (TEST_TERM(OUT_NAM,OUTERM,IERR)) THEN
	      IF (OUTERM.AND.SET_LOGICAL(LOG_NAM,OUT_NAM)) THEN
	         MODE = 1
	      ENDIF
	      CALL GPINIT(MODE,OUT_NAM,1,ERR)
	   ELSE
	      CALL GPINIT(MODE,DEF_NAM,1,ERR)
	   ENDIF
	ENDIF
C
C if on line, inquire the current window
	IF (MODE.EQ.1) THEN
	   CALL ORIWIN(ORGWIN)
c
c
c
cc
CCCC	call writef
CCCC	call writef('*** DEBUG *** DEBUG *** DEBUG *** DEBUG ***')
CCCC	call writef
CCCC	call writef('Current origin :- X = %F0.3    Y = %F0.3',
CCCC     &	                     ORGWIN(1),ORGWIN(2))
CCCC	call writef
CCCC	call writef('Lower left of window  :- X = %F0.3    Y = %F0.3',
CCCC     &	                     ORGWIN(3),ORGWIN(4))
CCCC	call writef
CCCC	call writef('Upper right of window :- X = %F0.3    Y = %F0.3',
CCCC     &	                     ORGWIN(5),ORGWIN(6))
CCCC	call writef
CCCC	call writef('*** DEBUG *** DEBUG *** DEBUG *** DEBUG ***')
CCCC	call writef
c
c
cc
c
c
	   IF (ORGWIN(3).EQ.0.0.AND.ORGWIN(4).EQ.0.0.AND.ORGWIN(5).EQ.0.0
     &	                       .AND.ORGWIN(6).EQ.0.0) THEN
	      ORGWIN(3) = -650.0
	      ORGWIN(4) = -550.0
	      ORGWIN(5) = +650.0
	      ORGWIN(6) = +550.0
	   ENDIF
	   ORGX = 0.0
	   ORGY = 0.0
	   WIN_XMIN = ORGWIN(3)
	   WIN_YMIN = ORGWIN(4)
	   WIN_XMAX = ORGWIN(5)
	   WIN_YMAX = ORGWIN(6)
C
C make lower left corner of window the origin
	   WIN_XMIN = ORGX
	   WIN_YMIN = ORGY
C
C otherwise use whole table
	ELSE
	   ORGX     =    0.0
	   ORGY     =    0.0
	   WIN_XMIN = -650.0
	   WIN_YMIN = -550.0
	   WIN_XMAX =  650.0
	   WIN_YMAX =  550.0
	ENDIF
C
C now set up defaults (don't call reset - as that sets window and origin)
C
CCCC	CALL RESET
	CALL SCALE(1.0,1.0)
	CALL SETPAR(0,0)	! mm and degrees
	CALL LINSET(1)		! solid line
C
	NOPEN = DEF_PEN		! default number of pens	
C
C read logical name LSL$KERNGP1_PENS
	IF (.NOT.TRNALL(NUMBER_PEN,TRANSLATION)) GOTO 10
	CALL SETAUX(%REF(TRANSLATION),3)
	IF (RDLONG(I)) GOTO 10
	IF (I.LT.1) GOTO 10
	NOPEN = I
C	
C initialise current position (to impossible value)
C
10	CONTINUE
cc
c
c
CCCC	call writef
CCCC	call writef('*** DEBUG *** DEBUG *** DEBUG *** DEBUG ***')
CCCC	call writef
CCCC	call writef('Plotter has %N pens',NOPEN)
CCCC	call writef
CCCC	call writef('*** DEBUG *** DEBUG *** DEBUG *** DEBUG ***')
CCCC	call writef
c
c
cc
	CURPEN = -1		! ensure that first call of pen is obeyed
	CURRX = -99999
	CURRY = -99999
C
C finished
C
	GOTO 1000
C
C close plotting table
C
  500	CONTINUE
C
C move pen to top left of window
C
	CALL MOVTO(WIN_XMAX/SCLE,WIN_YMAX/SCLE)
C
C close down
C
	CALL PLTEND
C
	GOTO 1000
C
 1000	RETURN
	END

