Thoughts on Display PostScript
Clarke Brunt	2-Nov-1992, amended 4-Nov-1992

GKSMOTIFLIB (presently called GKSMOTIFPSLIB) has been modified to support
the use of display PostScript. It already supported hardware text (GKS
routine GTX) using X-text (always horizontal, non-scalable).

Logical name LSL$DECW_DPS (set non-zero) causes it to attempt to use
Display PostScript. It tests in GOPWK if the X-server supports it, and
if not then makes no further attempt to use it (X-text used instead).

A new GKS routine has been added ( LSG_STRING_WIDTH(string,font,width) )
to get back the width of a string if drawn at unit height. This is called
from FRTLIB's TRISCN routine (which has gained optional h/w argument),
and has provision to return TRUE if unable to supply the information
(TRISCN then uses the TRIWID array as normal). This mechanism facilitates
the provision of a null routine returning TRUE is GKS libraries which do
not support this facility.

FPPSHR is told (by the specific FPPxxx image) whether hardware text is
supported. A bit in the FRT is still needed to utilise it. The main
program still cannot distinguish between Display PostScript and X-text,
so if e.g. FPPMOTIF was changed to allow hardware text, and was then run
on an X-server not supporting Display PostScript, then the less than
satisfactory X-text would be used. We may need a way to switch back to
software text in this case.

The correspondence between FRT font number and PostScript font is established
by logical name LSL$DPS_FONTLIST (c.f. LSL$PS_FONTLIST), of the format
$ DEFINE LSL$DPS_FONTLIST "1 {/Courier findfont}",... (search list).
These user supplied procedures are executed on startup, and the results
stored for later use (whereas at present GKSPSLIB stores the procedures
and executes them later each time they are required). The new strategy
may or may not be a good idea, as it will result in all fonts being "found"
(and hence possibly loaded) whether or not they are actually used.
The character widths returned by LSG_STRING_WIDTH are obtained by
executing the "stringwidth" operator for each string as required.
Another possibility would be to get the widths for each character once
then use them as required (??? does "show" or "stringwidth" do any
kerning, which would preclude this). Note that the height of a PostScript
font seems to correspond to the intended line spacing - the actual characters
are smaller - so to achieve a similar effect to our software fonts, some
scaling is needed. This can be done by including e.g. "1.5 scalefont" in
the logical name definition. It could also be done by calculating the
actual height of a letter "X" or "A" say and scaling everything accordingly.
This would be more automatic, but would not be so controllable. Some users
have requested that the "italic" mechanism (negative font numbers) work
with hardware text. The negative number could perhaps be passed through to
GSTXFP (although strictly illegal in GKS). This could shear the font,
or perhaps better allow the user to specify an already italic font to
correspond to the negative number. The user can in any case build any
font transformation into the logical name definition.

Programs such as FPPPOSTSCRIPT cannot have two way communication with the
PostScript interpreter, so their LSG_STRING_WIDTH will need to be
implemented differently. We could perhaps use font metric files to
get the information. Of course PostScript code itself could perform the
justification for which the widths are needed, but this would not
really help LITES2 which needs to know the extents for other reasons.

Regarding further development...

LITES2 needs to be modified to pass hardware arguments to TRISCN and TRITXT.
It should probably only do this on hardware thought to support it, since
otherwise any text with its hardware bit set in the FRT will not come out
at all (now done experimentally in STDRAW and GENAUX).
The device dependent routines TSTWK or INIWK could perhaps return
the information. Also the many routines in LITES2 directly accessing FRTLIB's
TRIWID array need to be checked out (these are concerned with bent texts, and
with the zero-width diacritical marks).

LITES2 plotting will probably need to distinguish between itself and its
plotter supporting hardware text.

PostScript fonts seem to require TOLERANCE JUSTIFY 0.0 to work correctly.
They have some space at the start of the characters also (as do the
Hershey fonts), which we do not expect from TRI fonts.

It has proved possible to get Display PostScript to use the correct colour and
plane mask by telling it that our colour table is a "gray ramp" then
using "setgray" in the range 0-1 to choose the colour. We should check
that this always works - if it decided that we had requested a colour
"between the cracks" in the ramp, it may dither, with most peculiar results.
The documentation does not suggest that Display PostScript will use the user
specified "drawing function". We can make do with the default
unless using one of the modes where the colours are used in reverse. It is
necessary to invert the colour to get these to work. Some signs of interference
with the X GC used for both C drawing and Display PostScript was observed
(wrong plane mask used sometimes) - I am now using a different GC for each.
