Problems with the VAX (Fortran binding for Display PostScript).
Clarke Brunt	2-Nov-1992

XPDS$CREATE_CONTEXT takes a pointer to a pointer to a Standard Colormap struct.
Surely should only be one dereference (this argument should be passed by the
same method in Fortran or C). The same applies to the passed text and error
routines - a %LOC is needed. Also the VAX versions of DPS$DEFAULT_TEXT_BACKSTOP
and DPS$DEFAULT_ERROR_PROC callbacks are no use, because they are called with
C style argument lists. I have ended up passing the C versions with %LOC. 

DPS$SET_X_GC_DRAWABLE. The X and Y origin arguments should be INTEGERs.
The routine expects REALs, converts them to DOUBLE, and then passes them
by VALUE to a routine (the C binding?) which expects INTEGERs.
I have used a custom wrap instead to overcome this, but could presumably
have used the C routine.

Documentation suggests that DPS$DESTROY_SPACE should be used to close down,
rather than DPS$DESTROY_CONTEXT. To get the space from the context, I tried
DPS$SPACE_FROM_CONTEXT but this function just returns 4(AP) - its first arg
by value - it should (I believe) return MOVL 4(AP),R0; MOVL 4(R0),R0 - the
second longword of first arg by reference.
The C 'routine' is just a macro, so I can't use that.

setXgcdrawable seems to reset the transformation. I have to use setmatrix
after it because I want to draw in pixels, to match my use of XLIB.

Problems with PSWRAP.
I you don't use the /SOURCE_OUTPUT=ANSI_C qualifier, then all float arguments
are accepted as DOUBLEs by value (which is very difficult from Fortran).
(This is C behaviour without prototypes rather than PSWRAP's fault).

I cannot get the wraps to accept a context as their first argument like they
are supposed to - they always use the default context. I could use the default,
but I have a context for each of the (up to) 4 displays, so I would have
to keep swapping the default context. I have overcome this by editing the
C output from PSWRAP before using it.
