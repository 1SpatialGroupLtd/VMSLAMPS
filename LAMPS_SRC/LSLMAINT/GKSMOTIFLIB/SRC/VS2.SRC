C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1997-07-14 14:10:38.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C***********************************************************************
C Routines for Vaxstation
C***********************************************************************
C
	SUBROUTINE	SET_MOUSE_AST(AST)
C
**	MODULE	SET_MOUSE_AST
**	IDENT	14JL97
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Call routine AST when mouse motion is detected within GKS window
C with left mouse button down
C Pass 0 by value to cancel the AST.
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER*4	AST		! AST routine
C
***	COMMON/GKSDAT2/
C
	MOUSE_ROUTINE = %LOC(AST)
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	SET_TRACK_AST(AST)
C
**	MODULE	SET_TRACK_AST
**	IDENT	13MR91
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Call routine AST when mouse motion is detected within GKS window
C with no particular button down
C Pass 0 by value to cancel the AST.
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER*4	AST		! AST routine
C
***	COMMON/GKSDAT2/
C
C workspace
	INTEGER		DEV
C
	TRACK_ROUTINE = %LOC(AST)
C
C set the translations for active workstations
	   DO 10 DEV=1,WSMAX
	      IF (WKIDS(DEV).EQ.1.OR.WKIDS(DEV).EQ.2) THEN
	         CALL SET_TRACK_C(WCB(DEV),TRACK_ROUTINE)
	      ENDIF
10	   CONTINUE
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	SET_BUTTON_AST(AST)
C
**	MODULE	SET_BUTTON_AST
**	IDENT	14JN85
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Call routine AST when mouse button activity occurs within GKS window
C Pass 0 by value to cancel the AST.
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER*4	AST		! AST routine
C
***	COMMON/GKSDAT2/
C
	BUTTON_ROUTINE = %LOC(AST)
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	SET_EVENT_AST(AST)
C
**	MODULE	SET_EVENT_AST
**	IDENT	14JN85
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Call routine AST when client event happens
C Pass 0 by value to cancel the AST.
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER*4	AST		! AST routine
C
***	COMMON/GKSDAT2/
C
	EVENT_ROUTINE = %LOC(AST)
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GUIS_BUTTON(WIDGET,EVENT)
C
**	MODULE	GUIS_BUTTON
**	IDENT	16MY84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					CCB	16-May-1984
C
C Button press action routine
C
	IMPLICIT NONE
C
	INCLUDE 'SYS$LIBRARY:DECW$XLIBDEF.FOR'
***	COMMON/GKSDECW/
***	COMMON/GKSDAT2/
C
C Arguments:
	INTEGER	WIDGET		! i.e. WCB(1) by value
	RECORD/X$EVENT/EVENT
C
C workspace
	INTEGER	ARG(6)
	REAL	X,Y		! world coord
	REAL	XR,YR		! relative to root window
	INTEGER	DEV
C
C If the user has supplied a routine, then call it
	IF (BUTTON_ROUTINE.NE.0) THEN
C
C get which window it happened in
	   DO 10 DEV=1,WSMAX
	      IF (WCB(DEV).EQ.%LOC(WIDGET)) GOTO 20
10	   CONTINUE
	   GOTO 30
20	   X = (EVENT.EVNT_BUTTON.X$L_BTEV_X+0.5)*GNOMLW
	   Y = DCMAXY(DEV)-(EVENT.EVNT_BUTTON.X$L_BTEV_Y+0.5)*GNOMLW
	   CALL GKSD2W(WKIDS(DEV),X,Y,X,Y)
	   XR =  EVENT.EVNT_BUTTON.X$L_BTEV_X_ROOT
	   YR = -EVENT.EVNT_BUTTON.X$L_BTEV_Y_ROOT
	   ARG(1) = 5
	   ARG(2) = %LOC(EVENT.EVNT_BUTTON.X$L_BTEV_BUTTON)
	   ARG(3) = %LOC(X)
	   ARG(4) = %LOC(Y)
	   ARG(5) = %LOC(XR)
	   ARG(6) = %LOC(YR)
	   CALL LIB$CALLG(ARG,%VAL(BUTTON_ROUTINE))
	   XEVENT = .TRUE.	! significant event
	ENDIF
C
30	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GUIS_MOTION(WIDGET,EVENT)
C
**	MODULE	GUIS_MOTION
**	IDENT	16MY84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					CCB	16-May-1984
C
C Motion action routine
C
	IMPLICIT NONE
C
	INCLUDE 'SYS$LIBRARY:DECW$XLIBDEF.FOR'
***	COMMON/GKSDECW/
***	COMMON/GKSDAT2/
C
C Arguments:
	INTEGER	WIDGET		! i.e. WCB(1) by value
	RECORD/X$EVENT/EVENT
C
C workspace
	INTEGER	ARG(5)
	REAL	X,Y		! world coord
	REAL	XR,YR		! relative to root window
	INTEGER	DEV
C
C If the user has supplied a routine, then call it
	IF (MOUSE_ROUTINE.NE.0) THEN
C
C get which window it happened in
	   DO 10 DEV=1,WSMAX
	      IF (WCB(DEV).EQ.%LOC(WIDGET)) GOTO 20
10	   CONTINUE
	   GOTO 30
20	   X = (EVENT.EVNT_MOTION.X$L_MTEV_X+0.5)*GNOMLW
	   Y = DCMAXY(DEV)-(EVENT.EVNT_MOTION.X$L_MTEV_Y+0.5)*GNOMLW
	   CALL GKSD2W(WKIDS(DEV),X,Y,X,Y)
	   XR =  EVENT.EVNT_MOTION.X$L_MTEV_X_ROOT
	   YR = -EVENT.EVNT_MOTION.X$L_MTEV_Y_ROOT
	   ARG(1) = 4
	   ARG(2) = %LOC(X)
	   ARG(3) = %LOC(Y)
	   ARG(4) = %LOC(XR)
	   ARG(5) = %LOC(YR)
	   CALL LIB$CALLG(ARG,%VAL(MOUSE_ROUTINE))
	   XEVENT = .TRUE.	! significant event
	ENDIF
30	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GUIS_TRACK(WIDGET,EVENT)
C
**	MODULE	GUIS_TRACK
**	IDENT	16MY84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					CCB	16-May-1984
C
C Tracking action routine (no button down)
C
	IMPLICIT NONE
C
	INCLUDE 'SYS$LIBRARY:DECW$XLIBDEF.FOR'
***	COMMON/GKSDECW/
***	COMMON/GKSDAT2/
C
C Arguments:
	INTEGER	WIDGET		! i.e. WCB(1) by value
	RECORD/X$EVENT/EVENT
C
C workspace
	INTEGER	ARG(5)
	REAL	X,Y		! world coord
	REAL	XR,YR		! relative to root window
	INTEGER	DEV
C
C If the user has supplied a routine, then call it
	IF (TRACK_ROUTINE.NE.0) THEN
C
C get which window it happened in
	   DO 10 DEV=1,WSMAX
	      IF (WCB(DEV).EQ.%LOC(WIDGET)) GOTO 20
10	   CONTINUE
	   GOTO 30
20	   X = (EVENT.EVNT_MOTION.X$L_MTEV_X+0.5)*GNOMLW
	   Y = DCMAXY(DEV)-(EVENT.EVNT_MOTION.X$L_MTEV_Y+0.5)*GNOMLW
	   CALL GKSD2W(WKIDS(DEV),X,Y,X,Y)
	   XR =  EVENT.EVNT_MOTION.X$L_MTEV_X_ROOT
	   YR = -EVENT.EVNT_MOTION.X$L_MTEV_Y_ROOT
	   ARG(1) = 4
	   ARG(2) = %LOC(X)
	   ARG(3) = %LOC(Y)
	   ARG(4) = %LOC(XR)
	   ARG(5) = %LOC(YR)
	   CALL LIB$CALLG(ARG,%VAL(TRACK_ROUTINE))
	   XEVENT = .TRUE.	! significant event
	ENDIF
30	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GUIS_EVENT(WIDGET,EVENT)
C
**	MODULE	GUIS_EVENT
**	IDENT	16MY84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					CCB	16-May-1984
C
C Client event action routine
C
	IMPLICIT NONE
C
	INCLUDE 'SYS$LIBRARY:DECW$XLIBDEF.FOR'
***	COMMON/GKSDECW/
***	COMMON/GKSDAT2/
C
C Arguments:
	INTEGER	WIDGET		! i.e. WCB(1) by value
	RECORD/X$EVENT/EVENT
C
C If the user has supplied a routine, then call it
	IF (EVENT_ROUTINE.NE.0) THEN
	   CALL LIB$CALLG(0,%VAL(EVENT_ROUTINE))
	ENDIF
	XEVENT = .TRUE.		! always a significant event
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GUIS_FOCUS(WIDGET,EVENT)
C
**	MODULE	GUIS_FOCUS
**	IDENT	16MY84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					CCB	27-Aug-1996
C
C Client event action routine
C
	IMPLICIT NONE
C
	INCLUDE 'SYS$LIBRARY:DECW$XLIBDEF.FOR'
***	COMMON/GKSDECW/
***	COMMON/GKSDAT2/
C
C Arguments:
	INTEGER	WIDGET		! i.e. DCB(n) by value
	RECORD/X$EVENT/EVENT
C
C workspace
	INTEGER	DEV
	CHARACTER*32	NAME
	INTEGER*2	NAMEL
C
C get which window it happened in
	DO 10 DEV=1,WSMAX
	   IF (DCB(DEV).EQ.%LOC(WIDGET)) GOTO 20
10	CONTINUE
	GOTO 30
C
C set the input focus to shell window
20	IF (XCMAPS(DEV).NE.0) THEN
	   IF (EVENT.EVNT_CLIENT.X$L_CLNT_MESSAGE_TYPE.EQ.
     &					XATOM_WM_PROTOCOLS .AND.
     &	       EVENT.EVNT_CLIENT.X$L_CLNT_L(1).EQ.
     &					XATOM_WM_TAKE_FOCUS) THEN
	      CALL X$INSTALL_COLORMAP(XDISPLAY,XCMAPS(DEV))
	   ENDIF
	ENDIF
C
30	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GUIS_SEND_EVENT
C
**	MODULE	GUIS_SEND_EVENT
**	IDENT	16MY84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					CCB	16-May-1984
C
C Send a client event
C Intended to be called from the completion AST of input, so
C as to trigger GUIS_MAIN_LOOP into returning.
C
	IMPLICIT NONE
C
	INCLUDE 'SYS$LIBRARY:DECW$XLIBDEF.FOR'
***	COMMON/GKSDECW/
***	COMMON/GKSDAT2/
C
C workspace
	RECORD/X$EVENT/EVENT
C
	IF (XWINDOW(1).NE.0) THEN
	   EVENT.EVNT_TYPE = X$C_CLIENT_MESSAGE
	   EVENT.EVNT_CLIENT.X$L_CLNT_WINDOW = XWINDOW(1)
	   EVENT.EVNT_CLIENT.X$L_CLNT_FORMAT = 32
	   AST_ON = AST_ON+1
	   CALL X$SEND_EVENT(XDISPLAY,XWINDOW(1),.FALSE.,0,EVENT)
	   CALL X$FLUSH(XDISPLAY)
	   AST_ON = AST_ON-1
	ENDIF
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GUIS_MAIN_LOOP(WAIT)
C
**	MODULE	GUIS_MAIN_LOOP
**	IDENT	16MY84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					CCB	16-May-1984
C
C Dispatch X events
C If WAIT, then wait for first event.
C Then process events until there are none on queue.
C
	IMPLICIT NONE
C
	INCLUDE 'SYS$LIBRARY:DECW$XLIBDEF.FOR'
***	COMMON/GKSDECW/
C
C arguments
	LOGICAL	WAIT
C
	XEVENT = .FALSE.
	AST_ON = AST_ON+1
	CALL GUIS_MAIN_LOOP_C(WAIT,XEVENT)
	AST_ON = AST_ON-1
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GUIS_PUSH_VIEWPORT(WKID)
C
**	MODULE	GUIS_PUSH_VIEWPORT
**	IDENT	15SE87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C To push viewport to back
C
	IMPLICIT NONE
C
	INCLUDE	'SYS$LIBRARY:DECW$XLIBDEF'
***	COMMON/GKSDECW/
***	COMMON/GKSDAT2/
***	COMMON/GKSESL/
C
C argument
	INTEGER	WKID
C
C function called
	INTEGER	GETDEV
C
C workspace
	INTEGER	DEV
C
	GKSERR = GETDEV(DEV,WKID)
	IF (GKSERR.NE.0) GOTO 9999
C
	AST_ON = AST_ON+1
	CALL X$LOWER_WINDOW(XDISPLAY,XSWINDOW(DEV))
	AST_ON = AST_ON-1
	CALL GUWK(WKID,0)		! flush out
C
9999	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GUIS_POP_VIEWPORT(WKID)
C
**	MODULE	GUIS_POP_VIEWPORT
**	IDENT	15SE87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C To pop viewport to front
C
	IMPLICIT NONE
C
	INCLUDE	'SYS$LIBRARY:DECW$XLIBDEF'
***	COMMON/GKSDECW/
***	COMMON/GKSDAT2/
***	COMMON/GKSESL/
C
C argument
	INTEGER	WKID
C
C function called
	INTEGER	GETDEV
C
C workspace
	INTEGER	DEV
C
	GKSERR = GETDEV(DEV,WKID)
	IF (GKSERR.NE.0) GOTO 9999
C
	AST_ON = AST_ON+1
	CALL X$RAISE_WINDOW(XDISPLAY,XSWINDOW(DEV))
	AST_ON = AST_ON-1
	CALL GUWK(WKID,0)		! flush out
C
9999	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GUIS_REVEAL_VIEWPORT(WKID)
C
**	MODULE	GUIS_REVEAL_VIEWPORT
**	IDENT	15SE87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C To make viewport visible
C
	IMPLICIT NONE
C
***	COMMON/GKSDAT2/
***	COMMON/GKSESL/
C
C argument
	INTEGER	WKID
C
C function called
	INTEGER	GETDEV
C
C workspace
	INTEGER	DEV
C
	GKSERR = GETDEV(DEV,WKID)
	IF (GKSERR.NE.0) GOTO 9999
C
	IF (VISIBLE(DEV)) GOTO 9999
	CALL GUIS_REVEAL_VIEWPORT_C(DCB(DEV))
	CALL GUWK(WKID,0)		! flush out
	VISIBLE(DEV) = .TRUE.
C
9999	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GUIS_CONCEAL_VIEWPORT(WKID)
C
**	MODULE	GUIS_CONCEAL_VIEWPORT
**	IDENT	15SE87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C To make viewport visible
C
	IMPLICIT NONE
C
***	COMMON/GKSDAT2/
***	COMMON/GKSESL/
C
C argument
	INTEGER	WKID
C
C function called
	INTEGER	GETDEV
C
C workspace
	INTEGER	DEV
C
	GKSERR = GETDEV(DEV,WKID)
	IF (GKSERR.NE.0) GOTO 9999
C
	IF (.NOT.VISIBLE(DEV)) GOTO 9999
	CALL GUIS_CONCEAL_VIEWPORT_C(DCB(DEV))
	CALL GUWK(WKID,0)		! flush out
	VISIBLE(DEV) = .FALSE.
C
9999	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GET_MOUSE_POSITION(X,Y)
C
**	MODULE	GET_MOUSE_POSITION
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Return world coordinates of mouse position
C
	IMPLICIT NONE
C
	INCLUDE 'SYS$LIBRARY:DECW$XLIBDEF.FOR'
***	COMMON/GKSDECW/
***	COMMON/GKSDAT2/
C
C Arguments
	REAL		X,Y		! mouse position
C
C workspace
	INTEGER		ROOTW,CHILDW
	INTEGER		IX,IY
	REAL		XX,YY
	SAVE		XX,YY
	INTEGER		DEV
C
	AST_ON = AST_ON+1
C
C if outside viewport then return same values as last time
	DO 10 DEV=1,WSMAX
	   IF (WKIDS(DEV).EQ.1.OR.WKIDS(DEV).EQ.2) THEN
	      IF (X$QUERY_POINTER(
     &		XDISPLAY,XSWINDOW(DEV),ROOTW,CHILDW,,,IX,IY).NE.0) THEN
	         IF (CHILDW.EQ.XWINDOW(DEV)) THEN
	            X = (IX+0.5)*GNOMLW
	            Y = DCMAXY(DEV)-(IY+0.5)*GNOMLW
	            CALL GKSD2W(WKIDS(DEV),X,Y,XX,YY)
	            GOTO 99
	         ENDIF
	      ENDIF
	   ENDIF
10	CONTINUE
99	X = XX
	Y = YY
C
	AST_ON = AST_ON-1
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	SET_MOUSE_POSITION(X,Y)
C
**	MODULE	SET_MOUSE_POSITION
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Set world coordinates of mouse pointer
C
	IMPLICIT NONE
C
	INCLUDE 'SYS$LIBRARY:DECW$XLIBDEF.FOR'
***	COMMON/GKSDECW/
***	COMMON/GKSDAT2/
C
C Arguments:
	REAL		X,Y		! mouse position
C
C workspace
	REAL		XX,YY
	INTEGER		IX,IY
C
	CALL GKSW2D(WKIDS(1),X,Y,XX,YY)
	IX = INT(XX/GNOMLW)
	IY = INT((DCMAXY(1)-YY)/GNOMLW)
	AST_ON = AST_ON+1
	CALL X$WARP_POINTER(XDISPLAY,X$C_NONE,XWINDOW(1),0,0,0,0,IX,IY)
	AST_ON = AST_ON-1
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GUIS_DISMOD(N)
C
**	MODULE GUIS_DISMOD
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Set display mode to stored or refresh
C
	IMPLICIT NONE
C
***	COMMON/GKSRF/
C
C Arguments:
	INTEGER		N		! 0->stored, else refresh
C
	CALL GUIS_RFSTOP		! stop refresh picture
	IF (N.EQ.0) THEN
	   DIVRF = .FALSE.		! set diversion
	ELSE
	   DIVRF = .TRUE.		! set diversion
	   RFBUFP(1) = 0		! clear refresh buffer
	   RFBUFP(2) = 0
	   RFPTR(1) = 0			! and coordinate buffer
	   RFPTR(2) = 0
	ENDIF
C
	RETURN
	END	
C
C***********************************************************************
C
	SUBROUTINE	GUIS_REFRSH
C
**	MODULE	GUIS_REFRSH
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Set refresh picture going
C
	IMPLICIT NONE
C
***	COMMON/GKSRF/
C
	TMRON = .TRUE.		! timer wanted on
	REFNG = .TRUE.		! now refreshing
	CALL GUIS_TMRAST
C
	RETURN
	END	
C
C***********************************************************************
C
	SUBROUTINE	GUIS_TMRAST
C
**	MODULE	GUIS_TMRAST
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Refresh timer AST
C
	IMPLICIT NONE
C
***	COMMON/GKSRF/
C
	IF (TMRON) THEN			! if timer on then
	   CALL GUIS_DRAWRF		! draw refresh
C
C re-schedule ourselves in a while (if required)
	   IF (TMRON) CALL SYS$SETIMR(
     &		%VAL(TMREFN),TMRTIM,%VAL(TMRADR),%VAL(TMREFN))
	ENDIF
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GUIS_RFSTOP
C
**	MODULE	GUIS_RFSTOP
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Stop the refresh picture
C
	IMPLICIT NONE
C
***	COMMON/GKSRF/
C
	IF (TMRON) THEN				! if timer is on
	   TMRON = .FALSE.			! request off
	   CALL SYS$CANTIM(%VAL(TMREFN),)	! cancel it
	   IF (RFON) CALL GUIS_DRAWRF		! remove refresh
	ENDIF
	IF (RFCON) CALL GUIS_DRWCUR		! remove cursor
	RFON = .FALSE.				! refresh not now on
	REFNG = .FALSE.				! not refreshing
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GUIS_DRAWRF
C
**	MODULE	GUIS_DRAWRF
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Draw the refresh picture
C
	IMPLICIT NONE
C
	INCLUDE	'SYS$LIBRARY:DECW$XLIBDEF'
***	COMMON/GKSDECW/
***	COMMON/GKSDAT2/
***	COMMON/GKSRF/
C
C workspace
	INTEGER	I,PTR,WKID
	RECORD/X$POINT/XY(5)
C
	AST_ON = AST_ON+1
C
C cursor
C toggle if wanted on, and either blink or not on
	IF (CURSON.AND.(CURBNK.OR..NOT.RFCON)) CALL GUIS_DRWCUR
C
C refresh buffer
	DO 10 WKID=1,2
	   IF (.NOT.RFWK(WKID)) GOTO 10
	   PTR = 1
	   DO 20 I=1,RFPTR(WKID)
C
	      CALL X$DRAW_LINES(XDISPLAY,
     &		XWINDOW(RFDEV(WKID)),XGC(3,RFDEV(WKID)),
     &		XRFBUF(PTR,WKID),RFPTS(I,WKID),X$C_COORD_MODE_ORIGIN)
	      PTR = PTR+RFPTS(I,WKID)
20	   CONTINUE
C
C rubber lines
	   IF (RFRUB(1).OR.RFRUB(2)) THEN
	      IF (RFRUB(1)) THEN
	         IF (RFWIN.AND.
     &		XRF(2,WKID).X$W_GPNT_X.GT.XRF(1,WKID).X$W_GPNT_X .AND.
     &		XRF(2,WKID).X$W_GPNT_Y.LT.XRF(1,WKID).X$W_GPNT_Y ) THEN
	            XY(1).X$W_GPNT_X = XRF(1,WKID).X$W_GPNT_X	! SW 
	            XY(1).X$W_GPNT_Y = XRF(1,WKID).X$W_GPNT_Y
	            XY(3).X$W_GPNT_X = XRF(2,WKID).X$W_GPNT_X	! NE (cursor)
	            XY(3).X$W_GPNT_Y = XRF(2,WKID).X$W_GPNT_Y
	            XY(2).X$W_GPNT_X = XY(1).X$W_GPNT_X	! NW
	            XY(2).X$W_GPNT_Y = XY(3).X$W_GPNT_Y
	            XY(4).X$W_GPNT_X = XY(3).X$W_GPNT_X	! SE
	            XY(4).X$W_GPNT_Y = XY(1).X$W_GPNT_Y
	            XY(5).X$W_GPNT_X = XY(1).X$W_GPNT_X	! back to SW
	            XY(5).X$W_GPNT_Y = XY(1).X$W_GPNT_Y
	            CALL X$DRAW_LINES(XDISPLAY,
     &			XWINDOW(RFDEV(WKID)),XGC(3,RFDEV(WKID)),
     &			XY,5,X$C_COORD_MODE_ORIGIN)
	            GOTO 10
	         ENDIF
	         PTR = 1
	         I = 2
	      ELSE
	         PTR = 2
	         I = 1
	      ENDIF
	      IF (RFRUB(2)) I = I+1
	      CALL X$DRAW_LINES(XDISPLAY,
     &			XWINDOW(RFDEV(WKID)),XGC(3,RFDEV(WKID)),
     &			XRF(PTR,WKID),I,X$C_COORD_MODE_ORIGIN)
	   ELSE
C
C no rubber lines, so if no other refresh or blinking cursor,
C then may as well cancel the timer
	      IF (RFPTR(1).EQ.0.AND.RFPTR(2).EQ.0.AND.
     &			.NOT.(CURSON.AND.CURBNK)) TMRON = .FALSE.
	   ENDIF
10	CONTINUE
C
C update by flushing out X buffers
	CALL X$FLUSH(XDISPLAY)
C
	RFON = .NOT.RFON
C
	AST_ON = AST_ON-1
	RETURN
	END
C
C***********************************************************************
C
	OPTIONS	/CHECK=NOOVERFLOW
	SUBROUTINE	GUIS_DRWCUR
C
**	MODULE	GUIS_DRWCUR
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Draw the refresh cursor
C
	IMPLICIT NONE
C
	INCLUDE	'SYS$LIBRARY:DECW$XLIBDEF'
***	COMMON/GKSDECW/
***	COMMON/GKSDAT2/
***	COMMON/GKSRF/
C
C workspace
	RECORD/X$POINT/XY(4)
	INTEGER*2	SIZE(2)
	INTEGER*2	X,Y
	INTEGER		WKID
	INTEGER		DEV
C
	AST_ON = AST_ON+1
C
	IF (CURTYP.EQ.0) THEN
	   SIZE(1) = 15
	ELSEIF (CURTYP.EQ.1) THEN
	   SIZE(1) = 300
	ENDIF
C
	DO 10 WKID=1,WSMAX
	   IF (.NOT.RFCURS(WKID)) GOTO 10
	   DEV = RFDEV(WKID)
	   IF (UPTRN(DEV)) CALL GUPTRN(DEV)
	   IF (CURTYP.LE.2) THEN
	      IF (CURTYP.EQ.2) THEN
	         IF (CURARG(1).LT.0) THEN
	            SIZE(1) = NINT(-CURARG(1)/2.0)
	         ELSE
	            SIZE(1) = NINT(CURARG(1)*SCALEX(DEV)/GNOMLW/2.0)
	         ENDIF
	      ENDIF
	      XY(1).X$W_GPNT_X = XRF(2,WKID).X$W_GPNT_X-SIZE(1)
	      XY(2).X$W_GPNT_X = XRF(2,WKID).X$W_GPNT_X+SIZE(1)
	      XY(1).X$W_GPNT_Y = XRF(2,WKID).X$W_GPNT_Y
	      XY(2).X$W_GPNT_Y = XY(1).X$W_GPNT_Y
	      XY(3).X$W_GPNT_X = XRF(2,WKID).X$W_GPNT_X
	      XY(4).X$W_GPNT_X = XY(3).X$W_GPNT_X
	      XY(3).X$W_GPNT_Y = XRF(2,WKID).X$W_GPNT_Y-SIZE(1)
	      XY(4).X$W_GPNT_Y = XRF(2,WKID).X$W_GPNT_Y+SIZE(1)
	      CALL X$DRAW_SEGMENTS(XDISPLAY,
     &		XWINDOW(DEV),XGC(3,DEV),XY,2)
	      IF (CURTYP.EQ.2.AND.CURARG(2).NE.0.0) THEN
C
C draw second cross - perhaps blank out centre of first one
	         IF (CURARG(1).LT.0) THEN
	            SIZE(1) = NINT(CURARG(2)/GNOMLW/2000.0)
	         ELSE
	            SIZE(1) = NINT(CURARG(2)*SCALEX(DEV)/GNOMLW/2.0)
	         ENDIF
	         XY(1).X$W_GPNT_X = XRF(2,WKID).X$W_GPNT_X-SIZE(1)
	         XY(2).X$W_GPNT_X = XRF(2,WKID).X$W_GPNT_X+SIZE(1)
	         XY(1).X$W_GPNT_Y = XRF(2,WKID).X$W_GPNT_Y
	         XY(2).X$W_GPNT_Y = XY(1).X$W_GPNT_Y
	         XY(3).X$W_GPNT_X = XRF(2,WKID).X$W_GPNT_X
	         XY(4).X$W_GPNT_X = XY(3).X$W_GPNT_X
	         XY(3).X$W_GPNT_Y = XRF(2,WKID).X$W_GPNT_Y-SIZE(1)
	         XY(4).X$W_GPNT_Y = XRF(2,WKID).X$W_GPNT_Y+SIZE(1)
	         CALL X$DRAW_SEGMENTS(XDISPLAY,
     &			XWINDOW(DEV),XGC(3,DEV),XY,2)
	      ENDIF
	   ELSE
	      IF (CURARG(1).LT.0) THEN
	         SIZE(1) = NINT(-CURARG(1)/GNOMLW/1000.0)
	         SIZE(2) = NINT(CURARG(2)/GNOMLW/1000.0)
	      ELSE
	         SIZE(1) = NINT(CURARG(1)*SCALEX(DEV)/GNOMLW)
	         SIZE(2) = NINT(CURARG(2)*SCALEY(DEV)/GNOMLW)
	      ENDIF
	      X = XRF(2,WKID).X$W_GPNT_X-SIZE(1)/2
	      Y = XRF(2,WKID).X$W_GPNT_Y-SIZE(2)/2
	      IF (CURTYP.EQ.3) THEN
	         CALL X$DRAW_ARC(XDISPLAY,
     &		   XWINDOW(DEV),XGC(3,DEV),X,Y,SIZE(1),SIZE(2),0,360*64)
	      ELSE
	         CALL X$DRAW_RECTANGLE(XDISPLAY,
     &		   XWINDOW(DEV),XGC(3,DEV),X,Y,SIZE(1),SIZE(2))
	      ENDIF
	   ENDIF
10	CONTINUE
C
	RFCON = .NOT.RFCON
C
	AST_ON = AST_ON-1
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GUIS_RFBUF(WKID,N,XY)
C
**	MODULE	GUIS_RFBUF
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C To buffer refresh picture
C
	IMPLICIT NONE
C
	INCLUDE	'SYS$LIBRARY:DECW$XLIBDEF'
***	COMMON/GKSDECW/
***	COMMON/GKSDAT2/
***	COMMON/GKSRF/
C
C arguments
	INTEGER	WKID			! 1 or 2
	INTEGER	N			! number of points
	RECORD/X$POINT/XY(N)		! coordinates
C
C workspace
	INTEGER	I,PTS
C
	IF (RFPTR(WKID).LT.RFMAX) THEN
	   PTS = MIN(N,XRFBUFM-RFBUFP(WKID))
	   IF (PTS.GT.0) THEN
	      RFPTR(WKID) = RFPTR(WKID)+1
	      RFPTS(RFPTR(WKID),WKID) = PTS
	      DO 10 I=1,PTS
	         XRFBUF(RFBUFP(WKID)+I,WKID).X$W_GPNT_X = XY(I).X$W_GPNT_X
	         XRFBUF(RFBUFP(WKID)+I,WKID).X$W_GPNT_Y = XY(I).X$W_GPNT_Y
10	      CONTINUE
	      RFBUFP(WKID) = RFBUFP(WKID)+PTS
	   ENDIF
	ENDIF
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GUIS_CSWT(X,Y)
C
**	MODULE	GUIS_CSWT
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C To write refresh cursor position
C
	IMPLICIT NONE
C
	INCLUDE	'SYS$LIBRARY:DECW$XLIBDEF'
***	COMMON/GKSDECW/
***	COMMON/GKSDAT2/
***	COMMON/GKSRF/
C
C arguments
	REAL	X,Y			! coordinates
C
C workspace
	REAL	DX,DY			! device coordinates
	INTEGER	I
C
	DO 10 I=1,WSMAX
	   IF (.NOT.RFCURS(I)) GOTO 10
	   CALL GKSW2D(I,X,Y,DX,DY)
	   CALL GKSD2P(I,DX,DY,XRF(2,I))
10	CONTINUE
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GUIS_CURSEL(TYP,ON,BLINK,ARG)
C
**	MODULE	GUIS_CURSEL
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C To set cursor size, whether on, and whether blinking
C
	IMPLICIT NONE
C
***	COMMON/GKSRF/
C
C arguments
	INTEGER	TYP	! 0 x, 1 X, 2 cross, 3 circ, 4 rect
	LOGICAL	ON
	LOGICAL	BLINK
	REAL	ARG(*)
C
	CURTYP = TYP
	CURSON = ON
	CURBNK = BLINK
	IF (CURTYP.GT.1) THEN
	   CURARG(1) = ARG(1)
	   CURARG(2) = ARG(2)
	ENDIF
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GUIS_CURCOL(COL)
C
**	MODULE	GUIS_CURCOL
**	IDENT	19AU96
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C To set cursor colour
C
	IMPLICIT NONE
C
	INCLUDE	'SYS$LIBRARY:DECW$XLIBDEF'
***	COMMON/GKSDECW/
***	COMMON/GKSDAT2/
***	COMMON/GKSRF/
C
C arguments
	INTEGER	COL
C
C workspace
	INTEGER	MASK
	INTEGER	WKID,DEV
C
	AST_ON = AST_ON+1
	DO 10 WKID=1,WSMAX
	   IF (.NOT.RFCURS(WKID)) GOTO 10
	   IF (COL.EQ.RFCOL(WKID)) GOTO 10
	   RFCOL(WKID) = COL
	   DEV = RFDEV(WKID)
	   IF (XDECOMP) THEN
	      MASK =
     &		(ISHFT(COL,XOFF(1,DEV)).AND.XMASKS(1,DEV)) .OR.
     &		(ISHFT(COL,XOFF(2,DEV)).AND.XMASKS(2,DEV)) .OR.
     &		(ISHFT(COL,XOFF(3,DEV)).AND.XMASKS(3,DEV))
	   ELSE
	      MASK = ISHFT(COL,XOFF(1,DEV)).AND.XMASK(DEV)
	   ENDIF
	   IF (MASK.EQ.0.AND.COL.NE.0) MASK = XMASK(DEV)
	   CALL X$SET_PLANE_MASK(XDISPLAY,XGC(3,DEV),MASK)
10	CONTINUE
	AST_ON = AST_ON-1
C
999	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GUIS_SETRUB(RUBLIN,RUBARR,WINBOX)
C
**	MODULE	GUIS_SETRUB
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C To set rubber band lines
C
	IMPLICIT NONE
C
	INCLUDE	'SYS$LIBRARY:DECW$XLIBDEF'
***	COMMON/GKSDECW/
***	COMMON/GKSDAT2/
***	COMMON/GKSRF/
C
C arguments
	LOGICAL*1 RUBLIN(2)		! lines on?
	REAL	RUBARR(2,2)		! coordinates
	LOGICAL	WINBOX			! want window box?
C
C workspace
	REAL	DX,DY			! device coordinates
C
	RFRUB(1) = RUBLIN(1)
	RFRUB(2) = RUBLIN(2)
	RFWIN = WINBOX
	IF (RFRUB(1)) THEN
	   CALL GKSW2D(1,RUBARR(1,1),RUBARR(2,1),DX,DY)
	   CALL GKSD2P(1,DX,DY,XRF(1,1))
	   CALL GKSW2D(2,RUBARR(1,1),RUBARR(2,1),DX,DY)
	   CALL GKSD2P(2,DX,DY,XRF(1,2))
	ENDIF
	IF (RFRUB(2)) THEN
	   CALL GKSW2D(1,RUBARR(1,2),RUBARR(2,2),DX,DY)
	   CALL GKSD2P(1,DX,DY,XRF(3,1))
	   CALL GKSW2D(2,RUBARR(1,2),RUBARR(2,2),DX,DY)
	   CALL GKSD2P(2,DX,DY,XRF(3,2))
	ENDIF
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	SET_POINTER_VISIBILITY(ON,PX,PY)
C
**	MODULE	SET_POINTER_VISIBILITY
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C To set visibility of mouse pointer in a particular region
C (in particular, to turn it off)
C The PX,PY arguments do nothing in this X-Windows version.
	IMPLICIT NONE
C
	INCLUDE	'SYS$LIBRARY:DECW$XLIBDEF'
***	COMMON/GKSDECW/
***	COMMON/GKSDAT2/
***	COMMON/GKSESL/
C
C Arguments:
	LOGICAL	ON			! visible?
	REAL	PX(2)			! X coords
	REAL	PY(2)			! Y coords
C
C Workspace
	REAL	COL
	INTEGER	SHAPE,MASK
	RECORD/X$COLOR/XCOL
C
	AST_ON = AST_ON+1
	IF (ON) THEN
	   CALL X$UNDEFINE_CURSOR(XDISPLAY,XWINDOW(1))
	ELSE
C
C We define a minimal single pixel cursor, with a mask so that
C even the single pixel is invisible.
	   IF (XCURSOR.EQ.0) THEN
	      XCOL.X$W_COLR_RED = 0
	      XCOL.X$W_COLR_GREEN = 0
	      XCOL.X$W_COLR_BLUE = 0
	      SHAPE = X$CREATE_PIXMAP(XDISPLAY,XWINDOW(1),1,1,1)
	      MASK = X$CREATE_PIX_FROM_BITMAP_DATA(XDISPLAY,XWINDOW(1),
     &				0,1,1,0,0,1)
	      XCURSOR = X$CREATE_PIXMAP_CURSOR(XDISPLAY,SHAPE,MASK,
     &		XCOL,XCOL,0,0)
	      CALL X$FREE_PIXMAP(XDISPLAY,SHAPE)
	      CALL X$FREE_PIXMAP(XDISPLAY,MASK)
	   ENDIF
	   CALL X$DEFINE_CURSOR(XDISPLAY,XWINDOW(1),XCURSOR)
	ENDIF
	AST_ON = AST_ON-1
C
	RETURN
	END
