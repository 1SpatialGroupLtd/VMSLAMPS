C
C***********************************************************************
C
C	OUTPUT FUNCTIONS
C	================
C
	SUBROUTINE	GPL(N,PX,PY)
C
**	MODULE	GPL
**	IDENT	19DE01
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					SCM	27-July-1983
C
C POLYLINE
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER N			! number of points
	REAL	PX(N)			! X coords of points in WC
	REAL	PY(N)			! Y coords of points in WC
C
***	COMMON/GKSDAT2/
***	COMMON/GKSESL/
***	COMMON/GKSRF/
C
C Functions:
	LOGICAL	GKCLIP			! clips a straight line to
					! rectangular boundaries
C
C Internal variables:
	INTEGER	I			! loop variable
	REAL	PX1,PX2,PY1,PY2		! X and Y coordinates
	REAL	CURX,CURY		! current position
	INTEGER	DEV
C
	IF (GKS_INUSE) CALL GKS_CALL(%VAL(GKS_ADDR(XGPL)))
C
	GKSERR	= 0
C
	IF (N.LT.2) THEN
	   GKSERR = 100
	   GOTO 9999
	ENDIF
C
	DO 100 DEV=1,WSMAX
C
C Is this workstation active?
	IF (.NOT.WSACT(DEV)) GOTO 100
C
C Refresh cooperation with LITES2 here - refresh is drawn on
C workstations 1 and 2.
C LITES2 performs stored drawing on 3
C and 4 while still in refresh mode, so allow this.
C
C Make sure transformation is up to date
	IF (UPTRN(DEV)) CALL GUPTRN(DEV)
C
C Is everything clipped ?
	IF (CLPALL(DEV)) GOTO 100
C
C Make sure polyline attributes are up to date
	IF (UPLIN(DEV)) CALL GUPLIN(DEV)
C
C unset current position to force move
	CURX = 1E38
	CURY = 1E38
C
C Loop for each segment of this polyline.
	DO 90 I = 1, N-1
	   PX1 = PX(I)
	   PY1 = PY(I)
	   PX2 = PX(I+1)
	   PY2 = PY(I+1)
	   IF (ENCLIP) THEN
	      IF (GKCLIP(DEV,PX1,PY1,PX2,PY2)) THEN! completely clipped
	         CALL GKS_FLUSH(DEV,%VAL(XBUF_ADDR))	! flush out previous
	         GOTO 90
	      ENDIF
	   ENDIF
C transform World Coordinates to Workstation Device Coordinates
	   PX1 = (PX1*SCALEX(DEV))+OFFX(DEV)
	   PX2 = (PX2*SCALEX(DEV))+OFFX(DEV)
	   PY1 = (PY1*SCALEY(DEV))+OFFY(DEV)
	   PY2 = (PY2*SCALEY(DEV))+OFFY(DEV)
	   IF (PX1.NE.CURX.OR.PY1.NE.CURY) THEN
	      CALL GKS_FLUSH(DEV,%VAL(XBUF_ADDR)) ! flush out previous
	      CALL GKS_BUFFER(DEV,PX1,PY1,%VAL(XBUF_ADDR)) ! buffer start point
	   ENDIF
	   CALL GKS_BUFFER(DEV,PX2,PY2,%VAL(XBUF_ADDR))
	   CURX = PX2				! update current position
	   CURY = PY2
90	CONTINUE
	CALL GKS_FLUSH(DEV,%VAL(XBUF_ADDR))	! output last bit
100	CONTINUE
C
9999	RETURN
	END
C
C***********************************************************************
C
C	OUTPUT ATTRIBUTES (Workstation independent primitive attributes)
C	=================
C
C
	SUBROUTINE	GSPLI(INDEX)
C
**	MODULE	GSPLI
**	IDENT	29FE84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					SCM	27-July-1983
C
C SET POLYLINE INDEX
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	INDEX			! polyline index
C
***	COMMON/GKSDAT2/
***	COMMON/GKSESL/
C
C workspace
	INTEGER	DEV
C
	GKSERR	= 0			! no errors yet
	IF (INDEX .LT. 1 .OR. INDEX .GT. PLMAX) GOTO 10
	IF (INDEX .EQ.PLIND) GOTO 20	! if current already, ignore
	PLIND = INDEX			! set it to current index
	DO 5 DEV=1,WSMAX
	   UPLIN(DEV) = .TRUE.		! attributes need updating
5	CONTINUE
	GOTO 20
C
10	GKSERR = 60			! polyline index is invalid
C
20	RETURN
C
	END
C
C***********************************************************************
C
	SUBROUTINE	GSLN(LTYPE)
C
**	MODULE	GSLN
**	IDENT	26AP84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Clarke Brunt	26-April-1984
C
C SET LINETYPE
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	LTYPE			! linetype
C
***	COMMON/GKSDAT2/
***	COMMON/GKSESL/
C
C workspace
	INTEGER	DEV
C
	IF (GKS_INUSE) CALL GKS_CALL(%VAL(GKS_ADDR(XGSLN)))
C
	GKSERR = 0
	IF (LTYPE.LE.0) GOTO 10
	ILTYPE = LTYPE
	DO 5 DEV=1,WSMAX
	   UPLIN(DEV) = .TRUE.		! attributes need updating
5	CONTINUE
	GOTO 20
10	GKSERR = 62			! linetype .LE. 0
20	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GSLWSC(LWIDTH)
C
**	MODULE	GSLWSC
**	IDENT	26AP84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Clarke Brunt	26-April-1984
C
C SET LINEWIDTH SCALE FACTOR
C
	IMPLICIT NONE
C
C Arguments:
	REAL	LWIDTH			! linewidth scale factor
C
***	COMMON/GKSDAT2/
***	COMMON/GKSESL/
C
C workspace
	INTEGER	DEV
C
	IF (GKS_INUSE) CALL GKS_CALL(%VAL(GKS_ADDR(XGSLWSC)))
C
	GKSERR = 0
	IF (LWIDTH.LE.0.0) GOTO 10
	ILWID = LWIDTH
	DO 5 DEV=1,WSMAX
	   UPLIN(DEV) = .TRUE.		! attributes need updating
5	CONTINUE
	GOTO 20
10	GKSERR = 90			! linewidth scale factor .LE. 0
20	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GSPLCI(COLI)
C
**	MODULE	GSPLCI
**	IDENT	26AP84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Clarke Brunt	26-April-1984
C
C SET POLYLINE COLOUR INDEX
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	COLI			! polyline colour index
C
***	COMMON/GKSDAT2/
***	COMMON/GKSESL/
C
C workspace
	INTEGER	DEV
C
	IF (GKS_INUSE) CALL GKS_CALL(%VAL(GKS_ADDR(XGSPLCI)))
C
	GKSERR = 0
	IF (COLI.LT.0) GOTO 10
	ICOLI = COLI
	DO 5 DEV=1,WSMAX
	   UPLIN(DEV) = .TRUE.		! attributes need updating
5	CONTINUE
	GOTO 20
10	GKSERR = 85			! colour index .LT. 0
20	RETURN
	END
C
C***********************************************************************
C
C	WORKSTATION ATTRIBUTES (Representations)
C	========================================
C
C
	SUBROUTINE	GSPLR(WKID,PLI,LTYPE,LWIDTH,COLI)
C
**	MODULE	GSPLR
**	IDENT	29FE84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					SCM	27-Jul-1983
C Colour added					PGH	29-Feb-1984
C
C SET POLYLINE REPRESENTATION
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	WKID			! workstation-identifier
	INTEGER	PLI			! polyline index
	INTEGER	LTYPE			! linetype
	REAL	LWIDTH			! line width scale factor
	INTEGER	COLI			! colour index
C
***	COMMON/GKSDAT2/
***	COMMON/GKSESL/
C
C w/s
	INTEGER	DEV
C
C function
	INTEGER	GETDEV
C
	GKSERR = GETDEV(DEV,WKID)
	IF (GKSERR.NE.0) GOTO 9999
	IF (DEV.GT.WSMAX) GOTO 9999
	IF (PLI .LT. 1 .OR. PLI .GT. PLMAX ) GOTO 10
	IF (LTYPE .LE. 0) GOTO 20
	IF (LWIDTH .LE. 0) GOTO 30
	IF (COLI .LT. 0 ) GOTO 40
	PLTYPE(PLI,DEV) = LTYPE		! store values in bundle table
	PLWDTH(PLI,DEV) = LWIDTH
	PLCOL(PLI,DEV)  = COLI
	IF (PLI .NE. PLIND) GOTO 9999	! apply if current index
	UPLIN(DEV) = .TRUE.		! attributes need updating
	GOTO 9999
C
10	GKSERR	= 60			! polyine index is invalid
	GOTO 9999
20	GKSERR	= 62			! linetype is invalid
	GOTO 9999
30	GKSERR	= 90			! linewidth scale factor invalid
	GOTO 9999
40	GKSERR	= 86			! colour index is invalid
C
9999	RETURN
C
	END
C
C *********************************************************************
C
C	Polyline INQUIRY FUNCTIONS
C	==========================
C
	SUBROUTINE GQPLF(
     &		WTYPE,N,ERRIND,NLT,LT,NLW,NOMLW,RLWMIN,RLWMAX,NPPLI)
C
***	MODULE	GQPLF
***	IDENT	16MY84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					CCB	16-May-1984
C
C INQUIRE POLYLINE FACILITIES
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	WTYPE		! Workstation type
	INTEGER	N		! list element requested
	INTEGER	ERRIND		! Error indicator
	INTEGER NLT		! number of available linetypes
	INTEGER	LT		! N'th element of available linetypes
	INTEGER NLW		! number of available linewidths
	REAL	NOMLW		! nominal linewidth (DC)
	REAL	RLWMIN,RLWMAX	! range of linewidths
	INTEGER	NPPLI		! number of predefined polyline indices
C
***	COMMON/GKSDAT2/		! GKS data structures
***	COMMON/GKSESL/
C
C ignore WTYPE for now and return info for first open workstation
C
	GKSERR = 0		! inquiry functions can't gen errors
	ERRIND = 0		! only give indications of them !!
C
C this is a grey area regarding the linewidth on Sigma
	NLT = 4			! number of linetypes
	LT = N			! just return N as N'th type
	NLW = 0			! continuous range of linewidths
	NOMLW = GNOMLW		! nominal linewidth in DC
	RLWMIN = NOMLW		! also the minimum
	RLWMAX = 10.0*NOMLW	! rather arbitrary maximum
	NPPLI = PLMAX
C
999	RETURN
	END
C
C
C***********************************************************************
C
	SUBROUTINE GQLN(ERRIND,LTYPE)
C
***	MODULE	GQLN
***	IDENT	01MA84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					CCB	1-May-1984
C
C INQUIRE LINETYPE
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	ERRIND		! Error indicator
	INTEGER	LTYPE		! line type
C
***	COMMON/GKSDAT2/		! GKS data structures
***	COMMON/GKSESL/
C
	GKSERR = 0		! inquiry functions can't gen errors
	ERRIND = 0		! only give indications of them !!
C
	LTYPE = ILTYPE
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE GQLWSC(ERRIND,LWIDTH)
C
***	MODULE	GQLWSC
***	IDENT	01MA84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					CCB	1-May-1984
C
C INQUIRE LINE WIDTH SCALE FACTOR
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	ERRIND		! Error indicator
	REAL	LWIDTH		! line width scale factor
C
***	COMMON/GKSDAT2/		! GKS data structures
***	COMMON/GKSESL/
C
	GKSERR = 0		! inquiry functions can't gen errors
	ERRIND = 0		! only give indications of them !!
C
	LWIDTH = ILWID
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE GQPLCI(ERRIND,COLI)
C
***	MODULE	GQPLCI
***	IDENT	01MA84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					CCB	1-May-1984
C
C INQUIRE POLYLINE COLOUR INDEX
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	ERRIND		! Error indicator
	INTEGER	COLI		! polyline colour index
C
***	COMMON/GKSDAT2/		! GKS data structures
***	COMMON/GKSESL/
C
	GKSERR = 0		! inquiry functions can't gen errors
	ERRIND = 0		! only give indications of them !!
C
	COLI = ICOLI
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE GUPLIN(DEV)
C
***	MODULE	GUPLIN
***	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Clarke Brunt	26-April-1984
C Take account of need to set UPFA	Tony J Ibbs	27-Nov-1984
C
C Update the polyline attributes
C
	IMPLICIT NONE
C
C argument
	INTEGER	DEV
C
C local variables
	INTEGER	NLTYPE,NCOLI,NLWID,NMASK
	INTEGER	NSYM,NCAP,NJOIN
	LOGICAL	FST
	INTEGER	GC_MASK
C
	INCLUDE	'SYS$LIBRARY:DECW$XLIBDEF'
***	COMMON/GKSDECW/
***	COMMON/GKSDAT2/		! GKS data structures
C
	INTEGER	XJOIN(0:2)/X$C_JOIN_MITER,X$C_JOIN_ROUND,X$C_JOIN_BEVEL/
	INTEGER	XCAP(0:2)/X$C_CAP_BUTT,X$C_CAP_ROUND,X$C_CAP_PROJECTING/
C
	IF (GASF(1).EQ.GBUNDL) THEN
	   NLTYPE = PLTYPE(PLIND,DEV)
	ELSE
	   NLTYPE = ILTYPE
	ENDIF
C
	IF (GASF(2).EQ.GBUNDL) THEN
	   NLWID = NINT(PLWDTH(PLIND,DEV))
	ELSE
	   NLWID = NINT(ILWID)
	ENDIF
	IF (NLWID.LE.1) NLWID = 0
C
	IF (GASF(3).EQ.GBUNDL) THEN
	   NCOLI = PLCOL(PLIND,DEV)
	ELSE
	   NCOLI = ICOLI
	ENDIF
C
	FST = .FALSE.
10	FST = .NOT.FST
	IF (NCOLI.NE.0) THEN			! not background
	   IF (POFF(DEV).NE.0) NCOLI = ISHFT(NCOLI,POFF(DEV))! offset
	   NCOLI = NCOLI.AND.PSEL(DEV).AND.USED_PLANES(DEV)  ! mask
	   IF (NCOLI.GT.MAXCOL(DEV).OR.NCOLI.EQ.0) THEN
C
C First time, try again with colour 1, otherwise just use 1
	      NCOLI = 1
	      IF (FST) GOTO 10
	   ENDIF
	   IF (NCOLI.EQ.0) NCOLI = 1	! don't want background
	ENDIF
C
	NSYM = ISYM-1
	NJOIN = NSYM/10
	NCAP = NSYM - NJOIN*10
C
	IF (NJOIN.LT.0.OR.NJOIN.GT.2) NJOIN = 0
	IF (NCAP.LT.0.OR.NCAP.GT.2) NCAP = 0
C
	GC_MASK = 0
C
	IF (NLTYPE.NE.CLTYPE(DEV)) THEN
	   CLTYPE(DEV) = NLTYPE
	ENDIF
C
	IF (NLWID.NE.CLWID(DEV)) THEN
	   CLWID(DEV) = NLWID
	   XGCV.X$L_GCVL_LINE_WIDTH = NLWID
	   GC_MASK = GC_MASK.OR.X$M_GC_LINE_WIDTH
	   IF (NLWID.NE.FALWID(DEV)) UPFA(DEV) = .TRUE.	! check fill area
	ENDIF
C
C make sure that graphical context is updated when last thing drawn was
C a rendered text
C
	IF ((NCOLI.NE.CCOLI(DEV)) .OR.
     &	    (XUSE_TEXT_RENDER .AND. (XLAST_GC(DEV) .NE. 1))) THEN
	   CCOLI(DEV) = NCOLI
	   XGCV.X$L_GCVL_FOREGROUND = ISHFT(NCOLI,XOFF(1,DEV))
	   IF (XDECOMP) THEN
	      XGCV.X$L_GCVL_FOREGROUND = XGCV.X$L_GCVL_FOREGROUND .OR.
     &		ISHFT(NCOLI,XOFF(2,DEV)) .OR. ISHFT(NCOLI,XOFF(3,DEV)) 
	   ENDIF
	   GC_MASK = GC_MASK.OR.X$M_GC_FOREGROUND
	   UPFA(DEV)  = .TRUE.		! and fill area update
	   UPTX(DEV)  = .TRUE.		! and text update
	ENDIF
C
	NMASK = PSEL(DEV)
	IF (XDECOMP) THEN
	   NMASK =
     &		(ISHFT(NMASK,XOFF(1,DEV)).AND.XMASKS(1,DEV)) .OR.
     &		(ISHFT(NMASK,XOFF(2,DEV)).AND.XMASKS(2,DEV)) .OR.
     &		(ISHFT(NMASK,XOFF(3,DEV)).AND.XMASKS(3,DEV))
	ELSE
	   NMASK = ISHFT(NMASK,XOFF(1,DEV)).AND.XMASK(DEV)
	ENDIF
	IF (NMASK.NE.CMASK(DEV)) THEN
	   CMASK(DEV) = NMASK
	   XGCV.X$L_GCVL_PLANE_MASK = NMASK
	   GC_MASK = GC_MASK.OR.X$M_GC_PLANE_MASK
	ENDIF
C
	IF (NJOIN.NE.CJOIN(DEV)) THEN
	   CJOIN(DEV) = NJOIN
	   XGCV.X$L_GCVL_JOIN_STYLE = XJOIN(NJOIN)
	   GC_MASK = GC_MASK.OR.X$M_GC_JOIN_STYLE
	ENDIF
C
	IF (NCAP.NE.CCAP(DEV)) THEN
	   CCAP(DEV) = NCAP
	   XGCV.X$L_GCVL_CAP_STYLE = XCAP(NCAP)
	   GC_MASK = GC_MASK.OR.X$M_GC_CAP_STYLE
	ENDIF
C
	IF (GC_MASK.NE.0) THEN
	  AST_ON = AST_ON+1
	  CALL X$CHANGE_GC(XDISPLAY,XGC(1,DEV),GC_MASK,XGCV)
	  AST_ON = AST_ON-1
	  XLAST_GC(DEV) = 1
	ENDIF
C
	UPLIN(DEV) = .FALSE.		! polyline now up to date
	RETURN
	END
C
C***********************************************************************
C
C	GDP PRIMITIVE
C	=============
C
	SUBROUTINE	GGDP(N,PX,PY,ID)
C
**	MODULE	GGDP
**	IDENT	24SE96
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Clarke Brunt	24-Sep-1996
C
C GENERALISED DRAWING PRIMITIVE
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER N			! number of points
	REAL	PX(N)			! X coords of points in WC
	REAL	PY(N)			! Y coords of points in WC
	INTEGER	ID			! GDP identifier
C
***	COMMON/GKSDAT2/
***	COMMON/GKSESL/
C
	IF (GKS_INUSE) CALL GKS_CALL(%VAL(GKS_ADDR(XGGDP)))
C
C we don't support this ourself
	GKSERR	= 0
C
	RETURN
	END
