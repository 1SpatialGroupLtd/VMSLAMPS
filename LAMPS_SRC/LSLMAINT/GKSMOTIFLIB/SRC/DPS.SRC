
C
	SUBROUTINE GKS_SET_DPS_FONT(DEV,LOGNAM)
C
***	MODULE	GKS_SET_DPS_FONT
***	IDENT	21DE01
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Clarke Brunt	28-Oct-1992
C
C Set list of fonts from logical name
C
	IMPLICIT NONE
C
	INCLUDE	'($SSDEF)'
	INCLUDE	'($LNMDEF)'                                                
 	INCLUDE	'LSL$CMNLSL:TXTC.CMN'
	INCLUDE	'DDSC.PAR'
	INCLUDE	'SYS$LIBRARY:DECW$XLIBDEF'
***	COMMON/GKSDECW/
C
C Arguments
	INTEGER		DEV
	CHARACTER*(*)	LOGNAM
C
C Functions
	INTEGER		SYS$TRNLNM
	INTEGER		STR$POSITION
	LOGICAL		RDLONG,RDCHS
	INTEGER		GETFILNAM
	INTEGER		TRNALL
	INTEGER		GKS_C_FIND_DEFAULT_FONT
C
C workspace
	STRUCTURE	/LNMITM/
	   INTEGER*2	BUFLEN/0/
	   INTEGER*2	ITMCOD/0/
	   INTEGER*4	BUFADR/0/
	   INTEGER*4	RETADR/0/
	END STRUCTURE
	RECORD	/LNMITM/ ITMLST(4)
C
	RECORD	/DDSC/	FFILE,DEFFNT,TMPLOG
C
	INTEGER		OK,IND,MAXIND,FNUM,DEFLEN,STATUS
	LOGICAL		USELSL
	INTEGER		FLEN
	BYTE		CH
	INTEGER*4	FDESC(2)
C
	XDEFAULT_FONT = -1
C
C get the default font; either from the logical name lsl$decw_default_font
C or Courier
C
	CALL STR$GET1_DX(MAX_TXTLIM,DEFFNT)
	TXTPTR = TXTLIM
	IF ((TRNALL('LSL$DECW_DEFAULT_FONT',TXTDSC).EQ.SS$_NORMAL)) THEN
C
C TRNALL pads the translation with spaces - truncate at the first one
C
	   DEFLEN = STR$POSITION(TXTDSC,' ')
	   IF (DEFLEN .GT. 0) THEN
	      TXTBUF(DEFLEN) = 0
	      TXTPTR = DEFLEN - 1
	   ENDIF
	   CALL STR$COPY_DX(DEFFNT,TXTDSC)
	ELSE
	   CALL STR$COPY_DX(DEFFNT,'Courier')
	ENDIF
C
C test if the logical name LSL$PS_FONT_METRICS is defined. If it
C is use it to look for AFM files, otherwise use SYS$PS_FONT_METRICS 
C
	TXTPTR = TXTLIM
	STATUS = TRNALL('LSL$PS_FONT_METRICS',TXTDSC)
	USELSL = (STATUS .EQ. SS$_NORMAL) .OR. 
     &	            (STATUS .EQ. SS$_RESULTOVF) 
C
	IND = 0
	ITMLST(1).BUFLEN = 4
	ITMLST(1).ITMCOD = LNM$_INDEX
	ITMLST(1).BUFADR = %LOC(IND)

	ITMLST(2).BUFLEN = MAX_TXTLIM
	ITMLST(2).ITMCOD = LNM$_STRING
	ITMLST(2).BUFADR = TXTDSC(2)
	ITMLST(2).RETADR = %LOC(TXTPTR)

	ITMLST(3).BUFLEN = 4
	ITMLST(3).ITMCOD = LNM$_MAX_INDEX
	ITMLST(3).BUFADR = %LOC(MAXIND)
C
10	OK = SYS$TRNLNM(LNM$M_CASE_BLIND,'LNM$FILE_DEV',LOGNAM,,ITMLST)
	IF (.NOT.OK) THEN
	   CALL WRITEF('Error translating %S',LOGNAM)
	   CALL LSL_PUTMSG(OK)
	   GOTO 999
	ENDIF
	IF (TXTPTR.NE.0) THEN
	   CALL BSLN
C
C try for a number - if not, then assume .PSFONTLIST file
	   IF (RDLONG(FNUM)) THEN
	      IF (IND.EQ.0) THEN
	         CALL BSLN
 	         CALL STR$GET1_DX(MAX_TXTLIM,FFILE)
	         FLEN = 0
	         OK = GETFILNAM( FFILE, FLEN, 'LSL$FRT:.PSFONTLIST', .TRUE.)
	         IF (.NOT.OK) THEN
	            CALL STR$FREE1_DX(FFILE)
	            CALL WRITEF('Bad PSFONTLIST file name in %S',LOGNAM)
	            CALL LSL_PUTMSG(OK)
	            GOTO 999
	         ENDIF
	         CALL STR$LEFT(FFILE,FFILE,FLEN)
	         CALL GKS_READ_FONT_LIST(DEV,FFILE,DEFFNT,USELSL)
	         CALL STR$FREE1_DX(FFILE)
 	         MAXIND = 0
	      ELSE
	         CALL WRITEF('Font number missing in %S',LOGNAM)
	      ENDIF
	   ELSE
C
C look for find procedure, and strip off outer { }
	      IF (RDCHS(CH)) GOTO 900
	      IF (CH.EQ.'{') THEN
	         IF (RDCHS(CH)) GOTO 900
100	         CH = TXTBUF(TXTPTR)
	         TXTPTR = TXTPTR-1
	         IF (CH.EQ.' '.OR.CH.EQ.9) GOTO 100
	         IF (CH.NE.'}') GOTO 900
	      ENDIF
	      FDESC(1) = TXTPTR-DCPTR+2
	      FDESC(2) = %LOC(TXTBUF(DCPTR-1))
	      IF (FDESC(1).LE.0) GOTO 900
	      CALL GKS_WRITE_DPS_FONT(
     &			DEV,FNUM,.FALSE.,
     &			0,	' ',
     &			FDESC(1),FDESC,
     &			0,	' ',
     &			0,	' ',
     &			0,	' ',
     &			1.0,	.FALSE.,
     &			.FALSE.,%VAL(0),
     &	                DEFFNT,USELSL)
	      GOTO 901
900	      CALL WRITEF('Font procedure missing in %S',LOGNAM)
901	      CONTINUE
	   ENDIF
	ENDIF
	IF (IND.LT.MAXIND) THEN
	   IND = IND+1
	   GOTO 10
	ENDIF
C
999	CONTINUE
C
C 	if no default font has been found yet, then use the first
C	one that has width information in it
C
	IF (XDEFAULT_FONT .LT. 0)
     &	   XDEFAULT_FONT = GKS_C_FIND_DEFAULT_FONT()
C
	CALL STR$FREE1_DX(DEFFNT)
	RETURN
	END
C
	SUBROUTINE GKS_READ_FONT_LIST(DEV,FILENAME,DEFFNT,USELSL)
C
***	MODULE	GKS_READ_FONT_LIST
***	IDENT	28OC92
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Clarke Brunt	28-Oct-1992
C
C Read .PSFONTLIST file
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE	'LSL$CMNLSL:READSTR.PAR'
	INCLUDE	'LSL$CMNLSL:CMDCOM.CMN'
	INCLUDE	'LSL$CMNLSL:EXPC.CMN'
	INCLUDE	'LSL$CMNLSL:TXTC.CMN'
	INCLUDE	'DDSC.PAR'
C
C Arguments
	INTEGER		DEV
	CHARACTER*(*)	FILENAME
	CHARACTER*(*)	DEFFNT
	LOGICAL		USELSL
C
C Functions
	INTEGER		FLROPN,FLRCLO,FLRLIN
	INTEGER		RDCOMM
	LOGICAL		RDCHS
	INTEGER		GETFILNAM
	INTEGER		READSTR
	INTEGER		LIB$GET_LUN
	INTEGER		LIB$FREE_LUN
	EXTERNAL	GKS_PSFONT_CMD_TABLE
C
C workspace
	RECORD	/DDSC/	FNAME,FINDPROC,NEWNAME,ENCOD,AFMFIL,HEADER
	INTEGER		FLEN,FINDLEN,NEWLEN,ENCLEN,AFMLEN,HEADLEN
C
	INTEGER		OK,ERROR
	BYTE		CH
	INTEGER		LUN
	INTEGER		CMD
	LOGICAL*1	SAV_NOMESS
	INTEGER		FNUM
	INTEGER		NEWNUM
	REAL		SCALE
	LOGICAL		KERN_PAIR
	LOGICAL		R_TO_L
	LOGICAL		ARABIC
	INTEGER*4	ARATAB
	INTEGER		SAVBUF
	INTEGER*2	SAVLEN,SAVDCP
	INTEGER		LINENO
	INTEGER		I
C
	SAV_NOMESS = NOMESS
	NOMESS = .FALSE.
	ARATAB = 0
C
C get a LUN to read the file on
	OK = LIB$GET_LUN(LUN)
	IF (.NOT.OK) THEN		! failed
	   CALL LSL_PUTMSG(OK)
	   GOTO 10000
	ENDIF
C
C open up the file (just give up on error)
	OK = FLROPN(LUN,FILENAME)	! open file
	IF (.NOT.OK) THEN
	   CALL WRITEF('Failed to open .PSFONTLIST file "%S"',FILENAME)
	   CALL LSL_PUTMSG(OK)
	   GOTO 9999
	ENDIF
	FNUM = 0
	LINENO = 0
C
50	OK =  FLRLIN(,,,ERROR) 	! read into TXTBUF
	LINENO = LINENO+1
	IF (.NOT.OK) THEN
	   IF (OK.EQ.LSL__EOF) GOTO 100	! end of file
	   CALL LSL_PUTMSG(OK)
	   CALL LSL_ADDMSG(ERROR)
	   GOTO 9998
	ENDIF
C
C we have a line - what is it ?
	CALL BSLN				! start of line
	IF (RDCHS(CH)) GOTO 50			! empty line
	IF (CH.EQ.'!') GOTO 50			! comment line
	CALL BSCH
	CMD = RDCOMM(GKS_PSFONT_CMD_TABLE)		! what is it ?
	IF (CMD.LE.0) GOTO 60			! error reading command.
C
	GOTO (100,200,300,400,500,600,700,800,900,1000), CMD
60	CALL WRITEF('Error in line %N of .PSFONTLIST file "%S"',
     &					LINENO,FILENAME)
	GOTO 50
C
C FONT n name (or EOF)
100	NEWNUM = INTARG(1)
	IF (FNUM.NE.0) THEN
	   IF (OK.NE.LSL__EOF) THEN
	      CALL LIB$GET_VM(TXTPTR,SAVBUF)
	      CALL SAVE_TXTC(%VAL(SAVBUF),SAVLEN,TXTPTR)
	      CALL DCPSAV(SAVDCP)
	   ENDIF
	   CALL GKS_WRITE_DPS_FONT(
     &			DEV,FNUM,KERN_PAIR,
     &			FLEN,	FNAME,
     &			FINDLEN,FINDPROC,
     &			NEWLEN,	NEWNAME,
     &			ENCLEN,	ENCOD,
     &			AFMLEN,	AFMFIL,
     &			SCALE, R_TO_L,
     &			ARABIC,	%VAL(ARATAB),
     &	                DEFFNT,USELSL)
	   IF (OK.NE.LSL__EOF) THEN
	      CALL RESTORE_TXTC(%VAL(SAVBUF),SAVLEN,SAVLEN)
	      CALL DCPSET(SAVDCP)
	      CALL LIB$FREE_VM(TXTPTR,SAVBUF)
	   ENDIF
	   FNUM = 0
	   CALL FLRSEL(LUN)
	ENDIF
	IF (OK.EQ.LSL__EOF) GOTO 9998
	SCALE = 1.0
	FINDLEN = 0
	NEWLEN = 0
	ENCLEN = 0
	CALL STR$FREE1_DX(ENCOD)	! free, so can append below
	KERN_PAIR = .FALSE.
	AFMLEN = 0
	R_TO_L = .FALSE.
	ARABIC = .FALSE.
	IF (NEWNUM.LE.0) THEN
	   CALL TTWSTR('Font number must be >0')
	   GOTO 60
	ENDIF
	IF (RDCHS(CH)) THEN
	   CALL WRITEF('Font name missing for font %N',NEWNUM)
	   GOTO 60
	ENDIF
	CALL BSCH
	FNUM = NEWNUM
	CALL STR$GET1_DX(TXTLIM,FNAME)
	FLEN = READSTR(FNAME,,ON_SPACE)
	CALL STR$LEFT(FNAME,FNAME,FLEN)
	GOTO 50
C
C FIND string
200	IF (FNUM.EQ.0) GOTO 9950
	IF (RDCHS(CH)) THEN
	   CALL WRITEF('Font FIND procedure missing for font %N',FNUM)
	   GOTO 60
	ENDIF
	CALL BSCH
	CALL STR$GET1_DX(TXTLIM,FINDPROC)
	FINDLEN = READSTR(FINDPROC)
	CALL STR$LEFT(FINDPROC,FINDPROC,FINDLEN)
	GOTO 50
C
C SCALE fac
300	IF (FNUM.EQ.0) GOTO 9950
	IF (REALAR(1).LE.0) THEN
	   CALL WRITEF('Font SCALE must be >0 for font %N',FNUM)
	   GOTO 60
	ENDIF
	SCALE = REALAR(1)
	GOTO 50
C
C NEWNAME name
400	IF (FNUM.EQ.0) GOTO 9950
	IF (RDCHS(CH)) THEN
	   CALL WRITEF('Font NEWNAME string missing for font %N',FNUM)
	   GOTO 60
	ENDIF
	CALL BSCH
	CALL STR$GET1_DX(TXTLIM,NEWNAME)
	NEWLEN = READSTR(NEWNAME,,ON_SPACE)
	CALL STR$LEFT(NEWNAME,NEWNAME,NEWLEN)
	GOTO 50
C
C ENCODING string
500	IF (FNUM.EQ.0) GOTO 9950
	IF (RDCHS(CH)) THEN
	   CALL WRITEF('Font ENCODING string missing for font %N',FNUM)
	   GOTO 60
	ENDIF
	CALL BSCH
	EXPLEN = EXPMAX
	EXPLEN = READSTR(EXPDSC)
	IF (ENCLEN.NE.0) THEN
	   CALL STR$APPEND(ENCOD,CHAR(10))
	   ENCLEN = ENCLEN+1
	ENDIF 
	CALL STR$APPEND(ENCOD,EXPDSC)
	ENCLEN = ENCLEN+EXPLEN
	GOTO 50
C
C KERNING PAIR
600	IF (FNUM.EQ.0) GOTO 9950
	KERN_PAIR = .TRUE.
	GOTO 50
C
C AFM filename
700	IF (FNUM.EQ.0) GOTO 9950
	IF (RDCHS(CH)) THEN
	   CALL WRITEF('Font AFM filename missing for font %N',FNUM)
	   GOTO 60
	ENDIF
	CALL BSCH
	CALL STR$GET1_DX(TXTLIM,AFMFIL)
	AFMLEN = 0
	IF (USELSL) THEN
	   OK = GETFILNAM( AFMFIL, AFMLEN,
     &		   'LSL$PS_FONT_METRICS:.AFM', .TRUE.)
	ELSE
	   OK = GETFILNAM( AFMFIL, AFMLEN,
     &		   'SYS$PS_FONT_METRICS:.AFM', .TRUE.)
	ENDIF
	IF (.NOT.OK) THEN
	   AFMLEN = 0
	   CALL WRITEF('Bad AFM file name for font %N',FNUM)
	   GOTO 60
	ENDIF
	CALL STR$LEFT(AFMFIL,AFMFIL,AFMLEN)
	GOTO 50
C
C HEADER string
800	IF (RDCHS(CH)) GOTO 50
	CALL BSCH
	CALL STR$GET1_DX(TXTLIM,HEADER)
	HEADLEN = READSTR(HEADER)
	CALL STR$LEFT(HEADER,HEADER,HEADLEN)
	CALL STR$CONCAT(HEADER,CHAR(10),HEADER,CHAR(10))
	HEADLEN = HEADLEN+2
	CALL GKS_WRITE_DPS(DEV,HEADER)
	CALL STR$FREE1_DX(HEADER)
	GOTO 50
C
C ARABIC Input  Isolate Final Medial Initial
900	IF (FNUM.EQ.0) GOTO 9950
	IF (INTARG(1).LT.0.OR.INTARG(1).GT.255 .OR.
     &	    INTARG(2).LT.0.OR.INTARG(1).GT.255 .OR.
     &	    INTARG(3).LT.0.OR.INTARG(1).GT.255 .OR.
     &	    INTARG(4).LT.0.OR.INTARG(1).GT.255 .OR.
     &	    INTARG(5).LT.0.OR.INTARG(1).GT.255) THEN
	   CALL TTWSTR('ARABIC glyphs must be in the range 0-255')
	   GOTO 60
	ENDIF
	IF (.NOT.ARABIC) THEN
	   ARABIC = .TRUE.
	   IF (ARATAB.EQ.0) CALL LIB$GET_VM(256*4,ARATAB)
	   CALL VIOCLR(%VAL(ARATAB),256*4)
	ENDIF
	DO 910 I=0,3
	   CALL LIB$INSV(INTARG(I+2),0,8,%VAL(ARATAB+4*INTARG(1)+I))
910	CONTINUE
	GOTO 50
C
C DIRECTION RIGHT_TO_LEFT
1000	IF (FNUM.EQ.0) GOTO 9950
	R_TO_L = .TRUE.
	GOTO 50
C
9950	CALL TTWSTR('FONT command missing')
	GOTO 60
C
9998	OK = FLRCLO(LUN,ERROR)
	IF (.NOT.OK) THEN
	   CALL LSL_PUTMSG(OK)
	   CALL LSL_ADDMSG(ERROR)
	ENDIF
	CALL STR$FREE1_DX(FNAME)
	CALL STR$FREE1_DX(FINDPROC)
	CALL STR$FREE1_DX(NEWNAME)
	CALL STR$FREE1_DX(ENCOD)
	CALL STR$FREE1_DX(AFMFIL)
	IF (ARATAB.NE.0) THEN
	   CALL LIB$FREE_VM(256*4,ARATAB)
	   ARATAB = 0
	ENDIF
C
9999	OK = LIB$FREE_LUN(LUN)	! free LUN
	IF (.NOT.OK) CALL LSL_PUTMSG(OK)
C       
10000	NOMESS = SAV_NOMESS
	RETURN
C
	END
C
	SUBROUTINE GKS_WRITE_DPS_FONT(DEV,FNUM,KERN_PAIR,
     &			FLEN,	FNAME,
     &			FINDLEN,FINDPROC,
     &			NEWLEN,	NEWNAME,
     &			ENCLEN,	ENCOD,
     &			AFMLEN,	AFMFIL,
     &			SCALE,	R_TO_L,
     &			ARABIC,	ARATAB,
     &	                DEFFNT, USELSL)
C
***	MODULE	GKS_WRITE_DPS_FONT
***	IDENT	05OC01
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Clarke Brunt	9-July-1993
C
C Write info derived from .PSFONTLIST file
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNLSL:EXPC.CMN'
	INCLUDE	'LSL$CMNLSL:TXTC.CMN'
	INCLUDE	'SYS$LIBRARY:DECW$XLIBDEF'
	INCLUDE	'DDSC.PAR'
***	COMMON/GKSDECW/
C
C Arguments
	INTEGER		DEV		! if -ve, assume text rendering
	INTEGER		FNUM
	LOGICAL		KERN_PAIR
	INTEGER		FLEN
	CHARACTER*(*)	FNAME
	INTEGER		FINDLEN
	CHARACTER*(*)	FINDPROC
	INTEGER		NEWLEN
	CHARACTER*(*)	NEWNAME
	INTEGER		ENCLEN
	CHARACTER*(*)	ENCOD
	INTEGER		AFMLEN
	CHARACTER*(*)	AFMFIL
	REAL		SCALE
	LOGICAL		R_TO_L
	LOGICAL		ARABIC
	BYTE		ARATAB(*)
	CHARACTER*(*)	DEFFNT
	LOGICAL		USELSL
C
C functions
	INTEGER*4	GKS_C_ALLOC_FONT
	INTEGER		GETFILNAM
	LOGICAL		GKS_C_GET_ENCODING
	INTEGER		textren_initialise_font_encoded
	LOGICAL		GKS_TEST_FILE_EXISTS
C
C workspace
	LOGICAL		KERNED,FIRST,GTENCD
	LOGICAL		AFMEXISTS
	INTEGER*4	FPTR
	INTEGER		ENCVEC(256)
	INTEGER		CTX
	RECORD	/DDSC/	PTHNME,ENCDNG,AFMNME
	INTEGER		OK
C
	KERNED = KERN_PAIR
C
C Will always have an AFM file if using text rendering
C
	IF (KERN_PAIR.AND.AFMLEN.EQ.0.AND.DEV.GT.0) THEN
	   CALL WRITEF('No AFM file for font %N, kerning disabled',FNUM)
	   KERNED = .FALSE.
	ENDIF
C
	FPTR = GKS_C_ALLOC_FONT(FNUM,SCALE,KERNED,R_TO_L,ARABIC,ARATAB)
C
C read the AFM. For display postscript it is not so important if
C something goes wrong (file not there?) - do what has always been done
	IF (DEV.GT.0.AND.AFMLEN.GT.0.AND.FPTR.NE.0) THEN
	    CALL GKS_READ_AFM_FILE(AFMFIL,FPTR)
	ELSEIF (DEV.LT.0) THEN
C
C Using text rendering - really need to get some font metrics -
C first try the existing file name
	   IF (AFMLEN .GT.0) THEN
	      CALL STR$GET1_DX(TXTLIM,AFMNME)
C
	      CALL STR$COPY_DX(AFMNME,AFMFIL)
C
	      AFMEXISTS = GKS_TEST_FILE_EXISTS(AFMNME)
C
	      IF (.NOT.AFMEXISTS)
     &	         CALL WRITEF(
     &	             'Cannot find specified AFM file "%S" for font %N', 
     &	                     AFMNME,FNUM)
	   ELSE
	      AFMEXISTS = .FALSE.
	      CALL WRITEF('No AFM file specified for font %N',FNUM)
	   ENDIF
C
	   IF (.NOT.AFMEXISTS) THEN
              CALL WRITEF(
     &		'   Trying AFM file name based on font file "%S"',
     &	                  FNAME)
C
C GETFILNAM cannot cope with `-' in file names, so build it up
C ourselves
	      IF (USELSL) THEN
	         CALL STR$COPY_DX(AFMNME,'LSL$PS_FONT_METRICS:')
	      ELSE
	         CALL STR$COPY_DX(AFMNME,'SYS$PS_FONT_METRICS:')
	      ENDIF
	      CALL STR$APPEND(AFMNME,FNAME)
	      CALL STR$APPEND(AFMNME,'.AFM')
C
C replace `-' with `_'
C
	      CALL GKS_REPLACE_HYPHEN(AFMNME)
C
C Test if the file for this font exists. TEXTRENLIB does not
C at present return very helpful messages
C
	      OK = GKS_TEST_FILE_EXISTS(AFMNME)
	      IF (.NOT. OK) THEN
C
C	   revert to using default font name
C
	         CALL WRITEF('Cannot find AFM file "%S"',AFMNME)
                 CALL WRITEF(
     &	           '   Using AFM file based on default font "%S"',
     &		            DEFFNT)
	         IF (USELSL) THEN
	            CALL STR$COPY_DX(AFMNME,'LSL$PS_FONT_METRICS:')
                 ELSE
	            CALL STR$COPY_DX(AFMNME,'SYS$PS_FONT_METRICS:')
	         ENDIF
	         CALL STR$APPEND(AFMNME,DEFFNT)
	         CALL STR$APPEND(AFMNME,'.AFM')
C
C replace `-' with `_'
C
	         CALL GKS_REPLACE_HYPHEN(AFMNME)
	      ENDIF
	   ENDIF
C
C Read this AFM file
C
	   CALL GKS_READ_AFM_FILE(AFMNME,FPTR)
C
	   CALL STR$FREE1_DX(AFMNME)
	ENDIF
C
C write out info for font, either to Postscript Context or
C to TEXTRENLIB
C
C Define Fn as procedure to find the font
	IF (DEV .GT. 0) THEN
	   CTX = XDPSC(DEV)
	   CALL DPSWRITEPOSTSCRIPT(%VAL(CTX),
     &	      		%REF('FNTDICT begin /'),%VAL(15))
	   CALL EXPAND('F%N {%C',FNUM,10)
	   CALL DPSWRITEPOSTSCRIPT(%VAL(CTX),
     &	     		EXPBUF,%VAL(EXPLEN))
C
C use supplied find procedure, or findfont on the name
	   IF (FINDLEN.EQ.0) THEN	! no find, so use name
	      CALL EXPAND('/%S findfont%C',FNAME(:FLEN),10)
	      CALL DPSWRITEPOSTSCRIPT(%VAL(CTX),
     &			EXPBUF,%VAL(EXPLEN))
	   ELSE
	      CALL DPSWRITEPOSTSCRIPT(%VAL(CTX),
     &			%REF(FINDPROC//CHAR(10)),%VAL(FINDLEN+1))
	   ENDIF
C
C Scale the font
	   IF (SCALE.NE.1.0) THEN
	      CALL EXPAND('%F0.2 scalefont%C',SCALE,10)
	      CALL DPSWRITEPOSTSCRIPT(%VAL(CTX),
     &			EXPBUF,%VAL(EXPLEN))
	   ENDIF
C
C Re-encode the font, using new name or derived name
	   IF (ENCLEN.GT.0) THEN
	      IF (NEWLEN.GT.0) THEN
	         CALL EXPAND('/%S ',NEWNAME(:NEWLEN))
	      ELSE
	         CALL EXPAND('/%S-ReENC ',FNAME(:FLEN))
	      ENDIF
	      CALL DPSWRITEPOSTSCRIPT(%VAL(CTX),
     &	       		EXPBUF,%VAL(EXPLEN))
	      CALL DPSWRITEPOSTSCRIPT(%VAL(CTX),
     &			%REF(ENCOD),%VAL(ENCLEN))
	      CALL DPSWRITEPOSTSCRIPT(%VAL(CTX),
     &			%REF(' ReENCODE'//CHAR(10)),%VAL(10))
	   ENDIF
	   CALL DPSWRITEPOSTSCRIPT(%VAL(CTX),
     &			%REF('} def end '//CHAR(10)),%VAL(11))
	ELSE
C
C 	   using text rendering
C
	   FIRST = .TRUE.
C
	   CALL STR$GET1_DX(TXTLIM,PTHNME)
	   CALL STR$GET1_DX(TXTLIM,ENCDNG)
C
C          get the pathname from the name of the file
C
C GETFILNAM cannot cope with `-' in file names, so build it up
C ourselves
	   CALL STR$COPY_DX(PTHNME,'LSL$PS_FONT_OUTLINE:')
	   CALL STR$APPEND(PTHNME,FNAME)
	   CALL STR$APPEND(PTHNME,'.XDPS$OUTLINE')
	   CALL STR$APPEND(PTHNME,CHAR(0))
C
C Test if the file for this font exists. TEXTRENLIB does not
C at present return very helpful messages
C
	   OK = GKS_TEST_FILE_EXISTS(PTHNME)
	   IF (OK) GOTO 50
	   CALL WRITEF('Cannot find font file "%S"',FNAME)
40	   CONTINUE
	   FIRST = .FALSE.
C
C	   revert to using default font
C
           CALL WRITEF('  Using default font "%S" for font %N',
     &	    	       DEFFNT,fnum)
C
	   CALL STR$COPY_DX(PTHNME,'LSL$PS_FONT_OUTLINE:')
	   CALL STR$APPEND(PTHNME,DEFFNT)
	   CALL STR$APPEND(PTHNME,'.XDPS$OUTLINE')
 	   CALL STR$APPEND(PTHNME,CHAR(0))
C
C this is a suitable font to use as default
C
	   IF (XDEFAULT_FONT .LT. 0)
     &	      XDEFAULT_FONT = FNUM
C
C Get the encoding data
C
50	   CONTINUE
C
C populate the encoding vector from the data in the afm file
C
	   GTENCD = GKS_C_GET_ENCODING(%VAL(FPTR),ENCVEC)
C
C invent an internal file name
C
	   CALL EXPAND('F%N',FNUM)
C
C tell TEXTRENLIB about this font
C
	   IF (GTENCD) THEN
 	      OK = TEXTREN_INITIALISE_FONT_ENCODED(%REF(EXPBUF),
     &	                                 %VAL(PTHNME.DSC_POINTER),
     &					 ENCVEC)
 	   ELSE
 	      OK = TEXTREN_INITIALISE_FONT_ENCODED(%REF(EXPBUF),
     &	                                 %VAL(PTHNME.DSC_POINTER),
     &	                                 %VAL(0))
	   ENDIF 
C
	   IF (.NOT.OK) THEN
	      CALL WRITEF('% ')
	      IF (FIRST) THEN
	         CALL WRITEF('Failed to open font file "%S"',FNAME)
	         GOTO 40
	      ELSE
 	         CALL WRITEF('% ')
	         CALL WRITEF('************************************'//
     &	         '*********************')
 	         CALL WRITEF('Failed to open DEFAULT font file "%S"',FNAME)
	         CALL WRITEF('Texts using Font %N will not be displayed',
     &	                     FNUM)
	         CALL WRITEF('************************************'//
     &	         '*********************')
 	         CALL WRITEF('% ')
 	      ENDIF
	   ENDIF
C
	   CALL STR$FREE1_DX(ENCDNG)
	   CALL STR$FREE1_DX(PTHNME)
C
C can this font be used as default?
C
	IF ((XDEFAULT_FONT .LT. 0) .AND. (FNAME .EQ. DEFFNT))
     &	      XDEFAULT_FONT = FNUM
	ENDIF
C
	RETURN
	END
C
	SUBROUTINE GKS_WRITE_DPS(DEV,STRING)
C
***	MODULE	GKS_WRITE_DPS
***	IDENT	09JL93
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Clarke Brunt	9-July-1993
C
C Write info derived from .PSFONTLIST file
C
	IMPLICIT NONE
C
	INCLUDE	'SYS$LIBRARY:DECW$XLIBDEF'
***	COMMON/GKSDECW/
C
C Arguments
	INTEGER		DEV
	CHARACTER*(*)	STRING
C
	IF (DEV.GT.0) THEN
	  CALL DPSWRITEPOSTSCRIPT(%VAL(XDPSC(DEV)),
     &			%REF(STRING),%VAL(LEN(STRING)))
	ENDIF
C	
	RETURN
	END
C
	SUBROUTINE GKS_READ_AFM_FILE(FILENAME,FPTR)
C
***	MODULE	GKS_READ_AFM_FILE
***	IDENT	28OC92
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Clarke Brunt	28-Oct-1992
C
C Read .AFM file
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE	'LSL$CMNLSL:READSTR.PAR'
	INCLUDE	'LSL$CMNLSL:TBLFLG.PAR'
	INCLUDE	'LSL$CMNLSL:CMDCOM.CMN'
	INCLUDE	'LSL$CMNLSL:EXPC.CMN'
	INCLUDE	'LSL$CMNLSL:TXTC.CMN'
	INCLUDE	'DDSC.PAR'
C
C Arguments
	CHARACTER*(*)	FILENAME	! AFM filename
	INTEGER*4	FPTR		! font structure
C
C Functions
	INTEGER		FLROPN,FLRCLO,FLRLIN
	INTEGER		RDCOMM,ADDNAM
	LOGICAL		RDCHS,RDREAL
	INTEGER		READSTR
	INTEGER		LIB$GET_LUN
	INTEGER		LIB$FREE_LUN
	INTEGER		LIB$EXTZV
	EXTERNAL	GKS_AFM_CMD_TABLE
	EXTERNAL	GKS_MET_CMD_TABLE
	EXTERNAL	GKS_COMP_CMD_TABLE
C
C workspace
C
	RECORD	/DDSC/	CNAME
	INTEGER		CLEN
C
	INTEGER		OK,ERROR
	BYTE		CH
	INTEGER		LUN
	INTEGER		CMD
	LOGICAL*1	SAV_NOMESS
	INTEGER		CHARNO
	REAL		WIDTH,BOX(4)
	REAL		KPX
	REAL		DELTAX,DELTAY
	INTEGER		C1,C2
	INTEGER*4	NAMTAB
	INTEGER		TABSIZ
	INTEGER		UNENC
	LOGICAL		HAD_CHAR_METRICS
C
	SAV_NOMESS = NOMESS
	NOMESS = .TRUE.
	NAMTAB = 0
	UNENC = 0	! number of un-encoded characters
	HAD_CHAR_METRICS = .FALSE.
C
C get a LUN to read the file on
	OK = LIB$GET_LUN(LUN)
	IF (.NOT.OK) THEN		! failed
	   CALL LSL_PUTMSG(OK)
	   GOTO 10000
	ENDIF
C
C open up the file (just give up on error)
	OK = FLROPN(LUN,FILENAME)	! open file
	IF (.NOT.OK) THEN
	   CALL WRITEF('Failed to open .AFM file "%S"',FILENAME)
	   CALL LSL_PUTMSG(OK)
	   GOTO 9999
	ENDIF
C
50	OK =  FLRLIN(,,,ERROR) 	! read into TXTBUF
	IF (.NOT.OK .AND. OK.NE.LSL__RECTOOBIG) THEN
	   IF (OK.EQ.LSL__EOF) GOTO 9998	! end of file
	   CALL LSL_PUTMSG(OK)
	   CALL LSL_ADDMSG(ERROR)
	   GOTO 9998
	ENDIF
C
C we have a line - what is it ?
	CALL BSLN				! start of line
	IF (RDCHS(CH)) GOTO 50			! empty line
	CALL BSCH
	CMD = RDCOMM(GKS_AFM_CMD_TABLE)		! what is it ?
	IF (CMD.EQ.0) GOTO 50			! error reading command.
C
	GOTO (100,200,300,400,500,600,700,800,900), CMD
	GOTO 50
C
C StartCharMetrics
100	IF (INTARG(1).LE.0) GOTO 50
	IF (HAD_CHAR_METRICS) GOTO 50
	HAD_CHAR_METRICS = .TRUE.
	TABSIZ = INTARG(1)*2+2
C
	CALL LIB$GET_VM(TABSIZ*4,NAMTAB)
	CALL INITAB(%VAL(NAMTAB),TABSIZ)
C
C Remove the 'upcase' bit and set the 'exact' bit in the table header,
C by saving, changing, save array, and selecting again
C Also set the DIGOK bit to allow numbers (there is an 8th argument
C to INITAB to do this, but while we are doing the others this way...
C
	CALL SAVTAB(TXTBUF)
	CALL LIB$INSV(0,CMT$V_UPCASE,1,TXTBUF(31))
	CALL LIB$INSV(1,CMT$V_EXACT,1,TXTBUF(31))
	CALL LIB$INSV(1,CMT$V_DIGOK,1,TXTBUF(31))
	CALL SELTAB(TXTBUF)
	CALL GKS_C_SET_TAB_SIZE(%VAL(FPTR),INTARG(1),%VAL(NAMTAB))
	GOTO 50
C
C EndCharMetrics
200	IF (.NOT.HAD_CHAR_METRICS) GOTO 50
C
C this call causes characters not in the afm encoding vector
C to be sized as spaces
	CALL GKS_C_SET_DEFAULT_WIDTH(%VAL(FPTR))
	CALL GKS_C_TRIM_TAB(%VAL(FPTR),256+UNENC)
	GOTO 50
C
C StartKernPairs
300	GOTO 50
C
C EndKernPairs
400	GOTO 50
C
C StartComposites
500	GOTO 50
C
C EndComposites
600	GOTO 50
C
C C (character number in CharMetrics)
700	IF (.NOT.HAD_CHAR_METRICS) GOTO 50
	CHARNO = INTARG(1)
	IF (CHARNO.LT.0.OR.CHARNO.GT.255) THEN	! not encoded
	   UNENC = UNENC+1
	   CHARNO = UNENC+255
	ENDIF
	WIDTH = 0.0
	BOX(1) = 0.0
	BOX(2) = 0.0
	BOX(3) = 0.0
	BOX(4) = 0.0
	CLEN = 0
C skip over semi-colon
710	IF (RDCHS(CH)) GOTO 790
	IF (CH.NE.';') GOTO 710
	CMD = RDCOMM(GKS_MET_CMD_TABLE)	! what is it ?
	IF (CMD.EQ.0) GOTO 710			! error reading command.
	GOTO (711,712,713),CMD
	GOTO 710
C
C WX (width in CharMetrics)
711	WIDTH = REALAR(1)
	GOTO 710
C
C N (character name in CharMetrics)
712	CALL STR$GET1_DX(TXTLIM,CNAME)
	CLEN = READSTR(CNAME,,ON_SPACE)
	CALL STR$LEFT(CNAME,CNAME,CLEN)
	CALL STR$APPEND(CNAME,CHAR(0))
	GOTO 710
C
C B (bounding box in CharMetrics, llx lly urx ury)
713	BOX(1) = REALAR(1)
	BOX(2) = REALAR(2)
	BOX(3) = REALAR(3)
	BOX(4) = REALAR(4)
	GOTO 710
C
C define this character's width and name
790	CALL GKS_C_SET_CHAR_METRICS(%VAL(FPTR),CHARNO,WIDTH,BOX,
     &				   %VAL(CNAME.DSC_POINTER))
	IF (CLEN.GT.0) THEN
C
C Unfortunately, ADDNAM upper cases the name and removes numbers,
C so horrible code to change to what we really want.
C Just add a dummy name for now, since a name comprising
C completely numbers causes an error in ADDNAM
	   CMD = ADDNAM('A',1,CHARNO+1)
	   IF (CMD.LE.0) THEN
	      CALL WRITEF(
     &		'Error adding character name "%S" to table',CNAME)
	   ELSE
C
C get number of commands in table
C clear out command number so don't confuse STR$...
C check string long enough (allow for digits, lost by ADDNAM)
C copy the string in
C put the command number back
	      CMD = LIB$EXTZV(0,15,%VAL(NAMTAB))
	      C2 = NAMTAB+CMD*8	! address of command desc
	      CALL LIB$INSV(0,16,16,%VAL(C2))
	      C1 = LIB$EXTZV(0,16,%VAL(C2))
	      IF (C1.NE.CLEN) THEN
	         CALL LIB$INSV(CLEN,0,16,%VAL(C2))
	         IF (C1.GT.0) CALL LIB$FREE_VM(C1,%VAL(C2+4))
	         CALL LIB$GET_VM(CLEN,%VAL(C2+4))
	      ENDIF
	      CALL STR$COPY_DX(%VAL(C2),CNAME)
	      CALL LIB$INSV(CHARNO+1,16,16,%VAL(C2))
	   ENDIF
	ENDIF
	CALL STR$FREE1_DX(CNAME)
	GOTO 50
C
C KPX (Kerning amount in KernPairs)
800	IF (.NOT.HAD_CHAR_METRICS) GOTO 50
	CMD = RDCOMM(%VAL(NAMTAB))
	IF (CMD.LE.0) GOTO 50
	C1 = CMD-1
	CMD = RDCOMM(%VAL(NAMTAB))
	IF (CMD.LE.0) GOTO 50
	C2 = CMD-1
	IF (RDREAL(KPX)) GOTO 50
C
C set kern value
	CALL GKS_C_SET_KERN_PAIR(%VAL(FPTR),C1,C2,KPX)
	GOTO 50
C
C CC (Composite char in Composites)
900	IF (.NOT.HAD_CHAR_METRICS) GOTO 50
	CMD = RDCOMM(%VAL(NAMTAB))
	IF (CMD.LE.256) GOTO 50	! doesn't exist, or is encoded anyway
	C1 = CMD-1
C skip over semi-colon
910	IF (RDCHS(CH)) GOTO 50
	IF (CH.NE.';') GOTO 910
	CMD = RDCOMM(GKS_COMP_CMD_TABLE)	! what is it ?
	IF (CMD.EQ.0) GOTO 910			! error reading command.
	GOTO (911),CMD
	GOTO 910
C
C PCC (composite part in Composites)
911	CMD = RDCOMM(%VAL(NAMTAB))
	IF (CMD.LE.0.OR.CMD.GT.256) GOTO 910
	C2 = CMD-1
	IF (RDREAL(DELTAX)) GOTO 910
	IF (RDREAL(DELTAY)) GOTO 910
C
C set kern value
	CALL GKS_C_SET_COMPONENT(%VAL(FPTR),C1,C2,DELTAX,DELTAY)
	GOTO 910
C
9998	OK = FLRCLO(LUN,ERROR)
	IF (.NOT.OK) THEN
	   CALL LSL_PUTMSG(OK)
	   CALL LSL_ADDMSG(ERROR)
	ENDIF
C
9999	OK = LIB$FREE_LUN(LUN)	! free LUN
	IF (.NOT.OK) CALL LSL_PUTMSG(OK)
C
10000	NOMESS = SAV_NOMESS
	RETURN
C
	END
C
	SUBROUTINE GKS_FREE_NAME_TABLE(SIZE,NAMTAB)
C
***	MODULE	GKS_FREE_NAME_TABLE
***	IDENT	28OC92
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Clarke Brunt	28-Oct-1992
C
C Free a dynamic command table (called from DPS_C.C)
C
C argument
	INTEGER		SIZE
	INTEGER*4	NAMTAB(*)
C
C workspace
	INTEGER		NCMD,CMD,CLEN
C
C free command descriptors (REMCMD takes rather a long time,
C so do it ourselves)
	NCMD = NAMTAB(1).AND.'7FFF'X
	DO 9001 CMD=1,NCMD
	   CLEN = NAMTAB(1+CMD*2).AND.'FFFF'X
	   CALL LIB$FREE_VM(CLEN,NAMTAB(2+CMD*2))
9001	CONTINUE
	CALL LIB$FREE_VM((SIZE*2+2)*4,%LOC(NAMTAB))
	RETURN
	END
C
	LOGICAL FUNCTION GKS_TEST_FILE_EXISTS(FILENAME)
C
***	MODULE	GKS_TEST_FILE_EXISTS
***	IDENT	05OC01
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Ron Russell	05-Oct-2001
C
C Test if a particular file exists
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'
C
C Arguments
	CHARACTER*(*)	FILENAME
C
C Functions
	INTEGER		FLROPN,FLRCLO
	INTEGER		LIB$GET_LUN
	INTEGER		LIB$FREE_LUN
C
C workspace
C
	INTEGER		OK,ERROR
	INTEGER		LUN
C
C assume file does not exist
C
	GKS_TEST_FILE_EXISTS = .FALSE.	
C
C get a LUN to open the file on
	OK = LIB$GET_LUN(LUN)
	IF (.NOT.OK) THEN		! failed
	   CALL LSL_PUTMSG(OK)
	   GOTO 10000
	ENDIF
C
C try to open the file
	OK = FLROPN(LUN,FILENAME)	! open file
	IF (.NOT.OK) THEN
	   IF (OK .NE. LSL__NOSUCHFILE) THEN
	      CALL WRITEF('Failed to open file "%S"',FILENAME)
	      CALL LSL_PUTMSG(OK)
	   ENDIF
	ELSE
	   GKS_TEST_FILE_EXISTS = .TRUE.
	   OK = FLRCLO(LUN,ERROR)
	   IF (.NOT.OK) THEN
	      CALL WRITEF('Failed to close file "%S"',FILENAME)
	      CALL LSL_PUTMSG(OK)
	      CALL LSL_ADDMSG(ERROR)
	   ENDIF 
	ENDIF
C
	OK = LIB$FREE_LUN(LUN)	! free LUN
	IF (.NOT.OK) CALL LSL_PUTMSG(OK)
C       
10000	CONTINUE
	RETURN
	END
C
	SUBROUTINE GKS_REPLACE_HYPHEN(FILENAME)
C
***	MODULE	GKS_REPLACE_HYPHEN
***	IDENT	08OC01
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Ron Russell	08-Oct-2001
C
C Replace `-' with `_'
C
	IMPLICIT NONE
C
C Arguments
	CHARACTER*(*)	FILENAME	! AFM filename
C
 	INTEGER		I
	CHARACTER	THSCHR
C
	DO 100, I = 1, LEN(FILENAME)
	   IF (FILENAME(I:I) .EQ. '-') THEN
	      FILENAME(I:I) = '_'
	   ENDIF
100	CONTINUE
C
	RETURN
	END

