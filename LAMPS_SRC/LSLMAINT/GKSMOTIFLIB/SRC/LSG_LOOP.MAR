;
; * This file is part of the LAMPS distribution, released as a software
; * preservation project to archive digital history for future historians.
; * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
; *
; * Timestamp of this file for the 2002 release was: 1992-07-22 13:34:46.000000000 +0100
; *
; * This program is free software: you can redistribute it and/or modify
; * it under the terms of the GNU General Public License as published by
; * the Free Software Foundation, version 3.
; *
; * This program is distributed in the hope that it will be useful, but
; * WITHOUT ANY WARRANTY; without even the implied warranty of
; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
; * General Public License for more details.
; *
; * You should have received a copy of the GNU General Public License
; * along with this program. If not, see http://www.gnu.org/licenses/.
;
	.TITLE	LSG_LOOP
	.IDENT	/22JL92/

;Copyright Laser Scan Ltd., Cambridge, England
;Author Clarke Brunt, 16-July-1992
;
; Optimised inner loop for GKSMOTIFLIB LSG_PIXEL_ARRAY

	.LIBRARY	/LSL$LIBRARY:LSLMACLIB/

	CODE_PSECT	LSL

; SUBROUTINE LSG_LOOP(
;	INTEGER		NCOLS,		! number of cols to do
;	INTEGER		REPX,		! pixel repn. factor
;	INTEGER		YIND,
;	INTEGER		XSTEP,
;	INTEGER		PIND,		! incremented by number done
;	bit array	PXARR(),	! input, start at YIND, step XSTEP
;	bit array	B() )		! output, start at PIND

	NCOLS = 4
	REPX = 8
	YIND = 12
	XSTEP = 16
	PIND = 20
	PXARR = 24
	B = 28

	.ENTRY	LSG_LOOP,^M<R2,R3,R4,R5,R6,R7,R8>

	MOVAL	@B(AP), R6
	MOVL	@NCOLS(AP), R7
	SUBL3	#1, @PIND(AP), R2		; PIND-1
	MOVAB	@PXARR(AP), R4
	SUBL3	#1, @YIND(AP), R3		; YIND-1
	MOVL	@XSTEP(AP), R5			; XSTEP
	MOVL	@REPX(AP), R8			; REPX

10$:	EXTV	R3, #1, (R4), R1		; bit
20$:	MOVL	R8, R0
25$:	CMPL	R0, #32
	BLEQ	30$
	INSV	R1, R2, #32, (R6)
	ADDL2	#32, R2
	SUBL2	#32, R0
	BRB	25$

30$:	INSV	R1, R2, R0, (R6)
	ADDL2	R0, R2

	ADDL2	R5, R3				; add XSTEP
	SOBGTR	R7, 10$				; loop for NCOLS

	ADDL3	#1, R2, @PIND(AP)	; return PIND (adding 1 again)
	RET

	.END
