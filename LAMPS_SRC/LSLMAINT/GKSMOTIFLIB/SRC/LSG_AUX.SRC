C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-09-24 13:45:18.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C
C Exception handler for use with LIB$FIND_IMAGE_SYMBOL
C (stolen from LITES2)
	INTEGER*4 FUNCTION GKS_EXP_HAND_FIMS(SIGARG, MCHARG)
C
***	MODULE GKS_EXP_HAND_FIMS
***	IDENT 24SE96
C
	IMPLICIT NONE
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England
C Author: Ron Russell
C
C Condition handler for LIB$FIND_IMAGE_SYMBOL, which otherwise signals
C its errors.
C If image is a non-shareable executable image
C LIB$FIND_IMAGE_SYMBOL signals two errors - an RMS error, followed by
C LIB$_KEYNOTFOU. This is an attempt to catch the first one
C
C arguments:
	INTEGER*4	SIGARG(*)
	INTEGER*4	MCHARG(5)
C
	INCLUDE '($LIBDEF)'
	INCLUDE '($SSDEF)'
C
C functions called
	INTEGER	LIB$MATCH_COND
	INTEGER	SYS$UNWIND
C
C workspace
	INTEGER	I
C
C do we recognise the error ?
C
	I=LIB$MATCH_COND(SIGARG(2),LIB$_KEYNOTFOU,SS$_UNWIND,
     &	                  LIB$_EOMWARN)
C
C anything we are happy about (EOMWARN), no message and continue
	IF (I.GE.3) THEN
	   GKS_EXP_HAND_FIMS = SS$_CONTINUE
	   GOTO 1000
	ENDIF
C
	GOTO (900,1000),I
C
C any condition, apart from KEYNOTFOU
C
C if it is something we don't recognise, then write message and unwind
	SIGARG(1) = SIGARG(1) - 2
	CALL SYS$PUTMSG(SIGARG,,,)
	SIGARG(1) = SIGARG(1) + 2		
C
C write a blank line after the message to avoid the message being
C overwritten by the next line of output
	CALL WRITEF
C
C KEYNOTFOUnd - 
C unwind to our establisher, returning the condition value in R0
C
C MCHARG(4) is where R0 will be restored from
C MCHARG(3) is the depth from where we were established to where
C the condition occurred.
C This is like LIB$SIG_TO_RET but unwinds one less frame
900	MCHARG(4) = SIGARG(2)
	GKS_EXP_HAND_FIMS = SYS$UNWIND( MCHARG(3), )
C
1000	RETURN
	END
C
	INTEGER FUNCTION LSGA_LOAD_GKS(LOGNAM)
C
**	MODULE	LSGA_LOAD_GKS
**	IDENT	01AU90
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Clarke Brunt	 8-Jun-1987
C
	IMPLICIT NONE
C
	INCLUDE	'($LIBDEF)'
***	COMMON/GKSDAT2/
C
C Arguments:
C
	CHARACTER*(*)	LOGNAM		! logical name of image to load
C
C Functions
	INTEGER	SIGCHS
	INTEGER	LIB$FIND_IMAGE_SYMBOL
	INTEGER	LIB$MATCH_COND
	EXTERNAL GKS_EXP_HAND_FIMS
C
C Workspace
C
C names of routines
	CHARACTER*18	GKS_NAMES(MAX_ROUTINES)
C
	DATA		GKS_NAMES(XGACWK)/'GACWK'/
	DATA		GKS_NAMES(XGCLKS)/'GCLKS'/
	DATA		GKS_NAMES(XGCLRWK)/'GCLRWK'/
	DATA		GKS_NAMES(XGCLWK)/'GCLWK'/
	DATA		GKS_NAMES(XGDAWK)/'GDAWK'/
	DATA		GKS_NAMES(XGESC)/'GESC'/
	DATA		GKS_NAMES(XGFA)/'GFA'/
	DATA		GKS_NAMES(XGOPKS)/'GOPKS'/
	DATA		GKS_NAMES(XGOPWK)/'GOPWK'/
	DATA		GKS_NAMES(XGPL)/'GPL'/
	DATA		GKS_NAMES(XGQMDS)/'GQMDS'/
	DATA		GKS_NAMES(XGQPLF)/'GQPLF'/
	DATA		GKS_NAMES(XGSASF)/'GSASF'/
	DATA		GKS_NAMES(XGSCLIP)/'GSCLIP'/
	DATA		GKS_NAMES(XGSDS)/'GSDS'/
	DATA		GKS_NAMES(XGSELNT)/'GSELNT'/
	DATA		GKS_NAMES(XGSFACI)/'GSFACI'/
	DATA		GKS_NAMES(XGSFAIS)/'GSFAIS'/
	DATA		GKS_NAMES(XGSFASI)/'GSFASI'/
	DATA		GKS_NAMES(XGSLN)/'GSLN'/
	DATA		GKS_NAMES(XGSLWSC)/'GSLWSC'/
	DATA		GKS_NAMES(XGSPLCI)/'GSPLCI'/
	DATA		GKS_NAMES(XGSVP)/'GSVP'/
	DATA		GKS_NAMES(XGSWKVP)/'GSWKVP'/
	DATA		GKS_NAMES(XGSWKWN)/'GSWKWN'/
	DATA		GKS_NAMES(XGSWN)/'GSWN'/
	DATA		GKS_NAMES(XGUWK)/'GUWK'/
	DATA		GKS_NAMES(XLSG_BEGIN_AREA)/'LSG_BEGIN_AREA'/
	DATA		GKS_NAMES(XLSG_END_AREA)/'LSG_END_AREA'/
	DATA		GKS_NAMES(XGSCR)/'GSCR'/
	DATA		GKS_NAMES(XLSG_SET_COLOURS)/'LSG_SET_COLOURS'/
	DATA		GKS_NAMES(XLSG_SET_LUT)/'LSG_SET_LUT'/
	DATA		GKS_NAMES(XLSG_PIXEL_ARRAY)/'LSG_PIXEL_ARRAY'/
	DATA		GKS_NAMES(XLSG_FILL_RECTANGLE)/'LSG_FILL_RECTANGLE'/
	DATA		GKS_NAMES(XLSG_PLANE_SELECT)/'LSG_PLANE_SELECT'/
	DATA		GKS_NAMES(XLSG_PLANE_OFFSET)/'LSG_PLANE_OFFSET'/
	DATA		GKS_NAMES(XLSG_PACKING_MODE)/'LSG_PACKING_MODE'/
	DATA		GKS_NAMES(XLSG_ROTATION_MODE)/'LSG_ROTATION_MODE'/
	DATA		GKS_NAMES(XLSG_PLANE_VISIBLE)/'LSG_PLANE_VISIBLE'/
	DATA		GKS_NAMES(XLSG_PIXEL_SIZE)/'LSG_PIXEL_SIZE'/
	DATA		GKS_NAMES(XGSCHH)/'GSCHH'/
	DATA		GKS_NAMES(XGSCHUP)/'GSCHUP'/
	DATA		GKS_NAMES(XGSTXCI)/'GSTXCI'/
	DATA		GKS_NAMES(XGSTXFP)/'GSTXFP'/
	DATA		GKS_NAMES(XGTX)/'GTX'/
	DATA		GKS_NAMES(XLSG_STRING_WIDTH)/'LSG_STRING_WIDTH'/
	DATA		GKS_NAMES(XLSG_BEGIN_FEATURE)/'LSG_BEGIN_FEATURE'/
	DATA		GKS_NAMES(XLSG_END_FEATURE)/'LSG_END_FEATURE'/
	DATA		GKS_NAMES(XLSG_STRING_BOUNDS)/'LSG_STRING_BOUNDS'/
	DATA		GKS_NAMES(XLSG_SET_PATTERN)/'LSG_SET_PATTERN'/
	DATA		GKS_NAMES(XGGDP)/'GGDP'/
C
	INTEGER	I,IERR
C
	CALL LIB$ESTABLISH(GKS_EXP_HAND_FIMS)
C
	DO 10 I= 1,MAX_ROUTINES
	   GKS_ADDR(I) = 0
	   IERR = LIB$FIND_IMAGE_SYMBOL(
     &	            LOGNAM,
     &	            GKS_NAMES(I)(:SIGCHS(GKS_NAMES(I))),
     &	            GKS_ADDR(I))
C
C If the error is key-not-found (the entry point is missing) then
C continue, otherwise return the error code
	   IF (.NOT.IERR) THEN
	      IF (LIB$MATCH_COND(IERR,LIB$_KEYNOTFOU).EQ.0) GOTO 9990
	      IERR = 1	! treat key not found as success
	   ENDIF
10	CONTINUE
C
C check that we got at least a GOPWK routine
	IF (GKS_ADDR(XGOPWK).NE.0) THEN
	   GKS_SETUP = .TRUE.
	ELSE
	   IERR = LIB$_KEYNOTFOU
	ENDIF
C
9990	LSGA_LOAD_GKS = IERR
	RETURN
	END
C
	SUBROUTINE	LSGA_GOPKS(ERRFIL)
C
**	MODULE	LSGA_GOPKS
**	IDENT	17JL90
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					CCB	2-Aug-1990
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	ERRFIL			! error message file
C
***	COMMON/GKSDAT2/
C
	IF (GKS_SETUP) CALL GKS_CALL(%VAL(GKS_ADDR(XGOPKS)))
C
	RETURN
	END	
C
	SUBROUTINE	LSGA_GCLKS
C
**	MODULE	LSGA_GCLKS
**	IDENT	17JL90
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					CCB	2-Aug-1990
C
	IMPLICIT NONE
C
***	COMMON/GKSDAT2/
C
	IF (GKS_SETUP) CALL GKS_CALL(%VAL(GKS_ADDR(XGCLKS)))
C
	RETURN
	END	
C
	SUBROUTINE	LSGA_GOPWK(WKID,CONID,WTYPE)
C
**	MODULE	LSGA_GOPWK
**	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					CCB	2-Aug-1990
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	WKID			! workstation-identifier
	INTEGER	CONID			! connection-identifier
	INTEGER	WTYPE			! workstation type
C
***	COMMON/GKSDAT2/
***	COMMON/GKSESL/
C
C Local variables
	INTEGER	DEV
C
	GKSERR	= 0			! no errors
C
C find a free device slot to use
	DO 10 DEV=WSMAX+1,WSMAX+AUXMAX
	   IF (WKIDS(DEV).LT.0) GOTO 20
10	CONTINUE
	GOTO 999	! error, no slots
C
C initialise lots of things for the device
20	WKIDS(DEV) = WKID
C
	IF (GKS_SETUP) THEN
	   CALL GKS_CALL(%VAL(GKS_ADDR(XGOPWK)))
	   GKS_INUSE = .TRUE.
	ENDIF
C
999	RETURN
	END
C
	SUBROUTINE LSGA_GQMDS(WTYPE,ERRIND,COOUNI,RX,RY,LX,LY)
C
***	MODULE	LSGA_GQMDS
***	IDENT	14SE83
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					SCM	14-Sept-1983
C
C INQUIRE MAXIMUM DISPLAY SURFACE SIZE
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	WTYPE		! Workstation type
	INTEGER	ERRIND		! Error indicator
	INTEGER	COOUNI		! Device Coordinate Units
	REAL	RX,RY		! Max. display surface size in DC
	INTEGER	LX,LY		! no. of device units in X and Y
C
***	COMMON/GKSDAT2/		! GKS data structures
C
	IF (GKS_SETUP) CALL GKS_CALL(%VAL(GKS_ADDR(XGQMDS)))
C
	RETURN
	END
C
C
C***********************************************************************
C
	SUBROUTINE LSGA_GQPLF(
     &		WTYPE,N,ERRIND,NLT,LT,NLW,NOMLW,RLWMIN,RLWMAX,NPPLI)
C
***	MODULE	LSGA_GQPLF
***	IDENT	16MY84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					CCB	16-May-1984
C
C INQUIRE POLYLINE FACILITIES
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	WTYPE		! Workstation type
	INTEGER	N		! list element requested
	INTEGER	ERRIND		! Error indicator
	INTEGER NLT		! number of available linetypes
	INTEGER	LT		! N'th element of available linetypes
	INTEGER NLW		! number of available linewidths
	REAL	NOMLW		! nominal linewidth (DC)
	REAL	RLWMIN,RLWMAX	! range of linewidths
	INTEGER	NPPLI		! number of predefined polyline indices
C
***	COMMON/GKSDAT2/		! GKS data structures
C
	IF (GKS_SETUP) CALL GKS_CALL(%VAL(GKS_ADDR(XGQPLF)))
C
	RETURN
	END
