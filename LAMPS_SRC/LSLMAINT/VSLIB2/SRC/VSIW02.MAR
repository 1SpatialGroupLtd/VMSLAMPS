; VS11 Input/Output Workspace

	.PSECT	VSIW, NOEXE,GBL,OVR,PAGE

; BUFFERS - the Sigma ARGS uses buffer VSBUF, but the first 4 words are
; used as a header. The Sigma also needs a secondary buffer, for receiving
; information requested from the ARGS. This is SGHDR2, and is the minimum
; length possible - ie header+3 words. ALWAYS keep the headers adjacent to
; the buffer (so that read requests will work).

VSBFSZ	= 512

	.ALIGN	PAGE

;********************* V S B U F   S T A R T ***************************

; the buffer starts with a Sigma header block

VSBUF:		.BLKW	4		; main display file, header
SGBUF1:		.BLKW	VSBFSZ-4	; main display file, buffer

;********************* V S B U F   E N D ********************************

SGHDRL=4
VSBFLIM: 	.BLKL	1		; address of end of buffer
VSBPTR:		.BLKL	1		; pointer into buffer

; and the error status from the read
VSSTATUS:	.QUAD	0
VSERR:		.LONG	0		; used for debugging purposes
VSINTERR:	.LONG	0		;	"	"	"

;		*********************************

; and buffers for use by the TB AST - one for primary and one for secondary
; first the PRIMARY...
SGTBHDR:	.BLKW	4		; the header for TB AST request instn
SGTBINST:	.WORD	SIGDEV		; the read/select instruction
SGTBINS2:	.WORD	SIGDEV		; the write FBs instn
SGTBINS3:	.BLKW	1		; and the FBs to write

SGTBRDL = 5				; length of primary read buffer (inc hdr)
SGTBWTL = 3				; length of primary write buffer

; and now the SECONDARY...
SGHDR3:		.BLKW	4		; secondary buffer header for TB AST
SGBUF3:					; and the secondary TB buffer itself
SGTBX:		.BLKW	1		; track ball X value
SGTBY:		.BLKW	1		; track ball Y value
SGTBSW:		.BLKW	1		; tracker ball switch (buttons)

SGTBLEN = 7				; length of header + X,Y,switch

; and our error status
SGSTATUS:	.QUAD	0

;		*********************************

; also save the current function button light status...

SGSAVFB:	.WORD	0		; all unlit initially

; and save the values we just read

SGOLDXC:	.BLKW	1
SGOLDYC:	.BLKW	1
SGOLDFB:	.BLKW	1

; and a flag to note if the TB is engaged...
TBISON:		.BYTE	0		; TB off initially

; DPB for output transfers
VO.DPB:		$QIOW	FUNC=IO$_WRITEVBLK,-
			P5=0

VO.FUNC  = VO.DPB+QIO$_FUNC
VO.IOSB  = VO.DPB+QIO$_IOSB
VO.CHAN  = VO.DPB+QIO$_CHAN
VO.EFN	 = VO.DPB+QIO$_EFN

VO.HDR	 = VO.DPB+QIO$_P1		; header address
VO.LEN	 = VO.DPB+QIO$_P2		; header length (ie #4)
VO.START = VO.DPB+QIO$_P3		; buffer address (ie SGBUF1)
VO.LEN2	 = VO.DPB+QIO$_P4		; buffer length



; DPB for input transfers
VI.DPB:		$QIOW	FUNC=IO$_READVBLK,-
			P5=0

VI.FUNC	=  VI.DPB+QIO$_FUNC
VI.IOSB  = VI.DPB+QIO$_IOSB
VI.CHAN	=  VI.DPB+QIO$_CHAN
VI.EFN	=  VI.DPB+QIO$_EFN

VI.BUF1	=  VI.DPB+QIO$_P1		; output buffer (VSBUF)
VI.LEN1	=  VI.DPB+QIO$_P2		; length of VSBUF
VI.BUF2 =  VI.DPB+QIO$_P3		; input buffer
VI.LEN2 =  VI.DPB+QIO$_P4		; length


; DPB for reading TB/FBs within the Sigma TB_AST
TBR.DPB:	$QIOW	FUNC=IO$_READVBLK,-	; read
			P2=SGTBRDL,-		; length of header
			P4=SGTBLEN		; length of buffer

TBR.FUNC=  TBR.DPB+QIO$_FUNC
TBR.IOSB=  TBR.DPB+QIO$_IOSB
TBR.CHAN=  TBR.DPB+QIO$_CHAN
TBR.EFN =  TBR.DPB+QIO$_EFN

TBR.P1  =  TBR.DPB+QIO$_P1
TBR.P2  =  TBR.DPB+QIO$_P2
TBR.P3  =  TBR.DPB+QIO$_P3
TBR.P4  =  TBR.DPB+QIO$_P4


; DPB for resetting TB and rewriting FBs within the Sigma TB_AST
TBW.DPB:	$QIOW	FUNC=IO$_WRITEVBLK,-
			P2=4,-			; length of header
			P4=SGTBWTL		; length of buffer

TBW.FUNC=  TBW.DPB+QIO$_FUNC
TBW.IOSB=  TBW.DPB+QIO$_IOSB
TBW.CHAN=  TBW.DPB+QIO$_CHAN
TBW.EFN =  TBW.DPB+QIO$_EFN

TBW.P1  =  TBW.DPB+QIO$_P1
TBW.P2  =  TBW.DPB+QIO$_P2
TBW.P3  =  TBW.DPB+QIO$_P3
TBW.P4  =  TBW.DPB+QIO$_P4

	.PSECT
