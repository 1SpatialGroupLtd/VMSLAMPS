C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1985-04-24 12:03:56.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C
C These routines form a quick and nasty package for saving (part of) a
C screen image from the ARGS in a mapped file, and re-drawing it.
C Not presently part of VSLIB at all.
C Outstanding problem: still needs write access even when restoring file
C since VSPXWT writes to array.

	SUBROUTINE VSSAVE(FILE,XSTART,YSTART,XCNT,YCNT)
C
***	MODULE	VSSAVE
***	IDENT	24AP85
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C
C To save screen image from ARGS
C
	IMPLICIT NONE
C
***	PARAMETER/HERE:SCRDEF/
C
C arguments
	CHARACTER*(*)	FILE			! filename to save in
	INTEGER		XSTART,YSTART		! start pixel
	INTEGER		XCNT,YCNT		! number in x and y
C
C function called
	INTEGER		VIO$OPEN_SEC
C
C workspace
	INTEGER		NBYTES,NWORDS,NPAGE
	INTEGER		IERR,SECADR,BYTES
	INTEGER		NIO,YLINE,I,YSTEP,ADDRESS
C
C calculate number of y lines we can do in a single IO operation, and
C the number of operations required
	YSTEP = 32000/XCNT
	NIO = YCNT/YSTEP
	IF (NIO*YSTEP.LT.YCNT) NIO = NIO+1
C
	NBYTES = XCNT*YSTEP		! number of bytes in each IO
	NWORDS = (NBYTES+1)/2		! number of words
C
C number of pages in mapped file (each IO requires 13 words workspace)
	NPAGE = ((XCNT*YCNT+1)/2+13*NIO+255)/256
C
C create mapped file
	IERR = VIO$OPEN_SEC(FILE,NPAGE,.TRUE.,.TRUE.,SECADR,BYTES,1)
	IF (.NOT.IERR) THEN
	   CALL LIB$SIGNAL(%VAL(IERR))
	   GOTO 999
	ENDIF
C
C set number of IO's at start of mapped file
	CALL PUTINT(NIO,%VAL(SECADR+TRANSFER_COUNT))
	ADDRESS = SECADR+2		! start address for data
	YLINE = YSTART			! starting y line
C
	DO 100 I=1,NIO
C
C number of y lines is YSTEP, except for last IO, which may be less
	   YSTEP = MIN(YSTEP,YCNT-YLINE+YSTART)
	   NWORDS = (XCNT*YSTEP+1)/2	! number of words to IO
C
C load header for VSPXRD
	   CALL PUTINT(3,%VAL(ADDRESS+READ_3))
	   CALL PUTINT(XSTART,%VAL(ADDRESS+READ_XS))
	   CALL PUTINT(YLINE,%VAL(ADDRESS+READ_YS))
	   CALL PUTINT(XCNT,%VAL(ADDRESS+READ_XC))
	   CALL PUTINT(YSTEP,%VAL(ADDRESS+READ_YC))
	   CALL PUTINT(NWORDS,%VAL(ADDRESS+READ_WORDS))
C
	   CALL VSPXRD(%VAL(ADDRESS+READ_START))
C
C and now prepare header for VSPXWT
	   CALL PUTINT(0,%VAL(ADDRESS+WRITE_SIZE))
	   CALL PUTINT(3,%VAL(ADDRESS+WRITE_3))
	   CALL PUTINT(XSTART,%VAL(ADDRESS+WRITE_XS))
	   CALL PUTINT(YLINE,%VAL(ADDRESS+WRITE_YS))
	   CALL PUTINT(XCNT,%VAL(ADDRESS+WRITE_XC))
	   CALL PUTINT(YSTEP,%VAL(ADDRESS+WRITE_YC))
	   CALL PUTINT(NWORDS,%VAL(ADDRESS+WRITE_WORDS))
C
C and step on for next IO
	   YLINE = YLINE+YSTEP
	   ADDRESS = ADDRESS + (NWORDS+13)*2
100	CONTINUE
C
	CALL VIO$CLOSE_SEC(1)
999	RETURN
	END
C
	SUBROUTINE VSDRAW(FILE)
C
***	MODULE	VSSAVE
***	IDENT	17JA85
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C
C To draw screen image on ARGS
C
	IMPLICIT NONE
C
***	PARAMETER/HERE:SCRDEF/
C
C arguments
	CHARACTER*(*)	FILE		! filename
C
C function called
	INTEGER		VIO$OPEN_SEC
C
C workspace
	INTEGER		IERR,SECADR,I,NIO,ADDRESS,NWORDS,NPAGE,BYTES
	INTEGER*2	I2
C
C open mapped file
	IERR = VIO$OPEN_SEC(FILE,NPAGE,.TRUE.,.FALSE.,SECADR,BYTES,1)
	IF (.NOT.IERR) THEN
	   CALL LIB$SIGNAL(%VAL(IERR))
	   GOTO 999
	ENDIF
C
C read number of IO operations, and convert to long
	CALL PUTINT(%VAL(SECADR),I2)
	NIO = I2
	ADDRESS = SECADR+2		! start address
C
	DO 100 I=1,NIO
C
C get number of words in this IO, and convert to long
	   CALL PUTINT(%VAL(ADDRESS+WRITE_WORDS),I2)
	   NWORDS = I2
C
C perform the pixel write
	   CALL VSPXWT(%VAL(ADDRESS+WRITE_START))
C
C and step on adress for next IO
	   ADDRESS = ADDRESS + (NWORDS+13)*2
100	CONTINUE
C
	CALL VIO$CLOSE_SEC(1)
999	RETURN
	END
C
	SUBROUTINE PUTINT(FROM,TO)
C
***	MODULE	PUTINT
***	IDENT	17JA85
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C
C To copy a word
C
	IMPLICIT NONE
C
C arguments
	INTEGER*2	FROM,TO
C
	TO = FROM
	RETURN
	END
