C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-08-04 17:59:20.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	PROGRAM	VSCI
C
C Command Interpreter for the VS11 Graphics Library
C
***	MODULE	VSCI
***	IDENT	04AU86

***	COMMON	/LSL$CMNVIO:CMDCOM/
***	COMMON	/LSL$CMNVIO:TXTC/

	EXTERNAL	VSLIB_CMD_TABLE

C Functions:
	INTEGER*4	RDCOMM
	INTEGER*2	TXTCML
	LOGICAL		RDCHS
	LOGICAL		RDINT
	LOGICAL		RDHEX

C Parameter for PXARR
	PARAMETER	PXLEN  = 508
	PARAMETER	PXBLEN = 1000

C Workspace:
	INTEGER*4	CMD
	INTEGER*2	NCHS
	INTEGER*4	SWITCH
	INTEGER*4	NUM, II
	INTEGER*4	XCOL,YLINE
	INTEGER*2	PXARR(PXLEN)	! for VSPXWT subroutine
	BYTE		PXBARR(PXBLEN)	! and byte alias
	BYTE		TEMP(4),NUMB
	BYTE		ICH
	REAL*4		XC,YC, DX, DY
	LOGICAL*1	PXWT
	EQUIVALENCE	(NUM,NUMB)
	EQUIVALENCE	(PXARR(8),PXBARR(1))

10	NCHS=TXTCML('VCOM> ')
	IF (NCHS .LE. 0) THEN
	   IF (NCHS.EQ.-10) GOTO 1800
	   CALL WRITEF('Error getting CML')
	   GOTO 10
	ENDIF
	CMD=RDCOMM(VSLIB_CMD_TABLE)
	IF (CMD .LT. 0) GOTO 20

C Branch on value in CMD
	GOTO (10,100,200,300,400,500,600,700,800,900,
     &		1000,1100,1200,
     &		1300,1400,1500,1600,1700,1800,
     &		1900,2000,2100,2200,2300,2400,2500,2600,
     &		2700,2800,2900,3000,3100,3200,
     &		3300,3400,3500,3600,3700,3800,3900),CMD+1
20	CALL TTWSTR('Illegal Command')
	GOTO 10

C Call the appropriate VSLIB commands

C init the display
100	CALL VSINIT(INTARG(1),SWITCH)
	IF (SWITCH.EQ.1) THEN
	   CALL WRITEF('VS11 display')
	ELSE
	   CALL WRITEF('Sigma ARGS display')
	ENDIF
	GOTO 10

C clear the appropriate picture
200	CALL VSCLR(INTARG(1))
	GOTO 10

C select a picture for display
300	CALL VSPIC(INTARG(1))
	GOTO 10

C select the current colour
400	CALL VSCOL(INTARG(1))
	GOTO 10

C select a picture for write
500	CALL VSSEL(INTARG(1))
	GOTO 10

C wait for N units, or until joystick used
600	CALL VSWTJS(INTARG(1))
	GOTO 10

C set user origin
700	CALL VSORGN(REALAR(1),REALAR(2))
	GOTO 10

C move to...
800	CALL VSMTO(REALAR(1),REALAR(2))
	GOTO 10

C move by...
900	CALL VSMBY(REALAR(1),REALAR(2))
	GOTO 10

C line to...
1000	CALL VSLTO(REALAR(1),REALAR(2))
	GOTO 10

C line by...
1100	CALL VSLBY(REALAR(1),REALAR(2))
	GOTO 10

C write cursor to...
1200	CALL VSCSWT(REALAR(1),REALAR(2))
	GOTO 10

C change user units
1300	CALL VSUNIT(REALAR(1))
	GOTO 10

C write a string
1400	CALL VSCHRS(STARST)
	GOTO 10

C flush accumulated commands
1500	CALL VSGEN
	GOTO 10

C cursor off/on
1600	CALL VSCURS(INTARG(1))
	GOTO 10

C read cursor position
1700	CALL VSCSRD(XC,YC)
	CALL WRITEF('Cursor Position: X = %F, Y = %F',XC,YC)
	GOTO 10

C stop display & exit
1800	CALL VSINIT(0)
	CALL EXIT

C blink on/off for colour - (colour, blink)
1900	CALL VSBLNK( INTARG(1), INTARG(2) )
	GOTO 10

C write to FBs (FB number, on/off)
2000	CALL VSFBWT( INTARG(1), INTARG(2) )
	GOTO 10

C read FB presses
2100	CALL VSFBRD( SWITCH )
	CALL WRITEF('Button %N is on',SWITCH)
	GOTO 10

C read TB (tracker ball)
2200	CALL VSTBRD( DX, DY )
	CALL WRITEF('Trackerball %F, %F', DX, DY)
	GOTO 10

C set/reset TB (use before using FBs/TB)
2300	CALL VSTBON
	GOTO 10

C draw a filled block
2400	CALL VSFILL( REALAR(1), REALAR(2), REALAR(3), REALAR(4) )
	GOTO 10

C return screen size
2500	CALL VSSIZE( DX, DY )
	CALL WRITEF('Screen size is %F by %F',DX,DY)
	GOTO 10

C change a colour
2600	DO 2650 II = 1,4
	   IF (RDHEX(NUM)) THEN
	      CALL WRITEF('Bad number %N, command ignored',II)
	      GOTO 10
	   ELSE
	      TEMP(II) = NUMB
	   ENDIF
2650	CONTINUE
	CALL VSSGSC( INTARG(1), TEMP )
	GOTO 10

C set a deashed line up
2700	CALL VS_DASHED( INTARG(1), REALAR(1), REALAR(2), REALAR(3) )
	GOTO 10

C program a blink generator
2800	CALL VSSGPB( INTARG(1), INTARG(2), INTARG(3) )
	GOTO 10

C read in a new system constants file
2900	CALL VSRDSC( STARST, NUM )
	CALL GEN_SYSMSG( NUM )		! generate error message for it
	GOTO 10

C do a pixel write - this requires a nicely primed array, so we shall
C prompt for the values we need to have...
3000	PXWT = .TRUE.
	NCHS=TXTCML('size-1: ')
	IF (NCHS .LE. 0) GOTO 3098
	CALL BSLN
	IF (RDINT(PXARR(1))) GOTO 3099
C
C join here for PXRD
3002	PXARR(2) = 3			! force this value
	NCHS=TXTCML('X start: ')
	IF (NCHS .LE. 0) GOTO 3098
	CALL BSLN
	IF (RDINT(PXARR(3))) GOTO 3099
C
	NCHS=TXTCML('Y start: ')
	IF (NCHS .LE. 0) GOTO 3098
	CALL BSLN
	IF (RDINT(PXARR(4))) GOTO 3099
C
	NCHS=TXTCML('no of X pts (columns): ')
	IF (NCHS .LE. 0) GOTO 3098
	CALL BSLN
	IF (RDINT(PXARR(5))) GOTO 3099
C
	NCHS=TXTCML('no of Y pts (lines): ')
	IF (NCHS .LE. 0) GOTO 3098
	CALL BSLN
	IF (RDINT(PXARR(6))) GOTO 3099
C
C and thus total number of points is...
	NUM = PXARR(5) * PXARR(6)
C
C this means that we have half as many (rounded UP) words of data
C and the final element in the array is thus
	NUM = (NUM+1)/2
	PXARR(7) = NUM
	IF (PXWT) THEN
	   NUM = NUM + 8
	ELSE
	   NUM = NUM + 11
	ENDIF
	IF (NUM.GT.PXLEN) THEN
	   CALL WRITEF('Too many points (> %N)',PXLEN)
	   GOTO 10
	ENDIF
	PXARR(NUM) = 0
C
	IF (.NOT.PXWT) GOTO 3060
C
C now prompt for all the points...
	CALL WRITEF('For each line, specify the requested number')
	CALL WRITEF('of colours, separated by spaces or tabs')
	CALL WRITEF(' ')
	YLINE = 0			! start with first line
C
C loop for a line
3010	IF (YLINE.EQ.PXARR(6)) GOTO 3050	! got all our points
	XCOL = PXARR(5)		! number of X points in a line
	NUM = YLINE * XCOL		! number of points so far
	YLINE = YLINE + 1		! next line
C
3020	CALL WRITEF('line %N (%N points needed)',YLINE,XCOL)
	NCHS = TXTCML(': ')
	IF (NCHS.LT.0) GOTO 3098
C
	CALL BSLN
3030	NUM = NUM+1			! next point in array
	IF (RDINT(PXBARR(NUM))) THEN	! end of line or bad char
	   IF (.NOT.RDCHS(ICH)) THEN	! not end of line (could read)
	      CALL WRITEF('bad character (''%A1'') on line',ICH)
	      YLINE = YLINE - 1		! ignore line so far
	      GOTO 3010			! and prompt for it again
	   ELSE				! WAS end of line
	      IF (XCOL.LT.1) THEN
		 GOTO 3010		! finished this line, next
	      ELSE
		 GOTO 3020		! need more of this line
	      ENDIF
	   ENDIF
	ELSE				! was an OK number, get next
	   XCOL = XCOL - 1			! (need one less now)
	   GOTO 3030
	ENDIF
C
C and we finally have our array complete
3050	CALL VSPXWT( PXARR(1) )		! do it
	GOTO 10				! next command
C
C here to do pixel read
3060	CALL VSPXRD( PXARR(2) )
C
C now write out all the points...
	YLINE = 0			! start with first line
C
C loop for a line
3061	IF (YLINE.EQ.PXARR(6)) GOTO 10	! done all our points
	XCOL = PXARR(5)		! number of X points in a line
	NUM = YLINE * XCOL + 8		! number of points so far
	YLINE = YLINE + 1		! next line
C
	CALL WRITEF('line %N (%N points )',YLINE,XCOL)
3062	CALL EXPAND
	II = 0
3063	NUM = NUM+1			! next point in array
	CALL APPEND('%^B%I4',PXBARR(NUM))
	II = II+1
	XCOL = XCOL - 1			! (need one less now)
	IF (XCOL.LT.1) THEN		! finished this line, next
	   CALL TTWLIN
	   GOTO 3061
	ENDIF
	IF (II.LT.16) GOTO 3063		! room for more
	CALL TTWLIN			! output
	GOTO 3062			! need more of this line
C
C error getting CML for VSPXWT promp
3098	IF (NCHS.EQ.-10) GOTO 10
	CALL WRITEF('Error getting CML')
	GOTO 10
C
C error reading a number itself
3099	CALL WRITEF('Error reading number')
	GOTO 10
C
C SCROLL
3100	CALL VSCROL(INTARG(1),INTARG(2),INTARG(3))
	GOTO 10
C
C ZOOM
3200	CALL VSZOOM(INTARG(1),INTARG(2),INTARG(3))
	GOTO 10
C
C CSWP (cursor write Pixel)
3300	CALL VSCSWP(INTARG(1),INTARG(2))
	GOTO 10
C
C CSRP (cursor read Pixel)
3400	CALL VSCSRP(INTARG(1),INTARG(2))
	CALL WRITEF('Cursor Position: X = %^L%NF, Y = %N',
     &			INTARG(1),INTARG(2))
	GOTO 10
C
C DEF (define planes in picture)
3500	CALL VSDEF(INTARG(1),INTARG(2),INTARG(3))
	GOTO 10
C
C CHSZ (set character size and direction)
3600	CALL VSCHSZ(INTARG(1),INTARG(2))
	GOTO 10
C
C PXRD (pixel read)
3700	PXWT = .FALSE.		! not write
	GOTO 3002		! join pixel write
C
C ZPA (z plane assignment)
3800	CALL VSZPA(INTARG(1),INTARG(2))
	GOTO 10
C
C ZDO (z data out instruction)
3900	CALL VSZDO(INTARG(1))
	GOTO 10
C
	END
