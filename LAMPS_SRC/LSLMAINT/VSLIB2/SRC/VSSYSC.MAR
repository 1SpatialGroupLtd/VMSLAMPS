;
; * This file is part of the LAMPS distribution, released as a software
; * preservation project to archive digital history for future historians.
; * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
; *
; * Timestamp of this file for the 2002 release was: 1987-12-23 17:18:50.000000000 +0000
; *
; * This program is free software: you can redistribute it and/or modify
; * it under the terms of the GNU General Public License as published by
; * the Free Software Foundation, version 3.
; *
; * This program is distributed in the hope that it will be useful, but
; * WITHOUT ANY WARRANTY; without even the implied warranty of
; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
; * General Public License for more details.
; *
; * You should have received a copy of the GNU General Public License
; * along with this program. If not, see http://www.gnu.org/licenses/.
;
	.TITLE VSSYSRD
	.IDENT /23DE87/

	$RMSDEF
 
;			    V S L I B
;
;	     S Y S T E M   C O N S T A N T S   F I L E
;
;		  R E A D    F A C I L I T I E S
 
;
; Copyright LaserScan Laboratories Ltd.
;
; file name argument added to VS_OPSYSC			TJI	13-Dec-1982
; copied for VSLIB, and most of it removed		TJI	 1-Oct-1982
; Author						TJI	 9-Sep-1981
;
; file read facilities to go with VSLIB, for opening, closing and reading
; the system constants file. Adapted from VIOLIB FILEIO routines (by taking
; out most of them!)
;
; remember - if low bit of IERR is unset, then we have an ERROR.
;		ie: an EVEN number is an ERROR
;
; we have:
; error = VS_OPSYSC( [file-name] [,IERR] )	open file
; error = VS_CLSYSC( [IERR] )			close file
; error = VS_RDSYSC( [IERR] )			read a line into buffer
 
; E R R O R S
; In all cases, error is returned with a negative value for an error.
; Otherwise, for VS_RDSYSC it returns the number of characters
; read, and for the other routines it produces zero.
; The negative values returned are -10 for end-of-file encountered, and
; -1 for other errors.
; Note that, in all cases, IERR is returned as a longword.

;**********************************
; ALWAYS assemble with VSTXTC.MAR
;**********************************
 
; define our data PSECT...
	DATA_PSECT	VS
 
; file and record handling descriptors...
 
VS_SYSC_FAB:	$FAB	FNA = VS_SYSC_FNA,-
			FNS = VS_SYSC_FNS,-
			FAC = GET			; read it

VS_SYSC_RAB:	$RAB	FAB = VS_SYSC_FAB,-		; link to it's FAB
			UBF = VS_TXTBUF			; buffer

; and now a PSECT for the actual code...
	CODE_PSECT	VS
 
VS_SYSC_FNA:	.ASCII	/LSL$IDSY02:/			; assumed file name
VS_SYSC_FNS = .-VS_SYSC_FNA				; length

;**********************************************************************	VS_OPSYSC
	.ENTRY	VS_OPSYSC, ^M<R2,R11>
;
; start off any argument list
	JSB	G^VIO$1ST		; init argument reading
;
; and get the file name, if there is one
	JSB	G^VIO$GNA		; 'get next arg'
	BCS	10$			; didn't have one given, use default
	MOVAQ	(R0),R1			; and shift the string
;
; store our filename - overwrites the value declared with the FAB
	$FAB_STORE	FAB= VS_SYSC_FAB,-
			FNA=@4(R1),-		; the filename buffer
			FNS=  (R1)		; and the filename length
;
; insert our buffer size...
10$:	$RAB_STORE	RAB= VS_SYSC_RAB,-
			USZ= VS_TXTLIM			; buffer size
;
; and actually open the file
	$OPEN		FAB= VS_SYSC_FAB
	BLBC		R0,ENDIT		; if error, wander off
	$CONNECT	RAB= VS_SYSC_RAB	; connect RAB to FAB
;
; common ending, with error return, etc
ENDIT:	MOVL	R0,R1			; remember error return
	CLRL	R2			; assume return will be false - no err
; if low bit of R1 clear (even) then we had an error...
	BLBS	R1,90$			; branch if no error
	CMPL	R1,#RMS$_EOF		; EOF error?
	BNEQ	50$			; no
	MNEGL	#10,R2			; yes, return -10
	BRB	90$
50$:	MNEGL	#1,R2			; no, return -1
90$:	JSB	G^VIO$GNA		; try to get IERR
	BCS	100$			; branch if no IERR given
	MOVL	R1,(R0)			; put error code in IERR
100$:	MOVL	R2,R0			; return true/false
	RET				; and go away
 
 
;**********************************************************************	VS_CLSYSC
	.ENTRY	VS_CLSYSC, ^M<R2,R11>
;
; start off any argument list
	JSB	G^VIO$1ST		; init argument reading
;
	$CLOSE	FAB= VS_SYSC_FAB	; close the file
	BRW	ENDIT

;**********************************************************************	VS_RDSYSC
	.ENTRY	VS_RDSYSC, ^M<R2,R11>
;
; start off any argument list
	JSB	G^VIO$1ST		; init argument reading
;
	$GET	RAB=VS_SYSC_RAB		; read a line
	MOVW	VS_SYSC_RAB+RAB$W_RSZ,-
		VS_TXTPTR		; save no. of chars read
; now deal with error returns, etc...
	BRW	ENDIT

; and finish off the whole module...
	.PSECT
	.END
