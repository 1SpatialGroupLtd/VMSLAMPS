	.TITLE	VSCS
 
	.IDENT	/07MY87/
 
	CODE_PSECT	VS
 
 
; Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
;
; Author: 				Susan Manning
; Amended to cope with Sigma ARGS:	Tony J Ibbs	Sept/Oct 1982
 
; VSLIB CURSOR CONTROL ROUTINES
 

; VSCURS(N)	turns cursor off or on ( N = 0 or 1 )

.ENTRY	VSCURS,^M<R4,R5,R6>
	MOVZWL	@4(AP),R6		; get on/off status
	BICL2	#MASK1,R6		; mask to 1 bit
	MOVZWL	SGREG2,R4		; get video status reg 2 (copy of)
	INSV	R6,#SGCSR,#1,R4		; insert appropriate one or zero
	CMPW	R4,SGREG2		; have we changed it?
	BEQL	10$			; no, do nowt
	MOVW	R4,SGREG2		; store the new version
	MOVL	#4,R0			; about to do 4 words instn
	JSB	$VSCHKBF		; check there's room
	MOVW	#SIGVSR,R4		; the opcode
	JSB	$VSBFW			; buffer it
	MOVW	SGREG1,R4		; the first register
	JSB	$VSBFW
	MOVW	SGREG2,R4		; the second register
	JSB	$VSBFW
	MOVW	SGREG3,R4		; and the third (last) register
	JSB	$VSBFW
	JSB	$VFLUSH			; flush for immediate action
10$:	RET 
 
 
; VSCSWT(X,Y)	specifies a new cursor position

.ENTRY	VSCSWT,^M<R4,R5,R6,R7,R8,R9>
	MOVF	@4(AP),R7
	MOVF	@8(AP),R9
	BSBB	VS$CSWT
	RET
 
; the actual work is done here
VS$CSWT::
	MOVF	R7,VSCSX		; save the new position (in user
	MOVF	R9,VSCSY		; coords) for a later VSCSRD
; now work out where to draw the cursor on the screen
	ADDF2	VSRUOX,R7		; add in user origin offsets
	ADDF2	VSRUOY,R9
	MULF3	VSTRX,R7,R6		; transform to pixels
	MULF3	VSTRY,R9,R8
	ADDF2	VSCEN,R6		; relative to bottom left hand corner
	ADDF2	VSCEN,R8
	MOVF	R6,VSHCSX		; save the 'hardware' position of the
	MOVF	R8,VSHCSY		; cursor
	CVTFW	R6,R7			; convert it to integer counts
	BGEQ	30$
	CLRW	R7			; force in range at bottom
30$:	CMPW	R7,VSEXT
	BLEQ	40$
	MOVW	VSEXT,R7		; force in range at top
40$:	CVTFW	R8,R9			; now same for Y
	BGEQ	50$
	CLRW	R9
50$:	CMPW	R9,VSEXT
	BLEQ	60$
	MOVW	VSEXT,R9
60$:
VS$CSWP:MOVL	#4,R0			; outputting 4 words
	JSB	$VSCHKBF		; is there room?
	MOVW	#SIGXCL,R4		; position cursor in X
	JSB	$VSBFW			; buffer it
	MOVW	R7,R4			; and the X move
	JSB	$VSBFW
	MOVW	#SIGYCL,R4		; move cursor in Y
	JSB	$VSBFW
	MOVW	R9,R4			; and the Y move
	JSB	$VSBFW
	JSB	$VFLUSH			; change cursor pos. immediately
	RSB
 
; VSCSWP(IX,IY) write cursor to Pixel position IX,IY

.ENTRY	VSCSWP,^M<R4,R5,R7,R9>
	MOVL	@4(AP),R7		; x position
	MOVL	@8(AP),R9		; y position
	MOVL	R7,VSPCSX
	MOVL	R9,VSPCSY
	BSBW	VS$CSWP
	RET
 
; VSCSRP(IX,IY) read cursor Pixel position

.ENTRY	VSCSRP,^M<>
	MOVL	VSPCSX,@4(AP)
	MOVL	VSPCSY,@8(AP)
	RET

; VSCSRD(X,Y)	returns the current cursor position in X,Y

.ENTRY	VSCSRD,^M<R4,R5,R6,R7,R9>
; return the cursor position as stored by the last VSCSWT
	MOVF	VSCSX,@4(AP)
	MOVF	VSCSY,@8(AP)
	RET

 
; VSWTJS(TIM)	waits for the joystick switch to be pressed, timing out
;		after TIM seconds
; 		NOTE that this is a no op for the Sigma ARGS

.ENTRY	VSWTJS,^M<>
	RET
 
	.END
