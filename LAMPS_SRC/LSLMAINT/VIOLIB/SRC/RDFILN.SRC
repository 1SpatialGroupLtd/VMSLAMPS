C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1984-08-14 12:43:08.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL	FUNCTION RDFILN( RESULT, RESLEN,
     &				 SOURCE, DEFAULT, ALLOW_VER,
     &				 ERRCOD, IERR )
C
***	IDENT	14AU84
***	MODULE	RDFILN
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 25 July 1984
C
C This function takes the filename in SOURCE and parses it against the
C DEFAULT supplied. It returns TRUE if this fails (more detailed error
C code in IERR), and FALSE if all goes well.
C
C The constituent parts of the filename are also stored into the
C RDFILN common block.
C
C ALLOW_VER is TRUE if version numbers are to be allowed in the
C filename, FALSE otherwise
C
	IMPLICIT NONE
C
C include system parameters, for SS$_NORMAL
C
	INCLUDE		'($SSDEF)'
C
C common
C
***	COMMON/LSL$CMNVIO:RDFILN/	! for string definitions
C
C we are passed
C
	CHARACTER*(*)	RESULT		! where to place the result
	INTEGER*2	RESLEN		! length of result in that
C
	CHARACTER*(*)	SOURCE		! basic filename to parse
	CHARACTER*(*)	DEFAULT		! default to parse against
C
	LOGICAL		ALLOW_VER	! allow version numbers?
C
	INTEGER*4	ERRCOD		! what sort of error it was
	INTEGER*4	IERR		! system error return
C
C functions used
C
	INTEGER*4	FILE_PARSE	! to parse the filename
C
C assume the worst, initially
C
	RDFILN = .TRUE.
C
C but no internal error yet
C
	ERRCOD = ERR_NON
C
C unset the common block contents...
C
	LEN_NOD = 0			! all lengths reset to zero
	LEN_DEV = 0
	LEN_DIR = 0
	LEN_NAM = 0
	LEN_EXT = 0
	LEN_VER = 0
	HAD_NOD = .FALSE.		! not had any file parts yet
	HAD_DEV = .FALSE.
	HAD_DIR = .FALSE.
	HAD_NAM = .FALSE.
	HAD_EXT = .FALSE.
	HAD_VER = .FALSE.
	STR_NOD = ' '			! set all parts to spaces
	STR_DEV = ' '
	STR_DIR = ' '
	STR_NAM = ' '
	STR_EXT = ' '
	STR_VER = ' '
C
C so let us parse the default filename, placing the constituent parts
C into the common block...
C
	IERR = FILE_PARSE(
     &			DEFAULT,		! filename to parse
     &			HAD_NOD, STR_NOD, LEN_NOD,
     &			HAD_DEV, STR_DEV, LEN_DEV,
     &			HAD_DIR, STR_DIR, LEN_DIR,
     &			HAD_NAM, STR_NAM, LEN_NAM,
     &			HAD_EXT, STR_EXT, LEN_EXT,
     &			HAD_VER, STR_VER, LEN_VER
     &			 )
C
C did that succeed?
C
	IF (IERR.NE.SS$_NORMAL) THEN
	   ERRCOD = ERR_DEF			! error parsing default
	   GOTO 9999				! give up
	ENDIF
C
C did we have an illegal version number?
C
	IF ( HAD_VER .AND. .NOT.ALLOW_VER ) THEN
	   ERRCOD = ERR_DEF
	   IERR = SS$_BADFILEVER		! bad file version no.
	   GOTO 9999
	ENDIF
C
C now parse the specified file-name against the default
C
	IERR = FILE_PARSE(
     &			SOURCE,			! filename to parse
     &			HAD_NOD, STR_NOD, LEN_NOD,
     &			HAD_DEV, STR_DEV, LEN_DEV,
     &			HAD_DIR, STR_DIR, LEN_DIR,
     &			HAD_NAM, STR_NAM, LEN_NAM,
     &			HAD_EXT, STR_EXT, LEN_EXT,
     &			HAD_VER, STR_VER, LEN_VER
     &			 )
C
C
C did that succeed?
C
	IF (IERR.NE.SS$_NORMAL) THEN
	   ERRCOD = ERR_SRC			! error parsing default
	   GOTO 9999				! give up
	ENDIF
C
C did we have an illegal version number?
C
	IF ( HAD_VER .AND. .NOT.ALLOW_VER ) THEN
	   ERRCOD = ERR_SRC
	   IERR = SS$_BADFILEVER		! bad file version no.
	   GOTO 9999
	ENDIF
C
C so now expand the resultant filename into our destination string
C
	CALL EXPFLN( RESULT, RESLEN )
C
C if the final result is too long, return the string length
C and complain
C
	IF ( RESLEN.GT.LEN(RESULT) ) THEN
	   RESLEN = LEN(RESULT)
	   ERRCOD = ERR_LNG
	   IERR   = SS$_RESULTOVF
	ENDIF
C
C success
C
	RDFILN = .FALSE.
C
9999	RETURN
	END
