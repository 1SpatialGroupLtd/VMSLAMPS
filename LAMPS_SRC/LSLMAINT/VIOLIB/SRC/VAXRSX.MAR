;
; * This file is part of the LAMPS distribution, released as a software
; * preservation project to archive digital history for future historians.
; * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
; *
; * Timestamp of this file for the 2002 release was: 1984-10-23 10:38:10.000000000 +0100
; *
; * This program is free software: you can redistribute it and/or modify
; * it under the terms of the GNU General Public License as published by
; * the Free Software Foundation, version 3.
; *
; * This program is distributed in the hope that it will be useful, but
; * WITHOUT ANY WARRANTY; without even the implied warranty of
; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
; * General Public License for more details.
; *
; * You should have received a copy of the GNU General Public License
; * along with this program. If not, see http://www.gnu.org/licenses/.
;
	.TITLE VAXRSX
	.IDENT /23OC84/

; Copyright Laser-Scan Laboratories, Ltd., Cambridge, England


;	Now in VIOLIB (CODE_PSECT VIO)			AJW	14-Apr-1982
;	_PSECT FLF added				AJW	31-Mar-1982
;	WFLOR no longer goes to RETSTA, but returns	AJW	17-Dec-1980
;	Created						SCM	   Aug-1980

; Routines to interface RSX Executive  with VAX/VMS System Service calls
;
;
	.LIBRARY	/LSL$LIBRARY:LSLMACLIB/
	CODE_PSECT VIO

	$SSDEF
	$DSCDEF

.ENTRY	CLREF,	^M<R10,R11>
	JSB	VIO$1ST
	JSB	VIO$GNA			; get efn
	MOVZWL	(R0),R1			; stretch word
	$CLREF_S	EFN=R1
	BRB	RETEF			; join SETEF


.ENTRY	READEF,	^M<R10,R11>
	JSB	VIO$1ST
	JSB	VIO$GNA			; get efn
	MOVZWL	(R0),R1			; stretch word
	$READEF_S	EFN=R1,STATE=EFNST
	BRB	RETEF			; join SETEF



.ENTRY	SETEF,	^M<R10,R11>
	JSB	VIO$1ST
	JSB	VIO$GNA			; get efn
	MOVZWL	(R0),R1			; stretch it
	$SETEF_S	EFN=R1

; CLREF and READEF joins
RETEF:	MOVL	R0,R10			; save status of call
	JSB	VIO$GNA			; see if caller wants it
	BCS	10$			; if no second arg, he doesn't
; Convert status before returning it
	CMPW	R10,#SS$_WASCLR
	BNEQ	1$
	CLRW	(R0)			; success - WASCLR
	BRB	10$
1$:	CMPW	R10,#SS$_WASSET
	BNEQ	2$
	MOVW	#2,(R0)			; success - WASSET
	BRB	10$
2$:	MOVW	#-1,(R0)		; error
10$:	RET



.ENTRY	WAITFR,	^M<R10,R11>
	JSB	VIO$1ST
	JSB	VIO$GNA			; get efn
	MOVZWL	(R0),R1			; stretch it
	$WAITFR_S	EFN=R1

RETSTA:	MOVL	R0,R10			; save status of call
	JSB	VIO$GNA			; see if caller wants status
	BCS	10$			; this is getting monototototonous
	MOVW	#1,(R0)			; success
	CMPW	R10,#SS$_NORMAL
	BEQL	10$
	MNEGW	#1,(R0)			; error
10$:	RET


 .ENTRY	WFLOR, ^M<R9,R10,R11>
	JSB	VIO$1ST
	CLRL	R10
	JSB	VIO$GNA			; get 1st efn
	MOVZWL	(R0),R9			; save it
1$:	MOVZWL	(R0),R1
	BICL2	#^XFFFFFFE0,R1		; mask to 5 bits
	INSV	#1, R1, #1, R10		; form mask of EFNs
	JSB	VIO$GNA			; see if any more efns
	BCC	1$			; add into mask if present ...
	$WFLOR_S	EFN=R9,MASK=R10	; else do call
	RET



.ENTRY	ALTPRI	^M<>			; NOP
	RET	


.ENTRY	DSASTR	,^M<>
	$SETAST_S	ENBFLG=#0	; this is all that's necessary
	RET


.ENTRY	ENASTR,	^M<>
	$SETAST_S	ENBFLG=#1	; ditto
	RET

; this isnt strictly a system service call but is very useful
; CALL AZTOAD(DESC,ASCIZ) will construct in DESC a string descriptor
; for the zero byte terminated ASCII byte array in ASCIZ.

 .ENTRY	AZTOAD,^M<R2,R3>
	MOVAQ	@4(AP),R3		; address of string descriptor
	MOVAB	@8(AP),R2		; address of string
	LOCC	#0,#80,(R2)		; find first null
	SUBL2	R2,R1			; calculate length
	MOVW	R1,(R3)			; insert length into descriptor
	MOVW	CLATYP,2(R3)		; class and type info
	MOVAB	(R2),4(R3)		; pointer part of descriptor
	RET

CLATYP:	.BYTE	DSC$K_DTYPE_T,DSC$K_CLASS_S	; class and type info

	DATA_PSECT VIO

EFNST:	.BLKL	1		; to receive state of READEF if it should
				; ever be wanted

	.PSECT

	.END
