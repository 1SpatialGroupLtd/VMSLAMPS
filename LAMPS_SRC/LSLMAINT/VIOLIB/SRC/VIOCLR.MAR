;
; * This file is part of the LAMPS distribution, released as a software
; * preservation project to archive digital history for future historians.
; * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
; *
; * Timestamp of this file for the 2002 release was: 1984-09-10 14:26:14.000000000 +0100
; *
; * This program is free software: you can redistribute it and/or modify
; * it under the terms of the GNU General Public License as published by
; * the Free Software Foundation, version 3.
; *
; * This program is distributed in the hope that it will be useful, but
; * WITHOUT ANY WARRANTY; without even the implied warranty of
; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
; * General Public License for more details.
; *
; * You should have received a copy of the GNU General Public License
; * along with this program. If not, see http://www.gnu.org/licenses/.
;
	.TITLE		VIOCLR
	.IDENT		/10SE84/
	.LIBRARY	/LSL$LIBRARY:LSLMACLIB/
 
	$SSDEF
 
;	Copyright LaserScan Laboratories Ltd., Cambridge, England
 
; Author TJ Ibbs, 14 May 1982
 
; Optional arg with fill byte 			AJW	06-Jun-1983
; Don't test overflow bit to see if need to do
; more than one chunk - compare with ^XFFFF	AJW	22-Apr-1983
; Change name to VIOCLR				TJI	17-Aug-1982
 
 
; CALL VIOCLR( ARRAY.ab, LENGTH.rl [,FILL.arb)
 
; to clear or set to the fill byte the elements of the passed ARRAY,
; where LENGTH is its length in bytes (limited by size of an integer*4)
 
 
	CODE_PSECT	VIO
 
	.ENTRY	VIOCLR, ^M<R2,R3,R4,R5,R6,R7,R8,R9,R11>
 
; R2 - R5 are stepped on by MOVC5
; R6 - one word full
; R7 - current length
; R8 - array address
; R9 - fill byte
; R11- used by VIO$...
 
	JSB	VIO$1ST			; ready for 1st arg
 
	JSB	VIO$GNA			; and get it
	BCS	10$
	MOVL	R0, R8			; remember address in R2
 
	JSB	VIO$GNA			; get LENGTH
	BCS	10$
	MOVL	(R0), R7		; and dereference it
 
	CLRL	R9			; assume fill with zero
	JSB	VIO$GNA			; get FILL
	BCS	2$			; if no third arg
	MOVZBL	(R0), R9		; and dereference it
2$:
 
; now, MOVC5 takes a WORD length, so we cannot zero more than 65535
; bytes at a time. However, we have just taken a longword argument,
; so we must check to see how much we need to clear
 
	MOVL	#^XFFFF,R6		; useful number
 
1$:	CMPL	R7,R6			; is length more than one word ?
	BLEQU	5$			; no - we can do it in one go
 
	MOVC5	#0,B^5$,R9,R6,(R8)	; zero this section of array
 
	SUBL2	R6,R7			; get remainder in R7
	ADDL	R6,R8			; and new start of array
	BRB	1$
 
5$:	MOVC5	#0,B^5$,R9,R7,(R8)	; zero the ARRAY
 
	MOVL	#SS$_NORMAL,R0		; success
	BRB 20$
 
10$:	MOVL	#SS$_INSFARG,R0		; insufficient args
 
20$:	RET
 
	.END
