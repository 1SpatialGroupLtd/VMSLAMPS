	.TITLE	VIOTTR
	.IDENT	/18JN86/
;
	$SSDEF				; system error returns
	$RMSDEF				; and RMS's
;
; Copyright Laser-Scan Laboratories Ltd,Cambridge,England
;
; Author Paul Hardy
;
; TTATT, TTDET and TTATC added by TJI, 01.June.1982
;
; standard terminal input routine to go with RDCHS etc
 
; MUST be assembled with TXTC.MAR
 
	DATA_PSECT	VIO

TTRDSC:					; string descriptor for VIO$GET_INPUT
TTRLEN:	.BLKW	1			; string length
	.BYTE	0,0			; class & type
TTRPTR:	.BLKL	1			; pointer to buffer (unset)
 
	CODE_PSECT	VIO

; TTRLIN & TTRSTR read a line using VIO$GET_INPUT
; the default buffer is TXTC as used by RDCH
; NCHS=TTRLIN([BUF], [LEN], [LIM], ['prompt'], [ierr])
;						read to byte array
; NCHS=TTRSTR([STRING], ['prompt'], [ierr])	read to character string
 
	.ENTRY	TTRSTR,^M<R2,R3,R11>
	JSB	VIO$1ST			; basic init
	MOVAW	TTRLEN,R2		; if explicit arg then dont want length
	JSB	VIO$GNA			; arg is string descriptor
	BCC	10$			; explicit string
	MOVAL	TXTDSC,R0		; default destination is TXTC
	MOVAW	TXTPTR,R2		; so place for resultant length
	MOVW	TXTLIM,TXTPTR		; all is available
10$:	MOVL	(R0)+,R1		; length and crud
	MOVW	R1,TTRLEN		; just the length
	MOVL	(R0),TTRPTR		; and the address
	BRB	GOTDSC			; got descriptor so common code now
 
	.ENTRY	TTRLIN,^M<R2,R3,R11>
	JSB	VIO$1ST			; basic init for arg handling
	MOVAB	TXTBUF,R0		; default buffer is TXTBUF
	JSB	VIO$GNA			; first arg is buffer to read into
	MOVL	R0,TTRPTR		; set buffer address
	MOVAW	TXTPTR,R0		; default for second arg is TXTPTR
	JSB	VIO$GNA			; get second arg (resultant length)
	MOVL	R0,R2			; save address in R2 for the moment
	MOVAW	TXTLIM,R0		; default for third arg is TXTLIM
	JSB	VIO$GNA			; third arg is buffer size
	MOVW	(R0),TTRLEN		; set in descriptor
 
; here with destination set up - look if prompt reqd
GOTDSC:	MOVL	#1,R1			; at least one arg to VIO$GET_INPUT
	JSB	VIO$GNA			; fourth arg is prompt string
	BCS	10$			; missing
	INCL	R1			; one more arg for GET_INPUT
	PUSHL	R0			; prompt string address
10$:	PUSHAQ	TTRDSC			; destination descriptor address
	CALLS	R1, G^VIO$GET_INPUT	; read from SYS$INPUT
	BLBC	R0,99$			; error in read
	MOVL	TTRPTR,R1		; address of buffer
	DECL	R1			; to allow 1st byte = 1
	MOVZWL	TTRLEN,R0		; maximum string size
20$:	CMPB	(R1)[R0],#^A/ /		; space ?
	BNEQ	30$			; jump at first non-space from end
	SOBGTR	R0,20$			; more to scan
30$:	MOVW	R0,(R2)			; no of chars read
	MOVAL	TXTBUF,R1		; are we writing into TXTC?
	CMPL	TTRPTR,R1
	BNEQ	40$			; no
	MOVW	#1,DCPTR		; if yes then set nothing decoded yet
40$:	RET
 
; here with error in read
99$:	MOVL	R0, R3			; save against GNA
	BSBW	VIO$GNA			; is there an IERR argument?
	BCS	98$			; if CS, not interested in actual error
	MOVL	R3, (R0)		; return actual error
98$:	MNEGL	#1, R0			; 'any old error'
	CMPL	R3, #SS$_ENDOFFILE	; is it (system) end of file?
	BEQL	97$			; if EQL, it is
	CMPL	R3, #RMS$_EOF		; is it (RMS) end of file? (what a fantasy!)
	BNEQ	30$			; if NEQ, it ain't
97$:	MNEGL	#10, R0			; 'end of file error'
	BRB	30$			; common exit

;
; TTATT and TTDET are no-ops on the VAX
; TTATC attaches a terminal with a control-C AST set up - so we
; imitate this by calling SET_CTRLC_AST( routine )
;
; CALL TTATT
; CALL TTDET
; CALL TTATC( ASTroutine )
;
;
	.ENTRY	TTATT, ^M<>
	RET				; all done

	.ENTRY	TTDET,	^M<>
	RET				; all done

	.ENTRY	TTATC,	^M<>
	CALLG	(AP), G^SET_CTRLC_AST	; just pass the argument on
	RET

	.PSECT
	.END
