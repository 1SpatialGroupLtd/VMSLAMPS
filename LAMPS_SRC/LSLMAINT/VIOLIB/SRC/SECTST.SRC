C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1983-05-05 15:59:56.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	PROGRAM SEC
C
C program to test the workings of FILSEC - mapping files to sections of
C virtual memory
C
	IMPLICIT NONE
C
C local workspace:
	INTEGER III,JJJ
	INTEGER ISIZE0,FRED0,ISIZE1,FRED1,ISIZE2,FRED2
	CHARACTER*132 LINE
C
C functions
	INTEGER VIO$OPEN_SEC,VIO$CLOSE_SEC,VIO$EXTEND_SEC
C
C open T0.T on default channel 0
	III=VIO$OPEN_SEC('T0.T',1,.TRUE.,.TRUE.,FRED0,ISIZE0)
	IF (.NOT.III) CALL LIB$SIGNAL(%VAL(III))
C
	CALL SUB(%VAL(FRED0),ISIZE0,97)		! a-z
C
C extend it
	III=VIO$EXTEND_SEC(10,FRED0,ISIZE0)
	IF (.NOT.III) CALL LIB$SIGNAL(%VAL(III))
	CALL SUB(%VAL(FRED0),ISIZE0,65)		! A-Z
C
	III=VIO$CLOSE_SEC()
	IF (.NOT.III) CALL LIB$SIGNAL(%VAL(III))
C
C open T0.T again, on default channel 0, this time of size 3 blocks
	III=VIO$OPEN_SEC('T0.T',3,.TRUE.,.TRUE.,FRED0,ISIZE0)
	IF (.NOT.III) CALL LIB$SIGNAL(%VAL(III))
C
	CALL SUB(%VAL(FRED0),ISIZE0,97)		! a-z
C
C loop, extending it by one block
	DO JJJ=1,30
	  III=VIO$EXTEND_SEC(1,FRED0,ISIZE0)
	  IF (.NOT.III) CALL LIB$SIGNAL(%VAL(III))
	  CALL SUB(%VAL(FRED0),ISIZE0,65)		! A-Z
	ENDDO
C
	III=VIO$CLOSE_SEC()
	IF (.NOT.III) CALL LIB$SIGNAL(%VAL(III))
C
C open it again for read
	III=VIO$OPEN_SEC('T0.T',1,.FALSE.,.FALSE.,FRED0,ISIZE0,)
	IF (.NOT.III) CALL LIB$SIGNAL(%VAL(III))
C
	CALL SUB2(%VAL(FRED0),ISIZE0,65)	! A-Z
C
C opening it again should cause an error
	III=VIO$OPEN_SEC('T0.T',1,.FALSE.,.FALSE.,FRED0,ISIZE0)
	IF (III) CALL LIB$SIGNAL(%VAL(0))
	CALL SYS$GETMSG(%VAL(III),JJJ,LINE,,)
	CALL WRITEF('*** - Error expected - using channel twice')
	CALL WRITEF('*** - %S',LINE(1:JJJ))
C
C both by default 0 and explicit 0
	III=VIO$OPEN_SEC('T0.T',1,.FALSE.,.FALSE.,FRED0,ISIZE0,0)
	IF (III) CALL LIB$SIGNAL(%VAL(0))
	CALL SYS$GETMSG(%VAL(III),JJJ,LINE,,)
	CALL WRITEF('*** - Error expected - using channel twice')
	CALL WRITEF('*** - %S',LINE(1:JJJ))
C
C open T1.T on channel 1
	III=VIO$OPEN_SEC('T1.T',1,.TRUE.,.TRUE.,FRED1,ISIZE1,1)
	IF (.NOT.III) CALL LIB$SIGNAL(%VAL(III))
C
	CALL SUB(%VAL(FRED1),ISIZE1,97)		! a-z
C
C check that T0.T is OK
	CALL SUB2(%VAL(FRED0),ISIZE0,65)	! A-Z
C
C open T2.T on channel 2 - should (for now) produce an error
	III=VIO$OPEN_SEC('T2.T',1,.TRUE.,.TRUE.,FRED2,ISIZE2,2)
	IF (III) CALL LIB$SIGNAL(%VAL(0))
	CALL SYS$GETMSG(%VAL(III),JJJ,LINE,,)
	CALL WRITEF('*** - Error expected - using bad channel')
	CALL WRITEF('*** - %S',LINE(1:JJJ))
C
C and on channel -1
	III=VIO$OPEN_SEC('T2.T',1,.TRUE.,.TRUE.,FRED2,ISIZE2,-1)
	IF (III) CALL LIB$SIGNAL(%VAL(0))
	CALL SYS$GETMSG(%VAL(III),JJJ,LINE,,)
	CALL WRITEF('*** - Error expected - using bad channel')
	CALL WRITEF('*** - %S',LINE(1:JJJ))
C
C check that T0.T is OK
	CALL SUB2(%VAL(FRED0),ISIZE0,65)	! A-Z
C
C and that T1.T is OK
	CALL SUB2(%VAL(FRED1),ISIZE1,97)	! a-z
C
C extend T1.T
	III=VIO$EXTEND_SEC(33,FRED1,ISIZE1,1)
	IF (.NOT.III) CALL LIB$SIGNAL(%VAL(III))
	CALL SUB(%VAL(FRED1),ISIZE1,97)		! a-z
C
C close T1.T
	III=VIO$CLOSE_SEC(1)
	IF (.NOT.III) CALL LIB$SIGNAL(%VAL(III))
C
C check that T0.T is OK
	CALL SUB2(%VAL(FRED0),ISIZE0,65)	! A-Z
C
C
C close T1.T - should produce and error
	III=VIO$CLOSE_SEC(1)
	IF (III) CALL LIB$SIGNAL(%VAL(0))
	CALL SYS$GETMSG(%VAL(III),JJJ,LINE,,)
	CALL WRITEF('*** - Error expected - closing non-existent file')
	CALL WRITEF('*** - %S',LINE(1:JJJ))
C
C this should produce an error since T0.T is open for read only
	III=VIO$EXTEND_SEC(10,FRED0,ISIZE0)
	IF (III) CALL LIB$SIGNAL(%VAL(III))
	CALL SYS$GETMSG(%VAL(III),JJJ,LINE,,)
	CALL WRITEF('*** - Error expected - extending read-only file')
	CALL WRITEF('*** - %S',LINE(1:JJJ))
C
C and close T0.T
	III=VIO$CLOSE_SEC(0)
	IF (.NOT.III) CALL LIB$SIGNAL(%VAL(III))
C
C that's all folks
	END
C
	SUBROUTINE SUB2(ARR,SIZE,OFF)
	IMPLICIT NONE
	INTEGER I,SIZE,OFF
	BYTE ARR(0:SIZE-1)
C
	DO 10 I=0,SIZE-1
	  IF (ARR(I).NE.OFF+MOD(I,26)) CALL LIB$SIGNAL(%VAL(0))
10	CONTINUE
	END
C
	SUBROUTINE SUB(ARR,SIZE,OFF)
	IMPLICIT NONE
	INTEGER I,SIZE,OFF
	BYTE ARR(0:SIZE-1)
C
	DO 10 I=0,SIZE-1
	  ARR(I)=OFF+MOD(I,26)
10	CONTINUE
	END
