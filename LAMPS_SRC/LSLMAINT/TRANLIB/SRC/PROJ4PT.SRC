C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-03-10 18:25:00.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION PROJ4PT(CPTS,CPCOEF)
C
***	MODULE	PROJ4PT
***	IDENT	10MR88
C
C Projective 4pt transformation for new OS set-up procedure.
C
C Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Created from OSNEW4PT				RWR	9-Mar-1988
C
C The transform is X' = (A.X+B.Y+C)/(G.X+H.Y+1)
C 	...        Y' = (D.X+E.Y+F)/(G.X+H.Y+1)
C
C .. which is rearranged to
C		X' = A.X + B.Y + C                - G.X.X' - H.Y.X'
C		Y' =                D.X + E.Y + F - G.X.Y' - H.Y.Y'
C
	IMPLICIT NONE
C
C arguments
	REAL	CPTS(4,4)	! measured & target coordinates
	REAL*8	CPCOEF(8)	! returned transform coeffs
C
C w/s
	REAL*8 A(8,8)		! temporary matrix for SOLVE
	INTEGER I,J
C
C **************************************************************
C
C transfer the corner point information from CPTS into CPCOEF
	DO 45 I = 1,4
	    J = I*2-1
		CPCOEF(J) = CPTS(3,I)		! output
		CPCOEF(J+1) = CPTS(4,I)		! coordinates
		A(J,1) = CPTS(1,I)		! input
		A(J,2) = CPTS(2,I)		! coordinates
		A(J,3) = 1.0
		A(J,4) = 0.0
		A(J,5) = 0.0
		A(J,6) = 0.0
		A(J,7) = -CPTS(1,I)*CPTS(3,I)
		A(J,8) = -CPTS(2,I)*CPTS(3,I)
	    J = J+1
		A(J,1) = 0.0
		A(J,2) = 0.0
		A(J,3) = 0.0
		A(J,4) = CPTS(1,I)		! input
		A(J,5) = CPTS(2,I)		! coordinates
		A(J,6) = 1.0
		A(J,7) = -CPTS(1,I)*CPTS(4,I)
		A(J,8) = -CPTS(2,I)*CPTS(4,I)
45	CONTINUE
C
C and now call solve to give us a transform array in CPCOEF
C
	CALL SOLVE( A, CPCOEF, 8, 1, 0, 8, 8 )
C
C success - may check the eigenvalues sometime, if I ever understand them
	PROJ4PT = .FALSE.
C
	RETURN
	END
C
C ******************************************************************
C
	SUBROUTINE PROJ4PT_USE(X,Y,CPCOEF)
C
***	MODULE	PROJ4PT_USE
***	IDENT	09MA88
C
C X, Y contain the coord to be transformed
C CPCOEF contains the transform matrix set up by PROJ4PT
C
	IMPLICIT NONE
C
C arguments
	REAL	X,Y		! point to transform
	REAL*8	CPCOEF(8)	! returned transform coeffs
C
C w/s
	REAL D
	REAL XX			! saved X
C
	D  = CPCOEF(7)*X + CPCOEF(8)*Y + 1.0
	XX = (CPCOEF(1)*X + CPCOEF(2)*Y + CPCOEF(3))/D
C
	Y = (CPCOEF(4)*X + CPCOEF(5)*Y + CPCOEF(6))/D
	X = XX
C
	RETURN
C
	END
