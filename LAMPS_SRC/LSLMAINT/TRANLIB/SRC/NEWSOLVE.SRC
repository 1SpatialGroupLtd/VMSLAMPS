C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-11-16 11:01:40.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION
     &	  SOLVE(A,B,X,DX,XTOL,MAXDX,R,RTOL,MAXR,U,M,C,DC,N,MAX_N,
     &	  N_IT,MAX_IT,IERR)

***	MODULE	SOLVE
***	IDENT	16NO87

C	Copyright : Laser-Scan Laboratories Ltd., Cambridge, England
C	Author    :				ACM	12-Nov1987
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Solves simultaneous equations A*X = B.
C
C	Input matrix A and vector B are unchanged.
C
C	IERR = 0 when solution is found within tolerance(s) specified
C	IERR = 1 when iteration limit is exceeded
C	IERR = 2 when iterations start to diverge
C	IERR = 3 when no equations are not independant
C
C	Returns SS$_NORMAL for IERR = 0 only, else returns SS$_ABORT.
C
C	Either tolerance will be taken as unset if <= 0
C
C	If either tolerance is set, it is forced >= ZEROPLUS
C
C	If both tolerances are unset, both will be forced = ZEROPLUS
C
C	Method used is Guassian elimination with partial pivoting and
C	iterative refinement. Ref. O.U. M351 course unit 3, page 40.
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

	IMPLICIT NONE

C Local parameters
	INCLUDE '($SSDEF)'
	REAL*4		ZEROPLUS
	PARAMETER(	ZEROPLUS = 1E-6)

C Data in
	INTEGER*4	N			! matrix size in use
	INTEGER*4	MAX_IT			! max num of iterations
	INTEGER*4	MAX_N			! matrix store size

	REAL*4		A(MAX_N,MAX_N)		! A*X = B
	REAL*4		B(MAX_N)
	REAL*4		XTOL			! desired X accuracy
	REAL*4		RTOL			! desired R accuracy

C Data out
	REAL*4		X(MAX_N)		! solution
	REAL*4		DX(MAX_N)		! X accuracy obtained
	REAL*4		MAXDX			! max abs DX(i)
	REAL*4		R(MAX_N)		! residuals (A*X-B)
	REAL*4		MAXR			! max abs resid

	INTEGER*4	N_IT			! num of iterations use
	INTEGER*4	IERR			! error code

C Workspace
	REAL*4		U(MAX_N,MAX_N)		! upper diagonal matrix
	REAL*4		M(MAX_N,MAX_N)		! M: U*X = M*B = C
	REAL*4		C(MAX_N),DC(MAX_N)
	REAL*4		UMAX,TEMP,F,RSUM

	REAL*8		DSUM

	INTEGER*4	IROW,JROW,ICOL,JCOL,PVT_ROW
	INTEGER*4	I	! TEMP

	LOGICAL*4	XOK,ROK			! X/R within tolerance?

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

	SOLVE = SS$_ABORT
	N_IT = 0
	MAXR = 0
	MAXDX = 0
	XOK = .FALSE.
	ROK = .FALSE.

C Don't allow either tolerance, if set, to be less than ZEROPLUS

	IF (XTOL.GT.0) XTOL = MAX(XTOL,ZEROPLUS)
	IF (RTOL.GT.0) RTOL = MAX(RTOL,ZEROPLUS)

C If both tolerances are unset, then set both to ZEROPLUS

	IF (XTOL.LE.0.AND.RTOL.LE.0) THEN
	  XTOL = ZEROPLUS
	  RTOL = ZEROPLUS
	END IF

C Copy A into U and B into C, and set up M as the identity matrix

	DO 20 ICOL = 1,N
	  DO 10 IROW = 1,N
	    U(IROW,ICOL) = A(IROW,ICOL)
	    M(IROW,ICOL) = 0
10	  CONTINUE
	  C(ICOL) = B(ICOL)
	  M(ICOL,ICOL) = 1
	  DX(ICOL) = 0			! initialise all DX = 0
	  R(ICOL) = 0			! initialise all R  = 0
20	CONTINUE

C Get U into upper-triangular form

	DO 100 ICOL = 1,N

C Find pivot row for col ICOL

	  UMAX = 0
	  PVT_ROW = 0
	  DO 50 JROW = ICOL,N
	    IF (ABS(U(JROW,ICOL)).LE.UMAX) GOTO 50
	    UMAX = ABS(U(JROW,ICOL))
	    PVT_ROW = JROW
50	  CONTINUE

	  IF (UMAX.LT.ZEROPLUS) THEN
	    IERR = 3
	    SOLVE = SS$_ABORT
	    RETURN
	  END IF

C Swap row ICOL & row PVT_ROW in U, M and C

	  IF (PVT_ROW.NE.ICOL) THEN
	    DO 60 JCOL = 1,N
	      TEMP = U(PVT_ROW,JCOL)
	      U(PVT_ROW,JCOL) = U(ICOL,JCOL)
	      U(ICOL,JCOL) = TEMP

	      TEMP = M(PVT_ROW,JCOL)
	      M(PVT_ROW,JCOL) = M(ICOL,JCOL)
	      M(ICOL,JCOL) = TEMP
60	    CONTINUE

	    TEMP = C(PVT_ROW)
	    C(PVT_ROW) = C(ICOL)
	    C(ICOL) = TEMP

	  END IF
	  
C Divide pivot row ICOL by pivot in U, M and C

	  UMAX = U(ICOL,ICOL)
	  DO 70 JCOL = 1,N
	    U(ICOL,JCOL) = U(ICOL,JCOL)/UMAX
	    M(ICOL,JCOL) = M(ICOL,JCOL)/UMAX
70	  CONTINUE
	  C(ICOL) = C(ICOL)/UMAX

C Make 0's in col ICOL from row ICOL+1 to N

	  DO 90 IROW = ICOL+1,N
	    F = U(IROW,ICOL)
	    DO 80 JCOL = 1,N
	      U(IROW,JCOL) = U(IROW,JCOL)-F*U(ICOL,JCOL)
	      M(IROW,JCOL) = M(IROW,JCOL)-F*M(ICOL,JCOL)
80	    CONTINUE
	    C(IROW) = C(IROW)-F*C(ICOL)
90	  CONTINUE

100	CONTINUE	  

C Back substitute in U*X=C to find X

	DO 120 IROW = N,1,-1
	  RSUM = 0
	  DO 110 ICOL = IROW+1,N
	    RSUM = RSUM+U(IROW,ICOL)*X(ICOL)
110	  CONTINUE
	  X(IROW) = C(IROW)-RSUM
120	CONTINUE

C Obtain R = A*X-B, using double precision

130	MAXR = 0
	DO 150 IROW = 1,N
	  DSUM = 0
	  DO 140 ICOL = 1,N
	    DSUM = DSUM+DBLE(A(IROW,ICOL))*DBLE(X(ICOL))
140	  CONTINUE
	  R(IROW) = DSUM-DBLE(B(IROW))
	  MAXR = MAX(MAXR,ABS(R(IROW)))
150	CONTINUE

C Check for solution within tolerance(s)

	ROK = RTOL.LE.0.OR.MAXR.LE.RTOL
	IF (XOK.AND.ROK) THEN
	  IERR = 0
	  SOLVE = SS$_NORMAL
	  RETURN
	END IF

C Obtain DC = M*R

	DO 170 IROW = 1,N
	  RSUM = 0
	  DO 160 ICOL = 1,N
	    RSUM = RSUM+M(IROW,ICOL)*R(IROW)
160	  CONTINUE
	  DC(IROW) = RSUM
170	CONTINUE

C Back substitute in U*DX=DC to find DX

	MAXDX = 0
	DO 190 IROW = N,1,-1
	  RSUM = 0
	  DO 180 ICOL = IROW+1,N
	    RSUM = RSUM+U(IROW,ICOL)*DX(ICOL)
180	  CONTINUE

	  TEMP = ABS(DX(IROW))
	  DX(IROW) = DC(IROW)-RSUM
	  MAXDX = MAX(MAXDX,ABS(DX(ICOL)))

C Check for divergence

	  IF (TEMP.GT.0.AND.TEMP.LT.ABS(DX(IROW))) THEN
	    IERR = 2
	    SOLVE = SS$_ABORT
	    RETURN
	  END IF

190	CONTINUE

C Obtian new X = X-DX

	DO 200 ICOL = 1,N
	  X(ICOL) = X(ICOL)-DX(ICOL)
200	CONTINUE

	N_IT = N_IT+1

C Check for solution within tolerance(s)

	XOK = XTOL.LE.0.OR.MAXDX.LE.XTOL
	IF (XOK.AND.ROK) THEN
	  IERR = 0
	  SOLVE = SS$_NORMAL
	  RETURN
	END IF

C Loop for another iteration if iteration limit is not reached

	IF (N_IT.GE.MAX_IT) THEN
	  IERR = 1
	  SOLVE = SS$_ABORT
	  RETURN
	END IF

	GOTO 130

	END
