C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1983-06-23 16:19:34.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION DM4PT2
C
***	MODULE	DM4PT2
***	IDENT	23JN83
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
C Author: D. Meader
C
C	Created	from DM4PT			 DM	08-Jun-1983
C
C Performs a simplified four-point transformation.
C This routine is a stripped-down version of DM4PT which performs a
C least squares fit of the four corner points to functions of the form:
C		X=a0 + a1*x + a2*y
C		Y=b0 + b1*x + b2*y
C (i.e. no x*y terms).
C This transformation is sufficient to correct for shifting, scaling and
C rotation.
C
	REAL	  CPTS(4,4)	! CPSET entry - corner points
	REAL	  X,Y		! CPUSE entry - coords to transform
C
C use common area to preserve coefficients.
	REAL*8	  CPCOEF(3,2)
	COMMON/CPCOM/CPCOEF	! to hold the transform coeffs
C
	INTEGER	  I,J
	LOGICAL*4 CPSET,CPUSE		! function names
	REAL	  XX			! saved X
	REAL*8	  A(3,3)		! temporary matrix for SOLVE
	REAL*8	  CRIT			! criterion for rejection of fit
	REAL*8	  XM,YM			! 'measured' X,Y (machine space)
	REAL*8	  XT,YT			! 'true' X,Y (map space)
C
C ......................................................................
C
	ENTRY CPSET(CPTS)
C
C ... zero all the arrays.
	DO 20 J=1,3
	   CPCOEF(J,1)=0.0D0
	   CPCOEF(J,2)=0.0D0
	   DO 10 I=1,3
	      A(I,J)=0.0D0
10	   CONTINUE
20	CONTINUE
C
C ... set up the matrix equation AC=B, where B is CPCOEF initially.
	DO 30 I=1,4
	   XM=CPTS(1,I)				! measured values
	   YM=CPTS(2,I)
	   XT=CPTS(3,I)				! 'true' values
	   YT=CPTS(4,I)
C
	   CPCOEF(1,1)=CPCOEF(1,1) + XT		! r.h.s. of equation
	   CPCOEF(1,2)=CPCOEF(1,2) + YT
	   CPCOEF(2,1)=CPCOEF(2,1) + XT*XM
	   CPCOEF(2,2)=CPCOEF(2,2) + YT*XM
	   CPCOEF(3,1)=CPCOEF(3,1) + XT*YM
	   CPCOEF(3,2)=CPCOEF(3,2) + YT*YM
C
	   A(2,1)=A(2,1) + XM			! coefficient matrix A
	   A(3,1)=A(3,1) + YM
	   A(2,2)=A(2,2) + XM*XM
	   A(3,2)=A(3,2) + XM*YM
	   A(3,3)=A(3,3) + YM*YM
30	CONTINUE
C
C ... finish setting up the coefficient matrix A.
	A(1,1)=4.0D0
	A(1,2)=A(2,1)
	A(1,3)=A(3,1)
	A(2,3)=A(3,2)
C
C ... now call SOLVE to give us the transform array C in CPCOEF.
	CALL SOLVE(A,CPCOEF,3,2,0,3,3)
C
C ... analyse the eigenvalues of A (now triangular).
C ... examine the first and last eigenvalues; if the fit is good these
C ... will have 'similar' magnitudes (one day I may get round to proving
C ... this, until then take my word for it !!)
C ... return .TRUE. if we don't believe these CPs are any good.
C ... N.B. we are more tolerant than in FIT, since we must allow fairly
C ... weird corner points to be used if required.
	CRIT=1.0D6			! rather arbitrary, this !
	CPSET=DABS(A(1,1)/A(3,3)).GT.CRIT
C
	RETURN
C
C ......................................................................
C
	ENTRY CPUSE(X,Y)
C
C ... X & Y contain the coord to be transformed.
C ... CPCOEF contains the transform matrix set up by CPSET
C
	XX=CPCOEF(1,1) + X*CPCOEF(2,1) + Y*CPCOEF(3,1)
	Y= CPCOEF(1,2) + X*CPCOEF(2,2) + Y*CPCOEF(3,2)
	X=XX
	CPUSE=.FALSE.				! we always succeed
C
	RETURN
	END
