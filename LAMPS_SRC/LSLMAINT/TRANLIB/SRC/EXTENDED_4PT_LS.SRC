	LOGICAL*4 FUNCTION EXTENDED_4PT_LS(NPTS,PTS,COEFFS,RESID,XMAX,YMAX,
     &				  XRMS,YRMS)
C
***	MODULE	EXTENDED_4PT_LS
***	IDENT	03SE90
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
C Author: R.W. Russell (based on routines by D. Meader)
C
C	Created 				 RWR	23-Aug-1990
C
C Performs a 'four-point' transformation.
C This routine uses a generalised version of DM4PT which performs a
C least squares fit of the specified points to functions of the form:
C		X=a0 + a1*x + a2*y + a3*x*y
C		Y=b0 + b1*x + b2*y + b3*x*y
C 
C EXTENDED_4PT_LS takes an array of NPTS sets of coordinates, with each set
C arranged in the order:
C
C		 Xmeasured Ymeasured Xtarget Ytarget
C
C A set of coefficients (COEFFS) is calculated which will transform the
C 'measured' coordinate system into the 'target' one. X and Y residuals
C are returned in the user array RESID, and the maximum and RMS errors
C are also calculated.
C
C If EXTENDED_4PT_LS is .TRUE. then we may have tried to do the impossible. For
C example the point distribution may be inappropriate (e.g. all points
C nearly collinear) or the 'measured' and 'target' spaces simply may not
C be related by an this transformation. In any case the transformation
C coefficients are suspect.
C
CCCCCC	IMPLICIT NONE
C
	INTEGER*4 NPTS			! number of points
	REAL	  PTS(4,NPTS)		! measured & target coordinates
	REAL*8	  COEFFS(4,2)		! returned transform coeffs
	REAL	  RESID(2,NPTS)		! X,Y residuals (target space)
	REAL	  XMAX,YMAX		! max residuals    "      "
	REAL	  XRMS,YRMS		! RMS residuals    "      "
C
	INTEGER	  I,J
	REAL	  DX,DY			! temporary X,Y residuals
	REAL*8	  A(4,4)		! temporary matrix for SOLVE
	REAL*8	  CRIT			! criterion for rejection of fit
	REAL*8	  XM,YM,X2M,XYM,Y2M	! 'measured' X,Y,X**2,X*Y,Y**2
	REAL*8	  XT,YT			! 'true' X,Y (map space)
C
C ......................................................................
C
C ... zero all the arrays.
	DO 20 J=1,4
	   COEFFS(J,1)=0.0D0
	   COEFFS(J,2)=0.0D0
	   DO 10 I=1,4
	      A(I,J)=0.0D0
10	   CONTINUE
20	CONTINUE
C
C ... set up the matrix equation AC=B, where B is COEFFS initially.
	DO 30 I=1,NPTS
	   XM=PTS(1,I)				! measured values
	   YM=PTS(2,I)
	   X2M=XM*XM				! for efficiency
	   XYM=XM*YM
	   Y2M=YM*YM
	   XT=PTS(3,I)				! 'true' values
	   YT=PTS(4,I)
C
	   COEFFS(1,1)=COEFFS(1,1) + XT		! r.h.s. of equation
	   COEFFS(1,2)=COEFFS(1,2) + YT
	   COEFFS(2,1)=COEFFS(2,1) + XT*XM
	   COEFFS(2,2)=COEFFS(2,2) + YT*XM
	   COEFFS(3,1)=COEFFS(3,1) + XT*YM
	   COEFFS(3,2)=COEFFS(3,2) + YT*YM
	   COEFFS(4,1)=COEFFS(4,1) + XT*XYM
	   COEFFS(4,2)=COEFFS(4,2) + YT*XYM
C
	   A(2,1)=A(2,1) + XM			! coefficient matrix A
	   A(3,1)=A(3,1) + YM
	   A(4,1)=A(4,1) + XYM
	   A(2,2)=A(2,2) + X2M
	   A(4,2)=A(4,2) + X2M*YM
	   A(3,3)=A(3,3) + Y2M
	   A(4,3)=A(4,3) + XM*Y2M
	   A(4,4)=A(4,4) + X2M*Y2M
30	CONTINUE
C
C ... finish setting up the coefficient matrix A.
	A(1,1)=NPTS
	A(1,2)=A(2,1)
	A(3,2)=A(4,1)
	A(1,3)=A(3,1)
	A(2,3)=A(4,1)
	A(1,4)=A(4,1)
	A(2,4)=A(4,2)
	A(3,4)=A(4,3)
C
C ... now call SOLVE to give us the transform array C in COEFFS.
	CALL SOLVE(A,COEFFS,4,2,0,4,4)
C
C ... analyse the eigenvalues of A (now triangular).
C ... examine the first and last eigenvalues; if the fit is good these
C ... will have 'similar' magnitudes (one day I may get round to proving
C ... this, until then take my word for it !!)
C ... return .TRUE. if we don't believe the fit is any good.
C ... N.B. we are more tolerant than in FIT, since we must allow fairly
C ... weird points to be used if required.
	CRIT=1.0D6			! rather arbitrary, this !
	EXTENDED_4PT_LS=DABS(A(1,1)/A(4,4)).GT.CRIT
C
C ... now test the goodness of fit by applying the transform to the
C ... measured values.
	XRMS=0.0
	YRMS=0.0
	XMAX=0.0
	YMAX=0.0
C
C errors in target space
	DO 40 I=1,NPTS
	   DX=ABS(
     &	      COEFFS(1,1) + PTS(1,I)*COEFFS(2,1) + PTS(2,I)*COEFFS(3,1)
     &	      + PTS(1,I)*PTS(2,I)*COEFFS(4,1)- PTS(3,I))
	   DY=ABS(
     &	      COEFFS(1,2) + PTS(1,I)*COEFFS(2,2) + PTS(2,I)*COEFFS(3,2)
     &	      + PTS(1,I)*PTS(2,I)*COEFFS(4,2)- PTS(4,I))
	   RESID(1,I)=DX			! return all residuals
	   RESID(2,I)=DY
	   XRMS=XRMS + DX*DX			! and RMS and MAX errors
	   YRMS=YRMS + DY*DY
	   IF (DX.GT.XMAX) XMAX=DX
	   IF (DY.GT.YMAX) YMAX=DY
40	CONTINUE
	XRMS=SQRT(XRMS/FLOAT(NPTS))
	YRMS=SQRT(YRMS/FLOAT(NPTS))
	RETURN
	END
