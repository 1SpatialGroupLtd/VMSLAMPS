C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-10-30 15:39:42.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION OSMH_NEW_GETFLD( FIELD )
C
***	IDENT	06FE91
***	MODULE	OSMH_NEW_GETFLD
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					ST	30-Aug-1990
C
C Description
C
C Reads the header field specified from input buffer and returns the value in
C common variable MH_I_VALUE or MH_A_VALUE depending on its type (integer or
C ASCII string).
C
	IMPLICIT NONE
C
C Arguments
C
	INTEGER*4	FIELD			! The header field required
C
C Included Parameter Files
C
	INCLUDE 'CMN:OSMHLIBMSG.PAR'		! OSMH messages
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'	! LSLLIB message definitions
	INCLUDE 'LSL$CMNOSMH:OSMH_NEW.PAR'	! Header field definitions
C
C Common Blocks
C
	INCLUDE 'CMN:OSMH_NEW_FILES.CMN'	! File definitions
	INCLUDE 'CMN:OSMH_NEW_TAB.CMN'		! Map header table definitions
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'		! Text input
	INCLUDE 'LSL$CMNOSMH:OSMH_NEW_MH.CMN'	! New map header definition
	INCLUDE 'LSL$CMNIFF:MHOSGB.CMN'		! Map header definitions
C
C Functions called
C
	LOGICAL		OSMH_NEW_GET_FLD_POSN	! get field's true offset
	LOGICAL		RDLONG			! read a long
	INTEGER*4	RDCH			! read char
C
C Local Variables
C
	LOGICAL		STATUS,NODIG,NO_MORE	! Success/failure of routine
	INTEGER*4	POSN,SIZE		! size of field required
	INTEGER*4	I,J,P			! counters
	INTEGER*4	RETVAL			! system error code
	BYTE		ICH			! byte character
C
C------------------------------------------------------------------------------
C
C Assume everything will work
C
	STATUS = .TRUE.
C
C This routine should only be called for type 3 or 4 headers.
C
	IF ( (MH2DESC(2).NE.3) .AND. (MH2DESC(2).NE.4) ) THEN
	   STATUS = OSMHLIB__BADCALL
	   IF ( .NOT.MH_NOMESS ) CALL LSL_PUTMSG(STATUS)
	   GOTO 999
	ENDIF
C
C Get position and size of field required from common block filled by 
C OSMH_NEW_INI
C
	IF (FIELD.NE.MH_CHANGE_IND) THEN
	   STATUS = OSMH_NEW_GET_FLD_POSN(FIELD,POSN,SIZE)
	   IF (.NOT.STATUS) THEN
C
C Miss out messages as GET_FLD_POSN will have generate its own
C
	      GOTO 1000
	   ENDIF
C
C Set the common variables
C
	   MH_POSN = POSN
	   MH_SIZE = SIZE
	   MH_DATATYPE = 0
	   MH_I_VALUE = 0
	   MH_STRLEN = 0
	ELSE
C
C Get individual change indicators to make 8 character string
C
	   MH_DATATYPE = OSMH_STRING
	   MH_I_VALUE = 0
	   MH_STRLEN = 8
	   MH_SIZE = MH_STRLEN
	   DO 100 I = MH_CH_IND_A, MH_CH_IND_H
	      P = I-MH_CH_IND_A+1
	      IF (OSMH_TABLE(I,2,MH2DESC(2)).EQ.MH_UNDEFINED) THEN
		 MH_A_VALUE(P:P) = CHAR(32)
	      ELSE
		 STATUS = OSMH_NEW_GET_FLD_POSN(I,POSN,SIZE)
		 IF (.NOT.STATUS) GOTO 999
		 MH_A_VALUE(P:P) = CHAR(MH2BYTE(POSN))
	      ENDIF
100	   CONTINUE
	   GOTO 1000
	ENDIF
C
C Check the field
C
	IF ( (MH_POSN.EQ.MH_UNDEFINED) .AND. (MH_SIZE.EQ.MH_UNDEFINED) ) THEN
	   STATUS = OSMHLIB__NOSUCHFIELD
	   IF ( .NOT.MH_NOMESS ) CALL LSL_PUTMSG(STATUS)
	   GOTO 999
	ENDIF
C
C Set buffer to read from
C
	CALL SETAUX(MH2BYTE,MH2BYSZ)
C
C Set window on input buffer
C
	CALL SETWIN(MH_POSN,MH_SIZE)
C
C Read integer or string
C
	IF ( OSMH_TABLE_FORMAT(FIELD,MH2DESC(2))(1:1) .EQ. 'I') THEN
C
C Set datatype to integer
C
	   MH_DATATYPE = OSMH_INTEGER
C
	   NODIG = RDLONG(MH_I_VALUE)
	   IF ( NODIG ) THEN
	      STATUS = OSMHLIB__ERRRDINT
	      IF ( .NOT.MH_NOMESS ) CALL LSL_PUTMSG(STATUS)
	      GOTO 999
	   ENDIF
	ELSEIF ( OSMH_TABLE_FORMAT(FIELD,MH2DESC(2))(1:1) .EQ. 'A') THEN
C
C Set datatype to string
C
	   MH_DATATYPE = OSMH_STRING
C
	   DO 50 J = 1,SIZE
	      NO_MORE = RDCH( ICH )
	      MH_A_VALUE( J:J ) = CHAR( ICH )
	      IF ( NO_MORE ) THEN
	         STATUS = OSMHLIB__ERRRDCH
	         IF ( .NOT.MH_NOMESS ) THEN
	            CALL LSL_PUTMSG(STATUS)
	         ENDIF
	         GOTO 999
	      ENDIF
50	   CONTINUE
	   MH_STRLEN = SIZE	
	ENDIF
C
	GOTO 1000
C
C Failure
C
999	IF ( .NOT.MH_NOMESS ) CALL LSL_ADDMSG( OSMHLIB__ERRGETFLD )
C
C Reset decoding pointer
C
1000	CALL BSLN
C
C Return
C
	OSMH_NEW_GETFLD = STATUS
C
	RETURN
	END
C
