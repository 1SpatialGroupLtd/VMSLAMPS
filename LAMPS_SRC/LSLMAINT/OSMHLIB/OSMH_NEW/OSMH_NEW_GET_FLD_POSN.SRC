C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-12-02 11:57:28.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION OSMH_NEW_GET_FLD_POSN( FIELD, POS, SIZ )
C
***	IDENT	21OC92
***	MODULE	OSMH_NEW_GET_FLD_POSN
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					ST	21-Oct-1992
C
C Description
C
C Returns the true offset of the field specified into the map header.
C For OSTF fields, the value returned is just the value in the OSMH_TABLE
C array. For fixed CITF fileds, the offset must take ito account of the line
C numbers and for variable CITF fields (the Change Indiactor Flags) the number
C of dividers must be searched for and the offset calculated from there.
C
	IMPLICIT NONE
C
C Arguments
C
	INTEGER*4	FIELD			! The header field required
	INTEGER*4	POS			! The true offset into header
	INTEGER*4	SIZ			! The width of the field
C
C Included Parameter Files
C
	INCLUDE 'CMN:OSMHLIBMSG.PAR'		! OSMH messages
	INCLUDE 'LSL$CMNOSMH:OSMH_NEW.PAR'	! Header field definitions
C
C Common Blocks
C
	INCLUDE 'CMN:OSMH_NEW_TAB.CMN'		! Map header table definitions
	INCLUDE 'LSL$CMNOSMH:OSMH_NEW_MH.CMN'	! New map header definition
	INCLUDE 'LSL$CMNIFF:MHOSGB.CMN'		! Map header definitions
C
C Functions called
C
	LOGICAL		RDLONG			! read a long
	INTEGER*4	RDCH			! read char
	INTEGER*4	MOD			! modulus
	LOGICAL*4	OSMH_NEW_GET_CITF_LINE	! read a line from the header
	LOGICAL*4	OSMH_NEW_GET_DIV_POSN	! find posn of nth divider
C
C Local Variables
C
	INTEGER*4	STATUS			! Error status code
	INTEGER*4	I,J			! counters
C
	INTEGER*4	LEN,OFFSET,NUMLEFT,COUNT
	INTEGER*4	HEADERSIZE
	INTEGER*4	START,STARTPOS
	INTEGER*4	NUMDIV,LINE
	CHARACTER*80	STR
	CHARACTER*2	REC_DESCR
	CHARACTER*1	CH
C
C------------------------------------------------------------------------------
C
C Assume everything will work
C
	STATUS = .TRUE.
	POS = 0
	COUNT = 0
C
C This routine should only be called for type 3 or 4 headers.
C
	IF ( (MH2DESC(2).NE.3) .AND. (MH2DESC(2).NE.4) ) THEN
	   STATUS = OSMHLIB__BADCALL
	   IF ( .NOT.MH_NOMESS ) CALL LSL_PUTMSG(STATUS)
	   GOTO 999
	ENDIF
C
C Set buffer to read from
C
	CALL SETAUX(MH2BYTE,MH2BYSZ)
C
C Find offset for field
C
	IF (MH2DESC(2).EQ.3) THEN
C
C Type 3 MH fields are easy
C
	   POS = OSMH_TABLE(FIELD,2,MH2DESC(2))
	   SIZ = OSMH_TABLE(FIELD,3,MH2DESC(2))
	ELSEIF (FIELD.LT.MH_DIFF_HT_LEN .OR. FIELD.GT.MH_CH_IND_H) THEN
C
C Type 4 fixed fields
C
	   IF (FIELD.EQ.MH_LENGTH) THEN
	      POS = 1
	      SIZ = OSMH_TABLE(FIELD,1,MH2DESC(2))
	   ELSE
	      IF (OSMH_TABLE(FIELD,1,MH2DESC(2)).EQ.MH_UNDEFINED .AND.
     &		  OSMH_TABLE(FIELD,2,MH2DESC(2)).EQ.MH_UNDEFINED) THEN
		 POS = MH_UNDEFINED
		 GOTO 999
	      ENDIF
C
C Find start of 07 record
C
	      DO 50 I = 0,MH2BYSZ/80 - 1
		 REC_DESCR = CHAR(MH2BYTE((I)*80+1))//
     &		             CHAR(MH2BYTE((I)*80+2))
		 IF (REC_DESCR.EQ.'07') GOTO 60
50	      CONTINUE
C
C Failed to find 07.
C
	      STATUS = OSMHLIB__NOSECHREC
	      IF ( .NOT.MH_NOMESS ) CALL LSL_PUTMSG(STATUS)
	      GOTO 999
60	      POS = (I + OSMH_TABLE(FIELD,1,MH2DESC(2))-1) * 80
	      POS = POS + OSMH_TABLE(FIELD,2,MH2DESC(2))
	      SIZ = OSMH_TABLE(FIELD,3,MH2DESC(2))
	   ENDIF
	ELSE
C
C Variable fields: all change indicators and the DIFF_HT_LEN
C
	   SIZ = OSMH_TABLE(FIELD,3,MH2DESC(2))
	   HEADERSIZE = OSMH_TABLE(MH_LENGTH,1,MH2DESC(2))
	   NUMDIV = OSMH_TABLE(FIELD,1,MH2DESC(2))
	   OFFSET = OSMH_TABLE(FIELD,2,MH2DESC(2))
	   IF (NUMDIV.EQ.MH_UNDEFINED .OR. OFFSET.EQ.MH_UNDEFINED) THEN
	      POS = MH_UNDEFINED
	      SIZ = MH_UNDEFINED
	      GOTO 999
	   ENDIF
C
	   STATUS = OSMH_NEW_GET_DIV_POSN(NUMDIV,STARTPOS,LINE)
	   IF (.NOT.STATUS) GOTO 999
C
C Found nth divider. Read that line again and start counting characters until
C we find the correct offset.
C
	   IF (OFFSET.EQ.0) THEN
	      IF (NUMDIV.EQ.0) THEN
		 POS = 3
	      ELSE
		 POS = STARTPOS
	      ENDIF
	      GOTO 800
	   ENDIF
	   STARTPOS = STARTPOS + 1
	   START = MOD(STARTPOS,80)
	   POS = 80*INT(STARTPOS/80)
	   DO 100 I = LINE,(HEADERSIZE-1)/80+1
	      STATUS = OSMH_NEW_GET_CITF_LINE(I,STR,LEN)
	      IF (.NOT.STATUS) GOTO 999
	      LEN = LEN-2		! take 2 off for '0%' at end of line
	      DO 200 J = START,LEN
		 COUNT = COUNT + 1
		 IF (COUNT.GE.OFFSET) THEN
		    POS = POS + J
		    GOTO 800
		 ENDIF
200	      CONTINUE
150	      POS = POS + 80
	      START = 3
100	   CONTINUE
C
C Run out of header and not found correct offset
C
	   IF (COUNT.LT.OFFSET) THEN
	      STATUS = OSMHLIB__BADOFFSET
	      IF ( .NOT.MH_NOMESS ) CALL LSL_PUTMSG(STATUS)
	      GOTO 999
	      ENDIF
	   ENDIF
C
800	CONTINUE
C
999	OSMH_NEW_GET_FLD_POSN = STATUS
C
	RETURN
	END
C
