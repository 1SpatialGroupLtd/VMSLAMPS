C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-10-15 11:02:14.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION OSMH_FROM_BINDAY( BINDAY, DAY, MONTH, YEAR )
C
***	MODULE	OSMH_FROM_BINDAY
***	IDENT	15OC87
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C
C Author TJ Ibbs, 8 October 1987
C
C Translate an ICL binary date (days since 1900, where 1 Jan 1900
C is day 1) into day,month,year
C
C It returns TRUE if it succeeds, FALSE otherwise
C
	IMPLICIT NONE
C
C Arguments
C
	INTEGER		BINDAY		!  IN - the bindary date to convert
	INTEGER		DAY,MONTH,YEAR	! OUT - the date that results
C
C Functions
C
	LOGICAL		SYS$BINTIM
	LOGICAL		LIB$EMUL
	LOGICAL		LIB$ADDX
	LOGICAL		SYS$NUMTIM
C
C Workspace
C
	LOGICAL		OK		! function return
	INTEGER		ZERO(2)		! our 'zero' date
	INTEGER		TOTDAY(2)	! BINDAY plus days before 1900
	INTEGER		TICKS(2)	! quadword for ticks in a day
	INTEGER		TEMP(2)		! for working in
	INTEGER*2	NUMRES(7)	! result of time
C
C ****************************************************************************
C First we work out the time of the zero date - the time in tiny units
C of the start of 31-DEC-1899 (we want 1-JAN-1900 to be day number 1)
C
	OK = SYS$BINTIM( '31-DEC-1899 00:00:00.00', ZERO )
	IF (.NOT.OK) GOTO 999
C
C and now we must transform that into something more useful
C
	TOTDAY(1) = BINDAY		! quadword for total days -
	TOTDAY(2) = 0			! start with the input value
C
C first work out how many ticks there are in a day...
C
	TICKS(1) = 10 000 000		! number in a second
	TICKS(2) = 0
C
C and multiply by the number of seconds in a day...
C
	OK = LIB$EMUL( TICKS(1), 24*60*60, 0, TICKS )
	IF (.NOT.OK) GOTO 999
C
C we must now calculate the product of the days so far and the number
C of ticks in a day
C
	OK = LIB$EMUL( TICKS(1), TOTDAY(1), 0, TEMP )
	IF (.NOT.OK) GOTO 999
C
	TEMP(2) = TEMP(2) + TICKS(2)*TOTDAY(1)
C
C and to work out the total number of ticks since DECs start of count,
C add on ZERO
C
	OK = LIB$ADDX( TEMP, ZERO, TOTDAY, 4 )
	IF (.NOT.OK) GOTO 999
C
C and finally, find out the time that represents...
C
	OK = SYS$NUMTIM( NUMRES, TOTDAY )
	IF (.NOT.OK) GOTO 999
C
C and transfer the results to the right places
C
	DAY    = NUMRES(3)
	MONTH  = NUMRES(2)
	YEAR   = NUMRES(1)
C
C including the success/failure
C
999	OSMH_FROM_BINDAY = OK
C
	RETURN
	END
