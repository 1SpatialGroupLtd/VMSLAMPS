	SUBROUTINE OSMH_PUTCHAR( INPUT, OUTPUT, NCHS )
C
***	IDENT	20JL89
***	MODULE	OSMH_PUTCHAR
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C Author TJ Ibbs, 8 October 1987
C
C Take an array of ASCII characters in INPUT, and place them into OUTPUT
C as an array of ICL characters. We insert 4 6bit ICL characters into the
C bottom 24 bits of each 32bit VAX longword. Thus OUTPUT must be an array
C of (NCHS+1)/4 longwords. INPUT is an array of NCHS bytes.
C
	IMPLICIT NONE
C
C Arguments
C
	INTEGER		NCHS		! the number of characters
	BYTE		INPUT(NCHS)	! the ASCII byte array
	INTEGER		OUTPUT(*)	! the packed output array
C
C Workspace
C
	INTEGER		I		! DO loop variable
	INTEGER		POS		! position in output longword
	INTEGER		WORD		! output longword index
	LOGICAL		HAD_NULL	! well, have we?
C
	BYTE		CH		! current character
	INTEGER		CH_LONG		! current character as an integer
	EQUIVALENCE	(CH,CH_LONG)
C
C useful things
C
	BYTE		 SPACE
	PARAMETER	(SPACE=' ')
C
C The ICL 6bit and ASCII 7bit characters sets differ as follows:
C The ICL character set is in the sequence
C
C	"0123456789:;<=>?"
C	" !"#$%&'()*+,-./"			where "$" is a pound sign
C	"@ABCDEFGHIJKLMNOPQRSTUVWXYZ[$]^_"	starting at hex 0 (oct 0)
C
C (note that in later versions, the pound sign is replaced by a dollar,
C  and the dollar by a "\", as in ASCII)
C
C whilst the equivalent span of ASCII goes
C
C	" !"#$%&'()*+,-./"			where "$" IS a dollar sign
C	"0123456789:;<=>?"
C	"@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_"	starting at hex 20 (oct 40)
C					      & note the "\" instead of "$"
C
C *****************************************************************************
C We will end the string on a null (0) regardless of NCHS. However, we will
C pad the end of the string with spaces to fill OUTPUT.
C
	HAD_NULL = .FALSE.
C
C make sure the character is null
C
	CH_LONG = 0
C
	DO 100 I = 1, ((NCHS-1)/4+1)*4
C
	   IF (I.LE.NCHS) THEN				! there is another char
	      IF (INPUT(I).EQ.0) HAD_NULL = .TRUE.	! null ends the string
	      IF (HAD_NULL) THEN			! if had a null
		 CH = SPACE				! pad with a space
	      ELSE					! otherwise
	         CH = INPUT(I)				! use the character
	      ENDIF
	   ELSE						! no more characters
	      CH = SPACE				! so pad with spaces
	   ENDIF
C
	   IF ( CH.GE.'a' .AND. CH.LE.'z' ) CH = CH - SPACE
C
	   IF ( (CH.AND.'100'O) .EQ. 0 ) CH = CH.XOR.'20'O
C
	   CH = (CH.XOR.'40'O) .AND. '77'O
C
	   POS  = 18 - MOD(I-1,4)*6
	   WORD = (I-1)/4 + 1
	   CALL LIB$INSV(CH_LONG,POS,6,OUTPUT(WORD))
C
100	CONTINUE
C
	RETURN
	END
