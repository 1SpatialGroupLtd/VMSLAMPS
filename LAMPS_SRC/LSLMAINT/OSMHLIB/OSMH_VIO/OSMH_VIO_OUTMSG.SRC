C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-02-20 12:44:14.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE OSMH_VIO_OUTMSG(ID,CHAR1)
C
***	IDENT	20FE91
***	MODULE	OSMH_VIO_OUTMSG
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RJH	07-Nov-1990
C
C Description
C
C	Outputs a message, having been passed the appropriate
C	1st character prefix
C
C
	IMPLICIT NONE
C
C Included Parameter Files
C
	INCLUDE 'CMN:OSMHLIBMSG.PAR'		! OSMHLIB messages
C
C Arguments
C
	INTEGER*4	ID			! message id
	CHARACTER*1	CHAR1			! 1st character
C
C Common Blocks
C
	INCLUDE 'CMN:OSMH_NEW_FILES.CMN'	! File definitions
	INCLUDE 'CMNV:OSMH_VIO_MSG.CMN'		! message arguments
	INCLUDE 'LSL$CMNIFF:MHOSGB.CMN'		! MH variables
	INCLUDE 'LSL$CMNVIO:CMDCOM.CMN'		! command decoding
C
C Local variables
C
	INTEGER*4	SEVERITY		! message severity
	CHARACTER*1	SEVCH			! message severity char
	CHARACTER*11	PREFIX			! message prefix
C
	CHARACTER*256	MSGSTR			! system nmessage string
	INTEGER*2	MSGLEN			! its length
C
C External Variables
C
	INTEGER*4 STS$K_SUCCESS
	EXTERNAL  STS$K_SUCCESS
	INTEGER*4 STS$K_INFO
	EXTERNAL  STS$K_INFO
	INTEGER*4 STS$K_WARNING
	EXTERNAL  STS$K_WARNING
	INTEGER*4 STS$K_ERROR
	EXTERNAL  STS$K_ERROR
	INTEGER*4 STS$K_SEVERE
	EXTERNAL  STS$K_SEVERE
C
C Set up the prefix
C
	SEVERITY = IBITS(ID,0,3)
C
	IF (SEVERITY .EQ. %LOC(STS$K_SUCCESS)) THEN
	   SEVCH = 'S'
	ELSEIF (SEVERITY .EQ. %LOC(STS$K_INFO)) THEN
	   SEVCH = 'I'
	ELSEIF (SEVERITY .EQ. %LOC(STS$K_WARNING)) THEN
	   SEVCH = 'W'
	ELSEIF (SEVERITY .EQ. %LOC(STS$K_ERROR)) THEN
	   SEVCH = 'E'
	ELSEIF (SEVERITY .EQ. %LOC(STS$K_SEVERE)) THEN
	   SEVCH = 'F'
	ENDIF
C
	PREFIX = CHAR1//'OSMHLIB-'//SEVCH//'-'
C
C Output the message
C
	IF (ID .EQ. OSMHLIB__LINEINPAR) THEN
	   CALL EXPAND('%SLINEINPAR, ',PREFIX)
	   CALL WRITAP('line %N of parameter file',LINE)
C
	ELSEIF (ID .EQ. OSMHLIB__INTSIZ) THEN
	   CALL EXPAND('%SINTSIZ, ',PREFIX)
	   CALL APPEND('Value %^L%N truncated ',THIS_VAL)
	   CALL WRITAP('to fit into header field of %^L%N bytes.',SIZE)
C
	ELSEIF (ID .EQ. OSMHLIB__STRSIZ) THEN
	   CALL EXPAND('%SSTRSIZ, ',PREFIX)
	   CALL WRITAP('String truncated to fit into header field.')
C
	ELSEIF (ID .EQ. OSMHLIB__UNKCMD) THEN
	   CALL EXPAND('%SUNKCMD, ',PREFIX)
	   CALL WRITAP('unknown command "%S"',CMDNST)
C
	ELSEIF (ID .EQ. OSMHLIB__UNKFLG) THEN
	   CALL EXPAND('%SUNKFLG, ',PREFIX)
	   CALL WRITAP('unknown flag')
C
	ELSEIF (ID .EQ. OSMHLIB__BADCALL) THEN
	   CALL EXPAND('%SBADCALL, ',PREFIX)
	   CALL APPEND('Invalid function call. ')
	   CALL WRITAP('Map header not type 3 or 4.')
C
	ELSEIF (ID .EQ. OSMHLIB__ERRCIMHSIZ) THEN
	   CALL EXPAND('%SERRCIMHSIZ, ',PREFIX)
	   CALL WRITAP('CITF header size greater than maximum size %N',
     &								MH2BYSZ)
C
	ELSEIF (ID .EQ. OSMHLIB__ERRCISIZ) THEN
	   CALL EXPAND('%SERRCISIZ, ',PREFIX)
	   CALL APPEND('CITF field size is greater than ')
	   CALL WRITAP('CITF header size')
C
	ELSEIF (ID .EQ. OSMHLIB__ERRCLOPAR) THEN
	   CALL EXPAND('%SERRCLOPAR, ',PREFIX)
	   CALL WRITAP('error closing parameter file LSL$OS_MH_TABLE')
C
	ELSEIF (ID .EQ. OSMHLIB__ERRFMT) THEN
	   CALL EXPAND('%SERRFMT, ',PREFIX)
	   CALL WRITAP('error reading format from LSL$OS_MH_TABLE')
C
	ELSEIF (ID .EQ. OSMHLIB__ERRGETFLD) THEN
	   CALL EXPAND('%SERRGETFLD, ',PREFIX)
	   CALL WRITAP('error getting field from header.')
C
	ELSEIF (ID .EQ. OSMHLIB__ERRINI) THEN
	   CALL EXPAND('%SERRINI, ',PREFIX)
	   CALL WRITAP('error initialising translation table LSL$OS_MH_TABLE.')
C
	ELSEIF (ID .EQ. OSMHLIB__ERROPNPAR) THEN
	   CALL EXPAND('%SERROPNPAR, ',PREFIX)
	   CALL WRITAP('error opening parameter file LSL$OS_MH_TABLE')
C
	ELSEIF (ID .EQ. OSMHLIB__ERROSMHSIZ) THEN
	   CALL EXPAND('%SERROSMHSIZ, ',PREFIX)
	   CALL WRITAP('OSTF header size greater than maximum size %N',
     &								MH2BYSZ)
C
	ELSEIF (ID .EQ. OSMHLIB__ERROSSIZ) THEN
	   CALL EXPAND('%SERROSSIZ, ',PREFIX)
	   CALL APPEND('OSTF field size is greater than ')
	   CALL WRITAP('OSTF header size')
C
	ELSEIF (ID .EQ. OSMHLIB__ERRPUTINT) THEN
	   CALL EXPAND('%SERRPUTINT, ',PREFIX)
	   CALL WRITAP('error inserting integer field into header.')
C
	ELSEIF (ID .EQ. OSMHLIB__ERRPUTSTR) THEN
	   CALL EXPAND('%SERRPUTSTR, ',PREFIX)
	   CALL WRITAP('error inserting string field into header.')
C
	ELSEIF (ID .EQ. OSMHLIB__ERRRDCH) THEN
	   CALL EXPAND('%SERRRDCH, ',PREFIX)
	   CALL WRITAP('error reading character value from the header.')
C
	ELSEIF (ID .EQ. OSMHLIB__ERRRDINT) THEN
	   CALL EXPAND('%SERRRDINT, ',PREFIX)
	   CALL WRITAP('error reading integer value from the header.')
C
	ELSEIF (ID .EQ. OSMHLIB__ERRRDPAR) THEN
	   CALL EXPAND('%SERRRDPAR, ',PREFIX)
	   CALL WRITAP('error reading from parameter file LSL$OS_MH_TABLE')
C
	ELSEIF (ID .EQ. OSMHLIB__FLDNOTINT) THEN
	   CALL EXPAND('%SFLDNOTINT, ',PREFIX)
	   CALL WRITAP('Field for insertion into header expected as integer.')
C
	ELSEIF (ID .EQ. OSMHLIB__FLDNOTSTR) THEN
	   CALL EXPAND('%SFLDNOTSTR, ',PREFIX)
	   CALL WRITAP('Field for insertion into header expected as string.')
C
	ELSEIF (ID .EQ. OSMHLIB__NOFILE) THEN
	   CALL EXPAND('%SNOFILE, ',PREFIX)
	   CALL WRITAP('file pointed to by LSL$OS_MH_TABLE does not exist')
C
	ELSEIF (ID .EQ. OSMHLIB__NOLOG) THEN
	   CALL EXPAND('%SNOLOG, ',PREFIX)
	   CALL WRITAP('logical LSL$OS_MH_TABLE undefined')
C
	ELSEIF (ID .EQ. OSMHLIB__NOSUCHFIELD) THEN
	   CALL EXPAND('%SNOSUCHFIELD, ',PREFIX)
	   CALL WRITAP('invalid header field given as argument.')
C
	ELSE
	   CALL SYS$GETMSG(ID,MSGLEN,MSGSTR)
	   IF (MSGLEN .GT. 0) THEN
	      MSGSTR(1:1) = CHAR1
	      CALL WRITEF('%S',MSGSTR(1:MIN(MSGLEN,80)))
	   ENDIF
	ENDIF
C
C Return
C
	RETURN
	END
