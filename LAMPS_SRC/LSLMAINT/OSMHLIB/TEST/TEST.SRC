C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-11-19 13:24:02.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	PROGRAM TEST
C
***	IDENT	12OC90
***	MODULE	TEST
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					ST	28-Aug-1990
C
C Description
C
C Program to test OSMH_NEW routines
C
	IMPLICIT NONE
C
C Included Parameter Files
C
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'	! LSLLIB message definitions
	INCLUDE 'LSL$CMNOSMH:OSMH_NEW.PAR'	! Header field definitions
	INCLUDE 'LSL$CMNOSMH:OSMHLIBMSG.PAR'	! OSMHLIB message definitions
C
C Common Blocks
C
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'		! Text input
	INCLUDE 'LSL$CMNLSL:STATUS.CMN'		! 
C
	INCLUDE 'LSL$CMNOSMH:OSMH_NEW_MH.CMN'	! Map header variables
	INCLUDE 'LSL$CMNIFF:MHOSGB.CMN'		! Map header definitions
C
C Functions called
C
	LOGICAL		OSMH_NEW_INI			!
	LOGICAL		OSMH_NEW_GETFLD			!
	LOGICAL		OSMH_NEW_GET_FLD_POSN		!
	LOGICAL		OSMH_NEW_GET_CITF_LINE
	LOGICAL		OSMH_NEW_PUT_CITF_LINE
	LOGICAL		OSMH_NEW_PUTINT			!
	LOGICAL		OSMH_NEW_PUTSTR			!
	LOGICAL		OSMH_NEW_PUTFLG			!
C
C Local Variables
C
	INTEGER*4	STATUS			! Success/failure of calls
	INTEGER*4	I,J
	CHARACTER*80	SAMPLE
	CHARACTER*80	AFIELD
	INTEGER*4	NEWX,DUMMY,len
!	EQUIVALENCE	(MH2BYTE(1),SAMPLE)
C
C------------------------------------------------------------------------------
C
	CALL LSL_INIT
C
	STATUS = OSMH_NEW_INI()
	IF ( .NOT.STATUS ) GOTO 999
C
!	MH_CITF_EOR = '&'
	MH_CITF_DIVIDER = '\'
C
C Set up test
C
	SAMPLE(1:40)  = '07        436500  122000      50    1250'
	SAMPLE(41:80) = '                                  1%....'
	do 10 i = 1,80
 10	   mh2byte(i) = ichar(sample(i:i))
!	SAMPLE(1:40)  = '00       -50       -50                  '
	SAMPLE(1:40)  = '0012345678901234567890123456789012345678'
	SAMPLE(41:80) = '7890                                1%..'
	do 11 i = 1,80
 11	   mh2byte(i+80) = ichar(sample(i:i))
	SAMPLE(1:40)  = '001234567890123456789012345678901232500\'
	SAMPLE(41:80) = '\\\\\\\87654321..(c).Crown.Copyright11%.'
	do 12 i = 1,80
 12	   mh2byte(i+160) = ichar(sample(i:i))
	SAMPLE(1:40)  = '00.1.ABCDE.12345678901234567890         '
	SAMPLE(41:80) = '\2345678901234567890123456789012 0%.....'
	do 13 i = 1,80
 13	   mh2byte(i+240) = ichar(sample(i:i))

!	CALL WRITEF('%A80',mh2byte(1))
!	CALL WRITEF('%A80',mh2byte(81))
!	CALL WRITEF('%A80',mh2byte(161))
!	CALL WRITEF('%A80',mh2byte(241))
	CALL WRITEF
C
	DO 1 I = 3,4
	   MH2DESC(2)=I
	   call writef('MH2DESC(2) = %^B%I0',MH2DESC(2))
	   DO 2 J = 1,18
	      STATUS = OSMH_NEW_GET_FLD_POSN(J,MH_POSN,MH_SIZE)
	      IF ( .NOT.STATUS) GOTO 999
	      call writef('Field %^L%I10, Pos %I4, Width %I4',
     &		   J,MH_POSN,MH_SIZE)	   
2	   CONTINUE
1	CONTINUE
C
C
C
	STATUS = OSMH_NEW_GET_CITF_LINE(1,SAMPLE,len)
	IF ( .NOT.STATUS) GOTO 999
	call writef('%S',SAMPLE(1:LEN))
	STATUS = OSMH_NEW_GET_CITF_LINE(2,SAMPLE,len)
	IF ( .NOT.STATUS) GOTO 999
	call writef('%S',SAMPLE(1:LEN))
	STATUS = OSMH_NEW_GET_CITF_LINE(3,SAMPLE,len)
	IF ( .NOT.STATUS) GOTO 999
	call writef('%S',SAMPLE(1:LEN))
	STATUS = OSMH_NEW_GET_CITF_LINE(4,SAMPLE,len)
	IF ( .NOT.STATUS) GOTO 999
	call writef('%S',SAMPLE(1:LEN))

	MH2DESC(2)=3			! Type 3 header
	call writef('MH2DESC(2) = %^B%I0',MH2DESC(2))

	STATUS = OSMH_NEW_GETFLD(MD_X_ORIG)
	IF ( .NOT.STATUS) GOTO 999
	call writef('MD_X_ORIG = %^L%I10 from pos %I4, width %I4',MH_I_VALUE,
     &	            MH_POSN,MH_SIZE)
C
	STATUS = OSMH_NEW_GETFLD(MD_Y_ORIG)
	IF ( .NOT.STATUS) GOTO 999
	call writef('MD_Y_ORIG = %^L%I10 from pos %I4, width %I4',MH_I_VALUE,
     &	            MH_POSN,MH_SIZE)
C
	STATUS = OSMH_NEW_GETFLD(MD_SCALE)
	IF ( .NOT.STATUS) GOTO 999
	call writef('MD_SCALE  = %^L%I10 from pos %I4, width %I4',MH_I_VALUE,
     &	            MH_POSN,MH_SIZE)
C
	MH2DESC(2)=3			! Type 3 header
	call writef('MH2DESC(2) = %^B%I0',MH2DESC(2))
C
	STATUS = OSMH_NEW_GETFLD(MH_CHANGE_IND)
	IF ( .NOT.STATUS) GOTO 999
	call writef('MH_CHANGE_IND = "%S" of width %I4',
     &	             MH_A_VALUE(1:MH_STRLEN),MH_STRLEN)
C
	MH2DESC(2)=4			! Type 4 header
	call writef('MH2DESC(2) = %^B%I0',MH2DESC(2))
C
	STATUS = OSMH_NEW_GETFLD(MH_DIFF_HT_LEN)
	IF ( .NOT.STATUS) GOTO 999
	call writef('MH_DIFF_HT_LEN = %^L%I10 from pos %I4, width %I4',
     &	            MH_I_VALUE,MH_POSN,MH_SIZE)
C
	STATUS = OSMH_NEW_GETFLD(MH_CH_IND_A)
	IF ( .NOT.STATUS) GOTO 999
	call writef('MH_CH_IND_A = "%S" from pos %I4, width %I4',
     &	            MH_A_VALUE(1:MH_STRLEN),MH_POSN,MH_SIZE)
	STATUS = OSMH_NEW_GETFLD(MH_CH_IND_B)
	IF ( .NOT.STATUS) GOTO 999
	call writef('MH_CH_IND_B = "%S" from pos %I4, width %I4',
     &	            MH_A_VALUE(1:MH_STRLEN),MH_POSN,MH_SIZE)
	STATUS = OSMH_NEW_GETFLD(MH_CH_IND_C)
	IF ( .NOT.STATUS) GOTO 999
	call writef('MH_CH_IND_C = "%S" from pos %I4, width %I4',
     &	            MH_A_VALUE(1:MH_STRLEN),MH_POSN,MH_SIZE)
	STATUS = OSMH_NEW_GETFLD(MH_CH_IND_D)
	IF ( .NOT.STATUS) GOTO 999
	call writef('MH_CH_IND_D = "%S" from pos %I4, width %I4',
     &	            MH_A_VALUE(1:MH_STRLEN),MH_POSN,MH_SIZE)
	STATUS = OSMH_NEW_GETFLD(MH_CH_IND_E)
	IF ( .NOT.STATUS) GOTO 999
	call writef('MH_CH_IND_E = "%S" from pos %I4, width %I4',
     &	            MH_A_VALUE(1:MH_STRLEN),MH_POSN,MH_SIZE)
C
	STATUS = OSMH_NEW_GETFLD(MH_CHANGE_IND)
	IF ( .NOT.STATUS) GOTO 999
	call writef('MH_CHANGE_IND = "%S" of width %I4',
     &	             MH_A_VALUE(1:MH_STRLEN),MH_STRLEN)
C
	MH2DESC(2)=4			! Type 4 header
	call writef('MH2DESC(2) = %^B%I0',MH2DESC(2))
C

	newx = 123456789
	STATUS = OSMH_NEW_PUTINT( MD_SCALE, newx )
	IF ( .NOT.STATUS) GOTO 999
C
	newx = 411111
	STATUS = OSMH_NEW_PUTINT( MD_X_ORIG, newx )
	IF ( .NOT.STATUS) GOTO 999
C
	newx = 133333
	STATUS = OSMH_NEW_PUTINT( MD_Y_ORIG, newx )
	IF ( .NOT.STATUS) GOTO 999
C
	newx = 6148
	STATUS = OSMH_NEW_PUTINT( MH_DIFF_HT_LEN, newx )
	IF ( .NOT.STATUS) GOTO 999
C
!	AFIELD(1:17)='Yabba Dabba Doooo'
!	STATUS = OSMH_NEW_PUTSTR( MH_CHANGE_IND, AFIELD, 17 )
!	IF ( .NOT.STATUS) GOTO 999
	CALL WRITEF('%A80',mh2byte(1))
	CALL WRITEF('%A80',mh2byte(81))
	CALL WRITEF('%A80',mh2byte(161))
	CALL WRITEF('%A80',mh2byte(241))
C
	call writef
	call writef('putting line...')
	call writef
	SAMPLE(1:40)  = '07Far out in the uncharted backwaters of'
	SAMPLE(41:80) = ' the Western Spiral Arm of the Galaxy 1%'
	STATUS = OSMH_NEW_PUT_CITF_LINE(1,SAMPLE,80)
	IF ( .NOT.STATUS) GOTO 999
	CALL WRITEF('%A80',mh2byte(1))
	CALL WRITEF('%A80',mh2byte(81))
	CALL WRITEF('%A80',mh2byte(161))
	CALL WRITEF('%A80',mh2byte(241))
C
	AFIELD(1:11)='elevenchars'
	call writef('putting "%S" in MH 3',AFIELD(1:11))
	MH2DESC(2) = 3
	STATUS = OSMH_NEW_PUTSTR( MH_CHANGE_IND, AFIELD, 11 )
	IF ( .NOT.STATUS) GOTO 999
	call writef('putting "%S" in MH 4',AFIELD(1:11))
	MH2DESC(2) = 4
	STATUS = OSMH_NEW_PUTSTR( MH_CHANGE_IND, AFIELD, 11 )
	IF ( .NOT.STATUS) GOTO 999
	CALL WRITEF('%A80',mh2byte(1))
	CALL WRITEF('%A80',mh2byte(81))
	CALL WRITEF('%A80',mh2byte(161))
	CALL WRITEF('%A80',mh2byte(241))
C
	CALL WRITEF
	STATUS = OSMH_NEW_PUTSTR( DUMMY, AFIELD, 11 )
	IF ( .NOT.STATUS) GOTO 999
C
999	CONTINUE
C
C Return
C
	CALL LSL_EXIT(STATUS)
C
	END
