;
; * This file is part of the LAMPS distribution, released as a software
; * preservation project to archive digital history for future historians.
; * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
; *
; * Timestamp of this file for the 2002 release was: 1981-11-13 14:38:28.000000000 +0000
; *
; * This program is free software: you can redistribute it and/or modify
; * it under the terms of the GNU General Public License as published by
; * the Free Software Foundation, version 3.
; *
; * This program is distributed in the hope that it will be useful, but
; * WITHOUT ANY WARRANTY; without even the implied warranty of
; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
; * General Public License for more details.
; *
; * You should have received a copy of the GNU General Public License
; * along with this program. If not, see http://www.gnu.org/licenses/.
;
	.TITLE	VSBS

	.IDENT	/13NO81/

	.PSECT	VSCODE

; Copyright Laser-Scan Laboratories Ltd., Cambridge, England.

; Author:	Susan Manning


; BASIC VS11 GRAPHIC LIBRARY SUPPORT

; Primitive line drawing entries


; Relative

; Move by

.ENTRY	VSMBY,^M<R4,R5,R6,R7,R8,R9,R10,R11>
	MOVF	@4(AP),R7
	MOVF	@8(AP),R9
	BSBB	VS$MBY
	RET


; Line by

.ENTRY	VSLBY,^M<R4,R5,R6,R7,R8,R9,R10,R11>
	MOVF	@4(AP),R7
	MOVF	@8(AP),R9
	MOVW	#VSINT,R10
	BSBB	VS$MLBY
	RET


; Absolute

; Move to

.ENTRY	VSMTO,^M<R4,R5,R6,R7,R8,R9,R10,R11>
	MOVF	@4(AP),R7
	MOVF	@8(AP),R9
	BSBB	VS$MTO
	RET


; Line to

.ENTRY	VSLTO,^M<R4,R5,R6,R7,R8,R9,R10,R11>
	MOVF	@4(AP),R7
	MOVF	@8(AP),R9
	MOVW	#VSINT,R10
	BSBB	VS$MLTO
	RET


; Move by zero
$VSMB0:	CLRF	R7
	CLRF	R9

VS$MBY:	CLRW	R10
VS$MLBY:BSBB	VSLBGEN
	RSB


VS$MTO::CLRW	R10
VS$MLTO:BSBB	VSLTGEN
	RSB

; form endpoint in user space
VSLBGEN:ADDF2	VSRUX,R7
	ADDF2	VSRUY,R9

; establish endpoint in user space
VSLTGEN:CMPW	VSMOD,#CHARCT		; been drawing characters ?
	BNEQ	10$
	PUSHL	R7			; preserve where we were
	PUSHL	R9			;   going to
	MOVL	R10,-(SP)
	CLRW	VSMOD			; avoid recursion
	BSBB	$VSMB0			; move back to last line-drawing posn.
	MOVL	(SP)+,R10		; recover
	MOVL	(SP)+,R9
	MOVL	(SP)+,R7
10$:	MOVF	R7,VSRUX
	MOVF	R9,VSRUY
	ADDF2	VSRUOX,R7
	ADDF2	VSRUOY,R9
	MULF3	VSTR,R7,R6		; transform endpoint to VS11 pixels
	MULF3	VSTR,R9,R8
	JSB	$VSMOV
	RSB


; Character Drawing Entries

; String of characters passed by descriptor

.ENTRY	VSCHRS,^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	MOVL	4(AP),R2		; descriptor address
	MOVZWL	(R2),R3			; length of string
	BEQL	VSCH2			; if zero, none to output
	MOVL	4(R2),LCADDR		; form string descriptor
	MOVL	R3,LCLEN

VSCH1:	CALLG	STRARGS,G^STR$UPCASE	; uppercase the string
	BLBS	R0,10$
	JSB	VSERRSIG		; signal any errors
10$:	JSB	V.FLSH			; flush out buffered moves
	INCL	R3
	DIVL3	#2,R3,R0		; determine no. of data words required
	DECL	R3
	ADDL2	#3,R0			; add in character control words
	JSB	$VSCHKBF		; ensure space in buffer
	MOVW	#CHARCT,R4
	JSB	SETMODC			; output control words
	MOVL	UCADDR,R2		; get start of uppercased string
	CMPL	R3,#1
	BEQL	20$			; br round loop if only 1 char to o/p
15$:	MOVW	(R2)+,R4
	JSB	$VSBFW			; write data word
	ACBL	#2,#-2,R3,15$		; repeat until <= 1 character left
20$:	DECL	R3			; odd character left to output ?
	BLSS	VSCH2			; br if not
	MOVZBW	(R2),R4
	JSB	$VSBFW			; output it
VSCH2:	RET


; String of characters, zero terminated

.ENTRY	VSCHRZ,^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	MOVL	4(AP),R2		; get address of string
	MOVL	R2,LCADDR		; form string descriptor
	CLRL	R3			; init character count
10$:	TSTB	(R2)+			; look for null byte
	BEQL	20$			; branch if found
	INCL	R3			; update count
	BRB	10$
20$:	TSTL	R3			; any characters ?
	BEQL	VSCH2			; no
	MOVL	R3,LCLEN		; store length
	BRW	VSCH1			; join common code


	.END

