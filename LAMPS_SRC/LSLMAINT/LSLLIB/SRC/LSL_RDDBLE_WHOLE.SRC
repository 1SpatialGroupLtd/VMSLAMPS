C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-03-13 16:25:24.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION LSL_RDDBLE_WHOLE( R, CALLERS_HADDOT )
C
***	MODULE	LSL_RDDBLE_WHOLE
***	IDENT	13MR87
C
	IMPLICIT NONE
C
C
C Copyright Laser-Scan Laboratories, Ltd., Cambridge, England
C
C Author  R Fairbairns	Coded 12.xii.78, 3.xii.81 as RDDBLE
C
C To read a double length real number from the current buffer
C Function result is TRUE if there's no number left on the line,
C or if we failed to read it, and FALSE if we read a number
C Deals with 'rational format' and numbers-with-exponents
C
CMOD	13-Mar-1987	mod 2/428	TJ Ibbs
CMOD	Exponents may be any valid integer - so just use RDLONG to read
CMOD	them, no need to check that they start with 0-9 (which stopped
CMOD	an exponent with a sign being accepted). Also, we are using
CMOD	RDLONG instead of RDINT - ie accepting a larger exponent!
C
CMOD	 7-May-1986	RJH
CMOD	Allow for several spaces after exponent indicator
C
CMOD	15-Jan-1986	TJ Ibbs/RJ Hulme 	
CMOD	Modified for LSLLIB and renamed LSL_RDDBLE_WHOLE
C
C arguments
C
	REAL*8		R		! out - real number read
	LOGICAL		CALLERS_HADDOT	! out - true if find /,E or .
C
C parameters
C
	BYTE		SLASH
	BYTE		ZERO,NINE
	BYTE		UPD,LWD
	BYTE		UPE,LWE
C
	PARAMETER	(SLASH='/')
	PARAMETER	(ZERO='0',NINE='9')
	PARAMETER	(UPD='D',LWD='d')
	PARAMETER	(UPE='E',LWE='e')
C
C include files - error numbers
C
***	PARAMETER/LSL$CMNLSL:LSLLIBMSG/
C
C exception common
C
***	COMMON/LSL$CMNLSL:EXCEPTION/
C
C workspace
C
	REAL*8		NUMTOR		! numerator   - part of number
	REAL*8		DENTOR		! denominator - part of number
C
	INTEGER*4	EXPNT		! the exponent
	INTEGER*2	SAVPTR		! saved decode pointer
	INTEGER		I		! loop variable
	LOGICAL		INT_HADDOT	! internal 'had decimal point'
	LOGICAL		HADSGN		! 'had sign'
	LOGICAL		RET		! return from functions
	BYTE		CH		! a character
C
C INT_HADDOT is set true if we find a dot, or a /, or an exponent
C - ie if we find 'proof' that this is a real number, and not an integer
C
C if given, and if INT_HADDOT is true, CALLERS_HADDOT will be set true
C
C functions called
C
	LOGICAL		RDCH		! read a single character
	LOGICAL		RDCHS		! skip spaces and read character
	LOGICAL		LSL_RDDBLE_CMPT	! read one component
	LOGICAL		RDLONG		! read an integer (longword)
	LOGICAL		RDINT		! read an integer
	LOGICAL		HAVE_I_AN_ARG	! check presence of an argument
C
C functions referenced
C
	LOGICAL		RREAL8		! our other entry point
	INTEGER		LSL_NUM_CHAND	! our condition handler
	EXTERNAL	LSL_NUM_CHAND
C
C *********************************************************************
C
C note that we have (as yet) had no exceptions
C
	LSL_EXCP = LSL__NORMAL
	ERRNUM   = LSL__NORMAL
C
C establish our condition handler
C
	CALL LIB$ESTABLISH( LSL_NUM_CHAND )
C
C initial values
C
	LSL_RDDBLE_WHOLE = .TRUE.	! assume failure
	DENTOR     = 1.0D0		! number is over 1
	INT_HADDOT = .FALSE.		! no dot or E found yet
	HADSGN     = .FALSE.		! no sign found yet
	EXPNT      = 0			! no exponent yet
C
C firstly, read the numerator - this is the minimum that must be
C present for a real number
C
	IF ( LSL_RDDBLE_CMPT( NUMTOR, HADSGN, INT_HADDOT ) ) GOTO 9999
C
C *********************************************************************
C
C check to see if it is a rational-format number
C - if it was followed by end of line, then that's all
C
	IF ( RDCH(CH) ) GOTO 200	! end of line found
C
C look for denominator - note that this may not have a sign
C
	IF (CH.EQ.SLASH) THEN
C
C	 we have a number in the format xxx/yyy - check that the
C	 second number is indeed there
C
	   IF ( RDCH(CH) ) THEN			! if it was end of line
	      CALL BSCH				! then unread the slash
	   ELSE
	      CALL BSCH		! unread the presumed digit
C
	      IF (CH.LT.ZERO .OR. CH.GT.NINE) THEN
	         CALL BSCH	! next thing not a digit - unread the "/"
	      ELSE
C
C	       it was a digit - read the denominator
C	       (we pretend that we have already had a sign, so that the
C		routine will not accept one)
C
	         HADSGN = .TRUE.	! "had a sign" (bluff)
	         IF (LSL_RDDBLE_CMPT(DENTOR,HADSGN,INT_HADDOT)) 
     &							GOTO 9999
	         INT_HADDOT = .TRUE.	! so it definitely was a real number
C
	      ENDIF
	   ENDIF
C
	ELSE IF ( CH.EQ.UPE .OR. CH.EQ.LWE .OR.
     &	          CH.EQ.UPD .OR. CH.EQ.LWD ) THEN
C
C	 we have a number in the format a.bEc or a.bDc - check that the
C	 exponent is indeed there
C
	   CALL DCPSAV(SAVPTR)			! remember where we are
C
	   IF ( RDCHS(CH) ) THEN		! read the next non-space
	      CALL DCPSET(SAVPTR)		! end of line - go back
	      CALL BSCH				! and unread the E or D
	   ELSE
	      CALL BSCH			! unread the presumed first digit
	      IF ( RDLONG(EXPNT) ) THEN	! try to read the integer
		 CALL DCPSET(SAVPTR)	! not a number - go back
		 CALL BSCH		! and unread the E or D
	      ELSE
	         INT_HADDOT = .TRUE.	! it is truly a real number
	      ENDIF
	   ENDIF
	ELSE
C
C	 nothing else to look for
C
	   CALL BSCH			! unread terminator
	ENDIF
C
C *********************************************************************
C
C return result
C
200	NUMTOR = NUMTOR/DENTOR		! work out our division sum
C
C now check that that didn't overflow...
C
	IF ( .NOT.LSL_EXCP ) GOTO 9000	! exit with failure
C
C if we had a negative exponent, we must smallify the number, and if we
C had a positive one, we must enlarge it
C
	IF (EXPNT.LT.0) THEN
	   DO 40 I = 1,-EXPNT
	      NUMTOR = NUMTOR*0.1D0
	      IF ( .NOT.LSL_EXCP ) GOTO 9000	! exit with failure
40	   CONTINUE
	ELSEIF (EXPNT.GT.0) THEN
	   DO 60 I = 1,EXPNT
	      NUMTOR = NUMTOR*10.0D0
	      IF ( .NOT.LSL_EXCP ) GOTO 9000	! exit with failure
60	   CONTINUE
	ENDIF
C
C and so transfer the result across, now that we think it's safe
C
	LSL_RDDBLE_WHOLE = .FALSE.
	R      = NUMTOR
	IF ( HAVE_I_AN_ARG(2) .AND. INT_HADDOT) CALLERS_HADDOT = .TRUE.
C
C if we had an exception, unset our number, and note the error
C
9000	IF ( .NOT.LSL_EXCP ) THEN
	   ERRNUM = LSL__HADEXCP	! we had an exception
	   R = 0.0			! unset our number
	ENDIF
9999	RETURN
	END
