C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-12-10 15:09:30.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION IFFOPEN( LUN, FILE, FID, REPORT, REVISION )
C
***	IDENT	10DE87
***	MODULE	IFFOPEN
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C Author TJ Ibbs, 30 Oct 1986
C
C To open an existing IFF file for readonly
C
C......................................................................
CMOD 2/524	10-Dec-1987	Tony J Ibbs
C		add an optional argument specifying the input
C		revision level
C......................................................................
C
	IMPLICIT NONE
C
C arguments
C
	INTEGER*2	LUN		! in - unit number to open file on
	CHARACTER*(*)	FILE		! in - filename of file to open
	INTEGER*4	FID(*)		! in - optional file ID
	LOGICAL		REPORT		! in - optional - report opened
	INTEGER		REVISION	! in - optional - revision level
C
C *********************************************************************
C parameter files
C
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR/NOLIST'	! error numbers
C
C common files
C
	INCLUDE	'LSL$CMNIFF:IFFHAN.CMN'		! for errors
C
C functions
C
	LOGICAL		HAVE_I_AN_ARG		! check for optional argument
	LOGICAL		LSL_IFFPARSE		! parse filename
C
C workspace
C
	LOGICAL		OK			! function return
	LOGICAL		HADVER			! had version number
C
C *********************************************************************
C and deal according to our arguments
C
	IF ( HAVE_I_AN_ARG(3) ) THEN
C
C	 if we have the file ID argument, then we are opening a file
C	 with IFFOPI
C
	   CALL IFFERM( .FALSE. )		! switch off errors
	   CALL IFFOPI( LUN, FILE, FID, 0 )
C
	ELSE
C
C	 otherwise, this is a normal open - check that the filename
C	 includes a version number
C
	   OK = LSL_IFFPARSE(FILE,HADVER)
	   IF (.NOT.OK) THEN
	      IFFOPEN = LSL__IFFPARSE
	      CALL LSL_PUTMSG( IFFOPEN, FILE )
	      CALL LSL_ADDMSG( OK )
	      GOTO 9000
	   ENDIF
C
C	 otherwise, the name is alright - so open the file
C
	   CALL IFFERM( .FALSE. )		! switch off errors
C
C	 we need a version number - if none given, ensure
C	 that we open the most recent version of the file
C
	   IF (HADVER) THEN
	      CALL IFFOPN( LUN, FILE, 0 )
	   ELSE
	      CALL IFFOPN( LUN, FILE//';0', 0 )
	   ENDIF
C
	ENDIF
C
C *********************************************************************
C reinstate IFFLIB error reporting
C
	CALL IFFERM( .TRUE. )
C
C was there an error in opening the file?
C
	IF ( IERCD.NE.0 ) THEN
	   IFFOPEN = LSL__IFFOPEN
	   CALL LSL_PUTMSG( IFFOPEN, FILE )
	   CALL IFFERR
	   GOTO 9000
	ENDIF
C
C we opened the file OK - switch read lookahead on
C
	CALL IFFRLA(.TRUE.)
C
C does the user want to set the input revision level?
C if so, check that it is sensible
C
	IF ( HAVE_I_AN_ARG(5) ) THEN
	   IF ( REVISION.LT.-1 .OR. REVISION.GT.1 ) THEN
	      IFFOPEN = LSL__IFFINREV
	      CALL LSL_PUTMSG( IFFOPEN, REVISION )
	      CALL LSL_ADDSTR( FILE )
	      GOTO 9000
	   ELSE
	      CALL IFFIRV(REVISION)
	   ENDIF
	ENDIF
C
C *********************************************************************
C we have succeeded
C
	IFFOPEN = LSL__NORMAL
C
C should we report that we have opened the file?
C
	IF ( HAVE_I_AN_ARG(4) ) THEN
	   IF ( REPORT ) CALL LSL_IFFREP('read')
	ENDIF
C
C and return (with the relevant result)
C
9000	RETURN
	END
