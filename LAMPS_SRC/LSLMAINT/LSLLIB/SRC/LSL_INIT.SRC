	SUBROUTINE LSL_INIT( TIMER, TRACING )
C
***	IDENT	11SE87
***	MODULE	LSL_INIT
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RJH	11-DEC-1985
C
C	LSLLIB - Initialisation of Library
C
CMOD	Clarke Brunt,	11-Sep-1987
CMOD	- call LSL_SET_OUTPUT and LSL_SET_INPUT to set the defaults
C
CMOD	Tony J Ibbs,	17-Mar-1987	mod 2/432
CMOD	- call LSL_DEBUG_TRACE to determine internal flag for LSL_PUTMSG
CMOD	- add new (optional) argument TRACING to return result of that
C
CMOD	Tony J Ibbs,	30-Oct-1986
CMOD	correct initial length of EXPMAX to be DEF_EXPMAX, not DEF_EXPMAX+1
C
	IMPLICIT NONE
C
C Arguments
C
	LOGICAL		TIMER		! call LSL_TMRINI ?
	LOGICAL		TRACING		! LSL_PUTMSG -> LSL_SIGNAL ?
C
C Common Blocks
C
***	COMMON/LSL$CMNLSL:CMDCOM/	! command decoding
***	COMMON/LSL$CMNLSL:EXPC/		! text output
***	COMMON/LSL$CMNLSL:STATUS/	! exit status
***	COMMON/LSL$CMNLSL:TXTC/		! text input
***	COMMON/LSL$CMNLSL:INEQUAL/	! command inequalities
C
C Common Block Extension
C
	INCLUDE	'LSL$CMNLSL:CMDCOM.INC'
C
C External Declarations
C
	EXTERNAL	LSL__NORMAL	! normal return status
	EXTERNAL	LIB$GET_INPUT	! input routine
	EXTERNAL	LIB$PUT_OUTPUT	! output routine
C
C Functions called
C
	LOGICAL		HAVE_I_AN_ARG	! got argument ?
C
C Local Variables
C
	LOGICAL		DOTIME		! call LSL_TMRINI ?
C
C *********************************************************************
C Reference the LSLLIB messages - note that the %LOC here gets the
C actual value of LSL__NORMAL.
C
	LSL_STATUS = %LOC(LSL__NORMAL)
C
C Set up default input and output routines
	CALL LSL_SET_INPUT (LIB$GET_INPUT)
	CALL LSL_SET_OUTPUT(LIB$PUT_OUTPUT)
C
C Now set the return status
C
	LSL_STATUS = LSL_STATUS .OR. LSL_QUIET
C
C Create fake string descriptors
C
	EXPPTR = %LOC(EXPBUF)		! text output buffer address
	TXTADD = %LOC(TXTBUF)		! text input buffer address
	CMDNST(2) = %LOC(CMDNBF)	! command name buffer address
	SECNST(2) = %LOC(SECNBF)	! 2ndary command name buffer address
	STARST(2) = %LOC(STARBF)	! string argument buffer address
	INEQ_NAME(2) = %LOC(INEQ_BUF)	! inequality name buffer address
C
C Set default buffer lengths
C
	EXPMAX = DEF_EXPMAX
	TXTLIM = DEF_TXTLIM
C
C Set up the timer exit handler
C
	IF ( HAVE_I_AN_ARG(1) ) THEN
	   DOTIME = TIMER
	ELSE
	   DOTIME = .TRUE.
	ENDIF
	IF ( DOTIME ) CALL LSL_TMRINI
C
C Determine whether calls to LSL_PUTMSG will be changed into calls to
C LSL_SIGNAL - we see if logical name LSL$DEBUG_TRACE exists
C
	IF ( HAVE_I_AN_ARG(2) ) THEN
	   CALL LSL_DEBUG_TRACE(TRACING)
	ELSE
	   CALL LSL_DEBUG_TRACE
	ENDIF
C
	RETURN
	END
