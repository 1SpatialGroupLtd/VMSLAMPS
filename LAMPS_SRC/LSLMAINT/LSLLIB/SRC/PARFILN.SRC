	LOGICAL	FUNCTION PARFILN( RESULT, RESLEN,
     &				  SOURCE, DEFAULT, ALLOW_VER )
C
***	IDENT	29JA86
***	MODULE	PARFILN
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 25 July 1984
C Amended for LSLLIB, 3 July 1985
C
C This function takes the filename in SOURCE and parses it against the
C DEFAULT supplied. It returns TRUE if this fails (more detailed error
C code in RETCOD/IERR), and FALSE if all goes well.
C
C The constituent parts of the filename are also stored into the
C FILENAME common block.
C
C ALLOW_VER is TRUE if version numbers are to be allowed in the
C filename, FALSE otherwise
C
	IMPLICIT NONE
C
C include our own message parameters
C
***	PARAMETER/LSL$CMNLSL:LSLLIBMSG/
C
C our filename common block
C
***	COMMON/LSL$CMNLSL:FILENAME/
C
C we are passed
C
	CHARACTER*(*)	RESULT		!out - where to place the result
	INTEGER*2	RESLEN		!out - length of result in that
C
	CHARACTER*(*)	SOURCE		! in - basic filename to parse
	CHARACTER*(*)	DEFAULT		! in - default to parse against
C
	LOGICAL		ALLOW_VER	! in - allow version numbers?
C
C workspace
C
	INTEGER*4	IERR		! error return
C
C functions used
C
	INTEGER*4	FILE_PARSE	! to parse the filename
C
C assume success
C
	PARFILN = LSL__NORMAL
C
C unset the common block contents...
C
	LEN_NOD = 0			! all lengths reset to zero
	LEN_DEV = 0
	LEN_DIR = 0
	LEN_NAM = 0
	LEN_EXT = 0
	LEN_VER = 0
	HAD_NOD = .FALSE.		! not had any file parts yet
	HAD_DEV = .FALSE.
	HAD_DIR = .FALSE.
	HAD_NAM = .FALSE.
	HAD_EXT = .FALSE.
	HAD_VER = .FALSE.
	STR_NOD = ' '			! set all parts to spaces
	STR_DEV = ' '
	STR_DIR = ' '
	STR_NAM = ' '
	STR_EXT = ' '
	STR_VER = ' '
C
C so let us parse the default filename, placing the constituent parts
C into the common block...
C
	IERR = FILE_PARSE(
     &			DEFAULT,		! filename to parse
     &			HAD_NOD, STR_NOD, LEN_NOD,
     &			HAD_DEV, STR_DEV, LEN_DEV,
     &			HAD_DIR, STR_DIR, LEN_DIR,
     &			HAD_NAM, STR_NAM, LEN_NAM,
     &			HAD_EXT, STR_EXT, LEN_EXT,
     &			HAD_VER, STR_VER, LEN_VER
     &			 )
C
C did that succeed?
C
	IF (IERR.NE.LSL__NORMAL) THEN
	   IF ( IERR.EQ.LSL__RESPARSOVF) THEN
	      PARFILN = LSL__DEFTOOBIG		! part of name too long
	   ELSE
	      IF ( IERR.EQ.LSL__MISSARGS ) THEN
	         PARFILN = LSL__BADPARSE	! too few arguments
	      ELSE
	         PARFILN = LSL__DEFFILNAM	! error parsing default
	      ENDIF
	      GOTO 9999				! give up
	   ENDIF
	ENDIF
C
C did we have an illegal version number?
C
	IF ( HAD_VER .AND. .NOT.ALLOW_VER ) THEN
	   PARFILN = LSL__DEFVERNUM
	   GOTO 9999
	ENDIF
C
C now parse the specified file-name against the default
C
	IERR = FILE_PARSE(
     &			SOURCE,			! filename to parse
     &			HAD_NOD, STR_NOD, LEN_NOD,
     &			HAD_DEV, STR_DEV, LEN_DEV,
     &			HAD_DIR, STR_DIR, LEN_DIR,
     &			HAD_NAM, STR_NAM, LEN_NAM,
     &			HAD_EXT, STR_EXT, LEN_EXT,
     &			HAD_VER, STR_VER, LEN_VER
     &			 )
C
C did that succeed?
C
	IF (IERR.NE.LSL__NORMAL) THEN
	   IF ( IERR.EQ.LSL__RESPARSOVF ) THEN
	      PARFILN = LSL__SRCTOOBIG		! part of name too long
	   ELSE
	      IF ( IERR.EQ.LSL__MISSARGS ) THEN
	         PARFILN = LSL__BADPARSE	! too few arguments
	      ELSE
	         PARFILN = LSL__SRCFILNAM	! error parsing source
	      ENDIF
	      GOTO 9999				! give up
	   ENDIF
	ENDIF
C
C did we have an illegal version number?
C
	IF ( HAD_VER .AND. .NOT.ALLOW_VER ) THEN
	   PARFILN = LSL__SRCVERNUM
	   GOTO 9999
	ENDIF
C
C so now expand the resultant filename into our destination string
C
	CALL EXPFLN( RESULT, RESLEN )
C
C if the final result is too long, return the string length
C and complain
C
	IF ( RESLEN.GT.LEN(RESULT) ) THEN
	   RESLEN = LEN(RESULT)
	   PARFILN = LSL__FILTOOLONG
	ENDIF
C
9999	RETURN
	END
