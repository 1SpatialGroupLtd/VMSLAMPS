	INTEGER*4 FUNCTION READSTR(STRING, TERM_CHAR, TERM_COND,
     &				   SKIP,   RETVAL)
C
***	MODULE READSTR
***	IDENT 10JN87
C
	IMPLICIT NONE
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England
C
C Created 	TJ Ibbs, 1 February 1985
C Amended for LSLLIB	 3 July 1985
C Based on CMDLIB RDSTR, author R. Fairbairns, October 1981
C
CMOD	10-Jun-1988	Tony J Ibbs	(mod 2/556)
CMOD	new type of string, ON_CMD2, which allows integers in command
CMOD	names, as well as alphabetic characters and underlines
C
CMOD	24-Aug-1987	mod 2/508	TJ Ibbs
CMOD	make TERM_CHAR an optional argument. If it is absent, then it
CMOD	is not used, and if it is present, its value is used regardless
CMOD	of what it is.
C
CMOD	10-Jul-1987	mod 2/497	TJ Ibbs
CMOD	when reading ON_CHAR or ON_CHAR2, and the only character on the
CMOD	line is that character, return LSL__STRCHAR, not LSL__STREOL
C
CMOD	12-May-1986	TJ Ibbs
CMOD	correct checking TERM_CHAR when I meant TERM_COND !!
C
C To read a string from the current text buffer
C Function result is length of string read (0 if none found)
C
C Arguments
C
	CHARACTER*(*)	STRING
	BYTE		TERM_CHAR		! optional
	INTEGER		TERM_COND		! optional
	LOGICAL		SKIP			! optional
	INTEGER		RETVAL			! optional
C
C STRING	is the string to be read into
C TERM_CHAR	is the character to end the string on
C TERM_COND	is the condition to end on
C SKIP		is true if leading spaces and tabs are to be ignored
C RETVAL	is used to return a success/failure value
C
C The values of TERM_COND are:
C
C ON_CMD	terminate as for RDCOMM commands - on any
C		character that is not alphabetic or "_"
C
C ON_CMD2	as for ON_CMD, but also allow digits (0-9) in
C		the string being read
C
C ON_CHAR	terminate on the character TERM_CHAR
C
C ON_CHAR2	as for ON_CH, but the sequence TERM_CHAR TERM_CHAR
C		inserts TERM_CHAR into STRING
C
C ON_SPACE	terminate on space or tab (as well as on
C		TERM_CHAR, if it is present)
C
C ON_EOL	terminate at end of line only
C
C Note that string reading ALWAYS ends at the end of the line
C
C get the definitions of the ON_xxx values
C
***	PARAMETER/LSL$CMNLSL:READSTR/
C
C If TERM_CHAR is absent, then it is equivalent to end of line
C
C Values of RETVAL are:
C
C	LSL__BADTCOND	invalid value of TERM_COND
C	LSL__STRTOOLONG	string too long to fit - reading terminated
C	LSL__STREOL	success - string terminated by end of line
C	LSL__STRSPACE	success - string terminated by space
C	LSL__STRCHAR	success - string terminated by TERM_CHAR
C	LSL__STRCMD	success - string terminated as for RDCOMM
C
C include the definitions of these
C
***	PARAMETER/LSL$CMNLSL:LSLLIBMSG/
C
C *********************************************************************
C
C workspace
C
	INTEGER*4	LENGTH		! accumulates length of string
	INTEGER*4	ILNGTH		! length of arg (input) string
	INTEGER*4	LSTNSP		! last nonspace char of string
C
	BYTE		T_CH		! our copy of TERM_CHAR
C
	BYTE		CH		! for reading characters
	BYTE		CH1		! for checking double T_CH
C
	LOGICAL		HAD_T_CH	! did we have TERM_CHAR ??
	LOGICAL		SKIPNG		! copy of SKIP
	LOGICAL		REPEAT		! T_CH T_CH to insert T_CH ??
	LOGICAL		END_ON_CH	! end on T_CH
	LOGICAL		END_ON_SP	! end on space/tab
	LOGICAL		END_ON_CMD	! end as for RDCOMM
	LOGICAL		DIGIT_CMDS	! but also allow digits in commands
C
	LOGICAL		USE_RET		! true if have RETVAL
C
C functions called
C
	LOGICAL		HAVE_I_AN_ARG	! have I an argument?
	LOGICAL		RDCH		! read one character
	LOGICAL		RDCHS		! ditto, ignoring spaces/tabs
C
C useful parameters
C
	BYTE		 SPACE,TAB
	PARAMETER	(SPACE=' ',TAB='	')
C
C some useful statement functions
C
	LOGICAL		IS_CMD
	LOGICAL		IS_DIG
	LOGICAL		IS_SPACE
C
	IS_CMD(CH)   = ( (CH.GE.'A'.AND.CH.LE.'Z') .OR.
     &			 (CH.GE.'a'.AND.CH.LE.'z') .OR.
     &			 (CH.EQ.'_') )
C
	IS_DIG(CH)   = ( CH.GE.'0'.AND.CH.LE.'9' )
C
	IS_SPACE(CH) = ( CH.EQ.SPACE .OR. CH.EQ.TAB )
C
C *********************************************************************
C
C initialise things
C
	LENGTH = 0			! nothing output to string
	ILNGTH = LEN(STRING)		! maximum length to output
	LSTNSP = 0			! length to last non-space char
C
C are we meant to return our success status?
C NOTE that the return status is set to "on end of line"
C
	IF (HAVE_I_AN_ARG(5)) THEN
	   USE_RET = .TRUE.
	   RETVAL  = LSL__STREOL	! assume end on end of line
	ELSE
	   USE_RET = .FALSE.
	ENDIF
C
C find out whether we have a termination character
C
	IF ( HAVE_I_AN_ARG(2) ) THEN
	   HAD_T_CH = .TRUE.
	   T_CH     = TERM_CHAR		! our copy of TERM_CHAR
	ELSE
	   HAD_T_CH = .FALSE.
	ENDIF
C
C what is our termination condition?
C
	IF (HAVE_I_AN_ARG(3)) THEN
	   IF (TERM_COND.EQ.ON_CMD) THEN
	      END_ON_CMD  = .TRUE.	! RDCOMM termination
	      DIGIT_CMDS  = .FALSE.	! but no digits allowed
	      END_ON_SP   = .TRUE.	! although irrelevant
	      END_ON_CH   = .FALSE.	! ignore T_CH
	      REPEAT      = .FALSE.
	   ELSEIF (TERM_COND.EQ.ON_CHAR) THEN
	      END_ON_CH   = HAD_T_CH	! end on T_CH if it's there
	      REPEAT      = .FALSE.	! no repeats in STRING
	      END_ON_CMD  = .FALSE.
	      DIGIT_CMDS  = .FALSE.
	      END_ON_SP   = .FALSE.
	   ELSEIF (TERM_COND.EQ.ON_CHAR2) THEN
	      END_ON_CH   = HAD_T_CH	! end on T_CH if it's there
	      REPEAT      = .TRUE.	! T_CH T_CH means insert T_CH
	      END_ON_CMD  = .FALSE.
	      DIGIT_CMDS  = .FALSE.
	      END_ON_SP   = .FALSE.
	   ELSEIF (TERM_COND.EQ.ON_SPACE) THEN
	      END_ON_SP   = .TRUE.	! end on space/tab
	      REPEAT      = .FALSE.	! no repeats in STRING
	      END_ON_CMD  = .FALSE.
	      DIGIT_CMDS  = .FALSE.
	      END_ON_CH   = HAD_T_CH	! end on T_CH if it's there
	   ELSEIF (TERM_COND.EQ.ON_EOL) THEN
	      END_ON_SP   = .FALSE.
	      REPEAT      = .FALSE.
	      END_ON_CMD  = .FALSE.
	      DIGIT_CMDS  = .FALSE.
	      END_ON_CH   = .FALSE.
	   ELSEIF (TERM_COND.EQ.ON_CMD2) THEN
	      END_ON_CMD  = .TRUE.	! RDCOMM termination
	      DIGIT_CMDS  = .TRUE.	! but also allowing digits in commands
	      END_ON_SP   = .TRUE.	! although irrelevant
	      END_ON_CH   = .FALSE.	! ignore T_CH
	      REPEAT      = .FALSE.
	   ELSE
	      IF (USE_RET) RETVAL = LSL__BADTCOND
	      GOTO 9000			! illegal value - return
	   ENDIF
	ELSE
	   END_ON_SP   = .FALSE.	! don't end on space/tab
	   REPEAT      = .FALSE.	! no repeats in STRING
	   END_ON_CMD  = .FALSE.
	   DIGIT_CMDS  = .FALSE.
	   END_ON_CH   = HAD_T_CH	! end on T_CH if it's there
	ENDIF
C
C are we to ignore leading spaces/tabs?
C                           
	IF (HAVE_I_AN_ARG(4)) THEN
	   SKIPNG = SKIP
	ELSE
	   SKIPNG = .TRUE.
	ENDIF
C
C *********************************************************************
C
C read the first character...
C if it's already the end of the line, give up now
C
	IF (SKIPNG) THEN
	   IF (RDCHS(CH)) GOTO 9000
	ELSE
	   IF (RDCH(CH)) GOTO 9000
	ENDIF
C
C *********************************************************************
C
C The decision is made thus:
C
C If we are reading RDCOMM strings, and this char is not valid in such,
C then unread this char and end the string
C If we are ending on spaces/tabs, and this is such, then unread it and
C end the string
C If we are ending on T_CH, amd this is such, then we must look at
C REPEAT
C	If we are not REPEATing, then the string ends
C	If we are REPEATing, read the next character
C		If that is also T_CH, then we are OK, and the
C		character will be added to the string
C		If it is not T_CH, then we must unread it and end the
C		string
C
100	IF ( END_ON_CMD .AND. .NOT.IS_CMD(CH) ) THEN
	   IF ( .NOT.(DIGIT_CMDS.AND.IS_DIG(CH)) ) THEN
	      IF (USE_RET) RETVAL = LSL__STRCMD
	      GOTO 8000				! unread char & end
	   ENDIF
	ELSEIF ( END_ON_SP  .AND. IS_SPACE(CH) ) THEN
	   IF (USE_RET) RETVAL = LSL__STRSPACE
	   GOTO 8000				! unread space & end
	ELSEIF ( END_ON_CH  .AND. CH.EQ.T_CH ) THEN
	   IF (REPEAT) THEN
	      IF (RDCH(CH1)) THEN
		 IF (USE_RET) RETVAL = LSL__STRCHAR	! ends on T_CH
		 GOTO 9000				! that's it
	      ENDIF
	      IF (CH1.NE.T_CH) THEN
		 IF (USE_RET) RETVAL = LSL__STRCHAR	! end on T_CH
		 GOTO 8000				! unread & end
	      ENDIF
	   ELSE
	      IF (USE_RET) RETVAL = LSL__STRCHAR	! end on T_CH
	      GOTO 9000					! end of string
	   ENDIF
	ENDIF
C
C so by here, we have a character to add to our string
C
	IF (LENGTH.GE.ILNGTH) THEN	! no more room in string
	   IF (USE_RET) RETVAL = LSL__STRTOOLONG
	   GOTO 8000			! and give up
	ENDIF
	LENGTH = LENGTH+1
	STRING(LENGTH:LENGTH) = CHAR(CH)
	IF (.NOT.IS_SPACE(CH)) LSTNSP = LENGTH	! record last nonspace
C
C get next character of string
C
	IF (RDCH(CH)) GOTO 9000
C
	GOTO 100			! check the character
C
C *********************************************************************
C
C terminated, we read a character that must be released again
C
8000	CALL BSCH
C
C terminated, character pointer correct
C if we are ending on end-of-line only (ie all other termination
C conditions are false) then we must drop any trailing spaces
C
9000	IF ( .NOT.END_ON_SP  .AND. .NOT.REPEAT .AND.
     &	     .NOT.END_ON_CMD .AND. .NOT.END_ON_CH ) LENGTH=LSTNSP
C
	READSTR = LENGTH			! return result
C
	RETURN
	END
