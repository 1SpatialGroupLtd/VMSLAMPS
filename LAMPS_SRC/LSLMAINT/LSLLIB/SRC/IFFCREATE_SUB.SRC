	LOGICAL FUNCTION IFFCREATE_SUB( LUN, FILE, HISTORY, SIZE,
     &					REPORT, REVISION )
C
***	IDENT	10DE87
***	MODULE	IFFCREATE_SUB
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C Author TJ Ibbs, 30 Oct 1986
C
C To create a new IFF file
C - this routine is called by the macro routine IFFCREATE
C   This is so that the FORTRAN compiler doesn't conspire with the
C   linker to dereference HISTORY, thus causing us to be passed a
C   byte array rather than the character descriptor that we require
C
C......................................................................
CMOD 2/524	10-Dec-1987	Tony J Ibbs
C		add an optional argument specifying the output
C		revision level
C......................................................................
C
	IMPLICIT NONE
C
C arguments
C
	INTEGER*2	LUN		! in - unit number to open file on
	CHARACTER*(*)	FILE		! in - filename of file to open
	INTEGER*4	HISTORY(2)	! in - optional history annotation
	INTEGER*4	SIZE		! in - optional initial file size
	LOGICAL		REPORT		! in - optional - report created
	INTEGER		REVISION	! in - optional - revision level
C
C NOTE that we have declared HISTORY as an integer array - in fact it is
C an optional character string, but the FORTRAN compiler optiomises things
C such that if a character string argument is absent, the program falls
C over. Since HISTORY, if present, is just passed through to IFFOPN, it
C doesn't really matter what it is declared as - we declare it as an
C array of that size simply because it looks like a 'fake' character
C descriptor - we don't intend to try to make use of that fact!
C
C *********************************************************************
C parameter files
C
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR/NOLIST'	! error numbers
C
C common files
C
	INCLUDE	'LSL$CMNIFF:IFFHAN.CMN'		! for errors
C
C functions
C
	LOGICAL		HAVE_I_AN_ARG		! check for optional argument
	LOGICAL		LSL_IFFPARSE		! parse filename
C
C workspace
C
	LOGICAL		OK			! function return
	LOGICAL		GOT_HISTORY		! is argument there?
	LOGICAL		GOT_SIZE		! ditto
	LOGICAL		GOT_REVISION		! ditto
	LOGICAL		HADVER			! had version number
C
C *********************************************************************
C let's check whether the filename has a version number
C
C parse the filename
C
	OK = LSL_IFFPARSE( FILE, HADVER )
C
C check that the parse worked
C
	IF ( .NOT.OK ) THEN
	   IFFCREATE_SUB = LSL__IFFPARSE
	   CALL LSL_PUTMSG( IFFCREATE_SUB, FILE )
	   CALL LSL_ADDMSG( OK )
	   GOTO 9000
	ENDIF
C
C did we have a version number?
C
	IF ( HADVER ) THEN
	   IFFCREATE_SUB = LSL__IFFVERNUM
    	   CALL LSL_PUTMSG( IFFCREATE_SUB )
	   CALL LSL_ADDSTR( FILE )
	   GOTO 9000
	ENDIF
C
C *********************************************************************
C otherwise, the name is alright - establish which optional
C arguments we have
C
	GOT_HISTORY  = HAVE_I_AN_ARG(3)
	GOT_SIZE     = HAVE_I_AN_ARG(4)
	GOT_REVISION = HAVE_I_AN_ARG(6)
C
C if we have a size, check that it is not zero (which means open readonly)
C and not negative (which is silly)
C
	IF ( GOT_SIZE .AND. SIZE.LE.0 ) THEN
	   IFFCREATE_SUB = LSL__IFFSIZE
	   CALL LSL_PUTMSG( IFFCREATE_SUB, SIZE )
	   GOTO 9000
	ENDIF
C
C switch IFF errors off
C
	CALL IFFERM( .FALSE. )
C
C do we need to set the output revision level?
C if so, check that it is a sensible value
C
	IF ( GOT_REVISION ) THEN
	   IF ( REVISION.LT.0 .OR. REVISION.GT.1 ) THEN
	      IFFCREATE_SUB = LSL__IFFOUTREV
	      CALL LSL_PUTMSG( IFFCREATE_SUB, REVISION )
	      CALL LSL_ADDSTR( FILE )
	      GOTO 9000
	   ELSE
	      CALL IFFORV( REVISION )
	   ENDIF
	ENDIF
C
C we can now open the IFF file
C
	IF ( GOT_HISTORY ) THEN
	   IF ( GOT_SIZE ) THEN
	      CALL IFFOPN( LUN, FILE, SIZE, , HISTORY )
	   ELSE
	      CALL IFFOPN( LUN, FILE,     , , HISTORY )
	   ENDIF
	ELSE
	   IF ( GOT_SIZE ) THEN
	      CALL IFFOPN( LUN, FILE, SIZE )
	   ELSE
	      CALL IFFOPN( LUN, FILE )
	   ENDIF
	ENDIF
C
C resinstate IFFLIB error reporting
C
	CALL IFFERM( .TRUE. )
C
C was there an error in opening the file?
C
	IF ( IERCD.NE.0 ) THEN
	   IFFCREATE_SUB = LSL__IFFCREATE
	   CALL LSL_PUTMSG( IFFCREATE_SUB, FILE )
	   CALL IFFERR
	   GOTO 9000
	ENDIF
C
C *********************************************************************
C it worked - we have a new file opened for write
C - should we report that fact?
C
	IF ( HAVE_I_AN_ARG(5) ) THEN
	   IF ( REPORT ) CALL LSL_IFFREP('write')
	ENDIF
	IFFCREATE_SUB = LSL__NORMAL
C
9000	RETURN
	END
