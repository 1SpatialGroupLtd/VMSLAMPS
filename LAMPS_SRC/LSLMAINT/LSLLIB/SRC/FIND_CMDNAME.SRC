C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-10-12 11:12:44.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE FIND_CMDNAME(CMDTBL,CMDNUM,CMDNAM,CMDLEN,CONTEXT)
C
***	IDENT	12OC87
***	MODULE	FIND_CMDNAME
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C to find a command in command table CMDTBL, corresponding to command
C number CMDNUM.
C
C Author R.W. Russell	11-Oct-1987
C
	IMPLICIT	NONE
C
***	PARAMETER/LSL$CMNLSL:TBLFLG/
C
C arguments
	INTEGER*4	CMDTBL(*) ! the command table
	INTEGER		CMDNUM	! the command number to find
	CHARACTER*(*)	CMDNAM	! the command corresponding to CMDNUM
	INTEGER		CMDLEN	! the number of characters in CMDNAM
	INTEGER		CONTEXT	! the state of the current search -
				! should be set to zero to start search.
				! on output, it contains either the
				! index where the command found (>0) and
				! where a subsequent search should start
				! from, or 0, when no command has been
				! found
C w/s
	INTEGER		I		! loop variable
	INTEGER		LOOP_OFFSET	! loop offset
	INTEGER		CMDNO		! current command number
	INTEGER		NCMD		! number of commands in table
	INTEGER		START		! where to start counting from
	INTEGER		TABIND		! index into table
	INTEGER*4	TABHDR		! first long word of cmd table
	INTEGER*2	TABHD2(2)
	EQUIVALENCE	(TABHDR,TABHD2(1))
C
C functions called
	INTEGER		LIB$EXTZV
C
	NCMD = CMDTBL(1).AND.'7FFF'X	! number of commands in table
C
C if no commands in table, cannot find CMDNUM
	IF (NCMD.LE.0) THEN
	   CONTEXT = 0
	   GOTO 999
	ENDIF
C
C find where descriptors start
	TABHDR = CMDTBL(1)
	LOOP_OFFSET = 0
C
C if there are user flags in the table, there is a long word pointing
C to them, which we must step over
	IF ((TABHD2(2).AND.CMT$M_NOUFLG).EQ.0) LOOP_OFFSET = 1
C
C if there are secondary commands in the table, there is a long word
C pointing to them, which we must step over
	IF ((TABHD2(2).AND.CMT$M_MNEMS).NE.0) LOOP_OFFSET = LOOP_OFFSET+1
C
C find out where to start counting from 
	START = CONTEXT + 1
C
C if outside range, then no good
	IF (START.GT.NCMD.OR.START.LE.0) THEN
	   CONTEXT = 0
	   GOTO 999
	ENDIF
C
C make sure table is sorted
	CALL LSL_SORTAB(CMDTBL)
C
C loop through descriptors, looking for command number
	DO 10, I = START,NCMD
	   TABIND = I*2 + LOOP_OFFSET + 1	
C
C get second word from this descriptor - the comamnd number
	   CMDNO = LIB$EXTZV(16,16,CMDTBL(TABIND))
	   IF (CMDNO.EQ.CMDNUM) THEN		! found the required no
	      CONTEXT = I
	      CMDLEN = CMDTBL(TABIND) .AND. 'FFFF'X  ! only want 16 bits
	      CALL LIB$SCOPY_R_DX(CMDLEN,%VAL(CMDTBL(TABIND+1)),CMDNAM)
	      GOTO 999
	   ENDIF
   10	CONTINUE
C
C nothing found, so set CONTEXT to 0
	CONTEXT = 0
C
  999	RETURN
	END

