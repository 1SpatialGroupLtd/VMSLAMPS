	LOGICAL FUNCTION CVT_DAY_DMY( BINDAY, DAY, MONTH, YEAR )
C
***	MODULE	CVT_DAY_DMY
***	IDENT	13AP92
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C
C Author R J Hulme, 19 November 1987
C Based on OSMH_FROM_BINDAY
C
C Translate a DEC binary date, i.e. number of days since zero, 
C into day,month,year
C
C It returns TRUE if it succeeds, FALSE otherwise
C
	IMPLICIT NONE
C
	INCLUDE		'($SSDEF)'
C
C Arguments
C
	INTEGER		BINDAY		!  IN - the bindary date to convert
	INTEGER		DAY,MONTH,YEAR	! OUT - the date that results
C
C Functions
C
	LOGICAL		LIB$EMUL
	LOGICAL		SYS$NUMTIM
C
C Workspace
C
	LOGICAL		OK		! function return
	INTEGER		TOTDAY(2)	! quadword for total days
	INTEGER		TICKS(2)	! quadword for ticks in a day
	INTEGER		TEMP(2)		! quadword for working in
	INTEGER*2	NUMRES(7)	! result of time
C
C ****************************************************************************
C
C check for a silly date which might cause integer overflow
C (the number is supposed to be 31-DEC-9999)
	IF (ABS(BINDAY).GT.2973483) THEN
	   OK = SS$_IVTIME
	   GOTO 999
	ENDIF
C
C We have to transform the binary date given into ticks
C
	TOTDAY(1) = BINDAY		! total days as input
	TOTDAY(2) = 0
C
C start with the number of ticks in a second
C
	TICKS(1) = 10 000 000
	TICKS(2) = 0
C
C and multiply by the number of seconds in a day to get the number of 
C ticks in a day
C
	OK = LIB$EMUL( TICKS(1), 24*60*60, 0, TICKS )
	IF (.NOT.OK) GOTO 999
C
C we must now calculate the product of the days so far and the number
C of ticks in a day
C
	OK = LIB$EMUL( TICKS(1), TOTDAY(1), 0, TEMP )
	IF (.NOT.OK) GOTO 999
C
	TEMP(2) = TEMP(2) + TICKS(2)*TOTDAY(1)
C
C and finally, find out the time that represents...
C
	OK = SYS$NUMTIM( NUMRES, TEMP )
	IF (.NOT.OK) GOTO 999
C
C and transfer the results to the right places
C
	DAY    = NUMRES(3)
	MONTH  = NUMRES(2)
	YEAR   = NUMRES(1)
C
C including the success/failure
C
999	CVT_DAY_DMY = OK
C
	RETURN
	END
