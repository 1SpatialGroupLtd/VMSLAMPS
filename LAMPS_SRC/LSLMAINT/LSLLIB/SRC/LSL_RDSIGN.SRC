C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-01-15 11:35:24.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION LSL_RDSIGN( SIGN )
C
***	MODULE LSL_RDSIGN
***	IDENT 15JA86
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author		R Fairbairns	October 1981
C Altered for LSLLIB	TJ Ibbs		2 April 1985
C
C To read the sign for the various read number routines
C
C returns TRUE if we read end of line, instead, and FALSE otherwise
C
C arguments
C
	INTEGER*4	SIGN		! out - sign that is read
C
C SIGN returns a result as follows:
C
C			+1	if '+' or no sign
C			-1	if '-'
C
***	PARAMETER/LSL$CMNLSL:LSLLIBMSG/
***	COMMON/LSL$CMNLSL:EXCEPTION/
C
C workspace
C
	BYTE		CH		! character read
C
C character definitions
C
	BYTE		PLUS, MINUS
C
	PARAMETER	(PLUS ='+')
	PARAMETER	(MINUS='-')
C
C function called
C
	LOGICAL		RDCHS
C
C *********************************************************************
C
C look for the sign character - ignore leading spaces
C
	IF ( RDCHS(CH) ) THEN
C
	   ERRNUM     = LSL__UNEXPEOL	! unexpected end of line
	   LSL_RDSIGN = .TRUE.		! so no sign to read
	   SIGN = 1			! assume plus !!
C
	ELSE
C
	   LSL_RDSIGN = .FALSE.		! success
C
	   IF (CH.EQ.PLUS) THEN
	      SIGN = 1
	   ELSEIF (CH.EQ.MINUS) THEN
	      SIGN = -1
	   ELSE
	      SIGN = 1
	      CALL BSCH			! not a sign - unread it
	   ENDIF
C
	ENDIF
C
	RETURN
	END
