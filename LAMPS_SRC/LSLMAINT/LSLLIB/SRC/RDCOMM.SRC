C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-11-20 14:34:14.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION RDCOMM(TABLE)
C
***	MODULE RDCOMM
***	IDENT 20NO91
C
	IMPLICIT NONE
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England
C Author R. Fairbairns
C
C Coded October 1981
C From SOL original, coded March 1976
C
C Amended for LSLLIB, TJ Ibbs	6 July 1985
C
CMOD	13 Aug 1986	Tony J Ibbs
CMOD	use MY_HADDOT as arg to LSL_RDREAL_WHOLE - needs to be
CMOD	a longword argument, not a single byte as HADDOT
C
CMOD	11 Apr 1988	Tony J Ibbs	(mod 2/556)
CMOD	add interpretation of the AZONLY command flag bit, which
CMOD	is set 0 if digits are allowed in command names
CMOD
CMOD	Note that although the table flags N (or R) and D may be
CMOD	specified together with no complaint, the D will actually
CMOD	override the others - ie you can't actually have numeric
CMOD	commands if you have asked for digits in your command names.
CMOD	Which is sensible enough.
CMOD
CMOD	Note also that, although we only want to allow digits in command
CMOD	names, what we're actually doing is allowing any characters that
CMOD	aren't space or tab (or characters such as "<" that won't go
CMOD	through the $CMD macro), since we're just reading the name up to
CMOD	the next space, tab or end-of-line. So the command LITES2 becomes
CMOD	legal, but so does the command 11-Apr-1988...
CMOD	(caveat emptor for the moment - if this becomes a problem then we
CMOD	 need a new version of READSTR to read ON_CMD2 which only allows
CMOD	 ON_CMD plus digits)
CMOD
CMOD	10 Jun 1988	Tony J Ibbs	(mod 2/556)
CMOD	Change AZONLY to be DIGOK - this defaults such that the bit being
CMOD	zero means don't allow digits, which is the correct (safe) default.
CMOD	Also, use the new ON_CMD2 qualifier for READSTR when using DIGOK
CMOD
CMOD	20 Nov 1991	C Clarke Brunt
CMOD	increase length of string argument from 80 to 255
C
C
C To read a command from the command line buffer, and to read
C  its arguments, as defined in the command flag bits
C
	INTEGER*2	TABLE(*)	! (minimum size is 6)
C
C TABLE is a table of commands, assembled with CMDTAB.MAR
C	(q.v. for format)
C
C Function result is 0 if error, or command number
C (eventually result -1 will signify numeric command)
C
C workspace
	BYTE		CH, CHX		! characters from command line
	INTEGER*4	CMDNDX		! internal storage
	INTEGER*2	SV_DCPTR	! preserves DCPTR
	INTEGER*4	I, NUMARG	! loop control
	LOGICAL*4	MY_HADDOT	! long version of HADDOT
	LOGICAL*1 	HADSGN		! sign found
	LOGICAL*1	CMFULL		! 'full' flag
	LOGICAL*1	PRIMARY		! TRUE while processing 1ary cmd
	INTEGER*4	CMFLG_SAV	! saving command, table flags
	INTEGER*4	TBFLG_SAV	!  while reading inequal name
	INTEGER*4	UFLAG_SAV	! .. ditto user flags
	LOGICAL*1	NOUFLG_SAV	! .. ditto 'no user flags'
C					!		 indicator
	INTEGER*4	CMDNUM_SAV	! .. ditto command number
	INTEGER*4	CMDFST_SAV(2)	! .. ditto 'command found' name
	CHARACTER*3	INEQUALITY	! for building up inequality
C					!  from <=> symbols
C functions called
	INTEGER*4	LSL_FIND_CMD
	INTEGER*4	READSTR
	LOGICAL		RDCH, RDCHS, RDLONG, RDNUM, LSL_RDREAL_WHOLE
C
C private command table
	INTEGER*4	LSL_INEQUAL_CMD_TABLE
	EXTERNAL	LSL_INEQUAL_CMD_TABLE
C
***	PARAMETER/LSL$CMNLSL:LSLLIBMSG/
***	PARAMETER/LSL$CMNLSL:READSTR/
***	PARAMETER/LSL$CMNLSL:CMDFLG/
***	PARAMETER/LSL$CMNLSL:TBLFLG/
C
***	COMMON/LSL$CMNLSL:EXCEPTION/
***	COMMON/LSL$CMNLSL:CMDCOM/
***	COMMON/LSL$CMNLSL:TXTC/
***	COMMON/LSL$CMNLSL:INEQUAL/
C
	INCLUDE 'LSL$CMNLSL:CMDCOM.INC'
C
C initial estimates
	RDCOMM = 0				! pessimism
	SECMDN = 0				! no 2ndary yet
	CMDNUM = 0				! nor any command at all
	ARGMSG = .FALSE.			! no arguments missing
	HADDOT = .FALSE.			! default...
	MY_HADDOT = .FALSE.			! no reals read yet
	CMDACT = 0				! no arguments
	CMDICT = 0				! integers
	CMDRCT = 0				! or reals
	INEQUAL = 0				! no inequality
	PRIMARY = .TRUE.			! looking for 1ary
C
C no exception yet
	LSL_EXCP = LSL__NORMAL
	ERRNUM   = LSL__NORMAL
C
C save in case we're to try a numeric command
	IF (.NOT.RDCHS(CH)) CALL BSCH		! first skip blanks
	SV_DCPTR = DCPTR
C
C is there anything on the line?
	IF (RDCHS(CH)) THEN			! nothing on the line
	  ERRNUM = LSL__UNEXPEOL		! unexpected end of line
	  GOTO 990
	ENDIF
C
C is this a 'sign' character (logical argument)?
	CMDNEG = .FALSE.
	IF (CH.EQ.'-') GOTO 10
	IF (CH.EQ.'+') GOTO 20
C
C not a sign
	HADSGN = .FALSE.
	CALL BSCH
	GOTO 30
C
C - to start command
10	CMDNEG = .TRUE.
C
C + to start command
20	HADSGN = .TRUE.
C
C now get the actual command
30	CMDNLE = 80
C
	TABFLG = TABLE(2)			! would otherwise have
C						!  been done by FINCMD
C - choose the sort of string read to do according to whether digits
C   are allowed within command mnemonics or not
C
	IF ((TABFLG.AND.CMT$M_DIGOK).EQ.0) THEN
	  CMDNLE = READSTR(CMDNST, 0, ON_CMD, .TRUE.)	! not allowed
	ELSE
	  CMDNLE = READSTR(CMDNST, 0, ON_CMD2, .TRUE.)	! allowed
	ENDIF
C
C if we got a command, go off and work out what it is
	IF (CMDNLE.GT.0) GOTO 70
C
C we didn't get a command
C If we allow digits in command names, then it can't have been a
C numeric command, so it must be an error...
C
	IF ((TABFLG.AND.CMT$M_DIGOK).NE.0) GOTO 40
C
C otherwise, should we check for a numeric command (ie are they allowed?)
	IF ((TABFLG.AND.CMT$M_NUMFBD).NE.0) GOTO 40
C
C we should - go back to start of the command
	DCPTR = SV_DCPTR
	IF ((TABFLG.AND.CMT$M_NUMREA).NE.0) GOTO 39
C
C integer command - establish if default base
	IF (DEFBASE.NE.0) GOTO 37
	IF (RDLONG(INTARG(1))) GOTO 38
C
C successful numeric command
35	RDCOMM = -1
	CMDNUM = -1
	GOTO 196
C
C read integer to non-standard default base
37	IF (.NOT.RDNUM(INTARG(1), DEFBASE)) GOTO 35
C
C failed to read number - was it an arithmetic fault?
38	IF (.NOT.LSL_EXCP) GOTO 900
	GOTO 40
C
C read real-number command
39	IF (.NOT.LSL_RDREAL_WHOLE(REALAR(1))) GOTO 35
	IF (.NOT.LSL_EXCP) GOTO 900
C
C why did we get an unexpected end?
40	IF (RDCH(CH)) GOTO 60
C
C bad character
50	UNXCHR = CH				! copy to common block
	ERRNUM = LSL__UNEXPCH
	IF (.NOT. NOMESS) CALL LSL_PUTMSG(ERRNUM,UNXCHR)
	GOTO 990
C
C naughty end of line
60	ERRNUM = LSL__UNEXPEOL
	IF (.NOT. NOMESS) CALL LSL_PUTMSG(ERRNUM)
	GOTO 990
C
C so we got a command name string
70	CALL LSL_SORTAB(TABLE)		! ensure the table's in order
	CMDNDX = LSL_FIND_CMD(CMDNST, TABLE) ! look up the command
	IF (CMDNDX) 80,90,100
C
C unknown command
80	ERRNUM = LSL__UNEXPCMD
	IF (.NOT. NOMESS) CALL LSL_PUTMSG(ERRNUM,CMDNST)
	GOTO 990
C
C ambiguity
90	ERRNUM = LSL__AMBIG
	IF (.NOT. NOMESS) CALL LSL_PUTMSG(ERRNUM,CMDNST,CMDFST,CMDAST)
	GOTO 990
C
C command - check on logical argument
100	IF (.NOT.HADSGN) GOTO 110		! none - never
	IF ((CMDFLG.AND.CMD$M_LOG).NE.0) GOTO 110 ! they are permitted
C
C naughty sign
	DCPTR = SV_DCPTR
	GOTO 40
C
C any sign was OK
C  - initialise flag and counts
110	IF ((CMDFLG.AND.CMD$M_MNEM).NE.0) THEN	! 2ndary table present
	  IF (RDCHS(CH)) THEN			! it's not there
	    SECMDN = 0				! so there's no cmd no
	    IF ((CMDFLG.AND.CMD$M_FULL).NE.0)
     &					GOTO 60	! it had to be there
	    GOTO 195				! it needn't - return
	  ENDIF
	  CALL BSCH				! unread it if it is
	  SV_DCPTR = DCPTR			! so's we can get back
	  IF (CH.EQ.'+' .OR. CH.EQ.'-') THEN	! process 2ndary's sign
	    CALL RDCH(CH)			! has to be OK
	    CMDNEG = CH.EQ.'-'
	    HADSGN = .TRUE.
	  ENDIF
	  CMDNUM_SAV = CMDNUM			! preserve 1ary cmd no
	  UFLAG_SAV = UFLAG			! and user flags
	  NOUFLG_SAV = NOUFLG			! and their 'presence'
	  DO I = 1,2
	    CMDFST_SAV(I) = CMDFST(I)
	  ENDDO
	  SECNLE = 80
	  SECNLE = READSTR(SECNST, 0, ON_CMD, .TRUE.) ! get 2ndary name
	  IF (SECNLE.EQ.0) THEN			! couldn't find one
	    SECMDN = 0				! no command, then
	    IF (HADSGN) DCPTR = SV_DCPTR	! restore decode posn to
C						!   before any sign
	    IF ((CMDFLG.AND.CMD$M_FULL).NE.0)
     &					GOTO 60	! it had to be there
	    GOTO 195				! it needn't - return
	  ENDIF
	  CALL LSL_SORTAB(%VAL(SECTAB))		! ensure 2ndary sorted
	  SECMDN = LSL_FIND_CMD(SECNST, %VAL(SECTAB)) ! look up 2ndary
	  DO I = 1,2
	    CMSFST(I) = CMDFST(I)
	    CMDFST(I) = CMDFST_SAV(I)
	  ENDDO
	  PRIMARY = .FALSE.			! on 2ndary now
	  IF (SECMDN.LT.0) THEN			! failed to find name
	    ERRNUM = LSL__UNEXPCMD2
	    IF (.NOT. NOMESS) CALL LSL_PUTMSG(ERRNUM,SECNST)
	    GOTO 890
	  ELSE IF (SECMDN.EQ.0) THEN		! ambiguity
	    ERRNUM = LSL__AMBIG2
	    IF (.NOT. NOMESS) 
     &			CALL LSL_PUTMSG(ERRNUM,SECNST,CMSFST,CMDAST)
	    GOTO 890
	  ENDIF
	  SECMDN = CMDNUM			! copy (correct) 2ndary
C						!  command number
	  CMDNUM = CMDNUM_SAV			! restore 1ary
	  SUFLAG = UFLAG			! copy 2ndary user flag
	  UFLAG = UFLAG_SAV			! and restore its 1ary
	  NSUFLG = NOUFLG			! copy 2ndary flag
C						!	    indicator
	  NOUFLG = NOUFLG_SAV			! and restore 1ary
	  IF (HADSGN) THEN			! check sign was allowed
	    IF ((CMDFLG.AND.CMD$M_LOG).EQ.0) THEN ! it wasn't
	      DCPTR = SV_DCPTR
	      GOTO 40				! let standard routine
C						!   sort it out
	    ENDIF
	  ENDIF
	  GOTO 100				! go to decode 2ndary's
C						!  arguments
	ENDIF
C
C get on and decode 'real' arguments
	CMFULL = (CMDFLG.AND.CMD$M_FULL).NE.0
C
C cope with '=' sign before the arguments
	IF ((CMDFLG.AND.CMD$M_EQUAL).NE.0) THEN
	   IF (.NOT.RDCHS(CH)) THEN
	      IF (CH.NE.'=' .AND. CH.NE.':') THEN
		 CALL BSCH
	      ENDIF
	   ENDIF
	ELSE IF ((CMDFLG.AND.CMD$M_INEQUAL).NE.0) THEN
	   CMFLG_SAV = CMDFLG
	   TBFLG_SAV = TABFLG
	   UFLAG_SAV = UFLAG
	   NOUFLG_SAV = NOUFLG
	   CMDNUM_SAV = CMDNUM
	   DO I = 1,2
	      CMDFST_SAV(I) = CMDFST(I)
	   ENDDO
	   IF (.NOT.RDCHS(CH)) THEN
	      IF (CH.EQ.'<') THEN
		 INEQUALITY = 'LSS'		! first stab
		 IF (RDCH(CHX)) GOTO 50		! fault '< <eol>'
		 IF (CHX.EQ.'>') THEN
		    INEQUALITY = 'NEQ'
		 ELSE IF (CHX.EQ.'=') THEN
		    INEQUALITY = 'LEQ'
		 ELSE
		    CALL BSCH			! 2nd char not part
C						!   of symbol
		 ENDIF
	      ELSE IF (CH.EQ.'=') THEN
		 INEQUALITY = 'EQL'
	      ELSE IF (CH.EQ.'>') THEN
		 INEQUALITY = 'GTR'		! first stab
		 IF (RDCH(CHX)) GOTO 50		! fault '> <eol>'
		 IF (CHX.EQ.'=') THEN
		    INEQUALITY = 'GEQ'
		 ELSE
		    CALL BSCH
		 ENDIF
	      ELSE IF (CH.EQ.'.') THEN		! FORTRAN-type inequal
		 INEQ_NAME(1) = INEQ_BUF_LEN	! set length to maximum
		 INEQ_NAME(1) = READSTR(INEQ_NAME, CH, ON_CHAR, .FALSE.)
		 IF (INEQ_NAME(1).EQ.0) GOTO 50	! reject no string as
C						!  unexpected '.'
		 CALL LSL_SORTAB(LSL_INEQUAL_CMD_TABLE)
		 INEQUAL = LSL_FIND_CMD(INEQ_NAME, 
     &					LSL_INEQUAL_CMD_TABLE)
		 IF (INEQUAL.LT.0) THEN
	            ERRNUM = LSL__BADINEQ
		    IF (.NOT. NOMESS) CALL LSL_PUTMSG(ERRNUM,INEQ_NAME)
		    GOTO 890
		 ENDIF
		 IF (INEQUAL.EQ.0) THEN
	            ERRNUM = LSL__AMBINEQ
		    IF (.NOT. NOMESS)
     &			CALL LSL_PUTMSG(ERRNUM,INEQ_NAME,CMDFST,CMDAST)
		    GOTO 890
		 ENDIF
		 GOTO 112			! got a .-name
	      ELSE
		 CALL BSCH			! not an inequality
		 GOTO 113
	      ENDIF
C
C here, we've generated an inequality name - so that
C  we're SURE it's right !!!
	      CALL LSL_SORTAB(LSL_INEQUAL_CMD_TABLE)
	      INEQUAL = LSL_FIND_CMD(INEQUALITY, LSL_INEQUAL_CMD_TABLE)
C
C adjust from command number to inequality number
112	      INEQUAL = CMDNUM-1
113	      CONTINUE
	   ENDIF				! RDCHS
	   CMDFLG = CMFLG_SAV
	   TABFLG = TBFLG_SAV
	   UFLAG = UFLAG_SAV
	   NOUFLG = NOUFLG_SAV
	   CMDNUM = CMDNUM_SAV
	   DO I = 1,2
	      CMDFST(I) = CMDFST_SAV(I)
	   ENDDO
	ENDIF
C
C get integer arguments
	NUMARG = CMDFLG.AND.CMD$M_INTS
	IF (NUMARG.EQ.0) GOTO 140
	DO 120 I = 1,NUMARG
	   IF (DEFBASE.EQ.0) GOTO 114
C
C read to some abnormal base
	   IF (RDNUM(INTARG(I), DEFBASE)) GOTO 115
	   GOTO 116
C
C read to default decimal base
114	   IF (.NOT.RDLONG(INTARG(I))) GOTO 116
C
C no integer - is it a 'free-format no number here'?
115	   IF ((CMDFLG.AND.CMD$M_COMMA).EQ.0) GOTO 130
	   IF (I.EQ.NUMARG) THEN
	      IF ((CMDFLG .AND.
     &		  (CMD$M_REALS.OR.CMD$M_STRING.OR.CMD$M_CHAR)).EQ.0)
     &		   GOTO 130		! nothing following -
C					!  nothing to separate
	   ENDIF
	   IF (RDCHS(CH)) GOTO 130
	   IF (CH.NE.',') THEN		! it's not - end of ints
	      CALL BSCH			! unread non-comma
	      GOTO 130
	   ENDIF
	   GOTO 117
C
C got an integer - swallow comma, iff appropriate
116	   IF ((CMDFLG.AND.CMD$M_COMMA).NE.0) THEN
	      IF (I.EQ.NUMARG) THEN
		 IF ((CMDFLG .AND.
     &		      (CMD$M_REALS.OR.CMD$M_STRING.OR.CMD$M_CHAR)).EQ.0)
     &			GOTO 117	! nothing following -
C					!  nothing to separate
	      ENDIF
	      IF (.NOT.RDCHS(CH)) THEN
		 IF (CH.NE.',') CALL BSCH
	      ENDIF
	   ENDIF
C
C count arguments found
117	   CMDACT = CMDACT+1
	   CMDICT = CMDICT+1
120	CONTINUE
	GOTO 140
C
C (at least one) integer argument missing
130	IF (.NOT.LSL_EXCP) GOTO 900
	IF (CMFULL) GOTO 40
	ARGMSG = .TRUE.
C
C get real arguments
140	NUMARG = (CMDFLG.AND.CMD$M_REALS)/8
	IF (NUMARG.EQ.0) GOTO 170
	DO 150 I = 1,NUMARG
	   IF (LSL_RDREAL_WHOLE(REALAR(I), MY_HADDOT)) THEN
C
C no real number - is it a 'free-format no number here'?
	      IF ((CMDFLG.AND.CMD$M_COMMA).EQ.0) GOTO 160
	      IF (I.EQ.NUMARG) THEN	! last argument
		 IF ((CMDFLG.AND.(CMD$M_STRING.OR.CMD$M_CHAR)).EQ.0)
     &			GOTO 160	! nothing following -
C					!  nothing to separate
	      ENDIF
	      IF (RDCHS(CH)) GOTO 160
	      IF (CH.NE.',') THEN	! it's not - end of reals
		 CALL BSCH		! unread non-comma
		 GOTO 160
	      ENDIF
	   ELSE				! got a real - swallow a comma
	      IF ((CMDFLG.AND.CMD$M_COMMA).NE.0) THEN
		 IF (I.LT.NUMARG .OR.
     &		     (CMDFLG.AND.(CMD$M_STRING.OR.CMD$M_CHAR)).NE.0)
     &			THEN
		    IF (.NOT.RDCHS(CH)) THEN
		       IF (CH.NE.',') CALL BSCH
		    ENDIF
		 ENDIF
	      ENDIF
	   ENDIF
C
C count arguments found
	   CMDACT = CMDACT+1
	   CMDRCT = CMDRCT+1
C
C and remember whether HADDOT
	   HADDOT = MY_HADDOT
150	CONTINUE
	GOTO 170
C
C real argument missing
160	IF (.NOT.LSL_EXCP) GOTO 900
	IF (CMFULL) GOTO 40
	ARGMSG = .TRUE.
C
C string argument to be had?
170	IF ((CMDFLG.AND.(CMD$M_STRING.OR.CMD$M_CHAR)).EQ.0) GOTO 195
	IF (.NOT.RDCHS(CH)) GOTO 200
C
C no string argument
180	STARLE = 0
C
C string argument missing, one way or another
190	ARGMSG = .TRUE.
	IF (CMFULL) GOTO 40
C
C return command number, no error
195	RDCOMM = CMDNUM
C
C numeric command exits
196	ERRNUM = LSL__NORMAL
	GOTO 9000			! leave this routine
C
C there is an arg - is it to be a character argument?
200	IF ((CMDFLG.AND.CMD$M_CHAR).NE.0) THEN
	   STARLE = 1
	   STARBF(1) = CH
	   GOTO 195
	ENDIF
C
C no - is it an acceptable string delimiter?
	IF (CH.EQ.'''' .OR. CH.EQ.'"') GOTO 210
C
C not - set 'no string'
	CALL BSCH
	GOTO 180
C
C get string argument
210	CMDACT = CMDACT+1		! preemptively
	STARLE = 255			! the room we've got
	STARLE = READSTR(STARST, CH, ON_CHAR2, .FALSE.)	! get string
	IF (STARLE.GT.0) GOTO 195	! if OK, we're done
	CALL BSCH			! not OK -
	GOTO 40				! moan about it
C
C * * *  error handling
C
C restore 1ary data
890	CMDFLG = CMFLG_SAV
	TABFLG = TBFLG_SAV
	UFLAG  = UFLAG_SAV
	NOUFLG = NOUFLG_SAV
	CMDNUM = CMDNUM_SAV
	DO I = 1,2
	  CMDFST(I) = CMDFST_SAV(I)
	ENDDO
	GOTO 990
C
C trap/fault exception detected by some number-read routine
900	IF (NOMESS) GOTO 990		! no message needed
C
	CALL LSL_PUTMSG(ERRNUM)
	CALL LSL_PUTMSG(LSL_EXCP)
C
C if error reading 1ary, zap CMDNUM (if reading 2ndary, CMDNUM stays;
C   this tells the user where the error was)
990	IF (PRIMARY) CMDNUM = -CMDNUM
C
9000	RETURN
	END	!!!
