	LOGICAL FUNCTION IFFMODIFY_SUB( LUN, FILE, HISTORY, FID,
     &					REPORT, REVISION )
C
***	IDENT	10DE87
***	MODULE	IFFMODIFY_SUB
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C Author TJ Ibbs, 30 Oct 1986
C
C To open an existing IFF file for modification
C
C - this routine is called by the macro routine IFFMODIFY
C   This is so that the FORTRAN compiler doesn't conspire with the
C   linker to dereference HISTORY, thus causing us to be passed a
C   byte array rather than the character descriptor that we require
C
C......................................................................
CMOD		19-Dec-1986	Tony J Ibbs
C		correct the MODULE name to be IFFMODIFY_SUB, not just
C		the earlier IFFMODIFY
C
CMOD 2/524	10-Dec-1987	Tony J Ibbs
C		add an optional argument specifying the input
C		revision level (the output revision level will
C		be taken from what it was when the file was
C		actually created)
C......................................................................
C
	IMPLICIT NONE
C
C arguments
C
	INTEGER*2	LUN		! in - unit number to open file on
	CHARACTER*(*)	FILE		! in - filename of file to open
	INTEGER*4	HISTORY(2)	! in - optional history annotation
	INTEGER*4	FID(*)		! in - optional file ID
	LOGICAL		REPORT		! in - optional - report opened
	INTEGER		REVISION	! in - optional - revision level
C
C NOTE that we have declared HISTORY as an integer array - in fact it is
C an optional character string, but the FORTRAN compiler optimises things
C such that if a character string argument is absent, the program falls
C over. Since HISTORY, if present, is just passed through to IFFOPN, it
C doesn't really matter what it is declared as - we declare it as an
C array of that size simply because it looks like a 'fake' character
C descriptor - we don't intend to try to make use of that fact!
C
C *********************************************************************
C parameter files
C
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR/NOLIST'	! error numbers
C
C common files
C
	INCLUDE	'LSL$CMNIFF:IFFHAN.CMN'		! for errors
C
C functions
C
	LOGICAL		HAVE_I_AN_ARG		! check for optional argument
	LOGICAL		LSL_IFFPARSE		! parse the filename
C
C workspace
C
	LOGICAL		OK			! function return	
	LOGICAL		HADVER			! had version number
C
C *********************************************************************
C and deal according to our arguments
C
	IF ( HAVE_I_AN_ARG(4) ) THEN
C
C	 if we have the file ID argument, then we are opening a file
C	 with IFFOPI
C
	   CALL IFFERM( .FALSE. )		! switch off errors
C
C	 and open the file - with or without the HISTORY
C
	   IF ( HAVE_I_AN_ARG(3) ) THEN
	      CALL IFFOPI( LUN, FILE, FID,,, HISTORY )
	   ELSE
	      CALL IFFOPI( LUN, FILE, FID )
	   ENDIF
C
	ELSE
C
C	 otherwise, this is a normal open - check that the filename
C	 includes a version number
C
C	 parse the filename
C
	   OK = LSL_IFFPARSE( FILE, HADVER )
C
C	 check that the parse worked
C
	   IF ( .NOT.OK ) THEN
	      IFFMODIFY_SUB = LSL__IFFPARSE
	      CALL LSL_PUTMSG( IFFMODIFY_SUB, FILE )
	      CALL LSL_ADDMSG( OK )
	      GOTO 9000
	   ENDIF
C
C	 otherwise, the name is alright - so we can open the file
C
	   CALL IFFERM( .FALSE. )		! switch off errors
C
C	 open it with or without a HISTORY argument
C	 we need a version number - if none given, ensure
C	 that we open the most recent version of the file
C
	   IF ( HAVE_I_AN_ARG(3) ) THEN
	      IF (HADVER) THEN
 	         CALL IFFOPN( LUN, FILE,,, HISTORY )
	      ELSE
 	         CALL IFFOPN( LUN, FILE//';0',,, HISTORY )
	      ENDIF
	   ELSE
	      IF (HADVER) THEN
 	         CALL IFFOPN( LUN, FILE )
	      ELSE
 	         CALL IFFOPN( LUN, FILE//';0' )
	      ENDIF
	   ENDIF
C
	ENDIF
C
C *********************************************************************
C resinstate IFFLIB error reporting
C
	CALL IFFERM( .TRUE. )
C
C was there an error in opening the file?
C
	IF ( IERCD.NE.0 ) THEN
	   IFFMODIFY_SUB = LSL__IFFMODIFY
	   CALL LSL_PUTMSG( IFFMODIFY_SUB, FILE )
	   CALL IFFERR
	   GOTO 9000
	ENDIF
C
C does the user want to set the input revision level?
C if so, check that it is sensible
C
	IF ( HAVE_I_AN_ARG(6) ) THEN
	   IF ( REVISION.LT.-1 .OR. REVISION.GT.1 ) THEN
	      IFFMODIFY_SUB = LSL__IFFINREV
	      CALL LSL_PUTMSG( IFFMODIFY_SUB, REVISION )
	      CALL LSL_ADDSTR( FILE )
	      GOTO 9000
	   ELSE
	      CALL IFFIRV(REVISION)
	   ENDIF
	ENDIF
C
C *********************************************************************
C so we have opened it OK - do we want to tell the user?
C
      	IF ( HAVE_I_AN_ARG(5) ) THEN
	   IF ( REPORT ) CALL LSL_IFFREP('update')
	ENDIF
C
	IFFMODIFY_SUB = LSL__NORMAL
C
9000	RETURN
	END
