;
; * This file is part of the LAMPS distribution, released as a software
; * preservation project to archive digital history for future historians.
; * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
; *
; * Timestamp of this file for the 2002 release was: 1994-04-21 13:27:16.000000000 +0100
; *
; * This program is free software: you can redistribute it and/or modify
; * it under the terms of the GNU General Public License as published by
; * the Free Software Foundation, version 3.
; *
; * This program is distributed in the hope that it will be useful, but
; * WITHOUT ANY WARRANTY; without even the implied warranty of
; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
; * General Public License for more details.
; *
; * You should have received a copy of the GNU General Public License
; * along with this program. If not, see http://www.gnu.org/licenses/.
;
	.TITLE	LSL_WAIT
	.IDENT  /21AP94/
	.LIBRARY/LSL$LIBRARY:LSLMACLIB/
;
; VAX Fortran WAIT routine
; mimics PDP11 IAS WAIT.
;
; amended for LSLLIB, R J Hulme		28-Jan-1986
;
;MOD	Routine name changed to LSL_WAIT	CCB	07-Aug-1990
;
;	ret = LSL_WAIT(ITIME, IUNITS )
;
; where ITIME is the magnitude of the wait
;	IUNITS are :	0	ticks , 50 per second
;			1	milliseconds
;			2	seconds
;			3	minutes
;			4	hours
;	ret is the return value, normally ignored
;
; ITIME is always read as INTEGER*2. Beware large INTEGER*4 nos.
; The maximum time for a wait is 2**31-1 milliseconds ( 23 days ).
;

; workspace
	DATA_PSECT	LSL

WAITTM:	.BLKQ	1		; quad-word delta time put here

; conversion constants

	CONST_PSECT	LSL

TIMTAB:	.LONG	20.		; convert ticks to ms.
	.LONG	1.		;	    ms.    ms.
	.LONG	1000.		;	   secs.   ms.
	.LONG	60.*1000.	;	   mins.   ms.
	.LONG	3600.*1000.	;	    hrs.   ms.

	CODE_PSECT	LSL

; entry point for LSL_WAIT

	.ENTRY	LSL_WAIT, ^M<>
	MOVZWL	@4(AP), R0		; get time interval
	MOVZWL	@8(AP), R1		;  and time units
	CMPL	#4., R1			; check magnitude of units
	BLSS	90$			; don't wait if bad units
	MULL2	TIMTAB[R1],R0		; convert time to milliseconds
	BVS	90$			; don't wait if too large time
	EMUL	#-10000., R0, #0., WAITTM  ; convert to 100ns units
	$CANWAK_S			; cancel anything outstanding
	$SCHDWK_S	DAYTIM=WAITTM	; schedule to wake in time
	BLBC	R0,90$			; don't wait if error
	$HIBER_S			; hibernate until time-up
90$:	RET

;
	.PSECT
	.END
