;
; * This file is part of the LAMPS distribution, released as a software
; * preservation project to archive digital history for future historians.
; * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
; *
; * Timestamp of this file for the 2002 release was: 1994-04-21 13:37:16.000000000 +0100
; *
; * This program is free software: you can redistribute it and/or modify
; * it under the terms of the GNU General Public License as published by
; * the Free Software Foundation, version 3.
; *
; * This program is distributed in the hope that it will be useful, but
; * WITHOUT ANY WARRANTY; without even the implied warranty of
; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
; * General Public License for more details.
; *
; * You should have received a copy of the GNU General Public License
; * along with this program. If not, see http://www.gnu.org/licenses/.
;
	.TITLE		MARK_POSN
	.IDENT		/21AP94/

	.LIBRARY	/LSL$LIBRARY:LSLMACLIB/
;
; Copyright Laser-Scan Laboratories Limited, Cambridge, England.
;
; Author: Tim Hartnall					15-Nov-1985
;
; Called in the following form:
;
; call MARK_POSN( [prompt], [offset], indicator)
;
; PROMPT       	the prompt used when requesting the string at fault - only 
;		required to ascertain its length
; 
; OFFSET	the offset to use from the current position - an offset of 
;		zero will point directly to the last character read
; 
; INDICATOR	the character(s) to use as an indicator
; 
; MARK__POSN is used to point to an error in an input string. The default 
; action is to point at the last character read (using the value of DCPTR 
; to establish where this is).
; 
; If PROMPT is specified, then it is assumed that the indicator must be moved
; LEN(prompt) characters to the right. If offset is specified, then the
; indicator will be output at the default position plus offset. If either of
; these results in the indicator being before the beginning or after the end of
; the line, then no line is output. 
; 
; MARK_POSN should be assembled with LSL$CMNLSL:LSL_TCTC.MAR 
; LSL$CMNLSL:LSL_TXTC.MAR and LSL$CMNLSL:LSLIBMSG.MAR
;

	$SSDEF
	$DSCDEF

	DATA_PSECT	LSL
VECTOR:	.LONG	1
	.LONG	LSL__NEGPOSNMK
POSN:	.LONG 	0			; init. posn of indicator
OFFSET:	.LONG	0			; init. indicator offset 
INDLEN:	.LONG	0			; length of indicator string
PROMLEN:.LONG	0			; length of prompt string
BUFDSC:					; string descriptor
BUFLEN:.WORD	0			; no of chars in POSBUF
BUFTYP:.BYTE	0			; string descriptor type info
BUFCLA:.BYTE	0			; string descriptor class
BUFPTR:.ADDRESS	POSBUF			; pointer part of descriptor
BUFMAX:.LONG	1024			; maximum string size
POSBUF:.BLKB	1024			; MARK_POSN output buffer

;
	CODE_PSECT	LSL
 
	.ENTRY	MARK_POSN	^M<R2,R3,R5,R6,R7,R10,R11>
;
; We we given any args at all?
	TSTL	(AP)
	BNEQ	10$
	RET				; it would appear not, give up
;
; get the first arg (which should be the optional prompt string)
10$:	JSB	VIO$1ST			; init argument reading
	JSB	VIO$GNA			; get optional prompt 	
	BCC	20$			; branch if found an argument
	CLRL	PROMLEN			; no prompt - zero length prompt
	BRW	30$
20$:	MOVL	4(AP),	R7		; descriptor of string
	MOVZWL	DSC$W_LENGTH(R7), -	; length of string
			PROMLEN		; where we will use it
;
; get the second arg (which should be the optional offset)
30$:	JSB	VIO$GNA			; get optional offset	
	BCC	40$			; branch if found an argument
	CLRL	OFFSET			; zero offset
	BRW	50$
40$:	MOVL	(R0),	OFFSET		; get offset value
;
; get the third arg (which should be the string containing the indicator)
;
50$:	JSB	VIO$GNA			; get indicator string	
	BCC	55$			; branch if found an argument
	RET				; no arg, give up
;
55$:	MOVAL	(R0),	R3
	MOVZWL	DSC$W_LENGTH(R3), -	; length of indicator string
			INDLEN		; where we will use it
	MOVAQ	@DSC$A_POINTER(R3), -	; pointer to contents of string
		R7			; to R7, whence we will use it
;
	CLRL	POSN			; clear the indicator position 

; Calc indicator position

	CVTWL	DCPTR, R1		; DCPTR is where decoding failed
	ADDL2	R1, POSN		; so we must add to position indicator
	ADDL2	PROMLEN, POSN		; add on any prompt length
	ADDL2	OFFSET, POSN		; apply any offset
	CMPL	POSN, #0		; if NEG, not very much we can do ...
	BGEQ	60$			
;
	$PUTMSG_S -
		MSGVEC=VECTOR		; ... except grumble,
	BRW	110$			; 		      and give up
;

60$:	CMPL	BUFMAX, POSN		; are we off the other end of POSBUF?
	BGEQ	70$
;
	MOVAL	VECTOR,	R10
	MOVL	#LSL__POSNMKOVF, 4(R10)
	$PUTMSG_S -
		MSGVEC=(R10)		; we are, so grumble,
	BRW	110$			; 		      and give up

;
70$:	MOVL	BUFPTR,	R5 		; address of 1st byte in buffer
	CLRL	R10			; use R10 as counter
	CMPL	#0,	POSN		; are we at the zero'th position
	BEQL	90$			; if so, just add indicator & output
;
; pad out POSBUF with spaces to the position of the indicator

80$:	MOVB	#^A/ /, (R5)+
	AOBLEQ	POSN, R10, 80$		; loop to do the lot
	CVTLW	POSN,	BUFLEN
;
; spaces offset complete, output our chosen indicator character(s)
;
	CLRL	R10			; use R10 as counter
90$:	CMPW	BUFLEN,	BUFMAX		; fallen off the end of POSBUF?
	BGEQU	100$
	MOVB	(R7)+,	(R5)+
	ADDW2	#1,	BUFLEN
	AOBLEQ	INDLEN, R10, 90$	; loop to do the lot
	
; and output the result
	PUSHAQ	BUFDSC
	CALLS	#1,	G^WRITEF
	BRW	110$

100$:	MOVAL	VECTOR,	R10
	MOVL	#LSL__POSNMKOVF, 4(R10)
	$PUTMSG_S -
		MSGVEC=(R10)		; tell the user he has overflowed,
110$:	RET				; and give up	
	.PSECT
	.END
