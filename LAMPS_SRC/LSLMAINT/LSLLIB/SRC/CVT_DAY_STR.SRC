C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-04-13 14:27:12.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION CVT_DAY_STR(DAY,STR_LEN,STR)
C
***	MODULE	CVT_DAY_STR
***	IDENT	13AP92
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author  Ron Russell
C
C Created					RWR	12-Oct-1987
C
C converts DAY number to date string (if DAY is -ve, return a delta time)
C returns system return code
C
	IMPLICIT NONE
C
	INCLUDE		'($SSDEF)'
C
C arguments
	INTEGER*4	DAY		! day number
	CHARACTER*(*)	STR		! date
	INTEGER*4	STR_LEN
C
C functions called
	LOGICAL		SYS$ASCTIM
C
C w/s
	INTEGER*4	QUAD(2)
	INTEGER*4	TEMP(2)
	INTEGER*4	TICKS_PER_DAY(2)
	CHARACTER*23	INT_BUF
C
	STR_LEN = 0	! clear longword, only word returned by ASCTIM
C
C check for a silly date which might cause integer overflow
C (the number is supposed to be 31-DEC-9999)
	IF (ABS(DAY).GT.2973483) THEN
	   CVT_DAY_STR = SS$_IVTIME
	   GOTO 999
	ENDIF
C
C get number of ticks per day (this requires a quad word to put it in)
	TICKS_PER_DAY(1) = 10000000
	TICKS_PER_DAY(2) = 0
C
	CALL LIB$EMUL(TICKS_PER_DAY(1),24*60*60,0,TICKS_PER_DAY)
C
C get total number of ticks in DAY (need to cope with the top word by
C ourselves
	CALL LIB$EMUL(TICKS_PER_DAY(1),DAY,0,QUAD)
	QUAD(2) = QUAD(2) + TICKS_PER_DAY(2)*DAY
C
C get whole date string
	CVT_DAY_STR = SYS$ASCTIM(STR_LEN,INT_BUF,QUAD,%VAL(0))
	IF (.NOT.CVT_DAY_STR) GOTO 999
C
C and insert all that will fit in user buffer
	CVT_DAY_STR = SS$_NORMAL
	STR_LEN = STR_LEN-12		! discard time part
	IF (STR_LEN.GT.LEN(STR)) THEN
	   STR_LEN = LEN(STR)
	   CVT_DAY_STR = SS$_BUFFEROVF
	ENDIF
C
	STR(1:STR_LEN) = INT_BUF(1:STR_LEN)
C
999	RETURN
	END
