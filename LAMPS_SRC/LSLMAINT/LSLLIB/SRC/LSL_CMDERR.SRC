C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-05-23 13:00:56.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION LSL_CMDERR
C
***	IDENT	23MY86
***	MODULE	LSL_CMDERR
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C Author TJ Ibbs, 23 May 1986
C
C This routine looks up the latest value in /EXCEPTION/ERRNUM, and
C assumes that it is a RDCOMM error. It then outputs the appropriate
C message, using the appropriate arguments from /CMDCOM/
C
C It returns the value returned by the appropriate call of LSL_PUTMSG,
C so see the documentation for that for return values (if anyone is
C actually interested)
C
C Note the implicit (explicit now?) assumption that only RDCOMM errors
C in LSLLIB have arguments - all others are just basic texts
C
	IMPLICIT NONE
C
C error numbers
C
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'
C
C common blocks
C
	INCLUDE	'LSL$CMNLSL:EXCEPTION.CMN'
	INCLUDE	'LSL$CMNLSL:CMDCOM.CMN'
	INCLUDE	'LSL$CMNLSL:INEQUAL.CMN'
C
C function called
C
	INTEGER		LSL_PUTMSG
C
C **********************************************************************
C now, look and see what the error is
C - if it isn't one we know to have arguments, then we just output it
C   at the end. Thus note that we don't check that it IS a RDCOMM error!
C
	IF ( ERRNUM.EQ.LSL__UNEXPCH ) THEN
C
	   LSL_CMDERR = LSL_PUTMSG( ERRNUM, UNXCHR )
C
	ELSEIF ( ERRNUM.EQ.LSL__UNEXPCMD ) THEN
C
	   LSL_CMDERR = LSL_PUTMSG( ERRNUM, CMDNST )
C
	ELSEIF ( ERRNUM.EQ.LSL__UNEXPCMD2 ) THEN
C
	   LSL_CMDERR = LSL_PUTMSG( ERRNUM, SECNST )
C
	ELSEIF ( ERRNUM.EQ.LSL__AMBIG ) THEN
C
	   LSL_CMDERR = LSL_PUTMSG( ERRNUM, CMDNST,CMDFST,CMDAST )
C
	ELSEIF ( ERRNUM.EQ.LSL__AMBIG2 ) THEN
C
	   LSL_CMDERR = LSL_PUTMSG( ERRNUM, SECNST,CMSFST,CMDAST )
C
	ELSEIF ( ERRNUM.EQ.LSL__BADINEQ ) THEN
C
	   LSL_CMDERR = LSL_PUTMSG( ERRNUM, INEQ_NAME )
C
	ELSEIF ( ERRNUM.EQ.LSL__AMBINEQ ) THEN
C
	   LSL_CMDERR = LSL_PUTMSG( ERRNUM, INEQ_NAME,CMDFST,CMDAST )
C
	ELSEIF ( ERRNUM.EQ.LSL__HADEXCP ) THEN
C
	   CALL LSL_PUTMSG( ERRNUM )
	   LSL_CMDERR = LSL_PUTMSG( LSL_EXCP )
C
	ELSE
C
	   LSL_CMDERR = LSL_PUTMSG( ERRNUM )
C
	ENDIF
C
	RETURN
	END
