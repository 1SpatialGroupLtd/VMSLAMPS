;
; * This file is part of the LAMPS distribution, released as a software
; * preservation project to archive digital history for future historians.
; * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
; *
; * Timestamp of this file for the 2002 release was: 1986-10-30 17:01:22.000000000 +0000
; *
; * This program is free software: you can redistribute it and/or modify
; * it under the terms of the GNU General Public License as published by
; * the Free Software Foundation, version 3.
; *
; * This program is distributed in the hope that it will be useful, but
; * WITHOUT ANY WARRANTY; without even the implied warranty of
; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
; * General Public License for more details.
; *
; * You should have received a copy of the GNU General Public License
; * along with this program. If not, see http://www.gnu.org/licenses/.
;
	.TITLE		LSL_SIGNAL
	.IDENT		/30OC86/

	.LIBRARY	/LSL$LIBRARY:LSLMACLIB/
;
; Copyright Laser-Scan Laboratories Limited, Cambridge, England.
;
; Author: Tim Hartnall					15-Nov-1985
;
;mod	 3-Jun-1986	Tony J Ibbs
;mod	set EXPMAX to MAX_EXPMAX+1 before WRITEF, and set it back to
;mod	user's value afterwards
;
;mod	30-Oct-1986	Tony J Ibbs
;mod	EXPMAX should be set to MAX_EXPMAX, not MAX_EXPMAX+1
;
; Called in the following form:
;
; CALL LSL_SIGNAL(CONDITION_CODE [,arg] ... ) 
;
; Searches using SYS$GETMSG for message text for CONDITION_CODE. The
; text  may contain EXPLODE escape sequences. If text is found 
; LSL_SIGNAL will then use EXPAND to substitute in all the supplied 
; arguments. The mesage is then output using WRITEF. The severity of the
; original condition code is then attached to LSL__SIGNAL and this 
; condition is signaled using LIB$SIGNAL
;
; LSL_GETMSG should be assembled with LSL$CMNLSL:EXPC.MAR
; LSL_CMNLSL:LSLLIBMSG.MAR and LSL$CMNLSL:STATUS.MAR
;

	$SSDEF

	DATA_PSECT	LSL
VECTOR:
	.LONG	1
	.LONG	LSL__BUFFEROVF
	
STR_LEN:				; prepare args. for SYS$GETMSG
	.WORD	0			; length of returned msg text
BUFDS2:
	.LONG	257			; descriptor for string itself
	.ADDRESS -
		BUFF
BUFDSC:
	.LONG	256			; descriptor for string itself
	.ADDRESS -
		BUFFER
BUFF:	 .BYTE	37			; append a '%' to start of 
					; string for EXPLODE's benifit
BUFFER:	.BLKB	256
FLAGS:	.WORD	^B1111			; all flag bits set - always
					; get all parts of message
	CODE_PSECT	LSL
 
;Register usage
;		R2	first argument (condition code)
;		R3	type of signal - #LSL_SIGxxxx code
;		R4	save user's EXPMAX value

	.ENTRY	LSL_SIGNAL, ^M<R2,R3,R4>

; get the first arg (which should be the condition code passed by value)
	MOVL	@4(AP),	R2		
;
; set LSL_STATUS for $STATUS useage out in command files
	BISL3	#LSL_QUIET, R2, LSL_STATUS
;
	$GETMSG_S -
		MSGID=R2, -
		MSGLEN=STR_LEN, -
		BUFADR=BUFDSC, -
		FLAGS=FLAGS

;
; Examine the success of our foray
	CMPL	R0, #SS$_MSGNOTFND	; did we find the message?
	BNEQ	15$
	CLRW	STR_LEN			; no. Set string length to 0
	MOVL	#LSL__MSGNOTFND, R0	; substitute LSLLIB err. for
					; the system one
;
; we have no choice other than to return
	RET

15$:	CMPL	R0, #SS$_BUFFEROVF	; found the msg text but it was
					; so long truncation occurred?
	BNEQ	20$
	
;
; Yes truncation has occurred. Warn the user then go back and get the 
; message again and attempt to output it. There is a danger that there 
; will be a mismatch of EXPLODE escapes and the number of args. supplied

	$PUTMSG_S -
		MSGVEC=VECTOR  		
;
; invoke EXPAND to write out the message text, inserting the supplied 
; args. as necessary
;
20$:	MOVW	EXPMAX,R4		; remember user's buffer length
	MOVW	#MAX_EXPMAX,EXPMAX	; and set EXPMAX to maximum
	INCW	STR_LEN			; remember to allow for %
	MOVW	STR_LEN, BUFDS2		; then patch string descriptor
	MOVAL	BUFDS2, 4(AP)		; and transfer to orig. AP posn.
	CALLG	(AP), G^WRITEF		; use EXPLODE to insert args,
	MOVW	R4,EXPMAX		; restore user's buffer length
;
; Determine the severity of the condition code. Then replace the 
; original condition code with LSL__SIGNAL with the severity
; set to be the same as the severity of the original message.
;
	BBC	#0, R2, 40$
;
; We have success or information
	BBS	#1, R2, 35$		; success?
	MOVL	#LSL__SIGSUCC, R3	; yes (Why use LSL_SIGNAL then?)
	BRB	60$
;
35$:	MOVL	#LSL__SIGINFO, R3	; Signalled "information"!
	BRB	60$

;
; We must have some kind of error
40$:	BBC	#1, R2, 45$		; error?
	MOVL	#LSL__SIGERR, R3	; yes 
	BRB	60$

45$:	BBC	#2, R2, 50$		; severe?
	MOVL	#LSL__SIGSEVER, R3	; yes 
	BRB	60$

50$:	MOVL	#LSL__SIGWARN, 	R3	; must be a warning

60$:	PUSHL	R3
	CALLS	#1,	G^LIB$SIGNAL
		
	RET
	.PSECT
	.END
