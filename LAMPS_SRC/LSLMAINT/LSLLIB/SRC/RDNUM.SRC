C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-01-15 11:38:22.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION RDNUM(I,DEFAULT_BASE)
C
***	MODULE	RDNUM
***	IDENT	15JA86
C
C Copyright Laser-Scan Laboratories Ltd,Cambridge,England
C
C Author		M.C.Fulford		26-Jan-1979
C Modified		D Meader		Mar/Jun 1982
C Modified for LSLLIB, including functionality of old RDLONG
C			T J Ibbs/R J Hulme	16 December 1985
C
C Reads an integer, having established its base if different from the
C given default, from a line of text.
C Result is .TRUE. if no digits are read.
C
	IMPLICIT NONE
C
C parameters
C
***	PARAMETER/LSL$CMNLSL:LSLLIBMSG/
C
C common blocks
C
***	COMMON/LSL$CMNLSL:EXCEPTION/
C
C arguments
C
	INTEGER*4	I		! out - where the number goes
	INTEGER*4	DEFAULT_BASE	!  in - to use in absence of ^x
C
C workspace
C
	INTEGER*4	BASE		! base of number
	INTEGER*4	SIGN		! sign of number
	BYTE		CH
C
C functions called
C
	LOGICAL		RDCH, RDCHS	! read characters
	LOGICAL		LSL_RDNUM_AB	! read the number
	LOGICAL		LSL_RDSIGN	! read the sign
C
C character definitions
C
	BYTE		 UPA,UPB,UPD,UPO,UPX,LWA,UPARR
	PARAMETER	(UPA='A',UPB='B',UPD='D',UPO='O',UPX='X')
	PARAMETER	(LWA='a',UPARR='^')
C
C *********************************************************************
C
C initialise things
C
	RDNUM = .TRUE.		! assume failure
	ERRNUM = LSL__NORMAL	! no errors found yet
	I = 0			! start with zero
	BASE = DEFAULT_BASE	! use default base to start with
C
C get any sign
C
	IF (LSL_RDSIGN(SIGN)) GO TO 9000
C
C check to see if we have been given a specific base, as ^something
C
	IF (RDCH(CH)) THEN
	   ERRNUM = LSL__UNEXPEOL	! unexpected end of line
	   GOTO 9000			! stop now
	ENDIF
C
	IF (CH.NE.UPARR) THEN
	   CALL BSCH			! not a base change
	ELSE
C
C	 we are forcing a different base - look for base letter
C
	   IF (RDCH(CH)) THEN
	      ERRNUM = LSL__UNEXPEOL
	      GOTO 9000
	   ENDIF
C
	   IF (CH.GE.LWA) CH = CH-LWA+UPA
C
C	 look for new base
C
	   IF (CH.EQ.UPB) THEN
	      BASE = 2
	   ELSEIF (CH.EQ.UPD) THEN
	      BASE = 10
	   ELSEIF (CH.EQ.UPO) THEN
	      BASE = 8
	   ELSEIF (CH.EQ.UPX) THEN
	      BASE = 16
	   ELSE
	      CALL BSCH			! unknown base letter - unread
	      ERRNUM = LSL__BASECH	! remember the error
	      GOTO 9000			! and give up
	   ENDIF
C
	ENDIF
C
C now read the number proper
C
	RDNUM = LSL_RDNUM_AB(I,BASE,SIGN)
C
9000	RETURN
	END
