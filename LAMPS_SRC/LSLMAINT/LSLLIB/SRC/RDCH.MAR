	.TITLE RDCH
	.IDENT 	/22AP94/

;Copyright Laser Scan Laboratories Ltd., Cambridge, England
;Author Clarke Brunt, 10-Jul-1985
;
; LSLLIB RDCH and RDCHS routines
;
; Must be assembled with LSL$CMNLSL:TXTC.MAR and WINDEF.MAR
;
; These are in MACRO for efficiency - see the FORTRAN versions below

	.LIBRARY	/LSL$LIBRARY:LSLMACLIB/
	CODE_PSECT	LSL

;
; define a macro to load registers for current buffer
; R0=DCPTR, R1=buffer length, R2=buffer address
	.MACRO	GETBUF	?L1,?L2
	CVTWL	AUXTXP,R1		; is there an auxiliary buffer?
	BNEQ	L1			; yes
	CVTWL	TXTPTR,R1		; length
	MOVAB	TXTBUF,R2		; address
	BRB	L2
L1:	MOVAB	@AUXTXB+4,R2		; address
L2:	CVTWL	DCPTR,R0		; decode pointer
	.ENDM	GETBUF

;
; RDCH(ch)
; reads a character from current buffer, returning true if end of line
;
	.ENTRY	RDCH,^M<R2>
	GETBUF				; macro (see above)
	CMPL	R0,R1			; any characters left?
	BGTR	10$			; no

	DECL	R0
	MOVB	(R2)[R0],@4(AP)		; get character
	INCW	DCPTR			; increment decode pointer
	CLRL	R0			; success
	RET

10$:	CLRB	@4(AP)			; no character
	MNEGL	#1,R0			; failed
	RET

;
; RDCHS(ch)
; read next significant character ignoring space and tab, returning true
; if end of line
;
	.ENTRY	RDCHS,^M<R2,R3>
	GETBUF				; macro (see above)
	DECL	R0

10$:	CMPL	R0,R1			; any characters left?
	BGEQ	20$			; no

	MOVB	(R2)[R0],R3		; get character
	INCW	DCPTR			; increment decode pointer
	INCL	R0			; and our version of it
	CMPB	R3,#32			; space?
	BEQL	10$
	CMPB	R3,#9			; tab?
	BEQL	10$
	MOVB	R3,@4(AP)		; return argument
	CLRL	R0			; success
	RET

20$:	CLRB	@4(AP)			; no character
	MNEGL	#1,R0			; failed
	RET

; Now the FORTRAN equivalent which the above replaced
;	LOGICAL FUNCTION RDCH(CH)
;	BYTE CH
;	BYTE		LSL_RDAUXC	! get byte from aux buffer
;
;	IF (AUXTXP.EQ.0) THEN		! use standard buffer
;	   IF (DCPTR.GT.TXTPTR) GOTO 10	! if GT, end of line
;	   CH = TXTBUF(DCPTR)		! get character
;	ELSE				! use auxiliary buffer
;	   IF (DCPTR.GT.AUXTXP) GOTO 10	! if GT, end of line
;	   CH = LSL_RDAUXC(AUXTXB, DCPTR)	! get character
;	ENDIF
;
;	RDCH = .FALSE.
;	DCPTR = DCPTR+1
;	GOTO 9000
;
;10	RDCH = .TRUE.
;	CH = 0
;
;9000	RETURN
;	END
;
;	LOGICAL FUNCTION RDCHS(CH)
;	BYTE CH
;	LOGICAL RDCH
;	BYTE	SPACE, TAB
;	PARAMETER	(SPACE	= ' ')
;	PARAMETER	(TAB	= '	')
;
;10	RDCHS = RDCH(CH)
;	IF (RDCHS) GOTO 9000
;	IF (CH.EQ.SPACE .OR. CH.EQ.TAB) GOTO 10
;
;9000	RETURN
;	END
;
;	BYTE FUNCTION LSL_RDAUXC(BUFF, PTR)
;	CHARACTER*(*)	BUFF		! describes aux buffer
;	INTEGER*2	PTR		! pointer therein
;	LSL_RDAUXC = ICHAR(BUFF(PTR:PTR))
;	RETURN
;	END
;
	.END
