	INTEGER FUNCTION EXPFLN( STRING, STRLEN )
C
***	IDENT	07MY86
***	MODULE	EXPFLN
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
CMOD 	Now works when compiled with bounds checking!	TJH 05-Feb-1986
CMOD	Allow null strings for all but node,device, and
CMOD	detect errors in such allowing			TJI 07-May-1986
C
C Author TJ Ibbs, 4 August 1984
C Amended for LSLLIB, 6 July 1985
C
C This routine concatenates the parts of a filename and assigns them
C to STRING
C
	IMPLICIT NONE
C
C the common block which holds the filename parts
C
***	COMMON/LSL$CMNLSL:FILENAME/
C
C and LSL error codes
C
***	PARAMETER/LSL$CMNLSL:LSLLIBMSG/
C
C and we were passed
C
	CHARACTER*(*)		STRING		! result string
	INTEGER*2		STRLEN		! length produced
C
C internal workspace
C
	CHARACTER*(C_MAX_SIZ+1)	WORKSP
	LOGICAL*4		FIRST		! .T. = first component
	LOGICAL*4		IGNORED		! .T. if ignored null field
C
C *********************************************************************
C
C now assemble the resultant string
C
	STRLEN  = 0
	FIRST   = .TRUE.
	IGNORED = .FALSE.
C
C NODE name - if present, may not be null
C
	IF (HAD_NOD) THEN
	   IF (LEN_NOD.GT.0) THEN
	      WORKSP = STR_NOD(:LEN_NOD) // '::'
	      FIRST=.FALSE.
	      STRLEN = STRLEN + LEN_NOD+2
	   ELSE
	      IGNORED = .TRUE.
	   ENDIF
	ENDIF
C
C DEVICE name - if present, may not be null
C
	IF (HAD_DEV) THEN
	   IF (LEN_DEV.GT.0) THEN
	      IF (FIRST) THEN
	         WORKSP = STR_DEV(:LEN_DEV) // ':'
	         FIRST=.FALSE.
	      ELSE
	         WORKSP = WORKSP(1:STRLEN) // STR_DEV(:LEN_DEV) // ':'
	      ENDIF
	      STRLEN = STRLEN + LEN_DEV + 1
	   ELSE
	      IGNORED = .TRUE.
	   ENDIF
	ENDIF
C
C DIRECTORY name - may be null
C
	IF (HAD_DIR) THEN
	   IF (FIRST) THEN
	      IF (LEN_DIR.GT.0) THEN
	         WORKSP = '[' // STR_DIR(:LEN_DIR) // ']'
	      ELSE
	         WORKSP = '[]'
	      ENDIF
	      FIRST=.FALSE.
	   ELSE
	      IF (LEN_DIR.GT.0) THEN
	         WORKSP = WORKSP(1:STRLEN) // '[' //STR_DIR(:LEN_DIR)// ']'
	      ELSE
	         WORKSP = WORKSP(1:STRLEN) // '[]'
	      ENDIF
	   ENDIF
 	   STRLEN = STRLEN + LEN_DIR + 2
	ENDIF
C
C file NAME - may be null, in which case we need take no action,
C	      as there is no associated punctuation
C
	IF (HAD_NAM) THEN
	   IF (LEN_NAM.GT.0) THEN
	      IF (FIRST) THEN
	         WORKSP = STR_NAM(:LEN_NAM)
	         FIRST=.FALSE.
	      ELSE
	         WORKSP = WORKSP(1:STRLEN) // STR_NAM(:LEN_NAM)
	      ENDIF
	      STRLEN = STRLEN + LEN_NAM
	   ENDIF
	ENDIF
C
C EXTENSION - may be null
C
	IF (HAD_EXT) THEN
	   IF (FIRST) THEN
	      IF (LEN_EXT.GT.0) THEN
	         WORKSP = '.' // STR_EXT(:LEN_EXT)
	      ELSE
	         WORKSP = '.'
	      ENDIF
	      FIRST=.FALSE.
	   ELSE
	      IF (LEN_EXT.GT.0) THEN
	         WORKSP = WORKSP(1:STRLEN) // '.' // STR_EXT(:LEN_EXT)
	      ELSE
	         WORKSP = WORKSP(1:STRLEN) // '.'
	      ENDIF
	   ENDIF
	   STRLEN = STRLEN + LEN_EXT + 1
	ENDIF
C
C VERSION - may be null
C
	IF (HAD_VER) THEN
	   IF (FIRST) THEN
	      IF (LEN_VER.GT.0) THEN
	         WORKSP = ';' // STR_VER(:LEN_VER)
	      ELSE
	         WORKSP = ';'
	      ENDIF
	      FIRST=.FALSE.
	   ELSE
	      IF (LEN_VER.GT.0) THEN
	         WORKSP = WORKSP(1:STRLEN) // ';' // STR_VER(:LEN_VER)
	      ELSE
	         WORKSP = WORKSP(1:STRLEN) // ';'
	      ENDIF
	   ENDIF
	   STRLEN = STRLEN + LEN_VER + 1
	ENDIF
C
C and copy this result over to the argument
C
	STRING = WORKSP
C
C do we have an error return? if so, return what happened
C
	IF ( IGNORED ) THEN
	   EXPFLN = LSL__NOFIELD		! field had no length
	ELSEIF ( STRLEN.EQ.0 ) THEN
	   EXPFLN = LSL__FILNOLEN		! bug - total length = 0
	ELSEIF ( STRLEN.GT.LEN(STRING) ) THEN
	   EXPFLN = LSL__FILTOOLONG		! name was truncated
	ELSE
	   EXPFLN = LSL__NORMAL			! all was OK
	ENDIF
C
	RETURN
	END
