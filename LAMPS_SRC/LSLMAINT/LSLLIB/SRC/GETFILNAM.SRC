C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-12-06 12:43:48.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION GETFILNAM( NAME, NAMLEN, DEFAULT, ALLOW_VER,
     &				    TERM_CHAR, DEVOUR )
C
***	IDENT	06DE94
***	MODULE	GETFILNAM
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 1 February 1985
C Amended for LSLLIB, 6 July 1985
C
CMOD	04-Nov-1987	mod 2/523	TJH
CMOD	Correct the type of NAMLEN  - now word as advertised!
CMOD	24-Aug-1987	mod 2/508	TJ Ibbs
CMOD	Correct the numerical arguments to HAVE_I_AN_ARG so that they
CMOD	agree with the actual positions of the arguments!
C
C Routine to read a filename from the READSTR line
C
C - the filename is read with READSTR, terminating on end of line,
C   space, tab or TERM_CHAR. PARFILN is then used to parse the
C   resultant string as a filename, against the default
C
C If TERM_CHAR is not given, then we will end ON_SPACE
C
C DEVOUR allows us to specify "devour the termination character"
C or "leave the termination character ready for RDCH"
C
C for instance, with
C
C		FILE="FILENAME.SRC"
C
C	we would read the filename with TERM_CH set to double quote,
C	and DEVOUR true - we don't want the closing quote
C
C but for
C
C		FILENAME.SRC/SWITCH
C
C	we might read the filename with TERM_CH set to slash, and
C	DEVOUR false - the next RDCH will return the slash
C
C Returns TRUE if something fails, and FALSE if all goes well
C
	IMPLICIT NONE
C
C Arguments
C
	CHARACTER*(*)	NAME		! resultant filename
	INTEGER*2	NAMLEN		! length of result
	CHARACTER*(*)	DEFAULT		! default filename
	LOGICAL		ALLOW_VER	! version numbers allowed?
	BYTE		TERM_CHAR	! optional - termination character
	LOGICAL		DEVOUR		! optional - devour TERM_CHAR?
C
C NOTE - TERM_CHAR and DEVOUR default to absent and TRUE respectively
C
C parameters
C
***	PARAMETER/LSL$CMNLSL:LSLLIBMSG/
***	PARAMETER/LSL$CMNLSL:READSTR/
C
C workspace
C
	BYTE		T_TERM		! copy of TERM_CHAR
	INTEGER		T_COND		! termination condition
	LOGICAL		HAD_T_TERM	! TRUE if had TERM_CHAR
	LOGICAL		EATIT		! copy of DEVOUR
	INTEGER		RETCOD, IERR	! return codes
C
C functions
C
	LOGICAL		HAVE_I_AN_ARG
	INTEGER		READSTR
	INTEGER		PARFILN
C
C and do we have the optional arguments?
C
	IF ( HAVE_I_AN_ARG(5) ) THEN
	   T_TERM     = TERM_CHAR
	   HAD_T_TERM = .TRUE.
	ELSE
	   HAD_T_TERM = .FALSE.
	ENDIF
C
	IF ( HAVE_I_AN_ARG(6) ) THEN
	   EATIT = DEVOUR
	ELSE
	   EATIT = .TRUE.
	ENDIF
C
C now, how do they want to end?
C - if TERM_CHAR is a space, then we shall end on space/tab,
C - if TERM_CHAR was absent, then we shall end on space/tab as well
C - otherwise use TERM_CHAR explicitly
C
	IF (T_TERM.EQ.' ') THEN		! explicit space
	   T_TERM = 0
	   T_COND = ON_SPACE
	ELSEIF (.NOT.HAD_T_TERM) THEN	! default ending
	   T_COND = ON_SPACE
	ELSE				! explicit character
	   T_COND = ON_CHAR
	ENDIF
C
C firstly, we shall read the string from the line
C - note that on error we just return with the error code from READSTR
C
	IF ( HAD_T_TERM ) THEN
	   NAMLEN = READSTR( NAME, T_TERM, T_COND, .TRUE., RETCOD )
	ELSE
	   NAMLEN = READSTR( NAME,       , T_COND, .TRUE., RETCOD )
	ENDIF
C
	IF (.NOT.RETCOD) GOTO 9999
	IF (NAMLEN.EQ.0) THEN
	   RETCOD = LSL__SRCFILNAM
	   GOTO 9999
	ENDIF
C
C do we need to reclaim the termination character?
C a RETCOD of LSL__STRCHAR means that the string was ended by the
C termination character, and thus we may need to unread it
C
	IF (.NOT.EATIT) THEN
	   IF (RETCOD.EQ.LSL__STRCHAR) CALL BSCH
	ENDIF
C
C now parse the filename
C
	RETCOD = PARFILN( NAME, NAMLEN, NAME(1:NAMLEN), DEFAULT,
     &		         ALLOW_VER )
C
9999	GETFILNAM = RETCOD
	RETURN
	END
