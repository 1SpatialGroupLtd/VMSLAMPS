C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-01-15 12:10:00.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION LSL_RDNUM_AB(I,BASE,SIGN)
C
***	MODULE LSL_RDNUM_AB
***	IDENT 15JA86
C
C Copyright Laser-Scan Laboratories Ltd,Cambridge,England
C
C Authors MC Fulford, R Fairbairns, TJ Ibbs	2 April 1985
C Original created 26.i.79
C
C To read in a number to an arbitrary base from a line of text
C Result is .TRUE. if no digits are read, or if overflow occurs,
C and FALSE otherwise
C
C
C arguments
C
	INTEGER*4	I		! out - where the number goes
	INTEGER*4	BASE		!  in - numerical base
	INTEGER*4	SIGN		!  in - the sign of the number
C
***	PARAMETER/LSL$CMNLSL:LSLLIBMSG/
C
***	COMMON/LSL$CMNLSL:EXCEPTION/
C
C functions
C
	LOGICAL		RDCH		! read a character
	LOGICAL		RDCHS		! ditto, but ignore spaces/tabs
C
C w/s
C
	BYTE		CH	! internal character
	INTEGER		SHIFT	! shift to use in place of mult'n
	INTEGER		MASK	! when to stop shifting
C
C character definitions
C
	BYTE		ZERO,NINE
	BYTE		UPA, LWA
C
	PARAMETER	(ZERO='0')
	PARAMETER	(NINE='9')
	PARAMETER	(UPA ='A')
	PARAMETER	(LWA ='a')
C
C character conversion parameters
C
	INTEGER		UPPER, HXDEC
C
	PARAMETER	(UPPER=LWA-UPA)		! lower to upper case
	PARAMETER	(HXDEC=UPA-1-NINE)	! hex letter to decimal
C
C condition handler
C
	INTEGER		LSL_NUM_CHAND
	EXTERNAL	LSL_NUM_CHAND
C
C *********************************************************************
C
C no exceptions yet
C
	LSL_EXCP = LSL__NORMAL
	ERRNUM   = LSL__NORMAL
C
C establish the hander
C
	CALL LIB$ESTABLISH( LSL_NUM_CHAND )
C
C initialise other things
C
	I = 0			! no number yet
	LSL_RDNUM_AB = .TRUE.	! assume failure - ie no number found
C
C set up shift
C
	IF (BASE.EQ.8) THEN
	   SHIFT = 3
	   MASK  = '340000 00000'O
	ELSEIF (BASE.EQ.16) THEN
	   SHIFT = 4
	   MASK  = '8000 0000'X
	ELSE
	   SHIFT = 0
	ENDIF
C
C get to start of number - ignore leading spaces/tabs
C
	IF (RDCHS(CH)) THEN
	   ERRNUM = LSL__UNEXPEOL	! unexpected end of line
	   GOTO 70			! give up
	ENDIF
C
C *********************************************************************
C
C find out what the character is
C
C if the 'digit' is (possibly) alphabetic, then ensure it is
C upper-case, and convert to a 'pseudo-digit'
C
30	IF (CH.GE.UPA) THEN		! letter - prepare for hex
	   IF (CH.GE.LWA) CH = CH-UPPER	! upper case it
	   CH = CH-HXDEC		! convert to hex value
	ELSE IF (CH.GT.NINE) THEN	! '9' < CH <'A'
	   GOTO 60			!  - treat as terminator
	ENDIF
C
C digit (may be hex 'pseudo-digit')
C
C work out what number the digit represents, and then check that the
C resulting number is between 0 and the maximum for the current base
C
	CH = CH-ZERO
	IF (CH.LT.0 .OR. CH.GE.BASE) GOTO 60	! must be terminator
C
C now add it into our running total
C
	IF (SHIFT.NE.0) THEN
	   I = ISHFT(I,SHIFT) + CH*SIGN
	   IF ((I.AND.MASK).NE.0) SHIFT = 0
	ELSE
	   I = I*BASE + CH*SIGN
	ENDIF
C
	LSL_RDNUM_AB = .FALSE.		! have read number, so success
C
C and now, try for another digit
C - if we have an exception, then stop reading the number, and give up
C - if we hit end of line, treat as terminator - but don't unread it!
C - otherwise, we had another character, so loop back to deal with it
C
	IF (.NOT.LSL_EXCP) GOTO 60	! unread offending character
	IF (RDCH(CH)) GOTO 70		! end of line - nowt to unread
	GOTO 30				! next character to check
C
C *********************************************************************
C
C come here when we have found the end of number
C
60	CALL BSCH		! unread the terminator
C
C if we didn't find a number, then note that as an error
C
	IF (LSL_RDNUM_AB) THEN
	   ERRNUM = LSL__NONUM
	ENDIF
C
C general exit - force number to zero if we had an exception
C
70	IF ( .NOT. LSL_EXCP ) THEN
	   ERRNUM = LSL__HADEXCP
	   I = 0
	   LSL_RDNUM_AB = .TRUE.	! ensure correct return
	ENDIF
	RETURN
	END
