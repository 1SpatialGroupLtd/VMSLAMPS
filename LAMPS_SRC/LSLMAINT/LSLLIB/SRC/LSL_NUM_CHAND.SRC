	INTEGER FUNCTION LSL_NUM_CHAND(SIGARG, MCHARG)
C
***	MODULE	LSL_NUM_CHAND
***	IDENT	14JA86
C
	IMPLICIT NONE
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England
C
C Author		R. Fairbairns		January 1982
C Modified for LSLLIB	TJ Ibbs/R J Hulme	19 Decemeber 1985
C
C LSLLIB condition handler for the read number routines
C
C arguments
C
	INTEGER		SIGARG(*)	! in - signal array
	INTEGER		MCHARG(*)	! in - mechanism array (ignored)
C
C include files
C - system and LSLLIB message parameters
C
	INCLUDE '($SSDEF)/NOLIST'
***	PARAMETER/LSL$CMNLSL:LSLLIBMSG/
C
C - LSLLIB exception common block
C
***	COMMON/LSL$CMNLSL:EXCEPTION/
C
C - system status values
C
	INCLUDE '($STSDEF)/NOLIST'
C
C workspace
C
	INTEGER		COND		! the actual condition
	INTEGER		INDEX		! return from LIB$MATCH_COND
C
C function
C
	INTEGER		LIB$MATCH_COND	! match condition codes
C
C *********************************************************************
C
C deal with TRAP-loops
C (faults don't increment PC - for all I know, they might even do or
C  fail to do things that traps do - so we use this wonderful little
C  library routine to convert a fault to a trap; I didn't know about
C  it - it's all AJW's fault!)
C
	CALL LIB$SIM_TRAP( SIGARG, MCHARG )
C
C copy the condition, for simplicity
C
	COND = SIGARG(2)
C
C now, is it one of the ones we care about?
C
	INDEX = LIB$MATCH_COND( COND,
     &		SS$_FLTDIV, SS$_FLTDIV_F, SS$_FLTOVF, SS$_FLTOVF_F,
     &		SS$_FLTUND, SS$_FLTUND_F, SS$_INTDIV, SS$_INTOVF )
C
	IF ( INDEX.EQ.0 ) THEN
C
C	 not an error we care about - resignal it
C
	   LSL_NUM_CHAND = SS$_RESIGNAL
C
	ELSE
C
C	 we must deal with it - reduce it to an Informational error
C
	   CALL MVBITS( STS$K_INFO, 0, 3, SIGARG(2), 0 )
C
C	 and work out what sort of error we must report
C
	   IF ( COND.EQ.SS$_FLTDIV .OR. COND.EQ.SS$_FLTDIV_F ) THEN
	      LSL_EXCP = LSL__FLTDIV
	   ELSEIF ( COND.EQ.SS$_FLTOVF .OR. COND.EQ.SS$_FLTOVF_F ) THEN
	      LSL_EXCP = LSL__FLTOVF
	   ELSEIF ( COND.EQ.SS$_FLTUND .OR. COND.EQ.SS$_FLTUND_F ) THEN
	      LSL_EXCP = LSL__FLTUND
	   ELSEIF ( COND.EQ.SS$_INTDIV ) THEN
	      LSL_EXCP = LSL__INTDIV
	   ELSEIF ( COND.EQ.SS$_INTOVF ) THEN
	      LSL_EXCP = LSL__INTOVF
	   ELSE
	      LSL_EXCP = LSL__BADEXCEP
	   ENDIF
C
C	 and remember the problem for the user
C
	   ERRNUM = LSL__HADEXCP
C
C	 and we will continue execution after the problem
C
	   LSL_NUM_CHAND = SS$_CONTINUE
C
	ENDIF
C
	RETURN
	END
