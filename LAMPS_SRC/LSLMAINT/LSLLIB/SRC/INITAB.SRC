	SUBROUTINE INITAB(TABLE,  TSIZE,  BYTAB, BSIZE,
     &			  ARGARR, ARGSIZ, UFLARR,
     &			  AZONLY )
C
***	MODULE INITAB
***	IDENT  24FE89
C
	IMPLICIT NONE
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England
C Author R. Fairbairns
C
C Coded June 1983
C
CMOD	11-Apr-1988	Tony J Ibbs	(mod 2/556)
CMOD	add setting of the new AZONLY bit in the table flagword,
CMOD	and the new AZONLY argument to the routine
CMOD
CMOD	10-Jun-1988	Tony J Ibbs	(mod 2/556)
CMOD	The AZONLY bit is now the DIGOK bit, with the opposite meaning
CMOD	- this causes us to 'fail safe'
CMOD
CMOD	24-Feb-1988	Clarke Brunt	(mod 2/743)
CMOD	The BYTAB and BSIZE arguments are no longer used
C
C To initialise definition of a table of commands
C
C Compulsory arguments, in reverse order:
	INTEGER*4	BSIZE		! unused
	BYTE		BYTAB		! unused
	INTEGER*4	TSIZE		! size of:
	INTEGER*4	TABLE(TSIZE)	! table of commands
C
C Optional arguments, jumbled:
	INTEGER*4	ARGSIZ		! size of argarr, uflarr
	INTEGER*2	ARGARR(1)	! array of argument specs
	INTEGER*4	UFLARR(1)	! array of user flags
	LOGICAL		AZONLY		! TRUE (default) if digits aren't
C					! allowed in command mnemonics
C
C Function called:
	LOGICAL		HAVE_I_AN_ARG	! have I an arg?
C
***	PARAMETER/LSL$CMNLSL:TBLFLG/
***	COMMON/LSL$CMNLSL:TABLE_DEFINITION/
C
C copy arguments into /TABLE_DEFINITION/
	TABLE_SIZE = TSIZE
	TABLE_ADDRESS = %LOC(TABLE(1))
C
C initialise other things in /TABLE_DEFINITION/
	TABLE_COUNT = 0
	MAX_CMD_NUMBER = 0
C
C set up initial/static things in table
C - - default table flags and user flags pointer
	IF (HAVE_I_AN_ARG(7)) THEN	! there's user flags
	  TABFLG = CMT$M_UPCASE .OR. CMT$M_SUPMAC
     &				.OR. CMT$M_NUMFBD
	  TABLE_OFF = 4			! allow for their pointer
	  TABLE(3) = %LOC(UFLARR(1))	! put pointer into table
	  UFLAG_TBL = %LOC(UFLARR(1))	! and into common block
	ELSE
	  TABFLG = CMT$M_UPCASE .OR. CMT$M_NOUFLG
     &				.OR. CMT$M_SUPMAC
     &				.OR. CMT$M_NUMFBD
	  TABLE_OFF = 0			! no user flag pointer
	  UFLAG_TBL = 0			! I say it again
	ENDIF
C
C - - unless the user has specifically requested otherwise, we will
C     not allow digits in command names
C
	IF ( HAVE_I_AN_ARG(8) ) THEN
	   IF (.NOT.AZONLY) TABFLG = TABFLG.OR.CMT$M_DIGOK
	ENDIF
C
C - - table count
	TABCNT = '8000'X
C
C - - table first longword
	TABLE(1) = TABHDR
C
C - - command number limit from table sizes
	IF (HAVE_I_AN_ARG(6)) THEN
	  CMD_NUMBER_LIM = ARGSIZ	! there it is
	ELSE
	  CMD_NUMBER_LIM = 0		! no arg => no limit
	ENDIF
C
C - - arg spec table
	IF (HAVE_I_AN_ARG(5)) THEN
	  ARGSPC_TBL = %LOC(ARGARR(1))
	ELSE
	  ARGSPC_TBL = 0
	ENDIF
	TABLE(2) = ARGSPC_TBL
C
C ... and we're done
	RETURN
	END
