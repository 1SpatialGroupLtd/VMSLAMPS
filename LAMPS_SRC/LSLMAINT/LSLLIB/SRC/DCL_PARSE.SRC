C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-09-10 11:48:44.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION DCL_PARSE( STRING,
     &				      VERB,SPLT_LIS,CLD_MODULE,WHINGE )
C
***	MODULE	DCL_PARSE
***	IDENT	10SE87
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Created from DCL_STARTUP, to work with an in-core line of commands
C
C Tony J Ibbs	19 June 1986
C
C Function parses a DCL command line supplied by the user in STRING
C
C Function returns set to SS$_NORMAL if all is well. Local error 
C reporting (via LIB$SIGNAL) may be invoked by setting WHINGE .true..
C 
	IMPLICIT NONE
C
C arguments
C
	CHARACTER*(*)	STRING		! the command line
	CHARACTER*(*)	VERB		! the command verb eg 'BACKUP'
	INTEGER*4       CLD_MODULE	! the CLD module name
	LOGICAL*4	SPLT_LIS	! .T.= split parameter lists
	LOGICAL*4	WHINGE		! .T. if local error reporting
C
C condition handler
C
	EXTERNAL	DCL_ERRET
C
C functions
C
	INTEGER 	CLI$DCL_PARSE
	EXTERNAL	LIB$GET_INPUT
C
C workspace
C
	CHARACTER*256	CMDSTR		! the cmd. string for parsing
 	LOGICAL*4	REPORT		! .T. if local error reporting
	INTEGER		OK		! function result
C
C Common block to control error reporting in condition handler
C
	COMMON /LSL_REPORT/ REPORT	
C
	INCLUDE 	'($SSDEF)'
	INCLUDE 	'($STSDEF)'
	INCLUDE 	'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE 	'LSL$CMNLSL:STATUS.CMN'
C
C ......................................................................
C
	REPORT=WHINGE		       ! is condition handler to scream?
C
C Establish condition handler
C
	CALL LIB$ESTABLISH( DCL_ERRET )
C
C If desired then split parameter lists into separate parameters by
C replacing the list separators (commas) with spaces
C - note that this does just change commas to space - it does not
C   affect the length of the string
C
	IF (SPLT_LIS) CALL DCL_COMMA( STRING, LEN(STRING) )
C
C Add the command verb to the start of the string to produce CMDSTR
C
	CMDSTR = VERB//' '//STRING
C
C Parse command line
C
	OK = CLI$DCL_PARSE( CMDSTR,	   	! string to be parsed
     &			    CLD_MODULE,  	! CLD module
     &			    LIB$GET_INPUT,
     &			    %VAL(0) )
C
	IF ( OK ) THEN
C
	   DCL_PARSE = SS$_NORMAL
C
	ELSE
C
C	    If required report error but don't repeat a warning message
C	    as the CLI routines will signal errors themselves
C
	   IF (IBITS(OK,0,3).NE.STS$K_WARNING) THEN
	      CALL LIB$SIGNAL( %VAL(OK) ) 	! report it
 	   ENDIF
C
	   DCL_PARSE = OK
C
	ENDIF
C
C Revert to normal error processing
C
	CALL LIB$REVERT
	LSL_STATUS = DCL_PARSE.OR.LSL_QUIET
C
	RETURN
	END
