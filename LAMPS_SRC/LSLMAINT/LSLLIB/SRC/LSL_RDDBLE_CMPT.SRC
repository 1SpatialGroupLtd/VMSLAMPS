C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-01-15 11:19:08.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION LSL_RDDBLE_CMPT( R, HADSGN, HADDOT_ARG )
C
***	MODULE	LSL_RDDBLE_CMPT
***	IDENT	15JA86
C
	IMPLICIT NONE
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England
C Author R. Fairbairns		Coded 31.xii.76 as part of RDREAL
C Rehashed as RDRCMP 13.xii.78, Renamed RDREAL_CMPT 20.i.82
C Reworked for LSLLIB and renamed LSL_RDDBLE_CMPT,
C	TJ Ibbs/R J Hulme	15 January 1986
C
C To read a double precision component of a real number
C
C Function result is TRUE if there's no real number left on the line,
C FALSE otherwise
C
C arguments
C
	REAL*8			R
	LOGICAL			HADSGN
	LOGICAL			HADDOT_ARG
C
C out - R		the result of our read
C i/o - HADSGN		if it is given to us TRUE, we will not read a
C			sign. we set it TRUE when we have read a sign
C out - HADDOT_ARG	set TRUE by the function if a '.' encountered
C
C parameters
C
	BYTE		DOT,ZERO,NINE
C
	PARAMETER	(DOT ='.')
	PARAMETER	(ZERO='0')
	PARAMETER	(NINE='9')
C
***	PARAMETER/LSL$CMNLSL:LSLLIBMSG/
C
***	COMMON/LSL$CMNLSL:EXCEPTION/
C
C workspace
C
	REAL*8		FRACTN		! the fractional multiplier
	BYTE		CH		! a character
	LOGICAL		INFRCT		! TRUE => in fraction part
	LOGICAL		NEGTVE		! TRUE => '-' encountered
	INTEGER		SIGN		! did we read a '+' or a '-'
C
C functions called
C
	LOGICAL		RDCH		! read next character
	LOGICAL		RDCHS		! ditto, ignore spaces/tabs
	LOGICAL		LSL_RDSIGN	! read a sign
C
C condition handler
C
	INTEGER		LSL_NUM_CHAND
	EXTERNAL	LSL_NUM_CHAND
C
C *********************************************************************
C
C no exception yet
C
	LSL_EXCP = LSL__NORMAL
	ERRNUM   = LSL__NORMAL
C
C establish the condition handler
C
	CALL LIB$ESTABLISH( LSL_NUM_CHAND )
C
C preliminary ideas
C
	LSL_RDDBLE_CMPT = .TRUE.	! assume failure
C
	R      = 0.0D0			! no result yet
	FRACTN = 1.0D0			! no fraction yet
	INFRCT = .FALSE.		! not in a fraction
	NEGTVE = .FALSE.		! not negative
C
C if we have not had a sign, and if we are not in a fractional
C part, then we can check for a sign
C otherwise we just devour any leading spaces
C
	IF ( .NOT.HADSGN .AND. .NOT.INFRCT ) THEN
	   IF (LSL_RDSIGN(SIGN)) GOTO 9000
	   NEGTVE = SIGN.LT.0
	   HADSGN = .TRUE.
	ELSE
	   IF (RDCHS(CH)) THEN
	      ERRNUM = LSL__UNEXPEOL	! unexpected end of line
	      GOTO 9000			! give up now
	   ENDIF
	   CALL BSCH
	ENDIF
C
100	IF ( RDCH(CH) ) THEN
	   ERRNUM = LSL__UNEXPEOL	! unexpected end of line
	   GOTO 9000			! give up now
	ENDIF
C
C if we find a dot, and we are not already in a fractional part, then
C we must become a fractional part
C
	IF ( CH.EQ.DOT .AND. .NOT.INFRCT ) THEN
	   INFRCT = .TRUE.
	   HADDOT_ARG = .TRUE.
	   GOTO 100
	ENDIF
C
C any number, after stripping of the leaders?
C
	CALL BSCH
	IF ( CH.LT.ZERO .OR. CH.GT.NINE ) THEN
	   ERRNUM = LSL__NONUM		! no number found
	   GOTO 9000			! give up at once
	ENDIF
C
C *********************************************************************
C
C so we have read the start of the thing - now loop adding digits
C
400	IF (RDCH(CH)) GOTO 800	! end of line
C
C a '.' either introduces a fraction, or terminates the number if we
C are already in a fractional part
C
	IF ( CH.EQ.DOT .AND. .NOT.INFRCT ) THEN
C
	   HADDOT_ARG = .TRUE.			! had a dot now
	   INFRCT = .TRUE.			! now in a fraction
	   GOTO 400				! get the next digit
C
	ELSEIF ( CH.GE.ZERO .AND. CH.LE.NINE ) THEN
C
	   IF (INFRCT) THEN
	      FRACTN = FRACTN*0.1D0	! one more decimal place
	      R = R+(CH-'0')*FRACTN	! add our new digit in
	   ELSE
	      R = R*10.0D0+(CH-'0')	! add our new digit in
	   ENDIF
	   IF ( LSL_EXCP ) THEN		! have we had an exception?
	      GOTO 400			! no - get the next digit
	   ELSE
	      R = 0.0D0			! yes - return zero
	      ERRNUM = LSL__HADEXCP	! and note we had it
	      GOTO 9000			! and failure
	   ENDIF
C
	ELSE
C
	   CALL BSCH			! unread terminating char
C
	ENDIF
C
C *********************************************************************
C
C and check what sign we are
C
800	IF (NEGTVE) R = -R
C
C and finally, mark our success
C
	LSL_RDDBLE_CMPT = .FALSE.
C
9000	RETURN
	END
