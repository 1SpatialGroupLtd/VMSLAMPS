C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-07-08 16:27:54.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE LSL_EXIT( ERRCODE )
C
***	IDENT	08JL87
***	MODULE	LSL_EXIT
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C Author TJ Ibbs, 17 September 1986
C
C to call EXIT with an appropriate error code
C
	IMPLICIT NONE
C
C **********************************************************************
C arguments
C
	INTEGER*4	ERRCODE		! error code to return ?
C
C **********************************************************************
C parameters
C
	INCLUDE	'($SSDEF)'
	INCLUDE	'($STSDEF)'
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'
C
C common blocks
C
***	COMMON/LSL$CMNLSL:STATUS/	! exit status
C
C functions
C
	LOGICAL		HAVE_I_AN_ARG	! got argument ?
C
C workspace
C
	INTEGER*4	OUR_ERROR	! our version of error
	INTEGER*4	SEV		! severity of error
C
C **********************************************************************
C if we have an argument, then we will use that as our error code to
C check, otherwise we use the value in LSL_STATUS
C
	IF ( HAVE_I_AN_ARG(1) ) THEN
	   OUR_ERROR = ERRCODE
	ELSE
	   OUR_ERROR = LSL_STATUS
	ENDIF
C
C if the error code is a customer value, then we will replace it by
C either SS$_NORMAL or SS$_ABORT, with severity as appropriate
C
C we can tell a customer number by looking at bit 27, which is set
C for a customer number
C
	IF ( (OUR_ERROR.AND.STS$M_CUST_DEF) .NE. 0 ) THEN
C
C	 extract the severity of the error
C
	   SEV = OUR_ERROR.AND.STS$M_SEVERITY
C
C	 and change it to either SS$_NORMAL or SS$_ABORT
C	 if we change it to SS$_ABORT, then we transfer the severity
C	 (ie just change the condition identification)
C
	   IF ( SEV.EQ.STS$K_SUCCESS .OR.
     &		SEV.EQ.STS$K_INFO ) THEN
	      OUR_ERROR = SS$_NORMAL
	   ELSE
	      OUR_ERROR = SS$_ABORT.AND.STS$M_COND_ID
	      OUR_ERROR = OUR_ERROR.OR.SEV
	   ENDIF
C
	ELSEIF (OUR_ERROR.EQ.0) THEN
C
C	 change unset error into SS$_ABORT
C
	   OUR_ERROR = SS$_ABORT
	ENDIF
C
C and mask with the quiet bit, just in case it wasn't there already
C
	OUR_ERROR = OUR_ERROR.OR.LSL_QUIET
C
C and thus we can exit with the resulting error
C
	CALL EXIT( OUR_ERROR )
C
	END
