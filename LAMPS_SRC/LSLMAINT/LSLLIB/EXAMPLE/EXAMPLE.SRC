C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1985-11-22 09:59:30.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	PROGRAM	EXAMPLE
C
***	MODULE	EXAMPLE
***	IDENT	21NO85
C
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Author						TJH  21-Nov-1985
C
C EXAMPLE header for a LSL utility showing use of new LSLLIB DCL 
C command handling routines.
C
	IMPLICIT NONE
C
	INCLUDE 	'($RMSDEF)'
	INCLUDE 	'($SSDEF)'
	INCLUDE 	'($STSDEF)'
	INCLUDE 	'($FORDEF)'
	INCLUDE 	'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE 	'LSL$CMNLSL:CLD.CMN'
	INCLUDE 	'LSL$CMNLSL:STATUS.CMN'
C
C Command Language Definitions
	EXTERNAL       EXAMPLE_CLD
C W/S
	LOGICAL*4	ABSENT		! .T. if file param. not found
	INTEGER*4	CMLEN		! the length of parsed cmd. line
	CHARACTER*1024  CMLSTR		! show off the parsed cmd. line
	INTEGER*2	FCODE(128)	! qualifier argument 
	INTEGER*4	I		! tmp. var.
	LOGICAL		LOCAL		! .T. if qual. is local
	LOGICAL		LOCNEG		! set .TRUE. if qual. is 
C					! locally negated
	INTEGER*4	NUM_FC		! our record of number of FCs
	LOGICAL*4	OK		! for error return another way
	CHARACTER*128	P2_FIL		! output file-spec
	INTEGER*4	P2_LEN		! length of output file-spec
	CHARACTER*128	STR_ARG		! argument for /LOOK_FOR
	REAL		TOLER		! qualifier argument 
	LOGICAL*4	WHINGE		! .T. if local error reporting
C
C Qualifier flags
	LOGICAL		HAD_FC		! set .TRUE. if /FEATURE_CODE
	LOGICAL		HAD_LOG		! set .TRUE. if /LOG
	LOGICAL		HAD_LOO		! set .TRUE. if /LOOK_FOR
	LOGICAL		HAD_TOL		! set .TRUE. if /TOLERANCE
C
C Functions called
	INTEGER*4	DCL_FILE	! reads and parses file title 
C					  from DCL command line
	INTEGER*4	DCL_INT		! gets qualifier args. (integer)
	INTEGER*4	DCL_QUAL	! looks for specified qualifier
	INTEGER*4	DCL_REAL	! gets qualifier args. (real)
	INTEGER*4	DCL_STARTUP	! gets and parses the DCL 
C					  command line	
	INTEGER*4	DCL_STR		! gets qualifier args. (strings)
	INTEGER*4	DCL_CML	
C
C LSL_PUTMSG outputs a message associated with a specified condition 
C code. It also sets STATUS (held in LSL__STATUS common block) masked 
C with LSL_QUIET.
	INTEGER*4	LSL_PUTMSG
C
C ......................................................................
C
C Initialise things.
C
	CALL TMRINI		! start collecting timing statistics
	WHINGE = .TRUE.		! LSLDCL local error reporting
	HAD_LOG = .FALSE. 	! set .TRUE. if /LOG
	HAD_TOL = .FALSE.	! set .TRUE. if /TOLERANCE
	HAD_FC = .FALSE.	! set .TRUE. if /FEATURE_CODE
	HAD_LOO = .FALSE.	! set .TRUE. if /LOOK_FOR
	LOCAL = .FALSE.		! set .TRUE. if qual. is local
	LOCNEG = .FALSE.	! set .TRUE. if qual. is 
				! locally negated
	NUM_FC = 0		! number of feature codes selected
C	
C
C ......................................................................
C
C Get command line for our command verb EXAMPLE. DCL_STARTUP will return
C set to SS$_NORMAL if all is well. 
C
	OK=DCL_STARTUP('EXAMPLE'	! command verb
     &			   ,'_From: '	! prompt if nothing there 
     &			   ,.FALSE.	! don't split parameter lists
     &			   ,EXAMPLE_CLD ! CLD module name
     &			   ,WHINGE)	! .T. - local error reporting
C
C If something went wrong we must give up NOW. STATUS will carry the 
C same condition code as OK. However, STATUS has been set within 
C DCL_STARTUP and masked for you with LSL_QUIET to prevent the echoing
C of the condition code message on exit. You may choose to set the 
C value of your exit condition code yourself eg.
C
CC	IF (.NOT.OK) CALL EXIT(OK.OR.'10000000'X)
C
C By calling exit with an argument of STATUS (or your own code) you
C can control the value assumed by DCL symbol $STATUS which is
C used in command procedures to determine the success, or failure, of 
C a program run by that procedure.
C
	IF (.NOT.OK) CALL EXIT (STATUS)
C
C Purely for the purpose of showing the use of DCL_CML we shall use it 
C here, quite unnecessarily!
C
	OK=DCL_CML(CMLSTR, CMLEN, .FALSE.)
	IF (.NOT.OK) CALL EXIT (STATUS)
	TYPE *,'Parsed command line = ',CMLSTR(:CMLEN)
C
C ......................................................................
C
C Check for qualifiers, we could have /LOG, /FEATURE_CODES=(int,...),
C /TOLERANCE=real and /LOOK_FOR=(string,...)
C
C
C First /LOG
C
	OK=DCL_QUAL('LOG'	 	! qualifier name
     &			,HAD_LOG	! returned .T. if qual. found
     &			,LOCAL	 	! .T. if qual local to parameter
     &			,LOCNEG  	! .T. if qual. negated locally
     &			,WHINGE) 	! .T. - local error reporting
	IF (.NOT.OK) CALL EXIT (STATUS)
C
C Now /FEATURE_CODES
C
	OK=DCL_QUAL('FEATURE_CODES'	! qualifier name
     &			,HAD_FC 	! returned .T. if qual. found
     &			,LOCAL	 	! .T. if qual local to parameter
     &			,LOCNEG  	! .T. if qual. negated locally
     &			,WHINGE) 	! .T. - local error reporting
C
	IF (.NOT.OK) THEN
	    CALL EXIT (STATUS)
	ELSE IF (HAD_FC) THEN		 ! get the arguments
C
	   OK=DCL_INT('FEATURE_CODES'! qualifier name
     &			  ,WHINGE) 	! .T. - local error reporting
	   IF (.NOT.OK) CALL EXIT (STATUS)
C
C Transfer the args. to our local array
C
	   IF (NUMINT.GE.1) THEN
	       DO 10 I=1,NUMINT		
	           FCODE(I)=IARRAY(I)
10	       CONTINUE
	       NUM_FC=NUMINT
	   ENDIF
	ENDIF
C
C
C Now /LOOK_FOR (This time we will turn error reporting off down in
DCL_QUAL and handle any error reporting ourselves on return to our main
program.)
	OK = DCL_QUAL ( 'LOOK_FOR'	! qualifier name
     &			,HAD_LOO	! returned .T. if qual. found
     &			,LOCAL	 	! .T. if qual local to parameter
     &			,LOCNEG  	! .T. if qual. negated locally
     &			,.FALSE.) 	! .F. - no local error reporting
C
C Now get the string argument(s) for /LOOK_FOR (and we can leave them 
C in /CLDCHR/ since this is only qualifier which has string args.)
	IF (OK) THEN
	   OK=DCL_STR('LOOK_FOR'	! qualifier name
     &		      ,WHINGE) 		! .T. - local error reporting
C
	   IF (.NOT.OK) CALL EXIT (STATUS)
	ELSE		
C
C For the purposes of example we will use LSL_PUTMSG to report any error
C detected while scanning for the /LOOK_FOR qualifier. LSL_PUTMSG sets
C STATUS for you.
	   CALL LSL_PUTMSG(OK)
	   CALL EXIT (STATUS)
	ENDIF
C
C Now /TOLERANCE
C
	OK=DCL_QUAL('TOLERANCE'		! qualifier name
     &			,HAD_TOL	! returned .T. if qual. found
     &			,LOCAL	 	! .T. if qual local to parameter
     &			,LOCNEG  	! .T. if qual. negated locally
     &			,WHINGE) 	! .T. - local error reporting
C
	IF (.NOT.OK) THEN
	    CALL EXIT (STATUS)
	ELSE IF(HAD_TOL) THEN		! get the arguments
	   OK=DCL_REAL('TOLERANCE'	! qualifier name
     &			   ,WHINGE)	! .T. - local error reporting
C
	   IF (.NOT.OK) CALL EXIT (STATUS)
C
C Transfer the args. to our local variable by way of example
C
	   IF (NUMREA.EQ.1) TOLER=RARRAY(1)
	ENDIF
C
C
C ......................................................................
C
C Now get the command parameters, in our example they are the input 
C file(s) and the output file. First the output file, so that we may
C leave the possible multiple input file-spec(s) in the /CLDCHR/ 
C common block for later reference without recourse to copyiny them 
C around un-necessarily.
C
	OK=DCL_FILE('OUT_FILESPEC'	! parameter or qualifier label
     &		   ,'LSL$IF:IFF.IFF;'	! default filename
     &		   ,ABSENT		! .T. if no filename found
     &		   ,.FALSE.		! don't expect list of filenames
     &		   ,WHINGE)		! .T. - local error reporting
C
C Transfer the file-spec to our local variable
C
	IF (OK) THEN
	    P2_FIL=FILARY(1)(:FIL_LEN(1))	   	    	   
	    P2_LEN=FIL_LEN(1)
	ELSE		
	   CALL EXIT (STATUS)
	ENDIF
C
C Finally get the input file(s)
C
	OK=DCL_FILE('IN_FILESPEC'	! parameter or qualifier label
     &		   ,'LSL$IF:IFF.IFF;'	! default filename
     &		   ,ABSENT		! .T. if no filename found
     &		   ,.TRUE.		! expect list of filenames
     &		   ,WHINGE)		! .T. - local error reporting
C
	IF (.NOT.OK) CALL EXIT(STATUS)
C
C ......................................................................
C
C And now, purely for the purposes of example... 
C (but normally useful code goes in here which does things with the 
C information gleaned from the command line).
C 
	IF (HAD_LOG) TYPE *,'/LOG'
C
	IF (HAD_FC) THEN
	    TYPE *, '/FEATURE_CODES set with the following args. -'
	    DO 20 I=1,NUM_FC
	       TYPE *, FCODE(I)
20	    CONTINUE
	ENDIF
C
	IF (HAD_TOL) TYPE *,'/TOLERANCE = ', TOLER
C
	IF (HAD_LOO) THEN
	    TYPE *, '/LOOK_FOR set with the following args. -'
	    DO 25 I=1,NUMSTR
	        TYPE *, CARRAY(I)(:STR_LEN(I))
25	    CONTINUE
	ENDIF
C
	DO 30 I=1,NUMFIL
	    TYPE *, 'Input file (',I,') = ', FILARY(I)(:FIL_LEN(I))
30 	CONTINUE
	TYPE *, 'Output file = ', P2_FIL(:P2_LEN)
C
C ......................................................................
C
C Now exit setting $STATUS as we go
C
	CALL EXIT (STATUS)
	END
