*******************************************************************************
6 Dec 1994, Clarke Brunt, WI/CC 1440
SHELL_SORT.SRC - jump out of inner loop when a pair found in order.
Previously, the inner loop continued making pointless comparisons,
resulting in N-squared type behaviour. This is used by LSL_SORTAB
to sort command tables, so command table sorting (once only for
static, but after each addition for dynamic) should be much
improved.
GETFILNAM.SRC - test return code from READSTR, rather than just
relying on NAMLEN.EQ.0 - the LSL__STRTOOLONG error can return
a non-zero length. When NAMLEN.EQ.0 then return LSL__SRCFILNAM, rather
than a success code from READSTR.
- LSLSHR remains at version 1.5
*******************************************************************************
9 May 1994, Clarke Brunt, WI/CC 1305 - further AXP enhancements
EXPAND.MAR - eliminate MOVTUC and NULTTAB. Change some word
instructions to long.
- LSLSHR remains at version 1.5
*******************************************************************************
25 April 1994, Clarke Brunt, WI/CC 1305 - further AXP enhancements
LSL_FIND_CMD.MAR - move constants to CONST_PSECT, and remove grubby
stack manipulation.
LSL_SORTAB.MAR - don't use quadword instructions, since data is only
long aligned.
MARK_POSN.MAR - correct register usage (pointed out by VEST)
EXPAND.MAR - move data to CONST_PSECT. Remove in-line data. Alter
grubby stack manipulations.
FILEIO.MAR - move data to CONST_PSECT
MTIV/MTOV.MAR - move data to CONST_PSECT and duplicate exit code rather
than branching to common, which makes VEST think that routines use
resgisters that they don't.
WAIT.MAR - move data to CONST_PSECT
RDCH.MAR - duplicate exit code (for VEST).

*******************************************************************************
20 April 1994, Clarke Brunt, WI/CC 1305

- new file LSLGLOB.MAR in [.SHARE]. This declares the public psects, and
puts a global symbol, with the same name, at the start of each. These
are made universal, in order to provide a means of getting at the common
blocks in the image translated for ALPHA AXP by VEST.
- SHARE.COM, now includes LSLGLOB.OBJ (from above), and forces the
alignment of the public psects to long. Fortran had started making them
quad, which caused them to move in the shareable image.
- new file LSLDUMMY_AXP.MAR. This just supplies dummy entry points for
native dummy image LSLSHR_DUMMY_AXP.
- new file LSLSHR_DUMMY_AXP.COM to build dummy native AXP shareable image,
with which native AXP programs can be linked.
- LSLLIB.COM amended to work with specific 'version' directory
- EXPAND.MAR. The EMODD instruction proves to take ages on ALPHA AXP, so
recode without using it. The resulting code can be a factor of 3 or so
faster on some models of VAX also. Final decimal place of expanded floating
point numbers may differ occasionally.
Also, bypass CHECK_INIT by testing EXPMAX in macro, to avoid wasteful
subroutine call in usual case.
- LSLSHR remains at version 1.5

*******************************************************************************
13 April 1992, Clarke Brunt, mod 1101, SPR 1618

- return SS$_IVTIME from CVT_DAY_STR and CVT_DAY_DMY if passed a silly
  large date. Avoids integer overflow. LSLSHR remains at 1.5.

*******************************************************************************
31 Mar 1992, Clarke Brunt, mod 1096

- change the COUNT argument of the 3 sort routines to be an INTEGER*4
  rather than *2. Most callers passed a *4 anyway. Also change LSL_SORTAB
  to extract and pass a long count of commands to sort routine.
  Although this is strictly an incompatible change, the version of LSLSHR
  remains at 1.5.

*******************************************************************************
20 Nov 1991, Clarke Brunt, mod 1064

- increase length of STARBF (command string argument) from 80 to 256. Move it
  from command LSL_CMDCOM to LSL_CMDCOM_PRIVATE to avoid messing up the
  shareable image. In RDCOMM, read string length up to 255 chars into it
  (leave a spare byte then C stuff can add a null if required).

*******************************************************************************
7 Aug 1990, Clarke Brunt, mod 919

- VIO$OPEN_SEC now restores its FAB to pristine state at the start of each
  call. Previously, once a file had been open for write, then write access was
  required even if file only wanted for read. Similar effects may have been
  observed after a global file had been used also.
- WAIT - the routine name has been changed to LSL_WAIT to avoid clash with
  the C run time library. Programs using LSLSHR will continue to work because
  the same transfer vector slot is used. Programs must change to use LSL_WAIT
  when re-linked.
- CVT_TIME_STR now returns a full longword (INTEGER*4) in the STR_LEN argument
  rather than to word (INTEGER*2) returned previously.

*******************************************************************************
 8 Mar 1989, Clarke Brunt, mod 743
- INITAB bytarr and bytsiz arguments are no longer used, dynamic space obtained
  so the total length of command names to be added need not be fixed at
  compile time.
- EXPAND, rather obscure bugs in %G fixed. Function could return 1 too many
  when a %G number overflowed a %WS output string, and number very slightly
  greater than 0.1 could be output in E format when F sould be used.
- now v1.5 of LSLLIB

*******************************************************************************
17 Nov 1988, R.W. Russell, mod 710
- bug fix to READANG
- stays at v1.4 of LSLLIB

*******************************************************************************
20 Sep 1988, Tony J Ibbs, mod 675, j14553
- change to v1.4 of LSLLIB
- add the new FILEIO routines FLRFNB, FLWFNB and FLWRDL to the end of the
  transfer address vector

*******************************************************************************
12 May 1988, Tony J Ibbs
v1.1 of LSLLIB (increment minor version number in SHARE.COM)
- due to change in RDCOMM and INITAB - see their sources

*******************************************************************************

