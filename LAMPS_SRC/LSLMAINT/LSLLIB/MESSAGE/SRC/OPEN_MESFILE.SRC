C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-08-04 11:33:06.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION OPEN_MESFILE
C
***	MODULE	OPEN_MESFILE
***	IDENT	27JL87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C Author TJ Ibbs, 6 July 1987
C
C This function opens the input .MES file, and also the output .PROMSG
C file (which is passed to the MESSAGE utility)
C It returns TRUE if it fails, and FALSE otherwise
C
C **********************************************************************
C 
	IMPLICIT NONE
C
C Parameter files
C
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'	! LSLLIB__ messages
	INCLUDE	'HERE:NEWMSGMSG.PAR'		! NEWMSG__ messages
C
C Common files
C
	INCLUDE 'LSL$CMNLSL:FILENAME.CMN'	! for filename bits
	INCLUDE	'HERE:FILES.CMN'		! for luns, etc
	INCLUDE	'HERE:QUALIFIERS.CMN'
C
C Functions
C
	LOGICAL		FLROPN		! open file for read
	LOGICAL		FLWOPN		! create file for write
C
C Workspace
C
	LOGICAL		OK		! function return
	INTEGER		IERR		! ditto
	INTEGER		MONTH,DAY,YEAR
C
	INTEGER			LENGTH
	CHARACTER*(C_MAX_SIZ)	NAME	! output .PROMSG filespec
C
C Initialised workspace
C
	CHARACTER*2	MONTHS(12)
C
	DATA MONTHS/'JA','FE','MR','AP','MY','JN',
     &		    'JL','AU','SE','OC','NO','DE'/
C
C *****************************************************************************
C assume the worst
C
	OPEN_MESFILE = .TRUE.
C
C so open the .MES file for read
C
	OK = FLROPN( MES_UNIT, MESFILE_NAM(:MESFILE_LEN), IERR )
	IF (.NOT.OK) THEN
	   CALL LSL_PUTMSG( NEWMSG__ERROPN, MESFILE_NAM(:MESFILE_LEN) )
	   CALL LSL_ADDMSG(OK)
	   IF (OK.EQ.LSL__SYSOPEN) CALL LSL_ADDMSG(IERR)
	   GOTO 9000
	ENDIF
C	   
	IF (EXTRA_LOG) CALL LSL_PUTMSG( NEWMSG__MESOPN,
     &					MESFILE_NAM(:MESFILE_LEN) )
C
C **********************************************************************
C if we are outputting a message object file, then we must work out
C the name of the output .PROMSG file, and create it
C
	IF ( OUT_OBJECT ) THEN
C
	   NAME   = STUB_NAM(:STUB_LEN) // PROMSG
	   LENGTH = STUB_LEN + SZ_PROMSG
C
	   OK = FLWOPN( PRO_UNIT, NAME(:LENGTH), IERR )
	   IF (.NOT.OK) THEN
	      CALL LSL_PUTMSG( NEWMSG__ERROPN, NAME(:LENGTH) )
	      CALL LSL_ADDMSG(OK)
	      IF (OK.EQ.LSL__SYSOPEN) CALL LSL_ADDMSG(IERR)
	      GOTO 8000
	   ENDIF
	   IF (EXTRA_LOG) CALL LSL_PUTMSG( NEWMSG__PROOPN, NAME(:LENGTH) )
C
C	 We now have our message output file open, so we can write
C	 the header into it - ensure that the MODULE name is in upper
C	 case, as ADC doesn't cope well with a lower case MODULE
C
	   CALL STR$UPCASE( STR_NAM(:LEN_NAM), STR_NAM(:LEN_NAM) )
	   CALL IDATE(MONTH,DAY,YEAR)
C
	   CALL FLWRTF('***	MODULE %S',        STR_NAM(:LEN_NAM))
	   CALL FLWRTF('***	IDENT  %I2%S2%I2', DAY,MONTHS(MONTH),
     &						   YEAR)
	   CALL FLWRTF('.FACILITY %S %I6 /PREFIX=%S', FACNAM(:FACNAMLEN),
     &						      FACNUM,
     &						      FACPRE(:FACPRELEN))
C
	ENDIF
C
C *****************************************************************************
C and if we are producing a .RNO file, then we must now open a runoff
C sequential temporary file
C
	IF ( OUT_RUNOFF ) THEN
C
	   NAME   = STUB_NAM(:STUB_LEN) // TEMP_SEQ
	   LENGTH = STUB_LEN + SZ_TEMP_SEQ
C
	   OK = FLWOPN( SEQ_UNIT, NAME(:LENGTH), IERR )
	   IF (.NOT.OK) THEN
	      CALL LSL_PUTMSG( NEWMSG__ERROPN, NAME(:LENGTH) )
	      CALL LSL_ADDMSG(OK)
	      IF (OK.EQ.LSL__SYSOPEN) CALL LSL_ADDMSG(IERR)
	      GOTO 9000
	   ENDIF
C
	   IF (EXTRA_LOG) CALL LSL_PUTMSG( NEWMSG__SEQOPN, NAME(:LENGTH) )
	ENDIF
C
C *****************************************************************************
C so we have finished successfully
C
	OPEN_MESFILE = .FALSE.
C
	GOTO 9000
C
C *****************************************************************************
C error - but input file is open
C
8000	CALL FLRCLO( MES_UNIT )
C
C error - no files open - or success
C
9000	RETURN
	END
