	LOGICAL FUNCTION PROCESS_RNO
C
***	IDENT	02MR88
***	MODULE	PROCESS_RNO
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C Author TJ Ibbs, 6 July 1987
C
C This function reads the message documentation from the indexed
C file in alphabetical order of message, and write a .RNO file
C with them. It returns TRUE if it fails, and FALSE otherwise
C
	IMPLICIT NONE
C
C *****************************************************************************
C Parameter files
C
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'	! LSLLIB message numbers
	INCLUDE	'HERE:NEWMSGMSG.PAR'		! NEWMSG message numbers
	INCLUDE	'LSL$CMNLSL:READSTR.PAR'	! READSTR paramaters
C
C Common files
C
	INCLUDE	'LSL$CMNLSL:FILENAME.CMN'	! filespec common file
	INCLUDE	'HERE:QUALIFIERS.CMN'		! command line stuff
	INCLUDE	'HERE:MESSAGES.CMN'		! the messages themselves
	INCLUDE	'HERE:FILES.CMN'		! file names, etc
C
C Functions
C
	LOGICAL		FLROPN		! open for read
	LOGICAL		FLRFND		! find a record
	LOGICAL		FLRSTR		! read it
	INTEGER		LIB$DELETE_FILE	! delete a file
C
C Workspace
C
	INTEGER		OK, IERR	! function returns
	INTEGER		I		! for a DO loop
	CHARACTER*1	OCODE		! old SCODE value
C
	CHARACTER*(SZ_INDEX_KEY)	KEY	! key to look for
	CHARACTER*(C_MAX_SIZ)		RNOFILE,   IDXFILE
	INTEGER				RNOLENGTH, IDXLENGTH
C
	CHARACTER*(BIG_STR)	TEXT
	INTEGER			LENGTH
C
C *****************************************************************************
C assume that we fail
C
	PROCESS_RNO = .TRUE.
C
	OCODE = '.'		! an invalid SCODE
C
C open the indexed file
C
	IDXFILE   = STUB_NAM(:STUB_LEN) // TEMP_IDX
	IDXLENGTH = STUB_LEN + SZ_TEMP_IDX
C
	OK = FLROPN( IDX_UNIT, IDXFILE(:IDXLENGTH),
     &		     IERR )
	IF ( .NOT.OK ) THEN
	   CALL LSL_PUTMSG( NEWMSG__IDXOPN, IDXFILE(:IDXLENGTH) )
	   CALL LSL_ADDMSG( OK )
	   IF ( OK.EQ.LSL__SYSOPEN ) CALL LSL_ADDMSG(IERR)
	   GOTO 9000
	ENDIF
C
	IF ( EXTRA_LOG ) CALL LSL_PUTMSG( NEWMSG__IDXOPN,
     &					  IDXFILE(:IDXLENGTH) )
C
C and create the .RNO file
C
	RNOFILE   = STUB_NAM(:STUB_LEN) // 'MSG.RNO'
	RNOLENGTH = STUB_LEN + 7
C
	OPEN ( UNIT=RNO_UNIT,
     &	       FILE=RNOFILE(:RNOLENGTH),
     &	       STATUS='NEW', CARRIAGECONTROL='LIST', ERR=8888)
C
	IF ( EXTRA_LOG ) THEN
	   CALL LSL_PUTMSG( NEWMSG__RNOCRE, RNOFILE(:RNOLENGTH) )
	ENDIF
C
C *****************************************************************************
C we now loop reading the text for each message...
C
	DO 8000 I = 1,MESS_COUNT
C
C	 the key we are looking for has the form
C
C		<severity> M 00 <ident>
C
C	 and we know that the idents in IDENT have been sorted
C	 firstly by message type (S,I,W,E,F) and then by alphabetical
C	 order of the ident itself. So work out the next key
C
	   CALL EXPAND('%WS% %S1% M00%S',KEY,SCODE(I),IDENT(I) )
C
C	 and look for it
C
	   OK = FLRFND( KEY,,, IERR )
	   IF ( .NOT.OK ) THEN
	      CALL LSL_PUTMSG( NEWMSG__FINDKEY, IDENT(I) )
	      CALL LSL_ADDMSG( OK )
	      IF (OK.EQ.LSL__SYSFIND) CALL LSL_ADDMSG(IERR)
	      GOTO 9000
	   ENDIF
C
C	 and read it in
C
	   OK = FLRSTR( TEXT, LENGTH, IERR )
	   IF ( .NOT.OK ) THEN
	      CALL LSL_PUTMSG( NEWMSG__READIDX, IDENT(I) )
	      CALL LSL_ADDMSG( OK )
	      IF (OK.EQ.LSL__SYSREAD) CALL LSL_ADDMSG(IERR)
	      GOTO 9000
	   ENDIF
C
C	 if the severity code of this message is different from that
C	 of the last, then we must output the new section introduction
C	 for the new severity
C
	   IF ( OCODE.NE.SCODE(I) ) THEN
	      OCODE = SCODE(I)
	      CALL DESCRIBE_SEVERITY( OCODE )
	   ENDIF
C
C	 and we can now output the message description
C
	   CALL DESCRIBE_MESSAGE( OCODE, IDENT(I), TEXT(:LENGTH) )
C
8000	CONTINUE
C
C *****************************************************************************
C so we have succeeded in what we were trying to do
C
	CALL DESCRIBE_SEVERITY( ' ' )	! finish the .RNO file off
C
	CALL FLRCLO( IDX_UNIT )
	CLOSE ( UNIT=RNO_UNIT, DISPOSE='KEEP' )
C
	IF ( EXTRA_LOG ) CALL LSL_PUTMSG( NEWMSG__RNOCLO )
C
C if we are not keeping intermdiate files, delete the IDX file
C
	IF ( .NOT.KEEP ) THEN
	   OK = LIB$DELETE_FILE( IDXFILE(:IDXLENGTH) )
	   IF ( .NOT.OK ) THEN
	      CALL LSL_PUTMSG( NEWMSG__ERRDEL, IDXFILE(:IDXLENGTH) )
	      CALL LSL_ADDMSG( OK )
	   ELSEIF ( EXTRA_LOG ) THEN
	      CALL LSL_PUTMSG( NEWMSG__IDXDEL )
	   ENDIF
	ELSEIF ( EXTRA_LOG ) THEN
	   CALL LSL_PUTMSG( NEWMSG__IDXCLO )
	ENDIF
C
	PROCESS_RNO = .FALSE.
	GOTO 9000
C
C *****************************************************************************
C error opening the .RNO file
C
8888	CALL ERRSNS( , IERR, OK )
	IF ( OK.EQ.0 ) OK = IERR
C
	CALL LSL_PUTMSG( NEWMSG__ERROPN, RNOFILE(:RNOLENGTH) )
	CALL LSL_ADDMSG( OK )      
C
C *****************************************************************************
C
9000	RETURN
	END
