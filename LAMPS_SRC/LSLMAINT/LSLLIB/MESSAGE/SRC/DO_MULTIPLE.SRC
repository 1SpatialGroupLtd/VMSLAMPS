C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-03-02 12:36:34.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION DO_MULTIPLE( CODE, WHAT, NAME )
C
***	IDENT	02MR88
***	MODULE	DO_MULTIPLE
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C Author TJ Ibbs, 3 July 1987
C
C This routine reads the multiple lines of text for an EXPLANATION
C or USERACTION
C It returns TRUE if is fails, and FALSE otherwise
C
	IMPLICIT NONE
C
C Arguments
C
	CHARACTER*1	CODE		! severity code
	CHARACTER*1	WHAT		! E for explanation,
C					! U for useraction
	CHARACTER*(*)	NAME		! the IDENT for this message
C
C *****************************************************************************
C Parameter files
C
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'	! LSLLIB message numbers
	INCLUDE	'HERE:NEWMSGMSG.PAR'		! NEWMSG message numbers
	INCLUDE	'LSL$CMNLSL:READSTR.PAR'	! READSTR parameters
C
C Common files
C
	INCLUDE	'LSL$CMNLSL:FILENAME.CMN'	! filespec common file
	INCLUDE	'HERE:QUALIFIERS.CMN'		! command line stuff
	INCLUDE	'HERE:MESSAGES.CMN'		! the messages themselves
	INCLUDE	'HERE:FILES.CMN'		! for unit numbers
C
C Functions
C
	INTEGER		READLINE	! read a line
	INTEGER		READSTR		! read a string
	LOGICAL		RDCHS_NL	! read chars - ignore newlines
	LOGICAL		RDCHS		! just read chars
C
C Workspace
C
	BYTE		ICH		! single character
	INTEGER		OK		! function return
	INTEGER		COUNT		! count of lines
C
	INTEGER			LENGTH		! string length
	CHARACTER*(BIG_STR)	TEXT		! string
C
C *****************************************************************************
C assume that we fail
C
	DO_MULTIPLE = .TRUE.
C
	COUNT = 0		! no lines read yet
C
C *****************************************************************************
C we have already read the backslash that starts our text.
C The text will end with a single backslash, and may be spread over
C several lines. Note that two backslashes together (NB not separated
C by a line break!) will insert a backslash into the text.
C
2000	LENGTH = READSTR( TEXT, BACKSLASH, ON_CHAR2, .FALSE., OK )
C
C check for errors - shouldn't actually happen
C
	IF ( .NOT.OK ) THEN
	   CALL LSL_PUTMSG( OK )
	   CALL LSL_ADDMSG( NEWMSG__LINENO, LINE_COUNT )
	   GOTO 9000
	ENDIF
C
C if we had a message of length zero, then check whether it was really
C a backslash on a line by itself. If not, then ignore it.
C
	IF ( LENGTH.EQ.0 ) THEN
	   IF ( OK.EQ.LSL__STRCHAR ) THEN
	      GOTO 6000				! finished with '\'
	   ELSE
	      GOTO 4000				! skip to read line
	   ENDIF
	ENDIF
C
C so we can now count the line of text
C
	COUNT = COUNT+1
C
C if we are doing runoff output, we must output the data to the
C index file
C		<severity> <type> <count> <text> <ident>
C
	IF ( OUT_RUNOFF ) THEN
	   CALL FLWSEL( SEQ_UNIT )
	   CALL FLWRTF( INDEX_FORMAT, CODE, WHAT, COUNT,
     &				      NAME, TEXT(:LENGTH) )
	ENDIF
C
C and if we DID end the string on this line, because we read a final
C backslash, then end now
C
	IF ( OK.EQ.LSL__STRCHAR ) GOTO 6000
C
C *****************************************************************************
C we must now read another line, ready to process it
C
4000	IF ( READLINE() ) THEN		! read the next line
	   CALL BSLN
	   GOTO 2000			! got it - process it
	ELSE
	   GOTO 9000			! end-of-file or error
	ENDIF
C
C *****************************************************************************
C and we come here when we have read the final '\' to end the text
C
6000	DO_MULTIPLE = .FALSE.		! success	
C
C *****************************************************************************
C
9000	RETURN
	END
