	LOGICAL FUNCTION READ_MESSAGES
C
***	IDENT	02MR88
***	MODULE	READ_MESSAGES
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C Author TJ Ibbs, 2 July 1987
C
C This routine reads the messages from the message definition file,
C and stores them away in the MESSAGE common block (and if we are
C producing a .RNO file, in the index file as well)
C
C It returns TRUE if the program should abort, and FALSE otherwise
C
	IMPLICIT NONE
C
C *****************************************************************************
C Parameter files
C
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'	! LSLLIB message numbers
	INCLUDE	'HERE:NEWMSGMSG.PAR'		! NEWMSG message numbers
	INCLUDE	'LSL$CMNLSL:READSTR.PAR'	! READSTR conditions
C
C Common files
C
	INCLUDE	'HERE:QUALIFIERS.CMN'		! command line stuff
	INCLUDE	'HERE:MESSAGES.CMN'		! the messages themselves
C
C Functions
C
	LOGICAL		GET_NEXT_LINE		! as it says
	LOGICAL		START_NEW_MESSAGE	! ditto
	LOGICAL		READ_REPLACE
	LOGICAL		READ_EXPLANATION
	LOGICAL		READ_USERACTION
C
C Workspace
C
	LOGICAL		OK			! function return
C
C *****************************************************************************
C We want to read the messages from the input file
C - we expect them to be of the form
C
C	<severity>  <spc>  <ident>  <gap>  \ <text> \
C	REPLACE	    <spc>  %<thing>=\ <text> \ <spc> %<thing>=\ <text> \ ...etc
C	EXPLANATION <gap>  \ <text> \
C	USERACTION  <gap>  \ <text> \
C
C (although the replace, explanation and user action bits are actually
C  optional)
C
C Note that any line starting with a ! is regarded as comment, and ignored.
C *****************************************************************************
C Set up our initial state - we have not yet read any messages
C
	LINE_COUNT = 0		! no lines read yet
	MESS_COUNT = 0		! nor any messages
	IN_MESSAGE = .FALSE.	! not inside a message definition
	MISS_EXPL  = 0		! no explanations missing
	MISS_USER  = 0		! nor any user actions
C
C assume failure
C
	READ_MESSAGES = .TRUE.
C
C *****************************************************************************
C So get the next line from the file, and work out what it is
C
2000	OK = GET_NEXT_LINE( LINE_COUNT )
	IF ( .NOT.OK ) THEN
	   IF ( OK.EQ.LSL__EOF ) READ_MESSAGES = .FALSE.	! success
	   GOTO 8000
	ENDIF
C
C our next action depends upon both our current state, and also on
C how the line starts. Note that GET_NEXT_LINE will automatically
C have ignored blank lines and comment lines for us
C
	IF ( IS_SEVERITY ) THEN			! starts a new message
C
	   CALL END_MESSAGE			! end any previous one
	   IF ( START_NEW_MESSAGE() ) GOTO 8000	! and start a new one
C
	ELSEIF ( IS_REPLACE ) THEN
C
	   IF ( READ_REPLACE() ) GOTO 8000	! read a replace clause
C
	ELSEIF ( IS_EXPLANATION ) THEN
C
	   IF ( READ_EXPLANATION() ) GOTO 8000	! read an explanation
C
	ELSEIF ( IS_USERACTION ) THEN
C
	   IF ( READ_USERACTION() ) GOTO 8000	! read a user action
C
	ELSE
	   CALL LSL_PUTMSG( NEWMSG__BUG )	! if we are here, BUG !
	   CALL LSL_ADDMSG( NEWMSG__STATE )	! we have a state error
	   GOTO 8000
	ENDIF
C
C and go back for another line
C
	GOTO 2000
C
C *****************************************************************************
C we come down here when we have ended - either because of an error or because
C of reaching end-of-file
C
8000	IF ( IN_MESSAGE ) CALL END_MESSAGE	! end the last message
	RETURN
	END
