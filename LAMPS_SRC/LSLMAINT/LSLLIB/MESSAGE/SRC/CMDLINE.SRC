C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-09-27 11:56:08.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION CMDLINE()
C
***	MODULE	CMDLINE
***	IDENT	27SE93
C
C Copyright Laser-Scan Ltd., Cambridge, England
C Author TJ Ibbs, 30 June 1987
C
CMOD1299 Add /DTILIB option			JB 24-Sep-1993
C
C This function parses and interprets the DCL command line for NEWMSG.
C It returns FALSE if all goes well, and TRUE if the program should
C give up.
C
	IMPLICIT NONE
C
C *****************************************************************************
C parameter files
C
	INCLUDE	'($SSDEF)'			! for SS$_NORMAL
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'	! for LSLLIB errors
	INCLUDE	'HERE:NEWMSGMSG.PAR'		! for the NEWMSG errors
C
C common files
	INCLUDE	'LSL$CMNLSL:FILENAME.CMN'	! for the parts of a name
	INCLUDE	'LSL$CMNLSL:CLD.CMN'		! for command line reading
	INCLUDE	'HERE:QUALIFIERS.CMN'		! for the results of this
	INCLUDE	'HERE:FILES.CMN'		! for the results of this
C
C the command line definition itself
	EXTERNAL        NEWMSG_CLD
C
C workspace
	LOGICAL		OK		! return from DCL_xxx
	LOGICAL		ABSENT		! is the item absent?
	LOGICAL		HADQUAL		! had global qualifier?
	LOGICAL		LOCAL		! had local  qualifier?
	LOGICAL		NEGATED		! qualifier negated?
C
C functions called
	INTEGER    	DCL_STARTUP	! parse the command line
	INTEGER		DCL_QUAL	! find a qualifier
	INTEGER		DCL_FILE	! extract a filespec
	INTEGER		DCL_INT		! extract an integer value
	INTEGER		DCL_STR		! extract a string value
	LOGICAL		PARFILN		! parse a filespec
C
C *****************************************************************************
C assume that we fail...
C
	CMDLINE = .TRUE.
C
C and parse in the command line
C
	OK = DCL_STARTUP( 'NEWMSG',		! command verb
     &			  .FALSE.,		! don't burst parameter lists
     &			  NEWMSG_CLD,		! our CLD file
     &			  .TRUE. )		! deal with errors itself
C
	IF ( .NOT.OK ) GOTO 9000		! failed - give up with status
C
C **********************************************************************
C P1 is INFILE - determine our input message file spec
C This is a REQUIRED value, so cannot be absent without causing an error
C
	OK = DCL_FILE( 'INFILE',	! qualifier name
     &		       '.MES',		! default filespec
     &		       ABSENT,		! out - was it absent?
     &		       .FALSE.,		! only one file to process
     &		       .TRUE. )		! deal with errors itself
C
	IF ( .NOT.OK ) GOTO 9000	! failed - give up with status
C
C the filespec is now in FILARY(1) - put it into our own space
C
	MESFILE_LEN = FIL_LEN(1)
	MESFILE_NAM = FILARY(1)(1:MESFILE_LEN)
C
C check that we didn't have a version number
C - we don't allow them for simplicity's sake
C
	IF ( HAD_VER ) THEN
	   CALL LSL_PUTMSG( NEWMSG__VERSION )
	   CALL LSL_ADDSTR( MESFILE_NAM(:MESFILE_LEN) )
	   GOTO 9000
	ENDIF
C
C the default facility name and prefix can be deduced from the name part
C of the message filespec - let us do so now
C
	IF ( LEN_NAM.LE.SZ_FACNAM ) THEN
	   FACNAM    = STR_NAM
	   FACNAMLEN = LEN_NAM
	ELSE
	   FACNAM    = STR_NAM(1:SZ_FACNAM)	! truncate the name
	   FACNAMLEN = SZ_FACNAM
	ENDIF
C
	IF ( LEN_NAM.LE.(SZ_FACPRE-2) ) THEN
	   FACPRE    = STR_NAM(1:LEN_NAM) // '__'
	   FACPRELEN = LEN_NAM + 2
	ELSE
	   FACPRE    = STR_NAM(1:SZ_FACPRE-2) // '__'
	   FACPRELEN = SZ_FACPRE
	ENDIF
C
C **********************************************************************
C now read the facility number - we must insist that this is present
C
	OK = DCL_QUAL( 'NUMBER',HADQUAL,LOCAL,NEGATED,.TRUE. )
	IF ( .NOT.OK ) GOTO 9000
C
C if it was not present, then we must complain and give up
C
	IF ( .NOT.HADQUAL ) THEN
	   CALL LSL_PUTMSG( NEWMSG__NOFACNUM )
	   GOTO 9000
	ENDIF
C
C otherwise we must read the number itself
C
	OK = DCL_INT( 'NUMBER', .TRUE. )
	IF ( .NOT.OK ) GOTO 9000
C
C extract it from the common block and check that it is sensible
C
	FACNUM = IARRAY(1)
	IF ( FACNUM.LT.MIN_FACNUM .OR. FACNUM.GT.MAX_FACNUM ) THEN
	   CALL LSL_PUTMSG( NEWMSG__BADFACNUM, FACNUM,
     &					       MIN_FACNUM, MAX_FACNUM )
	   GOTO 9000
	ENDIF
C
C **********************************************************************
C now read the facility name
C
	OK = DCL_QUAL( 'NAME',HADQUAL,LOCAL,NEGATED,.TRUE. )
	IF ( .NOT.OK ) GOTO 9000
C
C if it was present, then we must read the name itself
C - otherwise we will use the default
C
	IF ( HADQUAL ) THEN
	   OK = DCL_STR( 'NAME', .TRUE. )
	   IF ( .NOT.OK ) GOTO 9000
	   FACNAMLEN = STR_LEN(1)
	   IF ( FACNAMLEN.GT.SZ_FACNAM ) THEN
	      CALL LSL_PUTMSG( NEWMSG__FACNAMLEN, SZ_FACNAM )
	      GOTO 9000
	   ELSE
	      FACNAM = CARRAY(1)
	   ENDIF
	ENDIF
C
C **********************************************************************
C now read the facility prefix
C
	OK = DCL_QUAL( 'PREFIX',HADQUAL,LOCAL,NEGATED,.TRUE. )
	IF ( .NOT.OK ) GOTO 9000
C
C if it was present, then we must read the prefix itself
C - otherwise we will use the default
C
	IF ( HADQUAL ) THEN
	   OK = DCL_STR( 'PREFIX', .TRUE. )
	   IF ( .NOT.OK ) GOTO 9000
	   FACPRELEN = STR_LEN(1)
	   IF ( FACPRELEN.GT.SZ_FACPRE ) THEN
	      CALL LSL_PUTMSG( NEWMSG__FACPRELEN, SZ_FACPRE )
	      GOTO 9000
	   ELSE
	      FACPRE = CARRAY(1)
	   ENDIF
	ENDIF
C
C **********************************************************************
C find out where the parameter and runoff files should go
C
	OK = DCL_QUAL( 'DESTINATION',HADQUAL,LOCAL,NEGATED,.TRUE. )
	IF ( .NOT.OK ) GOTO 9000
C
C if they didn't specify a value, then we assume the default,
C otherwise work out what they said
C
	IF ( .NOT.HADQUAL ) THEN
	   FILARY(1)  = 'SYS$DISK:[]'
	   FIL_LEN(1) = 14
	ELSE
C
C	 actually find out what destination is wanted
C
	   OK = DCL_FILE( 'DESTINATION','SYS$DISK:[]',
     &		           ABSENT,.FALSE.,.TRUE. )
	   IF ( .NOT.OK ) GOTO 9000
C
C	 check that they didn't specify a full filespec
C
	   IF ( HAD_NOD ) THEN
	      CALL LSL_PUTMSG( NEWMSG__DESTNOD )
	      GOTO 9000
	   ELSEIF ( HAD_NAM .OR. HAD_EXT .OR. HAD_VER ) THEN
	      CALL LSL_PUTMSG( NEWMSG__DESTN )
	      GOTO 9000
	   ENDIF
	ENDIF
C
C we can now work out STUB_NAM for use in generating other filespecs
C elsewhere in the program. To do this, we want the device and directory
C from /DESTINATION, but the file name from MESFILE...
C - first, work out a full filespec in STUB (we're just using it as
C   workspace)
C
	OK = PARFILN( STUB_NAM, STUB_LEN,
     &		      FILARY(1)(:FIL_LEN(1)),
     &		      MESFILE_NAM(:MESFILE_LEN),
     &		      .FALSE. )
	IF (.NOT.OK ) THEN
	   CALL LSL_PUTMSG( NEWMSG__PARSE )
	   CALL LSL_ADDMSG( OK )
	   GOTO 9000
	ENDIF
C
C check that there is room to add 'MSG' onto the file name, where
C necessary
C
	IF ( LEN_NAM .GT. (C_NAM_SIZ-3) ) THEN
	   CALL LSL_PUTMSG( NEWMSG__NAMTOOLNG, C_NAM_SIZ )
	   LEN_NAM = C_NAM_SIZ-3
	   STR_NAM = STR_NAM(:LEN_NAM)
	   CALL LSL_ADDMSG( NEWMSG__TRUNCAT, STR_NAM(:LEN_NAM) )
	ENDIF
C
C now remove any node or extension (version was already disallowed),
C and reparse
C
	HAD_NOD = .FALSE.
	HAD_EXT = .FALSE.
	CALL EXPFLN( STUB_NAM, STUB_LEN )
C
C **********************************************************************
C we must now deal with the /PARAMETERS qualifier - which parameter
C files does the user require us to generate
C
	OK = DCL_QUAL( 'PARAMETERS',HADQUAL,LOCAL,NEGATED,.TRUE. )
	IF ( .NOT.OK ) GOTO 9000
C
C if we had the qualifier, we must determine whether we have each
C possible keyword to it
C
	IF ( HADQUAL ) THEN
C
	   OK = DCL_QUAL( 'PARAMETERS.FORTRAN', OUT_FORTRAN,
     &			   LOCAL,NEGATED,.TRUE. )
	   IF ( .NOT.OK ) GOTO 9000
C
	   OK = DCL_QUAL( 'PARAMETERS.MACRO32', OUT_MACRO,
     &			   LOCAL,NEGATED,.TRUE. )
	   IF ( .NOT.OK ) GOTO 9000
C
	   OK = DCL_QUAL( 'PARAMETERS.C', OUT_C,
     &			   LOCAL,NEGATED,.TRUE. )
	   IF ( .NOT.OK ) GOTO 9000
C
	ELSE
	   OUT_FORTRAN = .TRUE.
	   OUT_MACRO   = .FALSE.
	   OUT_C       = .FALSE.
	ENDIF
C
C **********************************************************************
C we must now deal with the /NOPARAMETERS qualifier - this is used to
C suppress any parameters
C
	OK = DCL_QUAL( 'NOPARAMETERS',HADQUAL,LOCAL,NEGATED,.TRUE. )
	IF ( .NOT.OK ) GOTO 9000
C
	IF ( HADQUAL ) THEN
	   OUT_FORTRAN = .FALSE.
	   OUT_MACRO   = .FALSE.
	   OUT_C       = .FALSE.
	ENDIF
C
C **********************************************************************
C and the /NOOBJECT parameter is used to suppress the message object
C file
C
	OK = DCL_QUAL( 'NOOBJECT',HADQUAL,LOCAL,NEGATED,.TRUE. )
	IF ( .NOT.OK ) GOTO 9000
C
	OUT_OBJECT = .NOT.HADQUAL
C
C **********************************************************************
C find out if the user wants to generate a .RNO file
C
	OK = DCL_QUAL( 'RUNOFF',OUT_RUNOFF,LOCAL,NEGATED,.TRUE. )
	IF ( .NOT.OK ) GOTO 9000
C
C **********************************************************************
C find out if the user wants to generate a .RNO file
C
	OK = DCL_QUAL( 'DTILIB',OUT_DTILIB,LOCAL,NEGATED,.TRUE. )
	IF ( .NOT.OK ) GOTO 9000
C
C **********************************************************************
C now read the header level number - only really relevant if /RUNOFF
C
	OK = DCL_QUAL( 'HL',HADQUAL,LOCAL,NEGATED,.TRUE. )
	IF ( .NOT.OK ) GOTO 9000
C
C if it was not present, then we use the default value
C otherwise we must read the number itself
C
	IF ( .NOT.HADQUAL ) THEN
	   HEADER_LEVEL = DEFAULT_HEADER_LEVEL
	ELSE
	   OK = DCL_INT( 'HL', .TRUE. )
	   IF ( .NOT.OK ) GOTO 9000
	   HEADER_LEVEL = IARRAY(1)
	   IF ( HEADER_LEVEL.LT.1 ) THEN
	      CALL LSL_PUTMSG( NEWMSG__BADHL, HEADER_LEVEL)
	      GOTO 9000
	   ENDIF
	ENDIF
C
C **********************************************************************
C does the user want us to log things?
C
	OK = DCL_QUAL( 'LOG',EXTRA_LOG,LOCAL,NEGATED,.TRUE. )
	IF ( .NOT.OK ) GOTO 9000
C
	OK = DCL_QUAL( 'NOLOG',HADQUAL,LOCAL,NEGATED,.TRUE. )
	IF ( .NOT.OK ) GOTO 9000
C
C if the user gave neither, then we do some logging
C if the user specified /LOG, then we do more
C if the user specified /NOLOG, then we do none at all
C
	IF ( EXTRA_LOG ) THEN		! /LOG
	   DO_LOG    = .TRUE.
	   EXTRA_LOG = .TRUE.
	ELSEIF ( HADQUAL ) THEN		! /NOLOG
	   DO_LOG    = .FALSE.
	   EXTRA_LOG = .FALSE.
	ELSE				! nothing
	   DO_LOG    = .TRUE.
	   EXTRA_LOG = .FALSE.
	ENDIF
C
C **********************************************************************
C are we to keep intermediate files?
C
	OK = DCL_QUAL( 'KEEP',KEEP,LOCAL,NEGATED,.TRUE. )
	IF ( .NOT.OK ) GOTO 9000
C
C **********************************************************************
C so we have succeeded - unless we have /NOLOG, summarise the information
C that we have obtained
C
	IF ( DO_LOG ) THEN
	   CALL WRITEF('Message file:     %S',MESFILE_NAM(:MESFILE_LEN))
	   CALL WRITEF('Facility number:  %N',FACNUM)
	   CALL WRITEF('Facility name:    %S',FACNAM(:FACNAMLEN))
	   CALL WRITEF('Facility prefix:  %S',FACPRE(:FACPRELEN))
	   CALL EXPAND('Generating output for')
	   IF (OUT_FORTRAN) CALL APPEND(' FORTRAN')
	   IF (OUT_MACRO)   CALL APPEND(' MACRO')
	   IF (OUT_C)       CALL APPEND(' C')
	   IF (OUT_RUNOFF)  CALL APPEND(' RUNOFF')
	   CALL TTWLIN
	   IF (OUT_OBJECT)
     &		CALL WRITEF('Generating output for message object module')
	ENDIF
C
	CMDLINE = .FALSE.
C
C **********************************************************************
C
9000	RETURN
	END
