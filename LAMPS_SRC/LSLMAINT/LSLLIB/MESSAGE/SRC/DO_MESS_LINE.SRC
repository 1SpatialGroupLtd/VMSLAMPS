C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-03-01 12:31:44.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION DO_MESS_LINE( SEV_LETTER, MES_IDENT, WHAT, LINE )
C
***	MODULE	DO_MESS_LINE
***	IDENT	01MR88
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C Author TJ Ibbs, 7 July 1987
C
C This routine finds and writes a single line of text to the .RNO file
C It returns TRUE if it can't find the next record
C
	IMPLICIT NONE
C
C Arguments
C
	CHARACTER*1	SEV_LETTER	! letter defining the severity
	CHARACTER*(*)	MES_IDENT	! message ident
	CHARACTER*1	WHAT		! letter defining the type
	INTEGER		LINE		! line count
C
C *****************************************************************************
C Parameter files
C
	INCLUDE	'($RMSDEF)'
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE	'HERE:NEWMSGMSG.PAR'
C
C Common files
C
	INCLUDE	'LSL$CMNLSL:FILENAME.CMN'
	INCLUDE	'HERE:FILES.CMN'
	INCLUDE	'HERE:QUALIFIERS.CMN'
	INCLUDE	'HERE:MESSAGES.CMN'
C
C Functions
C
	LOGICAL		FLRFND		! find a record by key
	LOGICAL		FLRSTR		! read it
C
C Workspace
C
	LOGICAL				OK	! function return
	INTEGER				IERR	! ditto
C
	CHARACTER*(SZ_INDEX_KEY)	KEY	! the key to look for
	CHARACTER*(SZ_INDEX_KEY+
     &		   SZ_MESS)		STRING	! the line we read into
	INTEGER				LENGTH	! its size
C
C *****************************************************************************
C assume that we don't find our record
C
	DO_MESS_LINE = .TRUE.
C
C work out the key we are looking for
C
	CALL EXPAND('%WS'//INDEX_FORMAT,
     &		     KEY, SEV_LETTER, WHAT, LINE, MES_IDENT )
C
C and find the relevant record
C
	OK = FLRFND( KEY,,, IERR )
	IF ( .NOT.OK ) THEN
	   IF ( OK.EQ.LSL__SYSFIND .AND. IERR.EQ.RMS$_RNF ) GOTO 9000
	   CALL LSL_PUTMSG( NEWMSG__FINDKEY, KEY )
	   CALL LSL_ADDMSG( OK )
	   IF ( OK.EQ.LSL__SYSFIND ) CALL LSL_ADDMSG( IERR )
	   GOTO 9000
	ENDIF
C
C read the found record
C
	OK = FLRSTR( STRING, LENGTH, IERR )
	IF ( .NOT.OK ) THEN
	   CALL LSL_PUTMSG( NEWMSG__READEXP, KEY )
	   CALL LSL_ADDMSG( OK )
	   IF ( OK.EQ.LSL__SYSREAD ) CALL LSL_ADDMSG( IERR )
	   GOTO 9000
	ENDIF
C
C and write it to the file
C
	WRITE (RNO_UNIT,40000) STRING(SZ_INDEX_KEY+1:LENGTH)
40000	FORMAT(A<LENGTH-SZ_INDEX_KEY>)
C
C we have succeeded
C
	DO_MESS_LINE = .FALSE.
C
9000	RETURN
	END
