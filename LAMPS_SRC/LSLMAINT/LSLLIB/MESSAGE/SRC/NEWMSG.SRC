C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-07-10 12:50:52.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	PROGRAM	NEWMSG
C
***	MODULE	NEWMSG
***	IDENT	10JL87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C Author TJ Ibbs, 1 July 1987 (original version by TJH, 6 November 1984)
C
C NEWMSG - this program is used to create parameter files for inclusion
C by programs using the LSLLIB message output routines (LSL_PUTMSG, etc)
C It also allows the generation of runoff documentation of the messages
C from text embedded in the message description files
C
C **********************************************************************
C NEWMSG does the following:
C
C 1) Reads in a message definition file, with default filespec
C    SYS$DISK:[].MES
C    This contains message descriptions of the form:
C 
C	 <severity>  <spc> <ident> <gap> \ <text> \
C	 EXPLANATION <gap> \ <explain> \
C	 USERACTION  <gap> \ <action> \
C
C    where:
C
C 	<severity>	is one of SUCCESS, WARNING, INFORMATIONAL,
C 			ERROR, SEVERE or FATAL
C
C 	<ident>		is the message identifier - this is used as
C 			<facility-prefix><ident> in programs
C
C 	<text>		is the text of the message, containing EXPAND
C                       escape sequences and is enclosed by back 
C                       slashes (\).
C
C 	<spc>		is a separator, and may be tabs or spaces 
C 	<gap>		is a separator, and may be <spc> or line breaks
C
C	EXPLANATION	identifies the explanatory text for insertion
C			in the .RNO file being generated
C
C	<explain>	is the text that explains the message. It is
C			enclosed by back slashes, and may be split over
C			several lines
C
C	USERACTION 	identifies the text which suggests a user action
C			for insertion in the .RNO file being generated
C
C	<action>	is the text that describes the suggested user
C			action. It is enclosed by back slashes, and may
C			be split over several lines
C
C    Note that the EXPLANATION and USERACTION fields may be omitted
C    - this allows old files which do not contain these to be
C    processed by NEWMSG
C
C 2) Outputs a file for input to the MESSAGE utility, called <name>.PROMSG
C 
C 3) Writes a Fortran program which can be run to create the parameter
C    files <name>MSG.PAR, <name>MSG.MAR and <name>MSG.H
C
C 4) Outputs a runoff file for inclusion in the documentation of the
C    program or package, called <name>MSG.RNO. This contains the
C    descriptions of the messages, including headers for each section.
C    The messages are sorted in alphabetical order, within severities.
C
C **********************************************************************
C Summary of operation:
C
C - The message file is opened, and read one message at a time.
C   Three actions are taken for each message:
C
C   1)	the <severity>, <ident> and <text> are written out to the
C	.PROMSG file, in the order in which they are read. This file
C	is to be processed by the MESSAGE utility when it is completed,
C	so the messages must be in the order that they were defined in
C	if the message numbers are to be assigned as the user would expect
C
C   2)	if a .RNO file is to be prepared, then all of the fields are
C	output to the index file, which at this stage is a sequential
C	file. Each line in the index file starts with a key of the
C	form
C		<sev> <type> <count> <ident> <text>
C
C	where <sev> is a one letter severity ID, <type> is M for the
C	message itself, E for a line of explanation and U for a line
C	of user action, and <count> is used to distinguish the lines
C	of explanation and user action from each other.
C
C   3)	the message <ident> is stored in an array.
C
C - When the .MES file is finished, the .PROMSG file is closed, and
C   the index file is converted from a sequential file to an indexed
C   file.
C
C - The list of message <ident>s is sorted. From this
C
C   1)	each message can be defined in the FORTRAN program, as only
C	the <ident> is required for that
C   2)	if a .RNO file is being prepared, then each message definition
C	can be extracted neatly from the indexed file.
C 
C **********************************************************************
C 
	IMPLICIT NONE
C
C Parameter files
C
	INCLUDE	'HERE:NEWMSGMSG.PAR'
C
C Common files
C
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'		! for MAX_EXPMAX
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'		! for MAX_TXTLIM
	INCLUDE	'HERE:QUALIFIERS.CMN'		! for the command line
	INCLUDE	'HERE:MESSAGES.CMN'		! for MISS_xxx
C
C Functions
C
	LOGICAL		CMDLINE		! read the command line
	LOGICAL		OPEN_MESFILE	! open the input file
	LOGICAL		READ_MESSAGES	! read the messages in
	LOGICAL		WRITE_PROGRAM	! write out FORTRAN program
	LOGICAL		WRITE_COMFILE	! write the command file
	LOGICAL		CONVERT_INDEX	! convert to an indexed file
	LOGICAL		PROCESS_RNO	! output .RNO file
C
C **********************************************************************
C **********************************************************************
C Initialise the library
C
 	CALL LSL_INIT( .FALSE. )	! don't want timing information
C
C make the buffers as big as we can, so that we can deal with the possibly
C very long strings generated on I/O
C
	CALL SET_EXPMAX( MAX_EXPMAX )
	CALL SET_TXTLIM( MAX_TXTLIM )
C
C read the command line, to see what the user actually wants us to do
C
	IF ( CMDLINE() ) GOTO 9000	! exit if not OK
C
C we are now ready to read the message file, and create our output files
C - open the input message definition file
C
	IF ( OPEN_MESFILE() ) GOTO 9000
C
C read the messages from the file
C
	IF ( READ_MESSAGES() ) GOTO 9000
C
C close the input file
C
	CALL CLOSE_MESFILE
C
C and use the data we collected above to write the FORTRAN program
C that will be used to create the parameter files themselves
C
	IF ( WRITE_PROGRAM() ) GOTO 9000
C
C and also to write the command file to be obeyed to generate the
C actual message object file, and also to compile, link and run the
C FORTRAN program written above
C
	IF ( WRITE_COMFILE() ) GOTO 9000
C
C if we are preparing a .RNO file, then we must now process the data that
C we collected in the loop above
C
	IF ( OUT_RUNOFF ) THEN
	   CALL SORT_IDENTS			! sort the ident array
	   IF ( CONVERT_INDEX() ) GOTO 9000	! make the indexed file
	   IF ( PROCESS_RNO()   ) GOTO 9000	! and use it
	ENDIF
C
C if we had EXPLANATIONs or USERACTIONs missing, complain
C
	IF ( MISS_EXPL.NE.0 ) CALL LSL_PUTMSG( NEWMSG__MISSEXPL, MISS_EXPL )
	IF ( MISS_USER.NE.0 ) CALL LSL_PUTMSG( NEWMSG__MISSUSER, MISS_USER )
C
C *****************************************************************************
C and leave the program, setting $STATUS as we go
C
9000	CALL LSL_EXIT
	END
