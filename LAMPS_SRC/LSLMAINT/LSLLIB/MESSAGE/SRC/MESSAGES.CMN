C Common file for communicating messages and associated information
C between routines
C
C *****************************************************************************
C useful parameters
C
	INTEGER		SZ_IDENT, SZ_SEV, SZ_MESS
	PARAMETER	(SZ_IDENT=15)	! maximum IDENT length
	PARAMETER	(SZ_SEV  =13)	! longest severity name
	PARAMETER	(SZ_MESS =256)	! maximum message text length
C
	INTEGER		MAX_MESS_COUNT
	PARAMETER	(MAX_MESS_COUNT=300)	! max number of messages
C
	BYTE		BACKSLASH,COMMENT
	PARAMETER	(BACKSLASH ='\')	! text delimitor
	PARAMETER	(COMMENT   ='!')	! comment delimitor
C
	INTEGER		BIG_STR			! size for a large string
	PARAMETER	(BIG_STR=500)
C
C *****************************************************************************
C the key used in the indexed message file is of the form
C
C		<severity> <type> <count> <ident> <text>
C where
C	<severity>	is the severity code - S,I,W,E or F
C	<type>		is M for the message itself,
C			   R for the text of a REPLACE command line
C			   E for part of an EXPLANATION
C			   U for part of a  USERACTION
C	<count>		is two digits - the line number of the E or U,
C			or 00 for the original message text with an M,
C			or 00 for the replace command line
C	<ident>		is the message ident - 15 characters
C	<text>		is the text associated with the line - either
C			the message text for an M, or the relevant line
C			for an E or U, or the replace clauses for an R
C
C The format for writing that is:
C
	CHARACTER*16	INDEX_FORMAT
	PARAMETER	(INDEX_FORMAT='%S1%S1%P0%I2%S%S')
C
C and the total size of the key (ie all except the <text>) is thus
C
	INTEGER		SZ_INDEX_KEY
	PARAMETER	(SZ_INDEX_KEY = 1+1+2+SZ_IDENT)
C
C *****************************************************************************
C the following are mainly used during the reading of the .MES file
C
	INTEGER		LINE_COUNT	! line number in .MES file
	LOGICAL		IN_MESSAGE	! true if we are
C
	LOGICAL		IS_SEVERITY	! this line starts with <severity>
	LOGICAL		IS_REPLACE	! or with REPLACE
	LOGICAL		IS_EXPLANATION	! or with EXPLANATION
	LOGICAL		IS_USERACTION	! or with USERACTION
C
	LOGICAL		HAD_EXPLANATION	! in the current message
	LOGICAL		HAD_USERACTION	! ditto
C
	INTEGER		MISS_EXPL	! count of missing explanations
	INTEGER		MISS_USER	! and of missing user actions
C
C *****************************************************************************
C the following are then used to store the messages that we have read
C
	INTEGER		MESS_COUNT	! count of the messages
C
C and various character variables
C
	CHARACTER*(SZ_SEV)	SEV	! current severity
	CHARACTER*(SZ_SEV)	NEW_SEV	! new severity
	CHARACTER*(SZ_MESS)	MESS	! current message text
	INTEGER			MESSLEN	! and its length
C
C and a character array in which to store the idents of all of
C the messages, and the corresponding one character severity code
C
	CHARACTER*1		SCODE(MAX_MESS_COUNT)
	CHARACTER*(SZ_IDENT)	IDENT(MAX_MESS_COUNT)
C
C *****************************************************************************
C and define some common blocks to hold all of that
C
	COMMON /MESS1/	LINE_COUNT, IN_MESSAGE,
     &			IS_SEVERITY, IS_REPLACE,
     &			IS_EXPLANATION, IS_USERACTION,
     &			HAD_EXPLANATION, HAD_USERACTION,
     &			MISS_EXPL, MISS_USER
C
	COMMON /MESS2/	MESS_COUNT, MESSLEN
C
	COMMON /MESSC/	NEW_SEV, SEV, MESS, IDENT, SCODE
C
