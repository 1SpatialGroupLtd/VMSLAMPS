C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-03-02 16:29:46.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION GET_NEXT_LINE
C
***	IDENT	02MR88
***	MODULE	GET_NEXT_LINE
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C Author TJ Ibbs, 2 July 1987
C
C This function gets the next meaningful line from the message file.
C It works out what sort of line it is by interpreting the beginning,
C and it will ignore comment lines and blank lines.
C It returns an appropriate LSL__ error code
C
	IMPLICIT NONE
C
C *****************************************************************************
C Parameter files
C
	INCLUDE	'($SSDEF)'
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'	! LSLLIB message numbers
	INCLUDE	'HERE:NEWMSGMSG.PAR'		! NEWMSG message numbers
C
C Common files
C
	INCLUDE	'LSL$CMNLSL:CMDCOM.CMN'		! for RDCOMM stuff
	INCLUDE	'HERE:QUALIFIERS.CMN'		! command line stuff
	INCLUDE	'HERE:MESSAGES.CMN'		! the messages themselves
C
C Our command table
C
	EXTERNAL	SEVERITY_CMD_TABLE
C
C Functions
C
	LOGICAL		READLINE		! read next line from file
	INTEGER		RDCOMM			! read a command
	LOGICAL		RDCHS			! read a character
C
C Workspace
C
	BYTE		ICH		! a character
	LOGICAL		OK		! function return
	INTEGER		CMD		! command number from RDCOMM
C
C *****************************************************************************
C Lines can start with the following things:
C
C	!		comment line - ignored
C	<blank line>	ignored
C	\		starts a text - complain, as it's not legal here
C
C	<severity>	starts a new message  - return with IS_SEVERITY
C	REPLACE		starts a replacement  - return with IS_REPLACE
C	EXPLANATION	starts an explanation - return with IS_EXPLANATION
C	USERACTION	starts a user action  - return with IS_USERACTION
C
C *****************************************************************************
C set up our initial state - we don't know what we are getting,
C and we assume that we will succeed
C
	IS_SEVERITY    = .FALSE.
	IS_REPLACE     = .FALSE.
	IS_EXPLANATION = .FALSE.
	IS_USERACTION  = .FALSE.
C
	GET_NEXT_LINE = LSL__NORMAL
C
C *****************************************************************************
C so read the next line
C
2000	OK = READLINE()
	IF ( .NOT.OK ) THEN
	   GET_NEXT_LINE = OK
	   GOTO 8000
	ENDIF
C
C *****************************************************************************
C
C and work out what sort of line it is
C
	CALL BSLN
	IF ( RDCHS(ICH) ) GOTO 2000		! blank - ignore it
	IF ( ICH.EQ.COMMENT ) GOTO 2000		! comment - ditto
C
C if we have a backslash starting the line, then it must belong to
C a previous message text. This was possible in older forms of the
C .MES file syntax, but is not allowed now. Thus output a warning
C message, and ignore the line
C
	IF ( ICH.EQ.BACKSLASH ) THEN
	   CALL OLD_FORM_MESSAGE
	   GOTO 2000
	ENDIF
C
C so it's not a line we can ignore
C - read the thing off the front as a 'command'
C
	CALL BSCH
	CMD = RDCOMM( SEVERITY_CMD_TABLE )
	IF ( CMD.LE.0 ) THEN
	   CALL LSL_ADDMSG( NEWMSG__LINENO, LINE_COUNT )
	   GET_NEXT_LINE = SS$_ABORT
	   GOTO 8000
	ENDIF
C
C *****************************************************************************
C and interpret the value returned according to what was found
C - note that the actual command detected will be in the CMDFST fake
C   string, and that it will be in uppercase for us
C
	GOTO  ( 4000,4000,4000,4000,4000,4000,
     &		4500,4600, 4700 ), CMD
C
C we reach here only if we don't know the command number
C
	CALL LSL_PUTMSG( NEWMSG__BUG )
	CALL LSL_ADDMSG( NEWMSG__BADCMD, CMD, CMDFST )
	CALL LSL_ADDMSG( NEWMSG__LINENO, LINE_COUNT )
	GET_NEXT_LINE = SS$_ABORT
	GOTO 8000
C
C *****************************************************************************
C - one of SUCCESS, INFORMATIONAL, WARNING, ERROR, SEVERE or FATAL
C - copy the severity into NEW_SEV for use later on
C   (note that we will convert SEVERE to FATAL, for simplicity)
C
4000	IS_SEVERITY  = .TRUE.
	CALL COPY_STRING( CMDFST, NEW_SEV )
	IF ( NEW_SEV.EQ.'SEVERE' ) NEW_SEV = 'FATAL'
	GOTO 8000
C
C - REPLACE
C
4500	IS_REPLACE = .TRUE.
	GOTO 8000
C
C - EXPLANATION
C
4600	IS_EXPLANATION = .TRUE.
	GOTO 8000
C
C - USERACTION
C
4700	IS_USERACTION = .TRUE.
	GOTO 8000
C
C *****************************************************************************
C
8000	RETURN
	END
