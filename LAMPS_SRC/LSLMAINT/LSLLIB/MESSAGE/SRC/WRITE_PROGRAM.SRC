C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-07-10 16:10:08.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION WRITE_PROGRAM
C
***	MODULE	WRITE_PROGRAM
***	IDENT	10JL87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C Author TJ Ibbs, 1 July 1987 (after the original NEWMSG by TJH)
C
C This function writes the FORTRAN program that is compiled, linked
C with the message file and then run to generate the parameter files
C required.
C
C It returns TRUE if the program should exit, and FALSE otherwise.
C
	IMPLICIT NONE
C
C *****************************************************************************
C Parameter files
C
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'	! LSLLIB__ messages
	INCLUDE	'HERE:NEWMSGMSG.PAR'		! NEWMSG__ messages
C
C Common files
C
	INCLUDE 'LSL$CMNLSL:FILENAME.CMN'	! for filename bits
	INCLUDE	'HERE:QUALIFIERS.CMN'		! for command line
	INCLUDE	'HERE:FILES.CMN'		! for luns, etc
	INCLUDE	'HERE:MESSAGES.CMN'		! the messages themselves
C
C Workspace
C
	INTEGER	  	DAY,MONTH,YEAR	! for FORTRAN file *** IDENT
	INTEGER		I		! for a DO loop counter
	INTEGER		OK,IERR		! used by ERRSNS
C
	CHARACTER*256	TEXT		! current message text
	INTEGER		TEXTLEN		! its length
C
	CHARACTER*(C_MAX_SIZ)	PROG_NAM	! the file we are writing
	INTEGER			PROG_LEN	! the name's size
C
C Initialised things
C
	CHARACTER*2	MONTHS(12)	! month names for an IDENT
C
	DATA MONTHS/'JA','FE','MR','AP','MY','JN',
     &		    'JL','AU','SE','OC','NO','DE'/
C
C **********************************************************************
C assume that things work
C
	WRITE_PROGRAM = .FALSE.
C
C if we are not actually going to be generating anything, just return
C
	IF ( .NOT.OUT_FORTRAN .AND.
     &	     .NOT.OUT_MACRO   .AND.
     &	     .NOT.OUT_C       ) GOTO 9000
C
C work out the name of our output file
C - we use the destination from the STUB for this
C
	CALL PARFILN( PROG_NAM, PROG_LEN, 'GENPAR.FOR',
     &		      STUB_NAM(:STUB_LEN), .FALSE. )
C
C open the output file - this is the FORTRAN file that we are creating
C
	OPEN ( UNIT=FOR_UNIT,
     &	       FILE=PROG_NAM(:PROG_LEN), STATUS='NEW',
     &	       CARRIAGECONTROL='LIST', ERR=9999)
C
	IF ( EXTRA_LOG ) THEN
	   CALL LSL_PUTMSG( NEWMSG__FOROPN, PROG_NAM(:PROG_LEN) )
	   CALL LSL_ADDMSG( NEWMSG__CREFOR )
	ENDIF
C
C the first thing that we must write is the header part of the file...
C
	CALL IDATE(MONTH,DAY,YEAR)
	WRITE (FOR_UNIT,2000) DAY,MONTHS(MONTH),YEAR
C
C now write the declarations part of the FORTRAN file
C - declare each message as an external symbol, so that the program
C   can access its numerical definition as %LOC(<symbol-name>)
C
	DO 200 I=1,MESS_COUNT
	   WRITE (FOR_UNIT,3000)
     &			FACPRE(:FACPRELEN)//IDENT(I),
     &			FACPRE(:FACPRELEN)//IDENT(I)
200	CONTINUE
C
C **********************************************************************
C write out the OPEN statements for each parameter file
C
	WRITE (FOR_UNIT,4000)
C
	IF ( OUT_FORTRAN ) WRITE (FOR_UNIT,4006)
     &			   STUB_NAM(:STUB_LEN)//'MSG.PAR'
	IF ( OUT_MACRO   ) WRITE (FOR_UNIT,4007)
     &			   STUB_NAM(:STUB_LEN)//'MSG.MAR'
	IF ( OUT_C       ) WRITE (FOR_UNIT,4008)
     &			   STUB_NAM(:STUB_LEN)//'MSG.H'
C
C **********************************************************************
C now write the code to write the actual parameter file contents
C - first, define the format statements that we will need
C
	WRITE (FOR_UNIT,5000)
	IF ( OUT_FORTRAN ) WRITE (FOR_UNIT,5006)
	IF ( OUT_MACRO   ) WRITE (FOR_UNIT,5007)
	IF ( OUT_C       ) WRITE (FOR_UNIT,5008)
	WRITE (FOR_UNIT,5500)
C
  	DO 400 I = 1,MESS_COUNT
C
C	 work out the definition of the actual message name and length
C
 	   TEXT    = FACPRE(:FACPRELEN) // IDENT(I)
	   TEXTLEN = FACPRELEN + SZ_IDENT
C
	   WRITE (FOR_UNIT,6000) TEXT(:TEXTLEN)
C
C	 and then for each language we are generating a file for...
C
	   IF ( OUT_FORTRAN ) WRITE (FOR_UNIT,6006) TEXT(:TEXTLEN)
	   IF ( OUT_MACRO   ) WRITE (FOR_UNIT,6007) TEXT(:TEXTLEN)
	   IF ( OUT_C       ) WRITE (FOR_UNIT,6008) TEXT(:TEXTLEN)
C
400	CONTINUE
C
C **********************************************************************
C and finish off the FORTRAN file
C
	IF ( OUT_FORTRAN ) WRITE (FOR_UNIT,7006)
	IF ( OUT_MACRO   ) WRITE (FOR_UNIT,7007)
	IF ( OUT_C       ) WRITE (FOR_UNIT,7008)
C
	WRITE (FOR_UNIT,7500)
C
C **********************************************************************
C **********************************************************************
C and finally close the file, keeping it for later use
C
	CLOSE (UNIT=FOR_UNIT,DISPOSE='KEEP')
	IF ( EXTRA_LOG ) CALL LSL_PUTMSG( NEWMSG__FORCLO )
	GOTO 9000
C
C **********************************************************************
C deal with an error in opening the file here
C
9999	CALL ERRSNS( , IERR, OK )
	IF ( OK.EQ.0 ) OK = IERR
C
	CALL LSL_PUTMSG( NEWMSG__ERROPN, PROG_NAM(:PROG_LEN) )
	CALL LSL_ADDMSG( OK )      
C
	WRITE_PROGRAM = .TRUE.		! failure
C
9000	RETURN
C
C ======================================================================
C ------------------------  FORMAT statements  -------------------------
C ======================================================================
C Fortran program - the start of the program itself
C
2000	FORMAT ('	PROGRAM GENPAR'/
     &		'C'/
     &		'***	MODULE	GENPAR'/
     &		'***	IDENT	',I2.2,A2,I2.2/
     &		'C'/
     &	  	'C declare a string to hold messages, so they are output'/
     &		'C with a standard width (ie just to look prettier)'/
     &		'C'/
     &		'        CHARACTER*31  MESNAME'/
     &		'C'/
     &		'C declare all our messages as EXTERNAL'/
     &		'C')
C
C ......................................................................
C Fortran program - declare a message as an external value
C		    (which is thus accessible as a number using %LOC)
C
3000	FORMAT ('        INTEGER        ',A/
     &		'        EXTERNAL       ',A)
C
C ......................................................................
C Fortran program - open each of the parameter files
C               
4000	FORMAT ('C'/
     &		'C open our output files'/
     &		'C')
4006	FORMAT ('        OPEN(UNIT=6,FILE=''',A,''',STATUS=''NEW'','/
     &		'     &		CARRIAGECONTROL=''LIST'')'/             
     &		'C')
4007	FORMAT ('        OPEN(UNIT=7, FILE=''',A,''',STATUS=''NEW'','/
     &		'     &		CARRIAGECONTROL=''LIST'')'/
     &		'C')
4008	FORMAT ('        OPEN(UNIT=8, FILE=''',A,''',STATUS=''NEW'','/
     &		'     &		CARRIAGECONTROL=''LIST'')')
C
C ......................................................................
C Fortran program - define the output formats
C
5000	FORMAT ('C'/
     &		'C define the formats we will use to output the data'/
     &		'C')
C
5006	FORMAT ('600     FORMAT(''        INTEGER    '',A)'/
     &		'601     FORMAT(''        PARAMETER ('',A,'
     &		'''='',I,'')'')')
C
5007	FORMAT ('700     FORMAT(A,'' = '',I)')
C
5008	FORMAT ('800     FORMAT(''#define '',A,''	'',I)')
C
C
5500	FORMAT ('C'/
     &		'C and we can thus output a definition of each message'/
     &		'C to the output files'/
     &		'C')
C
C ......................................................................
C Fortran program - output a definition of each parameter name
C
6000	FORMAT ('        MESNAME=''',A,'''')
C
6006	FORMAT ('        WRITE (6,600) MESNAME'/
     &		'        WRITE (6,601) MESNAME,%LOC(',A,')')
C
6007	FORMAT ('        WRITE (7,700) MESNAME,%LOC(',A,')')
C
6008	FORMAT ('        WRITE (8,800) MESNAME,%LOC(',A,')')
C
C ......................................................................
C Fortran program - close the parameter files and then end the Fortran
C		    program itself
C
7006 	FORMAT ('        CLOSE (UNIT=6,DISPOSE=''KEEP'')')
7007 	FORMAT ('        CLOSE (UNIT=7,DISPOSE=''KEEP'')')
7008 	FORMAT ('        CLOSE (UNIT=8,DISPOSE=''KEEP'')')
C
7500 	FORMAT ('        CALL EXIT'/
     &		'        END')
C
C ......................................................................
C
	END
