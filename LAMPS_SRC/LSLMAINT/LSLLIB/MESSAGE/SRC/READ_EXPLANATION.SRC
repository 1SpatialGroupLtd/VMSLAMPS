	LOGICAL FUNCTION READ_EXPLANATION
C
***	IDENT	02MR88
***	MODULE	READ_EXPLANATION
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C Author TJ Ibbs, 3 July 1987
C
C This routine reads the text for an explanation
C It returns TRUE if it fails, and FALSE otherwise
C
	IMPLICIT NONE
C
C *****************************************************************************
C Parameter files
C
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'	! LSLLIB message numbers
	INCLUDE	'HERE:NEWMSGMSG.PAR'		! NEWMSG message numbers
	INCLUDE	'LSL$CMNLSL:READSTR.PAR'	! READSTR paramaters
C
C Common files
C
	INCLUDE	'LSL$CMNLSL:FILENAME.CMN'	! filespec common file
	INCLUDE	'HERE:QUALIFIERS.CMN'		! command line stuff
	INCLUDE	'HERE:MESSAGES.CMN'		! the messages themselves
	INCLUDE	'HERE:FILES.CMN'		! for units
C
C Functions
C
	INTEGER		READSTR		! read a string
	LOGICAL		RDCHS_NL	! read chars - ignore newlines
	LOGICAL		RDCHS		! just read chars
	LOGICAL		DO_MULTIPLE	! process the text lines
C
C Workspace
C
	BYTE		ICH		! single character
	INTEGER		OK, IERR	! function returns
	LOGICAL		AT_EOF		! are we?
C
	CHARACTER*(BIG_STR)	TEXT
	INTEGER			LENGTH
C
C *****************************************************************************
C assume that we fail
C
	READ_EXPLANATION = .TRUE.
C
C and read the text of the message
C - look for the backslash at its start, ignoring any line breaks if
C   necessary
C
	AT_EOF = RDCHS_NL(ICH)
	IF ( AT_EOF .OR. (ICH.NE.BACKSLASH) ) THEN
	   CALL LSL_PUTMSG( NEWMSG__NOEXPL )
	   CALL LSL_ADDMSG( NEWMSG__MESSAG, IDENT(MESS_COUNT) )
	   GOTO 9000
	ENDIF
C
C so we have read the initial '\' - now read the text itself
C
	IF ( DO_MULTIPLE( SCODE(MESS_COUNT), 'E',
     &			  IDENT(MESS_COUNT) ) ) GOTO 9000
C
C so we have succeeded
C
	HAD_EXPLANATION  = .TRUE.
	READ_EXPLANATION = .FALSE.
C
C *****************************************************************************
C
9000	RETURN
	END
