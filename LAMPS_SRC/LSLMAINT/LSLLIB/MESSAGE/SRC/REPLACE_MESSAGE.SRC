	SUBROUTINE REPLACE_MESSAGE( SEV_LETTER, MES_IDENT,
     &				    OLD_TEXT, NEW_TEXT, NEW_LEN )
C
***	MODULE	REPLACE_MESSAGE
***	IDENT	20SE88
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C Author TJ Ibbs, 2 March 1988
C
C This routine obeys the REPLACE command for a message text
C
	IMPLICIT NONE
C
C Arguments
C
	CHARACTER*1	SEV_LETTER	! letter defining the severity
	CHARACTER*(*)	MES_IDENT	! message ident
	CHARACTER*(*)	OLD_TEXT	! original message text
	CHARACTER*(*)	NEW_TEXT	! replaced message text
	INTEGER		NEW_LEN		! final text length
C
C *****************************************************************************
C Parameter files
C
	INCLUDE	'($RMSDEF)'
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE	'HERE:NEWMSGMSG.PAR'
C
C Common files
C
	INCLUDE	'LSL$CMNLSL:FILENAME.CMN'
	INCLUDE	'HERE:FILES.CMN'
	INCLUDE	'HERE:MESSAGES.CMN'
C
C Functions
C
	LOGICAL		FLRFND		! find a record by key
	LOGICAL		FLRSTR		! read it
C
	LOGICAL		GET_REPLACE_CLAUSE
C
	INTEGER		STR$POSITION
	LOGICAL		STR$REPLACE
C
C Workspace
C
	LOGICAL				OK	! function return
	INTEGER				IERR	! ditto
C
	CHARACTER*(SZ_INDEX_KEY)	KEY	! the key to look for
	CHARACTER*(SZ_INDEX_KEY+
     &		   SZ_MESS)		STRING	! the line we read into
	INTEGER				LENGTH	! its size
C
	CHARACTER*20		TXT1
	CHARACTER*(BIG_STR)	TXT2
	INTEGER			POS1,POS2
	INTEGER			LEN1,LEN2
	INTEGER			START_POS	! start for replacement
	INTEGER			COUNT		! count the clauses
C
C *****************************************************************************
C Our first action is to copy the old text into our new string, replacing any
C underlines by two underlines (so that RUNOFF will output them as a single
C underline - honest)
C
	POS2 = 0
C
	DO 1000 POS1 = 1,LEN(OLD_TEXT)
	   POS2 = POS2+1
	   NEW_TEXT(POS2:POS2) = OLD_TEXT(POS1:POS1)
	   IF (OLD_TEXT(POS1:POS1).EQ.'_') THEN
	      POS2 = POS2+1
	      NEW_TEXT(POS2:POS2) = '_'		! add extra underline
	   ENDIF
 1000	CONTINUE
C
	NEW_LEN = POS2
C
C Firstly, find out if there actually is a REPLACE command for this message
C - work out the key we are looking for
C
	CALL EXPAND('%WS'//INDEX_FORMAT,
     &		     KEY, SEV_LETTER, 'R', 0, MES_IDENT )
C
C - and look for the relevant record
C
	OK = FLRFND( KEY,,, IERR )
	IF ( .NOT.OK ) THEN
	   IF ( OK.EQ.LSL__SYSFIND .AND. IERR.EQ.RMS$_RNF ) THEN
	      GOTO 9000			! nowt to do - just return
	   ELSE
	      CALL LSL_PUTMSG( NEWMSG__FINDKEY, KEY )
	      CALL LSL_ADDMSG( OK )
	      IF ( OK.EQ.LSL__SYSFIND ) CALL LSL_ADDMSG( IERR )
	      GOTO 9000
	   ENDIF
	ENDIF
C
C so there was a REPLACE record - read it
C
	OK = FLRSTR( ,, IERR )
	IF ( .NOT.OK ) THEN
	   CALL LSL_PUTMSG( NEWMSG__READREPX, KEY )
	   CALL LSL_ADDMSG( OK )
	   IF ( OK.EQ.LSL__SYSREAD ) CALL LSL_ADDMSG( IERR )
	   GOTO 9000
	ENDIF
C
C we must now read through the REPLACE command, and perform the required
C actions upon the message text - note that we want to start reading
C after the KEY
C
	CALL BSLN
	CALL SETWIN( SZ_INDEX_KEY + 1 )
C
C look for the next replace clause
C
	COUNT = 0
C
2000	IF ( GET_REPLACE_CLAUSE( TXT1, LEN1, TXT2, LEN2,
     &				 COUNT, MES_IDENT ) ) GOTO 9000
C
C if there was one, we must perform the replacement it requests
C - find the first occurrence of TXT1
C
	START_POS = STR$POSITION( NEW_TEXT(:NEW_LEN), TXT1(:LEN1) )
	IF (START_POS.EQ.0) THEN
	   CALL LSL_PUTMSG(NEWMSG__NOREPL,TXT1(:LEN1),MES_IDENT)
	   GOTO 9000			! try the next clause
	ENDIF
C
C - and replace it with TXT2
C
	OK = STR$REPLACE( NEW_TEXT, NEW_TEXT(:NEW_LEN),
     &			  START_POS, START_POS+LEN1-1, TXT2(:LEN2) )
	IF (.NOT.OK) THEN
	   CALL LSL_PUTMSG(NEWMSG__NOREPL,TXT1(:LEN1),MES_IDENT)
	   CALL LSL_ADDMSG(OK)
	   GOTO 9000
	ENDIF
C
C adjust the length of NEW_TEXT
C
	NEW_LEN = NEW_LEN - LEN1 + LEN2
C
C and see if there is another text to replace
C
	GOTO 2000
C
C *****************************************************************************
C
9000	RETURN
	END
