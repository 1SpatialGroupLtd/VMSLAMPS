C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-03-02 18:47:52.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION CONVERT_INDEX
C
***	IDENT	02MR88
***	MODULE	CONVERT_INDEX
C
C Copyright LaserScan Laboratories Ltd., Cambridge, England
C Author TJ Ibbs, 6 July 1987
C
C This function converts the sequential file of message documentation
C into an indexed sequential file
C It returns TRUE if it fails, and FALSE otherwise
C
	IMPLICIT NONE
C
C *****************************************************************************
C Parameters
C
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE	'HERE:NEWMSGMSG.PAR'		! error codes, etc
C
C We can't find the definition for this (and neither could DEC telephone
C support), but DEC said it appears to be 2, and in fact it seems to be 1
C
	INTEGER		CONV$V_SIGNAL
	PARAMETER	(CONV$V_SIGNAL=1)
C
C Common files
C
	INCLUDE	'LSL$CMNLSL:FILENAME.CMN'	! for file parameters
	INCLUDE	'HERE:QUALIFIERS.CMN'		! command line stuff
	INCLUDE	'HERE:FILES.CMN'		! filespecs, etc
C
C Functions
C
	INTEGER		CONV$PASS_FILES	
	INTEGER		CONV$PASS_OPTIONS	
	INTEGER		CONV$CONVERT	
C
	INTEGER		LIB$DELETE_FILE
C
C Workspace
C
	LOGICAL		OK		! function return
	INTEGER		IERR		! ditto
	INTEGER		CNVOPT(19)	! options for CONVERT
	INTEGER		CNVSTAT(5)	! returns record counts
C
C define our filespecs
C
	CHARACTER*(C_MAX_SIZ)	INPUT,   OUTPUT,   EXCEPT
	INTEGER			INPUTLEN,OUTPUTLEN,EXCEPTLEN
C
C and some mysterious conversion options
C -  (1) is 18 = number of parameters
C -  (2) through (17) are careful copies of the defaults from the manual
C - (18) says that we ARE using an FDL
C - (19) says that we DO want an exceptions file
C This strange procedure is actualy how the documentation tells us to do
C it, so we shall...
C
	DATA CNVOPT/18,1,0,1,0,0,1,2,9*0,1,1/
C
C *****************************************************************************
C assume the worst
C
	CONVERT_INDEX = .TRUE.
C
	IF ( EXTRA_LOG ) CALL LSL_PUTMSG( NEWMSG__CONVERT )
C
C work out the name of our input file
C
	INPUT     = STUB_NAM(:STUB_LEN) // TEMP_SEQ
	INPUTLEN  = STUB_LEN + SZ_TEMP_SEQ
	OUTPUT    = STUB_NAM(:STUB_LEN) // TEMP_IDX
	OUTPUTLEN = STUB_LEN + SZ_TEMP_IDX
	EXCEPT    = STUB_NAM(:STUB_LEN) // '.EXCEPTIONS'
	EXCEPTLEN = STUB_LEN + 11
C
C we want to convert the sequential file into an indexed file, as described
C in our .FDL file. Tell the CONVERT utility what files we are playing with
C
	OK = CONV$PASS_FILES( INPUT(:INPUTLEN),
     &			      OUTPUT(:OUTPUTLEN),
     &			      'LSL$LOOKUP:MESSAGE_INDEX.FDL',
     &			      EXCEPT(:EXCEPTLEN),
     &			      CONV$V_SIGNAL )
C
	IF (.NOT.OK) THEN
	   CALL LSL_PUTMSG( NEWMSG__CONVPASS )
	   GOTO 9000
	ENDIF
C
C and pass the options array so that we will actually use the FDL file
C
	OK = CONV$PASS_OPTIONS( CNVOPT )
C
	IF (.NOT.OK) THEN
	   CALL LSL_PUTMSG( NEWMSG__CONVOPTS, CONV$V_SIGNAL )
	   GOTO 9000
	ENDIF
C
C and do the actual conversion
C - set CNVSTAT(1) to 4 so that we will get all four sets of statistics
C   returned in it
C
	CNVSTAT(1)=4
	OK = CONV$CONVERT( CNVSTAT, CONV$V_SIGNAL )
C
	IF (.NOT.OK) THEN
	   CALL LSL_PUTMSG( NEWMSG__CONVCONV )
	   GOTO 9000
	ENDIF
C
	IF ( EXTRA_LOG ) CALL LSL_PUTMSG( NEWMSG__CONVERTED, CNVSTAT(5) )
C
C deal with the exceptions file - if there were none, delete it
C
	IF ( CNVSTAT(4).NE.0 ) THEN
	   IF ( .NOT.EXTRA_LOG ) CALL LSL_PUTMSG( NEWMSG__CONVERT )
	   CALL LSL_PUTMSG( NEWMSG__CONVERROR, CNVSTAT(4) )
	   CALL LSL_ADDMSG( NEWMSG__EXCEPTION, EXCEPT(:EXCEPTLEN) )
	ELSE
	   OK = LIB$DELETE_FILE( EXCEPT(:EXCEPTLEN) )
	   IF ( .NOT.OK ) THEN
	      CALL LSL_PUTMSG( NEWMSG__ERRDEL, EXCEPT(:EXCEPTLEN) )
	      CALL LSL_ADDMSG( OK )
	   ENDIF
	ENDIF
C
C and delete the temporary file
C
	IF ( .NOT.KEEP ) THEN
	   OK = LIB$DELETE_FILE( INPUT(:INPUTLEN) )
	   IF ( .NOT.OK ) THEN
	      CALL LSL_PUTMSG( NEWMSG__ERRDEL, INPUT(:INPUTLEN) )
	      CALL LSL_ADDMSG( OK )
	   ELSE
	      IF ( EXTRA_LOG ) CALL LSL_PUTMSG( NEWMSG__SEQDEL )
	   ENDIF
	ENDIF
C
C and report success
C
	CONVERT_INDEX = .FALSE.
C
9000	RETURN
	END
