C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-03-02 16:49:28.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION GET_REPLACE_CLAUSE( OLDTXT, OLDLEN, REPTXT, REPLEN,
     &				             COUNT,  MES_IDENT )
C
***	MODULE	GET_REPLACE_CLAUSE
***	IDENT	02MR88
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C Author TJ Ibbs, 2 March 1988
C
C This routine gets the next REPLACE clause for this message
C It returns FALSE if it finds one, or TRUE if it reads EOL,
C or an error occurs
C
	IMPLICIT NONE
C
C Arguments
C
	CHARACTER*(*)	OLDTXT		! EXPAND text (NB no '%' on its front)
	INTEGER		OLDLEN		! its length
	CHARACTER*(*)	REPTXT		! text to replace it with
	INTEGER		REPLEN		! its length
	INTEGER		COUNT		! which clause this is
	CHARACTER*(*)	MES_IDENT	! which message this is
C
C *****************************************************************************
C Parameter files
C
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE	'HERE:NEWMSGMSG.PAR'
C
	INCLUDE	'LSL$CMNLSL:READSTR.PAR'
C
C Common files
C
	INCLUDE	'HERE:MESSAGES.CMN'
C
C Functions
C
	INTEGER		READSTR		! read a string
	LOGICAL		RDCHS		! read a character
C
C Workspace
C
	LOGICAL		OK		! function result
	BYTE		ICH		! 'character'
C
C *****************************************************************************
C assume failure or EOL
C
	GET_REPLACE_CLAUSE = .TRUE.
C
C we will look for the next replace clause - count it
C
	COUNT = COUNT + 1
C
C it should start with the initial "%"
C
	IF ( RDCHS(ICH) ) GOTO 9000		! end of line - no more clauses
C
	IF ( ICH.NE.'%' ) THEN
	   CALL LSL_PUTMSG(NEWMSG__BADREPL,MES_IDENT)
	   CALL LSL_ADDMSG(NEWMSG__READING,COUNT)
	   CALL LSL_ADDMSG(NEWMSG__UNEXPCH,ICH,'%')
	   GOTO 9000
	ENDIF
C
C start the escape sequence off
C
	OLDTXT(1:1) = '%'
C
C and the % escape sequence ends when we find a space, tab or equals sign
C
	OLDLEN = READSTR( OLDTXT(2:), '=', ON_SPACE, .FALSE., OK )
	IF (.NOT.OK) THEN
	   CALL LSL_PUTMSG(NEWMSG__BADREPL,MES_IDENT)
	   CALL LSL_ADDMSG(NEWMSG__READING,COUNT)
	   CALL LSL_ADDMSG(OK)
	   GOTO 9000
	ENDIF
C
C correct the length (to allow for that initial '%')
C
	OLDLEN = OLDLEN + 1
C
C we must now eat up any '=' sign that might be left
C
	IF ( OK.NE.LSL__STRCHAR ) THEN
	   IF (RDCHS(ICH)) THEN
	      CALL LSL_PUTMSG(NEWMSG__BADREPL,MES_IDENT)
	      CALL LSL_ADDMSG(NEWMSG__READING,COUNT)
	      CALL LSL_ADDMSG(LSL__UNEXPEOL)
	      GOTO 9000
	   ELSE IF (ICH.NE.'=') THEN
	      CALL LSL_PUTMSG(NEWMSG__BADREPL,MES_IDENT)
	      CALL LSL_ADDMSG(NEWMSG__READING,COUNT)
	      CALL LSL_ADDMSG(NEWMSG__UNEXPCH,ICH,'=')
	      GOTO 9000
	   ENDIF
	ENDIF
C
C and we can now read the replacement clause, which should be delimited by
C backslashes, in the traditional manner
C
	IF ( RDCHS(ICH) ) THEN
	   CALL LSL_PUTMSG(NEWMSG__BADREPL,MES_IDENT)
	   CALL LSL_ADDMSG(NEWMSG__READING,COUNT)
	   CALL LSL_ADDMSG(LSL__UNEXPEOL)
	   GOTO 9000
	ELSE IF (ICH.NE.BACKSLASH) THEN
	   CALL LSL_PUTMSG(NEWMSG__BADREPL,MES_IDENT)
	   CALL LSL_ADDMSG(NEWMSG__READING,COUNT)
	   CALL LSL_ADDMSG(NEWMSG__UNEXPCH,ICH,'\')
	   GOTO 9000
	ENDIF
C
C and read the string
C
	REPLEN = READSTR( REPTXT, BACKSLASH, ON_CHAR2, .FALSE., OK )
	IF (.NOT.OK) THEN
	   CALL LSL_PUTMSG(NEWMSG__BADREPL,MES_IDENT)
	   CALL LSL_ADDMSG(NEWMSG__READING,COUNT)
	   CALL LSL_ADDMSG(OK)
	   GOTO 9000
	ENDIF
C
C so we have done what we wanted to do
C
	GET_REPLACE_CLAUSE = .FALSE.	! success
C
C *****************************************************************************
C
9000	RETURN
	END
