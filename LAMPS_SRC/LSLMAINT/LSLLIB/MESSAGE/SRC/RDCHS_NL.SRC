C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-07-09 17:18:06.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION RDCHS_NL( ICH )
C
***	IDENT	10JL87
***	MODULE	RDCHS_NL
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C Author TJ Ibbs, 3 July 1987
C
C This function performs a RDCHS, but also ignores line boundaries
C It returns TRUE if it cannot read a character - either due to
C reaching end-of-file, or because of an error
C
	IMPLICIT NONE
C
C Arguments
C
	BYTE		ICH		! character to read
C
C *****************************************************************************
C Parameter files
C
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'	! LSLLIB message numbers
	INCLUDE	'HERE:NEWMSGMSG.PAR'		! NEWMSG message numbers
C
C Functions
C
	LOGICAL		RDCHS		! read next significant char
	LOGICAL		READLINE	! read next line from file
C
C Workspace
C
	LOGICAL		OK		! function return
C
C *****************************************************************************
C attempt to read the next character
C
2000	IF ( RDCHS(ICH) ) THEN		! found end-of-line
	   OK = READLINE()		! read the next line
	   IF ( .NOT.OK ) THEN		! if we can't read a line
	      RDCHS_NL = .TRUE.		! then we can't read a character
	   ELSE				! otherwise we did read a line
	      CALL BSLN			! so start at the beginning
	      GOTO 2000			! and read the first character
	   ENDIF
	ELSE				! found a character
	   RDCHS_NL = .FALSE.		! so return with success
	ENDIF
C
	RETURN
	END
