	SUBROUTINE AEG_OPEN(TYPE)
C
**	MODULE	AEG_OPEN
**	IDENT	14JN91
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Ron Russell	16-July-1987
C
C Open AEG plot file
C
	IMPLICIT NONE
C
C argument
	INTEGER		TYPE			! workstation type
C
	INCLUDE '($SSDEF)'
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'	! LSLLIB error numbers 
C
***	PARAMETER/AEG/
***	COMMON/AEG/
***	COMMON/GKSDAT1/
C
C Functions called
	INTEGER		LIB$GET_LUN
	INTEGER		FLWOPN
	INTEGER		TRNALL,PARFILN
C
C Workspace
	INTEGER		IERR
	INTEGER		OK
	INTEGER		FILE_LEN
	CHARACTER*1024	FILE_NAME
C
C translate logical name LSL$AEG, recursively, to get filename to open
	OK = TRNALL('LSL$AEG',FILE_NAME)
	IF (.NOT.OK) THEN
	   IF (OK.NE.SS$_NOLOGNAM) CALL LSL_PUTMSG(OK)
	   FILE_NAME = 'PLOTFILE'
	ENDIF
C
C parse file name against default
	OK = PARFILN(FILE_NAME,FILE_LEN,FILE_NAME,
     &	               'PLOTFILE.AEG;0',.TRUE.)
	IF (.NOT.OK) CALL LSL_PUTMSG(OK)
C
C Get LUNs to use
	OK = LIB$GET_LUN(AEG_LUN)
	IF (.NOT.OK) CALL LSL_PUTMSG(OK)
C
C Open AEG file
	OK = FLWOPN(AEG_LUN,FILE_NAME(1:FILE_LEN),IERR)
	IF (.NOT.OK) THEN
	   CALL TTWSTR('***Error opening LSL$AEG:')
	   IF (OK.EQ.LSL__SYSOPEN) THEN
	      CALL LSL_PUTMSG(IERR)
	   ELSE
	      CALL LSL_PUTMSG(OK)
	   ENDIF
	ENDIF
C
C save workstation type
	AEG_TYPE = TYPE
C
C initialise counts
	AEG_SENT = 0
	AEG_PROG = 0
C
C get size of table in table counts
	IDCMAXX = NINT(DCMAXX * AEG_CPM)
	IDCMAXY = NINT(DCMAXY * AEG_CPM)
C
C initialise plot
	CALL AEG_INITIAL
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE AEG_CLOSE
C
**	MODULE	AEG_CLOSE
**	IDENT	16JL87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Ron Russell	16-July-1987
C
C Close AEG output file
C
	IMPLICIT NONE
C
	INCLUDE '($SSDEF)'
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'	! LSLLIB error numbers 
C
***	PARAMETER/AEG/
***	COMMON/AEG/
C
C Function called
	INTEGER		FLWCLO
	INTEGER		FLWOPN
	INTEGER		TRNALL,PARFILN
C
C Workspace
	INTEGER		IERR
	INTEGER		OK
	INTEGER		FILE_LEN
	CHARACTER*1024	FILE_NAME
	REAL		X1,Y1,X2,Y2
	CHARACTER*9	DTE
	CHARACTER*8	TME
C
C remember limits, without final move to
	X1 = AEG_LIMITS(1)*0.01
	Y1 = AEG_LIMITS(3)*0.01
	X2 = AEG_LIMITS(2)*0.01
	Y2 = AEG_LIMITS(4)*0.01
C
C movto origin
	CALL AEG_MOVTO(0.0,0.0)
C
C output an "end of program"
	CALL AEG_STRNG('M2')
C
C and close file
	OK = FLWCLO(AEG_LUN,IERR)
	IF (.NOT.OK) THEN
	   CALL TTWSTR('***Error closing LSL$AEG:')
	   IF (OK.EQ.LSL__SYSCLOSE) THEN
	      CALL LSL_PUTMSG(IERR)
	   ELSE
	      CALL LSL_PUTMSG(OK)
	   ENDIF
	ENDIF
C
C open info file
C
C translate logical name LSL$AEG_INFO, recursively, to get
C filename to open
	OK = TRNALL('LSL$AEG_INFO',FILE_NAME)
	IF (.NOT.OK) THEN
	   IF (OK.NE.SS$_NOLOGNAM) CALL LSL_PUTMSG(OK)
	   FILE_NAME = 'AEG_INFO.DAT'
	ENDIF
C
C parse file name against default
	OK = PARFILN(FILE_NAME,FILE_LEN,FILE_NAME,
     &	               'AEG_INFO.DAT;0',.TRUE.)
	IF (.NOT.OK) CALL LSL_PUTMSG(OK)
C
C Open info file
	OK = FLWOPN(AEG_LUN,FILE_NAME(1:FILE_LEN),IERR)
	IF (.NOT.OK) THEN
	   CALL TTWSTR('***Error opening LSL$AEG_INFO:')
	   IF (OK.EQ.LSL__SYSOPEN) THEN
	      CALL LSL_PUTMSG(IERR)
	   ELSE
	      CALL LSL_PUTMSG(OK)
	   ENDIF
	ENDIF
C
C output statistics
C
	CALL TIME(TME)
	CALL DATE(DTE)
C
	CALL FLWRTF('****************************************'//
     &	            '****************************************')
	CALL FLWRTF
	CALL FLWRTF('%(30 %)PLOTTING INFORMATION')
	CALL FLWRTF
	CALL FLWRTF('****************************************'//
     &	            '****************************************')
	CALL FLWRTF
	CALL FLWRTF
	CALL FLWRTF
	CALL FLWRTF
	CALL FLWRTF
	CALL FLWRTF
	CALL FLWRTF('%(3 %)DRAUGHTING%(7 %)PRIMARY REFERENCE POINT'//
     &	            '  %F7.2 %F7.2%(7 %)TOTAL NO OF',0.0,0.0)
	CALL FLWRTF('%(5 %)SYSTEM%(9 %)MINIMUM ABSOLUTE COORDS'//
     &	            '  %F7.2 %F7.2%(8 %)SENTENCES',X1,Y1)
	CALL FLWRTF('%(20 %)MAXIMUM ABSOLUTE COORDS  %F7.2 %F7.2',
     &	             X2,Y2)  
	IF (AEG_TYPE.EQ.AEG_KONG) THEN
	   CALL FLWRTF('%(3 %)KONGSBERG%(8 %)OVERALL PLOT DIMENSIONS'//
     &	            '  %I4 BY %I4 MM%(9 %)%I6',
     &	            NINT(X2-X1),NINT(Y2-Y1),AEG_SENT)
	ELSEIF (AEG_TYPE.EQ.AEG_ARISTO) THEN
	   CALL FLWRTF('%(4 %)ARISTO%(10 %)OVERALL PLOT DIMENSIONS'//
     &	            '  %I4 BY %I4 MM%(9 %)%I6',
     &	            NINT(X2-X1),NINT(Y2-Y1),AEG_SENT)
	ELSE
	   CALL FLWRTF('%(6 %)AEG%(11 %)OVERALL PLOT DIMENSIONS'//
     &	            '  %I4 BY %I4 MM%(9 %)%I6',
     &	            NINT(X2-X1),NINT(Y2-Y1),AEG_SENT)
	ENDIF
	CALL FLWRTF
	CALL FLWRTF
	CALL FLWRTF
	CALL FLWRTF
	CALL FLWRTF
	CALL FLWRTF('%(8 %)JOB NUMBER%(8 %)PROGRAM%(8 %)'//
     &	            'PLOTTAPE TSN%(8 %)REQUIRED BY')
	CALL FLWRTF
	CALL FLWRTF
	CALL FLWRTF
	CALL FLWRTF
	CALL FLWRTF
	CALL FLWRTF
	CALL FLWRTF
	CALL FLWRTF
	CALL FLWRTF('%(37 %)MEDIUM')
	CALL FLWRTF('%(37 %)------')
	CALL FLWRTF
	CALL FLWRTF
	CALL FLWRTF
	CALL FLWRTF
	CALL FLWRTF('%(14 %)BIRO/PAPER%(11 %)INK/OZATEX%(12 %)'//
     &	            'SCRIBECOAT')
	CALL FLWRTF
	CALL FLWRTF
	CALL FLWRTF
	CALL FLWRTF('%(13 %)2T CLEAR FILM%(8 %)7T CLEAR FILM%(9 %)'//
     &	            'CUT ''N'' STRIP')
	CALL FLWRTF
	CALL FLWRTF
	CALL FLWRTF
	CALL FLWRTF('%(14 %)STRIP FILM%(10 %)7T MATT FILM'//
     &	            '%(10 %)NEGATIVE FILM')
	CALL FLWRTF
	CALL FLWRTF
	CALL FLWRTF
	CALL FLWRTF
	CALL FLWRTF
	CALL FLWRTF('%(23 %)END OF RUN ON %S AT %S',DTE,TME)
	CALL FLWRTF
	CALL FLWRTF
	CALL FLWRTF
	CALL FLWRTF
	CALL FLWRTF
	CALL FLWRTF('****************************************'//
     &	            '****************************************')
C
C and close file
	OK = FLWCLO(AEG_LUN,IERR)
	IF (.NOT.OK) THEN
	   CALL TTWSTR('***Error closing LSL$AEG:')
	   IF (OK.EQ.LSL__SYSCLOSE) THEN
	      CALL LSL_PUTMSG(IERR)
	   ELSE
	      CALL LSL_PUTMSG(OK)
	   ENDIF
	ENDIF
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE AEG_FLUSH
C
**	MODULE	AEG_FLUSH
**	IDENT	16JL87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Ron Russell	16-July-1987
C
C Transmit buffer to AEG plotter
C
	IMPLICIT NONE
C
C this is a no-opt; data is output as it is generated
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE AEG_INITIAL
C
**	MODULE	AEG_INITIAL
**	IDENT	17JL87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Ron Russell	17-July-1987
C
C initialise a plot
C
	IMPLICIT NONE
C
***	PARAMETER/AEG/
C
***	COMMON/AEG/
***	COMMON/GKSDAT1/
C
C w/s
	CHARACTER*9	DTE
	CHARACTER*8	TME
C
C initialise current settings, so that first call to set something will
C force an output
	AEG_CURIX = AEG_CPM * DCMAXX + 1000
	AEG_CURIY = AEG_CPM * DCMAXY + 1000
C
	AEG_CURSPEED = -1
	AEG_CURTOOL  = -1
	AEG_CURDISC  = 	1		! always disc 55.7 (ie 141.7)
C
	AEG_CURSYROT   = -1
C
	AEG_PENUP    = .FALSE.		! opposite of default
	AEG_TANGENT  = .TRUE.		! opposite of default
C
	AEG_CURPECK = 0			! peck pattern off (D10)
	AEG_CURPECKC = -1		! invalid current values
	AEG_CURPECK1 = -1
	AEG_CURPECK2 = -1
	AEG_CURGAP = -1
C
	AEG_HAD_COORD= .FALSE.
	AEG_CURIX    = -2147483648
	AEG_CURIY    = -2147483648
C
	AEG_LIMITS(1) = +2147483647
	AEG_LIMITS(2) = -2147483648
	AEG_LIMITS(3) = +2147483647
	AEG_LIMITS(4) = -2147483648
C
C output first line to file
	AEG_PROG = AEG_PROG + 1
	CALL TIME(TME)
	CALL DATE(DTE)
C
	CALL FLWRTF('%P0%%%I5 TAPE GENERATED ON %S AT %S',AEG_PROG,
     &	      DTE,TME)
C
C set full speed
	CALL AEG_SPEED(99)
C
C set linear interpolation mode, XY plane, Automatic speed reduction
C     and absolute coordinate mode
	CALL AEG_FUNC('G1',ICHAR('G'),17,ICHAR('G'),65,ICHAR('G'),90)
C
C turn on pre and post exposure - it now stays on all the time
	CALL AEG_STRNG('D5')		! pre and post exposure on
	AEG_MODE = 1	! in linear interpolation (G1) mode

C 
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE AEG_OUT(STR)
C
**	MODULE	AEG_OUT
**	IDENT	17JL87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Ron Russell	17-July-1987
C
C routine to output a string to the plot file
C
	IMPLICIT NONE
C
***	COMMON/AEG/
C
C argument
	CHARACTER*(*)	STR
C
	AEG_SENT = AEG_SENT + 1
	CALL FLWRTF('N%N%S',AEG_SENT,STR)
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE AEG_STRNG(STR)
C
**	MODULE	AEG_STRNG
**	IDENT	17JL87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Ron Russell	17-July-1987
C
C routine to output a string to the plot file
C This routine should be used for all output EXCEPT outputing coordinates
C and pen ups; it will always output a penup (close shutter) if used just
C after outputting a coordinate.
C
	IMPLICIT NONE
C
***	COMMON/AEG/
C
C argument
	CHARACTER*(*)	STR
C
C output a pen up, if just finished a movto or linto
	IF (AEG_HAD_COORD) THEN
	   CALL AEG_PEN(.TRUE.)
	   AEG_HAD_COORD = .FALSE.
	ENDIF
C
	CALL AEG_OUT(STR)
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE AEG_FUNC(STR,C1,V1,C2,V2,C3,V3,C4,V4,C5,V5,C6,V6)
C
**	MODULE	AEG_FUNC
**	IDENT	17JL87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Ron Russell	17-July-1987
C
C routine to output a string to the plot file
C
	IMPLICIT NONE
C
***	COMMON/AEG/
C
C arguments
	CHARACTER*(*)	STR			! the function
C
C the following arguments are optional
C The charaters must be passed as bytes by the calling program
C as HAVE_I_AN_ARG does not work with character strings
C
	BYTE		C1,C2,C3,C4,C5,C6 	! six possible characters
	INTEGER		V1,V2,V3,V4,V5,V6 	! six possible values
C
C functions
	INTEGER		EXPAND
	LOGICAL		HAVE_I_AN_ARG
C
C w/s
	CHARACTER*50	WSTRING
	INTEGER		PTR
	INTEGER		I
C
C first STR
	PTR = EXPAND('%WS%S',WSTRING,STR)
C
C then rest of arguments, if they exist
	IF (HAVE_I_AN_ARG(2)) 
     &	         PTR = PTR + EXPAND('%WS%^B%C',WSTRING(PTR+1:),C1)
	IF (HAVE_I_AN_ARG(3)) 
     &	         PTR = PTR + EXPAND('%WS%N',WSTRING(PTR+1:),V1)
	IF (HAVE_I_AN_ARG(4)) 
     &	         PTR = PTR + EXPAND('%WS%^B%C',WSTRING(PTR+1:),C2)
	IF (HAVE_I_AN_ARG(5)) 
     &	         PTR = PTR + EXPAND('%WS%N',WSTRING(PTR+1:),V2)
	IF (HAVE_I_AN_ARG(6)) 
     &	         PTR = PTR + EXPAND('%WS%^B%C',WSTRING(PTR+1:),C3)
	IF (HAVE_I_AN_ARG(7)) 
     &	         PTR = PTR + EXPAND('%WS%N',WSTRING(PTR+1:),V3)
	IF (HAVE_I_AN_ARG(8)) 
     &	         PTR = PTR + EXPAND('%WS%^B%C',WSTRING(PTR+1:),C4)
	IF (HAVE_I_AN_ARG(9)) 
     &	         PTR = PTR + EXPAND('%WS%N',WSTRING(PTR+1:),V4)
	IF (HAVE_I_AN_ARG(10)) 
     &	         PTR = PTR + EXPAND('%WS%^B%C',WSTRING(PTR+1:),C5)
	IF (HAVE_I_AN_ARG(11)) 
     &	         PTR = PTR + EXPAND('%WS%N',WSTRING(PTR+1:),V5)
	IF (HAVE_I_AN_ARG(12)) 
     &	         PTR = PTR + EXPAND('%WS%^B%C',WSTRING(PTR+1:),C6)
	IF (HAVE_I_AN_ARG(13)) 
     &	         PTR = PTR + EXPAND('%WS%N',WSTRING(PTR+1:),V6)
C
C and output this string to file
	CALL AEG_STRNG(WSTRING(1:PTR))
C
	RETURN
	END
C
C
C***********************************************************************
C
	SUBROUTINE AEG_SYMBOL(SYMBOL)
C
**	MODULE	AEG_SYMBOL
**	IDENT	17JL87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Ron Russell	17-July-1987
C
C routine to output a symbol selection
C
	IMPLICIT NONE
C
***	COMMON/AEG/
C
C functions
	BYTE	ICHAR
C
C arguments
	INTEGER		SYMBOL		! the symbol number (range 0-99)
C
	IF (SYMBOL.LT.0) SYMBOL = -SYMBOL
	SYMBOL = MOD(SYMBOL,100)
C
	IF (SYMBOL.NE.AEG_CURTOOL) THEN
	   CALL AEG_PEN(.TRUE.)
	   CALL AEG_FUNC('D21',ICHAR('I'),SYMBOL,ICHAR('J'),AEG_CURDISC)
	   AEG_CURTOOL = SYMBOL
	ENDIF	   
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE AEG_PEN(UP)
C
**	MODULE	AEG_PEN
**	IDENT	17JL87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Ron Russell	17-July-1987
C
C routine to open or close the shutter
C
	IMPLICIT NONE
C
***	COMMON/AEG/
C
C arguments
	LOGICAL		UP		! true if pen to be lifted
					! (shutter closed)
C
	IF (UP.NEQV.AEG_PENUP) THEN
	   IF (UP) THEN
	      CALL AEG_OUT('D0')
	   ELSE
	      CALL AEG_OUT('D1')
	   ENDIF
C
	   AEG_PENUP = UP
	ENDIF	   
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE AEG_SANG(ANG)
C
**	MODULE	AEG_SANG
**	IDENT	17JL87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Ron Russell	17-July-1987
C
C routine to set tool angle constant (superceeds AEG_TANG)
C
	IMPLICIT NONE
C
***	PARAMETER/AEG/
***	COMMON/AEG/
C
C arguments
	REAL		ANG		! angle in radians
C
C w/s
	INTEGER		IANG		! the angle in integer degrees
C
	IANG = NINT(ANG*180.0/PI)	! convert to degress
C
C get in range 0 -> 359
   10	IF (IANG.LT.0) THEN
	   IANG = IANG + 360
	   GOTO 10
	ELSEIF (IANG.GE.360) THEN
	   IANG = IANG - 360
	   GOTO 10
	ENDIF
C
C switch off tangential control
	IF (AEG_TANGENT) THEN
C
C following consultations with Hydro in June 1991, leave pre/post and
C corner exposure on for non-tangential control.
C note: these codes will be output whenever tangential control is
C       switched off, including when a slug is being selected for
C       flashing as a symbol.  The current HYDRO software does not
C       output them in these circumstances
C
C note2: pre-and post exposure is on all the time now, so there is no need
C        to turn it on explicitly
CCC	   CALL AEG_STRNG('D5')		! pre and post exposure on
	   CALL AEG_STRNG('D6')		! corner exposure on
C
	   CALL AEG_STRNG('D9')
	   AEG_TANGENT = .FALSE.
	ENDIF
C
C set correct angle
	IF (IANG.NE.AEG_CURSYROT) THEN
	   CALL AEG_FUNC('D41',ICHAR('I'),IANG)
	   AEG_CURSYROT = IANG
	ENDIF	   
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE AEG_TANG
C
**	MODULE	AEG_TANG
**	IDENT	17JL87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Ron Russell	17-July-1987
C
C routine to set tangential control (superceeds AEG_SANG)
C
	IMPLICIT NONE
C
***	COMMON/AEG/
C
C arguments
C
C switch on tangential control
	IF (.NOT.AEG_TANGENT) THEN
C
C following consultations with Hydro in June 1991, leave pre/post exposure
C on for tangential control, but turn corner exposure off
	   CALL AEG_STRNG('D7')	    ! pre, post and corner exposure off
	   CALL AEG_STRNG('D5')	    ! pre and post exposure on
C
	   CALL AEG_STRNG('D8')	    ! set tangential control
	   AEG_TANGENT = .TRUE.
	ENDIF
C
C tool angle is wrong now
	AEG_CURSYROT = -1
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE AEG_MARKER(X,Y)
C
**	MODULE	AEG_MARKER
**	IDENT	17JL87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Ron Russell	17-July-1987
C
C routine to draw a flashed symbol (rotation, symbol etc already set up)
C
	IMPLICIT NONE
C
***	COMMON/AEG/
C
C arguments
	REAL		X,Y		! coordinates
C
C move to point
	CALL AEG_MOVTO(X,Y)
C
C force pen-up
	CALL AEG_PEN(.TRUE.)
C
C flash symbol
	CALL AEG_STRNG('D3')		! must be on line by itself
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE AEG_MOVTO(X,Y)
C
**	MODULE	AEG_MOVTO
**	IDENT	17JL87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Ron Russell	17-July-1987
C
C move to routine (ie move with pen up)
C
	IMPLICIT NONE
C
***	PARAMETER/AEG/
C
***	COMMON/AEG/
C
C arguments
	REAL		X,Y		! coordinates
C
C w/s
	INTEGER		IX,IY
C
C convert world units to table counts
	IX = NINT(X * AEG_CPM)
	IY = NINT(Y * AEG_CPM)
C
C force onto table (don't bother - Hydro don't like symbols at edge to
C be clipped, or the printed extents to just reflect the size of the
C plotter)
CCC	IX = MAX(0,IX)
CCC	IY = MAX(0,IY)
CCC	IX = MIN(IX,IDCMAXX)
CCC	IY = MIN(IY,IDCMAXY)
C
C is move required?
	IF (IX.NE.AEG_CURIX.OR.IY.NE.AEG_CURIY) THEN
	   CALL AEG_COORD(IX,IY,.TRUE.,.FALSE.)
	ENDIF
C
  100	CONTINUE
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE AEG_LINTO(X,Y)
C
**	MODULE	AEG_LINTO
**	IDENT	17JL87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Ron Russell	17-July-1987
C
C line to routine (ie move with pen down)
C
	IMPLICIT NONE
C
***	PARAMETER/AEG/
C
***	COMMON/AEG/
C
C arguments
	REAL		X,Y		! coordinates
C
C w/s
	INTEGER		IX,IY
C
C convert world units to table counts
	IX = NINT(X * AEG_CPM)
	IY = NINT(Y * AEG_CPM)
C
C force onto table (don't bother - Hydro don't like symbols at edge to
C be clipped, or the printed extents to just reflect the size of the
C plotter)
CCC	IX = MAX(0,IX)
CCC	IY = MAX(0,IY)
CCC	IX = MIN(IX,IDCMAXX)
CCC	IY = MIN(IY,IDCMAXY)
C
C is move required?
	IF (IX.NE.AEG_CURIX.OR.IY.NE.AEG_CURIY) THEN
	   CALL AEG_COORD(IX,IY,.FALSE.,.FALSE.)
	ENDIF
C
  100	CONTINUE
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE AEG_CURTO(X,Y)
C
**	MODULE	AEG_CURTO
**	IDENT	17JL87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Clarke Brunt	21-Feb-1991
C
C curve to routine (ie curve with pen down)
C
	IMPLICIT NONE
C
***	PARAMETER/AEG/
C
***	COMMON/AEG/
C
C arguments
	REAL		X,Y		! coordinates
C
C w/s
	INTEGER		IX,IY
C
C convert world units to table counts
	IX = NINT(X * AEG_CPM)
	IY = NINT(Y * AEG_CPM)
C
C force onto table (don't bother - Hydro don't like symbols at edge to
C be clipped, or the printed extents to just reflect the size of the
C plotter)
CCC	IX = MAX(0,IX)
CCC	IY = MAX(0,IY)
CCC	IX = MIN(IX,IDCMAXX)
CCC	IY = MIN(IY,IDCMAXY)
C
C is move required?
	IF (IX.NE.AEG_CURIX.OR.IY.NE.AEG_CURIY) THEN
	   CALL AEG_COORD(IX,IY,.FALSE.,.TRUE.)
	ENDIF
C
  100	CONTINUE
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE AEG_CIRCLE(X,Y,ID)
C
**	MODULE	AEG_CIRCLE
**	IDENT	24JA90
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					CCB	24JA90
C
C Circle or arc
C ID = 1	Full circle - coords centre,edge
C ID = 2/3	Cw/ACw arc  - coords start,end,centre
C
	IMPLICIT NONE
C
C
***	PARAMETER/AEG/
C
***	COMMON/AEG/
C
C Arguments
	REAL	X(3),Y(3)		! coordinates
	INTEGER	ID			! type 1-3
C
C functions
	INTEGER		EXPAND
C
C w/s
	INTEGER		IX,IY
	CHARACTER*50	WSTRING
	INTEGER		PTR
	INTEGER		I
	INTEGER		MODE
C
C move to initial position
	MODE = ID
	IF (ID.EQ.1) THEN		! full circle
	   CALL AEG_MOVTO(X(2),Y(2))
	   MODE = 3	! use anti-clockwise 
C
C convert world units to table counts
	   IX = NINT(X(1) * AEG_CPM)	! centre
	   IY = NINT(Y(1) * AEG_CPM)
	ELSE				! arc
	   CALL AEG_MOVTO(X(1),Y(1))
C
C convert world units to table counts
	   IX = NINT(X(3) * AEG_CPM)	! centre
	   IY = NINT(Y(3) * AEG_CPM)
	ENDIF
C
C initialise
	PTR = 0
C
C do we need to get into new interpolation mode?
	IF (AEG_MODE.NE.MODE) THEN
	   PTR = PTR + EXPAND('%WSG%N',WSTRING(PTR+1:),MODE)
	   AEG_MODE = MODE
	ENDIF
C
C output centre of circle
	PTR = PTR + EXPAND('%WSI%NJ%N',WSTRING(PTR+1:),IX,IY)
C
C do we need the end point of an arc?
	IF (ID.NE.1) THEN
	   IX = NINT(X(2) * AEG_CPM)	! end point
	   IY = NINT(Y(2) * AEG_CPM)
C
C do we need to output X coordinate?
	   IF (IX.NE.AEG_CURIX) THEN
	      PTR = PTR + EXPAND('%WSX%N',WSTRING(PTR+1:),IX)
	      AEG_CURIX = IX
	   ENDIF
C
C do we need to output Y coordinate?
	   IF (IY.NE.AEG_CURIY) THEN
	      PTR = PTR + EXPAND('%WSY%N',WSTRING(PTR+1:),IY)
	      AEG_CURIY = IY
	   ENDIF
C
	   AEG_LIMITS(1) = MIN(AEG_LIMITS(1),IX)
	   AEG_LIMITS(2) = MAX(AEG_LIMITS(2),IX)
	   AEG_LIMITS(3) = MIN(AEG_LIMITS(3),IY)
	   AEG_LIMITS(4) = MAX(AEG_LIMITS(4),IY)
	ENDIF
C
C do we need to output a pendown instruction
	IF (AEG_PENUP) THEN
	   PTR = PTR + EXPAND('%WSD1',WSTRING(PTR+1:))
	   AEG_PENUP = .FALSE.
	ENDIF
C
C output string
	CALL AEG_OUT(WSTRING(1:PTR))
	AEG_HAD_COORD = .TRUE.	! may need penup in future!
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE AEG_COORD(IX,IY,PENUP,CURVE)
C
**	MODULE	AEG_COORD
**	IDENT	20JL87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Ron Russell	20-July-1987
C
C output an instruction to move pen
C
	IMPLICIT NONE
C
***	PARAMETER/AEG/
C
***	COMMON/AEG/
C
C arguments
	INTEGER		IX,IY		! coordinates (in table counts)
	LOGICAL		PENUP		! .true. if movto
	LOGICAL		CURVE		! .true. if curve (else line)
C
C functions
	INTEGER		EXPAND
C
C w/s
	CHARACTER*50	WSTRING
	INTEGER		PTR
	INTEGER		I
	INTEGER		MODE
C
C initialise
	PTR = 0
C
	IF (CURVE) THEN
	   MODE = 7			! 3rd order parabolic interp.
	ELSE
	   MODE = 1			! linear interp.
	ENDIF
C
C do we need to get into correct interpolation mode?
	IF (AEG_MODE.NE.MODE) THEN
	   PTR = PTR + EXPAND('%WSG%N',WSTRING(PTR+1:),MODE)
C
C if leaving curve mode, then put the G1 on a line by itself,
C followed by a D0 on a line by itself, -
C apparently if you don't, then one Hydro plotter does not draw the final
C segment of the curve
	   IF (AEG_MODE.EQ.7) THEN
	      CALL AEG_OUT(WSTRING(1:PTR))
	      PTR = 0
	      CALL AEG_PEN(.TRUE.)
	   ENDIF
	   AEG_MODE = MODE
	ENDIF
C
C do we need to output X coordinate?
	IF (IX.NE.AEG_CURIX) THEN
	   PTR = PTR + EXPAND('%WSX%N',WSTRING(PTR+1:),IX)
	   AEG_CURIX = IX
	ENDIF
C
C do we need to output Y coordinate?
	IF (IY.NE.AEG_CURIY) THEN
	   PTR = PTR + EXPAND('%WSY%N',WSTRING(PTR+1:),IY)
	   AEG_CURIY = IY
	ENDIF
C
C do we need to output a penup/pendown instruction
	IF (PENUP.NEQV.AEG_PENUP) THEN
	   IF (PENUP) THEN
	      PTR = PTR + EXPAND('%WSD0',WSTRING(PTR+1:))
	   ELSE
	      PTR = PTR + EXPAND('%WSD1',WSTRING(PTR+1:))
	   ENDIF
	   AEG_PENUP = PENUP
	ENDIF
C
C output string, if necessary
	IF (PTR.GT.0) THEN
	   CALL AEG_OUT(WSTRING(1:PTR))
	   AEG_HAD_COORD = .TRUE.	! may need penup in future!
	ENDIF
C
	AEG_LIMITS(1) = MIN(AEG_LIMITS(1),IX)
	AEG_LIMITS(2) = MAX(AEG_LIMITS(2),IX)
	AEG_LIMITS(3) = MIN(AEG_LIMITS(3),IY)
	AEG_LIMITS(4) = MAX(AEG_LIMITS(4),IY)
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE AEG_SPEED(SPEED)
C
**	MODULE	AEG_SPEED
**	IDENT	20JL87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Ron Russell	20-July-1987
C
C routine to set the speed (in the range 0-99)
C
	IMPLICIT NONE
C
***	COMMON/AEG/
C
C arguments
	INTEGER		SPEED		! speed to set
C
C w/s
	INTEGER		TSPEED		! copy of argument
C
	IF (SPEED.LT.0) THEN
	   TSPEED = 0
	ELSEIF (SPEED.GT.99) THEN
	   TSPEED = 99
	ELSE
	   TSPEED = SPEED
	ENDIF
C
	IF (TSPEED.NE.AEG_CURSPEED) THEN
	   CALL AEG_FUNC('F',,TSPEED)
	   AEG_CURSPEED = TSPEED
	ENDIF	   
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE AEG_LTYPE(TYPE)
C
**	MODULE	AEG_LTYPE
**	IDENT	24JA90
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Clarke Brunt	24-Jan-1990
C
C routine to output a line type selection
C
	IMPLICIT NONE
C
***	COMMON/AEG/
C
C functions
	BYTE	ICHAR
C
C arguments
	INTEGER		TYPE		! the line type
C
	IF (TYPE.NE.1000) THEN
	   IF (AEG_CURPECK.NE.0) THEN
	      CALL AEG_PEN(.TRUE.)
	      CALL AEG_FUNC('D10')
	      AEG_CURPECK = 0
	   ENDIF
	ELSE
	   IF (AEG_PECK.NE.AEG_CURPECK .OR.
     &	       AEG_PECKC.NE.AEG_CURPECKC) THEN
	      CALL AEG_PEN(.TRUE.)
	      CALL AEG_FUNC('D12',ICHAR('I'),AEG_PECK,ICHAR('J'),AEG_PECKC)
	      AEG_CURPECK = AEG_PECK
	      AEG_CURPECKC = AEG_PECKC
	   ENDIF
	   IF (AEG_PECK1.NE.AEG_CURPECK1 .OR.
     &	       AEG_PECK2.NE.AEG_CURPECK2 .OR.
     &	       AEG_GAP.NE.AEG_CURGAP) THEN
	      CALL AEG_PEN(.TRUE.)
	      CALL AEG_FUNC('D32',
     &		ICHAR('I'),AEG_PECK1,ICHAR('J'),AEG_PECK2,ICHAR('K'),AEG_GAP)
	      AEG_CURPECK1 = AEG_PECK1
	      AEG_CURPECK2 = AEG_PECK2
	      AEG_CURGAP = AEG_GAP
	   ENDIF
	ENDIF
C
	RETURN
	END
