C
C***********************************************************************
C
C	TRANSFORMATION FUNCTIONS
C	========================
C
C
	SUBROUTINE	GSWN(TRN,XMIN,XMAX,YMIN,YMAX)
C
**	MODULE	GSWN
**	IDENT	16JL87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Ron Russell	16-July-1987
C
C SET WINDOW 
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	TRN			! window number
	REAL	XMIN,XMAX,YMIN,YMAX	! rectangular boundaries
C
***	COMMON/GKSDAT1/
C
	INTEGER TRNTMP			! temporary copy of TRN so as
C					! not to pass back new value.
	INTEGER	ERR
C
	ERR	= 0			! no errors yet
	TRNTMP=TRN+1			! convert to Fortran index
	IF (TRNTMP .LT. 1 .OR. TRNTMP .GT. TRNMAX) THEN
	   ERR = 50			! transformation invalid
	ELSEIF (XMAX .LE. XMIN .OR. YMAX .LE. YMIN) THEN
	   ERR = 51			! rectangle definition invalid
	ELSE
	   WINDOW(1,TRNTMP) = XMIN
	   WINDOW(2,TRNTMP) = XMAX
	   WINDOW(3,TRNTMP) = YMIN
	   WINDOW(4,TRNTMP) = YMAX
	   UPTRN = .TRUE.		! transformation needs updating
	ENDIF
	IF (ERR.NE.0) CALL GKSERR(ERR,'GSWN')
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GSVP(TRN,XMIN,XMAX,YMIN,YMAX)
C
**	MODULE	GSVP
**	IDENT	16JL87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Ron Russell	16-July-1987
C
C SET VIEWPORT
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	TRN			! viewport number
	REAL	XMIN,XMAX,YMIN,YMAX	! rectangular boundaries
C
***	COMMON/GKSDAT1/
C
	INTEGER TRNTMP			! temporary copy of TRN so as
C					! not to pass back new value.
	INTEGER	ERR
C
	ERR	= 0			! no errors yet
	TRNTMP = TRN+1			! convert to Fortran index
	IF (TRNTMP .LT. 1 .OR. TRNTMP .GT. TRNMAX) THEN
	   ERR = 50		! transformation number invalid
	ELSEIF (XMAX .LE. XMIN .OR. YMAX .LE. YMIN) THEN
	   ERR = 51		! rectangle definition is invalid
	ELSEIF (XMIN .LT. 0.0 .OR. XMAX .GT. 1.0 .OR.
     &	    YMIN .LT. 0.0 .OR. YMAX .GT. 1.0) THEN
	   ERR = 53		! viewport not within NDC unit square
	ELSE
	   VIEWPT(1,TRNTMP) = XMIN
	   VIEWPT(2,TRNTMP) = XMAX
	   VIEWPT(3,TRNTMP) = YMIN
	   VIEWPT(4,TRNTMP) = YMAX
	   UPTRN = .TRUE.		! transformation needs updating
	ENDIF
	IF (ERR.NE.0) CALL GKSERR(ERR,'GSVP')
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GSWKWN(WKID,XMIN,XMAX,YMIN,YMAX)
C
**	MODULE	GSWKWN
**	IDENT	16JL87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Ron Russell	16-July-1987
C
C SET WORKSTATION WINDOW
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	WKID			! workstation-identifier
	REAL	XMIN,XMAX,YMIN,YMAX	! rectangular boundaries
C
***	COMMON/GKSDAT1/
C
	INTEGER	ERR
C
	ERR = 0
	IF (XMAX .LE. XMIN .OR. YMAX .LE. YMIN) THEN
	   ERR = 51	! rectangle definition is invalid
	ELSEIF (XMIN .LT. 0.0 .OR. XMAX .GT. 1.0 .OR.
     &	        YMIN .LT. 0.0 .OR. YMAX .GT. 1.0) THEN
	   ERR = 53	! workstation window not within NDC unit square
	ELSE
	   WSWIN(1) = XMIN
	   WSWIN(2) = XMAX
	   WSWIN(3) = YMIN
	   WSWIN(4) = YMAX
	   UPTRN = .TRUE.
	ENDIF
	IF (ERR.NE.0) CALL GKSERR(ERR,'GSWKWN')
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GSWKVP(WKID,XMIN,XMAX,YMIN,YMAX)
C
**	MODULE	GSWKVP
**	IDENT	16JL87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Ron Russell	16-July-1987
C
C SET WORKSTATION VIEWPORT
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	WKID			! workstation-identifier
	REAL	XMIN,XMAX,YMIN,YMAX	! rectangular boundaries
C
***	COMMON/GKSDAT1/
C
	INTEGER	ERR
C
	ERR = 0
	IF (XMAX .LE. XMIN .OR. YMAX .LE. YMIN) THEN
	   ERR = 51	! rectangle definition invalid
	ELSEIF (((XMAX-XMIN) .GT. DCMAXX) .OR.
     &	        ((YMAX-YMIN) .GT. DCMAXY)) THEN
	   ERR = 54	! workstation viewport not within display space
	ELSE
	   WSVIEW(1) = XMIN
	   WSVIEW(2) = XMAX
	   WSVIEW(3) = YMIN
	   WSVIEW(4) = YMAX
	   UPTRN = .TRUE.
	ENDIF
	IF (ERR.NE.0) CALL GKSERR(ERR,'GSWKVP')
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GSELNT(TRN)
C
**	MODULE	GSELNT
**	IDENT	16JL87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Ron Russell	16-July-1987
C
C SELECT NORMALISATION TRANSFORMATION
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	TRN			! transformation number
C
***	COMMON/GKSDAT1/
C
	INTEGER TRNTMP		! temporary copy of TRN so as not to
C				! pass back new value
	INTEGER	ERR
C
	ERR = 0				! no errors yet
	TRNTMP=TRN+1			! convert to Fortran index
	IF (TRNTMP .LT. 1 .OR. TRNTMP .GT.TRNMAX) THEN
	   ERR	= 50			! transformation number invalid
	ELSE
	   TRNCUR = TRNTMP		! set currently selected
C					! normalisation transformation
	   UPTRN = .TRUE.		! transformation needs updating
	ENDIF
	IF (ERR.NE.0) CALL GKSERR(ERR,'GSELNT')
	RETURN
	END
C
C***********************************************************************
C
C	GKSAEGLIB UTILITIES
C	==================
C
	SUBROUTINE GUPTRN
C
***	MODULE	GUPTRN
**	IDENT	16JL87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Ron Russell	16-July-1987
C
C Update the transformation
C
	IMPLICIT NONE
C
***	COMMON/GKSDAT1/		! GKS data structures
C
C w/s
	REAL	NDCSCX,NDCSCY	! scaling part of WC to NDC transform
	REAL	NDCOFX,NDCOFY	! offset  part of WC to NDC transform
	REAL	DCSC		! scaling part of NDC to DC transform
	REAL	DCOFX, DCOFY	! offset  part of NDC to DC transform
C
C Work out the scaling factor and offset for WC to NDC transformation.
C Effective formula for transforming a coord is:-
C	XN = XVMIN + (XW-XWMIN) * ((XVMAX-XVMIN)/(XWMAX-XWMIN))
C	YN = YVMIN + (YW-YWMIN) * ((YVMAX-YVMIN)/(YWMAX-YWMIN))
C
C This formula needs to be put into the form:-
C	XN = (XW*NDCSCX) + NDCOFX
C	YN = (YW*NDCSCY) + NDCOFY
C
	NDCSCX = (VIEWPT(2,TRNCUR)-VIEWPT(1,TRNCUR))
     &		/(WINDOW(2,TRNCUR)-WINDOW(1,TRNCUR))
	NDCSCY = (VIEWPT(4,TRNCUR)-VIEWPT(3,TRNCUR))
     &		/(WINDOW(4,TRNCUR)-WINDOW(3,TRNCUR))
	NDCOFX = VIEWPT(1,TRNCUR) - (WINDOW(1,TRNCUR)*NDCSCX)
	NDCOFY = VIEWPT(3,TRNCUR) - (WINDOW(3,TRNCUR)*NDCSCY)
C
C A similar formula has to be used to transform NDC to DC with the
C difference that the shape of the workstation window has to be
C preserved within the workstation viewport (bottom left corner
C is fixed).
	DCSC = MIN(((WSVIEW(2)-WSVIEW(1))
     &		   /(WSWIN (2)-WSWIN (1)))
     &		  ,((WSVIEW(4)-WSVIEW(3))
     &		   /(WSWIN (4)-WSWIN (3))))
	DCOFX = WSVIEW(1) - (WSWIN(1)*DCSC)
	DCOFY = WSVIEW(3) - (WSWIN(3)*DCSC)
C
C Both transformations have to be combined in the form:-
C	XD = (((XW*NDCSCX*DCSC) + (NDCOFX*DCSC)+DCOFX
C	YD = (((YW*NDCSCY*DCSC) + (NDCOFY*DCSC)+DCOFY
C
	SCALEX = NDCSCX * DCSC
	SCALEY = NDCSCY * DCSC
	OFFX = (NDCOFX*DCSC) + DCOFX
	OFFY = (NDCOFY*DCSC) + DCOFY
C
C Work out the clipping limits.
C These correspond to the area of overlap in NDC space between
C the viewport and the workstation window transformations.
C Logical variable CLPALL is set if there is no overlap.
	CLPALL = .FALSE.
C Is there any overlap at all?
	IF ((VIEWPT(1,TRNCUR).GT.WSWIN(2))
     &  .OR.(VIEWPT(2,TRNCUR).LE.WSWIN(1))
     &  .OR.(VIEWPT(3,TRNCUR).GT.WSWIN(4))
     &  .OR.(VIEWPT(4,TRNCUR).LE.WSWIN(3))) GOTO 5
C
C Define the clipping limits to be the overlapping rectangle.
	CLIPLO(1) = MAX(VIEWPT(1,TRNCUR),WSWIN(1))	! W
	CLIPHI(1) = MIN(VIEWPT(2,TRNCUR),WSWIN(2))	! E
	CLIPLO(2) = MAX(VIEWPT(3,TRNCUR),WSWIN(3))	! S
	CLIPHI(2) = MIN(VIEWPT(4,TRNCUR),WSWIN(4))	! N
C
C Transform the clipping limits into WC space so that clipping can
C be done before transforming coordinates. This is not GKS standard.
C To do this we use the formulas:-
C	XW = (XN-NDCOFX) / NDCSCX
C	YW = (YN-NDCOFY) / NDCSCY
C
	CLIPLO(1) = (CLIPLO(1)-NDCOFX) / NDCSCX
	CLIPHI(1) = (CLIPHI(1)-NDCOFX) / NDCSCX
	CLIPLO(2) = (CLIPLO(2)-NDCOFY) / NDCSCY
	CLIPHI(2) = (CLIPHI(2)-NDCOFY) / NDCSCY
	GOTO 20
C
C No overlap
5	CLPALL = .TRUE.
C
C the transformation is now up to date
20	UPTRN = .FALSE.
	RETURN
	END
C
C***********************************************************************
C
	LOGICAL FUNCTION GKCLIP(X1,Y1,X2,Y2)
C
***	MODULE	GKCLIP
**	IDENT	16JL87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Authors many and varied but mainly Paul Hardy based on algorithms
C by P. Woodsford and P.Cross, with tidies by R.Fairbairns
C
C Created July 1980
C
C to clip a straight line to rectangular boundaries.
C function value is TRUE if no visible result.
C
	IMPLICIT NONE
C
	REAL X1,Y1,X2,Y2	! coords of ends of line
C
***	COMMON/GKSDAT1/		! contains boundaries
C
	PARAMETER X=1,Y=2	! for clarity
C w/s
	REAL P(2,2)		! our copies of the points
	REAL D(2)		! DX,DY is line vector
	REAL R			! temp variable
	INTEGER DEP,INDEP	! X or Y depending which axis considered
	INTEGER HIGH,LOW	! 1 or 2 to indicate ends of line
C
C set everything up
	GKCLIP=.FALSE.			! assume visible result
	P(X,1)=X1			! take copy of args
	P(Y,1)=Y1
	P(X,2)=X2
	P(Y,2)=Y2
	D(X)=X2-X1			! calculate vector
	D(Y)=Y2-Y1
C
C now loop for both axes
	DO 30 DEP=X,Y
	   INDEP=3-DEP			! independent axis
	   LOW=1			! guess which end lowest
	   IF(D(INDEP).LT.0.0) LOW=2	! upside down
	   HIGH=3-LOW			! the other end
	   IF(P(INDEP,HIGH).LT.CLIPLO(INDEP)) GOTO 50 ! out bottom
	   IF(P(INDEP,LOW ).GT.CLIPHI(INDEP)) GOTO 50 ! out top
	   IF(D(INDEP).EQ.0.0) GOTO 30	! parallel to frame this axis
C
C here to consider low end
	   R=P(INDEP,LOW)-CLIPLO(INDEP) ! distance from frame
	   IF(R.GE.0.0) GOTO 20		! inside frame
C
C clip low end
	   P(DEP,LOW)=P(DEP,LOW)-R*D(DEP)/D(INDEP) ! similar triangles
	   P(INDEP,LOW)=CLIPLO(INDEP) ! push onto frame
C
C now lets consider the high end
20	   R=CLIPHI(INDEP)-P(INDEP,HIGH) ! distance from frame
	   IF(R.GE.0.0) GOTO 30		! inside frame
C
C clip high end
	   P(DEP,HIGH)=P(DEP,HIGH)+R*D(DEP)/D(INDEP) ! similar triangles
	   P(INDEP,HIGH)=CLIPHI(INDEP) ! push onto frame
C
30	   CONTINUE			! loop for both axes
C
C copy args back
	X1=P(X,1)
	Y1=P(Y,1)
	X2=P(X,2)
	Y2=P(Y,2)
40	RETURN
C
C here with all invisible
50	GKCLIP=.TRUE.
	GOTO 40
C
	END
