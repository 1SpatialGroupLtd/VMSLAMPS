C
C***********************************************************************
C
C	POLYLINE PRIMITIVE
C	==================
C
	SUBROUTINE	GPL(N,PX,PY)
C
**	MODULE	GPL
**	IDENT	08MR91
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Ron Russell	16-July-1987
C
C POLYLINE
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER N			! number of points
	REAL	PX(N)			! X coords of points in WC
	REAL	PY(N)			! Y coords of points in WC
C
***	COMMON/GKSDAT1/
C
C Functions:
	LOGICAL	GKCLIP			! clips a straight line to
					! rectangular boundaries
C
C Internal variables:
	INTEGER	I			! loop variable
	REAL	PX1,PX2,PY1,PY2		! X and Y coordinates
	REAL	CURX,CURY		! current position
C
	IF (N.LT.2) THEN
	   CALL GKSERR(100,'GPL')	! number of points invalid
	   GOTO 9999
	ENDIF
C
C Is this workstation active?
	IF (.NOT.WSACT) GOTO 100
C
C Make sure transformation is up to date
	IF (UPTRN) CALL GUPTRN
C
C Is everything clipped ?
	IF (CLPALL) GOTO 100
C
C Make sure polyline attributes are up to date
	IF (UPLIN) CALL GUPLIN
C
C unset current position to force move
	CURX = 1E38
	CURY = 1E38
C
C Loop for each segment of this polyline.
	DO 90 I = 1, N-1
	   PX1 = PX(I)
	   PY1 = PY(I)
	   PX2 = PX(I+1)
	   PY2 = PY(I+1)
	   IF (ENCLIP) THEN
	      IF (GKCLIP(PX1,PY1,PX2,PY2)) GOTO 90
	   ENDIF
C transform World Coordinates to Workstation Device Coordinates
	   PX1 = (PX1*SCALEX)+OFFX
	   PX2 = (PX2*SCALEX)+OFFX
	   PY1 = (PY1*SCALEY)+OFFY
	   PY2 = (PY2*SCALEY)+OFFY
	   IF (PX1.NE.CURX.OR.PY1.NE.CURY) CALL AEG_MOVTO(PX1,PY1)
	   CALL AEG_LINTO(PX2,PY2)
	   CURX = PX2		! update current position
	   CURY = PY2
90	CONTINUE
C
	IF (DEFER .EQ. GASAP) CALL GUWK(WKIDS,0)
C
100	CONTINUE
C
9999	RETURN
	END
C
C***********************************************************************
C
C	POLYLINE ATTRIBUTES
C	===================
C
C
	SUBROUTINE	GSPLI(INDEX)
C
**	MODULE	GSPLI
**	IDENT	16JL87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Ron Russell	16-July-1987
C
C SET POLYLINE INDEX
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	INDEX			! polyline index
C
***	COMMON/GKSDAT1/
C
	IF (INDEX .LT. 1 .OR. INDEX .GT. PLMAX) THEN
	   CALL GKSERR(60,'GSPLI')	! polyline index is invalid
	ELSEIF (INDEX.NE.PLIND) THEN	! if current already, ignore
	   PLIND = INDEX		! set it to current index
	   UPLIN = .TRUE.		! attributes need updating
	ENDIF
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GSLN(LTYPE)
C
**	MODULE	GSLN
**	IDENT	16JL87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Ron Russell	16-July-1987
C
C SET LINETYPE
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	LTYPE			! linetype
C
***	COMMON/GKSDAT1/
C
	IF (LTYPE.LE.0) THEN
	   CALL GKSERR(62,'GSLN')	! linetype .LE. 0
	ELSE
	   ILTYPE = LTYPE
	   UPLIN = .TRUE.		! attributes need updating
	ENDIF
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GSLWSC(LWIDTH)
C
**	MODULE	GSLWSC
**	IDENT	16JL87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Ron Russell	16-July-1987
C
C SET LINEWIDTH SCALE FACTOR
C
	IMPLICIT NONE
C
C Arguments:
	REAL	LWIDTH			! linewidth scale factor
C
***	COMMON/GKSDAT1/
C
	IF (LWIDTH.LE.0.0) THEN
	   CALL GKSERR(90,'GSLWSC')	! width .LE. 0.0
	ELSE
	   ILWID = LWIDTH
CCC	   UPLIN = .TRUE.		! no update, linewidth ignored
	ENDIF
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GSPLCI(COLI)
C
**	MODULE	GSPLCI
**	IDENT	16JL87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Ron Russell	16-July-1987
C
C SET POLYLINE COLOUR INDEX
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	COLI			! polyline colour index
C
***	COMMON/GKSDAT1/
C
	IF (COLI.LT.0) THEN
	   CALL GKSERR(85,'GSPLCI')	! colour index .LT. 0
	ELSE
	   ICOLI = COLI
CCC	   UPLIN = .TRUE.		! no update, colour ignored
	ENDIF
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GSPLR(WKID,PLI,LTYPE,LWIDTH,COLI)
C
**	MODULE	GSPLR
**	IDENT	16JL87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Ron Russell	16-July-1987
C
C SET POLYLINE REPRESENTATION
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	WKID			! workstation-identifier
	INTEGER	PLI			! polyline index
	INTEGER	LTYPE			! linetype
	REAL	LWIDTH			! line width scale factor
	INTEGER	COLI			! colour index
C
***	COMMON/GKSDAT1/
C
	INTEGER	ERR
C
	ERR = 0
	IF (PLI .LT. 1 .OR. PLI .GT. PLMAX ) THEN
	   ERR = 60			! polyine index is invalid
	ELSEIF (LTYPE .LE. 0) THEN
	   ERR = 62			! linetype is invalid
	ELSEIF (LWIDTH .LE. 0) THEN
	   ERR = 90			! width .LE. 0.0
	ELSEIF (COLI .LT. 0 ) THEN
	   ERR = 86			! colour index is invalid
	ELSE
	   PLTYPE(PLI) = LTYPE		! store values in bundle table
	   PLWDTH(PLI) = LWIDTH
	   PLCOL(PLI)  = COLI
	   IF (PLI .EQ. PLIND) UPLIN = .TRUE.	! apply if current
	ENDIF
	IF (ERR.NE.0) CALL GKSERR(ERR,'GSPLR')
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE GQPLF(
     &		WTYPE,N,ERRIND,NLT,LT,NLW,NOMLW,RLWMIN,RLWMAX,NPPLI)
C
***	MODULE	GQPLF
**	IDENT	16JL87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Ron Russell	16-July-1987
C
C INQUIRE POLYLINE FACILITIES
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	WTYPE		! Workstation type
	INTEGER	N		! list element requested
	INTEGER	ERRIND		! Error indicator
	INTEGER NLT		! number of available linetypes
	INTEGER	LT		! N'th element of available linetypes
	INTEGER NLW		! number of available linewidths
	REAL	NOMLW		! nominal linewidth (DC)
	REAL	RLWMIN,RLWMAX	! range of linewidths
	INTEGER	NPPLI		! number of predefined polyline indices
C
***	COMMON/GKSDAT1/		! GKS data structures
C
	ERRIND = 0		! no error indication
C
	NLT = 4			! number of linetypes
	LT = N			! just return N as N'th type
	NLW = 0			! continuous range of linewidths
	NOMLW = GNOMLW		! nominal linewidth in DC
	RLWMIN = NOMLW		! also the minimum
	RLWMAX = 10.0*NOMLW	! rather arbitrary maximum
	NPPLI = PLMAX
C
	RETURN
	END
C
C
C***********************************************************************
C
	SUBROUTINE GQLN(ERRIND,LTYPE)
C
***	MODULE	GQLN
**	IDENT	16JL87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Ron Russell	16-July-1987
C
C INQUIRE LINETYPE
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	ERRIND		! Error indicator
	INTEGER	LTYPE		! line type
C
***	COMMON/GKSDAT1/		! GKS data structures
C
	ERRIND = 0		! no error indication
	LTYPE = ILTYPE
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE GQLWSC(ERRIND,LWIDTH)
C
***	MODULE	GQLWSC
**	IDENT	16JL87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Ron Russell	16-July-1987
C
C INQUIRE LINE WIDTH SCALE FACTOR
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	ERRIND		! Error indicator
	REAL	LWIDTH		! line width scale factor
C
***	COMMON/GKSDAT1/		! GKS data structures
C
	ERRIND = 0		! no error indication
	LWIDTH = ILWID
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE GQPLCI(ERRIND,COLI)
C
***	MODULE	GQPLCI
**	IDENT	16JL87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Ron Russell	16-July-1987
C
C INQUIRE POLYLINE COLOUR INDEX
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	ERRIND		! Error indicator
	INTEGER	COLI		! polyline colour index
C
***	COMMON/GKSDAT1/		! GKS data structures
C
	ERRIND = 0		! no error indication
	COLI = ICOLI
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE GUPLIN
C
***	MODULE	GUPLIN
**	IDENT	16JL87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Ron Russell	16-July-1987
C
C Update the polyline attributes
C
	IMPLICIT NONE
C
C local variables
	INTEGER	NLTYPE,NMTYPE
	LOGICAL*1	NTANG,NMAG
C
***	COMMON/GKSDAT1/		! GKS data structures
C
	IF (GASF(1).EQ.GBUNDL) THEN
	   NLTYPE = PLTYPE(PLIND)
	ELSE
	   NLTYPE = ILTYPE
	ENDIF
C
C linewidth scale factor, and colour are ignored
C
	IF (CLTYPE.NE.NLTYPE.OR.NLTYPE.EQ.1000) THEN
	   CLTYPE = NLTYPE	! set current linetype
	   CALL AEG_LTYPE(CLTYPE)
	   UPFA = .TRUE.	! may clobber fill area linetype
	ENDIF
C
C set up correct polyline tracked symbol
C split 'marker type' into components
C
	NMTYPE = LSYM-1		! from GESC(1...) but start at 0
	NMAG = .FALSE.
	IF (NMTYPE.GE.1000) THEN
	   NMAG = .TRUE.
	   NMTYPE = MOD(NMTYPE,1000)
	ENDIF
	NTANG = .FALSE.
	IF (NMTYPE.GE.100) THEN
	   NTANG = .TRUE.
	   NMTYPE = MOD(NMTYPE,100)
	ENDIF
C
	IF ((CMAG.NEQV.NMAG).OR.CMTYPE.NE.NMTYPE) THEN
	   CMAG = NMAG		! set magnification
	   CMTYPE = NMTYPE	! set marker type
	   CALL AEG_SYMBOL(CMTYPE)	! symbols start at 0
	   UPMAR = .TRUE.	! may clobber polymarker
	ENDIF
C
C set up correct symbol angle, or tangential control
C
	IF ((CTANG.NEQV.NTANG).OR.CANG.NE.SANG) THEN
	   CTANG = NTANG
	   CANG = SANG
	   IF (CTANG) THEN
	      CALL AEG_TANG
	   ELSE
	      CALL AEG_SANG(CANG)
	   ENDIF
	   UPMAR = .TRUE.	! may clobber polymarker
	ENDIF
C
	UPLIN = .FALSE.		! polyline now up to date
	RETURN
	END
C
C***********************************************************************
C
	INTEGER FUNCTION LSG_SET_PATTERN(LEN,MAJ,MIN,MAREP,MIREP,FLG)
C
***	MODULE	LSG_SET_PATTERN
***	IDENT	24JA90
C
	IMPLICIT NONE
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author  C C Brunt
C
C Created 					CCB	23-Jan-1990
C
C Set up a hardware pattern.
C Return non-zero index for GSLN if hardware pattern set up, 0 if not, in
C which case it will be drawn by software.
C
***	PARAMETER/AEG/
***	COMMON/AEG/
***	COMMON/GKSDAT1/
C
C args
	REAL	LEN		! overall length
	REAL	MAJ		! major dash length
	REAL	MIN		! minor dash length
	INTEGER	MAREP		! major repeat count
	INTEGER	MIREP		! minor repeat count
	INTEGER	FLG		! pattern flags
C
	INTEGER	MAXPAT
	PARAMETER (MAXPAT=16)
	INTEGER	REPS(2,MAXPAT)
	DATA	REPS/1,0, 0,1, 1,1, 1,2, 1,3, 2,1, 2,2, 2,3,
     &		     3,3, 1,4, 1,5, 2,4, 4,1, 4,2, 3,1, 3,2/
C
C workspace
	INTEGER	LMAJ		! major dash length
	INTEGER	LMIN		! minor dash length
	INTEGER	LMAREP		! major repeat count
	INTEGER	LMIREP		! minor repeat count
C
	INTEGER	I
	INTEGER	PAT
	INTEGER	NGAPS
	REAL	GAP
C
	LSG_SET_PATTERN = 0
C
C see if the pattern is one we can do
	LMAREP = MAREP+1
	LMIREP = MIREP+1
C
C if one peck has zero length, then if the other is repeated we cannot
C do the pattern, since it then has unequal gaps
	IF (MAJ.EQ.0.0) THEN
	   IF (LMIREP.GT.1) GOTO 9999
	   LMAREP = 0
	ENDIF
	IF (MIN.EQ.0.0) THEN
	   IF (LMAREP.GT.1) GOTO 9999
	   LMIREP = 0
	ENDIF
C
	DO 10 I=1,MAXPAT
	   IF (LMAREP.EQ.REPS(1,I).AND.LMIREP.EQ.REPS(2,I)) GOTO 20
10	CONTINUE
	GOTO 9999
C
20	AEG_PECK = I
	AEG_PECKC = FLG.AND.1		! continue through points or not
	LSG_SET_PATTERN = 1000		! flag value
C
C calculate gap size (length of free space/no. of gaps)
	GAP = (LEN-MAJ*LMAREP-MIN*LMIREP)/(LMAREP+LMIREP)
C
C Make sure transformation is up to date
	IF (UPTRN) CALL GUPTRN
C
C transform the sizes to AEG counts
	AEG_PECK1 = MAX( 1, NINT( MAJ*SCALEX*AEG_CPM ) )
	AEG_PECK2 = MAX( 1, NINT( MIN*SCALEX*AEG_CPM ) )
	AEG_GAP =   MAX( 1, NINT( GAP*SCALEX*AEG_CPM ) )
C
9999	RETURN
	END
