;
; * This file is part of the LAMPS distribution, released as a software
; * preservation project to archive digital history for future historians.
; * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
; *
; * Timestamp of this file for the 2002 release was: 1983-12-06 11:57:06.000000000 +0000
; *
; * This program is free software: you can redistribute it and/or modify
; * it under the terms of the GNU General Public License as published by
; * the Free Software Foundation, version 3.
; *
; * This program is distributed in the hope that it will be useful, but
; * WITHOUT ANY WARRANTY; without even the implied warranty of
; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
; * General Public License for more details.
; *
; * You should have received a copy of the GNU General Public License
; * along with this program. If not, see http://www.gnu.org/licenses/.
;
; MACRO representation of Tektronix library vector generator workspace

	.PSECT	TKVW, D,OVR,GBL

TKCODC:	.BLKB	5		; temporary array for coding positions
;	.IF NE	LCD14
	.BLKB	1		; extra byte for extra bits on big screen
;	.ENDC
TKGRAF:	.BYTE	0		;  0 => in alpha mode
				; -1 => in graph mode
THBRT:	.BLKB	1		;  0 => this vector 'bright'
				; -1 => this vector 'dark'
				; used in deciding whether to suppress (0,0) move
LSTBRT:	.BLKB	1		; ditto, re. last vector
	.EVEN
; essential that the next four are contiguous
TKCBUF:	.WORD	TKBUF1		; 'current buffer' pointer
TKBLIM:	.WORD	TKBUF1+2+TKBFSZ-14.	; current buffer limit
TKBPTR:	.WORD	TKBUF1+2	; pointer into buffer
TKNEFN:	.BLKW	1		; output efn to use (set up in TKINIT)

TKOEFS:	.BLKW	1		; sum of output EFNs (for switching)
TKOSEL:	.BLKB	1		; last output mode selected
	.EVEN

; positions, etc
TKSAVX:	.BLKW	2		; last graphic position
TKSAVY:	.BLKW	2
TKCENX:	.BLKW	2		; currently used screen centres
TKCENY:	.BLKW	2		; may be adjusted by TKOFF

BSCENX:	.BLKW	2		; actual screen centres
BSCENY:	.BLKW	2

MAXOFF:	.FLT2	10.		; extreme offsets from screen centre
MINOFF:	.FLT2	-10.		; symbols on VAX rather than constants

; buffers and immediately associated information

; buffer 1
	.WORD	TKISB1		; pointer to IOSB
TKBUF1:	.WORD	0		; for active efn
	.BLKB	TKBFSZ		; actual buffer

; buffer 2
	.WORD	TKISB2		; pointer to IOSB
TKBUF2:	.WORD	0		; for active efn
	.BLKB	TKBFSZ		; actual buffer

TKISB1:	.BLKW	2		; i/o
TKISB2:	.BLKW	2		; status blocks

; flagword and associated offsets
FLAGW:	.WORD	0

IFTHK	=	^B1		; =1 if 'thick line diversion' in use
TUPTD	=	^B10		; =1 if moves up to date
RFOLO	=	^B100		; =0 to suppress next movement at RFSWB
THKD	=	^B1000		; =1 to complete thick diversion
THKSAV	=	^B10000		; =1 (while in refresh mode) if IFTHK at entry to refresh mode
NEWSEG	=	^B100000	; =1 if last call to GENSEG generated new segment
FLSHNG	=	^B1000000	; =1 if suppressing 'space in buffer' checking in $FLUSH
TRANSPAR=	^B10000000	; =1 if output of Tek chars is to be transparent (RMTOC)
LRGCUR	=	^B100000000	; =1 if large cursor selected (CURSEL(1))
FIRSTSEG=	^B1000000000	; =1 if generating first seg of refresh picture

	.EVEN

	.MCALL	QIO$

QO.DPB:	QIO$	IO.WAL		; DPB for output transfers (extensively patched)

; patching addresses
QO.LUN = QO.DPB+Q.IOLU		; LUN to use (set up in TKINIT, or something)
QO.EFN = QO.DPB+Q.IOEF		; EFN to use
QO.ISB = QO.DPB+Q.IOSB		; io status block
QO.BUF = QO.DPB+Q.IOPL		; buffer
QO.LEN = QO.BUF+2		; length

	.PSECT
