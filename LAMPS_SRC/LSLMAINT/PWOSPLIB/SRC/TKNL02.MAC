;
; * This file is part of the LAMPS distribution, released as a software
; * preservation project to archive digital history for future historians.
; * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
; *
; * Timestamp of this file for the 2002 release was: 1983-12-08 17:09:08.000000000 +0000
; *
; * This program is free software: you can redistribute it and/or modify
; * it under the terms of the GNU General Public License as published by
; * the Free Software Foundation, version 3.
; *
; * This program is distributed in the hope that it will be useful, but
; * WITHOUT ANY WARRANTY; without even the implied warranty of
; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
; * General Public License for more details.
; *
; * You should have received a copy of the GNU General Public License
; * along with this program. If not, see http://www.gnu.org/licenses/.
;
	.TITLE	TKNL
	.IDENT	/08DE83/
	.ENABL	LC

; Copyright Laser-Scan Laboratories Ltd., Cambridge, England
; Author  Clarke Brunt from originals by R. Fairbairns,
; from originals by P.A. Woodsford, P. Cross, et al.

; T e k t r o n i x   l i b r a r y  -  n u l l   r o u t i n e s

TKBELL::			; bell for micro SB11
LDINPM::			; user access - integers (none sensible)
INTENS::			; set intensity
FLEVEL::			; set focus
PCFRAM::			; photochromic movement
HRDMOD::			; film stage selection
DIFRAM::			; diazo operation
CURSIZ::			; set cursor size
TKCSRD::			; read Tek cursor
CSMOV::				; refresh cursor control
$RFSCR::			; refresh scrub
TKRTS::	RTS	PC		; everybody's no-op



;   -  g e n e r a l  /  s e r v i c e   r o u t i n e s

; save registers 0-2

; call	JSR  R2, $SAV02
; restore on subroutine exit assured

$SAV02:: MOV	R1, -(SP)
	MOV	R0, -(SP)
	JSR	PC, @R2		; co-routine call back to caller
	MOV	(SP)+, R0	; restore registers
	MOV	(SP)+, R1
	MOV	(SP)+, R2
	RTS	PC		; return through caller's original link


; set up FPP for entry to library

; to be called (JSR  PC, FTNFPU)
;  as first thing touching the stack in any FORTRAN-called subroutine

; destroys R0

FTNFPU:: MOV	(SP)+, R0
	STFPS	-(SP)
	LDFPS	#1400		; standard fpp status
	MOV	R5, -(SP)	; (not really necessary for RSX?)
	TST	(R5)+		; point to arg pointers
	JSR	PC, @R0		; co-routine call back to calling subroutine

; co-routine return from original caller
	MOV	(SP)+, R5	; recover caller's arg ptr
	LDFPS	(SP)+		; restore his FPP status
	RTS	PC		; back to original link

	.END
