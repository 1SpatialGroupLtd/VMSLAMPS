	.IF DF	LCDISP
	.IF NE	LCD14
	.TITLE	LCOD14
	.IFF
	.TITLE	LCOD
	.ENDC
	.IFF
	.TITLE	TKOD
	.ENDC
	.IDENT	/04JN84/
	.ENABL	LC

; Copyright Laser-Scan Laboratories Ltd., Cambridge, England
; Author  Clarke Brunt from originals by R. Fairbairns,
;	  from originals by P.A. Woodsford, P. Cross, et al.


; T e k t r o n i x   4 0 1 x   g r a p h i c   l i b r a r y   o d d m e n t s


; macros used

	.MCALL	ALUN$S, DIR$, WTSE$S, MRKT$, ASTX$S, DSAR$S, ENAR$S

; set constants for the screen size, and counts per cm
	.IF DF LCDISP
	.IF NE LCD14
TKEXT:	.FLT2	30.0
	.FLT2	30.0
TRANX:	.FLT2	400.0
	.FLT2	400.0
	.IFF
TKEXT:	.FLT2	36.40455
	.FLT2	36.40455
TRANX:	.FLT2	112.485941
	.FLT2	112.485941
	.ENDC
	.IFF
TKEXT:	.FLT2	36.40455
	.FLT2	27.30119
TRANX:	.FLT2	112.485941
	.FLT2	112.485941
	.ENDC


; User access to variables

; LDFPPM( ISW, F1, F2, F3 ) as HRD manual

; meaningless values returned zero

; extra entry:
;  ISW=4: F1:=?, F2,F3:=screen extent

LDFPPM:: JSR	PC, FTNFPU
$LDFPP:: MOV	@(R5)+, R0	; ISW
	DEC	R0
	BEQ	1$
	DEC	R0
	BEQ	2$
	DEC	R0
	BEQ	3$

; not 1, 2, or 3 - treat as 4
; screen extents in default user units (cm)
	MOV	#TKEXT, R0
	BR	4$

; 1 - intensity, UX, UY
1$:	MOV	#TKRUX, R0
4$:	CLRF	F0
	BR	5$

; 2 - scale, OX, OY
2$:	LDF	TKSCF, F0	
	MOV	#TKRUOX, R0
5$:	LDF	(R0)+, F1
	LDF	(R0), F3
	BR	6$

; 3 - F1, F2, F3 - totally meaningless!
3$:	CLRF	F0
	CLRF	F1
	CLRF	F3
6$:	STF	F0, @(R5)+	; return results
	STF	F1, @(R5)+
	STF	F3, @(R5)+
	RTS	PC


; Origin change
; currently supports only '-1' version of LDLIB 'ORIGIN'

ORIGIN:: JSR	PC, FTNFPU
	LDF	@(R5)+, F1
	LDF	@(R5)+, F3
O$RIG:	INCB	TKSCUN		; mark change in origin
	MOV	#TKRDOX, R0
	STF	F1, (R0)+	; preserve display values
	STF	F3, (R0)+
	LDF	TKSCF, F0	; current scale
SETUO:	DIVF	F0, F1
	STF	F1, (R0)+	; user values
	DIVF	F0, F3
	STF	F3, (R0)

; move to new origin
$MOVT0:: CLRF	F1
	CLRF	F3
	JMP	$MOVTO


; Units change

UNITS::	JSR	PC, FTNFPU
	LDF	@(R5)+, F0
U$NIT:	INCB	TKSCUN		; mark change in scale
	STF	F0, TKSCF	; preserve new scale
	MOV	#BASETR, R0	; basic transformation screen cm.->counts
	MOV	#TKTR, R1
	MOV	#4, R2
1$:	LDF	(R0)+, F1	; derive TKTR = BASETR * TKSCF
	MULF	F0, F1
	STF	F1, (R1)+
	SOB	R2, 1$

; adjust user origin to new units
	MOV	#TKRDOX, R0
	LDF	(R0)+, F1
	LDF	(R0)+, F3
	BR	SETUO


; TKOFF(X,Y)	offset the centre of the screen by (X,Y) counts
;		(-10. <= X,Y <= +10.)

TKOFF::	JSR	PC, FTNFPU
	LDF	@(R5)+, F1	; X
	LDF	@(R5)+, F3	; Y

TK$OFF:: CMPF	MINOFF, F1	; force X in range
	CFCC
	BLE	10$
	LDF	MINOFF, F1
10$:	CMPF	MAXOFF, F1
	CFCC
	BGE	20$
	LDF	MAXOFF, F1
20$:	CMPF	MINOFF, F3	; force Y in range
	CFCC
	BLE	30$
	LDF	MINOFF, F3
30$:	CMPF	MAXOFF, F3
	CFCC
	BGE	40$
	LDF	MAXOFF, F3
40$:	ADDF	BSCENX, F1
	STF	F1, TKCENX
	ADDF	BSCENY, F3
	STF	F3, TKCENY
	RTS	PC



; TKSTYL - set Tek line style

; CALL TKSTYL(S) (integer S)

; S = 0 => full line
;   = 1 => dotted
;   = 2 => dot dash
;   = 3 => short dash
;   = 4 => long dash
;   (>4, <0 => ignore call)

TKSTYL:: MOV	@2(R5), R1
	BLT	STRTS		; -ve arg - ignore
	CMP	R1, #T.MXST
	BGT	STRTS		; also if out of range
	CMP	R1, TKCSTY	; same as what we have already?
	BEQ	STRTS		; yes - ignore
	MOV	R1, TKCSTY	; set up new current style
	JSR	R5, $CHKBF
	.WORD	2
	JSR	PC, $TKLCE	; set LCE
	MOV	#TG.STY, R0	; style control bits
	BISB	R1, R0		; add in this style
	JSR	PC, $TKWCH	; and go to appropriate style
STRTS:	RTS	PC


; TKCHSZ - set Tek character size

; CALL TKCHSZ(S) (integer S)

; S=0-3 for max-min sizes
; S<0 or S>3, ignore call

TKCHSZ:: MOV	@2(R5), R1	; arg S
	BLT	SZRTS		; -ve arg - ignore
	CMP	R1, #T.MXCS
	BGT	SZRTS		; or if out of range

; set charactersize to R1
$TKCS1:: CMP	R1, TKCCHS	; current size
	BEQ	SZRTS		; same - ignore
	MOV	R1, TKCCHS	; set up new size
	JSR	R5, $CHKBF
	.WORD	2
	JSR	PC, $TKLCE	; set LCE
	MOV	#TG.CHS, R0	; size control bits
	BISB	R1, R0		; add in size value
	JSR	PC, $TKWCH	; and set appropriate style
SZRTS:	RTS	PC


; TKINIT - initialise display

; CALL TKINIT(SW, LUN, EFN)

; SW coded bitwise:
; d0 =0 => complete drawing, disable, detach display
;    =1 => attach, enable display; decode other bits (such as they are)
; d1 =1 => clear screen
; d2 =1 => set default scale, origin
; d9 =1 => inhibit use of interactive mode

; LUN is the unit number to use (we will assign to device TK0:)
; EFN is the first of five consecutive event flags to use

; (LUN, EFN are ignored if d0=0, or if display already on)

LDINIT::
TKINIT:: JSR	PC, FTNFPU
$TKINI:: MOV	@(R5)+, R0	; SW argument
	BIT	#1, R0	; look at bottom bit
	BNE	10$
	JMP	OFF		; d0=0 - switch off
10$:	MOV	R0, -(SP)	; preserve arg for later
	TSTB	TKENBL		; already on?
	BEQ	15$		; no
	JMP	ONOK		; yes
15$:	MOV	@(R5)+, QO.LUN	; output LUN
	MOV	QO.LUN, QI.LUN	; and input LUN
	MOV	@(R5)+, R0	; first event flag
	MOV	R0, R1
	MOV	R0, TKNEFN	; next output event flag to use
	INC	R0		; other output event flag
	ADD	R0, R1		; form sum of output flags
	MOV	R1, TKOEFS	; for switching
	INC	R0		; hard copy timer flag
	MOV	R0, TKHTEF	; only needed in one place
	INC	R0		; get input flag
	MOVB	R0, QI.EFN	; only needed in one place
	INC	R0		; CSRD event flag
	MOV	R0, CSEFN

; now set up the LUN for our use
	ALUN$S	QI.LUN, TKDESC	; assign LUN to tektronix
	BCC	1$
	BPT			; assignment of LUN failed - forgot to ASN?
1$:	MOV	#IO.ATT, QI.FUN	; prepare to attach
	BIT	#1000, (SP)	; bit 9 set?
	BNE	20$		; yes - no unsolicited input notification
	DSAR$S			; disable AST for the moment
	BIS	#TF.AST!TF.NOT!TF.XCC, QI.FUN	; add extra functions
	CLR	QI.AST		; clear completion AST
	MOV	#UNAST, QI.PL1	; unsolicited input AST (in IP)
	CLR	QI.PL3		; clear other AST
20$:	DIR$	#QI.DPB		; attach the display
	BCC	2$
	BPT			; eh?
2$:	WTSE$S	QI.EFN		; wait for completion
	TSTB	TKIOSB		; any error from attach
	BPL	3$
	BPT			; eh???
; set functions in QI.DPB ready for read
3$:	MOV	#IO.RLB!TF.TMO, QI.FUN	; read with timeout
	MOV	#RDAST, QI.AST	; completion AST
	MOV	#TKIBUF, QI.PL1	; input buffer
	MOV	#1, QI.PL3	; timeout (10 second units!)
	ENAR$S			; enable the unsolicited input AST
	MOVB	#'0, TKOSEL	; make sure TKOSEL is sensible
	MOV	TKCBUF, R0	; pointer to buffer
	TST	(R0)+		; increment by 2
	MOV	R0, TKBPTR	; reset pointer
	JSR	R5, $CHKBF
	.WORD	7
	JSR	R5, $TKW2C
	.BYTE	AS.ESC, '=	; transmit "restart WOSP" seq
	MOV	#'7, R0
	JSR	PC, $TKWCH
	JSR	R5, $TKW2C	; set altescape
	.BYTE	AS.ESC, '=
	JSR 	R5, $TKW2C
	.BYTE	'V, ALT.ESC
	DECB	TKENBL		; Tek now thought to be enabled

; set up base transformation matrix
; set up base screen centres from SCEXTX/Y

	LDCIF	#SCEXTX+1/2, F0
	STF	F0, BSCENX
	LDCIF	#SCEXTY+1/2, F0
	STF	F0, BSCENY
	MOV	#BASETR, R0	; point to base transform matrix
	MOV	#TRANX, R1
	LDF	(R1)+, F0
	STF	F0, (R0)+
	CLRF	(R0)+		; zero off diagonal matrix elements
	CLRF	(R0)+
	LDF	(R1), F0
	STF	F0, (R0)
	

; Tek was already on - ensure not refreshing!
ONOK:	JSR	PC, $ESCE0

; look at other bits
	BIT	#2, (SP)	; does he want screen clear?
	BEQ	1$		; no
	JSR	PC, TKCLR	; yes - do it then
1$:	BIT	#4, (SP)+	; scales and origin?
	BEQ	2$		; no
	LDF	#^F1.0, F0	; default scale
	JSR	PC, U$NIT	; set it
	CLRF	F1		; default origin
	CLRF	F3
	JSR	PC, O$RIG	; set it, too
	CLRF	F1
	CLRF	F3
	JSR	PC, TK$OFF	; use actual screen centre as default

	.IF DF LCDISP
	LDF	#^F1.0, F1	; default carriage spacing
	LDF	F1, F0		; horizontal and equivalent to
	CLRF	F3		; character height of 1cm
	JSR	PC, $CHSIZ
	CLR	R1		; default to font 0
	CLR	R2		; non-italicised
	JSR	PC, $CHFNT
	.ENDC

2$:	RTS	PC


; to switch Tek off

OFF:	TSTB	TKENBL		; already off?
	BEQ	OFFOK		; yes folks
	TST	$REFNG		; refreshing?
	BEQ	1$		; no
	JSR	PC, RFSTOP	; stop refresh
	BR	2$
1$:	JSR	PC, $ESCE0	; restore stored mode
2$:	MOV	#7, R1		; 'reset WOSP' function
	JSR	PC, $ESCEQ	; transmit it
	JSR	PC, $FLUSH	; get last buffer out
	JSR	PC, $WBUFF	; and wait for it
	CLRB	TKENBL		; display off
	CLR	QI.AST		; clear completion AST
	MOV	#IO.KIL, QI.FUN	; kill read request
	DIR$	#QI.DPB
	BCC	3$
	BPT
3$:	WTSE$S	QI.EFN
	MOV	#IO.DET, QI.FUN	; ready to detach
	DIR$	#QI.DPB		; detach display
	BCC 4$
	BPT
4$:	WTSE$S	QI.EFN

OFFOK:	RTS	PC



; TKRASP - fart at the user of a TMU

TKRASP:: JSR	R5, $CHKBF
	.WORD	3
	JSR	R5, $TKW2C
	.BYTE	AS.ESC, '=
	MOV	#'P, R0		; function
	JSR	PC, $TKWCH	; transmit that
	JMP	$FLUSH		; and ensure it gets out immediately


; TKPING - use the TEK's bell

TKPING:: MOVB	TKOSEL, R1	; last $ESCEQ function
	SUB	#'0, R1		; convert from ASCII to binary
	MOVB	R1, -(SP)	; preserve
	BEQ	10$		; already stored mode
	JSR	PC, $ESCE0	; force stored mode
10$:	JSR	R5, $TKW2C
	.BYTE	AS.BEL, AS.GS
	MOVB	(SP)+, R1	; recover original selection
	JSR	PC, $ESCEQ	; and output it
	JMP	$FLUSH		; force it out


; TKCLR - clear the screen

TKCLR::	JSR	R5, $TKW2C	; transmit instruction
	.BYTE	AS.ESC, AS.FF
	JSR	PC, $FLUSH
	CLRB	TKGRAF		; reset => alpha mode
	MOV	TKCLWT, TKHTDP+M.KTMG	; clear screen wait time
	BR	TKWAIT


; TKCOPY - make hard copy of screen

TKCOPY:: JSR	R5, $TKW2C	; transmit instruction
	 .BYTE	AS.ESC, AS.ETB
	JSR	PC, $FLUSH	; ensure it's out
	MOV	TKHCWT, TKHTDP+M.KTMG

TKWAIT:: MOV	TKHTEF, TKHTDP+M.KTEF ; set EFN for mark time
	MOVB	#-1, TKWHDC	; mark waiting
	DIR$	#TKHTDP		; set up mark time
	BCC	10$		; OK
	BPT			; ow
10$:	RTS	PC


; AST for processing end of hard copy wait time

TKCAST:	CLRB	TKWHDC		; not waiting
	TST	(SP)+		; clear event flag number from stack
	ASTX$S			; tara

; set time of hard copy delay

TKCTIM:: MOV	@2(R5),TKHCWT
	RTS	PC

; define DPB for mark time

	.PSECT	$PDATA, D,CON,LCL

TKHTDP:	MRKT$	,,2,TKCAST

TKHCWT:	.WORD	TKDCTI		; hard copy time (seconds)
TKCLWT:	.WORD	TKCLTI		; clear screen time (seconds)
	.PSECT

	.END
