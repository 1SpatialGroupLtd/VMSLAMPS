;
; * This file is part of the LAMPS distribution, released as a software
; * preservation project to archive digital history for future historians.
; * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
; *
; * Timestamp of this file for the 2002 release was: 1983-09-22 12:55:50.000000000 +0100
; *
; * This program is free software: you can redistribute it and/or modify
; * it under the terms of the GNU General Public License as published by
; * the Free Software Foundation, version 3.
; *
; * This program is distributed in the hope that it will be useful, but
; * WITHOUT ANY WARRANTY; without even the implied warranty of
; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
; * General Public License for more details.
; *
; * You should have received a copy of the GNU General Public License
; * along with this program. If not, see http://www.gnu.org/licenses/.
;
	.TITLE	CURVE
	.IDENT	/22SE83/
	.ENABL	LC
;
; to draw a C-curve or a dragon curve
; CALL C(LEVEL,DIRECT,TYPE)
;
C::	JSR	PC, FTNFPU
	MOV	R5, R4			; copy of arg list pointer
	MOV	@(R4)+, -(SP)		; level
	MOV	SP, R5			; arg pointer for call
	MOV	@(R4)+, -(SP)		; direction
	MOV	#1, R0
	MOV	R0, -(SP)		; type for call
	TST	@(R4)+			; C if zero, otherwise dragon
	BEQ	5$
	NEG	R0
5$:	MOV	R0, DRAG		; +1 for C, -1 for dragon
	JSR	PC, C$
	ADD	#6, SP			; remove args
	RTS	PC

; Recursive routine expects arguments to be on stack
; pushed in the order LEVEL, DIRECTION, TYPE
; R5 must point to LEVEL (ie R5 = SP + 6)
C$:	MOV	(R5), R0		; level
	MOV	-(R5), R1		; direction
	DEC	R0			; decrement level
	BEQ	10$			; if zero go draw line
	MOV	R0, -(SP)		; new level
	ADD	-(R5), R1		; add type to direction
	MOV	SP, R5			; new arg pointer
	MOV	R1, -(SP)		; new direction
	MOV	#1, -(SP)		; new type
	JSR	PC, C$			; recursive call
	ADD	#4, SP			; remove two args, leave level
	MOV	SP, R5			; new arg pointer
	MOV	6(R5), R1		; old direction
	SUB	4(R5), R1		; subtract old type
	MOV	R1, -(SP)		; new direction
	MOV	DRAG, -(SP)		; new type
	JSR	PC, C$			; recursive call
	ADD	#6, SP			; remove args
	RTS	PC

10$:	BIC	#177770, R1		; truncate to 3 bits
	ASH	#2, R1			; multiply by 4
	LDF	XOFF(R1), F1
	LDF	YOFF(R1), F3
	JSR	PC, $LINBY
15$:	RTS	PC

	.PSECT	$OFFS, D,CON,LCL
XOFF:	.FLT2	1.0
	.FLT2	1.0
	.FLT2	0.0
	.FLT2	-1.0
	.FLT2	-1.0
	.FLT2	-1.0
	.FLT2	0.0
	.FLT2	1.0

YOFF:	.FLT2	0.0
	.FLT2	1.0
	.FLT2	1.0
	.FLT2	1.0
	.FLT2	0.0
	.FLT2	-1.0
	.FLT2	-1.0
	.FLT2	-1.0

DRAG:	.BLKB	1

.PSECT

.END
