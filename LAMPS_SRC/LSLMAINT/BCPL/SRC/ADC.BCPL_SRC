 //*
 //* This file is part of the LAMPS distribution, released as a software
 //* preservation project to archive digital history for future historians.
 //* Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
 //*
 //* Timestamp of this file for the 2002 release was: 1986-10-16 16:48:00.000000000 +0100
 //*
 //* This program is free software: you can redistribute it and/or modify
 //* it under the terms of the GNU General Public License as published by
 //* the Free Software Foundation, version 3.
 //*
 //* This program is distributed in the hope that it will be useful, but
 //* WITHOUT ANY WARRANTY; without even the implied warranty of
 //* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 //* General Public License for more details.
 //*
 //* You should have received a copy of the GNU General Public License
 //* along with this program. If not, see http://www.gnu.org/licenses/.
 //*
***	MODULE ADC
***	IDENT 16OC86

// BCPL program to add common blocks to FORTRAN sources,
//  and otherwise generally prepare them for listing or compilation
//	Conditional stuff added M.C.Fulford 27/iii/79
//	VAX/PDP ADC-conditionalised source RF 7.i.80
//	Logical expressions in conditionals	MCF Jan 80
//	Bug in /CU mended			MCF Jul 80
//	Version numbering/'*' substitution	RF  Apr 81

**	IF VAX
GET "ADC"
GET "BCPLDIR:RMS"
GET "LIBHDR"
**	IFF
GET "[1,1]RSXHDR"
GET "ADCHDR"
**	ENDC

LET START() BE

$(  LET ISTR=VEC MAXPACKEDTITLE AND OSTR=VEC MAXPACKEDTITLE 
    LET UVEC=VEC MAXTITLEBIT AND DVEC=VEC MAXTITLEBIT
    LET CUVEC=VEC MAXTITLEBIT AND CDVEC=VEC MAXTITLEBIT AND IDTVEC=VEC MAXTITLEBIT
    LET IVEC=VEC MAXIF AND TVEC=VEC MAXIF AND SYVEC=VEC MAXSYM
    LET NVEC=VEC MAXNAME AND CMLVEC=VEC GIANT
    LET IFILE,OFILE,CMLFILE=-1,-1,-1
    LET I,O=NOODLE,NOODLE

    LET SWTAB=TABLE 2, S.COM, -1, -1,
	2, S.LIB, -1, -1,
	1, S.LN,  -1,
	2, S.SP,  -1, -1,
	2, S.AP,  -1, -1,
**	IF VAX
	1, S.CU,  -1,
	1, S.CD,  -1,
**	IFF
	2, S.CU,  -1, -1,
**	ENDC
	2, S.DE,  -1, -1,
	3, S.TR,  -1, -1, -1,
	2, S.NUL, -1, -1,
**	IF VAX
	2, S.IN,  -1, -1,
**	ENDC
	3, S.THR, -1, -1, -1,
	2, S.LL,  -1, -1,
	2, S.AST, -1, -1,
	2, S.TRUETAB, -1, -1,
	0

    LET SFTAB=TABLE	1, F.IF,  -1,
			1, F.UNL, -1,
			1, F.END, -1,
			1, F.COM, -1,
			1, F.IFF, -1,
			1, F.IFT, -1,
			1, F.FTF, -1,
			1, F.PAR, -1,
			1, F.DEF, -1,
			1, F.SET, -1,
			1, F.INC, -1,
			1, F.DAT, -1,
			1, F.ID,  -1,
			2, F.MOD, -1, -1,
			1, F.AST, -1,
			0

// set up global vectors
    IFSTACK:=IVEC
    TITSTACK:=TVEC
    SYMBOLTAB:=SYVEC
    NAMETAB:=NVEC
    UICVEC:=UVEC
    DISCVEC:=DVEC
    CUICVEC:=CUVEC
**	IF VAX
    CDISCVEC:=CDVEC
**	ENDC
    IDETITLE:=IDTVEC

    // initialise switch table
**	IF VAX
    SWITCHTAB := INITTAB(SWTAB, "COM", "CO", "LIB", "LI", "LN", "SP", "SPOOL",
**	IFF
    SWITCHTAB:=SWTAB
    INITTAB(SWITCHTAB, "COM", "CO", "LIB", "LI", "LN", "SP", "SPOOL",
**	ENDC
		       "AP", "APPEND", "CU", "CD", "DE", "DEBUG",
		       "TR", "TRUTH", "TRUTHS", "MA", "MAIN",
**			IF VAX
		       "IN", "ZE",
**			ENDC
		       "TH", "THR", "THREAD", "LL", "LINL", "AS", "ST",
		       "TRUETABS", "TT")

    // initialise special function table
**	IF VAX
    STARTAB := INITTAB(SFTAB,"IF","UNLESS","ENDC","COMMON","IFF","IFT","IFTF",
**	IFF
    STARTAB:=SFTAB
    INITTAB(STARTAB,"IF","UNLESS","ENDC","COMMON","IFF","IFT","IFTF",
**	ENDC
		    "PARAMETER","DEFPAR","SETVAR","INCLUDE","DATA",
		    "IDENT","MODULE","END","ASTERISK")

    // library control
    RDCHSAV:=RDCH
    WRCHSAV:=WRCH

    // default line length for FORTRAN
    LINELENGTH:=73

    // general switches
    COM,LN,SLCOM,DEBUG:=FALSE,FALSE,FALSE,FALSE
**	IF VAX
    INITVECS:=TRUE
**	ENDC
    TRUETABS := FALSE
    ASTERISK:='**'
    IDFILE:=-1

**	IF VAX
    IF INITVECS DO // initialise vectors, truth tables, etc
    $(	INITVECS:=FALSE
	CDISCVECL:=-1
**	ENDC
	UICVECL,DISCVECL,CUICVECL:=-1,-1,-1
	IFPTR:=0		// clear conditional stack
	COPYING:=TRUE
	SYMPTR:=0		// and symbol tables
	SYMBOLTAB!SYMPTR:=0
	NAMEPTR:=0
**	IF VAX
	$)
**	ENDC

    IF IFILE>0 DO
    $(	SELECTINPUT(IFILE)
	ENDREAD()
	$)

    IF OFILE>0 DO
    $(	SELECTOUTPUT(OFILE)
**	UNLESS VAX
	TEST SPOOL
	THEN SPOOLOUTPUT()
	OR   ENDWRITE()
**	IFT
	IF SPOOL DO
	$(  SETDEF(R.ACCESS, RV.DLT)
	    SETDEF(R.ACCESS, RV.SPL)
	    $)
	ENDWRITE()
**	ENDC
	$)

    IF IDFILE>0 DO
    $(	SELECTOUTPUT(IDFILE)
	ENDWRITE()
	$)

    IFILE,OFILE,IDFILE:=-1,-1,-1
**	UNLESS VAX
    SPOOL:=FALSE
**	ENDC

    COM,LN,ANOTHER,THREAD:=FALSE,FALSE,FALSE,TRUE

    SELECTOUTPUT(SYSOUT)

**	IF VAX
    IF CMLFILE<0 DO
    $(	CMLFILE := GETCOMMAND("ADC requests your urgent attention> ")
	CMLBUFFER := CMLVEC
	UNPACKSTRING ( CMLFILE, CMLBUFFER )
	CMLFILE, CMLPTR := 0, 0
	RDCH := RDCHCML
	$)
    O:=READTITLE(OSTR,'=',".FOR",FALSE)
**	IFF
    IF CMLFILE<0 DO CMLFILE:=FINDCML("ADC")
    IF CMLFILE<0 DO
    $(	WRITES("No CML available*N")
	FINISH
	$)
    SELECTINPUT(CMLFILE)
    O:=READTITLE(OSTR,'=',".FTN",FALSE)
**	ENDC

**	IF VAX
    TEST APPEND THEN
    $(	SETDEF(R.ACCESS, RV.WRT)
	SETDEF(R.ACCESS, RV.EOF)
	OFILE := FINDINPUT(OSTR)
	$)
    OR  OFILE := FINDOUTPUT(OSTR)
    IDEAPPEND := APPEND		// remember, for when we open IDENT file,
				//  whether we APPENDed here
**	IFF
    OFILE:=FINDOUTPUT(OSTR)
**	ENDC

    IF OFILE<0 $( MOAN(OSTR); FINISH $)
    SELECTOUTPUT(OFILE)
    FORMIDETITLE()		// save IDENT title

    APPEND:=FALSE; UICVECL,DISCVECL:=-1,-1
    $(  TRUTHFILE:=FALSE
        I:=READTITLE(ISTR,'*N',".SRC",FALSE)
        IF I \/ O DO // complain about input syntax errors
        $(  SELECTOUTPUT(SYSOUT); WRITES("Command syntax error*N")
**	UNLESS VAX
	    ENDREAD(); CMLFILE:=-1
**	ENDC
	    FINISH
	    $)

        IFILE:=FINDINPUT(ISTR)
        IF IFILE<0 $( SELECTOUTPUT(SYSOUT); MOAN(ISTR); GOTO SKIPFILE $)
        SELECTINPUT(IFILE)

        // read in truth file
        IF TRUTHFILE DO
	$(  // first ensure (on VAX) we've got the right RDCH
**	IF VAX
	    RDCH := RDCHSAV
	    IF READTRUTHS(IFILE, ISTR)<0 DO FINISH
	    RDCH := RDCHCML
**	IFF
	    READTRUTHS(IFILE, ISTR)
	    SELECTINPUT(CMLFILE)
**	ENDC
	    $)

        $) REPEATWHILE TRUTHFILE
NXT:

**	IF VAX
    RDCH := RDCHSAV
**	ENDC
    COPYSTREAM('*S', ISTR)

SKIPFILE: // loop to skip a requested input file that we can't open

//  SELECTOUTPUT(SYSOUT)
//  WRCH(ANOTHER->'+','-'); WRITES("still another*N")

    UNLESS ANOTHER FINISH

    SELECTOUTPUT(SYSOUT)
**	IF VAX
    RDCH := RDCHCML
    IF READTITLE(ISTR, '*N', ".SRC", FALSE)
    $(	WRITES("What other files?*N"); FINISH $)
    RDCH := RDCHSAV
**	IFF
    SELECTINPUT(CMLFILE)
    IF READTITLE(ISTR, '*N', ".SRC", FALSE)
    $(	WRITES("What other files?*N"); FINISH $)
**	ENDC

    IFILE:=FINDINPUT(ISTR)
    IF IFILE<0 $( MOAN(ISTR); GOTO SKIPFILE $)
    SELECTINPUT(IFILE)

    SELECTOUTPUT(OFILE)
    WRCH(LN->'*P','*N')
    GOTO NXT

    $)

AND COPYSTREAM(LINENOFILLER, FILETITLE) BE

$(  LET LINENO,LINEW=1,NOODLE
    AND CH=RDCH() AND CHPTR=NOODLE AND TIT,CIN,STARFUN=NOODLE,NOODLE,NOODLE
    AND NEST=VEC MAXPACKEDTITLE AND NESTFILE=NOODLE
    AND NESTED=(LINENOFILLER='**')
    AND IDENTIFICN=VEC MAXPACKEDMODNAME AND MODNAME=VEC MAXPACKEDMODNAME
    AND HADIDENT,HADMODULE=FALSE,FALSE
    AND TRCOM=NESTED->SLCOM,COM
    AND SAVO=OUTPUT()
    AND IFSAVE = IFPTR
    LET CONTEXT(L,F) BE WRITEF("in line %N of file %S*N",L,F)

    WHILE CH='*N' \/ ((CH='C' \/ CH='c' \/ ((CH='D' \/ CH='d') & \DEBUG)) & \TRCOM) DO
    $(	SKIPLINE(CH)
	LINENO:=LINENO+1
	CH:=RDCH()
	IF CH=ENDSTREAMCH DO
	$(  SELECTOUTPUT(SYSOUT)
	    WRITEF("File *'%S*' contains no data*N", FILETITLE)
	    GOTO ABEX
	    $)
	$)

  $( // REPEAT block obeyed once per line

RSW: TEST CH=ASTERISK // because loony BCPL doesn't allow CASE of a variable
     THEN $(    IF LN DO
		$(  WRLN(LINENO, LINENOFILLER)
		    WRCH(ASTERISK)
		    RDCH := RDCHECH
		    $)

		// skip line introduction
		WHILE CH=ASTERISK DO CH:=RDCH()

		// read special function name
		CH:=FORMNAME(NEST, CH, MAXPACKEDTITLE) 

		TEST LOOKUP(NEST, STARTAB)
		THEN STARFUN:=LOOKUPVAL // in table
		ELSE STARFUN:=F.UNKNWN // unknown
		SWITCHON STARFUN INTO $(

		// ** INCLUDE, PARAMETER, or COMMON
		CASE F.INC:
		CASE F.PAR:
		CASE F.COM: UNLESS COPYING & THREAD DO
			       // avoid solemnly copying through a file,
			       // ignoring it all, or threading a file what
			       // didn't ought to be
			    $(	IF COPYING DO
				$(  // re-output this line in standard form
				    RDCH:=RDCHECH
				    WRITEF("%C%C%C*T%S",
					ASTERISK,ASTERISK,ASTERISK,
					VALOF SWITCHON STARFUN INTO $(
					CASE F.COM:	RESULTIS "COMMON/"
					CASE F.PAR:	RESULTIS "PARAMETER/"
					DEFAULT:
					CASE F.INC:	RESULTIS "INCLUDE/"
							$) )
				    $)
				SKIPLINE(CH) // ignore the rest of this line
				RDCH:=RDCHSAV
				ENDCASE
				$)

			    CIN:=INPUT()

			    // did directive terminate with '/'?
			    TEST CH='/'
			    THEN TIT:=READTITLE(NEST, '/',
				VALOF SWITCHON STARFUN INTO $(
				CASE F.COM:
**						IF VAX
						RESULTIS ".CMN"
**						IFF
						RESULTIS ".COM"
**						ENDC
				CASE F.PAR:	RESULTIS ".PAR"
				DEFAULT:
				CASE F.INC:	RESULTIS ".SRC"
						$),
				STARFUN NE F.INC)
			    OR   TIT:=TRUE

			    // skip to next end of line
			    SKIPLINE(CH)
			    RDCH:=RDCHSAV

			    IF TIT DO // diagnose read common title failure
			    $(	SELECTOUTPUT(SYSOUT)
				WRITES("Bad common block name ")
				GOTO WRLF
				$)

			    NESTFILE:=FINDINPUT(NEST)
			    IF NESTFILE<0 DO // report absence of common block
			    $(	SELECTOUTPUT(SYSOUT)
				MOAN(NEST)
				GOTO WRLF
				$)
			    SELECTINPUT(NESTFILE)
			    COPYSTREAM('**', NEST)

			    SELECTINPUT(CIN)
			    ENDCASE

		// error case
		CASE F.UNKNWN:
		DEFAULT:    SELECTOUTPUT(SYSOUT)
			    PACKSTRING(NEST,NEST)
			    WRITEF("I don*'t recognise *'%S*' ",NEST)
			    GOTO WRLF

		// ** DATA, DEFPAR, or SETVAR
		CASE F.DAT:
		CASE F.DEF:
		CASE F.SET: CH:=FORMNAME(NEST, CH, MAXPACKEDTITLE)
			    SKIPLINE(CH)
			    TIT:=LOOKUP(NEST,SYMBOLTAB)
			    PACKSTRING(NEST,NEST)
			    UNLESS TIT DO
			    $(	SELECTOUTPUT(SYSOUT)
				WRITEF("Undefined variable %S ",NEST)
				CONTEXT(LINENO, FILETITLE)
				LOOKUPVAL:=0; SELECTOUTPUT(SAVO)
				$)
			    UNLESS COPYING ENDCASE
			    IF LN WRITES("*******T")
			    WRCH('*T')
			    TEST STARFUN=F.DAT
			    THEN WRITEF("DATA %S/%N/*N", NEST, LOOKUPVAL)
			    ELSE $( IF STARFUN=F.DEF WRITES("PARAMETER ")
				    WRITEF("%S = %N*N", NEST, LOOKUPVAL)
				    $)
			    ENDCASE

		// ** UNLESS or IF
		CASE F.UNL:
		CASE F.IF:  CH:=READLOGEXP (SYMBOLTAB, CH, @TIT)
			    SKIPLINE(CH)
			    IF IFPTR>=MAXIF
			    DO $( SELECTOUTPUT(SYSOUT)
				  WRITEF("Too many nested IFs ")
				  GOTO WRLF
				  $)
			    IF TIT DO
			    $(	SELECTOUTPUT(SYSOUT)
				CONTEXT(LINENO, FILETITLE)
				SELECTOUTPUT(SAVO)
				$)
			    IFSTACK!IFPTR:=COPYING
			    TITSTACK!IFPTR:=(LOOKUPVAL=0->0,1)
			    IFPTR:=IFPTR+1
			    COPYING:=COPYING & (LOOKUPVAL\=0 EQV STARFUN=F.IF)
			    ENDCASE

		// ** IFTF, IFF, or IFT
		CASE F.FTF:
		CASE F.IFF:
		CASE F.IFT: SKIPLINE(CH)
			    TEST IFPTR=0 THEN
			    $(	SELECTOUTPUT(SYSOUT)
				WRITES("IFT/IFF at outer level ")
				CONTEXT(LINENO, FILETITLE)
				SELECTOUTPUT(SAVO)
				COPYING:=TRUE
				TIT:=TRUE
				$)
			  OR $( COPYING:=IFSTACK!(IFPTR-1)
				TIT:=TITSTACK!(IFPTR-1)
				$)
			    COPYING:=COPYING & ((TIT\=0 EQV STARFUN=F.IFT) \/ 
								STARFUN=F.FTF)
			    ENDCASE

		// ** ENDC
		CASE F.END: SKIPLINE(CH)
			    IF LN RDCH:=RDCHSAV
			    TEST IFPTR<=IFSAVE THEN
			    $(	SELECTOUTPUT(SYSOUT)
				WRITES("Too many ENDCs ")
				CONTEXT(LINENO, FILETITLE)
				SELECTOUTPUT(SAVO)
				$)
			    OR $(
				IFPTR:=IFPTR-1
				COPYING:=IFSTACK!IFPTR $)

			    ENDCASE

		// ** IDENT
		CASE F.ID:
			    UNLESS COPYING GOTO NMODIDE
			    CH:=FORMGENNAME(NEST, CH, MAXPACKEDTITLE, TRUE)
			    IF HADIDENT DO // only use this IDENT if it's later
				UNLESS USEDATE(NEST, IDENTIFICN)
				    DO ENDCASE
			    HADIDENT:=TRUE
			    PACKSTRING(NEST, IDENTIFICN)
			    GOTO MODIDE

		// ** MODULE/END
		CASE F.MOD:
			    UNLESS COPYING GOTO NMODIDE
			    CH:=FORMGENNAME(NEST, CH, MAXPACKEDTITLE, TRUE)
			    HADMODULE:=TRUE
			    PACKNAME(NEST, MAXMODNAME, MODNAME)

		// IDENT and MODULE/END common: have we had both?
		MODIDE:	    // if not had both yet, exit
			    UNLESS (HADMODULE & HADIDENT) ENDCASE 
			    HADMODULE:=FALSE  // don't use these names again
			    HADIDENT:=FALSE
			    IF IDFILE<0 DO
			    $(	// make a new IDENT file for this set of files
**	IF VAX
				TEST IDEAPPEND THEN
				$(  SETDEF(R.ACCESS, RV.WRT)
				    SETDEF(R.ACCESS, RV.EOF)	
				    IDFILE := FINDINPUT(IDETITLE)
				    IDEAPPEND := FALSE
				    $)
				OR IDFILE:=FINDOUTPUT(IDETITLE)
**	IFF
				IDFILE := FINDOUTPUT(IDETITLE)
**	ENDC
				IF IDFILE<0 DO 
				$(  // failed to make a new IDENT file
				    SELECTOUTPUT(SYSOUT)
				    WRITES("Can*'t open IDENT file*N")
				    CONTEXT(LINENO, FILETITLE)
				    SELECTOUTPUT(SAVO)
				    ENDCASE
				    $)
				$)
			    SELECTOUTPUT(IDFILE)

			    // output IDENT entry in file
			    WRITEF("%S  %S*N",MODNAME,IDENTIFICN)
			    SELECTOUTPUT(SAVO)

		// IDENT or MODULE/END to be ignored: outside conditional
		NMODIDE:    SKIPLINE(CH)
			    ENDCASE

		// ** ASTERISK
		CASE F.AST: ASTERISK:=(CH='*N'->'**',CH)
			    ENDCASE
			    $)

		RDCH:=RDCHSAV

	     $)

     ELSE $( // deal with all other line-starting commands
             SWITCHON CH INTO $(

    CASE 'd':
    CASE 'D':	IF DEBUG DO
		$( // 'ignore' this character - this is a debugging statement
		   IF LN DO WRCH(CH)
		   CH:=RDCH()
		   GOTO RSW
		   $)

    CASE 'c':
    CASE 'C':	UNLESS TRCOM DO // ignore comment line
		$(  SKIPLINE(CH)
		    ENDCASE
		    $)

    DEFAULT:	UNLESS COPYING WRCH:=NULL
		IF LN WRLN(LINENO, LINENOFILLER)
		WRCH(CH); LINEW:=(TRUETABS & CH='*T')->8,1
		UNTIL CH='*N' \/ CH='*P' DO
		$(  CH:=RDCHECH()
		    LINEW:=(TRUETABS & CH='*T')->(LINEW+8)&(-8),LINEW+1
		    $)
		WRCH:=WRCHSAV
		IF LINEW>LINELENGTH DO
		$(  SELECTOUTPUT(SYSOUT)
		    WRITEF("Line %N of file %S too long*N",
					LINENO, FILETITLE)
		    SELECTOUTPUT(SAVO)
		    $)

    CASE ENDSTREAMCH:
    CASE '*P':
    CASE '*N':	ENDCASE
	$) // closing SWITCHON clause
    $) // closing ELSE clause

    CH:=RDCH()
    LINENO:=LINENO+1

    $) REPEATUNTIL CH=ENDSTREAMCH // once for each remaining line of the file

RET: ENDREAD()
     RDCH:=RDCHSAV
     UNLESS IFPTR=IFSAVE DO
     $(	SELECTOUTPUT(SYSOUT)
	WRITEF("Unmatched IFs in %S",FILETITLE)
	IFPTR:=IFSAVE
	COPYING:=IFSTACK!IFPTR
	SELECTOUTPUT(SAVO)
	$)
     RETURN

// error exits
WRLF: CONTEXT(LINENO, FILETITLE)
ABEX: SELECTOUTPUT(SAVO)
      GOTO RET

    $)

AND MOAN(FT) BE WRITEF("Can*'t open *'%S*'*N",FT)


AND RDCHECH() = VALOF
  // read a character, echoing to COUT

$(  LET CH=RDCHSAV()
    WRCH(CH)
    RESULTIS CH
    $)


AND RDCHCML() = VALOF
  // read a character from buffered command line (NB doesn't work with UNRDCH)

$(  TEST CMLPTR >= CMLBUFFER!0 THEN RESULTIS '*N'
    OR $(  CMLPTR := CMLPTR+1
	   RESULTIS CMLBUFFER!CMLPTR
	   $)
    $)


AND RDCHS() = VALOF
  // read a character, ignoring spaces and tabs

$(  LET CH=NOODLE
    CH:=RDCH() REPEATWHILE CH='*S' \/ CH='*T'
    RESULTIS CH
    $)


AND SKIPSPACE(CH) = VALOF
  // returns first non-space, starting with CH

RESULTIS CH='*S' \/ CH='*T' -> RDCHS(), CH


AND SKIPCHAR(ICH, SCH) = VALOF
  // returns first character that's not space, tab, or SCH
  // primed with ICH

$(  LET CH=SKIPSPACE(ICH)
    WHILE CH=SCH DO CH:=RDCHS()
    RESULTIS CH
    $)


AND WRLN(LN, FILL) BE
  // write line number LN,
  // filling character FILL

$(  LET L=VEC 4 AND N, I=LN, 4

    $(	L!I:=N REM 10 + '0'
	I:=I-1
	N:=N/10
	$) REPEATUNTIL N=0

    FOR J=0 TO 4 DO WRCH(J<=I->FILL, L!J)
    UNLESS COPYING WRCH('~')
    WRCH('*T')
    $)


AND NULL() BE RETURN


AND SKIPLINE(CH) BE
  // read all characters (from CH on) to end of current line

UNTIL CH='*N' \/ CH='*P' \/ CH=ENDSTREAMCH DO CH:=RDCH()

.

**	IF VAX
GET "ADC"
GET "BCPLDIR:RMS"
GET "LIBHDR"
**	IFF
GET "[1,1]RSXHDR"
GET "ADCHDR"
**	ENDC



LET READTITLE(TITLE,TERM,EXT,COMMON) = VALOF

  // read title into vector TITLE
  // permitted terminating character TERM
  // default extension is EXT
  // COMMON is TRUE if reading common block title
  // result is TRUE if any error

$(
  LET V=VEC MAXFILETITLE AND VV=VEC MAXFILETITLE
  LET CH,PTR,PP=NOODLE,0,0
  LET HADDOT,HADCH,HADDEV,HADUIC,INUIC=FALSE,FALSE,FALSE,FALSE,FALSE
**	IF VAX
  LET DVEC=(COMMON->CDISCVEC,DISCVEC) AND DVP=(COMMON->CDISCVECL,DISCVECL)
**	ENDC
  LET UVEC=(COMMON->CUICVEC,UICVEC) AND UVP=(COMMON->CUICVECL,UICVECL)

  APPEND:=FALSE

  CH:=RDCH() 
  REPEATWHILE CH='*S' \/ CH='*T' \/ (CH='*N' & TERM='=')

  IF CH=ENDSTREAMCH 
  DO
    STOP(0)

  IF 'a'<=CH<='z'
  DO
    CH := CH-'a'+'A'

  WHILE '0'<=CH<='9' \/ 'A'<=CH<='Z' \/ CH=':' \/ CH='[' \/ CH='.' \/ CH=';' \/
	CH='<' \/ CH='_' \/ CH='$' \/ 
	((CH='-' \/ CH=',' \/ CH=']' \/ CH='>') & INUIC)
  DO
  $(
    IF CH=';' & \HADDOT & (PTR+4)<=MAXFILETITLE
    DO				// put extension before version number
    $(
      HADDOT:=TRUE
      PTR:=TAGON(VV, PTR, EXT)
    $)
    IF PTR<MAXFILETITLE
    DO
    $(
      PTR:=PTR+1
      VV!PTR:=CH
    $)
    IF CH='.' & \INUIC HADDOT:=TRUE
    IF CH='[' \/ CH='<' 
    DO
    $(
      IF HADUIC \/ PTR>1 RESULTIS TRUE // bad syntax
      UVP,INUIC,HADUIC:=-1,TRUE,TRUE
    $)
    IF INUIC 
    DO 				// buffer in default UIC string
    $(
      UVP:=UVP+1; UVEC!UVP:=CH
      IF CH=']' \/ CH='>' 
      DO 
	INUIC,PTR:=FALSE,0
    $)
    IF CH=':' 
    DO				// copy to default device string
    $(
      IF HADDEV RESULTIS TRUE
**	IF VAX
      DVP:=PTR-1
**	IFF
      DISCVECL:=PTR-1
**	ENDC
      FOR I=1 TO PTR 
      DO
**	IF VAX
	DVEC!(I-1):=VV!I
**	IFF
	DISCVEC!(I-1):=VV!I
**	ENDC

      PTR,HADDEV:=0,TRUE
    $)
    CH:=RDCH()
    IF 'a'<=CH<='z'
    DO
      CH := CH-'a'+'A'
    HADCH:=TRUE
  $)

  UNLESS HADCH RESULTIS TRUE

  $(
    WHILE CH='*S' \/ CH='*T' CH:=RDCH()
    IF TERM='/' \/ CH\='/' BREAK
    CH:=READSW()
  $) REPEAT


    // put disc, uic into title
**	IF VAX
  FOR I=0 TO DVP 
**	IFF
  FOR I=0 TO DISCVECL 
**	ENDC
  DO
  $(
    PP:=PP+1
**	IF VAX
    V!PP:=DVEC!I
**	IFF
    V!PP:=DISCVEC!I
**	ENDC
  $)

  FOR I=0 TO UVP 
  DO
  $(
    PP:=PP+1
    V!PP:=UVEC!I
  $)

  // preserve uic vector pointer in global
  IF HADUIC 
  DO
    TEST COMMON
    THEN
      CUICVECL:=UVP
    OR
      UICVECL:=UVP

**	IF VAX
  // likewise device vector pointer
  IF HADDEV 
  DO
    TEST COMMON
    THEN
      CDISCVECL:=DVP
    OR
      DISCVECL:=DVP
**	ENDC

  // now copy actual title
  IF (PP+PTR)>MAXFILETITLE
  DO
    PTR:=MAXFILETITLE-PP
  IF PTR>0
  DO
  $(
    FOR I=1 TO PTR 
    DO
    $(
      PP:=PP+1
      V!PP:=VV!I
    $)
  $)

  PTR:=PP

  // append extension
  UNLESS HADDOT \/ V!PTR=':' \/ (PTR+4)>=MAXFILETITLE
  DO
    PTR:=TAGON(V, PTR, EXT)

**	UNLESS VAX
  IF APPEND
  DO
    PTR:=TAGON(V, PTR, "/DD:E")
**	ENDC

  V!0:=PTR

  PACKSTRING(V,TITLE)

  IF TERM='*N'
  DO 			// find if another file requested, and adjust terminator
  $(
    ANOTHER:=(CH=','->TRUE, FALSE)
    IF ANOTHER 
    DO
      CH:='*N'
  $)

//  WRCH(ANOTHER->'+','-'); WRITES("another*N")

  RESULTIS CH=TERM->FALSE, TRUE

$)


AND READSW() = VALOF
  // read a switch on a file title
  // function result is switch terminating character

$(  LET V=VEC MAXPACKEDTITLE
    LET CH=RDCH() AND SW=NOODLE AND VALUE=TRUE

    WHILE CH='-' DO $( CH:=RDCH(); VALUE:=\VALUE $)

    CH:=FORMNAME(V, CH, MAXPACKEDTITLE)

    IF V!0=0 RESULTIS -1	// forces 'bad terminator' exit from READTITLE

    UNLESS LOOKUP(V, SWITCHTAB) DO // bad termiator exit
    $(	LET O=OUTPUT()
	SELECTOUTPUT(SYSOUT)
	PACKSTRING(V, V)
	WRITEF("Unexpected switch %S*N", V)
	SELECTOUTPUT(O)
	RESULTIS -1
	$)

    SWITCHON LOOKUPVAL INTO $(

    DEFAULT:	RESULTIS -1 // 'bad terminator' exit

    CASE S.COM:	COM,SLCOM:=VALUE,VALUE; ENDCASE
    CASE S.LIB:	COM,SLCOM:=VALUE,\VALUE; ENDCASE
    CASE S.LN:	LN,COM,SPOOL:=VALUE,VALUE,VALUE; ENDCASE
    CASE S.SP:	SPOOL:=VALUE; ENDCASE
    CASE S.AP:	APPEND:=VALUE; ENDCASE
    CASE S.CU:	CH:=READUIC(CH); ENDCASE
    CASE S.DE:	DEBUG:=VALUE; ENDCASE
**	IF VAX
    CASE S.TR:	TEST CH='=' THEN
		$(  CH := RDCHS()
		    TEST CH='('
		    THEN CH := READTRUTHS(-1, -1)
		    OR   CH := -1
		    IF CH<0 RESULTIS -1 // no opening "(" or closing ")"
		    CH := RDCHS()
		    $)
		OR  TRUTHFILE := VALUE
**	IFF
    CASE S.TR:	TRUTHFILE:=VALUE
**	ENDC
    CASE S.NUL:	ENDCASE
**	IF VAX
    CASE S.CD:	CH:=READDEV(CH); ENDCASE
    CASE S.IN:	INITVECS:=VALUE; ENDCASE
**	ENDC
    CASE S.THR:	THREAD:=VALUE; ENDCASE
    CASE S.AST:
    CASE S.LL:	UNTIL CH=':' \/ CH='*N' \/ CH='*P' \/ CH=ENDSTREAMCH DO
		    CH:=RDCHS()
		TEST LOOKUPVAL=S.LL
		THEN $( // read line length
			LINELENGTH:=READN()+1
			CH:=TERMINATOR
			$)
		ELSE $( // read asterisk substitutor
			ASTERISK:=RDCH()
			CH:=RDCH()
			$)
		ENDCASE
    CASE S.TRUETAB: TRUETABS := VALUE; ENDCASE

	$) // switch decode

    RESULTIS CH

    $)


AND READUIC(CHAR) = VALOF
  // read default common UIC
  // function result is terminating character

$(  LET NOCOMMAYET=TRUE
    LET CH=SKIPCHAR(CHAR, ':')

    CUICVECL:=0
    CUICVEC!0:='['

    WHILE '0'<=CH<='9' \/ (CH=',' & NOCOMMAYET) \/ CH='[' \/ CH=']'  \/
	  'A'<=CH<='Z' \/ CH='.' \/ CH='$' \/ CH='<' \/ CH='>' \/ CH='_' DO
    $(  UNLESS CH='[' \/ CH=']' \/ CH='<' \/ CH='>' DO
	$(  CUICVECL:=CUICVECL+1
	    CUICVEC!CUICVECL:=CH
	    IF CH=',' \/ CH<'0' \/ CH>'9' NOCOMMAYET:=FALSE
	    $)
	CH:=RDCH()
	$)

    CUICVECL:=CUICVECL+1
    CUICVEC!CUICVECL:=']'

    RESULTIS CH

    $)


AND READDEV(CHAR) = VALOF
  // read default common 'device'
  // function result is character after : (or -1 on error)
$(  LET CH=SKIPCHAR(CHAR, ':')

    CDISCVECL:=0

    UNTIL CH=':' DO
    $(	IF CDISCVECL>=30 \/ CH='*N' \/ CH=ENDSTREAMCH RESULTIS -1
	CDISCVEC!CDISCVECL:=CH
	CDISCVECL:=CDISCVECL+1
	CH:=RDCH()
	$)

    CDISCVEC!CDISCVECL:=':'

    RESULTIS RDCH()

    $)

AND READTRUTHS(ISTR, FILETITLE) = VALOF
 // read in truth definitions from stream ISTR (whose title is FILETITLE)
**	IF VAX
 // if ISTR<0, reading truths from command line in form /TR=( ... )
**	ENDC

$(  LET CH=RDCH() AND VAR = VEC MAXPACKEDTITLE AND VARLEN=0
    AND LINE=1 AND MOAN=FALSE AND PACKVAR = VEC 10 AND VAL=0

    LET O=OUTPUT(); SELECTOUTPUT(SYSOUT)

**	IF VAX
    UNTIL CH=ENDSTREAMCH \/ (CH=')' & ISTR<0) DO
**	IFF
    UNTIL CH=ENDSTREAMCH DO
**	ENDC
    $(U MOAN:=FALSE
	CH:=FORMNAME(VAR, CH, MAXPACKEDTITLE)

	SWITCHON CH INTO $(S
**	IF VAX
	CASE ')':   IF ISTR>=0 DO VAR!0 := 1 // frig to force error
**	ENDC
	CASE ';': CASE '.':
	CASE '*N':  UNLESS VAR!0=0 DO
		    $(	WRITEF("Syntax error")
			MOAN:=TRUE $)
		    ENDCASE

	CASE '=':   VARLEN:=PACKSTRING(VAR, PACKVAR)
		    IF LOOKUP(VAR, SYMBOLTAB) DO
		    $(	WRITEF("%S already defined",PACKVAR)
			MOAN:=TRUE $)
		    VAL:=READN()
		    CH:=TERMINATOR
		    TEST NAMEPTR+VARLEN+1>=MAXNAME THEN
		    $(	WRITEF("Name table oveflow")
			MOAN:=TRUE $)
		    OR  TEST SYMPTR+4>=MAXSYM THEN
			$(  WRITEF("Symbol table overflow")
			    MOAN:=TRUE $)
			OR
			$(  SYMBOLTAB!(SYMPTR+0):=1
			    SYMBOLTAB!(SYMPTR+1):=VAL
			    SYMBOLTAB!(SYMPTR+2):=NAMETAB+NAMEPTR
			    SYMPTR:=SYMPTR+3
			    SYMBOLTAB!SYMPTR:=0

			    FOR I=0 TO VARLEN DO
			    $(	NAMETAB!NAMEPTR:=PACKVAR!I
				NAMEPTR:=NAMEPTR+1
				$)
			    NAMETAB!NAMEPTR:=0
			    $)
		    ENDCASE

	DEFAULT:    WRITEF("Syntax error")
		    MOAN:=TRUE
		    $)S
**	IF VAX
	IF MOAN & ISTR>=0 DO WRITEF(" in line %N of %S*N",LINE,FILETITLE)
	TEST ISTR<0 THEN
	$(  IF CH\=')' DO $( CH := RDCH() REPEATWHILE CH=';' \/ CH=',' $)
	    $)
	OR
	$(  SKIPLINE(CH)
	    CH := RDCH()
	    LINE := LINE+1	
	    $)
**	IFF
	IF MOAN DO WRITEF(" in line %N of %S*N",LINE,FILETITLE)
	SKIPLINE(CH)
	CH:=RDCH()
	LINE:=LINE+1
**	ENDC
	$)U
    IF ISTR>=0 DO ENDREAD(); SELECTOUTPUT(O)

    RESULTIS MOAN->-1, (CH<0->256,CH)

    $)

.
**	IF VAX
GET "ADC"
GET "BCPLDIR:RMS"
GET "LIBHDR"
**	IFF
GET "[1,1]RSXHDR"
GET "ADCHDR"
**	ENDC



LET CFSTRING(V, S) = VALOF
  // compare unpacked string in V
  //  with packed string in S

$(  LET VS=VEC 60

    UNPACKSTRING(S, VS)
    FOR I=0 TO V!0 DO IF VS!I\=V!I RESULTIS FALSE
    RESULTIS TRUE

    $)


AND TAGON(VV, PTR, STR) = VALOF
  // Tag string STR onto vector VV 
  //  at addresses PTR++.
  // Result is updated value for pointer.

$(
  LET LAST=VV!PTR AND X=NOODLE
  UNPACKSTRING(STR, VV+PTR)
  X:=PTR+VV!PTR
  VV!PTR:=LAST
  RESULTIS X
$)
	

AND FORMIDETITLE() BE
  // Form title of .IDE file from its various components

$(  LET BUFF=VEC 60 AND PTR=0

**	IF VAX
    // 'device?'
    UNLESS DISCVECL<0 DO
    $(	FOR I=0 TO DISCVECL DO
	    BUFF!(PTR+I+1):=DISCVEC!I
	PTR:=PTR+DISCVECL+1
	$)
**	ENDC

    // directory?
    UNLESS UICVECL<0 DO
    $(	FOR I=0 TO UICVECL DO
	    BUFF!(PTR+I+1):=UICVEC!I
	PTR:=PTR+UICVECL+1
	$)

    // title proper
    PTR:=TAGON(BUFF, PTR, "ADC.IDE")

**	UNLESS VAX
    // append switch from /AP of last title
    IF APPEND DO
	PTR:=TAGON(BUFF, PTR, "/DD:E")
**	ENDC

    // tidy up and return result
    BUFF!0:=PTR
    PACKSTRING(BUFF, IDETITLE)

    $)



AND LOOKUP(V, T) = VALOF
  // look up unpacked string V in table T
  // table is laid out as:
  //	/no. of aliases
  //	/value to return
  //	/<alias string pointer>  for each alias
  // table is terminated by a null entry with '0 aliases'
  // result is FALSE if V not in table, TRUE otherwise
  // if in table, GLOBAL LOOKUPVAL set to value in table
  // (undefined otherwise)

$(  LET VP, ACNT=0, NOODLE

    $(	ACNT:=T!VP
	IF ACNT=0 RESULTIS FALSE // failure exit
	FOR I=1 TO ACNT DO
	    IF CFSTRING(V, T!(VP+I+1))
		DO $( LOOKUPVAL:=T!(VP+1)
		      RESULTIS TRUE
		      $)
	VP:=VP+ACNT+2
	$) REPEAT  // only exit from loop is by RESULTIS statements

    $)  // LOOKUP



**	IF VAX

AND INITTAB(T, S1, S2, S3, S4, S5, S6, S7, S8, S9,S10,
	      S11,S12,S13,S14,S15,S16,S17,S18,S19,S20,
	      S21,S22,S23,S24,S25,S26,S27,S28,S29,S30) = VALOF
  // make a new version of table with strings (damn BCPL)
  // replace -1 entries in T with S1, S2, ...
  // T terminated by a 0 entry

$(  LET P,A=0,@S1
    AND NEWT=NOODLE

    P := P+1 REPEATUNTIL T!P=0
    NEWT := GETVEC(P+1) // I think this is 1 too many, but what the hell
    P := 0 // init again

    $(	LET E=T!P
	TEST E=-1 THEN // substitute table entry for string
	$(  NEWT!P:=A!0
	    A:=A+1
	    $)
	OR NEWT!P := T!P // simply copy others
	IF E=0 RESULTIS NEWT
	P:=P+1
	$) REPEAT // until zero entry

    $)

**	IFF

AND INITTAB(T, S1, S2, S3, S4, S5, S6, S7, S8, S9,S10,
	      S11,S12,S13,S14,S15,S16,S17,S18,S19,S20,
	      S21,S22,S23,S24,S25,S26,S27,S28,S29,S30) BE
  // initialise table with strings (damn BCPL)
  // replace -1 entries in T with S1, S2, ...
  // T terminated by a 0 entry

$(  LET P,A=0,@S1

    $(	LET E=T!P
	IF E=0 RETURN
	IF E=-1 DO // substitute table entry
	$(  T!P:=A!0
	    A:=A-1
	    $)
	P:=P+1
	$) REPEAT // until zero entry

    $)
**	ENDC

AND FORMNAME(V, CH, N) = VALOF
  // form a name in vector V, up to N characters
  // initial character CH
  // terminates on any non-alphanumeric character
  // skips leading and trailing spaces or tabs
  // result is first character after name that is not a space or tab

  FORMGENNAME(V, CH, N, FALSE)


AND FORMGENNAME(V, CH, N, SW) = VALOF
**	IF VAX
  // as FORMNAME, except allows $ and _ iff SW TRUE
**	IFF
  // as FORMNAME, except allows . iff SW TRUE
**	ENDC

$(
  LET P=0

  // ignore leading spaces or tabs
  CH:=SKIPSPACE(CH)

  // is it a lower-case letter
  IF 'a'<=CH<='z' 
  DO 
    CH := CH+'A'-'a'

  // read all the alphanumeric characters up to limit
  WHILE ('A'<=CH<='Z' | '0'<=CH<='9' |
**	IF VAX
	 SW & (CH='$' | CH='_') )  & P<N 
**	IFF
	 SW & (CH='.') ) & P<N 
**	ENDC
  DO
  $(
    P:=P+1
    V!P:=CH
    CH:=RDCH() 
    IF 'a'<=CH<='z' 
    DO 
      CH := CH+'A'-'a'
  $)

  V!0:=P

  // return after stripping spaces
  RESULTIS SKIPSPACE(CH)

$)

AND PACKNAME(VECTOR, FILLENGTH, STRING) BE

  // fill name in VECTOR to FILLENGTH with spaces,
  // pack into STRING

$(  WHILE VECTOR!0<FILLENGTH DO
    $(	VECTOR!0:=VECTOR!0+1
	VECTOR!(VECTOR!0):='*S'
	$)
    PACKSTRING(VECTOR, STRING)
    $)

// Routines to compare two dates in standard 'IDENT' format

AND FINMONTH(LET1, LET2) = VALOF

  // returns month number (0:Jan, 11:Dec)
  // or -1 if LET1,LET2 not a standard representation of a month

$(  LET MONTHS=TABLE	1, 'J', 'A',
		     1, 2, 'F', 'E', 'B',
		     2, 1, 'M', 'R',
		     3, 2, 'A', 'P', 'R',
		     4, 1, 'M', 'Y',
		     5, 1, 'J', 'N',
		     6, 1, 'J', 'L',
		     7, 2, 'A', 'U', 'G',
		     8, 2, 'S', 'E', 'P',
		     9, 2, 'O', 'C', 'T',
		    10, 2, 'N', 'O', 'V',
		    11, 2, 'D', 'E', 'C',
		    -1
    LET INDEX, MONTH=0, 0

    $(	LET NLETS=MONTHS!INDEX
	IF LET1=MONTHS!(INDEX+1) DO
	   IF (LET2=MONTHS!(INDEX+2)) \/
		((NLETS>1)&(LET2=MONTHS!(INDEX+3)))
		    DO RESULTIS MONTH
	INDEX:=INDEX+NLETS+2
	MONTH:=MONTHS!INDEX
	INDEX:=INDEX+1
	$) REPEATWHILE MONTH>0

    RESULTIS -1 // gone through whole months table and found no match

    $)


AND FINDAYEAR(DIG1, DIG2) = VALOF

  // returns day or year number from 2 digits,
  // or -1 if not both digits

$(  IF DIG1<'0' \/ DIG1>'9' \/
	DIG2<'0' \/ DIG2>'9'	RESULTIS -1 // not both digits

    RESULTIS (DIG1-'0')*10 + DIG2 - '0'

    $)


AND EVALDATE(DVECTOR) = VALOF

  // returns date as 'STANDARD' (31-day months)
  // since 00JA74, or <0 if not in standard form.
  // 'Stable' until approx 2054

$(  LET DAY,MON,YEAR=NOODLE,NOODLE,NOODLE

    IF DVECTOR!0 NE 6 RESULTIS -1 // refuse strings of wrong length

    DAY:=FINDAYEAR(DVECTOR!1, DVECTOR!2)
    IF DAY<0 RESULTIS -1 // not standard day

    YEAR:=FINDAYEAR(DVECTOR!5, DVECTOR!6)
    IF YEAR<0 RESULTIS -1 // not standard year

    MON:=FINMONTH(DVECTOR!3, DVECTOR!4)
    IF MON<0 RESULTIS -1 // not standard month

    IF YEAR<74 DO YEAR:=YEAR+100 // after 2000 (ho ho)

    RESULTIS ((YEAR-74)*12+MON)*31+DAY

    $)


AND USEDATE(DVECTOR, DSTRING) = VALOF

  // returns TRUE if to replace DSTRING by DVECTOR
  //        FALSE otherwise
  // criterion is that either not be a standard 6-character date,
  // or that DVECTOR represent a later date than DSTRING

$(  LET UPACK=VEC 30
    AND VALSTR, VALVEC=NOODLE, EVALDATE(DVECTOR)

    IF VALVEC<0 RESULTIS TRUE // DVECTOR not standard date

    UNPACKSTRING(DSTRING, UPACK)
    VALSTR:=EVALDATE(UPACK)
    IF VALSTR<0 RESULTIS TRUE // DSTRING not standard

    RESULTIS (VALVEC>VALSTR->TRUE, FALSE)

    $)


//	Routines to read logical expressions	 MCF	29 Jan 80
//
//	The syntax of expressions is:
//
//	<or op>   ::= | or v
//	<and op>  ::= &
//	<not op>  ::= ~ or \
//	<primary> ::= <variable> | (<or exp>)
//	<not exp> ::= <not op> <primary> | <primary>
//	<and exp> ::= <not exp> [ <and op> <not exp>]
//	<or  exp> ::= <and exp> [ <or op> <and exp>]
//	<log exp> ::= <or exp>
//
//	Where <variable> is a sequence of alphanumeric characters. A variable
//	is considered TRUE if it is set non-zero.
//



AND READLOGEXP (SYMBOLTAB, CH, ERROR) = VALOF
// Read logical expression, coping with & | \ ~ ( )
// Answer left in LOOKUPVAL
// <exp> ::= <or exp>
$(  !ERROR := FALSE		// nowt wrong yet
    CH:= READOREXP(@LOOKUPVAL, SYMBOLTAB, CH, ERROR)
    RESULTIS CH
$)

AND READOREXP (VALUE, SYMBOLTAB, CH, ERROR) = VALOF
// <or exp> ::= <and exp> [ <or op> <and exp>]
$(  LET T = NOODLE
    AND V = FALSE

    $(	CH:=READANDEXP(@T, SYMBOLTAB, CH, ERROR)
	V := V|T
	$) REPEATWHILE (CH='v' | CH='|')->VALOF $( CH:=RDCHS()
						   RESULTIS TRUE
						   $), FALSE
    !VALUE := V
    RESULTIS CH
$)

AND READANDEXP (VALUE, SYMBOLTAB, CH, ERROR) = VALOF
// <and exp> ::= <not exp> [ <and op> <not exp>]
$(  LET T = NOODLE
    AND V = TRUE

    $(	CH:=READNOTEXP (@T, SYMBOLTAB, CH, ERROR)
	V := V&T
	$) REPEATWHILE CH='&'->VALOF $( CH:=RDCHS()
					RESULTIS TRUE
					$), FALSE
    !VALUE := V
    RESULTIS CH
$)

AND READNOTEXP (VALUE, SYMBOLTAB, CH, ERROR) = VALOF
// <not exp> ::= <not op> <primary> | <primary>
$(  LET T = NOODLE

    TEST CH='~' | CH='\' THEN
    $(	CH:=RDCHS()
	CH:=READPRIMARY(@T,SYMBOLTAB,CH,ERROR)
	!VALUE:=\T
	$) ELSE
    $(	CH:=READPRIMARY(@T,SYMBOLTAB,CH,ERROR)
	!VALUE:=T
	$)
    RESULTIS CH
$)

AND READPRIMARY(VALUE, SYMBOLTAB, CH, ERROR) = VALOF
// <primary> ::= <variable> | (<or exp>)
$(  LET V = NOODLE
    AND NEST = VEC MAXPACKEDTITLE
    AND SAVO = OUTPUT()

    TEST CH = '(' THEN
    $(	CH:=RDCHS()
	CH:=READOREXP(@V, SYMBOLTAB, CH, ERROR)
	!VALUE:=V
	TEST CH = ')'
	THEN CH:=RDCHS()
	ELSE $(	SELECTOUTPUT(SYSOUT)
		WRITEF("Unmatched *'(*'*N")
		SELECTOUTPUT(SAVO)
		!ERROR:=TRUE
		$)
	$) ELSE
    $(	CH:=FORMNAME(NEST, CH, MAXPACKEDTITLE)
	UNLESS LOOKUP (NEST, SYMBOLTAB)
	DO $(	SELECTOUTPUT(SYSOUT)
		TEST NEST!0 = 0
		THEN WRITEF ("Syntax error in expression*N")
		ELSE $(	PACKSTRING(NEST, NEST)
			WRITEF("%S undefined*N",NEST)
			$)
		SELECTOUTPUT(SAVO)
		LOOKUPVAL:=0
		!ERROR:=TRUE
		$)
	!VALUE:=(LOOKUPVAL=0->FALSE, TRUE)
	$)
    RESULTIS CH
$)

.
