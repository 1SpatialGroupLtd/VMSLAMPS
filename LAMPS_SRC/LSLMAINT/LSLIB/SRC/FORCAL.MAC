;
; * This file is part of the LAMPS distribution, released as a software
; * preservation project to archive digital history for future historians.
; * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
; *
; * Timestamp of this file for the 2002 release was: 1982-04-05 11:47:04.000000000 +0100
; *
; * This program is free software: you can redistribute it and/or modify
; * it under the terms of the GNU General Public License as published by
; * the Free Software Foundation, version 3.
; *
; * This program is distributed in the hope that it will be useful, but
; * WITHOUT ANY WARRANTY; without even the implied warranty of
; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
; * General Public License for more details.
; *
; * You should have received a copy of the GNU General Public License
; * along with this program. If not, see http://www.gnu.org/licenses/.
;
	.TITLE	FORCAL
	.IDENT	'AUG77'

; module for LSLIB which replaces the FORLIB $SUBR & $CALL
; taking care of FPP status
; (all FOR programs assume single length set on entry)

; This module ensures that single length is set
;  a) at the head of all FORTRAN-coded subprograms
;  b) on return from all calls from FORTRAN-coded
;   subprograms, whether the called routine is FORTRAN or not.

; Author P. Cross, after DEC

; $OTIS  (Object Time system Initialise for Subroutines)
; - called (by JSR R4) at the head of all FORTRAN subprograms

$OTIS::	MOV	(R4)+,R0	; get polish dispatch pointer
	MOV	@#52,R3		; point to impure area
	MOV	2(R3),(SP)	; ptr to calling routines name
	MOV	(R3),-(SP)	; calling routines line number
	MOV	(R4)+,-(SP)
	MOV	(R4)+,-(SP)	; called routines name
	CLR	(R3)		; init line number
	MOV	SP,2(R3)	; pt to called routines name
	MOV	(R5)+,R1	; count of arguments supplied
	MOV	(R4)+,R2	; ... arguments wanted
	BEQ	GO		; j if none
A:	DECB	R1		; (high byte undefined)
	BLT	GO		; j if no more supplied
	MOV	(R5)+,(R4)+	; copy next arg
	DEC	R2
	BNE	A		; go again if more wanted
GO:	MOV	R0,R4		; init for polish dispatch
	BR	D		; join common code


; CAL$ & CAI$ - FOR subroutine calls (direct and indirect)

CAI$::	MOV	(R4)+,-(SP)	; nr of arg words on stack
	MOV	@(R4)+,R0	; get called routines addr
	BR	C

CAL$::	MOV	(R4)+,-(SP)	; as above
	MOV	(R4)+,R0
C:	MOV	R5,R1
	MOV	SP,R5		; pt to arg list
	MOV	R1,-(SP)	; save callers arg ptr
	MOV	R4,-(SP)	; and his polish pointer
	JSR	PC,(R0)		; call the routine
	MOV	(SP)+,R4	; restore polish pointer
	MOV	(SP)+,R5	; and callers arg pointer
	ASL	(SP)		; cvt to bytes
	ADD	(SP)+,SP	; clear args off stack
D:	SETF			; set floating single
	SETI			; integer likewise
	JMP	@(R4)+		; off we go

	.END
