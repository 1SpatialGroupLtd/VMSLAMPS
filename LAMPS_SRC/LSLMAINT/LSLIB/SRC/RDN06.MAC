;
; * This file is part of the LAMPS distribution, released as a software
; * preservation project to archive digital history for future historians.
; * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
; *
; * Timestamp of this file for the 2002 release was: 1982-04-05 12:47:08.000000000 +0100
; *
; * This program is free software: you can redistribute it and/or modify
; * it under the terms of the GNU General Public License as published by
; * the Free Software Foundation, version 3.
; *
; * This program is distributed in the hope that it will be useful, but
; * WITHOUT ANY WARRANTY; without even the implied warranty of
; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
; * General Public License for more details.
; *
; * You should have received a copy of the GNU General Public License
; * along with this program. If not, see http://www.gnu.org/licenses/.
;



	.TITLE	RDN05

; GENERAL READ-NUMBER SUBROUTINE
; AC0_ REAL VALUE
; R0 _ INTEGER VALUE (IF IN RANGE), ELSE C SET
; R1 _ TERMINATING CHARACTER
; R2 _ COMPLETION CODE
; ENTER AT RDINT IF ONLY INTEGER TO BE READ ('.' TERMINATES)

DAP	=	R2			; DIGITS AFTER '.'
DXP	=	R3			; EXPONENT CONTROL
ADP	=	R5			; 1 AFTER DECIMAL POINT

.GLOBL	RDNUM,RDINT,GCLAS
RDINT:	MOV	(PC)+,-(SP)
RDNUM:	CLR	-(SP)
	MOV	R5,-(SP)		; SAVE RETN, SET SIGN +
	CLR	DAP
	CLR	DXP
	SETD
	SETI
CVA:	CLR	ADP
	CLRF	AC0			; ZERO RESULT
1$:	JSR	R5,GCLAS
	.BYTE	CVP-./2,'.		; PERIOD
	.BYTE	CVG-./2,'+
	.BYTE	CVL-./2,'-
	.BYTE	1$-./2,SPACE
	.BYTE	1$-./2,CR
	.BYTE	1$-./2,LF
	.BYTE	1$-./2,FF
	.BYTE	1$-./2,TAB
	.BYTE	CVZ-./2,200		; EXIT ON STRANGE CHAR
	.BYTE	CVD-./2,CVZ-./2	; DIGIT/LETTER

; MINUS

CVL:	NEGB	DXP
	BNE	CVG			; J IF IN EXPONENT
	INC	@SP			; OR SET MANTISSA SIGN
	BR	CVG

; PERIOD

CVP:	TSTB	DXP
	BNE	CVX			; J IF IN EXPONENT
	TSTB	ADP
	BNE	CVX			; OR IF ALREADY HAD A POINT
	TST	2(SP)
	BNE	CVX			; EXIT IF INTEGER-ONLY
	INC	ADP

; LOOP READING DIGITS

CVG:CVR:
	JSR	R5,GCLAS
	.BYTE	CVP-./2,'.
	.BYTE	CVX-./2,200
	.BYTE	CVD-./2,CVE-./2

CVD:	MULF	#^F10.,AC0	; partial result X10
	SUB	ADP,DAP		; COUNT DIGITS AFTER .
	LDCIF	R0,AC1
	ADDF	AC1,AC0		; add in new digit
	BR	CVR			; LOOP

; LETTER, MIGHT BE EXPONENT

CVE:	CMPB	#4,R0
	BEQ	1$		; ALLOW 'D' EXPONENT
	CMPB	#5,R0
	BNE	CVX			; NOT E
1$:	TSTB	DXP
	BNE	CVX			; j if already in exponent

; READ EXPONENT

	STF	AC0,AC4		; SAVE MANTISSA
	INC	DXP			; NOTE IN EXPONENT
	BR	CVA

; EXIT

CVX:	MOV	DAP,R0
	TSTB	DXP
	BEQ	2$			; J IF NO EXPONENT
	BPL	1$
	NEGF	AC0
1$:	STCFI	AC0,DAP		; OR CONVERT
	LDF	AC4,AC0		; RECOVER MANTISSA
	ADD	DAP,R0			; NET EXPONENT
2$:	CLR	R2			; COND CODE
	CMP	R1,#SPACE
	BLOS	CVY			; j if respectable terminator
	INC	R2
CVY:	TST	R0
2$:	BEQ	CVC			; J IF ZERO EXPONENT

; ADJUST EXPONENT

	BMI	1$
	MULF	#^F10.,AC0
	DEC	R0
	BR	2$
1$:	DIVF	#^F10.,AC0
	INC	R0
	BR	2$

; NO NUMBER READ

CVZ:	TSTB	DXP
	BNE	CVX			; J IF HAD MANTISSA
	MOV	#3,R2
	TST	R1
	BNE	CVC
	INC	R2			; IF EOF

; REAL RESULT NOW IN AC0

CVC:	MOV	(SP)+,R5
	TST	(SP)+
	ASR	R5
	BCC	1$			; J IF +VE
	NEGF	AC0
1$:	ASL	R5
	STEXP	AC0,R0
	CMP	R0,#20
	BGE	2$			; J IF INTEGER OUT OF RANGE
	STCFI	AC0,R0			; OR GET INTEGER AS WELL
	RTS	R5

2$:	MOV	#100000,R0		; 'overflow' value
	SEC
	RTS	R5


	.END
