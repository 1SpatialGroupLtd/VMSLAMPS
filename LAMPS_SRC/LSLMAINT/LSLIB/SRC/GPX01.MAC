;
; * This file is part of the LAMPS distribution, released as a software
; * preservation project to archive digital history for future historians.
; * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
; *
; * Timestamp of this file for the 2002 release was: 1982-04-05 11:47:02.000000000 +0100
; *
; * This program is free software: you can redistribute it and/or modify
; * it under the terms of the GNU General Public License as published by
; * the Free Software Foundation, version 3.
; *
; * This program is distributed in the hope that it will be useful, but
; * WITHOUT ANY WARRANTY; without even the implied warranty of
; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
; * General Public License for more details.
; *
; * You should have received a copy of the GNU General Public License
; * along with this program. If not, see http://www.gnu.org/licenses/.
;

	.TITLE	GPX01
	.ENABL	LC

; primitive terminal get/put character for RSX-11M

	.MCALL	DEFIN$,DIR$,QIO$,WTSE$S,IOERR$,FILIO$
	IOERR$			; define I/O error codes
	FILIO$			; define I/O function codes

; d.p.b's for QIO to/from TI:
; single char per transaction

	.GLOBL	FFOLUN,FFILUN		; linkage with FFX
	.GLOBL	FFOEFN,FFIEFN		; so user can change these

INDPB:	.BYTE	1,12.
	.WORD	IO.RLB
FFILUN:	.WORD	000		; set by FFIN
FFIEFN:
INEFN:	.BYTE	1,0		; efn 1 for sync
	.WORD	INSTAT		; isb
	.WORD	0		; no ast
	.WORD	INBUF
	.WORD	1
	.WORD	0		; spare
INBUF:	.WORD	0		; shared with dpb
INSTAT:	.WORD	1,0		; init state


OUDPB:	.BYTE	1,12.
	.WORD	IO.WLB
FFOLUN:	.WORD	000		; set by FFOUT
FFOEFN:
OUEFN:	.BYTE	2,0		; efn
	.WORD	OUSTAT		; isb
	.WORD	0
	.WORD	OUBUF
	.WORD	1
	.WORD	0		; no vfc
OUBUF:	.WORD	0
OUSTAT:	.WORD	1,0

	.GLOBL	GETC,BCKSPC,$DSW,GET1A,GETRT,GETRS

BCKSPC:	MOVB	#GETRS-GETC-2/2,GETC	; set backspace switch
	RTS	PC

GETC:	BR	.+2		; or GETRS
	JSR	R5,@#GET1
GETRT=.-2
GET04:	MOV	R0,#000
OLDC=.-2
; produce old char - reset backspace switch
GETRS:	CLRB	GETC
	MOV	OLDC,R0
GET07:	RTS	R5

GET1A:	MOV	(PC)+,-(SP)	; >0, mark async
GET1:	CLR	-(SP)		; mark sync
	MOV	INSTAT,R0
	TSTB	R0
	BEQ	GET20		; j if pending
	BPL	GET10		; j if no error
	CMPB	R0,#IE.EOF
	BNE	GET06
	CLR	R0		; mark eof
GET06:	CLRB	INBUF
	MOV	#1,INSTAT	; restore initial state
	INC	(SP)+
	BR	GET04		; to cover async case

GET10:	SWAB	R0
	BNE	GET15		; j if eor char
	MOVB	INBUF,R0	; else get normal char
GET15:	BIC	#-200,R0	; clean char
	BNE	GET06		; j unless initial
	DIR$	#INDPB		; go get one
	MOV	$DSW,R0
	BMI	GET06		; j if directive rejected
GET20:	NEG	(SP)+
	BCS	GET07		; exit if async, no char aval
	WTSE$S	INEFN		; wait otherwise
	BR	GET1

; put character

	.GLOBL	PUTC,PUTRT,PUT1

PUTC:	JMP	@#PUT1
PUTRT=.-2

PUT1:	MOVB	R0,OUBUF
	DIR$	#OUDPB		; QIO to the terminal
	MOV	$DSW,R0
	BCS	PUT10		; j if directive rejected
	WTSE$S	OUEFN		; wait for it
	MOVB	OUSTAT,R0
	BPL	PUT10		; j if no error
	SEC
PUT10:	RTS	R5


; put string etc.

	.GLOBL	PUTS,PUTS5,PUTSF,PUT2F,PUTN

; put .ASCIZ string (R5)+

PUTS5:	MOVB	(R5)+,R0
	BEQ	2$
	JSR	R5,PUTC
	BR	PUTS5
2$:	RTS	PC

; put .ASCIZ string following call

PUTSF:	JSR	PC,PUTS5
	INC	R5
	BIC	#1,R5		; round up to next word
	RTS	R5

; put 1/2 chars following call (preserve R0)

PUT2F:	MOV	R0,-(SP)
	MOVB	(R5)+,R0
	BEQ	1$
	JSR	R5,PUTC
1$:	MOVB	(R5)+,R0
	BEQ	2$
	JSR	R5,PUTC
2$:	MOV	(SP)+,R0
	RTS	R5

; put newline

PUTN:	JSR	R5,PUT2F
	 .BYTE	CR,LF
	RTS	R5

; put string (R0)+

PUTS:	MOV	R5,-(SP)
	MOV	R0,R5
	JSR	PC,PUTS5
	MOV	R5,R0
	MOV	(SP)+,R5
	RTS	R5

	.END
