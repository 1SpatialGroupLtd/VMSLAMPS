 % Procset for inclusion in PS output from GKSPSLIB
 % Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
 % Created (in this form)		Clarke Brunt	17-March-1994
 % Updated				Clarke Brunt	22-March-1994
 % Updated				Clarke Brunt	28-March-1994
 % Updated				Clarke Brunt	29-July-1994
 % Updated				Clarke Brunt	18-November-1997
%%BeginResource procset LSL-GKS 1.2 1
 %
 % Beware length of dictionaries - amend as required
userdict /LSL-GKS 48 dict dup begin put
/initialize
{
  LSL-GKS begin
  userdict /LSL-GKS-VARS 25 dict dup begin put
  /COLTAB MAXCOL 1 add array def
  /TINTTAB MAXCOL 1 add array def
  /SEP -1 def
  /SEPARATION where
  { pop SEPDICT SEPARATION known
    { /SEP SEPDICT SEPARATION get def }
    { (Unknown separation\n) print } ifelse
  } if
  /SEPRGB 3 array def
  /SEPCMYK 4 array def
  /FNTDICT MAXFNT dict def	% dictionary for fonts
  /UCR dup where {pop pop} { {} def} ifelse
  /BG dup where {pop pop} { {} def} ifelse
  /currentcmykcolor where
    {pop /CMYK /currentcmykcolor load def} if
  /k /CL load def
  /K /CL load def
  /colorimage where { pop } { pop false } ifelse
  {
    /IM { false 3 colorimage } bind def
    /NCOL 3 def
    /CISTR /C3STR load def
  } {
    /IM /image load def
    /NCOL 1 def
    /CISTR /C1STR load def
  } ifelse
  /IMGMAT 6 array def			% matrix for images
 % length needed for IBITC - 128 bytes = 1024 bits
 % each expanded into a byte
 % IBYTEC requires at most 128 * NCOL
  /IMGSTR 1024 NCOL mul string def	% string for images
  /IMG24 8 NCOL mul string def
  /IMGBYT 1 string def			% byte for images
  /IMG3 NCOL string def			% single string for images
  /BF [ NCOL dup string exch string ] def		% back/fore
  /BW [ 1024 NCOL mul dup string exch string ] def	% black/white
  /BWMONO false def			% BW set for mono image?
  /IMGODD false def			% non-mult of 8 image?
  /IMGWID 0 def				% width of image
  /IMGCNT 0 def				% number done
  end end
  LSL-GKS begin
  LSL-GKS-VARS begin
} def
/terminate { end end } def
/MAX { 2 copy lt { exch } if pop } bind def
/u {} def
/U {} def
/l /lineto load def
/m /moveto load def
/c /curveto load def
/AA /arc load def
/AC /arcn load def
/d /setdash load def
/w /setlinewidth load def
/j /setlinejoin load def
/J /setlinecap load def
/s {closepath stroke} bind def
/S /stroke load def
/F /eofill load def
/e { gsave translate rotate } bind def
/t { 0 0 moveto show grestore } bind def
/MAXCOL 255 def			% colours 0-255 allowed
/SEPDICT 8 dict def
SEPDICT begin
  /C 3 def /c 3 def
  /M 2 def /m 2 def
  /Y 1 def /y 1 def
  /K 0 def /k 0 def
currentdict readonly pop end
/CMYK
{ currentrgbcolor 3 copy MAX MAX neg 1 add
  dup BG 5 1 roll UCR
  3 { exch 1 index add neg 1 add 5 1 roll
    } repeat pop
} bind def
/CL				% set colour from number on stack
{ SEP type /integertype eq
  { dup COLTAB exch get
    dup null eq
    { pop 0 eq {1} {0} ifelse setgray }	% 0 white, others black
    { exec pop }
    ifelse
    SEP 0 ge				% CMYK separation
    { CMYK SEP index neg 1 add setgray
      4 {pop} repeat
    } if
  }
  { TINTTAB exch get setcolor }
  ifelse
} bind def
/CALCTINT
{ /SEP -1 def
  0 1 MAXCOL {CL currentgray 1 exch sub} for
  TINTTAB astore pop
} bind def
/TTRGB				% tint transform for RGB
{ SEPRGB {1 sub 1 index mul 1 add exch} forall pop
} bind def
/TTCMYK				% tint transform for CMYK
{ SEPCMYK {1 index mul exch} forall pop
} bind def
/SETSEP
{ dup type /stringtype eq
  { CALCTINT
    /SEP exch def
    setoverprint
    /RGB eq
    { SEPRGB  astore pop
      [/Separation SEP /DeviceRGB /TTRGB load]
      setcolorspace
    }
    { SEPCMYK astore pop 
      [/Separation SEP /DeviceCMYK /TTCMYK load]
      setcolorspace
    } ifelse
  }
  { pop /SEP -1 def }
  ifelse
} bind def
/MAXFNT 127 def			% 127 fonts allowed
/z				% size /Fn z -
{ dup FNTDICT begin where
  { pop dup load dup type /dicttype eq
    { exch pop }
    { exec dup 3 1 roll def } ifelse }
  { /Courier findfont dup 3 1 roll def } ifelse end
  exch scalefont setfont
} bind def
/ReENCODE			% font /newname encoding ReEncode font
{ 3 -1 roll			% /n e fo
  dup length dict dup 3 -1 roll	% /n e fn fn fo
  { 1 index /FID ne
    { put dup }
    { pop pop }
    ifelse
  } forall			% /n e fn fn
  3 -1 roll /Encoding exch put	% /n fn
  definefont			% fn
} bind def
/C3STR				% form string for colour index
{ CL currentrgbcolor
  4 -1 roll
  2 -1 0
  { 2 copy 5 -1 roll
    255 mul cvi put pop
  } for
} bind def
/C1STR				% form string for colour index
{ CL currentgray
  255 mul cvi exch dup 0 4 -1 roll put
} bind def
/RDCH				% read next hex char, leave on stack
{ currentfile IMGBYT readhexstring pop 0 get
} bind def
/MAT		% make image matrix : mat MAT - (matrix in IMGMAT)
{ IMGMAT astore } bind def
 % fill string s with string c until >= l
 %/FILLSTR			% l s c FILLSTR l s
 %{
 %  dup length
 %  0 exch 4 index 1 sub
 %  {
 %    3 copy exch putinterval pop
 %  } for pop
 %} bind def
 % fill string s with string c until >= l, length 2**n times
/FILLSTR			% l s c FILLSTR l s
{
  dup length exch			% l s lc c
  2 index exch 0 exch putinterval	% l s lc
  { dup 3 index ge { pop exit } if
    2 copy 2 copy
    0 exch				% l s lc s lc s 0 lc
    getinterval				% l s lc s lc c
    putinterval				% l s lc
    2 mul
  } loop
} bind def
/IBYTE		% image proc for byte data
{ IMG3 RDCH CISTR } bind def
/IBYTEC		% image proc for compressed byte data
{
  RDCH					% c
  dup
  127 and NCOL mul			% byte count
  exch 128 and				% count flag
  0 eq					% run-length, or literals
  { IMGSTR IBYTE			% c s s3
    FILLSTR				% c s
  }
  {					% literal bytes
    IMGSTR 0 NCOL 3 index 1 sub		% c str 0 n c-1
    {
      1 index exch			% c str str i
      IBYTE putinterval 
    } for
  } ifelse
  exch 0 exch getinterval
} bind def
/IBIT		% image proc for bit data, does 8 bits
{
  IMG24 RDCH
  0 NCOL dup 7 mul
  { exch dup 1 bitshift exch
    128 and -7 bitshift BF exch get
    exch 3 index exch
    5 2 roll putinterval
  } for pop
  IMGODD	% truncate end of line if non mult of 8
  {
    /IMGCNT IMGCNT 8 NCOL mul add dup IMGWID gt
    {
      IMGWID sub		% excess
      neg 8 NCOL mul add	% wanted
      3 -1 roll exch 0 exch getinterval exch
      0			% zero IMGCNT
    } if
    def			% define IMGCNT
  } if
} bind def
/IBI		% image proc for bit data, does 8 bits
{
  IMG24 RDCH
  0 NCOL dup 7 mul
  { exch dup 1 bitshift exch
    128 and -7 bitshift BF exch get
    exch 3 index exch
    5 2 roll putinterval
  } for pop
} bind def	% this is IBIT but without the ODD test
/IBITC		% image proc for compressed bit data
{
  currentfile IMGBYT readhexstring pop 0 get	% byte
  dup
  -7 bitshift					% byte bit
  exch 127 and					% bit count
  dup 0 eq
  { pop 0 eq
    { IBI }					% literal byte
    { currentfile IMGBYT readhexstring pop 0 get
      dup
      127 and NCOL mul 8 mul			% byte count
      exch -7 bitshift				% count bit
      0 eq
      {						% repeated byte
        IMGSTR					% c str
        IBI					% c str byt
        FILLSTR					% c str
      }
      {						% literal bytes
        IMGSTR 0 NCOL 8 mul 3 index 1 sub	% c str 0 1 c-1
        {
          1 index exch				% c str str i
          IBI putinterval 
        } for
      } ifelse
      exch 0 exch getinterval
    } ifelse
  }
  { NCOL mul 8 mul
    exch BW exch get exch
    0 exch getinterval
  } ifelse
  IMGODD	% truncate end of line if non mult of 8
  {
    /IMGCNT IMGCNT 2 index length add dup IMGWID gt
    {
      IMGWID sub		% excess
      neg 2 index length add	% wanted
      3 -1 roll exch 0 exch getinterval exch
      0			% zero IMGCNT
    } if
    def			% define IMGCNT
  } if
} bind def
/IBITM		% image proc for mono bit data
{
  currentfile IMGBYT readhexstring pop
} bind def
/IBITCM		% image proc for compressed mono bit data
{
  currentfile IMGBYT readhexstring pop 0 get	% byte
  dup
  -7 bitshift					% byte bit
  exch 127 and					% bit count
  dup 0 eq
  { pop 0 eq
    { currentfile IMGBYT readhexstring pop }	% literal byte
    { currentfile IMGBYT readhexstring pop 0 get
      dup
      127 and					% byte count
      exch -7 bitshift				% count bit
      0 eq
      {						% repeated byte
        IMGSTR					% c str
        currentfile IMGBYT readhexstring pop	% c str byt
        FILLSTR					% c str
        exch 0 exch getinterval
      }
      {						% literal bytes
        IMGSTR exch 0 exch getinterval
        currentfile exch readhexstring pop
      } ifelse
    } ifelse
  }
  { exch BW exch get exch
    0 exch getinterval
  } ifelse
} bind def
/IM0		% byte image: width height mat IM0 -
{ MAT 8 exch /IBYTE load IM } bind def
/IM1		% compressed image: width height mat IM1 -
{ MAT 8 exch /IBYTEC load IM } bind def
/IMB0		% bit image: width height mat fore IMB0 -
{ BF 0 get 0 CISTR pop BF 1 get exch CISTR pop
  MAT 8 exch /IBIT load
  4 index dup 8 mod 0 ne dup /IMGODD exch def	% width mult of 8?
  { /IMGWID exch NCOL mul def /IMGCNT 0 def }
  { pop } ifelse
  IM
} bind def
/IMB1		% compressed bit image: w h mat fore IMB1 -
{ BF 0 get 0 CISTR BW 0 get 0 NCOL getinterval ne
    BWMONO or {
    BW 0 get dup length exch BF 0 get
    FILLSTR pop pop } if
  BF 1 get exch CISTR BW 1 get 0 NCOL getinterval ne
    BWMONO or {
    /BWMONO false def
    BW 1 get dup length exch BF 1 get
    FILLSTR pop pop } if
  MAT 8 exch /IBITC load
  4 index dup 8 mod 0 ne dup /IMGODD exch def	% width mult of 8?
  { /IMGWID exch NCOL mul def /IMGCNT 0 def }
  { pop } ifelse
  IM
} bind def
/IMM0		% mono bit image: w h mat fore IMM0 -
{ pop		% discard colour
  MAT 1 exch /IBITM load image
} bind def
/IMM1		% compressed mono bit image: w h mat fore IMM1 -
{ pop		% discard colour
  BWMONO not {
 % nb only need 128 bytes filled here
    /BWMONO true def
    128 BW 0 get IMGBYT dup 0 0 put FILLSTR pop pop
    128 BW 1 get IMGBYT dup 0 255 put FILLSTR pop pop
  } if
  MAT 1 exch /IBITCM load image
} bind def
currentdict readonly pop end
%%EndResource
