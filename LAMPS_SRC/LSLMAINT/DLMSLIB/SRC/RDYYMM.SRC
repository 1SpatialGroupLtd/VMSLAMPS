C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1983-11-08 10:18:14.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION RDYYMM( OUTPUT )
C
***	IDENT	08NO83
***	MODULE	RDYYMM
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs
C
C function to read a date of the form YYMM and output it as binary days
C since whenever
C
C it returns FALSE on success, TRUE on failure
C
	IMPLICIT NONE
C
C we return
C
	INTEGER*4	OUTPUT	! our final date format
C
C and we call
C
	LOGICAL		RDINT	! read a number
	LOGICAL		DTOBIN	! convert date to binary days
C
C workspace
C
	INTEGER*4	YEAR	!
	INTEGER*4	MONTH	! the date we work out
	INTEGER*4	DAY	!
	INTEGER*2	NUM	! short int
	INTEGER*4	NUMBER	! long one
	INTEGER*2	DCP1,DCP2	! decode pointer saves
C
	EQUIVALENCE	(NUM,NUMBER)
C
C
	RDYYMM = .TRUE.		! start pessimistically
	NUMBER = 0		! be sure upper two bytes zero
	CALL DCPSAV( DCP1 )	! decode pointer on entry
C
C we read the digits in...
C
	CALL SETWIN( , 2 )	! read 2 digits
	IF ( RDINT( NUM ) ) THEN
	   CALL WRITEF('*** Error reading year of date')
	   RETURN
	ENDIF
	YEAR = 1900 + NUMBER
C
	CALL SETWIN( , 2 )	! read another 2 digits
	IF ( RDINT( NUM ) ) THEN
	   CALL WRITEF('*** Error reading month of date')
	   RETURN
	ENDIF
	MONTH = NUMBER
C
	CALL SETWIN( , )	! unset window
C
C check decode pointer
C
	CALL DCPSAV ( DCP2 )
	IF ( (DCP2-DCP1).NE.4 ) THEN
	   CALL TTWSTR('*** Error reading date')
	   RETURN
	ENDIF
C
C so we have our digits - work out the date
C
	DAY   = 1
	IF (MONTH.EQ.0) MONTH = 1		! to stop invalid date
C
C and transform it to binary days
C
	IF ( DTOBIN( DAY, MONTH, YEAR, OUTPUT ) ) RETURN
C
C otherwise we got the date out alright
C
	RDYYMM = .FALSE.	! success
	RETURN
C
	END
