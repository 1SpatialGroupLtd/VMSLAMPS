C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1983-11-08 09:33:18.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION BINTOD( INPUT, DAY, MONTH, MONTHD, YEAR )
C
***	MODULE	BINTOD
***	IDENT	08NO83
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C
C Author TJ Ibbs
C
C this function transforms BINary days to a Date
C
C as traditional, it returns TRUE for failure, FALSE for success
C
	IMPLICIT NONE
C
C we were passed
C
	INTEGER*4	INPUT		! the values as binary days
C
	INTEGER*4	DAY		! day number
	INTEGER*4	MONTH		! month number (1-12)
	CHARACTER*3	MONTHD		! month name
	INTEGER*4	YEAR		! year (four digits)
C
C functions called
C
	INTEGER*4	SYS$BINTIM
	INTEGER*4	SYS$NUMTIM
	INTEGER*4	LIB$EMUL
	INTEGER*4	LIB$ADDX
C
C workspace
C
	INTEGER*4	TOTDAY(2)	! INPUT plus days before 1900
	INTEGER*4	DZERO(2)	! our 'zero' date
	INTEGER*4	TICKS(2)	! quadword for ticks in a day
	INTEGER*4	TEMP(2)		! for working in
	INTEGER*2	NUMRES(7)	! result of time
	INTEGER*4	IERR		! error return code
	CHARACTER*3	NAME(12)	! names of the months
C
C
	DATA	NAME / 'Jan','Feb','Mar','Apr','May','Jun',
     &		       'Jul','Aug','Sep','Oct','Nov','Dec' /
C
C and now the code
C Assume failure is imminent
	BINTOD = .TRUE.
C
C first we work out the time of the zero date - the time in tiny units
C of the start of 1 Jan 1900
C
	IERR = SYS$BINTIM( '1-JAN-1900 00:00:00.00', DZERO )
	IF (.NOT.IERR) GOTO 999
C
C and now we must transform that into something more useful
C
	TOTDAY(1) = INPUT		! quadword for total days -
	TOTDAY(2) = 0			! start with the input
C
C first work out how many ticks there are in a day...
C
	TICKS(1) = 10 000 000		! number in a second
	TICKS(2) = 0
C
C and multiply by the number of seconds in a day...
C
	IERR = LIB$EMUL( TICKS(1), 24*60*60, 0, TICKS )
	IF (.NOT.IERR) GOTO 999
C
C we must now calculate the product of the days so far and the number
C ticks in a day
C
	IERR = LIB$EMUL( TICKS(1), TOTDAY(1), 0, TEMP )
	IF (.NOT.IERR) GOTO 999
C
	TEMP(2) = TEMP(2) + TICKS(2)*TOTDAY(1)
C
C and to work out the total number of ticks since DECs start of count,
C add on DZERO
C
	IERR = LIB$ADDX( TEMP, DZERO, TOTDAY, 4 )
	IF (.NOT.IERR) GOTO 999
C
C and finally, find out the time that represents...
C
	IERR = SYS$NUMTIM( NUMRES, TOTDAY )
	IF (.NOT.IERR) GOTO 999
C
C and transfer the results to the right places
C
	DAY    = NUMRES(3)
	MONTH  = NUMRES(2)
	YEAR   = NUMRES(1)
	MONTHD = NAME(MONTH)
C
	BINTOD = .FALSE.		! success
	RETURN
C
C error return
C
999	CALL GEN_SYSMSG(IERR)
	RETURN
C
	END
