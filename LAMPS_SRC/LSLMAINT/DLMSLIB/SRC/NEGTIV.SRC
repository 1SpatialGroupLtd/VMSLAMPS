	LOGICAL FUNCTION NEGTIV
C
***	IDENT	08NO83
***	MODULE	NEGTIV
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 11 March 1983
C
C This routine looks at the current 36 bit word, and if it is negative,
C it converts it to 2s complement. It also removes -0 !!
C If it was -ve and NOT -0, then it returns TRUE, otherwise FALSE
C
	IMPLICIT NONE
C
***	COMMON/CMNDFAD:DFAD/	! for buffer
C
	NEGTIV = .FALSE.
C
C we look at the 18th bit of the high 1/2 word to determine if the
C thing is positive...
C
	IF ( (DFABUF(DFAPTR+1).AND.'20000'X).EQ.0 ) RETURN
C
C add one to the low 1/2 word
C
	DFABUF(DFAPTR) = DFABUF(DFAPTR)+1		! add one
C
C do we need to carry into the high 1/2 word?
C
	IF ( DFABUF(DFAPTR).GT.'3FFFF'X ) THEN	! carry up
C
C	 yes - low 1/2 word is thus zero, do the carry
C
	   DFABUF(DFAPTR)   = 0
	   DFABUF(DFAPTR+1) = DFABUF(DFAPTR+1)+1
C
C	 and if the high 1/2 word overflows, was -ve zero
C
	   IF ( DFABUF(DFAPTR+1).GT.'3FFFF'X ) THEN
	      DFABUF(DFAPTR+1) = 0		! zero high 1/2 too
	      RETURN
	   ENDIF
	ENDIF
C
C now we have to convert our 2s complement (but 36 bit) value into
C the equivalent +ve number...
C
C in 2s complement, we must complement and add 1
C first we complement (nice 1/2 words)
C
	DFABUF(DFAPTR)   = NOT( DFABUF(DFAPTR) )
	DFABUF(DFAPTR+1) = NOT( DFABUF(DFAPTR+1) )
C
C and reduce to 18 bits again
C
	DFABUF(DFAPTR)   = DFABUF(DFAPTR).AND.'3FFFF'X
	DFABUF(DFAPTR+1) = DFABUF(DFAPTR+1).AND.'3FFFF'X
C
C and now do the adding one...
C
	DFABUF(DFAPTR)   = DFABUF(DFAPTR) + 1
	IF ( DFABUF(DFAPTR) .GT. '3FFFF'X ) THEN
	   DFABUF(DFAPTR)   = 0
	   DFABUF(DFAPTR+1) = DFABUF(DFAPTR+1) + 1
	   IF (DFABUF(DFAPTR+1).GT.'3FFFF'X) THEN
	      CALL WRITEF('*** Overflow in -ve number - DFABUF %N,%N',
     &						    DFAPTR, DFAPTR+1 )
	   ENDIF
	ENDIF
C
	NEGTIV = .TRUE.				! and it was -ve
C
	RETURN
	END
