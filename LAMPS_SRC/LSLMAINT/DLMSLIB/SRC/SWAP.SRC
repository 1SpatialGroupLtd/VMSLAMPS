C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1983-11-08 10:19:22.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE SWAP( INBUF, BYTCNT )
C
***	IDENT	08NO83
***	MODULE	SWAP
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs,  2 March 1983
C
C Univac output stripes onto the tape in the reverse order to that
C which the VAX would naturally expect, so we must reverse the
C bytes we have read from the tape
C
C Thus where we might find the following stripe sequemce on the tape
C (with most significant at the right, a block of 9 stripes, which maps
C onto 2 Univac words)
C
C	E8  74  1B  00  60  5C  39  80  00
C
C what we obtain if we reverse this is
C
C	00  80  39  5C  60  00  1B  74  E8
C
C and we can split this into the 2 words thus
C
C	00 80 39 5C 6    0 00 1B 74 E8
C
C	bottom word	 top word	(in the wrong order, of course)
C
C all blocks have an even number of words in them, and thus their
C lengths are divisible by 9
C
	IMPLICIT NONE
C
C common
C
***	COMMON/CMNDFAD:PARAMS/		! for ARM
C
C passed
C
	INTEGER*2	BYTCNT		! length of buffer
	BYTE		INBUF(BYTCNT)	! and the buffer itself
C
C workspace
C
	INTEGER*2	BASE		! DO loop count
	BYTE		TEMP(4)		! temporary storage
C
C and now do the swapping around
C
	DO 200 BASE = 1,BYTCNT,9
C
	   TEMP( 1 ) = INBUF( BASE )		! save 1
	   TEMP( 2 ) = INBUF( BASE+1 )		! save 2
	   TEMP( 3 ) = INBUF( BASE+2 )		! save 3
	   TEMP( 4 ) = INBUF( BASE+3 )		! save 4
	   INBUF( BASE )   = INBUF( BASE+8 )	! 1 becomes 9
	   INBUF( BASE+1 ) = INBUF( BASE+7 )	! 2 becomes 8
	   INBUF( BASE+2 ) = INBUF( BASE+6 )	! 3 becomes 7
	   INBUF( BASE+3 ) = INBUF( BASE+5 )	! 4 becomes 6
C	   					! 5 becomes 5
	   INBUF( BASE+5 ) = TEMP( 4 )		! 6 becomes 4
	   INBUF( BASE+6 ) = TEMP( 3 )		! 7 becomes 3
	   INBUF( BASE+7 ) = TEMP( 2 )		! 8 becomes 2
	   INBUF( BASE+8 ) = TEMP( 1 )		! 9 becomes 1
C
	   IF ( (ARM.AND.ARMSTR) .NE. 0 ) THEN	! if want arm info
C
	      CALL EXPAND('%N to %N swap to: ',BASE+8,BASE)
	      CALL APPEND('%P0%^B%X2, %^B%X2, %^B%X2, %^B%X2, ',
     &					INBUF(BASE+8), INBUF(BASE+7),
     &					INBUF(BASE+6), INBUF(BASE+5)  )
	      CALL WRITAP('%P0%^B%X2, %^B%X2, %^B%X2, %^B%X2, %^B%X2',
     &		 	   INBUF(BASE+4), INBUF(BASE+3), INBUF(BASE+2),
     &					  INBUF(BASE+1), INBUF(BASE)  )
C
	   ENDIF
C
200	CONTINUE		! swap around the next pair of words
C
C and that's really all we do
C
	RETURN
	END
