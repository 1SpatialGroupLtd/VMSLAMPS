	PROGRAM CVT
C
***	MODULE CVT
***	IDENT 15OC87
C
	IMPLICIT NONE
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C Author  R. Fairbairns		Coded 4.xi.81
C
C program to test new command routine integer input stuff
C
C value reading modes
	PARAMETER	MODE_NULL = 0	! null value - decimal
	PARAMETER	MODE_HEX  = 1	! hexadecimal
	PARAMETER	MODE_OCT  = 2	! octal
C
C workspace
	BYTE		BVALUE(4)	! to be equivalenced to VALUE
	BYTE		CH		! for detecting end of line
	INTEGER*2	CH2		! for moaning
	  EQUIVALENCE	  (CH2,CH)
	BYTE		CHBUF(80)	! character array
	INTEGER*4	CHDESC(2)	! pseudo-descriptor
	INTEGER*4	CHLONG(20)	! ditto, qua longwords
	  EQUIVALENCE	  (CHBUF(1), CHLONG(1))
	INTEGER*4	CHPTR		! pointer on character array
	INTEGER*4	CMD		! decoded switch number
	LOGICAL		FROM_CLI	! TRUE iff from command line
	INTEGER*4	I		! loop variable
	LOGICAL		INCHS		! TRUE if reading characters
	INTEGER*2	NCHS		! number of characters read from
					!  the terminal
	LOGICAL		TO_DO_ERROR	! TRUE if /ERROR switch
	INTEGER*4	TRUNC_VALUE	! truncation of value to given length
	INTEGER*4	VAL_LENGTH	! length of value (in bytes)
	INTEGER*4	VAL_MODE	! mode for reading values
C					! (to be set to a MODE_xxx par)
	INTEGER*4	VALUE		! value to be read
	  EQUIVALENCE	  (VALUE, BVALUE(1))
C
C command table
	EXTERNAL	CVTCOM_CMD_TABLE
	INTEGER*4	CVTCOM_CMD_TABLE
C
C functions called
	INTEGER*2	TTRSTR, GETCLI	! from VIOLIB proper
	LOGICAL		RDCH, RDCHS	! ) from
	LOGICAL		RDLHEX		! )
	LOGICAL		RDLONG		! )  my
	LOGICAL		RDLOCT		! )
	INTEGER*4	RDSTR		! )   CMDLIB
	INTEGER*4	RDCOMM		! read switch name and decode
C
***	COMMON/HERE:CMDCOM/
***	COMMON/LSL$CMNVIO:TXTC/
C
C preset stuff
	INTEGER*2	SP2, UPARR
	BYTE		SP(2)
	EQUIVALENCE	(SP2, SP(1))
	DATA		SP/' ',0/
	DATA		UPARR/'^@'/
C
C set up dummy text descriptor
	CHDESC(2) = %LOC(CHBUF(1))
C
C initialise controls
	VAL_MODE = MODE_NULL
	VAL_LENGTH = 4
	TO_DO_ERROR = .FALSE.
C
C was there something from the command line?
	TXTPTR = 80
	NCHS = GETCLI(TXTDSC)
	IF (NCHS.LE.0) GOTO 10
C
C and behold! there is
	TXTPTR = NCHS
	FROM_CLI = .TRUE.
	GOTO 30
C
C introduce ourselves
10	CALL WRITEF('Robin''s little conversion program')
	FROM_CLI = .FALSE.
C
C main llop (oops)
20	NCHS = TTRSTR(, 'Number> ')
	IF (NCHS.EQ.-10) CALL EXIT
C
C decode the line
30	CALL BSLN
C
C are there switches at the start of the line?
31	IF (RDCHS(CH)) THEN
	  IF (FROM_CLI) THEN
	    GOTO 10
	  ELSE
	    GOTO 20
	  ENDIF
	ENDIF
	IF (CH.NE.'/') THEN
	  CALL BSCH
	  GOTO 34
	ENDIF
	CMD = RDCOMM(CVTCOM_CMD_TABLE)
	IF (CMD.LE.0) GOTO 31
C
C despatch on command number
	GOTO (3110,3120,3130,3140,3150,3160,3170,3180), CMD
C
C /BYTE
3110	VAL_LENGTH = 1
	GOTO 31
C
C /WORD
3120	VAL_LENGTH = 2
	GOTO 31
C
C /ADDRESS
3130	VAL_LENGTH = 3
	GOTO 31
C
C /LONGWORD
3140	VAL_LENGTH = 4
	GOTO 31
C
C /DECIMAL
3150	VAL_MODE = MODE_NULL
	GOTO 31
C
C /HEXADECIMAL
3160	VAL_MODE = MODE_HEX
	GOTO 31
C
C /OCTAL
3170	VAL_MODE = MODE_OCT
	GOTO 31
C
C /error
3180	TO_DO_ERROR = .TRUE.
	GOTO 31
C
C end of switch decoding (if any) for this line of input
34	INCHS = .FALSE.
C
C come back for second and subsequent numbers
35	IF (RDCHS(CH)) GOTO 1000
	IF (CH.NE.'''' .AND. CH.NE.'"') GOTO 39
	INCHS = .TRUE.
C
C zero string before we start
	DO I = 1,20
	  CHLONG(I) = 0
	ENDDO
C
C read string
	CHDESC(1) = 80
	CHPTR = 1
	CHDESC(1) = RDSTR(CHDESC, CH)
C
C read value
39	RDCOMM_EXCP = 1
	IF (INCHS) THEN
	  VALUE = CHLONG(CHPTR)
	  CHPTR = CHPTR+1
	  IF (CHPTR*4.GT.CHDESC(1)+3) INCHS = .FALSE.
	ELSE
	  CALL BSCH
	  IF (VAL_MODE .EQ. MODE_NULL) THEN
	    IF (RDLONG(VALUE)) GOTO 100
	  ELSE IF (VAL_MODE .EQ. MODE_HEX) THEN
	    IF (RDLHEX(VALUE)) GOTO 100
	  ELSE IF (VAL_MODE .EQ. MODE_OCT) THEN
	    IF (RDLOCT(VALUE)) GOTO 100
C	  else what??
	  ENDIF
	ENDIF
C
C establish length for EXPAND
	GOTO (3910,3920,3930,3940), VAL_LENGTH
C
C byte value
3910	CALL EXPAND('%^B')
	IF (VALUE.LT.0) THEN
	  TRUNC_VALUE = ((VALUE+128) .AND. 255)-128
	ELSE
	  TRUNC_VALUE = VALUE .AND. 255
	ENDIF
	GOTO 3990
C
C word value (this is EXPAND's default)
3920	CALL EXPAND('%^W')
	IF (VALUE.GE.0) THEN
	  TRUNC_VALUE = VALUE .AND. 'FFFF'X
	ELSE
	  TRUNC_VALUE = ((VALUE+'8000'X) .AND. 'FFFF'X)-'8000'X
	ENDIF
	GOTO 3990
C
C '32016 address' value
3930	TRUNC_VALUE = VALUE
	CALL EXPAND('%^L')
	IF (VALUE.GE.0) THEN
	  VALUE = VALUE .AND. 'FFFFFF'X
	ELSE
	  VALUE = ((VALUE+'800000'X) .AND. 'FFFFFF'X)-'800000'X
	ENDIF
	GOTO 3990
C
C longword value
3940	TRUNC_VALUE = VALUE
	CALL EXPAND('%^L')
C
C have we truncated with that little lot?
3990	IF (VALUE.NE.TRUNC_VALUE) CALL TTWSTR('*** Value truncated')
C
C is there a naughty in the character representation?
	DO I = 1,VAL_LENGTH
	  IF ((BVALUE(I).AND.127).LT.32) GOTO 50
	ENDDO
C
C simple print value, and loop
	CALL WRTAPP('Dec %I11  Hex %X9  Oct %O12  Char <%C>',
     &                  VALUE,   VALUE,    VALUE,     VALUE)
	GOTO 70
C
C complex print value
50	CALL APPEND('Dec %I11  Hex %X9  Oct %O12  Char <%^W',
     &                  VALUE,   VALUE,    VALUE)
	DO I = 1,VAL_LENGTH
	  CH2 = BVALUE(I).AND.127
	  IF (CH2.LT.32) THEN
	    CH2 = (CH2*256)+UPARR
	  ELSE
	    CH2 = (CH2*256)+SP2
	  ENDIF
	  CALL APPEND('%C', CH2)
	ENDDO
	CALL WRTAPP('>')
C
C finished numeric output - do we need the error output, too?
70	IF (TO_DO_ERROR) CALL GEN_SYSMSG(VALUE)
C
C is there anything further on the line?
75	IF (INCHS) GOTO 39
	IF (RDCHS(CH)) GOTO 80
	CALL BSCH
	GOTO 35
C
C ain't nothing more on this line: do we get another one?
80	IF (FROM_CLI) CALL EXIT
	GOTO 20
C
C it weren't there
100	IF (.NOT.RDCOMM_EXCP) GOTO 900
	CH2 = 0
	IF (RDCH(CH)) GOTO 110
	CALL WRITEF('"%C" unexpected', CH2)
	GOTO 1000
C
C end of line
110	CALL WRITEF('Unexpected end of line')
	GOTO 1000
C
C exception in reading the number - generate the relevant message
900	GOTO (910,920,930,940,950), ERRNUM-ERRFDV+1
C
C a silly:
	ERRNUM = ERRBEX
	CALL WRITEF('Bad exception code')
	GOTO 1000
C
910	CALL WRITEF('Floating divide by zero')
	GOTO 1000
C
920	CALL WRITEF('Floating overflow')
	GOTO 1000
C
930	CALL WRITEF('Floating underflow')
	GOTO 1000
C
940	CALL WRITEF('Integer divide by zero')
	GOTO 1000
C
950	CALL WRITEF('Integer overflow')
C
C are we to try again?
1000	IF (FROM_CLI) CALL EXIT
	GOTO 75
C
	END
