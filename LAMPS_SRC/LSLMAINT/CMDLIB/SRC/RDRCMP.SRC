	LOGICAL FUNCTION RDREAL_CMPT(R, HADSGN, HADDOT_ARG)
C
***	MODULE	RDREAL_CMPT
***	IDENT	17SE84
C
	IMPLICIT CHARACTER*1 (A-Z)
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England
C Author R. Fairbairns
C
C RDREAL Coded 31.xii.76
C Rehashed as RDRCMP 13.xii.78
C Renamed (for what it's worth) RDREAL_CMPT 20.i.82
C
C To read a double precision component of real number
C  from the command buffer
C  (Doesn't deal with 'E'xponents)
C Function result is TRUE if there's no real number left on the line
C
	DOUBLE PRECISION R
C
C R is to hold the double-length real result
C
	LOGICAL*1 HADSGN, HADDOT_ARG
C
C HADSGN is TRUE if to suppress signs
C	 (e.g. if in denominator of a fraction)
C HADDOT_ARG set TRUE by the function if '.' encountered
C
	INCLUDE '($SSDEF)/NOLIST'
C
***	COMMON/HERE:CMDCOM/
***	COMMON/LSL$CMNVIO:TXTC/
C
C workspace
	DOUBLE PRECISION FRACTN		! the fractional part multiplier
	BYTE		CH		! a character
	LOGICAL*1	INFRCT		! TRUE => we're in fraction part
	LOGICAL*1	NEGTVE		! TRUE => '-' encountered
C
C functions called
	LOGICAL RDCH, RDCHS
C
C condition handler
	EXTERNAL	RDCOMM_CHAND
	INTEGER*4	RDCOMM_CHAND
C
C establish handler in our call frame
	CALL LIB$ESTABLISH(RDCOMM_CHAND)
C
C no exception yet
	RDCOMM_EXCP = SS$_NORMAL
C
C preliminary ideas
	R = 0.0D0
	FRACTN = 1.0D0
	INFRCT = .FALSE.
	NEGTVE = .FALSE.
C
C anything on the line?
	RDREAL_CMPT = RDCHS(CH)
	IF (RDREAL_CMPT) RETURN
	CALL BSCH
1	RDREAL_CMPT = RDCH(CH)
	IF (RDREAL_CMPT) RETURN
C
C strip off leading '+' and '-' signs
	IF (HADSGN.OR.INFRCT.OR.
     &      (CH.NE.'+'.AND.CH.NE.'-')) GOTO 2
	IF (CH.EQ.'-') NEGTVE = .NOT.NEGTVE
	HADSGN = .TRUE.
	GOTO 1
C
C any 'non-fractional' part?
2	IF (CH.NE.'.'.OR.INFRCT) GOTO 3
	INFRCT = .TRUE.
	HADDOT_ARG = .TRUE.
	GOTO 1
C
C any number, after stripping of the leaders?
3	CALL BSCH
	RDREAL_CMPT = CH.LT.'0'.OR.CH.GT.'9'
	IF (RDREAL_CMPT) RETURN
C
C loop adding digits
4	IF (RDCH(CH)) GOTO 8
	IF (CH.EQ.'.') GOTO 6
	IF (CH.LT.'0'.OR.CH.GT.'9') GOTO 7
	IF (INFRCT) GOTO 5
C
C non-fraction digit
	R = R*10.0D0+(CH-'0')
	IF (RDCOMM_EXCP) GOTO 4
	GOTO 7
C
C digit of fraction
5	FRACTN = FRACTN*0.1D0
	IF (.NOT.RDCOMM_EXCP) GOTO 7
	R = R+(CH-'0')*FRACTN
	IF (RDCOMM_EXCP) GOTO 4
	GOTO 7
C
C '.' - introduces a fraction, or terminates if already in
C  fractional part
6	HADDOT_ARG = .TRUE.
	IF (.NOT.INFRCT) GOTO 9
C
C terminating character, or one provoking overflow
7	CALL BSCH
C
C terminates at e.o.l.
8	IF (NEGTVE) R = -R
C
C throw away our efforts if overflow encountered
	IF (.NOT.RDCOMM_EXCP) RDREAL_CMPT = .TRUE.
C
C and force result zero if any error
	IF (.NOT.RDCOMM_EXCP) R = 0.0D0
	RETURN
C
C start of fraction after having digits
9	INFRCT = .TRUE.
	GOTO 4
C
	END
