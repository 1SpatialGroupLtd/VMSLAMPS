	INTEGER*4 FUNCTION RDCOMM_CHAND(SIGARG, MCHARG)
C
***	MODULE RDCOMM_CHAND
***	IDENT 17SE84
C
	IMPLICIT CHARACTER*1 (A-Z)
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England
C Author R. Fairbairns
C
C Coded January 1982
C
C Condition handler for RDxx routines called by RDCOMM
C
C arguments:
	INTEGER*4	SIGARG(4)	! minimum: we only want (2)
	INTEGER*4	MCHARG(5)	! about which we care not a jot
C
	INCLUDE '($SSDEF)/NOLIST'
C
***	COMMON/HERE:CMDCOM/
C
C w/s
	INTEGER*4	COND		! the actual condition
C
C deal with TRAP-loops
C (faults don't increment PC - for all I know, they might even do or
C  fail to do things that traps do - so we use this wonderful little
C  library routine to convert a fault to a trap; I didn't know about
C  it - it's all AJW's fault!)
	CALL LIB$SIM_TRAP(SIGARG, MCHARG)
C
C copy condition, for efficiency
	COND = SIGARG(2)
C
C is it ...
C	    - floating divide by zero?
	IF (COND .EQ. SS$_FLTDIV .OR.
     &      COND .EQ. SS$_FLTDIV_F   ) GOTO 10
C
C	    - floating overflow?
	IF (COND .EQ. SS$_FLTOVF .OR.
     &      COND .EQ. SS$_FLTOVF_F   ) GOTO 20
C
C	    - floating underflow?
	IF (COND .EQ. SS$_FLTUND .OR.
     &      COND .EQ. SS$_FLTUND_F   ) GOTO 30
C
C	    - integer divide by zero?
	IF (COND .EQ. SS$_INTDIV) GOTO 40
C
C	    - integer overflow?
	IF (COND .EQ. SS$_INTOVF) GOTO 50
C
C not one of ours - resignal
	RDCOMM_CHAND = SS$_RESIGNAL
	RETURN
C
C floating divide by zero
10	ERRNUM = ERRFDV
	GOTO 60
C
C floating overflow
20	ERRNUM = ERRFOV
	GOTO 60
C
C floating underflow
30	ERRNUM = ERRFUN
	GOTO 60
C
C integer divide by zero
40	ERRNUM = ERRIDV
	GOTO 60
C
C integer overflow
50	ERRNUM = ERRIOV
C
C preserve condition
60	RDCOMM_EXCP = COND
C
C signal to continue execution from exception
	RDCOMM_CHAND = SS$_CONTINUE
	RETURN
C
	END
