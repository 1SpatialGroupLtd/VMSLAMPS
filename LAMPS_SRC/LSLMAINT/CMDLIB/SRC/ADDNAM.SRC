C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1984-08-14 11:07:30.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION ADDNAM(NAME, LENGTH, CMD_NUMBER,
     &				  CMD_ARGSPC,	CMD_UFLAG)
C
***	MODULE ADDNAM
***	IDENT 14AU84
C
	IMPLICIT NONE
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England
C Author R. Fairbairns
C
C Coded June 1983
C
C To add a name to a previously-defined command table
C
C Arguments:
	CHARACTER*(*)	NAME		! name to go in table
	INTEGER*4	LENGTH		! length relevant in NAME (opt)
	INTEGER*4	CMD_NUMBER	! number to be given to command
C					!	(opt - default is next
C					!	 available for table)
	INTEGER*2	CMD_ARGSPC	! command's arg spec (opt)
	INTEGER*4	CMD_UFLAG	! command's user flags (opt)
C
C Function result is > 0 - 'command index' of name added
C		     = 0 - name table full
C		     =-1 - too many bytes for residue of space
C			   in byte array
C		     =-2 - command number exceeds <argsiz> argument
C			   of INITAB (if that was present)
C		     =-3 - <argspc> argument was given, but no <argarr>
C			   argument was given to INITAB
C		     =-4 - <uflag> argument was given, but no <uflarr>
C			   argument was givento INITAB
C
C workspace:
	INTEGER*4	NAMLEN		! actual length of NAME to use
C
C functions called
	INTEGER*4	COPY_CMD_BYTES	! copy into byte table
	LOGICAL		HAVE_I_AN_ARG	! have I an arg?
C
***	COMMON/HERE:TABDEF/
C
C establish if there's space at all - for descriptor in command table
	IF (TABLE_COUNT .GE. TABLE_SIZE/2-1) THEN
	   ADDNAM = 0			! no more room
	   RETURN
	ENDIF
C
C ditto - for name bytes in byte array
	IF (HAVE_I_AN_ARG(2)) THEN
	   NAMLEN = LENGTH		! length from argument
	ELSE
	   NAMLEN = LEN(NAME)		! no LENGTH - length from char-
C					!  acter variable itself
	ENDIF
	IF (BYTE_COUNT+NAMLEN .GE. BYTE_SIZE) THEN
	   ADDNAM = -1			! not enough room
	   RETURN
	ENDIF
C
C copy name bytes into table
	NAMLEN = COPY_CMD_BYTES(NAME, %VAL(BYTE_ADDRESS+BYTE_COUNT),
     &				NAMLEN)
C
C now make up descriptor for name
C - first longword
	NAME_DESC1(1) = NAMLEN
	IF (HAVE_I_AN_ARG(3)) THEN		! if there's an opt
C						!  command number arg,
	  NAME_DESC1(2) = CMD_NUMBER		!  use command no given
	  IF (CMD_NUMBER.GT.MAX_CMD_NUMBER)
     &		MAX_CMD_NUMBER = CMD_NUMBER	!  and ensure it's not
C						!	re-allocated
	ELSE					! otherwise,
	  MAX_CMD_NUMBER = MAX_CMD_NUMBER+1	!  allocate a new no
	  NAME_DESC1(2) = MAX_CMD_NUMBER	!  and use that
	ENDIF
C - second longword
	NAME_DESC(2) = BYTE_ADDRESS+BYTE_COUNT
C
C check command number (if we have a criterion for so doing)
	IF (CMD_NUMBER_LIM.NE.0) THEN
	  IF (NAME_DESC1(2).GT.CMD_NUMBER_LIM) THEN
	    ADDNAM = -2
	    RETURN
	  ENDIF
	ENDIF
C
C deal with arg spec
	IF (HAVE_I_AN_ARG(4)) THEN
	  IF (ARGSPC_TBL.EQ.0) THEN
	    ADDNAM = -3
	    RETURN
	  ELSE
	    CALL COPY_TABLE_WORDS(CMD_ARGSPC,
     &				  %VAL(NAME_DESC1(2)*2-2+ARGSPC_TBL),
     &				  1)
	  ENDIF
	ELSE IF (ARGSPC_TBL.NE.0) THEN
	  CALL COPY_TABLE_WORDS(0,
     &				%VAL(NAME_DESC1(2)*2-2+ARGSPC_TBL),
     &				1)
	ENDIF
C
C user flags, analagously
	IF (HAVE_I_AN_ARG(5)) THEN
	  IF (UFLAG_TBL.EQ.0) THEN
	    ADDNAM = -3
	    RETURN
	  ELSE
	    CALL COPY_TABLE_LONGS(CMD_UFLAG,
     &				  %VAL(NAME_DESC1(2)*2-2+UFLAG_TBL),
     &				  1)
	  ENDIF
	ELSE IF (UFLAG_TBL.NE.0) THEN
	  CALL COPY_TABLE_LONGS(0,
     &				%VAL(NAME_DESC1(2)*2-2+UFLAG_TBL),
     &				1)
	ENDIF
C
C now copy descriptor into the table
	TABLE_COUNT = TABLE_COUNT+1
	CALL COPY_TABLE_LONGS(NAME_DESC,
     &			    %VAL(TABLE_ADDRESS+TABLE_COUNT*8+TABLE_OFF),
     &			    2)
C
C update byte pointer
	BYTE_COUNT = BYTE_COUNT+NAMLEN
C
C now re-make up first longword of table
	TABCNT = TABLE_COUNT
	TABCNT = TABCNT .OR. '8000'X
C (TABFLG is now set up, once for all, in INITAB)
	CALL COPY_TABLE_LONGS(TABHDR, %VAL(TABLE_ADDRESS), 1)
C
C and we're done
	ADDNAM = NAME_DESC1(2)
	RETURN
C
	END
