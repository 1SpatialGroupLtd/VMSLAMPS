C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1982-11-04 12:10:18.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE SHELL_SORT(TABLE, COUNT, CF, SWAP)
C
***	MODULE SHELL_SORT
***	IDENT 04NO82
C
	IMPLICIT NONE
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England
C Author R. Fairbairns
C
C Coded September 1981
C
C To sort table into order defined by routine supplied by caller
C
C Arguments
	INTEGER*4	TABLE		! it's actually an array,
C i.e.	CHARACTER*(*)	TABLE(*)	! but this s/r need never know
	INTEGER*2	COUNT		! count of elements in the table
	INTEGER*4	CF		! routine to compare elements
C	SUBROUTINE	SWAP		! to swap two elements
C
C w/s
	INTEGER*4	COUNT4		! copy of COUNT
	INTEGER*4	SLICE		! holds current slice of array
	INTEGER*4	I, J		! loop variable
C
C copy COUNT, initialise
	COUNT4 = COUNT
	SLICE  = COUNT4
C
C outer loop: decide slice
10	SLICE  = (SLICE+2)/3		! not quite an optimal choice
C
C inner loop: compare elements separated by slice
20	DO 30 I = SLICE+1,COUNT4
	   DO 30 J = I,SLICE+1,-SLICE
	      IF ( CF(TABLE, J, J-SLICE) .GE. 0 )
     &               GOTO 30		! this pair already OK
	      CALL SWAP(TABLE, J, J-SLICE) ! correct order of this pair
30	   CONTINUE
C
C go back for next slice, unless already done 'finest'
	IF (SLICE .NE. 1) GOTO 10
	RETURN
C
	END
