C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1984-09-17 09:46:30.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION RD_NUM_AB(I,BASE,SIGN)
C
***	MODULE RD_NUM_AB
***	IDENT 17SE84
C
C Copyright Laser-Scan Laboratories Ltd,Cambridge,England
C
C Author M.C.Fulford
C
C	Created 26.i.79
C	Last edited 18/Apr/80
C
C To read in a number to an arbitrary base from a line of text
C Result is .TRUE. if no digits are read, or if overflow occurs
C
C
C arguments
	INTEGER*4	I	! where the number goes
	INTEGER*2	BASE	! numerical base
	INTEGER*2	SIGN	! sign
C
	INCLUDE '($SSDEF)/NOLIST'
C
***	COMMON/HERE:CMDCOM/
C
C functions
	LOGICAL		RDCH, RDCHS
C
C w/s
	BYTE		ICH	! character
	INTEGER*4	SHIFT	! shift to use in place of mult'n
	INTEGER*4	MASK	! when to stop shifting
C
C character definitions
	PARAMETER ZERO	= '60'O
	PARAMETER NINE	= '71'O
	PARAMETER UPA	= '101'O
	PARAMETER LWA	= '141'O
C
C character conversion parameters
	PARAMETER UPPER	= LWA-UPA
	PARAMETER HXDEC = UPA-1-NINE
C
C condition handler
	EXTERNAL	RDCOMM_CHAND
	INTEGER*4	RDCOMM_CHAND
C
C establish handler in our call frame
	CALL LIB$ESTABLISH(RDCOMM_CHAND)
C
C no exception yet
	RDCOMM_EXCP = SS$_NORMAL
C
C initialise
	I = 0
	RD_NUM_AB = .TRUE.
C
C set up shift
	IF (BASE.EQ.8) THEN
	   SHIFT = 3
	   MASK = '340000 00000'O
	ELSE
	   IF (BASE.EQ.16) THEN
	      SHIFT = 4
	      MASK = '8000 0000'X
	   ELSE
	      SHIFT = 0
	   ENDIF
	ENDIF
C
C get to start of number
	IF (RDCHS(CH)) GOTO 70
	CALL BSCH
C
C extract next character
30	IF (RDCH(ICH)) GOTO 70
C
C digits - allow hex
	IF (ICH.GE.UPA) THEN		! letter - prepare for hex
	   IF (ICH.GE.LWA) ICH = ICH-UPPER ! upper case
	   ICH = ICH-HXDEC		! convert to hex value
	ELSE IF (ICH.GT.'9') THEN	! '9' < ICH <'A'
	   GOTO 60			!  - treat as termiator
	ENDIF
C
C digit (may be hex)
	ICH = ICH-ZERO
	IF (ICH.LT.0 .OR. ICH.GE.BASE) GOTO 60
	IF (SHIFT.NE.0) THEN
	   I = ISHFT(I,SHIFT) + ICH*SIGN
	   IF ((I.AND.MASK).NE.0) SHIFT = 0
	ELSE
	   I = I*BASE + ICH*SIGN
	ENDIF
	RD_NUM_AB = .FALSE.
	IF (RDCOMM_EXCP) GOTO 30
C
C exception - reject number
	RD_NUM_AB = .TRUE.
C
C end of number
60	CALL BSCH
C
C general exit - force result 0 if any error
70	IF (RD_NUM_AB) I = 0
	RETURN
C
	END
