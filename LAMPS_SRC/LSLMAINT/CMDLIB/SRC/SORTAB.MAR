	.TITLE	SORTAB
	.IDENT	/17SE84/
 
; Copyright Laser-Scan Laboratories, Ltd., Cambridge, England
; Author  R. Fairbairns
 
; Routines to ensure command table in alphabetic order,
;  ready for command look-up with FINCMD
 
 
	.LIBRARY	/MACRO_LIBRARY:LSLMACLIB/
 
 
; define command table flags (etc)
	$$CMTAB_INIT
 
; argument offsets in arglist
ARG1	= 4
ARG2	= 8
ARG3	= 12
 
 
	CODE_PSECT	VIO
 
 
; FORTRAN callable subroutine SORTAB(TABLE)
 
; Ensures that TABLE, which is in the format defined by CMDTAB macros,
; and may be in shared writeable memory, is in alphabetic order
 
 .ENTRY	SORTAB, ^M<R2>
 
	MOVAW	@ARG1(AP), R2		; point to table
	BBS	#15, (R2), 5$		; if BS, we actually have table pointer
	MOVAW	@4(R2), R2		; dereference from the beastly
					;  descriptor that we seem to have got
5$:	BBS	#16+CMT$V_SORTED,-	; if BS, it's already in order,
		(R2), 50$		;	 so don't bother
10$:	BBSSI	#16+CMT$V_BUSY,-	; if BS, someone else
		(R2), 60$		;	 is looking at it
	BBSS	#16+CMT$V_SORTED,-	; if BS, it's now in order (somehow)
		(R2), 40$
	BICW3	#^X8000, (R2), -(SP)	; copy count entry from table, less marker
	BEQL	40$			; if EQL, nowt in table (yet: it's
					;	presumably a dynamic one!)
	PUSHAB	SORTAB_SWAP		; swap routine entry
	PUSHAB	SORTAB_CFSTR		; compare routine entry
	PUSHAW	8(SP)			; number of mnemonics in table
	BBC	#16+CMT$V_NOUFLG,-	; if BC, user flags permitted
		(R2), 20$
	PUSHAQ	8(R2)
	BRB	30$
20$:	PUSHAQ	12(R2)
30$:	BBC	#16+CMT$V_MNEMS, (R2), 35$ ; if BC, no secondary tables
	ADDL2	#4, (SP)		; allow for pointer to table of
					;   secondary table
35$:	CALLS	#4, G^SHELL_SORT	; sort the table
40$:	BICW2	#CMT$M_BUSY, 2(R2)	; clear 'looking' bit
50$:	RET
 
; somebody already looking: wait 100ms
60$:	; ...
	BBS	#16+CMT$V_BUSY, 2(R2), 60$ ; if BS, it's still being ordered
	RET				; if it's not being ordered, it HAS been ordered
 
 
; FORTRAN callable INTEGER*4 FUNCTION SORTAB_CFSTR(TABLE, IND1, IND2)
 
; compare two strings in command table TABLE
;  at word offsets IND1 and IND2
 
; Result is	-1 if TABLE(IND1) < TABLE(IND2)
;		 0		  =
;		+1		  >
 
 .ENTRY	SORTAB_CFSTR, ^M<R2,R3,R4,R5>
 
	CVTWL	@ARG3(AP), R0		; index of second (IND2)
	MOVAQ	@ARG1(AP), R1		; array address
	SUBL2	#8, R1			; allow for FORTRAN indexing
	MOVQ	(R1)[R0], R2		; descriptor for second
	CVTWL	@ARG2(AP), R0		; index of first (IND1)
	MOVQ	(R1)[R0], R0		; descriptor for first
	CMPC5	R0, (R1), #^A/ /,-	; compare the
		R2, (R3)		;  two strings
	BEQL	20$			; distinguish
	BLSS	10$			;  the cases
	MOVL	#1, R0			; 1>2
	RET
10$:	MNEGL	#1, R0			; 1<2
	RET
20$:	CLRL	R0			; 1=2
	RET
 
 
; FORTRAN callable SUBROUTINE SORTAB_SWAP(TABLE, IND1, IND2)
 
; Swaps two strings in table TABLE at offsets IND1, IND2
 
 .ENTRY	SORTAB_SWAP, ^M<R2>
 
	MOVAQ	@ARG1(AP), R2		; table pointer
	SUBL2	#8, R2			; allow for FORTRAN indexing
	MOVL	@ARG2(AP), R0		; index for first
	MOVL	@ARG3(AP), R1		;	    second
	MOVQ	(R2)[R0], -(SP)		; save first
	MOVQ	(R2)[R1], (R2)[R0]	; second -> first
	MOVQ	(SP), (R2)[R1]		; first -> second
;	PUSHAQ	(SP)			; test, to be sure
;	CALLS	#1, G^WRITEF		; dead easy, really
	RET
 
	.END
