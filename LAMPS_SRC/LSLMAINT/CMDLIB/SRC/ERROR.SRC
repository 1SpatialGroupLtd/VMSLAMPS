C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1984-07-24 19:07:12.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	PROGRAM ERROR
C
***	MODULE ERROR
***	IDENT 24JL84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C Author  R. Fairbairns		Coded 4.xi.81
C
C program to test new command routine integer input stuff,
C  with error value output (11.viii.82)
C
C workspace
	INTEGER*2	NCHS		! number of characters read from
					!  the terminal
	INTEGER*4	VALUE		! value to be read
	BYTE		BVALUE(4)	! same again
	EQUIVALENCE	(VALUE, BVALUE(1))
	BYTE		CH		! for detecting end of line
	INTEGER*2	CH2		! for moaning
	EQUIVALENCE	(CH2,CH)
	LOGICAL*1	FROM_CLI	! TRUE iff from command line
C
C functions called
	INTEGER*2	TTRSTR, GETCLI	! from VIOLIB proper
	LOGICAL		RDCH, RDCHS, RDLONG ! from my CMDLIB
C
***	COMMON/HERE:CMDCOM/
***	COMMON/LSL$CMNVIO:TXTC/
C
C preset stuff
	INTEGER*2	SP2, UPARR
	BYTE		SP(2)
	EQUIVALENCE	(SP2, SP(1))
	DATA		SP/' ',0/
	DATA		UPARR/'^@'/
C
C was there something from the command line?
	TXTPTR = 72
	NCHS = GETCLI(TXTDSC)
	IF (NCHS.LE.0) GOTO 10
C
C and behold! there is
	TXTPTR = NCHS
	FROM_CLI = .TRUE.
	GOTO 30
C
C introduce ourselves
10	CALL WRITEF('Robin''s little error message program')
	FROM_CLI = .FALSE.
C
C main llop (oops)
20	NCHS = TTRSTR(, 'Number> ')
	IF (NCHS.EQ.-10) CALL EXIT
C
C decode the line
30	CALL BSLN
C
C come back for second and subsequent numbers
35	RDCOMM_EXCP = 1
	IF (RDLONG(VALUE)) GOTO 100
C
C is there a naughty in the character representation?
	DO 40 I = 1,4
	   IF ((BVALUE(I).AND.127).LT.32) GOTO 50
40	CONTINUE
C
C simple print value, and loop
	CALL WRITEF('Dec %^L%I11  Hex %X9  Oct %O12  Char <%C>',
     &                     VALUE,   VALUE,    VALUE,     VALUE)
	GOTO 70
C
C complex print value
50	CALL EXPAND('Dec %^L%I11  Hex %X9  Oct %O12  Char <%^W',
     &                     VALUE,   VALUE,    VALUE)
	DO 60 I = 1,4
	   CH2 = BVALUE(I).AND.127
	   IF (CH2.LT.32) THEN
	      CH2 = (CH2*256)+UPARR
	   ELSE
	      CH2 = (CH2*256)+SP2
	   ENDIF
	   CALL APPEND('%C', CH2)
60	CONTINUE
	CALL WRTAPP('>')
C
C now generate the error
70	CALL GEN_SYSMSG(VALUE)
C
C is there anything further on the line?
	IF (RDCHS(CH)) GOTO 80
	CALL BSCH
	GOTO 35
C
C ain't nothing more on this line: do we get another one?
80	IF (FROM_CLI) CALL EXIT
	GOTO 20
C
C it weren't there
100	IF (.NOT.RDCOMM_EXCP) GOTO 900
	CH2 = 0
	IF (RDCH(CH)) GOTO 110
	CALL WRITEF('"%C" unexpected', CH2)
	GOTO 1000
C
C end of line
110	CALL WRITEF('Unexpected end of line')
	GOTO 1000
C
C exception in reading the number - generate the relevant message
900	GOTO (910,920,930,940,950), ERRNUM-ERRFDV+1
C
C a silly:
	ERRNUM = ERRBEX
	CALL WRITEF('Bad exception code')
	GOTO 1000
C
910	CALL WRITEF('Floating divide by zero')
	GOTO 1000
C
920	CALL WRITEF('Floating overflow')
	GOTO 1000
C
930	CALL WRITEF('Floating underflow')
	GOTO 1000
C
940	CALL WRITEF('Integer divide by zero')
	GOTO 1000
C
950	CALL WRITEF('Integer overflow')
C
C are we to try again?
1000	IF (FROM_CLI) CALL EXIT
	GOTO 20
C
	END
