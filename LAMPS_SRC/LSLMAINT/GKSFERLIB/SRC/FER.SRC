	SUBROUTINE FER_OPEN
C
**	MODULE	FER_OPEN
**	IDENT	26OC87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					CCB	08MY86
C
C Open channel to Ferranti plotter, and clear buffer
C
	IMPLICIT NONE
C
***	COMMON/FERBUF/
C
C Function called
	INTEGER	SYS$ASSIGN
C
C Workspace
	INTEGER	IERR
C
	IERR = SYS$ASSIGN('LSL$FERRANTI:',FER_CHAN,,)
	IF (.NOT.IERR) CALL LIB$SIGNAL(%VAL(IERR))
	BUFPTR = 0				! buffer empty
	PPTR = 0				! and polyline buffer
C
	RETURN
	END
C
	SUBROUTINE FER_CLOSE
C
**	MODULE	FER_CLOSE
**	IDENT	08MY86
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					CCB	08MY86
C
C Close channel to Ferranti plotter
C
	IMPLICIT NONE
C
***	COMMON/FERBUF/
C
C Function called
	INTEGER	SYS$DASSGN
C
C Workspace
	INTEGER	IERR
C
	IERR = SYS$DASSGN(%VAL(FER_CHAN))
	IF (.NOT.IERR) CALL LIB$SIGNAL(%VAL(IERR))
	RETURN
	END
C
	SUBROUTINE FER_FLUSH
C
**	MODULE	FER_FLUSH
**	IDENT	08MY86
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					CCB	08MY86
C
C Transmit buffer to Ferranti plotter
C
	IMPLICIT NONE
C
	INCLUDE	'($IODEF)'
C
***	COMMON/FERBUF/
C
C Functions called
	INTEGER	SYS$QIOW
C
C Workspace
	INTEGER		IERR
	INTEGER*2	IOSB(4)
C
	IF (BUFPTR.GT.0) THEN
	   IERR = SYS$QIOW(	,
     &				%VAL(FER_CHAN),
     &				%VAL(IO$_WRITEVBLK.OR.IO$M_NOFORMAT),
     &				IOSB,
     &				,,
     &				BUFFER,%VAL(BUFPTR),,,,)
	   IF (.NOT.IERR) CALL LIB$SIGNAL(%VAL(IERR))
	   IF (.NOT.IOSB(1)) CALL LIB$SIGNAL(%VAL(IOSB(1)))
	ENDIF
C
	BUFPTR = 0
	RETURN
	END
C
	SUBROUTINE FER_BUF(B)
C
**	MODULE	FER_BUF
**	IDENT	08MY86
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					CCB	08MY86
C
C Buffer a single byte
C
C Generate even parity as required by Ferranti, then
C invert bits because the interface requires them upside down.
C
	IMPLICIT NONE
C
***	COMMON/FERBUF/
C
C Argument
	BYTE	B
C
	BYTE	PAR(0:127)
	DATA	PAR/
     &		'00'X,'81'X,'82'X,'03'X,'84'X,'05'X,'06'X,'87'X,
     &		'88'X,'09'X,'0A'X,'8B'X,'0C'X,'8D'X,'8E'X,'0F'X,
     &		'90'X,'11'X,'12'X,'93'X,'14'X,'95'X,'96'X,'17'X,
     &		'18'X,'99'X,'9A'X,'1B'X,'9C'X,'1D'X,'1E'X,'9F'X,
     &		'A0'X,'21'X,'22'X,'A3'X,'24'X,'A5'X,'A6'X,'27'X,
     &		'28'X,'A9'X,'AA'X,'2B'X,'AC'X,'2D'X,'2E'X,'AF'X,
     &		'30'X,'B1'X,'B2'X,'33'X,'B4'X,'35'X,'36'X,'B7'X,
     &		'B8'X,'39'X,'3A'X,'BB'X,'3C'X,'BD'X,'BE'X,'3F'X,
     &		'C0'X,'41'X,'42'X,'C3'X,'44'X,'C5'X,'C6'X,'47'X,
     &		'48'X,'C9'X,'CA'X,'4B'X,'CC'X,'4D'X,'4E'X,'CF'X,
     &		'50'X,'D1'X,'D2'X,'53'X,'D4'X,'55'X,'56'X,'D7'X,
     &		'D8'X,'59'X,'5A'X,'DB'X,'5C'X,'DD'X,'DE'X,'5F'X,
     &		'60'X,'E1'X,'E2'X,'63'X,'E4'X,'65'X,'66'X,'E7'X,
     &		'E8'X,'69'X,'6A'X,'EB'X,'6C'X,'ED'X,'EE'X,'6F'X,
     &		'F0'X,'71'X,'72'X,'F3'X,'74'X,'F5'X,'F6'X,'77'X,
     &		'78'X,'F9'X,'FA'X,'7B'X,'FC'X,'7D'X,'7E'X,'FF'X /
C
	BUFPTR = BUFPTR+1
	BUFFER(BUFPTR) = PAR(B).XOR.'FF'X
	RETURN
	END
C
	SUBROUTINE FER_CHECK(N)
C
**	MODULE	FER_CHECK
**	IDENT	08MY86
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					CCB	08MY86
C
C Check space for N bytes in buffer
C
	IMPLICIT NONE
C
***	COMMON/FERBUF/
C
C Argument
	INTEGER	N
C
	IF (BUFMAX-BUFPTR.LT.N) CALL FER_FLUSH
	RETURN
	END
C
	SUBROUTINE FER_INT(I)
C
**	MODULE	FER_INT
**	IDENT	08MY86
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					CCB	08MY86
C
C Buffer an encoded integer
C
	IMPLICIT NONE
C
C Argument
	INTEGER	I
C
C Function called
	INTEGER	LIB$EXTZV
C
C Workspace
	INTEGER	POS
C
	DO 10 POS=0,12,4
	   CALL FER_BUF(LIB$EXTZV(POS,4,I)+48)
10	CONTINUE
	RETURN
	END
C
	SUBROUTINE FER_XY(X,Y)
C
**	MODULE	FER_XY
**	IDENT	08MY86
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					CCB	08MY86
C
C Buffer a coordinate (metres from bottom left)
C
	IMPLICIT NONE
C
***	PARAMETER/FERRANTI/
***	COMMON/GKSDAT1/
C
C Argument
	REAL	X,Y
C
C Workspace
	INTEGER	IX,IY
C
	IX = NINT(FER_CPM*X-FER_HLFX)
	IF (ABS(IX).GT.FER_HLFX) IX = SIGN(FER_HLFX,IX)
	IY = NINT(FER_CPM*Y-FER_HLFY)
	IF (ABS(IY).GT.FER_HLFY) IY = SIGN(FER_HLFY,IY)
C
	IX = IX/16
	IY = IY/16
	CALL FER_INT(IX)
	CALL FER_INT(IY)
	FER_CURX = IX*16
	FER_CURY = IY*16
C
	RETURN
	END
C
	SUBROUTINE FER_ANG(A)
C
**	MODULE	FER_ANG
**	IDENT	08MY86
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					CCB	08MY86
C
C Buffer an angle (radians)
C
	IMPLICIT NONE
C
C Argument
	REAL	A
C
	CALL FER_INT(NINT(16383.0*COS(A)))
	CALL FER_INT(NINT(16383.0*SIN(A)))
	RETURN
	END
C
	SUBROUTINE FER_SYMBOL(S)
C
**	MODULE	FER_SYMBOL
**	IDENT	08MY86
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					CCB	08MY86
C
C Select a symbol
C
	IMPLICIT NONE
C
***	COMMON/GKSDAT1/
C
C Argument
	INTEGER	S			! range 0-63
C
	INTEGER	C			! encoded version of S
C
	CALL FER_CHECK(4)
	CALL FER_BUF(ICHAR('\'))	! escape char
	CALL FER_BUF(ICHAR('P'))	! P-mode
	C = 0				! full speed
CCC
CCC No half speed for now
CCC	IF (S.LE.3) C = 1		! half speed for 0-3
CCC
	HALF = C			! remember in common
	IF (CMAG) THEN
	   C = C+32			! high magnification
	ELSE
	   C = C+64			! low magnification
	ENDIF
	CALL FER_BUF(C)
	C = S				! symbol number
	IF (C.LT.32) C = C+64		! just to make printable
	CALL FER_BUF(C)
	RETURN
	END
C
	SUBROUTINE FER_TANG
C
**	MODULE	FER_TANG
**	IDENT	08MY86
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					CCB	08MY86
C
C Set tangential control (supersedes FER_SANG - constant angle)
C
	IMPLICIT NONE
C
	CALL FER_CHECK(3)
	CALL FER_BUF(ICHAR('\'))	! escape char
	CALL FER_BUF(ICHAR('R'))	! R-mode
	CALL FER_BUF(ICHAR('N'))	! normal orientation
	RETURN
	END
C
	SUBROUTINE FER_SANG(A)
C
**	MODULE	FER_SANG
**	IDENT	08MY86
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					CCB	08MY86
C
C Set symbol angle (supersedes FER_TANG - tangential control)
C
	IMPLICIT NONE
C
C Argument
	REAL	A			! angle (radians)
C
	CALL FER_CHECK(11)
	CALL FER_BUF(ICHAR('\'))	! escape char
	CALL FER_BUF(ICHAR('R'))	! R-mode
	CALL FER_BUF(ICHAR('E'))	! external specification
	CALL FER_ANG(A)			! the angle
	RETURN
	END
C
	SUBROUTINE FER_MOVTO(X,Y)
C
**	MODULE	FER_MOVTO
**	IDENT	08MY86
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					CCB	08MY86
C
C Invisible move to position
C
	IMPLICIT NONE
C
***	PARAMETER/FERRANTI/
***	COMMON/FERBUF/
***	COMMON/GKSDAT1/
C
C Arguments
	REAL	X,Y			! position
C
C Workspace
	INTEGER	IX,IY
	INTEGER	DX,DY
	INTEGER	NX,NY
C
	IX = NINT(FER_CPM*X-FER_HLFX)
	IF (ABS(IX).GT.FER_HLFX) IX = SIGN(FER_HLFX,IX)
	IY = NINT(FER_CPM*Y-FER_HLFY)
	IF (ABS(IY).GT.FER_HLFY) IY = SIGN(FER_HLFY,IY)
C
	DX = IX-FER_CURX
	DY = IY-FER_CURY
C
C Check if an absolute move is required first
	IF (ABS(DX).GT.32763.OR.ABS(DY).GT.32763) THEN
	   CALL FER_CHECK(11)
	   CALL FER_BUF(ICHAR('\'))	! escape char
	   CALL FER_BUF(2)		! absolute line, stop at end
	   CALL FER_BUF(16)		! invisible
	   NX = IX/16
	   NY = IY/16
	   CALL FER_INT(NX)
	   CALL FER_INT(NY)
	   FER_CURX = NX*16
	   FER_CURY = NY*16
	   DX = IX-FER_CURX
	   DY = IY-FER_CURY
	ENDIF
C
C Now add a 16th scale relative move
	IF (DX.NE.0.OR.DY.NE.0) THEN
	   CALL FER_CHECK(11)
	   CALL FER_BUF(ICHAR('\'))	! escape char
	   CALL FER_BUF(32)		! incremental line, stop at end,
C					! at 16th scale
	   CALL FER_BUF(16)		! invisible
	   CALL FER_INT(DX)
	   CALL FER_INT(DY)
	   FER_CURX = FER_CURX+DX
	   FER_CURY = FER_CURY+DY
	ENDIF
	RETURN
	END
C
	SUBROUTINE FER_MARKER(X,Y)
C
**	MODULE	FER_MARKER
**	IDENT	08MY86
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					CCB	08MY86
C
C Invisible move to position, then flash symbol
C
	IMPLICIT NONE
C
***	COMMON/GKSDAT1/
C
C Arguments
	REAL	X,Y			! position
C
	CALL FER_MOVTO(X,Y)		! move to position
	CALL FER_CHECK(11)
	CALL FER_BUF(ICHAR('\'))	! escape char
	CALL FER_BUF(32)		! incremental line, stop at end,
C					! 16th scale
	CALL FER_BUF('3D'X)		! flash symbol
	CALL FER_INT(0)			! 0,0 move
	CALL FER_INT(0)
	RETURN
	END
C
	SUBROUTINE FER_CIRCLE(X,Y,ID)
C
**	MODULE	FER_CIRCLE
**	IDENT	08MY86
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					CCB	08MY86
C
C Circle or arc
C ID = 1	Full circle - coords centre,edge
C ID = 2/3	Cw/ACw arc  - coords start,end,centre
C
	IMPLICIT NONE
C
***	PARAMETER/FERRANTI/
***	COMMON/GKSDAT1/
C
C Arguments
	REAL	X(3),Y(3)		! coordinates
	INTEGER	ID			! type 1-3
C
C Workspace
	INTEGER		IX,IY
C
C Use fast for solid, quarter speed for all others
	BYTE		STYLE(4)	! control chars for line styles
	DATA		STYLE/'2'X,'2A'X,'26'X,'2E'X/
C
	BYTE		CIRTYP(3)	! control chars for circle type
	DATA		CIRTYP/8,3,7/	! full, clockwise, anticlockwise
C
	CALL FER_MOVTO(X(1),Y(1))	! move to initial position
	IF (ID.EQ.1) THEN
	   CALL FER_CHECK(11)
	ELSE
	   CALL FER_CHECK(15)
	ENDIF
	CALL FER_BUF(ICHAR('\'))	! escape char
	CALL FER_BUF(CIRTYP(ID))	! circle type
C
C 2nd control character according to current line type
	CALL FER_BUF(STYLE(CLTYPE))
	IF (ID.EQ.1) THEN			! full circle
	   FER_CURX = NINT(FER_CPM*X(2)-FER_HLFX)
	   FER_CURY = NINT(FER_CPM*Y(2)-FER_HLFY)
	   CALL FER_INT(NINT(FER_CPM*(X(2)-X(1))))	! radius x
	   CALL FER_INT(NINT(FER_CPM*(Y(2)-Y(1))))	! radius y
	ELSE					! arc
	   CALL FER_XY(X(2),Y(2))
	   IX = FER_CURX		! save current position,
	   IY = FER_CURY		! i.e. end of arc
	   CALL FER_XY(X(3),Y(3))	! centre
	   FER_CURX = IX		! restore current position
	   FER_CURY = IY
	ENDIF
	RETURN
	END
C
	SUBROUTINE FER_FLUSHP
C
**	MODULE	FER_FLUSHP
**	IDENT	08MY86
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					CCB	08MY86
C
C Flush out some buffered polyline
C
	IMPLICIT NONE
C
***	COMMON/FERBUF/
***	COMMON/GKSDAT1/
C
C NB 40 Ferranti counts per mm
C
	INTEGER	I,J
	INTEGER	S
	INTEGER	SMAX
	REAL	L
	REAL	DX1,DY1,DX2,DY2
	REAL	ANG
	REAL	R
	INTEGER	IX,IY
	INTEGER	DX,DY
	LOGICAL*1	HADNO		! had no-stop segment?
C
C parameters for line length range within which no-stop can be used
C The actual numbers are counts*16 (with 40 counts/mm)
C LSHORT from Ferranti manual  (.2 mm) (seems OK at quarter speed)
C LMID  determined empirically (.4 mm) (shortest at half speed)
C LLONG determined empirically (15 mm)
	REAL	LLONG,LMID,LSHORT
	PARAMETER	(LLONG=9600.0)	! use fast,stop if longer
	PARAMETER	(LMID=256.0)	! shortest for half speed
	PARAMETER	(LSHORT=128.0)	! must stop if shorter
C
C stop distances from quarter and half speeds (possibly with a P-mode
C half speed restriction)
	REAL	DSTOP(3)		! distances to stop
	DATA	DSTOP/352.0,704.0,2288.0/
C
C deceleration distances from half to quarter speed
	REAL	DECEL(2)		! deceleration distances
	DATA	DECEL/352.0,1584.0/
C
	BYTE	STYLE(4)		! control chars for line styles
	DATA	STYLE/'2'X,'2A'X,'26'X,'2E'X/
C
	IF (PPTR.LE.1) GOTO 999		! nothing to do
	IF (PPTR.EQ.2) GOTO 200		! special for 2 points
C
C calculate lengths of all the vectors, and maximum speeds
	DO 100 I=1,PPTR-1
	   DX2 = PBUF(1,I+1)-PBUF(1,I)
	   DY2 = PBUF(2,I+1)-PBUF(2,I)
	   LENGTH(I) = SQRT(DX2**2+DY2**2)
C
C If vector is long enough, then program fast and stop at end
C Previous element is also programmed stop, so that there is no angular
C restriction at the start of this element
	   IF (LENGTH(I).GE.LLONG) THEN
	      SPEED(1,I) = 3			! fast
	      STP(1,I) = .TRUE.			! stop at end of element
	      IF (I.GT.1) THEN
	         STP(1,I-1) = .TRUE.		! and previous
	         IF (I.GT.2) THEN
	            IF (STP(1,I-2)) SPEED(1,I-1) = 3
	         ENDIF
	      ENDIF
	      GOTO 50
	   ENDIF
C
	   STP(1,I) = .FALSE.			! assume no-stop
C
C If vector is too short, then stop at end
	   IF (LENGTH(I).LT.LSHORT) THEN
	      STP(1,I) = .TRUE.
	   ELSEIF (LENGTH(I).LT.LMID) THEN
	      SMAX = 1				! max allowed speed
	   ELSE
	      SMAX = 2
	   ENDIF
C
C Otherwise maximum speed depends on angle
	   IF (I.GT.1) THEN
C
C If previous element has stop at end, then no angular restriction
	      IF (STP(1,I-1)) THEN
	         SPEED(1,I) = SMAX		! assume half speed
	      ELSE
C
C Calculate angle
	         R = (DX1*DX2+DY1*DY2)/(LENGTH(I-1)*LENGTH(I))
	         IF (ABS(R).GT.1.0) R = SIGN(1.0,R)
	         ANG = ACOS(R)
	         IF (ANG.LE.0.0349) THEN
	            SPEED(1,I) = SMAX		! <2 deg, half speed
	         ELSEIF (ANG.LE.0.0872) THEN
	            SPEED(1,I) = 1		! <5 deg, quarter speed
	         ELSE
C
C for angles >5 deg, must stop
	            SPEED(1,I) = SMAX		! assume half speed
	            STP(1,I-1) = .TRUE.	! but stop at end of previous
	            IF (I.GT.2) THEN
	               IF (STP(1,I-2)) SPEED(1,I-1) = 3
	            ENDIF
	         ENDIF
	      ENDIF
	   ENDIF
50	   DX1 = DX2
	   DY1 = DY2
100	CONTINUE
C
C fix up end conditions
C Half speed for first element, full speed for last element if it has
C a stop before it
	SPEED(1,1) = 2
	IF (STP(1,PPTR-2)) SPEED(1,PPTR-1) = 3
C
C join here for 2 point polyline
200	STP(1,PPTR-1) = .TRUE.	! stop at end of polyline
	IF (STP(1,1)) SPEED(1,1) = 3
C
C copy speeds and stops to final arrays
	DO 300 I=1,PPTR-1
	   SPEED(2,I) = SPEED(1,I)
	   STP(2,I) = STP(1,I)
300	CONTINUE
C
C modify them if necessary because of deceleration distances
	DO 400 I=PPTR-1,2,-1
	   S = SPEED(1,I)
	   L = 0
	   J = I
C
C If this element has a stop at end, then set stop at end of preceding
C ones until stopping distance reached
	   IF (STP(1,I)) THEN
350	      J = J-1
	      IF (J.GT.0) THEN
	         IF (STP(1,J)) GOTO 400
	         L = L+LENGTH(J+1)
	         IF (L.GE.DSTOP(S+HALF)) GOTO 400
	         STP(2,J) = .TRUE.
	         GOTO 350
	      ENDIF
	   ELSE
C
C For quarter (or less, but we don't use eighth speed at present),
C then set preceding elements to the same speed as this element until
C the deceleration distance is reached
	      IF (S.EQ.2) GOTO 400	! half speed is OK
360	      J = J-1
	      IF (J.GT.0) THEN
	         IF (STP(1,J).OR.SPEED(1,J).LE.S) GOTO 400
	         L = L+LENGTH(J)
C
C Since eighth speed not used, DECEL array only has values for
C half->quarter with and wihout half speed P-mode restriction
	         IF (L.GE.DECEL(HALF+1)) GOTO 400
	         SPEED(2,J) = S
	         GOTO 360
	      ENDIF
	   ENDIF
400	CONTINUE
C
C and output the buffer (move to first point done already)
C
C Use an initial escape char
	CALL FER_CHECK(11)
	CALL FER_BUF(ICHAR('\'))	! escape char
	HADNO = .FALSE.			! not had a no-stop
C
	DO 500 I=1,PPTR-1
	   IX = NINT(PBUF(1,I+1))
	   IY = NINT(PBUF(2,I+1))
	   DX = IX-FER_CURX
	   DY = IY-FER_CURY
	   CALL FER_CHECK(10)
C
C Check if an absolute or incremental move is required
	   IF (ABS(DX).GT.32763.OR.ABS(DY).GT.32763) THEN
	      IF (STP(2,I)) THEN
	         CALL FER_BUF(2)	! absolute line, stop at end
	      ELSE
	         CALL FER_BUF('12'X)	! absolute line, no-stop
	         HADNO = .TRUE.		! had a no-stop
	      ENDIF
	      DX = IX/16
	      DY = IY/16
	      FER_CURX = DX*16
	      FER_CURY = DY*16
	   ELSE				! use 16th scale incremental
	      IF (STP(2,I)) THEN
	         CALL FER_BUF('20'X)	! incremental line, stop at end
	      ELSE
	         CALL FER_BUF('30'X)	! incremental line, no-stop
	         HADNO = .TRUE.		! had a no-stop
	      ENDIF
	      FER_CURX = FER_CURX+DX
	      FER_CURY = FER_CURY+DY
	   ENDIF
C
C 2nd control character according to current line type and speed
	   IF (CLTYPE.GT.1) SPEED(2,I) = 1 ! quarter speed for dashed etc
	   CALL FER_BUF(STYLE(CLTYPE)+(3-SPEED(2,I))*'10'X)
	   CALL FER_INT(DX)			! x
	   CALL FER_INT(DY)			! y
500	CONTINUE
C
C If had a no-stop, flush buffer so as not to keep the plotter waiting
	IF (HADNO) CALL FER_FLUSH
C
999	PPTR = 0
	RETURN
	END
C
	SUBROUTINE FER_BUFP(X,Y)
C
**	MODULE	FER_BUFP
**	IDENT	08MY86
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					CCB	08MY86
C
C Buffer a polyline point, converting to plotter counts
C
	IMPLICIT NONE
C
***	PARAMETER/FERRANTI/
***	COMMON/FERBUF/
C
C arguments
	REAL	X,Y		! coordinate (metres)
C
	REAL	RX,RY
C
	RX = FER_CPM*X-FER_HLFX
	IF (ABS(RX).GT.FER_HLFX) RX = SIGN(FLOAT(FER_HLFX),RX)
	RY = FER_CPM*Y-FER_HLFY
	IF (ABS(RY).GT.FER_HLFY) RY = SIGN(FLOAT(FER_HLFY),RY)
C
	IF (PPTR.EQ.0) GOTO 100
	IF (NINT(RX).EQ.NINT(PBUF(1,PPTR)) .AND.
     &      NINT(RY).EQ.NINT(PBUF(2,PPTR))) GOTO 999
C
100	IF (PPTR.EQ.PBMAX) THEN		! buffer is full
	   CALL FER_FLUSHP		! flush it out
	   PBUF(1,1) = PBUF(1,PBMAX)	! re-buffer last point
	   PBUF(2,1) = PBUF(2,PBMAX)
	   PPTR = 1
	ENDIF
	PPTR = PPTR+1
	PBUF(1,PPTR) = RX
	PBUF(2,PPTR) = RY
C
999	RETURN
	END
