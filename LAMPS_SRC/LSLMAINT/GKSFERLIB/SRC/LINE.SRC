C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-11-19 16:03:48.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C
C***********************************************************************
C
C	POLYLINE PRIMITIVE
C	==================
C
	SUBROUTINE	GPL(N,PX,PY)
C
**	MODULE	GPL
**	IDENT	19NO87
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					CCB	9-May-1986
C
C POLYLINE
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER N			! number of points
	REAL	PX(N)			! X coords of points in WC
	REAL	PY(N)			! Y coords of points in WC
C
***	COMMON/FERBUF/
***	COMMON/GKSDAT1/
C
C Functions:
	LOGICAL	GKCLIP			! clips a straight line to
					! rectangular boundaries
C
C Internal variables:
	INTEGER	I			! loop variable
	INTEGER	SAVP			! saved PPTR
	REAL	PX1,PX2,PY1,PY2		! X and Y coordinates
	REAL	CURX,CURY		! current position
C
	IF (N.LT.2) THEN
	   CALL GKSERR(100,'GPL')	! number of points invalid
	   GOTO 9999
	ENDIF
C
C Is this workstation active?
	IF (.NOT.WSACT) GOTO 100
C
C Make sure transformation is up to date
	IF (UPTRN) CALL GUPTRN
C
C Is everything clipped ?
	IF (CLPALL) GOTO 100
C
C Make sure polyline attributes are up to date
	IF (UPLIN) CALL GUPLIN
C
C unset current position to force move
	CURX = 1E38
	CURY = 1E38
C
C Loop for each segment of this polyline.
	DO 90 I = 1, N-1
	   PX1 = PX(I)
	   PY1 = PY(I)
	   PX2 = PX(I+1)
	   PY2 = PY(I+1)
	   IF (ENCLIP) THEN
	      IF (GKCLIP(PX1,PY1,PX2,PY2)) GOTO 90
	   ENDIF
C transform World Coordinates to Workstation Device Coordinates
	   PX1 = (PX1*SCALEX)+OFFX
	   PX2 = (PX2*SCALEX)+OFFX
	   PY1 = (PY1*SCALEY)+OFFY
	   PY2 = (PY2*SCALEY)+OFFY
	   IF (PX1.NE.CURX.OR.PY1.NE.CURY) THEN
C
C Apparently a pen-up move, but at start of polyline may be a zero move,
C so attempt to buffer it and see whether rejected or not.
	      SAVP = PPTR
	      CALL FER_BUFP(PX1,PY1)	! buffer start point
	      IF (PPTR.NE.SAVP) THEN	! not zero move
	         PPTR = PPTR-1		! remove the point again
	         CALL FER_FLUSHP	! flush out previous polyline
	         CALL FER_MOVTO(PX1,PY1)! move to start
	         CALL FER_BUFP(PX1,PY1)	! re-buffer start point
	      ENDIF
	   ENDIF
	   CALL FER_BUFP(PX2,PY2)
	   CURX = PX2		! update current position
	   CURY = PY2
90	CONTINUE
C
	IF (DEFER .EQ. GASAP) THEN
	   CALL FER_FLUSHP
	   CALL GUWK(WKIDS,0)
	ENDIF
C
100	CONTINUE
C
9999	RETURN
	END
C
C***********************************************************************
C
C	POLYLINE ATTRIBUTES
C	===================
C
C
	SUBROUTINE	GSPLI(INDEX)
C
**	MODULE	GSPLI
**	IDENT	29FE84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					CCB	9-May-1986
C
C SET POLYLINE INDEX
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	INDEX			! polyline index
C
***	COMMON/GKSDAT1/
C
	IF (INDEX .LT. 1 .OR. INDEX .GT. PLMAX) THEN
	   CALL GKSERR(60,'GSPLI')	! polyline index is invalid
	ELSEIF (INDEX.NE.PLIND) THEN	! if current already, ignore
	   PLIND = INDEX		! set it to current index
	   UPLIN = .TRUE.		! attributes need updating
	ENDIF
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GSLN(LTYPE)
C
**	MODULE	GSLN
**	IDENT	26AP84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Clarke Brunt	26-April-1984
C
C SET LINETYPE
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	LTYPE			! linetype
C
***	COMMON/GKSDAT1/
C
	IF (LTYPE.LE.0) THEN
	   CALL GKSERR(62,'GSLN')	! linetype .LE. 0
	ELSE
	   ILTYPE = LTYPE
	   UPLIN = .TRUE.		! attributes need updating
	ENDIF
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GSLWSC(LWIDTH)
C
**	MODULE	GSLWSC
**	IDENT	26AP84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Clarke Brunt	26-April-1984
C
C SET LINEWIDTH SCALE FACTOR
C
	IMPLICIT NONE
C
C Arguments:
	REAL	LWIDTH			! linewidth scale factor
C
***	COMMON/GKSDAT1/
C
	IF (LWIDTH.LE.0.0) THEN
	   CALL GKSERR(90,'GSLWSC')	! width .LE. 0.0
	ELSE
	   ILWID = LWIDTH
CCC	   UPLIN = .TRUE.		! no update, linewidth ignored
	ENDIF
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GSPLCI(COLI)
C
**	MODULE	GSPLCI
**	IDENT	26AP84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Clarke Brunt	26-April-1984
C
C SET POLYLINE COLOUR INDEX
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	COLI			! polyline colour index
C
***	COMMON/GKSDAT1/
C
	IF (COLI.LT.0) THEN
	   CALL GKSERR(85,'GSPLCI')	! colour index .LT. 0
	ELSE
	   ICOLI = COLI
CCC	   UPLIN = .TRUE.		! no update, colour ignored
	ENDIF
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE	GSPLR(WKID,PLI,LTYPE,LWIDTH,COLI)
C
**	MODULE	GSPLR
**	IDENT	29FE84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					CCB	9-May-1986
C
C SET POLYLINE REPRESENTATION
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	WKID			! workstation-identifier
	INTEGER	PLI			! polyline index
	INTEGER	LTYPE			! linetype
	REAL	LWIDTH			! line width scale factor
	INTEGER	COLI			! colour index
C
***	COMMON/GKSDAT1/
C
	INTEGER	ERR
C
	ERR = 0
	IF (PLI .LT. 1 .OR. PLI .GT. PLMAX ) THEN
	   ERR = 60			! polyine index is invalid
	ELSEIF (LTYPE .LE. 0) THEN
	   ERR = 62			! linetype is invalid
	ELSEIF (LWIDTH .LE. 0) THEN
	   ERR = 90			! width .LE. 0.0
	ELSEIF (COLI .LT. 0 ) THEN
	   ERR = 86			! colour index is invalid
	ELSE
	   PLTYPE(PLI) = LTYPE		! store values in bundle table
	   PLWDTH(PLI) = LWIDTH
	   PLCOL(PLI)  = COLI
	   IF (PLI .EQ. PLIND) UPLIN = .TRUE.	! apply if current
	ENDIF
	IF (ERR.NE.0) CALL GKSERR(ERR,'GSPLR')
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE GQPLF(
     &		WTYPE,N,ERRIND,NLT,LT,NLW,NOMLW,RLWMIN,RLWMAX,NPPLI)
C
***	MODULE	GQPLF
***	IDENT	16MY84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					CCB	16-May-1984
C
C INQUIRE POLYLINE FACILITIES
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	WTYPE		! Workstation type
	INTEGER	N		! list element requested
	INTEGER	ERRIND		! Error indicator
	INTEGER NLT		! number of available linetypes
	INTEGER	LT		! N'th element of available linetypes
	INTEGER NLW		! number of available linewidths
	REAL	NOMLW		! nominal linewidth (DC)
	REAL	RLWMIN,RLWMAX	! range of linewidths
	INTEGER	NPPLI		! number of predefined polyline indices
C
***	COMMON/GKSDAT1/		! GKS data structures
C
	ERRIND = 0		! no error indication
C
	NLT = 4			! number of linetypes
	LT = N			! just return N as N'th type
	NLW = 0			! continuous range of linewidths
	NOMLW = GNOMLW		! nominal linewidth in DC
	RLWMIN = NOMLW		! also the minimum
	RLWMAX = 10.0*NOMLW	! rather arbitrary maximum
	NPPLI = PLMAX
C
	RETURN
	END
C
C
C***********************************************************************
C
	SUBROUTINE GQLN(ERRIND,LTYPE)
C
***	MODULE	GQLN
***	IDENT	01MA84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					CCB	1-May-1984
C
C INQUIRE LINETYPE
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	ERRIND		! Error indicator
	INTEGER	LTYPE		! line type
C
***	COMMON/GKSDAT1/		! GKS data structures
C
	ERRIND = 0		! no error indication
	LTYPE = ILTYPE
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE GQLWSC(ERRIND,LWIDTH)
C
***	MODULE	GQLWSC
***	IDENT	01MA84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					CCB	1-May-1984
C
C INQUIRE LINE WIDTH SCALE FACTOR
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	ERRIND		! Error indicator
	REAL	LWIDTH		! line width scale factor
C
***	COMMON/GKSDAT1/		! GKS data structures
C
	ERRIND = 0		! no error indication
	LWIDTH = ILWID
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE GQPLCI(ERRIND,COLI)
C
***	MODULE	GQPLCI
***	IDENT	01MA84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created					CCB	1-May-1984
C
C INQUIRE POLYLINE COLOUR INDEX
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	ERRIND		! Error indicator
	INTEGER	COLI		! polyline colour index
C
***	COMMON/GKSDAT1/		! GKS data structures
C
	ERRIND = 0		! no error indication
	COLI = ICOLI
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE GUPLIN
C
***	MODULE	GUPLIN
***	IDENT	27NO84
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Clarke Brunt	26-April-1984
C
C Update the polyline attributes
C
	IMPLICIT NONE
C
C local variables
	INTEGER	NLTYPE,NMTYPE
	LOGICAL*1	NTANG,NMAG
C
***	COMMON/GKSDAT1/		! GKS data structures
C
	IF (GASF(1).EQ.GBUNDL) THEN
	   NLTYPE = PLTYPE(PLIND)
	ELSE
	   NLTYPE = ILTYPE
	ENDIF
C
C linewidth scale factor, and colour are ignored
C
	IF (CLTYPE.NE.NLTYPE) THEN
	   CLTYPE = NLTYPE	! set current linetype
	   UPFA = .TRUE.	! may clobber fill area linetype
	ENDIF
C
C set up correct polyline tracked symbol
C split 'marker type' into components
C
	NMTYPE = LSYM-1		! from GESC(1...), start at 0
	NMAG = .FALSE.
	IF (NMTYPE.GE.1000) THEN
	   NMAG = .TRUE.
	   NMTYPE = MOD(NMTYPE,1000)
	ENDIF
	NTANG = .FALSE.
	IF (NMTYPE.GE.100) THEN
	   NTANG = .TRUE.
	   NMTYPE = MOD(NMTYPE,100)
	ENDIF
C
	IF ((CMAG.NEQV.NMAG).OR.CMTYPE.NE.NMTYPE) THEN
	   CALL FER_FLUSHP	! flush out any polylines
	   CMAG = NMAG		! set magnification
	   CMTYPE = NMTYPE	! set marker type
	   CALL FER_SYMBOL(CMTYPE)	! symbols start at 0
	   UPMAR = .TRUE.	! may clobber polymarker
	ENDIF
C
C set up correct symbol angle, or tangential control
C
	IF ((CTANG.NEQV.NTANG).OR.CANG.NE.SANG) THEN
	   CALL FER_FLUSHP	! flush out any polylines
	   CTANG = NTANG
	   CANG = SANG
	   IF (CTANG) THEN
	      CALL FER_TANG
	   ELSE
	      CALL FER_SANG(CANG)
	   ENDIF
	   UPMAR = .TRUE.	! may clobber polymarker
	ENDIF
C
	UPLIN = .FALSE.		! polyline now up to date
	RETURN
	END
