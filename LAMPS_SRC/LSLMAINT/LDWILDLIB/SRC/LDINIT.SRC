C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-12-15 12:44:02.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE LDINIT(ACTION,DUMMY1,DUMMY2)
C
***	IDENT	15DE92
***	MODULE	LDINIT
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C LDLIB lookalike for WILD plotter
C
C to initialise plotting device
C
C Author R.W. Russell					 9-Jul-1986
C
	IMPLICIT	NONE
C
C arguments
C
	INTEGER		ACTION		! = 0 for close
					!   otherwise open
	INTEGER		DUMMY1		! ignored
	INTEGER		DUMMY2		! ignored
C
C common block
C
	INCLUDE		'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE		'CMN:WILDCMN.CMN'
C
C w/s
	INTEGER		OK
	INTEGER		ERRCOD
	CHARACTER*20	OUT_FILE
	BYTE		TMP_BYTE
C
C functions
C
	INTEGER		LIB$GET_LUN
	LOGICAL		TRNALL
	INTEGER		SYS$ASSIGN
	INTEGER		SYS$DASSGN
	INTEGER		FLWOPN
	INTEGER		FLWCLO
	INTEGER		EXPAND
	LOGICAL		RDLONG
C
C initialise or close?
C
	IF (ACTION.EQ.0) GOTO 500
C
C initialise plotting table
C
C find out if output is going to file or terminal
C
	OUTERM = .FALSE.			! use a file by default
	IF (TRNALL(OUT_NAM,OUT_FILE)) THEN
	   CALL TEST_TERM(OUT_NAM,OUTERM,ERRCOD)
	ENDIF
C
C open output
C
	IF (OUTERM) THEN				! using QIO
	   WILD_CHAN = 0
	   OK = SYS$ASSIGN(OUT_NAM,WILD_CHAN,,)
	   IF (.NOT.OK) THEN
	      CALL LSL_PUTMSG(OK)
	      GOTO 1000
	   ENDIF
	ELSE						! using FILEIO
	   OK = LIB$GET_LUN(WILD_CHAN)
	   IF (.NOT.OK) THEN
	      CALL LSL_PUTMSG(OK)
	      GOTO 1000
	   ENDIF
	   OK = FLWOPN(WILD_CHAN,OUT_NAM,ERRCOD)
	   IF (.NOT.OK) THEN
	      CALL LSL_PUTMSG(OK)
	      IF (OK.EQ.LSL__SYSOPEN) CALL LSL_ADDMSG(ERRCOD)
	      GOTO 1000
	   ENDIF
	ENDIF
C
C set hardware protocol
C
	BUFNUM = EXPAND('%W\0',BUFFER)
	CALL WILD_SEND
C
C and get reply back
C
	CALL WILD_RECEIVE('Enter TA2 version number: ')
C
C initialise software protocol by sending '\1 DC1 DC2 DC2 DC4'
C
	IF (OUTERM) THEN
	   BUFNUM = EXPAND('%W\1%^B%C%C%C%C',BUFFER,17,18,19,20)
	   CALL WILD_SEND
C
C and get reply back
C
	   CALL WILD_RECEIVE('Enter TA2 version number: ')
	ENDIF
C
C now set up defaults in common block
C
	CALL DOTTED(0)		! drawing solid line
	CURPEN = -1		! ensure that first call of pen is obeyed
	NOPEN = DEF_PEN		! default number of pens	
	XORG = 0		! reference point
	YORG = 0
C
C request offset of reference  (if on line)
C
	IF (OUTERM) THEN
	   BUFNUM = EXPAND('%W<2',BUFFER)
	   CALL WILD_SEND
C
C get the reply
C
	   CALL WILD_RECEIVE('Enter reference point: ')
C
C and use it to work out number of pens
C
	   TMP_BYTE = BUFFER(12) - '20'X	! use STATUS 2 byte
	   IF ((TMP_BYTE.AND.'10'X).NE.0) NOPEN = 4	! test bit 4
C
C use this pen value to work out our drawing area
C
	   MIN_XCOUNT = 0
	   MIN_YCOUNT = 0
	   MAX_YCOUNT = 60000
	   IF (NOPEN.EQ.2) THEN
	      MAX_XCOUNT = 60000
	   ELSE
	      MAX_XCOUNT = 57637
	   ENDIF
C
C if there are sensible coordinates in BUFFER, use them as ref point
C
	   CALL WILD_COORD(XORG,YORG)		! and store it
C
C if offline, set the origin
C
	ELSE
	   BUFNUM = EXPAND('%W:1%^L%N,%N',BUFFER,XORG,YORG)
	   CALL WILD_SEND
C
C try logical name for number of pens
	   IF (TRNALL('LSL$WILD_PENS',OUT_FILE)) THEN
	      CALL SETAUX(%REF(OUT_FILE),LEN(OUT_FILE))
	      IF (RDLONG(NOPEN)) NOPEN = DEF_PEN
	      CALL BSLN
	      IF (NOPEN.NE.DEF_PEN.AND.NOPEN.NE.4) NOPEN = DEF_PEN
	   ENDIF
C
C and set the plotting area (note: use reduced area as defult)
C
	   MIN_XCOUNT = 0
	   MIN_YCOUNT = 0
	   MAX_YCOUNT = 60000
	   IF (NOPEN.EQ.2) THEN
	      MAX_XCOUNT = 60000
	   ELSE
	      MAX_XCOUNT = 57637
	   ENDIF
	ENDIF
C
C set up our window
C	
C our window is between reference point and top right
C (NOTE: this is not WILD's window)
C
	WIN_XMIN = 0
	WIN_YMIN = 0
	WIN_XMAX = MAX_XCOUNT
	WIN_YMAX = MAX_YCOUNT
C
C request MAXIMUM window coordinates
C
	IF (OUTERM) THEN
	   BUFNUM = EXPAND('%W<4',BUFFER)
	   CALL WILD_SEND
C
C get the reply
C
	   CALL WILD_RECEIVE('Enter reference point: ')
C
C if there are sensible coordinates in BUFFER, use them as window
C
	   CALL WILD_COORD(WIN_XMAX,WIN_YMAX)		! and store it
	ENDIF
C
C initialise current position (to impossible value)
C
	CURRX = -99999
	CURRY = -99999
C
C finished
C
	GOTO 1000
C
C close plotting table
C
  500	CONTINUE
C
C move pen to top left of window
C
	CALL MOVTO((WIN_XMAX)/SCALE,(WIN_YMAX)/SCALE)
C
C set hardware protocol
C
	BUFNUM = EXPAND('%W\0',BUFFER)
	CALL WILD_SEND
C
C and get reply back
C
	CALL WILD_RECEIVE('Enter TA2 version number: ')
C
C close down
C
	IF (OUTERM) THEN
	   OK = SYS$DASSGN(%VAL(WILD_CHAN))
	   IF (.NOT.OK) CALL LSL_PUTMSG(OK)
	ELSE	
	   OK = FLWCLO(WILD_CHAN,ERRCOD)
	   IF (.NOT.OK) THEN
	      CALL LSL_PUTMSG(OK)
	      IF (OK.EQ.LSL__SYSCLOSE) CALL LSL_ADDMSG(ERRCOD)
	   ENDIF
	ENDIF
C
	GOTO 1000
C
1000	RETURN
	END
