C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1995-10-26 15:50:50.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        LOGICAL FUNCTION GCTP_TRANS(
     &	         ICOORD,INSYS, INZONE, PARIN, INUNIT, INSCL,
     &	         OCOORD,OUTSYS,OUTZONE,PAROUT,OUTUNIT,OUTSCL,
     &	                            IERR)
C
***	MODULE GCTP_TRANS
***	IDENT 04FE93
C
C Copyright Laser-Scan Laboratories Ltd.,Cambridge,England
C 
C Author    Ron Russell				 22-Aug-1988
C
CMOD    Converted to Fortran77 (WI/CC 1514)                 TJM 26-Oct-1995
C
CMOD	Use the zone number as passed, don't invent	RWR	 4-Feb-93
C	a new one
C
C       This subroutine transforms a coordinate pair from one projection
C	to another
C
C	It operates on R*8 values
C
	IMPLICIT NONE
C
C arguments
C
C (input)
	REAL*8		ICOORD(2)	! coordinate pair to transform
	INTEGER		INSYS		! projection code
	INTEGER		INZONE		! zone for input
	REAL*8		PARIN(15)	! projection parameters
	INTEGER		INUNIT		! units of input coordinate
	REAL*8		INSCL		! scale of input sustem
C
C (output)
	REAL*8		OCOORD(2)	! coordinate pair to transform
	INTEGER		OUTSYS		! projection code
	INTEGER		OUTZONE		! zone for output
	REAL*8		PAROUT(15)	! projection parameters
	INTEGER		OUTUNIT		! units of output coordinate
	REAL*8		OUTSCL		! scale of output sustem
	INTEGER		IERR		! return code
C
C w/s
C
	REAL*8		COORDI(2)
	REAL*8		COORDO(2)
	INTEGER		UNITIN
	INTEGER		UNITOUT
	INTEGER		ZONEIN
	INTEGER		ZONEOUT
	REAL*8		SCL
	INTEGER		I
C
	REAL*8		F2M
	PARAMETER	(F2M = 0.3048)	! ft to metre conversion
C
C assume success 
C
	GCTP_TRANS=.TRUE.
C
C convert input units, if required
C
	IF (INUNIT.EQ.110) THEN ! convert 1/10 secs to secs
	   COORDI(1)=ICOORD(1)/10.0
	   COORDI(2)=ICOORD(2)/10.0
	   UNITIN = 3
	ELSEIF (INUNIT.EQ.1.AND.INSYS.NE.2) THEN	! convert 
	   COORDI(1)=ICOORD(1)*F2M	! to international metres
	   COORDI(2)=ICOORD(2)*F2M
	   UNITIN = 2
	ELSEIF (INUNIT.EQ.101.OR.INUNIT.EQ.102) THEN
	   COORDI(1)=ICOORD(1)/1000.0*INSCL
	   COORDI(2)=ICOORD(2)/1000.0*INSCL
	   UNITIN = 2
	ELSEIF (INUNIT.EQ.103.OR.INUNIT.EQ.104) THEN
	   COORDI(1)=ICOORD(1)/39370.08 *INSCL
	   COORDI(2)=ICOORD(2)/39370.08 *INSCL
	   UNITIN = 2
	ELSE				! 
	   COORDI(1)=ICOORD(1)
	   COORDI(2)=ICOORD(2)
	   UNITIN = INUNIT
	ENDIF
C
C set appropriate output units
	IF (OUTUNIT.EQ.110) THEN ! convert 1/10 secs to secs
	   UNITOUT = 3
	ELSEIF (OUTUNIT.EQ.1.AND.INSYS.NE.2) THEN	! convert 
	   UNITOUT = 2
	ELSEIF (OUTUNIT.EQ.101.OR.OUTUNIT.EQ.102) THEN
	   UNITOUT = 2
	ELSEIF (OUTUNIT.EQ.103.OR.OUTUNIT.EQ.104) THEN
	   UNITOUT = 2
	ELSE				! 
	   UNITOUT = OUTUNIT
	ENDIF
C
C set appropriate zones
C zones are important for projections 1 and 2, otherwise input and
C output must be different
CCC	IF (INSYS.EQ.1.OR.INSYS.EQ.2) THEN
CCC	   ZONEIN = INZONE
CCC	ELSE
CCC	   ZONEIN = 99
CCC	ENDIF
	ZONEIN = INZONE
C
CCC	IF (OUTSYS.EQ.1.OR.OUTSYS.EQ.2) THEN
CCC	   ZONEOUT = OUTZONE
CCC	ELSE
CCC	   ZONEOUT = 100
CCC	   IF (INSYS.EQ.OUTSYS.AND.INSYS.EQ.0) ZONEOUT = 99
CCC	ENDIF
	ZONEOUT = OUTZONE
	IF (OUTSYS.NE.1.AND.OUTSYS.NE.2) THEN
	   IF (INSYS.EQ.OUTSYS.AND.INSYS.EQ.0) THEN
	      ZONEOUT = ZONEIN
	   ELSEIF (ZONEOUT .EQ. ZONEIN) THEN
	      ZONEOUT = ZONEOUT + 1
	   ENDIF
	ENDIF
C
C transform
	CALL GTRN(COORDI,INSYS,ZONEIN,PARIN,UNITIN,
     &	          COORDO,OUTSYS,ZONEOUT,PAROUT,UNITOUT,I)
C
C error in GCTP
	IF (I.NE.0) THEN    ! fatal error
	   IERR = I
	   OCOORD(1) = 0.0
	   OCOORD(2) = 0.0
	   GCTP_TRANS = .FALSE.
	   GOTO 999
	ENDIF
C
C convert to output units
C
	IF (OUTUNIT.EQ.110) THEN	! convert to 1/10s secs
	   OCOORD(1)=COORDO(1)*10.0
	   OCOORD(2)=COORDO(2)*10.0
C
	ELSEIF (OUTUNIT.EQ.1) THEN	! convert to feet
	   OCOORD(1)=COORDO(1)/F2M
	   OCOORD(2)=COORDO(2)/F2M
C
	ELSEIF (OUTUNIT.EQ.101.OR.OUTUNIT.EQ.102) THEN
	   SCL=OUTSCL
	   IF (SCL.EQ.0.0) SCL=1.0
	   COORDO(1)=COORDO(1)/SCL	! metres on map
	   COORDO(2)=COORDO(2)/SCL
	   OCOORD(1)=COORDO(1)*1000.0		! mms on map
	   OCOORD(2)=COORDO(2)*1000.0
C
	ELSEIF (OUTUNIT.EQ.103.OR.OUTUNIT.EQ.104) THEN
	   SCL=OUTSCL
	   IF (SCL.EQ.0.0) SCL=1.0
	   COORDO(1)=COORDO(1)/SCL	! metres on map
	   COORDO(2)=COORDO(2)/SCL
	   OCOORD(1)=COORDO(1)*39370.08	! thous on map
	   OCOORD(2)=COORDO(2)*39370.08
	ELSE	
	   OCOORD(1)=COORDO(1)
	   OCOORD(2)=COORDO(2)
	ENDIF
C
  999	RETURN
   	END
