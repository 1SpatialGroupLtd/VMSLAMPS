C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1995-10-26 16:50:48.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION DATUM_SHIFT(PT,INUNIT,OUTUNIT,SPH1,SPH2,DIFFS,
     &	                              IERR)
C
***	MODULE	DATUM_SHIFT
***	IDENT	02MR89
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C
C Created May 1988			R.W. Russell
C
CMOD    Converted to Fortran77 (WI/CC 1514)                 TJM 26-Oct-1995
C
C to transform a point (in geographicals) from one geodetic datum to
C another
C The function return .FALSE. if it succeeds
C
	IMPLICIT NONE
C
C (input and output)
	REAL*8		PT(3)	! (1) = longitude of point (+ east)
				! (2) = latitude of point  (+ north)
				! (3) = Height of point
				!       in the same units as used to
				!       define the spheroid.
				! Note: it is the height above the geoid
				!       (ie as levelled)
C
C (input)
	INTEGER		INUNIT	! the input units
				! = 0 for radians
				! = 3 for seconds of arc
				! = 4 for degrees of arc
				! ALL other values illegal
	INTEGER		OUTUNIT ! see INUNIT
	REAL*8		SPH1(3)	! current spheroid
				! (1)  = semimajor axis  - a
				! (2)  = semiminor axis  - b
				!   or = ecentricity squared
				!   or = 0 for sphere
				! (3)  = height of geoid above spheroid
	REAL*8		SPH2(3)	! see SPH1
	REAL*8		DIFFS(5)! differences between spheroids
				! SPH1 + DIFFS = SPH2
				! (1) = DX - in same units as a and b
				! (2) = DY -     ::     ::     ::
				! (3) = DZ -     ::     ::     ::
				! (4) = RZ rotation about minor axis
				!          (in radians)
				! (5) = SF - scale factor (as ppm)
C
C (output)
	INTEGER		IERR	! error code
				! 1 = illegal INUNIT
				! 2 = illegal OUTUNIT
				! 3 = failed to converge
C
C This routine converts points from one datum to another, by converting
C lat, long and height to X,Y and Z; applying a datum shift, and
C converting back to Lat, long and height.
C
C w/s
	REAL*8		PHI,LONG	! latitude and longitude
	REAL*8		OLD_PHI		! latitude used for iteration
	REAL*8		ESQ		! eccentricity squared
	REAL*8		ASQ		! semi-major axis squared
	REAL*8		X1,Y1,Z1	! cartesian coordinates
	REAL*8		X2,Y2,Z2	! cartesian coordinates
	REAL*8		NU		! radius of curviture in prime
					! vertical
	REAL*8		NU_CALC		! calculate NU
	REAL*8		A		! semi-major axis
	REAL*8		FACTOR1		! unit conversions
	REAL*8		FACTOR2
	REAL*8		TEMP
	INTEGER		I
C
C only allow 100 iterations to get to .0001" of arc
	INTEGER		MAX_ITER
	REAL*8		LIMIT
	PARAMETER	(MAX_ITER = 100)
	PARAMETER	(LIMIT = 4.848136811E-10)   ! .0001" as radians
	REAL*8		HALFPI
	PARAMETER	(HALFPI =1.5707963267948966D0)
C
C statement function to calculate NU
	NU_CALC(A,ESQ,PHI) = A/SQRT(1-ESQ*SIN(PHI)**2)
C
C assume failure
	DATUM_SHIFT = .TRUE.
C
C check units (work internally with radians)
C  - input
	IERR = 1
	IF (INUNIT.NE.0.AND.INUNIT.NE.3.AND.INUNIT.NE.4) GOTO 999
	CALL UNTF(INUNIT,0,FACTOR1,I)
	IF (I.NE.0) GOTO 999
C
C  - output
	IERR = 2
	IF (OUTUNIT.NE.0.AND.OUTUNIT.NE.3.AND.OUTUNIT.NE.4) GOTO 999
	CALL UNTF(0,OUTUNIT,FACTOR2,I)
	IF (I.NE.0) GOTO 999
C
C calculate X,Y and Z for input point
C
C	X = (NU + N + H)*COS(PHI)*COS(LONG)
C	Y = (NU + N + H)*COS(PHI)*SIN(LONG)
C	Z = ((1 - ESQ)*NU) + N + H)*SIN(PHI)	
C
C where N is spheroidal -> geoidal separation and H is geoidal height
C
	LONG = FACTOR1 * PT(1)
	PHI  = FACTOR1 * PT(2)
	A    = SPH1(1)
	IF (SPH1(2).LE.0.0) THEN
	   ESQ  = 0.0
	ELSEIF (SPH1(2).GE.1.0) THEN
	   ASQ  = A * A
	   ESQ  = (ASQ - SPH1(2)*SPH1(2))/ASQ
	ELSE
	   ESQ  = SPH1(2)
	ENDIF
	NU   = NU_CALC(A,ESQ,PHI)
C
	TEMP = (NU + SPH1(3) + PT(3))*COS(PHI)
	X1 = TEMP*COS(LONG)
	Y1 = TEMP*SIN(LONG)
	Z1 = ((1 - ESQ)*NU + SPH1(3) + PT(3))*SIN(PHI)
C
C apply rotation (only about Z axis at present) and scale change
C Note - assumes small angles such that COS(a) = 0 and SIN(a) = a
	TEMP = 1.0D0 + (DIFFS(5)*1.0D-6)
	X2 = (X1 - DIFFS(4)*Y1)*TEMP
	Y2 = (Y1 + DIFFS(4)*X1)*TEMP
	Z2 = Z1*TEMP
C
C apply datum shift
	X2 = X2 + DIFFS(1)
	Y2 = Y2 + DIFFS(2)
	Z2 = Z2 + DIFFS(3)
C
C now convert back to second datum
	A    = SPH2(1)
	IF (SPH2(2).LE.0.0) THEN
	   ESQ  = 0.0
	ELSEIF (SPH2(2).GE.1.0) THEN
	   ASQ  = A * A
	   ESQ  = (ASQ - SPH2(2)*SPH2(2))/ASQ
	ELSE
	   ESQ  = SPH2(2)
	ENDIF
C
C longitude is easy
	TEMP = SQRT(X2*X2 + Y2*Y2)
	IF (TEMP.NE.0.0) THEN
	   LONG = ATAN2(Y2,X2)
	ELSE
	   LONG = 0
	ENDIF
C
C but latitude requires iteration
	OLD_PHI = PHI
	I = 0
	IERR = 3		! in case we don't succeed
10	CONTINUE
	PHI = ATAN2(Z2 + ESQ*NU_CALC(A,ESQ,OLD_PHI)*SIN(OLD_PHI),TEMP)
	I = I+1
	IF (ABS(PHI-OLD_PHI).LT.LIMIT) THEN
	   GOTO 20	! success
	ELSEIF (I.GE.MAX_ITER) THEN
	   GOTO 999	! failed to converge
	ELSE
	   OLD_PHI = PHI
	   GOTO 10
	ENDIF
C
C now for H
20	CONTINUE
C
C if not within 0.0001" of pole, then use normal formula
	IF (ABS(ABS(PHI)-HALFPI).GT.LIMIT) THEN
	   TEMP = TEMP/COS(PHI) - NU_CALC(A,ESQ,PHI)
	ELSE
C
C near to pole, use difference from semi-minor axis
	   TEMP = Z2*SIN(PHI) - (1-ESQ)*NU_CALC(A,ESQ,PHI)
	ENDIF
C
	PT(3) = TEMP - SPH2(3)
	PT(2) = FACTOR2 * PHI
	PT(1) = FACTOR2 * LONG
C
C now everything is OK
	IERR = 0
	DATUM_SHIFT = .FALSE.
C
999	CONTINUE
	RETURN
C
	END
