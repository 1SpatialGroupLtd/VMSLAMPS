C                   PJ26F
C **********************************************************************
C                       *  MOLLWEIDE *
C **********************************************************************
C
CMOD    Converted to Fortran77 (WI/CC 1514)      T.J.Mulcahy 25-Oct-1995
C
      SUBROUTINE PJ26F
C ***   IDENT   25OC95
C ***   MODULE  PJ26F
C
C
C Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author 					R.W. Russell	11-Feb-93

      IMPLICIT DOUBLE PRECISION (A-Z)
C
C This pseudocylindrical projection is equal area. It is available in only
C spherical form.
C
C The formulation comes from Snyder, pages 251 - 252
C
C arguments
C
C projection parameters
      DOUBLE PRECISION DATA(15)
C                      DATA(5) = Longitude of central meridian
C                      DATA(7) = False Eastings
C                      DATA(8) = False Northings
C geographical coordinates (radians)
      DOUBLE PRECISION GEOG(2)
C projected coordinates (usually meters)
      DOUBLE PRECISION PROJ(2)
C zone number (variable if using file)
      INTEGER    ZONE
C LUN for input file (if used)
      INTEGER   INFILE
C
C common blocks
C
      INTEGER IERROR,IPEMSG,IPPARM
      COMMON /ERRM/ IERROR
      COMMON /PRIN/ IPEMSG,IPPARM
C
C default spheroid
C
      DOUBLE PRECISION AZZ
      COMMON/SPHR/ AZZ
C
C working area
C
      INTEGER ANGS(4,1)
      INTEGER SWITCH
      DOUBLE PRECISION A,LON0,X0,Y0
      DOUBLE PRECISION SQRT8,SQRT2
      DOUBLE PRECISION BUFF(15)
      COMMON /WRK26F/BUFF,ANGS,A,LON0,
     &               X0,Y0,SQRT8,SQRT2
      COMMON /SW26F/ SWITCH
C
C constants
C
      DOUBLE PRECISION PI,HALFPI,EPSLN,ZERO,ONE,TWO,EIGHT
      INTEGER          NIT
      PARAMETER        (PI =3.14159265358979323846D0)
      PARAMETER        (HALFPI =1.5707963267948966D0)
      PARAMETER        (EPSLN = 1.0D-12)
      PARAMETER        (ZERO = 0.0, ONE = 1.0, TWO = 2.0, EIGHT = 8.0)
      PARAMETER        (NIT = 100)
C
C functions called
C
      DOUBLE PRECISION PAKR
      DOUBLE PRECISION ADJL
      DOUBLE PRECISION DARSIN
C
C working storage
C
      DOUBLE PRECISION B,E,ES
      INTEGER I
      DOUBLE PRECISION DLON,X,Y,THETA,DTHETA
      DOUBLE PRECISION PSNPHI,LAT
C
C initialisation
C
C      DATA SWITCH /0/
C
C ......................................................................
C      .  INITIALIZATION OF PROJECTION PARAMETERS (ENTRY INPUT)  .
C ......................................................................
C
      ENTRY IS26F (ZONE,DATA)
C
      IERROR = 0
      IF (SWITCH.NE.0 .AND. SWITCH.EQ.ZONE) RETURN
      DO 180 I = 1,8
      BUFF(I) = DATA(I)
  180 CONTINUE
      GO TO 020
C
C ......................................................................
C       .  INITIALIZATION OF PROJECTION PARAMETERS (FILE INPUT)  .
C ......................................................................
C
      ENTRY IF26F (INFILE)
C
      IERROR = 0
      READ (INFILE,END=160) ZONE,BUFF
      IF (SWITCH.NE.0 .AND. SWITCH.EQ.ZONE) RETURN
  020 A = BUFF(1)
      IF (A .LE. ZERO) A = AZZ
      LON0 = PAKR (BUFF(5))
      X0 = BUFF(7)
      Y0 = BUFF(8)
      SQRT8 = SQRT(EIGHT)
      SQRT2 = SQRT(TWO)
C
C LIST RESULTS OF PARAMETER INITIALIZATION.
C
      CALL RADD (LON0,ANGS(1,1))
      IF (IPPARM .EQ. 0) PRINT 2000, A,ANGS,X0,Y0
 2000 FORMAT ('0INITIALIZATION PARAMETERS (MOLLWEIDE PROJECTION)'/
     .        ' RADIUS OF SPHERE             =',F12.2,' METERS'/
     .        ' LONGITUDE OF C. MERIDIAN     = ',A1,2I3,F7.3/
     .        ' FALSE EASTING                =',F12.2,' METERS'/
     .        ' FALSE NORTHING               =',F12.2,' METERS')
      DATA(1) = A
      SWITCH = ZONE
      RETURN
  160 IF (IPEMSG .EQ. 0) PRINT 2020
 2020 FORMAT ('0ERROR PJ26F'/
     .        ' MISSING PROJECTION PARAMETERS')
      IERROR = 261
      RETURN
C
C ......................................................................
C                      .  FORWARD TRANSFORMATION  .
C ......................................................................
C
      ENTRY PF26F (GEOG,PROJ)
C
      IERROR = 0
      IF (SWITCH .NE. 0) GO TO 220
      IF (IPEMSG .EQ. 0) PRINT 2020
      IERROR = 262
      RETURN
  220 CONTINUE
      DLON = ADJL (GEOG(1) - LON0)
      IF (ABS(ABS(GEOG(2)) - HALFPI) .LT. EPSLN) THEN
         THETA = SIGN(HALFPI,GEOG(2))
      ELSE
C
C iterate to get THETA
C
         THETA = GEOG(2)
         PSNPHI = PI * SIN(THETA)
         DO 230 , I = 1,NIT
            DTHETA = -(THETA + SIN(THETA) - PSNPHI) / 
     .               (1 + COS(THETA))
            THETA = THETA + DTHETA
            IF (ABS(DTHETA) .LT. EPSLN) GOTO 240
  230    CONTINUE         
         IF (IPEMSG .EQ. 0) PRINT 2030, NIT
 2030    FORMAT ('0ERROR PF26F' /
     .        ' CONVERGENCE FAILED AFTER',I3,' ITERATIONS')
         IERROR = 265
         RETURN
  240    THETA = THETA * 0.5
      ENDIF
      PROJ(1) = X0 + (SQRT8 / PI) * A * DLON * COS(THETA)
      PROJ(2) = Y0 + SQRT2 * A * SIN(THETA)
      RETURN
C
      END
