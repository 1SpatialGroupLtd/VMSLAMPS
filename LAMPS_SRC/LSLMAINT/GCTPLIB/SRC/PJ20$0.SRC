C                   PJ20F
C **********************************************************************
C ** U.S.G.S. GENERAL MAP PROJECTION PACKAGE ...... DR. A. A. ELASSAL **
C **          MATHEMATICAL ANALYSIS BY JOHN SNYDER                    **
C ** MODULE I                VERSION 1.0.1            MAY 1, 1981 ******
C **********************************************************************
C                    *  OBLIQUE MERCATOR (HOTINE)  *
C **********************************************************************
C
CMOD    Converted to Fortran77 (WI/CC 1514)      T.J.Mulcahy 24-Oct-1995
C
      SUBROUTINE PJ20F
C ***	IDENT   24OC95
C ***	MODULE  PJ20F
C
      IMPLICIT DOUBLE PRECISION (A-Z)
C
      INTEGER IERROR,IPEMSG,IPPARM
      INTEGER SWITCH,I,ZONE,ANGS1,ANGS2,MODE,INFILE
C
      COMMON /ELLP/ AZ,EZ,ESZ,E0Z,E1Z,E2Z,E3Z
C **** PARAMETERS **** A,E,ES,KS0,ALPHA,LONC,LON1,LAT1,LON2,LAT2,LAT0 **
C ********************** X0,Y0,GAMMA,LON0,AL,BL,EL *********************
      COMMON /ERRM/ IERROR
      COMMON /PRIN/ IPEMSG,IPPARM
      COMMON /WRK0/ BUFF(15),ANGS1(4,5),ANGS2(4,3)
C
      DOUBLE PRECISION DATA(1),GEOG(1),PROJ(1)
C
      DATA PI /3.14159265358979323846D0/
      DATA HALFPI /1.5707963267948966D0/
      DATA TOL,EPSLN /1.0D-7,1.0D-10/
      DATA ZERO,HALF,ONE /0.0D0,0.5D0,1.0D0/
      DATA SWITCH /0/
C
C ......................................................................
C      .  INITIALIZATION OF PROJECTION PARAMETERS (ENTRY INPUT)  .
C ......................................................................
C
      ENTRY IS20F (ZONE,DATA)
C
      IERROR = 0
      IF (SWITCH.NE.0 .AND. SWITCH.EQ.ZONE) RETURN
      DO 200 I = 1,13
      BUFF(I) = DATA(I)
  200 CONTINUE
      GO TO 020
C
C ......................................................................
C       .  INITIALIZATION OF PROJECTION PARAMETERS (FILE INPUT)  .
C ......................................................................
C
      ENTRY IF20F (INFILE,DATA)
C
      IERROR = 0
      READ (INFILE,END=180) ZONE,BUFF
      IF (SWITCH.NE.0 .AND. SWITCH.EQ.ZONE) RETURN
  020 MODE = 0
      IF (BUFF(13) .NE. ZERO) MODE = 1
      IF (BUFF(1) .LE. ZERO) GO TO 100
      A = BUFF(1)
      B = BUFF(2)
      IF (B .GT. ZERO) GO TO 040
      E = ZERO
      ES = ZERO
      GO TO 120
  040 IF (B .GT. ONE) GO TO 060
      E = DSQRT (B)
      ES = B
      GO TO 120
  060 ES = ONE - (B / A) ** 2
      E = DSQRT (ES)
      GO TO 120
  100 A = AZ
      E = EZ
      ES = ESZ
  120 KS0 = BUFF(3)
      LAT0 = PAKR (BUFF(6))
      X0 = BUFF(7)
      Y0 = BUFF(8)
      SINPH0 = DSIN (LAT0)
      COSPH0 = DCOS (LAT0)
      CON = ONE - ES * SINPH0 * SINPH0
      COM = DSQRT (ONE - ES)
      BL = DSQRT (ONE + ES * COSPH0 ** 4 / (ONE - ES))
      AL = A * BL * KS0 * COM / CON
      TS0 = TSFN (E,LAT0,SINPH0)
      CON = DSQRT (CON)
      D = BL * COM / (COSPH0 * CON)
      F = D + DSIGN (DSQRT (DMAX1 ((D * D - ONE), 0.0D0)) , LAT0)
      EL = F * TS0 ** BL
      IF (IPPARM .EQ. 0) PRINT 2000, A,ES,KS0
 2000 FORMAT ('0INITIALIZATION PARAMETERS (OBLIQUE MERCATOR ''HOTINE''',
     .        ' PROJECTION)'/
     .        ' SEMI-MAJOR AXIS OF ELLIPSOID =',F12.2,' METERS'/
     .        ' ECCENTRICITY SQUARED         =',F12.9/
     .        ' SCALE AT CENTER              =',F12.9)
      IF (MODE .EQ. 0) GO TO 140
      ALPHA = PAKR (BUFF(4))
      LONC = PAKR (BUFF(5))
      G = HALF * (F - ONE / F)
      GAMMA = DARSIN (DSIN (ALPHA) / D)
      LON0 = LONC - DARSIN (G * DTAN (GAMMA)) / BL
C
C LIST INITIALIZATION PARAMETERS (CASE B).
C
      CALL RADD (ALPHA,ANGS2(1,1))
      CALL RADD (LONC,ANGS2(1,2))
      CALL RADD (LAT0,ANGS2(1,3))
      IF (IPPARM .EQ. 0) PRINT 2010, ANGS2
 2010 FORMAT (' AZIMUTH OF CENTRAL LINE      = ',A1,2I3,F7.3/
     .        ' LONGITUDE OF ORIGIN          = ',A1,2I3,F7.3/
     .        ' LATITUDE OF ORIGIN           = ',A1,2I3,F7.3)
      CON = DABS (LAT0)
      IF (CON.GT.EPSLN .AND. DABS(CON - HALFPI).GT.EPSLN) GO TO 160
      IF (IPEMSG .EQ. 0) PRINT 2020
 2020 FORMAT ('0ERROR PJ20F'/
     .        ' INPUT DATA ERROR')
C
C************** correction by R.W. Russell, Laserscan 10-Apr-1986 ****
C
C return correct error code (according to documentation)
C
C      IERROR = 201
      IERROR = 202
C
C************************** end of correction  **********************
      RETURN
  140 LON1 = PAKR (BUFF(9))
      LAT1 = PAKR (BUFF(10))
      LON2 = PAKR (BUFF(11))
      LAT2 = PAKR (BUFF(12))
      SINPHI = DSIN (LAT1)
      TS1 = TSFN (E,LAT1,SINPHI)
      SINPHI = DSIN (LAT2)
      TS2 = TSFN (E,LAT2,SINPHI)
      H = TS1 ** BL
      L = TS2 ** BL
      F = EL / H
      G = HALF * (F - ONE / F)
      J = (EL * EL - L * H) / (EL * EL + L * H)
      P = (L - H) / (L + H)
      CALL RADD (LON2,ANGS1(1,3))
      DLON = LON1 - LON2
      IF (DLON .LT. -PI) LON2 = LON2 - 2.D0 * PI
      IF (DLON .GT.  PI) LON2 = LON2 + 2.D0 * PI
      DLON = LON1 - LON2
C
C check for equal latitudes
C
      IF (ABS(P).GE.EPSLN) THEN
         LON0 = HALF * (LON1 + LON2) - DATAN (J * DTAN (HALF * BL *
     .       DLON) / P) / BL
      ELSE
         LON0 = HALF * (LON1 + LON2) + SIGN(ONE,DLON) * HALFPI / BL
      ENDIF
      DLON = ADJL (LON1 - LON0)
      GAMMA = DATAN (DSIN (BL * DLON) / G)
      ALPHA = DARSIN (D * DSIN (GAMMA))
      CALL RADD (LON1,ANGS1(1,1))
      CALL RADD (LAT1,ANGS1(1,2))
C     CALL RADD (LON2,ANGS1(1,3))
      CALL RADD (LAT2,ANGS1(1,4))
      CALL RADD (LAT0,ANGS1(1,5))
      IF (IPPARM .EQ. 0) PRINT 2030, ANGS1
 2030 FORMAT (' LONGITUDE OF 1ST POINT       = ',A1,2I3,F7.3/
     .        ' LATITUDE OF 1ST POINT        = ',A1,2I3,F7.3/
     .        ' LONGITUDE OF 2ND POINT       = ',A1,2I3,F7.3/
     .        ' LATITUDE OF 2ND POINT        = ',A1,2I3,F7.3/
     .        ' LATITUDE OF ORIGIN           = ',A1,2I3,F7.3)
      CON = DABS (LAT1)
      IF (CON.LE.EPSLN .OR. DABS(CON - HALFPI).LE.EPSLN) GO TO 150
      IF (DABS(DABS(LAT0) - HALFPI) .GT. EPSLN) GO TO 160
  150 IF (IPEMSG .EQ. 0) PRINT 2020
C
C************** correction by R.W. Russell, Laserscan 10-Apr-1986 ****
C
C return correct error code (according to documentation)
C
C      IERROR = 202
      IERROR = 201
C
C************************** end of correction  **********************
      RETURN
  160 SINGAM = DSIN (GAMMA)
      COSGAM = DCOS (GAMMA)
      SINALF = DSIN (ALPHA)
      COSALF = DCOS (ALPHA)
      IF (IPPARM .EQ. 0) PRINT 2040, X0,Y0
 2040 FORMAT (' FALSE EASTING                =',F12.2,' METERS'/
     .        ' FALSE NORTHING               =',F12.2,' METERS')
      DATA(1) = A
      DATA(2) = ES
      SWITCH = ZONE
      RETURN
  180 IF (IPEMSG .EQ. 0) PRINT 2050
 2050 FORMAT ('0ERROR PJ20F'/
     .        ' MISSING PROJECTION PARAMETERS')
      IERROR = 203
      RETURN
C
C ......................................................................
C                      .  FORWARD TRANSFORMATION  .
C ......................................................................
C
      ENTRY PF20F (GEOG,PROJ)
C
      IERROR = 0
      IF (SWITCH .NE. 0) GO TO 220
      IF (IPEMSG .EQ. 0) PRINT 2050
      IERROR = 204
      RETURN
  220 SINPHI = DSIN (GEOG(2))
      DLON = ADJL (GEOG(1) - LON0)
      VL = DSIN (BL * DLON)
      IF (DABS(DABS(GEOG(2)) - HALFPI) .GT. EPSLN) GO TO 230
      UL = SINGAM * DSIGN (ONE , GEOG(2))
      US = AL * GEOG(2) / BL
      GO TO 250
  230 TS = TSFN (E,GEOG(2),SINPHI)
      Q = EL / TS ** BL
      S = HALF * (Q - ONE / Q)
      T = HALF * (Q + ONE / Q)
      UL = (S * SINGAM - VL * COSGAM) / T
      CON = DCOS (BL * DLON)
      IF (DABS(CON) .LT. TOL) GO TO 240
      US = AL * DATAN ((S * COSGAM + VL * SINGAM) / CON) / BL
      IF (CON .LT. ZERO) US = US + PI * AL / BL
      GO TO 250
  240 US = AL * BL * DLON
  250 IF (DABS(DABS(UL) - ONE) .GT. EPSLN) GO TO 255
      IF (IPEMSG .EQ. 0) PRINT 2060
 2060 FORMAT ('0ERROR PJ20F'/
     .        ' POINT PROJECTS INTO INFINITY')
      IERROR = 205
      RETURN
  255 VS = HALF * AL * DLOG ((ONE - UL) / (ONE + UL)) / BL
  260 PROJ(1) = X0 + VS * COSALF + US * SINALF
      PROJ(2) = Y0 + US * COSALF - VS * SINALF
      RETURN
C
      END

