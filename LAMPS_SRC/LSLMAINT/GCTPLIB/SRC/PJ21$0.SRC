C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1999-06-17 12:39:12.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C                   PJ21F
C **********************************************************************
C ** U.S.G.S. GENERAL MAP PROJECTION PACKAGE ...... DR. A. A. ELASSAL **
C **          MATHEMATICAL ANALYSIS BY JOHN SNYDER                    **
C ** MODULE I                VERSION 1.0.1            MAY 1, 1981 ******
C **********************************************************************
C                    *  OBLIQUE MERCATOR (SPHERICAL)  *
C **********************************************************************
C
CMOD    Converted to Fortran77 (WI/CC 1514)      T.J.Mulcahy 24-Oct-1995
C
	SUBROUTINE PJ21F
C ***	IDENT   24OC95
C ***	MODULE  PJ21F
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
CMOD	Use ATAN2 rather than ATAN when calculating
C	longitude				RWR	20-Jan-1987
C
C	Written					RWR	20-Jan-1986
C	(Simplified from PJ20F of USGS)
C
      IMPLICIT DOUBLE PRECISION (A-Z)
C
C arguments
C
	DOUBLE PRECISION DATA(1),GEOG(1),PROJ(1)
	INTEGER	ZONE,INFILE
C
C transformation parameters
C
	DOUBLE PRECISION A,E,KS0,X0,Y0,LATP,LON0,AL,UL,
     &		         SNLATP,CSLATP
C
C contents of common blocks
C
	DOUBLE PRECISION AZZ
	DOUBLE PRECISION BUFF
	INTEGER IERROR,IPEMSG,IPPARM
	INTEGER SWITCH,ANGS1,ANGS2
	LOGICAL RETSW
C
C working storage
C
	DOUBLE PRECISION DLON,LON
	DOUBLE PRECISION LON1,LAT1,LON2,LAT2
	DOUBLE PRECISION LONP
	DOUBLE PRECISION SNLAT1,CSLAT1,SNLAT2,CSLAT2
	DOUBLE PRECISION SNLON1,CSLON1,SNLON2,CSLON2
	DOUBLE PRECISION TEMP,X,Y,FACTOR,SNDLON
	DOUBLE PRECISION TOP,BOT
	DOUBLE PRECISION WGEOG(2),WPROJ(2)
	INTEGER	I,MODE
C
	COMMON /WRK21F/ A,E,KS0,X0,Y0,LATP,LON0,AL,UL,
     &	                SNLATP,CSLATP
	COMMON /SW21F/ SWITCH,RETSW
	COMMON /ERRM/ IERROR
	COMMON /PRIN/ IPEMSG,IPPARM
	COMMON /WRK0/ BUFF(15),ANGS1(4,4),ANGS2(4,2)
	COMMON /SPHR/ AZZ
C
C functions
C
	DOUBLE PRECISION PAKR,TSFN,ADJL,PHI2,DARSIN
C
C parameters
C
	DOUBLE PRECISION PI,HALFPI,TOL,EPSLN,ZERO,HALF,ONE
C
	PARAMETER (PI = 3.14159265358979323846D0)
	PARAMETER (HALFPI = 1.5707963267948966D0)
	PARAMETER (TOL = 1.0D-7,EPSLN = 1.0D-10)
	PARAMETER (ZERO = 0.0D0,HALF = 0.5D0,ONE = 1.0D0)
C
C	DATA SWITCH,RETSW /0,.FALSE./
C
C ......................................................................
C      .  INITIALIZATION OF PROJECTION PARAMETERS (ENTRY INPUT)  .
C ......................................................................
C
	ENTRY IS21F (ZONE,DATA)
C
	IERROR = 0
	IF (SWITCH.NE.0 .AND. SWITCH.EQ.ZONE) RETURN
	DO 200 I = 1,13
	   BUFF(I) = DATA(I)
  200	CONTINUE
	GO TO 020
C
C ......................................................................
C       .  INITIALIZATION OF PROJECTION PARAMETERS (FILE INPUT)  .
C ......................................................................
C
	ENTRY IF21F (INFILE,DATA)
C
	IERROR = 0
	READ (INFILE,END=180) ZONE,BUFF
	IF (SWITCH.NE.0 .AND. SWITCH.EQ.ZONE) RETURN
  020	MODE = 0
	IF (BUFF(13) .NE. ZERO) MODE = 1
	IF (BUFF(1) .LE. ZERO) GO TO 100
	A = BUFF(1)
	E = ZERO
	GO TO 120
  100	A = AZZ
	E = ZERO
  120	KS0 = BUFF(3)
C
C generate constants for this transformation
C
C radius * scale factor
C
	AL = A * KS0
C
	IF (IPPARM .EQ. 0) PRINT 2000, A,KS0
 2000	FORMAT ('0INITIALIZATION PARAMETERS (OBLIQUE MERCATOR ',
     .        ' ''SPHERICAL'' PROJECTION)'/
     .        ' RADIUS OF SPHERE             =',F12.2,' METERS'/
     .        ' SCALE                        =',F12.9)
C
	IF (MODE .EQ. 0) GO TO 140
C
C format B
C
	TEMP  = PAKR(BUFF(9))
	LATP = PAKR(BUFF(10))
C
C save these values, to write them out later
C
	CALL RADD (TEMP,ANGS2(1,1))
	CALL RADD (LATP,ANGS2(1,2))
C
  130	CONTINUE
	TEMP = TEMP + PI
C longitude of pole
	LONP = ADJL(TEMP)
C latitude of pole
	LATP= HALFPI-LATP
	TEMP    = LONP + HALFPI
C longitude of origin
	LON0 = ADJL(TEMP)
C
C list initialization parameters (case b).
C
	IF (IPPARM .EQ. 0) PRINT 2010, ANGS2
 2010	FORMAT (' LONGITUDE OF VERTEX          = ',A1,2I3,F7.3/
     .        ' LATITUDE OF VERTEX           = ',A1,2I3,F7.3)
C
	GOTO 160
C
C format A
C
  140	LON1 = PAKR (BUFF(9))
	LAT1 = PAKR (BUFF(10))
	LON2 = PAKR (BUFF(11))
	LAT2 = PAKR (BUFF(12))
	CALL RADD (LON1,ANGS1(1,1))
	CALL RADD (LAT1,ANGS1(1,2))
	CALL RADD (LON2,ANGS1(1,3))
	CALL RADD (LAT2,ANGS1(1,4))
C
	IF (IPPARM .EQ. 0) PRINT 2030, ANGS1
 2030	FORMAT (' LONGITUDE OF 1ST POINT       = ',A1,2I3,F7.3/
     .        ' LATITUDE  OF 1ST POINT       = ',A1,2I3,F7.3/
     .        ' LONGITUDE OF 2ND POINT       = ',A1,2I3,F7.3/
     .        ' LATITUDE  OF 2ND POINT       = ',A1,2I3,F7.3)
C
C if two points are identical, then treat the point as a vertex
C
	IF (ABS(LAT1-LAT2).LE.TOL.AND.ABS(LON1-LON2).LE.TOL) THEN
	   TEMP = LON1
	   LATP = LAT1
	   GOTO 130
	ENDIF
C
C if one point is on equator, and other isn't, then switch them over
C
	IF (ABS(LAT1).LE.TOL.AND. ABS(LAT2).GT.TOL) THEN
	   TEMP = LAT1
	   LAT1 = LAT2
	   LAT2 = TEMP
	   TEMP = LON1
	   LON1 = LON2
	   LON2 = TEMP
	ENDIF	
C
C
	SNLAT1 = SIN(LAT1)
	CSLAT1 = COS(LAT1)
	SNLAT2 = SIN(LAT2)
	CSLAT2 = COS(LAT2)
	SNLON1 = SIN(LON1)
	CSLON1 = COS(LON1)
	SNLON2 = SIN(LON2)
	CSLON2 = COS(LON2)
C
	TOP = CSLAT1*SNLAT2*CSLON1 - SNLAT1*CSLAT2*CSLON2
	BOT = SNLAT1*CSLAT2*SNLON2 - CSLAT1*SNLAT2*SNLON1
	IF (ABS(TOP).LT.EPSLN.AND.ABS(BOT).LT.EPSLN) THEN
	   LONP = HALFPI
	ELSE
	   LONP = ATAN2(TOP,BOT)
	ENDIF
C
	IF (ABS(LAT1).GT.TOL) THEN
	   LATP = ATAN(-COS(LONP-LON1)/TAN(LAT1))
	ELSE
C both points on equator
	   LATP = HALFPI
	   LONP = HALF * (LON1 + LON2) + PI
	ENDIF
C
	LONP = ADJL(LONP)
	TEMP = LONP + HALFPI
	LON0 = ADJL(TEMP)
C
C we want pole in northern hemisphere
C
  160	CONTINUE
	IF (LATP.LT.0.0) THEN
	   LATP = -LATP
	   TEMP  = LONP + PI
	   LONP  = ADJL(TEMP)
	   TEMP  = LON0 + PI
	   LON0  = ADJL(TEMP)
	ENDIF
C
	SNLATP = DSIN (LATP)
	CSLATP = DCOS (LATP)
C
C convert geographical false origin to rectangular coords
C
	X0=ZERO
	Y0=ZERO
	RETSW = .TRUE.	
C
C do transformation 
C
	GOTO 220
  165	CONTINUE
	RETSW = .FALSE.
	IF (IPPARM .EQ. 0) PRINT 2040, X0,Y0
 2040	FORMAT (' FALSE EASTING                =',F12.2,' METERS'/
     .        ' FALSE NORTHING               =',F12.2,' METERS')
	DATA(1) = A
	SWITCH = ZONE
	RETURN
  180	IF (IPEMSG .EQ. 0) PRINT 2050
 2050	FORMAT ('0ERROR PJ21F'/
     .        ' MISSING PROJECTION PARAMETERS')
	IERROR = 213
	RETURN
C
C ......................................................................
C                      .  FORWARD TRANSFORMATION  .
C ......................................................................
C
	ENTRY PF21F (GEOG,PROJ)
C
	IERROR = 0
	IF (SWITCH .NE. 0) GO TO 220
	IF (IPEMSG .EQ. 0) PRINT 2050
	IERROR = 214
	RETURN
  220	CONTINUE
	IF (RETSW) THEN
	   WGEOG(1)=PAKR(BUFF(7))
	   WGEOG(2)=PAKR(BUFF(8))
	ELSE
	   WGEOG(1)=GEOG(1)
	   WGEOG(2)=GEOG(2)
	ENDIF
C delta longitude
	TEMP = WGEOG(1) - LON0
C in correct range
	DLON = ADJL (TEMP)
	SNDLON = SIN(DLON)
C
	FACTOR = SNLATP*SIN(WGEOG(2)) - CSLATP*COS(WGEOG(2))*SNDLON
C
C check for trying to transform poles
C
	IF (ABS(ONE-FACTOR).LT.EPSLN) THEN
	   IF (IPEMSG .EQ. 0) PRINT 2060
 2060	   FORMAT ('0ERROR PJ21F'/
     .        ' POINT PROJECTS INTO INFINITY')
	   IERROR = 215
	   RETURN
	ENDIF
C
	TOP = TAN(WGEOG(2))*CSLATP + SNLATP*SNDLON
	BOT = COS(DLON)
	IF (ABS(TOP).LT.EPSLN.AND.ABS(BOT).LT.EPSLN) THEN
	   X = AL * HALFPI
	ELSE
	   X = AL * ATAN2(TOP,BOT)
	ENDIF
	UL= 0.5 * LOG((ONE+FACTOR)/(ONE-FACTOR))
	Y = UL * AL
	WPROJ(1) = X0 + X
C
C force X coordinate into range
C
  230	IF (DABS(WPROJ(1)) .LE. PI*AL) GO TO 240
	WPROJ(1) = WPROJ(1) - DSIGN (2.0D0*PI*AL,WPROJ(1))
	GO TO 230
C
  240	WPROJ(2) = Y0 + Y
	IF (RETSW) THEN
	   X0 = -WPROJ(1)
	   Y0 = -WPROJ(2)	
	   GOTO 165
	ELSE
	   PROJ(1) = WPROJ(1)
	   PROJ(2) = WPROJ(2)
	ENDIF
	RETURN
C
	END

