C                   PJ19I
C **********************************************************************
C ** U.S.G.S. GENERAL MAP PROJECTION PACKAGE ...... DR. A. A. ELASSAL **
C **          MATHEMATICAL ANALYSIS BY JOHN SNYDER                    **
C ** MODULE I                VERSION 1.0.1            MAY 1, 1981 ******
C **********************************************************************
C                        *  VAN DER GRINTEN I  *
C **********************************************************************
C
CMOD	PJ19I created from PJ19F for inverse transformation
C	Add CF19 to compare two projection parameter sets
C						    J Barber 20-Oct-1993
C
CMOD    Converted to Fortran77 (WI/CC 1514)      T.J.Mulcahy 24-Oct-1995
C
	SUBROUTINE PJ19I
C
***	IDENT   24OC95
***	MODULE  PJ19I
C
      IMPLICIT DOUBLE PRECISION (A-Z)
C
      DOUBLE PRECISION ARGS1(15),ARGS2(15)
      INTEGER IERROR,IPEMSG,IPPARM
      INTEGER SWITCH,ZONE,ANGS,NIT,INFILE,I
      LOGICAL SAME
C
      COMMON /SPHR/ AZZ
C **** PARAMETERS **** A,LON0,X0,Y0 ************************************
      COMMON /ERRM/ IERROR
      COMMON /PRIN/ IPEMSG,IPPARM
      COMMON /WRK0/ BUFF(15),ANGS(4)
C
      DOUBLE PRECISION DATA(1),GEOG(1),PROJ(1)
C
      DATA PI /3.14159265358979323846D0/
      DATA HALFPI /1.5707963267948966D0/
C
C **************** correction by RWR      Laserscan	14-Oct-91 ********
C
C the tolerance EPSLN is too small to prevent floating overflow on the VAX
C
C      DATA EPSLN,TOL,NIT /1.0D-10,0.7D0,35/
      DATA EPSLN,TOL,NIT /1.0D-9,0.7D0,35/
C
C *********************** end of correction  ********************
C
      DATA ZERO,HALF,ONE,TWO,FOUR /0.0D0,0.5D0,1.0D0,2.0D0,4.0D0/
      DATA SWITCH /0/
C
C ......................................................................
C      .  INITIALIZATION OF PROJECTION PARAMETERS (ENTRY INPUT)  .
C ......................................................................
C
      ENTRY IS19I (ZONE,DATA)
C
      IERROR = 0
      IF (SWITCH.NE.0 .AND. SWITCH.EQ.ZONE) RETURN
      DO 080 I = 1,8
      BUFF(I) = DATA(I)
  080 CONTINUE
      GO TO 020
C
C ......................................................................
C       .  INITIALIZATION OF PROJECTION PARAMETERS (FILE INPUT)  .
C ......................................................................
C
      ENTRY IF19I (INFILE)
C
      IERROR = 0
      READ (INFILE,END=060) ZONE,BUFF
      IF (SWITCH.NE.0 .AND. SWITCH.EQ.ZONE) RETURN
  020 A = BUFF(1)
      IF (A .LE. ZERO) A = AZZ
      LON0 = PAKR (BUFF(5))
      X0 = BUFF(7)
      Y0 = BUFF(8)
C
C LIST RESULTS OF PARAMETER INITIALIZATION.
C
      CALL RADD (LON0,ANGS)
      IF (IPPARM .EQ. 0) PRINT 2000, A,ANGS,X0,Y0
 2000 FORMAT ('0INITIALIZATION PARAMETERS (VAN DER GRINTEN I',
     .        ' PROJECTION)'/
     .        ' RADIUS OF SPHERE             =',F12.2,' METERS'/
     .        ' LONGITUDE OF C. MERIDIAN     = ',A1,2I3,F7.3/
     .        ' FALSE EASTING                =',F12.2,' METERS'/
     .        ' FALSE NORTHING               =',F12.2,' METERS')
      DATA(1) = A
      SWITCH = ZONE
      RETURN
  060 IF (IPEMSG .EQ. 0) PRINT 2010
 2010 FORMAT ('0ERROR PJ19I'/
     .        ' MISSING PROJECTION PARAMETERS')
      IERROR = 191
      RETURN
C
C ......................................................................
C                      .  INVERSE TRANSFORMATION  .
C ......................................................................
C
      ENTRY PI19I (PROJ,GEOG)
C
      IERROR = 0
      IF (SWITCH .NE. 0) GO TO 220
      IF (IPEMSG .EQ. 0) PRINT 2010
      IERROR = 193
      RETURN
  220 X = PROJ(1) - X0
      Y = PROJ(2) - Y0
      CON = DABS (Y / (PI * A))
      THETA = TWO * DATAN (CON)
      IF (DABS(X) .GT. EPSLN) GO TO 240
      GEOG(1) = LON0
      GEOG(2) = HALFPI * DSIGN( DSIN (THETA), Y)
      RETURN
C
C **************** correction by RWR      Laserscan	22-Oct-91 ********
C
C This is too crude a test - y coordinates this size cause an floating 
C underflow and a subsequent square roots of a negative number
CCC  240 IF (DABS(Y) .GT. EPSLN) GO TO 260
  240 IF (CON .GT. EPSLN) GO TO 260
C
C *********************** end of correction  ********************
C
      GEOG(1) = ADJL (LON0 + X / A)
      GEOG(2) = ZERO
      RETURN
  260 IF (DSQRT(X*X+Y*Y) .LE. PI*A) GO TO 270
      IF (IPEMSG .EQ. 0) PRINT 2020
 2020 FORMAT ('0ERROR PI19I'/
     .        ' INPUT DATA ERROR')
      IERROR = 194
      RETURN
  270 CNN = CON * CON
      COM = DABS (X / (PI * A))
      CMM = COM * COM
      AL = (ONE - CMM - CNN) / (TWO * COM)
      GEOG(1) = ADJL (LON0 + DSIGN (PI*(-AL + DSQRT (AL*AL+ONE)) , X))
      PHI = THETA
      IF (CON .GT. TOL) GO TO 320
C
C LOW LATITUDE CASE
C
      DO 280 I = 1,NIT
      THETA = DARSIN (PHI / HALFPI)
      SINTHT = DSIN (THETA)
      COSTHT = DCOS (THETA)
      G = COSTHT / (SINTHT + COSTHT - ONE)
      D = CON / SINTHT - ONE / (ONE + COSTHT)
      H = TWO - SINTHT
      J = DTAN (HALF * THETA)
      DPHI = (CMM + CNN - TWO * D * G * H - J * J) * PI * COSTHT /
     .       (FOUR * (G * H * (CON * COSTHT / (ONE - COSTHT) + J) /
     .       (ONE + COSTHT) + D * G * ((ONE + TWO * COSTHT * COSTHT) /
     .       COSTHT + H * (COSTHT - SINTHT) / (SINTHT + COSTHT - ONE)) -
     .       J * (J * J + ONE)))
      PHI = PHI - DPHI
      IF (DABS(DPHI) .LT. EPSLN) GO TO 400
  280 CONTINUE
  300 IF (IPEMSG .EQ. 0) PRINT 2030, NIT
 2030 FORMAT ('0ERROR PI19I'/
     .        ' LATITUDE FAILED TO CONVERGE AFTER',I3,' ITERATIONS')
      IERROR = 195
      RETURN
C
C HIGH LATITUDE CASE.
C
  320 LON = ADJL (GEOG(1) - LON0)
      DO 380 I = 1,NIT
      IF (DABS(PHI) .GT. EPSLN) GO TO 330
      Y1 = ZERO
      GO TO 360
  330 THETA = DARSIN (DABS (PHI /HALFPI))
      IF (DABS(LON) .GT. EPSLN) GO TO 340
      Y1 = PI * A * DTAN (HALF * THETA)
      GO TO 360
  340 AL = HALF * DABS (PI / LON - LON / PI)
      ASQ = AL * AL
      SINTHT = DSIN (THETA)
      COSTHT = DCOS (THETA)
      G = COSTHT / (SINTHT + COSTHT - ONE)
      GSQ = G * G
      M = G * (TWO / SINTHT - ONE)
      MSQ = M * M
      CON = DABS ((AL * (G - MSQ) + DSQRT (ASQ * (G - MSQ)**2 -
     .      (MSQ + ASQ) * (GSQ - MSQ))) / (MSQ + ASQ))
      Y1 = DSIGN (PI * A * DSQRT (ONE - CON * CON -
     .          TWO * AL * CON) , PHI)
  360 DPHI = ((DABS(Y) - Y1) / (PI * A - Y1)) * (HALFPI - PHI)
      PHI = PHI + DPHI
      IF (DABS(DPHI) .LT. EPSLN) GO TO 400
  380 CONTINUE
      GO TO 300
  400 GEOG(2) = DSIGN (PHI , Y)
      RETURN
C
C ......................................................................
C                 .  TRANSFORMATION  COMPARISON  .
C ......................................................................
C
      ENTRY CF19(ARGS1,ARGS2,SAME)
C
      SAME = .TRUE.
C
C radius of sphere of ref
      IF ( DABS(ARGS1(1)-ARGS2(1)) .GT. 0.1D-3) GOTO 810
C
C central meridian
      SEC1 = PAKS(ARGS1(5))
      SEC2 = PAKS(ARGS2(5))
      IF ( DABS(SEC1-SEC2) .GT. 0.1D-3) GOTO 810
C
C eastings, northings
C
      DO 802 I = 7,8
         IF ( DABS(ARGS1(I)-ARGS2(I)) .GT. 0.1D-3) GOTO 810
802   CONTINUE
      GOTO 820
C
810   SAME=.FALSE.
C
820   RETURN
      END
C
