C                   PJ26I
C **********************************************************************
C                       *  MOLLWEIDE *
C **********************************************************************
C
	SUBROUTINE PJ26I
C
***	IDENT   21JL94
***	MODULE  PJ26I
C
C Copyright Laser-Scan Ltd., Cambridge, England
C
C Author				R.W. Russell	11-Feb-1993
C
CMOD	PJ26I created from PJ26F for inverse transformation
C	CF26 added to compare projection parameters
C					J Barber 	20-Oct-1993
C
	IMPLICIT DOUBLE PRECISION (A-Z)
C
C This pseudocylindrical projection is equal area. It is available in only
C spherical form.
C
C The formulation comes from Snyder, pages 251 - 252
C
C arguments
C
C projection parameters
      DOUBLE PRECISION DATA(15)
C                      DATA(5) = Longitude of central meridian
C                      DATA(7) = False Eastings
C                      DATA(8) = False Northings
C geographical coordinates (radians)
      DOUBLE PRECISION GEOG(2)
C projected coordinates (usually meters)
      DOUBLE PRECISION PROJ(2)
      DOUBLE PRECISION ARGS1(15),ARGS2(15)
C zone number (variable if using file)
      INTEGER   ZONE
C LUN for input file (if used)
      INTEGER   INFILE
      LOGICAL   SAME
C
C common blocks
      INTEGER IERROR,IPEMSG,IPPARM
      COMMON /ERRM/ IERROR
      COMMON /PRIN/ IPEMSG,IPPARM
C
C default spheroid
      DOUBLE PRECISION AZZ
      COMMON/SPHR/ AZZ
C
C working area
      INTEGER ANGS(4,1)
      INTEGER SWITCH
      DOUBLE PRECISION A,LON0,X0,Y0
      DOUBLE PRECISION SQRT8,SQRT2
      DOUBLE PRECISION BUFF(15)
      DOUBLE PRECISION SEC1,SEC2
      COMMON /WRK26I/BUFF,ANGS,A,LON0,
     &               X0,Y0,SQRT8,SQRT2
      COMMON /SW26I/ SWITCH
C
C constants
      DOUBLE PRECISION PI,HALFPI,EPSLN,ZERO,ONE,TWO,EIGHT
      INTEGER          NIT
      PARAMETER        (PI =3.14159265358979323846D0)
      PARAMETER        (HALFPI =1.5707963267948966D0)
      PARAMETER        (EPSLN = 1.0D-12)
      PARAMETER        (ZERO = 0.0, ONE = 1.0, TWO = 2.0, EIGHT = 8.0)
      PARAMETER        (NIT = 100)
C
C functions called
      DOUBLE PRECISION PAKR
      DOUBLE PRECISION PAKS
      DOUBLE PRECISION ADJL
      DOUBLE PRECISION RADD
      DOUBLE PRECISION DARSIN
C
C working storage
      DOUBLE PRECISION B,E,ES
      DOUBLE PRECISION DLON,X,Y,THETA,DTHETA
      DOUBLE PRECISION PSNPHI,LAT
      INTEGER I
C
C initialisation
C
C      DATA SWITCH /0/
C
C ......................................................................
C      .  INITIALIZATION OF PROJECTION PARAMETERS (ENTRY INPUT)  .
C ......................................................................
C
      ENTRY IS26I (ZONE,DATA)
C
      IERROR = 0
      IF (SWITCH.NE.0 .AND. SWITCH.EQ.ZONE) RETURN
      DO 180 I = 1,8
      BUFF(I) = DATA(I)
  180 CONTINUE
      GO TO 020
C
C ......................................................................
C       .  INITIALIZATION OF PROJECTION PARAMETERS (FILE INPUT)  .
C ......................................................................
C
      ENTRY IF26I (INFILE)
C
      IERROR = 0
      READ (INFILE,END=160) ZONE,BUFF
      IF (SWITCH.NE.0 .AND. SWITCH.EQ.ZONE) RETURN
  020 A = BUFF(1)
      IF (A .LE. ZERO) A = AZZ
      LON0 = PAKR (BUFF(5))
      X0 = BUFF(7)
      Y0 = BUFF(8)
      SQRT8 = SQRT(EIGHT)
      SQRT2 = SQRT(TWO)
C
C LIST RESULTS OF PARAMETER INITIALIZATION.
C
      CALL RADD (LON0,ANGS(1,1))
      IF (IPPARM .EQ. 0) PRINT 2000, A,ANGS,X0,Y0
 2000 FORMAT ('0INITIALIZATION PARAMETERS (MOLLWEIDE PROJECTION)'/
     .        ' RADIUS OF SPHERE             =',F12.2,' METERS'/
     .        ' LONGITUDE OF C. MERIDIAN     = ',A1,2I3,F7.3/
     .        ' FALSE EASTING                =',F12.2,' METERS'/
     .        ' FALSE NORTHING               =',F12.2,' METERS')
      DATA(1) = A
      SWITCH = ZONE
      RETURN
  160 IF (IPEMSG .EQ. 0) PRINT 2020
 2020 FORMAT ('0ERROR PJ26I'/
     .        ' MISSING PROJECTION PARAMETERS')
      IERROR = 261
      RETURN
C
C ......................................................................
C                      .  INVERSE TRANSFORMATION  .
C ......................................................................
C
      ENTRY PI26I (PROJ,GEOG)
C
      IERROR = 0
      IF (SWITCH .NE. 0) GO TO 320
      IF (IPEMSG .EQ. 0) PRINT 2020
      IERROR = 264
      RETURN
  320 CONTINUE
      X = PROJ(1) - X0
      Y = PROJ(2) - Y0
C
      THETA = Y/(SQRT2 * A)
      THETA = DARSIN(THETA)
C
      LAT = (TWO*THETA + SIN(TWO*THETA))/PI
      GEOG(2) = DARSIN(LAT)
      IF (ABS(ABS(GEOG(2)) - HALFPI) .LT. EPSLN) THEN
         DLON = 0
      ELSE
         DLON = PI * X / (SQRT8 * A * COS(THETA))
      ENDIF
      GEOG(1) = ADJL (DLON + LON0)
      RETURN
C
C ......................................................................
C                 .  TRANSFORMATION  COMPARISON  .
C ......................................................................
C
      ENTRY CF26(ARGS1,ARGS2,SAME)
C
      SAME = .TRUE.
C
C semi-major axis
      IF ( DABS(ARGS1(1)-ARGS2(1)) .GT. 0.1D-3) GOTO 810
C
C eccentricity or semi-minor axis converted to eccentricity
      IF (ARGS1(2).GT.1D0) ARGS1(2) = 1D0 - ARGS1(2)*ARGS1(2) /
     &						ARGS1(1)*ARGS1(1)
C
      IF (ARGS2(2).GT.1D0) ARGS2(2) = 1D0 - ARGS2(2)*ARGS2(2) /
     &						ARGS2(1)*ARGS2(1)
C
      IF ( DABS(ARGS1(2)-ARGS2(2)) .GT. 0.1D-11) GOTO 810
C
C central meridian
      SEC1 = PAKS(ARGS1(5))
      SEC2 = PAKS(ARGS2(5))
      IF ( DABS(SEC1-SEC2) .GT. 0.1D-3) GOTO 810
C
C eastings, northings
C
      DO 802 I = 7,8
         IF ( DABS(ARGS1(I)-ARGS2(I)) .GT. 0.1D-3) GOTO 810
802   CONTINUE
      GOTO 820
C
810   SAME=.FALSE.
C
820   RETURN
      END
