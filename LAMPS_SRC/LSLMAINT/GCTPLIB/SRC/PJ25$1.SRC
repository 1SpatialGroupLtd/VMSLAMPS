C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1995-10-27 12:43:00.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C                   PJ25I
C **********************************************************************
C                       *  BONNE *
C **********************************************************************
C
CMOD    Converted to Fortran77 (WI/CC 1514)      T.J.Mulcahy 25-Oct-1995
C
	SUBROUTINE PJ25I
C
C ***	IDENT   25OC95
C ***	MODULE  PJ25I
C
C Copyright Laser-Scan Ltd., Cambridge, England
C
C Author 				R.W. Russell	11-Feb-1993
C
CMOD	PJ25I created from PJ25F for inverse transformation
C	CF25 added to compare projection parameters
C					J Barber 	20-Oct-1993
CMOD	WI/CC 1388 correct bug in inverse calculations
C       1) Force latitude to be in range -90 -> +90
C       2) Correct bug with southern aspect
C					R.W. Russell	20-Jul-1994
C
	IMPLICIT DOUBLE PRECISION (A-Z)
C
C This pseudoconical projection is equal area. It is available in both
C spherical and spheroidal form.
C
C The formulation comes from Snyder, pages 138 - 140
C
C arguments
C
C projection parameters
      DOUBLE PRECISION DATA(15)
C                      DATA(3) = latitude of standard parallel
C                      DATA(5) = Longitude of central meridian
C                      DATA(7) = False Eastings
C                      DATA(8) = False Northings
C geographical coordinates (radians)
      DOUBLE PRECISION GEOG(2)
C projected coordinates (usually meters)
      DOUBLE PRECISION PROJ(2)
      DOUBLE PRECISION ARGS1(15),ARGS2(15)
C zone number (variable if using file)
      INTEGER   ZONE
C LUN for input file (if used)
      INTEGER   INFILE
      LOGICAL     SAME
C
C common blocks
      INTEGER IERROR,IPEMSG,IPPARM
      COMMON /ERRM/ IERROR
      COMMON /PRIN/ IPEMSG,IPPARM
C
C default spheroid
      DOUBLE PRECISION AZ,EZ,ESZ,E0Z,E1Z,E2Z,E3Z
      COMMON /ELLP/ AZ,EZ,ESZ,E0Z,E1Z,E2Z,E3Z
C
C working area
      INTEGER ANGS(4,2)
      INTEGER SWITCH
      DOUBLE PRECISION A,LON0,LAT1,CLAT1,ACLAT1,SGN,X0,Y0
      DOUBLE PRECISION E0,E1,E2,ML1,MS1,SNPHI1,TS1
      DOUBLE PRECISION BUFF(15)
      DOUBLE PRECISION SEC1,SEC2
      LOGICAL ISSPH
C
      COMMON /WRK25I/BUFF,ANGS,A,LON0,LAT1,CLAT1,ACLAT1,SGN,
     &               X0,Y0,E0,E1,E2,ML1,MS1,SNPHI1,TS1,
     &               ISSPH
      COMMON /SW25I/ SWITCH
C
C constants
      DOUBLE PRECISION PI,HALFPI,EPSLN,ZERO,ONE,TWO
      PARAMETER        (PI =3.14159265358979323846D0)
      PARAMETER        (HALFPI =1.5707963267948966D0)
      PARAMETER        (EPSLN = 1.0D-10)
      PARAMETER        (ZERO = 0.0, ONE = 1.0, TWO = 2.0)
C
C functions called
      DOUBLE PRECISION PAKR
      DOUBLE PRECISION PAKS
      DOUBLE PRECISION ADJL
      DOUBLE PRECISION E0FN
      DOUBLE PRECISION E1FN
      DOUBLE PRECISION E2FN
      DOUBLE PRECISION MLFN
      DOUBLE PRECISION MSFN
      DOUBLE PRECISION PHI3
C
C working storage
      DOUBLE PRECISION B,E,ES
      INTEGER I
      DOUBLE PRECISION DLON,X,Y,RH,EE,TEMP
      DOUBLE PRECISION ML,MS,SINPHI,COSPHI
C
C initialisation
C
C      DATA SWITCH /0/
C
C ......................................................................
C      .  INITIALIZATION OF PROJECTION PARAMETERS (ENTRY INPUT)  .
C ......................................................................
C
      ENTRY IS25I (ZONE,DATA)
C
      IERROR = 0
      IF (SWITCH.NE.0 .AND. SWITCH.EQ.ZONE) RETURN
      DO 180 I = 1,8
      BUFF(I) = DATA(I)
  180 CONTINUE
      GO TO 020
C
C ......................................................................
C       .  INITIALIZATION OF PROJECTION PARAMETERS (FILE INPUT)  .
C ......................................................................
C
      ENTRY IF25I (INFILE)
C
      IERROR = 0
      READ (INFILE,END=160) ZONE,BUFF
      IF (SWITCH.NE.0 .AND. SWITCH.EQ.ZONE) RETURN
  020 IF (BUFF(1) .LE. ZERO) GO TO 100
      A = BUFF(1)
      B = BUFF(2)
      IF (B .GT. ZERO) GO TO 040
      E = ZERO
      ES = ZERO
      E0 = ONE
      E1 = ZERO
      E2 = ZERO
      GO TO 120
  040 IF (B .GT. ONE) GO TO 060
      E = DSQRT (B)
      ES = B
      GO TO 080
  060 ES = ONE - (B / A) ** 2
      E = DSQRT (ES)
  080 CONTINUE
      E0 = E0FN (ES)
      E1 = E1FN (ES)
      E2 = E2FN (ES)
      GOTO 120
  100 A = AZ
      E = EZ
      ES = ESZ
      E0 = E0Z
      E1 = E1Z
      E2 = E2Z
  120 LAT1 = PAKR (BUFF(3))
      LON0 = PAKR (BUFF(5))
      X0 = BUFF(7)
      Y0 = BUFF(8)
C
      IF (ABS(LAT1) .GE. EPSLN) GOTO 128
      IF (IPEMSG .EQ. 0) PRINT 2000
 2000 FORMAT ('0ERROR PJ25I'/
     .        ' FOR EQUATOR AS STANDARD PARALLEL, USE SINUSOIDAL')
      IERROR = 253
      RETURN
C
  128 ISSPH = E .LT. EPSLN
      SGN = ONE
      IF (LAT1 .LT. ZERO) SGN = -SGN
      IF (ISSPH) THEN
         IF (ABS(ABS(LAT1) - HALFPI) .GT. EPSLN) THEN
            CLAT1 = ONE/TAN(LAT1)
         ELSE
            CLAT1 = ZERO
         ENDIF
         ACLAT1 = A*CLAT1
      ELSE
         SNPHI1 = SIN(LAT1)
         ML1 = MLFN (E0,E1,E2,LAT1)
         MS1 = MSFN (E,SNPHI1,COS(LAT1))
         TS1 = MS1/SNPHI1
      ENDIF
C
C LIST RESULTS OF PARAMETER INITIALIZATION.
C
  130 CALL RADD (LAT1,ANGS(1,1))
      CALL RADD (LON0,ANGS(1,2))
      IF (IPPARM .EQ. 0) PRINT 2010, A,ES,ANGS,X0,Y0
 2010 FORMAT ('0INITIALIZATION PARAMETERS (BONNE',
     .        ' PROJECTION)'/
     .        ' SEMI-MAJOR AXIS OF ELLIPSOID  =',F12.2,' METERS'/
     .        ' ECCENTRICITY SQUARED          =',F12.9/
     .        ' LATITUDE OF STANDARD PARALLEL = ',A1,2I3,F7.3/
     .        ' LONGITUDE OF CENTRAL MERIDIAN = ',A1,2I3,F7.3/
     .        ' FALSE EASTING                 =',F12.2,' METERS'/
     .        ' FALSE NORTHING                =',F12.2,' METERS')
      DATA(1) = A
      DATA(2) = ES
      SWITCH = ZONE
      RETURN
  160 IF (IPEMSG .EQ. 0) PRINT 2020
 2020 FORMAT ('0ERROR PJ25I'/
     .        ' MISSING PROJECTION PARAMETERS')
      IERROR = 251
      RETURN
C
C ......................................................................
C                      .  INVERSE TRANSFORMATION  .
C ......................................................................
C
      ENTRY PI25I (PROJ,GEOG)
C
      IERROR = 0
      IF (SWITCH .NE. 0) GO TO 320
      IF (IPEMSG .EQ. 0) PRINT 2020
      IERROR = 254
      RETURN
  320 CONTINUE
      X = PROJ(1) - X0
      Y = PROJ(2) - Y0
      IF (ISSPH) THEN
         TEMP = ACLAT1 - Y
         RH = SGN * SQRT(X*X + TEMP*TEMP)
         GEOG(2) = CLAT1 + LAT1 - RH/A
C
C force latitiude into range
         IF (ABS(GEOG(2)) .GT. HALFPI)
     .           GEOG(2) = DSIGN (HALFPI ,GEOG(2))
C
         IF (ABS(ABS(GEOG(2)) - HALFPI) .LT. EPSLN) THEN
            DLON = ZERO
         ELSE
            DLON = RH * ATAN2(SGN*X,SGN*TEMP) / (A * COS(GEOG(2)))
         ENDIF
      ELSE
         TEMP = A * TS1 - Y
         RH = SGN * SQRT(X*X + TEMP*TEMP)
         ML = A *(TS1 + ML1) - RH
         ML = ML/A
         GEOG(2) = PHI3 (ML,E0,E1,E2)
C
C force latitiude into range
         IF (ABS(GEOG(2)) .GT. HALFPI)
     .           GEOG(2) = DSIGN (HALFPI ,GEOG(2))
C
         IF (ABS(ABS(GEOG(2)) - HALFPI) .LT. EPSLN) THEN
            DLON = ZERO
         ELSE
            MS = MSFN (E,SIN(GEOG(2)),COS(GEOG(2)))
            DLON = RH * ATAN2(SGN * X,SGN * TEMP) / (A * MS)
         ENDIF
      ENDIF

      GEOG(1) = ADJL (DLON + LON0)
      RETURN
C
C ......................................................................
C                 .  TRANSFORMATION  COMPARISON  .
C ......................................................................
C
      ENTRY CF25(ARGS1,ARGS2,SAME)
C
      SAME = .TRUE.
C
C semi-major axis
      IF ( DABS(ARGS1(1)-ARGS2(1)) .GT. 0.1D-3) GOTO 810
C
C eccentricity or semi-minor axis converted to eccentricity
      IF (ARGS1(2).GT.1D0) ARGS1(2) = 1D0 - ARGS1(2)*ARGS1(2) /
     &						ARGS1(1)*ARGS1(1)
C
      IF (ARGS2(2).GT.1D0) ARGS2(2) = 1D0 - ARGS2(2)*ARGS2(2) /
     &						ARGS2(1)*ARGS2(1)
C
      IF ( DABS(ARGS1(2)-ARGS2(2)) .GT. 0.1D-11) GOTO 810
C
C standard parallel
      SEC1 = PAKS(ARGS1(3))
      SEC2 = PAKS(ARGS2(3))
      IF ( DABS(SEC1-SEC2) .GT. 0.1D-3) GOTO 810
C
C central meridian
      SEC1 = PAKS(ARGS1(5))
      SEC2 = PAKS(ARGS2(5))
      IF ( DABS(SEC1-SEC2) .GT. 0.1D-3) GOTO 810
C
C eastings, northings
C
      DO 802 I = 7,8
         IF ( DABS(ARGS1(I)-ARGS2(I)) .GT. 0.1D-3) GOTO 810
802   CONTINUE
      GOTO 820
C
810   SAME=.FALSE.
C
820   RETURN
      END
