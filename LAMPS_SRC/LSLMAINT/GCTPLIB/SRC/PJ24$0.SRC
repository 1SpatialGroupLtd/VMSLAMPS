C                   PJ24F
C **********************************************************************
C                       *  KROVAK *
C **********************************************************************
C
CMOD    Converted to Fortran77 (WI/CC 1514)      T.J.Mulcahy 25-Oct-1995
C
      SUBROUTINE PJ24F
C ***      IDENT   25OC95
C ***      MODULE  PJ24F
C
C
C Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author                               R.W. Russell      11-Feb-93
C
      IMPLICIT DOUBLE PRECISION (A-Z)
C
C This projection is an oblique conformal conic with one standard parallel.
C It is calculated by projecting through a conformal sphere. The mathematics
C are taken from paper (in Czeck!) supplied by the Institute for Surveying
C and mapping. 
C
C Note: the Czeck coordinate system is a left handed system, with the
C origin at the apex of the cone. This routine uses the convention used
C elsewhere in GCTPLIB, of a right handed coordinate system based on the
C origin point of the projection (but this may be overridden).
C
C On the spheroid, the origin is a point of known latitude and longitude,
C chosen so that pole of the oblique sphere will lie on its meridian and
C the standard parallel of the conic projection on the oblique sphere will
C pass through it. In the discusion that follows it is designated A, to
C distinguish it from the conformal latitude discussed below.
C
C The conformal sphere is based on a latitude where the scale on the sphere
C is 1.0 compared to the spheroid (ie the radius of the sphere is equal to
c the mean radius of curvature of the spheroid at this point). It is called
C a "Gaussian Conformal Sphere" in the documentation and is more complicated
C than any other calculation of conformal latitude that I have
C come across. In particular it uses two constants `ALPHA' and `K'. We have
C the derivation of `ALPHA' but are still awaiting the derivation of `K'.
C
C Given the above noted latitude (PHI0), ALPHA is calculated from:
C
C  ALPHA**2 = 1 + (e**2)*cos(PHI0)**4
C
C  K is another constant whose value we have for the Bessel ellipsoid
C
C and the radius of the sphere (R) (at PHI0) from 
C
C R**2 = RHO0 * NU0 ( where RHO is the radius of curvature of the
C                          spheroid in the plane of the meridian, and
C                          NU is the radius in the plane perpendicular
C                          to the meridian)
C
C PHI and LAMDA are converted to the spherical coordinates U and V by
C the formulae:
C
C TTT = (1 - e*sin(PHI))/(1 + e*sin(PHI))
C
C V = ALPHA * LAMDA
C
C tan(U/2 + 45) = K*tan(PHI/2 + 45)**ALPHA * TTT**(ALPHA*e/2)
C
C U and V are next converted to S and D, coordinates on the oblique sphere.
C This oblique sphere is defined by giving SA, the latitude of A on the
C oblique  sphere. This defines the pole of the oblique sphere (UQ).
C
C This could be done with reference to the spherical triangle, but to remove
C the problem of working out which hemisphere the points are in we us
C 3D coordinates.
C
C The radius of the sphere, reduced by the scale factor at the origin,
C is used to calculate the distance from the apex of the cone to A (R0)
C by R0 = R * KS0 * tan(SA).
C
C (S,D) is now converted (conformally) to polar coordinates R,DD (see code
C below) and finally the polar coordinates are converted to cartesian coords
C (with fale origin coordinates applied).
C
C arguments
C
C projection parameters
C
      DOUBLE PRECISION DATA(15)
C                                   DATA(3) = longitude of A
C                                   DATA(4) = latitude of A
C                                   DATA(5) = latitude of standard parallel on
C                                             oblique sphere
C                                   DATA(6) = scale factor of standard parallel
C                                   DATA(7) = False Eastings
C                                   DATA(8) = False Northings
C                                   DATA(9) = latitude where radius of
C                                             conformal sphere is same as
C                                             spheroid
C                                   DATA(10)= when 0.0, use right handed coord
C                                             system, otherwise use Czeck
C                                             system
C geographical coordinates (radians)
      DOUBLE PRECISION GEOG(2)
C projected coordinates (usually meters)
      DOUBLE PRECISION PROJ(2)
C zone number (variable if using file)
      INTEGER ZONE
C LUN for input file (if used)
      INTEGER INFILE
C
C common blocks
C
      INTEGER IERROR,IPEMSG,IPPARM
C
      COMMON /ERRM/ IERROR
      COMMON /PRIN/ IPEMSG,IPPARM
C
C default spheroid
C
      DOUBLE PRECISION AZ,EZ,ESZ,E0Z,E1Z,E2Z,E3Z
      COMMON /ELLP/ AZ,EZ,ESZ,E0Z,E1Z,E2Z,E3Z
C
C working area
C
      INTEGER ANGS(4,4)
      INTEGER SWITCH
      DOUBLE PRECISION A,B,LON0,LAT0,SA,KS0,X0,Y0,K,RR,ALPHA,D0,U0,V0
      DOUBLE PRECISION CONLAT,UQ,UA,AA,N,R0,TNFN,TNFN1,ROT(3,3)
      DOUBLE PRECISION BUFF(15)
C
      COMMON /WRK24F/BUFF,ANGS,A,LON0,LAT0,SA,KS0,X0,Y0,
     &               K,RR,ALPHA,D0,U0,V0,CONLAT,UQ,UA,AA,
     &               N,R0,TNFN,TNFN1,ROT
      COMMON /SW24F/ SWITCH
C
C constants
C
      DOUBLE PRECISION PI,HALFPI,EPSLN,ZERO,ONE,TWO
      PARAMETER (PI =3.14159265358979323846D0)
      PARAMETER (HALFPI =1.5707963267948966D0)
      PARAMETER (EPSLN = 1.0D-10)
      PARAMETER      (ZERO = 0.0, ONE = 1.0, TWO = 2.0)
C
C functions called
C
      DOUBLE PRECISION CGKROV
      DOUBLE PRECISION GCKROV
      DOUBLE PRECISION PAKR
      DOUBLE PRECISION ADJL
      DOUBLE PRECISION RHO
      DOUBLE PRECISION NU
      DOUBLE PRECISION DARSIN,DARCOS
C
C working storage
C
      DOUBLE PRECISION E,ES,RRH,RNU
      INTEGER I
      DOUBLE PRECISION DLON,X,Y,Z
      DOUBLE PRECISION XX,YY,ZZ
      DOUBLE PRECISION U,DV,S,D,DD
      DOUBLE PRECISION R,TMP,SINPHI,COSPHI
      LOGICAL RTHAND

      INTEGER aaa(4,2)
C
C initialisation
C
C      DATA SWITCH /0/
C
C ......................................................................
C      .  INITIALIZATION OF PROJECTION PARAMETERS (ENTRY INPUT)  .
C ......................................................................
C
      ENTRY IS24F (ZONE,DATA)
C
      IERROR = 0
      IF (SWITCH.NE.0 .AND. SWITCH.EQ.ZONE) RETURN
      DO 180 I = 1,10
      BUFF(I) = DATA(I)
  180 CONTINUE
      GO TO 020
C
C ......................................................................
C       .  INITIALIZATION OF PROJECTION PARAMETERS (FILE INPUT)  .
C ......................................................................
C
      ENTRY IF24F (INFILE)
C
      IERROR = 0
      READ (INFILE,END=160) ZONE,BUFF
      IF (SWITCH.NE.0 .AND. SWITCH.EQ.ZONE) RETURN
  020 IF (BUFF(1) .LE. ZERO) GO TO 100
      A = BUFF(1)
      B = BUFF(2)
      IF (B .GT. ZERO) GO TO 040
      E = ZERO
      ES = ZERO
      GO TO 120
  040 IF (B .GT. ONE) GO TO 060
      E = DSQRT (B)
      ES = B
      GO TO 080
  060 ES = ONE - (B / A) ** 2
      E = DSQRT (ES)
  080 CONTINUE
      GOTO 120
  100 A = AZ
      E = EZ
      ES = ESZ
  120 LON0 = PAKR (BUFF(3))
      LAT0 = PAKR (BUFF(4))
      SA = PAKR(BUFF(5))
C
C only allow Bessel spheroid within tight tolerances - (and then only
C what I think the figures are)
      IF (DABS (A  - 6377397.155D0) .LE. 0.001D0 .AND.
     .	 (DABS (B  - 6356078.962840D0) .LE. 0.001D0 .OR.
     .	  DABS (ES - 6.674372224984629D-03) .LE. 1D-9)) GOTO 124
      IF (IPEMSG .EQ. 0) PRINT 1999
 1999 FORMAT ('0ERROR PJ24F'/
     . ' KROVAK PROJECTION ONLY VALID ON BESSEL SPHEROID, AT PRESENT')
      IERROR = 245
      RETURN

  124 IF (ABS(ABS(SA) - HALFPI) .GE. EPSLN) GOTO 128
      IF (IPEMSG .EQ. 0) PRINT 2000
 2000 FORMAT ('0ERROR PJ24F'/
     .        ' ATTEMPTING AZIMUTHAL RATHER THAN CONIC PROJECTION')
      IERROR = 243
      RETURN

  128 KS0   = BUFF(6)
      X0 = BUFF(7)
      Y0 = BUFF(8)
      CONLAT = PAKR(BUFF(9))
      RTHAND = (BUFF(10) .EQ. 0)
C
C calculate our constants
      K = 1.0034191640
      IF (ABS(ABS(CONLAT) - HALFPI) .LT. EPSLN) THEN
         ALPHA = ONE
      ELSE
         ALPHA = SQRT(1.0 + (ES*(COS(CONLAT)**4.0)/(1.0 - ES)))
      ENDIF
      RRH = RHO(A,ES,CONLAT)
      RNU = NU(A,ES,CONLAT)
      RR = RRH * RNU
      RR = SQRT(RR)
      RR = RR*KS0
      U0 = GCKROV(CONLAT,E,ALPHA,K)
      UA = GCKROV(LAT0,E,ALPHA,K)
      UQ = UA + HALFPI - SA
      AA = SA - UA
      N  = SIN(SA)
      R0 = RR/TAN(SA)
      TNFN = (SA + HALFPI)*0.5
      TNFN1 = TAN(TNFN)
      TNFN1 = TNFN1**N
      TNFN1 = TNFN1*R0
      SINPHI = SIN(UQ)
      COSPHI = COS(UQ)
      ROT(1,1) = SINPHI
      ROT(2,1) = ZERO
      ROT(3,1) = -COSPHI
      ROT(1,2) = ZERO
      ROT(2,2) = ONE
      ROT(3,2) = ZERO
      ROT(1,3) = COSPHI
      ROT(2,3) = ZERO
      ROT(3,3) = SINPHI
C
C LIST RESULTS OF PARAMETER INITIALIZATION.
C
  130 CALL RADD (CONLAT,ANGS(1,1))
      CALL RADD (LAT0,ANGS(1,2))
      CALL RADD (LON0,ANGS(1,3))
      CALL RADD (SA,ANGS(1,4))
      IF (IPPARM .EQ. 0) PRINT 2010, A,ES,ANGS,KS0,X0,Y0
 2010 FORMAT ('0INITIALIZATION PARAMETERS (KROVAK',
     .        ' PROJECTION)'/
     .        ' SEMI-MAJOR AXIS OF ELLIPSOID  =',F12.2,' METERS'/
     .        ' ECCENTRICITY SQUARED          =',F12.9/
     .        ' LATITUDE FOR CONFORMAL SPHERE = ',A1,2I3,F7.3/
     .        ' LATITUDE OF ORIGIN            = ',A1,2I3,F7.3/
     .        ' LONGITUDE OF ORIGIN           = ',A1,2I3,F7.3/
     .        ' LATITUDE OF ORIGIN (SPHERE)   = ',A1,2I3,F7.3/
     .        ' SCALE FACTOR AT ORIGIN        =',F9.6/
     .        ' FALSE EASTING                 =',F12.2,' METERS'/
     .        ' FALSE NORTHING                =',F12.2,' METERS')
      DATA(1) = A
      DATA(2) = ES
      SWITCH = ZONE
      RETURN
  160 IF (IPEMSG .EQ. 0) PRINT 2020
 2020 FORMAT ('0ERROR PJ24F'/
     .        ' MISSING PROJECTION PARAMETERS')
      IERROR = 241
      RETURN
C
C ......................................................................
C                      .  FORWARD TRANSFORMATION  .
C ......................................................................
C
      ENTRY PF24F (GEOG,PROJ)
C
      IERROR = 0
      IF (SWITCH .NE. 0) GO TO 220
      IF (IPEMSG .EQ. 0) PRINT 2020
      IERROR = 242
      RETURN
  220 CONTINUE
C
C convert from spheroid to conformal sphere
      DLON = ADJL (GEOG(1) - LON0)
      DV   = ALPHA*DLON      
      IF (ABS(DV).GT.PI) DV = SIGN(PI - EPSLN,DLON)
      U    = GCKROV(GEOG(2),E,ALPHA,K)
C
C now go from vertical sphere to oblique sphere
C using 3d coordinates
C
      X = COS(U)*COS(DV)
      Y = COS(U)*SIN(DV)
      Z = SIN(U)
C
      XX = ROT(1,1)*X + ROT(2,1)*Y + ROT(3,1)*Z
      YY = ROT(1,2)*X + ROT(2,2)*Y + ROT(3,2)*Z
      ZZ = ROT(1,3)*X + ROT(2,3)*Y + ROT(3,3)*Z
C
      S = DARSIN(ZZ)
      IF (ABS(XX) .LT. EPSLN .AND. ABS(YY) .LT. EPSLN) THEN
         D = 0.0
      ELSE
         D = ATAN2(YY,XX)
      ENDIF
C
C now project on to conformal conic with one standard parallel
      DD = N*D
      TMP = (S + HALFPI) * 0.5
      TMP = TAN(TMP)
      TMP = TMP**N
      R = TNFN1/TMP
C
      IF (RTHAND) THEN
         PROJ(1) = X0 + R * DSIN (DD)
         PROJ(2) = Y0 + R0 - R * DCOS (DD)
      ELSE
         PROJ(1) =  X0 - R * DSIN (DD)
         PROJ(2) =  Y0 + R * DCOS (DD)
      ENDIF
      RETURN
C
      END
      DOUBLE PRECISION FUNCTION CGKROV(CON,E,ALPHA,K)
C
***      IDENT      25OC95
***      MODULE     CGKROV
C
C      Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C to convert between conformal and geodetic latitudes.
C 
C The function returns the geodetic latitude
C
C Author                               R.W. Russell      29-Apr-86
C
      IMPLICIT DOUBLE PRECISION (A-Z)
C
C arguments
C
C latitude to convert
      DOUBLE PRECISION CON
C eccentricity of spheroid
      DOUBLE PRECISION E
C a factor I don't understand
      DOUBLE PRECISION ALPHA
C another factor I don't understand
      DOUBLE PRECISION K
C
C w/s
C
      DOUBLE PRECISION  ONEMIN,ONEPLS
      DOUBLE PRECISION  FACTOR,FFACT
      DOUBLE PRECISION  HALFPI
      INTEGER           ITER
C
      DOUBLE PRECISION  LAT1,LAT2
      PARAMETER         (HALFPI =1.5707963267948966D0)
      DOUBLE PRECISION  LIMIT
      PARAMETER         (LIMIT = 0.00000000000001)
C
C set up first trial
C
      ITER=0
      LAT1 = CON
      FFACT = TAN(HALFPI/2+CON/2)/K
   10      CONTINUE
      ITER=ITER+1
      FACTOR=E*SIN(LAT1)
      ONEMIN=1-FACTOR
      ONEPLS=1+FACTOR
      FACTOR=(ONEPLS/ONEMIN)**((ALPHA * E)/2.0)
      FACTOR=(FFACT * FACTOR)
      FACTOR = FACTOR ** (1.0/ALPHA)
C
      LAT2 = 2*ATAN(FACTOR)-HALFPI
      IF (ITER.GT.10.OR.ABS(LAT1-LAT2).LT.LIMIT) THEN
         CGKROV=LAT2
      ELSE
         LAT1=LAT2
         GOTO 10
      ENDIF
C
      RETURN
      END
      DOUBLE PRECISION  FUNCTION GCKROV(LAT,E,ALPHA,K)
C
***      IDENT      25OC95
***      MODULE     GCKROV
C
C      Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C to convert between geodetic and conformal latitudes.
C 
C
C The function returns the conformal latitude
C
C Author                               R.W. Russell      29-Apr-86
C
      IMPLICIT DOUBLE PRECISION (A-Z)
C
C arguments
C
C latitude to convert
      DOUBLE PRECISION  LAT
C eccentricity of spheroid
      DOUBLE PRECISION  E
C a factor I don't understand
      DOUBLE PRECISION  ALPHA
C another factor I don't understand
      DOUBLE PRECISION  K
C
C w/s
C
      DOUBLE PRECISION  ONEMIN,ONEPLS
      DOUBLE PRECISION  FACTOR
      DOUBLE PRECISION  HALFPI,EPSLN
      PARAMETER         (HALFPI =1.5707963267948966D0)
      PARAMETER         (EPSLN = 1.0D-10)
C
      IF (ABS(ABS(LAT) - HALFPI) .LT. EPSLN) THEN
         GCKROV = LAT
      ELSE
         FACTOR=E*SIN(LAT)
         ONEMIN=1-FACTOR
         ONEPLS=1+FACTOR
         FACTOR=(ONEMIN/ONEPLS)**(E/2.0)
         FACTOR = FACTOR*TAN(HALFPI/2+LAT/2)
         FACTOR = FACTOR**ALPHA
C
         FACTOR = FACTOR*K
C
         GCKROV = 2*ATAN(FACTOR)-HALFPI
      ENDIF
C
      RETURN
      END
