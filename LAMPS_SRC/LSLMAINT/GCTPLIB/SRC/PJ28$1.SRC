C                   PJ28I
C **********************************************************************
C                       *  WINKEL III *
C **********************************************************************
C
CMOD    Converted to Fortran77 (WI/CC 1514)      T.J.Mulcahy 30-Oct-1995
C
	SUBROUTINE PJ28I
C
C ***	IDENT	25OC95
C ***	MODULE  PJ28I
C
C Copyright Laser-Scan Ltd., Cambridge, England
C
C Author                               R.W. Russell     24-Feb-1993
C
CMOD	PJ28I created from PJ28F for inverse transformation
C	CF28 added to compare projection parameters
C					J Barber 	20-Oct-1993
C
C This pseudocylindrical projection is the arithmetic mean between Plate
C Carrée and the Hammer Projection. It is only available in spherical
C form.
C
C arguments
C
C projection parameters
      DOUBLE PRECISION DATA(15)
C                      DATA(5) = Longitude of central meridian
C                      DATA(7) = False Eastings
C                      DATA(8) = False Northings
C geographical coordinates (radians)
      DOUBLE PRECISION GEOG(2)
C projected coordinates (usually meters)
      DOUBLE PRECISION PROJ(2)
C zone number (variable if using file)
      INTEGER    ZONE
C LUN for input file (if used)
      INTEGER   INFILE
      DOUBLE PRECISION ARGS1(15),ARGS2(15)
      LOGICAL   SAME
C
C common blocks
      INTEGER IERROR,IPEMSG,IPPARM
      COMMON /ERRM/ IERROR
      COMMON /PRIN/ IPEMSG,IPPARM
C
C default sphere
      DOUBLE PRECISION AZZ
      COMMON/SPHR/ AZZ
C
C working area
      INTEGER ANGS(4,1)
      INTEGER SWITCH
      DOUBLE PRECISION A,LON0,X0,Y0,SQRT2,TSQRT2
      DOUBLE PRECISION BUFF(15)
      COMMON /WRK28I/BUFF,ANGS,A,LON0,X0,Y0,SQRT2,TSQRT2
      COMMON /SW28I/ SWITCH
C
      DOUBLE PRECISION BLOW1,BLOW2,BHIGH1,BHIGH2,TOL
      SAVE             BLOW1,BLOW2,BHIGH1,BHIGH2,TOL
C
C constants
      INTEGER          NIT
      DOUBLE PRECISION PI,HALFPI,EPSLN,ZERO,ONE,TWO,HALF
      PARAMETER        (NIT = 100)
      PARAMETER        (PI =3.14159265358979323846D0)
      PARAMETER        (HALFPI =1.5707963267948966D0)
      PARAMETER        (EPSLN = 1.0D-12)
      PARAMETER        (ZERO = 0.0, ONE = 1.0, TWO = 2.0, HALF = 0.5)
C
C functions called
      DOUBLE PRECISION PAKR
      DOUBLE PRECISION PAKS
      DOUBLE PRECISION ADJL
      DOUBLE PRECISION DARSIN
C
      EXTERNAL WINKI
C
C working storage
      DOUBLE PRECISION B,E,ES
      DOUBLE PRECISION DLON,PHI,X,Y
      DOUBLE PRECISION STEP1,STEP2
      DOUBLE PRECISION SEC1,SEC2
      INTEGER I
      LOGICAL OK
C
C initialisation
C
C      DATA SWITCH /0/
C
C ......................................................................
C      .  INITIALIZATION OF PROJECTION PARAMETERS (ENTRY INPUT)  .
C ......................................................................
C
      ENTRY IS28I (ZONE,DATA)
C
      IERROR = 0
      IF (SWITCH.NE.0 .AND. SWITCH.EQ.ZONE) RETURN
      DO 180 I = 1,8
      BUFF(I) = DATA(I)
  180 CONTINUE
      GO TO 020
C
C ......................................................................
C       .  INITIALIZATION OF PROJECTION PARAMETERS (FILE INPUT)  .
C ......................................................................
C
      ENTRY IF28I (INFILE)
C
      IERROR = 0
      READ (INFILE,END=160) ZONE,BUFF
      IF (SWITCH.NE.0 .AND. SWITCH.EQ.ZONE) RETURN
  020 A = BUFF(1)
      IF (A .LE. ZERO) A = AZZ
      LON0 = PAKR (BUFF(5))
      X0 = BUFF(7)
      Y0 = BUFF(8)
      SQRT2 = SQRT(TWO)
      TSQRT2 = SQRT2 * TWO
      BLOW1 = -PI * 3.0
      BLOW2 = BLOW1 * HALF 
      BHIGH1 = -BLOW1
      BHIGH2 = -BLOW2
      TOL = EPSLN * A
C
C LIST RESULTS OF PARAMETER INITIALIZATION.
C
      CALL RADD (LON0,ANGS(1,1))
      IF (IPPARM .EQ. 0) PRINT 2000, A,ANGS,X0,Y0
 2000 FORMAT ('0INITIALIZATION PARAMETERS (WINKEL III PROJECTION)'/
     .        ' RADIUS OF SPHERE             =',F12.2,' METERS'/
     .        ' LONGITUDE OF C. MERIDIAN     = ',A1,2I3,F7.3/
     .        ' FALSE EASTING                =',F12.2,' METERS'/
     .        ' FALSE NORTHING               =',F12.2,' METERS')
      DATA(1) = A
      SWITCH = ZONE
      RETURN
  160 IF (IPEMSG .EQ. 0) PRINT 2020
 2020 FORMAT ('0ERROR PJ28I'/
     .        ' MISSING PROJECTION PARAMETERS')
      IERROR = 281
      RETURN
C
C ......................................................................
C                      .  INVERSE TRANSFORMATION  .
C ......................................................................
C
      ENTRY PI28I(PROJ,GEOG)
C
      IERROR = 0
      IF (SWITCH .NE. 0) GO TO 320
      IF (IPEMSG .EQ. 0) PRINT 2020
      IERROR = 284
      RETURN
  320 CONTINUE
      X = PROJ(1) - X0
      Y = PROJ(2) - Y0
C
C get an approximate position
      PHI = Y/A
      DLON = X/A
C
C and iterate to the real answer
C
C in radians
C
      STEP1 = 0.0000001
      STEP2 = 0.0000001
      CALL NEWT2D(WINKI,X,Y,PHI,DLON,
     &            STEP1,STEP2,TOL,NIT,
     &            .TRUE.,BLOW1,BLOW2,BHIGH1,BHIGH2,
     &            PHI,DLON,OK)
C
      IF (.NOT.OK) THEN
         IF (IPEMSG .EQ. 0) PRINT 2030, NIT
 2030    FORMAT ('0ERROR PF28I' /
     .        ' CONVERGENCE FAILED AFTER',I3,' ITERATIONS')
         IERROR = 283
         RETURN
      ENDIF
C
      IF (ABS(PHI) .GT. HALFPI) PHI = DSIGN (HALFPI ,PHI)

      GEOG(2) = PHI
      GEOG(1) = ADJL(LON0 + DLON)
      RETURN
C
C ......................................................................
C                 .  TRANSFORMATION  COMPARISON  .
C ......................................................................
C
      ENTRY CF28(ARGS1,ARGS2,SAME)
C
      SAME = .TRUE.
C
C semi-major axis
      IF ( DABS(ARGS1(1)-ARGS2(1)) .GT. 0.1D-3) GOTO 810
C
C eccentricity or semi-minor axis converted to eccentricity
      IF (ARGS1(2).GT.1D0) ARGS1(2) = 1D0 - ARGS1(2)*ARGS1(2) /
     &						ARGS1(1)*ARGS1(1)
C
      IF (ARGS2(2).GT.1D0) ARGS2(2) = 1D0 - ARGS2(2)*ARGS2(2) /
     &						ARGS2(1)*ARGS2(1)
C
      IF ( DABS(ARGS1(2)-ARGS2(2)) .GT. 0.1D-11) GOTO 810
C
C central meridian
      SEC1 = PAKS(ARGS1(5))
      SEC2 = PAKS(ARGS2(5))
      IF ( DABS(SEC1-SEC2) .GT. 0.1D-3) GOTO 810
C
C eastings, northings
C
      DO 802 I = 7,8
         IF ( DABS(ARGS1(I)-ARGS2(I)) .GT. 0.1D-3) GOTO 810
802   CONTINUE
      GOTO 820
C
810   SAME=.FALSE.
C
820   RETURN
      END
      SUBROUTINE WINKI(LAT,LON,X,Y)      
C
C ***	IDENT   25OC95
C ***   MODULE  WINKI
C
C      Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C to calculate X and Y, from latitude and longitude
C
C Author                               R.W. Russell      24-Feb-93
C
      IMPLICIT DOUBLE PRECISION (A-Z)
C
C arguments
C
C latitude to convert
      DOUBLE PRECISION LAT
      DOUBLE PRECISION LON
C projected point
      DOUBLE PRECISION X
      DOUBLE PRECISION Y
C
C initialised values
C
      INTEGER ANGS(4,1)
      INTEGER SWITCH
      DOUBLE PRECISION A,LON0,X0,Y0,SQRT2,TSQRT2
      DOUBLE PRECISION BUFF(15)
      COMMON /WRK28I/BUFF,ANGS,A,LON0,X0,Y0,SQRT2,TSQRT2,
     &               SWITCH
C
C working storage
C
C constants
C
      DOUBLE PRECISION PI,HALFPI,EPSLN,ZERO,ONE,TWO,HALF
      PARAMETER        (PI =3.14159265358979323846D0)
      PARAMETER        (HALFPI =1.5707963267948966D0)
      PARAMETER        (EPSLN = 1.0D-12)
      PARAMETER        (ZERO = 0.0, ONE = 1.0, TWO = 2.0, HALF = 0.5)
C
C functions called
C
      DOUBLE PRECISION DARSIN
C
C working storage
C
      DOUBLE PRECISION COSPHI,SINPHI
      DOUBLE PRECISION TMP,LON2
      DOUBLE PRECISION CSLON2,SNLON2
C
C Hammer Projection

      COSPHI = COS(LAT)
      SINPHI = SIN(LAT)
      LON2 = LON/TWO
      CSLON2 = COS(LON2)
      SNLON2 = SIN(LON2)
      TMP = SQRT(ONE + COSPHI*CSLON2)
      TMP = ONE/TMP
      X = COSPHI * SNLON2 * TSQRT2 * TMP
      Y = SQRT2 * SINPHI * TMP
C
C now add Plate-Carre coordinates
C
      X = (X + LON) * HALF
      Y = (Y + LAT) * HALF
C
C result

      X = X * A
      Y = Y * A
C
      RETURN
      END
