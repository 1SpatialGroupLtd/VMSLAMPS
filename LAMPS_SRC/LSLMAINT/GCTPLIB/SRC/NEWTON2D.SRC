C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1995-11-02 12:48:42.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
      SUBROUTINE NEWT2D(FUNC,
     &			TARG1,
     &	                TARG2,
     &			GUESS1,
     &			GUESS2,
     &			STEP1,
     &			STEP2,
     &			TOL,
     &			MAXITR,
     &			USEBOX,
     &			BLOW1,
     &			BLOW2,
     &			BHIGH1,
     &			BHIGH2,
     &			ANS1,
     &			ANS2,
     &			OK)
C
C ***	IDENT	30OC95
C ***	MODULE	NEWT2D
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C to solve two dimensional transformation by Newton-Raphson
C 
C Author 					D. Miller	24-Feb-93
C
CMOD Use a single subroutine to return the X and Y from input x and y
C						R Russell	17-Feb-94
C
CMOD    Converted to Fortran77 (WI/CC 1514)     T.J.Mulcahy     30-Oct-95
C
	IMPLICIT DOUBLE PRECISION (A-Z)
C
C	Arguments:
C
C X and Y subroutine to be solved of the form
C FUNC1(Xin,Yin,Xout,Yout)
C
      DOUBLE PRECISION FUNC
C
C Target X and Y i.e. look for  FUNC(ANS1,ANS2,TARG1,TARG2)
C
      DOUBLE PRECISION TARG1
      DOUBLE PRECISION TARG2
C
C Start guess for the iteration.
C These values should be chosen as close to the solution as an a proiri
C estimate will allow. Failure to converge may arise from a bad initial
C guess.
C
      DOUBLE PRECISION GUESS1
      DOUBLE PRECISION GUESS2
C
C Steps for evaulating the derivates of FUNC1 and FUNC2
C The steps are in units of the arguments of FUNC1 and FUNC2
C i.e derivative_estimate at X = (FUNC(X+STEP1) - FUNC1(X)//STEP
C
      DOUBLE PRECISION STEP1
      DOUBLE PRECISION STEP2
C
C The tolerance is used to successfully terminate the iteration
C and is measured in units of the output value.
C A solution is found when
C
C ABS(FUNC1(ANS)-TARG1) + ABS(FUNC2(ANS)-TARG1) < TOL
C
      DOUBLE PRECISION TOL
C
C The maximum number of iterations to be performed. The routine returns
C with OK set to .FALSE. if a solution has not been found after this
C many iterations.
C
      INTEGER MAXITR
C
C If the solution is known to exist in a certain locality then the 
C routine can be forced to only search for solutions in a box.
C If a solution is known to be localised then it is a good idea to
C use the facility firstly to make convergence more likely after an
C inadequate initial guess and also to get the correct root.
C
      LOGICAL USEBOX
      DOUBLE PRECISION BLOW1
      DOUBLE PRECISION BLOW2
      DOUBLE PRECISION BHIGH1
      DOUBLE PRECISION BHIGH2
C
C The approximate solution to the problem
C
      DOUBLE PRECISION ANS1
      DOUBLE PRECISION ANS2
C
C .TRUE. - solution has been found.
C .FALSE - solution has failed to be found in the required number of
C	   iterations.
C
      LOGICAL OK

      INTEGER COUNT
      DOUBLE PRECISION DERV11,DERV12,DERV21,DERV22
      DOUBLE PRECISION VA1,VA2,VALUE1,VALUE2
      DOUBLE PRECISION DIFF,DIFF1,DIFF2,DETER
      DOUBLE PRECISION TDETER,ADETER
      DOUBLE PRECISION BDIFF1,BDIFF2

C Initiliase iteration counter

      COUNT = 0

C Initialise target answers

      VA1 = GUESS1
      VA2 = GUESS2

C Initialise a tolerance to determine a zero determinant.

      TDETER = (0.000000001*TOL)/(STEP1 + STEP2)

C Mod the target answers into the box.
   
      IF(USEBOX) THEN
         BDIFF1 = BHIGH1 - BLOW1
         BDIFF2 = BHIGH2 - BLOW2
C
 10	 CONTINUE
         IF(VA1.GT.BHIGH1) THEN
            VA1 = VA1 - BDIFF1
	    GOTO 10
         ENDIF
C
 20	 CONTINUE
         IF(VA1.LT.BLOW1) THEN
            VA1 = VA1 + BDIFF1
	    GOTO 20
         ENDIF
C
 30	 CONTINUE
         IF(VA2.GT.BHIGH2) THEN
            VA2 = VA2 - BDIFF2
	    GOTO 30
         ENDIF
C
 40	 CONTINUE
         IF(VA2.LT.BLOW2) THEN
            VA2 = VA2 + BDIFF2
	    GOTO 40
         ENDIF
      ENDIF

C Get the values for the initial guess.
   
      CALL FUNC(VA1,VA2,VALUE1,VALUE2)

C See how good the initial guess is
 
      DIFF = ABS(VALUE1-TARG1) + ABS(VALUE2-TARG2)

C Loop while guess is not good enough

      IF (DIFF.GT.TOL) THEN

C Calculate the four derivatives at the point

          CALL FUNC(VA1+STEP1, VA2, DERV11, DERV21)
          CALL FUNC(VA1, VA2+STEP2, DERV12, DERV22)

          DERV11 = (DERV11 - VALUE1)/STEP1
          DERV12 = (DERV12 - VALUE1)/STEP2
          DERV21 = (DERV21 - VALUE2)/STEP1
          DERV22 = (DERV22 - VALUE2)/STEP2

CCCC          DERV11 = FUNC1( VA1+STEP1 , VA2)       - VALUE1
CCCC          DERV11 = DERV11/STEP1
CCCC          DERV12 = FUNC1( VA1       , VA2+STEP2) - VALUE1
CCCC          DERV12 = DERV12/STEP2
CCCC          DERV21 = FUNC2( VA1+STEP1 , VA2)       - VALUE2
CCCC          DERV21 = DERV21/STEP1
CCCC          DERV22 = FUNC2(VA1        , VA2+STEP2) - VALUE2
CCCC          DERV22 = DERV22/STEP2
C
C Solve for diff = | DIFF1 |  ...  F(X) + F'(X)diff = 0 where
C		   | DIFF2 |
C
C  F(X) =  | FUNC1(X) - TARG1 |    and  F'(X) =  | DERV11  DERV12 |
C          | FUNC2(X) - TARG2 |		         | DERV21  DERV22 |
C
          DETER = (DERV11*DERV22) - (DERV21*DERV12)
          ADETER = SQRT(ABS(DETER))

          IF(ADETER.GT.TDETER) THEN
C
C Non-zero determinant - can solve.
C
	     VALUE1 = VALUE1 - TARG1
	     VALUE2 = VALUE2 - TARG2
          
	     DIFF1 = (DERV12*VALUE2 - DERV22*VALUE1)/DETER
	     DIFF2 = (DERV21*VALUE1 - DERV11*VALUE2)/DETER
         ELSE
C
C Zero determinant - oh dear - move the point a little away and
C hope for non-zero determinant
C
	    DIFF1 = STEP1
	    DIFF2 = STEP2
         ENDIF

         VA1 = VA1 + DIFF1
         VA2 = VA2 + DIFF2
C
C Move the next point back into the box if required
C
         IF(USEBOX) THEN
C
 50	    CONTINUE
            IF(VA1.GT.BHIGH1) THEN
               VA1 = VA1 - BDIFF1
	       GOTO 50
            ENDIF
C
 60	    CONTINUE
            IF(VA1.LT.BLOW1) THEN
               VA1 = VA1 + BDIFF1
	       GOTO 60
            ENDIF
C
 70	    CONTINUE
            IF(VA2.GT.BHIGH2) THEN
               VA2 = VA2 - BDIFF2
	       GOTO 70
            ENDIF
C
 80	    CONTINUE
            IF(VA2.LT.BLOW2) THEN
               VA2 = VA2 + BDIFF2
	       GOTO 80
            ENDIF
         ENDIF
C
C Update for next iteration.
C
         CALL FUNC(VA1, VA2, VALUE1, VALUE2)
CCCC         VALUE1 = FUNC1(VA1,VA2)
CCCC         VALUE2 = FUNC2(VA1,VA2)

         DIFF = ABS(VALUE1 -TARG1) + ABS(VALUE2-TARG2)
         COUNT = COUNT + 1
         IF(COUNT.GT.MAXITR) THEN
C
C Iteration count exceeded - exit with OK false
C
            OK = .FALSE.
            RETURN
         ENDIF
      ENDIF
C
C   SUCCESS
C
      ANS1 = VA1
      ANS2 = VA2
      OK = .TRUE.

      RETURN

      END

