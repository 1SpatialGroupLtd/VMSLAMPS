C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1984-11-08 16:10:42.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
**	IF ONELEG
	SUBROUTINE RDLEG(LEGLUN)
**	IFF				! ... oneleg
	SUBROUTINE RDLEG(LEGLUN, LEGTYP)
**	ENDC				! ... oneleg
C
***	MODULE	RDLEG
***	IDENT	08NO84
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author  R. Fairbairns
C
**	IF VAX
	IMPLICIT NONE
**	ENDC				! ...vax
C
C Coded 29.iii.76
C Typed 9.iv.76
C Made to check the legenda's size 24.xi.76
C Upgraded for MTC 22.iii.77
C Adapted for MCE 12.v.78
C Conditionally restore retention of code size, instrn, 17.iv.79
C
C To read a legenda file into the array LEGDAT, as a chain of legenda
C entries
C
	INTEGER LEGLUN
C
C LEGLUN is the UNit number that has been FLR openEd with the legenda
C	 file
C
**	UNLESS ONELEG
C
	INTEGER LEGTYP
C
C LEGTYP is the 'type' of the legenda
C	-1 => line pattern legenda		(LP legenda)
C	 0 => interpolation code legenda
C	+1 => symbol select legenda
C
**	ENDC				! ... oneleg
C
***	PARAMETER/LEGTYP/		! legenda type codes
C
***	COMMON/ERRORS/
***	COMMON/LEGBUF/
***	COMMON/LEGDAT/
***	COMMON/LEGEND/
C
C function called
C
	INTEGER LEGWRD			! LEGenda read a WoRD
C
C w/s
	INTEGER		I, J		! loop counters
	INTEGER		HDRPTR, HDRWIN
	INTEGER		HDRSIZ, HDRBND
	INTEGER		CCOD, FILPTR
	INTEGER 	ITMFW, ITMTYP
	INTEGER		ITMSW, ITMLEN
	INTEGER		OLDRT
	INTEGER		ITMDAT(2)
	LOGICAL*1	ITMFWL(2)
	LOGICAL*1	ITMSWL(2)
	LOGICAL*1	ITMTOB(4)
	LOGICAL*1	ITMTYL, ITMLEL
C
	EQUIVALENCE	(ITMFW,ITMFWL(1)), (ITMSW,ITMSWL(1))
	EQUIVALENCE	(ITMDAT,ITMTOB)
	EQUIVALENCE	(ITMTYL,ITMTYP),   (ITMLEL,ITMLEN)
C
C HDRPTR is the pointer to the start of the legenda file header block
C	 in WINDOW - it points after the window block housekeeping info
C HDRWIN is the index number (1-5) of the header window block
C HDRSIZ is the number of blocks in the header
C HDRBND is the upper bound for the header reading DO loop
C
C CCOD	 is the graphical code entry in the header currently being
C	 considered
C FILPTR is the pointer to the data associated with that graphical code
C	 (an offset in the legenda file)
C
C ITMFW  and ITMSW  are the first and second words of that data (ITeM
C	 First or Second Word)
C ITMFWL and ITMSWL are byte versions of the same
C ITMTYP is the type of the item
C ITMTYL is so we can assign a byte to it, without sign extend
C ITMLEN is the length of the item's data (length os steps of a symbol)
C ITMLEL is so we can assign a byte to it, without sign extend
C
C ITMDAT and ITMOB are similar for some versions of this
C
C OLDRT	 is used to store the old version of LEGRT, the root of the
C	 legenda chain
C
C
**	UNLESS ONELEG
C Set up pointer to legenda table (1,2 or 3)
C
	CURLEG = LEGTYP+2		! current legenda
C
**	ENDC				! ...oneleg
C Initialise as no blocks in the block buffers yet
C
	LEGBLK(0) = -1
	LEGBLK(1) = -1
C
**	IF ONELEG
C and we haven't yet updated LEGTOP - it must be set to 1
C
	LEGTOP = 1
	LEGRT  = 0
**	IFF				! ...oneleg
C
C Are we reading PT legenda?
C
	IF (LEGTYP.LE.0) GOTO 15
C
C Save legenda root first time round
C
	IF (PTLRT.EQ.0) PTLRT = LEGTOP(CURLEG)
C
C Use PT root from first time round
C
	LEGTOP(CURLEG) = PTLRT
C
C And scrap previous copy of PT legenda
C
	LEGRT(3) = 0
**	ENDC				! ... oneleg
C
C Select the legenda file
C
15	CALL FLRSEL(LEGLUN)
C
C first block of header starts off
C
C	word 0:		legenda header size word (see below)
C	word 1:		pointer to first free word in file
C	word 2:		undefined
C	word 3:		this is the first word of data (pointer fields)
C
C determine our header size
C - if this is an old style header, then the first word holds the
C   legenda number, and we have 2 disk blocks of header
C - if this is a new style header, the first word is the negative
C   of the number of disk blocks in the header
C
	J = 0				! want first word
	HDRSIZ = LEGWRD(J,HEAD)
C
	IF ( HDRSIZ.LT.0 ) THEN
	   HDRSIZ = -HDRSIZ
	ELSE
	   HDRSIZ = 2
	ENDIF
C
C set up HDRPTR to point to the first word of data - this is as
C defined above
C
	HDRPTR = 3
C
C and HDRBND is the word our DO loop must stop at
C
	HDRBND = 511*(HDRSIZ/2) + (HDRSIZ/2 - 1) - 3
C
C Clear 'words over' counter
C
	AUXERN = 0
C
C Main loop - scan header
C
	DO 50 I = HDRPTR,HDRBND,2
	   J = I				! select the legenda
	   CCOD = LEGWRD(J, HEAD)		! graphical code
	   FILPTR = LEGWRD(J, HEAD)		! and pointer to data
	   IF (CCOD) 50,20,30
C
C	 Code zero - is this a blank entry or IT 0?
C
20	   IF (FILPTR.EQ.0) GOTO 60		! end of pairs
C
C	 Actually got a code - make up the entry for it
C
30	CONTINUE
	   ITMFW = LEGWRD(FILPTR, BODY)		! get first word
	   ITMTYP = 0				! clear the type word
	   ITMTYL = ITMFWL(1)			! set the bottom byte
C
C	 OK, not a dummy - we can add it to the chain
C
**	IF ONELEG
	   OLDRT = LEGRT			! remember this link
	   LEGRT = LEGTOP			! next chain ptr
**	IFF				! ... oneleg
	   OLDRT = LEGRT(CURLEG)		! remember the link
	   LEGRT(CURLEG) = LEGTOP(CURLEG)	! next chain ptr
**	ENDC				! ... oneleg
	   CALL ADDLEG(CCOD)			! write GC
	   CALL ADDLEG(OLDRT)			! and 'next' ptr
	   ITMSW = LEGWRD(FILPTR, BODY)		! get the second word
	   ITMLEN = 0				! clear the length
	   ITMLEL = ITMSWL(2)			! set the bottom byte
	   IF (ITMTYP.NE.TEXTYP) ITMLEN = ITMLEN/2	! no of coords
	   ITMSWL(2) = ITMLEN			! no of steps in symbol
	   CALL ADDLEG(ITMFW)			! write first word
	   CALL ADDLEG(ITMSW)			! and second word
C
C	 Any 'auxiliary data' to copy?
C
	   IF (ITMLEN.EQ.0) GOTO 50		! none if no steps
C
C	 If text code, convert length to number of words to copy
C
	   IF (ITMTYP.EQ.TEXTYP) ITMLEN = (ITMLEN+1)/2
	   DO 40 J = 1,ITMLEN			! write words out
	      CALL ADDLEG(LEGWRD(FILPTR,BODY))
40	   CONTINUE
C
C 'Suppressed' entry comes here
C
50	CONTINUE			! end of scan loop
C
60	CONTINUE
C
C note that we haven't yet read anything from the legenda
C
**	IF ONELEG
	LSTCOD = -1			! no last code read
**	IFF
	DO 500 I = 1,3
	   LSTCOD(I) = -1
500	CONTINUE
**	ENDC
C
C return if things are alright
C
	IF (AUXERN.EQ.0.OR..NOT.AUXERR) RETURN
C
C Legenda now full - set up message output
C
	CALL WRITEF('Legenda too big')
	CALL EXIT
C
	END
