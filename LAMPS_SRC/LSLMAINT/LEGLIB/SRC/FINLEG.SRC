C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1983-05-23 18:17:20.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
**	IF ONELEG
	INTEGER FUNCTION FINLEG(GC)
**	IFF					! ...oneleg
	INTEGER FUNCTION FINLEG(GC,LFLAG)
**	ENDC					! ...oneleg
C
***	MODULE	FINLEG
***	IDENT	23MY83
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author Paul Hardy after RSX version by R. Fairbairns
C
**	IF VAX
	IMPLICIT NONE
**	ENDC					! ...vax
C
C Created July 1980
C Copied from SOL and multi-legenda option added	RD  11-Oct-82
C
C find graphical code GC in code table
C function value is graphical type or -1 if not found
C
**	IF ONELEG
	INTEGER GC
**	IFF					! ...oneleg
	INTEGER GC,LFLAG
**	ENDC					! ...oneleg
C
C GC is the graphical code sought
C
***	COMMON/LEGEND/
***	COMMON/LEGDAT/
C
**	IF VAX
	INTEGER*2	LIB$EXTZV	! extract bit field
C
C BEWARE - we don't check that this returns a valid value!!
C
**	ENDC					! ...vax
C
C w/s
	INTEGER OURGC		! our copy of GC
	INTEGER IW,IB		! word and byte indexes into LEGDAT
C
C
**	UNLESS ONELEG
	CURLEG = 2			! basic IT code legenda
C					! - the default
	IF (LFLAG.LT.0) CURLEG = 1	! line pattern legenda
	IF (LFLAG.GT.0) CURLEG = 3	! SS legenda
**	ENDC					! ...oneleg
C
	OURGC  = GC.AND.'1777'O		! our copy masked to 10 bits
	FINLEG = -1			! assume will fail
C
**	IF ONELEG
	IF(LSTCOD.EQ.OURGC) GOTO 40		! same as last one
**	IFF					! ...oneleg
	IF ((LSTCOD(CURLEG).EQ.OURGC)
     &  .AND.(CURLEG.EQ.LSTLEG)) GOTO 40	! same as last one
**	ENDC					! ...oneleg
C
**	IF ONELEG
	IW = LEGRT				! start at the bottom
**	IFF					! ...oneleg
	IW = LEGRT(CURLEG)
**	ENDC					! ...oneleg
C
C Have we got a legenda to search through ?
	IF (IW.LE.0) GOTO 99
C
C Search through table for a match.
**	IF ONELEG
20	IF (LEGDAT(IW).EQ.OURGC) GOTO 30	! found it
	IW = LEGDAT(IW+1)			! next entry
**	IFF					! ...oneleg
20	IF (LEGDAT(IW,CURLEG).EQ.OURGC) GOTO 30
	IW = LEGDAT(IW+1,CURLEG)		! next entry
**	ENDC					! ...oneleg
	IF (IW.EQ.0) GOTO 99			! end of legenda
	GOTO 20					! keep looking
C here if found a match
**	IF ONELEG
30	LSTCOD = OURGC				! new 'last code'
**	IFF					! ...oneleg
30	LSTCOD(CURLEG) = OURGC
**	ENDC					! ...oneleg
	IW = IW+2				! on to data part
	IB = IW*2-1				! byte index
**	IF ONELEG
	CODTYP = LEGBYT(IB)			! graphical type
**	IFF					! ...oneleg
	CODTYP = LEGBYT(IB,CURLEG)	! type is all we want for
	IF (CURLEG.EQ.2) GOTO 40	! basic IT code legenda.
**	ENDC					! ...oneleg
C size and special instruction fields reqd on VAX
	IB = IB+1
**	IF ONELEG
	CODSIZ = LEGBYT(IB)
	IB = IB+1
	CODSIN = LEGBYT(IB)
**	IFF					! ...oneleg
	CODSIZ = LEGBYT(IB,CURLEG)
	IB = IB+1
	CODSIN = LEGBYT(IB,CURLEG)
**	ENDC					! ...oneleg
	IB = IB+1
**	IF VAX
**	IF ONELEG
	CODLEN = LIB$EXTZV(0,8,LEGBYT(IB))
**	IFF					! ...oneleg
	CODLEN = LIB$EXTZV(0,8,LEGBYT(IB,CURLEG))
**	ENDC					! ...oneleg
**	IFF					! ...vax
**	IF ONELEG
	CODLEN = LEGBYT(IB)
**	IFF					! ...oneleg
	CODLEN = LEGBYT(IB,CURLEG)
**	ENDC					! ...oneleg
**	ENDC					! ...vax
	CODPTR = IB/2+1			! word index of rest of data
C
C here with /LEGEND/ set up
40	FINLEG = CODTYP
**	UNLESS ONELEG
	LSTLEG = CURLEG
**	ENDC					! ...oneleg
99	RETURN
C
	END
