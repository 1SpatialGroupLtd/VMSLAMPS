;
; * This file is part of the LAMPS distribution, released as a software
; * preservation project to archive digital history for future historians.
; * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
; *
; * Timestamp of this file for the 2002 release was: 1980-05-30 11:29:16.000000000 +0100
; *
; * This program is free software: you can redistribute it and/or modify
; * it under the terms of the GNU General Public License as published by
; * the Free Software Foundation, version 3.
; *
; * This program is distributed in the hope that it will be useful, but
; * WITHOUT ANY WARRANTY; without even the implied warranty of
; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
; * General Public License for more details.
; *
; * You should have received a copy of the GNU General Public License
; * along with this program. If not, see http://www.gnu.org/licenses/.
;
	.TITLE	FINLEG
	.IDENT	/APR 77/
	.ENABL	LC

; Copyright Laser Scan Laboratories Ltd., Cambridge, England.
; Author  R. Fairbairns		Date as .IDENT

; Coded 21.iii.77

	.PSECT

; FORTRAN INTEGER FUNCTION FINLEG(GC)

; Find graphical code GC in the code table

; Result is the code's 'graphical type', or
;  -1 if the code's not found

; CODTYP,CODSIZ,CODSIN,CODLEN, and CODPTR are set up

FINLEG:: .IF NE	ONELEG
	MOV	#LSTCOD, R1
	.IFF
	CMPB	(R5), #1	; more than one argument?
	BEQ	20$		; if EQ, no
	MOV	@4(R5), R4	; get legenda flag
	BEQ	30$		; if EQ, it's basic code legenda
	BMI	10$		; if MI, it's line pattern legenda
	MOV	#2, R4		; it's the SS legenda
	BR	30$
10$:	MOV	#-2, R4		; mark line pattern legenda
	BR	30$
20$:	CLR	R4		; only one argument - default to IT legenda
30$:	.IFTF
	MOV	@2(R5), R2	; graphical code we seek
	.IFT
	CMP	(R1), R2	; same as last one?
	.IFF
	CMP	LSTCOD+2(R4), R1 ; same as last one for this legenda?
	.IFTF
	BEQ	80$
	.IFT
	MOV	LEGRT, R3	; root of the legenda
	.IFF
	MOV	LEGRT+2(R4), R3	; root of this legenda
	.ENDC
; NB no test on null root, since we ALWAYS have a code (or even two)

; main loop - scan the table
40$:	CMP	(R3)+, R2
	BEQ	50$
	MOV	(R3), R3
	BNE	40$

; end of code file - return 'not found'
	MOV	#-1, R0
	RTS	PC

; found the code
50$:	.IF NE	ONELEG
	MOV	R2, (R1)+	; new 'last code'
	.IFF
	MOV	R2, LSTCOD+2(R4) ; new 'last code' for this legenda
	.ENDC
	TST	(R3)+		; over code table 'link to next'
	MOVB	(R3)+, R0	; code type (function result)
	.IF NE	ONELEG
	MOV	R0, (R1)+	; store type in /LEGEND/
	.IFF
	TST	R4		;  is it basic legenda?
	BNE	60$		; if NE, no - don't care about type
	MOV	R0, CODTYP	; preserve type in /LEGEND/
	RTS	PC

; not basic legenda
60$:	BLT	70$		; if LT, line pattern legenda
	.ENDC
	.IF NE	CODDAT
	.IF NE	ONELEG
	MOV	#CODSIZ, R1	; point into /LEGEND/
	.ENDC
	MOVB	(R3)+, R2	; code size
	MOV	R2, (R1)+
	MOVB	(R3)+, R2	; code special instruction
	MOV	R2, (R1)+
	.ENDC
	.IF NE	ONELEG
70$:	MOV	#CODLEN, R1	; point into /LEGEND/
	.ENDC
	MOVB	(R3)+, R2	; code length
	MOV	R2, (R1)+
	MOV	R3, (R1)	; code 'pointer'
	RTS	PC

; same as last code looked up
80$:	MOV	2(R1), R0	; return type
;	RTS	PC		; remove commenting-out when RDLEGT not null


; for MTC, who don't want legenda texts, a dummy RDLEGT
RDLEGT:: RTS	PC

	.END

