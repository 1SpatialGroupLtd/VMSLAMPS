C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1980-06-03 14:44:32.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
**	IF WINLEG
	SUBROUTINE RDLEG(SZLEG)
**	IFF
**	IF ONELEG
	SUBROUTINE RDLEG(LEGLUN)
**	IFF
	SUBROUTINE RDLEG(LEGLUN, LEGTYP)
**	ENDC
**	ENDC
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author  R. Fairbairns
C
C Coded 29.iii.76
C Typed 9.iv.76
C Made to check the legenda's size 24.xi.76
C Upgraded for MTC 22.iii.77
C Adapted for MCE 12.v.78
C Conditionally restore retention of code size, instrn, 17.iv.79
C
C To read a legend to the space atop the task in the partition
C
**	IF WINLEG
	INTEGER SZLEG
C
C SZLEG is the size of the legenda file
**	IFF
	INTEGER LEGLUN
C
C LEGLUN is the LUN that has been FORTRAN OPENed with the legenda file
**	UNLESS ONELEG
C
	INTEGER LEGTYP
C
C LEGTYP is the 'type' of the legenda
C	-1 => line pattern legenda
C	 0 => interpolation code legenda
C	+1 => symbol select legenda
**	ENDC
**	ENDC
C
***	PARAMETER/LEGTYP/
C
***	COMMON/CONSTS/
***	COMMON/ERRORS/
**	UNLESS WINLEG
***	COMMON/LEGBUF/
**	ENDC
***	COMMON/LEGEND/
**	IF WINLEG
***	COMMON/WINDOW/
**	ENDC
C
C function called
	INTEGER LEGWRD
C
C w/s
	INTEGER HDRPTR, HDRWIN, CCOD, FILPTR
	INTEGER ITMFW, ITMTYP, ITMSW, ITMLEN, OLDRT, ITMDAT(2)
	LOGICAL*1 ITMFWL(2), ITMSWL(2), ITMTOB(4)
	EQUIVALENCE (ITMFW,ITMFWL(1)), (ITMSW,ITMSWL(1))
	EQUIVALENCE (ITMDAT,ITMTOB)
**	IF WINLEG
C
C window control saves
	INTEGER WBLNSV(5), DALSV
C
C is there any legenda?
	IF (SZLEG.LE.1) GOTO 110
C
C frig the window control
C
C insulate ourselves from disc block-number traps
	DALSV = DALOCN
	DALOCN = 1
C
C insulate anything in a window block from anything we can do
	DO 10 I = 1,NWB
	WBLNSV(I) = WBLN(I)
	IF (IABS(WBLN(I)).GE.DALOCN) DALOCN = IABS(WBLN(I))+1
10	IF (WBLN(I).NE.0) WBLN(I) = -IABS(WBLN(I))-1
C
C (we assume there are no read-ahead transfers outstanding!!!)
C
C get header to core
	CALL LOCK(ONE, ZERO)
	HDRPTR = CWINAD+3
	HDRWIN = CWIN
C
C real value for disc block-number trap control
	IF (DALOCN.LT.WINDOW(CWINAD+2)+2) DALOCN = WINDOW(CWINAD+2)+2
**	IFF
C
C initialise legenda buffer
C
C no block in the block buffers
	LEGBLK(0) = -1
	LEGBLK(1) = -1
**	UNLESS ONELEG
C
C are we reading PT legenda
	IF (LEGTYP.LE.0) GOTO 15
C
C save legenda root first time round
	IF (PTLRT.EQ.0) PTLRT = LEGTOP
C
C use PT root from first time round
	LEGTOP = PTLRT
C
C and scrap previous copy of PT legenda
	LEGRT(3) = 0
**	ENDC
C
C select the legenda file
15	CALL FLRSEL(LEGLUN)
C
C set up header pointer (a foregone conclusion)
	HDRPTR = 3
**	ENDC
C
C clear 'words over' counter
	AUXERN = 0
C
C main loop - scan header
	DO 50 I = HDRPTR,HDRPTR+508,2
**	IF WINLEG
	CCOD = WINDOW(I)
	FILPTR = WINDOW(I+1)
**	IFF
	J = I
	CCOD = LEGWRD(J, ZERO)
	FILPTR = LEGWRD(J, ZERO)
**	ENDC
	IF (CCOD) 50,20,30
C
C code zero - is this a blank entry or IT 0?
20	IF (FILPTR.EQ.0) GOTO 60
C
C actually got a code - make up the entry for it
**	IF WINLEG
30	ITMFW = LEGWRD(FILPTR, SZLEG)
**	IFF
30	ITMFW = LEGWRD(FILPTR, ONE)
**	ENDC
	ITMTYP = ITMFWL(1)
**	UNLESS CODDAT
	ITMTOB(1) = ITMTYP
**	IFTF
C
C OK, not a dummy - we can add it to the chain
**	IF ONELEG
	OLDRT = LEGRT
	LEGRT = LEGTOP
**	IFF
	OLDRT = LEGRT(LEGTYP+1)
	LEGRT(LEGTYP+1) = LEGTOP
**	ENDC
	CALL ADDLEG(CCOD)
	CALL ADDLEG(OLDRT)
**	IF WINLEG
	ITMSW = LEGWRD(FILPTR, SZLEG)
**	IFF
	ITMSW = LEGWRD(FILPTR, ONE)
**	ENDC
	ITMLEN = ITMSWL(2)
	IF (ITMTYP.NE.TEXTYP) ITMLEN = ITMLEN/2
**	IFF
	ITMTOB(2) = ITMLEN
	CALL ADDLEG(ITMDAT)
**	IFT
	ITMSWL(2) = ITMLEN
	CALL ADDLEG(ITMFW)
	CALL ADDLEG(ITMSW)
**	ENDC
C
C any 'auxiliary data' to copy?
	IF (ITMLEN.EQ.0) GOTO 50
C
C if text code, convert length to number of words to copy
	IF (ITMTYP.EQ.TEXTYP) ITMLEN = (ITMLEN+1)/2
	DO 40 J = 1,ITMLEN
40	CALL ADDLEG(LEGWRD(FILPTR, SZLEG))
C
C 'suppressed' entry comes here
50	CONTINUE
C
C end of legenda - free all window space used, by
C  restoring status quo ante
**	IF WINLEG
60	DO 80 I = 1,NWB
	WBLN(I) = WBLNSV(I)
	IF (WBLN(I).NE.0) GOTO 80
C
C clear blocks we may have used
	DO 70 J = I*512-511,I*512
70	WINDOW(J) = 0
80	CONTINUE
	DALOCN = DALSV
C
C ensure the disc is now going if it's needed
	CALL DSASTR
	DO 90 I = 1,NWB
	IF (DBUSY) GOTO 100
90	IF (WBLN(I).GT.0.AND.WUPDCT(I).NE.0) CALL DTRANS
C
C all done - time to go home
100	CALL ENASTR
**	IFF
C
C dispose of the legenda file
60	CLOSE (UNIT=LEGLUN)
**	ENDC
	IF (AUXERN.EQ.0.OR..NOT.AUXERR) RETURN
C
C legenda now full - set up message output
	MESSAG = -7
	AUXERN = AUXERN+LEGLIM-LEGBAS
	GOTO 120
**	IF WINLEG
C
C legenda size silly
110	AUXERN = 2
	MESSAG = -6
**	ENDC
C
C common error exit
120	AUXERR = .FALSE.
	RETURN
C
	END
