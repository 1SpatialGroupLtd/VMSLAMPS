;
; * This file is part of the LAMPS distribution, released as a software
; * preservation project to archive digital history for future historians.
; * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
; *
; * Timestamp of this file for the 2002 release was: 1982-03-29 12:50:36.000000000 +0100
; *
; * This program is free software: you can redistribute it and/or modify
; * it under the terms of the GNU General Public License as published by
; * the Free Software Foundation, version 3.
; *
; * This program is distributed in the hope that it will be useful, but
; * WITHOUT ANY WARRANTY; without even the implied warranty of
; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
; * General Public License for more details.
; *
; * You should have received a copy of the GNU General Public License
; * along with this program. If not, see http://www.gnu.org/licenses/.
;
; MACRO representation of Tektronix library vector generator workspace
 
	.LIBRARY	/SYS$LIBRARY:LIB/
 
	$GBLINI
 
	COMMON	TKVW
 
TKCODC:	.BLKB	4		; temporary array for coding positions
	.IF NE C4014
	.BLKB	1		; extra byte for extra bits on big screen
	.ENDC
TKGRAF:	.BYTE	0		;  0 => in alpha mode
				; -1 => in graph mode
THBRT:	.BLKB	1		;  0 => this vector 'bright'
				; -1 => this vector 'dark'
				; used in deciding whether to supress (0,0) move
LSTBRT:	.BLKB	1		; ditto, re last vector
	.EVEN
 
TKCBUF:	.LONG	TKBUF1		; 'current buffer' pointer
TKBLIM:	.LONG	TKBUF1+2+TKBFSZ	; current buffer limit
TKBPTR:	.LONG	TKBUF1+2	; pointer into current buffer
TKNEFN:	.BLKW	1		; next output efn to use
TKOEFS:	.BLKW	1		; sum of output event flags (for switching)
 
; positions, etc
TKSAVX:	.BLKF	1		; last graphic position
TKSAVY:	.BLKF	1
	.IF NE C4014
TKCENX:	.FLOAT	2047.5		; screen centres
TKCENY:	.FLOAT	1535.5
	.IFF
TKCENX:	.FLOAT	511.5
TKCENY:	.FLOAT	383.5
	.ENDC
 
; buffers and immediately associated information
	.LONG	TKISB1		; io status block pointer
TKBUF1:	.WORD	0		; for active efn
	.BLKB	TKBFSZ		; actual buffer
	
	.LONG	TKISB2
TKBUF2:	.WORD	0
	.BLKB	TKBFSZ
 
TKISB1:	.BLKL	2		; i/o
TKISB2:	.BLKL	2		;   status blocks
 
; flagword and associated offsets
FLAGW:	.LONG	0
 
; define bits in said flagword
	_VIELD	FLAG,0,<-
		<IFTHK,,M>,-	; =1 if 'thick line diversion' in operation
		<TUPTD,,M>,-	; =1 if moves not up to date
		<RFOLO,,M>,-	; =0 if to suppress next movement at RFSWB
		<THKD,,M>,-	; =1 to complete thick diversion
		<THKSAV,,M>-	; =1 (while in refresh mode) if IFTHK at entry to refresh mode
		>
 
; DPB for output transfers (extensively patched)
QO.DPB:	$QIO	FUNC=IO$_WRITEVBLK!IO$M_NOFORMAT
 
QO.CHAN = QO.DPB+QIO$_CHAN	; CHAN to use (set up in TKINIT)
QO.EFN = QO.DPB+QIO$_EFN	; EFN to use
QO.ISB = QO.DPB+QIO$_IOSB	; io status block
QO.BUF = QO.DPB+QIO$_P1		; buffer
QO.LEN = QO.DPB+QIO$_P2		;	 length
 
	.PSECT
