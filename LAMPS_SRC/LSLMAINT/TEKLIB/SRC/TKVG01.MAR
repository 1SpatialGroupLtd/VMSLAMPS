	.TITLE	TKVG
	.IDENT	/29MR82/
 
; Copyright Laser-Scan Laboratories Ltd., Cambridge, England
; Author Susan Manning, from originals by R.Fairbairns
;		from originals by P.A.Woodsford, P.Cross, et al.
 
; date as .IDENT
 
; T e k t r o n i x   d i s p l a y  ' v e c t o r   g e n e r a t o r '
 
	CODE_PSECT	TKW
 
; flush moves
 
TKFLSH::
 .ENTRY		LDFLSH,^M<R2,R4,R5,R6,R7,R8,R9,R10,R11>
	BSBB	T.FLSH
	RET
T.FLSH:: BBCC	#FLAG_V_TUPTD,FLAGW,FLRTS ; already up to date
FFLSH:	MOVF	TKSAVX,R6	; 'force flush' entry (from within this module)
	CLRW	R10
	MOVF	TKSAVY,R8
	BSBB	TKMVGN		; generate the move
FLRTS:	RSB
 
 
; TKMOV - generate a move
 
;input:
;   R6,R8 = position, machine coords, rel. centre of screen
;   R10 = 0,1 => dark, bright vector
 
$TKMOV:: TSTW	R10	
	BNEQ	TKUPTD		; branch if bright
	MOVF	R6,TKSAVX	; preserve endpoints
	BISL2	#FLAG_M_TUPTD,FLAGW ; remember not up to date
	MOVF	R8,TKSAVY
	RSB			; nothing generated in this case
 
; visible move - are we up to date?
TKUPTD:	BBC	#FLAG_V_TUPTD,FLAGW,TKMVGN ; branch if we are
GETGRF:	PUSHL	R6		; entry to get to graph mode
	PUSHL	R10		; preserve move-in-hand
	PUSHL	R8
	BSBB	FFLSH		; flush out buffered invisible
				;  (or go invisibly to last graphic position,
				;     to get back to graph mode)
	MOVF	(SP)+,R8	; restore
	MOVL	(SP)+,R10
	MOVF	(SP)+,R6
; fall through to generate move -in-hand
; converts R6,R8 => R7,R9 (integer counts for $TKCOD )
;
; ensure in graphic mode
TKMVGN:	TSTB	TKGRAF		; are we in graph mode
	BNEQ	10$		; yes
	TSTW	R10		; bright?
	BNEQ	GETGRF		; yes - execute invisible to get to graph mode
10$:	TSTW	R10		; in graph mode if necessary
	BNEQ	15$		; skip if bright
	BSBW	$TKW2C		; output GS to get to graph mode, set dark vector
	.BYTE	AS.GS,0
	CLRB	THBRT		; mark dark vector
	BRB	20$
15$:	MOVB	#-1,THBRT	; mark bright
20$:	MOVF	R6,TKSAVX	; preserve position
	MOVF	R8,TKSAVY
	ADDF2	TKCENX,R6	; convert to counts
	ADDF2	TKCENY,R8	;   (rel. to l.h. bottom corner)
	MOVF	R6,TKRHX	; preserve
	MOVF	R8,TKRHY
	CVTFW	R6,R7		; to integer counts for TKCODE
	BGEQ	30$
	CLRW	R7		; force in range at bottom
30$:	CMPW	R7,#SCEXTX
	BLEQ	40$
	MOVW	#SCEXTX,R7	; force in range at top
40$:	CVTFW	R8,R9		; now same for Y
	BGEQ	50$
	CLRW	R9
50$:	CMPW	R9,#SCEXTY
	BLEQ	60$
	MOVW	#SCEXTY,R9
60$:	CMPW	R7,TKRHXC	; look for (0,0) move
	BNEQ	65$
	CMPW	R9,TKRHYC	; ...
	BNEQ	65$
	TSTB	TKGRAF		; treat 'getting to graph mode' as non-0 vector
	BEQL	65$
	BITB	THBRT,LSTBRT	; (0,0) move - either this or last dark?
	BEQL	66$		; yes - force it out
	RSB			; both bright - ignore move
 
 
;let move go
65$:	MOVW	R7,TKRHXC	; save new endpoint in Tek space
	MOVW	R9,TKRHYC
66$:	MOVB	THBRT,LSTBRT	; save brightness marker
	BSBW	$TKCOD		; code the move
	TSTB	TKGRAF		; in graph mode?
	BEQL	70$		; no
	BSBB	ESTAB		; establish what needs to be transmitted
	BRB	TRNSMT		; go to output
 
70$:	CLRW	R9		; we weren't in graph mode - transmit everything in case
	DECB	TKGRAF		; but we are now
	BRB	TRNSMT		; go to output
 
 
 
; establish which bytes need to be transferred
; TKCODD contains coded position currently held by display
; TKCODC contains coded version of our current position
 
ESTAB:	MOVAB	TKCODC,R1	; source
	MOVAB	TKCODD,R2	; dest'n
	MOVW	#^O10,R9	; marker word/counter
	CLRL	R4		; bit to lose at end
10$:	CMPB	(R1)+,(R2)+	; compare one character
	BNEQ	20$		; different - will have to be transmited anyway
	BISW2	#^O20,R9	; mark byte not to be transmitted
	BRB	30$
 
20$:	BITW	#7,R9		; first time round?
	BEQL	30$		; yes
	MOVL	#4,R4		; no - force 3rd byte out regardless
30$:	ROTL	#-1,R9,R9	; count down/get markers to place
	BGEQ	10$		; loop
	BICL2	R4,R9		; force transmission of 3rd byte if necessary
	RSB
 
 
; transmit coded position array
; TKCODC holds new array
; TKCODD holds array to store result in
; R9 holds bitwise indication of whether to transmit bytes:
;   d<n> = 0,1 => transmit, leave byte <n> of TKCODC
;		   (n = 0,4)
 
TRNSMT:	MOVAB	TKCODC,R6
	MOVAB	TKCODD,R7
	.IF EQ C4014
	MOVL	#4,R8
	.IFF
	MOVL	#5,R8
	.ENDC
 
10$:	MOVB	(R6)+,R10	; next character
	ROTL	#-1,R9,R9	; byte to transmit?
	BLSS	20$		; no
	MOVB	R10,(R7)+	; to output array
	BSBW	$TKWCH		; to buffer
	BRB	30$
 
20$:	INCL	R7		; as we've put nothing into output buffer
30$:	SOBGTR	R8,10$		; for all 5 bytes
	RSB
 
;
; TKCODE(IX,IY,CH) where CH is a 5-byte array
; converts (IX,IY) into 5 bytes for 4014 GRAPH mode
; (with enhanced graphics module)
 
 .ENTRY		TKCODE,^M<R4,R7,R9>
	MOVZWL	@4(AP),R7	; IX
	MOVZWL	@8(AP),R9	; IY
	MOVL	12(AP),R4		; CH
	BSBB	DOCODE
	RET
 
 
;
; Code R7, R9 into TKCODC array
 
$TKCOD:: MOVAB	TKCODC,R4
DOCODE:	EXTZV	#7,#5,R9,R1	; high Y
	BISB3	#TG.HIY,R1,(R4)+	; save
	BICW3	#MASK2,R7,R1		; bottom 2 bits of X
	INSV	R9,#2,#2,R1		; bottom 2 bits of Y
	BISB3	#TG.LS2,R1,(R4)+	; save
	EXTZV	#2,#5,R9,R1		; intermediate Y
	BISB3	#TG.LOY,R1,(R4)+	; save
	EXTZV	#7,#5,R7,R1		; high X
	BISB3	#TG.HIX,R1,(R4)+	; save
	EXTZV	#2,#5,R7,R1		; intermediate X
	BISB3	#TG.LOX,R1,(R4)
;DOCODE:	ASHL	#-7,R9,R1		; high Y
;	BICW2	#MASK5, R1
;	BISW2	#TG.HIY, R1		; set tag bits
;	MOVB	R1, (R4)+		; save
;	BICW3	#MASK2, R9, R1		; bottom 2 bits of Y
;	ASHL	#2, R1, R1		; to position
;	BICW3	#MASK2, R7, R0		; bottom 2 bits of X
;	BISW2	R0, R1			; to position
;	BISW2	#TG.LS2, R1		; add marker bits
	RSB
 
MASK5 = ^O177740		; mask to bottom 5 bits
MASK2 = ^O177774		; mask to bottom 2 bits
 
 
; set LCE on Tektronix
 
$TKLCE:: MOVB	#AS.ESC,R10  	; by transmitting <esc>
 
; ... and fall through
 
 
; write character R10 to Tektronix
 
$TKWCH:: MOVAB	TKBPTR,R1
	MOVL	(R1),R2		; character pointer
	MOVB	R10,(R2)+	; put character in buffer
	MOVL	R2,(R1)		;restore updated pointer
	CMPL	R2,-(R1)	; are we at end of buffer
;;	BGTRU	10$		; WRONG TEST, here because of buffering bug
	BLSSU	10$		; no
	BSBB	$FLUSH		; flush out buffer - full
10$:	RSB
 
 
; write one or two characters (SP) to Tektronix
;
; call JSB $TKW2C
;      .BYTE C1,C2		; C2=0 if one only
 
$TKW2C:: MOVZBL	@(SP),R10	; first
	BSBB	$TKWCH
	INCL	(SP)
	MOVZBL	@(SP),R10	; second
	BEQL	10$
	BSBB	$TKWCH
10$:	INCL	(SP)
	RSB
 
 
; flush current buffer to Tek
 
$FLUSH:: MOVL	TKCBUF,R5	; buffer to output
	MOVL	-4(R5),QO.ISB	; put ISB into DPB
	TSTW	(R5)		; is it still active?
	BEQL	10$		; no
	BPT
10$:	MOVAW	TKNEFN,R1
	MOVW	(R1),R11	; efn to use
	MOVW	R11,(R5)+	; set the event flag we'll use
	MOVZBL	R11,QO.EFN	; in the DPB too
	CMPL	R5,-4(R1)	; any characters to output?
	BNEQ	15$		; no
	BRW	20$
15$:	SUBW3	R11,TKOEFS,(R1)	; switch efns for 'next' efn to use
	SUBL2	R5,-(R1)	; form no. of characters to output
	MOVL	R5,QO.BUF	; parameters to
	MOVL	(R1),QO.LEN	;  QIO dpb
	SUBL3	R5,#TKBUF1+TKBUF2+4,R5	; form next buffer
	MOVAB	(R5),(R1)		; to buffer control area
	MOVAB	TKBFSZ(R5),-(R1)	; buffer limit
	MOVL	R5,R11
	MOVAW	-(R11),-(R1)	; next buffer
	TSTB	TKENBL		; enabled?
	BEQL	20$		; no - don't output
	TSTB	TKWHDC		; waiting hard copy?
	BEQL	40$		; no
	$WAITFR_S EFN=TKHTEF		; wait for timer to expire
	BLBC	R0,ERRSIG	; branch if error
40$:	$QIO_G 	QO.DPB		; output the buffer
	BLBC	R0,ERRSIG	; branch if error
30$:	BSBB	WBUFF2		; wait for previous buffer to go so can carry on
20$:	CLRW	-(R5)		; this buffer NOT now active
	RSB
 
 
; flush current buffer, wait for it to complete
 
$FLSHW:: BSBW	$FLUSH
 
; wait for last buffer to complete
 
$WBUFF:: SUBL3	TKCBUF,#TKBUF1+TKBUF2,R11 ; not the one we're now using
 
; wait for buffer pointed at by R11 to complete
 
WBUFF2:	MOVZWL	(R11),R1	; read event flag number
	BEQL	10$		; already complete
	TSTB	TKENBL		; enabled?
	BEQL	20$		; no - nothing to wait for
	$WAITFR_S EFN=R1	; wait for completion
	BLBC	R0,ERRSIG	; branch if error
30$:	MOVZWL	@-4(R11),R0
	BLBC	R0,ERRSIG		; $QIO function failed ?
20$:	CLRW	(R11)		; completed
10$:	RSB
 
; general error exit
ERRSIG:	PUSHL	R0
	CALLS	#1,LIB$SIGNAL
	RSB

	.PSECT
	.END
