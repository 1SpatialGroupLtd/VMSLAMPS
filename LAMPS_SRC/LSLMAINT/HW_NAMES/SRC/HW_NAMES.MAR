
; ...	Title:		List_VAX_Names
;
; ...	Version:	V1.1-000
;
; ...	Facility:	The Short, Fun Programs Facility
;
; ...	Abstract:	This program lists the hardware names of all the
;			VAX processor types listed in the hardware name
;			table.  Highlights the name and index of the
;			processor it's run on.
;
; ...	Privileges:	None.
;
; ...	Environment:	V5 of VMS (tested on V5.1).
;
; ...	Author:		Carl Morris
;                       carlm@iplmail.orl.mmc.com
;
; ...	Date:		20-Jan-1990
;                                        
; ..	Modified:
;
;	V1.1-PGH1	Paul Hardy	 5-Dec-1994
;		Put code and data in separate PSECTS for benefit of AXP
;
;	V1.1-000	Carl Morris	22-Jan-1990
;		Go find processor index directly from SB data structure
;		instead of making a call to $getsyi.
;
;	V1.0-000	Carl Morris	20-Jan-1990
;		Original version online.
;
;-------------------------------------------------------------------------------
;
;
	.title	List_VAX_Names
	.ident	'V1.1-000'

	.library	'sys$library:lib.mlb'
	.link		'sys$system:sys.stb'	/selective_search

	$syidef					; $getsyi item codes
	$sbdef					; sb defs

bufflen = 80					; length of scratch buffer


; check_status is a macro to check for successful completion, it calls
; $exit with the bad status if the low bit is not set
	.macro	check_status status=r0,?x               
	blbs	status,x			; check for lbs
	$exit_s	status				; exit if not
x:
	.endm	check_status


; print is a macro to format and print an ascii string, it calls $fao to 
; format a string and then lib$put_output to print it, r0 is destroyed.
	.macro	print cstr,param1=#0,param2=#0
	movw	#bufflen,resultant_string	; fixup outbuf length
	$fao_s	ctrstr=cstr, -			; format table entry
		outlen=resultant_string, -	; put outlen in desc
		outbuf=resultant_string, -	; desc for outbuf
		p1=param1, -			; p1 param
		p2=param2			; p2 param
	check_status				; check ret status
	pushaq	resultant_string		; addr of outbuf desc
	calls	#1,g^lib$put_output		; print string
	check_status				; check ret status
	.endm	print

	.PSECT	HWN$DATA QUAD,PIC,USR,CON,REL,LCL,NOSHR,NOEXE,RD,WRT,NOVEC

resultant_string:				; descriptor for $fao
	.word		bufflen			;  length of buffer
	.blkw					;  type, class are zero
	.address	.+4			;  address of buffer
	.blkb		bufflen			;  set aside bufflen bytes

hdrstr:						; title string
	.ascid		'!/   CPU Index           CPU Name!/'

namstr1:					; $fao format string
	.ascid		'     !XW      -      !AC'

namstr2:					; $fao format string
	.ascid		' **  !XW      -      !AC'

	.PSECT HWN$CODE PIC,USR,CON,REL,LCL,SHR,EXE,RD,NOWRT,NOVEC

	.entry	list_vax_names,^m<>		; start execution here

; Note: exe$gl_hwname_length contains the address of a longword which
; has the count of how many processor names there are in the name table,
; and exe$gl_hwname contains the address of the start of the table.  The
; name table is a sequence of addresses, each pointing to an ASCIC 
; string containing the name of a VAX processor.  The CPU index comes
; from the two most significant bytes of the hardware version number
; (SYI$_NODE_HWVERS with $GETSYI or NODE_HWVERS with F$GETSYI).

	movl	g^scs$ar_localsb,r6		; get addr of sb
	movl	g^exe$gl_hwname_length,r5	; get addr of max index
	movl	g^exe$ga_hwname,r4		; get addr of ptr table
	movzbl	#1,r3				; init index register

	print	hdrstr				; print title string

10$:	movaq	namstr1,r2			; assume we're not this cpu
	cmpw	r3,<sb$b_hwvers+10>(r6)		; are we this cpu?
	bneq	20$				; no, branch
	movaq	namstr2,r2			; highlight this one
20$:	print	(r2),r3,(r4)+			; print index and name
	aobleq	(r5),r3,10$			; repeat until done
	
	ret					; leave

	.end	list_vax_names
