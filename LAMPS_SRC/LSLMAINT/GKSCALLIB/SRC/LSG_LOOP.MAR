;
; * This file is part of the LAMPS distribution, released as a software
; * preservation project to archive digital history for future historians.
; * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
; *
; * Timestamp of this file for the 2002 release was: 1992-07-20 12:04:04.000000000 +0100
; *
; * This program is free software: you can redistribute it and/or modify
; * it under the terms of the GNU General Public License as published by
; * the Free Software Foundation, version 3.
; *
; * This program is distributed in the hope that it will be useful, but
; * WITHOUT ANY WARRANTY; without even the implied warranty of
; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
; * General Public License for more details.
; *
; * You should have received a copy of the GNU General Public License
; * along with this program. If not, see http://www.gnu.org/licenses/.
;
	.TITLE	LSG_LOOP
	.IDENT	/20JL92/

;Copyright Laser Scan Ltd., Cambridge, England
;Author Clarke Brunt, 16-July-1992
;
; Optimised inner loop for CAL5800LIB LSG_PIXEL_ARRAY

	.LIBRARY	/LSL$LIBRARY:LSLMACLIB/

	CODE_PSECT	LSL

; SUBROUTINE LSG_LOOP(
;	INTEGER		NROWS,		! number of rows to do
;	LOGICAL*4	ISBYTE,		! data is byte or bit?
;	INTEGER		POFF,		! plane offset
;	BYTE		PSEL,		! plane mask
;	INTEGER		XIND,
;	INTEGER		YSTEP,
;	INTEGER		PIND,		! incremented by NROWS
;	BYTE array	PXARR(),	! input, start at XIND, step YSTEP
;	INTEGER array	B() )		! output, start at PIND

	NROWS = 4
	ISBYTE = 8
	POFF = 12
	PSEL = 16
	XIND = 20
	YSTEP = 24
	PIND = 28
	PXARR = 32
	B = 36

	.ENTRY	LSG_LOOP,^M<R2,R3,R4,R5,R6,R7>

	MOVAL	@B(AP), R6
	MOVL	@NROWS(AP), R7
	SUBL3	#1, @PIND(AP), R0		; PIND
	MOVAL	(R6)[R0], R6			; B(PIND)
	ADDL2	R7,@PIND(AP)			; inc. for return
	MOVAB	@PXARR(AP), R4
	SUBL3	#1, @XIND(AP), R0		; XIND
	MOVL	@YSTEP(AP), R5			; YSTEP
	MOVZBL	@PSEL(AP), R2			; PSEL
	MCOML	R2, R2				; ready for BICL
	MOVL	@POFF(AP), R3

	BLBS	@ISBYTE(AP), 20$		; byte or bit?

10$:	EXTZV	R0, #1, (R4), R1		; bit
	ASHL	R3,R1,R1			; apply plane offset
	BICL2	R2, R1				; apply plane mask
	ADDL3	#1, R1, (R6)+			; add 1 for Calcomp
	ADDL2	R5, R0				; add YSTEP
	SOBGTR	R7, 10$				; loop for NROWS
	RET

20$:	MOVZBL	(R4)[R0], R1			; byte
	ASHL	R3,R1,R1			; apply plane offset
	BICL2	R2, R1				; apply plane mask
	ADDL3	#1, R1, (R6)+			; add 1 for Calcomp
	ADDL2	R5, R0				; add YSTEP
	SOBGTR	R7, 20$				; loop for NROWS
	RET

	.END
