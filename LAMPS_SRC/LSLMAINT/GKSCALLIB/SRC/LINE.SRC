C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-06-02 15:13:34.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE	GKS_BEGIN_LINE(CLOSED,WIDTH,CAP,JOIN,PX,PY)
C
**	MODULE	GKS_BEGIN_LINE
**	IDENT	02JN92
C
C Copyright Laser-Scan Labs., Ltd., Cambridge, England.
C
C Author Clarke Brunt
C
C	Part of the GKSCALLIB
C
C	 - prepares to draw a software thick polyline
C
	IMPLICIT NONE
C
***	COMMON/GFABUF/
***	COMMON/GKSDAT1/
***	COMMON/GKSLINE/
C
C arguments
	LOGICAL	CLOSED
	REAL	WIDTH
	INTEGER	CAP
	INTEGER	JOIN
	REAL	PX,PY
C
C Functions called
	LOGICAL	GKS_INIT_FILL_MEM     	! gets virtual memory for workspace
C
C first time through, get the memory (needed only if clipping)
	IF (MEMORY_FAIL) GOTO 9999
C
	IF (ENCLIP .AND. GFAMAX.EQ.0) THEN
	   MEMORY_FAIL = GKS_INIT_FILL_MEM()
	   IF (MEMORY_FAIL) GOTO 9999
	ENDIF	      
C
C check whether can continue previous line
	IF (.NOT.CLOSED .AND.
     &	    WIDTH.EQ.L_WIDTH.AND.CAP.EQ.L_CAP.AND.JOIN.EQ.L_JOIN.AND.
     &	    L_NPTS.GT.0 ) THEN
	   IF (PX.EQ.L_COORD(1,L_IND-1) .AND.
     &         PY.EQ.L_COORD(2,L_IND-1) ) GOTO 9999
	ENDIF
C
C end previous line
	CALL GKS_END_LINE
C
C save the arguments
	L_CLOSED = CLOSED
	L_WIDTH = WIDTH
	L_CAP = CAP
	L_JOIN = JOIN
	L_IND = 2	! index to receive first point
C
C and add the point
	CALL GKS_ADD_POINT(PX,PY)
C
9999	RETURN
	END
CCC	
	SUBROUTINE	GKS_ADD_POINT(PX,PY)
C
**	MODULE	GKS_ADD_POINT
**	IDENT	09MR92
C
C Copyright Laser-Scan Labs., Ltd., Cambridge, England.
C
C Author Clarke Brunt
C
C	Part of GKSCALLIB
C
C	 - add point to a software thick polyline
C
	IMPLICIT NONE
C
***	COMMON/GFABUF/
***	COMMON/GKSLINE/
C
C arguments
	REAL	PX,PY
C
C workspace
	INTEGER	I
	LOGICAL	FIRST
	INTEGER	CAP
C
	IF (MEMORY_FAIL) GOTO 999
C
C buffer the coordinate, discarding duplicates
	IF (L_NPTS.GT.0) THEN
	   IF (PX.EQ.L_COORD(1,L_IND-1) .AND.
     &	       PY.EQ.L_COORD(2,L_IND-1)) GOTO 999
	ENDIF
C
	L_NPTS = L_NPTS+1
	L_COORD(1,L_IND) = PX
	L_COORD(2,L_IND) = PY
C
	IF (L_IND.LT.4) THEN
	   L_IND = L_IND+1
	   IF (L_NPTS.EQ.2) THEN
C
C save 2nd coordinate for use if a closed line
	      L_COORD2(1) = PX
	      L_COORD2(2) = PY
	   ENDIF
	ELSE
C
C now have four points buffered, so can rasterise middle segment
	   FIRST = .FALSE.
	   IF (L_NPTS.EQ.3) FIRST = .TRUE.
	   CAP = L_CAP
	   IF (L_CLOSED.AND.L_NPTS.EQ.3) CAP = 0
	   CALL GKS_DRAW_LINE(L_COORD,L_WIDTH,CAP,L_JOIN,FIRST,.FALSE.)
C
C shuffle down coordinates
	   DO 10 I=1,3
	      L_COORD(1,I) = L_COORD(1,I+1)
	      L_COORD(2,I) = L_COORD(2,I+1)
10	   CONTINUE
	ENDIF
C
999	RETURN
	END
CCC	
	SUBROUTINE	GKS_DRAW_LINE(COORDS,WIDTH,CAP,JOIN,FIRST,LAST)
C
**	MODULE	GKS_DRAW_LINE
**	IDENT	09MR92
C
C Copyright Laser-Scan Labs., Ltd., Cambridge, England.
C
C Author Clarke Brunt
C
C	Part of GKSCALLIB
C
C	 - draw a software thick line segment
C
	IMPLICIT NONE
C
***	COMMON/GFABUF/
***	COMMON/GKSDAT1/
***	COMMON/GKSLINE/
C
C arguments
	REAL	COORDS(2,4)
	REAL	WIDTH
	INTEGER	CAP
	INTEGER	JOIN
	LOGICAL	FIRST
	LOGICAL	LAST
C
C workspace
	INTEGER	I,N
	REAL	DX12,DY12,DX23,DY23,DX34,DY34,R
	LOGICAL	MITER
	REAL	SINPHI,COSPHI
	REAL	F
	REAL	W
C
	W = WIDTH/2.0
C
C deal with round cap at start of line, or round join in the middle
	IF (
     &		(FIRST.AND.CAP.EQ.1) .OR.
     &		(.NOT.FIRST.AND.JOIN.EQ.1) ) THEN
	   CALL GKS_CIRCLE(COORDS(1,2),COORDS(2,2),W)
	ENDIF
C
	DX23 = COORDS(1,3)-COORDS(1,2)	! vector from point 2->3
	DY23 = COORDS(2,3)-COORDS(2,2)
C
	R = SQRT(DX23**2+DY23**2)
	DX23 = DX23/R			! now unit vector
	DY23 = DY23/R			! in direction of line
C
C so the vector (-DY23,DX23) is the same but rotated 90 anti-clockwise
C
C get points of polygon dealing with cap or join at first point
C
C for a butt or round cap, or a round join (done above), just need butt
	IF (FIRST.AND.(CAP.EQ.0.OR.CAP.EQ.1) .OR. ! butt or round cap
     &	   .NOT.FIRST.AND.JOIN.EQ.1) THEN	  ! or round join
	   L_PTS(1,1) = COORDS(1,2) + (-DY23)*W
	   L_PTS(2,1) = COORDS(2,2) + (+DX23)*W
	   L_PTS(1,2) = COORDS(1,2) + (+DY23)*W
	   L_PTS(2,2) = COORDS(2,2) + (-DX23)*W
	   N = 2
	ELSEIF (FIRST.AND.CAP.EQ.2) THEN	! projecting cap
	   L_PTS(1,1) = COORDS(1,2) + (-DX23-DY23)*W
	   L_PTS(2,1) = COORDS(2,2) + (-DY23+DX23)*W
	   L_PTS(1,2) = COORDS(1,2) + (-DX23+DY23)*W
	   L_PTS(2,2) = COORDS(2,2) + (-DY23-DX23)*W
	   N = 2
	ELSE	! must be miter or bevel join
C
	   DX12 = COORDS(1,2)-COORDS(1,1)	! vector from point 1->2
	   DY12 = COORDS(2,2)-COORDS(2,1)
C
	   R = SQRT(DX12**2+DY12**2)
	   DX12 = DX12/R			! now unit vector
	   DY12 = DY12/R			! in direction of line
C
	   SINPHI = DX12*DY23 - DY12*DX23
C
	   MITER = .FALSE.
	   IF (JOIN.EQ.0) THEN			! miter
	      COSPHI = DX12*DX23 + DY12*DY23
	      IF (COSPHI.GE.MITER_TEST) MITER = .TRUE.
	   ENDIF
C
	   IF (SINPHI.GE.0.0) THEN
	      L_PTS(1,1) = COORDS(1,2) + (-DY23)*W
	      L_PTS(2,1) = COORDS(2,2) + (+DX23)*W
C
	      L_PTS(1,2) = COORDS(1,2) + (+DY12)*W
	      L_PTS(2,2) = COORDS(2,2) + (-DX12)*W
C
	      IF (MITER) THEN
C
C F is TAN(PHI/2) (possibly minus it).
C both these expressions for F should be the same, we choose to
C avoid divide by zero (cannot happen in both)
	         IF (ABS(DX12+DX23).GT.ABS(DY12+DY23)) THEN
	            F = (DY23-DY12)/(DX12+DX23)
	         ELSE
	            F = (-DX23+DX12)/(DY12+DY23)
	         ENDIF
	         L_PTS(1,3) = L_PTS(1,2) + F*DX12*W
	         L_PTS(2,3) = L_PTS(2,2) + F*DY12*W
	      ELSE
	         L_PTS(1,3) = COORDS(1,2) + (+DY23)*W
	         L_PTS(2,3) = COORDS(2,2) + (-DX23)*W
	      ENDIF
C
	   ELSE
C
	      L_PTS(1,2) = COORDS(1,2) + (-DY12)*W
	      L_PTS(2,2) = COORDS(2,2) + (+DX12)*W
C
	      IF (MITER) THEN
	         IF (ABS(DX12+DX23).GT.ABS(DY12+DY23)) THEN
	            F = (-DY23+DY12)/(DX12+DX23)
	         ELSE
	            F = (DX23-DX12)/(DY12+DY23)
	         ENDIF
	         L_PTS(1,1) = L_PTS(1,2) + F*DX12*W
	         L_PTS(2,1) = L_PTS(2,2) + F*DY12*W
	      ELSE
	         L_PTS(1,1) = COORDS(1,2) + (-DY23)*W
	         L_PTS(2,1) = COORDS(2,2) + (+DX23)*W
	      ENDIF
C
	      L_PTS(1,3) = COORDS(1,2) + (+DY23)*W
	      L_PTS(2,3) = COORDS(2,2) + (-DX23)*W
C
	   ENDIF
	   N = 3
	ENDIF
C
C get points of polygon dealing with cap or join at last point
C
C for a butt or round cap, or a round join (done later), just need butt
	IF (LAST.AND.(CAP.EQ.0.OR.CAP.EQ.1) .OR. ! butt or round cap
     &	   .NOT.LAST.AND.JOIN.EQ.1) THEN	  ! or round join
	   N = N+1
	   L_PTS(1,N) = COORDS(1,3) + (+DY23)*W
	   L_PTS(2,N) = COORDS(2,3) + (-DX23)*W
	   N = N+1
	   L_PTS(1,N) = COORDS(1,3) + (-DY23)*W
	   L_PTS(2,N) = COORDS(2,3) + (+DX23)*W
	ELSEIF (LAST.AND.CAP.EQ.2) THEN		! projecting cap
	   N = N+1
	   L_PTS(1,N) = COORDS(1,3) + (+DX23+DY23)*W
	   L_PTS(2,N) = COORDS(2,3) + (+DY23-DX23)*W
	   N = N+1
	   L_PTS(1,N) = COORDS(1,3) + (+DX23-DY23)*W
	   L_PTS(2,N) = COORDS(2,3) + (+DY23+DX23)*W
	ELSE	! must be miter or bevel join
C
	   DX34 = COORDS(1,4)-COORDS(1,3)	! vector from point 3->4
	   DY34 = COORDS(2,4)-COORDS(2,3)
C
	   R = SQRT(DX34**2+DY34**2)
	   DX34 = DX34/R			! now unit vector
	   DY34 = DY34/R			! in direction of line
C
	   SINPHI = DX23*DY34 - DY23*DX34
C
	   MITER = .FALSE.
	   IF (JOIN.EQ.0) THEN			! miter
	      COSPHI = DX23*DX34 + DY23*DY34
	      IF (COSPHI.GE.MITER_TEST) MITER = .TRUE.
	   ENDIF
C
	   IF (SINPHI.GE.0.0) THEN
C
	      N = N+1
	      L_PTS(1,N) = COORDS(1,3) + (+DY23)*W
	      L_PTS(2,N) = COORDS(2,3) + (-DX23)*W
C
	      IF (MITER) THEN
	         IF (ABS(DX23+DX34).GT.ABS(DY23+DY34)) THEN
	            F = (DY34-DY23)/(DX23+DX34)
	         ELSE
	            F = (-DX34+DX23)/(DY23+DY34)
	         ENDIF
	         L_PTS(1,N) = L_PTS(1,N) + F*DX23*W
	         L_PTS(2,N) = L_PTS(2,N) + F*DY23*W
	      ENDIF
C
	      N = N+1
	      L_PTS(1,N) = COORDS(1,3) + (+DY34)*W
	      L_PTS(2,N) = COORDS(2,3) + (-DX34)*W
C
	      N = N+1
	      L_PTS(1,N) = COORDS(1,3) + (-DY23)*W
	      L_PTS(2,N) = COORDS(2,3) + (+DX23)*W
	   ELSE
	      N = N+1
	      L_PTS(1,N) = COORDS(1,3) + (+DY23)*W
	      L_PTS(2,N) = COORDS(2,3) + (-DX23)*W
C
	      N = N+1
	      L_PTS(1,N) = COORDS(1,3) + (-DY34)*W
	      L_PTS(2,N) = COORDS(2,3) + (+DX34)*W
C
	      N = N+1
	      L_PTS(1,N) = COORDS(1,3) + (-DY23)*W
	      L_PTS(2,N) = COORDS(2,3) + (+DX23)*W
C
	      IF (MITER) THEN
	         IF (ABS(DX23+DX34).GT.ABS(DY23+DY34)) THEN
	            F = (-DY34+DY23)/(DX23+DX34)
	         ELSE
	            F = (DX34-DX23)/(DY23+DY34)
	         ENDIF
	         L_PTS(1,N) = L_PTS(1,N) + F*DX23*W
	         L_PTS(2,N) = L_PTS(2,N) + F*DY23*W
	      ENDIF
C
	   ENDIF
	ENDIF
C
C close the polygon
	N = N+1
	L_PTS(1,N) = L_PTS(1,1)
	L_PTS(2,N) = L_PTS(2,1)
C
C draw it
	IF (ENCLIP) THEN
	   CALL GKS_CLIP_AREA(N,L_MAXPTS,L_PTS,L_PTX,L_PTY)
	ELSE
C
C Loop for each segment of this polyline.
	   DO 110 I = 1,N
C
C transform World Coordinates to Workstation Device Coordinates
	      L_PTX(I) = (L_PTS(1,I)*SCALEX)+OFFX
	      L_PTY(I) = (L_PTS(2,I)*SCALEY)+OFFY
110	   CONTINUE
C
C fill the area
	   CALL HATCH(L_PTX,L_PTY,N,0.0,1.0,1)
	ENDIF
C
400	RETURN
	END
CCC
	SUBROUTINE	GKS_END_LINE
C
**	MODULE	GKS_END_LINE
**	IDENT	09MR92
C
C Copyright Laser-Scan Labs., Ltd., Cambridge, England.
C
C Author Clarke Brunt
C
C	Part of GKSCALLIB
C
C	 - finishes drawing a raster thick line
C
	IMPLICIT NONE
C
***	COMMON/GFABUF/
***	COMMON/GKSDAT1/
***	COMMON/GKSLINE/
C
	IF (MEMORY_FAIL) GOTO 999
C
	IF (L_NPTS.GT.1) THEN
	   IF (L_CLOSED) THEN
C
C closed feature - closing point has already been added
C so add second point - will cause to draw closing segment
	      CALL GKS_ADD_POINT(L_COORD2(1),L_COORD2(2))
C
C and now redraw first segment with a butt cap
	      CALL GKS_DRAW_LINE(
     &		L_COORD,L_WIDTH,0,L_JOIN,.FALSE.,.TRUE.)
	   ELSE
	      IF (L_NPTS.EQ.2) THEN
	         CALL GKS_DRAW_LINE(
     &		L_COORD,L_WIDTH,L_CAP,L_JOIN,.TRUE.,.TRUE.)
	      ELSE
	         CALL GKS_DRAW_LINE(
     &		L_COORD,L_WIDTH,L_CAP,L_JOIN,.FALSE.,.TRUE.)
	      ENDIF
C
C it just remains to put on a final round cap if required
	      IF (L_CAP.EQ.1) THEN
	         CALL GKS_CIRCLE(L_COORD(1,3),L_COORD(2,3),L_WIDTH/2.0)
	      ENDIF
	   ENDIF
	   L_NPTS = 0
	ENDIF
C
999	RETURN
	END
C
	SUBROUTINE	GKS_CIRCLE(PX,PY,R)
C
**	MODULE	GKS_CIRCLE
**	IDENT	09MR92
C
C Copyright Laser-Scan Labs., Ltd., Cambridge, England.
C
C Author Clarke Brunt
C
C	Part of GKSCALLIB
C
C	 - draw a filled circle
C
	IMPLICIT NONE
C
***	COMMON/GKSDAT1/
***	COMMON/GKSLINE/
C
C arguments
	REAL	PX,PY,R
C
C workspace
	REAL	DPX,DPY,DR
	INTEGER	I,N
	REAL	RTEMP,SININC,COSINC,SINANG,COSANG
	REAL		TWOPI
	PARAMETER	(TWOPI=2.0*3.14159265)
C
	IF (.NOT.ENCLIP .OR. (
     &		PX-R.GE.CLIPLO(1) .AND.
     &		PX+R.LE.CLIPHI(1) .AND.
     &		PY-R.GE.CLIPLO(2) .AND.
     &		PY+R.LE.CLIPHI(2) )) THEN
C
C not clipped at all - use hardware circle
	   DPX = PX*SCALEX + OFFX
	   DPY = PY*SCALEY + OFFY
	   DR = R*SCALEX
	   CALL PLOT(DPX+DR,DPY,3)		! move to position
	   CALL AREAFL(CPATT+1)
	   CALL CIRCLE(DPX,DPY,0.0,0.0,DR,6)
	   CALL AREAFL(0)
	ELSEIF(
     &		PX+R.GE.CLIPLO(1) .AND.
     &		PX-R.LE.CLIPHI(1) .AND.
     &		PY+R.GE.CLIPLO(2) .AND.
     &		PY-R.LE.CLIPHI(2) ) THEN
C
C partly clipped - use software circle
C
C decide number of segments - basically 1 per pixel
	   N = MIN(INT(TWOPI*R*SCALEX/GNOMLW),L_MAXPTS-10)
	   IF (N.LE.2) GOTO 999
C
C Work out the angle subtended at the centre by a single segment
	   RTEMP = TWOPI/N
C
C Initialise variables used in the main loop.
	   SININC = SIN(RTEMP)	! for the angular increment
	   COSINC = COS(RTEMP)
	   SINANG = 0.0 ! for the starting angle
	   COSANG = 1.0
C
C Main loop (for generating position of each point)
	   DO 10 I=1,N
C
C Work out the position of the next point
	      L_PTS(1,I) = PX + R*COSANG
	      L_PTS(2,I) = PY + R*SINANG 
C
C Work out the angle (at the centre) of the next point
	      RTEMP = SINANG
	      SINANG = SINANG*COSINC + COSANG*SININC
	      COSANG = COSANG*COSINC - RTEMP*SININC
10	   CONTINUE
	   N = N+1
	   L_PTS(1,N) = L_PTS(1,1)
	   L_PTS(2,N) = L_PTS(2,1)
	   CALL GKS_CLIP_AREA(N,L_MAXPTS,L_PTS,L_PTX,L_PTY)
	ENDIF
C
999	RETURN
	END
