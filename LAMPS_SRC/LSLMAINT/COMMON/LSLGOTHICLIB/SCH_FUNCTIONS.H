/*
 * This file is part of the LAMPS distribution, released as a software
 * preservation project to archive digital history for future historians.
 * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
 *
 * Timestamp of this file for the 2002 release was: 1995-03-23 18:14:20.000000000 +0000
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 */
#ifndef _SCH_FUNCTIONS
#define _SCH_FUNCTIONS
/* $Header: /usr/users/jon/RCS/hdr.sch_functions.h,v 1.14 1995/01/15 21:41:40 jon Exp $								*/
/* 									*/
/* $Log: hdr.sch_functions.h,v $
 * Revision 1.14  1995/01/15  21:41:40  jon
 * Version v1-13 derived from v1-12
 * Upgrade the SCH_DO() macro so that if the supplied status code prior to
 * executing the function call is not GOTH__NORMAL, the macro doesn't change
 * this code if the executed function returns a code with is not GOTH__NORMAL.
 *
 * Do the same for similar SCH_XXXXX() macros.
 *
 * Revision 1.13  1994/05/19  17:48:56  jon
 * Version v1-12 derived from v1-11
 * Incorporation of new, more flexible, status checking MACROS.
 * These include:
 *
 * SCH_DO( status, fn(), error_message)
 *
 * which executes a function `fn()'. If this function returns a status code
 * other than GOTH__NORMAL, the macro sets `status' to this code and outputs
 * the status code, the optional error message `error_message', and the
 * function call to the message stack.
 *
 * SCH_DO_IF_STATUS( status, required_status, fn(), error_message)
 *
 * which executes the macro SCH_DO( status, fn(0, error_message), and so the
 * function `fn()', if `status' on input matches `required_status'. No action
 * is taken if this is not the case.
 *
 * SCH_DO_IF_NOT_STATUS( status, required_status, fn(), error_message)
 *
 * which executes the macro SCH_DO( status, fn(), error_message), and so the
 * function `fn()', if `status' on input does not match `required_status'. No
 * action is taken if the two status codes are the same.
 *
 * SCH_DO_ALT( status, required_status, fn_1(), err_mess_1, fn_2(), err_mess2)
 *
 * which executes the macro SCH_DO( status, fn_1(), err_mess_1) if `status' is
 * identical to `required_status'. If this is not the case, it executes the
 * macro SCH_DO( status, fn_2(), err_mess_2)
 *
 * SCH_DO_IF_OKAY( status, fn(), error_message)
 * SCH_COND( status, fn(), error_message)
 *
 * These equivalent macros execute SCH_DO( status, fn(), error_message) if
 * the supplied status code on input `status' is GOTH__NORMAL. No action is
 * taken if this is not the case.
 *
 * SCH_DO_IF_NOT_OKAY( status, fn(), error_message)
 *
 * which executes SCH_DO( status, fn(), error_message) if the supplied status
 * code is not GOTH__NORMAL. No action is taken if `status' is GOTH__NORMAL.
 *
 * SCH_CHECK_IS_STATUS(required_status, fn(), error_message)
 *
 * which executes the function fn(). If the status code returned by fn() doesn't
 * match `required_status', the macro outputs the status code, the function call,
 * and the optional error message to the message stack, then exits the enclosing
 * function, returning the status generated by fn().
 *
 * SCH_CHECK_IS_NOT_STATUS( required_status, fn(), error_message)
 *
 * which executes the function fn(). If the status code returned by fn() matches
 * `required_status', the macro outputs the status code, the function call, and
 * the optional error message to the mesage stack, then exits the enclosing
 * function, returning `required_status'.
 *
 * SCh_CHECK2( fn(), error_message)
 *
 * This executes SCH_CHECK_IS_STATUS( GOTH__NORMAL, fn(), error_message). It
 * action is essentially the same as the standard SCH_CHECK(fn()) macro, but
 * with more information output to the message stack when a status other than
 * GOTH__NORMAL is returned by the function fn().
 *
 *
 * SCH_CHECK_DED_DEFINED( desc, ddt, obj_p)
 *
 * This checks that a descriptor encapsulated object is defined, with
 * non-negative reference count, and is of the correct type `ddt'. If this
 * is the case, `obj_p' is set to the SOD address, if not, the macro executes
 * SCH_RETURN(GOTH__DESC).
 *
 * WICC 244.
 *
 * Revision 1.12  1994/04/20  17:38:42  mikec
 * Version v1-11 derived from v1-10
 * WICC 232 - Addition and changing of comment blocks to produce documentation
 * for the Gothic Module Reference Manual Issue 1.0 - SCHLIB Issue 1.0.
 *
 * Revision 1.11  1994/02/16  21:27:45  jon
 * Version v1-10 derived from v1-9
 * add ISSUE_HDRS to makefile for Gothic platform library work
 * WICC 202
 * Change local references to `st' in SCH_xxx macros to `_s_t' to avoid
 * problems when the macros are called with `st'.
 * WICC 202 (2) - RWR
 *
 * Revision 1.10  1993/08/06  15:49:07  davida
 * Version v1-9 derived from v1-8
 * WICC 82
 *
 * Enhance error reporting mechanisms to support generation of log files.
 *
 * Add sch_open_log_file() and sch_close_log_file().
 *
 * Add sch_set_code_info2() to allow control of message printing for
 * each status code on a per output stream basis.
 *
 * Revision 1.9  1993/07/21  18:06:01  davidm
 * Version v1-8 derived from v1-7
 * Improve handling on VMS errnos which do not correspond to UNIX errnos.
 *
 * Revision 1.8  1993/04/27  14:38:14  jon
 * Version v1-7 derived from v1-6
 * Fix HP compilation bug.
 *
 * Revision 1.7  1993/04/26  16:54:38  jon
 * Version v1-6 derived from v1-5
 * Add routines to allow contents of message stack to be protected from
 * clear operations.
 *
 * Revision 1.6  1992/09/07  22:13:44  jon
 * Version v1-5 derived from v1-4
 * Extracted to add extra routines to control the output of individual messages.
 * Added routine `sch_set_code_output_info()'.
 *
 * Revision 1.5  1992/09/06  18:21:11  jon
 * Version v1-4 derived from v1-3
 * Addition of function sch_remove_wheres_from_stack().
 *
 * Revision 1.4  1992/08/19  19:00:17  snail
 * Version v1-3 derived from v1-2
 * Bug fix for sch_stack_string, freeing of `format' at about line 554.
 *
 * Revision 1.3  1992/07/14  16:49:43  davidr
 * Version v1-2 derived from v1-1
 * prototypes for 'sch_add_stream' and 'sch_remove_stream' added to public header
 * file
 *
 * Revision 1.2  1992/04/08  16:59:05  davidr
 * Version v1-1 derived from v1-0
 * adding new status codes no lomger requires recompiling SCHLIB
 * 'goth_add_stream' and 'goth_remove_stream' added
 *
 * Revision 1.1  1992/03/16  22:48:10  jon
 * Version v1-0 derived from root
 * Version containing heavily modified `test' alternative from old system
 *								*/
/************************************************************************/
/* Copyright Laser-Scan Ltd, Cambridge CB4 4FY, England			*/
/* Author    Jonathan Billing, 23-Jan-1990				*/
/************************************************************************/

/************************************************************************/
/*									*/
/*		     S C H _ F U N C T I O N S . H 			*/
/*									*/
/* Part of GOTHIC module LULL						*/
/* Version 0.1, Jonathan Billing 23-Jan-1990				*/
/************************************************************************/


/*>>> EXTERN functions from STATUS_CODE_DECLARE.C <<<*/

/*----------------------------------------------------------------------*/
/* EXTERN sch_alloc_status_list						*/
/*......................................................................*/
/* Intrinsic calls to create a descriptor block typed for a status	*/
/* code list.								*/
/*----------------------------------------------------------------------*/

extern GOTH_DESCRIPTOR sch_alloc_status_list();
/*----------------------------------------------------------------------*/
/* EXTERN sch_free_status_list						*/
/*......................................................................*/
/* Intrinsic called to free up a descriptor block typed for a status	*/
/* code list.								*/
/*----------------------------------------------------------------------*/

extern GOTH_STATUS sch_free_status_list(
					    GOTH_DESCRIPTOR db_ptr);
/*----------------------------------------------------------------------*/
/* EXTERN sch_create_status_list					*/
/*......................................................................*/
/* Intrinsic called to create a status code list. 			*/
/*----------------------------------------------------------------------*/

extern GOTH_STATUS sch_create_status_list(
					 GOTH_DESCRIPTOR db_ptr,
					 long int	first_error_number);
/*----------------------------------------------------------------------*/
/* EXTERN sch_delete_status_list					*/
/*......................................................................*/
/* Intrinsic called to delete a status code list. 			*/
/*----------------------------------------------------------------------*/

extern GOTH_STATUS sch_delete_status_list(
					 GOTH_DESCRIPTOR db_ptr);
/*----------------------------------------------------------------------*/
/* EXTERN sch_output_status_list					*/
/*......................................................................*/
/* Intrinsic to output the status list passed to it.			*/
/*----------------------------------------------------------------------*/

extern GOTH_STATUS sch_output_status_list(
					 GOTH_DESCRIPTOR db_ptr);
/*----------------------------------------------------------------------*/
/* EXTERN sch_declare_status_code					*/
/*......................................................................*/
/* Intrinsic to declare a status code, with its name, severity, message	*/
/* format string and description.					*/
/*----------------------------------------------------------------------*/

extern GOTH_STATUS sch_declare_status_code(
					  GOTH_DESCRIPTOR db_ptr_abcdefghijkl,
					  char		*name,
					  SCH_SEVERITY	severity,
					  char		*message,
					  char		*description);

/*>>> EXTERN functions from STATUS_CODE_REPORT.C <<<*/

/*----------------------------------------------------------------------*/
/* EXTERN sch_add_status_code						*/
/*......................................................................*/
/*..DESCRIPTION.........................................................*/
/*									*/
/* Routine to insert an entry in the status code array			*/
/*									*/
/*..ARGUMENTS...........................................................*/
/*									*/
/* code		-in-							*/
/* 									*/
/* severity	-in-							*/
/* 									*/
/* name		-in-							*/
/* 									*/
/* message	-in-							*/
/* 									*/
/* severity	-in-							*/
/* 									*/
/*..RETURN-CODES........................................................*/
/*									*/
/* GOTH__NORMAL		Normal, successful completion.			*/
/*									*/
/* GOTH__UNKMSGENC							*/
/*									*/
/*----------------------------------------------------------------------*/

extern GOTH_STATUS 
   sch_add_status_code(
		       GOTH_STATUS		code,
		       SCH_SEVERITY		severity,
		       char			*name,
		       char			*message,
		       char			*description);
/*----------------------------------------------------------------------*/
/* EXTERN sch_get_message_format					*/
/*......................................................................*/
/*..DESCRIPTION.........................................................*/
/*									*/
/* Routine to look up a message id and return the associated printf 	*/
/* format string. The format string is allocated by this routine, and 	*/
/* the caller is expected to free it again.				*/
/*									*/
/*..ARGUMENTS...........................................................*/
/*									*/
/* ident        -in- 	The message identification.                     */
/* format       -out-	The message format string.                      */
/*									*/
/*..RETURN-CODES........................................................*/
/*									*/
/* GOTH__NORMAL		Normal, successful completion.			*/
/* GOTH__UNKMSGENC	The message code is not recognised.		*/
/* GOTH__NOVM		No space available for the format string.	*/
/*									*/
/*----------------------------------------------------------------------*/

extern GOTH_STATUS sch_get_message_format(
					  GOTH_STATUS	code,
					  char	      	**format);
/*----------------------------------------------------------------------*/
/* EXTERN sch_print_message						*/
/*......................................................................*/
/*..DESCRIPTION.........................................................*/
/*									*/
/* Routine to print the appropriate text for the message $$code$$ which	*/
/* is passed to it.							*/
/*									*/
/*..ARGUMENTS...........................................................*/
/*									*/
/* code		-in-	Message $$code$$.				*/
/* ...		-in-	Any associated arguments. For example :	       !*/
/* 			sch_print_message(GOTH_MALLOC,"Could not	*/
/* 			allocate %d bytes", integer_variable_name);	*/
/*									*/
/*..RETURN-CODES........................................................*/
/*									*/
/* GOTH__NORMAL		Normal, successful completion.			*/
/* GOTH__UNKMSGENC	Message $$code$$ is unrecognisable.		*/
/* GOTH__NOVM		Memory exhausted, no memory available.		*/
/*									*/
/*----------------------------------------------------------------------*/

extern GOTH_STATUS sch_print_message(
				    GOTH_STATUS	code,
				    ...);
/*----------------------------------------------------------------------*/
/* EXTERN sch_get_message_severity					*/
/*......................................................................*/
/*..DESCRIPTION.........................................................*/
/*									*/
/* Routine to look up a message id and return the associated severity.	*/
/*									*/
/*..ARGUMENTS...........................................................*/
/*									*/
/* ident        -in-	The message identification.                     */
/* severity     -out-	The message severity.	                        */
/*									*/
/*..RETURN-CODES........................................................*/
/*									*/
/* GOTH__NORMAL		Normal, successful completion.			*/
/* GOTH__UNKMSGENC	The message code is not recognised.		*/
/*									*/
/*----------------------------------------------------------------------*/

extern GOTH_STATUS sch_get_message_severity(
					   GOTH_STATUS	 code,
					   SCH_SEVERITY	*severity);
/*----------------------------------------------------------------------*/
/* EXTERN sch_it_is_an_error						*/
/*......................................................................*/
/*..DESCRIPTION.........................................................*/
/*									*/
/* Routine to look up a message id and report whether it is an error 	*/
/* message.								*/
/*									*/
/*..ARGUMENTS...........................................................*/
/*									*/
/* ident        -in-	The message identification.                     */
/* warn_is_ok	-in- 	TRUE if WARNINGs are to be counted as INFORMs. !*/
/*			FALSE if WARNINGs are not to be counted as 	*/
/*			INFORMs.					*/
/*									*/
/*..RETURN-CODES........................................................*/
/*									*/
/* TRUE		The message represents an error, or is unknown.		*/
/* FALSE 	The message is informational.			       !*/
/*		(in both cases, taking note of `warn_error').		*/
/*									*/
/*----------------------------------------------------------------------*/

extern GOTH_BOOLEAN sch_it_is_an_error(
				  GOTH_STATUS	code,
				  GOTH_BOOLEAN	warn_is_ok);
/*----------------------------------------------------------------------*/
/* EXTERN sch_print_message_stack					*/
/*......................................................................*/
/*..DESCRIPTION.........................................................*/
/*									*/
/* Routine to print all the messages currently on the stack. After this */
/* has been called, no messages will remain on the stack.		*/
/*									*/
/*..ARGUMENTS...........................................................*/
/*									*/
/*									*/
/*..RETURN-CODES........................................................*/
/*									*/
/* GOTH__NORMAL		Normal, successful completion.			*/
/*----------------------------------------------------------------------*/

extern GOTH_STATUS sch_print_message_stack();
/*----------------------------------------------------------------------*/
/* EXTERN sch_clear_message_stack					*/
/*......................................................................*/
/*..DESCRIPTION.........................................................*/
/*									*/
/* Routine to ensure that there are no messages stacked up.		*/
/*									*/
/*..ARGUMENTS...........................................................*/
/*									*/
/*									*/
/*..RETURN-CODES........................................................*/
/*									*/
/*									*/
/*----------------------------------------------------------------------*/

extern void sch_clear_message_stack();
/*----------------------------------------------------------------------*/
/* EXTERN sch_stack_message						*/
/*......................................................................*/
/*..DESCRIPTION.........................................................*/
/*									*/
/* Routine to add a message to the stack. Messages will be output in 	*/
/* the opposite order to that in which they were added, so add the 	*/
/* lowest level error first. This last in first out policy is so that a */
/* low level routine can add some errors and its caller can then add 	*/
/* a summary message. When output, the summary message will appear first*/
/* followed by the error messages.					*/
/*									*/
/*..ARGUMENTS...........................................................*/
/*									*/
/* code		- in  - The message $$code$$.				*/
/* ...		- in  - Any associated arguments.			*/
/*									*/
/*..RETURN-CODES........................................................*/
/*									*/
/*									*/
/*----------------------------------------------------------------------*/

extern void sch_stack_message(
			      GOTH_STATUS  code,
			      ... );
/*----------------------------------------------------------------------*/
/* EXTERN sch_stack_string						*/
/*......................................................................*/
/*..DESCRIPTION.........................................................*/
/*									*/
/* Routine to add a $$text$$ string to the message stack. The string 	*/
/* will be output using the GOTH__MSG status code.			*/
/*									*/
/*..ARGUMENTS...........................................................*/
/*									*/
/* text		-in-	Input string with control characters.		*/
/* ...		-in-	Any associated arguements. For example:	       !*/
/*			sch_stack_string("Hello, %d is a number",	*/
/*			integer_variable_name);				*/
/*									*/
/*									*/
/*..RETURN-CODES........................................................*/
/*									*/
/*									*/
/*----------------------------------------------------------------------*/

extern void sch_stack_string(
			     GOTH_STRING	text,
			     ...);
/*----------------------------------------------------------------------*/
/* EXTERN sch_print_string						*/
/*......................................................................*/
/*..DESCRIPTION.........................................................*/
/*									*/
/* Routine to print a $$text$$ string in the standard message format. 	*/
/* The $$text$$ string is output using the GOTH__MESG status code.	*/
/*									*/
/*..ARGUMENTS...........................................................*/
/*									*/
/* text		-in-	Input string with control characters.		*/
/* ...		-in-	Any associated arguements. For example:	       !*/
/*			sch_print_string("Hello, %d is a number",	*/
/*			integer_variable_name);				*/
/*									*/
/*..RETURN-CODES........................................................*/
/*									*/
/*									*/
/*----------------------------------------------------------------------*/

extern void sch_print_string(
			     GOTH_STRING	text,
			     ...);
/*----------------------------------------------------------------------*/
/* EXTERN sch_stack_system_error					*/
/*......................................................................*/
/*..DESCRIPTION.........................................................*/
/*									*/
/* Routine to add an implementation-defined error message to the 	*/
/* message stack. If a system error has been flagged, it should be 	*/
/* called if a system call has failed.					*/
/*									*/
/*..ARGUMENTS...........................................................*/
/*									*/
/*									*/
/*..RETURN-CODES........................................................*/
/*									*/
/* GOTH__NORMAL		No system error has been flagged.		*/
/* GOTH__ERROR		Flagged system error - message placed on stack.	*/
/*									*/
/*----------------------------------------------------------------------*/

extern GOTH_STATUS sch_stack_system_error();
/*----------------------------------------------------------------------*/
/* EXTERN sch_print_system_error					*/
/*......................................................................*/
/*..DESCRIPTION.........................................................*/
/*									*/
/* Routine to print an implementation-defined error message if a system */
/* error has been flagged. This routine should be called if a system 	*/
/* call has failed.							*/
/*									*/
/*..ARGUMENTS...........................................................*/
/*									*/
/*									*/
/*..RETURN-CODES........................................................*/
/*									*/
/* GOTH__NORMAL		No system error has been flagged.		*/
/* GOTH__ERROR		System error flagged and error message issued.	*/
/*									*/
/*----------------------------------------------------------------------*/

extern GOTH_STATUS sch_print_system_error();
/*----------------------------------------------------------------------*/
/* EXTERN sch_stack_debug_string					*/
/*......................................................................*/
/*..DESCRIPTION.........................................................*/
/*									*/
/* Exactly the same as sch_stack_string() except that it will only stack*/
/* the string if sch_debug_on() has been called.			*/
/*									*/
/*..ARGUMENTS...........................................................*/
/*									*/
/* string	-in-	The string to add.				*/
/*									*/
/*..RETURN-CODES........................................................*/
/*									*/
/*									*/
/*----------------------------------------------------------------------*/

extern void sch_stack_debug_string(
				   GOTH_STRING	text,
				   ...);
/*----------------------------------------------------------------------*/
/* EXTERN sch_print_debug_string					*/
/*......................................................................*/
/*..DESCRIPTION.........................................................*/
/*									*/
/* This routine is exactly the same as sch_print_string(), except that 	*/
/* it will only print the string if sch_debug_on() has been called.	*/
/*									*/
/*..ARGUMENTS...........................................................*/
/*									*/
/* string	-in-	The string to add.				*/
/*									*/
/*..RETURN-CODES........................................................*/
/*									*/
/*									*/
/*----------------------------------------------------------------------*/

extern void sch_print_debug_string(
				   GOTH_STRING	text,
				   ...);
/*----------------------------------------------------------------------*/
/* EXTERN sch_debug_on							*/
/*......................................................................*/
/*..DESCRIPTION.........................................................*/
/*									*/
/* Routine to set the flag to indicate that 'debug' messages should be 	*/
/* stacked.								*/
/*									*/
/*..ARGUMENTS...........................................................*/
/*									*/
/*									*/
/*..RETURN-CODES........................................................*/
/*									*/
/* GOTH__NORMAL		Normal, successful completion.			*/
/*----------------------------------------------------------------------*/

extern GOTH_STATUS sch_debug_on();
/*----------------------------------------------------------------------*/
/* EXTERN sch_debug_off							*/
/*......................................................................*/
/*..DESCRIPTION.........................................................*/
/*									*/
/* Routine to set the flag to indicate that 'debug' messages should not */
/* be stacked.								*/
/*									*/
/*..ARGUMENTS...........................................................*/
/*									*/
/*									*/
/*..RETURN-CODES........................................................*/
/*									*/
/* GOTH__NORMAL		Normal, successful completion.		        */
/*----------------------------------------------------------------------*/

extern GOTH_STATUS sch_debug_off();
/*----------------------------------------------------------------------*/
/* EXTERN sch_where_on							*/
/*......................................................................*/
/*..DESCRIPTION.........................................................*/
/*									*/
/* Sets flag to indicate that 'where' messages should be stacked.	*/
/*									*/
/*..ARGUMENTS...........................................................*/
/*									*/
/*									*/
/*..RETURN-CODES........................................................*/
/*									*/
/*									*/
/*----------------------------------------------------------------------*/

extern GOTH_STATUS sch_where_on();
/*----------------------------------------------------------------------*/
/* EXTERN sch_where_off							*/
/*......................................................................*/
/*..DESCRIPTION.........................................................*/
/*									*/
/* Sets flag to indicate that 'where' messages should not be 		*/
/* stacked.								*/
/*									*/
/*..ARGUMENTS...........................................................*/
/*									*/
/*									*/
/*..RETURN-CODES........................................................*/
/*									*/
/*									*/
/*----------------------------------------------------------------------*/

extern GOTH_STATUS sch_where_off();
/*----------------------------------------------------------------------*/
/* EXTERN sch_set_code_output_info					*/
/*......................................................................*/
/*..DESCRIPTION.........................................................*/
/*									*/
/* Routine to allow the control of the output of the messages		*/
/* corresponding to individual codes.					*/
/*									*/
/* This routine offers limited flexibility. For example, a message	*/
/* can only be redirected to a single stream. Ideally, this routine	*/
/* will be supplemented or replaced by others if required.		*/
/*									*/
/*..ARGUMENTS...........................................................*/
/*									*/
/*	code		-in-	The message code.			*/
/* 									*/
/* 	print		-in-	A flag indicating whether the		*/
/* 				message should be printed at all.	*/
/* 				If this is TRUE, the message is		*/
/* 				printed. If this is FALSE, the		*/
/* 				remaining arguments are ignored.	*/
/* 									*/
/* 	name		-in-	If this is TRUE, the printed		*/
/* 				message is preceded by the $$name$$ or	*/
/* 				mnemonic corresponding to the 		*/
/* 				code.					*/
/* 									*/
/* 	redirect	-in-	TRUE if the message is to be output	*/
/* 				on a different stream in place of those	*/
/* 				being used for all the other		*/
/* 				messages.				*/
/* 									*/
/* 	stream_desc    	-in-	The DED of the alternative stream, if	*/
/* 				any. This is ignored if the redirect	*/
/* 				argument is FALSE.			*/
/* 									*/
/*									*/
/*..RETURN-CODES........................................................*/
/*									*/
/*   GOTH__NORMAL	Normal, successful completion.			*/
/*   GOTH__UNKMSGENC	Message code specified does not exist.		*/
/*----------------------------------------------------------------------*/

extern GOTH_STATUS sch_set_code_output_info(
					    GOTH_STATUS		code,
					    GOTH_BOOLEAN	print,
					    GOTH_BOOLEAN	name,
					    GOTH_BOOLEAN	redirect,
					    GOTH_DESCRIPTOR	stream_desc);
/*----------------------------------------------------------------------*/
/* EXTERN sch_set_code_output_info2					*/
/*......................................................................*/
/*..DESCRIPTION.........................................................*/
/*									*/
/* Routine to allow the control of the output of the messages		*/
/* corresponding to individual codes on a per output stream basis.	*/
/*									*/
/*..ARGUMENTS...........................................................*/
/*									*/
/*      stream_id	-in-	The output stream to control.  This	*/
/* 				stream must have been added by		*/
/* 				sch_add_stream().			*/
/*									*/
/*	code		-in-	The message $$code$$.			*/
/* 									*/
/* 	print		-in-	A flag indicating whether the		*/
/* 				message should be printed at all.	*/
/* 				If this is TRUE, the message is		*/
/* 				printed. If this is FALSE, the		*/
/* 				remaining arguments are ignored.	*/
/* 									*/
/* 	print_name	-in-	If this is TRUE, the printed		*/
/* 				message is preceded by the name or	*/
/* 				mnemonic corresponding to the 		*/
/* 				$$code$$.				*/
/* 									*/
/*									*/
/*..RETURN-CODES........................................................*/
/*									*/
/*   GOTH__NORMAL	Normal,successful completion.			*/
/*   GOTH__MALLOC	Out of memory.					*/
/*									*/
/*----------------------------------------------------------------------*/

extern GOTH_STATUS sch_set_code_output_info2(
					     GOTH_DESCRIPTOR	stream_id,
					     GOTH_STATUS	code,
					     GOTH_BOOLEAN	print,
					     GOTH_BOOLEAN	print_name);
/*----------------------------------------------------------------------*/
/* EXTERN sch_add_stream						*/
/*......................................................................*/
/*..DESCRIPTION.........................................................*/
/* 									*/
/* Routine to add a stream to the list of streams to which SCHLIB 	*/
/* output is directed.							*/
/*									*/
/*..ARGUMENTS...........................................................*/
/*								       	*/
/* stream_desc -in- Descriptor of stream. For example, a file access	*/
/*		    context or a window descriptor.			*/
/*									*/
/*..RETURN-CODES........................................................*/
/*									*/
/*   GOTH__NORMAL	Normal, successful completion.			*/
/*   GOTH__MALLOC	Out of memory.					*/
/*									*/
/*----------------------------------------------------------------------*/

extern GOTH_STATUS sch_add_stream(GOTH_DESCRIPTOR stream_desc);
/*----------------------------------------------------------------------*/
/* EXTERN sch_remove_stream						*/
/*......................................................................*/
/*..DESCRIPTION.........................................................*/
/* 									*/
/* Routine to remove a stream from the list of streams to which SCHLIB 	*/
/* output is directed.							*/
/*									*/
/*..ARGUMENTS...........................................................*/
/*								       	*/
/* stream_desc -in- Descriptor of stream. For example, a file access 	*/
/*		    context or a window descriptor.			*/
/*									*/
/*..RETURN-CODES........................................................*/
/*									*/
/* GOTH__NORMAL		Normal, successful completion.			*/
/* GOTH__NOSUCHSTREAM	Stream descriptor specified does not exist.	*/
/*									*/
/*----------------------------------------------------------------------*/

extern GOTH_STATUS sch_remove_stream(GOTH_DESCRIPTOR	stream_desc);
/*----------------------------------------------------------------------*/
/* EXTERN sch_set_stream_info					        */
/*......................................................................*/
/*..DESCRIPTION.........................................................*/
/*								        */
/* Routine to allow the control of the output of the messages        	*/
/* corresponding to an output stream.				        */
/*									*/
/*..ARGUMENTS...........................................................*/
/*									*/
/* stream_id	-in-	The output stream to control. This stream must 	*/
/*			have been added by sch_add_stream().		*/
/*									*/
/* print_time	-in-	TRUE to precede each printed message with the	*/
/* 			current time.					*/
/* 									*/
/* print_user	-in-	TRUE to precede each printed message with the 	*/
/*			current user name.				*/
/*									*/
/*..RETURN-CODES........................................................*/
/*									*/
/*   GOTH__NORMAL	Normal, successful completion.			*/
/*   GOTH__MALLOC	Memory exhausted, no memory available.		*/
/*									*/
/*----------------------------------------------------------------------*/

extern GOTH_STATUS sch_set_stream_info(
				       GOTH_DESCRIPTOR	stream_id,
				       GOTH_BOOLEAN	print_time,
				       GOTH_BOOLEAN	print_user);
/*----------------------------------------------------------------------*/
/* EXTERN sch_remove_wheres_from_stack					*/
/*......................................................................*/
/*..DESCRIPTION.........................................................*/
/*									*/
/* Remove any GOTH__WHERE messages from the stack.			*/
/*									*/
/*..ARGUMENTS...........................................................*/
/*									*/
/*									*/
/*..RETURN-CODES........................................................*/
/*									*/
/*									*/
/*----------------------------------------------------------------------*/

extern GOTH_STATUS sch_remove_wheres_from_stack();
/*----------------------------------------------------------------------*/
/* EXTERN sch_protect_stack						*/
/*......................................................................*/
/*..DESCRIPTION.........................................................*/
/*									*/
/* Routine to protect the current stack contents against being		*/
/* removed by a clear operation. Every call to this routine must be	*/
/* accompanied by a call to sch_unprotect_stack(). 			*/
/* 									*/
/* The stack printing routines still print the entire stack.		*/
/*									*/
/*..ARGUMENTS...........................................................*/
/*									*/
/*									*/
/*..RETURN-CODES........................................................*/
/*									*/
/*									*/
/*----------------------------------------------------------------------*/

extern void sch_protect_stack();
/*----------------------------------------------------------------------*/
/* EXTERN sch_unprotect_stack						*/
/*......................................................................*/
/*..DESCRIPTION.........................................................*/
/*									*/
/* Routine to remove the last level of stack protection.		*/
/*									*/
/*..ARGUMENTS...........................................................*/
/*									*/
/*									*/
/*..RETURN-CODES........................................................*/
/*									*/
/*									*/
/*----------------------------------------------------------------------*/

extern void sch_unprotect_stack();
/*----------------------------------------------------------------------*/
/* EXTERN sch_open_log_file						*/
/*......................................................................*/
/*..DESCRIPTION.........................................................*/
/*									*/
/* Routine to open a log file (created if necessary), seek to the end, 	*/
/* and add the file access context to the list of SCHLIB streams.	*/
/*									*/
/*..ARGUMENTS...........................................................*/
/*									*/
/* file_name	-in-	Log file name.					*/
/* fac_id	-out-	File access context.				*/
/*									*/
/*..RETURN-CODES........................................................*/
/*									*/
/* GOTH__NORMAL		Normal, successful completion.			*/
/* GOTH__MALLOC		Memory exhausted, no memory available.		*/
/*----------------------------------------------------------------------*/

extern GOTH_STATUS sch_open_log_file(GOTH_STRING	file_name,
				     GD_FAC		*fac_id);
/*----------------------------------------------------------------------*/
/* EXTERN sch_close_log_file						*/
/*......................................................................*/
/*..DESCRIPTION.........................................................*/
/*								        */
/* Routine to close a log file and remove it from the SCHLIB output 	*/
/* streams.       							*/
/*									*/
/*..ARGUMENTS...........................................................*/
/*									*/
/* fac_id	-in-	File access context.				*/
/*									*/
/*..RETURN-CODES........................................................*/
/*									*/
/* GOTH__NORMAL		Normal, successful completion.			*/
/* GOTH__NOSUCHSTREAM	File access context specified does not exist.	*/
/*----------------------------------------------------------------------*/

extern GOTH_STATUS sch_close_log_file(GD_FAC	fac_id);

/*>>> EXTERN functions from STATUS_CODE_INFO.C <<<*/

#endif
