/*
 * This file is part of the LAMPS distribution, released as a software
 * preservation project to archive digital history for future historians.
 * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
 *
 * Timestamp of this file for the 2002 release was: 1995-03-23 19:15:26.000000000 +0000
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 */
#ifndef _SPACE_INTRINSICS#define _SPACE_INTRINSICS/* $Header: /lslhome/gothic/hdr/spacelib/v1-14/RCS/hdr.space_intrinsics.h,v 1.13.1.3 1993/03/10 20:03:27 jon Exp $								*//* 									*//* $Log: hdr.space_intrinsics.h,v $ * Revision 1.13.1.3  1993/03/10  20:03:27  jon * Version v1-14 derived from v1-13 * Extracted to fix a bug at line 261 of space_query.c. The routine should * perform a SCH_CLEAR(status) when GOTH__EXISTS is found. * * Removed earlier memory leak fixes which involved freeing copies of arrays * returned by TRANLIB. This caused problems because version v1-3 and later of * TRANLIB returns pointers to the arrays not copies of thos arrays - this * resulted in tramples. * * Fixed bug which resulted in `space_test_trans()' returning GOTH__NOSUCHTRANS * if the transformation did not exist. This routine now sets the * `ret_trans_exists' parameter to false and returns GOTH__NORMAL if the * transformation does not exist. * * Revision 1.13.1.2  1992/10/26  15:44:59  jon * Version v1-13 derived from v1-12 * A space route is considered unique if there is no space connected to more * than one other space. Fix this to test that there is also not more than * one transformation between the spaces as well. * * Revision 1.13.1.1  1992/10/19  21:33:02  jon * Version v1-12 derived from v1-11 * Inclusion of a routine to map forward an MBR in the source space to an * MBR in the destination space. * * Fixed bug in 'space_tree_transform_coord()' which could result in incorrect * results for transformations with normalisation enabled. (* instead of +). * * Revision 1.13  1992/09/27  19:47:50  jon * Version v1-11 derived from v1-10 * Extracted to fix ORACLE specific bug. ORACLE stores zero length strings * as null valued strings. SPACELIB produces an 'Object is nameless' message * when it attempts to retrieve a name which had been set to a zero * length string. * * Modifed name retrieval routine `space_fetch_name()' to return a zero * length string when it encounters a null valued name property. * * Modified `space_fetch_space_kinds()' so that it does not return the * space kind with a zero length string as its name. This space kind has * special internal significance within SPACELIB. * * Revision 1.12  1992/09/24  14:44:43  davidr * Version v1-10 derived from v1-9 * Fixed argument lists for various callback routines which had been * scrambling x1,y1,x2,y2 * * Revision 1.11  1992/09/16  14:36:08  davem * Version v1-9 derived from v1-8 * * Enhancements to space_init.lull to improve error handling and space * dataset selection. * * * Also (while it was out): * 1) Corrected small bug where, when a transformation was not properly * registered, a misleading message about `wrong number of arguments' was * given. * 2) Build default transformations for transformation kinds with no arguments * correctly. NOTE source and destination spaces now set to NULL. * 3) Return GOTH__NOTIMPLEMENTED, when spacelib tries to return a transformation * of a kind with no arguments. This requires a bit more thought. * 4) Imposed the following restrictions on transformation kinds with no * arguments: * a) Source and destination space kinds must must not be wildcards ("") * b) Source and/or destination space kind must have some paramaters. * 5) Added new routine `space_measurement_set_copy' * , * * 6) Corrected bug in `space_get_named_connections' that was thrown up by * purify. A read was made off the start of an array (but in fact the result * was never used) * * Modified `space_destroy_trans()' to decrement the count of the number of * transformations attached to the relevant transformation kind when the * transformation is removed from its kind. Resulted in memory access errors, d * detected using Purify. * * Revision 1.10  1992/08/26  20:11:18  jon * Version v1-8 derived from v1-7 * Introduce a space-kind with name "" at startup. Allow a transformation kind * to be setup between any pair of space-kinds, including "", where "" can * stand for any space-kind. * Add routines to convert between a string and a simple route-tree (a space tree * without any branches). * Add routine to copy measurement sets. * On line 170 of space_query.c in function get_trans_k_from_object() corrected * an incorrected use of coln_get_marked_element(). A collpection id was being passed instead of a mark id. * Purify leak fix. * * Revision 1.9  1992/08/18  12:42:05  adrian * Version v1-7 derived from v1-6 * Update lull files * Fix bug in calculation of rms residuals in calculate_fit() * * Revision 1.8  1992/08/06  19:55:23  adrian * Version v1-6 derived from v1-5 * Extracted to speed up the registering of transformation functions with * spacelib. At the moment each call of space_register_trans`space_register_trans_func' loads the * transformation kind ( and associated space kinds ) from the data base. This * will be changed, so that `space_register_trans_func' will simply remember the * names it has been passed, and the registration will be done as and when * necessary. * * Also made error messages more verbose. Added a few new return codes and * stacked the names of the entities that could not be found, or were already * there. * * Revision 1.7  1992/08/03  10:13:37  ron * Version v1-5 derived from v1-4 * Extracted to provide further routines for the Registration Application: * * Revision 1.6  1992/07/22  09:14:30  ron * Version v1-4 derived from v1-3 * Extracted to supply an additional routine `space_fetch_measurement_set_names' * to get all the measurement sets in the database. * Removal of lsr_defns.h and trnlib header files and functions from space_test.c * since they were not needed and caused a circular dependency with rasterlib. * Opportunity taken to make sure library compiles on IBM. Altered NULLs to * 0, where it was not a pointer. * * Revision 1.5  1992/07/07  12:04:51  ron * Version v1-3 derived from v1-2 * Version extracted to implement a more accurate transformation mechanism. This * involves normalising all coordinates in the input space before transforming * them, applying the transformation, and then rescaling the coordinates to the * output space. This type of transformation will only be able to be added * with the `space_add_named_trans' routine and computed using the measurement * set mechanism. Note: THESE ROUTINES (introduced in v1-2) WILL HAVE THEIR * ARGUMENT LISTS ALTERED, so beware!!! * * Also added some utility routines like `space_get_space_kind_name' and * `space_get_trans_kind_name' * * Revision 1.4  1992/06/26  08:54:34  ron * Version v1-2 derived from v1-1-1 * Extracted to provide Extensions for Registration Application * Also added support for named transformations and route plans. This work * involved changes to the space-tree mechanism to allow it to use named * transformations and also to the automatic building of space trees * (`space_rebuild_tree') which previously only got data from the database, * not from the data in dynamic memory. While doing this, it was discovered * that the routine `space_fetch_trans_kinds_of_space' did not perform * according to its description - the BOOLEAN `trans_to_request' operated * in the wrong sense. This was corrected to conform with the description. * Users of this routine should check that their code gives the expected * result. Where this call is used within spacelib, the sense of the flag * has been altered, so no other routines are affected. * * Stopped `space_add_trans' and `space_add_named_trans' accepting a * transformation kind with no parameters. There is an implicit transformation * available between the spaces. * * Modified `space_init.lull' so that it works with multiple spaces, prompting * user for required space dataset, rather than simply picking one automatically. * * Revision 1.3  1992/04/28  09:22:03  jon * Version v1-1-1 derived from v1-1 * Extracted to recreate space_init.lull and to test configuration management system. * * Revision 1.2  1992/04/27  21:09:52  jon * Version v1-1 derived from v1-0 * Replace explicit calls to P*S libraries with generic object manager * property manipulation routines. * * Revision 1.1  1992/03/16  22:49:46  jon * Version v1-0 derived from root * Version containing `test' alternative from old system *								*//************************************************************************//* Copyright Laser-Scan Ltd, Cambridge CB4 4FY, England			*//* Author    Ron Russell, 29-Nov-1991					*//************************************************************************//************************************************************************//*									*//*		  S P A C E _ I N T R I N S I C S . H 			*//*									*//* Part of GOTHIC module SPACLIB					*//* Version 0.1, Ron Russell 29-Nov-1991					*//************************************************************************/#include "tran_defns.h"/*----------------------------------------------------------------------*//*..INTRODUCTION........................................................*//*									*//* <<SPACELIB>> is concerned with providing a mechanism for		*//* transforming from one coordinate system to another.			*//*									*//* A <<space>> is a coordinate system where a location can be described	*//* as a pair of 						       !*//* <<GOTH_REAL>>s. Any element in <<GOTHIC>>				*//* that deals with coordinates must also indicate which <<space>> the	*//* measurements have been made in. At run time the <<space>>s are	*//* handled through the <<GOTH DESCRIPTOR>> mechanism, but the		*//* persistent storage of data must refer to the <<space>>s by name. The	*//* data about the <<space>>s is stored in the database. This data is	*//* external to the datasets.						*//*									*//* Any particular <<space>> is a single					*//* instance of a <<space kind>>, thus there can be several different	*//* <<space>>s of the same <<space kind>>.				*//* A <<space kind>> has a set of parameters associated with it. These	*//* parameters may be of different datatypes. A particular <<space>> of	*//* this <<space kind>> will have values associated with these		*//* parameters.								*//*									*//* <<Transformation>>s can be set up between <<spaces>>. These		*//* <<transformation>>s can make use of the values of the parameters in 	*//* the source and destination <<space>>s and they may also have 	*//* parameters of their own. There are thus <<transformation kind>>s 	*//* that know the source and destination <<space kind>> that they link, 	*//* and there are particular <<transformations>> linking particular 	*//* <<spaces>> that make use of the values of the parameters in these 	*//* <<spaces>>. A particular <<transformation>> will have values for its *//* own parameters.							*//* 									*//* <<Space kind>>s, <<space>>s and <<transformation kind>>s are 	*//* identified in the data base by their names. <<Transformation>>s are	*//* identified by the names of the <<spaces>> that they link.	       !*//* At run time the address of routine(s) must be registered, that	*//* provide the code to implement a particular <<transformation kind>>. !*//* As long as these have all been set up, the transformation of		*//* coordinates from one space to another is simply a case of passing	*//* the appropriate routine the input <<space>>, the output <<space>>	*//* and the coordinates to transform.					*//*									*//* <<An Example>>							*//*									*//* Consider one dataset that has coordinates measured in metres,	*//* relative to a local origin, and a second dataset that has		*//* coordinates measured in feet relative to its local origin.	       	*//*									*//* A routine is written called "plane_convert" and this should be	*//* registered with <<tranlib>>. It is of the form:		       !*//*^^									*//* typedef GOTH_STATUS (*TRANS_COORD_FUNC) (                            *//*                                 GOTH_INTEGER n_coord,                *//*                                 GOTH_REAL    xy_in[][2],             *//*                                 GOTH_REAL    xy_out[][2],            *//*                                 GOTH_INTEGER n_trans_params,         *//*                                 GOTH_VALUE   trans_params[],         *//*                                 GOTH_INTEGER n_src_space_params,     *//*                                 GOTH_VALUE   src_space_params[],     *//*                                 GOTH_INTEGER n_dest_space_params,    *//*                                 GOTH_VALUE   dest_space_params[] );  *//*^^									*//*									*//* In this case:						       !*//* n_trans_params = 1, and trans_params is a real scale factor	       !*//* n_src_space_params = 2 and src_space_params is the origin of the	*//* source space							       !*//* n_dest_space_params = 2 and dest_space_params is the origin of the	*//* destination space.							*//*									*//* Having set up our space database, on some previous occasion, with	*//* a call to 							       !*//* <<space_setup_schema>>, we may now relate these two spaces		*//* as follows:								*//*@ Call <<space_initialise>> to open the space database.		*//*@ Define a <<space kind>> called "plane offset" with a call to       !*//* <<space_add_space_kind("plane offset",2,DT_REAL,DT_REAL)>>.		*//*@ Define two instances of this <<space kind>>:		       !*//* <<space_add_space("metre space",2,1000.0,1000.0)>>.		       !*//* <<space_add_space("feet space",2,50000.0,50000.0)>>.		       !*//*@ Define a <<transformation kind>> called "plane transformation"	*//* with a call to: 						       !*//*<<space_add_trans_kind("plane transformation","plane offset,	       !*//* "plane offset",1,DT_REAL)>>						*//*@ Define two instances of this <<transformation kind>>, one forward	*//* and one backward:						       !*//* <<space_add_trans("plane transformation","metre space","feet space",!*//*  1,0.3028)>>							       !*//* <<space_add_trans("plane transformation","feet space","metre space",!*//*  1,1.0/0.3028)>>						       !*//*									*//* This data can now be saved with a call to <<space_save()>>, and in	*//* any subsequent run of the program all that is required is a call to:!*//* <<space_register_trans_func("plane transformation",			*//* "plane_convert")>>						       	*//*									*//* The <<GOTH DESCRIPTORS>> for the spaces can be obtained with calls to!*//* <<space_build_space_id>>, and these can then be used to transform	*//* points using routines like 					       !*//* <<space_transform_point>> or <<geom_transform_space>>.		*//*									*//*......................................................................*//*>>> EXTERN functions from SPACE.C <<<*//*----------------------------------------------------------------------*//* EXTERN space_add_space_kind						*//*......................................................................*//*..DESCRIPTION.........................................................*//* Routine to add a new kind of space to the `space-database'. The 	*//* space-kind is parameterised by n_parms parameters of the specified 	*//* types. The space-kind will not be stored persistently in the 	*//* `space-database' unless a call is made to space_save().		*//*									*//*..ARGUMENTS...........................................................*//*									*//* space_kind_name -in-	The name of the space kind to add		*//*									*//* n_params	-in-	The number of parameters required to define	*//*			this space kind.				*//*									*//* type		-in-	+list+The datatypes of the parameters.		*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* GOTH__ENTITYEXISTS	Space kind already exists. Name has been put	*//*			on stack.					*//* GOTH__ERROR		Adding the space kind  has failed.	       !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_add_space_kind(					 GOTH_STRING	space_kind_name,					 GOTH_INTEGER  	n_params,					 GOTH_DATATYPE	*type );/*----------------------------------------------------------------------*//* EXTERN space_add_trans_kind						*//*......................................................................*//*..DESCRIPTION.........................................................*//* Routine to add a new kind of transformation to the `space-database'. *//* The trans-kind is parameterised by n_parms parameters of the 	*//* specified types. Transformations of the specified kind can only be 	*//* setup between spaces of the specified kinds. The trans-kind will not *//* be stored persistently in the `space-database' unless a call to 	*//* space_save() is made.						*//*									*//*..ARGUMENTS...........................................................*//*									*//* trans_kind_name -in-	The name of the transformation kind to add.	*//*									*//* src_space_kind_name -in- The name of the source space kind for this	*//*			    transformation.				*//*									*//* dest_space_kind_name -in- The name of the destination space kind for *//*			     this transformation.			*//*									*//* n_params	-in-	The number of parameters required to define	*//*			this transformation kind.			*//*									*//* type		-in-	+list+The datatypes of the parameters.		*//*									*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ENTITYNOTFOUND Source or destination space kind not found. A	*//*			message has been put on the stack		*//* GOTH__ENTITYEXISTS	Trans kind already exists. Name has been put	*//*			on stack.					*//* GOTH__ERROR		Adding the space kind  has failed.	       !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_add_trans_kind(				 GOTH_STRING		trans_kind_name,				 GOTH_STRING	 	src_space_kind_name,				 GOTH_STRING	 	dest_space_kind_name,				 GOTH_INTEGER  		n_params,				 GOTH_DATATYPE		*type );/*----------------------------------------------------------------------*//* EXTERN space_remove_space						*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* This routine removes a named space, and any associated		*//* transformations, from the space dataset.				*//*									*//*..ARGUMENTS...........................................................*//*									*//* space_name	-in-	The name of the space to be removed.		*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ERROR		The space removal has failed.		       !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_remove_space(				      GOTH_STRING	space_name);/*----------------------------------------------------------------------*//* EXTERN space_add_space						*//*......................................................................*//*..DESCRIPTION.........................................................*//* Routine to add a new space, of the specified kind, to the		*//* `space-database'. The types of parameters supplied should match  	*//* those specified for this kind of space. The space will not be stored	*//* persistently in the `space-database' unless a call is made to 	*//* space_save().							*//*									*//*..ARGUMENTS...........................................................*//*									*//* space_kind_name -in-	The name of the kind of space to be added.	*//*									*//* space_name	-in-	The name of the particular space to be added.	*//*									*//* n_params	-in-	The number of parameters for this space kind.	*//*									*//* param	-in-	+list+The values of the parameters for this	*//*			      space.					*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ERROR		Adding the space has failed.		       !*//*			An appropriate message has been put on the	*//*			message stack					*//* GOTH__ENTITYNOTFOUND The space kind has not been found in the space	*//*			data base. The space kind name has been put	*//* 			on the stack.					*//*									*//* GOTH__ENTITYEXISTS	The space already exists in the database. The	*//* 			name has been put on the stack.			*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_add_space(				   GOTH_STRING		space_kind_name,				   GOTH_STRING		space_name,				   GOTH_INTEGER		n_params,				   GOTH_VALUE		*param )   ;/*----------------------------------------------------------------------*//* EXTERN space_get_space						*//*......................................................................*//*..DESCRIPTION.........................................................*//* Routine to get the space kind and parameters of a previously		*//* defined space instance in the current version of the space 		*//* tree/data-base.                                                      *//*									*//*..ARGUMENTS...........................................................*//*									*//* space_name	-in-	The name of the space to get information about.	*//*									*//* space_kind_name -out- The name of the space kind that this space	*//* 			 belongs to.					*//*									*//* n_params	-out-  	The number of parameters that this space (kind)	*//*			has.						*//* 									*//* param	-out-	An array of the particular values of the 	*//*			parameters for this space.			*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ENTITYNOTFOUND	The space cannot be found in the database. A	*//*			message has been put on the stack		*//* GOTH__ERROR		Getting the data about this space has failed.  !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_get_space(				   GOTH_STRING		space_name,				   GOTH_STRING	       *space_kind_name,				   GOTH_INTEGER	       *n_params,				   GOTH_VALUE	       **param )   ;/*----------------------------------------------------------------------*//* EXTERN space_get_space2						*//*......................................................................*//*..DESCRIPTION.........................................................*//* Routine to get the space kind and parameters of a previously		*//* defined space instance in the current version of the space 		*//* tree/data-base.                                                      *//*									*//*..ARGUMENTS...........................................................*//*									*//* space_name	-in-	The name of the space to get information about.	*//*									*//* space_kind_name -out- The name of the space kind that this space	*//* 			 belongs to.					*//*									*//* n_params	-out-  	The number of parameters that this space (kind)	*//*			has.						*//* 									*//* types	-out-	An array of the particular types of the 	*//*			parameters for this space. This array must be	*//*			freed by the caller.				*//*									*//* param	-out-	An array of the particular values of the 	*//*			parameters for this space. This array must be	*//*			freed by the caller.				*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ENTITYNOTFOUND	Cannot find space in space database. An		*//*			appropriate message has been put on stack	*//* GOTH__ERROR		Getting the data about this space has failed.  !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_get_space2(GOTH_STRING		space_name,				    GOTH_STRING	       	*space_kind_name,				    GOTH_INTEGER	*n_params,				    GOTH_DATATYPE       **types,				    GOTH_VALUE	       	**param)   ;/*----------------------------------------------------------------------*//* EXTERN space_get_space_kind						*//*......................................................................*//*..DESCRIPTION.........................................................*//* Routine to get the datatypes of the parameters of a previously      	*//* defined space kind in the current version of the space 		*//* tree/data-base.                                                      *//*									*//*..ARGUMENTS...........................................................*//*									*//* space_kind_name	-in-	The name of the space-kind     	        *//*   				to get information about.		*//* n_params	-out-  	The number of parameters that this space-kind	*//*			has.						*//* datatypes	-out-	An array of the datatypes of the 		*//*			parameters for this space-kind.			*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ENTITYNOTFOUND	Unable to find the space kind in the database.	*//*			An appropriate message has been put on stack	*//* GOTH__ERROR		Getting the data about this space has failed.  !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_get_space_kind(				   GOTH_STRING		space_kind_name,				   GOTH_INTEGER	       *n_params,				   GOTH_DATATYPE       **datatypes )   ;/*----------------------------------------------------------------------*//* EXTERN space_get_trans_kind						*//*......................................................................*//*..DESCRIPTION.........................................................*//* Routine to get the datatypes of the parameters of a previously      	*//* defined trans kind in the current version of the space 		*//* tree/data-base.                                                      *//*									*//*..ARGUMENTS...........................................................*//*									*//* trans_kind_name	-in-	The name of the trans-kind     	        *//*   				to get information about.		*//* n_params	-out-  	The number of parameters that this trans-kind	*//*			has.						*//* datatypes	-out-	An array of the datatypes of the 		*//*			parameters for this trans-kind.			*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ENTITYNOTFOUND	Transformation kind not found in database. An	*//*			appropriate message has been put on stack.	*//* GOTH__ERROR		Getting the data about this space has failed.  !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_get_trans_kind(GOTH_STRING	trans_kind_name,					GOTH_INTEGER	*n_params,					GOTH_DATATYPE	**datatypes )   ;/*----------------------------------------------------------------------*//* EXTERN space_add_trans						*//*......................................................................*//*..DESCRIPTION.........................................................*//* Routine to add an unnamed transformation of the specified kind  	*//* between thetwo specified spaces to the `space-database'. The types	*//* of parameters supplied should match those specified for this kind of	*//* transformation. The transformation will not be stored persistently 	*//* in the 'space-database' unless a call is made to space_save().	*//* 									*//* This routine will fail if a transformation between the two spaces	*//* already exists.							*//*									*//* A separate transformation has to be set up in each direction.	*//*									*//*..ARGUMENTS...........................................................*//*									*//*									*//* trans_kind_name -in-	The name of the transformation kind to add.	*//*									*//* src_space_name  -in- The name of the source space for this		*//*			transformation.					*//*									*//* dest_space_name -in- The name of the destination space kind for	*//*			this transformation.				*//*									*//* n_params	-in-	The number of parameters required to define	*//*			this transformation (kind).			*//*									*//* param	-in-	+list+The values of the parameters.		*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__TRANSKINDNOPARAMS Cannot add a transformation of a 		*//*			transformation kind that has no parameters. In	*//*			this case there is an implicit transformation	*//*			existing between the spaces.			*//* 									*//* GOTH__ERROR		Adding the transformation has failed.	       !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_add_trans(				   GOTH_STRING		trans_kind_name,				   GOTH_STRING		src_space_name,				   GOTH_STRING		dest_space_name,				   GOTH_INTEGER		n_params,				   GOTH_VALUE		*param )   ;/*----------------------------------------------------------------------*//* EXTERN space_add_named_trans						*//*......................................................................*//*..DESCRIPTION.........................................................*//* Routine to add a transformation of the specified kind between the 	*//* two specified spaces to the `space-database'. The types of 		*//* parameters supplied should match those specified for this kind of 	*//* transformation. The transformation will not be stored persistently 	*//* in the 'space-database' unless a call is made to space_save().	*//* 									*//* This routine will fail if a transformation between the two spaces	*//* already exists.							*//*									*//* A separate transformation has to be set up in each direction.	*//*									*//*..ARGUMENTS...........................................................*//*									*//* trans_kind_name -in-	The name of the transformation kind to add.	*//*									*//* src_space_name  -in- The name of the source space for this		*//*			transformation.					*//*									*//* dest_space_name -in- The name of the destination space kind for	*//*			this transformation.				*//*									*//* trans_name	-in-	The name of the transformation			*//*									*//* n_params	-in-	The number of parameters required to define	*//*			this transformation (kind).			*//*									*//* param	-in-	+list+The values of the parameters.		*//*									*//* with_normalise  -in-	Whether to normalise coordinates before		*//* 			transformation					*//*									*//* norm_data	-in-	The normalising data, when with_normalise is	*//*			TRUE.						*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__TRANSKINDNOPARAMS Cannot add a transformation of a 		*//*			transformation kind that has no parameters. In	*//*			this case there is an implicit transformation	*//*			existing between the spaces.			*//*									*//* GOTH__ENTITYEXISTS	The transformation already exists. A message 	*//*			is put on the message stack.			*//* GOTH__ENTITYNOTFOUND	The transformation kind, the source space or	*//*			the destination space cannot be found. A message*//*			is put on the message stack.			*//* GOTH__ERROR		Adding the transformation has failed.	       !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_add_named_trans(					 GOTH_STRING	trans_kind_name,					 GOTH_STRING	src_space_name,					 GOTH_STRING	dest_space_name,					 GOTH_STRING	trans_name,						 GOTH_INTEGER	n_params,					 GOTH_VALUE	*param,					 GOTH_BOOLEAN	with_normalise,					 GOTH_REAL      norm_data[])   ;/*----------------------------------------------------------------------*//* EXTERN space_build_named_trans					*//*......................................................................*//*..DESCRIPTION.........................................................*//* Routine to return the trans-id from the `space-database' of the 	*//* specified space. If the routine is called more than once with the 	*//* same transformation, it returns the same trans-id.			*//*									*//*..ARGUMENTS...........................................................*//*									*//* trans_id	-out-	The returned id for the transformation		*//*									*//* src_space_id	-in-	The id for the source space of the 		*//*			transformation					*//*									*//* dest_space_id -in-	The id for the destination space of the		*//*			transformation					*//*									*//* trans_name	-in-	The name of the transformation (may be "")	*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ERROR		Getting the space id has failed.	       !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_build_named_trans(					   GD_TRANS	*trans_id,					   GD_SPACE	src_space_id,					   GD_SPACE	dest_space_id,					   GOTH_STRING	trans_name);/*----------------------------------------------------------------------*//* EXTERN space_build_space_kind	      				*//*......................................................................*//*..DESCRIPTION.........................................................*//* Routine to return the space-kind-id from the `space-database' of 	*//* the specified space-kind. If the routine is called more than once 	*//* with the same space-kind, it returns the same space-kind-id.		*//*									*//*..ARGUMENTS...........................................................*//*									*//* space_kind_name -in-	The name of the input space kind.		*//*									*//* ret_space_kind_id -out- The returned id for the space kind.		*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ENTITYNOTFOUND	Space kind not found in database. A message has	*//*			been put on the message stack			*//* GOTH__ERROR		Getting the space-kind-id has failed.	       !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_build_space_kind(			    GOTH_STRING		space_kind_name,			    GD_SPACE_KIND	*ret_space_kind_id );/*----------------------------------------------------------------------*//* EXTERN space_build_trans_kind	      				*//*......................................................................*//*..DESCRIPTION.........................................................*//* Routine to return the trans-kind-id from the `space-database' of 	*//* the specified trans-kind. If the routine is called more than once 	*//* with the same trans-kind, it returns the same trans-kind-id.		*//*									*//*..ARGUMENTS...........................................................*//*									*//* trans_kind_name	-in-	The name of the input transformation 	*//*				kind.					*//*									*//* ret_trans_kind_id	-out-	The returned id for the transformation	*//*				kind.					*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ENTITYNOTFOUND	Trans kind not found in database. A message has	*//*			been put on the message stack			*//* GOTH__ERROR		Getting the transformation kind id has failed. !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_build_trans_kind(			    GOTH_STRING		trans_kind_name,			    GD_TRANS_KIND	*ret_trans_kind_id );/*----------------------------------------------------------------------*//* EXTERN space_build_space_id						*//*......................................................................*//*..DESCRIPTION.........................................................*//* Routine to return the space-id from the `space-database' of the 	*//* specified space. If the routine is called more than once with the 	*//* same space, it returns the same space-id.				*//*									*//*..ARGUMENTS...........................................................*//*									*//* space_name	-in-	The name of the space.				*//*									*//* ret_space_id	-out-	The returned id for the space			*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ENTITYNOTFOUND	Space not found in database. A message has	*//*			been put on the message stack			*//* GOTH__ERROR		Getting the space id has failed.	       !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_build_space_id(					GOTH_STRING	space_name,						GD_SPACE	*ret_space_id );/*----------------------------------------------------------------------*//* EXTERN space_register_trans_func					*//*......................................................................*//*..DESCRIPTION.........................................................*//* Routine to register the named functions (which must have already 	*//* been made known to TRANLIB) with the specified transformation kind.	*//*									*//* When called from LULL the mbr, load and raster functions can be 	*//* omitted.								*//*									*//*..ARGUMENTS...........................................................*//*									*//* trans_kind_name -in-	The name of the transformation kind to be 	*//*			registered.					*//*									*//* coord_func_name -in- The name of the function to transform		*//*			coordinates.					*//*									*//* mbr_func_name -in-	The name of the function to transform a 	*//*			minimum bounding rectangle.			*//*									*//* load_func_name -in-	The name of the function to set up one row	*//*			of a set of observation equations, given a set	*//*			of points in the source and destination space	*//*									*//* raster_func_name -in- The name of the function to transform a raster.*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ERROR		Registering the transformation has failed.     !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS    space_register_trans_func(			     GOTH_STRING	trans_kind_name,			     GOTH_STRING       coord_func_name,			     GOTH_STRING      	mbr_func_name,			     GOTH_STRING       load_func_name,			     GOTH_STRING      	raster_func_name );/*----------------------------------------------------------------------*//* EXTERN space_transform_coord						*//*......................................................................*//*..DESCRIPTION.........................................................*//* Routine to transform an array of coordinates from the source space 	*//* to the destination space. The routine will succeed even if the 	*//* source and destination arrays are the same.				*//* 									*//* This function is not available from LULL.				*//*									*//*..ARGUMENTS...........................................................*//*									*//* space_tree_id -in-	The space tree of connections between spaces.	*//*			(May be NULL if there is a direct connection)	*//*									*//* src_space_id  -in-	The space the coordinates are currently in.	*//*									*//* dest_space_id -in-	The space the coordinates are to be transformed	*//*			to.						*//*									*//* n_coord       -in-	The number of coordinates in the arrays.	*//*									*//* xy_in[][2]    -in-	The array of input coordinates			*//*									*//* xy_out[][2]  -out-	The array of coordinates, in the destination 	*//*			space.						*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ERROR		The transformation failed.		       !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_transform_coord(					 GD_SPACE_TREE	space_tree_id,					 GD_SPACE	src_space_id,					 GD_SPACE	dest_space_id,					 GOTH_INTEGER	n_coord,					 GOTH_REAL	xy_in[][2],					 GOTH_REAL	xy_out[][2] );/*----------------------------------------------------------------------*//* EXTERN space_mbr_to_polygon						*//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Calculate an area geometry describing the transformed MBR from one   *//* space to another.							*//*                                                                      */ /*..ARGUMENTS...........................................................*//* 						       			*//* source_space      -in- source space name				*//* dest_space        -in- destination space name			*//* space_tree_id     -in- the space tree.				*//* low1		     -in- the coordinates of the MBR.			*//* low2              -in-						*//* high1	     -in-						*//* high2             -in-						*//* geom_id           -out- a geometry of the trannsformed MBR.		*//*									*//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__MALLOC if insufficient memory for operation                   *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS space_mbr_to_polygon(GOTH_STRING	 source_space,					GOTH_STRING      dest_space,					GD_SPACE_TREE    space_tree_id,					GOTH_REAL	 low1,					GOTH_REAL	 low2,					GOTH_REAL	 high1,					GOTH_REAL	 high2,					GOTH_REAL	 start_step,					GOTH_REAL	 tolerance,					GD_GEOMETRY      *geom_id) ;/*----------------------------------------------------------------------*//* EXTERN space_transform_coord_MBR	       				*//*......................................................................*//*..DESCRIPTION.........................................................*//* Routine to transform an array of coordinates from the source space 	*//* to the destination space, and return the MBR of the transformed 	*//* coordinates. The routine will succeed even if the source and 	*//* destination arrays are the same.					*//* 									*//* This function is not available from LULL.				*//*									*//*..ARGUMENTS...........................................................*//*									*//* space_tree_id -in-	The space tree of connections between spaces.	*//*			(May be NULL if there is a direct connection)	*//*									*//* src_space_id  -in-	The space the coordinates are currently in.	*//*									*//* dest_space_id -in-	The space the coordinates are to be transformed	*//*			to.						*//*									*//* n_coord       -in-	The number of coordinates in the arrays.	*//*									*//* xy_in[][2]    -in-	The array of input coordinates			*//*									*//* xy_out[][2]  -out-	The array of coordinates, in the destination 	*//*			space.						*//*									*//* ret_xlo	-out-	The minimum x coordinate of the transformed	*//*			points.						*//*									*//* ret_ylo	-out-	The minimum y coordinate of the transformed	*//*			points.						*//*									*//* ret_xhi	-out-	The maximum x coordinate of the transformed	*//*			points.						*//*									*//* ret_yhi	-out-	The maximum y coordinate of the transformed	*//*			points.						*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ERROR		The transformation has failed.		       !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_transform_coord_MBR(					 GD_SPACE_TREE	space_tree_id,					 GD_SPACE	src_space_id,					 GD_SPACE	dest_space_id,					 GOTH_INTEGER	n_coord,					 GOTH_REAL	xy_in[][2],					 GOTH_REAL	xy_out[][2],					 GOTH_REAL	*ret_xlo,					 GOTH_REAL	*ret_ylo,					 GOTH_REAL	*ret_xhi,					 GOTH_REAL	*ret_yhi );/*----------------------------------------------------------------------*//* EXTERN space_transform_point						*//*......................................................................*//*..DESCRIPTION.........................................................*//* Routine to transform the specified point (x_in, y_in) from the 	*//* src_space to the dest_space, (x_out, y_out). The routine will not	*//* fail if the input and output variables are the same.			*//*									*//*..ARGUMENTS...........................................................*//*									*//* space_tree_id -in-	The space tree of connections between spaces.	*//*			(May be NULL if there is a direct connection)	*//*									*//* src_space_id  -in-	The space the point is currently in.		*//*									*//* dest_space_id -in-	The space the point is to be transformed to.	*//*									*//* x_in		 -in-	The x coordinate of the point in the input	*//*			space.						*//*									*//* y_in		 -in-	The y coordinate of the point in the input	*//*			space.						*//*									*//* x_out	-out-	The x coordinate of the point in the 		*//*			destination space.				*//*									*//* y_out	-out-	The y coordinate of the point in the 		*//*			destination space.				*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ERROR		The transformation has failed.		       !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_transform_point(					 GD_SPACE_TREE	space_tree_id,					 GD_SPACE	src_space_id,					 GD_SPACE	dest_space_id,					 GOTH_REAL	x_in,					 GOTH_REAL	y_in,					 GOTH_REAL	*x_out,					 GOTH_REAL	*y_out );/*----------------------------------------------------------------------*//* EXTERN space_proto_transform_point	       				*//*......................................................................*//*..DESCRIPTION.........................................................*//* Routine to transform the specified point from the source to 		*//* destination space using the specified transformation kind with the	*//* supplied parameters.							*//* 									*//* This function is not available to LULL				*//*									*//*..ARGUMENTS...........................................................*//*									*//* src_space_id	   -in-	Space to transform point from			*//*									*//* dest_space_id   -in-	Space to transform to				*//*									*//* trans_kind_id   -in-	Transformation kind to use for transformation	*//*									*//* n_params	   -in-	Number of parameters transformation takes	*//*									*//* param_values[]  -in-	Array of these values				*//*									*//* x_in		   -in-	x coordinate of point to transform		*//*									*//* y_in		   -in-	y coordinate of point to transform		*//*									*//* x_out	  -out-	x coordinate of transformed point		*//*									*//* y_out	  -out-	y coordinate of transformed point		*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ERROR		The transformation has failed. 		       !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_proto_transform_point(					       GD_SPACE		src_space_id,					       GD_SPACE		dest_space_id,					       GD_TRANS_KIND	trans_kind_id,					       GOTH_INTEGER	n_params,					       GOTH_VALUE	param_values[],					       GOTH_REAL       	x_in,					       GOTH_REAL       	y_in,					       GOTH_REAL       	*x_out,					       GOTH_REAL       	*y_out );/*----------------------------------------------------------------------*//* EXTERN space_proto_norm_transform_point				*//*......................................................................*//*..DESCRIPTION.........................................................*//* Routine to transform the specified point from the source to 		*//* destination space using the specified transformation kind with the	*//* supplied parameters.							*//* 									*//* This function is not available to LULL				*//*									*//*..ARGUMENTS...........................................................*//*									*//* src_space_id	   -in-	Space to transform point from			*//*									*//* dest_space_id   -in-	Space to transform to				*//*									*//* trans_kind_id   -in-	Transformation kind to use for transformation	*//*									*//* n_params	   -in-	Number of parameters transformation takes	*//*									*//* param_values[]  -in-	Array of these values				*//*									*//* with_normalise  -in-	Whether to normalise coordinates before		*//* 			transformation					*//*									*//* norm_data	   -in- The normalising data, when with_normalise is	*//*			TRUE.						*//*									*//* x_in		   -in-	x coordinate of point to transform		*//*									*//* y_in		   -in-	y coordinate of point to transform		*//*									*//* x_out	  -out-	x coordinate of transformed point		*//*									*//* y_out	  -out-	y coordinate of transformed point		*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ERROR		The transformation has failed. 		       !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_proto_norm_transform_point(					       GD_SPACE		src_space_id,					       GD_SPACE		dest_space_id,					       GD_TRANS_KIND	trans_kind_id,					       GOTH_INTEGER	n_params,					       GOTH_VALUE	param_values[],					       GOTH_BOOLEAN	with_normalise,					       GOTH_REAL	norm_data[],					       GOTH_REAL       	x_in,					       GOTH_REAL       	y_in,					       GOTH_REAL       	*x_out,					       GOTH_REAL       	*y_out );/*----------------------------------------------------------------------*//* EXTERN space_transform_mbr						*//*......................................................................*//*..DESCRIPTION.........................................................*//* Routine to transform a minimum bounding rectangle from the source	*//* space to the destination space. 					*//*									*//*..ARGUMENTS...........................................................*//*									*//* space_tree_id -in-	The space tree of connections between spaces.	*//*			(May be NULL if there is a direct connection)	*//*									*//* src_space_id  -in-	The space the point is currently in.		*//*									*//* dest_space_id -in-	The space the point is to be transformed to.	*//*									*//* src_xlo	 -in-	The minimum x value of the mbr in source space	*//*									*//* src_ylo	 -in-	The minimum y value of the mbr in source space	*//*									*//* src_xhi	 -in-	The maximum x value of the mbr in source space	*//*									*//* src_yhi	 -in-	The maximum y value of the mbr in source space	*//*									*//* dest_xlo	 -in-	The minimum x value of the transformed mbr in	*//*			destination space				*//*									*//* dest_ylo	 -in-	The minimum y value of the transformed mbr in	*//*			destination space				*//*									*//* dest_xhi	 -in-	The maximum x value of the transformed mbr in	*//*			destination space				*//*									*//* dest_yhi	 -in-	The maximum y value of the transformed mbr in	*//*			destination space				*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ERROR		Transformation has failed.		       !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_transform_mbr(				       GD_SPACE_TREE	space_tree_id,				       GD_SPACE		src_space_id,				       GD_SPACE		dest_space_id,				       GOTH_REAL	src_xlo,				       GOTH_REAL	src_ylo,				       GOTH_REAL	src_xhi,				       GOTH_REAL	src_yhi,				       GOTH_REAL	*dest_xlo,				       GOTH_REAL	*dest_ylo,				       GOTH_REAL	*dest_xhi,				       GOTH_REAL	*dest_yhi );/*----------------------------------------------------------------------*//* EXTERN space_get_name						*//*......................................................................*//*..DESCRIPTION.........................................................*//* Routine to return a string containing the name of the space, from	*//* a space id.								*//*									*//*..ARGUMENTS...........................................................*//*									*//* space_id	   -in-	The space id of the space			*//*									*//* ret_space_name -out-	The name of the space.				*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//*									*//* GOTH__ERROR		Getting the required space name has failed.    !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_get_name(				  GD_SPACE	space_id,				  GOTH_STRING	*ret_space_name );/*----------------------------------------------------------------------*//* EXTERN space_get_trans_name						*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* To return the name for a transformation. If the transformation is	*//* not named, an empty string is returned.				*//*									*//*..ARGUMENTS...........................................................*//*									*//* trans_id	-in-	the transformation				*//*									*//* trans_name	-out-	its name					*//*									*//*..RETURN-CODES........................................................*//*									*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//*									*//* GOTH__ERROR		Getting the required transformation name has	*//*			failed.					       !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_get_trans_name(					GD_TRANS	trans_id,					GOTH_STRING	*trans_name);/*----------------------------------------------------------------------*//* EXTERN space_get_trans_kind_name					*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* To return the name for a transformation kind.			*//*									*//*..ARGUMENTS...........................................................*//*									*//* trans_kind_id -in-	the transformation kind				*//*									*//* trans_kind_name -out- its name					*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//*									*//* GOTH__ERROR		Getting the required trans kind name has failed.!*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_get_trans_kind_name(					     GD_TRANS_KIND     trans_kind_id,					     GOTH_STRING      *trans_kind_name);/*----------------------------------------------------------------------*//* EXTERN space_get_space_kind_name					*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* To return the name for a space kind.					*//*									*//*..ARGUMENTS...........................................................*//*									*//* space_kind_id -in-	the space kind					*//*									*//* space_kind_name -out- its name					*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//*									*//* GOTH__ERROR		Getting the required space kind name has failed.!*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_get_space_kind_name(					     GD_SPACE_KIND     space_kind_id,					     GOTH_STRING      *space_kind_name);/*----------------------------------------------------------------------*//* EXTERN space_test_trans						*//*......................................................................*//*..DESCRIPTION.........................................................*//* Routine that sets ret_trans_exists to <<TRUE>> if a transformation 	*//* is defined from src_space_id to dest_space_id. If a <<non-NULL>> 	*//* space-tree is specified then the transformation may be a composite.	*//* 									*//* In the current implementation space_tree_id must be set to NULL.	*//*									*//*..ARGUMENTS...........................................................*//*									*//* space_tree_id -in-	The space tree of connections between spaces.	*//*			(May be NULL if there is a direct connection)	*//*									*//* src_space_id  -in-	The source space.				*//*									*//* dest_space_id -in-	The destination space				*//*									*//* ret_trans_exists -out- <<TRUE>> if transformation exists between	*//*			  spaces				       !*//*			  <<FALSE>> if transformation does not exist.	*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ERROR		The test has failed.			       !*//*			An appropriate message has been put on the	*//*			message stack.					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_test_trans(				    GD_SPACE_TREE	space_tree_id,				    GD_SPACE		src_space_id,				    GD_SPACE		dest_space_id,				    GOTH_BOOLEAN	*ret_trans_exists );/*----------------------------------------------------------------------*//* EXTERN space_get_trans						*//*......................................................................*//*..DESCRIPTION.........................................................*//* To retrieve the transformation routine, and all the required		*//* parameters from the source and destination space, and the		*//* transformation itself, for a transformation between two spaces.	*//*									*//* At the moment this routine only works for a direct connection (ie	*//* space_tree_id is ignored)						*//*									*//* This function is not available from LULL.				*//*..ARGUMENTS...........................................................*//*									*//* space_tree_id -in-	The space tree of connections between spaces.	*//*			(May be NULL if there is a direct connection)	*//*									*//* src_space_id  -in-	The source space.				*//*									*//* dest_space_id -in-	The destination space.				*//*									*//* ret_trans_func    -out- The address of the transformation function	*//*			   that connects the source and destination	*//*			   space.					*//*									*//* ret_n_trans_parms -out- The number of parameters associated with the	*//*			   projection (kind).				*//*									*//* ret_trans_parms   -out- Array of the values of the parameters for 	*//*			   this transformation. READ ONLY array.	*//*									*//* ret_n_src_parms   -out- The number of parameters associated with the	*//*			   source space					*//*									*//* ret_src_parms     -out- Array of the values of the parameters for	*//*			   the source space. READ ONLY array.		*//*									*//* ret_n_dest_parms  -out- The number of parameters associated with the	*//*			   destination space				*//*									*//* ret_dest_parms    -out- Array of the values of the parameters for	*//*			   destination space. READ ONLY array.		*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ERROR		Getting the transformation has failed	       !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_get_trans(				   GD_SPACE_TREE	space_tree_id,				   GD_SPACE		src_space_id,				   GD_SPACE		dest_space_id,				   TRANS_COORD_FUNC	*ret_trans_func,				   GOTH_INTEGER		*ret_n_trans_parms,				   GOTH_VALUE		**ret_trans_parms,				   GOTH_INTEGER		*ret_n_src_parms,				   GOTH_VALUE		**ret_src_parms,				   GOTH_INTEGER		*ret_n_dest_parms,				   GOTH_VALUE		**ret_dest_parms );/*----------------------------------------------------------------------*//* EXTERN space_get_trans2						*//*......................................................................*//*..DESCRIPTION.........................................................*//* To retrieve the transformation routine, and all the required		*//* parameters from the source and destination space, and the		*//* transformation itself, for a transformation between two spaces.	*//*									*//* At the moment this routine only works for a direct connection (ie	*//* space_tree_id is ignored)						*//*									*//* This function is not available from LULL.				*//*..ARGUMENTS...........................................................*//*									*//* space_tree_id -in-	The space tree of connections between spaces.	*//*			(May be NULL if there is a direct connection)	*//*									*//* src_space_id  -in-	The source space.				*//*									*//* dest_space_id -in-	The destination space.				*//*									*//* ret_trans_func    -out- The address of the transformation function	*//*			   that connects the source and destination	*//*			   space.					*//*									*//* ret_n_trans_parms -out- The number of parameters associated with the	*//*			   projection (kind).				*//*									*//* ret_trans_parms   -out- Array of the values of the parameters for 	*//*			   this transformation.	This array must be	*//*			   freed by the caller.				*//*									*//* ret_trans_types   -out- Array of the datatypes of the parameters for	*//*			   this transformation.	This array must be	*//*			   freed by the caller.				*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ERROR		Getting the transformation has failed	       !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_get_trans2(GD_SPACE_TREE	space_tree_id,				    GD_SPACE		src_space_id,				    GD_SPACE		dest_space_id,				    TRANS_COORD_FUNC 	*ret_trans_func,				    GOTH_INTEGER	*ret_n_trans_parms,				    GOTH_DATATYPE	**ret_trans_types,				    GOTH_VALUE		**ret_trans_parms);/*----------------------------------------------------------------------*//* EXTERN space_get_named_trans						*//*......................................................................*//*..DESCRIPTION.........................................................*//* To retrieve the transformation routine, and all the required		*//* parameters from the source and destination space, and the		*//* transformation itself, for a transformation between two spaces.	*//*									*//* At the moment this routine only works for a direct connection (ie	*//* space_tree_id is ignored)						*//*									*//* This function is not available from LULL.				*//*..ARGUMENTS...........................................................*//*									*//* space_tree_id -in-	The space tree of connections between spaces.	*//*			(May be NULL if there is a direct connection)	*//*									*//* src_space_id  -in-	The source space.				*//*									*//* dest_space_id -in-	The destination space.				*//*									*//* trans_name	-in-	The name of the transformation (may be "")	*//*									*//* ret_trans_func    -out- The address of the transformation function	*//*			   that connects the source and destination	*//*			   space.					*//*									*//* ret_n_trans_parms -out- The number of parameters associated with the	*//*			   projection (kind).				*//*									*//* ret_trans_parms   -out- Array of the values of the parameters for 	*//*			   this transformation. READ ONLY array.	*//*									*//* ret_with_normalise -out- TRUE if transformation is between 		*//*			   normalised spaces				*//*									*//* ret_norm_data     -out- Array of the normalising data for the two 	*//*			   spaces. READ ONLY array			*//*									*//* ret_n_src_parms   -out- The number of parameters associated with the	*//*			   source space					*//*									*//* ret_src_parms     -out- Array of the values of the parameters for	*//*			   the source space. READ ONLY array.		*//*									*//* ret_n_dest_parms  -out- The number of parameters associated with the	*//*			   destination space				*//*									*//* ret_dest_parms    -out- Array of the values of the parameters for	*//*			   destination space. READ ONLY array.		*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ERROR		Getting the transformation has failed	       !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_get_named_trans(					 GD_SPACE_TREE	space_tree_id,					 GD_SPACE	src_space_id,					 GD_SPACE	dest_space_id,					 GOTH_STRING	trans_name,					 TRANS_COORD_FUNC *ret_trans_func,					 GOTH_INTEGER	*ret_n_trans_parms,					 GOTH_VALUE	**ret_trans_parms,					 GOTH_BOOLEAN	*ret_with_normalise,					 GOTH_REAL	**ret_norm_data,					 GOTH_INTEGER	*ret_n_src_parms,					 GOTH_VALUE	**ret_src_parms,					 GOTH_INTEGER	*ret_n_dest_parms,					 GOTH_VALUE	**ret_dest_parms );/*----------------------------------------------------------------------*//* EXTERN space_get_named_trans2					*//*......................................................................*//*..DESCRIPTION.........................................................*//* To retrieve the transformation routine, and all the required		*//* parameters from the source and destination space, and the		*//* transformation itself, for a transformation between two spaces.	*//*									*//* At the moment this routine only works for a direct connection (ie	*//* space_tree_id is ignored)						*//*									*//* This function is not available from LULL.				*//*..ARGUMENTS...........................................................*//*									*//* space_tree_id -in-	The space tree of connections between spaces.	*//*			(May be NULL if there is a direct connection)	*//*									*//* src_space_id  -in-	The source space.				*//*									*//* dest_space_id -in-	The destination space.				*//*									*//* trans_name	-in-	The name of the transformation (may be "")	*//*									*//* ret_trans_func    -out- The address of the transformation function	*//*			   that connects the source and destination	*//*			   space.					*//*									*//* ret_n_trans_parms -out- The number of parameters associated with the	*//*			   projection (kind).				*//*									*//* ret_trans_parms   -out- Array of the values of the parameters for 	*//*			   this transformation.	This array must be	*//*			   freed by the caller.				*//*									*//* ret_trans_types   -out- Array of the datatypes of the parameters for	*//*			   this transformation.	This array must be	*//*			   freed by the caller.				*//*									*//* ret_with_normalise -out- TRUE if transformation is between 		*//*			   normalised spaces				*//*									*//* ret_norm_data     -out- Array of the normalising data for the two 	*//*			   spaces. This array must be freed by the	*//*			   caller.					*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ERROR		Getting the transformation has failed	       !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_get_named_trans2(GD_SPACE_TREE	space_tree_id,					  GD_SPACE	src_space_id,					  GD_SPACE	dest_space_id,					  GOTH_STRING	trans_name,					  TRANS_COORD_FUNC *ret_trans_func,					  GOTH_INTEGER	*ret_n_trans_parms,					  GOTH_DATATYPE	**ret_trans_types,					  GOTH_VALUE	**ret_trans_parms,					  GOTH_BOOLEAN	*ret_with_normalise,					  GOTH_REAL	**ret_norm_data);/*----------------------------------------------------------------------*//* EXTERN space_solve_for_coeff						*//*......................................................................*//*..DESCRIPTION.........................................................*//* To solve a transformation (of a particular kind) given a set of	*//* coordinates in the source space and the destination space. 		*//*									*//* NOTE: the load function and the rescale function for the		*//*       transformation must have been registered with <<tranlib>>	*//*									*//*..ARGUMENTS...........................................................*//*									*//* trans_kind_name -in- Name of transformation kind to use		*//*									*//* obs_set_id 	   -in- Set of source and destination coordinates	*//*									*//* n_coeff 	  -out- Number of coefficients for this transformation	*//*									*//* coeff_array    -out-	+array+Array of returned coefficients		*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ENTITYNOTFOUND	Transformation kind not found in database. A	*//*			message has been put on message stack.		*//* GOTH__ERROR		The solution of the transformation has failed. !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_solve_for_coeff(					 GOTH_STRING	trans_kind_name,					 GD_OBSERVATION_SET obs_set_id,					 GOTH_INTEGER	*n_coeff,					 GOTH_VALUE	**coeff_array);/*----------------------------------------------------------------------*//* EXTERN space_obs_set_build						*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* To build a data structure to hold a set of observations, and a 	*//* GOTH_DESCRIPTOR to point at it					*//*									*//*..ARGUMENTS...........................................................*//*									*//* obs_set_id	-out-	The identifier for the set of observations	*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__NOVM		No virtual memory available for operation      	*//*									*//* GOTH__ERROR		Creating the set of observations has failed.   !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_obs_set_build(				       GD_OBSERVATION_SET	*obs_set_id);/*----------------------------------------------------------------------*//* EXTERN space_obs_set_destroy						*//*......................................................................*//*..DESCRIPTION.........................................................*//* To destroy a data structure that holds a set of observations, and	*//* to free the space of the GOTH_DESCRIPTOR that points to it		*//*									*//*..ARGUMENTS...........................................................*//*									*//* obs_set_id	-in-	The identifier for the observation set to 	*//*			destroy.					*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ERROR		Destroying the observation set has failed.     !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_obs_set_destroy(					 GD_OBSERVATION_SET	obs_set_id);/*----------------------------------------------------------------------*//* EXTERN space_obs_set_add_obs						*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* To add an observation (source space coordinate pair and destination	*//* space coordinate pair) to an <<observation set>>.			*//*..ARGUMENTS...........................................................*//*									*//* obs_set_id	-in-	Observation set to add observation to		*//* src_x	-in-	x coordinate of point in source space		*//* src_y	-in-	y coordinate of point in source space		*//* dest_x	-in-	x coordinate of point in destination space	*//* dest_y	-in-	y coordinate of point in destination space	*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__NOVM		No virtual memory available for operation	*//*									*//* GOTH__ERROR		Adding the space kind  has failed.	       !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_obs_set_add_obs(					 GD_OBSERVATION_SET	obs_set_id,					 GOTH_REAL		src_x,					 GOTH_REAL		src_y,					 GOTH_REAL		dest_x,					 GOTH_REAL		dest_y);/*----------------------------------------------------------------------*//* EXTERN space_obs_set_clear						*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* To return an <<observation set>> to the state it was in before it 	*//* was created (ie with no observations in it).				*//*									*//*..ARGUMENTS...........................................................*//*									*//* obs_set_id	-in-	Identifier for observation set to clear		*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ERROR		Clearing the observation set has failed.       !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_obs_set_clear(				      GD_OBSERVATION_SET	obs_set_id);/*----------------------------------------------------------------------*//* EXTERN space_add_trans_from_obs					*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* Routine to add a transformation to the `space-database', given a set	*//* of observations in both the input and output space.			*//*									*//*..ARGUMENTS...........................................................*//*									*//* trans_kind_name -in-	Name of transformation kind to use to connect	*//*			spaces.						*//* src_space_name  -in- Name of the source space			*//* dest_space_name -in- Name of the destination space			*//* obs_set_id	   -in- Set of observed points in source and destination*//*			space.						*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ERROR		Adding the transformation has failed.	       !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_add_trans_from_obs(				   GOTH_STRING		trans_kind_name,				   GOTH_STRING		src_space_name,				   GOTH_STRING		dest_space_name,			           GD_OBSERVATION_SET	obs_set_id);/*----------------------------------------------------------------------*//* EXTERN space_transform_circle					*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* To transform a circle (defined by centre and radius) from one space	*//* to another.								*//*									*//*..ARGUMENTS...........................................................*//*									*//* space_tree_id -in-	Tree of connections between spaces (may be 	*//*			<<NULL>>)					*//* src_space_id	-in-	Space that source data is in			*//* dest_space_id -in-	Space that data is required in			*//* x_in		-in-	x coordinate of centre of circle in source space*//* y_in		-in-	y coordinate of centre of circle in source space*//* radius_in	-in-	radius of circle in source space	      	*//*									*//* x_out	-out-	x coordinate of centre of circle in destination	*//*			space.						*//* y_out	-out-	y coordinate of centre of circle in destination	*//*			space.						*//* radius_out	-out-	radius of circle in destination space		*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ERROR		Transformation of circle has failed.	       !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_transform_circle(					  GD_SPACE_TREE	space_tree_id,					  GD_SPACE	src_space_id,					  GD_SPACE	dest_space_id,					  GOTH_REAL	x_in,					  GOTH_REAL	y_in,					  GOTH_REAL	radius_in,					  GOTH_REAL	*x_out,					  GOTH_REAL	*y_out,					  GOTH_REAL	*radius_out );/*>>> EXTERN functions from SPACE_TEST.C <<<*//*----------------------------------------------------------------------*//* EXTERN space_build_test	       					*//*......................................................................*//*..HIDE................................................................*//*..DESCRIPTION.........................................................*//* This is a routine written for testing <<spacelib>>. It is not for	*//* external use.							*//*..ARGUMENTS...........................................................*//* none								     	*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		usually						*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_build_test();/*----------------------------------------------------------------------*//* EXTERN space_execute_test	       					*//*......................................................................*//*..HIDE................................................................*//*..DESCRIPTION.........................................................*//* This is a routine written for testing <<spacelib>>. It is not for	*//* external use.							*//*..ARGUMENTS...........................................................*//* none								     	*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		usually						*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_execute_test( );/*----------------------------------------------------------------------*//* EXTERN space_tree_connect_test					*//*......................................................................*//*..HIDE................................................................*//*..DESCRIPTION.........................................................*//* This is a routine written for testing <<spacelib>>. It is not for	*//* external use.							*//*..ARGUMENTS...........................................................*//* none								     	*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_tree_connect_test(					   GOTH_DESCRIPTOR	stream_id,					   GOTH_DESCRIPTOR	tree_id,					   GOTH_DESCRIPTOR	space_1_id,					   GOTH_DESCRIPTOR	space_2_id);/*----------------------------------------------------------------------*//* EXTERN space_routes_print						*//*......................................................................*//*..HIDE................................................................*//*..DESCRIPTION.........................................................*//* This is a routine written for testing <<spacelib>>. It is not for	*//* external use.							*//*									*//*..ARGUMENTS...........................................................*//* not admitted								*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_routes_print(				      GOTH_DESCRIPTOR		stream_id,				      GD_SPACE_ROUTE_PLAN	route_plan_id);/*----------------------------------------------------------------------*//* EXTERN space_route_plan_print					*//*......................................................................*//*..HIDE................................................................*//*..DESCRIPTION.........................................................*//* This is a routine written for testing <<spacelib>>. It is not for	*//* external use.							*//*									*//*..ARGUMENTS...........................................................*//* not admitted								*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_route_plan_print(				      GOTH_DESCRIPTOR		stream_id,				      GD_SPACE_ROUTE_PLAN	route_plan_id);/*----------------------------------------------------------------------*//* EXTERN space_test_get_trans						*//*......................................................................*//*..HIDE................................................................*//*..DESCRIPTION.........................................................*//* This is a routine written for testing <<spacelib>>. It is not for	*//* external use.							*//*..ARGUMENTS...........................................................*//*									*//*									*//*..RETURN-CODES........................................................*//*									*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_test_get_trans(					GD_SPACE	src_space_id,					GD_SPACE	dest_space_id,					GOTH_STRING	trans_name);/*----------------------------------------------------------------------*//* EXTERN space_test_connections_to_space				*//*......................................................................*//*..HIDE................................................................*//*..DESCRIPTION.........................................................*//* This is a routine written for testing <<spacelib>>. It is not for	*//* external use.							*//*									*//*..ARGUMENTS...........................................................*//*									*//*									*//*..RETURN-CODES........................................................*//*									*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_test_connections_to_space(						   GOTH_DESCRIPTOR stream_id,						   GD_SPACE	space_id);/*>>> EXTERN functions from SPACE_STORAGE.C <<<*//*----------------------------------------------------------------------*//* EXTERN space_save       						*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* Routine to write out any modified or new space/transformation	*//* objects to the version used for holding this information.		*//* 									*//* Eventually, this write operation will be contained within a		*//* short transaction.							*//*									*//*..ARGUMENTS...........................................................*//*									*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ERROR		The save of the space data has failed.	       !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_save();/*----------------------------------------------------------------------*//* EXTERN space_set_save_mode						*//*......................................................................*//*..DESCRIPTION.........................................................*//* Routine to tell saves to be checkpointed, default action is not to   *//* checkpoint.								*//*..ARGUMENTS...........................................................*//* checkpoint -in- flag indicating if checkpointing to be used on saves *//*..RETURN-CODES........................................................*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_set_save_mode( GOTH_BOOLEAN  checkpoint );/*----------------------------------------------------------------------*//* EXTERN space_setup_schema						*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* Function used to create schema for holding space and transformation	*//* information.								*//* 									*//* The classes created are as follows:					*//*@    	space kind							*//*@ 	space								*//*@ 	transformation kind						*//*@ 	transformation							*//*@	parameter type							*//*@ 	parameter value							*//*									*//*..ARGUMENTS...........................................................*//*									*//* vac_id	-in-	Version to create space schema in		*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ERROR		The setup of the space schema has failed.      !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_setup_schema(				       GOTH_DESCRIPTOR	vac_id);/*----------------------------------------------------------------------*//* EXTERN space_initialise						*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* Routine to perform any SPACELIB initialisation operations which	*//* are required.							*//* 									*//* This routine attaches to the specified version, from which any	*//* space/transformation information which is required later by SPACELIB	*//* will be read.							*//*									*//*..ARGUMENTS...........................................................*//*									*//* version_name	-in-	Name of version to attach to.			*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ERROR		The initialisation of space has failed.	       !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_initialise(				    GOTH_STRING	version_name);/*----------------------------------------------------------------------*//* EXTERN space_shutdown						*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* Routine to perform shutdown operations for SPACELIB.			*//*									*//*..ARGUMENTS...........................................................*//*									*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ERROR		Shutting down operations on spaces has failed. !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_shutdown();/*----------------------------------------------------------------------*//* EXTERN space_get_version_name					*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* To return the name of the space version currently in use		*//*..ARGUMENTS...........................................................*//*									*//* version_name	-out-	The name of the version being used. This is a 	*//* 			copy that the caller must free after use.	*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH_NOVM		No virtual memory available for this operation	*//*									*//* GOTH__ERROR		Operation has failed.			       !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_get_version_name(					  GOTH_STRING	*version_name);/*----------------------------------------------------------------------*//* EXTERN space_fetch_connections_to_space				*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* To return all the spaces connected to a space, and their forward and	*//* backward transformations. Forward and backward transformations are	*//* paired if their names are the same, otherwise they are paired with a	*//* NULL transformation id.						*/ /*									*//* Lists of identifiers are returned by this routine (rather than names)*//* so that the cases of `named', `unnamed' and NULL transformations can	*//* be distinguished.							*//*									*//*..ARGUMENTS...........................................................*//*									*//* space_id	-in-	space that is of interest			*//* dest_space_list -out- list of connected space ids. This may contain	*//* 			dupplicates.					*//* f_trans_list	-out-	list of outward transformation ids. These should*//*			be unique, except for NULL transformations.	*//* b_trans_list	-out-	list of inward transformations. These correspond*//*			to the f_trans_list; corresponding entries being*//*			transformations with the same name.		*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ERROR		Operation has failed.			       !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//* COLNLIB		error messages from colnlib			*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_fetch_connections_to_space(					    GD_SPACE	space_id,					    GD_COLLECTION *dest_space_list,					    GD_COLLECTION *f_trans_list,					    GD_COLLECTION *b_trans_list);/*>>> EXTERN functions from SPACE_QUERY.C <<<*//*----------------------------------------------------------------------*//* EXTERN space_fetch_space_kind_by_space_name			        *//*......................................................................*//*..DESCRIPTION.........................................................*//* To retrieve the name of a space kind given the name of an instance   *//* of the space kind.                                                   *//*..ARGUMENTS...........................................................*//*									*//* space_name	   -in-	Name of space					*//*									*//* space_kind_name -out- Name of space kind of space_name		*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ERROR		Retrieval of space kind name has failed.       !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_fetch_space_kind_by_space_name(                                       GOTH_STRING       space_name,                                      GOTH_STRING      *space_kind_name );/*----------------------------------------------------------------------*//* EXTERN space_fetch_spaces_of_space_kind       		        *//*......................................................................*//*..DESCRIPTION.........................................................*//* To retrieve a list of the instances of the given space kind.         *//*									*//* If the space kind does not exists within the current			*//* `space-database', the list is returned as NULL. If the space kind 	*//* does exist but there are no instances of the spaces, an empty list 	*//* will be returned.  	                                                *//*..ARGUMENTS...........................................................*//*									*//* space_kind_name -in-	The name of the space kind sought.		*//*									*//* space_list 	  -out-	A list of all the spaces of the appropriate	*//*			kind that exist.				*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ERROR		The retrieval of the spaces has failed.	       !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_fetch_spaces_of_space_kind(                                       GOTH_STRING       space_kind_name,                                      GD_COLLECTION	*space_list );/*----------------------------------------------------------------------*//* EXTERN space_fetch_trans_kinds_of_space       		        *//*......................................................................*//*..DESCRIPTION.........................................................*//* To retrieve a list of the instances of the given trans kind connected.*//* to the given space instance.                                         *//*									*//* If the `trans_to_request' is set to TRUE, then the `trans kinds to'  *//* this space are returned, else the `trans kinds from' this space are  *//* returned in the list.                                                *//*									*//* If the space does not exist within the current space version,the list*//* descriptor is returned as NULL. If the space does exist but there are*//* no transformation instances connected to the space, an empty list    *//* will be returned.                                                    *//*..ARGUMENTS...........................................................*//*									*//* space_name	    -in- The name of the space.				*//*									*//* trans_to_request -in- If <<TRUE>> then get the transformation kinds	*//*			 that transform into this space.	       !*//*			 If <<FALSE>> then get the transformation kinds	*//* 			 that transform from this space.		*//*									*//* trans_kind_list -out- A list of the transformation kinds.	       !*//*			 If <<NULL>>, then the space does not exist.   !*//*			 If the list is empty, then there have been no	*//*			 transformations set up to/from this space.	*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ERROR		Retrieval of transformation kinds has failed.  !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_fetch_trans_kinds_of_space(                                       GOTH_STRING       space_name,                                      GOTH_BOOLEAN      trans_to_request,                                      GOTH_DESCRIPTOR  *trans_kind_list );/*----------------------------------------------------------------------*//* EXTERN space_fetch_spaces_connected_to_space       		        *//*......................................................................*//*..DESCRIPTION.........................................................*//* To retrieve a list of spaces connected to the given space by the     *//* given trans kind (in the direction given by the `trans_to_request'   *//* flag).                                                               *//*									*//* If the `trans_to_request' is set to TRUE, then the destination spaces*//* are returned, else the source spaces are returned in the list.       *//*									*//* If the space does not exist within the current space version, the	*//* list descriptor is returned as NULL. If the space does exist but 	*//* there are no space instances connected to the space, an empty list 	*//* will be returned.							*//*..ARGUMENTS...........................................................*//*									*//* space_name	    -in- The name of the space.				*//*									*//* trans_kind_name  -in- The kind of transformation of interest.	*//*									*//* trans_to_request -in- If <<TRUE>> then get the spaces that can be	*//*			 <<transformed to>> from the input space.      !*//*			 If <<FALSE>> then get the spaces that can be 	*//* 			 transformed into the current space.		*//* 									*//* space_list 	   -out- The returned list of spaces.		       !*//*			 If <<NULL>>, then the input space does not	*//*			 exist. 				       !*//*			 If the list is empty, then there have been no	*//*			 transformations set up to/from the input space.*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ERROR		Retrieval of spaces has failed.		       !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_fetch_spaces_connected_to_space(                                       GOTH_STRING       space_name,                                      GOTH_STRING       trans_kind_name,                                      GOTH_BOOLEAN      trans_to_request,                                      GOTH_DESCRIPTOR  *space_list );/*----------------------------------------------------------------------*//* EXTERN space_fetch_all_spaces_connected_to_space   		        *//*......................................................................*//*..DESCRIPTION.........................................................*//* To retrieve a list of spaces connected to the given space in the     *//* direction given by the `trans_to_request' flag.                      *//*									*//* If the `trans_to_request' is set to TRUE, then the destination spaces*//* are returned, else the source spaces are returned in the list.       *//*									*//* If the space does not exists within the current space version, the   *//* list descriptor is returned as NULL. If the space does exist but 	*//* there are no spaces instances connected to the space, an empty list	*//* will be returned.							*//*..ARGUMENTS...........................................................*//*									*//* space_name	    -in- The name of the space.				*//*									*//* trans_to_request -in- If <<TRUE>> then get the spaces that can be	*//*			 <<transformed to>> from the input space.      !*//*			 If <<FALSE>> then get the spaces that can be 	*//* 			 transformed into the current space.		*//* 									*//* space_list 	   -out- The returned list of spaces.		       !*//*			 If <<NULL>>, then the input space does not	*//*			 exist. 				       !*//*			 If the list is empty, then there have been no	*//*			 transformations set up to/from the input space.*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ERROR		Retrieval of spaces has failed.		       !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_fetch_all_spaces_connected_to_space(                                       GOTH_STRING       space_name,                                      GOTH_BOOLEAN      trans_to_request,                                      GOTH_DESCRIPTOR  *space_list );/*----------------------------------------------------------------------*//* EXTERN space_fetch_space_kinds					*//*......................................................................*//*..DESCRIPTION.........................................................*//* To retrieve a set of space-kind names known to the space database.   *//*									*//*..ARGUMENTS...........................................................*//*									*//* space_kind_set  -out- A set of all the space-kinds in the database	*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ERROR		The retrieval of the space-kinds has failed.   !*//*			An appropriate message has been put on the	*//*			message stack					*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_fetch_space_kinds( GD_COLLECTION *space_kind_set );/*>>> EXTERN functions from SPACE_TREE.C <<<*//*----------------------------------------------------------------------*//* EXTERN space_build_space_tree					*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* To build a descriptor that points to a space tree structure		*//*									*//*..ARGUMENTS...........................................................*//*									*//* sp_tree_id 	-out-	Identifier for the space tree that has been 	*//*			built.						*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__NOVM		No virtual memory available for this operation	*//*									*//* GOTH__ERROR		Building the space tree has failed.	       !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_build_space_tree(					  GD_SPACE_TREE *sp_tree_id);/*----------------------------------------------------------------------*//* EXTERN space_destroy_space_tree					*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* Function to destroy an entire space tree, and the descriptor that	*//* points to it								*//*									*//*..ARGUMENTS...........................................................*//*									*//* sp_tree_id -in-	The space tree to destroy.			*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ERROR		Destroying the space tree has failed.	       !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_destroy_space_tree(					    GD_SPACE_TREE	sp_tree_id);/*----------------------------------------------------------------------*//* EXTERN space_add_branch_to_tree					*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* To add a connection between spaces to a space tree			*//*									*//* If there are no branches in tree, add both leaves; otherwise		*//* and add the leaf that is not already there.				*//*									*//* Cannot add a branch if one leaf is not already there.	     	*//*									*//*..ARGUMENTS...........................................................*//*									*//* sp_tree_id 	-in-	Space tree to add connection to			*//* space_id_1	-in-	Space at one end of the connection		*//* space_id_2	-in-	Space at other end of connection		*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ERROR		Adding connections to  the space tree has 	*//*			failed.					       !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_add_branch_to_tree(					    GD_SPACE_TREE	sp_tree_id,					    GD_SPACE		space_id_1,					    GD_SPACE		space_id_2);/*----------------------------------------------------------------------*//* EXTERN space_add_named_branch_to_tree				*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* To add a connection between spaces to a space tree			*//*									*//* If there are no branches in tree, add both leaves; otherwise		*//* and add the leaf that is not already there.				*//*									*//* Cannot add a branch if one leaf is not already there.	     	*//*									*//*..ARGUMENTS...........................................................*//*									*//* sp_tree_id 	-in-	Space tree to add connection to			*//* space_id_1	-in-	Space at one end of the connection		*//* space_id_2	-in-	Space at other end of connection		*//* trans_1_to_2 -in-	Transformation from space 1 to space 2		*//* trans_2_to_1 -in-	Transformation from space 2 to space 1		*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ERROR		Adding connections to  the space tree has 	*//*			failed.					       !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_add_named_branch_to_tree(						  GD_SPACE_TREE	sp_tree_id,						  GD_SPACE	space_id_1,						  GD_SPACE	space_id_2,						  GD_TRANS	trans_1_to_2,						  GD_TRANS	trans_2_to_1);/*----------------------------------------------------------------------*//* EXTERN space_remove_leaf_from_tree					*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* To remove a space from a space tree (only possible if space is at	*//* a leaf)								*//*									*//*..ARGUMENTS...........................................................*//*									*//* sp_tree_id	-in-	Space tree to operate on			*//* space_id	-in-	Space to remove from space tree			*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ERROR		Removal of space from the space tree has 	*//*			failed.					       !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_remove_leaf_from_tree(					       GD_SPACE_TREE	sp_tree_id,					       GD_SPACE		space_id);/*----------------------------------------------------------------------*//* EXTERN space_get_connections						*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* To get an array of spaces representing the connection between spaces	*//* (not callable from LULL)						*//*									*//* This array contains the source space, intermediate spaces and the	*//* destination spaces.							*//*									*//*..ARGUMENTS...........................................................*//*									*//* sp_tree_id	-in-	Space tree to interrogate			*//* space_1_id	-in-	Source space					*//* space_2_id	-in-	Destination space				*//* array_size  -in/out- The number of elements in the array		*//* num_elements	-out-	The number of elements that are used in the	*//*			array.						*//* array	-out-	The array of spaces that link the source space	*//*			to the destination space.			*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ERROR		Retrieval of connections has failed.	       !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_get_connections(					 GD_SPACE_TREE		sp_tree_id,					 GD_SPACE		space_1_id,					 GD_SPACE		space_2_id,					 GOTH_INTEGER		*array_size,					 GOTH_INTEGER		*num_elements,					 GD_SPACE		*array[]);/*----------------------------------------------------------------------*//* EXTERN space_get_named_connections					*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* To get an array of spaces representing the connection between spaces	*//* (not callable from LULL)						*//*									*//* This array contains the source space, intermediate spaces and the	*//* destination spaces.							*//*									*//*..ARGUMENTS...........................................................*//*									*//* sp_tree_id	-in-	Space tree to interrogate			*//* space_1_id	-in-	Source space					*//* space_2_id	-in-	Destination space				*//* sp_array_size -in/out- The number of elements in the space array	*//* tr_array_size -in/out- The number of elements in the trans array	*//* num_elements	-out-	The number of elements that are used in the	*//*			arrays.						*//* sp_array	-out-	The array of spaces that link the source space	*//*			to the destination space.			*//* tr_array	-out-	The array of tranformations that link the 	*//*			source space to the destination space.  	*//*			tr_array[0], is transformation from sp_array[0]	*//*			to sp_array[1]. tr_array[num_elements - 1] is	*//*			NULL						*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ERROR		Retrieval of connections has failed.	       !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_get_named_connections(					       GD_SPACE_TREE	sp_tree_id,					       GD_SPACE		space_1_id,					       GD_SPACE		space_2_id,					       GOTH_INTEGER	*sp_array_size,					       GOTH_INTEGER	*tr_array_size,					       GOTH_INTEGER	*num_elements,					       GD_SPACE		*sp_array[],					       GD_TRANS		*tr_array[]);/*----------------------------------------------------------------------*//* EXTERN space_rebuild_tree						*//*......................................................................*//*..DESCRIPTION.........................................................*//* To rebuild a space tree given the starting point of a single space   *//* within that tree (all spaces, etc. stored in the database)           *//*									*//* This routine also returns a list of the spaces, and the		*//* transformations that connect them.				       !*//* When selecting the transformation to use between spaces, this 	*//* routine uses, by preference, unnamed transformations; where there	*//* none, it uses a named transformation at random.			*//*									*//*..ARGUMENTS...........................................................*//*									*//* space_name	    -in- The name of one space in the space tree that	*//*			 is to be built.				*//* space_tree	   -out- The complete space tree.			*//* space_list      -out- The list of spaces in the tree			*//* trans_kind_list -out- The list of transformation kinds that connect	*//*			 the spaces in the tree.			*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ERROR		Building the space tree has failed.	       !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_rebuild_tree( 				      GOTH_STRING    space_name,				      GD_SPACE_TREE  *space_tree,				      GD_COLLECTION  *space_list,				      GD_COLLECTION  *trans_kind_list );/*----------------------------------------------------------------------*//* EXTERN space_fetch_space_tree_path					*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* To get the conenctions between two nodes in a space tree.		*//* This routine returns lists of names of the spaces (including the	*//* source and destination ones). The number of elements in the lists	*//* of transformation names will be one less than the number in the list	*//* of spaces								*//*									*//*..ARGUMENTS...........................................................*//*									*//* space_tree_id    -in- the space tree to interrogate			*//* src_space_id	    -in- the space the path is to start from		*//* dest_space_id    -in- the space the path is to end at		*//* space_list_id   -out- a list of the names of the spaces in the path.	*//*			 This includes the source and destination space.*//* f_trans_list_id -out- a list of the names of the forward		*//*                       transformations between the spaces		*//* b_trans_list_id -out- a list of the names of the backward            *//*                       transformations between the spaces		*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ERROR		Building the space tree has failed.	       !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_fetch_space_tree_path(					       GD_SPACE_TREE	space_tree_id,					       GD_SPACE		src_space_id,					       GD_SPACE		dest_space_id,					       GD_COLLECTION	*space_list_id,					       GD_COLLECTION  *f_trans_list_id,					       GD_COLLECTION  *b_trans_list_id);/*----------------------------------------------------------------------*//* EXTERN space_fetch_space_tree_unique_path				*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* Routine to return a list of space names, a list of forward		*//* transformation names and a list of backward transformation names	*//* from a space that is a leaf in a space tree, to the farthest leaf in	*//* the tree. This routine will only work if there is only one possible	*//* route from the source space to the end of the tree.			*//*									*//*..ARGUMENTS...........................................................*//*									*//* space_tree_id    -in- the space tree to interrogate			*//* space_id	    -in- the space the path is to start from		*//* space_list_id   -out- a list of the names of the spaces in the path.	*//*			 This includes the source and destination space.*//* f_trans_list_id -out- a list of the names of the forward		*//*                       transformations between the spaces		*//* b_trans_list_id -out- a list of the names of the backward            *//*                       transformations between the spaces		*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__NOUNIQUEROOT	There is not a unique root through the space	*//*			tree.						*//*									*//* GOTH__NOTLEAF	The source space is not a leaf in the space tree*//* 									*//* GOTH__ERROR		Building the space tree has failed.	       !*//*			An appropriate message has been put on the	*//*			message stack					*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_fetch_space_tree_unique_path(					      GD_SPACE_TREE   space_tree_id,					      GD_SPACE	      space_id,					      GD_COLLECTION   *space_list_id,					      GD_COLLECTION   *f_trans_list_id,					      GD_COLLECTION   *b_trans_list_id);/*----------------------------------------------------------------------*//* EXTERN space_route_tree_to_string					*//*......................................................................*//*..DESCRIPTION.........................................................*//* Routine to convert the specified route-tree (a space-tree with no	*//* branches off the main trunk) to a string. The route is deemed to go	*//* from the specified space (which should be at one end of the route) 	*//* to the space at the other end. 					*//*..ARGUMENTS...........................................................*//* space_tree	-in-	identifier of space-tree			*//* src_space	-in-	identifier of space at start of route		*//* ret_route_str -out-	string representing the specified route		*//*..RETURN-CODES........................................................*//* GOTH__NORMAL		Normal, successful completion.			*//*----------------------------------------------------------------------*/extern GOTH_STATUS    space_route_tree_to_string(			      GD_SPACE_TREE	space_tree,			      GD_SPACE		src_space,			      GOTH_STRING	*ret_route_str );/*----------------------------------------------------------------------*//* EXTERN space_string_to_route_tree					*//*......................................................................*//*..DESCRIPTION.........................................................*//* Routine to build a space-tree that contains the route specified in 	*//* the supplied string. Such a string may have previously been 		*//* generated using the routine space_route_tree_to_string().		*//*..ARGUMENTS...........................................................*//* route_str 	-in-	string representing a route			*//* ret_space_tree_id -out-	identifier of space-tree holding route	*//*..RETURN-CODES........................................................*//* GOTH__NORMAL		Normal, successful completion.			*//*----------------------------------------------------------------------*/extern GOTH_STATUS    space_string_to_route_tree(			      GOTH_STRING	route_str,			      GD_SPACE_TREE	*ret_space_tree_id );/*>>> EXTERN functions from SPACE_MEASUREMENT.C <<<*//*----------------------------------------------------------------------*//* EXTERN space_add_measurement_set					*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* To create a named measurement set in the current space database 	*//* (only stored on a `space_save' command)				*//*									*//*..ARGUMENTS...........................................................*//*									*//* meas_set_name -in-	name of measurement set to create		*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__NOVM		No virtual memory available for this operation *//*									*//* GOTH__MEASSETEXISTS	A measurement set of this name already exists	*//*									*//* COLNLIB		Codes returned by COLNLIB			*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_add_measurement_set(					     GOTH_STRING	meas_set_name);/*----------------------------------------------------------------------*//* EXTERN space_get_measurement_set_name				*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* To get a measurement set name from a measurement set id		*//*									*//*..ARGUMENTS...........................................................*//*									*//* set_id	-in-	measurement set identifier			*//* ret_name	-out-	the returned name - a copy - the caller should	*//*			free the space when s/he is finished with it	*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__NOSUCHKEY	No measurement set with this id exists		*//*									*//* COLNLIB		Codes returned by COLNLIB			*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_get_measurement_set_name(						  GD_MEASUREMENT_SET set_id,						  GOTH_STRING	     *ret_name);/*----------------------------------------------------------------------*//* EXTERN space_remove_measurement_set					*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* To remove a measurement set from the space data base. The measurement*//* set will immediately be unavailable to the user, but will only be	*//* removed from the data base after a call to `space_save'		*//*									*//*..ARGUMENTS...........................................................*//*									*//* set_name	-in-	the measurement set to remove			*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__NOSUCHKEY	No measurement set of this name exists		*//*									*//* COLNLIB		Codes returned by COLNLIB			*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_remove_measurement_set(						GOTH_STRING	set_name);/*----------------------------------------------------------------------*//* EXTERN space_build_measurement_set					*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* to retrieve a measurement set from the data base, and to return a	*//* pointer to it							*//*									*//*..ARGUMENTS...........................................................*//*									*//* set_name	-in-	name of measurement set				*//*									*//* set_id	-out-	the pointer to the descriptor			*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__NOVM		No virtual memory available for this operation	*//*									*//* GOTH__NOSUCHKEY	No measurement set of this name exists		*//*									*//* COLNLIB		Codes returned by COLNLIB			*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_build_measurement_set(					       GOTH_STRING	set_name,					       GD_MEASUREMENT_SET *set_id);/*----------------------------------------------------------------------*//* EXTERN space_add_measurement_space					*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* to add a space to the measurement set				*//*									*//*..ARGUMENTS...........................................................*//*									*//* meas_set_id	-in-	the descriptor for the measurement set		*//*									*//* space_id	-in-	the descriptor for the space to add		*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__MEASSPACEEXISTS The measurement set already contains this	*//*			space						*//*									*//* COLNLIB		Codes returned by COLNLIB			*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_add_measurement_space(					    GD_MEASUREMENT_SET   meas_set_id,					    GD_SPACE		    space_id);/*----------------------------------------------------------------------*//* EXTERN space_remove_measurement_space				*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* To remove a space from a measurement set				*//*									*//*..ARGUMENTS...........................................................*//*									*//* meas_set_id	-in-	the descriptor for the measurement set		*//*									*//* space_id	-in-	the descriptor for the space			*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__MEASNOSPACE	The measurement set does not contain this space	*//*									*//* COLNLIB		Codes returned by COLNLIB			*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_remove_measurement_space(					     GD_MEASUREMENT_SET	meas_set_id,					     GD_SPACE		space_id);/*----------------------------------------------------------------------*//* EXTERN space_add_measurement						*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* To add a measurement to a measurement set.			       !*//* Note that a measurement is added to a measurement set with the	*//* verification flag and the defining flag both set to false and the	*//* weight for this measurement is set to 1.0				*//*									*//*..ARGUMENTS...........................................................*//*									*//* meas_set_id	-in-	the descriptor of the measurement set		*//*									*//* measure_name	-in-	the name of the measurement being added		*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__NOVM		No virtual memory available for this operation *//*									*//* GOTH__MEASMEASEXISTS	A measurement of this name already exists in	*//*			the measurement set.				*//*									*//* COLNLIB		Codes returned by COLNLIB			*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_add_measurement(					 GD_MEASUREMENT_SET	meas_set_id,					 GOTH_STRING		measure_name);/*----------------------------------------------------------------------*//* EXTERN space_get_measurement_id					*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* To get the identifier of a named measurement from a measurement set	*//*									*//*..ARGUMENTS...........................................................*//*									*//* meas_set_id	-in-	the descriptor of the measurement set		*//*									*//* measure_name	-in-	the name of the measurement			*//*									*//* meas_id	-out-	the unique identifier for the measurement	*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__MEASNOMEAS	The measurement set does not contain that	*//*			measurement					*//*									*//* COLNLIB		Codes returned by COLNLIB			*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_get_measurement_id(					    GD_MEASUREMENT_SET	meas_set_id,					    GOTH_STRING		measure_name,					    GOTH_ID		*meas_id);/*----------------------------------------------------------------------*//* EXTERN space_get_measurement_name					*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* Get the name of a measurement from its identifier			*//*									*//*..ARGUMENTS...........................................................*//*									*//* meas_set_id	-in-	the descriptor of the measurement set		*//*									*//* meas_id	-in-	the unique identifier for the measurement	*//*									*//* meas_name	-out-	the name of the measurement			*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__MEASNOMEAS	The measurement set does not contain that	*//*			measurement					*//*									*//* COLNLIB		Codes returned by COLNLIB			*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_get_measurement_name(					      GD_MEASUREMENT_SET   meas_set_id,					      GOTH_ID		   meas_id,					      GOTH_STRING	   *meas_name);/*----------------------------------------------------------------------*//* EXTERN space_remove_measurement					*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* to remove a measurement from a measurement set			*//*									*//*..ARGUMENTS...........................................................*//*									*//* meas_set_id	-in-	the descriptor of the measurement set		*//*									*//* meas_id	-in-	the unique identifier for the measurement to 	*//*			remove						*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__MEASNOMEAS	The measurement set does not contain that	*//*			measurement					*//*									*//* COLNLIB		Codes returned by COLNLIB			*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_remove_measurement(					    GD_MEASUREMENT_SET	meas_set_id,					    GOTH_ID		meas_id);/*----------------------------------------------------------------------*//* EXTERN space_set_measurement_point					*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* To set or remove the coordinates of a point from a space in a 	*//* measurement set.							*//*									*//*..ARGUMENTS...........................................................*//*									*//* meas_set_id	-in-	descriptor of measurement set			*//* meas_id	-in-	identifier of measurement to add point to	*//* space_id	-in-	descriptor of space that coordinates are in	*//* x		-in-	x-coord value					*//* y		-in-	y-coord value					*//* is_null	-in-	TRUE if adding point			       !*//*			FALSE when removing point			*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__MEASNOMEAS	The measurement set does not contain that	*//*			measurement					*//* 									*//* GOTH__MEASNOSPACE	The measurement set does not contain that	*//*			space						*//*									*//* COLNLIB		Codes returned by COLNLIB			*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_set_measurement_point(					       GD_MEASUREMENT_SET  meas_set_id,					       GOTH_ID		      meas_id,					       GD_SPACE		      space_id,					       GOTH_REAL	      x,					       GOTH_REAL	      y,					       GOTH_BOOLEAN	      is_null);/*----------------------------------------------------------------------*//* EXTERN space_get_measurement_point					*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* To retrieve the coordinates of a meaurement for a space in a		*//* measurement set							*//*									*//*..ARGUMENTS...........................................................*//*									*//* meas_set_id	-in-	descriptor of measurement set			*//* meas_id	-in-	identifier of measurement to retrieve		*//* space_id	-in-	descriptor of space that coordinates are in	*//* x		-out-	x-coord value					*//* y		-out-	y-coord value					*//* is_null	-out-	TRUE if  point exists			       !*//*			FALSE when point has not been added		*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__MEASNOMEAS	The measurement set does not contain that	*//*			measurement					*//* 									*//* GOTH__MEASNOSPACE	The measurement set does not contain that	*//*			space						*//*									*//* COLNLIB		Codes returned by COLNLIB			*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_get_measurement_point(					       GD_MEASUREMENT_SET  meas_set_id,					       GOTH_ID		      meas_id,					       GD_SPACE		      space_id,					       GOTH_REAL	      *x,					       GOTH_REAL	      *y,					       GOTH_BOOLEAN	      *is_null);/*----------------------------------------------------------------------*//* EXTERN space_set_measurement_defining_flag				*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* To set the defining flag for a measurement in a measurement set     !*//* This is set to TRUE when the measurement is to be used for		*//* calculating the transformation between spaces, and FALSE if it is	*//* not to be used							*//*									*//*..ARGUMENTS...........................................................*//*									*//* meas_set_id	-in-	the descriptor of the measurement set		*//* meas_id	-in-	the identifier for the measurement		*//* def_flag	-in-	the value to set the flag to			*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__MEASNOMEAS	The measurement set does not contain that	*//*			measurement					*//* 									*//* COLNLIB		Codes returned by COLNLIB			*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_set_measurement_defining_flag(					       GD_MEASUREMENT_SET  meas_set_id,					       GOTH_ID		      meas_id,					       GOTH_BOOLEAN	      def_flag);/*----------------------------------------------------------------------*//* EXTERN space_get_measurement_defining_flag				*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* To retrieve the defining flag for a measurement in a measurement set!*//* This is set to TRUE when the measurement is to be used for		*//* calculating the transformation between spaces, and FALSE if it is	*//* not to be used							*//*									*//*..ARGUMENTS...........................................................*//*									*//* meas_set_id	-in-	the descriptor of the measurement set		*//* meas_id	-in-	the identifier for the measurement		*//* def_flag	-out-	the value the flag is currently set to		*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__MEASNOMEAS	The measurement set does not contain that	*//*			measurement					*//* 									*//* COLNLIB		Codes returned by COLNLIB			*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_get_measurement_defining_flag(					       GD_MEASUREMENT_SET  meas_set_id,					       GOTH_ID		      meas_id,					       GOTH_BOOLEAN	     *def_flag);/*----------------------------------------------------------------------*//* EXTERN space_set_measurement_verification_flag			*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* To set the check flag for a measurement in a measurement set	     !*//* This is set to TRUE when the measurement is to be used for		*//* checking the transformation between spaces, and FALSE if it is	*//* not to be used							*//*									*//*..ARGUMENTS...........................................................*//*									*//* meas_set_id	-in-	the descriptor of the measurement set		*//* meas_id	-in-	the identifier for the measurement		*//* ver_flag	-in-	the value to set the flag to			*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__MEASNOMEAS	The measurement set does not contain that	*//*			measurement					*//* 									*//* COLNLIB		Codes returned by COLNLIB			*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_set_measurement_verification_flag(					       GD_MEASUREMENT_SET  meas_set_id,					       GOTH_ID		      meas_id,					       GOTH_BOOLEAN	      ver_flag);/*----------------------------------------------------------------------*//* EXTERN space_get_measurement_verification_flag			*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* To retrieve the verification flag for a measurement in a measurement	*//* set								       !*//* This is set to TRUE when the measurement is to be used for		*//* checking the transformation between spaces, and FALSE if it is	*//* not to be used							*//*									*//*..ARGUMENTS...........................................................*//*									*//* meas_set_id	-in-	the descriptor of the measurement set		*//* meas_id	-in-	the identifier for the measurement		*//* ver_flag	-out-	the value the flag is currently set to		*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__MEASNOMEAS	The measurement set does not contain that	*//*			measurement					*//* 									*//* COLNLIB		Codes returned by COLNLIB			*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_get_measurement_verification_flag(					       GD_MEASUREMENT_SET  meas_set_id,					       GOTH_ID		      meas_id,					       GOTH_BOOLEAN	     *ver_flag);/*----------------------------------------------------------------------*//* EXTERN space_get_measurement_space_details				*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* to get the spaces that a measurement set knows about			*//*									*//*..ARGUMENTS...........................................................*//*									*//* meas_set_id	-in-	the descriptor for the measurement set		*//* num_spaces	-out-	the number of spaces that have been added to	*//*			the measurement set				*//* space_id[]	-out-	an array of the descriptors of these spaces	*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__NOVM		No virtual memory available for this operation	*//* 									*//* COLNLIB		Codes returned by COLNLIB			*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_get_measurement_space_details(				       GD_MEASUREMENT_SET	meas_set_id,				       GOTH_INTEGER		*num_spaces,				       GD_SPACE			*space_id[]);/*----------------------------------------------------------------------*//* EXTERN space_get_measurement_details					*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* to get the identifiers of the measurements that have been added to a	*//* measurement set							*//*									*//*..ARGUMENTS...........................................................*//*									*//* meas_set_id	-in-	the descriptor for the measurement set		*//* num_measure	-out-	the number of measurements that have been added	*//*			 to the measurement set				*//* meas_id[]	-out-	an array of the identifiers of these		*//*			measurements					*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__NOVM		No virtual memory available for this operation	*//* 									*//* COLNLIB		Codes returned by COLNLIB			*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_get_measurement_details(				       GD_MEASUREMENT_SET	meas_set_id,				       GOTH_INTEGER		*num_measure,				       GOTH_ID			*meas_id[]);/*----------------------------------------------------------------------*//* EXTERN space_calculate_transformation				*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* To calculate the transformation between two spaces, using the 	*//* information held in a measurement set				*//*									*//*..ARGUMENTS...........................................................*//*									*//* meas_set_id	-in-	the descriptor of the measuement set		*//* trans_kind_id -in-	the descriptor of the kind of transformation to	*//*			calculate					*//* src_space_id	-in-	the descriptor of the source space		*//* dest_space_id -in-	the descriptor of the destination space		*//* num_param	-out-	the number of the parameters in the		*//*			transformation					*//* params	-out-	the values of the parameters. Note that when	*//* 		       	called from LULL these are generally <<real>>s	*//* with_normalise  -in-	Whether to normalise coordinates before		*//* 			transformation					*//*									*//* norm_data	-in-	The normalising data, when with_normalise is	*//*			TRUE.						*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ERROR		A load function has not been registered with	*//*			TRANLIB, for this transformation	       !*//*			or not enough coordinates in both spaces for	*//*			this transformation (message on stack)		*//* 									*//* COLNLIB		Codes returned by COLNLIB			*//* 									*//* MATRIXLIB		Codes returned by MATRIXLIB			*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_calculate_transformation(					  GD_MEASUREMENT_SET	meas_set_id,					  GD_TRANS_KIND	      	trans_kind_id,				          GD_SPACE		src_space_id,					  GD_SPACE		dest_space_id,					  GOTH_INTEGER		*num_param,					  GOTH_VALUE		*params[],					  GOTH_BOOLEAN		with_normalise,					  GOTH_REAL		*norm_data[]);/*----------------------------------------------------------------------*//* EXTERN space_calculate_fit						*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* To calculate the fit obtained for a transformation. This can either	*//* use the defining points or the verification points in the 		*//* measurement set. The formulae for working out the rms_error are:	*//*									*//*^^									*//* using verification points - rms = sqrt((sigma(dx*dx + dy*dy))/N)	*//*									*//* using defining points - rms = sqrt((sigma(dx*dx + dy*dy))/N * factor)*//*									*//* where factor = (2 * N)/(2 * N - P)					*//*       N is number of points						*//*       P is number of transform coefficient parameters		*//*       sigma is the summation from 1 - N				*//*^^									*//*..ARGUMENTS...........................................................*//*									*//* meas_set_id	  -in-	the descriptor of the measurements set		*//* src_space_id	  -in-	the descriptor of the source space		*//* dest_space_id  -in-	the descriptor of the destination space		*//* trans_kind_id  -in-	the descriptor of the kind of transformation	*//* n_params	  -in-	the number of parameters required by the	*//*			transformation kind				*//* params	  -in-	the parameters for the transformation		*//* with_normalise  -in-	Whether to normalise coordinates before		*//* 			transformation					*//*									*//* norm_data	-in-	The normalising data, when with_normalise is	*//*			TRUE.						*//* use_define_pts -in-	when TRUE, use the points used to define the	*//*			transformation				       !*//*			when FALSE, use the points maked as 		*//*			verification points in the measurement set	*//* rms_error	  -out-	the rms error of the vector residuals		*//* rms_x_error	  -out-	the rms error of all the residuals in x		*//* rms_y_error	  -out-	the rms error of all the residuals in y		*//* max_error	  -out-	the maximum vector error			*//* max_x_error	  -out-	the maximum error in x				*//* max_y_error	  -out-	the maximum error in y				*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__NOVM		No virtual memory available for this operation	*//* 									*//* GOTH__MEASNOSPACE	The measurement set does not contain one of the	*//*			source or destination spaces			*//*									*//* GOTH_ERROR		Error in transforming point - message on stack	*//*									*//* COLNLIB		Codes returned by COLNLIB			*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_calculate_fit(				       GD_MEASUREMENT_SET	meas_set_id,				       GD_SPACE			src_space_id,				       GD_SPACE			dest_space_id,				       GD_TRANS_KIND		trans_kind_id,				       GOTH_INTEGER		n_params,				       GOTH_VALUE		params[],				       GOTH_BOOLEAN		with_normalise,				       GOTH_REAL		norm_data[],				       GOTH_BOOLEAN		use_define_pts,				       GOTH_REAL		*rms_error,				       GOTH_REAL		*rms_x_error,				       GOTH_REAL		*rms_y_error,				       GOTH_REAL		*max_error,				       GOTH_REAL		*max_x_error,				       GOTH_REAL		*max_y_error);/*----------------------------------------------------------------------*//* EXTERN space_calculate_residual					*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* To calculate the error when a point in a measurement is transformed	*//*									*//*..ARGUMENTS...........................................................*//*									*//* meas_set_id	 -in-	descriptor of the measurement set 		*//* meas_id	 -in-	identifier of the measurement to calculate 	*//*			residual at					*//* src_space_id	 -in-	descriptor of source space			*//* dest_space_id -in-	descriptor of destination space			*//* trans_kind_id -in-	descriptor for kind of transformation		*//* n_params	 -in-	number of parameters used by transformation	*//* params[]	 -in-	the parameters to use				*//* with_normalise  -in-	Whether to normalise coordinates before		*//* 			transformation					*//*									*//* norm_data	-in-	The normalising data, when with_normalise is	*//*			TRUE.						*//* error	 -out-	the vector error (in destination space)		*//* x_error	 -out-	the error in x (in destination space)		*//* y_error	 -out-	the error in y  (in destination space)		*//* is_null	 -out-	if TRUE, then the point was not set in either	*//*			the source or destination space		       !*//*			if FALSE, then the errors are valid		*//*									*//*..RETURN-CODES........................................................*//*									*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__NOVM		No virtual memory available for this operation	*//* 									*//* GOTH__MEASNOMEAS	The measurement set does not contain the 	*//*			measurement referred to				*//* 									*//* GOTH__MEASNOSPACE	The measurement set does not contain one of the	*//*			source or destination spaces			*//*									*//* GOTH_ERROR		Error in transforming point - message on stack	*//*									*//* COLNLIB		Codes returned by COLNLIB			*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_calculate_residual(					    GD_MEASUREMENT_SET	meas_set_id,					    GOTH_ID		meas_id,					    GD_SPACE		src_space_id,					    GD_SPACE		dest_space_id,					    GD_TRANS_KIND	trans_kind_id,					    GOTH_INTEGER	n_params,					    GOTH_VALUE		params[],					    GOTH_BOOLEAN	with_normalise,					    GOTH_REAL		norm_data[],					    GOTH_REAL		*error,					    GOTH_REAL		*x_error,					    GOTH_REAL		*y_error,					    GOTH_BOOLEAN	*is_null);/*----------------------------------------------------------------------*//* EXTERN space_calculate_indirect_transformation			*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* To calculate the transformation between two spaces, using the 	*//* information held in a measurement set which refers to two different	*//* spaces.								*//*									*//*..ARGUMENTS...........................................................*//*									*//* meas_set_id	-in-	the descriptor of the measuement set		*//* trans_kind_id -in-	the descriptor of the kind of transformation to	*//*			calculate					*//* src_space_id	-in-	the descriptor of the source space in the	*//*			measurement set					*//* src_fit_space_id -in- the descriptor of the source space to be	*//*			 fitted.					*//* src_space_tree_id -in- the descriptor of the space tree that		*//* 			contains the above two spaces			*//* dest_space_id -in-	the descriptor of the destination space in the	*//* 		     	measurement set					*//* dest_fit_space_id -in- the descriptor of the destination space to be	*//*			 fitted.					*//* dest_space_tree_id -in- the descriptor of the space tree that	*//* 			contains the above two spaces			*//* num_param	-out-	the number of the parameters in the		*//*			transformation					*//* params	-out-	the values of the parameters. Note that when	*//* 		       	called from LULL these are generally <<real>>s	*//* with_normalise  -in-	Whether to normalise coordinates before		*//* 			transformation					*//*									*//* norm_data	-in-	The normalising data, when with_normalise is	*//*			TRUE.						*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ERROR		A load function has not been registered with	*//*			TRANLIB, for this transformation	       !*//*			or not enough coordinates in both spaces for	*//*			this transformation (message on stack)		*//* 									*//* COLNLIB		Codes returned by COLNLIB			*//* 									*//* MATRIXLIB		Codes returned by MATRIXLIB			*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_calculate_indirect_transformation(				   GD_MEASUREMENT_SET	meas_set_id,				   GD_TRANS_KIND	trans_kind_id,				   GD_SPACE		src_space_id,				   GD_SPACE		src_fit_space_id,				   GD_SPACE_TREE	src_space_tree_id,				   GD_SPACE		dest_space_id,				   GD_SPACE		dest_fit_space_id,				   GD_SPACE_TREE	dest_space_tree_id,				   GOTH_INTEGER		*num_param,				   GOTH_VALUE		*params[],				   GOTH_BOOLEAN		with_normalise,				   GOTH_REAL		*norm_data[]);/*----------------------------------------------------------------------*//* EXTERN space_calculate_indirect_fit					*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* To calculate the fit obtained for an indirect transformation. This	*//* can either use the defining points or the verification points in the *//* measurement set. The formulae for working out the rms_error are:	*//*									*//*^^									*//* using verification points - rms = sqrt((sigma(dx*dx + dy*dy))/N)	*//*									*//* using defining points - rms = sqrt((sigma(dx*dx + dy*dy))/N * factor)*//*									*//* where factor = (2 * N)/(2 * N - P)					*//*       N is number of points						*//*       P is number of transform coefficient parameters		*//*       sigma is the summation from 1 - N				*//*^^									*//*..ARGUMENTS...........................................................*//*									*//* meas_set_id	  -in-	the descriptor of the measurements set		*//* src_space_id	  -in-	the descriptor of the source space in the	*//*			measurement set					*//* src_fit_space_id -in- the descriptor of the source space to be	*//*			 fitted.					*//* src_space_tree_id -in- the descriptor of the space tree that		*//* 			contains the above two spaces			*//* dest_space_id -in-	the descriptor of the destination space in the	*//* 		     	measurement set					*//* dest_fit_space_id -in- the descriptor of the destination space to be	*//*			 fitted.					*//* dest_space_tree_id -in- the descriptor of the space tree that	*//* 			contains the above two spaces			*//* trans_kind_id  -in-	the descriptor of the kind of transformation	*//* n_params	  -in-	the number of parameters required by the	*//*			transformation kind				*//* params	  -in-	the parameters for the transformation		*//* with_normalise  -in-	Whether to normalise coordinates before		*//* 			transformation					*//*									*//* norm_data	-in-	The normalising data, when with_normalise is	*//*			TRUE.						*//* use_define_pts -in-	when TRUE, use the points used to define the	*//*			transformation				       !*//*			when FALSE, use the points maked as 		*//*			verification points in the measurement set	*//* rms_error	  -out-	the rms error of the vector residuals		*//* rms_x_error	  -out-	the rms error of all the residuals in x		*//* rms_y_error	  -out-	the rms error of all the residuals in y		*//* max_error	  -out-	the maximum vector error			*//* max_x_error	  -out-	the maximum error in x				*//* max_y_error	  -out-	the maximum error in y				*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__NOVM		No virtual memory available for this operation	*//* 									*//* GOTH__MEASNOSPACE	The measurement set does not contain one of the	*//*			source or destination spaces			*//*									*//* GOTH_ERROR		Error in transforming point - message on stack	*//*									*//* COLNLIB		Codes returned by COLNLIB			*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_calculate_indirect_fit(				GD_MEASUREMENT_SET	meas_set_id,				GD_SPACE		src_space_id,				GD_SPACE		src_fit_space_id,				GD_SPACE_TREE		src_space_tree_id,				GD_SPACE		dest_space_id,				GD_SPACE		dest_fit_space_id,				GD_SPACE_TREE		dest_space_tree_id,				GD_TRANS_KIND		trans_kind_id,				GOTH_INTEGER		n_params,				GOTH_VALUE		params[],				GOTH_BOOLEAN		with_normalise,				GOTH_REAL		norm_data[],				GOTH_BOOLEAN		use_define_pts,				GOTH_REAL		*rms_error,				GOTH_REAL		*rms_x_error,				GOTH_REAL		*rms_y_error,				GOTH_REAL		*max_error,				GOTH_REAL		*max_x_error,				GOTH_REAL		*max_y_error);/*----------------------------------------------------------------------*//* EXTERN space_calculate_indirect_residual				*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* To calculate the error when a point in a measurement set is		*//* via an indirect transformation					*//*									*//*..ARGUMENTS...........................................................*//*									*//* meas_set_id	 -in-	descriptor of the measurement set 		*//* meas_id	 -in-	identifier of the measurement to calculate 	*//*			residual at					*//* src_space_id	  -in-	the descriptor of the source space in the	*//*			measurement set					*//* src_fit_space_id -in- the descriptor of the source space to be	*//*			 fitted.					*//* src_space_tree_id -in- the descriptor of the space tree that		*//* 			contains the above two spaces			*//* dest_space_id -in-	the descriptor of the destination space in the	*//* 		     	measurement set					*//* dest_fit_space_id -in- the descriptor of the destination space to be	*//*			 fitted.					*//* dest_space_tree_id -in- the descriptor of the space tree that	*//* 			contains the above two spaces			*//* trans_kind_id -in-	descriptor for kind of transformation		*//* n_params	 -in-	number of parameters used by transformation	*//* params[]	 -in-	the parameters to use				*//* with_normalise  -in-	Whether to normalise coordinates before		*//* 			transformation					*//*									*//* norm_data	-in-	The normalising data, when with_normalise is	*//*			TRUE.						*//* error	 -out-	the vector error (in destination space)		*//* x_error	 -out-	the error in x (in destination space)		*//* y_error	 -out-	the error in y  (in destination space)		*//* is_null	 -out-	if TRUE, then the point was not set in either	*//*			the source or destination space		       !*//*			if FALSE, then the errors are valid		*//*									*//*..RETURN-CODES........................................................*//*									*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__NOVM		No virtual memory available for this operation	*//* 									*//* GOTH__MEASNOMEAS	The measurement set does not contain the 	*//*			measurement referred to				*//* 									*//* GOTH__MEASNOSPACE	The measurement set does not contain one of the	*//*			source or destination spaces			*//*									*//* GOTH_ERROR		Error in transforming point - message on stack	*//*									*//* COLNLIB		Codes returned by COLNLIB			*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_calculate_indirect_residual(				     GD_MEASUREMENT_SET	meas_set_id,				     GOTH_ID		meas_id,				     GD_SPACE		src_space_id,				     GD_SPACE		src_fit_space_id,				     GD_SPACE_TREE	src_space_tree_id,				     GD_SPACE		dest_space_id,				     GD_SPACE		dest_fit_space_id,				     GD_SPACE_TREE	dest_space_tree_id,				     GD_TRANS_KIND	trans_kind_id,				     GOTH_INTEGER	n_params,				     GOTH_VALUE		params[],				     GOTH_BOOLEAN	with_normalise,				     GOTH_REAL		norm_data[],				     GOTH_REAL		*error,				     GOTH_REAL		*x_error,				     GOTH_REAL		*y_error,				     GOTH_BOOLEAN	*is_null);/*----------------------------------------------------------------------*//* EXTERN space_set_measurement_weight					*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* To set the weight for a measurement in a measurement set	        *//*									*//*..ARGUMENTS...........................................................*//*									*//* meas_set_id	-in-	the descriptor of the measurement set		*//* meas_id	-in-	the identifier for the measurement		*//* meas_weight	-in-	the value of the weight to set			*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__MEASNOMEAS	The measurement set does not contain that	*//*			measurement					*//* 									*//* COLNLIB		Codes returned by COLNLIB			*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_set_measurement_weight(					GD_MEASUREMENT_SET	meas_set_id,					GOTH_ID		       	meas_id,					GOTH_REAL	 	meas_weight);/*----------------------------------------------------------------------*//* EXTERN space_get_measurement_weight					*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* To retrieve the weight for a measurement in a measurement set	*//*									*//*..ARGUMENTS...........................................................*//*									*//* meas_set_id	-in-	the descriptor of the measurement set		*//* meas_id	-in-	the identifier for the measurement		*//* meas_weight	-out-	the value the weight is currently set to	*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__MEASNOMEAS	The measurement set does not contain that	*//*			measurement					*//* 									*//* COLNLIB		Codes returned by COLNLIB			*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_get_measurement_weight(					       GD_MEASUREMENT_SET meas_set_id,					       GOTH_ID		  meas_id,					       GOTH_REAL	  *meas_weight);/*----------------------------------------------------------------------*//* EXTERN space_fetch_measurement_set_names				*//*......................................................................*//*..DESCRIPTION.........................................................*//* To retrieve a set of measurement set  names known to the space	*//* database.								*//*									*//*..ARGUMENTS...........................................................*//*									*//* meas_names_set  -out- A set of all the names of the measurement set	*//* 			 names in the database			       	*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__ERROR		The retrieval of the measurement sets has	*//*		       	failed.					       !*//*			An appropriate message has been put on the	*//*			message stack					*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_fetch_measurement_set_names(					     GD_COLLECTION *meas_names_set );/*----------------------------------------------------------------------*//* EXTERN space_copy_measurement_set					*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* To copy a measurement set						*//*..ARGUMENTS...........................................................*//*									*//* source_set_name -in- the name of the source measurement set		*//* dest_set_name   -in-	the name of the new measurement set		*//*									*//*..RETURN-CODES........................................................*//*									*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_measurement_set_copy(					      GOTH_STRING source_set_name,					      GOTH_STRING dest_set_name);/*>>> EXTERN functions from SPACE_ROUTE.C <<<*//*----------------------------------------------------------------------*//* EXTERN space_build_route_plan					*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* Routine to build a data structure to represent the possible routes	*//* betweemn two spaces.							*//*									*//* Note that if the space database is altered, this route plan will not	*//* necessarily still be valid.						*//*..ARGUMENTS...........................................................*//*									*//* route_plan_id  -out-	descriptor of the route plan			*//* src_space_id	  -in-	the space that the route is to start from	*//* dest_space_id  -in-	the target for the route			*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__NOVM		No virtual memory available for this operation	*//*									*//* COLNLIB		Codes returned by COLNLIB			*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_build_route_plan(					  GD_SPACE_ROUTE_PLAN	*route_plan_id,					  GD_SPACE		src_space_id,					  GD_SPACE		dest_space_id);/*----------------------------------------------------------------------*//* EXTERN space_destroy_route_plan					*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* to free the space taken up by a route plan, and free the space taken	*//* up by its descriptor							*//*									*//*..ARGUMENTS...........................................................*//*									*//* route_plan_id  -in-	descriptor of route plan to be freed		*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_destroy_route_plan(					    GD_SPACE_ROUTE_PLAN	route_plan_id);/*----------------------------------------------------------------------*//* EXTERN space_get_route_details					*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* Routine to determine if there is any connection between the terminal	*//* spaces in a route plan, and if the connection is unique		*//*									*//*..ARGUMENTS...........................................................*//*									*//* route_plan_id  -in-	the route plan to interrogate			*//* route_exists	  -out-	TRUE if a route exists				*//* unique_route	  -out-	TRUE if there is only one possible route	*//*			between terminal spaces in the route		*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_get_route_details(					   GD_SPACE_ROUTE_PLAN	route_plan_id,					   GOTH_BOOLEAN		*route_exists,					   GOTH_BOOLEAN		*unique_route);/*----------------------------------------------------------------------*//* EXTERN space_get_route_alternatives					*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* Routine to get the alternative routes at any point in a		*//* space_route_plan							*//*									*//*..ARGUMENTS...........................................................*//*									*//* route_plan_id	-in-	the route plan being interrogated	*//* route_so_far		-in-	a set of space_id's already in the	*//*				route					*//* intermediate_space_id -in-	the current space of interest. The 	*//*				alternative routes from this space will	*//*				be returned				*//* num_alternatives	-out-	the number of possible alternatives	*//* forward_trans_id	-out-	+array+ forward transformations from	*//*				intermediate_space_id			*//* backward_trans_id	-out-	+array+ backward transformations from	*//*				intermediate_space_id. These may be	*//*				NULL.					*//* space_id		-out-	+array+ possible destination spaces	*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//* 									*//* GOTH__NOVM		No virtual memory available for this operation	*//*									*//* COLNLIB		Codes returned by COLNLIB			*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS space_get_route_alternatives(				       GD_SPACE_ROUTE_PLAN	route_plan_id,				       GD_COLLECTION	route_so_far,				       GD_SPACE		intermediate_space_id,				       GOTH_INTEGER	*num_alternatives,				       GD_TRANS		*forward_trans_id[],				       GD_TRANS		*backward_trans_id[],				       GD_SPACE		*space_id[]);#endif