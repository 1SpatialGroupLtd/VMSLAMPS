/*
 * This file is part of the LAMPS distribution, released as a software
 * preservation project to archive digital history for future historians.
 * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
 *
 * Timestamp of this file for the 2002 release was: 1995-03-23 18:53:18.000000000 +0000
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 */
#ifndef _GEN_DEFNS#define _GEN_DEFNS/* $Header: /lslhome/gothic/hdr/genlib/v1-8/RCS/hdr.gen_defns.h,v 1.9 1994/09/08 06:07:44 euanc Exp $                                                              *//*                                                                      *//* $Log: hdr.gen_defns.h,v $ * Revision 1.9  1994/09/08  06:07:44  euanc * Version v1-8 derived from v1-7 * See Gothic WICC 311 * Add generic sizeof call backs * Change copy and delete generic functions to make them ignore NULL pointers * for descriptors rather than return an error. * Frozen prior to VTRAK system tests. * * Revision 1.8  1994/02/16  19:37:38  jon * Version v1-7 derived from v1-6 * See Gothic WICC 234. * * Add routines to test whether callbacks are registered for given * descriptor types. Added `gen_check_destroy_registered()' and * `gen_check_copy_registered()'. * * Revision 1.7  1993/01/15  16:27:17  snail * Version v1-6 derived from v1-5 * Extracted to add routines for generic changing of cursor to a custom cursor * independent of MMILIB. * * Revision 1.6  1992/12/03  17:21:57  snail * Version v1-5 derived from v1-4 * Extracted to allow addition of functions for the decoupling of libraries from * GENFLIB. * * Revision 1.5  1992/11/30  12:51:51  snail * Version v1-4 derived from v1-3 * Extracted to add a function to allow a descriptor type to return a widget * id for parenting an interface, such as a GENF form. * * Revision 1.4  1992/10/08  09:53:04  davidm * Version v1-3 derived from v1-2 * Make generic printf do a ``printf'' if no print functions are registered. * This allow progs to use genlib without the need to register special functions. * * Revision 1.3  1992/07/13  16:24:55  adrian * Version v1-2 derived from v1-1 * Introduced gen_register_copy() and gen_generic_copy() to enable generic * copying/duplication of descriptors. * * Revision 1.2  1992/05/29  10:20:12  adrian * Version v1-1 derived from v1-0 * Introduce a generic function to return the `name' of a descriptor; this * is to be used inside UESLIB when storing descriptors. * * Revision 1.1  1992/03/16  22:14:03  jon * Version v1-0 derived from root * Version containing `test' alternative from old system *                                                              */typedef void *Widget;/************************************************************************//* Copyright Laser-Scan Ltd, Cambridge CB4 4FY, England                 *//* Author    Stephen Kellett, 17-Jul-1991                               *//************************************************************************//************************************************************************//*                                                                      *//*                         G E N _ D E F N S                            *//*                                                                      *//* Part of GOTHIC module GENLIB                                         *//* Version 0.1, Stephen Kellett 17-Jul-1991                             *//*......................................................................*//* Type definitions for generic functions. The actual routines for      *//* registering and executing the generic functions are in generic.c     *//************************************************************************//*----------------------------------------------------------------------*//* TYPE FUNC G_NAME_FUNC                                                *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* This routine is used to fetch the name of a descriptor               *//*                                                                      *//*..ARGUMENTS...........................................................*//*                                                                      *//* descriptor_arg       -       Descriptor to fetch menubar from.       *//* user_arg_arg         -       User argument.                          *//* *ret_name            -       name fetched.                           *//*----------------------------------------------------------------------*//* begin-def */typedef GOTH_STATUS (*G_NAME_FUNC)(GOTH_DESCRIPTOR      descriptor_arg,                                   VOID_P               user_arg_arg,                                   GOTH_STRING          *ret_name );/* end-def *//*----------------------------------------------------------------------*//* TYPE FUNC G_MENUBAR_FUNC                                             *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* This routine is used to fetch the menubar id of an interface.        *//*                                                                      *//*..ARGUMENTS...........................................................*//*                                                                      *//* descriptor_arg       -       Descriptor to fetch menubar from.       *//* user_arg_arg         -       User argument.                          *//* *menubar_id_arg      -       Menubar id fetched.                     *//*----------------------------------------------------------------------*//* begin-def */typedef GOTH_STATUS (*G_MENUBAR_FUNC)(GOTH_DESCRIPTOR   descriptor_arg,                                      VOID_P            user_arg_arg,                                      Widget            *menubar_id_arg);/* end-def *//*----------------------------------------------------------------------*//* TYPE FUNC G_TOPLEVEL_FUNC                                            *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* This routine is used to fetch the toplevel widget id of an interface.*//*                                                                      *//*..ARGUMENTS...........................................................*//*                                                                      *//* descriptor_arg       -       Descriptor to fetch toplevel id from.   *//* user_arg_arg         -       User argument.                          *//* *toplevel_id_arg     -       Top level id fetched.                   *//*----------------------------------------------------------------------*//* begin-def */typedef GOTH_STATUS (*G_TOPLEVEL_FUNC)(GOTH_DESCRIPTOR  descriptor_arg,                                       VOID_P           user_arg_arg,                                       Widget           *toplevel_id_arg);/* end-def *//*----------------------------------------------------------------------*//* TYPE FUNC G_PRINTF_FUNC                                              *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* This routine is used to print a message on an interface.             *//*                                                                      *//*..ARGUMENTS...........................................................*//*                                                                      *//* descriptor_arg       -       Descriptor to fetch menubar from.       *//* user_arg_arg         -       User argument.                          *//* message_arg          -       Message to print.                       *//*----------------------------------------------------------------------*//* begin-def */typedef GOTH_STATUS (*G_PRINTF_FUNC)(GOTH_DESCRIPTOR    descriptor_arg,                                     VOID_P             user_arg_arg,                                     GOTH_STRING        message_arg);/* end-def *//*----------------------------------------------------------------------*//* TYPE FUNC G_POPUP_FUNC                                               *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* This routine is used to fetch the popup menu area id for an          *//* interface.                                                           *//*                                                                      *//*..ARGUMENTS...........................................................*//*                                                                      *//* descriptor_arg       -       Descriptor to fetch menubar from.       *//* user_arg_arg         -       User argument.                          *//* *popup_id_arg        -       Popup area id.                          *//*----------------------------------------------------------------------*//* begin-def */typedef GOTH_STATUS (*G_POPUP_FUNC)(GOTH_DESCRIPTOR     descriptor_arg,                                    VOID_P              user_arg_arg,                                    Widget              *popup_id_arg);/* end-def *//*----------------------------------------------------------------------*//* TYPE FUNC G_BLOCKING_FUNC                                            *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* This routine is used to fetch the blocking context for an            *//* interface.                                                           *//*                                                                      *//*..ARGUMENTS...........................................................*//*                                                                      *//* descriptor_arg               -       Descriptor to fetch blocking    *//*                                      context from.                   *//* user_arg_arg                 -       User argument.                  *//* *blocking_context_arg        -       Blocking context fetched.       *//*----------------------------------------------------------------------*//* begin-def */typedef GOTH_STATUS (*G_BLOCKING_FUNC)(GOTH_DESCRIPTOR  descriptor_arg,                                       VOID_P           user_arg_arg,                                       GOTH_DESCRIPTOR  *blocking_context_arg);/* end-def *//*----------------------------------------------------------------------*//* TYPE FUNC G_DO_BLOCKING_FUNC                                         *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* This routine is used to perform a blocking interaction for an        *//* interface.                                                           *//*                                                                      *//*..ARGUMENTS...........................................................*//*                                                                      *//* descriptor_arg       -       Descriptor to do blocking interaction   *//*                              for.                                    *//* user_arg_arg         -       User argument.                          *//* parent_bc_ptr_arg    -       Parent blocking context.                *//* *ret_code_arg        -       Return code from interaction.           *//*----------------------------------------------------------------------*//* begin-def */typedef GOTH_STATUS (*G_DO_BLOCKING_FUNC)(GOTH_DESCRIPTOR       descriptor_arg,                                          VOID_P                user_arg_arg,                                          GOTH_DESCRIPTOR    parent_bc_ptr_arg,                                          GOTH_INTEGER          *ret_code_arg);/* end-def *//*----------------------------------------------------------------------*//* TYPE FUNC G_MAKE_VISIBLE_FUNC                                        *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* This routine is used to start or end a non-blocking interaction for  *//* an interface.                                                        *//*                                                                      *//*..ARGUMENTS...........................................................*//*                                                                      *//* descriptor_arg       -       Descriptor to do non-blocking           *//*                              interaction for.                        *//* user_arg_arg         -       User argument.                          *//* parent_bc_ptr_arg    -       Parent blocking context.                *//* visible_arg          -       TRUE to start interaction.             !*//*                              FALSE to end interaction.               *//*----------------------------------------------------------------------*//* begin-def */typedef GOTH_STATUS (*G_MAKE_VISIBLE_FUNC)(GOTH_DESCRIPTOR      descriptor_arg,                                           VOID_P               user_arg_arg,                                          GOTH_DESCRIPTOR    parent_bc_ptr_arg,                                           GOTH_BOOLEAN         visible_arg);/* end-def *//*----------------------------------------------------------------------*//* TYPE FUNC G_VERIFY_FUNC                                              *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* This routine is used to verify the data on an interface.             *//*                                                                      *//*..ARGUMENTS...........................................................*//*                                                                      *//* descriptor_arg       -       Descriptor to do verification for.      *//* user_arg_arg         -       User argument.                          *//* *data_ok_arg         -       TRUE if data is OK.                    !*//*                              FALSE if data did not verify OK.        *//*----------------------------------------------------------------------*//* begin-def */typedef GOTH_STATUS (*G_VERIFY_FUNC)(GOTH_DESCRIPTOR    descriptor_arg,                                     VOID_P             user_arg_arg,                                     GOTH_BOOLEAN       *data_ok_arg);/* end-def *//*----------------------------------------------------------------------*//* TYPE FUNC G_POSITION_FUNC                                            *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* This routine is used to position an interface.                       *//*                                                                      *//*..ARGUMENTS...........................................................*//*                                                                      *//* descriptor_arg       -       Descriptor to do positioning for.       *//* user_arg_arg         -       User argument.                          *//* placement_arg        -       Method of placing an interface.         *//* x_arg                -       X argument of position.                 *//* y_arg                -       Y argument of position.                 *//*----------------------------------------------------------------------*//* begin-def */typedef GOTH_STATUS (*G_POSITION_FUNC)(GOTH_DESCRIPTOR  descriptor_arg,                                       VOID_P           user_arg_arg,                                       GOTH_INTEGER     placement_arg,                                       GOTH_INTEGER     x_arg,                                       GOTH_INTEGER     y_arg);/* end-def *//*----------------------------------------------------------------------*//* TYPE FUNC G_SET_DATA_FUNC                                            *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* This routine is used to set data in an interface.                    *//*                                                                      *//*..ARGUMENTS...........................................................*//*                                                                      *//* descriptor_arg       -       Descriptor to set data in.              *//* user_arg_arg         -       User argument.                          *//* data_arg             -       Data to set in interface.               *//*----------------------------------------------------------------------*//* begin-def */typedef GOTH_STATUS (*G_SET_DATA_FUNC)(GOTH_DESCRIPTOR  descriptor_arg,                                       VOID_P           user_arg_arg,                                       GOTH_VALUE       data);/* end-def *//*----------------------------------------------------------------------*//* TYPE FUNC G_GET_DATA_FUNC                                            *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* This routine is used to get data from an interface.                  *//*                                                                      *//*..ARGUMENTS...........................................................*//*                                                                      *//* descriptor_arg       -       Descriptor to get data from.            *//* user_arg_arg         -       User argument.                          *//* *data_arg            -       Data fetched from interface.            *//*----------------------------------------------------------------------*//* begin-def */typedef GOTH_STATUS (*G_GET_DATA_FUNC)(GOTH_DESCRIPTOR  descriptor_arg,                                       VOID_P           user_arg_arg,                                       GOTH_VALUE       *data_arg);/* end-def *//*----------------------------------------------------------------------*//* TYPE FUNC G_GET_DATATYPE_FUNC                                        *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* This routine is used to get the datatype of an interface.            *//*                                                                      *//*..ARGUMENTS...........................................................*//*                                                                      *//* descriptor_arg       -       Descriptor to get datatype of.          *//* user_arg_arg         -       User argument.                          *//* *datatype_arg        -       Datatype of interface.                  *//*----------------------------------------------------------------------*//* begin-def */typedef GOTH_STATUS (*G_GET_DATATYPE_FUNC)(GOTH_DESCRIPTOR      descriptor_arg,                                           VOID_P               user_arg_arg,                                           GOTH_DATATYPE        *datatype_arg);/* end-def *//*----------------------------------------------------------------------*//* TYPE FUNC G_SET_DATATYPE_FUNC                                        *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* This routine is used to set the datatype of an interface.            *//*                                                                      *//*..ARGUMENTS...........................................................*//*                                                                      *//* descriptor_arg       -       Descriptor to set datatype of.          *//* user_arg_arg         -       User argument.                          *//* datatype_arg         -       Datatype of interface.                  *//*----------------------------------------------------------------------*//* begin-def */typedef GOTH_STATUS (*G_SET_DATATYPE_FUNC)(GOTH_DESCRIPTOR      descriptor_arg,                                           VOID_P               user_arg_arg,                                           GOTH_DATATYPE        datatype_arg);/* end-def *//*----------------------------------------------------------------------*//* TYPE FUNC G_DESTROY_FUNC                                             *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* This routine is used to destroy descriptors.                         *//*                                                                      *//*..ARGUMENTS...........................................................*//*                                                                      *//* descriptor_arg       -       Descriptor to destroy.                  *//* user_arg_arg         -       User argument.                          *//*----------------------------------------------------------------------*//* begin-def */typedef GOTH_STATUS (*G_DESTROY_FUNC)(GOTH_DESCRIPTOR   descriptor_arg,                                      VOID_P            user_arg_arg);/* end-def *//*----------------------------------------------------------------------*//* TYPE FUNC G_SIZEOF_FUNC                                              *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* This routine is used to sizeof descriptors.                          *//*                                                                      *//*..ARGUMENTS...........................................................*//*                                                                      *//* descriptor_arg - Descriptor to sizeof.  user_arg_arg - User          *//* argument.                                                            *//*----------------------------------------------------------------------*//* begin-def */typedef GOTH_STATUS (*G_SIZEOF_FUNC)(GOTH_DESCRIPTOR   descriptor_arg,                                     VOID_P            user_arg_arg,				     GOTH_INTEGER     *size);/* end-def *//*----------------------------------------------------------------------*//* TYPE FUNC G_COPY_FUNC                                                *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* This routine is used to copy descriptors.                            *//*                                                                      *//*..ARGUMENTS...........................................................*//*                                                                      *//* descriptor_in_arg    -       Descriptor to copy.                     *//* descriptor_copy_arg  -       Copy of the input descriptor.           *//* user_arg_arg         -       User argument.                          *//*----------------------------------------------------------------------*//* begin-def */typedef GOTH_STATUS (*G_COPY_FUNC)(GOTH_DESCRIPTOR   descriptor_in_arg,                                   GOTH_DESCRIPTOR  *descriptor_copy_arg,                                   VOID_P            user_arg_arg);/* end-def *//*----------------------------------------------------------------------*//* TYPE FUNC G_SET_OK_BUTTON_FUNC                                       *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* This routine is used to set the Lull OK button function for an       *//* interface.                                                           *//*                                                                      *//*..ARGUMENTS...........................................................*//*                                                                      *//* descriptor_arg       -       Descriptor to set ok button for.        *//* user_arg_arg         -       User argument.                          *//* action_arg           -       Lull string to set on OK button.        *//*----------------------------------------------------------------------*//* begin-def */typedef GOTH_STATUS (*G_SET_OK_BUTTON_FUNC)(GOTH_DESCRIPTOR     descriptor_arg,                                            VOID_P              user_arg_arg,                                            GOTH_STRING         action_arg);/* end-def *//*----------------------------------------------------------------------*//* TYPE FUNC G_SET_CANCEL_BUTTON_FUNC                                   *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* This routine is used to set the Lull CANCEL button function for an   *//* interface.                                                           *//*                                                                      *//*..ARGUMENTS...........................................................*//*                                                                      *//* descriptor_arg       -       Descriptor to set cancel button for.    *//* user_arg_arg         -       User argument.                          *//* action_arg           -       Lull string to set on CANCEL button.    *//*----------------------------------------------------------------------*//* begin-def */typedef GOTH_STATUS (*G_SET_CANCEL_BUTTON_FUNC)(GOTH_DESCRIPTOR descriptor_arg,                                                VOID_P          user_arg_arg,                                                GOTH_STRING     action_arg);/* end-def *//*----------------------------------------------------------------------*//* TYPE FUNC G_DO_FUNCTION_FUNC                                         *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* This routine is used to execute the `do something' function for an   *//* interface.                                                           *//*                                                                      *//*..ARGUMENTS...........................................................*//*                                                                      *//* descriptor_arg       -       Descriptor to execute `do_function' for.*//* user_arg_arg         -       User argument.                          *//* *inputs_arg          -       Array of GOTH_VALUES to use as input.   *//* *outputs_arg         -       Array of GOTH_VALUES to use as output.  *//*----------------------------------------------------------------------*//* begin-def */typedef GOTH_STATUS (*G_DO_FUNCTION_FUNC)(GOTH_DESCRIPTOR       descriptor_arg,                                          VOID_P                user_arg_arg,                                          GOTH_VALUE            *inputs_arg,                                          GOTH_VALUE            *outputs_arg);/* end-def *//*----------------------------------------------------------------------*//* TYPE FUNC G_SET_ENUMS_FUNC                                           *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* This routine is used to set the enumerations on an interface.        *//*                                                                      *//*..ARGUMENTS...........................................................*//*                                                                      *//* descriptor_arg       -       Descriptor to set enumerations on.      *//* user_arg_arg         -       User argument.                          *//* start_enum_arg       -       Start enumeration.                      *//* end_enum_arg         -       End enumeration.                        *//*----------------------------------------------------------------------*//* begin-def */typedef GOTH_STATUS (*G_SET_ENUMS_FUNC)(GOTH_DESCRIPTOR descriptor_arg,                                        VOID_P          user_arg_arg,                                        GOTH_INTEGER    start_enum_arg,                                        GOTH_INTEGER    end_enum_arg);/* end-def *//*----------------------------------------------------------------------*//* TYPE FUNC G_SET_ENUMS_FUNC                                           *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* This routine is used to get the enumerations from an interface.      *//*                                                                      *//*..ARGUMENTS...........................................................*//*                                                                      *//* descriptor_arg       -       Descriptor to fetch enumerations from.  *//* user_arg_arg         -       User argument.                          *//* *start_enum_arg      -       Start enumeration fetched.              *//* *end_enum_arg        -       End enumeration fetched.                *//*----------------------------------------------------------------------*//* begin-def */typedef GOTH_STATUS (*G_GET_ENUMS_FUNC)(GOTH_DESCRIPTOR descriptor_arg,                                        VOID_P          user_arg_arg,                                        GOTH_INTEGER    *start_enum_arg,                                        GOTH_INTEGER    *end_enum_arg);/* end-def *//*----------------------------------------------------------------------*//* TYPE FUNC G_GET_ARRAY_FUNC                                           *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* This routine is used to get the multiple data elements from an       *//* interface.                                                           *//*                                                                      *//*..ARGUMENTS...........................................................*//*                                                                      *//* descriptor_arg       -       Descriptor to fetch array data from.    *//* user_arg_arg         -       User argument.                          *//* *value_type_arg      -       Datatype of array.                      */ /* *num_data_arg        -       Number of data elements in array.       *//* **data_arg           -       Array of data elements fetched.         *//*----------------------------------------------------------------------*//* begin-def */typedef GOTH_STATUS (*G_GET_ARRAY_FUNC)(GOTH_DESCRIPTOR descriptor_arg,                                        VOID_P          user_arg_arg,                                        GOTH_DATATYPE   *value_type_arg,                                        GOTH_INTEGER    *num_data_arg,                                        GOTH_VALUE      **data_arg);/* end-def *//*----------------------------------------------------------------------*//* TYPE FUNC G_SET_ARRAY_FUNC                                           *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* This routine is used to set the multiple data elements on an         *//* interface.                                                           *//*                                                                      *//*..ARGUMENTS...........................................................*//*                                                                      *//* descriptor_arg       -       Descriptor to fetch array data from.    *//* user_arg_arg         -       User argument.                          *//* value_type_arg       -       Datatype of array.                      */ /* num_data_arg         -       Number of data elements in array.       *//* *data_arg            -       Array of data elements to set.          *//*----------------------------------------------------------------------*//* begin-def */typedef GOTH_STATUS (*G_SET_ARRAY_FUNC)(GOTH_DESCRIPTOR descriptor_arg,                                        VOID_P          user_arg_arg,                                        GOTH_DATATYPE   value_type_arg,                                        GOTH_INTEGER    num_data_arg,                                        GOTH_VALUE      *data_arg);/* end-def *//*----------------------------------------------------------------------*//* TYPE FUNC G_SET_CALC_FUNC                                            *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* This routine is used to set the calculation data elements on an      *//* interface.                                                           *//*                                                                      *//*..ARGUMENTS...........................................................*//*                                                                      *//* descriptor_arg       -       Descriptor to fetch array data from.    *//* user_arg_arg         -       User argument.                          *//* value_index_arg      -       Index of value to calculate.            *//* enum_index_arg       -       Index of enumeration to calculate.      *//*----------------------------------------------------------------------*//* begin-def */typedef GOTH_STATUS (*G_SET_CALC_FUNC)(GOTH_DESCRIPTOR  descriptor_arg,                                       VOID_P           user_arg_arg,                                       GOTH_INTEGER     value_index_arg,                                       GOTH_INTEGER     enum_index_arg);/* end-def *//*----------------------------------------------------------------------*//* TYPE FUNC G_UPDATE_CB_FUNC                                           *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* This routine is used to set an interface's update callback.          *//*                                                                      *//*..ARGUMENTS...........................................................*//*                                                                      *//* descriptor_arg       -       Descriptor to get data from.            *//* func_name_arg        -       Name of Lull update callback.           *//* n_param_arg          -       Number of parameters to pass to it.     *//* *params_arg          -       Parameters array to pass to it.         *//* *types_arg           -       Types of parameters to pass to it.      *//*----------------------------------------------------------------------*//* begin-def */typedef GOTH_STATUS (*G_UPDATE_CB_FUNC)(GOTH_DESCRIPTOR descriptor_arg,                                        GOTH_STRING     func_name_arg,                                        GOTH_INTEGER    n_params_arg,                                        GOTH_VALUE      *params_arg,                                        GOTH_DATATYPE   *types_arg);/* end-def *//*----------------------------------------------------------------------*//* TYPE FUNC G_PARENT_WIDGET_FORM_FUNC                                  *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* This routine is used to fetch the widget id of a form widget that    *//* be used as the parent widget for an interface.                       *//*                                                                      *//*..ARGUMENTS...........................................................*//*                                                                      *//* descriptor_arg       -       Descriptor to fetch menubar from.       *//* user_arg_arg         -       User argument.                          *//* *form_widget_arg     -       Form widget id fetched.                 *//*----------------------------------------------------------------------*//* begin-def */typedef GOTH_STATUS (*G_PARENT_WIDGET_FORM_FUNC)(                                           GOTH_DESCRIPTOR   descriptor_arg,                                           VOID_P            user_arg_arg,                                           Widget            *form_widget_arg);/* end-def *//*----------------------------------------------------------------------*//* TYPE FUNC G_BUILD_INTERFACE_FUNC                                     *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* This routine is used to build an interface based on it's datatype.   *//*                                                                      *//*..ARGUMENTS...........................................................*//*                                                                      *//* parent_id_arg        -       Parent interface ID.                    *//* has_shell_arg        -       TRUE if the built interface has a shell.*//*                              FALSE if the built interface is a subform.*//* num_params_arg       -       Number of parameters.                   *//* types_arg[]          -       Type of each parameter.                 *//* values_arg[]         -       Parameter values.                       *//* *descriptor_arg      -       Returned interface id.                  *//*----------------------------------------------------------------------*//* begin-def */typedef GOTH_STATUS (*G_BUILD_INTERFACE_FUNC)(                               GOTH_DESCRIPTOR          parent_id_arg,                               GOTH_BOOLEAN             has_shell_arg,                               GOTH_INTEGER             num_params_arg,                               GOTH_DATATYPE            types_arg[],                               GOTH_VALUE               values_arg[],                               GOTH_DESCRIPTOR          *descriptor_arg);/* end-def *//*----------------------------------------------------------------------*//* TYPE FUNC G_VISIBLE_FUNC                                             *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* This routine is used to build an interface based on it's datatype.   *//*                                                                      *//*..ARGUMENTS...........................................................*//*                                                                      *//* descriptor_arg       -       Interface ID.                           *//* visible_arg          -       TRUE to make visible.                   *//*                              FALSE to hide.                          *//*----------------------------------------------------------------------*//* begin-def */typedef GOTH_STATUS (*G_VISIBLE_FUNC)(GOTH_DESCRIPTOR   descriptor_arg,                                      GOTH_BOOLEAN      visible_arg);/* end-def *//*----------------------------------------------------------------------*//* TYPE FUNC G_SET_CURSOR_FUNC                                          *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* This routine is used to set the custom cursor on an interface.       *//*                                                                      *//*..ARGUMENTS...........................................................*//*                                                                      *//* descriptor_arg       -       Interface ID.                           *//* set_cursor           -       TRUE to set the cursor.                 *//*                              FALSE to reset the cursor.              *//*----------------------------------------------------------------------*//* begin-def */typedef GOTH_STATUS (*G_SET_CURSOR_FUNC)(GOTH_DESCRIPTOR       descriptor_arg,                                         GOTH_BOOLEAN          set_cursor_arg);/* end-def */#endif