/*
 * This file is part of the LAMPS distribution, released as a software
 * preservation project to archive digital history for future historians.
 * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
 *
 * Timestamp of this file for the 2002 release was: 1995-03-23 19:11:38.000000000 +0000
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 */
#ifndef _LSR_INTRINSICS#define _LSR_INTRINSICS/*----------------------------------------------------------------------*//* INTRODUCTION								*//*									*//* The GOTHIC library which provides support for raster datasets	*//*  is called RASTERLIB.						*//*									*//*  RASTERLIB is capable of producing,storing and manipulating tiled	*//*  raster data. For efficiency data is stored within a tile cache.	*//*									*//*  Raster data may be stored permanently in a compressed tiled format	*//*  (LSR) which is designed specifically for quick data access.		*//*									*//*  Facilities exist for manipulating raster data in one or more raster	*//*  datasets.								*//*									*//*@ Creation of a new raster dataset in LSR format directly.		*//*@ Creation of raster data from non-raster data sources.		*//*@ Reading from and writing to an existing raster dataset in LSR	*//*    format.								*//*@ Creating a new raster dataset by transforming the data in an	*//*    existing raster dataset. Transformations may either		*//*    transform the data in a single pixel (e.g. packing a byte type	*//*    dataset to a binary type dataset), or spatial rearrange		*//*    the data within a dataset (e.g. a rotation or a filter operation	*//*    on the dataset).							*//*@ Tiling together data in a set of datasets. When the same type of	*//*    data exists in different datasets but covering different real	*//*    world extents facilities exist to tile this data into a single	*//*    dataset.								*//*@ Layering together data in a set of datasets. When different types	*//*    of data exists in the same real world extent facilities exist to	*//*    layer together this data to create a single output dataset.	*//*									*//*									*//*  <<Raster Access Contexts>>						*//*									*//*  The user manipulatess raster data through a GOTHIC datatype called	*//*  a Raster Access Context or RAC. The RAC can be thought of as a	*//*  logical raster which contains the attributes of the raster data	*//*  together with the means by which to access the data. The data itself*//*  is not held on the RAC but within a tile cache.			*//*									*//*  RACs exist in five forms, each of which possesses the same set of	*//*  attributes but differing methods of accessing their data.		*//*									*//*@ data RAC - the data RAC is the virtual raster dataset		*//*               corresponding to an LSR format file.			*//*@ external RAC - the external RAC is the virtual raster dataset	*//*                   corresponding to the raster data			*//*                   which is created from non-raster or external	*//*                   data sources.					*//*@ transform RAC - the transform RAC is the virtual raster dataset	*//*                    corrsponding to the data which has been		*//*                    transformed from a single source RAC.		*//*@ tiled RAC - the tiled RAC is the virtual raster dataset		*//*                corrsponding to data which has been tiled together	*//*                from a set of source RACs which represent the same	*//*                type of data over different real world extents	*//*@ layered RAC - the layered RAC is the virtual raster dataset		*//*                corrsponding to data which has been layered together	*//*                from a set of source RACs which represent the possibly*//*                different types of data over the same or at least	*//*                overlapping real world extents.			*//*									*//*  The construction of new RACs from old RACs allows chains and trees	*//*  of RACs to be created interactively. The coupling with the tile	*//*  cache ensures that only the data accessed is held in memory where	*//*  it is stored until ready for flushing from the cache. This approach	*//*  allows efficient use of raster data for many of the commonly	*//*  occuring types of operations which are perormed on raster data.	*//*  Transformation,tiling and layering functions are held in a central	*//*  dictionary from which they are selected by a name (e.g "unpack").	*//*									*//*									*//*  <<Regions and Extents>>						*//*									*//*  Data within a RAC is accessed through a GOTHIC data type called a	*//*  a REGION. A REGION can essentially be thought of as a buffer which	*//*  ferries raster data from the RAC to the application. The data to be	*//*  accessed is determined from another type of GOTHIC datatype called	*//*  an EXTENT which is simply a description of a rectangular real world	*//*  area of interest. An in-EXTENT is by default attached to		*//*  a REGION and may be edited to affect the data returned within the	*//*  the region buffer. A number of parameters may be set on the REGION	*//*  to decide how the data returned to the application is determined.	*//*  For instance the user may ensure that the data returned is tile	*//*  aligned or byte aligned. The user may find the extent of the data	*//*  returned in the REGION's buffer by enquiring of the out-EXTENT	*//*  which is also by default attached to the REGION.			*//*									*//*  REGIONS come in two basic forms which allow two types of access to	*//*  raster data.							*//*									*//*@ COPY REGION access - copy region access uses a buffer to return	*//*  or place a copy of the data the user has specified in the input	*//*  EXTENT. The buffer holds contiguous data (i.e. independent of tiling*//*  strategy). COPY type regions must be used to edit a RAC.		*//*  The buffer via  which the data is passed between application and RAC*//*  may be eiher the REGION's own intrinsic buffer or a buffer defined	*//*  externally to the REGION.						*//*@POINTER REGION access - pointer region access uses the data stored	*//*  within the tile cache. The buffer returned in a pointer type access	*//*  is actually a buffer within the tile cache. Pointer access is	*//*  efficient for applications such as graphical display but as the	*//*  data is held within a cache the user is advised not to edit data	*//*  within the buffer, and warned not to delete the buffer in any way.	*//*									*//*----------------------------------------------------------------------*//*>>> EXTERN functions from LSR.C <<<*//*----------------------------------------------------------------------*//* EXTERN lsr_create_global_cache                                       *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Notify the cache of the cache size required for the application.     *//* The cache is used across all open racs which use the global cache.   *//* The input parameters should give an approximate estimate of the      *//* number of tiles to be held in the cache and an approximate estimate  *//* of the average tile size. The actual cache size allocated is the     *//* product of the two estimates.                                        *//* It is important that reasonably accurate estimates of both values    *//* are given so that the cache mechanism is efficient.                  *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* ntiles            -in- the approximate number of tiles to be held    *//*                        in the cache.                                 *//* average_tile_size -in- the approximate average size of a tile        *//*                        in bytes.                                     *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__MALLOC if insufficient memory for operation                   *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS  lsr_create_global_cache(GOTH_INTEGER ntiles,                                            GOTH_INTEGER average_tile_size) ;/*----------------------------------------------------------------------*//* EXTERN lsr_get_global_cache						*//*......................................................................*//*..DESCRIPTION.........................................................*//* Get the global cache used by rasters.				*//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* cache_id -out- the global raster cache.				*//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_get_global_cache(GD_CACHE *cache_id) ;/*----------------------------------------------------------------------*//* EXTERN lsr_alloc_rac   		       				*//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Allocates a rac descriptor block.      				*//* A rac is a virtual raster dataset. It carries the attributes of a    *//* raster dataset together with the information necessary to create the *//* actual raster data.                                                  *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*----------------------------------------------------------------------*/extern GD_RAC lsr_alloc_rac();/*----------------------------------------------------------------------*//* EXTERN lsr_alloc_reg   		       				*//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Allocates a region descriptor block.       				*//* A region is the descriptor by which data within a rac is accessed.   *//* Regions come in two types. A copy type region fills a buffer with    *//* data, whereas a pointer type region returns pointers to tiles held   *//* within the tile cache.                                               *//*                                                                      *//* A region consists of a buffer together with two extents. The         *//* in-extent specifies the data which the user wishes to access and the *//* the out-extent returns the data which has actually been returned in  *//* the buffer. A number of attributes can be set for a region to        *//* determine the relationship between the data requested for and that   *//* receivedextern GD_REGION lsr_alloc_reg();/*----------------------------------------------------------------------*//* EXTERN lsr_alloc_ext   		       				*//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Allocates an extent descriptor block.      				*//* An extent specifies a rectangular area of interest in real world     *//* coordinatesextern GD_EXTENT lsr_alloc_ext();/*----------------------------------------------------------------------*//* EXTERN lsr_free_rac   		       				*//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Frees a rac descriptor block.       		          		*//* This routine is the inverse operation to <<lsr_alloc_rac>>.          *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id -in- The descriptor block to free.                            *//* 									*//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_free_rac(GD_RAC rac_id);/*----------------------------------------------------------------------*//* EXTERN lsr_free_ext   		       				*//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Frees an extent descriptor block.       	              		*//* This routine is the inverse operation to <<lsr_alloc_ext>>.          *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* extent_id -in- The descriptor block to free.                         *//* 									*//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_free_ext(GD_EXTENT extent_id);/*----------------------------------------------------------------------*//* EXTERN lsr_free_reg   		       				*//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Frees a region descriptor block.       		     		*//* This routine is the inverse operation to <<lsr_alloc_reg>>.          *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* region_id -in- The descriptor block to free.                         *//* 									*//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_free_reg(GD_REGION region_id);/*----------------------------------------------------------------------*//* EXTERN lsr_freeze_version						*//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Freeze a verion of a versioned raster dataset.			*//*                                                                      *//*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id       -in- the descriptor for the versioned rac.              *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__RASTERBADTYPE if invalid type of rac for operation            *//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_freeze_version(GD_RAC rac_id) ;/*----------------------------------------------------------------------*//* EXTERN lsr_unfreeze_version						*//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Unfreeze a verion of a versioned raster dataset.			*//*                                                                      *//*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id       -in- the descriptor for the versioned rac.              *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__RASTERBADTYPE if invalid type of rac for operation            *//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_unfreeze_version(GD_RAC rac_id) ;/*----------------------------------------------------------------------*//* EXTERN lsr_delete_rac                 				*//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Deletes a rac in a descriptor block.                                 *//* This routine is the inverse operation to the                         *//* <<lsr_create_XXXXX_rac>>.                                            *//* routines.                                                            *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id -in- The descriptor block whose rac is to be deleted.         *//* 									*//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__ATTACH if attachment of descriptor makes the operation invalid*//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_delete_rac(GD_RAC rac_id);/*----------------------------------------------------------------------*//* EXTERN lsr_r_delete_rac                 				*//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Deletes a rac in a descriptor block recursively i.e. deleting any    *//* descriptors attached to the rac.                                     *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id -in- The descriptor block whose rac is to be deleted.         *//* 									*//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__ATTACH if attachment of descriptor makes the operation invalid*//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_r_delete_rac(GD_RAC rac_id);/*----------------------------------------------------------------------*//* EXTERN lsr_set_rac_r_deletion                                        *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Sets a rac to recursively delete racs attached to it.                *//* When racs are set up in a chain of either transform,layer or tiled   *//* racs this routine may be used to delete racs down the chain when the *//* rac at the top of the chain is deleted.                              *//*                                                                      */ /* Note this routine does not delete any racs. It sets up data which    *//* causes the recursive deletion to occur when the rac is deleted       *//* using lsr_delete_rac or lsr_r_delete_rac.                            *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id  -in- The descriptor block of the rac.                        *//* nrac_id -in- the rac to recurisevly delete.                          *//*              This parameter is not required for transform racs       *//*              and is the ordinal of a rac in a layered or tiled rac.  *//*              A value of -1 delete all racs attached to the head rac. *//* 									*//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__NONEXISTANTRAC if the specified rac does not exist            *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_set_rac_r_deletion(GD_RAC       rac_id,                                          GOTH_INTEGER nrac_id) ;/*----------------------------------------------------------------------*//* EXTERN lsr_set_rac_access                                            *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Set the protection on the constituent elements of a layered or       *//* tiling RAC. 							        *//* This call may be used to disable and enable reading and writing of   *//* data between the layered RAC and its constituent RACs. This value    *//* takes precedence over access modes on the constituent RACs		*//*                                                                      *//*..ARGUMENTS...........................................................*//*                                                                      *//*                                                                      *//* rac_id          -in- the descriptor for the layered RAC.             *//* nrac_id         -in- the index of the constituent RAC.		*//*                      This is the ordinal of a rac in a layered or    *//*                      tiled rac. 					*//*                      A value of -1 sets protection for all racs      *//*                      attached to the head rac. 			*//* access_mode     -in- the access mode on the indexed RAC.             *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_set_rac_access(GD_RAC          rac_id,                                      GOTH_INTEGER    nrac_id,				      RAST_TL_LOCK_TYPE  access_mode) ;/*----------------------------------------------------------------------*//* EXTERN lsr_delete_ext                 				*//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Deletes an extent in a descriptor block.                             *//* This routine is the inverse operation to the <<lsr_create_ext>>.     *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* extent_id -in- The descriptor block whose extent is to be deleted.   *//* 									*//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__ATTACH if attachment of descriptor makes the operation invalid*//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_delete_ext(GD_EXTENT extent_id);/*----------------------------------------------------------------------*//* EXTERN lsr_delete_reg                 				*//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Deletes a region in a descriptor block                               *//* This routine is the inverse operation to the <<lsr_create_reg>>.     *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* region_id -in- The descriptor block whose region is to be deleted.   *//* 									*//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__ATTACH if attachment of descriptor makes the operation invalid*//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_delete_reg(GD_REGION region_id);/*----------------------------------------------------------------------*//* EXTERN lsr_r_delete_reg                                              *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Deletes a region in a descriptor block recursively i.e. deleting     *//* extents if possible and rac if required.                             *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* region_id  -in- The descriptor block whose region is to be deleted.  *//* delete_rac -in- TRUE - try to delete the rac attached to the region. *//* 									*//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__ATTACH if attachment of descriptor makes the operation invalid*//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_r_delete_reg(GD_REGION       region_id,                                     GOTH_BOOLEAN    delete_rac) ;/*----------------------------------------------------------------------*//* EXTERN lsr_attach_rac_to_reg                                         *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Attach an rac descriptor block to a region descriptor block.         *//* The rac is attached to the region so that the region can be used to  *//* access the data within the rac.                                      *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* region_id -in- the descriptor block to have descriptor block         *//*                attached.                                             *//* rac_id    -in- the descriptor block to attach.                       *//* 									*//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*                                                                      *//*----------------------------------------------------------------------*/          extern GOTH_STATUS lsr_attach_rac_to_reg(GD_REGION region_id,                                         GD_RAC    rac_id);/*----------------------------------------------------------------------*//* EXTERN lsr_attach_ext_in_to_reg                                      *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Attach an extent(_in) descriptor block to a region descriptor block. *//* The in_extent is used to determine the real world coverage of the    *//* data in the rac attached to the region which is to be transferred to *//* the region buffer.                                                   *//*                                                                      */ /*..ARGUMENTS...........................................................*//* 									*//* region_id -in- the descriptor block to have descriptor block         *//*                attached.                                             *//* extent_id -in- the descriptor block to attach.                       *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_attach_ext_in_to_reg(GD_REGION region_id,                                            GD_EXTENT extent_id);/*----------------------------------------------------------------------*//* EXTERN lsr_attach_ext_out_to_reg                                     *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Attach an extent(_out) descriptor block to a region descriptor block.*//* The out_extent is used to determine the real world coverage of the   *//* data in the region buffer.                                           *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* region_id -in- the descriptor block to have descriptor block         *//*                attached.                                             *//* extent_id -in- the descriptor block to attach.                       *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_attach_ext_out_to_reg(GD_REGION region_id,                                             GD_EXTENT extent_id);/*----------------------------------------------------------------------*//* EXTERN lsr_det_rac_from_reg                                          *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Detach a rac descriptor block from a region descriptor block.        *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* region_id -in- the descriptor block to have descriptor block         *//*                detached.                                             *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_det_rac_from_reg(GD_REGION region_id);/*----------------------------------------------------------------------*//* EXTERN lsr_det_ext_in_from_reg                                       *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Detach an extent(_in) descriptor block from a region descriptor      *//* block.                                                               *//*                                                                      */ /*..ARGUMENTS...........................................................*//* 									*//* region_id -in- the descriptor block to have descriptor block         *//*                detached.                                             *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_det_ext_in_from_reg(GD_REGION region_id);/*----------------------------------------------------------------------*//* EXTERN lsr_det_ext_out_from_reg                                      *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Detach an extent(_out) descriptor block from a region descriptor     *//* block.                                                               *//* 									*//*..ARGUMENTS...........................................................*//*                                                                      *//* region_id -in- the descriptor block to have descriptor block         *//*                detached.                                             *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_det_ext_out_from_reg(GD_REGION region_id);/*----------------------------------------------------------------------*//* EXTERN lsr_fetch_rac_from_reg                                        *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Fetch a rac descriptor block from a region descriptor block.         *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* region_id -in-  the descriptor block from which to fetch descriptor. *//* rac_id    -out- the detached descriptor block.                       *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*                                                                      *//*----------------------------------------------------------------------*/ extern GOTH_STATUS lsr_fetch_rac_from_reg(GD_REGION region_id,                                          GD_RAC    *rac_id)   ;/*----------------------------------------------------------------------*//* EXTERN lsr_fetch_ext_in_from_reg                                     *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Fetch an extent(_in) descriptor block from a region descriptor.      *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* region_id  -in- the descriptor block from which to fetch descriptor. *//* extent_id -out- the detached descriptor block.                       *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*                                                                      *//*----------------------------------------------------------------------*/ extern GOTH_STATUS lsr_fetch_ext_in_from_reg(GD_REGION region_id,                                             GD_EXTENT *extent_id);/*----------------------------------------------------------------------*//* EXTERN lsr_fetch_ext_out_from_reg                                    *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Fetch an extent(_out) descriptor block from a region descriptor.     *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* region_id  -in- the descriptor block from which to fetch descriptor. *//* extent_id -out- the detached descriptor block.                       *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*                                                                      *//*----------------------------------------------------------------------*/ extern GOTH_STATUS lsr_fetch_ext_out_from_reg(GD_REGION region_id,                                              GOTH_DESCRIPTOR *extent_id);/*----------------------------------------------------------------------*//* EXTERN lsr_set_ext                                                   *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Set the values in an extent.                                         *//* An extent specifies a rectangular area of interest.                  *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* extent_id -in- extent descriptor.                                    *//* low1      -in- bottom left corner in real world coordinates.         *//* low2      -in- bottom left corner in real world coordinates.         *//* high1     -in- top right corner in real world coordinates.           *//* high2     -in- top right corner in real world coordinates.           *//* 									*//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__BADEXTENT extent parameters are not well defined              *//*                                                                      *//*----------------------------------------------------------------------*/ extern GOTH_STATUS lsr_set_ext(GD_EXTENT extent_id,                               GOTH_REAL low1,                                GOTH_REAL low2,                               GOTH_REAL high1,                                GOTH_REAL high2);/*----------------------------------------------------------------------*//* EXTERN lsr_get_ext                                                   *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Get the values in an extent.                                         *//* An extent specifies a rectangular area of interest.                  *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* extent_id -in- extent descriptor.                                    *//* low1      -out- bottom left corner in real world coordinates.        *//* low2      -out- bottom left corner in real world coordinates.        *//* high1     -out- top right corner in real world coordinates.          *//* high2     -out- top right corner in real world coordinates.          *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*                                                                      *//*----------------------------------------------------------------------*/ extern GOTH_STATUS lsr_get_ext(GD_EXTENT extent_id,                               GOTH_REAL *low1,                                 GOTH_REAL *low2,                               GOTH_REAL *high1,                                GOTH_REAL *high2);/*----------------------------------------------------------------------*//* EXTERN lsr_set_reg_ext_in                                            *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Set the values on an extent_in attached to a region.                 *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* region_id -in- region descriptor.                                    *//* low1      -in- bottom left corner in real world coordinates.         *//* low2      -in- bottom left corner in real world coordinates.         *//* high1     -in- top right corner in real world coordinates.           *//* high2     -in- top right corner in real world coordinates.           *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_set_reg_ext_in(GD_REGION region_id,                                      GOTH_REAL low1,                                        GOTH_REAL low2,                                      GOTH_REAL high1,                                       GOTH_REAL high2);/*----------------------------------------------------------------------*//* EXTERN lsr_set_reg_buffer_ext                                        *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Set a region buffer extent.                                          *//*                                                                      *//* This routine can be used to set the whole extent of an input buffer  *//* of a copy type region. This allows only that part of the buffer      *//* specified by the in extent of the region to be copied into or out of *//* the rac. Thus a window of interest may be placed on a buffer.        *//*                                                                      */ /* By default the extent of the buffer is taken to be that of the in    *//* extent of the region.                                                *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* region_id -in- the region descriptor.                                *//* low1      -in- bottom left corner in real world coordinates.         *//* low2      -in- bottom left corner in real world coordinates.         *//* high1     -in- top right corner in real world coordinates.           *//* high2     -in- top right corner in real world coordinates.           *//* 									*//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__BADREGION if the region is not a copy-type region             *//*  GOTH__BADEXTENT if the extent parameters are not well defined       *//*  GOTH__MALLOC if insufficient memory for operation                   *//*                                                                      *//*----------------------------------------------------------------------*/ extern GOTH_STATUS lsr_set_reg_buffer_ext(GD_REGION region_id,                                          GOTH_REAL low1,                                           GOTH_REAL low2,                                          GOTH_REAL high1,                                           GOTH_REAL high2);/*----------------------------------------------------------------------*//* EXTERN lsr_get_reg_tile_order                                        *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Get the order in which the tiles are read on a region. 		*//* The default value is undefined and then the tile order of the RAC is *//* used to determine the tiling order. The order set by this call       *//* overrrides the value of the tile order for the RAC.			*//*									*//*..ARGUMENTS...........................................................*//*                                                                      *//* region_id       -in- the region descriptor.                          *//* tile_order      -out- the tile order of the REGION			*//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_get_reg_tile_order(GD_REGION        region_id,					  TILE_ORDER_TYPE  *tile_order) ;/*----------------------------------------------------------------------*//* EXTERN lsr_set_reg_tile_order                                        *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Set the order in which the tiles are read on a region 		*//* The default value is TILE_ORDER_TL_H					*//*									*//*..ARGUMENTS...........................................................*//*                                                                      *//* region_id       -in- the region descriptor.                          *//* tile_order      -in- the specified tile order			*//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__BADRASTERTILING if tiling value is poorly defined.		*//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_set_reg_tile_order(GD_REGION        region_id,					  TILE_ORDER_TYPE  tile_order) ;/*----------------------------------------------------------------------*//* EXTERN lsr_unset_reg_buffer_ext                                      *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Unset a region buffer extent.                                        *//* The extent of the buffer on a copy type region is not set. By default*//* the extent of the buffer is taken to be that of the in extent of the *//* region.                                                              *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* region_id       -in- the region descriptor.                          *//* 									*//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__BADREGION if the region is not a copy-type region             *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_unset_reg_buffer_ext(GD_REGION region_id);/*----------------------------------------------------------------------*//* EXTERN lsr_set_reg_extern_buffer                                     *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Set a region buffer to be external.                                  *//* Regions can have either an internal buffer, created with             *//* <<lsr_create_reg>> or an external buffer which may be attached to the*//* region.                                                              *//* By default the internal buffer is used, if it exists.                *//* An external buffer is useful in cases where the user does not wish   *//* to copy data from some external source into the region's internal    *//* buffer for reasons of efficiency.                                    *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* region_id       -in- the region descriptor.                          *//* buffer          -in- the external buffer.                            *//* buffer_size     -in- the new external buffer size.                   *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__BADREGION if the region parameters are not well defined       *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_set_reg_extern_buffer(GD_REGION    region_id,                                             GOTH_SPECIAL buffer,                                             GOTH_INTEGER buffer_size);/*----------------------------------------------------------------------*//* EXTERN lsr_unset_reg_extern_buffer                                   *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Unset a region buffer that was external (i.e. revert to the region's *//* internal buffer)                                                     *//* Regions can have either an internal buffer, created with             *//* <<lsr_create_reg>> or an external buffer which may be attached to the*//* region.                                                              *//* By default the internal buffer is used, if it exists.                *//* An external buffer is useful in cases where the user does not wish   *//* to copy data from some external source into the region's internal    *//* buffer for reasons of efficiency.                                    *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* region_id       -in- the region descriptor.                          *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_unset_reg_extern_buffer(GD_REGION region_id);/*----------------------------------------------------------------------*//* EXTERN lsr_set_reg_buffer                                            *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Set a region buffer to have the specified parameters.                *//* Region buffer parameters are only relevant for a copy-type region.   *//* The buffer is usually created via the <<lsr_create_reg>> call.       *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* region_id       -in- the region descriptor.                          *//* buffer_size     -in- the new buffer size ofthe region in bytes.      *//* max_buffer_size -in- the maximum allowable buffer size in bytes.     *//*                      This is applicable if fixed_size is FALSE       */ /*                      and should be at least equal to buffer_size.    *//* fixed_size      -in- TRUE buffer cannot have size altered.          !*//*                      FALSE buffer_size can be increased up to size   *//*                      of max_buffer_size.                             *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__BADREGION if the region parameters are not well defined       *//*  GOTH__MALLOC if insufficient memory for operation                   *//*                                                                      *//*----------------------------------------------------------------------*/ extern GOTH_STATUS lsr_set_reg_buffer(GD_REGION    region_id,                                      GOTH_INTEGER buffer_size,                                      GOTH_INTEGER max_buffer_size,                                      GOTH_BOOLEAN fixed_size) ;/*----------------------------------------------------------------------*//* EXTERN lsr_get_reg_buffer                                            *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Get a region buffer and its associated values.                       *//* Region buffer parameters are only relevant for a copy type region.   *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* region_id        -in- the region descriptor.                         *//* external         -in- TRUE if the buffer is external.               !*//*                       FALSE if the buffer is the region intrinsic    *//*                       buffer.                                        *//* buffer          -out- pointer to the region buffer.                  *//* buffer_size     -out- the current region buffer size in bytes.       *//* max_buffer_size -out- the maximum allowable buffer size in bytes.    *//* fixed_size      -out- TRUE buffer cannot have size altered.         !*//*                       FALSE buffer_size can be increased.            *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__BADREGION if the region parameters are not well defined       *//*                                                                      *//*----------------------------------------------------------------------*/ extern GOTH_STATUS lsr_get_reg_buffer(GD_REGION    region_id,                                      GOTH_BOOLEAN *external,                                      GOTH_SPECIAL *buffer,                                      GOTH_INTEGER *buffer_size,                                      GOTH_INTEGER *max_buffer_size,                                      GOTH_BOOLEAN *fixed_size) ;/*----------------------------------------------------------------------*//* EXTERN lsr_create_transform_rac                                      *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Create a new rac which is to be a transform of the data in an        *//* existing rac.                                                        *//*                                                                      *//* The data in the original rac may be transformed by a data type       *//* transformation (e.g. packing byte data to binary data) or a spatial  *//* type transform (e.g. rotating a raster dataset). Alternatively the   *//* transformation may an internal type of transformation such as        *//* changing the tile size or tiling origin of a dataset.                *//*                                                                      */ /* After the calling of this routine the particular transformation      *//* required may be specified by calling                                 */ /* @ <<lsr_set_rac_data_conv>> for data type transformations.           *//* @ <<lsr_set_rac_spatial_conv>> for spatial type transformations.     *//* @ <<lsr_set_rac_XXXXXXX>> routines for internal type transformations.*//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id         -in- the descriptor for the rac.                      *//* source_rac_id  -in- the descriptor of the source rac.                *//* access_mode    -in- whether file to be read or written.              *//*                     (e.g. RAST_READ)                                 *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__RASTERDATALOCK if the data used by this operation is locked   *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_create_transform_rac(GD_RAC         rac_id,                                            GD_RAC         source_rac_id,					    RAST_LOCK_TYPE access_mode);/*----------------------------------------------------------------------*//* EXTERN lsr_size	                                                *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Return the size in bytes of a named raster file. This is the total	*//* size including the size of any header and index files.		*//*                                                                      *//*..ARGUMENTS...........................................................*//*                                                                      *//* filename -in- the name of the raster dataset (e.g. "osmap")   	*//* size	   -out- the number of bytes associated with the dataset        *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_size(GOTH_STRING  	filename,			    GOTH_REAL		*size) ;/*----------------------------------------------------------------------*//* EXTERN lsr_size_by_rac		                       	        *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Return the number of bytes associated with a DATA RAC on disk.	*//* This is the total size including the size of any header and index 	*//* files.								*//*									*//*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id  -in- the DATA RAC to be query.				*/ /* size	   -out- the number of bytes associated with the RAC		*//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__RASTERBADTYPE if an invalid type of rac for operation         *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_size_by_rac(GD_RAC 	rac_id,				   GOTH_REAL 	*size) ;/*----------------------------------------------------------------------*//* EXTERN lsr_delete_by_rac                                             *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Delete a DATA RAC and all the files associated with a named LSR      *//* raster dataset corresponding to the RAC.			        *//*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id  -in- the DATA RAC to be deleted.				*/ /*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__RASTERBADTYPE if an invalid type of rac for operation         *//*  GOTH__MALLOC if insufficient memory for operation                   *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_delete_by_rac(GD_RAC rac_id) ;/*----------------------------------------------------------------------*//* EXTERN lsr_delete                                                    *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Delete all the files associated with a named LSR raster dataset.     *//*..ARGUMENTS...........................................................*//*                                                                      *//* filename        -in- the name of the raster dataset (e.g. "osmap")   *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__RASTERDATALOCK if the data used by this operation is locked   *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_delete(GOTH_STRING filename) ;/*----------------------------------------------------------------------*//* EXTERN lsr_wildcard_delete						*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* This routine deletes all the rasters with names which match the	*//* regular expression specified using the matchname argument.		*//*									*//*..ARGUMENTS...........................................................*//*									*//* matchname	-in-	A regular expression describing the rasters	*//* 			to be deleted.					*//*									*//*..RETURN-CODES........................................................*//*									*//* GOTH__NORMAL		Normal, successful completion.			*//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_wildcard_delete(				       GOTH_STRING	matchname);/*----------------------------------------------------------------------*//* EXTERN lsr_create_gentrans_rac                                       *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Create a new rac which is to be a transform of the data in an array  *//* of existing racs.                                                    *//*                                                                      *//* The data in the gentrans rac is a combination of spatial altered     *//* data in the source racs.                                             *//*                                                                      */ /* After the calling of this routine the particular transformation      *//* required may be specified by calling                                 */ /* @ <<lsr_set_rac_gentrans>>     					*//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id       -in- the descriptor for the rac.                        */  /* nsource_rac_ids -in- the number of racs to create the gentrans RAC.  *//* source_rac_ids  -in- the racs to layer into the gentrans RAC.        */ /* access_mode  -in- whether file to be read or written                 *//*                   (e.g. RAST_READ_ONLY).                             *//* coord        -in- the identifier for the coordinate system of the    *//*                   raster dataset.                                    *//* scale1       -in- the size of the pixels in  real world coordinates  *//*                   in the primary storage direction.                  */  /* scale2       -in- the size of the pixels in  real world coordinates  *//*                   in the secondary storage direction.                */  /* origin1      -in- the origin of the pixels in  real world coordinate *//*                   in the primary storage direction. The origin       *//*                   specifies the bottom left hand corner of the data  *//*                   window for the raster dataset.                     */  /* origin2      -in- the origin of the pixels in  real world coordinate *//*                   in the secondary storage direction.                */  /* tiling_origin1 -in- the position at which a tile origin is placed    *//*                     in the primary storage direction. The tiling     *//*                     origin specifies a position at which the bottom  *//*                     left hand corner of a tile is to lie. Note       *//*                     that this position need not be the actual        *//*                     bottom left hand corner of the bottom left hand  *//*                     tile in the dataset. The routine places that     *//*                     point so that the raster dataset contains the    *//*                     origin specified above in the bottom left hand   *//*                     tile of the dataset                              *//* tiling_origin2 -in- the position at which a tile origin is placed    *//*                   in the secondary storage direction.                */  /* grid_point   -in- the type of grid point for the raster dataset      *//*                   (e.g. RAST_BY_AREA).                               *//* content_id   -in- an identifier for the content of the data.         *//* image_width  -in- the size of the image to be placed in the rac      *//*                   in the primary storage direction.                  */  /* image_height -in- the size of the image to be placed in the rac      *//*                   in the secondary storage direction.                */  /* tile_width   -in- the size of the tile for the stored data           *//*                   in the primary storage direction.                  */  /* tile_height  -in- the size of the tile for the stored data           *//*                   in the secondary storage direction.                */  /* tile_order   -in- the tile order for storage in the raster dataset   *//*                   (e.g. TILE_ORDER_TL_H).                            *//* pixel_order  -in- the pixel order for storage within a tile of the   *//*                   raster dataset (e.g. PIXEL_ORDER_TL_H)             *//* data_type    -in- the datatype of the image to be stored             *//*                   (e.g. RAST_BINARY).                                *//* pack_type    -in- the packtype of the image to be stored             *//*                   (e.g. RAST_PACK_BYTE).                             *//* nsigbits     -in- the number of significant bits in the image        *//* width       -out- the width of the whole image in pixels taking      *//*                   account of possible tile alignment.                *//* height      -out- the height of the whole image in pixels taking     *//*                   account of possible tile alignment.                *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__BADRASTERACCESS if the access parameter is not well defined   *//*  GOTH__BADRASTERDATATYPE if the raster datatype is not well defined  *//*  GOTH__BADRASTERTILING if the tiling strategy is not well defined    *//*  GOTH__BADGRID if the grid parameters are not well defined            *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_create_gentrans_rac(GD_RAC           rac_id,                                           GOTH_INTEGER     nsource_rac_ids,                                           GD_RAC           source_rac_ids[],                                           RAST_LOCK_TYPE   access_mode,                                           GOTH_STRING      coord,                                           GOTH_REAL        scale1,                                           GOTH_REAL        scale2,                                           GOTH_REAL        origin1,                                           GOTH_REAL        origin2,                                           GOTH_REAL        tiling_origin1,                                           GOTH_REAL        tiling_origin2,                                           RAST_POINT_TYPE  grid_point,                                           GOTH_INTEGER     content_id,                                           GOTH_INTEGER     image_width,                                           GOTH_INTEGER     image_height,                                           GOTH_INTEGER     tile_width,                                           GOTH_INTEGER     tile_height,                                           TILE_ORDER_TYPE  tile_order,                                           PIXEL_ORDER_TYPE pixel_order,                                            RAST_DATA_TYPE   data_type,                                           RAST_PACK_TYPE   pack_type,                                           GOTH_INTEGER     nsigbits,                                           GOTH_INTEGER     *width,                                           GOTH_INTEGER     *height) ;/*----------------------------------------------------------------------*//* EXTERN lsr_set_rac_gentrans                                          *//*......................................................................*//*..DESCRIPTION.........................................................*//*                       						*//* Set the rac gentrans conversion transformation.                      *//* This routine can be called after <<lsr_create_gentrans_rac>> to set  *//* a general conversion on a gentrans rac. 				*//*									*//*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id       -in- the descriptor of the rac.                         *//* forward      -in- TRUE - set the forward transformation             !*//*                   FALSE - set the backward transformation            *//*                           (not implemented at present).              *//* gentransfunc  -in- the name of the gentrans map.                     *//* ngentrans_params -in- the number of gentrans arguments.              *//* gentrans_params  -in- +list+ the gentrans arguments.                 *//* noutput_space_params -in- the number of output space parameters.     *//* output_space_params  -in- +list+ the output space parameters.        *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__RASTERBADTYPE if an invalid type of rac for operation         *//*  GOTH__BADCONVFUNCARGS if the arguments are not consistent with      *//*                        function                                      *//*  GOTH__RASTERNULLFUNC if the raster processing function is not       *//*                       defined                                        *//*  GOTH__MALLOC if insufficient memory for operation                   *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_set_rac_gentrans(GD_RAC         rac_id,                                        GOTH_BOOLEAN   forward,                                        GOTH_STRING    gentransfunc,                                        GOTH_INTEGER   ngentrans_params,                                        GOTH_VALUE     gentrans_params[],                                        GOTH_INTEGER   noutput_space_params,                                        GOTH_VALUE     output_space_params[]) ;/*----------------------------------------------------------------------*//* EXTERN lsr_set_rac_gentrans_entry                                    *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Set an individual rac gentrans conversion transformation.            *//* This routine can be called after <<lsr_create_gentrans_rac>> to set  *//* a general conversion on a gentrans rac. 				*//*									*//*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id       -in- the descriptor of the rac.                         *//* forward      -in- TRUE - set the forward transformation             !*//*                   FALSE - set the backward transformation            *//*                           (not implemented at present).              *//* entry        -in- the functin to set.				*//* rectfunc     -in- the name of the spatial mbr map.                   *//* pointfunc    -in- the name of the spatial point map.                 *//* nmbr_params -in- the number of mbr map arguments.                    *//* mbr_params  -in- +list+ the mbr map arguments.                       *//* ntrans_params -in- the number of point map arguments.                *//* trans_params  -in- +list+ the point map arguments.                   *//* ninput_space_params -in- the number of input space parameters.       *//*                          The space parameters may be used to define  *//*                          parameters of the spaces between which the  *//*                          spatial transform is to be performed.       *//* input_space_params -in- +list+ the input space parameters.           *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__RASTERBADTYPE if an invalid type of rac for operation         *//*  GOTH__BADCONVFUNCARGS if the arguments are not consistent with      *//*                        function                                      *//*  GOTH__RASTERNULLFUNC if the raster processing function is not       *//*                       defined                                        *//*  GOTH__MALLOC if insufficient memory for operation                   *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_set_rac_gentrans_entry(GD_RAC          rac_id,                                         GOTH_BOOLEAN   forward,				         GOTH_INTEGER   entry,				         GOTH_STRING    rectfunc,				         GOTH_STRING    pointfunc,				         GOTH_INTEGER   nmbr_params,				         GOTH_VALUE     mbr_params[],				         GOTH_INTEGER   ntrans_params,					 GOTH_VALUE     trans_params[],                                         GOTH_INTEGER   ninput_space_params,				         GOTH_VALUE     input_space_params[]); /*----------------------------------------------------------------------*/ /* EXTERN lsr_version_rac	     		                         */ /*......................................................................*/ /*..DESCRIPTION.........................................................*/ /*                                                                      */ /* Create a version rac from a raster id and a version id.		 */ /* A version rac is the virtual raster dataset which corresponds to an  */ /* rac created through the MRB tree mechanism.				 */ /* The rac descriptor needs to be alloctated before calling this        */ /* routine.                                                             */ /*                                                                      */  /*..ARGUMENTS...........................................................*/ /*                                                                      */ /* parent_rac_id       -in- the descriptor for the version rac.         */ /* version_id   -in- the version rac for the new RAC.			 */ /* *rac_id    -in- the new  rac.					 */  /*                                                                      */ /*..RETURN-CODES........................................................*/ /*                                                                      */ /*  GOTH__NORMAL if operation completes successfully                    */ /*  GOTH__DESC   if the descriptor is not well defined                  */ /*  GOTH__MALLOC if insufficient memory for operation                   */ /*                                                                      */ /*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_version_rac(GD_RAC            parent_rac_id,				   GOTH_ID	     version_id,				   GD_RAC	     *rac_id) ; /*----------------------------------------------------------------------*/ /* EXTERN lsr_create_version_rac     		                         */ /*......................................................................*/ /*..DESCRIPTION.........................................................*/ /*                                                                      */ /* Create a version rac from a raster id and a version id.		 */ /* A version rac is the virtual raster dataset which corresponds to an  */ /* rac created through the MRB tree mechanism.				 */ /* The rac descriptor needs to be alloctated before calling this        */ /* routine.                                                             */ /*                                                                      */  /*..ARGUMENTS...........................................................*/ /*                                                                      */ /* rac_id       -in- the descriptor for the data rac.                   */ /* raster_id    -in- the identifier for the raster.			 */ /* version_id    -in- the identifier for the raster version.	         */ /* access_mode  -in- whether file to be read or written                 */ /*                   (e.g. RAST_READ_ONLY).                             */ /* storage_mode -in- whether to use normal or mapped i/o to access the	*/ /*                   data (e.g. RAST_STORAGE_NORMAL). Normal storage    */ /*                   uses standard C run time library calls to access   */ /*                   data. Mapped access is only available on           */ /*                   VMS and maps the data files into memory.           */ /* width       -out- the width of the whole image in pixels taking      */ /*                   account of possible tile alignment.                */ /* height      -out- the height of the whole image in pixels taking     */ /*                   account of possible tile alignment.                */ /*                                                                      */ /*..RETURN-CODES........................................................*/ /*                                                                      */ /*  GOTH__NORMAL if operation completes successfully                    */ /*  GOTH__DESC   if the descriptor is not well defined                  */ /*  GOTH__BADRASTERACCESS if the access parameter is not well defined   */ /*  GOTH__BADRASTERSTORAGE if the storage parameter is not well defined */ /*  GOTH__MALLOC if insufficient memory for operation                   */ /*                                                                      */ /*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_create_version_rac(GD_RAC            rac_id,					  GOTH_ID	    raster_id,					  GOTH_ID	    version_id,					  RAST_LOCK_TYPE    access_mode,					  RAST_STORAGE_TYPE storage_mode,					  GOTH_INTEGER      *width,					  GOTH_INTEGER      *height);/*----------------------------------------------------------------------*//* EXTERN lsr_create_empty_version_rac 		                        *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Create an empty named versioned data rac and leave open for read     *//* and write.  							        *//* A versioned data rac is the virtual raster dataset which corresponds *//* to raster data and index held in the MRBT structure.			*//* This routine creates a new MRBT structure into which data is written.*//* The rac descriptor needs to be alloctated before calling this        *//* routine.                                                             *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id       -in- the descriptor for the rac.                        */  /* raster_id    -in- the identifier for the raster (i.e tree id).	*//* version_id   -in- the version of the raster to open.			*//* storage_mode -in- the storage mode of the data in the raster.	*//* coord        -in- the identifier for the coordinate system of the    *//*                   raster dataset.                                    *//* scale1       -in- the size of the pixels in  real world coordinates  *//*                   in the primary storage direction.                  */  /* scale2       -in- the size of the pixels in  real world coordinates  *//*                   in the secondary storage direction.                */  /* origin1      -in- the origin of the pixels in  real world coordinate *//*                   in the primary storage direction. The origin       *//*                   specifies the bottom left hand corner of the data  *//*                   window for the raster dataset.                     */  /* origin2      -in- the origin of the pixels in  real world coordinate *//*                   in the secondary storage direction.                */  /* tiling_origin1 -in- the position at which a tile origin is placed    *//*                     in the primary storage direction. The tiling     *//*                     origin specifies a position at which the bottom  *//*                     left hand corner of a tile is to lie. Note       *//*                     that this position need not be the actual        *//*                     bottom left hand corner of the bottom left hand  *//*                     tile in the dataset. The routine places that     *//*                     point so that the raster dataset contains the    *//*                     origin specified above in the bottom left hand   *//*                     tile of the dataset                              *//* tiling_origin2 -in- the position at which a tile origin is placed    *//*                   in the secondary storage direction.                */  /* grid_point   -in- the type of grid point for the raster dataset      *//*                   (e.g. RAST_BY_AREA).                               *//* content_id   -in- an identifier for the content of the data.         *//* image_width  -in- the size of the image to be placed in the rac      *//*                   in the primary storage direction.                  */  /* image_height -in- the size of the image to be placed in the rac      *//*                   in the secondary storage direction.                */  /* tile_width   -in- the size of the tile for the stored data           *//*                   in the primary storage direction.                  */  /* tile_height  -in- the size of the tile for the stored data           *//*                   in the secondary storage direction.                */  /* tile_order   -in- the tile order for storage in the raster dataset   *//*                   (e.g. TILE_ORDER_TL_H).                            *//* pixel_order  -in- the pixel order for storage within a tile of the   *//*                   raster dataset (e.g. PIXEL_ORDER_TL_H)             *//* data_type    -in- the datatype of the image to be stored             *//*                   (e.g. RAST_BINARY).                                *//* pack_type    -in- the packtype of the image to be stored             *//*                   (e.g. RAST_PACK_BYTE).                             *//* nsigbits     -in- the number of significant bits in the image        *//* comp_scheme  -in- the compression scheme to use on the data.         *//*                   If data is not to be compressed the option         *//*                   COMPRESSSION_UNCOMPRESSED should be used.          *//*                   FALSE compression is not to be attempted .         *//* width       -out- the width of the whole image in pixels taking      *//*                   account of possible tile alignment.                *//* height      -out- the height of the whole image in pixels taking     *//*                   account of possible tile alignment.                *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__BADRASTERSTORAGE if the storage parameter is not well defined *//*  GOTH__BADRASTERDATATYPE if the raster datatype is not well defined  *//*  GOTH__BADRASTERCOMPRESSION if the compression scheme is not well    *//*                             defined                                  *//*  GOTH__BADRASTERTILING if the tiling strategy is not well defined    *//*  GOTH__BADGRID if the grid parameters are not well defined           *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_create_empty_version_rac(					     GD_RAC            rac_id,					     GOTH_ID           raster_id,					     GOTH_ID           version_id,                                             RAST_STORAGE_TYPE storage_mode,				             GOTH_STRING       coord,					     GOTH_REAL         scale1,					     GOTH_REAL         scale2,					     GOTH_REAL         origin1,					     GOTH_REAL         origin2,                                             GOTH_REAL         tiling_origin1,                                             GOTH_REAL         tiling_origin2,                                             RAST_POINT_TYPE   grid_point,                                             GOTH_INTEGER      content_id,                			     GOTH_INTEGER      image_width,			                     GOTH_INTEGER      image_height,                 		             GOTH_INTEGER      tile_width,			                     GOTH_INTEGER      tile_height,                 		             TILE_ORDER_TYPE   tile_order,			                     PIXEL_ORDER_TYPE  pixel_order,                  		             RAST_DATA_TYPE    data_type,                 		             RAST_PACK_TYPE    pack_type,                 		             GOTH_INTEGER      nsigbits,                                             COMPRESSION_TYPE  comp_scheme,                                             GOTH_INTEGER      *width,                                             GOTH_INTEGER      *height) ;/*----------------------------------------------------------------------*//* EXTERN lsr_create_layered_rac                                        *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Create a new rac which is to be a function of the data in an         *//* overlapping sequence of other racs.                                  *//* All the overlapping racs must be tile aligned and have a consistent  *//* tiling strategy.                                                     *//* If they are not transform racs should be used to ensure this         *//* condition on the rac which is passed as input to this routine.       *//*                                                                      *//* On creation the layered rac inherits all the spatial attributes      *//* of the first rac specified in its input array of constituent racs.   *//*                                                                      */ /* After the calling of this routine the particular transformation      *//* required may be specified by calling the routine                     */ /* @ <<lsr_set_rac_layered>> for a layering transformations.            *//*                                                                      */ /* This routine registers a call-back function which will be evaluated  *//* to create every tile of the layered rac.                             *//*..ARGUMENTS...........................................................*//*                                                                      *//*                                                                      *//* rac_id          -in- the descriptor for the rac.                     *//* nsource_rac_ids -in- the number of racs to layer.                    *//* source_rac_ids  -in- the racs to layer.                              */ /* access_mode     -in- whether file to be read or written              *//*                      (e.g. RAST_READ).                               *//* data_type       -in- the datatype of the layered rac.                *//* pack_type       -in- the packtype of the layered rac.                *//* nsigbits        -in- the number of significant bits of the layer rac.*//* content         -in- the content identifier of the layer rac.        *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__RASTERDATALOCK if the data used by this operation is locked   *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_create_layered_rac(GD_RAC          rac_id,                                          GOTH_INTEGER    nsource_rac_ids,                                          GD_RAC          source_rac_ids[],				          RAST_LOCK_TYPE  access_mode,                 			  RAST_DATA_TYPE  data_type,                 			  RAST_PACK_TYPE  pack_type,                 			  GOTH_INTEGER    nsigbits,                                          GOTH_INTEGER    content);/*----------------------------------------------------------------------*//* EXTERN lsr_create_tiled_rac                                          *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Create a new rac which is to be a tiling of the data in an possibly  *//* overlapping sequence of other racs                                   *//* All the overlapping racs must be tile aligned and contain the same   *//* type of data.                                                        *//* If they are not a transform rac should be used to ensure this        *//* condition on the rac which is passed as input to this routine.       *//*                                                                      */ /* On creation the layered rac inherits all the attributes              *//* of the first rac specified in its input array of constituent racs.   *//*                                                                      */ /* After the calling of this routine the particular transformation      *//* required may be specified by calling the routine                     */ /* @ <<lsr_set_rac_tiled>> for a tiling transformation.                 *//*                                                                      */ /* This routine registers a call-back function which will be evaluated  *//* to create every tile of the TILING rac in which there are overlapping*//* tiles in the constituent racs.                                       *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id          -in- the descriptor for the rac                      *//* nsource_rac_ids -in- the number of racs to tile                      *//* source_rac_ids  -in- the racs to tile                                */ /* access_mode     -in- whether file to be read or written              *//*                      (e.g. RAST_READ)                                *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__RASTERDATALOCK if the data used by this operation is locked   *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_create_tiled_rac(GD_RAC         rac_id,                                        GOTH_INTEGER   nsource_rac_ids,                                        GD_RAC         source_rac_ids[],				        RAST_LOCK_TYPE access_mode) ;/*----------------------------------------------------------------------*//* EXTERN lsr_put_header_field						*//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//*  Put a particular header value into the header of a DATA RAC		*//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* filename     -in- the identifier of the dataset (e.g. "osmap").      *//* data_identifier -in- the string identifier of the field to edit.	*//* Possible values of data_identifier are :-				*//*									*//* "version_number" - the dataset version number.                       *//* "image_width"    - the width of the image to be in the dataset.      *//* "image_height"   - the height of the image to be in the dataset.     *//* "data_low1"      - the bottom left data window real world coordinate *//*                    of the data set in the primary storage direction. *//* "data_low2"      - the bottom left data window real world coordinate *//*                    of the data set in the secondary storage          *//*                    direction.                                        *//* "scale1"         - the size of the pixels in real world coordinates  *//*                    in the primary storage direction.                 *//* "scale2"         - the size of the pixels in  real  world coordinates*//*                    in the secondary storage direction.               *//* "tiling_origin1" - the real world position at which a tile origin    *//*                    is placed in the primary storage direction.       *//* "tiling_origin2" - the real world position at which a tile origin    *//*                    is placed in the secondary storage direction.     *//* "point_type"     - the type of grid point (e.g. RAST_BY_AREA).       *//* "coord"          - the identifier for the coordinate system.         *//*                    (needs to be freed by caller)                     *//* "tile_width"     - the size of the tile for the stored data in the   *//*                    primary storage direction.                        *//* "tile_height"    -   the size of the tile for the stored data in the *//*                    secondary storage direction.                      *//* "tile_order"     -    the tile order for storage in the dataset      *//*                    (e.g. TILE_ORDER_TL_H).                           *//* "pixel_order"    -   the pixel order for storage in the tiles of the */   /*                    the dataset (e.g. PIXEL_ORDER_TL_H).              *//* "data_type"      - the datatype of the dataset (e.g. RAST_BINARY).   *//* "pack_type"      - the packtype of the dataset (e.g. RAST_PACK_BYTE).*//* "nsigbits"       - the number of significant bits in the dataset.    *//* "content_id"     - the content identifier for the dataset.           *//* "compressed"     - TRUE if the dataset is compressed.                *//* "comp_scheme"    - the default compression scheme implemented on the *//*                    dataset.                                          *//*									*//* data_value -in-      value holding the data value.			*//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__ERROR  if the data_identifier is not a valid string.		*//*  GOTH__NULL   if a string is NULL.					*//*  GOTH__RASTERBADTYPE if invalid type of rac for operation            *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_put_header_field( GOTH_STRING      filename,				         GOTH_STRING      data_identifier,				         GOTH_VALUE       data_value)  ;/*----------------------------------------------------------------------*//* EXTERN lsr_put_rac_header_field				        *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//*  Put a particular header value into the header of a DATA RAC through *//*  a RAC.								*//*  The routine flushes the RAC cache. The RAC must be open for write	*//*  access.								*//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id     -in- the DATA RAC whose header is to be edited.		*//* data_identifier -in- the string identifier of the field to edit.	*//* Possible values of data_identifier are :-				*//*									*//* "version_number" - the dataset version number.                       *//* "image_width"    - the width of the image to be in the dataset.      *//* "image_height"   - the height of the image to be in the dataset.     *//* "data_low1"      - the bottom left data window real world coordinate *//*                    of the data set in the primary storage direction. *//* "data_low2"      - the bottom left data window real world coordinate *//*                    of the data set in the secondary storage          *//*                    direction.                                        *//* "scale1"         - the size of the pixels in real world coordinates  *//*                    in the primary storage direction.                 *//* "scale2"         - the size of the pixels in  real  world coordinates*//*                    in the secondary storage direction.               *//* "tiling_origin1" - the real world position at which a tile origin    *//*                    is placed in the primary storage direction.       *//* "tiling_origin2" - the real world position at which a tile origin    *//*                    is placed in the secondary storage direction.     *//* "point_type"     - the type of grid point (e.g. RAST_BY_AREA).       *//* "coord"          - the identifier for the coordinate system.         *//*                    (needs to be freed by caller)                     *//* "tile_width"     - the size of the tile for the stored data in the   *//*                    primary storage direction.                        *//* "tile_height"    -   the size of the tile for the stored data in the *//*                    secondary storage direction.                      *//* "tile_order"     -    the tile order for storage in the dataset      *//*                    (e.g. TILE_ORDER_TL_H).                           *//* "pixel_order"    -   the pixel order for storage in the tiles of the */   /*                    the dataset (e.g. PIXEL_ORDER_TL_H).              *//* "data_type"      - the datatype of the dataset (e.g. RAST_BINARY).   *//* "pack_type"      - the packtype of the dataset (e.g. RAST_PACK_BYTE).*//* "nsigbits"       - the number of significant bits in the dataset.    *//* "content_id"     - the content identifier for the dataset.           *//* "compressed"     - TRUE if the dataset is compressed.                *//* "comp_scheme"    - the default compression scheme implemented on the *//*                    dataset.                                          *//*									*//* data_value -in-      value holding the data value.			*//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__ERROR  if the data_identifier is not a valid string.		*//*  GOTH__NULL   if a string is NULL.					*//*  GOTH__RASTERBADTYPE if invalid type of rac for operation            *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_put_rac_header_field(GD_RAC	     rac_id,					    GOTH_STRING      data_identifier,					    GOTH_VALUE       data_value) ;/*----------------------------------------------------------------------*//* EXTERN lsr_put_header_data                                           *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//*  Put the data within the header of a data rac.                       *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* filename     -in- the identifier of the dataset (e.g. "osmap").      *//* overwrite    -in- force overwrite of the header if it exists.	*//* version_number -in- the dataset version number.                      *//* image_width  -in- the width of the image to be in the dataset.       *//* image_height -in- the height of the image to be in the dataset.      *//* data_low1    -in- the bottom left data window real world coordinate  *//*                    of the data set in the primary storage direction. *//* data_low2    -in- the bottom left data window real world coordinate  *//*                    of the data set in the secondary storage          *//*                    direction.                                        *//* scale1       -in- the size of the pixels in real world coordinates   *//*                    in the primary storage direction.                 *//* scale2       -in- the size of the pixels in  real  world coordinates *//*                    in the secondary storage direction.               *//* tiling_origin1 -in- the real world position at which a tile origin   *//*                      is placed in the primary storage direction.     *//* tiling_origin2 -in- the real world position at which a tile origin   *//*                      is placed in the secondary storage direction.   *//* point_type   -in- the type of grid point (e.g. RAST_BY_AREA).        *//* coord        -in- the identifier for the coordinate system.          *//*                    (needs to be freed by caller)                     *//* tile_width   -in- the size of the tile for the stored data in the    *//*                    primary storage direction.                        *//* tile_height  -in- the size of the tile for the stored data in the    *//*                    secondary storage direction.                      *//* tile_order   -in- the tile order for storage in the dataset          *//*                    (e.g. TILE_ORDER_TL_H).                           *//* pixel_order  -in- the pixel order for storage in the tiles of the    */   /*                    the dataset (e.g. PIXEL_ORDER_TL_H).              *//* data_type    -in- the datatype of the dataset (e.g. RAST_BINARY).    *//* pack_type    -in- the packtype of the dataset (e.g. RAST_PACK_BYTE). *//* nsigbits     -in- the number of significant bits in the dataset.     *//* content_id   -in- the content identifier for the dataset.            *//* compressed   -in- TRUE if the dataset is compressed.                 *//* comp_scheme  -in- the default compression scheme implemented on the  *//*                    dataset.                                          *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__NULL   if a string is NULL					*//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_put_header_data(  GOTH_STRING      filename,				         GOTH_BOOLEAN     overwrite,                                         GOTH_INTEGER     version_number,                                         GOTH_INTEGER     image_width,                                         GOTH_INTEGER     image_height,                                         GOTH_REAL        data_low1,                                         GOTH_REAL        data_low2,                                         GOTH_REAL        scale1,                                         GOTH_REAL        scale2,                                         GOTH_REAL        tiling_origin1,                                         GOTH_REAL        tiling_origin2,                                         RAST_POINT_TYPE  point_type,                                         GOTH_STRING      coord,                                         GOTH_INTEGER     tile_width,                                           GOTH_INTEGER     tile_height,                                         TILE_ORDER_TYPE  tile_order,                                           PIXEL_ORDER_TYPE pixel_order,                                           RAST_DATA_TYPE   data_type,                                         RAST_PACK_TYPE   pack_type,                                         GOTH_INTEGER     nsigbits,                                         GOTH_INTEGER     content_id,                                         GOTH_BOOLEAN     compressed,                                         COMPRESSION_TYPE comp_scheme) ;/*----------------------------------------------------------------------*//* EXTERN lsr_get_header_data                                           *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//*  Get the data within the header of a data rac.                       *//*  This routine may be used to read the header data within a rac       *//*  without actually opening the data for the rac.                      *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* filename     -in- the identifier of the dataset (e.g. "osmap").      *//* version_number -out- the dataset version number.                     *//* image_width  -out- the width of the image to be in the dataset.      *//* image_height -out- the height of the image to be in the dataset.     *//* data_low1    -out- the bottom left data window real world coordinate *//*                    of the data set in the primary storage direction. *//* data_low2    -out- the bottom left data window real world coordinate *//*                    of the data set in the secondary storage          *//*                    direction.                                        *//* data_high1   -out- the top right data window real world coordinate   *//*                    of the data set in the primary storage direction. *//* data_high2   -out- the top right data window real world coordinate   *//*                    of the data set in the secondary storage          *//*                    direction.                                        *//* scale1       -out- the size of the pixels in real world coordinates  *//*                    in the primary storage direction.                 *//* scale2       -out- the size of the pixels in  real  world coordinates*//*                    in the secondary storage direction.               *//* tiling_origin1 -out- the real world position at which a tile origin  *//*                      is placed in the primary storage direction.     *//* tiling_origin2 -out- the real world position at which a tile origin  *//*                      is placed in the secondary storage direction.   *//* point_type   -out- the type of grid point (e.g. RAST_BY_AREA).       *//* coord        -out- the identifier for the coordinate system.         *//*                    (needs to be freed by caller)                     *//* tile_width   -out- the size of the tile for the stored data in the   *//*                    primary storage direction.                        *//* tile_height  -out- the size of the tile for the stored data in the   *//*                    secondary storage direction.                      *//* tile_order   -out- the tile order for storage in the dataset         *//*                    (e.g. TILE_ORDER_TL_H).                           *//* pixel_order  -out- the pixel order for storage in the tiles of the   */  /*                    the dataset (e.g. PIXEL_ORDER_TL_H).              *//* data_type    -out- the datatype of the dataset (e.g. RAST_BINARY).   *//* pack_type    -out- the packtype of the dataset (e.g. RAST_PACK_BYTE).*//* nsigbits     -out- the number of significant bits in the dataset.    *//* content_id   -out- the content identifier for the dataset.           *//* compressed   -out- TRUE if the dataset is compressed.                *//* comp_scheme  -out- the default compression scheme implemented on the *//*                    dataset.                                          *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_get_header_data(  GOTH_STRING      filename,                                         GOTH_INTEGER     *version_number,                                         GOTH_INTEGER     *image_width,                                         GOTH_INTEGER     *image_height,                                         GOTH_REAL        *data_low1,                                         GOTH_REAL        *data_low2,                                         GOTH_REAL        *data_high1,                                         GOTH_REAL        *data_high2,                                         GOTH_REAL        *scale1,                                         GOTH_REAL        *scale2,                                         GOTH_REAL        *tiling_origin1,                                         GOTH_REAL        *tiling_origin2,                                         RAST_POINT_TYPE  *point_type,                                         GOTH_STRING      *coord,                                         GOTH_INTEGER     *tile_width,                                           GOTH_INTEGER     *tile_height,                                         TILE_ORDER_TYPE  *tile_order,                                           PIXEL_ORDER_TYPE *pixel_order,                                           RAST_DATA_TYPE   *data_type,                                         RAST_PACK_TYPE   *pack_type,                                         GOTH_INTEGER     *nsigbits,                                         GOTH_INTEGER     *content_id,                                         GOTH_BOOLEAN     *compressed,                                         COMPRESSION_TYPE *comp_scheme) ;/*----------------------------------------------------------------------*//* EXTERN lsr_access                                                    *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Test if an LSR data file exists and if so whether it is available    *//* for read and write.                                                  *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* filename -in-  name of the dataset (e.g. "osmap").                   *//* exists   -out- TRUE if data exists.                                  *//* readable -out- TRUE if data readable.                                *//* writable -out- TRUE if data writable.                                *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_access(GOTH_STRING    filename,                              GOTH_BOOLEAN   *exists,                              GOTH_BOOLEAN   *readable,                              GOTH_BOOLEAN   *writable) ;/*----------------------------------------------------------------------*//* EXTERN lsr_rename                                                    *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Rename a LSR dataset to a new LSR dataset.				*//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* filename_in -in-  name of the dataset to rename from (e.g. "osmap"). *//* filename_out -in-  name of the dataset to rename to (e.g. "osmap_new")*//* overwrite    -in-  if TRUE overwrite any existing target file.	*//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_rename(GOTH_STRING    filename_in,                              GOTH_STRING    filename_out,                              GOTH_BOOLEAN   overwrite) ;/*----------------------------------------------------------------------*//* EXTERN lsr_copy                                                      *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Copy a LSR dataset to a new LSR dataset.				*//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* filename_in -in-  name of the dataset to copy from (e.g. "osmap").   *//* filename_out -in-  name of the dataset to copy (e.g. "osmap_new").   *//* overwrite    -in-  if TRUE overwrite any existing target file.	*//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_copy(GOTH_STRING    filename_in,                            GOTH_STRING    filename_out,                            GOTH_BOOLEAN   overwrite) ;/*----------------------------------------------------------------------*//* EXTERN lsr_create_data_rac                                           *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Create a data rac from a named dataset stored in LSR format.         *//* A data rac is the virtual raster dataset which corresponds to an LSR *//* format file.                                                         *//* The rac descriptor needs to be alloctated before calling this        *//* routine.                                                             *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id       -in- the descriptor for the data rac.                   *//* filename     -in- the identifier of the dataset (e.g. "osmap").      *//* access_mode  -in- whether file to be read or written                 *//*                   (e.g. RAST_READ).                                  *//* storage_mode -in- whether to use normal or mapped i/o to access the	*//*                   data (e.g. RAST_STORAGE_NORMAL). Normal storage    *//*                   uses standard C run time library calls to access   *//*                   data. Mapped access is only available on           *//*                   VMS and maps the data files into memory.           *//* mem_index    -in- TRUE hold index in memory. At start up the index   *//*                   for the file is read into memory and kept there.  !*//*                   FALSE read memory from disk. The index is read     *//*                   from the disk whenever it needs to be accessed.    *//* width       -out- the width of the whole image in pixels taking      *//*                   account of possible tile alignment.                *//* height      -out- the height of the whole image in pixels taking     *//*                   account of possible tile alignment.                *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__BADRASTERACCESS if the access parameter is not well defined   *//*  GOTH__BADRASTERSTORAGE if the storage parameter is not well defined *//*  GOTH__MALLOC if insufficient memory for operation                   *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_create_data_rac(GD_RAC            rac_id,                                       GOTH_STRING       filename,			               RAST_LOCK_TYPE    access_mode,                                       RAST_STORAGE_TYPE storage_mode,                                       GOTH_BOOLEAN      mem_index,         	        	       GOTH_INTEGER      *width,				       GOTH_INTEGER      *height);/*----------------------------------------------------------------------*//* EXTERN lsr_create_empty_data_rac                                     *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Create an empty named data rac and leave open for read and write.    *//* A data rac is the virtual raster dataset which corresponds to an LSR *//* format file.                                                         *//* This routine creates a new LSR format raster dataset into which data *//* is written.                                                          *//* The rac descriptor needs to be alloctated before calling this        *//* routine.                                                             *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id       -in- the descriptor for the rac.                        */  /* filename     -in- the identifier of the dataset (e.g. "osmap").      */  /* coord        -in- the identifier for the coordinate system of the    *//*                   raster dataset.                                    *//* scale1       -in- the size of the pixels in  real world coordinates  *//*                   in the primary storage direction.                  */  /* scale2       -in- the size of the pixels in  real world coordinates  *//*                   in the secondary storage direction.                */  /* origin1      -in- the origin of the pixels in  real world coordinate *//*                   in the primary storage direction. The origin       *//*                   specifies the bottom left hand corner of the data  *//*                   window for the raster dataset.                     */  /* origin2      -in- the origin of the pixels in  real world coordinate *//*                   in the secondary storage direction.                */  /* tiling_origin1 -in- the position at which a tile origin is placed    *//*                     in the primary storage direction. The tiling     *//*                     origin specifies a position at which the bottom  *//*                     left hand corner of a tile is to lie. Note       *//*                     that this position need not be the actual        *//*                     bottom left hand corner of the bottom left hand  *//*                     tile in the dataset. The routine places that     *//*                     point so that the raster dataset contains the    *//*                     origin specified above in the bottom left hand   *//*                     tile of the dataset                              *//* tiling_origin2 -in- the position at which a tile origin is placed    *//*                   in the secondary storage direction.                */  /* grid_point   -in- the type of grid point for the raster dataset      *//*                   (e.g. RAST_BY_AREA).                               *//* storage_mode -in- whether to use normal or mapped i/o to access the	*//*                   data (e.g. RAST_STORAGE_NORMAL). Normal storage    *//*                   uses standard C run time library calls to access   *//*                   data. Mapped access is only available on           *//*                   VMS and maps the data files into memory.           *//* content_id   -in- an identifier for the content of the data.         *//* image_width  -in- the size of the image to be placed in the rac      *//*                   in the primary storage direction.                  */  /* image_height -in- the size of the image to be placed in the rac      *//*                   in the secondary storage direction.                */  /* tile_width   -in- the size of the tile for the stored data           *//*                   in the primary storage direction.                  */  /* tile_height  -in- the size of the tile for the stored data           *//*                   in the secondary storage direction.                */  /* tile_order   -in- the tile order for storage in the raster dataset   *//*                   (e.g. TILE_ORDER_TL_H).                            *//* pixel_order  -in- the pixel order for storage within a tile of the   *//*                   raster dataset (e.g. PIXEL_ORDER_TL_H)             *//* data_type    -in- the datatype of the image to be stored             *//*                   (e.g. RAST_BINARY).                                *//* pack_type    -in- the packtype of the image to be stored             *//*                   (e.g. RAST_PACK_BYTE).                             *//* nsigbits     -in- the number of significant bits in the image        *//* comp_scheme  -in- the compression scheme to use on the data.         *//*                   If data is not to be compressed the option         *//*                   COMPRESSSION_UNCOMPRESSED should be used.          *//*                   FALSE compression is not to be attempted .         *//* mem_index    -in- TRUE hold index in memory. At start up the index   *//*                   for the file is read into memory and kept there.  !*//*                   FALSE read memory from disk. The index is read     *//*                   from the disk whenever it needs to be accessed.    *//* width       -out- the width of the whole image in pixels taking      *//*                   account of possible tile alignment.                *//* height      -out- the height of the whole image in pixels taking     *//*                   account of possible tile alignment.                *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__BADRASTERSTORAGE if the storage parameter is not well defined *//*  GOTH__BADRASTERDATATYPE if the raster datatype is not well defined  *//*  GOTH__BADRASTERCOMPRESSION if the compression scheme is not well    *//*                             defined                                  *//*  GOTH__BADRASTERTILING if the tiling strategy is not well defined    *//*  GOTH__BADGRID if the grid parameters are not well defined           *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_create_empty_data_rac(GD_RAC            rac_id,                                             GOTH_STRING       filename,                                             GOTH_STRING       coord,                                             GOTH_REAL         scale1,                                             GOTH_REAL         scale2,                                             GOTH_REAL         origin1,                                             GOTH_REAL         origin2,                                             GOTH_REAL         tiling_origin1,                                             GOTH_REAL         tiling_origin2,                                             RAST_POINT_TYPE   grid_point,                                             RAST_STORAGE_TYPE storage_mode,                                             GOTH_INTEGER      content_id,                			     GOTH_INTEGER      image_width,			                     GOTH_INTEGER      image_height,                 		             GOTH_INTEGER      tile_width,			                     GOTH_INTEGER      tile_height,                 		             TILE_ORDER_TYPE   tile_order,			                     PIXEL_ORDER_TYPE  pixel_order,                  		             RAST_DATA_TYPE    data_type,                 		             RAST_PACK_TYPE    pack_type,                 		             GOTH_INTEGER      nsigbits,                                             COMPRESSION_TYPE  comp_scheme,                                             GOTH_BOOLEAN      mem_index,                                             GOTH_INTEGER      *width,                                             GOTH_INTEGER      *height);/*----------------------------------------------------------------------*//* EXTERN lsr_create_external_rac                                       *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Create an external rac.                                              *//*                                                                      */ /* An external rac turns data into the format understood by the LSR     *//* library from external sources of data defined by the user.           *//*                                                                      */ /* Examples of where an external rac may be used include the import of  *//* data from another raster data format so that the processing available*//* in the LSR library can be applied to the data, or the creation of    *//* raster data from non-raster sources. Alternatively an external rac   *//* can be used to covert LSR files to an external format or create      *//* non-raster data form an LSR file.                                    *//*                                                                      */ /* After the calling of this routine the particular mechanism by which  *//* the required data is to be calculated is specified by calling        */  /* @ <<lsr_set_rac_external>> for an external transformation.           *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id       -in- the descriptor for the rac.                        */  /* access_mode  -in- whether file to be read or written                 *//*                   (e.g. RAST_READ).                                  *//* coord        -in- the identifier for the coordinate system of the    *//*                   raster dataset.                                    *//* scale1       -in- the size of the pixels in  real world coordinates  *//*                   in the primary storage direction.                  */  /* scale2       -in- the size of the pixels in  real world coordinates  *//*                   in the secondary storage direction.                */  /* origin1      -in- the origin of the pixels in  real world coordinate *//*                   in the primary storage direction. The origin       *//*                   specifies the bottom left hand corner of the data  *//*                   window for the raster dataset.                     */  /* origin2      -in- the origin of the pixels in  real world coordinate *//*                   in the secondary storage direction.                */  /* tiling_origin1 -in- the position at which a tile origin is placed    *//*                     in the primary storage direction. The tiling     *//*                     origin specifies a position at which the bottom  *//*                     left hand corner of a tile is to lie. Note       *//*                     that this position need not be the actual        *//*                     bottom left hand corner of the bottom left hand  *//*                     tile in the dataset. The routine places that     *//*                     point so that the raster dataset contains the    *//*                     origin specified above in the bottom left hand   *//*                     tile of the dataset                              *//* tiling_origin2 -in- the position at which a tile origin is placed    *//*                   in the secondary storage direction.                */  /* grid_point   -in- the type of grid point for the raster dataset      *//*                   (e.g. RAST_BY_AREA).                               *//* content_id   -in- an identifier for the content of the data.         *//* image_width  -in- the size of the image to be placed in the rac      *//*                   in the primary storage direction.                  */  /* image_height -in- the size of the image to be placed in the rac      *//*                   in the secondary storage direction.                */  /* tile_width   -in- the size of the tile for the stored data           *//*                   in the primary storage direction.                  */  /* tile_height  -in- the size of the tile for the stored data           *//*                   in the secondary storage direction.                */  /* tile_order   -in- the tile order for storage in the raster dataset   *//*                   (e.g. TILE_ORDER_TL_H).                            *//* pixel_order  -in- the pixel order for storage within a tile of the   *//*                   raster dataset (e.g. PIXEL_ORDER_TL_H)             *//* data_type    -in- the datatype of the image to be stored             *//*                   (e.g. RAST_BINARY).                                *//* pack_type    -in- the packtype of the image to be stored             *//*                   (e.g. RAST_PACK_BYTE).                             *//* nsigbits     -in- the number of significant bits in the image        *//* width       -out- the width of the whole image in pixels taking      *//*                   account of possible tile alignment.                *//* height      -out- the height of the whole image in pixels taking     *//*                   account of possible tile alignment.                *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__BADRASTERACCESS if the access parameter is not well defined   *//*  GOTH__BADRASTERDATATYPE if the raster datatype is not well defined  *//*  GOTH__BADRASTERTILING if the tiling strategy is not well defined    *//*  GOTH__BADGRID if the grid parameters are not well defined            *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_create_external_rac(GD_RAC           rac_id,					   RAST_LOCK_TYPE   access_mode,                                           GOTH_STRING      coord,                                           GOTH_REAL        scale1,                                           GOTH_REAL        scale2,                                           GOTH_REAL        origin1,                                           GOTH_REAL        origin2,                                           GOTH_REAL        tiling_origin1,                                           GOTH_REAL        tiling_origin2,                                           RAST_POINT_TYPE  grid_point,                                           GOTH_INTEGER     content_id,                 			   GOTH_INTEGER     image_width,			                   GOTH_INTEGER     image_height,                 			   GOTH_INTEGER     tile_width,			                   GOTH_INTEGER     tile_height,                 			   TILE_ORDER_TYPE  tile_order,			                   PIXEL_ORDER_TYPE pixel_order,                  		           RAST_DATA_TYPE   data_type,                 		           RAST_PACK_TYPE   pack_type,                 			   GOTH_INTEGER     nsigbits,                                           GOTH_INTEGER     *width,                                           GOTH_INTEGER     *height);/*----------------------------------------------------------------------*//* EXTERN lsr_create_ext                                                *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Create an extent.                                                    *//* An extent specifies a rectangular area of interest in real world     *//* coordinates.                                                         *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* extent_id -in- the extent descriptor.                                *//* low1      -in- bottom left corner in real world coordinate in the    *//*                primary direction.                                    *//* low2      -in- bottom left corner in real world coordinate in the    *//*                secondary direction.                                  *//* high1     -in- top right corner in real world coordinate in the      *//*                primary direction.                                    *//* high2     -in- top right corner in real world coordinate             *//*                secondary direction.                                  *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__BADEXTENT if the extent parameters are not well defined       *//*  GOTH__MALLOC if insufficient memory for operation                   *//*                                                                      *//*----------------------------------------------------------------------*/ extern GOTH_STATUS lsr_create_ext(GD_EXTENT extent_id,                                  GOTH_REAL low1,                                    GOTH_REAL low2,                                  GOTH_REAL high1,                                   GOTH_REAL high2);/*----------------------------------------------------------------------*//* EXTERN lsr_create_reg                                                *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Create a region. A region is the dynamic structure to which a rac is *//* attached to enable the data within the rac to be accessed.           *//*                                                                      *//* A region effectively consists of a buffer, and two extents. The      *//* buffer holds the data to be transferred to and from the application. *//* The two extents specify the data which the user wishes to access or  *//* place into the raster dataset ( the in extent), and the data wich has*//* actually been accessed (the out extent) . The former may not agree   *//* with the latter due to the alignment which the user has specified.   *//*                                                                      *//* Regions can be of two basic types.                                   *//*                                                                      *//* A copy type region has its own internal buffer which is used to      *//* transfer data between the raster data set and the application. This  *//* buffer may also be external to region, that is the user may attach   *//* his own buffer to the region. This technique is sometimes useful when*//* data is being placed into a raster dataset as there is then no need  *//* to copy the external data into the regions own internal buffer.      *//* Note region buffer parameters are only relevant for a copy type      *//* region. Access to a copy type region can be defined to be pixel      *//* byte or tile aligned.                                                *//*                                                                      *//* A pointer type region is only used to read data and gives direct     *//* access to the data held within the tile cache. A pointer type access *//* is normally used within a loop as it returns one tile at a time until*//* the area requested by the user has been coverd. The user should not  *//* try to edit the buffers returned through a pointer region.           */  /*                                                                      *//* The area to be accessed is defined in real world coordinates. The    *//* area returned is determined by the user specified extent and the     *//* alignment. Alignment can be either pixel,byte or tile aligned.       *//*                                                                      *//*..ARGUMENTS...........................................................*//*                                                                      *//* region_id        -in- the region descriptor.                         *//* region_type      -in- the region type (e.g. REGION_COPY).            *//* alignment        -in- the alignment type for the region              *//*                       (e.g REGION_TILE_EXTENDED).                    *//* init_buffer_size -in- the region buffer size required.               *//* max_buffer_size  -in- the maximum allowable buffer size.             *//* fixed_size       -in- TRUE buffer cannot have size altered.         !*//*                       FALSE buffer_size can be increased up to size  *//*                             of max_buffer_size.                      *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__BADREGION if the region parameters are not well defined       *//*  GOTH__MALLOC if insufficient memory for operation                   *//*                                                                      *//*----------------------------------------------------------------------*/ extern GOTH_STATUS lsr_create_reg(GD_REGION region_id,                                  REGION_TYPE  region_type,                                  REGION_ALIGNMENT_TYPE alignment,                                    GOTH_INTEGER init_buffer_size,                                  GOTH_INTEGER max_buffer_size,                                  GOTH_BOOLEAN fixed_size);/*----------------------------------------------------------------------*//* EXTERN lsr_get_rac_data_window                                       *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Get the data window associated with a rac.                           *//* The data window specifies the extent within the rac which specifies  *//* the region of interest. Areas of the raster dataset which lie outside*//* the data window are masked with the unknown pixel value.             *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id    -in- the rac descriptor                                    *//* low1      -out- bottom left corner of the data window in real world  *//*                coordinates for the primary storage direction.        *//* low2      -out- bottom left corner of the data window in real world  *//*                coordinates for the secondary storage direction.      *//* high1     -out- top right corner of the data window in real world    *//*                coordinates for the primary storage direction.        *//* high2     -out- top right corner of the data window in real world    *//*                coordinates for the secondary storage direction.      *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_get_rac_data_window(GD_RAC          rac_id,                                           GOTH_REAL       *low1,                                           GOTH_REAL       *low2,                                           GOTH_REAL       *high1,                                           GOTH_REAL       *high2) ;/*----------------------------------------------------------------------*//* EXTERN lsr_get_rac_pixel_type                                        *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Get the type of a rac pixel.                                         *//* The type of a rac may be point type for pixels which represent       *//* discrete locations and area type for pixels which are representative *//* values of some area.                                                 *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id        -in- the rac descriptor.                               *//* pixtype       -out- the pixel type of the rac (e.g. RAST_BY_AREA).   *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_get_rac_pixel_type(GD_RAC          rac_id,                                          RAST_POINT_TYPE *pixtype) ;/*----------------------------------------------------------------------*//* EXTERN lsr_get_rac_pixels_bits                                       *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Get the number of bits in a rac pixel.                               *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id       -in- the rac descriptor.                                *//* nbits_total -out- the number of bits per pixel including packing.    *//* nbits_sig   -out- the number of significant bits per pixel.          *//* 									*//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_get_rac_pixel_bits(GD_RAC       rac_id,                                          GOTH_INTEGER *nbits_total,                                          GOTH_INTEGER *nbits_sig) ;/*----------------------------------------------------------------------*//* EXTERN lsr_get_rac_pack_pixel_planes                                 *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Get the number of planes in a rac pixel assuming one pixel per	*//* pack type unit				                        *//*									*//*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id        -in- the rac descriptor.                               *//* nplanes       -out- the number of planes.                            *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_get_rac_pack_pixel_planes(GD_RAC       rac_id,						 GOTH_INTEGER *nplanes) ;/*----------------------------------------------------------------------*//* EXTERN lsr_get_rac_pixel_planes                                      *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Get the number of planes in a rac pixel.                             *//* The number of planes is three for RGB data and one for other types   *//* of data.                                                             *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id        -in- the rac descriptor.                               *//* nplanes       -out- the number of planes.                            *//* plane_bits    -out- the number of bits per plane .                   *//* plane_sigbits -out- the number of significant bits per plane.        *//* nbits_total   -out- the total number of bits per pixel.              *//* 									*//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_get_rac_pixel_planes(GD_RAC       rac_id,                                            GOTH_INTEGER *nplanes,                                            GOTH_INTEGER *plane_bits,                                            GOTH_INTEGER *plane_sigbits,                                            GOTH_INTEGER *nbits_total) ;/*----------------------------------------------------------------------*//* EXTERN lsr_get_rac_number_pixels                                     *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Get the total number of pixels in a rac dataset.                     *//* The total number of pixels refers to the number of pixels in the tile*//* aligned dataset.                                                     *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id -in- the rac descriptor.                                      *//* npix1 -out- the number of pixels in the first direction.             *//* npix2 -out- the number of pixels in the second.                      *//* 									*//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_get_rac_number_pixels(GD_RAC       rac_id,                                             GOTH_INTEGER *npix1,                                             GOTH_INTEGER *npix2) ;/*----------------------------------------------------------------------*//* EXTERN lsr_get_rac_tile_origin                                       *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Get the tiling origin associated with a rac.                         *//* The tiling origin specifies a point at which the bottom left hand    *//* corner of a tile lies in real world coordinates. Note that this      *//* value is not necessarily the coordinates of the bottom left hand     *//* corner of the bottom left tile in the raster dataset.                *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id   -in- the rac descriptor                                     *//* torigin1 -out- the tile origin in real world coordinates in the      *//*                primary storage direction.                            *//* torigin2 -out- the tile origin in real world coordinates in the      *//*                secondary storage direction.                          *//* 									*//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_get_rac_tile_origin(GD_RAC    rac_id,                                           GOTH_REAL *torigin1,                                           GOTH_REAL *torigin2);/*----------------------------------------------------------------------*//* EXTERN lsr_get_rac_pixel_scale                                       *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Get the scales associated with a rac. The scales represent the size  *//* or spacing of pixels in real world coordinates.                      *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id  -in- the rac descriptor.                                     *//* scale1 -out- the scale along the primary storage direction.          *//* scale2 -out- the scale along the second storage direction.           *//* 									*//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_get_rac_pixel_scale(GD_RAC    rac_id,                                           GOTH_REAL *scale1,                                           GOTH_REAL *scale2);/*----------------------------------------------------------------------*//* EXTERN lsr_get_rac_name						*//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Get the name of a data rac.			                        *//* Note this routine can only be applied to a data rac.                 *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id       -in-  the descriptor of the rac.                        *//* name         -out- the name of the data rac.                         *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__RASTERBADTYPE if invalid type of rac for operation            *//*  GOTH__MALLOC if insufficient memory for operation                   *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_get_rac_name(GD_RAC          rac_id,                                    GOTH_STRING     *name) ;/*----------------------------------------------------------------------*//* EXTERN lsr_get_rac_content                                           *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Get the content identifier of a rac.                                 *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id   -in- the rac descriptor.                                    *//* content -out- the content identifier of the rac.                     *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_get_rac_content(GD_RAC          rac_id,                                       GOTH_INTEGER    *content) ;/*----------------------------------------------------------------------*//* EXTERN lsr_get_rac_type                                              *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Get the type of a rac.                                               *//* This routine returns the rac type. The rac type is dependent upon    *//* the creation routine, for instance <<lsr_create_data_rac>> produces  *//* a RAC of type RAST_DATA.                                             *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id -in- the rac descriptor.                                      *//* type   -out- the type of the rac (e.g. RAST_DATA).                   *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_get_rac_type(GD_RAC          rac_id,                                    RAC_TYPE        *type) ;/*----------------------------------------------------------------------*//* EXTERN lsr_get_rac_coord_string                                      *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Get the coord text string for a rac.                                 *//* The coordinate string specifies the real world space in which the    *//* raster dataset resides.                                              *//*                                                                      *//* N.B. The string returned is the actual storage string and should not *//* be edited or freed.                                                  *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id    -in- the rac descriptor                                    *//* coord    -out- the string specifying the coordinate system for the   *//*                rac.                                                  *//* coordlen -out- the number of characters in coordinate string.        *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_get_rac_coord_string(GD_RAC       rac_id,                                            GOTH_STRING  *coord,                                            GOTH_INTEGER *coordlen) ;/*----------------------------------------------------------------------*//* EXTERN lsr_get_rac_pixel_origin                                      *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Get the origin associated with a rac.                                *//* This routine returns the real world coordinates of the bottom left   *//* hand corner of the tile aligned raster data set.                     *//* The origin is determined by the tiling origin and the bottom left    *//* hand corner of the data window. It lies at the point which is        *//* consistent with the tiling origin and such that the bottom left hand *//* tile contains the bottom left of the data window.                    *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* 									*//* rac_id    -in-  the rac descriptor.                                  *//* rorigin1  -out- the real world coordinate in the primary storage     *//*                 direction of the origin of the raster.               *//* rorigin2  -out- the real world coordinate in the secondary storage   *//*                 direction of the origin of the raster.               *//* 									*//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_get_rac_pixel_origin(GD_RAC          rac_id,                                            GOTH_REAL       *rorigin1,                                            GOTH_REAL       *rorigin2);/*----------------------------------------------------------------------*//* EXTERN lsr_get_rac_image_size                                        *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Get the total number of pixels in a rac image together with the      *//* offset of the data from the bottom left of the tiled data.           *//* This routine returns the pixel size of the data window of the rac    *//* together with the pixel offset of the bottom left of the data window *//* from the bottom left hand corner of the tile aligned raster dataset. *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id        -in-  the rac descriptor.                              *//* image_width   -out- the image size in pixels in the primary storage  *//*                     direction.                                       *//* image_height  -out- the image size in pixels in the secondary storage*//*                     direction.                                       *//* image_offset1 -out- the offset of the image within the rac in the    *//*                     primary storage direction.                       *//* image_offset2 -out- the offset of the image within the rac in the    *//*                     secondary storage direction.                     *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_get_rac_image(GD_RAC       rac_id,                                     GOTH_INTEGER *image_width,                                      GOTH_INTEGER *image_height,                                     GOTH_INTEGER *image_offset1,                                     GOTH_INTEGER *image_offset2) ;/*----------------------------------------------------------------------*//* EXTERN lsr_get_rac_tiling                                            *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Get the tiling strategy of a rac.                                    *//* This routine returns the parameters which determine how a raster     *//* dataset is tiled.                                                    *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id       -in-  the rac descriptor.                               *//* tile_cols    -out- the number of tiles in the rac in the             *//*                    primary storage direction.                        *//* tile_rows    -out- the number of tiles in the rac in the             *//*                    secondary storage direction.                      *//* ntiles       -out- the total number of tiles in the rac.             *//* tile_width   -out- the number of pixels in a tile in the             *//*                    primary storage direction.                        *//* tile_height  -out- the number of pixels in a tile in the             *//*                    secondary storage direction.                      *//* npixels      -out- the total number of pixels in a tile.             *//* tile_size    -out- the byte size of a tile.                          *//* tile_order   -out- the storage ordering of the tiles                 *//*                    (e.g. TILE_ORDER_TL_H).                           *//* pixel_order  -out- the pixel storage order within a tile             *//*                    (e.g. TILE_ORDER_TL_H).                           *//* image_width  -out- the image size in pixels in the primary storage   *//*                    direction.                                        *//* image_height -out- the image size in pixels in the secondary storage *//*                    direction.                                        *//* total_width  -out- the total size in pixels in the primary storage   *//*                    direction including tile alignment.               *//* total_height -out- the total size in pixels in the secondary storage *//*                    direction including tile alignment.               *//* total_pixels -out- the total number of pixels in tile aligned        *//*                    dataset.                                          *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_get_rac_tiling(GD_RAC           rac_id,                                      GOTH_INTEGER     *tile_cols,                                      GOTH_INTEGER     *tile_rows,                                       GOTH_INTEGER     *ntiles,                                      GOTH_INTEGER     *tile_width,                                       GOTH_INTEGER     *tile_height,                                      GOTH_INTEGER     *npixels,                                      GOTH_INTEGER     *tile_size,                                      TILE_ORDER_TYPE  *tile_order,                                      PIXEL_ORDER_TYPE *pixel_order,                                      GOTH_INTEGER     *image_width,                                       GOTH_INTEGER     *image_height,                                      GOTH_INTEGER     *total_width,                                       GOTH_INTEGER     *total_height,                                      GOTH_INTEGER     *total_pixels);/*----------------------------------------------------------------------*//* EXTERN lsr_get_rac_tile_size                                         *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Get the tile size of the rac.                                        *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id       -in-  the rac descriptor.                               *//* tile_width   -out- the number of pixels in a tile in the             *//*                    primary storage direction.                        *//* tile_height  -out- the number of pixels in a tile in the             *//*                    secondary storage direction.                      *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_get_rac_tile_size(GD_RAC       rac_id,                                         GOTH_INTEGER *tile_width,                                          GOTH_INTEGER *tile_height) ;/*----------------------------------------------------------------------*//* EXTERN lsr_get_rac_datatype                                          *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Get the data type associated with a rac.                             *//*                                                                      *//* The data type is described by three parameters. The raster datatype  *//* gives a very basic description of the sort of data within the        *//* dataset, for instance whether it is binary,greyscale,,coded or RGB   *//* data.                                                                *//*                                                                      *//* The raster packtype determines whether pixels are packed in bits     *//* bytes,integers or reals etc.                                         *//*                                                                      *//* The number of significant bits determines what parts of the packed   *//* data represents the actual data. Thus a byte packed greyscale image  *//* with 32 levels of greyscale should have the number of significant    *//* bits set to 5.                                                       *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id   -in- the rac descriptor.                                    *//* datatype -out- the datatype of the rac (e.g RAST_BINARY).            *//* packtype -out- the packing of the data (e.g RAST_PACK_BIT).          *//* nsigbits -out- the number of significant bits in the data.           *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_get_rac_datatype(GD_RAC          rac_id,                                        RAST_DATA_TYPE  *datatype,                                        RAST_PACK_TYPE  *packtype,                                        GOTH_INTEGER    *nsigbits);/*----------------------------------------------------------------------*//* EXTERN lsr_get_rac_compression                                       *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Get the compression scheme used on a data rac.                       *//* A data rac has a default compression scheme specified in the call    *//* to lsr_create_empty_data_rac which created the raster dataset. This  *//* default may be overwritten or reset using a call to                  *//* <<lsr_set_rac_compresssion>>.                                        *//*                                                                      */ /* Note this routine can only be applied to a data rac.                 *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id       -in-  the descriptor of the rac.                        *//* comp_scheme  -out- the compression scheme currently implemented on   *//*                    the data rac.                                     *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__RASTERBADTYPE if invalid type of rac for operation            *//*  GOTH__MALLOC if insufficient memory for operation                   *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_get_rac_compression(GD_RAC          rac_id,                                           COMPRESSION_TYPE *comp_scheme);/*----------------------------------------------------------------------*//* EXTERN lsr_get_rac_unknown_real	                                *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      */ /* Get the rac unknown value as reals                                   *//* The unknown value is the value applied to pixels which lie outside   *//* the raster data window, or to data which has not yet been entered    *//* into the raster dataset.                                             *//*                                                                      */ /* Note that the user must supply sufficient memory to hold the 	*//* real array.								*//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id       -in- the descriptor of the rac.                         *//* real_array   -in- the array of real values				*//* nreal_array  -in- the size of the real array				*//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_get_rac_unknown_real(GD_RAC          rac_id,				            GOTH_REAL       *real_array,                                            GOTH_INTEGER    nreal_array);/*----------------------------------------------------------------------*//* EXTERN lsr_get_rac_unknown                                           *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      */ /* Get the rac unknown value.                                           *//* The unknown value is the value applied to pixels which lie outside   *//* the raster data window, or to data which has not yet been entered    *//* into the raster dataset.                                             *//* By default the unknown value is initialised to zero when a raster    *//* dataset is created. The value may be set to another value by calling *//* the routine lsr_set_rac_unknown.                                     *//* The array of GOTH_VALUEs is used to carry each byte (in the integer  *//* field of the GOTH_VALUE) ,integer and real of the packed value.      *//* For RGB data byte three values should be passed.                     *//*                                                                      */ /* Note that the value returned is the actual stored value and not a    *//* copy of the racs data value.                                         *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id       -in- the descriptor of the rac.                         *//* value        -in- +list+ the array of GOTH_VALUEs holding the value. *//* nvalues      -in- +abs+ the length of the GOTH_VALUE array.          *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_get_rac_unknown(GD_RAC          rac_id,                                       GOTH_VALUE      **value,                                       GOTH_INTEGER    *nvalues);/*----------------------------------------------------------------------*//* EXTERN lsr_get_rac_unknown_bytes                                     *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Get the rac unknown value in a byte array.                           *//* By default the unknown value is initialised to zero when a raster    *//* dataset is created. The value may be set to another value by calling *//* the routine lsr_set_rac_unknown.                                     *//* The array of bytes returned holds the unknown rac value in byte      *//* packed form, that is in the form that the pixel is held within the   *//* raste dataset.                                                       *//*                                                                      */ /* Note that the value to hold the returned value must be allocated by  *//* the user before calling this function.                               *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id       -in- the descriptor of the rac.                         *//* value        -in- the buffer to fill with the bytes.                 *//* nbytes       -out- the number of whole bytes in the datatype.        *//* bit_offset   -out- the number of non-byte bits in the datatype.      *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_get_rac_unknown_bytes(GD_RAC          rac_id,                                             GOTH_SPECIAL    value,                                             GOTH_INTEGER    *nbytes,                                             GOTH_INTEGER    *bit_offset);/*----------------------------------------------------------------------*//* EXTERN lsr_get_rac_unknown_tile                                      *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      */ /* Get the rac's unknown tile.                                          *//* Each rac has an unknown tile which it is sometimes useful for the    *//* use to access.                                                       *//* This routine returns a pointer to unknown tile. Note that the tile   *//* pointed to is the actual stored tile and should not therefore be     *//* edited.                                                              *//*                                                                      *//*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id       -in- the descriptor of the rac                          *//* tile_ptr     -in- pointer to the unknown tile                        *//* tile_size    -in- the byte size of the tile                          *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_get_rac_unknown_tile(GD_RAC          rac_id,                                            GOTH_SPECIAL    *tile_ptr,                                            GOTH_INTEGER    *tile_size);/*----------------------------------------------------------------------*//* EXTERN lsr_rac_space_transform                                       *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Create a transform rac associated with a spatial transform by        *//* specifying a space in which the racs data is to be registered.       *//* Note the output rac should not be allocated before calling this      *//* routine.                                                             *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id        -in- the rac descriptor.                               *//* outspace_id   -in- the space to transform the data to.               *//* lock_type     -in- the data locking on the transformed rac.          *//* cache_type    -in- the cache type on the transformed rac.            *//* trans_rac_id -out- the transformed rac descriptor.                   *//* 									*//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__MALLOC if insufficient memory for operation                   *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_rac_space_transform(GD_RAC          rac_id,                                           GOTH_DESCRIPTOR outspace_id,                                           RAST_LOCK_TYPE  lock_type,                                           RAST_CACHE_TYPE cache_type,                                           GOTH_DESCRIPTOR *trans_rac_id) ;/*----------------------------------------------------------------------*//* EXTERN lsr_init_cache                                                *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Initialize the rac cache.                                            *//* The rac may be initialised to use either a global cache for tiles or *//* a cache which consists of only one tile.                             *//* A global cache must be used in cases where more than one tile of a   *//* rac needs to be accessed simultaneously (e.g. a rac which is going   *//* to have its data subsampled.                                         *//* A cache with only one tile can be useful for cases where only one    *//* tile is ever accessed at one time and where that tile is not likely  *//* to be needed often, for instance when a raster dataset is to be      *//* created and tiles are only written to it once. The use of a one      *//* tile cache prevents unneccessary cluttering of the global cache.     *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id     -in- the rac descriptor.                                  *//* cache_type -in- the type of the cache for the rac                    *//*                 (e.g RAST_CACHE_GLOBAL).                             *//* 									*//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__RASTERBADCACHE  if the cache parameters are not well defined  *//*  GOTH__RASTERCACHEDEFINED if a cache has already been defined        *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_init_cache(GD_RAC          rac_id,                                   RAST_CACHE_TYPE cache_type);/*----------------------------------------------------------------------*//* EXTERN lsr_put_reg_copy                                              *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Update a rac dataset with a region buffer.                           *//* The data within the region is read into the rac's data storage       *//* mechanisms. The extent of the data within the buffer is specifed in  *//* real world coordinates by the in extent of the rac.                  *//* The region must be a copy type region, and it is the user's          *//* responsibility to ensure that the buffer's data corresponds with the *//* real world extent that has been set. Particular care should be taken *//* to ensure that the real world coordinates are correct for the raster *//* point type of the rac.                                               *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* region_id          -in- region descriptor.                           *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__BADREGION if the region is not a copy type region             *//*  GOTH__RASTERDATALOCK if the data used by this operation is locked   *//*  GOTH__RASTERBADBUFFEREXT if the region buffer is too small          *//*  GOTH__NULLREGEXTENT if the region extent parameters are not well    *//*                      defined                                         *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_put_reg_copy(GD_REGION region_id);/*----------------------------------------------------------------------*//* EXTERN lsr_put_pixel_value                                           *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Put a pixel value into a rac.                                        *//* This routine places a single pixel value into a rac. The pixel value *//* set is the pixel closest to the real world coordinate specified.     *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id    -in- the rac descriptor.                                   *//* coord1    -in- the real world coordinate of the pixel in the         *//*                primary storage direction.                            *//* coord2    -in- the real world coordinate of the pixel in the         *//*                secondary storage direction.                          *//* nvalues   -in- +abs+ the size of the GOTH_VALUE array.               *//* in_value -out- +list+ the value at the point (coord1,coord2) .       *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__RASTERDATALOCK if the data used by this operation is locked   *//*  GOTH__BADPIXELVALUEARGS if the incorrect number of values for the   *//*                          datatype of the rac                         *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_put_pixel_value(GD_RAC       rac_id,                                       GOTH_REAL    coord1,                                       GOTH_REAL    coord2,                                       GOTH_INTEGER nvalues,                                       GOTH_VALUE   *in_value);/*----------------------------------------------------------------------*//* EXTERN lsr_put_pixel_area_value                                      *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Put a pixel value into an area of a rac.                             *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id    -in- the rac descriptor.                                   *//* low1      -in- the real world coordinate of the pixel in the         *//*                primary storage direction of the bottom left.         *//* low2      -in- the real world coordinate of the pixel in the         *//*                secondary storage direction of the bottom left.       *//* high1     -in- the real world coordinate of the pixel in the         *//*                primary storage direction of the top right.           *//* high2     -in- the real world coordinate of the pixel in the         *//*                secondary storage direction of the top right.         *//* alignment -in- the alignment type to convert real world to pixel     *//*                coordinates.						*//* olow1     -out- the real world coordinate of the pixel in the        *//*                 primary storage direction of the bottom left,        *//*                 of the area set allowing for alignment.		*//* olow2     -out- the real world coordinate of the pixel in the        *//*                 secondary storage direction of the bottom left,      *//*                 of the area set allowing for alignment.		*//* ohigh1    -out- the real world coordinate of the pixel in the        *//*                 primary storage direction of the top right,          *//*                 of the area set allowing for alignment.		*//* ohigh2    -out- the real world coordinate of the pixel in the        *//*                 secondary storage direction of the top right,        *//*                 of the area set allowing for alignment.		*//* nvalues   -in- +abs+ the size of the GOTH_VALUE array.               *//* in_value  -in- +list+ the value at the point (coord1,coord2) .       *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__RASTERDATALOCK if the data used by this operation is locked   *//*  GOTH__BADPIXELVALUEARGS if the incorrect number of values for the   *//*                          datatype of the rac                         *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_put_pixel_area_value(GD_RAC       rac_id,                                            GOTH_REAL    low1,                                            GOTH_REAL    low2,                                            GOTH_REAL    high1,                                            GOTH_REAL    high2,                                            REGION_ALIGNMENT_TYPE alignment,                                              GOTH_REAL    *olow1,                                            GOTH_REAL    *olow2,                                            GOTH_REAL    *ohigh1,                                            GOTH_REAL    *ohigh2,                                            GOTH_INTEGER nvalues,                                            GOTH_VALUE   *in_value);/*----------------------------------------------------------------------*//* EXTERN lsr_get_pixel_range                                           *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Get the range of pixels in a rectangular region of a raster		*//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id    -in- the rac descriptor                                    *//* whole_raster -in- TRUE do the whole raster.				*//*		     FALSE use the coordinates.				*//* check_padding -in- include any unknown values in the estimate.	*//* low1      -in- bottom left corner in real world coordinates.         *//* low2      -in- bottom left corner in real world coordinates.         *//* high1     -in- top right corner in real world coordinates.           *//* high2     -in- top right corner in real world coordinates.           *//* min_range -out- the min value					*//* max_range -out- the maximum value					*//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__RASTERDATALOCK if the data used by this operation is locked   *//*  GOTH__BADPIXELVALUEARGS if the incorrect number of values for the   *//*                          datatype of the rac                         *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_get_pixel_range(GD_RAC       rac_id,				       GOTH_BOOLEAN whole_raster,				       GOTH_BOOLEAN check_padding,				       GOTH_REAL    low1,				       GOTH_REAL    low2,				       GOTH_REAL    high1,				       GOTH_REAL    high2,				       GOTH_VALUE   *min_range,				       GOTH_VALUE   *max_range) ;/*----------------------------------------------------------------------*//* EXTERN lsr_get_pixel_value                                           *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Get a pixel value from a rac.                                        *//* This routine gets a single pixel value from a rac. The pixel value   *//* returned is the pixel closest to the real world coordinate specified.*//* The space for ret_value must be provdided by the caller to this      *//* routine.                                                             *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id    -in- the rac descriptor                                    *//* coord1    -in- the real world coordinate of the pixel in the         *//*                primary storage direction.                            *//* coord2    -in- the real world coordinate of the pixel in the         *//*                secondary storage direction.                          *//* nvalues   -in- +abs+  the size of the GOTH_VALUE array.              *//* ret_value -out- +list+ the value at the point (coord1,coord2).       *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__RASTERDATALOCK if the data used by this operation is locked   *//*  GOTH__BADPIXELVALUEARGS if the incorrect number of values for the   *//*                          datatype of the rac                         *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_get_pixel_value(GD_RAC       rac_id,                                       GOTH_REAL    coord1,                                       GOTH_REAL    coord2,                                       GOTH_INTEGER nvalues,                                       GOTH_VALUE   *ret_value);/*----------------------------------------------------------------------*//* EXTERN lsr_init_rac_access						*//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Get a rac ready for a data access.                                   *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id    	-in- the rac descriptor.                                *//* read_access	-in- TRUE - open for read only.			       !*//*		     FALSE - open for write access.			*//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__RASTERDATALOCK if the data used by this operation is locked   *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_init_rac_access(GD_RAC 		rac_id,				       GOTH_BOOLEAN	read_access) ;/*----------------------------------------------------------------------*//* EXTERN lsr_reset_ptr_reg                                             *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Reset a pointer type region for a new access.                        *//* The routine <<lsr_get_reg_ptr>> is normally called in a loop with a  *//* tile of raster data returned through each execution of the loop. The *//* region will reset itself itself if it has returned every tile in the *//* extent specified by the access, but if the user wishes to terminate  *//* the loop early the region should be reset to allow a new access to   *//* the data.                                                            *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* region_id -in- the region descriptor.                                *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_reset_ptr_reg(GD_REGION region_id);/*----------------------------------------------------------------------*//* EXTERN lsr_get_reg_ptr                                               *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Return a pointer to a part of the region contained within a tile.    *//* This routine returns a pointer to a tile of raster data stored in    *//* the tile cache,and hence the buffer should not be edited by the user.*//*                                                                      */ /* This routine is typically called within a loop, and at each call     *//* returns a pointer to a different portion of the extent specifed      *//* by the extent_in descriptor attached to the region. When no more     *//* data is to be returned the buffer is returned as NULL and the        *//* region resets itself. If the loop is prematurly exited the user      *//* should reset the region using <<lsr_reset_reg_ptr>>.                 *//*                                                                      *//*..ARGUMENTS...........................................................*//*                                                                      *//* region_id       -in- the region descriptor.                          *//* buffer         -out- the buffer containing the data. If no more      *//*                      data is to be returned buffer is returned       *//*                      as NULL.                                        *//* low1           -out- the bottom left hand corner of the extent of    *//*                      the returned tile in the real world             *//*                      coordinates primary direction.                  *//* low2           -out- the bottom left hand corner of the extent of    *//*                      the returned tile in the real world             *//*                      coordinates secondary direction.                *//* high1          -out- the top right hand corner of the extent of      *//*                      the returned tile in the real world             *//*                      coordinates primary direction.                  *//* high2          -out- the top right hand corner of the extent of      *//*                      the returned tile in the real world             *//*                      coordinates secondary direction.                *//* bits_per_pixel -out- the number of bits per pixel in the buffer      *//* npx1           -out- the size of the buffer in pixels in the         *//*                      primary storage direction.                      *//* npx2           -out- the size of the buffer in pixels in the         *//*                      secondary storage direction.                    *//* pixel_order    -out- the pixel order in the buffer                   *//*                      (e.g PIXEL_ORDER_TL_H).                         *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__BADREGION if the region is not a pointer type region          *//*  GOTH__RASTERDATALOCK if the data used by this operation is locked   *//*  GOTH__RASTERNOCACHE if the raster has no cache defined              *//*  GOTH__NULLREGEXTENT if the region extent parameters are not well    *//*                      defined                                         *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_get_reg_ptr(GD_REGION        region_id,                                   GOTH_SPECIAL     *buffer,                                   GOTH_REAL        *low1,                                   GOTH_REAL        *low2,                                   GOTH_REAL        *high1,                                   GOTH_REAL        *high2,                                   GOTH_INTEGER     *bits_per_pixel,                                   GOTH_INTEGER     *npx1,                                   GOTH_INTEGER     *npx2,                                   PIXEL_ORDER_TYPE *pixel_order);/*----------------------------------------------------------------------*//* EXTERN lsr_mark_reg_ptr                                              *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Mark a region of tiles locked by the region as edited.		*//*                                                                      *//*..ARGUMENTS...........................................................*//*                                                                      *//* region_id       -in- the region descriptor.                          *//* mark            -in- TRUE marked as edited.			       !*//*                      FALSE marked as unedited.		        *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__BADREGION if the region is not a pointer type region          *//*  GOTH__RASTERDATALOCK if the data used by this operation is locked   *//*  GOTH__RASTERNOCACHE if the raster has no cache defined              *//*  GOTH__NULLREGEXTENT if the region extent parameters are not well    *//*                      defined                                         *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_mark_reg_ptr(GD_REGION        region_id,				    GOTH_BOOLEAN     mark) ;/*----------------------------------------------------------------------*//* EXTERN lsr_set_reg_locking                                           *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Set a pointer type region so that tiles accessed are locked in any   *//* cache.								*//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* region_id -in- the region descriptor.                                *//* lock	     -in- TRUE set locking on.					*//* 		  FALSE set locking off.  				*//* 									*//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__BADREGION if the region is not a pointer-type region          *//*  GOTH__BADEXTENT if the extent parameters are not well defined       *//*  GOTH__MALLOC if insufficient memory for operation                   *//*                                                                      *//*----------------------------------------------------------------------*/ extern GOTH_STATUS lsr_set_reg_locking(GD_REGION    region_id,                                       GOTH_BOOLEAN lock) ;/*----------------------------------------------------------------------*//* EXTERN lsr_set_reg_marking                                           *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Set a pointer type region so that tiles accessed are marked as	*//* edited to the cache.							*//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* region_id -in- the region descriptor.                                *//* mark	     -in- TRUE set marking on.					*//* 		  FALSE set marking off.  				*//* 									*//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__BADREGION if the region is not a pointer-type region          *//*  GOTH__BADEXTENT if the extent parameters are not well defined       *//*  GOTH__MALLOC if insufficient memory for operation                   *//*                                                                      *//*----------------------------------------------------------------------*/ extern GOTH_STATUS lsr_set_reg_marking(GD_REGION    region_id,                                       GOTH_BOOLEAN mark) ;/*----------------------------------------------------------------------*//* EXTERN lsr_get_reg_copy                                              *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Fill the region buffer with data for the extent_in attached to the   *//* region.                                                              *//* This routine returns a pointer to the buffer associated with a       *//* copy type region filled with the data corresponding to the in extent *//* of the region.                                                       *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* region_id       -in- the region descriptor.                          *//* buffer         -out- the buffer containing the data. If no more      *//*                      data is to be returned buffer is returned       *//*                      as NULL.                                        *//* low1           -out- the bottom left hand corner of the extent of    *//*                      the returned tile in the real world             *//*                      coordinates primary direction.                  *//* low2           -out- the bottom left hand corner of the extent of    *//*                      the returned tile in the real world             *//*                      coordinates secondary direction.                *//* high1          -out- the top right hand corner of the extent of      *//*                      the returned tile in the real world             *//*                      coordinates primary direction.                  *//* high2          -out- the top right hand corner of the extent of      *//*                      the returned tile in the real world             *//*                      coordinates secondary direction.                *//* bits_per_pixel -out- the number of bits per pixel in the buffer      *//* npx1           -out- the size of the buffer in pixels in the         *//*                      primary storage direction.                      *//* npx2           -out- the size of the buffer in pixels in the         *//*                      secondary storage direction.                    *//* pixel_order    -out- the pixel order in the buffer                   *//*                      (e.g PIXEL_ORDER_TL_H).                         *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__BADREGION if the region parameters are not well defined       *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__RASTERDATALOCK if the data used by this operation is locked   *//*  GOTH__RASTERBADBUFFEREXT if the region buffer is too small          *//*  GOTH__NULLREGEXTENT if the region extent parameters are not well    *//*                      defined                                         *//*  GOTH__MALLOC if insufficient memory for operation                   *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_get_reg_copy(GOTH_DESCRIPTOR  region_id,                                    GOTH_SPECIAL     *buffer,                                    GOTH_REAL        *low1,                                    GOTH_REAL        *low2,                                    GOTH_REAL        *high1,                                    GOTH_REAL        *high2,                                    GOTH_INTEGER     *bits_per_pixel,                                    GOTH_INTEGER     *npx1,                                    GOTH_INTEGER     *npx2,                                    PIXEL_ORDER_TYPE *pixel_order) ;/*----------------------------------------------------------------------*//* EXTERN lsr_set_reg_notiles                                           *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Set flag to determine if unknown tiles to be returned in pointer     *//* type access.                                                         *//* The routine <<lsr_get_reg_ptr>> can be made to act so that unknown   *//* tiles are not returned by setting the set_notiles flag.              *//* This can be useful for display purposes where the background can be  *//* cleared and only `real' tiles drawn.                                 */  /* The default action of <<lsr_get_reg_ptr>> is to return unknown tiles.*//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* region_id   -in- the descriptor of the region.                       *//* set_notiles -in- TRUE - set notiles flag (i.e. unknown tiles not    !*//*                          returned).                                  *//*                  FALSE - unset notiles flag (the default).           *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__BADREGION if the region is not a pointer type region          *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_set_reg_notiles(GD_REGION       region_id,                                       GOTH_BOOLEAN    set_notiles);/*----------------------------------------------------------------------*//* EXTERN lsr_set_rac_flush                                             *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Set flag to determine if rac is to flush its contents.               *//* When data is to be written to a rac, the rac will by default hold    *//* the data and not flush it unless the data is cleared from the cache  *//* in the normal way. By setting the flush flag the rac will always     *//* flush the data to either racs lying below the rac in the rac tree    *//* or to disk or external rac format.                                   *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id    -in- the descriptor of the rac.                            *//* set_flush -in- TRUE - set flush flag (the default for non-data racs)!*//*                FALSE - unset flush flag (the default for data racs). *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__RASTERBADTYPE invalid type of rac for operation               *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_set_rac_flush(GD_RAC          rac_id,                                     GOTH_BOOLEAN    set_flush);/*----------------------------------------------------------------------*//* EXTERN lsr_flush_dependent_racs                                      *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Flush and free the cache on all RACs which are depenedent on this    *//* RAC.									*//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id      -in- the descriptor of the RAC.                          *//* flush_this_rac -in- TRUE - flush and free the cache on this RAC.    !*//*		       FALSE - leave this RACs cache unaltered.		*//* force_flush -in- TRUE - flush the dependent RACs even if the rac in  *//*                         question is not writeable.			*//*                  FALSE - flush the dependent RACs only if this RAC   *//*			    is writeable.				*//* 									*//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_flush_dependent_racs(GD_RAC        rac_id,					    GOTH_BOOLEAN  flush_this_rac,                                            GOTH_BOOLEAN  force_flush) ;/*----------------------------------------------------------------------*//* EXTERN lsr_rac_dependency						*//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Return the number of RACs and leaf RACs on which a raster dataset    *//* depends.								*//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id -in- The descriptor block whose rac is to be interrogated.	*//* nracs  -out- the total number of RACs on which the RAC depends.	*//* nleaves -out- the total number of leaf RACs on which the RAC depends *//* 									*//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_rac_dependency(GD_RAC rac_id,				      GOTH_INTEGER *nracs,				      GOTH_INTEGER *nleaves) ;/*----------------------------------------------------------------------*//* EXTERN lsr_test_rac_tiling						*//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Test whether two RACs have a consistent tiling.			*//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id1 -in- the descriptor of the first rac to be interrogated.	*//* rac_id2 -in- the descriptor of the second rac to be interrogated.	*//* tile_consistent -out- TRUE if tiling is tile consistent.		*//* pixel_consistent -out- TRUE if tiling is pixel consistent.		*//* 									*//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_test_rac_tiling(GD_RAC       rac_id1,				       GD_RAC 	    rac_id2,				       GOTH_BOOLEAN *tile_consistent,				       GOTH_BOOLEAN *pixel_consistent) ;/*----------------------------------------------------------------------*//* EXTERN lsr_get_rac_dependency				        *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Get the enumerated RACs and leaf RACs on which a raster dataset      *//* depends.								*//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id -in- The descriptor block whose rac is to be interrogated.	*//* nrac   -in- the rac to get.						*//* leaf   -in- TRUE if only leaf RACs are to be searched for.		*//* found      -out- true if the RAC with this number exists.		*//* nsearched  -out- the number of racs tested.				*//* out_rac_id -out- the found RAC.					*//* is_leaf    -out- true if the RAC is a leaf rac.			*//* 									*//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_get_rac_dependency(GD_RAC       rac_id,					  GOTH_INTEGER nrac,					  GOTH_BOOLEAN leaf,					  GOTH_BOOLEAN *found,					  GOTH_INTEGER *nsearched,					  GD_RAC       *out_rac_id,					  GOTH_BOOLEAN *is_leaf) ;/*----------------------------------------------------------------------*//* EXTERN lsr_test_rac_dependency				        *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Test whether a RAC is dependent on the data in the `target' RAC.	*//* Optionally additional information about the spatial dependency of an *//* extent in the base RAC in the target RAC may be obtained.		*//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* base_rac_id -in- the descriptor of the rac to be interrogated.	*//* target_rac_id -in- the descriptor of the rac to be searched for.	*//* test_area -in- if TRUE do an extent test on the target RAC.		*//* occurence -in- the count value to find the target raster if the      *//*		  raster occurs more than once.				*//* inlow1 -in- the extent of the area to test.				*//* inlow2 -in- the extent of the area to test.				*//* inhigh1 -in-	the extent of the area to test.				*//* inhigh2 -in-	the extent of the area to test.				*//* found   -out- TRUE if a connection is found.				*//* area_altered -out- TRUE if the dependent area in the target is not   *//*		      equal to the extent of the input area.		*//* outlow1 -out- the extent of the dependent area in the target 	*//* outlow2 -out- the extent of the dependent area in the target 	*//* outhigh1 -out- the extent of the dependent area in the target 	*//* outhigh2 -out-  the extent of the dependent area in the target 	*//* 									*//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_test_rac_dependency(GD_RAC       base_rac_id,					   GD_RAC 	target_rac_id,					   GOTH_BOOLEAN test_area,					   GOTH_INTEGER	occurence,					   GOTH_REAL    inlow1,					   GOTH_REAL    inlow2,					   GOTH_REAL    inhigh1,					   GOTH_REAL    inhigh2,					   GOTH_BOOLEAN *found,					   GOTH_BOOLEAN *area_altered,					   GOTH_REAL    *outlow1,					   GOTH_REAL    *outlow2,					   GOTH_REAL    *outhigh1,					   GOTH_REAL    *outhigh2);/*----------------------------------------------------------------------*//* EXTERN lsr_destroy_rac_cache                                         *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Destroy the RAC cache. This routine destroys the cache items         *//* associated with a RAC without flushing any items which are edited.   *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id      -in- the descriptor of the rac.                          *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_destroy_rac_cache(GD_RAC rac_id) ;/*----------------------------------------------------------------------*//* EXTERN lsr_flush_rac                                                 *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Flush a rac.                                                         *//* This routine causes all data held in the cache for this rac to be    *//* flushed either further down the rac tree or to disk or external data *//* format.                                                              *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id      -in- the descriptor of the rac.                          *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__RASTERBADTYPE if invalid type of rac for operation            *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_flush_rac(GD_RAC rac_id) ;/*----------------------------------------------------------------------*//* EXTERN lsr_reset_rac                                                 *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Reset a rac for a new access.                                        *//* This routine is used to create a new transform,layered or tiled rac  *//* quickly out of old transform rac.                                    *//* The routine flushes and deletes the cached tiles associated with the *//* rac, and sets the rac for re-initialisation.                         *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id      -in- the descriptor of the rac.                          *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_reset_rac(GD_RAC rac_id) ;/*----------------------------------------------------------------------*//* EXTERN lsr_set_reg_pad                                               *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Set flag to determine region padding and return byte aligned data    *//* for a copy type region.                                              *//* For non-byte aligned data types (e.g. binary) it is sometimes useful *//* that the returned data is byte aligned with the stored data so that  *//* considerable amounts of bit shifting are unecessary. This routine    *//* ensures return of a buffer with identical byte alignment to the      *//* stored data.                                                         *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* region_id  -in- the descriptor of the region.                        *//* set_pad    -in- TRUE - set padding flag (i.e. pixels added to return *//*                        byte aligned region are unknown).             *//*                 FALSE - unset padding flag (the default).            *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__BADREGION if the region is not a copy type region             *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_set_reg_pad(GD_REGION region_id,                                   GOTH_BOOLEAN set_pad);/*----------------------------------------------------------------------*//* EXTERN lsr_get_reg_pad                                               *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Get the padding parameters for the region type access.               *//* Following a copy type access this routine can be used to find out    *//* how the buffer has been padded.                                      *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* region_id  -in-  the descriptor of the region.                       *//* pad        -out- TRUE if padding flag set.                           *//*                  FALSE if padding flag unset.                        *//* left       -out- number of left padded pixels in the access.         *//* right      -out- number of right padded pixels in the access.        *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__BADREGION if the region is not a copy type region             *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_get_reg_pad(GD_REGION       region_id,                                   GOTH_BOOLEAN    *pad,                                   GOTH_INTEGER    *left,                                   GOTH_INTEGER    *right);/*----------------------------------------------------------------------*//* EXTERN lsr_set_rac_data_conv                                         *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Set the rac data conversion transformation.                          *//* This routine can be called after <<lsr_create_transform_rac>> to set *//* a data type conversion on a transform rac. A data transform is a     *//* transform which can be called on a per pixel basis (e.g. packing a   *//* byte datatype to a bit datatype).                                    *//* If applicable the user may specify that the conversion is to         *//* performed through a look up table.                                   *//*                                                                      *//* Data can either transformed forwards or backwards through a          *//* transform rac. A forward transform takes data from the source rac    *//* and converts it to the data in the transform rac. A backward         *//* transform is used to write data from the transform rac to the source *//* rac. Both a forward and backward transformation may be set on a      *//* single transform rac.                                                *//*                                                                      *//* On one transform rac both a data and a spatial transform may be      *//* performed, although in such cases the spatial transform is always    *//* done before the data transform.                                      *//*                                                                      *//* Only one data transform may be performed per transform rac.          *//*                                                                      *//* The call-back function is specified by name, and must have previously*//* been registered with the central dictionary of raster data           *//* transformations by calling the appropriate initialisation routine.   *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* trans_rac_id       -in- the descriptor of the rac.                   *//* forward      -in- TRUE set forward transformation.                  !*//*                   FALSE set backward transformation.                 *//* lookup       -in- TRUE use a lookup table.                          !*//*                   FALSE do not generate a look up table.             *//* function     -in- the name of the transformation function which has  *//*                   been previously registered with the date           *//*                   transformation dictionary.                         *//* ndata        -in- the number of parameters of the function           *//* data         -in- +list+ the parameters of the function.             *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__RASTERBADTYPE if invalid type of rac for operation            *//*  GOTH__BADCONVFUNCARGS if the arguments are not consistent with      *//*                        function                                      *//*  GOTH__RASTERFUNC if a raster function has already been registered   *//*  GOTH__RASTERBADDATAUSE if the datatype is inappropriate for a lookup*//*  GOTH__MALLOC if insufficient memory for operation                   *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_set_rac_data_conv(GD_RAC          trans_rac_id,                                         GOTH_BOOLEAN    forward,                                         GOTH_BOOLEAN    lookup,                                         GOTH_STRING     function,                                         GOTH_INTEGER    ndata,                                         GOTH_VALUE      *data);/*----------------------------------------------------------------------*//* EXTERN lsr_set_rac_layered                                           *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Set the layering transformation on a layered rac.                    *//* This routine can be called after <<lsr_create_layered_rac>> to set a *//* layering on a layered rac. A layering transform is a transform which *//* can be called on a per pixel basis and takes as input the pixels     *//* from the constituent racs which lie at the same real world position. *//* The constituent racs of a layered rac must have a consistent tiling  *//* strategy.                                                            *//*                                                                      *//* Data can either transformed forwards or backwards through a          *//* layered rac. A forward transform takes data from the source racs     *//* and converts it to the data in the layered rac. A backward           *//* transform is used to write data from the layered rac to the source   *//* racs. Both a forward and backward transformation may be set on a     *//* single layered rac.                                                  *//*                                                                      *//*                                                                      *//* The call-back function is specified by name, and must have previously*//* been registered with the central dictionary of raster layering       *//* transformations by calling the appropriate initialisation routine.   *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id        -in- the descriptor of the rac.                        *//* forward       -in- TRUE set forward layer map.                      !*//*                    FALSE set backward layer map.                     *//* layerfunc     -in- the layer map to invoke on the input data.        *//* nlayer_params -in- the number of arguments for the layer map.        *//* layer_params  -in- +list+ the arguments for the layer map.           *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__RASTERBADTYPE if invalid type of rac for operation            *//*  GOTH__RASTERNULLFUNC if raster processing function not defined      *//*  GOTH__BADCONVFUNCARGS if the arguments are not consistent with      *//*                        function                                      *//*  GOTH__MALLOC if insufficient memory for operation                   *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_set_rac_layered(GD_RAC          rac_id,                                       GOTH_BOOLEAN    forward,                                       GOTH_STRING     layerfunc,                                       GOTH_INTEGER    nlayer_params,                                       GOTH_VALUE      layer_params[]);/*----------------------------------------------------------------------*//* EXTERN lsr_set_rac_external                                          *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Set the transformation function on an external rac data type.        *//* This routine can be called after lsr_create_external_rac to set a    *//* external transformation on an external rac. An external transform is *//* a transform which can be used to either create raster data from an   *//* external data source or create external data from raster data.       *//*                                                                      *//* Data can either transformed forwards or backwards through an         *//* external rac. A forward transform takes data from the external source*//* and converts it to the data in the external rac. A backward          *//* transform is used to write data from the external rac to the external*//* sources of data. Both a forward and backward transformation may be   *//* set on a single external rac.                                        *//*                                                                      *//*                                                                      *//* The call-back function is specified by name, and must have previously*//* been registered with the central dictionary of raster external       *//* transformations by calling the appropriate initialisation routine.   *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id        -in- the descriptor of the rac.                        *//* forward       -in- TRUE set forward extern map.                      *//*                    FALSE set backward extern map.                    *//* externfunc     -in- the extern map to be invoked.                    *//* nextern_params -in- the number of arguments for the extern map.      *//* extern_params  -in- +list+ the arguments for the extern map.         *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__RASTERBADTYPE invalid type of rac for operation               *//*  GOTH__RASTERNULLFUNC raster processing function not defined         *//*  GOTH__BADCONVFUNCARGS the arguments are not consistent with function*//*  GOTH__MALLOC if insufficient memory for operation                   *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_set_rac_external(GD_RAC          rac_id,                                       GOTH_BOOLEAN    forward,                                       GOTH_STRING     externfunc,                                       GOTH_INTEGER    nextern_params,                                       GOTH_VALUE      extern_params[]);/*----------------------------------------------------------------------*//* EXTERN lsr_set_rac_tiled                                             *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Set the rac tiling transformation.                                   *//* This routine can be called after <<lsr_create_tiled_rac>> to set a   *//* tiling function on a tiled rac. A tiling transform is a transform    *//* which is invoked when data in the constituent racs of a tiled rac    *//* overlap and decides which data should be output.                     *//* The constituent racs of a tiled rac must have a consistent tiling    *//* strategy.                                                            *//*                                                                      *//* Data can at present only be transformed forwards through a           *//* tiled rac. A forward transform takes data from the source racs       *//* and converts it to the data in the tiled rac. It is likely that      *//* backward transforms will be used in the near future.                 *//*                                                                      *//* The call-back function is specified by name, and must have previously*//* been registered with the central dictionary of raster tiling         *//* transformations by calling the appropriate initialisation routine.   *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id        -in- the descriptor of the rac.                        *//* forward       -in- TRUE set a forward tile map.                     !*//*                    FALSE set a backward tile map.                    *//* tilefunc      -in- the tile map to invoke on overlapping tiles.      *//* ntile_params  -in- the number of arguments for the tile map.         *//* tile_params   -in- +list+ the arguments for the tile map.            *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__RASTERBADTYPE if invalid type of rac for operation            *//*  GOTH__RASTERNULLFUNC if raster processing function not defined      *//*  GOTH__BADCONVFUNCARGS if the arguments are not consistent with      *//*                        function                                      *//*  GOTH__MALLOC if insufficient memory for operation                   *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_set_rac_tiled(GD_RAC          rac_id,                                     GOTH_BOOLEAN    forward,                                     GOTH_STRING     tilefunc,                                     GOTH_INTEGER    ntile_params,                                     GOTH_VALUE      tile_params[]);/*----------------------------------------------------------------------*//* EXTERN lsr_set_rac_general_conv                                      *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Set the rac general transformation on a transform rac.               *//* This routine can be called after lsr_create_transform_rac to set a   *//* generaltransformation function on a transform rac. A general         *//* transform is a transform such as a rotation or a filter where the    *//* output value of a pixel depends on a contiguous range of pixels in   *//* the source data and the type of the input data is not the same	*//* as the type of the output data.					*//*                                                                      *//* To specify a general transform one must set three functions on the   *//* transform rac.                                                       *//*                                                                      *//* @ The point function maps a point in the <<destination>> space to a  *//* point in the <<source>> space of the raster.                         *//* @ The minimum bounding rectangle (mbr) function maps a rectangular   *//* extent in the <<destination>> space to a rectangular extent in the   *//*  <<source>> space of the raster.                                     *//* @ The resampling raster function determines the type of resampling   *//* to use in the output data. Examples of this function are nearest     *//* neighbour resampling, four point area averaging and full area        *//* area averaging.                                                      *//*                                                                      *//* Data can at present only be spatially transformed forwards through   *//* a transform rac. It is unlikely that backward spatial transforms     *//* will be implemented in the near future.                              *//*                                                                      *//* On one transform rac both a data and a spatial transform may be      *//* performed, although in such cases the spatial transform is always    *//* done before the data transform.                                      *//*                                                                      *//* Only one spatial transform may be performed per transform rac.       *//*                                                                      *//* The call-back functions are specified by name, and must have         *//* previously been registered with the central dictionaries of raster   *//* point, mbr and resampling functions.                                 *//*                                                                      */ /*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id       -in- the descriptor of the rac.                         *//* forward      -in- TRUE - set the forward transformation             !*//*                   FALSE - set the backward transformation            *//*                           (not implemented at present).              *//* genfunc    -in- the name of the spatial resampling map.              *//* rectfunc     -in- the name of the spatial mbr map.                   *//* pointfunc    -in- the name of the spatial point map.                 *//* nraster_params -in- the number of raster resampling map arguments.   *//* raster_params  -in- +list+ the raster resampling map arguments.      *//* nmbr_params -in- the number of mbr map arguments.                    *//* mbr_params  -in- +list+ the mbr map arguments.                       *//* ntrans_params -in- the number of point map arguments.                *//* trans_params  -in- +list+ the point map arguments.                   *//* ninput_space_params -in- the number of input space parameters.       *//*                          The space parameters may be used to define  *//*                          parameters of the spaces between which the  *//*                          spatial transform is to be performed.       *//* input_space_params -in- +list+ the input space parameters.           *//* noutput_space_params -in- the number of output space parameters.     *//* output_space_params  -in- +list+ the output space parameters.        *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__RASTERBADTYPE if an invalid type of rac for operation         *//*  GOTH__BADCONVFUNCARGS if the arguments are not consistent with      *//*                        function                                      *//*  GOTH__RASTERNULLFUNC if the raster processing function is not       *//*                       defined                                        *//*  GOTH__MALLOC if insufficient memory for operation                   *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_set_rac_general_conv(GD_RAC      rac_id,                                         GOTH_BOOLEAN   forward,                                         GOTH_STRING    genfunc,                                         GOTH_STRING    rectfunc,                                         GOTH_STRING    pointfunc,                                         GOTH_INTEGER   nraster_params,                                         GOTH_VALUE     raster_params[],                                         GOTH_INTEGER   nmbr_params,                                         GOTH_VALUE     mbr_params[],                                         GOTH_INTEGER   ntrans_params,                                         GOTH_VALUE     trans_params[],                                         GOTH_INTEGER   ninput_space_params,                                         GOTH_VALUE     input_space_params[],                                         GOTH_INTEGER   noutput_space_params,                                         GOTH_VALUE     output_space_params[]);/*----------------------------------------------------------------------*//* EXTERN lsr_set_rac_spatial_conv                                      *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Set the rac spatial transformation on a transform rac.               *//* This routine can be called after lsr_create_transform_rac to set a   *//* spatial transformation function on a transform rac. A spatial        *//* transform is a transform such as a rotation or a filter where the    *//* output value of a pixel depends on a contiguous range of pixels in   *//* the source data.                                                     *//*                                                                      *//* To specify a spatial transform one must set three functions on the   *//* transform rac.                                                       *//*                                                                      *//* @ The point function maps a point in the <<destination>> space to a  *//* point in the <<source>> space of the raster.                         *//* @ The minimum bounding rectangle (mbr) function maps a rectangular   *//* extent in the <<destination>> space to a rectangular extent in the   *//*  <<source>> space of the raster.                                     *//* @ The resampling raster function determines the type of resampling   *//* to use in the output data. Examples of this function are nearest     *//* neighbour resampling, four point area averaging and full area        *//* area averaging.                                                      *//*                                                                      *//* Data can at present only be spatially transformed forwards through   *//* a transform rac. It is unlikely that backward spatial transforms     *//* will be implemented in the near future.                              *//*                                                                      *//* On one transform rac both a data and a spatial transform may be      *//* performed, although in such cases the spatial transform is always    *//* done before the data transform.                                      *//*                                                                      *//* Only one spatial transform may be performed per transform rac.       *//*                                                                      *//* The call-back functions are specified by name, and must have         *//* previously been registered with the central dictionaries of raster   *//* point, mbr and resampling functions.                                 *//*                                                                      */ /*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id       -in- the descriptor of the rac.                         *//* forward      -in- TRUE - set the forward transformation             !*//*                   FALSE - set the backward transformation            *//*                           (not implemented at present).              *//* spacefunc    -in- the name of the spatial resampling map.            *//* rectfunc     -in- the name of the spatial mbr map.                   *//* pointfunc    -in- the name of the spatial point map.                 *//* nraster_params -in- the number of raster resampling map arguments.   *//* raster_params  -in- +list+ the raster resampling map arguments.      *//* nmbr_params -in- the number of mbr map arguments.                    *//* mbr_params  -in- +list+ the mbr map arguments.                       *//* ntrans_params -in- the number of point map arguments.                *//* trans_params  -in- +list+ the point map arguments.                   *//* ninput_space_params -in- the number of input space parameters.       *//*                          The space parameters may be used to define  *//*                          parameters of the spaces between which the  *//*                          spatial transform is to be performed.       *//* input_space_params -in- +list+ the input space parameters.           *//* noutput_space_params -in- the number of output space parameters.     *//* output_space_params  -in- +list+ the output space parameters.        *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__RASTERBADTYPE if an invalid type of rac for operation         *//*  GOTH__BADCONVFUNCARGS if the arguments are not consistent with      *//*                        function                                      *//*  GOTH__RASTERNULLFUNC if the raster processing function is not       *//*                       defined                                        *//*  GOTH__MALLOC if insufficient memory for operation                   *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_set_rac_spatial_conv(GD_RAC      rac_id,                                         GOTH_BOOLEAN   forward,                                         GOTH_STRING    spacefunc,                                         GOTH_STRING    rectfunc,                                         GOTH_STRING    pointfunc,                                         GOTH_INTEGER   nraster_params,                                         GOTH_VALUE     raster_params[],                                         GOTH_INTEGER   nmbr_params,                                         GOTH_VALUE     mbr_params[],                                         GOTH_INTEGER   ntrans_params,                                         GOTH_VALUE     trans_params[],                                         GOTH_INTEGER   ninput_space_params,                                         GOTH_VALUE     input_space_params[],                                         GOTH_INTEGER   noutput_space_params,                                         GOTH_VALUE     output_space_params[]);/*----------------------------------------------------------------------*//* EXTERN lsr_set_rac_resample_conv                                     *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Set default resampling scheme to use on a raster transformation.	*//* This routine can be called after lsr_create_transform_rac to set a   *//* spatial transformation resampling function on a transform rac. 	*//* A spatial may be set up by the RAC automatically to transform        *//* between spaces and to do scaling changes.				*//* @ The resampling raster function determines the type of resampling   *//* to use in the output data. Examples of this function are nearest     *//* neighbour resampling, four point area averaging and full area        *//* area averaging.                                                      *//*                                                                      *//* Data can at present only be spatially transformed forwards through   *//* a transform rac. It is unlikely that backward spatial transforms     *//* will be implemented in the near future.                              *//*                                                                      *//* On one transform rac both a data and a spatial transform may be      *//* performed, although in such cases the spatial transform is always    *//* done before the data transform.                                      *//*                                                                      *//* Only one spatial transform may be performed per transform rac.       *//*                                                                      *//* The call-back functions are specified by name, and must have         *//* previously been registered with the central dictionaries of raster   *//* point, mbr and resampling functions.                                 *//*                                                                      */ /*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id       -in- the descriptor of the rac.                         *//* forward      -in- TRUE - set the forward transformation             !*//*                   FALSE - set the backward transformation            *//*                           (not implemented at present).              *//* spacefunc    -in- the name of the spatial resampling map.            *//* nraster_params -in- +absent+ the number of raster resampling map     *//*                              arguments.                              *//* raster_params  -in- +list+ the raster resampling map arguments.      *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__RASTERBADTYPE if an invalid type of rac for operation         *//*  GOTH__BADCONVFUNCARGS if the arguments are not consistent with      *//*                        function                                      *//*  GOTH__RASTERNULLFUNC if the raster processing function is not       *//*                       defined                                        *//*  GOTH__MALLOC if insufficient memory for operation                   *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_set_rac_resample_conv(GD_RAC      rac_id,                                         GOTH_BOOLEAN   forward,                                         GOTH_STRING    spacefunc,                                         GOTH_INTEGER   nraster_params,                                         GOTH_VALUE     raster_params[]) ;/*----------------------------------------------------------------------*//* EXTERN lsr_set_rac_move                                              *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Set the rac shift. Perform an offset of the data within a rac.       *//* This operation may only be performed on a transform rac and          *//* constitutes a transform on the rac. Thus it is not possible to       *//* perform a move followed by another spatial transform on a single rac.*//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id       -in- the descriptor of the rac.                         *//* move1        -in- the shift in the real world coordinates in the     *//*                   primary storage direction.                         *//* move2        -in- the shift in the real world coordinates in the     *//*                   secondary storage direction.                       *//* move_data_window -in- TRUE move the data window with the data.      !*//*                       FALSE move only the data and leave the data    *//*                       window untouched.                              *//* tolerance        -in- tolerence to snap onto source raster           *//*                       in range (0.0,0.5). If the tolerance is zero   *//*                       the move will be as explicitly set. If the     *//*                       tolerance is non zero and a pixel in the source*//*                       data lies within a tolerance number of pixels  *//*                       of the source data, the shift is snapped on to *//*                       that pixel. A value of 0.5 ensures snapping on *//*                       to a source pixel.                             *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__RASTERBADTYPE if invalid type of rac for operation            *//*  GOTH__RASTERPROPSLOCK if the properties of the raster are locked    *//*  GOTH__BADRASTERTOL if bad value for the tolerance                   *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_set_rac_move(GD_RAC          rac_id,                                    GOTH_REAL       move1,                                    GOTH_REAL       move2,                                    GOTH_BOOLEAN    move_data_window,                                    GOTH_REAL       tolerance) ;/*----------------------------------------------------------------------*//* EXTERN lsr_set_page_extend                                           *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Set the page extend number for a mapped file.                        *//*                                                                      *//* The input number of bytes is converted to give an extension to a     *//* mapped file equal to the nearest number of pages which is greater    *//* than or equal to the number of bytes and is consistent with the      *//* disk cluster size. Setting the page extend parameter means that the  *//* file is not remapped every time that data is written into the file   *//* but only when the write extends the file beyond the last extension.  *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id   -in- the rac descriptor.                                    *//* nbytes   -in- the number of bytes to extend the file by.             *//*                                                                      *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__RASTERBADTYPE if invalid type of rac for operation            *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_set_page_extend(GD_RAC          rac_id,                                        GOTH_INTEGER    nbytes) ;/*----------------------------------------------------------------------*//* EXTERN lsr_set_rac_data_type                                         *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Set the rac data type (e.g. RAST_BINARY).                            *//* The raster datatype gives a very basic description of the sort of    *//* data within the dataset, for instance whether it is binary,greyscale,*//* ,coded or RGB data.                                                  *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id       -in- the descriptor of the rac.                         *//* data_type    -in- the datatype of the rac (e.g. RAST_BINARY).        *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__BADRASTERDATATYPE if the raster datatype is not well defined  *//*  GOTH__RASTERBADTYPE if invalid type of rac for operation            *//*  GOTH__RASTERPROPSLOCK if the raster data is locked                  *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_set_rac_data_type(GD_RAC          rac_id,                                         RAST_DATA_TYPE  data_type);/*----------------------------------------------------------------------*//* EXTERN lsr_set_rac_pack_type                                         *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Set the rac pack type (e.g RAST_PACK_BIT).                           *//*                                                                      *//* The raster packtype determines whether pixels are packed in bits     *//* bytes,integers or reals etc.                                         *//*                                                                      *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id       -in- the descriptor of the rac.                         *//* pack_type    -in- the packtype of the raster dataset                 *//*                   (e.g. RAST_PACK_BIT).                              *//*                                                                      *//* The raster packtype determines whether pixels are packed in bits,    *//* bytes,integers or reals etc.                                         *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__BADRASTERDATATYPE if the raster datatype is not well defined  *//*  GOTH__RASTERBADTYPE if invalid type of rac for operation            *//*  GOTH__RASTERPROPSLOCK if the raster data is locked                  *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_set_rac_pack_type(GD_RAC          rac_id,                                         RAST_PACK_TYPE  pack_type);/*----------------------------------------------------------------------*//* EXTERN lsr_set_rac_sigbits                                           *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Set the number of significant bits for the data in a rac.            *//* The number of significant bits determines what parts of the packed   *//* data represents the actual data. Thus a byte packed greyscale image  *//* with 32 levels of greyscale should have the number of significant    *//* bits set to 5.                                                       *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id       -in- the descriptor of the rac.                         *//* nsigbits     -in- the number of significant bits in the raster       *//*                   dataset. 					        *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__BADRASTERDATATYPE if the raster datatype is not well defined  *//*  GOTH__RASTERBADTYPE if invalid type of rac for operation            *//*  GOTH__RASTERPROPSLOCK if the raster data is locked                  *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_set_rac_sigbits(GD_RAC          rac_id,                                       GOTH_INTEGER    nsigbits);/*----------------------------------------------------------------------*//* EXTERN lsr_set_rac_content                                           *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Set the rac content identifier.                                      *//* The content identifier is a user handle to allow the user to give a  *//* more detailed of the data within the raster dataset. For instance a  *//* code value of 5 could signify that the data is an aerial photograph. *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id      -in- the rac descriptor.                                 *//* content_id  -in- the content identifier of the rac.                  *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__RASTERBADTYPE if invalid type of rac for operation            *//*  GOTH__RASTERPROPSLOCK if the raster data is locked                  *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_set_rac_content(GD_RAC          rac_id,                                       GOTH_INTEGER    content_id);/*----------------------------------------------------------------------*//* EXTERN lsr_set_rac_pixel_scale                                       *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Set the rac pixel scale.                                             *//* The pixel scale determines the real world size of the pixels in the  *//* space in which the raster resides.                                   *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id    -in- the rac descriptor.                                   *//* scale1    -in- the scale along the primary storage direction.        *//* scale2    -in- the scale along the second storage direction.         *//* tolerance -in- the tolerance to snap the scale onto a multiple or    *//*                multiple divide of the scale in the source raster     *//*                data. The tolerance should lie in the range           *//*                0.0 to 0.5                                            *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__BADGRID if the grid parameters are not well defined           *//*  GOTH__RASTERBADTYPE if invalid type of rac for operation            *//*  GOTH__BADRASTERTOL if bad value for the tolerance                   *//*  GOTH__RASTERPROPSLOCK if the properties of the raster are locked    *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_set_rac_pixel_scale(GD_RAC          rac_id,                                           GOTH_REAL       scale1,                                           GOTH_REAL       scale2,                                            GOTH_REAL       tolerance);/*----------------------------------------------------------------------*//* EXTERN lsr_set_rac_pixel_zoom                                        *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Set the rac pixel scale by specifying a zoom factor.                 *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id       -in- the descriptor of the rac.                         *//* zoom1        -in- the zoom factor in the primary storage direction.  *//* zoom2        -in- the zoom factor in the secondary storage direction.*//* tolerance    -in- tolerance to snap to multiple or integer divide of *//*                   zoom factor. The value of tolerance should lie in  *//*                   the range 0.0 to 0.5.                              *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__BADRASTERTOL if bad value for the tolerance                   *//*  GOTH__RASTERBADTYPE if invalid type of rac for operation            *//*  GOTH__BADGRID if the grid parameters are not well defined           *//*  GOTH__RASTERPROPSLOCK if the properties of the raster are locked    *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_set_rac_pixel_zoom(GD_RAC          rac_id,                                          GOTH_REAL       zoom1,                                          GOTH_REAL       zoom2,                                          GOTH_REAL       tolerance) ;/*----------------------------------------------------------------------*//* EXTERN lsr_set_rac_pixel_type                                        *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Set the rac pixel type.                                              *//* The type of a rac may be point type for pixels which represent       *//* discrete locations and area type for pixels which are representative *//* values of some area.                                                 *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id        -in- the rac descriptor.                               *//* pixtype       -in- the pixel type of the rac (e.g. RAST_BY_AREA).    *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__BADGRID if the grid parameters are not well defined           *//*  GOTH__RASTERBADTYPE if invalid type of rac for operation            *//*  GOTH__RASTERPROPSLOCK if the properties of the raster are locked    *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_set_rac_pixel_type(GD_RAC          rac_id,                                          RAST_POINT_TYPE pixtype);/*----------------------------------------------------------------------*//* EXTERN lsr_set_rac_coord_string                                      *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Set the rac coordinate string.                                       *//* The coordinate string specifies the real world space in which the    *//* raster dataset resides.                                              *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id -in- the rac descriptor.                                      *//* coord  -in- the string specifying the coordinate system for the      *//*               rac.                                                   *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__BADGRID if the grid parameters are not well defined           *//*  GOTH__RASTERBADTYPE if invalid type of rac for operation            *//*  GOTH__RASTERPROPSLOCK if the properties of the raster are locked    *//*  GOTH__MALLOC if insufficient memory for operation                   *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_set_rac_coord_string(GD_RAC          rac_id,                                            GOTH_STRING     coord) ;/*----------------------------------------------------------------------*//* EXTERN lsr_set_rac_tiling                                            *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Set the rac tiling parameters.                                       *//* The tiling parameters determine how data is stored internally within *//* the rac and also the tile size in pixels.                            *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id       -in- the descriptor of the rac.                         *//* tile_width   -in- the tile size in pixels in the primary storage     *//*                   direction.                                         *//* tile_height  -in- the tile size in pixels in the secondary storage   *//*                   direction.                                         *//* tile_order   -in- the tiling order of the tiles within the raster    *//*                   dataset (e.g. TILE_ORDER_TL_H).                    *//* pixel_order  -in- the pixel order within a tile                      *//*                   (e.g.PIXEL_ORDER_TL_H).                            */ /*                                                                      *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__BADRASTERTILING if the tiling strategy is not well defined    *//*  GOTH__RASTERBADTYPE if invalid type of rac for operation            *//*  GOTH__RASTERPROPSLOCK if the properties of the raster are locked    *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_set_rac_tiling(GD_RAC          rac_id,                                      GOTH_INTEGER    tile_width,                                      GOTH_INTEGER    tile_height,                                      TILE_ORDER_TYPE tile_order,                                      TILE_ORDER_TYPE pixel_order);/*----------------------------------------------------------------------*//* EXTERN lsr_lock_rac_tiling                                           *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Lock the value of the rac tiling parameters to their present value.  *//* The size of the tiles is by default automatically chosen for default *//* zooming operations to enable efficient algorithms. If the user wishes*//* to lock the tile sizes to their present values the following routine *//* should be called.                                                    *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id       -in- the descriptor of the rac.                         *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__RASTERBADTYPE if invalid type of rac for operation            *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_lock_rac_tiling(GD_RAC rac_id) ;/*----------------------------------------------------------------------*//* EXTERN lsr_set_rac_tile_origin                                       *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Set the rac tiling origin.                                           *//* The tiling origin specifies a point at which the bottom left hand    *//* corner of a tile lies in real world coordinates. Note that this      *//* value is not necessarily the coordinates of the bottom left hand     *//* corner of the bottom left tile in the raster dataset.                *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id    -in- the rac descriptor.                                   *//* torigin1  -in- the tile origin in real world coordinates in the      *//*                primary storage direction.                            *//* torigin2  -in- the tile origin in real world coordinates in the      *//*                secondary storage direction.                          *//* tolerance -in- the tolerance to snap onto a pixel of source          *//*                raster dataset or onto pixel determined by the data   *//*                window of the rac as determined by the origin         *//*                priority. The value should be in the range 0.0-0.5.   *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__RASTERBADTYPE if invalid type of rac for operation            *//*  GOTH__BADRASTERTOL if bad value for the tolerance                   *//*  GOTH__RASTERPROPSLOCK if the properties of the raster are locked    *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_set_rac_tile_origin(GD_RAC          rac_id,                                           GOTH_REAL       torigin1,                                           GOTH_REAL       torigin2,                                           GOTH_REAL       tolerance);/*----------------------------------------------------------------------*//* EXTERN lsr_set_rac_origin_priority                                   *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Set the rac origin priority.                                         *//* The rac has two origins, one specified by the tiling origin which    *//* determines where the corner of a tile lies, and the data window      *//* origin which specifies the bottom left hand corner of the data       *//* window. These origins should be a whole number of pixels apart.      *//* If the user is using tolerances to snap one origin to another, the   *//* origin which is preserved and the origin which is snapped can be     *//* determined by calling this routine.                                  *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id       -in- the descriptor of the rac.                         *//* priority     -in- TRUE - give priority to tiling origin, that is     *//*                          snap the data window priority.             !*//*                   FALSE - give priority to data window origin, that  *//*                           is snap the tiling origin.                 *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__RASTERBADTYPE if invalid type of rac for operation            *//*  GOTH__RASTERPROPSLOCK if the properties of the raster are locked    *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_set_rac_origin_priority(GD_RAC          rac_id,                                               GOTH_BOOLEAN    priority) ;/*----------------------------------------------------------------------*//* EXTERN lsr_lock_rac_tile_origin                                      *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Lock the value of the tiling origin to its present value.            *//* Locking the value of the tile origin to its present value stops the  *//* tiling origin being snapped or mapped by any point transformation.   *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id       -in- the descriptor of the rac.                         *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__RASTERBADTYPE if invalid type of rac for operation            *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_lock_rac_tile_origin(GD_RAC rac_id) ;/*----------------------------------------------------------------------*//* EXTERN lsr_lock_rac_data_window                                      *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Lock the value of the data window to its present value.              *//* Locking the value of the data window coordinates to their present    *//*  value stops the coordinates being snapped or mapped by any point    *//* transformation.                                                      *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id       -in- the descriptor of the rac.                         *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__RASTERBADTYPE if invalid type of rac for operation            *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_lock_rac_data_window(GD_RAC          rac_id) ;/*----------------------------------------------------------------------*//* EXTERN lsr_set_rac_data_window                                       *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Set the rac data window.                                             *//* The data window specifies the extent within the rac which specifies  *//* the region of interest. Areas of the raster dataset which lie outside*//* the data window are masked with the unknown pixel value.             *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id  -in- the rac descriptor                                      *//* low1      -in- bottom left corner of the data window in real world   *//*                coordinates for the primary storage direction.        *//* low2      -in- bottom left corner of the data window in real world   *//*                coordinates for the secondary storage direction.      *//* high1     -in- top right corner of the data window in real world     *//*                coordinates for the primary storage direction.        *//* high2     -in- top right corner of the data window in real world     *//*                coordinates for the secondary storage direction.      *//* tolerance -in- the tolerance to snap onto a pixel of source          *//*                raster dataset or onto pixel determined by the tile   *//*                origin of the rac as determined by the origin         *//*                priority. The value should be in the range 0.0-0.5.   *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__RASTERBADTYPE if invalid type of rac for operation            *//*  GOTH__BADRASTERTOL if bad value for the tolerance                   *//*  GOTH__RASTERPROPSLOCK if the properties of the raster are locked    *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_set_rac_data_window(GD_RAC          rac_id,                                           GOTH_REAL       low1,                                           GOTH_REAL       low2,                                           GOTH_REAL       high1,                                           GOTH_REAL       high2,                                           GOTH_REAL       tolerance);/*----------------------------------------------------------------------*//* EXTERN lsr_set_rac_compression                                       *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Overwrite the default rac compression scheme.                        *//* If the routine is called with comp_scheme set to                     *//* COMPRESSION_UNDEFINED then the rac reverts to its default scheme.    *//*                                                                      */ /* Note this routine can only be applied to a data rac.                 *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id       -in- the descriptor of the rac.                         *//* comp_scheme  -in- the compression schmeme to set on the rac          *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__RASTERBADTYPE if invalid type of rac for operation            *//*  GOTH__BADRASTERCOMPRESSION if the compression scheme is not well    *//*                             defined                                  *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_set_rac_compression(GD_RAC          rac_id,                                           COMPRESSION_TYPE comp_scheme);/*----------------------------------------------------------------------*//* EXTERN lsr_set_rac_unknown                                           *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Overwrite the default rac unknown value.                             *//* The unknown value is the value applied to pixels which lie outside   *//* the raster data window, or to data which has not yet been entered    *//* into the raster dataset.                                             *//* By default the unknown value is initialised to zero when a raster    *//* dataset is created. The value may be set to another value by calling *//* this routine.                                                        *//* The array of GOTH_VALUEs is used to carry each byte (in the integer  *//* field of the GOTH_VALUE) ,integer and real of the packed value.      *//* For RGB data byte three values should be passed.                     *//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//*                                                                      *//* rac_id       -in- the descriptor of the rac.                         *//* value        -in- +list+ the array of GOTH_VALUEs to use to enter    *//*                   new value.                                         *//* nvalues      -in- +abs+ the length of the GOTH_VALUE array.          *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__MALLOC if insufficient memory for operation                   *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_set_rac_unknown(GD_RAC          rac_id,                                       GOTH_VALUE      *value,                                       GOTH_INTEGER    nvalues);/*----------------------------------------------------------------------*//* EXTERN lsr_set_rac_space_tree					*//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Set the space tree on a TRANSFORM rac to allow coordinate changes.	*//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id -in- the rac descriptor.                                      *//* tree_id -in- the descriptor of the space tree.			*//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__RASTERBADTYPE if invalid type of rac for operation            *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_set_rac_space_tree(GD_RAC          rac_id,                                          GD_SPACE_TREE   tree_id) ;/*----------------------------------------------------------------------*//* EXTERN lsr_set_pixel_access_type                                     *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Set the pixel access type on a transform rac.                        *//* (e.g. PIXEL_ACCESS_BUFFER).                                          *//* The pixel access type used on a transform rac can be used to         *//* determine whether the structure created when a spatial transform is  *//* to be perfomed creates a buffer which is a tile-aligned copy of data,*//* an array of pointers to stored tiles, or an exactly aligned copy of  *//* data.                                                                *//* The former is used where there is a near one to one match or better  *//* between the number of input and output pixels (e.g. replication).    *//* A pointer array is useful for cases where there are more input than  *//* output pixels (e.g. subsampling).                                    *//* An exact copy is useful for facilities like filtering where there is *//* a close one to one match and near pixel alignment.                   *//*                                                                      *//* N.B. The type of pixel access used <<must>> be consistent with the   *//* the raster resampling function determined by                         *//* <<lsr_set_rac_spatial_conv>>.                                        *//*                                                                      *//*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id           -in- the rac descriptor (must be a transform rac)   *//* pixel_access_type -in- the pixel access to use for transformation    *//*                        function. By default this uses a contiguous   *//*                        tile aligned buffer.(e.g  PIXEL_ACCESS_BUFFER)*//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__BADPIXELACCESSTYPE invalid value of pixel access type         */ /*  GOTH__RASTERBADTYPE if invalid type of RAC for operation            *//*  GOTH__RASTERDATALOCK if the data used by this operation is locked   *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS  lsr_set_pixel_access_type(GD_RAC          rac_id,                                      RAST_PIXACC_TYPE pixel_access_type) ;/*----------------------------------------------------------------------*//* EXTERN lsr_get_access_mode						*//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Return the lock mode of the RAC.					*//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id       -in- the descriptor for the rac.                        */  /* access_mode  -out- whether file to be read or written                *//*                   (e.g. RAST_READ_ONLY).                             *//* readable     -out- whether the data set is readable.			*//* writeable     -out- whether the data set is writeable.	       	*//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_get_access_mode(GD_RAC	      rac_id,				       RAST_LOCK_TYPE *access_mode,				       GOTH_BOOLEAN   *readable,				       GOTH_BOOLEAN   *writeable);/*----------------------------------------------------------------------*//* EXTERN lsr_change_access_mode					*//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Change the access mode of a data rac. The data rac is flushed	*//* and the access mode of the physical files associated with the RAC	*//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id       -in- the descriptor for the rac.                        */  /* access_mode  -in- whether file to be read or written                 *//*                   (e.g. RAST_READ_ONLY).                             *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__BADRASTERACCESS if the access parameter is not well defined   *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_change_access_mode(GD_RAC	 rac_id,					  RAST_LOCK_TYPE access_mode) ;/*----------------------------------------------------------------------*//* EXTERN lsr_clear_rac							*//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Delete the data and index files of a data rac so that it is an       *//* uninitialised state.							*//*									*//*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id  -in- the DATA RAC to be deleted.				*/ /*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__RASTERBADTYPE if an invalid type of rac for operation         *//*  GOTH__MALLOC if insufficient memory for operation                   *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_clear_rac(GD_RAC rac_id) ;/*----------------------------------------------------------------------*//* EXTERN lsr_clear                                                     *//*......................................................................*//*..DESCRIPTION.........................................................*//*                                                                      *//* Delete data and index files associated with a named LSR raster.      *//*..ARGUMENTS...........................................................*//*                                                                      *//* filename        -in- the name of the raster dataset (e.g. "osmap")   *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__RASTERDATALOCK if the data used by this operation is locked   *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_clear(GOTH_STRING filename) ;/*----------------------------------------------------------------------*//* EXTERN lsr_regrid_data						*//*......................................................................*//*..DESCRIPTION.........................................................*//*									*//* Given an input tile of data retile the data on a user specified 	*//* grid.								*//* If no grid points are found within the tile area then nout1 and nout2*//* are returned as 0,out_ptr is NULL, and low1 and low2 set to 0.0 	*//*									*//*..ARGUMENTS...........................................................*//*									*//*  rac_id     -in-  the RAC from which the tile comes. 		*//*  tile_ptr   -in- the pointer to the tile data.			*//*  tile_low1  -in- bottom left corner of the tile in real world 	*//*                coordinates for the primary storage direction.        *//*  tile_low2  -in- bottom left corner of the tile in real world 	*//*                coordinates for the secondary storage direction.      *//*  tile_high1  -in- top right corner of the tile in real world 	*//*                coordinates for the primary storage direction.        *//*  tile_high2  -in- top right corner of the tile in real world 	*//*                coordinates for the secondary storage direction.      *//*  grid_origin1 -in- the origin of the user defined grid		*//*  grid_origin2 -in- the origin of the user defined grid		*//*  grid_scale1  -in- the scale of the user defined grid		*//*  grid_scale2  -in- the scale of the user defined grid		*//*  out_ptr     -out- the regrided data.N.B. the memory returned        *//*		      should be freed by the user.			*//*  nout1       -out- the number of pixels in the out buffer		*//*  nout2       -out- the number of pixels in the out buffer		*//*  low1        -out the bottom left hand grid point returned		*//*  low2        -out the bottom left hand grid point returned		*//*..RETURN-CODES........................................................*//*									*//*  GOTH__NORMAL if operation completes successfully                    *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__RASTERBADTYPE if invalid type of rac for operation            *//*  GOTH__MALLOC if insufficient memory for operation                   *//*									*//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_regrid_data(GD_RAC      	rac_id,				   GOTH_SPECIAL	tile_ptr,				   GOTH_REAL	tile_low1,				   GOTH_REAL	tile_low2,				   GOTH_REAL	tile_high1,				   GOTH_REAL	tile_high2,				   GOTH_REAL	grid_origin1,				   GOTH_REAL	grid_origin2,				   GOTH_REAL	grid_scale1,				   GOTH_REAL	grid_scale2,				   GOTH_SPECIAL *out_ptr,				   GOTH_INTEGER	*nout1,				   GOTH_INTEGER	*nout2,				   GOTH_REAL	*low1,				   GOTH_REAL	*low2,				   GOTH_INTEGER	*binary_pad) ;/*----------------------------------------------------------------------*//* EXTERN lsr_test_initialised						*//*......................................................................*//*..DESCRIPTION.........................................................*//* Test if a raster is initialised.					*//*                                                                      */ /*..ARGUMENTS...........................................................*//*                                                                      *//* rac_id -in- the rac to test						*//* is_initialised -out- TRUE if raster is initialised                   *//*                                                                      *//*..RETURN-CODES........................................................*//*                                                                      *//*  GOTH__DESC   if the descriptor is not well defined                  *//*  GOTH__NORMAL if operation completes successfully                    *//*                                                                      *//*----------------------------------------------------------------------*/extern GOTH_STATUS lsr_test_initialised(GD_RAC rac_id,					GOTH_BOOLEAN *is_initialised) ;/* $Header: /gothic/hdr/rasterlib/v1-20a-4/RCS/hdr.lsr_intrinsics.h,v 1.26 1995/03/13 11:44:16 clarke Exp $								*//* 									*//* $Log: hdr.lsr_intrinsics.h,v $ * Revision 1.26  1995/03/13  11:44:16  clarke * Version v1-20a-4 derived from v1-20a-3 * Need to include LSR_GET_PIXEL_ACCESS_PARAMS macro in lsr_access.h * because it is required by lsrclib v1-16 and later. * * Revision 1.25  1995/02/23  15:24:41  clarke * Version v1-20a-3 derived from v1-20a-2 * Optimisation in lsr_access.h which was found be be much faster on VAX * and Alpha AXP (VMS) * See WICC 479. incorporate optimisation developed on VAX. * * Revision 1.23  1995/01/06  11:34:30  andyb * Version v1-20a-2 derived from v1-20a-1 * * GOTHIC WICC 436. * * Fix problem in 'mbr_map' function in lsr.c where extra parameters * are assigned for 'lsrc_subsample_mbr_map()' and 'lsrc_affine_mbr_map()' * when not required resulting in an array bounds write. See GOTHIC error * log 477 for details. * * NB. Also requires lsrclib/v1-15. Copied lsr_external_defns.h and * lsr_external_cache_defns.h from rasterlib/v1-21 so lsrclib/v1-15 * compiles against this version of rasterlib. * * Revision 1.22  1994/09/06  08:51:10  euanc * Version v1-20a-1 derived from v1-20 * Make the tile hashing function independent of the RAC of the * tile to which it is attached. This is good policy anyway and * gets around the problem of having index blocks hanging around in the * cache which have no corresponding RAC then using the hash function to * delete themselves from the hash table. * WICC 321. * Implement writing through tiled rasters. * Fix bug in LSR_GET_NEXT_PIXEL.... macros when the next pixel is in a * new tile. The intile pixel position should be updated to the next tile. * Fix bug in subsampling of point rasters so that extra pixels are * pulled in at the high end of the the input range. * Frozen prior to CDCO system tests. * * Revision 1.21  1994/05/06  08:29:08  davidm * Version v1-20 derived from v1-19 * Include interface to allow general transformation functions. * Fix jacket for lsr_set_rac_layered to stop seg falut if no * arguments. * WICC 284. * * Revision 1.20  1994/03/14  10:47:26  davida * Version v1-19 derived from v1-18 * Fix a bug in the reference count for the unknown tile of a raster. * The reference count should not be decremented when the unknown value * for a tile is reset but the raster has not yet been initialised. * WICC 269 Error log 148 * * Revision 1.16.1.7  1994/02/16  18:39:19  olivia * Version v1-18 derived from v1-17 * Allow rasters which are input to raster call-backs to be edited within * a read call-back. This amounts to calling cache_value_altered for this * tile after the call-back has executed. The input raster must be * writeable,and it is the responsibility of the call-back to do * the editing and to ensure that it doesn't edit the unknown tile etc,etc. * WICC 163 * Update header version number to 7, indicating use of SPAM files. * Tidy up tile locking structure to ease development of the side effect * editing. * Ensure that correct conversion is performed when writing out to files. * FIx bug in replication of tile buffers when pixels and tile edges are not * coincident. * * Revision 1.16.1.3  1993/10/07  16:07:43  davidm * Version v1-17 derived from v1-16 * Develop lsr_get_reg_ptr to read the tiles in orders other than * top left horizontal * WICC 124 * Replace the option RAST_TL_READ_X_WRITE_XW - that is on write dont do * a cache read but do a cache write (??????) with the correct option * RAST_TL_READ_X_WRITE_RX - that is the layering callback does a read on * a tile,but not a write. * * Revision 1.16.1.2  1993/08/11  09:34:43  davidr * Version v1-16 derived from v1-15 * WIC 71 - Include FSM calls in the ``lsr_size...'' routines * which are altered to return reals. * Include new macros in lsr_access.h to deal with a union * containing the pointer types supported by reasterlib. * Include call to lsr_get_rac_unknown_real to return the * unknown value of a raster. * * Revision 1.16.1.1  1993/07/07  12:48:57  davidr * Version v1-15 derived from v1-14 * Allow conversion of other datatypes to binary bit packed data. * ., * * Revision 1.16  1993/03/10  20:31:35  jon * Version v1-14 derived from v1-13 * Fix a bug in lsr_copy and insert lsr_rename * * Revision 1.15  1993/02/08  16:46:00  davidm * Version v1-13 derived from v1-12 * Allow scaling of rasters in transform racs to take account of resampling scheme. * * Revision 1.14  1993/01/15  15:25:03  olivia * Version v1-12 derived from v1-11 * Allow file protection to be changed on data racs. * Change the handling of newly created files so that files are only * produced when data is to be written out from cache. * * Revision 1.13  1992/12/03  14:22:45  davidm * Version v1-11 derived from v1-10 * Development of compression schemes using quad searches for areas * which compress well. * Use of speeded up default nearest neighbour sampling for non-integer replication * and subsampling. * Fix free memory read problem in `lsr_delete_rac_by_rac' * Set lsr_delete to return GOTH__NORMAL if the data files do not exist. * * Revision 1.12  1992/11/16  14:25:33  davidm * Version v1-10 derived from v1-9 * Change delete functions so that they no longer return GOTH__ATTACH. * Remove a bug where the unknown tile pointer was being stored away and then * being realloced elsewhere so that the unknown tile was effectively being * overwritten. * * Revision 1.11  1992/10/19  22:42:49  jon * Version v1-9 derived from v1-8 * Enable the setting of different resampling schemes to override the default * scheme of nearest neighbour when the transformation is automatically * invoked from rasterlib. * Add a function to enable a region to mark tiles as edited as they are * extracted through ``lsr_get_reg_ptr''. This will facilitate in situ * editing of files for raster editing etc.. * Set an area of memory blatted with zero so this can be shared by all RAcs * with unknown value zero, and so save quite large areas of memory. * (e.g. c 50k for RGB byte tiles) . * * Revision 1.10  1992/09/24  15:06:21  davidr * Version v1-8 derived from v1-7 * Automatatic forward mapping of the source data mbr onto the output dataset * for the case where no output data window has been explicitly set. * Automatic forward mapping of the source data tiling origin onto the * output dataset for the case where no tiling origin has been explicitly set. * * Revision 1.9  1992/09/21  10:19:08  davidm * Version v1-7 derived from v1-6 * Fix a nasty bug relating to the attachment of rasters to regions. * Add a jacket for lsr_r_delete_rac. * * Revision 1.8  1992/09/15  10:30:32  davidm * Version v1-6 derived from v1-5 * Fix a bug in snapping a tiling origin between a transform raster and its * source data when the offsets between the tiling origins are negative. * Inclusion of routine lsr_packtype_bytes to return the number of bytes * associated with a packing type. * * Revision 1.7  1992/09/06  19:55:29  jon * Version v1-5 derived from v1-4 * To allow the conversion of short integer type datatypes to byte pack * datatypes. * * Revision 1.6  1992/08/26  20:07:58  jon * Version v1-4 derived from v1-3 * fixed bug in 'lsr_set_space_tree' * Fixes to support raster transformations for Translate application. * * Revision 1.5  1992/08/17  09:58:40  davidm * Version v1-3 derived from v1-2 * Inclusion of routines useful for raster import and export. * Various bug fixes and checking of enhancements for SMART release. * * Revision 1.4  1992/05/28  15:44:59  davidm * Version v1-2 derived from v1-1-1 * Development of a raster using a MRB tree for the index. * Bug fixes for layering RACs where the layering function is null. * * Revision 1.3  1992/05/14  12:00:21  davidr * Version v1-1-1 derived from v1-1 * Merge of old system VTRAK work with development version. * Miscellaneous bugfixes for SMART * * Revision 1.2  1992/04/24  13:04:54  jon * Version v1-1 derived from v1-0 * Alternative extracted to enter access version of library. * Raster handling of look up tables with more than 256 entries. *								*/#endif