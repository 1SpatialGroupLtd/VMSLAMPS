;
; * This file is part of the LAMPS distribution, released as a software
; * preservation project to archive digital history for future historians.
; * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
; *
; * Timestamp of this file for the 2002 release was: 1988-11-27 15:17:04.000000000 +0000
; *
; * This program is free software: you can redistribute it and/or modify
; * it under the terms of the GNU General Public License as published by
; * the Free Software Foundation, version 3.
; *
; * This program is distributed in the hope that it will be useful, but
; * WITHOUT ANY WARRANTY; without even the implied warranty of
; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
; * General Public License for more details.
; *
; * You should have received a copy of the GNU General Public License
; * along with this program. If not, see http://www.gnu.org/licenses/.
;
 .IF DF LCDISP
  .IF NE LCD16
   .IF NE Laserview
	.TITLE	LVU_OD
   .IFF
	.TITLE	LCOD16
   .ENDC
  .IFF
   .IF NE LCD14
	.TITLE	LCOD14
   .IFF
	.TITLE	LCOD
   .ENDC
  .ENDC
 .IFF
	.TITLE	TKOD
 .ENDC
	.IDENT	/27NO88/


; Copyright Laser-Scan Laboratories Ltd., Cambridge, England

; Author Susan Manning from originals by R. Fairbairns
;		from originals by P.A.Woodsford, P.Cross, et al.

; Date as .IDENT

; T e k t r o n i x   4 0 1 x   g r a p h i c   l i b r a r y   o d d m e n t s

; Conditional assembly by variable C4014; non-0 if supporting 4014 with
;   enhanced graphics, or a 4016

	CODE_PSECT	TKW

; User access to variables

; LDFPPM as HRD manual

; meaningless values returned zero

; extra entry:
;   ISW=4: R7:=?,  R8,R9:=screen extent

 .ENTRY		LDFPPM,^M<R6,R7,R9>
$LDFPP:: CASE	@4(AP),<1$,2$,3$>,LIMIT=#1,TYPE=W

; not 1, 2, or 3 - treat as 4
	CLRF	R6
	MOVF	#TKEXTX,R7
	MOVF	#TKEXTY,R9
	BRB	6$

; 1 - intensity, UX, UY
1$:	MOVAB	TKRUX,R10
4$:	CLRF	R6	; meaningless first result
	BRB	5$

; 2 - scale, OX,OY
2$:	MOVF	TKSCF,R6
	MOVAB	TKRUOX,R10
5$:	MOVF	(R10)+,R7
	MOVF	(R10),R9
	BRB	6$

; 3 - CH, CX, CY - totally meaningless!
3$:	CLRF	R6
	CLRF	R7
	CLRF	R9
6$:	MOVF	R6,@8(AP)	; return results
	MOVF	R7,@12(AP)
	MOVF	R9,@16(AP)
	RET


; Origin change
; currently supports only '-1' version of LDLIB 'ORIGIN'

 .ENTRY		ORIGIN,^M<R2,R4,R5,R6,R7,R8,R9,R10,R11>
	MOVF	@4(AP),R7
	MOVF	@8(AP),R9
	BSBB	O$RIG
	RET


O$RIG:	INCB	TKSCUN		; mark change in origin
	MOVAB	TKRDOX,R10
	MOVF	R7,(R10)+	; preserve display values
	MOVF	R9,(R10)+
	MOVF	TKSCF,R6	; current scale
	DIVF2	R6,R7
	MOVF	R7,(R10)+	; user values (TKRUOX/Y)
	DIVF2	R6,R9
	MOVF	R9,(R10)+
	JSB	TKTRMT		; transform R7,R9 to Tek counts
	MOVF	R6,(R10)+	; (TKRTOX/Y)
	MOVF	R8,(R10)
$SETOR:	ADDF3	TKRTOX,TKCENX,OFSETX	; set offsets
	ADDF3	TKRTOY,TKCENY,OFSETY

; move to new origin
$MOVT0:: CLRF	R7
	CLRF	R9
	JSB	$MOVTO
	RSB


; Units change

 .ENTRY		UNITS,^M<R2,R4,R5,R6,R7,R8,R9,R10,R11>
	MOVF	@4(AP),R6
	BSBB	U$NIT
	RET


U$NIT:	INCB	TKSCUN		; mark change in origin
	MOVF	R6,TKSCF	; preserve new scale
	MOVAB	BASETR,R10	; basic transformation screen cm.->counts
	MOVAB	TKTR,R1
	MOVL	#4,R2
1$:	MOVF	(R10)+,R7	; derive TKTR = BASETR * TKSCF
	MULF3	R6,R7,(R1)+
	SOBGTR	R2,1$

; adjust user origin to new units
	MOVAB	TKRDOX,R10
	DIVF3	R6,(R10)+,R7
	DIVF3	R6,(R10)+,R9
	MOVF	R7,(R10)+	; (TKRUOX/Y)
	MOVF	R9,(R10)
	BRB	$MOVT0		; move to the origin


; TKOFF(X,Y)	offset the centre of the Tektronix screen by (X,Y) Tek counts
;		(-10. <= X,Y <= +10.)

.ENTRY		TKOFF,^M<R2,R4,R5,R6,R7,R8,R9,R10,R11>
	MOVF	@4(AP),R7
	MOVF	@8(AP),R9
	BSBB	TK$OFF
	RET

TK$OFF:	INCB	TKSCUN			; mark origin change
	CMPF	R7,#MINOFF		; force X in range
	BGTR	10$
	MOVF	#MINOFF,R7
10$:	CMPF	R7,#MAXOFF
	BLSS	20$
	MOVF	#MAXOFF,R7
20$:	CMPF	R9,#MINOFF		; force Y in range
	BGTR	30$
	MOVF	#MINOFF,R9
30$:	CMPF	R9,#MAXOFF
	BLSS	40$
	MOVF	#MAXOFF,R9
40$:	MULF2	#16.0,R7		; scale up from 12 to 16 bit
	MULF2	#16.0,R9
	ADDF3	R7,#BASOFX,TKCENX	; add in base offsets
	ADDF3	R9,#BASOFY,TKCENY
	BRW	$SETOR			; set new origin


; TKSTYL - set Tek line style

; CALL TKSTYL(S)  (integer S)

; S = 0 => full line
;    = 1 => dotted
;    = 2 => dot dash
;    = 3 => short dash
;    = 4 => long dash
;    (>4, <0 => ignore call)

 .ENTRY		TKSTYL, ^M<R2,R5,R10,R11>
	MOVW	@4(AP),R1
	BLSS	STRTS		; -ve arg  - ignore
	CMPW	R1,#T.MXST
	BGTR	STRTS		; also if out of range
	CMPW	R1,TKCSTY	; same as what we have already?
	BEQL	STRTS		; yes - ignore
	MOVW	R1,TKCSTY	; set up new current style
	JSB	$CHKBF
	.BYTE	2
	JSB	$TKLCE		; set LCE
	BISB3	TKCSTY, #TG.STY, R10 ; add this style to style contrl bits
	JSB	$TKWCH		; and go to appropriate style
STRTS:	RET


; TKCHSZ - set Tek character size

; CALL TKCHSZ(S)  (integer S)

; S = 0-3 for max-min sizes
; S,0 or S>3  ignore call

 .ENTRY		TKCHSZ,^M<R2,R5,R10,R11>
	MOVW	@4(AP),R1		; ars S
	BLSS	SZRTS		; -ve arg   - ignore
	CMPW	R1,#T.MXCS
	BGTR	SZRTS		; or if out of range
	JSB	$TKCS1		; common up with macro
SZRTS:	RET

; set character size to R1
$TKCS1:: CMPW	R1,TKCCHS	; current size
	BEQL	SZRTS		; same - ignore it
	MOVW	R1,TKCCHS	; set up new size
	JSB	$CHKBF
	.BYTE	2
	JSB	$TKLCE		; set LCE
	BISB3	TKCCHS,#TG.CHS,R10	; add size value to size control bits
	JSB	$TKWCH		; and set appropriate style
	RSB


; TKINIT  - initialise display

; CALL TKINIT(SW [,LUN] [,EFN])

; SW coded bitwise:
; d0 =0 => complete drawing, disable, detach display
;    =1 => attach, enable display, decode other bits (such as they are)
; d1 =1 => clear screen
; d2 =1 => set default scale, origin
; d9 =1 => inhibit use of interactive mode, no mailbox etc

; LUN and EFN are no longer used

TKDESC:	.ASCID	/LSL$TK/	; descriptor for device name
MBNAME:	.LONG	MB_NAME_SIZE	; string descriptor for mbox name
	.ADDRESS MB_NAME_PRFRM
MB_DEV:				; string descriptor for mbox device name
MBDLEN:	.LONG	MBDSIZ
MBDPTR:	.ADDRESS MBDBUF

LDINIT::
 .ENTRY		TKINIT,^M<R2,R4,R5,R6,R7,R8,R9,R10,R11>
$TKINI:: MOVW	@4(AP),R10	; SW argument
	BLBS	R10,10$	
	BRW	OFF		; if d0=0 - switch off
10$:	CVTWL	R10,-(SP)	; preserve argument for later
	TSTB	TKENBL		; already on?
	BEQL	15$		;  if EQL, no
	BRW	ONOK		; already enabled
15$:	BICL2	#FLAG_M_4014,FLAGW	; assume using MUART
	CMPL	@12(AP),#4014		; using 4014?
	BNEQ	20$			; no
	BISL2	#FLAG_M_4014,FLAGW	; yes
20$:	$DCLEXH_S	DESBLK=TKEXBLK	; declare exit handler to leave
					; things nice and tidy
	MOVAL	TKISB1,QO.IOSB	; set QIO status block address
	MOVAB	TKBUF1,QO.BUF	; and buffer address
	PUSHAL	TKNEFN
	CALLS	#1,G^LIB$GET_EF	; get output event flag
	BLBCW	R0,ERRSIG
	MOVL	TKNEFN,QO.EFN	; put in QO.DPB
	PUSHAL	TKHTEF
	CALLS	#1,G^LIB$GET_EF	; get hardcopy timer event flag
	BLBCW	R0,ERRSIG
	MOVL	TKHTEF,TK.EFN	; put in DPB
	PUSHAL	CSEFN
	CALLS	#1,G^LIB$GET_EF	; get event flag for use in CSRD
	BLBCW	R0,ERRSIG
	PUSHAL	TKIEFN
	CALLS	#1,G^LIB$GET_EF	; get event flag for input transfer
	BLBCW	R0,ERRSIG

; now set up mailbox for unsolicited input notification, if interactive mode
; and set up CHAN for our use

; translate logical name for device
	MOVAB	EQVBUF,EQVPTR		; address part of descriptor
	$TRNLOG_S	LOGNAM=TKDESC,-	; logical name for device
			RSLLEN=EQVLEN,-	; length
			RSLBUF=EQVDSC	; destination
	CMPL	R0,#SS$_NORMAL
	BNEQW	ERRSIG

; need to set up mailbox etc. ?
	BBC	#9,(SP),17$		; branch round jump if do
	BRW	NOMBX			; jump round mbox setup if don't
; translate logical name for mailbox
17$:	MOVAB	EQVBUF,R0		; get start of device name
18$:	CMPB	(R0)+,#^A/_/		; strip off any leading _'s
	BEQL	18$
	TSTB	-(R0)			; back up to last non _
	MOVL	(R0),MBTN		; move next 4 characters into mboxname
	$TRNLOG_S	LOGNAM=MBNAME,-	; try to translate mbox name
			RSLLEN=MBDLEN,-
			RSLBUF=MB_DEV	; destination
	CMPL	R0,#SS$_NORMAL		; found a translation?
	BNEQ	NEWMBX			; no - create new mailbox

; here with existing mailbox
	$ASSIGN_S	DEVNAM=MB_DEV,-	; assign a channel to it
			CHAN=MBCHAN
 	BLBC	R0,ERRSIG
; now clear any existing crud from it
	JSB	MBCLR
	BRB	GOTMBX

; error exit
ERRSIG:	PUSHL	R0
	CALLS	#1,G^LIB$SIGNAL
	RET

; can safely create new mailbox
; NB not sure how big it should be (default is far too large)
; 84 is the minimum for a termination mailbox (which this isn't!)
NEWMBX:	$CREMBX_S	CHAN=MBCHAN,-
			MAXMSG=#84,-
			BUFQUO=#84,-
			LOGNAM=MBNAME
	BLBC	R0,ERRSIG

GOTMBX:	$ASSIGN_S	DEVNAM=EQVDSC,-
			CHAN=TKCHAN,-
			MBXNAM=MBNAME
	BLBC	R0,ERRSIG
	JSB	MBENBL			; enable mailbox
	BRB	SETALT

; assign channel to device, N.B. no mailbox
NOMBX:	$ASSIGN_S	DEVNAM=EQVDSC,-
			CHAN=TKCHAN
	BLBC	R0,ERRSIG

; set up alternate escape character to preface input from bitpad
SETALT:	MOVL	TKCHAN,QO.CHAN		; channel for output
	MOVB	#^A/0/, TKOSEL		; make sure TKOSEL sensible
	MOVAB	TKBUF1, TKBPTR		; reset pointer
	MOVAB	TKBUF1+TKBFSZ-14,TKBLIM	; buffer limit allowing space
	BBS	#FLAG_V_4014,FLAGW,10$	; no <esc => seq without MUART
	JSB	$CHKBF
	.BYTE	7
	MOVZBW	#^A/7/,R0		; transmit "restart this prog" sequence
	JSB	$ESCSQ3
	MOVZBW	#^A/V/,R0
	JSB	$ESCSQ3
	MOVZBW	#ALT.ESC,R10
	JSB	$TKWCH

10$:	DECB	TKENBL			; Tek now thought to be enabled

; set up device dependent parameters in common block

; x and y transformation scales -> BASETR matrix
	MOVAB	BASETR,R0		; point to base transform matrix
	MOVF	#TRANX,(R0)+
	CLRF	(R0)+			; zero off diagonal elements
	CLRF	(R0)+
	MOVF	#TRANY,(R0)+
; and screen limits -> common
	MOVF	#LIMIT1,(R0)+		; MINX
	MOVF	#LIMIT2,(R0)+		; MAXX
	MOVF	#LIMIT3,(R0)+		; MINY
	MOVF	#LIMIT4,(R0)+		; MAXY
; and factor for scaling to 16 bit (for CSRD)
	MOVF	#FACTOR,(R0)		; TKFACT


; Tek was already on - ensure not refreshing
; 	(and set initial 'output mode selection')
ONOK:	BBS	#FLAG_V_4014,FLAGW,10$	; no <esc => seq without MUART
	JSB	$ESCE0

; look at other bits
10$:	BBC	#1, (SP), 20$	; use copy of first argument
	CALLS	#0,TKCLR	; clear screen (flushes for us)
	BRB	30$
20$:	BSBW	$FLUSH		; flush the contents of buffer
30$:	MOVL	(SP)+, R10	; recover first argument to clear stack
	BBC	#2,R10,RET
	MOVF	#1.0,R6		; default scale
	BSBW	U$NIT		; set scale
	CLRF	R7		; default origin
	CLRF	R9
	BSBW	O$RIG		; set origin
	CLRF	R7
	CLRF	R9
	BSBW	TK$OFF		; use actual screen centres as default

; set default character size and spacing for LCD
.IF DF LCDISP
	MOVF	#^F1.0,R6	; default carriage spacing
	MOVF	R6,R7		; horizontal and equivalent to char height
	CLRW	R9		; of 1cm
	JSB	$CHSIZ
	CLRW	R6		; default to font 0
	CLRW	R7		; non-italicised
	JSB	$CHFNT
.ENDC

RET:	RET

; to switch Tek off

OFF:	TSTB	TKENBL		; already off?
	BEQL	RET		; yes
	BBS	#FLAG_V_4014,FLAGW,3$	; no <esc => seq without MUART
	TSTW	$REFNG		; refreshing
	BEQL	1$		; no
	CALLS	#0,RFSTOP	; stop refresh
	BRB	2$
; transmit "restart this prog" sequence and leave Tek in correct state
1$:	JSB	$ESCE0			; restore ALPHA mode
2$:	MOVZBW	#^A/7/,R0
	JSB	$ESCSQ3		; transmit 'restart program'

; get last out
3$:	JSB	$FLUSH
	JSB	$WBUFF		; wait for it !
	CLRB	TKENBL		; display off

	$CANEXH_S	DESBLK=TKEXBLK	; cancel exit handler
	$DASSGN_S	CHAN=TKCHAN	; de-assign channel
	
; free various event flags
	PUSHAL	TKNEFN
	CALLS	#1,G^LIB$FREE_EF
	PUSHAL	TKHTEF
	CALLS	#1,G^LIB$FREE_EF
	PUSHAL	CSEFN
	CALLS	#1,G^LIB$FREE_EF
	PUSHAL	TKIEFN
	CALLS	#1,G^LIB$FREE_EF
	RET

; exit handler for Tek library - leaves Tek/TMU in correct state
 .ENTRY	TKEXHL,^M<R6,R10>
	BBS	#FLAG_V_4014,FLAGW,10$	; no <esc => seq without MUART
	MOVL	#7, R6		; define <esc>=7 (reset TMU)
	JSB	$ESCEQ		; transmit it
10$:	JSB	$FLUSH
	JSB	$WBUFF		; wait for it !
	RET


; TKRASP
; request WOSP to blow raspberries
; used as an error indicator

 .ENTRY		TKRASP,^M<R2,R6,R10>
	MOVZBW	#^A/P/,R0		; send < escape = P > sequence
	JSB	$ESCSQ3
	JSB	$FLUSH			; transmit immediately
	RET


; TKPING - use the Tek's bell

 .ENTRY	TKPING, ^M<R2,R6,R10>

	SUBB3	#^A/0/, TKOSEL, -(SP) ; last <esc>= function
	BEQL	10$		; if EQL, already in stored mode
	JSB	$ESCE0		; force stored mode
10$:	JSB	$TKW2C		; transmit:
	.BYTE	 AS.BEL, AS.GS	;  bell, <GS>
	MOVZBL	(SP)+, R6	; recover original selection
	JSB	$ESCEQ		; and shoot it off
	JSB	$FLUSH		; force it out
	RET			; and we're done


; TKCLR - clear Tektronix screen

PCFRAM::
DIFRAM::
 .ENTRY		TKCLR,^M<R2,R5,R10,R11>
	JSB	$TKW2C		; transmit instruction
	.BYTE	AS.ESC,AS.FF
	JSB	$FLUSH		; ensure it's on it's way
	CLRB	TKGRAF		; Tek reset => alpha mode
	MOVL	TKCLWT,WAITIME	; clear screen settle time
	BRB	TKWAIT		; and set up the wait


; TKCOPY - make hard copy of screen

 .ENTRY		TKCOPY,^M<R2,R5,R10,R11>
	JSB	$TKW2C		; transmit instruction
	.BYTE	AS.ESC,AS.ETB
	JSB	$FLUSH		; ensure its out
	MOVL	TKHCWT,WAITIME	; hardcopy settle time

; and fall through into ...

; TKWAIT will set up mark time etc for wait

TKWAIT:	MNEGB	#1,TKWHDC	; mark waiting
	$SETIMR_G	TKHTDP	; set up mark time
	BLBS	R0,1$		; O.K.
	PUSHL	R0		; error
	CALLS	#1,G^LIB$SIGNAL
	CLRB	TKWHDC
1$:	RET


; AST for processing end of hard copy wait time

 .ENTRY		TKCAST,^M<>
 CLRB	TKWHDC		; not waiting
	RET


; set time of hard copy delay

 .ENTRY		TKCTIM,^M<>
	MOVZWL	@4(AP),R0		; stretch the time in seconds
	MULL3	R0,#WAITMUL,TKHCWT	; and convert to ticks
	RET

; local workspace

	DATA_PSECT	TKW

; exit handler descriptor block
TKEXBLK:		; exit handler control block
	.LONG	0	; system uses this for pointer
	.ADDRESS TKEXHL	; address of exit handler
	.LONG	1	; number of arguments for handler
	.ADDRESS TKSTAT	; address to receive status code
TKSTAT:	.BLKL	1	; status code from $EXIT

; define DPB for mark time
TKHTDP:	$SETIMR		DAYTIM=WAITIME,ASTADR=TKCAST,-
		EFN=0,REQIDT=0

TK.EFN = TKHTDP + SETIMR$_EFN
TK.DAYTIM = TKHTDP + SETIMR$_DAYTIM

WAITMUL =  -10*1000*1000
WAITIME: .LONG	WAITMUL * TKDCTI, -1

TKHCWT:	.LONG	WAITMUL * TKDCTI	; hardcopy time in ticks
TKCLWT:	.LONG	WAITMUL * TKCLTI	; clear screen time in ticks

	.PSECT
	.END
