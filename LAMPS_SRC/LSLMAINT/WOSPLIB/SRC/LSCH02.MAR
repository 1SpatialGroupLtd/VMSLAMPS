;
; * This file is part of the LAMPS distribution, released as a software
; * preservation project to archive digital history for future historians.
; * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
; *
; * Timestamp of this file for the 2002 release was: 1985-01-02 17:41:44.000000000 +0000
; *
; * This program is free software: you can redistribute it and/or modify
; * it under the terms of the GNU General Public License as published by
; * the Free Software Foundation, version 3.
; *
; * This program is distributed in the hope that it will be useful, but
; * WITHOUT ANY WARRANTY; without even the implied warranty of
; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
; * General Public License for more details.
; *
; * You should have received a copy of the GNU General Public License
; * along with this program. If not, see http://www.gnu.org/licenses/.
;

	.TITLE LSCH
	.IDENT	/02JA85/
 
; Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
;
; Author: Susan Manning
 
	CODE_PSECT	TKW
 
; LCD character control routines
 
; CHSIZE(CH,CX,CY) set character height CH, and spacing CX,CY (in user units)
 
.ENTRY	CHSIZE,^M<R2,R5,R6,R7,R8,R9,R10>
	MOVF	@4(AP),R6	; get character height
	MOVF	@8(AP),R7	; get character spacing vector
	MOVF	@12(AP),R9
	BSBB	$CHSIZ
	RET
 
$CHSIZ::
	MULF2	TKTR,R6		; transform CH to tek counts
	BGEQ	5$
	MNEGF	R6,R6		; height must be positive
5$:	CMPF	R6,#CHEXT
	BLEQ	10$
	MOVF	#CHEXT,R6	; force within limit if necessary
10$:	CVTFW	R6,CHCH		; store
	JSB	TKTRMT		; transform CX, CY into R6,R8
	CLRL	R0
	TSTF	R6
	BGEQ	15$
	MNEGF	R6,R6		; make +ve so only one comparison
	INCL	R0		; remember
15$:	CMPF	R6,#CHEXT
	BLEQ	20$
	MOVF	#CHEXT,R6	; force in range
20$:	TSTL	R0
	BEQL	25$
	MNEGF	R6,R6		; restore sign
25$:	CVTFW	R6,CHCX		; store
	CLRL	R0
	TSTF	R8		; same for CY
	BGEQ	30$
	MNEGF	R8,R8
	INCL	R0
30$:	CMPF	R8,#CHEXT
	BLEQ	35$
	MOVF	#CHEXT,R8
35$:	TSTL	R0
	BEQL	40$
	MNEGF	R8,R8
40$:	CVTFW	R8,CHCY
;
	JSB	$CHKBF		; check sequence contiguous
	.BYTE	9
	MOVZBW	#^A/N/,R0
	JSB	$ESCSQ3		; transmit <escape = N>
;
; transmit each of 3 words (CH,CX,CY) as 2*6-bit biased numbers
	MOVAB	CHCH,R9		; start of words
	MOVL	#3,R5		; no of words
	MOVL	#6,R7		; size of bit field for EXTZV
45$:	MOVL	#10,R6		; init start pos for bit field
	MOVW	(R9)+,R8	; word to transmit
50$:	EXTZV	R6,R7,R8,R10	; extract 6 bits
	JSB	$TKWBN		; transmit as biased
	SUBW2	R7,R6		; adjust start pos of field
	BGEQ	50$		; repeat for each 6-bit field
	SOBGTR	R5,45$		; repeat for each word
	MOVW	#-1,TKCCHS	; mark not concerned about char size
				; so refresh wont reset
	RSB
 
 
; CHFONT(NFONT,NITAL)	NFONT=0,1	NITAL=0,1 (normal,italicised)
;
	.ENTRY	CHFONT,^M<R2,R6,R7,R8,R10>
	MOVW	@4(AP),R6	; get font number
	CLRW	R7
	CMPW	(AP),#1		; only one argument, default to normal font
	BLEQ	10$
	MOVW	@8(AP),R7	; get italic switch
10$:	BSBB	$CHFNT
	RET
 
$CHFNT::
	BICW2	#^O177770,R6	; only fonts 0 to 7
	BICW2	#^O177776,R7	; only italic or normal
	INSV	R7,#3,#1,R6	; insert italic marker into font word
	JSB	$CHKBF
	.BYTE	4
	MOVZBW	#^A/M/,R0	; send <escape = M <font>> sequence
	JSB	$ESCSQ4
	RSB


; TKCOL(N)	N=0-7	Set colour N
;
	.ENTRY	TKCOL,^M<R2,R6,R7,R8,R10>
	MOVW	@4(AP),R6	; get colour
	BSBB	$TKCOL
	RET
 
$TKCOL:
	BICW2	#^O177770,R6	; only colours 0 to 7
	JSB	$CHKBF
	.BYTE	4
	MOVZBW	#^A/K/,R0	; send <escape = K <colour>> sequence
	JSB	$ESCSQ4
	RSB
 
	.PSECT
	.END
