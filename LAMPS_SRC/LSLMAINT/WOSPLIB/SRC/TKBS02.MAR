;
; * This file is part of the LAMPS distribution, released as a software
; * preservation project to archive digital history for future historians.
; * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
; *
; * Timestamp of this file for the 2002 release was: 1985-06-03 18:49:20.000000000 +0100
; *
; * This program is free software: you can redistribute it and/or modify
; * it under the terms of the GNU General Public License as published by
; * the Free Software Foundation, version 3.
; *
; * This program is distributed in the hope that it will be useful, but
; * WITHOUT ANY WARRANTY; without even the implied warranty of
; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
; * General Public License for more details.
; *
; * You should have received a copy of the GNU General Public License
; * along with this program. If not, see http://www.gnu.org/licenses/.
;
	.TITLE	TKBS
	.IDENT	/03JN85/
 
 
; Copyright Laser-Scan Laboratories Ltd., Cambridge, England
; Author Susan Manning, from originals by R. Fairbairns,
;		from originals by P.A.Woodsford, P.Cross, et al.
 
; date as .IDENT
 
; B a s i c   T e k t r o n i x   4 0 1 x
;         g r a p h i c    l i b r a r y     s u p p o r t
 
; Conditional assembly by variable C4014; non-0 if supporting 4014 with
;   enhanced graphics, or a 4016
 
	CODE_PSECT	TKW
 
; P r i m i t i v e    l i n e - d r a w i n g   e n t r i e s
 
; i n c r e m e n t a l
 
; null move
 
 .ENTRY		MOVB00,^M<R2,R4,R5,R6,R7,R8,R9,R10,R11>
$MOV00::			; for historical reasons
	BSBB	$MOVB0
	RET
 
; move by
 
 .ENTRY		MOVBY,^M<R2,R4,R5,R6,R7,R8,R9,R10,R11>
	MOVF	@4(AP),R7
	MOVF	@8(AP),R9
	BSBB	$MOVBY
	RET
 
; line by
 
 .ENTRY		LINBY,^M<R2,R4,R5,R6,R7,R8,R9,R10,R11>
	MOVF	@4(AP),R7
	MOVF	@8(AP),R9
$LINBY:: MOVW	#1,R10
	BSBB	MLBY
	RET
 
 
; a b s o l u t e
 
; move to
 
 .ENTRY		MOVTO,^M<R2,R4,R5,R6,R7,R8,R9,R10,R11>
	MOVF	@4(AP),R7
	MOVF	@8(AP),R9
	BSBB	$MOVTO
	RET
 
; line to
 
 .ENTRY		LINTO,^M<R2,R4,R5,R6,R7,R8,R9,R10,R11>
	MOVF	@4(AP),R7
	MOVF	@8(AP),R9
$LINTO:: MOVW	#1,R10
	BSBB	MLTO
	RET
 
$MOVB0:: CLRF	R7
	CLRF	R9
$MOVBY:: CLRW	R10
MLBY::	TSTW	$DIVRF		; in refresh?
	BEQL	LBGEN
	JMP	$RFBY		; yes - divert
 
 
$MOVTO:: CLRW	R10
MLTO::	TSTW	$DIVRF		; in refresh?
	BEQL	LTGEN
	JMP	$RFTO		; yes - divert
 
 
; form endpoint in user space
LBGEN::	ADDF2	TKRUX,R7
	ADDF2	TKRUY,R9
 
; establish at line-drawing position, and then divert for thick, etc.,
;  if required
 
LTGEN::	TSTW	TKLNCH		; have we been drawing chars?
	BEQL 	$IFTHK
	PUSHL	R7		; preserve where we
	PUSHL	R9		;   were going to
	MOVL	R10,-(SP)	;   and how
	CLRW	TKLNCH		; clear recursive loop
	BISL2	#FLAG_M_TRANSPAR,FLAGW	; force o/p of all bytes for the
	BSBW	$MOVB0		; move back to last line-drawing position
	MOVL	(SP)+,R10	; recover
	MOVF	(SP)+,R9
	MOVF	(SP)+,R7

$IFTHK:	BBC	#FLAG_V_IFTHK,FLAGW,NOTHK	
 
; R10 = visibility and endpoint in R7,R9
; T.DDC will eventually either JMP back to NOTHK for an invisible
; or will RSB back to the caller of $MOVTO (i.e. MOVETO for a
; Fortran call)
 	JMP	T.DDC

NOTHK::	MOVF	R7,TKRUX
	MOVF	R9,TKRUY
	BSBB	TKTRMT		; transform
	ADDF2	OFSETX,R6	; add offset
	ADDF2	OFSETY,R8
	JMP	$TKMOV
 
 
; TKTRMU performs linear transformation of [R7,R9] by matrix pointed
;   to by R1. Result in [R6,R8]
 
TKTRMT:: MOVAW	TKTR,R1		; standard matrix entry
TKTRMU:	MULF3	(R1)+,R7,R8	; (1,1) * X
	MULF3	(R1)+,R9,R6	; (1,2) * Y
	ADDF2	R8,R6		; X result
	MULF3	(R1)+,R7,R8	; (2,1) * X
	MULF2	(R1),R9		; (2,2) * Y
	ADDF2	R9,R8		; Y result
	RSB
 
 
 
 
; return beam to origin and wait until all drawing done
 
 .ENTRY		LDCMPL,^M<R2,R4,R5,R6,R7,R8,R9,R10,R11>
$LDCMP:: JSB	$MOVT0		; go to origin
	BRB 	$LDWAIT
 
; wait until outstanding moves completed
 
 
 .ENTRY		LDWAIT,^M<R2,R4,R5,R6,R7,R8,R9,R10,R11>
$LDWAIT:: BSBW	$MOVB0		; generate extra idle
	JSB	$FLUSH		; flush out buffer
	RET
 
 
; C h a r a c t e r    ' d r a w i n g '
 
 
; basic 'print' character
 
				; this is the best we can do
PLTCHR::			; can't be implemented as for HRD:
 .ENTRY		PRTCHR,^M<R2,R4,R5,R6,R7,R8,R9,R10,R11>
$PRTCH:: MOVZBL @4(AP),R6	; character
	BSBB	PRTR1
	RET
 
 
PRTR1:	BICB2	#^O200,R6	; clear junk
	CMPB	R6,#^O40	; control char ?
	BGEQ	1$		; no
	CMPB	R6,#AS.LF	; line feed ?
	BEQL	1$		; allowed
	CMPB	R6,#AS.CR	; carriage return ?
	BEQL	1$		; allowed
	CMPB	R6,#AS.BS	; backspace
	BEQL	1$		; nothing else allowed (not even or in refresh)
	RSB

1$:	TSTW	$DIVRF		; in refresh?
	BEQL	CHGEN
	JMP	$RFCH		; yes - divert
 
; generate character R1
CHGEN::	TSTW	TKLNCH		; already drawing characters
	BNEQ	3$		; yes
	PUSHR	#^M<R6>		; save reg mangled by T.FLSH
	JSB	T.FLSH		; ensure at correct position
	POPR	#^M<R6>		; recover reg
	JSB	$TKW2C		; get out of graphic mode
	.BYTE	AS.US,0
3$:	MOVB	R6,R10		; character to where its needed
	INCW	TKLNCH		; count characters transmitted
	JSB	$TKWCH		; transmit character
	JSB	$CHKBF
	.BYTE	0
 	RSB
 
; string of characters, zero terminated
 
 .ENTRY		CHARZ,^M<R2,R4,R5,R6,R7,R8,R9,R10,R11>
	MOVL	4(AP),R2	; string pointer
1$:	MOVZBL	(R2)+,R6	; next character of string
	BEQL	2$		; nul => end
	PUSHR	#^M<R2>		; save register flattened by PRTCHR
	BSBB	PRTR1		; output character
	POPR	#^M<R2>		; recover register
	BRB	1$
2$:	RET
 
 
; counted string of characters

.ENTRY	CHARC,^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	MOVL	4(AP),R2	; string pointer
	MOVZBL	(R2)+,R3	; character count
	BEQL	CH2		; if zero, none to output
CH1:	MOVZBL	(R2)+,R6	; next character of string
	PUSHR	#^M<R2,R3>	; save registers flattened by PRTCHR
	BSBW	PRTR1		; output character
	POPR	#^M<R2,R3>	; restore registers
	SOBGTR	R3,CH1		; next character if present
CH2:	RET


; string of characters passed by descriptor

.ENTRY	CHARS,^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	MOVL	4(AP),R2	; descriptor address
	MOVZWL	(R2),R3		; length of string
	BEQL	CH2		; if zero, none to output
	MOVL	4(R2),R2	; address of string
	BRB	CH1		; join common code


	.PSECT
	.END
