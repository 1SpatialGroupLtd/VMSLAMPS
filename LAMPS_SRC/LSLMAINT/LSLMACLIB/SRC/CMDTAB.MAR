;
; * This file is part of the LAMPS distribution, released as a software
; * preservation project to archive digital history for future historians.
; * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
; *
; * Timestamp of this file for the 2002 release was: 1994-04-25 11:15:22.000000000 +0100
; *
; * This program is free software: you can redistribute it and/or modify
; * it under the terms of the GNU General Public License as published by
; * the Free Software Foundation, version 3.
; *
; * This program is distributed in the hope that it will be useful, but
; * WITHOUT ANY WARRANTY; without even the implied warranty of
; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
; * General Public License for more details.
; *
; * You should have received a copy of the GNU General Public License
; * along with this program. If not, see http://www.gnu.org/licenses/.
;
; Macros to define command tables
; New version for alphabetically-ordered commands

; Copyright Laser Scan Laboratories Ltd., Cambridge, England
; Author  R. Fairbairns		Coded June 1981


; Macros with external significance have '$' only at the start of their name
; Names of macros 'local' to the descriptions of others start with '$$'
; Symbols which have significance outside of the invocation of one macro
;	also have '$$' at the start of their name
; Symbols whose significance is local to one macro start with '$$$'

; Despite that the initial implementation is for VAX only, names are restricted
;  to 6 characters to allow for ultimate implementation on PDP 11

; Layout of command table (VAX) is:

;	.WORD	<number of mnemonics in the table>
;	.WORD	<table flags>				(see below)
;	.ADDRESS <flags for global commands,
;		  indexed by <command number>-1>
;	.ADDRESS <user flags for commands, addressed ditto>
;		; iff user flags permitted in this table
;
; then, for each mnemonic, a structure that will serve as a character
; descriptor (if it's not scrutinised too hard)
;	.WORD	<length of mnemonic>
;	.WORD	<command number>
;	.ADDRESS <.ASCII string for mnemonic>

; define flags, etc
	.MACRO	$$CMTAB_INIT

; initialise system library
	$GBLINI

; Table flags are:
;  d15	= 0, 1	=> numeric commands integer, real
;  d14	= 0, 1	=> numeric commands permitted, forbidden
;  d13	= 0, 1	=> macro commands permitted, forbidden
;		   (always assuming we get round to implementing 'em!)
;  d12	= 0, 1	=> user command flags generated, not
;		   (also controls the presence of address of 2nd command
;		    flags table)
;  d11	= 0, 1	=> this table to be sorted, has been sorted
;  d10	= 0, 1	=> some process is inspecting d11
;		   (set by BBSSI, and wait a bit if BS)
;   d9  =    1	=> commands should be 'upper cased' before lookup in this table
;   d8  =    1	=> exact match with command required
;   d7	=    1	=> secondary tables available from this table
;   d6  = 0, 1  => commands may not, may, contain digits (as well as
;		   alphabetics and underlines)

	$VIELD	CMT,6,<-	; define those bits
		<DIGOK,,M>,-	; digits allowed in command names
		<MNEMS,,M>,-	; secondary tables
		<EXACT,,M>,-	; match constrained not to be abbreviated
		<UPCASE,,M>,-	; upper case table
		<BUSY,,M>,-	; table being sorted
		<SORTED,,M>,-	; table has been sorted
		<NOUFLG,,M>,-	; no local commands
		<SUPMAC,,M>,-	; no macro commands
		<NUMFBD,,M>,-	; numeric commands forbidden
		<NUMREA,,M>-	; numeric commands real
		>

	ASSUME	CMT$V_NUMREA, EQ, 15


; Command flags are word arrays, with:
;  d15	= 0, 1	=> arguments may, may not be omitted
;  d12	= 1	=> arguments to be extracted from secondary table
;  d11  = 1	=> 'inequality' expected before arguments
;  d10  = 1	=> command has single character argument
;   d9	= 1	=> '=' sign expected before arguments (reading switch)
;   d8	= 0, 1	=> commas illegal, permitted between arguments
;   d7	= 1	=> command has string argument
;   d6	= 1	=> command has logical argument ('sign')
; d3-5		   count (0-7) of real arguments
; d0-2		   count (0-7) of integer arguments

	$VIELD	CMD,0,<-	; define those flags
		<INTS,3,M>,-	; integer count
		<REALS,3,M>,-	; real count
		<LOG,,M>,-	; logical argument
		<STRING,,M>,-	; string argument
		<COMMA,,M>,-	; comma permitted
		<EQUAL,,M>,-	; equal expected
		<CHAR,,M>,-	; character argument (rather than string)
		<INEQUAL,,M>,-	; inequality expected
		<MNEM,,M>,-	; secondary table
		<,2,>,-		;			2 spare
		<FULL,,M>-	; no arg may be absent
		>

	ASSUME	CMD$V_FULL, EQ, 15


; Macro to define a 'descriptor'
	.MACRO	$$DESC, STR, ?$$$SL
	.NCHR	$$$LEN, STR
	.SAVE
	.PSECT	$$CMDS
$$$SL:	.ASCII	/STR/
	.RESTORE
	.WORD	$$$LEN, $$CMNO
	.ADDRESS	$$$SL
	.ENDM	$$DESC

; Macro to count alias mnemonics (max 16)
	.MACRO	$$CMNM,  A,B,C,D, E,F,G,H, I,J,K,L, M,N,O,P, Q,R,S,T, U,V,W,X
	.NARG	$$MNEM
	.ENDM	$$CMNM

; now squash this macro
	.MACRO	$$CMTAB_INIT
	.ENDM	$$CMTAB_INIT

	.ENDM	$$CMTAB_INIT


; Macro to start command table
	.MACRO	$CMTAB, NAME, CONTRL, PSECT

; initialise names, etc, if first time round
	$$CMTAB_INIT

.IIF NDF VAX,	VAX = 1			; default machine is VAX
	.IF NE	VAX
	.SAVE
					; for command name strings
	.PSECT	$$CMDS,NOPIC,USR,CON,REL,LCL,SHR,EXE,RD,NOWRT,NOVEC
	.IF B	PSECT
	.PSECT	$$CMTAB, CON,LONG	; command table PSECT
	.IFF
	.PSECT	PSECT, GBL,OVR,PIC,SHR,NOEXE,LONG ; command table PSECT
	.ENDC
NAME'_CMD_TABLE::
	.IFF
NAME'TAB::				; on PDP-11, in PSECT defined by the user
	.ENDC
	.WORD	$$'NAME'_CMCT ! ^X8000	; number of commands, with marker
$$$TBF = CMT$M_NOUFLG ! CMT$M_NUMFBD ! CMT$M_SUPMAC
	.IF NB	CONTRL
	.IRPC	Q, CONTRL
$$$PRF = $$$TBF
	.IIF IDN, Q,D,	$$$TBF = $$$TBF ! CMT$M_DIGOK
	.IIF IDN, Q,X,	$$$TBF = $$$TBF ! CMT$M_EXACT
	.IIF IDN, Q,U,	$$$TBF = $$$TBF ! CMT$M_UPCASE
	.IIF IDN, Q,R,	$$$TBF = $$$TBF ! CMT$M_NUMREA
	.IIF IDN, Q,N,	$$$TBF = $$$TBF & ^C<CMT$M_NUMFBD>
	.IIF IDN, Q,M,	$$$TBF = $$$TBF & ^C<CMT$M_SUPMAC>
	.IIF IDN, Q,F,	$$$TBF = $$$TBF & ^C<CMT$M_NOUFLG>
	.IIF IDN, Q,S,	$$$TBF = $$$TBF ! CMT$M_MNEMS
	.IF EQ	$$$PRF-$$$TBF
	.ERROR				; Q unexpected in command table control
	.ENDC
	.ENDR
	.ENDC
	.WORD	$$$TBF			; command table flags
$$TBLF = $$$TBF				; table-wide name for flags
					;  (used in checking local commands
	.SAVE
					; for 'global' command flags
	.PSECT	$$GCMF,NOPIC,USR,CON,REL,LCL,SHR,EXE,RD,NOWRT,NOVEC,WORD
NAME'_GLOB_FLAG::			; global command flags table
$$GCMF = .
	.IF EQ	$$$TBF & CMT$M_NOUFLG
					; for command 'user' flags
	.PSECT	$$UCMF,NOPIC,USR,CON,REL,LCL,SHR,EXE,RD,NOWRT,NOVEC,LONG
NAME'_USR_FLAG::			; command 'user' flags table
$$UCMF = .
	.ENDC
	.IF NE	$$$TBF & CMT$M_MNEMS
					; for secondary table pointers
	.PSECT	$$SCMN,NOPIC,USR,CON,REL,LCL,SHR,EXE,RD,NOWRT,NOVEC,LONG
NAME'_SEC_CMT::				; table of secondaries
$$SCMT = .
	.ENDC
	.RESTORE
	.ADDRESS	NAME'_GLOB_FLAG	; pointer to global flags
	.IF EQ	$$$TBF & CMT$M_NOUFLG
	.ADDRESS	NAME'_USR_FLAG	; pointer to local flags
	.ENDC
	.IF NE	$$$TBF & CMT$M_MNEMS
	.ADDRESS	NAME'_SEC_CMT	; pointer to secondaries
	.ENDC
$$CMNO = 0				; initial global command number
$$CMCT = 0				; count of commands
	.ENDM	$CMTAB

; Macro to define a command
	.MACRO	$CMD, MNEM, FLAGS, UFLAGS
	$$CMNM	MNEM
$$CMCT = $$CMCT+$$MNEM			; allow for all of these mnemonics
$$$CMF = 0				; flags for this command
$$$I   = 0				; integer arguments count
$$$R   = 0				; real arguments count
	.IF NB	FLAGS
	.IRPC	X, FLAGS
$$$PRF = $$$CMF
$$$PRR = $$$R
$$$PRI = $$$I
	.IIF IDN, X,I,	$$$I = $$$I+1
	.IIF IDN, X,R,	$$$R = $$$R+<1@CMD$V_REALS>
	.IIF IDN, X,C,	$$$CMF = $$$CMF ! CMD$M_CHAR
	.IIF IDN, X,S,	$$$CMF = $$$CMF ! CMD$M_STRING
	.IIF IDN, X,F,	$$$CMF = $$$CMF ! CMD$M_FULL
	.IIF IDN, X,+,	$$$CMF = $$$CMF ! CMD$M_LOG
	.IIF IDN, X,.,	$$$CMF = $$$CMF ! CMD$M_COMMA
	.IIF IDN, X,=,	$$$CMF = $$$CMF ! CMD$M_EQUAL
	.IIF IDN, X,Q,	$$$CMF = $$$CMF ! CMD$M_INEQUAL
	.IIF IDN, X,M,	$$$CMF = $$$CMF ! CMD$M_MNEM
	.IF EQ	$$$I-$$$PRI
	.IF EQ	$$$R-$$$PRR
	.IF EQ	$$$CMF-$$$PRF
	.ERROR				; X unexpected in command flags
	.ENDC
	.ENDC
	.ENDC
	.ENDR
	.IF GT	$$$I-CMD$M_INTS
	.ERROR				; too many integer arguments
	.ENDC
	.IF GT	$$$R-CMD$M_REALS
	.ERROR				; too many real arguments
	.ENDC
	.IF NE	$$$CMF & CMD$M_CHAR
	.IF NE	$$$CMF & CMD$M_STRING
	.ERROR				; STRING and CHAR args incompatible
	.ENDC
	.ENDC
$$$CMF	= $$$CMF + $$$I + $$$R
$$$CMN	= $$$CMF & CMD$M_MNEM
	.IF NE	$$$CMN
	.IF NE	$$$CMF & <^C<CMD$M_MNEM ! CMD$M_FULL>>
	.ERROR				; M flag must be on its own
	.ENDC
	.IF EQ	$$TBLF & CMT$M_MNEMS
	.ERROR				; M flag not permitted in this table
	.ENDC
	.ENDC
	.IFF
$$$CMN	= 0				; no 2ndary table if no flags
	.ENDC
	.SAVE
$$CMNO = $$CMNO+1
	.PSECT	$$GCMF
. = $$GCMF-2+<$$CMNO*2>
	.WORD	$$$CMF
	.IF NB	UFLAGS
	.IF NE	$$TBLF & CMT$M_NOUFLG
	.ERROR				; user flag not permitted in this table
	.ENDC
$$$UCF = 0
	.IRPC	X, UFLAGS
$$$PRF = $$$UCF
$$$FLT = ^A/'X/
	.IF GE	$$$FLT-^A/0/
	.IF LE	$$$FLT-^A/9/
$$$UCF = $$$UCF ! <1@<$$$FLT-^A/0/>>
	.ENDC
	.ENDC
	.IF GE	$$$FLT-^A/A/
	.IF LE	$$$FLT-^A/V/
$$$UCF = $$$UCF ! <1@<$$$FLT-^A/A/+10>>
	.ENDC
	.ENDC
	.IF EQ	$$$UCF-$$$PRF
	.ERROR				; X unexpected in user flags
	.ENDC
	.ENDR
	.PSECT	$$UCMF
. = $$UCMF-4+<$$CMNO*4>
	.LONG	$$$UCF
	.IFF
	.IF EQ	$$TBLF & CMT$M_NOUFLG
	.PSECT	$$UCMF
. = $$UCMF-4+<$$CMNO*4>
	.LONG	0			; flags:=0 if none given
	.ENDC
	.ENDC
	.RESTORE
	.IRP	MDUM, <MNEM>
	.IF NE	$$$CMN
	.SAVE
	.PSECT	$$SCMN
. = $$SCMT-4+<$$CMNO*4>
	.ADDRESS MDUM'_CMD_TABLE
	.RESTORE
$$$CMN	= 0
	.ENDC
	$$DESC	MDUM
	.ENDR
	.ENDM	$CMD

; macro to specify the end of a command table
	.MACRO	$CMEND, NAME
$$'NAME'_CMCT = $$CMCT
	.RESTORE
	.ENDM	$CMEND

	.PAGE
