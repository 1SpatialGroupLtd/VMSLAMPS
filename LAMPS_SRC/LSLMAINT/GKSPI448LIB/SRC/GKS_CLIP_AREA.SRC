	SUBROUTINE	GKS_CLIP_AREA(NPTS)
C
**	MODULE	GKS_CLIP_AREA
**	IDENT	25FE92
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Clarke Brunt	26-Jan-1991
C
C Clip fill area
C
	IMPLICIT NONE
C
***	COMMON/GFABUF/
C
C Arguments
	INTEGER	NPTS
C
C call the routine that does the work, passing the workspace arrays
C
	CALL GKS_CLIP_AREA_SUB(NPTS,GFAMAX,GFASCT,
     &	                       %VAL(PTS_ADDR),
     &	                       %VAL(PTX_ADDR),
     &	                       %VAL(PTY_ADDR),
     &	                       %VAL(PPTR_ADDR),
     &	                       %VAL(POLPTR_ADDR),
     &	                       %VAL(NEWPOL_ADDR),
     &	                       %VAL(INTPT_ADDR))
	RETURN
	END
C
C ****************************************************************************
C
	SUBROUTINE     	GKS_CLIP_AREA_SUB(NPTS,GFAMAX,GFASCT,
     &	                                  PTS,PTX,PTY,PPTR,
     &	                                  POLPTR,NEWPOL,INTPT)
C
**	MODULE	GKS_CLIP_AREA_SUB
**	IDENT	25FE92
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C Created				Clarke Brunt	26-Jan-1991
C
C Clip fill area
C
	IMPLICIT NONE
C
***	COMMON/GKSDAT1/
***	COMMON/GFADAT1/
***	COMMON/GKSESL/
C
C Points are in PTS(1/2,NPTS), CLIPLO/CLIPHI are limits
C Max size of PTS is GFAMAX
C
C Arguments
	INTEGER	NPTS
	INTEGER	GFAMAX		! maximum number of points in an area
	INTEGER	GFASCT		! maximum number of intersections
	REAL	PTS(2,GFAMAX)	! buffer array
	INTEGER	PTX(GFAMAX)	! X array
	INTEGER	PTY(GFAMAX)	! Y array
	INTEGER	PPTR(2,GFAMAX)	! pointers
	INTEGER	POLPTR(GFASCT)
	INTEGER	NEWPOL(GFASCT)
	INTEGER	INTPT(GFASCT)
C
C Functions used
	INTEGER	GKS_CLIP_POLY
C
C Internal variables
	INTEGER	I,J,K,FIRST
	INTEGER	NPOLY
C
C Point each point to its next and previous, and loop back to start
	DO 10 I=1,NPTS
	   PPTR(1,I) = I+1
	   PPTR(2,I) = I-1
10	CONTINUE
	PPTR(1,NPTS) = 1
	PPTR(2,1) = NPTS
C
C This describes one polygon
	NPOLY = 1
	POLPTR(1) = 1
C
C Clip to 4 limits
	IF (GKS_CLIP_POLY(CLIPLO(1),1,1,
     &	 NPOLY,GFASCT,POLPTR,NEWPOL,NPTS,GFAMAX,PTS,PPTR,GFASCT,INTPT
     &		).EQ.0) GOTO 999
	IF (GKS_CLIP_POLY(CLIPLO(2),2,1,
     &	 NPOLY,GFASCT,POLPTR,NEWPOL,NPTS,GFAMAX,PTS,PPTR,GFASCT,INTPT
     &		).EQ.0) GOTO 999
	IF (GKS_CLIP_POLY(CLIPHI(1),1,-1,
     &	 NPOLY,GFASCT,POLPTR,NEWPOL,NPTS,GFAMAX,PTS,PPTR,GFASCT,INTPT
     &		).EQ.0) GOTO 999
	IF (GKS_CLIP_POLY(CLIPHI(2),2,-1,
     &	 NPOLY,GFASCT,POLPTR,NEWPOL,NPTS,GFAMAX,PTS,PPTR,GFASCT,INTPT
     &		).EQ.0) GOTO 999
C
C draw polygons
	DO 200 I=1,NPOLY
	   FIRST = POLPTR(I)
	   J = FIRST
	   K = 0
C
C transform World Coordinates to Workstation Device Coordinates
100	   K = K+1
	   PTX(K) = ((PTS(1,J)*SCALEX)+OFFX)*FAC
	   PTY(K) = ((PTS(2,J)*SCALEY)+OFFY)*FAC
	   J = PPTR(1,J)
	   IF (J.NE.FIRST) GOTO 100
C
C fill the area
	   CALL CDPG(K,PTX,PTY)
200	CONTINUE
C
999	RETURN
	END
