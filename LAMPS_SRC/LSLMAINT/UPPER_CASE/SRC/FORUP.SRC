**	IF FORUP
	PROGRAM FORUP
C
***	MODULE FORUP
**	IFF
	PROGRAM MARUP
C
***	MODULE MARUP
**	ENDC
***	IDENT 03JN85
C
	IMPLICIT NONE
C
C Copyright Laser-Scan Ltd, Cambridge, England.
C Modified by R. Fairbairns from MARUP,
C Author Paul Hardy
C Created 18-Jun-1980
C Last edited 18/6/80
C
C Program to process a FOR source file to upperise code
C
C the size of the line buffer
	PARAMETER	MAXLEN=150	! gigantic!
C
C units to work on
	PARAMETER	IN_LUN = 1
	PARAMETER	OUT_LUN = 2
C
C FOR/MARUP variables
	CHARACTER*40	FILENAME	! what it says
	INTEGER*4	I,J		! loop variables
	INTEGER*4	IERR		! error return from VIOLIB
	INTEGER*4	LENGTH		! length of line inspected
	INTEGER*4	LINE_NO		! guess!
C
	INTEGER*2	ERROR		! return from FLR/WOPN
	INTEGER*2	NCHS		! no. of characters just read
C
	BYTE		CH		! a character from current line
	LOGICAL*1	DONE		! this line already processed
	LOGICAL*1	TERMIN		! input from terminal
**	IF FORUP
	LOGICAL*1	HADXCL		! had exclamation mark this line
	LOGICAL*1	INSTRING	! between 's
	LOGICAL*1	COMMENT		! this line is a comment
**	IFF
	LOGICAL*1	HADSC		! had a semicolon
**	ENDC
C
C control of CLI read functions
	LOGICAL*1	ERR		! error return
	INTEGER*2	IRC		! return code
C
C functions called
	INTEGER*2	FLROPN		! open VIOLIB file for read
	INTEGER*2	FLRSTR		! read from VIOLIB file
	INTEGER*2	FLWOPN		! open VIOLIB file for write
	INTEGER*2	GETCLI		! 'get' from CLI command line
	LOGICAL		RDFILT		! read title from /TXTC/
C
C VIOLIB interface common block
***	COMMON/LSL$CMNVIO:TXTC/
C
C extend it to allow for our longer-than-normal lines
	BYTE		TXTBUF_EXTN(MAXLEN) ! much more than needed
	COMMON  /TXTC/	TXTBUF_EXTN
C
C preset /TXTC/
	TXTPTR = 72			! initialise TXTDSC - size
	TXTADD = %LOC(TXTBUF(1))	! 		    - location
	TXTLIM = MAXLEN+72
C
C is there anything on our command line
	NCHS = GETCLI(TXTDSC)		! read any CLI stuff
	IF (NCHS.GT.0) THEN		! read file title from CLI
	   CALL BSLN			! init reading from TXTBUF
**	IF FORUP
	   ERR = RDFILT(FILENAME, 40, '.SRC',
     &			.FALSE.,.FALSE.,.FALSE.,IRC)
**	IFF
	   ERR = RDFILT(FILENAME, 40, '.MAR',
     &			.FALSE.,.FALSE.,.FALSE.,IRC)
**	ENDC
	   IF (ERR) THEN		! file title read failed
	      CALL FLTERR(IRC)		! output standard error message
	      CALL EXIT			! and - pouf!
	   ENDIF
C
C open input and output files
	  ERROR = FLROPN(IN_LUN, FILENAME, IERR)
	  IF (ERROR.LT.0) THEN
	    CALL WRITEF('Error %^L%X opening source file',
     &			        IERR)
	    CALL EXIT(IERR)
	  ENDIF
	  ERROR = FLWOPN(OUT_LUN, FILENAME, IERR)
	  IF (ERROR.LT.0) THEN
	    CALL WRITEF('Error %^L%X opening destination file',
     &			        IERR)
	    CALL EXIT(IERR)
	  ENDIF
	  CALL FLRSEL(IN_LUN)
	  CALL FLWSEL(OUT_LUN)
C
	ELSE				! read file title from terminal
C
	  CALL TTWSTR('Umph!')		! good, solid, error message
	  CALL EXIT
C
	ENDIF
C
C Now loop reading lines from source
C
	LINE_NO = 0
10	LINE_NO = LINE_NO+1		! count the line
	NCHS = FLRSTR(, IERR)		! get a line
	IF (NCHS.LT.0) THEN		! some sort of failure
	  CALL FLRCLO(IN_LUN)
	  CALL FLWCLO(OUT_LUN)
	  IF (NCHS.NE.-10) THEN		! not end of file
	    CALL WRITEF('Read file failure %^L%X in line %N',
     &					    IERR,   LINE_NO )
	    CALL EXIT(IERR)
	  ELSE
	    CALL EXIT
	  ENDIF
	ENDIF
C
C initial line scan
	DONE=.FALSE.
**	IF FORUP
	HADXCL=.FALSE.
	COMMENT = .FALSE.
	INSTRING = .FALSE.
**	IFF
	HADSC = .FALSE.
**	ENDC
	LENGTH = 0
	DO I = 1,NCHS
	  CH = TXTBUF(I)
	  IF(CH.NE.' ') LENGTH=I
**	IF FORUP
	  IF (I.EQ.1 .AND.
     &	      (CH.EQ.'c'.OR.CH.EQ.'C'))
     &		    COMMENT = .TRUE.
	  IF (CH.EQ.'!'.AND..NOT.INSTRING)
     &		    HADXCL=.TRUE.		! entering comment
	  IF (CH.EQ.'''')
     &		    INSTRING = .NOT.INSTRING	! into or out of string
	  IF (.NOT.(HADXCL.OR.INSTRING.OR.COMMENT)) THEN
	    IF (CH.GE.'A'.AND.CH.LE.'Z') DONE=.TRUE. ! already done
	  ENDIF
**	IFF
	  IF (CH.EQ.';') HADSC = .TRUE.		! we're entering comment
	  IF (.NOT.HADSC) THEN
	    IF (CH.GE.'A'.AND.CH.LE.'Z')	! line already processed
     &			DONE = .TRUE.
	  ENDIF
**	ENDC
	ENDDO
	IF (DONE) GOTO 40		! line already done -
C					!  no further need to process
C process the line
**	IF FORUP
	J = LENGTH
	IF (COMMENT) J = 1
	INSTRING = .FALSE.
	DO I=1,J
**	IFF
	DO I = 1,LENGTH
**	ENDC
	  CH = TXTBUF(I)
**	IF FORUP
	  IF (CH.EQ.'''') INSTRING = .NOT.INSTRING
	  IF(CH.EQ.'!') GOTO 40
	  IF ((CH.GE.'a'.AND.CH.LE.'z') .AND..NOT.INSTRING)
     &	      TXTBUF(I) = CH-32			! force upper case
**	IFF
	  IF (CH.EQ.';') GOTO 40
	  IF (CH.GE.'a' .AND. CH.LE.'z')
     &	      TXTBUF(I) = CH-32			! force upper case
**	ENDC
	ENDDO
C
C output the modified line
40	IF (LENGTH.GT.0) THEN
	  TXTPTR = LENGTH
	  CALL FLWSTR(TXTDSC)
	ELSE
	  CALL FLWRTF				! true blank line
	ENDIF
	GOTO 10
C
	END
