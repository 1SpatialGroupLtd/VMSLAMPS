	.TITLE	TKBS
	.IDENT	/26MR91/
 
 
; Copyright Laser-Scan Laboratories Ltd., Cambridge, England
; Author Susan Manning, from originals by R. Fairbairns,
;		from originals by P.A.Woodsford, P.Cross, et al.
 
; date as .IDENT
 
; B a s i c   T e k t r o n i x   4 0 1 x
;         g r a p h i c    l i b r a r y     s u p p o r t
 
; Conditional assembly by variable C4014; non-0 if supporting 4014 with
;   enhanced graphics, or a 4016
 
	CODE_PSECT	TKW
 
; P r i m i t i v e    l i n e - d r a w i n g   e n t r i e s
 
; i n c r e m e n t a l
 
 
; move by
 
 .ENTRY		MOVBY,^M<R2,R4,R5,R6,R7,R8,R9,R10,R11>
	MOVF	@4(AP),R7
	MOVF	@8(AP),R9
	BSBB	$MOVBY
	RET
 
; line by
 
 .ENTRY		LINBY,^M<R2,R4,R5,R6,R7,R8,R9,R10,R11>
	MOVF	@4(AP),R7
	MOVF	@8(AP),R9
$LINBY:: MOVW	#1,R10
	BSBB	LBGEN
	RET
 
 
; a b s o l u t e
 
; move to
 
 .ENTRY		MOVTO,^M<R2,R4,R5,R6,R7,R8,R9,R10,R11>
	MOVF	@4(AP),R7
	MOVF	@8(AP),R9
	BSBB	$MOVTO
	RET
 
; line to
 
 .ENTRY		LINTO,^M<R2,R4,R5,R6,R7,R8,R9,R10,R11>
	MOVF	@4(AP),R7
	MOVF	@8(AP),R9
$LINTO:: MOVW	#1,R10
	BSBB	LTGEN
	RET
 
$MOVB0:: CLRF	R7
	CLRF	R9
$MOVBY:: CLRW	R10
	BRB	LBGEN
 
 
$MOVTO:: CLRW	R10
	BRB	LTGEN
 
 
; form endpoint in user space
LBGEN:	ADDF2	TKRUX,R7
	ADDF2	TKRUY,R9
 
; establish at line-drawing position, and then divert for thick, etc.,
;  if required
 
LTGEN:	TSTW	TKLNCH		; have we been drawing chars?
	BEQL 	10$
	PUSHL	R7		; preserve where we
	PUSHL	R9		;   were going to
	MOVL	R10,-(SP)	;   and how
	CLRW	TKLNCH		; clear recursive loop
	BISL2	#FLAG_M_TRANSPAR,FLAGW	; force o/p of all bytes for the
	BSBW	$MOVB0		; move back to last line-drawing position
	MOVL	(SP)+,R10	; recover
	MOVF	(SP)+,R9
	MOVF	(SP)+,R7

10$:	MOVF	R7,TKRUX
	MOVF	R9,TKRUY
	BSBB	TKTRMT		; transform
	ADDF2	OFSETX,R6	; add offset
	ADDF2	OFSETY,R8
	JMP	$TKMOV
 
 
; TKTRMT performs linear transformation of [R7,R9] by matrix TKTR.
; Result in [R6,R8]
 
TKTRMT:: MOVAW	TKTR,R1		; standard matrix entry
	MULF3	(R1)+,R7,R8	; (1,1) * X
	MULF3	(R1)+,R9,R6	; (1,2) * Y
	ADDF2	R8,R6		; X result
	MULF3	(R1)+,R7,R8	; (2,1) * X
	MULF2	(R1),R9		; (2,2) * Y
	ADDF2	R9,R8		; Y result
	RSB
 
 
; return beam to origin and wait until all drawing done
 
 .ENTRY		LDCMPL,^M<R2,R4,R5,R6,R7,R8,R9,R10,R11>
	JSB	$MOVT0		; go to origin
	BRB 	$LDWAIT
 
; wait until outstanding moves completed
 
 
 .ENTRY		LDWAIT,^M<R2,R4,R5,R6,R7,R8,R9,R10,R11>
$LDWAIT: JSB	$FLUSH		; flush out buffer
	RET
 
; string of characters passed by descriptor
; also character size routine
; both dummy in this version

CHSIZE::
.ENTRY	CHARS,^M<>
	RET

	.PSECT
	.END
