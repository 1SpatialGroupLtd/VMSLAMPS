;
; * This file is part of the LAMPS distribution, released as a software
; * preservation project to archive digital history for future historians.
; * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
; *
; * Timestamp of this file for the 2002 release was: 1988-10-25 17:31:18.000000000 +0000
; *
; * This program is free software: you can redistribute it and/or modify
; * it under the terms of the GNU General Public License as published by
; * the Free Software Foundation, version 3.
; *
; * This program is distributed in the hope that it will be useful, but
; * WITHOUT ANY WARRANTY; without even the implied warranty of
; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
; * General Public License for more details.
; *
; * You should have received a copy of the GNU General Public License
; * along with this program. If not, see http://www.gnu.org/licenses/.
;
	.IF DF	LCDISP
	.IF NE	LCD16
	.TITLE	LCOD16
	.IFF
	.IF NE	LCD14
	.TITLE	LCOD14
	.IFF
	.TITLE	LCOD
	.ENDC
	.ENDC
	.IFF
	.TITLE	TKOD
	.ENDC
	.IDENT	/25OC88/
 
 
; Copyright Laser-Scan Laboratories Ltd., Cambridge, England
 
; Author Susan Manning from originals by R. Fairbairns
;		from originals by P.A.Woodsford, P.Cross, et al.
 
; Date as .IDENT
 
; T e k t r o n i x   4 0 1 x   g r a p h i c   l i b r a r y   o d d m e n t s
 
; Conditional assembly by variable C4014; non-0 if supporting 4014 with
;   enhanced graphics, or a 4016
 
	CODE_PSECT	TKW
 
; User access to variables
 
; LDFPPM as HRD manual
 
; meaningless values returned zero
 
; extra entry:
;   ISW=4: R7:=?,  R8,R9:=screen extent
 
 .ENTRY		LDFPPM,^M<R6,R7,R9>
	CASE	@4(AP),<1$,2$,3$>,LIMIT=#1,TYPE=W
 
; not 1, 2, or 3 - treat as 4
	CLRF	R6
	MOVF	#TKEXTX,R7
	MOVF	#TKEXTY,R9
	BRB	6$
 
; 1 - intensity, UX, UY
1$:	MOVAB	TKRUX,R10
4$:	CLRF	R6	; meaningless first result
	BRB	5$
 
; 2 - scale, OX,OY
2$:	MOVF	TKSCF,R6
	MOVAB	TKRUOX,R10
5$:	MOVF	(R10)+,R7
	MOVF	(R10),R9
	BRB	6$
 
; 3 - CH, CX, CY - totally meaningless!
3$:	CLRF	R6
	CLRF	R7
	CLRF	R9
6$:	MOVF	R6,@8(AP)	; return results
	MOVF	R7,@12(AP)
	MOVF	R9,@16(AP)
	RET
 

; Origin change
; currently supports only '-1' version of LDLIB 'ORIGIN'
 
 .ENTRY		ORIGIN,^M<R2,R4,R5,R6,R7,R8,R9,R10,R11>
	MOVF	@4(AP),R7
	MOVF	@8(AP),R9
	BSBB	O$RIG
	RET
 
 
O$RIG:	MOVAB	TKRDOX,R10
	MOVF	R7,(R10)+	; preserve display values
	MOVF	R9,(R10)+
	MOVF	TKSCF,R6	; current scale
	DIVF2	R6,R7
	MOVF	R7,(R10)+	; user values (TKRUOX/Y)
	DIVF2	R6,R9
	MOVF	R9,(R10)+
	JSB	TKTRMT		; transform R7,R9 to Tek counts
	MOVF	R6,(R10)+	; (TKRTOX/Y)
	MOVF	R8,(R10)
$SETOR:	ADDF3	TKRTOX,TKCENX,OFSETX	; set offsets
	ADDF3	TKRTOY,TKCENY,OFSETY
 
; move to new origin
$MOVT0:: CLRF	R7
	CLRF	R9
	JSB	$MOVTO
	RSB
 
 
; Units change
 
 .ENTRY		UNITS,^M<R2,R4,R5,R6,R7,R8,R9,R10,R11>
	MOVF	@4(AP),R6
	BSBB	U$NIT
	RET
 
 
U$NIT:	MOVF	R6,TKSCF	; preserve new scale
	MOVAB	BASETR,R10	; basic transformation screen cm.->counts
	MOVAB	TKTR,R1
	MOVL	#4,R2
1$:	MOVF	(R10)+,R7	; derive TKTR = BASETR * TKSCF
	MULF3	R6,R7,(R1)+
	SOBGTR	R2,1$
 
; adjust user origin to new units
	MOVAB	TKRDOX,R10
	DIVF3	R6,(R10)+,R7
	DIVF3	R6,(R10)+,R9
	MOVF	R7,(R10)+	; (TKRUOX/Y)
	MOVF	R9,(R10)
	BRB	$MOVT0		; move to the origin
 
 
; TKOFF(X,Y)	offset the centre of the Tektronix screen by (X,Y) Tek counts
;		(-10. <= X,Y <= +10.)
 
.ENTRY		TKOFF,^M<R7,R9>
	MOVF	@4(AP),R7
	MOVF	@8(AP),R9
	BSBB	TK$OFF
	RET
 
TK$OFF:	CMPF	R7,#MINOFF		; force X in range
	BGTR	10$
	MOVF	#MINOFF,R7
10$:	CMPF	R7,#MAXOFF
	BLSS	20$
	MOVF	#MAXOFF,R7
20$:	CMPF	R9,#MINOFF		; force Y in range
	BGTR	30$
	MOVF	#MINOFF,R9
30$:	CMPF	R9,#MAXOFF
	BLSS	40$
	MOVF	#MAXOFF,R9
40$:	MULF2	#16.0,R7		; scale up from 12 to 16 bit
	MULF2	#16.0,R9
	ADDF3	R7,#BASOFX,TKCENX	; add in base offsets
	ADDF3	R9,#BASOFY,TKCENY
	BRW	$SETOR			; set new origin
 
 
; TKSTYL - set Tek line style
 
; CALL TKSTYL(S)  (integer S)
 
; S = 0 => full line
;    = 1 => dotted
;    = 2 => dot dash
;    = 3 => short dash
;    = 4 => long dash
;    (>4, <0 => ignore call)
 
 .ENTRY		TKSTYL, ^M<R2,R5,R10,R11>
	MOVW	@4(AP),R1
	BLSS	STRTS		; -ve arg  - ignore
	CMPW	R1,#T.MXST
	BGTR	STRTS		; also if out of range
	CMPW	R1,TKCSTY	; same as what we have already?
	BEQL	STRTS		; yes - ignore
	MOVW	R1,TKCSTY	; set up new current style
	JSB	$CHKBF
	.BYTE	2
	JSB	$TKLCE		; set LCE
	BISB3	TKCSTY, #TG.STY, R10 ; add this style to style contrl bits
	JSB	$TKWCH		; and go to appropriate style
STRTS:	RET
 
 
 
; TKINIT  - initialise display
 
; CALL TKINIT(SW [,LUN] [,EFN])
 
; SW coded bitwise:
; d0 =0 => complete drawing, disable, detach display
;    =1 => attach, enable display, decode other bits (such as they are)
; d1 =1 => clear screen
; d2 =1 => set default scale, origin
; d9 =1 => inhibit use of interactive mode, no mailbox etc
 
; LUN and EFN are no longer used
 
LDINIT::
 .ENTRY		TKINIT,^M<R2,R4,R5,R6,R7,R8,R9,R10,R11>
	MOVW	@4(AP),R10	; SW argument
	BLBS	R10,10$	
	BRW	OFF		; if d0=0 - switch off
10$:	MOVW	R10,-(SP)	; preserve arg for later
	TSTB	TKENBL		; already on?
	BEQL	15$		;  if EQL, no
	BRW	ONOK		; already enabled
15$:	BICL2	#FLAG_M_32BIT,FLAGW	; assume using 12 bit coordinate mode
	CMPL	@12(AP),#32		; using 32 bit?
	BNEQ	16$			; no
	BISL2	#FLAG_M_32BIT,FLAGW	; yes
16$:	BICL2	#FLAG_M_WESTWARD,FLAGW	; assume using TEK
	CLRL	WESTWARD		; and for Fortran
	CMPL	@12(AP),#1000		; using Westward?
	BNEQ	20$			; no
	BISL2	#FLAG_M_WESTWARD,FLAGW	; yes
	DECL	WESTWARD
20$:	PUSHAL	TKNEFN
	CALLS	#1,G^LIB$GET_EF	; get output event flag
	BLBCW	R0,ERRSIG
	MOVL	TKNEFN,QO.EFN	; put in QO.DPB
	PUSHAL	TKHTEF
	CALLS	#1,G^LIB$GET_EF	; get hardcopy timer event flag
	BLBCW	R0,ERRSIG
	MOVL	TKHTEF,TK.EFN	; put in DPB
 
; translate logical name for device
	$TRNLOG_S	LOGNAM=TKDESC,-	; logical name for device
			RSLLEN=EQVLEN,-	; length
			RSLBUF=EQVDSC	; destination
	CMPL	R0,#SS$_NORMAL
	BNEQW	ERRSIG

; assign channel to device, N.B. no mailbox
	$ASSIGN_S	DEVNAM=EQVDSC,-
			CHAN=QO.CHAN
	BLBCW	R0,ERRSIG
	$ASSIGN_S	DEVNAM=EQVDSC,-
			CHAN=QI.CHAN
	BLBCW	R0,ERRSIG
	DECB	TKENBL			; Tek now thought to be enabled

; set up device dependent parameters in common block

; x and y transformation scales -> BASETR matrix
	MOVAB	BASETR,R0		; point to base transform matrix
	MOVF	#TRANX,(R0)+
	CLRF	(R0)+			; zero off diagonal elements
	CLRF	(R0)+
	MOVF	#TRANY,(R0)+
; and screen limits -> common
	MOVF	#LIMIT1,(R0)+		; MINX
	MOVF	#LIMIT2,(R0)+		; MAXX
	MOVF	#LIMIT3,(R0)+		; MINY
	MOVF	#LIMIT4,(R0)+		; MAXY
; and factor for scaling to 16 bit (for CSRD)
	MOVF	#FACTOR,(R0)		; TKFACT


; Tek was already on

ONOK:	BBS	#FLAG_V_WESTWARD,FLAGW,5$

; TEK
	JSB	$TKW2C
	.BYTE	AS.ESC,^A/%/
	JSB	$TKW2C
	.BYTE	^A/!/,^A/0/
 
; transmit SET COORDINATE MODE to 12 or 32 bit, and no change to integer
; report size (0)
	MOVB	#AS.ESC,R10
	JSB	$TKWCH
	JSB	$TKW2C
	.BYTE	^A/U/,^A/X/
	EXTZV	#FLAG_V_32BIT,#1,FLAGW,R10
	BISB2	#^A/0/,R10
	JSB	$TKWCH
	MOVB	#^A/0/,R10
	JSB	$TKWCH
	BRB	9$

; Westward
5$:	JSB	$TKW2C
	.BYTE	AS.ESC,^A/1/
 
; transmit SET OPERATING MODE to W2D
	MOVB	#AS.ESC,R10
	JSB	$TKWCH
	JSB	$TKW2C
	.BYTE	^A/T/,^A/M/
	MOVB	#^A/2/,R10
	JSB	$TKWCH

; look at other bits
9$:	BBC	#1,(SP),10$
	CALLS	#0,TKCLR	; clear screen
10$:	BBC	#2,(SP)+,17$
	MOVF	#1.0,R6		; default scale
	BSBW	U$NIT		; set scale
	CLRF	R7		; default origin
	CLRF	R9
	BSBW	O$RIG		; set origin
	CLRF	R7
	CLRF	R9
	BSBW	TK$OFF		; use actual screen centres as default

; set default character size and spacing for LCD
.IF DF LCDISP
	MOVF	#^F1.0,R6	; default carriage spacing
	MOVF	R6,R7		; horizontal and equivalent to char height
	CLRW	R9		; of 1cm
	JSB	$CHSIZ
	CLRW	R6		; default to font 0
	CLRW	R7		; non-italicised
	JSB	$CHFNT
.ENDC

17$:	RET
 
; error exit
ERRSIG:	PUSHL	R0
	CALLS	#1,G^LIB$SIGNAL
	RET

; to switch Tek off
 
OFF:	TSTB	TKENBL		; already off?
	BEQL	OFFOK		; yes
 
; get last out
	JSB	$FLUSH
	JSB	$WBUFF		; wait for it !
	CLRB	TKENBL		; display off
	$DASSGN_S	CHAN=QO.CHAN	; de-assign channel
	$DASSGN_S	CHAN=QI.CHAN	; and input channel
	
; free various event flags
	PUSHAL	TKNEFN
	CALLS	#1,G^LIB$FREE_EF
	PUSHAL	TKHTEF
	CALLS	#1,G^LIB$FREE_EF
 
OFFOK:	RET
 

; TKPING - use the Tek's bell
 
 .ENTRY	TKPING, ^M<R6,R10>
 
	MOVB	#AS.BEL,R10
	JSB	$TKWCH		; transmit
	JSB	$FLUSH		; force it out
	RET			; and we're done
 
 
; TKCLR - clear Tektronix screen
 
PCFRAM::
DIFRAM::
 .ENTRY		TKCLR,^M<R2,R5,R10,R11>
	JSB	$TKW2C		; transmit instruction
	.BYTE	AS.ESC,AS.FF
	JSB	$FLUSH		; ensure it's on it's way
	CLRB	TKGRAF		; Tek reset => alpha mode
	MOVL	TKCLWT,WAITIME	; clear screen settle time
	BRB	TKWAIT		; and set up the wait
 
 
; TKCOPY - make hard copy of screen
 
 .ENTRY		TKCOPY,^M<R2,R5,R10,R11>
	JSB	$TKW2C		; transmit instruction
	.BYTE	AS.ESC,AS.ETB
	JSB	$FLUSH		; ensure its out
	MOVL	TKHCWT,WAITIME	; hardcopy settle time
 
; and fall through into ...
 
; TKWAIT will set up mark time etc for wait
 
TKWAIT:	MNEGB	#1,TKWHDC	; mark waiting
	$SETIMR_G	TKHTDP	; set up mark time
	BLBS	R0,1$		; O.K.
	PUSHL	R0		; error
	CALLS	#1,G^LIB$SIGNAL
	CLRB	TKWHDC
1$:	RET
 
 
; AST for processing end of hard copy wait time
 
 .ENTRY		TKCAST,^M<>
 CLRB	TKWHDC		; not waiting
	RET
 
 
; set time of hard copy delay
 
 .ENTRY		TKCTIM,^M<>
	MOVZWL	@4(AP),R0		; stretch the time in seconds
	MULL3	R0,#WAITMUL,TKHCWT	; and convert to ticks
	RET
 
; local workspace
 
	DATA_PSECT	TKW
 
; define DPB for mark time
 
TKHTDP:	$SETIMR		DAYTIM=WAITIME,ASTADR=TKCAST,-
		EFN=0,REQIDT=0
 
TK.EFN = TKHTDP + SETIMR$_EFN
TK.DAYTIM = TKHTDP + SETIMR$_DAYTIM
 
WAITMUL =  -10*1000*1000
WAITIME: .LONG	WAITMUL * TKDCTI, -1
 
TKHCWT:	.LONG	WAITMUL * TKDCTI	; hardcopy time in ticks
TKCLWT:	.LONG	WAITMUL * TKCLTI	; clear screen time in ticks
 
	.PSECT
	.END
