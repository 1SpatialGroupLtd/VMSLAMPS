	LOGICAL FUNCTION GET_COMMAND
C
***	IDENT	26NO87
***	MODULE	GET_COMMAND
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RJH	27-Jul-1987
C
C	CONVERT OSPIF Utility - Get and decode command line
C
C Description
C
C
	IMPLICIT NONE
C
C Included Parameter Files
C
***	PARAMETER/CMN:OSPIFMSG/		! message definitions
C
C Common Blocks
C
***	COMMON/CMN:CONTROL/		! control variables
***	COMMON/LSL$CMNLSL:CLD/		! DCL command decoding
***	COMMON/LSL$CMNLSL:STATUS/	! LSLLIB status flag
C
C Functions called
C
        INTEGER*4       DCL_STARTUP	! looks for command line
	INTEGER*4	DCL_FILE	! reads & parses file title
	INTEGER*4	DCL_QUAL	! looks for specified qualifier
	INTEGER*4	DCL_INT		! read integers
C
C Local variables
C
	INTEGER*4	OK		! error return
	INTEGER*4	I		! counter
	LOGICAL*4	GOT_FC		! got /FC qualifier ?
	LOGICAL*4	GOT_FSN		! got /FSN qualifier ?
	LOGICAL*4	ABSENT		! set if file param. not found
	LOGICAL*4	LOCAL		! set if qual. is local
	LOGICAL*4	LOCNEG		! set if qual. locally negated
        LOGICAL*4	WHINGE		! set-local error reporting
C
C Command Language Definitions
C
	EXTERNAL	OSPIF_CLD
C
C Initialisation for command line decoding
C
	WHINGE = .TRUE.			! report errors locally
C
C Initialise control flags
C
	KEEP   = .FALSE.
	SPOOL  = .FALSE.
	TYPE   = .FALSE.
	FRT    = .FALSE.
	MINFSN = 0			! no limit on FSNs
	MAXFSN = 65535
	MINFC  = 0			! no limit on FCs
	MAXFC  = 32767
C
C Set default output filename for /KEEP and /PRINT
C
	OUT_FILE = DEF_OUT
	OUT_LEN = DEF_OUT_LEN
C
C Get command line. DCL_STARTUP will return SS$NORMAL if all well.
C
	OK=DCL_STARTUP('OSPIF'		! command verb
     &      ,.FALSE.			! don't split parameter lists
     &      ,OSPIF_CLD 			! module name
     &      ,WHINGE)			! set -local error reporting
        IF(.NOT.OK) GOTO 999
C
C Get IFF file-name 
C
	OK=DCL_FILE('IN_FILESPEC'	! parameter label
     &		,IN_TEM			! default file-name
     &		,ABSENT			! set if no file-name
     &		,.FALSE.		! don't expect list of files
     &          ,WHINGE)		! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C Transfer file-spec 
C
	IN_FILE = FILARY(1)(1:FIL_LEN(1))
	IN_LEN = FIL_LEN(1)
C
C /FC qualifier
C
	OK=DCL_QUAL('FC'		! qual. name
     &        		,GOT_FC		! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C Get the feature codes
C
	IF (GOT_FC) THEN
	   OK=DCL_INT('FC'		! qual. name
     &			,WHINGE)	! set-local error reporting
	   IF(.NOT.OK) GOTO 999
C
C and set the range
C
	   IF (NUMINT .GT. 0) THEN
	      IF ((IARRAY(1) .GE. 0) .AND. 
     &	          (IARRAY(1) .LE. IARRAY(NUMINT)) .AND. 
     &	          (IARRAY(NUMINT) .LE. TOP_FC)) THEN
	         MINFC = IARRAY(1)
	         MAXFC = IARRAY(NUMINT)
	      ELSE
	         CALL LSL_PUTMSG(OSPIF__ILEGFC,
     &	            IARRAY(1),IARRAY(NUMINT))
	         CALL LSL_ADDMSG(OSPIF__RANGE,TOP_FC)
	         OK = LSL_STATUS
	         GO TO 999
	      ENDIF
	   ENDIF
	ENDIF
C
C /FSN qualifier
C
	OK=DCL_QUAL('FSN'		! qual. name
     &        		,GOT_FSN	! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C Get the feature codes
C
	IF (GOT_FSN) THEN
	   OK=DCL_INT('FSN'		! qual. name
     &			,WHINGE)	! set-local error reporting
	   IF(.NOT.OK) GOTO 999
C
C and set the range
C
	   IF (NUMINT .GT. 0) THEN
	      IF ((IARRAY(1) .GE. 0) .AND. 
     &	          (IARRAY(1) .LE. IARRAY(NUMINT)) .AND. 
     &	          (IARRAY(NUMINT) .LE. TOP_FSN)) THEN
	         MINFSN = IARRAY(1)
	         MAXFSN = IARRAY(NUMINT)
	      ELSE
	         CALL LSL_PUTMSG(OSPIF__ILEGFSN,
     &	            IARRAY(1),IARRAY(NUMINT))
	         CALL LSL_ADDMSG(OSPIF__RANGE,TOP_FSN)
	         OK = LSL_STATUS
	         GO TO 999
	      ENDIF
	   ENDIF
	ENDIF
C
C /KEEP qualifier
C
	OK=DCL_QUAL('KEEP'		! qual. name
     &        		,KEEP		! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C If we have the qualifier, get the actual filename if given
C
	IF (KEEP) THEN
	   OK=DCL_FILE('KEEP'		! qualifier
     &		,OUT_FILE(1:OUT_LEN)	! default file-name
     &		,ABSENT			! set if no file-name
     &		,.FALSE.		! don't expect list of files
     &          ,WHINGE)		! set-local error reporting
	   IF(.NOT.OK) GOTO 999
C
C Set file-spec 
C
	   IF (.NOT. ABSENT) THEN
	      OUT_FILE = FILARY(1)(1:FIL_LEN(1))
	      OUT_LEN = FIL_LEN(1)
	   ENDIF
	ENDIF
C
C /PRINT qualifier
C
	OK=DCL_QUAL('PRINT'		! qual. name
     &        		,SPOOL		! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C /FRT qualifier
C
	OK=DCL_QUAL('FRT',FRT,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT. OK) GOTO 999
C
C If have get the file spec
C
	IF (FRT) THEN			! get the argument
	   OK = DCL_FILE ('FRT',	! qualifier
     &			'LSL$FRT:.FRT', ! default
     &			  ABSENT,	! if not there
     &			  .FALSE.,	! not a list
     &			  WHINGE)	! set local error reporting
	   IF (.NOT. OK) GOTO 999
C
C Transfer args. to variables
	   FRT_FILE = FILARY(1)(1:FIL_LEN(1))
	   FRT_LEN  = FIL_LEN(1)
	ENDIF
C
C /TYPE qualifier
C
	OK=DCL_QUAL('TYPE'		! qual. name
     &        		,TYPE		! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C Set the flag for just typing - it is present by default if the other 
C two are absent
C
	TYPE = TYPE .AND. .NOT. (KEEP .OR. SPOOL)
C
C If typing, set the output filename as SYS$OUTPUT
C
	IF (TYPE) THEN
	   OUT_FILE = 'SYS$OUTPUT'
	   OUT_LEN = 10
	ENDIF
C
C Assign function value
C
999	GET_COMMAND = OK
C
C Return
C
	RETURN
	END
