C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-08-05 10:44:18.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION CLOSE_OUT
C
***	IDENT	05AU87
***	MODULE	CLOSE_OUT
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RJH	05-Aug-1987
C
C	CONVERT OSPIF Utility - Close output file
C
C Description
C
C	Expects the output file to be open
C
	IMPLICIT NONE
C
C Included Parameter Files
C
***	PARAMETER/HERE:LUN/		! logical unit numbers
***	PARAMETER/CMN:OSPIFMSG/		! message definitions
***	PARAMETER/LSL$CMNLSL:LSLLIBMSG/	! LSLLIB message definitions
C
C Common Blocks
C
***	COMMON/HERE:CONTROL/		! control variables
***	COMMON/LSL$CMNLSL:STATUS/	! LSLLIB status flag
C
C Functions called
C
	INTEGER*4	FLWCLO		! close file opened for writing
	INTEGER*4	FLWSPL		! spool file opened for writing
C
C Local Variables
C
	INTEGER*4	ERRCOD		! LSLLIB error code
	INTEGER*4	RETCOD		! system error code
C
C Spool the file
C
	IF (SPOOL) THEN
	   ERRCOD = FLWSPL(OUT_LUN,RETCOD)
	   IF (.NOT. ERRCOD) THEN
	      CALL LSL_PUTMSG(OSPIF__ERRSPLOUT,OUT_FILE(:OUT_LEN))
	   ENDIF
C
C or close it
C
	ELSE
	   ERRCOD = FLWCLO(OUT_LUN,RETCOD)
	   IF (ERRCOD .AND. KEEP) THEN
	      CALL LSL_PUTMSG(OSPIF__CREOUT,OUT_FILE(:OUT_LEN))
	   ELSEIF (.NOT. ERRCOD) THEN
	      IF (TYPE) THEN
	         CALL LSL_PUTMSG(OSPIF__ERRCLOOUT,'terminal')
	      ELSE
	         CALL LSL_PUTMSG(OSPIF__ERRCLOOUT,OUT_FILE(:OUT_LEN))
	      ENDIF
	   ENDIF
	ENDIF
C
C and if unsuccessful do the continuation messages
C
	IF (.NOT. ERRCOD) THEN
	   CALL LSL_ADDMSG(ERRCOD)
	   IF (ERRCOD .EQ. LSL__SYSCLOSE) CALL LSL_ADDMSG(RETCOD)
	ENDIF
C
C Assign function value
C
	CLOSE_OUT = ERRCOD
C
C Return
C
	RETURN
	END
