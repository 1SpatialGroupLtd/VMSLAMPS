C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-12-15 11:38:16.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE PRTIFF(MINFSN,MAXFSN,MINFC,MAXFC)
C
***	MODULE	PRTIFF
***	IDENT	16DE92
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author  R. Fairbairns
C
C Coded 9.viii.79
C
C	See .UPD file for further updates	RJH	07-Aug-1987
CMOD	Maximum FSN increased to 65535		RJH	04-Feb-1986
CMOD	Amended for SH,JB,JP			PGH	13-Oct-1982
C
C To print an OS IFF file
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:OSPIFMSG/		! message definitions
	PARAMETER MAXAC=100
C
***	COMMON/CMN:OSCODE/
***	COMMON/LSL$CMNIFF:IFFHAN/
***	COMMON/LSL$CMNIFF:MHDMB/
***	COMMON/LSL$CMNIFF:CB.STR/	! CB structure
***	COMMON/LSL$CMNFRT:FRTACD.CMN/	! for ACD calls
C
C New include files to cope with new OS map header
C
	INCLUDE	'LSL$CMNIFF:MD2DES.CMN'		! map descriptor (type 2)
	INCLUDE 'LSL$CMNIFF:MHOSGB.CMN'		! New OS map header
	INCLUDE 'LSL$CMNOSMH:OSMH_NEW_MH.CMN'	! New map header variables
	INCLUDE 'LSL$CMNOSMH:OSMH_NEW.PAR'	! Header field definitions
C
C functions
C
	LOGICAL		OSMH_NEW_INI	! Open and read translation table
	LOGICAL		OSMH_NEW_GETFLD	! Extract field from new header
C
C CB structure
C
	RECORD		/IFF_CBH/ CBH	! header block
	RECORD		/IFF_CBD/ CBD	! data block
C
	INTEGER*4	MINFSN,MAXFSN	! range of FSNs to print
	INTEGER*2	MINFC, MAXFC	! ranges of FCs  to print
C
C w/s
	INTEGER*2	COD		! feature code
	INTEGER*2	C
	INTEGER*2	L
	INTEGER*2	TXTL
	INTEGER*2	TXS
	INTEGER*2	NPTS		! no. pts. in ST,ZS,CB
	INTEGER*2	I
	INTEGER*2	J
	INTEGER*2	K
	INTEGER*2	PROCOD		! process code/text in FS
	INTEGER*2	IANG
	INTEGER*2	NACENT
	INTEGER*2	ACTLEN
	INTEGER*2	TPOS
	INTEGER*2	TSTY
	INTEGER*2	TCAT
C
	INTEGER*4	ITYPE
	INTEGER*4	FSN		! feature serial number
	INTEGER*4	LSTFSN
	INTEGER*4	TOTPTS
	INTEGER*4	TOTFSN
	INTEGER*4	DIFFSN
	INTEGER*4	NCOMP
	INTEGER*4	LPOSAC(MAXAC)
	INTEGER*4	LPOSEF
	INTEGER*4	LCODE
	INTEGER*4	NXYCOL		! no.cols for XY in CB
	INTEGER*4	XYCOLH(2)	! col. headers for XY in CB
	INTEGER*4	MHTYPE		! map header type
C
	REAL		FX		! first point in feature
	REAL		FY		! with ST,ZS,CB etc
	REAL		LX		! last point
	REAL		LY		! in feature
	REAL		ANG
	REAL		LEN
	REAL		XYBUF(2)	! buffer to read XY from CB
C
	LOGICAL		ACDFND_NAME	! fn. for finding col hdrs
	LOGICAL		ACDFND		! for finding acd codes
	LOGICAL		OK		! for returned error flags
	LOGICAL*1	TXT(81)
	LOGICAL*1	HADRO		! .T. if had RO
	LOGICAL*1	HADTS		! .T. if had TS
	LOGICAL*1	GOTST		! to differentiate ZS from ST
	LOGICAL*1	LR(2)
	LOGICAL*1	ACTXT(80)
C
	CHARACTER	MAPREF*8
	CHARACTER	DATTIM*26
C
C stuff for controlling switching between MH and NS as first item
	LOGICAL*1	HADMH
	LOGICAL*1	HADNS
	LOGICAL*1	MHCCC
	LOGICAL*1	NSCCC
	LOGICAL*1	CCC2NL
C
C presets - IFF codes
C
C presets - MH/NS control
	DATA HADMH,HADNS/2*.FALSE./
	DATA MHCCC,NSCCC,CCC2NL/' ',' ','0'/
	DATA LR/'L','R'/
C
C global init
	LSTFSN = -1
	TOTFSN = 0
	DIFFSN = 0
	TOTPTS = 0
C
C Set up codes for reading CB
C
	IF (ACDFND_NAME('X')) GOTO 999	! look up X column header
	XYCOLH(1) = ACD_CODE		! store in header array
	IF (ACDFND_NAME('Y')) GOTO 999	! look up Y column header
	XYCOLH(2) = ACD_CODE		! store in header array
	NXYCOL = 2			! number of co-ord cols
C
C init one code
10	COD = -1
	NPTS = 0
	TXTL = 0
	NACENT = 0
	NCOMP = 0
C
C read next entry
20	CALL IFFNXT(C, L)
	IF (L.EQ.-1) GOTO 110
C
C decode
	IF (C.EQ.'CB') GOTO 85
	IF (C.EQ.'CC') GOTO 20
	IF (C.EQ.'CH') GOTO 20
	IF (C.EQ.'CP') GOTO 20
	IF (C.EQ.'EF') GOTO 30
	IF (C.EQ.'EJ') GOTO 20
	IF (C.EQ.'EM') GOTO 20
	IF (C.EQ.'EO') GOTO 20
	IF (C.EQ.'FS') GOTO 40
	IF (C.EQ.'HI') GOTO 20
	IF (C.EQ.'MD') GOTO 20
	IF (C.EQ.'MH') GOTO 41
	IF (C.EQ.'NF') GOTO 50
	IF (C.EQ.'NO') GOTO 60
	IF (C.EQ.'NS') GOTO 70
	IF (C.EQ.'RA') GOTO 20
	IF (C.EQ.'RO') GOTO 71
	IF (C.EQ.'SL') GOTO 20
	IF (C.EQ.'SS') GOTO 20
	IF (C.EQ.'ST') GOTO 80
	IF (C.EQ.'TC') GOTO 20
	IF (C.EQ.'TH') GOTO 90
	IF (C.EQ.'TS') GOTO 95
	IF (C.EQ.'TX') GOTO 100
	IF (C.EQ.'SH') GOTO 20
	IF (C.EQ.'ZS') GOTO 80
	IF (C.EQ.'JP') GOTO 20
	IF (C.EQ.'JB') GOTO 20
	IF (C.EQ.'VO') GOTO 20
	IF (C.EQ.'AC') GOTO 120
C
C eh?
	CALL LSL_PUTMSG(OSPIF__UNEXPENT,C)
	GOTO 20
C
C EF - end feature, and print it
30	IF (COD.LT.0) GOTO 10
C
C we have one - ensure there's a header
	CALL PRTCOD(COD)
C
C illegal code?
	IF (CURTYP.LT.0) THEN
	   CALL LSL_PUTMSG(OSPIF__UNKFC,FSN,COD)
	   IF (NCOMP .GT. 0) GOTO 36
	   GOTO 10
	ELSEIF (CURTYP.EQ.0) THEN
	   CALL LSL_PUTMSG(OSPIF__NOTINTAB,FSN,COD)
	   GOTO 10
	ENDIF
C
C add to statistics
	TOTFSN = TOTFSN+1
	IF (FSN.NE.LSTFSN) DIFFSN = DIFFSN+1
	TOTPTS = TOTPTS+NPTS
C
C prepare for count of 'different FSNs'
	LSTFSN = FSN
C
C switch on code type
	GOTO (31,32,33,33,33), CURTYP
	GOTO 10
C
C type 1 - linestring
31	CALL FLWRTF('%I5%^W%I7  %F9.2%F9.2   %F9.2%F9.2  %I5',
     &		     FSN,NPTS, FX,  FY,    LX,  LY,   PROCOD)
C deal with ancilliary codes (if any)
	IF (NACENT.LE.0) GOTO 10
	LPOSEF = LPOSH
	DO 317 I=1,NACENT
	   CALL IFFPKE(C,L,LPOSAC(I))
	   IF(L.LT.0.OR.C.NE.'AC') GOTO 319
	   CALL EIHRI(ITYPE,1,1)
	   CALL EIHRL(LCODE,1,2)
	   IF (L.GT.3) CALL EIHR(ACTXT,L-3,4)
	   ACTLEN = (L-3)*2
	   ACTXT(ACTLEN+1) = 0
C
C Find out what the AC represents
C
	   CALL ACDFND(ITYPE,.FALSE.)
C
C Display information about ACs
C
	   CALL EXPAND ('AC found : %S = ', ACD_NAME(:ACD_NAME_LEN))
	   CALL APPEND (ACD_FORMAT(:ACD_FORMAT_LEN), LCODE)
	   IF (ACTLEN.GT.0) CALL APPEND('  "%A80"', ACTXT)
	   CALL FLWLIN
317	   CONTINUE
318	CALL IFFPKE(C,L,LPOSEF)
	GOTO 10
319	CALL LSL_PUTMSG(OSPIF__ERRPOSAC,C,L,LPOSAC(NACENT))
	GOTO 318
C
C type 2 - 1-point symbol
32	CALL FLWRTF('%I5         %F9.2%F9.2',FSN,FX,FY)
	GOTO 10
C
C types 3-5 - get angle before final split
33	IF (HADRO) GOTO 332
	LX = LX-FX
	LY = LY-FY
	IF(LX.NE.0.0.OR.LY.NE.0.0) GOTO 331
	CALL LSL_PUTMSG(OSPIF__NULLVEC,FSN)
	ANG = 0.0
	GOTO 332
331	ANG = ATAN2(LY, LX)*57.29577951
332	IANG=ANG*180./3.14159
333	IF(IANG.LT.0) IANG = IANG + 360
	IF(IANG.GE.360) IANG = IANG - 360
	IF(IANG.LT.0.OR.IANG.GE.360) GOTO 333
	IF (CURTYP.EQ.4) GOTO 34
	IF (CURTYP.EQ.5) GOTO 35
C
C type 3 - 2-point symbol
	CALL FLWRTF('%I5         %F9.2%F9.2%^W%I6',FSN,FX,FY,IANG)
	GOTO 10
C
C type 4 - scaled symbol
34	LEN = SQRT(LX**2+LY**2)
	IF (LEN.EQ.0.0) CALL LSL_PUTMSG(OSPIF__ZEROSIZE,FSN)
	CALL FLWRTF('%I5%F7.2  %F9.2%F9.2%^W%I6',FSN,LEN,FX,FY,IANG)
	GOTO 10
C
C type 5 - text
35	CALL FLWRTF('%I5%^W%I7  %F9.2%F9.2%I6%I3%I2%I3  %A80',
     &		     FSN,TXS, FX,  FY, IANG,TPOS,TSTY,TCAT,TXT)
36	IF (NCOMP .GT. 0) THEN
	   CALL FLWRTF('Composite text with %N components',NCOMP)
	ENDIF
	GOTO 10
C
C FS - get code
40	CALL EIHRI(COD, 1, 1)				! feature code
	CALL EIHRI(PROCOD, 1, 3)			! process code
	TPOS = PROCOD.AND."17
	TSTY = (PROCOD.AND."60)/16
	TCAT = (PROCOD.AND."7700)/64
C
C is it within the range we want?
	IF (COD.GE.MINFC .AND. COD.LE.MAXFC) GOTO 20	! use feature
C
C no - skip to end of feature, and ignore it
	CALL IFFNXC('EF',L)
	GOTO 10
C
C MH - read header info
C
C Determine header tpye
C
41	CALL EIHRI(MHDESC,2,1)		! read into MHDESC, 2 words from word 1
	MHTYPE = MHDESC(2)
C
	IF (MHTYPE.LE.2) THEN
	   CALL EIHRI(MHARR,MIN0(MHLEN,L),1)
C
C All the variables in MHDMB are now equivalenced onto MHARR
C
	ELSEIF (MHTYPE.EQ.3 .OR. MHTYPE.EQ.4) THEN
	   CALL EIHRI(MH2ARR,MIN0(MH2LEN,L),1)
C
C With a type 3 header, the fields must be extracted using the translation
C table pointed to by LSL$OS_MH_TABLE
C
	   IF ( .NOT.OSMH_NEW_INI() ) GOTO 999
C
	   IF (MHTYPE.EQ.3) THEN
	      IF ( .NOT.OSMH_NEW_GETFLD( MH_CAP_SCALE ) ) GOTO 999
	      MHDCSC = MH_I_VALUE
C
	      IF ( .NOT.OSMH_NEW_GETFLD( MH_BGI ) ) GOTO 999
	      MHBGI = MH_I_VALUE
C
	      IF ( .NOT.OSMH_NEW_GETFLD( MH_JOB_NUMBER ) ) GOTO 999
	      PCJOBN = MH_I_VALUE
	   ENDIF
C
C Get MHMCRE, MHMRCN, MHSTSC from MD. Have to lookahead at next entry
C
	   CALL IFFNXC('MD',L)
	   CALL EIHRI(MD2ARR,MIN0(MD2LEN,L),1)	
	   MHMRCE = NINT( MD2LOC(1) )
	   PCMRCE = NINT( MD2LOC(1) )
	   MHMRCN = NINT( MD2LOC(2) )
	   PCMRCN = NINT( MD2LOC(2) )
	   MHSTSC = NINT( MD2SCL )
	   PCSCSC = MHSTSC            ! PCSCSC used in OSNAME for sheet ref
C
	ENDIF
C
	HADMH = .TRUE.
	CALL LIB$DATE_TIME(DATTIM)
	CALL OSNAME(MAPREF)
C
C calculate required carriage control
	IF (HADNS) CALL FLWRTF		! output blank line
	IF (MHTYPE.EQ.3) THEN
	   CALL FLWRTF('Job%I6 Map Ref %S on %S',PCJOBN,MAPREF,DATTIM)
	   CALL FLWRTF('Reference corner %I7,%I7',MHMRCE,MHMRCN)
	   IF (MHMLE.NE.0.0.OR.MHMLN.NE.0.0) CALL FLWRTF(
     &		                 'Limit corner %I12%I12',MHMLE,MHMLN)
	   CALL FLWRTF('BGI%I4m.; storage scl 1:%I5 data cap scl 1:%I5',
     &		                 MHBGI,		    MHSTSC,	  MHDCSC)
	ELSE
	   CALL FLWRTF('Map Ref %S on %S',MAPREF,DATTIM)
	   CALL FLWRTF('Reference corner %I7,%I7',MHMRCE,MHMRCN)
	   IF (MHMLE.NE.0.0.OR.MHMLN.NE.0.0) CALL FLWRTF(
     &		'Limit corner %I12%I12',MHMLE,MHMLN)
	   CALL FLWRTF('Storage scl 1:%I5',MHSTSC)
	ENDIF
	GOTO 20
C
C NF - get FSN
50	FSN = 0
	CALL EIHRI(FSN, 1, 1)
	IF (MINFSN.EQ.0) GOTO 55
	IF (FSN.LT.MINFSN) GOTO 59
	IF (FSN.GT.MAXFSN) GOTO 59
55	HADRO = .FALSE.
	HADTS = .FALSE.
	NACENT = 0
	GOTO 20
C
C skip features outside FSN range
59	CALL IFFNXC('EF',L)
	GOTO 20
C
C NO - new overlay - might as well print it
60	CALL EIHRI(L, 1, 1)
	CALL FLWRTF
	CALL FLWRTF('Layer%^W%I3',L)
C
C force new code heading
	LSTCOD = -1
	GOTO 20
C
C NS - new section: output text if not empty
70	IF (L.EQ.0) GOTO 20
	CALL EIHRI(TXT, L, 1)
	L = L*2
	IF (TXT(L).EQ.0) L = L-1
	TXT(L+1) = 0
C
C calculate required carriage control
	IF (HADMH.OR.HADNS) CALL FLWRTF
	HADNS = .TRUE.
	CALL FLWRTF('Section identification: %A80',TXT)
	GOTO 20
C
C RO - read rotation angle
71	CALL EIHRR(ANG,1,1)
	HADRO = .TRUE.
	GOTO 20
C
C ST/ZS - read first and last coords only
80	GOTST = (C .EQ. 'ST')
	CALL EIHRS(C, L)
	IF (NPTS.GT.0) GOTO 81
C
C read first point
	CALL EIHRR(FX, 1, 1)
	CALL EIHRR(FY, 1, 3)
C
C count points, read last point
81	NPTS = NPTS+C
	IF (GOTST) THEN
	   C = C*4-3
	ELSE
	   C = C*6-5
	ENDIF
	CALL EIHRR(LX, 1, C)
	CALL EIHRR(LY, 1, C+2)
	GOTO 20
C
C CB entry - want first and last points and numbers of points
C
85	CALL EIHRCB_HEAD(CBH)			! read cb header
	CALL EIHRCB_DATA(CBD)			! read cb data
C
C Check if this is first cb in feature, and if it is
C read x,y of first point in cb into XYBUF array
	IF (NPTS.LT.1) THEN
	   CALL IFS_CB_READ(CBH,CBD,XYBUF,	! cb and dest. buffer
     &			    NXYCOL,XYCOLH,	! no.cols & their headrs
     &			    1,1)		! 1st,last rows to read
	   FX = XYBUF(1)
	   FY = XYBUF(2)
	ENDIF
C
C Read x,y of last point in cb
	CALL IFS_CB_READ(CBH,CBD,XYBUF,
     &			 NXYCOL,XYCOLH,
     &			 CBH.NROW,CBH.NROW)
	LX = XYBUF(1)
	LY = XYBUF(2)
	NPTS = NPTS + CBH.NROW			! number of points
	GOTO 20
C
C TH - only really of interest for texts
90	CALL EIHRI(TXS, 1, 1)
	GOTO 20
C
C TS - like FS, check FC is in range but do it first. If not in range, 
C treat TX as EF as there may be or may have been more valid TS's
95	CALL EIHRI(I, 1, 1)
	IF (I .LT. MINFC .OR. I .GT. MAXFC) THEN
	   CALL IFFNXC('TX',L)
	   GOTO 20
	ENDIF
C
C if already had a TS, treat this one like EF then NF
	IF (HADTS) THEN		! output the last one
C
C ensure there's a header
	   CALL PRTCOD(COD)
C
C illegal code?
	   IF (CURTYP.LT.0) THEN
	      CALL LSL_PUTMSG(OSPIF__UNKFC,FSN,COD)
	   ELSEIF (CURTYP.EQ.0) THEN
	      CALL LSL_PUTMSG(OSPIF__NOTINTAB,FSN,COD)
C
C add to total no. of points
	   ELSE
	      TOTPTS = TOTPTS+NPTS
C
C get the orientation angle 
	      IF (HADRO) GOTO 952
	      LX = LX-FX
	      LY = LY-FY
	      IF(LX.NE.0.0.OR.LY.NE.0.0) GOTO 951
	      CALL LSL_PUTMSG(OSPIF__NULLVEC,FSN)
	      ANG = 0.0
	      GOTO 952
951	      ANG = ATAN2(LY, LX)*57.29577951
952	      IANG=ANG*180./3.14159
953	      IF(IANG.LT.0) IANG = IANG + 360
	      IF(IANG.GE.360) IANG = IANG - 360
	      IF(IANG.LT.0.OR.IANG.GE.360) GOTO 953
C
C and output it
	      CALL FLWRTF('%I5%^W%I7  %F9.2%F9.2%I6%I3%I2%I3  %A80',
     &		           FSN,TXS, FX,  FY, IANG,TPOS,TSTY,TCAT,TXT)
	   ENDIF
	   HADRO = .FALSE.		! now the NF bit
	   NPTS = 0
C
C our first TS
	ELSE
	   HADTS = .TRUE.
	ENDIF
C
C now for the remaining things we do for every TS with a valid FC - 
C like an FS
	NCOMP = NCOMP + 1		! another component
	COD = I
	CALL EIHRI(PROCOD,1,3)
	TPOS = PROCOD.AND."17
	TSTY = (PROCOD.AND."60)/16
	TCAT = (PROCOD.AND."7700)/64
	GOTO 20
C
C TX - body of a name
100	CALL EIHRI(TXT, L, 1)
	TXTL = L*2
	IF (TXT(TXTL).EQ.0) TXTL = TXTL-1
	TXT(TXTL+1) = 0			! terminate with a null
	GOTO 20
C
C end of file
110	CALL FLWRTF
	CALL FLWRTF('Total FSNs%I6 (different%I6); total points%I8',
     &			       TOTFSN,       DIFFSN,           TOTPTS)
	GOTO 999			! return
C
C AC - Ancillary Code info - remember where it is.
120	IF(NACENT.GE.MAXAC) GOTO 129
	NACENT = NACENT + 1
	LPOSAC(NACENT) = LPOSH
	GOTO 20
129	CALL LSL_PUTMSG(OSPIF__TOOMANYAC,FSN)
	GOTO 20
C
999	RETURN
	END
