	INTEGER*4  FUNCTION BC2CONV
C
***	MODULE BC2CONV
***	IDENT 14JA91
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Author  J Barber	14-Jan-1991
C
C	Farms out the conversion for different feature types and initialises
C	the IFF file
C
	IMPLICIT NONE
C
	INCLUDE		'HERE:BC2IFF.CMN'
	INCLUDE 	'HERE:BC2IFFMSG.PAR'
	INCLUDE 	'LSL$CMNIFF:MHDMB.CMN'
	INCLUDE 	'LSL$CMNIFF:MD2DES.CMN'
	INCLUDE		'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE		'LSL$CMNLSL:READSTR.PAR'	!For ON_EOS
C
C  Declarations
	REAL		CFT(10,2)
	REAL		CPTS(4,4)
	INTEGER		LPOSNO
	INTEGER		LPOSRA
	INTEGER*2	IELEN,IECODE
	CHARACTER*256	STRING
	INTEGER 	LEN
C
C  Functions
C
	LOGICAL		RDREAL
	INTEGER		FLRLIN,FLRSEL
	INTEGER		READSTR
C
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL
	INTEGER		SS$_ABORT
	EXTERNAL	SS$_ABORT
C
	DATA CFT/0.0,1.0,10*0.0,1.0,7*0.0/
	DATA CPTS/0.0, 1000.0, 0.0, 1000.0, 0.0, 0.0, 0.0, 0.0,
     &	1000.0, 0.0, 1000.0, 0.0, 1000.0, 1000.0, 1000.0, 1000.0/
C
C *******************************************************************
C Set count of lines to zero
C
	NUMLIN = 0
	BC2CONV = FLRSEL(BC2LUN)		!Define file to read
	IF (.NOT.BC2CONV) GOTO 1000
C
C Master section
C
	BC2CONV = FLRLIN()
	IF (.NOT.BC2CONV) GOTO 1000
C
	CALL BSLN
	NUMLIN=NUMLIN+1
C
	LEN=READSTR(STRING,,ON_EOL)
	IF(STRING(1:LEN).NE.'MASTER') THEN
	   GOTO 1000
	ENDIF
C
C Read header name line - not needed
C
	BC2CONV = FLRLIN()		
	IF (.NOT.BC2CONV) GOTO 1000
C
	NUMLIN = NUMLIN+1
C
C Determine range and write to IFF file
C
	BC2CONV = FLRLIN()		
	IF (.NOT.BC2CONV) GOTO 1000
C
	NUMLIN = NUMLIN+1
	CALL BSLN
C
C Read range info
C
	IF(RDREAL(MINMAX(1))) GOTO 900
	IF(RDREAL(MINMAX(3))) GOTO 900
	IF(RDREAL(MINMAX(2))) GOTO 900
	IF(RDREAL(MINMAX(4))) GOTO 900
C
	LPOSRA = LPOSE		! Save the posn of range entry
	CALL IFFRA(MINMAX)
C
C Look for EOS indicating the end of master section
C
	BC2CONV = FLRLIN()
	IF (.NOT.BC2CONV) GOTO 1000
C
	CALL BSLN
	NUMLIN=NUMLIN+1
C
	LEN=READSTR(STRING,,ON_EOL)
	IF(STRING(1:LEN).NE.'EOS') THEN
	   GOTO 1000
	ENDIF
C
C Fill in rest of IFF entries before we deal with individual features
C
	CALL IFFHI
C
C Set default parameters before inserting a map header to the IFF file
C
	MHDESC(1)=174			! length
	MHDESC(2)=0			! unset map header
	MHDESC(3)=0
	MHDESC(4)=0
	CALL IFFMH(MHARR,MHLEN)
C
C Set default parameters before inserting a map descriptor into 
C the IFF file
C
	MD2LOC(1) = MINMAX(1)
	MD2LOC(2) = MINMAX(3)
	MATV2     = 2
	MD2ARR(1) = -1
C
	CALL IFFMD(MD2ARR,MD2LEN)
	CALL IFFNS(' IFF data created from input BC2 file')
	CALL IFFCC(CFT)
	CALL IFFCP(CPTS)
	LPOSNO=LPOSE		! Save the pos of start of overlay
	CALL IFFNO(1,0,0)
C
C  Logic sections
C
300	BC2CONV = FLRLIN()
	IF (.NOT.BC2CONV) GOTO 1000
C
	CALL BSLN
	NUMLIN=NUMLIN+1
C
	LEN=READSTR(STRING,,ON_EOL)
	IF(STRING(1:LEN).EQ.'EOI') GOTO 850
C
	IF(STRING(1:LEN).NE.'LOGIC') THEN
	   GOTO 999
	ENDIF
C
C Account for unneeded info
C
	BC2CONV = FLRLIN()		
	IF(.NOT.BC2CONV)GOTO 1000
C
	NUMLIN=NUMLIN+1
C
500	BC2CONV = FLRLIN()
	IF(.NOT.BC2CONV)GOTO 1000
C
	NUMLIN=NUMLIN+1
	CALL BSLN
C
C Find logic block type and  direct to appropriate conversion routine
C
	LEN=READSTR(STRING,,ON_EOL)
C
	IF(STRING(1:LEN).EQ.'AREA') THEN
	   IF(.NOT.BC2CONV)GOTO 999
	   GOTO 500
	ENDIF
C
C
	IF (STRING(1:LEN).EQ.'EOS') GOTO 300
C
	BC2CONV = BC2I__UNKGEOIDN
	CALL LSL_PUTMSG(BC2I__UNKGEOIDN,NUMLIN)
	GOTO 999
C
850     CONTINUE
C
C Close IFF files and write EO ,EM, EJ etc entries here
C
 	CALL IFFUNO(LPOSNO)
C
C Update Range entry
C
	CALL IFFPKE(IECODE,IELEN,LPOSRA)
	CALL EIHWR(RANGE,4,1)
C
	CALL IFFEO
	CALL IFFEM
	CALL IFFEJ
	CALL IFFCLO(IFFLUN)
C
	GOTO 999
C
C Error exit reading a line element
C
900	BC2CONV=BC2I__ERRINTLIN
	CALL LSL_PUTMSG(BC2CONV,NUMLIN)
	GOTO 999
C
C General error exit
C
1000 	CALL LSL_PUTMSG(BC2CONV)
C
999	IF (BC2CONV) THEN
	   BC2CONV=%LOC(SS$_NORMAL)
	ELSE
C
C Delete the IFF file
C
	   CALL IFFCDL(IFFLUN)
	   BC2CONV=%LOC(SS$_ABORT)
	ENDIF
C
	RETURN
	END
C
