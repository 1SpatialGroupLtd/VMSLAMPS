        LOGICAL FUNCTION SEG_MERGE (IDN, LASTIDN)
C
***	IDENT	05SE88
***	MODULE	SEG_MERGE
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author J Barber, 7 July 1988
C
C This function merges SEGments in the intermediate file across 
C    into the current main IFF file if they belong to a point
C    (symbol string) feature only
C Called by MERGER for each segment for each feature
C
	IMPLICIT NONE
C
        INTEGER         IDN             ! segment ID number
        LOGICAL         LASTIDN         ! last segment for feature?
C
***     PARAMETER/HERE:CEDD2IMSG/
***     COMMON/HERE:DESCR/              ! for NFADDR
***	COMMON/HERE:PARAMS/	        ! for DIAG
C
C workspace
C
        INTEGER*2       STNUM           ! no. of ST/ZS entries
C                                       !  belonging to segment
        INTEGER*2       STCNT           ! count of them
C                                       
        INTEGER*2       ISN
        INTEGER*2       NPTS
        INTEGER*2       IECODE,IELEN
        INTEGER*2       IENDS
        INTEGER*2       ZERO
        INTEGER         I               ! loop count
C
        REAL            STARRY(2,200)
        REAL            ZSARRY(3,200)
C
        LOGICAL         HAD_ST, HAD_ZS
C
C  *************************************************************
        SEG_MERGE = .TRUE.
C
        CALL IFFSEL (SEGLUN)            ! get segments IFF file
C
        IF (DIAG) CALL WRITEF ('.Searching segment IFF file for ID no.',
     &                                                          IDN)
C
C  position to the beginning of the required segment
C
        CALL IFFPKE (IECODE, IELEN, NFADDR(IDN))
C
        IF (IELEN.EQ.-1) THEN
           CALL LSL_PUTMSG (CEDD2I__NFREPOSNEOF, NFADDR(IDN), IDN)
           CALL LSL_PUTMSG (CEDD2I__MISSEGMENT, IDN)
           SEG_MERGE = .FALSE.
           GOTO 999
        ENDIF
C
        IF (IECODE.NE.'NF') THEN
           CALL LSL_PUTMSG (CEDD2I__NFREPOSERR, IECODE, IDN)
           CALL LSL_PUTMSG (CEDD2I__MISSEGMENT, IDN)
           SEG_MERGE = .FALSE.
           GOTO 999                     ! give up segment
        ENDIF
C
        CALL EIHR (STNUM, 1, 1)         ! read FSN as no. of ST/ZS's
C                                       !    belonging to segment 
        CALL EIHR (ISN, 1, 2)
C
        STCNT = 0
        HAD_ST = .FALSE.
        HAD_ZS = .FALSE.
C
100     CALL IFFNXT (IECODE, IELEN)     ! next entry
C
        IF (IELEN.EQ.-1) THEN
           CALL LSL_PUTMSG (CEDD2I__NFREPOSNEOF, NFADDR(IDN), IDN)
           CALL LSL_PUTMSG (CEDD2I__MISSEGMENT, IDN)
           SEG_MERGE = .FALSE.
           GOTO 999
        ENDIF
C
        IF (IECODE.EQ.'ST') THEN
           STCNT = STCNT + 1
           IF (STCNT.GT.STNUM) THEN
              CALL LSL_PUTMSG (CEDD2I__TOOMNYSTS)
              SEG_MERGE = .FALSE.
              GOTO 999
           ENDIF
           IF (HAD_ZS) CALL LSL_PUTMSG (CEDD2I__STMIXZS, IDN, ISN)
           HAD_ST = .TRUE.
C
           CALL EIHRS (NPTS, IENDS)
C
           CALL EIHRR (STARRY, NPTS*2, 1)
C
C  if 200 points, copy it straight, putting pen flag to "up" for all 
C    coordinate blocks
C
           IF (NPTS.EQ.200) THEN
              CALL IFFSEL (IFFLUN)
              ZERO = 0
              CALL IFFST (STARRY, NPTS, ZERO)
              CALL IFFSEL (SEGLUN)
C
              GOTO 100                       ! get next one
           ENDIF
C
           IF (MERGED_NPTS+NPTS.LE.200) THEN
C
C  add segment to existing ST block
C
              DO 200 I = 1, NPTS
                 MERGED_STBUF (1, MERGED_NPTS+I) = STARRY(1,I)
                 MERGED_STBUF (2, MERGED_NPTS+I) = STARRY(2,I)
200           CONTINUE
C
              MERGED_NPTS = MERGED_NPTS + NPTS 
C
           ELSE       ! no more room in ST for next segment
C
C  output the old merged STBUF
C
              CALL IFFSEL (IFFLUN)
              ZERO = 0
              CALL IFFST (MERGED_STBUF, MERGED_NPTS, ZERO)
              CALL IFFSEL (SEGLUN)
C
C  and start a new one
C
              DO 250 I = 1,NPTS
                 MERGED_STBUF (1,I) = STARRY(1,I)
                 MERGED_STBUF (2,I) = STARRY(2,I)
250           CONTINUE
C
              MERGED_NPTS = NPTS
C
           ENDIF
C
           GOTO 100
C
        ELSEIF (IECODE.EQ.'ZS') THEN
           STCNT = STCNT + 1
           IF (STCNT.GT.STNUM) THEN
              CALL LSL_PUTMSG (CEDD2I__TOOMNYSTS)
              SEG_MERGE = .FALSE.
              GOTO 999
           ENDIF
           IF (HAD_ST) CALL LSL_PUTMSG (CEDD2I__STMIXZS, IDN, ISN)
           HAD_ZS = .TRUE.
C
           CALL EIHRS (NPTS, IENDS)
C
           CALL EIHRR (ZSARRY, NPTS*3, 1)
C
C  if 200 points, copy it straight, putting pen flag "up"
C
           IF (NPTS.EQ.200) THEN
              CALL IFFSEL (IFFLUN)
              ZERO = 0
              CALL IFFZS (ZSARRY, NPTS, ZERO)
              CALL IFFSEL (SEGLUN)
C
              GOTO 100
           ENDIF
C
           IF (MERGED_NPTS+NPTS.LE.200) THEN
C
C  add segment to existing ST block
C
              DO 300 I = 1, NPTS
                 MERGED_ZSBUF (1, MERGED_NPTS+I) = ZSARRY(1,I)
                 MERGED_ZSBUF (2, MERGED_NPTS+I) = ZSARRY(2,I)
                 MERGED_ZSBUF (3, MERGED_NPTS+I) = ZSARRY(3,I)
300           CONTINUE
C
              MERGED_NPTS = MERGED_NPTS + NPTS
C
           ELSE       ! no more room in ZS for next segment
C
C  output the old merged ZSBUF
C
              CALL IFFSEL (IFFLUN)
              ZERO = 0
              CALL IFFZS (MERGED_ZSBUF, MERGED_NPTS, ZERO)
              CALL IFFSEL (SEGLUN)
C
C  and start a new one
C
              DO 350 I=1,NPTS
                 MERGED_ZSBUF (1, I) = ZSARRY(1,I)
                 MERGED_ZSBUF (2, I) = ZSARRY(2,I)
                 MERGED_ZSBUF (3, I) = ZSARRY(3,I)
350           CONTINUE
C
              MERGED_NPTS = NPTS
C
           ENDIF
C
           GOTO 100
C
        ELSEIF (IECODE.EQ.'EF') THEN
           IF (STCNT.NE.STNUM) THEN 
              CALL LSL_PUTMSG (CEDD2I__STMISSING, IDN, ISN)
           ELSEIF (.NOT.HAD_ST .AND. .NOT.HAD_ZS) THEN
              CALL LSL_PUTMSG (CEDD2I__STMISSING, IDN, ISN)
              SEG_MERGE = .FALSE.
           ENDIF
C
C  if this was the last one, and no more segments belonging to feature, 
C     copy the merged block
C
           IF (LASTIDN) THEN
              CALL IFFSEL (IFFLUN)
              ZERO = 0
              IF (HAD_ZS) CALL IFFZS (MERGED_ZSBUF, MERGED_NPTS, ZERO)
              IF (HAD_ST) CALL IFFST (MERGED_STBUF, MERGED_NPTS, ZERO)
           ENDIF
C
           GOTO 999                     ! segment finished
C
        ELSE
C
C  some other entry
C
           CALL LSL_PUTMSG (CEDD2I__STREPOSERR, IECODE, ISN)
           GOTO 100
        ENDIF
C
999     IF (DIAG) CALL WRITEF ('.Coordinates for segment %N copied    
     & (from ISN no. %^W%N)',                              IDN, ISN)
C
        CALL IFFSEL (FEALUN)            ! back to feature file
C
        RETURN
        END
C
