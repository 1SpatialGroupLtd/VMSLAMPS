	LOGICAL FUNCTION RDACC (NUMREG, REGCNT)
C
***	IDENT	01SE88
***	MODULE	RDACC
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author J Barber, 23 May 1988
C This function reads the accuracy regions field of the DSI record
C  of a CEDD tape/file, and creates an area feature in layer0.
C  with the accuracies in AC's
C
C At any stage the accuracy region reading may cross a block/record
C  boundary, hence the MOD (1972) checking
C
C  TRUE for success
C
	IMPLICIT NONE
C
        INTEGER         NUMREG          ! number of acc regions
        INTEGER         REGCNT          ! no. of registration pnts
C
***     PARAMETER/HERE:CEDD2IMSG/
***     COMMON/HERE:STATE/
***     COMMON/HERE:DESCR/
***     COMMON/HERE:PARAMS/
***     COMMON/HERE:BUFFER/
***     COMMON/LSL$CMNFRT:FRTACD/
***     COMMON/LSL$CMNIFF:IFFHAN/
C
C  functions called
C
        LOGICAL         DSI_READ_LONG   ! read numbers
        LOGICAL         RDDMSH          ! convert to arcsec/100 
        LOGICAL         ACDFND_NAME
C
C workspace
C
        INTEGER         ABSHAC
        INTEGER         ABSVAC
        INTEGER         RELHAC
        INTEGER         RELVAC
        INTEGER         NUMCRD          ! no of acc region coords
        INTEGER         CHKSUM
C
        REAL*8          XACVAL
        REAL*8          YACVAL
C
        REAL*8          OUT
        INTEGER         INTOUT          ! from RDDMSH
C
	INTEGER*2	PTR             ! locally saved pointer
        INTEGER*2       DCP1,DCP2
        INTEGER*2       FSN
        INTEGER*2       NPTS
        INTEGER*2       RESTRT
        INTEGER*2       I, J            ! loop counter
	INTEGER*2	ZERO		
        INTEGER*2       ACTYPE
C
	INTEGER*2	ISTAT(4)	
	DATA            ISTAT /0,0,0,0/
C
        REAL            STBUF(2,100)
        REAL            OLDRAN(4)       ! Range as was
C
        CHARACTER*25    TITLE
C
        LOGICAL         JNKACC
C
C  *********************************************************
C be optimistic initially
C
	RDACC = .TRUE.
C
        DO 50 I = 1,4
        OLDRAN(I) = RANGE(I)
50      CONTINUE
C
        DO 100 I = 1, NUMREG
C
        IF (DIAG) THEN
           CALL WRITEF
           CALL WRITEF ('.Reading Accuracy region %^W%N', I)
           CALL WRITEF
        ENDIF
C
        CALL DCPSAV (DCP1)
C
C  absolute horiz accuracy (metres)
C
        TITLE = 'Absolute Horiz Accuracy'
        ABSHAC = 0
C
        IF (.NOT.DSI_READ_LONG (4, ABSHAC, TITLE, 0)) THEN
           CALL LSL_PUTMSG (CEDD2I__UNEXPEND, TITLE, DCP1)
           RDACC = .FALSE.
           GOTO 999
        ENDIF
C
C  absolute vert accuracy (metres)
C
        CALL DCPSAV (PTR)
        CHKSUM = DCP1+4
        IF (PTR.NE.CHKSUM .AND. PTR.NE.CHKSUM-1972) THEN
           CALL LSL_PUTMSG (CEDD2I__ACCNTERR, TITLE, PTR)
           RDACC = .FALSE.
           GOTO 999
        ENDIF
C
        TITLE = 'Absolute Vert Accuracy'
        ABSVAC = 0
C
        IF (.NOT.DSI_READ_LONG (4, ABSVAC, TITLE, 0)) THEN
           CALL LSL_PUTMSG (CEDD2I__UNEXPEND, TITLE, PTR)
           RDACC = .FALSE.
           GOTO 999
        ENDIF
C
C  relative horiz accuracy (metres)
C
        CALL DCPSAV (PTR)
        CHKSUM = DCP1+8
        IF (PTR.NE.CHKSUM .AND. PTR.NE.CHKSUM-1972) THEN
           CALL LSL_PUTMSG (CEDD2I__ACCNTERR, TITLE, PTR)
           RDACC = .FALSE.
           GOTO 999
        ENDIF
C
        TITLE = 'Relative Horiz Accuracy'
        RELHAC = 0
C
        IF (.NOT.DSI_READ_LONG (4, RELHAC, TITLE, 0)) THEN
           CALL LSL_PUTMSG (CEDD2I__UNEXPEND, TITLE, PTR)
           RDACC = .FALSE.
           GOTO 999
        ENDIF
C
C  relative vert accuracy (metres)
C
        CALL DCPSAV (PTR)
        CHKSUM = DCP1+12
        IF (PTR.NE.CHKSUM .AND. PTR.NE.CHKSUM-1972) THEN
           CALL LSL_PUTMSG (CEDD2I__ACCNTERR, TITLE, PTR)
           RDACC = .FALSE.
           GOTO 999
        ENDIF
C
        TITLE = 'Relative Vert Accuracy'
        RELVAC = 0
C
        IF (.NOT.DSI_READ_LONG (4, RELVAC, TITLE, 0)) THEN
           CALL LSL_PUTMSG (CEDD2I__UNEXPEND, TITLE, PTR)
           RDACC = .FALSE.
           GOTO 999
        ENDIF
C
C  no of coordinate pairs in acc region
C
        CALL DCPSAV (PTR)
        CHKSUM = DCP1+16
        IF (PTR.NE.CHKSUM .AND. PTR.NE.CHKSUM-1972) THEN
           CALL LSL_PUTMSG (CEDD2I__ACCNTERR, TITLE, PTR)
           RDACC = .FALSE.
           GOTO 999
        ENDIF
C
        TITLE = 'No. of Coordinate Pairs'
        NUMCRD = 0
C
        IF (.NOT.DSI_READ_LONG (2, NUMCRD, TITLE, 0)) THEN
           CALL LSL_PUTMSG (CEDD2I__UNEXPEND, TITLE, PTR)
           RDACC = .FALSE.
           GOTO 999
        ENDIF
C
        IF (RDLONGERR) THEN
           CALL LSL_PUTMSG (CEDD2I__NUMCRDMISS, I)
           RDACC = .FALSE.
           GOTO 999                     ! and give up regions
	ENDIF
C
        IF (NUMCRD.LT.3) THEN           ! not a region
           CALL LSL_PUTMSG (CEDD2I__NUMCRDERR, NUMCRD)
           JNKACC = .TRUE.
        ENDIF
C
        CALL DCPSAV (PTR)
        CHKSUM = DCP1+18
        IF (PTR.NE.CHKSUM .AND. PTR.NE.CHKSUM-1972) THEN
           CALL LSL_PUTMSG (CEDD2I__ACCNTERR, TITLE, PTR)
           RDACC = .FALSE.
           GOTO 999
        ENDIF
C
        IF (JNKACC) GOTO 150
C
        ZERO = 0
        FSN = I + 1 + REGCNT            ! count after reg pnts 
C                                       !  and enc. ftr
        CALL IFFNF (FSN, ZERO)
        INFTR = .TRUE.
        ISNSUM = ZERO                   ! total no. of features
C
        ISTAT(1) = ACAREA
        CALL IFFFS (ISTAT)
C
        IF (.NOT.ACDFND_NAME ('ACC_abs_horiz_acc')) THEN
           ACTYPE = ACD_CODE
           CALL IFFAC (ACTYPE, ABSHAC)
        ENDIF
C
        IF (.NOT.ACDFND_NAME ('ACC_abs_vert_acc')) THEN
           ACTYPE = ACD_CODE
           CALL IFFAC (ACTYPE, ABSVAC)
        ENDIF
C
        IF (.NOT.ACDFND_NAME ('ACC_rel_horiz_acc')) THEN
           ACTYPE = ACD_CODE
           CALL IFFAC (ACTYPE, RELHAC)
        ENDIF
C
        IF (.NOT.ACDFND_NAME ('ACC_rel_vert_acc')) THEN
           ACTYPE = ACD_CODE
           CALL IFFAC (ACTYPE, RELVAC)
        ENDIF
C
C  reset BYTBUF and decode pointer
C
        CALL SETAUX (BYTBUF, BUFLEN)
        CALL DCPSET (PTR)
C
        ZERO = 0
        CALL IFFTH (ZERO)
C
150     DO 200 J = 1, NUMCRD
C
C  accuracy latitude
C
        CALL DCPSAV (DCP2)
C
        TITLE = 'Accuracy Latitude'
C
        INTOUT = 0
        OUT = 0D0
        YACVAL = 0D0
        IF (.NOT.RDDMSH (.TRUE., OUT, INTOUT, TITLE)) THEN
           IF (BLKERR.OR.DELFND) THEN
              CALL LSL_PUTMSG (CEDD2I__UNEXPEND, TITLE, DCP2)
              RDACC = .FALSE.
              GOTO 999
           ENDIF
           CALL LSL_PUTMSG (CEDD2I__ACCABANDON, I)
           JNKACC = .TRUE.
        ENDIF
C
        YACVAL = OUT
C
C  accuracy longitude
C
        CALL DCPSAV (PTR)
        CHKSUM = DCP2+9
        IF (PTR.NE.CHKSUM .AND. PTR.NE.CHKSUM-1972) THEN
           CALL LSL_PUTMSG (CEDD2I__ACCNTERR, TITLE, PTR)
           RDACC = .FALSE. 
           IF (INFTR) CALL IFFEF
           GOTO 999
        ENDIF
C
        TITLE = 'Accuracy Longitude'
C
        OUT = 0D0
        INTOUT = 0
        XACVAL = 0D0
        IF (.NOT.RDDMSH (.FALSE., OUT, INTOUT, TITLE)) THEN
           IF (BLKERR.OR.DELFND) THEN
              CALL LSL_PUTMSG (CEDD2I__UNEXPEND, TITLE, PTR)
              RDACC = .FALSE.
              GOTO 999
           ENDIF
           CALL LSL_PUTMSG (CEDD2I__ACCABANDON, I)
           JNKACC = .TRUE.
        ENDIF
C
        XACVAL = OUT                     ! arcsec/100
C
        CALL DCPSAV (PTR)
        CHKSUM = DCP2+19
        IF (PTR.NE.CHKSUM .AND. PTR.NE.CHKSUM-1972) THEN
           CALL LSL_PUTMSG (CEDD2I__ACCNTERR, TITLE, PTR)
           RDACC = .FALSE. 
           IF (INFTR) CALL IFFEF
           GOTO 999
        ENDIF
C
        IF (JNKACC) GOTO 200
C
        STBUF (2, J) = YACVAL 
        STBUF (1, J) = XACVAL 
C
        IF (.NOT.RNGSET) THEN
           RANGE(1) = STBUF(1,J)
           RANGE(2) = STBUF(1,J)
           RANGE(3) = STBUF(2,J)
           RANGE(4) = STBUF(2,J)
           RNGSET = .TRUE.
        ENDIF
C
        RANGE(1) = MIN (RANGE(1), STBUF(1,J))
        RANGE(2) = MAX (RANGE(2), STBUF(1,J))
        RANGE(3) = MIN (RANGE(2), STBUF(2,J))
        RANGE(4) = MAX (RANGE(4), STBUF(2,J))
C
200     CONTINUE
C
        IF (JNKACC.AND.INFTR) THEN
           CALL IFFDEL
           GOTO 100
        ENDIF
C
C   and we may now actually output our points
C   ensure that the feature is closed 
C
        IF (NINT (STBUF(1, 1)) .NE. NINT (STBUF (1, NUMCRD)) .OR.
     &	    NINT (STBUF(2, 1)) .NE. NINT (STBUF (2, NUMCRD))) THEN
           NUMCRD = NUMCRD + 1		      ! need another point
           STBUF(1, NUMCRD) = STBUF(1, 1)     ! close the region
           STBUF(2, NUMCRD) = STBUF(2, 1)
        ENDIF
C
        ZERO = 0
        NPTS = NUMCRD
        CALL IFFST (STBUF, NPTS, ZERO)
C
C  and we are now free to end the feature
C
        CALL IFFEF
        INFTR = .FALSE.
C
        IF (DIAG) CALL WRITEF ('.Feature %^W%N completed', ISNSUM)
C
100     CONTINUE
C
        IF (DIAG) THEN
           CALL WRITEF
           CALL WRITEF ('.Accuracy Regions completed')
           CALL WRITEF
        ENDIF
C
999     IF ((RANGE(1).LT.OLDRAN(1)) .OR.
     &      (RANGE(2).GT.OLDRAN(2)) .OR.
     &      (RANGE(3).LT.OLDRAN(3)) .OR.
     &      (RANGE(4).GT.OLDRAN(4))) THEN
           CALL WRITEF
           CALL WRITEF (' Range modified by Accuracy Regions to: ')
           CALL WRITEF (' %F9.2 %F9.2   %F9.2 %F9.2', 
     &                      RANGE(1), RANGE(2), RANGE(3), RANGE(4))
        ENDIF
C
	RETURN
	END
C
