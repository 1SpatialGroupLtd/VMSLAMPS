C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-08-31 17:29:16.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION CVTDAY (DAYS, DATE, TITLE)
C
***	IDENT	31AU88
***	MODULE	CVTDAY
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author J Barber, 21 June 1988
C
C This function converts days, months, years to an integer number of
C   days
C
C  TRUE for success
C
	IMPLICIT NONE
C
        LOGICAL         DAYS            ! TRUE to read days
        INTEGER         DATE            ! result
        CHARACTER*25    TITLE
C
***     COMMON/HERE:STATE/
***     COMMON/HERE:PARAMS/
***     PARAMETER/HERE:CEDD2IMSG/
C
C functions called
C
        INTEGER         CVT_DMY_DAY
        LOGICAL         RDLONG          ! read numbers
C
C workspace
C
        INTEGER         YY
        INTEGER         MM
        INTEGER         DD
C
        INTEGER         RETVAL          ! error return
	INTEGER*2	PTR,DCP1        ! locally saved pointer
        INTEGER*2       RESTRT
C
        LOGICAL         JNKDAT          ! useless date?
C
C  ***************************************************************
C be optimistic initially
C
	CVTDAY = .TRUE.
        JNKDAT = .FALSE.
C
        DATE = 0
        YY = 0
        MM = 0
        DD = 0
C
        CALL DCPSAV (DCP1)
        CALL SETWIN ( , 2)
C
	IF (RDLONG (YY)) THEN           ! date not there 
           IF (DELFND.OR.BLKERR) THEN
              CVTDAY = .FALSE.
              GOTO 999
           ENDIF
           IF (DIAG) CALL WRITEF (' blank date field at %^W%N', DCP1)
           YY = 0
           JNKDAT = .TRUE.
	ELSE 
           YY = YY + 1900
	ENDIF
C
        RESTRT = DCP1+2
        IF (RESTRT.GT.1980) RESTRT = MOD (RESTRT, 1972)
        CALL SETWIN (RESTRT, )
C
        CALL DCPSAV (PTR)
        IF ((PTR.NE.DCP1+2) .AND. (PTR.NE.DCP1+2-1972)) THEN
           CVTDAY = .FALSE.
           CALL LSL_PUTMSG (CEDD2I__YMDCNTERR, PTR)
           GOTO 999
        ENDIF
C
        CALL SETWIN ( , 2)
	IF (RDLONG (MM)) THEN
           IF (BLKERR.OR.DELFND) THEN
              CVTDAY = .FALSE.
              GOTO 999
           ENDIF
C unable to read field in date block; outputting 1
   	   IF (.NOT.JNKDAT) THEN
              IF (DIAG) CALL LSL_PUTMSG (CEDD2I__MONTHPUT1, PTR)
	      MM = 1
           ELSE
              MM = 0
           ENDIF
	ENDIF
C
C  may be 0000 instead of spaces
C
        IF (YY.EQ.1900 .AND. MM.EQ.0) THEN
           YY = 0
           JNKDAT = .TRUE.
        ENDIF
C
        RESTRT = PTR+2
        IF (RESTRT.GT.1980) RESTRT = MOD (RESTRT, 1972)
        CALL SETWIN (RESTRT, )
C
        CALL DCPSAV (PTR)
        IF ((PTR.NE.DCP1+4) .AND. (PTR.NE.DCP1+4-1972)) THEN
           CVTDAY = .FALSE.
           CALL LSL_PUTMSG (CEDD2I__YMDCNTERR, PTR)
           GOTO 999
        ENDIF
C
        IF (DAYS) THEN
           CALL SETWIN ( , 2)
           IF (RDLONG (DD)) THEN
              IF (BLKERR.OR.DELFND) THEN
                 CVTDAY = .FALSE.
                 GOTO 999
              ENDIF
C unable to read field in date block; outputting 1
              IF (.NOT.JNKDAT) THEN
                 IF (DIAG) CALL LSL_PUTMSG (CEDD2I__DAYPUT1, PTR)
                 DD = 1
              ELSE
                 DD = 0
              ENDIF
	   ENDIF
C
           RESTRT = PTR+2
           IF (RESTRT.GT.1980) RESTRT = MOD (RESTRT, 1972)
           CALL SETWIN (RESTRT, )
        ELSE
           IF (.NOT.JNKDAT) THEN
              DD = 1
           ELSE
              DD = 0
           ENDIF           
        ENDIF
C
        IF (.NOT.JNKDAT) RETVAL = CVT_DMY_DAY (DATE, DD, MM, YY)
        IF (.NOT.RETVAL) THEN
           CALL LSL_PUTMSG (CEDD2I__INVALDAT, DD, MM, YY)
           CALL LSL_PUTMSG (RETVAL)
           DATE = 0
        ENDIF
C
        CALL DCPSAV (PTR)
        IF (DAYS) THEN
           IF ((PTR.NE.DCP1+6) .AND. (PTR.NE.DCP1+6-1972)) THEN
              CVTDAY = .FALSE.
              CALL LSL_PUTMSG (CEDD2I__YMDCNTERR, DCP1)
           ENDIF
        ELSE
           IF ((PTR.NE.DCP1+4) .AND. (PTR.NE.DCP1+4-1972)) THEN
              CVTDAY = .FALSE.
              CALL LSL_PUTMSG (CEDD2I__YMDCNTERR, DCP1)
           ENDIF
        ENDIF
C
999     IF (FULL_DIAG) CALL WRITEF 
     &  ('.%S   %P %I2/%I2/%I4   (%N  days)', TITLE, DD, MM, YY, 
     &   DATE)
C
        IF (.NOT.CVTDAY) THEN
           CALL LSL_PUTMSG (CEDD2I__YMDCONVERR, TITLE, PTR)
           DATE = 0
C
           IF (DAYS) RESTRT = DCP1+6
           IF (.NOT.DAYS) RESTRT = DCP1+4
           IF (RESTRT.GT.1980) RESTRT = MOD (RESTRT, 1972)
           CALL SETWIN (RESTRT, )
        ENDIF
C
	RETURN		       ! return with it
	END
C
