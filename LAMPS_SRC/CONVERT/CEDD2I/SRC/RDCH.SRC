C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-09-11 17:18:08.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION RDCH(CH)
C
***	IDENT 11SE88
***	MODULE RDCH
C
C       Copyright Laser Scan Laboratories Ltd., Cambridge, England
C
C Author R. Fairbairns			Dec 1976/Jan 1977
C Amended for LSLLIB, TJ Ibbs		6 July 1985
C Modified for CEDD2I J Barber          2 June 1988
C
C To read a character from the character input buffer
C Returns .TRUE. if ASCII 'delete' (pad char) met, or an
C   unexpectedly different block/record type, or no more
C   available data if required.
C
C If reading CEDD data, RDCH will get the next block/record and
C   continue reading, after skipping over the 8-char header, as if
C   nothing was there
C
C Ignore the first 8 characters of a 1980 byte record
C   obtaining record type and sequence number
C
C Behaves normally for TXTBUF, or non CEDD data 
C
	IMPLICIT NONE
C
	BYTE       CH             ! to hold the character read
C
***     PARAMETER/HERE:CEDD2IMSG/
***     PARAMETER/LSL$CMNLSL:LSLLIBMSG/
***	COMMON/LSL$CMNLSL:TXTC/
***	COMMON/LSL$CMNLSL:WINDEF/
***     COMMON/LSL$CMNLSL:MTIVCM/
***     COMMON/HERE:STATE/
***     COMMON/HERE:PARAMS/
***     COMMON/HERE:BUFFER/
C
C function called:
C
        BYTE         RDAUXC         ! byte from aux buffer
C
        INTEGER      FLRLIN         ! read next line
        INTEGER      MTIRDB
C
        INTEGER*2    I              ! loop counter
        INTEGER      RETVAL
        INTEGER      IERR
        INTEGER      DMPPTR
        INTEGER      CHPTR
C
        INTEGER*2    LSTDCP
        INTEGER*2    LSTTXP         ! last text pointer
        INTEGER      LSTBLK         ! last block type
C
        LOGICAL      GETNXT         ! further data required?
C
        CHARACTER*5  CHRNUM         ! temp for RECCNT
        BYTE         BYTNUM(5)      ! same
        BYTE         BYTHED(3)      ! for LABEL
C
        BYTE         DELETE
        DATA         DELETE /Z7F/   ! Hex version of ASCII 'delete'
C
C  ****************************************************************
        BLKERR = .FALSE.
        DELFND = .FALSE.
        GETNXT = .FALSE.
        LSTDCP = 0
        LSTTXP = 0
        LSTBLK = 0
C
C  immediately after SETAUX:
C  at first character determine the blocktype 
C
1       IF ((AUXTXP.EQ.INLEN) .AND. (DCPTR.EQ.1)) THEN
           DO 2 I = 1,3
           BYTHED(I) = RDAUXC (AUXTXB, I)
2          CONTINUE
C
           LABEL = '   '
           WRITE (LABEL, 3) (BYTHED(I), I = 1,3)
3          FORMAT (3A1)
C
           CEDDAT = .FALSE.
           BLKTYP = 0            ! unset block type
C
           IF (LABEL.EQ.'VOL') THEN
              BLKTYP = VOLUME
           ELSEIF (LABEL.EQ.'HDR') THEN
              BLKTYP = HEADER
           ELSEIF (LABEL.EQ.'EOF') THEN
              BLKTYP = TRAILR
C
           ELSEIF (LABEL.EQ.'DSI') THEN
              BLKTYP = DSIBLK
              CEDDAT = .TRUE.
           ELSEIF (LABEL.EQ.'FEA') THEN
              BLKTYP = FEABLK
              CEDDAT = .TRUE.
           ELSEIF (LABEL.EQ.'SEG') THEN
              BLKTYP = SEGBLK
              CEDDAT = .TRUE.
           ELSEIF (LABEL.EQ.'TXT') THEN
              BLKTYP = TXTBLK
           ELSE
              BLKTYP = -1
              CALL LSL_PUTMSG (CEDD2I__UNKNOWNBLK, LABEL)
              BLKERR = .TRUE.
              GOTO 10 
           ENDIF
C
           IF (GETNXT .AND. (BLKTYP.NE.LSTBLK)) THEN
              CALL LSL_PUTMSG (CEDD2I__OUTOFDATA, LABEL)
              BLKERR = .TRUE.
              GOTO 10
           ENDIF
C
C   the record sequence number
C
           IF (CEDDAT .OR. BLKTYP.EQ.TXTBLK) THEN
              DO 4 I = 4,8
              BYTNUM(I-3) = RDAUXC (AUXTXB, I)
4             CONTINUE
C 
              WRITE (CHRNUM, 5) (BYTNUM(I), I = 1,5)  ! convert bytes 
5             FORMAT (5A1)                            ! to string
              RECCNT = 0
              READ (CHRNUM, 6) RECCNT                 ! convert string 
6             FORMAT (I5)                             ! to integer
           ENDIF
C  
           IF (GETNXT) THEN
              DCPTR = LSTDCP - 1972
              AUXTXP = LSTTXP - 1972
           ELSE
              DCPTR = 8
           ENDIF
        ENDIF
C
C  get the next block/record to continue reading through
C
        IF ((DCPTR.GT.INLEN) .AND. CEDDAT) THEN
           LSTBLK = BLKTYP
           LSTDCP = DCPTR
           LSTTXP = AUXTXP
           GETNXT = .TRUE.           ! need more data
           IF (.NOT.DEVICE) THEN
	      CALL FLRSEL(CEDLUN)
              RETVAL = FLRLIN (BYTBUF, BUFCNT, BUFLEN, IERR)
              IF (.NOT.RETVAL) THEN
                 IF (RETVAL.EQ.LSL__EOF) THEN
                    CALL LSL_PUTMSG (CEDD2I__UNEXPEOF)
                 ELSE 
                    CALL LSL_PUTMSG (CEDD2I__FILRDERR) 
                    CALL LSL_PUTMSG (RETVAL)
                    IF (RETVAL.EQ.LSL__SYSREAD) CALL LSL_PUTMSG
     &                                                   (IERR)
                 ENDIF
                 LABEL = '   '
                 BLKTYP = -1
                 BLKERR = .TRUE.
                 GOTO 10
              ELSEIF (BUFCNT.NE.BUFLEN) THEN
                 CALL LSL_PUTMSG (CEDD2I__BUFNUMERR, BUFCNT)
                 BLKTYP = -1
                 BLKERR = .TRUE.
                 BLKERR = .TRUE.
                 GOTO 10
              ENDIF
           ELSE
              RETVAL = MTIRDB (MAX_BYTBUF, MAX_INLEN, BYTCNT)
              IF (.NOT.RETVAL) THEN
                 IF (RETVAL.EQ.LSL__EOF) THEN
                    CALL LSL_PUTMSG (CEDD2I__UNEXPEOF)
                    BLKTYP = TAPEMK
                    LABEL = 'TMK'
                 ELSE
                    CALL LSL_PUTMSG (CEDD2I__TAPRDBERR, MTINBL)
                    CALL LSL_PUTMSG (RETVAL)
                    IF (RETVAL.EQ.LSL__SYSERR) CALL LSL_PUTMSG 
     &                                                     (MTIERR)
                    LABEL = '   '
                    BLKTYP = -1
                 ENDIF
                 BLKERR = .TRUE.
                 GOTO 10
              ENDIF
C
              IF (BYTCNT.LT.LONG_INLEN) THEN
                 IF (BYTCNT.NE.INLEN) THEN
                    CALL LSL_PUTMSG (CEDD2I__BYTNUMERR, BYTCNT)
                    BLKERR = .TRUE.
                    GOTO 10
                 ENDIF
              ELSE
                 DO 20 I = 1,INLEN
                 MAX_BYTBUF(I) = MAX_BYTBUF(I+4)
20               CONTINUE
                 BYTCNT = INLEN
              ENDIF
C
              IF (DUMP.AND.DUMPOPN) THEN
                 CALL FLWSEL (DUMPLUN)
                 CALL FLWRTF
                 CALL FLWRTF ('.Block %N, %N longwords of data',
     &                                       MTINBL, (BYTCNT+3)/4)
                 CALL FLWRTF
                 DO 50 CHPTR = 1, (BYTCNT+3)/4, 4
                    CALL EXPAND
                    DO 100 DMPPTR = 
     &                      CHPTR, MIN ((CHPTR+3), (BYTCNT+3)/4)
                       CALL APPEND ('%P0%X8  ', INTBUF (DMPPTR))
100                 CONTINUE

                    CALL FLWSTR
50               CONTINUE
              ENDIF
C
              IF (DIAG) THEN
                 CALL WRITEF
                 CALL WRITEF ('.Started tape block %N', MTINBL)
              ENDIF
           ENDIF
           CALL SETAUX (BYTBUF, BUFLEN)
           GOTO 1
        ENDIF
C
C  normal behaviour for non CEDD data
C
	IF (AUXTXP.EQ.0) THEN		   ! use standard buffer
	   IF (DCPTR.GT.TXTPTR) GOTO 10	   ! if GT, end of line
	   CH = TXTBUF (DCPTR)		   ! get character
	ELSE			           ! use auxiliary buffer
           IF (DCPTR.GT.AUXTXP) GOTO 10
      	   CH = RDAUXC (AUXTXB, DCPTR)     ! get character
	ENDIF
C
        IF (CH.EQ.DELETE) THEN
           DELFND = .TRUE.           ! found pad at end of record
           GOTO 10
        ENDIF
C
C tidy up
C
	RDCH = .FALSE.
	DCPTR = DCPTR + 1
	GOTO 9000
C
C at end of 'line' - return 'null'
C
10	RDCH = .TRUE.
	CH = 0
C
9000	RETURN
	END
C
