C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-09-12 17:39:08.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
 	INTEGER FUNCTION GETCOMLIN
C
***	MODULE GETCOMLIN
***	IDENT  12SE88
C
C       Copyright Laser-scan laboratories Ltd, Cambridge, England.
C
C Author Jon Barber
C Created 11-May-88
C
	IMPLICIT NONE
C
C Command definitions:
C
	EXTERNAL	CEDD2I_CLD
	INTEGER		CEDD2I_CLD
C
C Common blocks:
C
***     PARAMETER/HERE:CEDD2IMSG/
***     PARAMETER/LSL$CMNLSL:LSLLIBMSG/ 
***     COMMON/LSL$CMNLSL:FILENAME/
***     COMMON/LSL$CMNLSL:TXTC/
***     COMMON/LSL$CMNLSL:CLD/ 
***	COMMON/HERE:STATE/
***	COMMON/HERE:PARAMS/        
C
C Functions:
C
	INTEGER  	DCL_CML
	INTEGER  	DCL_STARTUP
	INTEGER  	DCL_QUAL
	INTEGER  	DCL_INT
	INTEGER  	DCL_FILE
	INTEGER         DCL_STR
C
        INTEGER         PUTFLN          ! put filename into /FILENAME/
        INTEGER         EXPFLN          ! reconstruct filename
        INTEGER         TEST_FOREIGN    ! mounted FOREIGN?
	LOGICAL		RDLALO		! translate latlong to .01 secs	
C
        LOGICAL         IS_FOR          ! foreign?
	LOGICAL		ABSENT
        LOGICAL         LOCAL           ! for DCL_QUAL
        LOGICAL         LOCNEG          ! for DCL_QUAL 
        LOGICAL         LAT
        LOGICAL         LONG
        LOGICAL         SELECT
        LOGICAL         FRT
C
        INTEGER         RETVAL
        INTEGER         IERR
        INTEGER*2       I               ! loop count
        INTEGER         CMDLEN          ! length of line
C
        CHARACTER*1024  STRING          ! command line
C
C  *************************************************************
C  assume success
C
        GETCOMLIN = LSL__NORMAL
C
C  initialise flags
C
        FRT    = .FALSE.
	DIAG   = .FALSE.
        FULL_DIAG = .FALSE.
	DUMP   = .FALSE.      
C
	LAT    = .FALSE.
	LONG   = .FALSE.
	SELECT = .FALSE.
        REWIND = .FALSE.
C
C    set up defaults 
C
        IS_FOR = .FALSE.      ! not mounted FOREIGN
        DEVICE = .FALSE.
        INVAL  = .FALSE.
        SKIP   = .FALSE.      ! read blk by blk unless told not to
        SERNUM = .FALSE.
        SERLAT = .FALSE.
        SERLON = .FALSE.
C
C  __________________________________________________________________
C  get command line for our command verb CEDD2I. DCL_STARTUP will
C  return set to SS$_NORMAL if all is well
C
	GETCOMLIN = DCL_STARTUP ('CEDD2I'      ! command verb
     &	                        ,.FALSE.       ! don't split param lists
     &                          , CEDD2I_CLD   ! CLD module name
     &                          ,.TRUE.)       ! local error reporting
	IF (.NOT. GETCOMLIN) GOTO 70
C
C  get input file-spec
C
	GETCOMLIN = DCL_FILE ('INPUT_CEDD_FILE_SPEC', 'LSL$IF:CEDD.FILE;0'
     &              			, ABSENT, .FALSE., .TRUE.)
	IF (.NOT.GETCOMLIN) GOTO 70
C
C  transfer the file-spec to our common variable
C
        CEDLEN = FIL_LEN(1)
	CEDNAM = FILARY(1) (:FIL_LEN(1))
C
C  put input file name into /FILENAME/
C
        GETCOMLIN = PUTFLN (CEDNAM)
        IF (.NOT.GETCOMLIN) THEN
           CALL LSL_PUTMSG (CEDD2I__PUTFLNERR, CEDNAM(:CEDLEN))
           GOTO 70
        ENDIF
C
C  test name for FOREIGN device mounting (rest of name ignored)
C
        GETCOMLIN = TEST_FOREIGN (CEDNAM, IS_FOR, IERR)
        IF (.NOT.GETCOMLIN) THEN
           IF (GETCOMLIN.EQ.LSL__NOSUCHDEV) THEN
              CALL LSL_PUTMSG (CEDD2I__DEVNOTFND, STR_DEV(:LEN_DEV))
           ELSEIF (GETCOMLIN.EQ.LSL__SYSERR) THEN
              CALL LSL_PUTMSG (IERR)
           ENDIF
           GOTO 70
        ENDIF
C
        IF (IS_FOR) THEN                      ! is mounted FOREIGN
           DEVICE = .TRUE.
           TAPEUN = STR_DEV (:LEN_DEV)//':' 
           CALL WRITEF (' Tape %S has been mounted FOREIGN', TAPEUN)
        ELSE
           DEVICE = .FALSE.
           CALL WRITEF (' Device %S is not FOREIGN ',
     &                                  STR_DEV(:LEN_DEV)//':')
        ENDIF
C
C  get output file-spec
C
	GETCOMLIN = DCL_FILE ('OUTPUT_IFF_FILE_SPEC', 'LSL$IF:CEDD.IFF'
     &              			, ABSENT, .FALSE., .TRUE.)
	IF (.NOT.GETCOMLIN) GOTO 70
C
C  transfer the file-spec to our common variable
C
        FILLEN = FIL_LEN(1)
	FILNAM = FILARY(1) (:FIL_LEN(1))
        FULNAM = FILNAM(:FILLEN)
        FULLEN = FILLEN
C
C  create intermediate FEAture & SEGment IFF filenames
C
        GETCOMLIN = PUTFLN (FILNAM)
        IF (.NOT.GETCOMLIN) THEN
           CALL LSL_PUTMSG (CEDD2I__PUTFLNERR, FILNAM(:FILLEN))
           GOTO 70
        ENDIF
C
        HAD_NAM = .TRUE.
        STR_NAM = 'TEMP'
        LEN_NAM = 4
C
        HAD_EXT = .TRUE.
        STR_EXT = 'SEG'
        LEN_EXT = 3
C
        GETCOMLIN = EXPFLN (SEGNAM, TMPLEN)
        IF (.NOT.GETCOMLIN) THEN
           CALL LSL_PUTMSG (CEDD2I__EXPFLNERR, SEGNAM(:TMPLEN))
           GOTO 70
        ENDIF
C
        STR_EXT = 'FEA'
        LEN_EXT = 3
C
        GETCOMLIN = EXPFLN (FEANAM, TMPLEN)
        IF (.NOT.GETCOMLIN) THEN
           CALL LSL_PUTMSG (CEDD2I__EXPFLNERR, FEANAM(:TMPLEN))
           GOTO 70
        ENDIF
C
C  get FRT file-spec
C
        GETCOMLIN = DCL_QUAL ('FRT', FRT, LOCAL, LOCNEG, .TRUE.)
        IF (.NOT.GETCOMLIN) GOTO 70
C   
        IF (FRT) THEN
           GETCOMLIN = DCL_FILE ('FRT', 'LSL$FRT:CEDD.FRT;0' 
     &                                , ABSENT, .FALSE., .TRUE.)
           IF (.NOT.GETCOMLIN) GOTO 70
C
C  transfer the file-spec to our common variable
C
           FRTNAM = FILARY(1) (1:FIL_LEN(1))
           FRTLEN = FIL_LEN(1)
	ENDIF
C
C  check for /DIAGNOSTICS
C
	GETCOMLIN = DCL_QUAL ('DIAGNOSTICS', DIAG, LOCAL, LOCNEG, .TRUE.)
	IF (.NOT.GETCOMLIN) GOTO 70
C
C  check for /FULL_DIAGNOSTICS
C
	GETCOMLIN = DCL_QUAL ('FULL_DIAGNOSTICS', FULL_DIAG, 
     &                                            LOCAL, LOCNEG, .TRUE.)
	IF (.NOT.GETCOMLIN) GOTO 70
C
        IF (FULL_DIAG) DIAG = .TRUE.
C
C  if mounted NOT FOREIGN, all other qualifiers are irrelevant
C
        IF (.NOT.IS_FOR) GOTO 70
C
C  check for /Rewind
C
        GETCOMLIN = DCL_QUAL ('REWIND', REWIND, LOCAL, LOCNEG, .TRUE.)
        IF (.NOT.GETCOMLIN) GOTO 70
C
C  search options available (must be mounted FOREIGN)
C
C EITHER:
C     /SELECT             next map on tape
C     /SELECT = list      search by no. of file on tape (tape REWOUND)
C     none                all files from current tape position copied
C OR:
C        /LAT             search by origin from current tape position 
C and/or /LONG            search by origin
C
C  check for /LATITUDE
C
	GETCOMLIN = DCL_QUAL ('LATITUDE', LAT, LOCAL, LOCNEG, .TRUE.)
	IF (.NOT.GETCOMLIN) GOTO 70
C
     	IF (LAT) THEN
     	   GETCOMLIN = DCL_STR ('LATITUDE', .TRUE.)
           IF (.NOT.GETCOMLIN) GOTO 70
	   CALL EXPAND ('%W%S', TXTBUF, CARRAY(1) (1:STR_LEN(1)))
           IF (.NOT.RDLALO (.TRUE.)) THEN 
              INVAL = .TRUE.
              GOTO 70
           ENDIF
        ENDIF
C
C  check for /LONGITUDE
C
	GETCOMLIN = DCL_QUAL ('LONGITUDE', LONG, LOCAL, LOCNEG, .TRUE.)
	IF (.NOT.GETCOMLIN) GOTO 70
C
        IF (LONG) THEN
           GETCOMLIN = DCL_STR ('LONGITUDE', .TRUE.)
           IF (.NOT.GETCOMLIN) GOTO 70
	   CALL EXPAND ('%W%S', TXTBUF, CARRAY(1) (1:STR_LEN(1)))
           IF (.NOT.RDLALO (.FALSE.)) THEN
              INVAL = .TRUE.
              GOTO 70
           ENDIF
           GOTO 70        ! SELECT not allowed with lat/longitude
        ENDIF
C
C  check for /SELECT      ! SKIPTO (n)th map on tape, from BOT if 
C    REWIND specified, from current pos'n on tape if not
C
 	GETCOMLIN = DCL_QUAL ('SELECT', SELECT, LOCAL, LOCNEG, .TRUE.)
	IF (.NOT.GETCOMLIN) GOTO 70
C
        IF (.NOT.SELECT) THEN                      ! copy all files
           CPYALL = .TRUE.
           GOTO 70 
        ELSE                                       ! qualifier present
C
C  check for presence of list values
C
           GETCOMLIN = DCL_INT ('SELECT', .TRUE.)
           IF (.NOT.GETCOMLIN) GOTO 70
C
           IF (NUMINT.EQ.0) THEN                   ! copy next file
              FILENO = 1
              SKIPTO(1) = 1
              SKIP = .TRUE.
              SERNUM = .TRUE.
              GOTO 70
           ELSE                                    ! values present
C
C  list of files to copy
C
              FILENO = NUMINT
C
              DO 50 I = 1, NUMINT
                 IF (IARRAY(I).LE.0) THEN
                    CALL LSL_PUTMSG (CEDD2I__INVALIDNUM, IARRAY(I))
                    INVAL = .TRUE.
                    GOTO 70
                 ENDIF
                 SKIPTO(I) = IARRAY(I)
50            CONTINUE
C
              REWIND = .TRUE.         ! for numbers to be sensible
              SKIP =   .TRUE.         ! skipping files
              SERNUM = .TRUE.         ! searching by number
           ENDIF
        ENDIF
C
C  now /DUMP
C
	GETCOMLIN = DCL_QUAL ('DUMP'	! qual. name
     &     	,DUMP          		! returned .T. if qual. found
     &          ,LOCAL 		  	! .T. if qual local to parameter
     &		,LOCNEG   	  	! .T. if qual locally negated
     &         ,.TRUE.)          	! .T.-local error reporting
	IF (.NOT.GETCOMLIN) GOTO 70	! return
C
C  check for /DUMP = filespec
C
	IF (DUMP) THEN    	  
	  GETCOMLIN = DCL_FILE ('DUMP'	! label
     &	            ,'CEDDDUMP.LIS'	! default filespec
     &	            , ABSENT		! .T. if absent
     &	            ,.FALSE.      	! don't expect DUMP of files
     &              ,.TRUE.)      	! .T.-local error reporting
C
	  IF (.NOT.GETCOMLIN) GOTO 70	! return
C
	  IF (.NOT.ABSENT) THEN		! File specified
            DUMPFILE = FILARY(1) (1:FIL_LEN(1))
	    DUMPLEN = FIL_LEN(1)
	  ELSE
	    DUMPFILE = 'SYS$OUTPUT'
	    DUMPLEN = 10
	  ENDIF
	ENDIF
C
70      IF (DIAG .OR. .NOT.GETCOMLIN) THEN
           RETVAL = DCL_CML (STRING, CMDLEN, .TRUE.)
           CALL WRITEF
           CALL WRITEF ('.Command line was: %S', STRING(:CMDLEN))
           CALL WRITEF
        ENDIF
C
        IF (GETCOMLIN) THEN
           IF (.NOT.INVAL) GETCOMLIN = LSL__NORMAL
        ELSE
           CALL LSL_PUTMSG (GETCOMLIN)
        ENDIF
C
	RETURN
	END
C
