C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-09-01 18:47:24.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        LOGICAL FUNCTION FEATUR
C
***	IDENT	01SE88
***	MODULE	FEATUR
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author J Barber, 9 June 1988
C
C This subroutine reads the FEAture records which it expects to find 
C  in BYTBUF, and outputs the info to an intermediate IFF file, 
C  awaiting the reading of the SEGment records
C
C At any stage the feature record reading may cross a record/block
C  boundary, hence the MOD(1972) checking
C
C TRUE for success
C
C Features contain:
C
C    NF (no. of segments, ISN)
C    FS (ISTAT (P,L,A) )
C    AC's
C    ST (segment ID's)
C    EF
C
	IMPLICIT NONE
C
***     PARAMETER/HERE:CEDD2IMSG/
***     COMMON/LSL$CMNIFF:IFFHAN/
***     COMMON/HERE:BUFFER/
***     COMMON/HERE:DESCR/
***     COMMON/HERE:SCRIPT/
***     COMMON/HERE:STATE/
***	COMMON/HERE:PARAMS/	        ! for DIAG
***     COMMON/HERE:FTRHED/             ! for feature header
C
C functions called
C
        INTEGER         READSTR
        LOGICAL         RDLONG          ! read numbers
        LOGICAL         RDINT
        LOGICAL         STRTIF          ! open file
        LOGICAL         FTRHDR          ! feature header
C
C workspace
C
        INTEGER         CHKSUM
        INTEGER         RETVAL, CHRLEN
        INTEGER*2       HDRSIZ          ! 40*HDRCNT
	INTEGER*2	DCP1,DCP2       ! decode pointer save
	INTEGER*2	PTR		! locally saved pointer
        INTEGER*2       RESTRT
        INTEGER*2       I               ! loop counter
        INTEGER*2       ZERO
        INTEGER*2       ONE  
        INTEGER*2       FSN 
        INTEGER*2       NPTS
C
        INTEGER         MISSED
        INTEGER         COUNT           ! feature count
        INTEGER         DIFF
        INTEGER         STCNT           ! segment count
        INTEGER         LASTID
        INTEGER         FEATID          ! feature ID number
        INTEGER         SGMTID          ! segment ID numbers
        INTEGER         SEGNUM          ! no of segments
        INTEGER         INT_SEGDIR
C
        LOGICAL         JNKFTR          ! feature to be ignored?
        LOGICAL         MISFTR          ! feature to be deleted?
C
        CHARACTER*1     FTRTYP          ! feature type - P, L, A
        CHARACTER*1     SEGDIR          ! segment directions
	CHARACTER*25	TITLE		! for DIAG
C
        INTEGER*2       ISTAT(4)
        DATA            ISTAT /0,0,0,0/
        REAL            STARRY(2,200)   ! replaces STBUF
C
        BYTE            DELETE
        DATA            DELETE /Z7F/
C
C  *************************************************************
C  assume success
C
        FEATUR = .TRUE.
C
        COUNT  = 0
        MISSED = 0
        DIFF   = 0
C
C  open intermed IFF file
C
        IF (.NOT.STRTIF (FEALUN, FEANAM)) THEN
           CALL LSL_PUTMSG (CEDD2I__STRTIFERR, FEANAM(:TMPLEN))
           FEATUR = .FALSE.
           GOTO 999                     ! and give up
        ENDIF
C
        CALL OUTHDR (.FALSE.)           ! for header stuff
C
C  put layer number = IFF file unit no.
C
        CALL OUTLAY (FEALUN)            ! open layer
C
C   start reading the feature records
C
100     CALL DCPSAV (DCP1)
C
        INFTR = .FALSE.
        MISFTR = .FALSE.
        JNKFTR = .FALSE.
C
C   unique feature reference number
C
	CALL SETWIN ( , 6)	
C
        TITLE = 'Feature ID Number'
C
        FEATID = 0
	IF (RDLONG (FEATID)) THEN
           IF (DELFND) THEN
              CALL WRITEF
              CALL WRITEF (' End of Feature record at %S %N',
     &                                             TITLE, LASTID)
              GOTO 999
           ENDIF
           IF (BLKERR) THEN
              CALL LSL_PUTMSG (CEDD2I__UNEXPEND, TITLE, DCP1)
              FEATUR = .FALSE.
              GOTO 999
           ENDIF
C unable to read field in FEA block; outputting zero
	   FEATID = 0
   	   CALL LSL_PUTMSG (CEDD2I__FEAPUT0, TITLE, DCP1)
	ELSE 
           LASTID = FEATID
	ENDIF
C
        RESTRT = DCP1+6
        IF (RESTRT.GT.1980) RESTRT = MOD (RESTRT, 1972)
        CALL SETWIN (RESTRT, )
C
        IF (DIAG) CALL WRITEF ('.%S %N', TITLE, FEATID)
C
C  feature type - P, L, A
C
        CALL DCPSAV (PTR)
        CHKSUM = DCP1+6
        IF (PTR.NE.CHKSUM .AND. PTR.NE.CHKSUM-1972) THEN
           CALL LSL_PUTMSG (CEDD2I__FEACNTERR, TITLE, PTR)
           FEATUR = .FALSE.
           GOTO 999
        ENDIF
        CALL SETWIN ( , 1)
C
        TITLE = 'Feature Type'
C
        FTRTYP = ' '
        CHRLEN = READSTR (FTRTYP, DELETE, , .FALSE., RETVAL)
C
        IF (DELFND.OR.BLKERR) THEN
           CALL LSL_PUTMSG (CEDD2I__UNEXPEND, TITLE, PTR)
           FEATUR = .FALSE.
           GOTO 999
        ELSEIF (CHRLEN.LT.1) THEN
           CALL LSL_PUTMSG (CEDD2I__FEALENERR, TITLE, PTR, CHRLEN)
           RESTRT = PTR+1
           IF (RESTRT.GT.1980) RESTRT = MOD (RESTRT, 1972)
	   CALL SETWIN (RESTRT, )
        ELSEIF (.NOT.RETVAL) THEN
           CALL LSL_PUTMSG (CEDD2I__FEARDCHERR, TITLE, PTR)
           CALL LSL_PUTMSG (RETVAL)
           RESTRT = PTR+1
           IF (RESTRT.GT.1980) RESTRT = MOD (RESTRT, 1972)
	   CALL SETWIN (RESTRT, )
        ENDIF
C
        IF (FULL_DIAG) CALL WRITEF ('.%S %S', TITLE, FTRTYP)
C
        IF (FTRTYP.EQ.'P') THEN
           ISTAT(1) = SYMSTR
        ELSEIF (FTRTYP.EQ.'L') THEN
           ISTAT(1) = LINE
        ELSEIF (FTRTYP.EQ.'A') THEN
           ISTAT(1) = AREA
        ELSE                            ! unknown feature type
           CALL LSL_PUTMSG (CEDD2I__FTRTYPERR, FTRTYP, FEATID, PTR)
           IF (DIAG) CALL WRITEF ('.Ignoring this feature')
           JNKFTR = .TRUE.
        ENDIF
C
C   number of header blocks (currently 4)
C
        CALL DCPSAV (PTR)
        CHKSUM = DCP1+7
        IF (PTR.NE.CHKSUM .AND. PTR.NE.CHKSUM-1972) THEN
           CALL LSL_PUTMSG (CEDD2I__FEACNTERR, TITLE, PTR)
           FEATUR = .FALSE.
           GOTO 999
        ENDIF
	CALL SETWIN ( , 2)	
C
        TITLE = 'Header Record Count'
C
        HDRCNT = 0
	IF (RDINT (HDRCNT)) THEN
           IF (DELFND.OR.BLKERR) THEN
              CALL LSL_PUTMSG (CEDD2I__UNEXPEND, TITLE, PTR)
              FEATUR = .FALSE.
              GOTO 999
           ENDIF
C unable to read field in FEA block; outputting value of 4
	   HDRCNT = 4
   	   CALL LSL_PUTMSG (CEDD2I__HDREQTO4, FEATID, PTR)
	ENDIF
C
        RESTRT = PTR+2
        IF (RESTRT.GT.1980) RESTRT = MOD (RESTRT, 1972)
        CALL SETWIN (RESTRT, )
C
        IF (FULL_DIAG) CALL WRITEF ('.%S %^W%N', TITLE, HDRCNT)
C
C  if wrong no. of header blocks, then FTRHDR will fail to read all
C    of them if >6, or not give FACS code if <2
C
        IF ((HDRCNT.LT.2) .OR. (HDRCNT.GT.6)) THEN
           CALL LSL_PUTMSG (CEDD2I__HDRCNTERR, HDRCNT, FEATID, PTR)
        ENDIF
C
C  feature header records
C
        CALL DCPSAV (PTR)
        CHKSUM = DCP1+9
        IF (PTR.NE.CHKSUM .AND. PTR.NE.CHKSUM-1972) THEN
           CALL LSL_PUTMSG (CEDD2I__FEACNTERR, TITLE, PTR)
           FEATUR = .FALSE.
           GOTO 999
        ENDIF
C
        HDRSIZ = 40*HDRCNT

C  read feature header blocks into FTRHED common
C
        TITLE = 'Feature Header Records'
C
        IF (.NOT.FTRHDR()) THEN                   ! error reading hdr
           CALL LSL_PUTMSG (CEDD2I__FTRHDRERR)    ! blocks, & no AC's?
           IF (DELFND.OR.BLKERR) THEN
              CALL LSL_PUTMSG (CEDD2I__UNEXPEND, TITLE, PTR)
              FEATUR = .FALSE.
              GOTO 999
           ENDIF
           IF (DIAG) CALL WRITEF ('.Ignoring this feature')
           JNKFTR = .TRUE.
           RESTRT = PTR+HDRSIZ
           IF (RESTRT.GT.1980) RESTRT = MOD (RESTRT, 1972)
	   CALL SETWIN (RESTRT, )
        ENDIF
C
        IF (.NOT.FACSOK) THEN
           JNKFTR = .TRUE.        ! feature useless without FACS
           IF (DIAG) CALL WRITEF ('.Ignoring this feature - no FACS')
        ENDIF
C
C   number of segments assoc with feature
C
200     CALL DCPSAV (PTR)
        CHKSUM = DCP1+9+HDRSIZ
        IF (PTR.NE.CHKSUM .AND. PTR.NE.CHKSUM-1972) THEN
           CALL LSL_PUTMSG (CEDD2I__FEACNTERR, TITLE, PTR)
           FEATUR = .FALSE.
           GOTO 999
        ENDIF
	CALL SETWIN ( , 3)	
C
        TITLE = 'Segment Count'
C
        SEGNUM = 0
	IF (RDLONG (SEGNUM)) THEN
           IF (DELFND.OR.BLKERR) THEN
              CALL LSL_PUTMSG (CEDD2I__UNEXPEND, TITLE, PTR)
              FEATUR = .FALSE.
              GOTO 999
           ENDIF
C unable to read field in FEA block; outputting value of 1
	   SEGNUM = 1
   	   CALL LSL_PUTMSG (CEDD2I__FEAPUT1, TITLE, PTR)
	ENDIF
C
        RESTRT = PTR+3
        IF (RESTRT.GT.1980) RESTRT = MOD (RESTRT, 1972)
        CALL SETWIN (RESTRT, )
C
        IF (FULL_DIAG) THEN
           CALL WRITEF ('.%S %N', TITLE, SEGNUM)
           CALL WRITEF
        ENDIF
C
        CALL DCPSAV (PTR)
        CHKSUM = DCP1+12+HDRSIZ
        IF (PTR.NE.CHKSUM .AND. PTR.NE.CHKSUM-1972) THEN
           CALL LSL_PUTMSG (CEDD2I__FEACNTERR, TITLE, PTR)
           FEATUR = .FALSE.
           GOTO 999
        ENDIF
C
        IF (JNKFTR) GOTO 240
C
C  now the IFF stuff
C
        COUNT = COUNT + 1               ! no. of features usable
C
        FSN = SEGNUM                    ! store no. of segments
        ZERO = 0
        CALL IFFNF (FSN, ZERO)          ! fsn = no. of segments
        INFTR = .TRUE.
        ISNSUM = ZERO
C
C  calculate available no. of features left after layer 0 in main IFF
C
C        IF (ZERO.EQ.65535 - ISNSUM) THEN           ! no more features
C           CALL LSL_PUTMSG (CEDD2I__LASTFEATURE)   !    allowed
C           LSTFTR = .TRUE.                         ! last one
C        ENDIF
C
        CALL IFFFS (ISTAT)
C
        CALL LAYER1                     ! output feature AC's
C
C   reset BYTBUF and decode pointers
C
        CALL SETAUX (BYTBUF, BUFLEN)
        CALL DCPSET (PTR)
C
C   segment direction and ID for each segment assoc with feature
C     read 200 at a time
C
240     STCNT = 0
C
250     CALL DCPSAV (DCP2)
C
        DO 300 I = 1,200
C
        STCNT = STCNT + 1
C
        CALL DCPSAV (PTR)
        CHKSUM = DCP2+7*(I-1)
        IF (PTR.NE.CHKSUM .AND. PTR.NE.CHKSUM-1972) THEN
           CALL LSL_PUTMSG (CEDD2I__FEACNTERR, TITLE, PTR)
           CALL IFFDEL
           INFTR = .FALSE.
           CALL LSL_PUTMSG (CEDD2I__FEAABANDON, COUNT)
           COUNT = COUNT - 1
           MISSED = MISSED + 1
           FEATUR = .FALSE.
           GOTO 999
        ENDIF
        CALL SETWIN ( , 1)
C
        TITLE = 'Segment Direction'
C
        SEGDIR = ' '
        CHRLEN = READSTR (SEGDIR, DELETE, , .FALSE., RETVAL)
C
        IF (DELFND.OR.BLKERR) THEN
           CALL LSL_PUTMSG (CEDD2I__UNEXPEND, TITLE, PTR)
           FEATUR = .FALSE.
           CALL IFFDEL
           INFTR = .FALSE.
           CALL LSL_PUTMSG (CEDD2I__FEAABANDON, COUNT)
           COUNT = COUNT - 1
           MISSED = MISSED + 1
           GOTO 999
        ELSEIF (CHRLEN.LT.1) THEN
           CALL LSL_PUTMSG (CEDD2I__FEALENERR, TITLE, PTR, CHRLEN)
           RESTRT = PTR+1
           IF (RESTRT.GT.1980) RESTRT = MOD (RESTRT, 1972)
	   CALL SETWIN (RESTRT, )
        ELSEIF (.NOT.RETVAL) THEN
           CALL LSL_PUTMSG (CEDD2I__FEARDCHERR, TITLE, PTR)
           CALL LSL_PUTMSG (RETVAL)
           RESTRT = PTR+1
           IF (RESTRT.GT.1980) RESTRT = MOD (RESTRT, 1972)
	   CALL SETWIN (RESTRT, )
        ENDIF
C
        IF (FULL_DIAG) CALL WRITEF ('.%S %S', TITLE, SEGDIR)
C
C   convert to integer representations
C
        IF (SEGDIR.EQ.'F') THEN
           INT_SEGDIR = FORWARD
        ELSEIF (SEGDIR.EQ.'R') THEN
           INT_SEGDIR = REVERSE
        ELSEIF (SEGDIR.EQ.'D') THEN
           INT_SEGDIR = DISJOINT
        ELSEIF (SEGDIR.EQ.'E') THEN
           INT_SEGDIR = DISJOINT_REV
        ELSEIF (SEGDIR.EQ.'I') THEN
           INT_SEGDIR = INSIDE
        ELSEIF (SEGDIR.EQ.'J') THEN
           INT_SEGDIR = INSIDE_REV
        ENDIF
C
C   unique segment reference number
C
        CALL DCPSAV (PTR)
        CHKSUM = DCP2+7*(I-1)+1
        IF (PTR.NE.CHKSUM .AND. PTR.NE.CHKSUM-1972) THEN
           CALL LSL_PUTMSG (CEDD2I__FEACNTERR, TITLE, PTR)
           CALL IFFDEL
           INFTR = .FALSE.
           CALL LSL_PUTMSG (CEDD2I__FEAABANDON, COUNT)
           COUNT = COUNT - 1
           MISSED = MISSED + 1
           FEATUR = .FALSE.
           GOTO 999
        ENDIF
	CALL SETWIN ( , 6)	
C
        TITLE = 'Segment ID Number'
C
        SGMTID = 0
	IF (RDLONG (SGMTID)) THEN
           IF (DELFND.OR.BLKERR) THEN
              CALL LSL_PUTMSG (CEDD2I__UNEXPEND, TITLE, PTR)
              FEATUR = .FALSE.
              CALL IFFDEL
              INFTR = .FALSE.
              CALL LSL_PUTMSG (CEDD2I__FEAABANDON, COUNT)
              COUNT = COUNT - 1
              MISSED = MISSED + 1
              GOTO 999
           ENDIF
C unable to read field in FEA block; outputting 0
           SGMTID = 0
   	   IF (DIAG) CALL LSL_PUTMSG (CEDD2I__FEAPUT0, TITLE, PTR)
C feature useless without ALL segment ID's
           MISFTR = .TRUE.           ! delete it at end of ID's
	ENDIF
C
        RESTRT = PTR+6
        IF (RESTRT.GT.1980) RESTRT = MOD (RESTRT, 1972)
        CALL SETWIN (RESTRT, )
C
        IF (FULL_DIAG) CALL WRITEF ('.%S %N', TITLE, SGMTID)
C
        CALL DCPSAV (PTR)
        CHKSUM = DCP2+7*I
        IF (PTR.NE.CHKSUM .AND. PTR.NE.CHKSUM-1972) THEN
           CALL LSL_PUTMSG (CEDD2I__FEACNTERR, TITLE, PTR)
           CALL IFFDEL
           INFTR = .FALSE.
           CALL LSL_PUTMSG (CEDD2I__FEAABANDON, COUNT)
           COUNT = COUNT - 1
           MISSED = MISSED + 1
           FEATUR = .FALSE.
           GOTO 999
        ENDIF
C
C  use ST array to hold SEG reference ID's, and directions
C
C  STARRY here is a 2x200 array for reading the ID's and directions
C    into it as they are read
C
        STARRY(1,I) = SGMTID
        STARRY(2,I) = INT_SEGDIR
C
        IF (STCNT.EQ.SEGNUM) THEN           ! segments finished
C                                           !   stop reading
           IF (MISFTR.OR.JNKFTR) GOTO 950   ! dont bother with 
C                                           !   segments in ST's
           NPTS = I
           GOTO 400
        ENDIF
C
300     CONTINUE
C
        NPTS = 200
C
C  more IFF stuff
C
C  use ST array to hold SEG reference ID's and directions
C
400     ZERO = 0
        CALL IFFST (STARRY, NPTS, ZERO)
C
        IF (STCNT.LT.SEGNUM) GOTO 250          ! get some more
C
        IF (INFTR) CALL IFFEF
C
        IF (DIAG) THEN
           CALL WRITEF
           CALL WRITEF ('.Feature %^W%N completed', ISNSUM)
           CALL WRITEF
        ENDIF
C
950     IF (MISFTR) THEN
           CALL IFFDEL
           INFTR = .FALSE.
           CALL LSL_PUTMSG (CEDD2I__FEAABANDON, COUNT)
           COUNT = COUNT - 1
           MISSED = MISSED + 1
           GOTO 100
        ENDIF
C
        GOTO 100
C
999     IF (INFTR) CALL IFFEF
        IF (INLAY (FEALUN)) CALL ENDLAY (FEALUN)        ! end layer
C
        CALL WRITEF
        CALL WRITEF (' %N features successfully read', COUNT)
        CALL WRITEF (' %N features abandoned', MISSED)
        CALL WRITEF
C
C        IF (TOTFTR.GT.0 .AND. COUNT.NE.TOTFTR) THEN
C           DIFF = TOTFTR - COUNT
C           CALL LSL_PUTMSG (CEDD2I__FTRMISSED, DIFF)
C           CALL WRITEF
C        ENDIF
C
        CALL IFFRWD           ! rewind feature IFF file to beginning
C
        RETURN
        END
C
