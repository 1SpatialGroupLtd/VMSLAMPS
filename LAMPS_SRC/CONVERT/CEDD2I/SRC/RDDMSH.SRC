C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-08-31 16:08:22.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION RDDMSH (ISLAT, OUT, INTOUT, TITLE)
C
***	IDENT	31AU88
***	MODULE	RDDMSH
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author J Barber, 18 May 1988
C
C This function converts (D)DDMMSSSSH into IFF units
C
C   the units of the file:
C      MD2UNT = 110   arcsec/10
C             = 3     arcsec
C             = 4     degrees
C
C It also passes back the intger hundredths of seconds
C
C   TRUE for success
C
	IMPLICIT NONE
C
        LOGICAL         ISLAT
        REAL*8          OUT             ! result in IFF units
        INTEGER         INTOUT          ! arcsec/100
        CHARACTER*25    TITLE
C
***     PARAMETER/HERE:CEDD2IMSG/
***     COMMON/LSL$CMNIFF:MD2DES/
***     COMMON/HERE:STATE/
***     COMMON/HERE:PARAMS/
C
C  functions called
C
        LOGICAL         DSI_READ_LONG   ! read numbers
        LOGICAL         DSI_READ_STRING ! read string
C
C workspace
C
        INTEGER         DEGREE
        INTEGER         MINUTE
        INTEGER         HUNSEC          ! arcsec/100
        INTEGER         CHKSUM
C
        INTEGER*2       XY
	INTEGER*2	PTR,DCP1        ! locally saved ptr
        INTEGER*2       RESTRT
        INTEGER*2       LEN
C
        REAL            SECOND          ! arcsec
C
        CHARACTER*1     HEMIS           ! hemisphere char
        LOGICAL         JNKDMS
C
C *******************************************************
C be optimistic initially
C
	RDDMSH = .TRUE.
        JNKDMS = .FALSE.
        OUT = 0D0
        INTOUT = 0
C
        DEGREE = 0
        MINUTE = 0
        HUNSEC = 0
        SECOND = 0.0
        HEMIS = ' '
C
        CALL DCPSAV (DCP1)
C
        IF (ISLAT) THEN
           LEN = 2
           XY = 2
        ELSE
           LEN = 3
           XY = 1
        ENDIF
C
        IF (.NOT.DSI_READ_LONG (LEN, DEGREE, TITLE, -1)) THEN
           RDDMSH = .FALSE.
           GOTO 999
        ENDIF
C
        IF (RDLONGERR) THEN
           IF (DIAG) CALL LSL_PUTMSG (CEDD2I__RDDEGERR)
           JNKDMS = .TRUE.
           DEGREE = 0
	ENDIF
C
        CALL DCPSAV (PTR)
        IF (ISLAT) THEN
           IF ((DEGREE.LT.0) .OR. (DEGREE.GT.90)) THEN
              CALL LSL_PUTMSG (CEDD2I__DMSDEGERR, DEGREE)
              DEGREE = 0
              JNKDMS = .TRUE.
           ENDIF
        ELSE
           IF ((DEGREE.LT.0) .OR. (DEGREE.GT.180)) THEN
              CALL LSL_PUTMSG (CEDD2I__DMSDEGERR, DEGREE)         
              DEGREE = 0
              JNKDMS = .TRUE.
           ENDIF
        ENDIF
C
        CHKSUM = DCP1+LEN
        IF ((PTR.NE.CHKSUM) .AND. (PTR.NE.CHKSUM-1972)) THEN
           CALL LSL_PUTMSG (CEDD2I__DMSCNTERR, PTR)
           RDDMSH = .FALSE.
           GOTO 999
        ENDIF
C
        IF (.NOT.DSI_READ_LONG (2, MINUTE, TITLE, -1)) THEN
           RDDMSH = .FALSE.
           GOTO 999
        ENDIF
C
        IF (RDLONGERR) THEN
           IF (DIAG) CALL LSL_PUTMSG (CEDD2I__RDMINERR)
           MINUTE = 0
           JNKDMS = .TRUE.
	ENDIF
C
        IF ((MINUTE.LT.0) .OR. (MINUTE.GT.60)) THEN
           CALL LSL_PUTMSG (CEDD2I__DMSMINERR, MINUTE)         
           JNKDMS = .TRUE.
           MINUTE = 0
        ENDIF
C
        CALL DCPSAV (PTR)
        CHKSUM = DCP1+LEN+2
        IF ((PTR.NE.CHKSUM) .AND. (PTR.NE.CHKSUM-1972)) THEN
           CALL LSL_PUTMSG (CEDD2I__DMSCNTERR, PTR)
           RDDMSH = .FALSE.
           GOTO 999
        ENDIF
C
        IF (.NOT.DSI_READ_LONG (4, HUNSEC, TITLE, -1)) THEN
           RDDMSH = .FALSE.
           GOTO 999
        ENDIF
C
        IF (RDLONGERR) THEN
           IF (DIAG) CALL LSL_PUTMSG (CEDD2I__RDSECERR)
           JNKDMS = .TRUE.
           HUNSEC = 0
	ENDIF
C
        IF ((HUNSEC.LT.0) .OR. (HUNSEC.GT.6000)) THEN
           CALL LSL_PUTMSG (CEDD2I__DMSSECERR, HUNSEC)         
           JNKDMS = .TRUE.
           HUNSEC = 0
        ENDIF
C
        CALL DCPSAV (PTR)
        CHKSUM = DCP1+LEN+6
        IF ((PTR.NE.CHKSUM) .AND. (PTR.NE.CHKSUM-1972)) THEN
           CALL LSL_PUTMSG (CEDD2I__DMSCNTERR, PTR)
           RDDMSH = .FALSE.
           GOTO 999
        ENDIF
C
        IF (.NOT.JNKDMS) INTOUT = DEGREE * 360000
     &                       + MINUTE * 6000 + HUNSEC
C
        IF (.NOT.DSI_READ_STRING (1, HEMIS, TITLE, -1)) THEN
           RDDMSH = .FALSE.
           GOTO 999
        ENDIF
C
        IF (RDSTRERR) THEN
           IF (DIAG) CALL LSL_PUTMSG (CEDD2I__RDNSEWERR)
           HEMIS = ' '
        ENDIF
C
        IF (ISLAT) THEN
           IF (HEMIS.EQ.'S') THEN
              INTOUT = -INTOUT
           ELSEIF (HEMIS.NE.'N') THEN
              CALL LSL_PUTMSG (CEDD2I__DMSNSERR, HEMIS)
           ENDIF
        ELSE
           IF (HEMIS.EQ.'W') THEN
              INTOUT = -INTOUT
           ELSEIF (HEMIS.NE.'E') THEN
              CALL LSL_PUTMSG (CEDD2I__DMSEWERR, HEMIS)
           ENDIF
        ENDIF
C  
        SECOND = HUNSEC/100.0
C
C   convert to IFF file units and origin
C
        IF (MD2UNT.EQ.110) THEN             ! arcsec/10
           OUT = INTOUT/10D0 - MD2LOC(XY)
        ELSEIF (MD2UNT.EQ.3) THEN           ! arcsecs
           OUT = INTOUT/100D0 - MD2LOC(XY)
        ELSEIF (MD2UNT.EQ.4) THEN           ! degrees
           OUT = INTOUT/360000D0 - MD2LOC(XY)
        ELSE
           CALL LSL_PUTMSG (CEDD2I__DMSCOORDERR, MD2UNT)
           OUT = 0D0
        ENDIF
C
        CALL DCPSAV (PTR)
        CHKSUM = DCP1+LEN+7
        IF ((PTR.NE.CHKSUM) .AND. (PTR.NE.CHKSUM-1972)) THEN
           CALL LSL_PUTMSG (CEDD2I__DMSCNTERR, PTR)
           RDDMSH = .FALSE.
           GOTO 999
        ENDIF
C
999     IF (FULL_DIAG) THEN
           CALL WRITEF
     &         ('.%S %P %I4%I4%F7.2 %S   (%N arcsec/100)',
     &             TITLE, DEGREE, MINUTE, SECOND, HEMIS, INTOUT)
        ENDIF
C
C   prepare for failure exit
C
        IF (.NOT.RDDMSH) THEN
           CALL LSL_PUTMSG (CEDD2I__DMSCONVERR, TITLE, DCP1)
           INTOUT = 0
           OUT = 0D0
C
           RESTRT = DCP1+LEN+7
           IF (RESTRT.GT.1980) RESTRT = MOD (RESTRT, 1972)
           CALL SETWIN (RESTRT, )
        ENDIF
C
	RETURN
	END
C
