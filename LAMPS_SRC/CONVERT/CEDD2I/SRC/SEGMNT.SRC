        LOGICAL FUNCTION SEGMNT
C
***	IDENT	06SE88
***	MODULE	SEGMNT
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author J Barber, 10 June 1988
C
C This subroutine reads the SEGment records which it expects to find 
C  in BYTBUF, and outputs the info to an intermediate IFF file, 
C  to be combined with the FEAture IFF file into the final one
C Features contain:
C
C     NF (no. of ST/ZS entries, ISN)
C     ST/ZS  coordinates
C     EF
C
	IMPLICIT NONE
C
***     PARAMETER/HERE:CEDD2IMSG/
***     COMMON/LSL$CMNIFF:IFFHAN/
***     COMMON/HERE:STATE/
***     COMMON/HERE:SCRIPT/
***     COMMON/HERE:DESCR/
***	COMMON/HERE:PARAMS/	        ! for DIAG
C
C functions called
C
        INTEGER         READSTR
        LOGICAL         RDLONG          ! read numbers
        LOGICAL         RDREAL
        LOGICAL         RDINT
        LOGICAL         STRTIF
C
C workspace
C
        INTEGER         CHKSUM
        INTEGER         RETVAL, CHRLEN
	INTEGER*2	DCP1,DCP2       ! decode pointer save
	INTEGER*2	PTR		! locally saved pointer
        INTEGER*2       RESTRT
        INTEGER*2       I               ! loop counter
        INTEGER*2       ZERO
        INTEGER*2       NPTS
        INTEGER*2       FSN
C
        REAL            ZSBUF(3,200)    ! for real coordinates
        REAL            STBUF(2,200)
        REAL            OLDRAN(4)       ! old Range
C
        INTEGER         SGMTID          ! segment ID number
        INTEGER         FEATID          ! feature ID number
        INTEGER         PNTCNT          ! point count
        REAL            XVALUE
        REAL            YVALUE
        INTEGER         ZVALUE
        REAL            LASTX
        REAL            LASTY
        INTEGER         LASTID
        INTEGER         FEANUM          ! no. of features used
        INTEGER         MISSED          ! no. of features lost
        INTEGER         COUNT           ! running segment count
        INTEGER         DIFF
        INTEGER         STCNT           ! running point count
C
        LOGICAL         JNKSEG          ! segment not started?
        LOGICAL         MISSEG          ! segment to be deleted?
        LOGICAL         JNKPNT          ! useless point?
C
        CHARACTER*1     ORIENT          ! segment orient - C, L, R
	CHARACTER*25	TITLE		! for TITLE 
C
        BYTE            DELETE
        DATA            DELETE /Z7F/
C
C  ***************************************************************
C assume success
C
        SEGMNT = .TRUE.
C
        COUNT  = 0
        MISSED = 0
        DIFF   = 0
C
        DO 50 I = 1,4
        OLDRAN(I) = RANGE(I)
50      CONTINUE
C
        IF (.NOT.STRTIF (SEGLUN, SEGNAM)) THEN
           CALL LSL_PUTMSG (CEDD2I__STRTIFERR, SEGNAM(:TMPLEN))
           SEGMNT = .FALSE.
           GOTO 999
        ENDIF
C
        CALL OUTHDR (.FALSE.)         ! for header stuff
C
        CALL OUTLAY (SEGLUN)          ! open layer no. = 
C                                     !   file unit number
100     CALL DCPSAV (DCP1)
C
        INFTR = .FALSE.
        MISSEG = .FALSE.
        JNKSEG = .FALSE.
        XVALUE = 0.0
        YVALUE = 0.0
        ZVALUE = 0
C
C   unique segment reference number
C
	CALL SETWIN ( , 6)	
C
        TITLE = 'Segment ID Number'
C
        SGMTID = 0
	IF (RDLONG (SGMTID)) THEN
           IF (DELFND) THEN
              CALL WRITEF
              CALL WRITEF (' End of Segment record at %S %N',
     &                                              TITLE, LASTID)
              CALL WRITEF
              GOTO 999
           ENDIF
           IF (BLKERR) THEN
              CALL LSL_PUTMSG (CEDD2I__UNEXPEND, TITLE, DCP1)
              SEGMNT = .FALSE.
              GOTO 999
           ENDIF
C unable to read field in SEG block; outputting zero
	   SGMTID = 0
   	   CALL LSL_PUTMSG (CEDD2I__SEGPUT0, TITLE, DCP1)
           JNKSEG = .TRUE.            ! segment useless without ID
	ELSE 
           LASTID = SGMTID
	ENDIF
C
        RESTRT = DCP1+6
        IF (RESTRT.GT.1980) RESTRT = MOD (RESTRT, 1972)
        CALL SETWIN (RESTRT, )
C
        IF (DIAG) CALL WRITEF ('.%S %N', TITLE, SGMTID)
C
C   number of features to which segment belongs
C
        CALL DCPSAV (PTR)
        CHKSUM = DCP1+6
        IF (PTR.NE.CHKSUM .AND. PTR.NE.CHKSUM-1972) THEN
           CALL LSL_PUTMSG (CEDD2I__SEGCNTERR, TITLE, PTR)
           SEGMNT = .FALSE.
           GOTO 999
        ENDIF
	CALL SETWIN ( , 2)	
C
        TITLE = 'Feature Count'
C
        FEANUM = 0
	IF (RDLONG (FEANUM)) THEN
           IF (BLKERR.OR.DELFND) THEN
              CALL LSL_PUTMSG (CEDD2I__UNEXPEND, TITLE, PTR)
              SEGMNT = .FALSE.
              GOTO 999
           ENDIF
C unable to read field in SEG block; outputting 1
	   FEANUM = 1
   	   IF (DIAG) CALL LSL_PUTMSG (CEDD2I__SEGPUT1, TITLE, PTR)
	ENDIF
C
        RESTRT = PTR+2
        IF (RESTRT.GT.1980) RESTRT = MOD (RESTRT, 1972)
        CALL SETWIN (RESTRT, )
C
        IF (FULL_DIAG) CALL WRITEF ('.%S %N', TITLE, FEANUM)
C
        CALL DCPSAV (PTR)
        CHKSUM = DCP1+8
        IF (PTR.NE.CHKSUM .AND. PTR.NE.CHKSUM-1972) THEN
           CALL LSL_PUTMSG (CEDD2I__SEGCNTERR, TITLE, PTR)
           SEGMNT = .FALSE.
           GOTO 999
        ENDIF
C
C   feature ID and orient for each feature to which segment belongs
C
        DO 200 I = 1, FEANUM
C
        CALL DCPSAV (PTR)
        CHKSUM = DCP1+8+7*(I-1)
        IF (PTR.NE.CHKSUM .AND. PTR.NE.CHKSUM-1972) THEN
           CALL LSL_PUTMSG (CEDD2I__SEGCNTERR, TITLE, PTR)
           SEGMNT = .FALSE.
           GOTO 999
        ENDIF
	CALL SETWIN ( , 6)	
C
        TITLE = 'Feature ID Number'
C
        FEATID = 0
	IF (RDLONG (FEATID)) THEN
           IF (BLKERR.OR.DELFND) THEN
              CALL LSL_PUTMSG (CEDD2I__UNEXPEND, TITLE, PTR)
              SEGMNT = .FALSE.
              GOTO 999
           ENDIF
C unable to read field in SEG block; outputting zero
	   FEATID = 0
   	   IF (DIAG) CALL LSL_PUTMSG (CEDD2I__SEGPUT0, TITLE, PTR)
	ENDIF
C
        RESTRT = PTR+6
        IF (RESTRT.GT.1980) RESTRT = MOD (RESTRT, 1972)
        CALL SETWIN (RESTRT, )
C
        IF (FULL_DIAG) CALL WRITEF ('.%S %N', TITLE, FEATID)
C
C  feature orient - C, L, R
C
        CALL DCPSAV (PTR)
        CHKSUM = DCP1+8+7*(I-1)+6
        IF (PTR.NE.CHKSUM .AND. PTR.NE.CHKSUM-1972) THEN
           CALL LSL_PUTMSG (CEDD2I__SEGCNTERR, TITLE, PTR)
           SEGMNT = .FALSE.
           GOTO 999
        ENDIF
        CALL SETWIN ( , 1)
C
        TITLE = 'Feature Orient'
C
        ORIENT = ' '
        CHRLEN = READSTR (ORIENT, DELETE,  , .FALSE., RETVAL)
C
        IF (DELFND.OR.BLKERR) THEN
           CALL LSL_PUTMSG (CEDD2I__UNEXPEND, TITLE, PTR)
           SEGMNT = .FALSE.
           GOTO 999
        ELSEIF (CHRLEN.LT.1) THEN
           CALL LSL_PUTMSG (CEDD2I__SEGLENERR, TITLE, PTR, CHRLEN)
           RESTRT = PTR+1
           IF (RESTRT.GT.1980) RESTRT = MOD (RESTRT, 1972)
	   CALL SETWIN (RESTRT, )
        ELSEIF (.NOT.RETVAL) THEN
           CALL LSL_PUTMSG (CEDD2I__SEGRDCHERR, TITLE, PTR)
           CALL LSL_PUTMSG (RETVAL)
           RESTRT = PTR+1
           IF (RESTRT.GT.1980) RESTRT = MOD (RESTRT, 1972)
	   CALL SETWIN (RESTRT, )
        ENDIF
C
        IF (FULL_DIAG) CALL WRITEF ('.%S %S', TITLE, ORIENT)
C
200     CONTINUE
C
        CALL DCPSAV (PTR)
        CHKSUM = DCP1+8+7*FEANUM
        IF (PTR.NE.CHKSUM .AND. PTR.NE.CHKSUM-1972) THEN
           CALL LSL_PUTMSG (CEDD2I__SEGCNTERR, TITLE, PTR)
           SEGMNT = .FALSE.
           GOTO 999
        ENDIF
	CALL SETWIN ( , 5)
C
C  point count for segment
C
        TITLE = 'Point Count'
C
        PNTCNT = 0
	IF (RDLONG (PNTCNT)) THEN
           IF (BLKERR.OR.DELFND) THEN
              CALL LSL_PUTMSG (CEDD2I__UNEXPEND, TITLE, PTR)
              SEGMNT = .FALSE.
              GOTO 999
           ENDIF
C unable to read field in SEG block; outputting 1
	   PNTCNT = 1
   	   IF (DIAG) CALL LSL_PUTMSG (CEDD2I__SEGPUT1, TITLE, PTR)
	ENDIF
C
        RESTRT = PTR+5
        IF (RESTRT.GT.1980) RESTRT = MOD (RESTRT, 1972)
        CALL SETWIN (RESTRT, )
C
        IF (FULL_DIAG) CALL WRITEF ('.%S %N', TITLE, PNTCNT)
C
        CALL DCPSAV (PTR)
        CHKSUM = DCP1+13+7*FEANUM
        IF (PTR.NE.CHKSUM .AND. PTR.NE.CHKSUM-1972) THEN
           CALL LSL_PUTMSG (CEDD2I__SEGCNTERR, TITLE, PTR)
           SEGMNT = .FALSE.
           GOTO 999
        ENDIF
C
        IF (JNKSEG) GOTO 250
C
        COUNT = COUNT + 1
C
        NFADDR (SGMTID) = LPOSE        ! store segment address
C
        FSN = (PNTCNT+199)/200         ! put no. of ST entries in 
        ZERO = 0                       !  segment into FSN
        CALL IFFNF (FSN, ZERO)
        INFTR = .TRUE.
C
250     STCNT = 0                      ! point count
C
300     DO 400 I = 1, 200
C
        STCNT = STCNT + 1
        JNKPNT = .FALSE.
C
        CALL DCPSAV (DCP2)
C
C   X, Y, (Z) values for segment, 200 at a time
C
	CALL SETWIN ( , 6)	
C
        TITLE = 'X Value'
C
        LASTX = XVALUE
	IF (RDREAL (XVALUE)) THEN
           IF (BLKERR.OR.DELFND) THEN
              CALL LSL_PUTMSG (CEDD2I__UNEXPEND, TITLE, DCP2)
              CALL IFFDEL
              INFTR = .FALSE.
              CALL LSL_PUTMSG (CEDD2I__SEGABANDON, COUNT)
              COUNT = COUNT - 1
              MISSED = MISSED + 1
              SEGMNT = .FALSE.
              GOTO 999
           ENDIF
C unable to read field in SEG block; use last x,y
           JNKPNT = .TRUE.
   	   IF (DIAG) CALL LSL_PUTMSG (CEDD2I__SEGPUTLST, TITLE, DCP2)
	ENDIF
C
        RESTRT = DCP2+6
        IF (RESTRT.GT.1980) RESTRT = MOD (RESTRT, 1972)
        CALL SETWIN (RESTRT, )
C
        CALL DCPSAV (PTR)
        CHKSUM = DCP2+6
        IF (PTR.NE.CHKSUM .AND. PTR.NE.CHKSUM-1972) THEN
           CALL LSL_PUTMSG (CEDD2I__SEGCNTERR, TITLE, PTR)
           CALL IFFDEL
           INFTR = .FALSE.
           CALL LSL_PUTMSG (CEDD2I__SEGABANDON, COUNT)
           COUNT = COUNT - 1
           MISSED = MISSED + 1
           SEGMNT = .FALSE.
           GOTO 999
        ENDIF
	CALL SETWIN ( , 6)	
C
        TITLE = 'Y Value'
C
        LASTY = YVALUE
	IF (RDREAL (YVALUE)) THEN
           IF (BLKERR.OR.DELFND) THEN
              CALL LSL_PUTMSG (CEDD2I__UNEXPEND, TITLE, PTR)
              CALL IFFDEL
              INFTR = .FALSE.
              CALL LSL_PUTMSG (CEDD2I__SEGABANDON, COUNT)
              COUNT = COUNT - 1
              MISSED = MISSED + 1
              SEGMNT = .FALSE.
              GOTO 999
           ENDIF
C unable to read field in SEG block; outputting last x,y
           JNKPNT = .TRUE.
   	   IF (DIAG) CALL LSL_PUTMSG (CEDD2I__SEGPUTLST, TITLE, PTR)
	ENDIF
C
        RESTRT = PTR+6
        IF (RESTRT.GT.1980) RESTRT = MOD (RESTRT, 1972)
        CALL SETWIN (RESTRT, )
C
        IF (JNKPNT) THEN
	   XVALUE = LASTX
           YVALUE = LASTY
        ENDIF
C
        IF (FULL_DIAG) THEN
           TITLE = 'X Value'
           CALL WRITEF ('.%S %F8.2', TITLE, XVALUE)
           TITLE = 'Y Value'
           CALL WRITEF ('.%S %F8.2', TITLE, YVALUE)
        ENDIF
C
        CALL DCPSAV (PTR)
        CHKSUM = DCP2+12
        IF (PTR.NE.CHKSUM .AND. PTR.NE.CHKSUM-1972) THEN
           CALL LSL_PUTMSG (CEDD2I__SEGCNTERR, TITLE, PTR)
           CALL IFFDEL
           INFTR = .FALSE.
           CALL LSL_PUTMSG (CEDD2I__SEGABANDON, COUNT)
           COUNT = COUNT - 1
           MISSED = MISSED + 1
           SEGMNT = .FALSE.
           GOTO 999
        ENDIF
C
        IF (THREED) THEN
           ZSBUF (1,I) = XVALUE * CONVN
           ZSBUF (2,I) = YVALUE * CONVN
C
           IF (.NOT.RNGSET) THEN
              RANGE(1) = ZSBUF(1,I)
              RANGE(2) = ZSBUF(1,I)
              RANGE(3) = ZSBUF(2,I)
              RANGE(4) = ZSBUF(2,I)
              RNGSET = .TRUE.
           ENDIF
C
           RANGE(1) = MIN (RANGE(1), ZSBUF(1,I))
           RANGE(2) = MAX (RANGE(2), ZSBUF(1,I))
           RANGE(3) = MIN (RANGE(3), ZSBUF(2,I))
           RANGE(4) = MAX (RANGE(4), ZSBUF(2,I))
C
        ELSE
           STBUF (1,I) = XVALUE * CONVN
           STBUF (2,I) = YVALUE * CONVN
C
           IF (.NOT.RNGSET) THEN
              RANGE(1) = STBUF(1,I)
              RANGE(2) = STBUF(1,I)
              RANGE(3) = STBUF(2,I)
              RANGE(4) = STBUF(2,I)
              RNGSET = .TRUE.
           ENDIF
C
           RANGE(1) = MIN (RANGE(1), STBUF(1,I))
           RANGE(2) = MAX (RANGE(2), STBUF(1,I))
           RANGE(3) = MIN (RANGE(3), STBUF(2,I))
           RANGE(4) = MAX (RANGE(4), STBUF(2,I))
           GOTO 350
        ENDIF
C
C  Z coordinates, only for THREED TRUE
C
        CALL SETWIN ( , 6)	
C
        TITLE = 'Z Value'
C
        ZVALUE = 0
	IF (RDLONG (ZVALUE)) THEN
           IF (BLKERR.OR.DELFND) THEN
              CALL LSL_PUTMSG (CEDD2I__UNEXPEND, TITLE, PTR)
              CALL IFFDEL
              INFTR = .FALSE.
              CALL LSL_PUTMSG (CEDD2I__SEGABANDON, COUNT)
              COUNT = COUNT - 1
              MISSED = MISSED + 1
              SEGMNT = .FALSE.
              GOTO 999
           ENDIF
C unable to read field in SEG block; outputting zero
	   ZVALUE = 0
   	   IF (DIAG) CALL LSL_PUTMSG (CEDD2I__SEGPUT0, TITLE, PTR)
	ENDIF
C
        RESTRT = PTR+6
        IF (RESTRT.GT.1980) RESTRT = MOD (RESTRT, 1972)
        CALL SETWIN (RESTRT, )
C
        IF (FULL_DIAG) CALL WRITEF ('.%S %N', TITLE, ZVALUE)
C
        CALL DCPSAV (PTR)
        CHKSUM = DCP2+18
        IF (PTR.NE.CHKSUM .AND. PTR.NE.CHKSUM-1972) THEN
           CALL LSL_PUTMSG (CEDD2I__SEGCNTERR, TITLE, PTR)
           CALL IFFDEL
           INFTR = .FALSE.
           CALL LSL_PUTMSG (CEDD2I__SEGABANDON, COUNT)
           COUNT = COUNT - 1
           MISSED = MISSED + 1
           SEGMNT = .FALSE.
           GOTO 999
        ENDIF
C
        ZSBUF (3,I) = ZVALUE
C
350     IF (STCNT.EQ.PNTCNT) THEN
C
           IF (JNKSEG) GOTO 950
C
           NPTS = I
           GOTO 500
        ENDIF
C
400     CONTINUE
C
        NPTS = 200
C
500     ZERO = 0          ! flag for stored order (1 for reverse)
        IF (THREED) THEN
           CALL IFFZS (ZSBUF, NPTS, ZERO)
        ELSE
           CALL IFFST (STBUF, NPTS, ZERO)
        ENDIF
C
        IF (STCNT.LT.PNTCNT) GOTO 300         ! read some more
C                                             !   coordinates
        IF (INFTR) CALL IFFEF
        INFTR = .FALSE.
C
        IF (DIAG) THEN
           CALL WRITEF
           CALL WRITEF ('.Feature %N in SEGment file completed',
     &                                                      COUNT)
           CALL WRITEF
        ENDIF
C
950     GOTO 100
C
999     IF ( (RANGE(1).LT.OLDRAN(1)) .OR. (RANGE(2).GT.OLDRAN(2))
     &  .OR. (RANGE(3).LT.OLDRAN(3)) .OR. (RANGE(4).GT.OLDRAN(4)) ) THEN
          CALL WRITEF
          CALL WRITEF (' Range modified by SEGment coordinates to:')
          CALL WRITEF (' %F9.2 %F9.2   %F9.2 %F9.2', 
     &                       RANGE(1), RANGE(2), RANGE(3), RANGE(4))
        ENDIF
C
        IF (INFTR) CALL IFFEF
        IF (INLAY (SEGLUN)) CALL ENDLAY (SEGLUN)
C
        CALL WRITEF
        CALL WRITEF ('%N segments successfully read', COUNT)
        CALL WRITEF ('%N segments abandoned', MISSED)
        CALL WRITEF
C
        CALL IFFRWD          ! rewind SEG file to beginning
C
        RETURN
        END
C
