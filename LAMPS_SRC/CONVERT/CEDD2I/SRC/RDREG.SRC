	LOGICAL FUNCTION RDREG (NUMPTS)
C
***	IDENT	01SE88
***	MODULE	RDREG
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author J Barber, 23 May 1988
C
C This function reads the registration points field of the DSI record
C  of a CEDD tape/file, and creates a point feature in layer 0.
C  with the point values stored in the features' AC's
C
C At any stage the registration point reading may cross a block/record
C  boundary, hence the MOD(1972) checking
C
C TRUE for success
C
	IMPLICIT NONE
C
        INTEGER         NUMPTS          ! number of reg points
C
***     PARAMETER/HERE:CEDD2IMSG/
***     COMMON/LSL$CMNFRT:FRTACD/
***     COMMON/LSL$CMNIFF:IFFHAN/
***     COMMON/HERE:BUFFER/
***     COMMON/HERE:PARAMS/
***     COMMON/HERE:DESCR/
***     COMMON/HERE:STATE/
C
C  functions called
C
        LOGICAL         DSI_READ_LONG   ! read long
        LOGICAL         RDDMSH          ! convert to arcsec/100 
        LOGICAL         ACDFND_NAME
C
C workspace
C
        REAL*8          OUT
        INTEGER         INTOUT          ! from RDDMSH
C
        INTEGER         J,I             ! loop counter
	INTEGER*2	PTR,DCP1        ! locally saved pointer
        INTEGER*2       RESTRT
        INTEGER*2       ACTYPE
        INTEGER*2       ZERO
        INTEGER*2       ONE
        INTEGER*2       ISTAT(4)
        DATA            ISTAT /0,0,0,0/
C
        CHARACTER*25    TITLE
C
        INTEGER         REGIDN 
        INTEGER         XREGIS 
        INTEGER         YREGIS 
        INTEGER         ZREGIS 
C
        INTEGER         INTREGLAT        ! arcsec/100
        INTEGER         INTREGLON
        REAL*8          REGLAT           ! IFF units
        REAL*8          REGLON 
        INTEGER         REGLEV 
        INTEGER         CHKSUM
C
        REAL            ZSBUF(3,1)
        REAL            STBUF(2,1)
        REAL            OLDRAN(4)        ! Range as was
C
        LOGICAL         JNKREG
C
C  *********************************************************
C be optimistic initially
C
	RDREG = .TRUE.
C
        DO 50 J = 1,4
        OLDRAN(J) = RANGE(J)
50      CONTINUE
C
        DO 100 I = 1, NUMPTS
C
        CALL DCPSAV (DCP1)
C
        IF (DIAG) THEN
           CALL WRITEF
           CALL WRITEF ('.Reading Registration Point no. %^W%N', I)
           CALL WRITEF
        ENDIF
C
C  registration ID
C
        TITLE = 'Registration Point ID No.'
        REGIDN = 0
C
        IF (.NOT.DSI_READ_LONG (6, REGIDN, TITLE, I)) THEN
           CALL LSL_PUTMSG (CEDD2I__UNEXPEND, TITLE, DCP1)
           RDREG = .FALSE.
           GOTO 999
        ENDIF
C
C  replaced with loop count
C
	IF (RDLONGERR) CALL LSL_PUTMSG 
     &                   (CEDD2I__REGPTIDERR, TITLE, DCP1, I)
C
C  registration latitude
C
        CALL DCPSAV (PTR)
        CHKSUM = DCP1+6
        IF (PTR.NE.CHKSUM .AND. PTR.NE.CHKSUM-1972) THEN
           CALL LSL_PUTMSG (CEDD2I__REGCNTERR, TITLE, PTR)
           RDREG = .FALSE. 
           GOTO 999
        ENDIF
C
        TITLE = 'Registration Latitude'
C
        OUT = 0D0
        INTOUT = 0
        REGLAT = 0D0
        IF (.NOT.RDDMSH (.TRUE., OUT, INTOUT, TITLE)) THEN
           IF (BLKERR.OR.DELFND) THEN
              CALL LSL_PUTMSG (CEDD2I__UNEXPEND, TITLE, PTR)
              RDREG = .FALSE.
              GOTO 999
           ENDIF
           CALL LSL_PUTMSG (CEDD2I__REGABANDON, I)
           JNKREG = .TRUE.
        ENDIF
        INTREGLAT = INTOUT            ! secs/100
        REGLAT = OUT                  ! IFF units
C
C  registration longitude
C
        CALL DCPSAV (PTR)
        CHKSUM = DCP1+15
        IF (PTR.NE.CHKSUM .AND. PTR.NE.CHKSUM-1972) THEN
           CALL LSL_PUTMSG (CEDD2I__REGCNTERR, TITLE, PTR)
           RDREG = .FALSE. 
           GOTO 999
        ENDIF
C
        TITLE = 'Registration Longitude'
C
        INTOUT = 0
        OUT = 0D0
        REGLON = 0D0
        IF (.NOT.RDDMSH (.FALSE., OUT, INTOUT, TITLE)) THEN
           IF (BLKERR.OR.DELFND) THEN
              CALL LSL_PUTMSG (CEDD2I__UNEXPEND, TITLE, PTR)
              RDREG = .FALSE.
              GOTO 999
           ENDIF
           CALL LSL_PUTMSG (CEDD2I__REGABANDON, I)
           JNKREG = .TRUE.
        ENDIF
        INTREGLON = INTOUT               ! secs/100
        REGLON = OUT                     ! IFF units
C
C  registration elevation wrt. specified vert datum (cms.)
C
        CALL DCPSAV (PTR)
        CHKSUM = DCP1+25
        IF (PTR.NE.CHKSUM .AND. PTR.NE.CHKSUM-1972) THEN
           CALL LSL_PUTMSG (CEDD2I__REGCNTERR, TITLE, PTR)
           RDREG = .FALSE. 
           GOTO 999
        ENDIF
C
        TITLE = 'Registration Elevation'
        REGLEV = 0
C
        IF (.NOT.DSI_READ_LONG (8, REGLEV, TITLE, 0)) THEN
           CALL LSL_PUTMSG (CEDD2I__UNEXPEND, TITLE, PTR)
           RDREG = .FALSE.
           GOTO 999
        ENDIF
C
C  registration X
C
        CALL DCPSAV (PTR)
        CHKSUM = DCP1+33
        IF (PTR.NE.CHKSUM .AND. PTR.NE.CHKSUM-1972) THEN
           CALL LSL_PUTMSG (CEDD2I__REGCNTERR, TITLE, PTR)
           RDREG = .FALSE. 
           GOTO 999
        ENDIF
C
        TITLE = 'Registration X Value'
        XREGIS = 0
C
        IF (.NOT.DSI_READ_LONG (6, XREGIS, TITLE, 0)) THEN
           CALL LSL_PUTMSG (CEDD2I__UNEXPEND, TITLE, PTR)
           RDREG = .FALSE.
           GOTO 999
        ENDIF
C
        IF (RDLONGERR) THEN
           IF (.NOT.GEOGR) THEN
              CALL LSL_PUTMSG (CEDD2I__REGABANDON, I)
              JNKREG = .TRUE.
           ENDIF
	ENDIF
C
C  registration Y
C
        CALL DCPSAV (PTR)
        CHKSUM = DCP1+39
        IF (PTR.NE.CHKSUM .AND. PTR.NE.CHKSUM-1972) THEN
           CALL LSL_PUTMSG (CEDD2I__REGCNTERR, TITLE, PTR)
           RDREG = .FALSE. 
           GOTO 999
        ENDIF
C
        TITLE = 'Registration Y Value'
        YREGIS = 0
C
        IF (.NOT.DSI_READ_LONG (6, YREGIS, TITLE, 0)) THEN
           CALL LSL_PUTMSG (CEDD2I__UNEXPEND, TITLE, PTR)
           RDREG = .FALSE.
           GOTO 999
        ENDIF
C
        IF (RDLONGERR) THEN
           IF (.NOT.GEOGR) THEN
              CALL LSL_PUTMSG (CEDD2I__REGABANDON, I)
              JNKREG = .TRUE.
           ENDIF
	ENDIF
C
C  registration Z
C
        CALL DCPSAV (PTR)
        CHKSUM = DCP1+45
        IF (PTR.NE.CHKSUM .AND. PTR.NE.CHKSUM-1972) THEN
           CALL LSL_PUTMSG (CEDD2I__REGCNTERR, TITLE, PTR)
           RDREG = .FALSE. 
           GOTO 999
        ENDIF
C
        TITLE = 'Registration Z Value'
        ZREGIS = 0
C
        IF (.NOT.DSI_READ_LONG (6, ZREGIS, TITLE, 0)) THEN
           CALL LSL_PUTMSG (CEDD2I__UNEXPEND, TITLE, PTR)
           RDREG = .FALSE.
           GOTO 999
        ENDIF
C
        CALL DCPSAV (PTR)
        CHKSUM = DCP1+51
        IF (PTR.NE.CHKSUM .AND. PTR.NE.CHKSUM-1972) THEN
           CALL LSL_PUTMSG (CEDD2I__REGCNTERR, TITLE, PTR)
           RDREG = .FALSE. 
           GOTO 999
        ENDIF
C
        IF (JNKREG) GOTO 100
C
        ZERO = 0
        CALL IFFNF (I+1, ZERO)        ! FSN = loop number,
C                                     !   counted after enc. ftr
        INFTR = .TRUE.
        ISNSUM = ZERO                 ! total no. of features
C
        ISTAT(1) = REGPNT
        CALL IFFFS (ISTAT)
C
        IF (.NOT.ACDFND_NAME ('Registration_ID')) THEN
           ACTYPE = ACD_CODE
           CALL IFFAC (ACTYPE, REGIDN)
        ENDIF
C
        IF (.NOT.ACDFND_NAME ('Registration_lat')) THEN
           ACTYPE = ACD_CODE
           CALL IFFAC (ACTYPE, INTREGLAT)
        ENDIF
C
        IF (.NOT.ACDFND_NAME ('Registration_long')) THEN
           ACTYPE = ACD_CODE
           CALL IFFAC (ACTYPE, INTREGLON)
        ENDIF
C
        IF (.NOT.ACDFND_NAME ('Registration_elev')) THEN
           ACTYPE = ACD_CODE
           CALL IFFAC (ACTYPE, REGLEV)
        ENDIF
C
        IF (.NOT.ACDFND_NAME ('Control_X')) THEN
           ACTYPE = ACD_CODE
           CALL IFFAC (ACTYPE, NINT (FLOAT(XREGIS) * CONVN))
        ENDIF
C
        IF (.NOT.ACDFND_NAME ('Control_Y')) THEN
           ACTYPE = ACD_CODE
           CALL IFFAC (ACTYPE, NINT (FLOAT(YREGIS) * CONVN))
        ENDIF
C
        IF (.NOT.ACDFND_NAME ('Control_Z')) THEN
           ACTYPE = ACD_CODE
           CALL IFFAC (ACTYPE, ZREGIS)
        ENDIF
C
C  reset BYTBUF and decode pointers
C
        CALL SETAUX (BYTBUF, BUFLEN)
        CALL DCPSET (PTR)
C
        ZERO = 0
        CALL IFFTH (ZERO)
C
        IF (GEOGR) THEN
           STBUF(1,1) = REGLON 
           STBUF(2,1) = REGLAT 
        ELSE
           IF (THREED) THEN
              ZSBUF(1,1) = XREGIS * CONVN
              ZSBUF(2,1) = YREGIS * CONVN
              ZSBUF(3,1) = ZREGIS
           ELSE
              STBUF(1,1) = XREGIS * CONVN
              STBUF(2,1) = YREGIS * CONVN
           ENDIF
        ENDIF
C
C  update Range
C
        IF (.NOT.RNGSET) THEN
           IF (THREED) THEN
              RANGE(1) = ZSBUF(1,1)
              RANGE(2) = ZSBUF(1,1)
              RANGE(3) = ZSBUF(2,1)
              RANGE(4) = ZSBUF(2,1)
           ELSE
              RANGE(1) = STBUF(1,1)
              RANGE(2) = STBUF(1,1)
              RANGE(3) = STBUF(2,1)
              RANGE(4) = STBUF(2,1)
           ENDIF
           RNGSET = .TRUE.
        ENDIF
C
        IF (THREED) THEN
           RANGE(1) = MIN (RANGE(1), ZSBUF(1,1))
           RANGE(2) = MAX (RANGE(2), ZSBUF(1,1))
           RANGE(3) = MIN (RANGE(3), ZSBUF(2,1))
           RANGE(4) = MAX (RANGE(4), ZSBUF(2,1))
        ELSE
           RANGE(1) = MIN (RANGE(1), STBUF(1,1))
           RANGE(2) = MAX (RANGE(2), STBUF(1,1))
           RANGE(3) = MIN (RANGE(3), STBUF(2,1))
           RANGE(4) = MAX (RANGE(4), STBUF(2,1))
        ENDIF
C 
900     ONE = 1
        ZERO = 0
        CALL IFFST (STBUF, ONE, ZERO)
C
        CALL IFFEF
        INFTR = .FALSE.
C
        IF (DIAG) CALL WRITEF ('.Feature %^W%N completed', ISNSUM)
C
100     CONTINUE
C
        IF (DIAG) THEN
           CALL WRITEF
           CALL WRITEF ('.Registration Points completed')
           CALL WRITEF
        ENDIF
C
999     IF((RANGE(1).LT.OLDRAN(1)) .OR.
     &     (RANGE(2).GT.OLDRAN(2)) .OR.     
     &     (RANGE(3).LT.OLDRAN(3)) .OR.
     &     (RANGE(4).GT.OLDRAN(4))) THEN
           CALL WRITEF
           CALL WRITEF (' Range modified by Registration Points to: ')
           CALL WRITEF (' %F9.2 %F9.2    %F9.2 %F9.2', 
     &                         RANGE(1), RANGE(2), RANGE(3), RANGE(4))
        ENDIF
        CALL WRITEF
C
	RETURN
	END
C
