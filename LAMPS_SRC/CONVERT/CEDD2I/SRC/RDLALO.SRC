C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-09-01 20:08:54.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION RDLALO (ISLAT)
C
***	IDENT	01SE88
***	MODULE	RDLALO
C
C       Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 6 June 1983
C Modified CC Brunt, 26 August 1983 and 4 October 1983
C Modified DRC 14-March-88  For use with DCL qualifiers.
C Modified J Barber, 10 May 1988 for CEDD2I with arcsec/100
C
C reads a  latitude  or longitude (according to ISLAT), and
C converts to hundredths of seconds of arc.
C the format of the value is (D)DDMMSS.SSH 
C returns FALSE if something goes wrong, else TRUE
C
	IMPLICIT NONE
C
C  we were passed
C
	LOGICAL		ISLAT	      ! is it a latitude 
C
***     PARAMETER/HERE:CEDD2IMSG/
***     COMMON/HERE:PARAMS/           ! for DIAG
***	COMMON/HERE:STATE/	      ! for searching for a map
***	COMMON/LSL$CMNLSL:CMDCOM/     ! contains INTARG and REALAR
***	COMMON/LSL$CMNLSL:TXTC/
C
C functions
C
	LOGICAL		RDCHS	      ! to read a character
	LOGICAL		RDLONG	      ! to read longword
	LOGICAL		RDREAL	      ! to read real
C
	CHARACTER*4	LALO	      ! descriptor for what it is
        CHARACTER*1     HEMIS         ! hemis char
	INTEGER		HUNSEC	      ! collect the angle in this
	BYTE		OUTBYT	      ! for RDCHS
C
C ***************************************************************
C
	RDLALO = .FALSE.
        HUNSEC = 0
C
	IF (ISLAT) THEN
	   LALO = ' Lat'
	ELSE
	   LALO = 'Long'
	ENDIF
C
	CALL BSLN			! set to start of line
C
C  Read the degree field into INTARG(1)
C
	IF (ISLAT) THEN
	  CALL SETWIN ( , 2)		! 2 characters for latitude
	ELSE
	  CALL SETWIN ( , 3)		! 3 characters for longitude
	ENDIF
C
	IF (RDLONG (INTARG(1))) THEN
	   CALL LSL_PUTMSG (CEDD2I__RDDEGERR) 
	   GOTO 999                     ! unable to read degrees 
	ENDIF	  
C	
C  Test if the field is valid:
	IF (ISLAT) THEN
	  IF ((INTARG(1).GT.90) .OR. (INTARG(1).LT.0)) THEN
	    CALL LSL_PUTMSG (CEDD2I__INVALDEG, LALO, INTARG(1)) 
	    GOTO 999                    ! lat degrees invalid
	  ENDIF
	ELSE
	  IF ((INTARG(1).GT.180) .OR. (INTARG(1).LT.0)) THEN
	    CALL LSL_PUTMSG (CEDD2I__INVALDEG, LALO, INTARG(1))
	    GOTO 999                    ! long degrees invalid
	  ENDIF
	ENDIF
C
C  Convert to hundredths of seconds
	HUNSEC = INTARG(1)*360000
C
C  Read the minutes field into INTARG(2)
	CALL SETWIN ( , 2)              ! 2 chars for minutes field
	IF (RDLONG (INTARG(2))) THEN
	  CALL LSL_PUTMSG (CEDD2I__RDMINERR)  
	  GOTO 999                      ! unable to read minutes field
	ENDIF	  
C
C  Check validity of the minutes field.
	IF (INTARG(2).LT.0 .OR. INTARG(2).GT.60) THEN 
	   CALL LSL_PUTMSG (CEDD2I__INVALIDMIN, INTARG(2), LALO)
           GOTO 999
	ENDIF
C
C  Convert to hundredths of seconds and add to total
	HUNSEC = HUNSEC + INTARG(2)*6000
C
C  Read seconds field: the seconds value is read into REALAR(1)
	CALL SETWIN ( , 5)	         ! 5 characters
	IF (RDREAL (REALAR(1))) THEN
	  CALL LSL_PUTMSG (CEDD2I__RDSECERR) 
	  GOTO 999                       ! seconds field missing
	ENDIF
C
C  Test the validity of the seconds field
	IF (REALAR(1).LT.0.0 .OR. REALAR(1).GT.60.0) THEN  
	   CALL LSL_PUTMSG (CEDD2I__INVALIDSEC, REALAR(1), LALO)
	   GOTO 999                      ! seconds field invalid 
  	ENDIF
C
C  Convert to hundredths of seconds and add to total
	HUNSEC = HUNSEC + NINT (REALAR(1)) * 100
C
C  Check for hemisphere
	CALL SETWIN ( , 1)		 ! just 1 character
	IF (RDCHS (OUTBYT)) THEN
	  CALL LSL_PUTMSG (CEDD2I__RDNSEWERR)  
	  GOTO 999                       ! hemis char not present
        ELSE
          HEMIS = CHAR(OUTBYT)
	ENDIF
C
	IF (ISLAT) THEN
	  IF (HEMIS.NE.'N' .AND. HEMIS.NE.'n' .AND.
     &        HEMIS.NE.'S' .AND. HEMIS.NE.'s') THEN
	    CALL LSL_PUTMSG (CEDD2I__INVALIDNS, HEMIS) 
	    GOTO 999                     ! unrecognised hemis char
	  ELSEIF (HEMIS.EQ.'S' .OR. HEMIS.EQ.'s') THEN
	    HUNSEC = -HUNSEC
	  ENDIF
	ELSE		
	  IF (HEMIS.NE.'E' .AND. HEMIS.NE.'e' .AND.
     &        HEMIS.NE.'W' .AND. HEMIS.NE.'w') THEN
	    CALL LSL_PUTMSG (CEDD2I__INVALIDEW, HEMIS) 
	    GOTO 999                     ! unrecognised hemis char
	  ELSEIF (HEMIS.EQ.'W' .OR. HEMIS.EQ.'w') THEN
	    HUNSEC = -HUNSEC
	  ENDIF
	ENDIF
C
C  Set up the manuscript search values
	IF (ISLAT) THEN
	   SKLAT  = HUNSEC
	   SERLAT = .TRUE.
        ELSE
	   SKLONG = HUNSEC
	   SERLON = .TRUE.
	ENDIF
C
	SERNUM = .FALSE.             ! no searching by number
	SKIP   = .TRUE.              ! but definitely searching...
C
	IF (DIAG) THEN
	   CALL EXPAND ('.%Situde under search is ', LALO)
	   CALL APPEND ('%P %I4%I4%F7.2',INTARG(1), INTARG(2), REALAR(1))
	   IF (ISLAT) THEN
	     IF (HUNSEC.LT.0) THEN
               CALL APPEND (' S')
	     ELSE
	       CALL APPEND (' N')
	     ENDIF
	   ELSE
	     IF (HUNSEC.LT.0) THEN
               CALL APPEND (' W')
	     ELSE
	       CALL APPEND (' E')
	     ENDIF
	   ENDIF
	   CALL TTWLIN
	ENDIF
C
	RDLALO = .TRUE.                 ! finished
C
999	RETURN
	END
C
