C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-08-23 17:43:36.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION WRITE_DATA_AC(DATA_RECORD)
C
***	MODULE WRITE_DATA_AC
***	IDENT 03AU88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			2 August 1988
C
C Routine to write the AC records to an IFF file feature for
C the MGD77 format record passed to it as an argument
C The length of this record is DATA_REC_LEN, defined in the /MGD2I/
C common block
C Routine works by passing each item to routine WRITE_AC in turn,
C effectively breaking byte buffer into smaller segments, each
C holding one item.
C
	IMPLICIT NONE
C
C common blocks
	INCLUDE	'LSL$MGD2I:MGD2I.CMN'
	INCLUDE 'LSL$MGD2I:MGD2IMSG.PAR'
C
C arguments
	BYTE		DATA_RECORD(DATA_REC_LEN) ! byte buffer
					! containing data record to
					! be output as ACs
C
C w/s
C
C functions
	INTEGER		WRITE_AC	! write the named AC to iff file
C
C Assume success
C
	WRITE_DATA_AC = MGD2I__NORMAL
C
C First check that first character of block is data record type
C that is '3'
C
	IF (DATA_RECORD(1).NE.ICHAR('3')) THEN
C
C Warn user of the problem - but continue
C
	   CALL LSL_PUTMSG(MGD2I__ILLEGDATATYP)
	ENDIF
C
C Cruise identifier
C
	WRITE_DATA_AC = WRITE_AC
     &		('M_Data_cruise_ident',DATA_RECORD(2),8,TEXT_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_DATA_AC) GOTO 900
C
C Time zone correction (signed) : 2 decimal places
C Only write AC if sign is not '9' i.e. not undefined quantity
C
	IF (DATA_RECORD(10).NE.ICHAR('9')) 
     &	   WRITE_DATA_AC = WRITE_AC
     &		('M_Data_time_zone_cor',DATA_RECORD(10),5,REAL_AC,2)
C
C Check for errors
C
C	IF (.NOT.WRITE_DATA_AC) GOTO 900
C
C Data date (from year, month and day fields in record)
C Format is YYMMDD
C
	WRITE_DATA_AC = WRITE_AC
     &		('M_Data_date',DATA_RECORD(15),6,DATE_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_DATA_AC) GOTO 900
C
C Data time : hours part
C
	WRITE_DATA_AC = WRITE_AC
     &		('M_Data_time_hours',DATA_RECORD(21),2,INTEGER_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_DATA_AC) GOTO 900
C
C Data time : minutes part with 3 decimal places
C
	WRITE_DATA_AC = WRITE_AC
     &		('M_Data_time_mins',DATA_RECORD(23),5,REAL_AC,3)
C
C Check for errors
C
C	IF (.NOT.WRITE_DATA_AC) GOTO 900
C
C Position type code
C
	WRITE_DATA_AC = WRITE_AC
     &		('M_Data_pos_type_code',DATA_RECORD(45),1,INTEGER_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_DATA_AC) GOTO 900
C
C Bathmetry travel time : 4 decimal places
C
	WRITE_DATA_AC = WRITE_AC
     &		('M_Data_bathy_travel',DATA_RECORD(46),6,REAL_AC,4)
C
C Check for errors
C
C	IF (.NOT.WRITE_DATA_AC) GOTO 900
C
C Bathymetry corrected depth : 1 decimal place
C
	WRITE_DATA_AC = WRITE_AC
     &		('M_Data_bathy_correct',DATA_RECORD(52),6,REAL_AC,1)
C
C Check for errors
C
C	IF (.NOT.WRITE_DATA_AC) GOTO 900
C
C Bathymetry correction code
C
	WRITE_DATA_AC = WRITE_AC
     &		('M_Data_bathy_co_code',DATA_RECORD(58),2,INTEGER_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_DATA_AC) GOTO 900
C
C Bathymetry type code
C
	WRITE_DATA_AC = WRITE_AC
     &		('M_Data_bathy_ty_code',DATA_RECORD(60),1,INTEGER_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_DATA_AC) GOTO 900
C
C Magnetics total field, 1st sensor : 1 decimal place
C
	WRITE_DATA_AC = WRITE_AC
     &		('M_Data_mag_total_one',DATA_RECORD(61),6,REAL_AC,1)
C
C Check for errors
C
C	IF (.NOT.WRITE_DATA_AC) GOTO 900
C
C Magnetics total field, 2st sensor : 1 decimal place
C
	WRITE_DATA_AC = WRITE_AC
     &		('M_Data_mag_total_two',DATA_RECORD(67),6,REAL_AC,1)
C
C Check for errors
C
C	IF (.NOT.WRITE_DATA_AC) GOTO 900
C
C Magnetics residual field (signed) : 1 decimal place
C Only write AC if sign is not '9' i.e. not undefined quantity
C
	IF (DATA_RECORD(73).NE.ICHAR('9')) 
     &	   WRITE_DATA_AC = WRITE_AC
     &		('M_Data_mag_residual',DATA_RECORD(73),6,REAL_AC,1)
C
C Check for errors
C
C	IF (.NOT.WRITE_DATA_AC) GOTO 900
C
C Sensor used for residual field
C
	WRITE_DATA_AC = WRITE_AC
     &		('M_Data_sens_residual',DATA_RECORD(79),1,INTEGER_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_DATA_AC) GOTO 900
C
C Magnetics diurnal correction (signed) : 1 decimal place
C Only write AC if sign is not '9' i.e. not undefined quantity
C
	IF (DATA_RECORD(80).NE.ICHAR('9')) 
     &	   WRITE_DATA_AC = WRITE_AC
     &		('M_Data_mag_diurn_cor',DATA_RECORD(80),5,REAL_AC,1)
C
C Check for errors
C
C	IF (.NOT.WRITE_DATA_AC) GOTO 900
C
C Depth or altitude of lead magnetic sensor (signed)
C Only write AC if sign is not '9' i.e. not undefined quantity
C
	IF (DATA_RECORD(85).NE.ICHAR('9')) 
     &	   WRITE_DATA_AC = WRITE_AC
     &		('M_Data_alt_mag_sens',DATA_RECORD(85),6,INTEGER_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_DATA_AC) GOTO 900
C
C Observed gravity : 1 decimal place
C
	WRITE_DATA_AC = WRITE_AC
     &		('M_Data_obs_gravity',DATA_RECORD(91),7,REAL_AC,1)
C
C Check for errors
C
C	IF (.NOT.WRITE_DATA_AC) GOTO 900
C
C Eotvos correction (signed) : 1 decimal place
C Only write AC if sign is not '9' i.e. not undefined quantity
C
	IF (DATA_RECORD(98).NE.ICHAR('9')) 
     &	   WRITE_DATA_AC = WRITE_AC
     &		('M_Data_EOTVOS_corr',DATA_RECORD(98),6,REAL_AC,1)
C
C Check for errors
C
C	IF (.NOT.WRITE_DATA_AC) GOTO 900
C
C Free air anomaly (signed) : 1 decimal place
C Only write AC if sign is not '9' i.e. not undefined quantity
C
	IF (DATA_RECORD(104).NE.ICHAR('9')) 
     &	   WRITE_DATA_AC = WRITE_AC
     &		('M_Data_free_air_anom',DATA_RECORD(104),5,REAL_AC,1)
C
C Check for errors
C
C	IF (.NOT.WRITE_DATA_AC) GOTO 900
C
C Seismic shot-point identification
C
	WRITE_DATA_AC = WRITE_AC
     &		('M_Data_seismic_ident',DATA_RECORD(109),8,TEXT_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_DATA_AC) GOTO 900
C
C Quality code for gravity
C
	WRITE_DATA_AC = WRITE_AC
     &		('M_Data_Qcode_gravity',DATA_RECORD(117),1,INTEGER_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_DATA_AC) GOTO 900
C
C Quality code for magnetics
C
	WRITE_DATA_AC = WRITE_AC
     &		('M_Data_Qcode_magnet',DATA_RECORD(118),1,INTEGER_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_DATA_AC) GOTO 900
C
C Quality code for bathymetry
C
	WRITE_DATA_AC = WRITE_AC
     &		('M_Data_Qcode_bathy',DATA_RECORD(119),1,INTEGER_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_DATA_AC) GOTO 900
C
C Quality code for navigation
C
	WRITE_DATA_AC = WRITE_AC
     &		('M_Data_Qcode_navigat',DATA_RECORD(120),1,INTEGER_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_DATA_AC) GOTO 900
C
C Exit
C
900	RETURN
	END
