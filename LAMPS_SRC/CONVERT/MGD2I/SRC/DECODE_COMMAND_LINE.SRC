	LOGICAL FUNCTION DECODE_COMMAND_LINE()
C
***	MODULE	DECODE_COMMAND_LINE
***	IDENT	02AU88
C
C Copyright Laser-Scan Laboratories Ltd.,Cambridge,England
C Author : J.M. Billing		2 August 1988
C
	IMPLICIT NONE
C
C common blocks
	INCLUDE 'LSL$MGD2I:MGD2I.CMN'
	INCLUDE 'LSL$MGD2I:MGD2IMSG.PAR'
	INCLUDE 'LSL$CMNLSL:CLD.CMN'
C
C Command Language Definitions:
	EXTERNAL	MGD2I_CLD
C
C w/s variables
	LOGICAL		THERE	   ! .T. if qualfiers found
	LOGICAL		ABSENT	   ! .T. if item not found
	LOGICAL		LOCAL      ! .T. if qual is local
	LOGICAL		LOCNEG     ! set .T. if qual locally negated
        LOGICAL		LOCERR     ! .T. - local error reporting
C
C Functions called:
        INTEGER*4       DCL_STARTUP! looks for command line
        INTEGER*4       DCL_CML	   ! gets command line
	INTEGER*4	DCL_FILE   ! reads & parses file title from DCL 
			           ! command line
	INTEGER*4	DCL_QUAL   ! looks for specified qualifier
	INTEGER*4	DCL_INT    ! read integer from command qualifier
	INTEGER*4	DCL_STR	   ! read string from command qualifier
	INTEGER*4	SIGCHS	   ! return number of signif chars 
				   ! in argument string
C
C...................................................................
C
C Initialise things
C
	LOCERR =.TRUE.		 ! local error reporting
	LOCAL  =.FALSE.          ! set .T. if qual. is local
        LOCNEG =.FALSE.          ! set .T. if qual. locally negated
C
C....................................................................
C
C Get command line for verb MGD2I. DCL_STARTUP will return set to
C SS$_NORMAL if all well.
C
	DECODE_COMMAND_LINE=DCL_STARTUP('MGD2I'    	! command verb
     &      		,.FALSE.		! don't split par lists
     &      		,MGD2I_CLD		! CLD module name
     &      		,LOCERR)        	! local error reporting
C
        IF (.NOT.DECODE_COMMAND_LINE) GOTO 10 		! return
C
C....................................................................
C
C Get output filename
C
	DECODE_COMMAND_LINE = DCL_FILE('P1'! parameter label
     &		,'LSL$IF:IFF.IFF'           	! default file-name
     &		,ABSENT		  		! .T. if no file-name
     &		,.FALSE.	  		! not list of files
     &		,LOCERR)	  		! local error reporting
C
C Transfer file-spec to a local variable
C
	IF (DECODE_COMMAND_LINE) THEN
	   OUT_IFF_FILE = FILARY(1)(1:FIL_LEN(1))
	   OUT_IFF_LEN = FIL_LEN(1)
C
C Otherwise, deal with errors
C
	ELSE
	   GOTO 10
        ENDIF
C
C....................................................................
C
C Check for qualifiers
C
C....................................................................
C Check for /FRT=file-spec
C The FRT file containing details of AC names/codes for
C feature and header attributes
C
	DECODE_COMMAND_LINE = DCL_QUAL('FRT'	! qual. name
     &     	,THERE			! returned .T. if qual. found
     &          ,LOCAL		  	! .T. if qual local to parameter
     &		,LOCNEG		  	! .T. if qual locally negated
     &          ,LOCERR)		! .T.-local error reporting
C
	IF (.NOT.DECODE_COMMAND_LINE) GOTO 10	! return
C
C Now fetch the file specification
C
	DECODE_COMMAND_LINE = DCL_FILE(
     &		 'FRT'			! qualifier name
     &		,'LSL$FRT:MGD77_ACD_TABLE.FRT;0'! default FRT file
     &		,ABSENT			! .T. if no file spec
     &		,.FALSE.		! No list of file specs
     &		,LOCERR)		! .T. if local error reporting
C
	IF (.NOT.DECODE_COMMAND_LINE) GOTO 10	! return
C
C Now transfer the FRT file specification to a local variable
C
	IF (.NOT.ABSENT) THEN
	   FRT_FILE = FILARY(1)(1:FIL_LEN(1))
	   FRT_LEN = FIL_LEN(1)
C
C If the file spec was not found, supply the default instead
C
	ELSE
	   FRT_FILE = 'LSL$FRT:MGD77_ACD_TABLE.FRT;0'
	   FRT_LEN  = SIGCHS(FRT_FILE)
	ENDIF
C
C....................................................................
C Check for /FC=code
C The feature code to be given to all features generated (including
C the header feature)
C
	DECODE_COMMAND_LINE = DCL_QUAL('FC'	! qual. name
     &     	,THERE			! returned .T. if qual. found
     &          ,LOCAL		  	! .T. if qual local to parameter
     &		,LOCNEG		  	! .T. if qual locally negated
     &          ,LOCERR)		! .T.-local error reporting
C
	IF (.NOT.DECODE_COMMAND_LINE) GOTO 10	! return
C
C Now read the integer code, if the qualifier was present
C
	IF (THERE) THEN
	   DECODE_COMMAND_LINE = DCL_INT(
     &		'FC'		! qualifier name
     &		,LOCERR)	! .T. if want local error reporting
C
	IF (.NOT.DECODE_COMMAND_LINE) GOTO 10	! return
C
C Transfer code to local variable, checking that a number was specified
C and using the default if it was not
C
	   IF (NUMINT.GT.0) THEN
	      FC = IARRAY(1)
C
C No code present with /FC, so use default
C
	   ELSE
	      FC = 10
	   ENDIF
C
C Otherwise, no /FC present, so use default FC
C
	ELSE
	   FC = 10
	ENDIF
C
C Check that the FC is legal, report it and exit if it is not
C
	IF ((FC.LT.0).OR.(FC.GT.32767)) THEN
	   CALL LSL_PUTMSG(MGD2I__ILLEGFC)
	   DECODE_COMMAND_LINE = MGD2I__ILLEGFC
	   GOTO 10
	ENDIF
C
C....................................................................
C Check for /DEVICE=tape-device qualifier
C This specifies the tape device to be used
C
	DECODE_COMMAND_LINE = DCL_QUAL('DEVICE'	! qual. name
     &     	,THERE			! returned .T. if qual. found
     &          ,LOCAL		  	! .T. if qual local to parameter
     &		,LOCNEG		  	! .T. if qual locally negated
     &          ,LOCERR)		! .T.-local error reporting
C
	IF (.NOT.DECODE_COMMAND_LINE) GOTO 10	! return
C
C Now attempt to read the device specified if the qualifier was present
C
	IF (THERE) THEN
	   DECODE_COMMAND_LINE = DCL_STR(
     &		 'DEVICE'		! qualifier name
     &		,LOCERR)		! .T. if to report errors
C
	IF (.NOT.DECODE_COMMAND_LINE) GOTO 10	! return
C
C Now transfer string, if found, to local variable
C
	   IF (NUMSTR.GT.0) THEN
	      DEVICE = CARRAY(1)(1:STR_LEN(1))
C
C No string found, so use default
C
	   ELSE
	      DEVICE = 'MSA0:'
	   ENDIF
C
C No qualifier found, so use default
C
	ELSE
	   DEVICE = 'MSA0:'
	ENDIF
C
C....................................................................
C Check for /DIAGNOSTICS qualifier
C Specifies details of what is found on tape are output
C
	DECODE_COMMAND_LINE = DCL_QUAL(
     &		'DIAGNOSTICS'		! qual. name
     &     	,WANT_DIAGNOSTICS	! returned .T. if qual. found
     &          ,LOCAL		  	! .T. if qual local to parameter
     &		,LOCNEG		  	! .T. if qual locally negated
     &          ,LOCERR)		! .T.-local error reporting
C
	IF (.NOT.DECODE_COMMAND_LINE) GOTO 10	! return
C
C....................................................................
C Check for /REWIND qualifier
C Specifies that tape is to be rewound before starting to read
C it (or positioning at Nth select specified with /SELECT
C qualifier)
C
	DECODE_COMMAND_LINE = DCL_QUAL(
     &		'REWIND'		! qual. name
     &     	,WANT_REWIND		! returned .T. if qual. found
     &          ,LOCAL		  	! .T. if qual local to parameter
     &		,LOCNEG		  	! .T. if qual locally negated
     &          ,LOCERR)		! .T.-local error reporting
C
	IF (.NOT.DECODE_COMMAND_LINE) GOTO 10	! return
C
C....................................................................
C Check for /SELECT=integer qualifier
C Specifies that the Nth select (from the current tape
C position or from BOT if the /REWIND qualifier is also specified)
C is to be read
C
	DECODE_COMMAND_LINE = DCL_QUAL(
     &		'SELECT'		! qual. name
     &     	,THERE			! returned .T. if qual. found
     &          ,LOCAL		  	! .T. if qual local to parameter
     &		,LOCNEG		  	! .T. if qual locally negated
     &          ,LOCERR)		! .T.-local error reporting
C
	IF (.NOT.DECODE_COMMAND_LINE) GOTO 10	! return
C
C If the select qualifier was found, then read the integer
C
	IF (THERE) THEN
	   DECODE_COMMAND_LINE = DCL_INT(
     &		'SELECT'	! qualifier name
     &		,LOCERR)	! .T. if want local error reporting
C
	IF (.NOT.DECODE_COMMAND_LINE) GOTO 10	! return
C
C Transfer number to local variable if one was found
C
	   IF (NUMINT.GT.0) THEN
	      SHEET = IARRAY(1)
C
C No number present with /SELECT, so use default
C
	   ELSE
	      SHEET = 1
	   ENDIF
C
C Otherwise, no /SELECT present, so use default sheet number
C
	ELSE
	   SHEET = 1
	ENDIF
C
C Check that the sheet is legal and report it and exit if it is not
C
	IF (SHEET.LT.1) THEN
	   CALL LSL_PUTMSG(MGD2I__ILLEGSHEET)
	   DECODE_COMMAND_LINE = MGD2I__ILLEGSHEET
	   GOTO 10
	ENDIF
C
C Have now finished decoding the command line, so exit
C
10	RETURN
   	END
