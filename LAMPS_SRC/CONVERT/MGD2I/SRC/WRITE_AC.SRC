C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-08-23 21:55:08.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION WRITE_AC
     &		(AC_NAME,TEXT_BUFFER,LENGTH,INTERPRET_AS,NUM_DP)
C
***	MODULE WRITE_AC
***	IDENT 03AU88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			2 August 1988
C
C Routine to write named AC of data in buffer from record in
C MGD77 format file as specified type.
C
	IMPLICIT NONE
C
C common blocks
	INCLUDE	'LSL$MGD2I:MGD2I.CMN'
	INCLUDE 'LSL$MGD2I:MGD2IMSG.PAR'
	INCLUDE 'LSL$CMNFRT:FRTACD.CMN'
C
C arguments
	CHARACTER*(*)	AC_NAME		! name of AC
	INTEGER		LENGTH		! length of text buffer
	BYTE		TEXT_BUFFER(LENGTH) ! text buffer holding
					! AC text or text to be 
					! converted to AC value field
	INTEGER		INTERPRET_AS	! semaphore to indicate how
					! text buffer is to be handled
	INTEGER		NUM_DP		! number of dec places if AC
					! represents real number
C
C w/s
	INTEGER		I		! temporary count
	INTEGER*2	AC_CODE		! code of AC, derived from name
					! of the AC
	REAL		REAL_VALUE	! real value part of AC
	INTEGER		INTEGER_VALUE	! integer value part of AC
	INTEGER		CONVERT		! for real/integer conversion
					! when reading real value
					! from buffer
	INTEGER		DIV_DP		! number to divide integer read
					! from buffer by to convert it
					! to a real with required number
					! of decimal places - will
					! always be a power of ten
C
	EQUIVALENCE	(REAL_VALUE, INTEGER_VALUE)
C
C functions
	LOGICAL		ACDFND_NAME
	LOGICAL		RDREAL
	LOGICAL		RDLONG
	LOGICAL		BUFFER_IS_BLANK	! returns .T. if buffer contains
					! only nulls or spaces
C
C Assume success
C
	WRITE_AC = MGD2I__NORMAL
C
C Determine type of AC being constructed from its name
C
	IF (ACDFND_NAME(AC_NAME)) THEN
C
C Set return code to indicate failure
C
	   WRITE_AC = MGD2I__ACNOTINFRT
C
C Report that the AC name could not be found in the FRT
C
	   CALL LSL_ADDMSG(WRITE_AC,AC_NAME)
C
C Exit with error condition
C
	   GOTO 900
	ENDIF
C
C Move required code from common block to local variable
C
	AC_CODE = ACD_CODE
C
C Test if to treat AC as real
C
	IF (INTERPRET_AS.EQ.REAL_AC) THEN
C
C Check that type agrees with type in FRT, warn user if not
C
	   IF (ACD_DATA_TYPE.NE.ACD_DATATYPE_R)
     &		CALL LSL_PUTMSG(MGD2I__BADACTYP,AC_NAME)
C
C Set up input buffer to point to the text buffer passed as argument
C
	   CALL SETAUX(TEXT_BUFFER,LENGTH)
C
C Read the contents of the text buffer as a real number
C
	   IF (RDLONG(CONVERT)) THEN
C
C Test if buffer contains nulls or spaces
C
	      IF (BUFFER_IS_BLANK(TEXT_BUFFER,LENGTH)) THEN
C
C Message to say numeric field blank
C
	         WRITE_AC = MGD2I__BLANKNUM
	         CALL LSL_PUTMSG(WRITE_AC,AC_NAME)
C
C Otherwise, message to say illegal characters
C
	      ELSE
	         WRITE_AC = MGD2I__ILLEGNUM
	         CALL LSL_PUTMSG(WRITE_AC)
	      ENDIF      
C
C Jump to exit
C
	      GOTO 900
	   ENDIF
C
C Calculate number to divide by in order to convert integer
C into real with required number of decimal places
C ie calculated 10 raised to the power of the number of decimal places
C
	   DIV_DP = 10 ** NUM_DP
C
C Convert integer read from buffer (which represents real number
C written without its decimal point) into a real by dividing by
C number calculated above 
C
	   REAL_VALUE = FLOAT(CONVERT) / FLOAT(DIV_DP)
C
C Check that AC value agrees with min/max in ACD table,
C if not, warn user
C
	   IF ((REAL_VALUE.LT.ACD_MIN_MAX_R(1)).OR.
     &	       (REAL_VALUE.GT.ACD_MIN_MAX_R(2)))
     &		CALL LSL_PUTMSG(MGD2I__BADACVAL,AC_NAME)
C
C Write the real valued AC
C
	   CALL IFFAC(AC_CODE, REAL_VALUE)
C
C Test if to treat AC as integer value or date, which will also
C be kept as an integer
C
	ELSEIF ((INTERPRET_AS.EQ.INTEGER_AC).OR.
     &		(INTERPRET_AS.EQ.DATE_AC)) THEN
C
C Check that type agrees with type in FRT, warn user if not
C
	   IF (ACD_DATA_TYPE.NE.ACD_DATATYPE_I)
     &		CALL LSL_PUTMSG(MGD2I__BADACTYP,AC_NAME)
C
C Test if to treat AC as date, this will be a six digit integer
C in format YYMMDD, which must have any contained spaces changed
C to 0s
C e.g. '88 7 1' becomes '880701'
C
	   IF (INTERPRET_AS.EQ.DATE_AC) THEN
C
C Loop to convert spaces/nulls to 0s
C
	      DO 10 I = 1,6
C
C Test for spaces/nulls and change to 0s
C
	         IF ((TEXT_BUFFER(I).EQ.ICHAR(' ')).OR.
     &		     (TEXT_BUFFER(I).EQ.0)) 
     &			TEXT_BUFFER(I) = ICHAR('0')
C
10	      CONTINUE
	   ENDIF
C
C Set up input buffer to point to the text buffer passed as argument
C
	   CALL SETAUX(TEXT_BUFFER,LENGTH)
C
C Read the contents of the text buffer as a longword integer
C
	   IF (RDLONG(INTEGER_VALUE)) THEN
C
C Test if buffer contains nulls or spaces
C
	      IF (BUFFER_IS_BLANK(TEXT_BUFFER,LENGTH)) THEN
C
C Message to say field blank
C
	         WRITE_AC = MGD2I__BLANKNUM
	         CALL LSL_PUTMSG(WRITE_AC,AC_NAME)
C
C Otherwise, message to say illegal characters
C
	      ELSE
	         WRITE_AC = MGD2I__ILLEGNUM
	         CALL LSL_PUTMSG(WRITE_AC)
	      ENDIF
C
C Jump to exit
C
	      GOTO 900
	   ENDIF
C
C Check that AC value agrees with min/max in ACD table,
C if not, warn user
C
	   IF ((INTEGER_VALUE.LT.ACD_MIN_MAX_I(1)).OR.
     &	       (INTEGER_VALUE.GT.ACD_MIN_MAX_I(2)))
     &		CALL LSL_PUTMSG(MGD2I__BADACVAL,AC_NAME)
C
C Write the integer valued AC
C
	   CALL IFFAC(AC_CODE, INTEGER_VALUE)
C
C Otherwise, treat AC as text
C
	ELSE
C
C Check that type agrees with type in FRT, warn user if not
C
	   IF (ACD_DATA_TYPE.NE.ACD_DATATYPE_C)
     &		CALL LSL_PUTMSG(MGD2I__BADACTYP,AC_NAME)
C
C Set the AC value to be zero
C
	   INTEGER_VALUE = 0
C
C Write the integer valued AC
C
	   CALL IFFAC(AC_CODE, INTEGER_VALUE, TEXT_BUFFER, LENGTH)
	ENDIF
C
C Reset text input buffer to the default
C
	CALL BSLN
C
C Jump to normal exit (ie no errors)
C
	GOTO 950
C
C Report that current AC could not be completed due to an error
C
900	CALL LSL_ADDMSG(MGD2I__UNCOMPAC,AC_NAME)
C
C Exit
C
950	RETURN
	END
