	INTEGER FUNCTION CHECK_HEADER_SEQUENCE(LOWER,UPPER)
C
***	MODULE CHECK_HEADER_SEQUENCE
***	IDENT 03AU88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			2 August 1988
C
C Routine to check that the sequence numbers (held in the 79 & 80
C characters of all the separate sequences in an MGD77 header block
C read from tape) of successive sequences are ascending, consecutive
C and start and end with the 'LOWER' and 'UPPER' limits passed.
C The header block to be validated is assumed to be held in
C BLOCK_BUFFER in /MGD2I/.
C
	IMPLICIT NONE
C
C common blocks
	INCLUDE	'LSL$MGD2I:MGD2I.CMN'
	INCLUDE 'LSL$MGD2I:MGD2IMSG.PAR'
C
C arguments
	INTEGER	LOWER	! initial sequence number
	INTEGER	UPPER	! final sequence number
C
C w/s
	INTEGER	CURRENT_SEQUENCE ! current sequence number
	INTEGER	PNTR		 ! pointer to seq num in buffer
	BYTE	SEQ_TEXT(2)	 ! required sequence number (in text)
C
C functions

C
C Assume success
C
	CHECK_HEADER_SEQUENCE = MGD2I__NORMAL
C
C Loop to check all required sequences
C
	DO 100 CURRENT_SEQUENCE = LOWER, UPPER
C
C Set up pointer to sequence number (held as two characters eg '01'
C or '45') within block buffer
C
	   PNTR = (CURRENT_SEQUENCE - LOWER + 1) * 80 - 1
C
C Convert the current sequence number into two characters, held
C in a byte buffer, and padded with zeros
C
	   CALL EXPAND('%W%P0%I2',SEQ_TEXT,CURRENT_SEQUENCE)
C
C Check that the expanded sequence number text matches the
C two characters in the block buffer
C
	   IF (	(BLOCK_BUFFER(PNTR  ).NE.SEQ_TEXT(1)).OR.
     &		(BLOCK_BUFFER(PNTR+1).NE.SEQ_TEXT(2))) THEN
C
C Set return code to indicate problem
C
	      CHECK_HEADER_SEQUENCE = MGD2I__SEQOUTOFORD
C
C Report the problem
C
	      CALL LSL_PUTMSG(CHECK_HEADER_SEQUENCE,CURRENT_SEQUENCE)
	   ENDIF
C
C Loop to examine next sequence
C
100	CONTINUE	   
C
C Exit
C
	RETURN
	END
