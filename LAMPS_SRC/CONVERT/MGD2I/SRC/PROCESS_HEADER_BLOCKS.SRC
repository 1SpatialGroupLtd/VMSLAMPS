	INTEGER FUNCTION PROCESS_HEADER_BLOCKS()
C
***	MODULE PROCESS_HEADER_BLOCKS
***	IDENT 03AU88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			2 August 1988
C
C Routine to process the MGD77 header block(s) (up to 4 type 1 
C headers, and no type 2 headers)
C The header blocks are read from tape and transferred to a single
C feature in layer 0 of the IFF file, where the data is held in
C AC entries
C The feature code (in FS entry) is specified with the /FC command 
C qualifier and will be the same as for the features to which the
C data records are written
C
C This routine assumes that the IFF header information has all
C been written, and will start to write layer 0 (from NO to EO)
C at the current position in the currently selected IFF 
C file
C
	IMPLICIT NONE
C
C common blocks
	INCLUDE	'LSL$MGD2I:MGD2I.CMN'
	INCLUDE 'LSL$MGD2I:MGD2IMSG.PAR'
	INCLUDE 'LSL$CMNLSL:MTIVCM.CMN'
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'
C
C w/s
	INTEGER	NUM_HEADER_1		! number of type 1 headers
	INTEGER	NUM_HEADER_2		! number of type 2 headers
	INTEGER	I			! temporary count variable
C
C functions
	INTEGER	READ_HEADER_BLOCK	! read next hdr block from tape
	INTEGER	READ_BLOCK		! read next block from tape
	INTEGER	START_LAYER		! start layer entry in iff file
	INTEGER	FINISH_LAYER		! finish layer entry in iff file
	INTEGER	START_FEATURE		! start ftr entry in iff file
	INTEGER	FINISH_FEATURE		! finish ftr entry in iff file
	INTEGER	WRITE_FIRST_HEADER	! write first hdr blk ACs to ftr
	INTEGER	WRITE_EXTRA_HEADER	! write extra hdr blk ACs to ftr
	INTEGER	WRITE_ZS		! write ZS entry to iff file
C
C Assume success
C
	PROCESS_HEADER_BLOCKS = MGD2I__NORMAL
C
C Read the first header block into the buffer in the common block
C
	PROCESS_HEADER_BLOCKS = READ_HEADER_BLOCK()
C
C Check for errors
C
	IF (.NOT.PROCESS_HEADER_BLOCKS) GOTO 900
C
C Determine how many type 1 and 2 header blocks
C Type 1 held as a character in the 23rd character position (1-4)
C Type 2 held as a character in the 24rd character position (0)
C
	NUM_HEADER_1 = BLOCK_BUFFER(23) - ICHAR('0')
	NUM_HEADER_2 = BLOCK_BUFFER(24) - ICHAR('0')
C
C Now the block has been read successfully, we can create the
C new layer 0 to hold the header feature
C
	PROCESS_HEADER_BLOCKS = START_LAYER(0)
C
C Check for errors
C
	IF (.NOT.PROCESS_HEADER_BLOCKS) GOTO 900
C
C Create the feature (FSN 1, FC as specified in command line) to
C hold all the header information in its AC entries
C
	PROCESS_HEADER_BLOCKS = START_FEATURE(1,FC)
C
C Check for errors
C
	IF (.NOT.PROCESS_HEADER_BLOCKS) GOTO 900
C
C Now write the AC entries for the first header block, which will
C be in the buffer in the common block
C
	PROCESS_HEADER_BLOCKS = WRITE_FIRST_HEADER()
C
C Check for errors
C
	IF (.NOT.PROCESS_HEADER_BLOCKS) GOTO 900
C
C Now write the ACs for any subsequent type 1 header blocks
C
	DO 10 I = 2,NUM_HEADER_1
C
C Read the next header block
C
	   PROCESS_HEADER_BLOCKS = READ_HEADER_BLOCK()
C
C Check for errors
C
	   IF (.NOT.PROCESS_HEADER_BLOCKS) GOTO 900
C
C Write the ACs for this header block
C
	   PROCESS_HEADER_BLOCKS = WRITE_EXTRA_HEADER(I)
C
C Check for errors
C
	   IF (.NOT.PROCESS_HEADER_BLOCKS) GOTO 900
C
10	CONTINUE

C
C Write the ZS entry for this header feature
C It will be at 0,0,0 for the moment, but will be updated
C later to be the bottom left corner of the map.
C
C Remember current file position to allow later update of this
C entry.
C
	HEADER_ZS_POSITION = LPOSE
C
C Write dummy ZS coordinates
C
	PROCESS_HEADER_BLOCKS = WRITE_ZS(0,0,0)
C
C Check for errors
C
	IF (.NOT.PROCESS_HEADER_BLOCKS) GOTO 900
C
C Finish the feature containing the header infomation
C
	PROCESS_HEADER_BLOCKS = FINISH_FEATURE()
C
C Check for errors
C
	IF (.NOT.PROCESS_HEADER_BLOCKS) GOTO 900
C
C Finish layer 0, containing the header feature
C
	PROCESS_HEADER_BLOCKS = FINISH_LAYER()
C
C Check for errors
C
	IF (.NOT.PROCESS_HEADER_BLOCKS) GOTO 900
C
C Check that there are no type 2 headers, skip them if there are
C
	IF (NUM_HEADER_2.GT.0) THEN
C
C Warn the user that type 2 headers are being skipped
C
	   CALL LSL_PUTMSG(MGD2I__SKIPHDR2)
C
C Now start loop to skip type 2 header blocks
C
	   DO 20 I = 1,NUM_HEADER_2
C
C Read block as if it were data
C
	      PROCESS_HEADER_BLOCKS = READ_BLOCK()
C
C Check for, and report, any errors
C
	      IF (.NOT.PROCESS_HEADER_BLOCKS) THEN
C
C Report primary error
C
	         CALL LSL_PUTMSG(PROCESS_HEADER_BLOCKS)
C
C If the problem was a system error, report that too
C
	         IF (PROCESS_HEADER_BLOCKS.EQ.LSL__SYSERR)
     &				CALL LSL_ADDMSG(MTIERR)
C
C Finally exit from the routine
C
	         GOTO 900
	      ENDIF
C
20	   CONTINUE
	ENDIF
C
C Exit
C
900	RETURN
	END
