C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-08-11 12:49:10.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION READ_HEADER_BLOCK()
C
***	MODULE READ_HEADER_BLOCK
***	IDENT 03AU88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			2 August 1988
C
C Routine to read a type 1 header block from a MGD77 tape
C It will check on its size and record type identifier and warn
C the user of any deviation from the expected 1920 bytes and
C record type "1"
C
	IMPLICIT NONE
C
C common blocks
	INCLUDE	'LSL$MGD2I:MGD2I.CMN'
	INCLUDE 'LSL$MGD2I:MGD2IMSG.PAR'
	INCLUDE 'LSL$CMNLSL:MTIVCM.CMN'
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'
C
C w/s
C
C functions
	INTEGER	READ_BLOCK	! routine to read block from magtape
C
C Assume success
C
	READ_HEADER_BLOCK = MGD2I__NORMAL
C
C Read the next block from the tape into the common block buffer
C
	READ_HEADER_BLOCK = READ_BLOCK()
C
C Check for any errors in performing the read operation
C
	IF (.NOT.READ_HEADER_BLOCK) THEN
C
C Report overall error
C
	   CALL LSL_PUTMSG(READ_HEADER_BLOCK)
C
C If this was a system error, report the specific system error
C as held in the common block variable
C
	   IF (READ_HEADER_BLOCK.EQ.LSL__SYSERR) 
     &		CALL LSL_ADDMSG(MTIERR)
	ENDIF
C
C Check that the first character in the buffer is "1", indicating
C a type 1 record i.e. header
C
	IF (BLOCK_BUFFER(1).NE.'1') THEN
C
C Warn of illegal record type, but attempt to continue
C
	   CALL LSL_PUTMSG(MGD2I__ILLEGHDR1TYP)
	ENDIF
C
C Check that the block is of the appropriate length 
C BLOCK_SIZE (1920 bytes) for a type 1 header
C
	IF (BLOCK_COUNT.NE.BLOCK_SIZE) THEN
C
C Warn of illegal record length, but attempt to continue
C
	   CALL LSL_PUTMSG(MGD2I__ILLEGHDR1LEN)
	ENDIF
C
C Exit
C
	RETURN
	END
