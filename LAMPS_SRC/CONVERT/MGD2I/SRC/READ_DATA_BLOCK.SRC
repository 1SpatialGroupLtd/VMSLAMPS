C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-08-11 12:49:04.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION READ_DATA_BLOCK(MORE)
C
***	MODULE READ_DATA_BLOCK
***	IDENT 03AU88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			2 August 1988
C
C Routine to read a data block from a MGD77 tape
C It will check on its first record type identifier and warn
C the user of any deviation from the expected record type "3"
C If the record is of less than 1920 bytes, or an EOF is found instead
C of a data block, then the 'MORE' return argument will be set to
C false to indicate that there is no more data to be read after
C the current block.
C If an EOF is read, the BLOCK_COUNT will also be set to 0 to indicate
C that there is no data in the current block.
C
	IMPLICIT NONE
C
C common blocks
	INCLUDE	'LSL$MGD2I:MGD2I.CMN'
	INCLUDE 'LSL$MGD2I:MGD2IMSG.PAR'
	INCLUDE 'LSL$CMNLSL:MTIVCM.CMN'
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'
C
C arguments
	LOGICAL	MORE		! .T. if there may be more data
				! blocks after the current one
C
C functions
	INTEGER	READ_BLOCK	! routine to read block from magtape
C
C Assume success
C
	READ_DATA_BLOCK = MGD2I__NORMAL
C
C Assume that this is not the last block, and set flag to indicate
C that there are more to come
C
	MORE = .TRUE.
C
C Read the next block from the tape into the common block buffer
C
	READ_DATA_BLOCK = READ_BLOCK()
C
C Check for an end of file condition
C
	IF (READ_DATA_BLOCK.EQ.LSL__EOF) THEN
C
C Set the MORE flag to be false (no more data blocks to be read)
C
	   MORE = .FALSE.
C
C Set the BLOCK_COUNT variable to 0 (no data in this block)
C
	   BLOCK_COUNT = 0
C
C Set the return code to indicate normal successful completion
C
	   READ_DATA_BLOCK = MGD2I__NORMAL
C
C Check for any general errors in performing the read operation
C
	ELSEIF (.NOT.READ_DATA_BLOCK) THEN
C
C Report overall error
C
	   CALL LSL_PUTMSG(READ_DATA_BLOCK)
C
C If this was a system error, report the specific system error
C as held in the common block variable
C
	   IF (READ_DATA_BLOCK.EQ.LSL__SYSERR) 
     &		CALL LSL_ADDMSG(MTIERR)
C
C Set flag to indicate that no further data blocks are to be read
C
	   MORE = .FALSE.
C
C And set block count to indicate that no data is in this block
C
	   BLOCK_COUNT = 0
C
C Check that the first character in the buffer is "3", indicating
C a data record is the first thing in this block
C
	ELSEIF (BLOCK_BUFFER(1).NE.'3') THEN
C
C Warn of illegal record type, but attempt to continue
C
	   CALL LSL_PUTMSG(MGD2I__ILLEGDATATYP)
C
C Check that the block is of full length (1920 bytes)
C for a data block
C
	ELSEIF (BLOCK_COUNT.NE.1920) THEN
C
C If it is not full length, assume that it is the last one on the
C tape and clear the MORE flag to FALSE to indicate there are no
C further blocks to be expected on the tape
C
	   MORE = .FALSE.
	ENDIF
C
C Exit
C
	RETURN
	END
