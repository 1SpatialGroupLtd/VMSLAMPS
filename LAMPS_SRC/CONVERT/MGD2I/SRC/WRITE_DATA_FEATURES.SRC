	INTEGER FUNCTION WRITE_DATA_FEATURES()
C
***	MODULE WRITE_DATA_FEATURES
***	IDENT 03AU88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			2 August 1988
C
C Routine to write the ordinary sounding/data features,
C including NF, FS, ZS, ACs and EF, into layer 1.
C These features have previously been read from the MGD77 tape
C into the buffer in the MGD2I common block.
C
	IMPLICIT NONE
C
C common blocks
	INCLUDE	'LSL$MGD2I:MGD2I.CMN'
	INCLUDE 'LSL$MGD2I:MGD2IMSG.PAR'
C
C w/s
	INTEGER	I
C
C functions
	INTEGER	START_FEATURE
	INTEGER	FINISH_FEATURE
	INTEGER	WRITE_DATA_ZS	! to write ZS entry for data record
	INTEGER	WRITE_DATA_AC	! to write AC entries for data record
C
C Assume success
C
	WRITE_DATA_FEATURES = MGD2I__NORMAL
C
C Check that there is some data in this block to be written
C to the IFF file - exit if there is none
C
	IF (BLOCK_COUNT.EQ.0) GOTO 900
C
C Now start a loop to write out each record/feature in turn
C Since each record is 120 chars long, the number in the current
C block is BLOCK_COUNT / DATA_REC_LEN.
C
	DO 20 I = 1, (BLOCK_COUNT/DATA_REC_LEN)
C
C First, check if either the longitude or latitude for this feature
C is undefined (i.e. a '9' in the sign column).
C If either (or both) is undefined, then we have nowhere to put it
C so don't bother creating it.
C
	   IF ((BLOCK_BUFFER(((I-1)*DATA_REC_LEN+28)).EQ.ICHAR('9')).OR.
     &	       (BLOCK_BUFFER(((I-1)*DATA_REC_LEN+36)).EQ.ICHAR('9')))
     &	      GOTO 20
C
C Next, write out the entries (NF,FS) at the start of the feature 
C for this sounding, including the next FSN and the FC specified 
C in the command line.
C
	   WRITE_DATA_FEATURES = START_FEATURE(NEXT_FSN,FC)
C
C Check for errors
C
	   IF (.NOT.WRITE_DATA_FEATURES) GOTO 900
C
C Increment the next available FSN
C
	   NEXT_FSN = NEXT_FSN + 1
C
C Deal with each sounding attribute in turn, and write it to
C the feature as an AC entry
C
	   WRITE_DATA_FEATURES = 
     &		WRITE_DATA_AC(BLOCK_BUFFER((I-1)*DATA_REC_LEN+1))
C
C Check for errors
C
	   IF (.NOT.WRITE_DATA_FEATURES) GOTO 900
C
C Calculate the x (longitude), y (latitude) and z (corrected depth)
C for the current sounding point (to go into ZS entry)
C Then write them into that ZS entry
C This routine stores the first point in the common block
C variables for the local origin and subtracts that local origin
C from all the points in the data. It also stores the range of
C coordinate values so far encountered in the common block range
C variables.
C
	   WRITE_DATA_FEATURES = 
     &		WRITE_DATA_ZS(BLOCK_BUFFER((I-1)*DATA_REC_LEN+1))
C
C Check for errors
C
	   IF (.NOT.WRITE_DATA_FEATURES) GOTO 900
C
C Now finish this feature
C
	   WRITE_DATA_FEATURES = FINISH_FEATURE()
C
C Check for errors
C
	   IF (.NOT.WRITE_DATA_FEATURES) GOTO 900
20	CONTINUE
C
C Exit
C
900	RETURN
	END
