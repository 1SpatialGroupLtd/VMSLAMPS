C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-08-29 11:21:50.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION WRITE_DATA_ZS(DATA_RECORD)
C
***	MODULE WRITE_DATA_ZS
***	IDENT 29AU91
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			2 August 1988
C
C Routine to extract the x (longitude), y (latitude) and
C z (depth) values from the data record passed as the argument
C It will also deal with the local origin (taken to be the first point)
C and range determination calculations, storing the results in
C appropriate common block variables.
C
C See specification of tape format for explanation of the position
C of each item within the data record
C
	IMPLICIT NONE
C
C common blocks
	INCLUDE	'LSL$MGD2I:MGD2I.CMN'
	INCLUDE 'LSL$MGD2I:MGD2IMSG.PAR'
C
C arguments
	BYTE	DATA_RECORD(DATA_REC_LEN) ! data record in question
C
C w/s
	REAL	LONG		! x i.e. longitude
	REAL	LAT		! y i.e. latitude
	REAL	DEPTH		! z i.e. corrected depth
	INTEGER	CONV		! used in string-real conversion
C
C functions
	INTEGER	CONVERT_INTEGER	! converts specified buffer/length
				! to an integer
	INTEGER	WRITE_ZS	! write ZS entry
C
C Declare IFF_ABSENT:
	INTEGER*4	IFF_ABSENT
	PARAMETER	(IFF_ABSENT='80000000'X)
C
	INTEGER*4	LDUMMY
	REAL*4		RDUMMY
	EQUIVALENCE	(RDUMMY,LDUMMY)
C 
C ......................................................................
C
C Indirectly create REAL representation of IFF_ABSENT
	LDUMMY = IFF_ABSENT
C
C ......................................................................
C
C Assume success
C
	WRITE_DATA_ZS = MGD2I__NORMAL
C
C Convert longitude, which is wanted as DDD.FFFFF, and is stored
C as DDDFFFFF in a string, to an integer
C
	WRITE_DATA_ZS = CONVERT_INTEGER(DATA_RECORD(37),8,CONV)
C
C Check for errors
C
	IF (.NOT.WRITE_DATA_ZS) GOTO 900
C
C Convert integer representation of longitude to a real by dividing
C
	LONG = FLOAT(CONV) / 100000
C
C Determine if the longitude is negative, and alter its value if needed
C
	IF (DATA_RECORD(36).EQ.'-') LONG = - LONG
C
C Convert latitude, which is wanted as DD.FFFFF, and is stored
C as DDFFFFF in a string, to an integer
C
	WRITE_DATA_ZS = CONVERT_INTEGER(DATA_RECORD(29),7,CONV)
C
C Check for errors
C
	IF (.NOT.WRITE_DATA_ZS) GOTO 900
C
C Convert integer representation of latitude to a real by dividing
C
	LAT = FLOAT(CONV) / 100000
C
C Determine if the latitude is negative, and alter its value if needed
C
	IF (DATA_RECORD(28).EQ.'-') LAT = - LAT
C
C Convert depth, which is wanted as DDDDD.F, and is stored
C as DDDDDF in a string, to an integer
C
	WRITE_DATA_ZS = CONVERT_INTEGER(DATA_RECORD(52),6,CONV)
C
C Check for errors
C
	IF (.NOT.WRITE_DATA_ZS) GOTO 900
C
C Convert integer representation of depth to a real by dividing
C
	IF (CONV.EQ.99999) THEN
	   DEPTH = RDUMMY
	ELSE
	   DEPTH = FLOAT(CONV) / 10
	ENDIF
C
C Check whether this is the first point, if it is, then store
C it in the local origin variables in the common block
C
	IF (.NOT.HAD_FIRST_POINT) THEN
C
C Store this, the first point, because it might be useful later.
C Originally this was used as the local origin, but this idea
C has now been abandoned.
C
	   FIRST_POINT(1) = LONG
	   FIRST_POINT(2) = LAT
C
C Set the range figures to be the coordinates of the first point.
C
	   IFF_RANGE(1) = LONG
	   IFF_RANGE(2) = LONG
	   IFF_RANGE(3) = LAT
	   IFF_RANGE(4) = LAT
C
C Set flag to indicate that we have had the first point
C
	   HAD_FIRST_POINT = .TRUE.
	ENDIF
C
C Now adjust the current point's long (x) and lat (y) so that they
C are relative to the local origin.
C This idea has been abandoned.
C
C	LONG = LONG - FIRST_POINT(1)
C	LAT  = LAT  - FIRST_POINT(2)
C
C Now whether this point extends the range in any direction
C
	IF (LONG.LT.IFF_RANGE(1)) IFF_RANGE(1) = LONG	! Xmin
	IF (LONG.GT.IFF_RANGE(2)) IFF_RANGE(2) = LONG	! Xmax
	IF (LAT .LT.IFF_RANGE(3)) IFF_RANGE(3) = LAT	! Ymin
	IF (LAT .GT.IFF_RANGE(4)) IFF_RANGE(4) = LAT	! Ymax
C
C Finally, actually write the ZS entry
C With x=long, y=lat, z=depth
C
	WRITE_DATA_ZS = WRITE_ZS(LONG,LAT,DEPTH)
C
C Check for errors
C
	IF (.NOT.WRITE_DATA_ZS) GOTO 900
C
C Exit
C
900	RETURN
	END
