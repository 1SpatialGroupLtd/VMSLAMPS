C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-08-23 19:50:32.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION OUTPUT_BLOCK_DIAGNOSTICS(STATUS)
C
***	MODULE OUTPUT_BLOCK_DIAGNOSTICS
***	IDENT 03AU88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			2 August 1988
C
C Routine to output brief details of the current block, if
C these have been requested with the /DIAGNOSTICS qualifier.
C
	IMPLICIT NONE
C
C common blocks
	INCLUDE	'LSL$MGD2I:MGD2I.CMN'
	INCLUDE 'LSL$MGD2I:MGD2IMSG.PAR'
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE 'LSL$CMNLSL:MTIVCM.CMN'
C
C arguments
	INTEGER	STATUS		! error return code from reading block
C
C w/s
C
C functions
C
C Assume success
C
	OUTPUT_BLOCK_DIAGNOSTICS = MGD2I__NORMAL
C
C Check that diagnostics are required (test flag set on basis
C of whether /DIAGNOSTICS was present on the command line
C Exit if they are not required
C
	IF (.NOT.WANT_DIAGNOSTICS) GOTO 900
C
C Test whether read the block caused an EOF error i.e. it is a tapemark
C Report it if it is, including the number of block on tape
C
	IF (STATUS.EQ.LSL__EOF) THEN
	   CALL WRITEF('Block %I6    : Tapemark (EOF)',(MTINBL+1))
C
C Test whether there was an error while reading the block
C
	ELSEIF (.NOT.STATUS) THEN
	   CALL WRITEF('Block %I6    : Error while reading',(MTINBL+1))
C
C Deal with other (successfully read) blocks
C
	ELSE
C
C Report the block number and its length
C
	   CALL WRITEF('Block %I6    : %N bytes long',
     &						(MTINBL),BLOCK_COUNT)
C
C For non-zero length blocks, print out the first (up to) 40 bytes
C
	   IF (BLOCK_COUNT.GT.0) THEN
	      CALL WRITEF('First few bytes : %A40',BLOCK_BUFFER)
	   ENDIF
	ENDIF
C
C Exit
C
900	RETURN
	END
