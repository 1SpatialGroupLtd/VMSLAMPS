C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-08-23 22:21:34.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION WRITE_FIRST_HEADER()
C
***	MODULE WRITE_FIRST_HEADER
***	IDENT 03AU88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing	   	2 August 1988
C
C Routine to write the AC entries to the output IFF file associated
C with the first type 1 header block
C
	IMPLICIT NONE
C
C common blocks
	INCLUDE	'LSL$MGD2I:MGD2I.CMN'
	INCLUDE 'LSL$MGD2I:MGD2IMSG.PAR'
C
C w/s
	INTEGER	I		! temporary index
	INTEGER	BASE		! base of current sequence within block
				! buffer (i.e. offset from start)
	INTEGER	NUM_10_DEG_ID	! number of ten degree square 
				! identifiers in header
C
C functions
	INTEGER	WRITE_AC	! to write specified section
	   	   		! of block to an AC entry
	INTEGER	CHECK_HEADER_SEQUENCE ! to validate sequence numbers
				! within block buffer
	INTEGER	REPLACE_CHARACTER ! replace specified character in a
				! byte buffer with another specified
				! character
	LOGICAL	RDLONG		! read longword integer from input
				! text buffer
C
C Assume success
C
	WRITE_FIRST_HEADER = MGD2I__NORMAL
C
C First, check that the sequence numbers are legal
C i.e. that characters 79-80 in successive records represent the
C numbers 01-24
C
	WRITE_FIRST_HEADER = CHECK_HEADER_SEQUENCE(1,24)
C
C Now write the ACs for this first header block
C
C Sequence number 1
C Formula to calculate first byte of Nth sequence is
C
C 	(N - 1) * 80
C
	BASE = (1 - 1) * 80
C
C Cruise identifier
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Cruise_ID',BLOCK_BUFFER(BASE+2),8,TEXT_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Format acronym (MGD77)
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Format_acronym',BLOCK_BUFFER(BASE+10),5,TEXT_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Data centre file number
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Data_centre_no',BLOCK_BUFFER(BASE+15),8,INTEGER_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Number of type 1 headers
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Type_one_headers',BLOCK_BUFFER(BASE+23),1,INTEGER_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Number of type two headers
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Type_two_headers',BLOCK_BUFFER(BASE+24),1,INTEGER_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Number of data parameters
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Data_Parameters',BLOCK_BUFFER(BASE+25),2,INTEGER_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Now, for the parameters surveyed code, unspecified can be either
C 0 or blank, so convert any blanks (spaces) into zero
C
	WRITE_FIRST_HEADER = REPLACE_CHARACTER(
     &	   BLOCK_BUFFER(27),	! base address in block buffer
     &	   5,			! number of characters
     &	   ' ',			! character to be replaced if found
     &	   '0')			! character with which to replace
C
C Check for errors in doing substitution
C
	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Parameters surveyed code - bathymetry
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Survey_code_bathy',BLOCK_BUFFER(BASE+27),1,INTEGER_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Parameters surveyed code - magnetics
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Survey_code_mag',BLOCK_BUFFER(BASE+28),1,INTEGER_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Parameters surveyed code - gravity
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Survey_code_grav',BLOCK_BUFFER(BASE+29),1,INTEGER_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Parameters surveyed code - high resolution seismics
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Survey_code_H_res',BLOCK_BUFFER(BASE+30),1,INTEGER_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Parameters surveyed code - deep penetration seismics
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Survey_code_D_pen',BLOCK_BUFFER(BASE+31),1,INTEGER_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C File creation date (YYMMDD)
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_File_Creation',BLOCK_BUFFER(BASE+32),6,DATE_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Contributing institution
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Contributing_inst',BLOCK_BUFFER(BASE+38),41,TEXT_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Sequence number 2
C
	BASE = (2-1) * 80
C
C Country
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Country',BLOCK_BUFFER(BASE+1),18,TEXT_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Platform name
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Platform_name',BLOCK_BUFFER(BASE+19),21,TEXT_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Platform type code
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Platform_type_code',BLOCK_BUFFER(BASE+40),1,INTEGER_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Platform type
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Platform_type',BLOCK_BUFFER(BASE+41),6,TEXT_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Chief scientist(s)
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Chief_scientist',BLOCK_BUFFER(BASE+47),32,TEXT_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Sequence number 3
C
	BASE = (3-1) * 80
C
C Project, cruise and leg
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Project_cruise_leg',BLOCK_BUFFER(BASE+1),58,TEXT_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Funding
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Funding',BLOCK_BUFFER(BASE+59),20,TEXT_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Sequence number 4
C
	BASE = (4-1) * 80
C
C Survey departure date (YYMMDD)
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Survey_departure',BLOCK_BUFFER(BASE+1),6,DATE_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Port of departure
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Port_of_departure',BLOCK_BUFFER(BASE+7),34,TEXT_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Survey arrival date (YYMMDD)
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Survey_arrival',BLOCK_BUFFER(BASE+41),6,DATE_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Port of arrival
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Port_of_arrival',BLOCK_BUFFER(BASE+47),32,TEXT_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Sequence number 5
C
	BASE = (5-1) * 80
C
C Navigation instrumentation
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Navigation_instr',BLOCK_BUFFER(BASE+1),40,TEXT_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Position determination method
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Pos_determ_method',BLOCK_BUFFER(BASE+41),38,TEXT_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Sequence number 6
C
	BASE = (6-1) * 80
C
C Bathymetry instrumentation
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Bathy_instr',BLOCK_BUFFER(BASE+1),40,TEXT_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Additional forms of bathymetry data
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Add_bathy_data',BLOCK_BUFFER(BASE+41),38,TEXT_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Sequence number 7
C
	BASE = (7-1) * 80
C
C Magnetics instrumentation
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Magnetics_instr',BLOCK_BUFFER(BASE+1),40,TEXT_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Additional forms of magnetics data
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Add_mag_data',BLOCK_BUFFER(BASE+41),38,TEXT_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Sequence number 8
C
	BASE = (8-1) * 80
C
C Gravity instrumentation
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Gravity_instr',BLOCK_BUFFER(BASE+1),40,TEXT_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Additional forms of gravity data
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Add_gravity_data',BLOCK_BUFFER(BASE+41),38,TEXT_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Sequence number 9
C
	BASE = (9-1) * 80
C
C Seismic instrumentation
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Seismic_instr',BLOCK_BUFFER(BASE+1),40,TEXT_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Formats of seismic data
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Form_seismic_data',BLOCK_BUFFER(BASE+41),38,TEXT_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Sequence number 12 (skip 10 and 11 which deal with the format
C description of the block contents)
C
	BASE = (12-1) * 80
C
C General digitising rate of bathymetry
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Dig_rate_bathy',BLOCK_BUFFER(BASE+1),3,REAL_AC,1)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C General sampling rate of bathymetry
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Samp_rate_bathy',BLOCK_BUFFER(BASE+4),12,TEXT_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Assumed sound velocity
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Assumed_sound_vel',BLOCK_BUFFER(BASE+16),5,REAL_AC,1)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Bathymetry datum code
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Bathy_datum_code',BLOCK_BUFFER(BASE+21),2,INTEGER_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Interpolation scheme
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Interpolation',BLOCK_BUFFER(BASE+23),56,TEXT_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Sequence number 13
C
	BASE = (13-1) * 80
C
C General digitising rate of magnetics
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Dig_rate_mag',BLOCK_BUFFER(BASE+1),3,REAL_AC,1)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C General sampling rate of magnetics
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Samp_rate_mag',BLOCK_BUFFER(BASE+4),2,INTEGER_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Magnetic sensor tow distance
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Mag_sensor_towdist',BLOCK_BUFFER(BASE+6),4,INTEGER_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Sensor depth
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Mag_sensor_depth',BLOCK_BUFFER(BASE+10),5,REAL_AC,1)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Horizontal sensor separation
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Mag_hor_sensor_sep',BLOCK_BUFFER(BASE+15),3,INTEGER_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Residual magnetics determination reference field code
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Mag_ref_field_code',BLOCK_BUFFER(BASE+18),2,INTEGER_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Reference field
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Reference_field',BLOCK_BUFFER(BASE+20),12,TEXT_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Method of applying residual field
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_M_O_A_residual',BLOCK_BUFFER(BASE+32),47,TEXT_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Sequence number 14
C
	BASE = (14-1) * 80
C
C General digitising rate of gravity
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Dig_rate_gravity',BLOCK_BUFFER(BASE+1),3,REAL_AC,1)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C General sampling rate of gravity
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Samp_rate_gravity',BLOCK_BUFFER(BASE+4),2,INTEGER_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Theoretical gravity formula code
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Gravity_form_code',BLOCK_BUFFER(BASE+6),1,INTEGER_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Theoretical gravity formula
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Gravity_formula',BLOCK_BUFFER(BASE+7),17,TEXT_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Reference system code
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Ref_system_code',BLOCK_BUFFER(BASE+24),1,INTEGER_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Reference system
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Reference_system',BLOCK_BUFFER(BASE+25),16,TEXT_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Corrections applied
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Correction_applied',BLOCK_BUFFER(BASE+41),38,TEXT_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Sequence number 15
C
	BASE = (15-1) * 80
C
C Departure base station gravity
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Dep_base_stn_grav',BLOCK_BUFFER(BASE+1),7,REAL_AC,1)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Departure base station description
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Dep_base_stn_descr',BLOCK_BUFFER(BASE+8),33,TEXT_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Arrival base station gravity
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Arr_base_stn_grav',BLOCK_BUFFER(BASE+41),7,REAL_AC,1)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C Arrival base station description
C
	WRITE_FIRST_HEADER = WRITE_AC(
     &	   'M_Arr_base_stn_descr',BLOCK_BUFFER(BASE+48),31,TEXT_AC)
C
C Check for errors
C
C	IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
C
C Sequence numbers 16 and 17, which contain ten degree square
C identifiers
C
	BASE = (16-1) * 80
C
C Check field containing number of ten degree square identifiers
C If field is not a legal number, skip part to read in identifiers
C If number of identifiers is zero, skip part to read in identifiers
C
C Set text input buffer
C
	CALL SETAUX(BLOCK_BUFFER(BASE+1),2)
C
C Read number from buffer, and check if it is legal or non-zero
C
	IF (RDLONG(NUM_10_DEG_ID)) GOTO 30
	IF (NUM_10_DEG_ID.EQ.0) GOTO 30
C
C Reset text input buffer
C
	CALL BSLN
C
C Otherwise, read the ten degree identifiers
C The lower limit of the loop is the start of the identifiers
C in sequence number 16, the upper limit is the start in sequence 17,
C and the step is the gap, in the block buffer, between these two.
C
	DO 20 BASE = (((16-1)*80)+4), (((17-1)*80)+1), (80-3)
C
C Now deal with the 15 10-degree identifiers in current sequence.
C These consist of 4 digit integers separated by commas and terminated
C by a '9999' code
C
	   DO 10 I = 0,14
C
C Test if current code is the terminator '9999'
C
	      If ((BLOCK_BUFFER(BASE+(I*5)+0).EQ.ICHAR('9')).AND.
     &		  (BLOCK_BUFFER(BASE+(I*5)+1).EQ.ICHAR('9')).AND.
     &		  (BLOCK_BUFFER(BASE+(I*5)+2).EQ.ICHAR('9')).AND.
     &		  (BLOCK_BUFFER(BASE+(I*5)+3).EQ.ICHAR('9'))) GOTO 30
C
C Output square identifier if it is not terminator
C
	      WRITE_FIRST_HEADER = WRITE_AC(
     &			'M_Ten_degree_ident',
     &			 BLOCK_BUFFER(BASE+(I*5)),
     &			 4,
     &			 INTEGER_AC)
C
C Check for errors
C
C	      IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
10	   CONTINUE
20	CONTINUE
C
C Exit point from loops when terminating '9999' found, or
C if no ten degree squares found
C
30	CONTINUE
C
C Reset text input buffer (in case jump straight here from
C code to read the number of ten degree ids)
C
	CALL BSLN
C
C Now deal with sequence numbers 18-24, which hold additional
C documentation fields
C
	DO 40 BASE = (((18-1)*80)),(((24-1)*80)),80
C
C Additional documentation field
C
	   WRITE_FIRST_HEADER = WRITE_AC(
     &	      'M_Additional_doc',BLOCK_BUFFER(BASE+1),78,TEXT_AC)
C
C Check for errors
C
C	   IF (.NOT.WRITE_FIRST_HEADER) GOTO 900
C
40	CONTINUE
C
C Exit
C
900	RETURN
	END
