C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1997-03-03 13:48:40.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION OBEY_QUALS
C
***     MODULE OBEY_QUALS
***     IDENT	03MR97
C
C	Copyright Laser-Scan Ltd, Cambridge, England
C	Author					 	 IM 10-Jun-1987
C
C	Modified					TJI 30-Sep-1987
CMOD	Handle NTF level 3 output			VLG 09-Feb-1990
CMOD	Add qualifiers for DBHREC information		VLG 06-Jun-1990
CMOD	Bug fix to part which reads DONOR field	 	 SG 26-Sep-1991
CMOD	Fix to correct SG's incorrect DONOR fix	 	 ST 14-Apr-1992
CMOD	FRTINI moved here from RDATT so that 
C	/CITF can find it				 JB 13-Nov-1992
CMOD	New /VERSION qualifier added (W93/12)    	 ST 20-May-1993
CMOD    Modified to work correctly with the		 ST 12-Jan-1994
C       /PARAMETER qualifier. No longer unsets
C       each qualifier set via OBEY_LINE by using
C       the local variable, HAD_IT. Mod 1329.
CMOD1511Cope with /DDATE = "date" or /DDATE = date,
C       along with /FCDATE, /DDNAME, /FCNAME etc.	 JB 10-OCT-1995
CMOD    Implement CITF96 changes (WI/CC 1545)           TJM 20-May-1996
C
C
C Interprets the current set of command qualifiers
C
	IMPLICIT NONE
C 
C Commons:
	INCLUDE 	'LSL$CMNLSL:CLD.CMN'
	INCLUDE		'LSL$CMNLSL:FILENAME.CMN'
	INCLUDE		'FILENAME.CMN'
	INCLUDE 	'COMMANDS.CMN'
C
C Messages:
	INCLUDE 	'I2NTFMSG.PAR'
	INCLUDE		'LSL$CMNLSL:LSLLIBMSG.PAR'
C
C Functions:
	INTEGER		DCL_FILE
	INTEGER		DCL_QUAL	! Read a qualifier
	INTEGER 	DCL_STR		! Read a string from command line
	INTEGER 	DCL_INT		! Read an integer 
	INTEGER		DCL_REAL	! Read a real
	LOGICAL		FRTINI		! init frt reading
C
C Parameters
	CHARACTER*1	SQUOTE,DQUOTE
	PARAMETER	(SQUOTE='''')
	PARAMETER	(DQUOTE='"')
C
C Workspace:
	INTEGER		CMD		! Command number
	LOGICAL 	OK,FAILED	! Function return
	LOGICAL 	HAD_VERSION	! make this local
	LOGICAL 	HAD_IT
	LOGICAL 	ABSENT
	LOGICAL 	FPRES
	LOGICAL 	FNEGA		! Command negated flag
C
C Assume failure:
C
	OBEY_QUALS=.FALSE.
C
C ....................................................................
C Read the commands	
C.....................................................................
C XY_LEN switch
C
	OK=DCL_QUAL('XY_LEN',HAD_IT,FPRES,FNEGA,.TRUE.)
	IF (.NOT.OK) GOTO 999
	IF (HAD_IT) THEN
	   HAD_XYLEN = .TRUE.		! only set it if it's there
C      					! otherwise it'll get unset later
C If the qualifier was given, get the value 
	   OK=DCL_INT('XY_LEN',.TRUE.)
	   IF (.NOT.OK) GOTO 999
	   XY_LEN=IARRAY(1)
	ENDIF	   
C.....................................................................
C Z_LEN switch
C
	OK=DCL_QUAL('Z_LEN',HAD_IT,FPRES,FNEGA,.TRUE.)
	IF (.NOT.OK) GOTO 999
	IF (HAD_IT) THEN
	   HAD_ZLEN = .TRUE.
C If the qualifier was given, get the value 
	   OK=DCL_INT('Z_LEN',.TRUE.)
	   IF (.NOT.OK) GOTO 999
	   Z_LEN=IARRAY(1)
	ENDIF
C.....................................................................
C DIFF_HT_LEN switch
C
	OK=DCL_QUAL('DIFF_HT_LEN',HAD_IT,FPRES,FNEGA,.TRUE.)
	IF (.NOT.OK) GOTO 999
	IF (HAD_IT) THEN
	   HAD_DIFFHTLEN = .TRUE.
C
C If the qualifier was given, get the value 
	   OK=DCL_INT('DIFF_HT_LEN',.TRUE.)
	   IF (.NOT.OK) GOTO 999
	   DIFF_HT_LEN=IARRAY(1)
	ENDIF
C.....................................................................
C XY_MULT switch
C
	OK=DCL_QUAL('XY_MULT',HAD_IT,FPRES,FNEGA,.TRUE.)
	IF (.NOT.OK) GOTO 999
	IF (HAD_IT) THEN
	   HAD_XYMULT = .TRUE.
C
C If the qualifier was given, get the value 
	   OK=DCL_REAL('XY_MULT',.TRUE.)
	   IF (.NOT.OK) GOTO 999
	   XY_MULT=RARRAY(1)
C
	   IF (XY_MULT.EQ.0.0) THEN
	      CALL LSL_PUTMSG(I2NTF__MULTZERO)
	      OK = I2NTF__MULTZERO
	      GOTO 999
	   ENDIF
	ENDIF	   
C.....................................................................
C Z_MULT switch
C
	OK=DCL_QUAL('Z_MULT',HAD_IT,FPRES,FNEGA,.TRUE.)
	IF (.NOT.OK) GOTO 999
	IF (HAD_IT) THEN
	   HAD_ZMULT = .TRUE.
C
C If the qualifier was given, get the value 
	   OK=DCL_REAL('Z_MULT',.TRUE.)
	   IF (.NOT.OK) GOTO 999
	   Z_MULT=RARRAY(1)
C
	   IF (Z_MULT.EQ.0.0) THEN
	      CALL LSL_PUTMSG(I2NTF__MULTZERO)
	      OK = I2NTF__MULTZERO
	      GOTO 999
	   ENDIF
	ENDIF	   
C.....................................................................
C Z_DATUM - value to insert into the section header record
C	    NOTE that this is only used to record that all the heights
C	    were in fact offset - there is no attempt to subtract this
C	    value from all heights
C
	OK=DCL_QUAL('Z_DATUM',HAD_IT,FPRES,FNEGA,.TRUE.)
	IF (.NOT.OK) GOTO 999
	IF (HAD_IT) THEN
	   HAD_ZDATUM = .TRUE.
C
C If the qualifier was given, get the value 
	   OK=DCL_INT('Z_DATUM',.TRUE.)
	   IF (.NOT.OK) GOTO 999
	   Z_DATUM = IARRAY(1)
	ENDIF
C.....................................................................
C Z_UNIT
C
	OK=DCL_QUAL('Z_UNIT',HAD_IT,FPRES,FNEGA,.TRUE.)
	IF (.NOT.OK) GOTO 999
	IF (HAD_IT) THEN
	   HAD_ZUNIT = .TRUE.
C
C If the qualifier was given, get the value 
	   OK=DCL_INT('Z_UNIT',.TRUE.)
	   IF (.NOT.OK) GOTO 999
	   Z_UNIT=IARRAY(1)
	ENDIF
C.....................................................................
C COPYRIGHT
C
	OK=DCL_QUAL('COPYRIGHT',HAD_IT,FPRES,FNEGA,.TRUE.)
	IF (.NOT.OK) GOTO 999
	IF (HAD_IT) THEN
	   HAD_COPY = .TRUE.
C
C If the qualifier was given, get the value 
	   OK=DCL_INT('COPYRIGHT',.TRUE.)
	   IF (.NOT.OK) GOTO 999
C
C Check that it makes some basic form of sense - specifically, just
C check that it contains a year in this century (or after), or that
C it is explicitly zero (ie no copyright at all)
C
	   IF (IARRAY(1).LT.19000000.AND.IARRAY(1).NE.0) THEN
	      CALL LSL_PUTMSG(I2NTF__COPYRT)
	      GOTO 999
	   ENDIF
C
	   CALL EXPAND('%WS%P0%I8',CCOPYRIGHT,IARRAY(1))
	ENDIF	   
C.......................................................................
C VERSION switch
C
	OK=DCL_QUAL('VERSION',HAD_IT,FPRES,FNEGA,.TRUE.)
	IF (.NOT.OK) GOTO 999
	IF (HAD_IT) THEN
	   HAD_VERSION = .TRUE.
C
	   OK = DCL_REAL('VERSION',.TRUE.)
	   IF (.NOT.OK) GOTO 999
	   VERSION = RARRAY(1)
	ENDIF
C
	IF (VERSION.EQ.1.1 .OR. IS_MAGTAPE .OR. SERIAL_MAG) THEN
	   EOR_CHAR = CHAR(13)		! <CR>
	ELSEIF (VERSION.EQ.2.0) THEN
	   EOR_CHAR = CHAR(37)		! '%'
	ELSE
	   CALL LSL_PUTMSG(I2NTF__BADVER,2.0)
	   EOR_CHAR = CHAR(37)		! '%'
	   VERSION = 2.0
	ENDIF
C
C Don't allow /WATER_DISTRIB at Version 2.0
C
	IF (VERSION.EQ.2.0 .AND. WATER_DISTRIB) THEN
	   CALL LSL_PUTMSG(I2NTF__NOTSUPPORTED)
	   OK = I2NTF__NOTSUPPORTED
	   GOTO 999
	ENDIF
C
C.......................................................................
C LEVEL switch
C
	OK=DCL_QUAL('LEVEL',HAD_IT,FPRES,FNEGA,.TRUE.)
	IF (.NOT.OK) GOTO 999
	IF (HAD_IT) THEN
	   HAD_LEVEL = .TRUE.
C
C If the qualifier was given get the value 1 (deflt), 2 or 3 or
C set level 5 for CITF
C
	   OK = DCL_INT('LEVEL',.TRUE.)
	   IF (.NOT.OK) GOTO 999
	   LEVEL = IARRAY(1)
	ENDIF
C
	IF (HAD_CITF93.OR.HAD_CITF96) THEN
C Check level 5 for CITF data
C
	   IF (LEVEL.NE.5) THEN
	     CALL LSL_PUTMSG(I2NTF__CITFLEVEL5)
	     LEVEL = 5					! default level 5 
	   ENDIF
	ELSE
	   IF (HAD_LEVEL) THEN
	      IF (LEVEL.LT.1 .OR. LEVEL .GT.3) THEN
		 CALL LSL_PUTMSG(I2NTF__NOLEVEL, LEVEL)
		 LEVEL = 2				! default level 2
	      ENDIF
	   ELSE
	      LEVEL = 2					! default level 2
	   ENDIF
	ENDIF
C
C If we are at level 1 then field widths may not be changed - check
	IF (LEVEL.EQ.1 .AND. (XY_LEN.NE.10 .OR. Z_LEN.NE.6)) THEN
	   CALL LSL_PUTMSG(I2NTF__NOWIDTH)		! And warn
	   XY_LEN = 10
	   Z_LEN  = 6
	ENDIF
C.......................................................................
C FIXED switch
C
C If we've had this qualifier in the command line, or already read it
C from the parameter file then skip this.
	IF (.NOT.FIXED) THEN
	   OK = DCL_QUAL('FIXED',HAD_IT,FPRES,FNEGA,.TRUE.)
	   IF (HAD_IT) FIXED = .TRUE.
	   IF (.NOT.OK) GOTO 999
	ENDIF
C.......................................................................
C ROUND switch
C
C If we've had this qualifier in the command line, or already read it
C from the parameter file then skip this.
	IF (.NOT.HAD_ROUND) THEN
	   OK = DCL_QUAL('ROUND',HAD_IT,FPRES,FNEGA,.TRUE.)
	   IF (HAD_IT) HAD_ROUND = .TRUE.
	   IF (.NOT.OK) GOTO 999
	ENDIF
C.......................................................................
C POINT_SIZE switch
C
	OK = DCL_QUAL('POINT_SIZE',HAD_IT,FPRES,FNEGA,.TRUE.)
	IF (HAD_IT) HAD_POINT = .TRUE.
C
	IF (.NOT.OK) GOTO 999
C.......................................................................
C RECIPIENT qualifier 
C
	OK=DCL_QUAL('RECIPIENT',HAD_IT,FPRES,FNEGA,.TRUE.)
	IF (.NOT.OK) GOTO 999
	IF (HAD_IT) THEN
	   HAD_RECIPIENT = .TRUE.
C
	   OK=DCL_STR('RECIPIENT',.TRUE.)
	   IF (.NOT.OK) GOTO 999
C
C remove any quotation marks from around the recipient name
C
	   IF ( CARRAY(1)(1:1).EQ.SQUOTE .OR.
     &		CARRAY(1)(1:1).EQ.DQUOTE ) THEN
	      CARRAY(1)  = CARRAY(1)(2:)
	      STR_LEN(1) = STR_LEN(1) - 1
	      IF ( CARRAY(1)(STR_LEN(1):STR_LEN(1)).EQ.SQUOTE .OR.
     &		   CARRAY(1)(STR_LEN(1):STR_LEN(1)).EQ.DQUOTE ) THEN
	         CARRAY(1)  = CARRAY(1)(1:STR_LEN(1)-1)
	         STR_LEN(1) = STR_LEN(1) - 1
	      ENDIF
	   ENDIF
C
	   RECIP = CARRAY(1)(1:STR_LEN(1))
	   IF (STR_LEN(1).GT.20) THEN
	      CALL LSL_PUTMSG(I2NTF__LONGMSG,'RECIP',20)
	      CALL LSL_ADDSTR(RECIP(1:20))
	   ENDIF
	ENDIF
C.....................................................................
C DONOR qualifier
C
	OK=DCL_QUAL('DONOR',HAD_IT,FPRES,FNEGA,.TRUE.)
	IF (.NOT.OK) GOTO 999
C
C If the qualifier was given, get the value 
C
	IF (HAD_CITF93.OR.HAD_CITF96) THEN
	   DONOR = ' '
	ELSE
	  IF (HAD_IT) THEN
	     HAD_DONOR = .TRUE.
	     OK=DCL_STR('DONOR',.TRUE.)
	     IF (.NOT.OK) GOTO 999
C**
C**		BUG if donors name is less than 2 characters long
C**	    DONOR=CARRAY(1)(2:STR_LEN(1)-1)
C**
C
C Fixed incorrectly to read...
C
C	    DONOR=CARRAY(1)(1:STR_LEN(1)-1)
C
C Should read...
C
C	 remove any quotation marks from around the recipient name
C
	     IF ( CARRAY(1)(1:1).EQ.SQUOTE .OR.
     &		  CARRAY(1)(1:1).EQ.DQUOTE ) THEN
		CARRAY(1)  = CARRAY(1)(2:)
		STR_LEN(1) = STR_LEN(1) - 1
		IF ( CARRAY(1)(STR_LEN(1):STR_LEN(1)).EQ.SQUOTE .OR.
     &		     CARRAY(1)(STR_LEN(1):STR_LEN(1)).EQ.DQUOTE ) THEN
		   CARRAY(1)  = CARRAY(1)(1:STR_LEN(1)-1)
		   STR_LEN(1) = STR_LEN(1) - 1
		ENDIF
	     ENDIF
C       
	     DONOR = CARRAY(1)(1:STR_LEN(1))
	     IF (STR_LEN(1).GT.20) THEN
		CALL LSL_PUTMSG(I2NTF__LONGMSG,'DONOR',20)
		CALL LSL_ADDSTR(DONOR(:20))
	     ENDIF
	  ENDIF
	ENDIF
C..................................................................
C SERIAL qualifier
C
	OK=DCL_QUAL('SERIAL',HAD_IT,FPRES,FNEGA,.TRUE.)
	IF (.NOT.OK) GOTO 999
	IF (HAD_IT) THEN
	   HAD_SERIAL = .TRUE.
C
C If the qualifier was given, get the value 
	   OK=DCL_INT('SERIAL',.TRUE.)
	   IF (.NOT.OK) THEN
	      CALL LSL_PUTMSG(I2NTF__NOTINT)
	      GOTO 999
	   ELSE IF (IARRAY(1).GT.9999) THEN
	      CALL LSL_PUTMSG(I2NTF__NOTINT)
	      OK = I2NTF__NOTINT
	      GOTO 999
	   ELSE
	      SERIAL=IARRAY(1)
	   ENDIF
	ENDIF	
C.....................................................................
C /FRT qualifier
C
C If we've had this qualifier in the command line, or already read it
C from the parameter file then skip this.
C
	IF (HAD_FRT) GOTO 601
C
	OK = DCL_QUAL('FRT'		! qual. name
     &        		,HAD_IT		! returned .T. if qual. found
     &			,FPRES		! set if qual local to parameter
     &			,FNEGA		! set if qual. negated locally
     &			,.TRUE.)	! set-local error reporting
	IF (.NOT.OK) GOTO 999
	IF (HAD_IT) THEN
	   HAD_FRT = .TRUE.
C
C If we have the qualifier, get the filename
	   OK = DCL_FILE('FRT'		! qualifier
     &		,'LSL$FRT:.FRT'		! default file-name
     &		,ABSENT			! set if no file-name
     &		,.FALSE.		! don't expect list of files
     &          ,.TRUE.)		! set-local error reporting
	   IF (.NOT.OK) GOTO 999
C
C Set file-spec 
C
	   FRTFIL = FILARY(1)(1:FIL_LEN(1))
	   FRTLEN = FIL_LEN(1)
C
C Read the FRT file
	   FAILED = FRTINI(FRTFIL(:FRTLEN))		!open the FRT file
	   IF (FAILED) THEN				!failure
	      CALL LSL_PUTMSG(I2NTF__ERROPNFRT,FRTFIL(:FRTLEN) )
	      OK = I2NTF__ABORT
	      GOTO 999
	   ENDIF
	   IF (HAD_CITF93.OR.HAD_CITF96) CALL CITF_CHECK_ATTS()
	ENDIF
C
601	CONTINUE
C .....................................................................
C /ATTRIBUTE_FILE qualifier
C
C If we've had this qualifier in the command line, or already read it 
C from the parameter file then skip this.
C
	IF (HAD_ATTRIBUTE) GOTO 602
C
	OK = DCL_QUAL('ATTRIBUTE_FILE',HAD_IT,FPRES,FNEGA,.TRUE.)
	IF (.NOT.OK) GOTO 999
	IF (HAD_IT) THEN
	   HAD_ATTRIBUTE = .TRUE.
C
	   OK = DCL_FILE('ATTRIBUTE_FILE','.NTF_ATTR;0',
     &			  ABSENT,.TRUE.,.TRUE.)
	   IF (.NOT.OK) GOTO 999
	   ATTFIL = FILARY(1)(1:FIL_LEN(1))
	   ATTLEN = FIL_LEN(1)
	ENDIF
C
602	CONTINUE
C
C .......................................................................
C /FEATCLASS_FILE qualifier
C
C If we've had this qualifier in the command line, or already read it 
C from the parameter file then skip this.
C
	IF (HAD_FEATCLASS) GOTO 603
C
	OK = DCL_QUAL('FEATCLASS_FILE',HAD_IT,FPRES,FNEGA,.TRUE.)
	IF (.NOT.OK) GOTO 999
C
	IF (HAD_IT) THEN
	   HAD_FEATCLASS = .TRUE.
C
	   OK=DCL_FILE('FEATCLASS_FILE','.NTF_FEAT;0',
     &			ABSENT,.TRUE.,.TRUE.)
	   IF (.NOT.OK) GOTO 999
	   FEATFIL = FILARY(1)(1:FIL_LEN(1))
	   FEATLEN = FIL_LEN(1)
	ENDIF
C
603	CONTINUE
C
C
C............................................................................
C /FC_LOOKUP qualifier
C
C If we've had this qualifier in the command line, or already read it 
C from the parameter file then skip this.
C
	IF (HAD_FC_LOOKUP) GOTO 604
C
	OK=DCL_QUAL('FC_LOOKUP',HAD_IT,FPRES,FNEGA,.TRUE.)
        IF (.NOT.OK) GOTO 999
C
        IF (HAD_IT) THEN
	   HAD_FC_LOOKUP = .TRUE.
C
           OK=DCL_FILE('FC_LOOKUP','.FC_L;0',ABSENT,.TRUE.,.TRUE.)
           IF (.NOT.OK) GOTO 999
           LUTFIL = FILARY(1)(1:FIL_LEN(1))
           LUTLEN = FIL_LEN(1)
        ENDIF
C
604	CONTINUE
C
C
C....................................................................
C DBNAME qualifier
C
	OK = DCL_QUAL('DBNAME',HAD_IT,FPRES,FNEGA,.TRUE.)
	IF (.NOT.OK) GOTO 999
	IF (HAD_IT) THEN
	   HAD_DBNAME = .TRUE.
C
C If the qualifier was given, get the value 
	   OK=DCL_STR('DBNAME',.TRUE.)
	   IF (.NOT.OK) GOTO 999
C
	   IF (CARRAY(1)(1:1).EQ. DQUOTE .OR.
     &         CARRAY(1)(1:1).EQ. SQUOTE) THEN
	      DBNAME=CARRAY(1)(2:STR_LEN(1)-1)
	      STR_LEN(1) = STR_LEN(1) - 2
	   ELSE
	      DBNAME=CARRAY(1)(1:STR_LEN(1))
	      STR_LEN(1) = STR_LEN(1)
	   ENDIF
C
	   IF (STR_LEN(1).GT.20) THEN
 	      CALL LSL_PUTMSG(I2NTF__LONGMSG,'DBNAME',20)
	      CALL LSL_ADDSTR(DBNAME(:20))
	   ENDIF
	ELSE				! If not given, use RECIP
           IF (DBNAME.EQ.' ') DBNAME = RECIP
	ENDIF
C
C.....................................................................
C DDNAME qualifier
C
	OK=DCL_QUAL('DDNAME',HAD_IT,FPRES,FNEGA,.TRUE.)
	IF (.NOT.OK) GOTO 999
C
	IF (HAD_IT) THEN
	   HAD_DDNAME = .TRUE.
C
C If the qualifier was given, get the value 
	   OK=DCL_STR('DDNAME',.TRUE.)
	   IF (.NOT.OK) GOTO 999
C
	   IF (CARRAY(1)(1:1).EQ. SQUOTE .OR.
     &	       CARRAY(1)(1:1).EQ. DQUOTE ) THEN
	      DDNAME=CARRAY(1)(2:STR_LEN(1)-1)
 	      STR_LEN(1) = STR_LEN(1) - 2
	   ELSE
	      DDNAME=CARRAY(1)(1:STR_LEN(1))
	      STR_LEN(1) = STR_LEN(1)
	   ENDIF
C
	   IF (STR_LEN(1).GT.20) THEN
 	      CALL LSL_PUTMSG(I2NTF__LONGMSG,'DDNAME',20)
	      CALL LSL_ADDSTR(DDNAME(:20))
	   ENDIF
	ENDIF
C.....................................................................
C DDATE qualifier
C
	OK=DCL_QUAL('DDATE',HAD_IT,FPRES,FNEGA,.TRUE.)
	IF (.NOT.OK) GOTO 999
C
	IF (HAD_IT) THEN
	   HAD_DDATE = .TRUE.
C
C If the qualifier was given, get the value 
	   OK=DCL_STR('DDATE',.TRUE.)
	   IF (.NOT.OK) GOTO 999
C
	   IF (CARRAY(1)(1:1).EQ.SQUOTE .OR.
     &         CARRAY(1)(1:1).EQ.DQUOTE ) THEN
	      DDATE=CARRAY(1)(2:STR_LEN(1)-1)
	      STR_LEN(1) = STR_LEN(1) - 2
	   ELSE
	      DDATE=CARRAY(1)(1:STR_LEN(1))
	      STR_LEN(1) = STR_LEN(1)
	   ENDIF
C
	   IF (STR_LEN(1).GT.8) THEN
 	      CALL LSL_PUTMSG(I2NTF__LONGMSG,'DDATE',8)
	      CALL LSL_ADDSTR(DDATE(:8))
	   ENDIF
	ENDIF
C......................................................................
C FCNAME qualifier
C
	OK=DCL_QUAL('FCNAME',HAD_IT,FPRES,FNEGA,.TRUE.)
	IF (.NOT.OK) GOTO 999
	IF (HAD_IT) THEN
	   HAD_FCNAME = .TRUE.
C
C If the qualifier was given, get the value 
	   OK=DCL_STR('FCNAME',.TRUE.)
	   IF (.NOT.OK) GOTO 999
C
	   IF (CARRAY(1)(1:1).EQ.SQUOTE .OR.
     &         CARRAY(1)(1:1).EQ.DQUOTE ) THEN
	      FCNAME=CARRAY(1)(2:STR_LEN(1)-1)
	      STR_LEN(1) = STR_LEN(1) - 2
	   ELSE
	      FCNAME=CARRAY(1)(1:STR_LEN(1))
	      STR_LEN(1) = STR_LEN(1)
	   ENDIF
C
	   IF (STR_LEN(1).GT.20) THEN
 	      CALL LSL_PUTMSG(I2NTF__LONGMSG,'FCNAME',20)
	      CALL LSL_ADDSTR(FCNAME(:20))
	   ENDIF
	ENDIF
C.....................................................................
C FCDATE qualifier
C
	OK=DCL_QUAL('FCDATE',HAD_IT,FPRES,FNEGA,.TRUE.)
	IF (.NOT.OK) GOTO 999
C
	IF (HAD_IT) THEN
	   HAD_FCDATE = .TRUE.
C
C If the qualifier was given, get the value 
	   OK=DCL_STR('FCDATE',.TRUE.)
	   IF (.NOT.OK) GOTO 999
C
	   IF (CARRAY(1)(1:1).EQ. SQUOTE .OR.
     &         CARRAY(1)(1:1).EQ. DQUOTE ) THEN
	      FCDATE=CARRAY(1)(2:STR_LEN(1)-1)
	      STR_LEN(1) = STR_LEN(1) - 2
	   ELSE
	      FCDATE=CARRAY(1)(1:STR_LEN(1))
	      STR_LEN(1) = STR_LEN(1)
	   ENDIF
C
	   IF (STR_LEN(1).GT.8) THEN
 	      CALL LSL_PUTMSG(I2NTF__LONGMSG,'FCDATE',8)
	      CALL LSL_ADDSTR(FCDATE(:8))
	   ENDIF
	ENDIF
C.....................................................................
C and join errors
C
9000 	OBEY_QUALS=.TRUE.
C
999	RETURN
	END
C
