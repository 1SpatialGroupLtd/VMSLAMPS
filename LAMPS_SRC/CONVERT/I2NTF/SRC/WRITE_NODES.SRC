C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-05-24 18:43:16.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION WRITE_NODES
C
***     MODULE WRITE_NODES
***     IDENT	24MY93
C
C	Copyright Laser-Scan Ltd, Cambridge, England
C
C	Author					        VLG  15-Feb-1990
CMOD	Implement pen up argument in GEOMETRY routine	VLG  01-Jun-1990
CMOD	Ignore links with geom_id set to zero		VLG  21-Jun-1990
CMOD	BS7567 (v2.0) support added (W93/12)		 ST  24-May-1993
C 
C Outputs NODEREC records (along with associated GEOMETRY records if not yet 
C output), used at level 3.
C
	IMPLICIT NONE
C
C Messages:
	INCLUDE 'I2NTFMSG.PAR'
C
C Common:
	INCLUDE 'FTRCMN.CMN'
	INCLUDE 'COMMANDS.CMN'
	INCLUDE 'NODECMN.CMN'
C
C Function:
	LOGICAL		GEOMETRY
C
C Workspace:
	LOGICAL		OK
	LOGICAL		HAD_LNK
	REAL    	COORDS(2,2)
	INTEGER		I,J
	INTEGER		DIRECTION
	INTEGER		NODE
	INTEGER		GEOM
	INTEGER		NARMS
	INTEGER		ARMS
	INTEGER		TEMP
	INTEGER		LNK_GEOM
C
	CHARACTER*12	TMPSTORE	!  Temporary coordinate store
	CHARACTER*80	STRING		!  NTF output record
	INTEGER*2	LENGTH		!  of STRING
	INTEGER 	CPOS		!  Current position in STRING
C
C .........................................................................
	NODE_ID = 0
C
	DO 100 I = 1,NCOUNT
	   HAD_LNK = .FALSE.
	   NODE_ID = NODE_ID + 1
	   NODE = I
	   IF (NODES(I,3).EQ.0) THEN
	      NODES(I,3) = GEOM_ID + 1
	   ENDIF
	   GEOM = NODES(I,3)
	   ARMS = NODES(I,4)
	   NARMS = ARMS
	   IF (ARMS.EQ.0) GOTO 70	    ! ignore unconnected node
C	   CALL EXPAND('%WS% 16%I6%I6%I4',STRING,NODE_ID,GEOM,NARMS)
	   CALL EXPAND('%WS% 16%P0%I6%I6%I4',STRING,NODE_ID,GEOM,NARMS)
	   CPOS = 19
	   IF (ST_STORE(I,7).NE.0) THEN		! missing link
	      IF (ST_STORE(I,7).EQ.ARMS) GOTO 70 ! no links found - ignore node
	      CALL LSL_PUTMSG(I2NTF__MISSLNK,NODE_ID)
	   ENDIF
C
	   DO 60 J=1,ARMS
	      TEMP = ST_STORE(I,J)
	      IF (TEMP.EQ.0) THEN	!Ignore link
		 NARMS = NARMS - 1
C	         CALL EXPAND('%WS% 16%I6%I6%I4',STRING,NODE_ID,GEOM,
	         CALL EXPAND('%WS% 16%P0%I6%I6%I4',STRING,NODE_ID,GEOM,
     &						NARMS)
	         GOTO 60
	      ENDIF
	      IF (NARMS.EQ.0) GOTO 70
	      IF ( CPOS+12.GE.79 ) THEN
C	         STRING(79:79) = '1'		! need a continuation
C	         LENGTH = 80
	         STRING(CPOS:CPOS) = '1'	! need a continuation
	         LENGTH = CPOS+1
	         CALL WSTR(STRING,LENGTH)	! write this record
	         CALL EXPAND('%WS% 00',STRING)	! continuation record
	         CPOS = 3			! next free character
	      ENDIF
	      IF (TEMP.GT.GEOM_ID) TEMP = 0	! Link GEOMETRY invalid
	      IF (TEMP.LT.0) THEN
	         DIRECTION = 2
		 LNK_GEOM = ABS(TEMP)
		 HAD_LNK = .TRUE.
	      ELSEIF (TEMP.GT.0) THEN
	         DIRECTION = 1
		 LNK_GEOM = TEMP
		 HAD_LNK = .TRUE.
	      ELSE			! Missing link - output as 'no data'
		 TMPSTORE = '      0     '
		 GOTO 50
	      ENDIF
	      WRITE (TMPSTORE,49) DIRECTION,LNK_GEOM	! Omit ORIENT and LEVEL
49	      FORMAT(I1,I6,'     ')
50	      STRING(CPOS:CPOS+12) = TMPSTORE
	      CPOS = CPOS+12
60	   CONTINUE
70	   IF (HAD_LNK) THEN
	      LENGTH = CPOS + 2			! Finish the record
	      STRING( LENGTH -1:LENGTH -1)='0'
	      CALL WSTR(STRING,LENGTH)
	      IF (GEOM.GT.GEOM_ID) THEN		! Output GEOMETRY record
	         COORDS(1,1) = NODE_GEOMS(I,1)*XY_MULT
	         COORDS(2,1) = NODE_GEOMS(I,2)*XY_MULT
	         OK = GEOMETRY(2,1,1,COORDS,.FALSE.,.FALSE.,.TRUE.,
	1						.TRUE.,.TRUE.,0)
		 IF (.NOT.OK) GOTO 999
	      ENDIF
	   ELSE 
	      NODE_ID = NODE_ID - 1
	   ENDIF
100	CONTINUE
C
	OK = .TRUE.
C
999	WRITE_NODES = OK
	RETURN
	END
C
