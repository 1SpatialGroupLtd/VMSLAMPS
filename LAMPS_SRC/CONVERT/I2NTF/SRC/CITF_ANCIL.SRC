C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-10-15 18:35:12.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE CITF_ANCIL(GOT_ATTRIB,NUM_RECORDS,ATTREC,ATTLEN,ATTSPLIT,
     &						IELEN,SUCCESS)
C
***     MODULE CITF_ANCIL
***     IDENT	15OC96
C
C	Copyright Laser-Scan Ltd, Cambridge, England
C	Author					       IMcL	05-Aug-1989
C
CMOD	Copied from ANCIL for CITF		       JB	17-Dec-1992
CMOD    Implement CITF96 fixes   (WI/CC 1547)          TJM      08-Aug-1996
C
C	Build attribute records for output
C	Returns SUCCESS = .TRUE. on success
C
	IMPLICIT NONE
C
C Arguments:
	LOGICAL		GOT_ATTRIB	! If we have a valid attrib. record
	INTEGER*2	NUM_RECORDS	! Number of attribute records
	INTEGER*2	IELEN		! Length of IFF AC entry
	CHARACTER*255	ATTREC(*)	! Attribute records
	INTEGER		ATTLEN(*)	! Length of attribute records
	LOGICAL		ATTSPLIT(*)	! Is attribute is splittable
	LOGICAL		SUCCESS		! TRUE if succeed
	LOGICAL		FIELD		! was it a field AC
	CHARACTER*80	TMPSTORE	! for numbers to write into
C
C Common:
	INCLUDE 	'LSL$CMNIFF:CB.STR'	! for IFF_ABSENT
	INCLUDE 	'LSL$CMNFRT:FRTACD.CMN'	! default attribute info
	INCLUDE 	'HERE:ATTRIBUTE.CMN'	! Att. desc. table
	INCLUDE		'HERE:COMMANDS.CMN'
	INCLUDE		'HERE:CITFATTS.CMN'	! default NTF attribs
	INCLUDE		'HERE:FTRCMN.CMN'
C
C Messages:
	INCLUDE 	'HERE:I2NTFMSG.PAR'
C
C Functions:
	INTEGER*2	EXPAND
C
C Local parameters
	BYTE		BLANK
	PARAMETER	(BLANK = ' ')
C
C Workspace:
	INTEGER*2	I,J,K		! Loop counters
	INTEGER*2	ATNO		! Pointer to the attribute tables
	INTEGER*2	ACTYPE		! Type of AC
	INTEGER		LCODE		! Value (interpretation depends
					!         on the AC type )
C
	INTEGER		WIDTH		! Format for output
	INTEGER		TYPE
	INTEGER		MULT
	LOGICAL		DEFAULT		! Default format
	INTEGER		CITF_IND	! Index in CITF AC array
C
	INTEGER*2	RDARR(3)	! Temp storage for ACTYPE,LCODE
	EQUIVALENCE	(ACTYPE, RDARR(1))
	EQUIVALENCE	(LCODE , RDARR(2))
C
	INTEGER		I_VALUE
	REAL		R_VALUE		! Separate storage for LCODE so
					! we can convert to integer
	EQUIVALENCE	(LCODE,R_VALUE)
C
	BYTE		TEXT(255)	! Optional text string
	CHARACTER*255	CTEXT		! character version
	EQUIVALENCE	(TEXT,CTEXT)
C
	CHARACTER*255	VALUE		! Field to be put into record
	INTEGER*2	RLEN		! Length of VALUE
	INTEGER*2	LEN		! Length of STRING
C
	INTEGER*4	MONTH		! for date AC's
C
	CHARACTER*12	DATE,TIME	! Temp storage
C
	LOGICAL		SPLIT		! can the attribute be split across
C      					! physical records?
	INTEGER*2	LENGTH		! of TEXT
	CHARACTER*3	MONTHS(12)	! JAN, FEB,...,DEC
C	CHARACTER*6	NODATA(6)	! what field should hold if no data
	CHARACTER*12	NODATA(6)	! what field should hold if no data
C
	DATA MONTHS /	'JAN','FEB','MAR','APR','MAY','JUN',
     &			'JUL','AUG','SEP','OCT','NOV','DEC' /
C
C These empty fields only exist for Int, Real and Character fields
C
	DATA NODATA/'00000000000','000000000000','    ',' ',' ',' '/
C
	SUCCESS = .TRUE.		! assume success
	FIELD   = .FALSE.		! assume not a field AC
	DEFAULT = .FALSE.
C
C.........................................................................
C Get the attribute code (type)
C
	CALL EIHRI (RDARR,3,1)
C
C Check the existence in the ACD table, and get any feature AC field values
C
	CALL CITF_FIELD_AC(IELEN,SUCCESS,FIELD)
	IF (.NOT.SUCCESS) GOTO 999	! warning already given
C
	IF (FIELD) GOTO 999		! was field AC, do no more with it
C
C .........................................................................
C First see if it's an attribute number we know something about
C
	ATNO = 0			! Start at the beginning
C
10	DO 150 I=ATNO+1,ATTR_PTR
	   IF (ACTYPE.EQ.IFF_ATT_NUM(I)) THEN
	      ATNO = I			! Save AC table index
	      GOTO 155
	   ENDIF
150	CONTINUE
C
	IF (LOG .AND. HAD_ATTRIBUTE)
     &			CALL LSL_PUTMSG(I2NTF__ACNOTATT,ACTYPE,FSN,ISN)
C
	GOTO 999				! It ain't
C
C Now check if the NTF attribute exists in the default list
C
155	CONTINUE
C
11	DO 160 J=1,NUM_CITF_ATTS
	   IF (CITF_DEF_ATT(J).EQ.NTF_ATT_NAME(ATNO)) THEN
	      CITF_IND = J
	      DEFAULT  = .TRUE.
	      GOTO 165
	   ENDIF
160	CONTINUE
C
	GOTO 200		! not default
C
165	CONTINUE
C
	TYPE  = CITF_DEF_TYPE(J)
	WIDTH = CITF_DEF_WIDTH(J)
	MULT  = CITF_DEF_MULT(J)
C .......................................................................
C Integer
	IF (TYPE.EQ.ACD_DATATYPE_I) THEN
	   WRITE (TMPSTORE,1111) (LCODE * MULT)
1111	   FORMAT(I<WIDTH>)
C
	   SPLIT = .FALSE.
	   RLEN = EXPAND('%WS% %S2%S%A1',VALUE,
     &				      CITF_DEF_ATT(CITF_IND),
     &				      TMPSTORE(1:WIDTH),
     &				      DIVIDER)
C .......................................................................
C Real
	ELSEIF (TYPE.EQ.ACD_DATATYPE_R) THEN
	   WRITE (TMPSTORE,1111) NINT(R_VALUE*MULT)
	   SPLIT = .FALSE.
C
	   RLEN = EXPAND('%WS% %S2%S%A1',VALUE,
     &				       CITF_DEF_ATT(CITF_IND),
     &				       TMPSTORE(1:WIDTH),
     &				       DIVIDER)
C
C .......................................................................
C Date
C
	ELSEIF (TYPE.EQ.ACD_DATATYPE_D) THEN
	   SPLIT = .FALSE.
C
C Check for unset
C
	   IF (LCODE.EQ.0 .OR. LCODE.EQ.IFF_ABSENT) THEN
	      RLEN = EXPAND('%WS%P0%S2%S8%A1',VALUE,NTF_ATT_NAME(ATNO),
     &						'00000000',DIVIDER)
	      GOTO 800
	   ENDIF
C
C The date needs some converting, it comes as an integer...
C
	   CALL EXPAND('%WS%P0%DD',DATE,LCODE)
C
C ...which has now been expanded into the form dd-mmm-yyyy, but NTF 
C wants yyyymmdd
C
C First translate the month from chars (e.g. 'APR') into integer (03)
C
	   DO 101 J=1,12		! Check which month
	      IF (DATE(4:6).EQ.MONTHS(J)) THEN
	         MONTH = J
		 GOTO 103
	      ENDIF
101	   CONTINUE
C
103	   IF (DATE(1:1).EQ.' ') DATE(1:1) = '0'
C
C Then re-write the date in the new order
C
	   RLEN = EXPAND('%WS%P0%S2%S4%I2%S2%A1',VALUE,
     &						NTF_ATT_NAME(ATNO),
     &						DATE(8:11),
     &						MONTH,
     &						DATE(1:2),
     &						DIVIDER)
C .......................................................................
C And Time
C
	ELSEIF (TYPE.EQ.ACD_DATATYPE_T) THEN
	   SPLIT = .FALSE.
C
C There is no time format in NTF so output as a string
C
	   RLEN = EXPAND('%WS%P0%S2%DT%A1',VALUE,NTF_ATT_NAME(ATNO),
     &					   LCODE,DIVIDER)
C
C ....................................................................
C Text string
C
	ELSEIF (TYPE.EQ.ACD_DATATYPE_C .OR. TYPE.EQ.ACD_DATATYPE_TX) THEN
	   SPLIT = (WIDTH.EQ.255) ! variable lengths records are splittable
C
	   LEN = (IELEN-3)*2
C
	   IF (LEN.GT.0) THEN
	      CALL EIHRI(TEXT,IELEN-3,4)
C
C and adjust the length if we have an odd number of characters
C
	      IF (TEXT(LEN).EQ.0) LEN = LEN - 1
	   ELSE
	      LEN = 1
	      TEXT(1) = BLANK
	   ENDIF
C
	   RLEN = EXPAND('%WS% %S2%S%A1', VALUE,
     &					CITF_DEF_ATT(CITF_IND),
     &					CTEXT(1:LEN),
     &					DIVIDER)
C
	ENDIF
C
	GOTO 800		! Create ATTREC
C
C .......................................................................
C Not in default AC block
C Read the value
C 
200	CONTINUE
C
C Integer
C
	IF (ATTR_TRANS(ATNO).EQ.ACD_DATATYPE_I) THEN	
	   SPLIT = .FALSE.
	   IF (LCODE.EQ.0) THEN
	      RLEN = EXPAND('%WS%P0%S2%S11%A1',VALUE,NTF_ATT_NAME(ATNO),
     &				NODATA(ATTR_TRANS(ATNO)),DIVIDER)
	   ELSE
	      RLEN = EXPAND('%WS%P0%S2%I11%A1',VALUE,NTF_ATT_NAME(ATNO),
     &						LCODE,DIVIDER)
	   ENDIF
C .......................................................................
C Real
C
	ELSEIF (ATTR_TRANS(ATNO).EQ.ACD_DATATYPE_R) THEN
	   SPLIT = .FALSE.
	   LCODE = NINT(R_VALUE*1000)	! Convert from R12.3 to an integer
					! NB the ATTDESC tells how to get back
C
	   IF (LCODE.EQ.0) THEN
	      RLEN = EXPAND('%WS%P0%S2%S12%A1',VALUE,NTF_ATT_NAME(ATNO),
     &				NODATA(ATTR_TRANS(ATNO)),DIVIDER)
	   ELSE
	      RLEN = EXPAND('%WS%P0%S2%I12%A1', VALUE,NTF_ATT_NAME(ATNO),
     &						LCODE,DIVIDER)
	   ENDIF
C .......................................................................
C Date
C
	ELSEIF (ATTR_TRANS(ATNO).EQ.ACD_DATATYPE_D) THEN
	   SPLIT = .FALSE.
C
C Check for unset
C
	   IF (LCODE.EQ.0 .OR. LCODE.EQ.IFF_ABSENT) THEN
	      RLEN = EXPAND('%WS%P0%S2%S8%A1',VALUE,NTF_ATT_NAME(ATNO),
     &						'00000000',DIVIDER)
	      GOTO 800
	   ENDIF
C
C The date needs some converting, it comes as an integer...
C
	   CALL EXPAND('%WS%P0%DD',DATE,LCODE)
C
C ...which has now been expanded into the form dd-mmm-yyyy, but NTF 
C wants yyyymmdd
C
C First translate the month from chars (e.g. 'APR') into integer (03)
C
	   DO 201 J=1,12		! Check which month
	      IF (DATE(4:6).EQ.MONTHS(J)) THEN
	         MONTH = J  
		 GOTO 203
	      ENDIF
201	   CONTINUE
C
203	   IF (DATE(1:1).EQ.' ') DATE(1:1) = '0'
C
C Then re-write the date in the new order
C
	   RLEN = EXPAND('%WS%P0%S2%S4%I2%S2%A1',VALUE,
     &						NTF_ATT_NAME(ATNO),
     &						DATE(8:11),
     &						MONTH,
     &						DATE(1:2),
     &						DIVIDER)
C .......................................................................
C And Time
C
	ELSEIF (ATTR_TRANS(ATNO).EQ.ACD_DATATYPE_T) THEN
	   SPLIT = .FALSE.
C
C There is no time format in NTF so output as a string
C
	   RLEN = EXPAND('%WS%P0%S2%DT%A1',VALUE,NTF_ATT_NAME(ATNO),
     &					   LCODE,DIVIDER)
C .......................................................................
C Character
C
	ELSEIF (ATTR_TRANS(ATNO).EQ.ACD_DATATYPE_C) THEN
	   SPLIT = .TRUE.
	   IF (LCODE.EQ.0) THEN
	      RLEN = EXPAND('%WS%P0%S2%S4%A1',VALUE,NTF_ATT_NAME(ATNO),
     &				NODATA(ATTR_TRANS(ATNO)),DIVIDER)
	   ELSE
	      RLEN = EXPAND('%WS%P0%S2%A4%A1',  VALUE,NTF_ATT_NAME(ATNO),
     &						LCODE,DIVIDER)
	   ENDIF
C ....................................................................
C Optional text string
C
	ELSEIF (ATTR_TRANS(ATNO).EQ.ACD_DATATYPE_TX) THEN
	   SPLIT = .TRUE.
C
	   LEN = (IELEN-3)*2
C
	   IF (LEN.GT.0) THEN
	      CALL EIHRI(TEXT,IELEN-3,4)
C
C and adjust the length if we have an odd number of characters
C
	      IF (TEXT(LEN).EQ.0) LEN = LEN - 1
	   ELSE
	      LEN = 1
	      TEXT(1) = BLANK
	   ENDIF
C
	   LEN = MIN(LEN,73)		! Make sure we dont go too far
C
C build the field
C
	   RLEN = EXPAND('%WS% %P0%S2%S%A1',VALUE,NTF_ATT_NAME(ATNO),
     &					    CTEXT(1:LEN),
     &					    DIVIDER)
C
	ENDIF
C
C .......................................................................
C We have built the fields we want to add 
C
800	CONTINUE
C
C Build the records separately
C
CCC	   NO_ATTREC  = NO_ATTREC + 1
	   NUM_RECORDS = NUM_RECORDS + 1
	   GOT_ATTRIB = .TRUE.
	   ATTSPLIT(NUM_RECORDS) = SPLIT
	   ATTLEN(NUM_RECORDS) = EXPAND('%WS% %S',
     &						ATTREC(NUM_RECORDS),
     &						VALUE(1:RLEN))
C	
C.........................................................................
C
999	RETURN
	END
C
