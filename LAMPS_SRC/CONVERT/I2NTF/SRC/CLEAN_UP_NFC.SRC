	SUBROUTINE CLEAN_UP_NFC(LUTABLE)
C
C
C Copyright Laser-Scan Ltd., Cambridge, England.
C
C Author Matt Wenham, 30 October 1996
C
C Finds multiple NTF FC entries and corrects counts in NFC accordingly
C
	IMPLICIT NONE
C
C Commons:
	INCLUDE 'HERE:FTRCMN.CMN'
	INCLUDE 'HERE:LOOKUP.CMN'
C
C Arguments:
	INTEGER		LUTABLE(2,*)	! Lookup table
C
C Workspace:
	INTEGER		I, J, K		! DO loop indices and counters
	INTEGER		IFF_FC		! IFF FC being worked on
        INTEGER 	LOLIM,HILIM	! bounds for binary chop
        INTEGER 	BINPTR		! binary chop pointer
	INTEGER		ITEMP		! Temp storage
C
C  .....................................................................
C
C If DUP_NTF_FC flag not already set, check for FCs appearing in IFC and the
C NTF column of the lookup table, i.e. appearing in the IFF file and being
C translated to. I counts in IFC, J counts in LUTABLE
C
	IF (.NOT. DUP_NTF_FC) THEN
	    I = 1
20	    J = 1
	    ITEMP = IFC(I)
30	    IF (ITEMP.EQ.LUTABLE(1,J)) THEN
		DUP_NTF_FC = .TRUE.
	    ELSE IF (J.LT.LUT_ENTRIES) THEN
		J = J + 1
		GOTO 30
	    ENDIF
C
	    IF ((.NOT.DUP_NTF_FC) .AND. I.LT.NDIFF_FC) THEN
		I = I + 1
		GOTO 20
	    ENDIF
	ENDIF
C
C Jump out if flag still not set
C
	IF (.NOT. DUP_NTF_FC) RETURN
C
C  .....................................................................
C
C The FC counts needed for CITF volume termination records are held in array
C NFC(#,1), where # is the IFF FC number. When conversion to NTF FCs is
C being done, there may be more than one IFF FC converted to each NTF FC. If
C this is the case, the DUP_NTF_FC flag will be set, and this routine will
C be called to clear up the NFC array.
C
C Each IFF FC stored in IFC(1) to IFC(NDIFF_FC) is translated into its
C corresponding NTF FC (which will be the same if it's not in the lookup
C table). This NTF FC is searched for elsewhere in the NTF column of the
C lookup table. IFF FCs corresponding to duplicates of the NTF FC are then
C searched for in the IFC array. If found, the FC count of the IFF FC
C originally found (top of paragraph) is incremented by the FC count of the
C IFF FC corresponding to the duplicate NTF FC. The entry for this IFF FC is
C then set to -1, to indicate that its count has been taken elsewhere and
C should not be used in the volume termination record, and ignored by the rest
C of this routine.
C
	DO 200 I = 1, NDIFF_FC			! Loop through all FCs
	    IF (IFC(I).GE.0) THEN		! If it's not been dealt with...
		IFF_FC = IFC(I)			! Get IFF FC
		NTF_FC = IFF_FC			! Copy to NTF FC for now
	        LOLIM = 1				! Initialise binary
	        HILIM = LUT_ENTRIES			!     chop pointers
110      	BINPTR = (LOLIM+HILIM)/2		! Next guess
        	IF (LUTABLE(2,BINPTR).EQ.IFF_FC) GOTO 120 ! Found it
        	IF (LOLIM.GE.HILIM) THEN		! No chop room
		    BINPTR = -1				! Set out of table
		    GOTO 130				! Jump out of chop
		ENDIF
        	IF (IFF_FC.GT.LUTABLE(2,BINPTR)) THEN	! Which side ?
        	    IF (LOLIM.EQ.BINPTR) BINPTR = BINPTR+1
        	    LOLIM = BINPTR			! Too low
        	ELSE
        	    HILIM = BINPTR			! Too high
        	ENDIF
        	GOTO 110
C
120		NTF_FC = LUTABLE(1, BINPTR)		! Get NTF FC
C
C Look for same NTF FC _elsewhere_ in lookup table (may occur more than once)
C
130		DO 160 J = 1, LUT_ENTRIES		! Loop through LUTABLE
		    IF (LUTABLE(1,J).EQ.NTF_FC .AND. J.NE.BINPTR) THEN
C
C Found NTF FC. Now look for corresponding IFF FC in IFC (may not be there!)
C
			ITEMP = LUTABLE(2,J)
			DO 140 K = 1, NDIFF_FC		! Loop through IFC
			    IF (ITEMP.EQ.IFC(K)) GOTO 150
140			CONTINUE
150			IF (K.LE.NDIFF_FC) THEN		! Found the IFF FC?
C
C Found IFF FC. Increment NFC entry by correct amount and mark IFC entry as
C having been dealt with (-1).
C
			    NFC(IFC(I),1) = NFC(IFC(I),1) +
     &				NFC(IFC(K),1)
			    IFC(K) = -1
			ENDIF
		    ENDIF
160		CONTINUE
	    ENDIF
200	CONTINUE
C
	RETURN
	END
C
