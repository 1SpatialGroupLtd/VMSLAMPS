	LOGICAL FUNCTION CMDLIN()
C
C
C	Copyright Laser-Scan Ltd, Cambridge, England
C	Author					 IM 	23-Apr-1987
C
C	Modified				TJI	30-Sep-1987
CMOD	Add qualifier /WATER_DISTRIB		VLG	06-Jun-1990
CMOD	Allow /DENSITY=6250			PGH	14-May-1992
CMOD	Add CITF qualifier			 JB	12-Nov-1992
CMOD    Implement CITF96 changes (WI/CC 1545)   TJM     20-May-1996
C
C Reads and decodes the command line
C
C Returns TRUE for successful completion
C otherwise FALSE
C
	IMPLICIT NONE
C
C Messages:
	INCLUDE 	'HERE:I2NTFMSG.PAR'
	INCLUDE		'LSL$CMNLSL:LSLLIBMSG.PAR'
C
C Commons:
	INCLUDE 	'LSL$CMNLSL:CLD.CMN'
	INCLUDE		'LSL$CMNLSL:FILENAME.CMN'
	INCLUDE		'HERE:FILENAME.CMN'
	INCLUDE 	'HERE:COMMANDS.CMN'
C
C Command language definitions:
C
	EXTERNAL 	I2NTF_CLD
C
C Workspace:
	LOGICAL 	ABSENT		!  File-spec absent ?
	LOGICAL 	OK		!  Function return
	LOGICAL 	FPRES
	LOGICAL 	FNEGA		!  Command negated flag
	INTEGER 	COUNT		!  Input file index
	INTEGER 	THERE		!  Qualifier there ?
	INTEGER		IERR		!  Error flag
	INTEGER		TEMPLEN		!  Length of paramter filename
	INTEGER		OLDLEN		!  Command line length
	CHARACTER*1024	OLDLIN		!  Old command line
	CHARACTER*255	TEMPFILE	!  Parameter filname
C
C And our command verb
	CHARACTER*5	 VERB		! which is set to...
	PARAMETER	(VERB='I2NTF')
C
C Functions:
	LOGICAL 	DCL_FILE
	LOGICAL 	DCL_STARTUP
	LOGICAL 	DCL_QUAL
	LOGICAL 	DCL_STR
	LOGICAL 	DCL_INT
	LOGICAL		DCL_CML
	LOGICAL		DCL_PARSE
	LOGICAL 	INPUT_FILE
	LOGICAL		TEST_FOREIGN
	LOGICAL		NTFINI		!  Read the command file
	LOGICAL		OBEY_QUALS	!  Interpret qualifiers
	LOGICAL		CITF_SETUP
C
C.....................................................................
C Initialise DCL 
C
	OK=DCL_STARTUP(VERB,.FALSE.,I2NTF_CLD,.TRUE.)
	IF (.NOT.OK) GOTO 999
C
C.....................................................................
C LOG - check for this first so we know if we should output messages
C
	OK=DCL_QUAL('LOG',LOG,FPRES,FNEGA,.TRUE.)
	IF (.NOT.OK) GOTO 999
C.....................................................................
C /CITF - get this to determine if default filename extension should
C be '.CITF'
C
	HAD_CITF93 = .FALSE.
	HAD_CITF96 = .FALSE.
C
	OK=DCL_QUAL('CITF',THERE,FPRES,FNEGA,.TRUE.)
	IF (.NOT.OK) GOTO 999
	IF (THERE) THEN
C
C If the qualifier was given, get the value 
C
	   OK=DCL_INT('CITF',.TRUE.)
	   IF (.NOT.OK) GOTO 999
C
C If it wasn't 93 or 96 flag an error
C
	   IF (IARRAY(1).EQ.93 ) THEN
	      HAD_CITF93 = .TRUE.
C
	   ELSEIF (IARRAY(1).EQ.96) THEN
	      HAD_CITF96 = .TRUE.
C
	   ELSE
	      CALL LSL_PUTMSG(I2NTF__NOCITF,IARRAY(1))
	      OK = I2NTF__ABORT
	      GOTO 999
	   ENDIF
C
	ENDIF
C
C Set up various things specific to CITF
	REVISION = 0			! IFF revision
	IF (HAD_CITF93.OR.HAD_CITF96) THEN
	   REVISION = 1			! Read CB entries
C
	   OK = CITF_SETUP()
	   IF (.NOT.OK) THEN
	      OK = I2NTF__ABORT
	      GOTO 999
	   ENDIF
	ENDIF
C
C.....................................................................
C Get the output filename or tape...
C
	IF (HAD_CITF93.OR.HAD_CITF96) THEN
	   OK=DCL_FILE('OUTFILE','.CITF',ABSENT,.TRUE.,.TRUE.)
	ELSE
	   OK=DCL_FILE('OUTFILE','.NTF',ABSENT,.TRUE.,.TRUE.)
	ENDIF
	IF (.NOT.OK) GOTO 999
C
C ...and save it
C
	OUTLEN=FIL_LEN(1)
	OUTFILE=FILARY(1)(:OUTLEN)
C.....................................................................
C If a device name was given, which we assume was followed by a colon 
C then look to see if it is mounted /FOREIGN - if so it is a magtape.
C
	IF (HAD_DEV) THEN
C
	   OK=TEST_FOREIGN(STR_DEV(:LEN_DEV),IS_MAGTAPE,IERR)
C
	   IF (.NOT.OK) THEN
	      CALL LSL_PUTMSG(I2NTF__OUTFILE,STR_DEV(:LEN_DEV))
	      CALL LSL_ADDMSG(OK)
	      IF (OK.EQ.LSL__SYSERR) CALL LSL_ADDMSG(IERR)
	      GOTO 999
	   ENDIF
C
	   DEV_LEN=LEN_DEV
	   DEVICE=STR_DEV(:LEN_DEV)
	ELSE
	   IS_MAGTAPE=.FALSE.
	ENDIF
C
C IS_MAGTAPE is true iff a magtape is mounted /FOREIGN
C
C....................................................................
C Save the current command line (including any prompted responses) for
C later on
C
	OK = DCL_CML( OLDLIN, OLDLEN, .TRUE. )
	IF (.NOT.OK) GOTO 999
C
C and remove our verb from the front - this is 'I2NTF'
C
	IF ( OLDLIN(1:LEN(VERB)).NE.VERB ) THEN
	   CALL LSL_PUTMSG(I2NTF__INTCMDLIN,VERB)
	   CALL LSL_ADDSTR(OLDLIN(1:OLDLEN))
	   OK = I2NTF__ABORT
	   GOTO 999
	ENDIF
C
	OLDLIN = OLDLIN(LEN(VERB)+1:OLDLEN)
	OLDLEN = OLDLEN - LEN(VERB)
C
C....................................................................
C		Now get the input files 
C....................................................................
C /INPUT_LIST qualifier 
C
	OK=DCL_QUAL('INPUT_LIST',THERE,FPRES,FNEGA,.TRUE.)
	IF (.NOT.OK) GOTO 999
C
C if the qualifier was present, we are reading our input files from
C a file - do so
C
	IF (THERE) THEN
	   IF (INPUT_FILE() ) THEN
	      OK = I2NTF__ABORT
	      GOTO 999
	   ENDIF
C
C Get back the parsing of our previous command line (INPUT_FILE uses
C a different CLD, so we would have lost it)
C
	   OK=DCL_PARSE(OLDLIN(:OLDLEN),VERB,.FALSE.,I2NTF_CLD,.TRUE.)
	   IF (.NOT.OK) GOTO 999
C
	ELSE
C
C No input list so get the IFF filenames from parameters...
C
	   OK=DCL_FILE('INFILE','LSL$IF:IFF.IFF;0',ABSENT,.TRUE.,.TRUE.)
	   IF (.NOT.OK) GOTO 999
C
C ...and save them.
C
	   DO 10 COUNT=1,NUMFIL
	      INLEN(COUNT)=FIL_LEN(COUNT)
	      INFILE(COUNT)=FILARY(COUNT)(:INLEN(COUNT))
 10	   CONTINUE
C
C Store the number of files for future reference
C
	   NFILES=NUMFIL
C
	ENDIF
C.....................................................................
C		Now check all the switches
C
C.....................................................................
C OUTPUT switch
C
12	OK=DCL_QUAL('OUTPUT',OUTPUT,FPRES,FNEGA,.TRUE.)
	IF (.NOT.OK) GOTO 999
C
	IF (OUTPUT) THEN
 	   OK=DCL_FILE('OUTPUT','I2NTF.LOG;0',
     &					ABSENT,.TRUE.,.TRUE.)
	   IF (.NOT.OK) GOTO 999
	   LOGFLEN=FIL_LEN(1)
	   LOGFIL=FILARY(1)(:LOGFLEN)
	ENDIF
C
C.....................................................................
C SERIAL_MAGTAPE switch
C
 	OK=DCL_QUAL('SERIAL_MAGTAPE',SERIAL_MAG,FPRES,FNEGA,.TRUE.)
	IF (.NOT.OK) GOTO 999
C.....................................................................
C DENSITY switch
C
	OK=DCL_QUAL('DENSITY',THERE,FPRES,FNEGA,.TRUE.)
	IF (.NOT.OK) GOTO 999
	IF (THERE) THEN
C
C If the qualifier was given, get the value 
C
	   OK=DCL_INT('DENSITY',.TRUE.)
	   IF (.NOT.OK) GOTO 999
	   DENSITY=IARRAY(1)
C
C If it wasn't 800, 1600, 6250 flag an error
C
	   IF ((DENSITY.NE.1600).AND.(DENSITY.NE.800).AND.
     &         (DENSITY.NE.6250)) THEN 
	      CALL LSL_PUTMSG(I2NTF__NODENS,DENSITY)
	      OK = I2NTF__ABORT
	      GOTO 999
	   ENDIF
C
	ENDIF	   
C.....................................................................
C OS switch - is this to be output with the extra OS information in
C the section header?
C
 	OK=DCL_QUAL('OS',OS_DATA,FPRES,FNEGA,.TRUE.)
	IF (.NOT.OK) GOTO 999
C.....................................................................
C Water distribution qualifier - indicates that output data is to be
C of a form specific to water distribution overlays
C
 	OK=DCL_QUAL('WATER_DISTRIB',WATER_DISTRIB,FPRES,FNEGA,.TRUE.)
	IF (.NOT.OK) GOTO 999
C.....................................................................
C /PARAMETER_FILE qualifier
C
	OK=DCL_QUAL('PARAMETER_FILE',THERE,FPRES,FNEGA,.TRUE.)
	IF (.NOT.OK) GOTO 999
C
	IF (THERE) THEN 
	   OK=DCL_FILE('PARAMETER_FILE','.I2NTF_PAR;0',
     &			ABSENT,.TRUE.,.TRUE.)
	   IF (.NOT.OK) GOTO 999
C
C We read the command file now. Then if any qualifiers are given on the 
C command line they take priority as required.
C
	   TEMPLEN = FIL_LEN(1)
	   TEMPFILE(1:TEMPLEN) = FILARY(1)(1:TEMPLEN)
	   OK = NTFINI(TEMPFILE)
	   IF (.NOT.OK) THEN
	      OK = I2NTF__ABORT
	      GOTO 999
	   ENDIF
C
C Get back the parsing of our previous command line (NTFINI uses
C a different CLD, so we would have lost it)
C
	   OK=DCL_PARSE(OLDLIN(:OLDLEN),VERB,.FALSE.,I2NTF_CLD,.TRUE.)
	   IF (.NOT.OK) GOTO 999
C
	ENDIF
C
C Read the rest of the command line - we use the same routine that
C NTFINI calls, as the switches we can find are the same as those in
C the parameter file
C
	OK=OBEY_QUALS()
	IF (.NOT.OK) GOTO 999
C
C By this stage, we require that we have had /RECIPIENT
C
	IF (.NOT.HAD_RECIPIENT) THEN
	   CALL LSL_PUTMSG(I2NTF__NORECIP)
	   OK = I2NTF__NORECIP
	   GOTO 999
	ENDIF
C
C.....................................................................
C
999	CMDLIN=OK
	RETURN
	END
C       
