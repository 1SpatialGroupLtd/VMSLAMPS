C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-05-24 11:01:02.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION FEATCLASS
C
***	IDENT	24MY93
***	MODULE	FEATCLASS
C
C	Copyright Laser-Scan Ltd., Cambridge, England.
C
C	Created					 	VLG	09-Jun-1990
CMOD	BS7567 (v2.0) support added (W93/12)		 ST	20-May-1993
C
C Description
C
C	Reads the featclass file which defines the data classification
C	scheme for a transfer set.
C
C	For ordinary errors, we attempt to continue with the file
C
C	Returns FALSE if something drastic goes wrong, TRUE otherwise
C
	IMPLICIT NONE
C
C Included Parameter Files
	INCLUDE 'I2NTFMSG.PAR'		    ! message definitions
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'  ! LSLLIB message definitions
	INCLUDE 'LUNS.PAR'		    ! Logical units
C
C Local Parameters
	BYTE		PLING		! comment delimiter
	PARAMETER	(PLING = '!')
C
C Common Blocks
	INCLUDE 'LSL$CMNLSL:FILENAME.CMN'
	INCLUDE 'FILENAME.CMN'			! Filenames and lengths
	INCLUDE 'FTRCMN.CMN'			! Feature info
	INCLUDE 'COMMANDS.CMN'			! various options
	INCLUDE 'LSL$CMNLSL:CMDCOM.CMN'		! command decoding
	INCLUDE 'LSL$CMNLSL:STATUS.CMN'		! LSLLIB status flag
C
C Functions called
	INTEGER*4	FLROPN		! open file for reading
	INTEGER*4	FLRCLO		! close file for reading
	INTEGER*4	FLRLIN		! read in line from file
	LOGICAL		RDCHS		! read next character
C
C Local Variables
	INTEGER*4	LINE		! count line numbers
	INTEGER*4	I,J		! counters
	INTEGER*4	RESULT		! command read result
	INTEGER*4	ERRCOD		! LSLLIB error code
	INTEGER*4	RETCOD		! system error code
	CHARACTER*4	FCODE		! 4 character feature code
	CHARACTER*10	CODECOM		! 10 character feature code
	CHARACTER*20	STCLASS		! 20 character feature code
	CHARACTER*41	FEATDES		! feature description
	CHARACTER*80	STRING		! record to be output
	BYTE		CH		! character read
	INTEGER		LEN		! FEATDES string length
	INTEGER		LENGTH		! FEATCLASS record length
C
C ..................................................................
C Assume that everything goes well
C
	FEATCLASS = .TRUE.
	WL_COUNT  = 0
C
C Open our featclass file, read only
C
	ERRCOD = FLROPN(FEATLUN,FEATFIL(:FEATLEN),RETCOD)
C
C If unsuccessful output message
C
	IF (.NOT.ERRCOD) THEN
	   CALL LSL_PUTMSG(I2NTF__ERROPNFEAT,FEATFIL(1:FEATLEN))
	   CALL LSL_ADDMSG(ERRCOD)
	   IF (ERRCOD.EQ.LSL__SYSOPEN) CALL LSL_ADDMSG(RETCOD)
	   GOTO 999
C
C Otherwise let them know what we are doing if that's what they'd like
C
	ELSEIF (LOG) THEN
	   CALL LSL_PUTMSG(I2NTF__FEATFILOPN,FEATFIL(1:FEATLEN))
	ENDIF
C
C Haven't got a line yet
C
	LINE = 0
C
C So let us read in the lines, one by one
C
500	LINE = LINE+1
C
	ERRCOD = FLRLIN(,,,RETCOD)
	IF (ERRCOD.EQ.LSL__EOF) GOTO 800
C
C If unsuccessful output message
C
	IF (.NOT. ERRCOD) THEN
	   CALL LSL_PUTMSG(I2NTF__ERRRDFEAT)
	   CALL LSL_ADDMSG(ERRCOD)
	   IF (ERRCOD.EQ.LSL__SYSREAD) CALL LSL_ADDMSG(RETCOD)
	   GOTO 999
	ENDIF
C
C Now reset the decoding pointer to the start of the line
C
	CALL BSLN
C
C Check for a comment delimiter - ignore an empty line
C
	IF (RDCHS(CH)) GOTO 500
	IF (CH.EQ.PLING) THEN
	   GOTO 500			! ignore line
	ELSE
	   CALL BSCH			! unread non-pling
	ENDIF
C
C Now, read the command from the line
C
	CALL READ_FEATURE(FCODE,CODECOM,STCLASS,FEATDES,LEN,RETCOD)
C
C and check that there was a valid one
C
	IF (RETCOD.NE.0) GOTO 5555
C
C .................................................................
C
C Why have a trailing space before the CONT_MARK?
C
C	CALL EXPAND ('%WS% 05%S4%S10%S20%S 0', STRING,
C     &				FCODE,CODECOM,STCLASS,FEATDES(:LEN) )
C
C	LENGTH = 39+LEN
C
	CALL EXPAND ('%WS% 05%S4%S10%S20%S', STRING,
     &				FCODE,CODECOM,STCLASS,FEATDES(:LEN)//'0')
	LENGTH = 38+LEN
	CALL WSTR (STRING,LENGTH)
C
	GOTO 500
C ..................................................................
C Error decoding line
C
5555	CALL LSL_ADDMSG(I2NTF__LINEINFEAT)
	CALL LSL_ADDSTR(LINE)
	LSL_STATUS = I2NTF__LINEINFEAT		! reduce error status
C
	GOTO 500
C ..................................................................
C Close the featclass file
C
800	ERRCOD = FLRCLO(FEATLUN,RETCOD)
C
C If unsuccessful output message
C
	IF (.NOT. ERRCOD) THEN
	   CALL LSL_PUTMSG(I2NTF__ERRCLOFEAT,FEATFIL(1:FEATLEN))
	   CALL LSL_ADDMSG(ERRCOD)
	   IF (ERRCOD.EQ.LSL__SYSCLOSE) CALL LSL_ADDMSG(RETCOD)
	   GOTO 999
	ELSEIF ( LOG ) THEN
	   CALL LSL_PUTMSG (I2NTF__FEATFILCLO,FEATFIL(1:FEATLEN))
	ENDIF
C ..................................................................
C Finish
	GOTO 9000
C
C Failure
999	FEATCLASS = .FALSE.
C
C Return
9000	RETURN
	END
C
