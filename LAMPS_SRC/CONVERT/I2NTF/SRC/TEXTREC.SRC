	LOGICAL FUNCTION TEXTREC(TX,MAX_TX_LEN,NCHS,FONT,DIGPOS,
     &				 TEXT_HT,POS,ROTATE,CURVED,POSIT,
     &				 ATTREC,ATTLEN,NUM_RECORDS,GOT_ATTRIBS)
C
C
C	Copyright Laser-Scan Ltd, Cambridge, England
C
C	Author					 	ST	26-May-1993
CMOD    Outputs the list of attributes read from ACs	ST	31-Mar-1995
C       by routine TEXT. Appends to the end of these
C	attributes FC and TX to hold the feature code
C       and text attribute. Calls ADD_FIELD to achieve
C       this. Also outputs FONT (text category from FS)
C       and TEXT_HT (from TH entry) into [TEXTREP]
C       record. Mod 1482.
C
C Description:
C
C Copied from NAMEREC (formerly TEXTREC) and modified to write out TEXTREC,
C TEXTPOS, TEXTREP and GEOMETRY records for a NTV v2.0 Level 3 text feature.
C
	IMPLICIT NONE
C
C Messages:
	INCLUDE 'I2NTFMSG.PAR'
C
C Commons:
	INCLUDE 'COMMANDS.CMN'
	INCLUDE	'FTRCMN.CMN'
C
C Arguments:
	INTEGER 	MAX_TX_LEN		!  Length of an IFF text string
	BYTE 		TX(MAX_TX_LEN)		!  Text string
	INTEGER 	NCHS			!  No of chars in text string
	INTEGER 	DIGPOS			!  0-8 posit. of dig. point
	INTEGER 	FONT			!  Text font used
	REAL 		TEXT_HT			!  Text height
	REAL 		POS(2,MAX_TX_LEN)	!  Position of text
	REAL 		ROTATE(MAX_TX_LEN)	!  Text rotation
	LOGICAL 	CURVED			!  True if CURVTEXT record req'd
	LOGICAL 	POSIT			!  True if a ZS or ST was found
	INTEGER*2	NUM_RECORDS		!  Number of attribute records
	CHARACTER*80	ATTREC(50)		!  Attribute records
	INTEGER*2	ATTLEN(50)		!  Length of attribute records
	LOGICAL 	GOT_ATTRIBS		!  Do we have ACs stored up?
C
C Functions:
	LOGICAL		GEOMETRY
	LOGICAL		ADD_FIELD
C
C Workspace:
	INTEGER		I
	INTEGER		CPOS,P
	INTEGER 	HT		! Height of text * 10
	INTEGER 	OK		! Function return
	CHARACTER*80 	TMP		! Temporary string variable
	INTEGER		TMPWID		! Width of the above
	CHARACTER*255 	TXT_STR		! Contains truncated text string
C
	CHARACTER*3	CFMT		! Integer XY_LEN
	INTEGER*2	CLEN		! Its length
C
	CHARACTER*100	FORMAT		! LSLLIB EXPAND format
	INTEGER*2	FORMLEN		! Its length
C
	CHARACTER*80	STRING		! NTF output record
	INTEGER*2	LENGTH		! Of STRING
	CHARACTER*4	TMPORIENT	! Temporary orientation store
	CHARACTER*6	TMPIDENT	! Temporary id store
C
	CHARACTER*1	SECURITY	! Security of the text
	DATA		SECURITY /' '/	! Not currently used
C
	CHARACTER*7	SURVEY		! Survey method and date
	DATA		SURVEY	 /' 000000'/
C ........................................................................
C If no positional entry (i.e. ZS/ST) then flag error
C
	IF (.NOT.POSIT) THEN
	   CALL LSL_PUTMSG(I2NTF__BADFEAT,FSN,ISN)
	   CALL LSL_ADDMSG(I2NTF__NOPOS)
	   OK = .FALSE.
	   GOTO 999
	ENDIF
C
C Without redefining the NTF TEXT_LEN field, NAMEREC can only hold
C 99 characters (ie length specified by a 2 digit field)
C
	IF (LEVEL.EQ.3) THEN		! at lvl 3 we use TX in ATTREC
	   CALL EXPAND('%WS% %A255',TXT_STR,TX)
	ELSE
	   CALL EXPAND('%WS% %A99',TXT_STR,TX)
C
C If it was truncated then output a warning
C
	   IF (NCHS.GT.99) THEN
	      CALL LSL_PUTMSG(I2NTF__LONGTXT)
	      CALL LSL_ADDMSG(I2NTF__TRUNCTXT,FSN,ISN)
	      CALL LSL_ADDSTR(TXT_STR(:99))
	   ENDIF
	ENDIF
C
C Increment counters
C
	TEXT_ID=TEXT_ID+1
	TEXP_ID=TEXP_ID+1
	TEXR_ID=TEXR_ID+1
C
C GOT_ATTRIBS was set by ANCIL which also increments ATT_ID, so we
C don't want to do it again.
C
	IF (.NOT.GOT_ATTRIBS) ATT_ID = ATT_ID+1
C
C Convert the height - IFF stores it as mm/100, but NTF wants mm/10
C
	HT=INT(TEXT_HT/10)
C
C ......................................................................
C Now we can write out the records
C
C Write the TEXTREC, TEXTPOS and TEXTREP
C
C OS use '0000' in the TEXT_CODE field
C
	IF (OS_DATA) THEN
	   CALL EXPAND('%WS% 43%P0%I6% 01000000%I6% 01%I6% 0',
     &		     STRING,TEXT_ID,TEXP_ID,ATT_ID)
	ELSE
	   CALL EXPAND('%WS% 43%P0%I6% 0100%I4%I6% 01%I6% 0',
     &		     STRING,TEXT_ID,NTF_FC,TEXP_ID,ATT_ID)
	ENDIF
	LENGTH = 32
	CALL WSTR( STRING,LENGTH )
	CALL EXPAND('%WS% 44%P0%I6% 01%I6%I6% 0',
     &		     STRING,TEXP_ID,TEXR_ID,GEOM_ID+1)
	LENGTH = 24
	CALL WSTR( STRING,LENGTH )
CC	CALL EXPAND('%WS% 45%P0%I6% 0000000%I1%I4% 0',
CC    &		     STRING,TEXR_ID,DIGPOS,NINT(ROTATE(1)*10))
C
C Output FONT, TEXT_HT and DIGPOS
C
	CALL EXPAND('%WS% 45%P0%I6%I4%I3%I1%I4% 0',
     &		     STRING,TEXR_ID,FONT,HT,DIGPOS,NINT(ROTATE(1)*10))
	LENGTH = 22
	CALL WSTR( STRING,LENGTH )
C
C Write the GEOMETRY record
C
	IF (CURVED) THEN
	   OK = GEOMETRY(2,NCHS,NCHS,POS,.FALSE.,.TRUE.,.FALSE.,
     &						.TRUE.,.TRUE.,0)
	ELSE
	   OK = GEOMETRY(2,1,1,POS,.FALSE.,.TRUE.,.FALSE.,
     &						.TRUE.,.TRUE.,0)
	ENDIF
	IF (.NOT.OK) GOTO 999
C
C ........................................................................
C Write the per-feature attributes first, then the feature code, then the
C text string
C
	IF (GOT_ATTRIBS) THEN
C
C Finish last record
	   ATTLEN(NUM_RECORDS) = ATTLEN(NUM_RECORDS) + 1	! Add 1 for `\'
C
	   DO 700 I=1,NUM_RECORDS-1
	      CALL WSTR(ATTREC(I),ATTLEN(I))
700	   CONTINUE
C
	   LENGTH = ATTLEN(NUM_RECORDS)
	   STRING(1:LENGTH) = ATTREC(NUM_RECORDS)(1:LENGTH)
	ELSE
	   CALL EXPAND('%WS% 14%P0%I6%',STRING,ATT_ID)
	   LENGTH = 9
	ENDIF
C
C Output the Feature Code mnemonic
C
	OK = ADD_FIELD(STRING,LENGTH,'FC',2,.FALSE.)
	IF (.NOT.OK) GOTO 999
C
C Now the feature code field. Cannot be spit
C
	CALL EXPAND('%WS% %P0%I4',TMP(1:4),NTF_FC)
C
	OK = ADD_FIELD(STRING,LENGTH,TMP,4,.FALSE.)
	IF (.NOT.OK) GOTO 999
C
C Output the text mnemonic
C
	OK = ADD_FIELD(STRING,LENGTH,'TX',2,.FALSE.)
	IF (.NOT.OK) GOTO 999
C
C Output whole string in chunks of 76 (the maximum number of
C characters of a FIELD you can put in a line after allowing
C for mnemonic (2), continuation flag (1) and EOR (1).
C
	CPOS = 1
	I = 0
800	P = MIN(76,NCHS - (I * 76))
	OK = ADD_FIELD(STRING,LENGTH,TXT_STR(CPOS:CPOS+P-1),P,.TRUE.)
	IF (.NOT.OK) GOTO 999
	I = I + 1
	CPOS = CPOS + P
	IF (CPOS.LT.NCHS) GOTO 800
C
C Add the string terminator `\'
C
	OK = ADD_FIELD(STRING,LENGTH,'\',1,.FALSE.)
	IF (.NOT.OK) GOTO 999
C
C Add the continuation flag
C
	OK = ADD_FIELD(STRING,LENGTH,'0',1,.FALSE.)
	IF (.NOT.OK) GOTO 999
C
C Write the last record
C
	CALL WSTR( STRING,LENGTH )
C
C Success
C
	OK = .TRUE.
C
999	TEXTREC = OK
	RETURN
	END
C
