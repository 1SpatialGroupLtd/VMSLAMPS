	PROGRAM I2NTF
C
C
C 	Copyright Laser-Scan Ltd., Cambridge, England
C	Author 				I McLeman 	23-Apr-1987
C
C	Modified/finished				TJI	28-Sep-1987
C	Modified					VLG   	06-Jun-1990
CMOD	Amend for SPR 831				VLG   	28-Nov-1990
CMOD	Allow /DENSITY=6250				PGH	14-May-1992
CMOD	Add /CITF translation and improve		 JB	17-Nov-1992
C	existing I2NTF code.
CMOD	BS7567 (v2.0) support added (W93/12)		 ST	20-May-1993
CMOD    Make version 2.0 the default here rather than	 ST	12-Jan-1994
C       in OBEY_QUALS since this was wrong. Mod 1329.
CMOD	A message is written to the log file is the	 ST	20-Jun-1995
C       final status indicated failure. (Mod 1501)
CMOD    Initialise the RECIP variable as DBNAME is set	 ST	25-Jan-1996
C       to it in OBEY_QUALS and contains NULLS rather
C       than spaces. Mod 1528
CMOD    Implement CITF96 changes (WI/CC 1545)           TJM     20-May-1996
C
C Converts IFF files into NTF format levels 1, 2 and 3
C
        IMPLICIT NONE
C
C Messages:
	INCLUDE	 'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE	 'I2NTFMSG.PAR'
C
C Common Blocks:
	INCLUDE  'LSL$CMNLSL:EXPC.CMN'
	INCLUDE  'LSL$CMNLSL:FILENAME.CMN'
	INCLUDE  'LSL$CMNLSL:MTOVCM.CMN'
	INCLUDE  'LSL$CMNIFF:MHDMB.CMN'		! map header common
	INCLUDE  'LSL$CMNIFF:MHOSGB.CMN'	! map header common
	INCLUDE  'COMMANDS.CMN'
	INCLUDE	 'FILENAME.CMN'
	INCLUDE	 'FTRCMN.CMN'
	INCLUDE  'CITFATTS.CMN'
	INCLUDE	 'LUNS.PAR'
C
C Functions:
	LOGICAL 	CMDLIN		! Gets data from command line
	LOGICAL 	FLWOPN		! Open the output file
	LOGICAL 	DBASE		! Write out the database (set of maps)
	LOGICAL 	OUTPFIL		! Open & start the log file
	LOGICAL		NTFINI		! Read & interpret com. line file
	LOGICAL		MTONIT		! Initialise MT
	LOGICAL		IFFOPEN		! Open iff file
	LOGICAL		RDATT		! Read in the attribute definitions
	LOGICAL		RDLOOKUP	! Read the FC lookup table
C
C Workspace:
	INTEGER		OK		! Flag for functions working
	INTEGER 	I		! DO loop counter
	INTEGER		IERR		! function return
	INTEGER 	VOLNUM		! Volume number
	INTEGER*2 	IELEN		! end of file/entry length
	INTEGER*2	NREV		! Number of revisions
	INTEGER		DUMMY1(2),DUMMY2(2)	! Dummy quad words
	INTEGER		FID(7,MAX_INFILES)	! IFF file IDs
	INTEGER		DENSITY_FLAG	! for magtapes
C
	LOGICAL		OUTLUNOP	! output file is opened
	LOGICAL		GOT_MAGTAPE	! magtape is initialised
	BYTE		MHHDR(4)
	CHARACTER*80	LSTRING
	CHARACTER*11	CDATE
C
C  ....................................................................
C Initialise:
C
	CALL LSL_INIT
C
C Set file open/closed flags
C
	OUTLUNOP=.FALSE.
	LOGLUNOP=.FALSE.
	GOT_MAGTAPE=.FALSE.
C
C Set some defaults
C
	CALL IDATE(NOW_MONTH,NOW_DAY,NOW_YEAR)	! today's date
	CALL LIB$DATE_TIME(CDATE)
        READ (CDATE(8:11), '(I4)') NOW_YEAR	! get correct 4-digit year
C
	VERSION = 2.0
	DENSITY = 1600
	SERIAL  = 0			!  Serial number
	XY_LEN  = 10			!  Length of coords
	Z_LEN   = 6			!  Length of coord
	DIFF_HT_LEN = 5			!  Length of field
	XY_MULT = 0.001			!  3 dp accuracy
	Z_MULT  = 1.0
	Z_DATUM = 0
	Z_UNIT  = 2			!  metres	
	CCOPYRIGHT = ' '		!  no copyright set
	DDBASE  = ' '			!  not set
	DBNAME  = ' '			!  not set
	DDBDATE = '00000000'		!  not set
	FCNAME  = ' '			!  not set
	FCDATE  = '00000000'		!  not set
	RECIP = ' '			!  not set initially, must be later
C
C Initialise VOLTERM counts
	NO_LINEREC  = 0
	NO_POINTREC = 0
	NO_NAMEREC  = 0
	NO_NODE     = 0
	NO_ATTREC   = 0
	NO_ACRDREC  = 0
	NO_AREA     = 0
	NO_EDGE     = 0
	NO_CHAIN    = 0
	NO_FACE     = 0
	NO_COLLECT  = 0
	CRC_FIGURE  = '        '
C
C Read the commands		
C
        OK = CMDLIN()
	IF (.NOT.OK) GOTO 9000
C
C Set info for CITF, otherwise version 1.1 or 2.0
C
	IF (HAD_CITF93.OR.HAD_CITF96) THEN
	   NTF_VERSION = '0200'			   	! NTF ver 2.0
	   DONOR = ' '
	   IF (.NOT.HAD_DDNAME) DDNAME='CITF_1.0'  	! ie. CITF version 1.0 
	   IF (.NOT.HAD_DDATE)  DDATE='19920401'   	! and its date
	   DDBASE  = ' '				! Must be blank for 
	   DDBDATE = '00000000'				! CITF
	ELSE
	   IF (VERSION.EQ.1.1) THEN
	      NTF_VERSION = '0110'
	      IF (.NOT.HAD_DONOR) DONOR='Laser-Scan Ltd.' ! Sender of data 
C       						  ! (default is us)
	      IF (.NOT.HAD_DDNAME) DDNAME='DEFAULT_01.10' ! ie. NTF version 1.1
	      IF (.NOT.HAD_DDATE)  DDATE='19890401'	  ! and its date
	   ELSE
	      NTF_VERSION = '0200'			  ! NTF ver 2.0
	      IF (.NOT.HAD_DONOR) DONOR='Laser-Scan Ltd.' ! Sender of data 
C       						  ! (default is us)
	      IF (.NOT.HAD_DDNAME) DDNAME='DEFAULT_02.00' ! ie. NTF version 1.1
C
C The BS7567 standard was came into effect on 15 May 1992
C
	      IF (.NOT.HAD_DDATE)  DDATE='19920515'	  ! and its date
	   ENDIF
	ENDIF
C
C Initialise ATTRIBUTE arrays ...according to CITF OS93 or CITF OS96
C
	IF (HAD_CITF93) THEN
	   NUM_CITF_ATTS = NUM_CITF93_ATTS
	   DO 10 I = 1, NUM_CITF93_ATTS
	   CITF_DEF_ATT(I)   = CITF93_DEF_ATT(I)
	   CITF_DEF_WIDTH(I) = CITF93_DEF_WIDTH(I)
	   CITF_DEF_TYPE(I)  = CITF93_DEF_TYPE(I)
	   CITF_DEF_MULT(I)  = CITF93_DEF_MULT(I)
 10	   CONTINUE
C
	ELSEIF (HAD_CITF96) THEN
	   NUM_CITF_ATTS = NUM_CITF96_ATTS
	   DO 20 I = 1, NUM_CITF96_ATTS
	   CITF_DEF_ATT(I)   = CITF96_DEF_ATT(I)
	   CITF_DEF_WIDTH(I) = CITF96_DEF_WIDTH(I)
	   CITF_DEF_TYPE(I)  = CITF96_DEF_TYPE(I)
	   CITF_DEF_MULT(I)  = CITF96_DEF_MULT(I)
 20	   CONTINUE
        ENDIF
C
C If have had /FC_LOOKUP read and sort FC lookup file into table
C
	IF (HAD_FC_LOOKUP) THEN
	    OK = RDLOOKUP()
	    IF ( .NOT.OK ) GOTO 999
	ENDIF
C
C If have had /FEATCLASS_FILE  and not /FCNAME use file name as FCNAME
C
	IF (HAD_FEATCLASS.AND.(FCNAME.EQ.' ')) FCNAME = FEATFIL(:20)
C
C And the attribute file (if any)
	IF (HAD_ATTRIBUTE .AND. LEVEL.LT.2) THEN
C
C Must be at level 2 (or above)
	   CALL LSL_PUTMSG (I2NTF__NOATTR)
	   HAD_ATTRIBUTE = .FALSE.
	ELSEIF (HAD_ATTRIBUTE.AND.HAD_FRT) THEN
C
C Need both attribute file and FRT
	   OK = RDATT()
	   IF (.NOT.OK) GOTO 999
	ELSEIF (HAD_ATTRIBUTE.OR.HAD_FRT) THEN	
C
C If attributes are to be transferred then both /FRT and /ATTRIBUTE must
C be given. Tell the user this.
C
	   CALL LSL_PUTMSG(I2NTF__BOTHATTFRT)
	   HAD_ATTRIBUTE = .FALSE.		! Make sure we don't
	   HAD_FRT = .FALSE.			! try anything
	ENDIF
C
C  ....................................................................
C for each IFF file, open it (read-only) and if we are outputting
C OS data, read its map header for the volume header continuation record
C
	DO 200 I = 1, NFILES
C
C open the file, and if we can't do that, then give up
C
           OK = IFFOPEN(IFFLUN, INFILE(I)(:INLEN(I)))
	   IF (.NOT.OK) GOTO 9000
C
C get the file ID for the file, so that we can guarantee to open
C the same one later...
C
	   CALL IFFID( FID(1,I) )
C                           
C check that all of the maps have a map header. 
C
	   CALL IFFNXC('MH',IELEN)
C
	   IF (IELEN.EQ.-1) THEN
	      CALL LSL_PUTMSG(I2NTF__NOMH, INFILE(I)(:INLEN(I)) )
	      OK = I2NTF__ABORT
	      GOTO 9000
	   ENDIF
C
	   IF (LOG) 
     &		CALL LSL_PUTMSG(I2NTF__MHREAD,INFILE(I)(:INLEN(I)))
C
	   CALL EIHRI(MHHDR,1,1)
C
C Check that all input files have type4 map headers if /CITF has been 
C given, and warn if not
C
	   IF (HAD_CITF93.OR.HAD_CITF96) THEN
	      HAD_MHTYPE4(I) = .TRUE.
	      IF (MHHDR(2).NE.4) THEN			! it's not a CITF MH
		 HAD_MHTYPE4(I) = .FALSE.
	         CALL LSL_PUTMSG(I2NTF__NOTCITFMAP,INFILE(I)(:INLEN(I)))
	      ENDIF
	   ELSE						! not had /CITF
C
C Read the map header into a convenient place and
C check that all of the maps are indeed OS style if this is what is 
C wanted (if they're not, and we had the /OS qualifier, give up)
C 	 (if they are, and we didn't have /OS then warn the user)
C
	     HAD_MHTYPE4(I) = .FALSE.
	     IF (MHHDR(2).NE.2) THEN			! it's not an OS MH
	       IF (OS_DATA) THEN
	         CALL LSL_PUTMSG(I2NTF__NOTOSMAP,INFILE(I)(:INLEN(I)))
		 OK = I2NTF__ABORT
	         GOTO 9000
	       ENDIF
	     ELSE					! it is an OS map header
	       IF (.NOT.OS_DATA) THEN
		  CALL LSL_PUTMSG(I2NTF__HASOSMAP,INFILE(I)(:INLEN(I)))
	       ENDIF
	     ENDIF
	   ENDIF
C
C and close the file again
	   CALL IFFCLO(IFFLUN)
C
200	CONTINUE
C
C  ....................................................................
C If to tape is required give routine unit name, density, rewind flags
	IF (IS_MAGTAPE) THEN
	   DENSITY_FLAG=-1
	   IF (DENSITY.EQ.800)  DENSITY_FLAG=0
	   IF (DENSITY.EQ.1600) DENSITY_FLAG=-1
	   IF (DENSITY.EQ.6250) DENSITY_FLAG=-2
C
C - is it a serial tape ?
C
	   IF (SERIAL_MAG) THEN
	      OK = MTONIT(OUTFILE(:OUTLEN),DENSITY_FLAG,.FALSE.,1)
	   ELSE
C
C - must be normal tape
C
	      OK = MTONIT(OUTFILE(:OUTLEN),DENSITY_FLAG,.FALSE.,0)
	   ENDIF
C
	   IF (.NOT.OK) THEN
	      CALL LSL_PUTMSG(I2NTF__INITERR,OUTFILE(:OUTLEN))
	      CALL LSL_ADDMSG(OK)
	      IF (OK.EQ.LSL__SYSERR) CALL LSL_ADDMSG(MTOERR)
	      GOTO 9000
	   ENDIF
C
	   GOT_MAGTAPE=.TRUE.
	ELSE
C
C Must be disk file
C
	   OK = FLWOPN(OUTLUN,OUTFILE(1:OUTLEN),IERR)
	   IF (OK) THEN
	      OUTLUNOP=.TRUE.
	   ELSE
	      CALL LSL_PUTMSG(I2NTF__OPENERR,OUTFILE(1:OUTLEN))
	      CALL LSL_ADDMSG(OK)
	      IF (OK.EQ.LSL__SYSOPEN) CALL LSL_ADDMSG(IERR)
	      GOTO 9000
	   ENDIF
	ENDIF 
C
	IF (LOG) CALL LSL_PUTMSG(I2NTF__NTFOPEN,OUTFILE(1:OUTLEN))
C
C  ....................................................................
C If OUTPUT was specified open the log file & write header
C
	IF (OUTPUT) THEN
	   OK = OUTPFIL()
	   IF (.NOT.OK) GOTO 999
	ENDIF
C  ....................................................................
C Begin outputting the records
C
C  ....................................................................
C First the Volume Header Record     
C
	VOLNUM=1
	CALL VOLHDREC(VOLNUM,NFILES)
C
	IF (HAD_CITF93.OR.HAD_CITF96) THEN
	   CALL COMMENT(
     &		'CITF data output by Laser-Scan''s CONVERT utility I2NTF')
	ELSEIF (VERSION.NE.2.0) THEN
	   CALL COMMENT(
     &		 'NTF data output by Laser-Scan''s CONVERT utility I2NTF')
	ENDIF
C  ....................................................................
C Output the databases (only one supported for now).
C
	OK = DBASE(FID,NFILES)
	IF (.NOT.OK) GOTO 999
C  ....................................................................
C Finally the Volume Termination Record
C
	CALL VOLTERM	
C  ....................................................................
C If log was requested and output to tape then say how many blocks 
C were written.
C
	IF (LOG.AND.IS_MAGTAPE)
     &	   CALL LSL_PUTMSG(I2NTF__NTFDONE,DEVICE(:DEV_LEN),MTONBL)
C  ....................................................................
C If tape selected then finish it off 
C
	IF (GOT_MAGTAPE) CALL END_TAPE
C
C  ....................................................................
C Rejoin errors and exit
C 
999	IF (OUTLUNOP) CALL FLWCLO(OUTLUN)
C
C Report in the output file that an error occurred
C
	IF (LOGLUNOP) THEN
	   IF (.NOT.OK) THEN
	      CALL FLWSEL(LOGLUN)
C
C If the last thing output from EXPC by PUTMSG was an error, we can output
C it here.
C
	      CALL SETAUX(EXPBUF,9)
	      CALL SETWIN(1,9)
	      CALL READSTR(LSTRING,,,,)
	      IF (LSTRING(1:9).EQ.'%I2NTF-E-') THEN
		 CALL FLWSTR
	      ELSE
		 CALL FLWSTR('* * * * * * * * * * * * WARNING '//
     &			     '* * * * * * * * * * * *')
		 CALL FLWSTR('An error occurred during processing. '//
     &		             'The output file may be incomplete.')
		 CALL FLWSTR('Check the command line for the actual '//
     &		      	     'error message.')
	      ENDIF
	   ENDIF
	   CALL FLWCLO(LOGLUN)
	ENDIF
C
C Check that OK is set
	IF (OK) THEN
	   OK = I2NTF__NORMAL
	ELSE
	   OK = I2NTF__ABORT
	ENDIF
C
C And finally exit with the error/success status from earlier
C
9000	CALL LSL_EXIT(OK)
	END
C
