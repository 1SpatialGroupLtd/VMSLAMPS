	LOGICAL FUNCTION CITF_SECHREC_READ(LIN,STR,LEN)
C
***     MODULE CITF_SECHREC_READ
***     IDENT	26FE93
C
C 	Copyright Laser-Scan Ltd, Cambridge, England

C
C	Author in NTF2I				IM	27-Apr-1987
CMOD	Ripped off for CITF			JB	10-Dec-1992
C
C Reads the data from the section header record in the CITF MH entry
C passed as argument, and reads the subsequent continuation record
C If relevant qualifiers have been given, their values will be written
C to the record, overwriting the existing values
C
	IMPLICIT NONE
C
C Commons:
	INCLUDE	'LSL$CMNOSMH:OSMHLIBMSG.PAR'
	INCLUDE 'HERE:I2NTFMSG.PAR'
	INCLUDE 'LSL$CMNOSMH:OSMH_NEW.PAR'	!  OSMHLIB parameters
C
	INCLUDE 'LSL$CMNIFF:MD2DES.CMN'		!  Common for version 2 MD
	INCLUDE 'LSL$CMNIFF:MHOSGB.CMN'		!  Type 4 Map Header
	INCLUDE 'LSL$CMNOSMH:OSMH_NEW_MH.CMN'	!  OSMHLIB common
C
	INCLUDE 'HERE:COMMANDS.CMN'
C	INCLUDE	'HERE:LUNS.PAR'
C
C Arguments:
	INTEGER		LIN			! current line - do not change
	CHARACTER*80	STR			! string
	INTEGER*2	LEN
C
C Functions:
	LOGICAL		RDLONG			! read a longword
C
	INTEGER		OSMH_NEW_GETFLD		! find DIFF_HT_LEN in header
	INTEGER		OSMH_NEW_PUTINT		! write DIFF_HT_LEN into header
	INTEGER		OSMH_NEW_GET_CITF_LINE	! read MH line from header
C
C Workspace:
	INTEGER		OK			! Success flag
	INTEGER		NUM			! To RDLONG into
	INTEGER		I			! line count
	INTEGER		X_ORIG,Y_ORIG		! Temp storage of origin
C
	CHARACTER*2	NTF$_REC_DESCR
	CHARACTER*10	NTF$_SECT_REF
	CHARACTER	NTF$_COORD_TYP
	CHARACTER	NTF$_STRUC_TYP
	CHARACTER*5	NTF$_XY_LEN
	CHARACTER	NTF$_XY_UNIT
	CHARACTER*10	NTF$_XY_MULT
	CHARACTER*5	NTF$_Z_LEN
	CHARACTER	NTF$_Z_UNIT
	CHARACTER*10	NTF$_Z_MULT
	CHARACTER*10	NTF$_X_ORIG
	CHARACTER*10	NTF$_Y_ORIG
	CHARACTER*10	NTF$_Z_DATUM
C
	CHARACTER*10	NTF$_XMIN
	CHARACTER*10	NTF$_YMIN
	CHARACTER*10	NTF$_XMAX
	CHARACTER*10	NTF$_YMAX
C
	CHARACTER*2	RECORD			! record header
	CHARACTER*10	TEMP			! temp string
	CHARACTER*80	STRING			! output string
	INTEGER		LENGTH
C
C ........................................................................
C Get data from record fields from this first record
C
	NTF$_SECT_REF	= STR(3:12)
	NTF$_COORD_TYP	= STR(13:13)
	NTF$_STRUC_TYP	= STR(14:14)
	NTF$_XY_LEN	= STR(15:19)
	NTF$_XY_UNIT	= STR(20:20)
	NTF$_XY_MULT	= STR(21:30)
	NTF$_Z_LEN	= STR(31:35)
	NTF$_Z_UNIT	= STR(36:36)
	NTF$_Z_MULT	= STR(37:46)
	NTF$_X_ORIG	= STR(47:56)
	NTF$_Y_ORIG	= STR(57:66)
	NTF$_Z_DATUM	= STR(67:76)
C
C	------------------------------------------------------------------
C	Ignore the dataset name
CCC	CALL LSL_PUTMSG(I2NTF__CITFIGNSECTREF,NTF$_SECT_REF)
C
C	..................................................................
C	Check the COORD_TYP
C
	IF (NTF$_COORD_TYP.NE.'1' .AND. NTF$_COORD_TYP.NE.'2' .AND.
     &					NTF$_COORD_TYP.NE.'3') THEN
	   CALL LSL_PUTMSG(I2NTF__CITFSECHREC,'COORD_TYP',
     &						NTF$_COORD_TYP)
	   NTF$_COORD_TYP  = '2'
	ENDIF
C
C	..................................................................
C	Check that this is vector data for STRUC_TYP - warn if it isn't
C
	IF (NTF$_STRUC_TYP.NE.'1') THEN
	   CALL LSL_PUTMSG(I2NTF__CITFNOTVECTOR,NTF$_STRUC_TYP)
	   NTF$_STRUC_TYP  = '1'
	ENDIF
C
C	..................................................................
C Find out the XYLEN size of planimetric coordinates if /XY_LEN not given,
C otherwise write it to record
C 	
	IF (.NOT.HAD_XYLEN) THEN
	  IF (NTF$_XY_LEN.NE.' ') THEN
	    CALL SETAUX(%REF(NTF$_XY_LEN), 5)
	    OK = .NOT.RDLONG(NUM)
C
	    IF (.NOT.OK) THEN
	      CALL LSL_PUTMSG(I2NTF__CITFSECHREC,'XYLEN',NTF$_XY_LEN)
	      XY_LEN = 10
	    ELSE
	      XY_LEN = NUM
	    ENDIF
	  ENDIF
C
	  HAD_XYLEN = .TRUE.
C
	ELSE
	  CALL EXPAND ('%WS% %I5',TEMP,XY_LEN)
	  STR(15:19) = TEMP(1:5)
	ENDIF
C
C	..................................................................
C	Check the XY_UNIT
C
	IF (NTF$_XY_UNIT.NE.'1' .AND. NTF$_XY_UNIT.NE.'2' .AND.
     &					NTF$_XY_UNIT.NE.'3') THEN
	   CALL LSL_PUTMSG(I2NTF__CITFSECHREC,'XY_UNIT',NTF$_XY_UNIT)
	   NTF$_XY_UNIT = '2'
	   XY_UNIT      = 2
	   HAD_XYUNIT   = .TRUE.
	ENDIF
C
C	..................................................................
C	Read the XY_MULT multiplication factor for our data 
C
	IF (.NOT.HAD_XYMULT) THEN
	   IF (NTF$_XY_MULT.NE.' ') THEN			! anything there
	      CALL SETAUX(%REF(NTF$_XY_MULT),10)		! set read buffer
	      OK = .NOT.RDLONG(NUM)			! read number
C
	      IF (OK) THEN				! success
C
C	    since the XY_MULT field is real number interpreted with 3 decimal 
C	    places then must set the correct position of the decimal place
C
C	    NOTE: I2NTF stores the XY_MULT field as an integer, not as the 
C	    expected real number. Consequently it was nec to divide by 1000. If
C	    the value is already less than 1, then dividing further will yield
C	    a ridiculously low value. Note that this may cause problems if the 
C	    scale was 1:1 in the first place
C
	         IF (NUM.EQ.0) THEN			! result too small
	           XY_MULT = 0.001			! default
	           CALL LSL_PUTMSG(I2NTF__CITFSECHREC,'XY_MULT',NTF$_XY_MULT)
	         ELSEIF(NUM.GE.1) THEN
	           XY_MULT = NUM/1000.0
	         ENDIF
	      ELSE						! error reading
	         XY_MULT = 0.001
	         CALL LSL_PUTMSG(I2NTF__CITFSECHREC,'XY_MULT',NTF$_XY_MULT)
	      ENDIF
	   ENDIF
	ELSE
	   CALL EXPAND ('%WS% %I10',TEMP,NINT(XY_MULT*1000))
	   STR(21:30) = TEMP(1:10)
	ENDIF
C
	HAD_XYMULT = .TRUE.
C
C	..................................................................
C	Find out the size of Z coordinates - ZLEN
C
	IF (.NOT.HAD_ZLEN) THEN
	  IF (NTF$_Z_LEN.NE.' ') THEN
	    CALL SETAUX( %REF(NTF$_Z_LEN),5)
	    OK = .NOT.RDLONG(NUM)
C
	    IF (.NOT.OK) THEN
	      CALL LSL_PUTMSG(I2NTF__CITFSECHREC,'ZLEN',NTF$_Z_LEN)
	      Z_LEN = 6
	    ELSE
	      Z_LEN = NUM
	    ENDIF
	  ENDIF
C
	  HAD_ZLEN = .TRUE.
	ELSE
	  CALL EXPAND ('%WS% %I5',TEMP,Z_LEN)
	  STR(31:35) = TEMP(1:5)
	ENDIF
C
C	..................................................................
C	Check the Z_UNIT  units for our Z data (if any) 
C
	IF (.NOT.HAD_ZUNIT) THEN
	  IF (NTF$_Z_UNIT.NE.'1' .AND. NTF$_Z_UNIT.NE.'2' .AND.
     &					NTF$_Z_UNIT.NE.'3') THEN
	    CALL LSL_PUTMSG(I2NTF__CITFSECHREC,'Z_UNIT',NTF$_Z_UNIT)
	    NTF$_Z_UNIT = '2'
	    Z_UNIT      = 2
	    HAD_ZUNIT   = .TRUE.
	  ENDIF
	ELSE
	  CALL EXPAND ('%WS% %I1',TEMP,Z_UNIT)
	  STR(36:36) = TEMP(1:1)
	ENDIF
C
C	..................................................................
C	Read the Z_MULT multiplication factor for our data 
C
	IF (.NOT.HAD_ZMULT) THEN
	  IF (NTF$_Z_MULT.NE.' ') THEN			! non-empty field
	    CALL SETAUX(%REF(NTF$_Z_MULT),10)		! set input buffer
	    OK = .NOT.RDLONG(NUM)			! read number
C
	    IF (OK) THEN
	      IF (NUM.EQ.0) THEN			! result too small
	         Z_MULT = 1.0				! default
	         CALL LSL_PUTMSG(I2NTF__CITFSECHREC,'Z_MULT',NTF$_Z_MULT)
	      ELSEIF(NUM.GE.1) THEN
	         Z_MULT = NUM/1000.0
	      ENDIF
	    ELSE						! error reading
	      Z_MULT = 1.0
	      CALL LSL_PUTMSG(I2NTF__CITFSECHREC,'Z_MULT',NTF$_Z_MULT)
	    ENDIF
	  ENDIF
C
	  HAD_ZMULT = .TRUE.
	ELSE
	  CALL EXPAND ('%WS% %I10',TEMP,NINT(Z_MULT*1000))
	  STR(37:46) = TEMP(1:10)
	ENDIF
C
C 	.......................................................................
C
	IF (NTF$_X_ORIG.NE.' ') THEN
	   CALL SETAUX(%REF(NTF$_X_ORIG),10)
	   OK = .NOT.RDLONG(X_ORIG)
C
	   IF (.NOT.OK) THEN
	      CALL LSL_PUTMSG(I2NTF__CITFSECHREC,'X_ORIG',NTF$_X_ORIG)
	   ELSE
	      IF (X_ORIG.NE.NINT(MD2LOC(1))) CALL LSL_PUTMSG
     &			(I2NTF__CITFDIFORIG,'X_ORIG',NTF$_X_ORIG)
	   ENDIF
	ENDIF
C
C	.......................................................................
C
	IF (NTF$_Y_ORIG.NE.' ') THEN
	   CALL SETAUX(%REF(NTF$_Y_ORIG),10)
	   OK = .NOT.RDLONG(Y_ORIG)
C
	   IF (.NOT.OK) THEN
	      CALL LSL_PUTMSG(I2NTF__CITFSECHREC,'Y_ORIG',NTF$_Y_ORIG)
	   ELSE
	      IF (Y_ORIG.NE.NINT(MD2LOC(2))) CALL LSL_PUTMSG
     &			(I2NTF__CITFDIFORIG,'Y_ORIG',NTF$_Y_ORIG)
	   ENDIF
	ENDIF
C
C	.......................................................................
C
	IF (.NOT.HAD_ZDATUM) THEN
	  IF (NTF$_Z_DATUM.NE.' ') THEN
	    CALL SETAUX(%REF(NTF$_Z_DATUM),10)
	    OK = .NOT.RDLONG(NUM)
C
	    IF (.NOT.OK) THEN
	      CALL LSL_PUTMSG(I2NTF__CITFSECHREC,'Z_DATUM',NTF$_Z_DATUM)
	      Z_DATUM = 0
	    ELSE
	      Z_DATUM = NUM
	    ENDIF
	  ENDIF
C
	  HAD_ZDATUM = .TRUE.
	ELSE
	  CALL EXPAND ('%WS% %I10',TEMP,NINT(Z_DATUM))
	  STR(67:76) = TEMP(1:10)
	ENDIF
C
C Output the record
C
	LEN = 77
	CALL EXPAND('%WS% %S',STRING,STR(1:LEN))
	LENGTH = LEN+1
	CALL WSTR(STRING,LENGTH)
C
C Get any continuation record
C
9	LIN = LIN + 1
	OK = OSMH_NEW_GET_CITF_LINE(LIN,STR,LEN)
C
	IF (OK.EQ.OSMHLIB__BLANKLINE) THEN
	   GOTO 9
	ELSEIF (OK.EQ.OSMHLIB__NOEORCHAR) THEN
	   GOTO 999
	ELSE
	   RECORD = STR(1:2)
	   IF (RECORD.NE.'00') THEN
	      OK = I2NTF__ABORT			! missing continuation
	      GOTO 999				! return 
	   ENDIF
	ENDIF
C
C ........................................................................
C Mandatory continuation record

	NTF$_XMIN = STR(3:12)
	NTF$_YMIN = STR(13:22)
	NTF$_XMAX = STR(23:32)
	NTF$_YMAX = STR(33:42)
C
C	.......................................................................
C Read max_min fields from file 
C
	IF (NTF$_XMIN.NE.' ') THEN
	  CALL SETAUX(%REF(NTF$_XMIN),10)
	  OK = .NOT.RDLONG(NUM)
C
	  IF (.NOT.OK) THEN
	     CALL LSL_PUTMSG(I2NTF__CITFSECHREC,'XMIN',NTF$_XMIN)
	  ELSE
C	     IF (NUM.NE.XMIN) CALL LSL_PUTMSG
C     &			(I2NTF__CITFDIFEXTENT,'XMIN',NTF$_XMIN)
	  ENDIF
	ENDIF
C
	IF (NTF$_YMIN.NE.' ') THEN
	  CALL SETAUX(%REF(NTF$_YMIN),10)
	  OK = .NOT.RDLONG(NUM)
C
	  IF (.NOT.OK) THEN
	     CALL LSL_PUTMSG(I2NTF__CITFSECHREC,'YMIN',NTF$_YMIN)
	  ELSE
C	     IF (NUM.NE.YMIN) CALL LSL_PUTMSG
C     &			(I2NTF__CITFDIFEXTENT,'YMIN',NTF$_YMIN)
	  ENDIF
	ENDIF
C
	IF (NTF$_XMAX.NE.' ') THEN
	  CALL SETAUX(%REF(NTF$_XMAX),10)
	  OK = .NOT.RDLONG(NUM)
C
	  IF (.NOT.OK) THEN
	     CALL LSL_PUTMSG(I2NTF__CITFSECHREC,'XMAX',NTF$_XMAX)
	  ELSE
C	     IF (NUM.NE.XMAX) CALL LSL_PUTMSG
C     &			(I2NTF__CITFDIFEXTENT,'XMAX',NTF$_XMAX)
	  ENDIF
	ENDIF
C
	IF (NTF$_YMAX.NE.' ') THEN
	  CALL SETAUX(%REF(NTF$_YMAX),10)
	  OK = .NOT.RDLONG(NUM)
C
	  IF (.NOT.OK) THEN
	     CALL LSL_PUTMSG(I2NTF__CITFSECHREC,'YMAX',NTF$_YMAX)
	  ELSE
C	     IF (NUM.NE.YMAX) CALL LSL_PUTMSG
C     &			(I2NTF__CITFDIFEXTENT,'YMAX',NTF$_YMAX)
	  ENDIF
	ENDIF
C
C ........................................................................
C We need the DIFF_HT_LEN for CITF from the Map Header if not given in 
C a qualifier, and if it was, write it out for copying later
C
11	IF (.NOT.HAD_DIFFHTLEN) THEN
	   OK = OSMH_NEW_GETFLD(MH_DIFF_HT_LEN)
	   IF (.NOT.OK) GOTO 999
	   DIFF_HT_LEN = MH_I_VALUE
	ELSE
	   OK = OSMH_NEW_PUTINT(MH_DIFF_HT_LEN,DIFF_HT_LEN)
	   IF (.NOT.OK) GOTO 999
	ENDIF
C
C We also need the scale
C
	OK = OSMH_NEW_GETFLD(MD_SCALE)
	IF (.NOT.OK) GOTO 999
C
	IF (SOURCE_SCALE.EQ.0) THEN		! zero scale in the first place
	   SOURCE_SCALE = MH_I_VALUE
	ELSE
	   IF (MH_I_VALUE.NE.NINT(MD2SCL)) CALL LSL_PUTMSG
     &				(I2NTF__CITFDIFSCALE,MH_I_VALUE)
	ENDIF
C
C ........................................................................
C
	OK = .TRUE.
C ........................................................................
C rejoin errors
C
999	CITF_SECHREC_READ = OK
	RETURN
	END
C
