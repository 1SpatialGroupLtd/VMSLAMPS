C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-05-21 11:02:08.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	CHARACTER*(*) FUNCTION PADINT(IN_INT,LEN)
C
***     MODULE PADINT
***     IDENT	21MY93
C
C	Copyright Laser-Scan Ltd, Cambridge, England
C	Author						 ST	21-May-1993
C
C       The FORTRAN FORMAT statement does not allow padding with leading 
C       zeros and EXPAND can't cope with variable width integer fields so
C       this routine does the next best thing.
C       It produces a left-justified, zero-padded, len-wide ascii expansion
C       of IN_INT with -ve sign placed in front of leading zeros.
C
	IMPLICIT NONE
C
C Common:
C
	INCLUDE 'COMMANDS.CMN'
C
C Arguments:
C
	INTEGER*4 	IN_INT		! the input integer
	INTEGER*4	LEN		! the field width required
C
C Workspace:
C
	CHARACTER*(MAX_XY_LEN)	TMP	! temporary string. This is 20 because
C       				! MAX_XY_LEN (in GEOMETRY) is 20.
C .........................................................................
C
	CALL EXPAND('%WS%P0%I20',TMP,ABS(IN_INT))
	TMP = TMP(MAX_XY_LEN-LEN+1:MAX_XY_LEN)
	IF (IN_INT.LT.0) TMP(1:1)='-'
	PADINT = TMP
C
	RETURN
	END
