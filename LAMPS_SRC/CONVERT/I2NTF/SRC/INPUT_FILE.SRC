C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-10-16 15:16:16.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION INPUT_FILE
C
***     MODULE INPUT_FILE
***     IDENT  16OC87
C
C     Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C
C	Author		IM	27-04-87
C	Modified	TJI	 1-Oct-1987
C
C To read the file specified by /INPUT_LIST=file.
C
C We return TRUE if something has gone wrong, and we should exit,
C and otherwise FALSE
C
	IMPLICIT NONE
C
C Messages:
C
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'	! LSLLIB errors
	INCLUDE	'HERE:I2NTFMSG.PAR'		! local errors
C
C Commons:
C
	INCLUDE	'LSL$CMNLSL:FILENAME.CMN'	! filename parsing
	INCLUDE	'LSL$CMNLSL:CLD.CMN'		! command line decoding
	INCLUDE	'LSL$CMNLSL:TXTC.CMN'		! for 
C
	INCLUDE	'HERE:FILENAME.CMN'
	INCLUDE	'HERE:COMMANDS.CMN'		! I2NTF common
	INCLUDE	'HERE:LUNS.PAR'
C
C the CLD module:
C
	EXTERNAL	INLIST_CLD
C
C functions:
C
	LOGICAL		FLROPN
	LOGICAL		FLRCLO
	LOGICAL		FLRSTR
	LOGICAL	       	DCL_PARSE
	LOGICAL		DCL_FILE
	LOGICAL		DCL_QUAL
C
C workspace:
C
	LOGICAL		OK		! return from functions
	INTEGER		IERR		! secondary return
	LOGICAL		ABSENT		! true if thing is absent
	LOGICAL		HAD_QUAL	! true if qualifier there
	LOGICAL		PRESENT		! true if it's by a parameter
	LOGICAL		NEGATED		! true if /NO...
	INTEGER		LINE		! no of lines read so far
C
	INTEGER		LISTLEN		! length of INPUT_LIST filename
	CHARACTER*(C_MAX_SIZ)	LISTFILE! the actual filename
C .....................................................................
C assume the worst
C
	INPUT_FILE = .TRUE.
C
C we have already used DCL_QUAL to find /INPUT_LIST - now use DCL_FILE
C to get the filename
C
	OK = DCL_FILE(  'INPUT_LIST',	! the switch name
     &			'.I2NTF_LIS',	! the default name
     &			ABSENT,		! out - was it absent
     &			.FALSE.,	! not a list
     &			.TRUE. )	! it can report its own errors
C
	IF ( .NOT.OK ) GOTO 9999
C
	LISTLEN  = FIL_LEN(1)
	LISTFILE = FILARY(1)(:LISTLEN)
C .....................................................................
C now we can open the input file
C
	OK = FLROPN( INLUN, LISTFILE(:LISTLEN), IERR )
C
	IF ( .NOT.OK ) THEN
	   CALL LSL_PUTMSG( I2NTF__OPENERR, LISTFILE(:LISTLEN) )
	   CALL LSL_ADDMSG( OK )
	   IF ( OK.EQ.LSL__SYSOPEN ) CALL LSL_ADDMSG( IERR )
	   GOTO 9999
	ENDIF
C
	IF (LOG) CALL LSL_PUTMSG(I2NTF__INFILOPN,LISTFILE(:LISTLEN))
C .....................................................................
C and loop reading lines from the file
C
	LINE=0
 	NFILES  = 0
C
200	OK = FLRSTR( ,, IERR )
C
	IF ( .NOT.OK ) THEN
	   IF ( OK.EQ.LSL__EOF ) GOTO 400	! end of file detected
	   CALL LSL_PUTMSG( OK )
	   IF ( OK.EQ.LSL__SYSREAD ) CALL LSL_ADDMSG( IERR )
	   GOTO 9990
	ENDIF
C
	LINE=LINE+1
C
C and parse the command line according to the relevant CLD
C
	OK = DCL_PARSE(  TXTDSC,	! the string to parse
     &		 	'I2NTF',	! the command verb
     &			 .FALSE.,	! don't burst
     &			 INLIST_CLD,	! CLD name
     &			 .TRUE. )	! report errors itself
C
	IF ( .NOT.OK ) GOTO 9990
C
C .....................................................................
C look and see if there is an input file on this line
C
	OK = DCL_FILE(  'INFILE',	! the input file
     &			'LSL$IF:.IFF;0',! the default name
     &			ABSENT,		! true if not there
     &			.FALSE.,	! not a list
     &			.TRUE. )	! report errors itself
C                                                            
	IF ( .NOT.OK ) GOTO 9990
C
C if there is nothing on the line, get the next one
C
	IF ( ABSENT ) GOTO 200
C
C remember the name for later use
C
	IF ( NFILES.GE.MAX_INFILES ) THEN
	   CALL LSL_PUTMSG( I2NTF__MAXINFILE, MAX_INFILES )
	   GOTO 9990
	ENDIF
C
	NFILES=NFILES+1
C
	INLEN(NFILES)  = FIL_LEN(1)
	INFILE(NFILES) = FILARY(1)(:FIL_LEN(1))
C
C and back for the next line
C
	GOTO 200
C .....................................................................
C if we reach here, then we may assume that we have succeeded in
C interpreting all of the command lines
C
400 	INPUT_FILE = .FALSE.
	IF (LOG) 
     &	CALL LSL_ADDMSG( I2NTF__LISTRD, NFILES, LISTFILE(:LISTLEN) )
C .....................................................................
C and join up with any errors within the file & close it
C
9990	OK=FLRCLO(INLUN,IERR)
	IF (.NOT.OK) THEN
	   CALL LSL_PUTMSG(I2NTF__CLOSERR,LISTFILE(:LISTLEN))
 	   INPUT_FILE = .TRUE.
	ENDIF
C
C finally join with file handling errors and return
C
9999	RETURN
	END
