C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-11-18 13:33:54.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION TEXT(FSFLAG)
C
***     MODULE TEXT
***     IDENT	18NO96
C
C	Copyright Laser-Scan Ltd, Cambridge, England
C
C	Author						IM	27-Apr-1987
C	Modified					TJI	 1-Oct-1987
C
CMOD	Interpret OS point sizes			VLG	19-Mar-1990
CMOD	Implement curved text record			VLG	04-Jun-1990
CMOD	As per SWI w91/11 matched to NTF2I to set appropriate FC 
C	when dealing with OS data which is below level 3 SG	22-Sep-1991
CMOD	BS7567 (v2.0) support added (W93/12)		 ST	24-May-1993
CMOD    Calls ANCIL to get ACs for text features and	 ST	31-Mar-1995
C       passes the attribute arrays into the TEXTREC
C	routine. Mod 1482.
CMOD    Now gives each composite text feature it's	 ST	19-Jan-1996
C       correct digitised position as taken from the TS
C	entry. Mod 1525.
C
C Builds the text record and calls NAMEREC (NTFv1.1) or TEXTREC (NTFv2.0 Lvl3)
C to write it out
C
	IMPLICIT NONE
C
C Messages:
	INCLUDE 'I2NTFMSG.PAR'
C
C Common:
	INCLUDE 'COMMANDS.CMN'
	INCLUDE	'FTRCMN.CMN'
	INCLUDE	'STORE.CMN'
	INCLUDE 'LOOKUP.CMN'
C
C Argument:
	INTEGER*2	FSFLAG		!  Description of text from FS
C
C Function
	LOGICAL		GEOMETRY
	INTEGER 	NAMEREC		!  write out text record
	INTEGER 	TEXTREC		!  write out text record
C
	REAL		PI
	  PARAMETER	(PI=3.1415926)
C
C Workspace:
	INTEGER		MAX_TX_LEN
	PARAMETER	(MAX_TX_LEN = 255)
C
	INTEGER		N_CURV_CHARS 	!  Number of chars in curv_text
	REAL		CURV_POS(2,MAX_TX_LEN)
	REAL		CURV_ROT(MAX_TX_LEN)
	BYTE		CURV_TEXT(MAX_TX_LEN)
	BYTE 		TX(MAX_TX_LEN)	!  Contains text string, either for
C					!  one position in POS, or several 
C					!  in CURV_POS
	INTEGER		I
	CHARACTER*8	IDENT
	INTEGER*2	NUM_RECORDS	!  Number of attribute records
	CHARACTER*80	ATTREC(50)	!  Attribute records
	INTEGER*2	ATTLEN(50)	!  Length of attribute records
	INTEGER		ATT_NUM		!  ATT_ID used in ATTREC
	CHARACTER*72	VALUE		! AC value	
	CHARACTER*80	STRING
	INTEGER		LENGTH
	INTEGER		TEMP_ID
	INTEGER		FEATURE		! Feature that is found
	LOGICAL		SUCCESS		! True if a value is obtained
	LOGICAL		ANNO_AC		! True if had an annotation AC
	INTEGER 	DIGPOS		!  0-8 contains posit. of dig. point
	INTEGER 	FONT,CATEGORY	!  Text font used
	INTEGER 	OK		!  Function return
	INTEGER		TH		!  Text height in 100th mm
	INTEGER 	NCHS		!  No of chars in text string
	LOGICAL		GOT_ATTRIBS	!  Whether we need to output an 
C					!  attribute record
	REAL		PT_COORD(2)
	REAL 		TEXT_HT		!  Text height
	REAL 		TEMP_ROTATE
	REAL 		ROTATE(1)	!  Text rotation
	REAL 		TEMP_POS(3)	!  Position of text
	REAL 		POS(2,1)	!  Position of text
	LOGICAL 	POSIT		!  True if a ZS or ST was found
	LOGICAL 	TSFLAG		!  TS already found ?
	LOGICAL 	CURVED		!  CURVTEXT required
	LOGICAL 	IS_CURVE	!  Text is curved
	INTEGER*2 	NPTS		!  Number of points (should be 1)
	INTEGER*2 	IENDS		!  Pen up/down
	INTEGER*2 	IELEN		!  Length of entry
	INTEGER*2 	IECODE		!  Entry code
	REAL		OS_POINT_SIZE(24)
	INTEGER*2	TSARR		! Field in the TS entry
	INTEGER		PREVDIGPOS	! Previous digitised position
C
C NB point sizes are in mm/100
	DATA OS_POINT_SIZE /      0.0,   0.0,  85.0,   0.0,
     &				110.0, 125.0, 140.0, 160.0, 
     &				175.0, 205.0, 220.0, 245.0,
     &				  0.0, 290.0,   0.0, 325.0,
     &				  0.0, 360.0,   0.0, 395.0, 
     &				  0.0, 445.0,   0.0, 500.0 /
C .......................................................................
C Set defaults
C
	ANNO_AC   = .FALSE.
	SUCCESS   = .FALSE.
	POSIT     = .FALSE.
	TSFLAG    = .FALSE.
	CURVED    = .FALSE.
	IS_CURVE  = .FALSE.
	TEXT_HT   = 0.0
	ROTATE(1) = 0.0
	GOT_ATTRIBS = .FALSE.			! Not had any AC's yet
	ATT_NUM     = 0				! ATT_ID number used in ATTREC
	NUM_RECORDS = 1				! The first attribute record
C
C .......................................................................
C Find the font and the digitised position
C
C ***** FONT is not an IFF field - use the text category **************
C
	IF (OS_DATA .AND. LEVEL.LT.3 .AND. NTF_FC.EQ.28) THEN
	  FONT = FSFLAG.AND.'30'X			!get text style
	  FONT = ISHFT(FONT,-4)
	  CATEGORY =  (FSFLAG.AND.'0FC0'X)		! bits 6-11
	  CATEGORY = ISHFT(CATEGORY,-6)			! shift left by 6 bits
	  FC = CATEGORY+1000				! set the feature code
	  NTF_FC = FC					! and the NTF version
	  IF (HAD_FC_LOOKUP)				! Translate?
     &	    CALL FC_TRANS(%VAL(LUT_BASE_ADDR), FC, NTF_FC)
	ELSE
	  FONT  = (FSFLAG.AND.'0FC0'X)		! bits 6-11 (values 0-63)
	  FONT  = ISHFT(FONT,-6)		! shift left by 6 bits
	ENDIF
C
	DIGPOS=(FSFLAG.AND.'000F'X)
	IF (DIGPOS.GT.8) THEN
	   CALL LSL_PUTMSG(I2NTF__BADTEXTPOS,FSN)
	   DIGPOS = 0
	ENDIF
C
C  .....................................................................
C Loop round examining all the features
C
100	CALL IFFNXT(IECODE,IELEN)
C
	IF (IECODE.EQ.'RO') THEN
	   CALL EIHRR(ROTATE(1),1,1)
C
C Convert from radians to degrees as required by NTF
C
	   ROTATE(1)=(ROTATE(1)*180)/PI
121	   IF (ROTATE(1).LT.0.0) THEN
	      ROTATE(1) = ROTATE(1) + 360
	      GOTO 121
	   ENDIF
C
	ELSEIF (IECODE.EQ.'TH') THEN
	   CALL EIHRI(TH,1,1)
C
C text height should be mm/100
C
	   IF (OS_DATA) THEN		! Height is a point size
	      IF (.NOT.HAD_TEXT) CALL LSL_PUTMSG(I2NTF__ASSUMEPTSIZ)
	      HAD_TEXT = .TRUE.		! output the message only once
	      IF (TH.LT.1.OR.TH.GT.24) THEN
	         CALL LSL_PUTMSG(I2NTF__BADPTSIZ,TH,FSN)
	         TH = 24
	      ENDIF
C
	      TEXT_HT = OS_POINT_SIZE(TH)
	      IF (TEXT_HT.EQ.0.0) THEN
	         CALL LSL_PUTMSG(I2NTF__BADPTSIZ,TH,FSN)
	         TH = 24
	         TEXT_HT = OS_POINT_SIZE(TH)
	      ENDIF
	   ELSE
	      TEXT_HT = FLOAT(TH)
	   ENDIF
C
	ELSEIF (IECODE.EQ.'TS') THEN
	   CALL EIHRI(TSARR,1,3)
	   PREVDIGPOS = DIGPOS
	   DIGPOS=(TSARR.AND.'000F'X)
	   IF (DIGPOS.GT.8) THEN
	      CALL LSL_PUTMSG(I2NTF__BADTEXTPOS,FSN)
	      DIGPOS = 0
	   ENDIF
C
C The NAMEREC or TEXTREC is written the second time around this bit of
C code (since IFFRWD is used) so we should used the previous digitised
C position (PREVDIGPOS)
C
	   IF (TSFLAG) THEN		! Already had TX
	      IF (CURVED) THEN		! Form characters into text string
		 N_CURV_CHARS = N_CURV_CHARS + 1
		 CURV_TEXT(N_CURV_CHARS)  = TX(1)
		 CURV_ROT(N_CURV_CHARS)   = ROTATE(1)
		 CURV_POS(1,N_CURV_CHARS) = POS(1,1)		
		 CURV_POS(2,N_CURV_CHARS) = POS(2,1)		
	      ELSE
C
C Write out namepos & namerec records
C
		 IF (VERSION.EQ.1.1 .OR. LEVEL.LT.3) THEN
		    OK=NAMEREC(TX        ,	!  contains text string
     &			       MAX_TX_LEN,	!  max length of text string
     &			       NCHS      ,	!  no. of chars. in text string
     &			       FONT      ,	!  text font
     &			       PREVDIGPOS,	!  dig. position 1-9
     &			       TEXT_HT   ,	!  height of text
     &			       POS	 ,	!  text position x,y,z
     &			       ROTATE(1) ,	!  angle of text
     &			       CURVED    ,	!  use CURVTEXT record
     &			       POSIT)		!  was an st/zs entry given?
		 ELSE
		    OK=TEXTREC(TX        ,	!  contains text string
     &			       MAX_TX_LEN,	!  max length of text string
     &			       NCHS      ,	!  no. of chars. in text string
     &			       FONT      ,	!  text font
     &			       PREVDIGPOS,	!  dig. position 1-9
     &			       TEXT_HT   ,	!  height of text
     &			       POS	 ,	!  text position x,y,z
     &			       ROTATE(1) ,	!  angle of text
     &			       CURVED    ,	!  use CURVTEXT record
     &			       POSIT	 ,	!  was an st/zs entry given?
     &			       ATTREC     ,	!  attribute array
     &			       ATTLEN     ,	!  attribute array lengths
     &			       NUM_RECORDS,	!  number of attribute records
     &			       GOT_ATTRIBS)	!  do we have ACs stored up?

		 ENDIF
C
	         IF (.NOT.OK) GOTO 999
	      ENDIF
	   ELSE
C
C Check for curved text
	      CALL EIHMK(1)			! Mark our position
C
	      CALL IFFNXC('RO',IELEN)
	      IF (IELEN.EQ.-1) GOTO 110
	      CALL EIHRR(ROTATE(1),1,1)
C
	      CALL IFFNXC('TX',IELEN)
	      IF (IELEN.EQ.-1) GOTO 110
	      CALL EIHR(TX,IELEN,1)
	      NCHS=IELEN*2
	      IF (TX(NCHS).EQ.0) NCHS=NCHS-1
	      IF (NCHS.NE.1) GOTO 110
C
105	      TEMP_ROTATE = ROTATE(1)
	      CALL IFFNXC('RO',IELEN)
	      IF (IELEN.EQ.-1) GOTO 108
	      CALL EIHRR(ROTATE(1),1,1)
	      IF (ROTATE(1).NE.TEMP_ROTATE) IS_CURVE = .TRUE.  ! Text not straight
C
	      CALL IFFNXC('TX',IELEN)
	      IF (IELEN.EQ.-1) GOTO 108
	      CALL EIHR(TX,IELEN,1)
	      NCHS=IELEN*2
	      IF (TX(NCHS).EQ.0) NCHS=NCHS-1
	      IF (NCHS.NE.1) GOTO 110
C
	      GOTO 105
C
C Jump to here if each text component is 1 character
C
108	      IF (IS_CURVE) CURVED = .TRUE.
C
110	      CALL IFFRWM		! Back to marked position
C
	      TSFLAG=.TRUE.
	   ENDIF
C
	ELSEIF (IECODE.EQ.'TX') THEN
	   CALL EIHR(TX,IELEN,1)
	   NCHS=IELEN*2
	   IF (TX(NCHS).EQ.0) THEN
	      NCHS=NCHS-1
	   ELSEIF (NCHS.LT.MAX_TX_LEN) THEN
	      TX(NCHS+1)=0
	   ENDIF
C
	ELSEIF (IECODE.EQ.'AC') THEN
	   IF (LEVEL.EQ.3) THEN
	      IF (VERSION.EQ.1.1) THEN
		 CALL TEXT_AC(VALUE,SUCCESS,IELEN)     ! Text may be annotation
		 IF (SUCCESS) ANNO_AC = .TRUE.
	      ELSEIF (VERSION.EQ.2.0) THEN
		 CALL ANCIL(GOT_ATTRIBS,NUM_RECORDS,ATTREC,ATTLEN,IELEN,OK)
		 IF (.NOT.OK) GOTO 100			
		 IF (ATT_NUM.EQ.0 .AND. GOT_ATTRIBS) ATT_NUM = ATT_ID
	      ENDIF
	   ELSE
	      IF (LOG) CALL LSL_PUTMSG(I2NTF__ACIGNORE,FSN,ISN)
	   ENDIF
C
	ELSEIF (IECODE.EQ.'ST' .OR. IECODE.EQ.'ZS') THEN
	   CALL EIHRS(NPTS,IENDS)
	   CALL EIHRR(TEMP_POS,2,1)
	   POS(1,1) = TEMP_POS(1)
	   POS(2,1) = TEMP_POS(2)
	   POSIT=.TRUE.
C
	ELSEIF (IECODE.EQ.'EF') THEN
	  IF (CURVED) THEN		! Store last character
	     N_CURV_CHARS = N_CURV_CHARS + 1
	     CURV_TEXT(N_CURV_CHARS)  = TX(1)
	     CURV_ROT(N_CURV_CHARS)   = ROTATE(1)
	     CURV_POS(1,N_CURV_CHARS) = POS(1,1)		
	     CURV_POS(2,N_CURV_CHARS) = POS(2,1)		
	  ENDIF
	  GOTO 200
C
	ELSEIF (IECODE.NE.'VO') THEN
C
C If we get here then it was an illegal record,	flag error
C
	  CALL LSL_PUTMSG(I2NTF__BADFEAT,FSN,ISN)
	  CALL LSL_ADDMSG(I2NTF__BADTXT,IECODE)
	  OK = .FALSE.
	  GOTO 999
	ENDIF
C
	GOTO 100   
C
C .....................................................................
C EF entry found so write out records	   
C
200	IF (CURVED) THEN
	   IF (VERSION.EQ.1.1 .OR. LEVEL.LT.3) THEN
	      OK = NAMEREC(CURV_TEXT  ,		!  contains text string
     &			   MAX_TX_LEN ,		!  max length of text string
     &  		   N_CURV_CHARS,	!  no. of chars. in text string
     &  		   FONT       ,		!  text font
     &			   DIGPOS     ,		!  dig. position 1-9
     &			   TEXT_HT    ,		!  height of text
     &			   CURV_POS   ,		!  text position x,y,z
     &			   CURV_ROT   ,		!  angle of text
     &			   CURVED     ,		!  use CURVTEXT record
     &			   POSIT      )		!  was an st/zs entry given?
	   ELSE
	      OK = TEXTREC(CURV_TEXT  ,		!  contains text string
     &			   MAX_TX_LEN ,		!  max length of text string
     &  		   N_CURV_CHARS,	!  no. of chars. in text string
     &  		   FONT       ,		!  text font
     &			   DIGPOS     ,		!  dig. position 1-9
     &			   TEXT_HT    ,		!  height of text
     &			   CURV_POS   ,		!  text position x,y,z
     &			   CURV_ROT   ,		!  angle of text
     &			   CURVED     ,		!  use CURVTEXT record
     &			   POSIT      ,		!  was an st/zs entry given?
     &			   ATTREC     ,		!  attribute array
     &			   ATTLEN     ,		!  attribute array lengths
     &			   NUM_RECORDS,		!  number of attribute records
     &			   GOT_ATTRIBS)		!  do we have ACs stored up?
	   ENDIF
	ELSE
	   IF (VERSION.EQ.1.1 .OR. LEVEL.LT.3) THEN
	      OK = NAMEREC(TX         ,		!  contains text string
     &			   MAX_TX_LEN ,		!  max length of text string
     &  		   NCHS       ,		!  no. of chars. in text string
     &  		   FONT       ,		!  text font
     &			   DIGPOS     ,		!  dig. position 1-9
     &			   TEXT_HT    ,		!  height of text
     &			   POS        ,		!  text position x,y,z
     &			   ROTATE(1)  ,		!  angle of text
     &			   CURVED     ,		!  use CURVTEXT record
     &			   POSIT      )		!  was an st/zs entry given?
	   ELSE
	      OK = TEXTREC(TX         ,		!  contains text string
     &			   MAX_TX_LEN ,		!  max length of text string
     &  		   NCHS       ,		! no. of chars. in text string
     &  		   FONT       ,		!  text font
     &			   DIGPOS     ,		!  dig. position 1-9
     &			   TEXT_HT    ,		!  height of text
     &			   POS        ,		!  text position x,y,z
     &			   ROTATE(1)  ,		!  angle of text
     &			   CURVED     ,		!  use CURVTEXT record
     &			   POSIT      ,		!  was an st/zs entry given?
     &			   ATTREC     ,		!  attribute array
     &			   ATTLEN     ,		!  attribute array lengths
     &			   NUM_RECORDS,		!  number of attribute records
     &			   GOT_ATTRIBS)		!  do we have ACs stored up?
	   ENDIF
	ENDIF
	IF (.NOT.OK) GOTO 999
C
C .......................................................................
C Is this text to be used as annotation for a line feature?
C
	IF (ANNO_AC) THEN
	   TEMP_ID = GEOM_ID
C
C look for a corresponding feature
C
450	   DO 500 I=1,FEATURE_PTR
	      IF (FEAT_VAL(I).EQ.VALUE) THEN
		 FEATURE = I
	         GOTO 550
	      ENDIF
500	   CONTINUE
	   GOTO 600
C
C Found - output stored feature
C
550	   FEAT_ID(FEATURE,4) = TEXT_ID			! use this text id
	   IF (FEAT_ID(FEATURE,1).EQ.23) THEN		! is line feature
	      LINE_ID = LINE_ID + 1
C	      CALL EXPAND ('%WS% 23%I6',IDENT,LINE_ID)
	      CALL EXPAND ('%WS% 23%P0%I6',IDENT,LINE_ID)
	      NO_LINEREC = NO_LINEREC + 1
C
	   ELSEIF (FEAT_ID(FEATURE,1).EQ.15) THEN	! is point feature
	      PT_COORD(1) = FEAT_COORDS(I,1)
	      PT_COORD(2) = FEAT_COORDS(I,2)
	      IF (.NOT.CURVED .AND. PT_COORD(1).EQ.POS(1,1) .AND.
     &					PT_COORD(2).EQ.POS(2,1)) THEN
C Point position is same as text position
		 FEAT_ID(FEATURE,2) = TEMP_ID
	      ELSE
	         OK = GEOMETRY(2,1,1,PT_COORD,.FALSE.,
     &			 	.FALSE.,.FALSE.,.TRUE.,.TRUE.,0)
		 IF (.NOT.OK) GOTO 999
C
	         FEAT_ID(FEATURE,2) = GEOM_ID
	      ENDIF
	      IF (HAD_SH) THEN
C
C No JP entry in this feature
C See if there is a node at this position
		 CALL CHECK_POINT(FEAT_ID(FEATURE,2),PT_COORD(1),
     &							PT_COORD(2))
	      ENDIF
	      SYMB_ID = SYMB_ID + 1
C	      CALL EXPAND ('%WS% 15%I6',IDENT,SYMB_ID)
	      CALL EXPAND ('%WS% 15%P0%I6',IDENT,SYMB_ID)
	      NO_POINTREC = NO_POINTREC + 1
C
	   ELSEIF (FEAT_ID(FEATURE,1).EQ.26) THEN	! is cline feature
	      CLINE_ID = CLINE_ID + 1
C	      CALL EXPAND ('%WS% 26%I6',IDENT,CLINE_ID)
	      CALL EXPAND ('%WS% 26%P0%I6',IDENT,CLINE_ID)
	   ELSE					! error - look for another
	      GOTO 450
	   ENDIF
C
C 	   CALL EXPAND('%WS% %S8%I6%I6%I6 0',STRING,IDENT,
 	   CALL EXPAND('%WS% %S8%P0%I6%I6%I6 0',STRING,IDENT,
     &		FEAT_ID(FEATURE,2),FEAT_ID(FEATURE,3),FEAT_ID(FEATURE,4))
	   LENGTH = 29
	   CALL WSTR(STRING,LENGTH)
C
	   IF (FEAT_N_AC_COLL(FEATURE).GT.0) THEN	! is part of a collect
	      DO 300 I = 1,FEAT_N_AC_COLL(FEATURE)
	         COLL_FEAT(I) = FEAT_ID_COLL(FEATURE,I)
	         COLLECT_NUM(COLL_FEAT(I)) = COLLECT_NUM(COLL_FEAT(I)) + 1
	         COLLECT_ID(COLL_FEAT(I),COLLECT_NUM(COLL_FEAT(I))) = IDENT
300	      CONTINUE
	   ENDIF
C
C And save the text ac value 
C
600	   TEXT_PTR = TEXT_PTR + 1
	   IF (TEXT_PTR.GT.MAX_STORE) THEN
	      CALL LSL_PUTMSG(I2NTF__TOOMNYTXT,MAX_STORE)
	      OK = .FALSE.
	      GOTO 999
	   ENDIF
	   TEXTS_VAL(TEXT_PTR) = VALUE
	   TEXTS_ID(TEXT_PTR) = TEXT_ID
	   TXT_GEOM(TEXT_PTR) = TEMP_ID
	ENDIF
C
C  ....................................................................
C
	OK = .TRUE.
C
999	TEXT = OK
	RETURN
	END
C
