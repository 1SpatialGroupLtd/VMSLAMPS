C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-10-29 17:17:40.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION NAMEREC(TX,MAX_TX_LEN,NCHS,FONT,DIGPOS,
     &				 TEXT_HT,POS,ROTATE,CURVED,POSIT)
C
***     MODULE NAMEREC
***     IDENT	29OC96
C
C	Copyright Laser-Scan Ltd, Cambridge, England
C
C	Author					 IM	27-Apr-1987
C	Modified				TJI	29-Sep-1987
C
CMOD	Handle long text records		VLG	31-Oct-1989
CMOD	Handle NTF level 3 output		VLG	09-Feb-1990
CMOD	Implement pen up argument in GEOMETRY 	VLG	01-Jun-1990
CMOD	Implement curved text record		VLG	04-Jun-1990
CMOD	If below level 3, then put the IFF FSN in 
C	TEXT_ID field 				 SG 	26-Sep-1991
CMOD	BS7567 (v2.0) support added (W93/12)	 ST	24-May-1993
C
C Writes out NAMEREC, NAMPOSTN and GEOMETRY records for a text feature.
C Renamed from TEXTREC to NAMEREC because there really are records called
C TEXTRECs in NTF v2.0 Level 3
C
	IMPLICIT NONE
C
C Messages:
	INCLUDE 'I2NTFMSG.PAR'
C
C Commons:
	INCLUDE 'COMMANDS.CMN'
	INCLUDE	'FTRCMN.CMN'
C
C Arguments:
	INTEGER 	MAX_TX_LEN		!  Length of an IFF text string
	BYTE 		TX(MAX_TX_LEN)		!  Text string
	INTEGER 	NCHS			!  No of chars in text string
	INTEGER 	DIGPOS			!  0-8 posit. of dig. point
	INTEGER 	FONT			!  Text font used
	REAL 		TEXT_HT			!  Text height
	REAL 		POS(2,MAX_TX_LEN)	!  Position of text
	REAL 		ROTATE(MAX_TX_LEN)	!  Text rotation
	LOGICAL 	CURVED			!  True if CURVTEXT record req'd
	LOGICAL 	POSIT			!  True if a ZS or ST was found
C
C Functions:
	LOGICAL		GEOMETRY
C
C Workspace:
	INTEGER		I
	INTEGER		CPOS
	INTEGER 	HT		!  Height of text * 10
	INTEGER 	OK		!  Function return
	CHARACTER*100 	TXT_STR		!  Contains truncated text string
C
	CHARACTER*3	CFMT		!  Integer XY_LEN
	INTEGER*2	CLEN		!  Its length
C
	CHARACTER*100	FORMAT		!  LSLLIB EXPAND format
	INTEGER*2	FORMLEN		!  Its length
C
	CHARACTER*80	STRING		!  NTF output record
	INTEGER*2	LENGTH		!  Of STRING
	CHARACTER*4	TMPORIENT	!  Temporary orientation store
	CHARACTER*6	TMPIDENT	!  Temporary id store
C
	CHARACTER*1	SECURITY	!  Security of the text
	DATA		SECURITY /' '/	!  Not currently used
C
	CHARACTER*7	SURVEY		!  Survey method and date
	DATA		SURVEY	 /' 000000'/
C ........................................................................
C If no positional entry (i.e. ZS/ST) then flag error
C
	IF (.NOT.POSIT) THEN
	   CALL LSL_PUTMSG(I2NTF__BADFEAT,FSN,ISN)
	   CALL LSL_ADDMSG(I2NTF__NOPOS)
	   OK = .FALSE.
	   GOTO 999
	ENDIF
C
C Without redefining the NTF TEXT_LEN field, NAMEREC can only hold
C 99 characters (ie length specified by a 2 digit field)
C
	CALL EXPAND('%WS% %A99',TXT_STR,TX)
C
C If it was truncated then output a warning
C
	IF (NCHS.GT.99) THEN
	   CALL LSL_PUTMSG(I2NTF__LONGTXT)
	   CALL LSL_ADDMSG(I2NTF__TRUNCTXT,FSN,ISN)
	   CALL LSL_ADDSTR(TXT_STR(:99))
	ENDIF
C
C a counter is used for the NTF name_id entry as use of the
C FSN would not allow multiple TS entries
C
	IF (OS_DATA.AND.(LEVEL.LT.3)) THEN	! to match NTF2I, 
	  TEXT_ID = FSN				! use FSN as NAME_ID
	ELSE
	  TEXT_ID=TEXT_ID+1			! otherwise increment TEXT_ID
	ENDIF
C
C Convert the height - IFF stores it as mm/100, but NTF wants mm/10
C
	HT=INT(TEXT_HT/10)
C
C ......................................................................
C Now we can write out the records
C
C First the NAMEREC containing the text (the first 64 characters of it)
C
	IF (WATER_DISTRIB .AND. LEVEL.EQ.3) THEN
C	   CALL EXPAND('%WS% 11%I6%S4%I2%S64',
	   CALL EXPAND('%WS% 11%P0%I6%S4%I2%S64',
     &		STRING,TEXT_ID,'0000',NCHS,TXT_STR(:MIN(64,NCHS)))
	ELSE
C	   CALL EXPAND('%WS% 11%I6%I4%I2%S64',
	   CALL EXPAND('%WS% 11%P0%I6%I4%I2%S64',
     &		STRING,TEXT_ID,NTF_FC,NCHS,TXT_STR(:MIN(64,NCHS)))
	ENDIF
C
	NO_NAMEREC = NO_NAMEREC + 1
C
C If the text won't fit into the record then write a continuation
C
	IF (NCHS.GT.64) THEN
	   STRING(79:79)='1'
	   LENGTH = 80
	   CALL WSTR( STRING,LENGTH )
C
	   CALL EXPAND('%WS% 00%S77',STRING,TXT_STR(65:MIN(99,NCHS)))
C 
	   LENGTH = 2 + ( NCHS - 64 ) + 2
C
C Levels 2 and 3 require more data - stick it in at the end of the continuation
C Add SECURITY, CHANGE, SURVEY
C
	   IF (LEVEL.EQ.2 .OR. LEVEL.EQ.3) THEN
	      STRING(LENGTH-1:LENGTH + 13) = '  000000 000000'
	      LENGTH = LENGTH + 13
	   ENDIF
C
	ELSE
	   LENGTH = 14 + NCHS + 2
C
C Add SECURITY, CHANGE, SURVEY
	   IF (LEVEL.EQ.2 .OR. LEVEL.EQ.3) THEN
	      IF ( LENGTH .LE.65 ) THEN ! It'll fit in this record
	         STRING(LENGTH-1:LENGTH + 13) = '  000000 000000'
	         LENGTH = LENGTH + 15
C
	      ELSE					! Needs a new record
	         STRING( LENGTH-1:LENGTH-1) = '1'	! Finish this record
	         CALL WSTR( STRING,LENGTH )
	         CALL EXPAND('%WS% 00  000000 000000',STRING)
	         LENGTH = 19
	      ENDIF
C
	   ENDIF
	ENDIF
C
	STRING ( LENGTH-1:LENGTH-1 ) = '0'
	CALL WSTR( STRING,LENGTH )
C .............................................................................
C Now for the NAMPOSTN, or CURVTEXT
C
	IF (CURVED) THEN
C	   CALL EXPAND('%WS% 13%I4%I3',
	   CALL EXPAND('%WS% 13%P0%I4%I3',
     &			   STRING,FONT,HT)
	   CPOS = 10
C
C Start filling in the rotations
C
	   DO 1000 I=1,NCHS
C
	      IF ( CPOS+4.GE. 79 ) THEN
	         STRING(79:79) = '1'		! need a continuation
	         LENGTH = 80
	         CALL WSTR(STRING,LENGTH)
	         CALL EXPAND('%WS% 00',STRING)	! continuation record
	         CPOS = 3			! next free character
	      ENDIF
C
	      WRITE (TMPORIENT,1111) NINT(ROTATE(I)*10)
1111	      FORMAT(I4)
	      STRING (CPOS:CPOS+3) = TMPORIENT
	      CPOS = CPOS+4
C
1000	   CONTINUE
C
	   IF (LEVEL.NE.3) GOTO 1500
C Add GEOM_ID and NAME_ID if this is NTF level 3
	   IF (CPOS.LE.73) THEN
	      WRITE (TMPIDENT,1112) (GEOM_ID + 1)
1112	      FORMAT(I6)
	      STRING (CPOS:CPOS+5) = TMPIDENT
	      CPOS = CPOS + 6
	      IF (CPOS.LE.73) THEN
	         WRITE (TMPIDENT,1112) TEXT_ID
	         STRING (CPOS:CPOS+5) = TMPIDENT
	         CPOS = CPOS + 6
	      ELSE
	         STRING( 79:79) = '1'		! Finish this record
	         LENGTH = 80
	         CALL WSTR( STRING,LENGTH )
C	         CALL EXPAND('%WS% 00%I6',STRING,TEXT_ID)
	         CALL EXPAND('%WS% 00%P0%I6',STRING,TEXT_ID)
	         CPOS = 9
	      ENDIF
	   ELSE				! Needs a new record
	      STRING( 79:79) = '1'		! Finish this record
	      LENGTH = 80
	      CALL WSTR( STRING,LENGTH )
C	      CALL EXPAND('%WS% 00%I6%I6',STRING,(GEOM_ID+1),TEXT_ID)
	      CALL EXPAND('%WS% 00%P0%I6%I6',STRING,(GEOM_ID+1),TEXT_ID)
	      CPOS = 15
	   ENDIF
C
1500	   LENGTH = CPOS + 2
	   STRING( LENGTH -1:LENGTH -1)='0'
	   CALL WSTR(STRING,LENGTH)
	ELSE
	   IF (LEVEL.EQ.3) THEN		! need extra fields for level 3
C 	      CALL EXPAND('%WS% 12%I4%I3%I1%I4%I6%I6 0',  ! use next GEOM_ID
 	      CALL EXPAND('%WS% 12%P0%I4%I3%I1%I4%I6%I6% 0', ! use next GEOM_ID
     &	                STRING,FONT,HT,DIGPOS,NINT(ROTATE(1)*10),
     &			(GEOM_ID+1),(TEXT_ID))
	      LENGTH = 28
	      CALL WSTR(STRING,LENGTH)
	   ELSE
C	      CALL EXPAND('%WS% 12%I4%I3%I1%I4 0',
	      CALL EXPAND('%WS% 12%P0%I4%I3%I1%I4% 0',
     &		STRING,FONT,HT,DIGPOS,NINT(ROTATE(1)*10))
	      LENGTH = 16
	      CALL WSTR(STRING,LENGTH)
	   ENDIF
	ENDIF
C .............................................................................
C Now give the position of the text in a GEOMETRY* record
C
	IF (CURVED) THEN
	   OK = GEOMETRY(2,NCHS,NCHS,POS,.FALSE.,.TRUE.,.FALSE.,
     &						.TRUE.,.TRUE.,0)
	ELSE
	   OK = GEOMETRY(2,1,1,POS,.FALSE.,.TRUE.,.FALSE.,
     &						.TRUE.,.TRUE.,0)
	ENDIF
	IF (.NOT.OK) GOTO 999
C .............................................................................
C
	OK = .TRUE.
C
999	NAMEREC = OK
	RETURN
	END
C
