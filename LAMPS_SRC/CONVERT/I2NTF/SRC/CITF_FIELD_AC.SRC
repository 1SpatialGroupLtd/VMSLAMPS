C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-04-19 17:31:04.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE CITF_FIELD_AC(IELEN,SUCCESS,FIELD)
C
***     MODULE CITF_FIELD_AC
***     IDENT	19AP93
C
C	Copyright Laser-Scan Ltd, Cambridge, England
C	Author					JB	18-Dec-1992
C
C	Get any feature field values from the AC
C	Returns SUCCESS = .TRUE. on success
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER*2	IELEN		! Entry length
	LOGICAL		SUCCESS		! TRUE if succeed
	LOGICAL		FIELD		! TRUE if field AC value
C
C Common:
	INCLUDE 	'LSL$CMNFRT:FRTCOM.CMN'	! general FRT stuff
	INCLUDE 	'LSL$CMNFRT:FRTACD.CMN'	! default attribute info
	INCLUDE		'HERE:FTRCMN.CMN'
C
C Messages:
	INCLUDE 	'HERE:I2NTFMSG.PAR'
C
C Functions:
	LOGICAL		ACDFND
	INTEGER*2	EXPAND
C
C Local parameters
	BYTE		BLANK
	PARAMETER	(BLANK = ' ')
C
C Workspace:
	INTEGER		I,J
	INTEGER*2	RDARR(3)
	CHARACTER*4	VALCHAR
C
	INTEGER*2	ACTYPE
	EQUIVALENCE	(ACTYPE,RDARR(1))
C
	INTEGER		LCODE
	EQUIVALENCE	(LCODE,RDARR(2))
	EQUIVALENCE	(LCODE,VALCHAR)
C
	INTEGER*2	RLEN		! Length of TEXT
	BYTE		TEXT(254)	! Optional text string
	CHARACTER*127	CTEXT
	EQUIVALENCE	(TEXT,CTEXT)
C
	INTEGER*4	MONTH		! for date AC's
C
	CHARACTER*12	DATE,TIME	! Temp storage
	CHARACTER*8	NTF_DATE
	CHARACTER*2	CMONTH
C
	CHARACTER*3	MONTHS(12)	! JAN, FEB,...,DEC
C	CHARACTER*6	NODATA(6)	! what field should hold if no data
	CHARACTER*12	NODATA(6)	! what field should hold if no data
C
	DATA MONTHS /	'JAN','FEB','MAR','APR','MAY','JUN',
     &			'JUL','AUG','SEP','OCT','NOV','DEC' /
C.........................................................................
	SUCCESS = .TRUE.
	FIELD   = .FALSE.
C
C Get the attribute code (type)
C
	CALL EIHRI (RDARR,3,1)
C .........................................................................
C First see if it's an attribute number we are expecting
C
	IF (ACDFND(ACTYPE)) THEN			! not in ACD
	   CALL LSL_PUTMSG(I2NTF__ACNOTFND,ACTYPE)
	   CALL LSL_ADDMSG(I2NTF__ACIGNORE,FSN,ISN)
	   SUCCESS = .FALSE.
	   GOTO 999
	ENDIF
C
C Clear the text 
	DO 100 I=1,254
	   TEXT(I) = BLANK
100	CONTINUE
C
C Field value in AC text string for SPEC
C
	RLEN = (IELEN-3)*2
C
	IF (RLEN.GT.0) THEN
	   CALL EIHRI(TEXT,IELEN-3,4)
C
C and adjust the length if we have an odd number of characters
C
	   IF (TEXT(RLEN).EQ.0) THEN
	      TEXT(RLEN) = BLANK
	      RLEN = RLEN - 1
	   ENDIF
C
C otherwise make the text a blank
C
	ELSE			! no optional text
	   RLEN = 1
	ENDIF
C
C .........................................................................
C Found the AC, check if it's one of the required ones for feature fields
C
	IF (ACD_NAME(1:ACD_NAME_LEN).EQ.'MARGINAL_TXT') THEN
C	   IF (RLEN.GT.LEN_MARGINAL_TXT) 
C     &		CALL LSL_PUTMSG(I2NTF__ACTRUNCATE,'MARGINAL_TXT',FSN,ISN)
C	   MARGINAL_TXT = CTEXT(1:LEN_MARGINAL_TXT)
	   MARGINAL_TXT = VALCHAR(1:LEN_MARGINAL_TXT)
C
	   FIELD = .TRUE.
	   GOTO 999
C
	ELSEIF (ACD_NAME(1:ACD_NAME_LEN).EQ.'PHYS_STAT') THEN
C	   IF (RLEN.GT.LEN_PHYS_STAT) 
C     &		CALL LSL_PUTMSG(I2NTF__ACTRUNCATE,'PHYS_STAT',FSN,ISN)
C	   PHYS_STAT = CTEXT(1:LEN_PHYS_STAT)
	   PHYS_STAT = VALCHAR(1:LEN_PHYS_STAT)
C
	   FIELD = .TRUE.
	   GOTO 999
C
	ELSEIF (ACD_NAME(1:ACD_NAME_LEN).EQ.'UPDATE_DATE') THEN
C
C Check for unset
C
	   IF (LCODE.EQ.0) THEN
	      UPDATE_DATE = '00000000'
	      FIELD = .TRUE.
	      GOTO 999
	   ENDIF
C
C The AC date needs some converting, it comes as an integer...

	   CALL EXPAND('%WS%P0%DD',DATE,LCODE)
C
C ...which has now been expanded into the form dd-mmm-yyyy, but NTF 
C wants yyyymmdd
C
C First translate the month from chars (e.g. 'APR') into integer (03)
C
	   DO 101 J=1,12			! Check which month
	      IF (DATE(4:6).EQ.MONTHS(J)) THEN
	         MONTH = J  
		 GOTO 103
	      ENDIF
101	   CONTINUE
C
C Then re-write the date in the new order
C
103	   CONTINUE
C
!
! But if MONTH = 10, you get an output conversion error
!
!	   IF (MONTH.GT.10) THEN
	   IF (MONTH.GT.9) THEN
	      WRITE(CMONTH,1111) MONTH
	   ELSE
	      WRITE(CMONTH,1112) MONTH
	   ENDIF
C
	   IF (DATE(1:1).EQ.' ') DATE(1:1) = '0'
C
1111	   FORMAT(I2)
1112	   FORMAT('0'I1)
C
	   RLEN = EXPAND('%WS%P0%S4%S2%S2',	NTF_DATE,
     &						DATE(8:11),
     &						CMONTH,
     &						DATE(1:2))
C
	   IF (RLEN.GT.LEN_UPDATE_DATE)
     &		CALL LSL_PUTMSG(I2NTF__ACTRUNCATE,'UPDATE_DATE',FSN,ISN)
C
	   UPDATE_DATE = NTF_DATE(1:LEN_UPDATE_DATE)
C
	   FIELD = .TRUE.
	   GOTO 999
C
	ELSEIF (ACD_NAME(1:ACD_NAME_LEN).EQ.'UPDATE_STATUS') THEN
C	   IF (RLEN.GT.LEN_UPDATE_STATUS)
C     &		CALL LSL_PUTMSG(I2NTF__ACTRUNCATE,'UPDATE_STATUS',FSN,ISN)
C	   UPDATE_STATUS = CTEXT(1:LEN_UPDATE_STATUS)
	   UPDATE_STATUS = VALCHAR(1:LEN_UPDATE_STATUS)
C
	   FIELD = .TRUE.
	   GOTO 999
C
	ELSEIF (ACD_NAME(1:ACD_NAME_LEN).EQ.'PROCESS') THEN
C	   IF (RLEN.GT.LEN_PROCESS)
C     &		CALL LSL_PUTMSG(I2NTF__ACTRUNCATE,'PROCESS',FSN,ISN)
C	   PROCESS = CTEXT(1:LEN_PROCESS)
	   PROCESS = VALCHAR(1:LEN_PROCESS)
C
	   FIELD = .TRUE.
	   GOTO 999
C
	ELSEIF (ACD_NAME(1:ACD_NAME_LEN).EQ.'DATE_OF_PROCESS') THEN
C
C Check for unset
C
	   IF (LCODE.EQ.0) THEN
	      DATE_OF_PROCESS = '00000000'
	      FIELD = .TRUE.
	      GOTO 999
	   ENDIF
C
C The AC date needs some converting, it comes as an integer...
C
	   CALL EXPAND('%WS%P0%DD',DATE,LCODE)
C
C ...which has now been expanded into the form dd-mmm-yyyy, but NTF 
C wants yyyymmdd
C
C First translate the month from chars (e.g. 'APR') into integer (03)
C
	   DO 201 J=1,12			! Check which month
	      IF (DATE(4:6).EQ.MONTHS(J)) THEN
	         MONTH = J  
		 GOTO 203
	      ENDIF
201	   CONTINUE
C
C Then re-write the date in the new order
C
203	   CONTINUE
C
	   IF (MONTH.GT.10) THEN
	      WRITE(CMONTH,1111) MONTH
	   ELSE
	      WRITE(CMONTH,1112) MONTH
	   ENDIF
C
	   IF (DATE(1:1).EQ.' ') DATE(1:1) = '0'
C
	   RLEN = EXPAND('%WS%P0%S4%S2%S2',	NTF_DATE,
     &						DATE(8:11),
     &						CMONTH,
     &						DATE(1:2))
C
	   IF (RLEN.GT.LEN_DATE_OF_PROCESS)
     &		CALL LSL_PUTMSG(I2NTF__ACTRUNCATE,'DATE_OF_PROCESS',FSN,ISN)
	   DATE_OF_PROCESS = NTF_DATE(1:LEN_DATE_OF_PROCESS)
C
	   FIELD = .TRUE.
	   GOTO 999
C
C Get variable SPEC field
	ELSEIF (ACD_NAME(1:ACD_NAME_LEN).EQ.'SPEC') THEN
	   LEN_SPEC = RLEN
	   SPEC = CTEXT(1:RLEN)
C
	   FIELD = .TRUE.
	   GOTO 999
	ENDIF
C
C.........................................................................
C
999	RETURN
	END
C
