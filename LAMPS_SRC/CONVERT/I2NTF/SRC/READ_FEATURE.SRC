C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-05-24 12:01:00.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE READ_FEATURE(FCODE,CODECOM,STCLASS,FEATDES,LEN,RETCOD)
C
***	IDENT	24MY93
***	MODULE	READ_FEATURE
C
C	Copyright Laser-Scan Ltd., Cambridge, England.
C
C	Created 					      VLG  09-Jun-1990
CMOD	Add extra functionality for /WATER_DISTRIB qualifier  VLG  17-Jan-1991
CMOD	BS7567 (v2.0) support added (W93/12)		 	ST 20-May-1993
C
C	CONVERT I2NTF Utility - decode line from featclass file
C
C	For ordinary errors, we attempt to continue with the file
C
C	Returns 0 for success
C
	IMPLICIT NONE
C
C Arguments
C
	CHARACTER*4	FCODE		! 4 character feature code
	CHARACTER*10	CODECOM		! 10 character feature code
	CHARACTER*20	STCLASS		! 20 character feature code
	CHARACTER*41	FEATDES		! feature description
	INTEGER		LEN		! FEATDES string length
	INTEGER*4	RETCOD		! system error code
C
C Included Parameter Files
C
	INCLUDE 'CMN:I2NTFMSG.PAR'	    ! message definitions
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'  ! LSLLIB message definitions
	INCLUDE 'LSL$CMNLSL:READSTR.PAR'    ! Parameters for READSTR
C
C Common Blocks
C
	INCLUDE 'FTRCMN.CMN'		! Feature info
	INCLUDE 'COMMANDS.CMN'		! various options
	INCLUDE 'LSL$CMNLSL:CMDCOM.CMN'	! command decoding
	INCLUDE 'LSL$CMNLSL:STATUS.CMN'	! LSLLIB status flag
C
C Functions called
C
	INTEGER		READSTR
	LOGICAL		RDINT
C
C Local Variables
C
	CHARACTER*10	COMMAND		! Read from line
	CHARACTER*10	COMSTR		! Legal command
	INTEGER*2	TEMPLEN		! Of strings read
	INTEGER*2	I		! loop counter
	INTEGER		RETVAL		! return value from LSLLIB
	INTEGER		TEMPCODE
	CHARACTER*1	FLAG		! Optional flag on command line
	CHARACTER*5	WATERCODE	! Used if /WATER_DISTRIB to get a flag
C
	DATA COMSTR/'FEATURE'/
C ..................................................................
C Assume that everything goes well
C
	RETCOD = 0
C
C Clear strings so that ASCII 0 characters aren't at the end
C
	COMMAND = '          '
	FCODE   = '    '
	CODECOM = '          '
	STCLASS = '                    '
	FEATDES = '                                         '
C
C
C Read command from line
C
	TEMPLEN = READSTR( COMMAND,,ON_CMD,.TRUE., )
	IF ( TEMPLEN.LE.0 ) THEN
	   RETCOD = -1
	   GOTO 999
	ENDIF
C 
C Got the command, see if we recognise it
C
	IF ( COMMAND(:TEMPLEN).NE. COMSTR(:TEMPLEN) ) THEN
	   CALL LSL_PUTMSG ( I2NTF__UNKNCOM, COMMAND(:TEMPLEN))
	   RETCOD = 1
	   GOTO 999
	ENDIF
C
C Read the rest of the line 
C - FCODE...
C 
	IF (WATER_DISTRIB) THEN
	   TEMPLEN = READSTR( WATERCODE,,ON_SPACE,.TRUE., )
	   IF ( TEMPLEN.LE.0 ) THEN
	      CALL LSL_PUTMSG(I2NTF__ERRRDFEAT)
	      RETCOD = 1
	      GOTO 999
	   ENDIF
	   FCODE = WATERCODE(:4)
	ELSE
	   TEMPLEN = READSTR( FCODE,,ON_SPACE,.TRUE., )
	   IF ( TEMPLEN.LE.0 ) THEN
	      CALL LSL_PUTMSG(I2NTF__ERRRDFEAT)
	      RETCOD = 1
	      GOTO 999
	   ENDIF
	ENDIF
	IF ((FCODE(:4).EQ.'NONE').OR.(FCODE(:4).EQ.'none')) FCODE = ' '
C
C ...and CODECOM
C
	TEMPLEN = READSTR( CODECOM,,ON_SPACE,.TRUE., )
	IF ( TEMPLEN.LE.0 ) THEN
	   CALL LSL_PUTMSG(I2NTF__ERRRDFEAT)
	   RETCOD = 1
	   GOTO 999
	ENDIF
	IF ((CODECOM(:4).EQ.'NONE').OR.(CODECOM(:4).EQ.'none')) 
     &							CODECOM = ' '
C
C ...and STCLASS
C
	TEMPLEN = READSTR( STCLASS,,ON_SPACE,.TRUE., )
	IF ( TEMPLEN.LE.0 ) THEN
	   CALL LSL_PUTMSG(I2NTF__ERRRDFEAT)
	   RETCOD = 1
	   GOTO 999
	ENDIF
	IF ((STCLASS(:4).EQ.'NONE').OR.(STCLASS(:4).EQ.'none'))
     &							 STCLASS = ' '
C
C ...and FEATDES
C
	FEATDES = ' '
	TEMPLEN = READSTR( FEATDES,,ON_EOL,.TRUE., )
	LEN = MIN(TEMPLEN,41)
C
C If /WATER_DISTRIB then see if we want to save the feature code
C
	IF (WATER_DISTRIB) THEN
	   IF ((WATERCODE(5:5).EQ.'T').OR.(WATERCODE(5:5).EQ.'t')) THEN
	      WL_COUNT = WL_COUNT + 1
	      IF (WL_COUNT.GT.300) THEN
		CALL LSL_PUTMSG(I2NTF__TOOMNYFC,300)
	        RETCOD = 1
		GOTO 999
	      ENDIF
	      CALL SETAUX(%REF(WATERCODE(:4)),4)
	      IF (RDINT(TEMPCODE)) THEN
	        RETCOD = 1
	        GOTO 999
	      ENDIF
	      WATERLINKS(WL_COUNT) = TEMPCODE
	   ENDIF
	ENDIF
C .....................................................................
C Finish
C
	RETCOD = 0
C
C Return
C
999	RETURN
	END
