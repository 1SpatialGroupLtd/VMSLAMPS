C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-05-21 16:00:10.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION ATTDESC
C
***	MODULE	ATTDESC
***	IDENT	21MY96
C
C	Copyright Laser-Scan Ltd., Cambridge, England.
C	Created 				IMcL	31-Jul-1989
C
CMOD 	Do not output annotation or collect ACs	VLG	21-Jun-1990
CMOD	Modified for CITF			 ST	18-Dec-1992
CMOD	BS7567 (v2.0) support added (W93/12)	 ST	20-May-1993
CMOD	Fix CITF ATTDESC record output as same as
C	NTF Version 1.1. Mod 1301 		 JB	04-Oct-1993
CMOD    Replace missing last divider. Mod 1329.	 ST	12-Jan-1994
CMOD    Implement CITF96 changes (WI/CC 1545)    TJM    20-May-1996   
C
C Description
C
C	Writes the ATTDESC record which contains data on how the 
C	attributes are to be interpretted. Writes one ATTDESC record
C	for each attribute specified in the attribute file.
C
C	For ordinary errors, we attempt to continue with the file
C
C	Returns FALSE if something drastic goes wrong, TRUE otherwise
C
	IMPLICIT NONE
C
C Included Parameter Files
	INCLUDE 'I2NTFMSG.PAR'		    ! message definitions
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'  ! LSLLIB message definitions
	INCLUDE 'CMN:LUNS.PAR'		    ! logical units
C
C Common Blocks
	INCLUDE 'LSL$CMNFRT:FRTCOM.CMN'	! general FRT stuff
	INCLUDE 'LSL$CMNFRT:FRTACD.CMN'	! default attribute info
	INCLUDE 'CMN:ATTRIBUTE.CMN'	! attribute description table
	INCLUDE 'CMN:COMMANDS.CMN'	! various options
	INCLUDE 'CMN:CITFATTS.CMN'	! various options
C
C Functions
	INTEGER*2	EXPAND
C
C Local Variables
	INTEGER*2	I,J,K		! counters
	CHARACTER*2	MM_MONTH(2)	! min month of attribute date
	INTEGER*2	LENGTH		! of STRING (record to be output)
	CHARACTER*80	STRING		! record to be output
	INTEGER*4	WIDTH(5)	! of the fields being described
	CHARACTER*6	NODATA(6)	! what field should hold if no data
	INTEGER*2	RLEN		! length of RANGE
	CHARACTER*30	VRANGE		! Temp storage for min/max values
	CHARACTER*2	REC_ID		! Record identifier ( 40 or 00 )
	CHARACTER*3	MONTHS(12)	! JAN, FEB,...,DEC
	CHARACTER*2	MONTHS_INT(12)	! 01,02,...,12
	CHARACTER*1	CONT_FLAG	! Whether we need another record
	CHARACTER*11	TEMPDATE(2)	! Temp storage of dates
	CHARACTER*3	FWIDTH		! The width of the field
	CHARACTER*5	FINTER		! How the field should be read
C
	DATA MONTHS /	'JAN','FEB','MAR','APR','MAY','JUN',
     &			'JUL','AUG','SEP','OCT','NOV','DEC' /
	DATA MONTHS_INT / '01','02','03','04','05','06',
     &			'07','08','09','10','11','12' /
	DATA NODATA/'     0','     0','      ','      ','::    ','      '/
C	DATA NODATA/'     0','   0.0','      ','      ','::    ','      '/
C
C ..................................................................
C Assume that everything goes well
C
	ATTDESC   = .TRUE.
	CONT_FLAG = '1'
	REC_ID    = '40'
	CONT_FLAG = '0'
	RLEN = EXPAND('%WS% %S12%A1%S12',VRANGE, '            '
     &	                               ,DIVIDER,'            ')
C
C Loop round each of the attributes we were given in the attribute file
C
	DO 100 I=1,ATTR_PTR
C
C For CITF, only write non-default attributes to an ATTDESC record.
C
	   IF (HAD_CITF93.OR.HAD_CITF96) THEN
	      DO 110 J = 1, NUM_CITF_ATTS
		 IF (NTF_ATT_NAME(I).EQ.CITF_DEF_ATT(J)) GOTO 100
 110	      CONTINUE
	   ENDIF
C
	   IF (IFF_ANNOTATE(I)) GOTO 100	! Ignore annotation AC
	   IF (IFF_COLLECT(I))  GOTO 100	! Ignore collect AC
C
C Work out the range
C
	   IF (ATTR_TRANS(I).EQ.ACD_DATATYPE_I ) THEN	! Integer
	      RLEN = EXPAND('%WS%I12%A1%I12',	VRANGE,	
     &						ATT_MM_I(1,I),
     &						DIVIDER,
     &						ATT_MM_I(2,I) )
C
C For each attribute we need to give a format interpretation. This 
C will be included in the attribute description. 
C
	      FINTER = 'I11  '
C
C ************************************************************************
C ** Note that the range is in a fixed format and can be less than the	**
C ** required field width. NTF have been told about this and it should	**
C ** be remedied in the next release.					**
C ************************************************************************
C
	      FWIDTH = '011'
C
	   ELSEIF ( ATTR_TRANS(I).EQ.ACD_DATATYPE_R ) THEN	! Real
C
C ************************************************************************
C **									**
C **	NB 	we are forced to use F format here as it		**
C **		is all NTF will recognise. IFF reals can		**
C **		be in scientific format (E) and have a max		**
C **		value of 1.0 E36. This will obviously not		**
C **		fit into the 12 character field required.		**
C **		NTF have been notified of the problem by 		**
C **		TJI and we expect a solution soon. Until 		**
C **		then give the min/max values as best we			**
C **		can.							**
C **									**
C ************************************************************************
C For now:
C	      ATT_MM_R(1,I) = MAX ( ATT_MM_R(1,I),-999999.999 )
C	      ATT_MM_R(2,I) = MIN ( ATT_MM_R(2,I),9999999.999 )
	      ATT_MM_R(1,I) = MAX ( ATT_MM_R(1,I),-999999.999 )
	      ATT_MM_R(2,I) = MIN ( ATT_MM_R(2,I), 999999.999 )
C
	      RLEN = EXPAND('%WS%I12%A1%I12',VRANGE,
     &						NINT(ATT_MM_R(1,I)*1000.0),
     &						DIVIDER,
     &						NINT(ATT_MM_R(2,I)*1000.0))
C
	      FINTER = 'R12,3'
	      FWIDTH = '012'
C
	   ELSEIF ( ATTR_TRANS(I).EQ.ACD_DATATYPE_C ) THEN	! Character
	      RLEN = EXPAND('%WS%A4%A1%A4',	VRANGE,	
     &						ACD_DEF_MINC,
     &						DIVIDER,
     &						ACD_DEF_MAXC )
C
	      FINTER = 'A4   '
	      FWIDTH = '004'
C
	   ELSEIF ( ATTR_TRANS(I).EQ.ACD_DATATYPE_D ) THEN	! Date
C
C Transfer the parameter version of the max and min dates into strings
C so we can cut them up
C
	      TEMPDATE(1) = ACD_DEF_MIND
	      TEMPDATE(2) = ACD_DEF_MAXD
C
C Translate the month from chars ( e.g. 'APR' ) into integer ( 03 )
C
	      DO 103 K=1,2		! Min then max value
	         DO 101 J=1,12		! Check which month
	            IF ( TEMPDATE(K)(4:6).EQ.MONTHS(J) ) THEN
	   	       MM_MONTH(K) = MONTHS_INT(J)
		       GOTO 103
	 	    ENDIF
101	         CONTINUE
103	      CONTINUE
C
	      RLEN = EXPAND('%WS%S4%S2%S2%A1%S4%S2%S2', VRANGE,	
     &						TEMPDATE(1)(8:11),
     &						MM_MONTH(1),
     &						TEMPDATE(1)(:2),
     &						DIVIDER,
     &						TEMPDATE(2)(8:11),
     &						MM_MONTH(2),
     &						TEMPDATE(2)(:2))
C
	      FINTER = 'DATE '
	      FWIDTH = '008'
C
	   ELSEIF ( ATTR_TRANS(I).EQ.ACD_DATATYPE_T ) THEN	! Time
C
	      RLEN = EXPAND('%WS%DT%A1%DT',	VRANGE,	
     &						ACD_DEF_MINT,
     &						DIVIDER,
     &						ACD_DEF_MAXT )
C
	      FINTER = 'A11  '
	      FWIDTH = '011'
C
	   ELSEIF ( ATTR_TRANS(I).EQ. 6 ) THEN	! Optional text string
C
C IFF AC's can have an optional text string attached to them, in NTF
C we will output these as separate, variable length, text attributes
C
	      RLEN = EXPAND('%WS% %S12%A1%S12',VRANGE, '            '
     &	                                     ,DIVIDER,'            ')
!!!	      VRANGE = ' '
!!!	      RLEN = 1
C
	      FINTER = 'A*   '
	      FWIDTH = '   '	! Variable ( NTF newsletter - April 1989 )
	   ENDIF
C
C Work out how long this description is going to be
C
	   IF (VERSION.EQ.1.1 .OR. HAD_CITF93 .OR. HAD_CITF96) THEN
	      LENGTH = 12 + IFF_ATT_LEN( I ) + 10 + RLEN + 2
	      CALL EXPAND('%WS%S2%S2%S3%S5%S%A1%  %A1%S6%A1%S%S1', STRING,
     &					REC_ID,
     &					NTF_ATT_NAME(I),
     &					FWIDTH,
     &					FINTER,
     &					IFF_ATT_NAME(I)(:IFF_ATT_LEN(I)),
     &					DIVIDER,DIVIDER,
     &					NODATA( ATTR_TRANS(I)),
     &					DIVIDER,
     &					VRANGE(:RLEN), CONT_FLAG )
C
	   ELSEIF (VERSION.EQ.2.0) THEN
	      LENGTH = 12 + IFF_ATT_LEN( I ) + 3
	      CALL EXPAND('%WS%S2%S2%S3%S5%S%A1%S1', STRING,
     &					REC_ID,
     &					NTF_ATT_NAME(I),
     &					FWIDTH,
     &					FINTER,
     &					IFF_ATT_NAME(I)(:IFF_ATT_LEN(I)),
     &					DIVIDER,
     &					CONT_FLAG )
	   ENDIF
C
	   CALL WSTR ( STRING, LENGTH )
C
100	CONTINUE
C
C .....................................................................
C Finish
	GOTO 9000
C
C Failure
9999	ATTDESC = .FALSE.
C
C Return
9000	RETURN
	END
C
