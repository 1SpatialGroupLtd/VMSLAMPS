C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-07-31 17:16:22.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION READ_JUNCT(RPOSX,RPOSY,NARMS)
C
***     MODULE READ_JUNCT
***     IDENT  31JL92
C
C     Copyright Laser-Scan Ltd, Cambridge, England
C
C	Author		VLG		14-Feb-90
C
C Reads details of the junction in hand 
C
C Returns TRUE for sucessful completion, otherwise FALSE
C
	IMPLICIT NONE
C
C Messages:
C
	INCLUDE 'HERE:I2NTFMSG.PAR'
C
C Commons:
C
	INCLUDE	'LSL$CMNIFF:IFFHAN.CMN'		! for LPOSH
	INCLUDE	'LSL$CMNIFF:IFFJUN.CMN'		! for junction data
	INCLUDE	'HERE:COMMANDS.CMN'
	INCLUDE	'HERE:NODECMN.CMN'
	INCLUDE	'HERE:FTRCMN.CMN'
C
C Arguments:
C
	REAL		RPOSX,RPOSY	!  Position of junction
	INTEGER*2	NARMS		!  number of arms
C
C Workspace:
C
	INTEGER		I
	INTEGER 	OK		!  Success flag
	REAL		POS(2,2)	!  Coords for output
	INTEGER*2	ARMCOUNT	!  Number of arms
	INTEGER*4	ADDR		!  Address of junction
	INTEGER*2	VERT		!  Vertex number in ST
	INTEGER*4	JBPOS		!  Address of our JB
	INTEGER*2	OFFSET		!  Number of junction in JB
C
C Initialise
C
	OK=.TRUE.
C  .......................................................................
C
C Remember details about the junction
C
	NCOUNT = NCOUNT + 1		! Next node
	IF (NCOUNT.GT.MAX_NODES) THEN
	   CALL LSL_PUTMSG(I2NTF__TOOMNYNODES,MAX_NODES)
	   OK = .FALSE.
	   GOTO 999
	ENDIF
	IF (NARMS.GT.MAX_LINKS) THEN
	   CALL LSL_PUTMSG(I2NTF__TOOMNYARMS,NCOUNT,NARMS,MAX_LINKS)
	   NODES(NCOUNT,4) = NARMS
	   OK = .FALSE.
	   GOTO 999
	ENDIF
	ARMCOUNT = 0
	DO 10 I = 1,NARMS
	   CALL JIHR(I,ADDR,VERT)
	   IF (ADDR.NE.0) THEN
	      ARMCOUNT = ARMCOUNT + 1
	      IF (VERT.EQ.1) THEN		! ST starts at junction
	         ST_STORE(NCOUNT,I) = ADDR	
	      ELSE				! ST ends at junction
	         ST_STORE(NCOUNT,I) = -ADDR	! store address as negative
	      ENDIF
	   ENDIF
10	CONTINUE
	NARMS  = ARMCOUNT
C
C Store node coordinates in required format
C
	NODE_GEOMS(NCOUNT,1) = NINT(RPOSX/XY_MULT)
	NODE_GEOMS(NCOUNT,2) = NINT(RPOSY/XY_MULT)
C
	NODES(NCOUNT,1) = LPOSH		! JB address
	NODES(NCOUNT,2) = IFPOSJ	! Offset in JB
	NODES(NCOUNT,3) = 0		! Initialise GEOM_ID
	NODES(NCOUNT,4) = NARMS
	ST_STORE(NCOUNT,7) = NARMS	! Counter to check all links are found
C
C  .......................................................................
C
	OK=.TRUE.
999	READ_JUNCT = OK
	RETURN
	END	   
