C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-08-22 17:12:04.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        INTEGER*4 FUNCTION GET_CROSS()
C
***	MODULE	GET_CROSS
***	IDENT	24JL86
C
C Copyright Laser-Scan Laboratories Ltd.,Cambridge,England
C 
C	Created.					TJH  21-Aug-1986
C
C Get cross tabulation between IFF feature codes and MOSS feature labels
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$CMNI2MOSS:PARAMS.PAR'
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE	'LSL$CMNLSL:READSTR.PAR'
	INCLUDE 'LSL$CMNI2MOSS:I2MOSSMSG.PAR'
	INCLUDE 'LSL$CMNLSL:CLD.CMN'
	INCLUDE 'LSL$CMNI2MOSS:COMMAND.CMN'
	INCLUDE 'LSL$CMNLSL:EXCEPTION.CMN'
C
C Longword:
	INTEGER	 I			! tmp. var.
	INTEGER  LINE			! /CROSS_CODES file line number
	INTEGER  IFC			! IFF feature code
	INTEGER	 RET			! for error return	
	INTEGER	 IERR			! for error return	
	INTEGER	 LABLEN			! length of MOSS label	
C
C Logical:
	LOGICAL	CRSOPN			! /CROSS_CODES file now open
C
C Byte:
	BYTE	 ICH			! one character of TXTBUF
C
	INTEGER  SS$_NORMAL
	EXTERNAL SS$_NORMAL		! normal successful completion
C
C Functions:
	LOGICAL   FLROPN		! open file for FILEO	
	LOGICAL	  FLRSTR		! read line from file
	LOGICAL	  RDCHS			! read character - miss spaces
	INTEGER	  READSTR		! read a string from TXTBUF
	INTEGER	  RDLONG		! read a longword from TXTBUF
C
C Character:
	CHARACTER*80	LABEL		! the MOSS string label
C
C ......................................................................
C
C		 O P E N   /C R O S S__C O D E S   F I L E?
C
C Was a cross code table specified at all?
	IF (HAD_CROSS) THEN
C
C Open the /CROSS_CODES file
	   GET_CROSS=FLROPN(CROSSLUN,CROSS_FIL(:CROSS_LEN),IERR)
           IF (GET_CROSS) THEN			! did it open ok?
	      CRSOPN=.TRUE.			! file now open
              IF (HAD_LOG) THEN			! yes, tell user?
	        GET_CROSS=I2MOSS__CRSSOPNIN	! yes
	        CALL LSL_PUTMSG(GET_CROSS,CROSS_FIL(:CROSS_LEN))
	      ENDIF
C
C ......................................................................
C
C		M A I N   R E A D / D E C O D I N G   L O O P
C
C If the file opened OK read it line by line getting IFF feature code/
C MOSS string labels pair by pair, one pair per record.
C
	      NUMC=0
	      LINE=0
C
 10	      LINE=LINE+1
	      RET=FLRSTR( ,, IERR )		! read a line from file
C
	      IF (RET.EQ.LSL__NORMAL) THEN
	         CALL BSLN
		 IF (RDCHS(ICH)) GOTO 10
	         IF (ICH.EQ.'!') GOTO 10	! comment line
		 CALL BSCH
C
C ......................................................................
C
C Read IFF feature code
C
		 IF (RDLONG(IFC)) THEN
	            GET_CROSS=I2MOSS__ERRDCRSS
	            CALL LSL_PUTMSG(GET_CROSS,LINE)
		    IF (ERRNUM.NE.LSL__NORMAL) THEN
		       CALL LSL_ADDMSG(ERRNUM)
		       IF (ERRNUM.EQ.LSL__HADEXCP) THEN
		         CALL LSL_ADDMSG(LSL_EXCP)
	                 GOTO 30
		       ENDIF
		    ENDIF
	         ENDIF
C
C ......................................................................
C
C Then find, read, uppercase and pad to 4 bytes the associated MOSS 
C string label
C ......................................................................
C
		LABLEN=READSTR(LABEL,0,ON_SPACE,.TRUE.,IERR)
C
C Check for rogue comment delimiter ie "   n   ! string_label  "
C or "  n  !string_label "
C
	        IF (LABEL(1:1).EQ.'!') THEN
		   GET_CROSS=I2MOSS__COMPOSINV
	           CALL LSL_PUTMSG(GET_CROSS,LABEL,LINE)
		   GOTO 30
	        ENDIF
C
C Check for comment delimiter tacked onto end of label 
C ie  "  n   string_label!   "
C
	        IF (LABEL(LABLEN:LABLEN).EQ.'!') THEN
		   LABLEN=LABLEN-1		! remove if present.
	        ENDIF
C
C Check string label length
C
		IF (LABLEN.EQ.0.OR.LABLEN.GT.4) THEN
	           GET_CROSS=I2MOSS__ERRDCRSS
	           CALL LSL_PUTMSG(GET_CROSS,LINE)
		   IF (LABLEN.GT.4) THEN
	              CALL LSL_ADDMSG(I2MOSS__LABTOOLNG,LABEL(:LABLEN))
		   ENDIF
		   IF (.NOT.IERR) THEN
	              CALL LSL_ADDMSG(IERR)
		   ENDIF
	   	   GOTO 30
		ENDIF
C
		CALL STR$UPCASE(LABEL(:LABLEN),LABEL(:LABLEN))
C
		DO 20 I=LABLEN+1,4
		   LABEL(I:I)=' '
20		CONTINUE
C
C ......................................................................
C
C Transfer our spoils into common for use in IFFBDY
C
		NUMC=NUMC+1
	        IF (NUMC.GT.MAXLAB) THEN
		   GET_CROSS=I2MOSS__TOOMNYLAB
		   CALL LSL_PUTMSG(GET_CROSS)
		   GOTO 30
		ELSE
		   CROSS_FC(NUMC)=IFC
		   CROSS_LAB(NUMC)=LABEL(:4)
		   GOTO 10
		ENDIF
C
C ......................................................................
C
C End of /CROSS_CODES file detected
C
	      ELSEIF (RET.EQ.LSL__EOF) THEN
C
C Had we got anthing from the file?
C
		 IF (NUMC.EQ.0) THEN		! no, disaster
		    GET_CROSS=I2MOSS__CROSSEOF
	            CALL LSL_PUTMSG(GET_CROSS)
	            CALL LSL_ADDMSG(RET)
	         ELSE				! yes, probably OK!
	           GOTO 30			! tidy up and return
	         ENDIF
C
C ......................................................................
C
C Some error rather than EOF while reading the /CROSS_CODES file
C
	      ELSE
	         GET_CROSS=I2MOSS__ERRDCRSS
	         CALL LSL_PUTMSG(GET_CROSS,LINE)
	         CALL LSL_ADDMSG(RET)
	         IF (RET.EQ.LSL__SYSREAD) CALL LSL_PUTMSG(IERR)
	      ENDIF
C
C ......................................................................
C
C Couldn't get the /CROSS_CODES file to open
C
	   ELSE					! file open error
	      GET_CROSS=I2MOSS__OPNCROSS	! tell user
	      CALL LSL_PUTMSG(GET_CROSS,CROSS_FIL(:CROSS_LEN))
	      CALL LSL_ADDMSG(IERR)		! give any 2ndary error
           ENDIF
C
C ......................................................................
C
C We did'nt need to do anthing, all is well
C
	ELSE
	   GET_CROSS=%LOC(SS$_NORMAL)
	ENDIF
C
C ......................................................................
C
C		T I D Y  U P   A N D  R E T U R N
C
C Ensure GET_CROSS returns with the expected success code
C
30	IF (GET_CROSS) GET_CROSS=%LOC(SS$_NORMAL)
C
C If open, close /CROSS_CODES file
	IF (CRSOPN) CALL FLRCLO(CROSSLUN)
C
	RETURN
	END
