C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-06-23 13:54:56.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        INTEGER*4 FUNCTION CMDLIN()
C
***	MODULE	CMDLIN
***	IDENT	23JN87
C
C 	Copyright Laser-Scan Laboratories Ltd.,England
C
CMOD	LSL$IF stripped from output file default	TJH  23-Jun-1987
CMOD	/IFFOK/ removed					TJH  05-Jun-1987
C	Created.					TJH  24-Jul-1986
C
C	The command decoder for I2MOSS
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE 'LSL$CMNI2MOSS:I2MOSSMSG.PAR'
	INCLUDE 'LSL$CMNI2MOSS:PARAMS.PAR'
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE '($SSDEF)/NOLIST'
C
C Common:
	INCLUDE 'LSL$CMNLSL:CLD.CMN'
	INCLUDE 'LSL$CMNLSL:FILENAME.CMN'
	INCLUDE 'LSL$CMNI2MOSS:COMMAND.CMN'
C
C Command Language Definitions:
	EXTERNAL	I2MOSS_CLD
C
C Longword:
	INTEGER		I	   ! tmp var.
	INTEGER		TMP_LEN	   ! length of tmp. file-spec
C
C Logical*4
	LOGICAL		ABSENT	   ! .T. if file param. not found
	LOGICAL		HAD_AC	   ! had /HEIGHT_AC qualifier
	LOGICAL		HAD_BLK	   ! had /BLOCK_SIZE qualifier
	LOGICAL		HAD_DEN	   ! had /DENSITY qualifier
	LOGICAL		HAD_NAME   ! had /NAME qualifier
	LOGICAL		HAD_TER	   ! had /TERMINATOR qualifier
 	LOGICAL		LOCAL      ! .T. if qual. is local
	LOGICAL		LOCNEG     ! set .T. if qual. locally negated
        LOGICAL		WHINGE     ! .T. - local error reporting
C
C Functions called:
	INTEGER*4	DCL_FILE   ! reads & parses file title from DCL 
C			           ! command line
	INTEGER*4	DCL_INT	   ! looks for qualifier integer args.
	INTEGER*4	DCL_QUAL   ! looks for specified qualifier
	INTEGER*4	DCL_REAL   ! looks for qualifier real args.
        INTEGER*4       DCL_STARTUP! looks for command line
        INTEGER*4       DCL_STR	   ! looks for qualifier string args.
C
C Character:
	CHARACTER*256	TMP_FIL	   ! temp file-spec for parsing
C
C...................................................................
C
C	    I N I T I A L I S E   T H I N G S 
C
	WHINGE=.TRUE.		 ! local error reporting
C
C....................................................................
C
C	    G E T   C O M M A N D   L I N E
C
	CMDLIN=DCL_STARTUP('I2MOSS',.FALSE.,I2MOSS_CLD,WHINGE)
C
C DCL_STARTUP will return set to SS$_NORMAL if all well.
C
        IF (.NOT.CMDLIN) GOTO 10 		! return
C
C....................................................................
C
C	     C H E C K   F O R   Q U A L I F I E R S
C
C We could have /LOG, /NAME, /NOFC, /NOLAYER, /CROSS_CODE
C /SERIAL_MAGTAPE, /REWIND, /DENSITY, /BLOCK_SIZE, /TERMINATOR 
C and /HEIGHT_AC
C
C First try /LOG
	CMDLIN=DCL_QUAL('LOG',HAD_LOG,LOCAL,LOCNEG,WHINGE)
	IF (.NOT.CMDLIN) GOTO 10 		! return
C
C Try /SERIAL_MAGTAPE
	CMDLIN=DCL_QUAL('SERIAL_MAGTAPE',SERMAG,LOCAL,LOCNEG,WHINGE)
	IF (.NOT.CMDLIN) GOTO 10 		! return
C
C Try /REWIND
	CMDLIN=DCL_QUAL('REWIND',REWIND,LOCAL,LOCNEG,WHINGE)
	IF (.NOT.CMDLIN) GOTO 10 		! return
C
C Try /TERMINATOR
	CMDLIN=DCL_QUAL('TERMINATOR',HAD_TER,LOCAL,LOCNEG,WHINGE)
	IF (.NOT.CMDLIN) GOTO 10 		! return
C
C Try for /NAME argument
	TERMIN=0.0
	IF (HAD_TER) THEN
	   CMDLIN=DCL_REAL('TERMINATOR',WHINGE)
	   IF (CMDLIN) THEN
	      TERMIN=RARRAY(1)
	   ELSE
	      GOTO 10				! return
	   ENDIF
	ENDIF
C
C Now /NAME
	CMDLIN=DCL_QUAL('NAME',HAD_NAME,LOCAL,LOCNEG,WHINGE)
	IF (.NOT.CMDLIN) GOTO 10 		! return
C
C Try for /NAME argument
	IF (HAD_NAME) THEN
	   CMDLIN=DCL_STR('NAME',WHINGE)
	   IF (CMDLIN) THEN
	      MODEL_NAME=CARRAY(1)(:STR_LEN(1))
	      MOD_LEN=STR_LEN(1)
	   ELSE
	      GOTO 10				! return
	   ENDIF
	ENDIF

C
C Now /DENSITY
	CMDLIN=DCL_QUAL('DENSITY',HAD_DEN,LOCAL,LOCNEG,WHINGE)
	IF (.NOT.CMDLIN) GOTO 10 		! return
C
C Get /DENSITY argument
	PE1600=.TRUE.				! set default
	IF (HAD_DEN) THEN
	   CMDLIN=DCL_INT('DENSITY',WHINGE)
	   IF (CMDLIN) THEN
	     IF(IARRAY(1).EQ.800) THEN
		PE1600=.FALSE.
 	     ELSEIF (IARRAY(1).EQ.1600) THEN
		PE1600=.TRUE.				! set default
	     ELSE
	        CMDLIN=I2MOSS__INVDENS
	        CALL LSL_PUTMSG(CMDLIN)
	        CALL LSL_ADDMSG(I2MOSS__POSSDEN)
	        GOTO 10					! return
	     ENDIF
	   ELSE
	      GOTO 10					! return
	   ENDIF
	ENDIF
C
C Now /BLOCK_SIZE
	CMDLIN=DCL_QUAL('BLOCK_SIZE',HAD_BLK,LOCAL,LOCNEG,WHINGE)
	IF (.NOT.CMDLIN) GOTO 10 		! return
C
C Get /BLOCK_SIZE argument
	BLKSIZ=800				! set default
	IF (HAD_BLK) THEN
	   CMDLIN=DCL_INT('BLOCK_SIZE',WHINGE)
	   IF (CMDLIN) THEN
C
C Is block size less than our block buffer size?
C
	     IF (IARRAY(1).LT.MAXBLK) THEN
C
C Is block size divisible by record size?
C
	        IF (MOD(IARRAY(1),80).EQ.0) THEN
		   BLKSIZ=IARRAY(1)
	        ELSE
		   CMDLIN=I2MOSS__INVBLK
	           CALL LSL_PUTMSG(CMDLIN,IARRAY(1))
	           CALL LSL_ADDMSG(I2MOSS__BLKDIV)
	           GOTO 10				! return
		ENDIF
	     ELSE
		CMDLIN=I2MOSS__INVBLK
	        CALL LSL_PUTMSG(CMDLIN,IARRAY(1))
	        CALL LSL_ADDMSG(I2MOSS__MINMAXBLK)
	        GOTO 10					! return
	     ENDIF
	   ELSE
	      GOTO 10					! return
	   ENDIF
	ENDIF
C
C Now /NOFC
	CMDLIN=DCL_QUAL('NOFC',HAD_SKF,LOCAL,LOCNEG,WHINGE)
	IF (.NOT.CMDLIN) GOTO 10 		! return
C
C Get /NOFC argument
	IF (HAD_SKF) THEN
	   CMDLIN=DCL_INT('NOFC',WHINGE)
	   IF (CMDLIN) THEN
	      NUM_SKF=NUMINT
	      DO 20 I=1,NUM_SKF
		 IF (IARRAY(I).LT.0.OR.IARRAY(I).GT.32767) THEN
		    CMDLIN=I2MOSS__INVALFC
		    CALL LSL_PUTMSG(CMDLIN,IARRAY(I))
	            GOTO 10			! return
		 ELSE
	            SKIP_FC(I)=IARRAY(I)
		 ENDIF
20	      CONTINUE
	   ELSE
	      GOTO 10				! return
	   ENDIF
	ENDIF
C
C Now /NOLAYER
	CMDLIN=DCL_QUAL('NOLAYER',HAD_SKL,LOCAL,LOCNEG,WHINGE)
	IF (.NOT.CMDLIN) GOTO 10 		! return
C
C Get /NOLAYER argument
	IF (HAD_SKL) THEN
	   CMDLIN=DCL_INT('NOLAYER',WHINGE)
	   IF (CMDLIN) THEN
	      NUM_SKL=NUMINT
	      DO 30 I=1,NUM_SKL
		 IF (IARRAY(I).LT.0.OR.IARRAY(I).GT.32767) THEN
		    CMDLIN=I2MOSS__INVALLAY
		    CALL LSL_PUTMSG(CMDLIN,IARRAY(I))
	            GOTO 10			! return
		 ELSE
	            SKIP_LAY(I)=IARRAY(I)
		 ENDIF
30	      CONTINUE
	   ELSE
	      GOTO 10				! return
	   ENDIF
	ENDIF
C
C Now /HEIGHT_AC
	CMDLIN=DCL_QUAL('HEIGHT_AC',HAD_AC,LOCAL,LOCNEG,WHINGE)
	IF (.NOT.CMDLIN) GOTO 10 		! return
C
C Get /HEIGHT_AC argument
	IF (HAD_AC) THEN
	   CMDLIN=DCL_INT('HEIGHT_AC',WHINGE)
	   IF (CMDLIN) THEN
	      ACTYPE=IARRAY(1)
	   ELSE
	      GOTO 10				! return
	   ENDIF
	ENDIF
C
C Check for /CROSS_CODE=filespec
	CMDLIN=DCL_QUAL('CROSS_CODE',HAD_CROSS,LOCAL,LOCNEG,WHINGE)
	IF (HAD_CROSS) THEN    	  
	  CMDLIN=DCL_FILE('CROSS_CODE','LSL$MOSS:MOSSCODE.DAT',
     &	            ABSENT,.FALSE.,WHINGE)
	  IF (.NOT.CMDLIN) GOTO 10 	! return
          CROSS_FIL=FILARY(1)(1:FIL_LEN(1))
	  CROSS_LEN=FIL_LEN(1)
	ENDIF
C
C Get input file-spec
	CMDLIN=DCL_FILE('P1','LSL$IF:IFF.IFF;0',ABSENT,.FALSE.,WHINGE)
C
C Transfer file-spec to a local variable
        IF (CMDLIN) THEN
          P1_FIL=FILARY(1)(1:FIL_LEN(1))
	  P1_LEN=FIL_LEN(1)
        ELSE
          GOTO 10 			! return
        ENDIF 
C
C If we didn't get /NAME we must generate a default MOSS model name
C from the input file anme
	IF (.NOT.HAD_NAME) THEN
	   MODEL_NAME(:LEN_NAM)=STR_NAM(:LEN_NAM)
	   MOD_LEN=LEN_NAM
	ENDIF
C
C Generate output default file-spec based on input file. Strip version
C if specified.
	HAD_DEV=.FALSE.
	HAD_DIR=.FALSE.
	STR_EXT='MOSS'
	LEN_EXT=4
	STR_VER='0'
	LEN_VER=1
	CALL EXPFLN(TMP_FIL,TMP_LEN)
C
C Get output filename
	CMDLIN=DCL_FILE('P2',TMP_FIL,ABSENT,.FALSE.,WHINGE)
C
C Transfer file-spec to a local variable
	IF (CMDLIN) THEN
	  P2_FIL=FILARY(1)(1:FIL_LEN(1))
	  P2_LEN=FIL_LEN(1)
	ENDIF
C			
10     IF (CMDLIN) CMDLIN=SS$_NORMAL
	RETURN
   	END
