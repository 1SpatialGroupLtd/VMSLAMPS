	INTEGER FUNCTION READ_IFF_HEADER()
C
***	MODULE	READ_IFF_HEADER
***	IDENT	12SE88
C
C 	Copyright Laser-Scan Laboratories Ltd.,England
C
C Created  J Barber  16-Aug-1988
C
C Reads the opening IFF file header entries, prior to any NO entry
C
	IMPLICIT NONE
C
***     PARAMETER/HERE:I2CEDDMSG/
***     COMMON/LSL$CMNIFF:MHDEF/
***     COMMON/LSL$CMNIFF:MD2DES/
***     COMMON/LSL$CMNIFF:IFFHAN/
***     COMMON/HERE:PARAMS/
***     COMMON/HERE:DESCR/
C
C  workspace
C
	INTEGER*2	IELEN	! length of
	INTEGER*2	IECODE  ! IFF entry
C
        INTEGER         POWEROF10
        INTEGER         EXPONENT
C
C  **********************************************************
C Assume success
C
	READ_IFF_HEADER = I2CEDD__NORMAL
C
        HAD_RA = .FALSE.
        HAD_MD2 = .FALSE.
        HAD_LAYER0 = .FALSE.
        HAD_LAYER1 = .FALSE.
        INLAY(0) = .FALSE.
        INLAY(1) = .FALSE.
C
C  get next entry
C
10	CALL IFFNXT (IECODE, IELEN)

	IF (IELEN.EQ.-1) THEN
           CALL LSL_PUTMSG (I2CEDD__UNEXPENDIFF)
           CALL WRITEF ('  reading IFF header')
	   READ_IFF_HEADER = I2CEDD__UNEXPENDIFF
           GOTO 999
        ENDIF
C
        IF (IECODE.EQ.'RA') THEN
           HAD_RA = .TRUE.
           GOTO 20
        ELSEIF (IECODE.EQ.'MH') THEN
           GOTO 40
        ELSEIF (IECODE.EQ.'MD') THEN
           GOTO 30
        ELSEIF (IECODE.EQ.'HI') THEN
           GOTO 10
        ELSEIF (IECODE.EQ.'NS') THEN
           GOTO 10
        ELSEIF (IECODE.EQ.'CC') THEN
           GOTO 10
        ELSEIF (IECODE.EQ.'CP') THEN
           GOTO 10
        ELSEIF (IECODE.EQ.'NO') THEN
           GOTO 50
        ELSEIF (IECODE.EQ.'NF') THEN         ! gone too far
           HAD_NF = .TRUE.
           CALL EIHR (FSN, 1, 1)
           CALL EIHR (ISN, 1, 2)
           CALL LSL_PUTMSG (I2CEDD__UNEXPENTRY, IECODE)
           CALL WRITEF 
     &    (' at IFF header, with FSN %^W%N (ISN %^W%N)', FSN, ISN)
           GOTO 999
        ELSE
           CALL LSL_PUTMSG (I2CEDD__UNEXPENTRY, IECODE)
           CALL WRITEF ('  in IFF header')
           GOTO 10
        ENDIF
C
C  read the RANGE entry
C
20      CALL EIHRR (RANGE, 4, 1) 
C
        GOTO 10
C
C  read the MD2 entries
C
30	IF (IELEN.NE.MD2LEN) THEN	    ! not type 2 MD 
           CALL LSL_PUTMSG (I2CEDD__UNSETMD)
        ELSE
	   CALL EIHR (MD2ARR, MD2LEN, 1)	
           HAD_MD2 = .TRUE.
        ENDIF
C
        IF (MATV2.NE.2) THEN
           CALL LSL_PUTMSG (I2CEDD__UNSETMD)
           HAD_MD2 = .FALSE.
        ENDIF
C
        GOTO 10   
C
C  was there a MH entry
C
40      CALL EIHR (MHARR(1), 1, 1)  
C
C Test its type to determine if unset (0)
C
        IF (MHDESC(2).NE.0) THEN
           CALL LSL_PUTMSG (I2CEDD__IGNOREDMH)
        ENDIF
C
        GOTO 10
C
C NO - New Overlay
C
50	CALL EIHRI (LAYER,1,1)        ! read layer number
C
        IF (LAYER.EQ.0) THEN
           LPOSNO(0) = LPOSH          ! remember posn of NO
C
           HAD_LAYER0 = .TRUE.
           INLAY(0) = .TRUE.
           CALL EIHRL (LPOSEO(0),1,3) ! posn of corresponding EO
        ELSE
C
C   no layer 0
C
           CALL WRITEF ('  No layer 0 for DSI information')
           LPOSNO(1) = LPOSH          ! remember posn of NO
C
           HAD_LAYER1 = .TRUE.
           INLAY(1) = .TRUE.
	   CALL EIHRL (LPOSEO(1),1,3) ! posn of corresponding EO
        ENDIF
C
C  calculate multiplying factors to maximise the data dynamic range,
C    and x,y shift to keep all segment values positive
C
C  UNITS_FACTOR for converting the units of measurement
C
C  SCALE_FACTOR for multiplying coordinates by power-of-10 to fit 
C     6-digit integer fields
C
999     IF (.NOT.HAD_RA) THEN
           CALL LSL_PUTMSG (I2CEDD__RAMISSING)
           GOTO 1000
        ENDIF
C
        IF (RANGE(1).LT.0.0) X_SHIFT = RANGE(1)
        IF (RANGE(3).LT.0.0) Y_SHIFT = RANGE(3)
C
C  update the RANGE for future reference
C
        RANGE(1) = RANGE(1) - X_SHIFT
        RANGE(2) = RANGE(2) - X_SHIFT
        RANGE(3) = RANGE(3) - Y_SHIFT
        RANGE(4) = RANGE(4) - Y_SHIFT
C
1000    IF (.NOT.HAD_MD2) THEN
           CALL LSL_PUTMSG (I2CEDD__UNSETMD)
           GOTO 2000
        ENDIF
C
C  update Origin MD2LOC for lat/long origin
C
        MD2LOC(1) = MD2LOC(1) + X_SHIFT
        MD2LOC(2) = MD2LOC(2) + Y_SHIFT
C
C  convert radians to seconds as CEDD cannot accommodate them
C
        IF (MD2UNT.EQ.5) THEN        ! units are radians
           MD2UNT = 3                !   convert to seconds
           UNITS_FACTOR = 180.0*3600.0/3.141593
        ENDIF
C
C  use new range and map units to derive further scaling factor
C    for segment values to fit into 6-digit field width with
C    maximum dynamic range
C
2000    IF (.NOT.HAD_RA) GOTO 5000
C
C Check that range is positive
C
	IF ((MAX (RANGE(2), RANGE(4))).GT.0.0) THEN
           POWEROF10 = INT (LOG10 (MAX (RANGE(2), RANGE(4)) ))        
           EXPONENT = 5 - POWEROF10
	ELSE
	   EXPONENT = 0
	ENDIF
C
        SCALE_FACTOR = 10.0**EXPONENT
        HORIZ_COORD_MULT = UNITS_FACTOR * SCALE_FACTOR
C
C  update range and MD2 origin for map extents and file origin, 
C     staying in IFF MD2 units as they are no longer required
C     anywhere else
C
        RANGE(1) = RANGE(1) * UNITS_FACTOR 
        RANGE(2) = RANGE(2) * UNITS_FACTOR 
        RANGE(3) = RANGE(3) * UNITS_FACTOR 
        RANGE(4) = RANGE(4) * UNITS_FACTOR 
C
5000    MD2LOC(1) = MD2LOC(1) * UNITS_FACTOR 
        MD2LOC(2) = MD2LOC(2) * UNITS_FACTOR 
C
C  finish
C
        IF (DIAG) THEN
           CALL WRITEF
           CALL WRITEF (' IFF file header entries read')
           CALL WRITEF
           CALL WRITEF ('   Range of coordinates is (in IFF units):')
           CALL WRITEF ('  %F9.2 %F9.2    %F9.2 %F9.2',
     &                 RANGE(1), RANGE(2), RANGE(3), RANGE(4))
           CALL WRITEF ('  Origin: %^D%F9.2, %^D%F9.2',
     &                                   MD2LOC(2), MD2LOC(1))
        ENDIF
C   
        RETURN
	END
C
