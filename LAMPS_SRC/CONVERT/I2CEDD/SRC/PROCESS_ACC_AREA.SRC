C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-09-07 17:25:00.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        SUBROUTINE PROCESS_ACC_AREA(I)
C
***	MODULE	PROCESS_ACC_AREA
***	IDENT	07SE88
C
C 	Copyright Laser-Scan Laboratories Ltd.,England
C
C Created  J Barber  19-Aug-1988
C
C Reads the Accuracy outline feature AC entries 
C These must correspond to the format as written by CEDD2I
C
C Values are out to the DSI record after the main file data
C   and registration points
C
	IMPLICIT NONE
C
        INTEGER         I              ! acc region count
C 
***     PARAMETER/HERE:I2CEDDMSG/
***     COMMON/LSL$CMNIFF:IFFHAN/
***     COMMON/LSL$CMNFRT:FRTACD/
***     COMMON/LSL$CMNIFF:MD2DES/
***     COMMON/HERE:DESCR/
***     COMMON/HERE:PARAMS/
C
C  functions
C
        LOGICAL         ACDFND     
        INTEGER         CONVERT_TO_DMSH
C                                          !   dd/mm/yy
C  workspace
C
        INTEGER         J
        INTEGER         RETVAL
	INTEGER*2	IELEN	           ! length of
	INTEGER*2	IECODE             ! IFF entry
        INTEGER*2       IENDS              ! for EIHRS,
        INTEGER*2       NPTS               !   no. of points
C
        INTEGER*2       ACTYPE
	INTEGER		AC4TYPE
        INTEGER         ACVAL
C
        REAL*8          VALUE              ! input to 
C                                          !    CONVERT_TO_DMSH
        REAL            LONGVALUE          ! ST coordinates
        REAL            LATVALUE
C
        INTEGER         DEGREE
        INTEGER         MINUTE
        INTEGER         HUNSEC
        CHARACTER*1     HEMIS
C
        CHARACTER*20    NAME_STRING        ! acd NAME
C
        BYTE            ACC_BYTBUF(19)     ! for value fields
        BYTE            FIELD_BYTBUF(4)
C
C  **********************************************************
C
        HAD_AC = .FALSE.
C
        DO 5 J = 1,19
        ACC_BYTBUF(J) = ' '
5       CONTINUE
C
C  now build the DSI entries
C
        IF (I.EQ.1) THEN
           CALL EXPAND ('%WDSAG', FIELD_BYTBUF(1))
           CALL APPEND_TO_BLOCK (FIELD_BYTBUF, 4, 'DSI')
C
           CALL EXPAND ('%W%P %I2', FIELD_BYTBUF(1), ACCCNT)
           CALL APPEND_TO_BLOCK (FIELD_BYTBUF, 2, 'DSI')
        ENDIF
C
        IF (DIAG) CALL WRITEF ('.Reading Accuracy region %N', I)
C
C  get next IFF entry
C
10	CALL IFFNXT (IECODE, IELEN)

	IF (IELEN.EQ.-1) THEN
           CALL LSL_PUTMSG (I2CEDD__UNEXPENDIFF)
           CALL WRITEF ('  in accuracy region %N', I)
           GOTO 999
        ENDIF
C
        IF (IECODE.EQ.'AC') THEN
           HAD_AC = .TRUE.
           GOTO 20
        ELSEIF (IECODE.EQ.'ST') THEN
C
C      output the accuracy values
C
           HAD_ST = .TRUE.
           IF (.NOT.HAD_AC) THEN
              CALL LSL_PUTMSG (I2CEDD__ACNOTFOUND)
              CALL WRITEF ('  in accuracy region %N', I)
           ELSE
              CALL APPEND_TO_BLOCK (ACC_BYTBUF, 16, 'DSI')
           ENDIF
           GOTO 30
        ELSEIF (IECODE.EQ.'EF') THEN
           IF (.NOT.HAD_AC) THEN
              CALL LSL_PUTMSG (I2CEDD__ACNOTFOUND)
              CALL WRITEF ('  in accuracy region %N', I)
           ENDIF
           IF (.NOT.HAD_ST) THEN
              CALL LSL_PUTMSG (I2CEDD__STNOTFOUND)
              CALL WRITEF ('  in accuracy region %N', I)
           ENDIF
           GOTO 900
        ELSE
           GOTO 10
        ENDIF
C
C  AC  - Attribute code
C
20	CALL EIHRI (ACTYPE, 1, 1)	! read AC type
        CALL EIHRL (ACVAL, 1, 2)        ! read value field
C
	AC4TYPE = ACTYPE
        IF (.NOT.ACDFND (AC4TYPE, .TRUE.)) THEN
           NAME_STRING= ACD_NAME (:ACD_NAME_LEN)
        ELSE 
           CALL LSL_PUTMSG (I2CEDD__ACDFNDERR, ACTYPE)
           CALL WRITEF ('  in accuracy region %N', I)
           GOTO 10                                ! give up on AC
        ENDIF
C
C  AC successfully read
C    now the AC entries in turn
C
        IF (NAME_STRING.EQ.'ACC_abs_horiz_acc') THEN 
           CALL EXPAND ('%W%P %I4', ACC_BYTBUF(1), ACVAL)
C
        ELSEIF (NAME_STRING.EQ.'ACC_abs_vert_acc') THEN
           CALL EXPAND ('%W%P %I4', ACC_BYTBUF(5), ACVAL)
C
        ELSEIF (NAME_STRING.EQ.'ACC_rel_horiz_acc') THEN 
           CALL EXPAND ('%W%P %I4', ACC_BYTBUF(9), ACVAL)
C
        ELSEIF (NAME_STRING.EQ.'ACC_rel_vert_acc') THEN 
           CALL EXPAND ('%W%P %I4', ACC_BYTBUF(13), ACVAL)
C
        ELSE
           CALL LSL_PUTMSG (I2CEDD__ACWRONGFTR, ACTYPE)
           CALL WRITEF ('  in accuracy region %N', I)
        ENDIF
C
        GOTO 10                       ! get next entry
C
C  thats all the expected AC's done
C  now do the ST entry with outline coordinates
C
30      CALL EIHRS (NPTS, IENDS)
C
        CALL EXPAND('%W%P %^W%I2', FIELD_BYTBUF(1), NPTS)
        CALL APPEND_TO_BLOCK (FIELD_BYTBUF, 2, 'DSI')
C
C   read coordinates
C
50      DO 100 I = 1,NPTS
C
C  read each coordinate pair in turn
C
        CALL EIHRR (LONGVALUE, 1, 4*I-3)
        CALL EIHRR (LATVALUE, 1, 4*I-1)
C
        VALUE = LATVALUE
        RETVAL = CONVERT_TO_DMSH (VALUE, .FALSE., MD2UNT, 
     &                           DEGREE, MINUTE, HUNSEC, HEMIS)
        IF (.NOT.RETVAL) THEN
           CALL LSL_PUTMSG (I2CEDD__DMSCONVERR, VALUE)
           CALL WRITEF ('  in accuracy region %N', I)
        ENDIF
C
        CALL EXPAND ('%W%P0%I2', ACC_BYTBUF(1), DEGREE)
        CALL EXPAND ('%W%P0%I2', ACC_BYTBUF(3), MINUTE)
        CALL EXPAND ('%W%P0%I4', ACC_BYTBUF(5), HUNSEC)
        CALL EXPAND ('%W%S1', ACC_BYTBUF(9), HEMIS)
C
        VALUE = LONGVALUE
        RETVAL = CONVERT_TO_DMSH (VALUE, .TRUE., MD2UNT, 
     &                           DEGREE, MINUTE, HUNSEC, HEMIS)
        IF (.NOT.RETVAL) THEN
           CALL LSL_PUTMSG (I2CEDD__DMSCONVERR, VALUE)
           CALL WRITEF ('  in accuracy region %N', I)
        ENDIF
C
        CALL EXPAND ('%W%P0%I3', ACC_BYTBUF(10), DEGREE)
        CALL EXPAND ('%W%P0%I2', ACC_BYTBUF(13), MINUTE)
        CALL EXPAND ('%W%P0%I4', ACC_BYTBUF(15), HUNSEC)
        CALL EXPAND ('%W%S1', ACC_BYTBUF(19), HEMIS)
C
        CALL APPEND_TO_BLOCK (ACC_BYTBUF, 19, 'DSI')
C
100     CONTINUE
C
C   ST's completed
C
900     IF (DIAG) CALL WRITEF ('.Accuracy region %N completed', I)
C
C  exit
C
999     RETURN
	END
C
