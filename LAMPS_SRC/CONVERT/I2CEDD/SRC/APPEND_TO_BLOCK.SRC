	INTEGER FUNCTION APPEND_TO_BLOCK(BUFFER,LENGTH,BLOCK_LABEL)
C
***	MODULE APPEND_TO_BLOCK
***	IDENT 17AU88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			17 August 1988
C
C Routine to append the bytes passed in the BUFFER, with specified
C length to the end of the current file (tape) output block.
C If the current buffer to be output goes past the end of the
C block, that block is written out, and a new one begun, to which
C the remainder of the current buffer is added.
C The blocks are CEDD format, that is 1980 bytes with the first
C 8 bytes being formed as follows:
C
	IMPLICIT NONE
C
C common blocks
	INCLUDE	'HERE:DATA_BUFFER.CMN'
	INCLUDE 'HERE:I2CEDDMSG.PAR'
C
C arguments
	INTEGER		LENGTH		! length/no.chars to be appended
	BYTE		BUFFER(LENGTH)	! buffer containing characters
	CHARACTER*(*)	BLOCK_LABEL	! label for block header
					! i.e. DSI, FEA, SEG, TXT
C
C w/s
	INTEGER		I		! temporary count thingy
C
C functions
	INTEGER		WRITE_BLOCK	! write out the current block
	INTEGER		START_OUTPUT_BLOCK ! start new output block,
					! reset pointer and set up label
C
C Assume success
C
	APPEND_TO_BLOCK = I2CEDD__NORMAL
C
C Test if the next free byte is at position 0.
C This indicates that the current block has not been started (i.e.
C no label has been put at its beginning), which may happen if
C this is the first block the program has written, or if the 
C previous operation was a FINISH_BLOCK.
C
	IF (BLOCK_NEXT_FREE.EQ.0) THEN
C
C Start new block
C
	   APPEND_TO_BLOCK = START_OUTPUT_BLOCK(BLOCK_LABEL)
C
C Check for errors
C
	   IF (.NOT.APPEND_TO_BLOCK) GOTO 900
	ENDIF
C
C Loop to append contents of buffer to current block
C
	DO 10 I = 1,LENGTH
C
C Check if have overflowed current buffer
C
	   IF (BLOCK_NEXT_FREE.GT.BLOCK_LENGTH) THEN
C
C Have finished this block, so write it out
C
	      APPEND_TO_BLOCK = WRITE_BLOCK()
C
C Check for errors
C
	      IF (.NOT.APPEND_TO_BLOCK) GOTO 900
C
C Start new block, including header label
C
	      APPEND_TO_BLOCK = START_OUTPUT_BLOCK(BLOCK_LABEL)
C
C Check for errors
C
	      IF (.NOT.APPEND_TO_BLOCK) GOTO 900
	   ENDIF
C
C Append the next byte in the buffer to current block position
C
	   BLOCK_BUFFER(BLOCK_NEXT_FREE) = BUFFER(I)
C
C Increment the block buffer pointer to point to next free byte
C
	   BLOCK_NEXT_FREE = BLOCK_NEXT_FREE + 1
C
10	CONTINUE
C
C Exit
C
900	RETURN
	END
