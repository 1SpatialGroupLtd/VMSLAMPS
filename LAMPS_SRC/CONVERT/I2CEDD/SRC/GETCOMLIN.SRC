  	INTEGER FUNCTION GETCOMLIN
C
***	MODULE GETCOMLIN
***	IDENT  12SE88
C
C       Copyright Laser-scan laboratories Ltd, Cambridge, England.
C
C Author Jon Barber
C Created 11-May-88   for CEDD2I
C Modified 4-Aug-88   for I2CEDD
C
	IMPLICIT NONE
C
C Command definitions:
C
	EXTERNAL	I2CEDD_CLD
	INTEGER		I2CEDD_CLD
C
C Common blocks:
C
***     PARAMETER/HERE:I2CEDDMSG/
***     PARAMETER/LSL$CMNLSL:LSLLIBMSG/ 
***     COMMON/LSL$CMNLSL:FILENAME/
***     COMMON/LSL$CMNLSL:CLD/ 
***	COMMON/HERE:PARAMS/        
C
C Functions:
C
	INTEGER  	DCL_CML
	INTEGER  	DCL_STARTUP
	INTEGER  	DCL_QUAL
	INTEGER  	DCL_FILE
        INTEGER         PUTFLN
        INTEGER         EXPFLN
C
	LOGICAL		ABSENT
        LOGICAL         LOCAL           ! for DCL_QUAL
        LOGICAL         LOCNEG          ! for DCL_QUAL 
        LOGICAL         FRT
C
        INTEGER         CMDLEN          ! length of command line
C
        CHARACTER*1024  STRING          ! command line
C
C  *************************************************************
C  initialise flags
C
        FRT    = .FALSE.
	DIAG   = .FALSE.           
        TEXT   = .FALSE.
C  __________________________________________________________________
C  get command line for our command verb I2CEDD. DCL_STARTUP will
C  return set to SS$_NORMAL if all is well
C
	GETCOMLIN = DCL_STARTUP ('I2CEDD'      ! command verb
     &	                        ,.FALSE.       ! don't split param lists
     &                          , I2CEDD_CLD   ! CLD module name
     &                          ,.TRUE.)       ! local error reporting
	IF (.NOT. GETCOMLIN) GOTO 70
C
C  get input file-spec
C
	GETCOMLIN = DCL_FILE ('INPUT_IFF_FILE_SPEC', 'LSL$IF:IFF.IFF;0'
     &              			, ABSENT, .FALSE., .TRUE.)
	IF (.NOT.GETCOMLIN) GOTO 70
C
C  transfer the file-spec to our common variable
C
        FILLEN = FIL_LEN(1)
	FILNAM = FILARY(1) (:FIL_LEN(1))
C
C  get output file-spec
C
	GETCOMLIN = DCL_FILE ('OUTPUT_CEDD_FILE_SPEC', 'LSL$IF:CEDD.FILE'
     &              			, ABSENT, .FALSE., .TRUE.)
	IF (.NOT.GETCOMLIN) GOTO 70
C
C  transfer the file-spec to our common variable
C
        OUTLEN = FIL_LEN(1)
	OUTNAM = FILARY(1) (:FIL_LEN(1))
C
C  get FRT file-spec
C
        GETCOMLIN = DCL_QUAL ('FRT', FRT, LOCAL, LOCNEG, .TRUE.)
        IF (.NOT.GETCOMLIN) GOTO 70
C   
        IF (FRT) THEN
           GETCOMLIN = DCL_FILE ('FRT', 'LSL$FRT:CEDD.FRT;0'
     &                                , ABSENT, .FALSE., .TRUE.)
           IF (.NOT.GETCOMLIN) GOTO 70
C
C  transfer the file-spec to our common variable
C
           FRTNAM = FILARY(1) (1:FIL_LEN(1))
           FRTLEN = FIL_LEN(1)
	ENDIF
C
C  check for /DIAGNOSTICS
C
	GETCOMLIN = DCL_QUAL 
     &		('DIAGNOSTICS', DIAG, LOCAL, LOCNEG, .TRUE.)
	IF (.NOT.GETCOMLIN) GOTO 70
C
C  check for /Text
C
        GETCOMLIN = DCL_QUAL ('TEXT', TEXT, LOCAL, LOCNEG, .TRUE.)
        IF (.NOT.GETCOMLIN) GOTO 70
C
C  get input text filename if given
C   
        IF (TEXT) THEN
           GETCOMLIN = DCL_FILE ('TEXT', 'LSL$IF:IFF.TXT' 
     &                                , ABSENT, .FALSE., .TRUE.)
           IF (.NOT.GETCOMLIN) GOTO 70
C
C  transfer the file-spec to our common variable
C
           IF (.NOT.ABSENT) THEN
              TXTNAM = FILARY(1) (1:FIL_LEN(1))
              TXTLEN = FIL_LEN(1)
           ELSE
C
C  use same name as input IFF file with TXT extension
C
              GETCOMLIN = PUTFLN (FILNAM)
              IF (.NOT.GETCOMLIN) THEN
                 CALL LSL_PUTMSG (I2CEDD__PUTFLNERR, FILNAM(:FILLEN))
                 GOTO 70
              ENDIF
C
              HAD_EXT = .TRUE.
              STR_EXT = 'TXT'
              LEN_EXT = 3
C
              GETCOMLIN = EXPFLN (TXTNAM, TXTLEN)
              IF (.NOT.GETCOMLIN) THEN
                 CALL LSL_PUTMSG (I2CEDD__EXPFLNERR, TXTNAM(:TXTLEN))
                 GOTO 70
              ENDIF
C
           ENDIF
	ENDIF
C
70      IF (DIAG .OR. .NOT.GETCOMLIN) THEN
           GETCOMLIN = DCL_CML (STRING, CMDLEN, .TRUE.)
           CALL WRITEF
           CALL WRITEF ('.Command line was: %S', STRING(:CMDLEN))
           CALL WRITEF
        ENDIF
C
        IF (GETCOMLIN) THEN
           GETCOMLIN = LSL__NORMAL
        ENDIF
C
	RETURN
	END
C
