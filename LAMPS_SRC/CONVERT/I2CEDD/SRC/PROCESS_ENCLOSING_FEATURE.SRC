C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1997-02-21 18:45:50.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        SUBROUTINE PROCESS_ENCLOSING_FEATURE
C
***	MODULE	PROCESS_ENCLOSING_FEATURE
***	IDENT	21FE97
C
C 	Copyright Laser-Scan Laboratories Ltd.,England
C
C Created  J Barber  16-Aug-1988
C
C Reads the layer 0 enclosing feature AC entries, ignoring
C   any others
C These must correspond to the format as written by CEDD2I
C
C DSI entry values are stored in the feature's AC entries.
C
	IMPLICIT NONE
C
***     PARAMETER/HERE:I2CEDDMSG/
***     COMMON/LSL$CMNIFF:MD2DES/
***     COMMON/LSL$CMNIFF:IFFHAN/
***     COMMON/LSL$CMNFRT:FRTACD/
***     COMMON/HERE:DESCR/
***     COMMON/HERE:PARAMS/
C
C  functions
C
        LOGICAL         ACDFND     
        LOGICAL         CVTDATE            ! convert days to 
C                                          !   dd/mm/yy
C  workspace
C
	INTEGER*2	IELEN	           ! length of
	INTEGER*2	IECODE             ! IFF entry
        INTEGER*2       ACTYPE
	INTEGER		AC4TYPE		   ! Longword AC type for ACDFND
        INTEGER         DATA_TYPE          ! ACD data type I,R,C,D,T
C
        INTEGER         ACVAL
	REAL		ACREALVAL
	EQUIVALENCE	(ACVAL,ACREALVAL)
C
        INTEGER         DD
        INTEGER         MM
        INTEGER         YY
C
        INTEGER         DATE               ! int day input to CVTDATE
C
        CHARACTER*20    NAME_STRING        ! acd NAME
C
        BYTE            FIELD_BYTBUF(20)   ! for value field
        BYTE            TEXT_STRING(20)    ! for AC text strings
C
C  **********************************************************
C
        HAD_AC = .FALSE.
C
C  get next IFF entry
C
10	CALL IFFNXT (IECODE, IELEN)

	IF (IELEN.EQ.-1) THEN
           CALL LSL_PUTMSG (I2CEDD__UNEXPENDIFF)
           CALL WRITEF ('  in enclosing feature')
           GOTO 999
        ENDIF
C
        IF (IECODE.EQ.'AC') THEN
           HAD_AC = .TRUE.
           GOTO 20
        ELSEIF (IECODE.EQ.'EF') THEN    ! end of feature
           IF (.NOT.HAD_AC) THEN
              CALL LSL_PUTMSG (I2CEDD__ACNOTFOUND)
              CALL WRITEF ('  in enclosing feature')
           ENDIF
           GOTO 900
        ELSE
           GOTO 10
        ENDIF
C
C  AC  - Attribute code
C
20	CALL EIHRI (ACTYPE, 1, 1)	! read AC type
        CALL EIHRL (ACVAL, 1, 2)        ! read value field
C
	AC4TYPE = ACTYPE
        IF (.NOT.ACDFND (AC4TYPE, .TRUE.)) THEN
           NAME_STRING= ACD_NAME (:ACD_NAME_LEN)
           DATA_TYPE = ACD_DATA_TYPE
        ELSE 
           CALL LSL_PUTMSG (I2CEDD__ACDFNDERR, ACTYPE)
           CALL WRITEF ('  in enclosing feature')
           GOTO 10                                ! give up on AC
        ENDIF
C
        IF (DATA_TYPE.EQ.ACD_DATATYPE_D) THEN     ! dates
           DATE = ACVAL                           ! integer days
C
C  convert to days, months, year
C
           IF (.NOT.CVTDATE (DATE, DD, MM, YY)) THEN
              CALL LSL_PUTMSG (I2CEDD__YMDCONVERR, DATE, ACTYPE)
              CALL WRITEF ('  in enclosing feature')
              YY = -1
              GOTO 10                             ! give up on AC
           ENDIF
           YY = MOD(YY, 100)                      ! if date = 0, then
        ENDIF                                     !   YY < 0
C
C  AC successfully read
C    now the AC entries in turn
C
        IF (NAME_STRING.EQ.'Product_type') THEN       ! 5 chars
           CALL EIHR (TEXT_STRING(1), 3, 4)
           CALL EXPAND ('%W%A5', FIELD_BYTBUF(1), TEXT_STRING)
           CALL INSERT_IN_BLOCK ('DSI', FIELD_BYTBUF, 5, 13)
C
        ELSEIF (NAME_STRING.EQ.'Dataset_ID') THEN     ! 20 chars
           CALL EIHR (TEXT_STRING(1), 10, 4)
           CALL EXPAND ('%W%A20', FIELD_BYTBUF(1), TEXT_STRING)
           CALL INSERT_IN_BLOCK ('DSI', FIELD_BYTBUF, 20, 18)
C
        ELSEIF (NAME_STRING.EQ.'Edition_no') THEN 
           CALL EXPAND ('%W%P %I3', FIELD_BYTBUF(1), ACVAL)
           CALL INSERT_IN_BLOCK ('DSI', FIELD_BYTBUF, 3, 38)
C
        ELSEIF (NAME_STRING.EQ.'Compilation_date') THEN 
           CALL PROCESS_DATE_AC (DD, MM, YY, .FALSE., 41)
C
        ELSEIF (NAME_STRING.EQ.'Revision_date') THEN 
           CALL PROCESS_DATE_AC (DD, MM, YY, .FALSE., 45)
C
        ELSEIF (NAME_STRING.EQ.'IHO_Format_date') THEN 
           CALL PROCESS_DATE_AC (DD, MM, YY, .TRUE., 49)
C
        ELSEIF (NAME_STRING.EQ.'FACS_Format_date') THEN 
           CALL PROCESS_DATE_AC (DD, MM, YY, .TRUE., 55)
C
        ELSEIF (NAME_STRING.EQ.'Data_type') THEN 
           CALL EXPAND ('%W%A3', FIELD_BYTBUF(1), ACVAL)
           CALL INSERT_IN_BLOCK ('DSI', FIELD_BYTBUF, 3, 167)
C
        ELSEIF (NAME_STRING.EQ.'Horiz_units') THEN 
           CALL EXPAND ('%W%A3', X_AC_UNITS(1), ACVAL)
           CALL INSERT_IN_BLOCK ('DSI', X_AC_UNITS, 3, 170)
C
        ELSEIF (NAME_STRING.EQ.'Horiz_resn') THEN 
           HAD_X_AC_RESN = .TRUE.
           X_AC_RESN = ACREALVAL
           CALL EXPAND ('%W%F5.3', FIELD_BYTBUF(1), ACREALVAL)
           CALL INSERT_IN_BLOCK ('DSI', FIELD_BYTBUF, 5, 173)
C
        ELSEIF (NAME_STRING.EQ.'Geodetic_datum') THEN
           CALL EXPAND ('%W%A3', FIELD_BYTBUF(1), ACVAL)
           CALL INSERT_IN_BLOCK ('DSI', FIELD_BYTBUF, 3, 178)
C
        ELSEIF (NAME_STRING.EQ.'Ellipsoid') THEN
           CALL EXPAND ('%W%A3', FIELD_BYTBUF(1), ACVAL)
           CALL INSERT_IN_BLOCK ('DSI', FIELD_BYTBUF, 3, 181)
C
        ELSEIF (NAME_STRING.EQ.'Vert_units') THEN 
           IF (ACVAL.EQ.'FF ' .OR. ACVAL.EQ.' FF') 
     &                                    FATH_FEET = .TRUE.
           CALL EXPAND ('%W%A3', Z_AC_UNITS(1), ACVAL)
           CALL INSERT_IN_BLOCK ('DSI', Z_AC_UNITS, 3, 184)
C
        ELSEIF (NAME_STRING.EQ.'Vert_resn') THEN
           HAD_Z_AC_RESN = .TRUE.
           Z_AC_RESN = ACREALVAL
           CALL EXPAND ('%W%F5.3', FIELD_BYTBUF(1), ACREALVAL)
           CALL INSERT_IN_BLOCK ('DSI', FIELD_BYTBUF, 5, 187)
C
        ELSEIF (NAME_STRING.EQ.'Vert_ref_code') THEN
           CALL EXPAND ('%W%A4', FIELD_BYTBUF(1), ACVAL)
           CALL INSERT_IN_BLOCK ('DSI', FIELD_BYTBUF, 4, 192)
C
        ELSEIF (NAME_STRING.EQ.'Sounding_datum') THEN
           CALL EXPAND ('%W%A4', FIELD_BYTBUF(1), ACVAL)
           CALL INSERT_IN_BLOCK ('DSI', FIELD_BYTBUF, 4, 196)
C
        ELSEIF (NAME_STRING.EQ.'X_false_origin') THEN
           CALL EXPAND ('%W%P %I10', FIELD_BYTBUF(1), ACVAL)
           CALL INSERT_IN_BLOCK ('DSI', FIELD_BYTBUF, 10, 219)
C
        ELSEIF (NAME_STRING.EQ.'Y_false_origin') THEN
           CALL EXPAND ('%W%P %I10', FIELD_BYTBUF(1), ACVAL)
           CALL INSERT_IN_BLOCK ('DSI', FIELD_BYTBUF, 10, 229)
C
        ELSEIF (NAME_STRING.EQ.'Z_false_origin') THEN
           HAD_Z_ORIGIN = .TRUE.
           Z_ORIGIN = ACVAL
           CALL EXPAND ('%W%P %I10', FIELD_BYTBUF(1), ACVAL)
           CALL INSERT_IN_BLOCK ('DSI', FIELD_BYTBUF, 10, 239)
C
        ELSEIF (NAME_STRING.EQ.'Projection') THEN
           CALL EXPAND ('%W%A2', FIELD_BYTBUF(1), ACVAL)
           CALL INSERT_IN_BLOCK ('DSI', FIELD_BYTBUF, 2, 361)
C
        ELSEIF (NAME_STRING.EQ.'Projn_parameter_A') THEN
           CALL EIHR (TEXT_STRING(1), 5, 4)
           CALL EXPAND ('%W%A10', FIELD_BYTBUF(1), TEXT_STRING)
           CALL INSERT_IN_BLOCK ('DSI', FIELD_BYTBUF, 10, 363)
C
        ELSEIF (NAME_STRING.EQ.'Projn_parameter_B') THEN
           CALL EIHR (TEXT_STRING(1), 5, 4)
           CALL EXPAND ('%W%A10', FIELD_BYTBUF(1), TEXT_STRING)
           CALL INSERT_IN_BLOCK ('DSI', FIELD_BYTBUF, 10, 373)
C
        ELSEIF (NAME_STRING.EQ.'Projn_parameter_C') THEN
           CALL EIHR (TEXT_STRING(1), 5, 4)
           CALL EXPAND ('%W%A10', FIELD_BYTBUF(1), TEXT_STRING)
           CALL INSERT_IN_BLOCK ('DSI', FIELD_BYTBUF, 10, 383)
C
        ELSEIF (NAME_STRING.EQ.'Projn_parameter_D') THEN
           CALL EIHR (TEXT_STRING(1), 5, 4)
           CALL EXPAND ('%W%A10', FIELD_BYTBUF(1), TEXT_STRING)
           CALL INSERT_IN_BLOCK ('DSI', FIELD_BYTBUF, 10, 393)
C
        ELSEIF (NAME_STRING.EQ.'Compn_count') THEN
           CALL EXPAND ('%W%P %I2', FIELD_BYTBUF(1), ACVAL)
           CALL INSERT_IN_BLOCK ('DSI', FIELD_BYTBUF, 2, 456)
C
        ELSEIF (NAME_STRING.EQ.'Revn_count') THEN
           CALL EXPAND ('%W%I1', FIELD_BYTBUF(1), ACVAL)
           CALL INSERT_IN_BLOCK ('DSI', FIELD_BYTBUF, 1, 458)
C
        ELSEIF (NAME_STRING.EQ.'Product_spec') THEN     ! 15 chars
           CALL EIHR (TEXT_STRING(1), 8, 4)
           CALL EXPAND ('%W%A15', FIELD_BYTBUF(1), TEXT_STRING)
           CALL INSERT_IN_BLOCK ('DSI', FIELD_BYTBUF, 15, 459)
C
        ELSEIF (NAME_STRING.EQ.'Product_spec_date') THEN
           CALL PROCESS_DATE_AC (DD, MM, YY, .FALSE., 474)
C
        ELSEIF (NAME_STRING.EQ.'Spec_change_number') THEN
           CALL EXPAND ('%W%P %I3', FIELD_BYTBUF(1), ACVAL)
           CALL INSERT_IN_BLOCK ('DSI', FIELD_BYTBUF, 3, 478)
C
        ELSEIF (NAME_STRING.EQ.'Country') THEN
           CALL EXPAND ('%W%A2', FIELD_BYTBUF(1), ACVAL)
           CALL INSERT_IN_BLOCK ('DSI', FIELD_BYTBUF, 2, 481)
C
        ELSEIF (NAME_STRING.EQ.'Agency') THEN
           CALL EXPAND ('%W%A3', FIELD_BYTBUF(1), ACVAL)
           CALL INSERT_IN_BLOCK ('DSI', FIELD_BYTBUF, 3, 483)
C
        ELSEIF (NAME_STRING.EQ.'Branch') THEN
           CALL EXPAND ('%W%A3', FIELD_BYTBUF(1), ACVAL)
           CALL INSERT_IN_BLOCK ('DSI', FIELD_BYTBUF, 3, 486)
C
        ELSEIF (NAME_STRING.EQ.'Dig_system') THEN    ! 10 chars
           CALL EIHR (TEXT_STRING(1), 5, 4)
           CALL EXPAND ('%W%A10', FIELD_BYTBUF(1), TEXT_STRING)
           CALL INSERT_IN_BLOCK ('DSI', FIELD_BYTBUF, 10, 489)
C
        ELSEIF (NAME_STRING.EQ.'Proc_system') THEN
           CALL EIHR (TEXT_STRING(1), 5, 4)
           CALL EXPAND ('%W%A10', FIELD_BYTBUF(1), TEXT_STRING)
           CALL INSERT_IN_BLOCK ('DSI', FIELD_BYTBUF, 10, 499)
C
        ELSEIF (NAME_STRING.EQ.'Grid_code') THEN
           CALL EXPAND ('%W%A2', FIELD_BYTBUF(1), ACVAL)
           CALL INSERT_IN_BLOCK('DSI',FIELD_BYTBUF, 2, 509)
C
        ELSEIF (NAME_STRING.EQ.'Abs_horiz_acc') THEN
           CALL EXPAND ('%W%P %I4', FIELD_BYTBUF(1), ACVAL)
           CALL INSERT_IN_BLOCK('DSI',FIELD_BYTBUF, 4, 511)
C
        ELSEIF (NAME_STRING.EQ.'Abs_vert_acc') THEN
           CALL EXPAND ('%W%P %I4', FIELD_BYTBUF(1), ACVAL)
           CALL INSERT_IN_BLOCK('DSI',FIELD_BYTBUF, 4, 515)
C
        ELSEIF (NAME_STRING.EQ.'Rel_horiz_acc') THEN
           CALL EXPAND ('%W%P %I4', FIELD_BYTBUF(1), ACVAL)
           CALL INSERT_IN_BLOCK('DSI',FIELD_BYTBUF, 4, 519)
C
        ELSEIF (NAME_STRING.EQ.'Rel_vert_acc') THEN
           CALL EXPAND ('%W%P %I4', FIELD_BYTBUF(1), ACVAL)
           CALL INSERT_IN_BLOCK('DSI',FIELD_BYTBUF, 4, 523)
C
        ELSEIF (NAME_STRING.EQ.'Height_acc') THEN
           CALL EXPAND ('%W%P %I4', FIELD_BYTBUF(1), ACVAL)
           CALL INSERT_IN_BLOCK('DSI',FIELD_BYTBUF, 4, 527)
C
        ELSEIF (NAME_STRING.EQ.'Data_gen') THEN
           CALL EXPAND ('%W%I1', FIELD_BYTBUF(1), ACVAL)
           CALL INSERT_IN_BLOCK('DSI',FIELD_BYTBUF, 1, 531)
C
        ELSEIF (NAME_STRING.EQ.'N_mm_number') THEN
           CALL EXPAND ('%W%I1', FIELD_BYTBUF(1), ACVAL)
           CALL INSERT_IN_BLOCK('DSI',FIELD_BYTBUF, 1, 532)
C
        ELSEIF (NAME_STRING.EQ.'E_mm_number') THEN
           CALL EXPAND ('%W%I1', FIELD_BYTBUF(1), ACVAL)
           CALL INSERT_IN_BLOCK('DSI',FIELD_BYTBUF, 1, 533)
C
        ELSEIF (NAME_STRING.EQ.'S_mm_number') THEN
           CALL EXPAND ('%W%I1', FIELD_BYTBUF(1), ACVAL)
           CALL INSERT_IN_BLOCK('DSI',FIELD_BYTBUF, 1, 534)
C
        ELSEIF (NAME_STRING.EQ.'W_mm_number') THEN
           CALL EXPAND ('%W%I1', FIELD_BYTBUF(1), ACVAL)
           CALL INSERT_IN_BLOCK('DSI',FIELD_BYTBUF, 1, 535)
C
        ELSEIF (NAME_STRING.EQ.'N_mm_date') THEN
           CALL PROCESS_DATE_AC (DD, MM, YY, .FALSE., 536)
C
        ELSEIF (NAME_STRING.EQ.'E_mm_date') THEN
           CALL PROCESS_DATE_AC (DD, MM, YY, .FALSE., 540)
C
        ELSEIF (NAME_STRING.EQ.'S_mm_date') THEN
           CALL PROCESS_DATE_AC (DD, MM, YY, .FALSE., 544)
C
        ELSEIF (NAME_STRING.EQ.'W_mm_date') THEN
           CALL PROCESS_DATE_AC (DD, MM, YY, .FALSE., 548)
C
        ELSEIF (NAME_STRING.EQ.'Earliest_source_date') THEN
           CALL PROCESS_DATE_AC (DD, MM, YY, .FALSE., 552)
C
        ELSEIF (NAME_STRING.EQ.'Latest_source_date') THEN
           CALL PROCESS_DATE_AC (DD, MM, YY, .FALSE., 556)
C
        ELSEIF (NAME_STRING.EQ.'Data_colln_code') THEN
           CALL EXPAND ('%W%I1', FIELD_BYTBUF(1), ACVAL)
           CALL INSERT_IN_BLOCK('DSI',FIELD_BYTBUF, 1, 560)
C
        ELSEIF (NAME_STRING.EQ.'Data_colln_crit') THEN
           CALL EXPAND ('%W%P %I3', FIELD_BYTBUF(1), ACVAL)
           CALL INSERT_IN_BLOCK('DSI',FIELD_BYTBUF, 3, 561)
C
        ELSE
           CALL LSL_PUTMSG (I2CEDD__ACWRONGFTR, ACTYPE)
           CALL WRITEF ('  in enclosing feature')
        ENDIF
C
        GOTO 10                       ! get next entry
C
C  thats all the expected AC's done
C
900	IF (DIAG) CALL WRITEF (' Enclosing feature ACs read')
C
C  exit
C
999     RETURN
	END
C
