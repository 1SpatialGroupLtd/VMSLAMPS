C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-09-12 21:05:50.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION OUTPUT_TXT_RECORD()
C
***	MODULE OUTPUT_TXT_RECORD
***	IDENT 12SE88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			17 August 1988
C
C Routine to read the input text file and right its contents to
C the CEDD TXT records.
C
	IMPLICIT NONE
C
C common blocks
	INCLUDE 'HERE:PARAMS.CMN'
	INCLUDE 'HERE:I2CEDDMSG.PAR'
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'
C
C w/s
	INTEGER*2	BUFFER_LEN	! max length of text buffer 
	PARAMETER 	(BUFFER_LEN = 1968)
C
	INTEGER*2	NUM_CHARS	! number of characters read
        INTEGER         IN_NUM_CHARS    ! integer version
        INTEGER         TOT_CHARS
	INTEGER		IERR		! supplementary return code
        BYTE		CHAR_LEN(4)
	BYTE	TEXT_BUFFER(BUFFER_LEN)	! buffer for text record read
C
C functions
	INTEGER	APPEND_TO_BLOCK		! append current buffer to 
					! output block buffer
	INTEGER	FINISH_BLOCK		! pad and output current
					! block buffer contents
	INTEGER	FLRLIN			! read record from text file
C
C *****************************************************************
C Assume success
C
	OUTPUT_TXT_RECORD = I2CEDD__NORMAL
C
        IF (DIAG) THEN
           CALL WRITEF
           CALL WRITEF (' Processing text file %S', 
     &                                        TXTNAM(:TXTLEN))
        ENDIF
C
        TOT_CHARS = 0
C
C  insert the max char number temporarily so that the text gets
C    appended in the right place
C
        CALL EXPAND ('%W%P %^W%I4', CHAR_LEN(1), BUFFER_LEN)
        CALL APPEND_TO_BLOCK (CHAR_LEN , 4, 'TXT')
C
C Select input text file for reading
C
10	CALL FLRSEL(TXTLUN)
C
C Read the next text record from text file
C
	OUTPUT_TXT_RECORD = FLRLIN(
     &		TEXT_BUFFER,	! buffer to hold record read
     &		NUM_CHARS,	! number of characters read
     &		BUFFER_LEN,	! length of buffer
     &		IERR)		! supplementary error code
C
C Check for errors/warnings, except for end of file, and report them
C
        IF (OUTPUT_TXT_RECORD.EQ.LSL__EOF) GOTO 900
C
        IF (NUM_CHARS.LE.0) GOTO 10
C
	IF (.NOT.OUTPUT_TXT_RECORD) THEN
	   CALL LSL_PUTMSG (OUTPUT_TXT_RECORD)
C
C If this is a system read error, then report the additional message
C and exit
C
      	   IF (OUTPUT_TXT_RECORD.EQ.LSL__SYSREAD) THEN
	      CALL LSL_ADDMSG(IERR)
	   ENDIF
           GOTO 900
	ENDIF
C
C Append the text record just read to the output buffer, which
C contains part of a TXT record
C
        IN_NUM_CHARS = NUM_CHARS
C
        OUTPUT_TXT_RECORD = APPEND_TO_BLOCK(
     &		TEXT_BUFFER,	! buffer containing record
     &		IN_NUM_CHARS,	! length of record
     &		'TXT')		! label for a TXT record block
C
C Check for errors
C
        IF (.NOT.OUTPUT_TXT_RECORD) GOTO 900
C
        TOT_CHARS = TOT_CHARS + NUM_CHARS
C
C Loop to read the next record
C
        GOTO 10
C
C  insert the final total char number 
C
900     CALL EXPAND ('%W%P %I4', CHAR_LEN(1), TOT_CHARS)
        CALL INSERT_IN_BLOCK ('TXT', CHAR_LEN , 4, 9)
C
C Have reached end of text input file, so pad the final TXT block
C and output it
C
	OUTPUT_TXT_RECORD = FINISH_BLOCK()
C
C Exit
C
	RETURN
	END
C
