C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-09-07 17:55:46.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION CONVERT_TO_DMSH
     &		(ARG_VALUE,
     &		LONGITUDE, ARG_UNITS,
     &		DEGREES, MINUTES, HUNSECS, HEMIS)
C
***	MODULE CONVERT_TO_DMSH
***	IDENT 07SE88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			17 August 1988
C
C Routine to convert the value passed (in IFF units) as an argument 
C   to degrees, minutes, seconds/100 and hemisphere.
C
C The ARG_VALUE will be a real number, with units specified by the 
C ARG_UNITS argument.
C
C The LONGITUDE argument is .TRUE. if the value represents a longitude
C
C The ARG_UNITS will be specified by the numbers :
C
C	110		tenths of seconds of arc
C	  4		degrees of arc
C	  3		seconds of arc
C	 (5		radians - converted to seconds)
C
C The returned values are as follows :
C
C	DEGREES		integer degrees
C	MINUTES		integer minutes
C	HUNSECS		integer hundredths of seconds
C	HEMIS		N +ve latitude
C			S -ve latitude
C			E +ve longitude
C			W -ve longitude
C	
	IMPLICIT NONE
C
C common blocks
	INCLUDE 'HERE:I2CEDDMSG.PAR'
C
C arguments
	REAL*8		ARG_VALUE	! value for conversion
	INTEGER		ARG_UNITS	! specifies units of value
	LOGICAL		LONGITUDE	! .T. if value is longitude
	INTEGER		DEGREES		! returned degrees
	INTEGER		MINUTES		! returned minutes
	INTEGER		HUNSECS		! returned hundredths of secs
	CHARACTER*1	HEMIS		! returned hemisphere
C
C w/s
	INTEGER		UNITS		! local copy of units for
					! modification
	REAL*8		VALUE		! local copy of value for
					! modification
C functions
C
C Assume success
C
	CONVERT_TO_DMSH = I2CEDD__NORMAL
C
C Take a local copy of the units and value arguments to allow 
C modifications
C
	UNITS = ARG_UNITS
	VALUE = ARG_VALUE
C
C Work out the hemisphere
C +ve latitude  is 'N', -ve latitude  is 'S'
C +ve longitude is 'E', -ve longitude is 'W'
C
C Check if value is longitude
C
	IF (LONGITUDE) THEN
C
C Check if value is positive (E) or negative (W)
C Ensure value is positive
C
	   IF (VALUE.LT.0.0) THEN
	      HEMIS = 'W'
	      VALUE = - VALUE
	   ELSE
	      HEMIS = 'E'
	   ENDIF
C
C Otherwise, we are dealing with a latitude
C
	ELSE
C
C Check if value is positive (N) or negative (S)
C Ensure value is positive
C
	   IF (VALUE.LT.0.0) THEN
	      HEMIS = 'S'
	      VALUE = - VALUE
	   ELSE
	      HEMIS = 'N'
	   ENDIF
	ENDIF
C
C Test if value is in radians (shouldnt be) - convert to degrees 
C   if it is
C
	IF (UNITS.EQ.5) THEN
C
C Convert value to degrees
C When working in radians, 4 * arctan(1) is PI
C
	   VALUE = VALUE * 180.0 / (4*ATAN(1.0))
C
C Change units semaphore to indicate working in degrees
C
	   UNITS = 4
	ENDIF
C
C Test if value is in tenths of seconds - convert to seconds
C
	IF (UNITS.EQ.110) THEN
C
C Convert tenths of seconds to seconds
C
	   VALUE = VALUE / 10.0
C
C Change units semaphore to indicate value is now seconds
C
	   UNITS = 3
	ENDIF
C
C Test if value is in degrees
C
	IF (UNITS.EQ.4) THEN
C
C Extract degree part
C
	   DEGREES = INT(VALUE)
C
C Shift value to be minutes of arc (less degree part)
C
	   VALUE = (VALUE - DFLOAT(DEGREES)) * 60.0
C
C Extract minutes part
C
	   MINUTES = INT(VALUE)
C
C Shift value to get hundredths of seconds of arc (less minute part)
C
	   VALUE = (VALUE - DFLOAT(MINUTES)) * 60.0 * 100.0
C
C Extract the seconds part
C
	   HUNSECS = NINT(VALUE)
C
C Test if value is seconds
C
	ELSEIF (UNITS.EQ.3) THEN
C
C Take degrees part
C
	   DEGREES = INT(VALUE / (60.0 * 60.0))
C
C Take minutes part
C
	   MINUTES = MOD(INT(VALUE/60.0),60)
C
C Take hundredths of seconds part
C
	   HUNSECS = MOD(NINT(VALUE * 100.0), (60 * 100))
C
C Otherwise, the units are not a legal sort of unit
C
	ELSE
C
C Report the problem
C
	   CALL LSL_PUTMSG(I2CEDD__BADIFFUNITS)
C
C And set up the return code
C
	   CONVERT_TO_DMSH = I2CEDD__BADIFFUNITS
	ENDIF
C
C Exit
C
	RETURN
	END
