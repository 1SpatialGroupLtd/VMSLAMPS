C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-09-07 17:56:56.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION FIND_TOTAL_POINTS (FSNUM,TOTAL_POINTS)
C
***	MODULE FIND_TOTAL_POINTS
***	IDENT 07SE88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			17 August 1988
C
C Routine to find the total number of points in the current feature
C in the current input IFF file. 
C The assumed current IFF file position is with the NF entry as the
C entry in hand.
C
	IMPLICIT NONE
C
C common blocks
	INCLUDE 'HERE:I2CEDDMSG.PAR'
C
C arguments
	INTEGER*2	FSNUM		! feature serial number
	INTEGER		TOTAL_POINTS	! total of points found
C
C w/s
	INTEGER		NUM_POINTS	! number of points in current
					! ZS/ST
	INTEGER		NUM_DIMEN	! num of dimensions (ZS=3,ST=2)
	LOGICAL		FOUND_EF	! .T. when reach feature end
C
	INTEGER		MAX_POINTS	! dummy coordinate buffer
	PARAMETER	(MAX_POINTS=200)! which will never be used
	REAL		COORD(MAX_POINTS*3) ! since coordinates are not
					! read
C functions
	INTEGER		READ_COORD_ENTRY! to find/read next ZS/ST in
					! current feature
C Assume success
C
	FIND_TOTAL_POINTS = I2CEDD__NORMAL
C
C Initialise total number of points
C
	TOTAL_POINTS = 0
C
C Mark the current entry in hand, so we can return to it later
C
	CALL EIHMK(1)
C
C Read next ZS/ST entry in this feature
C
10	FIND_TOTAL_POINTS = READ_COORD_ENTRY(
     &		.FALSE.,	! indicates do not read coordinates
     &		COORD,		! dummy coordinate buffer
     &		MAX_POINTS,	! dummy coordinate buffer length
     &		NUM_POINTS,	! number of points found
     &		NUM_DIMEN,	! number of dimensions (ZS=3,ST=2)
     &		FOUND_EF)	! .T. when find end of feature
C
C Check if have found ZS/ST (i.e. not end of feature)
C
	IF (.NOT.FOUND_EF) THEN
C
C Increment point count
C
	   TOTAL_POINTS = TOTAL_POINTS + NUM_POINTS
C
C Loop to read next ST/ZS
C
	   GOTO 10
	ENDIF
C
C Reset IFF file to original position, as marked at start of routine
C
	CALL IFFRWM
C
C Remove marker from entry
C
	CALL EIHMK(0)
C
C Check whether any points were found in this feature
C
	IF (TOTAL_POINTS.EQ.0) THEN
C
C Set return code to indicate problem
C
	   FIND_TOTAL_POINTS = I2CEDD__NOCOORD
C
C Report the problem
C
	   CALL LSL_PUTMSG(FIND_TOTAL_POINTS,FSNUM)
	ENDIF
C
C Exit
C
	RETURN
	END
