C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-09-12 17:36:20.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        INTEGER FUNCTION OUTPUT_IFF_HEADER_DSI()
C
***	MODULE	OUTPUT_IFF_HEADER_DSI
***	IDENT	12SE88
C
C 	Copyright Laser-Scan Laboratories Ltd.,England
C
C Created  J Barber  16-Aug-1988
C
C Outputs the IFF header info to the DSI record
C
	IMPLICIT NONE
C
***     PARAMETER/HERE:I2CEDDMSG/
***     COMMON/LSL$CMNIFF:MD2DES/
***     COMMON/HERE:DESCR/
***     COMMON/HERE:PARAMS/
C
C  functions
C
        INTEGER         CONVERT_TO_DMSH    ! convert to deg,min,
C                                          !    sec/100, hemis
C  workspace
C
        INTEGER         RETVAL
C
        INTEGER         POWEROF10
        INTEGER         EXPONENT
        INTEGER         ZREF               ! integer ver of Z_SHIFT
        INTEGER         SCALE              ! for MD2SCL
C
        INTEGER         DEGREE
        INTEGER         MINUTE
        INTEGER         HUNSEC
        CHARACTER*1     HEMIS
C
        REAL*8          VALUE              ! input to CONVERT_TO_DMSH
C
        REAL            RESN               ! some MD2 dependent fields
        CHARACTER*3     MAPTYP
C
        BYTE            FIELD_BYTBUF(20)   ! for value field
C
C  **********************************************************
C  assume success
C
        OUTPUT_IFF_HEADER_DSI = I2CEDD__NORMAL
C
        RESN = 1.0
        MAPTYP = '   '
        VALUE = 0D0
C
        POWEROF10 = 0
        EXPONENT  = 0
        ZREF      = 0               ! integer ver of Z_SHIFT
        SCALE     = 1               ! for MD2SCL
C
C  now build the DSI entries        
C    start off the DSI block
C  insert some DSI header group labels
C
        CALL EXPAND ('%WDSIG', FIELD_BYTBUF(1))
        CALL INSERT_IN_BLOCK('DSI',FIELD_BYTBUF, 4, 9) 
C
        CALL EXPAND ('%WDSPG', FIELD_BYTBUF(1))
        CALL INSERT_IN_BLOCK('DSI',FIELD_BYTBUF, 4, 163)
C
        CALL EXPAND ('%WDSMP', FIELD_BYTBUF(1))
        CALL INSERT_IN_BLOCK('DSI',FIELD_BYTBUF, 4, 357)
C
        CALL EXPAND ('%WDSHG', FIELD_BYTBUF(1))
        CALL INSERT_IN_BLOCK('DSI',FIELD_BYTBUF, 4, 452)
C
C  now some MD2 stuff
C 
        IF(.NOT.HAD_MD2) GOTO 999
C
C    the map scale/reciprocal
C
        SCALE = NINT (MD2SCL)
        CALL EXPAND ('%W%P %I9', FIELD_BYTBUF(1), SCALE)
        CALL INSERT_IN_BLOCK('DSI',FIELD_BYTBUF, 9, 403)
C
C    the projection (MD2PRJ)
C
        IF (MD2PRJ.EQ.100) THEN
           CALL EXPAND ('%W  ', FIELD_BYTBUF(1))
C
C       non_geographic projections:
C
        ELSEIF (MD2PRJ.EQ.3) THEN
           CALL EXPAND ('%WAC', FIELD_BYTBUF(1))
        ELSEIF (MD2PRJ.EQ.4) THEN
           CALL EXPAND ('%WLE', FIELD_BYTBUF(1))
        ELSEIF (MD2PRJ.EQ.5) THEN
           CALL EXPAND ('%WMC', FIELD_BYTBUF(1))
        ELSEIF (MD2PRJ.EQ.6) THEN
           CALL EXPAND ('%WPG', FIELD_BYTBUF(1))
        ELSEIF (MD2PRJ.EQ.7) THEN
           CALL EXPAND ('%WPH', FIELD_BYTBUF(1))
        ELSEIF (MD2PRJ.EQ.9) THEN
           CALL EXPAND ('%WTC', FIELD_BYTBUF(1))
        ELSEIF (MD2PRJ.EQ.11) THEN
           CALL EXPAND ('%WLJ', FIELD_BYTBUF(1))
        ELSEIF (MD2PRJ.EQ.12) THEN
           CALL EXPAND ('%WAL', FIELD_BYTBUF(1))
        ELSEIF (MD2PRJ.EQ.13) THEN
           CALL EXPAND ('%WGN', FIELD_BYTBUF(1))
        ELSEIF (MD2PRJ.EQ.14) THEN
           CALL EXPAND ('%WOD', FIELD_BYTBUF(1))
        ELSEIF (MD2PRJ.EQ.20) THEN
           CALL EXPAND ('%WRB', FIELD_BYTBUF(1))
        ELSEIF (MD2PRJ.EQ.21) THEN
           CALL EXPAND ('%WOC', FIELD_BYTBUF(1))
        ELSE
           CALL EXPAND ('%W  ', FIELD_BYTBUF(1))
        ENDIF
C
        CALL INSERT_IN_BLOCK('DSI',FIELD_BYTBUF, 2, 361)
C
C  now the ellipsoid/spheroid (MD2SPH)
C
        IF (MD2SPH.EQ.0) THEN
           CALL EXPAND ('%WCLK', FIELD_BYTBUF(1))
        ELSEIF (MD2SPH.EQ.1) THEN
           CALL EXPAND ('%WCLJ', FIELD_BYTBUF(1))
        ELSEIF (MD2SPH.EQ.2) THEN
           CALL EXPAND ('%WBES', FIELD_BYTBUF(1))
        ELSEIF (MD2SPH.EQ.4) THEN
           CALL EXPAND ('%WINT', FIELD_BYTBUF(1))
        ELSEIF (MD2SPH.EQ.5) THEN
           CALL EXPAND ('%WWGC', FIELD_BYTBUF(1))
        ELSEIF (MD2SPH.EQ.6) THEN
           CALL EXPAND ('%WEVE', FIELD_BYTBUF(1))
        ELSEIF (MD2SPH.EQ.7) THEN
           CALL EXPAND ('%WWGB', FIELD_BYTBUF(1))
        ELSEIF (MD2SPH.EQ.8) THEN
           CALL EXPAND ('%WGRS', FIELD_BYTBUF(1))
        ELSEIF (MD2SPH.EQ.9) THEN
           CALL EXPAND ('%WAAY', FIELD_BYTBUF(1))
        ELSEIF (MD2SPH.EQ.10) THEN
           CALL EXPAND ('%WEVM', FIELD_BYTBUF(1))
        ELSEIF (MD2SPH.EQ.11) THEN
           CALL EXPAND ('%WAAM', FIELD_BYTBUF(1))
        ELSEIF (MD2SPH.EQ.12) THEN
           CALL EXPAND ('%WWAL', FIELD_BYTBUF(1))
        ELSEIF (MD2SPH.EQ.14) THEN
           CALL EXPAND ('%WAUN', FIELD_BYTBUF(1))
        ELSEIF (MD2SPH.EQ.15) THEN
           CALL EXPAND ('%WKRA', FIELD_BYTBUF(1))
        ELSEIF (MD2SPH.EQ.22) THEN
           CALL EXPAND ('%WWGE', FIELD_BYTBUF(1))
        ELSE
           CALL EXPAND ('%W   ', FIELD_BYTBUF(1))
        ENDIF
C
        CALL INSERT_IN_BLOCK('DSI',FIELD_BYTBUF, 3, 181)
C
C  now, most importantly, the units of the IFF file (MD2UNT)
C     (remember radians have been converted away)
C
        IF (MD2UNT.EQ.1) THEN                  ! feet
           CALL EXPAND ('%WFT ', FIELD_BYTBUF(1))
           RESN = 1.0/SCALE_FACTOR
           MAPTYP = 'MAP'
C
C      metres unless user-specified spheroid
C
        ELSEIF (MD2UNT.EQ.2) THEN              ! m
           IF (MD2SPH.NE.101) CALL EXPAND 
     &                            ('%WM  ', FIELD_BYTBUF(1))
           RESN = 1.0/SCALE_FACTOR
           MAPTYP = 'MAP'
        ELSEIF (MD2UNT.EQ.3) THEN              ! arcsecs
           IF (MD2PRJ.NE.100) THEN
              CALL LSL_PUTMSG (I2CEDD__INVALPROJN, MD2PRJ)
              CALL EXPAND ('%W  ', FIELD_BYTBUF(1))
              CALL INSERT_IN_BLOCK('DSI',FIELD_BYTBUF, 2, 361)
              MD2PRJ = 100
           ENDIF
           CALL EXPAND ('%W% SEC', FIELD_BYTBUF(1))
           RESN = 1.0/SCALE_FACTOR
           MAPTYP = 'GEO'
        ELSEIF (MD2UNT.EQ.4) THEN              ! degrees
           IF (MD2PRJ.NE.100) THEN
              CALL LSL_PUTMSG (I2CEDD__INVALPROJN, MD2PRJ)
              CALL EXPAND ('%W  ', FIELD_BYTBUF(1))
              CALL INSERT_IN_BLOCK('DSI',FIELD_BYTBUF, 2, 361)
              MD2PRJ = 100
           ENDIF
           CALL EXPAND ('%WDEG', FIELD_BYTBUF(1))
           RESN = 1.0/SCALE_FACTOR
           MAPTYP = 'GEO'
        ELSEIF (MD2UNT.EQ.101 .OR. MD2UNT.EQ.102) THEN   ! mm
           CALL EXPAND ('%WMM ', FIELD_BYTBUF(1))
           RESN = 1.0/SCALE_FACTOR
           MAPTYP = 'DIG'
        ELSEIF (MD2UNT.EQ.103 .OR. MD2UNT.EQ.104) THEN   ! in./
           CALL EXPAND ('%WIN ', FIELD_BYTBUF(1))        ! 1000
           RESN = 0.0001/SCALE_FACTOR
           MAPTYP = 'DIG'
        ELSEIF (MD2UNT.EQ.110) THEN                ! arcsecs/10
           IF (MD2PRJ.NE.100) THEN
              CALL LSL_PUTMSG (I2CEDD__INVALPROJN, MD2PRJ)
              CALL EXPAND ('%W  ', FIELD_BYTBUF(1))
              CALL INSERT_IN_BLOCK('DSI',FIELD_BYTBUF, 2, 361)
              MD2PRJ = 100
           ENDIF
           CALL EXPAND ('%W% SEC', FIELD_BYTBUF(1))
           RESN = 0.1/SCALE_FACTOR
           MAPTYP = 'GEO'
C
        ELSE                          ! unset or untranslatable
C
           IF (HAD_X_AC_RESN) THEN    ! leave it as set up from AC
C                                     !   with extra scaling
              RESN = X_AC_RESN/SCALE_FACTOR
C
              CALL WRITEF
              CALL WRITEF (' Horizontal units of CEDD file are: %A3',
     &                                   X_AC_UNITS)
              GOTO 900                ! do just the RESN
C
           ELSE
              CALL EXPAND ('%W   ', FIELD_BYTBUF(1))
              RESN = 1.0/SCALE_FACTOR
              MAPTYP = '   '
           ENDIF
        ENDIF
C
        CALL WRITEF
        CALL WRITEF (' Horizontal units of CEDD file are: %A3',
     &                                   FIELD_BYTBUF)
C
        CALL INSERT_IN_BLOCK('DSI',FIELD_BYTBUF, 3, 170)
C
        CALL EXPAND ('%W%S3', FIELD_BYTBUF(1), MAPTYP)
        CALL INSERT_IN_BLOCK('DSI',FIELD_BYTBUF, 3, 167)
C
900     IF (RESN.GE.1000.0) THEN    ! change SCALE_FACTOR
C
C   horiz multiplier = a*scale_factor, a = factor to change 
C                                          units, if any
C   resn             = b/scale_factor, b = original unit
C                                          specifier
C
           HORIZ_COORD_MULT = HORIZ_COORD_MULT * RESN/1000.0
           RESN = 1000.0             ! (= 1000/resn)*resn
C
           CALL EXPAND ('%W1000.', FIELD_BYTBUF(1))
           CALL INSERT_IN_BLOCK('DSI',FIELD_BYTBUF, 5, 173)
C
        ELSEIF (RESN.LE.0.001) THEN
           HORIZ_COORD_MULT = HORIZ_COORD_MULT * RESN/0.001
           RESN = 0.001
           CALL EXPAND ('%W0.001', FIELD_BYTBUF(1))
           CALL INSERT_IN_BLOCK('DSI',FIELD_BYTBUF, 5, 173)
        ELSE
           CALL EXPAND ('%W%F5.3', FIELD_BYTBUF(1), RESN)
           CALL INSERT_IN_BLOCK('DSI',FIELD_BYTBUF, 5, 173)
        ENDIF
C
        CALL WRITEF ('  With resolution:  %F7.3 ', RESN)
        CALL WRITEF
        CALL WRITEF ('  (IFF coordinates are being scaled by: %F7.3)',
     &                                             HORIZ_COORD_MULT)
C
C  if this a Geographic Coordinate map (MD2PRJ = 100), the
C    local origin (MD2LOC) and map extents must be converted 
C    to deg, min, secs/100, hemis
C
1000    IF (MD2PRJ.EQ.100) THEN
C
C  override what the AC might or might not have said
C    map type:
C
           CALL EXPAND ('%WGEO', FIELD_BYTBUF(1))
           CALL INSERT_IN_BLOCK('DSI',FIELD_BYTBUF, 3, 167)
C
C    projection = none:
C
           CALL EXPAND ('%W  ', FIELD_BYTBUF(1))
           CALL INSERT_IN_BLOCK('DSI',FIELD_BYTBUF, 2, 361)
C
C    grid code = none:
C
           CALL EXPAND ('%W  ', FIELD_BYTBUF(1))
           CALL INSERT_IN_BLOCK('DSI',FIELD_BYTBUF, 2, 509)
C
C  if MD2UNT = 110 units are arcsec/10
C  if MD2UNT =   4 units are degrees
C  if MD2UNT =   3 units are arcsecs
C  (if MD2UNT =   5 units are radians - now converted to seconds)
C
           CALL WRITEF
           CALL WRITEF (' File Origin is:')
C
           RETVAL = CONVERT_TO_DMSH (MD2LOC(2), .FALSE., 
     &                  MD2UNT, DEGREE, MINUTE, HUNSEC, HEMIS)
           IF (.NOT.RETVAL) THEN
              CALL LSL_PUTMSG (I2CEDD__DMSCONVERR, VALUE)
           ENDIF
C
           CALL PROCESS_DMSH (DEGREE, MINUTE, HUNSEC, HEMIS,
     &                                            .FALSE., 200)
C
           CALL WRITEF ('  Latitude   %P0%I2  %I2  %I2.%I2 %S1',
     &     DEGREE, MINUTE, HUNSEC/100, HUNSEC-100*(HUNSEC/100), HEMIS)
C
C  origin longitude

           RETVAL = CONVERT_TO_DMSH (MD2LOC(1), .TRUE., 
     &                   MD2UNT, DEGREE, MINUTE, HUNSEC, HEMIS)
           IF (.NOT.RETVAL) THEN
              CALL LSL_PUTMSG (I2CEDD__DMSCONVERR, VALUE)
           ENDIF
C
           CALL PROCESS_DMSH (DEGREE, MINUTE, HUNSEC, HEMIS,
     &                                            .TRUE., 209)
C
           CALL WRITEF ('  Longitude %P0%I3  %I2  %I2.%I2 %S1',
     &     DEGREE, MINUTE, HUNSEC/100, HUNSEC-100*(HUNSEC/100), HEMIS)
C
C  now the map extents from the RANGE
C
           IF (.NOT.HAD_RA) GOTO 999
C
C  SW lat = range(3)
C
           VALUE = RANGE(3) + MD2LOC(2)
C
           RETVAL = CONVERT_TO_DMSH (VALUE, .FALSE., 
     &                    MD2UNT, DEGREE, MINUTE, HUNSEC, HEMIS)
           IF (.NOT.RETVAL) THEN
              CALL LSL_PUTMSG (I2CEDD__DMSCONVERR, VALUE)
           ENDIF
C
           CALL PROCESS_DMSH (DEGREE, MINUTE, HUNSEC, HEMIS,
     &                                            .FALSE., 249)
C
C  SW long = range(1)
C
           VALUE = RANGE(1) + MD2LOC(1)
C
           RETVAL = CONVERT_TO_DMSH (VALUE, .TRUE., 
     &                    MD2UNT, DEGREE, MINUTE, HUNSEC, HEMIS)
           IF (.NOT.RETVAL) THEN
              CALL LSL_PUTMSG (I2CEDD__DMSCONVERR, VALUE)
           ENDIF
C
           CALL PROCESS_DMSH (DEGREE, MINUTE, HUNSEC, HEMIS,
     &                                              .TRUE., 258)
C
C  NE lat = range(4)
C
           VALUE = RANGE(4) + MD2LOC(2)
C
           RETVAL = CONVERT_TO_DMSH (VALUE, .FALSE., 
     &                   MD2UNT, DEGREE, MINUTE, HUNSEC, HEMIS)
           IF (.NOT.RETVAL) THEN
              CALL LSL_PUTMSG (I2CEDD__DMSCONVERR, VALUE)
           ENDIF
C
           CALL PROCESS_DMSH (DEGREE, MINUTE, HUNSEC, HEMIS,
     &                                             .FALSE., 268)
C
C  NE long = range(2)
C
           VALUE = RANGE(2) + MD2LOC(1)
C
           RETVAL = CONVERT_TO_DMSH (VALUE, .TRUE., 
     &                   MD2UNT, DEGREE, MINUTE, HUNSEC, HEMIS)
           IF (.NOT.RETVAL) THEN
              CALL LSL_PUTMSG (I2CEDD__DMSCONVERR, VALUE)
           ENDIF
C
           CALL PROCESS_DMSH (DEGREE, MINUTE, HUNSEC, HEMIS,
     &                                              .TRUE., 277)
C
        ENDIF
C
C  scan the ZS entries, if any, to find the minimum z value to use 
C    as the vertical reference
C
999     CALL FIND_Z_RANGE
C
        IF (FILE_IS_3D) THEN
C
C   use units and res'n set up by AC if present, otherwise:
C
           CALL WRITEF
           CALL WRITEF (' Vertical units of CEDD file are: %A3',
     &                                   Z_AC_UNITS)
C
           IF (FATH_FEET) THEN
              VERT_COORD_MULT = 1.0
              GOTO 2000            ! leave them alone
           ENDIF
C
           IF (.NOT.HAD_Z_AC_RESN) THEN
              Z_AC_RESN = 1.0
C
C   use dummy units (metres) to signify a 3-dim map
C
              CALL EXPAND('%WM  ', FIELD_BYTBUF(1))
              CALL INSERT_IN_BLOCK('DSI',FIELD_BYTBUF, 3, 184)
           ENDIF
C
           IF (Z_MIN.LT.0.0) Z_SHIFT = Z_MIN
C
C Check if Z range is non-zero
C
	   IF ((Z_MAX-Z_MIN).GT.0.0) THEN
	      POWEROF10 = INT (LOG10 (ABS (Z_MAX-Z_MIN)))
              EXPONENT = 5 - POWEROF10
	   ELSE
	      EXPONENT = 0
	   ENDIF
C
           Z_SCALE_FACTOR = 10.0**EXPONENT
           VERT_COORD_MULT = Z_SCALE_FACTOR
C
C  output vert origin offset, corrected by any shift to make numbers
C     positive, into Z false origin field
C
           ZREF = Z_ORIGIN + Z_SHIFT
           CALL EXPAND ('%W%P %I10', FIELD_BYTBUF(1), ZREF)
           CALL INSERT_IN_BLOCK('DSI',FIELD_BYTBUF, 10, 239)
C
C  output vert resolution
C
           RESN = Z_AC_RESN/Z_SCALE_FACTOR
C
           IF (RESN.GE.1000.0) THEN    ! change SCALE_FACTOR
C
C   horiz multiplier = a*scale_factor, a = factor to change 
C                                          units, if any
C   resn             = b/scale_factor, b = original unit
C                                          specifier
C
              VERT_COORD_MULT = VERT_COORD_MULT * RESN/1000.0
              RESN = 1000.0             ! (= 1000/resn)*resn
C   
              CALL EXPAND ('%W1000.', FIELD_BYTBUF(1))
              CALL INSERT_IN_BLOCK('DSI',FIELD_BYTBUF, 5, 187)
C
           ELSEIF (RESN.LE.0.001) THEN
              VERT_COORD_MULT = VERT_COORD_MULT * RESN/0.001
              RESN = 0.001
              CALL EXPAND ('%W0.001', FIELD_BYTBUF(1))
              CALL INSERT_IN_BLOCK('DSI',FIELD_BYTBUF, 5, 187)
           ELSE
              CALL EXPAND ('%W%F5.3', FIELD_BYTBUF(1), RESN)
              CALL INSERT_IN_BLOCK('DSI',FIELD_BYTBUF, 5, 187)
           ENDIF
C
           CALL WRITEF ('  With resolution:  %F7.3 ', RESN)
           CALL WRITEF
           CALL WRITEF 
     & ('  (IFF coordinates are being scaled by: %F7.3)',
     & VERT_COORD_MULT)
C
        ENDIF
C
C  sequential data from IFF
C
2000    CALL EXPAND ('%W% S', FIELD_BYTBUF(1))
        CALL INSERT_IN_BLOCK('DSI',FIELD_BYTBUF, 1, 564)
C
        IF (DIAG) THEN
           CALL WRITEF
           CALL WRITEF (' IFF header information output')
        ENDIF
C
C  exit
C
        RETURN
	END
C
