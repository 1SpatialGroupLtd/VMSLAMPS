C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-09-09 12:22:08.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION WRITE_BLOCK()
C
***	MODULE WRITE_BLOCK
***	IDENT 09SE88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			17 August 1988
C
C Routine to write out data block for I2CEDD program.
C Since we are treating a tape file as if it were an ordinary
C VMS file, the operation will be done using ordinary file write
C routines.
C The block byte buffer to be written is in /DATA_BUFFER/ common block
C
	IMPLICIT NONE
C
C common blocks
	INCLUDE 'HERE:PARAMS.CMN'
	INCLUDE 'HERE:DESCR.CMN'
	INCLUDE 'HERE:DATA_BUFFER.CMN'
	INCLUDE 'HERE:I2CEDDMSG.PAR'
C
C w/s
	INTEGER	IERR	! status return code
C
C functions
	INTEGER	FLWLIN	! to write out contents of byte buffer
C
C  *********************************************************
C Assume success
C
	WRITE_BLOCK = I2CEDD__NORMAL
C
C Select the output CEDD file/device
C
	CALL FLWSEL(OUTLUN)
C
C Write out the block
C
	WRITE_BLOCK = FLWLIN(BLOCK_BUFFER,BLOCK_LENGTH,IERR)
C
C Check for any errors
C
	IF (.NOT.WRITE_BLOCK) THEN
C
C Report primary error
C
	   CALL LSL_PUTMSG(WRITE_BLOCK)
C
C Report supplementary error
C
	   CALL LSL_ADDMSG(IERR)
	ENDIF
C
C Output diagnostics about block, if required
C
	IF (DIAG) THEN
           CALL WRITEF('.Outputting block with label %A8',
     &                                           BLOCK_BUFFER)
           CALL WRITEF
        ENDIF
C
C Exit
C
	RETURN
	END
