	INTEGER FUNCTION WRITE_COORD_TO_SEG(
     &		COORD_BUFFER,MAX_POINTS,NUM_POINTS,NUM_DIMEN)
C
***	MODULE WRITE_COORD_TO_SEG
***	IDENT 17AU88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			17 August 1988
C
C Routine to append the current contents of the coordinate buffer
C to the output block buffer as coordinates in a SEG subrecord
C
C
	IMPLICIT NONE
C
C common blocks
	INCLUDE 'HERE:DESCR.CMN'
	INCLUDE 'HERE:I2CEDDMSG.PAR'
C
C arguments
	INTEGER	MAX_POINTS		! maximum length of coord buffer
	REAL	COORD_BUFFER(MAX_POINTS*3)! buffer holding points
	INTEGER	NUM_POINTS		! number of points in buffer
	INTEGER	NUM_DIMEN		! number of dimensions of 
					! feature to be output (2/3)
C
C w/s
	INTEGER	CURRENT_POINT(3)	! integer value of coordinates
					! to be output
	REAL	COORD_MULT(3)		! multiply all points by this
					! to ensure that they are
					! correctly scaled integers
					! for output
	REAL	COORD_SHIFT(3)		! subtract from all points 
					! to ensure that they are 
					! positive
	BYTE	BUFFER(6)		! buffer to hold as chars the
					! coordinate to be appended to
					! output block
	INTEGER	POINT			! point loop index
	INTEGER	DIMEN			! dimension loop index
	INTEGER	OUTPUT_DIMEN		! number of dimensions of output
					! CEDD file
C
C functions
	INTEGER	APPEND_TO_BLOCK		! append buffer content to blck
C
C Assume success
C
	WRITE_COORD_TO_SEG = I2CEDD__NORMAL
C
C Set up array of multipliers to convert coordinates into correctly
C scaled integers for output
C
	COORD_MULT(1) = HORIZ_COORD_MULT	! x coordinate
	COORD_MULT(2) = HORIZ_COORD_MULT	! y coordinate
	COORD_MULT(3) = VERT_COORD_MULT		! z coordinate
C
C Set up array of shifts (offsets) for adding to coordinates to
C ensure that they are all positive
C
	COORD_SHIFT(1) = X_SHIFT
	COORD_SHIFT(2) = Y_SHIFT
	COORD_SHIFT(3) = Z_SHIFT
C
C Check if output CEDD file is 3 dimensional (which happens
C if there are any ZS entries at all in the input IFF file).
C If it is, then all coordinate strings must be output as 3D,
C even if they are 2D (STs) in the input IFF file.
C
	IF (FILE_IS_3D) THEN
	   OUTPUT_DIMEN = 3
	ELSE
	   OUTPUT_DIMEN = NUM_DIMEN
	ENDIF
C
C Loop for every point in coordinate buffer
C
	DO 20 POINT = 1, NUM_POINTS
C
C Loop for every dimension in coordinate string
C
	   DO 10 DIMEN = 1, OUTPUT_DIMEN
C
C Check if the current dimension is greater than the number of
C dimensions in the input coordinate string.
C ie Is it 3rd dimension where input string is 2D?
C If it is, then the input is an ST, but the output is a 3D CEDD
C file. In this case, a dummy Z coordinate (0) must be output.
C
	      IF (DIMEN.GT.NUM_DIMEN) THEN
	         CURRENT_POINT(DIMEN) = 0
C
C Otherwise, use the coordinate found in the input.
C Convert current point coordinates to format suitable for output
C By subtracting the shift required to ensure coordinates in each
C dimension are positive, and by multiplying by the factor needed
C to scale each dimension correctly for output as an integer
C
	      ELSE
	         CURRENT_POINT(DIMEN) = 
     &			NINT(
     &			((COORD_BUFFER((POINT-1)*NUM_DIMEN+DIMEN)) - 
     &		 	COORD_SHIFT(DIMEN) ) *
     &			COORD_MULT(DIMEN))
	      ENDIF
C
C Expand the current coordinate to text buffer
C
	      CALL EXPAND('%W%I6',BUFFER,CURRENT_POINT(DIMEN))
C
C Append out the current coordinate to the output block
C
	      WRITE_COORD_TO_SEG = APPEND_TO_BLOCK(BUFFER,6,'SEG')
C
C Check for errors
C
	      IF (.NOT.WRITE_COORD_TO_SEG) GOTO 900
C
10	   CONTINUE
20	CONTINUE
C
C Exit
C
900	RETURN
	END
