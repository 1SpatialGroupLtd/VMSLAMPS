C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-09-08 16:45:10.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        INTEGER FUNCTION START_LAYER0_DSI()
C
***	MODULE	START_LAYER0_DSI
***	IDENT	08SE88
C
C 	Copyright Laser-Scan Laboratories Ltd.,England
C
C Created  J Barber  16-Aug-1988
C
C Reads the Feature entries in layer 0 of a IFF file.
C These must correspond to the format as written by CEDD2I
C   with an enclosing area first feature describing the whole map, 
C   with the DSI entry values stored in the feature's AC entries.
C There may also be Registration points and Accuracy outlines with 
C   their own AC entries
C
	IMPLICIT NONE
C
***     PARAMETER/HERE:I2CEDDMSG/
***     COMMON/LSL$CMNIFF:MD2DES/
***     COMMON/LSL$CMNIFF:IFFHAN/
***     COMMON/HERE:DESCR/
***     COMMON/HERE:PARAMS/
C
C  workspace
C
	INTEGER*2	IELEN	! length of
	INTEGER*2	IECODE  ! IFF entry
        INTEGER*2       IFC     ! feature code
C
C  **********************************************************
C  assume success
C
        START_LAYER0_DSI = I2CEDD__NORMAL
C
        HAD_FS = .FALSE.
	HAD_AC = .FALSE.	! not yet had AC for feature
	HAD_ZS = .FALSE.	! reset had 3d string flag
        HAD_ST = .FALSE.
C
        REGCNT = 0
        ACCCNT = 0
C
C  we should have just started layer 0 at NO entry
C
C  first run through layer 0 to find and store positions of the 
C    reg points, acc areas, and the enclosing feature
C
        IF (DIAG) THEN
           CALL WRITEF
           CALL WRITEF (' Scanning layer 0 features')
        ENDIF
C
C  get first entry
C
10	CALL IFFNXT (IECODE, IELEN)
C
	IF (IELEN.EQ.-1) THEN
           START_LAYER0_DSI = I2CEDD__UNEXPENDIFF
           CALL LSL_PUTMSG (I2CEDD__UNEXPENDIFF)
           CALL WRITEF ('  in IFF first feature')
           GOTO 999
        ENDIF
C
        IF (IECODE.EQ.'NF') THEN
           GOTO 20
        ELSEIF (IECODE.EQ.'FS') THEN
           GOTO 40
C
C  found the next layer?
C
        ELSEIF (IECODE.EQ.'NO') THEN
           LPOSNO(1) = LPOSH
           START_LAYER0_DSI = I2CEDD__UNEXPENTRY
           CALL LSL_PUTMSG (I2CEDD__UNEXPENTRY, IECODE)
           CALL WRITEF ('  in IFF first feature')
           GOTO 999
        ELSE
           CALL LSL_PUTMSG (I2CEDD__UNEXPENTRY, IECODE)
           CALL WRITEF ('  in IFF first feature')
           GOTO 10
        ENDIF
C
C NF - New Feature
C
20	CALL EIHRI (FSN, 1, 1)	   ! read feature serial number
	CALL EIHRI (ISN, 1, 2)	   ! read internal seq. no.
C
C  get next entry
C
30	CALL IFFNXT (IECODE, IELEN)
C
        IF (IECODE.EQ.'FS') THEN
           GOTO 40
        ELSEIF (IECODE.EQ.'EF') THEN
           CALL LSL_PUTMSG (I2CEDD__UNEXPENDFTR, FSN, ISN)
           CALL WRITEF ('  in layer %^W%N', LAYER)
           GOTO 10                     ! find next feature
C
C  found the next layer?
C
        ELSEIF (IECODE.EQ.'NO') THEN
           LPOSNO(1) = LPOSH
           START_LAYER0_DSI = I2CEDD__UNEXPENTRY
           CALL LSL_PUTMSG (I2CEDD__UNEXPENTRY, IECODE)
           CALL WRITEF ('  in feature with FSN %^W%N (ISN %^W%N)', 
     &                                                   FSN, ISN)
           GOTO 999
        ELSE
           CALL LSL_PUTMSG (I2CEDD__UNEXPENTRY, IECODE)
           CALL WRITEF ('  in feature with FSN %^W%N (ISN %^W%N)', 
     &                                                   FSN, ISN)
           GOTO 30
        ENDIF
C
C FS - Feature Code
C
40	CALL EIHRI(IFC,1,1)		      ! read feature code
C
        IF (IFC.EQ.AREA0) THEN
           LPOSFS_ENC = LPOSH
        ELSEIF (IFC.EQ.REGPNT) THEN
           REGCNT = REGCNT + 1
           LPOSFS_REG (REGCNT) = LPOSH
        ELSEIF (IFC.EQ.ACAREA) THEN
           ACCCNT = ACCCNT + 1
           LPOSFS_ACC (ACCCNT) = LPOSH
        ELSE
           CALL LSL_PUTMSG (I2CEDD__UNEXPFC, IFC)
           CALL WRITEF ('  in feature with FSN %^W%N (ISN %^W%N)', 
     &                                                   FSN, ISN)
        ENDIF
C
C  NF and FS found - what to do next?
C
50  	CALL IFFNXT (IECODE, IELEN)
C
        IF (IECODE.EQ.'EO') THEN           ! end of layer 
           LPOSEO(0) = LPOSH
           GOTO 50
        ELSEIF (IECODE.EQ.'NO') THEN       ! new layer
           LPOSNO(1) = LPOSH
           GOTO 60                         !   read features
        ELSEIF (IECODE.EQ.'NF') THEN       ! another feature
           GOTO 20
        ELSE
           GOTO 50                         ! get next entry
        ENDIF
C
C  we now know where all the layer 0 features are
C    process them in order
C
C  first the enclosing feature
C
60      CALL IFFPKE (IECODE, IELEN, LPOSFS_ENC)
C
	IF (IELEN.EQ.-1) THEN
           START_LAYER0_DSI = I2CEDD__UNEXPENDIFF
           CALL LSL_PUTMSG (I2CEDD__UNEXPENDIFF)
           CALL WRITEF ('  repositioning to enclosing feature')
           GOTO 999
        ENDIF
C
        IF (IECODE.NE.'FS') THEN
           START_LAYER0_DSI = I2CEDD__FSREPOSERR
           CALL LSL_PUTMSG (I2CEDD__FSREPOSERR, LPOSFS_ENC)
           CALL WRITEF ('  repositioning to enclosing feature')
           GOTO 999
        ENDIF
C
        IF (DIAG) THEN
           CALL WRITEF
           CALL WRITEF (' Processing enclosing feature')
        ENDIF
C
        CALL PROCESS_ENCLOSING_FEATURE     ! to process AC's
C
C  then the registration points and accuracy outlines done later
C    in FINISH_LAYER0_DSI
C
999     RETURN
	END
C
