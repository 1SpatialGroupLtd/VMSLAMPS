C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-09-07 18:10:48.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        SUBROUTINE PROCESS_REG_POINT (I)
C
***	MODULE	PROCESS_REG_POINT
***	IDENT	07SE88
C
C 	Copyright Laser-Scan Laboratories Ltd.,England
C
C Created  J Barber  16-Aug-1988
C
C Reads the Registration point feature AC entries 
C These must correspond to the format as written by CEDD2I
C
C Values are out to the DSI record after the main file data
C
	IMPLICIT NONE
C
        INTEGER         I              ! reg point count
C 
***     PARAMETER/HERE:I2CEDDMSG/
***     COMMON/LSL$CMNIFF:IFFHAN/
***     COMMON/LSL$CMNFRT:FRTACD/
***     COMMON/HERE:DESCR/
***     COMMON/HERE:PARAMS/
C
C  functions
C
        LOGICAL         ACDFND     
        INTEGER         CONVERT_TO_DMSH
C                                          !   dd/mm/yy
C  workspace
C
        INTEGER         J
        INTEGER         RETVAL
	INTEGER*2	IELEN	           ! length of
	INTEGER*2	IECODE             ! IFF entry
        INTEGER*2       ACTYPE
	INTEGER		AC4TYPE		   ! longword for ACDFND
        INTEGER         ACVAL
C
        REAL*8          VALUE              ! input to 
                                           !    CONVERT_TO_DMSH
C
        INTEGER         DEGREE
        INTEGER         MINUTE
        INTEGER         HUNSEC
        CHARACTER*1     HEMIS
C
        CHARACTER*20    NAME_STRING        ! acd NAME
C
        BYTE            REG_BYTBUF(51)     ! for value fields
        BYTE            FIELD_BYTBUF(4)
C
C  **********************************************************
        HAD_AC = .FALSE.
C
        DO 5 J = 1,51
        REG_BYTBUF(J) = ' '
5       CONTINUE
C
C  now build the DSI entries
C
        IF (I.EQ.1) THEN
           CALL EXPAND ('%WDSRG', FIELD_BYTBUF(1))
           CALL INSERT_IN_BLOCK('DSI',FIELD_BYTBUF, 4, 646)
C
           CALL EXPAND ('%W%P %I3', FIELD_BYTBUF(1), REGCNT)
           CALL INSERT_IN_BLOCK('DSI',FIELD_BYTBUF, 3, 650)
        ENDIF
C
        IF (DIAG) CALL WRITEF 
     &                 ('.Reading Registration point %N', I)

C  get next IFF entry
C
10	CALL IFFNXT (IECODE, IELEN)

	IF (IELEN.EQ.-1) THEN
           CALL LSL_PUTMSG (I2CEDD__UNEXPENDIFF)
           CALL WRITEF (' in registration point', I)
           GOTO 999
        ENDIF
C
        IF (IECODE.EQ.'AC') THEN
           HAD_AC = .TRUE.
           GOTO 20
        ELSEIF (IECODE.EQ.'EF') THEN
           IF (.NOT.HAD_AC) THEN
              CALL LSL_PUTMSG (I2CEDD__ACNOTFOUND)
              CALL WRITEF (' in registration point', I)
           ENDIF
           GOTO 900
        ELSE
           GOTO 10
        ENDIF
C
C  AC  - Attribute code
C
20	CALL EIHRI (ACTYPE, 1, 1)	! read AC type
        CALL EIHRL (ACVAL, 1, 2)        ! read value field
C
	AC4TYPE = ACTYPE
        IF (.NOT.ACDFND (AC4TYPE, .TRUE.)) THEN
           NAME_STRING= ACD_NAME (:ACD_NAME_LEN)
        ELSE 
           CALL LSL_PUTMSG (I2CEDD__ACDFNDERR, ACTYPE)
           CALL WRITEF (' in registration point', I)
           GOTO 10                                ! give up on AC
        ENDIF
C
C  AC successfully read
C    now the AC entries in turn
C
        IF (NAME_STRING.EQ.'Registration_ID') THEN 
           CALL EXPAND ('%W%P %I6', REG_BYTBUF(1), ACVAL)
C
        ELSEIF (NAME_STRING.EQ.'Control_X') THEN 
           CALL EXPAND ('%W%P %I6', REG_BYTBUF(34), ACVAL)
C
        ELSEIF (NAME_STRING.EQ.'Control_Y') THEN 
           CALL EXPAND ('%W%P %I6', REG_BYTBUF(40), ACVAL)
C
        ELSEIF (NAME_STRING.EQ.'Control_Z') THEN 
           CALL EXPAND ('%W%P %I6', REG_BYTBUF(46), ACVAL)
C
        ELSEIF (NAME_STRING.EQ.'Registration_lat') THEN 
C
C   convert these arcsec/100 to deg, min, secs/100
C
	   VALUE = ACVAL/10D0         ! treat as arcsec/10

           RETVAL = CONVERT_TO_DMSH (VALUE, .FALSE., 110, 
     &                          DEGREE, MINUTE, HUNSEC, HEMIS)
           IF (.NOT.RETVAL) THEN
              CALL LSL_PUTMSG (I2CEDD__DMSCONVERR, VALUE)
              CALL WRITEF (' in registration point', I)
           ENDIF
C
           CALL EXPAND ('%W%P0%I2', REG_BYTBUF(7), DEGREE)
           CALL EXPAND ('%W%P0%I2', REG_BYTBUF(9), MINUTE)
           CALL EXPAND ('%W%P0%I4', REG_BYTBUF(11), HUNSEC)
           CALL EXPAND ('%W%S1', REG_BYTBUF(15), HEMIS)
C
        ELSEIF (NAME_STRING.EQ.'Registration_long') THEN 
C
C   convert to deg, min, secs/100
C
           VALUE = ACVAL/10D0        ! treat as arcsec/10
C
           RETVAL = CONVERT_TO_DMSH (VALUE, .TRUE., 110, 
     &                          DEGREE, MINUTE, HUNSEC, HEMIS)
           IF (.NOT.RETVAL) THEN
              CALL LSL_PUTMSG (I2CEDD__DMSCONVERR, VALUE)
              CALL WRITEF (' in registration point', I)
           ENDIF
C
           CALL EXPAND ('%W%P0%I3', REG_BYTBUF(16), DEGREE)
           CALL EXPAND ('%W%P0%I2', REG_BYTBUF(19), MINUTE)
           CALL EXPAND ('%W%P0%I4', REG_BYTBUF(21), HUNSEC)
           CALL EXPAND ('%W%S1', REG_BYTBUF(25), HEMIS)
C
        ELSEIF (NAME_STRING.EQ.'Registration_elev') THEN 
           CALL EXPAND ('%W%P %I8', REG_BYTBUF(26), ACVAL)
C
        ELSE
           CALL LSL_PUTMSG (I2CEDD__ACWRONGFTR, ACTYPE)
           CALL WRITEF (' in registration point', I)
        ENDIF
C
        GOTO 10                       ! get next entry
C
C  thats all the expected AC's done
C
900     CALL APPEND_TO_BLOCK (REG_BYTBUF, 51, 'DSI')
C
        IF (DIAG) CALL WRITEF 
     &              ('.Registration point %N completed', I)
C
C  exit
C
999     RETURN
	END
C
