C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-08-24 14:28:00.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION FIND_Z_RANGE()
C
***	MODULE FIND_Z_RANGE
***	IDENT 17AU88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			17 August 1988
C
C Routine to scan for ZS entries in current IFF file 
C recording the minimum and maximum Z found in the entire file.
C
C This Z range is used to allow I2CEDD to calculate multiplier
C and offset to ensure output Z values are all positve and
C have correct number of significant figures.
C
C The maximum and minimum are stored in DESCR.CMN in Z_MAX and Z_MIN
C
	IMPLICIT NONE
C
C common blocks
	INCLUDE 'HERE:DESCR.CMN'
	INCLUDE 'HERE:I2CEDDMSG.PAR'
C
C w/s
	INTEGER		MAX_POINTS	! maximum allowed num of points
	PARAMETER	(MAX_POINTS=200)! is 200
C
	REAL		COORD_BUFFER(MAX_POINTS*3)! array in which to
					! store points read from ZS
	INTEGER		NUM_POINTS	! number of points found
	INTEGER*2	IENDS		! info from ZS entry
C
	INTEGER		CURRENT_POINT	! index to coordinate buffer
	INTEGER		CURRENT_DIMEN	! index to coordinate buffer
C
	INTEGER*2	IECODE		! code of current IFF entry
	INTEGER*2	IELEN		! length of current IFF entry
C
C functions
C
C Assume success
C
	FIND_Z_RANGE = I2CEDD__NORMAL
C
C Mark current file position
C
	CALL EIHMK(1)
C
C Clear flag to indicate not yet had first 3D point in file
C
	FILE_IS_3D = .FALSE.
C
C Set default Z range (for 2D file)
C
	Z_MIN = 0
	Z_MAX = 0
C
C Find next ZS entry
C
10	CALL IFFNXC('ZS',IELEN)
C
C Check for zero length ZS entry, and loop to find next ZS
C
	IF (IELEN.EQ.0) GOTO 10
C
C Check for end of file, and exit if it has been reached
C
	IF (IELEN.EQ.-1) GOTO 900
C
C Read number of points in ZS entry
C
	CALL EIHRS(NUM_POINTS,IENDS)
C
C Ensure that there are some points in this ZS entry
C
	IF (NUM_POINTS.LE.0) GOTO 900
C
C Check that there aren't too many points in the entry
C If there are, set number of points to be read to the maximum allowed
C
	IF (NUM_POINTS.GT.MAX_POINTS) NUM_POINTS = MAX_POINTS
C
C Read the points into the coordinate array, if required
C
	CALL EIHRR(COORD_BUFFER,NUM_POINTS*3,1)
C
C Check if this is the first 3D point
C
	IF (.NOT.FILE_IS_3D) THEN
C
C This is first point, so set max and min to be its Z coord
C
	   Z_MIN = COORD_BUFFER(3)
	   Z_MAX = Z_MIN
C
C Set flag to indicate we have had first 3D point
C
	   FILE_IS_3D = .TRUE.
	ENDIF
C
C Scan through the Z entries in current ZS
C
	DO 20 CURRENT_POINT = 1,NUM_POINTS
C
C Test if current Z is less than minimum, adjust it if it is
C
	   IF (COORD_BUFFER((CURRENT_POINT-1)*3 + 3).LT.Z_MIN)
     &		Z_MIN = COORD_BUFFER((CURRENT_POINT-1)*3 + 3)
C
C Test if current Z is less than maximum, adjust it if it is
C
	   IF (COORD_BUFFER((CURRENT_POINT-1)*3 + 3).GT.Z_MAX)
     &		Z_MAX = COORD_BUFFER((CURRENT_POINT-1)*3 + 3)
C
20	CONTINUE
C
C Loop to find next ZS entry
C
	GOTO 10
C
C Reposition file to initial position, marked at start
C
900	CALL IFFRWM
C
C Remove mark on position
C
	CALL EIHMK(0)
C
C Exit
C
	RETURN
	END
