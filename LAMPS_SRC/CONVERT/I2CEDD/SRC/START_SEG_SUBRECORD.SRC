C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-09-07 12:49:18.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION START_SEG_SUBRECORD (FSNUM,FEATURE_ID)
C
***	MODULE START_SEG_SUBRECORD
***	IDENT 07SE88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			17 August 1988
C
C Routine to write the initial entries in the SEG subrecord for
C the segment for a particular feature on a sequential CEDD format
C tape file.
C
C The initial entries in the SEG subrecord are:
C
C Segment Id		6 numeric chars		= Feature id here
C Feature Count		2 numeric chars		= '01' here
C Feature Id		6 numeric chars		  Passed as argument
C Feature Orientation	1 alphab' char		= 'C' in seq'l format
C Point count		5 numeric chars		  
C
C Total length		20 chars
C
C The sequential tape generated will have a one-to-one correspondence
C between features and segments, even for sounding data, hence the
C segment id will always be the same as the feature id.
C
C The start of the segment subrecord is always appended to the current
C output block buffer (using the APPEND_TO_BLOCK) routine.
c
C
	IMPLICIT NONE
C
C common blocks
	INCLUDE 'HERE:I2CEDDMSG.PAR'
C
C arguments
	INTEGER		FEATURE_ID	! id of current feature
					! the coordinates of which
					! are being written to SEG
	INTEGER*2	FSNUM		! feature serial number of
					! current feature
					! This is used in messages
C
C w/s
	INTEGER 	LENGTH		! length of buffer to hold
	PARAMETER	(LENGTH = 20)	! start of subrecord
	BYTE		BUFFER(LENGTH)	! buffer to hold subrecord start
	INTEGER		TOTAL_POINTS	! number of points in feature
C
C functions
	INTEGER		FIND_TOTAL_POINTS! find number of points in 
					! current feature
	INTEGER		APPEND_TO_BLOCK	! append to current output block
C
C Assume success
C
	START_SEG_SUBRECORD = I2CEDD__NORMAL
C
C Find out how many points there are in the current feature
C
	START_SEG_SUBRECORD = FIND_TOTAL_POINTS (FSNUM,TOTAL_POINTS)
C
C Check for errors
C
	IF (.NOT.START_SEG_SUBRECORD) GOTO 900
C
C Expand start of subrecord into byte buffer.
C Pad the numeric fields with 0s.
C
	CALL EXPAND ('%W%P0%I6%I2%I6%S1%I5',
     &		BUFFER,		! buffer to hold start of subrecord
     &		FEATURE_ID,	! segment id (= feature id)
     &		1,		! feature count (= 01)
     &		FEATURE_ID,	! feature id
     &		'C',		! feature orientation
     &		TOTAL_POINTS)	! number of points in feature
C
C Append the start of the current feature subrecord to the output
C block buffer.
C
	START_SEG_SUBRECORD = APPEND_TO_BLOCK(
     &		BUFFER,		! buffer holding start of subrecord
     &		LENGTH,		! number of characters in buffer
     &		'SEG')		! block label for SEG blocks
C
C Exit
C
900	RETURN
	END
