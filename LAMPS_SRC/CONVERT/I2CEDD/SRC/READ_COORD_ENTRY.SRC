C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-08-24 22:38:02.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION READ_COORD_ENTRY(
     &		WANT_POINTS,
     &		COORD_BUFFER,MAX_POINTS,NUM_POINTS,NUM_DIMEN,
     &		FOUND_EF)
C
***	MODULE READ_COORD_ENTRY
***	IDENT 17AU88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			17 August 1988
C
C Routine to find the next ZS or ST entry in the current feature
C and return its coordinates, number of points and number of dimensions
C in the appropriate arguments.
C If an EF entry (or an end of file) is found first, no points are 
C returned, and FOUND_EF is returned as .TRUE.
C
	IMPLICIT NONE
C
C common blocks
	INCLUDE	'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE 'HERE:I2CEDDMSG.PAR'
	INCLUDE 'HERE:DESCR.CMN'
C
C arguments
	LOGICAL	WANT_POINTS		! .T. if to read points into
					! coordinate buffer
	INTEGER	MAX_POINTS		! maximum possible num points
	REAL	COORD_BUFFER(MAX_POINTS*3)! points read
	INTEGER	NUM_POINTS		! number of points read
	INTEGER	NUM_DIMEN		! num dimensions (ZS=3, ST=2)
	LOGICAL	FOUND_EF		! .T. if find EF before ZS/ST
C
C w/s
	INTEGER		LAST_ENTRY_POS	! position of last IFF entry
	INTEGER*2	IELEN		! length of current IFF entry
	INTEGER*2	IECODE		! code of current IFF entry
	INTEGER*2	IENDS		! info from ST/ZS header
C
C functions

C
C Assume success
C
	READ_COORD_ENTRY = I2CEDD__NORMAL
C
C Assume have not yet reached end of IFF file
C
	FOUND_EF = .FALSE.
C
C Preserve current position in file in case it is necessary to
C back track to before the entry about to be read
C
10	LAST_ENTRY_POS = LPOSH
C
C Read the next entry from IFF file
C
	CALL IFFNXT(IECODE,IELEN)
C
C Determine type of entry
C
C Check for end of file or EF or NF or EO or NO....
C
	IF ((IELEN.EQ.-1).OR.
     &	    (IECODE.EQ.'EF').OR.
     &	    (IECODE.EQ.'NF').OR.
     &	    (IECODE.EQ.'EO').OR.
     &	    (IECODE.EQ.'NO')) THEN
C
C Set the FOUND_EF flag to show we have reached end of this feature
C
	   FOUND_EF = .TRUE.
C
C If this entry is not an EF then back track to previous entry, so
C that any subsequent routines to process following layers/features
C will not fail because the current feature was not properly terminated
C by an EF entry.
C If there was no previous entry, then the pointer is 0.
C
	   IF ((IECODE.NE.'EF').AND.(LAST_ENTRY_POS.NE.0))
     &		CALL IFFPKE(IECODE,IELEN,LAST_ENTRY_POS)
C
C Check for non-zero length coordinate string i.e. ST or ZS entry
C
	ELSEIF (((IECODE.EQ.'ST').OR.(IECODE.EQ.'ZS')).AND.
     &		 (IELEN.NE.0)) THEN
C
C Set number of dimensions 
C
C to be 2 (x,y) for ST
C
	   IF (IECODE.EQ.'ST') THEN
	      NUM_DIMEN = 2
C
C or 3 (x,y,z) for ZS
C
	   ELSE
	      NUM_DIMEN = 3
	   ENDIF
C
C Read the number of points in the ST/ZS
C
	   NUM_POINTS = 0
	   CALL EIHRS(NUM_POINTS,IENDS)
C
C If there are no points in this entry, loop to find the next one
C
	   IF (NUM_POINTS.LE.0) GOTO 10
C
C Determine whether we want to read the points into coordinate buffer
C
	   IF (WANT_POINTS) THEN
C
C Check that there aren't too many points in the entry
C
	       IF (NUM_POINTS.GT.MAX_POINTS) THEN
C
C Tell the user about the problem
C
	         CALL LSL_PUTMSG(I2CEDD__TOOMNYPNTS,FSN)
C
C Set number of points to be read to the maximum allowed
C
	         NUM_POINTS = MAX_POINTS
	      ENDIF
C
C Read the points into the coordinate array, if required
C
	      CALL EIHRR(COORD_BUFFER,NUM_POINTS*NUM_DIMEN,1)
	   ENDIF
C
C Otherwise, entry is not one in which we are interested, so get
C next one
C
	ELSE
	   GOTO 10
	ENDIF
C
C Exit
C
	RETURN
	END
