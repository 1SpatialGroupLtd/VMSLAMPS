C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-08-25 19:32:18.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION INSERT_IN_BLOCK(LABEL,BUFFER,LENGTH,POSITION)
C
***	MODULE INSERT_IN_BLOCK
***	IDENT 17AU88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			17 August 1988
C
C Routine to insert the contents of the buffer passed as the argument
C in the block byte buffer in common block at /DATA_BUFFER/ at the
C specified position.
C The pointer BLOCK_NEXT_FREE (to the next free byte in the data 
C buffer) will be set to point to the byte after the inserted data if 
C its current value points to a position earlier in the block.
C
	IMPLICIT NONE
C
C common blocks
	INCLUDE 'HERE:DATA_BUFFER.CMN'
	INCLUDE 'HERE:I2CEDDMSG.PAR'
C
C arguments
	INTEGER	LENGTH		! length of data to be inserted
	BYTE	BUFFER(LENGTH)	! data to be inserted
	INTEGER	POSITION	! position in output buffer to insert
				! the data
	CHARACTER*3 LABEL	! label for current block
C
C w/s
	INTEGER	ACTUAL_POSITION	! local copy of poistion variable
	INTEGER	    I		! temporary count
C
C functions
	INTEGER	WRITE_BLOCK	! write next tape block
	INTEGER	START_OUTPUT_BLOCK ! start new output block
C
C Assume success
C
	INSERT_IN_BLOCK = I2CEDD__NORMAL
C
C Take a local copy of the position argument for processing/changing
C
	ACTUAL_POSITION = POSITION
C
C Test if the next free byte is at position 0.
C This indicates that the current block has not been started (i.e.
C no label has been put at its beginning), which may happen if
C this is the first block the program has written, or if the 
C previous operation was a FINISH_BLOCK.
C
	IF (BLOCK_NEXT_FREE.EQ.0) THEN
C
C Start new block
C
	   INSERT_IN_BLOCK = START_OUTPUT_BLOCK(LABEL)
C
C Check for errors
C
	   IF (.NOT.INSERT_IN_BLOCK) GOTO 900
	ENDIF
C
C Check that position is less than length of block (1980 bytes)
C If it is not, output the current block, start a new one, and
C calculate the actual position in the block as the specified
C (specified position - 1980) mod (1980-8) plus 8.
C The '8' figure allows for the 8 byte block label
C
	IF (ACTUAL_POSITION.GT.BLOCK_LENGTH) THEN
C
C Output the last block
C
	   INSERT_IN_BLOCK = WRITE_BLOCK()
C
C Check for errors
C
	   IF (.NOT.INSERT_IN_BLOCK) GOTO 900
C
C Start new block
C
	   INSERT_IN_BLOCK = START_OUTPUT_BLOCK(LABEL)
C
C Check for errors
C
	   IF (.NOT.INSERT_IN_BLOCK) GOTO 900
C
C Calculate the actual position.
C This is the specified position, less the length of the first
C block (from the start of which the position is counted), modulus
C the number of bytes available in all subsequent blocks (all but the
C first 8, which are used for the block label), plus 8 (to allow
C for the 8 byte label in the current block).
C
	   ACTUAL_POSITION = MOD(
     &		(ACTUAL_POSITION - BLOCK_LENGTH),
     &		(BLOCK_LENGTH - 8) 
     &		) + 8
C
	ENDIF
C
C Loop to insert the data
C
	DO 10 I = 1,LENGTH
	   BLOCK_BUFFER(I-1+ACTUAL_POSITION) = BUFFER(I)
10	CONTINUE
C
C Now check if the next free byte points to a place in the
C output block buffer before the end of the data just inserted.
C If it does, adjust to point to byte just after data inserted.
C
	IF (BLOCK_NEXT_FREE.LT.(ACTUAL_POSITION+LENGTH)) 
     &		BLOCK_NEXT_FREE = ACTUAL_POSITION + LENGTH
C
C Exit
C
900	RETURN
	END
