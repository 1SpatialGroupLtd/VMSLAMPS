C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-08-11 12:14:48.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE NONGRA(CURR_PTR,CURR_VAL,CURR_TEXT,CURR_LEN,
     &	                  CURR_DT,CURR_ENT,CURR_FSN,CURR_FC)
C
***	IDENT	11AU94
***	MODULE	NONGRA
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Based on CAD2IMAP NONGRA				RJH 15-Jun-1989
CMOD    Call to XI4LWI now suppressed as Informap routine	ST  11-Aug-1994
C	no longer supported. Mod 1397.
C
C	CONVERT I2IMAP Utility - Deal With Non-Graphic Information
C
C Description
C
C	Assumes kind 4 or 5
C
	IMPLICIT NONE
C
C Parameter Files
C
	INCLUDE 'CMN:CHECK.PAR'		! input checks
	INCLUDE 'CMN:I2IMAPMSG.PAR'	! message definitions
	INCLUDE	'LSL$CMNIFF:CB.STR'	! record structure definition
C
C Local Parameters
C
	INTEGER*4	N		! attribute name buffer length
	PARAMETER	(N = 9)
C
C Arguments
C
	RECORD	/IFF_CBITEM/ CURR_VAL	! current attribute value
	INTEGER*4	CURR_PTR	! pointer into attribute table
	INTEGER*4	CURR_LEN		! current text length
	INTEGER*4	CURR_FSN		! current FSN
	INTEGER*2	CURR_DT			! current datatype
	INTEGER*2	CURR_ENT		! current IFF entry
	INTEGER*2	CURR_FC			! current FC
	BYTE		CURR_TEXT(CURR_LEN)	! current text
C
C Common Blocks
C
	INCLUDE 'CMN:ATTRIBUTES.CMN'	! attribute description table
	INCLUDE 'CMN:INFACE.CMN'	! INFORMAP data
	INCLUDE	'LSL$CMNFRT:FRTACD.CMN'	! FRT ACD common block
C
C Functions called
C
	INTEGER*4	SIGCHS		! find sig. chars in string
C
C Local Variables
C
	INTEGER*2	CURR_COD	! current IFF attribute code
C
	BYTE		NAMBUF(N)	! INFORMAP attribute name
	INTEGER*2	INUM		! INFORMAP attribute number
	INTEGER*2	ITYP		! INFORMAP attribute type
	INTEGER*2	ILEN		! INFORMAP attribute length
	INTEGER*2	IERR		! INFORMAP error code
C
	INTEGER*2	TMPINT		! integer attribute
	INTEGER*4	TMPLON		! long integer attribute
	INTEGER*4	TMPALON		! attribute longword integer 
	REAL*4		TMPREA		! real attribute
	REAL*8		TMPDBL		! double precision attribute
C
	INTEGER*4	CLEN		! character attribute length
	BYTE		CBUF(80)	! character attribute as bytes
C
	LOGICAL		IGNORE		! ignore attribute ?
C
C Initialise error flags
C
	IERR = 0
	IGNORE = .FALSE.
C
C and set the attribute code
C
	CURR_COD = ATTR_TAB(ATTR_COD,CURR_PTR)
C
C Convert the attribute name
C
	CALL STR_TO_BUF(ATTR_NAM(CURR_PTR),NAMBUF,N)
C
C Find the attribute number
C
	CALL NAMITM(NAMBUF,INUM,IERR)
C
C and the INFORMAP attribute type
C
	IF (IERR .EQ. 0) THEN
	   CALL ITMFM(INUM,ITYP)
C
	   IF (ITYP .EQ. -999) THEN
	      CALL LSL_PUTMSG(I2IMAP__ILLEGLATTNUM,INUM,NAMBUF,CURR_DT)
	      IGNORE = .TRUE.
C
C and the INFORMAP attribute length
C
	   ELSE
	      CALL ITMLEN(INUM,ILEN)
C
	      IF (ILEN .EQ. 0) THEN
	         CALL LSL_PUTMSG(I2IMAP__ILLEGLATTNUM,
     &	                         INUM,NAMBUF,CURR_DT)
	         IGNORE = .TRUE.
	      ENDIF
	   ENDIF
	ENDIF
C
C Now we can go ahead and deal with the actual attribute, depending on 
C its type - first the value field in AC's and CB's
C
	IF ((IERR .EQ. 0) .AND. (.NOT. IGNORE)) THEN
	   IF ((ATTR_TAB(ATTR_FLD,CURR_PTR) .EQ. AC_VAL) .OR.
     &	       (ATTR_TAB(ATTR_FLD,CURR_PTR) .EQ. CB_COL)) THEN
C
C Deal with an integer
C
	      IF (ATTR_TAB(ATTR_TYP,CURR_PTR) .EQ. ACD_DATATYPE_I) THEN 
C
	         IF (ITYP .EQ. 0) THEN		! integer
	            IF (ILEN .EQ. 2) THEN	! word
	               IF ( CURR_VAL.I.GE.0 .AND. 
     &	                    CURR_VAL.I.LE.MAX_WORD ) THEN
	                  TMPINT = CURR_VAL.I
	                  CALL NGPUT(INUM,NGARY,TMPINT,ILEN,IERR)
	               ELSE
	                  CALL LSL_PUTMSG(I2IMAP__ATTOFLOW,CURR_COD)
	               ENDIF
	            ELSE			! attribute longword
CCC                    CALL XI4LWI(CURR_VAL.I,TMPALON)
		       TMPALON = CURR_VAL.I
	               CALL NGPUT(INUM,NGARY,TMPALON,ILEN,IERR)
	            ENDIF
C
	         ELSE IF (ITYP .GT. 0) THEN	! floating-point
	            IF (ILEN .EQ. 4) THEN	! real
	               TMPREA = CURR_VAL.I
	               CALL NGPUT(INUM,NGARY,TMPREA,ILEN,IERR)
	            ELSE			! double precision
	               TMPDBL = CURR_VAL.I
	               CALL NGPUT(INUM,NGARY,TMPDBL,ILEN,IERR)
	            ENDIF
C
	         ELSE
	            CALL LSL_PUTMSG(I2IMAP__INCOMPATT,CURR_COD)
	            CALL LSL_ADDMSG(I2IMAP__IFFINFO,
     &	                            CURR_ENT,CURR_FSN,CURR_FC)
	         ENDIF
C
C Deal with a real
C
	      ELSEIF (ATTR_TAB(ATTR_TYP,CURR_PTR) .EQ. 
     &	              ACD_DATATYPE_R) THEN
C
	         IF (ITYP .EQ. 0) THEN		! integer
	            TMPLON = NINT(CURR_VAL.R)
	            IF (ILEN .EQ. 2) THEN	! word
	               IF ( TMPLON.GE.0 .AND. 
     &	                    TMPLON.LE.MAX_WORD ) THEN
	                  TMPINT = TMPLON
	                  CALL NGPUT(INUM,NGARY,TMPINT,ILEN,IERR)
	               ELSE
	                  CALL LSL_PUTMSG(I2IMAP__ATTOFLOW,CURR_COD)
	               ENDIF
	            ELSE			! attribute longword
CCC                    CALL XI4LWI(TMPLON,TMPALON)
		       TMPALON = TMPLON
	               CALL NGPUT(INUM,NGARY,TMPALON,ILEN,IERR)
	            ENDIF
C
	         ELSE IF (ITYP .GT. 0) THEN	! floating-point
	            IF (ILEN .EQ. 4) THEN	! real
	               CALL NGPUT(INUM,NGARY,CURR_VAL.R,ILEN,IERR)
	            ELSE			! double precision
	               TMPDBL = CURR_VAL.R
	               CALL NGPUT(INUM,NGARY,TMPDBL,ILEN,IERR)
	            ENDIF
C
	         ELSE
	            CALL LSL_PUTMSG(I2IMAP__INCOMPATT,CURR_COD)
	            CALL LSL_ADDMSG(I2IMAP__IFFINFO,
     &	                            CURR_ENT,CURR_FSN,CURR_FC)
	         ENDIF
C
C Deal with a string
C
	      ELSEIF (ATTR_TAB(ATTR_TYP,CURR_PTR) .EQ. 
     &	              ACD_DATATYPE_C) THEN
C
	         IF (ITYP .LT. 0) THEN		! ASCII format
	            CLEN = SIGCHS(CURR_VAL.C)	! get IFF length
	            IF (CLEN .GT. ILEN) THEN	! too big,
	               CALL LSL_PUTMSG(I2IMAP__TRUNCATT,CURR_COD)
	               CALL LSL_ADDMSG(I2IMAP__IFFINFO,
     &	                               CURR_ENT,CURR_FSN,CURR_FC)
	               CLEN = ILEN		! so truncate it
	            ENDIF
	            CALL STR_TO_BUF(CURR_VAL.C,CBUF,CLEN)
	            CALL NGIN(INUM,NGARY,CBUF,CLEN,IERR)
C
	         ELSE
	            CALL LSL_PUTMSG(I2IMAP__INCOMPATT,CURR_COD)
	            CALL LSL_ADDMSG(I2IMAP__IFFINFO,
     &	                            CURR_ENT,CURR_FSN,CURR_FC)
	         ENDIF
	      ENDIF
C
C Now deal with an AC text field
C
	   ELSE
	      IF (ITYP .LT. 0) THEN		! ASCII format
	         IF (CURR_LEN .GT. ILEN) THEN	! too big,
	            CALL LSL_PUTMSG(I2IMAP__TRUNCATT,CURR_COD)
	            CALL LSL_ADDMSG(I2IMAP__IFFINFO,
     &	                            CURR_ENT,CURR_FSN,CURR_FC)
	            CURR_LEN = ILEN		! so truncate it
	         ENDIF
	         CALL NGIN(INUM,NGARY,CURR_TEXT,CURR_LEN,IERR)
C
	      ELSE
	         CALL LSL_PUTMSG(I2IMAP__INCOMPATT,CURR_COD)
	            CALL LSL_ADDMSG(I2IMAP__IFFINFO,
     &	                            CURR_ENT,CURR_FSN,CURR_FC)
	      ENDIF
	   ENDIF
	ENDIF
C
C If there has been a PLUS error, output the appropriate message
C
	IF (IERR .NE. 0) THEN
	   IF (IERR .EQ. -810) THEN
	      CALL LSL_PUTMSG(I2IMAP__ATTNOTFOUND,NAMBUF,CURR_DT)
	      CALL LSL_ADDMSG(I2IMAP__IFFINFO,CURR_ENT,CURR_FSN,CURR_FC)
	   ELSE IF ((IERR .EQ. -820) .OR. (IERR .EQ. -845)) THEN
	      CALL LSL_PUTMSG(I2IMAP__ILLEGLATTNUM,INUM,NAMBUF,CURR_DT)
	   ELSE IF ((IERR .EQ. -821) .OR. (IERR .EQ. -846)) THEN
	      CALL LSL_PUTMSG(I2IMAP__ILLEGLATTLEN,ILEN,NAMBUF,CURR_DT)
	   ELSE
	      CALL LSL_PUTMSG(I2IMAP__UNKPLUS,IERR,NAMBUF,CURR_DT)
	   ENDIF
	ENDIF
C
C Return
C
	RETURN
	END
