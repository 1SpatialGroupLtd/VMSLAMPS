C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-06-07 19:26:56.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION READ_DTR(DTR_FLAGS,DTR_MIN,DTR_MAX)
C
***	IDENT	07JN89
***	MODULE	READ_DTR
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RJH	 6-Jun-1989
C
C	CONVERT I2IMAP Utility - Read datatype range from parameter file
C
C Description
C
C	Reads a range of INFORMAP datatypes from the parameter file and 
C	flags them individually as selected
C
C	Expects the parameter file to be open, the current input line 
C	to be in TXTBUF, and the command line decoding pointer to be in 
C	position before the range to be read. The range can be made up 
C	of several sub-ranges or individual numbers separated by 
C	commas. The range is optional, and should be the last thing on 
C	the line before an optional comment.
C
C	Returns FALSE if something goes wrong, TRUE otherwise
C
	IMPLICIT NONE
C
C Included Parameter Files
C
	INCLUDE 'CMN:I2IMAPMSG.PAR'	! message definitions
C
C Arguments
C
	INTEGER*4	DTR_MIN		! minimum datatype
	INTEGER*4	DTR_MAX		! maximum datatype
	LOGICAL*1	DTR_FLAGS(DTR_MIN:DTR_MAX)
C
C Functions called
C
	LOGICAL		RDCHS		! read character
	LOGICAL		ADD_DTR		! add a single range
C
C Local Variables
C
	INTEGER*4	I		! counter
	LOGICAL		EOLN		! end of line ?
	LOGICAL		OK		! everything OK ?
	BYTE		NXTCH		! next character
C
C Initialisation
C
	OK = .TRUE.
C
C Read the first character in the range
C
	EOLN = RDCHS(NXTCH)
	IF (.NOT. EOLN) EOLN = (NXTCH .EQ. '!')		! a comment
C
C If there is nothing else on the line, select all datatypes
C
	IF (EOLN) THEN
	   DO 10 I=DTR_MIN,DTR_MAX
	      DTR_FLAGS(I) = .TRUE.
10	   CONTINUE
	ENDIF
C
C While no errors and not yet reached end of line, continue decoding
C
100	IF ((.NOT. OK) .OR. EOLN) GO TO 200
C
C Decode the range
C
	IF ((NXTCH .GE. '0') .AND. (NXTCH .LE. '9')) THEN
	   CALL BSCH
	   OK = ADD_DTR(DTR_FLAGS,DTR_MIN,DTR_MAX)
	ELSE
	   CALL LSL_PUTMSG(I2IMAP__UNEXPCH,NXTCH)
	   OK = .FALSE.
	ENDIF
C
C Read the next presumed digit
C
	IF (OK) THEN
110	   EOLN = RDCHS(NXTCH)
	   IF (.NOT. EOLN) EOLN = (NXTCH .EQ. '!')	! a comment
	   IF ((.NOT. EOLN) .AND. (NXTCH .EQ. ',')) GO TO 110
	ENDIF
C
C Go back for test
C
	GO TO 100
C
C Deselect all datatypes if we had an error
C
200	IF (.NOT. OK) THEN
	   DO 210 I=DTR_MIN,DTR_MAX
	      DTR_FLAGS(I) = .FALSE.
210	   CONTINUE
	ENDIF
C
C Assign function value
C
	READ_DTR = OK
C
C Return
C
	RETURN
	END
