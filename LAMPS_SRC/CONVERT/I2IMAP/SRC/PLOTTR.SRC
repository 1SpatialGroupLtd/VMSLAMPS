C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-06-30 11:34:14.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION PLOTTR( PLOTX, PLOTY )
C
***	IDENT	16JN89
***	MODULE	PLOTTR
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Subroutine to 'plot' data into the Informap data base, including
C outputting graphical records for all data types, and non-graphical
C records where applicable
C
C Returns FALSE if the outputting should stop, TRUE if we are OK
C
C Author S G Hancock
C Based on DMC2IMAP version by TJ Ibbs
C Modified for I2IMAP by R J Hulme, 22-Sep-1987
C	
C *********************************************************************
C
	IMPLICIT NONE
C
C arguments
C
	REAL*8	PLOTX,PLOTY		! the next coordinate
C
C *********************************************************************
C
	INCLUDE 'CMN:I2IMAPMSG.PAR'	! message definitions
C
	INCLUDE	'CMN:INFACE.CMN'
	INCLUDE	'CMN:CAINT.CMN'
	INCLUDE	'CMN:CALOG.CMN'
	INCLUDE 'CMN:FILES.CMN'		! for LUNs
C
C *********************************************************************
C
C some equivalences to make access to LFCENT (the current feature code 
C description entry) easier
C     
	INTEGER*2	ITYP			! data type for this FC
	INTEGER*2	PENCOL			! symbol pen colour
	EQUIVALENCE	(LFCENT(3), ITYP)	! data type
	EQUIVALENCE	(LFCENT(5),PENCOL)	! pen colour
C
C *********************************************************************
C
C things used in calling PLUS routines
C
	REAL*8		X0,Y0		! coords of centre of drawing
	INTEGER*2	MODE		! WTGREL mode bits
	INTEGER*2	LINNO		! line type
	INTEGER*2	LTYPE		! line type for annotation
	INTEGER*2	JFLG		! open flag for files
	INTEGER*2	IPREC		! precision of data-type
	INTEGER*2	ERRKND		! error kind
	INTEGER*2	IERR		! error flag (-ve for error)
C
C other local variables
C
	INTEGER		I		! for implicit DO loops
C
C *********************************************************************
C
C assume that we will be able to carry on with our output safely
C
	PLOTTR = .TRUE.
C
C get the line type for this feature
C
	LINNO = LFCENT(4)
C
C and determine what to do by looking at DATKND
C
	IF (DATKND .EQ. 2) GO TO 900	! primary annotation
	IF (DATKND .EQ. 4) GO TO 300	! facility symbol
	IF (DATKND .EQ. 5) GO TO 300	! facility lines
C
C set MODE to unset
C
	MODE = 0
	GO TO 350			! non-facility data type
C
C *********************************************************************
C
C - facility data type - check button code from IFF file
C - button GREEN is used to start a feature, and at the start
C   of a feature, we must output any non-graphical data
C
300	IF ( (CURR_BUTN.NE.GREEN) .AND. (PREV_BUTN.NE.GREEN) ) THEN
C
C	 continuing with this feature - don't write a new non-graphic
C	 record, we'll use the current one, unless the attributes have
C	 changed
C
	   IF (NEW_NG) THEN
	      MODE = "20	! set MODE appropriately
	      NEW_NG = .FALSE.	! reset flag
	   ELSE
	      MODE = "0		! set MODE appropriately
	   ENDIF
C
	ELSE
C
C	 we're starting a new feature, so write a new non-graphic
C	 record - note that here NEW_NG is set but we don't need to use
C	 it
C
	   MODE = "20		! set MODE appropriately
C
	   IF ( (PREV_BUTN.EQ.GREEN) .AND. (CURR_BUTN.NE.GREEN) )
     &	      NEW_NG = .FALSE.	! reset flag
C
	ENDIF
C
C *********************************************************************
C
C - choose what to do, based on what kind we are using
C
C	Kind		data type
C	----		---------
C	1		non-facility line
C	2		annotation
C	3		non-facility symbol
C	4		    facility symbol
C	5		    facility line
C
350	IF ((DATKND .EQ. 3) .OR. (DATKND .EQ. 4)) GO TO 400   ! symbols
	IF ((DATKND .EQ. 1) .OR. (DATKND .EQ. 5)) GO TO 500   ! lines
C
C otherwise it is a kind we don't expect - treat it as a line, for
C lack of any better solution
C
	GO TO 500
C     
C *********************************************************************
C
C - symbols data type - set up the coordinates
C
400	DX(1)=PLOTX
	DY(1)=PLOTY
	DX(2)=DX(1)+COS(ANGLE)*DIST
	DY(2)=DY(1)+SIN(ANGLE)*DIST
	MODE = MODE .OR. "1		! set GREEN mode
C
C now set the symbol pen number (colour) - if we don't have one set,
C or have a silly one, then do nothing - ie equivalent to pen number 1
C
	IF ( PENCOL.EQ.1 ) CONTINUE
	IF ( PENCOL.EQ.2 ) MODE = MODE.OR."2000
	IF ( PENCOL.EQ.3 ) MODE = MODE.OR."4000
	IF ( PENCOL.EQ.4 ) MODE = MODE.OR."6000
	IF ( PENCOL.EQ.5 ) MODE = MODE.OR."10000
	IF ( PENCOL.EQ.6 ) MODE = MODE.OR."12000
	IF ( PENCOL.EQ.7 ) MODE = MODE.OR."14000
	IF ( PENCOL.EQ.8 ) MODE = MODE.OR."16000
C
	GO TO 800			! go and use WTGREL
C
C *********************************************************************
C
C - lines data type - set mode and coordinates
C
500	IF ( IS_CRV ) MODE = MODE .OR. "40
	IF ( CURR_BUTN.EQ.GREEN ) THEN
C
	   DX(1)=PLOTX		! this is the first point
	   DY(1)=PLOTY		! of a feature
	   PREV_BUTN = GREEN		! note that button was GREEN
	   CURR_BUTN = WHITE		! assume next button non-GREEN
	   GOTO 9000			! need more before can output
C
	ELSEIF ( (CURR_BUTN.EQ.WHITE) .AND. (PREV_BUTN.EQ.GREEN) ) THEN
C
	   DX(2)=PLOTX		! this is the second point of a
	   DY(2)=PLOTY		! feature - so can output a line
	   MODE = MODE.OR."1		! set MODE to be GREEN
	   PREV_BUTN = WHITE		! note that button was WHITE
C
	ELSEIF ( (CURR_BUTN.EQ.WHITE) .AND. (PREV_BUTN.EQ.WHITE) ) THEN
C
	   DX(2)=PLOTX		! next point of this feature
	   DY(2)=PLOTY
	   MODE = MODE.OR."0		! set MODE to be non-GREEN
	   PREV_BUTN = WHITE		! note that button was WHITE
C
	ENDIF
C	
C *********************************************************************
C
C - write line or symbol data to drawing
C
C by default, WTGREL will always find the end of file, write out the
C data, and then reset the end of file. A significant amount of time
C can be saved by stopping WTGREL playing with the end of file -
C instead we reset that explicitly ourselves when we have finished with
C these particular files 
C
C thus set the relevant bit in MODE, to stop WTGREL from handling
C the end of file position
C
800	MODE = MODE .OR. "400	! mode bit to bypass append feature
C
	CALL WTGREL(GRALUN,	! in - graphic file LUN
     &		    NGRLUN,	! in - non-graphic file LUN
     &		    MODE,	! in - type of records to write
     &		    DX, DY,	! in - coordinates in X,Y
     &		    LINNO,	! in - line type
     &		    NGARY,	! in - attribute record
     &		    ERRKND,	!out - type of error flag
     &		    IERR	!out - error flag
     &		   )
C
	IF ( IERR.NE.0 ) THEN
	   CALL LSL_PUTMSG(I2IMAP__WTGREL,ITYP)
	   GOTO 9999			! and give up
	ENDIF
	GOTO 9000
C	 
C *********************************************************************
C
C - primary annotation
C
C work out the line type required
C
900	LTYPE=LINNO
	IF (LTYPE.GT.127) LTYPE=127	! ensure it's in range
C     
C - set coordinates
C
	DX(1)=PLOTX
	DY(1)=PLOTY
	DX(2)=DX(1)+COS(ANGLE)*DIST
	DY(2)=DY(1)+SIN(ANGLE)*DIST
C
	CALL PUTANO(GRALUN,	! in - graphic file LUN
     &		    NGRLUN,	! in - non-graphic file LUN
     &		    DX,DY,	! in - origin,rotation arrays
     &		    LTYPE,	! in - line type for annotation
     &		    LTEXT,	! in - annotation text
     &		    NCHARS,	! in - its length
     &		    NGLEN,	! not used
     &		    X0,Y0,	! not used
     &		    DEL,	! not used
     &		    IPREC,	! not used
     &		    ERRKND,	!out - type of error flag
     &		    IJUST,	! in - text justification
     &		    IERR	!out - error flag
     &		   )
C
	IF ((IERR.NE.0).OR.(ERRKND.LT.0)) THEN
	   CALL LSL_PUTMSG(I2IMAP__PUTANO)
	   GOTO 9999			! and give up
	ENDIF
	GOTO 9000
C
C *********************************************************************
C
C error exit
C
9999	CALL LSL_ADDMSG(I2IMAP__CODES,ERRKND,IERR)
	CALL IMAP_SYSMSG(IERR)
	PLOTTR = .FALSE.
C
C *********************************************************************
C
9000	RETURN
	END
