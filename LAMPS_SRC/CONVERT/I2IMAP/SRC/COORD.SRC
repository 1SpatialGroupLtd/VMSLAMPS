	LOGICAL FUNCTION COORD(X,Y)
C
C  ** PROCESS COORDINATES **
C
***	IDENT	21JN94
***	MODULE	COORD
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Modified by TJ Ibbs,					 April 1985
C Modified for I2IMAP by R J Hulme,			22-Sep-1987
C Modified for DEC/BGAS by A D Trigg,			03-Feb-1989
C Modified by SJH. SPR 2518. Mod form written when	07-Jun-1994
C other work was done for I2IMAP. Mod 1372
C
C Returns FALSE if we are to abandon this map, TRUE otherwise
C (result taken directly from call of PLOTTR)
C
	IMPLICIT NONE
C
C *********************************************************************
C
C parameter files
C
	INCLUDE 'CMN:I2IMAPMSG.PAR'	! message definitions
C
C common blocks
C
	INCLUDE	'CMN:CAREAL.CMN'
	INCLUDE	'CMN:CAINT.CMN'
	INCLUDE	'CMN:CALOG.CMN'
	INCLUDE	'CMN:INFACE.CMN'
C
C functions
C
	LOGICAL		PLOTTR
C
C *********************************************************************
C
C parameters
	REAL*8		X,Y
C
C workspace
	REAL*8		PREV_X,PREV_Y
	LOGICAL		THIS_IN,PREV_IN
	SAVE		PREV_X,PREV_Y	! for next call
	SAVE		PREV_IN		! for next call
	REAL*8		X1,Y1		! current position
	REAL*8		X2,Y2
	INTEGER*2	RESULT		! result of clipping
C
C *********************************************************************
C
	COORD = .TRUE.			! assume all goes well
C
C *********************************************************************
C
C Check for coordinates which are out of the map bounds - as defined by the CP
C entry. If it is then output the details to the invalid_coords file and then
C let the existing S/W deal with it as it did prior to this addition.
C
	IF(.NOT. CHECK_AREA) THEN
	   IF ( (X-XOFF).LT.MAP_XMIN .OR. (X-XOFF).GT.MAP_XMAX .OR. 
     +     (Y-YOFF).LT.MAP_YMIN .OR. (Y-YOFF).GT.MAP_YMAX) THEN
	      NINVCO = NINVCO + 1
	      IF (HAD_MAXINV .AND. NINVCO .GT. MAXNINV)THEN
	         CALL LSL_PUTMSG(I2IMAP__EXCMAXINV)
	         COORD = .FALSE.
	         NINVCO = NINVCO - 1 !Reset NINVCO to actual no in the file
	         GOTO 9000
	      END IF
	      CALL INV_OUT(X,Y)
	   END IF
	END IF
C
C *********************************************************************
C
C if we are not checking the current area, then we need not perform any
C checks
C
	IF ( .NOT.CHECK_AREA ) THEN
	   COORD = PLOTTR( X, Y )
	   GOTO 9000
	ENDIF

C
C otherwise, we must check whether this point is to be output, or
C whether it is to be ignored
C
C is this point inside the area?
C
	THIS_IN = ( X.GE.PLORIG(1) .AND. X.LE.PLLIM(1)
     &	       .AND.Y.GE.PLORIG(2) .AND. Y.LE.PLLIM(2))
C
C we must now consider whether this is a GREEN button press - that is,
C if there is a pen up to this point, we do not need to take account
C of any previous points
C
	IF ( CURR_BUTN.EQ.GREEN ) THEN
	   IF (THIS_IN) THEN
CC	      PRINT*,'G:',X-PLORIG(1),Y-PLORIG(2)
	      COORD = PLOTTR( X, Y )	! point is inside - output it
	      GOTO 8000
	   ELSE
	      CURR_BUTN = WHITE
	      GOTO 8000			! point is outside - ignore it
	   ENDIF
	ELSE
C
C	 we should never reach here with a non-linear feature,
C	 but check in any case
C
	   IF ( FC_TYP .NE. OUT_LIN ) THEN
	      CALL LSL_PUTMSG(I2IMAP__NOTGREEN)
	   ENDIF
C
	   IF(PREV_IN .AND. THIS_IN) THEN
CC	      PRINT*,'W:',X-PLORIG(1),Y-PLORIG(2)
	      COORD = PLOTTR( X, Y )	! output point normally
	   ELSE IF((.NOT. PREV_IN) .AND. THIS_IN) THEN
C
C get the point of entry
C
	      X1 = PREV_X
	      Y1 = PREV_Y
	      X2 = X
	      Y2 = Y
	      CALL DCLIP( PLORIG(1), PLORIG(2), PLLIM(1), PLLIM(2),
     &		       X1, Y1, X2, Y2, RESULT )
	      CURR_BUTN = GREEN
CC	      PRINT*,'CG:',X1-PLORIG(1),Y1-PLORIG(2)
	      COORD = PLOTTR( X1, Y1 )
	      CURR_BUTN = WHITE
CC	      PRINT*,'CW:',X2-PLORIG(1),Y2-PLORIG(2)
	      COORD = PLOTTR( X2, Y2 )
	   ELSE IF(PREV_IN .AND. (.NOT. THIS_IN)) THEN
C
C get the point of exit
C
	      X1 = PREV_X
	      Y1 = PREV_Y
	      X2 = X
	      Y2 = Y
	      CALL DCLIP( PLORIG(1), PLORIG(2), PLLIM(1), PLLIM(2),
     &		       X1, Y1, X2, Y2, RESULT )
C
C no need to change button code
C
CC	      PRINT*,'CW:',X1-PLORIG(1),Y1-PLORIG(2)
	      COORD = PLOTTR( X1, Y1 )
CC	      PRINT*,'CW:',X2-PLORIG(1),Y2-PLORIG(2)
	      COORD = PLOTTR( X2, Y2 )
	   ELSE
C
C both out - get the points of entry and exit if any
C
	      X1 = PREV_X
	      Y1 = PREV_Y
	      X2 = X
	      Y2 = Y
	      CALL DCLIP( PLORIG(1), PLORIG(2), PLLIM(1), PLLIM(2),
     &		       X1, Y1, X2, Y2, RESULT )
	      IF(RESULT .EQ. 0) THEN
	         CURR_BUTN = GREEN
CC	         PRINT*,'CG:',X1-PLORIG(1),Y1-PLORIG(2)
	         COORD = PLOTTR( X1, Y1 )
	         CURR_BUTN = WHITE
CC	         PRINT*,'CW:',X2-PLORIG(1),Y2-PLORIG(2)
	         COORD = PLOTTR( X2, Y2 )
	      ENDIF
	   ENDIF
	ENDIF
C
C *********************************************************************
C
8000	PREV_X = X
	PREV_Y = Y
	PREV_IN = THIS_IN

9000	RETURN
	END
