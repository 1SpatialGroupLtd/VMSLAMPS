C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-06-26 14:49:18.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION GET_COMMAND
C
***	IDENT	12JN89
***	MODULE	GET_COMMAND
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RJH	07-Sep-1987
C	Modified for DEC/BGAS Interface		ADT 	03-Feb-1989
C
C	CONVERT I2IMAP Utility - Get and decode command line
C
C Description
C
C
	IMPLICIT NONE
C
C Included Parameter Files
C
	INCLUDE '($STSDEF)/NOLIST'
	INCLUDE 'CMN:CHECK.PAR'		! input checks
	INCLUDE 'CMN:I2IMAPMSG.PAR'	! message definitions
C
C Local Parameters
C
	CHARACTER*(*)	IFFTEM		! IFF input file default
	PARAMETER	(IFFTEM  = 'LSL$IF:IFF.IFF')
	CHARACTER*(*)	FRTTEM		! IFF input file default
	PARAMETER	(FRTTEM  = 'LSL$FRT:.FRT')
	CHARACTER*(*)	PARTEM		! IFF input file default
	PARAMETER	(PARTEM  = 'STI_ROOT:[300010].I2IMAP_PAR')
C
C Common Blocks
C
	INCLUDE 'CMN:CALOG.CMN'		! flags
	INCLUDE 'CMN:CAINT.CMN'	
	INCLUDE 'CMN:CAREAL.CMN'	! area limits and offsets
	INCLUDE 'CMN:FILES.CMN'		! filenames
	INCLUDE 'CMN:INFACE.CMN'	! INFORMAP data
	INCLUDE 'LSL$CMNLSL:CLD.CMN'		! DCL command decoding
	INCLUDE 'LSL$CMNLSL:FILENAME.CMN'	! LSLLIB filename parse
	INCLUDE 'LSL$CMNLSL:STATUS.CMN'		! LSLLIB status flag
C
C Functions called
C
        INTEGER*4       DCL_STARTUP	! looks for command line
	INTEGER*4	DCL_FILE	! reads & parses file title
	INTEGER*4	DCL_QUAL	! looks for specified qualifier
	INTEGER*4	DCL_INT		! read integers
	INTEGER*4	DCL_REAL	! read reals
	INTEGER*4	DCL_DBL		! read double precision reals
	INTEGER*4	DCL_STR		! read strings
	INTEGER*4	PARFILN		! parse filename
C
C Local variables
C
	INTEGER*4	OK		! error return
	INTEGER*4	I		! counter
	LOGICAL*4	ABSENT		! set if file param. not found
	LOGICAL*4	LOCAL		! set if qual. is local
	LOGICAL*4	LOCNEG		! set if qual. locally negated
        LOGICAL*4	WHINGE		! set-local error reporting
	LOGICAL*4	GOT_DRAW	! got /DRAWING qualifier ?
	LOGICAL*4	GOT_PAR		! got /PARAMETER qualifier ?
	LOGICAL*4	GOT_SCHEMA	! got /SCHEMA qualifier ?
	LOGICAL*4	GOT_X		! got /OFFSET EAST keyword ?
	LOGICAL*4	GOT_Y		! got /OFFSET NORTH keyword ?
C
C Command Language Definitions
C
 	EXTERNAL	I2IMAP_CLD
C
C..............................................................................
C Initialisation for command line decoding
C
	WHINGE = .TRUE.			! report errors locally
C
C Initialise all control flags, etc.
C
	HAD_AREA   = .FALSE.		! no area selection
	HAD_FC     = .FALSE.
	HAD_LOG    = .FALSE.
	HAD_OFFSET = .FALSE.
	QUIET_FC   = .FALSE.		! complain about unknown FCs
	XOFF	   = 0.0		! offset
	YOFF	   = 0.0		! offset
C
C..............................................................................
C Get command line. DCL_STARTUP will return SS$NORMAL if all well.
C
	OK=DCL_STARTUP('I2IMAP',.FALSE.,I2IMAP_CLD,WHINGE)
	IF (.NOT.OK) GOTO 999
C
C..............................................................................
C Get input file-name 
C
	OK=DCL_FILE('IN_FILESPEC',IFFTEM,ABSENT,.FALSE.,WHINGE)
	IF(.NOT.OK) GOTO 999
C
C Transfer file-spec 
C
	IFFFIL = FILARY(1)(1:FIL_LEN(1))
	IFFLEN = FIL_LEN(1)
C
C Set up the default drawing name - the name part of the IFF filename is
C still in the filename parsing common block
C
	DRWFIL = STR_NAM(1:LEN_NAM)
	DRWLEN = MIN(LEN_NAM,NAME_MAX)
C
C..............................................................................
C /DRAWING qualifier
C
	OK=DCL_QUAL('DRAWING',GOT_DRAW,LOCAL,LOCNEG,WHINGE)
	IF(.NOT.OK) GOTO 999
C
C The drawing name is REQUIRED, therefore we must always have it
C
	IF (GOT_DRAW) THEN
	   OK=DCL_STR('DRAWING',WHINGE)
	   IF(.NOT.OK) GOTO 999
C
C Set the drawing name
C
	   DRWFIL = CARRAY(1)(1:STR_LEN(1))
	   DRWLEN = MIN(STR_LEN(1),NAME_MAX)
	ENDIF
	CALL UPCASE(DRWFIL(1:DRWLEN))
	CALL STR_TO_BUF(DRWFIL(1:DRWLEN),JDRNM,9)
C
C..............................................................................
C /SCHEMA qualifier
C
	OK=DCL_QUAL('SCHEMA',GOT_SCHEMA	,LOCAL	,LOCNEG	,WHINGE)
	IF(.NOT.OK) GOTO 999
C
C The absence of /SCHEMA is DISALLOWed and the name is REQUIRED, 
C therefore we must always have it
C
	OK=DCL_STR('SCHEMA',WHINGE)
	IF(.NOT.OK) GOTO 999
C
C Set the schema name
C
	SCHFIL = CARRAY(1)(1:STR_LEN(1))
	SCHLEN = MIN(STR_LEN(1),NAME_MAX)
	CALL UPCASE(SCHFIL(1:SCHLEN))
	CALL STR_TO_BUF(SCHFIL(1:SCHLEN),JSCHNM,9)
C
C Use it to set up the default parameter filename 
C
	OK = PARFILN(PARFIL,PARLEN,SCHFIL(1:SCHLEN),PARTEM,.FALSE.)
	IF (.NOT. OK) THEN
	   CALL LSL_PUTMSG(OK)
	   IF ((OK .AND. STS$M_SEVERITY) .NE. STS$K_WARNING) 
     &	      GO TO 999
	ENDIF
C
C..............................................................................
C /PARAMETER qualifier
C
	OK=DCL_QUAL('PARAMETER'	,GOT_PAR,LOCAL,LOCNEG,WHINGE)
	IF(.NOT.OK) GOTO 999
C
C If we have the qualifier, get the actual filename which is REQUIRED 
C so must be there
C
	IF (GOT_PAR) THEN
	   OK=DCL_FILE('PARAMETER',PARFIL(1:PARLEN),ABSENT,.FALSE.,WHINGE)
	   IF(.NOT.OK) GOTO 999
C
C Set file-spec 
C
	   PARFIL = FILARY(1)(1:FIL_LEN(1))
	   PARLEN = FIL_LEN(1)
	ENDIF
C
C Use the schema name to set up the default FRT filename 
C
	OK = PARFILN(FRTFIL,FRTLEN,SCHFIL(1:SCHLEN),FRTTEM,.FALSE.)
	IF (.NOT. OK) THEN
	   CALL LSL_PUTMSG(OK)
	   IF ((OK .AND. STS$M_SEVERITY) .NE. STS$K_WARNING) 
     &	      GO TO 999
	ENDIF
C
C..............................................................................
C /FRT qualifier
C
	OK=DCL_QUAL('FRT',HAD_FRT,LOCAL,LOCNEG,WHINGE)
	IF(.NOT.OK) GOTO 999
C
C If we have the qualifier, get the actual filename if there is one
C
	IF (HAD_FRT) THEN
	   OK=DCL_FILE('FRT',FRTFIL(1:FRTLEN),ABSENT,.FALSE.,WHINGE)
	   IF(.NOT.OK) GOTO 999
C
C Set file-spec 
C
	   IF (.NOT. ABSENT) THEN
	      FRTFIL = FILARY(1)(1:FIL_LEN(1))
	      FRTLEN = FIL_LEN(1)
	   ENDIF
	ENDIF
C
C..............................................................................
C /AREA qualifier
C
	OK=DCL_QUAL('AREA',HAD_AREA,LOCAL,LOCNEG,WHINGE)
	IF(.NOT.OK) GOTO 999
C
C	.......................................................................
C	/AREA WEST keyword
C
	IF (HAD_AREA) THEN
	   OK=DCL_QUAL('AREA.WEST',GOT_W,LOCAL,LOCNEG,WHINGE)
	   IF(.NOT.OK) GOTO 999
C
C	 Get the keyword value if present
C
	   IF (GOT_W) THEN
	      OK=DCL_REAL('AREA.WEST',WHINGE)
	      IF(.NOT.OK) GOTO 999
	      PLORIG(1) = RARRAY(1)
	   ENDIF
C
C	.......................................................................
C	/AREA SOUTH keyword
C
	   OK=DCL_QUAL('AREA.SOUTH',GOT_S,LOCAL	,LOCNEG,WHINGE)
	   IF(.NOT.OK) GOTO 999
C
C Get the keyword value if present
C
	   IF (GOT_S) THEN
	      OK=DCL_REAL('AREA.SOUTH',WHINGE)
	      IF(.NOT.OK) GOTO 999
	      PLORIG(2) = RARRAY(1)
	   ENDIF
C
C	.......................................................................
C	/AREA EAST keyword
C
	   OK=DCL_QUAL('AREA.EAST',GOT_E,LOCAL,LOCNEG,WHINGE)
	   IF(.NOT.OK) GOTO 999
C
C Get the keyword value if present
C
	   IF (GOT_E) THEN
	      OK=DCL_REAL('AREA.EAST',WHINGE)
	      IF(.NOT.OK) GOTO 999
	      PLLIM(1) = RARRAY(1)
	   ENDIF
C
C	.......................................................................
C	/AREA NORTH keyword
C
	   OK=DCL_QUAL('AREA.NORTH',GOT_N,LOCAL,LOCNEG,WHINGE)
	   IF(.NOT.OK) GOTO 999
C
C Get the keyword value if present
C
	   IF (GOT_N) THEN
	      OK=DCL_REAL('AREA.NORTH',WHINGE)
	      IF(.NOT.OK) GOTO 999
	      PLLIM(2) = RARRAY(1)
	   ENDIF
	ENDIF
C
C..............................................................................
C /OFFSET qualifier
C
	OK=DCL_QUAL('OFFSET',HAD_OFFSET	,LOCAL,LOCNEG,WHINGE)
	IF(.NOT.OK) GOTO 999
C
C	.......................................................................
C	/OFFSET EAST keyword
C
	IF (HAD_OFFSET) THEN
	   OK=DCL_QUAL('OFFSET.EAST',GOT_X,LOCAL,LOCNEG,WHINGE)
 	   IF(.NOT.OK) GOTO 999
C
C	 Get the keyword value if present
C
	   IF (GOT_X) THEN
	      OK=DCL_DBL('OFFSET.EAST',WHINGE)
	      IF(.NOT.OK) GOTO 999
	      XOFF = DBLRAY(1)
	   ENDIF
C
C	.......................................................................
C	/OFFSET NORTH keyword
C
	   OK=DCL_QUAL('OFFSET.NORTH',GOT_Y,LOCAL,LOCNEG,WHINGE)
	   IF(.NOT.OK) GOTO 999
C
C Get the keyword value if present
C
	   IF (GOT_Y) THEN
	      OK=DCL_DBL('OFFSET.NORTH',WHINGE)
	      IF(.NOT.OK) GOTO 999
	      YOFF = DBLRAY(1)
	   ENDIF
	ENDIF
C
C..............................................................................
C /MAX_INVALID qualifier
C
	OK=DCL_QUAL('MAX_INVALID',HAD_MAXINV,LOCAL,LOCNEG,WHINGE)
	IF(.NOT.OK) GOTO 999
C
C Set variable to store max number before /FC tramples over the values in the
C common block
C
	IF (HAD_MAXINV) THEN
	   OK=DCL_INT('MAX_INVALID',WHINGE)
	   IF(.NOT.OK) GOTO 999
	   MAXNINV = IARRAY(1)
	ENDIF
C
C..............................................................................
C /LOG qualifier
C
	OK=DCL_QUAL('LOG',HAD_LOG,LOCAL,LOCNEG,WHINGE)
	IF(.NOT.OK) GOTO 999
C
C..............................................................................
C /QUIET qualifier
C
	OK=DCL_QUAL('QUIET',QUIET_FC,LOCAL,LOCNEG,WHINGE)
	IF(.NOT.OK) GOTO 999
C
C..............................................................................
C /SUMMARY qualifier
C
	OK=DCL_QUAL('SUMMARY',HAD_SUMMARY,LOCAL,LOCNEG,WHINGE)
	IF(.NOT.OK) GOTO 999
C
C Set default summary filename, i.e the current directory, current drawing name
C and .SUM extension
C
	SUMFIL = 'SYS$DISK:'//DRWFIL(1:DRWLEN)//'.SUM'
	SUMLEN = DRWLEN + 13
C
C If we have the qualifier, get the actual filename 
C
	IF (HAD_SUMMARY) THEN
	   OK=DCL_FILE('SUMMARY',SUMFIL(1:SUMLEN),ABSENT,.FALSE.,WHINGE)
	   IF(.NOT.OK) GOTO 999
C
C Set file-spec, if one was specified 
C
	   IF(.NOT.ABSENT)THEN
	      SUMFIL = FILARY(1)(1:FIL_LEN(1))
	      SUMLEN = FIL_LEN(1)
	   END IF
	ENDIF
C
C..............................................................................
C /INVALID_COORDS qualifier
C
	OK=DCL_QUAL('INVALID_COORDS',HAD_INVALID,LOCAL,LOCNEG,WHINGE)
	IF(.NOT.OK) GOTO 999
C
C Set default invalid_coords filename, i.e the current directory, current 
C drawing name and .INV extension
C
	INVFIL = 'SYS$DISK:'//DRWFIL(1:DRWLEN)//'.INV'
	INVLEN = DRWLEN + 13
C
C If we have the qualifier, get the actual filename 
C
	IF (HAD_INVALID) THEN
	   OK=DCL_FILE('INVALID_COORDS',INVFIL(1:INVLEN),ABSENT,.FALSE.,WHINGE)
	   IF(.NOT.OK) GOTO 999
C
C Set file-spec, if one was specified 
C
	   IF(.NOT.ABSENT)THEN
	      INVFIL = FILARY(1)(1:FIL_LEN(1))
	      INVLEN = FIL_LEN(1)
	   END IF
	ENDIF
C
C..............................................................................
C /FC qualifier - *** NOTE - this qualifier must be done last ***
C
	OK=DCL_QUAL('FC',HAD_FC,LOCAL,LOCNEG,WHINGE)
	IF(.NOT.OK) GOTO 999
C
C Get the feature codes and leave them in the common block for later use
C
	IF (HAD_FC) THEN
	   OK=DCL_INT('FC',WHINGE)	! set-local error reporting
	   IF(.NOT.OK) GOTO 999
	ENDIF
C
C..............................................................................
C
999	GET_COMMAND = OK
	RETURN
	END
