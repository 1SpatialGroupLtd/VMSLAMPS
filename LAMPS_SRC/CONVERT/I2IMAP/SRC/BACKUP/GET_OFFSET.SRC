C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-10-21 16:26:14.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        LOGICAL FUNCTION GET_OFFSET
C
***     IDENT   06MR89
***     MODULE  GET_OFFSET
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RJH	14-Sep-1987
C
C	CONVERT I2IMAP Utility - Get area and origin offset
C
C Description
C
C
        IMPLICIT NONE
C
C Included Parameter Files
C
	INCLUDE 'CMN:I2IMAPMSG.PAR'	! message definitions
C
C Common Blocks
C
	INCLUDE 'CMN:CALOG.CMN'		! flags
	INCLUDE 'CMN:CAREAL.CMN'	! area limits and offsets
	INCLUDE 'CMN:INFACE.CMN'	! INFORMAP data
	INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'	! current position in IFF file
	INCLUDE 'LSL$CMNIFF:MD2DES.CMN'	! type 2 map descriptor
C
C Local Variables
C
	REAL		RANGE(4)	! coordinate range
	INTEGER*2	IELEN		! length of entry code
C
C Initialisation
C
	GET_OFFSET = .FALSE.		! assume failure
C
C Look for origin offset in MD type 2 if /OFFSET not specified on the 
C command line
C
	IF (.NOT. HAD_OFFSET) THEN
	   CALL IFFNXC('MD',IELEN)	! get map descriptor
	   IF (IELEN .EQ. MD2LEN) THEN	! check for type 2
	      CALL EIHR(MD2ARR,MD2LEN,1)
	      XOFF = MD2LOC(1)
	      YOFF = MD2LOC(2)
	   ELSEIF (IELEN .LT. 0) THEN	! can't find MD
	      CALL LSL_PUTMSG(I2IMAP__NOMD)
	      GOTO 999
	   ENDIF
C
C and get back to the beginning
C
	   CALL IFFRWD
	ENDIF
C
C Now look for the RA 
C
	CALL IFFNXC('RA',IELEN)		! get range
	IF (IELEN .LE. 0) THEN		! check we have it
	   CALL LSL_PUTMSG(I2IMAP__NORA)
	   GOTO 999
	ENDIF
C
C and get our default area
C
	CALL EIHRR(RANGE,4,1)
	XM1 = RANGE(1)+XOFF
	XM2 = RANGE(2)+XOFF
	YM1 = RANGE(3)+YOFF
	YM2 = RANGE(4)+YOFF
	CHECK_AREA = .FALSE.		! using everything
C
C If an area has been explicitely given, first modify the limits 
C
	IF (HAD_AREA) THEN
	   IF (GOT_W) THEN
	      XM1 = PLORIG(1)+XOFF
	   ELSE
	      PLORIG(1) = RANGE(1)
	   ENDIF
C
	   IF (GOT_S) THEN
	      YM1 = PLORIG(2)+YOFF
	   ELSE
	      PLORIG(2) = RANGE(3)
	   ENDIF
C
	   IF (GOT_E) THEN
	      XM2 = PLLIM(1)+XOFF
	   ELSE
	      PLLIM(1) = RANGE(2)
	   ENDIF
C
	   IF (GOT_N) THEN
	      YM2 = PLLIM(2)+YOFF
	   ELSE
	      PLLIM(2) = RANGE(4)
	   ENDIF
C
C and check they are sensible 
C
	   IF (PLORIG(1) .GE. PLLIM(1)) THEN
	      CALL LSL_PUTMSG(I2IMAP__BADAREA,
     &			'WEST',PLORIG(1),'EAST',PLLIM(1))
	      GOTO 999
	   ELSEIF (PLORIG(2) .GE. PLLIM(2)) THEN
	      CALL LSL_PUTMSG(I2IMAP__BADAREA,
     &			'SOUTH',PLORIG(2),'NORTH',PLLIM(2))
	      GOTO 999
	   ENDIF
C
C Now check to see if we are looking for a particular area. If so, then 
C the map must be at least partially in the required area
C
	   IF (      RANGE(2).LT.PLORIG(1) .OR. RANGE(4).LT.PLORIG(2)
     &		.OR. RANGE(1).GT.PLLIM(1)  .OR. RANGE(3).GT.PLLIM(2)
     &	      ) THEN
	      CALL LSL_PUTMSG(I2IMAP__NOTINAREA)
	      GOTO 999			! map outside required area
	   ELSEIF (    RANGE(1).GE.PLORIG(1) .AND. RANGE(3).GE.PLORIG(2)
     &		 .AND. RANGE(2).LE.PLLIM(1)  .AND. RANGE(4).LE.PLLIM(2)
     &		  ) THEN
	      CHECK_AREA  = .FALSE.	! no need to check area
	   ELSE
	      CHECK_AREA  = .TRUE.	! map not wholly in, or out
	   ENDIF
C
C Now set the area limits to the drawing limits (i.e. the same as 
C adding the offset)
C
	   PLORIG(1) = XM1
	   PLORIG(2) = YM1
	   PLLIM(1)  = XM2
	   PLLIM(2)  = YM2
	ENDIF
C
C Work out our DEL factor for this map
C
	DEL  = 1.4*(MAX( (XM2-XM1)/32000, (YM2-YM1)/19200 ))
C
C and distance for text/symbol orientation
C
	DIST = 100.0*DEL
C
C Get back to the beginning of the IFF file again
C
	CALL IFFRWD
C
C Assign function value on success
C
	GET_OFFSET = .TRUE.
C
C Return
C
999	RETURN
        END
