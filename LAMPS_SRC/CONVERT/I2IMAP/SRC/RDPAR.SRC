C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-06-16 14:42:42.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION RDPAR
C
***	IDENT	06JN89
***	MODULE	RDPAR
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created, based on IFF2IMAP RDPAR	RJH	16-Sep-1987
C	Modified for DEC/BGAS interface		ADT	03-Feb-1989
C
C	CONVERT I2IMAP Utility - Read parameter file
C
C Description
C
C	This function reads the parameter file which determines feature
C	code characteristics, etc
C
C	For ordinary errors, we attempt to continue with the file
C
C	Returns FALSE if something drastic goes wrong, TRUE otherwise
C
	IMPLICIT NONE
C
C Included Parameter Files
C
	INCLUDE 'CMN:CHECK.PAR'		    ! input checks
	INCLUDE 'CMN:I2IMAPMSG.PAR'	    ! message definitions
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'  ! LSLLIB message definitions
C
C Local Parameters
C
	BYTE		PLING		! comment delimiter
	PARAMETER	(PLING = '!')
C
C Common Blocks
C
	INCLUDE 'CMN:ATTRIBUTES.CMN'	! attribute description table
	INCLUDE 'CMN:CAINT.CMN'		! feature description table
	INCLUDE 'CMN:CALOG.CMN'		! flags
	INCLUDE 'CMN:FILES.CMN'		! filenames
	INCLUDE 'LSL$CMNLSL:CMDCOM.CMN'	! command decoding
	INCLUDE 'LSL$CMNLSL:STATUS.CMN'	! LSLLIB status flag
C
C Functions called
C
	INTEGER*4	FLROPN		! open file for reading
	INTEGER*4	FLRCLO		! close file for reading
	INTEGER*4	FLRLIN		! read in line from file
	INTEGER*4	RDCOMM		! read a command
	LOGICAL		RDCHS		! read next character
	LOGICAL		RDFDT		! read a feature description
	LOGICAL		RDADT		! read an ancillary code descr.
	LOGICAL		RDTEL		! read a TRANS_ERROR_LINES entry
	LOGICAL		RDTES		! read a TRANS_ERROR_SYMBOLS entry
	LOGICAL		RDTET		! read a TRANS_ERROR_TEXT entry
C
C Local Variables
C
	INTEGER*4	LINE		! count line numbers
	INTEGER*4	I,J		! counters
	INTEGER*4	RESULT		! command read result
	INTEGER*4	ERRCOD		! LSLLIB error code
	INTEGER*4	RETCOD		! system error code
	BYTE		CH		! character read
C
C External declaration
C
	INTEGER*4	PARCMD_CMD_TABLE
	EXTERNAL	PARCMD_CMD_TABLE
C
C...............................................................................
C Assume that everything goes well
C
	RDPAR = .TRUE.
C
C	Assume that no default definitions have been specified for unknown FCs
C
	HAD_DEF_TEXT   = .FALSE.
	HAD_DEF_LINE   = .FALSE.
	HAD_DEF_SYMBOL = .FALSE.
C
C...............................................................................
C Clear the feature code array - clear the select and symbol pen colour words
C
	NUM_FC = 0
	DO 10 I = MIN_FC,MAX_FC
	   LFEDES(1,I)=0		! nothing selected yet
	   LFEDES(5,I)=0
10	CONTINUE
C
C...............................................................................
C Clear the attribute translation table and reset datatype range flags
C
	ATTR_PTR = 0
	DO 30 J = 1,MAX_ATTR_NUM
	   DO 20 I = MIN_DTYPE,MAX_DTYPE
	      ATTR_DTR(I,J) = .FALSE.
20	   CONTINUE
30	CONTINUE
C
C...............................................................................
C Open our parameter file, read only
C
	ERRCOD = FLROPN(PARLUN,PARFIL,RETCOD)		!try to open file
C
	IF (.NOT. ERRCOD) THEN				! ** ERROR **
	   CALL LSL_PUTMSG(I2IMAP__ERROPNPAR,PARFIL(1:PARLEN))
	   CALL LSL_ADDMSG(ERRCOD)
	   IF (ERRCOD .EQ. LSL__SYSOPEN) CALL LSL_ADDMSG(RETCOD)
	   GOTO 9999
C
	ELSEIF (HAD_LOG) THEN				! ** OK **
	   CALL LSL_PUTMSG(I2IMAP__READPAR)		! say something sweet
	ENDIF
C
C...............................................................................
C Haven't got a line yet
C
	LINE = 0
C
500	LINE = LINE+1					!set line count
C
	ERRCOD = FLRLIN(,,,RETCOD)			!read line
	IF (ERRCOD .EQ. LSL__EOF) GOTO 800		!recognise end-of-line
C
	IF (.NOT. ERRCOD) THEN				!error
	   CALL LSL_PUTMSG(I2IMAP__ERRRDPAR,PARFIL(1:PARLEN),LINE)
	   CALL LSL_ADDMSG(ERRCOD)
	   IF (ERRCOD .EQ. LSL__SYSREAD) CALL LSL_ADDMSG(RETCOD)
	   GOTO 9999
	ENDIF
C
C	........................................................................
C	getting here means that a line has been read. ignore empty/comment lines
C
	CALL BSLN					!reset decoding pointer
C
C
	IF ( RDCHS( CH ) ) GOTO 500			!ignore empty lines
	IF ( CH.EQ.PLING ) THEN				!1st char was a comment
	   GOTO 500					! ignore line
	ELSE
	   CALL BSCH					! unread non-pling
	ENDIF
C
C	........................................................................
C	read the command from the line
C
	RESULT = RDCOMM(PARCMD_CMD_TABLE)		!read command
	IF (RESULT .LE. 0) GOTO 5555			!was there one?
C
	GOTO (510,520,530,540,550) RESULT		!conditional JUMPS (yuk)
C
	CALL LSL_PUTMSG(I2IMAP__UNKCMD,CMDNST)		!didnt jump.. error
	GOTO 5555
C
C...............................................................................
C	FDT - feature description
C
510	IF ( .NOT. RDFDT() ) GOTO 5555
	GOTO 500
C
C	........................................................................
C	ADT - ancillary code description
C
520	IF ( .NOT. RDADT() ) GOTO 5555
	GOTO 500
C
C	........................................................................
C	TRANS_ERR_TEXT - default text definition for undefined FCs
C
530	IF ( .NOT. RDTET() ) GOTO 5555
	HAD_DEF_TEXT = .TRUE.
	GOTO 500
C
C	........................................................................
C	TRANS_ERR_LINE - default line & curve definition for undefined FCs
C
540	IF ( .NOT. RDTEL() ) GOTO 5555
	HAD_DEF_LINE = .TRUE.
	GOTO 500
C
C	........................................................................
C	TRANS_ERR_SYMBOL - default symbol definition for undefined FCs
C
550	IF ( .NOT. RDTES() ) GOTO 5555
	HAD_DEF_SYMBOL = .TRUE.
	GOTO 500
C
C...............................................................................
C	Error decoding line
C
5555	CALL LSL_ADDMSG(I2IMAP__LINEINPAR,LINE)
	LSL_STATUS = I2IMAP__LINEINPAR		! reduce error status
	GOTO 500
C
C...............................................................................
C Close the file
C
800	ERRCOD = FLRCLO(PARLUN,RETCOD)			!try to close file
C
	IF (.NOT. ERRCOD) THEN				!ERROR
	   CALL LSL_PUTMSG(I2IMAP__ERRCLOPAR,PARFIL(1:PARLEN))
	   CALL LSL_ADDMSG(ERRCOD)
	   IF (ERRCOD .EQ. LSL__SYSCLOSE) CALL LSL_ADDMSG(RETCOD)
C
	ELSE						!SUCCESS
	   GOTO 9000
	ENDIF
C
C...............................................................................
C Failure
C
9999	RDPAR = .FALSE.					!set return status
C
C...............................................................................
9000	RETURN
	END
