	LOGICAL FUNCTION RDFDT
C
***	IDENT	06MR89
***	MODULE	RDFDT
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created, based on IFF2IMAP RDFDT	RJH	17-Sep-1987
C
C	CONVERT I2IMAP Utility - Read FDT entry
C
C Description
C
C	Reads a feature description table entry
C
C	Expects the FC       just read to be in INTARG(1) in /CMDCOM/
C		the datatype just read to be in INTARG(2) in /CMDCOM/
C		the linetype just read to be in INTARG(3) in /CMDCOM/
C
C	Returns FALSE if something goes wrong with a command line, 
C	TRUE otherwise
C
	IMPLICIT NONE
C
C Included Parameter Files
C
	INCLUDE 'CMN:CHECK.PAR'		    ! input checks
	INCLUDE 'CMN:I2IMAPMSG.PAR'	    ! message definitions
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'  ! LSLLIB message definitions
C
C Common Blocks
C
	INCLUDE 'CMN:CALOG.CMN'		! flags
	INCLUDE 'CMN:CAINT.CMN'		! feature description table
	INCLUDE 'LSL$CMNLSL:CLD.CMN'	! DCL command decoding
	INCLUDE 'LSL$CMNLSL:CMDCOM.CMN'	! command decoding
	INCLUDE 'LSL$CMNLSL:EXCEPTION.CMN'	! number reading errors
C
C Functions called
C
	LOGICAL		RDINT		! reads integer
C
C Local Variables
C
	INTEGER*4	I		! counter
	INTEGER*4	PENNUM		! pen number
	INTEGER*4	LOW		! lowest height in range
	INTEGER*4	HIGH		! highest height in range
	INTEGER*4	CAT		! text category
	LOGICAL		NOTHING		! not a symbol ?
C
C Assume that everything goes well
C
	RDFDT = .TRUE.
C
C and get ready for a new FC
C
	NUM_FC = NUM_FC + 1
	NUM_FC_FDT = NUM_FC_FDT + 1
C
C We have already read the FC so check that it is in range and save it
C
	IF ( INTARG(1).LT.0 .OR. INTARG(1).GT.MAX_WORD ) THEN
	   CALL LSL_PUTMSG(I2IMAP__BADFC,INTARG(1))
	   GOTO 9999
	ELSE
	   LFEDES(2,NUM_FC) = INTARG(1)
	ENDIF
C
C Do the same for the datatype
C
	IF ( INTARG(2).LT.MIN_DTYPE .OR. INTARG(2).GT.MAX_DTYPE ) THEN
	   CALL LSL_PUTMSG(I2IMAP__BADDTYPE,INTARG(2))
	   GOTO 9999
	ELSE
	   LFEDES(3,NUM_FC) = INTARG(2)
	ENDIF
C
C and for the linetype
C
	IF ( INTARG(3).LT.MIN_LTYPE .OR. INTARG(3).GT.MAX_LTYPE ) THEN
	   CALL LSL_PUTMSG(I2IMAP__BADLTYPE,INTARG(3))
	   GOTO 9999
	ELSE
	   LFEDES(4,NUM_FC) = INTARG(3)
	ENDIF
C
C Now check for a pen number by assuming we have a height range
C
	NOTHING = RDINT(LOW)
	IF (NOTHING) THEN
	   IF ((ERRNUM .NE. LSL__UNEXPEOL) .AND. 
     &	       (ERRNUM .NE. LSL__NONUM)) THEN
	      GOTO 410
	   ENDIF
	ELSE
	   NOTHING = RDINT(HIGH)
C
C Nothing else, so it must be a pen number unless there was an exception
C
	   IF (NOTHING) THEN
	      IF ((ERRNUM .EQ. LSL__UNEXPEOL) .OR. 
     &	          (ERRNUM .EQ. LSL__NONUM)) THEN
	         PENNUM = LOW
	         IF ( PENNUM.LT.MIN_PEN .OR. PENNUM.GT.MAX_PEN ) THEN
	            CALL LSL_PUTMSG(I2IMAP__BADSYMPEN,PENNUM)
	            GOTO 9999
	         ELSE
	            LFEDES(5,NUM_FC) = PENNUM
	         ENDIF
	      ELSE
	         GOTO 410
	      ENDIF
C
C Otherwise we have a height range, but check it first
C
	   ELSEIF (LOW .LT. 0) THEN
	      CALL LSL_PUTMSG(I2IMAP__BADTEXTHT,LOW)
	      GOTO 9999
	   ELSEIF (HIGH .LT. 0) THEN
	      CALL LSL_PUTMSG(I2IMAP__BADTEXTHT,HIGH)
	      GOTO 9999
	   ELSE
	      LFEDES(LF_LOW,NUM_FC) = LOW
	      LFEDES(LF_HIGH,NUM_FC) = HIGH
C
C Now try for the category
C
	      NOTHING = RDINT(CAT)
	      IF (NOTHING) THEN
	         IF ((ERRNUM .NE. LSL__UNEXPEOL) .AND. 
     &	             (ERRNUM .NE. LSL__NONUM)) THEN
	            GOTO 410
	         ENDIF
	      ELSEIF ( CAT.LT.MIN_CAT .OR. CAT.GT.MAX_CAT ) THEN
	         CALL LSL_PUTMSG(I2IMAP__BADTEXTCAT,CAT)
	         GOTO 9999
	      ELSE
	         LFEDES(LF_CAT,NUM_FC) = CAT
	      ENDIF
	   ENDIF
	ENDIF
	GOTO 500
C
C Error reading integer value
C
410	CALL LSL_PUTMSG(ERRNUM)
	IF (ERRNUM .EQ. LSL__HADEXCP) CALL LSL_ADDMSG(LSL_EXCP)
	GOTO 9999
C
C Mark the feature code as selected - note that selected FC's not in 
C the FDT are ignored
C
500	IF (HAD_FC) THEN
	   DO 510 I=1,NUMINT
	      IF (IARRAY(I) .EQ. LFEDES(2,NUM_FC)) LFEDES(1,NUM_FC) = 1
510	   CONTINUE
	ELSE
	   LFEDES(1,NUM_FC) = 1
	ENDIF
C
C and finish
C
	GOTO 9000		! success
C
C Errors
C
9999	RDFDT = .FALSE.			! failure
	NUM_FC = NUM_FC - 1
	NUM_FC_FDT = NUM_FC_FDT - 1	! no need to unset anything else
C
C Return
C
9000	RETURN
	END
