	PROGRAM AA2I
C
***	MODULE	AA2I
***	IDENT	28MR91
C
C	Copyright Laser-Scan Ltd., Cambridge, England.
C	Author	S Hancock			25-Mar-1991
C
C	To convert AA MAP format to IFF
C
CMOD	Standardised J Barber			27-Mar-1991
C
	IMPLICIT NONE
C
***	COMMON/LSL$CMNLSL:EXPC/
***	COMMON/LSL$CMNLSL:TXTC/
***	COMMON/LSL$CMNIFF:MHDEF/
***	COMMON/LSL$CMNIFF:MD2DES/
***	COMMON/LSL$CMNIFF:IFFHAN/
C
	INCLUDE		'LSL$CMNLSL:CLD.CMN'
	INCLUDE		'LSL$CMNLSL:FILENAME.CMN'
	INCLUDE		'LSL$CMNLSL:STATUS.CMN'
	INCLUDE		'HERE:LOOKUP.CMN'
	INCLUDE		'HERE:AA2I.CMN'
	INCLUDE		'HERE:AA2IMSG.PAR'
C
	EXTERNAL	 AA2I_CLD
C
C Functions
	INTEGER 	LSL_INIT
	INTEGER 	DCL_STARTUP		!Gets parsed command line
	INTEGER 	DCL_FILE		!Reads and parses command
	INTEGER 	DCL_QUAL		!Reads and parses qualifier
	INTEGER 	DCL_INT			!Reads and parses integer
	INTEGER		FLROPN			!Opens file for read
	INTEGER		IFFCREATE		!Creates new IFF file
C	LOGICAL		RDPAR			!Read parameter file
C
C Local
	INTEGER		OK
	LOGICAL		ABSENT
	LOGICAL		LOCAL
	LOGICAL		LOCNEG
C
	INTEGER		DEF_AC_NUMBER		!Default AC_NUMBER
	PARAMETER	(DEF_AC_NUMBER = 1)
	INTEGER		DEF_LAY_NUMBER		!Default LAY_NUMBER
	PARAMETER	(DEF_LAY_NUMBER = 1000)
C
	INTEGER 	I,J,K,M,N
	INTEGER		LEN
	INTEGER*4	NPTS
	INTEGER*4	IRET
	INTEGER*4	NF		! number of features
C
	REAL*8 		X0,Y0,X,Y
	REAL 		H,H1
	REAL 		Z(2,1000)
	REAL*4		XMIN,YMIN
	REAL*4		XMAX,YMAX
	REAL*4		ZOUT(2,1000)
	REAL*4		CP(4,4)
	REAL*4		CC(2,10)
C
	CHARACTER*4 	FLAG
	CHARACTER*80	IN
	CHARACTER*80	OPFILE
	CHARACTER*8	CODE_NAME(1000)
C
	BYTE		NS(2)
C
	INTEGER*2	NNS
	INTEGER*2	IECODE		! entry code
	INTEGER*2	IELEN		! length of IECODE
	INTEGER*2	IOVNUM		! output overlay number
	INTEGER*2	IOVS		! 
	INTEGER*4	CPPOS		! CP position
	INTEGER*4	RAPOS		! RA position
	INTEGER*4	NOPOS		! NO position
	INTEGER*4	EOPOS		! EO pointer
	INTEGER*2	FSTAT(4)	! from FS entry
	INTEGER*2	OFC
	INTEGER 	NC,CODE_FC(1000)
C
	DATA		CC/20*0.0/
	DATA		CP/16*0.0/
	DATA		NNS/2/
	DATA NS/' ',0/
C
	CALL LSL_INIT
C
C Initialise LSLLIB and DCL decoding
C
	HAD_PAR        = .FALSE.	! Had /PARAMETER file qual
	HAD_FRT        = .FALSE.	! Had /FRT file qual
C	HAD_OBJ        = .FALSE.	! Had /OBJECT_AC qualifier
C	HAD_AREA       = .FALSE.	! Had /AREA_LAYER qualifier
	RANGE_WRONG    = .FALSE.	! AA range wrong...
	RANGE_SET      = .FALSE.	! coordinates used in IFF range
	OUT_RANGE_MESS = .FALSE.	! and message output
C
	NUMFEAT = 0
C
	OK = DCL_STARTUP('AA2I',.FALSE.,AA2I_CLD,.TRUE.)
	IF (.NOT.OK) GOTO 999
C
C Get input filename
C
	OK = DCL_FILE('P1','LSL$AA:AA.MAP',ABSENT,.FALSE.,.TRUE.)
	IF (.NOT.OK) GOTO 999
C
	AAFIL = FILARY(1)
	AALEN = FIL_LEN(1)
C
C	CALL EXPFLN(AAFIL,AALEN)
C
C Get output filename
C
	OK = DCL_FILE('P2','LSL$IF:IFF.IFF',ABSENT,.FALSE.,.TRUE.)
	IF (.NOT.OK) GOTO 999
C
	IFFFIL = FILARY(1)
	IFFLEN = FIL_LEN(1)
C
C
C	CALL EXPFLN(IFFFIL,IFFLEN)
C
C Get /OBJECT_AC=n qualifier
C
C	OK = DCL_QUAL('OBJECT_AC',HAD_OBJ,LOCAL,LOCNEG,.TRUE.)
C	IF (.NOT.OK) GOTO 999
C
C	IF (HAD_OBJ) THEN
C	   OK = DCL_INT('OBJECT_AC', .TRUE.)
C	   IF (.NOT.OK) GOTO 999
C
C	   IF (NUMINT.EQ.1) THEN
C	      AC_NUMBER = IARRAY(1)
C	   ELSE
C	      AC_NUMBER = DEF_AC_NUMBER
C	   ENDIF
C	ENDIF
C
C Get /AREA_LAYER=n qualifier
C
C	OK = DCL_QUAL('AREA_LAYER',HAD_AREA,LOCAL,LOCNEG,.TRUE.)
C	IF (.NOT.OK) GOTO 999
C
C	IF (HAD_AREA) THEN
C	   OK = DCL_INT('AREA_LAYER', .TRUE.)
C	   IF (.NOT.OK) GOTO 999
C
C	   IF (NUMINT.EQ.1) THEN
C	      LAY_NUMBER = IARRAY(1)
C	   ELSE
C	      LAY_NUMBER = DEF_LAY_NUMBER
C	   ENDIF
C	ENDIF
C
C Get /FRT=file qualifier
C
	OK = DCL_QUAL('FRT',HAD_FRT,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.OK) GOTO 999
C
	IF (HAD_FRT) THEN
C Get parameter filename
C
	   OK = DCL_FILE('FRT','LSL$FRT:AA.FRT',
     &					ABSENT,.FALSE.,.TRUE.)
	   IF (.NOT.OK) GOTO 999
C
	   FRTFIL = FILARY(1)
	   FRTLEN = FIL_LEN(1)
C
C	   CALL EXPFLN(FRTFIL,FRTLEN)
	ENDIF
C
C Get /PARAMETER_FILE=file qualifier
C
	OK = DCL_QUAL('PARAMETER_FILE',HAD_PAR,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.OK) GOTO 999
C
	IF (HAD_PAR) THEN
C Get parameter filename
C
	   OK = DCL_FILE('PARAMETER_FILE','LSL$LOOKUP:AA.PAR',
     &					   ABSENT,.FALSE.,.TRUE.)
	   IF (.NOT.OK) GOTO 999
C
	   PARFIL = FILARY(1)
	   PARLEN = FIL_LEN(1)
C
C	   CALL EXPFLN(PARFIL,PARLEN)
	ENDIF
C
C Open input file
C
	OK = FLROPN(AALUN, AAFIL(1:AALEN))
	IF (.NOT.OK) THEN
	   CALL LSL_PUTMSG(AA2I__UNAOPNAA,AAFIL(1:AALEN))
	   CALL LSL_ADDMSG(OK)
	   GOTO 999
	ENDIF
C
C Open, read and close parameter file and FRT file (required 
C for PARAMETER file)
C
C	IF (HAD_PAR) THEN
C	   OK = RDPAR()
C	   IF (.NOT.OK) GOTO 1000
C	ENDIF
C
C Create output file
C
	OK = IFFCREATE(IFFLUN, IFFFIL(1:IFFLEN))
	IF (.NOT.OK) THEN
	   CALL LSL_PUTMSG(AA2I__UNACREIFF,IFFFIL(1:IFFLEN))
	   CALL LSL_ADDMSG(OK)
	   GOTO 1000
	ENDIF
C

	OPEN(UNIT=1,FILE='AAFIL',STATUS='OLD')
	NC=0
4	READ(1,8000,END=6)CODE_NAME(NC+1),CODE_FC(NC+1)
8000	FORMAT(A8,I4)
	IF(NC.LT.1000)THEN
	    NC=NC+1
	    GOTO 4
	ENDIF
6	CLOSE(UNIT=1)
C
	XMIN=1.0E36
	XMAX=-1.0E36
	YMIN=1.0E36
	YMAX=-1.0E36
C
	CALL LIB$GET_INPUT(OPFILE,'File ',LEN)
	OPEN(UNIT=1,FILE=OPFILE//'.MAP',STATUS='OLD')
C
	CALL IFFOPN(2,OPFILE(1:LEN)//'.IFF')
C
	NF=0
C
C write NO to output file
C
	RAPOS=LPOSE
	CALL IFFRA(RANGE)
	CALL IFFMH(MHARR,MHLEN)
	CALL IFFMD(MD2ARR,MD2LEN)
	CALL IFFNS(NS)
	CALL IFFCC(CC)
	CPPOS=LPOSE
	CALL IFFCP(CP)
	NOPOS=LPOSE
	CALL IFFNO(1,IOVS,EOPOS)	
C
10	READ(1,9000,END=90)IN
9000	FORMAT(A)
11	CONTINUE
	IF(IN(1:7).EQ.'SEGMENT')THEN
C extract name...
	   GOTO 10
	ELSE IF(IN(1:4).EQ.'CODE')THEN
	   N=0
	   OFC=-1
	   DO 15 I=1,NC
	   IF(IN(6:13).EQ.CODE_NAME(I))THEN
	      OFC=CODE_FC(I)
	      GOTO 20
	   ENDIF
15	   CONTINUE
	   PRINT*,'Unknown code: ',IN(6:13)
20	   READ(1,9000,END=25)IN
	   READ(IN,9001,ERR=25)X,Y
9001	   FORMAT(F7.3,1X,F7.3)
	   X=1000.0*X
	   Y=1000.0*Y
	   IF(X.LT.XMIN)XMIN=X
	   IF(X.GT.XMAX)XMAX=X
	   IF(Y.LT.YMIN)YMIN=Y
	   IF(Y.GT.YMAX)YMAX=Y
	   N=N+1
	   Z(1,N)=X
	   Z(2,N)=Y
	   GOTO 20
C
C output new feature
C
25	   NF=NF+1
	   IF(OFC.GE.0)CALL PUTFTR(1,N,NF,OFC,Z,H)
	   GOTO 11
	ELSE
	   GOTO 10
	ENDIF
90	CALL IFFEO
	CALL IFFEM
	CALL IFFEJ
C
	RANGE(1)=XMIN
	RANGE(2)=XMAX
	RANGE(3)=YMIN
	RANGE(4)=YMAX
	CALL IFFPKE(IECODE,IELEN,RAPOS)
	CALL EIHWR(RANGE,4,1)
C NW
	CP(1,1)=RANGE(1)
	CP(2,1)=RANGE(4)
	CP(3,1)=RANGE(1)
	CP(4,1)=RANGE(4)
C SW
	CP(1,2)=RANGE(1)
	CP(2,2)=RANGE(3)
	CP(3,2)=RANGE(1)
	CP(4,2)=RANGE(3)
C SE
	CP(1,3)=RANGE(2)
	CP(2,3)=RANGE(3)
	CP(3,3)=RANGE(2)
	CP(4,3)=RANGE(3)
C NE
	CP(1,4)=RANGE(2)
	CP(2,4)=RANGE(4)
	CP(3,4)=RANGE(2)
	CP(4,4)=RANGE(4)
C
	CALL IFFPKE(IECODE,IELEN,CPPOS)
	CALL EIHWR(CP,16,1)
C
	CALL IFFCLO(2)


C All done
C
1000	CALL FLRCLO(AALUN)
C
999	CALL LSL_EXIT(OK)
C
	STOP
	END
C



