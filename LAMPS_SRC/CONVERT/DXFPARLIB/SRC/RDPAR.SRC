	LOGICAL FUNCTION RDPAR
C
***	IDENT	03JL95
***	MODULE	RDPAR
C
C	Copyright Laser-Scan Ltd., Cambridge, England.
C
C	Author:	 Paul Pan				21-Feb-1990 
C
CMOD1413 Add TEXT SIZE lookup to parameter file	     JB 20-Sep-1994
C
C	CONVERT I2DXF/DXF2I Utility - to read parameter file
C
C Description
C
C	This function reads the parameter file which relates 
C	DXF layers and entities with IFF feature codes,
C	and point sizes to millimetres.
C
	IMPLICIT NONE
C
C Included parameter files
	INCLUDE 'LSL$CMNDXFPAR:DXFPARMSG.PAR'	! message definitions
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'	! LSLLIB message definitions
C
C Local parameters
	BYTE		PLING			! comment delimiter
	PARAMETER	(PLING = '!')
C
C Common blocks
	INCLUDE 'LSL$CMNDXFPAR:LOOKUP.CMN'	! lookup tables common blocks
	INCLUDE 'LSL$CMNLSL:CMDCOM.CMN'		! command decoding
C
C Functions called
	INTEGER*4	FLROPN		! open file
	INTEGER*4	FLRCLO		! close file
	INTEGER*4	FLRLIN		! read in a line from file
	INTEGER*4	RDCOMM		! read a command
	LOGICAL		RDCHS		! read next character
	LOGICAL		RDLAYER		! read layer entry
	LOGICAL		RDENTITY	! read entity entry
	LOGICAL		RDTEXT		! read text entry
C
C Local variables
	INTEGER		I
	LOGICAL		OK
	INTEGER*4	RESULT		! command read result
	INTEGER*4	RETCOD		! system error code
	BYTE		SINGCHAR	! character read
C
C External declaration
	INTEGER*4	DXFPAR_CMD_TABLE
	EXTERNAL	DXFPAR_CMD_TABLE
C
C---------------------------------------------------------------------
C Open PARAMETER file, read only
C
	RDPAR = FLROPN(PARLUN,PARFIL(1:PARLEN),RETCOD)
C
C If unsuccessful output message, and leave
C
	IF (.NOT.RDPAR) THEN
	   CALL LSL_PUTMSG(DXFPAR__ERROPNPAR,PARFIL(1:PARLEN))
	   GOTO 999
	ENDIF
C
C let them know what we are doing if that's what they'd like
C
	IF (HAD_LOG) CALL LSL_PUTMSG(DXFPAR__OPNPAR,PARFIL(1:PARLEN))
C
C Setup initial counters
C
	LINE 	   = 0
	TOTDXFLAY  = 0
	TOTDXFTEXT = 0
	CURRLAYIND = 0
	CURRENTIND = 0
	CURRSYMIND = 0
	CURRLININD = 0
	CURRTEXIND = 0
	CURREXPIND = 0			! no. of BLOCK expands
	CURTEXTIND = 0			! no. of TEXT SIZE entries
C
	DO 22 I = 1,MAXFONT
22	HAD_POINT_SIZES(I) = .FALSE.	! no TEXT SIZE entries yet
C
C Get a line
C
8000	CONTINUE
	LINE = LINE + 1
C
	RDPAR = FLRLIN(,,,RETCOD)
C
	IF (RDPAR.EQ.LSL__EOF) THEN
	   RDPAR = LSL__NORMAL		! not an error
	   GOTO 9998
	ENDIF
C
C If unsuccessful, output message, and leave
C
	IF (.NOT.RDPAR) THEN
	   CALL LSL_PUTMSG(DXFPAR__ERRRDPAR,LINE)
	   CALL LSL_ADDMSG(RDPAR)
	   GOTO 9998
	ENDIF
C
C Now reset the decoding pointer to the start of the line
C
	CALL BSLN
C
C Check for a comment delimiter - ignore an empty line
C
	IF (RDCHS(SINGCHAR)) GOTO 8000
C
	IF (SINGCHAR.EQ.PLING) THEN
	   GOTO 8000			! ignore line
	ELSE
	   CALL BSCH			! unread non-pling
	ENDIF
C
C Now, read the command from the line, turning off messages
C
	NOMESS = .TRUE.
	RESULT = RDCOMM(DXFPAR_CMD_TABLE)
C
C and check that there was one, if not, output message and read 
C next line
C
	IF (RESULT.EQ.0) THEN
	   CALL LSL_PUTMSG(DXFPAR__UNKPRICMD,LINE)
	   GOTO 8000
	ENDIF
C
C Despatch according to command
C
	GOTO (7000,7001,7002) RESULT
C
C IGNORE unknown command, output warning message, and continue
C
	CALL LSL_PUTMSG(DXFPAR__UNKPRICMD,LINE)
        GOTO 8000
C
C Reading LAYER
C
7000	CONTINUE
C
	OK = RDLAYER()
	IF (.NOT.OK) THEN
	   RDPAR = DXFPAR__PARFILERR
	   CALL LSL_PUTMSG(DXFPAR__PARFILERR)
	   GOTO 9998
	ENDIF
C
        GOTO 8000
C
C Reading ENTITY
C
7001	CONTINUE
C
	OK = RDENTITY()
	IF (.NOT.OK) THEN
	   RDPAR = DXFPAR__PARFILERR
	   CALL LSL_PUTMSG(DXFPAR__PARFILERR)
	   GOTO 9998
	ENDIF
C
        GOTO 8000
C
C Reading TEXT
C
7002	CONTINUE
C
	OK = RDTEXT()
	IF (.NOT.OK) THEN
	   RDPAR = DXFPAR__PARFILERR
	   CALL LSL_PUTMSG(DXFPAR__PARFILERR)
	   GOTO 9998
	ENDIF
C
        GOTO 8000
C
C Close the PARAMETER file
C
9998	CONTINUE
C
C report statistics
C
        IF (HAD_LOG) THEN
           CALL LSL_PUTMSG(DXFPAR__LAYERFND,CURRLAYIND)
           CALL LSL_PUTMSG(DXFPAR__ENTITYFND,CURRENTIND)
           CALL LSL_PUTMSG(DXFPAR__BLOCKFND,CURRSYMIND)
           CALL LSL_PUTMSG(DXFPAR__LTYPEFND,CURRLININD)
           CALL LSL_PUTMSG(DXFPAR__STYLEFND,CURRTEXIND)
        ENDIF
C
	CALL FLRCLO(PARLUN,RETCOD)
C
999	RETURN
	END
C
