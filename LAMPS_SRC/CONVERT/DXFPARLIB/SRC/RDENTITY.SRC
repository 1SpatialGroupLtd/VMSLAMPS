C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-10-04 16:43:30.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION RDENTITY
C
***	IDENT	04OC94
***	MODULE	RDENTITY
C
C	Copyright Laser-Scan Ltd., Cambridge, England.
C
C	Author:	 Paul Pan			22-Feb-1990 
C
C	CONVERT DXFPARLIB Utility - Read ENTITY entry
C	Reads an entity description table entry
C
C	Expects the secondary command number just read to be in 
C		SECMDN    in /CMDCOM/
C
CMOD1004	 Jon Barber			13-Jun-1991
C		 Introduce EXPAND entity to parameter to signal
C		 that the BLOCK should be expanded to the IFF file
C		 with the supplied x,y,z offsets and scalings
C
C		 Format:
C			ENTITY block_name x y z xscale yscale zscale
C
CMOD1247 Do not moan about negative colours	JB 1-Jul-1993
C
CMOD1413 Add optional font number to any ENTITY TEXT line in the
C	 parameter file:
C
C	ENTITY TEXT style col fc [font]
C
C
	IMPLICIT NONE
C
C Included parameter files
	INCLUDE 'LSL$CMNDXFPAR:DXFPARMSG.PAR' 	! message definitions
C
C Common blocks
	INCLUDE 'LSL$CMNDXFPAR:LOOKUP.CMN'	! lookup tables common blocks
	INCLUDE 'LSL$CMNLSL:CMDCOM.CMN'		! command decoding
C
C Functions called
	LOGICAL		READ_NAME		! read attribute name
	LOGICAL		RDREAL			! read real value
	LOGICAL		RDINT			! read integer value
	LOGICAL		RDCHS			! read char value
C
C Local variables
	LOGICAL		OK			! OK?
	LOGICAL		ERRCOD			! OK?
	CHARACTER*30	NAME_BUF		! an attribute name
	INTEGER*4	NAME_LEN		! its length
	INTEGER*2	COL_BUF			! colour buffer
	INTEGER*2	FC_BUF			! FC buffer
	INTEGER*2	FONT			! font number
	INTEGER		I			! local counter
	BYTE		CHAR			! character for rdchs
C
	REAL		X,Y,Z
	REAL		XSCALE,YSCALE,ZSCALE
C
C---------------------------------------------------------------------
C Assume that everything goes well
C
	RDENTITY = .TRUE.
C
C---------------------------------------------------------------------
C Test if the secondary command is valid or not
C
	IF (SECMDN.LT.1 .OR. SECMDN.GT.DXFNUMENT) THEN
	   CALL LSL_PUTMSG(DXFPAR__UNKSECCMD,LINE)
	   GOTO 9000
        ENDIF
C
C---------------------------------------------------------------------
C Despatch according to secondary command
C
	GOTO (6000,6008,6002,6003,6004,6005,6006,6007,6009,6001) 
     &	   SECMDN
C
C---------------------------------------------------------------------
C DXF POINT 
C
6001	CONTINUE                        ! point
	CURRENTIND = CURRENTIND + 1
	DXFENTTYP(CURRENTIND) = SECMDN
C
        ENTCOLOUR(CURRENTIND) = INTARG(1)
        IFFFCCODE(CURRENTIND) = INTARG(2)
	GOTO 9000
C
C---------------------------------------------------------------------
C DXF BLOCK INSERT
C
6007	CONTINUE                        ! insert
	CURRENTIND = CURRENTIND + 1
	DXFENTTYP(CURRENTIND) = SECMDN
C
	OK = READ_NAME(NAME_BUF,NAME_LEN)
	IF (.NOT.OK) GOTO 9001
C
	ERRCOD = RDINT(COL_BUF)
	IF (ERRCOD) GOTO 9001		! .OR. COL_BUF.LT.0
C

	ERRCOD = RDINT(FC_BUF)
	IF (ERRCOD .OR. FC_BUF.LT.0) GOTO 9001
C
	DXFENTNAM(CURRENTIND) = NAME_BUF
	DXFENTLEN(CURRENTIND) = NAME_LEN
        ENTCOLOUR(CURRENTIND) = COL_BUF
        IFFFCCODE(CURRENTIND) = FC_BUF
C
C test for the uniqueness of the current symbol type
C
	IF (CURRSYMIND.EQ.0) THEN
	   CURRSYMIND = CURRSYMIND + 1
	   DXFSYMBOL(CURRSYMIND) = CURRENTIND
	   GOTO 9000
C
	ELSE
	   DO 7000 I = 1,CURRSYMIND
              IF (DXFENTLEN(DXFSYMBOL(I)).EQ.NAME_LEN) THEN
                 IF (DXFENTNAM(DXFSYMBOL(I))(1:NAME_LEN).EQ.
     &			NAME_BUF(1:NAME_LEN)) GOTO 9000
	      ENDIF
7000	   CONTINUE
C
	   CURRSYMIND = CURRSYMIND + 1
	   DXFSYMBOL(CURRSYMIND) = CURRENTIND
	   GOTO 9000
	ENDIF
C
C---------------------------------------------------------------------
C DXF BLOCK EXPAND
C
6009	CONTINUE                        ! expand
C
	OK = READ_NAME(NAME_BUF,NAME_LEN)
	IF (.NOT.OK) GOTO 9001
C
	X = 0
	ERRCOD = RDREAL(X)
	IF (ERRCOD) GOTO 9001
C
	Y = 0
	ERRCOD = RDREAL(Y)
	IF (ERRCOD) GOTO 9001
C
	Z = 0
	ERRCOD = RDREAL(Z)
	IF (ERRCOD) GOTO 9001
C
	XSCALE = 1
	ERRCOD = RDREAL(XSCALE)
	IF (ERRCOD) GOTO 9001
	IF (XSCALE.LE.0) XSCALE = 1
C
	YSCALE = 1
	ERRCOD = RDREAL(YSCALE)
	IF (ERRCOD) GOTO 9001
	IF (YSCALE.LE.0) YSCALE = 1
C
	ZSCALE = 1
	ERRCOD = RDREAL(ZSCALE)
	IF (ERRCOD) GOTO 9001
	IF (ZSCALE.LE.0) ZSCALE = 1
C
C test for the uniqueness of the current symbol type
C
	IF (CURREXPIND.EQ.0) GOTO 7004		! first expand
C
	DO 7003 I = 1,CURREXPIND
           IF (EXPANDLEN(I).EQ.NAME_LEN) THEN
              IF (EXPANDNAM(I)(1:NAME_LEN) .EQ.
     &				NAME_BUF(1:NAME_LEN)) GOTO 9000
	   ENDIF
7003	CONTINUE
C
7004	CONTINUE
C
	CURREXPIND = CURREXPIND + 1
	EXPANDLEN(CURREXPIND) = NAME_LEN
	EXPANDNAM(CURREXPIND) = NAME_BUF(1:NAME_LEN)
        EXPAND_XOFF(CURREXPIND) = X
        EXPAND_YOFF(CURREXPIND) = Y
        EXPAND_ZOFF(CURREXPIND) = Z
        EXPAND_XSCL(CURREXPIND) = XSCALE
        EXPAND_YSCL(CURREXPIND) = YSCALE
        EXPAND_ZSCL(CURREXPIND) = ZSCALE
C
	GOTO 9000
C
C---------------------------------------------------------------------
C DXF LINE,CIRCLE,ARC,TRACE,SOLID and POLYLINE
C
6000	CONTINUE			! line
6002	CONTINUE                        ! circle
6003	CONTINUE                        ! arc
6004	CONTINUE			! trace
6005	CONTINUE                        ! solid
6008	CONTINUE                        ! polyline
C
	CURRENTIND = CURRENTIND + 1
	DXFENTTYP(CURRENTIND) = SECMDN
C
	OK = READ_NAME(NAME_BUF,NAME_LEN)
	IF (.NOT.OK) GOTO 9001
C
	ERRCOD = RDINT(COL_BUF)
	IF (ERRCOD) GOTO 9001		! .OR. COL_BUF.LT.0
C
	ERRCOD = RDINT(FC_BUF)
	IF (ERRCOD .OR. FC_BUF.LT.0) GOTO 9001
C
	DXFENTNAM(CURRENTIND) = NAME_BUF
	DXFENTLEN(CURRENTIND) = NAME_LEN
        ENTCOLOUR(CURRENTIND) = COL_BUF
        IFFFCCODE(CURRENTIND) = FC_BUF
C
C test for the uniqueness of the current line type
C
	IF (CURRLININD.EQ.0) THEN
	   CURRLININD = CURRLININD + 1
	   DXFLINTYP(CURRLININD) = CURRENTIND
	   GOTO 9000
C
	ELSE
	   DO 7001 I = 1,CURRLININD
              IF (DXFENTLEN(DXFLINTYP(I)).EQ.NAME_LEN) THEN
                 IF (DXFENTNAM(DXFLINTYP(I))(1:NAME_LEN).EQ.
     &			NAME_BUF(1:NAME_LEN)) GOTO 9000
	      ENDIF
7001	   CONTINUE
C
	   CURRLININD = CURRLININD + 1
	   DXFLINTYP(CURRLININD) = CURRENTIND
	   GOTO 9000
	ENDIF
C
C---------------------------------------------------------------------
C DXF TEXT
C
6006	CONTINUE           			! text
C
	CURRENTIND = CURRENTIND + 1
	DXFENTTYP(CURRENTIND) = SECMDN
C
	OK = READ_NAME(NAME_BUF,NAME_LEN)
	IF (.NOT.OK) GOTO 9001
C
	ERRCOD = RDINT(COL_BUF)
	IF (ERRCOD) GOTO 9001			! .OR. COL_BUF.LT.0
C
	ERRCOD = RDINT(FC_BUF)
	IF (ERRCOD .OR. FC_BUF.LT.0) GOTO 9001
C
C Try to read a char
C
	OK = RDCHS(CHAR)			! try to read a char
C
	IF (OK) THEN				! no char
	   GOTO 8001
C
	ELSE					! found a char
	  CALL BSCH				! unread it
	  ERRCOD = RDINT(FONT)			! get the font
C
	  IF (.NOT.ERRCOD) THEN			! got font number
	    FONTNUMBER(CURRENTIND) = FONT	! store in memory
C
	    IF (FONT.LE.0) THEN			! test it's useful
	      CALL LSL_PUTMSG(DXFPAR__ERRTEXTFONT,LINE)
	      GOTO 9001
	    ENDIF
C
	  ELSE					! not a number
	    CALL LSL_PUTMSG(DXFPAR__ERRTEXTFONT,LINE)
	    GOTO 9001
	  ENDIF
C
	ENDIF
C
8001	DXFENTNAM(CURRENTIND)  = NAME_BUF
	DXFENTLEN(CURRENTIND)  = NAME_LEN
        ENTCOLOUR(CURRENTIND)  = COL_BUF
        IFFFCCODE(CURRENTIND)  = FC_BUF
C
C test for the uniqueness of the current text style
C
	IF (CURRTEXIND.EQ.0) THEN
	   CURRTEXIND = CURRTEXIND + 1
	   DXFTEXSTY(CURRTEXIND) = CURRENTIND
	   GOTO 9000
C
	ELSE
	   DO 7002 I = 1,CURRTEXIND
              IF (DXFENTLEN(DXFTEXSTY(I)).EQ.NAME_LEN) THEN
                 IF (DXFENTNAM(DXFTEXSTY(I))(1:NAME_LEN).EQ.
     &			NAME_BUF(1:NAME_LEN)) GOTO 9000
	      ENDIF
7002	   CONTINUE
C
	   CURRTEXIND = CURRTEXIND + 1
	   DXFTEXSTY(CURRTEXIND) = CURRENTIND
	   GOTO 9000
	ENDIF
C
C---------------------------------------------------------------------
C Set error status
C
9001	CONTINUE
C
	CALL LSL_PUTMSG(DXFPAR__ERRRDENT,LINE)
	RDENTITY = .FALSE.
C
C---------------------------------------------------------------------
C Return
C
9000	RETURN
	END
C
