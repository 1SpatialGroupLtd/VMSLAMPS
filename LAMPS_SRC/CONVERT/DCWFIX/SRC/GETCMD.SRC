	LOGICAL*4 FUNCTION GETCMD()
C
***	MODULE GETCMD
***	IDENT	13JL93
C
C	Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C
CMOD	Default for /BASE and LOWER_LIMIT now 1 not 0.	TJH 26-Nov-1986
C	Author  : A.T. Timms
C	Created : 12 August 1986
C
C Command line decoding and file opening function for IMP utility 
C IRENUMBER.
C
	IMPLICIT NONE
C
C Common blocks
	INCLUDE '($SSDEF)'
C
	INCLUDE 'LSL$CMNLSL:CLD.CMN'
	INCLUDE 'LSL$CMNLSL:STATUS.CMN'
	INCLUDE 'LSL$CMNLSL:FILENAME.CMN'
	INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE 'LSL$CMNDCWFIX:IFFOK.CMN'
	INCLUDE 'LSL$CMNDCWFIX:DCWFIX.CMN'
	INCLUDE 'LSL$CMNDCWFIX:DCWFIXMSG.PAR'
C
C Command language definitions
	EXTERNAL DCWFIX_CLD
C
C workspace
	LOGICAL*4	ABSENT	! .T. if file param. not found
	LOGICAL		LOCAL	! .T. if qual. is local
	LOGICAL		LOCNEG	! set .T. if qual. locally negated
	LOGICAL*4       WHINGE	! set .T. local error reporting
	LOGICAL		IFF_OK  ! to test for IFF opening
C
C functions called
	INTEGER*4	DCL_FILE   ! reads & parses file title from DCL 
			           ! command line
	INTEGER*4	DCL_QUAL   ! looks for specified qualifier
	INTEGER*4	DCL_INT	   ! looks for string qualifier
        INTEGER*4       DCL_STARTUP! looks for command line
	LOGICAL		IFFOPEN	   ! to open existing IFF file read only
	LOGICAL		IFFCREATE  ! to open new IFF file
	LOGICAL		IFFMODIFY  ! to modify IFF file in situ
C
C...................................................................
C initialise logicals
	WHINGE = .TRUE.		! LSLDCL local error reporting
	LOCAL   = .FALSE.       ! set .T. if qual. is local
        LOCNEG  = .FALSE.       ! set .T. if qual. locally negated
	NOIFF = .TRUE.		! No input file open yet
	OUTFOK = .FALSE.	! No output file open yet
C
C and default values
	BASE_NUM = 1
	INCRMT_NUM = 1
	LOW_LIM = 1
	UP_LIM = MAXVALNF	! MAXVALNF = 65535
C....................................................................
C Now for the real work !!
C
C Get command line for DCWFIX. DCL_STARTUP will return set to
C SS$NORMAL if all is well.
C
	GETCMD=DCL_STARTUP('DCWFIX',	! command verb
     &      .FALSE.,			! don't split parameter lists
     &      DCWFIX_CLD,			! CLD module name
     &      WHINGE)			! .T. -local error reporting
        IF (.NOT.GETCMD) GOTO 999
C
C....................................................................
C
C Now lets see what qualifiers we have. The possibilites are:
C /IN_SITU, /[NO]LOG, /BASE[=int], /INCREMENT=[int],/LOWER_LIMIT=[int],
C /UPPER_LIMIT=[int]
C First /LOG
	GETCMD=DCL_QUAL('LOG',		! qual. name
     &                 HAD_LOG,		! returned .T. if qual. found
     &	               LOCAL,		! .T. if qual local to parameter
     &	               LOCNEG,		! .T. if qual. negated locally
     &	               WHINGE)		! .T.-local error reporting
	IF(.NOT.GETCMD) GOTO 999
C
C ... /IN_SITU
	GETCMD=DCL_QUAL('IN_SITU',	! qual. name
     &                 HAD_IN_SITU,	! returned .T. if qual. found
     &	               LOCAL,		! .T. if qual local to parameter
     &	               LOCNEG,		! .T. if qual. negated locally
     &	               WHINGE)		! .T.-local error reporting
	IF(.NOT.GETCMD) GOTO 999
C
C ... /BASE
	GETCMD=DCL_QUAL('BASE',		! qual. name
     &                 HAD_BASE,	! returned .T. if qual. found
     &	               LOCAL,		! .T. if qual local to parameter
     &	               LOCNEG,		! .T. if qual. negated locally
     &	               WHINGE)		! .T.-local error reporting
	IF(.NOT.GETCMD) THEN
	  GOTO 999			! error so return
C
C If we have had /BASE then lets see what base the user wants
	ELSE
	  IF (HAD_BASE) THEN		! We have had /BASE
	    GETCMD=DCL_INT('BASE',	! string argument name
     &	    WHINGE)			! .T.-local error reporting
	    IF (.NOT.GETCMD) GOTO 999	! error so return
	    IF (NUMINT.EQ.1) BASE_NUM = IARRAY(1)
	  ENDIF
	ENDIF
C
C ... /INCREMENT
	GETCMD=DCL_QUAL('INCREMENT',	! qual. name
     &                 HAD_INCRMT,	! returned .T. if qual. found
     &	               LOCAL,		! .T. if qual local to parameter
     &	               LOCNEG,		! .T. if qual. negated locally
     &	               WHINGE)		! .T.-local error reporting
	IF(.NOT.GETCMD) THEN
	  GOTO 999			! error so return
C
C If we have had /INCREMENT then lets see what increment the user wants
	ELSE
	  IF (HAD_INCRMT) THEN		! We have had /INCREMENT
	    GETCMD=DCL_INT('INCREMENT',	! string argument name
     &	    WHINGE)			! .T.-local error reporting
	    IF (.NOT.GETCMD) GOTO 999	! error so return
	    IF (NUMINT.EQ.1) INCRMT_NUM = IARRAY(1)
	  ENDIF
	ENDIF
C
C ... /LOWER_LIMIT
	GETCMD=DCL_QUAL('LOWER_LIMIT',	! qual. name
     &                 HAD_LOW,		! returned .T. if qual. found
     &	               LOCAL,		! .T. if qual local to parameter
     &	               LOCNEG,		! .T. if qual. negated locally
     &	               WHINGE)		! .T.-local error reporting
	IF(.NOT.GETCMD) THEN
	  GOTO 999			! error so return
C
C If we have had /LOWER_LIMIT then lets see what limit the user wants
	ELSE
	  IF (HAD_LOW) THEN		! We have had /LOWER_LIMIT
	    GETCMD=DCL_INT('LOWER_LIMIT',! string argument name
     &	    WHINGE)			! .T.-local error reporting
	    IF (.NOT.GETCMD) GOTO 999	! error so return
	    IF (NUMINT.EQ.1) LOW_LIM = IARRAY(1)
	  ENDIF
	ENDIF
C
C ... /UPPER_LIMIT
	GETCMD=DCL_QUAL('UPPER_LIMIT',	! qual. name
     &                 HAD_UP,		! returned .T. if qual. found
     &	               LOCAL,		! .T. if qual local to parameter
     &	               LOCNEG,		! .T. if qual. negated locally
     &	               WHINGE)		! .T.-local error reporting
	IF(.NOT.GETCMD) THEN
	  GOTO 999			! error so return
C
C If we have had /UPPER_LIMIT then lets see what limit the user wants
	ELSE
	  IF (HAD_UP) THEN		! We have had /UPPER_LIMIT
	    GETCMD=DCL_INT('UPPER_LIMIT',! string argument name
     &	    WHINGE)			! .T.-local error reporting
	    IF (.NOT.GETCMD) GOTO 999	! error so return
	    IF (NUMINT.EQ.1) UP_LIM = IARRAY(1)
	  ENDIF
	ENDIF
C
C...................................................................
C Now we can hunt for the input filename
	GETCMD=DCL_FILE('IN_FILESPEC',	! parameter label
     &	              'LSL$IF:IFF.IFF;',! default file-name
     &	               ABSENT,		! .T. if no file-name
     &	               .FALSE.,		! don't expect list of files
     &	               WHINGE)		! .T.-local error reporting
C
C transfer file-spec to a common block
        IF(GETCMD) THEN
	  INFILE = FILARY(1)(1:FIL_LEN(1))
	  FILEN  = FIL_LEN(1)
        ELSE
          GOTO 999
        ENDIF 
C
C and the OUPUT filename unless we have had /IN_SITU
	IF (HAD_IN_SITU) GOTO 10	! /IN_SITU so no output required
C
C Output file defaults to INPUT file without version number so...
	HAD_VER=.FALSE.			! No version number
	CALL EXPFLN(OUTFILE,OUTLEN)	! strip off version no.
C
	GETCMD=DCL_FILE('OUT_FILESPEC', ! Parameter label
     &			OUTFILE(:OUTLEN), ! Default file spec.
     &			ABSENT,		! True if no filename found
     &			.FALSE.,	! don't expect list of files
     &			WHINGE)		! .T. local error reporting
C
	IF (.NOT.GETCMD) GO TO 999	! Error
C
	OUTLEN=FIL_LEN(1)		! transfer file-spec 
	OUTFILE=FILARY(1)(:OUTLEN)	! to a common block
C
C...................................................................
C Now open the files. Take the appropriate action depending on whether 
C we are working in-situ or creating a new file. 
10	IF (HAD_IN_SITU) THEN			! /IN_SITU specified
	   IFF_OK = IFFMODIFY(INLUN,INFILE(:FILEN),,,HAD_LOG) 
C 						! open for write
	   IF (IFF_OK) THEN			! Successfully
	     NOIFF = .FALSE.   			! we have an IFF file
	   ELSE					! Unsucessful
	     GETCMD = .FALSE.
	     GOTO 999
	   ENDIF
C
C So we are creating a new file for output and opening input file
C readonly. First input file.......
	ELSE	
	   IFF_OK = IFFOPEN(INLUN,INFILE(1:FILEN),,HAD_LOG) 
C						! Open IFF file 
	   IF (IFF_OK) THEN			! Successfully
	     NOIFF = .FALSE.   			! we have an IFF file
	   ELSE					! Unsuccessfully
	     GETCMD = .FALSE.
	     GOTO 999
	   ENDIF
C
C Now the output file.......taking care to lose version number
	   IFF_OK = IFFCREATE(OUTLUN,OUTFILE(1:OUTLEN),,,HAD_LOG) 
C						! Open new file
	   IF (IFF_OK) THEN			! Successfully
	     OUTFOK = .TRUE.			! Set flag so success
	   ELSE					! Unsuccessfully
	     GETCMD = .FALSE.
	     GOTO 999
	   ENDIF
C
	ENDIF
C
C...................................................................
C			
999     IF (GETCMD) GETCMD = SS$_NORMAL	        ! normal completion
	RETURN
   	END
