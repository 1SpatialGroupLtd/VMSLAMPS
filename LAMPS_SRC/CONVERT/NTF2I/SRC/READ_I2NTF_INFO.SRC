C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-08-14 12:17:28.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION READ_I2NTF_INFO()
C
***	IDENT	15AG91
***	MODULE	READ_I2NTF_INFO
C
C Copyright LaserScan Ltd, Cambridge, England
C
C Author S Gupta 13-August-1991
C
C This reads specific data from comments generated by 12NTF:
C   "IFF file"  "Spheroid"  "Projection"  "Scale"  "Units"  "Height data"
C
CMOD	some fool put the comments before the SECHREC in I2NTF. This means that
C	the comments with MD info for a section will actually exist in the
C	previous section. Thus instead of working back from the SECHREC we will
C	work back from the end of the file.		SG	14-Aug-1991
C
C	.------------------{  PSEUDO CODE }---------------------.
C	| 							|
C	| Initialise flags to say that we havent got data yet	|
C	| go to the last record in the file			|
C	| work backwards from current record			|
C	|   if we have found a non-comment stop			|
C	| read the next record (will be a comment)		|
C	| while the current record is a comment record		|
C	|   decipher the comment into a common block		|
C	|   setting appropriate flags				|
C	| 							|
C	`-------------------------------------------------------'
C
	IMPLICIT NONE
C
	INCLUDE 'HERE:LSLDATA.CMN'
	INCLUDE 'HERE:COMMANDS.CMN'
	INCLUDE 'HERE:RECORD.CMN'
C
C functions
	LOGICAL		READ_RECORD
C
C Workspace
	LOGICAL		OK				! Function return
	LOGICAL		IS_COMMENT
	CHARACTER*2	NTF$_REC_DESCR
C
C##############################################################################
C initialise the flags and remember where we started
C
	LSL$_HAD_FNAME	= .FALSE.
	LSL$_HAD_SPHER	= .FALSE.
	LSL$_HAD_PROJ	= .FALSE.
	LSL$_HAD_SCALE	= .FALSE.
	LSL$_HAD_UNITS	= .FALSE.
	LSL$_HAD_HEIGHT	= .FALSE.
C
	OK = .FALSE.
	NTF$_REC_DESCR = STRING(1:2)
C
C.............................................................................
C jump onto the last record in the NTF file
C
	SEC_REC = SECRECNUM -1
	OK = READ_RECORD()
	IF (.NOT.OK) GOTO 999
C
C.............................................................................
C go back through NTF file looking for previous non-comment line
C the current line is irrelevant so treat as COMMENT
C
	IS_COMMENT = .TRUE.				!initialise
C
	DO WHILE (IS_COMMENT)				!while at a comment
	  SEC_REC = SEC_REC -2				!set to previous record
	  CALL READ_RECORD()				!get it
	  NTF$_REC_DESCR = STRING(1:2)			!get record descriptor
	  IS_COMMENT = NTF$_REC_DESCR.EQ.REC$_COMMENT	!is it a comment
	END DO
C
C.............................................................................
C process the comment records, be careful not to overrun the file
C
	IS_COMMENT = .TRUE.				!initialise
	DO WHILE ( (IS_COMMENT).AND.(SEC_REC.LT.SECRECNUM) )
	  CALL READ_RECORD()				!get the next record
	  NTF$_REC_DESCR = STRING(1:2)			!get record descriptor
	  IS_COMMENT = NTF$_REC_DESCR.EQ.REC$_COMMENT	!is it a comment
	  IF (IS_COMMENT)
     &	     CALL PROCESS_I2NTF_COMMENT(STRING,LENGTH)	!process the comment
	END DO
C
C##############################################################################
C although the return value is not important now, may be needed later
C
999	READ_I2NTF_INFO = OK
	RETURN
	END
