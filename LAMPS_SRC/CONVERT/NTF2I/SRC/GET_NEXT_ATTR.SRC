C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-10-15 15:17:20.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION GET_NEXT_ATTR( STARTPOS,ATTR_LEN,FIND_DIVIDER )
C
***     MODULE GET_NEXT_ATTR
***     IDENT	15OC96
C
C     Copyright Laser-Scan Ltd, Cambridge, England
C
C	Author		IMcL	29-Aug-1989
CMOD	Accept attribute records with no dividers	VLG	02-April-1990
CMOD	BS7567 (v2.0) support added (W93/13)		ST	07-Jul-1993
C
C Read through the attribute record and return a pointer to the next 
C attribute mnemonic ( or 0 if not found )
C
	IMPLICIT NONE
C
C Messages:
C
	INCLUDE 	'NTF2IMSG.PAR'
C
C Common:
C
	INCLUDE 	'NTFDATA.CMN'		! For DIVIDER
	INCLUDE 	'RECORD.CMN'		! STRING etc read from NTF
C
C Arguments:
C
	INTEGER*2	STARTPOS		! Where to start looking
	INTEGER		ATTR_LEN		! Length of current attribute
						!  = zero if not known
	LOGICAL		FIND_DIVIDER		! for CITF
C
C Functions:
C
	LOGICAL		IS_CONTINUATION
	LOGICAL		READ_CONTINUE		! Get the continuation record
C
C Workspace:
C
	INTEGER*2	I			! Loop counters
	INTEGER*2	PTR			! Position of next divider
	LOGICAL		OK			! Success flag
C.........................................................................
C Initialise 
C
	STARTPOS = MAX(STARTPOS,3)	! STARTPOS cannot be below 3. Ever.
	PTR = 0
C
	IF (FIND_DIVIDER) GOTO 200
	IF (ATTR_LEN.EQ.0) GOTO 200	! Don't know the length 
					! - look for a divider
C
	PTR = STARTPOS + ATTR_LEN
	IF (PTR.GT.LENGTH-1) GOTO 300
	IF (STRING(PTR:PTR).EQ.DIVIDER) PTR = PTR + 1
	GOTO 900	
C
C Scan through the record looking for the terminating DIVIDER
C
200	DO 100 I = STARTPOS, LENGTH
	   IF ( STRING ( I:I ) .EQ. DIVIDER ) THEN
	      PTR = I + 1
	      GOTO 900
	   ENDIF
100	CONTINUE
C
C The DIVIDER wasn't found so give a warning
C
	IF (FIND_DIVIDER) THEN
	   CALL LSL_PUTMSG(NTF2I__NODIVIDER,'ATTREC')
	ENDIF
C
C The next attribute was not found in this record, see if we have a 
C continuation to read in
C
300	PTR = 0
	IF (.NOT.IS_CONTINUATION(STRING,LENGTH)) GOTO 950
C	IF ( STRING( LENGTH-1:LENGTH-1 ) .NE. '1' ) GOTO 950	! No cont.
C
C We have a continuation so read it in
C
	OK = READ_CONTINUE( 'ATTREC' )
	IF ( .NOT.OK ) GOTO 999
C
C set pointer to start of record
C
	PTR = 3		! Skip the record identifier ( '00' )
C
C.........................................................................
C See if the terminator is at the end of the record. If so see if we can 
C read a new record.
C
900	IF ( PTR.GT.LENGTH-3 ) GOTO 300
950	GET_NEXT_ATTR = PTR
999	RETURN
	END
