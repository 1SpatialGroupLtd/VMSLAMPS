C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-06-23 16:06:26.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION OPEN_FILES (IN_STAT)
C
***	IDENT 15JL91
***	MODULE OPEN_FILES
C
C Copyright Laser-Scan Ltd, Cambridge, England
C
C	Author SG 15-july-199
C
	IMPLICIT NONE
C
C	opens files used by NTF2I to store and retrieve records and their 
C	associated record IDs. The value of IN_STAT determines whether the 
C	files will be opened for reading from or writing to
C	  IN_STAT='NEW'
C		opens the files for writing, ignores existing files
C		initialises various common variables
C	  IN_STAT ='OLD'
C		opens existing files for read.
C
C	files opened as indexed files the record of each is:
C		record_ID, record number
C	in this way the record number associated with a record can be easily
C	retrieved by doing an indexed read on the primary key (for record id)
C
	INCLUDE 'HERE:LUNS.PAR'
	INCLUDE 'HERE:FILE_REC.CMN'
	INCLUDE 'HERE:ID_STORAGE.CMN'
	INCLUDE 'HERE:RECORD.CMN'
	INCLUDE 'HERE:COMMANDS.CMN'
	INCLUDE 'HERE:KEYS.CMN'
C
	INTEGER		IOS				!status value
	LOGICAL		OK				!success
	INTEGER		IDLUN
	CHARACTER*3	IN_STAT
C
C..............................................................................
C initialisations
C
	IF (IN_STAT.EQ.'NEW') THEN
	  NAME_ITEMS =0
	  GEOM_ITEMS =0
	  CHAIN_ITEMS =0
	  CLINE_ITEMS =0
	  POLYG_ITEMS =0
	  CPOLY_ITEMS =0
	  COLLE_ITEMS =0
	  POINT_ITEMS =0
	  NODE_ITEMS =0
	  LINE_ITEMS =0
	  ATTR_ITEMS =0

	  MAX_NODE_KEY=0

	  IF (LOG) 
     &	    CALL WRITEF('%%NTF2I-I-MISC, creating temporary files')
	ELSE
	  IF (LOG) 
     &	    CALL WRITEF('%%NTF2I-I-MISC, reading from temporary files')
	ENDIF

C
	SEC_REC = 0					!no records read
	IDLUN = 0		
C
C..............................................................................
C open the relative file
C
	OK     = .FALSE.					! assume failure
	OPEN (	UNIT = REL_LUN, FILE = REL_FNAME, STATUS = IN_STAT,
     &		ORGANIZATION = 'SEQUENTIAL',
     &		ACCESS = 'DIRECT', RECORDTYPE= 'FIXED',
     &		RECL = 21, FORM ='UNFORMATTED',
     &		IOSTAT = IOS, ERR = 999)			! open the file
C
	OK = IOS.EQ.0						! set flag
C
C..............................................................................
C open the indexed files
C
	DO WHILE (OK.AND.( IDLUN.LT.NUM_ID_FILES))
	  OK = .FALSE.						! assume worst
	  IDLUN = IDLUN+1					! next lun
	  OPEN (UNIT = ARRAY_LUN(IDLUN), FILE = ARRAY_FNAME(IDLUN),
     &		ORGANIZATION = 'INDEXED', ACCESS = 'KEYED',
     &		RECORDTYPE = 'FIXED', RECL = ID_REC_LEN,
     &		FORM ='UNFORMATTED', KEY = (1:4:INTEGER),
     &		IOSTAT = IOS, ERR = 999, STATUS =IN_STAT
     &	  )
	  OK = (IOS.EQ.0)
	END DO
C
C.............................................................................
C
999	IF (.NOT.OK) THEN
	  CALL WRITEF('%%NTF2I-E-MISC, error opening files')
	  CALL WRITEF('-NTF2I-I-MISC, IOS was "%I"',IOS)
	ENDIF
	OPEN_FILES = OK
	RETURN
	END
