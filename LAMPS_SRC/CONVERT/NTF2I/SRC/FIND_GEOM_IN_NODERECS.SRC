C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-07-01 13:26:46.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION FIND_GEOM_IN_NODERECS(START_POS,IN_GEOM_ID,END,LEV)
C
***     MODULE FIND_GEOM_IN_NODERECS
***     IDENT	15DE94
C
C Copyright Laser-Scan Ltd, Cambridge, England
C
C Author					S. Townrow	12-Dec-94
C
C Given a GEOM_ID, this routine will find it in all the NODERECs and
C return (in END and LEV) which end and the level the line joins the node.
C
	IMPLICIT NONE
C
C Arguments:
C
	INTEGER		START_POS		! where to start reading from
	INTEGER		IN_GEOM_ID		! the GEOM_ID we're looking for
	INTEGER		END			! which end of the found line
	INTEGER		LEV			! the level of the found line
C
C Common:
C
	INCLUDE 'LUNS.PAR'
	INCLUDE 'CACHE.PAR'
	INCLUDE	'COMMANDS.CMN'
	INCLUDE	'ID_STORAGE.CMN'
	INCLUDE	'RECORD.CMN'
	INCLUDE 'FILE_REC.CMN'
	INCLUDE 'KEYS.CMN'
	INCLUDE 'CACHE.CMN'
C
C Functions:
C
	LOGICAL		READ_RECORD		! read the next record
	LOGICAL		FIND_GEOM		! searches the actual line for
C
C Workspace:
C
	LOGICAL		OK			! Success flag
	LOGICAL		JUMPED			! have we jumped?
	LOGICAL		FOUND			! GEOM_ID search result
	INTEGER		I,POS			! general loop
	INTEGER		INITIAL_REC		! the place to get back to
	INTEGER		IOS			! I/O status
C
C------------------------------------------------------------------------------
C Save the position of the LINEREC we came from
C
	POS = 1
	OK = .TRUE.
	INITIAL_REC = SEC_REC			!starting record
	JUMPED = .FALSE.			!still with orig record
C
C------------------------------------------------------------------------------
C make use of 'cached' information if possible
C
	IF(IN_GEOM_ID .LE. CACHE_MAX_GEOM_ID) THEN
	   IF (END.EQ.-1) THEN
	      IF(CACHE_START_LEVEL(IN_GEOM_ID) .GE. 0) THEN
	         END = 1
	         LEV = CACHE_START_LEVEL(IN_GEOM_ID)
	         CACHE_HITS = CACHE_HITS + 1
	         GOTO 999
	      ELSE IF(CACHE_END_LEVEL(IN_GEOM_ID) .GE. 0) THEN
	         END = 2
	         LEV = CACHE_END_LEVEL(IN_GEOM_ID)
	         CACHE_HITS = CACHE_HITS + 1
	         GOTO 999
	      ENDIF
	   ELSE IF (END.EQ.1) THEN
	      IF(CACHE_END_LEVEL(IN_GEOM_ID) .GE. 0) THEN
	         END = 2
	         LEV = CACHE_END_LEVEL(IN_GEOM_ID)
	         CACHE_HITS = CACHE_HITS + 1
	         GOTO 999
	      ENDIF
	   ELSE IF(END.EQ.2) THEN
	      IF(CACHE_START_LEVEL(IN_GEOM_ID) .GE. 0) THEN
	         END = 1
	         LEV = CACHE_START_LEVEL(IN_GEOM_ID)
	         CACHE_HITS = CACHE_HITS + 1
	         GOTO 999
	      ENDIF
	   ELSE
	      CALL WRITEF('%%NTF2I-E-MISC, unexpected END value in FIND_GEOM_IN_NODERECS')
	      OK = .FALSE.
	      GOTO 999
	   ENDIF
	ENDIF

	CACHE_MISSES = CACHE_MISSES + 1
C------------------------------------------------------------------------------
C
	DO 100 I = START_POS,MAX_NODE_KEY
C
C Get each record in turn
C
	   READ (NODE_LUN, KEY=I, KEYID=0, IOSTAT=IOS) ID_REC
	   OK = IOS.EQ.0
	   IF (OK) THEN
C
C record was looked-up successfuly, read it in
C
	      IF (OK) THEN
	         SEC_REC = ID_REC.RECORD_NUM -1 ! set record number
	         OK = READ_RECORD() ! read next record

	         IF (.NOT. OK) THEN
C
C couldn't read the record
C
		    CALL WRITEF('%%NTF2I-E-MISC, unable to read NODEREC record')
		    GOTO 999
	         ENDIF
C
C everything ok, then set various flags
C
	         JUMPED = .TRUE.
	         REC_IN_HAND = .TRUE.
	         POS = I+1
C
C Search the NODEREC for the GEOM_ID
C
	         OK = FIND_GEOM(IN_GEOM_ID,END,LEV,FOUND)
	         IF (.NOT. OK) GOTO 999			! error in search
	         IF (FOUND) GOTO 999			! successful outcome
	      ENDIF
	   ENDIF
100	CONTINUE

C SGH
C read all noderecs & found nothing - set level to 0, but don't fail
C
	CALL WRITEF('%%NTF2I-E-MISC, unable to find GEOMETRY %^L%I0 in ANY NODEREC record',IN_GEOM_ID)
	LEV = 0
	IF (END.EQ.-1) THEN
	   END = 1
	ELSE IF (END.EQ.1) THEN
	   END = 2
	ELSE IF(END.EQ.2) THEN
	   END = 1
	ELSE
	   CALL WRITEF('%%NTF2I-E-MISC, unexpected END value in FIND_GEOM_IN_NODERECS')
	   OK = .FALSE.
	   GOTO 999
	ENDIF

	GOTO 999

C get back to the original record if we jumped
C
999	IF (JUMPED) THEN
	  SEC_REC = INITIAL_REC -1			!go back whence we came
	  CALL READ_RECORD()
	ENDIF
C
	START_POS = POS
	REC_IN_HAND = .FALSE.
	FIND_GEOM_IN_NODERECS = OK
	RETURN
	END
