C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-11-29 12:44:44.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION SORT_LUT(LUTABLE, LENGTH)
C
***	MODULE	SORT_LUT
***	IDENT	29NO96
C
C Copyright Laser-Scan Ltd., Cambridge, England.
C
C Author Matt Wenham, 25 October 1996
C
C Returns TRUE if it suceeds in sorting the FC lookup table into NTF
C order (column 1). If duplicate NTF entries are present in the table,
C they are eliminated, and the associated IFF value is set to the smallest
C value found associated with the duplicated NTF FC. The IFF value is also
C negated to flag the fact that it is associated with a duplicate NTF FC.
C This is trapped for and warned of in FC_TRANS.
C Returns FALSE (failure) invalid IFF FCs are present in the table.
C
	IMPLICIT NONE
C
C Messages:
	INCLUDE 'HERE:NTF2IMSG.PAR'
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'
C
C Common:
	INCLUDE	'LOOKUP.CMN'
C
C Arguments:
	INTEGER		LUTABLE(2,*)	! Lookup table
	INTEGER		LENGTH		! Number of entries
C Externals:
	INTEGER		LUT_NTF_CF
	EXTERNAL	LUT_NTF_CF, LUT_SWAP
C Workspace:
	INTEGER		I		! Counter
	INTEGER		SHIFT		! Table entries to shift up by
C   ...............................................................
C
C Assume success, and sort the table by NTF FC.
C
	SORT_LUT = .TRUE.
	IF (LENGTH.GT.1)
     &		CALL SHELL_SORT(LUTABLE, LENGTH, LUT_NTF_CF, LUT_SWAP)
C   ...............................................................
C
C Check and deal with NTF duplicates in the sorted table.
C Fail if invalid IFF FCs found.
C
	IF (LUTABLE(2,1).GT.32767 .OR. LUTABLE(2,1).LT.0) THEN	! Bad IFF FC?
	    CALL LSL_PUTMSG( NTF2I__BADIFFFC, LUTABLE(2,1))	! Inform user
	    SORT_LUT = .FALSE.				! Flag failure
	    GOTO 999					! Outa here
	ENDIF
C
	IF (LENGTH.EQ.1) GOTO 900			! Need to check?
	I = 2						! Check rest of table
	SHIFT = 0					! No entries deleted yet
C
100	CONTINUE
	IF (LUTABLE(2,I).GT.32767 .OR. LUTABLE(2,I).LT.0) THEN	! Bad IFF FC?
	    CALL LSL_PUTMSG( NTF2I__BADIFFFC, LUTABLE(2,I))	! Inform user
	    SORT_LUT = .FALSE.				! Flag failure
	    GOTO 999					! Outa here
	ENDIF
C
	IF (LUTABLE(1,I).EQ.LUTABLE(1,I-1)) THEN	! Duplicate NTF entry?
	   LUTABLE(2,I) =				! Set IFF FC to min
     &		-MIN(LUTABLE(2,I), ABS(LUTABLE(2,I-1)))	! Negate to flag dupl.	
	   SHIFT = SHIFT + 1				! Remove dupl. entry
	ENDIF
C
	IF (SHIFT.GT.0) THEN				! Shift any entries up?
	   LUTABLE(1,I-SHIFT) = LUTABLE(1,I)		! Yes, do it
	   LUTABLE(2,I-SHIFT) = LUTABLE(2,I)
	ENDIF
	I = I + 1					! Check next entry...
	IF (I.LE.LENGTH) GOTO 100			! ... unless finished
C
	LENGTH = LENGTH - SHIFT				! Adjust table length
C
900	CONTINUE
C
999	RETURN
	END
C
