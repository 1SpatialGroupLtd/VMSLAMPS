C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-07-07 13:48:42.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION NEED_RECID (REC_DESCR)

***	IDENT	07JL93
***	MODULE	NEED_RECID

C	Author		SG	05-July-1991
C
C	This function checks whether the NTF REC_DESCR
C	is associated with a record identity. it returns true is it does.
C	The working of the function is similar to RECOGNISED.SRC
C
CMOD	list of records with IDs sorted for slightly faster searching
C							SG	10-July-1991
CMOD	only level 3 data needs IDs to be stored	SG	05-Aug-1991
CMOD	BS7567 (v2.0) support added (W93/13)		ST	02-June-1993
C
	IMPLICIT NONE
C
	CHARACTER*2	REC_DESCR
C
	INCLUDE 'RECORD.CMN'
	INCLUDE 'COMMANDS.CMN'
	INCLUDE 'NTFDATA.CMN'
C
C workspace
	PARAMETER	MAX_DESCRS = 14
C
	CHARACTER*2	INDEXED_RECS(MAX_DESCRS), NTF$_REC_DESCR
	INTEGER		INDEX
C
	DATA INDEXED_RECS /
     &		REC$_ATTREC,
     &		REC$_POINTREC,
     &		REC$_NODEREC,
     &		REC$_NAMEREC,
     &		REC$_TEXTPOS,
     &		REC$_TEXTREP,
     &		REC$_GEOMETRY1,
     &		REC$_GEOMETRY2,
     &		REC$_LINEREC,
     &		REC$_CHAIN,
     &		REC$_CLINE,
     &		REC$_POLYGON,
     &		REC$_CPOLY,
     &		REC$_COLLECT
     &	/
C
C...........................................................................
C
	INDEX = 0
	NEED_RECID = .FALSE.
C
	IF (LEVEL.EQ.3) THEN
	  DO WHILE ((.NOT.NEED_RECID).AND.(INDEX.LT.MAX_DESCRS))
	    INDEX = INDEX +1
	    NEED_RECID = ( REC_DESCR .EQ. INDEXED_RECS(INDEX) )
	  END DO
	ENDIF
	RETURN
	END
