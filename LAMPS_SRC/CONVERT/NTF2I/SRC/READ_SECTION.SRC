C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1996-06-14 17:51:50.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION READ_SECTION
C
***	IDENT	14JN96
***	MODULE	READ_SECTION
C
C Copyright LaserScan Ltd, Cambridge, England
C
C Author TJ Ibbs, 6 October 1987
C
C The main routine for reading a section
C - NOTE that it will return with a record in-hand to be processed by READ_NTF
C
CMOD	Handle NTF level 3 input			VLG	05-Mar-1990
CMOD	Source tidied					SG	15-Jul-1991
CMOD	processes Complex polygons and collect records and places them in IFF 
C	layer 2, after completion of processing of points,lines and text.
C							SG	29-jul-1991
CMOD	bug caused by record_in hand indicator meant half the data was being 
C	lost. fixed by always reading the specified record before entering 
C	read_string					SG	12-Aug-1991
C
CMOD	after processing section, process comment records at the end of the file
C	which may contain MD information for next section.
C	.. moved to READ_NTF_SECTIONS			SG	14-Aug-1991
C
CMOD	in addition to remembering where the RA,NO are also remembers CP
C							SG	25-sep-1991
CMOD	BS7567 (v2.0) support added (W93/13)		ST	07-Jul-1993
C
CMOD    Implement CITF96 changes (WI/CC 1545)           TJM     12-Jun-1996
C
	IMPLICIT NONE
C
C Message files:
C
	INCLUDE	'NTF2IMSG.PAR'
C
C Common files:
C
	INCLUDE	'CITF.CMN'
	INCLUDE	'COMMANDS.CMN'
	INCLUDE	'RECORD.CMN'
	INCLUDE	'STORE_RECORDS.CMN'
	INCLUDE	'ID_STORAGE.CMN'
	INCLUDE	'NTFDATA.CMN'
	INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'
C
C Functions
C
	LOGICAL		READ_RECORD			! read next NTF record
	LOGICAL		READ_SECHREC
	LOGICAL		CREATE_IFF_FILE
	LOGICAL		CLOSE_IFF_FILE
C
C Workspace
C
	LOGICAL		OK				! Function return
	LOGICAL		FINISH				! True if end of section
	INTEGER		RA_POSN				! Where RAnge entry is
	INTEGER		NO_POSN				! And NO entry, too
	INTEGER		CP_POSN				! Where CP entry is
	LOGICAL		IFFOPEN				! TRUE if file is open
	INTEGER		LOOP
C
C *****************************************************************************
C
	SEC_REC = 0					! nothing read
C
	FSN     = 0			! no features yet
	FINISH = .FALSE.
	REC_IN_HAND = .FALSE.
	ATT_PTR = 0
	GEOM_PTR = 0
	CHAIN_PTR = 0
	NAMPOS_PTR = 0
C
C..............................................................................
C
	OK = READ_SECHREC()				! read SECHREC
	IF (OK) THEN
	  OK = CREATE_IFF_FILE( RA_POSN, NO_POSN,CP_POSN) ! create  IFF file
	  IF (OK) THEN
C
C	    ...................................................................
C	    after this, read each record in turn
C
	    LOOP = SEC_REC
	    IF (HAD_CITF93.OR.HAD_CITF96) THEN
	       DO WHILE(OK.AND.(.NOT.FINISH).AND.(SEC_REC.LT.SECRECNUM))
		  IF (.NOT.REC_IN_HAND) OK=READ_RECORD()	! read record
		  IF (OK)  CALL READ_STRING(OK,FINISH)	! process record
	       END DO
	    ELSE
	       DO WHILE(OK.AND.(.NOT.FINISH).AND.(LOOP.LT.SECRECNUM))
		  SEC_REC = LOOP			! set record num
		  OK=READ_RECORD()			! read record
		  IF (OK)  CALL READ_STRING(OK,FINISH)	! process record
		  LOOP = LOOP+1				! next record
	       END DO
	    ENDIF
C
	    IF (.NOT.OK) THEN
	       CALL WRITEF('%%NTF2I-W-MISC, Error reading section')
	       GOTO 999
	    ENDIF
C
C	    ...................................................................
C	    update the range entry for layer 1, then start on complex polygons
C	    and collect records.
C
	    IF (VERSION.NE.2.0) THEN
	       IF( CPOLY_ITEMS+COLLE_ITEMS.GT.0 ) THEN
		  CALL IFFUNO(NO_POSN)			!update layer 1
		  CALL IFFEO()				!close layer 1
		  NO_POSN = LPOSE			! new overlay position
		  CALL IFFNO(2,0,0)			! start layer 2
		  IF (CPOLY_ITEMS.GT.0) CALL PROCESS_CPOLY()	!do polygns
		  IF (COLLE_ITEMS.GT.0) CALL PROCESS_COLLECT()	!do collect
	       ENDIF
	    ENDIF
C
C	    ...................................................................
C	    Close the IFF file (if any). note that NO_POSN reflects the current 
C	    layer which could be 1 or 2
C
	    OK = CLOSE_IFF_FILE( RA_POSN, NO_POSN, CP_POSN )
	  ENDIF
	ENDIF
C
C..............................................................................
C
	REC_IN_HAND = .TRUE.					!VOLTERM RECORD
999	READ_SECTION = OK
	RETURN
	END
