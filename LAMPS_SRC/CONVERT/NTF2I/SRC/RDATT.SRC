C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-11-27 12:41:38.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION RDATT
C
***	IDENT	17SP91
***	MODULE	RDATT
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created, based on IFF2IMAP RDPAR	IMcL	31-Jul-1989
C
C	CONVERT IFFNTF Utility - Read attribute file
C
C Description
C
C	Reads the attribute file which associates IFF attribute names
C	to an NTF nmonic. The details of what the IFF attributes are
C	will be read from the FRT as required.
C
C	For ordinary errors, we attempt to continue with the file
C
C	Returns FALSE if something drastic goes wrong, TRUE otherwise
C
CMOD	corrected bug in CALL ADDSTR(LINE), tidied Source	SG 17-9-91 
C
	IMPLICIT NONE
C
C Included Parameter Files
C
	INCLUDE 'HERE:NTF2IMSG.PAR'	    	! message definitions
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'  	! LSLLIB message definitions
	INCLUDE 'HERE:LUNS.PAR'		    	! Logical units
C
C Local Parameters
C
	BYTE		PLING			! comment delimiter
	PARAMETER	(PLING = '!')
C
C Common Blocks
C
	INCLUDE 'LSL$CMNLSL:FILENAME.CMN'
	INCLUDE 'HERE:ATTRIBUTE.CMN'		! attribute description table
	INCLUDE 'HERE:FILENAME.CMN'		! Filenames and lengths
	INCLUDE 'HERE:COMMANDS.CMN'		! various options
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'		! command decoding
	INCLUDE 'LSL$CMNLSL:CMDCOM.CMN'		! command decoding
	INCLUDE 'LSL$CMNLSL:STATUS.CMN'		! LSLLIB status flag
	INCLUDE 'LSL$CMNFRT:FRTACD.CMN'		! Attributes in FRT
C
C Functions called
C
	INTEGER*4	FLROPN			! open file for reading
	INTEGER*4	FLRCLO			! close file for reading
	INTEGER*4	FLRLIN			! read in line from file
	INTEGER*4	RDCOMM			! read a command
	LOGICAL		ACDFND_NAME		! Find an ACD entry in FRT
	LOGICAL		RDCHS			! read next character
C
C Local Variables
C
	INTEGER*4	LINE			! count line numbers
	INTEGER*4	I,J			! counters
	INTEGER*4	ERRCOD			! LSLLIB error code
	INTEGER*4	RETCOD			! system error code
	LOGICAL 	OTEXT			! put text in opt. AC text ?
	LOGICAL		IFF_OPT_TEXT( MAX_ATTR_NUM ) 
						! storage for OTEXT
	CHARACTER*32	IFFNAME			! IFF attribute name
	INTEGER*2	IFFLN			! ...and its length
	CHARACTER*2	NTFNAME			! NTF attribute mnemonic
	BYTE		CH			! character read
C
	CHARACTER*32	FIND_FNAME		! name to find
	INTEGER		FIND_FLEN		! lenght of name
C
	DATA NTF_ATT_NAME/255*'  '/
C
C##############################################################################
C 
	RDATT = .TRUE.				!Assume sucess
C
C.............................................................................
C
	ERRCOD = FLROPN(ATTLUN,ATTFIL(:ATTLEN),RETCOD) !open file as read-only
C
	IF (.NOT. ERRCOD) THEN				!unsuccesful open
	   CALL LSL_PUTMSG(NTF2I__ERROPNATT,ATTFIL(1:ATTLEN))
	   CALL LSL_ADDMSG(ERRCOD)
	   IF (ERRCOD .EQ. LSL__SYSOPEN) CALL LSL_ADDMSG(RETCOD)
	   GOTO 9999
	ELSEIF (LOG) THEN				! LOG message
	   CALL LSL_PUTMSG(NTF2I__ATTFILOPN,ATTFIL(1:ATTLEN))
	ENDIF
C
C-----------------------------------------------------------------------------
C
	LINE = 0					!Haven't got a line yet
	ATTR_PTR = 0					!Or an attribute
C
C	......................................................................
C	read the lines
C	
500	LINE = LINE+1					!set to next line
C
	ERRCOD = FLRLIN(,,,RETCOD)			!read line
	IF (ERRCOD .EQ. LSL__EOF) GOTO 800
C
	IF (.NOT. ERRCOD) THEN				!unable to read line
	   CALL LSL_PUTMSG(NTF2I__ERRRDATT)		!output message
	   CALL LSL_ADDMSG(ERRCOD)
	   IF (ERRCOD .EQ. LSL__SYSREAD) CALL LSL_ADDMSG(RETCOD)
	   GOTO 9999
	ENDIF
C
	CALL BSLN					!set to start of line
C
	IF ( RDCHS( CH ) ) GOTO 500			!ignore empty lines
	IF ( CH.EQ.PLING ) THEN				!check for comment
	   GOTO 500					! ignore line
	ELSE
	   CALL BSCH					! unread non-pling
	ENDIF
C
C	......................................................................
C	read the command from the line, 0 =sucess , 1 =failure
C
	CALL READ_COMMAND( IFFNAME, IFFLN, NTFNAME, OTEXT,RETCOD )
C
C	.................................................................
C	valid ATTR - Attribute assignment, store the values

	IF ( RETCOD .EQ. 0) THEN
	  IFFLN = MIN ( IFFLN,20 ) 			! Truncate to 20 chars
	  ATTR_PTR = ATTR_PTR + 1
	  IFF_ATT_NAME( ATTR_PTR ) = IFFNAME(:IFFLN)
	  IFF_ATT_LEN ( ATTR_PTR ) = IFFLN
	  NTF_ATT_NAME( ATTR_PTR ) = NTFNAME
	  IFF_OPT_TEXT( ATTR_PTR ) = OTEXT
	ELSE						!invalid return
	  CALL LSL_ADDMSG(NTF2I__LINEINATT)
	  CALL WRITEF('-NTF2I-I-LINE, LINE %N',LINE)
	  LSL_STATUS = NTF2I__LINEINATT			! reduce error status
	ENDIF
	GOTO 500
C
C	........................................................................
C	Close the attribute file
C
800	ERRCOD = FLRCLO(ATTLUN,RETCOD)			!attempt to close
C
	IF (.NOT. ERRCOD) THEN				!error while closing
	   CALL LSL_PUTMSG(NTF2I__ERRCLOATT,ATTFIL(1:ATTLEN))
	   CALL LSL_ADDMSG(ERRCOD)
	   IF (ERRCOD .EQ. LSL__SYSCLOSE) CALL LSL_ADDMSG(RETCOD)
	   GOTO 9999
	ELSEIF ( LOG ) THEN
	   CALL LSL_PUTMSG ( NTF2I__ATTFILCLO,ATTFIL(1:ATTLEN))
	ENDIF
C
C------------------------------------------------------------------------------
C Now we have read the attribute names from the file - look up details in FRT
C
C	ERRCOD = FRTINI( FRTFIL(:FRTLEN) )		!open the FRT file
C	IF ( ERRCOD ) THEN				!failure
C	   CALL LSL_PUTMSG(NTF2I__ERROPNFRT,FRTFIL(:FRTLEN) )
C	   CALL LSL_ADDMSG( ERRCOD )
C	   GOTO 9999
C	ENDIF
C
C	........................................................................
C	and loop round each attribute given above
C
	DO 301 I = 1,ATTR_PTR
C
	   FIND_FLEN = IFF_ATT_LEN(I)
	   FIND_FNAME = IFF_ATT_NAME(I)(1:FIND_FLEN)
C
C	   .....................................................................
C	   search for attribute in FRT
C
	   IF ( ACDFND_NAME(FIND_FNAME(1:FIND_FLEN)) ) THEN	!not found
	      CALL LSL_PUTMSG( 	NTF2I__ATTNOTTRA, FIND_FNAME(1:FIND_FLEN))
	      IFF_ATT_NUM(I) = 0		!flag it as not to translate
C
	   ELSE					!FOUND, store data
	      IFF_ATT_NUM(I) = ACD_CODE
	      IF ( IFF_OPT_TEXT(I) ) THEN	! Just want the optional
	         ATTR_TRANS (I) = 6		! text string
	      ELSE
	         ATTR_TRANS (I) = ACD_DATA_TYPE
	      ENDIF
	      ATT_MM_I (1,I) = ACD_MIN_MAX_I(1)
	      ATT_MM_I (2,I) = ACD_MIN_MAX_I(2)
	      ATT_MM_R (1,I) = ACD_MIN_MAX_R(1)
	      ATT_MM_R (2,I) = ACD_MIN_MAX_R(2)
	   ENDIF
301	CONTINUE
C
	GOTO 9000					!finished succesfully
C
C###############################################################################
C
9999	RDATT = .FALSE.					!failure
9000	RETURN						!return
	END
