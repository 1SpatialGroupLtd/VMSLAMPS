	LOGICAL FUNCTION PROCESS_COLLECT()
C
***	MODULE PROCESS_COLLECT
***	IDENT 30JL91
C
C Copyright Laser-Scan Ltd, Cambridge, England
C
C	Author	SG 30-July-1991
C
C	  generates a text feature in layer 2 which contains the feature serial
C	numbers of features in layer1.
C	  Note that a collect record has a name pointed at by NAME_ID, but that
C	the text would allready have been written out with the processing of the
C	appropriate NAMPOSTN record. by setting the feature code to be text,
C	with the text taken from the NAME_ID and an AC1 specifying that it is a
C	COLLECTION, a point within the range of the IFF file can be used. since 
C	will have two text features with the same name, it would be trivial for
C	a post-processing to match the two.
C
	IMPLICIT NONE
C
	INCLUDE 'HERE:LUNS.PAR'
	INCLUDE 'HERE:FILE_REC.CMN'
	INCLUDE 'HERE:ID_STORAGE.CMN'
	INCLUDE 'HERE:RECORD.CMN'
	INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'
C
	LOGICAL		READ_RECORD
	LOGICAL		READ_COLLECT
C
	LOGICAL		OK
	INTEGER		LOOP
	INTEGER		COLLECT_RECORD
	INTEGER		COLLECT_ID
	INTEGER		IOS
	INTEGER		OLD_ID
C
C##############################################################################
C process as many collect records as were encountered
C
	OK = .TRUE.
	OLD_ID = 0
	COLLECT_RECORD = 0
C
C------------------------------------------------------------------------------
C for as many collect records as were present in section
C
	DO WHILE (OK.AND.(COLLECT_RECORD.LT.COLLE_ITEMS))
C
C	.......................................................................
C	get the next record from the indexed file, note the index must have a 
C	value greater than the ID being looked for
C
	  COLLECT_RECORD = COLLECT_RECORD+1			
	  READ (COLLE_LUN, KEYNXTNE=OLD_ID, KEYID=0, IOSTAT=IOS)ID_REC
	  OK = IOS.EQ.0
C
C	  .....................................................................
C	  read the COLLECT_ID and get the associated record
C
	  IF (OK) THEN
	    COLLECT_ID = ID_REC.RECID
	    SEC_REC    = ID_REC.RECORD_NUM -1
	    OK = READ_RECORD()
C
C	    ...................................................................
C	    and process this collect record
C
	    IF (OK) THEN
	      CALL READ_COLLECT(COLLECT_ID)
	      OLD_ID = COLLECT_ID
	    ELSE
	      CALL WRITEF('%%NTF2I-E-MISC, to get COLLECT record')
	      CALL WRITEF('-NTF2I-W-MISC, data files are corrupt')
	    ENDIF
	  ELSE
	    CALL WRITEF('%%NTF2I-E-MISC, unable to find ID for collect record')
	    CALL WRITEF('-NTF2I-I-MISC, IOS was "%I"',IOS)
	  ENDIF
	END DO
C
C##############################################################################
C
999	PROCESS_COLLECT = OK
	RETURN
	END
