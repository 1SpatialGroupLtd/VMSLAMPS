C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-12-14 13:25:36.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION CALC_SYMB_POINT(NCOORDS)
C
***     MODULE CALC_SYMB_POINT
***     IDENT  11DE92
C
C Copyright Laser-Scan Ltd, Cambridge, England
C
C       Author					S Townrow 11-Dec-1992
C
C Description
C
C A routine to find the second point of a scaled symbol if the CITF feature
C had a DT (distance) and OR (orientation) attribute.
C
	IMPLICIT NONE
C
C Messages:
C
	INCLUDE 'NTF2IMSG.PAR'
C
C Argument:
C
	INTEGER*4	NCOORDS
C
C Commons:
C
	INCLUDE 'CITF.CMN'
	INCLUDE 'NTFDATA.CMN'
C
C Workspace:
C
	LOGICAL		OK		! Success flag
	INTEGER*4	I
	REAL*4		XO,YO,DX,DY
	INTEGER*4	ANINT
	REAL*4		REALINT
	EQUIVALENCE 	(ANINT,REALINT)
	REAL		PI
	PARAMETER	(PI=3.1415926)
C
C------------------------------------------------------------------------------
C
	OK=.TRUE.	! Assume success
	IF (NCOORDS.GT.1) THEN
	   GOTO 999
	ENDIF
C
C Check UNITS
C
	IF (XY_UNIT.EQ.3) DT = DT * 0.3048
C
C Get symbol point
C
	ANINT = OUTBUF(POINT_X,1)
	XO = REALINT
	ANINT = OUTBUF(POINT_Y,1)
	YO = REALINT
C
C Find the x and y components
C
	IF (OR.EQ.0.0) THEN
	   DX = DT
	ELSE
	   DX = DT*COS(OR)
	ENDIF
C
C Calculate the second point
C
	DY = DT*SIN(OR)
	REALINT = XO + DX
	OUTBUF(POINT_X,2) = ANINT
	REALINT = YO + DY
	OUTBUF(POINT_Y,2) = ANINT
	NCOORDS = 2
C
C The rest of the per-point attributes should be absent as it is not a captured
C point
C
	DO 500 I = 3,20
	   OUTBUF(I,2) = IFF_ABSENT
500	CONTINUE
C
C------------------------------------------------------------------------------
C
999	CALC_SYMB_POINT=OK
	RETURN
	END
