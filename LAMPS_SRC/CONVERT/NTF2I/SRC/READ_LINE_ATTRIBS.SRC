C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-07-30 13:14:52.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION READ_LINE_ATTRIBS(ATTR_ID)
C
***     MODULE READ_LINE_ATTRIBS
***     IDENT  30JL91
C
C Copyright Laser-Scan Ltd, Cambridge, England
C
C Author TJ Ibbs, 8 October 1987
C
C Reads the attributes following a line's GEOMETRY records,
C and outputs them as ACs to the IFF file
C
CMOD	Handle NTF level 3	VLG	12-Mar-1990
C
CMOD	uses indexed files so that record for attribute ID is immediately
C	available,tidied source			SG	30-July-1991
C
	IMPLICIT NONE
C
C Messages:
C
	INCLUDE 'HERE:NTF2IMSG.PAR'
C
C Commons:
C
	INCLUDE 'HERE:COMMANDS.CMN'
	INCLUDE	'HERE:RECORD.CMN'
	INCLUDE	'HERE:STORE_RECORDS.CMN'
	INCLUDE	'HERE:NTFDATA.CMN'
	INCLUDE 'HERE:LUNS.PAR'
	INCLUDE 'HERE:FILE_REC.CMN'
	INCLUDE 'HERE:ID_STORAGE.CMN'
C
C Arguments:
C
	INTEGER		ATTR_ID		! ID of attribute record required
					! (zero for levels 1 and 2)
C Functions:
C
	LOGICAL		READ_RECORD	! read the next record
	LOGICAL		READ_ATTREC
	LOGICAL		RDINT
	LOGICAL		IS_CONTINUATION
	LOGICAL		READ_CONTINUE
C
C Workspace:
C
	LOGICAL		OK		! Success flag
	INTEGER		IOS
	LOGICAL		JUMPED
	INTEGER		INITIAL_RECORD
C
C############################################################################
C Assume success
C 
	OK=.TRUE.
	JUMPED = .FALSE.
	INITIAL_RECORD = SEC_REC
C
C---------------------------------------------------------------------------
C with level 3, get record using indices stored in indexed files
C
	IF (LEVEL.EQ.3) THEN
	  READ (ATTR_LUN, KEY=ATTR_ID, KEYID = 0, IOSTAT = IOS) ID_REC
	  OK = IOS.EQ.0
	  IF (OK) THEN
	    SEC_REC = ID_REC.RECORD_NUM -1
	    OK = READ_RECORD()
	    IF (OK) THEN
	      JUMPED = .TRUE.
	    ELSE
	      CALL WRITEF('%%NTF2I-E-MISC, unable to get ATTREC')
	      CALL WRITEF('-NTF2I-W-MISC, Data files are corrupt')
	    ENDIF
	  ELSE
	    CALL WRITEF('%%NTF2I-E-MISC, unable to find record for ATT_ID')
	    CALL WRITEF('-NTF2I-I-MISC, ATT_ID was "%I"', ATTR_ID)
	  ENDIF
C
C	.....................................................................
C	below level 3, read the next record
C
	ELSE
	  IF (.NOT.REC_IN_HAND) OK = READ_RECORD()
	ENDIF
C
	IF (OK) THEN
	  REC_IN_HAND = .TRUE.
	ELSE
	  GOTO 999
	ENDIF
C
C----------------------------------------------------------------------------
C See if we are in a position to read the attribute record
C ( i.e. have we had an FRT and an attribute file )
C
	IF (STRING(1:2).EQ.REC$_ATTREC) THEN		! it is a ATTREC
	   IF (.NOT.HAD_ATTRIBUTE) THEN
	      DO WHILE (IS_CONTINUATION(STRING,LENGTH))
		CALL READ_CONTINUE('ATTREC')
	      END DO
	   ELSE
 	      OK = READ_ATTREC()
	   ENDIF
	ENDIF
C
C##############################################################################
C rejoin errors
C
999	IF (JUMPED) THEN				!return to record
	  SEC_REC = INITIAL_RECORD -1
	  CALL READ_RECORD()
	ENDIF
C
	REC_IN_HAND = .FALSE.				!Dont carry over record
	READ_LINE_ATTRIBS = OK
	RETURN
	END
