C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-01-14 17:11:34.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE GET_ATTRIB(ATTR_ID,ATTR_CODE,ATTR_DATA,ATTR_LEN)
C
***     MODULE GET_ATTRIB
***     IDENT	14JA94
C
C Copyright Laser-Scan Ltd, Cambridge, England
C
C Author 							VLG 9-Mar-90
C
C Looks for attribute ATTR_CODE in an ATTREC which has id = ATTR_ID. Returns 
C ATTR_DATA as a character string. ATTR_LEN = 0 if attribute is  not found
C
C
CMOD	Changed variable names to be sensible and meaningful,	SG 19-Jul-91
C	generally tidied source. Changed so that at level 3
C	the record associated with the specified ATTR_ID is
C	immediately available.
C
CMOD	Warning messages suppressed if the requested attribute	SG 22-Jul-91
C	is not found. This is because this routine only detects
C	the presence of the attribute. It is upto the calling
C	routine to say whether the lack of the attribute is an
C       error.
C
CMOD    Now sets the CURRENT_ATTR_LEN to be the length of	ST 14-Jan-94
C       attributes in the `ignore' list. Mod 1330.
C
	IMPLICIT NONE
C
C Messages:
C
	INCLUDE 'HERE:NTF2IMSG.PAR'
C
C Commons:
C
	INCLUDE 'LSL$CMNFRT:FRTACD.CMN'
	INCLUDE 'HERE:ATTRIBUTE.CMN'	! Att. desc. table
	INCLUDE	'HERE:STORE_RECORDS.CMN'
	INCLUDE	'HERE:ID_STORAGE.CMN'
	INCLUDE	'HERE:RECORD.CMN'
	INCLUDE	'HERE:NTFDATA.CMN'
	INCLUDE 'HERE:LUNS.PAR'
	INCLUDE 'HERE:FILE_REC.CMN'
C
C Arguments:
C
	INTEGER		ATTR_ID				! ID of attribute
	CHARACTER*2	ATTR_CODE			! mnemonic of attribute
	CHARACTER*20	ATTR_DATA			! data for attribute
	INTEGER		ATTR_LEN			! Length of attribute
C
C Functions:
C
	INTEGER*2	GET_NEXT_ATTR			! start of next attr
	LOGICAL		READ_RECORD			! read the next record
C
C Workspace:
C
	INTEGER		START				!start of current ATTR
	INTEGER		STR_POS				!position in string
	INTEGER		CURRENT_ATTR_LEN
	CHARACTER*2	CURRENT_ATTR_CODE
C
	INTEGER		LOOP
	INTEGER		INITIAL_REC
	INTEGER		IO_STATUS
	LOGICAL		MATCH,STD_MATCH
	LOGICAL		IGN_MATCH,OK
	LOGICAL		JUMPED			!did we get another record?
C
C##############################################################################
C Initialise 
C
	ATTR_DATA = '                    '
	START = 9
	STR_POS = 0
	INITIAL_REC = SEC_REC
	JUMPED = .FALSE.
	OK = .TRUE.
C
C------------------------------------------------------------------------------
C get the record which matches the specified ATT_ID
C
C
C	.......................................................................
C	look up record associated with ATTR_ID in indexed file
C
	READ (	ATTR_LUN, KEY=ATTR_ID, KEYID=0, 
     &		IOSTAT=IO_STATUS) ID_REC		! look up ATT_ID
C
C	.......................................................................
C	position to correct record in relative file, remember the READ_RECORD
C	reads the next record, so set record number to 1 before the one we want
C
	OK = (IO_STATUS.EQ.0)				!did we find it
	IF (OK) THEN					!** YES **
	  SEC_REC = ID_REC.RECORD_NUM -1		!  set relevant record
	  OK =READ_RECORD()				!  read the next record 
	  IF (.NOT.OK) THEN				!  an error occured
	    CALL WRITEF('%%NTF2I-E-MISC, unable to get ATTREC')
	    CALL WRITEF('-NTF2I-W-MISC, data files corrupt')
	  ELSE
	    JUMPED = .TRUE.
	  ENDIF
	ELSE						!** NO **
	  CALL WRITEF('%%NTF2I-E-MISC, unable to find record for ATT_ID')
	  CALL WRITEF('-NTF2I-I-MISC, ATT_ID was "%I"',ATTR_ID)
	ENDIF
C
	IF (.NOT.OK) GOTO 999				!exit routine
C
C------------------------------------------------------------------------------
C now that we have the relevant record, see if the attribute length is known
C
	IF (ATTR_LEN.EQ.0) THEN
C
C	  .....................................................................
C	  initialise
C
	  LOOP = 0
	  MATCH = .FALSE.
C
C	  .....................................................................
C	  look up in NTF_ATT_NAME
C
	  DO WHILE (  (.NOT.MATCH).AND.(LOOP.LT.ATTR_PTR) )
	    LOOP = LOOP +1
	    MATCH = ATTR_CODE.EQ.NTF_ATT_NAME(LOOP)
	  END DO
C
C
C	  .....................................................................
C	  retrieve length of the attribute
C
	  OK = MATCH
	  IF (OK) THEN				!attribute known
	    ATTR_LEN = FIELD_WIDTH(LOOP)		! get length of data
	  ELSE						!attribute not known
	    CALL WRITEF('%%NTF2I-E-MISC, could not find attribute length')
	    GOTO 999
	  ENDIF
	ENDIF
C
C------------------------------------------------------------------------------
C look for the requested ATTR_CODE, if not found then skip over any attributes 
C until it is found
C
250	STR_POS = START + 2				!set to start of data
C
	CURRENT_ATTR_CODE = STRING(START:START+1)	!remember current code
	IF (CURRENT_ATTR_CODE.EQ.ATTR_CODE) GOTO 400  	! Found the attribute
C
C	.......................................................................
C
	IGN_MATCH = .FALSE.
	STD_MATCH = .FALSE.
	MATCH = .FALSE.
	LOOP = 0
C
	DO WHILE ( (.NOT.MATCH).AND.(LOOP.LT.ATTR_PTR) )
	  LOOP = LOOP+1
	  MATCH = CURRENT_ATTR_CODE.EQ.NTF_ATT_NAME(LOOP)
	END DO
C
C	.......................................................................
C
	IF (.NOT.MATCH) THEN
	  LOOP = 0
C
	  DO WHILE ( (.NOT.MATCH).AND.(LOOP.LT.IGN_PTR) )
	    LOOP = LOOP+1
	    MATCH = CURRENT_ATTR_CODE.EQ.NTF_NAM_IGN(LOOP)
	  END DO
	  IF (MATCH) THEN
	     CURRENT_ATTR_LEN = NTF_LEN_IGN(LOOP)
	     IGN_MATCH = .TRUE.
	  ENDIF
	ENDIF
C
C Check standard attributes also
C
	IF (.NOT.MATCH) THEN
	  LOOP = 0
	  DO WHILE ( (.NOT.MATCH).AND.(LOOP.LT.NUM_STD_CODES) )
	    LOOP = LOOP+1
	    MATCH = CURRENT_ATTR_CODE.EQ.STD_ATTR_CODES(LOOP)
	  END DO
	  IF (MATCH) THEN
	     CURRENT_ATTR_LEN = STD_ATTR_LEN(LOOP)
	     STD_MATCH = .TRUE.
	  ENDIF
	ENDIF
C
C	.......................................................................
C	attribute was recognised, set its field width
C
	IF (MATCH) THEN
	  IF (.NOT.STD_MATCH) THEN
	     IF (.NOT.IGN_MATCH) THEN
		IF (ATTR_TRANS(LOOP).NE.6 .OR. FIELD_WIDTH(LOOP).NE.255) THEN
		   CURRENT_ATTR_LEN = FIELD_WIDTH(LOOP) ! set attribute width
		ELSE
		   CURRENT_ATTR_LEN = 0 ! text attribute
		ENDIF
	     ENDIF
	  ENDIF
C
C	.......................................................................
C	Unrecognised attribute, lookup against previous unknown attributes 
C
	ELSE
	  MATCH = .FALSE.				! initialise
	  LOOP = 0					! initialise
C
	  DO WHILE ( (.NOT.MATCH).AND.(LOOP.LT.UNKN_PTR) )
	    LOOP = LOOP + 1
	    MATCH = UNKN_ATT(LOOP).EQ.CURRENT_ATTR_CODE
	  END DO
C
C	  ....................................................................
C	  not encountered before, and space in array then warn
C
	  IF ( (.NOT.MATCH).AND.(UNKN_PTR.LT.UNKN_MAX) ) THEN
	    UNKN_PTR = UNKN_PTR + 1
	    UNKN_ATT(UNKN_PTR) = CURRENT_ATTR_CODE
	  ENDIF
C
C	.......................................................................
C
	ENDIF
C
	START = GET_NEXT_ATTR(STR_POS,CURRENT_ATTR_LEN,.FALSE.)	!skip over
	OK = (START.GT.0)					!more attrs?
	IF (OK) THEN						!**YES**
	  GOTO 250
	ELSE							!end of record
	  GOTO 999
	ENDIF
C
C----------------------------------------------------------------------------
C Here with matching ATTR_CODE
C
C	..................................................................
C	copy the attribute data to the output string
C
400	ATTR_DATA(1:ATTR_LEN) = STRING(STR_POS:(STR_POS+ATTR_LEN-1))
C
C	..................................................................
C	blank out remainder of string
C
	DO 410 LOOP=ATTR_LEN+1,20
	   ATTR_DATA(LOOP:LOOP) = ' '
410	CONTINUE
C
C----------------------------------------------------------------------------
C exit routine cleanly, if unsuccessful, invalidate ATTR_LEN (set to 0)
C
999	IF (.NOT.OK) ATTR_LEN = 0			! Here if an error
C
C	..................................................................
C	get back to the record we started from 
C
	IF (JUMPED) THEN			
	  SEC_REC = INITIAL_REC -1
	  CALL READ_RECORD
	  JUMPED = .FALSE.
	ENDIF
C
C	..................................................................
C	all done
C
	RETURN
	END
