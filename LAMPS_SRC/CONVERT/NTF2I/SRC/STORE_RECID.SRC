	LOGICAL FUNCTION STORE_RECID(REC_NUM,REC_DESCR,REC_ID)
C
***	IDENT	04JN93
***	MODULE	STORE_RECID
C
C	Copyright Laser-Scan Ltd, Cambridge, England
C	
C	author 		SG	08-July-1991
C
C	remembers the location of records (with rec_Id type fields) in arrays
C	assumes fortran initialises arrays to zero
C
CMOD	changed arrays to indexed files.		SG 12-july-1991
CMOD	BS7567 (v2.0) support added (W93/13)		ST	02-June-1993
C
	IMPLICIT NONE
C
	INCLUDE	'ID_STORAGE.CMN'
	INCLUDE	'RECORD.CMN'
	INCLUDE 'LUNS.PAR'
C
	LOGICAL		NEED_RECID
	LOGICAL		RDLONG
	INTEGER		STORE
C
	INTEGER*4	REC_NUM
	CHARACTER*2	REC_DESCR
	CHARACTER*6	REC_ID
C
	LOGICAL		OK
	INTEGER*4	IDENT
C
C###############################################################################
C
	OK = .TRUE.						!default return
C
	IF (NEED_RECID(REC_DESCR)) THEN
	  CALL SETAUX( %REF(REC_ID) ,6)			
	  OK = .NOT.RDLONG(IDENT)
	  IF (OK) THEN
	    IF (IDENT.GE.0) THEN
	      IF ( REC_DESCR.EQ.REC$_NAMEREC   ) THEN
		CALL STORE(NAME_LUN, IDENT, REC_NUM, NAME_ITEMS,   'NAME   ')
	      ELSEIF ( REC_DESCR.EQ.REC$_TEXTPOS ) THEN
		CALL STORE(TEXP_LUN, IDENT, REC_NUM, TEXP_ITEMS,   'TEXTPOS')
	      ELSEIF ( REC_DESCR.EQ.REC$_TEXTREP ) THEN
		CALL STORE(TEXR_LUN, IDENT, REC_NUM, TEXR_ITEMS,   'TEXTREP')
	      ELSEIF ( REC_DESCR.EQ.REC$_GEOMETRY1 ) THEN
		CALL STORE(GEOM_LUN, IDENT, REC_NUM, GEOM_ITEMS,   'GEOM[1]')
	      ELSEIF ( REC_DESCR.EQ.REC$_GEOMETRY2 ) THEN
		CALL STORE(GEOM_LUN, IDENT, REC_NUM, GEOM_ITEMS,   'GEOM[2]')
	      ELSEIF ( REC_DESCR.EQ.REC$_CHAIN     ) THEN
		CALL STORE(CHAIN_LUN, IDENT, REC_NUM, CHAIN_ITEMS, 'CHAIN  ')
	      ELSEIF ( REC_DESCR.EQ.REC$_CLINE     ) THEN
		CALL STORE(CLINE_LUN, IDENT, REC_NUM, CLINE_ITEMS, 'CLINE  ')
	      ELSEIF ( REC_DESCR.EQ.REC$_POLYGON   ) THEN
		CALL STORE(POLYG_LUN, IDENT, REC_NUM, POLYG_ITEMS, 'POLYGON')
	      ELSEIF ( REC_DESCR.EQ.REC$_CPOLY     ) THEN
		CALL STORE(CPOLY_LUN, IDENT, REC_NUM, CPOLY_ITEMS, 'CPOLY  ')
	      ELSEIF ( REC_DESCR.EQ.REC$_COLLECT   ) THEN
		CALL STORE(COLLE_LUN, IDENT, REC_NUM, COLLE_ITEMS, 'COLLECT')
	      ELSEIF ( REC_DESCR.EQ.REC$_POINTREC  ) THEN
		CALL STORE(POINT_LUN, IDENT, REC_NUM, POINT_ITEMS, 'POINT  ')
	      ELSEIF ( REC_DESCR.EQ.REC$_NODEREC   ) THEN
		CALL STORE(NODE_LUN, IDENT, REC_NUM, NODE_ITEMS,   'NODE   ')
	      ELSEIF ( REC_DESCR.EQ.REC$_LINEREC   ) THEN
		CALL STORE(LINE_LUN, IDENT, REC_NUM, LINE_ITEMS,   'LINE   ')
	      ELSEIF ( REC_DESCR.EQ.REC$_ATTREC    ) THEN
		CALL STORE(ATTR_LUN, IDENT, REC_NUM, ATTR_ITEMS,   'ATTREC ')
	      ELSE
		CALL WRITEF('%%NTF2I-W-NOTIMPL, RECDESC at record  %I',REC_NUM)
	      ENDIF
	    ELSE
	      CALL WRITEF('%%NTF2I-W-IGN, -ve RECID at record %I',REC_NUM)
	    ENDIF
	  ELSE
	    CALL WRITEF('%%NTF2I-W-RECID, error reading REC_ID field')
	  ENDIF
	ENDIF
C
C###############################################################################
C
9999	STORE_RECID = OK
	RETURN
	END
