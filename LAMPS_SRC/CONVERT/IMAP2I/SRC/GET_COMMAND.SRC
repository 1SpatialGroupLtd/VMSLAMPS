C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-06-22 13:44:32.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION GET_COMMAND
C
***	IDENT	22JN89
***	MODULE	GET_COMMAND
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RJH	02-Oct-1987
C
C	CONVERT IMAP2I Utility - Get and decode command line
C
C Description
C
C
	IMPLICIT NONE
C
C Included Parameter Files
C
	INCLUDE '($STSDEF)/NOLIST'
	INCLUDE 'CMN:IMAP2IMSG.PAR'	! message definitions
C
C Common Blocks
C
	INCLUDE 'CMN:FILES.CMN'		! filenames
	INCLUDE 'CMN:FLAGS.CMN'		! flags
	INCLUDE 'CMN:IFF_MAP.CMN'	! IFF map data
	INCLUDE 'CMN:INFDAT.CMN'	! INFORMAP data
	INCLUDE 'CMN:TABLES.CMN'	! translation tables
	INCLUDE 'LSL$CMNLSL:CLD.CMN'	! DCL command decoding
	INCLUDE 'LSL$CMNLSL:STATUS.CMN'	! LSLLIB status flag
C
C Functions called
C
        INTEGER*4       DCL_STARTUP	! looks for command line
	INTEGER*4	DCL_FILE	! reads & parses file title
	INTEGER*4	DCL_QUAL	! looks for specified qualifier
	INTEGER*4	DCL_INT		! read integers
	INTEGER*4	DCL_DBL		! read double precision reals
	INTEGER*4	DCL_STR		! read strings
	INTEGER*4	PARFILN		! parse filename
C
C Local variables
C
	INTEGER*4	OK		! error return
	INTEGER*4	I		! counter
	LOGICAL*4	ABSENT		! set if file param. not found
	LOGICAL*4	LOCAL		! set if qual. is local
	LOGICAL*4	LOCNEG		! set if qual. locally negated
        LOGICAL*4	WHINGE		! set-local error reporting
	LOGICAL*4	GOT_DRAW	! got /DRAWING qualifier ?
	LOGICAL*4	GOT_PAR		! got /PARAMETER qualifier ?
	LOGICAL*4	GOT_SCHEMA	! got /SCHEMA qualifier ?
	LOGICAL*4	GOT_W		! got /AREA WEST keyword ?
	LOGICAL*4	GOT_S		! got /AREA SOUTH keyword ?
	LOGICAL*4	GOT_E		! got /AREA EAST keyword ?
	LOGICAL*4	GOT_N		! got /AREA NORTH keyword ?
	LOGICAL*4	GOT_X		! got /OFFSET EAST keyword ?
	LOGICAL*4	GOT_Y		! got /OFFSET NORTH keyword ?
C
C Command Language Definitions
C
 	EXTERNAL	IMAP2I_CLD
C
C Initialisation for command line decoding
C
	WHINGE = .TRUE.			! report errors locally
C
C Get command line. DCL_STARTUP will return SS$NORMAL if all well.
C
	OK=DCL_STARTUP('IMAP2I'		! command verb
     &      ,.FALSE.			! don't split parameter lists
     &      ,IMAP2I_CLD			! CLD module name
     &      ,WHINGE)			! set -local error reporting
        IF(.NOT.OK) GOTO 999
C
C Get input file-name 
C
	OK=DCL_FILE('IN_FILESPEC'	! parameter label
     &		,IFFTEM			! default file-name
     &		,ABSENT			! set if no file-name
     &		,.FALSE.		! don't expect list of files
     &          ,WHINGE)		! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C Transfer file-spec 
C
	IFFFIL = FILARY(1)(1:FIL_LEN(1))
	IFFLEN = FIL_LEN(1)
C
C Set up the default drawing name - the name part of the IFF filename is
C still in the filename parsing common block
C
	DRWFIL = STR_NAM(1:LEN_NAM)
	DRWLEN = MIN(LEN_NAM,NAME_MAX)
C
C /DRAWING qualifier
C
	OK=DCL_QUAL('DRAWING'		! qual. name
     &        		,GOT_DRAW	! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C The drawing name is REQUIRED, therefore we must always have it
C
	IF (GOT_DRAW) THEN
	   OK=DCL_STR('DRAWING'		! qual. name
     &			,WHINGE)	! set-local error reporting
	   IF(.NOT.OK) GOTO 999
C
C Set the drawing name
C
	   DRWFIL = CARRAY(1)(1:STR_LEN(1))
	   DRWLEN = MIN(STR_LEN(1),NAME_MAX)
	ENDIF
	CALL UPCASE(DRWFIL(1:DRWLEN))
	CALL STR_TO_BUF(DRWFIL(1:DRWLEN),DRABUF,L)
C
C /SCHEMA qualifier
C
	OK=DCL_QUAL('SCHEMA'		! qual. name
     &        		,GOT_SCHEMA	! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C The absence of /SCHEMA is DISALLOWed and the name is REQUIRED, 
C therefore we must always have it
C
	OK=DCL_STR('SCHEMA'		! qual. name
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C Set the schema name
C
	SCHFIL = CARRAY(1)(1:STR_LEN(1))
	SCHLEN = MIN(STR_LEN(1),NAME_MAX)
	CALL UPCASE(SCHFIL(1:SCHLEN))
	CALL STR_TO_BUF(SCHFIL(1:SCHLEN),SCHBUF,L)
C
C Use it to set up the default parameter filename 
C
	OK = PARFILN(PARFIL,PARLEN,SCHFIL(1:SCHLEN),PARTEM,.FALSE.)
	IF (.NOT. OK) THEN
	   CALL LSL_PUTMSG(OK)
	   IF ((OK .AND. STS$M_SEVERITY) .NE. STS$K_WARNING) 
     &	      GO TO 999
	ENDIF
C
C /PARAMETER qualifier
C
	OK=DCL_QUAL('PARAMETER'		! qual. name
     &        		,GOT_PAR	! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C If we have the qualifier, get the actual filename which is REQUIRED 
C so must be there
C
	IF (GOT_PAR) THEN
	   OK=DCL_FILE('PARAMETER'	! qualifier
     &		,PARFIL(1:PARLEN)	! default file-name
     &		,ABSENT			! set if no file-name
     &		,.FALSE.		! don't expect list of files
     &          ,WHINGE)		! set-local error reporting
	   IF(.NOT.OK) GOTO 999
C
C Set file-spec 
C
	   PARFIL = FILARY(1)(1:FIL_LEN(1))
	   PARLEN = FIL_LEN(1)
	ENDIF
C
C Use the schema name to set up the default facet description filename 
C
	OK = PARFILN(FDTFIL,FDTLEN,SCHFIL(1:SCHLEN),FDTTEM,.FALSE.)
	IF (.NOT. OK) THEN
	   CALL LSL_PUTMSG(OK)
	   IF ((OK .AND. STS$M_SEVERITY) .NE. STS$K_WARNING) 
     &	      GO TO 999
	ENDIF
C
C /FACET qualifier
C
	OK=DCL_QUAL('FACET'		! qual. name
     &        		,HAD_FACET	! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C If we have the qualifier, check for the filename 
C
	IF (HAD_FACET) THEN
	   OK=DCL_FILE('FACET'		! qualifier
     &		,FDTFIL(1:FDTLEN)	! default file-name
     &		,ABSENT			! set if no file-name
     &		,.FALSE.		! don't expect list of files
     &          ,WHINGE)		! set-local error reporting
	   IF(.NOT.OK) GOTO 999
C
C Set file-spec if there was one
C
	   IF (.NOT. ABSENT) THEN
	      FDTFIL = FILARY(1)(1:FIL_LEN(1))
	      FDTLEN = FIL_LEN(1)
	   ENDIF
	ENDIF
C
C Use the schema name to set up the default FRT filename 
C
	OK = PARFILN(FRTFIL,FRTLEN,SCHFIL(1:SCHLEN),FRTTEM,.FALSE.)
	IF (.NOT. OK) THEN
	   CALL LSL_PUTMSG(OK)
	   IF ((OK .AND. STS$M_SEVERITY) .NE. STS$K_WARNING) 
     &	      GO TO 999
	ENDIF
C
C /FRT qualifier
C
	OK=DCL_QUAL('FRT'		! qual. name
     &        		,HAD_FRT	! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C If we have the qualifier, get the actual filename if there is one
C
	IF (HAD_FRT) THEN
	   OK=DCL_FILE('FRT'		! qualifier
     &		,FRTFIL(1:FRTLEN)	! default file-name
     &		,ABSENT			! set if no file-name
     &		,.FALSE.		! don't expect list of files
     &          ,WHINGE)		! set-local error reporting
	   IF(.NOT.OK) GOTO 999
C
C Set file-spec if there was one
C
	   IF (.NOT. ABSENT) THEN
	      FRTFIL = FILARY(1)(1:FIL_LEN(1))
	      FRTLEN = FIL_LEN(1)
	   ENDIF
	ENDIF
C
C /AREA qualifier
C
	OK=DCL_QUAL('AREA'		! qual. name
     &        		,HAD_AREA	! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C /AREA WEST keyword
C
	IF (HAD_AREA) THEN
	   OK=DCL_QUAL('AREA.WEST'	! keyword name
     &        		,GOT_W		! returned .T. if keyword found
     &			,LOCAL		! set if local to parameter
     &			,LOCNEG		! set if negated locally
     &			,WHINGE)	! set-local error reporting
	   IF(.NOT.OK) GOTO 999
C
C Get the keyword value if present
C
	   IF (GOT_W) THEN
	      OK=DCL_DBL('AREA.WEST'	! keyword name
     &			,WHINGE)	! set-local error reporting
	      IF(.NOT.OK) GOTO 999
	      NGORIG(1) = DBLRAY(1)
	   ENDIF
C
C /AREA SOUTH keyword
C
	   OK=DCL_QUAL('AREA.SOUTH'	! keyword name
     &        		,GOT_S		! returned .T. if keyword found
     &			,LOCAL		! set if local to parameter
     &			,LOCNEG		! set if negated locally
     &			,WHINGE)	! set-local error reporting
	   IF(.NOT.OK) GOTO 999
C
C Get the keyword value if present
C
	   IF (GOT_S) THEN
	      OK=DCL_DBL('AREA.SOUTH'	! keyword name
     &			,WHINGE)	! set-local error reporting
	      IF(.NOT.OK) GOTO 999
	      NGORIG(2) = DBLRAY(1)
	   ENDIF
C
C /AREA EAST keyword
C
	   OK=DCL_QUAL('AREA.EAST'	! keyword name
     &        		,GOT_E		! returned .T. if keyword found
     &			,LOCAL		! set if local to parameter
     &			,LOCNEG		! set if negated locally
     &			,WHINGE)	! set-local error reporting
	   IF(.NOT.OK) GOTO 999
C
C Get the keyword value if present
C
	   IF (GOT_E) THEN
	      OK=DCL_DBL('AREA.EAST'	! keyword name
     &			,WHINGE)	! set-local error reporting
	      IF(.NOT.OK) GOTO 999
	      NGTOPR(1) = DBLRAY(1)
	   ENDIF
C
C /AREA NORTH keyword
C
	   OK=DCL_QUAL('AREA.NORTH'	! keyword name
     &        		,GOT_N		! returned .T. if keyword found
     &			,LOCAL		! set if local to parameter
     &			,LOCNEG		! set if negated locally
     &			,WHINGE)	! set-local error reporting
	   IF(.NOT.OK) GOTO 999
C
C Get the keyword value if present
C
	   IF (GOT_N) THEN
	      OK=DCL_DBL('AREA.NORTH'	! keyword name
     &			,WHINGE)	! set-local error reporting
	      IF(.NOT.OK) GOTO 999
	      NGTOPR(2) = DBLRAY(1)
	   ENDIF
C
C Check that all keywords have been supplied
C
	   IF (.NOT. (GOT_W .AND. GOT_S .AND. GOT_E .AND. GOT_N)) THEN
	      CALL LSL_PUTMSG(IMAP2I__MISSKEY,'AREA')
	      OK = LSL_STATUS
	      GOTO 999
C
C and if so, check they are sensible 
C
	   ELSE
	      IF (NGORIG(1) .GE. NGTOPR(1)) THEN
	         CALL LSL_PUTMSG(IMAP2I__BADAREA,
     &			'WEST',NGORIG(1),'EAST',NGTOPR(1))
	         OK = LSL_STATUS
	         GOTO 999
	      ELSEIF (NGORIG(2) .GE. NGTOPR(2)) THEN
	         CALL LSL_PUTMSG(IMAP2I__BADAREA,
     &			'SOUTH',NGORIG(2),'NORTH',NGTOPR(2))
	         OK = LSL_STATUS
	         GOTO 999
	      ENDIF
	   ENDIF
	ENDIF
C
C /OFFSET qualifier
C
	OK=DCL_QUAL('OFFSET'		! qual. name
     &        		,HAD_OFFSET	! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C /OFFSET EAST keyword
C
	IF (HAD_OFFSET) THEN
	   OK=DCL_QUAL('OFFSET.EAST'	! keyword name
     &        		,GOT_X		! returned .T. if keyword found
     &			,LOCAL		! set if local to parameter
     &			,LOCNEG		! set if negated locally
     &			,WHINGE)	! set-local error reporting
 	   IF(.NOT.OK) GOTO 999
C
C Get the keyword value if present
C
	   IF (GOT_X) THEN
	      OK=DCL_DBL('OFFSET.EAST'	! keyword name
     &			,WHINGE)	! set-local error reporting
	      IF(.NOT.OK) GOTO 999
	      XOFF = DBLRAY(1)
	   ENDIF
C
C /OFFSET NORTH keyword
C
	   OK=DCL_QUAL('OFFSET.NORTH'	! keyword name
     &        		,GOT_Y		! returned .T. if keyword found
     &			,LOCAL		! set if local to parameter
     &			,LOCNEG		! set if negated locally
     &			,WHINGE)	! set-local error reporting
	   IF(.NOT.OK) GOTO 999
C
C Get the keyword value if present
C
	   IF (GOT_Y) THEN
	      OK=DCL_DBL('OFFSET.NORTH'	! keyword name
     &			,WHINGE)	! set-local error reporting
	      IF(.NOT.OK) GOTO 999
	      YOFF = DBLRAY(1)
	   ENDIF
C
C Check that either none or both keywords have been supplied
C
	   IF (GOT_X .XOR. GOT_Y) THEN
	      CALL LSL_PUTMSG(IMAP2I__MISSKEY,'OFFSET')
	      OK = LSL_STATUS
	      GOTO 999
	   ELSE IF (.NOT. (GOT_X .OR. GOT_Y)) THEN
	      IF (HAD_AREA) THEN
	         XOFF = NGORIG(1)
	         YOFF = NGORIG(2)
	      ELSE
	         NEED_OFFSET_VAL = .TRUE.
	      ENDIF
	   ENDIF
	ENDIF
C
C /SCALE qualifier
C
	OK=DCL_QUAL('SCALE'		! qual. name
     &        		,HAD_SCALE	! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C Get the scale
C
	SCALE = 0			! default
	IF (HAD_SCALE) THEN
	   OK=DCL_INT('SCALE'		! qual. name
     &			,WHINGE)	! set-local error reporting
	   IF(.NOT.OK) GOTO 999
	   SCALE = IARRAY(1)
	ENDIF
C
C /LOG qualifier
C
	OK=DCL_QUAL('LOG'		! qual. name
     &        		,HAD_LOG	! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C /OS qualifier
C
	OK=DCL_QUAL('OS'		! qual. name
     &        		,HAD_OS		! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C /DATATYPE qualifier - *** NOTE - this qualifier must be done last ***
C
	OK=DCL_QUAL('DATATYPE'		! qual. name
     &        		,HAD_DTYPE	! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C Get the datatypes and leave them in the common block for later use
C
	IF (HAD_DTYPE) THEN
	   OK=DCL_INT('DATATYPE'	! qual. name
     &			,WHINGE)	! set-local error reporting
	   IF(.NOT.OK) GOTO 999
	ENDIF
C
C Assign function value
C
999	GET_COMMAND = OK
C
C Return
C
	RETURN
	END
