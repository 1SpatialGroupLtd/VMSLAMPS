	SUBROUTINE RETSYM
C
***	IDENT	13JN94
***	MODULE	RETSYM
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
CMOD    Interrupt the normal sequence of reading a	ST	13-Jun-1994
C       point feature to output attribute annotation
C       point to ACs. Mod 1371.
C	Pinched from IMAP2CAD and modified		RJH	20-Oct-1987
C	Created						RJH	23-OCT-1985
C
C	CONVERT IMAP2I Utility - Retrieves and transfers symbols
C
C Description
C
C	Assumes kind 3 or 4
C
	IMPLICIT NONE
C
C Included Parameter Files
C
	INCLUDE 'CMN:IMAP2IMSG.PAR'	! message definitions
C
C Common Blocks
C
	INCLUDE 'CMN:GLOBAL.CMN'	! global variables
	INCLUDE 'CMN:IFF_FEATURE.CMN'	! feature details
	INCLUDE 'CMN:INFDAT.CMN'	! INFORMAP data
	INCLUDE	'CMN:TABLES.CMN'	! parameter tables
	INCLUDE	'CMN:XSYMSC.CMN'	! INFORMAP symbol scale
	INCLUDE	'LSL$CMNFRT:FRTCOM.CMN'	! FRT common block
C
C Functions called
C
	LOGICAL		INI_FEATURE	! feature initialisation
	LOGICAL		GETSYM		! gets next symbol of interest
C
C Local Variables
C
	REAL*4		DIFF(2)		! differences in E and N
	REAL*8		SCAPT(2)	! symbol scaling point
	REAL*8		MSCAL		! mean scale
	LOGICAL		DONE		! finished with this datatype ?
	LOGICAL		ENTRY_IN_HAND	! do we need to read the next entry?
C
C Get the first symbol 
C
	DONE = (.NOT. GETSYM())
C
C While not finished, read and output an element
C
200	IF (DONE) GO TO 300
C
C For facility datatypes, get the attributes if they have changed
C
	IF (DATKND .EQ. 4) THEN
	   IF ( ((MODE .AND. MSK_GREEN) .EQ. MSK_GREEN) .OR.
     &	        ((MODE .AND. MSK_NEW  ) .EQ. MSK_NEW  ) ) THEN
	      CALL RETATT
	   ENDIF
	ENDIF
C
C Note that we normally need to do another read further down.
C The only time we don't is when we have already done a read to
C see if there are attribute annotation points on the feature.
C
	ENTRY_IN_HAND = .FALSE.
C
C If we don't have a green button, output a message
C
	IF ((MODE .AND. MSK_GREEN) .EQ. 0) THEN
	   CALL LSL_PUTMSG(IMAP2I__NOTGREEN,DATTYP)
C
C Prepare for a new feature
C
	ELSEIF (INI_FEATURE(DATKND,DATTYP,LTYPE)) THEN
C
C Set the flags
C
	   IS_SYMBOL = .TRUE.
C
	   IF (FOUND_FC) THEN
	      ORI_SYM = (FRTGT .EQ. ORITYP)
	      SCA_SYM = (FRTGT .EQ. SCATYP)
	   ELSE
	      ORI_SYM = .TRUE.		! assume all are oriented
	   ENDIF
C
C Work out the angle
C
	   DIFF(1) = DE(2) - DE(1)
	   DIFF(2) = DN(2) - DN(1)
	   IF ( DIFF(1).NE.0 .OR. DIFF(2).NE.0 ) THEN
	      ANGLE = ATAN2(DIFF(2),DIFF(1))
	   ENDIF
C
C Output the symbol position
C
	   CALL COORD(DE(1),DN(1))
C
C and the second point if it is scaled
C
	   IF (SCA_SYM) THEN
	      IF (DATKND .EQ. 3) THEN
	         MSCAL = (XSCAL+YSCAL)/2
	         SCAPT(1) = DE(1) + MSCAL*COS(ANGLE)
	         SCAPT(2) = DN(1) + MSCAL*SIN(ANGLE)
	      ELSE
	         SCAPT(1) = DE(2)
	         SCAPT(2) = DN(2)
	      ENDIF
	      CALL COORD(SCAPT(1),SCAPT(2))
	   ENDIF
C
C Get any attribute annotation points. If there aren't any we must
C keep this read in hand and not do the second call to GETSYM below
C
	   IF (DO_ANNOTATION) THEN
250	      DONE = (.NOT. GETSYM())
	      ENTRY_IN_HAND = ((MODE .AND. MSK_ANNO) .NE. MSK_ANNO)
	      CALL RETATTANNO
	      IF (.NOT.ENTRY_IN_HAND) GOTO 250
	   ENDIF
C
C Write the feature to the IFF file
C
	   CALL WRITE_FEATURE
	ENDIF
C
C Check for errors
C
	IF (GIVE_UP) THEN
	   DONE = .TRUE.
C
C Get the next symbol 
C
	ELSE
	   IF (.NOT.ENTRY_IN_HAND) THEN
	      DONE = (.NOT. GETSYM())
	   ENDIF
	ENDIF
C
C Branch back for test
C
	GO TO 200
C
C Finished current data type
C
300	CONTINUE
C
C Return
C
	RETURN
	END
