C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-10-01 16:44:14.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE IMAP_SYSMSG(IERR)
C
***	IDENT	01OC87
***	MODULE	IMAP_SYSMSG
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RJH	24-Sep-1987
C
C	Output RSX or RMS error message
C
C Description
C
C	If the error code contains an RSX error, the equivalent VAX/VMS 
C	message is output if there is one. Otherwise, an equivalent RMS 
C	message is used.
C
C	If the error code contains an RMS error, it is converted into 
C	the VAX/VMS status code and the message is output.
C
C	If the error code contains an INFORMAP error, it is assumed 
C	that a message will already have been output and is therefore 
C	ignored.
C
	IMPLICIT NONE
C
C Included Parameter Files
C
	INCLUDE '($SSDEF)/NOLIST'
	INCLUDE '($RMSDEF)/NOLIST'
C
C Arguments
C
	INTEGER*2	IERR		! the error code
C
C Local Variables
C
	INTEGER*4	CODE		! longword error code
C
C Deal with RSX-11M errors
C
	IF (IERR .EQ. -10) THEN
	   CALL LSL_ADDMSG(SS$_ENDOFFILE)    ! end of file
	ELSEIF (IERR .EQ. -24) THEN
	   CALL LSL_ADDMSG(SS$_DEVICEFULL)   ! device full
	ELSEIF (IERR .EQ. -26) THEN
	   CALL LSL_ADDMSG(SS$_NOSUCHFILE)   ! file not found
	ELSEIF (IERR .EQ. -27) THEN
	   CALL LSL_ADDMSG(RMS$_FLK)         ! file locked
	ELSEIF (IERR .EQ. -34) THEN
	   CALL LSL_ADDMSG(SS$_FILALRACC)    ! logical unit in use
	ELSEIF (IERR .EQ. -37) THEN
	   CALL LSL_ADDMSG(SS$_FILNOTACC)    ! logical unit not assigned
	ELSEIF (IERR .EQ. -38) THEN
	   CALL LSL_ADDMSG(SS$_FILELOCKED)   ! file not closed properly
	ELSEIF (IERR .EQ. -40) THEN
	   CALL LSL_ADDMSG(RMS$_RSZ)	     ! bad record size
	ELSEIF (IERR .EQ. -49) THEN
	   CALL LSL_ADDMSG(RMS$_FEX)         ! rename - new name in use
	ELSEIF (IERR .EQ. -53) THEN
	   CALL LSL_ADDMSG(RMS$_FLK)         ! file already open
	ELSEIF (IERR .EQ. -55) THEN
	   CALL LSL_ADDMSG(SS$_NOTFILEDEV)   ! bad device
	ELSEIF (IERR .EQ. -59) THEN
	   CALL LSL_ADDMSG(SS$_DRVERR)	     ! fatal hardware error
C
C and RMS errors
C
	ELSEIF (IERR .GT. 0) THEN
	   CODE = IERR			! so it will do *4 addition
	   CODE = CODE + '18000'X
	   CALL LSL_ADDMSG(CODE)
	ENDIF
C
C Return
C
	RETURN
	END
