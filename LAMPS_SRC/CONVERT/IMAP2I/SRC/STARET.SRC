C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-10-21 15:37:04.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION STARET
C
***	IDENT	21OC87
***	MODULE	STARET
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Pinched from IMAP2CAD and modified	RJH	12-Oct-1987
C	Created					RJH	23-OCT-1985
C
C	CONVERT IMAP2I Utility - Start data retrieval for new data type
C
C Description
C
C	Returns true on success
C
	IMPLICIT NONE
C
C Included Parameter Files
C
	INCLUDE 'CMN:IMAP2IMSG.PAR'	! message definitions
	INCLUDE 'CMN:LUN.PAR'		! logical unit numbers
C
C Common Blocks
C
	INCLUDE 'CMN:FLAGS.CMN'		! flags
	INCLUDE 'CMN:GLOBAL.CMN'	! global variables
	INCLUDE 'CMN:INFDAT.CMN'	! INFORMAP data
C
C Functions called
C
	LOGICAL*1	DTNNOT		! data type does not exist ?
C
C Local Variables
C
	REAL*8		XORIG		! X centre
	REAL*8		YORIG		! Y centre
	REAL*8		DEL		! drawing enlargement
	INTEGER*2	OPNFLG		! open flag
	INTEGER*2	PREC		! data type precision
	INTEGER*2	IERR		! error code
	LOGICAL		ABSENT		! current data type absent ?
C
C Initialisation
C
	ABSENT	= .FALSE.
C
C Set flag
C
	OPNFLG = '10'O			! read only
	OPNFLG = OPNFLG .OR. '40'O	! drawing must exist
	IF (HAD_FACET)
     &	   OPNFLG = OPNFLG .OR. '20'O	! permanent storage
C
C Disable "... DATA TYPE DOES NOT EXIST ..." message - only so we can
C output our own version
C
	CALL XDTMSG
C
C Open the appropriate files for the new data type
C
	CALL PUTINF(IMAP_GRA,IMAP_ATT,SCHBUF,DATTYP,DRABUF,OPNFLG,
     &		XM1,YM1,XM2,YM2,XORIG,YORIG,DEL,KIND,NGLEN,PREC,IERR)
C
C Mask kind down to 4 bits
C
	IF (IERR .EQ. 0) THEN
	   DATKND = (KIND .AND. 'F'X)
C
C Check if failure is due either to no data type in the schema, or to 
C no data type in the drawing
C
	ELSE IF (DTNNOT(IERR,KIND)) THEN
	   IF (IERR .NE. -26) THEN	! data type not in schema
	      CALL LSL_PUTMSG(IMAP2I__NODTYPE,DATTYP)
	   ENDIF
	   ABSENT = .TRUE.
C
C Output error message
C
	ELSE
	   CALL LSL_PUTMSG(IMAP2I__PUTINF,DATTYP)
	   CALL LSL_ADDMSG(IMAP2I__CODES,KIND,IERR)
	   CALL IMAP_SYSMSG(IERR)
	   GIVE_UP = .TRUE.
	ENDIF
C
C Assign function value
C
	STARET = (.NOT. (ABSENT .OR. GIVE_UP))
C
C Return
C
	RETURN
	END
