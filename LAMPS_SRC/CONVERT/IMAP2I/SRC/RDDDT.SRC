C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-11-11 11:39:08.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION RDDDT
C
***	IDENT	11NO87
***	MODULE	RDDDT
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RJH	06-Oct-1987
C
C	CONVERT IMAP2I Utility - Read DDT entry
C
C Description
C
C	Reads a datatype description table entry
C
C	Expects the datatype just read to be in INTARG(1) in /CMDCOM/
C		the linetype just read to be in INTARG(2) in /CMDCOM/
C		the FC       just read to be in INTARG(3) in /CMDCOM/
C
C	Returns FALSE if something goes wrong with a command line, 
C	TRUE otherwise
C
	IMPLICIT NONE
C
C Included Parameter Files
C
	INCLUDE 'CMN:IMAP2IMSG.PAR'	    ! message definitions
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'  ! LSLLIB message definitions
C
C Common Blocks
C
	INCLUDE 'CMN:FLAGS.CMN'			! flags
	INCLUDE 'CMN:TABLES.CMN'		! translation tables
	INCLUDE 'LSL$CMNLSL:CLD.CMN'		! DCL command decoding
	INCLUDE 'LSL$CMNLSL:CMDCOM.CMN'		! command decoding
	INCLUDE 'LSL$CMNLSL:EXCEPTION.CMN'	! number reading errors
C
C Functions called
C
	LOGICAL		RDINT		! reads integer
C
C Local Variables
C
	INTEGER*4	I		! counter
	INTEGER*2	TEXT_SIZE	! text size
	INTEGER*2	TEXT_CAT	! text size
	LOGICAL		NOTHING		! nothing read ?
C
C Assume that everything goes well
C
	RDDDT = .TRUE.
C
C and get ready for a new datatype/linetype
C
	TOIFF_PTR = TOIFF_PTR + 1
C
C We have already read the datatype so check that it is in range and 
C save it
C
	IF ( INTARG(1).LT.MIN_DTYPE .OR. INTARG(1).GT.MAX_DTYPE ) THEN
	   CALL LSL_PUTMSG(IMAP2I__BADDTYPE,INTARG(1))
	   GOTO 9999
	ELSE
	   TOIFF_TAB(TOIFF_DTYPE,TOIFF_PTR) = INTARG(1)
	ENDIF
C
C Do the same for the linetype
C
	IF ( INTARG(2).LT.MIN_LTYPE .OR. INTARG(2).GT.MAX_LTYPE ) THEN
	   CALL LSL_PUTMSG(IMAP2I__BADLTYPE,INTARG(2))
	   GOTO 9999
	ELSE
	   TOIFF_TAB(TOIFF_LTYPE,TOIFF_PTR) = INTARG(2)
	ENDIF
C
C and for the FC
C
	IF ( INTARG(3).LT.0 .OR. INTARG(3).GT.MAX_WORD ) THEN
	   CALL LSL_PUTMSG(IMAP2I__BADFC,INTARG(3))
	   GOTO 9999
	ELSE
	   TOIFF_TAB(TOIFF_FC,TOIFF_PTR) = INTARG(3)
	ENDIF
C
C Now check for a text size
C
	NOTHING = RDINT(TEXT_SIZE)
	IF (NOTHING) THEN
	   IF ((ERRNUM .NE. LSL__UNEXPEOL) .AND. 
     &	       (ERRNUM .NE. LSL__NONUM)) THEN
	      CALL LSL_PUTMSG(ERRNUM)
	      IF (ERRNUM .EQ. LSL__HADEXCP) CALL LSL_ADDMSG(LSL_EXCP)
	      GOTO 9999
	   ENDIF
	ELSEIF ( TEXT_SIZE.LT.0 ) THEN
	   CALL LSL_PUTMSG(IMAP2I__BADTEXTSIZE,TEXT_SIZE)
	   GOTO 9999
	ELSE
	   TOIFF_TAB(TOIFF_HEIGHT,TOIFF_PTR) = TEXT_SIZE
	ENDIF
C
C and a text category
C
	IF (.NOT. NOTHING) THEN
	   NOTHING = RDINT(TEXT_CAT)
	   IF (NOTHING) THEN
	      IF ((ERRNUM .NE. LSL__UNEXPEOL) .AND. 
     &	          (ERRNUM .NE. LSL__NONUM)) THEN
	         CALL LSL_PUTMSG(ERRNUM)
	         IF (ERRNUM .EQ. LSL__HADEXCP) CALL LSL_ADDMSG(LSL_EXCP)
	         GOTO 9999
	      ENDIF
	   ELSEIF ( TEXT_CAT.LT.MIN_CAT .OR. TEXT_CAT.GT.MAX_CAT ) THEN
	      CALL LSL_PUTMSG(IMAP2I__BADTEXTCAT,TEXT_CAT)
	      GOTO 9999
	   ELSE
	      TOIFF_TAB(TOIFF_CAT,TOIFF_PTR) = TEXT_CAT
	   ENDIF
	ENDIF
C
C Mark the datatype as selected - note that selected datatypes not in 
C the DDT are ignored
C
	IF (HAD_DTYPE) THEN
	   DO 510 I=1,NUMINT
	      IF (IARRAY(I) .EQ. TOIFF_TAB(TOIFF_DTYPE,TOIFF_PTR)) THEN
	         SEL_TAB(IARRAY(I)) = .TRUE.
	      ENDIF
510	   CONTINUE
	ELSE
	   SEL_TAB(TOIFF_TAB(TOIFF_DTYPE,TOIFF_PTR)) = .TRUE.
	ENDIF
C
C and finish
C
	GOTO 9000			! success
C
C Errors
C
9999	RDDDT = .FALSE.			! failure
	TOIFF_PTR = TOIFF_PTR - 1	! no need to unset anything else
C
C Return
C
9000	RETURN
	END
