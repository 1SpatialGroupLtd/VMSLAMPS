	SUBROUTINE RETATT
C
***	IDENT	13JN94
***	MODULE	RETATT
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
CMOD	No longer initialise the NUM_AC variable here.	ST	13-Jun-1994
C	Mod 1371.
C	Created						RJH	26-Jun-1989
C
C	CONVERT IMAP2I Utility - Retrieves and transfers attributes
C
C Description
C
C	Assumes kind 4 or 5
C
	IMPLICIT NONE
C
C Included Parameter Files
C
	INCLUDE 'CMN:IMAP2IMSG.PAR'	! message definitions
	INCLUDE	'LSL$CMNIFF:CB.STR'	! record structure definition
C
C Local Parameters
C
	INTEGER*4	N		! attribute name buffer length
	PARAMETER	(N = 9)
C
C Common Blocks
C
	INCLUDE 'CMN:INFDAT.CMN'	! INFORMAP data
	INCLUDE	'CMN:TABLES.CMN'	! parameter tables
	INCLUDE	'CMN:IFF_AC.CMN'	! IFF AC data
C
C Functions called
C
	INTEGER*4	ATTR_IND	! finds attribute table index 
	INTEGER*4	AC_IND		! finds AC list index 
	LOGICAL		GETATT		! gets INFORMAP attribute info.
C
C Local Variables
C
	INTEGER*4	THIS_ATTR	! current attribute table index
	INTEGER*4	THIS_AC		! current AC list index
	LOGICAL		IGNORE_ALL	! ignore all attributes ?
	LOGICAL		IGNORE_THIS	! ignore current attribute ?
C
	INTEGER*2	TOTAL		! total no. INFORMAP attributes
	INTEGER*2	INUM		! INFORMAP attribute number
	INTEGER*2	IERR		! INFORMAP error code
	BYTE		NAMBUF(N)	! INFORMAP attribute name
C
	INTEGER*4	NAMDSC(2)	! fake string descriptor for it
	INTEGER*2	NAMLEN		! and the length part
	EQUIVALENCE	(NAMDSC(1),NAMLEN)
C
C Set up fake descriptor for attribute name
C
	NAMDSC(1) = 0			! zero type and class
	NAMDSC(2) = %LOC(NAMBUF)	! buffer address
	NAMLEN    = N - 1		! length - strip trailing space
C
C Initialise error flags
C
	IERR = 0
	IGNORE_ALL = .FALSE.
C
C Clear out any AC's remaining from the previous feature
C
C	NUM_AC = 0
C
C Check that the parameter file contained some attribute definitions
C
	IF (ATTR_PTR .LE. 0) THEN
	   IGNORE_ALL = .TRUE.
C
C Find out how many attributes we have
C
	ELSE
	   CALL GETMI(TOTAL)
C
C and check that there are some
C
	   IF (TOTAL .LE. 0) THEN
	      CALL LSL_PUTMSG(IMAP2I__FACILITY,DATTYP)
	      IGNORE_ALL = .TRUE.
	   ENDIF
	ENDIF
C
C Go through each attribute in turn
C
	IF (.NOT. IGNORE_ALL) THEN
	   DO 200 INUM=1,TOTAL
	      IGNORE_THIS = .FALSE.
C
C Get the INFORMAP attribute name
C
	      CALL ITMNAM(INUM,NAMBUF,IERR)
C
C and check that the attribute number was found in the schema
C
	      IF (IERR .NE. 0) THEN
		 IF (IERR .EQ. -815) THEN
	            CALL LSL_PUTMSG(IMAP2I__ATTNOTFOUND)
		 ELSE
	            CALL LSL_PUTMSG(IMAP2I__UNKPLUS,IERR)
		 ENDIF
	         CALL LSL_ADDMSG(IMAP2I__IMAPINFO,INUM,DATTYP)
	         IGNORE_THIS = .TRUE.
C
C Find out if the attribute has been defined for this datatype
C
	      ELSE
	         THIS_ATTR = ATTR_IND(NAMDSC,DATTYP)
	         IF (THIS_ATTR .LE. 0) IGNORE_THIS = .TRUE.
	      ENDIF
C
C If the attribute is going into an AC entry ...
C
	      IF (.NOT. IGNORE_THIS) THEN
	         IF ((ATTR_TAB(ATTR_FLD,THIS_ATTR) .EQ. AC_VAL ) .OR.
     &	             (ATTR_TAB(ATTR_FLD,THIS_ATTR) .EQ. AC_TEXT)) THEN
C
C first get the position in the AC list ...
C
	            THIS_AC = AC_IND(ATTR_TAB(ATTR_COD,THIS_ATTR))
C
C then transfer the data to the appropriate place
C
	            CALL GETATT(THIS_ATTR,ACVAL(THIS_AC),
     &	                        ACTEXT(1,THIS_AC),ACTLEN(THIS_AC),
     &	                        MAX_AC_LEN,INUM)
C
C If the attribute is going into a CB entry ...
C
	         ELSE
C *****	            we can't do anything until we get the money
		 ENDIF
	      ENDIF
200	   CONTINUE
	ENDIF
C
C Return
C
	RETURN
	END
