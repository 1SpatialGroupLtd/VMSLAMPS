C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-07-06 12:40:56.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE START_FEATURE
C
***	IDENT	06JL89
***	MODULE	START_FEATURE
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C Author TJ Ibbs, 2 April 1986
C Pinched from OSTF2I and modified for IMAP2I by R J Hulme, 21-Oct-1987
C
C To output the bits of a feature that come before the first ST
C
	IMPLICIT NONE
C
C parameter files
C
	INCLUDE	'LSL$CMNIFF:CB.STR'	! record structure definition
C
C common blocks
C
	INCLUDE 'CMN:TABLES.CMN'	! translation tables
	INCLUDE	'CMN:IFF_AC.CMN'	! IFF AC data
	INCLUDE	'CMN:IFF_FEATURE.CMN'
	INCLUDE	'CMN:IFF_POINTS.CMN'
C
C workspace
C
	INTEGER*2	ISTAT(4)	! for the FS entry
	INTEGER		THIS_AC		! current AC
C
C **********************************************************************
C firstly, output the NF, allowing the library to allocate internal 
C sequence numbers , so we must unset ISQ each time
C
	FSN = FSN + 1
	ISQ = 0
 	CALL IFFNF( FSN, ISQ )	! start the feature
C
C calculate all the bits of the FS entry
C
	ISTAT(1) = FC
C
	ISTAT(2) = 0
	ISTAT(3) = 0
C
C for texts, assume we have the digitised position
C
	IF ( IS_TEXT ) THEN
	   CALL LIB$INSV( JUSTIF,   0, 4, ISTAT(3) )
	   CALL LIB$INSV( STYLE,    4, 2, ISTAT(3) )
	   CALL LIB$INSV( CATEGORY, 6, 6, ISTAT(3) )
	   ISTAT(3) = ISTAT(3).OR.'8000'X   ! bits 14-15 = 2 (text)
	ELSEIF ( IS_SYMBOL ) THEN
	   ISTAT(3) = ISTAT(3).OR.'4000'X   ! bits 14-15 = 1 (symbol)
	ENDIF
C
C so write the FS entry
C
	CALL IFFFS( ISTAT )
C
C if we have any AC's to output, do them here
C
	DO 100 THIS_AC=1,NUM_AC
	   CALL IFFAC(ACTYPE(THIS_AC),ACVAL(THIS_AC).I,
     &	              ACTEXT(1,THIS_AC),ACTLEN(THIS_AC))
100	CONTINUE
C
C and then, do we need a TH ?
C
 	IF ( IS_TEXT ) CALL IFFTH( HEIGHT )
C
C signal pen up for the first ST
C
	PEN_UP = .TRUE.
C
C and we haven't output any ST's for this feature yet
C
	DONE_ST = .FALSE.
C
C so we've finished START_FEATURE
C
	DONE_START_FEATURE = .TRUE.
C
C and that's it
C
	RETURN
	END
