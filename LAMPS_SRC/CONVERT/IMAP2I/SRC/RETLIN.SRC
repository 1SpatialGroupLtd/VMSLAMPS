C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-06-20 14:59:24.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE RETLIN
C
***	IDENT	20JN94
***	MODULE	RETLIN
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
CMOD    Interrupt the normal sequence of reading a	ST	13-Jun-1994
C       line feature to output attribute annotation
C       point to ACs. Mod 1371.
C	Pinched from IMAP2CAD and modified		RJH	14-Oct-1987
C	Created						RJH	23-OCT-1985
C
C	CONVERT IMAP2I Utility - Retrieves and transfers lines
C
C Description
C
C	Assumes kind 1 or 5
C
	IMPLICIT NONE
C
C Common Blocks
C
	INCLUDE 'CMN:GLOBAL.CMN'	! global variables
	INCLUDE 'CMN:IFF_FEATURE.CMN'	! feature details
	INCLUDE 'CMN:INFDAT.CMN'	! INFORMAP data
	INCLUDE	'CMN:TABLES.CMN'	! parameter tables
C
C Functions called
C
	LOGICAL		INI_FEATURE	! feature initialisation
	LOGICAL		NEW_FEATURE	! start a new feature ?
	LOGICAL		GETLIN		! gets next line segment
C
C Local Variables
C
	LOGICAL		DONE		! finished with this datatype ?
C
C Get the first element
C
	DONE = (.NOT. GETLIN())
C
C and make sure it's green (paranoia !!)
C
	IF (((MODE .AND. MSK_GREEN) .EQ. 0) .AND. 
     &	    ((MODE .AND. MSK_NEW) .EQ. 0) .AND. (.NOT. DONE)) THEN
	   MODE = MODE .OR. MSK_GREEN
	ENDIF
C
C While not finished, read and output an element
C
200	IF (DONE) GO TO 500
C
C For facility datatypes, get the attributes if they have changed
C
	IF (DATKND .EQ. 5) THEN
	   IF ( ((MODE .AND. MSK_GREEN) .EQ. MSK_GREEN) .OR.
     &	        ((MODE .AND. MSK_NEW  ) .EQ. MSK_NEW  ) ) THEN
	      CALL RETATT
	   ENDIF
	ENDIF
C
C Prepare for a new feature
C
	IF (INI_FEATURE(DATKND,DATTYP,LTYPE)) THEN
C
C Deal with arcs and circles - first set the relevant flag
C
	   IF ((MODE .AND. MSK_ARC) .EQ. MSK_ARC) THEN
	      IF ((MODE .AND. MSK_CLOSED) .EQ. MSK_CLOSED) THEN
	         IS_CIRCLE = .TRUE.
	      ELSE
	         IS_ARC = .TRUE.
	      ENDIF
C
C Output the points 
C
	      CALL COORD(DE(1),DN(1))
	      CALL COORD(DE(2),DN(2))
	      CALL COORD(DE(3),DN(3))
C
C Get the next element
C
	      DONE = (.NOT. GETLIN())
C
C Deal with lines and curves - first set the relevant flags
C
	   ELSE
	      IS_LINE  = .TRUE.
	      IS_CURVE = ((MODE .AND. MSK_SMOOTH) .EQ. MSK_SMOOTH)
C
C Output the first point
C
	      CALL COORD(DE(1),DN(1))
C
C Output the current point, only if we've read a something other than
C an attribute annotation point.
C
400	      IF (DO_ANNOTATION) THEN
		 IF ((MODE .AND. MSK_ANNO) .NE. MSK_ANNO) THEN
		    CALL COORD(DE(2),DN(2))
		 ENDIF
	      ELSE
		 CALL COORD(DE(2),DN(2))
	      ENDIF
C
C Save the mode and linetype
C
	      PREV_MODE = MODE
	      PREV_LTYPE = LTYPE
C
C Get the next element
C
	      DONE = (.NOT. GETLIN())
C
C Store the attribute annotation points if we have any.
C
	      IF (DO_ANNOTATION .AND.
     &		 ((MODE .AND. MSK_ANNO) .EQ. MSK_ANNO)) THEN
		 CALL RETATTANNO
	      ENDIF
C
C Repeat if we have not yet finished
C
C ***** note that when we implement point attributes, we will need *****
C ***** to call RETATT here (or in NEW_FEATURE ?) as well if the   *****
C ***** attributes have changed                                    *****
C
	      IF (.NOT. (NEW_FEATURE() .OR. DONE)) GO TO 400
	   ENDIF
C
C Write the feature to the IFF file
C
	   CALL WRITE_FEATURE
C
C Just get the next element if we can't deal with the last
C
	ELSE
	   DONE = (.NOT. GETLIN())
	ENDIF
C
C Check for errors
C
	IF (GIVE_UP) DONE = .TRUE.
C
C Branch back for test
C
	GO TO 200
C
C Finished current data type
C
500	CONTINUE
C
C Return
C
	RETURN
	END
