C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-08-11 13:13:18.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE GETATT(CURR_PTR,NEW_VAL,NEW_TEXT,NEW_LEN,MAX_LEN,
     &	                  INUM)
C
***	IDENT	11AU94
***	MODULE	GETATT
C
C	Copyright Laser-Scan Ltd., Cambridge, England.
C
C	Created, based on I2IMAP NONGRA				RJH 28-Jun-1989
CMOD    Call to XLWII4 now suppressed as Informap routine	ST  11-Aug-1994
C	no longer supported. Mod 1398.
C
C	CONVERT IMAP2I Utility - Get non-graphic attributes
C
C Description
C
C	Assumes kind 4 or 5
C
	IMPLICIT NONE
C
C Parameter Files
C
	INCLUDE 'CMN:IMAP2IMSG.PAR'	! message definitions
	INCLUDE	'LSL$CMNIFF:CB.STR'	! record structure definition
C
C Arguments
C
	INTEGER*4	CURR_PTR	! pointer into attribute table
C
	INTEGER*4	MAX_LEN		! max. attribute text length
C
	RECORD	/IFF_CBITEM/ NEW_VAL		! IFF attribute value
	BYTE		NEW_TEXT(MAX_LEN)	! IFF attribute text
	INTEGER*2	NEW_LEN			! and its length
C
	INTEGER*2	INUM		! INFORMAP attribute no.
C
C Common Blocks
C
	INCLUDE 'CMN:INFDAT.CMN'	! INFORMAP data
	INCLUDE	'CMN:TABLES.CMN'	! parameter tables
	INCLUDE	'LSL$CMNFRT:FRTACD.CMN'	! FRT ACD common block
C
C Functions called
C
	INTEGER*4	SIGCHS		! find sig. chars in string
C
C Local Variables
C
	INTEGER*2	CURR_COD	! current IFF attribute code
C
	INTEGER*2	ITYP		! INFORMAP attribute type
	INTEGER*2	ILEN		! INFORMAP attribute length
	INTEGER*2	IERR		! INFORMAP error code
C
	INTEGER*2	TMPINT		! integer attribute
	INTEGER*4	TMPLON		! attribute longword integer 
	REAL*4		TMPREA		! real attribute
	REAL*8		TMPDBL		! double precision attribute
	BYTE		TMPBUF(NGMAX)	! attribute as bytes
	EQUIVALENCE	(TMPBUF(1),TMPINT,TMPLON,TMPREA,TMPDBL)
CCCCC	INTEGER*4	TMPLON2		! long integer attribute
C
	INTEGER*4	TMPDSC(2)	! fake string descriptor 
	INTEGER*2	TMPLEN		! and the length part
	EQUIVALENCE	(TMPDSC(1),TMPLEN)
C
	LOGICAL		IGNORE		! ignore attribute ?
C
C Set up fake descriptor for attribute buffer
C
	TMPDSC(1) = 0			! zero type and class
	TMPDSC(2) = %LOC(TMPBUF)	! buffer address
	TMPLEN    = NGMAX		! length
C
C Initialise error flags
C
	IERR = 0
	IGNORE = .FALSE.
C
C and set the attribute code
C
	CURR_COD = ATTR_TAB(ATTR_COD,CURR_PTR)
C
C Find the INFORMAP attribute type
C
	CALL ITMFM(INUM,ITYP)
	IF (ITYP .EQ. -999) THEN
	   IGNORE = .TRUE.
C
C and the INFORMAP attribute length
C
	ELSE
	   CALL ITMLEN(INUM,ILEN)
	   IF (ILEN .EQ. 0) IGNORE = .TRUE.
	ENDIF
C
C Check for illegal attribute number
C
	IF (IGNORE) THEN
	   CALL LSL_PUTMSG(IMAP2I__ILLEGLATTNUM,ATTR_NAM(CURR_PTR))
	   CALL LSL_ADDMSG(IMAP2I__IMAPINFO,INUM,DATTYP)
C
C Now we can go ahead and get the actual attribute, depending on 
C its type - first the value field in AC's and CB's
C
	ELSE
	   IF ((ATTR_TAB(ATTR_FLD,CURR_PTR) .EQ. AC_VAL) .OR.
     &	       (ATTR_TAB(ATTR_FLD,CURR_PTR) .EQ. CB_COL)) THEN
C
C Deal with an integer
C
	      IF (ATTR_TAB(ATTR_TYP,CURR_PTR) .EQ. ACD_DATATYPE_I) THEN 
C
	         CALL NGGET(INUM,NGARY,TMPBUF,ILEN,IERR)
C
	         IF (ITYP .EQ. 0) THEN		! integer
	            IF (ILEN .EQ. 2) THEN	! word
	               NEW_VAL.I = TMPINT
	            ELSE			! attribute longword
CCCCCC                 CALL XLWII4(TMPLON,NEW_VAL.I)  ! removed RWH 29/7/94
	               NEW_VAL.I = TMPLON
	            ENDIF
C
	         ELSE IF (ITYP .GT. 0) THEN	! floating-point
	            IF (ILEN .EQ. 4) THEN	! real
	               NEW_VAL.I = NINT(TMPREA)
	            ELSE			! double precision
	               NEW_VAL.I = NINT(TMPDBL)
	            ENDIF
C
	         ELSE
	            IGNORE = .TRUE.
	         ENDIF
C
C Deal with a real
C
	      ELSEIF (ATTR_TAB(ATTR_TYP,CURR_PTR) .EQ. 
     &	              ACD_DATATYPE_R) THEN
C
	         CALL NGGET(INUM,NGARY,TMPBUF,ILEN,IERR)
C
	         IF (ITYP .EQ. 0) THEN		! integer
	            IF (ILEN .EQ. 2) THEN	! word
	               NEW_VAL.R = TMPINT
	            ELSE			! attribute longword
CCCCCC                 CALL XLWII4(TMPLON,TMPLON2)  ! removed RWH 29/7/94
	               NEW_VAL.R = TMPLON
	            ENDIF
C
	         ELSE IF (ITYP .GT. 0) THEN	! floating-point
	            IF (ILEN .EQ. 4) THEN	! real
	               NEW_VAL.R = TMPREA
	            ELSE			! double precision
	               NEW_VAL.R = TMPDBL 
	            ENDIF
C
	         ELSE
	            IGNORE = .TRUE.
	         ENDIF
C
C Deal with a string
C
	      ELSEIF (ATTR_TAB(ATTR_TYP,CURR_PTR) .EQ. 
     &	              ACD_DATATYPE_C) THEN
C
	         CALL NGOUT(INUM,NGARY,TMPBUF,ILEN,IERR)
C
	         IF (ITYP .LT. 0) THEN		! ASCII format
	            TMPLEN = MIN(LEN(NEW_VAL.C),ILEN)
	            IF (ILEN .GT. TMPLEN) THEN
	               CALL LSL_PUTMSG(IMAP2I__TRUNCATT,CURR_COD)
	               CALL LSL_ADDMSG(IMAP2I__IMAPINFO,INUM,DATTYP)
	            ENDIF
	            CALL EXPAND('%WS%S',NEW_VAL.C,TMPDSC)
C
	         ELSE
	            IGNORE = .TRUE.
	         ENDIF
	      ENDIF
C
C Now deal with an AC text field
C
	   ELSE
C
	      CALL NGOUT(INUM,NGARY,TMPBUF,ILEN,IERR)
C
	      IF (ITYP .LT. 0) THEN		! ASCII format
	         TMPLEN = MIN(MAX_LEN,ILEN)
	         IF (ILEN .GT. TMPLEN) THEN	! too big,
	            CALL LSL_PUTMSG(IMAP2I__TRUNCATT,CURR_COD)
	            CALL LSL_ADDMSG(IMAP2I__IMAPINFO,INUM,DATTYP)
	         ENDIF
	         CALL EXPAND('%W%S',NEW_TEXT,TMPDSC)
	         NEW_LEN = TMPLEN
C
	      ELSE
	         IGNORE = .TRUE.
	      ENDIF
	   ENDIF
C
C Check for incompatible attribute types
C
	   IF (IGNORE) THEN
	      CALL LSL_PUTMSG(IMAP2I__INCOMPATT,CURR_COD)
	      CALL LSL_ADDMSG(IMAP2I__IMAPINFO,INUM,DATTYP)
	   ENDIF
	ENDIF
C
C If there has been a PLUS error, output the appropriate message
C
	IF (IERR .NE. 0) THEN
	   IF ((IERR .EQ. -835) .OR. (IERR .EQ. -850)) THEN
	      CALL LSL_PUTMSG(IMAP2I__ILLEGLATTNUM,ATTR_NAM(CURR_PTR))
	   ELSE IF ((IERR .EQ. -836) .OR. (IERR .EQ. -851)) THEN
	      CALL LSL_PUTMSG(IMAP2I__ILLEGLATTLEN,ILEN)
	   ELSE
	      CALL LSL_PUTMSG(IMAP2I__UNKPLUS,IERR)
	   ENDIF
	   CALL LSL_ADDMSG(IMAP2I__IMAPINFO,INUM,DATTYP)
	ENDIF
C
C Return
C
	RETURN
	END
