C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-10-09 18:57:28.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C

        LOGICAL FUNCTION FDT_LINE(CURR_LINE,NUM_TO_READ,END_FILE)
C
***     IDENT   09OC87
***     MODULE  FDT_LINE
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RJH	08-Oct-1987
C
C	CONVERT IMAP2I Utility - 
C	Get a line from the facet descripton file
C
C Description
C
C
        IMPLICIT NONE
C
C Included Parameter Files
C
	INCLUDE 'CMN:IMAP2IMSG.PAR'	    ! message definitions
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'  ! LSLLIB message definitions
C
C Arguments
C
	INTEGER*4	CURR_LINE	! current line number
	INTEGER*4	NUM_TO_READ	! number of lines to read in
	LOGICAL		END_FILE	! reached end of file ?
C
C Common Blocks
C
	INCLUDE 'CMN:FILES.CMN'		! filenames
C
C Functions called
C
	INTEGER*4	FLRLIN		! read in a line
C
C Local Variables
C
	INTEGER*4	I		! counter
	INTEGER*4	ERRCOD		! LSLLIB error code
	INTEGER*4	RETCOD		! system error code
C
C Initialisation
C
	FDT_LINE = .FALSE.		! assume failure
	END_FILE = .FALSE.
C
C Read in the lines, one by one
C
	DO 100 I=1,NUM_TO_READ
C
	   ERRCOD = FLRLIN(,,,RETCOD)
C
C End of file
C
	   IF (ERRCOD .EQ. LSL__EOF) THEN
	      END_FILE = .TRUE.
	      GOTO 9999
C
C If unsuccessful output message
C
	   ELSEIF (.NOT. ERRCOD) THEN
	      CALL LSL_PUTMSG(IMAP2I__ERRRDFAC,FDTFIL(1:FDTLEN),
     &							CURR_LINE)
	      CALL LSL_ADDMSG(ERRCOD)
	      IF (ERRCOD .EQ. LSL__SYSREAD) CALL LSL_ADDMSG(RETCOD)
	      GOTO 9999
C
C Increment the current line number
C
	   ELSE
	      CURR_LINE = CURR_LINE + 1
	   ENDIF
100	CONTINUE
C
C Now reset the decoding pointer to the start of the line 
C
	CALL BSLN
C
C Assign function value on success
C
	FDT_LINE = .TRUE.
C
C Return
C
9999	RETURN
        END
