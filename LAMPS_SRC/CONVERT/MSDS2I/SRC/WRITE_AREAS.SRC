C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-02-14 10:03:54.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION WRITE_AREAS(EDGE,EDGE_PTR,
     &	                  MAX_EDGE_INDICES,EDGE_IX,EDGE_IX_PTR,
     &	                  AREA,AREA_PTR,FACE_IDS,
     &	                  ATTR_NAM,ATTR_VAL,COORDS)

C
***	IDENT	14FE90
***	MODULE	WRITE_AREAS
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C Author TJ Ibbs, 16 February 1988
C
C This routine writes out the coordinates for an area feature
C It returns TRUE if all went well, and FALSE otherwise
C
	IMPLICIT NONE
C
	INCLUDE	'HERE:STRUCTURES.PAR'
C
C arguments
	INTEGER		EDGE(11,*)
	INTEGER		EDGE_PTR
	INTEGER		MAX_EDGE_INDICES
	INTEGER		EDGE_IX(6,*)
	INTEGER		EDGE_IX_PTR
	INTEGER		FACE_IDS(*)
	INTEGER		AREA(6,*)
	INTEGER		AREA_PTR
	INTEGER		ATTR_NAM(2,*)
	INTEGER		ATTR_VAL(2,*)
	INTEGER		COORDS(3,*)
C
C Message files
C
	INCLUDE	'HERE:MSDS2IMSG.PAR'
C
C Common files
C
	INCLUDE	'HERE:COMMANDS.CMN'
C
C Functions
C
	LOGICAL		LOOKUP_EDGES_BY_FACE
	LOGICAL		DISCARD_INTERIOR_EDGES
	LOGICAL		ORDER_EDGES
	LOGICAL		WRITE_EDGES
	LOGICAL		WRITE_ATTRIBUTES
C
C Workspace
C
	LOGICAL		OK		! function return
	INTEGER		I
	INTEGER*2	ISQ		! internal sequence number
	INTEGER*2	ISTAT(4)	! FS entry
C
C *****************************************************************************
C
	OK = .TRUE.		! assume success
	IF (HAD_LOG.OR.DEBUG_IFF) CALL WRITEF('Writing area features')
C
	IF (HAD_LOG.AND.KEEP_EDGES) CALL WRITEF('- Keeping interior edges')
C
C for each area, we must find all of the edges implicated (by using our
C knowledge of which faces the edges are in), sort them into an appropriate
C order, and then output them (reversing -ve edges if necessary)
C
	DO 2000 I = 1,AREA_PTR		! for each AREA ID
C
	   DEBUG_THIS_AREA = DEBUG_AREAS .AND. ( AREA(1,I).EQ.224 .OR.
     &						 AREA(1,I).EQ.225 .OR.
     &						 AREA(1,I).EQ.257 .OR.
     &						 AREA(1,I).EQ.296 )
C
	   IF (DEBUG_AREAS.AND..NOT.DEBUG_THIS_AREA) GOTO 2000
C
	   IF (DEBUG_THIS_AREA) CALL WRITEF('%(70-%)')
	   IF (DEBUG_THIS_AREA.OR.DEBUG_IFF)
     &				CALL WRITEF('Area ID %N',AREA(1,I))
C
C	 find out which edges contain references to the faces in the
C	 face list for this area
C
	   OK = LOOKUP_EDGES_BY_FACE( AREA(2,I), AREA(3,I),MAX_EDGE_INDICES,
     &	                        EDGE_IX,EDGE_IX_PTR,FACE_IDS,EDGE,EDGE_PTR)
	   IF (.NOT.OK) GOTO 9000
C
C	 if we are discarding interior edges (ie edges that form
C	 the internal boundaries between component faces) then
C	 we must first sort the edges in EDGE_IX. This will bring
C	 edges with the same index next to each other in the list.
C
	   CALL SORT_EDGES(EDGE_IX,EDGE_IX_PTR)
C
	   IF (.NOT.KEEP_EDGES) THEN
C
C	    if any of the edges are present as both +ve and -ve edges,
C	    then they separate two component faces of our area, and
C	    we can discard them
C
	      OK = DISCARD_INTERIOR_EDGES( AREA(2,I), AREA(3,I),FACE_IDS,
     &	                        EDGE,EDGE_IX,EDGE_IX_PTR)
	      IF (.NOT.OK) GOTO 9000
C
	   ENDIF
C
C	 we must now work out what order the edges should be output
C	 in - do this by looking at the start/end nodes
C
	   OK = ORDER_EDGES(AREA(1,I),EDGE_IX,EDGE_IX_PTR)
	   IF (.NOT.OK) GOTO 9000
C
C	 finally, start the new area feature, output its edges,
C	 and then close it
C
	   ISQ = 0
	   CALL IFFNF(AREA(1,I),ISQ)
C
	   ISTAT(1) = AREA(4,I)
	   CALL IFFFS(ISTAT)
C
	   OK = WRITE_ATTRIBUTES( AREA(5,I), AREA(6,I),ATTR_NAM,ATTR_VAL)
	   IF (.NOT.OK) GOTO 9000
C
	   CALL FLUSH_ZS(0)		! initialise output buffers
C
	   OK = WRITE_EDGES(AREA(1,I),COORDS,EDGE,EDGE_IX,EDGE_IX_PTR)
	   IF (.NOT.OK) GOTO 9000
C
	   CALL FLUSH_ZS(1)		! final flush
C
	   CALL IFFEF
C
	   IF (DEBUG_THIS_AREA) CALL WRITEF('%(70-%)')
C
2000	CONTINUE
C
	DEBUG_THIS_AREA = .FALSE.		! restore the status quo
C
9000	WRITE_AREAS = OK
	RETURN
	END
