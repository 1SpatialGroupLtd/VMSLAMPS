C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-02-13 10:19:46.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION READ_STRING(SCAN, VALUE, SIZE, DESCRIPTION )
C
***	IDENT	13FE90
***	MODULE	READ_STRING
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C Author TJ Ibbs, 3 February 1988
C
C A routine to read a character string, ignoring the preceding comma
C The routine returns TRUE if all went well, and FALSE otherwise
C
	IMPLICIT NONE
C
C Common files
C
	INCLUDE	'HERE:RECORD.CMN'
	INCLUDE	'HERE:BUFFER.CMN'
C
C Arguments
C
	LOGICAL			SCAN		! scanning or reading file?
	CHARACTER*(*)		VALUE		! out - the value we read
	INTEGER			SIZE		! out - number of characters
	CHARACTER*(*)		DESCRIPTION	!  in - the name of this field
C
C Message files
C
	INCLUDE	'HERE:MSDS2IMSG.PAR'
C
C Functions
C
	LOGICAL		READ_COMMA	! ignore a comma
	LOGICAL		RDCH		! read a single character
	CHARACTER*1	LAST_VALUE
	INTEGER		SZE
C
C Workspace
C
	BYTE		ICH		! single character
	INTEGER		POSN		! position in the string
	LOGICAL		OK		! function return
	LOGICAL		TOO_LONG	! true if it is
C
C *****************************************************************************
C firstly, ignore the comma
C
	OK = READ_COMMA()
	IF (.NOT.OK) GOTO 9000
C
C now read the character string, until our terminating ','
C
	SZE = 0
	TOO_LONG = .FALSE.
C
2000	IF ( RDCH(ICH) ) THEN
	   CALL LSL_PUTMSG( MSDS2I__UNEXPEOL,RECNUM,DESCRIPTION )
	   CALL LSL_ADDBUF(BUFFER,BUFLEN)
	   OK = .FALSE.
	   GOTO 9000
	ENDIF
C
C if the character is a comma, and it is preceded by a '\', then
C accept it as a comma. Otherwise, it terminates this field - unread
C it so that the next read will have a comma to ignore at its start
C
	IF ( ICH.EQ.COMMA ) THEN
	   IF ( SZE.EQ.0 ) THEN
	      CALL BSCH
	      GOTO 9000
	   ELSEIF ( LAST_VALUE.EQ.CHAR(BACKSLASH) ) THEN
	      IF (.NOT.SCAN) VALUE(SZE:SZE) = CHAR(COMMA)
	   ELSE
	      CALL BSCH
	      GOTO 9000
	   ENDIF
	ELSEIF (SZE.EQ.LEN(VALUE)) THEN
	   TOO_LONG = .TRUE.
	ELSE
	   SZE = SZE + 1
	   IF (.NOT.SCAN) VALUE(SZE:SZE) = CHAR(ICH)
	   LAST_VALUE = CHAR(ICH)
	ENDIF
C
	GOTO 2000
C
C *****************************************************************************
C
9000	IF (TOO_LONG) THEN
	  IF (.NOT.SCAN) CALL LSL_PUTMSG(MSDS2I__STRTOOLNG,RECNUM,LEN(VALUE))
	  IF (.NOT.SCAN) CALL LSL_ADDSTR(VALUE(1:SZE))
	  OK = .TRUE.				! fake it
	ENDIF
	READ_STRING = OK
	IF (.NOT.SCAN) SIZE = SZE
	RETURN
	END
