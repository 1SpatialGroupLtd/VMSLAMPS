C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-02-14 17:19:36.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C
C STRUCTURES
C Common file for storing the structures we read in from the MSDS dataset
C
C Ultimately, many of these structures should use `heap' space - perhaps
C via a mapped file or some such - so that the array sizes can be as large
C as necessary. Alternatively, indexed or IFF files might be used for
C storage. However, in the short term, we will just declare some large
C arrays.
C
C - Define some parameters for array sizes
C
C *****************************************************************************
C <A>	AREA_ID --> {FACE_ID}*
C
	INTEGER		ADDR_AREA
	INTEGER		AREA_PTR
	INTEGER		ADDR_FACE_IDS
	INTEGER		FACE_IDS_PTR
	INTEGER		MAX_FACE
C
C AREA	(1,)	= area ID
C	(2,)	= start index of face ID list in F_IDS
C	(3,)	= end   index of face ID list in F_IDS
C	(4,)	= feature code
C	(5,)	= start of attribute list in ATTRIBUTES
C	(6,)	= end   of attribute list in ATTRIBUTES
C
C AREA_PTR	is the index of the last entry in AREA
C FACE_IDS	is used to store the list of face IDs for each area
C FACE_IDS_PTR	is the index of the last entry in FACE_IDS
C
C *****************************************************************************
C <L>	LINE_ID --> {ORIENTED_EDGE_ID}*
C
	INTEGER		ADDR_LINE
	INTEGER		LINE_PTR
	INTEGER		ADDR_OEDGE_IDS
	INTEGER		OEDGE_IDS_PTR
	INTEGER		MAX_OEDGE
C
C LINE   (1,)	= line ID
C	 (2,)	= start index of oriented edge ID list in OEDGE_IDS
C	 (3,)	= end   index of oriented edge ID list in OEDGE_IDS
C	 (4,)	= feature code
C	 (5,)	= start of attribute list in ATTRIBUTES
C	 (6,)	= end   of attribute list in ATTRIBUTES
C
C LINE_PTR	is the index of the last entry in LINE
C OEDGE_IDS	is used to store the list of oriented edge IDs for each line
C OEDGE_IDS_PTR	is the index of the last entry in OEDGE_IDS
C
C *****************************************************************************
C <P>	POINT_ID --> {NODE_ID}*
C
	INTEGER		ADDR_POINT
	INTEGER		POINT_PTR
	INTEGER		ADDR_NODE_IDS
	INTEGER		NODE_IDS_PTR
C
C POINT	(1,)	= node ID
C	(2,)	= start index of node ID list in NODE_IDS
C	(3,)	= end   index of node ID list in NODE_IDS
C	(4,)	= feature code
C	(5,)	= start of attribute list in ATTRIBUTES
C	(6,)	= end   of attribute list in ATTRIBUTES
C
C POINT_PTR	is the index of the last entry in POINT
C NODE_IDS	is used to store the list of node IDs for each area
C NODE_IDS_PTR	is the index of the last entry in NODE_IDS
C
C *****************************************************************************
C <E>	EDGE_ID --> +EDGE_ID, -EDGE_ID, {LINE_ID,+/-}*,
C		    +FACE_ID, -FACE_ID,
C		    +NODE_ID, -NODE_ID, {COORDINATES}*
C					
	INTEGER		ADDR_EDGE
	INTEGER		EDGE_PTR
	INTEGER		ADDR_LINE_IDS
	INTEGER		LINE_IDS_PTR
C
	INTEGER		ADDR_COORDS
	INTEGER		COORDS_PTR
C
C EDGE	(1,)	I$EDGE	= edge ID
C	(2,)	P$EDGE	= positive edge ID
C	(3,)	N$EDGE	= negative edge ID
C	(4,)	L$FACE	= positive face ID - left  face
C	(5,)	R$FACE	= negative face ID - right face
C	(6,)	E$NODE	= positive node ID - end   node
C	(7,)	S$NODE	= negative node ID - start node
C	(8,)	S$LINE	= start of line ID list in L_IDS
C	(9,)	E$LINE	= end   of line ID list in L_IDS
C	(10,)	S$COORD	= start of coordinate list in COORDS
C	(11,)	E$COORD	= end   of coordinate list in COORDS
C
C EDGE_PTR	is the index of the last entry in EDGE
C
C LINE_IDS	is the list of line IDs for each edge
C LINE_IDS_PTR	is the index of the last entry in LINE_IDS
C
C COORDS	is the list of X,Y,Z coordinates for each edge
C COORDS_PTR	is the index of the last entry in COORDS
C
C *****************************************************************************
C <N>	NODE_ID --> COORDINATE
C
	INTEGER		ADDR_NODE
	INTEGER		NODE_PTR
C
C NODE	(1,)	= node ID
C	(2,)	= index of the coordinates of the node in COORDS
C NODE_PTR	is the index of the last entry in NODE
C
C *****************************************************************************
C attributes list
C
	INTEGER		ADDR_ATTR_NAM
	INTEGER		ADDR_ATTR_VAL
C
	INTEGER		ATTR_PTR
C
C ATTR_NAM	is the list of attribute names
C ATTR_VAL	is the list of corresponding attribute values
C ATTR_PTR	is the index of the last enry in ATTR_NAM and ATTR_VAL
C
C *****************************************************************************
C ignored list
C
	INTEGER		ADDR_IGNORE
C
	INTEGER		IGNORE_PTR
C
C *****************************************************************************
C
	COMMON /PRIMARY_STRUCTURES/ ADDR_AREA,  AREA_PTR,
     &				    ADDR_LINE,  LINE_PTR,
     &				    ADDR_POINT, POINT_PTR,
     &				    ADDR_EDGE,  EDGE_PTR,
     &				    ADDR_NODE,  NODE_PTR,
     &	                            MAX_FACE,   MAX_OEDGE
C
	COMMON /SECONDARY_STRUCTURES/   ADDR_FACE_IDS,  FACE_IDS_PTR,
     &					ADDR_OEDGE_IDS, OEDGE_IDS_PTR,
     &					ADDR_NODE_IDS,  NODE_IDS_PTR,
     &					ADDR_LINE_IDS,  LINE_IDS_PTR,
     &					ADDR_COORDS,    COORDS_PTR,
     &					           ATTR_PTR,
     &					ADDR_ATTR_NAM,
     &					ADDR_ATTR_VAL,
     &	                                ADDR_IGNORE,IGNORE_PTR
C
