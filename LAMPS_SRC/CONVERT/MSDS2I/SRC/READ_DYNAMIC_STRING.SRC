	LOGICAL FUNCTION READ_DYNAMIC_STRING(SCAN, VALUE, DESCRIPTION )
C
***	IDENT	15FE90
***	MODULE	READ_DYNAMIC_STRING
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C Author TJ Ibbs, 3 February 1988
C
C A routine to read a character string, ignoring the preceding comma
C The routine returns TRUE if all went well, and FALSE otherwise
C
	IMPLICIT NONE
C
C Common files
C
	INCLUDE	'HERE:RECORD.CMN'
	INCLUDE	'HERE:BUFFER.CMN'
C
C Arguments
C
	LOGICAL			SCAN		! scanning or reading file?
	INTEGER			VALUE(2)	! out - (desc of) the value
						!       we read
	CHARACTER*(*)		DESCRIPTION	!  in - the name of this field
C
C Message files
C
	INCLUDE	'HERE:MSDS2IMSG.PAR'
C
C Functions
C
	LOGICAL		READ_COMMA	! ignore a comma
	LOGICAL		RDCH		! read a single character
	CHARACTER*1	LAST_VALUE
C
C Workspace
C
	BYTE		ICH		! single character
	INTEGER		POSN		! position in the string
	LOGICAL		OK		! function return
	INTEGER		SZE
	INTEGER*4	ADDRESS
	INTEGER*2	LENGTH(2)
	INTEGER*4	LLEN
	EQUIVALENCE	(LENGTH,LLEN)
	DATA		LENGTH(2)/0/
C
C *****************************************************************************
C firstly, ignore the comma
C
	OK = READ_COMMA()
	IF (.NOT.OK) GOTO 9000
C
C start with nothing in the string
C
	SZE = 0
	IF (.NOT.SCAN) CALL STR$FREE1_DX(VALUE)
C
C now read the character string, until our terminating ','
C
2000	IF ( RDCH(ICH) ) THEN
	   CALL LSL_PUTMSG( MSDS2I__UNEXPEOL,RECNUM,DESCRIPTION )
	   CALL LSL_ADDBUF(BUFFER,BUFLEN)
	   OK = .FALSE.
	   GOTO 9000
	ENDIF
C
C if the character is a comma, and it is preceded by a '\', then
C accept it as a comma. Otherwise, it terminates this field - unread
C it so that the next read will have a comma to ignore at its start
C
	IF ( ICH.EQ.COMMA ) THEN
	   IF ( SZE.EQ.0 ) THEN
	      CALL BSCH
	      GOTO 9000
	   ELSEIF ( LAST_VALUE.EQ.CHAR(BACKSLASH) ) THEN
	      IF (.NOT.SCAN) THEN
	         CALL STR$ANALYZE_SDESC(VALUE,LENGTH(1),ADDRESS)
	         CALL STR$REPLACE(VALUE,VALUE,LLEN,LLEN,CHAR(COMMA))
	      ENDIF
	   ELSE
	      CALL BSCH
	      GOTO 9000
	   ENDIF
	ELSE
	   SZE = SZE + 1
	   IF (.NOT.SCAN) CALL STR$CONCAT(VALUE,VALUE,CHAR(ICH))
	   LAST_VALUE = CHAR(ICH)
	ENDIF
C
	GOTO 2000
C
C *****************************************************************************
C
9000	READ_DYNAMIC_STRING = OK
	RETURN
	END
