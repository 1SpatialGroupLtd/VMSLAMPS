C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-02-12 09:03:06.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION WRITE_EDGES( FID,COORDS,EDGE,EDGE_IX,EDGE_IX_PTR )
C
***	IDENT	12FE90
***	MODULE	WRITE_EDGES
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C Author TJ Ibbs, 17 February 1988
C
C This routine writes out the coordinates of the edges in the current
C edge chain
C
C Note that this has been done with little thought of efficiency
C - check it later on to see if it could be done better!
C
C It returns TRUE if all went well, and FALSE otherwise
C
	IMPLICIT NONE
C
C Argument
C
	INTEGER		FID		!  in - the feature ID
	INTEGER		COORDS(3,*)
	INTEGER		EDGE(11,*)
	INTEGER		EDGE_IX(6,*)
	INTEGER		EDGE_IX_PTR
C
C Message files
C
	INCLUDE	'HERE:MSDS2IMSG.PAR'
C
C Common files
C
	INCLUDE	'LSL$CMNLSL:EXPC.CMN'
C
	INCLUDE	'HERE:COMMANDS.CMN'
	INCLUDE	'HERE:STRUCTURES.PAR'
C
C Functions
C
	LOGICAL		WRITE_COORDS
C
C Workspace
C
	LOGICAL		OK		! function return
	INTEGER		I		! for DO loops
	INTEGER		PTR		! edge to output now
	LOGICAL		FIRST		! true if this is the first edge
	INTEGER		EX
	INTEGER		START_IX
	INTEGER		THIS_CHAIN	! edges in the current chain
	INTEGER		THIS_FEATURE	! edges in the whole feature
	LOGICAL		FIRST_TIME
	INTEGER		START_COORDS
C
C *****************************************************************************
C
	FIRST_TIME   = .TRUE.
	THIS_FEATURE = 0
C
	IF (DEBUG_IFF.OR.DEBUG_THIS_AREA) CALL WRITEF('Writing edges')
C
C Note that if this is a CLOSED feature, then we must stop when we get back
C to our first edge, and if it is an OPEN feature, then one edge will not
C have a next edge, and one won't have a previous. In the OPEN case, we will
C want to start our eventual output with the edge that doesn't have a
C previous edge.
C
C To start outputting an edge chain, we look for an edge that
C
C		1) starts an edge chain - ie its start node EDGE_IX(3,)
C		   is positive, since it does not have an edge ending at
C		   its start node. Such an edge will only be found for
C		   an OPEN feature, so we may not find one
C
C		2) has not already been output - that is, it does not
C		   have EDGE_IX(6,) set to -2. We are guaranteed to
C		   find one of these
C
1000	START_IX = -1
	FIRST = .TRUE.		! output first point of edge, with a penup
C
	DO 2000 I = 1,EDGE_IX_PTR
C
	   IF ( EDGE_IX(6,I).NE.-2 ) THEN
C
C	    this edge has not yet been output (or the value would be -2)
C	    so it is valid as an edge to start at
C
	      START_IX = I
C
C	    further, if there is no edge before it - that is, there
C	    is no edge listed as ending at its start node - then we
C	    can go immediately and start a new edge chain
C
	      IF ( EDGE_IX(3,I).GT.-1 ) GOTO 3000
C
	   ENDIF
C
2000	CONTINUE
C
C if we don't find any value, then fall over
C
	IF (START_IX.EQ.-1) THEN
	   CALL LSL_PUTMSG(MSDS2I__INTERNAL,'writing edges')
	   OK = .FALSE.
	   GOTO 9000
	ENDIF
C
C *****************************************************************************
C so we now have an edge to start at - output it, and each of its successors
C - work out which edge we want
C
3000	PTR = START_IX		! start with the first record
	THIS_CHAIN = 0
	IF (FIRST_TIME) THEN
	   IF (EDGE_IX(2,PTR)) THEN
	      START_COORDS = EDGE(S$COORD,EDGE_IX(1,PTR))
	   ELSE
	      START_COORDS = EDGE(E$COORD,EDGE_IX(1,PTR))
	   ENDIF
	ENDIF
C
C ***********************************************************************
C * Note that we don't currently check that there is actually a correct *
C * edge pointer in this record - we take it on faith!                  *
C ***********************************************************************
C
4000	EX = EDGE_IX(1,PTR)
C
	THIS_CHAIN   = THIS_CHAIN   + 1
	THIS_FEATURE = THIS_FEATURE + 1
C
C and output it
C	- arguments are the start and end of the coordinates in COORDS
C			whether this is a negative or positive edge
C			whether this is the first edge of this feature
C
C (if this is the first edge, we output the first point of the edge,
C  with an invisible line to it (penup) to it, otherwise we suppress it)
C
	IF (DEBUG_IFF) CALL WRITEF('Edge %N, with %N point%m',
     &					EDGE(I$EDGE,EX),
     &					EDGE(E$COORD,EX)-EDGE(S$COORD,EX)+1)
C
	IF (DEBUG_THIS_AREA) THEN
	   CALL WRITEF('%(20.%)')
	   CALL EXPAND('%I2: edge ID %I5',PTR,
     &					  EDGE(I$EDGE,EX))
	   IF (EDGE_IX(2,PTR)) THEN
	      CALL APPEND(' (+ve ID %I5),',EDGE(P$EDGE,EX))
	   ELSE
	      CALL APPEND(' (-ve ID %I5),',EDGE(N$EDGE,EX))
	   ENDIF
	   CALL TTWLIN
C
	   CALL EXPAND('   ')
	   CALL APPEND(' left face %I5, right face %I5,',EDGE(L$FACE,EX),
     &							 EDGE(R$FACE,EX))
	   CALL APPEND(' start node %I5, end node %I5,',EDGE(S$NODE,EX),
     &							EDGE(E$NODE,EX))
	   IF (EDGE_IX(6,PTR).EQ.-1) THEN
	      CALL APPEND(' chained to edge %N',EDGE_IX(5,PTR))
	   ELSE
	      CALL APPEND(' ends this chain')
	   ENDIF
	   CALL TTWLIN
	ENDIF
C
C does it bound the external face?
C
	IF ( EDGE(L$FACE,EX).EQ.1 .OR. EDGE(R$FACE,EX).EQ.1 ) THEN
	   CALL WRITEF('Area ID %N bounds the external face (face 1)',FID)
	ENDIF
C
	OK = WRITE_COORDS( EDGE(S$COORD,EX), EDGE(E$COORD,EX),
     &			   EDGE_IX(2,PTR),   FIRST, COORDS )
	IF (.NOT.OK) GOTO 9000
C
C note that we have output it
C
	EDGE_IX(6,PTR) = -2
C
C now sort out the next edge
C
	PTR = EDGE_IX(5,PTR)
C
	FIRST = .FALSE.
C
C and if it exists, and we haven't looped back on ourselves,
C go and output it
C
	IF ( PTR.NE.-1 .AND. PTR.NE.START_IX ) GOTO 4000
C
C so we should have output all of the edges
C - check whether we have or not
C
	IF (THIS_CHAIN.NE.EDGE_IX_PTR) THEN
C
C	 we have just output a partial feature - a sub-chain
C	 - if this was the first such sub-chain, then reflect
C	   the entire set of edges for the information of the user
C
CCC	   IF (FIRST_TIME.AND..NOT.DEBUG_THIS_AREA) THEN
CCC	      CALL LSL_PUTMSG(MSDS2I__CHECKERR,FID,EDGE_IX_PTR)
CCC	      CALL EXPAND('Edges: ')
CCC	      DO 7000 I = 1,EDGE_IX_PTR
CCC	         IF (EXPLEN.GT.60) THEN
CCC		    CALL TTWLIN
CCC		    CALL EXPAND('       ')
CCC	         ENDIF
CCC	         CALL APPEND('%N:%N,%N',I,EDGE_IX(3,I),EDGE_IX(4,I))
CCC	         IF (EDGE_IX(5,I).NE.-1) CALL APPEND('->%N',EDGE_IX(5,I))
CCC	         CALL APPEND(';')
CCC7000	      CONTINUE
CCC	      IF (EXPLEN.GT.0) CALL TTWLIN
CCC	      FIRST_TIME = .FALSE.
CCC	   ENDIF
CCCC
CCCC	 and output a message describing this particular sub-chain
CCCC
CCC	   CALL LSL_PUTMSG(MSDS2I__SUBCHAIN,THIS_CHAIN)
C
C	 if we have not yet output all of the edges in this feature,
C	 then output an invisible move back to start, and go
C	 back and output the rest
C
	   IF (FIRST_TIME) THEN
	      FIRST_TIME = .FALSE.
	   ELSE
	      OK = WRITE_COORDS( START_COORDS,START_COORDS,
     &	                        .TRUE.,.TRUE.,COORDS)
	      IF (.NOT.OK) GOTO 9000
	   ENDIF
C
	   IF (THIS_FEATURE.LT.EDGE_IX_PTR) GOTO 1000
C
	ENDIF
C
C *****************************************************************************
C
9000	WRITE_EDGES = OK
	RETURN
	END
