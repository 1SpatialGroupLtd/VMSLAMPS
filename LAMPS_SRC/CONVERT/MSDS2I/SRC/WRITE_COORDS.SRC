	LOGICAL FUNCTION WRITE_COORDS(START,END,POSITIVE,FIRST,COORDS)
C
***	IDENT	09FE90
***	MODULE	WRITE_COORDS
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C Author TJ Ibbs, 17 February 1988
C
C This routine writes out the coordinates for an edge
C It returns TRUE if all went well, and FALSE otherwise
C
	IMPLICIT NONE
C
C Arguments
C
	INTEGER		START		! start of coords in COORDS
	INTEGER		END		! end of ditto
	LOGICAL		POSITIVE	! true if this is a +ve edge
	LOGICAL		FIRST		! true if this is the first edge
C					! of the feature
	INTEGER		COORDS(3,*)	! array of coordinates to output from
C
C Message files
C
	INCLUDE	'HERE:MSDS2IMSG.PAR'
C
C Common files
C
	INCLUDE	'HERE:COMMANDS.CMN'
	INCLUDE	'HERE:OUTPUT_BUFFER.CMN'
C
	INCLUDE	'LSL$CMNLSL:EXPC.CMN'
C
C Workspace
C
	LOGICAL		OK		! function return
	INTEGER		I		! position in COORDS
	INTEGER		STEP		! direction of DO loop
	INTEGER		FROM,TO		! start and end of DO loop
	REAL		X,Y,Z
C
C *****************************************************************************
C
	OK = .TRUE.		! assume success
C
C If FIRST is true, then this is the first edge of the feature, and we output
C all of its points, starting with a penup.
C Otherwise, we ignore the first point, and start with a pendown.
C
C If POSITIVE is TRUE, then we output the coordinates in the obvious order.
C Otherwise we output them backwards.
C
	IF (FIRST) THEN
	   CALL FLUSH_ZS(1)		! flush out any existing points
	   IENDS = PENUP		! start with pen up
	ENDIF
C
	IF (POSITIVE) THEN
	   FROM = START
	   TO   = END
	   STEP = 1
	ELSE
	   FROM = END
	   TO   = START
	   STEP = -1
	ENDIF
C
	IF (.NOT.FIRST) FROM = FROM + STEP
C
C now loop to output all of the points for this edge
C
	DO 2000 I = FROM,TO,STEP
C
	   X = FLOAT(COORDS(1,I) - ORIGIN(1)) /DIVIDE_BY
	   Y = FLOAT(COORDS(2,I) - ORIGIN(2)) /DIVIDE_BY
	   Z = FLOAT(COORDS(3,I) - ORIGIN(3)) /DIVIDE_BY
C
C ignore duplicated points (in X and Y)
	   IF (X.EQ.ZSBUF(1,ZSBUF_PTR).AND.Y.EQ.ZSBUF(2,ZSBUF_PTR)) GOTO 2000
C
	   ZSBUF_PTR = ZSBUF_PTR + 1
C
	   ZSBUF(1,ZSBUF_PTR) = X
	   ZSBUF(2,ZSBUF_PTR) = Y
	   ZSBUF(3,ZSBUF_PTR) = Z
C
	   IF (ZSBUF_PTR.GE.MAX_ZSBUF) CALL FLUSH_ZS(1)
C
2000	CONTINUE
C
	WRITE_COORDS = OK
	RETURN
	END
