C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-02-16 14:00:50.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION CMDLINE
C
***	IDENT	16FE90
***	MODULE	CMDLINE
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C Author TJ Ibbs, 1 February 1988
C
C To read the command line and pack its data away safely
C - returns TRUE if we succeed, and FALSE if we should EXIT
C
	IMPLICIT NONE
C
C message definition files
C
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE	'HERE:MSDS2IMSG.PAR'
C
C common files
C
	INCLUDE	'LSL$CMNLSL:CLD.CMN'		! for command line reading
	INCLUDE	'LSL$CMNLSL:FILENAME.CMN'	! for HAD_VER and lengths
	INCLUDE	'HERE:COMMANDS.CMN'		! qualifiers
	INCLUDE	'HERE:FILES.CMN'		! filenames
C
	INCLUDE	'HERE:LUNS.PAR'
C
C externals
C
	INTEGER		MSDS2I_CLD
	EXTERNAL	MSDS2I_CLD
C
C functions
C
	LOGICAL		DCL_STARTUP		! start command line off
	LOGICAL		DCL_FILE		! read a file name
	LOGICAL		DCL_QUAL		! and a qualifier
	LOGICAL		DCL_INT			! and an integer
	LOGICAL		DCL_REAL		! and a real
	LOGICAL		READ_FEATURE_TABLE
	INTEGER		STR$COPY_DX
C
C workspace
C
	LOGICAL		OK			! return from DCL_xxx
	LOGICAL		ABSENT			! filename absent?
	LOGICAL		HAD_QUAL		! had global qualifier?
	LOGICAL		PRESENT			! had local  qualifier?
	LOGICAL		NEGATED			! local qualifier negated?
C
	INTEGER		IERR
C
C **********************************************************************
C
	CMDLINE  = .FALSE.		! assume failure
	WANT_IFF = .TRUE.		! assume that we want the IFF file
C
C **********************************************************************
C and read in the command line
C
	OK = DCL_STARTUP( 'MSDS2I',		! command verb
     &			  .FALSE.,		! don't burst parameter lists
     &			  MSDS2I_CLD,		! our CLD file
     &			  .TRUE. )		! deal with errors itself
C
	IF ( .NOT.OK ) GOTO 9000		! failed - give up with status
C
C **********************************************************************
C INFILE - determine our input file
C
	OK = DCL_FILE( 'INFILE',		! qualifier name
     &		       'LSL$MSDS:MSDS.NFF',	! default filename
     &		       ABSENT,			! out - was name absent?
     &		       .FALSE.,			! only one file to process
     &		       .TRUE. )			! deal with errors itself
C
	IF ( .NOT.OK ) GOTO 9000		! failed - give up with status
C
C the filename is now in FILARY(1) - put it into our own space
C
	CALL INI1DSC(INFILE)		! iniltialise as dynamic descriptor
	OK = STR$COPY_DX(INFILE,FILARY(1)(1:FIL_LEN(1)))
	IF (.NOT.OK) THEN
	   CALL LSL_PUTMSG(MSDS2I__STRNGERR)
	   CALL LSL_ADDMSG(OK)
	   GOTO 9000
	ENDIF
C
C **********************************************************************
C OUTFILE - determine our output file
C
	OK = DCL_FILE( 'OUTFILE',		! qualifier name
     &		       'LSL$IF:.IFF',		! default filename
     &		       ABSENT,			! out - was name absent?
     &		       .FALSE.,			! only one file to process
     &		       .TRUE. )			! deal with errors itself
C
	IF ( .NOT.OK ) GOTO 9000		! failed - give up with status
C
C the filename is now in FILARY(1) - put it into our own space
C
C
C the filename is now in FILARY(1) - put it into our own space
C
	CALL INI1DSC(IFFILE)		! iniltialise as dynamic descriptor
	OK = STR$COPY_DX(IFFILE,FILARY(1)(1:FIL_LEN(1)))
	IF (.NOT.OK) THEN
	   CALL LSL_PUTMSG(MSDS2I__STRNGERR)
	   CALL LSL_ADDMSG(OK)
	   GOTO 9000
	ENDIF
C
C **********************************************************************
C /LOG - get this first so we know if we should output messages
C		
	OK=DCL_QUAL( 'LOG',HAD_LOG,PRESENT,NEGATED,.TRUE. )
	IF ( .NOT.OK ) GOTO 9000
C
C **********************************************************************
C /OUTPUT=file - output a log file
C
C	OK=DCL_QUAL( 'OUTPUT',HAD_OUTPUT,PRESENT,NEGATED,.TRUE. )
C	IF ( .NOT.OK ) GOTO 9000
C
C	IF ( HAD_OUTPUT ) THEN
C 	   OK = DCL_FILE( 'OUTPUT','MSDS2I.LOG',ABSENT,.TRUE.,.TRUE. )
C	   IF ( .NOT.OK ) GOTO 9000
C
C	   OUTPUT      = FILARY(1)(:FIL_LEN(1))
C	   OUTPUT_LEN  = FIL_LEN(1)
C	ENDIF
C
C **********************************************************************
C /DEBUG - produce debugging information
C
	OK=DCL_QUAL( 'DEBUG',HAD_QUAL,PRESENT,NEGATED,.TRUE. )
	IF ( .NOT.OK ) GOTO 9000
C
 	IF ( HAD_QUAL ) THEN
	   OK = DCL_QUAL( 'DEBUG.LIST',DEBUG_LIST,PRESENT,NEGATED,.TRUE. )
	   IF ( .NOT.OK ) GOTO 9000
	   OK = DCL_QUAL( 'DEBUG.ATTRIBUTES',DEBUG_ATTR,
     &						  PRESENT,NEGATED,.TRUE. )
	   IF ( .NOT.OK ) GOTO 9000
	   OK = DCL_QUAL( 'DEBUG.NAMES',DEBUG_NAME,
     &						  PRESENT,NEGATED,.TRUE. )
	   IF ( .NOT.OK ) GOTO 9000
	   OK = DCL_QUAL( 'DEBUG.STATISTICS',DEBUG_STAT,
     &						  PRESENT,NEGATED,.TRUE. )
	   IF ( .NOT.OK ) GOTO 9000
	   OK = DCL_QUAL( 'DEBUG.IFF',DEBUG_IFF,
     &						  PRESENT,NEGATED,.TRUE. )
	   IF ( .NOT.OK ) GOTO 9000
	   OK = DCL_QUAL( 'DEBUG.KEEP_EDGES',KEEP_EDGES,
     &						  PRESENT,NEGATED,.TRUE. )
	   IF ( .NOT.OK ) GOTO 9000
	   OK = DCL_QUAL( 'DEBUG.AREAS',DEBUG_AREAS,
     &						  PRESENT,NEGATED,.TRUE. )
	   IF ( .NOT.OK ) GOTO 9000
	ELSE
	   DEBUG_LIST = .FALSE.
	   DEBUG_ATTR = .FALSE.
	   DEBUG_NAME = .FALSE.
	   DEBUG_STAT = .FALSE.
	   DEBUG_IFF  = .FALSE.
	   KEEP_EDGES = .FALSE.
	   DEBUG_AREAS = .FALSE.
	ENDIF
C
	IF (DEBUG_AREAS) THEN
	   CALL WRITEF('--- TERAS benchmark specific qualifier selected')
	   CALL WRITEF('--- Debugging area features 224,225,257 and 296')
	ENDIF
C
C If the user said /DEBUG=ATTRIBUTES or /DEBUG=NAMES (or both) then we
C will suppress the output of the IFF file
C
	IF ( DEBUG_ATTR .OR. DEBUG_NAME ) THEN
	   WANT_IFF = .FALSE.
	   CALL WRITEF('*** Output of IFF file suppressed ***')
	ENDIF
C
C **********************************************************************
C /DIVIDE_BY=integer	value to divide by to get IFF units
C
	OK=DCL_QUAL( 'DIVIDE_BY',HAD_QUAL,PRESENT,NEGATED,.TRUE. )
	IF ( .NOT.OK ) GOTO 9000
C
 	IF ( HAD_QUAL ) THEN
	   OK = DCL_INT( 'DIVIDE_BY', .TRUE. )
	   IF ( .NOT.OK ) GOTO 9000
C
	   DIVIDE_BY = IARRAY(1)
	ELSE
	   DIVIDE_BY = 100		! default value
	ENDIF
C
C **********************************************************************
C /ORIGIN=int,int,int	define the origin (in MSDS coords)
C
	OK=DCL_QUAL( 'ORIGIN',HAD_QUAL,PRESENT,NEGATED,.TRUE. )
	IF ( .NOT.OK ) GOTO 9000
C
 	IF ( HAD_QUAL ) THEN
	   OK = DCL_INT( 'ORIGIN', .TRUE. )
	   IF ( .NOT.OK ) GOTO 9000
C
	   IF ( NUMINT.NE.2 ) THEN
	      CALL LSL_PUTMSG( MSDS2I__ORIGIN )
	      OK = .FALSE.
	      GOTO 9000
	   ENDIF
C
	   ORIGIN(1) = IARRAY(1)
	   ORIGIN(2) = IARRAY(2)
	   ORIGIN(3) = 0
C
	   HAD_ORIGIN = .TRUE.
	ELSE
	   HAD_ORIGIN = .FALSE.
	ENDIF
C
C **********************************************************************
C /SCALE=int	scale of the sheet
C
	OK=DCL_QUAL( 'SCALE',HAD_QUAL,PRESENT,NEGATED,.TRUE. )
	IF ( .NOT.OK ) GOTO 9000
C
 	IF ( HAD_QUAL ) THEN
	   OK = DCL_INT( 'SCALE', .TRUE. )
	   IF ( .NOT.OK ) GOTO 9000
C
	   SCALE = IARRAY(1)
	ELSE
	   SCALE = 50 000		! default value
	ENDIF
C
C **********************************************************************
C /TRANSLATION=file - get the feature code translation file
C
	OK = DCL_QUAL( 'TRANSLATION',HAD_QUAL,PRESENT,NEGATED,.TRUE. )

C
	IF ( HAD_QUAL ) THEN
	   OK = DCL_FILE( 'TRANSLATION','LSL$LOOKUP:MSDS.TRAN',
     &			  ABSENT,.FALSE.,.TRUE. )
	   IF ( .NOT.OK ) GOTO 9000		! failed - give up with status
C
	ELSE
	   FILARY(1)  = 'LSL$LOOKUP:MSDS.TRAN'
	   FIL_LEN(1) = 20
	ENDIF
C
	OK = READ_FEATURE_TABLE(FILARY(1)(:FIL_LEN(1)),TRANS_LUN,IERR)
	IF (.NOT.OK) GOTO 9000
C
C **********************************************************************
C and that is our input line processing finished
C - if we reach here then it succeeded - report as much
C
	CMDLINE = .TRUE.
C
C and return
C
9000	RETURN
      	END
