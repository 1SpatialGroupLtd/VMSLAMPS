C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-02-14 11:37:30.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION CLOSE_IFF()
C
***     MODULE CLOSE_IFF
***     IDENT  14FE90
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author Tony J Ibbs, 8 February 1988
C
C Closes IFF file, writing the relevant information to the header entries
C
	IMPLICIT NONE
C
C Message definitions
C
	INCLUDE 'HERE:MSDS2IMSG.PAR'
C
C Common files
C
	INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'	!  General IFF user interface
	INCLUDE 'LSL$CMNIFF:MD2DES.CMN'	!  Common for version 2 MD
C
	INCLUDE	'HERE:COMMANDS.CMN'
	INCLUDE	'HERE:IFF.CMN'
	INCLUDE	'HERE:LUNS.PAR'
C
C Workspace
C
	INTEGER*2	IECODE,IELEN
	REAL		CPTS(4,4)	! Control points
C
	INTEGER		NW,SW,SE,NE
	PARAMETER	(NW=1,SW=2,SE=3,NE=4)
	INTEGER		XIN,YIN,XOT,YOT
	PARAMETER	(XIN=1,YIN=2,XOT=3,YOT=4)
	INTEGER		XMIN,XMAX,YMIN,YMAX
	PARAMETER	(XMIN=1,XMAX=2,YMIN=3,YMAX=4)
C
C ........................................................................
C Assume that it works
C
	CLOSE_IFF = .TRUE.
C
C ........................................................................
C Write the end-of-layer, and then update the NO entry
C
	CALL IFFUNO(NO_POSN)
	CALL IFFEO
C
C Write the other things required to end an IFF file
C
	CALL IFFEM
	CALL IFFEJ
C
C Work out our range as real numbers
C
	RANGE(1) = FLOAT(IRANGE(XMIN) - ORIGIN(1)) /DIVIDE_BY
	RANGE(2) = FLOAT(IRANGE(XMAX) - ORIGIN(1)) /DIVIDE_BY
	RANGE(3) = FLOAT(IRANGE(YMIN) - ORIGIN(2)) /DIVIDE_BY
	RANGE(4) = FLOAT(IRANGE(YMAX) - ORIGIN(2)) /DIVIDE_BY
C
C And move back to the RA entry
C
	CALL IFFPKE( IECODE,IELEN,RA_POSN )
	IF ( IELEN.EQ.-1 .OR. IECODE.NE.'RA' ) THEN
	   CALL LSL_PUTMSG(MSDS2I__UPDENT,'RA',IECODE,IELEN)
	   CLOSE_IFF = .FALSE.
	   GOTO 9999
	ELSE
	   CALL EIHWR( RANGE,4,1 )
	ENDIF
C
	IF ( DEBUG_IFF ) THEN
	   CALL WRITEF('Integer range is %I12,%I12,%I12,%I12',
     &			IRANGE(1),IRANGE(2),IRANGE(3),IRANGE(4))
	   CALL WRITEF('Real range is    %F12.3,%F12.3,%F12.3,%F12.3',
     &			RANGE(1),RANGE(2),RANGE(3),RANGE(4))
	ENDIF
C
C Now deal with the map descriptor
C
	MATV2 = 2			! type 2
C
	MD2LOC(1) = DBLE(ORIGIN(1))/DIVIDE_BY
	MD2LOC(2) = DBLE(ORIGIN(2))/DIVIDE_BY
	MD2SCL    = SCALE
C
	CALL IFFPKE( IECODE,IELEN,MD_POSN )
	IF ( IELEN.EQ.-1 .OR. IECODE.NE.'MD' ) THEN
	   CALL LSL_PUTMSG(MSDS2I__UPDENT,'MD',IECODE,IELEN)
	   CLOSE_IFF = .FALSE.
	   GOTO 9999
	ELSE
	   CALL EIHWI(MD2ARR,MD2LEN,1 )
	ENDIF
C
C Now deal with the control points
C
	CPTS(XIN,NW) = RANGE(XMIN)
	CPTS(XOT,NW) = RANGE(XMIN)
	CPTS(YIN,NW) = RANGE(YMAX)
	CPTS(YOT,NW) = RANGE(YMAX)
C
	CPTS(XIN,SW) = RANGE(XMIN)
	CPTS(XOT,SW) = RANGE(XMIN)
	CPTS(YIN,SW) = RANGE(YMIN)
	CPTS(YOT,SW) = RANGE(YMIN)
C
	CPTS(XIN,SE) = RANGE(XMAX)
	CPTS(XOT,SE) = RANGE(XMAX)
	CPTS(YIN,SE) = RANGE(YMIN)
	CPTS(YOT,SE) = RANGE(YMIN)
C
	CPTS(XIN,NE) = RANGE(XMAX)
	CPTS(XOT,NE) = RANGE(XMAX)
	CPTS(YIN,NE) = RANGE(YMAX)
	CPTS(YOT,NE) = RANGE(YMAX)
C
	CALL IFFPKE( IECODE,IELEN,CP_POSN )
	IF ( IELEN.EQ.-1 .OR. IECODE.NE.'CP' ) THEN
	   CALL LSL_PUTMSG(MSDS2I__UPDENT,'CP',IECODE,IELEN)
	   CLOSE_IFF = .FALSE.
	   GOTO 9999
	ELSE
	   CALL EIHWR( CPTS,16,1 )
	ENDIF
C
C And thus close the IFF file
C
	CALL IFFCLO(IFFILE_LUN)
C
C ........................................................................
C And return - that's all we do
C
9999	RETURN
	END
