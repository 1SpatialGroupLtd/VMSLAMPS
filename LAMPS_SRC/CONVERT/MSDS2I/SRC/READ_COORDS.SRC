C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-02-12 13:09:28.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION READ_COORDS(SCAN,COORDS,COORDS_PTR,EDGE,EDGE_PTR,
     &	                              NODE,NODE_PTR)
C
***	IDENT	12FE90
***	MODULE	READ_COORDS
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C Author TJ Ibbs, 8 February 1988
C
C This routine reads in the coordinates for a node or edge
C It returns TRUE if all went well, and FALSE otherwise
C
	IMPLICIT NONE
C
C arguments
	LOGICAL		SCAN		! whether scanning or reading file
	INTEGER		COORDS(3,*)
	INTEGER		COORDS_PTR
	INTEGER		EDGE(11,*)
	INTEGER		EDGE_PTR
	INTEGER		NODE(2,*)
	INTEGER		NODE_PTR
C
C Message files
C
	INCLUDE	'HERE:MSDS2IMSG.PAR'
C
C Common files
C
	INCLUDE	'HERE:COMMANDS.CMN'
	INCLUDE	'HERE:RECORD.CMN'
	INCLUDE 'HERE:STRUCTURES.PAR'
	INCLUDE	'HERE:IFF.CMN'
C
C Functions
C
	LOGICAL		READ_INTEGER	! read a comma-preceded integer
C
C Workspace
C
	LOGICAL		OK		! function return
	INTEGER		I
	INTEGER		START,END	! positions in COORDS
	INTEGER		X,Y,Z		! the coordinates
C
C *****************************************************************************
C
	OK = .TRUE.		! assume success
C
C note the start and end of our coordinate list in COORDS, and check that it
C will fit
C
	START = COORDS_PTR + 1
	END   = START + COORD_COUNT - 1
C
C otherwise loop reading the coordinates into COORDS
C
	DO 2000 I = START,END
C
	   OK = READ_INTEGER( X, 'X coordinate' )
	   IF (.NOT.OK) GOTO 9000
	   OK = READ_INTEGER( Y, 'Y coordinate' )
	   IF (.NOT.OK) GOTO 9000
	   OK = READ_INTEGER( Z, 'Z coordinate' )
	   IF (.NOT.OK) GOTO 9000
C
	   IF (DEBUG_LIST) CALL WRITEF('	%N:X,Y,Z=%N,%N,%N',I,X,Y,Z)
C
	   IF (.NOT.SCAN) THEN
	      IF (X.LT.IRANGE(1)) IRANGE(1) = X	! Xmin
	      IF (X.GT.IRANGE(2)) IRANGE(2) = X	! Xmax
	      IF (Y.LT.IRANGE(3)) IRANGE(3) = Y	! Ymin
	      IF (Y.GT.IRANGE(4)) IRANGE(4) = Y	! Ymax
C
	      COORDS(1,I) = X
	      COORDS(2,I) = Y
	      COORDS(3,I) = Z
	   ENDIF
C
2000	CONTINUE
C
C and update the relevant pointers
C
	COORDS_PTR = END
C
	IF (.NOT.SCAN) THEN
	   IF ( RECORD_TYPE.EQ.5 ) THEN		! edge record
	      EDGE(S$COORD,EDGE_PTR) = START
	      EDGE(E$COORD,EDGE_PTR) = END
	   ELSE					! node record
	      NODE(2,NODE_PTR) = START		! one point only
	   ENDIF
	ENDIF
C
9000	READ_COORDS = OK
	RETURN
	END
