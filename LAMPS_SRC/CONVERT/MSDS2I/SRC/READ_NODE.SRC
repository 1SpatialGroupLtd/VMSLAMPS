C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-02-12 11:20:52.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION READ_NODE(SCAN,COORDS,COORDS_PTR,EDGE,EDGE_PTR,
     &	                              NODE,NODE_PTR)
C
***	IDENT	17FE88
***	MODULE	READ_NODE
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C Author TJ Ibbs, 5 February 1988
C
C This routine reads in a node record
C It returns TRUE if all went well, and FALSE otherwise
C
	IMPLICIT NONE
C
C arguments
	LOGICAL		SCAN		! whether reading or scanning file
	INTEGER		COORDS(3,*)
	INTEGER		COORDS_PTR
	INTEGER		EDGE(11,*)
	INTEGER		EDGE_PTR
	INTEGER		NODE(2,*)
	INTEGER		NODE_PTR
C
C Message files
C
	INCLUDE	'HERE:MSDS2IMSG.PAR'
C
C Common files
C
	INCLUDE	'HERE:COMMANDS.CMN'
	INCLUDE	'HERE:RECORD.CMN'
C
C Functions
C
	LOGICAL		IGNORE_BOUNDS	! ignore the bounding cuboid
	LOGICAL		READ_INTEGER	! read a comma-preceded integer
	LOGICAL		READ_COORDS	! read coordinates
	LOGICAL		IGNORE_POINTERS	! read the pointer list
C
C Workspace
C
	LOGICAL		OK		! function return
C
C *****************************************************************************
C check that we have room for this node
C
	NODE_PTR = NODE_PTR + 1
C
	IF (.NOT.SCAN) NODE(1,NODE_PTR) = ENTITY_ID	! remember our 'name'
C
C ignore the bounding cuboid
C
	OK = IGNORE_BOUNDS()
	IF (.NOT.OK) GOTO 9000
C
C next, read the isolation flag, and if that's non-zero, the face ID
C
	OK = READ_INTEGER( ISOLATION_FLAG, 'isolation flag' )
	IF (.NOT.OK) GOTO 9000
C
	IF (ISOLATION_FLAG.NE.0) THEN
	   OK = READ_INTEGER( FACE_ID, 'face ID' )
	   IF (.NOT.OK) GOTO 9000
	ENDIF
C
	IF (DEBUG_LIST) THEN
	   CALL EXPAND('	isolation flag = %N',ISOLATION_FLAG )
	   IF (ISOLATION_FLAG.EQ.0) THEN
	      CALL WRTAPP(' (no face ID)')
	   ELSE
	      CALL WRTAPP(', face ID = %N',FACE_ID)
	   ENDIF
	ENDIF
C
C read the coordinates for this node
C
	COORD_COUNT = 1			! only one point to read
C
	OK = READ_COORDS(SCAN,COORDS,COORDS_PTR,EDGE,EDGE_PTR,NODE,NODE_PTR)
	IF (.NOT.OK) GOTO 9000
C
C read the pointer count
C
	OK = READ_INTEGER( POINTER_COUNT, 'pointer count' )
	IF (.NOT.OK) GOTO 9000
C
C if the isolation flag is zero, then the pointer count is >= 1
C                                          otherwise it is >= 0
C
	IF ( (ISOLATION_FLAG.EQ.0 .AND. POINTER_COUNT.LT.0) .OR.
     &	     (ISOLATION_FLAG.NE.0 .AND. POINTER_COUNT.LT.1) ) THEN
C
	   CALL LSL_PUTMSG(MSDS2I__ISOLATE,ISOLATION_FLAG,POINTER_COUNT)
	   OK = .FALSE.
	   GOTO 9000
C
	ENDIF
C
C otherwise, read the pointer list
C
	OK = IGNORE_POINTERS()
	IF (.NOT.OK) GOTO 9000
C
9000	READ_NODE = OK
	RETURN
	END
