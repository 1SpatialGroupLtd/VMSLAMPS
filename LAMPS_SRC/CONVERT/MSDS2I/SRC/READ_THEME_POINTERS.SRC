C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-02-12 11:20:42.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION READ_THEME_POINTERS(SCAN)
C
***	IDENT	16FE88
***	MODULE	READ_THEME_POINTERS
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C Author TJ Ibbs, 8 February 1988
C
C This routine reads in the pointers to the containing theme
C for a node, edge, face or relation
C
C The routine returns TRUE if all went well, and FALSE otherwise
C
C ****************************************************************************
C * At the moment, it reads the pointers and ignores them. Ultimately, it    *
C * will read the contents of the pointer list into a common block	     *
C ****************************************************************************
C
	IMPLICIT NONE
C
C argument
	LOGICAL		SCAN		! scanning or reading file?
C
C Message files
C
	INCLUDE	'HERE:MSDS2IMSG.PAR'
C
C Common files
C
	INCLUDE	'HERE:COMMANDS.CMN'
	INCLUDE	'HERE:RECORD.CMN'
C
C Functions
C
	LOGICAL		READ_STRING	! read a comma-preceded string
C
C Workspace
C
	LOGICAL		OK		! function return
	INTEGER		I
C
C *****************************************************************************
C
	OK = .TRUE.		! assume success
C
C loop reading the pointers
C
	DO 2000 I = 1,POINTER_COUNT
	   OK = READ_STRING(SCAN, THEME_POINTER, THEME_LEN, 'relation pointer' )
	   IF (.NOT.OK) GOTO 9000
	   IF (DEBUG_LIST) CALL WRITEF('	related to %S',
     &					THEME_POINTER(1:THEME_LEN))
2000	CONTINUE
C
9000	READ_THEME_POINTERS = OK
	RETURN
	END
