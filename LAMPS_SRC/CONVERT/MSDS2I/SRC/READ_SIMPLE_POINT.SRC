C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-02-14 18:01:22.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION READ_SIMPLE_POINT(SCAN,POINT,POINT_PTR,
     &	                        NODE_IDS,NODE_IDS_PTR,
     &	                  ATTR_NAM,ATTR_VAL,ATTR_PTR,IG_PTR,IG_ARRAY)
C
***	IDENT	14FE90
***	MODULE	READ_SIMPLE_POINT
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C Author TJ Ibbs, 5 February 1988
C
C This routine reads in a simple point feature
C It returns TRUE if all went well, and FALSE otherwise
C
	IMPLICIT NONE
C
	INCLUDE	'HERE:STRUCTURES.PAR'
C
C arguments
	LOGICAL		SCAN
	INTEGER		POINT(POINT_WIDTH,*)
	INTEGER		POINT_PTR
	INTEGER		NODE_IDS(*)
	INTEGER		NODE_IDS_PTR
C
	INTEGER		ATTR_NAM(DESC_WIDTH,*)
	INTEGER		ATTR_VAL(DESC_WIDTH,*)
	INTEGER		ATTR_PTR
	INTEGER		IG_PTR
	INTEGER		IG_ARRAY(IGNORE_WIDTH,*)
C
C Message files
C
	INCLUDE	'HERE:MSDS2IMSG.PAR'
C
C Common files
C
	INCLUDE	'HERE:COMMANDS.CMN'
	INCLUDE	'HERE:RECORD.CMN'
C
C Functions
C
	LOGICAL		IGNORE_BOUNDS	! ignore the bounding cuboid
	LOGICAL		READ_INTEGER	! read a comma-preceded integer
	LOGICAL		READ_STRING	! read a comma-preceded string
	LOGICAL		READ_DYNAMIC_STRING	! read a comma-preceded string
	LOGICAL		READ_ATTRIBUTES	! read the attribute list
	LOGICAL		READ_RELATIONS	! read the relations list
C
	INTEGER		TRANSLATE_FEATURE_NAME
C
C Workspace
C
	LOGICAL		OK		! function return
	INTEGER		DUMMY
C
C *****************************************************************************
C check that we have room for this point
C
	POINT_PTR = POINT_PTR + 1
C
	IF (.NOT.SCAN) POINT(1,POINT_PTR) = ENTITY_ID	! remember our 'name'
C
C ignore the bounding cuboid
C
	OK = IGNORE_BOUNDS()
	IF (.NOT.OK) GOTO 9000
C
C next, read the number of attributes
C
	OK = READ_INTEGER( ATTRIBUTE_COUNT, 'attribute count' )
	IF (.NOT.OK) GOTO 9000
C
C and then the name of this feature
C
	OK = READ_DYNAMIC_STRING(SCAN, FEATURE_NAME,'feature name' )
	IF (.NOT.OK) GOTO 9000
C
	IF (.NOT.SCAN.AND.(DEBUG_LIST.OR.DEBUG_NAME)) 
     &	                     CALL WRITEF('Feature "%S"',
     &					FEATURE_NAME)
C
C translate that into a feature code
C
	IF (.NOT.SCAN) THEN
	   POINT(4,POINT_PTR) = TRANSLATE_FEATURE_NAME(FEATURE_NAME)
C
	   IF (POINT(4,POINT_PTR).EQ.-1) THEN
	      CALL ADD_IGNORED(FEATURE_NAME,IG_PTR,IG_ARRAY)
	      POINT_PTR = POINT_PTR - 1
	      GOTO 9000
	   ENDIF

	ENDIF
C
C read the attribute list
C
	OK = READ_ATTRIBUTES(SCAN,'point', POINT(5,POINT_PTR),
     &	                  POINT(6,POINT_PTR),ATTR_NAM,ATTR_VAL,
     &	                  ATTR_PTR)
	IF (.NOT.OK) GOTO 9000
C
C how many relations are there?
C
	OK = READ_INTEGER( RELATION_COUNT, 'relation count' )
	IF (.NOT.OK) GOTO 9000
C
C read them in
C
	OK = READ_RELATIONS(SCAN,'point to node',
     &				NODE_IDS,NODE_IDS_PTR,
     &				POINT(2,POINT_PTR),POINT(3,POINT_PTR),
     &	                        DUMMY)
	IF (.NOT.OK) GOTO 9000
C
9000	READ_SIMPLE_POINT = OK
	RETURN
	END
