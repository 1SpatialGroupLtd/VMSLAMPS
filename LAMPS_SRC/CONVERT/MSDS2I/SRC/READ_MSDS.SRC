C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-02-14 17:14:06.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION READ_MSDS
C
***	IDENT	14FE90
***	MODULE	READ_MSDS
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C Author TJ Ibbs, 3 February 1988
C
C The main routine that controls the reading of the MSDS data.
C It reads each record from the dataset, and then interprets it 
C according to the record type.
C
C It returns TRUE if all went well, and FALSE otherwise
C
	IMPLICIT NONE
C
C Message files
C
	INCLUDE	'HERE:MSDS2IMSG.PAR'
C
C Common files
C
	INCLUDE	'HERE:COMMANDS.CMN'
	INCLUDE	'HERE:EDGES.CMN'
	INCLUDE 'HERE:FILES.CMN'
	INCLUDE	'HERE:IFF.CMN'
	INCLUDE	'HERE:RECORD.CMN'
	INCLUDE	'HERE:STRUCTURES.CMN'
C
C Functions
C
	LOGICAL		READ_RECORD
C
	LOGICAL		READ_HEADER
	LOGICAL		READ_COUNT
C
	LOGICAL		READ_COMPLEX_FEATURE
	LOGICAL		READ_SIMPLE_AREA
	LOGICAL		READ_SIMPLE_LINE
	LOGICAL		READ_SIMPLE_POINT
	LOGICAL		READ_FACE
	LOGICAL		READ_EDGE
	LOGICAL		READ_NODE
C
	LOGICAL		WRITE_AREAS
	LOGICAL		WRITE_LINES
	LOGICAL		WRITE_POINTS
C
	LOGICAL		GET_SPACE
C
C Workspace
C
	LOGICAL		OK		! function return
	LOGICAL		EOF		! ?end of file?
	INTEGER		OLD_TYPE	! last value of RECORD_TYPE
	LOGICAL		DISPLAY		! output a message
	LOGICAL		SCAN		! scanning or reading file?
C
C *****************************************************************************
C
	SCAN = .TRUE.
	CALL INI1DSC(FEATURE_NAME)	! initialise dynamic descriptor
C
10	RECNUM = 0			! no records read yet
	OLD_TYPE = -1			! say it again
C
	AREA_PTR = 0
	LINE_PTR = 0
	POINT_PTR= 0
	EDGE_PTR = 0
	NODE_PTR = 0
	FACE_IDS_PTR = 0
	OEDGE_IDS_PTR= 0
	NODE_IDS_PTR = 0
	LINE_IDS_PTR = 0
	COORDS_PTR   = 0
	ATTR_PTR     = 0
	IGNORE_PTR   = 0
C
	MAX_FACE  = 0
	MAX_OEDGE = 0
C
	IF (HAD_LOG) THEN
	   CALL WRITEF
	   IF (SCAN) THEN
	      CALL WRITEF('Scanning msds file "%S"...',INFILE)
	   ELSE
	      CALL WRITEF('Reading msds file "%S"....',INFILE)
	   ENDIF
	ENDIF
C
C read the first record - this must be the header record
C
	OK = READ_HEADER()
	IF (.NOT.OK) GOTO 9999
C
C the next record is the counter record, which tells us how many features
C there are (their concept of a feature) and how many topological records
C
	OK = READ_COUNT()
	IF (.NOT.OK) GOTO 9999
C
	IF (HAD_LOG) CALL WRITEF('%(70-%)')
C
C after this, read each record in turn, and trust that things occur in
C a sensible enough order
C
2000	OK = READ_RECORD(EOF)
	IF (.NOT.OK) THEN
	   IF (EOF) THEN
	      OK = .TRUE.		! end-of-file is quite OK
	      GOTO 6000			! next stage
	   ELSE
	      GOTO 9999
	   ENDIF
	ENDIF
C
	DISPLAY = DEBUG_LIST .OR. (HAD_LOG.AND.RECORD_TYPE.NE.OLD_TYPE)
C
	IF (DISPLAY) CALL EXPAND('Entity ID = %I5, type = ',
     &				     ENTITY_ID)
C
C Now work out which record we have
C
	IF ( RECORD_TYPE.EQ.0 ) THEN		! complex feature record
C
	   IF (DISPLAY) CALL WRTAPP('complex feature')
	   OK = READ_COMPLEX_FEATURE()
	   IF (.NOT.OK) GOTO 9999
C
	ELSEIF ( RECORD_TYPE.EQ.1 ) THEN	! simple area feature record
C
	   IF (DISPLAY) CALL WRTAPP('simple area feature')
	   OK = READ_SIMPLE_AREA(SCAN,%VAL(ADDR_AREA),AREA_PTR,
     &	                              %VAL(ADDR_FACE_IDS),FACE_IDS_PTR,
     &	                              %VAL(ADDR_ATTR_NAM),
     &	                              %VAL(ADDR_ATTR_VAL),
     &	                              ATTR_PTR,MAX_FACE,
     &	                              IGNORE_PTR,%VAL(ADDR_IGNORE))
	   IF (.NOT.OK) GOTO 9999
C
	ELSEIF ( RECORD_TYPE.EQ.2 ) THEN	! simple line feature record
C
	   IF (DISPLAY) CALL WRTAPP('simple line feature')
	   OK = READ_SIMPLE_LINE(SCAN,%VAL(ADDR_LINE),LINE_PTR,
     &	                              %VAL(ADDR_OEDGE_IDS),OEDGE_IDS_PTR,
     &	                              %VAL(ADDR_ATTR_NAM),
     &	                              %VAL(ADDR_ATTR_VAL),
     &	                              ATTR_PTR,MAX_OEDGE,
     &	                              IGNORE_PTR,%VAL(ADDR_IGNORE))
	   IF (.NOT.OK) GOTO 9999
C
	ELSEIF ( RECORD_TYPE.EQ.3 ) THEN	! simple point feature record
C
	   IF (DISPLAY) CALL WRTAPP('simple point feature')
	   OK = READ_SIMPLE_POINT(SCAN,%VAL(ADDR_POINT),POINT_PTR,
     &	                               %VAL(ADDR_NODE_IDS),NODE_IDS_PTR,
     &	                               %VAL(ADDR_ATTR_NAM),
     &	                               %VAL(ADDR_ATTR_VAL),
     &	                               ATTR_PTR,
     &	                              IGNORE_PTR,%VAL(ADDR_IGNORE))
	   IF (.NOT.OK) GOTO 9999
C
	ELSEIF ( RECORD_TYPE.EQ.4 ) THEN	! face record
C
	   IF (DISPLAY) CALL WRTAPP('face')
	   OK = READ_FACE(SCAN)
	   IF (.NOT.OK) GOTO 9999
C
	ELSEIF ( RECORD_TYPE.EQ.5 ) THEN	! edge/oriented edges record
C
	   IF (DISPLAY) CALL WRTAPP('edge')
	   OK = READ_EDGE(SCAN,%VAL(ADDR_EDGE),EDGE_PTR,
     &	                       %VAL(ADDR_LINE_IDS),LINE_IDS_PTR,
     &	                       %VAL(ADDR_COORDS),COORDS_PTR,
     &	                       %VAL(ADDR_NODE),NODE_PTR)
	   IF (.NOT.OK) GOTO 9999
C
	ELSEIF ( RECORD_TYPE.EQ.6 ) THEN	! node record
C
	   IF (DISPLAY) CALL WRTAPP('node')
	   OK = READ_NODE(SCAN,%VAL(ADDR_COORDS),COORDS_PTR,
     &	                       %VAL(ADDR_EDGE),EDGE_PTR,
     &	                       %VAL(ADDR_NODE),NODE_PTR)
	   IF (.NOT.OK) GOTO 9999
C
	ELSE
C
	   IF (DISPLAY) CALL WRTAPP('unknown')
	   CALL LSL_PUTMSG(MSDS2I__UNEXPREC,ENTITY_ID,RECORD_TYPE,RECNUM)
C
	ENDIF
C
	OLD_TYPE = RECORD_TYPE			! remember what type this is
	GOTO 2000				! read the next record
C
C ****************************************************************************
C
C if we have just scanned the data, then get space, and go and read it
6000	IF (.NOT.SCAN) GOTO 8000
	SCAN = .FALSE.
	OK = GET_SPACE()
	IF (.NOT.OK) GOTO 9999
C
C initialise string descriptors for attribute names and values
	CALL INIDSC(ATTR_PTR,%VAL(ADDR_ATTR_NAM),%VAL(ADDR_ATTR_VAL))
	GOTO 10
C
C ****************************************************************************
C Output the data we have collected
C
8000	IF (DEBUG_STAT) THEN
	   IF (HAD_LOG) CALL WRITEF('%(70-%)')
	   CALL WRITEF('Statistics')
	   CALL WRITEF('Number of features - area=%N, line=%N, point=%N',
     &			AREA_PTR,LINE_PTR,POINT_PTR)
	   CALL WRITEF('Number of smaller things - edges=%N,nodes=%N',
     &			EDGE_PTR,NODE_PTR)
	   CALL WRITEF('FACE IDs list is %N long',FACE_IDS_PTR)
	   CALL WRITEF('ORIENTED EDGE IDs list is %N long',OEDGE_IDS_PTR)
	   CALL WRITEF('NODE IDs list is %N long',NODE_IDS_PTR)
	   CALL WRITEF('LINE IDs list is %N long',LINE_IDS_PTR)
	   CALL WRITEF('Coordinate list is %N long',COORDS_PTR)
	   CALL WRITEF('Attribute list is %N long',ATTR_PTR)
	ENDIF
C
C report on any missing names in translation file
	IF (IGNORE_PTR.GT.0)
     &	            CALL WRITE_IGNORED(IGNORE_PTR,%VAL(ADDR_IGNORE))
C
C if we are not outputting an IFF file, we skip to the end at this point
C
	IF (.NOT.WANT_IFF) GOTO 9999
C
C otherwise, if the user didn't specify a local origin, work one out
C
	IF (.NOT.HAD_ORIGIN) THEN
	   ORIGIN(1) = IRANGE(1)
	   ORIGIN(2) = IRANGE(3)
	   ORIGIN(3) = 0.0
	ENDIF
C
	IF (HAD_LOG.OR.DEBUG_LIST.OR.
     &		       DEBUG_IFF.OR.DEBUG_STAT) THEN
C
	   CALL WRITEF('%(70-%)')
	   CALL WRITEF('Outputting data to IFF')
	   CALL WRITEF('Origin is %N,%N,%N',ORIGIN(1),ORIGIN(2),ORIGIN(3))
	   CALL WRITEF('Scale is 1:%N',SCALE)
	   CALL WRITEF('Coordinates will be divided by %N',DIVIDE_BY)
	   CALL WRITEF('%(70-%)')
C
	ENDIF
C
	OK = WRITE_AREAS(%VAL(ADDR_EDGE),EDGE_PTR,
     &	                 MAX_EDGE_INDICES,%VAL(ADDR_EDGE_IX),EDGE_IX_PTR,
     &	                 %VAL(ADDR_AREA),AREA_PTR,
     &	                 %VAL(ADDR_FACE_IDS),
     &	                 %VAL(ADDR_ATTR_NAM),%VAL(ADDR_ATTR_VAL),
     &	                 %VAL(ADDR_COORDS))
	IF (.NOT.OK) GOTO 9999
C
	IF (HAD_LOG) CALL WRITEF('%(70-%)')
C
	IF (DEBUG_AREAS) GOTO 9999
C
	OK = WRITE_LINES(%VAL(ADDR_LINE),LINE_PTR,
     &	                 %VAL(ADDR_OEDGE_IDS),
     &	                 %VAL(ADDR_EDGE),EDGE_PTR,
     &	                 MAX_EDGE_INDICES,%VAL(ADDR_EDGE_IX),EDGE_IX_PTR,
     &	                 %VAL(ADDR_ATTR_NAM),%VAL(ADDR_ATTR_VAL),
     &	                 %VAL(ADDR_COORDS))

	IF (.NOT.OK) GOTO 9999
C
	IF (HAD_LOG) CALL WRITEF('%(70-%)')
C
	OK = WRITE_POINTS(%VAL(ADDR_ATTR_NAM),%VAL(ADDR_ATTR_VAL),
     &	                  %VAL(ADDR_COORDS),
     &	                  %VAL(ADDR_POINT),POINT_PTR,
     &	                  %VAL(ADDR_NODE),NODE_PTR,
     &	                  %VAL(ADDR_NODE_IDS))
	IF (.NOT.OK) GOTO 9999
C
	IF (HAD_LOG) CALL WRITEF('%(70-%)')
C
C ****************************************************************************
C Sort out our return status
C
9999	READ_MSDS = OK
	RETURN
	END
