C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-02-13 18:26:30.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION READ_ATTRIBUTES(SCAN,WHAT,START,END,
     &	                  ATTR_NAM,ATTR_VAL,ATTR_PTR)
C
***	IDENT	13FE90
***	MODULE	READ_ATTRIBUTES
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C Author TJ Ibbs, 5 February 1988
C
C This routine reads in the attributes for a feature
C It returns TRUE if all went well, and FALSE otherwise
C
	IMPLICIT NONE
C
	INCLUDE	'HERE:STRUCTURES.PAR'
C
C Arguments
C
	LOGICAL		SCAN		! scanning or reading file?
	CHARACTER*(*)	WHAT		!  in - what they belong to
	INTEGER		START		! out - start of list in common
	INTEGER		END		! out - end of ditto
C
	INTEGER		ATTR_NAM(2,*)
	INTEGER		ATTR_VAL(2,*)
	INTEGER		ATTR_PTR
C
C Message files
C
	INCLUDE	'HERE:MSDS2IMSG.PAR'
C
C Common files
C
	INCLUDE	'HERE:COMMANDS.CMN'
	INCLUDE	'HERE:RECORD.CMN'
C
C Functions
C
	LOGICAL		READ_DYNAMIC_STRING	! read a comma-preceded string
	LOGICAL		READ_INTEGER	! read a comma-preceded integer
C
C Workspace
C
	LOGICAL		OK		! function return
	INTEGER		I
	INTEGER		MAX_LEN
	INTEGER		ATTR_START
	INTEGER		ATTR_END
C
C *****************************************************************************
C
	OK = .TRUE.		! assume success
C
C work out our start and end
C
	ATTR_START = ATTR_PTR + 1
	ATTR_END   = ATTR_START + ATTRIBUTE_COUNT - 1
C
	IF (.NOT.SCAN) THEN
	   START = ATTR_START
	   END = ATTR_END
	ENDIF
C
C loop reading the attributes
C - if DEBUG_LIST, then we write out a description of the attribute to
C   add to the rest of the description of the dataset that the program
C   is outputting
C - if DEBUG_ATTR, then we write out a description of the attribute
C   for use in cataloguing what attributes are present
C
	DO 2000 I = ATTR_START,ATTR_END
C
	   OK = READ_DYNAMIC_STRING(SCAN, ATTR_NAM(1,I),
     &	                        WHAT//'attribute name' )
	   IF (.NOT.OK) GOTO 9000
C
	   OK = READ_DYNAMIC_STRING(SCAN, ATTR_VAL(1,I),
     &					  WHAT//'attribute value' )
	   IF (.NOT.OK) GOTO 9000
C
	   OK = READ_INTEGER( MAX_LEN, WHAT//'attribute max length')
	   IF (.NOT.OK) GOTO 9000
C
	   IF (.NOT.SCAN.AND.DEBUG_LIST) THEN
	      CALL WRITEF(
     &		'	attribute "%S" = "%S"',
     &				ATTR_NAM(1,I),
     &				ATTR_VAL(1,I))
	   ELSEIF (.NOT.SCAN.AND.DEBUG_ATTR) THEN
	      CALL WRITEF('%S[%I2] = "%S"',
     &				ATTR_NAM(1,I),MAX_LEN,
     &				ATTR_VAL(1,I))
	   ENDIF
C
2000	CONTINUE
C
C update our position in the attributes array
C
	ATTR_PTR = ATTR_END
C
9000	READ_ATTRIBUTES = OK
	RETURN
	END
