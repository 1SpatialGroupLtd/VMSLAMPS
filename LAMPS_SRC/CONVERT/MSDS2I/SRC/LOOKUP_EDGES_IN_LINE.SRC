	LOGICAL FUNCTION LOOKUP_EDGES_IN_LINE(START,END,OEDGE_IDS,
     &	                     EDGE,EDGE_PTR,ARRAY_MAX,EDGE_IX,EDGE_IX_PTR)
C
***	IDENT	14FE90
***	MODULE	LOOKUP_EDGES_IN_LINE
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C Author TJ Ibbs, 17 February 1988
C
C This routine finds all of the edges in the current line,
C by looking up the oriented edges listed for that line
C
C Note that this has been done with little thought of efficiency
C - check it later on to see if it could be done better!
C
C It returns TRUE if all went well, and FALSE otherwise
C
	IMPLICIT NONE
C
C Arguments
C
	INTEGER		START		! start of edge list in OEDGE_IDS
	INTEGER		END		! end of ditto
	INTEGER		OEDGE_IDS(*)
	INTEGER		EDGE(11,*)
	INTEGER		EDGE_PTR
	INTEGER		ARRAY_MAX
	INTEGER		EDGE_IX(6,*)
	INTEGER		EDGE_IX_PTR
C
C Message files
C
	INCLUDE	'HERE:MSDS2IMSG.PAR'
C
C Common files
C
	INCLUDE	'HERE:STRUCTURES.PAR'
C
	INCLUDE	'HERE:COMMANDS.CMN'
	INCLUDE	'HERE:RECORD.CMN'
CCCC	INCLUDE	'HERE:IFF.CMN'
C
C Workspace
C
	LOGICAL		OK		! function return
	INTEGER		I		! index into OEDGE_IDS
	INTEGER		OE		! current oriented edge ID
	INTEGER		EX		! index into EDGE
C
	LOGICAL		POS,NEG		! positive or negative edge
C
C *****************************************************************************
C
	OK = .TRUE.		! assume success
C
C We have not yet found any edges for this line, so unset the
C edge index pointer
C
	EDGE_IX_PTR = 0
C
C For each line in the list, find which edge contains each oriented edge
C
	DO 2000 I = START,END
C
C	 select the next oriented edge from the list for this line
C
	   OE = OEDGE_IDS(I)
C
C	 now look through the edges in the dataset until we find one
C	 that contains this oriented edge
C
	   DO 1000 EX = 1,EDGE_PTR
C
	      POS = EDGE(P$EDGE,EX).EQ.OE
	      NEG = EDGE(N$EDGE,EX).EQ.OE
C
C	    if the edge is relevant, add it to our list
C
	      IF (POS.OR.NEG) THEN
C
		 EDGE_IX_PTR = EDGE_IX_PTR + 1
		 IF ( EDGE_IX_PTR.GT.ARRAY_MAX ) THEN
		    CALL LSL_PUTMSG(MSDS2I__NOROOM,'line edge indices',
     &						   ARRAY_MAX)
		    OK = .FALSE.
		    GOTO 9000
		 ENDIF
		 EDGE_IX(1,EDGE_IX_PTR) = EX		! current edge index
		 EDGE_IX(2,EDGE_IX_PTR) = POS		! +ve or -ve edge?
		 IF (POS) THEN				! +ve edge
		    EDGE_IX(3,EDGE_IX_PTR) = EDGE(S$NODE,EX)
		    EDGE_IX(4,EDGE_IX_PTR) = EDGE(E$NODE,EX)
		 ELSE					! -ve edge
		    EDGE_IX(3,EDGE_IX_PTR) = EDGE(E$NODE,EX)
		    EDGE_IX(4,EDGE_IX_PTR) = EDGE(S$NODE,EX)
		 ENDIF
		 EDGE_IX(5,EDGE_IX_PTR) = -1		! no `next record' yet
		 EDGE_IX(6,EDGE_IX_PTR) =  0		! edge not used yet
C
		 GOTO 2000				! look for next edge
C
	      ENDIF
C
1000	   CONTINUE
C
C	 if we reach here, then we didn't find the oriented edge,
C	 so complain
C
	   CALL LSL_PUTMSG(MSDS2I__MISSEDGE,OE)
	   OK = .FALSE.
	   GOTO 9000
C
2000	CONTINUE
C
	IF (DEBUG_IFF) CALL WRITEF('Found %N edge%m',EDGE_IX_PTR)
C
9000	LOOKUP_EDGES_IN_LINE = OK
	RETURN
	END
