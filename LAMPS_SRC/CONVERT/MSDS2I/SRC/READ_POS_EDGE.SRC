C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-02-14 09:41:26.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION READ_POS_EDGE(SCAN,EDGE,EDGE_PTR,
     &	                        LINE_IDS,LINE_IDS_PTR)
C
***	IDENT	14FE90
***	MODULE	READ_POS_EDGE
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C Author TJ Ibbs, 8 February 1988
C
C This routine reads in the positive half of an edge record
C It returns TRUE if all went well, and FALSE otherwise
C
	IMPLICIT NONE
C
C arguments
	LOGICAL		SCAN		! whether scanning or reading file
	INTEGER		EDGE(11,*)
	INTEGER		EDGE_PTR
	INTEGER		LINE_IDS(*)
	INTEGER		LINE_IDS_PTR
C
C Message files
C
	INCLUDE	'HERE:MSDS2IMSG.PAR'
C
C Common files
C
	INCLUDE	'HERE:COMMANDS.CMN'
	INCLUDE	'HERE:RECORD.CMN'
	INCLUDE	'HERE:STRUCTURES.PAR'
C
C Functions
C
	LOGICAL		READ_INTEGER	! read a comma-preceded integer
	LOGICAL		READ_POINTERS	! read relation pointers
C
C Workspace
C
	LOGICAL		OK		! function return
	INTEGER		TEMP
C
C *****************************************************************************
C read the positive edge entity ID
C
	OK = READ_INTEGER( TEMP, '+ve edge ID' )
	IF (.NOT.OK) GOTO 9000
	IF (.NOT.SCAN) EDGE(P$EDGE,EDGE_PTR) = TEMP
C
C and the pointer count and pointer list
C
	OK = READ_INTEGER( POINTER_COUNT, 'pointer count' )
	IF (.NOT.OK) GOTO 9000
	OK = READ_POINTERS(SCAN,'+ve edge ptrs',LINE_IDS,LINE_IDS_PTR,
     &				EDGE(S$LINE,EDGE_PTR),
     &				EDGE(E$LINE,EDGE_PTR),TEMP )
	IF (.NOT.OK) GOTO 9000
C
C read the left face ID
C
	OK = READ_INTEGER( TEMP, 'left face ID' )
	IF (.NOT.OK) GOTO 9000
	IF (.NOT.SCAN) EDGE(L$FACE,EDGE_PTR) = TEMP
C
C the next edge's ID
C
	OK = READ_INTEGER( NEXT_EDGE_POS, 'next edge' )
	IF (.NOT.OK) GOTO 9000
C
C and the end node ID
C
	OK = READ_INTEGER( TEMP, 'end node' )
	IF (.NOT.OK) GOTO 9000
	IF (.NOT.SCAN) EDGE(E$NODE,EDGE_PTR) = TEMP
C
	IF (.NOT.SCAN.AND.DEBUG_LIST) THEN
	   CALL WRITEF('- positive edge')
	   CALL WRITEF(
     &		'	ID=%N, left face=%N, next edge=%N, end node=%N',
     &			EDGE(P$EDGE,EDGE_PTR), EDGE(L$FACE,EDGE_PTR),
     &			NEXT_EDGE_POS, EDGE(E$NODE,EDGE_PTR) )
	ENDIF
C
9000	READ_POS_EDGE = OK
	RETURN
	END
