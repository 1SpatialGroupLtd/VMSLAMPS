C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-02-09 16:45:34.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION ORDER_EDGES( FID,EDGE_IX,EDGE_IX_PTR)
C
***	IDENT	09FE90
***	MODULE	ORDER_EDGES
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C Author TJ Ibbs, 17 February 1988
C
C This routine works out an order for the edges forming a line
C or area boundary, by chaining via the start/end nodes of the
C edges.
C
C Note that this has been done with little thought of efficiency
C - check it later on to see if it could be done better!
C
C It returns TRUE if all went well, and FALSE otherwise
C
	IMPLICIT NONE
C
C Argument
C
	INTEGER		FID		!  in - the feature ID
	INTEGER		EDGE_IX(6,*)
	INTEGER		EDGE_IX_PTR
C
C Message files
C
	INCLUDE	'HERE:MSDS2IMSG.PAR'
C
C Common files
C
	INCLUDE	'HERE:COMMANDS.CMN'
C
	INCLUDE	'LSL$CMNLSL:EXPC.CMN'
C
C Workspace
C
	LOGICAL		OK		! function return
	INTEGER		CUR		! current edge index record
	INTEGER		IDX		! search index
	INTEGER		END_NODE	! node ID to look for
	INTEGER		I
C
C *****************************************************************************
C
	OK = .TRUE.		! assume success
C
	IF (DEBUG_IFF.OR.DEBUG_THIS_AREA) CALL WRITEF('Ordering edges')
C
C For each edge with an index in EDGE_IX, we know the nodes at which it starts
C and ends (and these are correctly adjusted for the direction in which we use
C the edge). Thus for each edge in EDGES, we need merely match our end node ID
C to the relevant start node ID to work out which edge follows on.
C
C Note that if this is a CLOSED feature, then we must stop when we get back
C to our first edge, and if it is an OPEN feature, then one edge will not
C have a next edge, and one won't have a previous. In the OPEN case, we will
C want to start our eventual output with the edge that doesn't have a
C previous edge.
C
	CUR      = 0		! no edges checked yet
C
C *****************************************************************************
C look at the next edge
C
2000	CUR = CUR + 1
	IF (CUR.GT.EDGE_IX_PTR) GOTO 9000
C
C if the edge has already been placed into a chain, don't try to use
C it again
C
	IF ( EDGE_IX(6,CUR).EQ.-1 ) GOTO 2000
C
C get the end node somewhere more convenient
C
	END_NODE = EDGE_IX(4,CUR)
C
C look for the corresponding start node
C - when (if) we find it, we set our `next-edge' pointer to the edge
C   we have found, and we note that we have used our edge in a chain
C   we also set the start node that we found negative, so that we can't
C   find it again (for instance, for a figure of eight feature, where
C   one node might be present several times in the feature's edge list)
C
	DO 4000 IDX = 1,EDGE_IX_PTR
	   IF ( EDGE_IX(3,IDX).EQ.END_NODE ) THEN
	      EDGE_IX(5,CUR) = IDX	! form the new bit of the chain
	      EDGE_IX(6,CUR) = -1	! note that this edge has been chained
	      EDGE_IX(3,IDX) = -EDGE_IX(3,IDX)	! to this edge
	      GOTO 2000
	   ENDIF
4000	CONTINUE
C
C if we reach here, then there was no match for the node. We expect this
C to happen once (for the end of the chain), but if it happens more than 
C once then we have multiple edge chains
C
	GOTO 2000
C
C *****************************************************************************
C
9000	ORDER_EDGES = OK
	RETURN
	END
