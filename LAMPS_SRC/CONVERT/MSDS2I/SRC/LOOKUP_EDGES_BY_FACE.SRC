	LOGICAL FUNCTION LOOKUP_EDGES_BY_FACE(START,END,ARRAY_MAX,EDGE_IX,
     &	                        EDGE_IX_PTR,FACE_IDS,EDGE,EDGE_PTR)
C
***	IDENT	14FE90
***	MODULE	LOOKUP_EDGES_BY_FACE
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C Author TJ Ibbs, 17 February 1988
C
C This routine finds all of the edges in the current area,
C by looking up the faces in the area, and then finding which
C edges are in each of those faces.
C
C Note that this has been done with little thought of efficiency
C - check it later on to see if it could be done better!
C
C It returns TRUE if all went well, and FALSE otherwise
C
	IMPLICIT NONE
C
C Arguments
C
	INTEGER		START		! start of face list in FACE_IDS
	INTEGER		END		! end of ditto
	INTEGER		ARRAY_MAX
	INTEGER		EDGE_IX(6,*)
	INTEGER		EDGE_IX_PTR
	INTEGER		FACE_IDS(*)
	INTEGER		EDGE(11,*)
	INTEGER		EDGE_PTR
C
C Message files
C
	INCLUDE	'HERE:MSDS2IMSG.PAR'
C
C Common files
C
	INCLUDE	'HERE:COMMANDS.CMN'
	INCLUDE	'HERE:STRUCTURES.PAR'
C
C Workspace
C
	LOGICAL		OK		! function return
	INTEGER		I		! index into FACE_IDS
	INTEGER		F		! current FACE ID
	INTEGER		EX		! index into EDGE
C
	LOGICAL		ON_LEFT		! face is on left of edge
	LOGICAL		ON_RIGHT	! face is on right of edge
C
	INTEGER		COUNT
C
C *****************************************************************************
C
	OK = .TRUE.		! assume success
C
C We have not yet found any edges for this area, so unset the
C edge index pointer
C
	EDGE_IX_PTR = 0
C
C For each face in the list, find all of the edges that say that they
C bound that face, and add them to our EDGES list
C
	DO 2000 I = START,END
C
C	 select the next FACE from the list of faces in this area
C
	   F = FACE_IDS(I)
C
	   COUNT = 0
C
C	 now look through all of the edges in the dataset to see if
C	 they bound this face
C
	   DO 1000 EX = 1,EDGE_PTR
C
	      ON_LEFT  = EDGE(L$FACE,EX).EQ.F
	      ON_RIGHT = EDGE(R$FACE,EX).EQ.F
C
C	    if the face is on BOTH sides of the edge, then this is
C	    an interior edge - we don't need it to define the area
C
	      IF ( ON_LEFT.AND.ON_RIGHT ) THEN
	         IF (.NOT.KEEP_EDGES) GOTO 1000
	      ENDIF
C
C	    otherwise, if the face is on the left or the right of
C	    the face, we must include it in our list
C
	      IF ( ON_LEFT.OR.ON_RIGHT ) THEN
		 EDGE_IX_PTR = EDGE_IX_PTR + 1
		 COUNT       = COUNT + 1
C
		 IF ( EDGE_IX_PTR.GT.ARRAY_MAX ) THEN
		    CALL LSL_PUTMSG(MSDS2I__NOROOM,'area edge indices',
     &						   ARRAY_MAX)
		    OK = .FALSE.
		    GOTO 9000
		 ENDIF
C
		 EDGE_IX(1,EDGE_IX_PTR) = EX		! current edge index
		 EDGE_IX(2,EDGE_IX_PTR) = ON_LEFT	! +ve or -ve edge?
		 IF (ON_LEFT) THEN			! +ve edge
		    EDGE_IX(3,EDGE_IX_PTR) = EDGE(S$NODE,EX)
		    EDGE_IX(4,EDGE_IX_PTR) = EDGE(E$NODE,EX)
		 ELSE					! -ve edge
		    EDGE_IX(3,EDGE_IX_PTR) = EDGE(E$NODE,EX)
		    EDGE_IX(4,EDGE_IX_PTR) = EDGE(S$NODE,EX)
		 ENDIF
		 EDGE_IX(5,EDGE_IX_PTR) = -1		! no `next record' yet
		 EDGE_IX(6,EDGE_IX_PTR) =  0		! edge not used yet
C
	      ENDIF
C
1000	   CONTINUE
C
	   IF (DEBUG_IFF.OR.DEBUG_THIS_AREA)
     &			CALL WRITEF('Face %N has %N edge%m',F,COUNT)
C
2000	CONTINUE
C
9000	LOOKUP_EDGES_BY_FACE = OK
	RETURN
	END
