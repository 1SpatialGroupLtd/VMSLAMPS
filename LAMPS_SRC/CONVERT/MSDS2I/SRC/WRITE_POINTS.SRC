C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-02-13 18:36:18.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION WRITE_POINTS(ATTR_NAM,ATTR_VAL,COORDS,
     &	                  POINT,POINT_PTR,NODE,NODE_PTR,NODE_IDS)
C
***	IDENT	13FE90
***	MODULE	WRITE_POINTS
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C Author TJ Ibbs, 17 February 1988
C
C This routine writes out the coordinates for a point feature
C It returns TRUE if all went well, and FALSE otherwise
C
	IMPLICIT NONE
C
C arguments
	INTEGER		ATTR_NAM(2,*)
	INTEGER		ATTR_VAL(2,*)
	INTEGER		COORDS(3,*)
	INTEGER		POINT(6,*)
	INTEGER		POINT_PTR
	INTEGER		NODE(2,*)
	INTEGER		NODE_PTR
	INTEGER		NODE_IDS(*)
C
C Message files
C
	INCLUDE	'HERE:MSDS2IMSG.PAR'
C
C Common files
C
	INCLUDE	'HERE:COMMANDS.CMN'
ccc	INCLUDE	'HERE:RECORD.CMN'
C
C Functions
C
	LOGICAL		WRITE_NODES
	LOGICAL		WRITE_ATTRIBUTES
C
C Workspace
C
	LOGICAL		OK		! function return
	INTEGER		I
	INTEGER*2	ISQ		! internal sequence number
	INTEGER*2	ISTAT(4)	! FS entry
C
C set symbol bit
	DATA	ISTAT(3)/'4000'X/
C
C *****************************************************************************
C
	OK = .TRUE.		! assume success
	IF (HAD_LOG.OR.DEBUG_IFF) CALL WRITEF('Writing point features')
C
C for each point feature, we must output a point for each node in the feature
C
	DO 2000 I = 1,POINT_PTR		! for each POINT ID
C
	   IF (DEBUG_IFF) CALL WRITEF('Point ID %N',POINT(1,I))
C
C	 start the new point feature, look up the coordinates of
C	 each node in the feature, output them, and then close the feature
C
	   ISQ = 0
	   CALL IFFNF(POINT(1,I),ISQ)
C
	   ISTAT(1) = POINT(4,I)
	   CALL IFFFS(ISTAT)
C
	   OK = WRITE_ATTRIBUTES(POINT(5,I),POINT(6,I),ATTR_NAM,ATTR_VAL)

	   IF (.NOT.OK) GOTO 9000
C
	   CALL FLUSH_ZS(0)		! initialise output buffers
C
	   OK = WRITE_NODES(POINT(2,I),POINT(3,I),COORDS,
     &	                     NODE,NODE_PTR,NODE_IDS)
	   IF (.NOT.OK) GOTO 9000
C
	   CALL FLUSH_ZS(1)		! final flush
C
	   CALL IFFEF
C
2000	CONTINUE
C
9000	WRITE_POINTS = OK
	RETURN
	END
