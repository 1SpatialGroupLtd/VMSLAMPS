C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-02-09 16:28:32.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION DISCARD_INTERIOR_EDGES(F_START,F_END,FACE_IDS,
     &	                        EDGE,EDGE_IX,EDGE_IX_PTR)
C
***	IDENT	09FE90
***	MODULE	DISCARD_INTERIOR_EDGES
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C Author TJ Ibbs, 17 February 1988
C
C This routine checks the edge index list for any edges that form
C interior boundaries of the area - that is, that border two adjacent
C faces - and throws them away
C
C Note that this has been done with little thought of efficiency
C - check it later on to see if it could be done better!
C
C It returns TRUE if all went well, and FALSE otherwise
C
	IMPLICIT NONE
C
C Arguments
C
	INTEGER		F_START		! start of face list for this area
	INTEGER		F_END		! end of ditto
	INTEGER		FACE_IDS(*)
	INTEGER		EDGE(11,*)
	INTEGER		EDGE_IX(6,*)
	INTEGER		EDGE_IX_PTR
C
C Message files
C
	INCLUDE	'HERE:MSDS2IMSG.PAR'
C
C Common files
C
	INCLUDE	'HERE:COMMANDS.CMN'
	INCLUDE	'HERE:STRUCTURES.PAR'
C
C Workspace
C
	LOGICAL		OK		! function return
	INTEGER		IX		! `input' index into EDGE_IX
	INTEGER		OX		! `output' ditto
	INTEGER		I,J		! DO loop variable
	INTEGER		FF(2)		! faces on left and right of edge
	LOGICAL		IN(2)		! are they in the area?
C
C *****************************************************************************
C
	OK = .TRUE.		! assume success
	IF (DEBUG_IFF.OR.DEBUG_THIS_AREA) CALL WRITEF('Discarding edges')
C
C *****************************************************************************
C The first pass checks for edges that are boundaries between two faces
C both included in the area - these will occur twice, once for each face,
C and can thus be thrown away
C
	IF (DEBUG_IFF.OR.DEBUG_THIS_AREA) THEN
	   CALL WRITEF('Pass 1 - duplicated edges')
	   CALL WRITEF('         starting with %N edges',EDGE_IX_PTR)
	ENDIF
C
	IX = 0			! no edge indices looked at yet
	OX = 0
C
2000	IX = IX + 1
	IF (IX.GT.EDGE_IX_PTR) GOTO 4000	! finished pass 1
C
	OX = OX + 1
C
C now, compare this edge index with its successor, and if they represent
C the same edge, remove them both from our output
C ((Note that we ignore the direction. Technically, we should check that
C   the paired edges differ in their direction, but that would be awkward
C   if, for instance, the list went +,+,-,- rather than +,-,+,-))
C
	IF ( EDGE_IX(1,IX).EQ.EDGE_IX(1,IX+1) ) THEN
C
	   IX = IX + 1		! ignore the second edge
	   OX = OX - 1		! remove the first edge
C
	ELSE
C
C	 if any edges have been discarded, then OX will not equal IX,
C	 and we must copy the accepted edge record down to fill the gap
C
	   IF ( IX.NE.OX ) THEN
	      DO 1000 I = 1,6
	         EDGE_IX(I,OX) = EDGE_IX(I,IX)
1000	      CONTINUE
	   ENDIF
C
	ENDIF
C
	GOTO 2000
C
C *****************************************************************************
C The second pass checks for inclusions - edges that define faces that are
C totally within the area, and do not form part of the boundary of the area.
C These faces are effectively holes, except that they are part of the area.
C
C - update the fill pointer to the new value
C
4000	EDGE_IX_PTR = OX
	IF (DEBUG_IFF.OR.DEBUG_THIS_AREA) THEN
	   CALL WRITEF('Pass 2 - interior faces (`holes'')')
	   CALL WRITEF('         starting with %N edges',EDGE_IX_PTR)
	ENDIF
C
	IX = 0			! no edge indices looked at yet
	OX = 0
C
6000	IX = IX + 1
	IF (IX.GT.EDGE_IX_PTR) GOTO 8000	! finished pass 2
C
	OX = OX + 1
C
C now, check the left and right faces of this edge. If they are both in
C the face list for this area, then we can discard the edge.
C
	FF(1) = EDGE( L$FACE, EDGE_IX(1,IX) )
	FF(2) = EDGE( R$FACE, EDGE_IX(1,IX) )
C
	IN(1) = .FALSE.		! assume that neither face
	IN(2) = .FALSE.		! is in the list
C
	DO 6500 I = 1,2
	   DO 6400 J = F_START,F_END
	      IF ( FF(I).EQ.FACE_IDS(J) ) THEN
		 IN(I) = .TRUE.
		 GOTO 6500
	      ENDIF
6400	   CONTINUE
6500	CONTINUE
C
C if the edge does have both sides within the area, discard it
C
	IF ( IN(1).AND.IN(2) ) THEN
C
	   IX = IX + 1		! ignore the second edge
	   OX = OX - 1		! remove the first edge
C
	ELSE
C
C	 if any edges have been discarded, then OX will not equal IX,
C	 and we must copy the accepted edge record down to fill the gap
C
	   IF ( IX.NE.OX ) THEN
	      DO 5000 I = 1,6
	         EDGE_IX(I,OX) = EDGE_IX(I,IX)
5000	      CONTINUE
	   ENDIF
C
	ENDIF
C
	GOTO 6000
C
C *****************************************************************************
C we have finished - update the fill pointer to the new correct value
C
8000	EDGE_IX_PTR = OX
	IF (DEBUG_IFF.OR.DEBUG_THIS_AREA)
     &			CALL WRITEF('           ending with %N edges',
     &							   EDGE_IX_PTR)
C
9000	DISCARD_INTERIOR_EDGES = OK
	RETURN
	END
