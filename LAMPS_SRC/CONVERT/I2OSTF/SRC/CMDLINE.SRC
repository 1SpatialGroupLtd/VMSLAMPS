	LOGICAL FUNCTION CMDLINE
C
***	IDENT	03SE86
***	MODULE	CMDLINE
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C Author TJ Ibbs, 19 June 1986
C
C To read the I2OSTF command line, and pack its contents into appropriate
C common variables
C
C We return TRUE if something has gone wrong, and we should exit,
C and otherwise FALSE
C
	IMPLICIT NONE
C
C included data
C
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'	! LSLLIB errors
	INCLUDE	'HERE:I2OSTFMSG.PAR'		! local errors
C
	INCLUDE	'LSL$CMNLSL:FILENAME.CMN'	! filename parsing
	INCLUDE	'LSL$CMNLSL:CLD.CMN'		! command line decoding
C
	INCLUDE	'HERE:COMMANDS.CMN'		! decoded command line
C
C the CLD module
C
	EXTERNAL	I2OSTF_CLD
C
C LSLLIB functions
C
	LOGICAL	       	DCL_STARTUP
	LOGICAL		DCL_FILE
	LOGICAL		DCL_QUAL
	LOGICAL		TEST_FOREIGN	! distinguish magtape case
	LOGICAL		PARFILN		! parse a filename
C
C local functions
C
	LOGICAL		INPUT_LIST
	LOGICAL		P1_LIST
	LOGICAL		SWITCHES
C
C workspace
C
	LOGICAL		OK		! return from functions
	INTEGER		IERR		! secondary return
	LOGICAL		ABSENT		! true if thing is absent
	LOGICAL		HAD_QUAL	! true if qualifier there
	LOGICAL		PRESENT		! true if it's by a parameter
	LOGICAL		NEGATED		! true if /NO...
C
	LOGICAL		ALL_SIM		! true if assume files all SIM
C
C **********************************************************************
C assume the worst
C
	CMDLINE = .TRUE.
C
C start up our command line reading
C
	OK = DCL_STARTUP( 'I2OSTF',	! the command verb
     &			  .FALSE.,	! don't burst (at this level)
     &			  I2OSTF_CLD,	! CLD name
     &			  .TRUE. )	! report errors itself
C
	IF ( .NOT.OK ) GOTO 9999
C
C **********************************************************************
C we will always have an output file - look for it
C
	OK = DCL_FILE( 'OUTFILE',	! the output file
     &			'.OSTF',	! the default name
     &			ABSENT,		! true if not there
     &			.FALSE.,	! not a list
     &			.TRUE. )	! report errors itself
C                                                            
	IF ( .NOT.OK ) GOTO 9999
C
C remember the name for later use
C
	OUTLEN  = FIL_LEN(1)
	OUTFILE = FILARY(1)(:OUTLEN)
C
C **********************************************************************
C if a device name was given, which we assume was followed by a colon,
C then look and see if it is mounted /FOREIGN, which would mean that
C it is a normal magtape
C
	IF ( HAD_DEV ) THEN
C
	   OK = TEST_FOREIGN( STR_DEV(:LEN_DEV), IS_MAGTAPE, IERR )
C
	   IF ( .NOT.OK ) THEN
	      CALL LSL_PUTMSG( I2OSTF__OUTFILE, STR_DEV(:LEN_DEV) )
	      CALL LSL_ADDMSG( OK )
	      IF ( OK.EQ.LSL__SYSERR ) CALL LSL_ADDMSG( IERR )
	      GOTO 9999
 	   ENDIF
C
	ELSE
C
	   IS_MAGTAPE = .FALSE.
C
	ENDIF
C
C otherwise, we assume that it is either a file, or a Kennedy magtape,
C the latter being specified by a command line switch
C (NOTE that IS_MAGTAPE is currently TRUE iff this is mounted /FOREIGN)
C
C **********************************************************************
C check for any switches
C
	IF ( SWITCHES(ALL_SIM) ) GOTO 9999
C
C and possibly adjust the filename...
C
	IF ( IS_MAGTAPE ) THEN
	   CALL PUTFLN(OUTFILE(:OUTLEN))
	   OUTFILE = STR_DEV(1:LEN_DEV) // ':'
	   OUTLEN  = LEN_DEV +1
	ENDIF
C
C **********************************************************************
C now check whether we have got the /INPUT_LIST switch...
C
	OK = DCL_QUAL( 'INPUT_LIST',	! specifies file of files
     &			HAD_QUAL,	! true if it's there
     &			PRESENT,	! true if by parameter
     &			NEGATED,	! true if /NOINPUT_LIST
     &			.TRUE. )	! report errors itself
C
C PRESENT is irrelevant - this is not a positional command
C NEGATED should never occur - ignore it
C
C if we have had the qualifier, then we do not get a list of input files
C on the command line - instead, we have a filename for the file containing
C the list of input lines
C
C if we have not had the qualifier, then we expect to have to interpret
C a list of input files on the command line
C
	IF ( HAD_QUAL ) THEN
C
	   IF ( INPUT_LIST() ) GOTO 9999
C
	ELSE
C
	   IF ( P1_LIST(ALL_SIM) ) GOTO 9999
C
	ENDIF
C
C **********************************************************************
C if we reach here, then we may assume that we have succeeded in
C interpreting the command line
C
	CMDLINE = .FALSE.
C
C and join up with any errors
C
9999	RETURN
	END
