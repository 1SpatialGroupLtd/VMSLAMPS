C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-12-19 14:52:58.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION SWITCHES( ALL_SIM )
C
***	IDENT	11DE90
***	MODULE	SWITCHES
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C Author TJ Ibbs, 19 June 1986
C
C To read the I2OSTF switches, from whichever comamnd line part we are in
C
C We return TRUE if something has gone wrong, and we should exit,
C and otherwise FALSE
C
	IMPLICIT NONE
C
C argument
C
	LOGICAL		ALL_SIM		! are all sheets SIM ?
C
C included data
C
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'	! LSLLIB errors
	INCLUDE	'HERE:I2OSTFMSG.PAR'		! local errors
C
	INCLUDE	'LSL$CMNLSL:FILENAME.CMN'	! for device name
	INCLUDE	'LSL$CMNLSL:CLD.CMN'		! command line decoding
C
	INCLUDE	'HERE:COMMANDS.CMN'		! decoded command line
C
C functions
C
	LOGICAL		DCL_QUAL
	LOGICAL		DCL_FILE		! read a file name
	LOGICAL		DCL_INT
	LOGICAL		DCL_STR
	LOGICAL		TEST_TERM
C
C workspace
C
	LOGICAL		OK		! return from functions
	INTEGER		IERR		! secondary return
	LOGICAL		ABSENT		! true if thing is absent
	LOGICAL		HAD_QUAL	! true if qualifier there
	LOGICAL		PRESENT		! true if it's by a parameter
	LOGICAL		NEGATED		! true if /NO...
C
C **********************************************************************
C assume the worst
C
	SWITCHES = .TRUE.
C
C **********************************************************************
C /ASCII or /EBCDIC - is our data in ASCII or EBCDIC?
C - we guess ASCII
C
	ASCII = .TRUE.
C
	OK = DCL_QUAL( 'ASCII',			! qualifier name
     &		       HAD_QUAL,		! out - globally there
     &		       PRESENT,			! out - locally there
     &		       NEGATED,			! out - true if negated
     &		       .TRUE. )			! deal with errors itself
C
	IF ( .NOT.OK ) GOTO 9999		! failed - give up with status
C
	IF ( HAD_QUAL ) THEN
	   ASCII = .TRUE.
	ENDIF
C
	OK = DCL_QUAL( 'EBCDIC',		! qualifier name
     &		       HAD_QUAL,		! out - globally there
     &		       PRESENT,			! out - locally there
     &		       NEGATED,			! out - true if negated
     &		       .TRUE. )			! deal with errors itself
C
	IF ( .NOT.OK ) GOTO 9999		! failed - give up with status
C
	IF ( HAD_QUAL ) THEN
	   ASCII = .FALSE.
	ENDIF
C
C **********************************************************************
C /BLOCKSIZE=n - select the blocksize on the tape
C
	OK = DCL_QUAL( 'BLOCKSIZE',		! qualifier name
     &		       HAD_QUAL,		! out - globally there
     &		       PRESENT,			! out - locally there
     &		       NEGATED,			! out - true if negated
     &		       .TRUE. )			! deal with errors itself
C
	IF ( .NOT.OK ) GOTO 9999		! failed - give up with status
C
C if the switch was present, then read its value
C into the CLD common block, from whence we will retrieve them.
C
 	IF ( HAD_QUAL ) THEN
	   OK = DCL_INT( 'BLOCKSIZE',		! qualifier name
     &			 .TRUE. )		! deal with errors itself
	   IF ( .NOT.OK ) GOTO 9999		! failed - give up with status
C
	   BLOCKSIZE = IARRAY(1)		! remember the value
	ENDIF
C
C and check that it is a multiple of 8 (the record size)
C
	IF ( MOD(BLOCKSIZE,8).NE.0 ) THEN
	   CALL LSL_PUTMSG( I2OSTF__BLKEIGHT, BLOCKSIZE )
	   GOTO 9999
	ENDIF
C
C **********************************************************************
C /DENSITY=n - select the density on the tape
C
	OK = DCL_QUAL( 'DENSITY',		! qualifier name
     &	     	       HAD_QUAL,		! out - globally there
     &		       PRESENT,			! out - locally there
     &		       NEGATED,			! out - true if negated
     &		       .TRUE. )			! deal with errors itself
C
	IF ( .NOT.OK ) GOTO 9999		! failed - give up with status
C
C if the switch was present, then read its value
C into the CLD common block, from whence we will retrieve them.
C
 	IF ( HAD_QUAL ) THEN
	   OK = DCL_INT( 'DENSITY',		! qualifier name
     &			 .TRUE. )		! deal with errors itself
	   IF ( .NOT.OK ) GOTO 9999		! failed - give up with status
C
	   DENSITY = IARRAY(1)			! remember the value
	ENDIF
C
C **********************************************************************
C /OSTF_VERSION=n - select the version of OSTF data we are to output
C
	OK = DCL_QUAL( 'OSTF_VERSION',		! qualifier name
     &		       HAD_QUAL,		! out - globally there
     &		       PRESENT,			! out - locally there
     &		       NEGATED,			! out - true if negated
     &		       .TRUE. )			! deal with errors itself
C
	IF ( .NOT.OK ) GOTO 9999		! failed - give up with status
C
C if the switch was present, then read its value
C into the CLD common block, from whence we will retrieve them.
C
 	IF ( HAD_QUAL ) THEN
	   OK = DCL_INT( 'OSTF_VERSION',		! qualifier name
     &			 .TRUE. )		! deal with errors itself
	   IF ( .NOT.OK ) GOTO 9999		! failed - give up with status
C
	   OSTF_VERSION = IARRAY(1)		! remember the value
	ENDIF
C
C check that the number is known
C
	IF ( OSTF_VERSION.LT.0 .OR.
     &	     OSTF_VERSION.GT.MAX_VERSION ) THEN
	   CALL LSL_PUTMSG( I2OSTF__OSTFVER,
     &				OSTF_VERSION, 0, MAX_VERSION )
	   GOTO 9999
	ENDIF
C
C **********************************************************************
C /CONTRACTOR=xxxx - select the contractor number
C
	OK = DCL_QUAL( 'CONTRACTOR',		! qualifier name
     &	     	       HAD_QUAL,		! out - globally there
     &		       PRESENT,			! out - locally there
     &		       NEGATED,			! out - true if negated
     &		       .TRUE. )			! deal with errors itself
C
	IF ( .NOT.OK ) GOTO 9999		! failed - give up with status
C
C if we are OSTF version 3 or above then the contractor's ID number is 
C required, otherwise it can be given but will be ignored!
C
 	IF ( HAD_QUAL ) THEN
	   OK = DCL_STR( 'CONTRACTOR',		! qualifier name
     &			 .TRUE. )		! deal with errors itself
	   IF ( .NOT.OK ) GOTO 9999		! failed - give up with status
C
C check we have a valid contractor ID
C
	   IF ((STR_LEN(1) .GT. 4) .OR. 
     &	       (CARRAY(1)(1:STR_LEN(1)) .EQ. ' ')) THEN
	      CALL LSL_PUTMSG( I2OSTF__BADCONTRACTOR,
     &	                       CARRAY(1)(1:STR_LEN(1)) )
	      GOTO 9999
	   ENDIF
C
C for OSTF-3 it was an integer field, with leading spaces, but OSTf-4 
C requires the field to be filled with characters
C
	   IF (OSTF_VERSION .EQ. 3) THEN
	      CONTRACTOR = '    '
	   ELSE
	      CONTRACTOR = '0000'
	   ENDIF
C
C set our copy of it, making sure it is justified (for upwards compatability 
C with older versions)
C
	   CONTRACTOR(4-STR_LEN(1)+1:4) = CARRAY(1)(1:STR_LEN(1))
	   HAD_CONT = .TRUE.
C
	ENDIF
C
C **********************************************************************
C /ASK_IF_SIM - are we to ask (for each input IFF file) if it is SIM ?
C
	OK = DCL_QUAL( 'ASK_IF_SIM',		! qualifier name
     &	     	       HAD_QUAL,		! out - globally there
     &		       PRESENT,			! out - locally there
     &		       NEGATED,			! out - true if negated
     &		       .TRUE. )			! deal with errors itself
C
	IF ( .NOT.OK ) GOTO 9999		! failed - give up with status
C
	ASK_IF_SIM = HAD_QUAL
C
C **********************************************************************
C /SIM - are we to assume that all files are SIM
C
	OK = DCL_QUAL( 'SIM',			! qualifier name
     &	     	       HAD_QUAL,		! out - globally there
     &		       PRESENT,			! out - locally there
     &		       NEGATED,			! out - true if negated
     &		       .TRUE. )			! deal with errors itself
C
	IF ( .NOT.OK ) GOTO 9999		! failed - give up with status
C
	IF ( HAD_QUAL ) ALL_SIM = .TRUE.
C
C **********************************************************************
C /DEBUG - are we to output extra information?
C
	OK = DCL_QUAL( 'DEBUG',			! qualifier name
     &	     	       HAD_QUAL,		! out - globally there
     &		       PRESENT,			! out - locally there
     &		       NEGATED,			! out - true if negated
     &		       .TRUE. )			! deal with errors itself
C
	IF ( .NOT.OK ) GOTO 9999		! failed - give up with status
C
	DEBUG = HAD_QUAL
C
C **********************************************************************
C /[NO]INDEX - are we to output the -21 index at the start?
C
	OK = DCL_QUAL( 'INDEX',			! qualifier name
     &	     	       HAD_QUAL,		! out - globally there
     &		       PRESENT,			! out - locally there
     &		       NEGATED,			! out - true if negated
     &		       .TRUE. )			! deal with errors itself
C
	IF ( .NOT.OK ) GOTO 9999		! failed - give up with status
C
C note that HAD_QUAL is false if /NOINDEX is given, but not if /INDEX is
C absent, as /INDEX is default
C
	OUTPUT_INDEX = HAD_QUAL
C
C **********************************************************************
C /[NO]PLUS - are we to output OSTF+ data ?
C
	OK = DCL_QUAL( 'PLUS',			! qualifier name
     &		       HAD_QUAL,		! out - globally there
     &		       PRESENT,			! out - locally there
     &		       NEGATED,			! out - true if negated
     &		       .TRUE. )			! deal with errors itself
C
	IF ( .NOT.OK ) GOTO 9999		! failed - give up with status
C
	PLUS = HAD_QUAL
C
C **********************************************************************
C /[NO]AUTO_PLUS - are we to output OSTF+ data automatically?
C
	OK = DCL_QUAL( 'AUTO_PLUS',		! qualifier name
     &		       HAD_QUAL,		! out - globally there
     &		       PRESENT,			! out - locally there
     &		       NEGATED,			! out - true if negated
     &		       .TRUE. )			! deal with errors itself
C
	IF ( .NOT.OK ) GOTO 9999		! failed - give up with status
C
	AUTO_PLUS = HAD_QUAL
C
C **********************************************************************
C /[NO]FRT[=file] - do we have an FRT file for reading ACD's ?
C
	OK = DCL_QUAL( 'FRT',			! qualifier name
     &		       HAD_QUAL,		! out - globally there
     &		       PRESENT,			! out - locally there
     &		       NEGATED,			! out - true if negated
     &		       .TRUE. )			! deal with errors itself
C
	IF ( .NOT.OK ) GOTO 9999		! failed - give up with status
C
	HAD_FRT = HAD_QUAL
C
C set the default filename
C
	IF ( HAD_FRT ) THEN
C
	   FRTFILE = 'LSL$FRT:OS.FRT'
	   FRTLEN  = 14
C
C and get the filename
C
	   OK = DCL_FILE( 'FRT',		! qualifier name
     &		       FRTFILE(1:FRTLEN),	! default filename
     &		       ABSENT,			! out - was name absent?
     &		       .FALSE.,			! only one file to process
     &		       .TRUE. )			! deal with errors itself
C
	   IF ( .NOT.OK ) GOTO 9999		! failed - give up with status
C
C if it was there, copy the filename somewhere more useful
C
	   IF ( .NOT.ABSENT ) THEN
	      FRTLEN  = FIL_LEN(1)
	      FRTFILE = FILARY(1)(1:FIL_LEN(1))
	   ENDIF
C
	ENDIF
C
C **********************************************************************
C /[NO]SERIAL_MAGTAPE - are we to write to a Kennedy magtape?
C
	OK = DCL_QUAL( 'SERIAL_MAGTAPE',	! qualifier name
     &	     	       HAD_QUAL,		! out - globally there
     &		       PRESENT,			! out - locally there
     &		       NEGATED,			! out - true if negated
     &		       .TRUE. )			! deal with errors itself
C
	IF ( .NOT.OK ) GOTO 9999		! failed - give up with status
C
C now we must do some checking of our status
C
C - if our calling routine (CMDLINE) has already set IS_MAGTAPE true,
C   then we are outputting to a tape mounted /FOREIGN, and this cannot
C   be a Kennedy, so /SERIAL_MAGTAPE will be ignored if given
C - if the /SERIAL_MAGTAPE switch wasn't given, then it's not one!
C - if there's no device name in the filename, then ditto
C - otherwise, if our input 'file' is a terminal, then we are outputting
C   to a serial magtape
C
	IF ( IS_MAGTAPE .OR. .NOT.HAD_QUAL .OR. .NOT.HAD_DEV ) THEN
	   SERIAL_MAGTAPE = .FALSE.
	ELSE
	   OK = TEST_TERM( STR_DEV(:LEN_DEV), SERIAL_MAGTAPE, IERR )
	   IF ( .NOT.OK ) THEN
	      CALL LSL_PUTMSG( I2OSTF__OUTFILE, STR_DEV(:LEN_DEV))
	      CALL LSL_ADDMSG( OK )
	      IF ( OK.EQ.LSL__SYSERR ) CALL LSL_ADDMSG(IERR)
	      GOTO 9999
	   ENDIF
	   IS_MAGTAPE = SERIAL_MAGTAPE
	ENDIF
C
C **********************************************************************
C /[NO]MH_CHECK - check if MD entries are same as MH entries.
C
	OK = DCL_QUAL( 'MH_CHECK',		! qualifier name
     &		       HAD_QUAL,		! out - globally there
     &		       PRESENT,			! out - locally there
     &		       NEGATED,			! out - true if negated
     &		       .TRUE. )			! deal with errors itself
C
	IF ( .NOT.OK ) GOTO 9999		! failed - give up with status
C
C MH_CHECK is the default. It will always be performed unless it was specified
C negated.
C
	MH_CHECK = HAD_QUAL
C
C **********************************************************************
C /[NO]PROCESS_CODES - disable the output of the -16 flag (process code)
C
	OK = DCL_QUAL( 'PROCESS_CODES',		! qualifier name
     &		       HAD_QUAL,		! out - globally there
     &		       PRESENT,			! out - locally there
     &		       NEGATED,			! out - true if negated
     &		       .TRUE. )			! deal with errors itself
C
	IF ( .NOT.OK ) GOTO 9999		! failed - give up with status
C
C /NOPROCESS_CODES is the default which does not output -16 process codes.
C
	PROCESS_CODES = .FALSE.			! do not output -16 flags
	IF ( HAD_QUAL .AND. .NOT.NEGATED )
     &		PROCESS_CODES = .TRUE.		! output -16 flags
C
C **********************************************************************
C /[NO]BYTE_COUNT - enable (default) or disable byte count
C
	OK = DCL_QUAL( 'BYTE_COUNT',		! qualifier name
     &		       HAD_QUAL,		! out - globally there
     &		       PRESENT,			! out - locally there
     &		       NEGATED,			! out - true if negated
     &		       .TRUE. )			! deal with errors itself
C
	IF ( .NOT.OK ) GOTO 9999		! failed - give up with status
C
C /BYTE_COUNT is the default which will cause the IFF file to be scanned twice.
C The first time will be to count the number of bytes to be written and the
C second to write the OSTF file with the byte count in the header.
C
	BYTE_COUNT = .TRUE.				! the default
	IF ( .NOT.HAD_QUAL ) BYTE_COUNT = .FALSE.	! disable byte count
C
C **********************************************************************
C /[NO]IFF_POINTSIZE - flag IFF text heights in point sizes(default)
C
	OK = DCL_QUAL( 'IFF_POINTSIZE',		! qualifier name
     &		       HAD_QUAL,		! out - globally there
     &		       PRESENT,			! out - locally there
     &		       NEGATED,			! out - true if negated
     &		       .TRUE. )			! deal with errors itself
C
	IF ( .NOT.OK ) GOTO 9999		! failed - give up with status
C
C /IFF_POINTSIZE is the default which will cause the program to treat IFF
C text heights to be in point sizes. If the negative form is present, IFF
C text heights are assumed to be units of hundredths of a mm
C
	IFF_POINTSIZE = .TRUE.				! the default
	IF ( .NOT.HAD_QUAL ) IFF_POINTSIZE = .FALSE.	! IFF txt hts in mm/100
C
C **********************************************************************
C
C if we reach here, then we may assume that we have succeeded in
C interpreting the command line
C
	SWITCHES = .FALSE.
C
C and join up with any errors
C
9999	RETURN
	END
