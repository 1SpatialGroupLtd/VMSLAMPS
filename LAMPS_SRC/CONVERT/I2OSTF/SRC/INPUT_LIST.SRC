	LOGICAL FUNCTION INPUT_LIST
C
***	IDENT	23JN86
***	MODULE	INPUT_LIST
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C Author TJ Ibbs, 19 June 1986
C
C To read the file specified by /INPUT_LIST=file, and interpret each line
C as a command of the form
C				<IFF file> [/[NO]SIF]
C
C We return TRUE if something has gone wrong, and we should exit,
C and otherwise FALSE
C
	IMPLICIT NONE
C
C included data
C
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'	! LSLLIB errors
	INCLUDE	'HERE:I2OSTFMSG.PAR'		! local errors
C
	INCLUDE	'LSL$CMNLSL:FILENAME.CMN'	! filename parsing
	INCLUDE	'LSL$CMNLSL:CLD.CMN'		! command line decoding
	INCLUDE	'LSL$CMNLSL:TXTC.CMN'		! for TXTDSC
C
	INCLUDE	'HERE:COMMANDS.CMN'		! decoded command line
C
C the CLD module
C
	EXTERNAL	INLIST_CLD
C
C functions
C
	LOGICAL		FLROPN
	LOGICAL		FLRSTR
	LOGICAL	       	DCL_PARSE
	LOGICAL		DCL_FILE
	LOGICAL		DCL_QUAL
C
C workspace
C
	LOGICAL		OK		! return from functions
	INTEGER		IERR		! secondary return
	LOGICAL		ABSENT		! true if thing is absent
	LOGICAL		HAD_QUAL	! true if qualifier there
	LOGICAL		PRESENT		! true if it's by a parameter
	LOGICAL		NEGATED		! true if /NO...
	INTEGER		RECORD		! count of lines in file
C
	INTEGER		LISTLEN		! length of INPUT_LIST filename
	CHARACTER*(C_MAX_SIZ)	LISTFILE! the actual filename
C
C **********************************************************************
C assume the worst
C
	INPUT_LIST = .TRUE.
C
C we have already used DCL_QUAL to find /INPUT_LIST - now use DCL_FILE
C to get the filename
C
	OK = DCL_FILE(  'INPUT_LIST',	! the switch name
     &			'.OPT',		! the default name
     &			ABSENT,		! out - was it absent
     &			.FALSE.,	! not a list
     &			.TRUE. )	! it can report its own errors
C
	IF ( .NOT.OK ) GOTO 9999
C
	LISTLEN  = FIL_LEN(1)
	LISTFILE = FILARY(1)(:LISTLEN)
C
C **********************************************************************
C so we can open the input file
C
	OK = FLROPN( 1, LISTFILE(:LISTLEN), IERR )
C
	IF ( .NOT.OK ) THEN
	   CALL LSL_PUTMSG( OK )
	   IF ( OK.EQ.LSL__SYSOPEN ) CALL LSL_ADDMSG( IERR )
	   CALL LSL_ADDMSG( I2OSTF__LISTOPN, LISTFILE(:LISTLEN) )
	   GOTO 9999
	ENDIF
C
C **********************************************************************
C and loop reading lines from the file
C
 	RECORD  = 0
	INCOUNT = 0
C
200	RECORD = RECORD+1
	OK = FLRSTR( ,, IERR )
C
	IF ( .NOT.OK ) THEN
C
	   IF ( OK.EQ.LSL__EOF ) GOTO 400	! end of file detected
C
	   CALL LSL_PUTMSG( OK )
	   IF ( OK.EQ.LSL__SYSREAD ) CALL LSL_ADDMSG( IERR )
	   GOTO 9990
	ENDIF
C
C and parse the command line according to the relevant CLD
C
	OK = DCL_PARSE(  TXTDSC,	! the string to parse
     &		 	'I2OSTF',	! the command verb
     &			 .FALSE.,	! don't burst
     &			 INLIST_CLD,	! CLD name
     &			 .TRUE. )	! report errors itself
C
	IF ( .NOT.OK ) GOTO 9990
C
C **********************************************************************
C we will always have an input file - look for it
C
	OK = DCL_FILE( 'INFILE',	! the input file
     &			'LSL$IF:.IFF;0',! the default name
     &			ABSENT,		! true if not there
     &			.FALSE.,	! not a list
     &			.TRUE. )	! report errors itself
C                                                            
	IF ( .NOT.OK ) GOTO 9990
C
C because INFILE is a REQUIRED item, it is a bug if ABSENT is true
C - check for that
C
	IF ( ABSENT ) THEN
	   CALL LSL_PUTMSG( I2OSTF__NOINFILE )
	   GOTO 9990
	ENDIF
C
C remember the name for later use
C
	IF ( INCOUNT.GE.INMAX ) THEN
	   CALL LSL_PUTMSG( I2OSTF__MAXINFILE, INMAX )
	   GOTO 9990
	ENDIF
C
	INCOUNT = INCOUNT+1
C
	INLEN(INCOUNT)  = FIL_LEN(1)
	INFILE(INCOUNT) = FILARY(1)(:FIL_LEN(1))
C
C **********************************************************************
C now check whether we have got the /SIM switch...
C
	OK = DCL_QUAL( 'SIM',		! specifies this file is SIM
     &			HAD_QUAL,	! true if it's there
     &			PRESENT,	! true if by parameter
     &			NEGATED,	! true if /NOSIM
     &			.TRUE. )	! report errors itself
C
C PRESENT is irrelevant - this is not a positional command
C
	SIM(INCOUNT) = HAD_QUAL .AND. .NOT.NEGATED
C
C and back for the next line
C
	GOTO 200
C
C **********************************************************************
C if we reach here, then we may assume that we have succeeded in
C interpreting all of the command lines
C
400 	INPUT_LIST = .FALSE.
	GOTO 9999
C
C **********************************************************************
C and join up with any errors
C
9990	CALL LSL_ADDMSG( I2OSTF__LISTRD, LISTFILE(:LISTLEN), RECORD )
C
9999	RETURN
	END
