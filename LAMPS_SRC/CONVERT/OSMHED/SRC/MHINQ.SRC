C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-02-25 19:05:00.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION MHINQ(FORMAT,VALUE,BASE,NNAME,NAMES,SPECIAL)
C
***	MODULE	MHINQ
***	IDENT	25FE91
C
	IMPLICIT NONE
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C
C	See .UPD file for further updates	RJH	29-Jul-1987
C	add ERR arg to TTRSTR for better errors
C	make BYTARR one longer			TJI	20-Aug-1982
C	spaces only to a string zero it		TJI	13-Aug-1982
C	accept * to unset (zero) a date		TJI	 2-Aug-1982
C	give new error if month out of range
C	allow eg 5/82 to specify single date	TJI	13-May-1982
C	if SPECIAL=2 right justify text		TJI	12-May-1982
C	cope with multiple survey dates		PGH	10-May-1982
C	RDCH(ICH), not (CH) before label 70	AJW	13-Apr-1982
C	VREAD is now INTEGER*4, not just INT	AJW	13-Apr-1982
C	Bit 0 is most significant		AJW	19-Mar-1981
C	Last edited				AJW	12-Mar-1981
C	Created					PGH	 5-Mar-1981
C
C IFF Map Header editor inquiry routine
C MHINQ is  0 is success (number typed or just RETURN)
C MHINQ is >0 is 3 letter name typed and checked ok
C MHINQ is <0 is error of some sort
C
	CHARACTER*(*) FORMAT		! prompt string
	INTEGER*4     VALUE		! field to be updated
	INTEGER*2     BASE		! base to read with (10,8)
C					  if =0 then date
C					  if <0 then characters
	INTEGER*2     NNAME		! number of commands
	CHARACTER*4   NAMES(NNAME)	! command table
	INTEGER*2     SPECIAL		! special action to be taken
C			if =0 then none		  (expect base=?)
C			if =1 then 2 years 	  (	  base=0)
C			if =2 then right justify  (	  base<0)
C			if =3 then year by itself (	  base>0)
C			if =4 then day,month,year (	  base=0)
C
***	PARAMETER/CMN:OSMHEDMSG/	! message definitions
***	PARAMETER/LSL$CMNLSL:LSLLIBMSG/	! LSLLIB message definitions
C
***	COMMON/LSL$CMNLSL:EXCEPTION/
***	COMMON/LSL$CMNLSL:EXPC/
***	COMMON/LSL$CMNLSL:TXTC/
C
C routines:
	LOGICAL*4 RDNUM,RDCHS,RDCH
	INTEGER*4 TTRSTR
	INTEGER*4 LIB$EXTZV
C
C w/s:
	CHARACTER*4 C4		! 4 chrs
	CHARACTER*1 CH		! 2 chrs
	INTEGER*2   ICH		! non CHRACTER chr
	INTEGER*4   OK		! LSLLIB error return
	INTEGER*4   ERR		! system error return
	INTEGER*4   LEN		! length of line read
	INTEGER*4   I		! integer
	INTEGER*4   CLEN	! number of chrs typed
	INTEGER*4   MAXCH	! =-BASE, max no of chrs
	LOGICAL     FIRST	! reading month part of date
	LOGICAL     DAY		! reading day   part of date
	INTEGER*4   VREAD	! READ, not READ (rhymes with LEAD)
	INTEGER*4   HALF1,HALF2	! halves of VALUE
	INTEGER*4   D,M,Y	! day,month,year
	BYTE        BYTARR(81)	! byte array for conversion
	CHARACTER*255	MSGSTR	! error message string
	INTEGER*4	MSGLEN	! its length
	INTEGER*4	FLGCH
C
	BYTE        SPACE
	DATA SPACE/' '/
C
C code:
10	MHINQ= 0		! assume success
	FIRST=.TRUE.
	DAY  =.TRUE.
	MAXCH=-BASE
C
C first, prompt with the prompt string FORMAT, filled in with VALUE
C
	IF(BASE)15,12,11
C BASE>0, single integer
11	IF (BASE.GT.0) CALL EXPAND(FORMAT,VALUE)
	GOTO 20
C
C BASE=0, date, bits 0-3 are month, 4-23 are year
12	IF (SPECIAL.EQ.1) GOTO 13
	IF (SPECIAL.EQ.4) GOTO 16
	HALF1 = LIB$EXTZV(20, 4,VALUE)
	HALF2 = LIB$EXTZV( 0,20,VALUE)
	GOTO 14
C BASE=0, if SPECIAL=1 then halves are years
13	HALF1 = LIB$EXTZV(12,12,VALUE)
	HALF2 = LIB$EXTZV(0,12,VALUE)
14	CALL EXPAND(FORMAT,HALF1,HALF2)
	GOTO 20
C
C BASE<0, -BASE ICL chracters
15	IF (SPECIAL.LT.0) THEN
CCC	   CALL ASC(VALUE,BYTARR,MAXCH)
	   CALL ASC_FLGS(VALUE,BYTARR,MAXCH)
	   FLGCH = ABS(SPECIAL)
	   CALL EXPAND(FORMAT,BYTARR(FLGCH))
	ELSE	   
	   CALL ASC(VALUE,BYTARR,MAXCH)
	   CALL EXPAND(FORMAT,BYTARR)
	ENDIF
	GOTO 20
C
C BASE=0, if SPECIAL=4 then it's a binary date
16	CALL FROM_BINDAY(VALUE,D,M,Y)
	CALL EXPAND(FORMAT,D,M,Y)
C
20	CONTINUE
C
C get something from the terminal
	OK = TTRSTR(,LEN,EXPDSC,ERR)		! answer into TXTC
	IF (OK .EQ. LSL__EOF) GOTO 170		! control Z
	IF (OK .AND. (LEN.EQ.0)) GOTO 180	! nowt, RETURN
	IF (OK .AND. (LEN.GT.0)) GOTO 30	! sommat, check it
	CALL LSL_PUTMSG(OSMHED__RDERR)		! must have error
	CALL LSL_ADDMSG(OK)
	IF (OK .EQ. LSL__SYSERR) CALL LSL_ADDMSG(ERR)
	GOTO 170				! get out
C
30	CALL BSLN
	IF (BASE.LT.0) GOTO 140		! we want chrs
	IF (RDCHS(ICH)) GOTO 180	! blank line
	CH=CHAR(ICH)
	IF (CH.GE.'0'.AND.CH.LE.'9') GOTO 50	! digit
	IF (CH.EQ.'*') GOTO 86			! want to zero month
	IF (CH.GE.'A'.AND.CH.LE.'Z') GOTO 100	! letter
	IF (CH.GE.'a'.AND.CH.LE.'z') GOTO 100	! letter
	IF (CH.EQ.'?') GOTO 100  ! treat as letter
C
C don't understand
40	CALL LSL_GETMSG(OSMHED__UNEXPCH,MSGSTR,MSGLEN)
	CALL WRITEF('%'//MSGSTR(1:MSGLEN),ICH)
	GOTO 10
C
C here with a number
50	CALL BSCH
60	I=BASE
	IF (BASE.LE.0) I=10
	IF (RDNUM(VREAD,I)) THEN
	   CALL LSL_GETMSG(OSMHED__BADNUM,MSGSTR,MSGLEN)
	   CALL WRITEF('%'//MSGSTR(1:MSGLEN))
	   CALL LSL_ADDMSG(ERRNUM)
	   IF (ERRNUM .EQ. LSL__HADEXCP) CALL LSL_ADDMSG(LSL_EXCP)
	   GOTO 10
	ENDIF
	IF (BASE.NE.0) GOTO 80
C
C here for a date
C if SPECIAL=1, then we want form  yyyy/yyyy but also accept    yy/yy
C if SPECIAL=4, then we want form dd/mm/yyyy but also accept dd/mm/yy
C else               we want         mm/yyyy but also accept    mm/yy
	  IF (.NOT.FIRST) GOTO 70
	  IF (SPECIAL.NE.4 .OR. .NOT.DAY) GOTO 62
C
C day part of date:
	    IF (VREAD.GT.31 .OR. VREAD.LT.1) GOTO 94
	    D=VREAD
	    DAY=.FALSE.
	    CALL RDCH(ICH)	! skip the delimiter
	    GOTO 60
C
C month part of date or first year:
62	    IF (SPECIAL.EQ.1) GOTO 64		   ! first  number year
	    IF (VREAD.GT.12.OR.VREAD.LT.1) GOTO 95 ! check it's a month
	    IF (SPECIAL.NE.4) GOTO 63		   ! first  number month
	    M=VREAD				   ! second number month
	    GOTO 66
63	    CALL LIB$INSV(VREAD,20,4,VALUE)
	    GOTO 66
64	    IF (VREAD.GE.1 .AND. VREAD.LE.99) THEN
	       VREAD = VREAD+1900	    ! fill out year number
	    ENDIF
	    CALL LIB$INSV(VREAD,12,12,VALUE)
66	    FIRST=.FALSE.
	    IF (DCPTR.GT.LEN .AND. SPECIAL.EQ.1) GOTO 180  ! single year
	    CALL RDCH(ICH)		    ! skip the delimiter
	    GOTO 60
C
C last number - year in all cases
70	  CONTINUE
	    IF (DCPTR.LE.LEN) GOTO 90
	    IF (VREAD.GE.1 .AND. VREAD.LE.99) THEN
	       VREAD = VREAD+1900	    ! fill out year number
	    ENDIF
	    IF (SPECIAL.EQ.1) GOTO 75
	    IF (SPECIAL.NE.4) GOTO 74
	    Y=VREAD
	    CALL TO_BINDAY(VALUE,D,M,Y)
	    GOTO 180
74	    CALL LIB$INSV(VREAD,0,20,VALUE)
	    GOTO 180
75	    CALL LIB$INSV(VREAD,0,12,VALUE)
	    GOTO 180
C
80	IF (DCPTR.LE.LEN) GOTO 90
	VALUE=VREAD
	IF (SPECIAL.EQ.3) GOTO 85	! check single year
	GOTO 180
C
C we have a single year - make it be in this century
85	IF (VALUE.GE.1 .AND. VALUE.LE.99) THEN
	   VALUE = VALUE+1900
	ENDIF
	GOTO 180
C
C we want to zero a date - check it is a date that is wanted
86	IF (BASE.NE.0.AND.SPECIAL.NE.3) GOTO 96	! date not wanted
	VALUE = 0				! unset the date field
	CALL LSL_GETMSG(OSMHED__DATUNSET,MSGSTR,MSGLEN)
	CALL WRITEF('%'//MSGSTR(1:MSGLEN))	! confirm it (paranoia)
	GOTO 180
C
C general purpose error moan
90	CALL LSL_GETMSG(OSMHED__BADNUM,MSGSTR,MSGLEN)
	CALL WRITEF('%'//MSGSTR(1:MSGLEN))
	GOTO 10
C
C string too long
91	CALL LSL_GETMSG(OSMHED__STRTOOLONG,MSGSTR,MSGLEN)
	IF (SPECIAL.LT.0) THEN
	   CALL WRITEF('%'//MSGSTR(1:MSGLEN),1)
	ELSE
	   CALL WRITEF('%'//MSGSTR(1:MSGLEN),MAXCH)
	ENDIF
	GOTO 10
C
C day wrong
94	CALL LSL_GETMSG(OSMHED__BADDAY,MSGSTR,MSGLEN)
	CALL WRITEF('%'//MSGSTR(1:MSGLEN),VREAD)
	GOTO 10
C
C month wrong
95	CALL LSL_GETMSG(OSMHED__BADMONTH,MSGSTR,MSGLEN)
	CALL WRITEF('%'//MSGSTR(1:MSGLEN),VREAD)
	GOTO 10
C
C got an asterisk when we don't want a date
96	CALL LSL_GETMSG(OSMHED__NOTDATE,MSGSTR,MSGLEN)
	CALL WRITEF('%'//MSGSTR(1:MSGLEN))
	GOTO 10
C
C here with a letter
100	CALL BSCH
	C4=' '
	DO 110 I=1,4
	  IF (RDCH(ICH)) GOTO 120	! end of line
	  CLEN=I
	  CH=CHAR(ICH)
	  IF (CH.GE.'a'.AND.CH.LE.'z') CH=CHAR(ICH-32)
	  C4(I:I)=CH
110	CONTINUE
C
C now got a one to four letter word
120	DO 130 I=1,NNAME
	  MHINQ=I
C	  found name match ?
	  IF (C4(1:CLEN).EQ.NAMES(MHINQ)(1:CLEN)) GOTO 180
130	CONTINUE
	CALL LSL_GETMSG(OSMHED__UNKNAME,MSGSTR,MSGLEN)
	CALL WRITEF('%'//MSGSTR(1:MSGLEN),C4(1:CLEN))
	GOTO 10
C
C here when expecting characters (base < 0)
C copy the string into VALUE
140	IF (RDCHS(ICH)) THEN 		! null value
C
C For FLG1-8 treat the null as a space so that the flag byte can be 
C set to a space character.
	   IF (SPECIAL.LT.0) THEN
	      LEN = 1
	      ICH = 32
	   ELSE
	      LEN = 0			! zeroing string
	   ENDIF
	ENDIF
C
	IF (SPECIAL.GE.0) GOTO 142
	IF (LEN.GT.1) GOTO 91			! error
	IF (LEN.EQ.1) GOTO 160
	GOTO 144
142	IF (LEN.GT.MAXCH) GOTO 91		! too long
	IF (LEN.EQ.MAXCH) GOTO 160		! fits exactly
	IF (SPECIAL.EQ.2) GOTO 155		! right justify
144	DO 150 I = LEN+1,MAXCH
	   TXTBUF(I) = SPACE
150	CONTINUE
	GOTO 160				! skip to output it
C
C here to right justify some text
155	DO 156 I = 0, LEN-1
	   TXTBUF(MAXCH-I) = TXTBUF(LEN-I)	! move to the right
156	CONTINUE
	DO 157 I = 1, MAXCH-LEN
	   TXTBUF(I) = SPACE			! pad front with spaces
157	CONTINUE
C
C and here we output our text
160	IF (SPECIAL.LT.0) THEN
	   BYTARR(FLGCH) = ICH
	   CALL ICL(BYTARR,VALUE,MAXCH)
	ELSE
	   CALL ICL(TXTBUF,VALUE,MAXCH)
	ENDIF
	GOTO 180
C
C ^Z or error
170	MHINQ = -1
C
C exit route
180	RETURN
	END
