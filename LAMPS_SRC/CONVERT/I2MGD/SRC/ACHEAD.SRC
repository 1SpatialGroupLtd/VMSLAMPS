C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-07-25 12:13:42.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	  INTEGER*4  FUNCTION ACHEAD (IECODE,IELEN)
C
***	MODULE	ACHEAD 
***	IDENT	25JL91
C
C 	Copyright Laser-Scan Laboratories Ltd.,England
C
C Created.						FJB  02-Aug-1988
C
C Reads the contents of all AC entries in the specified feature, in layer 0,
C and assembles the informational content of a Header Record in a buffer.
C Additional header records (blocks) are assembled from type 60 ACs.
C
	IMPLICIT NONE
C
C Parameters:                                          
	INCLUDE 'LSL$CMNI2MGD:PARAMS.PAR'
	INCLUDE 'LSL$CMNI2MGD:I2MGDMSG.PAR'
C
C Common:
	INCLUDE 'LSL$CMNI2MGD:COMMAND.CMN'
	INCLUDE 'LSL$CMNI2MGD:DATABUF.CMN'
	INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'
 	INCLUDE 'LSL$CMNFRT:FRTACD.CMN'
C
C Word:
	INTEGER*2	I,N,WORD	! temporary/loop variable
	INTEGER*2	IELEN	! length of
	INTEGER*2	IECODE  ! ... current iff entry
	INTEGER*2	ARRPNT	! pointer into field arrays
	INTEGER*2	NPTS	! number of points in ST or ZS
	INTEGER*2	NCHS	! characters in AC text
	INTEGER*2	CLENGTH ! length of character string
	INTEGER*2	NBLOCK
	INTEGER*2	FIELDSTA(60) 	! holds start of field in block
	INTEGER*2	FIELDLEN(60)	! holds length in bytes of field
	INTEGER*2	FIELDPLA(60)	! holds number of implied decimal 
C					! places in a 'real' field
C
C Longword:
	INTEGER		RTYPE	! current type of AC entry
	INTEGER		IERR	! for error return	
	INTEGER*4	IVAL	! integer AC value
	INTEGER		LINSTA	! start pos. of line in block
	INTEGER	     	OK    	! errors
	INTEGER	     	INUM	! errors
C
C Functions:
	INTEGER*4	ACDFND		! get ACD particulars
	INTEGER*4	OUTREC		! writes block to tape
	INTEGER*4	EXPAND		! returns number of characters
C
C Real*4:
	REAL		RVAL	! real AC value
C                                              
C Character
	CHARACTER*2	SCHARR	! buffer for line sequence number
	CHARACTER*255	BCHARR	! temporary buffer for AC contents
	CHARACTER*1920	OUTSTR2	! buffer for header output block 2	
	CHARACTER*1920	OUTSTR3	! buffer for header output block 3	
	CHARACTER*1920	OUTSTR4	! buffer for header output block 4	
C
C Presets:
	INTEGER*4 	SS$_NORMAL
	EXTERNAL  	SS$_NORMAL	! normal successful completion
C
C
C Define fields in header block 
	DATA  FIELDSTA /
     &		   2,  10,  15,  23,  24,  25,  27,  28,  29,  30,
     &		  31,  32,  38,  81,  99, 120, 121, 127, 161, 219,
     &		 241, 247, 281, 287, 321, 361, 401, 441, 481, 521,
     &		 561, 601, 641, 681, 881, 884, 896, 901, 903, 961,
     &		 964, 966, 970, 975, 978, 980, 992,1041,1044,1046,
     &		1047,1064,1065,1081,1121,1128,1161,1168,   4,   1/
C
	DATA  FIELDLEN /
     &	 8, 5, 8, 1, 1, 2, 1, 1, 1, 1, 1, 6,41,18,21, 1, 6,32,58,20,
     &	 6,34, 6,32,40,38,40,38,40,38,40,38,40,38, 3,12, 5, 2,56, 3,
     &	 2, 4, 5, 3, 2,12,47, 3, 2, 1,17, 1,16,38, 7,33, 7,31,75,78 /
C
	DATA  FIELDPLA /
     &	 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     &	 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1,
     &	 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0 /
C 
C ......................................................................
C
C Assume the best
	ACHEAD =%LOC(SS$_NORMAL)
C
C Blank fill record buffers
	DO 5,N=1,1920
	    OUTSTR1(N:N)=' '
	    OUTSTR2(N:N)=' '
	    OUTSTR3(N:N)=' '
	    OUTSTR4(N:N)=' '
5	CONTINUE
C
C Insert fixed and default field contents
	OUTSTR1(1:1)='1'
	OUTSTR1(10:14)='MGD77'
	OUTSTR1(15:22)='        '
	OUTSTR1(24:24)='0'
	OUTSTR1(25:26)='29'
	OUTSTR1(79:80)='01'
	OUTSTR1(120:120)='0'
	OUTSTR1(159:160)='02'
	OUTSTR1(239:240)='03'
 	OUTSTR1(319:320)='04'
	OUTSTR1(399:400)='05'
	OUTSTR1(479:480)='06'
	OUTSTR1(559:560)='07'
	OUTSTR1(639:640)='08'
	OUTSTR1(719:720)='09'
	OUTSTR1(721:760)='A(I1,A8,F5.2,4I2,F5.3,F8.5,F9.5,I1,F6.4,'
	OUTSTR1(761:800)='F6.1,I2,I1,3F6.1,I1,F5.1,F6.0,F7.1,   10'
	OUTSTR1(801:817)='F6.1,F5.1,A8,4I1)'
	OUTSTR1(879:880)='11'
	OUTSTR1(959:960)='12'
	OUTSTR1(961:963)='999'
	OUTSTR1(978:979)='00'
	OUTSTR1(1039:1040)='13'
	OUTSTR1(1041:1043)='999'
	OUTSTR1(1119:1120)='14'
	OUTSTR1(1199:1200)='15'
	OUTSTR1(1279:1280)='16'
	OUTSTR1(1359:1360)='17'
	OUTSTR1(1439:1440)='18'
	OUTSTR1(1519:1520)='19'
	OUTSTR1(1599:1600)='20'
	OUTSTR1(1679:1680)='21'
	OUTSTR1(1759:1760)='22'
	OUTSTR1(1839:1840)='23'
	OUTSTR1(1919:1920)='24'
C
C
C
C------------------------------------------------------------------------------
C loop to read and format AC entries
C
C Get the type number
10     	RTYPE = 0
	CALL EIHRI(RTYPE,1,1)
C
C Set number of characters in AC text field to a silly value to force integer,
C and real datatypes not to be adjusted (see statement label 300)
C (SPR 1248) S.Townrow 25/7/91
	NCHS = 32767
C
C Derive array pointer
	ARRPNT = 0
	DO 20,N=1,60
	   IF(HARRAY(N) .NE. RTYPE)GOTO 20
	   ARRPNT = N 
	   GOTO 25
20	CONTINUE
C
25	IF(ARRPNT.LT. 1)THEN
	   CALL LSL_PUTMSG(I2MGD__UNKACOD,RTYPE)
	   GOTO 400
	ENDIF
C
C Ignore 'Ten Degree Identifiers'
	IF(ARRPNT.EQ.59)GOTO 400
C
C Do not write a U.S. Data Center number
	IF(ARRPNT.EQ.3)GOTO 400
C                    
C Obtain value type
	IF(ACDFND(RTYPE))GOTO 999
C               
C Reformat and put into buffer
	GOTO(110,120,130,140,150),ACD_DATA_TYPE
C
C Unknown type
100     ACHEAD=I2MGD__UNKATYP
	CALL LSL_PUTMSG(ACHEAD,RTYPE)
	GOTO 999	
C
C Integer
110	CALL EIHRL(IVAL,1,2)
	IF( (IVAL .LT. ACD_MIN_MAX_I(1)) .OR.
     &	    (IVAL .GT. ACD_MIN_MAX_I(2))      ) THEN
	   ACHEAD = I2MGD__INTMAX
	   CALL LSL_PUTMSG(ACHEAD,IVAL,RTYPE)
	   GOTO 999         
	ENDIF                  
	GOTO 200
C
C Real          
120	CALL EIHRR(RVAL,1,2)
	IF( (RVAL .LT. ACD_MIN_MAX_R(1)) .OR.
     &	    (RVAL .GT. ACD_MIN_MAX_R(2))      ) THEN
	   ACHEAD = I2MGD__RELMAX
	   CALL LSL_PUTMSG(ACHEAD,RVAL,RTYPE)
	   GOTO 999
	ENDIF                  
C
C Multiply by the number of decimal places required so can write it with
C an implied decimal place.
	IVAL = JINT(RVAL*(10**(FIELDPLA(ARRPNT))))	
	GOTO 200
C
C Character ( from additional text string in AC entry)
130	NCHS = (IELEN-3)*2
	CALL EIHR(%REF(BCHARR),IELEN-3,4)
C
C If last character is a null (for padding to even number),
C reduce character count
	IF(ICHAR(BCHARR(NCHS:NCHS)).EQ.0)NCHS=NCHS-1
	GOTO 300
C
C Date
140	GOTO 100	! error - shouldn't be any dates in the header
C
C Time
150	GOTO 100	! error - there shouldn't be any times in the header
C
C Expand an integer into the temporary buffer ,
C could be any fixed length from 1 to 8
200	GOTO(210,220,230,240,250,260,270,280),FIELDLEN(ARRPNT)
C
210	INUM = EXPAND('%WS% %^L%U%P0%I1',BCHARR,IVAL)
	IF(INUM .GT. 1)THEN
	   ACHEAD=I2MGD__EXPNUM
	   CALL LSL_PUTMSG(ACHEAD,INUM)
	   GOTO 999
	ENDIF
	GOTO 300
C
220	INUM = EXPAND('%WS% %^L%U%P0%I2',BCHARR,IVAL)
	IF(INUM .GT. 2)THEN
	   ACHEAD=I2MGD__EXPNUM
	   CALL LSL_PUTMSG(ACHEAD,INUM)
	   GOTO 999
	ENDIF
	GOTO 300
C 
230	INUM = EXPAND('%WS% %^L%U%P0%I3',BCHARR,IVAL)
	IF(INUM .GT. 3)THEN
	   ACHEAD=I2MGD__EXPNUM
	   CALL LSL_PUTMSG(ACHEAD,INUM)
	   GOTO 999           
	ENDIF
	GOTO 300
C 
240	INUM = EXPAND('%WS% %^L%U%P0%I4',BCHARR,IVAL)
	IF(INUM .GT. 4)THEN
	   ACHEAD=I2MGD__EXPNUM
	   CALL LSL_PUTMSG(ACHEAD,INUM)
	   GOTO 999
	ENDIF
	GOTO 300
C 
250	INUM = EXPAND('%WS% %^L%U%P0%I5',BCHARR,IVAL)
	IF(INUM .GT. 5)THEN
	   ACHEAD=I2MGD__EXPNUM
	   CALL LSL_PUTMSG(ACHEAD,INUM)
	   GOTO 999
	ENDIF
	GOTO 300
C 
260	INUM = EXPAND('%WS% %^L%U%P0%I6',BCHARR,IVAL)
	IF(INUM .GT. 6)THEN
	   ACHEAD=I2MGD__EXPNUM
	   CALL LSL_PUTMSG(ACHEAD,INUM)
	   GOTO 999
	ENDIF
	GOTO 300
C 
270	INUM = EXPAND('%WS% %^L%U%P0%I7',BCHARR,IVAL)
	IF(INUM .GT. 7)THEN
	   ACHEAD=I2MGD__EXPNUM
	   CALL LSL_PUTMSG(ACHEAD,INUM)
	   GOTO 999
	ENDIF
	GOTO 300
C 
280	INUM = EXPAND('%WS% %^L%U%P0%I8',BCHARR,IVAL)
	IF(INUM .GT. 8)THEN
	   ACHEAD=I2MGD__EXPNUM
	   CALL LSL_PUTMSG(ACHEAD,INUM)
	   GOTO 999
	ENDIF
	GOTO 300
C
C Place in correct position in header output array
300     CLENGTH = FIELDLEN(ARRPNT)
        IF(NCHS .LT. FIELDLEN(ARRPNT))CLENGTH=NCHS
C
	IF(ARRPNT.NE.60)THEN
	   OUTSTR1(FIELDSTA(ARRPNT):FIELDSTA(ARRPNT)+FIELDLEN(ARRPNT)-1)
     &	    = BCHARR(1:CLENGTH)
	ENDIF                       
C
C Put 'Additional Documentation' ACs into buffers for blocks 2 to 4
C
	IF(ARRPNT.EQ.60)THEN                    
	   SNUM=SNUM+1
	   CALL EXPAND('%WS% %^W%P0%I2',SCHARR,SNUM)
C
C Ignore surplus Additional Documentation ACs
	   IF(SNUM.GT.96)THEN
	      CALL LSL_PUTMSG(I2MGD__BADSNUM)
	      GOTO 400
	   ENDIF
C
C Block 1
	   IF(SNUM.LT.25)THEN
	      NBLOCK=1
	      LINSTA=(SNUM-1)*80
	      OUTSTR1(LINSTA+1:LINSTA+78) = BCHARR(1:CLENGTH)
	   ENDIF
C
C Block 2
 	   IF((SNUM.GT.24).AND.(SNUM.LT.49))THEN
	      NBLOCK=2
	      LINSTA=(SNUM-25)*80
	      IF(LINSTA.EQ.0)THEN		! first line of block
C
C Insert Header record type label
		OUTSTR2(1:1)='1' 
		LINSTA=1
		IF(CLENGTH.GT.77)THEN
		   CLENGTH=77
		   CALL LSL_PUTMSG(I2MGD__DOC77LONG)
		ENDIF
	      ENDIF
 	      OUTSTR2(LINSTA+1:LINSTA+78) = BCHARR(1:CLENGTH)
 	   ENDIF              
C
C Block 3
	   IF((SNUM.GT.48).AND.(SNUM.LT.73))THEN
	      NBLOCK=3
	      LINSTA=(SNUM-49)*80
	      IF(LINSTA.EQ.0)THEN		! first line of block
C
C Insert Header record type label
		OUTSTR3(1:1)='1' 
		LINSTA=1
		IF(CLENGTH.GT.77)THEN
		   CLENGTH=77
		   CALL LSL_PUTMSG(I2MGD__DOC77LONG)
		ENDIF
	      ENDIF
	      OUTSTR3(LINSTA+1:LINSTA+78) = BCHARR(1:CLENGTH)
	   ENDIF     
C
C Block 4
	   IF((SNUM.GT.72).AND.(SNUM.LT.97))THEN
	      NBLOCK=4
	      LINSTA=(SNUM-73)*80
	      IF(LINSTA.EQ.0)THEN		! first line of block
C
C Insert Header record type label
		OUTSTR4(1:1)='1' 
		LINSTA=1
		IF(CLENGTH.GT.77)THEN
		   CLENGTH=77
		   CALL LSL_PUTMSG(I2MGD__DOC77LONG)
		ENDIF
	      ENDIF
	      OUTSTR4(LINSTA+1:LINSTA+78) = BCHARR(1:CLENGTH)
	   ENDIF
C
	ENDIF
C
C------------------------------------------------------------------------------
C
C Get the next entry
400	CALL IFFNXT(IECODE,IELEN)
	IF(IELEN.EQ.-1) GOTO 999
	IF(IECODE .EQ. 'AC')GOTO 10
C
C
C Had all the AC's we're going to get in this feature, so:
C
C Insert correct header block count
	INUM = EXPAND('%WS% %^W%U%P0%I1',BCHARR,NBLOCK)
	IF(INUM .GT. 1)THEN
	   ACHEAD=I2MGD__EXPNUM
	   CALL LSL_PUTMSG(ACHEAD,INUM)
	   GOTO 999
	ENDIF
	OUTSTR1(23:23) = BCHARR(1:1)
C
C Write out block 1
	IF(HAD_DIAG)THEN
	   CALL WRITEF('Header Block 1 : ')
	   CALL WRITEF('%S80',OUTSTR1(1:80))
	   CALL WRITEF('%S80',OUTSTR1(81:160))
	   CALL WRITEF('%S80',OUTSTR1(161:240))
	   CALL WRITEF('%S80',OUTSTR1(241:320))
	   CALL WRITEF('%S80',OUTSTR1(321:400))
	   CALL WRITEF('%S80',OUTSTR1(401:480))
	   CALL WRITEF('%S80',OUTSTR1(481:560))
	   CALL WRITEF('%S80',OUTSTR1(561:640))
	   CALL WRITEF('%S80',OUTSTR1(641:720))
	   CALL WRITEF('%S80',OUTSTR1(721:800))
	   CALL WRITEF('%S80',OUTSTR1(801:880))
	   CALL WRITEF('%S80',OUTSTR1(881:960))
	   CALL WRITEF('%S80',OUTSTR1(961:1040))
	   CALL WRITEF('%S80',OUTSTR1(1041:1120))
	   CALL WRITEF('%S80',OUTSTR1(1121:1200))
	   CALL WRITEF('%S80',OUTSTR1(1201:1280))
	   CALL WRITEF('%S80',OUTSTR1(1281:1360))
	   CALL WRITEF('%S80',OUTSTR1(1361:1440))
	   CALL WRITEF('%S80',OUTSTR1(1441:1520))
	   CALL WRITEF('%S80',OUTSTR1(1521:1600))
	   CALL WRITEF('%S80',OUTSTR1(1601:1680))
	   CALL WRITEF('%S80',OUTSTR1(1681:1760))
	   CALL WRITEF('%S80',OUTSTR1(1761:1840))
	   CALL WRITEF('%S80',OUTSTR1(1841:1920))
	ENDIF
C
C set record counter to full block size      
	IRECORD = 16 
C
  	OK = OUTREC(OUTSTR1)
	IF(.NOT. OK)THEN 
	   ACHEAD=I2MGD__MTBLK
	   CALL LSL_PUTMSG(ACHEAD)
	   GOTO 999
	ENDIF
C
C Finish block 2
	IF(NBLOCK.GT.1)THEN
	   DO 420,SNUM=25,48
	      CALL EXPAND('%WS% %^W%U%I2',SCHARR,SNUM)
	      LINSTA=(SNUM-25)*80
	      OUTSTR2(LINSTA+79:LINSTA+80) = SCHARR(1:2)
420	   CONTINUE 
C
C Write block 2
	   IF(HAD_DIAG)THEN
	      CALL WRITEF('Header Block 2 : ')
	      CALL WRITEF('%S80',OUTSTR2(1:80))
	      CALL WRITEF('%S80',OUTSTR2(81:160))
	      CALL WRITEF('%S80',OUTSTR2(161:240))
	      CALL WRITEF('%S80',OUTSTR2(241:320))
	      CALL WRITEF('%S80',OUTSTR2(321:400))
	      CALL WRITEF('%S80',OUTSTR2(401:480))
	      CALL WRITEF('%S80',OUTSTR2(481:560))
	      CALL WRITEF('%S80',OUTSTR2(561:640))
	      CALL WRITEF('%S80',OUTSTR2(641:720))
	      CALL WRITEF('%S80',OUTSTR2(721:800))
	      CALL WRITEF('%S80',OUTSTR2(801:880))
	      CALL WRITEF('%S80',OUTSTR2(881:960))
	      CALL WRITEF('%S80',OUTSTR2(961:1040))
	      CALL WRITEF('%S80',OUTSTR2(1041:1120))
	      CALL WRITEF('%S80',OUTSTR2(1121:1200))
	      CALL WRITEF('%S80',OUTSTR2(1201:1280))
	      CALL WRITEF('%S80',OUTSTR2(1281:1360))
	      CALL WRITEF('%S80',OUTSTR2(1361:1440))
	      CALL WRITEF('%S80',OUTSTR2(1441:1520))
	      CALL WRITEF('%S80',OUTSTR2(1521:1600))
	      CALL WRITEF('%S80',OUTSTR2(1601:1680))
	      CALL WRITEF('%S80',OUTSTR2(1681:1760))
	      CALL WRITEF('%S80',OUTSTR2(1761:1840))
	      CALL WRITEF('%S80',OUTSTR2(1841:1920))
	   ENDIF                    
C
	   OK = OUTREC(OUTSTR2)
	   IF(.NOT. OK)THEN
	      ACHEAD=I2MGD__MTBLK
	      CALL LSL_PUTMSG(ACHEAD)
	      GOTO 999
	   ENDIF
 	ENDIF              
C
C Finish block 3
	IF(NBLOCK.GT.2)THEN
	   DO 430,SNUM=49,72
	      CALL EXPAND('%WS% %^W%U%I2',SCHARR,SNUM)
	      LINSTA=(SNUM-49)*80
	      OUTSTR3(LINSTA+79:LINSTA+80) = SCHARR(1:2)
430	   CONTINUE 
C
C Write out block 3
	   IF(HAD_DIAG)THEN
	      CALL WRITEF('Header Block 3 : ')
	      CALL WRITEF('%S80',OUTSTR3(1:80))
	      CALL WRITEF('%S80',OUTSTR3(81:160))
	      CALL WRITEF('%S80',OUTSTR3(161:240))
	      CALL WRITEF('%S80',OUTSTR3(241:320))
	      CALL WRITEF('%S80',OUTSTR3(321:400))
	      CALL WRITEF('%S80',OUTSTR3(401:480))
	      CALL WRITEF('%S80',OUTSTR3(481:560))
	      CALL WRITEF('%S80',OUTSTR3(561:640))
	      CALL WRITEF('%S80',OUTSTR3(641:720))
	      CALL WRITEF('%S80',OUTSTR3(721:800))
	      CALL WRITEF('%S80',OUTSTR3(801:880))
	      CALL WRITEF('%S80',OUTSTR3(881:960))
	      CALL WRITEF('%S80',OUTSTR3(961:1040))
	      CALL WRITEF('%S80',OUTSTR3(1041:1120))
	      CALL WRITEF('%S80',OUTSTR3(1121:1200))
	      CALL WRITEF('%S80',OUTSTR3(1201:1280))
	      CALL WRITEF('%S80',OUTSTR3(1281:1360))
	      CALL WRITEF('%S80',OUTSTR3(1361:1440))
	      CALL WRITEF('%S80',OUTSTR3(1441:1520))
	      CALL WRITEF('%S80',OUTSTR3(1521:1600))
	      CALL WRITEF('%S80',OUTSTR3(1601:1680))
	      CALL WRITEF('%S80',OUTSTR3(1681:1760))
	      CALL WRITEF('%S80',OUTSTR3(1761:1840))
	      CALL WRITEF('%S80',OUTSTR3(1841:1920))
	   ENDIF
C                                         
	   OK = OUTREC(OUTSTR3)
	   IF(.NOT. OK)THEN
	      ACHEAD=I2MGD__MTBLK
	      CALL LSL_PUTMSG(ACHEAD)
	      GOTO 999
	   ENDIF
 	ENDIF              
C        
C Finish block 4
	IF(NBLOCK.GT.3)THEN
	   DO 440,SNUM=73,96
	      CALL EXPAND('%WS% %^W%U%I2',SCHARR,SNUM)
	      LINSTA=(SNUM-73)*80
	      OUTSTR4(LINSTA+79:LINSTA+80) = SCHARR(1:2)
440	   CONTINUE 
C
C Write out block 4
	   IF(HAD_DIAG)THEN
	      CALL WRITEF('Header Block 4 : ')
	      CALL WRITEF('%S80',OUTSTR4(1:80))
	      CALL WRITEF('%S80',OUTSTR4(81:160))
	      CALL WRITEF('%S80',OUTSTR4(161:240))
	      CALL WRITEF('%S80',OUTSTR4(241:320))
	      CALL WRITEF('%S80',OUTSTR4(321:400))
	      CALL WRITEF('%S80',OUTSTR4(401:480))
	      CALL WRITEF('%S80',OUTSTR4(481:560))
	      CALL WRITEF('%S80',OUTSTR4(561:640))
	      CALL WRITEF('%S80',OUTSTR4(641:720))
	      CALL WRITEF('%S80',OUTSTR4(721:800))
	      CALL WRITEF('%S80',OUTSTR4(801:880))
	      CALL WRITEF('%S80',OUTSTR4(881:960))
	      CALL WRITEF('%S80',OUTSTR4(961:1040))
	      CALL WRITEF('%S80',OUTSTR4(1041:1120))
	      CALL WRITEF('%S80',OUTSTR4(1121:1200))
	      CALL WRITEF('%S80',OUTSTR4(1201:1280))
	      CALL WRITEF('%S80',OUTSTR4(1281:1360))
	      CALL WRITEF('%S80',OUTSTR4(1361:1440))
	      CALL WRITEF('%S80',OUTSTR4(1441:1520))
	      CALL WRITEF('%S80',OUTSTR4(1521:1600))
	      CALL WRITEF('%S80',OUTSTR4(1601:1680))
	      CALL WRITEF('%S80',OUTSTR4(1681:1760))
	      CALL WRITEF('%S80',OUTSTR4(1761:1840))
	      CALL WRITEF('%S80',OUTSTR4(1841:1920))
	   ENDIF
C
	   OK = OUTREC(OUTSTR4)
       	   IF(.NOT. OK)THEN
	      ACHEAD=I2MGD__MTBLK
	      CALL LSL_PUTMSG(ACHEAD)
	      GOTO 999
	   ENDIF
 	ENDIF              
C
C------------------------------------------------------------------------------
C
C End
999	IF(ACHEAD)ACHEAD=%LOC(SS$_NORMAL)
	IRECORD = 0		! zero record counter for later use by CODATA
       	RETURN
C
	END
