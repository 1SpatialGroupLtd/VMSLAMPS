C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-08-24 19:29:12.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C

	INTEGER*4  FUNCTION ACDATA (IECODE,IELEN)
C
***	MODULE	ACDATA 
***	IDENT	22AU88
C
C 	Copyright Laser-Scan Laboratories Ltd.,England
C
C Created.						FJB  10-Aug-1988
C
C Reads the contents of the AC entries in the current feature (in all layers
C after layer 0), and assembles the informational content of a Data Record.
C
	IMPLICIT NONE
C
C Parameters:                                          
	INCLUDE 'LSL$CMNI2MGD:PARAMS.PAR'
	INCLUDE 'LSL$CMNI2MGD:I2MGDMSG.PAR'
C
C Common:
	INCLUDE 'LSL$CMNI2MGD:COMMAND.CMN'
	INCLUDE 'LSL$CMNI2MGD:DATABUF.CMN'
	INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'
 	INCLUDE 'LSL$CMNFRT:FRTACD.CMN'
C
C
C Word:
	INTEGER*2	I,WORD	! temporary/loop variable
	INTEGER*2	IELEN	! length of
	INTEGER*2	IECODE  ! ... current iff entry
	INTEGER*2	NPTS	! number of points in ST or ZS
	INTEGER*2 	N    	! counter
	INTEGER*2	NCHS	! characters in AC text
	INTEGER*2	CLENGTH ! length of character string
	INTEGER*2	ARRPNT	! pointer into field arrays
	INTEGER*2	FIELDSTA(24) 	! holds start of field in block
	INTEGER*2	FIELDLEN(24)	! holds length in bytes of field
	INTEGER*2	FIELDPLA(24)	! holds number of implied decimal 
C					! places in a 'real' field
C
C Longword:
	INTEGER*4	IERR	! for error return	
	INTEGER	   	AVAL	! integer AC value
	INTEGER	   	IVAL	! integer AC value
	INTEGER	     	OK    	! errors
	INTEGER	     	INUM	! errors
	INTEGER		RTYPE	! AC code as read from IFF file
C
C Functions:
	INTEGER*4    	EXPAND	! function
	INTEGER*4      	ACDFND	! function
	INTEGER*4	CVT_DAY_DMY 	! converts date
C
C Real*4:
	REAL		RVAL	! real AC value
C                                              
C Character
	CHARACTER*255	BCHARR	! temporary buffer for AC contents
C
C Presets:
	INTEGER*4 	SS$_NORMAL
	EXTERNAL  	SS$_NORMAL	! normal successful completion
C
C
C
C Define fields in data block          
	DATA  FIELDSTA /  2, 11, 15, 21, 23, 45, 46, 52, 58, 60,
     &			 61, 67, 74, 79, 81, 86, 91, 99,105,109,
     &			117,118,119,120 / 
C
	DATA  FIELDLEN /  8,  4,  6,  2,  5,  1,  6,  6,  2,  1,
     &			  6,  6,  5,  1,  4,  5,  7,  5,  4,  8,
     &			  1,  1,  1,  1 /
C
	DATA  FIELDPLA /  0,  2,  0,  0,  3,  0,  4,  1,  0,  0,
     &			  1,  1,  1,  0,  1,  0,  1,  1,  1,  0,
     &			  0,  0,  0,  0 /
C 
C ......................................................................
C
C Assume the best
	ACDATA =%LOC(SS$_NORMAL)
C       
C------------------------------------------------------------------------------
C
C Jump to the end with a '9' filled data record if at 'EJ' entry
	IF(IECODE .EQ. 'EJ')GOTO 999
C
C
C loop to read and format AC entries
C
C Get the type number (table code)
10	RTYPE = 0
	CALL EIHRI(RTYPE,1,1)
C
C Derive array pointer
	ARRPNT = 0
	DO 20,N=1,24
	   IF(DARRAY(N) .NE. RTYPE)GOTO 20
	   ARRPNT = N 
	   GOTO 25
20	CONTINUE
C
25	IF(ARRPNT .LT. 1)THEN
	   CALL LSL_PUTMSG(I2MGD__UNKACOD,RTYPE)
	   GOTO 400
	ENDIF
C                    
C Obtain value type
	IF(ACDFND(RTYPE))GOTO 999
C               
C Reformat and put into buffer
	GOTO(110,120,130,140,150),ACD_DATA_TYPE
C
C Unknown type
100     ACDATA=I2MGD__UNKDTYP
    	CALL LSL_PUTMSG(ACDATA,RTYPE)
	GOTO 999	
C
C Integer
110	CALL EIHRL(IVAL,1,2)
	IF( (IVAL .LT. ACD_MIN_MAX_I(1)) .OR.
     &	    (IVAL .GT. ACD_MIN_MAX_I(2))      ) THEN
	   ACDATA = I2MGD__INTMAX
	   CALL LSL_PUTMSG(ACDATA,IVAL,RTYPE)
	   GOTO 999
	ENDIF                  
	GOTO 200
C
C Real          
120	CALL EIHRR(RVAL,1,2)
	IF( (RVAL .LT. ACD_MIN_MAX_R(1)) .OR.
     &	    (RVAL .GT. ACD_MIN_MAX_R(2))      ) THEN
	   ACDATA = I2MGD__RELMAX
	   CALL LSL_PUTMSG(ACDATA,RVAL,RTYPE)
	   GOTO 999
	ENDIF                  
C
C Multiply by the number of decimal places required so can write it with
C an implied decimal place.
	IVAL = INT(RVAL*(10.0**(FIELDPLA(ARRPNT))))	
	GOTO 200
C
C Character ( from additional text string in AC entry)
130	NCHS = (IELEN-3)*2
	CALL EIHR(%REF(BCHARR),IELEN-3,4)
C
C If last character is a null (for padding to even number),
C reduce character count
	IF(ICHAR(BCHARR(NCHS:NCHS)).EQ.0)NCHS=NCHS-1
	GOTO 300
C
C Date
140	GOTO 100	! error - shouldn't be any dates
C
C Time
150	GOTO 100	! error - there shouldn't be any times in the data
C
C
C Expand an integer into the temporary buffer ,
C could be any fixed length from 1 to 8
200	AVAL = ABS(IVAL)
	GOTO(210,220,230,240,250,260,270,280),FIELDLEN(ARRPNT)
C                                                      
210	INUM = EXPAND('%WS% %^L%U%P0%I1',BCHARR,AVAL)
	IF(INUM .GT. 1)THEN
	   ACDATA=I2MGD__EXPNUM
	   CALL LSL_PUTMSG(ACDATA,INUM)
	   GOTO 999
	ENDIF
	GOTO 300
C                                               
220	INUM = EXPAND('%WS% %^L%U%P0%I2',BCHARR,AVAL)
	IF(INUM .GT. 2)THEN
	   ACDATA=I2MGD__EXPNUM
	   CALL LSL_PUTMSG(ACDATA,INUM)
	   GOTO 999
	ENDIF
	GOTO 300
C 
230	INUM = EXPAND('%WS% %^L%U%P0%I3',BCHARR,AVAL)
	IF(INUM .GT. 3)THEN
	   ACDATA=I2MGD__EXPNUM
	   CALL LSL_PUTMSG(ACDATA,INUM)
	   GOTO 999
	ENDIF
	GOTO 300
C 
240	INUM = EXPAND('%WS% %^L%U%P0%I4',BCHARR,AVAL)
	IF(INUM .GT. 4)THEN
	   ACDATA=I2MGD__EXPNUM
	   CALL LSL_PUTMSG(ACDATA,INUM)
	   GOTO 999
	ENDIF
	GOTO 300
C 
250	INUM = EXPAND('%WS% %^L%U%P0%I5',BCHARR,AVAL)
	IF(INUM .GT. 5)THEN
	   ACDATA=I2MGD__EXPNUM
	   CALL LSL_PUTMSG(ACDATA,INUM)
	   GOTO 999
	ENDIF
	GOTO 300
C 
260	INUM = EXPAND('%WS% %^L%U%P0%I6',BCHARR,AVAL)
	IF(INUM .GT. 6)THEN
	   ACDATA=I2MGD__EXPNUM
	   CALL LSL_PUTMSG(ACDATA,INUM)
	   GOTO 999
	ENDIF
	GOTO 300
C 
270	INUM = EXPAND('%WS% %^L%U%P0%I7',BCHARR,AVAL)
	IF(INUM .GT. 7)THEN
	   ACDATA=I2MGD__EXPNUM
	   CALL LSL_PUTMSG(ACDATA,INUM)
	   GOTO 999
	ENDIF
	GOTO 300
C 
280	INUM = EXPAND('%WS% %^L%U%P0%I8',BCHARR,AVAL)
	IF(INUM .GT. 8)THEN       
	   ACDATA=I2MGD__EXPNUM
	   CALL LSL_PUTMSG(ACDATA,INUM)
	   GOTO 999
	ENDIF
	GOTO 300
C
C Place in correct position in data output array
300     CLENGTH = FIELDLEN(ARRPNT)
        IF(NCHS .LT. FIELDLEN(ARRPNT))CLENGTH=NCHS
C
	OUTRECD(FIELDSTA(ARRPNT):FIELDSTA(ARRPNT)+FIELDLEN(ARRPNT)-1)
     &	    = BCHARR(1:CLENGTH)
C
C Insert sign before value on some ACs
	IF((ARRPNT .EQ.  2) .OR.
     &	   (ARRPNT .EQ. 13) .OR.
     &	   (ARRPNT .EQ. 15) .OR.
     &	   (ARRPNT .EQ. 16) .OR.
     &	   (ARRPNT .EQ. 18) .OR.
     &	   (ARRPNT .EQ. 19))    THEN
C
	   OUTRECD(FIELDSTA(ARRPNT)-1:FIELDSTA(ARRPNT)-1)='+'
	   IF(IVAL.LT.0)
     &		OUTRECD(FIELDSTA(ARRPNT)-1:FIELDSTA(ARRPNT)-1)='-'
	ENDIF
C
C
C Get the next entry
400	CALL IFFNXT(IECODE,IELEN)
	IF(IELEN.EQ.-1) GOTO 999
	IF(IECODE .EQ. 'AC')GOTO 10
C
C
C Had all the AC's we're going to get in this feature, so
C insert fixed fields
	OUTRECD(1:1)='3'
C
C
C------------------------------------------------------------------------------
C
C End
999	IF(ACDATA) ACDATA=%LOC(SS$_NORMAL)
	RETURN
C
	END
