C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-08-29 13:18:38.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C

	  INTEGER*4  FUNCTION CODATA (IECODE,IELEN)
C
***	MODULE	CODATA 
***	IDENT	29AU91
C
C 	Copyright Laser-Scan Laboratories Ltd.,England
C
C Created.						FJB  10-Aug-1988
C
C Reads the contents of the ZS entry in the current feature (in all layers
C after layer 0), and assembles the positional content of a Data Record.
C Assembles Data Records into output buffer and writes the block when full
C ie after 16 data records.
C
C
	IMPLICIT NONE
C
C Parameters:                                          
	INCLUDE 'LSL$CMNI2MGD:PARAMS.PAR'
	INCLUDE 'LSL$CMNI2MGD:I2MGDMSG.PAR'
C
C Common:
	INCLUDE 'LSL$CMNI2MGD:COMMAND.CMN'
	INCLUDE 'LSL$CMNI2MGD:DATABUF.CMN'
	INCLUDE 'LSL$CMNIFF:MD2DES.CMN'
	INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'
 	INCLUDE 'LSL$CMNFRT:FRTACD.CMN'
C
C
C Word:
	INTEGER*2	IENDS	! pen up/down
	INTEGER*2	IELEN	! length of
	INTEGER*2	IECODE  ! ... current iff entry
	INTEGER*2	NPTS	! number of points in ST or ZS
	INTEGER*2	ISTART	! 
C
C                 
	INTEGER*4	ZVAL	! integer AC value for depth
	INTEGER*4	LATVAL	! integer latitude
	INTEGER*4	LONGVAL	! integer longitude
C				  NB Accurate upto 99.99999 degrees only
	INTEGER		LINSTA	! start pos. of line in block
	INTEGER	     	OK    	! errors
	INTEGER	     	INUM	! errors
	INTEGER      	EXPAND	! function
	INTEGER		IERR	! for error return	
	INTEGER		CVT_DAY_DMY	! converts date
	INTEGER		OUTREC	! function to write a block to tape
C
C Real*4:
	REAL	ST3BUF(3,1) 	! all coordinates from ZS in feat.
C                                              
C Character
	CHARACTER*2	SCHARR	! buffer for line sequence number
	CHARACTER*255	BCHARR	! temporary buffer for AC contents
C
C Presets:
	INTEGER*4 	SS$_NORMAL
	EXTERNAL  	SS$_NORMAL	! normal successful completion
C
C Declare IFF_ABSENT:
	INTEGER*4	IFF_ABSENT
	PARAMETER	(IFF_ABSENT='80000000'X)
C
	INTEGER*4	LDUMMY
	REAL*4		RDUMMY
	EQUIVALENCE	(RDUMMY,LDUMMY)
C 
C ......................................................................
C
C Indirectly create REAL representation of IFF_ABSENT
	LDUMMY = IFF_ABSENT
C 
C ......................................................................
C
C Assume the best
	CODATA =%LOC(SS$_NORMAL)
C
C------------------------------------------------------------------------------
C
C Jump to writing out default record if at 'EJ' entry
	IF(IECODE.EQ.'EJ')GOTO 100
C
C-------------------------------------------------------------------------------
C Read the ZS entry
C
10	CALL EIHRR(ST3BUF,3,1)
C                    
C Format latitude
C
C Correct for any origin offset
	ST3BUF(2,1) = ST3BUF(2,1) + MD2LOC(2)
C
C Multiply by the number of decimal places required so can write it with
C an implied decimal place.
	LATVAL = ABS(INT(ST3BUF(2,1)*100000.0))
C               
C Reformat and put into temporary buffer
	INUM = EXPAND('%WS% %^L%U%P0%I7',BCHARR,LATVAL)
	IF(INUM .GT. 7)THEN
	   CODATA=I2MGD__EXPNUM
	   CALL LSL_PUTMSG(CODATA,INUM)
	   GOTO 999
	ENDIF
C
C Put sign into record buffer
        IF(ST3BUF(2,1).LT.0.0)THEN
	   OUTRECD(28:28) = '-'
	ELSE
	   OUTRECD(28:28) = '+'
	ENDIF
C
C Put latitude into record buffer
	OUTRECD(29:35) = BCHARR(1:7)
C                                        
C------------------------------------------------------------------------------
C Format longitude
C
C Correct for any origin offset
	ST3BUF(1,1) = ST3BUF(1,1) + MD2LOC(1)
C
C Multiply by the number of decimal places required so can write it with
C an implied decimal place.
	LONGVAL = ABS(INT(ST3BUF(1,1)*100000))
C               
C Reformat and put into temporary buffer
	INUM = EXPAND('%WS% %^L%U%P0%I8',BCHARR,LONGVAL)
	IF(INUM .GT. 8)THEN
	   CODATA=I2MGD__EXPNUM
	   CALL LSL_PUTMSG(CODATA,INUM)
	   GOTO 999
	ENDIF
C
C Put sign into record buffer
        IF(ST3BUF(1,1).LT.0.0)THEN
	   OUTRECD(36:36) = '-'
	ELSE
	   OUTRECD(36:36) = '+'
	ENDIF          
C
C Put longitude into record buffer
	OUTRECD(37:44) = BCHARR(1:8)
C
C------------------------------------------------------------------------------
C
C Put Z value into Bathymetry,Corrected Depth field after checking what
C we got from the AC entry (type 108)
C
C Multiply by the number of decimal places required so can write it with
C an implied decimal place.
	IF (ST3BUF(3,1).EQ.RDUMMY) THEN
	   ZVAL = 99999
	ELSE
	   ZVAL = ABS(INT(ST3BUF(3,1)*10.0))
	ENDIF
C
C Reformat and put into temporary buffer
	INUM = EXPAND('%WS% %^L%U%P0%I6',BCHARR,ZVAL)
	IF(INUM .GT. 6)THEN
	   CODATA=I2MGD__EXPNUM
	   CALL LSL_PUTMSG(CODATA,INUM)
	   GOTO 999
	ENDIF
C
C Same as AC ?
	IF (ST3BUF(3,1).NE.RDUMMY) THEN
	   IF(OUTRECD(52:57).NE.BCHARR(1:6)) THEN
	      CALL LSL_PUTMSG(I2MGD__CORDEP,ST3BUF(3,1))
	   ENDIF
	ENDIF
C
C Output Z value
	OUTRECD(52:57) = BCHARR(1:6)
C
C Record complete
100	IRECORD = IRECORD+1
C
C-------------------------------------------------------------------------------
C
C Assemble a data block
C
	IF(IRECORD.GT.16)THEN
	   CODATA=I2MGD__MAXREC
	   CALL LSL_PUTMSG(CODATA)
	ENDIF
C
	ISTART = (IRECORD-1)*120+1
	OUTSTR1(ISTART:ISTART+119) = OUTRECD(1:120)
C
	IF((IRECORD .EQ. 16) .AND. HAD_HEAD)THEN
	   IF(HAD_DIAG)THEN
	      CALL WRITEF('Data Block : ')
	      CALL WRITEF('%S80',OUTSTR1(1:80))
	      CALL WRITEF('%S80',OUTSTR1(81:160))
	      CALL WRITEF('%S80',OUTSTR1(161:240))
	      CALL WRITEF('%S80',OUTSTR1(241:320))
	      CALL WRITEF('%S80',OUTSTR1(321:400))
	      CALL WRITEF('%S80',OUTSTR1(401:480))
	      CALL WRITEF('%S80',OUTSTR1(481:560))
	      CALL WRITEF('%S80',OUTSTR1(561:640))
	      CALL WRITEF('%S80',OUTSTR1(641:720))
	      CALL WRITEF('%S80',OUTSTR1(721:800))
	      CALL WRITEF('%S80',OUTSTR1(801:880))
	      CALL WRITEF('%S80',OUTSTR1(881:960))
	      CALL WRITEF('%S80',OUTSTR1(961:1040))
	      CALL WRITEF('%S80',OUTSTR1(1041:1120))
	      CALL WRITEF('%S80',OUTSTR1(1121:1200))
	      CALL WRITEF('%S80',OUTSTR1(1201:1280))
	      CALL WRITEF('%S80',OUTSTR1(1281:1360))
	      CALL WRITEF('%S80',OUTSTR1(1361:1440))
	      CALL WRITEF('%S80',OUTSTR1(1441:1520))
	      CALL WRITEF('%S80',OUTSTR1(1521:1600))
	      CALL WRITEF('%S80',OUTSTR1(1601:1680))
	      CALL WRITEF('%S80',OUTSTR1(1681:1760))
	      CALL WRITEF('%S80',OUTSTR1(1761:1840))
	      CALL WRITEF('%S80',OUTSTR1(1841:1920))
	   ENDIF
C
C Write data block to tape
	   OK =  OUTREC(OUTSTR1)
	   IF(.NOT. OK)THEN
	      CODATA=I2MGD__MTBLK
	      CALL LSL_PUTMSG(CODATA)
	   ENDIF
	   IRECORD = 0
	ENDIF
C
C
C------------------------------------------------------------------------------
C
C End
999	IF(CODATA) CODATA=%LOC(SS$_NORMAL)
	RETURN
C
	END
