C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-04-16 15:31:24.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION RDPAR
C
***	IDENT	16AP91
***	MODULE	RDPAR
C
C	Copyright Laser-Scan Ltd., Cambridge, England.
C
C	Author:	 Jon Barber				21-Mar-1991
C	Ripped off from DXFPARLIB
C
C	CONVERT TDST2I Utility - to read parameter file and FRT file
C
C Description
C
C	This function reads the parameter file which relates TDST
C	entities, colour and pattern to IFF feature codes, and
C	looks for the GT in the (required) FRT file. A default GT 
C	is assigned if the FC is missing.
C
	IMPLICIT NONE
C
C Included Parameter Files
C
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'	! LSLLIB message definitions
	INCLUDE 'LSL$CMNDSTPAR:DSTPARMSG.PAR'	! DSTPARLIB messages
C
C Common Blocks
C
	INCLUDE 'LSL$CMNDSTPAR:LOOKUP.CMN'
	INCLUDE 'LSL$CMNLSL:CMDCOM.CMN'		! command decoding
	INCLUDE 'LSL$CMNFRT:FRTCOM.CMN'		! FRT entries
C
C Local Parameters
C
	BYTE		PLING			! comment delimiter
	PARAMETER	(PLING = '!')
C
C Functions called
C
	INTEGER*4	FLROPN		! open file
	INTEGER*4	FLRCLO		! close file
	INTEGER*4	FLRLIN		! read in a line from file
	INTEGER*4	RDCOMM		! read a command
	LOGICAL		RDCHS		! read next character
	LOGICAL		RDINT		! read next integer
	LOGICAL		FRTINI		! open FRT file
	LOGICAL		FRTFND		! get FC in FRT file
C
C Local Variables
C
	INTEGER*4	RESULT		! command read result
	INTEGER*4	RETCOD		! system error code
	BYTE		SINGCHAR	! character read
	INTEGER		LINE		! line number
	INTEGER		FC_CNT		! total FC number
	INTEGER*2	COL,PAT,FC	! colour,pattern,FC
	LOGICAL		OK
C
C External declaration
C
	INTEGER*4	DSTPAR_CMD_TABLE
	EXTERNAL	DSTPAR_CMD_TABLE
C
C---------------------------------------------------------------------
C Initialise FRT file for the GT's of the FC's in the parameter file
C
	OK = FRTINI(FRTFIL(1:FRTLEN))
	IF (OK) THEN
	   CALL LSL_PUTMSG(DSTPAR__ERROPNFRT, FRTFIL(1:FRTLEN))
	   RDPAR = DSTPAR__ERROPNFRT
	   GOTO 999
	ENDIF
C
C	IF (HAD_LOG) CALL LSL_PUTMSG(DSTPAR__OPNFRT,FRTFIL(1:FRTLEN))
C
C Open PARAMETER file, read only
C
	RDPAR = FLROPN(PARLUN,PARFIL(1:PARLEN),RETCOD)
C
C If unsuccessful, output message and leave
C
	IF (.NOT.RDPAR) THEN
	   CALL LSL_PUTMSG(DSTPAR__ERROPNPAR,PARFIL(1:PARLEN))
	   RDPAR = DSTPAR__ERROPNPAR
	   GOTO 999
	ENDIF
C
C	IF (HAD_LOG) CALL LSL_PUTMSG(DSTPAR__OPNPAR,PARFIL(1:PARLEN))
C
C Setup initial counters
C
	LINE = 0
	ARC_CNT = 0
	PNT_CNT = 0
	POL_CNT = 0
	TXT_CNT = 0
	FC_CNT  = 0
C
C Get a line
C
8000	CONTINUE
	LINE = LINE + 1
C
	RDPAR = FLRLIN(,,,RETCOD)
C
	IF (RDPAR.EQ.LSL__EOF) THEN
	   RDPAR = LSL__NORMAL		! not an error
	   GOTO 9998
	ENDIF
C
C If unsuccessful, output message, and leave
C
	IF (.NOT.RDPAR) THEN
	   CALL LSL_PUTMSG(DSTPAR__ERRRDPAR,LINE)
	   CALL LSL_ADDMSG(RDPAR)
	   GOTO 9998
	ENDIF
C
C Now reset the decoding pointer to the start of the line
C
	CALL BSLN
C
C Check for a comment delimiter - ignore an empty line
C
	IF (RDCHS(SINGCHAR)) GOTO 8000
	IF (SINGCHAR.EQ.PLING) THEN
	   GOTO 8000			! ignore line
	ELSE
	   CALL BSCH			! unread non-pling
	ENDIF
C
C Now, read the command from the line, turning off messages
C
	NOMESS = .TRUE.
	RESULT = RDCOMM(DSTPAR_CMD_TABLE)
C
C and check that there was one, if not, output message and read 
C next line
C
	IF (RESULT.LT.1 .OR. RESULT.GT.4) THEN
	   CALL LSL_PUTMSG(DSTPAR__UNKPRICMD,LINE)
	   GOTO 8000
	ENDIF
C
C Despatch according to command
C
C	      arc, pnt, pol, tex
	GOTO (100, 200, 300, 400) RESULT
C
C IGNORE unknown command, output warning message, and continue
C
	CALL LSL_PUTMSG(DSTPAR__UNKPRICMD,LINE)
        GOTO 8000
C
C-------------------------------------------------------------
C Arc entity
C
100	CONTINUE
C
	OK = RDINT(COL)			! read colour
	IF (OK .OR. COL.LT.0) THEN
	   CALL LSL_PUTMSG(DSTPAR__ERRRDPAR, LINE)
	   GOTO 8000
	ENDIF
C
	OK = RDINT(PAT)			! read pattern
	IF (OK .OR. PAT.LT.0) THEN
	   CALL LSL_PUTMSG(DSTPAR__ERRRDPAR, LINE)
	   GOTO 8000
	ENDIF
C
	OK = RDINT(FC)			! read FC
	IF (OK .OR. FC.LT.0) THEN
	   CALL LSL_PUTMSG(DSTPAR__ERRRDPAR, LINE)
	   GOTO 8000
	ENDIF
C
	ARC_CNT = ARC_CNT+1
	FC_CNT  = FC_CNT +1
C
	OK = FRTFND(FC, .FALSE.)
C
C If FC not in FRT, warn that defaults will be used
C
	IF (OK) THEN
	   CALL LSL_PUTMSG(DSTPAR__ERRFNDFC, FC)
	   DST_GT(DST_ARC,ARC_CNT) = ANTTYP		! a-clk arc
	   GOTO 101
	ENDIF
C
C Found FC and GT, check if an allowable GT for ARC entity, and 
C replace it if not
C
	IF ( FRTGT.NE.CLOTYP .AND. FRTGT.NE.ANTTYP .AND. 
     &	     FRTGT.NE.CIRTYP .AND. FRTGT.NE.FULTYP ) THEN
	   CALL LSL_PUTMSG(DSTPAR__ERRFCGT,FC,FRTGT,'ARC')
	   DST_GT(DST_ARC,ARC_CNT) = ANTTYP
	ELSE
	   DST_GT(DST_ARC,ARC_CNT) = FRTGT
	ENDIF
C
101	DSTCOLOUR(DST_ARC,ARC_CNT)  = COL
	DSTPATTERN(DST_ARC,ARC_CNT) = PAT
	DST_FC(DST_ARC,ARC_CNT)     = FC
C
	GOTO 8000
C
C-------------------------------------------------------------
C Point entity
C
200	CONTINUE
C
	OK = RDINT(COL)			! read colour
	IF (OK .OR. COL.LT.0) THEN
	   CALL LSL_PUTMSG(DSTPAR__ERRRDPAR, LINE)
	   GOTO 8000
	ENDIF
C
	OK = RDINT(PAT)			! read pattern
	IF (OK .OR. PAT.LT.0) THEN
	   CALL LSL_PUTMSG(DSTPAR__ERRRDPAR, LINE)
	   GOTO 8000
	ENDIF
C
	OK = RDINT(FC)			! read FC
	IF (OK .OR. FC.LT.0) THEN
	   CALL LSL_PUTMSG(DSTPAR__ERRRDPAR, LINE)
	   GOTO 8000
	ENDIF
C
	PNT_CNT = PNT_CNT+1
	FC_CNT  = FC_CNT +1
C
	OK = FRTFND(FC, .FALSE.)
C
C If FC not in FRT, warn that defaults will be used
C
	IF (OK) THEN
	   CALL LSL_PUTMSG(DSTPAR__ERRFNDFC, FC)
	   DST_GT(DST_POINT,PNT_CNT) = ORITYP		! oriented symbol
	   GOTO 201
	ENDIF
C
C Found FC and GT, check if an allowable GT for POINT entity, and 
C replace it if not
C
	IF ( FRTGT.NE.UNOTYP .AND. FRTGT.NE.ORITYP .AND. 
     &	     FRTGT.NE.SCATYP ) THEN
	   CALL LSL_PUTMSG(DSTPAR__ERRFCGT,FC,FRTGT,'POINT')
	   DST_GT(DST_POINT,PNT_CNT) = ORITYP
	ELSE
	   DST_GT(DST_POINT,PNT_CNT) = FRTGT
	ENDIF
C
201	DSTCOLOUR(DST_POINT,PNT_CNT)  = COL
	DSTPATTERN(DST_POINT,PNT_CNT) = PAT
	DST_FC(DST_POINT,PNT_CNT)     = FC
C
	GOTO 8000
C
C-------------------------------------------------------------
C Polygon entity
C
300	CONTINUE
C
	OK = RDINT(COL)			! read colour
	IF (OK .OR. COL.LT.0) THEN
	   CALL LSL_PUTMSG(DSTPAR__ERRRDPAR, LINE)
	   GOTO 8000
	ENDIF
C
	OK = RDINT(PAT)			! read pattern
	IF (OK .OR. PAT.LT.0) THEN
	   CALL LSL_PUTMSG(DSTPAR__ERRRDPAR, LINE)
	   GOTO 8000
	ENDIF
C
	OK = RDINT(FC)			! read FC
	IF (OK .OR. FC.LT.0) THEN
	   CALL LSL_PUTMSG(DSTPAR__ERRRDPAR, LINE)
	   GOTO 8000
	ENDIF
C
	POL_CNT = POL_CNT+1
	FC_CNT  = FC_CNT +1
C
	OK = FRTFND(FC, .FALSE.)
C
C If FC not in FRT, warn that defaults will be used
C
	IF (OK) THEN
	   CALL LSL_PUTMSG(DSTPAR__ERRFNDFC, FC)
	   DST_GT(DST_POLY,POL_CNT) = LINTYP		! line
	   GOTO 301
	ENDIF
C
C Found FC and GT, check if an allowable GT for POLY entity, and 
C replace it if not
C
	IF ( FRTGT.NE.LINTYP .AND. FRTGT.NE.CURTYP .AND. 
     &	     FRTGT.NE.STRTYP .AND. FRTGT.NE.ARETYP ) THEN
	   CALL LSL_PUTMSG(DSTPAR__ERRFCGT,FC,FRTGT,'POLY')
	   DST_GT(DST_POLY,POL_CNT) = LINTYP
	ELSE
	   DST_GT(DST_POLY,POL_CNT) = FRTGT
	ENDIF
C
301	DSTCOLOUR(DST_POLY,POL_CNT)  = COL
	DSTPATTERN(DST_POLY,POL_CNT) = PAT
	DST_FC(DST_POLY,POL_CNT)     = FC
C
	GOTO 8000
C
C-------------------------------------------------------------
C Text entity
C
400	CONTINUE
C
	OK = RDINT(COL)			! read colour
	IF (OK .OR. COL.LT.0) THEN
	   CALL LSL_PUTMSG(DSTPAR__ERRRDPAR, LINE)
	   GOTO 8000
	ENDIF
C
	OK = RDINT(PAT)			! read pattern
	IF (OK .OR. PAT.LT.0) THEN
	   CALL LSL_PUTMSG(DSTPAR__ERRRDPAR, LINE)
	   GOTO 8000
	ENDIF
C
	OK = RDINT(FC)			! read FC
	IF (OK .OR. FC.LT.0) THEN
	   CALL LSL_PUTMSG(DSTPAR__ERRRDPAR, LINE)
	   GOTO 8000
	ENDIF
C
	TXT_CNT = TXT_CNT+1
	FC_CNT  = FC_CNT +1
C
	OK = FRTFND(FC, .FALSE.)
C
C If FC not in FRT, warn that defaults will be used
C
	IF (OK) THEN
	   CALL LSL_PUTMSG(DSTPAR__ERRFNDFC, FC)
	   DST_GT(DST_TEXT,TXT_CNT) = TEXTYP		! text
	   GOTO 401
	ENDIF
C
C Found FC and GT, check if an allowable GT for TEXT entity, and 
C replace it if not
C
	IF ( FRTGT.NE.TEXTYP ) THEN
	   CALL LSL_PUTMSG(DSTPAR__ERRFCGT,FC,FRTGT,'TEXT')
	   DST_GT(DST_TEXT,TXT_CNT) = TEXTYP
	ELSE
	   DST_GT(DST_TEXT,TXT_CNT) = FRTGT
	ENDIF
C
401	DSTCOLOUR(DST_TEXT,TXT_CNT)  = COL
	DSTPATTERN(DST_TEXT,TXT_CNT) = PAT
	DST_FC(DST_TEXT,TXT_CNT)     = FC
C
	GOTO 8000
C
C Close the PARAMETER file
C
9998	CONTINUE
C
	IF (FC_CNT.LE.0) THEN
	   CALL LSL_PUTMSG(DSTPAR__NOPARFC)
	   RDPAR = DSTPAR__NOPARFC
	   GOTO 1000
	ENDIF
C
C report statistics
C
C	IF (HAD_LOG) THEN
C	   CALL LSL_PUTMSG(DSTPAR__ARCFND,ARC_CNT)
C	   CALL LSL_PUTMSG(DSTPAR__POINTFND,PNT_CNT)
C	   CALL LSL_PUTMSG(DSTPAR__POLYFND,POL_CNT)
C	   CALL LSL_PUTMSG(DSTPAR__TEXTFND,TXT_CNT)
C	ENDIF
C
1000	CALL FLRCLO(PARLUN,RETCOD)
C
999	RETURN
	END
C
