C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-02-06 10:30:58.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE FLUSH
C
***	IDENT	06FE90
***	MODULE	FLUSH
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C Author TJ Ibbs, 7 May 1986
C
C To output the contents of the current CB
C
	IMPLICIT NONE
C
C common blocks
C
	INCLUDE	'LSL$CMNIFF:IFFHAN.CMN'		! IFF file posns/errors
	INCLUDE	'LSL$CMNFRT:FRTCOM.CMN'		! FRT common block
	INCLUDE	'CMN:ATTRIBUTES.CMN'		! attribute codes
	INCLUDE	'CMN:FEATURE.CMN'		! feature ...
	INCLUDE	'CMN:FILES.CMN'			! our files & switches
	INCLUDE	'CMN:POSITION.CMN'		! position ...
C
C workspace
C
	INTEGER		I		! counter
C
C *********************************************************************
C if the buffers are empty, then RETURN at once, doing nothing
C
	IF ( STPTR.GT.0 ) THEN
C
C if we have not yet output the information that goes before the
C first CB, output it now
C
	   IF (.NOT.DONE_START_FEATURE) CALL START_FEATURE
C
C set up the CB header - 
C first work out whether we are drawing through the CB break
C
	   IF ( PEN_UP ) THEN
	      CBH.FLAGS = 0	! pen up to the CB
	   ELSE
	      CBH.FLAGS = 1	! pen down to the CB
	   ENDIF
C
C set up the graphical type
C
	   IF (FOUND_FC) THEN		! easy if it's in the FRT
	      CBH.GTYPE = FRTGT
	   ELSEIF (IS_LINE) THEN	! here it's a line
	      CBH.GTYPE = LINTYP
	   ELSEIF (HAD_TEXT) THEN	! or a text here
	      CBH.GTYPE = TEXTYP
	   ELSEIF (IS_SCALED) THEN	! or a scaled symbol here
	      CBH.GTYPE = SCATYP
	   ELSEIF (HAD_ANGLE) THEN	! or an oriented symbol
	      CBH.GTYPE = ORITYP
	   ELSE				! must be an unoriented symbol
	      CBH.GTYPE = UNOTYP
	   ENDIF
C
C now for the number of rows - texts are treated separately as we may 
C have both the digitised position and the bottom left corner - only 
C one position is to be output
C
	   IF (HAD_TEXT) THEN
	      CBH.NROW = 1
	   ELSE
	      CBH.NROW = STPTR
	   ENDIF
C
C set up the standard columns, i.e the ones for ST when output is 
C revision 0
C
	   CBH.NCOL = 2
	   CBH.COLH(1) = CODE_X
	   CBH.COLH(2) = CODE_Y
C
C and ZS if we have OSTF+
C
	   IF (PLUS) THEN
	      IF (HAD_HEIGHT) THEN
	         CBH.NCOL = 3
	         CBH.COLH(3) = CODE_Z
	      ENDIF
C
C and now for the interesting ones, but make sure we are not at 
C revision 0
C
	      IF (ORVLEV .NE. 0) THEN
	         IF (HAD_HEIGHT) THEN
	            CBH.NCOL = CBH.NCOL + 1
	            CBH.COLH(CBH.NCOL) = CODE_DZ
	         ENDIF
	         CBH.NCOL = CBH.NCOL + 1
	         CBH.COLH(CBH.NCOL) = CODE_CAPXY
	         IF (HAD_HEIGHT) THEN
	            CBH.NCOL = CBH.NCOL + 1
	            CBH.COLH(CBH.NCOL) = CODE_CAPZ
	         ENDIF
	      ENDIF
	   ENDIF
C
C no fixed attributes yet
C
	   CBH.NATT = 0
C
C now set up the CB data - first X and Y, but note texts for which we 
C have a digitised position are treated as a special case
C
C we also check the range here
C
C If the /LOWER_LEFT qualifier is specified then output first point only
C
	   IF (HAD_LOWER_LEFT) THEN
	      CALL CHECK_RANGE(STBUF(1,1),CBH.NROW)
	      CALL IFS_CB_WRITE
     &	           (CBH,CBD,STBUF(1,1),2,CBH.COLH(1),1,CBH.NROW)
	   ELSE IF (HAD_TEXT .AND. HAD_LOC) THEN	! last point only
	      CALL CHECK_RANGE(STBUF(1,STPTR),CBH.NROW)
	      CALL IFS_CB_WRITE
     &	           (CBH,CBD,STBUF(1,STPTR),2,CBH.COLH(1),1,CBH.NROW)
	   ELSE
	      CALL CHECK_RANGE(STBUF,CBH.NROW)
	      CALL IFS_CB_WRITE(CBH,CBD,STBUF,2,CBH.COLH(1),1,CBH.NROW)
	   ENDIF
C
C and any remaining columns
C
	   DO 100 I=3,CBH.NCOL
	      IF (CBH.COLH(I) .EQ. CODE_Z) THEN
	         CALL IFS_CB_WRITE(CBH,CBD,ZBUF,1,CODE_Z,1,CBH.NROW)
	      ELSEIF (CBH.COLH(I) .EQ. CODE_DZ) THEN
	         CALL IFS_CB_WRITE(CBH,CBD,DZBUF,1,CODE_DZ,1,CBH.NROW)
	      ELSEIF (CBH.COLH(I) .EQ. CODE_CAPXY) THEN
	         CALL IFS_CB_WRITE
     &				(CBH,CBD,CXYBUF,1,CODE_CAPXY,1,CBH.NROW)
	      ELSEIF (CBH.COLH(I) .EQ. CODE_CAPZ) THEN
	         CALL IFS_CB_WRITE(CBH,CBD,CZBUF,1,CODE_CAPZ,1,CBH.NROW)
	      ENDIF
100	   CONTINUE
C
C compress the CB
C
	   CALL IFS_CB_COMPRESS(CBH,CBD)
C
C and finally write it out
C
	   CALL IFFCB(CBH,CBD)
C
C prepare for next CB
C
	   STPTR = 0
	   PEN_UP = .FALSE.	! assume drawing through next CB break
C
	ENDIF
C
	RETURN
	END
