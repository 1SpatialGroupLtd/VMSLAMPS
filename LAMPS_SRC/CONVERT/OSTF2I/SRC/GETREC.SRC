	LOGICAL FUNCTION GETREC( RECORD )
C
***	IDENT	08AU86
***	MODULE	GETREC
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C Author TJ Ibbs, 7 May 1986
C
C Mod	Handle read from magtape on serial port	LAJ	08-Aug-1986
C 	separately.  Here we have to read a block at a 
C 	time, rather than a record.
C
C To read the next record from the input
C
C Returns TRUE if it reads end-of-file, or has a fatal error
C
	IMPLICIT NONE
C
C arguments
C
	CHARACTER*8	RECORD		!out - result of the read
C
C common blocks
C
	INCLUDE	'CMN:FILES.CMN'		! for DMCLUN, ASCII
	INCLUDE	'CMN:RECCMN.CMN'	! for RECNUM
	INCLUDE 'LSL$CMNLSL:MTIVCM.CMN'	! for MTIERR
	INCLUDE 'CMN:OSTF2IMSG.PAR'	! for message numbers
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'
C
C Functions
C
	LOGICAL		MTIRDB		! Read a block from serial MT
C
C Variables
C
	LOGICAL*1	BLOCK(4096)	! Max blocksize for Kennedy
					! is 4096 bytes
C
	LOGICAL		OK
C
	INTEGER*2	J		! Loop count
C
	INTEGER*4	BL_COUNT	! Count of characters read
C
C **********************************************************************
C count the new record
C
	RECNUM = RECNUM+1
C
C do the read itself
C
C This takes a bit more effort for the Kennedy magtape.  We have to use
C the LSLLIB tape routines to read a whole block of data off the tape
C first, and then parcel it out in 8 byte records.  It is assumed that
C the block length is an integer multiple of 8 bytes long; if not, the
C end of the last record will contain erroneous data.
C
	IF (SERIAL_MT) THEN		! If it is the Kennedy
	   IF (BL_POINTER .EQ. 0) THEN	! and we have no data in hand
	      OK = MTIRDB(BLOCK,BLOCKSIZE,BL_COUNT)	! Read a block
	      IF (.NOT. OK) THEN	! If this produced an error
		 IF (OK .EQ. LSL__EOF) GOTO 9000	! Handle EOF
		 CALL LSL_PUTMSG(OSTF2I__RDBERR)	! Report error
		 CALL LSL_ADDMSG(OK)
		 IF (OK .EQ. LSL__SYSERR) CALL LSL_ADDMSG(MTIERR)
	      ENDIF
	   ENDIF
C
C Here with data to supply via RECORD
C
	   DO 500 J=1,8			! Set next 8 bytes into RECORD
	      BL_POINTER = BL_POINTER+1	! Update block pointer
	      RECORD(J:J) = CHAR(BLOCK(BL_POINTER))
	      IF (BL_POINTER .GE. BL_COUNT) THEN ! If finished block
		 BL_POINTER = 0		! Reset pointer to prompt read
		 GOTO 2000
	      ENDIF
500	   CONTINUE
C
	ELSE
    	   READ (DMCLUN,1000,END=9000) RECORD
	ENDIF
C
1000	FORMAT(A8)
C
C do we need to translate from EBCDIC?
C
2000	IF (.NOT.ASCII) THEN
	   CALL LIB$TRA_EBC_ASC( RECORD,RECORD )
	ENDIF
C
	GETREC = .FALSE.
	GOTO 9999
C
C come here if we read end-of-file
C
9000	GETREC = .TRUE.
C
C and join up here with normal read
C
9999	RETURN
	END
