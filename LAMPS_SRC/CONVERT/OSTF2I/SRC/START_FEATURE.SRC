C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-02-06 10:31:56.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE START_FEATURE
C
***	IDENT	06FE90
***	MODULE	START_FEATURE
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C Author TJ Ibbs, 2 April 1986
C
CMOD	NF now written when FS is written - eliminates possibility of
C	empty features					ACM 04-May-1989
C
C To output the bits of a feature that come between the NF and the
C first ST
C
	IMPLICIT NONE
C
C common blocks
C
	INCLUDE	'LSL$CMNIFF:IFFHAN.CMN'		! IFF file posns/errors
	INCLUDE	'CMN:ATTRIBUTES.CMN'		! attribute codes
	INCLUDE	'CMN:FEATURE.CMN'
	INCLUDE	'CMN:FILES.CMN'			! files and switches
C
C workspace
C
	INTEGER*2	ISTAT(4)	! for the FS entry
	INTEGER		ISQ		! internal sequence number
	INTEGER		I,J
C
C **********************************************************************
C firstly, calculate all the bits of the FS entry
C
	IF ( IN_BOUNDARY ) THEN
	   ISTAT(1) = BOUND_FC(1,1)
	ELSE
	   ISTAT(1) = FC
	ENDIF
C
	ISTAT(2) = 0
	ISTAT(3) = 0
C
C NB for texts, we use text location zero if there was no digitised 
C position, since the coordinate we use is adjusted for that location
C
	IF ( HAD_TEXT ) THEN
	   IF (HAD_LOC.AND..NOT.HAD_LOWER_LEFT) THEN
	      CALL LIB$INSV( JUSTIF, 0, 4, ISTAT(3) )
	   ELSE
	      CALL LIB$INSV( 0,      0, 4, ISTAT(3) )
	   ENDIF
	   CALL LIB$INSV( STYLE,    4, 2, ISTAT(3) )
	   CALL LIB$INSV( CATEGORY, 6, 6, ISTAT(3) )
	   ISTAT(3) = ISTAT(3).OR.'8000'X	! bits 14-15 = 2 (text)
	ELSE
	   IF ( HAD_PC ) ISTAT(3) = PC
 	   IF ( .NOT.IS_LINE ) THEN
	      ISTAT(3) = ISTAT(3).OR.'4000'X	! bits 14-15 = 1 (symbol)
	   ENDIF
	ENDIF
C
C so write the NF and FS entries (C allow the library to allocate
C internal sequence numbers - so we must unset ISQ each time)
C
	ISQ = 0
 	CALL IFFNF( FSN, ISQ )
	CALL IFFFS( ISTAT )
C
C now for any ACs - revision level 1 entries first
C
	IF (PLUS .AND. (ORVLEV .NE. 0)) THEN
C
C technical security
C
	   IF (HAD_SEC) CALL IFFAC(CODE_SEC,1)
C
C feature history - output the AC's even if date is zero
C
	   CALL IFFAC(CODE_SURV_DATE,SURV_DATE)
	   CALL IFFAC(CODE_CHA_DATE,CHA_DATE)
	   CALL IFFAC(CODE_CHA_TYPE,CHA_TYPE)
	ENDIF
C
C contour height
C
	IF ( HAD_CONTOUR ) CALL IFFAC( CODE_CONT, CONTOUR )
C
C left/right boundary texts
C
	IF ( IN_BOUNDARY ) THEN
	   DO 200 I = 1,LRCNT
	      CALL IFFAC(CODE_LH,BOUND_FC(1,I),BTEXT(1,1,I),BLEN(1,I))
	      CALL IFFAC(CODE_RH,BOUND_FC(2,I),BTEXT(1,2,I),BLEN(2,I))
200	   CONTINUE
	ENDIF
C                                                  
C and then, do we need a TH
C if we do, then we may need to work out the nearest point size to our
C character height
C
 	IF ( HAD_TEXT ) CALL PTSIZE( HEIGHT )
C
C so we've finished START_FEATURE
C
	DONE_START_FEATURE = .TRUE.
C
C and that's it
C
	RETURN
	END

