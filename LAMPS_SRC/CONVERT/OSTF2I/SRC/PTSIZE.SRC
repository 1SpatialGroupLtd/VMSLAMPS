	SUBROUTINE PTSIZE( HEIGHT )
C
***	IDENT	11DE90
***	MODULE	PTSIZE
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C Author TJ Ibbs, 22 May 1986
C
C To output the point size for a text with this height (IFF_POINTSIZE .true.)
C
C To output a size in mm/100 for a text with this height (IFF_POINTSIZE .false.)
C
	IMPLICIT NONE
C
C argument
C
	INTEGER		HEIGHT
C
C error numbers
C
	INCLUDE	'CMN:OSTF2IMSG.PAR'
C
C common blocks
C
	INCLUDE	'CMN:FILES.CMN'		! for POINT_SIZE
C
C workspace
C
	INTEGER*2	POINT		! for the point size
	INTEGER*2	IFF_MM_100	! for the text height in mm/100
 	INTEGER		I
C
	INTEGER		TEXT_COUNT
	DATA		TEXT_COUNT /0/
	SAVE		TEXT_COUNT
C
	REAL		OS_POINT_SIZE(24)
	REAL		MIN_HEIGHT	! minimum height in table
C
C OS_POINT_SIZE data - Stolen from I2OSTF (NB heights now in tenths mm)
C
	DATA OS_POINT_SIZE /   0.0,  0.0,  8.5,  0.0,
     &			      11.0, 12.5, 14.0, 16.0,
     &			      17.5, 20.5, 22.0, 24.5,
     &			       0.0, 29.0,  0.0, 32.5,
     &			       0.0, 36.0,  0.0, 39.5,
     &			       0.0, 44.5,  0.0, 50.0 /
C
C OS_POINT_SIZE	is a table of the various character heights for text at
C		different point sizes. The heights are in tenths of a mm.
C
C **********************************************************************
C IFF text height may be output in point size or hundredths of a mm. If the
C flag IFF_POINTSIZE is true then the IFF text height is output in point size
C
	IF ( IFF_POINTSIZE ) THEN
C
C If we have been told that our heights are stored as point sizes, then
C check that HEIGHT is between 1 and 24. If it is not, then complain.
C
C If we have been told that our heights are stored as tenths of a mm,
C then we look through the list of point sizes to find one that is close
C enough. When checking a height, we will accept plus or minus .5 from 
C the specified height in the table as being correct. If a height is 
C not correct, we complain and use the next highest height in the 
C table. If a height is outside the table range, we also complain but
C default to 24 point.
C
	   IF (POINT_SIZE) THEN		! height is already a point size
C
	      IF ( HEIGHT.LT.1 .OR. HEIGHT.GT.24 ) THEN
	         POINT = 24
 	         CALL LSL_PUTMSG( OSTF2I__BADPTSZ, HEIGHT, POINT )
	      ELSE
	         POINT = HEIGHT
	      ENDIF
C
	   ELSE				! height is in mm/10
C
	      MIN_HEIGHT = 0.0		! initialise min. height
C
	      DO 400 I= 1,24
	         IF ( OS_POINT_SIZE(I).NE.0.0 ) THEN
C
	            IF ( MIN_HEIGHT.EQ.0.0 ) THEN	! find min. height
	               MIN_HEIGHT = OS_POINT_SIZE(I)-0.5
	            ENDIF
C
	            IF ( FLOAT(HEIGHT).GE.OS_POINT_SIZE(I)-0.5 .AND.
     &		         FLOAT(HEIGHT).LE.OS_POINT_SIZE(I)+0.5 ) THEN
		       POINT = I			! correct height
		       GOTO 500
	            ELSEIF ( FLOAT(HEIGHT).GE.MIN_HEIGHT .AND.
     &	                     FLOAT(HEIGHT).LT.OS_POINT_SIZE(I)-0.5 ) THEN
		       POINT = I			! next highest in table
	               CALL LSL_PUTMSG( OSTF2I__BADTXHT, HEIGHT, POINT )
		       GOTO 500
	            ENDIF
C
	         ENDIF
400	      CONTINUE
C
	      POINT = 24				! bad height altogether
	      CALL LSL_PUTMSG( OSTF2I__BADTXHT, HEIGHT, POINT )
C                        
500	      CONTINUE
C
	   ENDIF
C
	   CALL IFFTH( POINT )		! and output the point size
C
	ELSE
C
C This block converts OS text heights to IFF text heights in mm/100, again
C if we have been told that our OS heights are stored as point sizes, then
C check that HEIGHT is between 1 and 24. If it is not, then complain. The
C OS point sizes are converted into mm/100 by extracting the appropriate
C entry in OS_POINT_SIZE table and scaling by 10. If this entry is zero, a 
C complaint is made and the entry for the nearest valid larger point size is
C used
C
C If we have been told that the OS heights are stored as tenths of a mm,
C then this height is merely scaled by a factor 10
C
	   IF (POINT_SIZE) THEN		! OS height is a point size
C
	      IF ( HEIGHT.LT.1 .OR. HEIGHT.GT.24 ) THEN
	         POINT = 24
 	         CALL LSL_PUTMSG( OSTF2I__BADPTSZ, HEIGHT, POINT )
	      ELSE
	         POINT = HEIGHT
	      ENDIF
C
	      DO 550 I = POINT,24
C
		 IFF_MM_100 = NINT(10.0*OS_POINT_SIZE(I))
C
		 IF ( IFF_MM_100.NE.0 ) THEN	! valid point size found
C
		    IF ( I.NE.POINT ) THEN	! not the requested point size
		       CALL LSL_PUTMSG( OSTF2I__BADOSSZ, POINT, I )
		    ENDIF
C
		    GOTO 600
C
		 ENDIF
C
550	     CONTINUE
C
	   ELSE				! OS text height is in mm/10
C
	      IFF_MM_100 = 10*HEIGHT
C
	   ENDIF
C
600	   CALL IFFTH(IFF_MM_100)	! Output IFF text height in mm/100
C
	ENDIF
C
C maintain a count of the calls to this routine
C
	TEXT_COUNT = TEXT_COUNT+1
C
C and that's it
C
	RETURN
	END
