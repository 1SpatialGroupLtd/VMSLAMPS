C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-11-11 17:33:38.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE OUTPUT_NETWORK
C
***	IDENT	11NO88
***	MODULE	OUTPUT_NETWORK
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author J Barber 14 Sep 1988 for KERNCAM2I
C
C This routine creates the IFF symbol features whenever called in 
C   OUTPUT_IFF_FEATURE at all coordinate points when HAD_NETWORK
C   is TRUE
C
C Reposition to the NF, get the feature code in the FS and create 
C   a new one as the original FC + 5000 for oriented symbol, and 
C   create a new feature for each coordinate point
C
	IMPLICIT NONE
C
C common blocks...
C
***     PARAMETER/HERE:KERNCAM2IMSG/
***     COMMON/LSL$CMNIFF:IFFHAN/
***     COMMON/LSL$CMNFRT:FRTACD/
***	COMMON/HERE:DESCR/
***     COMMON/HERE:PARAMS/
C
C  functions
C
        LOGICAL           ACDFND_NAME
C
C  workspace...
C
        INTEGER           I
        INTEGER           RETVAL
        INTEGER*2         FSN
        INTEGER*2         IECODE, IELEN
        INTEGER*2         NREALS, NSTART
        INTEGER*2         NPTS
        INTEGER*2         NPT,IEND
        INTEGER*2         ZERO
        INTEGER*2         ISTAT(4)
        INTEGER*2         ACTYPE
        INTEGER*2         ACLEN
C
        REAL              ROTN
        REAL              ACSCALE           ! real ver of SCALE
        REAL              ZSBUF(3)          ! each coordinate
        REAL*8            DIFF(3)
        REAL*8            LAST_NET(3)
        LOGICAL           LAST_NET_SET
C
        BYTE              ACTEXT(80)        ! bytes for AC text
C
        DATA              ISTAT/0,0,0,0/
C
C **********************************************************
        LAST_NET_SET = .FALSE.
C
C  first create a symbol feature with the same parameters as the
C    corresponding line feature
C  reposition to the parent line feature NF, if there is one -
C    if there was only one point in the line feature it will have 
C    been deleted (DELETED TRUE) and must use LAST_COORD in 
C    LAST_ZS_COORD
C
        IF (DELETED) THEN
           ZSBUF(1) = LAST_ZS_COORD(1)
           ZSBUF(2) = LAST_ZS_COORD(2)
           ZSBUF(3) = LAST_ZS_COORD(3)
C
           NPTS = 1
           GOTO 101
        ENDIF
C
        CALL IFFPKE (IECODE, IELEN, LPOSNF)
C
C  find first ZS entry in feature
C
5       CALL IFFNXC ('ZS', IELEN)
C
C  no more ZS entries, end feature
C
        IF (IELEN.EQ.-1) GOTO 5000
C
C  read ZS entry-in-hand
C
100     CALL EIHRS (NPTS, IENDS)
C
C  loop for each coordinate point
C
101     DO 1000 I = 1,NPTS
C
C  first the coordinates
C  read the entry-in-hand ZS if any for the x,y,z value
C
           IF (.NOT.DELETED) THEN
C
              NREALS = 3
              NSTART = 6*(I-1)+1
              CALL EIHRR (ZSBUF, NREALS, NSTART)
C
C  check if we have another symbol at the same position as the previous
C
              IF (LAST_NET_SET) THEN
                 DIFF(1) = ABS(ZSBUF(1) - LAST_NET(1))
                 DIFF(2) = ABS(ZSBUF(2) - LAST_NET(2))
                 DIFF(3) = ABS(ZSBUF(3) - LAST_NET(3))
                 IF (DIFF(1).LE.0.0005D0 .AND. DIFF(2).LE.0.0005D0 .AND.
     &               DIFF(3).LE.0.0005D0) GOTO 1000
              ENDIF
           ENDIF
C
C  start the new symbol feature
C
           COUNT = COUNT + 1
C
           FSN = COUNT
           ZERO = 0
           CALL IFFNF (FSN, ZERO)
C
           INFTR = .TRUE.
C
C  set feature code to equal the basic FC + 5000 for symbol FC
C    in NETWORKs
C
           ISTAT(1) = MOD (IFC, 1000) + 5000
           ISTAT(3) = 16384
C
           LPOSFS = LPOSE
           CALL IFFFS (ISTAT)
C
C  any AC entries
C
           IF (HAD_AC_HOUR) THEN
C
              IF (ACDFND_NAME ('Kern_hour', RETVAL)) THEN
                 CALL LSL_PUTMSG (KERN2I__ACDFNDERR, 'Kern_hour')
              ELSE 
                 ACTYPE = ACD_CODE
                 CALL IFFAC (ACTYPE, HOUR)
              ENDIF
           ENDIF
C
           IF (HAD_AC_SCALE) THEN
C
              ACSCALE = SCALE           ! convert to real
C
              IF (ACDFND_NAME ('Kern_scale', RETVAL)) THEN
                 CALL LSL_PUTMSG (KERN2I__ACDFNDERR, 'Kern_scale')
              ELSE 
                 ACTYPE = ACD_CODE
                 CALL IFFAC (ACTYPE, ACSCALE)
              ENDIF
           ENDIF
C
           IF (HAD_FC_NAME) THEN
C
              IF (ACDFND_NAME ('Kern_FC_name', RETVAL)) THEN
                 CALL LSL_PUTMSG (KERN2I__ACDFNDERR, 'Kern_FC_name')
              ELSE 
                 ACTYPE = ACD_CODE
                 CALL EXPAND ('%W%S', ACTEXT(1), 
     &                                        FC_NAME(:FC_NAME_LEN))
                 ACLEN = FC_NAME_LEN
                 CALL IFFAC (ACTYPE, FC_NAME_LEN, ACTEXT, ACLEN)    
              ENDIF
           ENDIF
C
C   output any coordinate comments/names
C
           IF (HAD_ZS_NAME) THEN
C
              IF (ACDFND_NAME ('Kern_ZS_name', RETVAL)) THEN
                 CALL LSL_PUTMSG (KERN2I__ACDFNDERR, 'Kern_ZS_name')
              ELSE 
                 ACTYPE = ACD_CODE
                 CALL EXPAND ('%W%S', ACTEXT(1), 
     &                                        ZS_NAME(:ZS_NAME_LEN))
                 ACLEN = ZS_NAME_LEN
                 CALL IFFAC (ACTYPE, ZS_NAME_LEN, ACTEXT, ACLEN)    
              ENDIF
           ENDIF
C
C  one point, pen up to get to symbol position
C
           NPT  = 1
           IEND = 0
C
           CALL IFFZS (ZSBUF, NPT, IEND)
           TPTS = TPTS + NPT
C
C  store the coordinates for comparison with the next one
C
           LAST_NET(1) = ZSBUF(1)
           LAST_NET(2) = ZSBUF(2)
           LAST_NET(3) = ZSBUF(3)
           LAST_NET_SET = .TRUE.
C
           ROTN = 0.0
           CALL IFFRO (ROTN)
C
           CALL IFFEF
           TPTS = 0
           INFTR = .FALSE.
C
1000    CONTINUE
C
C  any more ZS entries in parent feature?
C
        IF (.NOT.DELETED) THEN
           CALL IFFNXT (IECODE, IELEN)
           IF (IECODE.EQ.'ZS') THEN
              GOTO 100
           ELSE
              GOTO 5000
           ENDIF
        ENDIF
C
C  no more coordinates
C
5000    IF (INFTR) THEN
           CALL IFFEF
           TPTS = 0
           INFTR = .FALSE.
        ENDIF
C
	RETURN
	END                  
C
