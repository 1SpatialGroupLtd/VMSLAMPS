	LOGICAL FUNCTION READ_COORD_LINE()
C
***	IDENT	11NO88
***	MODULE	READ_COORD_LINE
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author J Barber 17 Sep 1988 for KERNCAM2I
C
CMOD   ZS_NAME no longer includes <CR> or odd end-of-line char
C                                                  JDB 11-Nov-1988
C
C This routine reads the coordinate lines in a KERN file and puts
C    values into XVALUE, YVALUE, ZVALUE if present
C
	IMPLICIT NONE
C
C common blocks...
C
***     PARAMETER/HERE:KERNCAM2IMSG/
***     PARAMETER/LSL$CMNLSL:READSTR/
***     COMMON/LSL$CMNLSL:TXTC/
***     COMMON/LSL$CMNIFF:MD2DES/
***	COMMON/HERE:PARAMS/
***     COMMON/HERE:DESCR/
***     COMMON/HERE:BUFFER/
C
C  functions
C
        LOGICAL         READ_DOUBLE
        INTEGER         READSTR
C
C  workspace...
C
        INTEGER         RETVAL
        INTEGER         TERM_COND
C
        REAL*8          TEST(3)
        REAL            X,Y     ! real ver of coordinates
C
        CHARACTER*10    TITLE
        BYTE            TERM_CHAR        ! <CR> termination 
        DATA            TERM_CHAR /Z0D/  !   character
C
C **********************************************************
C Assume success
C
	READ_COORD_LINE = .TRUE.
C
C  put character STRING into byte buffer BYTBUF
C
        CALL EXPAND ('%W%S80', BYTBUF(1), STRING(:80))
        CALL SETAUX (BYTBUF, 80)
C
        TITLE = 'X Value'
C        CALL SETWIN (1,12)
        IF (.NOT.READ_DOUBLE (80, TEST(1), TITLE, -1)) THEN
C
C  might not have been a coordinate line so return
C
           READ_COORD_LINE = .FALSE.
           GOTO 999
        ELSE
           XVALUE = TEST(1)
        ENDIF
C
C        CALL SETWIN (13,24)
        TITLE = 'Y Value'
C
C  use TEST so that XVALUE is not wiped if not a coord line
C
        IF (.NOT.READ_DOUBLE (80, TEST(2), TITLE, -1)) THEN
C
C  might not have been a coordinate line so return
C
           READ_COORD_LINE = .FALSE.
           GOTO 999
        ELSE
           YVALUE = TEST(2)
        ENDIF
C
C        CALL SETWIN (25,36)
        TITLE = 'Z Value'
        IF (.NOT.READ_DOUBLE (80, TEST(3), TITLE, -1)) THEN
C
C  might not have been a coordinate line so return
C
           READ_COORD_LINE = .FALSE.
           GOTO 999
        ELSE
           ZVALUE = TEST(3)
        ENDIF
C
C   set range values
C
        IF (.NOT.RANGE_SET) THEN
           RANGE(1) = XVALUE - MD2LOC(1)
           RANGE(2) = XVALUE - MD2LOC(1)
           RANGE(3) = YVALUE - MD2LOC(2)
           RANGE(4) = YVALUE - MD2LOC(2)
           RANGE_SET = .TRUE.
        ENDIF
C
        X = XVALUE - MD2LOC(1)
        Y = YVALUE - MD2LOC(2)
        RANGE(1) = MIN (RANGE(1), X)
        RANGE(2) = MAX (RANGE(2), X)
        RANGE(3) = MIN (RANGE(3), Y)
        RANGE(4) = MAX (RANGE(4), Y)
C
C  now read any ZS name after the coordinates excluding leading 
C    space and any strange control char at the end of the line in
C    char 80
C
        CALL EXPAND ('%W%S', BYTBUF(1), STRING(DCPTR:79))
        CALL SETAUX (BYTBUF, (80-DCPTR))
C
C  trailing spaces not included in ZS_NAME_LEN from READSTR so get 
C    length of valid text
C
        ZS_NAME_LEN = READSTR (ZS_NAME, , , .TRUE., RETVAL)
        IF (ZS_NAME_LEN.LE.0) GOTO 100
C
C  re-expand it into byte buffer
C
        CALL EXPAND ('%W%S', BYTBUF(1), ZS_NAME(:ZS_NAME_LEN))
        CALL SETAUX (BYTBUF, ZS_NAME_LEN)
C
C  and take off any undesired term. char (<CR>) if present
C
        TERM_COND = ON_CHAR
        ZS_NAME_LEN = READSTR (ZS_NAME, TERM_CHAR, TERM_COND, 
     &                                          .TRUE., RETVAL)
C
100     IF (ZS_NAME_LEN.GT.0) THEN
           IF (DIAG) CALL WRITEF (' ZS Name: %S', 
     &                                   ZS_NAME(:ZS_NAME_LEN))
           HAD_ZS_NAME = .TRUE.
        ELSE
           HAD_ZS_NAME = .FALSE.
        ENDIF
C
999	RETURN
	END
C
