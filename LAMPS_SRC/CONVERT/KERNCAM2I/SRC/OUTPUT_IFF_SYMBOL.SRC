C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-01-05 17:50:50.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE OUTPUT_IFF_SYMBOL
C
***	IDENT	05JA89
***	MODULE	OUTPUT_IFF_SYMBOL
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author J Barber 14 Sep 1988 for KERNCAM2I
C
CMOD   revisions for extended format              JDB 28-Oct-1988
C
CMOD   facility for text feature output           JDB 11-Nov-1988
C
CMOD	amended so that any FC_NAME string is output in a TX entry
C	rather than an AC entry if there is no ZS_NAME string present.
C						FJB  04-Jan-1989
C
CMOD	redirect jump after FRT code errors to read next line
C						FJB 05-Jan-1989
C
C
C This routine creates the IFF symbol features whenever called in 
C   READ_KERN_MAIN at any coordinate string encountered with
C   values in XVALUE, YVALUE, ZVALUE
C   if no IFF feature present, start one
C
	IMPLICIT NONE
C
C common blocks...
C
***     PARAMETER/HERE:KERNCAM2IMSG/
***     COMMON/LSL$CMNIFF:IFFHAN/
***     COMMON/LSL$CMNIFF:MD2DES/
***     COMMON/LSL$CMNFRT:FRTACD/
***     COMMON/LSL$CMNFRT:FRTCOM/
***     COMMON/HERE:BUFFER/
***	COMMON/HERE:DESCR/
***     COMMON/HERE:PARAMS/                                    
C
C  functions
C
        LOGICAL           FRTFND
        LOGICAL           ACDFND_NAME
        LOGICAL           READ_COORD_LINE
        INTEGER           READ_LINE
C
C  workspace...
C
        INTEGER           RETVAL
        INTEGER*2         FSN
        INTEGER*2         NPTS
        INTEGER*2         ZERO
        INTEGER*2         ISTAT(4)
        INTEGER*2         ACTYPE
        INTEGER*2         ACLEN
        INTEGER*2         TXLEN
C
        REAL              ZSBUF(3,1)
        REAL              ACSCALE           ! real ver of SCALE
        REAL              ROTN              ! real ver of SYMB_ROTN/
C                                           !    TEXT_ROTN
        LOGICAL           HAD_TEXT          ! text feature?
C
        BYTE              ACTEXT(80)        ! bytes for AC text
C
        DATA              ISTAT/0,0,0,0/
C
C **********************************************************
C  find out what type of symbol feature we have
C
5        IF (FRTFND (IFC)) THEN
C
C  unknown FC not in FRT
C
           CALL LSL_PUTMSG (KERN2I__FRTFNDERR, IFC)
           GOTO 20
        ELSE
C
C  is it a text or symbol
C
           IF (FRTGT.EQ.ORITYP) THEN
              HAD_TEXT = .FALSE.
           ELSEIF (FRTGT.EQ.TEXTYP) THEN
              HAD_TEXT = .TRUE.
           ELSE
C
C  or something else in which case we are in the wrong routine
C
              CALL LSL_PUTMSG (KERN2I__SYMBOLGTERR, IFC)
              GOTO 20
           ENDIF
        ENDIF
C
C  first coordinates for new feature so create the collected 
C    entries so far
C
        COUNT = COUNT + 1
C
        FSN = COUNT
        ZERO = 0
        CALL IFFNF (FSN, ZERO)
C
        INFTR = .TRUE.
C
C  set feature code
C
        ISTAT(1) = IFC
C
C  set bit 14/15 to 1 for symbol feature, 2 for text feature
C     bit 0-3 left as 0 for bottom LH corner positioning of text
C     to ZS coordinate
C
        IF (HAD_TEXT) THEN
C
C  position text at posn 1 ie. at centre of LH edge of the square grid
C
           ISTAT(3) = 32769            ! 32768 for text + 1
        ELSE
           ISTAT(3) = 16384            ! for symbol
        ENDIF
C
        LPOSFS = LPOSE
C
        CALL IFFFS (ISTAT)
C
C  any AC entries
C
        IF (HAD_AC_HOUR) THEN
C
           IF (ACDFND_NAME ('Kern_hour', RETVAL)) THEN
              CALL LSL_PUTMSG (KERN2I__ACDFNDERR, 'Kern_hour')
           ELSE 
              ACTYPE = ACD_CODE
              CALL IFFAC (ACTYPE, HOUR)
           ENDIF
        ENDIF
C
        IF (HAD_AC_SCALE) THEN
C
           ACSCALE = SCALE           ! convert to real
C
           IF (ACDFND_NAME ('Kern_scale', RETVAL)) THEN
              CALL LSL_PUTMSG (KERN2I__ACDFNDERR, 'Kern_scale')
           ELSE 
              ACTYPE = ACD_CODE
              CALL IFFAC (ACTYPE, ACSCALE)
           ENDIF
        ENDIF
C
        IF (HAD_FC_NAME) THEN
C
	   IF (HAD_TEXT .AND. (.NOT. HAD_ZS_NAME))THEN
C
C  If the FRT defines this feature code as a text but the only text string
C  is given after the CHANGE TO SYMBOL command ( held as FC_NAME) and there
C  is no text string after the coordinates ( held as ZS_NAME), then swap
C  FC_NAME into ZS_NAME for the purposes of creating a TX entry and not
C  an AC entry for the text in the feature created below.
C
	      ZS_NAME_LEN = FC_NAME_LEN
	      ZS_NAME(1:ZS_NAME_LEN) = FC_NAME(1:FC_NAME_LEN)
	      HAD_ZS_NAME = .TRUE.
C
           ELSEIF (ACDFND_NAME ('Kern_FC_name', RETVAL)) THEN
              CALL LSL_PUTMSG (KERN2I__ACDFNDERR, 'Kern_FC_name')
           ELSE 
              ACTYPE = ACD_CODE
              CALL EXPAND ('%W%S', ACTEXT(1), 
     &                                     FC_NAME(:FC_NAME_LEN))
              ACLEN = FC_NAME_LEN
              CALL IFFAC (ACTYPE, FC_NAME_LEN, ACTEXT, ACLEN)    
           ENDIF
        ENDIF
C
C   output any coordinate comments/names, unless this a text feature
C     when it go into a TX entry
C
        IF (HAD_ZS_NAME) THEN
C
           IF (HAD_TEXT) GOTO 10
C
           IF (ACDFND_NAME ('Kern_ZS_name', RETVAL)) THEN
              CALL LSL_PUTMSG (KERN2I__ACDFNDERR, 'Kern_ZS_name')
           ELSE 
              ACTYPE = ACD_CODE
              CALL EXPAND ('%W%S', ACTEXT(1), 
     &                                     ZS_NAME(:ZS_NAME_LEN))
              ACLEN = ZS_NAME_LEN
              CALL IFFAC (ACTYPE, ZS_NAME_LEN, ACTEXT, ACLEN)    
           ENDIF
        ENDIF
C
C  next the coordinates
C
10      ZSBUF (1,1) = XVALUE - MD2LOC(1)
        ZSBUF (2,1) = YVALUE - MD2LOC(2)
        ZSBUF (3,1) = ZVALUE
C
C  symbol feature - one ZS per feature, pen up
C
        IENDS = 0
C
C  output the coordinate
C
        NPTS = 1
        CALL IFFZS (ZSBUF, NPTS, IENDS)
        TPTS = TPTS + NPTS
C
        IF (HAD_TEXT .AND. HAD_TEXT_ROTN) THEN
C
           ROTN = TEXT_ROTN
           CALL IFFRO (ROTN)
           GOTO 15
        ENDIF
C
        IF (HAD_SYMB_ROTN) THEN
C
           ROTN = SYMB_ROTN
           CALL IFFRO (ROTN)
           GOTO 15
        ENDIF
C
C  neither text nor symbol rotn
C
        ROTN = 0.0
        CALL IFFRO (ROTN)
C
15      IF (HAD_TEXT .AND. HAD_ZS_NAME) THEN
C
C  text string held in ZS_NAME
C
           CALL EXPAND ('%W%S', BYTBUF(1), ZS_NAME(:ZS_NAME_LEN))
C
           TXLEN = ZS_NAME_LEN
           CALL IFFTX (BYTBUF, TXLEN)
        ENDIF
C
C  and close feature, without resetting everything
C
        CALL IFFEF
        TPTS = 0
        INFTR = .FALSE.
C
C  get next line - allowable lines while in the same KERN feature 
C   are:
C     CHANGE TO PEN UP/DOWN or more coordinates, otherwise RETURN
C     to normal program reading
C
20      RETVAL = READ_LINE()
        IF (.NOT.RETVAL) THEN
           CALL LSL_PUTMSG (KERN2I__READLINERR)
           GOTO 999
        ENDIF
C
25      IF (STRING(1:16).EQ.'CHANGE TO PEN UP') THEN
C
           PEN_UP   = .TRUE.
C
           IENDS = 0
C
C   read next line for coordinates
C
           RETVAL = READ_LINE()
           IF (.NOT.RETVAL) THEN
              CALL LSL_PUTMSG (KERN2I__READLINERR)
              GOTO 999
           ENDIF
C
           IF (.NOT.READ_COORD_LINE()) THEN
              CALL LSL_PUTMSG (KERN2I__RDCOORDERR, STRING)
              GOTO 999
           ENDIF
C
        ELSEIF (STRING(1:18).EQ.'CHANGE TO PEN DOWN') THEN
C
           PEN_UP   = .FALSE.
C
           IENDS = 0               ! always up for symbols
C
C   read next line for coordinates
C
           RETVAL = READ_LINE()
           IF (.NOT.RETVAL) THEN
              CALL LSL_PUTMSG (KERN2I__READLINERR)
              GOTO 999
           ENDIF
C
           IF (.NOT.READ_COORD_LINE()) THEN
              CALL LSL_PUTMSG (KERN2I__RDCOORDERR, STRING)
              GOTO 999
           ENDIF
C
        ELSE
C
C   STRING with don't know what - try reading a number
C
           IF (.NOT.READ_COORD_LINE()) THEN
C
C  not coordinates so return to file reading with STRING in hand
C    if it is a processable line after outputting existing ZS block
C    otherwise continue with a new feature with the same parameters
C
C  list of processable lines so that END_FEATURE can be used to reset 
C    everything, otherwise just use IFFEF and start another feature
C    with the same parameters
C
              IF (STRING(1:10).EQ.'CHANGE TO ') THEN
                 IF (STRING(11:22).EQ.'END HATCHING') THEN
                    GOTO 999
                 ELSEIF (STRING(11:24).EQ.'START HATCHING') THEN
                    GOTO 999
                 ELSEIF (STRING(11:18).EQ.'LINETYPE') THEN
                    GOTO 999
                 ELSEIF (STRING(11:17).EQ.'CONTOUR') THEN
                    GOTO 999
                 ELSEIF (STRING(11:15).EQ.'CURVE') THEN
                    GOTO 999
                 ELSEIF (STRING(11:13).EQ.'ARC') THEN
                    GOTO 999
                 ELSEIF (STRING(11:14).EQ.'HOUR') THEN
                    GOTO 999
                 ELSEIF (STRING(11:15).EQ.'SCALE') THEN
                    GOTO 999
                 ELSEIF (STRING(11:25).EQ.'SYMBOL ROTATION') THEN
                    GOTO 999
                 ELSEIF (STRING(11:23).EQ.'TEXT ROTATION') THEN
                    GOTO 999
                 ELSEIF (STRING(11:16).EQ.'SYMBOL') THEN
                    GOTO 999
                 ELSEIF (STRING(11:17).EQ.'NETWORK') THEN
                    GOTO 999
                 ELSEIF (STRING(11:16).EQ.'PEN UP') THEN
                    PEN_UP   = .TRUE.
                    GOTO 25
                 ELSEIF (STRING(11:18).EQ.'PEN DOWN') THEN
                    PEN_UP   = .FALSE.
                    GOTO 25
                 ENDIF
C
              ELSEIF (STRING(1:4).EQ.'QUIT') THEN
                 GOTO 999
              ENDIF
C
C  not a processable line, which will be ignored so get next line
C
              GOTO 20
C
           ELSE
C
C   were coordinates, go to start of program again to create a new
C     feature
C
              GOTO 5
           ENDIF
C
        ENDIF
C
999     CALL END_FEATURE        ! last coord so reset everything
C
1000	RETURN
	END
C
