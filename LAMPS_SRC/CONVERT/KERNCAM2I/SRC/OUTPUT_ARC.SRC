C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-11-11 16:33:22.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE OUTPUT_ARC
C
***	IDENT	11NO88
***	MODULE	OUTPUT_ARC
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author J Barber 7 Nov 1988 for KERNCAM2I
C
C This routine creates the IFF circle or arc features whenever 
C   called in OUTPUT_IFF_FEATURE for HAD_FC_ARC
C
C Default FC is for a circumcircle arc (GT 4) with FC 3000 - 
C   3999 if CHANGE TO ARC encountered. If the points are closed 
C   then change to full circumcircle (GT 5) with FC 4000 - 4999
C
C Reposition to the NF and read the ZS entry/entries to get the 
C   required 3 points
C Then delete the feature and recreate it with the required
C   FC and ZS entry
C
	IMPLICIT NONE
C
C common blocks...
C
***     PARAMETER/HERE:KERNCAM2IMSG/
***     COMMON/LSL$CMNIFF:IFFHAN/
***     COMMON/LSL$CMNFRT:FRTACD/
***	COMMON/HERE:DESCR/
***     COMMON/HERE:PARAMS/
C
C  functions
C
        LOGICAL           ACDFND_NAME
C
C  workspace...
C
        INTEGER           RETVAL
        INTEGER           PNTCNT
        INTEGER           SECOND, THIRD
        INTEGER*2         FSN
        INTEGER*2         IECODE, IELEN
        INTEGER*2         NREALS
        INTEGER*2         NWRDS, NSTRT
        INTEGER*2         NPTS
        INTEGER*2         ZERO
        INTEGER*2         ISTAT(4)
        INTEGER*2         ACTYPE
        INTEGER*2         ACLEN
C
        REAL              ACSCALE           ! real ver of SCALE
        REAL              ZSBUF(3,200)      ! each coordinate
        REAL              ARC_ZSBUF(3,3)
        REAL*8            DIFF(3)
C
        LOGICAL           FULL_CIRCLE
C
        BYTE              ACTEXT(80)        ! bytes for AC text
C
        DATA              ISTAT/0,0,0,0/
C
C **********************************************************
C  initialise the count of points in the feature
C
        PNTCNT = 0
C
C  reposition to the feature NF
C
        CALL IFFPKE (IECODE, IELEN, LPOSNF)
C
C  and find first ZS entry in feature
C
        CALL IFFNXC ('ZS', IELEN)
C
C  read ZS entry-in-hand
C
100     CALL EIHRS (NPTS, IENDS)
C
C  read the entry-in-hand ZS for the x,y,z value
C
        NREALS = 3 * NPTS
        NSTRT = 1
        CALL EIHRR (ZSBUF(1, 6*PNTCNT+1), NREALS, NSTRT)
C
        PNTCNT = PNTCNT + NPTS
C
C  if more than 200 points in feature, more easily left as 
C    interpolated CURVE FC, leaving the ZS entries as they stand
C
        IF (PNTCNT.GT.200) THEN
C
           IFC = MOD (IFC, 1000) + 1000
           ISTAT(1) = IFC
C
C  reposition to the feature FS
C
           CALL IFFPKE (IECODE, IELEN, LPOSFS)
C
           NWRDS = 4
           NSTRT = 1
           CALL EIHW (ISTAT, NWRDS, NSTRT)
C
           GOTO 5000
        ENDIF
C
C  get next entry
C
        CALL IFFNXT (IECODE, IELEN)
        IF (IECODE.EQ.'ZS') GOTO 100
C
C  need at least 3 points for ARC feature
C
        IF (PNTCNT.LT.3) THEN
           CALL LSL_PUTMSG (KERN2I__ARCPTSERR, PNTCNT)
           GOTO 5000
        ENDIF
C
C  is it a closed circle
C
        DIFF(1) = ABS (ZSBUF(1,1) - ZSBUF(1,PNTCNT))
        DIFF(2) = ABS (ZSBUF(2,1) - ZSBUF(2,PNTCNT))
        DIFF(3) = ABS (ZSBUF(3,1) - ZSBUF(3,PNTCNT))
C
        IF (DIFF(1).LE.0.0005D0 .AND. DIFF(2).LE.0.0005D0
     & .AND. DIFF(3).LE.0.0005D0) THEN
C
C  full circumcircle, need at least 4 points for circle with 
C    first and last identical
C
           IF (PNTCNT.LT.4) THEN
              CALL LSL_PUTMSG (KERN2I__CIRCPTSERR, PNTCNT)
              GOTO 5000
           ENDIF
C
           FULL_CIRCLE = .TRUE.
           IFC = MOD (IFC, 1000) + 4000
        ELSE
           FULL_CIRCLE = .FALSE.
           IFC = MOD (IFC, 1000) + 3000
        ENDIF
C
C  no more points, so delete feature for later recreation
C
        CALL IFFDEL
        DELETED = .TRUE.
        COUNT = COUNT - 1
        INFTR = .FALSE.
C
C  initialise total no of points
C
        TPTS = 0
C
C  get the 3 coordinate points
C
        IF (FULL_CIRCLE) THEN
C
C  full circumcircle
C  first point
C
           ARC_ZSBUF(1,1) = ZSBUF(1,1)
           ARC_ZSBUF(2,1) = ZSBUF(2,1) 
           ARC_ZSBUF(3,1) = ZSBUF(3,1) 
C
C  second point
C
           SECOND = (PNTCNT-1)/3 + 1
           ARC_ZSBUF(1,2) = ZSBUF(1,SECOND)
           ARC_ZSBUF(2,2) = ZSBUF(2,SECOND)
           ARC_ZSBUF(3,2) = ZSBUF(3,SECOND)
C
C  third point
C
           THIRD = (2*PNTCNT-1)/3 + 1
           ARC_ZSBUF(1,3) = ZSBUF(1,THIRD)
           ARC_ZSBUF(2,3) = ZSBUF(2,THIRD)
           ARC_ZSBUF(3,3) = ZSBUF(3,THIRD)
C
        ELSE
C
C  part circumcircle arc
C  first point
C
           ARC_ZSBUF(1,1) = ZSBUF(1,1)
           ARC_ZSBUF(2,1) = ZSBUF(2,1) 
           ARC_ZSBUF(3,1) = ZSBUF(3,1) 
C
C  second point is somewhere in middle of first and last
C
           SECOND = (1+PNTCNT)/2
           ARC_ZSBUF(1,2) = ZSBUF(1,SECOND)
           ARC_ZSBUF(2,2) = ZSBUF(2,SECOND)
           ARC_ZSBUF(3,2) = ZSBUF(3,SECOND)
C
C  last point
C
           ARC_ZSBUF(1,3) = ZSBUF(1,PNTCNT)
           ARC_ZSBUF(2,3) = ZSBUF(2,PNTCNT)
           ARC_ZSBUF(3,3) = ZSBUF(3,PNTCNT) 
C
        ENDIF
C
C  start the feature again
C
        LPOSNF = LPOSE
C
        COUNT = COUNT + 1
        FSN = COUNT
        ZERO = 0
        CALL IFFNF (FSN, ZERO)
C
        INFTR = .TRUE.
C
        LPOSFS = LPOSE
        ISTAT(1) = IFC
        CALL IFFFS (ISTAT)
C
C  the AC entries
C
        IF (HAD_AC_HOUR) THEN
C
           IF (ACDFND_NAME ('Kern_hour', RETVAL)) THEN
              CALL LSL_PUTMSG (KERN2I__ACDFNDERR, 'Kern_hour')
           ELSE 
              ACTYPE = ACD_CODE
              CALL IFFAC (ACTYPE, HOUR)
           ENDIF
        ENDIF
C
        IF (HAD_AC_SCALE) THEN
C
           ACSCALE = SCALE           ! convert to real
C
           IF (ACDFND_NAME ('Kern_scale', RETVAL)) THEN
              CALL LSL_PUTMSG (KERN2I__ACDFNDERR, 'Kern_scale')
           ELSE 
              ACTYPE = ACD_CODE
              CALL IFFAC (ACTYPE, ACSCALE)
           ENDIF
        ENDIF
C
        IF (HAD_FC_NAME) THEN
C
           IF (ACDFND_NAME ('Kern_FC_name', RETVAL)) THEN
              CALL LSL_PUTMSG (KERN2I__ACDFNDERR, 'Kern_FC_name')
           ELSE 
              ACTYPE = ACD_CODE
              CALL EXPAND ('%W%S', ACTEXT(1), 
     &                                     FC_NAME(:FC_NAME_LEN))
              ACLEN = FC_NAME_LEN
              CALL IFFAC (ACTYPE, FC_NAME_LEN, ACTEXT, ACLEN)    
           ENDIF
        ENDIF
C
C   output any coordinate comments/names
C
        IF (HAD_ZS_NAME) THEN
C
           IF (ACDFND_NAME ('Kern_ZS_name', RETVAL)) THEN
              CALL LSL_PUTMSG (KERN2I__ACDFNDERR, 'Kern_ZS_name')
           ELSE 
              ACTYPE = ACD_CODE
              CALL EXPAND ('%W%S', ACTEXT(1), 
     &                                     ZS_NAME(:ZS_NAME_LEN))
              ACLEN = ZS_NAME_LEN
              CALL IFFAC (ACTYPE, ZS_NAME_LEN, ACTEXT, ACLEN)    
           ENDIF
        ENDIF
C
C  3 points, pen up to feature
C
        NPTS = 3
        IENDS = 0
        CALL IFFZS (ARC_ZSBUF, NPTS, IENDS)
        TPTS = TPTS + NPTS
C
5000	RETURN
	END                  
C
