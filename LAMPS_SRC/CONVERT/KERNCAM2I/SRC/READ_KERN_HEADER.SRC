C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-11-11 16:36:12.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION READ_KERN_HEADER()
C
***	IDENT	11NO88
***	MODULE	READ_KERN_HEADER
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author J Barber 14 Sep 1988 for KERNCAM2I
C
CMOD   free format reading of the MAP INDEX field     JDB 20-Oct-1988
C
CMOD   defaults for absence of header                 JDB 11-Nov-1988
C
C This routine reads the KERN header lines and puts the data into 
C    the IFF header entries, and creates other IFF header entries
C
	IMPLICIT NONE
C
C common blocks...
C
***     PARAMETER/LSL$CMNLSL:LSLLIBMSG/
***     PARAMETER/HERE:KERNCAM2IMSG/
***     COMMON/LSL$CMNIFF:MD2DES/
***	COMMON/HERE:PARAMS/
***     COMMON/HERE:BUFFER/
C
C  functions
C
        INTEGER           READ_LINE
        LOGICAL           READ_DOUBLE
C
C  workspace...
C
        REAL*8            YSCALE
C
        INTEGER           RETVAL
        LOGICAL           READOK
        LOGICAL           HAD_SCALE
        LOGICAL           HAD_OFFSET
C
        CHARACTER*10      TITLE
C
C **********************************************************
C Assume success
C
	READ_KERN_HEADER = KERN2I__NORMAL		  
C
        HAD_SCALE = .FALSE.
        HAD_OFFSET = .FALSE.
C
C   read the next line into STRING in BUFFER
C
10      READ_KERN_HEADER = READ_LINE()
C
        IF (.NOT.READ_KERN_HEADER) THEN
           IF (READ_KERN_HEADER.EQ.LSL__EOF) 
     &                    CALL LSL_PUTMSG (KERN2I__UNEXPEOF)
           GOTO 999
        ENDIF
C
C  now have data in STRING to process
C
        IF (STRING(1:10).EQ.'CHANGE TO ') THEN
C
C  map scale x and y for MD2SCL
C
           IF (STRING (11:19).EQ.'MAP SCALE') THEN
C
              HAD_SCALE = .TRUE.
              TITLE = 'X scale'
C
              CALL EXPAND ('%W%S28', BYTBUF(1), STRING(20:47))
              CALL SETAUX (BYTBUF, 28)
              CALL SETWIN (1,14)
C
              IF (.NOT.READ_DOUBLE (14, MD2SCL, TITLE, 1)) 
     &                            CALL LSL_PUTMSG (KERN2I__UNSETMD2SCL)
C
              IF (DIAG) CALL WRITEF (' MD2 scale is: %^D%F14.4', MD2SCL)
C
              CALL SETWIN (15,28)
              READOK = READ_DOUBLE (14, YSCALE, TITLE, 1)
C
              IF (DIAG .AND. YSCALE.NE.MD2SCL) CALL WRITEF 
     & ('  X scale (%^D%F14.4) not equal to Y scale (%^D%F14.4)',
     &         MD2SCL, YSCALE)
C
              GOTO 10
C
           ELSEIF (STRING(11:19).EQ.'MAP INDEX') THEN
C
              HAD_OFFSET = .TRUE.
C
C  map origin for MD2LOC
C  get next line for origin coordinates
C
              READ_KERN_HEADER = READ_LINE()
C
              IF (.NOT.READ_KERN_HEADER) THEN
                 IF (READ_KERN_HEADER.EQ.LSL__EOF) 
     &                     CALL LSL_PUTMSG (KERN2I__UNEXPEOF)
                 GOTO 999
              ENDIF
C
              CALL EXPAND ('%W%S80', BYTBUF(1), STRING(:80))
              CALL SETAUX (BYTBUF, 80)
C
              TITLE = 'X origin'
C
              IF (.NOT.READ_DOUBLE (80, MD2LOC(1), TITLE, 0))
     &                         CALL LSL_PUTMSG (KERN2I__UNSETMD2LOC)
C
              TITLE = 'Y origin'
C
              IF (.NOT.READ_DOUBLE (80, MD2LOC(2), TITLE, 0))
     &                         CALL LSL_PUTMSG (KERN2I__UNSETMD2LOC)
C
              IF (DIAG) CALL WRITEF 
     &  (' MD2 origin: %^D%F13.3  %^D%F13.3', MD2LOC(1), MD2LOC(2))
C
              GOTO 10
C
           ELSE
C
              IF (DIAG) CALL WRITEF (' Line ignored: %S', STRING)
              GOTO 10
           ENDIF
C
        ELSEIF (STRING(1:5).EQ.'START') THEN
C
C   end of header, start the IFF header entries
C
           IF (.NOT.HAD_SCALE) THEN
              CALL LSL_PUTMSG (KERN2I__UNSETMD2SCL)
              MD2SCL = 1.0D0
           ENDIF
C
           IF (.NOT.HAD_OFFSET) THEN
              CALL LSL_PUTMSG (KERN2I__UNSETMD2LOC)
              MD2LOC(1) = 0.0D0
              MD2LOC(2) = 0.0D0
           ENDIF
C
           CALL OUTPUT_IFF_HEADER
C
           GOTO 999
        ELSE
C
C  unknown line entry for header
C
           IF (DIAG) CALL WRITEF (' Line ignored: %S', STRING)
           GOTO 10
        ENDIF
C
C  if get here then there was no program START
C
        READ_KERN_HEADER = KERN2I__KERNSTRTERR
        CALL LSL_PUTMSG (KERN2I__KERNSTRTERR)
C
999	RETURN				! back to the main program
	END
C
