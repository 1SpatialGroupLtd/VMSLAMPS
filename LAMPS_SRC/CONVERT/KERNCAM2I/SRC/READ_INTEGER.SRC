C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-09-20 13:34:02.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION READ_INTEGER (LEN, OUTNUM, TITLE, REPLACE)
C
***	IDENT	20SE88
***	MODULE	READ_INTEGER
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author J Barber, 15 Sep 1988
C
C This function reads a I*2 from a byte field of length LEN
C
	IMPLICIT NONE
C
        INTEGER*2        LEN            ! no. of chars to read
        INTEGER*2        OUTNUM         ! result
        INTEGER          REPLACE        ! no. to use on finding no 
        CHARACTER*10     TITLE          !                     real
C
***     PARAMETER/HERE:KERNCAM2IMSG/
***     COMMON/HERE:PARAMS/
C
C  function
C
        LOGICAL         RDINT           ! read I*2
C
C workspace
C
C  ****************************************************************
C be optimistic initially
C
	READ_INTEGER  = .TRUE.
C
        CALL SETWIN ( , LEN)
C
        IF (RDINT (OUTNUM)) THEN
           READ_INTEGER = .FALSE.
           IF (REPLACE.EQ.-1) THEN
              OUTNUM = 0
              GOTO 999
           ENDIF
           OUTNUM = REPLACE
           IF (REPLACE.EQ.0) THEN
              IF (DIAG) CALL LSL_PUTMSG (KERN2I__KERNPUT0, TITLE)
           ELSEIF (REPLACE.EQ.1) THEN
              IF (DIAG) CALL LSL_PUTMSG (KERN2I__KERNPUT1, TITLE)
           ENDIF
           CALL LSL_PUTMSG (KERN2I__RDINTERR, TITLE)
        ENDIF
C
999	RETURN		                  ! return with it
	END
C
