	INTEGER FUNCTION OPEN_FILES()
C
***	IDENT	18OC88
***	MODULE	OPEN_FILES
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author J Barber 17 Sep 1988 for KERNCAM2I
C
C This routine opens the KERN file for reading and the output IFF file
C
	IMPLICIT NONE
C
C common blocks...
C
***     PARAMETER/LSL$CMNLSL:LSLLIBMSG/
***     PARAMETER/HERE:KERNCAM2IMSG/
***	COMMON/HERE:PARAMS/
C
C  functions
C
        INTEGER         IFFCREATE
        INTEGER         FLROPN
C
C        INTEGER         FLWOPN          ! for copy file
C
C  workspace...
C
	CHARACTER*255	ACTNAM
	INTEGER		ACTLEN
        INTEGER         IERR		! supplementary error code
C
C **********************************************************
C Assume success
C
	OPEN_FILES = KERN2I__NORMAL		  
C
C  try to open the input KERN CAM file
C
        OPEN_FILES = FLROPN (KERNCAM_LUN, KERNCAM_NAM, IERR)
C
        IF (.NOT.OPEN_FILES) THEN
           CALL LSL_PUTMSG (KERN2I__FILOPNERR, 
     &                            KERNCAM_NAM(:KERNCAM_LEN))
           CALL LSL_ADDMSG (OPEN_FILES)
           IF (OPEN_FILES.EQ.LSL__SYSOPEN) CALL LSL_ADDMSG (IERR)
	   GOTO 999
        ENDIF
C
        CALL WRITEF
	CALL WRITEF (' Reading KERN CAM file %S',
     &				    KERNCAM_NAM (:KERNCAM_LEN))
C
        KERNCAM_OPN = .TRUE.
C
C  for copy file if required
C
C        COPYFILE_NAM = 'SYS$DISK:[]COPYFILE.DAT'
C        OPEN_FILES = FLWOPN (COPYFILE_LUN, COPYFILE_NAM, IERR)
C
C  open output IFF file
C
        OPEN_FILES = IFFCREATE (IFFLUN, FILNAM, , , .TRUE.)
C
        IF (.NOT.OPEN_FILES) THEN
           CALL LSL_PUTMSG (KERN2I__IFFOPNERR, FILNAM(:FILLEN))
           CALL LSL_ADDMSG (OPEN_FILES)
           GOTO 999
        ENDIF
C
C So the file is opened safely -
C tell what file we're actually writing to
C
	CALL IFFINQ (ACTNAM, ACTLEN)	! find the file name
        CALL WRITEF
	CALL WRITEF (' Writing to IFF file %S',
     &				            ACTNAM (1:ACTLEN))
C
C Rewind the file, just for safety's sake
C
	CALL IFFRWD
	INIFF = .TRUE.                  ! in an IFF file now
C
        CALL IFFRLA                     ! look ahead optimisation
C
999	RETURN				! back to the main program
	END
C
