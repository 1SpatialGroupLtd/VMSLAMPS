C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-02-04 12:29:26.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION CRETEX_TS
C
***	MODULE CRETEX_TS
***	IDENT  04FE91
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Author 		A.J.Verrill, 7th June, 1990
C
CMOD954 Calculate text size in 1.1mm., either from TH entry if present
C	and greater than 0, or from FRT value.
C	Crash for scaled symbols with same y coord fixed  JB 8 Jan 1991
C
C	Creates a number of TSDT text features from IFF multi-banked TS
C	features. Should be called ONLY after receiving a TS; CRETEX_TX handles
C	single text features.
C
	IMPLICIT NONE
C
C	Common
C
	INCLUDE		'LSL$CMNFRT:FRTCOM.CMN'
	INCLUDE		'HERE:I2TDST.CMN'
	INCLUDE		'HERE:I2TDSTMSG.PAR'
C
C	Declarations
C
	INTEGER*2	NUMCO		!Number of coordinates in ST/ZS/CB entry
	INTEGER*2	IENDS		!Unused value returned from EIHRS
	INTEGER*2	IECODE		!Entry name as two ASCII characters
	INTEGER*2	IELEN		!Entry length (-1 = EOF)
	INTEGER		TSIZ		!Text height
	INTEGER		NCHS		!Number of characters in text string
	INTEGER		KJI
	INTEGER		ZERO
	INTEGER		WUN
	PARAMETER (ZERO = 0, WUN=1)
	REAL		ROTAT		!Rotation of text feature
	REAL 		COOR(2)		!Coordinate array
	BYTE		CHARCS(40)	!text buffer
	BYTE		SP		!Padding space
	LOGICAL		HAD_ROT		!Had RO entry?
	LOGICAL		HAD_TXT		!Had TX entry
	LOGICAL         VALID_EF       !EF is valid read?
	DATA		SP/' '/
C
	CRETEX_TS = .TRUE.
C
C	Blank out character array
C
	DO 10 KJI = 1,40
	   CHARCS(KJI)=SP
10	CONTINUE
C
C       Set up loop back to here to get successive text banks.
C       Exit loop when get EF.
C
 100	CONTINUE
C
C       Haven't had any of these yet
C
	HAD_TH  = .FALSE.
	HAD_ROT = .FALSE.
	HAD_TXT = .FALSE.
C
C       Set up loop back to here to get successive entries within bank.
C       Exit loop when get TX or EF.
C
 200	CALL IFFNXT(IECODE,IELEN)
C
C       TS entry, already had this on 1st time through.
C
	IF (IECODE.EQ.'TS') THEN
	   VALID_EF = .FALSE.
	   GOTO 200		! expect TH or ST/ZS next
	END IF
C
C	TH entry
C
	IF (IECODE.EQ.'TH') THEN
	   HAD_TH = .TRUE.
	   CALL EIHRI(TH,1,1)
	   VALID_EF = .FALSE.
	   GOTO 200     ! expect ST/ZS next
	END IF 
C
C       ST, ZS entry
C
	IF (IECODE.EQ. 'ST' .OR.IECODE.EQ. 'ZS') THEN
	   CALL EIHRS(NUMCO,IENDS)
C
C       Text should have only one coord - the seed point. 
C
	   IF (NUMCO.NE.1) THEN
	      CALL LSL_PUTMSG(IDST__TOOMNYTXCOR,FSN)
	      CRETEX_TS = .FALSE.
	      GOTO 1000
	   ENDIF
C
C       Read coordinate entry
C
	   CALL EIHRR(COOR(1),2,1)
C
	   VALID_EF = .FALSE.
	   GOTO 200    ! expect RO or TX next
	ENDIF
C
C	RO entry
C
	IF (IECODE.EQ.'RO') THEN
	   CALL EIHRR(ROTAT,1,1)
	   HAD_ROT = .TRUE.
	   ROTAT = ROTAT *57.27271894
	   GOTO 200
	END IF
C
C	TX entry
C
	IF (IECODE.EQ.'TX') THEN
	   NCHS = IELEN*2
C
C	TDST maximum length is 40 characters - warn and truncate if longer
C
	   IF(NCHS .GT. 40) THEN
	      CALL LSL_PUTMSG(IDST__TXTTOOLON,FSN)
	      IELEN = 20
	      NCHS = 40
	   END IF
C
C	Read text information
C
	   CALL EIHRI(CHARCS,IELEN,1)
	   HAD_TXT = .TRUE.
	END IF    ! exit loop
C
C	EF entry
C
	IF (IECODE .EQ. 'EF') THEN
	   IF (.NOT.VALID_EF) THEN
	      CALL LSL_PUTMSG(IDST__UNXENTTYP,IECODE,FSN)
	   END IF
	   GOTO 1000
	END IF  
C
C       Process data read for text bank ready for writing out.
C
C	If no rotation then warn and use default of 0
C
	IF (.NOT.HAD_ROT) THEN
	   ROTAT = 0.0
	   CALL LSL_PUTMSG(IDST__NOROTTEX,FSN)
	END IF
C
C	If we have no TX entry then we can hardly use a default!
C
	IF (.NOT.HAD_TXT) THEN
	   CALL LSL_PUTMSG(IDST__NOTXTENT,FSN)
	   GOTO 1000
	END IF
C
C	Determine output attributes
C
	TSIZ=0
	IF (HAD_TH .AND. TH.GT.0) THEN
	   TSIZ = NINT(TH/1.1)
	ELSE
	   TSIZ = NINT(FRTSIZ/1.1)
	END IF
C
C	Write out single text feature
C
	CALL FLWRTF('TEXT      ')
	CALL FLWRTF('0    ')
	CALL FLWRTF('0    ')
	CALL FLWRTF('%I5%I5%I5%I5%I5%F16.4%F16.4%F16.4',FRTCOL,TSIZ,ZERO,
     +	ZERO,WUN,COOR(1),COOR(2),ROTAT)
	CALL FLWRTF('%I5',NCHS)
	CALL FLWRTF('%A40',CHARCS(1))
C
C       EF is now an acceptable next read
C
	VALID_EF = .TRUE.
	GOTO 100
C
1000	RETURN
	END
C
