C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-01-08 17:21:58.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION CREPOL
C
***	MODULE CREPOL
***	IDENT 08JA91
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Author 		A.D.Trigg, 10th June 1988
C	Modified        P.Pan, 14th February 1990
CMOD954 Change CREPOS array size from (2,200) to (2,201) to cope with
C	multiple 200 point ST blocks, so that the array can contain the 
C	200 points, AND the last point of previous block
C
C	Creates a TDST polygon feature from IFF features with Graphical Types
C	of 1, 6, 11 and 12.  For the purpose of TDST output we can treat these
C	four features identically because TDST does not have the facility to 
C	store interpolated curves, filled areas or symbol strings.
C
	IMPLICIT NONE
C
C	Common
C
	INCLUDE		'LSL$CMNFRT:FRTCOM.CMN'
	INCLUDE		'HERE:I2TDST.CMN'
	INCLUDE		'HERE:I2TDSTMSG.PAR'
C
C	Declarations
C
	INTEGER*2	NUMCO		!Number of coordinates in ST/ZS/CB entry
	INTEGER*2	PRENUMCO	!# of coords in the previous ST entry
	INTEGER		NUMPO		!Number of coords in TDST feature
	INTEGER*2	IENDS		!Unused values returned from EIHRS
	INTEGER*2	IELEN		!Entry length (-1 = EOF)
	INTEGER*2	IECODE		!Entry name as two ASCII characters
	INTEGER		CURPOS		!Current pos of read from coord array
	INTEGER		IJK
	INTEGER		NUMLIN		!Number of lines to output to TDST file
	INTEGER		NUM_READ	!Number of TDST features written
	INTEGER		ZERO
	PARAMETER	(ZERO=0)
	INTEGER		STYLE		!Line style of TDST feature
	REAL		COOR(2,201)	!Coordinate array
	REAL		AC_OUT		!Height value
	LOGICAL		HAD_FULL_TDST	!possibly more tdst coords to output?
	LOGICAL		ODD
	LOGICAL		MULT_ST		!dealing with any but the first ST block
C
	CREPOL = .TRUE.
	HAD_FULL_TDST = .FALSE.
	ODD = .FALSE.
	MULT_ST = .FALSE.
C
C	Entry in hand is ST/ZS/CB - extract the number of coordinates in the 
C	entry and their values
C
100	CALL EIHRS(NUMCO,IENDS)
	NUM_READ = 0
C
C	Read coordinate entries - dependent upon whether this is the first ST 
C	block in a feature or not (i.e. subsequent ST blocks will have to have
C	the last coord of the previous block as their first)
C
	IF(MULT_ST)THEN
	   MULT_ST = .FALSE.
C
C	Insert the last coord of the previous ST entry into the first value of
C	the new one
C
	   COOR(1,1) = COOR(1,PRENUMCO)
	   COOR(2,1) = COOR(2,PRENUMCO)
	   CALL EIHRR(COOR(1,2),NUMCO*2,1)
	   NUMCO = NUMCO + 1
	ELSE
	   CALL EIHRR(COOR(1,1),NUMCO*2,1)
	END IF
	PRENUMCO = NUMCO
C
C	Set up height values
C
	AC_OUT = 0.0
	IF (HAD_AC) AC_OUT = HT
C
C	Determine line style if appropriate - only determinable for GT 1
C
	STYLE = 0			!Default
	IF (GT .EQ. 1) STYLE = FRTSC
C
C	Determine number of coords to be written to TDST file (maximum of 70)
C
400	NUMPO = NUMCO
C
C	Check whether we have a full output buffer
C
	IF(NUMPO .GT. 70)THEN
	   NUMPO=70
	   HAD_FULL_TDST = .TRUE.
	END IF
	ODD=.FALSE.
	IF (MOD(NUMPO,2).EQ.1)ODD=.TRUE.
C
C	Write polygon feature
C 
	CALL FLWRTF('POLYGON   ')
	CALL FLWRTF('0    ')
	CALL FLWRTF('0    ')
	CALL FLWRTF('%N5%N5%N5%N5%F16.4',NUMPO,FRTCOL,ZERO,STYLE,AC_OUT)
C
C	Calculate the number of output lines of coordinates
C
	IF(ODD)	THEN
	   NUMLIN = (NUMPO-1)/2
	ELSE
	   NUMLIN = NUMPO/2
	END IF
C
C	Output the coordinates
C
	DO 500 IJK=1,NUMLIN
	   CURPOS = (IJK-1)*2 +1 +(NUM_READ*69)
	   CALL FLWRTF('%F16.4%F16.4%F16.4%F16.4',
     +	COOR(1,CURPOS),COOR(2,CURPOS),COOR(1,CURPOS+1),COOR(2,CURPOS+1))
500	CONTINUE
C
C	Account for odd coord on the last output line
C
	IF (ODD) THEN
	   CALL FLWRTF('%F16.4%F16.4',COOR(1,NUMPO+(NUM_READ*69)),
     +     COOR(2,NUMPO+(NUM_READ*69)))
	   ODD = .FALSE.
	END IF
C
C	If we had a full 70 coords to output then return to find more
C	Reduce numco by only 69 so that the last point of the feature
C	will be the first of the next, thus ensuring continuity in a
C	linear feature
C
	IF (HAD_FULL_TDST) THEN
	   HAD_FULL_TDST = .FALSE.
	   NUMCO         = NUMCO-69
C
C	If we have no more coords then dont return to try to read more
C
	   IF(NUMCO.EQ.0)GOTO 900
C
C	If we only have one coordinate then we can't form a line with it alone
C	Therefore write the value of the last coord of the previous buffer into
C	the position after the end. This will then be dealt with specially
C
	   IF(NUMCO.EQ.1)THEN
	      NUMCO=NUMCO+1
	      COOR(1,NUMCO) = COOR(1,NUMPO+(NUM_READ*69))
	      COOR(2,NUMCO) = COOR(2,NUMPO+(NUM_READ*69))
	   END IF
	   NUM_READ = NUM_READ+1
	   GOTO 400
	END IF	   
C
C	Look for further ST entries or EF entry
C
900	CALL IFFNXT(IECODE,IELEN)
	IF (IECODE .EQ. 'ST') THEN
	   MULT_ST = .TRUE.
	   GOTO 100
	END IF
	IF (IECODE .EQ. 'EF') GOTO 1000
	IF (IECODE .EQ. 'NF') THEN
	   CALL LSL_PUTMSG(IDST__NOEFENT,FSN)
	   HAD_NF = .TRUE.
	   GOTO 1000
	END IF
	CALL LSL_PUTMSG(IDST__UNXENTTYP,IECODE,FSN)
	GOTO 900
C
1000	RETURN
	END
C
