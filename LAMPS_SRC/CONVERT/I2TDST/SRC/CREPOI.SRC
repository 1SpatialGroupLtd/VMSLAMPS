C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-01-08 19:35:02.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION CREPOI
C
***	MODULE CREPOI
***	IDENT 08JA91
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Author 		A.D.Trigg, 8th June 1988
C	Modified        P.Pan, 14th February 1990
CMOD954	Correct calculation of symbol orientation from the two defining 
C	points with ATAN2 (esp. to cope with equal y-values)
C							JB 7-Jan=1991
C
C	Creates a TDST point feature from IFF features with Graphical Types
C	of 7, 8 and 9
C
	IMPLICIT NONE
C
C	Common
C
	INCLUDE		'LSL$CMNFRT:FRTCOM.CMN'
	INCLUDE		'HERE:I2TDST.CMN'
	INCLUDE		'HERE:I2TDSTMSG.PAR'
C
C	Declarations
C
	LOGICAL		OK
	LOGICAL		HAD_END		!End of feature found yet?
	LOGICAL		HAD_ROT		!Had a rotation feature?
	INTEGER		IJK
	INTEGER*2	NUMCO		!Number of coordinates in ST/ZS/CB entry
	INTEGER*2	IECODE		!Entry name as two ASCII characters
	INTEGER*2	IELEN		!Entry length (-1 = EOF)
	INTEGER*2	IENDS		!Unused value returned from EIHRS
	REAL		COOR(2,2)	!Coordinate array
	REAL		COPOS		!Position of current write in COOR
	REAL		ROTAT		!Rotation of feature
	REAL		AC_OUT		!Height output value
	REAL		ROT_OUT		!Rotation output value
	REAL		XDIFF		!X difference between defining points
	REAL		YDIFF		!Y difference between defining points
C
	CREPOI = .TRUE.
	HAD_END = .FALSE.
	HAD_ROT = .FALSE.
C
C	Feature in hand is ST/ZS/CB extract the number of coords in the entry
C	and their values
C
	CALL EIHRS(NUMCO,IENDS)
C
C	Read coordinate entries
C
	CALL EIHRR(COOR(1,1),NUMCO*2,1)
C
C	Look for next entry which can be RO or EF
C
75	CALL IFFNXT(IECODE,IELEN)
C
C	RO - Rotation feature
C
	IF(IECODE .EQ. 'RO') THEN
	   CALL EIHRR(ROTAT,1,1)
	   HAD_ROT = .TRUE.
	   GOTO 75			!Return for next entry ie EF (hopefully)
	END IF
C
C	EF - End of feature
C
	IF(IECODE .EQ. 'EF') THEN
	   HAD_END = .TRUE.
	   GOTO 100
	END IF
C
C	Check we haven't over run into a new feature
C
	IF(IECODE .EQ. 'NF') THEN
	   CALL LSL_PUTMSG(IDST__NOEFENT,FSN)
	   HAD_NF=.TRUE.
	   GOTO 100
	END IF
	CALL LSL_PUTMSG(IDST__UNXENTTYP,IECODE,FSN)
	GOTO 75
C
C	Direct control according to GT of feature
C
100	IF(GT.EQ.8 .OR. GT.EQ.9) GOTO 150
C
C	Assume GT = 7  - Unoriented symbol
C
	AC_OUT=0			!set default height
	IF (HAD_AC) AC_OUT=HT		!update height value if present
	ROT_OUT=0			!set default rotation
C
C	Write point feature into TDST file
C
	GOTO 151
C
C	GT = 8 - Oriented symbol   and   GT = 9 - Scaled symbol
C	GTs 8 and 9 can be treated identically because the only difference
C	between the two is how they are scaled and this info cannot be passed
C	to TDST files
C
150	AC_OUT=0.0			!set default height value
	IF (HAD_AC) AC_OUT=HT		!update height if present
	ROT_OUT=0.0			!set default rotation value
C
	IF (HAD_ROT) THEN
	   ROT_OUT=ROTAT*57.27271894	!update rotation and convert to degrees
	ELSE
C
C Must have rotation value but wasn't present as RO entry therefore there
C should be a second defining point
C
	   IF (NUMCO.NE.2) THEN
	      CALL LSL_PUTMSG(IDST__NOROTDAT,FSN)
	      ROT_OUT=0.0			!Assign default value
	   ELSE
C
C	Calculate rotation from second point
C	Calculation is dependant upon relative position
C
	      XDIFF=COOR(1,2)-COOR(1,1)
	      YDIFF=COOR(2,2)-COOR(2,1)
C
	      IF (ABS(XDIFF).LT.1E-6 .AND. ABS(YDIFF).LT.1E-6) THEN
	         CALL LSL_PUTMSG(IDST__NOROTDAT,FSN)
	         ROT_OUT=0.0			!Assign default value
	      ELSE
	         ROT_OUT = ATAN2(YDIFF,XDIFF)*57.27271894
	      ENDIF
	   ENDIF
	ENDIF
C
C Write point feature into TDST file
C
151	CALL FLWRTF('POINT     ')
	CALL FLWRTF('0    ')
	CALL FLWRTF('0    ')
	CALL FLWRTF('%N5%N5%F16.4%F16.4%F16.4%F16.4',FRTSC,FRTCOL,
     +  COOR(1,1),COOR(2,1),AC_OUT,ROT_OUT)
C
1000	RETURN
	END
C
