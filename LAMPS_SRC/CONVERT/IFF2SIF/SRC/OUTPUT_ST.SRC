C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-04-25 11:17:32.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE OUTPUT_ST( HAD_START, IECODE, NPTS,
     &			      STBUF, ZSBUF, PENUP,
     &			      HAD_HEIGHT, HEIGHT,
     &			      IS_LINEAR, STRING_TYPE )
C
***	IDENT	25AP91
***	MODULE	OUTPUT_ST
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 26 November 1986
C - abstracted from OUTPUT
C
C This routine performs the output of an ST or ZS
C
	IMPLICIT NONE
C
C common blocks required
C
***	COMMON/HERE:SIF/
***	COMMON/HERE:SIFCOM/
C
C arguments:
C
	LOGICAL		HAD_START	! called START for this feature?
	INTEGER*2	IECODE	    	! IFF entry name
	INTEGER*2	NPTS		! number of points in ST/ZS entry
	REAL		STBUF(2,NPTS)	! points buffer for ST entry
	REAL		ZSBUF(3,NPTS)	! points buffer for ZS entry
	LOGICAL		PENUP		! pen up to ST/ZS ?
	LOGICAL		HAD_HEIGHT	! true if had a height AC
	REAL		HEIGHT		! height from AC entry
	LOGICAL		IS_LINEAR	! sic
	CHARACTER*2	STRING_TYPE	! linear feature is open,shape,hole
C
C workspace
C
C functions used
C
	LOGICAL		COMPLEX_STRING	! is it?
C
C *********************************************************************
C check that we don't have more points than we allow in this ST
C
	IF (NPTS.GT.STMAX) THEN
	   CALL MOAN( MSG__BADST, NPTS, STMAX, FSN )
	   NPTS = STMAX		       	! ignore the surplus points
	ENDIF
C
C and read the points into the appropriate sort of buffer
C - note that the points will be in STBUF if DIMENSION=2,
C   and ZSBUF if DIMENSION=3, regardless of IECODE
C
	CALL READ_STRING( IECODE, DIMENSION, NPTS, STBUF, ZSBUF,
     &			  HAD_HEIGHT, HEIGHT )
C
C if the feature is linear, then we must output the points at once
C
	IF (IS_LINEAR) THEN
C
C	 ensure that we have output the information which describes
C	 this feature...
C
	   IF (.NOT.HAD_START) THEN
	      CALL START( IS_TEXT, SIF_LEVEL,  SIF_FONT,
     &				   SIF_STYLE,  SIF_WEIGHT, SIF_COLOUR,
     &				   HAD_HEIGHT, HEIGHT, DIMENSION )
 	      HAD_START = .TRUE.
	   ENDIF
C
C 	 if this ST or ZS is the start of a new section of line, then
C	 we must check whether we have more points than will fit into
C	 a simple string - if we have more, then we must embed the line
C	 string in a complex string
C
	   IF ( PENUP .AND. COMPLEX_STRING(IECODE,NPTS) ) THEN
	      IF (IN_COMPLEX_STRING) CALL SIFEST	! end current complex
							! string first
	      CALL SIFBST(STRING_TYPE)
	   ENDIF
C
C	 and finally we can output the points from this ST/ZS
C
	   IF ( DIMENSION.EQ.2 ) THEN
 	      CALL USE_ST( DIMENSION, NPTS, STBUF, PENUP, STRING_TYPE )
	   ELSE
	      CALL USE_ST( DIMENSION, NPTS, ZSBUF, PENUP, STRING_TYPE )
	   ENDIF
C
	ENDIF
C
C *********************************************************************
C
9999	RETURN
	END
