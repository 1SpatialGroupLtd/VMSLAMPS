	INTEGER*4 FUNCTION CONVERT( COORD, MULTBY, OFFSET, USE_OFFSET,
     &				    ERROR )
C
***	IDENT	07OC86
***	MODULE	CONVERT
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 12 August 1985
C
	IMPLICIT NONE
C
C This function (possibly) adds in an offset, and then multiplies the
C value resulting by the multiplication factor given, and returns it as
C an unsigned integer (presumably UORs)
C
***	COMMON/HERE:SIF/
C
C Arguments are:
C	
	REAL		COORD		! in - coordinate to multiply
	REAL*8		MULTBY		! in - what to multiply it by
	REAL		OFFSET		! in - offset to add
	LOGICAL		USE_OFFSET	! in - true if to add the offset
	LOGICAL		ERROR		!out - true if data was clipped
C
C workspace
C
	REAL*8		INTER		! intermediate result
C
C *********************************************************************
C
C assume that the data is OK
C
	ERROR = .FALSE.
C
C decide whether to add the offset in
C
	IF ( USE_OFFSET ) THEN
	   INTER = COORD+OFFSET
	ELSE
	   INTER = COORD
	ENDIF
C
C and we multiply by MULTBY to get UORs
C
	INTER = INTER*MULTBY
C
C now convert our value into an unsigned integer
C
	IF ( INTER .LT. NOUGHT-0.5 ) THEN
C
C	 the number is negative - this is not allowed
C
	   CALL MOAN( MSG__TOOSMALL, INTER, 0.0 )
	   ERROR = .TRUE.
C
C	 coerce it to be the minimum we can output
C
	   CONVERT = 0
C
	ELSEIF ( INTER .LT. MAXSIGNED-0.5 ) THEN
C
C	 the number will fit into an ordinary integer - do so
C
	   CONVERT = NINT( INTER )
C
	ELSEIF ( INTER .LT. MAXSIGNED+0.5 ) THEN
C
C	 the number is "equal to" the transition value
C
	   CONVERT = INT( INTER )
C
	ELSEIF ( INTER .LT. MAXINT-0.5 ) THEN
C
C	 the number is within our unsigned range, but not a standard
C	 integer - make it "negative"
C
	   INTER   = INTER-MAXINT-1
	   CONVERT = NINT( INTER )
C
	ELSEIF ( INTER .LT. MAXINT+0.5 ) THEN
C
C	 the number is at the top of our range - make it so
C
	   CONVERT = -1
C
	ELSE
C
C	 the number is too big
C
	   CALL MOAN( MSG__TOOBIG, INTER, MAXINT )
	   ERROR = .TRUE.
C
C	 coerce it to be the "maximum" we can output
C
	   CONVERT = -1
C
	ENDIF
C
	RETURN
	END
