C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-12-16 17:02:44.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION OBEY
C
***	IDENT	16DE87
***	MODULE	OBEY
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 31 January 1985
C
C This function interprets the command line, reading any commands
C that may be on it
C
C It returns FALSE if the command IFF has been given, otherwise TRUE
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'
C
***	COMMON/HERE:SIF/
***	COMMON/HERE:SIFMT/
***	COMMON/HERE:SIFFILE/
***	COMMON/HERE:SIFCOM/
***	COMMON/LSL$CMNLSL:CMDCOM/
C
C workspace
C
	INTEGER		CMD		! the command number
	LOGICAL		OK		! error
	INTEGER		RETCOD, IERR	! returns from GETFILNAM, etc
	INTEGER		NUM		! number read in
	REAL		RNUM		! real number read in
C
	CHARACTER*(SZ)	SRINAME		! SRI filename (SZ is in /SIFFILE/)
	INTEGER*2	SRILEN		! its length
C
C functions
C
	INTEGER		RDCOMM		! read a command
	LOGICAL		GETFILNAM	! read/parse a filename
	LOGICAL		RDLONG		! read a long integer
	LOGICAL		RDREAL		! read a real
	LOGICAL		RDDBLE		! read a double precision real
	INTEGER		EXPAND		! expand a string
	INTEGER		READSTR		! read a string
	LOGICAL		SRIINI		! get the symbol defn file
	LOGICAL		FLROPN		! open a file for read
C
C the colon character
C
	BYTE		 COLON
	PARAMETER	(COLON = ':')
C
C the command table
C
	INTEGER		SIF_CMD_TABLE
	EXTERNAL	SIF_CMD_TABLE
C
C no IFF filename yet
C
	OBEY = .TRUE.
C
C start at the beginning of the line
C
	CALL BSLN
C
C read the command
C
	NOMESS = .TRUE.
	CMD = RDCOMM( SIF_CMD_TABLE )
	NOMESS = .FALSE.
C
	IF (CMD.EQ.0) THEN
	   CALL MOAN( MSG__RDCOMM )
	   CALL LSL_CMDERR
	   GOTO 9999
	ENDIF
C
C and off to decode the command
C
	GOTO (   100, 200, 250, 300, 400, 500,
     &		 600, 800, 900,1000,1100,
     &		1200,1300,1400,1500,1600,1700,
     &		1800,1900,2000,2100,2200,2300,
     &		2400,2500,2600,2700,2800,2900,
     &		3000,3010,3020 ), CMD
C
	CALL MOAN( MSG__BADCMD, CMD )
	GOTO 9999
C
C *********************************************************************
C
C The command table
C
C
C IFF=filename		choose the IFF file to output, and output it
C
100	OK = GETFILNAM( FILENAME, NAMLEN, 'LSL$IF:.IFF;0', .TRUE. )
C
	IF (.NOT.OK) THEN
	   CALL MOAN( MSG__IFFNAMERR )
	   CALL LSL_ADDMSG( OK )
	   GOTO 9999
	ELSE
	   OBEY = .FALSE.		! and output it now
	ENDIF
	GOTO 9999
C
C
C SDF=file		define SIF definition file
C
200	OK = GETFILNAM( SIFNAME, SIFLEN, 'LSL$FRT:.SDF;0', .TRUE. )
C
	IF (.NOT.OK) THEN
	   CALL MOAN( MSG__DEFNAMERR )
	   CALL LSL_ADDMSG( OK )
	   GOTO 9999
	ENDIF
	HAD_SIF = .TRUE.
C
	GOTO 9999
C
C
C FRT=file		define FRT definition file
C
250	OK = GETFILNAM( FRTNAME, FRTLEN, 'LSL$FRT:.FRT;0', .TRUE. )
C
	IF (.NOT.OK) THEN
	   CALL MOAN( MSG__FRTNAMERR )
	   CALL LSL_ADDMSG( OK )
	   GOTO 9999
	ENDIF
	HAD_FRT = .TRUE.
C
	GOTO 9999
C
C
C OUTPUT=file		output to be to a file
C
300	OK = GETFILNAM( OUTNAME, OUTLEN, '.TXT;0', .TRUE. )
C
	IF (.NOT.OK) THEN
	   CALL MOAN( MSG__OUTNAMERR )
	   CALL LSL_ADDMSG( OK )
	ELSE
	   OUTFILE = .TRUE.		! outputting text
	ENDIF
	GOTO 9999
C
C
C UNIT=number		decide which magtape unit to output to
C			- ie use unit MTA<number>
C
400	IF (GOT_MT) THEN
	   CALL MOAN( MSG__GOT_MT, 'magnetic tape unit' )
	ELSE
	   MTNAME_LEN = EXPAND('%WSMTA%N',MTNAME,INTARG(1))
	   USE_MT  = .TRUE.		! and we'll use it
	ENDIF
	GOTO 9999
C
C
C DENSITY=density	decide what density to write tape at
C
500	IF (GOT_MT) THEN
	   CALL MOAN( MSG__GOT_MT, 'magnetic tape density' )
	ELSEIF ( INTARG(1).NE.800 .AND. INTARG(1).NE.1600 ) THEN
	   CALL MOAN( MSG__BADENSE, INTARG(1), 800, 1600 )
	ELSE
	   DENSE  = INTARG(1)
	   USE_MT = .TRUE.		! and we'll use it
	ENDIF
	GOTO 9999
C
C
C RECORD=length		number of characters in each record
C			(default is 72)
C
600	IF (GOT_MT) THEN
	   CALL MOAN( MSG__GOT_MT, 'output record size' )
	ELSEIF ( INTARG(1).LT.RECMIN .OR. INTARG(1).GT.RECMAX ) THEN
	   CALL MOAN( MSG__BADRECSIZ, INTARG(1), RECMIN, RECMAX )
	ELSE
	   RECSIZ = INTARG(1)
	ENDIF
	GOTO 9999
C
C
C APPEND		start outputting data after the last file on
C			the tape (possibly having to search for it)
C
800	APPEND_MT = .TRUE.
	USE_MT    = .TRUE.	! we will use the magtape
	GOTO 9999
C
C
C NOMAGTAPE		suppress any output to the magtape
C
900	USE_MT = .FALSE.		! don't use the thing
	GOTO 9999
C
C
C HELP			give help on a command
C
1000	CALL HELP
	GOTO 9999
C
C
C SHOW			show current command status
C
1100	CALL SHOW
	GOTO 9999
C
C
C IFFSCALE		defines the scale of the IFF units
C
1200	IF (REALAR(1).LE.0.0) THEN
	   CALL MOAN( MSG__LEZERO )
	ELSE
	   IFFSCALE = REALAR(1)
	ENDIF
	GOTO 9999
C
C
C UORUNIT		defines the UOR in metres
C
1300	IF ( RDDBLE( UORUNIT ) ) THEN
	   CALL MOAN( LSL__UNEXPEOL )	! unexpected end of line
	ELSE
	   IF (UORUNIT.LE.0.0D0) THEN
	      CALL MOAN( MSG__LEZERO )
	   ELSE
	      HAD_UORUNIT = .TRUE.
	   ENDIF
	ENDIF
	GOTO 9999
C
C
C MAGTAPE		(re)enable output to the magtape
C			(defaults to the unit already chosen)
C
1400	USE_MT = .TRUE.
	IERR = READSTR( MTNAME, COLON,,, OK )
C
	IF ( OK ) THEN
	   IF (IERR.GT.0) MTNAME_LEN = IERR
	ELSE
	   IF ( RETCOD.EQ.LSL__STRTOOLONG ) THEN
	      CALL MOAN( MSG__TRUNCSTR, MTNAME(1:IERR) )
	   ELSE
	      CALL MOAN( RETCOD )
	   ENDIF
	   GOTO 9999
	ENDIF
C
	GOTO 9999
C
C
C REFLECT		reflect IFF file contents as it is read
C
1500	CALL DIAGNOSING(.TRUE.)
	REFLECT = .TRUE.		! note the fact
	GOTO 9999
C
C
C IGNORE		layer to ignore
C
1600	IGNORE = INTARG(1)		! no checks
	GOTO 9999
C
C
C DEBUG			set up a default state
C
1700	CALL DIAGNOSING(.TRUE.)
	REFLECT = .TRUE.		! reflect IFF input
	USE_MT  = .FALSE.		! don't use magtape
	OUTFILE = .TRUE.		! output to a file
	OUTNAME = 'TT:'			! the terminal
	OUTLEN  = 3
	CALL SHOW			! confirm what we've done
	GOTO 9999
C
C
C NOOUTPUT		suppress text output
C
1800	OUTFILE = .FALSE.
	GOTO 9999
C
C
C JUSTIFICATION		force a text justification
C
1900	IF ( INTARG(1).EQ.0 ) THEN
	   HAD_JUST = .FALSE.
	ELSEIF ( INTARG(1).LT.1 .OR. INTARG(1).GT.9 ) THEN
	   CALL MOAN( MSG__BADJUST )
	   GOTO 9999
	ELSE
	   HAD_JUST = .TRUE.
	   JUST = INTARG(1)
	ENDIF
	GOTO 9999
C
C
C TEXTSIZE		decide where to get the text size from
C
2000	IF ( SECMDN.EQ.0 ) THEN
	   CALL MOAN( LSL__UNEXPEOL )
	ELSEIF ( SECMDN.EQ.1 ) THEN
	   TXTSIZ = USE_SDF
	ELSEIF ( SECMDN.EQ.2 ) THEN
	   TXTSIZ = USE_PT
	ELSEIF ( SECMDN.EQ.3 ) THEN
	   TXTSIZ = USE_TH
	ELSE
	   CALL MOAN( MSG__BADTXTSZARG, SECMDN )
	ENDIF
	GOTO 9999
C
C
C TEXTLEVEL		decide where to get the text level from
C
2100	IF ( SECMDN.EQ.0 ) THEN
	   CALL MOAN( LSL__UNEXPEOL )
	ELSEIF ( SECMDN.EQ.1 ) THEN
	   TXTLEV = USE_AC
	ELSEIF ( SECMDN.EQ.2 ) THEN
	   TXTLEV = USE_SDF
	ELSEIF ( SECMDN.EQ.3 ) THEN
	   TXTLEV = USE_CATEGORY
	ELSE
	   CALL MOAN( MSG__BADTXTLVARG, SECMDN )
	ENDIF
	GOTO 9999
C
C
C NOREFLECT		don't reflect IFF file contents as it is read
C
2200	CALL DIAGNOSING(.FALSE.)
	REFLECT = .FALSE.		! note the fact
	GOTO 9999
C
C
C SHEETSCALE		defines the scale of the sheet
C
2300	IF (REALAR(1).LE.0.0) THEN
	   CALL MOAN( MSG__LEZERO )
	ELSE
	   SHTSCALE = REALAR(1)
	   HAD_SHTSCALE = .TRUE.
	ENDIF
	GOTO 9999
C
C OFFSET		defines the offset to be applied to all
C			coordinates
C
2400	OFF_X = REALAR(1)
	OFF_Y = REALAR(2)
	HAD_OFFSET = .TRUE.
	GOTO 9999
C
C DIMENSION		defines the dimensionality (2 or 3) of the data
C
2500	IF ( INTARG(1).EQ.2 .OR. INTARG(1).EQ.3 ) THEN
	   DIMENSION = INTARG(1)
	ELSE
	   CALL MOAN( MSG__BADDIM )
	ENDIF
	GOTO 9999
C
C ZSCALE		defines the scale of the IFF heights
C
2600	IF (REALAR(1).LE.0.0) THEN
	   CALL MOAN( MSG__LEZERO )
	ELSE
	   ZSCALE = REALAR(1)
	   SCALING_Z     = .TRUE.
	   MULTIPLYING_Z = .FALSE.
	ENDIF
	GOTO 9999
C
C ZOFFSET		defines the offset to be applied to all
C			heights
C
2700	OFF_Z = REALAR(1)
	HAD_ZOFFSET = .TRUE.
	GOTO 9999
C
C NOZSCALE		not scaling in Z
C
2800	SCALING_Z     = .FALSE.
	MULTIPLYING_Z = .FALSE.
	GOTO 9999
C
C ZMULTIPLY		defines the constant multiple for Z values
C
2900	IF (REALAR(1).LE.0.0) THEN
	   CALL MOAN( MSG__LEZERO )
	ELSE
	   ZSCALE = REALAR(1)
	   MULTIPLYING_Z = .TRUE.
	   SCALING_Z     = .FALSE.
	ENDIF
	GOTO 9999
C
C SRI=file		define symbol definition (IFF) file
C
3000	OK = GETFILNAM( SRINAME, SRILEN, 'LSL$FRT:.SRI;0', .TRUE. )
C
	IF (.NOT.OK) THEN
	   CALL MOAN( MSG__DEFNAMERR )
	   CALL LSL_ADDMSG( OK )
	   GOTO 9999
	ENDIF
C
C so read in the SRI file
C
	IF ( SRIINI( SRINAME(:SRILEN) ) ) GOTO 9999
C
	CALL INFORM( MSG__SRIREAD, SRINAME(:SRILEN) )
C
	GOTO 9999
C
C
C MAPDESCRIPTOR		decide what to take from a type 2 MD
C
3010	IF ( SECMDN.EQ.0 ) THEN
	   CALL MOAN( LSL__UNEXPEOL )
	ELSEIF ( SECMDN.EQ.1 ) THEN
	   OFFSET_FROM_MD = .TRUE.
	ELSE
	   CALL MOAN( MSG__BADMDARG, SECMDN )
	ENDIF
	GOTO 9999
C
C INPUT_LIST=file	read the files to be output from another file
C
3020	OK = GETFILNAM( INLNAME, INLLEN, '.OPT;0', .TRUE. )
C
	IF (.NOT.OK) THEN
	   CALL MOAN( MSG__DEFNAMERR )
	   CALL LSL_ADDMSG( OK )
	   GOTO 9999
	ENDIF
C
C so open the input list
C
	OK = FLROPN( INLUNIT, INLNAME(:INLLEN), IERR )
	IF ( .NOT.OK ) THEN
	   CALL MOAN( MSG__OPENLIST, INLNAME(:INLLEN) )
	   CALL LSL_ADDMSG( OK )
	   IF ( OK.EQ.LSL__SYSOPEN ) CALL LSL_ADDMSG(IERR)
	   GOTO 9999
	ELSE
	   USE_INPUT_LIST = .TRUE.
	   CALL INFORM( MSG__READLIST, INLNAME(:INLLEN) )
	ENDIF
C
	GOTO 9999
C
C *********************************************************************
C
9999	RETURN
	END
