C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-12-21 16:05:46.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE START( IS_TEXT, LEVEL, FONT,
     &			  STYLE, WEIGHT, COLOUR,
     &			  HAD_HEIGHT, HEIGHT, DIM )
C
***	IDENT	11DE89
***	MODULE	START
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 25 January 1985
C
C This routine starts off a 'feature' in the SIF file - it outputs
C all the 'active' data required before any points are needed
C
	IMPLICIT NONE
C
	INCLUDE 'HERE:CONTROL.CMN'
C
C
C Arguments:
C
	LOGICAL 	IS_TEXT		! is this a text feature?
	INTEGER		LEVEL		! level of the feature
	INTEGER		FONT		! text font (if required)
	INTEGER		STYLE		! line style
	INTEGER		WEIGHT		! line weight
	INTEGER		COLOUR		! line colour or code
	LOGICAL		HAD_HEIGHT	! true if had height AC
	REAL		HEIGHT		! the height (if any)
	INTEGER		DIM		! is data 2 or 3d?
C
C common file - state variables
C these record our current active status, so that we can decide not
C to set things again if they're already at the correct value
C
***	COMMON/HERE:START/
C
C *********************************************************************
C and now output the data to the SIF file - in general, only output
C an active characteristic command if the characteristic has changed
C
C if we have changed level, output the level number
C
	IF ( LEVEL.NE.OLD_LEVEL ) THEN
	   CALL SIFOVR( LEVEL )
	   OLD_LEVEL = LEVEL
	ENDIF
C
C if we are doing 2d data, then we might want to set up the height
C for this next item
C
	IF ( DIM.EQ.2 ) THEN
C
C	 we have 2-dimensional data - do we want to set an active height?
C
	   IF ( HAD_HEIGHT ) THEN
C
C	    yes - if we don't have a current active height, or if it is
C	    not the right value, then output our height
C
	      IF ( .NOT.HEIGHT_IS_SET .OR. HEIGHT.NE.OLD_HEIGHT ) THEN
		 CALL SIFACZ( .TRUE., HEIGHT, HEIGHT )
		 OLD_HEIGHT    = HEIGHT
		 HEIGHT_IS_SET = .TRUE.
	      ENDIF
C
	   ELSEIF ( HEIGHT_IS_SET ) THEN
C
C	 we don't have a height for this feature, but there is one current
C	 - so we must unset it again
C
	      CALL SIFACZ( .FALSE., 0.0, 0.0 )
	      HEIGHT_IS_SET = .FALSE.
C
	   ENDIF
	ENDIF
C
C next we might have a font - we don't worry about whether we have the
C correct font set up already - we assume that texts are relatively
C rare, and just take the simple course
C
	IF ( IS_TEXT ) THEN
	   CALL SIFFNT( FONT )
	ENDIF
C
C and the line/area characteristics
C - again, only output a new value if the old value isn't correct
C
C SCITEX option requires ACZ set. Line colour is is not set
C
	IF (HAD_SCITEX) THEN
	   IF ( STYLE.NE.OLD_STYLE ) THEN
	      CALL SIFLAC( 1, STYLE )		! line style
	      OLD_STYLE = STYLE
	   ENDIF
C
	   IF ( WEIGHT.NE.OLD_WEIGHT ) THEN
	      CALL SIFLAC( 2, WEIGHT )		! line weight
	      OLD_WEIGHT = WEIGHT
	   ENDIF
	ELSE
	   IF ( STYLE.NE.OLD_STYLE ) THEN
	      CALL SIFLAC( 1, STYLE )		! line style
	      OLD_STYLE = STYLE
	   ENDIF
C
	   IF ( WEIGHT.NE.OLD_WEIGHT ) THEN
	      CALL SIFLAC( 2, WEIGHT )		! line weight
	      OLD_WEIGHT = WEIGHT
	   ENDIF
C
	   IF ( COLOUR.NE.OLD_COLOUR ) THEN
	      CALL SIFLAC( 3, COLOUR )		! line colour
	      OLD_COLOUR = COLOUR
	   ENDIF
	ENDIF
C
C and that is all we attempt to do
C
	RETURN
	END
