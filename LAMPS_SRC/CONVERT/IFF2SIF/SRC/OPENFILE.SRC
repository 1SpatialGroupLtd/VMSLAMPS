	LOGICAL FUNCTION OPENFILE
C
***	IDENT	07OC86
***	MODULE	OPENFILE
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 4 February 1985
C
C This function opens any text files that are required,
C and deals with them. It returns FALSE for success, TRUE for
C failure
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'
C
***	COMMON/HERE:SIF/
***	COMMON/HERE:SIFFILE/
***	COMMON/HERE:SIFCOM/
***	COMMON/LSL$CMNLSL:FILENAME/
C
C functions
C
	LOGICAL		PUTFLN		! parse a filename
	LOGICAL		FLWOPN	  	! open a file for write
	LOGICAL		SIFINI		! read a SIF definition file
	LOGICAL		FRTINI		! read a FRT definition file
C
C workspace
C
	LOGICAL		OK
	INTEGER		IERR
C
C assume the worst
C
	OPENFILE = .TRUE.
C
C now, have new SIF and FRT file names been requested?
C
	IF ( HAD_SIF .AND. .NOT.HAD_FRT ) THEN
C
C	 build an FRT file name from the SIF file name
C
	   CALL INFORM( MSG__DEFFILE, SIFNAME(1:SIFLEN) )
	   OK = PUTFLN( SIFNAME(1:SIFLEN) )
	   IF ( .NOT.OK ) THEN
	      CALL MOAN( MSG__PARSE, SIFNAME(1:SIFLEN) )
	      CALL LSL_ADDMSG(OK)
	      GOTO 9999
	   ENDIF
C
	   HAD_EXT = .TRUE.
	   LEN_EXT = 3
	   STR_EXT = 'FRT'
	   CALL EXPFLN( FRTNAME, FRTLEN )
	   CALL INFORM( MSG__ASSUME, 'FRT', FRTNAME(1:FRTLEN) )
	   HAD_FRT = .TRUE.
C
	ELSEIF ( .NOT.HAD_SIF .AND. HAD_FRT ) THEN
C
C	 build a SIF file name from the FRT file name
C
	   CALL INFORM( MSG__FRTFILE, FRTNAME(1:FRTLEN) )
	   OK = PUTFLN( FRTNAME(1:FRTLEN) )
	   IF ( .NOT.OK ) THEN
	      CALL MOAN( MSG__PARSE, FRTNAME(1:FRTLEN) )
	      CALL LSL_ADDMSG(OK)
	      GOTO 9999
	   ENDIF
C
	   HAD_EXT = .TRUE.
	   LEN_EXT = 3
	   STR_EXT = 'SDF'
	   CALL EXPFLN( SIFNAME, SIFLEN )
	   CALL INFORM( MSG__ASSUME, 'SIF', SIFNAME(1:SIFLEN) )
	   HAD_SIF = .TRUE.
C
	ELSEIF ( HAD_FRT .AND. HAD_SIF ) THEN
C
C	 we have both filenames explicitly
C
	   CALL INFORM( MSG__DEFFILE, SIFNAME(1:SIFLEN) )
	   CALL INFORM( MSG__FRTFILE, FRTNAME(1:FRTLEN) )
C
	ELSEIF ( READ_FRT .AND. READ_SIF ) THEN
C
C	 we have read the files earlier, and new ones have not
C	 been asked for - do we need to reread the SDF ?
C
C	 if the SDF used millimetres in its size definitions (which
C	 we assume it did if it gave the UNITS MM_ON_SHEET command)
C	 and the user has changed the sheet scale on us, then we should
C	 read the SDF again, as the transformation to meters on the
C	 ground has changed.
C
	   IF ( .NOT.(USED_MM.AND.HAD_SHTSCALE) ) THEN
C
C	    we don't need to reread, so leave immediately
C
	      GOTO 200			! still a success
	   ENDIF
C
	ELSE
C
C	 no files have been specified - we need some to start
C
	   CALL MOAN( MSG__NOFRTSIF )
	   GOTO 9999
C
	ENDIF
C
C so we have the filenames - use them
C
	IF ( SIFINI( SIFNAME(1:SIFLEN), SIFUNIT ) ) THEN
	   READ_SIF = .FALSE.
	   GOTO 9999
	ELSE
	   READ_SIF = .TRUE.		! read it now
	   HAD_SIF  = .FALSE.		! no new one specified
	ENDIF
C
	IF ( FRTINI( FRTNAME(1:FRTLEN), FRTUNIT ) ) THEN
	   READ_FRT = .FALSE.
	   GOTO 9999
	ELSE
	   READ_FRT = .TRUE.		! and this also
	   HAD_FRT  = .FALSE.		! no new one specified
	ENDIF
C
C now, do we have an output file to open?
C
200	IF ( OUTFILE ) THEN
C
	   OK = FLWOPN( OUTUNIT, OUTNAME(1:OUTLEN), IERR )
C
	   IF ( .NOT.OK ) THEN
	      CALL MOAN( MSG__OUTOPEN, OUTNAME(1:OUTLEN) )
	      CALL LSL_ADDMSG(OK)
	      IF ( OK.EQ.LSL__SYSOPEN ) CALL LSL_ADDMSG(IERR)
	      GOTO 9999
	   ENDIF
C
	   CALL INFORM( MSG__OUTFILE, OUTNAME(1:OUTLEN) )
C
	   OUTFILE_OPEN = .TRUE.	! it's open now
C
	ENDIF
C
C thus we attain success
C
9000	OPENFILE = .FALSE.
C
9999	RETURN
	END
                                                             
