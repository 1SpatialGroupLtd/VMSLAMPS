C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-05-25 16:24:42.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE CIRCLE( DIM, NPTS, STBUF )
C
***	IDENT	25MY94
***	MODULE	CIRCLE
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 31 January 1985
C
C Routine to output a circle
C
	IMPLICIT NONE
C
C Arguments
C
	INTEGER		DIM		! dimension of the data
	INTEGER*2	NPTS		! size of STBUF
	REAL		STBUF(DIM,NPTS)	! defining points
C
***	COMMON/HERE:SIF/
***	COMMON/HERE:SIFCOM/
C
C workspace
C
	REAL		RADIUS		! radius of circle
	REAL		CENTRE(3)	! centre of circle
C
C function used
C
	LOGICAL		CIRCEN		! calculate centre & radius
C
C a circle - check that we have our three defining points
C
	IF ( NPTS.LT.3 ) THEN
	   CALL MOAN( MSG__NEEDTHREE, FSN )
	   GOTO 9999		  		! give up
	ENDIF
C
C Calculate the centre and radius - we assume that the Z coordinate
C (if any) is constant for the three points, since we don't support
C 'slanted' circles (although SIF can do so)
C
	IF ( CIRCEN( STBUF(1,1), STBUF(1,2), STBUF(1,3),
     &		     CENTRE, RADIUS ) ) THEN
	   CALL MOAN( MSG__ABANDONED, FSN )
	   GOTO 9999
	ENDIF
C
C check for a stupid circle
C
	IF (RADIUS.LE.0.0) THEN
	   CALL MOAN( MSG__NOCIRCLE, RADIUS, FSN )
	   GOTO 9999
	ENDIF
C
C check our assumption about a common Z value
C
	IF ( DIM.EQ.3 ) THEN
	   IF ( STBUF(3,1).NE.STBUF(3,2) .OR.
     &		STBUF(3,2).NE.STBUF(3,3) ) THEN
	      CALL MOAN( MSG__CIRSLANT, FSN )	! slanted circle
	      GOTO 9999
	   ENDIF
	ELSE
	   CENTRE(3) = STBUF(3,1)
	ENDIF
C
C Check if there were ACs in this feature, if so output the IDE and 
C ASV commands
C
	IF (HAD_AC) THEN
	   CALL SIFIDE(FSN)
	   CALL SIFASV(FSN)
	   HAD_AC = .FALSE.
	ENDIF
C
	CALL SIFCIR( DIM, CENTRE, STBUF(1,1), STBUF(1,2) )
C
9999	RETURN
	END
