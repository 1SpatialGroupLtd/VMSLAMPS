C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-09-26 10:16:34.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE POINTS( STRING, DIM, NPTS, PTS )
C
***	IDENT	26SE88
***	MODULE	POINTS
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 5 February 1985
C
CMOD	26-Sep-1988, mod 678
CMOD	When checking ROOM_FOR, always leave room for an extra comma
CMOD	at the end of the record
C
C This routine outputs the given points neatly, line by line,
C and also handles starting new strings (with STRING) whenever
C there are 101 points output...
C
	IMPLICIT NONE
C
C Arguments
C
	CHARACTER*(*)	STRING		! the 'new string' command
	INTEGER		DIM		! dimension of the data
	INTEGER*2	NPTS		! number of points
	REAL		PTS(DIM,NPTS)	! and the points themselves
C
C common blocks
C
***	COMMON/HERE:SIF/
***	COMMON/HERE:POINTS/		! for PTS_CNT
C
C useful parameters
C
	INTEGER		 X,Y,Z		! for getting at PTS with
	INTEGER		 TRIPLE_MAX	! and again
C
	PARAMETER	(X=1,Y=2,Z=3)
	PARAMETER	(TRIPLE_MAX= 3*(COORD_MAX+1) )
C
C functions
C
	INTEGER		UORX,UORY,UORZ	! transform map coord to UORs
	INTEGER*2	EXPAND		! expand a string
C
C workspace
C
	INTEGER			THIS	! DO loop variable
	CHARACTER*(TRIPLE_MAX)	T$STR	! temp string
	INTEGER*2		T$LEN	! its length
C
C OWN variables
C
	CHARACTER*(TRIPLE_MAX)	OLD$STR	! copy of temp string
	INTEGER*2		OLD$LEN	! copy of its length
	SAVE		OLD$STR,OLD$LEN	! and remember them
C
C *********************************************************************
C work through the points, adding them to the output
C - we start with the first point of our ST/ZS, of course
C
	THIS = 1
C
C *********************************************************************
C count the next point...
C
500	PTS_CNT = PTS_CNT+1
C
C 1) before starting a point string, we must output the appropriate
C    SIF command, which is in STRING
C
C 2) point strings are limited to PTSMAX points, so after the PTSMAX'th
C    point we must start a new string, with the command in STRING. Note
C    that (1) is effectively a special case of this
C
C 3) if we are starting a new point string as in (2), then we must repeat
C    the last point of the previous string as our first point, to ensure
C    that we have connectivity
C
	IF ( MOD(PTS_CNT,PTSMAX).EQ.1 ) THEN
C
	   IF ( PTS_CNT.EQ.1 ) THEN		! IF very first point
	      IF (NEED_SIFOUT) CALL SIFOUT	!    flush if need to
 	      CALL EXPAND(STRING)		!    expand the command
	   ELSE					! OR start new string
	      CALL SIFOUT			!    flush any data
 	      CALL EXPAND(STRING)		!    expand the command
 	      CALL APPEND(OLD$STR(1:OLD$LEN))	!    then add last point
	      PTS_CNT = PTS_CNT+1		!    & count it !
	   ENDIF
C
	ENDIF
C
C 4) if we are not starting a new string, but are outputting points in
C    an already existing one, then we must output a comma after the
C    previous point
C
	IF ( PTS_CNT.NE.1 ) CALL APPEND(',')	! continuation comma
C
C ---------------------------------------------------------------------
C so we can deal with the point itself...
C expand the next point (2 or 3 coordinates) into a temporary string
C
	IF ( DIM.EQ.2 ) THEN
	   T$LEN = EXPAND('%WS%^L%U%N,%U%N', T$STR,
     &	       				     UORX(PTS(X,THIS)),
     &					     UORY(PTS(Y,THIS)) )
	ELSE
	   T$LEN = EXPAND('%WS%^L%U%N,%U%N,%U%N', T$STR,
     &						  UORX(PTS(X,THIS)),
     &						  UORY(PTS(Y,THIS)),
     &						  UORZ(PTS(Z,THIS)) )
	ENDIF
C
C is there room to add that point to the current line?
C - if not, then CHECK_ROOM will start off a new line for us
C
C (NOTE that we add 1 to the length checked, so that there is always
C	room for a comma at the end of the line. Every so often this
C	will presumably cause us to start a new line for the last
C	coordinate of a string, when we needn't, but I don't think
C	that matters too much)
C
	CALL CHECK_ROOM( T$LEN + 1 )
C
C and append the new point to the end of the current line
C
 	CALL APPEND('%S', T$STR(1:T$LEN) )
C
C ---------------------------------------------------------------------
C and if this is the PTSMAX'th point of a string, then remember it for
C starting the next string with
C
	IF ( MOD(PTS_CNT,PTSMAX).EQ.0 ) THEN
	   OLD$STR = T$STR(1:T$LEN)
	   OLD$LEN = T$LEN
	ENDIF
C
C do we have mpre points to output from this buffer?
C
	IF ( THIS.LT.NPTS ) THEN
	   THIS = THIS+1		! next point from buffer
	   GOTO 500			! go and output it
	ENDIF
C
C *********************************************************************
C so we have processed all of the points from PTS
C - note that we will need to call SIFOUT to output the (last) record
C
	NEED_SIFOUT = .TRUE.
C
C and return
C
	RETURN
	END
