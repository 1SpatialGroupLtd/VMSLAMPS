	SUBROUTINE SHOW
C
***	IDENT	25NO87
***	MODULE	SHOW
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 6 February 1985
C
C Show the current command status
C
	IMPLICIT NONE
C
***	COMMON/HERE:SIF/
***	COMMON/HERE:SIFMT/
***	COMMON/HERE:SIFFILE/
***	COMMON/HERE:SIFCOM/
C
C functions
C
	INTEGER		UORX,UORY,UORZ
	INTEGER		CONVERT
C
C workspace
C
	REAL*8		SMALL, LARGE
	INTEGER		OFF1,OFF2
C
C-----------------------------------------------------------------------
C
	IF ( HAD_SIF .OR. READ_SIF ) THEN
	   CALL INFORM( MSG__DEFFILE, SIFNAME(1:SIFLEN) )
	ENDIF
C
	IF ( HAD_FRT .OR. READ_FRT ) THEN
	   CALL INFORM( MSG__FRTFILE, FRTNAME(1:FRTLEN) )
	ENDIF
C
	IF ( OUTFILE ) THEN
	   CALL INFORM( MSG__OUTFILE, OUTNAME(1:OUTLEN) )
	ENDIF
C
	IF ( GOT_MT ) THEN
	   CALL INFORM( MSG__MTINITED, MTNAME(1:MTNAME_LEN), DENSE )
	ELSEIF ( USE_MT .AND. .NOT.GOT_MT ) THEN
	   CALL INFORM( MSG__MTINUSE, MTNAME(1:MTNAME_LEN), DENSE )
	   IF ( APPEND_MT ) THEN
	      CALL INFORM(MSG__APPEND, 'Data will be appended to tape' )
	   ELSE
	      CALL INFORM(MSG__APPEND, 'Tape will be rewound')
	   ENDIF
	ENDIF
C
	IF ( .NOT.USE_MT ) THEN
	   CALL INFORM( MSG__MTSUPPRESS )
	ENDIF
C
	CALL INFORM( MSG__RECSIZE, RECSIZ )
C
	CALL INFORM( MSG__DIMENSION, DIMENSION )
C
C-----------------------------------------------------------------------
C
	CALL INFORM( MSG__BLANK )
C
	IF ( HAD_UORUNIT ) THEN
	   CALL INFORM( MSG__UORUNITIS, UORUNIT )
	   CALL INFORM( MSG__BLANK )
	ENDIF
C
C for the scales, etc, if they appear to be integers, output them as such,
C otherwise output them as reals
C
	IF ( (IFFSCALE-NINT(IFFSCALE)).NE.0.0 ) THEN
	   CALL INFORM( MSG__RIFFSCALEIS, IFFSCALE )
	ELSE
	   CALL INFORM( MSG__IIFFSCALEIS, NINT(IFFSCALE) )
	ENDIF
C
	IF ( HAD_SHTSCALE ) THEN
	   IF ( (SHTSCALE-NINT(SHTSCALE)).NE.0.0) THEN
	      CALL INFORM( MSG__RSHTSCALEIS, SHTSCALE )
	   ELSE
	      CALL INFORM( MSG__ISHTSCALEIS, NINT(SHTSCALE) )
	   ENDIF
	ELSE
	   CALL MOAN( MSG__NOSHTSCALE )
	ENDIF
C
	CALL SIFMULT
C
C note that we can't use UORx to calculate our values, as that
C will add in offsets (which will give us a different result)
C
	IF (HAD_FACTOR) THEN
	   CALL INFORM( MSG__FACTORIS, FACTOR )
	   SMALL = (NOUGHT*UORUNIT)/IFFSCALE
	   LARGE = (MAXINT*UORUNIT)/IFFSCALE
	   CALL INFORM( MSG__MAXRANGE, SMALL, LARGE )
	ENDIF
C
	IF (OFFSET_FROM_MD) THEN
	   CALL INFORM( MSG__OFFSETMD )
	ELSEIF (HAD_OFFSET) THEN
	   CALL INFORM( MSG__OFFSETMAP, OFF_X, OFF_Y )
	   OFF1 = NINT(OFF_X*IFFSCALE/UORUNIT)
	   OFF2 = NINT(OFF_Y*IFFSCALE/UORUNIT)
	   CALL INFORM( MSG__OFFSETUOR, OFF1, OFF2 )
	ENDIF
C
C-----------------------------------------------------------------------
C
	CALL INFORM( MSG__BLANK )
C
	IF ( SCALING_Z.OR.MULTIPLYING_Z ) THEN
	   CALL INFORM( MSG__SCALINGZ )
	   IF ( MULTIPLYING_Z .OR. (SCALING_Z.AND.HAD_FACTOR) ) THEN
	      CALL INFORM( MSG__ZFACTORIS, ZFACTOR )
	      IF ( SCALING_Z ) THEN
	         SMALL = (NOUGHT*UORUNIT)/ZSCALE
	         LARGE = (MAXINT*UORUNIT)/ZSCALE
	      ELSE
	         SMALL = NOUGHT/ZSCALE
	         LARGE = MAXINT/ZSCALE
	      ENDIF
	      CALL INFORM( MSG__ZMAXRANGE, SMALL, LARGE )
	   ENDIF
	ELSE
	   CALL INFORM( MSG__NOTSCALINGZ )
	ENDIF
C
	IF (HAD_ZOFFSET) THEN
	   CALL INFORM( MSG__ZOFFSETMAP, OFF_Z )
	   OFF1 = NINT(OFF_Z*IFFSCALE/UORUNIT)
	   CALL INFORM( MSG__ZOFFSETUOR, OFF1 )
	ENDIF
C
C-----------------------------------------------------------------------
C
	CALL INFORM( MSG__BLANK )
C
	CALL INFORM( MSG__IGNLAYER, IGNORE )
C
	IF (HAD_JUST) THEN
	   CALL INFORM( MSG__JUSTIS, JUST )
	ENDIF
C
	IF ( TXTSIZ.EQ.USE_TH ) THEN
	   CALL INFORM( MSG__TXTUSETH )
	ELSEIF ( TXTSIZ.EQ.USE_PT ) THEN
	   CALL INFORM( MSG__TXTUSEPT )
	ENDIF
C
	IF ( TXTLEV.EQ.USE_AC ) THEN
	   CALL INFORM( MSG__TXTUSEAC )
	ELSEIF ( TXTLEV.EQ.USE_CATEGORY ) THEN
	   CALL INFORM( MSG__TXTUSECAT )
	ENDIF
C
	IF (REFLECT) THEN
	   CALL INFORM( MSG__REFLECT )
	ENDIF
C
	RETURN
	END
                                                       
