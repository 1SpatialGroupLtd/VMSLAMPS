C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-10-07 12:37:54.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION START_MT
C
***	IDENT	07OC86
***	MODULE	START_MT
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 4 February 1985
C
C Start up a magtape on the tape drive
C Returns TRUE if it fails, FALSE if tape ready for use
C
	IMPLICIT NONE
C
	INCLUDE		'LSL$CMNLSL:LSLLIBMSG.PAR'
C
C common blocks
C
***	COMMON/HERE:SIF/
***	COMMON/HERE:SIFMT/
***	COMMON/LSL$CMNLSL:MTOVCM/
C
C workspace
C
	LOGICAL		OK
	INTEGER		TAPEMK_CNT	! count of tapemarks
C
	INTEGER		LENGTH		! temporary length read
C
C functions called
C
	LOGICAL		MTONIT		! initialise magtape
	LOGICAL		MTORDB		! read a block
	LOGICAL		MTOBCK		! go back one block
C
C
C assume failure
C
	START_MT = .TRUE.
C
C now, initialise the magtape - we will rewind it as well
C MTNAME is the magtape unit to use, DENSE if 800 or 1600,
C and the last argument forces a rewind during initialisation
C
	OK = MTONIT( MTNAME(1:MTNAME_LEN), DENSE.EQ.1600, .FALSE. )
	IF ( .NOT.OK ) THEN
	   CALL MOAN( MSG__MTINITERR, MTNAME(1:MTNAME_LEN), DENSE )
	   CALL LSL_ADDMSG(OK)
	   IF ( OK.EQ.LSL__SYSERR ) CALL LSL_ADDMSG(MTOERR)
	   GOTO 9999
	ELSE
	   GOT_MT = .TRUE.	! tape is now initialised
	   CALL INFORM( MSG__MTINITED, MTNAME(1:MTNAME_LEN), DENSE )
	   BLKCNT = 0		! no blocks output yet
	   BYTCNT = 0		! no bytes in the output buffer yet
	ENDIF
C
C and should we fiddle with the magtape position?
C if they have asked us to APPEND_MT, then we have to search for the
C end of the last set of files - in other words we must look for
C a double tapemark
C
	IF ( APPEND_MT ) THEN
C
	   TAPEMK_CNT = 0		! none found yet
C
500	   OK = MTORDB( BYTBUF, BUFSIZ, LENGTH )
	   BLKCNT = BLKCNT+1		! count the new block
C
	   IF ( .NOT.OK ) THEN
	      IF (OK.EQ.LSL__EOF) THEN
	         TAPEMK_CNT = TAPEMK_CNT+1	! count a tapemark
	      ELSE
	         CALL MOAN( MSG__MTOREAD, BLKCNT, MTNAME(1:MTNAME_LEN),
     &					 DENSE )
	         CALL LSL_ADDMSG(OK)
		 IF ( OK.EQ.LSL__SYSERR ) CALL LSL_ADDMSG(MTOERR)
	         GOTO 9999			! give up
	      ENDIF
	   ELSE
	      TAPEMK_CNT = 0		! reset it on a non-tapemark
	   ENDIF
C
C	 have we found our two tapemarks yet?
C	 if we have, then unread one of them, ready to overwrite it
C
	   IF ( TAPEMK_CNT.EQ.2 ) THEN
C
	      OK = MTOBCK()
	      BLKCNT = BLKCNT-1		! lose one block from our count
C
	      IF ( .NOT.OK .AND. OK.NE.LSL__EOF ) THEN
	         CALL MOAN( MSG__MTOBCK, BLKCNT, MTNAME(1:MTNAME_LEN),
     &					DENSE )
	         CALL LSL_ADDMSG(OK)
		 IF ( OK.EQ.LSL__SYSERR ) CALL LSL_ADDMSG(MTOERR)
	         GOTO 9999		! give up
	      ENDIF
C
	   ELSE
	      GOTO 500			! read the next block
	   ENDIF
C
	ENDIF
C
C if we reach here, then we have succeeded
C
	START_MT = .FALSE.
C
9999	RETURN			! failure joins us here
	END
