C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-12-12 16:59:18.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION EXP_HANDLER(SIGARG, MCHARG)
C
***	IDENT 11DE89
***	MODULE EXP_HANDLER
C
	IMPLICIT NONE
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England
C Author: John Cadogan
C
C Condition handler for LIB$FIND_IMAGE_SYMBOL, which otherwise signals
C its errors. If image is a non-shareable executable image
C LIB$FIND_IMAGE_SYMBOL signals two errors - an RMS error, followed by
C LIB$_KEYNOTFOU. This is an attempt to catch the first one
C
C arguments:
	INTEGER*4	SIGARG(*)
	INTEGER*4	MCHARG(5)
C
	INCLUDE '($LIBDEF)'
	INCLUDE '($SSDEF)'
C
C functions called
	INTEGER	LIB$MATCH_COND
	INTEGER	SYS$UNWIND
C
C workspace
	INTEGER	I
C
C do we recognise the error ?
C
	I=LIB$MATCH_COND(SIGARG(2),LIB$_KEYNOTFOU,SS$_UNWIND,
     &	                  LIB$_EOMWARN)
C
C anything we are happy about (EOMWARN), no message and continue
	IF (I.GE.3) THEN
	   EXP_HANDLER = SS$_CONTINUE
	   GOTO 1000
	ENDIF
C
	GOTO (900,1000),I
C
C any condition, apart from KEYNOTFOU
C
C if it is something we don't recognise, then write message and unwind
	SIGARG(1) = SIGARG(1) - 2
	CALL SYS$PUTMSG(SIGARG,,,)
	SIGARG(1) = SIGARG(1) + 2		
C
C write a blank line after the message to avoid the message being
C overwritten by the next line of output
	CALL WRITEF
C
C KEYNOTFOUnd - 
C unwind to our establisher, returning the condition value in R0
C
C MCHARG(4) is where R0 will be restored from
C MCHARG(3) is the depth from where we were established to where
C the condition occurred.
C This is like LIB$SIG_TO_RET but unwinds one less frame
900	MCHARG(4) = SIGARG(2)
	EXP_HANDLER = SYS$UNWIND( MCHARG(3), )
C
1000	RETURN
	END
