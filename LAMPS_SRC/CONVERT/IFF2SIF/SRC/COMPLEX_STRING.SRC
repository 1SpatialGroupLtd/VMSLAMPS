C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-11-20 18:37:32.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION COMPLEX_STRING( ENTRY, START_COUNT )
C
***	IDENT	20NO86
***	MODULE	COMPLEX_STRING
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 24 October 1986
C
C This function scans the STs or ZSs for a feature, working out how
C many continuous points there are from this entry (inclusive).
C It will stop at an ST/ZS which starts with an invisible line -
C that entry will not be included in the point count.
C It will IFFPKE back to the starting entry when it has finished,
C and return FALSE if there are 101 or fewer points in the span,
C TRUE if the span is "complex"
C
	IMPLICIT NONE
C
C Arguments:
C
	INTEGER*2	ENTRY		! 'ST' or 'ZS'
	INTEGER*2	START_COUNT	! how many points in 1st ST/ZS
C
C common blocks required
C
***	COMMON/LSL$CMNIFF:IFFHAN/	! for LPOSH
***	COMMON/HERE:SIF/
C
C workspace
C
	INTEGER*2	STPTR		! number of points
	INTEGER*2	IENDS	  	! pen up/down flag
	INTEGER	   	POSITION
C
	INTEGER*2	IECODE		! entry type
	INTEGER*2	IELEN		! entry length
C
	INTEGER		TOTAL		! accumulation of points
C
C *********************************************************************
C check the number of points in this ST/ZS - if that is more than
C PTSMAX, then we already need a 'complex' string
C
	IF ( START_COUNT.GT.PTSMAX ) THEN
	   COMPLEX_STRING = .TRUE.
	   GOTO 9000
	ELSE
	   COMPLEX_STRING = .FALSE.	! assume that it is short
	ENDIF
C
C remember which entry we are starting at
C
	POSITION = LPOSH
C
C and prime the total count
C
	TOTAL = START_COUNT
C
C get the next entry
C
2000	CALL IFFNXT( IECODE,IELEN )
C
C is it the end of file, or a non-ST?
C - whatever, don't complain, just finish off
C
	IF ( IELEN.EQ.-1 .OR.
     &	    (IECODE.NE.'ST'.AND.IECODE.NE.'ZS') ) GOTO 8000
C
C so get the number of points in it
C
	CALL EIHRS( STPTR,IENDS )
C
C does it start with an invisible line?
C - if it does, then that's our finish
C
	IF ( (IENDS.AND.1).EQ.0 ) GOTO 8000
C
C otherwise, add the count of points to our total
C
	TOTAL = TOTAL+STPTR
C
C if that is greater than PTSMAX, then we have a 'complex' string,
C and can return with that information, otherwise we must look at
C the next entry
C
	IF ( TOTAL.GT.PTSMAX ) THEN
	   COMPLEX_STRING = .TRUE.
	   GOTO 8000
	ELSE
	   GOTO 2000
	ENDIF
C
C *********************************************************************
C finished - return to the initial entry
C
8000	CALL IFFPKE( IECODE, IELEN, POSITION )
C
C if an error happens, there's not much we can do apart from
C attempting to continue
C
	IF ( IECODE.NE.ENTRY .OR. IELEN.EQ.-1 ) THEN
	   CALL MOAN( MSG__BADSTPTR )
	ENDIF
C
C *********************************************************************
C and that's all we do
C
9000	RETURN
	END                        
