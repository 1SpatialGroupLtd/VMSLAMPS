	SUBROUTINE USE_FS( FSARR, IS_LINEAR, STRING_TYPE )
C
***	IDENT	20MR92
***	MODULE	USE_FS
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 3 April 1985 - taken from OUTPUT
C
C This routine accepts the FS entry, and gets the relevant type data
C set up in /SIFCOM/
C
	IMPLICIT NONE
C
C arguments
C
	INTEGER*2	FSARR(4)	! FS entry data
	LOGICAL		IS_LINEAR	! is it linear?
	CHARACTER*2	STRING_TYPE	! if so, what sort?
C
C common blocks required
C
***	COMMON/HERE:SIF/
***	COMMON/HERE:SIFCOM/
***	COMMON/HERE:CONTROL/
***	COMMON/LSL$CMNFRT:FRTCOM/
***	COMMON/LSL$CMNIFF:IFFHAN/
C
C functions used
C
	INTEGER		SIFFND		! find a  SIF feature code
	INTEGER		FRTFND		! find an FRT feature code
C
C the text category number
C
	INTEGER		CATEGORY
C
C some data for naming things...
C
	CHARACTER*6	STN(MAXTYP)	! STN = SIF Type Name
	INTEGER		STL(MAXTYP)	! STL = SIF Type Length
C
	DATA	STN(LINE_TYP),  STL(LINE_TYP)   /'line',  4/
	DATA	STN(SHAPE_TYP), STL(SHAPE_TYP)  /'shape', 5/
	DATA	STN(HOLE_TYP),  STL(HOLE_TYP)   /'hole',  4/
	DATA	STN(CURVE_TYP), STL(CURVE_TYP)  /'curve', 5/
	DATA	STN(TEXT_TYP),  STL(TEXT_TYP)   /'text',  4/
	DATA	STN(CELL_TYP),  STL(CELL_TYP)   /'cell',  4/
	DATA	STN(CIRCLE_TYP),STL(CIRCLE_TYP) /'circle',6/
	DATA	STN(ARC_TYP),   STL(ARC_TYP)    /'arc',   3/
C
	CHARACTER*17	FTN(12)		! FTN = FRT Type Name
	INTEGER		FTL(12)		! FTL = FRT Type Length
C
	DATA	FTN(LINTYP),  FTL(LINTYP)   /'line',		  4/
	DATA	FTN(CLOTYP),  FTL(CLOTYP)   /'clockwise arc',    13/
	DATA	FTN(ANTTYP),  FTL(ANTTYP)   /'anticlockwise arc',17/
	DATA	FTN(CIRTYP),  FTL(CIRTYP)   /'circumcircle arc', 16/
	DATA	FTN(FULTYP),  FTL(FULTYP)   /'full circumcircle',17/
	DATA	FTN(CURTYP),  FTL(CURTYP)   /'curve',		  5/
	DATA	FTN(UNOTYP),  FTL(UNOTYP)   /'unoriented symbol',17/
	DATA	FTN(ORITYP),  FTL(ORITYP)   /'oriented symbol',  15/
	DATA	FTN(SCATYP),  FTL(SCATYP)   /'scaled symbol',    13/
	DATA	FTN(TEXTYP),  FTL(TEXTYP)   /'text',		  4/
	DATA	FTN(STRTYP),  FTL(STRTYP)   /'symbol string',    13/
	DATA	FTN(ARETYP),  FTL(ARETYP)   /'area',		  4/
C
C *********************************************************************
C
C FS - feature status - includes feature code
C
C	data in feature status is:
C
C			(1) feature code
C			(2) status bits
C			(3) text control:
C					  0-3 posn,
C					  4-5 style,
C				  	  6-11 name category,
C			    type control:
C					 15-16 text/symbol
C *********************************************************************
C
	FORCED = .FALSE.		! haven't forced to line
C
C find the feature code in the definition file - if it is not
C to be found, then force it to be output as a line on the error level
C
	IF ( SIFFND(FSARR(1)) ) THEN
    	   CALL FORCE_LINE( FSARR(1) )		! force to a line
	   GOTO 9000				! and give up on it
	ENDIF
C
C and now find it in the FRT file - if it is not to be found
C then complain as above
C
	IF ( FRTFND(FSARR(1)) ) THEN
    	   CALL FORCE_LINE( FSARR(1) )		! force to a line
	   GOTO 9000				! and give up on it
	ENDIF
C
C now check that we have (at least some) agreement between the
C types returned by FRTFND and SIFFND
C
	IF (
     &	   .NOT.(
     &		(IS_TEXT.AND.FRTTEX)
     &	   .OR.	(IS_CELL.AND.FRTSYM)
     &	   .OR.	(
     &		  (IS_LINE.OR.IS_SHAPE.OR.IS_HOLE) .AND.
     &		  (FRTLIN .OR.FRTARE)
     &		)
     &	   .OR.	(IS_CURVE .AND.FRTCUR)
     &	   .OR.	(IS_CIRCLE.AND.FRTARC)
     &	   .OR.	(IS_ARC   .AND.FRTARC)
     &		)
     &	   ) THEN
C
C	 the FRTLIB and the SIF types are inconsistent - we will
C	 attempt to use the SIF type
C
	   CALL MOAN( MSG__FRTSIFFC, SIF_FC,
     &					STN(SIF_TYP)(1:STL(SIF_TYP)),
     &					FTN(FRTGT)(1:FTL(FRTGT)) )
	   CALL FORCE_LINE( SIF_FC )		! force to a line
	   GOTO 9000				! and give up on it
C
	ENDIF
C
C If it is a text, sort out its justification for determining text location
C in the text range block. Then, if we have not already had an overriding 
C justification, use this value for TLC.
C
	IF (FSARR(3).EQ.0) THEN
	   TXTLOC = 3			! default text justification
	ELSE
	   TXTLOC = FSARR(3).AND.'F'X	! select the justification bits
	ENDIF
C
C JUST used in TLC.
	IF (IS_TEXT.AND..NOT.HAD_JUST) JUST = TXTLOC
C
C if it is a text, and we are getting the text level from the text
C category, then do so
C
	IF (IS_TEXT.AND.TXTLEV.EQ.USE_CATEGORY) THEN
	   CALL CATLEVEL(FSARR(3))
	ENDIF
C
C is it a linear feature?
C
9000	IS_LINEAR = IS_LINE.OR.IS_SHAPE.OR.IS_HOLE.OR.IS_CURVE
C
C if it is, then work out which type of linear feature it is
C
	IF ( IS_LINEAR ) THEN
	   IF ( IS_LINE.OR.IS_CURVE ) THEN
	      STRING_TYPE = 'OP'	! string is OPEN
	   ELSEIF ( IS_SHAPE ) THEN
	      STRING_TYPE = 'SO'	! string is SOLID
	   ELSE
	      STRING_TYPE = 'HO'	! string is HOLE
	   ENDIF
	ENDIF
C
C and that is all we need to do
C
	RETURN
	END
