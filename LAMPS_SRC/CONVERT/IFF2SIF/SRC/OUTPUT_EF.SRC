	SUBROUTINE OUTPUT_EF( HAD_ST, NPTS, STBUF, ZSBUF, IS_LINEAR,
     &			      HAD_HEIGHT, HEIGHT,
     &			      HAD_RO, RO, HAD_TH, TH, BUFSTR )
C
***	IDENT	27NO86
***	MODULE	OUTPUT_EF
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 26 November 1986
C- abstracted from OUTPUT
C
C This routine deals with outputting things when a feature is finished
C
	IMPLICIT NONE
C
C common blocks required
C
***	COMMON/HERE:SIF/
***	COMMON/HERE:SIFCOM/
C
C arguments:
C
	LOGICAL		HAD_ST		! true if had ST/ZS entry
	INTEGER*2	NPTS		! number of points in ST entry
	REAL		STBUF(2,NPTS)	! points buffer for ST entry
	REAL		ZSBUF(3,NPTS)	! points buffer for ZS entry
	LOGICAL		IS_LINEAR	! sic
	REAL		HEIGHT		! height from AC entry
	LOGICAL		HAD_HEIGHT	! true if had a height AC
	LOGICAL		HAD_RO		! true if had an RO entry
	REAL		RO		! contents of the RO entry
	LOGICAL		HAD_TH		! true if had a TH entry
	INTEGER*2	TH		! contents of the TH entry
	CHARACTER*(*)	BUFSTR		! text
C
C *********************************************************************
C for line/curve features we have already output everything
C for all other sorts of data, we output the feature now
C
	IF (.NOT.HAD_ST) THEN
	   CALL MOAN( MSG__NOST, FSN )	! complain if no ST
	   GOTO 9999			! and give up at once
	ENDIF
C
	IF (IS_LINEAR) THEN
C
	   IF ( NEED_SIFOUT ) CALL SIFOUT	! flush last few points?
	   IF ( IN_COMPLEX_STRING ) CALL SIFEST	! end a BST?
C
	ELSE
C
C	 start off the 'feature'
C
	   CALL START( IS_TEXT, SIF_LEVEL, SIF_FONT,
     &				SIF_STYLE, SIF_WEIGHT, SIF_COLOUR,
     &				HAD_HEIGHT, HEIGHT, DIMENSION )
C
C	 and output the body of the thing, from the appropriate buffer
C
	   IF ( DIMENSION.EQ.2 ) THEN
	      CALL DO_EF( DIMENSION, NPTS, STBUF,
     &				     HAD_RO, RO, HAD_TH, TH, BUFSTR )
	   ELSE
	      CALL DO_EF( DIMENSION, NPTS, ZSBUF,
     &				     HAD_RO, RO, HAD_TH, TH, BUFSTR )
	   ENDIF
C
	ENDIF
C
C *********************************************************************
C
9999	RETURN
	END
