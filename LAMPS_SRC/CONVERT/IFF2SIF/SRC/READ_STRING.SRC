C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-10-09 20:34:22.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE READ_STRING( IECODE, DIM, NPTS, STBUF, ZSBUF,
     &				HAD_HEIGHT, HEIGHT )
C
***	IDENT	09OC86
***	MODULE	READ_STRING
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 9 October 1986
C
C to read in an ST or ZS entry and turn it into the appropriate
C sort of thing
C
	IMPLICIT NONE
C
C Arguments
C
	INTEGER*2	IECODE		! 'ST' or 'ZS'
	INTEGER		DIM		! 2 or 3 dimensions
	INTEGER*2	NPTS		! number of points to read
	REAL		STBUF(2,NPTS)	! 2d string buffer (output)
	REAL		ZSBUF(3,NPTS)	! 3d string buffer (output)
	LOGICAL		HAD_HEIGHT	! had value in HEIGHT
	REAL		HEIGHT		! height for an ST
C
C common blocks required
C
***	COMMON/HERE:SIF/
***	COMMON/LSL$CMNIFF:IFFHAN/
C
C read the points into the appropriate buffer
C
	IF ( IECODE.EQ.'ST' ) THEN
	   CALL EIHRR(STBUF,NPTS*2,1)	! NPTS points into STBUF
	ELSE
	   CALL EIHRR(ZSBUF,NPTS*3,1)	! NPTS points into ZSBUF
	ENDIF
C
C do we need to transfer them into the other buffer?
C
	IF ( IECODE.EQ.'ST' .AND. DIM.EQ.3 ) THEN
	   CALL ST_TO_ZS( NPTS, STBUF, ZSBUF, HAD_HEIGHT, HEIGHT )
	ELSEIF ( IECODE.EQ.'ZS' .AND. DIM.EQ.2 ) THEN
	   CALL ZS_TO_ST( NPTS, STBUF, ZSBUF )
	ENDIF
C
C and that's all
C
	RETURN
	END
