	LOGICAL FUNCTION RDFC( GIVEUP, LASTFC, IN_METRES )
C
***	MODULE	RDFC
***	IDENT	03JL90
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C
C Author Tony J Ibbs, 11 March 1985, adapted from original SIFINI
C
C returns FALSE if it succeeds in reading the FC details on this
C line, and placing them in /SIFCOM/
C
	IMPLICIT NONE
C
C Arguments
C
	LOGICAL		GIVEUP		! set true (by us) if to
C					! abandon this file
	INTEGER*4	LASTFC		! the last FC encountered
C					! (amended by us)
	LOGICAL		IN_METRES	! are units metres on t'ground
C					! (input variable only)
C
***	COMMON/HERE:CONTROL/
***	COMMON/HERE:SIF/
***	COMMON/HERE:SIFCOM/
***	COMMON/LSL$CMNLSL:TXTC/
***	COMMON/LSL$CMNLSL:CMDCOM/
C
C useful parameters
C
	BYTE		 PLING
	PARAMETER	(PLING='!')
C
C functions called
C
	INTEGER		RDCOMM		! read a command from the line
	LOGICAL		RDREAL		! read a real number
	LOGICAL		RDLONG		! read a long integer
	INTEGER		READSTR		! read a string
	REAL		MM_TO_METRES	! convert to metres on t'ground
C
C command table
C
	INTEGER		SIFTYP_CMD_TABLE
	EXTERNAL	SIFTYP_CMD_TABLE
C
C workspace
C
	INTEGER		CMD		! command number from RDCOMM.
	LOGICAL		OK
C
C
	RDFC = .TRUE.		! assume failure
C
C
C we have a feature code line - assume that we are at its start
C
C - so read the feature code
C
	IF ( RDLONG(SIF_FC) ) THEN
	   CALL MOAN( MSG__BADFCNUM )
	   GOTO 9000
	ENDIF
C
C check that our ordering is correct
C
	IF ( SIF_FC.LE.LASTFC ) THEN
	   CALL MOAN( MSG__OUTOFORDER, SIF_FC, LASTFC )
	   GOTO 9000
	ENDIF
C
C and next read the feature type
C
	NOMESS = .TRUE.
	CMD = RDCOMM(SIFTYP_CMD_TABLE)		! what is it ?
	NOMESS = .FALSE.
C
	IF ( CMD.EQ.0 ) THEN
	   CALL MOAN( MSG__RDCOMM )
	   CALL LSL_CMDERR
	   GOTO 9000
	ELSEIF ( CMD.GT.MAXTYP ) THEN
	   CALL MOAN( MSG__BADCMD, CMD )
	   GOTO 9000
	ENDIF
C
C so we can use this type - remember it
C
	SIF_TYP = CMD
C
C and now read the rest of the line...
C
	IF ( RDLONG(SIF_LEVEL) )  GOTO 190
	IF ( RDLONG(SIF_STYLE) )  GOTO 190
	IF ( RDLONG(SIF_WEIGHT) ) GOTO 190
	IF ( RDLONG(SIF_COLOUR) ) GOTO 190
C
C do we have to read anything else?
C
	IF ( SIF_TYP.EQ.TEXT_TYP ) THEN
	   IF ( RDLONG(SIF_FONT) )   GOTO 190
	   IF ( RDREAL(SIF_HEIGHT) ) GOTO 190
	   IF ( RDREAL(SIF_WIDTH) )  GOTO 190
	ELSEIF ( SIF_TYP.EQ.CELL_TYP ) THEN
	   CELL_LEN = READSTR( SIF_CELL, PLING,,, OK )
	   IF ( .NOT. OK .OR. CELL_LEN.LE.0 ) GOTO 190
	   IF (HAD_SCITEX) THEN
	      IF (CELL_LEN.GT.10) THEN
		 CALL MOAN(MSG__SYMNAMLONG,SIF_CELL(1:CELL_LEN))
		 CELL_LEN = 10
	      ENDIF
	   ELSE
	      IF (CELL_LEN.GT.12) THEN
		 CALL MOAN(MSG__SYMNAMLONG,SIF_CELL(1:CELL_LEN))
		 CELL_LEN = 12
	      ENDIF
	   ENDIF
	ENDIF
C
	IF ( SIFCNT.GT.MAX_SIFCNT ) THEN
	   CALL MOAN( MSG__TOOMANYFC, MAX_SIFCNT )
	   GIVEUP = .TRUE.		! give up on this file, now
	   GOTO 9000
	ENDIF
C
	LASTFC = SIF_FC
	SIFCNT = SIFCNT + 1
C
C first those things common to all types
C
	SIFINT(1,SIFCNT) = SIF_FC
	SIFINT(2,SIFCNT) = SIF_TYP
	SIFINT(3,SIFCNT) = SIF_LEVEL
	SIFINT(4,SIFCNT) = SIF_STYLE
	SIFINT(5,SIFCNT) = SIF_WEIGHT
	SIFINT(6,SIFCNT) = SIF_COLOUR
C
C now, text things - note that we always store text size in metres
C on the ground
C
	IF ( SIF_TYP.EQ.TEXT_TYP ) THEN
	   SIFINT(7,SIFCNT) = SIF_FONT
	   IF ( IN_METRES ) THEN
	      SIFFLT(1,SIFCNT) = SIF_HEIGHT
	      SIFFLT(2,SIFCNT) = SIF_WIDTH
	   ELSE
	      SIFFLT(1,SIFCNT) = MM_TO_METRES(SIF_HEIGHT)
	      SIFFLT(2,SIFCNT) = MM_TO_METRES(SIF_WIDTH)
	   ENDIF
	ENDIF
C
C and then those things that are for (symbol) cells
C
	IF ( SIF_TYP.EQ.CELL_TYP ) THEN
	   SIFSTR( SIFCNT ) = SIF_CELL
	   SIFINT(8,SIFCNT) = CELL_LEN
	ENDIF
C
C so we have succeeded
C
	RDFC = .FALSE.
C
C and finally, we come here at the end of the line
C
9000	RETURN
C
C *********************************************************************
C
C this is such a common error, we have it once only here
C
190	CALL MOAN( MSG__UNABLE, SIF_FC )
	GOTO 9000
C
	END                  
