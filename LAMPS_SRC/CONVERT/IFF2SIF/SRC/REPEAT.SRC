C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-11-27 11:14:44.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION REPEAT( FC, STPOSN, FSARR,
     &				 HAD_RO, RO, HAD_TH, TH,
     &				 HAD_HEIGHT, HEIGHT, BUFSTR )
C
***	IDENT	27NO86
***	MODULE	REPEAT
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 4 April 1985
C
C This routine outputs the ST/ZSs again for each secondary feature code
C - we are called once for each secondary FC
C
C we return TRUE if something catastrophic goes wrong - this means
C give up on the IFF file!
C we return FALSE if the program can proceed
C
	IMPLICIT NONE
C
C Arguments:
C
	INTEGER*4	FC		! secondary FC to output for
	INTEGER*4	STPOSN		! location of first ST
	INTEGER*2	FSARR(4)	! the original FS entry
C
	LOGICAL		HAD_RO		! true if had an RO entry
	REAL		RO		! contents of the RO entry
	LOGICAL		HAD_TH		! true if had a TH entry
 	INTEGER*2	TH		! contents of the TH entry
	LOGICAL		HAD_HEIGHT	! had height AC
	REAL		HEIGHT		! the height we had
C
	CHARACTER*(*)	BUFSTR		! text string from TX
C
C common blocks required
C
***	COMMON/HERE:SIF/
***	COMMON/HERE:SIFCOM/
C
C workspace
C
	INTEGER*2	IECODE		! IFF entry name
	INTEGER*2	IELEN		! length of that entry (-1=eof)
C
	INTEGER*2	NPTS		! number of points in ST entry
	INTEGER*2	IENDS		! visibility flag for ST entry
	LOGICAL		PENUP		! pen up/down flag
	LOGICAL		FIRST_ST	! is it?
	LOGICAL		HAD_START	! have we started this bit?
C
	INTEGER*2	MY_FSARR(4)	! copy of the original FS array
C
	INTEGER		I		! for DO loop
C
	LOGICAL		IS_LINEAR	! is it?
	CHARACTER*2	LINE_TYPE	! what type of line is it, then?
C
	REAL		STBUF(2,STMAX)
	REAL		ZSBUF(3,STMAX)
C
C *********************************************************************
C
C assume that all goes well
C
	REPEAT = .FALSE.
C
C set up our own FS entry
C
	MY_FSARR(1) = FC		! the new feature code
	DO 10 I = 2,4
	   MY_FSARR(I) = FSARR(I)	! copy the rest of the entry
10	CONTINUE
C
C and set up the variables in /SIFCOM/ for that feature code
C
	CALL USE_FS( MY_FSARR, IS_LINEAR, LINE_TYPE )
C
C so we have the feature code interpreted
C - now look for the first ST/ZS
C
	CALL IFFPKE( IECODE, IELEN, STPOSN )
	IF ( (IECODE.NE.'ST'.AND.IECODE.NE.'ZS')
     &   .OR. IELEN.EQ.-1 ) THEN
	   CALL MOAN( MSG__BADSTPTR, FSN )
	   CALL MOAN( MSG__ABANDON )
	   REPEAT = .TRUE.		! we should abandon this file
	   GOTO 9999
	ENDIF
C
	HAD_START = .FALSE.
	FIRST_ST  = .TRUE.
C
C *********************************************************************
C
C so we have an ST or ZS - determine its length
C
200	CALL EIHRS(NPTS, IENDS)
	CALL DIAGNOS( MSG__STAGAIN, IECODE, NPTS, IENDS )
C
C work out if the pen should be up or down to the start of this ST/ZS
C
	PENUP = (IENDS.AND.1) .EQ. 0	! 0 => pen up, 1 => down
C
C and take appropriate action if this is the first ST
C
	IF (FIRST_ST) THEN		! this is the first ST/ZS
	   PENUP    = .TRUE.		! force a pen up to the start
	   FIRST_ST = .FALSE.		! had the first ST now
	ENDIF
C
C and do whatever is indicated by that
C
 	CALL OUTPUT_ST( HAD_START, IECODE, NPTS, STBUF, ZSBUF,
     &			PENUP, HAD_HEIGHT, HEIGHT,
     &			IS_LINEAR, LINE_TYPE )
C
C *********************************************************************
C
C now get the next entry
C
300	CALL IFFNXT( IECODE, IELEN )
	IF ( IELEN.EQ.-1 ) THEN		! end of file
	   CALL MOAN( MSG__IFFEOF,FSN )	! unexpected - no EJ found
	   REPEAT = .TRUE.		! this is very wrong
	   GOTO 9999			! finish off file
	ENDIF
C
C if the entry is an EF, then deal with that and return
C otherwise, ignore this entry, and read the next one
C
	IF ( IECODE.EQ.'ST' .OR. IECODE.EQ.'ZS' ) THEN
C
C	 we have another ST/ZS - go and read it in
C
	   GOTO 200
C
	ELSEIF ( IECODE.EQ.'EF' ) THEN
C
C	 we have an EF - deal with it, and then return
C
	   CALL DIAGNOS( MSG__IFFEF )
C
	   CALL OUTPUT_EF( .TRUE., NPTS, STBUF, ZSBUF, IS_LINEAR,
     &			   HAD_HEIGHT, HEIGHT,
     &			   HAD_RO, RO, HAD_TH, TH, BUFSTR )
C
	ELSE
C
C	 it's something else - ignore it
C
	   GOTO 300			! next entry
C
	ENDIF
C
C *********************************************************************
C
9999	RETURN
	END
