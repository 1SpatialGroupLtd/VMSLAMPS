	LOGICAL FUNCTION IFF_POINT( )
C
***	IDENT	05DE94
***	MODULE	IFF_POINT
C
C Copyright (C) Laser-Scan Ltd, Cambridge, England
C
C Author  :  Paul Pan, 5 September 1989
C Modified:  Paul Pan, 13 March 1990
C	     to introduce PARAMETER file handling
C            PP, 6 June 1990 to take away FRCOUSED msg
C
CMOD960	     Jon Barber 				4 Feb 1991
C	     Output AC heights to group 38, ZS contents only
C	     to 3x groups
C
CMOD1125     Jon Barber				 	13-Jul-1992
C	     Use abs coords for /ABSOLUTE qualifier
C
CMOD1439     Jon Barber				 	05-Dec-1994
C	     Do not use IFF_ABSENT as a 'real' number,
C	     preventing an AXP crash.
C
C Purpose: Manipulate the IFF Unoriented Symbol to DXF POINT format
C
        IMPLICIT NONE
C
C Messages:
	INCLUDE	 'HERE:I2DXFMSG.PAR'
C
C Common Blocks:
	INCLUDE  'LSL$CMNIFF:CB.STR'		! for IFF_ABSENT
	INCLUDE  'LSL$CMNDXFPAR:LOOKUP.CMN'
	INCLUDE  'HERE:I2DXF.CMN'		! added on 28/02/90
        INCLUDE  'HERE:FEATURE.CMN'
        INCLUDE  'HERE:POINT.CMN'
C
C Workspace:
	INTEGER*2	IELEN			! end of file/entry length
        INTEGER*2	IECODE			! IECODE
C
	INTEGER		INT_EQUIV		! for IFF_ABSENT comparison
	REAL		REAL_EQUIV
	EQUIVALENCE	(INT_EQUIV,REAL_EQUIV)
C
C----------------------------------------------------------------
C output DXF file has already been selected
C
        IFF_POINT = I2DXF__NORMAL
C
C----------------------------------------------------------------
C test whether input DXF ENTITY type is legal for this routine
C    valid DXF entries are:
C    	   POINT and INSERT
C
	IF (DXFENTTYP(SELENTIND).EQ.DXFPOINT)  GOTO 5000
	IF (DXFENTTYP(SELENTIND).EQ.DXFINSERT) GOTO 5000
C
C report illegal cross-referencing and leave the routine
C	
        IFF_POINT = I2DXF__BADCROSREF
	CALL LSL_PUTMSG(I2DXF__BADCROSREF)
	CALL LSL_ADDMSG(I2DXF__ATFSNFC,CURRFSN,IFFFCCODE(SELENTIND))
	GOTO 1000
C
C----------------------------------------------------------------
C extract the record now
C
5000	CONTINUE
C
	CALL IFFNXT( IECODE,IELEN )
	IF ( IECODE.EQ.'ST' ) GOTO 102
	IF ( IECODE.EQ.'ZS' ) GOTO 102
C
	GOTO 5000
C
C extract number of points in the feature
C
102     CONTINUE
        CALL EIHRS( NO_OF_PTS,PEN )
C 
C it is regarded as single point feature
C    so if there is more than one point in the feature
C    only the first point will be used
C              
C extract the data point now
C
	IF ( IECODE.EQ.'ZS' ) THEN
C
C Read block of x, y, z points into buffer
C
	   CALL EIHRR( PT_BUFFER,3,1 )
	   HAD_ZS = .TRUE.
	ELSE
C
C Read 1 point at a time because reading a block would mix up the values
C by putting a pair of values into a 3D array.
C
	   CALL EIHRR( PT_BUFFER(1,1),2,1 )
	ENDIF
C
C now output the data to the DXF file
C
        CALL FLWSTR( '  0' )
	IF (DXFENTTYP(SELENTIND).EQ.DXFPOINT) THEN
           CALL FLWSTR( 'POINT' )
	ELSE
           CALL FLWSTR( 'INSERT' )
        ENDIF
C
	CALL FLWSTR( '  8' )
	CALL FLWRTF( '%S',DXFLAYNAM(SELLAYIND)
     &				(1:DXFLAYLEN(SELLAYIND)) ) 
C
	IF (DXFENTTYP(SELENTIND).EQ.DXFINSERT) THEN
	   CALL FLWSTR( '  2' )
	   CALL FLWRTF( '%S',DXFENTNAM(SELENTIND)
     &				(1:DXFENTLEN(SELENTIND)) ) 
        ENDIF
C
	CALL FLWSTR( ' 62' )
	CALL FLWRTF( '%^W%N6',ENTCOLOUR(SELENTIND) ) 
C
	CALL OUTPUT_COORD(PT_BUFFER(1,1), PT_BUFFER(2,1), 1)
C
	REAL_EQUIV = PT_BUFFER(3,1)
	IF (HAD_ZS .AND. INT_EQUIV.NE.IFF_ABSENT) THEN
	   CALL FLWSTR( ' 30' )
	   CALL FLWRTF( '%F',PT_BUFFER(3,1) )
	ENDIF
C
	IF ( HAD_HT ) THEN
	   CALL FLWSTR( ' 38' )
	   CALL FLWRTF( '%F',AC_HT)
	ENDIF
C
C Exit
1000	RETURN
	END
C
