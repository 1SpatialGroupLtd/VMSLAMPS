C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1995-02-07 15:52:02.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION IFF_LINE( )
C
***	IDENT	07FE95
***	MODULE 	IFF_LINE
C
C Copyright (C) Laser-Scan Ltd, Cambridge, England
C
C Author  :  Paul Pan, 5 September 1989
C Modified:  Paul Pan, 28 February 1990
C	     to introduce lookup table mechanism
C
CMOD960	     Jon Barber 				04-Feb-1991
C	     Output AC heights to group 38, ZS contents only
C	     to 3x groups
C	     Close area features for POLYLINE entities, and do not
C	     duplicate points end for TRACE or SOLID
C
CMOD1125     Jon Barber				 	13-Jul-1992
C	     Use abs coords for /ABSOLUTE qualifier
C
CMOD1146     Jon Barber				 	01-Sep-1992
C	     Fix breaks between coordinate blocks, and the closing of
C	     each separate coordinate block, by outputting via a new 
C	     IFF_POLY routine
C
CMOD1439     Jon Barber				 	05-Dec-1994
C	     Do not use IFF_ABSENT as a 'real' number,
C	     preventing an AXP crash.
Cc	     Do not create new features at pen down continuation
Cc	     flags
C
C Purpose :  Convert IFF linear features into DXF format
C
        IMPLICIT NONE
C
C Messages:
	INCLUDE	 'HERE:I2DXFMSG.PAR'
C
C Common Blocks:
	INCLUDE  'LSL$CMNIFF:CB.STR'		! for IFF_ABSENT
	INCLUDE  'LSL$CMNFRT:FRTCOM.CMN'
	INCLUDE  'LSL$CMNDXFPAR:LOOKUP.CMN'
	INCLUDE  'HERE:I2DXF.CMN'		! added on 28/02/90
        INCLUDE  'HERE:FEATURE.CMN'
        INCLUDE  'HERE:POINT.CMN'
C
C Functions
	LOGICAL	    IFF_POLY
C
C Workspace:
	INTEGER     I,J		        ! DO loop counter
	INTEGER*2   IELEN		! end of file/entry length
        INTEGER*2   IECODE
C
	INTEGER	    INT_EQUIV		! for IFF_ABSENT comparison
	REAL	    REAL_EQUIV
	EQUIVALENCE (INT_EQUIV,REAL_EQUIV)
C
C----------------------------------------------------------------
C output DXF file has already been selected
C
        IFF_LINE  = I2DXF__NORMAL
	HAD_ZS 	  = .FALSE.
	TOTAL_PTS = 0
C
C----------------------------------------------------------------
C test whether input DXF ENTITY type is legal for this routine
C    valid DXF entries are:
C    	   LINE, TRACE, SOLID and POLYLINE
C
	IF (DXFENTTYP(SELENTIND).EQ.DXFLINE) 	 GOTO 5000
	IF (DXFENTTYP(SELENTIND).EQ.DXFTRACE)    GOTO 5000
	IF (DXFENTTYP(SELENTIND).EQ.DXFSOLID)    GOTO 5000
	IF (DXFENTTYP(SELENTIND).EQ.DXFPOLYLINE) GOTO 5000
C
C report illegal cross-referencing and leave the routine
C	
        IFF_LINE = I2DXF__BADCROSREF
	CALL LSL_PUTMSG(I2DXF__BADCROSREF)
	CALL LSL_ADDMSG(I2DXF__ATFSNFC,CURRFSN,IFFFCCODE(SELENTIND))
	GOTO 1000
C
C____________________________________________________________
C extract the data now 
C
5000	CALL IFFNXT(IECODE,IELEN)
C
	IF (IECODE.EQ.'ST') THEN
	   HAD_ZS = .FALSE.
	   GOTO 102
C
	ELSEIF (IECODE.EQ.'ZS') THEN
	   HAD_ZS = .TRUE.
	   GOTO 102
	ENDIF
C
	GOTO 5000
C
C ST/ZS entry
C extract total number of points in the feature
C 
102	CALL EIHRS(NO_OF_PTS,PEN)
C
	TOTAL_PTS = NO_OF_PTS
C
C extract the data points now
C
103	IF (IECODE.EQ.'ZS') THEN
C
C Read block of x, y, z points into buffer
C
	   CALL EIHRR(PT_BUFFER, NO_OF_PTS*3, 1)	! ZS - read 3 values
C
	ELSE
	   DO 105 I = 1,NO_OF_PTS
C
C Read 1 point at a time because reading a block would mix up the values
C by putting a pair of values into a 3D array.
C
	      CALL EIHRR(PT_BUFFER(1,I),2,I*4-3)
C
c	      IF (PEN.EQ.PEN_UP) THEN
c		 CALL EIHRR(PT_BUFFER(1,I),2,I*4-3)
c	      ELSEIF (PEN.EQ.PEN_DOWN) THEN
c		 CALL EIHRR(PT_BUFFER(1,2),2,I*4-3)
c	      ENDIF
C
105	   CONTINUE
	ENDIF
C
C ---------------------------------------------------------------------
C Get next entry for any continuation
C
c	CALL IFFNXT(IECODE,IELEN)
C
c	IF (IECODE.EQ.'EF') THEN		! end of feature
c	   GOTO 200
c	   GOTO 199
C
c	ELSEIF (IECODE.EQ.'ST' .OR. IECODE.EQ.'ZS') THEN
C
c	   CALL EIHRS(NO_OF_PTS,PEN)
C
c	   IF (PEN.EQ.PEN_UP) THEN			! new feature, end old
c	      GOTO 200
c	      GOTO 199
C
c	   ELSEIF (PEN.EQ.PEN_DOWN) THEN		! continuation
c	      TOTAL_PTS = TOTAL_PTS + NO_OF_PTS
c	      GOTO 103
c	   ENDIF
C
c	ENDIF
C
C---------------------------------------------------------------------
C now check the no of points in the line feature
C    if (no_of_pts) equal
C	negative,0 :    output error mess
C	         1 :	single pt string, legal in IFF, output info mess
C                2 :	test if (DXF entity type) equal 
C				LINE
C                       translate data if it's equal
C		 	output warning mess if it's not
C              3,4 :	test if (DXF entity type) equal 
C				POLYLINE, 
C				TRACE or
C				SOLID
C                       translate data if it's equal
C		 	output warning mess if it's not
C               >4 :	test if (DXF entity type) equal 
C				POLYLINE
C                       translate data if it's equal
C		 	output warning mess if it's not
C
C---------------------------------------------------------------------
199 	CONTINUE
C
	TOTAL_PTS = NO_OF_PTS
C
C NO_OF_PTS <= 0, wrong for any DXF type
C
	IF (TOTAL_PTS.LE.0) THEN
           IFF_LINE = I2DXF__BADCOORD
           CALL LSL_PUTMSG(I2DXF__BADCOORD)
	   CALL LSL_ADDMSG(I2DXF__ATFSNFC,CURRFSN,IFFFCCODE(SELENTIND))
	   GOTO 1000
C
C---------------------------------------------------------------------
C NO_OF_PTS == 1
C 
	ELSEIF (TOTAL_PTS.EQ.1) THEN 
           IFF_LINE = I2DXF__SINGPTSTR
           CALL LSL_PUTMSG(I2DXF__SINGPTSTR)
	   CALL LSL_ADDMSG(I2DXF__ATFSNFC,CURRFSN,IFFFCCODE(SELENTIND))
	   GOTO 1000
C
C---------------------------------------------------------------------
C NO_OF_PTS == 2
C   and test if (DXF entity type) equal LINE
C
	ELSEIF (TOTAL_PTS.EQ.2) THEN
	   IF (DXFENTTYP(SELENTIND).EQ.DXFLINE) THEN
	      GOTO 200
C
C LINE will be used instead of POLYLINE 
C
	   ELSEIF (DXFENTTYP(SELENTIND).EQ.DXFPOLYLINE) THEN
	      IF (.NOT.HAD_QUIET) THEN
		 CALL LSL_PUTMSG(I2DXF__LINEUSED)
		 CALL LSL_ADDMSG(I2DXF__ATFSNFC,CURRFSN,IFFFCCODE(SELENTIND))
	      ENDIF
	      GOTO 200
C
C otherwise output error message
C
	   ELSE
              IFF_LINE = I2DXF__BADPTSLIN
	      CALL LSL_PUTMSG(I2DXF__BADPTSLIN)
	      CALL LSL_ADDMSG(I2DXF__ATFSNFC,CURRFSN,IFFFCCODE(SELENTIND))
	      GOTO 1000
	   ENDIF
C
C---------------------------------------------------------------------
C NO_OF_PTS >= 3
C   and test if (DXF entity type) equal POLYLINE, TRACE or SOLID
C
C the POLYLINE first
C
	ELSE
	   IF (DXFENTTYP(SELENTIND).EQ.DXFPOLYLINE) THEN
	      GOTO 300
C
C force entity type to POLYLINE
C
	   ELSEIF (DXFENTTYP(SELENTIND).EQ.DXFLINE) THEN
	      IF (.NOT.HAD_QUIET) THEN
		 CALL LSL_PUTMSG(I2DXF__POLYUSED)
		 CALL LSL_ADDMSG(I2DXF__ATFSNFC,CURRFSN,IFFFCCODE(SELENTIND))
	      ENDIF
	      GOTO 300
C
C then the TRACE and SOLID
C
	   ELSEIF (DXFENTTYP(SELENTIND).EQ.DXFTRACE .OR. 
     &		   DXFENTTYP(SELENTIND).EQ.DXFSOLID ) THEN
C
C unclose points
C
	      IF ( PT_BUFFER(1,1).EQ.PT_BUFFER(1,NO_OF_PTS) .AND. 
     &		   PT_BUFFER(2,1).EQ.PT_BUFFER(2,NO_OF_PTS) ) 
     &				NO_OF_PTS = NO_OF_PTS - 1
	      GOTO 400
C
	   ELSE
	      IF (.NOT.HAD_QUIET) THEN
		 CALL LSL_PUTMSG(I2DXF__POLYUSED)
		 CALL LSL_ADDMSG(I2DXF__ATFSNFC,CURRFSN,IFFFCCODE(SELENTIND))
	      ENDIF
	      GOTO 300
	   ENDIF
	ENDIF
C
C---------------------------------------------------------------------
C output DXF LINE format 
C
200	CONTINUE
C
        CALL FLWSTR( '  0' )
        CALL FLWSTR( 'LINE' )
        CALL FLWSTR( '  8' )
        CALL FLWRTF( '%S',DXFLAYNAM(SELLAYIND)
     &				(1:DXFLAYLEN(SELLAYIND)) ) 
        CALL FLWSTR( '  6' )
        CALL FLWRTF( '%S',DXFENTNAM(SELENTIND)
     &				(1:DXFENTLEN(SELENTIND)) ) 
        CALL FLWSTR( ' 62' )
        CALL FLWRTF( '%^W%N6',ENTCOLOUR(SELENTIND) ) 
C
	IF (HAD_HT) THEN
           CALL FLWSTR( ' 38' )
           CALL FLWRTF( '%F',AC_HT)
	ENDIF
C
	CALL OUTPUT_COORD(PT_BUFFER(1,1),PT_BUFFER(2,1), 1)
C
	IF (HAD_ABS) THEN
	   REAL_EQUIV = PT_BUFFER(3,1)
	   IF (HAD_ZS .AND. INT_EQUIV.NE.IFF_ABSENT) THEN
              CALL FLWSTR( ' 30' )
              CALL FLWRTF( '%F',PT_BUFFER(3,1) )
	   ENDIF
C
	   CALL OUTPUT_COORD(PT_BUFFER(1,2),PT_BUFFER(2,2), 2)
C
	   REAL_EQUIV = PT_BUFFER(3,2)
	   IF (HAD_ZS .AND. INT_EQUIV.NE.IFF_ABSENT) THEN
              CALL FLWSTR( ' 31' )
              CALL FLWRTF( '%F',PT_BUFFER( 3,2 ) )
	   ENDIF
C
	ELSE
	   REAL_EQUIV = PT_BUFFER(3,1)
	   IF (HAD_ZS .AND. INT_EQUIV.NE.IFF_ABSENT) THEN
              CALL FLWSTR( ' 30' )
              CALL FLWRTF( '%F',PT_BUFFER(3,1) )
	   ENDIF
C
	   CALL OUTPUT_COORD(PT_BUFFER(1,2),PT_BUFFER(2,2), 2)
C
	   REAL_EQUIV = PT_BUFFER(3,2)
	   IF (HAD_ZS .AND. INT_EQUIV.NE.IFF_ABSENT) THEN
              CALL FLWSTR( ' 31' )
              CALL FLWRTF( '%F',PT_BUFFER(3,2) )
	   ENDIF
	ENDIF
C
	GOTO 500
C
C---------------------------------------------------------------------
C output POLYLINE format
C
300	CONTINUE
C
C Use the IFF_POLY routine, with flag set true to signify that the
C coord header and first coord block has been read into cmn
C
	IFF_LINE = IFF_POLY(.TRUE.)
	IF (.NOT.IFF_LINE) GOTO 1000
C
	GOTO 1000
C
C---------------------------------------------------------------------
C then the TRACE and SOLID
C
400	CONTINUE
C
	IF (NO_OF_PTS.EQ.3 .OR. NO_OF_PTS.EQ.4 ) THEN
	   IF (DXFENTTYP(SELENTIND).EQ.DXFTRACE .AND.
     &	      	 			NO_OF_PTS.EQ.3) THEN
	      IFF_LINE = I2DXF__BADPTSLIN
	      CALL LSL_PUTMSG(I2DXF__BADPTSLIN)
	      CALL LSL_ADDMSG(I2DXF__ATFSNFC,CURRFSN,IFFFCCODE(SELENTIND))
	      GOTO 1000
           ENDIF
C
           CALL FLWSTR( '  0' )
C
	   IF (DXFENTTYP(SELENTIND).EQ.DXFTRACE) THEN
              CALL FLWSTR( 'TRACE' )
	   ELSEIF (DXFENTTYP(SELENTIND).EQ.DXFSOLID) THEN
              CALL FLWSTR( 'SOLID' )
           ENDIF
C
           CALL FLWSTR( '  8' )
           CALL FLWRTF( '%S',DXFLAYNAM(SELLAYIND)
     &				(1:DXFLAYLEN(SELLAYIND)) ) 
           CALL FLWSTR( '  6' )
           CALL FLWRTF( '%S',DXFENTNAM(SELENTIND)
     &				(1:DXFENTLEN(SELENTIND)) ) 
           CALL FLWSTR( ' 62' )
           CALL FLWRTF( '%^W%N6',ENTCOLOUR(SELENTIND) ) 
C
	   IF (HAD_HT) THEN
              CALL FLWSTR( ' 38' )
              CALL FLWRTF( '%F',AC_HT)
	   ENDIF
C
	   CALL OUTPUT_COORD(PT_BUFFER(1,1), PT_BUFFER(2,1), 1)
C
	   IF (HAD_ABS) THEN
	      REAL_EQUIV = PT_BUFFER(3,1)
	      IF (HAD_ZS .AND. INT_EQUIV.NE.IFF_ABSENT) THEN
                 CALL FLWSTR( ' 30' )
                 CALL FLWRTF( '%F',PT_BUFFER(3,1) )
	      ENDIF
C
	      CALL OUTPUT_COORD(PT_BUFFER(1,2),PT_BUFFER(2,2), 2)
C
	      REAL_EQUIV = PT_BUFFER(3,2)
	      IF (HAD_ZS .AND. INT_EQUIV.NE.IFF_ABSENT) THEN
                 CALL FLWSTR( ' 31' )
                 CALL FLWRTF( '%F',PT_BUFFER(3,2) )
	      ENDIF
C
	      CALL OUTPUT_COORD(PT_BUFFER(1,3),PT_BUFFER(2,3), 3)
C
	      REAL_EQUIV = PT_BUFFER(3,3)
	      IF (HAD_ZS .AND. INT_EQUIV.NE.IFF_ABSENT) THEN
                 CALL FLWSTR( ' 32' )
                 CALL FLWRTF( '%F',PT_BUFFER(3,3) )
	      ENDIF
C
	      IF (NO_OF_PTS.EQ.3) THEN
		 CALL OUTPUT_COORD(PT_BUFFER(1,3),PT_BUFFER(2,3), 4)
C
		 REAL_EQUIV = PT_BUFFER(3,3)
		 IF (HAD_ZS .AND. INT_EQUIV.NE.IFF_ABSENT) THEN
                    CALL FLWSTR( ' 33' )
                    CALL FLWRTF( '%F',PT_BUFFER(3,3) )
	         ENDIF
C
	      ELSE
		 CALL OUTPUT_COORD(PT_BUFFER(1,4),PT_BUFFER(2,4), 4)
C
		 REAL_EQUIV = PT_BUFFER(3,4)
		 IF (HAD_ZS .AND. INT_EQUIV.NE.IFF_ABSENT) THEN
                    CALL FLWSTR( ' 33' )
                    CALL FLWRTF( '%F',PT_BUFFER(3,4) )
	         ENDIF
	      ENDIF
C
	   ELSE
	      REAL_EQUIV = PT_BUFFER(3,1)
	      IF (HAD_ZS .AND. INT_EQUIV.NE.IFF_ABSENT) THEN
                 CALL FLWSTR( ' 30' )
                 CALL FLWRTF( '%F',PT_BUFFER(3,1) )
	      ENDIF
C
	      CALL OUTPUT_COORD(PT_BUFFER(1,2),PT_BUFFER(2,2), 2)
C
	      REAL_EQUIV = PT_BUFFER(3,2)
	      IF (HAD_ZS .AND. INT_EQUIV.NE.IFF_ABSENT) THEN
                 CALL FLWSTR( ' 31' )
                 CALL FLWRTF( '%F',PT_BUFFER(3,2) )
	      ENDIF
C
	      CALL OUTPUT_COORD(PT_BUFFER(1,3),PT_BUFFER(2,3), 3)
C
	      REAL_EQUIV = PT_BUFFER(3,3)
	      IF (HAD_ZS .AND. INT_EQUIV.NE.IFF_ABSENT) THEN
                 CALL FLWSTR( ' 32' )
                 CALL FLWRTF( '%F',PT_BUFFER(3,3) )
	      ENDIF
C
	      IF (NO_OF_PTS.EQ.3) THEN
		 CALL OUTPUT_COORD(PT_BUFFER(1,3),PT_BUFFER(2,3), 4)
C
		 REAL_EQUIV = PT_BUFFER(3,3)
		 IF (HAD_ZS .AND. INT_EQUIV.NE.IFF_ABSENT) THEN
                    CALL FLWSTR( ' 33' )
                    CALL FLWRTF( '%F',PT_BUFFER(3,3) )
	         ENDIF
C
	      ELSE
		 CALL OUTPUT_COORD(PT_BUFFER(1,4),PT_BUFFER(2,4), 4)
C
		 REAL_EQUIV = PT_BUFFER(3,4)
		 IF (HAD_ZS .AND. INT_EQUIV.NE.IFF_ABSENT) THEN
                    CALL FLWSTR( ' 33' )
                    CALL FLWRTF( '%F',PT_BUFFER(3,4) )
	         ENDIF
	      ENDIF
	   ENDIF
C
	ELSE
	   IFF_LINE = I2DXF__BADPTSLIN
	   CALL LSL_PUTMSG(I2DXF__BADPTSLIN)
	   CALL LSL_ADDMSG(I2DXF__ATFSNFC,CURRFSN,IFFFCCODE(SELENTIND))
	   GOTO 1000
	ENDIF
C
C---------------------------------------------------------------------
C the following is implemented as IFF format can contain more than one
C line in a feature. The lines being read are then stored separately
C in DXF format. This is coped with correctly if IFF_POLY is used for
C output.
C
500	CONTINUE
C
	CALL IFFNXT(IECODE,IELEN)
C
	IF (IECODE.EQ.'EF') GOTO 1000
	IF (IECODE.EQ.'ST') GOTO 102
	IF (IECODE.EQ.'ZS') GOTO 102
C
C Exit
1000	RETURN
	END 
C
