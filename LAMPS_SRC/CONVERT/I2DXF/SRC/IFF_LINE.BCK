	LOGICAL FUNCTION IFF_LINE( )
C
***	IDENT	13JL92
***	MODULE 	IFF_LINE
C
C Copyright (C) Laser-Scan Ltd, Cambridge, England
C
C Author  :  Paul Pan, 5 September 1989
C Modified:  Paul Pan, 28 February 1990 to introduce lookup table mechanism
C
CMOD960	     Jon Barber 				 4-Feb-1991
C	     Output AC heights to group 38, ZS contents only to 3x groups
C	     Close area features for POLYLINE entities, and don't
C	     duplicate points end for TRACE or SOLID
C
CMOD1125     Jon Barber				 	13-Jul-1992
C	     Use abs coords for /ABSOLUTE qualifier
C
C Purpose :  Convert IFF linear features into DXF format
C
        IMPLICIT NONE
C
C Messages:
C
	INCLUDE	 'HERE:I2DXFMSG.PAR'
C
C Common Blocks:
C
	INCLUDE  'LSL$CMNFRT:FRTCOM.CMN'
	INCLUDE  'LSL$CMNIFF:MD2DES.CMN'
	INCLUDE  'LSL$CMNDXFPAR:LOOKUP.CMN'
	INCLUDE  'HERE:I2DXF.CMN'		! added on 28/02/90
        INCLUDE  'HERE:FEATURE.CMN'
        INCLUDE  'HERE:POINT.CMN'
C
C Workspace:
C
	INTEGER     I,J		        ! DO loop counter
	INTEGER*2   IELEN		! end of file/entry length
        INTEGER*2   IECODE   
        INTEGER     TEMP_COUNTER
C
C----------------------------------------------------------------
C output DXF file has already been selected
C
        IFF_LINE = I2DXF__NORMAL
C
C----------------------------------------------------------------
C test whether input DXF ENTITY type is legal for this routine
C    valid DXF entries are:
C    	   LINE, TRACE, SOLID and POLYLINE
C
	IF (DXFENTTYP(SELENTIND).EQ.DXFLINE) 	 GOTO 5000
	IF (DXFENTTYP(SELENTIND).EQ.DXFTRACE)    GOTO 5000
	IF (DXFENTTYP(SELENTIND).EQ.DXFSOLID)    GOTO 5000
	IF (DXFENTTYP(SELENTIND).EQ.DXFPOLYLINE) GOTO 5000
C
C report illegal cross-referencing and leave the routine
C	
        IFF_LINE = I2DXF__BADCROSREF
	CALL LSL_PUTMSG(I2DXF__BADCROSREF)
	CALL LSL_ADDMSG(I2DXF__ATFSNFC,CURRFSN,IFFFCCODE(SELENTIND))
	GOTO 1000
C
C____________________________________________________________
C extract the data now 
C
5000	CALL IFFNXT( IECODE,IELEN )
	IF ( IECODE.EQ.'ST' ) GOTO 102
	IF ( IECODE.EQ.'ZS' ) GOTO 102
C
	GOTO 5000
C
C ST/ZS entry
C extract total number of points in the feature
C 
102     CONTINUE
        CALL EIHRS( NO_OF_PTS,PEN )
C
C extract the data points now
C
	IF ( IECODE.EQ.'ZS' ) THEN
C
C Read block of x, y, z points into buffer
C
	   CALL EIHRR( PT_BUFFER,NO_OF_PTS*3,1 )	! ZS - read 3 values
	   HAD_ZS = .TRUE.
	ELSE
	   DO 97 I = 1,NO_OF_PTS
C
C Read 1 point at a time because reading a block would mix up the values
C by putting a pair of values into a 3D array.
C
	      CALL EIHRR( PT_BUFFER(1,I),2,I*4-3 )
97	   CONTINUE
	ENDIF
C
C now check the no of points in the line feature
C    if (no_of_pts) equal
C	negative,0 :    output error mess
C	         1 :	single pt string, legal in IFF, output info mess
C                2 :	test if (DXF entity type) equal 
C				LINE
C                       translate data if it's equal
C		 	output warning mess if it's not
C              3,4 :	test if (DXF entity type) equal 
C				POLYLINE, 
C				TRACE or
C				SOLID
C                       translate data if it's equal
C		 	output warning mess if it's not
C               >4 :	test if (DXF entity type) equal 
C				POLYLINE
C                       translate data if it's equal
C		 	output warning mess if it's not
C
C---------------------------------------------------------------------
C NO_OF_PTS <= 0, wrong for any DXF type
C
	TOTAL_PTS = NO_OF_PTS
C
	IF (TOTAL_PTS.LE.0) THEN
           IFF_LINE = I2DXF__BADCOORD
           CALL LSL_PUTMSG(I2DXF__BADCOORD)
	   CALL LSL_ADDMSG(I2DXF__ATFSNFC,CURRFSN,IFFFCCODE(SELENTIND))
	   GOTO 1000
C
C---------------------------------------------------------------------
C NO_OF_PTS == 1
C 
	ELSEIF (TOTAL_PTS.EQ.1) THEN 
           IFF_LINE = I2DXF__SINGPTSTR
           CALL LSL_PUTMSG(I2DXF__SINGPTSTR)
	   CALL LSL_ADDMSG(I2DXF__ATFSNFC,CURRFSN,IFFFCCODE(SELENTIND))
	   GOTO 1000
C
C---------------------------------------------------------------------
C NO_OF_PTS == 2
C   and test if (DXF entity type) equal LINE
C
	ELSEIF (TOTAL_PTS.EQ.2) THEN 
           IF (DXFENTTYP(SELENTIND).EQ.DXFLINE) THEN
	      GOTO 200
C
C LINE will be used instead of POLYLINE 
C
	   ELSEIF (DXFENTTYP(SELENTIND).EQ.DXFPOLYLINE) THEN
	      IF (.NOT.HAD_QUIET) THEN
		 CALL LSL_PUTMSG(I2DXF__LINEUSED)
		 CALL LSL_ADDMSG(I2DXF__ATFSNFC,CURRFSN,IFFFCCODE(SELENTIND))
	      ENDIF
	      GOTO 200
C
C otherwise output error message
C
	   ELSE
              IFF_LINE = I2DXF__BADPTSLIN
	      CALL LSL_PUTMSG(I2DXF__BADPTSLIN)
	      CALL LSL_ADDMSG(I2DXF__ATFSNFC,CURRFSN,IFFFCCODE(SELENTIND))
	      GOTO 1000
	   ENDIF
C
C---------------------------------------------------------------------
C NO_OF_PTS >= 3
C   and test if (DXF entity type) equal POLYLINE, TRACE or SOLID
C
C the POLYLINE first
C
	ELSE
           IF (DXFENTTYP(SELENTIND).EQ.DXFPOLYLINE) THEN
	      GOTO 300
C
C force entity type to POLYLINE
C
	   ELSEIF (DXFENTTYP(SELENTIND).EQ.DXFLINE) THEN
	      IF (.NOT.HAD_QUIET) THEN
		 CALL LSL_PUTMSG(I2DXF__POLYUSED)
		 CALL LSL_ADDMSG(I2DXF__ATFSNFC,CURRFSN,IFFFCCODE(SELENTIND))
	      ENDIF
	      GOTO 300
C
C then the TRACE and SOLID
C
	   ELSEIF (DXFENTTYP(SELENTIND).EQ.DXFTRACE .OR. 
     &		   DXFENTTYP(SELENTIND).EQ.DXFSOLID ) THEN
C
C Unclose points
C
	      IF ( PT_BUFFER(1,1).EQ.PT_BUFFER(1,NO_OF_PTS) .AND. 
     &		   PT_BUFFER(2,1).EQ.PT_BUFFER(2,NO_OF_PTS) ) 
     &				NO_OF_PTS = NO_OF_PTS - 1
              GOTO 400
	   ELSE
	      IF (.NOT.HAD_QUIET) THEN
		 CALL LSL_PUTMSG(I2DXF__POLYUSED)
		 CALL LSL_ADDMSG(I2DXF__ATFSNFC,CURRFSN,IFFFCCODE(SELENTIND))
	      ENDIF
	      GOTO 300
	   ENDIF
	ENDIF
C
C---------------------------------------------------------------------
C output DXF LINE format 
C
200	CONTINUE
C
        CALL FLWSTR( '  0' )
        CALL FLWSTR( 'LINE' )
        CALL FLWSTR( '  8' )
        CALL FLWRTF( '%S',DXFLAYNAM(SELLAYIND)
     &				(1:DXFLAYLEN(SELLAYIND)) ) 
        CALL FLWSTR( '  6' )
        CALL FLWRTF( '%S',DXFENTNAM(SELENTIND)
     &				(1:DXFENTLEN(SELENTIND)) ) 
        CALL FLWSTR( ' 62' )
        CALL FLWRTF( '%^W%N6',ENTCOLOUR(SELENTIND) ) 
	IF (HAD_HT) THEN
           CALL FLWSTR( ' 38' )
           CALL FLWRTF( '%F',AC_HT)
	ENDIF
C
	IF (HAD_ABS) THEN
	   CALL FLWSTR( ' 10' )
	   CALL FLWRTF( '%^D%F',PT_BUFFER(1,1) + MD2LOC(1) )
C
	   CALL FLWSTR( ' 20' )
	   CALL FLWRTF( '%^D%F',PT_BUFFER(2,1) + MD2LOC(2) )
C
	   IF (HAD_ZS) THEN
              CALL FLWSTR( ' 30' )
              CALL FLWRTF( '%F',PT_BUFFER(3,1) )
	   ENDIF
C
	   CALL FLWSTR( ' 11' )
	   CALL FLWRTF( '%^D%F',PT_BUFFER(1,2) + MD2LOC(1) )
C
	   CALL FLWSTR( ' 21' )
	   CALL FLWRTF( '%^D%F',PT_BUFFER(2,2) + MD2LOC(2) )
C
	   IF (HAD_ZS) THEN
              CALL FLWSTR( ' 31' )
              CALL FLWRTF( '%F',PT_BUFFER( 3,2 ) )
	   ENDIF
	ELSE
	   CALL FLWSTR( ' 10' )
	   CALL FLWRTF( '%F',PT_BUFFER(1,1) )
C
	   CALL FLWSTR( ' 20' )
	   CALL FLWRTF( '%F',PT_BUFFER(2,1) )
C
	   IF (HAD_ZS) THEN
              CALL FLWSTR( ' 30' )
              CALL FLWRTF( '%F',PT_BUFFER(3,1) )
	   ENDIF
C
	   CALL FLWSTR( ' 11' )
	   CALL FLWRTF( '%F',PT_BUFFER(1,2) )
C
	   CALL FLWSTR( ' 21' )
	   CALL FLWRTF( '%F',PT_BUFFER(2,2) )
C
	   IF (HAD_ZS) THEN
              CALL FLWSTR( ' 31' )
              CALL FLWRTF( '%F',PT_BUFFER(3,2) )
	   ENDIF
	ENDIF
C
	GOTO 500
C
C---------------------------------------------------------------------
C output POLYLINE format
C
300	CONTINUE
C
C now check for the graphical types
C
	IF (FRTGTTYPE(SELENTIND).EQ.ARETYP) THEN 
C
C check whether the area closes
C
C****************************************************************
C
C NB. THIS ONLY CLOSES THE FIRST BLOCK. IF MORE THAN ONE BLOCK OF
C     COORDINATES, STRANGE RESULTS WILL RESULT
C
C****************************************************************
C
	   IF ( PT_BUFFER(1,1).NE.PT_BUFFER(1,NO_OF_PTS) .OR. 
     &		PT_BUFFER(2,1).NE.PT_BUFFER(2,NO_OF_PTS) ) THEN
	      NO_OF_PTS = NO_OF_PTS + 1
              PT_BUFFER( 1,NO_OF_PTS ) = PT_BUFFER( 1,1 )
              PT_BUFFER( 2,NO_OF_PTS ) = PT_BUFFER( 2,1 )
           ENDIF
	ENDIF
C
        CALL FLWSTR( '  0' )
        CALL FLWSTR( 'POLYLINE' )
        CALL FLWSTR( '  8' )
        CALL FLWRTF( '%S',DXFLAYNAM(SELLAYIND)
     &				(1:DXFLAYLEN(SELLAYIND)) ) 
        CALL FLWSTR( '  6' )
        CALL FLWRTF( '%S',DXFENTNAM(SELENTIND)
     &				(1:DXFENTLEN(SELENTIND)) ) 
        CALL FLWSTR( ' 62' )
        CALL FLWRTF( '%^W%N6',ENTCOLOUR(SELENTIND) ) 
        CALL FLWSTR( ' 66' )
        CALL FLWSTR( '     1' )
C
	IF (HAD_HT) THEN
           CALL FLWSTR( ' 38' )
           CALL FLWRTF( '%F',AC_HT )
	ENDIF
C
	IF (HAD_ZS) THEN
           CALL FLWSTR( ' 70' )		! output flag denoting
           CALL FLWRTF( '     8' )	! 3D polyline
	ENDIF
C
C now output each VERTEX of the POLYLINE
C
        DO 101 TEMP_COUNTER = 1,NO_OF_PTS
           CALL FLWSTR( '  0' )
           CALL FLWSTR( 'VERTEX' )
           CALL FLWSTR( '  8' )
           CALL FLWRTF( '%S',DXFLAYNAM(SELLAYIND)
     &	   			(1:DXFLAYLEN(SELLAYIND)) ) 
           CALL FLWSTR( ' 62' )
           CALL FLWRTF( '%^W%N6',ENTCOLOUR(SELENTIND) ) 
C
	   IF (HAD_ZS) THEN
              CALL FLWSTR( ' 70' )		! output flag denoting
              CALL FLWRTF( '    32' )		! 3D polyline vertex
	   ENDIF
C
	   IF (HAD_ABS) THEN
	      CALL FLWSTR( ' 10' )
	      CALL FLWRTF( '%^D%F',PT_BUFFER(1,TEMP_COUNTER) + MD2LOC(1) )
C
	      CALL FLWSTR( ' 20' )
	      CALL FLWRTF( '%^D%F',PT_BUFFER(2,TEMP_COUNTER) + MD2LOC(2) )
	   ELSE
	      CALL FLWSTR( ' 10' )
	      CALL FLWRTF( '%F',PT_BUFFER(1,TEMP_COUNTER) )
C
	      CALL FLWSTR( ' 20' )
	      CALL FLWRTF( '%F',PT_BUFFER(2,TEMP_COUNTER) )
	   ENDIF
C
	   IF (HAD_ZS) THEN
              CALL FLWSTR( ' 30' )
              CALL FLWRTF( '%F',PT_BUFFER( 3,TEMP_COUNTER ) )
	   ENDIF
C
101     CONTINUE
C
        CALL FLWSTR( '  0' )
        CALL FLWSTR( 'SEQEND' )
C
        GOTO 500
C
C---------------------------------------------------------------------
C then the TRACE and SOLID
C
400	CONTINUE
C
	IF (NO_OF_PTS.EQ.3 .OR. NO_OF_PTS.EQ.4 ) THEN
	   IF (DXFENTTYP(SELENTIND).EQ.DXFTRACE .AND.
     &	      	 			NO_OF_PTS.EQ.3) THEN
	      IFF_LINE = I2DXF__BADPTSLIN
	      CALL LSL_PUTMSG(I2DXF__BADPTSLIN)
	      CALL LSL_ADDMSG(I2DXF__ATFSNFC,CURRFSN,IFFFCCODE(SELENTIND))
	      GOTO 1000
           ENDIF
C
           CALL FLWSTR( '  0' )
C
	   IF (DXFENTTYP(SELENTIND).EQ.DXFTRACE) THEN
              CALL FLWSTR( 'TRACE' )
	   ELSEIF (DXFENTTYP(SELENTIND).EQ.DXFSOLID) THEN
              CALL FLWSTR( 'SOLID' )
           ENDIF
C
           CALL FLWSTR( '  8' )
           CALL FLWRTF( '%S',DXFLAYNAM(SELLAYIND)
     &				(1:DXFLAYLEN(SELLAYIND)) ) 
           CALL FLWSTR( '  6' )
           CALL FLWRTF( '%S',DXFENTNAM(SELENTIND)
     &				(1:DXFENTLEN(SELENTIND)) ) 
           CALL FLWSTR( ' 62' )
           CALL FLWRTF( '%^W%N6',ENTCOLOUR(SELENTIND) ) 
C
	   IF (HAD_HT) THEN
              CALL FLWSTR( ' 38' )
              CALL FLWRTF( '%F',AC_HT)
	   ENDIF
C
	   IF (HAD_ABS) THEN
	      CALL FLWSTR( ' 10' )
	      CALL FLWRTF( '%^D%F',PT_BUFFER(1,1) + MD2LOC(1) )
	      CALL FLWSTR( ' 20' )
	      CALL FLWRTF( '%^D%F',PT_BUFFER(2,1) + MD2LOC(2) )
C
	      IF (HAD_ZS) THEN
                 CALL FLWSTR( ' 30' )
                 CALL FLWRTF( '%F',PT_BUFFER(3,1) )
	      ENDIF
C
	      CALL FLWSTR( ' 11' )
	      CALL FLWRTF( '%^D%F',PT_BUFFER(1,2) + MD2LOC(1) )
	      CALL FLWSTR( ' 21' )
	      CALL FLWRTF( '%^D%F',PT_BUFFER(2,2) + MD2LOC(2) )
C
	      IF (HAD_ZS) THEN
                 CALL FLWSTR( ' 31' )
                 CALL FLWRTF( '%F',PT_BUFFER(3,2) )
	      ENDIF
C
	      CALL FLWSTR( ' 12' )
	      CALL FLWRTF( '%^D%F',PT_BUFFER(1,3) + MD2LOC(1) )
	      CALL FLWSTR( ' 22' )
	      CALL FLWRTF( '%^D%F',PT_BUFFER(2,3) + MD2LOC(2) )
C
	      IF (HAD_ZS) THEN
                 CALL FLWSTR( ' 32' )
                 CALL FLWRTF( '%F',PT_BUFFER(3,3) )
	      ENDIF
C
	      IF (NO_OF_PTS.EQ.3) THEN
                 CALL FLWSTR( ' 13' )
                 CALL FLWRTF( '%^D%F',PT_BUFFER(1,3) + MD2LOC(1) )
                 CALL FLWSTR( ' 23' )
                 CALL FLWRTF( '%^D%F',PT_BUFFER(2,3) + MD2LOC(2) )
C
	         IF (HAD_ZS) THEN
                    CALL FLWSTR( ' 33' )
                    CALL FLWRTF( '%F',PT_BUFFER(3,3) )
	         ENDIF
	      ELSE
                 CALL FLWSTR( ' 13' )
                 CALL FLWRTF( '%^D%F',PT_BUFFER(1,4) + MD2LOC(1) )
                 CALL FLWSTR( ' 23' )
                 CALL FLWRTF( '%^D%F',PT_BUFFER(2,4) + MD2LOC(2))
C
	         IF (HAD_ZS) THEN
                    CALL FLWSTR( ' 33' )
                    CALL FLWRTF( '%F',PT_BUFFER(3,4) )
	         ENDIF
	      ENDIF
C
	   ELSE
	      CALL FLWSTR( ' 10' )
	      CALL FLWRTF( '%F',PT_BUFFER(1,1) )
	      CALL FLWSTR( ' 20' )
	      CALL FLWRTF( '%F',PT_BUFFER(2,1) )
C
	      IF (HAD_ZS) THEN
                 CALL FLWSTR( ' 30' )
                 CALL FLWRTF( '%F',PT_BUFFER(3,1) )
	      ENDIF
C
	      CALL FLWSTR( ' 11' )
	      CALL FLWRTF( '%F',PT_BUFFER(1,2) )
	      CALL FLWSTR( ' 21' )
	      CALL FLWRTF( '%F',PT_BUFFER(2,2) )
C
	      IF (HAD_ZS) THEN
                 CALL FLWSTR( ' 31' )
                 CALL FLWRTF( '%F',PT_BUFFER(3,2) )
	      ENDIF
C
	      CALL FLWSTR( ' 12' )
	      CALL FLWRTF( '%F',PT_BUFFER(1,3) )
	      CALL FLWSTR( ' 22' )
	      CALL FLWRTF( '%F',PT_BUFFER(2,3) )
C
	      IF (HAD_ZS) THEN
                 CALL FLWSTR( ' 32' )
                 CALL FLWRTF( '%F',PT_BUFFER(3,3) )
	      ENDIF
C
	      IF (NO_OF_PTS.EQ.3) THEN
                 CALL FLWSTR( ' 13' )
                 CALL FLWRTF( '%F',PT_BUFFER(1,3) )
                 CALL FLWSTR( ' 23' )
                 CALL FLWRTF( '%F',PT_BUFFER(2,3) )
C
	         IF (HAD_ZS) THEN
                    CALL FLWSTR( ' 33' )
                    CALL FLWRTF( '%F',PT_BUFFER(3,3) )
	         ENDIF
	      ELSE
                 CALL FLWSTR( ' 13' )
                 CALL FLWRTF( '%F',PT_BUFFER(1,4) )
                 CALL FLWSTR( ' 23' )
                 CALL FLWRTF( '%F',PT_BUFFER(2,4) )
C
	         IF (HAD_ZS) THEN
                    CALL FLWSTR( ' 33' )
                    CALL FLWRTF( '%F',PT_BUFFER(3,4) )
	         ENDIF
	      ENDIF
	   ENDIF
C
	ELSE
	   IFF_LINE = I2DXF__BADPTSLIN
	   CALL LSL_PUTMSG(I2DXF__BADPTSLIN)
	   CALL LSL_ADDMSG(I2DXF__ATFSNFC,CURRFSN,IFFFCCODE(SELENTIND))
	   GOTO 1000
	ENDIF
C
C---------------------------------------------------------------------
C the following is implemented as IFF format can contain more
C    than one line in a feature. The lines being read are then 
C    stored separately in DXF format.
C this is valid only for DXF LINE and POLYLINE
C
C*************************************************************
C
C NB. IF FIRST POINT OF SECOND BLOCK IS NOT EQUAL TO LAST 
C     POINT OF THE PREVIOUS, THERE WILL BE A BREAK
C
C*************************************************************
C
500	CONTINUE
C
	CALL IFFNXT( IECODE,IELEN )
	IF ( IECODE.EQ.'EF' ) GOTO 1000
	IF ( IECODE.EQ.'ST' ) GOTO 102
	IF ( IECODE.EQ.'ZS' ) GOTO 102
C
C Exit
1000	RETURN
	END 
C
