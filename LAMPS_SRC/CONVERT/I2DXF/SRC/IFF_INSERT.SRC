C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-12-19 11:41:02.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION IFF_INSERT( )
C
***	IDENT	19DE94
***	MODULE	IFF_INSERT
C
C Copyright (C) Laser-Scan Ltd, Cambridge, England
C
C Author  :  Paul Pan, 5 September 1989
C Modified:  Paul Pan, 13 March 1990
C	     to introduce PARAMETER file handling
C
CMOD960	     Jon Barber 			 	 4-Feb-1991
C	     Output AC heights to group 38, ZS contents
C	     only to 3x groups
C
CMOD1125     Jon Barber					13-Jul-1992
C	     Use abs coords for /ABSOLUTE qualifier
C
CMOD1156     Jon Barber				 	19-Oct-1992
C	     Always output a rotation, even when 0.0
C
CMOD1439     Jon Barber				 	05-Dec-1994
C	     Do not use IFF_ABSENT as a 'real' number,
C	     preventing an AXP crash.
C
C Purpose :  Converts an IFF Symbol definition into its DXF counterpart
C
        IMPLICIT NONE
C
C Messages:
	INCLUDE	 'HERE:I2DXFMSG.PAR'
C
C Common Blocks:
	INCLUDE  'LSL$CMNIFF:CB.STR'		! for IFF_ABSENT
	INCLUDE  'LSL$CMNDXFPAR:LOOKUP.CMN'
	INCLUDE  'HERE:I2DXF.CMN'		! added on 28/02/90
        INCLUDE  'HERE:FEATURE.CMN'
        INCLUDE  'HERE:POINT.CMN'
C
C Workspace:
	INTEGER	    	IERR		! function return, not used
	INTEGER*2   	IELEN		! end of file/entry length
        INTEGER*2   	IECODE 		! not used
	INTEGER     	I		! Loop counter
	REAL*4		SCALE
	REAL*4		ROTATE_ANGLE(1)
	LOGICAL		HAD_SCA
	LOGICAL		HAD_RO
	REAL*4		REAL_X
	REAL*4		REAL_Y
	REAL*4		ABSREAL_X
	REAL*4		ABSREAL_Y
C
	INTEGER	    INT_EQUIV			! for IFF_ABSENT comparison
	REAL	    REAL_EQUIV
	EQUIVALENCE (INT_EQUIV,REAL_EQUIV)
C
C----------------------------------------------------------------
C output DXF file has already been selected
C
	IFF_INSERT = I2DXF__NORMAL
C
	HAD_SCA = .FALSE.
	HAD_RO	= .FALSE.
	SCALE   = 1.0
	ROTATE_ANGLE(1) = 0.0
C
C----------------------------------------------------------------
C test whether input DXF ENTITY type is legal for this routine
C    valid DXF entry is:
C    	   INSERT
C
	IF (DXFENTTYP(SELENTIND).EQ.DXFINSERT) GOTO 5000
C
C report illegal cross-referencing and leave the routine
C
	IFF_INSERT = I2DXF__BADCROSREF
	CALL LSL_PUTMSG(I2DXF__BADCROSREF)
	CALL LSL_ADDMSG(I2DXF__ATFSNFC,CURRFSN,IFFFCCODE(SELENTIND))
	GOTO 1000
C
C----------------------------------------------------------------
C diversion
C
5000	CALL IFFNXT(IECODE,IELEN)
	IF (IECODE.EQ.'RO') GOTO 102
	IF (IECODE.EQ.'ST') GOTO 103
        IF (IECODE.EQ.'ZS') GOTO 103
	IF (IECODE.EQ.'EF') GOTO 104
C
	GOTO 5000
C
C----------------------------------------------------------------
C extract rotation angle, just for oriented symbol
C
102    	CONTINUE
C
C error handling
C
	IF ( IELEN.EQ.-1 ) THEN
	   IFF_INSERT = I2DXF__BADCOORD
           CALL LSL_PUTMSG(I2DXF__BADCOORD)
	   CALL LSL_ADDMSG(I2DXF__ATFSNFC,CURRFSN,IFFFCCODE(SELENTIND))
           GOTO 1000
        ENDIF
C
C rotation angle
	CALL EIHRR(ROTATE_ANGLE,1,1)
	IF (.NOT.HAD_RO) THEN
	   ROTATE_ANGLE(1) = ROTATE_ANGLE(1) * 180 / PI
	   HAD_RO = .TRUE.
	ENDIF
C
	GOTO 5000
C
C----------------------------------------------------------------
C extract data points
C
103     CONTINUE
C
C error handling
	IF ( IELEN.EQ.-1 ) THEN
	   IFF_INSERT = I2DXF__BADCOORD
           CALL LSL_PUTMSG(I2DXF__BADCOORD)
	   CALL LSL_ADDMSG(I2DXF__ATFSNFC,CURRFSN,IFFFCCODE(SELENTIND))
           GOTO 1000
        ENDIF
C
C now extract the number of points in the feature 
        CALL EIHRS( NO_OF_PTS,PEN )
C
C as it is a POINT feature, the number should be equal to 1 or 2
C    so if not, error status will be raised 
C
        IF (NO_OF_PTS.LT.1 .OR. NO_OF_PTS.GT.2) THEN
	   IFF_INSERT = I2DXF__BADCOORD
           CALL LSL_PUTMSG(I2DXF__BADCOORD)
	   CALL LSL_ADDMSG(I2DXF__ATFSNFC,CURRFSN,IFFFCCODE(SELENTIND))
           GOTO 1000
        ENDIF
C
C now extract the coordinate data from the file
	IF ( IECODE.EQ.'ZS' ) THEN
C
C Read block of x, y, z points into buffer
	   CALL EIHRR(PT_BUFFER, NO_OF_PTS*3, 1)
	   HAD_ZS = .TRUE.
C
	ELSE
	   DO 500 I=1,NO_OF_PTS
C
C Read 1 point at a time because reading a block would put mix up the
C values by putting a pair of values into a 3D array.
C
	      CALL EIHRR(PT_BUFFER(1,I),2,I*4-3)
500	   CONTINUE      
	ENDIF
C
C calculate the scale and rotation for SCALED SYMBOL
C
	IF (NO_OF_PTS.EQ.2) THEN
	   REAL_X = PT_BUFFER(1,2) - PT_BUFFER(1,1)
	   REAL_Y = PT_BUFFER(2,2) - PT_BUFFER(2,1)
	   ABSREAL_X = ABS(REAL_X)
	   ABSREAL_Y = ABS(REAL_Y)
C
C SCALE
	   SCALE = SQRT((REAL_X * REAL_X) + (REAL_Y * REAL_Y)) 
	   HAD_SCA = .TRUE.
C
C ROTATION
	   ROTATE_ANGLE(1) = ATAN2(REAL_Y,REAL_X)
	   ROTATE_ANGLE(1) = ROTATE_ANGLE(1) * 180/PI
	   HAD_RO = .TRUE.
	ENDIF
C
	GOTO 5000
C
C----------------------------------------------------------------
C output the data to a DXF file
C
104	CONTINUE
C
        CALL FLWSTR( '  0' )
        CALL FLWSTR( 'INSERT' )
        CALL FLWSTR( '  8' )
        CALL FLWRTF( '%S',DXFLAYNAM(SELLAYIND)
     &				(1:DXFLAYLEN(SELLAYIND)) ) 
        CALL FLWSTR( '  2' )
        CALL FLWRTF( '%S',DXFENTNAM(SELENTIND)
     &				(1:DXFENTLEN(SELENTIND)) ) 
        CALL FLWSTR( ' 62' )
        CALL FLWRTF( '%^W%N6',ENTCOLOUR(SELENTIND) ) 
C
	CALL OUTPUT_COORD(PT_BUFFER(1,1), PT_BUFFER(2,1), 1)
C
	REAL_EQUIV = PT_BUFFER(3,1)
	IF (HAD_ZS .AND. INT_EQUIV.NE.IFF_ABSENT) THEN
	   CALL FLWSTR( ' 30' )
	   CALL FLWRTF( '%F',PT_BUFFER(3,1) )
	ENDIF
C
	IF (HAD_HT) THEN
	   CALL FLWSTR( ' 38' )
	   CALL FLWRTF( '%F',AC_HT )		! use height from AC.
	ENDIF
C
	IF (FRTGTTYPE(SELENTIND).EQ.9) THEN
	   IF (HAD_SCA) THEN
              CALL FLWSTR(' 42')
              CALL FLWRTF('%F',SCALE)
	   ENDIF
C
	   IF (HAD_RO) THEN
              CALL FLWSTR(' 50')
              CALL FLWRTF('%F',ROTATE_ANGLE(1))
C
	   ELSE
              CALL FLWSTR(' 50')
              CALL FLWRTF('%F',0.0)
	   ENDIF
C
	ELSEIF (FRTGTTYPE(SELENTIND).EQ.8) THEN
	   IF (HAD_RO) THEN
              CALL FLWSTR(' 50')
              CALL FLWRTF('%F',ROTATE_ANGLE(1))
C
	   ELSE
              CALL FLWSTR(' 50')
              CALL FLWRTF('%F',0.0)
	   ENDIF
	ENDIF
C
C Exit
1000	RETURN
	END
C
