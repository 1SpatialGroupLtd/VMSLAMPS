	LOGICAL FUNCTION IFF_POLY( )
C
***	IDENT	02SE92
***	MODULE 	IFF_POLY
C
C Copyright (C) Laser-Scan Ltd, Cambridge, England
C
C Author  :  Paul Pan, 5 September 1989
C Modified:  Paul Pan, 13 March 1990 to introduce PARAMETER file handling
C
CMOD960	     Jon Barber 				4 Feb 1991
C	     Output AC heights to group 38, ZS contents only to 3x groups
C
CMOD1125     Jon Barber				 	13-Jul-1992
C	     Use abs coords for /ABSOLUTE qualifier
C
CMOD1146     Jon Barber				 	01-Sep-1992
C	     Fix breaks between coordinate blocks by using the
C	     last point as the first point of the next block
C
C Purpose :  Convert IFF Interpolated Curve, Symbol String and Area 
C		features into DXF Polyline format
C
        IMPLICIT NONE
C
C Messages:
C
	INCLUDE	 'HERE:I2DXFMSG.PAR'
C
C Common Blocks:
C
        INCLUDE  'LSL$CMNIFF:MD2DES.CMN'
        INCLUDE  'LSL$CMNFRT:FRTCOM.CMN'        ! added on 17 October 89
	INCLUDE  'LSL$CMNDXFPAR:LOOKUP.CMN'
	INCLUDE  'HERE:I2DXF.CMN'		! added on 28/02/90
        INCLUDE  'HERE:FEATURE.CMN'
        INCLUDE  'HERE:POINT.CMN'
C
C Workspace:
C
	INTEGER     I		        ! DO loop counter
	INTEGER*2   IELEN		! end of file/entry length
        INTEGER*2   IECODE   
        INTEGER     TEMP_COUNTER
	real	    last_coord(3)
C
C----------------------------------------------------------------
C output DXF file has already been selected
C
        IFF_POLY = I2DXF__NORMAL
C
C----------------------------------------------------------------
C test whether input DXF ENTITY type is legal for this routine
C    valid DXF entry is:
C    	   POLYLINE
C
	IF (DXFENTTYP(SELENTIND).EQ.DXFPOLYLINE) GOTO 104
C
C report illegal cross-referencing and leave the routine
C	
        IFF_POLY = I2DXF__BADCROSREF
	CALL LSL_PUTMSG(I2DXF__BADCROSREF)
	CALL LSL_ADDMSG(I2DXF__ATFSNFC,CURRFSN,IFFFCCODE(SELENTIND))
	GOTO 1000
C
C----------------------------------------------------------------
C extract record by record from the IFF file 
C    we just consider the entry containing the area boundary data points
C
104	CALL IFFNXT( IECODE,IELEN )
        IF( IECODE.EQ.'ST' ) GOTO 102
        IF( IECODE.EQ.'ZS' ) GOTO 102
        IF( IECODE.EQ.'EF' ) GOTO 1000
C
	GOTO 104
C
C read the data points
C    extract total number of points in the feature
C
102     CONTINUE
C
        CALL EIHRS(NO_OF_PTS,PEN)
C
C extract the data points now
C
	IF ( IECODE.EQ.'ZS' ) THEN
C
C Read block of x, y, z points into buffer
C If pen down, get last point of previous block to start this block
C
	   IF (PEN.EQ.PEN_DOWN)	THEN
	      PT_BUFFER(1,1) = LAST_COORD(1)
	      PT_BUFFER(2,1) = LAST_COORD(2)
	      PT_BUFFER(3,1) = LAST_COORD(3)
C
	      CALL EIHRR(PT_BUFFER(1,2), NO_OF_PTS*3, 1)  ! ZS - read 3 values
C
	      NO_OF_PTS = NO_OF_PTS + 1			  ! appended to last pt
	   ELSE
	      CALL EIHRR(PT_BUFFER, NO_OF_PTS*3, 1)	  ! ZS - read 3 values
	   ENDIF
C
	   HAD_ZS = .TRUE.
	ELSE
	   IF (PEN.EQ.PEN_DOWN)	THEN
	      PT_BUFFER(1,1) = LAST_COORD(1)
	      PT_BUFFER(2,1) = LAST_COORD(2)
C
	      DO 97 I = 1,NO_OF_PTS
C
C Read 1 point at a time because reading a block would mix up the values
C by putting a pair of values into a 3D array.
	         CALL EIHRR(PT_BUFFER(1,I+1),2,I*4-3)
97	      CONTINUE
C
	      NO_OF_PTS = NO_OF_PTS + 1
	   ELSE
	      DO 98 I = 1,NO_OF_PTS
	         CALL EIHRR(PT_BUFFER(1,I),2,I*4-3)
98	      CONTINUE
	   ENDIF
	ENDIF
C
C Store last coord in case the next ST/ZS block is pen down
C
	LAST_COORD(1) = PT_BUFFER(1,NO_OF_PTS)
	LAST_COORD(2) = PT_BUFFER(2,NO_OF_PTS)
	IF (HAD_ZS) LAST_COORD(3) = PT_BUFFER(3,NO_OF_PTS)
C
C now check for the graphical types
C
	IF (FRTGTTYPE(SELENTIND).EQ.ARETYP) THEN 
C
C check whether the area closes
C
C****************************************************************
C
C NB. THIS ONLY CLOSES THE FIRST BLOCK. IF MORE THAN ONE BLOCK OF
C     COORDINATES, STRANGE RESULTS WILL RESULT
C
C****************************************************************
C
	   IF ( PT_BUFFER(1,1).NE.PT_BUFFER(1,NO_OF_PTS) .OR. 
     &		PT_BUFFER(2,1).NE.PT_BUFFER(2,NO_OF_PTS) ) THEN
	      NO_OF_PTS = NO_OF_PTS + 1
              PT_BUFFER( 1,NO_OF_PTS ) = PT_BUFFER( 1,1 )
              PT_BUFFER( 2,NO_OF_PTS ) = PT_BUFFER( 2,1 )
           ENDIF
	ENDIF
C
C output the area now
C
105	CONTINUE
C
        CALL FLWSTR( '  0' )
        CALL FLWSTR( 'POLYLINE' )
        CALL FLWSTR( '  8' )
        CALL FLWRTF( '%S',DXFLAYNAM(SELLAYIND)
     &				(1:DXFLAYLEN(SELLAYIND)) ) 
        CALL FLWSTR( '  6' )
        CALL FLWRTF( '%S',DXFENTNAM(SELENTIND)
     &				(1:DXFENTLEN(SELENTIND)) ) 
        CALL FLWSTR( ' 62' )
        CALL FLWRTF( '%^W%N6',ENTCOLOUR(SELENTIND) ) 
        CALL FLWSTR( ' 66' )
        CALL FLWSTR( '     1' )
C
	IF (HAD_HT) THEN
	   CALL FLWSTR( ' 38' )
	   CALL FLWRTF( '%F',AC_HT)
	ENDIF
C
	IF (HAD_ZS) THEN
	   CALL FLWSTR( ' 70' )		! output flag denoting
	   CALL FLWSTR( '     8' )	! 3D polyline
	ENDIF
C
C now output each VERTEX of the POLYLINE
C
        DO 101 TEMP_COUNTER = 1,NO_OF_PTS
           CALL FLWSTR( '  0' )
           CALL FLWSTR( 'VERTEX' )
           CALL FLWSTR( '  8' )
           CALL FLWRTF( '%S',DXFLAYNAM(SELLAYIND)
     &				(1:DXFLAYLEN(SELLAYIND)) ) 
           CALL FLWSTR( ' 62' )
           CALL FLWRTF( '%^W%N6',ENTCOLOUR(SELENTIND) ) 
C
	   IF (HAD_ZS) THEN
	      CALL FLWSTR( ' 70' )		! output flag denoting
	      CALL FLWSTR( '    32' )		! 3D polyline vertex
	   ENDIF
C
	   IF (HAD_ABS) THEN
	      CALL FLWSTR( ' 10' )
	      CALL FLWRTF( '%^D%F',PT_BUFFER(1,TEMP_COUNTER) + MD2LOC(1) )
	      CALL FLWSTR( ' 20' )
	      CALL FLWRTF( '%^D%F',PT_BUFFER(2,TEMP_COUNTER) + MD2LOC(2) )
	   ELSE
	      CALL FLWSTR( ' 10' )
	      CALL FLWRTF( '%F',PT_BUFFER(1,TEMP_COUNTER) )
	      CALL FLWSTR( ' 20' )
	      CALL FLWRTF( '%F',PT_BUFFER(2,TEMP_COUNTER) )
	   ENDIF
C
	   IF (HAD_ZS) THEN
	      CALL FLWSTR( ' 30' )
	      CALL FLWRTF( '%F',PT_BUFFER(3,TEMP_COUNTER) )
	   ENDIF
101     CONTINUE
C
        CALL FLWSTR( '  0' )
        CALL FLWSTR( 'SEQEND' )
        GOTO 104
C
C Exit
1000	RETURN
	END 
C
