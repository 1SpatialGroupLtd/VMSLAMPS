C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-07-09 18:42:06.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION SCAN_TABLES()
C
***	MODULE SCAN_TABLES
***	IDENT 09JL93
C
C ©Copyright Laser-Scan Ltd, Cambridge, England.
C
C Author  :  P. Pan					13 Mar 1990
C
CMOD1004     J Barber					14 Jun 1991
C	     Actually read the TABLES sections (for a change)
C	     and extract the layer colour for entity colouring
C	     by layer for $CECOLOR=256
C	     Enable linetype by layer for $CELTYPE=BYLAYER
C
C	     Make ERRLAYCOL and ERRLAYLTYPE warnings that the file is
C	     colour or linetype by layer with no colour or linetype given
C	     in the LAYER table definition
C
CMOD1226     J Barber					14 May 1993
C	     Copied from READ_TABLES for /SCAN
C
CMOD1251     J Barber					09 Jul 1993
C	     Check for previous layer occurrence before output
C	     to scan file
C
C To read table definitions from DXF file. 
C User must note that only LTYPE, LAYER, and STYLE are considered 
C for the time being.
C
	IMPLICIT NONE
C
	INCLUDE  'LSL$CMNLSL:READSTR.PAR'
	INCLUDE  'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE  'HERE:DXF2IMSG.PAR'
	INCLUDE	 'LSL$CMNDXFPAR:LOOKUP.CMN'
	INCLUDE  'HERE:DXF2I.CMN'
C
C Functions
	INTEGER 	FLRLIN			! read a line from file
	INTEGER 	FLWSTR			! write a line to file
	INTEGER 	READSTR			! get a string
	LOGICAL		RDREAL			! read real value
	LOGICAL		RDINT                   ! read an integer
	INTEGER*2	EXPAND
C
C Workspace
	LOGICAL		HAD_TEXT_NAME		! as it says
	LOGICAL		HAD_LAYER_COL		! as it says
	LOGICAL		HAD_LAYER_LTYPE		! as it says
	LOGICAL		NEW_TEXT_STYLE		! as it says
	LOGICAL		ERRCOD			! ok?
	INTEGER		IERR			! error code
	CHARACTER*255	STRING			! any old string
	CHARACTER*255	LAYER			! layer name
	CHARACTER*255	LAYER_OUT		! layer string for output
	CHARACTER*255	TEXT_NAME		! text name
	CHARACTER*20	LAYER_NAME
       	REAL*4		TEXT_WIDTH		! text width factor
       	REAL*4		TEXT_HEIGHT		! text height
	INTEGER 	I,J,K			! counters
	INTEGER 	LEN			! string length
	INTEGER*2	EXPLEN			! expanded string length
	INTEGER		COUNTER			! local counter
	INTEGER*2	COL_BUF			! colour
	INTEGER		LAYNUMLIN		! line no for layer name
	INTEGER		LINNUMLIN		! line no for line type
	INTEGER		STYNUMLIN		! line no for text style
C
C.......................................................................
C Assume everything fine and initialise layer counter
C
	IF (HAD_LOG) CALL LSL_PUTMSG(DXF2I__RDTBSC)
C
	CALL FLRSEL(DXFLUN)
	CALL FLWSEL(SCANLUN)
C
C Get the next line from the DXF file
C
99	SCAN_TABLES = FLRLIN()
	IF (.NOT.SCAN_TABLES) GOTO 999
C
C Search for layer command
C
	CALL BSLN
	NUMLIN = NUMLIN+1
	LEN = READSTR(STRING,,ON_EOL)
	IF (LEN.EQ.0) GOTO 99			! Account for null
C
C---------------------------------------------------------------------
C Delegate according to line contents
C end of section
C
	IF (STRING(1:LEN).EQ.'ENDSEC') THEN
	   GOTO 1000
C
	ELSEIF (STRING(1:LEN).EQ.'0') THEN
	   GOTO 99
C
	ELSEIF (STRING(1:LEN).EQ.'TABLE') THEN
	   GOTO 99
C
	ELSEIF (STRING(1:LEN).EQ.'2') THEN
	   GOTO 99
C
C---------------------------------------------------------------------
C have found layer table - search for each individual layer command 
C signifying a layer definition
C
	ELSEIF (STRING(1:LEN).EQ.'LAYER') THEN	! layers table
C
101	   SCAN_TABLES = FLRLIN()
	   IF (.NOT.SCAN_TABLES) GOTO 999
C
	   CALL BSLN
	   NUMLIN = NUMLIN+1
C
	   LEN = READSTR(STRING,,ON_EOL)
	   IF (LEN.EQ.0) GOTO 101		! Account for null
C
C End of layer table
C
	   IF (STRING(1:LEN).EQ.'ENDTAB') GOTO 99
C
C Have found new layer definition - assume layer name is two entries 
C further down the file and assign into the table name array 
C
104	   IF (STRING(1:LEN).EQ.'LAYER') THEN	! a new layer
	      SCAN_TABLES = FLRLIN()
	      IF (.NOT.SCAN_TABLES) GOTO 999
	      NUMLIN = NUMLIN+1
C
	      SCAN_TABLES = FLRLIN()
              IF (.NOT.SCAN_TABLES) GOTO 999
	      NUMLIN = NUMLIN+1
C
	      CALL BSLN
	      LEN = READSTR(LAYER,,ON_EOL)	! layer name
C
C check if LAYER name is missing
C
	      IF (LEN.EQ.0) THEN
		 SCAN_TABLES = DXF2I__UNACONT
		 CALL LSL_PUTMSG(DXF2I__ERRLAYNAM,NUMLIN)
		 GOTO 1000
              ENDIF
C
	      LAYNUMLIN = NUMLIN
C
C Search for a previous occurrence of the layer in the SCAN table
C
	      DO 2000 I = 1, SCAN_LAYER_CNT
		IF (LEN.EQ.SCAN_LAYER_LEN(I)) THEN
		   IF (LAYER(1:LEN).EQ.
     &				SCAN_LAYER(I)(1:SCAN_LAYER_LEN(I)) ) THEN
			GOTO 2001
		   ENDIF
		ENDIF
2000	      CONTINUE
C
	      IF (SCAN_LAYER_CNT.EQ.MAXSCANLAY) THEN
		CALL LSL_PUTMSG(DXF2I__TOOMNYLAYS,MAXSCANLAY)
		GOTO 1060
	      ENDIF
C
C Store the new layer in the SCAN table if there's room
C
	      SCAN_LAYER_CNT = SCAN_LAYER_CNT + 1
	      SCAN_LAYER_LEN(SCAN_LAYER_CNT)    = LEN
	      SCAN_LAYER(SCAN_LAYER_CNT) 	= LAYER(1:LEN)
C
C Write out layer name to SCAN parameter file if required
C
1060	      ILAYER = ILAYER + 1
C
C Format layers shorter then 20 characters
C
	      IF (LEN.LE.20) THEN
		CALL EXPAND('%WS% %S20',LAYER_NAME,LAYER(1:LEN))
C
		EXPLEN = EXPAND('%WS% LAYER  %S%  %^W%N',
     &					LAYER_OUT,
     &					LAYER_NAME(1:20),ILAYER)
	      ELSE
		EXPLEN = EXPAND('%WS% LAYER  %S%  %^W%N',
     &					LAYER_OUT,
     &					LAYER(1:LEN),ILAYER)
	      ENDIF
C
	      SCAN_TABLES = FLWSTR(LAYER_OUT(1:EXPLEN),IERR)
C
	      IF (.NOT.SCAN_TABLES) THEN
		 CALL LSL_PUTMSG(SCAN_TABLES)
		 IF (SCAN_TABLES.EQ.LSL__SYSERR) CALL LSL_ADDMSG(IERR)
		 GOTO 999
	      ENDIF
C
C Fill out the layer table
C
	      CURRLAYIND = CURRLAYIND + 1
	      DXFLAYLEN(CURRLAYIND) = LEN
	      DXFLAYNAM(CURRLAYIND) = LAYER(1:LEN)
C
C Continue reading the DXF file
C
2001	      CONTINUE
C
C Find the layer in layer table
C
	      DO 3000 COUNTER = 1,CURRLAYIND
		 IF (LEN.EQ.DXFLAYLEN(COUNTER)) THEN
		    IF (LAYER(1:LEN).EQ.DXFLAYNAM(COUNTER)(1:LEN))THEN
C
C Found layer in parameter file entries:
C if the entities are colour or linetype BY_LAYER, then search for the 
C '62' colour entry or '6' linetype entry
C
		       IF (.NOT.BY_LAYER .AND. .NOT.LTYPE_BY_LAYER) 
     &							     GOTO 101
C
		       HAD_LAYER_COL = .FALSE.
		       HAD_LAYER_LTYPE = .FALSE.
C
103		       SCAN_TABLES = FLRLIN()
		       IF (.NOT.SCAN_TABLES) GOTO 999
C
		       CALL BSLN
		       NUMLIN = NUMLIN+1       
	   	       LEN = READSTR(STRING,,ON_EOL)
C
                       IF (STRING(1:LEN).EQ.'62') THEN
		   	  SCAN_TABLES = FLRLIN()
		          IF (.NOT.SCAN_TABLES) GOTO 999
C
		      	  CALL BSLN
		      	  NUMLIN = NUMLIN+1       
		      	  ERRCOD = RDINT(COL_BUF)
                      	  IF (ERRCOD) THEN
			     SCAN_TABLES = DXF2I__UNACONT
			     GOTO 999
			  ENDIF
			  HAD_LAYER_COL = .TRUE.
                      	  DXFLAYCOL(COUNTER) = COL_BUF
			  GOTO 103
C
C Got layer LINETYPE, read linetype name
C
                       ELSEIF (STRING(1:LEN).EQ.'6') THEN
		   	  SCAN_TABLES = FLRLIN()
		          IF (.NOT.SCAN_TABLES) GOTO 999
		      	  NUMLIN = NUMLIN+1       
C
		      	  CALL BSLN
	   	          LEN = READSTR(STRING,,ON_EOL)
			  IF (LEN.EQ.0) THEN
			     SCAN_TABLES = DXF2I__UNACONT
			     CALL LSL_PUTMSG(DXF2I__ERRLAYNAM,NUMLIN)
		 	     GOTO 999
			  ENDIF

			  HAD_LAYER_LTYPE = .TRUE.
                      	  DXFLAYLTYPE(COUNTER) = STRING
                      	  DXFLAYLTLEN(COUNTER) = LEN
			  GOTO 103
C End of table
		       ELSEIF (STRING(1:LEN).EQ.'ENDTAB') THEN
			  IF (BY_LAYER .AND. .NOT.HAD_LAYER_COL) 
     &                 	     CALL LSL_PUTMSG(DXF2I__ERRLAYCOL,
     &              		DXFLAYNAM(COUNTER)(1:DXFLAYLEN(COUNTER)),
     &		      		LAYNUMLIN)
			  IF (LTYPE_BY_LAYER .AND. .NOT.HAD_LAYER_LTYPE) 
     &			     CALL LSL_PUTMSG(DXF2I__ERRLAYLTYPE,
     &              		DXFLAYNAM(COUNTER)(1:DXFLAYLEN(COUNTER)),
     &		      		LAYNUMLIN)	
C
			  GOTO 99
C
		       ELSEIF (STRING(1:LEN).EQ.'LAYER') THEN
			  IF (.NOT.HAD_LAYER_COL) 
     &                       CALL LSL_PUTMSG(DXF2I__ERRLAYCOL,
     &                   	DXFLAYNAM(COUNTER)(1:DXFLAYLEN(COUNTER)),
     &			 	LAYNUMLIN)
C
			  GOTO 104		! new layer & colour
C
                       ENDIF
C
		       GOTO 103
C
		    ENDIF
                 ENDIF
3000	      CONTINUE
C
C if not, report error
C	      CALL LSL_PUTMSG(DXF2I__UNDEFLAY,LAYER(1:LEN),LAYNUMLIN)
C
	   ENDIF
C
	   GOTO 101
C
C---------------------------------------------------------------------
C have found LTYPE table - search for each individual LTYPE command 
C signifying a LTYPE definition
C
	ELSEIF (STRING(1:LEN).EQ.'LTYPE') THEN
C
105	   SCAN_TABLES = FLRLIN()
	   IF (.NOT.SCAN_TABLES) GOTO 999
C
	   CALL BSLN
	   NUMLIN = NUMLIN+1
	   LEN = READSTR(STRING,,ON_EOL)
	   IF (LEN.EQ.0) GOTO 105		! Account for null
C
C End of LTYPE table
C
	   IF (STRING(1:LEN).EQ.'ENDTAB') GOTO 99
C
C have found new LTYPE definition - assume LTYPE name is two entries 
C further down the file
C
	   IF (STRING(1:LEN).EQ.'LTYPE') THEN
	      SCAN_TABLES = FLRLIN()
	      IF (.NOT.SCAN_TABLES) GOTO 999
C
	      NUMLIN = NUMLIN+1
	      LINNUMLIN = NUMLIN
	      SCAN_TABLES = FLRLIN()
              IF (.NOT.SCAN_TABLES) GOTO 999
C
	      CALL BSLN
	      NUMLIN = NUMLIN+1
	      LEN = READSTR(STRING,,ON_EOL)
C
C check if LTYPE name is missing
C
	      IF (LEN.EQ.0) THEN
		 SCAN_TABLES = DXF2I__UNACONT
		 CALL LSL_PUTMSG(DXF2I__ERRLINTYP,NUMLIN)
		 GOTO 1000
              ENDIF
C
C now check if the DXF LTYPE name is in the PARAMETER lookup table 
C	                                                       	
C	      DO 3001 COUNTER = 1,CURRLININD
C		 IF (LEN.EQ.DXFENTLEN(DXFLINTYP(COUNTER))) THEN
C		    IF (STRING(1:LEN).EQ.
C     &			DXFENTNAM(DXFLINTYP(COUNTER))(1:LEN)) GOTO 105
C		 ENDIF
C3001	      CONTINUE
C
C test if (LTYPE) equals CONTINUOUS, the default line type 
C
C	      IF (STRING(1:LEN).EQ.'CONTINUOUS') GOTO 105
C
C if not, report error
C	      CALL LSL_PUTMSG(DXF2I__UNDEFLIN,STRING(1:LEN),LINNUMLIN)
C
	   ENDIF
C
	   GOTO 105
C
C---------------------------------------------------------------------
C have found STYLE table - search for each individual STYLE command 
C signifying a STYLE definition
C
	ELSEIF (STRING(1:LEN).EQ.'STYLE') THEN
	   NEW_TEXT_STYLE = .TRUE.
C
107	   SCAN_TABLES = FLRLIN()
	   IF (.NOT.SCAN_TABLES) GOTO 999
C
	   CALL BSLN
	   NUMLIN = NUMLIN+1
	   LEN = READSTR(STRING,,ON_EOL)
	   IF (LEN.EQ.0) GOTO 107		! Account for null
C
C End of STYLE table
C
	   IF (STRING(1:LEN).EQ.'ENDTAB') THEN
	      GOTO 99
C
C have found new STYLE definition, then initialise the paras
C
	   ELSEIF (STRING(1:LEN).EQ.'STYLE') THEN
	      STYNUMLIN = NUMLIN
C
C get the text style name
C
	   ELSEIF (STRING(1:LEN).EQ.'2') THEN
	      SCAN_TABLES = FLRLIN()
	      IF (.NOT.SCAN_TABLES) GOTO 999
C
	      CALL BSLN
	      NUMLIN = NUMLIN+1
	      LEN = READSTR(TEXT_NAME,,ON_EOL)
C
C check if text style name is missing
C
	      IF (LEN.EQ.0) THEN
	         SCAN_TABLES = DXF2I__UNACONT
	         CALL LSL_PUTMSG(DXF2I__ERRTEXSTY,NUMLIN)
		 GOTO 1000
              ENDIF
C
C get the text height 
C
	   ELSEIF (STRING(1:LEN).EQ.'40') THEN
	      SCAN_TABLES = FLRLIN()
	      IF (.NOT.SCAN_TABLES) GOTO 999
C
	      CALL BSLN
	      NUMLIN = NUMLIN+1
	      ERRCOD = RDREAL(TEXT_HEIGHT)
C
C check if text width factor is valid
C
	      IF (ERRCOD) THEN
	         SCAN_TABLES = DXF2I__UNACONT
		 CALL LSL_PUTMSG(DXF2I__ERRTEXHGT,NUMLIN)
		 GOTO 1000
	      ENDIF
C
C get the text width factor
C
	   ELSEIF (STRING(1:LEN).EQ.'41') THEN
	      SCAN_TABLES = FLRLIN()
	      IF (.NOT.SCAN_TABLES) GOTO 999
C
	      CALL BSLN
	      NUMLIN = NUMLIN+1
	      ERRCOD = RDREAL(TEXT_WIDTH)
C
C check if text width factor is valid
C
	      IF (ERRCOD) THEN
	         SCAN_TABLES = DXF2I__UNACONT
		 CALL LSL_PUTMSG(DXF2I__ERRTEXHGT,NUMLIN)
		 GOTO 1000
	      ENDIF
	   ENDIF
C
C check if we've got everything
C
C	   IF (HAD_TEXT_NAME) THEN
C
C then check if the DXF STYLE name is in the PARAMETER lookup table
C	                 
C	      DO 3002 COUNTER = 1,CURRTEXIND
C		 IF (LEN.EQ.DXFENTLEN(DXFTEXSTY(COUNTER))) THEN
C		    IF (STRING(1:LEN).EQ.
C     &			DXFENTNAM(DXFTEXSTY(COUNTER))(1:LEN)) GOTO 107
C		 ENDIF
C3002	      CONTINUE
C
C if not, report error
C	      CALL LSL_PUTMSG(DXF2I__UNDEFTEX,STRING(1:LEN),STYNUMLIN)
C
C	   ENDIF
C
	   GOTO 107
C
	ELSE
	   GOTO 99
	ENDIF
C
	GOTO 1000
C.......................................................................
C
999	CALL LSL_PUTMSG(DXF2I__RDLINERR,NUMLIN)
C
1000	RETURN
	END
C
