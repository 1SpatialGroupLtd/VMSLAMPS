C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-12-06 17:18:56.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION DXF_LINE()
C
***	MODULE DXF_LINE
***	IDENT 06DE94
C
C ©Copyright Laser-Scan Ltd, Cambridge, England.
C
C Author  : P. Pan 					13 Mar 1990
C
C To read and translate DXF LINE entity to IFF feature
C
C Modified: P. Pan					 8 Jun 1990
C
CMOD961     J Barber					30 Jan 1991
C	    Add 3d coord reading into ZS entries
C	    and group 38 heights into AC type 3
C	    Change program action on DXF2I__MISENTCOL error to
C	    continue to transfer the coordinate data regardless
C
CMOD1004    J Barber 					13 Jun 1991
C	    Convert coordinates with any scale factors and x,y offsets
C	    from the parameter file if an EXPAND 'symbol' entry exists
C	    there and this routine was called from within the BLOCKS 
C	    section
C
CMOD1156    J Barber 					13 Oct 1992
C	    Add ABS coord changes
C
CMOD1226    J Barber 					10 Jun 1993
C	    Add /SCAN facility
C
CMOD1402    J Barber 					10 Sep 1994
C	    Cope with missing layer linetype name when
C	    the DXF file specifies linetype by layer.
C
CMOD1439    Jon Barber				 	06 Dec 1994
C	    Use IFF_ABSENT as a 'real' number in its absence from
C	    the DXF file
C
	IMPLICIT NONE
C
	INCLUDE  'LSL$CMNIFF:CB.STR'		! for IFF_ABSENT
	INCLUDE  'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE  'LSL$CMNLSL:READSTR.PAR'
	INCLUDE  'LSL$CMNLSL:TXTC.CMN'
	INCLUDE  'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE  'LSL$CMNIFF:MD2DES.CMN'
	INCLUDE  'LSL$CMNFRT:FRTCOM.CMN'
	INCLUDE  'LSL$CMNDXFPAR:LOOKUP.CMN'
	INCLUDE  'HERE:DXF2I.CMN'
	INCLUDE  'HERE:DXF2IMSG.PAR'
C
C Functions
	INTEGER		RDREAL		! Get a real
	INTEGER		RDDBLE		! Get a real
	INTEGER		RDINT		! Get an integer
	INTEGER		FLRLIN		! Read a line from file
	INTEGER		FLWSTR		! Write a line to file
	INTEGER		READSTR		! Get a string
	INTEGER*2	EXPAND
	LOGICAL		FRTFGT		! Get FC for GT
C
C Workspace
	CHARACTER*255	STRING		! Any old string
	INTEGER*4	LEN		! Length of character string
	CHARACTER*255	ENTITY_OUT	! output string
	INTEGER*2	EXPLEN		! expanded string length
	CHARACTER*20	STYLE_NAME	! output string
C
	CHARACTER*255	LAST_ENTITY_OUT	! last output string
	INTEGER*2	LAST_EXPLEN	! last expanded string length
	SAVE		LAST_ENTITY_OUT	! keep last output string 
	SAVE		LAST_EXPLEN	! keep last expanded string length
C
	INTEGER*2       FC(4)           ! Feature code etc.
C
	INTEGER*4	NCOORX		! Number of x coords in string
	INTEGER*4	NCOORY		! Number of y coords in string
	INTEGER*4	NCOORZ		! Number of z coords in string
	INTEGER*2	COLNUM		! Feature colour
	REAL		HEIGHT
	REAL		X,Y,Z,SCL
C
	LOGICAL		HAD_RAD		! Had circle radius?
	LOGICAL		HAD_LAY		! Had layer value?
	LOGICAL		HAD_COL 	! Had colour? 
	LOGICAL		HAD_LIN 	! Had line type?
	LOGICAL		HAD_X		! Had x coord?
	LOGICAL		HAD_Y		! Had y coord?
	LOGICAL		HAD_Z		! Had z coord?
	LOGICAL		HAD_2X		! Had second x coord?
	LOGICAL		HAD_2Y		! Had second y coord?
	LOGICAL		HAD_2Z		! Had second z coord?
	LOGICAL		HAD_3D		! Had 3d coords?
	LOGICAL		HAD_HT		! Had AC height?
C
	INTEGER		INT_EQUIV	! for IFF_ABSENT
	REAL		REAL_EQUIV
	EQUIVALENCE	(INT_EQUIV,REAL_EQUIV)
C
	LOGICAL		ERRCOD		! ok?
	INTEGER		IERR
        INTEGER		COUNTER,I	! local counter
	CHARACTER*255	LINTYPNAM	! line type name
	INTEGER		LINTYPLEN	! line type name's length
	CHARACTER*255	LAYERNAM	! layer name
	INTEGER		LAYERLEN	! layer name's length
	INTEGER		LINNUMLIN	! line position for line
C
C---------------------------------------------------------------------
C LINES
C---------------------------------------------------------------------
C Set defaults
C
	SELENTTYP = DXFLINE
	SELENTIND = 1
	HAD_LAY = .FALSE.
	HAD_LIN = .FALSE.
	HAD_COL = .FALSE.
	HAD_X   = .FALSE.
	HAD_Y   = .FALSE.
	HAD_Z   = .FALSE.
	HAD_2X  = .FALSE.
	HAD_2Y  = .FALSE.
	HAD_2Z  = .FALSE.
	HAD_3D  = .FALSE.
	HAD_HT  = .FALSE.
	NCOORX  = 1
	NCOORY  = 1
	NCOORZ  = 1
C
C---------------------------------------------------------------------
C read the entity
C
	LINNUMLIN = NUMLIN
C
99	DXF_LINE = FLRLIN()
	IF (.NOT.DXF_LINE) GOTO 999
C
	CALL BSLN
	NUMLIN = NUMLIN+1
	LEN = READSTR(STRING,,ON_EOL)
C
C..............................................................................
C '8' Layer 
C..............................................................................
C
	IF (STRING(1:LEN).EQ.'8') THEN
	   DXF_LINE = FLRLIN()
	   IF (.NOT.DXF_LINE) GOTO 999
C
	   CALL BSLN
	   NUMLIN = NUMLIN+1
	   LAYERLEN = READSTR(LAYERNAM,,ON_EOL)
C
C if an empty layer name is supplied, output error message
C
	   IF (LAYERLEN.EQ.0) THEN
	      CALL LSL_PUTMSG(DXF2I__ERRLAYNAM,NUMLIN)
C
C and use default from $CLAYER if present
C
	      IF (HAD_LAYER_NAME) THEN
	         LAYERLEN = DEF_LAYER_NAME_LEN
	         LAYERNAM = DEF_LAYER_NAME(1:DEF_LAYER_NAME_LEN)
		 IF (.NOT.HAD_QUIET) CALL LSL_ADDMSG(DXF2I__DEFLAYNAM,
     &				    LAYERNAM(1:LAYERLEN),LINNUMLIN)
	      ELSE
		 DXF_LINE = DXF2I__UNACONT
		 IF (.NOT.HAD_SCAN) GOTO 1000
	      ENDIF
	   ENDIF
C
	   HAD_LAY = .TRUE.
	   GOTO 99
C
C..............................................................................
C '6' line type
C..............................................................................
C
	ELSEIF (STRING(1:LEN).EQ.'6') THEN
	   DXF_LINE = FLRLIN()
	   IF (.NOT.DXF_LINE) GOTO 999
	   NUMLIN = NUMLIN+1
C
C if linetype by layer ignore entry
C
	   IF (LTYPE_BY_LAYER) GOTO 99
C
	   CALL BSLN
	   LINTYPLEN = READSTR(LINTYPNAM,,ON_EOL)
C
C if an empty line type is supplied, output error message and leave
C
	   IF (LINTYPLEN.EQ.0) THEN
	      CALL LSL_PUTMSG(DXF2I__ERRLINTYP,NUMLIN)
	      IF (.NOT.HAD_QUIET)
     &			CALL LSL_ADDMSG(DXF2I__DEFLINTYP,LINNUMLIN)
	      LINTYPLEN = 10
	      LINTYPNAM = 'CONTINUOUS'
	   ENDIF
C
	   HAD_LIN = .TRUE.
C
C if it's not empty, go and look for the appearence within the 
C PARAMETER lookup table
C
	   DO 5001 COUNTER = 1,CURRENTIND
	      IF (SELENTTYP.EQ.DXFENTTYP(COUNTER)) THEN
		 IF (LINTYPNAM(1:LINTYPLEN).EQ.DXFENTNAM(COUNTER)
     &			      (1:DXFENTLEN(COUNTER))) THEN
                    SELENTIND = COUNTER
		    GOTO 99
		 ENDIF
	      ENDIF
5001	   CONTINUE
C
C output error message when there is no match
C
	   IF (.NOT.HAD_SCAN) THEN
	      DXF_LINE = DXF2I__UNACONT
	      CALL LSL_PUTMSG(DXF2I__ERRMATLIN,
     &					LINTYPNAM(1:LINTYPLEN),LINNUMLIN)
	      GOTO 1000
	   ENDIF
C
	   GOTO 99
C..............................................................................
C '38' - CONTOUR HEIGHT
C..............................................................................
C
	ELSEIF (STRING(1:LEN).EQ.'38') THEN
	   DXF_LINE = FLRLIN()
	   IF (.NOT.DXF_LINE) GOTO 999
C
	   CALL BSLN
	   NUMLIN = NUMLIN+1
	   ERRCOD = RDREAL(HEIGHT)
           IF (ERRCOD) THEN
	      DXF_LINE = DXF2I__UNACONT
	      CALL LSL_PUTMSG(DXF2I__ERRENTACVAL,NUMLIN)
	      GOTO 1000
	   ENDIF
	   HAD_HT = .TRUE.
	   GOTO 99
C
C..............................................................................
C '62' - COLOUR
C..............................................................................
C
	ELSEIF (STRING(1:LEN).EQ.'62') THEN
	   DXF_LINE = FLRLIN()
	   IF (.NOT.DXF_LINE) GOTO 999
	   NUMLIN = NUMLIN+1
C
C if colour is by layer then colour entry is irrelevant
C
	   IF (BY_LAYER) GOTO 99
C
	   CALL BSLN
	   ERRCOD = RDINT(COLNUM)
           IF (ERRCOD) THEN
	      DXF_LINE = DXF2I__UNACONT
	      CALL LSL_PUTMSG(DXF2I__ERRENTCOL,NUMLIN)
	      GOTO 1000
	   ENDIF
C
	   HAD_COL = .TRUE.
	   SELCOLOUR = COLNUM
	   GOTO 99
C
C...............................................................................
C '10' = X1
C...............................................................................
C
	ELSEIF (STRING(1:LEN).EQ.'10') THEN
	   DXF_LINE = FLRLIN()
	   IF (.NOT.DXF_LINE) GOTO 999
C
	   CALL BSLN
	   NUMLIN = NUMLIN+1
	   IF (RDDBLE(DST(1,1))) THEN
	      DXF_LINE = DXF2I__UNACONT
	      CALL LSL_PUTMSG(DXF2I__ERRENTCOOR,NUMLIN)
              GOTO 1000
	   ENDIF
C
	   IF (HAD_ABS) THEN
	      ST(1,1) = DST(1,1)-MD2LOC(1)
	   ELSE
	      ST(1,1) = DST(1,1)
	   ENDIF
C
C Initialise the third coord in case it's missing
	   INT_EQUIV = IFF_ABSENT
	   ZS(3,1)   = REAL_EQUIV
C
	   HAD_X  = .TRUE.
	   GOTO 99
C
C...............................................................................
C '11' - '18' = X2 - Xn
C...............................................................................
C
	ELSEIF (STRING(1:LEN).GE.'11' .AND. STRING(1:LEN).LE.'18') THEN
	   DXF_LINE = FLRLIN()
	   IF (.NOT.DXF_LINE) GOTO 999
C
	   NCOORX = NCOORX+1
	   CALL BSLN
	   NUMLIN = NUMLIN+1
	   IF (RDDBLE(DST(1,NCOORX))) THEN
	      DXF_LINE = DXF2I__UNACONT
	      CALL LSL_PUTMSG(DXF2I__ERRENTCOOR,NUMLIN)
	      GOTO 1000
	   ENDIF
C
	   IF (HAD_ABS) THEN
	      ST(1,NCOORX) = DST(1,NCOORX)-MD2LOC(1)
	   ELSE
	      ST(1,NCOORX) = DST(1,NCOORX)
	   ENDIF
C
C Initialise the third coord in case it's missing
	   INT_EQUIV    = IFF_ABSENT
	   ZS(3,NCOORX) = REAL_EQUIV
C
	   HAD_2X = .TRUE.
	   GOTO 99
C
C...............................................................................
C '20' = Y1
C...............................................................................
C
	ELSEIF (STRING(1:LEN).EQ.'20') THEN
	   DXF_LINE = FLRLIN()
	   IF (.NOT.DXF_LINE) GOTO 999
C
	   CALL BSLN
	   NUMLIN = NUMLIN+1
	   IF (RDDBLE(DST(2,1))) THEN
	      DXF_LINE = DXF2I__UNACONT
	      CALL LSL_PUTMSG(DXF2I__ERRENTCOOR,NUMLIN)
	      GOTO 1000
	   ENDIF
C
	   IF (HAD_ABS) THEN
	      ST(2,1) = DST(2,1)-MD2LOC(2)
	   ELSE
	      ST(2,1) = DST(2,1)
	   ENDIF
C
C Initialise the third coord in case it's missing
	   INT_EQUIV = IFF_ABSENT
	   ZS(3,1)   = REAL_EQUIV
C
	   HAD_Y = .TRUE.
	   GOTO 99
C
C...............................................................................
C '21' - '28' = Y2 - Yn
C...............................................................................
C
	ELSEIF (STRING(1:LEN).GE.'21' .AND. STRING(1:LEN).LE.'28') THEN
	   DXF_LINE = FLRLIN()
	   IF (.NOT.DXF_LINE) GOTO 999
C
	   NCOORY = NCOORY+1
	   CALL BSLN
	   NUMLIN = NUMLIN+1
	   IF (RDDBLE(DST(2,NCOORY))) THEN
	      DXF_LINE = DXF2I__UNACONT
	      CALL LSL_PUTMSG(DXF2I__ERRENTCOOR,NUMLIN)
	      GOTO 1000
	   ENDIF
C
	   IF (HAD_ABS) THEN
	      ST(2,NCOORY) = DST(2,NCOORY)-MD2LOC(2)
	   ELSE
	      ST(2,NCOORY) = DST(2,NCOORY)
	   ENDIF
C
C Initialise the third coord in case it's missing
	   INT_EQUIV    = IFF_ABSENT
	   ZS(3,NCOORY) = REAL_EQUIV
C
	   HAD_2Y = .TRUE.
	   GOTO 99
C
C...............................................................................
C '30' = Z1
C...............................................................................
C
	ELSEIF (STRING(1:LEN).EQ.'30') THEN
	   DXF_LINE = FLRLIN()
	   IF (.NOT.DXF_LINE) GOTO 999
C
	   CALL BSLN
	   NUMLIN = NUMLIN+1
	   IF (RDREAL(ZS(3,1))) THEN
	      DXF_LINE = DXF2I__UNACONT
	      CALL LSL_PUTMSG(DXF2I__ERRENTCOOR,NUMLIN)
	      GOTO 1000
	   ENDIF
C
	   HAD_3D = .TRUE.
	   HAD_Z  = .TRUE.
	   GOTO 99
C
C...............................................................................
C '31' - '37' = Z2 - Zn
C...............................................................................
C
	ELSEIF (STRING(1:LEN).GE.'31' .AND. STRING(1:LEN).LE.'37') THEN
	   DXF_LINE = FLRLIN()
	   IF (.NOT.DXF_LINE) GOTO 999
C
	   NCOORZ = NCOORZ+1
	   CALL BSLN
	   NUMLIN = NUMLIN+1
	   IF (RDREAL(ZS(3,NCOORZ))) THEN
	      DXF_LINE = DXF2I__UNACONT
	      CALL LSL_PUTMSG(DXF2I__ERRENTCOOR,NUMLIN)
	      GOTO 1000
	   ENDIF
C
	   HAD_3D = .TRUE.
	   HAD_2Z = .TRUE.
	   GOTO 99
C
C...............................................................................
C '0'- write feature
C...............................................................................
C
	ELSEIF (STRING(1:LEN).EQ.'0') THEN	! end of entity
C
C Check that we have had all of the necessary bits and bobs
C had layer?
C
	   IF (.NOT.HAD_LAY) THEN
	      CALL LSL_PUTMSG(DXF2I__MISENTLAY,LINNUMLIN)
C
C and use default from $CLAYER if present
C
	      IF (HAD_LAYER_NAME) THEN
	         LAYERLEN = DEF_LAYER_NAME_LEN
	         LAYERNAM = DEF_LAYER_NAME(1:LAYERLEN)
		 IF (.NOT.HAD_QUIET) CALL LSL_ADDMSG(DXF2I__DEFLAYNAM,
     &				    LAYERNAM(1:LAYERLEN),LINNUMLIN)
	      ELSE
		 DXF_LINE = DXF2I__UNACONT
		 IF (.NOT.HAD_SCAN) GOTO 1000
	      ENDIF
	   ENDIF
C
C if it's not empty, go and look for the corresponding IFF layer no
C in the PARAMETER lookup table
C
	   DO 4000 COUNTER = 1,CURRLAYIND
	      IF (LAYERNAM(1:LAYERLEN).EQ.
     &		    DXFLAYNAM(COUNTER)(1:DXFLAYLEN(COUNTER))) THEN
                 SELLAYIND = COUNTER
		 HAD_LAY = .TRUE.
		 GOTO 4001
	      ENDIF
4000	   CONTINUE
C
C output error message when there is no match , even if /SCAN - 
C it's too late to output the layer now, so just give message
C
	   IF (.NOT.HAD_SCAN) THEN
	     DXF_LINE = DXF2I__UNACONT
	     CALL LSL_PUTMSG(DXF2I__ERRMATLAY,
     &					LAYERNAM(1:LAYERLEN),LINNUMLIN)
	     GOTO 1000
	   ELSE
	     CALL LSL_PUTMSG(DXF2I__ERRSCANLAY,
     &					LAYERNAM(1:LAYERLEN),LINNUMLIN)
	   ENDIF
C
4001	   CONTINUE
C
C now get the colour with priority
C BY LAYER will have higher preference than '62' entry
C
	   IF (BY_LAYER) THEN
              SELCOLOUR = DXFLAYCOL(SELLAYIND)
              HAD_COL = .TRUE.
           ENDIF
C
	   IF (LTYPE_BY_LAYER) THEN
	      IF (DXFLAYLTLEN(SELLAYIND) .EQ. 0) THEN
		DXFLAYLTLEN(SELLAYIND) = 10
		DXFLAYLTYPE(SELLAYIND) = 'CONTINUOUS'
		IF (.NOT.HAD_QUIET)
     &			CALL LSL_PUTMSG(DXF2I__DEFLINTYP,LINNUMLIN)
	      ENDIF
C
	      LINTYPLEN = DXFLAYLTLEN(SELLAYIND)
	      LINTYPNAM = DXFLAYLTYPE(SELLAYIND)(1:LINTYPLEN)
C
	      SELENTIND = 1
              HAD_LIN   = .TRUE.
           ENDIF
C
C had line type?
C
	   IF (.NOT.HAD_LIN) THEN
	      IF (.NOT.HAD_QUIET)
     &			CALL LSL_PUTMSG(DXF2I__DEFLINTYP,LINNUMLIN)
	      HAD_LIN = .TRUE.
	      LINTYPLEN = 10
	      LINTYPNAM = 'CONTINUOUS'
	      SELENTIND = 1
	   ENDIF
C
C had colour?
C
	   IF (.NOT.HAD_COL) THEN
C	      DXF_LINE = DXF2I__UNACONT
	      IF (.NOT.HAD_QUIET) 
     &			CALL LSL_PUTMSG(DXF2I__MISENTCOL,LINNUMLIN)
C
C Allow coord entries to be read even if colour entry missing
C
	   ENDIF
C
	   IF  (.NOT.HAD_X  .OR. .NOT.HAD_Y .OR.
     &		.NOT.HAD_2X .OR. .NOT.HAD_2Y) THEN 
	      DXF_LINE = DXF2I__UNACONT
	      CALL LSL_PUTMSG (DXF2I__MISLINCOOR,LINNUMLIN)
	      IF (.NOT.HAD_SCAN) GOTO 1000
	   ENDIF
C
	   IF (NCOORX.NE.NCOORY) THEN
	      DXF_LINE = DXF2I__UNACONT
	      CALL LSL_PUTMSG (DXF2I__UNEQNUMCO,LINNUMLIN)
	      IF (.NOT.HAD_SCAN) GOTO 1000
	   ENDIF
C
C Account for only two points which are coincident
C
C	   IF (NCOORX.EQ.2 .AND. ST(1,1).EQ.ST(1,2) .AND.
C    &		     ST(2,1).EQ.ST(2,2)) ST(1,2) = ST(1,2)+0.5
C
C Don't match FC or anything if SCAN
C
	   IF (HAD_SCAN) THEN		! write entity entry to scanfil
C
C Write out entity name to SCAN parameter file if required
C
C Get the first suitable FC from FRT file
C
	     IF (.NOT.HAD_LIN_FC) THEN
		IF (.NOT.FRTFGT(LINTYP,LIN_FC)) THEN	! line
		   HAD_LIN_FC = .TRUE.
		ENDIF
	     ENDIF
C
	     IF (.NOT.HAD_LIN_FC) THEN
		IF (.NOT.FRTFGT(CURTYP,LIN_FC)) THEN	! interp curve
		   HAD_LIN_FC = .TRUE.
		ENDIF
	     ENDIF
C
C Format layers shorter then 20 characters
C
	      IF (LINTYPLEN.LE.20) THEN
		 CALL EXPAND('%WS% %S20',STYLE_NAME,LINTYPNAM(1:LINTYPLEN))
C
		 EXPLEN = EXPAND('%WS% ENTITY LINE      %S%  %N%  %^W%N',
     &				ENTITY_OUT,
     &				STYLE_NAME(1:20),
     &				SELCOLOUR,LIN_FC)
C
	      ELSE
		 EXPLEN = EXPAND('%WS% ENTITY LINE      %S%  %N%  %^W%N',
     &				ENTITY_OUT,
     &				LINTYPNAM(1:LINTYPLEN),
     &				SELCOLOUR,LIN_FC)
	      ENDIF
C
C Check same as last one output
C
	      IF (EXPLEN.EQ.LAST_EXPLEN) THEN
		 IF (ENTITY_OUT(1:EXPLEN) .EQ.
     &			LAST_ENTITY_OUT(1:LAST_EXPLEN)) GOTO 1000
	      ENDIF
C
C Not the same as last one output, so search the entity list for a match
C
	     DO 4002 I = 1,ENTITY_CNT
		IF (EXPLEN.EQ.ENTITY_LEN(I)) THEN	! matched length
		   IF (ENTITY_OUT(1:EXPLEN) .EQ.	! match entity
     &				 ENTITY(I)(1:ENTITY_LEN(I)) ) THEN
			GOTO 1000
		   ENDIF
		ENDIF
4002	     CONTINUE
C
C No match, so output it
C
	      DXF_LINE = FLWSTR(ENTITY_OUT(1:EXPLEN),IERR)
	      IF (.NOT.DXF_LINE) THEN
		 CALL LSL_PUTMSG(DXF_LINE)
		 IF (DXF_LINE.EQ.LSL__SYSERR) CALL LSL_ADDMSG(IERR)
		 GOTO 1000
	      ENDIF
C
	      IF (ENTITY_CNT.EQ.MAXSCAN) THEN
		 CALL LSL_PUTMSG(DXF2I__TOOMNYENTS,MAXSCAN)
		 GOTO 1000
	      ENDIF
C
	      ENTITY_CNT = ENTITY_CNT + 1
C
	      ENTITY_LEN(ENTITY_CNT) 	   = EXPLEN
	      ENTITY(ENTITY_CNT)(1:EXPLEN) = ENTITY_OUT(1:EXPLEN)
C
	      LAST_EXPLEN 		     = EXPLEN
	      LAST_ENTITY_OUT(1:LAST_EXPLEN) = ENTITY_OUT(1:EXPLEN)
C
	      GOTO 1000
	   ENDIF
C
C now get hold of the FC from parameter lookup table
C
           DO 4003 COUNTER = SELENTIND,CURRENTIND
	      IF (SELENTTYP.EQ.DXFENTTYP(COUNTER)) THEN
		 IF (LINTYPNAM(1:LINTYPLEN).EQ.DXFENTNAM(COUNTER)
     &			      (1:DXFENTLEN(COUNTER))) THEN
		    IF (HAD_COL .AND. SELCOLOUR.NE.ENTCOLOUR(COUNTER))
     &							 GOTO 4003
		    FC(1) = IFFFCCODE(COUNTER)
		    GOTO 4005
                 ENDIF
              ENDIF
4003	   CONTINUE
C
C No match, exit
C
	   DXF_LINE = DXF2I__UNACONT
	   CALL LSL_PUTMSG(DXF2I__ERRMATFC,LINNUMLIN)
           GOTO 1000
C
4005	   CONTINUE
C
C final setting for output
C
	   IF (IN_LAYER .AND. IFFOLAYNO(SELLAYIND).NE.LSTIFFLAY) THEN
	      CALL IFFUNO(LPOSNO)
	      CALL IFFEO
	   ENDIF
C
	   IF (.NOT.IN_LAYER .OR. IFFOLAYNO(SELLAYIND).NE.LSTIFFLAY) THEN
	      LSTIFFLAY = IFFOLAYNO(SELLAYIND)
	      LPOSNO = LPOSE
	      CALL IFFNO(LSTIFFLAY,0,0)
	      IN_LAYER = .TRUE.
	   ENDIF
C
	   NF = NF+1
	   CALL IFFNF(NF,NF)
	   CALL IFFFS(FC)	 	! write the FC
	   IF (HAD_HT) CALL IFFAC (3,HEIGHT)
C
	   IF (FROM_BLOCKS) THEN
	      IF (EXPAND_XSCL(EXPAND_INDEX) .NE. 1) THEN
		 SCL = EXPAND_XSCL(EXPAND_INDEX)
		 DO 122 I = 1,NCOORX
		    ST(1,I) = ST(1,I) * SCL
122		 CONTINUE
	      ENDIF
C
	      IF (EXPAND_YSCL(EXPAND_INDEX) .NE. 1) THEN
		 SCL = EXPAND_YSCL(EXPAND_INDEX)
		 DO 123 I = 1,NCOORX
		    ST(2,I) = ST(2,I) * SCL
123		 CONTINUE
	      ENDIF
C
	      IF (HAD_Z .AND. EXPAND_ZSCL(EXPAND_INDEX) .NE. 1) THEN
		 SCL = EXPAND_ZSCL(EXPAND_INDEX)
		 DO 126 I = 1,NCOORX
		    ZS(3,I) = ZS(3,I) * SCL
126		 CONTINUE
	      ENDIF
C
	      IF (EXPAND_XOFF(EXPAND_INDEX) .NE. 0) THEN
		 X = EXPAND_XOFF(EXPAND_INDEX)
		 DO 124 I = 1,NCOORX
		    ST(1,I) = ST(1,I) + X
124		 CONTINUE
	      ENDIF
C
	      IF (EXPAND_YOFF(EXPAND_INDEX) .NE. 0) THEN
		 Y = EXPAND_YOFF(EXPAND_INDEX)
		 DO 125 I = 1,NCOORX
		    ST(2,I) = ST(2,I) + Y
125		 CONTINUE
	      ENDIF
C
	      IF (HAD_Z .AND. EXPAND_ZOFF(EXPAND_INDEX) .NE. 0) THEN
		 Z = EXPAND_ZOFF(EXPAND_INDEX)
		 DO 127 I = 1,NCOORX
		    ZS(3,I) = ZS(3,I) + Z
127		 CONTINUE
	      ENDIF
	   ENDIF
C
	   CALL CHECK_RANGE(ST,NCOORX)	! check the range
C
	   IF (HAD_3D) THEN
	      DO 130 I = 1,NCOORX
		 ZS(1,I) = ST(1,I)
		 ZS(2,I) = ST(2,I)
130	      CONTINUE
C
	      CALL IFFZS(ZS,NCOORX,0)	! write ZS entry
	   ELSE
	      CALL IFFST(ST,NCOORX,0)	! write ST entry
	   ENDIF
	   CALL IFFEF			! and end feature
	   GOTO 1000
	ENDIF
C
	GOTO 99
C...............................................................................
C
999	CALL LSL_PUTMSG(DXF2I__RDLINERR,NUMLIN)
C
1000	RETURN
	END
C
