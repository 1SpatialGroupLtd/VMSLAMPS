C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-07-09 18:58:06.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION SCAN_BLOCKS()
C
***	MODULE SCAN_BLOCKS
***	IDENT 09JL93
C
C ©Copyright Laser-Scan Ltd, Cambridge, England.
C
C Author  :  P. Pan					 13 Mar 1990
C
C To read BLOCKS(symbol) definitions from DXF file. 
C User must note that only the name of the BLOCK is translated.
C
CMOD1004					J Barber 13 Jun 1991 
C	Read BLOCKS section fully
C	Output BLOCK entities to the IFF file if there was an EXPAND 
C	 'block_name' entry in the parameter file using the supplied 
C	 x,y offset and scaling to modify the local entity coords
C
CMOD1226					J Barber 13 May 1993
C	Copied from read_blocks for /SCAN
C
CMOD1251					J Barber 09 Jul 1993
C	Check layer layer for previous occurrence before output
C	to scan file
C
	IMPLICIT NONE
C
	INCLUDE	 'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE	 'LSL$CMNDXFPAR:LOOKUP.CMN'
	INCLUDE  'HERE:DXF2I.CMN'
	INCLUDE  'LSL$CMNLSL:READSTR.PAR'
	INCLUDE  'HERE:DXF2IMSG.PAR'
C
C Functions
	INTEGER 	FLRLIN			! read a line from file
	INTEGER 	FLWSTR			! write string to file
	INTEGER 	READSTR			! get a string
	INTEGER*2	EXPAND
C
C Workspace
	CHARACTER*255	STRING			! any old string
	CHARACTER*255	LAYER			! layer name
	CHARACTER*255	LAYER_OUT		! layer string for output
	CHARACTER*20	LAYER_NAME		! layer string for output
	INTEGER 	I,J
	INTEGER 	LEN			! string length
	INTEGER*2	EXPLEN			! string length
	INTEGER		IERR			! error code
	INTEGER		COUNTER			! local counter
	INTEGER		BLKNUMLIN		! line position for block
	LOGICAL		DO_EXPAND		! EXPAND BLOCK entities?
C
C---------------------------------------------------------------------
C
	IF (HAD_LOG) CALL LSL_PUTMSG(DXF2I__RDBKSC)
C
	CALL FLRSEL(DXFLUN)
	CALL FLWSEL(SCANLUN)
C
C Get the next line from the DXF file
C
99	SCAN_BLOCKS = FLRLIN()
	IF (.NOT.SCAN_BLOCKS) GOTO 999
C
C Search for BLOCK command
C
	CALL BSLN
	NUMLIN = NUMLIN+1
	LEN = READSTR(STRING,,ON_EOL)
	IF (LEN.EQ.0) GOTO 99		! Account for null lines
C
C---------------------------------------------------------------------
C Delegate according to line contents
C
C end of section
C
	IF (STRING(1:LEN).EQ.'ENDSEC') THEN
	   GOTO 1000 
C
	ELSEIF (STRING(1:LEN).EQ.'0') THEN
	   GOTO 99
C
	ELSEIF (STRING(1:LEN).EQ.'8') THEN	! layer, read and
	   SCAN_BLOCKS = FLRLIN()		! store layer name
	   IF (.NOT.SCAN_BLOCKS) GOTO 999
C
	   CALL BSLN
	   NUMLIN = NUMLIN+1
C
	   LEN = READSTR(LAYER,,ON_EOL)
	   IF (LEN.EQ.0) GOTO 99		! Account for null lines
C
C Search for previous layer occurrence in the scan table
C
	   DO 1050 I = 1,SCAN_LAYER_CNT
		IF (LEN.EQ.SCAN_LAYER_LEN(I)) THEN
		   IF (LAYER(1:LEN).EQ.
     &				SCAN_LAYER(I)(1:SCAN_LAYER_LEN(I)) ) THEN
			GOTO 1001
		   ENDIF
		ENDIF
1050	   CONTINUE
C
	   IF (SCAN_LAYER_CNT.EQ.MAXSCANLAY) THEN
	      CALL LSL_PUTMSG(DXF2I__TOOMNYLAYS,MAXSCANLAY)
	      GOTO 1060
	   ENDIF
C
C Store the new layer in scan table
C
	   SCAN_LAYER_CNT = SCAN_LAYER_CNT + 1
	   SCAN_LAYER_LEN(SCAN_LAYER_CNT) = LEN
	   SCAN_LAYER(SCAN_LAYER_CNT) = LAYER(1:LEN)
C
1060	   ILAYER = ILAYER + 1
C
C Format layers shorter then 20 characters
C
	   IF (LEN.LE.20) THEN
		CALL EXPAND('%WS% %S20',LAYER_NAME,LAYER(1:LEN))
C
		EXPLEN = EXPAND('%WS% LAYER  %S%  %^W%N',
     &					LAYER_OUT,
     &					LAYER_NAME(1:20),ILAYER)
	   ELSE
		EXPLEN = EXPAND('%WS% LAYER  %S%  %^W%N',
     &					LAYER_OUT,
     &					LAYER(1:LEN),ILAYER)
	   ENDIF
C
	   SCAN_BLOCKS = FLWSTR(LAYER_OUT(1:EXPLEN),IERR)
	   IF (.NOT.SCAN_BLOCKS) THEN
	      CALL LSL_PUTMSG(SCAN_BLOCKS)
	      IF (SCAN_BLOCKS.EQ.LSL__SYSERR) CALL LSL_ADDMSG(IERR)
	      GOTO 999
	   ENDIF
C
C Update layer table
C
	   CURRLAYIND = CURRLAYIND + 1
	   DXFLAYLEN(CURRLAYIND) = LEN
	   DXFLAYNAM(CURRLAYIND) = LAYER(1:LEN)
C
1001	   GOTO 99
C
C Got a BLOCK definition
C
	ELSEIF (STRING(1:LEN).EQ.'BLOCK') THEN
C
	   DO_EXPAND   = .FALSE.
	   FROM_BLOCKS = .FALSE.
C
101	   SCAN_BLOCKS = FLRLIN()
	   IF (.NOT.SCAN_BLOCKS) GOTO 999
C
	   CALL BSLN
	   NUMLIN = NUMLIN+1
	   LEN = READSTR(STRING,,ON_EOL)
	   IF (LEN.EQ.0) GOTO 101		! Acocunt for null
	   BLKNUMLIN = NUMLIN
C
	   IF (STRING(1:LEN).EQ.'ENDBLK') THEN
	      GOTO 99
C
	   ELSEIF (STRING(1:LEN).EQ.'8') THEN	! layer, read and
	     SCAN_BLOCKS = FLRLIN()		! store layer name
	     IF (.NOT.SCAN_BLOCKS) GOTO 999
C
	     CALL BSLN
	     NUMLIN = NUMLIN+1
C
	     LEN = READSTR(LAYER,,ON_EOL)
	     IF (LEN.EQ.0) GOTO 99		! Account for null lines
C
C Search for previous layer occurrence in the scan table
C
	     DO 2000 I = 1,SCAN_LAYER_CNT
		IF (LEN.EQ.SCAN_LAYER_LEN(I)) THEN
		   IF (LAYER(1:LEN).EQ.
     &				SCAN_LAYER(I)(1:SCAN_LAYER_LEN(I)) ) THEN
			GOTO 2001
		   ENDIF
		ENDIF
2000	     CONTINUE
C
	     IF (SCAN_LAYER_CNT.EQ.MAXSCANLAY) THEN
	       CALL LSL_PUTMSG(DXF2I__TOOMNYLAYS,MAXSCANLAY)
	       GOTO 2060
	     ENDIF
C
C Store the new layer in scan table
C
	     SCAN_LAYER_CNT = SCAN_LAYER_CNT + 1
	     SCAN_LAYER_LEN(SCAN_LAYER_CNT) = LEN
	     SCAN_LAYER(SCAN_LAYER_CNT) = LAYER(1:LEN)
C
2060	     ILAYER = ILAYER + 1
C
C Format layers less than 20 chars
C
	     IF (LEN.LE.20) THEN
		CALL EXPAND('%WS% %S20',LAYER_NAME,LAYER(1:LEN))
		EXPLEN = EXPAND('%WS% LAYER %S%  %^W%N',
     &				LAYER_OUT,
     &				LAYER_NAME(1:20), ILAYER)
	     ELSE
		EXPLEN = EXPAND('%WS% LAYER %S%  %^W%N',
     &				LAYER_OUT,
     &				LAYER_NAME(1:LEN), ILAYER)
	     ENDIF
C
	     SCAN_BLOCKS = FLWSTR(LAYER_OUT(1:EXPLEN),IERR)
	     IF (.NOT.SCAN_BLOCKS) THEN
	        CALL LSL_PUTMSG(SCAN_BLOCKS)
	        IF (SCAN_BLOCKS.EQ.LSL__SYSERR) CALL LSL_ADDMSG(IERR)
	        GOTO 999
	     ENDIF
C
C Update layer table
C
	     CURRLAYIND = CURRLAYIND + 1
	     DXFLAYLEN(CURRLAYIND) = LEN
	     DXFLAYNAM(CURRLAYIND) = LAYER(1:LEN)
C
2001	     GOTO 101
C
	   ELSEIF (STRING(1:LEN).EQ.'6') THEN	! linetype, read and
	      SCAN_BLOCKS = FLRLIN()		! ignore style name
	      IF (.NOT.SCAN_BLOCKS) GOTO 999
	      NUMLIN = NUMLIN+1
C
	      GOTO 101
C
	   ELSEIF (STRING(1:LEN).EQ.'62') THEN	! colour, read and
	      SCAN_BLOCKS = FLRLIN()		! ignore colour value
	      IF (.NOT.SCAN_BLOCKS) GOTO 999
	      NUMLIN = NUMLIN+1
C
	      GOTO 101
C
C have found field '2' - next line will be the BLOCK name
C
	   ELSEIF (STRING(1:LEN).EQ.'2') THEN
	      SCAN_BLOCKS = FLRLIN()
	      IF (.NOT.SCAN_BLOCKS) GOTO 999
C
	      CALL BSLN
	      NUMLIN = NUMLIN+1
	      LEN = READSTR(STRING,,ON_EOL)
C
C if the BLOCK name is missing, then complain, and leave
C
	      IF (LEN.EQ.0) THEN
	         SCAN_BLOCKS = DXF2I__UNACONT
	         CALL LSL_PUTMSG(DXF2I__ERRSYMNAM,NUMLIN)
	         GOTO 1000
              ENDIF
C
C now check if the DXF BLOCK name is in the PARAMETER lookup table
C as INSERT entity
C
C	      DO 3000 COUNTER = 1,CURRSYMIND
C	         IF (LEN.EQ.DXFENTLEN(DXFSYMBOL(COUNTER))) THEN
C	            IF (STRING(1:LEN).EQ.
C     &			DXFENTNAM(DXFSYMBOL(COUNTER))(1:LEN)) GOTO 103
C	         ENDIF
C3000	      CONTINUE
C
C if not, report
C
C	      CALL LSL_PUTMSG(DXF2I__UNDEFBLK,STRING(1:LEN),BLKNUMLIN)
C
103	      CONTINUE
C
C now check if the DXF BLOCK name is in the PARAMETER lookup table
C as EXPAND entity
C
C	      DO 3001 COUNTER = 1,CURREXPIND
C	         IF (LEN.EQ.EXPANDLEN(COUNTER)) THEN
C	            IF (STRING(1:LEN) .EQ.
C     &				EXPANDNAM(COUNTER)(1:LEN)) THEN
C		       EXPAND_INDEX = COUNTER
C		       DO_EXPAND = .TRUE.
C		       GOTO 104
C		    ENDIF
C	         ENDIF
C3001	      CONTINUE
C
C If EXPANDing, read the BLOCK constituents as separate entities
C NOTE that the coordinates may be completely incorrect for the file
C as they should be referenced by the INSERT defining point and scaled
c by some factor, and which should be supplied with the EXPAND entry 
C in the parameter file
C
104	      CONTINUE
C
C	      IF (DO_EXPAND) THEN
C		 FROM_BLOCKS = .TRUE.
C		 SCAN_BLOCKS = READ_ENTITIES()
C		 IF (.NOT.SCAN_BLOCKS) GOTO 1000
C
C turn off expansion for subsequent entities
C
C		 FROM_BLOCKS = .FALSE.
C	      ENDIF
C
	      GOTO 99
	   ENDIF
C
	   GOTO 101
C
	ENDIF
C
	GOTO 99
C.......................................................................
C
999	CALL LSL_PUTMSG(DXF2I__RDLINERR,NUMLIN)
C
1000	RETURN
	END
C
