C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-03-28 21:44:30.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION DSTPOLY
C
***	MODULE DSTPOLY
***	IDENT 28MR91
C
C	Copyright Laser-Scan Ltd., Cambridge, England
C
C	Author 		A.D.Trigg, 23rd May 1988
C	Processes polygon entries within logic sections
C
C	Modified        P.Pan,  14th February 1990
C
CMOD879	J Barber 				25-Apr-1990
C	To output object names to which polygon belongs to ACs
C
CMOD980	J Barber 				25-Mar-1991
C	Use parameter file to derive FC from colour and line
C	pattern
C
	IMPLICIT NONE
C
	INCLUDE		'LSL$CMNLSL:TXTC.CMN'
	INCLUDE		'LSL$CMNFRT:FRTCOM.CMN'
	INCLUDE		'LSL$CMNDSTPAR:LOOKUP.CMN'
	INCLUDE 	'HERE:TDST2I.CMN'
	INCLUDE 	'HERE:TDST2IMSG.PAR'
C
C  Functions
	INTEGER 	FLRLIN
	INTEGER 	READSTR
	LOGICAL		RDINT
	LOGICAL		RDREAL
C
	INTEGER  	SS$_NORMAL
	EXTERNAL 	SS$_NORMAL
C
C  Declarations:
	INTEGER*2 	NLEV,NOBJ,DUMMY
	INTEGER 	IJK, KJI, LEN
	INTEGER*2	NUMCOOR			!Number of coord pairs in entry
	INTEGER*2	NUMCOL			!Colour ID number
	INTEGER*2 	NUMPATT			!Pattern ID number
	INTEGER 	NUMCOLIN
	INTEGER		ODD			!an odd no. of coord pairs?
	REAL*4		POLHGHT			!Height of feature
	REAL*4		STBUF(2,70)		!Coord array
	INTEGER*2 	FS(4)			!Feature status of current feature
	INTEGER 	REMCOL
	INTEGER 	REMPAT
	INTEGER		GT
C
	BYTE 		NAME_ARRAY(30,MAX_OBJ)
	INTEGER*2	NAME_LEN(MAX_OBJ)
	BYTE		AC_ARRAY(30)
	CHARACTER*30	STRING
	LOGICAL		IGNORE
C
C ******************************************************************
C Assume success
C
	DSTPOLY = %LOC(SS$_NORMAL)
C
C Reset object, level counts
C
	NOBJ = 0
	NLEV = 0
C
C First line either: nlev (followed by level names,ids on further lines)
C		     nobj (followed by object names on further lines)
C		  or npts colour thick type height
C
C Read and ignore number of levels to which poly belongs
C
	DSTPOLY = FLRLIN()
	IF (.NOT.DSTPOLY) GOTO 999
C
	NUMLIN = NUMLIN+1
	CALL BSLN
C
C Read first as integer
C
	IF (RDINT(NLEV)) GOTO 900
C
C Check if there is a second integer on the line
C 
	IF (RDINT(DUMMY)) THEN		! no second int, so it was nlev
	   GOTO 499
	ELSE				! polygon attribute data
	   GOTO 699
	ENDIF
C
499	DO 500 IJK=1,NLEV
	   DSTPOLY=FLRLIN()
	   IF (.NOT.DSTPOLY) GOTO 999
C
	   NUMLIN=NUMLIN+1
500	CONTINUE
C
C Read number of objects to which poly belongs
C
	DSTPOLY=FLRLIN()
	IF (.NOT.DSTPOLY) GOTO 999
C
	NUMLIN=NUMLIN+1
	CALL BSLN
C
C Read first as integer
C
	IF (RDINT(NOBJ)) GOTO 900
C
C Check if there is a second integer on the line
C 
	IF (RDINT(DUMMY)) THEN		! no second int, so it was nobj
	   GOTO 599
	ELSE				! polygon attribute data
	   GOTO 699
	ENDIF
C
599	DO 600 IJK=1,NOBJ
	   DSTPOLY=FLRLIN()
	   IF (.NOT.DSTPOLY) GOTO 999
C
	   NUMLIN=NUMLIN+1
	   CALL BSLN
	   LEN = READSTR(STRING)
C
C Store the names
C
	   IF (HAD_OBJ) THEN
	      NAME_LEN(IJK) = LEN
	      DO 650 KJI = 1,LEN
	         NAME_ARRAY(KJI,IJK) = TXTBUF(KJI)
650	      CONTINUE
	   ENDIF
C
600	CONTINUE
C
C Read number of coords and poly attribute information 
C
	DSTPOLY=FLRLIN()
	IF (.NOT.DSTPOLY) GOTO 999
C
	NUMLIN=NUMLIN+1
C
699	CONTINUE
C
	CALL BSLN
C
	IF (RDINT(NUMCOOR)) GOTO 900		!Number of coord pairs
	IF (RDINT(NUMCOL))  GOTO 900		!Colour ID number
	IF (RDINT(DUMMY))   GOTO 900		!Unwanted value
	IF (RDINT(NUMPATT)) GOTO 900		!Line pattern number
	IF (RDREAL(POLHGHT))GOTO 900		!Polygon height
C
	IGNORE = .FALSE.
C
C Get FC if given in parameter file
C
	IF (HAD_PAR) THEN
C Search for colour and style combination
C
	   DO 101 IJK=1,POL_CNT
	      IF (DSTCOLOUR(DST_POLY,IJK).EQ.NUMCOL .AND.
     &		  DSTPATTERN(DST_POLY,IJK).EQ.NUMPATT) THEN
		 FS(1) = DST_FC(DST_POLY,IJK)
		 GT    = DST_GT(DST_POLY,IJK)
		 GOTO 104
	      ENDIF
101	   CONTINUE
C
C No match; ignore this entity
C
	   CALL LSL_PUTMSG(DSTI__ENTIGNORE,NUMLIN)
	   IGNORE = .TRUE.
	   GOTO 104
	ENDIF
C
C Read the information relevant to the position and orientation of the 
C feature
C
	REMCOL = MOD(NUMCOL,5)
	IF (REMCOL.EQ.0) REMCOL=5
	REMPAT = MOD(NUMPATT+1,5)
	IF (REMPAT.EQ.0) REMPAT=5
	FS(1) = (REMCOL-1)*5 + REMPAT
	GT = LINTYP
C
104	CONTINUE
C
C Account for uneven number of coord pairs because the format of the
C DST file normally has two pairs per line, so we want to be able to
C account for only having one pair on the final line of coords
C
	IF (MOD(NUMCOOR,2).EQ.1) THEN
	   ODD=1
	ELSE
	   ODD=0
	ENDIF
C
C Numcolin is the number of lines of coords to read from the file (minus
C one if there is an odd number of coord pairs - i.e. INT
C
	NUMCOLIN=INT(NUMCOOR/2)
C
	DO 800 IJK=1,NUMCOLIN
	   DSTPOLY=FLRLIN()
	   IF(.NOT.DSTPOLY)GOTO 999
C
	   NUMLIN=NUMLIN+1
	   CALL BSLN
C
	   IF (IGNORE) GOTO 800
C
C Get all four coord of this line
C
	   IF (RDREAL(STBUF(1,(IJK-1)*2+1))) GOTO 900
	   IF (RDREAL(STBUF(2,(IJK-1)*2+1))) GOTO 900
C
	   CALL UPDATE_RANGE(STBUF(1,(IJK-1)*2+1),STBUF(2,(IJK-1)*2+1))
C
	   IF (RDREAL(STBUF(1,(IJK-1)*2+2))) GOTO 900
	   IF (RDREAL(STBUF(2,(IJK-1)*2+2))) GOTO 900
C
	   CALL UPDATE_RANGE(STBUF(1,(IJK-1)*2+2),STBUF(2,(IJK-1)*2+2))
800	CONTINUE
C
C If there is an odd number of coords then read the final line
C extracting one coord pair only
C
	IF (ODD.EQ.1) THEN
	   ODD = 0
	   DSTPOLY=FLRLIN()
	   IF (.NOT.DSTPOLY) GOTO 999
C
	   NUMLIN=NUMLIN+1
	   CALL BSLN
C
	   IF (IGNORE) GOTO 1000
C
	   IF (RDREAL(STBUF(1,NUMCOOR))) GOTO 900
	   IF (RDREAL(STBUF(2,NUMCOOR))) GOTO 900
C
	   CALL UPDATE_RANGE(STBUF(1,NUMCOOR),STBUF(2,NUMCOOR))
	ENDIF
C
	IF (IGNORE) GOTO 1000
C
	NUMFEAT = NUMFEAT + 1
C
	CALL IFFNF(NUMFEAT,NUMFEAT)
	CALL IFFFS(FS)
C
	IF (HAD_OBJ) THEN
	   DO 850 IJK = 1,NOBJ
	      DO 860 KJI = 1,NAME_LEN(IJK)
	         AC_ARRAY(KJI) = NAME_ARRAY(KJI,IJK)
860	      CONTINUE
C
	      CALL IFFAC(AC_NUMBER,0,AC_ARRAY, NAME_LEN(IJK) )
850	   CONTINUE
	ENDIF
C
	CALL IFFAC(3,POLHGHT,,)
	CALL IFFST(STBUF,NUMCOOR,0)
	CALL IFFEF
C
	GOTO 1000
C
900	DSTPOLY=DSTI__ERRINTLIN
	CALL LSL_PUTMSG(DSTPOLY,NUMLIN)
	GOTO 1000
C
999	CALL LSL_PUTMSG(DSTPOLY)
	CALL LSL_ADDMSG(DSTI__ERRINTLIN,NUMLIN)
C
1000	RETURN
	END
C
