C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-03-28 20:45:08.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION DSTPOINT
C
***	MODULE DSTPOINT
***	IDENT 28MR91
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Author 		A.D.Trigg, 24th May 1988
C	Processes point entries within logic sections
C
C	Modified        P.Pan, 14th February 1990
C
CMOD879	J Barber 				25-Apr-1990
C	To output object names to which point belongs to ACs
C
CMOD980	J Barber 				25-Mar-1991
C	Use parameter file to derive FC from colour and symbol
C	number
C
	IMPLICIT NONE
C
	INCLUDE		'LSL$CMNLSL:TXTC.CMN'
	INCLUDE		'LSL$CMNFRT:FRTCOM.CMN'
	INCLUDE 	'LSL$CMNDSTPAR:LOOKUP.CMN'
	INCLUDE 	'HERE:TDST2I.CMN'
	INCLUDE 	'HERE:TDST2IMSG.PAR'
C
C  Functions
	INTEGER 	FLRLIN
	INTEGER 	READSTR
	LOGICAL		RDINT
	LOGICAL		RDREAL
C
	INTEGER 	SS$_NORMAL
	EXTERNAL 	SS$_NORMAL
C
C  Declarations:
	INTEGER*2	NLEV,NOBJ,DUMMY
	INTEGER 	IJK, KJI, LEN
	REAL*4		POIHT			!Point height
	REAL*4		ROTAT			!Feature rotation
	INTEGER*2 	NUMSYM			!Symbol ID number
	INTEGER*2	NUMCOL			!Colour ID number
	REAL*4		STBUF(2)		!Coord array
	INTEGER*2 	FS(4)			!Feature status of current feature
	INTEGER 	REMCOL
	INTEGER 	REMSYM
	INTEGER		GT
C
	BYTE		NAME_ARRAY(30,MAX_OBJ)
	INTEGER*2	NAME_LEN(MAX_OBJ)
	BYTE		AC_ARRAY(30)
	CHARACTER*30	STRING
	LOGICAL		IGNORE
C
C ******************************************************************
C Assume success
C
	DSTPOINT = %LOC(SS$_NORMAL)
C
C Reset object, level counts
C
	NOBJ = 0
	NLEV = 0
C
C First line either: nlev (followed by level names,ids on further lines)
C		     nobj (followed by object names on further lines)
C		  or sno colour x y height ang
C
C Read and ignore number of levels to which point belongs
C
 	DSTPOINT=FLRLIN()
	IF (.NOT.DSTPOINT) GOTO 999
C
 	NUMLIN=NUMLIN+1
 	CALL BSLN
C
C Read first as an integer
C
 	IF (RDINT(NLEV)) GOTO 900
C
C Check if there is a second integer on the line
C
 	IF (RDINT(DUMMY)) THEN		! no second int, so it was nlev
	   GOTO 499
	ELSE				! point attribute data
	   GOTO 699
	ENDIF
C
499 	DO 500 IJK=1,NLEV
 	   DSTPOINT=FLRLIN()
	   IF (.NOT.DSTPOINT) GOTO 999
C
	   NUMLIN=NUMLIN+1
500	CONTINUE
C
C Read number of objects to which point belongs
C
 	DSTPOINT=FLRLIN()
	IF (.NOT.DSTPOINT) GOTO 999
C
 	NUMLIN=NUMLIN+1
 	CALL BSLN
C
C Read first as an integer
C
 	IF (RDINT(NOBJ)) GOTO 900
C
C Check if there is a second integer on the line
C
 	IF (RDINT(DUMMY)) THEN		! no second int, so it was nlev
	   GOTO 599
	ELSE				! point attribute data
	   GOTO 699
	ENDIF
C
599	DO 600 IJK=1,NOBJ
 	   DSTPOINT=FLRLIN()
	   IF (.NOT.DSTPOINT) GOTO 999
C
	   NUMLIN=NUMLIN+1
	   CALL BSLN
	   LEN = READSTR(STRING)
C
	   IF (HAD_OBJ) THEN
	      NAME_LEN(IJK) = LEN
	      DO 650 KJI = 1,LEN
	         NAME_ARRAY(KJI,IJK) = TXTBUF(KJI)
650	      CONTINUE
	   ENDIF
C
600	CONTINUE
C
C Read relevant info from point attribute line
C
	DSTPOINT=FLRLIN()
	IF (.NOT.DSTPOINT) GOTO 999
C
	NUMLIN=NUMLIN+1
C
699	CONTINUE
C
	CALL BSLN
C
C Read the information relevant to the position and orientation of the 
C feature
C
	IF (RDINT(NUMSYM)) GOTO 900		!symbol number
	IF (RDINT(NUMCOL)) GOTO 900		!colour number
C
	IGNORE = .FALSE.
C
C Get FC if given in parameter file
C
	IF (HAD_PAR) THEN
C Search for colour and style combination
C
	   DO 101 IJK=1,PNT_CNT
	      IF (DSTCOLOUR(DST_POINT,IJK).EQ.NUMCOL .AND.
     &		  DSTPATTERN(DST_POINT,IJK).EQ.NUMSYM) THEN
		 FS(1) = DST_FC(DST_POINT,IJK)
C Insert bit indicating point feature into FS array
C
		 CALL LIB$INSV(1,14,2,FS(3))
		 GT = DST_GT(DST_POINT,IJK)
		 GOTO 104
	      ENDIF
101	   CONTINUE
C
C No match; ignore this entity
C
	   CALL LSL_PUTMSG(DSTI__ENTIGNORE,NUMLIN)
	   IGNORE = .TRUE.
	   GOTO 104
	ENDIF
C
C No parameter file; use simple FC calculation as before
C Create point feature, complete with relevant attribute info		
C
	REMCOL = MOD(NUMCOL,5)
	IF (REMCOL.EQ.0) REMCOL=5
	REMSYM = MOD(NUMSYM+1,5)
	IF (REMSYM.EQ.0) REMSYM=5
C
C Convert FS to something reflecting the unique symbol and colour 
C combination
C
	FS(1) = (REMCOL-1)*5 + REMSYM+35
C Insert bit indicating point feature into FS array
C
	CALL LIB$INSV(1,14,2,FS(3))
	GT = ORITYP
C
104	CONTINUE
C
	IF (IGNORE) GOTO 1000
C
	IF (RDREAL(STBUF(1))) GOTO 900		!coord x value
	IF (RDREAL(STBUF(2))) GOTO 900		!coord y value
C
	CALL UPDATE_RANGE(STBUF(1),STBUF(2))
C
	IF(RDREAL(POIHT)) GOTO 900		!height above datum
	IF(RDREAL(ROTAT)) GOTO 900		!rotation angle
C
	ROTAT = ROTAT*PI/180		!convert degrees to radians
C
C Increment feature counter
C
	NUMFEAT = NUMFEAT+1
C
	CALL IFFNF(NUMFEAT,NUMFEAT)
	CALL IFFFS(FS)
C
	IF (HAD_OBJ) THEN
	   DO 850 IJK = 1,NOBJ
	      DO 860 KJI = 1,NAME_LEN(IJK)
		 AC_ARRAY(KJI) = NAME_ARRAY(KJI,IJK)
860	      CONTINUE
C
	      CALL IFFAC(AC_NUMBER,0,AC_ARRAY,NAME_LEN(IJK) )
850	   CONTINUE
	ENDIF
C
	CALL IFFAC(3,POIHT,,)
	CALL IFFST(STBUF,1,0)
C
C Use FRTSIZ for SCATYP if doing properly?
C
	IF (GT.EQ.ORITYP .OR. GT.EQ.SCATYP) CALL IFFRO(ROTAT)
	CALL IFFEF
C
	GOTO 1000
C
900	DSTPOINT = DSTI__ERRINTLIN
	CALL LSL_PUTMSG(DSTI__ERRINTLIN,NUMLIN)
	GOTO 1000
C
999	CALL LSL_PUTMSG(DSTPOINT)
	CALL LSL_ADDMSG(DSTI__ERRINTLIN,NUMLIN)
C
1000	RETURN
	END
C
