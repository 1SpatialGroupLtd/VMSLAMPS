C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-04-16 16:12:06.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	PROGRAM	TDST2I
C
***	MODULE	TDST2I
***	IDENT	16AP91
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C	Author Andrew Trigg 23rd May 1988
C
C	To convert Sysscan's DST ASCII format into IFF
C
CMOD879 Add /OBJECT_AC=n qualifier to output OBJECT names to ACs into 
C	the IFF file
C	Add /AREA_LAYER qualifier to specify a layer for area components
C	(not yet implemented)
C	Standardise error returns			JB 25-Apr-1990
C
CMOD980 Add parameter file lookup to derive FC from entity colour and
C	line type/symbol number/text inclination	JB 21-Mar-1991
C
C *** Remember DSTPARLIB routines when rebuilding ***
C
	IMPLICIT NONE
C
C Common:
	INCLUDE		'LSL$CMNLSL:CLD.CMN'
	INCLUDE		'LSL$CMNDSTPAR:LOOKUP.CMN'
	INCLUDE		'HERE:TDST2I.CMN'
	INCLUDE		'HERE:TDST2IMSG.PAR'
	EXTERNAL	 TDST2I_CLD
C
C Functions
	INTEGER 	LSL_INIT
	INTEGER 	DCL_STARTUP		!Gets parsed command line
	INTEGER 	DCL_FILE		!Reads and parses command
	INTEGER 	DCL_QUAL		!Reads and parses qualifier
	INTEGER 	DCL_INT			!Reads and parses integer
	INTEGER		DSTCONV			!Does the actual conversion
	INTEGER		FLROPN			!Opens file for read
	INTEGER		IFFCREATE		!Creates new IFF file
	LOGICAL		RDPAR			!Read parameter fil
C
C Local
	INTEGER		OK
	LOGICAL		ABSENT
	LOGICAL		LOCAL
	LOGICAL		LOCNEG
C
	INTEGER		DEF_AC_NUMBER		!Default AC_NUMBER
	PARAMETER	(DEF_AC_NUMBER = 1)
	INTEGER		DEF_LAY_NUMBER		!Default LAY_NUMBER
	PARAMETER	(DEF_LAY_NUMBER = 1000)
C
C Initialise LSLLIB and DCL decoding
C
	HAD_PAR        = .FALSE.	! Had /PARAMETER file qual
	HAD_FRT        = .FALSE.	! Had /FRT file qual
	HAD_OBJ        = .FALSE.	! Had /OBJECT_AC qualifier
	HAD_AREA       = .FALSE.	! Had /AREA_LAYER qualifier
	RANGE_WRONG    = .FALSE.	! DST range wrong...
	RANGE_SET      = .FALSE.	! coordinates used in IFF range
	OUT_RANGE_MESS = .FALSE.	! and message output
C
	NUMFEAT = 0
C
	CALL LSL_INIT
C
	OK = DCL_STARTUP('TDST2I',.FALSE.,TDST2I_CLD,.TRUE.)
	IF (.NOT.OK) GOTO 999
C
C Get input filename
C
	OK = DCL_FILE('P1','LSL$DST:TDST.TDST',ABSENT,.FALSE.,.TRUE.)
	IF (.NOT.OK) GOTO 999
C
	DSTFIL = FILARY(1)
	DSTLEN = FIL_LEN(1)
C
C Get output filename
C
	OK = DCL_FILE('P2','LSL$IF:IFF.IFF',ABSENT,.FALSE.,.TRUE.)
	IF (.NOT.OK) GOTO 999
C
	IFFFIL = FILARY(1)
	IFFLEN = FIL_LEN(1)
C
C Get /OBJECT_AC=n qualifier
C
	OK = DCL_QUAL('OBJECT_AC',HAD_OBJ,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.OK) GOTO 999
C
	IF (HAD_OBJ) THEN
	   OK = DCL_INT('OBJECT_AC', .TRUE.)
	   IF (.NOT.OK) GOTO 999
C
	   IF (NUMINT.EQ.1) THEN
	      AC_NUMBER = IARRAY(1)
	   ELSE
	      AC_NUMBER = DEF_AC_NUMBER
	   ENDIF
	ENDIF
C
C Get /AREA_LAYER=n qualifier
C
	OK = DCL_QUAL('AREA_LAYER',HAD_AREA,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.OK) GOTO 999
C
	IF (HAD_AREA) THEN
	   OK = DCL_INT('AREA_LAYER', .TRUE.)
	   IF (.NOT.OK) GOTO 999
C
	   IF (NUMINT.EQ.1) THEN
	      LAY_NUMBER = IARRAY(1)
	   ELSE
	      LAY_NUMBER = DEF_LAY_NUMBER
	   ENDIF
	ENDIF
C
C Get /FRT=file qualifier
C
	OK = DCL_QUAL('FRT',HAD_FRT,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.OK) GOTO 999
C
	IF (HAD_FRT) THEN
C Get parameter filename
C
	   OK = DCL_FILE('FRT','LSL$FRT:DST.FRT',
     &					ABSENT,.FALSE.,.TRUE.)
	   IF (.NOT.OK) GOTO 999
C
	   FRTFIL = FILARY(1)
	   FRTLEN = FIL_LEN(1)
	ENDIF
C
C Get /PARAMETER_FILE=file qualifier
C
	OK = DCL_QUAL('PARAMETER_FILE',HAD_PAR,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.OK) GOTO 999
C
	IF (HAD_PAR) THEN
C Get parameter filename
C
	   OK = DCL_FILE('PARAMETER_FILE','LSL$LOOKUP:DST.PAR',
     &					   ABSENT,.FALSE.,.TRUE.)
	   IF (.NOT.OK) GOTO 999
C
	   PARFIL = FILARY(1)
	   PARLEN = FIL_LEN(1)
	ENDIF
C
C Open input file
C
	OK = FLROPN(DSTLUN, DSTFIL(1:DSTLEN))
	IF (.NOT.OK) THEN
	   CALL LSL_PUTMSG(DSTI__UNAOPNDST,DSTFIL(1:DSTLEN))
	   CALL LSL_ADDMSG(OK)
	   GOTO 999
	ENDIF
C
C Open, read and close parameter file and FRT file (required 
C for PARAMETER file)
C
	IF (HAD_PAR) THEN
	   OK = RDPAR()
	   IF (.NOT.OK) GOTO 1000
	ENDIF
C
C Create output file
C
	OK = IFFCREATE(IFFLUN, IFFFIL(1:IFFLEN))
	IF (.NOT.OK) THEN
	   CALL LSL_PUTMSG(DSTI__UNACREIFF,IFFFIL(1:IFFLEN))
	   CALL LSL_ADDMSG(OK)
	   GOTO 1000
	ENDIF
C
C Do the main body of the work converting from input to output
C
	OK = DSTCONV()	
C
C All done
C
1000	CALL FLRCLO(DSTLUN)
C
999	CALL LSL_EXIT(OK)
C
	STOP
	END
C
