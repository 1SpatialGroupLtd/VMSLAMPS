C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-04-16 12:38:22.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION DSTARC
C
***	MODULE DSTARC
***	IDENT 16AP91
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Author 		A.D.Trigg, 25th May 1988
C	Modified        P.Pan, 14th February 1990
C
CMOD879 To output names of object to which arc belongs to ACs
C							JB 25-Apr-1990
CMOD980	Use parameter file to derive FC from colour and line type
C							JB 21-Mar-1991
C	Processes arc entries within logic sections
C	The features are converted to features with GT 2, 3, 4 or 5.
C
	IMPLICIT NONE
C
	INCLUDE 	'LSL$CMNLSL:TXTC.CMN'
	INCLUDE 	'LSL$CMNFRT:FRTCOM.CMN'
	INCLUDE		'LSL$CMNDSTPAR:LOOKUP.CMN'
	INCLUDE 	'HERE:TDST2I.CMN'
	INCLUDE 	'HERE:TDST2IMSG.PAR'
C
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL
C
C  Functions
	INTEGER 	FLRLIN
	INTEGER		READSTR
	LOGICAL		RDINT
	LOGICAL		RDREAL
C
C  Declarations:
	INTEGER*2	NLEV,NOBJ,DUMMY
	INTEGER 	IJK, KJI, LEN
	INTEGER*2 	NUMCOL			!Colour ID number
	INTEGER*2	NUMPATT			!Pattern ID number
	INTEGER 	REMCOL
	INTEGER 	REMPAT
	REAL*4		ARCHGHT			!Height of feature
	REAL*4		STBUF(2,3)		!Coord array
	REAL*4		STARANG			!Angle to start point
	REAL*4		INCLANG			!Included angle
	REAL*4		RADIUS			!Radius of arc
	INTEGER 	GT			!graphical type
	INTEGER*2 	FS(4)			!Feature status of feature
C
	BYTE		NAME_ARRAY(30,MAX_OBJ)
	INTEGER*2	NAME_LEN(MAX_OBJ)
	BYTE		AC_ARRAY(30)
	CHARACTER*30	STRING
	LOGICAL 	IGNORE
C
C ******************************************************************
C Assume success
C
	DSTARC = %LOC(SS$_NORMAL)
C
C Reset object, level counts
C
	NOBJ = 0
	NLEV = 0
C
C First line either: nlev (followed by level names,ids on further lines)
C		     nobj (followed by object names on further lines)
C		  or colour thick type height
C
C Read and ignore number of levels to which arc belongs
C
	DSTARC=FLRLIN()
	IF (.NOT.DSTARC) GOTO 999
C
	NUMLIN=NUMLIN+1
	CALL BSLN
C
C Read first as integer
C
	IF (RDINT(NLEV)) GOTO 900	! no integer
C
C Check if there is a second integer on the line
C
	IF (RDINT(DUMMY)) THEN		! no second int, so it was nlev
	   GOTO 499
	ELSE				! arc attribute data
	   GOTO 699
	ENDIF
C
499	DO 500 IJK=1,NLEV
	   DSTARC=FLRLIN()
	   IF (.NOT.DSTARC) GOTO 999
C
	   NUMLIN=NUMLIN+1
500	CONTINUE
C
C Read number of objects to which arc belongs
C
	DSTARC=FLRLIN()
	IF (.NOT.DSTARC) GOTO 999
C
	NUMLIN=NUMLIN+1
	CALL BSLN
C
C Read first as integer
C
	IF (RDINT(NOBJ)) GOTO 900
C
C Check if there is a second integer on the line
C
	IF (RDINT(DUMMY)) THEN		! no second int, so it was nobj
	   GOTO 599
	ELSE				! arc attribute data
	   GOTO 699
	ENDIF
C
599	DO 600 IJK=1,NOBJ
	   DSTARC=FLRLIN()
	   IF (.NOT.DSTARC) GOTO 999
C
	   NUMLIN=NUMLIN+1
	   CALL BSLN
	   LEN = READSTR(STRING)
C
C Store the names
C
	   IF (HAD_OBJ) THEN
	      NAME_LEN(IJK) = LEN
	      DO 650 KJI = 1,LEN
	         NAME_ARRAY(KJI,IJK) = TXTBUF(KJI)
650	      CONTINUE
	   ENDIF
C
600	CONTINUE
C
C Read arc attribute information
C
	DSTARC=FLRLIN()
	IF (.NOT.DSTARC) GOTO 999
C
	NUMLIN=NUMLIN+1
C
699	CONTINUE
C
	CALL BSLN
C
	IF(RDINT(NUMCOL)) GOTO 900		!Colour ID number
	IF(RDINT(DUMMY))  GOTO 900		!Unwanted value
	IF(RDINT(NUMPATT))  GOTO 900		!Line pattern number
	IF(RDREAL(ARCHGHT)) GOTO 900 		!Polygon height
C
	IGNORE = .FALSE.
C
C Get FC if given in parameter file
C
	IF (HAD_PAR) THEN
C Search for colour and style combination
C
	   DO 101 IJK=1,ARC_CNT
	      IF (DSTCOLOUR(DST_ARC,IJK).EQ.NUMCOL .AND.
     &		  DSTPATTERN(DST_ARC,IJK).EQ.NUMPATT) THEN
		 FS(1) = DST_FC(DST_ARC,IJK)
		 GT    = DST_GT(DST_ARC,IJK)
		 GOTO 104
	      ENDIF
101	   CONTINUE
C
C No match; ignore this entity
C
	   CALL LSL_PUTMSG(DSTI__ENTIGNORE,NUMLIN)
	   IGNORE = .TRUE.
	   GOTO 104
	ENDIF
C
C No parameter file; use simple FC calculation as before
C
	REMCOL = MOD(NUMCOL,5)
	IF (REMCOL.EQ.0) REMCOL=5
	REMPAT = MOD(NUMPATT+1,5)
	IF (REMPAT.EQ.0) REMPAT=5
	FS(1) = (REMCOL-1)*5 + REMPAT+60
C
104	CONTINUE
C
C Read the information relevant to the position and orientation of the 
C feature
C
	DSTARC=FLRLIN()
	IF (.NOT.DSTARC) GOTO 999
C
	NUMLIN=NUMLIN+1
	CALL BSLN
C
	IF (IGNORE) GOTO 1000
C
C Write centre coords to second array element
C
	IF(RDREAL(STBUF(1,2))) GOTO 900
	IF(RDREAL(STBUF(2,2))) GOTO 900
	IF(RDREAL(RADIUS))     GOTO 900
	IF(RDREAL(STARANG))    GOTO 900
	IF(RDREAL(INCLANG))    GOTO 900
C
	STARANG = STARANG * PI/180
	INCLANG = INCLANG * PI/180
C
	IF (HAD_PAR) GOTO 106		! GT already set
C
C Set up defaults for no parameter file
C
	IF (INCLANG.LT.0) THEN
	   GT = CLOTYP
	ELSE
	   GT = ANTTYP
	ENDIF
C
106	IF (GT.EQ.CLOTYP) THEN
	   IF (INCLANG.LT.0) THEN
	      STBUF(1,1) = STBUF(1,2) + RADIUS * COS(STARANG)
	      STBUF(2,1) = STBUF(2,2) + RADIUS * SIN(STARANG)
	      STBUF(1,3) = STBUF(1,2) + RADIUS * COS(STARANG+INCLANG)
	      STBUF(2,3) = STBUF(2,2) + RADIUS * SIN(STARANG+INCLANG)
	   ELSE
	      STBUF(1,1) = STBUF(1,2) + RADIUS * COS(STARANG+INCLANG)
	      STBUF(2,1) = STBUF(2,2) + RADIUS * SIN(STARANG+INCLANG)
	      STBUF(1,3) = STBUF(1,2) + RADIUS * COS(STARANG)
	      STBUF(2,3) = STBUF(2,2) + RADIUS * SIN(STARANG)
	   ENDIF
	ELSEIF (GT.EQ.ANTTYP) THEN
	   IF (INCLANG.LT.0) THEN
	      STBUF(1,1) = STBUF(1,2) + RADIUS * COS(STARANG+INCLANG)
	      STBUF(2,1) = STBUF(2,2) + RADIUS * SIN(STARANG+INCLANG)
	      STBUF(1,3) = STBUF(1,2) + RADIUS * COS(STARANG)
	      STBUF(2,3) = STBUF(2,2) + RADIUS * SIN(STARANG)
	   ELSE
	      STBUF(1,1) = STBUF(1,2) + RADIUS * COS(STARANG)
	      STBUF(2,1) = STBUF(2,2) + RADIUS * SIN(STARANG)
	      STBUF(1,3) = STBUF(1,2) + RADIUS * COS(STARANG+INCLANG)
	      STBUF(2,3) = STBUF(2,2) + RADIUS * SIN(STARANG+INCLANG)
	   ENDIF
	ELSEIF (GT.EQ.CIRTYP) THEN		! circumcirle arc
	   STBUF(1,1) = STBUF(1,2) + RADIUS * COS(STARANG)
	   STBUF(2,1) = STBUF(2,2) + RADIUS * SIN(STARANG)
	   STBUF(1,3) = STBUF(1,2) + RADIUS * COS(STARANG+INCLANG)
	   STBUF(2,3) = STBUF(2,2) + RADIUS * SIN(STARANG+INCLANG)
	   STBUF(1,2) = STBUF(1,2) + RADIUS * COS((STARANG+INCLANG)/2)
	   STBUF(2,2) = STBUF(2,2) + RADIUS * SIN((STARANG+INCLANG)/2)
	ELSEIF (GT.EQ.FULTYP) THEN		! full cirle 
C
C Check that INCLANG is +/- 360 degrees, within 1/50 of a radian 
C (~1 deg)
C
	   IF (2*PI-ABS(INCLANG) .GT. 0.02) 
     &		CALL LSL_PUTMSG(DSTI__CIRCANGERR,NUMLIN)
	   STBUF(1,1) = STBUF(1,2) + RADIUS
	   STBUF(2,1) = STBUF(2,2)
	   STBUF(1,2) = STBUF(1,2)
	   STBUF(2,2) = STBUF(2,2) + RADIUS
	   STBUF(1,3) = STBUF(1,2) - RADIUS
	   STBUF(2,3) = STBUF(2,2)
	ENDIF
C
C Update range
C
	CALL UPDATE_RANGE(STBUF(1,1),STBUF(2,1))
	CALL UPDATE_RANGE(STBUF(1,2),STBUF(2,2))
	CALL UPDATE_RANGE(STBUF(1,3),STBUF(2,3))
C
C Increment the number of features written and then write the relevant
C details into the feature
C
	NUMFEAT=NUMFEAT+1
C
	CALL IFFNF(NUMFEAT,NUMFEAT)
	CALL IFFFS(FS)
C
	IF (HAD_OBJ) THEN
	   DO 850 IJK = 1,NOBJ
	      DO 860 KJI = 1,NAME_LEN(IJK)
		 AC_ARRAY(KJI) = NAME_ARRAY(KJI,IJK)
860	      CONTINUE
C
	      CALL IFFAC(AC_NUMBER,0,AC_ARRAY,NAME_LEN(IJK))
850	   CONTINUE
	ENDIF
C
	CALL IFFAC(3,ARCHGHT,,)
	CALL IFFST(STBUF,3,0)
	CALL IFFEF
C
	GOTO 1000
C
900	DSTARC = DSTI__ERRINTLIN
	CALL LSL_PUTMSG(DSTI__ERRINTLIN,NUMLIN)
	GOTO 1000
C
999	CALL LSL_PUTMSG(DSTARC)
	CALL LSL_ADDMSG(DSTI__ERRINTLIN,NUMLIN)
C
1000	RETURN
	END
C
