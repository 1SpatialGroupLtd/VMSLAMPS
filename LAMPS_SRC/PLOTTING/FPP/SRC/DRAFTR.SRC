C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-12-09 12:03:58.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE DRAFTR(NF_ADDR,FC_OF_PART,PRIORITY_DRAWING,LABELLING)
C
***	MODULE	DRAFTR
***	IDENT	09DE94
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author:  S. Townrow
C
C	Created					 ST	10 March 1992
C
C To read an IFF feature (from NF to EF) and plot it
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	PARAMETER/CMN:GKSPAR/
C
***	COMMON/CMN:ACSEL/
***	COMMON/CMN:CB/
***	COMMON/CMN:CURFT/
***	COMMON/LSL$CMNFRT:FRTACD/
***	COMMON/CMN:GRABUF/
***     COMMON/CMN:LABEL/
***	COMMON/CMN:CONT/
***	COMMON/CMN:DRAWIN/
***	COMMON/CMN:FPPDAT/
***	COMMON/LSL$CMNFRT:FRTCOM/
***	COMMON/LSL$CMNIFF:IFFHAN/
***	COMMON/LSL$CMNIFF:IFFSTR/
***	COMMON/CMN:SCALES/
***	COMMON/CMN:SELECT/
***	COMMON/CMN:TITLE/
C
C Args
C
	INTEGER*4	NF_ADDR		 ! Address of feature to position to
	INTEGER*2	FC_OF_PART	 ! the representation of feature
	LOGICAL		PRIORITY_DRAWING ! do we use FC_OF_PART?
	LOGICAL		LABELLING	 ! do we label this feature when
C					 ! priority drawing?
C
C W/s
	INTEGER*4 I
	INTEGER*4 ICVAL         ! contour value
	REAL	  RCVAL		! real 'contour' value
	EQUIVALENCE (ICVAL,RCVAL)
	INTEGER*4 LPOSFS	! FS entry position
	INTEGER*2 IECODE	! IFF entry read in
	INTEGER*2 IELEN		! length of entry read in
	INTEGER	NUMRED		! number of coord pairs to be read
	INTEGER	STPTS		! number of coord pairs in ST entry
	INTEGER	IENDS		! ST ends flag
	INTEGER   START		! position in ST that coords read from
 	INTEGER*4 ACTYPE        ! AC type number
	INTEGER	  ACLEN
	LOGICAL	INFTR		! currently within NF - EF entries
	LOGICAL	HADHGT		! had height value
	LOGICAL	HADTS		! had TS entry
	LOGICAL	LABSUP		! suppress label for this feature
	LOGICAL	FEATURE_BEGIN	! done LSG_BEGIN_FEATURE
	INTEGER*2	FC_FROM_FS	! feature code from FS
	INTEGER		ORIGT		! original GT
	LOGICAL		BBOX		! want text/symbol bounding box
	LOGICAL		BOXCMPLX	! complex box?
	REAL		BOXOFF		! box offset
	INTEGER*4	STAT_ADDR
C
C Functions
	LOGICAL	LIB$EXTZV
	LOGICAL	LIB$EXTV
	LOGICAL	FRTFND		! finds a ft code in the FRT table
	LOGICAL	CHKST		! checks no. of pts suits the ft type
	LOGICAL	SETCON		! set up con col and check if wanted
	LOGICAL	HADCTRLC	! had a CTRL/C
	LOGICAL	ISELAC		! check AC selections
C
C***********************************************************************
C
C Initialise
	CTRLC=.FALSE.		! not had CTRL/C
	FEATURE_BEGIN = .FALSE.	! not done LSG_BEGIN_FEATURE
C
C If thick lines have been (un)suppressed for this layer/file then
C we must tell FRTLIB to permit/suppress thick lines in text/symbols
	FRTHKS=(.NOT.THKLIN)
C
C and start count for logging
	IF (LOGOPT) LOG_COUNT = LOG_NO
C
C check for silly index contour interval (to avoid zero divides)
	IF (LABINX.AND.CINDEX.EQ.0) THEN
	   CALL TTWSTR('Index contour interval not specified')
	   CALL TTWSTR('Index contour labelling switched off')
	   LABINX = .FALSE.
	ENDIF
C
C***********************************************************************
C
C Incoming address should be that of a new feature (NF)
C
	CALL IFFPKE(IECODE,IELEN,NF_ADDR)
	IF (IELEN.EQ.-1) GOTO 998
	IF (IECODE.EQ.'NF') THEN
	   GOTO 30			! go and deal with NF
	ELSE
	   CALL WRITEF('Got %C entry in IFF file when expected NF',IECODE)
	   GOTO 999
	ENDIF
C
C Main loop - read the next entry
10	CALL IFFNXT(IECODE,IELEN)
	IF (IELEN.EQ.-1) GOTO 998
	TITLE_LAYERPOS = LPOSH		! record for progress reporting
C
C Which entry is it ?
	IF (IECODE.EQ.'FS') GOTO 40
	IF (IECODE.EQ.'CB') GOTO 50
	IF (IECODE.EQ.'TS') GOTO 70
	IF (IECODE.EQ.'EF') GOTO 80
	IF (IECODE.EQ.'TH') GOTO 140
	IF (IECODE.EQ.'TX') GOTO 150
	IF (IECODE.EQ.'RO') GOTO 160
	IF (IECODE.EQ.'AC') GOTO 200
C
C Unknown entry
	CALL WRITEF('Unexpected %C in IFF at %^L%N',IECODE,LPOSH)
	IF (INFTR) CALL WRITEF('Layer %^W%I6 - FSN %^L%I6 - ISN %I6'
     &     ,LAYNUM,FTNUM,ISQ)
	GOTO 10
C
C Error exits
12	CALL WRITEF('Layer %^W%I6 - FSN %^L%I6 - ISN %I6',
     &						LAYNUM,FTNUM,ISQ)
14	CALL IFFNXC('EF',IELEN)
	IF (IELEN.LT.0) GOTO 998
	GOTO 999
C
C***********************************************************************
C
C NF - new feature
30	CALL LSG_BEGIN_FEATURE
	FEATURE_BEGIN = .TRUE.
	CALL EIHRI(FTNUM,1,1)	! read feature number
	FTNUM = IAND(FTNUM,65535) ! convert to unsigned longword
	IF (FTNUM.EQ.0) GOTO 14	! dummy feature
C
C Is this feature number selected or not ?
C
	IF (.NOT.PRIORITY_DRAWING) THEN
	   IF (.NOT.LIB$EXTZV(FTNUM,1,FSNMAP)) GOTO 14
	ENDIF
C
	CALL EIHRI(ISQ,1,2)	! read internal sequence number
	ISQ = IAND(ISQ,65535)	! convert to unsigned longword
	INFTR =.TRUE.		! now in a new ft
	FRSTST = .TRUE.		! 1st ST in feature
	FIRST = .TRUE.		! 1st  ST not reached STDRAW yet
	LAST = .FALSE.		! last ST not reached STDRAW yet
	HADRO = .FALSE.		! haven't had an RO entry in ft yet
	HADHGT = .FALSE.	! had an AC height value
	OFFSETF = .FALSE.	! not an offset feature (FRTSIZ > 0.0)
	STD = .FALSE.		! not started drawing offset features
	ROTANG = 0.0		! reset rotation from any previous RO
	ANGLE = 0.0		! default symbol/text ft angle
	SIZE  = 0.0		! default symbol/text ft size
	FTCNT = FTCNT+1		! keep track of total number of fts
	LFTCNT = LFTCNT+1	! keep track of number of fts in layer
	FTTHK = 0		! reset text thickness from TH entry
	TOTPTS = 0		! reset number of points in ft
	OUTPTR = 0		! reset buffer ptr used in ADDBLK
	CURCOL = -1		! assume use FRT colour
	HADTS  = .FALSE.	! not had TS entry yet
	PATHWL = 0		! not patterned hardware line yet
	LABSUP = .FALSE.	! don't suppress label
	INVSEG = .FALSE.	! first segment not invisible
	IF (HADLAB) THEN
	   DO 31, I = 1,NUM_LAB_AC		! clear had ac flags
	      HAD_LAB_AC(I) = .FALSE.
31	   CONTINUE
	ENDIF
C
	GOTO 10
C
C***********************************************************************
C
C FS - feature status (feature code)
40	CALL EIHRI(ISTAT,MIN(IELEN,4),1)
	FC_FROM_FS = ISTAT(1)		! remember for TS entry
	IF (FSSET) GOTO 45		! FTCODE fixed
C
	IF (PRIORITY_DRAWING) THEN
	   FTCODE = FC_OF_PART
C
C find the original feature code, to check its GT later
	   IF (FRTFND(FC_FROM_FS)) THEN
	     CALL WRITEF(
     &		'Unknown ft code %^W%N found - ft ignored',FC_FROM_FS)
	     GOTO 12
	   ENDIF
	   ORIGT = FRTGT
	ELSE
	   FTCODE=ISTAT(1)		! extract ft code
	ENDIF
C
	IF (FTCODE.LT.0.OR.FTCODE.GT.MAXFC) THEN
	   CALL WRITEF('Illegal ft code %^W%N found - ft ignored',FTCODE)
	   GOTO 12
	ENDIF
C
C Is this feature code selected or not ?
C
	IF (.NOT.PRIORITY_DRAWING) THEN
	   I = FTCODE			! convert to long
	   IF (.NOT.LIB$EXTZV(I,1,FCMAP)) GOTO 14
	ENDIF
C
C For testing..
C	call writef('Processing FSN %^W%I6',FTNUM)
C	call writef('- with FC %^W%I6',FTCODE)
C
C Look the feature code up in the FRT table
45	IF (FRTFND(FTCODE)) THEN
	  CALL WRITEF('Unknown ft code %^W%N found - ft ignored',FTCODE)
	  GOTO 12
	ENDIF
C
C check if we are drawing a symbol/text as a line/area (i.e.
C want a bounding box). Only check for change of GT, so beware
C if we ever allow symbols to have a *different* symbol GT.
C Get the offset (from FRTSIZ) and 'complex' (from FRTFLG), then
C change back to the original feature code
C 
	BBOX = .FALSE.
	IF (PRIORITY_DRAWING) THEN
	   IF ((ORIGT.GE.UNOTYP.AND.ORIGT.LE.TEXTYP).AND.
     &		FRTGT.NE.ORIGT) THEN
	      BBOX = .TRUE.
	      BOXOFF = FRTSIZ
	      BOXCMPLX = LIB$EXTV(15,1,FRTFLG)
	      IF ( FRTFND(FC_FROM_FS)) THEN
	         CALL WRITEF(
     &		'Unknown ft code %^W%N found - ft ignored',FC_FROM_FS)
	        GOTO 12
	      ENDIF
	   ENDIF
	ENDIF
C
C check AC selections
	IF (NACSEL.NE.0) THEN
	   LPOSFS = LPOSH			! remember FS position
	   IF (.NOT.ISELAC()) GOTO 14		! reject feature
	   CALL IFFPKE(IECODE,IELEN,LPOSFS)	! back to FS
	ENDIF
C
C Set up line pattern, and thickness
	IF (FRTLIN.OR.FRTARE.OR.FRTARC.OR.FRTCUR) THEN
	   CALL SETLIN
           IF (NFHGT) THEN
	      ICVAL = FTNUM
	      IF (CONCMD) THEN
	         IF (SETCON(ICVAL)) GOTO 14
              ENDIF
	      HADHGT = .TRUE.
	      IF (LABINX) THEN
C
C Test if divisible by contour index
	         IF (MOD(ICVAL,CINDEX).NE.0) LABSUP = .TRUE.
	      ENDIF
	   ENDIF
C
C offset feature?
	   IF ((FRTLIN.OR.FRTCUR).AND.FRTSIZ.NE.0.0) THEN
	      OFFSETF = .TRUE.
	      OFFDIST = FRTSIZ
	   ENDIF
	ENDIF
C
C Get locating point for text from FS(3), if it exists
	IF (FRTTEX) THEN
	   LOCAT=0
	   IF (POSOPT) THEN		! positioning flag set
	      IF (IELEN.GE.3) THEN
	         LOCAT=ISTAT(3).AND.'17'O	! get text location
	         IF (LOCAT.GT.8) THEN		! in range 0-8
	            CALL WRITEF(
     &	         'Illegal text location code %N; defaulted to 0',LOCAT)
	            LOCAT=0
	         ENDIF
	      ENDIF
	   ENDIF
	ENDIF
C
C set up size for symbol strings
	IF (FRTGT.EQ.STRTYP) CALL ANGSIZ
	GOTO 10
C
C***********************************************************************
C
C ST - string of coordinates
C There is an unknown number of coords in the entry so we read
C them in blocks (currently of up to 200 coord pairs)
C There is always a block buffered (held in COORDS) which is output
C when the next block has been read. The last block is output when
C an IFF EF entry is found. This allows the last block to be signalled
C as being the last block
50	CALL EIHRCB_HEAD(CBH)
	STPTS = CBH.NROW
	IENDS = CBH.FLAGS
	IF (STPTS.LE.0) GOTO 10
	TOTPTS=TOTPTS+STPTS	! update total number of coords in ft
	START=0			! position reading from in ST
C
C Do we want an invisible move to the 1st point ?
C If this is not the first ST and the move is invisible, flush the
C buffer first.
	IF ((IENDS.AND.1).EQ.0.AND..NOT.FRSTST) THEN
	   LAST=.TRUE.		! pretend it's the end of this feature
	   CALL BUFFER		! force out the buffer in hand
	   LAST=.FALSE.		! drop the pretence ..
	   FIRST=.TRUE.		! and tell a few blatant lies !!
	   FRSTST=.TRUE.
	   STD = .FALSE.	! not started outputting offset lines
	   CALL OUTBLK		! output the previous coords
	   INVSEG = .TRUE.	! invisible segment
C
C reset pattern to start at end of gap (unless FRTCLP, which is FRT flag
C bit 10, and means maintain pattern phase through gaps)
C this does not fail as pattern is set up already
	   IF (.NOT.FRTARE.AND..NOT.FRTSYM.AND.
     &		.NOT.FRTCLP.AND.PATLIN.AND.FRTSC.NE.0) CALL PATSET(FRTSC)
	ENDIF
C
C If on first ST or this ST starts 'pen up' then
C see whether a curve feature is a closed loop
	IF (FRTCUR.AND.(FRSTST.OR.((IENDS.AND.1).EQ.0))) THEN
	   CALL LOOPY
	ENDIF
C
C copy points from IFF in maximal chunks to minimise overheads
	BLKNATT = 0
	IF (SIMPLE_XY.AND.STPTS.LE.200) THEN	! simple ST format
	   CALL EIHRCB_DATA(BLKBUF)		! read direct to BLKBUF
	ELSE
	   CALL EIHRCB_DATA(CBD)		! read to scratch
	ENDIF
C
C Read in the 1st block of coords
C loop back to here for further buffers
60	NUMRED=MIN(STPTS,BLKSIZ)
	BLKPTS=NUMRED
	IF (SIMPLE_XY) THEN
	   IF (START.NE.0.OR.STPTS.GT.200) CALL VIOMV3(
     &			CBD.R(START*CBH.NCOL+1), 8*NUMRED, BLKBUF )
	ELSE
	   IF (FRTSYM.AND.(
     &		(.NOT.BBOX.AND.SYMBAD.NE.0).OR.
     &		(BBOX.AND.SYMBAD_B.NE.0))) THEN
C
C get all the attributes if necessary
	      CALL GETATT
     &        (BLKBUF,BLKNATT,18,BLKATTC,BLKATTV,0,1,START+NUMRED)
	   ELSE
	      CALL IFS_CB_READ
     &        (CBH,CBD,BLKBUF,2,COLHXY,START+1,START+NUMRED)
	   ENDIF
	ENDIF
C
C If labelling, then draw label now
	IF (FRSTST.AND..NOT.INVSEG) THEN
C	   IF (HADLAB.AND..NOT.LABSUP.AND..NOT.FRTTEX) CALL DRWLAB
	   IF (HADLAB.AND..NOT.LABSUP.AND..NOT.FRTTEX) THEN
		IF (PRIORITY_DRAWING) THEN
		   IF (LABELLING) THEN
		      CALL DRWLAB
		      GOTO 14		! don't draw feature
		   ENDIF
		ELSE
		   CALL DRWLAB
		ENDIF
	   ENDIF
C
C set colour for feature
	   IF (CURCOL.GT.0) THEN
	      CALL SETCOL(CURCOL,PRIORITY_DRAWING)
	      CALL SRICOL(CURCOL)
	   ELSE
	      CALL SETCOL(FRTCOL,PRIORITY_DRAWING)
	      IF (FRTCOL.EQ.0 .AND. PRIORITY_DRAWING) THEN
	         CALL SRICOL(0)
	      ELSE
	     	 CALL SRICOL(-1)
	      ENDIF
	   ENDIF
	ENDIF
C 
	CALL BUFFER			! output the coords
	STPTS=STPTS-NUMRED		! how many points remain in ST?
	IF (STPTS.LE.0) GOTO 10		! any more points?
	START=START+NUMRED		! update the reading position
	GOTO 60				! back for next block of coords
C
C***********************************************************************
C
C TS - Text status
70	CONTINUE
C
C only valid in text features - ignore otherwise
	IF (.NOT.FRTTEX) THEN
	   CALL WRITEF(
     &	         'TS entry found in non-text feature - entry ignored')
	   GOTO 10
	ENDIF
C
C if not the first TS, then output the last text component
C
	IF (HADTS) THEN
C check that number of points is valid
C the feature type

	   IF (.NOT.(CHKST())) GOTO 130	! jump to abort the ft
C
C Work out the angle and size
	   CALL ANGSIZ
C
C Get the feature out
	   IF (BBOX) THEN
	      CALL BOX_DRAFTR(FC_OF_PART,BOXOFF,BOXCMPLX,
     &			IFF_MAXCBDATA/2,CBD)
	   ELSE
	      LAST=.TRUE.
	      CALL BUFFER	! empty the ST buffers
	   ENDIF
	ENDIF
C
C overwrite ISTAT
C
	CALL EIHRI(ISTAT,MIN(IELEN,4),1)
C
C if using priority drawing, and the text component code is the same
C as the feature code (as is usual when all TCCs are the same), then
C use the prio code instead. The main remaining non-working case
C is using different TCCs and drawing more than once with different
C prio FCs - will be drawn with the TCCs each time.
	IF ( PRIORITY_DRAWING .AND. ISTAT(1).EQ.FC_FROM_FS .AND.
     &					.NOT.BBOX ) THEN
	   FTCODE = FC_OF_PART
	ELSE
	   FTCODE = ISTAT(1)
	ENDIF
C
	IF (FTCODE.LT.0.OR.FTCODE.GT.MAXFC) THEN
	   CALL WRITEF('Illegal text commponent code %^W%N found '//
     &	               '- ft ignored',FTCODE)
	   GOTO 12
	ENDIF
C
	IF (FRTFND(FTCODE)) THEN
	   CALL WRITEF('Unknown text component code %^W%N found '//
     &	               '- ft ignored',FTCODE)
	   GOTO 12
	ENDIF
C
C
C only valid in text features - ignore otherwise
	IF (.NOT.FRTTEX) THEN
	   CALL WRITEF(
     &	         'TS entry not text code - entry ignored')
	   GOTO 10
	ENDIF
C
C Get locating point for text from TS(3), if it exists
	LOCAT=0
	IF (POSOPT) THEN		! positioning flag set
	   IF (IELEN.GE.3) THEN
	      LOCAT=ISTAT(3).AND.'17'O	! get text location
	      IF (LOCAT.GT.8) THEN		! in range 0-8
	         CALL WRITEF(
     &	      'Illegal text location code %N; defaulted to 0',LOCAT)
	         LOCAT=0
	      ENDIF
	   ENDIF
	ENDIF
C
C now had a TS - treat like an NF
C
	FRSTST = .TRUE.		! 1st ST in feature
	FIRST = .TRUE.		! 1st  ST not reached STDRAW yet
	LAST = .FALSE.		! last ST not reached STDRAW yet
	HADRO = .FALSE.		! haven't had an RO entry in ft yet
	ROTANG = 0.0		! reset rotation from any previous RO
	ANGLE = 0.0		! default symbol/text ft angle
	SIZE  = 0.0		! default symbol/text ft size
	FTTHK = 0		! reset text thickness from TH entry
	TOTPTS = 0		! reset number of points in ft
	OUTPTR = 0		! reset buffer ptr used in ADDBLK
	CURCOL = -1		! assume use FRT colour
	HADTS = .TRUE.
C
	GOTO 10
C
C***********************************************************************
C
C EF - end feature
C Check that the number of points in this feature is sensible for
C the feature type
80	IF (.NOT.(CHKST())) GOTO 130	! jump to abort the ft
C
C Work out the angle and size for symbols and text features
	IF ((FRTSYM.AND.FRTGT.NE.STRTYP).OR.FRTTEX) CALL ANGSIZ
C
C Get the feature out
	IF (BBOX) THEN
	   CALL BOX_DRAFTR(FC_OF_PART,BOXOFF,BOXCMPLX,
     &			IFF_MAXCBDATA/2,CBD)
	ELSE
	   LAST=.TRUE.
	   CALL BUFFER	! empty the ST buffers
	   IF (FRTSYM.OR.FRTTEX) GOTO 130
	   CALL OUTBLK	! empty the output buffers for linear features
	   IF (FRTARE) THEN
	      IF (PATLIN.AND.FRTSC.LT.-1) THEN	! patterned fill
	         CALL FRT_END_FILL
	      ELSE				! ordinary area
	         CALL LSG_END_AREA
	      ENDIF
	   ENDIF
	ENDIF
C
C Terminate feature
130	INFTR=.FALSE.
C
C LOG this feature?
	IF (LOGOPT) THEN
	   LOG_COUNT = LOG_COUNT-1
	   IF (LOG_COUNT.LE.0) THEN
	      CALL WRITEF('Layer %^W%I6 - FSN %^L%I6 - ISN %I6'
     &						,LAYNUM,FTNUM,ISQ)
	      LOG_COUNT = LOG_NO
	   ENDIF
	ENDIF
C
C do we want to pause here?
	IF (PAUSE) THEN
	   PAUSE_COUNT = PAUSE_COUNT + 1
	   IF (PAUSE_COUNT.GE.PAUSE_NO) THEN
	      CALL WRITEF('Paused after %^L%N features',PAUSE_COUNT)
	      CALL GUWK(WKID,GSUPP)	! update workstation
	      PAUSE_NOW = .TRUE.
	   ENDIF
	ENDIF
C
	GOTO 999
C
C***********************************************************************
C
C TH - set thickness
C This entry is only used for text height for current ft - if this
C is not set then the text height is taken from the FRT size
140	CALL EIHRI(FTTHK,1,1)
	GOTO 10
C
C***********************************************************************
C
C TX - text string in aligned text feature
C Check the number of characters is not too large
150	IF (IELEN.EQ.0) THEN
	   CALL WRITEF('Text feature contains zero length text')
	   GOTO 12
	ENDIF
	IF (IELEN.GT.(MAXTXTLEN+1)/2) THEN
	   CALL WRITEF('Text feature contains too many chars (max %N)',
     &	               MAXTXTLEN)
	   CALL WRITEF('Layer %^W%I6 - FSN %^L%I6 - ISN %I6',
     &					LAYNUM,FTNUM,ISQ)
	   IELEN=(MAXTXTLEN+1)/2	! chop off any extra characters
	ENDIF
C
C Now read the characters in
	CALL EIHR(TXBUF,IELEN,1)
	TXPTR=IELEN*2
C
C Decrement the character count if the last byte (of the whole number
C of words we have read in) is null
	IF (TXBUF(TXPTR).EQ.0) TXPTR=TXPTR-1
	TXPTR = MIN(TXPTR,MAXTXTLEN)
	GOTO 10
C
C***********************************************************************
C
C RO - rotation of symbol or text feature (given in radians -
C clockwise from the horizontal)
160	CALL EIHRR(ROTANG,1,1)
	HADRO=.TRUE.
	GOTO 10
C
C***********************************************************************
C AC - check for labelling, and height (types 2 or 3)
200	ACTYPE = 0			! zero long word
	CALL EIHR(ACTYPE,1,1)		! got AC type
	IF (ACTYPE.EQ.2.OR.ACTYPE.EQ.3) THEN
 	   IF (.NOT.HADHGT) THEN	! not already had a height
	      CALL EIHRL(ICVAL,1,2)
	      IF (ACTYPE.EQ.3.AND.(CONCMD.OR.LABINX)) ICVAL=NINT(RCVAL)
	      IF (CONCMD) THEN
	         IF (SETCON(ICVAL)) GOTO 14	! skip feature
              ENDIF
	      HADHGT = .TRUE.
	      IF (LABINX) THEN
C
C Test if divisible by contour index
	         IF (MOD(ICVAL,CINDEX).NE.0) LABSUP = .TRUE.
	      ENDIF
	   ENDIF
	ENDIF
C
C see if this is required
C
	IF (LABSUP.OR.FRTTEX.OR..NOT.HADLAB) GOTO 10	! don't bother
	DO 251, I=1,NUM_LAB_AC
	   IF (LABAC(I).EQ.ACTYPE) THEN
	      HAD_LAB_AC(I) = .TRUE.
C
C read and remember the value (if required)
C
	      IF (LABACV(I)) CALL EIHRL(LABACVAL(I),1,2)
C
C read and remember the text (if required)
C
	      IF (LABACTXT(I)) THEN
	         ACLEN = MIN(IELEN-3,(ACMAX+1)/2) ! length of text part
	         IF (ACLEN.GT.0) THEN
	            CALL EIHR(LABACBUF(1,I),ACLEN,4)	! text
	            ACLEN = ACLEN*2			! bytes
	            ACLEN = MIN(ACLEN,ACMAX)
C
C make sure buffer is terminated by a null
C
	            IF (LABACBUF(ACLEN,I).NE.0)
     &	                LABACBUF(MIN(ACLEN+1,ACMAX),I) = 0
	         ELSE
	            LABACBUF(1,I) = 0
	         ENDIF
	      ENDIF
	      GOTO 10		! don't look at any more entries in LABAC
	   ENDIF
251	CONTINUE
	GOTO 10
C
C Errors
998	CALL WRITEF('Unexpected end of IFF file.')
C
999	IF (FEATURE_BEGIN) CALL LSG_END_FEATURE
	RETURN
C
	END
