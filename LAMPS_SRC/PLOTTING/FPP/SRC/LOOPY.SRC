C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-11-15 13:15:58.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE LOOPY
C
***	MODULE	LOOPY
***	IDENT	15NO94
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author  Clarke Brunt
C
C Coded 13.vii.84 (Friday 13th!)
C
C Called with an IFF CB entry in hand. Scans successive entries
C until last CB , or a CB with a 'pen up' start is found.
C Returns TRUE if last point is same as first (feature is a loop).
C Restores IFF position to that on entry.
C No errors are produced, in case of difficulty attempt to reposition
C the IFF file and let our caller discover the problem.
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
***	COMMON/CMN:CB/
***	COMMON/CMN:CURFT/
***	COMMON/LSL$CMNIFF:IFFHAN/
***	COMMON/LSL$CMNIFF:IFFSTR/
C
C w/s
	INTEGER*2	IECODE,IELEN
	INTEGER*4	CURPOS		! saved IFF position
	REAL		START(2)	! start point
	REAL		END(2)		! end point
	INTEGER*4	LASTCB		! address of last CB
	LOGICAL		FIRST		! on first CB
C
C Need local CBH to avoid overwriting one in DRAFTR.
C Overwriting CBD does not matter (not read in DRAFTR yet).
	RECORD/IFF_CBH/	LCBH		! a local CBH
C
	LOOP = .FALSE.			! assume not a loop
	CURPOS = LPOSH			! current position
	FIRST = .TRUE.			! reading first CB
	LASTCB = 0			! no CB address yet
C
10	CALL EIHRCB_HEAD(LCBH)
	IF (LCBH.NROW.LE.0) GOTO 50	! eh?
	IF (FIRST) THEN			! on our first CB
	   CALL EIHRCB_DATA(CBD)! read into scratch, and extract START
C
C get first and last point of this first CB
	   CALL IFS_CB_READ(LCBH,CBD,START,2,COLHXY,1,1)
	   CALL IFS_CB_READ(LCBH,CBD,END,2,COLHXY,LCBH.NROW,LCBH.NROW)
	   FIRST = .FALSE.		! got start point now
	ELSE
	   IF ((LCBH.FLAGS.AND.1).EQ.0) GOTO 40	! pen up
	   LASTCB = LPOSH		! remember position
	ENDIF
20	CALL IFFNXT(IECODE,IELEN)	! on to next entry
	IF (IELEN.EQ.-1) GOTO 50	! eh?
	IF (IECODE.EQ.'VO') GOTO 20	! ignore voids
	IF (IECODE.EQ.'CB') GOTO 10	! deal with another CB
C
C Run out of relevant CB's so check whether a loop or not
C Go back for last point if needed
40	IF (LASTCB.NE.0) THEN
	   CALL IFFPKE(IECODE,IELEN,LASTCB)
	   CALL EIHRCB_HEAD(LCBH)
	   IF (LCBH.NROW.LE.0) GOTO 50	! eh?
	   CALL EIHRCB_DATA(CBD)! read into scratch
	   CALL IFS_CB_READ(LCBH,CBD,END,2,COLHXY,LCBH.NROW,LCBH.NROW)
	ENDIF
	IF (START(1).EQ.END(1) .AND. START(2).EQ.END(2)) LOOP=.TRUE.
50	CALL IFFPKE(IECODE,IELEN,CURPOS)	! reposition
	RETURN
	END
