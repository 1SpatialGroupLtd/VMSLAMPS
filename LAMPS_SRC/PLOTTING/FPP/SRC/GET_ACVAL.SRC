	LOGICAL FUNCTION GET_ACVAL(ACVAL)
C
***	IDENT	20JN88
***	MODULE	GET_ACVAL
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	17-Sep-1987
C
C Description
C
C To decode a line that contains an attribute value
C
	IMPLICIT NONE
C
C arguments
C (out)
	INTEGER		ACVAL		! the value (as an integer)
C
***	PARAMETER/LSL$CMNLSL:READSTR/
C
***	COMMON/LSL$CMNFRT:FRTACD/
C
C w/s
	INTEGER		RET
	INTEGER		IVALUE
	REAL		RVALUE
	CHARACTER*4	CVALUE
	EQUIVALENCE	(IVALUE,RVALUE,CVALUE)
	INTEGER		CLEN
	INTEGER		DUMMY
	INTEGER		I
	BYTE		CH
	CHARACTER*11	TIME_STRING
	CHARACTER*(ACD_FORMAT_MAX+2) F	! format for error message
	INTEGER		F_LEN		! its length
	BYTE		DQOT,SPACE
	PARAMETER	(DQOT='"')
	PARAMETER	(SPACE=' ')
C
C functions called
	LOGICAL		RDLONG
	LOGICAL		RDREAL
	LOGICAL		RDCHS
	INTEGER		READSTR
	LOGICAL		CVT_DATE
	INTEGER		CMPAC
C
	GET_ACVAL = .FALSE.		! assume failure
C
C how to treat rest of line depends on data type
	GOTO (100,200,300,400,500), ACD_DATA_TYPE
	GOTO 999
C
C reading an integer
100	IF (RDLONG(IVALUE)) GOTO 975
	GOTO 900			! try for string
C
C reading a real number
200	IF (RDREAL(RVALUE)) GOTO 975
	GOTO 900			! try for string
C
C reading up to 4 characters
300	CVALUE = '    '			! pad with spaces
	IF (RDCHS(CH)) THEN		! unexpected end of line
	   CALL TTWSTR('Expecting character attribute value')
	   GOTO 999
	ELSEIF (CH.EQ.DQOT) THEN		! double quoted string
	   CLEN = READSTR(CVALUE,DQOT,ON_CHAR2,.FALSE.,RET)
	ELSE					! terminate by space
	   CALL BSCH
	   CLEN = READSTR(CVALUE,SPACE,ON_SPACE,.TRUE.,RET)
	ENDIF
	GOTO 900
C
C reading date
400	TIME_STRING = ' '			! make sure empty
	CLEN = READSTR(TIME_STRING,-1,ON_SPACE)
	IF (CLEN.LE.0) THEN			! missing
	   CALL TTWSTR('Expecting time attribute value')
	   GOTO 999
	ENDIF   
C
C help to get valid date string, by ignoring lower case letters
	CALL STR$UPCASE(TIME_STRING,TIME_STRING)
	IF (.NOT.CVT_DATE(TIME_STRING,IVALUE,DUMMY)) THEN
	   CALL WRITEF('Error in format of date string "%S"',
     &						TIME_STRING(:CLEN))
	   GOTO 999
	ENDIF
	GOTO 900
C
C reading time
500	TIME_STRING = ' '			! make sure empty
	CLEN = READSTR(TIME_STRING,-1,ON_SPACE)
	IF (CLEN.LE.0) THEN			! missing
	   CALL TTWSTR('Expecting time attribute value')
	   GOTO 999
	ENDIF
C
C add "-- " to make time a valid (absolute) VMS time
	IF (.NOT.CVT_DATE('-- '//TIME_STRING,DUMMY,IVALUE)) THEN
	   CALL WRITEF('Error in format of time string "%S"',
     &						TIME_STRING(:CLEN))
	   GOTO 999
	ENDIF
	GOTO 900
C
C check for valid value - integers, reals and characters
900	IF (CMPAC(IVALUE,ACD_MIN_MAX_I(1),ACD_DATA_TYPE).LT.0.OR.
     &	    CMPAC(IVALUE,ACD_MIN_MAX_I(2),ACD_DATA_TYPE).GT.0) THEN
C
C write out an error message
	   IF (ACD_DATA_TYPE.EQ.ACD_DATATYPE_C) THEN
	      F     = '"'//ACD_FORMAT(:ACD_FORMAT_LEN)//'"'
	      F_LEN = ACD_FORMAT_LEN + 2
	   ELSE
	      F     = ACD_FORMAT(:ACD_FORMAT_LEN)
	      F_LEN = ACD_FORMAT_LEN
	   ENDIF
	   CALL WRITEF(
     &		F(:F_LEN)//' is outside valid range of '//
     &		F(:F_LEN)//' : '//
     &		F(:F_LEN),IVALUE,ACD_MIN_MAX_I(1),
     &		ACD_MIN_MAX_I(2))
	   GOTO 999
	ENDIF
	GOTO 990
C
C error reading number
975	CALL TTWSTR('Invalid integer or real attribute value')
	GOTO 999
C
990	ACVAL = IVALUE				! return value
	GET_ACVAL = .TRUE.			! success
C
999	RETURN
	END
