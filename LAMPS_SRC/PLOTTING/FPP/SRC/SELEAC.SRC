	LOGICAL FUNCTION SELEAC(SEL)
C
***	IDENT	31JL91
***	MODULE	SELEAC
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					CCB	19-May-1988
C
C	FPP SELECT AC command.
C
	IMPLICIT NONE
C
***	PARAMETER/LSL$CMNLSL:READSTR/
C
***     COMMON/CMN:ACSEL/
***     COMMON/LSL$CMNFRT:FRTACD/
C
C Arguments
	LOGICAL		SEL		! select or deselect
C
C Functions
	EXTERNAL	SELAC_CMD_TABLE
	LOGICAL		GET_ACTYPE,GET_ACVAL
	LOGICAL		STORE_ACSEL
	INTEGER		READSTR
	LOGICAL		RDCHS
	INTEGER		CMPAC
	INTEGER		FNDAC
	INTEGER		CREATE_ACSEL
	INTEGER		RDCOMM
C
C Local Variables
	INTEGER		AC
	INTEGER		ACTYPE
	INTEGER		VAL(2)
	BYTE		CH
	BYTE		INEQ
	LOGICAL		RANGE
	INTEGER		I
	INTEGER		RET
	CHARACTER*(MAX_ACTXTL)	TXT
	INTEGER		TXTL
	LOGICAL		TEXT
	INTEGER		TERCMD
	BYTE		DQOT
	PARAMETER	(DQOT='"')
C
	SELEAC = .FALSE.		! assume success
C
	IF (RDCHS(CH)) THEN
	   CALL TTWSTR('Expecting rest of command after (DE)SELECT AC')
	   GOTO 990
	ENDIF
	CALL BSCH
C
C decode the AC type
	IF (.NOT.GET_ACTYPE(ACTYPE)) GOTO 990
C
	IF (RDCHS(CH)) THEN
	   TERCMD = 1		! default to command 1, PRESENT
	ELSE
	   CALL BSCH
C
C get tertiary command
	   TERCMD = RDCOMM(SELAC_CMD_TABLE)
	   IF (TERCMD.LE.0) GOTO 990
	ENDIF
C
	TEXT = .FALSE.			! not TEXT subcommand (yet)
C
C obey command
	GOTO (100,200,300,400), TERCMD
C
C PRESENT
C Create or update the AC selection record
100	AC = CREATE_ACSEL(ACTYPE,SEL,TEXT,TXT,TXTL,.FALSE.)
	IF (AC.EQ.0) GOTO 990
	GOTO 1000
C
C CANCEL
C DESELECT AC name CANCEL not allowed
200	IF (.NOT.SEL) THEN
	   CALL TTWSTR(
     &		'Use SELECT AC name CANCEL to cancel AC selections')
	   GOTO 990
	ENDIF
210	AC = FNDAC(ACTYPE)		! lookup up AC type
	IF (AC.NE.0) THEN		! remove it
	   DO 220 I=AC+1,NACSEL
	      ACSEL(I-1) = ACSEL(I)
220	   CONTINUE
	   NACSEL= NACSEL-1
	   GOTO 210			! repeat for subsequent records
	ENDIF
	GOTO 1000
C
C VALUE
300	CONTINUE
C
C join here for TEXT
310	CALL RDINEQ(INEQ)			! read inequality
	IF (.NOT.GET_ACVAL(VAL(1))) GOTO 990	! read first value
	RANGE = .FALSE.
	IF (.NOT.RDCHS(CH)) THEN ! check for and read second value
	   CALL BSCH
	   IF (.NOT.GET_ACVAL(VAL(2))) GOTO 990
	   IF (INEQ.NE.0) THEN
	      CALL TTWSTR(
     &	'A range of values cannot be specified with an inequality')
	      GOTO 990
	   ENDIF
	   RANGE = .TRUE.
	ENDIF
C
C check range is sensible (second > first)
	IF (RANGE) THEN
	   IF (CMPAC(VAL(1),VAL(2),ACD_DATA_TYPE).GE.0) THEN
	      CALL TTWSTR(
     &	'Upper limit of range must be greater than lower limit')
	      GOTO 990
	   ENDIF
	ENDIF
C
C store the selected range of values
	AC = CREATE_ACSEL(ACTYPE,SEL,TEXT,TXT,TXTL,.TRUE.)
	IF (AC.EQ.0) GOTO 990
	IF (.NOT.STORE_ACSEL(AC,SEL,RANGE,INEQ,VAL)) GOTO 990
	GOTO 1000
C
C TEXT
400	CONTINUE
C
C read text
	IF (RDCHS(CH)) THEN
	   CALL TTWSTR(
     &		'Expecting text after (DE)SELECT AC TEXT command')
	   GOTO 990
	ENDIF
	IF (CH.EQ.DQOT) THEN		! quoted string
	   TXTL = READSTR(TXT,DQOT,ON_CHAR2,.FALSE.,RET)
	ELSE				! read to end of line
	   CALL BSCH
	   TXTL = READSTR(TXT,,ON_SPACE,.FALSE.,RET)
	ENDIF
	IF (.NOT.RET) THEN
	   CALL WRITEF(
     &'AC selection text too long, maximum is %N characters',MAX_ACTXTL)
	   GOTO 990
	ENDIF
C
C uppercase the text
	IF (TXTL.GT.0) CALL STR$UPCASE(TXT(:TXTL),TXT(:TXTL))
C
C set datatype to integer for now
	ACD_CODE = -1
	ACD_DATA_TYPE = ACD_DATATYPE_I
	ACD_MIN_MAX_I(1) = ACD_DEF_MINI
	ACD_MIN_MAX_I(2) = ACD_DEF_MAXI
C
	TEXT = .TRUE.		! doing a TEXT command
	IF (RDCHS(CH)) THEN
	   IF (TXTL.EQ.0) THEN
	      CALL TTWSTR(
     &	'Expecting text or values after SELECT AC name TEXT command')
	      GOTO 990
	   ENDIF
	   GOTO 100		! join PRESENT code
	ENDIF
	CALL BSCH
	GOTO 310		! join VALUE code
C
990	SELEAC = .TRUE.		! failed
1000	RETURN
	END
