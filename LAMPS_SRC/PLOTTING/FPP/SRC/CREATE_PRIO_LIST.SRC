C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-12-08 15:47:52.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION CREATE_PRIO_LIST(FINISH)
C
***	MODULE	CREATE_PRIO_LIST
***	IDENT	08DE94
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author:  S Townrow
C
C Created					 ST	11 March 1992
C
C Does a first pass of IFF file, building up the drawing-order list, allocating
C more space as it goes.
C
	IMPLICIT NONE
C
***	COMMON/LSL$CMNFRT:FRTPRIO/
***	COMMON/LSL$CMNFRT:FRTCOM/
***	COMMON/LSL$CMNFRT:FRTACD/
***	COMMON/LSL$CMNIFF:IFFHAN/
***	COMMON/CMN:CURFT/
***	COMMON/CMN:DRAWLIST/
***	COMMON/CMN:SELECT/
***	COMMON/CMN:ACSEL/
***     COMMON/CMN:LABEL/
C
C Arguments
C
	LOGICAL		 FINISH	! set TRUE when file is finished with
C
C Workspace
C
	INTEGER*2	PRIO
	INTEGER*4	ADDR
	INTEGER*2 	IECODE	! IFF entry read in
	INTEGER*2 	IELEN	! length of entry read in
	INTEGER*2	SHIFT
	INTEGER*4	I
	LOGICAL		SPACE
	LOGICAL		OK
	LOGICAL		WANTED
	INTEGER*4	EOPOSN,NOPOSN
C
C Functions
C
	LOGICAL		LIB$EXTZV
	LOGICAL		FRTFND
	LOGICAL		FRTPRIOFND
	LOGICAL		STORE_ENTRY
	LOGICAL		FPP_ALLOC
	LOGICAL		ISELAC		! check AC selections
	LOGICAL		HADCTRLC	! had a CTRL/C
C
C
C***********************************************************************
C
C Initialise some stuff
C
	FINISH = .FALSE.
	CREATE_PRIO_LIST = .FALSE.
	LIST_PTR     = 0
	PRIOLIST_LOC = 0
	OK = .TRUE.
C
C Grab some space
C
	SPACE = FPP_ALLOC()		! if address of list is zero then
					! the routine will do a 'malloc'
					! otherwise it will do a 'realloc'
	IF (.NOT.SPACE) GOTO 1000
C
C***********************************************************************
C
C Main loop - read the next entry
C
10	CALL IFFNXT(IECODE,IELEN)
	IF (IELEN.EQ.-1) GOTO 998
C
C Which entry is it ?
	IF (IECODE.EQ.'NF') GOTO 100
	IF (IECODE.EQ.'FS') GOTO 200
	IF (IECODE.EQ.'EF') GOTO 300
	IF (IECODE.EQ.'EJ') GOTO 400
	IF (IECODE.EQ.'NO') GOTO 500
	GOTO 10
C
14	CALL IFFNXC('EF',IELEN)
	IF (IELEN.LT.0) GOTO 998
	GOTO 10
C
C***********************************************************************
C
C NF - new feature
C
C if there's been a CTRL/C then pretend reached EJ
100	IF (HADCTRLC()) THEN
	   OK = .FALSE.			! pretend there was an error
	   GOTO 400
	ENDIF
C
	CALL EIHRI(FTNUM,1,1)		! read feature number
	FTNUM = IAND(FTNUM,65535)	! convert to unsigned longword
	IF (FTNUM.EQ.0) GOTO 14		! dummy feature
C
C Is this feature number selected or not ?
	WANTED=LIB$EXTZV(FTNUM,1,FSNMAP)
	IF (.NOT.WANTED) GOTO 14
C
	ADDR = LPOSH
	GOTO 10
C
C***********************************************************************
C
C FS - feature status (feature code)
200	CALL EIHRI(ISTAT(1),MIN0(IELEN,4),1)
	IF (FSSET) GOTO 205		! FTCODE fixed
	FTCODE=ISTAT(1)		! extract ft code
C
C Is this feature code selected or not ?
	I = FTCODE			! convert to long
	WANTED=LIB$EXTZV(I,1,FCMAP)
	IF (.NOT.WANTED) GOTO 14
C
C Look the feature code up in the FRT table
C
205	IF (FRTFND(FTCODE)) THEN
	  CALL WRITEF('Unknown ft code %^W%N found - ft ignored',FTCODE)
	  GOTO 14
	ENDIF
C
C check AC selections
C
	IF (NACSEL.NE.0) THEN
	   IF (.NOT.ISELAC()) GOTO 14		! reject feature
	ENDIF
C
C For testing
C
C	call writef('Storing FSN %^W%I6',FTNUM)
C	call writef('- with FC %^W%I6',FTCODE)
	GOTO 10
C
C***********************************************************************
C
C EF - end of feature
300	CONTINUE

	IF (HADLAB) THEN
	   SHIFT = -32768
	ELSE
	   SHIFT = 0
	ENDIF
C
C Look the feature code's PRIORITY up in the FRT table
C
	IF (FRTPRIOFND(FTCODE)) THEN
	   OK = STORE_ENTRY(FTCODE,PRIO_DEFAULT+SHIFT,ADDR)
	   IF (.NOT.OK) GOTO 999
	ELSE
	   DO 310 I = 1,PRIO_NUMBER
	      OK = STORE_ENTRY(PRIO_REP(I),PRIO_PRIO(I)+SHIFT,ADDR)
	      IF (.NOT.OK) GOTO 999
310	   CONTINUE
	ENDIF
	IF (HADLAB .AND. .NOT.FRTTEX) THEN		! don't label txt feats
	   OK = STORE_ENTRY(FTCODE,LABEL_PRIO,ADDR)
	   IF (.NOT.OK) GOTO 999
	ENDIF
C
	GOTO 10
C
C***********************************************************************
C
C EJ - end of file
400     CALL IFFRWD()
	GOTO 999
C
C***********************************************************************
C
C NO - new overlay
500	FSSET = .FALSE.
	CALL EIHRI(LAYNUM,1,1)
C
	IF (LAYNUM.LT.0) THEN
	   CALL WRITEF(
     &	'Illegal layer number %^W%N found - layer ignored.',LAYNUM)
	   GOTO 582				! skip it
	ENDIF
C
C test if we want this layer
	I = LAYNUM				! convert to long
	WANTED=LIB$EXTZV(I,1,LAYMAP)
	IF (.NOT.WANTED) GOTO 582		! skip it
C
C Check if this layer is selected with OVERRIDE
	IF (HADOVR) THEN
	   DO 505 I=1,NOVRRD
	      IF (LAYNUM.EQ.OVERRD(1,I)) THEN
	         FTCODE=OVERRD(2,I)
	         FSSET=.TRUE.
	         GOTO 506
	      ENDIF
505	   CONTINUE
	ENDIF
506	GOTO 10
C
C skip layer
C get EO position if there
582	IF (IELEN.GE.4) THEN			! has EO pointer
	   CALL EIHRL(EOPOSN,1,3)
	   NOPOSN = LPOSH
	   CALL IFFPKE(IECODE,IELEN,EOPOSN)	! get EO entry
	   IF (IECODE.EQ.'EO') GOTO 10		! all done
	   CALL WRITEF('Bad EO pointer in NO %^W%N',LAYNUM)
	   CALL IFFPKE(IECODE,IELEN,NOPOSN)	! back to NO
	ENDIF
	CALL IFFNXC('EO',IELEN)
	IF (IELEN.EQ.-1) THEN
	   CALL WRITEF('Missing EO entry in layer %^W%N',LAYNUM)
	   GOTO 998
	ENDIF
	GOTO 10
C
C*********************************************************************
C Errors
998	CALL WRITEF('Unexpected end of IFF file.')
999	FINISH=.TRUE.
	FSSET = .FALSE.
1000	CREATE_PRIO_LIST = OK
C
	RETURN
	END



	LOGICAL FUNCTION STORE_ENTRY(PRIO,FC,ADDR)
C
***	MODULE	STORE_ENTRY
***	IDENT	10MA92
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C
C Does first pass of IFF file filling the priority drawing list
C
	IMPLICIT NONE
C
***	COMMON/CMN:DRAWLIST/
C
C Arguments
C
	INTEGER*2	PRIO
	INTEGER*2	FC
	INTEGER*4	ADDR
C
C Workspace
C
	LOGICAL		SPACE
C
C Functions
C
	LOGICAL		FPP_ALLOC
C
C-----------------------------------------------------------------------------
C
	SPACE = .TRUE.
C
	LIST_PTR = LIST_PTR + 1
C
C Check if lists are full
C
	IF (LIST_PTR.GE.LIST_MAX) THEN
	   SPACE = FPP_ALLOC()			! grab more space
	   IF (.NOT.SPACE) GOTO 1000
	ENDIF
C
C Call 'sub' which uses arrays pointed to by the addresses
C
	CALL STORE_ENTRY_SUB(%VAL(PRIOLIST_LOC),
     &			     %VAL(PRIOLIST_LOC),
     &			     PRIO,
     &			     FC,
     &			     ADDR)
C
1000	STORE_ENTRY = SPACE
	RETURN
	END



	SUBROUTINE STORE_ENTRY_SUB(PRIOLIST,ADDRLIST,FC,PRIO,ADDR)
C
***	MODULE	STORE_ENTRY_SUB
***	IDENT	10MA92
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C
C Used to access the memory as arrays.
C The two arrays are overlaid on the same space in order to access the
C FC and PRIO as I*2 and the ADDR as I*4, thus:
C
C +------+------+------+------+
C |  FC  | PRIO |      |      |		only access PRIOLIST(1 and 2,*)
C +------+------+------+------+
C |             |   ADDRESS   |         only access ADDRLIST(2,*)
C +------+------+------+------+
C
C The element 'ADDRESS' is in the space occupied by PRIOLIST(3:4,*)
C
	IMPLICIT NONE
C
***	COMMON/CMN:DRAWLIST/
C
C Arguments
C
	INTEGER*2	PRIOLIST(4,LIST_PTR)
	INTEGER*4	ADDRLIST(2,LIST_PTR)
	INTEGER*2	FC
	INTEGER*2	PRIO
	INTEGER*4	ADDR
C
C-----------------------------------------------------------------------------
C
	PRIOLIST(1,LIST_PTR) = FC
	PRIOLIST(2,LIST_PTR) = PRIO
	ADDRLIST(2,LIST_PTR) = ADDR
C
	RETURN
	END
