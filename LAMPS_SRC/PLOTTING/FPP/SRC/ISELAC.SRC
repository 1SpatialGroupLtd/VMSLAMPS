C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-06-20 12:35:38.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION ISELAC
C
***	IDENT	20JN88
***	MODULE	ISELAC
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C True if feature satisfies AC selection criteria
C Called with IFF file positioned on the FS entry
C
C Author Clarke Brunt				8-Jun-1988
C
	IMPLICIT	NONE
C
***	COMMON/CMN:ACSEL/
***	COMMON/LSL$CMNFRT:FRTACD/
***	COMMON/CMN:LABEL/
C
C workspace
	INTEGER	AC
	INTEGER*2 IECODE,IELEN
	INTEGER*2 ACTYPE
	INTEGER	ACVAL
	INTEGER	L
	CHARACTER*(ACMAX) T
	LOGICAL*1 PRES(MAX_ACSEL)
	LOGICAL	GOTTXT
	INTEGER	LOC
C
C functions
	INTEGER	FNDAC
	LOGICAL	TSTAC
	LOGICAL	RDLONG
C
	ISELAC = .FALSE.			! assume not selected
C
C Set up array for AC types which must be present
	DO 5 AC=1,NACSEL
	   PRES(AC) = .FALSE.
5	CONTINUE
C	
C scan for ACs
10	CALL IFFNXT(IECODE,IELEN)
	IF (IELEN.EQ.-1) GOTO 999	! let caller find problem
	IF (IECODE.EQ.'VO') GOTO 10	! ignore voids
	IF (IECODE.EQ.'AC') THEN
	   CALL EIHR(ACTYPE,1,1)	! read AC type
	   AC = FNDAC(ACTYPE)		! check for selections
	   IF (AC.EQ.0) GOTO 10		! nothing for this AC type
	   IF (.NOT.ACSEL(AC).PRES) GOTO 999	! reject
	   CALL EIHRL(ACVAL,1,2)	! read AC value
	   CALL ACDFND(ACTYPE)		! look up type in FRT
	   IF (.NOT.TSTAC(AC,ACVAL,ACD_DATA_TYPE)) GOTO 999	! reject
	   PRES(AC) = .TRUE.		! this AC present
	   GOTTXT = .FALSE.		! not got text yet
C
C check the text if required
20	   AC = AC+1
	   IF (AC.GT.MAX_ACSEL) GOTO 10
	   IF (ACSEL(AC).TYPE.NE.ACTYPE) GOTO 10
C
	   IF (.NOT.GOTTXT) THEN
	      L = MIN(IELEN-3,(ACMAX+1)/2)	! length of text part
	      IF (L.GT.0) THEN
	         CALL EIHR(%REF(T),L,4)	! text
	         L = L*2			! bytes
	         IF (ICHAR(T(L:L)).EQ.0) L = L-1
	      ENDIF
	      CALL STR$UPCASE(T(:L),T(:L))
	      GOTTXT = .TRUE.
	   ENDIF
C
C look up selected string in AC text
	   LOC = 1			! assume match at first character
	   IF (ACSEL(AC).TXTL.GT.0) THEN
	      IF (L.EQ.0) THEN
	         LOC = 0		! no match
	      ELSE
	         LOC = INDEX(T(:L),ACSEL(AC).TXT(:ACSEL(AC).TXTL))
	      ENDIF
	   ENDIF
	   IF ((LOC.NE.0).NEQV.(ACSEL(AC).PRES)) GOTO 999	! reject
	   PRES(AC) = .TRUE.
	   IF (LOC.EQ.0) GOTO 20	! that's all for this selection
C
C is the value after the text relevant?
	   IF (ACSEL(AC).SLCT) THEN	! yes
	      CALL SETAUX(%REF(T),L)
	      CALL SETWIN(LOC+ACSEL(AC).TXTL,)
	      IF (RDLONG(ACVAL)) GOTO 999	! reject
	      IF (.NOT.TSTAC(AC,ACVAL,ACD_DATATYPE_I)) GOTO 999	! reject
	   ENDIF
	   GOTO 20			! try next selection
	ENDIF
C
C if not had all required ACs - reject
	DO 30 AC=1,NACSEL
	   IF (.NOT.PRES(AC)) THEN
	      IF (ACSEL(AC).PRES) GOTO 999	! reject
	   ENDIF
30	CONTINUE
C
	ISELAC = .TRUE.			! selected
C
999	RETURN
	END
