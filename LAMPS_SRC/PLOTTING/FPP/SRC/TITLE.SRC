C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-12-08 15:59:28.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION TITLE
C
***	MODULE	TITLE
***	IDENT	08DE94
C
C Copyright Laser Scan Laboratories Limited, Cambridge, England
C
C	Add PROjected plot-length setting		WJJ	30-Apr-1987
C	Created						WJJ	10-Dec-1986
C
C Function to process FPP TITLE commands.
C Function returns TRUE if error occurs which should result in the
C rest of the command line being ignored.
C
	IMPLICIT NONE
C
***	PARAMETER/CMN:GKSPAR/
***	COMMON/LSL$CMNLSL:CMDCOM/
***	COMMON/LSL$CMNLSL:EXPC/
***	COMMON/LSL$CMNFRT:FRTCOM/
***	COMMON/LSL$CMNLSL:TXTC/
***	COMMON/CMN:CURFT/
***	COMMON/CMN:DRAWIN/
***	COMMON/CMN:FPPDAT/
***	COMMON/CMN:SCALES/
***	COMMON/CMN:TITLE/
C
	EXTERNAL  TITLE_CMD_TABLE
	EXTERNAL  TITLE_SHOWTIMER
C
C Parameter
	REAL	TWOPI
	PARAMETER	(TWOPI=6.283185307)
C
C Functions.
	INTEGER*4 RDCOMM
	LOGICAL	  RDCH,RDCHS,FRTFND
	EXTERNAL  TRITXT,SRIPLT,TRISCN
C
C W/s.
	INTEGER*2 CMD
	INTEGER*2 PTR		! save of DCPTR
 	INTEGER	  I
	BYTE      CH		! single character
	REAL	AUX(8)		! LITES2 style auxiliary array
C
C Initialise.
	TITLE=.FALSE.
C
C Read TITLE command and subcommand
	CALL DCPSAV(PTR)		! save decoding pointer
	CMD = RDCOMM(TITLE_CMD_TABLE)
C
C Which command is it ?
	GOTO (10, 20, 30, 40, 50, 60), CMD	! LIN MOV TEX FC DIS PRO
C fall through to here
	CALL DCPSET(PTR)		! error in RDCOMM, so get back
					! to where we were
	GOTO 999
C
C
C***********************************************************************
C
C LIN x y
C Draw line for titling
10	IF (.NOT.OPWK) GOTO 38		! cannot title until plotter started
	IF (TITLE_FCLINE.EQ.0) GOTO 37	! no title FC set up
	IF (FRTFND(TITLE_FCLINE)) GOTO 46 ! WILL find FRT, already checked!
	PATHWL = 0		! not patterned hardware line yet
	CALL SETLIN			! set colour and width
	CALL SETCOL(FRTCOL,.FALSE.)
	TITLE_X(2) = REALAR(1)		! copy x,y values
	TITLE_Y(2) = REALAR(2)
	CALL GPL(2, TITLE_X, TITLE_Y)	! use GKS directly to draw 2-pt line
	TITLE_X(1) = TITLE_X(2)		! save 'pen' position
	TITLE_Y(1) = TITLE_Y(2)
	CALL GUWK(WKID,GSUPP)
	GOTO 1000
C
C***********************************************************************
C
C MOV x y
C Move for titling
20	IF (.NOT.OPWK) GOTO 38	! cannot title until plotter started
	TITLE_X(1) = REALAR(1)			! save 'pen' position
	TITLE_Y(1) = REALAR(2)
	GOTO 1000
C
C***********************************************************************
C
C TEX ang string
C Draw a title text string at angle ang
30	IF (.NOT.OPWK) GOTO 38	! cannot title until plotter started
	IF (TITLE_FCTEXT.EQ.0) GOTO 37	! no text FC defined
	IF (FRTFND(TITLE_FCTEXT)) GOTO 46 ! WILL find FRT, already checked!
	PATHWL = 0		! not patterned hardware line yet
	CALL SETCOL(FRTCOL,.FALSE.)		! set colour
	TITLE_TEXTANG = REALAR(1)*TWOPI/360.0	! get text angle
C
C get string
	IF (RDCHS(CH)) GOTO 1000	! nothing there
	TITLE_TEXTLEN = 0		! zero string length first
C
32	IF (CH.NE.'%') THEN		! test for special code
	   CALL TITLE_ADD(CHAR(CH))
C
C deal with special codes
	ELSE IF (.NOT. RDCH(CH)) THEN	! get escaped character
C
C elapsed time
	   IF (CH.EQ.'E' .OR. CH.EQ.'e') THEN
C
C initialise if not done already
	      IF (TITLE_TIMERBLOCK.EQ.0)
     &			CALL LIB$INIT_TIMER(TITLE_TIMERBLOCK)
C copy elapsed time to TITLE_TIMERBUFFER
	      CALL LIB$SHOW_TIMER(TITLE_TIMERBLOCK, 1, TITLE_SHOWTIMER)
	      TITLE_TIMERRESET = .TRUE.	! mark timer to be reset
C find the colon and back off 2 chars
	      I = INDEX(TITLE_TIMERBUFFER, ':') - 2
C copy relevant bit of timer buffer into the text buffer
	      CALL TITLE_ADD(
     &			TITLE_TIMERBUFFER(I:TITLE_TIMERBUFFERLEN-3))
C
C CPU time
	   ELSEIF (CH.EQ.'C' .OR. CH.EQ.'c') THEN ! CPU time
C
C initialise if not done already
	      IF (TITLE_TIMERBLOCK.EQ.0)
     &			CALL LIB$INIT_TIMER(TITLE_TIMERBLOCK)
C use user routine to copy to TITLE_TIMERBUFFER
	      CALL LIB$SHOW_TIMER(TITLE_TIMERBLOCK, 2, TITLE_SHOWTIMER)
	      TITLE_TIMERRESET = .TRUE.	! mark timer to be reset
C find the colon and back off 2 chars
	      I = INDEX(TITLE_TIMERBUFFER, ':') - 2
C copy relevant bit of timer buffer into the text buffer
	      CALL TITLE_ADD(
     &			TITLE_TIMERBUFFER(I:TITLE_TIMERBUFFERLEN-3))
C
C date
	   ELSEIF (CH.EQ.'D' .OR. CH.EQ.'d') THEN ! date
	      CALL LIB$DATE_TIME(TITLE_TIMERBUFFER)
C lower case of bits of the month
	      TITLE_TIMERBUFFER(5:5) =
     &			CHAR(ICHAR(TITLE_TIMERBUFFER(5:5))+32)
	      TITLE_TIMERBUFFER(6:6) =
     &			CHAR(ICHAR(TITLE_TIMERBUFFER(6:6))+32)
C copy relevant bit of timer buffer into the text buffer
	      CALL TITLE_ADD(TITLE_TIMERBUFFER(:11))
C
C time
	   ELSEIF (CH.EQ.'T' .OR. CH.EQ.'t') THEN ! time
	      CALL LIB$DATE_TIME(TITLE_TIMERBUFFER)
C copy relevant bit of timer buffer into the text buffer
	      CALL TITLE_ADD(TITLE_TIMERBUFFER(13:20))
C
C reduction factor
	   ELSEIF (CH.EQ.'R' .OR. CH.EQ.'r') THEN ! reduction factor
	      CALL EXPAND('%F0.3',ENLARG)
	      CALL TITLE_ADD(EXPDSC)
C
C display (ident) string
	   ELSEIF (CH.EQ.'I' .OR. CH.EQ.'i') THEN ! ident string from
							!  TIT DIS
	      IF (TITLE_DISPLAYLEN.GT.0) THEN
	         CALL TITLE_ADD(TITLE_DISPLAY(:TITLE_DISPLAYLEN))
	      ENDIF
C
C unrecognised escaped character (including %), just transmit it
	   ELSE
	      CALL TITLE_ADD(CHAR(CH))
	   ENDIF
	ENDIF
C
C read next char from line
	IF (.NOT. RDCH(CH)) GOTO 32	! read characters into buffer
	IF (TITLE_TEXTLEN.EQ.0) GOTO 1000
C
C output string
C
C If there is a special text drawing routine, then use it
C NB CALLR in COMTBL.MAR - call routine with address in TEXTAD
C passing argument list
	IF (TEXTAD.NE.0) THEN
C
C set up an auxiliary array as in LITES2
	   AUX(1) = TITLE_TEXTANG
	   AUX(2) = COS(TITLE_TEXTANG)
	   AUX(3) = SIN(TITLE_TEXTANG)
	   AUX(4) = FRTSIZ
	   AUX(5) = 0.0
	   AUX(6) = 0.0
	   AUX(7) = 0.0
	   AUX(8) = 0.0
	   CALL CALLR(
     &	TITLE_TEXT(:TITLE_TEXTLEN),FRTFC,FRTSC,TITLE_X,TITLE_Y,AUX,
     &	TRITXT,SRIPLT,TRISCN,%VAL(TEXTAD))
	ELSE
	   CALL TRITXT(TITLE_TEXT(:TITLE_TEXTLEN),FRTSC,
     &		TITLE_X,TITLE_Y,FRTSIZ,TITLE_TEXTANG,HWTXT.AND.FRTHWS)
	ENDIF
	CALL GUWK(WKID,GSUPP)
	GOTO 1000
C
37	CALL TTWSTR('FC not defined')
	GOTO 999
38	CALL TTWSTR('Cannot TITLE until plotting started')
	GOTO 999
C
C***********************************************************************
C
C FC LINE/TEXT n
C Set FC to represent title LINE/TEXT to be n
40	GOTO (41,42), SECMDN
C
	CALL TTWSTR('LINE/TEXT <fc> needed')
	GOTO 999
C
41	IF (FRTFND(INTARG(1))) GOTO 46 ! cannot find the FRT
	IF (FRTGT .NE. LINTYP) GOTO 45	! not valid type for lines
	TITLE_FCLINE = INTARG(1)
	GOTO 1000
C
42	IF (FRTFND(INTARG(1))) GOTO 46 ! cannot find text FRT
	IF (FRTGT .NE. TEXTYP) GOTO 45	! not a text FRT
	TITLE_FCTEXT = INTARG(1)
	GOTO 1000
C
45	CALL TTWSTR('FC is not appropriate graphical type')
	GOTO 999
C
46	CALL TTWSTR('FC not found')
	GOTO 999
C
48	CALL TTWSTR('<fc> needed')
	GOTO 999

C
C***********************************************************************
C
C DIS string
C Store string for display/ident during plotting
50	TITLE_DISPLAYLEN = 0		! zero string length first
	IF (.NOT. RDCHS(CH)) THEN	! skip to first real character
52	   TITLE_DISPLAYLEN = TITLE_DISPLAYLEN + 1
	   IF (TITLE_DISPLAYLEN.GE.TITLE_MAXDISPLAYLEN) 
     &			CALL DCPSET(TXTPTR) ! fudge EOL
	   TITLE_DISPLAY(TITLE_DISPLAYLEN:TITLE_DISPLAYLEN) = CHAR(CH)
	   IF (.NOT. RDCH(CH)) GOTO 52	! read characters into buffer
	ENDIF
	GOTO 1000
C
C***********************************************************************
C
C PRO projected_plot_length
60	TITLE_PLOTLEN = INTARG(1)	! projected plot length in bytes
	TITLE_PLOTPROG = 0		! reset layer-length accumulator
	GOTO 1000
C
C***********************************************************************
999	TITLE = .TRUE.
1000	RETURN
	END
C
	LOGICAL FUNCTION TITLE_SHOWTIMER(TIMES)
C
***	MODULE	TITLE_SHOWTIMER
***	IDENT	15DE86
C
C Copyright Laser Scan Laboratories Limited, Cambridge, England
C
C	Created						WJJ	15-Dec-1986
C
C Function to process LIB$SHOW_TIMER output
C Called by that routine with a text string in TIMES
C
	IMPLICIT NONE
C
	INCLUDE	'($SSDEF)'
C
	CHARACTER*(*)	TIMES		! string contains timing info
C
C
***	COMMON/CMN:TITLE/
C
C copy string to buffer
	TITLE_TIMERBUFFER = TIMES
	TITLE_TIMERBUFFERLEN = LEN(TIMES)
C
C return SS$_NORMAL
	TITLE_SHOWTIMER = SS$_NORMAL
	RETURN
	END
