C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-06-21 17:16:32.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	PROGRAM FPPDRV
C
***	MODULE	FPPDRV
***	IDENT	10FE91
C
C Copyright Laser Scan Laboratories Limited, Cambridge, England
C
C Created					CCB	17-Nov-1988
C enhanced for Alpha AXP			PGH	21-Jun-1993
C
C Main driver program to invoke FPP shareable image after setting
C up logical name for the GKS shareable image which it is to use.
C
C The GKS it uses is determined by which include file it reads on
C logical name DEVDAT
C
C If on AXP then adds _TV to logical and program names.
C
	IMPLICIT NONE
C
	INCLUDE		'($LNMDEF)'
C
C functions
	INTEGER	SYS$CRELNM
	INTEGER	LIB$FIND_IMAGE_SYMBOL
	LOGICAL IS_ALPHA_AXP
C
C workspace
	INTEGER	OK
	INTEGER*4	ITMLST(4)
	INTEGER*2	ITMLSTW(8)
	EQUIVALENCE	(ITMLST,ITMLSTW)
	CHARACTER*40 EQUIV
	INTEGER	FPPADR
	INTEGER	SETADR
	INTEGER	ARGLST(9)
	CHARACTER*20	NAM
	INTEGER*4	NAMDESC(2)
C
C device dependent variables
	INTEGER	WTYPE,HWLNS,HWSYS,HWESC
	LOGICAL	HWCIR,HWPAT,HWCUR,HWTXT
C
C include device dependent file to preset the above
**	INCLUDE/DEVDAT:/
C
C set up item list
	ITMLSTW(2) = LNM$_STRING
	ITMLST(2)  = %LOC(EQUIV)
	ITMLST(3)  = 0
	ITMLST(4)  = 0
C
C create logical name LSL$FPPSHR = LSL$EXE:FPPSHR (possibly plus _TV on Alpha)
	IF (IS_ALPHA_AXP()) THEN	! it's an Alpha
	   ITMLSTW(1) = 17
	   EQUIV = 'LSL$EXE:FPPSHR_TV'
	   OK = SYS$CRELNM(,'LNM$PROCESS','LSL$FPPSHR_TV',,ITMLST)
	ELSE				! it's a VAX
	   ITMLSTW(1) = 14
	   EQUIV = 'LSL$EXE:FPPSHR'
	   OK = SYS$CRELNM(,'LNM$PROCESS','LSL$FPPSHR',,ITMLST)
	ENDIF
	IF (.NOT.OK) THEN
	   CALL LIB$SIGNAL(%VAL(OK))
	   GOTO 10
	ENDIF
C
C create logical name LSL$GKSSHR = LSL$EXE:GKS'FPPVER'SHR
	IF (IS_ALPHA_AXP()) THEN	! it's an Alpha
	   ITMLSTW(1) = 14+LEN(FPPVER)+3
	   EQUIV = 'LSL$EXE:GKS'//FPPVER//'SHR'//'_TV'
	   OK = SYS$CRELNM(,'LNM$PROCESS','LSL$GKSSHR_TV',,ITMLST)
	ELSE				! it's a VAX
	   ITMLSTW(1) = 14+LEN(FPPVER)
	   EQUIV = 'LSL$EXE:GKS'//FPPVER//'SHR'
	   OK = SYS$CRELNM(,'LNM$PROCESS','LSL$GKSSHR',,ITMLST)
	ENDIF
	IF (.NOT.OK) THEN
	   CALL LIB$SIGNAL(%VAL(OK))
	   GOTO 10
	ENDIF
C
C If using GKSHCBSSHR then, also
C create logical name LSL$HCBSSHARE = LSL$EXE:HCBS'HCBSVER'
C If, however, HCBSVER is null ('$$$$') then leave it up to the
C user to define LSL$HCBSSHARE.
	IF (FPPVER.EQ.'HCBS'.AND.HCBSVER.NE.'$$$$') THEN
	   IF (IS_ALPHA_AXP()) THEN	! it's an Alpha
	      ITMLSTW(1) = 12+LEN(HCBSVER)+3
	      EQUIV = 'LSL$EXE:HCBS'//HCBSVER//'_TV'
	      OK = SYS$CRELNM(,'LNM$PROCESS','LSL$HCBSSHARE_TV',,ITMLST)
	   ELSE				! it's a VAX
	      ITMLSTW(1) = 12+LEN(HCBSVER)
	      EQUIV = 'LSL$EXE:HCBS'//HCBSVER
	      OK = SYS$CRELNM(,'LNM$PROCESS','LSL$HCBSSHARE',,ITMLST)
	   ENDIF
	   IF (.NOT.OK) THEN
	      CALL LIB$SIGNAL(%VAL(OK))
	      GOTO 10
	   ENDIF
	ENDIF
C
C invoke FPP shareable image, finding main entry point 'FPP'
	OK = LIB$FIND_IMAGE_SYMBOL('LSL$FPPSHR','FPP',FPPADR)
	IF (.NOT.OK) GOTO 10
C
C also find parameter setting entry point 'FPPSET'
	OK = LIB$FIND_IMAGE_SYMBOL('LSL$FPPSHR','FPPSET',SETADR)
	IF (.NOT.OK) GOTO 10
C
C set up name of this FPP version
	NAMDESC(1) = LEN(FPPVER)+1+LEN(HCBSVER)
	NAMDESC(2) = %LOC(NAM)
	NAM = FPPVER//' '//HCBSVER
C
C set up arguments, and make call to set parameters
	ARGLST(1) = 9
	ARGLST(2) = %LOC(WTYPE)
	ARGLST(3) = %LOC(HWLNS)
	ARGLST(4) = %LOC(HWSYS)
	ARGLST(5) = %LOC(NAMDESC)
	ARGLST(6) = %LOC(HWCIR)
	ARGLST(7) = %LOC(HWPAT)
	ARGLST(8) = %LOC(HWCUR)
	ARGLST(9) = %LOC(HWTXT)
	ARGLST(10)= %LOC(HWESC)
	CALL LIB$CALLG(ARGLST,%VAL(SETADR))
C
C and call the program (with no arguments)
	ARGLST(1) = 0
	CALL LIB$CALLG(ARGLST,%VAL(FPPADR))
	OK = 1
C
C probably never arrives here, because FPP calls EXIT itself
C
10	CALL EXIT
	END
