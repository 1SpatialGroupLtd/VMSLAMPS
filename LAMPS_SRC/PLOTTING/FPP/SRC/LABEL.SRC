C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-06-21 10:36:42.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION LABEL
C
***	IDENT   21JN88
***	MODULE  LABEL
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C       Written					CCB	31-Jul-1987
C
C Description
C
C	FPP LABEL command.
C
C LABEL NONE	- cancels all labelling 
C LABEL FSN	- label with FSN
C LABEL FC	- label with FC
C LABEL INDEX	- label only index contours
C LABEL HEIGHT	- label with AC 3 value (as real)
C LABEL CONTOUR	- label with AC 2 (integer) values
C LABEL LH	- label with AC 4 text
C LABEL RH	- label with AC 5 text
C LABEL ACINT	- label with AC (integer) values
C LABEL ACREAL	- label with AC (real) values
C LABEL ACTEXT	- label with AC text
C LABEL AC	- label with an AC value
C
        IMPLICIT NONE
C
***	COMMON/LSL$CMNLSL:CMDCOM/
***	COMMON/LSL$CMNFRT:FRTACD/
***	COMMON/CMN:LABEL/
C
C functions called
	INTEGER		RDCOMM
	LOGICAL		GET_ACTYPE
	EXTERNAL	LAB_CMD_TABLE
C
C w/s
	INTEGER		I		! loop counter
	INTEGER		ACTYP		! type of AC
	INTEGER		ACKIND		! part of AC to display
					! 1 = display value as integer
					! 2 = display value as real
					! 3 = display text
	INTEGER		INDEX		! index to AC table
	LOGICAL		ENABLE
	INTEGER		SECCMD
	INTEGER		FREE
C
	LABEL = .TRUE.		! assume failure
	ENABLE = .NOT.CMDNEG	! turning on?
	SECCMD = RDCOMM(LAB_CMD_TABLE)
	IF (SECCMD.LE.0) THEN
	   CALL TTWSTR('Command LABEL should be followed by qualifier')
	   GOTO 9999
	ENDIF
C
C Dispatch according to secondary command
C
	GOTO (100,200,300,400,500,600,700,800,900,1000,1100,1200),
     &	       SECCMD
C
C LABEL NONE	- cancels all labelling 
C
100	LABNF = .FALSE.
	LABFC  = .FALSE.
	LABINX = .FALSE.
	NUM_LAB_AC = 0
	HADLAB = .FALSE.
	GOTO 9998
C
C LABEL FSN	- label with FSN
C
200	LABNF = ENABLE
	GOTO 9997
C
C LABEL FC	- label with FC
C
300	LABFC = ENABLE
	GOTO 9997
C
C LABEL INDEX	- only label index contours
C
400	LABINX = ENABLE
	GOTO 9998
C
C LABEL HEIGHT	- label with AC 3 value (as real)
C
500	ACTYP = 3
	ACKIND = 3		! real
	GOTO 2010
C
C LABEL CONTOUR	- label with AC 2 (integer) values
C
600	ACTYP = 2
	ACKIND = 2		! integer
	GOTO 2010
C
C LABEL LH	- label with AC 4 text
C
700	ACTYP = 4
	ACKIND = 1		! text
	GOTO 2010
C
C LABEL RH	- label with AC 5 text
C
800	ACTYP = 5
	ACKIND = 1		! text
	GOTO 2010
C
C LABEL ACINT	- label with AC n (integer) values
C
900	IF (.NOT.GET_ACTYPE(ACTYP)) GOTO 9000
	ACKIND = 2		! integer
	GOTO 2010
C
C LABEL ACREAL	- label with AC n (real) values
C
1000	IF (.NOT.GET_ACTYPE(ACTYP)) GOTO 9000
	ACKIND = 3		! real
	GOTO 2010
C
C LABEL ACTEXT	- label with AC n text
C
1100	IF (.NOT.GET_ACTYPE(ACTYP)) GOTO 9000
	ACKIND = 1		! text
	GOTO 2010
C
C LABEL AC	- label with AC value
C
1200	IF (.NOT.GET_ACTYPE(ACTYP)) GOTO 9000
	ACKIND = 4		! general type
C
C fill in AC table
C
2010	IF (ACTYP.LT.0) THEN
	   CALL TTWSTR('AC type must be positive')
	   GOTO 9999
	ENDIF
C
C is this AC type in table?
C
	FREE = 0
	DO 1020, I=1,NUM_LAB_AC
	   IF (LABAC(I).EQ.-1) FREE = I
	   IF (ACTYP.NE.LABAC(I)) GOTO 1020
	   INDEX = I
	   GOTO 1030
1020	CONTINUE
C
C not in table - so add it (if possible)
C
	IF (.NOT.ENABLE) GOTO 9998		! cancelling it anyway
	IF (FREE.EQ.0) THEN
	   IF (NUM_LAB_AC.EQ.TOT_LAB_AC) THEN
	      CALL WRITEF('Too many labelling ACs, maximum is %N',
     &							TOT_LAB_AC)
	      GOTO 9999
	   ENDIF
	   NUM_LAB_AC= NUM_LAB_AC + 1
	   INDEX = NUM_LAB_AC
	ELSE
	   INDEX = FREE
	ENDIF
	LABAC(INDEX) = ACTYP
	LABACV(INDEX) = .FALSE.
	LABACTXT(INDEX) = .FALSE.
C
1030	CONTINUE
C
C set flags in table
C
	IF (ACKIND.EQ.1) THEN
	   LABACTXT(INDEX) = ENABLE
	ELSE
	   LABACV(INDEX) = ENABLE
	   IF (ACKIND.EQ.2) THEN
	      LABACFORMAT(INDEX) = '%N'
	      LABACF_LEN(INDEX) = 2
	   ELSEIF (ACKIND.EQ.3) THEN
	      LABACFORMAT(INDEX) = '%F0.3'
	      LABACF_LEN(INDEX) = 5
	   ELSE
	      CALL ACDFND(ACTYP,.FALSE.)	! cannot fail!!!
	      LABACFORMAT(INDEX) = ACD_FORMAT
	      LABACF_LEN(INDEX)  = ACD_FORMAT_LEN
	   ENDIF
	ENDIF
	IF (.NOT.(LABACV(INDEX).OR.LABACTXT(INDEX))) LABAC(INDEX) = -1
	GOTO 9997
C
9000	CALL TTWSTR(
     &		'Expecting AC name or number after LABEL AC command')
	GOTO 9999
C
9997	IF (ENABLE) HADLAB = .TRUE.
9998	LABEL = .FALSE.		! success
9999	RETURN
        END
