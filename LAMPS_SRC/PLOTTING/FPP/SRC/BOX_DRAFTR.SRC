	SUBROUTINE BOX_DRAFTR(FC,BOXOFF,BOXCMPLX,MAXTXP,TXTXY)
C
***	MODULE	BOX_DRAFTR
***	IDENT	15DE94
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author:  Clarke Brunt	15-November-1994
C
C To draw a box round a text/symbol
C
	IMPLICIT NONE
C
***	COMMON/CMN:CURFT/
***	COMMON/CMN:GRABUF/
***	COMMON/CMN:DRAWIN/
***	COMMON/CMN:FPPDAT/
***	COMMON/LSL$CMNFRT:FRTCOM/
C
C Args
	INTEGER*2	FC		! FC to *draw* with
	REAL		BOXOFF		! offset of box
	LOGICAL		BOXCMPLX	! complex box?
	INTEGER		MAXTXP		! workspace size
	REAL		TXTXY(2,MAXTXP)	! workspace
C
C functions called
	LOGICAL		TRI_BOUND,SRI_BOUND,TRISCN,SRI_OFFSET_POLYGON
	EXTERNAL	TRI_BOUND,SRI_BOUND,TRISCN,SRI_OFFSET_POLYGON
C
C W/s
	INTEGER*4 I,N
	INTEGER	NUMRED		! number of coord pairs to be read
	INTEGER START		! position coords read from
	REAL	COSANG,SINANG,TXY(2),OFFXY(2)
	INTEGER	BOUND_TYPE
	REAL	LOFF
	REAL	AUX(8)		! LITES2 style auxiliary array
C
	INTEGER*4 STRDSC(2)	! text ft character string descriptor.
	INTEGER*2 STRDSW(2)
C
	EQUIVALENCE (STRDSC,STRDSW)
C
C***********************************************************************
C
	FRSTST = .TRUE.		! 1st ST in feature
	FIRST = .TRUE.		! 1st  ST not reached STDRAW yet
	LAST = .FALSE.		! last ST not reached STDRAW yet
	OFFSETF = .FALSE.	! not an offset feature (FRTSIZ > 0.0)
	STD = .FALSE.		! not started drawing offset features
	TOTPTS = 0		! reset number of points in ft
	OUTPTR = 0		! reset buffer ptr used in ADDBLK
	CURCOL = -1		! assume use FRT colour
	PATHWL = 0		! not patterned hardware line yet
C
C***********************************************************************
C
C Generate the box. We want it in IFF units, since it is put through
C the transformation in BUFFER, as for a linear IFF feature.
C
C the FRT routines expect an offset which is a fraction of the height,
C and return a result as though the item was plotted 1 unit high
	IF (BOXOFF.LE.0.0) THEN
	   LOFF = -BOXOFF
	ELSE
	   LOFF = BOXOFF/SIZE
	ENDIF
C
C check for special blanking routines
	N = 0				! flag 'routines not called'
	IF (FRTSYM.AND.SYMBAD_B.NE.0) THEN
C
C set up an auxiliary array as in LITES2
	   AUX(1) = ANGLE
	   AUX(2) = COS(ANGLE)
	   AUX(3) = SIN(ANGLE)
	   AUX(4) = SIZE
CCC NB we don't know the other 4 (MINX etc.) for symbols (ANGSIZ)
	   N = MAXTXP	! max length of array
	   CALL CALLR(
     &		FRTFC,FRTSC,N,TXTXY,LOFF,BOXCMPLX,
     &		XYNATT,XYATTC,XYATTV(1,1),XCOORD(1),YCOORD(1),
     &		AUX,TRI_BOUND,SRI_BOUND,TRISCN,SRI_OFFSET_POLYGON,
     &		%VAL(TEXTAD_B),ISTAT,
     &		%VAL(SYMBAD_B))
	ELSEIF (FRTTEX.AND.TEXTAD_B.NE.0) THEN
C
C set up an auxiliary array as in LITES2
	   AUX(1) = ANGLE
	   AUX(2) = COS(ANGLE)
	   AUX(3) = SIN(ANGLE)
	   AUX(4) = SIZE
CCC beware these next 4 not set if not POSOPT (ANGSIZ)
	   AUX(5) = MINX
	   AUX(6) = MAXX
	   AUX(7) = MINY
	   AUX(8) = MAXY
	   N = MAXTXP	! max length of array
	   STRDSW(1)=TXPTR				! length.
	   STRDSW(2)=0				! class.
	   STRDSC(2)=%LOC(TXBUF(1))		! position.
	   CALL CALLR(
     &		STRDSC,FRTFC,FRTSC,N,TXTXY,LOFF,BOXCMPLX,
     &		XCOORD(1),YCOORD(1),AUX,
     &		TRI_BOUND,SRI_BOUND,TRISCN,SRI_OFFSET_POLYGON,
     &		ISTAT,HWTXT.AND.FRTHWS,
     &		%VAL(TEXTAD_B))
	ENDIF
C
C if we have a non-zero number of points, the special routines
C have done the work, otherwise calculate ourself
	IF (N.GT.0) THEN
C
C close the area (the routines return an open one)
	   IF (N.LT.MAXTXP.AND.
     &	(TXTXY(1,1).NE.TXTXY(1,N).OR.TXTXY(2,1).NE.TXTXY(2,N))) THEN
	      N = N+1
	      TXTXY(1,N) = TXTXY(1,1)
	      TXTXY(2,N) = TXTXY(2,1)
	   ENDIF
	   GOTO 50		! off to draw it
	ENDIF
C
	IF (BOXCMPLX.OR.FRTSYM) THEN
	   N = MAXTXP	! max length of array
	   IF (FRTSYM) THEN
	      IF (BOXCMPLX) THEN
	         BOUND_TYPE = 3		! convex hull
	      ELSE
	         BOUND_TYPE = 2		! bounding box
	      ENDIF
	      IF (SRI_BOUND(FRTSC,N,TXTXY,LOFF,BOUND_TYPE)) GOTO 999
	      OFFXY(1) = 0.0
	      OFFXY(2) = 0.0
	   ELSE
	      STRDSW(1)=TXPTR				! length.
	      STRDSW(2)=0				! class.
	      STRDSC(2)=%LOC(TXBUF(1))		! position.
	      IF (TRI_BOUND(STRDSC,FRTSC,N,TXTXY,LOFF,
     &					HWTXT.AND.FRTHWS)) GOTO 999
	      OFFXY(1) = MINX
	      OFFXY(2) = MINY
	   ENDIF
	ELSE
C
C must be a text with a simple box
C (we don't do the SRISCN box for symbols, which would be
C  BOUND_TYPE=1 above)
C
	   MINX=MINX/SIZE
	   MAXX=MAXX/SIZE
	   MINY=MINY/SIZE
	   MAXY=MAXY/SIZE
C
C calculate the 4 corners of the box
C
	   TXTXY(1,1) = MINX-LOFF
	   TXTXY(2,1) = MINY-LOFF
	   TXTXY(1,2) = MAXX+LOFF
	   TXTXY(2,2) = TXTXY(2,1)
	   TXTXY(1,3) = TXTXY(1,2)
	   TXTXY(2,3) = MAXY+LOFF
	   TXTXY(1,4) = TXTXY(1,1)
	   TXTXY(2,4) = TXTXY(2,3)
	   N = 4
	   OFFXY(1) = 0.0
	   OFFXY(2) = 0.0
	ENDIF
C
C close the area (the FRT routines return an open one)
	IF (N.LT.MAXTXP) THEN
	   N = N+1
	   TXTXY(1,N) = TXTXY(1,1)
	   TXTXY(2,N) = TXTXY(2,1)
	ENDIF
C
	COSANG = COS(ANGLE)
	SINANG = SIN(ANGLE)
	DO 40 I=1,N
	   TXY(1) = TXTXY(1,I)*SIZE + OFFXY(1)
	   TXY(2) = TXTXY(2,I)*SIZE + OFFXY(2)
	   TXTXY(1,I) = XCOORD(1) + TXY(1)*COSANG - TXY(2)*SINANG
	   TXTXY(2,I) = YCOORD(1) + TXY(1)*SINANG + TXY(2)*COSANG
40	CONTINUE
C
C load the feature code for drawing with (e.g. area, or line)
50	CALL FRTFND(FC)		! must work - checked earlier
C
C size is used as the box offset, so prevent it from being hatch
C spacing, or line offset
	FRTSIZ = 0.0
	FRTFC = -1
C
C Set up line pattern, and thickness
	CALL SETLIN
C
	LOOP = .TRUE.
C
C set colour for feature
	CALL SETCOL(FRTCOL,.TRUE.)
	IF (FRTCOL.EQ.0) THEN
	   CALL SRICOL(0)
	ELSE
	   CALL SRICOL(-1)
	ENDIF
C
C***********************************************************************
C
	START = 0
C
C Read in the 1st block of coords
C loop back to here for further buffers
60	NUMRED = MIN(N,BLKSIZ)
	BLKPTS = NUMRED
C
C If not the 1st call block, then output previous
	IF (.NOT.FRSTST) CALL STDRAW
C
C Buffer the coordinates
	DO 65 I=1,BLKPTS
	   XCOORD(I) = TXTXY(1,START+I)
	   YCOORD(I) = TXTXY(2,START+I)
65	CONTINUE
C
	INDX = BLKPTS
	FRSTST = .FALSE.
C
	N = N-NUMRED			! how many points remain?
	START = START+NUMRED		! update the reading position
	IF (N.GT.0) GOTO 60		! back for next block of coords
C
C***********************************************************************
C
	LAST=.TRUE.
	CALL STDRAW
	CALL OUTBLK	! empty the output buffers for linear features
	IF (FRTARE) THEN
	   IF (PATLIN.AND.FRTSC.LT.-1) THEN	! patterned fill
	      CALL FRT_END_FILL
	   ELSE					! ordinary area
	      CALL LSG_END_AREA
	   ENDIF
	ENDIF
	GOTO 1000
C
999	CALL WRITEF(
     &	      'Layer %^W%I6 - Ft No %^L%I6 - ISQ %I6',
     &	       LAYNUM,FTNUM,ISQ)
C
1000	RETURN
	END
