C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-04-13 12:24:56.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION FPP_ALLOC()
C
***	MODULE	FPP_ALLOC
***	IDENT	16MA92
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author:  S Townrow
C
C Created					 ST	16 March 1992
C
C If the list address is zeros then it does a 'malloc',
C otherwise it will grab more space and copy the existing contents over.
C
	IMPLICIT NONE
C
***	COMMON/CMN:DRAWLIST/
C
C Workspace
C
	INTEGER*4	TEMP_LOC
	INTEGER*4	NEWSIZE
	LOGICAL 	OK
C
C Functions
C
	INTEGER*4	LIB$GET_VM
	INTEGER*4	LIB$FREE_VM
	INTEGER*4	VIOMV3
C
C------------------------------------------------------------------------------
C
C Virtual memory sizes for each list are thus:
C
C     32767   32767      big         size
C      I*2     I*2       I*4         type
C       2       2         4          bytes
C    +------+------+-------------+
C    | PRIO |  FC  |     ADDR    |
C    |  .   |  .   |      .      |
C    |  .   |  .   |      .      |
C    |  .   |  .   |      .      |
C
C------------------------------------------------------------------------------
C
	IF (PRIOLIST_LOC.EQ.0) THEN
C
C Do a 'malloc' the first time
C
	   OK = LIB$GET_VM(LIST_SIZE*LIST_MAX,PRIOLIST_LOC)
	   IF (.NOT.OK) GOTO 999
C
	ELSE
C
C Thereafter do a 'realloc'
C Grab more memory
C
	   NEWSIZE = INT(REALLOC_FACTOR * FLOAT(LIST_SIZE * LIST_MAX))
	   OK = LIB$GET_VM(NEWSIZE,TEMP_LOC)
	   IF (.NOT.OK) GOTO 999
C
C Copy existing data over
C
	   OK = VIOMV3(%VAL(PRIOLIST_LOC),LIST_SIZE*LIST_MAX,%VAL(TEMP_LOC))
	   IF (.NOT.OK) GOTO 999
C
C Free old memory
C
	   OK = LIB$FREE_VM(LIST_SIZE*LIST_MAX,PRIOLIST_LOC)
	   IF (.NOT.OK) GOTO 999
C
C Save address of new chunk
C
	   PRIOLIST_LOC = TEMP_LOC
C
C Save size of new chunk
C
	   LIST_MAX = INT(FLOAT(LIST_MAX) * REALLOC_FACTOR)
C
	ENDIF
C
	GOTO 1000
C
C  Failed
C
999	CALL WRITEF('Cannot allocate memory for PRIORITY list')
C
1000	FPP_ALLOC = OK
	RETURN
	END
