C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1997-11-25 12:25:40.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION OBEY(CMD)
C
***	MODULE	OBEY
***	IDENT	25NO97
C
C Copyright Laser Scan Laboratories Limited, Cambridge, England
C Author R.Daly.
C
C Function to process FPP commands.
C Function returns TRUE if error occurs which should result in the
C rest of the command line being ignored.
C
	IMPLICIT NONE
C
	INTEGER*2 CMD
C
***	PARAMETER/CMN:EFNLUN/
***	PARAMETER/CMN:GKSPAR/
C
***	COMMON/CMN:ACSEL/
***	COMMON/LSL$CMNLSL:CMDCOM/
***     COMMON/CMN:CONT/
***	COMMON/CMN:DRAWIN/
***	COMMON/LSL$CMNLSL:FILENAME/
***	COMMON/CMN:FPPDAT/
***	COMMON/LSL$CMNFRT:FRTACD/
***	COMMON/CMN:LABEL/
***	COMMON/CMN:SCALES/
***	COMMON/CMN:SELECT/
***	COMMON/LSL$CMNLSL:TXTC/
C
	EXTERNAL  LAB_CMD_TABLE
	EXTERNAL  CON_CMD_TABLE
	EXTERNAL  SEL_CMD_TABLE
	EXTERNAL  PAUSE_CMD_TABLE
C
C Functions.
	INTEGER*4 RDCOMM,SIGCHS,GETFILNAM,EXPAND
	LOGICAL	  RDREAL,RDDBLE,RDCH,RDCHS
	LOGICAL	  RDSEL,RDLAY,RDFSN,FRTINI,PROSEL
	LOGICAL	  SELEAC
	LOGICAL	  TRIFND
	LOGICAL   TITLE
	LOGICAL	  LABEL
	EXTERNAL  LIB$PUT_OUTPUT
C W/s.
	INTEGER*4 IERR
	INTEGER*4 ERRCOD,STATUS
	INTEGER*2 PTR		! save of DCPTR
	LOGICAL	  NOMES_SAV	! save of NOMESS (in CMDCOM)
	INTEGER	  SECCMD
 	INTEGER	  I
	BYTE	  CHAR		! character from command line (see AKI)
	LOGICAL	  NEWWK		! new workstation?
	LOGICAL	  SIGN  
	INTEGER*2 TMPPTR	! save of TXTPTR
	INTEGER*2 TDCPTR	! save of DCPTR
	BYTE TMPBUF(80)		! save of TXTBUF
	INTEGER*4 HLPDSC(2)	! descriptor for HELP
	REAL	  PI
	PARAMETER (PI=3.141592654)
	REAL	  PIBY2
	PARAMETER (PIBY2=1.570796327)
C
C Initialise.
	OBEY=.FALSE.
C
C Which command is it ?
	GOTO (10, 20, 30, 40, 50,	! IFF FRT SRI TRI LAY
     &	      60, 70, 80, 90,100,	! NOL SEL DES OFF ORI
     &	     110,120,122,123,124,	! ENL SCA SOU MAP AUT
     &	     170,936,190,200,210,	! EXI THI AKI INTERP TOLER
     &	     935,250,			! PAT ADV
     &	     270,290,300,		! GO  WOR ROT	
     &	     310,131,132,360,		! LAB LABSIZ LABCOL CON
     &	     410,134,133,550,600,	! HEI LABANG LABOFF OVER CENTRE
     &	     937,932,931,800,850,	! TXS POI TXP WIN CLI
     &	     900,950,960,		! NOOVERRIDE POS HATCH
     &	     970,980,910,920,130,	! PAUSE SHOW ENA DIS ANNO
     &	     140,150,160,180),CMD	! TITLE HELP ESCAPE SEPARATOR
C
C***********************************************************************
C
C IFF <filename>
C Internal feature format file to be plotted.
C It is permitted to change the IFF file by repeating this command
C but it cannot be changed once plotting has started (ie. once
C IFFBDY has been called). 
10	IF (STRTED) THEN
	   CALL TTWSTR('Cannot change IFF file while already plotting.')
	   GOTO 999
	ENDIF
	HADIFF=.FALSE.
	IF (OPNIFF) CALL IFFCLO(IFFLUN)
	OPNIFF=.FALSE.
C
C read and parse filename
	STATUS = GETFILNAM(IFFTIT,IFFLEN,'LSL$IF:IFF.IFF;0',.TRUE.)
	IF (.NOT.STATUS.OR.IFFLEN.EQ.0) THEN
	   CALL WRITEF('Error in IFF filename')
	   IF (.NOT.STATUS) CALL LSL_PUTMSG(STATUS)
	   GOTO 999
	ENDIF
	HADIFF=.TRUE.
	GOTO 1000
C
C***********************************************************************
C
C FRT <filename>
C Feature representation table for interpreting feature codes.
C It is permitted to change the FRT file by repeating this command
C but it cannot be changed once a plot has been started.
20	IF (STRTED) THEN
	   CALL TTWSTR('Cannot change FRT file while already plotting.')
	   GOTO 999
	ENDIF
	HADFRT=.FALSE.
C
C read and parse filename
	STATUS = GETFILNAM(FRTTIT,FRTLEN,'LSL$FRT:FRT.FRT;0',.TRUE.) 
	IF (.NOT.STATUS.OR.FRTLEN.EQ.0) THEN
	   CALL WRITEF('Error in FRT filename')
	   IF (.NOT.STATUS) CALL LSL_PUTMSG(STATUS)
	   GOTO 999
	ENDIF
C
C as FRTINI uses TXTDSC, we must save current state
C
	TMPPTR=MIN(TXTPTR,80)
	CALL DCPSAV(TDCPTR)
	CALL SAVE_TXTC(TMPBUF,TMPPTR,80)
C
	IF (INTERACTIVE) CALL WRITEF('Reading FRT file "%S"',
     &	               FRTTIT(1:SIGCHS(FRTTIT)))
	IF (FRTINI(FRTTIT(1:FRTLEN))) GOTO 999
C
C restore command line
C
	CALL DCPSET(TDCPTR)
	CALL RESTORE_TXTC(TMPBUF,TMPPTR,80)
C
C if reading from a command file, select it again (as FRTIN uses FILEIO)
C
	IF (FRMFIL) CALL FLRSEL(CMDLUN)
	INIFRT=.TRUE.			! indicate now got an FRT.
	HADFNT=.FALSE.			! not got font for labels
C	
C Process any stored up SEL/DES commands
	IF (SELPTR.GT.0) THEN
	   IF (PROSEL(.TRUE.)) GOTO 999
	ENDIF
C
	HADFRT=.TRUE.
	GOTO 1000
C
C***********************************************************************
C
C SRI <filename>
C Symbol representation IFF file for defining symbols referenced by
C the FRT file.
C It is permitted to change the SRI file by repeating this command
C but it cannot be changed once a plot has been started.
30	IF (STRTED) THEN
	   CALL TTWSTR('Cannot change SRI file while already plotting.')
	   GOTO 999
	ENDIF
	HADSRI=.FALSE.
C
C read and parse filename
	STATUS = GETFILNAM(SRITIT,SRILEN,'LSL$FRT:SRI.SRI;0',.TRUE.) 
	IF (.NOT.STATUS.OR.SRILEN.EQ.0) THEN
	   CALL WRITEF('Error in SRI filename')
	   IF (.NOT.STATUS) CALL LSL_PUTMSG(STATUS)
	   GOTO 999
	ENDIF
	HADSRI=.TRUE.
	SRIDEP=.FALSE.		! filename not derived from FRT name.
	GOTO 1000
C
C***********************************************************************
C
C TRI <filename>
C Text representation IFF file for defining characters referenced
C by the FRT file.
C It is permitted to change the TRI file by repeating this command
C but it cannot be changed once a plot has been started.
40	IF (STRTED) THEN
	   CALL TTWSTR('Cannot change TRI file while already plotting.')
	   GOTO 999
	ENDIF
	HADTRI=.FALSE.
C
C read and parse filename
	STATUS = GETFILNAM(TRITIT,TRILEN,'LSL$FRT:TRI.TRI;0',.TRUE.)
	IF (.NOT.STATUS.OR.TRILEN.EQ.0) THEN
	   CALL WRITEF('Error in TRI filename')
	   IF (.NOT.STATUS) CALL LSL_PUTMSG(STATUS)
	   GOTO 999
	ENDIF
	HADTRI=.TRUE.
	TRIDEP=.FALSE.		! filename not derived from FRT name.
	GOTO 1000
C
C***********************************************************************
C
C LAY <layer numbers>
C Specify which layers are to be plotted.
C Layer numbers can be given either singly or as ranges.
C (eg. LAY 2,10-15,25,200-300).
C Delimiters may be either spaces or commas.
C This command can be given after plotting has started (assuming
C it is an interactive session) but it will have no effect on
C layers already plotted.
C There are 2 possible modes of operation:-
C 1. Select mode   - Plot only those layers which are selected
C		     except those which have since been deselected.
C 2. Deselect mode - Plot all layers except those deselected layers.
C The default is deselected mode. Once a layer is explicitly
C selected then select mode is assumed.If plotting starts while
C in select mode then it cannot revert to de-select mode. If
C plotting starts while in deselect mode then it will revert to
C select mode if a layer is selected.
C First read all the ranges given with this command before updating
C the bit-map (since don't want to change anything if there is an
C error).
50	IF (RDLAY(.TRUE.)) GOTO 999
	GOTO 1000
C
C***********************************************************************
C
C NOL <layer numbers>
C Deselect the layers specified (ie. don't plot the layers).
C Layer numbers can be given either singly or as ranges.
C (eg. NOL 2,10-15,25,200-300).
C Delimiters may be either spaces or commas.
C See LAY command for further details.
60	IF (RDLAY(.FALSE.)) GOTO 999
	GOTO 1000
C
C***********************************************************************
C
C SEL 
C SELECT, SELECT FC, SELECT LAYER, SELECT FSN, SELECT ALL
C if none of above secondaries given defaults to SELECT FC
C
C SELECT FC
C Select only the feature codes specified. Feature codes can be
C given explicitely (either singly or as ranges) or as group names
C (eg. SEL 20,30-35,55,WATER,200-300,CONTOURS).
C Delimiters may be either spaces or commas.
C Since the group names are undefined until we read in the FRT file
C (unless we have already done so) the SEL and DES commands must be
C stored up until they are defined.
70	CALL DCPSAV(PTR)		! save decoding pointer
	NOMES_SAV = NOMESS		! stop CMDLIB error messages
	NOMESS = .TRUE.
	SECCMD = RDCOMM(SEL_CMD_TABLE)
	NOMESS = NOMES_SAV
C
	GOTO (71,72,73,74,75), SECCMD
C
C fall through to here
	CALL DCPSET(PTR)		! error in RDCOMM, so get back
					! to where we were
C
C SELECT FC
71	IF (RDSEL(.TRUE.,.NOT.INIFRT)) GOTO 999
	GOTO 1000
C
C SELECT LAYER   (see LAYER command)
72	IF (RDLAY(.TRUE.)) GOTO 999
	GOTO 1000
C
C SELECT FSN
73	IF (RDFSN(.TRUE.)) GOTO 999
	GOTO 1000
C
C SELECT ALL  Reset all selections
74	LYSMOD = .FALSE.
	FCSMOD = .FALSE.
	FSNMOD = .FALSE.
	CALL VIOCLR(LAYMAP,LAYMAX*4,-1)	 ! reset the whole bit-map.
	CALL VIOCLR(FCMAP,FCMAX*4,-1)	 ! reset the whole bit-map.
	CALL VIOCLR(FSNMAP,FSNMAX*4,-1)	 ! reset the whole bit-map.
	NACSEL = 0
	GOTO 1000
C
C SELECT AC
75	IF (SELEAC(.TRUE.)) GOTO 999
	GOTO 1000
C
C***********************************************************************
C
C DESEL 
C DESELECT, DESELECT FC, DESELECT LAYER, DESELECT FSN
C if none of above secondaries given defaults to DESELECT FC
C
C DESELECT FC
C deselect only the feature codes specified. Feature codes can be
C given explicitely (either singly or as ranges) or as group names
C (eg. DESEL 20,30-35,55,WATER,200-300,CONTOURS).
C Delimiters may be either spaces or commas.
C Since the group names are undefined until we read in the FRT file
C (unless we have already done so) the SEL and DES commands must be
C stored up until they are defined.
80	CALL DCPSAV(PTR)		! save decoding pointer
	NOMES_SAV = NOMESS		! stop CMDLIB error messages
	NOMESS = .TRUE.
	SECCMD = RDCOMM(SEL_CMD_TABLE)
	NOMESS = NOMES_SAV
C
	GOTO (81,82,83,84,85) SECCMD
C
C fall through to here
	CALL DCPSET(PTR)		! error in RDCOMM, so get back
					! to where we were
C
C DESELECT FC
81	IF (RDSEL(.FALSE.,.NOT.INIFRT)) GOTO 999
	GOTO 1000
C
C DESELECT LAYER   (see NOLAYER command)
82	IF (RDLAY(.FALSE.)) GOTO 999
	GOTO 1000
C
C DESELECT FSN
83	IF (RDFSN(.FALSE.)) GOTO 999
	GOTO 1000
C
C DESELECT ALL is not a valid command
84	CALL WRITEF('DESELECT ALL is not a valid command')
	CALL WRITEF('Use SELECT ALL and then required selections')
	GOTO 999
C
C SELECT AC
85	IF (SELEAC(.FALSE.)) GOTO 999
	GOTO 1000
C
C***********************************************************************
C
C OFF x,y
C Offset whole plot by x,y (in mms on final enlarged sheet).
C This command is identical to the ORIgin command except the
C units are different. The 2 commands are mutually exclusive.
90	HADOFF=.TRUE.
	HADORI=.FALSE.	! declare any previous ORI redundant.
	OFFX=REALAR(1)
	OFFY=REALAR(2)
	NEWORG = .TRUE.
	GOTO 1000
C
C***********************************************************************
C
C ORI x y
C Set origin for whole plot to be at x,y (in user units).
C This command is identical to the OFFset command except the
C units are different. The 2 commands are mutually exclusive.
100	HADORI=.TRUE.
	HADOFF=.FALSE.	! declare any previous OFF redundant.
	ORIX=REALAR(1)
	ORIY=REALAR(2)
	NEWORG = .TRUE.
	GOTO 1000
C
C***********************************************************************
C
C ENL r
C Enlarge the whole plot by factor r. The plot produced on the A4
C plotter film (or whatever it is) is defined as being a fraction
C 1/r of the final enlarged plot. Using this command simplifies
C the scaling procedure. The enlargement defaults to 1.
110	IF (REALAR(1).LE.0.0) THEN
	   CALL TTWSTR('Enlargement factor must be greater than 0.0')
	   GOTO 999
	ENDIF
	ENLARG=REALAR(1)
	NEWORG = .TRUE.
	GOTO 1000
C
C***********************************************************************
C
C SCALE FACTOR,SHEET,IFF,AUTO
120	IF (SECMDN.EQ.0) THEN	! no secondary given
	   IF (RDREAL(REALAR(1))) THEN
	      CALL TTWSTR('Unexpected end of line')
	      GOTO 999
	   ENDIF
	   CMDRCT = 1
	   SECMDN = 1		! default SCALE FACTOR
	ENDIF
C
	IF (CMDRCT.GT.0.AND.REALAR(1).LE.0.0) THEN
	   CALL TTWSTR('Scale must be greater than zero')
	   GOTO 999
	ENDIF
C
	NEWORG = .TRUE.
	GOTO (121,122,123,124), SECMDN
	GOTO 997
C
C Scale the whole plot by factor r. This command relates user units
C to mms on the enlarged plot (eg. SCA 0.001 implies that 1 user unit 
C is plotted as 1 micron on the plot).
C ie. User-units * scale = mms on large plot.
C If this command is given then it supersedes any previous SOU, MAP
C or AUT commands given.
121	SCAFAC= REALAR(1)
	HADSF=.TRUE.
	HADSM=.FALSE.
	HADSS=.FALSE.
	HADSA=.FALSE.
	GOTO 1000
C
C SCALE SHEET r (or SOURCESCALE r)
C Define the nominal map scale to be 1:r
C This command is used in conjunction with the SCALE IFF command.
122	SCASOU=REALAR(1)
	HADSS=.TRUE.
	HADSM=.TRUE.
	HADSF=.FALSE.
	HADSA=.FALSE.
	GOTO 1000
C
C SCALE IFF r (or MAP r)
C Defines the user units in terms of the map sheet. r is the number
C of mms in 1 user unit (default 1).
C This command is used in conjunction with the SOU command.
C If this command is given then it supersedes any previous SCA or AUT
C commands given.
123	SCAMAP=REALAR(1)
	HADSM=.TRUE.
	HADSF=.FALSE.
	HADSA=.FALSE.
	GOTO 1000
C
C SCALE AUTO (or AUTO)
C Automatically scales the plot to fill the available film area.
C If this command is given then it supersedes any previous SCA, SOU
C or MAP commands given.
124	HADSA=.TRUE.
	HADSM=.FALSE.
	HADSS=.FALSE.
	HADSF=.FALSE.
	GOTO 1000
C
C***********************************************************************
C
C EXI/QUI
C Exit from program.
170	HADEXI=.TRUE.
	GOTO 1000
C
C***********************************************************************
C
C [+|-]AKI
C This command has been superceded by ENABLE/DISABLE INTERPOLATION,
C INTERPOLATE AKIMA/MCCONALOGUE, and TOLERANCE CURDRAW.
C
C Permit(+) Akima or suppress(-) interpolation of interpolated curves 
C (permit Akima by default). If no sign is given then '+' is assumed.
C The number of points to be generated per mm on the enlarged map may
C be specified at the same time. Note that the permit/suppress is
C still set even when a value is given. A value of 0 (AKI 0) 
C is equivalent to -AKI
190	INTLIN=.NOT.CMDNEG		! permit/suppress interpolation
	IF (.NOT. (CMDNEG .OR. ARGMSG) .AND. (REALAR(1) .EQ. 0)) 
     &		INTLIN = .FALSE.	! if AKI 0 suppress interp.
	IF (INTLIN) MCCON = .FALSE.	! use Akima
	IF (ARGMSG) GOTO 998
	IF (REALAR(1) .GT. 0) THEN
	   INTCT(1) = 1/REALAR(1)	! constant separation
	ELSE IF (REALAR(1) .LT. 0.0) THEN
	   CALL TTWSTR('Cannot have less than zero points per mm.')
	   GOTO 999
	ENDIF
	GOTO 1000
C
C***********************************************************************
C
C INTERPOLATE
C Specify interpolation algorithm, Akima (default) or McConalogue
200	GOTO (201,202), SECMDN	! jump on secondary argument
	GOTO 997
C
C INTERPOLATE AKIMA
201	MCCON = .FALSE.
	GOTO 1000
C
C INTERPOLATE MCCONALOGUE
202	MCCON = .TRUE.
	GOTO 1000
C
C***********************************************************************
C
C TOLERANCE
C Specify tolerances
210	GOTO (211,212,213), SECMDN	! jump on secondary argument
	GOTO 997
C
C TOLERANCE CURDRAW  -  segment length (mm) for drawn curves
C 1st number - segment length (mm)
C 2nd number - arc to chord distance (mm)
C 3rd number - angle (radians)
C
C first fault negative valuies
211	DO 2111 I=1,CMDRCT
	   IF (REALAR(I) .LT. 0.0) THEN
	      CALL TTWSTR('Tolerance cannot be negative')
	      GOTO 999
	   ENDIF
2111	CONTINUE
C
C set up the specified tolerances
	DO 2112 I=1,CMDRCT
	   INTCT(I) = REALAR(I)
2112	CONTINUE
C
C if values are now all zero, or none were given, set the default
	IF ((INTCT(1)+INTCT(2)+INTCT(3) .EQ. 0.0) .OR.
     &					(CMDRCT .EQ. 0)) THEN
	   INTCT(1) = DEFCT
	   INTCT(2) = 0.0
	   INTCT(3) = 0.0
	ENDIF
C
	IF (ARGMSG) GOTO 998	! check for '-'
	GOTO 1000
C
C TOLERANCE CIRDRAW  -  segment length (mm) for drawn circles
C 1st number - segment length (mm)
C 2nd number - arc to chord distance (mm)
C 3rd number - angle (radians)
C
C first fault negative valuies
212	DO 2121 I=1,CMDRCT
	   IF (REALAR(I) .LT. 0.0) THEN
	      CALL TTWSTR('Tolerance cannot be negative')
	      GOTO 999
	   ENDIF
2121	CONTINUE
C
C set up the specified tolerances
	DO 2122 I=1,CMDRCT
	   CIRCT(I) = REALAR(I)
2122	CONTINUE
C
C amend second coefficient to the value we will use
	IF (CMDRCT.GE.2) CIRCT(2) = 2.0*SQRT(2.0*CIRCT(2))
C
C if values are now all zero, or none were given, set the default
	IF ((CIRCT(1)+CIRCT(2)+CIRCT(3) .EQ. 0.0) .OR.
     &					(CMDRCT .EQ. 0)) THEN
	   CIRCT(1) = 0.0
	   CIRCT(2) = DEFCIR
	   CIRCT(3) = 0.0
	ENDIF
C
	IF (ARGMSG) GOTO 998	! check for '-'
	GOTO 1000
C
C TOLERANCE JUSTIFY - space after character (as proportion of height)
213	IF (REALAR(1).LT.0.0) THEN
	   CALL TTWSTR('Tolerance cannot be negative')
	ELSE
	   JSTPRP = REALAR(1)
	ENDIF
	GOTO 1000
C
C***********************************************************************
C
C ADVANCE/CLEAR [n]
C Advance film/paper by n frames (or clear screen n times).
C If workstation is not open yet, then remember the command
250	ADVCNT=1
	IF (CMDICT.GT.0) ADVCNT=INTARG(1)
	IF (.NOT.OPWK) GOTO 1000
	DO 255 I=1,ADVCNT
	   CALL GCLRWK(WKID,GALWAY)	! clear workstation
255	CONTINUE
	ADVCNT=0
	NEWORG = .TRUE.
	GOTO 998			! check for '-'
C
C***********************************************************************
C
C GO 
C Proceed to plot the next selected layer (used in interactive session).
270	HADGO=.TRUE.
	GOTO 1000
C
C***********************************************************************
C
C WORKSTATION type [conid]
290	NEWWK = .FALSE.		! assume not a new workstation
	IF (CMDICT.GE.2) THEN	! got a connection argument
	   IF (INTARG(2).NE.CONID) NEWWK = .TRUE.
	   CONID = INTARG(2)
	ENDIF
	IF (CMDICT.GT.0) THEN	! got a type argument
	   IF (INTARG(1).NE.WTYPE) NEWWK = .TRUE.
	   WTYPE = INTARG(1)
	ELSE			! no args at all
	   CALL TTWSTR('Missing WORKSTATION type')
	   GOTO 999
	ENDIF
	IF (OPWK.AND.NEWWK) THEN
	   CALL GDAWK(WKID)	! deactivate and
	   CALL GCLWK(WKID)	! close old workstation
	   CALL FPOPWK		! open new workstation
	   NEWORG = .TRUE.
	ENDIF
	GOTO 998		! check for '-'
C
C***********************************************************************
C
C [+/-]ROTATE [rot]
C Rotate the entire plot by rot degrees.  If no argument given, assume
C rotation of -PIBY2
300	IF (.NOT.CMDNEG) THEN	
	   IF (ARGMSG) THEN
	      THETA = -PIBY2
	   ELSE
	      THETA = REALAR(1)*PI/180.0
	   ENDIF	      
	ELSE
	   THETA = 0.0
	ENDIF
C
	COSTHETA = COS(THETA)
	SINTHETA = SIN(THETA)
	NEWORG = .TRUE.
	IF (ARGMSG) GOTO 998	! check for '-'
	GOTO 1000
C
C***********************************************************************
C
C LABEL
C Select type of labelling	
310	IF (LABEL()) GOTO 999
	GOTO 1000
C
C***********************************************************************
C
C CONTOUR
C Check qualifier
C
360	SIGN=CMDNEG
	SECCMD=RDCOMM(CON_CMD_TABLE)
	IF (SECCMD.LE.0) THEN
	   CALL TTWSTR(
     &		'Command CONTOUR should be followed by qualifier:')
	   CALL TTWSTR('LEVEL,VALUE,INTERVAL,INDEX,SELECT or RESET ')
	   GOTO 999
	ENDIF
	GOTO (370,380,390,395,397,400)SECCMD
C
C LEVEL qualifier 3I
370	IF (NLIM.GE.LEVMAX) THEN
	   CALL TTWSTR('Too many contour levels specified')
	   GOTO 1000
	ENDIF
	NLIM=NLIM+1
	LLIM(NLIM)=INTARG(1)
	ULIM(NLIM)=INTARG(2)
	CPEN(NLIM)=INTARG(3)
	CLEVEL=.TRUE.
	CIDRAW=.FALSE.
	INDRAW=.FALSE.
	CONCMD=.TRUE.
	GOTO 1000
C
C INTERVAL qualifier 2I
C
380	IF (INTARG(1).EQ.0) THEN
	   CALL TTWSTR('Contour interval must not be zero')
	   GOTO 1000
	ENDIF
	CI=INTARG(1)
	NUMPEN=INTARG(2)			!number of pens to use
	IF(NUMPEN.LE.0.OR.NUMPEN.GT.8)NUMPEN=3
	CIDRAW=.TRUE.
	CLEVEL=.FALSE.
	CONCMD=.TRUE.
	CONSEL=.FALSE.
	GOTO 1000
C
C INDEX qualifier 2I
C
390	IF (INTARG(1).EQ.0) THEN
	   CALL TTWSTR('Index contour interval must not be zero')
	   GOTO 1000
	ENDIF
	CINDEX=INTARG(1)
	IPEN=INTARG(2)
	INDRAW=.TRUE.
	CLEVEL=.FALSE.
	CONCMD=.TRUE.
	GOTO 1000
C
C VALUE qualifier 2I
C
395	INTARG(3)=INTARG(2)
	INTARG(2)=INTARG(1)
	GOTO 370		! simulate CONTOUR LEVEL
C
C RESET
C
397     NLIM=0
	CONCMD=.FALSE.
	CLEVEL=.FALSE.
	CIDRAW=.FALSE.
	INDRAW=.FALSE.
	CONSEL=.FALSE.
	GOTO 1000
C
C SELECT
C
400	CONSEL = .NOT.SIGN
	GOTO 1000
C***********************************************************************
C
C HEIGHT 
410	GOTO (411,412), SECMDN
	GOTO 997
C FSN
411	NFHGT = .TRUE.
	CALL TTWSTR('Height value stored as FSN')	
	GOTO 1000
C AC
412	NFHGT = .FALSE.
	CALL TTWSTR('Height value stored as Ancillary Code')
	GOTO 1000
C
C***********************************************************************
C
C OVERRIDE
C Overide individual FS entries and set whole overlay to specified FS
C
550	IF (NOVRRD.GE.OVRDMX) THEN
           CALL TTWSTR('Too many overrides specified')
	   GOTO 999
	ENDIF
	NOVRRD = NOVRRD+1
	OVERRD(1,NOVRRD)=INTARG(1)	
	OVERRD(2,NOVRRD)=INTARG(2)
	HADOVR=.TRUE.
	GOTO 1000
C***********************************************************************
C
C [+/-]CENTRE
C Centre the plot in drawing area, or position in bottom left
C
600	IF (CMDNEG) THEN
	   PLTPOS = 0		! bottom left
	ELSE
	   PLTPOS = 4		! centre
	ENDIF
	NEWORG = .TRUE.
	GOTO 1000
C***********************************************************************
C
C [+/-]WINDOW xmin ymin xmax ymax
C Set a window to override IFF range entry
800	HADWIN = .NOT.CMDNEG
	IF (RDDBLE(WINDOW(1))) GOTO 809
	IF (RDDBLE(WINDOW(3))) GOTO 809
	IF (RDDBLE(WINDOW(2))) GOTO 809
	IF (RDDBLE(WINDOW(4))) GOTO 809
	IF (HADWIN) THEN
	   IF (WINDOW(2).LE.WINDOW(1).OR.WINDOW(4).LE.WINDOW(3)) THEN
	      CALL TTWSTR('Bad arguments')
	      GOTO 810
	   ENDIF
	ENDIF
	GOTO 998		! check for '-'
C
809	IF (.NOT.HADWIN) GOTO 998
	CALL TTWSTR('Insufficient arguments')
810	CALL TTWSTR(
     &		'WINDOW has 4 arguments, xmin ymin xmax ymax')
	HADWIN = .FALSE.
	GOTO 999
C
C***********************************************************************
C
C [+/-]CLIP
C Set clipping switch
C
850	IF (CMDNEG) THEN
	   CALL GSCLIP(GNCLIP)
	ELSE
	   CALL GSCLIP(GCLIP)
	ENDIF
	GOTO 1000
C
C***********************************************************************
C
C NOOVERRIDE
C Cancel overrides
900	HADOVR = .FALSE.
	NOVRRD = 0
	GOTO 1000
C
C***********************************************************************
C
C ENABLE
C Allow options
910	CMDNEG = .FALSE.
	GOTO 921
C
C***********************************************************************
C
C DISABLE
C Disallow options
920	CMDNEG = .TRUE.
921	GOTO (931,932,933,934,935,936,937,938,939,940,941,942,943,944
     &			), SECMDN
	GOTO 997
C
C POSITIONING - Take text positioning from FS entry (default)
931	POSOPT = .NOT.CMDNEG
	GOTO 1000
C
C POINTSIZE - TH entry is in points (default) or in mm/100
932	POIOPT = .NOT.CMDNEG
	GOTO 1000
C
C INVISIBLE - don't draw invisible segments (default)
933	GOTO 1000		! no-op for now
C
C INTERPOLATION - draw GT 6 as interpolated curves (default)
934	INTLIN = .NOT.CMDNEG
	GOTO 1000
C
C PATTERN - Permit patterned lines (default).
935	PATLIN = .NOT.CMDNEG
	GOTO 1000
C
C THICK - Permit thick lines (default)
936	THKLIN = .NOT.CMDNEG
	GOTO 1000
C
C HEIGHT - Take text height from TH entry (default is from FRT)
937	TXTOPT = .NOT.CMDNEG
	GOTO 1000
C
C REPORT - Extra messages (default)
938	REPORT = .NOT.CMDNEG
	GOTO 1000
C
C DESCRIPTOR - Use type 2 map descriptor (default)
939	DESOPT = .NOT.CMDNEG
	GOTO 1000
C
C ABSOLUTE - Use absolute coords in WINDOW
940	ABSOPT = .NOT.CMDNEG
	HADWIN = .FALSE.
	GOTO 1000
C
C LOG - Log each feature plotted
941	LOGOPT = .NOT.CMDNEG
	IF (CMDICT.GT.0) LOG_NO = INTARG(1)
	GOTO 1000
C
C BOX - draw texts as boxes
942	BOXOPT = .NOT.CMDNEG
	GOTO 1000
C
C SORT - prioritised drawing of features
943	PRIOPT = .NOT.CMDNEG
	GOTO 1000
C
C HWTEXT - hardware text - override default for this FPP version
944	HWTXT = .NOT.CMDNEG
	GOTO 1000
C
C***********************************************************************
C
C POSITION
C Set plotting position
950	IF (INTARG(1).LT.0.OR.INTARG(1).GT.8) THEN
	   CALL TTWSTR('Plotting position must be in range 0-8')
	   GOTO 999
	ENDIF
	PLTPOS = INTARG(1)
	NEWORG = .TRUE.
	GOTO 1000
C
C***********************************************************************
C
C HATCH
C Set hatching linewidth and separation (sheet mm)
C Remember the settings, for use in main program
960	HADHAT = .NOT.CMDNEG
	IF (ARGMSG) THEN	! set original values
	   HATWID = SAVHWD
	   HATSEP = SAVHSP
	   GOTO 998		! check for '-'
	ENDIF
	HATWID = REALAR(1)
	HATSEP = REALAR(2)
	GOTO 1000
C
C***********************************************************************
C
C [+/-]PAUSE (mess about to allow it without secondary command)
970	SIGN = CMDNEG		! save for later
	IF (.NOT.ARGMSG) GOTO 971! arg present so assume PAUSE FEATURE
	CALL DCPSAV(PTR)		! save decoding pointer
	NOMES_SAV = NOMESS		! stop CMDLIB error messages
	NOMESS = .TRUE.
	SECCMD=RDCOMM(PAUSE_CMD_TABLE)	! try for secondary command
	NOMESS = NOMES_SAV
	GOTO (971,972),SECCMD
C
C fall through to here
	CALL DCPSET(PTR)		! error in RDCOMM, so get back
					! to where we were
	ARGMSG = .TRUE.			! arg definitely missing
C
C PAUSE FEATURE [n]
971	PAUSE = .NOT.SIGN
	IF (ARGMSG) GOTO 998
	PAUSE_NO = MAX(1,INTARG(1))	! draw at least 1 feature
	GOTO 1000
C
C PAUSE LAYER
972	HADINT = .NOT.SIGN	! old INTERACTIVE command
	GOTO 1000
C
C***********************************************************************
C
C SHOW 
C display information 
980	GOTO (981,982,983,984), SECMDN	! jump on secondary argument
	GOTO 997
C
C SHOW SELECTIONS
981	CALL SHSELE
	GOTO 1000
C
C SHOW TOLERANCES
982	CALL SHTOLE
	GOTO 1000
C
C SHOW LABELS
983	CALL SHLABE
	GOTO 1000
C
C SHOW SCALE
984	CALL SHSCAL
	GOTO 1000
C
C***********************************************************************
C
C ANNOTATION - set characteristics of annotation (labels)
130	GOTO (131,132,133,134,135,136), SECMDN ! jump on secondary argument
	GOTO 997
C
C SIZE - Set size of annotation
131	IF (REALAR(1).GT.0.0) LABSIZ = REALAR(1)
	GOTO 1000
C
C COLOUR - set colour of anotation
132	IF (INTARG(1).GT.0.AND..NOT.ARGMSG) THEN
	   LABCOL = INTARG(1)
           HADCOL = .TRUE.
	ELSE
	   HADCOL = .FALSE.
	ENDIF
	GOTO 1000
C
C OFFSET - set annotation offset
133	LABOFF(1)=REALAR(1)		! X offset
	LABOFF(2)=REALAR(2)		! Y offset
	GOTO 1000
C
C ANGLE - set angle of annotation
134	IF (.NOT.ARGMSG) THEN
	   LABANG = REALAR(1)
           HADANG = .TRUE.
	ELSE
	   HADANG = .FALSE.
	   GOTO 998	! check for '-'
	ENDIF
	GOTO 1000
C
C FONT - set font for annotation
135	LABFNT = INTARG(1)
	HADFNT = .FALSE.
	GOTO 1000
C
C HWTEXT - use hardware text for annotation
136	IF (ARGMSG) THEN
	   LABHWT = .TRUE.
	   GOTO 998	! check for '-'
	ENDIF
	IF (INTARG(1).EQ.0) THEN
	   LABHWT = .FALSE.
	ELSEIF (INTARG(1).EQ.1) THEN
	   LABHWT = .TRUE.
	ELSE
	   CALL TTWSTR('Argument to ANNOTATION HWTEXT must be 0 or 1')
	   GOTO 999
	ENDIF
	GOTO 1000
C
C***********************************************************************
C
C TITLE - various subcommands for TITLEing plots - deal with elsewhere
140	IF (TITLE()) GOTO 999			! error if .TRUE.
	GOTO 1000
C
C***********************************************************************
C
C HELP
150	HLPDSC(1) = TXTPTR-DCPTR+1
	HLPDSC(2) = %LOC(TXTBUF(DCPTR))
	DCPTR = TXTPTR+1
	CALL LBR$OUTPUT_HELP(	LIB$PUT_OUTPUT,		! output routine
     &				,			! output width
     &				HLPDSC,			! line descr
     &				'LSL$HELP:FPP',		! library name
     &				0,			! flags
     &				)			! input routine
	GOTO 1000
C
C***********************************************************************
C
C ESCAPE
160	IF (INTARG(1).LE.0) THEN
	   CALL TTWSTR('Argument to ESCAPE must be greater than 0')
	   GOTO 999
	ENDIF
	IF (.NOT.RDCHS(CHAR)) CALL BSCH
	HLPDSC(1) = TXTPTR-DCPTR+1
	HLPDSC(2) = %LOC(TXTBUF(DCPTR))
	IF (.NOT.OPWK) THEN
	   TMPPTR=MIN(TXTPTR,80)
	   CALL DCPSAV(TDCPTR)
	   CALL SAVE_TXTC(TMPBUF,TMPPTR,80)
	   CALL FPOPWK
C
C restore command line
	   CALL DCPSET(TDCPTR)
	   CALL RESTORE_TXTC(TMPBUF,TMPPTR,80)
	ENDIF
	TMPPTR = TXTPTR
	CALL GESC(INTARG(1)+1000,HLPDSC)
	TXTPTR = TMPPTR
	DCPTR = TXTPTR+1
	GOTO 1000
C	
C***********************************************************************
C
C SEPARATOR ESCAPE n
180	GOTO (181), SECMDN 			! jump on secondary argument
	GOTO 997
C
C ESCAPE - Set escape character
181	IF (INTARG(1).LE.0) THEN
	   CALL TTWSTR('Argument to SEPARATOR ESCAPE must be greater than 0')
	   GOTO 999
	ENDIF
	HWESC = INTARG(1)
	GOTO 1000
C
C***********************************************************************
C come here for an unknown secondary command
997	CALL WRITEF('Unknown command %S %S',CMDFST,CMSFST)
	GOTO 999
C
C***********************************************************************
C for commands with optional arguments, come here when missing to check
C if CMDLIB has gobbled up a minus sign
998	CALL BSCH
	IF (.NOT.RDCH(CHAR)) THEN
	   IF (CHAR.EQ.45) CALL BSCH	! is char a '-' ?
	ENDIF
	GOTO 1000
C
C***********************************************************************
999	OBEY = .TRUE.
1000	RETURN
	END
