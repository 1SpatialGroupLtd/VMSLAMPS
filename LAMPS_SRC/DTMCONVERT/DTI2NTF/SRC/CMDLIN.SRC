	INTEGER FUNCTION CMDLIN
C
***     MODULE CMDLIN
***     IDENT  08JL93
C
C Copyright Laser-Scan Ltd, Cambridge, England
C
C Author						 SG	22-Aug-1991
C
C Reads and decodes the command line
C modified version of CMDLIN from NTF2DTI
C
CMOD	 Moved repetitive code for getting maximum number of characters 
C	 from a string into GET_STRING			 SG	29-Aug-1991
CMOD	 Moved parsing of /INPUT to be last task (see comments later)
C							 SG	13-Sep-1991
CMOD	 Changed order of parameters from "dti2ntf output input" to 
C	 "DTI2NTF input output"				 SG	16-Sep-1991
C
CMOD	 Allow 6250BPI tape density			PGH	14-May-1992
C
CMOD1243 Write NTF Version 2.0 level 5			 JB	24-Jun-1993
C	 Add /VERSION qualifier
C
	IMPLICIT NONE
C
C Messages:
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE	'HERE:DTI2NTFMSG.PAR'
	INCLUDE		'HERE:NTFDATA.PAR'
	INCLUDE 	'HERE:MESSAGE.PAR'
C
C Commons:
	INCLUDE		'LSL$CMNDTI:DTIHDR.CMN'
	INCLUDE 	'LSL$CMNLSL:CLD.CMN'
	INCLUDE		'LSL$CMNLSL:FILENAME.CMN'
	INCLUDE 	'HERE:COMMANDS.CMN'
	INCLUDE		'HERE:FILENAME.CMN'
	INCLUDE		'HERE:NTFDATA.CMN'
	INCLUDE		'HERE:MAGTAPE.CMN'
C
C Command language definitions:
	EXTERNAL 	DTI2NTF_CLD
C
C Functions:
	LOGICAL 	DCL_FILE
	LOGICAL 	DCL_STARTUP
	LOGICAL 	DCL_QUAL
	LOGICAL 	DCL_STR
	LOGICAL 	DCL_INT
	LOGICAL 	DCL_REAL
	LOGICAL		TEST_FOREIGN
	LOGICAL		GET_INFILE
	LOGICAL		GET_STRING
	INTEGER*4	TEST_TERM
C
C Workspace:
	INTEGER		OK			!  Function return
	LOGICAL 	THERE,ABSENT		!  File-spec there ?
	LOGICAL 	FPRES			!  Qualifier present
	LOGICAL 	FNEGA			!  Qualifier negated
	INTEGER		LOOP			!  DO loop counter
	INTEGER		IERR			!  Error flag
	INTEGER		ITMP			!  temporary variable
	LOGICAL		HAD_FILES		!  have we had DTI files?
C
C#######################################################################
C initialise NTF default settings
C
	LEVEL   = 5				! assume level 5
	VERSION = 2.0				! NTF raster at version 2.0
	FIXED 	= .FALSE.			! fixed length records
	EOR_MARKER = '%'			! EOR = %
	VOLNUM  = 1				! single volume datasets only
	SERIAL  = 0				! no serial number yet
	DENSITY = 1600
C
	DONOR  = ' Laser-Scan: DTI2NTF'
	RECIP  = '       DTM SAMPLE   '
C
	DBNAME = '                    '
	DDNAME = '                    '
	DDATE  = '00000000'
C
	LOG         = .FALSE.
	INPUT       = .FALSE.
	HAD_FILES   = .FALSE.
	HAD_FWIDTH  = .FALSE.
	HAD_FWIDTH  = .FALSE.
	HAD_LEVEL   = .FALSE.
	HAD_VERSION = .FALSE.
C
C--------------------------------------------------------------------------
C Initialise the command line
C
	OK=DCL_STARTUP('DTI2NTF',.FALSE.,DTI2NTF_CLD,.TRUE.)
	IF (.NOT.OK) GOTO 999
C
C--------------------------------------------------------------------------
C /LOG - get this first so we know if we should output messages
C
	OK=DCL_QUAL('LOG',LOG,FPRES,FNEGA,.TRUE.)
	IF (.NOT.OK) GOTO 999
C
	IF (LOG) THEN
	  CALL TEST_TERM('SYS$OUTPUT:',IS_TERM,IERR)	!are we on a terminal
C	  IF (IS_TERM)  CALL LIB$PUT_OUTPUT(ESC//'[2J'//ESC//'[0H')	
	ENDIF
C
C-------------------------------------------------------------------------- 
C Now get the input files... ignore these if the /INPUT was specified
C
	OK=DCL_QUAL('INPUT',THERE,FPRES,FNEGA,.TRUE.)
	IF (.NOT.THERE) THEN
	  OK=DCL_FILE('DTIFILES','LSL$DTI:.DTI',ABSENT,.TRUE.,.TRUE.)
	  IF (.NOT.OK) GOTO 999
C
C	  ..................................................................
C	  get the input files if any were specified.
C
	  IF (.NOT.ABSENT) THEN				!if files present
	    DO 100, LOOP =1,NUMFIL			!for each file name
	       ITMP = FIL_LEN(LOOP)
	       DTI_FLEN(LOOP) = ITMP			!length of file name
	       DTI_FNAME(LOOP)(1:ITMP) = FILARY(LOOP)(1:ITMP)
100	    CONTINUE
	    DTI_FNUM = NUMFIL				!remember how many files
	    HAD_FILES = .TRUE.
	  ENDIF
	ENDIF
C
C---------------------------------------------------------------------------
C Now get the NTF output filename.
C
	OK=DCL_FILE('NTFFILE','OUT.NTF',ABSENT,.TRUE.,.TRUE.)
	IF (.NOT.OK) GOTO 999
C
	NTF_FLEN=FIL_LEN(1)
	NTF_FNAME=FILARY(1)(1:NTF_FLEN)
C
C	....................................................................
C	If a device name was given, see if it is mounted /FOREIGN for magtape
C
	IF (HAD_DEV) THEN
	   OK=TEST_FOREIGN(STR_DEV(1:LEN_DEV),IS_MAGTAPE,IERR)
	   IF (.NOT.OK) THEN
	      CALL LSL_PUTMSG(DTI2NTF__TESTFOR,STR_DEV(1:LEN_DEV))
	      CALL LSL_ADDMSG(OK)
	      IF (OK.EQ.LSL__SYSERR) CALL LSL_ADDMSG(IERR)
	      GOTO 999
	   ENDIF
C
	   IF (IS_MAGTAPE) THEN
	      DEV_FLEN=LEN_DEV
	      DEV_FNAME=STR_DEV(1:LEN_DEV)	! remember the device name
	   ENDIF
C
	ELSE
	   IS_MAGTAPE=.FALSE.
	ENDIF
C
C==========================================================================
C DBNAME qualifier
C
	OK=DCL_QUAL('DBNAME',THERE,FPRES,FNEGA,.TRUE.)
	IF (OK.AND.THERE) THEN				!qualifier was present
	   OK=DCL_STR('DBNAME',.TRUE.)			!get datastring
	   IF (OK) OK = GET_STRING(CARRAY(1), STR_LEN(1), DBNAME, 20)
	ENDIF
C
	IF (.NOT.OK) GOTO 999
C
C---------------------------------------------------------------------------
C DDATE qualifier
C
	OK=DCL_QUAL('DDATE',THERE,FPRES,FNEGA,.TRUE.)
C
	IF (OK.AND.THERE) THEN				!if qualifier was given
	   OK=DCL_STR('DDATE',.TRUE.)			!get the string
	   IF (OK) OK = GET_STRING( CARRAY(1), STR_LEN(1), DDATE, 8 )
	ENDIF
C
	IF (.NOT.OK) GOTO 999
C
C---------------------------------------------------------------------------
C DDNAME qualifier
C
	OK=DCL_QUAL('DDNAME',THERE,FPRES,FNEGA,.TRUE.)
C
	IF (OK.AND.THERE) THEN
	   OK=DCL_STR('DDNAME',.TRUE.)
	   IF (OK) OK = GET_STRING(CARRAY(1), STR_LEN(1), DDNAME, 20)
	ENDIF
C
	IF (.NOT.OK) GOTO 999
C
C---------------------------------------------------------------------------
C /DENSITY
C
	OK=DCL_QUAL('DENSITY',THERE,FPRES,FNEGA,.TRUE.)
	IF (OK.AND.THERE) THEN				!qualifier was there
	   OK=DCL_INT('DENSITY',.TRUE.)			!read the number
	   IF (OK) THEN					!success
	     DENSITY=IARRAY(1)				!get the number
	     OK = (DENSITY.EQ.1600 .OR. DENSITY.EQ.800 .OR.
     &             DENSITY.EQ.6250) 			!validate
	   ENDIF
	   IF (.NOT.OK) CALL LSL_PUTMSG(DTI2NTF__NODENS) !wrong density
	ENDIF
C
	IF (.NOT.OK) GOTO 999
C
C---------------------------------------------------------------------------
C DONOR qualifier
C
	OK=DCL_QUAL('DONOR',THERE,FPRES,FNEGA,.TRUE.)
C
	IF (OK.AND.THERE) THEN				!qualifier exists
	   OK=DCL_STR('DONOR',.TRUE.)			!get string
	   IF (OK) OK = GET_STRING(CARRAY(1), STR_LEN(1), DONOR, 20)
	ENDIF
C
	IF (.NOT.OK) GOTO 999
C
C --------------------------------------------------------------------------
C /VERSION 
C
	OK=DCL_QUAL('VERSION',HAD_VERSION,FPRES,FNEGA,.TRUE.)
	IF (.NOT.OK) GOTO 999
C
	IF (HAD_VERSION) THEN
	   OK = DCL_REAL('VERSION',.TRUE.)
	   IF (.NOT.OK) GOTO 999
C
	   VERSION = RARRAY(1)
	   OK = (VERSION.EQ.1.0 .OR. VERSION.EQ.2.0)
C
	   IF (.NOT.OK) THEN
		CALL LSL_PUTMSG(DTI2NTF__BADVER, RARRAY(1))
		CALL WRITEF(E_MESG//'VERSION must be 1.0 or 2.0')
		OK = DTI2NTF__BADVER
		GOTO 999
	   ENDIF
	ENDIF
C
C ---------------------------------------------------------------------------
C /LEVEL
C
	OK=DCL_QUAL('LEVEL',HAD_LEVEL,FPRES,FNEGA,.TRUE.)
	IF (.NOT.OK) GOTO 999
C
	IF (HAD_LEVEL) THEN
	   OK=DCL_INT('LEVEL',.TRUE.)			!read the number
	   IF (.NOT.OK) GOTO 999
C
	   LEVEL = IARRAY(1)
	   OK = (LEVEL.EQ.0 .OR. LEVEL.EQ.4 .OR. LEVEL.EQ.5)
C
	   IF (.NOT.OK) THEN
		CALL LSL_PUTMSG(DTI2NTF__BADLEV, IARRAY(1))
		CALL WRITEF(E_MESG//'LEVEL must be 0, 4 or 5')
		OK = DTI2NTF__BADVER
		GOTO 999
	   ENDIF
	ENDIF
C
C ----------------------------------------------------------------------------
C /FIELDWIDTH
C
	IF (LEVEL.EQ.0) FIELD_WIDTH = 10	! preset to 10 for level 0
C
	OK=DCL_QUAL('FIELDWIDTH',HAD_FWIDTH,FPRES,FNEGA,.TRUE.)
	IF (OK.AND.HAD_FWIDTH) THEN
	   IF (LEVEL.EQ.0) THEN
	     CALL WRITEF(W_MESG//
     &		'FIELD_WIDTH cannot be re-defined at level 0')
	     CALL WRITEF(I_AMESG//
     &		'data will be output in a 10 character field')
	     FIELD_WIDTH = 10
C
	   ELSEIF (LEVEL.EQ.4 .OR. LEVEL.EQ.5) THEN
	     OK=DCL_INT('FIELDWIDTH',.TRUE.)		!read the number
	     IF (OK) THEN 
		FIELD_WIDTH = ABS(IARRAY(1))		!get the number
		CALL WRITEF(I_MESG//
     &			'FIELD_WIDTH of %I given', FIELD_WIDTH)
		CALL WRITEF(I_AMESG//
     &			'it may be re-calculated later')
	     ENDIF
	   ENDIF 
	ENDIF	
C
	IF (.NOT.OK) GOTO 999
C
C------------------------------------------------------------------------------
C /RECIPIENT
C
	OK=DCL_QUAL('RECIPIENT',THERE,FPRES,FNEGA,.TRUE.)
C
	IF (OK.AND.THERE) THEN				!qualifier was given
	   OK=DCL_STR('RECIPIENT',.TRUE.)		!get the data
	   IF (OK) OK = GET_STRING(CARRAY(1), STR_LEN(1), RECIP, 20)
	ENDIF
C
	IF (.NOT.OK) GOTO 999
C
C------------------------------------------------------------------------------
C SERIAL qualifier
C
	OK=DCL_QUAL('SERIAL',THERE,FPRES,FNEGA,.TRUE.)
	IF (OK.AND.THERE) THEN
	   OK=DCL_INT('SERIAL',.TRUE.)
	   IF (OK) THEN
	     OK = (IARRAY(1).LE.9999)
	     IF (OK) THEN
	       SERIAL=IARRAY(1)
	       OK = (SERIAL.EQ.1600 .OR. SERIAL.EQ.6250)
	       IF (.NOT.OK) CALL WRITEF(E_MESG//
     &				'SERIAL must be 1600 or 6250')
	     ENDIF
	  ENDIF
	ENDIF
C
	IF (.NOT.OK) GOTO 999
C
C------------------------------------------------------------------------------
C /INPUT- if say want to join 200 DTI files, it would be impractical to
C specify them all on the command line, so read them from the specified file
C
C **NOTE** HAD_FILES is set above if files were specified on the command line. 
C if /INPUT was specified aswell, this is where the program decides to ignore 
C the files on the command line
C
C **NOTE** that this part of the code has been moved down here because it makes
C use of a different CLD module. This prevents the program re-prompting for file
C names if the original CLD module was restored
C
	OK = DCL_QUAL('INPUT',INPUT,FPRES,FNEGA,.TRUE.)
	IF (.NOT.OK) GOTO 999
C
	IF (INPUT) THEN
	   IF (HAD_FILES) CALL LSL_PUTMSG(DTI2NTF__IGNINFILES)
 	   OK = DCL_FILE('INPUT','DTI2NTF.INP',THERE,.TRUE.,.TRUE.)
	   IF (OK) OK = GET_INFILE ( FILARY(1), FIL_LEN(1) )	!read filenames
C
	ELSEIF (.NOT.HAD_FILES) THEN
	   CALL LSL_PUTMSG(DTI2NTF__NODTIIN)		!no dti files to convert
	   OK = .FALSE.					!errrrr
	ENDIF
C
C------------------------------------------------------------------------------
C Check version and level combination
C
	IF (HAD_LEVEL .AND. HAD_VERSION) THEN
	   IF (VERSION.EQ.1.0) THEN
	      IF (LEVEL.NE.4 .AND. LEVEL.NE.0) THEN
		 CALL LSL_PUTMSG(DTI2NTF__BADVERLEV, VERSION, LEVEL)
		 OK = DTI2NTF__BADVERLEV
		 GOTO 999
	      ENDIF
C
	   ELSEIF (VERSION.EQ.2.0) THEN
	      IF (LEVEL.NE.5) THEN
		 CALL LSL_PUTMSG(DTI2NTF__BADVERLEV, VERSION, LEVEL)
		 OK = DTI2NTF__BADVERLEV
		 GOTO 999
	      ENDIF
	   ENDIF
	ENDIF
C
C Version and now valid combination or single value
C
	IF (HAD_VERSION) THEN
	   IF (VERSION.EQ.1.0) THEN
		IF (.NOT.HAD_LEVEL) LEVEL = 4	! default
		FIXED      = .TRUE.		! level 4 for Version 1.0
		EOR_MARKER = CHAR(13)		! EOR = <CR>
C
	   ELSEIF (VERSION.EQ.2.0) THEN
		LEVEL      = 5			! default
		FIXED      = .FALSE.		! level 5 for Version 2.0
		EOR_MARKER = '%'		! EOR = %
	   ENDIF
	ENDIF
C
	IF (HAD_LEVEL) THEN
	   IF (LEVEL.EQ.5) THEN
		VERSION = 2.0				! NTF raster at version
		FIXED   = .FALSE.			! 2.0 for level 5
		EOR_MARKER = '%'			! EOR
C
	   ELSEIF (LEVEL.EQ.4 .OR. LEVEL.EQ.0) THEN
		VERSION = 1.0				! NTF raster at version
		FIXED   = .TRUE.			! 1.0 for level 0 or 4
		EOR_MARKER = CHAR(13)			! <CR>
	   ENDIF
	ENDIF
C
C###########################################################################
C
999	CMDLIN = OK
C
	RETURN
	END
C
