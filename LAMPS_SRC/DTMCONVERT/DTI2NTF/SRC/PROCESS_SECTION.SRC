C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-07-01 12:04:36.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION PROCESS_SECTION(FILE)
C
***	MODULE	PROCESS_SECTION
***	IDENT	01JL93
C
C Copyright (C) Laser-Scan Ltd, Cambridge, England
C
C Author 						SG 30-Aug-1991
C
C This function will write out the GRID records for each section. 
C
CMOD	Function writes the GRIDHREC 			SG 03-Sep-1991
C
CMOD1243 Write NTF Version 2.0 level 5			JB 30-Jun-1993
C
	IMPLICIT NONE
C
	INCLUDE		'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE		'HERE:SECTION.CMN'
	INCLUDE		'HERE:NTFDATA.CMN'
	INCLUDE		'HERE:MESSAGE.PAR'
	INCLUDE		'HERE:COMMANDS.CMN'
C
C Arguments
	INTEGER		FILE			! file number
C
C Functions
	INTEGER		WRITE_GRIDHREC
	INTEGER		READ_DTI_COL
	INTEGER		WRITE_NTF_COL
C
	INTEGER		OK
	INTEGER		CURRENT_COL,I
	CHARACTER*80	MSG_STR
C
C -------------------------------------------------------------------------
	OK = LSL__NORMAL				!assume success
C
	OK = WRITE_GRIDHREC()				!write the GRIDHREC
	IF (.NOT.OK) GOTO 9999
C
	IF (LOG) THEN
	  CALL WRITEF(I_MESG//'GridHeader record written')
	  CALL WRITEF(I_MESG//'Processing DTI matrix')
	  CALL WRITEF()
	ENDIF
C
C .......................................................................
C
	CURRENT_COL = 0
	IF (LOG.AND.IS_TERM) THEN			!diagnostic messages
	  CALL LIB$PUT_OUTPUT( ESC//'[1m')
	  WRITE(*,'(1X,F6.2,''%'')') REAL(CURRENT_COL)
	ENDIF
C
	DO WHILE (OK .AND. CURRENT_COL.LT.XMAX)		! for as many COLs
	  CURRENT_COL = CURRENT_COL+1			! next COL
	  OK = READ_DTI_COL(CURRENT_COL)		! read data
	  IF (OK) THEN
	    OK = WRITE_NTF_COL(CURRENT_COL)		! write data
C
	    IF (LOG.AND.IS_TERM) 			! diagnostic messages
     &	      	WRITE(*,'(1H+,F6.2)') 100*REAL(CURRENT_COL)/REAL(XMAX)
C
	  ELSE
	    GOTO 999
	  ENDIF
	END DO
C
	IF (OK .AND. LOG .AND. IS_TERM) THEN		! diagnostic messages
	  I = 100
	  WRITE(*,'(1H+,F6.2)') REAL(I)
	ENDIF
C
999	IF (LOG.AND.IS_TERM) THEN
	   CALL LIB$PUT_OUTPUT( ESC//'[0m')
	   CALL WRITEF()
	ENDIF
C
C	.......................................................................
C if logging enabled, reposition to the bottom of the screen
C
C	IF (LOG .AND. IS_TERM) CALL LIB$PUT_OUTPUT(ESC//'[22H')
C
C -------------------------------------------------------------------------
C 
9999	PROCESS_SECTION = OK
C
	RETURN
	END
C
