	INTEGER FUNCTION READ_DTI_COL(DTI_COL)
C
***	MODULE	READ_DTI_COL
***	IDENT	01JL93
C
C Copyright (C) Laser-Scan Ltd, Cambridge, England
C
C Author 						SG 03-Sep-1991
C
C This function will read the data for the output GRID records, from the input 
C DTI file
C
C	.-----------------{ PSEUDO CODE }---------------.
C	|						|
C	| for each row in the DTI_COL			|
C	|   read data from dti file			|
C	|     (use appropriate read_dti_.. function)	|
C	|   convert the data into reals			|
C	|   store in common block			|
C	`-----------------------------------------------'
C
	IMPLICIT NONE
C
C includes
	INCLUDE 	'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE		'LSL$CMNDTI:DTIHDR.CMN'
	INCLUDE		'LSL$CMNDTI:DTIPAR.PAR'
	INCLUDE		'HERE:DTI2NTFMSG.PAR'
	INCLUDE		'HERE:SECTION.CMN'
	INCLUDE		'HERE:NTFDATA.CMN'
C
	INCLUDE 	'HERE:LUNS.PAR'
	INCLUDE		'HERE:NTFDATA.PAR'
	INCLUDE 	'HERE:MESSAGE.PAR'
C
C parameters
	INTEGER		DTI_COL
C
C functions
	INTEGER	DTI_READ_BYTE_DATA
	INTEGER	DTI_READ_WORD_DATA
	INTEGER	DTI_READ_LONG_DATA
	INTEGER	DTI_READ_REAL_DATA
C
C workspace
	INTEGER		OK
	INTEGER		DTI_ROW
C
	BYTE		BYTE_DATA		!unsigned integer
	INTEGER*2	UNSIGNED_WORD_DATA	
	EQUIVALENCE(BYTE_DATA, UNSIGNED_WORD_DATA)
	INTEGER*2	WORD_DATA
	INTEGER*4	LONG_DATA
	REAL*4		REAL_DATA
C
C --------------------------------------------------------------------------
C
	OK = LSL__NORMAL				!assume success
	DTI_ROW = 0					!initialise row count
C
C	......................................................................
C	for each row in the column
C
	DO WHILE (OK.AND.(DTI_ROW.LT.YMAX))
	  DTI_ROW = DTI_ROW+1				!next row
C
C	  ......................................................................
C	  read and convert data from DTI file
C
	  IF ( DATA_TYPE(DTI_LUN).EQ.DTI_BYTE ) THEN
	    OK = DTI_READ_BYTE_DATA(DTI_LUN, BYTE_DATA, DTI_COL, DTI_ROW)
	    REAL_DATA = FLOAT(UNSIGNED_WORD_DATA)		!convert
	    IF (BYTE_DATA.EQ.DTI_NULL_BYTE) REAL_DATA = 0.0	!change if null
C
	  ELSEIF ( DATA_TYPE(DTI_LUN).EQ.DTI_WORD ) THEN
	    OK = DTI_READ_WORD_DATA(DTI_LUN, WORD_DATA, DTI_COL, DTI_ROW)
	    REAL_DATA = FLOAT(WORD_DATA)			!convert
	    IF (WORD_DATA.EQ.DTI_NULL_WORD) REAL_DATA = 0.0	!change if null
C
	  ELSEIF ( DATA_TYPE(DTI_LUN).EQ.DTI_LONG ) THEN
	    OK = DTI_READ_LONG_DATA( DTI_LUN, LONG_DATA, DTI_COL, DTI_ROW)
	    REAL_DATA = FLOAT(LONG_DATA)			!convert
	    IF (WORD_DATA.EQ.DTI_NULL_LONG) REAL_DATA = 0.0	!change if null
C
	  ELSEIF ( DATA_TYPE(DTI_LUN).EQ.DTI_REAL ) THEN
	    OK = DTI_READ_REAL_DATA( DTI_LUN, REAL_DATA, DTI_COL, DTI_ROW)
	    IF (REAL_DATA.EQ.DTI_NULL_REAL) REAL_DATA = 0.0	!change if null
C
	  ELSEIF ( DATA_TYPE(DTI_LUN).EQ.DTI_BIT ) THEN		! shouldn't get 
	    OK = DTI2NTF__BADDTITYPE				! here
	    CALL LSL_PUTMSG(OK)
	    CALL WRITEF(E_MESG//'Unsupported DTI data type : BIT')
	    GOTO 999
C
	  ELSE
	    OK = DTI2NTF__BADDTITYPE
	    CALL LSL_PUTMSG(OK)
	    CALL WRITEF(E_MESG//'Unsupported DTI data type')
	    GOTO 999
	  ENDIF
C
C	  ......................................................................
C	  check that return value was valid
C
	  IF (OK) THEN
	    COLUMN_DATA(DTI_ROW) = REAL_DATA		!remember data
C
	  ELSE
	    CALL LSL_PUTMSG(OK)
	    CALL WRITEF(E_MESG//'Unable to read DTI coordinate')
	    CALL WRITEF(I_AMESG//'ROW %I, COLUMN %I', DTI_COL, DTI_ROW)
	    GOTO 999
	  ENDIF
C
	END DO
C
C --------------------------------------------------------------------------
C
999	READ_DTI_COL = OK
C
	RETURN
	END
C
