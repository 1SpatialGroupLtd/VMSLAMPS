	LOGICAL FUNCTION GET_STRING( IN_STR, IN_LEN, OUT_STR, MAX_LEN )
C
***	MODULE	GET_STRING
***	IDENT	29AU91
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C	Author S Gupta   29-August-1991
C
C	gets a string of the specified length from the input string
C	AND left justifies it into the output buffer
C
	IMPLICIT NONE
C
	INCLUDE 'HERE:DTI2NTFMSG.PAR'
C
	CHARACTER*(*)	IN_STR
	INTEGER		IN_LEN
	CHARACTER*(*)	OUT_STR
	INTEGER		MAX_LEN
C
	LOGICAL		OK
	INTEGER		START_VAL,  END_VAL
	CHARACTER	START_CHAR, END_CHAR
	INTEGER		TMP, OUT_LEN
C
C##############################################################################
C Initialise
C
	OK = .TRUE.
	START_VAL = 1
	END_VAL = IN_LEN
	START_CHAR = IN_STR(START_VAL:START_VAL)
	END_CHAR = IN_STR(END_VAL:END_VAL)
C
C..............................................................................
C Initialise string to blanks
C
	DO 100 TMP = 1,MAX_LEN
	  OUT_STR(TMP:TMP) = ' '
100	CONTINUE
C
C..............................................................................
C adjust string for start and end values, skip over any quote characters
C
	IF ((START_CHAR.EQ.'''') .OR. (START_CHAR.EQ.'"'))
     &		START_VAL = START_VAL+1

	IF ((END_CHAR.EQ.'''') .OR. (END_CHAR.EQ.'"'))
     &		END_VAL = END_VAL+1

C
C..............................................................................
C extract the string
C
	OK = (END_VAL.GT.START_VAL)			!validate string
	IF (OK) THEN					! valid string
	  OUT_LEN = END_VAL - START_VAL +1		!determine length
	  IF (OUT_LEN.GT.MAX_LEN) THEN			! invalid length
 	    CALL LSL_PUTMSG( DTI2NTF__LONGMSG,MAX_LEN )	! warning message
	    CALL LSL_ADDSTR( IN_STR(1:IN_LEN) )
	    OUT_LEN = MAX_LEN				!truncate excess
	  ENDIF	  
	  OUT_STR(1:OUT_LEN) = 
     &			IN_STR(START_VAL: START_VAL+OUT_LEN-1)
	ENDIF
C
C##############################################################################
C
	GET_STRING = OK
	RETURN
	END
