	INTEGER FUNCTION WRITE_NTF_COL(NTF_COL)
C
***	MODULE	WRITE_NTF_COL
***	IDENT	02JL93
C
C Copyright (C) Laser-Scan Ltd, Cambridge, England
C
C Author					SG 03-Sep-1991
C
CMOD1243 Write NTF Version 2.0 level 5		JB 01-Jul-1993
C
C This will write the GRID record, from the DATA read from the DTI file
C
C	.-----------{ PSEUDO CODE }---------------------.
C	|						|
C	| create the header fields for the GRIDREC	|
C	| for each row					|
C	|   write coordinates to string			|
C	|   keep track of what position in the string	|
C	|   output strings when they become full	|
C	|						|
C	`-----------------------------------------------'	
C
	IMPLICIT NONE
C
C parameter
	INTEGER		NTF_COL
C
C includes
	INCLUDE		'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE		'HERE:SECTION.CMN'
	INCLUDE		'HERE:NTFDATA.CMN'
	INCLUDE		'HERE:MAGTAPE.CMN'
C
	INCLUDE		'HERE:NTFDATA.PAR'
	INCLUDE		'HERE:MESSAGE.PAR'
C
C function
	INTEGER			WRITE_STRING
C
C workspace
	INTEGER			OK
	CHARACTER*80		STRING
	INTEGER			STR_POS
	INTEGER			NTF_ROW
	CHARACTER*80		DATA_STR
	INTEGER*4		ITMP
C
	CHARACTER*2		REC_DESCR	! must be 51
	CHARACTER*7		SURVEY		! not set
	CHARACTER*7		CHANGE		! not set
	INTEGER			COL_START	! NTF_COL
	INTEGER			COL_END		! NTF_COL
	INTEGER			ROW_START	! 1
	INTEGER			ROW_END		! MAXY
	INTEGER			PLA_START	! blank
	INTEGER			PLA_END		! blank
	CHARACTER*1		COL_INV		! 0
	CHARACTER*1		ROW_INV		! 0
	CHARACTER*1		PLA_INV		! 0
	CHARACTER*1		ORDER		! 0
	CHARACTER*1		INTERPRET	! 1
	INTEGER			V_OFFSET	! 0
	INTEGER			V_SCALE		! 1:1 or Z_MULT
	INTEGER			N_GRIDVAL	! no. of rows
C
C -----------------------------------------------------------------------------
C
	OK = LSL__NORMAL				!assume success
C
C -----------------------------------------------------------------------------
C calculate and output the header fields
C
	STRING = ' '					!initialise the string	
C
	REC_DESCR = '51'
	COL_START = NTF_COL
	COL_END   = NTF_COL
	ROW_START = 1
	ROW_END   = YMAX
	COL_INV   = '0'
	ROW_INV   = '0'
	PLA_INV   = '0'
	ORDER     = '1'
	INTERPRET = '1'
	V_OFFSET  = 0
	V_SCALE   = 1000		! Z_MULT ?????
C
	IF (LEVEL.EQ.5) THEN
C
	  SURVEY(1:7) = '0000000'				! not set
	  CHANGE(1:7) = '0000000'				! not set
	  PLA_START   = 1
	  PLA_END     = 1
C
	  CALL EXPAND (
     &'%WS% %S2%S10%S7%S7%P0%I4%I4%I4%I4%I4%I4%S1%S1%S1%S1%S1%I10%I10% 1%S1% ',
     &		STRING, REC_DESCR, GRID_ID, SURVEY, CHANGE, COL_START, COL_END, 
     &		ROW_START, ROW_END, PLA_START, PLA_END, COL_INV, ROW_INV, 
     &		PLA_INV, ORDER, INTERPRET, V_OFFSET, V_SCALE, EOR_MARKER)
C
	  STR_POS = 77
C
	  OK = WRITE_STRING(STRING,STR_POS)
	  IF (.NOT.OK) GOTO 999
C
C Continuation record
C
	  STRING = ' '					!initialise the string	
	  N_GRIDVAL = YMAX
C
	  CALL EXPAND ('%WS% 00%P0%I8% 1%S1% ',
     &		STRING, N_GRIDVAL, EOR_MARKER)
	  STR_POS = 12
C
	  OK = WRITE_STRING(STRING,STR_POS)
	  IF (.NOT.OK) GOTO 999
C
	ELSE
C
	  SURVEY(1:7) = ' 000000'				! not set
	  CHANGE(1:7) = ' 000000'				! not set
	  PLA_START   = 0
	  PLA_END     = 0
C
	  CALL EXPAND (
     &	    '%WS% %S2%S10%S7%S7%I4%I4%I4%I4%I4%I4%S1%S1%S1%S1%S1%I10%I10% 1',
     &		STRING, REC_DESCR, GRID_ID, SURVEY, CHANGE, COL_START, COL_END, 
     &		ROW_START, ROW_END, PLA_START, PLA_END, COL_INV, ROW_INV, 
     &		PLA_INV, ORDER, INTERPRET, V_OFFSET, V_SCALE )
C
	  STR_POS = 76
C
	  OK = WRITE_STRING(STRING,STR_POS)
	  IF (.NOT.OK) GOTO 999
C
	ENDIF
C
C ----------------------------------------------------------------------------
C now output the data
C
	STRING = ' '					!initialise the string	
C
C** NTF V1.0 says that the N_GRIDVAL field isnt used.. Assuming that it is
C** missing altogether.
C**	CALL EXPAND ('%WS% 00%I10',STRING,YMAX)
C**	STR_POS = 13					!initialise pointer
C
	STRING(1:2) = '00'
	STR_POS = 3

	NTF_ROW = 0
C
	DO WHILE (OK.AND.(NTF_ROW.LT.YMAX) )		! for each row
	  NTF_ROW = NTF_ROW + 1
C
C	  ................................................................
C	  Check that there is sufficient space in the record for more data
C
	  IF (LEVEL.EQ.5) THEN
C
	    IF ((STR_POS+FIELD_WIDTH).GT.79) THEN
	      STRING(STR_POS:STR_POS) = '1'
C
	      STR_POS = STR_POS + 1
	      STRING(STR_POS:STR_POS) = EOR_MARKER
C
	      OK =  WRITE_STRING(STRING,STR_POS)
	      IF (OK) THEN
	        STRING = ' '				!initialise string
	        STRING(1:2) = '00'			!continuation record
	        STR_POS = 3				!start of record
	      ELSE
	        CALL WRITEF(E_MESG//'Unable to write record to NTF file')
	        GOTO 999
	      ENDIF
	    ENDIF
C
	  ELSE
C
C	    IF ((STR_POS+FIELD_WIDTH).GE.80 ) THEN
C
	    IF ((STR_POS+FIELD_WIDTH).GT.80) THEN
	      STRING(STR_POS:STR_POS) = '1'
	      OK =  WRITE_STRING(STRING,STR_POS)
	      IF (OK) THEN
	        STRING = ' '				!initialise string
	        STRING(1:2) = '00'			!continuation record
	        STR_POS = 3				!start of record
	      ELSE
	        CALL WRITEF(E_MESG//'Unable to write record to NTF file')
	        GOTO 999
	      ENDIF
	    ENDIF
C
	  ENDIF
C
C	  .....................................................................
C	  write the data to the record: convert to string, append to string
C
	  ITMP = NINT( COLUMN_DATA(NTF_ROW) / Z_MULT)
C
	  CALL EXPAND( FORMAT_STR(1:FORMAT_LEN), DATA_STR, ITMP)
	  STRING( STR_POS:STR_POS+FIELD_WIDTH-1) = DATA_STR(1:FIELD_WIDTH)
	  STR_POS = STR_POS +FIELD_WIDTH
	END DO
C
C ..........................................................................
C mop up any records that havent been output
C
	IF (STR_POS.NE.1) THEN
C
	  IF (LEVEL.EQ.5) THEN
	    STRING(STR_POS:STR_POS) = '0'
	    STR_POS = STR_POS + 1
	    STRING(STR_POS:STR_POS) = EOR_MARKER
C
	    OK = WRITE_STRING(STRING,STR_POS)
C
	  ELSE
	    STRING(STR_POS:STR_POS) = '0'
	    OK = WRITE_STRING(STRING,STR_POS)
	  ENDIF
	ENDIF
C
C------------------------------------------------------------------------------
999	WRITE_NTF_COL = OK
C
	RETURN
	END
C
