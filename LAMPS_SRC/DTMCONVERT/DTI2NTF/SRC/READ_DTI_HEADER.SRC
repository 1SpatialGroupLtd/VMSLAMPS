C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-06-30 18:59:28.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION READ_DTI_HEADER(FILENUM)
C
***	MODULE	READ_DTI_HEADER
***	IDENT	30JN93
C
C Copyright (C) Laser-Scan Ltd, Cambridge, England
C
C Author 	SG 30-August-1991
C
CMOD	Disallow BIT datatype			JB 28-Oct-1991
CMOD    Re-organised to return error message 	JB 15-Apr-1992
CMOD1243Re-organised for Version 2.0 level 5	JB 30-Jun-1993
C
C Reads data from DTIHDR.CMN and places it into SECTION.CMN for processing
C later into a SECHREC 
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE 'LSL$CMNLSL:FILENAME.CMN'
	INCLUDE 'LSL$CMNDTI:DTIHDR.CMN'
	INCLUDE 'LSL$CMNDTI:DTIPROJ.CMN'
	INCLUDE 'HERE:SECTION.CMN'
	INCLUDE 'HERE:DTI2NTFMSG.PAR'
	INCLUDE 'HERE:FILENAME.CMN'
	INCLUDE 'HERE:NTFDATA.CMN'
	INCLUDE 'HERE:NTFDATA.PAR'
	INCLUDE 'HERE:MESSAGE.PAR'
	INCLUDE 'HERE:LUNS.PAR'
C
	INTEGER		FILENUM
C
	LOGICAL		FOUND
	INTEGER		OK
	INTEGER		TMP
	INTEGER		STR_START, STR_END, STR_LEN, STR_PTR
C
C##############################################################################
C
	IF (DATA_TYPE(DTI_LUN).EQ.DTI_BYTE .OR.
     &	    DATA_TYPE(DTI_LUN).EQ.DTI_WORD .OR.
     &	    DATA_TYPE(DTI_LUN).EQ.DTI_LONG .OR.
     &	    DATA_TYPE(DTI_LUN).EQ.DTI_REAL) THEN
	  OK = LSL__NORMAL
C
	ELSEIF (DATA_TYPE(DTI_LUN).EQ.DTI_BIT) THEN
	  OK = DTI2NTF__BADDTITYPE
	  CALL LSL_PUTMSG(OK)
	  CALL WRITEF(E_MESG//'Unsupported DTI data type : BIT')
	  GOTO 999
C
	ELSE
	  OK = DTI2NTF__BADDTITYPE
	  CALL LSL_PUTMSG(OK)
	  GOTO 999
	ENDIF
C
C-------------------------------------------------------------------------------
C The SECTREF is the current filename, only use the 1st 10 characters after the 
C end of the device name
C
	SECT_REF = ' '					!initialise sectref
	STR_START = 1					!initialise pointer
	STR_PTR = 0					!initialise pointer
	STR_END = DTI_FLEN(FILENUM)			!initialise pointer
	FOUND = .FALSE.
C
C	........................................................................
C	find end of device name if it exists, filename comes after this
C
	DO WHILE(STR_PTR.LT.STR_END .AND. .NOT.FOUND)
	  STR_PTR = STR_PTR +1					!next char
	  FOUND = DTI_FNAME(FILENUM)(STR_PTR:STR_PTR).EQ.':'	!is it ':'
	END DO
C
C	........................................................................
C	copy string to destination after adjusting
C
	IF (FOUND) STR_START = STR_PTR + 1		! skip over device name
	STR_LEN = STR_END - STR_START + 1		! find length of string
	IF (STR_LEN.GT.10) THEN				! if name too long
	  STR_END = STR_START+9				!  adjust pointers
	  STR_LEN = 10					!  adjust length
	ENDIF
	SECT_REF(1:STR_LEN) = DTI_FNAME(FILENUM)(STR_START:STR_END)
C
C	........................................................................
C
999	READ_DTI_HEADER = OK
C
	RETURN
	END
C
