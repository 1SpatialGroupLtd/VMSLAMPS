C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-07-01 12:55:20.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION SECTION_HEADER(FILE)
C
***	MODULE	SECTION_HEADER
***	IDENT	01JL93
C
C 	Copyright (C) Laser-Scan Ltd, Cambridge, England
C
C	Author 						SG 30-Aug-1991
C
CMOD	WRITE_STRING now a function			JB 15-Apr-1992
C
CMOD1243 Write NTF Version 2.0 level 5			JB 28-Jun-1993
C
C reads data from SECTION.CMN and writes a SECHREC record to the NTF file.
C NTF Version 1.0 (fixed) and 2.0 level 5 (variable)
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$CMNLSL:FILENAME.CMN'
	INCLUDE 'LSL$CMNDTI:DTIHDR.CMN'
	INCLUDE 'LSL$CMNDTI:DTIPROJ.CMN'
C
	INCLUDE 'HERE:FILENAME.CMN'
	INCLUDE 'HERE:COMMANDS.CMN'
	INCLUDE 'HERE:SECTION.CMN'
	INCLUDE 'HERE:MAGTAPE.CMN'
	INCLUDE 'HERE:NTFDATA.CMN'
C
	INCLUDE 'HERE:NTFDATA.PAR'
	INCLUDE 'HERE:MESSAGE.PAR'
	INCLUDE 'HERE:LUNS.PAR'
C
C Argument
	INTEGER		FILE
C
C Functions
	INTEGER		WRITE_STRING		! output a line
C
C Local
	LOGICAL		FOUND
	INTEGER		TMP
C
	LOGICAL		OK
	CHARACTER*80	STRING
	INTEGER		LENGTH
	CHARACTER*5	XY_LEN,Z_LEN		! unused fields
	CHARACTER*5	XY_ACC,Z_ACC		! unused fields
	REAL		REAL_XMAX, REAL_YMAX
C
C-------------------------------------------------------------------------------
C DTI files are rectangular,and they are raster
C
	COORD_TYP = RECTANGULAR
	STRUC_TYP = RASTER
C
C	........................................................................
C	compare UNITS of DTI file to NTF standard units
C
	FOUND = .FALSE.					!not found yet
	TMP = 0						!start at begin of list
	DO WHILE (.NOT.FOUND .AND. TMP.LT.NUMCONVERT)	!check against list
	  TMP = TMP+1
	  FOUND = DTIPROJ_UNITS(DTI_LUN) .EQ. DTI_UNIT(TMP)
	END DO
C
	XY_UNIT = UNKNOWN				!default value
	IF (FOUND) XY_UNIT = NTF_UNIT(TMP)		!convert to NTF units
C
C	........................................................................
C	XY_mult are grid units, they are integers and are stored as seen
C
	XY_MULT =1.0					! no multiplier
C
C-------------------------------------------------------------------------------
C and height stuff
C	........................................................................
C	set the heigth to be metres
C
	Z_UNIT = METRES					!not specified in DTI
C
C	........................................................................
C	set the height multiplier to use for the data
C
	IF (DATA_TYPE(DTI_LUN).EQ.DTI_REAL) THEN
	  Z_MULT = 0.001
	ELSE
	  Z_MULT = 1.0					!no multiplier
	ENDIF
C
C ----------------------------------------------------------------------------
C datums
	X_ORIG  = DTIPROJ_ORIGIN(1, DTI_LUN)
	Y_ORIG  = DTIPROJ_ORIGIN(2, DTI_LUN)
	Z_DATUM = 0
C
C ----------------------------------------------------------------------------
C the range of the file
C
	XMIN = 0
	YMIN = 0
	XMAX = X_EXTENT(DTI_LUN)
	YMAX = Y_EXTENT(DTI_LUN)
C
C ----------------------------------------------------------------------------
C the first record of the SECHREC
C
	IF (LEVEL.EQ.5) THEN
C
	   XY_LEN = '00000'
	   Z_LEN  = '00000'
C
	   CALL EXPAND
     & 	('%WS% 07%S10%I1%I1%S5%I1%P0%I10% %S5%I1%P0%I10%I10%I10%I10% 1%S1% ',
     &		STRING, SECT_REF, COORD_TYP, STRUC_TYP, XY_LEN, XY_UNIT,
     &		NINT(XY_MULT*1000.0), Z_LEN, Z_UNIT, NINT(Z_MULT*1000.0),
     &		X_ORIG, Y_ORIG, Z_DATUM, EOR_MARKER)
	   LENGTH = 78
C
	ELSE
C
	   XY_LEN = '     '
C
	   CALL EXPAND('%WS% 07%S10%I1%I1%S5%I1%I10%I1%I10%I10%I10%I8% 1',
     &		STRING, SECT_REF, COORD_TYP, STRUC_TYP, XY_LEN, XY_UNIT,
     &		NINT(XY_MULT*1000.0), Z_UNIT, NINT(Z_MULT*1000.0), X_ORIG,
     &		Y_ORIG, Z_DATUM)
	   LENGTH = 70
	ENDIF
C
	OK = WRITE_STRING(STRING,LENGTH)
	IF (.NOT.OK) GOTO 999
C
C........................................................................
C	the 2nd record of the SECHREC
C
	REAL_XMAX = REAL(XMAX-1)*X_GRID(DTI_LUN)+X_OFFSET(DTI_LUN)
	REAL_YMAX = REAL(YMAX-1)*Y_GRID(DTI_LUN)+Y_OFFSET(DTI_LUN)
C
	SURVDATE   = '00000000'
	LAST_AMEND = '00000000'
	COPYRIGHT  = '00000000'
C
	IF (LEVEL.EQ.5) THEN
	  XY_ACC = '00000'
	  Z_ACC  = '00000'
C
	  CALL EXPAND ('%WS% 00%P0%I10%I10%I10%I10% %S5%S5%S8%S8%S8% 0%S1% ',
     &		STRING, X_ORIG, Y_ORIG, NINT(REAL_XMAX), NINT(REAL_YMAX),
     &		XY_ACC, Z_ACC, SURVDATE, LAST_AMEND, COPYRIGHT, EOR_MARKER)
	  LENGTH = 78
C
	  OK = WRITE_STRING(STRING,LENGTH)
	  IF (.NOT.OK) GOTO 999
C
	ELSE
C
	  CALL EXPAND ('%WS% 00%I10%I10%I10%I10%           %S8%S8%S8% 1',
     &		STRING, X_ORIG, Y_ORIG, NINT(REAL_XMAX), NINT(REAL_YMAX),
     &		SURVDATE, LAST_AMEND,COPYRIGHT)
	  LENGTH = 77
C
	  OK = WRITE_STRING(STRING,LENGTH)
	  IF (.NOT.OK) GOTO 999
C
C .......................................................................
C and the 3rd record of the SECHREC
C
	  SQNAME = '                    '
	  SQDATE = '00000000'
C
	  CALL EXPAND ('%WS% 00%S20%S8% 0',STRING,SQNAME,SQDATE)
	  LENGTH = 31
C
	  OK = WRITE_STRING(STRING,LENGTH)
	  IF (.NOT.OK) GOTO 999
	ENDIF
C
C ----------------------------------------------------------------------------
999	SECTION_HEADER = OK
C
	RETURN
	END
C
