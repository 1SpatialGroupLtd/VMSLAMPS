C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1997-02-21 16:29:02.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION WRITE_NTF_HEADER()
C
***     MODULE WRITE_NTF_HEADER
***     IDENT  21FE97
C
C	Copyright Laser-Scan Ltd, Cambridge, England
C
C	Author						IMcL 27-Apr-1987
C	Modified					TJI   1-Oct-1987
C	Modified to 1.1					IMcL 25-Jul-1989
C
CMOD	 Modified for year 2000 compliance		MJGW 21-Feb-1997
CMOD	 Modified for use by DTI2NTF			  SG 27-Aug-1991
CMOD	 Restructured					  JB 15-Oct-1991
C	 Better messages for calculation of minimum FWIDTH
C	 Fix GRIDVAL field positions, and FWIDTH/FIELD_WIDTH
C	 placement
C
CMOD	 WRITE_STRING now a function to return write errors
C							  JB 15-Apr-1992
CMOD1243 Write NTF Version 2.0 level 5			  JB 24-Jun-1993
C
C Builds and writes the NTF volume header record
C
	IMPLICIT NONE
C
C Common:
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE 'LSL$CMNDTI:DTILIBMSG.PAR'
	INCLUDE 'HERE:COMMANDS.CMN'
	INCLUDE	'HERE:MESSAGE.PAR'
	INCLUDE 'HERE:NTFDATA.PAR'
	INCLUDE 'HERE:NTFDATA.CMN'
	INCLUDE 'HERE:MAGTAPE.CMN'		!for fixed
C
C functions
	INTEGER		SET_GRIDVAL
	INTEGER		OPEN_NTF
	INTEGER		WRITE_STRING
C
C Workspace:
	INTEGER		OK
	CHARACTER*80	STRING
	INTEGER		LENGTH			! of STRING
	INTEGER		LEN
	INTEGER		MONTH,DAY,YEAR
	CHARACTER*11	CDATE
	INTEGER		INT_VERSION
	LOGICAL		IS_SPACE
C
	CHARACTER*20	DDBASE
	CHARACTER*8	DDBDATE
	CHARACTER*20	FCNAME
	CHARACTER*8	FCDATE
	CHARACTER*20	DQNAME
	CHARACTER*8	DQDATE
	CHARACTER*2	DATA_MODEL
C
	CHARACTER*10	FIELD_NAME
	INTEGER		FWIDTH
	CHARACTER*5	FINTER
	CHARACTER*5	INTER
	CHARACTER*6	NO_DATA
	CHARACTER*12	RANGE_MIN
	CHARACTER*12	RANGE_MAX
	CHARACTER*40	FDESC
C
C###############################################################################
C
	WRITE_NTF_HEADER = LSL__NORMAL
C
	IF (LEVEL.EQ.4 .OR. LEVEL.EQ.5) THEN
	  OK = SET_GRIDVAL(FWIDTH) 		! calc minimum data_width
	  IF (OK) THEN
C
C If HAD_FWIDTH this value is used, so don't recalculate
C
	     IF (FWIDTH.GT.FIELD_WIDTH)	THEN
C
		IF (.NOT.HAD_FWIDTH) THEN
		   CALL WRITEF(W_MESG//
     &			'FIELD_WIDTH = %I is too small', FIELD_WIDTH)
		   CALL WRITEF(I_AMESG//
     &			'using calculated width %I', FWIDTH)
		   FIELD_WIDTH = FWIDTH
		ENDIF
C
	     ENDIF
	  ELSE			! some error
C
C If FWIDTH still zero and no /FIELD_WIDTH value given, give up (or no DTI
C files at all), otherwise only some DTI files missing so attempt to continue
C
	     IF (FWIDTH.EQ.0 .AND. .NOT.HAD_FWIDTH) GOTO 999	
	     IF (OK.EQ.DTI__SYSERR) GOTO 999
C
	     IF (FWIDTH.GT.FIELD_WIDTH)	THEN
		CALL WRITEF(W_MESG//
     &			'FIELD_WIDTH = %I is too small', FIELD_WIDTH)
		CALL WRITEF(I_AMESG//
     &			'using calculated width %I', FWIDTH)
	        FIELD_WIDTH = FWIDTH
	     ELSE
	        CALL WRITEF(W_MESG//'Unable to recalculate FIELD_WIDTH')
	        CALL WRITEF(I_AMESG//
     &			'attempting to continue with original value %I', 
     &							FIELD_WIDTH)
	     ENDIF
	  ENDIF
	ENDIF
C
	OK = OPEN_NTF()
	IF (OK) THEN
	   NTF_OPN = .TRUE.
	ELSE
	   GOTO 999
	ENDIF

C The VOLHDREC
C
	CALL IDATE( MONTH, DAY, YEAR)			!work out date now
	CALL LIB$DATE_TIME(CDATE)
	INT_VERSION = NINT(VERSION*100.0)		!convert version to INT
C
C	........................................................................
C
	IF (LEVEL.EQ.5) THEN
	   CALL EXPAND(
     &		'%WS%P % 01%S20%S20%P0%S4%I2%I2%I4%I2%I1%I4% V%S1% \0%S1% ',
     &			STRING, DONOR(1:20),RECIP(1:20),CDATE(8:11),MONTH,DAY,
     &			SERIAL,VOLNUM,LEVEL,INT_VERSION,
     &			EOR_MARKER,EOR_MARKER)
	   LENGTH = 66
C
	ELSE
	   CALL EXPAND('%WS%P % 01%S20%S20%P0%S4%I2%I2%I4%I2%I1%I4% 0',
     &			STRING, DONOR(1:20),RECIP(1:20),CDATE(8:11),MONTH,DAY,
     &			SERIAL,VOLNUM,LEVEL,INT_VERSION)
	   LENGTH = 62
	ENDIF
C
	OK = WRITE_STRING(STRING, LENGTH)		!write VOLHDREC
	IF (.NOT.OK) GOTO 999
C
C===============================================================================
	IF (LEVEL.EQ.5) GOTO 55
C
C now put some general information about the TRANSFER
C
	OK = WRITE_STRING('90LIST OF RECORDS USED WITH DIGITAL TERRAIN'//
     &		' MODELS                             1', 80)
	IF (.NOT.OK) GOTO 999
C
	OK = WRITE_STRING('00RECORD      NAME                 CODE    '//
     &		'                   PURPOSE          1', 80)
	IF (.NOT.OK) GOTO 999
C
	OK = WRITE_STRING('00VALUE                                    '//
     &		'                                    1', 80)
	IF (.NOT.OK) GOTO 999
C
	OK = WRITE_STRING('00  00  Continuation Record       [CONTREC]'//
     &		'  To transfer further data when a   1', 80)
	IF (.NOT.OK) GOTO 999
C
	OK = WRITE_STRING('00                                         '//
     &		'  single 80 character record is     1', 80)
	IF (.NOT.OK) GOTO 999
C
	OK = WRITE_STRING('00                                         '//
     &		'  insufficient.                     1', 80)
	IF (.NOT.OK) GOTO 999
C
	OK = WRITE_STRING('00  01  VOLUME HEADER RECORD      [VOLHREC]'//
     &		'  To transfer information about     1', 80)
	IF (.NOT.OK) GOTO 999
C
	OK = WRITE_STRING('00                                         '//
     &		'  the data contained on a tape.     1', 80)
	IF (.NOT.OK) GOTO 999
C
	OK = WRITE_STRING('00  02  DATABASE HEADER RECORD     [DBHREC]'//
     &		'  To transfer information           1', 80)
	IF (.NOT.OK) GOTO 999
C
	OK = WRITE_STRING('00                                         '//
     &		'  relating to a Database.           1', 80)
	IF (.NOT.OK) GOTO 999
C
	OK = WRITE_STRING('00  03  DATA DESCRIPTION         [DATADESC]'//
     &		'  To transfer the Data Dictionary   1', 80)
	IF (.NOT.OK) GOTO 999
C
	OK = WRITE_STRING('00                                         '//
     &		'  (field definitions).              1', 80)
	IF (.NOT.OK) GOTO 999
C
	OK = WRITE_STRING('00  04  DATA FORMAT RECORD        [DATAFMT]'//
     &		'  To transfer the Data Dictionary   1', 80)
	IF (.NOT.OK) GOTO 999
C
	OK = WRITE_STRING('00                                         '//
     &		'  (record definitions).             1', 80)
	IF (.NOT.OK) GOTO 999
C
	OK = WRITE_STRING('00  06  DATA QUALITY RECORD        [DBQUAL]'//
     &		'  To transfer information about     1', 80)
	IF (.NOT.OK) GOTO 999
C
	OK = WRITE_STRING('00                                         '//
     &		'  the quality of the database.      1', 80)
	IF (.NOT.OK) GOTO 999
C
	OK = WRITE_STRING('00  07  SECTION HEADER RECORD     [SECHREC]'//
     &		'  To transfer data relating to an   1', 80)
	IF (.NOT.OK) GOTO 999
C
	OK = WRITE_STRING('00                                         '//
     &		'  individual cell.                  1', 80)
	IF (.NOT.OK) GOTO 999
C
	OK = WRITE_STRING('00  50  GRID HEADER RECORD       [GRIDHREC]'//
     &		'  To transfer header data relating  1', 80)
	IF (.NOT.OK) GOTO 999
C
	OK = WRITE_STRING('00                                         '//
     &		'  to columns and rows.              1', 80)
	IF (.NOT.OK) GOTO 999
C
	OK = WRITE_STRING('00  51  GRID DATA RECORD          [GRIDREC]'//
     &		'  To transfer data relating to a    1', 80)
	IF (.NOT.OK) GOTO 999
C
	OK = WRITE_STRING('00                                         '//
     &		'  row of values  i.e. 401 values.   1', 80)
	IF (.NOT.OK) GOTO 999
C
	OK = WRITE_STRING('00  90  COMMENT RECORD            [COMMENT]'//
     &		'  To allow comments to be included  1', 80)
	IF (.NOT.OK) GOTO 999
C
	OK = WRITE_STRING('00                                         '//
     &		'  in the Transfer Set for           1', 80)
	IF (.NOT.OK) GOTO 999
C
	OK = WRITE_STRING('00                                         '//
     &		'  clarification on its structure.   1', 80)
	IF (.NOT.OK) GOTO 999
C
	OK = WRITE_STRING('00  99  VOLUME TERMINATOR RECORD  [VOLTERM]'//
     &		'  To mark the end of a tape.        0', 80)
	IF (.NOT.OK) GOTO 999
C
C===============================================================================
C
55	CONTINUE
C
C the database header record DBHREC
C
	IF (LEVEL.EQ.5) THEN
C
C Override those given by qualifiers
C
	   CALL EXPAND ('%WS% OS_LANDRANGER_DTM   ',DBNAME)
	   CALL EXPAND ('%WS% DEFAULT_02.00       ',DDNAME)
	   DDATE = '19920515'
C
	   DDBASE = '                    '
	   DDBDATE = '00000000'
C
	   FCNAME  = '                    '
	   FCDATE  = '00000000'
	   DQNAME  = '                    '
	   DQDATE  = '00000000'
	   DATA_MODEL = '00'
C
	   CALL EXPAND('%WS%P % 02%S20%S20%S8%S20%S8% 1%S1% ',STRING,
     &			DBNAME, DDNAME, DDATE, DDBASE, DDBDATE, EOR_MARKER)
	   LENGTH = 80
	   OK = WRITE_STRING(STRING, LENGTH)
	   IF (.NOT.OK) GOTO 999
C
C Continuation record
C
	   CALL EXPAND('%WS% 00%S20%S8%S20%S8%S2% 0%S1% ',
     &			STRING, FCNAME, FCDATE, DQNAME, DQDATE,
     &			DATA_MODEL, EOR_MARKER)
C
	   LENGTH = 62
	   OK = WRITE_STRING(STRING, LENGTH)
	   IF (.NOT.OK) GOTO 999
C
	ELSE
C
C DBNAME, DDNAME and DDATE given by qualifier
C
	   CALL EXPAND ('%WS%        DEFAULT_0%F4.2',DDBASE,VERSION)
	   DDBDATE = '00000000'
C
	   FCNAME  = '                    '
	   FCDATE  = '00000000'
	   DQNAME  = '                    '
	   DQDATE  = '00000000'
C
	   CALL EXPAND('%WS%P % 02%S20%S20%S8%S20%S8% 1',STRING,
     &				DBNAME, DDNAME, DDATE, DDBASE, DDBDATE)
C
	   LENGTH = 79
	   OK = WRITE_STRING(STRING, LENGTH)
	   IF (.NOT.OK) GOTO 999
C
C Continuation record
C
	   CALL EXPAND('%WS% 00%S20%S8%S20%S8% 0',
     &			STRING, FCNAME, FCDATE, DQNAME, DQDATE)
C
	   LENGTH = 59
	   OK = WRITE_STRING(STRING, LENGTH)
	   IF (.NOT.OK) GOTO 999
	ENDIF
C
C===============================================================================
C the database quality record
C
	IF (LEVEL.NE.5) THEN
	   OK = WRITE_STRING
     &		('06 Data source and supply details unavailable0',46)
	   IF (.NOT.OK) GOTO 999
	ENDIF
C
C===============================================================================
C the data description records (Levels 4 or 5 only) - DATADESC
C
	IF (LEVEL.EQ.4 .OR. LEVEL.EQ.5) THEN
C
	  FINTER = '     '
C
C	  ......................................................................
C	  work out the FINTER field
C
	  CALL EXPAND ('%WS% I%I0', FINTER, FIELD_WIDTH)
C
C	  ......................................................................
C
	  IF (LEVEL.EQ.4) THEN
C
	     FIELD_NAME = 'GRIDVAL   '
	     FDESC      = 'HEIGHT DATA'
	     NO_DATA    = '      '
	     RANGE_MAX  = '            '
	     RANGE_MIN  = '            '
C
	     CALL EXPAND('%WS% 03%S10%I3%S5%S6%I12%I12%S11% 0', 
     &		STRING, FIELD_NAME, FIELD_WIDTH, FINTER, NO_DATA, 
     &		NINT(Z_MIN), NINT(Z_MAX), FDESC(1:11))
C
	     LENGTH = 62
	     OK = WRITE_STRING(STRING, LENGTH)
C
	  ELSEIF (LEVEL.EQ.5) THEN
C
	     FIELD_NAME = 'GRID_ID   '
	     INTER 	= '     '
	     LEN 	= 10
	     CALL EXPAND ('%WS% %P0I%I0', INTER, LEN)
	     FDESC = 'GRID IDENTITY'
	     CALL EXPAND('%WS% 03%S10%P0%I3% %S5%S13% '//
     &			'\                           0%S1% ', 
     &		STRING, FIELD_NAME, LEN, INTER, FDESC(1:13), EOR_MARKER)
C
	     LENGTH = 63
	     OK = WRITE_STRING(STRING, LENGTH)
C
	     FIELD_NAME = 'N_COLUMNS '
	     INTER 	= '     '
	     LEN 	= 4
	     CALL EXPAND ('%WS% %P0I%I0', INTER, LEN)
	     FDESC = 'NUMBER OF COLUMNS IN DTM'
	     CALL EXPAND('%WS% 03%S10%P0%I3% %S5%S24% '//
     &			'\               0%S1% ', 
     &		STRING, FIELD_NAME, LEN, INTER, FDESC(1:24), EOR_MARKER)
C
	     LENGTH = 62
	     OK = WRITE_STRING(STRING, LENGTH)
C
	     FIELD_NAME = 'N_ROWS    '
	     INTER 	= '     '
	     LEN 	= 4
	     CALL EXPAND ('%WS% %P0I%I0', INTER, LEN)
	     FDESC = 'NUMBER OF ROWS IN DTM'
	     CALL EXPAND('%WS% 03%S10%P0%I3% %S5%S21% '//
     &			'\               0%S1% ',
     &		STRING, FIELD_NAME, LEN, INTER, FDESC(1:21), EOR_MARKER)
C
	     LENGTH = 59
	     OK = WRITE_STRING(STRING, LENGTH)
C
	     FIELD_NAME = 'N_PLANES  '
	     INTER 	= '     '
	     LEN 	= 4
	     CALL EXPAND ('%WS% %P0I%I0', INTER, LEN)
	     FDESC = 'NUMBER OF PLANES IN DTM'
	     CALL EXPAND('%WS% 03%S10%P0%I3% %S5%S23% '//
     &			'\               0%S1% ',
     &		STRING, FIELD_NAME, LEN, INTER, FDESC(1:23), EOR_MARKER)
C
	     LENGTH = 61
	     OK = WRITE_STRING(STRING, LENGTH)
C
	     FIELD_NAME = 'COL_START '
	     INTER 	= '     '
	     LEN 	= 4
	     CALL EXPAND ('%WS% %P0I%I0', INTER, LEN)
	     FDESC = 'FIRST COLUMN IN GRIDREC'
	     CALL EXPAND('%WS% 03%S10%P0%I3% %S5%S23% '//
     &			'\               0%S1% ',
     &		STRING, FIELD_NAME, LEN, INTER, FDESC(1:23), EOR_MARKER)
C
	     LENGTH = 61
	     OK = WRITE_STRING(STRING, LENGTH)
C
	     FIELD_NAME = 'COL_END   '
	     INTER 	= '     '
	     LEN 	= 4
	     CALL EXPAND ('%WS% %P0I%I0', INTER, LEN)
	     FDESC = 'LAST COLUMN IN GRIDREC'
	     CALL EXPAND('%WS% 03%S10%P0%I3% %S5%S22% '//
     &			'\               0%S1% ',
     &		STRING, FIELD_NAME, LEN, INTER, FDESC(1:22), EOR_MARKER)
C
	     LENGTH = 60
	     OK = WRITE_STRING(STRING, LENGTH)
C
	     FIELD_NAME = 'ROW_START '
	     INTER 	= '     '
	     LEN 	= 4
	     CALL EXPAND ('%WS% %P0I%I0', INTER, LEN)
	     FDESC = 'FIRST ROW IN GRIDREC'
	     CALL EXPAND('%WS% 03%S10%P0%I3% %S5%S20% '//
     &			'\               0%S1% ',
     &		STRING, FIELD_NAME, LEN, INTER, FDESC(1:20), EOR_MARKER)
C
	     LENGTH = 58
	     OK = WRITE_STRING(STRING, LENGTH)
C
	     FIELD_NAME = 'ROW_END   '
	     INTER 	= '     '
	     LEN 	= 4
	     CALL EXPAND ('%WS% %P0I%I0', INTER, LEN)
	     FDESC = 'LAST ROW IN GRIDREC'
	     CALL EXPAND('%WS% 03%S10%P0%I3% %S5%S19% '//
     &			'\               0%S1% ',
     &		STRING, FIELD_NAME, LEN, INTER, FDESC(1:19), EOR_MARKER)
C
	     LENGTH = 57
	     OK = WRITE_STRING(STRING, LENGTH)
C
	     FIELD_NAME = 'PLA_START '
	     INTER 	= '     '
	     LEN 	= 4
	     CALL EXPAND ('%WS% %P0I%I0', INTER, LEN)
	     FDESC = 'FIRST PLANE IN GRIDREC'
	     CALL EXPAND('%WS% 03%S10%P0%I3% %S5%S22% '//
     &			'\               0%S1% ',
     &		STRING, FIELD_NAME, LEN, INTER, FDESC(1:22), EOR_MARKER)
C
	     LENGTH = 60
	     OK = WRITE_STRING(STRING, LENGTH)
C
	     FIELD_NAME = 'PLA_END   '
	     INTER 	= '     '
	     LEN 	= 4
	     CALL EXPAND ('%WS% %P0I%I0', INTER, LEN)
	     FDESC = 'LAST PLANE IN GRIDREC'
	     CALL EXPAND('%WS% 03%S10%P0%I3% %S5%S21% '//
     &			'\               0%S1% ',
     &		STRING, FIELD_NAME, LEN, INTER, FDESC(1:21), EOR_MARKER)
C
	     LENGTH = 59
	     OK = WRITE_STRING(STRING, LENGTH)
C
	     FIELD_NAME = 'COL_INV   '
	     INTER 	= '     '
	     LEN 	= 1
	     CALL EXPAND ('%WS% %P0I%I0', INTER, LEN)
	     FDESC = 'COLUMN INVERSION (0 = FALSE)'
	     CALL EXPAND('%WS% 03%S10%P0%I3% %S5%S28% '//
     &			'\      01 0%S1% ',
     &		STRING, FIELD_NAME, LEN, INTER, FDESC(1:28), EOR_MARKER)
C
	     LENGTH = 60
	     OK = WRITE_STRING(STRING, LENGTH)
C
	     FIELD_NAME = 'ROW_INV   '
	     INTER 	= '     '
	     LEN 	= 1
	     CALL EXPAND ('%WS% %P0I%I0', INTER, LEN)
	     FDESC = 'ROW INVERSION (0 = FALSE)'
	     CALL EXPAND('%WS% 03%S10%P0%I3% %S5%S25% '//
     &			'\      01 0%S1% ',
     &		STRING, FIELD_NAME, LEN, INTER, FDESC(1:25), EOR_MARKER)
C
	     LENGTH = 57
	     OK = WRITE_STRING(STRING, LENGTH)
C
	     FIELD_NAME = 'PLA_INV   '
	     INTER 	= '     '
	     LEN 	= 1
	     CALL EXPAND ('%WS% %P0I%I0', INTER, LEN)
	     FDESC = 'PLANE INVERSION (0 = FALSE)'
	     CALL EXPAND('%WS% 03%S10%P0%I3% %S5%S27% '//
     &			'\      01 0%S1% ',
     &		STRING, FIELD_NAME, LEN, INTER, FDESC(1:27), EOR_MARKER)
C
	     LENGTH = 59
	     OK = WRITE_STRING(STRING, LENGTH)
C
	     FIELD_NAME = 'ORDER     '
	     INTER 	= '     '
	     LEN 	= 1
	     CALL EXPAND ('%WS% %P0I%I0', INTER, LEN)
	     FDESC = 'DATA ORDER (1 = COL,ROW,PLA)'
	     CALL EXPAND('%WS% 03%S10%P0%I3% %S5%S28% '//
     &			'\      17 0%S1% ',
     &		STRING, FIELD_NAME, LEN, INTER, FDESC(1:28), EOR_MARKER)
C
	     LENGTH = 60
	     OK = WRITE_STRING(STRING, LENGTH)
C
	     FIELD_NAME = 'INTERPRET '
	     INTER 	= '     '
	     LEN 	= 1
	     CALL EXPAND ('%WS% %P0I%I0', INTER, LEN)
	     FDESC = 'GRID DATA TYPE (1 = NUMERIC)'
	     CALL EXPAND('%WS% 03%S10%P0%I3% %S5%S28% '//
     &			'\      12 0%S1% ',
     &		STRING, FIELD_NAME, LEN, INTER, FDESC(1:28), EOR_MARKER)
C
	     LENGTH = 60
	     OK = WRITE_STRING(STRING, LENGTH)
C
	     FIELD_NAME = 'V_OFFSET  '
	     INTER 	= '     '
	     LEN 	= 10
	     CALL EXPAND ('%WS% %P0I%I0', INTER, LEN)
	     FDESC = 'GRID VALUE OFFSET'
	     CALL EXPAND('%WS% 03%S10%P0%I3% %S5%S17% '//
     &			'\                           0%S1% ', 
     &		STRING, FIELD_NAME, LEN, INTER, FDESC(1:17), EOR_MARKER)
C
	     LENGTH = 67
	     OK = WRITE_STRING(STRING, LENGTH)
C
	     FIELD_NAME = 'V_SCALE   '
	     LEN 	= 10
	     INTER	= 'R10,3'
	     FDESC	= 'GRID VALUE SCALE FACTOR'
	     CALL EXPAND('%WS% 03%S10%P0%I3% %S5%S23% '//
     &			'\  1000                     0%S1% ', 
     &		STRING, FIELD_NAME, LEN, INTER, FDESC(1:23), EOR_MARKER)
C
	     LENGTH = 73
	     OK = WRITE_STRING(STRING, LENGTH)
C
	     FIELD_NAME = 'N_GRIDVAL '
	     INTER 	= '     '
	     LEN 	= 8
	     CALL EXPAND ('%WS% %P0I%I0', INTER, LEN)
	     FDESC = 'NUMBER OF VALUES IN GRIDREC'
	     CALL EXPAND('%WS% 03%S10%P0%I3% %S5%S27% '//
     &			'\                       0%S1% ',
     &		STRING, FIELD_NAME, LEN, INTER, FDESC(1:27), EOR_MARKER)
C
	     LENGTH = 73
	     OK = WRITE_STRING(STRING, LENGTH)
C
C ........................................................................
C Only data defined field
C
	     FIELD_NAME = 'GRIDVAL   '
	     FINTER     = '     '
C
	     CALL EXPAND ('%WS% I%I0', FINTER, FIELD_WIDTH)
C
	     FDESC = 'HEIGHT VALUE IN METRES'
C
	     CALL EXPAND('%WS% 03%S10%P0%I3% %S5%S22% \      -1001500 0%S1% ', 
     &		STRING, FIELD_NAME, FIELD_WIDTH, FINTER, FDESC(1:22),
     &		EOR_MARKER)
C
	     LENGTH = 60
	     OK = WRITE_STRING(STRING, LENGTH)
C
C ........................................................................
C
	     FIELD_NAME = 'SURVEY    '
	     INTER 	= 'A7   '
	     LEN 	= 7
	     FDESC	= 'METHOD AND DATE OF SURVEY'
	     CALL EXPAND('%WS% 03%S10%P0%I3% %S5%S25% '//
     &			'\                     0%S1% ', 
     &		STRING, FIELD_NAME, LEN, INTER, FDESC(1:25), EOR_MARKER)
C
	     LENGTH = 69
	     OK = WRITE_STRING(STRING, LENGTH)
C
	     FIELD_NAME = 'CHANGE    '
	     INTER 	= 'A7   '
	     LEN 	= 7
	     FDESC	= 'TYPE AND DATE OF CHANGE'
	     CALL EXPAND('%WS% 03%S10%P0%I3% %S5%S23% '//
     &			'\                     0%S1% ', 
     &		STRING, FIELD_NAME, LEN, INTER, FDESC(1:23), EOR_MARKER)
C
	     LENGTH = 67
	     OK = WRITE_STRING(STRING, LENGTH)
C
	  ENDIF
C
	  IF (.NOT.OK) GOTO 999
	ENDIF
C	
C	........................................................................
C	work out the format string regardless of level
C
	IF (LEVEL.EQ.5) THEN
	   CALL EXPAND('%WS% %%WS%% %%P0%%I%I0',FORMAT_STR, FIELD_WIDTH)
	ELSE
	   CALL EXPAND('%WS% %%WS%% %%I%I0',FORMAT_STR, FIELD_WIDTH)
	ENDIF
C
	FORMAT_LEN = 21
	IS_SPACE = .TRUE.
	DO WHILE (IS_SPACE.AND.(FORMAT_LEN.GT.1))
	  FORMAT_LEN = FORMAT_LEN - 1
	  IS_SPACE = FORMAT_STR(FORMAT_LEN:FORMAT_LEN).EQ.' '
	END DO
C
C	IF (FORMAT_LEN.GT.0) OK = LSL__NORMAL
C
C===============================================================================
C the data format records for level 4 only - DATAFMT: GRIDHREC & GRIDREC
C
	IF (LEVEL.EQ.4) THEN
	  LENGTH = 67
	  OK = WRITE_STRING('0450GRIDHREC   8REC_DESCR GRID_ID'//
     &			'   N_COLUMNS N_ROWS    N_PLANES  1',LENGTH)
	  IF (.NOT.OK) GOTO 999
C
	  OK = WRITE_STRING('00(X_COORD  Y_COORD)  CONT_MARK0',32)
	  IF (.NOT.OK) GOTO 999
C
c
	  OK = WRITE_STRING('0451GRIDREC   17REC_DESCR GRID_ID   SURVEY'//
     &			'    CHANGE    COL_START COL_END1',74)
	  IF (.NOT.OK) GOTO 999
C
	  OK = WRITE_STRING('00ROW_START ROW_END   PLA_START PLA_END'//
     &			'   COL_INV   ROW_INV   ORDER1',68)
	  IF (.NOT.OK) GOTO 999
C
	  OK = WRITE_STRING('00INTERPRET V_OFFSET  V_SCALE   CONT_MARK0',42)
	  IF (.NOT.OK) GOTO 999
C
	ELSEIF (LEVEL.EQ.5) THEN
C
C GRIDHREC
C
	  CALL EXPAND('%WS% 0450GRIDHREC  31REC_DESCR cGRID_ID   c'//
     &			'N_COLUMNS cN_ROWS    cN_PLANES  c1%S1% ',
     &						STRING, EOR_MARKER)
	  LENGTH = 73
	  OK = WRITE_STRING(STRING,LENGTH)
	  IF (.NOT.OK) GOTO 999
C
	  CALL EXPAND ('%WS% 00X_COORD   cY_COORD   cZ_COORD   o'//
     &			      'X_COORD   cY_COORD   cZ_COORD   o1%S1% ',
     &						STRING, EOR_MARKER)
	  LENGTH = 70
	  OK = WRITE_STRING(STRING,LENGTH)
	  IF (.NOT.OK) GOTO 999
C
	  CALL EXPAND ('%WS% 00X_COORD   cY_COORD   cZ_COORD   o'//
     &			      'X_COORD   cY_COORD   cZ_COORD   o1%S1% ',
     &						STRING, EOR_MARKER)
	  LENGTH = 70
	  OK = WRITE_STRING(STRING,LENGTH)
	  IF (.NOT.OK) GOTO 999
C
	  CALL EXPAND ('%WS% 00X_COORD   cY_COORD   cZ_COORD   o'//
     &			      'X_COORD   cY_COORD   cZ_COORD   o1%S1% ',
     &						STRING, EOR_MARKER)
	  LENGTH = 70
	  OK = WRITE_STRING(STRING,LENGTH)
	  IF (.NOT.OK) GOTO 999
C
	  CALL EXPAND ('%WS% 00X_COORD   cY_COORD   cZ_COORD   o'//
     &			      'X_COORD   cY_COORD   cZ_COORD   o1%S1% ',
     &						STRING, EOR_MARKER)
	  LENGTH = 70
	  OK = WRITE_STRING(STRING,LENGTH)
	  IF (.NOT.OK) GOTO 999
C
	  CALL EXPAND ('%WS% 00CONT_MARK cEOR       c0%S1% ',
     &						STRING, EOR_MARKER)
	  LENGTH = 26
	  OK = WRITE_STRING(STRING,LENGTH)
	  IF (.NOT.OK) GOTO 999
C
C GRIDREC
C
	  CALL EXPAND('%WS% 0451GRIDREC   21REC_DESCR cGRID_ID   c'//
     &				'SURVEY    cCHANGE    oCOL_START c1%S1% ',
     &						STRING, EOR_MARKER)
	  LENGTH = 73
	  OK = WRITE_STRING(STRING,LENGTH)
	  IF (.NOT.OK) GOTO 999
C
	  CALL EXPAND('%WS% 00COL_END   cROW_START cROW_END   c'//
     &				'PLA_START cPLA_END   cCOL_INV   c1%S1% ',
     &						STRING, EOR_MARKER)
	  LENGTH = 70
	  OK = WRITE_STRING(STRING,LENGTH)
	  IF (.NOT.OK) GOTO 999
C
	  CALL EXPAND('%WS% 00ROW_INV   cPLA_INV   cORDER     c'//
     &				'INTERPRET cV_OFFSET  oV_SCALE   o1%S1% ',
     &						STRING, EOR_MARKER)
	  LENGTH = 70
	  OK = WRITE_STRING(STRING,LENGTH)
	  IF (.NOT.OK) GOTO 999
C
	  CALL EXPAND ('%WS% 00N_GRIDVAL c(GRIDVAL) cCONT_MARK c'//
     &				'EOR       c0%S1% ', STRING, EOR_MARKER)
	  LENGTH = 48
	  OK = WRITE_STRING(STRING,LENGTH)
	  IF (.NOT.OK) GOTO 999
C
	ENDIF
C
C###############################################################################
C
999	WRITE_NTF_HEADER = OK
C
	RETURN
	END
C
