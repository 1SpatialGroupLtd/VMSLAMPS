
                                                                 6-Aug-1997 09:37:32	VAX FORTRAN V5.9-173                Page   1
                                                                 6-Aug-1997 09:37:31	[DTMCONVERT.NTF2DTI.SPECIAL]SECTION.FOR;9   

00001   	LOGICAL FUNCTION READ_SECTION
00002   C
00003   C
00004   C Copyright (C) Laser-Scan Ltd, Cambridge, England
00005   C
00006   C Author TJ Ibbs, 6 October 1987
00007   C The main routine for reading a section
00008   C - NOTE that it will return with a record in-hand to be processed by READ_NTF
00009   C
00010   CMOD	Tidied sources, restructured (was code really by TJI?)	SG  13-Aug-1991
00011   C
00012   	IMPLICIT NONE
00013   C
00014   C Message files:
00015   C
00016   	INCLUDE	'HERE:NTF2DTIMSG.PAR'
00121   C
00122   C Common files:
00123   C
00124   	INCLUDE	'LSL$CMNLSL:FILENAME.CMN'
00185   	INCLUDE	'HERE:LUNS.PAR'
00195   	INCLUDE	'HERE:COMMANDS.CMN'
00214   	INCLUDE	'HERE:FILENAME.CMN'
00234   	INCLUDE	'HERE:RECORD.CMN'
00257   	INCLUDE	'HERE:NTFDATA.CMN'
00318   	INCLUDE 'LSL$CMNDTI:DTIPROJ.CMN'
00452   	INCLUDE 'LSL$CMNDTI:DTIHDR.CMN'
00567   C
00568   C Functions
00569   C
00570   	LOGICAL		READ_NTF_RECORD	! read next record from NTF
00571   	LOGICAL		READ_COMMENT	! read a comment record
00572   	LOGICAL		READ_SECHREC
00573   	LOGICAL		DTI_WRITE	! open & write to the DTI
00574   	LOGICAL		DTI_CLOSE
00575   	LOGICAL		READ_SECQUAL
00576   	LOGICAL		READ_GRIDHREC	! grid header
00577   C
00578   C Workspace
00579   C
00580   	LOGICAL		OK	! Function return
00581   	LOGICAL		RET	! Another one
00582   	INTEGER		IERR
00583   C
00584   C ***********************************************************************
00585   C
00586   	OK      = .TRUE.		! assume success
00587   C
00588   C........................................................................
00589   C read the SECHREC in
00590   C
00591   	OK = READ_SECHREC()
00592   	IF (.NOT.OK) GOTO 9999
00593   C
00594   C........................................................................
00595   C read in the records and hope they occur in a sensible  order
00596   C

READ_SECTION                                                     6-Aug-1997 09:37:32	VAX FORTRAN V5.9-173                Page   2
                                                                 6-Aug-1997 09:37:31	[DTMCONVERT.NTF2DTI.SPECIAL]SECTION.FOR;9   

00597   2000	OK=READ_NTF_RECORD()
00598   	IF (OK) THEN
00599   	  NTF$_REC_DESCR = STRING(1:2)
00600   C
00601   C	  ................................................................
00602   C	  section quality record
00603   C
00604   	  IF ( NTF$_REC_DESCR.EQ.'09' ) THEN	! section quality
00605   	     CALL READ_SECQUAL			! report on it
00606   	     GOTO 2000				! read the next record
00607   C
00608   C	  ................................................................
00609   C	  grid header record
00610   C
00611   	  ELSE IF ( NTF$_REC_DESCR.EQ.'50' ) THEN	! grid header
00612   	     OK = READ_GRIDHREC()			! read it
00613   	     IF (OK) THEN
00614   		OK = DTI_WRITE()			! and process grid
00615   		IF (.NOT.OK) GOTO 9999
00616   	     ENDIF
00617   C
00618   C	  ................................................................
00619   C	  comment record
00620   C
00621   	  ELSE IF ( NTF$_REC_DESCR.EQ.'90' ) THEN	! comment
00622   	     CALL READ_COMMENT			! report on it
00623   	     GOTO 2000				! read the next record
00624   C
00625   C	  ................................................................
00626   C	  volume terminator or section header record
00627   C
00628   	  ELSE IF ( NTF$_REC_DESCR.EQ.'07' .OR. NTF$_REC_DESCR.EQ.'99' ) THEN
00629   	     OK = .TRUE.			! we've finished, do nothing
00630   C
00631   C	  ................................................................
00632   C	  this record type is unknown, warn
00633   C
00634   	  ELSE
00635   	     CALL LSL_PUTMSG(NTF2DTI__UNEXPREC,NTF$_REC_DESCR,RECNUM)
00636   	  ENDIF
00637   	ENDIF
00638   C
00639   C ***********************************************************************
00640   C Close the DTI file (if any) - note that if we came here with an 
00641   C error, then that value supersedes the value returned by DTI_CLOSE
00642   C
00643   9999	IF ( DTIOPEN ) THEN
00644   C
00645   	   IF (LOG) THEN
00646   	      CALL WRITEF
00647   	      CALL WRITEF('%%NTF2DTI-I-MISC, closing DTI file')
00648   	   ENDIF
00649   C
00650   	   RET = DTI_CLOSE(DTILUN,.TRUE.,.FALSE.,IERR)
00651   	   IF (OK) OK = RET
00652   C
00653   	   IF (.NOT.RET) THEN

READ_SECTION                                                     6-Aug-1997 09:37:32	VAX FORTRAN V5.9-173                Page   3
                                                                 6-Aug-1997 09:37:31	[DTMCONVERT.NTF2DTI.SPECIAL]SECTION.FOR;9   

00654   	      CALL LSL_PUTMSG(NTF2DTI__DTICLOSERR,DTIFILE(:DTILEN))
00655   	      CALL LSL_ADDMSG(IERR)
00656   	   ELSE
00657   	      DTIOPEN = .FALSE.
00658   	      IF (LOG .AND. .NOT.OK) CALL LSL_PUTMSG(NTF2DTI__DTICLOSED)
00659   	   ENDIF
00660   	ENDIF
00661   C
00662   	READ_SECTION = OK
00663   C
00664   	RETURN
00665   	END




PROGRAM SECTIONS

    Name				 Bytes   Attributes

  0 $CODE                                  308   PIC CON REL LCL   SHR   EXE   RD NOWRT QUAD
  1 $PDATA                                  69   PIC CON REL LCL   SHR NOEXE   RD NOWRT QUAD
  2 $LOCAL                                 164   PIC CON REL LCL NOSHR NOEXE   RD   WRT QUAD
  3 LSL_FNAM_STR                           210   PIC OVR REL GBL   SHR NOEXE   RD   WRT QUAD
  4 LSL_FNAM_LOG                            24   PIC OVR REL GBL   SHR NOEXE   RD   WRT QUAD
  5 LSL_FNAM_LEN                            24   PIC OVR REL GBL   SHR NOEXE   RD   WRT QUAD
  6 COMMANDS                                40   PIC OVR REL GBL   SHR NOEXE   RD   WRT QUAD
  7 FILE_INT                                16   PIC OVR REL GBL   SHR NOEXE   RD   WRT QUAD
  8 FILE_CHR                               868   PIC OVR REL GBL   SHR NOEXE   RD   WRT QUAD
  9 RECORD1                                 86   PIC OVR REL GBL   SHR NOEXE   RD   WRT QUAD
 10 RECORD2                                  9   PIC OVR REL GBL   SHR NOEXE   RD   WRT QUAD
 11 NTFDATA                                 16   PIC OVR REL GBL   SHR NOEXE   RD   WRT QUAD
 12 DTIDATA                                128   PIC OVR REL GBL   SHR NOEXE   RD   WRT QUAD
 13 DTIPROJ                               1584   PIC OVR REL GBL   SHR NOEXE   RD   WRT QUAD
 14 DTIHDR                                2520   PIC OVR REL GBL   SHR NOEXE   RD   WRT QUAD

    Total Space Allocated                 6066


ENTRY POINTS

    Address  Type  Name          

  0-00000000  L*4  READ_SECTION  


VARIABLES

    Address  Type  Name                                               Address  Type  Name                            

 12-0000005C  I*4  COL_END                                         12-00000068  I*4  COL_INV                         
 12-00000058  I*4  COL_START                                        6-00000018  L*4  DEDUCE_FILE                     
  8-000000D9  CHAR DEVICE                                           7-00000004  I*4  DEVLEN                          
  8-000001B2  CHAR DTIFILE                                          7-00000008  I*4  DTILEN                          
  6-00000024  L*4  DTIOPEN                                         10-00000008  CHAR EOR_MARKER                      
 12-00000078  I*4  FIELD_WIDTH                                     11-0000000C  L*4  FIXED                           
  4-00000004  L*4  HAD_DEV                                          4-00000008  L*4  HAD_DIR                         

READ_SECTION                                                     6-Aug-1997 09:37:32	VAX FORTRAN V5.9-173                Page   4
01                                                               6-Aug-1997 09:37:31	[DTMCONVERT.NTF2DTI.SPECIAL]SECTION.FOR;9   

  4-00000010  L*4  HAD_EXT                                          4-0000000C  L*4  HAD_NAM                         
  4-00000000  L*4  HAD_NOD                                          4-00000014  L*4  HAD_VER                         
  2-00000020  I*4  IERR                                            12-00000074  I*4  INTERPRET                       
 11-00000004  I*4  INTVER                                           6-0000001C  L*4  IS_MAGTAPE                      
  6-00000010  L*4  IS_OS                                            6-00000020  L*4  IS_TERM                         
 10-00000004  I*4  LENGTH                                           5-00000004  I*4  LEN_DEV                         
  5-00000008  I*4  LEN_DIR                                          5-00000010  I*4  LEN_EXT                         
  5-0000000C  I*4  LEN_NAM                                          5-00000000  I*4  LEN_NOD                         
  5-00000014  I*4  LEN_VER                                         11-00000000  I*4  LEVEL                           
  6-00000000  L*4  LOG                                              8-00000000  CHAR LOGFILE                         
  7-00000000  I*4  LOGLEN                                           9-00000054  CHAR NTF$_REC_DESCR                  
  8-0000028B  CHAR NTFFILE                                          7-0000000C  I*4  NTFLEN                          
 12-0000007C  I*4  NUM_FIELD                                       12-0000002C  I*4  N_COLUMNS                       
 12-00000028  I*4  N_ROWS                                           2-00000018  L*4  OK                              
 12-00000070  I*4  ORDER                                            6-00000004  L*4  OUTPUT                          
  6-00000008  L*4  PROJECT                                         10-00000000  I*4  RECNUM                          
  2-0000001C  L*4  RET                                              6-00000014  L*4  REWIND                          
 12-00000064  I*4  ROW_END                                         12-0000006C  I*4  ROW_INV                         
 12-00000060  I*4  ROW_START                                        6-0000000C  L*4  SECT                            
  9-00000000  CHAR STRING                                           3-00000006  CHAR STR_DEV                         
  3-0000001A  CHAR STR_DIR                                          3-000000A5  CHAR STR_EXT                         
  9-00000050  I*4  STR_LEN                                          3-0000007E  CHAR STR_NAM                         
  3-00000000  CHAR STR_NOD                                          3-000000CC  CHAR STR_VER                         
 11-00000008  R*4  VERSION                                         12-00000014  I*4  XMAX                            
 12-00000010  I*4  XMIN                                            12-00000000  I*4  XYLEN                           
 12-00000008  R*4  XY_MULT                                         12-00000004  I*4  XY_UNIT                         
 12-00000030  R*4  X_ORIG                                          12-00000020  I*4  X_SAMP                          
 12-0000001C  I*4  YMAX                                            12-00000018  I*4  YMIN                            
 12-00000034  R*4  Y_ORIG                                          12-00000024  I*4  Y_SAMP                          
 12-0000000C  R*4  Z_MULT                                         


ARRAYS

    Address  Type  Name                                  Bytes  Dimensions

 14-00000318  I*4  DATA_OFFSET                              36  (9)
 14-00000384  I*4  DATA_TYPE                                36  (9)
 14-0000084C  L*4  DTILUN_INUSE                             36  (9)
 13-00000024  R*8  DTIPROJ_ORIGIN                          144  (2, 9)
 13-00000144  I*4  DTIPROJ_PROJECTION                       36  (9)
 13-000001F8  R*8  DTIPROJ_PROJ_PARAMS                    1080  (15, 9)
 13-00000000  I*4  DTIPROJ_RECORD_OFFSET                    36  (9)
 13-000000B4  R*4  DTIPROJ_SAMPLE                           72  (2, 9)
 13-00000120  I*4  DTIPROJ_SPHEROID                         36  (9)
 13-000000FC  I*4  DTIPROJ_UNITS                            36  (9)
 13-00000168  R*8  DTIPROJ_USER_SPHEROID                   144  (2, 9)
 14-000003A8  CHAR DTI_NAME                               1152  (9)
 14-00000828  I*4  DTI_NAME_LENGTH                          36  (9)
 14-00000990  I*4  DTI_ORDER_CORNER                         36  (9)
 14-000009B4  I*4  DTI_ORDER_DIRECTION                      36  (9)
 14-00000900  I*4  DTI_WINDOW_NEX                           36  (9)
 14-00000924  I*4  DTI_WINDOW_NEY                           36  (9)
 14-000008B8  I*4  DTI_WINDOW_SWX                           36  (9)
 14-000008DC  I*4  DTI_WINDOW_SWY                           36  (9)
 14-0000096C  L*4  HAD_PROJ_RECORD                          36  (9)
 14-00000360  I*4  HEADER_TYPE                              36  (9)

READ_SECTION                                                     6-Aug-1997 09:37:32	VAX FORTRAN V5.9-173                Page   5
01                                                               6-Aug-1997 09:37:31	[DTMCONVERT.NTF2DTI.SPECIAL]SECTION.FOR;9   

 14-00000288  I*4  LATINT                                   36  (9)
 14-00000240  I*4  LATORI                                   36  (9)
 14-00000120  I*4  LATREC                                  144  (4, 9)
 14-000002AC  I*4  LONINT                                   36  (9)
 14-00000264  I*4  LONORI                                   36  (9)
 14-000001B0  I*4  LONREC                                  144  (4, 9)
 14-000000B4  I*4  MAX_LVALUE                               36  (9)
 14-0000006C  R*4  MAX_RVALUE                               36  (9)
 14-0000034E  I*2  MAX_WVALUE                               18  (9)
 14-00000090  I*4  MIN_LVALUE                               36  (9)
 14-00000048  R*4  MIN_RVALUE                               36  (9)
 14-0000033C  I*2  MIN_WVALUE                               18  (9)
 14-00000948  L*4  READ_ONLY                                36  (9)
 14-000002D0  I*4  SEC_ADDR                                 36  (9)
 14-000002F4  I*4  SEC_SIZE                                 36  (9)
  2-0000000C  CHAR STD_ATTR_CODES                            6  (3)
  2-00000000  I*4  STD_ATTR_LEN                             12  (3)
 12-00000038  R*4  X_COORD                                  16  (4)
 14-000000D8  I*4  X_EXTENT                                 36  (9)
 14-00000000  R*4  X_GRID                                   36  (9)
 14-00000870  R*4  X_OFFSET                                 36  (9)
 12-00000048  R*4  Y_COORD                                  16  (4)
 14-000000FC  I*4  Y_EXTENT                                 36  (9)
 14-00000024  R*4  Y_GRID                                   36  (9)
 14-00000894  R*4  Y_OFFSET                                 36  (9)




LABELS

    Address   Label       Address   Label   

  0-0000001D  2000      0-000000BC  9999    


FUNCTIONS AND SUBROUTINES REFERENCED

  Type  Name                              Type  Name                              Type  Name                            

   L*4  DTI_CLOSE                          L*4  DTI_WRITE                               LSL_ADDMSG                      
        LSL_PUTMSG                              READ_COMMENT                       L*4  READ_GRIDHREC                   
   L*4  READ_NTF_RECORD                    L*4  READ_SECHREC                            READ_SECQUAL                    
        WRITEF                          

                                                                 6-Aug-1997 09:37:32	VAX FORTRAN V5.9-173                Page   6
                                                                 6-Aug-1997 09:37:31	[DTMCONVERT.NTF2DTI.SPECIAL]SECTION.FOR;9   

00001   C
00002    
00003   	LOGICAL FUNCTION READ_SECHREC
00004   C
00005   C
00006   C Copyright Laser-Scan Ltd, Cambridge, England
00007   C
00008   C Author	 IM	27-Apr-87
00009   C
00010   C Reads the data from the section header record
00011   C into the DTI common block
00012   C
00013   C Modified	TJI	 5-Oct-87
00014   C
00015   CMOD	Works out DTI name from SECHREC if not on command line.
00016   C							SG 19-Aug-1991
00017   CMOD	Note that raster information is height and is not redefinable at 
00018   C	level 0. Previously XYLEN had been used to redefine the data width.
00019   C	This is not allowable and so FIELD_WIDTH is being used.
00020   C							SG 10-Sep-1991
00021   C
00022   CMOD	 Read Z_MULT factor				JB 29-Oct-1991
00023   C
00024   CMOD	 Add new format code for Version 1.1		JB 21-May-1992
00025   C	 Change issue of NOTRASTER from error to warning, and
00026   C	 carry on (OS definition of raster is different to ours!)
00027   C
00028   CMOD	 Use LSL$DTI for output file names		JB 31-Mar-1993
00029   C
00030   CMOD1242 Read ver 2.0 level 5 NTF			JB 21-Jun-1993
00031   C
00032   	IMPLICIT NONE
00033   C
00034   C Messages:
00035   	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'
00308   	INCLUDE 'HERE:NTF2DTIMSG.PAR'
00413   C
00414   C Commons:
00415   	INCLUDE	'LSL$CMNLSL:FILENAME.CMN'
00476   	INCLUDE	'HERE:FILENAME.CMN'
00496   C
00497   	INCLUDE 'HERE:COMMANDS.CMN'
00516   	INCLUDE	'HERE:RECORD.CMN'
00539   	INCLUDE	'HERE:NTFDATA.CMN'
00600   	INCLUDE	'HERE:NTF2DTI.CMN'
00630   	INCLUDE	'HERE:LUNS.PAR'
00640   	INCLUDE	'LSL$CMNLSL:READSTR.PAR'
00667   C
00668   	INCLUDE 'LSL$CMNDTI:DTIHDR.CMN'
00783   	INCLUDE 'LSL$CMNDTI:DTIPROJ.CMN'
00917   C
00918   C Functions:
00919   	LOGICAL		PARFILN		! work out a file-spec
00920   	LOGICAL		RDINT		! read an integer from input buffer
00921   	LOGICAL		RDLONG		! read a longword from input buffer
00922   	LOGICAL		RDREAL		! read a real from input buffer
00923   	LOGICAL		READ_CONTINUE	! read a continuation record

READ_SECHREC                                                     6-Aug-1997 09:37:32	VAX FORTRAN V5.9-173                Page   7
                                                                 6-Aug-1997 09:37:31	[DTMCONVERT.NTF2DTI.SPECIAL]SECTION.FOR;9   

00924   	LOGICAL		READSTR
00925   	LOGICAL		CHECK_FNAME
00926   C
00927   C Workspace:
00928   	INTEGER		OK		! Success flag
00929   	INTEGER		NUM		! To RDINT into
00930   	INTEGER		I		! DO loop counter
00931   	INTEGER		SCALE		! Temp storage of scale
00932   	INTEGER*4	RETVAL
00933   C
00934   	CHARACTER*10	SECT_REF
00935   	CHARACTER*7	UNITS
00936   	INTEGER		UNLEN
00937   C
00938   C...........................................................................
00939   C Check that this is raster data
00940   C
00941   	IF ( STRING(14:14).NE.'2' ) CALL LSL_PUTMSG
00942        &				(NTF2DTI__NOTRASTER,COUNT_SECTION)
00943   C
00944   C...........................................................................
00945   C get the output file name if we need to
00946   C
00947   	IF (DEDUCE_FILE) THEN
00948   C
00949   C	  ..................................................................
00950   C first check that there is data in the section ref field of the SECHREC
00951   C
00952   	   SECT_REF = STRING(3:12)
00953   C
00954   	   CALL SETAUX( %REF(STRING(3:12)), 10)
00955   	   DTILEN = READSTR(DTIFILE,,ON_SPACE,RETVAL)
00956   	   OK = DTILEN.GT.0
00957   	   IF (.NOT.OK) THEN
00958   	     CALL WRITEF('%%NTF2DTI-E-MISC, error reading DTI file name')
00959   	     CALL WRITEF('-NTF2DTI-I-MISC, SECHREC entry was "%S"',STRING(3:12))
00960   	     GOTO 999
00961   	   ENDIF
00962   C
00963   	   DTIFILE = 'LSL$DTI:'//DTIFILE(1:DTILEN)
00964   	   DTILEN  = DTILEN + 8
00965   C
00966   C	   ...............................................................
00967   C	   check the file name, make sure its acceptable by VMS
00968   C
00969   	   OK = CHECK_FNAME(DTIFILE, DTILEN, 'DTI')
00970   	   IF (.NOT.OK) GOTO 999
00971   	ENDIF
00972   C
00973   C...........................................................................
00974   C Find out the size of planimetric coordinates - XYLEN
00975   C
00976   C  XYLEN is an optional field, 00000 for ver 2.0 level 5, or blank otherwise
00977   C
00978   	IF (STRING(15:19).EQ.'00000' .AND. LEVEL.EQ.5) THEN
00979   	   XYLEN=FIELD_WIDTH			! defaults to FIELD_WIDTH
00980   C

READ_SECHREC                                                     6-Aug-1997 09:37:32	VAX FORTRAN V5.9-173                Page   8
                                                                 6-Aug-1997 09:37:31	[DTMCONVERT.NTF2DTI.SPECIAL]SECTION.FOR;9   

00981   	ELSEIF (STRING(15:19).EQ.' ') THEN
00982   	   XYLEN=FIELD_WIDTH			! defaults to FIELD_WIDTH
00983   C
00984   	ELSE
00985   	   CALL SETAUX( %REF(STRING(15:19)), 5)
00986   	   IF (RDINT(XYLEN)) THEN
00987   	      CALL LSL_PUTMSG(NTF2DTI__SECHREC,'XYLEN',RECNUM)
00988   	      CALL LSL_ADDSTR(STRING(15:19))
00989   	      OK=.FALSE.
00990   	      GOTO 999
00991   	   ENDIF
00992   	ENDIF
00993   C
00994   C...........................................................................
00995   C Now the units that our planimetric data is in - XY_UNIT
00996   C
00997   	CALL SETAUX( %REF(STRING(20:20)), 1 )
00998   	IF (RDINT(XY_UNIT)) THEN
00999   	   CALL LSL_PUTMSG(NTF2DTI__SECHREC,'XY_UNIT',RECNUM)
01000   	   CALL LSL_ADDSTR(STRING(20:20))
01001   	   OK=.FALSE.
01002   	   GOTO 999
01003   	ENDIF
01004   C
01005   	IF (XY_UNIT.EQ.1) THEN		! - data is in degrees
01006   	   DTIPROJ_UNITS(1)=4		!   assumes X,Y orientation
01007   	   DTIPROJ_PROJECTION(1)=100	!   has to be geographic 
01008   C
01009   	ELSEIF (XY_UNIT.EQ.2) THEN	! - data is in metres 
01010   	   DTIPROJ_UNITS(1)=2		!   so metres it is
01011   	   DTIPROJ_PROJECTION(1)=101	!   assume UK national grid
01012   C
01013   	ELSEIF (XY_UNIT.EQ.3) THEN	! - data is in feet
01014   	   DTIPROJ_UNITS(1)=1		!   so feet it is
01015   	   DTIPROJ_PROJECTION(1)=101	!   assume UK national grid
01016   C
01017   	ELSE				! - data is not recognised
01018   	   CALL LSL_PUTMSG(NTF2DTI__SECHREC,'XY_UNIT',RECNUM)
01019   	   CALL LSL_ADDMSG(NTF2DTI__BADUNIT,XY_UNIT)
01020   	ENDIF
01021   C
01022   C...........................................................................
01023   C Read the multiplication factor for our data - XY_MULT
01024   C
01025   	IF (STRING(21:30).EQ.'0000000000' .AND. LEVEL.EQ.5) THEN
01026   	   NUM = 1000			 	! XY_MULT need not be given
01027   C
01028   	ELSEIF (STRING(21:30).EQ.' ') THEN	! XY_MULT need not be given
01029   	   NUM = 1000				! defaults to 1000
01030   C
01031   	ELSE
01032   	   CALL SETAUX(%REF(STRING(21:30)),10)
01033   	   IF (RDINT(NUM)) THEN
01034   	      CALL LSL_PUTMSG(NTF2DTI__SECHREC,'XY_MULT',RECNUM)
01035   	      CALL LSL_ADDSTR(STRING(21:30))
01036   	      OK=.FALSE.
01037   	      GOTO 999

READ_SECHREC                                                     6-Aug-1997 09:37:32	VAX FORTRAN V5.9-173                Page   9
                                                                 6-Aug-1997 09:37:31	[DTMCONVERT.NTF2DTI.SPECIAL]SECTION.FOR;9   

01038   	   ENDIF
01039   	ENDIF
01040   C
01041   C Check that the value is non-zero!
01042   C
01043   	IF (NUM.EQ.0) THEN
01044   	   CALL LSL_PUTMSG(NTF2DTI__NILXYMULT)
01045   	   NUM = 1000
01046   	ENDIF
01047   C
01048   C Convert it from 1/1000s to a real number
01049   C
01050   	XY_MULT = FLOAT(NUM) / 1000.0
01051   C
01052   c ----------------------------------------------------------------------
01053   C Data format changes from here on depending on whether the version 
01054   C is 1.0 or 1.1/2.0
01055   C
01056   	IF (INTVER.NE.110 .AND. INTVER.NE.200) THEN
01057   C
01058   C ----------------------------------------------------------------------
01059   C Version 1.0 from here:
01060   C
01061   C Field 31 = Z_UNIT
01062   C
01063   C Get multiplication factor Z_MULT 
01064   C
01065   	  IF (STRING(32:41).EQ.' ') THEN	! Z_MULT need not be given
01066   	    NUM = 1000				! defaults to 1000
01067   	  ELSE
01068   	    CALL SETAUX(%REF(STRING(32:41)),10)
01069   	    IF (RDINT(NUM)) THEN
01070   	      CALL LSL_PUTMSG(NTF2DTI__SECHREC,'Z_MULT',RECNUM)
01071   	      CALL LSL_ADDSTR(STRING(32:41))
01072   	      OK=.FALSE.
01073   	      GOTO 999
01074   	    ENDIF
01075   	  ENDIF
01076   C
01077   C Check that the value is non-zero!
01078   C
01079   	  IF (NUM.EQ.0) NUM = 1000
01080   C
01081   C NTF values are multiplied by Z_MULT/1000 for the DTI
01082   C Convert it from 1/1000s to a real number
01083   C
01084   	  Z_MULT = FLOAT(NUM) / 1000.0
01085   C
01086   C...........................................................................
01087   C None of the remaining data in this record is relevant for OS supplied data
01088   C
01089   	  IF (IS_OS) GOTO 200
01090   C
01091   C ....................................................................
01092   C The origin of OS supplied data is taken from the map reference in 
01093   C the grid record as it seems more realistic
01094   C

READ_SECHREC                                                     6-Aug-1997 09:37:32	VAX FORTRAN V5.9-173                Page  10
                                                                 6-Aug-1997 09:37:31	[DTMCONVERT.NTF2DTI.SPECIAL]SECTION.FOR;9   

01095   C Now for the origin in X - X_ORIG
01096   C
01097   	  X_ORIG=0.0					! Default
01098   	  CALL SETAUX(%REF(STRING(42:51)),10)
01099   	  IF (RDREAL(X_ORIG)) THEN
01100   	    CALL LSL_PUTMSG(NTF2DTI__SECHREC,'X_ORIG',RECNUM)
01101   	    CALL LSL_ADDSTR(STRING(42:51))
01102   	    OK=.FALSE.
01103   	    GOTO 999
01104   	  ENDIF
01105   C ....................................................................
01106   C and Y - Y_ORIG
01107   C
01108   	  Y_ORIG=0.0					! Default
01109   	  CALL SETAUX(%REF(STRING(52:61)),10)
01110   	  IF (RDREAL(Y_ORIG)) THEN
01111   	    CALL LSL_PUTMSG(NTF2DTI__SECHREC,'Y_ORIG',RECNUM)
01112   	    CALL LSL_ADDSTR(STRING(52:61))
01113   	    OK=.FALSE.
01114   	    GOTO 999
01115   	  ENDIF
01116   C ....................................................................
01117   C
01118   C Field 62:69 = Z_DATUM
01119   C
01120   C We may also have a source scale
01121   C
01122   	  IF (STRING(70:75).NE.' ') THEN
01123   	    CALL SETAUX(%REF(STRING(70:75)),6)
01124   	    OK = .NOT.RDLONG(SCALE)
01125   	    IF (.NOT.OK) THEN
01126   	      CALL LSL_PUTMSG(NTF2DTI__SECHREC,'SCALE',RECNUM)
01127   	      CALL LSL_ADDSTR(STRING(70:75))
01128   	      GOTO 999
01129   	    ENDIF
01130   	  ENDIF
01131   C
01132   C End of ver 1.0
01133   C
01134   C ----------------------------------------------------------------------
01135   C
01136   	ELSE				! Read Version 1.1 or 2.0
01137   C
01138   C ----------------------------------------------------------------------
01139   C Version 1.1 or 2.0 from here:
01140   C
01141   C Field 31:35 = Z_LEN
01142   C
01143   C Field 36:36 = Z_UNIT
01144   C
01145   C Get multiplication factor Z_MULT 
01146   C
01147   	  IF (STRING(37:46).EQ.'0000000000' .AND. LEVEL.EQ.5) THEN
01148   	    NUM = 1000				! Z_MULT need not be given
01149   C
01150   	  ELSEIF (STRING(37:46).EQ.' ') THEN	! Z_MULT need not be given
01151   	    NUM = 1000				! defaults to 1000

READ_SECHREC                                                     6-Aug-1997 09:37:32	VAX FORTRAN V5.9-173                Page  11
                                                                 6-Aug-1997 09:37:31	[DTMCONVERT.NTF2DTI.SPECIAL]SECTION.FOR;9   

01152   C
01153   	  ELSE
01154   	    CALL SETAUX(%REF(STRING(37:46)),10)
01155   	    IF (RDINT(NUM)) THEN
01156   	      CALL LSL_PUTMSG(NTF2DTI__SECHREC,'Z_MULT',RECNUM)
01157   	      CALL LSL_ADDSTR(STRING(37:46))
01158   	      OK=.FALSE.
01159   	      GOTO 999
01160   	    ENDIF
01161   	  ENDIF
01162   C
01163   C Check that the value is non-zero!
01164   C
01165   	  IF (NUM.EQ.0) NUM = 1000
01166   C
01167   C NTF values are multiplied by Z_MULT/1000 for the DTI
01168   C Convert it from 1/1000s to a real number
01169   C
01170   	  Z_MULT = FLOAT(NUM) / 1000.0
01171   C
01172   C...........................................................................
01173   C None of the remaining data in this record is relevant for OS supplied data
01174   C
01175   	  IF (IS_OS) GOTO 200
01176   C
01177   C ....................................................................
01178   C The origin of OS supplied data is taken from the map reference in 
01179   C the grid record as it seems more realistic
01180   C
01181   C Now for the origin in X - X_ORIG
01182   C
01183   	  X_ORIG=0.0					! Default
01184   	  CALL SETAUX(%REF(STRING(47:56)),10)
01185   	  IF (RDREAL(X_ORIG)) THEN
01186   	    CALL LSL_PUTMSG(NTF2DTI__SECHREC,'X_ORIG',RECNUM)
01187   	    CALL LSL_ADDSTR(STRING(47:56))
01188   	    OK=.FALSE.
01189   	    GOTO 999
01190   	  ENDIF
01191   C ....................................................................
01192   C and Y - Y_ORIG
01193   C
01194   	  Y_ORIG=0.0					! Default
01195   	  CALL SETAUX(%REF(STRING(57:66)),10)
01196   	  IF (RDREAL(Y_ORIG)) THEN
01197   	    CALL LSL_PUTMSG(NTF2DTI__SECHREC,'Y_ORIG',RECNUM)
01198   	    CALL LSL_ADDSTR(STRING(57:66))
01199   	    OK=.FALSE.
01200   	    GOTO 999
01201   	  ENDIF
01202   C ....................................................................
01203   C
01204   C Field 67:74 = Z_DATUM			! ver 1.1
01205   C Field 67:76 = Z_DATUM			! ver 2.0
01206   C
01207   C Version 1.1 or 2.0 specific no longer
01208   C

READ_SECHREC                                                     6-Aug-1997 09:37:32	VAX FORTRAN V5.9-173                Page  12
                                                                 6-Aug-1997 09:37:31	[DTMCONVERT.NTF2DTI.SPECIAL]SECTION.FOR;9   

01209   	ENDIF
01210   C
01211   C All versions - rejoin code to get record continuation
01212   C
01213   C ...................................................................
01214   C Set up more of the map descriptor (note that the projection was set
01215   C when we set the XY units)
01216   C
01217   	DTIPROJ_SPHEROID(1) = 9		! Assume the spheroid is Airy
01218   C
01219   C ...................................................................
01220   C the next record is a mandatory continuation - check that we do indeed
01221   C have a continuation mark, and then read it in
01222   C
01223   	IF (.NOT.FIXED) LENGTH = LENGTH - 1
01224   C
01225   	IF (STRING(LENGTH:LENGTH).NE.'1') THEN
01226   	   CALL LSL_PUTMSG(NTF2DTI__SHORTSECH)
01227   	   OK = .FALSE.
01228   	   GOTO 999
01229   	ENDIF
01230   C
01231   	OK = READ_CONTINUE('SECHREC '//STRING(3:12))
01232   	IF (.NOT.OK) GOTO 999
01233   C
01234   C ..................................................................
01235   C Get the X & Y max and min values for our first approx. to the extent
01236   C
01237   	CALL SETAUX(%REF(STRING(3:12)),10)	! XMIN
01238   	IF (RDLONG(XMIN)) THEN
01239   	   CALL LSL_PUTMSG(NTF2DTI__SECHREC,'XMIN',RECNUM)
01240   	   CALL LSL_ADDSTR(STRING(3:12))
01241   	   OK=.FALSE.
01242   	   GOTO 999
01243   	ENDIF
01244   C
01245   	CALL SETAUX(%REF(STRING(13:22)),10)	! YMIN
01246   	IF (RDLONG(YMIN)) THEN
01247   	   CALL LSL_PUTMSG(NTF2DTI__SECHREC,'YMIN',RECNUM)
01248   	   CALL LSL_ADDSTR(STRING(13:22))
01249   	   OK=.FALSE.
01250   	   GOTO 999
01251   	ENDIF
01252   C
01253   	CALL SETAUX(%REF(STRING(23:32)),10)	! XMAX
01254   	IF (RDLONG(XMAX)) THEN
01255   	   CALL LSL_PUTMSG(NTF2DTI__SECHREC,'XMAX',RECNUM)
01256   	   CALL LSL_ADDSTR(STRING(23:32))
01257   	   OK=.FALSE.
01258   	   GOTO 999
01259   	ENDIF
01260   C
01261   	CALL SETAUX(%REF(STRING(33:42)),10)	! YMAX
01262   	IF (RDLONG(YMAX)) THEN
01263   	   CALL LSL_PUTMSG(NTF2DTI__SECHREC,'YMAX',RECNUM)
01264   	   CALL LSL_ADDSTR(STRING(33:42))
01265   	   OK=.FALSE.

READ_SECHREC                                                     6-Aug-1997 09:37:32	VAX FORTRAN V5.9-173                Page  13
                                                                 6-Aug-1997 09:37:31	[DTMCONVERT.NTF2DTI.SPECIAL]SECTION.FOR;9   

01266   	   GOTO 999
01267   	ENDIF
01268   C
01269   C ...................................................................
01270   C Ignore the rest of the record
01271   C
01272   200	CONTINUE
01273   C
01274   	IF (.NOT.FIXED) LENGTH = LENGTH - 1	! miss EOR marker
01275   C
01276   	IF (STRING(LENGTH:LENGTH).EQ.'1') THEN
01277   	   OK = READ_CONTINUE('SECHREC')
01278   	   IF (.NOT.OK) THEN
01279   	      GOTO 999
01280   	   ELSE
01281   	      GOTO 200
01282   	   ENDIF
01283   	ENDIF
01284   C
01285   C ...................................................................
01286   C If we're producing a log file, write pertinent information to it
01287   C
01288   	IF (IS_OS) GOTO 999	! If OS then we don't have/need the info
01289   C
01290   	IF (OUTPUT) THEN
01291   	   CALL FLWSTR('Section header record:')
01292   	   CALL FLWRTF('	Section reference  "%S"',SECT_REF(1:10))
01293   	   CALL FLWRTF('	Output to DTI file "%S"',DTIFILE(1:DTILEN))
01294   C
01295   	   IF (XY_UNIT.EQ.1) THEN
01296   	      UNITS = 'degrees'
01297   	      UNLEN = 7
01298   	   ELSEIF (XY_UNIT.EQ.2) THEN
01299   	      UNITS = 'metres'
01300   	      UNLEN = 6
01301   	   ELSEIF (XY_UNIT.EQ.3) THEN
01302   	      UNITS = 'feet'
01303   	      UNLEN = 4
01304   	   ELSE
01305   	      UNITS = 'illegal'
01306   	      UNLEN = 7
01307   	   ENDIF
01308   C
01309   	   CALL FLWRTF('	XYlen = %I2, XY_unit = %I1 (%S)',
01310        &				XYLEN,	     XY_UNIT, 	UNITS(1:UNLEN))
01311   C
01312   	   CALL FLWRTF('	XY multiplication = %F',XY_MULT)
01313   C
01314   	   CALL FLWRTF('	XY origin = %F, %F',
01315        &				X_ORIG, Y_ORIG)
01316   C
01317   	   CALL FLWRTF('	Xmin = %N, Ymin = %N',
01318        &				XMIN,	   YMIN)
01319   	   CALL FLWRTF('	Xmax = %N, Ymax = %N',
01320        &				XMAX,	   YMAX)
01321   	   IF (SCALE.NE.0) THEN
01322   	      CALL FLWRTF('	Scale = 1:%N	(this is an extension of NTF)',

READ_SECHREC                                                     6-Aug-1997 09:37:32	VAX FORTRAN V5.9-173                Page  14
                                                                 6-Aug-1997 09:37:31	[DTMCONVERT.NTF2DTI.SPECIAL]SECTION.FOR;9   

01323        &				SCALE)
01324   	   ENDIF
01325   	ENDIF
01326   C
01327   C ...................................................................
01328   C rejoin errors
01329   C
01330   999	READ_SECHREC=OK
01331   C
01332   	RETURN
01333   	END




PROGRAM SECTIONS

    Name				 Bytes   Attributes

  0 $CODE                                 1960   PIC CON REL LCL   SHR   EXE   RD NOWRT QUAD
  1 $PDATA                                 484   PIC CON REL LCL   SHR NOEXE   RD NOWRT QUAD
  2 $LOCAL                                1356   PIC CON REL LCL NOSHR NOEXE   RD   WRT QUAD
  3 LSL_FNAM_STR                           210   PIC OVR REL GBL   SHR NOEXE   RD   WRT QUAD
  4 LSL_FNAM_LOG                            24   PIC OVR REL GBL   SHR NOEXE   RD   WRT QUAD
  5 LSL_FNAM_LEN                            24   PIC OVR REL GBL   SHR NOEXE   RD   WRT QUAD
  6 FILE_INT                                16   PIC OVR REL GBL   SHR NOEXE   RD   WRT QUAD
  7 FILE_CHR                               868   PIC OVR REL GBL   SHR NOEXE   RD   WRT QUAD
  8 COMMANDS                                40   PIC OVR REL GBL   SHR NOEXE   RD   WRT QUAD
  9 RECORD1                                 86   PIC OVR REL GBL   SHR NOEXE   RD   WRT QUAD
 10 RECORD2                                  9   PIC OVR REL GBL   SHR NOEXE   RD   WRT QUAD
 11 NTFDATA                                 16   PIC OVR REL GBL   SHR NOEXE   RD   WRT QUAD
 12 DTIDATA                                128   PIC OVR REL GBL   SHR NOEXE   RD   WRT QUAD
 13 NTF2DTI                                 16   PIC OVR REL GBL   SHR NOEXE   RD   WRT QUAD
 14 DTIHDR                                2520   PIC OVR REL GBL   SHR NOEXE   RD   WRT QUAD
 15 DTIPROJ                               1584   PIC OVR REL GBL   SHR NOEXE   RD   WRT QUAD

    Total Space Allocated                 9341


ENTRY POINTS

    Address  Type  Name          

  0-00000000  L*4  READ_SECHREC  


VARIABLES

    Address  Type  Name                                               Address  Type  Name                            

 12-0000005C  I*4  COL_END                                         12-00000068  I*4  COL_INV                         
 12-00000058  I*4  COL_START                                       13-00000004  I*4  COUNT_SECTION                   
  8-00000018  L*4  DEDUCE_FILE                                      7-000000D9  CHAR DEVICE                          
  6-00000004  I*4  DEVLEN                                           7-000001B2  CHAR DTIFILE                         
  6-00000008  I*4  DTILEN                                           8-00000024  L*4  DTIOPEN                         
 10-00000008  CHAR EOR_MARKER                                      12-00000078  I*4  FIELD_WIDTH                     
 11-0000000C  L*4  FIXED                                            4-00000004  L*4  HAD_DEV                         

READ_SECHREC                                                     6-Aug-1997 09:37:32	VAX FORTRAN V5.9-173                Page  15
01                                                               6-Aug-1997 09:37:31	[DTMCONVERT.NTF2DTI.SPECIAL]SECTION.FOR;9   

  4-00000008  L*4  HAD_DIR                                          4-00000010  L*4  HAD_EXT                         
  4-0000000C  L*4  HAD_NAM                                          4-00000000  L*4  HAD_NOD                         
  4-00000014  L*4  HAD_VER                                          2-0000004C  I*4  I                               
 12-00000074  I*4  INTERPRET                                       11-00000004  I*4  INTVER                          
  8-0000001C  L*4  IS_MAGTAPE                                       8-00000010  L*4  IS_OS                           
  8-00000020  L*4  IS_TERM                                         10-00000004  I*4  LENGTH                          
  5-00000004  I*4  LEN_DEV                                          5-00000008  I*4  LEN_DIR                         
  5-00000010  I*4  LEN_EXT                                          5-0000000C  I*4  LEN_NAM                         
  5-00000000  I*4  LEN_NOD                                          5-00000014  I*4  LEN_VER                         
 11-00000000  I*4  LEVEL                                            8-00000000  L*4  LOG                             
  7-00000000  CHAR LOGFILE                                          6-00000000  I*4  LOGLEN                          
 13-00000008  L*4  MULTIVOLUME                                      9-00000054  CHAR NTF$_REC_DESCR                  
  7-0000028B  CHAR NTFFILE                                          6-0000000C  I*4  NTFLEN                          
  2-00000048  I*4  NUM                                             12-0000007C  I*4  NUM_FIELD                       
 12-0000002C  I*4  N_COLUMNS                                       12-00000028  I*4  N_ROWS                          
  2-00000044  I*4  OK                                              12-00000070  I*4  ORDER                           
  8-00000004  L*4  OUTPUT                                           2-00000040  L*4  PARFILN                         
  8-00000008  L*4  PROJECT                                         10-00000000  I*4  RECNUM                          
  2-00000054  I*4  RETVAL                                           8-00000014  L*4  REWIND                          
 12-00000064  I*4  ROW_END                                         12-0000006C  I*4  ROW_INV                         
 12-00000060  I*4  ROW_START                                        2-00000050  I*4  SCALE                           
  8-0000000C  L*4  SECT                                            13-00000000  I*4  SECTION                         
  2-00000028  CHAR SECT_REF                                         9-00000000  CHAR STRING                          
  3-00000006  CHAR STR_DEV                                          3-0000001A  CHAR STR_DIR                         
  3-000000A5  CHAR STR_EXT                                          9-00000050  I*4  STR_LEN                         
  3-0000007E  CHAR STR_NAM                                          3-00000000  CHAR STR_NOD                         
  3-000000CC  CHAR STR_VER                                          2-00000032  CHAR UNITS                           
  2-00000058  I*4  UNLEN                                           11-00000008  R*4  VERSION                         
 13-0000000C  I*4  VOLCOUNT                                        12-00000014  I*4  XMAX                            
 12-00000010  I*4  XMIN                                            12-00000000  I*4  XYLEN                           
 12-00000008  R*4  XY_MULT                                         12-00000004  I*4  XY_UNIT                         
 12-00000030  R*4  X_ORIG                                          12-00000020  I*4  X_SAMP                          
 12-0000001C  I*4  YMAX                                            12-00000018  I*4  YMIN                            
 12-00000034  R*4  Y_ORIG                                          12-00000024  I*4  Y_SAMP                          
 12-0000000C  R*4  Z_MULT                                         


ARRAYS

    Address  Type  Name                                  Bytes  Dimensions

 14-00000318  I*4  DATA_OFFSET                              36  (9)
 14-00000384  I*4  DATA_TYPE                                36  (9)
 14-0000084C  L*4  DTILUN_INUSE                             36  (9)
 15-00000024  R*8  DTIPROJ_ORIGIN                          144  (2, 9)
 15-00000144  I*4  DTIPROJ_PROJECTION                       36  (9)
 15-000001F8  R*8  DTIPROJ_PROJ_PARAMS                    1080  (15, 9)
 15-00000000  I*4  DTIPROJ_RECORD_OFFSET                    36  (9)
 15-000000B4  R*4  DTIPROJ_SAMPLE                           72  (2, 9)
 15-00000120  I*4  DTIPROJ_SPHEROID                         36  (9)
 15-000000FC  I*4  DTIPROJ_UNITS                            36  (9)
 15-00000168  R*8  DTIPROJ_USER_SPHEROID                   144  (2, 9)
 14-000003A8  CHAR DTI_NAME                               1152  (9)
 14-00000828  I*4  DTI_NAME_LENGTH                          36  (9)
 14-00000990  I*4  DTI_ORDER_CORNER                         36  (9)
 14-000009B4  I*4  DTI_ORDER_DIRECTION                      36  (9)
 14-00000900  I*4  DTI_WINDOW_NEX                           36  (9)

READ_SECHREC                                                     6-Aug-1997 09:37:32	VAX FORTRAN V5.9-173                Page  16
01                                                               6-Aug-1997 09:37:31	[DTMCONVERT.NTF2DTI.SPECIAL]SECTION.FOR;9   

 14-00000924  I*4  DTI_WINDOW_NEY                           36  (9)
 14-000008B8  I*4  DTI_WINDOW_SWX                           36  (9)
 14-000008DC  I*4  DTI_WINDOW_SWY                           36  (9)
 14-0000096C  L*4  HAD_PROJ_RECORD                          36  (9)
 14-00000360  I*4  HEADER_TYPE                              36  (9)
 14-00000288  I*4  LATINT                                   36  (9)
 14-00000240  I*4  LATORI                                   36  (9)
 14-00000120  I*4  LATREC                                  144  (4, 9)
 14-000002AC  I*4  LONINT                                   36  (9)
 14-00000264  I*4  LONORI                                   36  (9)
 14-000001B0  I*4  LONREC                                  144  (4, 9)
 14-000000B4  I*4  MAX_LVALUE                               36  (9)
 14-0000006C  R*4  MAX_RVALUE                               36  (9)
 14-0000034E  I*2  MAX_WVALUE                               18  (9)
 14-00000090  I*4  MIN_LVALUE                               36  (9)
 14-00000048  R*4  MIN_RVALUE                               36  (9)
 14-0000033C  I*2  MIN_WVALUE                               18  (9)
  2-00000012  CHAR NTF_RECORDS                              22  (11)
 14-00000948  L*4  READ_ONLY                                36  (9)
 14-000002D0  I*4  SEC_ADDR                                 36  (9)
 14-000002F4  I*4  SEC_SIZE                                 36  (9)
  2-0000000C  CHAR STD_ATTR_CODES                            6  (3)
  2-00000000  I*4  STD_ATTR_LEN                             12  (3)
 12-00000038  R*4  X_COORD                                  16  (4)
 14-000000D8  I*4  X_EXTENT                                 36  (9)
 14-00000000  R*4  X_GRID                                   36  (9)
 14-00000870  R*4  X_OFFSET                                 36  (9)
 12-00000048  R*4  Y_COORD                                  16  (4)
 14-000000FC  I*4  Y_EXTENT                                 36  (9)
 14-00000024  R*4  Y_GRID                                   36  (9)
 14-00000894  R*4  Y_OFFSET                                 36  (9)




LABELS

    Address   Label       Address   Label   

  0-00000682  200       0-0000079E  999     


FUNCTIONS AND SUBROUTINES REFERENCED

  Type  Name            Type  Name            Type  Name            Type  Name            Type  Name            Type  Name          

   L*4  CHECK_FNAME      R*4  FLOAT                 FLWRTF                FLWSTR                LSL_ADDMSG            LSL_ADDSTR    
        LSL_PUTMSG       L*4  RDINT            L*4  RDLONG           L*4  RDREAL           L*4  READSTR          L*4  READ_CONTINUE 
        SETAUX                WRITEF        

                                                                 6-Aug-1997 09:37:32	VAX FORTRAN V5.9-173                Page  17
                                                                 6-Aug-1997 09:37:31	[DTMCONVERT.NTF2DTI.SPECIAL]SECTION.FOR;9   

00001   C
00002    
00003   	LOGICAL FUNCTION READ_SECQUAL
00004   C
00005   C
00006   C Copyright (C) Laser-Scan Ltd, Cambridge, England
00007   C
00008   C Author TJ Ibbs, 5 October 1987
00009   C
00010   C Read the section quality records - for information only
00011   C
00012   	IMPLICIT NONE
00013   C
00014   C Common files
00015   	INCLUDE	'HERE:COMMANDS.CMN'
00034   	INCLUDE	'HERE:NTFDATA.CMN'
00095   	INCLUDE	'HERE:RECORD.CMN'
00118   C
00119   C Functions
00120   	LOGICAL		READ_CONTINUE
00121   C
00122   C Workspace
00123   	LOGICAL		OK
00124   	INTEGER		IERR
00125   C
00126   	OK = .TRUE.
00127   C
00128   C At the moment, the record(s) are just reflected to the log file,
00129   C less record descriptor and continuation flag
00130   C
00131   	IF (.NOT.FIXED) LENGTH = LENGTH - 1	! miss EOR marker
00132   C
00133   	IF (OUTPUT) THEN
00134   	   CALL FLWSTR('Section quality data:')
00135   	   IF (LENGTH.GT.3) CALL FLWSTR(STRING(3:LENGTH-1))
00136   	ENDIF
00137   C
00138   100	CONTINUE
00139   C
00140   	IF (.NOT.FIXED) LENGTH = LENGTH - 1	! miss EOR marker
00141   C
00142   	IF (STRING(LENGTH:LENGTH).EQ.'1') THEN
00143   	   OK = READ_CONTINUE('SECQUAL')
00144   	   IF (.NOT.OK) GOTO 999
00145   C
00146   	   IF (OUTPUT.AND.LENGTH.GT.3)
00147        &			 CALL FLWSTR(STRING(3:LENGTH-1))
00148   	   GOTO 100
00149   	ENDIF
00150   C
00151   999	IF (OUTPUT) CALL FLWSTR		! output a blank line
00152   C
00153   	READ_SECQUAL = OK
00154   C
00155   	RETURN
00156   	END

READ_SECQUAL                                                     6-Aug-1997 09:37:32	VAX FORTRAN V5.9-173                Page  18
01                                                               6-Aug-1997 09:37:31	[DTMCONVERT.NTF2DTI.SPECIAL]SECTION.FOR;9   

PROGRAM SECTIONS

    Name				 Bytes   Attributes

  0 $CODE                                  191   PIC CON REL LCL   SHR   EXE   RD NOWRT QUAD
  1 $PDATA                                  30   PIC CON REL LCL   SHR NOEXE   RD NOWRT QUAD
  2 $LOCAL                                  96   PIC CON REL LCL NOSHR NOEXE   RD   WRT QUAD
  3 COMMANDS                                40   PIC OVR REL GBL   SHR NOEXE   RD   WRT QUAD
  4 NTFDATA                                 16   PIC OVR REL GBL   SHR NOEXE   RD   WRT QUAD
  5 DTIDATA                                128   PIC OVR REL GBL   SHR NOEXE   RD   WRT QUAD
  6 RECORD1                                 86   PIC OVR REL GBL   SHR NOEXE   RD   WRT QUAD
  7 RECORD2                                  9   PIC OVR REL GBL   SHR NOEXE   RD   WRT QUAD

    Total Space Allocated                  596


ENTRY POINTS

    Address  Type  Name          

  0-00000000  L*4  READ_SECQUAL  


VARIABLES

    Address  Type  Name                                               Address  Type  Name                            

  5-0000005C  I*4  COL_END                                          5-00000068  I*4  COL_INV                         
  5-00000058  I*4  COL_START                                        3-00000018  L*4  DEDUCE_FILE                     
  3-00000024  L*4  DTIOPEN                                          7-00000008  CHAR EOR_MARKER                      
  5-00000078  I*4  FIELD_WIDTH                                      4-0000000C  L*4  FIXED                           
  2-0000001C  I*4  IERR                                             5-00000074  I*4  INTERPRET                       
  4-00000004  I*4  INTVER                                           3-0000001C  L*4  IS_MAGTAPE                      
  3-00000010  L*4  IS_OS                                            3-00000020  L*4  IS_TERM                         
  7-00000004  I*4  LENGTH                                           4-00000000  I*4  LEVEL                           
  3-00000000  L*4  LOG                                              6-00000054  CHAR NTF$_REC_DESCR                  
  5-0000007C  I*4  NUM_FIELD                                        5-0000002C  I*4  N_COLUMNS                       
  5-00000028  I*4  N_ROWS                                           2-00000018  L*4  OK                              
  5-00000070  I*4  ORDER                                            3-00000004  L*4  OUTPUT                          
  3-00000008  L*4  PROJECT                                          7-00000000  I*4  RECNUM                          
  3-00000014  L*4  REWIND                                           5-00000064  I*4  ROW_END                         
  5-0000006C  I*4  ROW_INV                                          5-00000060  I*4  ROW_START                       
  3-0000000C  L*4  SECT                                             6-00000000  CHAR STRING                          
  6-00000050  I*4  STR_LEN                                          4-00000008  R*4  VERSION                         
  5-00000014  I*4  XMAX                                             5-00000010  I*4  XMIN                            
  5-00000000  I*4  XYLEN                                            5-00000008  R*4  XY_MULT                         
  5-00000004  I*4  XY_UNIT                                          5-00000030  R*4  X_ORIG                          
  5-00000020  I*4  X_SAMP                                           5-0000001C  I*4  YMAX                            
  5-00000018  I*4  YMIN                                             5-00000034  R*4  Y_ORIG                          
  5-00000024  I*4  Y_SAMP                                           5-0000000C  R*4  Z_MULT                          

READ_SECQUAL                                                     6-Aug-1997 09:37:32	VAX FORTRAN V5.9-173                Page  19
01                                                               6-Aug-1997 09:37:31	[DTMCONVERT.NTF2DTI.SPECIAL]SECTION.FOR;9   

ARRAYS

    Address  Type  Name                                  Bytes  Dimensions

  2-0000000C  CHAR STD_ATTR_CODES                            6  (3)
  2-00000000  I*4  STD_ATTR_LEN                             12  (3)
  5-00000038  R*4  X_COORD                                  16  (4)
  5-00000048  R*4  Y_COORD                                  16  (4)




LABELS

    Address   Label       Address   Label   

  0-0000004D  100       0-000000A8  999     


FUNCTIONS AND SUBROUTINES REFERENCED

  Type  Name            Type  Name          

        FLWSTR           L*4  READ_CONTINUE 

                                                                 6-Aug-1997 09:37:32	VAX FORTRAN V5.9-173                Page  20
                                                                 6-Aug-1997 09:37:31	[DTMCONVERT.NTF2DTI.SPECIAL]SECTION.FOR;9   

00001   C


COMMAND QUALIFIERS

  FORTRAN/EXTEND/DEBUG/NOOPT/LIST SECTION

  /CHECK=(NOBOUNDS,OVERFLOW,NOUNDERFLOW)
  /DEBUG=(SYMBOLS,TRACEBACK)
  /DESIGN=(NOCOMMENTS,NOPLACEHOLDERS)
  /SHOW=(NODICTIONARY,NOINCLUDE,MAP,NOPREPROCESSOR,SINGLE)
  /STANDARD=(NOSEMANTIC,NOSOURCE_FORM,NOSYNTAX)
  /WARNINGS=(NODECLARATIONS,GENERAL,NOULTRIX,NOVAXELN)
  /CONTINUATIONS=19  /NOCROSS_REFERENCE  /NOD_LINES  /EXTEND_SOURCE
  /F77  /NOG_FLOATING  /I4  /NOMACHINE_CODE  /NOOPTIMIZE  /NOPARALLEL
  /NOANALYSIS_DATA
  /NODIAGNOSTICS
  /LIST=LSL$SOURCE_ROOT:[DTMCONVERT.NTF2DTI.SPECIAL]SECTION.LIS;9                                           
  /OBJECT=LSL$SOURCE_ROOT:[DTMCONVERT.NTF2DTI.SPECIAL]SECTION.OBJ;17                                          


COMPILATION STATISTICS

  Run Time:           2.40 seconds
  Elapsed Time:       3.37 seconds
  Page Faults:        951
  Dynamic Memory:     788 pages
