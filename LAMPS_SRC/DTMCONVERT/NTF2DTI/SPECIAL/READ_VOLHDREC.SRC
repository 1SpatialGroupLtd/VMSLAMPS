C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-07-30 12:47:52.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION READ_VOLHDREC
C
***     MODULE READ_VOLHDREC
***     IDENT  30JL93
C
C Copyright Laser-Scan Ltd, Cambridge, England
C
C Author					IM	18-Aug-1987
C
C Modified					TJI	 5-Oct-1987
C Modified					IM      07-Apr-1988
C
C MOD1119	For Variable length records	JB      19-May-1992
C		at version 1.1 level 4, EOR = <CR>
C MOS1242	For Variable length records	JB      21-Jun-1993
C		at version 2.0 level 5, EOR = '%'
C
C Reads the volume header record
C
	IMPLICIT NONE
C
C Messages:
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE 'HERE:NTF2DTIMSG.PAR'
C
C Common files:
	INCLUDE 'HERE:COMMANDS.CMN'
	INCLUDE	'HERE:NTFDATA.CMN'	! for LEVEL,VERSION,FIXED
	INCLUDE	'HERE:RECORD.CMN'	! for STRING
C
C Functions:
	LOGICAL		RDCH		! read a char
	LOGICAL		RDINT		! read an integer
	LOGICAL		READ_CONTINUE	! read a continuation record
C
C Workspace:
	INTEGER		OK		! Success flag
	INTEGER		IERR		! Failure return
	BYTE		CH
C
C ...................................................................
C Assume variable length version 1.1 level 4 NTF data (OS set)
C
	OK	   = .TRUE. 		! assume OK
	EOR_MARKER = CHAR(13)		! assume <CR>, V1.1
	FIXED 	   = .FALSE.		! assume variable records
C
C ...................................................................
C - firstly read the level of the data
C
	CALL SETAUX(%REF(STRING(57:57)),1)
	IF (RDINT(LEVEL)) THEN
	   CALL LSL_PUTMSG(NTF2DTI__VOLHDREC,'LEVEL')
	   CALL LSL_ADDSTR(STRING(57:57))
	   OK=.FALSE.
	   GOTO 999
	ENDIF
C
C .....................................................................
C Is it a level we can cope with (ie. 0 or 4 for V1.0, level 4 for V1.1
C or level 5 for V2.0) ?
C
	IF (LEVEL.NE.0 .AND. LEVEL.NE.4 .AND. LEVEL.NE.5) THEN	
	   CALL LSL_PUTMSG(NTF2DTI__WRONGLEVEL,LEVEL)
	   CALL WRITEF('-NTF2DTI-I-MISC, attempting to continue regardless')
	ENDIF
C
C Level 4 must be OS specific
C
	IF (LEVEL.EQ.4) THEN			! ver 1.0, 1.1
	  IF (.NOT.IS_OS) THEN
	    CALL LSL_PUTMSG(NTF2DTI__NOTOS)
	    OK = .FALSE.
	    GOTO 999
	  ENDIF
C
	ELSEIF (LEVEL.EQ.5) THEN		! ver 2.0
	   IS_OS = .FALSE.			! turn off OS specific
	ENDIF
C
C ........................................................................
C	Default the field width to 10. At level 0 this is the only value we
C	can use. At level 4 or 5 this value may be redefined in a DATADESC 
C
	FIELD_WIDTH = 10				! default to 10
C
C ....................................................................
C - next the version number of this NTF (as a real number)
C
	CALL SETAUX(%REF(STRING(58:61)),4)
	IF (RDINT(INTVER)) THEN
	   CALL LSL_PUTMSG(NTF2DTI__VOLHDREC,'NTFVER')
	   CALL LSL_ADDSTR(STRING(58:61))
	   OK=.FALSE.
	   GOTO 999
	ENDIF
C
	IF (INTVER.EQ.200) THEN
	   EOR_MARKER 	= '%'
	   FIXED 	= .FALSE.
C
	ELSEIF (INTVER.EQ.110) THEN
	   EOR_MARKER 	= CHAR(13)
	   FIXED 	= .FALSE.
C
	ELSEIF (INTVER.EQ.100) THEN
	   EOR_MARKER 	= CHAR(13)
	   FIXED 	= .TRUE.
	ENDIF
C
C Translate that into the real number we expect - ie NN.nn
C
	VERSION = FLOAT(INTVER) / 100.0
C
C can we understand it? - try to decode it anyway
C
	IF (VERSION.GT.2.0) THEN
	   CALL LSL_PUTMSG(NTF2DTI__WRONGVERSION,VERSION)
	   CALL WRITEF('-NTF2DTI-W-MISC, '//
     &		'support for RASTER only exists at version 1.0, 1.1 or 2.0')
	   OK = .FALSE.
	   GOTO 999
	ENDIF
C
C - read the format of the data: variable or fixed
C
	CALL SETAUX(%REF(STRING(62:62)),1)
	IF (RDCH(CH)) THEN
	   CALL LSL_PUTMSG(NTF2DTI__VOLHDREC,'FORMAT')
	   CALL LSL_ADDSTR(STRING(62:62))
	   OK=.FALSE.
	   GOTO 999
	ENDIF
C
	IF (CH.EQ.'V') THEN
	   FIXED = .FALSE.
C
	ELSEIF (CH.EQ.'F') THEN
	   FIXED = .TRUE.
C
	ELSEIF (CH.EQ.' ') THEN
	   IF (INTVER.EQ.100) FIXED = .TRUE.
	   IF (INTVER.EQ.110) FIXED = .FALSE.
	   IF (INTVER.EQ.200) FIXED = .FALSE.
	ENDIF
C
C ..................................................................
C Announce the level, version and format we are reading
C
	IF (LOG) THEN
	   CALL LSL_PUTMSG(NTF2DTI__NTFDATA,LEVEL,VERSION)
	   IF (FIXED) THEN
	      CALL LSL_PUTMSG(NTF2DTI__NTFFORMAT, 'FIXED')
	   ELSE
	      CALL LSL_PUTMSG(NTF2DTI__NTFFORMAT, 'VARIABLE')
	   ENDIF
	ENDIF
C
C ..................................................................
C If we're producing a log file, write pertinent information to it
C
	IF (OUTPUT) THEN
	   CALL FLWSTR('Volume header record:')
	   CALL FLWRTF('	Data sent by     "%S"',STRING(3:22))
	   CALL FLWRTF('	Data sent to     "%S"',STRING(23:42))
	   CALL FLWRTF('	Date of transfer "%S" (ie %S/%S/%S)',
     &			STRING(43:50),
     &			STRING(49:50),STRING(47:48),STRING(43:46))
	   CALL FLWRTF('	NTF level         %I2',LEVEL)
	   CALL FLWRTF('	NTF version       %F5.2',VERSION)
	ENDIF
C
C ...................................................................
C The OS output an index after a VOLHDREC. We must thus check
C for a continuation mark at the end of this record, and ignore any
C continuation records. If we find a continuation, and haven't been told
C to expect it by the user, complain
C
	IF (.NOT.FIXED) LENGTH = LENGTH - 1
C
	IF (STRING(LENGTH:LENGTH).EQ.'1') THEN
	   IF (.NOT.IS_OS) CALL LSL_PUTMSG(NTF2DTI__VOLHDCONT)
C
200	   OK = READ_CONTINUE('VOLHDREC (index)')
	   IF (.NOT.OK) GOTO 999
C
	   IF (.NOT.FIXED) LENGTH = LENGTH - 1		! miss EOR marker
	   IF (STRING(LENGTH:LENGTH).EQ.'1') GOTO 200
	ENDIF
C
C ...................................................................
C Join errors
C
999	READ_VOLHDREC=OK
C
	RETURN
	END
C
