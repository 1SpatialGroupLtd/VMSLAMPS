
                                                                 6-Aug-1997 09:37:09	VAX FORTRAN V5.9-173                Page   1
                                                                 6-Aug-1997 09:37:08	[DTMCONVERT.NTF2DTI.SPECIAL]CMDLIN.FOR;11   

00001   	LOGICAL FUNCTION CMDLIN
00002   C
00003   C
00004   C Copyright Laser-Scan Ltd, Cambridge, England
00005   C
00006   C Author	IM	 6-Apr-1988
00007   C
00008   C Reads and decodes the command line
00009   C Returns TRUE for successful completion, otherwise FALSE
00010   C
00011   CMOD	 For use with LSLA type DTI files.			DRC 23-Aug-1988 
00012   CMOD	 Commented out lines which give error if not a mag-tape	SG  15-Aug-1991
00013   CMOD1049 Add info messages on which section(s) to copy		JB  21-Oct-1991
00014   CMOD1213 Use LSL$DTI: for output files				JB  31-Mar-1993
00015   C
00016   	IMPLICIT NONE
00017   C
00018   C Messages:
00019   	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'
00292   	INCLUDE	'HERE:NTF2DTIMSG.PAR'
00397   C
00398   C Commons:
00399   	INCLUDE		'LSL$CMNDTI:DTIHDR.CMN'
00514   	INCLUDE 	'LSL$CMNLSL:CLD.CMN'
00562   	INCLUDE		'LSL$CMNLSL:FILENAME.CMN'
00623   	INCLUDE 	'HERE:COMMANDS.CMN'
00642   	INCLUDE 	'HERE:NTF2DTI.CMN'
00672   	INCLUDE		'HERE:FILENAME.CMN'
00692   C
00693   C Command language definitions:
00694   	EXTERNAL 	NTF2DTI_CLD
00695   C
00696   C Functions:
00697   	LOGICAL 	DCL_FILE
00698   	LOGICAL 	DCL_STARTUP
00699   	LOGICAL 	DCL_QUAL
00700   	LOGICAL 	DCL_STR
00701   	LOGICAL 	DCL_INT
00702   	LOGICAL		TEST_TERM
00703   	LOGICAL		TEST_FOREIGN
00704   C
00705   C Workspace:
00706   	LOGICAL 	ABSENT		!  File-spec absent ?
00707   	LOGICAL 	OK		!  Function return
00708   	LOGICAL 	FPRES		!  Qualifier present
00709   	LOGICAL 	FNEGA		!  Qualifier negated
00710   	INTEGER		I		!  DO loop counter
00711   	INTEGER 	THERE		!  Qualifier there
00712   	INTEGER		IERR		!  Error flag
00713   	CHARACTER*4	HEAD_TYPE	!  Header type read from CL
00714   	CHARACTER*4	HTYPES(3)	!  Lookup for header types
00715   C
00716   C.....................................................................
00717   C Set up the header type lookup table
00718   C
00719   	DATA HTYPES/'LSLA','UHL1','TED4'/
00720   C

CMDLIN                                                           6-Aug-1997 09:37:09	VAX FORTRAN V5.9-173                Page   2
                                                                 6-Aug-1997 09:37:08	[DTMCONVERT.NTF2DTI.SPECIAL]CMDLIN.FOR;11   

00721   C.....................................................................
00722   C Initialise the command line
00723   C
00724   	OK=DCL_STARTUP('NTF2DTI',.FALSE.,NTF2DTI_CLD,.TRUE.)
00725   	IF (.NOT.OK) GOTO 999
00726   C
00727   C.....................................................................
00728   C /LOG - get this first so we know if we should output messages
00729   C		
00730   	OK=DCL_QUAL('LOG',LOG,FPRES,FNEGA,.TRUE.)
00731   	IF (OK.AND.LOG) OK = TEST_TERM('SYS$OUTPUT',IS_TERM,IERR)
00732   	IF (.NOT.OK) GOTO 999
00733   C
00734   C....................................................................
00735   C Now get the input file...
00736   C
00737   	OK=DCL_FILE('NTFFILE','.NTF',ABSENT,.TRUE.,.TRUE.)
00738   	IF (.NOT.OK) GOTO 999
00739   C
00740   	NTFLEN =FIL_LEN(1)			! save the data
00741   	NTFFILE=FILARY(1)(1:NTFLEN)
00742   C
00743   C If a device name was given, which we assume was followed by a colon,
00744   C then look to see if it is mounted /FOREIGN - if so it is a magtape.
00745   C
00746   	IF (HAD_DEV) THEN
00747   	   CALL WRITEF('Testing if device is mounted /foreign')
00748   	   OK=TEST_FOREIGN(STR_DEV(:LEN_DEV),IS_MAGTAPE,IERR)
00749   	   IF (.NOT.OK) THEN
00750   	      CALL LSL_PUTMSG(NTF2DTI__TESTFOR,STR_DEV(:LEN_DEV))
00751   	      CALL LSL_ADDMSG(OK)
00752   	      IF (OK.EQ.LSL__SYSERR) CALL LSL_ADDMSG(IERR)
00753   	      GOTO 999
00754   	   ENDIF
00755   	   IF (IS_MAGTAPE) THEN
00756   	      DEVLEN=LEN_DEV
00757   	      DEVICE=STR_DEV(:LEN_DEV)	! remember the device name
00758   	   ENDIF
00759   	ELSE
00760   	   IS_MAGTAPE=.FALSE.
00761   	ENDIF
00762   C
00763   C....................................................................
00764   C Now get the DTI output filename.
00765   C
00766   	OK=DCL_FILE('DTIFILE','LSL$DTI:OUT.DTI',ABSENT,.TRUE.,.TRUE.)
00767   	IF (.NOT.OK) GOTO 999
00768   C
00769   	IF (.NOT.ABSENT) THEN
00770   	  DTILEN  = FIL_LEN(1)
00771   	  DTIFILE = FILARY(1)(1:FIL_LEN(1))
00772   	ELSE
00773   	  CALL WRITEF('%%NTF2DTI-I-MISC, no output DTI file specified')
00774   	  CALL WRITEF('-NTF2DTI-I-MISC, file names will be taken from SECHREC')
00775   	  DEDUCE_FILE = .TRUE.
00776   	ENDIF
00777   C

CMDLIN                                                           6-Aug-1997 09:37:09	VAX FORTRAN V5.9-173                Page   3
                                                                 6-Aug-1997 09:37:08	[DTMCONVERT.NTF2DTI.SPECIAL]CMDLIN.FOR;11   

00778   C.................................................................
00779   C following lines commented out: want to read from disk, and from tape
00780   C
00781   C-.-------------------------------------------------------------.
00782   C-| if the tape drive is not mounted /FOREIGN then its an error	|
00783   C-|								|
00784   C-|	IF (.NOT.IS_MAGTAPE) THEN				|
00785   C-|	   CALL LSL_PUTMSG(NTF2DTI__NODEVICE,STR_DEV(:LEN_DEV))	|
00786   C-|	   OK=.FALSE.						|
00787   C-|	   GOTO 999						|
00788   C-|	ENDIF							|
00789   C-`-------------------------------------------------------------'
00790   C
00791   C.....................................................................
00792   C /OUTPUT=file - output a log file
00793   C
00794   	OK=DCL_QUAL('OUTPUT',OUTPUT,FPRES,FNEGA,.TRUE.)
00795   	IF (.NOT.OK) GOTO 999
00796   C
00797   	IF (OUTPUT) THEN
00798    	   OK=DCL_FILE('OUTPUT','NTF2DTI.LOG',ABSENT,.TRUE.,.TRUE.)
00799   	   IF (.NOT.OK) GOTO 999
00800   	   LOGLEN =FIL_LEN(1)
00801   	   LOGFILE=FILARY(1)(1:LOGLEN)
00802   	ENDIF
00803   C
00804   C.....................................................................
00805   C /HEADER_TYPE
00806   C
00807   	OK=DCL_QUAL('HEADER_TYPE',THERE,FPRES,FNEGA,.TRUE.)
00808   	IF (.NOT.OK) GOTO 999
00809   C
00810   	OK=DCL_STR('HEADER_TYPE',.TRUE.)
00811   	IF (.NOT.OK) GOTO 999
00812   	HEAD_TYPE=CARRAY(1)(1:4)
00813   	DO 10 I=1,3
00814   	   IF (HEAD_TYPE.EQ.HTYPES(I)) HEADER_TYPE(1)=I
00815   10	CONTINUE
00816   	IF (HEADER_TYPE(1).EQ.1) HEADER_TYPE(1)=5	!for LSLA file
00817   C
00818   C.....................................................................
00819   C /PROJECTION
00820   C
00821   	OK=DCL_QUAL('PROJECTION',PROJECT,FPRES,FNEGA,.TRUE.)
00822   	IF (.NOT.OK) GOTO 999
00823   C
00824   C A projection can't be output if a LSLA header is not being used
00825   C If the qualifier was given, output an error, otherwise change the 
00826   C default to no projection
00827   C
00828   	IF (HEADER_TYPE(1).NE.5) THEN
00829   	   IF (PROJECT) THEN
00830   	      CALL LSL_PUTMSG(NTF2DTI__NOTLSLA)
00831   	      OK=.FALSE.
00832   	      GOTO 999
00833   	   ENDIF
00834   	ELSE

CMDLIN                                                           6-Aug-1997 09:37:09	VAX FORTRAN V5.9-173                Page   4
                                                                 6-Aug-1997 09:37:08	[DTMCONVERT.NTF2DTI.SPECIAL]CMDLIN.FOR;11   

00835   	   PROJECT=.TRUE.
00836   	ENDIF
00837   C
00838   C.....................................................................
00839   C /OS
00840   C
00841   	OK=DCL_QUAL('OS',IS_OS,FPRES,FNEGA,.TRUE.)
00842   	IF (.NOT.OK) GOTO 999
00843   C
00844   C.....................................................................
00845   C /SECTION TRUE by default
00846   C
00847   	SECTION =0				!default all datasets
00848   C
00849   	OK=DCL_QUAL('SECTION',SECT,FPRES,FNEGA,.TRUE.)
00850   	IF (.NOT.OK) GOTO 999
00851   C
00852   	IF (SECT) THEN
00853   	   OK=DCL_INT('SECTION',.TRUE.)
00854   	   IF (.NOT.OK) GOTO 999
00855   	   SECTION=IARRAY(1)
00856   	   IF (SECTION.NE.0) THEN
00857   	     CALL WRITEF
00858        &	       ('%%NTF2DTI-I-MISC, searching for section number %I',
00859        &							SECTION)
00860   	   ELSE
00861   	     CALL WRITEF
00862        &	       ('%%NTF2DTI-I-MISC, copying all sections')
00863   	   ENDIF
00864   	ENDIF
00865   C
00866   C.....................................................................
00867   C
00868   999	CMDLIN=OK
00869   C
00870   	RETURN
00871   	END

CMDLIN                                                           6-Aug-1997 09:37:09	VAX FORTRAN V5.9-173                Page   5
01                                                               6-Aug-1997 09:37:08	[DTMCONVERT.NTF2DTI.SPECIAL]CMDLIN.FOR;11   

PROGRAM SECTIONS

    Name				 Bytes   Attributes

  0 $CODE                                  711   PIC CON REL LCL   SHR   EXE   RD NOWRT QUAD
  1 $PDATA                                 358   PIC CON REL LCL   SHR NOEXE   RD NOWRT QUAD
  2 $LOCAL                                 628   PIC CON REL LCL NOSHR NOEXE   RD   WRT QUAD
  3 DTIHDR                                2520   PIC OVR REL GBL   SHR NOEXE   RD   WRT QUAD
  4 LSL_CLD                               5716   PIC OVR REL GBL   SHR NOEXE   RD   WRT QUAD
  5 LSL_CLDCHR                            4096   PIC OVR REL GBL   SHR NOEXE   RD   WRT QUAD
  6 LSL_FNAM_STR                           210   PIC OVR REL GBL   SHR NOEXE   RD   WRT QUAD
  7 LSL_FNAM_LOG                            24   PIC OVR REL GBL   SHR NOEXE   RD   WRT QUAD
  8 LSL_FNAM_LEN                            24   PIC OVR REL GBL   SHR NOEXE   RD   WRT QUAD
  9 COMMANDS                                40   PIC OVR REL GBL   SHR NOEXE   RD   WRT QUAD
 10 NTF2DTI                                 16   PIC OVR REL GBL   SHR NOEXE   RD   WRT QUAD
 11 FILE_INT                                16   PIC OVR REL GBL   SHR NOEXE   RD   WRT QUAD
 12 FILE_CHR                               868   PIC OVR REL GBL   SHR NOEXE   RD   WRT QUAD

    Total Space Allocated                15227


ENTRY POINTS

    Address  Type  Name          

  0-00000000  L*4  CMDLIN        


VARIABLES

    Address  Type  Name              Address  Type  Name              Address  Type  Name              Address  Type  Name          

  2-0000002C  L*4  ABSENT         10-00000004  I*4  COUNT_SECTION   9-00000018  L*4  DEDUCE_FILE    12-000000D9  CHAR DEVICE        
 11-00000004  I*4  DEVLEN         12-000001B2  CHAR DTIFILE        11-00000008  I*4  DTILEN          9-00000024  L*4  DTIOPEN       
  2-00000038  L*4  FNEGA           2-00000034  L*4  FPRES           7-00000004  L*4  HAD_DEV         7-00000008  L*4  HAD_DIR       
  7-00000010  L*4  HAD_EXT         7-0000000C  L*4  HAD_NAM         7-00000000  L*4  HAD_NOD         7-00000014  L*4  HAD_VER       
  2-00000022  CHAR HEAD_TYPE       2-0000003C  I*4  I               2-00000044  I*4  IERR            9-0000001C  L*4  IS_MAGTAPE    
  9-00000010  L*4  IS_OS           9-00000020  L*4  IS_TERM         8-00000004  I*4  LEN_DEV         8-00000008  I*4  LEN_DIR       
  8-00000010  I*4  LEN_EXT         8-0000000C  I*4  LEN_NAM         8-00000000  I*4  LEN_NOD         8-00000014  I*4  LEN_VER       
  9-00000000  L*4  LOG            12-00000000  CHAR LOGFILE        11-00000000  I*4  LOGLEN         10-00000008  L*4  MULTIVOLUME   
 12-0000028B  CHAR NTFFILE        11-0000000C  I*4  NTFLEN          4-00001600  I*4  NUMDBL          4-00001610  I*4  NUMFIL        
  4-00001608  I*4  NUMINT          4-00001604  I*4  NUMREA          4-0000160C  I*4  NUMSTR          2-00000030  L*4  OK            
  9-00000004  L*4  OUTPUT          9-00000008  L*4  PROJECT         9-00000014  L*4  REWIND          9-0000000C  L*4  SECT          
 10-00000000  I*4  SECTION         6-00000006  CHAR STR_DEV         6-0000001A  CHAR STR_DIR         6-000000A5  CHAR STR_EXT       
  6-0000007E  CHAR STR_NAM         6-00000000  CHAR STR_NOD         6-000000CC  CHAR STR_VER         2-00000040  I*4  THERE         
 10-0000000C  I*4  VOLCOUNT      


ARRAYS

    Address  Type  Name                                  Bytes  Dimensions

  5-00000000  CHAR CARRAY                                 2048  (16)
  3-00000318  I*4  DATA_OFFSET                              36  (9)
  3-00000384  I*4  DATA_TYPE                                36  (9)
  4-00000000  R*8  DBLRAY                                 1024  (128)
  3-0000084C  L*4  DTILUN_INUSE                             36  (9)

CMDLIN                                                           6-Aug-1997 09:37:09	VAX FORTRAN V5.9-173                Page   6
01                                                               6-Aug-1997 09:37:08	[DTMCONVERT.NTF2DTI.SPECIAL]CMDLIN.FOR;11   

  3-000003A8  CHAR DTI_NAME                               1152  (9)
  3-00000828  I*4  DTI_NAME_LENGTH                          36  (9)
  3-00000990  I*4  DTI_ORDER_CORNER                         36  (9)
  3-000009B4  I*4  DTI_ORDER_DIRECTION                      36  (9)
  3-00000900  I*4  DTI_WINDOW_NEX                           36  (9)
  3-00000924  I*4  DTI_WINDOW_NEY                           36  (9)
  3-000008B8  I*4  DTI_WINDOW_SWX                           36  (9)
  3-000008DC  I*4  DTI_WINDOW_SWY                           36  (9)
  5-00000800  CHAR FILARY                                 2048  (16)
  4-00001614  I*2  FIL_LEN                                  32  (16)
  3-0000096C  L*4  HAD_PROJ_RECORD                          36  (9)
  3-00000360  I*4  HEADER_TYPE                              36  (9)
  2-00000016  CHAR HTYPES                                   12  (3)
  4-00000600  I*4  IARRAY                                 4096  (1024)
  3-00000288  I*4  LATINT                                   36  (9)
  3-00000240  I*4  LATORI                                   36  (9)
  3-00000120  I*4  LATREC                                  144  (4, 9)
  3-000002AC  I*4  LONINT                                   36  (9)
  3-00000264  I*4  LONORI                                   36  (9)
  3-000001B0  I*4  LONREC                                  144  (4, 9)
  3-000000B4  I*4  MAX_LVALUE                               36  (9)
  3-0000006C  R*4  MAX_RVALUE                               36  (9)
  3-0000034E  I*2  MAX_WVALUE                               18  (9)
  3-00000090  I*4  MIN_LVALUE                               36  (9)
  3-00000048  R*4  MIN_RVALUE                               36  (9)
  3-0000033C  I*2  MIN_WVALUE                               18  (9)
  2-00000000  CHAR NTF_RECORDS                              22  (11)
  4-00000400  R*4  RARRAY                                  512  (128)
  3-00000948  L*4  READ_ONLY                                36  (9)
  3-000002D0  I*4  SEC_ADDR                                 36  (9)
  3-000002F4  I*4  SEC_SIZE                                 36  (9)
  4-00001634  I*2  STR_LEN                                  32  (16)
  3-000000D8  I*4  X_EXTENT                                 36  (9)
  3-00000000  R*4  X_GRID                                   36  (9)
  3-00000870  R*4  X_OFFSET                                 36  (9)
  3-000000FC  I*4  Y_EXTENT                                 36  (9)
  3-00000024  R*4  Y_GRID                                   36  (9)
  3-00000894  R*4  Y_OFFSET                                 36  (9)




LABELS

    Address   Label       Address   Label   

  0-00000206  10        0-000002BD  999     


FUNCTIONS AND SUBROUTINES REFERENCED

  Type  Name            Type  Name            Type  Name            Type  Name            Type  Name            Type  Name          

   L*4  DCL_FILE         L*4  DCL_INT          L*4  DCL_QUAL         L*4  DCL_STARTUP      L*4  DCL_STR               LSL_ADDMSG    
        LSL_PUTMSG            NTF2DTI_CLD      L*4  TEST_FOREIGN     L*4  TEST_TERM             WRITEF        

                                                                 6-Aug-1997 09:37:09	VAX FORTRAN V5.9-173                Page   7
                                                                 6-Aug-1997 09:37:08	[DTMCONVERT.NTF2DTI.SPECIAL]CMDLIN.FOR;11   

00001   C


COMMAND QUALIFIERS

  FORTRAN/EXTEND/DEBUG/NOOPT/LIST CMDLIN

  /CHECK=(NOBOUNDS,OVERFLOW,NOUNDERFLOW)
  /DEBUG=(SYMBOLS,TRACEBACK)
  /DESIGN=(NOCOMMENTS,NOPLACEHOLDERS)
  /SHOW=(NODICTIONARY,NOINCLUDE,MAP,NOPREPROCESSOR,SINGLE)
  /STANDARD=(NOSEMANTIC,NOSOURCE_FORM,NOSYNTAX)
  /WARNINGS=(NODECLARATIONS,GENERAL,NOULTRIX,NOVAXELN)
  /CONTINUATIONS=19  /NOCROSS_REFERENCE  /NOD_LINES  /EXTEND_SOURCE
  /F77  /NOG_FLOATING  /I4  /NOMACHINE_CODE  /NOOPTIMIZE  /NOPARALLEL
  /NOANALYSIS_DATA
  /NODIAGNOSTICS
  /LIST=LSL$SOURCE_ROOT:[DTMCONVERT.NTF2DTI.SPECIAL]CMDLIN.LIS;11                                           
  /OBJECT=LSL$SOURCE_ROOT:[DTMCONVERT.NTF2DTI.SPECIAL]CMDLIN.OBJ;21                                           


COMPILATION STATISTICS

  Run Time:           0.97 seconds
  Elapsed Time:       2.58 seconds
  Page Faults:        898
  Dynamic Memory:     656 pages
