C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-12-15 16:14:26.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION MOUNT_TAPE(TAPE_NAME, FOREIGN)
C
**	MODULE	MOUNT_TAPE
**	IDENT	15DE92
C
C Copyright Laser-Scan Labs., Ltd., Cambridge, England.
C
C Author J.H.Rees
C
C	Originally part of the IFF-to-Raster conversion program
C
C	Copied and modified for use with NTF2DTI  	J M Cadogan 15-Dec-1992
C
C	 - mounts a mag-tape (the tape is mounted FOREIGN).
C
C
C Returns:-	error return (if any!)
C
C
	IMPLICIT NONE
C
C Common blocks:
C
***	PARAMETER/LSL$CMNLSL:LSLLIBMSG/
C
	INCLUDE		'($MNTDEF)'
C
C Functions:
C
	INTEGER*4	SYS$MOUNT
C
C Arguments:
C
	CHARACTER*(*)	TAPE_NAME		! the mag-tape we are to mount.
	LOGICAL		FOREIGN			! if TRUE then mount tape
						!  "/FOREIGN";
						! if FALSE then don't (ie ANSI)
C
C w/s:
C
	LOGICAL		STATUS			! function returns.
C
C Define the item-list structure.
C
	STRUCTURE	/ITEM_STRUCT/
	  UNION
	    MAP
	      INTEGER*2		BUFF_LEN	! No of bytes in BUFF_ADDR
	      INTEGER*2		ITEM_CODE	! our intent
	      INTEGER*4		BUFF_ADDR	! what we want it to do
	      INTEGER*4		RET_LEN_ADDR	! not used.
	    END MAP
	    MAP
	      INTEGER*4		END_LIST	! eol marker
	    END MAP
	  END UNION
	END STRUCTURE
C
C declare the item_structure.
C
	RECORD	/ITEM_STRUCT/	ITEM_LIST(3)
C
C Code:
C
C Initialise:
C
	MOUNT_TAPE = LSL__NORMAL		! assume success.
C
C Set-up the item list for use with SYS$MOUNT.
C
C...the device-name...
	ITEM_LIST(1).BUFF_LEN	   = LEN(TAPE_NAME)
	ITEM_LIST(1).ITEM_CODE	   = MNT$_DEVNAM
	ITEM_LIST(1).BUFF_ADDR	   = %LOC(TAPE_NAME)
	ITEM_LIST(1).RET_LEN_ADDR  = 0

C...it's flags

	ITEM_LIST(2).BUFF_LEN	= 4
	ITEM_LIST(2).ITEM_CODE = MNT$_FLAGS
	IF ( FOREIGN )  THEN
	  ITEM_LIST(2).BUFF_ADDR = %LOC(MNT$M_FOREIGN)
	ELSE
	  ITEM_LIST(2).BUFF_ADDR =
     &		%LOC(MNT$M_NOHDR3.OR.MNT$M_FOREIGN)
	ENDIF
	ITEM_LIST(2).RET_LEN_ADDR = 0
	ITEM_LIST(3).END_LIST	= 0
C
C Now we try to mount the tape.
C
	STATUS = SYS$MOUNT(ITEM_LIST)
	IF (.NOT.STATUS)  THEN
	  MOUNT_TAPE = STATUS
	  GOTO 999
	ENDIF
C
C End:
C
999	RETURN
	END
