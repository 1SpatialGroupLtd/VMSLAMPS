C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-05-29 12:07:04.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION READ_SECTION
C
***	IDENT	29MY92
***	MODULE	READ_SECTION
C
C Copyright (C) Laser-Scan Ltd, Cambridge, England
C
C Author TJ Ibbs, 6 October 1987

C The main routine for reading a section
C - NOTE that it will return with a record in-hand to be processed by READ_NTF
C
CMOD	Tidied sources, restructured (was code really by TJI?)	SG  13-Aug-1991
C
	IMPLICIT NONE
C
C Message files:
C
	INCLUDE	'HERE:NTF2DTIMSG.PAR'
C
C Common files:
C
	INCLUDE	'LSL$CMNLSL:FILENAME.CMN'
	INCLUDE	'HERE:LUNS.PAR'
	INCLUDE	'HERE:COMMANDS.CMN'
	INCLUDE	'HERE:FILENAME.CMN'
	INCLUDE	'HERE:RECORD.CMN'
	INCLUDE	'HERE:NTFDATA.CMN'
	INCLUDE 'LSL$CMNDTI:DTIPROJ.CMN'
	INCLUDE 'LSL$CMNDTI:DTIHDR.CMN'
C
C Functions
C
	LOGICAL		READ_NTF_RECORD	! read next record from NTF
	LOGICAL		READ_COMMENT	! read a comment record
	LOGICAL		READ_SECHREC
	LOGICAL		DTI_WRITE	! open & write to the DTI
	LOGICAL		DTI_CLOSE
	LOGICAL		READ_SECQUAL
	LOGICAL		READ_GRIDHREC	! grid header
C
C Workspace
C
	LOGICAL		OK	! Function return
	LOGICAL		RET	! Another one
	INTEGER		IERR
C
C ***********************************************************************
C
	OK      = .TRUE.		! assume success
C
C........................................................................
C read the SECHREC in
C
	OK = READ_SECHREC()
	IF (.NOT.OK) GOTO 9999
C
C........................................................................
C read in the records and hope they occur in a sensible  order
C
2000	OK=READ_NTF_RECORD()
	IF (OK) THEN
	  NTF$_REC_DESCR = STRING(1:2)
C
C	  ................................................................
C	  section quality record
C
	  IF ( NTF$_REC_DESCR.EQ.'09' ) THEN	! section quality
	     CALL READ_SECQUAL			! report on it
	     GOTO 2000				! read the next record
C
C	  ................................................................
C	  grid header record
C
	  ELSE IF ( NTF$_REC_DESCR.EQ.'50' ) THEN	! grid header
	     OK = READ_GRIDHREC()			! read it
	     IF (OK) THEN
		OK = DTI_WRITE()			! and process grid
		IF (.NOT.OK) GOTO 9999
	     ENDIF
C
C	  ................................................................
C	  comment record
C
	  ELSE IF ( NTF$_REC_DESCR.EQ.'90' ) THEN	! comment
	     CALL READ_COMMENT			! report on it
	     GOTO 2000				! read the next record
C
C	  ................................................................
C	  volume terminator or section header record
C
	  ELSE IF ( NTF$_REC_DESCR.EQ.'07' .OR. NTF$_REC_DESCR.EQ.'99' ) THEN
	     OK = .TRUE.			! we've finished, do nothing
C
C	  ................................................................
C	  this record type is unknown, warn
C
	  ELSE
	     CALL LSL_PUTMSG(NTF2DTI__UNEXPREC,NTF$_REC_DESCR,RECNUM)
	  ENDIF
	ENDIF
C
C ***********************************************************************
C Close the DTI file (if any) - note that if we came here with an 
C error, then that value supersedes the value returned by DTI_CLOSE
C
9999	IF ( DTIOPEN ) THEN
C
	   IF (LOG) THEN
	      CALL WRITEF
	      CALL WRITEF('%%NTF2DTI-I-MISC, closing DTI file')
	   ENDIF
C
	   RET = DTI_CLOSE(DTILUN,.TRUE.,.FALSE.,IERR)
	   IF (OK) OK = RET
C
	   IF (.NOT.RET) THEN
	      CALL LSL_PUTMSG(NTF2DTI__DTICLOSERR,DTIFILE(:DTILEN))
	      CALL LSL_ADDMSG(IERR)
	   ELSE
	      DTIOPEN = .FALSE.
	      IF (LOG .AND. .NOT.OK) CALL LSL_PUTMSG(NTF2DTI__DTICLOSED)
	   ENDIF
	ENDIF
C
	READ_SECTION = OK
C
	RETURN
	END
C
