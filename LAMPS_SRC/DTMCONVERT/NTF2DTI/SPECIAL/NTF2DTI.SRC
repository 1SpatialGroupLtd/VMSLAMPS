C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-06-23 16:16:36.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	PROGRAM NTF2DTI
C
***     MODULE NTF2DTI
***     IDENT  23JN93
C
C 	Copyright Laser-Scan Ltd, Cambridge, England
C
C 	Author					IM	 6-Apr-1988
C
C A program to convert raster data from NTF level 0, 4 or 5 to DTI format.
C
C Version 1.0 has level 0 or 4, fixed length records
C Version 1.1 has level 4, variable length records (OS specific)
C Version 2.0 has level 5, variable length records
c
CMOD						JB	21-Oct-1991
C	Prevent NTF2DTI setting exit status to ABORT when OK
C
CMOD1119					JB	24-May-1992
C	Read Version 1.1 NTF data:
C
CMOD1149					JB	13-Sep-1992
C	Restore the reading of v1.1 NTF data on disc
C
CMOD						JMC	17-Dec-1992
C	Initialise variables MULTIVOLUME  and  VOLCOUNT
C
CMOD1213					JB	30-Mar-1993
C	Use the correct record length for variable length records
C	on disc (as well on tape).
C	Do not exit on encountering some rubbish data records in 
C	unnecessary or non-standard fields, but continue to try to
C	process the data if possible.
C	Write all output files to LSL$DTI:.
C
CMOD1242					JB	21-Jun-1993
C	Read Version 2.0 NTF data
C
C
	IMPLICIT NONE
C
C Messages:
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE	'HERE:NTF2DTIMSG.PAR'
C
C Commons:
	INCLUDE	'HERE:COMMANDS.CMN'
	INCLUDE	'HERE:NTF2DTI.CMN'
C
C Functions:
	LOGICAL		CMDLIN		! Read & decode command line
	LOGICAL		OPEN_LOG	! Create log (/OUTPUT) file
	LOGICAL		OPEN_NTF	! Open NTF input dataset
	LOGICAL		READ_NTF	! Read and process the NTF data
C
C Workspace:
	INTEGER		OK		! Function return
	LOGICAL		NTFLUNOP	! NTF dataset open?
	LOGICAL		LOGLUNOP	! /OUTPUT file open?
C
C .....................................................................
C Initialise LSLLIB and DTILIB
C
	CALL LSL_INIT
	CALL DTI_INIT
C
C Note that we haven't opened any files yet
C
	VOLCOUNT=1
	MULTIVOLUME=.FALSE.
	NTFLUNOP=.FALSE.
	LOGLUNOP=.FALSE.
C
C  ....................................................................
C Read the command line
C
	OK=CMDLIN()
	IF (.NOT.OK) GOTO 999
C
C  ....................................................................
C If OUTPUT was specified open the log file & write header
C
	IF (OUTPUT) THEN
	   OK=OPEN_LOG()
	   IF (.NOT.OK) GOTO 999
	   LOGLUNOP=.TRUE.		! file is now open
	ENDIF
C
C ...................................................................
C Open up the NTF file for read
C
	OK=OPEN_NTF()
	IF (.NOT.OK) GOTO 999
C
	NTFLUNOP=.TRUE.			! file is now open
C
C  ....................................................................
C And read through the NTF file, producing DTI files
C
	OK = READ_NTF()
C
C  ....................................................................
C Rejoin errors and exit
C 
999	IF (LOGLUNOP) CALL CLOSE_LOG
	IF (NTFLUNOP) CALL CLOSE_NTF
C
C If OK was .TRUE. or .FALSE., change it to a proper message code
C
	IF (OK) THEN
	   OK = NTF2DTI__NORMAL
	ELSE
	   OK = NTF2DTI__ABORT
	ENDIF
C
C And exit with the success/error status from earlier
C
	CALL LSL_EXIT(OK)
	END
C
