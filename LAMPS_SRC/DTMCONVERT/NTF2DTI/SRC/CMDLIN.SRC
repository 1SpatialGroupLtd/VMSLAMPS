C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-03-31 11:37:04.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION CMDLIN
C
***     MODULE CMDLIN
***     IDENT  31MR93
C
C Copyright Laser-Scan Ltd, Cambridge, England
C
C Author	IM	 6-Apr-1988
C
C Reads and decodes the command line
C Returns TRUE for successful completion, otherwise FALSE
C
CMOD	 For use with LSLA type DTI files.			DRC 23-Aug-1988 
CMOD	 Commented out lines which give error if not a mag-tape	SG  15-Aug-1991
CMOD1049 Add info messages on which section(s) to copy		JB  21-Oct-1991
CMOD1213 Use LSL$DTI: for output files				JB  31-Mar-1993
C
	IMPLICIT NONE
C
C Messages:
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE	'HERE:NTF2DTIMSG.PAR'
C
C Commons:
	INCLUDE		'LSL$CMNDTI:DTIHDR.CMN'
	INCLUDE 	'LSL$CMNLSL:CLD.CMN'
	INCLUDE		'LSL$CMNLSL:FILENAME.CMN'
	INCLUDE 	'HERE:COMMANDS.CMN'
	INCLUDE 	'HERE:NTF2DTI.CMN'
	INCLUDE		'HERE:FILENAME.CMN'
C
C Command language definitions:
	EXTERNAL 	NTF2DTI_CLD
C
C Functions:
	LOGICAL 	DCL_FILE
	LOGICAL 	DCL_STARTUP
	LOGICAL 	DCL_QUAL
	LOGICAL 	DCL_STR
	LOGICAL 	DCL_INT
	LOGICAL		TEST_TERM
	LOGICAL		TEST_FOREIGN
C
C Workspace:
	LOGICAL 	ABSENT		!  File-spec absent ?
	LOGICAL 	OK		!  Function return
	LOGICAL 	FPRES		!  Qualifier present
	LOGICAL 	FNEGA		!  Qualifier negated
	INTEGER		I		!  DO loop counter
	INTEGER 	THERE		!  Qualifier there
	INTEGER		IERR		!  Error flag
	CHARACTER*4	HEAD_TYPE	!  Header type read from CL
	CHARACTER*4	HTYPES(3)	!  Lookup for header types
C
C.....................................................................
C Set up the header type lookup table
C
	DATA HTYPES/'LSLA','UHL1','TED4'/
C
C.....................................................................
C Initialise the command line
C
	OK=DCL_STARTUP('NTF2DTI',.FALSE.,NTF2DTI_CLD,.TRUE.)
	IF (.NOT.OK) GOTO 999
C
C.....................................................................
C /LOG - get this first so we know if we should output messages
C		
	OK=DCL_QUAL('LOG',LOG,FPRES,FNEGA,.TRUE.)
	IF (OK.AND.LOG) OK = TEST_TERM('SYS$OUTPUT',IS_TERM,IERR)
	IF (.NOT.OK) GOTO 999
C
C....................................................................
C Now get the input file...
C
	OK=DCL_FILE('NTFFILE','.NTF',ABSENT,.TRUE.,.TRUE.)
	IF (.NOT.OK) GOTO 999
C
	NTFLEN =FIL_LEN(1)			! save the data
	NTFFILE=FILARY(1)(1:NTFLEN)
C
C If a device name was given, which we assume was followed by a colon,
C then look to see if it is mounted /FOREIGN - if so it is a magtape.
C
	IF (HAD_DEV) THEN
	   CALL WRITEF('Testing if device is mounted /foreign')
	   OK=TEST_FOREIGN(STR_DEV(:LEN_DEV),IS_MAGTAPE,IERR)
	   IF (.NOT.OK) THEN
	      CALL LSL_PUTMSG(NTF2DTI__TESTFOR,STR_DEV(:LEN_DEV))
	      CALL LSL_ADDMSG(OK)
	      IF (OK.EQ.LSL__SYSERR) CALL LSL_ADDMSG(IERR)
	      GOTO 999
	   ENDIF
	   IF (IS_MAGTAPE) THEN
	      DEVLEN=LEN_DEV
	      DEVICE=STR_DEV(:LEN_DEV)	! remember the device name
	   ENDIF
	ELSE
	   IS_MAGTAPE=.FALSE.
	ENDIF
C
C....................................................................
C Now get the DTI output filename.
C
	OK=DCL_FILE('DTIFILE','LSL$DTI:OUT.DTI',ABSENT,.TRUE.,.TRUE.)
	IF (.NOT.OK) GOTO 999
C
	IF (.NOT.ABSENT) THEN
	  DTILEN  = FIL_LEN(1)
	  DTIFILE = FILARY(1)(1:FIL_LEN(1))
	ELSE
	  CALL WRITEF('%%NTF2DTI-I-MISC, no output DTI file specified')
	  CALL WRITEF('-NTF2DTI-I-MISC, file names will be taken from SECHREC')
	  DEDUCE_FILE = .TRUE.
	ENDIF
C
C.................................................................
C following lines commented out: want to read from disk, and from tape
C
C-.-------------------------------------------------------------.
C-| if the tape drive is not mounted /FOREIGN then its an error	|
C-|								|
C-|	IF (.NOT.IS_MAGTAPE) THEN				|
C-|	   CALL LSL_PUTMSG(NTF2DTI__NODEVICE,STR_DEV(:LEN_DEV))	|
C-|	   OK=.FALSE.						|
C-|	   GOTO 999						|
C-|	ENDIF							|
C-`-------------------------------------------------------------'
C
C.....................................................................
C /OUTPUT=file - output a log file
C
	OK=DCL_QUAL('OUTPUT',OUTPUT,FPRES,FNEGA,.TRUE.)
	IF (.NOT.OK) GOTO 999
C
	IF (OUTPUT) THEN
 	   OK=DCL_FILE('OUTPUT','NTF2DTI.LOG',ABSENT,.TRUE.,.TRUE.)
	   IF (.NOT.OK) GOTO 999
	   LOGLEN =FIL_LEN(1)
	   LOGFILE=FILARY(1)(1:LOGLEN)
	ENDIF
C
C.....................................................................
C /HEADER_TYPE
C
	OK=DCL_QUAL('HEADER_TYPE',THERE,FPRES,FNEGA,.TRUE.)
	IF (.NOT.OK) GOTO 999
C
	OK=DCL_STR('HEADER_TYPE',.TRUE.)
	IF (.NOT.OK) GOTO 999
	HEAD_TYPE=CARRAY(1)(1:4)
	DO 10 I=1,3
	   IF (HEAD_TYPE.EQ.HTYPES(I)) HEADER_TYPE(1)=I
10	CONTINUE

	IF (HEADER_TYPE(1).EQ.1) HEADER_TYPE(1)=5	!for LSLA file
C
C.....................................................................
C /PROJECTION
C
	OK=DCL_QUAL('PROJECTION',PROJECT,FPRES,FNEGA,.TRUE.)
	IF (.NOT.OK) GOTO 999
C
C A projection can't be output if a LSLA header is not being used
C If the qualifier was given, output an error, otherwise change the 
C default to no projection
C
	IF (HEADER_TYPE(1).NE.5) THEN
	   IF (PROJECT) THEN
	      CALL LSL_PUTMSG(NTF2DTI__NOTLSLA)
	      OK=.FALSE.
	      GOTO 999
	   ENDIF
	ELSE
	   PROJECT=.TRUE.
	ENDIF
C
C.....................................................................
C /OS
C
	OK=DCL_QUAL('OS',IS_OS,FPRES,FNEGA,.TRUE.)
	IF (.NOT.OK) GOTO 999
C
C.....................................................................
C /SECTION TRUE by default
C
	SECTION =0				!default all datasets
C
	OK=DCL_QUAL('SECTION',SECT,FPRES,FNEGA,.TRUE.)
	IF (.NOT.OK) GOTO 999
C
	IF (SECT) THEN
	   OK=DCL_INT('SECTION',.TRUE.)
	   IF (.NOT.OK) GOTO 999
	   SECTION=IARRAY(1)
	   IF (SECTION.NE.0) THEN
	     CALL WRITEF
     &	       ('%%NTF2DTI-I-MISC, searching for section number %I',
     &							SECTION)
	   ELSE
	     CALL WRITEF
     &	       ('%%NTF2DTI-I-MISC, copying all sections')
	   ENDIF
	ENDIF
C
C.....................................................................
C
999	CMDLIN=OK
C
	RETURN
	END
C
