C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-08-16 18:52:12.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	PROGRAM IIS2DTI
C
***	MODULE IIS2DTI
***	IDENT 16AU93
C
C © Copyright Laser-Scan Ltd., Cambridge, England
C Author Andrew Trigg	19th May 1988
C
C Modified  A.D.Trigg   22-Jun-1989
C Modified    J Barber	18-May-1992
C			Add /HEADER qualifier to specify how many header
C			records there are before the actual data
C			(default remains at 1)
C
C Modified    J Barber	09-Jun-1992
C			Add /WIDTH qualifier to reset the record size from
C			the default of 512 (500 format) to an extension
C			of the format where each record contains the data
C			for a complete scan line or row (still 500 format??).
C
C			There is therefore only ever one swath covering
C			the whole file. Note this also sets the number of
C			columns in the dataset, and P4 is not necessary.
C
C			NB. Only for BYTE data.
C
C To convert International Imaging Systems' s500 format data into 
C DTI format
C
	IMPLICIT NONE
C
	INCLUDE	  'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE	  'LSL$CMNDTI:DTILIBMSG.PAR'
	INCLUDE   'LSL$CMNIIS2DTI:IIS2DTIMSG.PAR'
	INCLUDE	  'LSL$CMNLSL:CLD.CMN'
	INCLUDE	  'LSL$CMNLSL:FILENAME.CMN'
C
	EXTERNAL  IIS2DTI_CLD
C
C Functions
	LOGICAL	  DTI_CLOSE		! Closes a DTI file
	LOGICAL	  DTI_CREATE		! Creates a DTI file
	LOGICAL	  DTI_MINMAX_DATA       ! Determines max and min in a DTI file
	LOGICAL	  DTI_WRITE_BYTE_DATA   ! Writes a byte value to a DTI file
	LOGICAL	  DTI_WRITE_WORD_DATA   ! Writes an integer*2 to a DTI file
	LOGICAL	  DTI_WRITE_LONG_DATA   ! Writes an integer*4 to a DTI file
	LOGICAL	  FLROPN	! Opens a file for reading
	LOGICAL	  FLRCLO	! Closes a file
	INTEGER	  FLRLIN	! Reads a line from a file
	INTEGER   DCL_QUAL	! Gets a command line qualifier
	INTEGER	  DCL_INT	! Gets an integer value from the command line
	INTEGER	  DCL_STARTUP	! Gets parsed command line
	INTEGER	  DCL_FILE	! Reads and parses file titles from the 
C				! command line
C W/s
	LOGICAL	  OK,ABSENT
	LOGICAL	  HAD_LONG	! Presence/absence of long qualifier
	LOGICAL	  HAD_SHORT	! Presence/absence of short qualifier
	LOGICAL	  LOCAL,LOCNEG
C
	INTEGER	  I,J,K		
	INTEGER	  IERR		! Error indicator
	INTEGER	  NCOL,NROW	! Number of columns and rows
	INTEGER	  SW		! Swath count index
	INTEGER	  NBYTES	! Number of bytes in a 'line'
	INTEGER	  OVER		! Pixel width of final swath
	INTEGER	  SWATH		! Number of whole and partial swaths in
C				! the input IIS image
	INTEGER	  WIDTH		! Width of current swath
	INTEGER	  RECORD_LEN	! Record length (fixed format)
	INTEGER	  IALQ		! Total records used in input file
	INTEGER	  EXPFLN	! Expand a filename
	INTEGER   IISLEN,DTILEN	! Input and output filename lengths
C
	BYTE	  BLKBUF(0:32767)	! A 32768 byte block
	INTEGER*2 BLKSHT(0:16383)	! A 16384 short integer block
	INTEGER*4 BLKLON(0:8191)	! A 8192 long integer block
C
	CHARACTER*128  IISFIL,DTIFIL	! Input and output filenames
C
	LOGICAL	  HAD_WIDTH
	LOGICAL	  HAD_HEADER
	INTEGER	  HEADER_COUNT		! No. of header records given
C					! with the /HEADER qualifier
C ......................................................................
C
	CALL LSL_INIT
	CALL DTI_INIT
C
	HEADER_COUNT = 1		! Default remains at 1 header record
	WIDTH        = 512		! Default 512 (as in the 500 spec)
	RECORD_LEN   = 512		! Default 512 record length
	HAD_HEADER   = .FALSE.		! Had no /HEADER
	HAD_WIDTH    = .FALSE.		! Had no /WIDTH
C
C Decode the command line
C
	OK = DCL_STARTUP('IIS2DTI',.FALSE.,IIS2DTI_CLD,.TRUE.)
	IF (.NOT.OK) GOTO 450
C
C IIS file
C
	OK = DCL_FILE('P1','LSL$DTI:IIS.IIS',ABSENT,.FALSE.,.TRUE.)
	IF (.NOT.OK) GOTO 450
C
	CALL EXPFLN(IISFIL,IISLEN)
C
C Open the IIS file
C
	OK = FLROPN(1,IISFIL,IERR,IALQ)
	IF (.NOT.OK) THEN
	   CALL LSL_PUTMSG(I2D__UNAOPNIIS) 
	   CALL LSL_PUTMSG(OK)
	   IF (OK.EQ.LSL__SYSOPEN) CALL LSL_ADDMSG(IERR)	
	   GOTO 450
	ENDIF
C
C DTI file
C
	OK = DCL_FILE('P2','LSL$DTI:DTI.DTI',ABSENT,.FALSE.,.TRUE.)
	IF (.NOT.OK) GOTO 410
C
	CALL EXPFLN(DTIFIL,DTILEN)
C
C Need to know the number of rows (and columns) before we can create a
C new DTI file
C
	OK = DCL_INT('P3',.TRUE.)
	IF (.NOT.OK) GOTO 410
C
	NROW = IARRAY(1)
C
C Get the record length (= swath width)
C
	OK = DCL_QUAL('WIDTH',HAD_WIDTH,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.OK) GOTO 410
C
	IF (HAD_WIDTH) THEN
	   OK = DCL_INT('WIDTH',.TRUE.)
	   IF (.NOT.OK) GOTO 410
C
	   WIDTH      = IARRAY(1)
	   RECORD_LEN = WIDTH
	   NCOL       = WIDTH
C
C Get NCOL if not had /WIDTH
C
	ELSE
	   OK = DCL_INT('P4',.TRUE.)
	   IF (.NOT.OK) GOTO 410
C
	   NCOL = IARRAY(1)
	ENDIF
C
C Get the count of header records (default 1)
C
	OK = DCL_QUAL('HEADER',HAD_HEADER,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.OK) GOTO 410
C
	IF (HAD_HEADER) THEN
	   OK = DCL_INT('HEADER',.TRUE.)
	   IF (.NOT.OK) GOTO 410
C
	   HEADER_COUNT = IARRAY(1)
	ENDIF
C
C Read the header records
C
	DO 5 I = 1,HEADER_COUNT
	   OK = FLRLIN(BLKBUF,NBYTES,RECORD_LEN,IERR)  ! get next record
C
	   IF (.NOT.OK) THEN
	      CALL LSL_PUTMSG(I2D__READIISERR)
	      CALL LSL_PUTMSG(OK)
	      IF (OK.EQ.LSL__SYSREAD) CALL LSL_ADDMSG(IERR)	
	      GOTO 410
	   ENDIF
5	CONTINUE
C
	IF (HAD_WIDTH) GOTO 100		! no more qualifiers relevant
C
C See if any other data type other than the default (byte) is required
C
	IF (OK) THEN
	   OK = DCL_QUAL('SHORT',HAD_SHORT,LOCAL,LOCNEG,.TRUE.)
	   IF (HAD_SHORT) GOTO 200
	END IF
C
	IF (OK) THEN
	   OK = DCL_QUAL('LONG',HAD_LONG,LOCAL,LOCNEG,.TRUE.)
	   IF (HAD_LONG) GOTO 300
	END IF
C
C.......................................................................
C  Byte data
C.......................................................................
C
C Create the DTI file
C
100	OK = DTI_CREATE(2,DTIFIL,DTILEN,1,,1,NCOL,NROW,IERR) 
	IF (.NOT.OK) THEN
	   CALL LSL_PUTMSG(I2D__UNAOPNDTI)
	   CALL LSL_PUTMSG(OK)
	   IF (OK.EQ.DTI__SYSERR) CALL LSL_ADDMSG(IERR)
	   GOTO 410
	ENDIF
C
C  Read header (as a byte buffer)
C  and set K to trigger another record read immediately
C
	K = WIDTH
C
C Calculate the number of swaths needed to convert. Over is the number
C of cells in the final swath.
C
	SWATH = INT(NCOL/WIDTH)
	OVER = MOD(NCOL,WIDTH)
	IF (OVER.NE.0) SWATH=SWATH+1
	IF (OVER.EQ.0) OVER=WIDTH
C
C Loop for each swath
C
	DO 130 SW = 1,SWATH	  
C
C Loop for each row within the swath
C
	   DO 120 I = NROW,1,-1
C
C Set default width of swath and then override if necessary
C
	      IF (SW.EQ.SWATH) WIDTH = OVER
C
C Loop for each cell within the row
C
	      DO 110 J = 1,WIDTH
C
C If we have run out of data then read in the next record
C
		 IF (K.GE.WIDTH) THEN
		    OK = FLRLIN(BLKBUF,NBYTES,RECORD_LEN,IERR) 	! get next
C								! record
	            IF (.NOT.OK) THEN
		       IF (SW.EQ.SWATH .AND. I.EQ.1) GOTO 110
	               CALL LSL_PUTMSG(I2D__READIISERR)		
		       CALL LSL_PUTMSG(OK)
		       IF (OK.EQ.LSL__SYSREAD) CALL LSL_ADDMSG(IERR)	
	               GOTO 400
	            ENDIF
C
C Reset the cell counter
C
	            K = 0
	         ENDIF
C
C Write out the current value to the DTI file
C
	         OK = DTI_WRITE_BYTE_DATA(2,BLKBUF(K),J+(SW-1)*WIDTH,I)
	         IF (.NOT.OK) THEN
	            CALL LSL_PUTMSG(I2D__UNAWRIDTI)
		    CALL LSL_ADDMSG(OK)
	            GOTO 400
	         ENDIF
	         K = K+1
110	      CONTINUE
C
C	      IF (MOD(NROW-I,100).EQ.0 .AND. NROW-I.NE.0) THEN
C
	      IF (MOD(NROW-I+1,100).EQ.0 .AND. NROW-I.NE.0) THEN
	         CALL LSL_PUTMSG(I2D__NUMCOLSWA,NROW-I+1,SW)
	      END IF
120	   CONTINUE
130	CONTINUE
C
C Calculate the minimum and maximum values within the DTI file and write
C the values to the DTI header
C
	OK = DTI_MINMAX_DATA(2,.TRUE.,IERR)
	IF (.NOT.OK) THEN
	   CALL LSL_PUTMSG(I2D__UNAPCHDTI)
	   CALL LSL_PUTMSG(OK)
	   IF (OK.EQ.DTI__SYSERR) CALL LSL_ADDMSG(IERR) 
	   GOTO 400
	ENDIF
C
	GOTO 400
C
C.......................................................................
C Short integer data
C.......................................................................
C
C Create the DTI file
C
200	OK = DTI_CREATE(2,DTIFIL,DTILEN,1,,2,NCOL,NROW,IERR)
	IF (.NOT.OK) THEN
	   CALL LSL_PUTMSG(I2D__UNAOPNDTI)
	   CALL LSL_PUTMSG(OK)
	   IF (OK.EQ.DTI__SYSERR) CALL LSL_ADDMSG(IERR)	
	   GOTO 410
	ENDIF
C
C  Read header and set K to trigger another record read immediately
C
	OK = FLRLIN(BLKBUF,NBYTES,RECORD_LEN,IERR)	! get next record
	IF (.NOT.OK) THEN
	   CALL LSL_PUTMSG(I2D__READIISERR)
	   CALL LSL_PUTMSG(OK)
	   IF (OK.EQ.LSL__SYSREAD) CALL LSL_ADDMSG(IERR)	
	   GOTO 400
	ENDIF
C
	K = 256
C
C Calculate the number of swaths needed to convert. Over is the number
C of cells in the final swath.
C
	SWATH = INT(NCOL/256)
	OVER = MOD(NCOL,256)
	IF (OVER.NE.0) SWATH = SWATH+1
	IF (OVER.EQ.0) OVER = 256
C
C Loop for each swath
C
	DO 230 SW = 1,SWATH
C
C Loop for each row within the swath
C	  
	   DO 220 I = NROW,1,-1
C
C Set default width of swath and then override if necessary
C
	      WIDTH = 256
	      IF (SW.EQ.SWATH) WIDTH = OVER   
C
C Loop for each cell within the row
C
	      DO 210 J = 1,WIDTH
C
C If we have run out of data then read in the next record
C
	         IF (K.GE.WIDTH) THEN
	            OK = FLRLIN(BLKSHT,NBYTES,RECORD_LEN,IERR)	! get next 
C								! record
	            IF (.NOT.OK) THEN
		       IF(SW.EQ.SWATH.AND.I.EQ.1)GOTO 210
	               CALL LSL_PUTMSG(I2D__READIISERR)
		       CALL LSL_PUTMSG(OK)
		       IF (OK.EQ.LSL__SYSREAD) CALL LSL_ADDMSG(IERR)	
	               GOTO 400
	            ENDIF
C
C Reset the cell counter
C
	            K = 0
	         ENDIF
C
C Write out the current value to the DTI file
C
	         OK = DTI_WRITE_WORD_DATA(2,BLKSHT(K),J+(SW-1)*256,I)
	         IF (.NOT.OK) THEN
	            CALL LSL_PUTMSG(I2D__UNAWRIDTI)
		    CALL LSL_ADDMSG(OK)
	            GOTO 400
	         ENDIF
	         K = K+1
210	      CONTINUE
C
C	      IF (MOD(NROW-I,100).EQ.0 .AND. NROW-I.NE.0) THEN
C
	      IF (MOD(NROW-I+1,100).EQ.0 .AND. NROW-I.NE.0) THEN
		 CALL LSL_PUTMSG(I2D__NUMCOLSWA,NROW-I+1,SW)
	      END IF
220	   CONTINUE
230	CONTINUE
C
C Calculate the minimum and maximum values within the DTI file and 
C write the values to the DTI header
C
	OK = DTI_MINMAX_DATA(2,.TRUE.,IERR)
	IF (.NOT.OK) THEN
	   CALL LSL_PUTMSG(I2D__UNAPCHDTI)		
	   CALL LSL_PUTMSG(OK)
	   IF (OK.EQ.DTI__SYSERR) CALL LSL_ADDMSG(IERR)	
	   GOTO 400
	ENDIF
C
	GOTO 400
C
C.......................................................................
C Long integer data
C.......................................................................
C
C Create the DTI file
C
300	OK = DTI_CREATE(2,DTIFIL,DTILEN,1,,3,NCOL,NROW,IERR)
	IF (.NOT.OK) THEN
	   CALL LSL_PUTMSG(I2D__UNAOPNDTI)		
	   CALL LSL_PUTMSG(OK)
	   IF (OK.EQ.DTI__SYSERR) CALL LSL_ADDMSG(IERR)	
	   GOTO 410
	ENDIF
C
C  Read header and set K to trigger another record read immediately
C
	OK = FLRLIN(BLKBUF,NBYTES,RECORD_LEN,IERR)	! get next record
	IF (.NOT.OK) THEN
	   CALL LSL_PUTMSG(I2D__READIISERR)		
	   CALL LSL_PUTMSG(OK)
	   IF (OK.EQ.LSL__SYSREAD) CALL LSL_ADDMSG(IERR)	
	   GOTO 400
	ENDIF
C
	K = 128
C
C Calculate the number of swaths needed to convert. Over is the number
C of cells in the final swath.
C
	SWATH = INT(NCOL/128)
	OVER = MOD(NCOL,128)
	IF (OVER.NE.0) SWATH = SWATH+1
	IF (OVER.EQ.0) OVER = 128
C
C Loop for each swath
C
	DO 330 SW = 1,SWATH
C
C Loop for each row within the swath
C
	   DO 320 I = NROW,1,-1
C
C Set default width of swath and then override if necessary
C
	      WIDTH = 128
	      IF (SW.EQ.SWATH) WIDTH = OVER   
C
C Loop for each cell within the row
C
	      DO 310 J = 1,WIDTH
C
C If we have run out of data then read in the next record
C
	         IF (K.GE.WIDTH) THEN
	            OK =  FLRLIN(BLKLON,NBYTES,RECORD_LEN,IERR)	! get next
C								! record
	            IF (.NOT.OK) THEN
		       IF(SW.EQ.SWATH.AND.I.EQ.1)GOTO 310
	               CALL LSL_PUTMSG(I2D__READIISERR)
		       CALL LSL_PUTMSG(OK)
		       IF (OK.EQ.LSL__SYSREAD) CALL LSL_ADDMSG(IERR)	
	               GOTO 400
	            ENDIF
C
C Reset the cell counter
C
	            K = 0
	         ENDIF
C
C Write out the current value to the DTI file
C
	         OK = DTI_WRITE_LONG_DATA(2,BLKLON(K),J+(SW-1)*128,I)
	         IF (.NOT.OK) THEN
	            CALL LSL_PUTMSG(I2D__UNAWRIDTI)
		    CALL LSL_ADDMSG(OK)
	            GOTO 400
	         ENDIF
	         K = K+1
310	      CONTINUE
C
C	      IF (MOD(NROW-I,100).EQ.0 .AND. NROW-I.NE.0) THEN
C
	      IF (MOD(NROW-I+1,100).EQ.0 .AND. NROW-I.NE.0) THEN
		 CALL LSL_PUTMSG(I2D__NUMCOLSWA,NROW-I+1,SW)
	      END IF
320	   CONTINUE
330	CONTINUE
C
C Calculate the minimum and maximum values within the DTI file and 
C write the values to the DTI header
C
	OK = DTI_MINMAX_DATA(2,.TRUE.,IERR)
	IF (.NOT.OK) THEN
	   CALL LSL_PUTMSG(I2D__UNAPCHDTI)
	   CALL LSL_PUTMSG(OK)
	   IF (OK.EQ.DTI__SYSERR) CALL LSL_ADDMSG(IERR)	
	   GOTO 400
	ENDIF
C
C ......................................................................
400	CONTINUE
C
C Close the DTI file
C
	OK = DTI_CLOSE(2,.TRUE.,.FALSE.,IERR)
	IF (.NOT.OK) THEN
	   CALL LSL_PUTMSG(I2D__UNACLODTI)
	   CALL LSL_PUTMSG(OK)
	   IF (OK.EQ.DTI__SYSERR) CALL LSL_ADDMSG(IERR)	
	ENDIF
C
C Close the IIS file
C
410	OK = FLRCLO(1,IERR)
	IF (.NOT.OK) THEN
	   CALL LSL_PUTMSG(I2D__UNACLOIIS)
	   CALL LSL_PUTMSG(OK)
	   IF (OK.EQ.LSL__SYSCLOSE) CALL LSL_ADDMSG(IERR)	
	ENDIF
C
450	CALL LSL_EXIT(OK)
C
	STOP ' '
	END 
C
