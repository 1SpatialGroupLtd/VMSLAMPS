C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-06-05 11:32:26.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	PROGRAM BLOCK_COPY
C
***	MODULE BLOCK_COPY
***	IDENT 05JN92
C
C © Copyright Laser-Scan Ltd., Cambridge, England
C Author Jon Barber		27th March 1990
C
C To read a blocked file, stripping out selected blocks
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE 'LSL$CMNLSL:CLD.CMN'
C
C Functions
C
	INTEGER		FLROPB
	INTEGER		FLRBLK
	INTEGER		FLWOPB
	INTEGER		FLWBLK
C
	INTEGER		DCL_STARTUP	! Gets parsed command line
	INTEGER		DCL_FILE	! Reads and parses file titles from the 
					! command line
	INTEGER		DCL_QUAL	! Reads a qualifier
	INTEGER		DCL_INT		! Reads integers from qualifier
	EXTERNAL	BLOCK_COPY_CLD
C
C W/s
	INTEGER		INLUN
	PARAMETER	(INLUN=1)
	INTEGER		OUTLUN
	PARAMETER	(OUTLUN=2)
C
	LOGICAL		OK,ABSENT
	INTEGER	  	I,J,K		
	INTEGER		ERROR,IERR,READ
	BYTE		BUFFER(512)
	LOGICAL		LOCAL,LOCNEG
	LOGICAL		HAD_SKIP
	INTEGER		MAX_SKIP		! largest block to skip
	INTEGER		MIN_SKIP		! smallest block to skip
C
	INTEGER		INLEN,OUTLEN
	CHARACTER*128	INFIL,OUTFIL
C
	CALL LSL_INIT
	HAD_SKIP = .FALSE.
C
C Decode the command line
C
	OK = DCL_STARTUP('BLOCK_COPY',.FALSE.,BLOCK_COPY_CLD,.TRUE.)
C
C Get the name of the IN file
C
	IF (OK) THEN
	   OK = DCL_FILE('P1','IN.IMAGE',ABSENT,.FALSE.,.TRUE.)
	   IF (OK) CALL EXPFLN(INFIL,INLEN)
	ENDIF
C
C Get the name of the OUT file
C
	IF (OK) THEN
	   OK = DCL_FILE('P2','OUT.IMAGE',ABSENT,.FALSE.,.TRUE.)
	   IF (OK) CALL EXPFLN(OUTFIL,OUTLEN)
	ENDIF
C
C Check /SKIP
C
	IF (OK) THEN
	   OK = DCL_QUAL('SKIP',HAD_SKIP,LOCAL,LOCNEG,.TRUE.)
	   IF (.NOT.OK) GOTO 900
	ENDIF
C
C Get the blocks to omit into IARRAY(I), I = 1,NUMINT
C
	IF (HAD_SKIP) THEN
	   OK = DCL_INT('SKIP',.TRUE.)
	   IF (.NOT.OK) GOTO 900
C
C Get the largest and smallest block to skip
C
	   MAX_SKIP = IARRAY(1)
	   MIN_SKIP = IARRAY(1)
	   DO 4 I = 2,NUMINT
	      IF (IARRAY(I).GT.MAX_SKIP) THEN
		 MAX_SKIP = IARRAY(I)
	      ELSEIF (IARRAY(I).LT.MIN_SKIP) THEN
		 MIN_SKIP = IARRAY(I)
	      ENDIF
4	   CONTINUE
C
	ENDIF
C
C Open the IN file
C
	OK = FLROPB(INLUN,INFIL,IERR)
	IF (.NOT.OK) THEN
	   CALL WRITEF ('Error opening input file')
	   CALL LSL_PUTMSG(OK)
	   IF (OK.EQ.LSL__SYSERR) CALL LSL_PUTMSG(IERR)
	   GOTO 900
	ENDIF
C
C Create the OUT file
C
	OK = FLWOPB(OUTLUN,OUTFIL,IERR)
	IF (.NOT.OK) THEN
	   CALL WRITEF ('Error opening output file')
	   CALL LSL_PUTMSG(OK)
	   IF (OK.EQ.LSL__SYSERR) CALL LSL_PUTMSG(IERR)
	   GOTO 900
	ENDIF
C
C Read the next input block
C
500	CALL FLRSEL(INLUN)
C
	OK = FLRBLK(0,BUFFER,READ,IERR)
	IF (OK.EQ.LSL__EOF) THEN
	   OK = LSL__NORMAL
	   GOTO 900
	ENDIF
C
	IF (.NOT.OK) THEN
	   CALL WRITEF ('Error reading input file block %N',READ)
	   CALL LSL_PUTMSG(OK)
	   IF (OK.EQ.LSL__SYSREAD) CALL LSL_PUTMSG(IERR)
	   GOTO 900
	ENDIF
C
C Check if this block needs to be omitted
C
	IF (HAD_SKIP) THEN
C Won't find this block to skip in IARRAY, so copy
C
	   IF (READ.GT.MAX_SKIP .OR. READ.LT.MIN_SKIP) GOTO 100
C
C Check if to skip this block
C
	   DO 5 I = 1,NUMINT
	      IF (READ.EQ.IARRAY(I)) GOTO 500	! omit this block
5	   CONTINUE
	ENDIF
C
C Copy this block to the output file
C
100	CALL FLRSEL(OUTLUN)
C
	OK = FLWBLK(0,BUFFER,READ,IERR)
C
	IF (.NOT.OK) THEN
	   CALL WRITEF ('Error writing output file block %N',READ)
	   CALL LSL_PUTMSG(OK)
	   IF (OK.EQ.LSL__SYSWRITE) CALL LSL_PUTMSG(IERR)
	   GOTO 900
	ENDIF
C
	GOTO 500					! get next block
C
900	CALL LSL_EXIT(OK)
	CALL EXIT
	END 
C
