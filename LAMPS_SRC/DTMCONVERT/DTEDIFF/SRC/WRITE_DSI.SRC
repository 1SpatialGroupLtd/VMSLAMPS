	INTEGER*4 FUNCTION WRITE_DSI()
C
***	IDENT 19DE95
***	MODULE WRITE_DSI
C
C Author CC Brunt, 1 November 1983
C from originals by M Dhillon
C Modified for new version of DTEDIFF 				DRC 08-Jun-1988
C
CMOD1515 Use spaces for fields instead of the default NULL	JDB 05-Dec-1995
C
C This function produces a Data Set Identification (DSI) using
C information in an MCE map header. 
C It is similar to that of the same name in I2DFAD
C
	IMPLICIT NONE
C
C Parameter file
C
***	PARAMETER/LSL$CMNDLMS:FORMAT/
***	PARAMETER/LSL$CMNDTI:DTILIBMSG/
***	PARAMETER/HERE:DTEDIFFMSG/
C
***	COMMON /HERE:PARAMS/
***	COMMON /LSL$CMNIFF:MHMCE/
C
C Workspace
	BYTE		DSI_BUFFER(648)		! to hold the DSI record
	INTEGER*4	PTR			! pointer into DSI record
	INTEGER*4	OK			! function return
	INTEGER*4	ERROR			! system error
	CHARACTER*50	WHERE			! for where an error occurred
	CHARACTER*50	BLANK			! blank char field
	INTEGER		I			! count
C
C Functions
	INTEGER*4	DTI_COPY_BYTE_HEADER	! transfer DSI to DTI
	INTEGER*4	ADDANG			! .1 seconds to DDMMSS
	INTEGER*4	ADDDAT			! binary days conversion
C
C-------------------------------------------------------------------
C Initialise 
C
	BLANK = ' '
C
	DO 11 I = 1,648
	   DSI_BUFFER(I) = ICHAR(' ')
11	CONTINUE
C
C Reset pointer
	PTR = 1
C 
C The first three characters are the DSI sentinel.
C
	CALL EXPAND('%WDSI', DSI_BUFFER(PTR))
	PTR = PTR + 3
C
C Next the Security Classification code, followed by two characters
C which correspond to the Security Control and Release markings, and
C are reserved DoD use only, we shall leave these blank.
C
	WHERE = 'Security code descriptor'
C
	IF (CHAR(MHSECD).EQ.' ') THEN
	   CALL EXPAND('%W%S1', DSI_BUFFER(PTR), ' ')
C
	ELSE
	   CALL EXPAND('%W%A1', DSI_BUFFER(PTR), MHSECD)
	ENDIF
C
	IF (HAD_LOG) CALL WRITEF('%S %A1',WHERE, DSI_BUFFER(PTR))
C
	PTR = PTR + 3
C
C .....and so to the Security handling description
	WHERE = 'Security handling descriptor'
C
	IF (CHAR(MHSHD(1)).EQ.' ') THEN
	   CALL EXPAND('%W%S27', DSI_BUFFER(PTR), BLANK(1:27))
C
	ELSE
	   CALL EXPAND('%W%A27', DSI_BUFFER(PTR), MHSHD)
	ENDIF
C
	IF (HAD_LOG) CALL WRITEF('%S %A27',WHERE, DSI_BUFFER(PTR))
C
	PTR = PTR + 27
C
C .....and 26 blanks ie.: reserved for future use.
	PTR = PTR + 26
C
C Next the DMA series Designator for product type
C - first the text part of it from the TASK name
	WHERE = 'Series designator - task'
C
	IF (CHAR(MHTASK(1)).EQ.' ') THEN
	   CALL EXPAND('%W%S4', DSI_BUFFER(PTR), BLANK(1:4))
C
	ELSE
	   CALL EXPAND('%W%A4', DSI_BUFFER(PTR), MHTASK)
	ENDIF
C
	IF (HAD_LOG) CALL WRITEF('%S %A4',WHERE, DSI_BUFFER(PTR))
C
	PTR = PTR + 4
C
C - and then the digit part from the LEVEL number
	WHERE = 'Series designator - level'
C
	IF (MHLEV.EQ.' ') THEN
	   CALL EXPAND('%W%S1', DSI_BUFFER(PTR), ' ')
C
	ELSE
	   CALL EXPAND('%W%^B%I1',DSI_BUFFER(PTR), MHLEV)
	ENDIF
C
	IF (HAD_LOG) CALL WRITEF('%S %A1',WHERE, DSI_BUFFER(PTR))
C
	PTR = PTR + 1
C
C ....and the unique manuscript number
	WHERE = 'Unique reference code'
C
	IF (CHAR(MHREFN(1)).EQ.' ') THEN
	   CALL EXPAND('%W%S15', DSI_BUFFER(PTR), BLANK(1:15))
C
	ELSE
	   CALL EXPAND('%W%A15', DSI_BUFFER(PTR), MHREFN)
	ENDIF
C
	IF (HAD_LOG) CALL WRITEF('%S %A15',WHERE, DSI_BUFFER(PTR))
C
	PTR = PTR + 15
C
C ....the next 8 characters are reserved for future use ie: blanks
	PTR = PTR + 8
C
C ....and the data edition number
	WHERE = 'Data edition number'
C
	IF (MHEDN.EQ.' ') THEN
	   CALL EXPAND('%W%S2', DSI_BUFFER(PTR), '  ')
C
	ELSE
	   CALL EXPAND('%W%P0%^B%I2', DSI_BUFFER(PTR), MHEDN)
	ENDIF
C
	IF (HAD_LOG) CALL WRITEF('%S %A2',WHERE, DSI_BUFFER(PTR))
C
	PTR = PTR + 2
C
C ....and the match/merge version
	WHERE = 'Match/merge version'
C
	IF (MHMMV.EQ.' ') THEN
	   CALL EXPAND('%W%S1', DSI_BUFFER(PTR), ' ')
C
	ELSE
	   CALL EXPAND('%W%A1', DSI_BUFFER(PTR), MHMMV)
	ENDIF
C
	IF (HAD_LOG) CALL WRITEF('%S %A1',WHERE, DSI_BUFFER(PTR))
C
	PTR = PTR + 1
C
C ....and then the maintenance date, this must be output in the format
C YYMM. Since it is present in the map header in terms of binary days
C since whenever, a routine must be called to convert from binary days 
C to a calender date and then put it in DSI
	WHERE = 'Maintenance date'
C
	OK = ADDDAT(DSI_BUFFER(PTR), MHMDTE, YYMM, .FALSE.)
C
	IF (HAD_LOG) CALL WRITEF('%S %A4', WHERE, DSI_BUFFER(PTR))
C
	PTR = PTR + 4
C
C ....and similarly for the match/merge date
	WHERE = 'Match/merge date'
C
	OK = ADDDAT(DSI_BUFFER(PTR), MHMMD, YYMM, .FALSE.)
C
	IF (HAD_LOG) CALL WRITEF('%S %A4',WHERE, DSI_BUFFER(PTR))
C
	PTR = PTR + 4
C
C ....and on to the maintenance description code
	WHERE = 'Maintenance description code'
C
	CALL EXPAND('%W%A4', DSI_BUFFER(PTR), MHMCDE)
C
	IF (HAD_LOG) CALL WRITEF('%S %A4',WHERE, DSI_BUFFER(PTR))
C
	PTR = PTR + 4
C
C ....and the producer codes
	WHERE = 'Producer code'
C
	IF (MHPCDE(1).EQ.' ') THEN
	   CALL EXPAND('%W%S8', DSI_BUFFER(PTR), BLANK(1:8))
C
	ELSE
	   CALL EXPAND('%W%A8', DSI_BUFFER(PTR), MHPCDE)
	ENDIF
C
	IF (HAD_LOG) CALL WRITEF('%S %A8',WHERE, DSI_BUFFER(PTR))
C
	PTR = PTR + 8
C
C The next 16 spaces are reserved for future use ie.: blanks
	PTR = PTR + 16
C
C ...and on to the product specification  stock number
	WHERE = 'Product spec stock number'
C
	IF (CHAR(MHPSSN(1)).EQ.' ') THEN
	   CALL EXPAND('%W%S9', DSI_BUFFER(PTR), BLANK(1:9))
C
	ELSE
	   CALL EXPAND('%W%A9', DSI_BUFFER(PTR), MHPSSN)
	ENDIF
C
	IF (HAD_LOG) CALL WRITEF('%S %A9',WHERE, DSI_BUFFER(PTR))
C
	PTR = PTR + 9
C
C ...and the product spec change number 
	WHERE = 'Product spec change number'
C
	IF (CHAR(MHPSCN).EQ.' ') THEN
	   CALL EXPAND('%W%S2', DSI_BUFFER(PTR), '  ')
C
	ELSE
	   CALL EXPAND('%W%P0%^B%I2', DSI_BUFFER(PTR), MHPSCN)
	ENDIF
C
	IF (HAD_LOG) CALL WRITEF('%S %A2',WHERE, DSI_BUFFER(PTR))
C
	PTR = PTR + 2
C
C ...and the product specification date
	WHERE = 'Product spec date'
C
	OK = ADDDAT(DSI_BUFFER(PTR),MHPSDT,YYMM,.FALSE.)
C
	IF (HAD_LOG) CALL WRITEF('%S %A4',WHERE, DSI_BUFFER(PTR))
C
	PTR = PTR + 4
C
C ....and the vertical Datum (Mean Sea Level)
	WHERE = 'Vertical datum'
C
	IF (CHAR(MHVDTM(1)).EQ.' ') THEN
	   CALL EXPAND('%W%S3', DSI_BUFFER(PTR), BLANK(1:3))
C
	ELSE
	   CALL EXPAND('%W%A3', DSI_BUFFER(PTR), MHVDTM)
	ENDIF
C
	IF (HAD_LOG) CALL WRITEF('%S %A3',WHERE, DSI_BUFFER(PTR))
C
	PTR = PTR + 3
C
C ...and the horizontal datum code
	WHERE = 'Horizontal datum'

	IF (CHAR(MHHDTM(1)).EQ.' ') THEN
	   CALL EXPAND('%W%S5', DSI_BUFFER(PTR), BLANK(1:5))
C
	ELSE
	   CALL EXPAND('%W%A5', DSI_BUFFER(PTR), MHHDTM)
	ENDIF
C
	IF (HAD_LOG) CALL WRITEF('%S %A5',WHERE, DSI_BUFFER(PTR))
C
	PTR = PTR + 5
C
C ...and the digitising collection system
	WHERE = 'Digitising collection system'
C
	IF (CHAR(MHDSYS(1)).EQ.' ') THEN
	   CALL EXPAND('%W%S10', DSI_BUFFER(PTR), BLANK(1:10))
C
	ELSE
	   CALL EXPAND('%W%A10', DSI_BUFFER(PTR), MHDSYS)
	ENDIF
C
	IF (HAD_LOG) CALL WRITEF('%S %A10',WHERE, DSI_BUFFER(PTR))
C
	PTR = PTR + 10
C
C ...and the compilation date
	WHERE = 'Compilation date'
C
	OK = ADDDAT(DSI_BUFFER(PTR),MHCDTE,YYMM,.FALSE.)
C
	IF (HAD_LOG) CALL WRITEF('%S %A4',WHERE, DSI_BUFFER(PTR))
C
	PTR = PTR + 4
C
C This is reserved for 22 chars reserved for future use ie.:blanks
	PTR = PTR + 22
C
C The latitudes and longitudes of co-ordinates are represented in the 
C map header in terms of integer tenths of a second. The DTED format 
C requires them to be in degrees, minutes, and seconds.
C Therefore it is necessary to make this conversion before
C output. So now we call a routine to do all those
C things for the latitude of the manuscript origin.
C
	WHERE = 'Manuscript origin (lat) '
C
	OK=ADDANG(DSI_BUFFER(PTR),MHLAMO,DD,TENTH,HEMI)
C
	IF (HAD_LOG) CALL WRITEF('%S %A9',WHERE, DSI_BUFFER(PTR))
C
	PTR = PTR + 9
C
C ...and similarly for the longitude of the manuscript origin
	WHERE = 'Manuscript origin (long)'
C
	OK=ADDANG(DSI_BUFFER(PTR),MHLOMO,DDD,TENTH,HEMI)
C
	IF (HAD_LOG) CALL WRITEF('%S %A10',WHERE, DSI_BUFFER(PTR))
C
	PTR = PTR + 10
C
C ...and the same for the latitude of the SW corner
	WHERE = 'South west corner (lat) '
C
	OK=ADDANG(DSI_BUFFER(PTR),MHLASW,DD,NOTENTH,HEMI)
C
	IF (HAD_LOG) CALL WRITEF('%S %A7',WHERE, DSI_BUFFER(PTR))
C
	PTR = PTR + 7
C
C ...and of course the longitude of the SW corner
	WHERE = 'South west corner (long)'
C
	OK=ADDANG(DSI_BUFFER(PTR),MHLOSW,DDD,NOTENTH,HEMI)

	IF (HAD_LOG) CALL WRITEF('%S %A8',WHERE, DSI_BUFFER(PTR))
C
	PTR = PTR + 8
C
C ...and the same for the latitude of the NW corner
	WHERE = 'North west corner (lat) '
C
	OK=ADDANG(DSI_BUFFER(PTR),MHLANW,DD,NOTENTH,HEMI)
C
	IF (HAD_LOG) CALL WRITEF('%S %A7',WHERE, DSI_BUFFER(PTR))
C
	PTR = PTR + 7
C
C ...and of course the longitude of the NW corner
	WHERE = 'North west corner (long)'
C
	OK=ADDANG(DSI_BUFFER(PTR),MHLONW,DDD,NOTENTH,HEMI)
C
	IF (HAD_LOG) CALL WRITEF('%S %A8',WHERE, DSI_BUFFER(PTR))
C
	PTR = PTR + 8
C
C ...and the same for the latitude of the NE corner
	WHERE = 'North east corner (lat) '
C
	OK=ADDANG(DSI_BUFFER(PTR),MHLANE,DD,NOTENTH,HEMI)
C
	IF (HAD_LOG) CALL WRITEF('%S %A7',WHERE, DSI_BUFFER(PTR))
C
	PTR = PTR + 7
C
C ...and of course the longitude of the NE corner
	WHERE = 'North east corner (long)'
C
	OK=ADDANG(DSI_BUFFER(PTR),MHLONE,DDD,NOTENTH,HEMI)
C
	IF (HAD_LOG) CALL WRITEF('%S %A8',WHERE, DSI_BUFFER(PTR))
C
	PTR = PTR + 8
C
C ...and the same for the latitude of the SE corner
	WHERE = 'South east corner (lat) '
C
	OK=ADDANG(DSI_BUFFER(PTR),MHLASE,DD,NOTENTH,HEMI)
C
	IF (HAD_LOG) CALL WRITEF('%S %A7',WHERE, DSI_BUFFER(PTR))
C
	PTR = PTR + 7
C
C ...and of course the longitude of the SE corner
	WHERE = 'South east corner (long)'
C
	OK=ADDANG(DSI_BUFFER(PTR),MHLOSE,DDD,NOTENTH,HEMI)
C
	IF (HAD_LOG) CALL WRITEF('%S %A8',WHERE, DSI_BUFFER(PTR))
C
	PTR = PTR + 8
C
C and the Clockwise Orientation of data
	WHERE = 'Clockwise orientation of data'
C
	OK=ADDANG(DSI_BUFFER(PTR),MHCLOD,DDD,TENTH,NOHEMI)
C
	IF (HAD_LOG) CALL WRITEF('%S %A9',WHERE, DSI_BUFFER(PTR))
C
	PTR = PTR + 9
C
C latitude interval
	WHERE = 'Latitude interval'
C
	CALL EXPAND('%W%P0%I4',DSI_BUFFER(PTR),MHLAIN)
C
	IF (HAD_LOG) CALL WRITEF('%S %A4',WHERE, DSI_BUFFER(PTR))
C
	PTR = PTR + 4
C
C longitude interval
	WHERE = 'Longitude interval'
C
	CALL EXPAND('%W%P0%I4',DSI_BUFFER(PTR),MHLOIN)
C
	IF (HAD_LOG) CALL WRITEF('%S %A4',WHERE, DSI_BUFFER(PTR))
C
	PTR = PTR + 4
C
C number of latitude lines (extent)
	WHERE = 'Number of latitude lines'
C
	CALL EXPAND('%W%P0%I4',DSI_BUFFER(PTR),MHLALI)
C
	IF (HAD_LOG) CALL WRITEF('%S %A4',WHERE, DSI_BUFFER(PTR))
C
	PTR = PTR + 4
C
C number of longitude lines (extent)
	WHERE = 'Number of longitude lines'
C
	CALL EXPAND('%W%P0%I4',DSI_BUFFER(PTR),MHLOLI)
C
	IF (HAD_LOG) CALL WRITEF('%S %A4',WHERE, DSI_BUFFER(PTR))
C
	PTR = PTR + 4
C
C Partial cell indicator
	WHERE = 'Partial cell indicator'
C
	CALL EXPAND('%W%^B%P0%I2',DSI_BUFFER(PTR),MHPCIN)
C
	IF (HAD_LOG) CALL WRITEF('%S %A2',WHERE, DSI_BUFFER(PTR))
C
	PTR = PTR + 2
C
C The next 101 chars are reserved for DMA use only, so leave blank 
	PTR = PTR + 101
C
C The next 100 chars are reserved for the producing nation use only, so
C leave blank
	PTR = PTR + 100
C
C Finally the last 156 chars are reserved for future use ie.:blank
	PTR = PTR + 156
C
C	Write the record to the DTI file
C
	WRITE_DSI=DTI_COPY_BYTE_HEADER(1,DSI_BUFFER,.TRUE.,648,236,ERROR)
C
	IF(.NOT.WRITE_DSI)THEN
	  CALL LSL_PUTMSG(WRITE_DSI)
	  IF(WRITE_DSI.EQ.DTI__SYSERR)CALL LSL_PUTMSG(ERROR)
	  WRITE_DSI=DTEDIFF__BADTRANSFER
	ENDIF
C	
1000	RETURN
	END
C
