	INTEGER*4 FUNCTION READ_DSI()
C
***	IDENT	07NO95
***	MODULE	READ_DSI
C
C	Copyright Laser-Scan Ltd., Cambridge, England
C
C Author CC Brunt, 27 October 1983
C Modified for new version of DTEDIFF by DRC 		08-Jun-1988
C
CMOD1515 Set fields to spaces, instead of the default NULL bytes,
C	 before using					07-Nov-1995
C
C This subroutine reads a DTED DSI (Date Set Identification) block which
C it expects to find in a mapped section file.
C NB This routine is closely based on that of the same name in DFAD2I
C
	IMPLICIT NONE
C
***	PARAMETER/LSL$CMNDLMS:FORMAT/		! angle formats
***	PARAMETER/LSL$CMNDTI:DTILIBMSG/
***	PARAMETER/HERE:DTEDIFFMSG/
C
***	COMMON/HERE:PARAMS/
C
***	COMMON/LSL$CMNIFF:MHMCE/		! MCE map header
***	COMMON/LSL$CMNLSL:TXTC/
C
C functions called
	LOGICAL		RDINT		! read an integer(*2)
	INTEGER*4	DTI_COPY_BYTE_HEADER
	INTEGER*4	RDTEXT		! read a block of text
	INTEGER*4	RDFANG		! read fixed format angle
	INTEGER*4	RDYYMM		! read a YYMM date
	INTEGER*4	OUTANG		! .1 to DDMMSS and appends to EXPBUF
	INTEGER*4	OUTDAT		! binary days conversion
C
C workspace
	BYTE		DSI_BUFFER(648)
	INTEGER*4	ERROR		! system error
	INTEGER*4	OK		! function return
	INTEGER*4	I		! counter
	INTEGER*2	DCP1		! decode pointer save
C
	BYTE		IGNORE(50)	! data to ignore
	CHARACTER*50	WHERE		! for where an error occurred
C
	INTEGER*2	NUMBER		! word version
	BYTE		NUMBYT		! byte version
	EQUIVALENCE    (NUMBER, NUMBYT)
C
C---------------------------------------------------------------------
C Initialise IGNORE to spaces
C
	DO 5 I = 1,50
	   IGNORE(I) = ICHAR(' ')
5	CONTINUE
C
C Copy from the DTI file header area to our local ACC buffer
C
	READ_DSI=DTI_COPY_BYTE_HEADER(1, DSI_BUFFER, .FALSE.,
     &                                640, 236, ERROR)
	IF (.NOT.READ_DSI) THEN
	   CALL LSL_PUTMSG(READ_DSI)
	   IF (READ_DSI.EQ.DTI__SYSERR) CALL LSL_PUTMSG(ERROR)
	   READ_DSI = DTEDIFF__BADTRANSFER
	   GOTO 999
	ENDIF
C
C Set up DSI record as our current text buffer
C
	CALL SETAUX(DSI_BUFFER, 640)
	CALL DCPSAV(DCP1)
C
C the first three characters should be DSI
C
	IF (DSI_BUFFER(1).NE.'D' .OR. DSI_BUFFER(2).NE.'S' .OR.
     &	    DSI_BUFFER(3).NE.'I') THEN
	  CALL LSL_PUTMSG(DTEDIFF__BADDSISENT)
	  GOTO 999
	ENDIF
C
	DCPTR=4
C
C so we have our block ID - we can carry on with the rest now.
C
C the very first character is the security classification code
C
	WHERE = 'Security code descriptor'
C
	MHSECD = ICHAR(' ')
	IF (.NOT.RDTEXT(MHSECD, 1)) GOTO 900
C
	IF (HAD_LOG) CALL WRITEF('%S %A1', WHERE, MHSECD)
C
C the next two characters are 'for DoD use only' security control and
C release markings - we shall ignore them for the moment
C
	WHERE = 'Security/release control'
C
	IGNORE(1) = ICHAR(' ')
	IGNORE(2) = ICHAR(' ')
C
	IF (.NOT.RDTEXT(IGNORE, 2)) GOTO 900
C
	IF (HAD_LOG) CALL WRITEF('%S %A2', WHERE, IGNORE(1))
C
C now we deal with the security handling description - this we can copy
C straight across into the map header
C
	WHERE = 'Security handling descriptor'
C
	DO 10 I=1,27
	   MHSHD(I) = ICHAR(' ')
10	CONTINUE
C
	IF (.NOT.RDTEXT(MHSHD, 27)) GOTO 900
C
	IF (HAD_LOG) CALL WRITEF('%S %A27', WHERE, MHSHD(1))
C
C we must ignore the next bit...
C
	WHERE = 'Reserved field 1'
C
	DO 15 I=1,26
	   IGNORE(I) = ICHAR(' ')
15	CONTINUE
C
	IF (.NOT.RDTEXT(IGNORE, 26)) GOTO 900
C
C next we have the Series Designator - this is read as two parts into
C the map header
C
	WHERE = 'Series designator - task'

	DO 20 I=1,4
	   MHTASK(I) = ICHAR(' ')
20	CONTINUE
C
	IF (.NOT.RDTEXT(MHTASK, 4)) GOTO 900
C
	IF (HAD_LOG) CALL WRITEF('%S %A4', WHERE, MHTASK(1))
C
C and the second part
C
	WHERE = 'Series designator - level'
C
	CALL SETWIN( , 1)			! only one digit
	IF (RDINT(NUMBER)) GOTO 900
	CALL SETWIN( , )
C
	MHLEV = NUMBYT				! copy the digit
C
	IF (HAD_LOG) CALL WRITEF('%S %^B%N', WHERE, MHLEV)
C
C and we then have a unique reference code for this manuscript...
C
	WHERE = 'Unique reference code'
C
	DO 25 I = 1,15
	   MHREFN(I) = ICHAR(' ')
25	CONTINUE
C
	IF (.NOT.RDTEXT(MHREFN, 15)) GOTO 900
C
	IF (HAD_LOG) CALL WRITEF('%S %A15', WHERE, MHREFN)
C
C and another block to ignore
C
	WHERE = 'Reserved block 2'
C
	DO 30 I = 1,8
	   IGNORE(I) = ICHAR(' ')
30	CONTINUE
C
	IF (.NOT.RDTEXT(IGNORE, 8)) GOTO 900
C
C so we can now read in the data edition number
C
	WHERE = 'Data edition number'
C
	CALL SETWIN( , 2)			! only 2 digits
	IF (RDINT(NUMBER)) GOTO 900
	CALL SETWIN( , )
C
	MHEDN = NUMBYT				! copy it over
C
	IF (HAD_LOG) CALL WRITEF('%S %N', WHERE, MHEDN)
C
C and then the match/merge version
C
	WHERE = 'Match/merge version'
C
	MHMMV = ICHAR(' ')
C
	IF (.NOT.RDTEXT(MHMMV, 1)) GOTO 900
C
	IF (HAD_LOG) CALL WRITEF('%S %A1', WHERE, MHMMV)
C
C and two dates, which we shall read cunningly
C
	WHERE = 'Maintenance date'
C
	IF (.NOT.RDYYMM(MHMDTE)) GOTO 900
C
	IF (HAD_LOG) THEN
	   CALL EXPAND('%S', WHERE)
	   OK = OUTDAT(MHMDTE)
	ENDIF
C
	WHERE = 'Match/merge date'
C
	IF (.NOT.RDYYMM(MHMMD)) GOTO 900
C
	IF (HAD_LOG) THEN
	   CALL EXPAND('%S', WHERE)
	   OK = OUTDAT(MHMMD)
	ENDIF
C
C and we're back to copying for the maintenance description code
C
	WHERE = 'Maintenance description code'
C
	DO 35 I = 1,4
	   MHMCDE(I) = ICHAR(' ')
35	CONTINUE
C
	IF (.NOT.RDTEXT(MHMCDE, 4)) GOTO 900
C
	IF (HAD_LOG) CALL WRITEF('%S %A4', WHERE, MHMCDE(1))
C
C next comes the producer code
C
	WHERE = 'Producer code'
C
	DO 40 I = 1,8
	   MHPCDE(I) = ICHAR(' ')
40	CONTINUE
C
	IF (.NOT.RDTEXT(MHPCDE, 8)) GOTO 900
C
	IF (HAD_LOG) CALL WRITEF('%S %A8', WHERE, MHPCDE(1))
C
C ignore some more
C
	WHERE = 'Reserved field 3'
C
	DO 45 I = 1,16
	   IGNORE(I) = ICHAR(' ')
45	CONTINUE
C
	IF (.NOT.RDTEXT(IGNORE, 16)) GOTO 900
C
C and after that we have the product spec. stock 'number'
C
	WHERE = 'Product spec stock number'
C
	DO 50 I = 1,9
	   MHPSSN(I) = ICHAR(' ')
50	CONTINUE
C
	IF (.NOT.RDTEXT(MHPSSN, 9)) GOTO 900
C
	IF (HAD_LOG) CALL WRITEF('%S %A9', WHERE, MHPSSN(1))
C
C next let's read the product specification change number
C
	WHERE = 'Product spec change number'
C
	CALL SETWIN( , 2)			! only 2 digits
	IF (RDINT(NUMBER)) GOTO 900
	CALL SETWIN( , )
C
	MHPSCN = NUMBYT
C
	IF (HAD_LOG) CALL WRITEF('%S %N', WHERE, MHPSCN)
C
C and another date - the product spec date
C
	WHERE = 'Product spec date'
C
	IF (.NOT.RDYYMM(MHPSDT)) GOTO 900
C
	IF (HAD_LOG) THEN
	   CALL EXPAND('%S', WHERE)
	   OK = OUTDAT(MHPSDT)
	ENDIF
C
C back to straight copying again for the vertical datum
C
	WHERE = 'Vertical datum'
C
	DO 55 I = 1,3
	   MHVDTM(I) = ICHAR(' ')
55	CONTINUE
C
	IF (.NOT.RDTEXT(MHVDTM, 3)) GOTO 900
C
	IF (HAD_LOG) CALL WRITEF('%S %A3', WHERE, MHVDTM )
C
C followed by the horizontal datum
C
	WHERE = 'Horizontal datum'
C
	DO 60 I = 1,5
	   MHHDTM(I) = ICHAR(' ')
60	CONTINUE
C
	IF (.NOT.RDTEXT(MHHDTM, 5)) GOTO 900
C
	IF (HAD_LOG) CALL WRITEF('%S %A5', WHERE, MHHDTM)
C
C and then the collection system
C
	WHERE = 'Digitising collection system'
C
	DO 65 I = 1,10
	   MHDSYS(I) = ICHAR(' ')
65	CONTINUE
C
	IF (.NOT.RDTEXT(MHDSYS, 10)) GOTO 900
C
	IF (HAD_LOG) CALL WRITEF('%S %A10', WHERE, MHDSYS)
C
C and then we have the compilation date
C
	WHERE = 'Compilation date'
C
	IF (.NOT.RDYYMM(MHCDTE)) GOTO 900
C
	IF (HAD_LOG) THEN
	   CALL EXPAND('%S', WHERE)
	   OK = OUTDAT(MHCDTE)
	ENDIF
C
C and ignore some more
C
	WHERE = 'Reserved field 4'
C
	DO 70 I = 1,22
	   IGNORE(I) = ICHAR(' ')
70	CONTINUE
C
	IF (.NOT.RDTEXT(IGNORE, 22)) GOTO 900
C
C followed by some origin information... (all in hemisphere format)
C
	WHERE = 'Manuscript origin (lat) '
C
	IF (.NOT.RDFANG(DD, TENTH, HEMI, MHLAMO)) GOTO 900
C
	IF (HAD_LOG) THEN
	   CALL EXPAND('%S', WHERE)
	   OK = OUTANG(MHLAMO)
	ENDIF
C
	WHERE = 'Manuscript origin (long)'
C
	IF (.NOT.RDFANG(DDD, TENTH, HEMI, MHLOMO)) GOTO 900
C
	IF (HAD_LOG) THEN
	   CALL EXPAND('%S', WHERE)
	   OK = OUTANG(MHLOMO)
	ENDIF
C
C and some information about the extent of the map
C
	WHERE = 'South west corner (lat) '
C
	IF (.NOT.RDFANG(DD, NOTENTH, HEMI, MHLASW)) GOTO 900
C
	IF (HAD_LOG) THEN
	   CALL EXPAND('%S', WHERE)
	   OK = OUTANG(MHLASW)
	ENDIF
C
	WHERE = 'South west corner (long)'
C
	IF (.NOT.RDFANG(DDD, NOTENTH, HEMI, MHLOSW)) GOTO 900
C
	IF (HAD_LOG) THEN
	   CALL EXPAND('%S', WHERE)
	   OK = OUTANG(MHLOSW)
	ENDIF
C
C
	WHERE = 'North west corner (lat) '
C
	IF (.NOT.RDFANG(DD, NOTENTH, HEMI, MHLANW)) GOTO 900
C
	IF (HAD_LOG) THEN
	   CALL EXPAND('%S', WHERE)
	   OK=OUTANG(MHLANW)
	ENDIF
C
	WHERE = 'North west corner (long)'
C
	IF (.NOT.RDFANG(DDD, NOTENTH, HEMI, MHLONW)) GOTO 900
C
	IF (HAD_LOG) THEN
	   CALL EXPAND('%S', WHERE)
	   OK = OUTANG(MHLONW)
	ENDIF
C
C
	WHERE = 'North east corner (lat) '
C
	IF (.NOT.RDFANG(DD, NOTENTH, HEMI, MHLANE)) GOTO 900
C
	IF (HAD_LOG) THEN
	   CALL EXPAND('%S', WHERE)
	   OK = OUTANG(MHLANE)
	ENDIF
C
	WHERE = 'North east corner (long)'
C
	IF (.NOT.RDFANG(DDD, NOTENTH, HEMI, MHLONE)) GOTO 900
C
	IF (HAD_LOG) THEN
	   CALL EXPAND('%S', WHERE)
	   OK = OUTANG(MHLONE)
	ENDIF
C
C
	WHERE = 'South east corner (lat) '
C
	IF (.NOT.RDFANG(DD, NOTENTH, HEMI, MHLASE)) GOTO 900
C
	IF (HAD_LOG) THEN
	   CALL EXPAND('%S', WHERE)
	   OK = OUTANG(MHLASE)
	ENDIF
C
	WHERE = 'South east corner (long)'
C
	IF (.NOT.RDFANG(DDD, NOTENTH, HEMI, MHLOSE)) GOTO 900
C
	IF (HAD_LOG) THEN
	   CALL EXPAND('%S', WHERE)
	   OK = OUTANG(MHLOSE)
	ENDIF
C
C
	WHERE = 'Clockwise orientation of data'
C
	IF (.NOT.RDFANG(DDD, TENTH, NOHEMI, MHCLOD)) GOTO 900
C
	IF (HAD_LOG) THEN
	   CALL EXPAND('%S ', WHERE)
	   OK = OUTANG(MHCLOD)
	ENDIF
C
C
	WHERE = 'Latitude interval'
C
	CALL SETWIN( , 4)
	IF (RDINT(NUMBER)) GOTO 900
C
	MHLAIN = NUMBER				! copy it over
C
	IF (HAD_LOG) CALL WRITEF('%S %N', WHERE, MHLAIN)
C
C
	WHERE = 'Longitude interval'
C
	CALL SETWIN( , 4)
	IF (RDINT(NUMBER)) GOTO 900
C
	MHLOIN = NUMBER				! copy it over
C
	IF (HAD_LOG) CALL WRITEF('%S %N', WHERE, MHLOIN)
C
C
	WHERE = 'Number of latitude lines'
C
	CALL SETWIN( , 4)
	IF (RDINT(NUMBER)) GOTO 900
C
	MHLALI = NUMBER				! copy it over
C
	IF (HAD_LOG) CALL WRITEF('%S %N', WHERE, MHLALI)
C
C
	WHERE = 'Number of longitude lines'
C
	CALL SETWIN( , 4)
	IF (RDINT(NUMBER)) GOTO 900
C
	MHLOLI = NUMBER				! copy it over
C
	IF (HAD_LOG) CALL WRITEF('%S %N', WHERE, MHLOLI)
C
C
	WHERE = 'Partial cell indicator'
C
	CALL SETWIN( , 2)
	IF (RDINT(NUMBER)) GOTO 900
	CALL SETWIN( , )
C
	MHPCIN = NUMBER				! copy it over
C
	IF (HAD_LOG) CALL WRITEF('%S %N', WHERE, MHPCIN)
C
C and that is all the data we need to read from this buffer, so
C we can safely return with our job finished
C
	READ_DSI = DTEDIFF__NORMAL !  success 
C
	IF (HAD_LOG) CALL WRITEF
C
	READ_DSI=DTEDIFF__NORMAL
	GOTO 999
C
C
C this is our standard 'failed to read' error return - it shouldn't
C ever actually be needed
C
900	READ_DSI=DTEDIFF__BADDSIFIELD
	CALL LSL_PUTMSG(READ_DSI)
C
999	RETURN
	END
C
