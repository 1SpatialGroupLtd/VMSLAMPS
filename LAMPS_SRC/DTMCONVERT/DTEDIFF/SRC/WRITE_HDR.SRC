	INTEGER*4 FUNCTION WRITE_HDR()
C
***	IDENT	04DE95
***	MODULE	WRITE_HDR
C
C	Copyright Laser-Scan Ltd., Cambridge, England
C
C Author CC Brunt, 27 October 1983
C
CMOD1515 Use spaces in the data fields instead of 'NULL'	JDB 04-Dec-1995
C
C This subroutine outputs the information obtained from the
C DSI and ACC blocks to an IFF file
C
C NB It is very similar to that of the same name in DFAD2I
C
	IMPLICIT NONE
C
C common blocks...
C
***	PARAMETER/HERE:DTEDIFFMSG/
C
***	COMMON/HERE:PARAMS/		! for ARM setting
C
***	COMMON/LSL$CMNIFF:IFFHAN/	! for LPOSH
***	COMMON/LSL$CMNIFF:MHMCE/	! for map header
***	COMMON/LSL$CMNIFF:MD2DES/	! for map descriptor
***	COMMON/LSL$CMNLSL:EXPC/		! for EXPBUF, etc
C
C workspace...
C
	INTEGER*2	LAYER		! overlay number
	INTEGER*4	I		! DO loop variable
	REAL		CFT(10,2)	! cubic coefficients
	REAL		CPTS(4,4)	! corner points
	REAL		RANGE(4)	! range entry
	BYTE		DATBUF(10)	! to hold the date
	BYTE		TIMBUF(9)	! and the time
	INTEGER*2	ZERO, ONE
	REAL		POINT(2)	! for corner point features
	INTEGER*2	ISTAT(4)	! similarly
C
	ZERO = 0			! set the simple numbers
	ONE  = 1
C
C set up header stuff - first the range of the map
C
C	 our range entry is obtained as the lat/long of the extremes,
C	 minus the lat/long of the origin of the manuscript (remember,
C	 all coordinates are entered as offsets from the origin)
C
	RANGE(1) = MHLOSW-MHLOMO	! long, SW corner
	RANGE(2) = MHLONE-MHLOMO	! long, NE corner
	RANGE(3) = MHLASW-MHLAMO	! lat,  SW corner
	RANGE(4) = MHLANE-MHLAMO	! lat,  NE corner
C
C and the extents
C
	MHLAEX = MHLANW - MHLASW
	MHLOEX = MHLOSE - MHLOSW
C
C and we can now also output the RAnge entry
C
	CALL IFFRA( RANGE )
C
C and a History entry
	CALL IFFHI
C
C and we output the map header next, after setting up the descriptor at
C the front... (this tells us what sort of map header it is)
C
	MHDESC(1) = 174
	MHDESC(2) = 1		! and it's an MCE map header (OS = 2)
	MHDESC(3) = 0		! end of the descriptor
	MHDESC(4) = 0
C
C and now actually output the thing
C
	CALL IFFMH( MHARR, MHLEN )
C
C set up the map descriptor array
C
C set up the map descriptor
C
	MD2PRJ  = 100			! geographical coords.
C
C horizontal datum
	IF (MHHDTM(4).EQ.'8' .AND. MHHDTM(5).EQ.'4')THEN
	   MD2SPH = 22
	ELSE
	   MD2SPH = 5			! Assume WGS 72 
	ENDIF
C
	MD2UNT    = 110			! tenths of seconds of arc
	MD2LOC(2) = MHLAMO       	! origin latitude in degrees
	MD2LOC(1) = MHLOMO      	! origin longitude in degrees
        MATV2     = 2			! MD type
C
C output the map descriptor
C
	CALL IFFMD( MD2ARR, MD2LEN )
C
C That's the map start stuff - now to the things for our new section
C
C We start with the New Section itself...
C
C  work out the time we are doing all of this
C
	CALL TIME(TIMBUF)
	TIMBUF(9) = 0
C
C  and the date
C
	CALL DATE(DATBUF)
	DATBUF(10) = 0
C
C lower-case 2nd and 3rd letters of month name
C
	DATBUF(5) = DATBUF(5)-'A'+'a'
	DATBUF(6) = DATBUF(6)-'A'+'a'
C
	CALL EXPAND('Created by DTEDIFF on %AZ at %AZ',
     &					  DATBUF,TIMBUF )
C
C and thus we have our New Section declaration
C
	CALL IFFNS(EXPBUF, EXPLEN)
C
C and now the cubic coefficients...
C
	DO 100 I = 1,10
	   CFT(I,1) = 0.0
	   CFT(I,2) = 0.0
100	CONTINUE
C
	CFT(2,1) = 1.0		! the sole non-zero elements
	CFT(3,2) = 1.0		! are set up
C
	CALL IFFCC(CFT)		! output the cubic coefficients
C
C lastly, we must output CP array -
C The corner points are thus:
C
C	the first variable is x,y for digitised, x,y for required
C	coordinates. In this case, we thus have these two identical
C
C	the second variable gives us which corner - in the standard
C	order NW, SW, SE, NE. We shall be boring and assign all of
C	these explicitly, because it's clearer what we're doing then
C
C Let us go through the first set of corner points
C
C 1st corner - NW corner of the map
C
	CPTS(1,1) = RANGE(1)		! X is X zero
	CPTS(2,1) = RANGE(4)		! Y is the Y extent
C
C 2nd corner - SW corner (origin) of the map
C
	CPTS(1,2) = RANGE(1)		! since it's the origin
	CPTS(2,2) = RANGE(3)		! these must be zero
C
C 3rd corner - SE corner of the map
C
	CPTS(1,3) = RANGE(2)		! X is the X extent
	CPTS(2,3) = RANGE(3)		! Y is Y zero
C
C 4th corner - NE corner of the map
C
	CPTS(1,4) = RANGE(2)		! X is the X extent
	CPTS(2,4) = RANGE(4)		! Y is the Y extent
C
C and we can copy this first set of corner point values into the
C second set...
C
	DO 200 I = 1,4			! loop round all corners
	   CPTS(3,I) = CPTS(1,I)	!    for X
	   CPTS(4,I) = CPTS(2,I)	!    and for Y
200	CONTINUE
C
C and now we can output it
C
	CALL IFFCP(CPTS)
C
C and so we may now start layer 0
C for a change 3 map, this will contain any accuracy subregions,
C otherwise it will be empty
C
C and remember where this NO is (or is about to be)
C
	LPOSNO = LPOSE		! we'll come back later to add a
C				! pointer to the matching EO
C this is layer 0
C
	LAYER = 0
	CALL IFFNO( LAYER, ZERO, 0 )
C
C Signal success
	WRITE_HDR = DTEDIFF__NORMAL
C
	RETURN				! and return with it all done
	END
C
