	INTEGER*4 FUNCTION READ_ACC()
C
***	IDENT	07NO95
***	MODULE	READ_ACC
C
C	Copyright Laser-Scan Ltd., Cambridge, England
C
C Author CC Brunt, 27 October 1983
C
CMOD1510 Allow 'NA' in accuracy fields			JMC 02-Oct-1995
C
CMOD1515 Initialise fields to spaces, instead of default NULL bytes
C							 JB 07-Nov-1995
C
C This function reads the ACC record which it expects to find in
C a mapped section file
C NB. It is very closely based on that of the same name in DFAD2I
C
C It returns TRUE if it fails, or FALSE if all goes well
C
	IMPLICIT NONE
C
***	PARAMETER/HERE:DTEDIFFMSG/
***	PARAMETER/LSL$CMNDTI:DTILIBMSG/
C
***	COMMON/HERE:PARAMS/
***	COMMON/LSL$CMNIFF:MHMCE/	! MCE map header
***	COMMON/LSL$CMNLSL:TXTC/
C
C functions called
	LOGICAL		RDINT		! read an integer(*2)
	INTEGER*4	RDTEXT		! read a block of text
	INTEGER*4	READ_POLY
	INTEGER*4	WRITE_HDR
	INTEGER*4	DTI_COPY_BYTE_HEADER
C
C workspace
	BYTE		ACC_BUFFER(2700)!ACC buffer
	INTEGER*2	PTR,DCP1,DCP2	! decode pointer saves
	BYTE		IGNORE(50)	! data to ignore
	CHARACTER*50	WHERE		! for where an error occurred
	INTEGER*4	ERROR		! system error return
	INTEGER*2	SUBREG		! number of accuracy subregions
C
	INTEGER*2	NUM		! short version
	INTEGER		I		! counter
	BYTE		NA(4)		! for holding byte chars 'NA'
C
C------------------------------------------------------------------
C Copy from the DTI file header area to our local ACC buffer
C
	READ_ACC=DTI_COPY_BYTE_HEADER(1,ACC_BUFFER,.FALSE.,
     &                                2700,884,ERROR)
	IF(.NOT.READ_ACC)THEN
	  CALL LSL_PUTMSG(READ_ACC)
	  IF(READ_ACC.EQ.DTI__SYSERR)CALL LSL_PUTMSG(ERROR)
	  READ_ACC=DTEDIFF__BADTRANSFER
	  GOTO 999
	ENDIF
C
C Set up ACC record as our current text buffer
C
	CALL SETAUX( ACC_BUFFER, 2700 )
	CALL DCPSAV( DCP1 )
C
C the first three characters should be ACC
C
	IF (ACC_BUFFER(1).NE.'A' .OR. ACC_BUFFER(2).NE.'C' .OR.
     &      ACC_BUFFER(3).NE.'C') THEN
	   CALL LSL_PUTMSG(DTEDIFF__BADACCSENT)
	   GOTO 999
	ENDIF
C
	DCPTR=4
C
C so we have our block ID - we can carry on with the rest now.
C
C first we have the absolute horizontal accuracy over the whole map -
C the worst accuracy from any part of the map
C
	CALL DCPSAV(PTR)
C
	WHERE = 'Absolute horizontal accuracy'
	CALL SETWIN( , 4)
C
	IF (RDINT(NUM)) THEN
	   CALL DCPSET(PTR)
	   CALL SETWIN( , 4)
C
	   I = RDTEXT(NA, 4)
C
	   IF ((NA(1).NE.'N') .OR. (NA(2).NE.'A')) GOTO 900
C
	   MHAHAC = -1
C
	ELSE
	   MHAHAC = NUM
	ENDIF
C
	IF (HAD_LOG) CALL WRITEF('%S %N', WHERE, MHAHAC)
C
C
	CALL DCPSAV( PTR )
C
	WHERE = 'Absolute vertical accuracy'
C
	CALL SETWIN( , 4)
C
	IF (RDINT(NUM)) THEN
	   CALL DCPSET(PTR)
	   CALL SETWIN( , 4)
C
	   I = RDTEXT(NA, 4)
C
	   IF ((NA(1).NE.'N') .OR. (NA(2).NE.'A')) GOTO 900
C
	   MHAVAC = -1
	ELSE
	   MHAVAC = NUM
	ENDIF

	IF (HAD_LOG) CALL WRITEF('%S %N', WHERE, MHAVAC)
C
C
	CALL DCPSAV( PTR )
C
	WHERE = 'Relative horizontal accuracy'
C
	CALL SETWIN( , 4)
C
	IF (RDINT(NUM)) THEN
	   CALL DCPSET(PTR)
	   CALL SETWIN( , 4)
C
	   I = RDTEXT(NA, 4)
C
	   IF ((NA(1).NE.'N') .OR. (NA(2).NE.'A')) GOTO 900
C
	   MHRHAC = -1
C
	ELSE
	   MHRHAC = NUM
	ENDIF
C
	IF (HAD_LOG) CALL WRITEF('%S %N', WHERE, MHRHAC)
C
	CALL DCPSAV(PTR)
C
	WHERE = 'Relative vertical accuracy'
C
	CALL SETWIN( , 4)
C
	IF (RDINT(NUM)) THEN
	   CALL DCPSET(PTR)
	   CALL SETWIN( , 4)
C
	   I = RDTEXT(NA, 4)
C
	   IF ((NA(1).NE.'N') .OR. (NA(2).NE.'A')) GOTO 900
C
	   MHRVAC = -1
C
	ELSE
	   MHRVAC = NUM
	ENDIF

	CALL SETWIN( , )
C
	IF (HAD_LOG) CALL WRITEF('%S %N',WHERE,MHRVAC)
C
C the next 36 characters are reserved for future use
C
	WHERE = 'Reserved for additional accuracy values'
C
	DO 45 I = 1,36
	   IGNORE(I) = ICHAR(' ')
45	CONTINUE
C
	IF (.NOT.RDTEXT(IGNORE, 36)) GOTO 900
C
C we must now find out how many accuracy subregions we require to read
C in (to output into layer zero)
C
	WHERE = 'Number of accuracy subregions'
C
	CALL SETWIN( , 2)			! only 2 digits
C
	IF (RDINT(SUBREG)) GOTO 900
C
	IF (SUBREG.GT.9) THEN
	   CALL LSL_PUTMSG(DTEDIFF__BADACCREGVAL)
	   GOTO 999
	ENDIF
C
	CALL SETWIN( , )
C
	IF (HAD_LOG) CALL WRITEF('%S %^W%N', WHERE, SUBREG)
C
C check that decode pointer is OK so far
C
	CALL DCPSAV(DCP2)
C
	IF (DCP2-DCP1.NE.57) THEN
	  CALL LSL_PUTMSG(DTEDIFF__ACCBADFORMAT)
	  GOTO 999
	ENDIF
C
C output the header information (map header, etc) now...
C
	READ_ACC = WRITE_HDR()
	IF (.NOT.READ_ACC) GOTO 999
C
C and now we read & create accuracy subregions as appropriate
C
	IF (SUBREG.GT.0) THEN
          READ_ACC = READ_POLY(SUBREG)
	  IF (.NOT.READ_ACC) GOTO 999
	ENDIF
C
C now we can output the EO and fix EO pointer at NO
C
	CALL IFFUNO(LPOSNO)
	CALL IFFEO
C
	IF (HAD_LOG) CALL WRITEF
	READ_ACC=DTEDIFF__NORMAL
	GOTO 999
C
900	CALL LSL_PUTMSG(DTEDIFF__BADACCFIELD)
C
999	RETURN
	END
C
