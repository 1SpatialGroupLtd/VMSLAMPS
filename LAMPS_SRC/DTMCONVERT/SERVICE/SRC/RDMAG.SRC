C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-06-21 21:17:36.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE RDMAG
C
***	IDENT	21JN88
***	MODULE	RDMAG(DEBUG)
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Amended to be a service routine for DTMCONVERT package  FJB 21-June-1988
C Amended for DTI libraries			              14-April-1988
C Author 					  CC Brunt,  5 October 1983
C
C to read from a DLMS DTED (Digital Land Mass Simulation
C Digital Terrain Elevation Data) mag tape, and assemble the block read
C into the buffer in /DTEDBUF/ for later use.
C
C
C For CHANGE 3 tapes, after the manuscript header, we get DSI and ACC
C blocks. The DSI block is 648 bytes long, the ACC block is 2700
C bytes long.
C
C
	IMPLICIT NONE
C
	INCLUDE		'SYS$LIBRARY:FORSYSDEF($SSDEF)'
C
C
C parameter file
C
	INCLUDE 'LSL$CMNDTI:DTIDEF.PAR'
C
C common blocks
C                               
    	INCLUDE 'LSL$DTMCONVERTSYS:BLOCKY.CMN'
	INCLUDE 'LSL$DTMCONVERTSYS:DTEDBUF.CMN'
	INCLUDE 'LSL$CMNLSL:MTIVCM.CMN'
C
C For messages
C
    	INCLUDE	'LSL$CMNLSL:TXTC.CMN'
       	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'
   	INCLUDE 'LSL$DTMCONVERTSYS:MESPAR.PAR'
C
C functions called
C
	INTEGER*4	MTIRDB		! read a block off magtape
	LOGICAL		STREQ		! are two strings equal?
C
C workspace
C
   	INTEGER*4	OK		! error flag
	INTEGER*4	PSDSTR(2)	! pseudo char descriptor
C
	LOGICAL		DEBUG		! for debugging messages
C
C if already at end of tape - then do not bother reading
C
	IF (BLKTYP.EQ.AFTER) GOTO 999	! return
C
C read a block
C
10	OK = MTIRDB( BYTBUF, MAXBUF, BYTCNT )
C
	IF (.NOT. OK) THEN
	   IF (OK .EQ. LSL__EOF) THEN
	      IF (BLKTYP.EQ.TAPEMK) THEN
	         BLKTYP = AFTER		! double tapemark so end of tape
		 IF(DEBUG)THEN
		    CALL WRITEF
	 	    CALL WRITEF('.Block %N, Block type = %N,  EOF.'
     &              ,MTINBL,BLKTYP)
		    CALL WRITEF                             
		 ENDIF
	      ELSE
	         BLKTYP = TAPEMK	! first tapemark
		 IF(DEBUG)THEN
		    CALL WRITEF
	 	    CALL WRITEF('.Block %N, Block type = %N,  Tapemark.'
     &              ,MTINBL,BLKTYP)
		    CALL WRITEF                             
		 ENDIF
	      ENDIF
	   ELSE
	      CALL WRITEF('%S reading block from tape',ERROR)
	      CALL WRITEF('     block number is %N', MTINBL)
	      CALL LSL_PUTMSG( OK )	! explain the problem
	      IF(OK .EQ. LSL__SYSERR)CALL LSL_ADDMSG(MTIERR)
	      BLKTYP = NONE
	   ENDIF
	   GOTO 999			! RETURN
	ENDIF
C
C we have a block
C
	IF (MTINBL.EQ.1.AND.BYTBUF(1).EQ.'A2'X) THEN	! ICL header
	   CALL TTWSTR('ICL header block found and ignored')
	   GOTO 10
	ENDIF
C
	IF (BYTBUF(1).EQ.'252'O) THEN
	   BLKTYP = DATBLK		! a data block
	   GOTO 910
	ENDIF
C
	PSDSTR(2) = %LOC(BYTBUF)	! set up pseudo string
	PSDSTR(1) = 3			! length
	IF ( STREQ(PSDSTR,'HDR') ) THEN
	   BLKTYP = HDR
	ELSEIF ( STREQ(PSDSTR,'UHL') ) THEN
	   BLKTYP = UHL
	ELSEIF ( STREQ(PSDSTR,'UTL') ) THEN
	   BLKTYP = UTL
	ELSEIF ( STREQ(PSDSTR,'EOF') ) THEN
	   BLKTYP = EOF
	ELSEIF ( STREQ(PSDSTR,'VOL') ) THEN
	   BLKTYP = VOL
	ELSE
	   IF ( STREQ(PSDSTR,'DSI') )THEN
	      BLKTYP = DSI
	      IF (BYTCNT.NE.DTI_TED_DSISZ) GOTO 900
	   ELSEIF ( STREQ(PSDSTR,'ACC') ) THEN
	      BLKTYP = ACC
	      IF (BYTCNT.NE.DTI_TED_ACCSZ) GOTO 900
	   ELSE
	      BLKTYP = NONE
	      CALL EXPAND('%S Unrecognised record type',WARNING)
	      GOTO 905
	   ENDIF
	   GOTO 910
	ENDIF
C
	IF (BYTCNT.EQ.80.OR.BYTCNT.EQ.81) GOTO 910
C
900	CALL EXPAND('%S%S record has wrong length',WARNING, PSDSTR )
905	CALL WRITAP(' at block %N, length %N', MTINBL, BYTCNT )
C
910	IF (DEBUG) THEN
C
C print first part of buffer	 
C
	   CALL WRITEF
	   CALL WRITEF('DEBUG - Block %N, %N bytes, Block type = %N',
     &					MTINBL, BYTCNT,BLKTYP )
	   CALL TTWSTR('DEBUG - First 3 longwords are (hexadecimal):')
	   CALL WRITEF('DEBUG -  %P0%^L%X8 %X8 %X8',
     &		   BYTBUF(1), BYTBUF(5), BYTBUF(9) )
	   CALL WRITEF
	ENDIF
C
C
C
999	RETURN
	END
