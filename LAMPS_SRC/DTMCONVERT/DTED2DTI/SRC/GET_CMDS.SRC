C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-06-22 13:54:02.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION GET_CMDS(GO_READ_TAPE)
C
***	MODULE	GET_CMDS
***	IDENT	21JN88
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Include MESPAR.PAR from 'LSL$DTMCONVERTSYS' now.FJB 21-Jun-1988
C	Created   				FJB	11-Feb-1988
C
C
	IMPLICIT NONE
C
C Parameters:     
	INCLUDE 'LSL$CMNDTED2DTI:DTED2DTIMSG.PAR'!specific error messages
	INCLUDE 'LSL$DTMCONVERTSYS:MESPAR.PAR'	! warning/error messages
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'	! for all messages
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'       	! text buffer                 
C
C Common blocks:
	INCLUDE 'LSL$CMNDTED2DTI:OPTIONS.CMN'	! command variables
	INCLUDE 'LSL$DTMCONVERTSYS:DTIFILE.CMN'   ! DTI file details
	INCLUDE 'LSL$CMNLSL:CMDCOM.CMN'         ! command decoding
C
	INCLUDE '($SSDEF)/NOLIST'
C
C W/s:                  
	BYTE		CH     		! for use with RDCHS
	INTEGER		CMD     	! decoded command number
	INTEGER*4	OK		! function return
	INTEGER*4	IERR		! error code               
	CHARACTER*80	INDFILE		! indirect command file
	INTEGER		INDLEN		! file name length
	LOGICAL		IS_MOUNTED	! tape mounted correctly?	
	LOGICAL		IS_RWND		! tape rewound correctly?
	LOGICAL		ISLAT		! latitude/northing or longitude/easting
C
C Argument:
	LOGICAL		GO_READ_TAPE	! ready to read the DTED tape
C
C Define command tables:
	EXTERNAL	DTED2DTI_CMD_TABLE
	INTEGER	    	DTED2DTI_CMD_TABLE
C                       
C Functions:
	INTEGER*4 	GETFILNAM	! Read indirect command filename
C
C Local Functions:
	LOGICAL		DESELECT_CMD	! determine deselections
	LOGICAL	  	DEVICE_CMD	! get input tape deck
	LOGICAL		DISABLE_CMD	! decode disable keywords
	LOGICAL		ENABLE_CMD	! decode enable keywords
	LOGICAL		EASNOR_CMD	! get grid_x of m/s origin
	LOGICAL		FILEOUT_CMD	! get and open output files
	LOGICAL	  	HELP_CMD	! give help
	LOGICAL		LATLONG_CMD	! get lat/long of m/s origin
	LOGICAL	  	MANUSCRIPT_CMD	! get manuscript number
	LOGICAL		REWIND_CMD	! rewind tape
	LOGICAL         SHOW_CMD	! show status
	LOGICAL         SPAWN_CMD	! for DCL SPAWN
C
C Library Functions:
	INTEGER*4	TTRSTR  	! read line from terminal
	INTEGER*4	FLROPN		! open command file
	INTEGER*4	FLRSEL		! select command file
	INTEGER*4	FLRSTR		! read string
	INTEGER*4	FLRCLO		! close indirect command file
	LOGICAL  	RDCHS	      	! read character from line
	LOGICAL  	RDCH		! read character from line
	INTEGER*4	RDCOMM  	! read command from line
C                       
C ......................................................................
C
C Initialise all the command flags
	TTIN   		= .TRUE.	! assume reading from terminal
	IS_MOUNTED	= .TRUE.        ! no fatal error when mounting tape
	IS_RWND		= .TRUE.	! no fatal error when rewinding tape
	GO_READ_TAPE	= .TRUE.	! assume we want to read the tape
C
C ......................................................................
C                   
C Get an input line
10	TXTPTR=80
	IF (TTIN) THEN                     ! from the terminal
	   OK=TTRSTR(,,'DTED2DTI> ',IERR)
	ELSE                               ! or from indirect file
	   OK= FLRSEL(INDLUN)
	   IF(OK)THEN
	      OK=FLRSTR(,,IERR)
	   ENDIF
	ENDIF
C
C Error?
	IF (.NOT.OK) THEN
	   IF (OK.EQ.LSL__EOF) THEN
	      IF (TTIN) THEN                        
	         GOTO 70		! end of file = quit
	      ELSE
	         CALL WRITEF('%S Unexpected end of indirect command '//
     &			'file detected',WARNING)
	         CALL WRITEF('                RETURN command assumed '//
     &				'- returning to terminal input')
	         GOTO 145		! close indirect file etc.
	      ENDIF     
	   ENDIF
	   CALL LSL_PUTMSG(OK)
	   IF(OK .EQ. LSL__SYSERR)CALL LSL_ADDMSG(IERR)
	   IF(OK .EQ. LSL__SYSREAD)CALL LSL_ADDMSG(IERR)
	   GOTO 20
	ENDIF
C
C echo and decode the line
	IF (.NOT.TTIN) THEN
	   CALL EXPAND('DTED2DTI> ')
	   CALL APPEND(TXTDSC) ! echo indirect input
	   CALL TTWSTR
	ENDIF
	CALL BSLN
C                                 
C Look for comment
	IF (RDCHS(CH)) GOTO 10	! substantially empty line
	IF (CH.EQ.'!') GOTO 10	! comment!
C
C Look for indirect file start
	IF (TTIN) THEN
	   IF (CH.EQ.'@') THEN
	      IF (RDCHS(CH)) THEN	! substantially empty line
	         CALL WRITEF('%S "@" must precede a file-spec',WARNING)
	         GOTO 20
	      ELSE        
	         CALL BSCH
	      ENDIF
C
C Name indirect command file
	      OK=GETFILNAM(INDFILE,INDLEN,
     &				'SYS$DISK:[].COM;0',.TRUE.,'!',)
	      IF (.NOT.OK) THEN
	         CALL LSL_PUTMSG(OK)
	         GOTO 20
	      ENDIF
C
C and open it
	      OK=FLROPN(INDLUN, INDFILE(:INDLEN), IERR)
	      IF (OK) THEN
		 TTIN = .FALSE.
		 GOTO 10
	      ELSE
	         CALL WRITEF('%S Can''t open indirect command file %S'
     &		      	  ,ERROR,INDFILE(:INDLEN))
	         CALL LSL_PUTMSG(OK)
	         IF(OK .EQ. LSL__SYSOPEN)CALL LSL_ADDMSG(IERR)
	         GOTO 20                
	      ENDIF
	   ENDIF			! CH .. @
	ENDIF
	CALL BSCH			! un-read non-'@'
C
	CMD=RDCOMM(DTED2DTI_CMD_TABLE)
	GOTO (	20,     ! error condition
     &		30,	! device 	
     &		40,	! disable		
     &		50,	! easting
     &		60,	! enable
     &		70,	! exit
     &		80,	! fileout		
     &		90,	! help		
     &		100,	! latitude
     &		110,	! longitude
     &		120,	! manuscript
     &		130,	! northing
     &		140,	! return		
     &		150,	! rewind
     &		160,	! show		
     &		170	! spawn		
     &	      		), CMD+1
C
C command number out of range
	CALL WRITEF('Command not yet implemented')
C
C close indirect input following a duff command
20	IF (.NOT.TTIN) THEN
C
	   CALL WRITEF(' ')
	   CALL WRITEF('%S Indirect file error - returning to '//
     &			'terminal input',WARNING)
	   OK = FLRCLO(INDLUN,IERR)
C
C Error?
	   IF(OK .NE. LSL__NORMAL) THEN
		CALL LSL_PUTMSG(DTED2DT__CLIND,INDFILE(:INDLEN))
		CALL LSL_ADDMSG(OK)
		IF(OK .EQ. LSL__SYSCLOSE)CALL LSL_ADDMSG(IERR)
		GET_CMDS=SS$_ABORT      
		GOTO 999
	   ENDIF
C
 	   TTIN=.TRUE.
	ENDIF
C
C
	GOTO 10
C
C ......................................................................
C DEVICE [device name]
30	IF (DTEDOPN) THEN  	! already had successful DEVICE?
  	   CALL WRITEF(
     &		'%S You have already specified a magnetic tape device'
     &		,WARNING)
	ELSE
	   OK = DEVICE_CMD(IS_MOUNTED)
	   IF (.NOT. IS_MOUNTED)THEN 	! fatal error whilst checking tape
	       GET_CMDS=SS$_ABORT
	       GOTO 999
	   ENDIF
	   IF( .NOT. OK) GOTO 20	! have another go at reading a command
	   DTEDOPN = .TRUE.
	ENDIF
	GOTO 10
C
C ......................................................................
C DISABLE 'sub-command'
C
40	IF (.NOT. DISABLE_CMD()) GOTO 20
	GOTO 10
C
C ......................................................................
C EASTING 'grid x'
50      IF (.NOT. GRID)THEN
	   CALL WRITEF(
     &	   '%S You cannot use the EASTING command with GRID disabled'
     &	   ,WARNING)
	   GOTO 20
	ENDIF
C
	IF (.NOT. HADDTI)THEN
	   CALL WRITEF(
     &     '%S You must give a FILEOUT command for the next manuscript'
     &	    ,WARNING)
	   GOTO 20
	ENDIF
C
	ISLAT = .FALSE.
	IF (.NOT.EASNOR_CMD(ISLAT)) GOTO 20
	GET_CMDS = SS$_NORMAL
	GOTO 999
C
C ......................................................................
C ENABLE 'sub-command'
C
60	IF (.NOT. ENABLE_CMD()) GOTO 20
	GOTO 10
C
C ......................................................................
C EXIT
C
C Close indirect file if in one
70	IF (.NOT.TTIN) THEN
C
	   OK = FLRCLO(INDLUN,IERR)
C
C Error?
	   IF(OK .NE. LSL__NORMAL) THEN
		CALL LSL_PUTMSG(DTED2DT__CLIND,INDFILE(:INDLEN))
		CALL LSL_ADDMSG(OK)
		IF(OK .EQ. LSL__SYSCLOSE)CALL LSL_ADDMSG(IERR)
		GET_CMDS=SS$_ABORT      
		GOTO 999
	   ENDIF
C
 	   TTIN=.TRUE.
	ENDIF
C
        GO_READ_TAPE = .FALSE.
    	GET_CMDS=SS$_NORMAL
	GOTO 999
C
C ......................................................................
C FILEOUT [filespec]
C
80	IF (HADDTI) THEN  	! already had successful FILEOUT?
	   CALL EXPAND('%S You have already issued ',WARNING) 
	   CALL WRITAP('a FILEOUT command for the next manuscript')
	ELSE
	   IF (.NOT.FILEOUT_CMD()) GOTO 20
	ENDIF     
	GOTO 10
C
C ......................................................................
C HELP
90	IF (.NOT.HELP_CMD()) GOTO 20
	GOTO 10
C
C ......................................................................
C LATITUDE [D]D [M]M [SS] H
100     IF (GRID)THEN
	   CALL WRITEF(
     &	   '%S You cannot use a LATITUDE command with GRID enabled'
     &	   ,WARNING)
	   GOTO 20
	ENDIF
C
	IF (.NOT. HADDTI)THEN
	   CALL WRITEF(
     &	   '%S You must give a FILEOUT command for the next manuscript'
     &     ,WARNING)
	   GOTO 20
	ENDIF
C 
	ISLAT = .TRUE.
	IF (.NOT.LATLONG_CMD(ISLAT)) GOTO 20 
	GET_CMDS = SS$_NORMAL
	GOTO 999
C 
C ......................................................................
C LONGITUDE [DD]D [M]M [SS] H
110     IF (GRID)THEN
	   CALL WRITEF(
     &	   '%S You cannot use a LONGITUDE command with GRID enabled'
     &	   ,WARNING)
	   GOTO 20
	ENDIF
C
	IF (.NOT. HADDTI)THEN
	   CALL WRITEF(
     &	   '%S You must give a FILEOUT command for the next manuscript'
     &     ,WARNING)
	   GOTO 20
	ENDIF
C
	ISLAT = .FALSE.
	IF (.NOT.LATLONG_CMD(ISLAT)) GOTO 20
	GET_CMDS = SS$_NORMAL
	GOTO 999
C
C ......................................................................
C MANUSCRIPT [n]
120	IF (.NOT. HADDTI)THEN
	   CALL WRITEF(
     &	   '%S You must give a FILEOUT command for the next manuscript'
     &     ,WARNING)
	   GOTO 20
	ENDIF
C
        IF (.NOT.MANUSCRIPT_CMD()) GOTO 20
	GET_CMDS = SS$_NORMAL
	GOTO 999
C
C ......................................................................
C NORTHING 'grid y'                                              
130     IF (.NOT. GRID)THEN
	   CALL WRITEF(
     &	  '%S You cannot use a  NORTHING command with GRID disabled'
     &	   ,WARNING)
	   GOTO 20
	ENDIF
C
	IF (.NOT. HADDTI)THEN
	   CALL WRITEF(
     &	   '%S You must give a FILEOUT command for the next manuscript'
     &     ,WARNING)
	   GOTO 20
	ENDIF
C
	ISLAT = .TRUE.
	IF (.NOT.EASNOR_CMD(ISLAT)) GOTO 20
	GET_CMDS = SS$_NORMAL
	GOTO 999
C
C ......................................................................
C RETURN - return to terminal input
C
140	IF (TTIN) THEN
	   CALL WRITEF(
     &		'RETURN command ignored - command '//
     &			'input is already from terminal')
	ELSE
	   CALL WRITEF(
     &		'RETURN command detected - returning to terminal input')
	ENDIF
C
145	IF (.NOT.TTIN) THEN
	   OK = FLRCLO(INDLUN,IERR)
C
C Error?
	   IF(OK .NE. LSL__NORMAL) THEN
		CALL LSL_PUTMSG(DTED2DT__CLIND,INDFILE(:INDLEN))
		CALL LSL_ADDMSG(OK)
		IF(OK .EQ. LSL__SYSCLOSE)CALL LSL_ADDMSG(IERR)
		GET_CMDS=SS$_ABORT         
		GOTO 999
	   ENDIF
C
 	   TTIN=.TRUE.
	ENDIF
C
	GOTO 10 
C
C ......................................................................
C REWIND
150     OK = REWIND_CMD(IS_RWND)
	IF (.NOT. IS_RWND)THEN 	     ! fatal error whilst rewinding tape
	    CALL LSL_PUTMSG(DTED2DT__NORWD,DEVICE(:DEVLEN))
	    GET_CMDS=SS$_ABORT                                  
	    GOTO 999
	ENDIF
	IF(.NOT. OK)THEN
	   CALL WRITEF('%S whilst rewinding tape',ERROR)
	   GOTO 20                   
	ELSE
	   CALL WRITEF('Rewind complete')
	ENDIF
	GOTO 10
C
C ......................................................................
C SHOW
160	IF (.NOT.SHOW_CMD()) GOTO 20
	GOTO 10
C
C ......................................................................
C SPAWN DCL process - primarily designed for file management
C
170	IF (.NOT.SPAWN_CMD()) GOTO 20
	GOTO 10
C
C
C ......................................................................
C
C Finish
C
999	RETURN
	END
