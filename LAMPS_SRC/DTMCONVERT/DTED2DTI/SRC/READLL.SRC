C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-06-22 14:29:58.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION READLL(TENSEC,ISLAT)
C
***	IDENT	21JN88
***	MODULE	READLL
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C	Author 	 : D R Catlow
C	Created  : 28 October 85
C	Modified : 09 October 87  - Use with LSLLIB
C	Modified : 13 April 1988  - for use in DTED2DTI,
C	 just reads one lat or long value not 4,
C	 and returned logical value reversed in sense.    FJB.
C	Include MESPAR.PAR from 'LSL$DTMCONVERTSYS' now.FJB 21-Jun-1988
C
C	Function to read lat/long values and convert to seconds of arc.
C 	Reads a free format angle from TXTC returning 
C	FALSE if an error occurs, TRUE if it all works
C
C 	The required format is 
C	[DD]D [MM] [SS] H	where H is hemisphere
C
	IMPLICIT NONE
C
C
C For messages:
	INCLUDE	'LSL$CMNLSL:TXTC.CMN'           ! text buffer
     	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'      ! LSL messages
	INCLUDE 'LSL$DTMCONVERTSYS:MESPAR.PAR'   ! ERROR/WARNING messages
C
C Arguments:
	LOGICAL		ISLAT		! wether lat or long to be read
C
C 	Functions:
C
	LOGICAL		RDCH	! read a char, exact
	LOGICAL		RDCHS	! read a char, exact, skip spaces
	LOGICAL		RDLONG	! read a number
C
C  	Workspace 
C
	INTEGER*4	NUMBER  ! for each integer part of angle
	INTEGER*4	ACCUM	! accumulate angle in here      
	REAL		TENSEC	! pass back a real total
	BYTE		CH	! a character
C
C**********************************************************************
C
	READLL = .FALSE.		! be pessimistic
C
C Test if degrees present
	IF(RDCHS(CH))THEN
	   CALL WRITEF('%S Unexpected end of line',ERROR)
	   GOTO 999
	ENDIF
C
	IF(CH.LT.'0'.OR.CH.GT.'9')THEN
	   CALL WRITEF('%S Unexpected character ''%A1'' in angle',
     &			ERROR,CH)
	   GOTO 999
	ENDIF
C
	CALL BSCH
C
C Read degree part - occupying 3 characters
C
	ACCUM = 0                                       
C
	IF( RDLONG(NUMBER) ) THEN
	   CALL EXPAND('%S Degrees field of angle blank/missing',ERROR)
	   CALL WRITAP(' - angle abandoned')
	   GOTO 999
	ENDIF
C
C and accumulate our result...
C
	ACCUM = NUMBER * 3600		! in seconds
C
C Test if minutes is present
	IF(RDCHS(CH))THEN
	   CALL WRITEF('%S Unexpected end of line',ERROR)
	   GOTO 999
	ENDIF
C
	IF(CH.GE.'A')GOTO 10		! alpha character
	IF(CH.LT.'0'.OR.CH.GT.'9')THEN
	   CALL WRITEF('%S Unexpected character ''%A1'' in angle',
     &			ERROR,CH)
	   GOTO 999
	ENDIF
C
	CALL BSCH
C
C Minutes
C
	IF( RDLONG(NUMBER) ) THEN
	  GOTO 999
	ENDIF
C
C and accumulate...
C      
	ACCUM = ACCUM + NUMBER*60	! in seconds
C
C Test if seconds is present
C
	IF(RDCHS(CH))THEN
	   CALL WRITEF('%S Unexpected end of line',ERROR)
	   GOTO 999
	ENDIF
C
	IF(CH.GE.'A')GOTO 10		! alpha character
	IF(CH.LT.'0'.OR.CH.GT.'9')THEN
	   CALL WRITEF('%S Unexpected character ''%A1'' in angle',
     &			ERROR,CH)
	   GOTO 999
	ENDIF
C
	CALL BSCH
C
C Seconds
C
	IF ( RDLONG(NUMBER) ) THEN
	   GOTO 999
	ENDIF
C
C otherwise, accumulate this too
C
	ACCUM = ACCUM + NUMBER		! seconds
C
C Hemisphere character
C
	IF(RDCHS(CH))THEN
	   CALL WRITEF('%S Unexpected end of line',ERROR)
	   GOTO 999
	ENDIF  
C
C check hemisphere qualifier
C
10	IF(ISLAT)THEN
	   IF(CH .NE. 'N' .AND.
     &	      CH .NE. 'n' .AND.
     &	      CH .NE. 'S' .AND.
     &	      CH .NE. 's'      ) THEN
	      CALL EXPAND('%S Incorrect hemisphere qualifier',ERROR)
	      CALL WRITAP(' - hemisphere must be N or S')
	      GOTO 999
	   ENDIF
	ELSE
	   IF(CH .NE. 'E' .AND.
     &	      CH .NE. 'e' .AND.
     &	      CH .NE. 'W' .AND.
     &	      CH .NE. 'w'      ) THEN
	      CALL EXPAND('%S Incorrect hemisphere qualifier',ERROR)
	      CALL WRITAP(' - hemisphere must be E or W')
	      GOTO 999
	   ENDIF
	ENDIF
C
C is it a negative type hemisphere
C
	IF (CH.EQ.'S'.OR.CH.EQ.'s')THEN
	   ACCUM= -ACCUM 
	   GOTO 20
	ENDIF
C
	IF (CH.EQ.'W'.OR.CH.EQ.'w')THEN
	   ACCUM= -ACCUM
	   GOTO 20
	ENDIF
C
	IF (CH.EQ.'N'.OR.CH.EQ.'n')GOTO 20
	IF (CH.EQ.'E'.OR.CH.EQ.'e')GOTO 20

	GOTO 999
C
C We now have a sensible (?) angle 
C
20	TENSEC = FLOAT(ACCUM*10)
C
	READLL = .TRUE.
C                              
C----------------------------------------------------------------------
C                                           
999	RETURN
C
	END
