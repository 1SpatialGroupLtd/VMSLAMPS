C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-06-22 14:36:04.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE SWPCPY(FROM,TO,NWORDS,CHKSUM)
C
***	MODULE	SWPCPY
***	IDENT	21JN88
C                     
C
C Amended to use .CMNs from DTMCONVERTSYS		FJB 21-June-1988
C Amended for use in DTED2DTI				FJB 15-April-1988
C
C module to copy words  from FROM to TO swapping bytes
C and generating a checksum as it goes
C
	IMPLICIT NONE
C
C parameter file
C
	INCLUDE 'LSL$CMNDTI:DTIDEF.PAR'
C
C common block
C
	INCLUDE 'LSL$DTMCONVERTSYS:DTEDBUF.CMN'
C
C arguments passed
C
	INTEGER*2	NWORDS		! number of words to copy
	INTEGER*2	TO(NWORDS)	! destination
	BYTE		FROM(NWORDS*2)	! source
	INTEGER*4	CHKSUM		! checksum
C
C w/s
C
	INTEGER		III		! do loop
	INTEGER*4	FLONG		! to sign extend into
	INTEGER*2	IIZ		! temporary to swap into
	BYTE		BIZ(2)		! two bytes of IIZ
	EQUIVALENCE	(IIZ,BIZ)
C
	INTEGER*4	LCHK		! checksum longword
	BYTE		BCHK		! same as byte
	EQUIVALENCE	(LCHK,BCHK)
C
C
	LCHK = 0		! zeroise both bytes for safety
	DO 100 III=1,NWORDS
	   BCHK = FROM(2*III-1)
	   CHKSUM = CHKSUM+LCHK
	   BIZ(2) = BCHK          
	   BCHK = FROM(2*III)
	   CHKSUM = CHKSUM+LCHK
	   BIZ(1) = BCHK
	   IF (IIZ.LT.0) THEN
	      FLONG = IIZ		! sign extend to long
	      FLONG = FLONG+32768	! now have absolute value
	      IIZ = -FLONG		! apply sign again
	   ENDIF
	   IF (IIZ.NE.-32767 .AND. IIZ.LT.MINHT) MINHT = IIZ
	   IF (IIZ.GT.MAXHT) MAXHT = IIZ
	   TO(III) = IIZ
100	CONTINUE
C
 	RETURN
	END
