C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-05-13 12:09:44.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION GET_INFILE (IN_FNAME, IN_FLEN)
C
***     MODULE GET_INFILE
***     IDENT  13MY92
C
C     Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C
C	Author		SG 	22-aug-91
C
C To read the file specified by /INPUT=file.
C reads the filenames into common block array DTI_FNAME etc
C this is a modified version of the INPUT_FILE.SRC of I2NTF
C
	IMPLICIT NONE
C
C Messages:
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'	! LSLLIB errors
	INCLUDE	'HERE:DTI2BINMSG.PAR'		! local errors
C
C Commons:
	INCLUDE	'LSL$CMNLSL:FILENAME.CMN'	! filename parsing
	INCLUDE	'LSL$CMNLSL:CLD.CMN'		! command line decoding
	INCLUDE	'LSL$CMNLSL:TXTC.CMN'
C
	INCLUDE	'HERE:FILENAME.CMN'
	INCLUDE	'HERE:COMMANDS.CMN'		! DTI2BIN common
	INCLUDE	'HERE:LUNS.PAR'
C
C the CLD module:
	EXTERNAL	INLIST_CLD
C
C arguments
	CHARACTER*(C_MAX_SIZ)	IN_FNAME
	INTEGER			IN_FLEN
C
C functions:
	LOGICAL		FLROPN
	LOGICAL		FLRCLO
	LOGICAL		FLRSTR
	LOGICAL	       	DCL_PARSE
	LOGICAL		DCL_FILE
	LOGICAL		DCL_QUAL
C
C workspace:
	LOGICAL		OK			! return from functions
	INTEGER		IERR,RETVAL			! secondary return
	LOGICAL		ABSENT			! true if thing is absent
C
C###############################################################################
C Initialise
C
	RETVAL = .TRUE.
C
C...............................................................................
C open the input file
C
	OK = FLROPN( IN_LUN, IN_FNAME(1:IN_FLEN),IERR)
C
	IF ( .NOT.OK ) THEN
	   CALL LSL_PUTMSG( DTI2BIN__OPENERR, IN_FNAME(1:IN_FLEN) )
	   CALL LSL_ADDMSG( OK )
	   IF ( OK.EQ.LSL__SYSOPEN ) CALL LSL_ADDMSG( IERR )
	   GOTO 9999
	ENDIF
C
	IF (LOG) CALL LSL_PUTMSG(DTI2BIN__INFILOPN,IN_FNAME(1:IN_FLEN) )
C
C-------------------------------------------------------------------------------
C read from the file
C
 	DTI_FNUM  = 0
	RETVAL  = .TRUE.
	OK = .TRUE.
C
C	........................................................................
C	get lines from the file until we hit an end of file, or error
C
	DO WHILE (RETVAL.AND.OK)
	  RETVAL = FLRSTR( ,, IERR )			!get a line from file
C
C	  ......................................................................
C
	  IF (RETVAL) THEN				!success
	     OK = DCL_PARSE( TXTDSC, 'DTI2BIN', .FALSE., INLIST_CLD, .TRUE. )
C
	     IF (OK) THEN
C	       .................................................................
C	       check that there is something on this line
C
	       OK = DCL_FILE('INFILE','LSL$DTI:.DTI', ABSENT,.FALSE., .TRUE. )
C                                                     
	       IF (OK.AND..NOT.ABSENT) THEN
		 OK = DTI_FNUM.LT.MAX_IN_FILES
		 IF (OK) THEN
		   DTI_FNUM=DTI_FNUM+1
		   DTI_FLEN(DTI_FNUM)  = FIL_LEN(1)
		   DTI_FNAME(DTI_FNUM) = FILARY(1)(1:FIL_LEN(1))
		 ELSE
		   CALL LSL_PUTMSG( DTI2BIN__MAXINFILE, MAX_IN_FILES )
		 ENDIF
	       ENDIF
	     ENDIF
	  ENDIF						!retval
	END DO
C
C...............................................................................
C any errors above mean a bad file
C 
	IF (.NOT.OK) CALL LSL_PUTMSG(DTI2BIN__BADINFIL,IN_FNAME(1:IN_FLEN) )
C
	IF (RETVAL.NE.LSL__EOF) THEN  		!wasn't an end of file error
	   CALL LSL_PUTMSG( RETVAL )
	   IF ( RETVAL.EQ.LSL__SYSREAD ) CALL LSL_ADDMSG( IERR )
	ENDIF
C
C...............................................................................
C close the input file
C
	OK = FLRCLO(IN_LUN,IERR)
	IF (.NOT.OK) CALL LSL_PUTMSG(DTI2BIN__CLOSERR,IN_FNAME(1:IN_FLEN))
C
C###############################################################################
C
9999	GET_INFILE = OK
C
	RETURN
	END
C
