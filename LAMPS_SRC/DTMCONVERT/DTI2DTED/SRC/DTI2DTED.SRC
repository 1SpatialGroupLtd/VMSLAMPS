	PROGRAM DTI2DTED
C
***	MODULE	DTI2DTED
***	IDENT	06JA90
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Tidied 						FJB 21-June-1988
C Modified for LSLLIB and DTILIB, revised command interface. 
C							FJB 18-April-1988
C Author					CC Brunt, 5 October 1983
C
C Program to read a DTI (Digital Terrain Image) file on disc and copy 
C the information to a DMA DLMS DTED (Defense Mapping Agency  Digital
C Land Mass Simulation  Digital Terrain Elevation Data) mag tape.
C
C
	IMPLICIT NONE
C
C common blocks
C
	INCLUDE 'LSL$DTMCONVERTSYS:BLOCKY.CMN'	! Block type on tape
	INCLUDE 'LSL$DTMCONVERTSYS:DTEDBUF.CMN'	! Tape input buffer,UHL
	INCLUDE 'LSL$DTMCONVERTSYS:DTIFILE.CMN'	! DTI input file details
	INCLUDE 'LSL$CMNDTI2DTED:OPTIONS.CMN'	! requested options
C               
C W/s
	INTEGER*4	OK		! for errors
	LOGICAL		GO_WRITE_TAPE	! ready and willing to write a m/s
	LOGICAL		DTMJPI		! print package info
C
C Functions called
       	INTEGER*4	GET_CMDS	! to read and parse commands
	INTEGER*4	PROCESS_FILE	! to read DTI file and write tape
C
C Initialise libraries
	CALL LSL_INIT
	CALL DTI_INIT
	OK = DTMJPI()
C
C Tape not opened yet
C
 	DTEDOPN = .FALSE.
C
C Default tape device type
C
	DEVICE = 'MTA0:'
C
C Default length
C
	DEVLEN = 5
C
C Default density 1600 bpi
C
	DENSITY = -1
C
C No block type yet
C
	BLKTYP = NONE
C
C Zero file sequence number
C
	FILSEQ = 0
C
C use LUN 1 for DTI file
C
	DTILUN = 1
C
C No DTI file is open
C
	HADDTI = .FALSE.
C
C use LUN 2 for indirect command file
C
	INDLUN = 2
C                    
C by default, start writing DTED manuscripts at beginning of tape 
C
	APPEND_FILE = .FALSE.
C
C by default, don't give debug info
C
	DEBUG = .FALSE.
C
C by default, no diagnostic printout
C
	DIAG = .FALSE.
C
C assume geographical (not grid) coordinates
C
	GRID = .FALSE.
C
C Read the commands
C
10	OK = GET_CMDS(GO_WRITE_TAPE)
C
	IF(OK)THEN
C
C Read DTI file and write the DTED mag tape
C
	   IF (GO_WRITE_TAPE) THEN
	      OK = PROCESS_FILE()		
	      IF(OK)THEN
	   	 GOTO 10
	      ELSE
		 GOTO 999
	      ENDIF
	   ENDIF
C
	ENDIF
C
C Finish
C
999	CALL LSL_EXIT(OK)
C
C
	END

