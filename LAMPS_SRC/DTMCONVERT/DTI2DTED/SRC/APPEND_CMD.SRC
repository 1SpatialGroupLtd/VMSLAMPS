C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-01-06 15:43:30.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION APPEND_CMD()
C
***	MODULE	APPEND_CMD
***	IDENT	06JA90
C
C	Copyright (C), Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Created	  					FJB 18-April-1988
C
C Function to advance DTED tape to end-of-volume
C
C Function returns .TRUE. if all is well, otherwise .FALSE.
C
	IMPLICIT NONE
C
C Parameters:
C
C Common:
	INCLUDE 'LSL$CMNDTI2DTED:OPTIONS.CMN'
	INCLUDE 'LSL$DTMCONVERTSYS:BLOCKY.CMN'
	INCLUDE 'LSL$CMNLSL:MTIVCM.CMN'
	INCLUDE 'LSL$CMNLSL:MTOVCM.CMN'
C
C                                               
C For messages:     
	INCLUDE 'LSL$CMNDTI2DTED:DTI2DTEDMSG.PAR'!specific error messages
     	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE 'LSL$DTMCONVERTSYS:MESPAR.PAR'
C
C
C W/s
	INTEGER*4	OK		! for error return	
C
C	
C Functions
	INTEGER*4	MTINIT		! initialise magtape for input
	INTEGER*4	MTIBCK		! backspace over block
	LOGICAL		DEVMNT_OUT_OK	! check tape mounted and initialise
C
C
C ......................................................................
C
	APPEND_CMD = .TRUE.		! assume success
C
C ......................................................................
C
C
C Initialise tape if not already had DEVICE command
C
	IF(.NOT. DTEDOPN)THEN
	   OK = DEVMNT_OUT_OK()
	   IF(.NOT. OK)GOTO 20
	   DTEDOPN = .TRUE.
	ENDIF
C
C Initialise for reading
C
	OK = MTINIT(DEVICE,DENSITY)
	IF( .NOT. OK) THEN
	   CALL LSL_PUTMSG(OK)
	   IF(OK .EQ. LSL__SYSERR)CALL LSL_ADDMSG(MTIERR)
	   GOTO 20
	ENDIF
C
C Loop to advance tape to end of volume, by repeated reading of blocks
C
10	CALL RDMAG(DEBUG)
C
C Keep track of file number by counting header blocks
C
  	IF(BLKTYP .EQ. HDR)THEN
	   FILSEQ = FILSEQ + 1
	   GOTO 10
C
C otherwise, after EOV double tapemark, backspace over last tapemark
C
	ELSEIF(BLKTYP .EQ. AFTER)THEN           
	   OK = MTIBCK()		     
	   IF( .NOT. OK) THEN
	      CALL LSL_PUTMSG(OK)
	      IF(OK .EQ. LSL__SYSERR)CALL LSL_ADDMSG(MTIERR)
	      GOTO 20
	   ENDIF
	   GOTO 99
C
C If nothing found on tape then finish
C
 	ELSEIF(BLKTYP .EQ. NONE)THEN
	   GOTO 20
C
	ELSE
	   GOTO 10           			! go back up for next block
C
	ENDIF
C
C
C Return with our tail down
20	APPEND_CMD = .FALSE.
C
C ......................................................................
C
99	RETURN
	END
