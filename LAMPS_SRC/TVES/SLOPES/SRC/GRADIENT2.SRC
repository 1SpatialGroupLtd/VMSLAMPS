C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-08-30 16:00:44.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION GRADIENT2
C
***	MODULE GRADIENT2
***	IDENT  14MR89
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C	Author : 	D R Catlow
C	Created:	11 December 86
C
C	Modifications:
C	Changed for new DTILIB version of SLOPES	MWSR   08-Mar-89
C	For use with PERCENT command			MWSR   27-Feb-89
C	To use LSLLIB                                   DRC    22-Jan-87
C	New argument to PUTROW				MWSR   Mar-1987
C	Passes real array of values to ICOL and PUTROW  DRC    15-May-87
C
C	This routine implements a second slope alogirithm for the
C	LSL SLOPES program, offering an alternative to the original
C	algoritm used in GRADIENT1.
C	This alogithm is that preferred by MCE, and that implemented
C	by SCICON in their own software for TVES).
C
C	The algorithm takes a grid cell defined by the matrix points
C	(A,B,C,D) and calculates the surface normals for the two 
C       triangular
C	facets (1,2).  Facet 1 being defined by points ADC and Facet
C	2 by CBA.
C	
C
C		D------C
C               | 1  . |
C	        |  . 2 |
C		A______B
C
C
C	The mean of these two surface normals is taken, to
C	determine an 'average' slope value for the grid cell.  The
C	value is allocated to point A.
C	
C	Note that we end with one less column and row than we
C	started with in the output matrix.
C	
C-------------------------------------------------------------------------
C
 	IMPLICIT NONE
C
***	COMMON/LSL$CMNLSL:TXTC/
***	COMMON/LSL$CMNLSL:EXPC/
***	COMMON/LSL$CMNDTI:DTIHDR/
***	COMMON/HERE:SLPCMN/
***	COMMON/HERE:DISCMN/	
C
C	GKS common block etc.
***	COMMON/HERE:GKS/
***	PARAMETER/HERE:GKSPAR/
C
C-----------------------------------------------------------------------
C	Functions:
	INTEGER*4	ICOL		!set SIGMA colour
	REAL*4		DTI_HGT		!retrieve 1 DTI cell height
	LOGICAL		HADCTRLC	!test if we've had CTRLC
	LOGICAL		PREPARE
C
C	Locals:
	REAL		X_NORMAL(2)	!X component of surface normal
	REAL		Y_NORMAL(2)	!Y component of surface normal
	REAL		Z_NORMAL	!Z component of surface normal
C					!east grid * north grid values
	REAL		Z_NORMAL_SQ	!Z component of normal squared
	REAL		MAG_NORMAL(2)	!magnitude of normals for 2 facets
	REAL		ANG_NORMAL(2)	!angle formed by the normals for
C					!the 2 facets
	INTEGER*4	IERR		!function return
	INTEGER*4	COL		!cell colour index
	INTEGER*4	X_COUNT,Y_COUNT	!counters
	INTEGER*4	J,I,N		!counters
	REAL*4		Z(2,2)		!Z values for corners of grid cell
	LOGICAL		NULL(2,2)	!flags to say if above are null
C
C	Parameters:
	PARAMETER	PI=3.141592654	!for RAD to degrees conversion
C
C***********************************************************************
	GRADIENT2 = .TRUE.
C
	COLMNS = 0			!column number
C
C-----------------------------------------------------------------------
C	Set up Z component of the normals (constant for all cells)
C
	Z_NORMAL    = X_GRID(DTICHAN)*Y_GRID(DTICHAN)
	Z_NORMAL_SQ = Z_NORMAL**2		!squared
C
C-----------------------------------------------------------------------
C set up all the graphic stuff etc.
	GRADIENT2 = PREPARE(1)
	IF (.NOT.GRADIENT2) GOTO 999
C
C-----------------------------------------------------------------------
C Calculate the gradient values...
C
	DO 500 X_COUNT= DTI_WINDOW_SWX(DTICHAN),DTI_WINDOW_NEX(DTICHAN)
C
	   PIXADD=0		!initialise pixel count
C
C Check if CTRL/C been pressed
	   IF (HADCTRLC()) GOTO 999	!yes, so exit
C
	   DO 400 Y_COUNT= DTI_WINDOW_SWY(DTICHAN),
     &                     DTI_WINDOW_NEY(DTICHAN)
C
C Retrieve heights defining each cell
	      Z(1,1) = DTI_HGT(X_COUNT  ,Y_COUNT  ,NULL(1,1))
	      Z(1,2) = DTI_HGT(X_COUNT  ,Y_COUNT+1,NULL(1,2))
	      Z(2,1)  =DTI_HGT(X_COUNT+1,Y_COUNT  ,NULL(2,1))
	      Z(2,2)  =DTI_HGT(X_COUNT+1,Y_COUNT+1,NULL(2,2))
C
 	      PIXADD=PIXADD+1		!update pixel count
C
C-----------------------------------------------------------------------
C Test for special cases.  The 'gradient' values set for these
C cases are interpreted by ICOL and PUTROW so that the correct 
C colour 
C is set prior to display, or a specific value is output to the
C DTI file.
C
C Check for null heights 
C If any of the 4 heights are null, then treat gradient as though
C outside range
C
	      IF(NULL(1,1).OR.NULL(1,2).OR.NULL(2,1).OR.NULL(2,2))THEN
	         GRAD(PIXADD)=-3	!set value to -3 for ICOL
	         GOTO 400			!get next height
C
C Sea level?
	      ELSE IF (Z(1,1).EQ.0)THEN
	         GRAD(PIXADD)=-1	!set value to -1 for ICOL
	         GOTO 400		!get next height
C
C Test if inside the height range
	      ELSE IF (Z(1,1).LT.HLOWER.OR.Z(1,1).GT.HUPPER)THEN
		 GRAD(PIXADD)=-2	!set value to -2 for ICOL
	         GOTO 400		!get next height
C
	      ENDIF
C
C-----------------------------------------------------------------------
C Calculate the gradient for the two facets
C Facet 1
	      X_NORMAL(1)=(Y_GRID(DTICHAN)*(Z(2,2)-Z(1,2))*ZSCALE)**2
	      Y_NORMAL(1)=(X_GRID(DTICHAN)*(Z(1,1)-Z(1,2))*ZSCALE)**2
C Facet 2
	      X_NORMAL(2)=(Y_GRID(DTICHAN)*(Z(1,1)-Z(2,1))*ZSCALE)**2
	      Y_NORMAL(2)=(X_GRID(DTICHAN)*(Z(2,2)-Z(2,1))*ZSCALE)**2
C	   
	      MAG_NORMAL(1)=SQRT(X_NORMAL(1)+Y_NORMAL(1)+Z_NORMAL_SQ)
	      MAG_NORMAL(2)=SQRT(X_NORMAL(2)+Y_NORMAL(2)+Z_NORMAL_SQ)
C
	      ANG_NORMAL(1)=ACOS(Z_NORMAL/MAG_NORMAL(1))
	      ANG_NORMAL(2)=ACOS(Z_NORMAL/MAG_NORMAL(2))
C
C Get the mean of these two values
	     GRAD(PIXADD)=(ANG_NORMAL(1)+ANG_NORMAL(2))*0.5 !in radians
C
	     IF (HAD_PERCENT) THEN
	        GRAD(PIXADD) = TAN(GRAD(PIXADD))
	        GRAD(PIXADD) = MIN((GRAD(PIXADD)*100),100.0)
	     ELSE
	        GRAD(PIXADD)=GRAD(PIXADD)*180.0/PI	  !in degrees
	     ENDIF
C
C-----------------------------------------------------------------------
C Test if inside the gradient range
	     IF(GRAD(PIXADD).LT.GLOWER.OR.GRAD(PIXADD).GT.GUPPER)THEN
	        GRAD(PIXADD)=-4		!set value to -4 for ICOL
	        GOTO 400
	     ENDIF
C
C
400	   CONTINUE
C
C-----------------------------------------------------------------------
C
C Ouput this row of gradients
	   DO 450 I=1,PIXADD
C
C If plotting determine the pixel colour
	      IF(GRAPHICS) THEN
	         COL=ICOL(GRAD(I))	!set to appropriate colour
                 IF(COL.LE.60)COL=COLTAB(COL)!to allow for user defined
C					! set of colours
	         BRIGHT(I)=COL		!byte value
	      ENDIF
450	   CONTINUE
C
	   COLMNS=COLMNS+1
	   NUMBER_PIXELS=PIXADD
C
	   IF (GRAPHICS) CALL SHDRAW		!send byte values to screen
C
	   IF (PLOT_DTI) CALL PUTROW(GRAD,1)	!output values to DTI file
C
C**********************************************************************
C
500	CONTINUE
C
	IF (PLOT_DTI)CALL CLOSE_FILEOUT
C
C***********************************************************************
C
999	RETURN
	END
C
