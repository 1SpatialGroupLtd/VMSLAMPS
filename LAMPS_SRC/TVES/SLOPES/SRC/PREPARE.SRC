C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-08-30 17:30:54.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION PREPARE(INFO)
C
***	MODULE	PREPARE
***	IDENT	30MR89
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    08-Mar-1989
C
C Does all the stuff required before calculation of slope, aspect or
C shade
C	INFO=1	 	SLOPE details (gradient and height range)
C	INFO=2		SHADE details (sun position and sun angle)
C	INFO=3		ASPECT details (aspect angular step)
C	INFO=4		HDIFF details (value range, height range)
C
	IMPLICIT NONE
C
C Parameters
***	PARAMETER/HERE:GKSPAR/
C
C Common Blocks
***	COMMON/HERE:SLPCMN/
***	COMMON/HERE:DISCMN/	
***	COMMON/HERE:GKS/
C
C argument
	INTEGER*4	INFO
C
C Functions
	LOGICAL		OPNSLP
C
C Local Variables
	REAL		X(2),Y(2)	! for fill rectangle
	INTEGER*4	J,I,N		!counters
C
C-----------------------------------------------------------------------
	PREPARE = .TRUE.
C
C Open the output DTI file if required
C
	IF (PLOT_DTI) THEN
	   PREPARE = OPNSLP(MATSIZ(1),MATSIZ(2))
	   IF (.NOT.PREPARE) GOTO 999
	ENDIF
C
C------------------------------------------------------------------------
C
	IF (GRAPHICS)THEN
C
C Clear any text in picture 2
	   CALL LSG_PLANE_SELECT(WKID,.NOT.(PLANE_MASK))
	   CALL LSG_PLANE_OFFSET(WKID,NOPLNS)
	   CALL GSFACI(0)		! fill area colour 0(background)
	   CALL GSFAIS(GSOLID)		! solid fill
	   X(1) = 0.0
	   X(2) = RASTSZ(1)-1
	   Y(1) = 0.0
	   Y(2) = RASTSZ(2)-1
	   CALL LSG_FILL_RECTANGLE(X,Y)
	   CALL GUWK(WKID,GSUPP)
C
C	Clear picture 1 as well?
	   IF(CLEAR)THEN
	     CALL LSG_PLANE_SELECT(WKID,PLANE_MASK)
	     CALL LSG_PLANE_OFFSET(WKID,0)
	     CALL GSFACI(0)		! fill area colour 0(background)
	     CALL GSFAIS(GSOLID)	! solid fill
	     X(1) = 0.0
	     X(2) = RASTSZ(1)-1
	     Y(1) = 0.0
	     Y(2) = RASTSZ(2)-1
	     CALL LSG_FILL_RECTANGLE(X,Y)
	     CALL GUWK(WKID,GSUPP)
	   ENDIF
C
C	Work out SW corner of the image on the display device.
C	The image is always positioned about the centre of the
C	screen.  The image is scaled by an integer to fit as
C	much of the image area as possible.
C
	   DIS_SIZE(1)=RASTSZ(1)-200
	   DIS_SIZE(2)=RASTSZ(2)-200
	   DISPLAY_SWX = 150.0
	   DISPLAY_SWY = 150.0
	   DISPLAY_NEX = DISPLAY_SWX+DIS_SIZE(1)
	   DISPLAY_NEY = DISPLAY_SWY+DIS_SIZE(2)
C
C	can we show a legend and text?
	   BIGMAT=.FALSE.
	   IF(MATSIZ(1).GT.DIS_SIZE(1).OR.
     &        MATSIZ(2).GT.DIS_SIZE(2))BIGMAT=.TRUE.
C
	   IF (BIGMAT) THEN          
	      SIGSWX=( (RASTSZ(1)*0.5) - (MATSIZ(1)*0.5) )
	      SIGSWY=( (RASTSZ(2)*0.5) - (MATSIZ(2)*0.5) )
	      SF=1
	   ELSE
C
C	Calculate magnification factor
	      SF=1			!no enlargement
	      DO 50 N=2,32
	         IF((MATSIZ(1)*N).GT.DIS_SIZE(1))GOTO 60
	         IF((MATSIZ(2)*N).GT.DIS_SIZE(2))GOTO 60
	         SF=SF+1
50	      CONTINUE
C
60	      SIGSWX=150 +( (DIS_SIZE(1)*0.5)-
     &               ( (MATSIZ(1)*SF)*0.5) )	!place in centre
	      SIGSWY=150 +( (DIS_SIZE(2)*0.5)-
     &               ( (MATSIZ(2)*SF)*0.5) )	!of screen
C
	   ENDIF
C
	   IF(RECENT)THEN
C
C	Ensure display is recentred and zoom at mimimum before
C	each draw
	     ZOOMX=RASTSZ(1)/2 
	     ZOOMY=RASTSZ(2)/2
	     ZOOMF=0
	     CALL LSG_ZOOM_IMAGE(WKID,ZOOMX,ZOOMY,ZOOMF)
	     IF(.NOT. BIGMAT) THEN
C
C output appropriate legend
	         IF (INFO .EQ. 1 .OR. INFO .EQ. 4) THEN
	            CALL LEGEND(1)
		 ELSEIF(INFO.EQ. 3) THEN
		    CALL LEGEND(2)
	         ELSE
		    CALL LEGEND(0)
		 ENDIF
	     ENDIF
	     IF(.NOT.BIGMAT)CALL TEXT(INFO)	!output border text
	   ENDIF
C
	   XPOS  =SIGSWX		!initial x drawing position
	   YPOS  =SIGSWY
	ENDIF
C
999	RETURN
	END
C
