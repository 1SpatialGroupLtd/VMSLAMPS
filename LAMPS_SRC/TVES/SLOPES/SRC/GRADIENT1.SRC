	LOGICAL FUNCTION GRADIENT1
C
***	MODULE GRADIENT1
***	IDENT  14MR89
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C	Author : 	D R Catlow
C
C	Modifications:
C	Changed for new DTILIB version of SLOPES	MWSR   08-Mar-89
C	For use with PERCENT command			MWSR   27-FEB-89
C	For use with NULL_BORDER command                DRC    08-Sep-88
C	To use LSLLIB                                   DRC    22-Jan-87
C	Passes real array of slope values to ICOL and
C	PUTROW						DRC    15-May-87
C	New argument to PUTROW				MWSR   Mar-1987
C       Change X1 ,X2, X3 to INTEGER*4 			MWSR   Jul-1986
C	Allow gradient to be calculated to window edge  MWSR   Jul-1986
C	Image scaled, automatic legend + text display	MWSR   Jan-1986	
C
C	Subroutine to calculate local gradient using 3X3 matrix.
C	Local gradient is a product of the gradient in x and y
C	Algorithm:
C
C		+----+----+----+
C		| 1  | 2  | 3  |
C		+----+----+----+
C		| 4  | 5  | 6  |
C		+----+----+----+
C		| 7  | 8  | 9  |
C		+----+----+----+
C
C	The gradient for the center of the 3X3 is an average of the
C	gradient in x (p) and y (q).  The gradient values are weighted
C	thus:
C	p = ((3+6+6+9)-(1+4+4+7))/(GRID*8)
C	q = ((3+2+2+1)-(9+8+8+7))/(GRID*8)
C	These are subsequently combined to give an average measure of
C	slope
C	g5 = SQRT((p*p)+(q*q))
C
C	This is the slope algorithm originally supplied with the SLOPES
C	program, but other algorithms have subsequently been 
C	implemented.
C	See GRADIENT2, GRADIENT3 and GRADIENT4.
C-----------------------------------------------------------------------
C
 	IMPLICIT NONE
C
***	COMMON/LSL$CMNLSL:TXTC/
***	COMMON/LSL$CMNLSL:EXPC/
***	COMMON/LSL$CMNDTI:DTIHDR/
***	COMMON/HERE:SLPCMN/
***	COMMON/HERE:DISCMN/	
C
C----------------------------------------------------------------------
C	Functions:
	INTEGER*4	ICOL		!set SIGMA colour
	REAL*4		DTI_HGT		!retrieve 1 DTI cell height
	LOGICAL		HADCTRLC	!test if we've had CTRLC
	LOGICAL		PREPARE
C
C	Locals
	REAL		P,Q		!x and y components
	REAL		XGRIDV,YGRIDV	!grid * 8
	INTEGER*4	X_COUNT,Y_COUNT	!counters
	INTEGER*4	J,I,N		!counters
	INTEGER*4	IERR
	INTEGER*4	LOWX,LOWY	!limits of calculated 
	INTEGER*4	HIGHX,HIGHY     !slope area
	INTEGER*4	COL		!cell colour
	REAL*4		X1(3)		! 3 by 3
	REAL*4		X2(3)		! height
	REAL*4		X3(3)		! matrix
	LOGICAL		NULL1(3)	! 3 BY 3
	LOGICAL		NULL2(3)	!  to signal
	LOGICAL		NULL3(3)	! if values null
C
C	Parameters:
	PARAMETER	PI=3.141592654	!for RAD to degrees conversion
C
C***********************************************************************
	GRADIENT1 = .TRUE.
C
	XGRIDV=X_GRID(DTICHAN)*8.0
	YGRIDV=Y_GRID(DTICHAN)*8.0
	COLMNS=0
C
C-----------------------------------------------------------------------
C set up graphics stuff
	GRADIENT1 = PREPARE(1)
	IF (.NOT.GRADIENT1) GOTO 999
C
C----------------------------------------------------------------------
C
	DO 500 X_COUNT= DTI_WINDOW_SWX(DTICHAN),DTI_WINDOW_NEX(DTICHAN)
C
  	   PIXADD=0
C
C  Has CTRL/C been pressed
	   IF (HADCTRLC()) GOTO 999
C
	   DO 400 Y_COUNT= DTI_WINDOW_SWY(DTICHAN)-2,
     &     DTI_WINDOW_NEY(DTICHAN)-2
C
C Retrieve height values for the 9 DTM nodes
	      IF(PIXADD.EQ.0)THEN
	         DO 100 I=1,3
	            X1(I)=DTI_HGT(X_COUNT-1,Y_COUNT+I,NULL1(I))
	            X2(I)=DTI_HGT(X_COUNT  ,Y_COUNT+I,NULL2(I))
	            X3(I)=DTI_HGT(X_COUNT+1,Y_COUNT+I,NULL3(I))
100	         CONTINUE
	      ELSE
	         DO 200 I=1,2
	            X1(I)=X1(I+1)
	            X2(I)=X2(I+1)
	            X3(I)=X3(I+1)
	            NULL1(I) = NULL1(I+1)
	            NULL2(I) = NULL2(I+1)
	            NULL3(I) = NULL3(I+1)
200	         CONTINUE
	         X1(3)=DTI_HGT(X_COUNT-1,Y_COUNT+3,NULL1(3))
	         X2(3)=DTI_HGT(X_COUNT  ,Y_COUNT+3,NULL2(3))
	         X3(3)=DTI_HGT(X_COUNT+1,Y_COUNT+3,NULL3(3))
	      ENDIF
C
	      PIXADD=PIXADD+1		!increment pixel count
C
C-----------------------------------------------------------------------
C Test for special cases.  The 'gradient' values set for these
C cases are interpreted by ICOL so that the correct colour is set
C prior to display, and by PUTROW so that a special value is
C output to a DTI file.
C
C Check for null heights 
C If any of the 9 heights are null, then treat height as though
C outside range
	      DO 210 J=1,3
                 IF(NULL1(J))GOTO 220
	         IF(NULL2(J))GOTO 220
	         IF(NULL3(J))GOTO 220
210	      CONTINUE
	      GOTO 230
C
220	      GRAD(PIXADD)=-3		!set value to -3 for ICOL
	      GOTO 400
C
C Sea level?
230	      IF(X2(2).EQ.0)THEN
	         GRAD(PIXADD)=-1	!set value to -1 for ICOL
	         GOTO 400		!get next height
	      ENDIF
C
C Test if inside the height range
	      IF(X2(2).LT.HLOWER.OR.X2(2).GT.HUPPER)THEN
	         GRAD(PIXADD)=-2	!set value to -2 for ICOL
	         GOTO 400		!get next height
	      ENDIF
C
C-----------------------------------------------------------------------
C Calculate x and y components of gradient
C
	      P=((X3(3)+X3(2)+X3(2)+X3(1))-(X1(3)+X1(2)+X1(2)+X1(1)))/
     &        XGRIDV
	      Q=((X3(3)+X2(3)+X2(3)+X1(3))-(X3(1)+X2(1)+X2(1)+X1(1)))/
     &        YGRIDV
C
C Combine x and y gradients and multiply by ZSCALE
              GRAD(PIXADD)=SQRT((P*P)+(Q*Q))*ZSCALE
C
	      IF (HAD_PERCENT) THEN
	         GRAD(PIXADD) = MIN((GRAD(PIXADD)*100),100.0)
	      ELSE
	         GRAD(PIXADD)=ATAN(GRAD(PIXADD))	!in radians
	         GRAD(PIXADD)=GRAD(PIXADD)*180.0/PI	!in degrees
	      ENDIF
C
C-----------------------------------------------------------------------
C Test if inside the gradient range
	      IF(GRAD(PIXADD).LT.GLOWER.OR.GRAD(PIXADD).GT.GUPPER)THEN
	         GRAD(PIXADD)=-4	!set value to -4 for ICOL
	         GOTO 400
	      ENDIF
C
400	   CONTINUE
C
C-----------------------------------------------------------------------
C Ouput this row of gradients
	   DO 450 I=1,PIXADD
	      IF(GRAPHICS) THEN
	         COL=ICOL(GRAD(I))	!set to appropriate colour
                 IF(COL.LE.60)COL=COLTAB(COL)
	         BRIGHT(I)=COL	!display byte value
	      ENDIF
450	   CONTINUE
C
	   COLMNS=COLMNS+1
	   NUMBER_PIXELS=PIXADD
C
	   IF (GRAPHICS) CALL SHDRAW		!output to SIGMA
C
	   IF (PLOT_DTI) CALL PUTROW(GRAD,1)
C
C***********************************************************************
C
500	CONTINUE
C
	IF (PLOT_DTI) CALL CLOSE_FILEOUT
C
C***********************************************************************
C
999	RETURN
	END
C
