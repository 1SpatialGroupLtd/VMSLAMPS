C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-08-30 17:05:44.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION ASPECT1
C
***	MODULE ASPECT1
***	IDENT  21MR89
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C	Author: 	M W S Reid			       Jan-1986
C
C	Modifications:
C	For use with the NULL_EDGE variable (use of
C	WHOLEX and WHOLEY removed)                      DRC    08-Sep-88
C	To use LSLLIB                                   DRC    22-Jan-87
C	Passes real data values to ICOL and PUTROW	DRC    15-May-87
C	New argument to PUTROW				MWSR   Mar-1987
C	Change X1 ,X2, X3 to INTEGER*4 			MWSR   Jul-1986
C       Allow gradient to be calculated to window edge  MWSR   Jul-1986
C
C	Subroutine to calculate local aspect using 3X3 matrix.
C
 	IMPLICIT NONE
C
C--------------------------------------------------------------------------
C
***	COMMON/LSL$CMNLSL:TXTC/
***	COMMON/LSL$CMNLSL:EXPC/
***	COMMON/LSL$CMNDTI:DTIHDR/
***	COMMON/HERE:SLPCMN/
***	COMMON/HERE:DISCMN/	
C
C	GKS common block etc.
***	COMMON/HERE:GKS/
***	PARAMETER/HERE:GKSPAR/
C
C----------------------------------------------------------------------
C Functions called:
C
	REAL*4		DTI_HGT		!retrieve 1 DTI cell height
	LOGICAL		HADCTRLC	!to test if we've had CTRLC
	LOGICAL		PREPARE
C
	REAL		P,Q		!x and y components
	REAL		XGRIDV,YGRIDV	!grid * 8
	REAL		ASP(MAX_COLUMN)	!aspect array
	INTEGER*2	COL		!cell colour
	REAL*4		X1(3)		! 3 by 3
	REAL*4		X2(3)		! height
	REAL*4		X3(3)		! matrix
	LOGICAL		NULL1(3)	! 3 BY 3
	LOGICAL		NULL2(3)	!  to signal
	LOGICAL		NULL3(3)	! if values null
	INTEGER*4	X_COUNT,Y_COUNT	!counters
	INTEGER*4	J,I,N		!counters
	INTEGER*4	IERR
C
	PARAMETER	PI=3.141592654	!for RAD to degrees conversion
C
C***********************************************************************
	ASPECT1 = .TRUE.
C
	XGRIDV=X_GRID(DTICHAN)*8.0
	YGRIDV=Y_GRID(DTICHAN)*8.0
C
	COLMNS=0
C
C-----------------------------------------------------------------------
C set up graphics stuff
	ASPECT1 = PREPARE(3)
	IF (.NOT.ASPECT1) GOTO 999
C
C***********************************************************************
C
	DO 500 X_COUNT= DTI_WINDOW_SWX(DTICHAN),DTI_WINDOW_NEX(DTICHAN)
C
  	   PIXADD=0
C
C Has CTRL/C been pressed
	   IF (HADCTRLC()) GOTO 999
C
	   DO 400 Y_COUNT= DTI_WINDOW_SWY(DTICHAN)-2,
     &                     DTI_WINDOW_NEY(DTICHAN)-2
C
C Retrieve height values
	      IF(PIXADD.EQ.0)THEN
	         DO 100 I=1,3
	            X1(I)=DTI_HGT(X_COUNT-1,Y_COUNT+I,NULL1(I))
	            X2(I)=DTI_HGT(X_COUNT  ,Y_COUNT+I,NULL2(I))
	            X3(I)=DTI_HGT(X_COUNT+1,Y_COUNT+I,NULL3(I))
100	         CONTINUE
	      ELSE
	         DO 200 I=1,2
	            X1(I)=X1(I+1)
	            X2(I)=X2(I+1)
	            X3(I)=X3(I+1)
	            NULL1(I) = NULL1(I+1)
	            NULL2(I) = NULL2(I+1)
	            NULL3(I) = NULL3(I+1)
200	         CONTINUE
	         X1(3)=DTI_HGT(X_COUNT-1,Y_COUNT+3,NULL1(3))
	         X2(3)=DTI_HGT(X_COUNT  ,Y_COUNT+3,NULL2(3))
	         X3(3)=DTI_HGT(X_COUNT+1,Y_COUNT+3,NULL3(3))
	      ENDIF
C
	      PIXADD=PIXADD+1		!increment pixel counter
C***********************************************************************
C
C Check for null heights ie below -32766
C If any of the 9 heights are null, then treat height as though
C outside range
	      DO 210 J=1,3
                 IF(NULL1(J))GOTO 220
	         IF(NULL2(J))GOTO 220
	         IF(NULL3(J))GOTO 220
210	      CONTINUE
	      GOTO 230
C
220	      ASP(PIXADD)=-3			!special case.
	      BRIGHT(PIXADD)=0
	      GOTO 400
C
230           IF(X2(2).EQ.0)THEN		!sea
                 ASP(PIXADD)=-1
	         GOTO 350
	      ENDIF
C
C Test if inside the height range
	      IF(X2(2).LT.HLOWER.OR.X2(2).GT.HUPPER)THEN
	         ASP(PIXADD)=-2		!set value to -2
	         GOTO 350		!get next height
	      ENDIF
C
C
C***********************************************************************
C Calculate x and y components of gradient
C
	      P=((X3(3)+X3(2)+X3(2)+X3(1))-(X1(3)+X1(2)+X1(2)+X1(1)))/
     &        XGRIDV
	      Q=((X3(3)+X2(3)+X2(3)+X1(3))-(X3(1)+X2(1)+X2(1)+X1(1)))/
     &        YGRIDV
C
C Combine x and y gradients
 	      GRAD(PIXADD)=SQRT((P*P)+(Q*Q))
	      IF (GRAD(PIXADD) .LT. 0.01) THEN
	         BRIGHT(PIXADD)=0
	         ASP(PIXADD)=0.0
	         GOTO 350
	      ELSEIF(( P .LT. 0).AND.(Q .LT. 0)) THEN
	         Q=ABS(Q)
	         ASP(PIXADD)= ACOS(Q/GRAD(PIXADD))
	         ASP(PIXADD)=ASP(PIXADD)*180.0/PI
	      ELSEIF((P .LT. 0).AND.(Q .GE. 0)) THEN
	         Q=ABS(Q)
	         ASP(PIXADD)=ACOS(Q/GRAD(PIXADD))
	         ASP(PIXADD)=180-ASP(PIXADD)*180.0/PI
	      ELSEIF((P .GE. 0).AND.(Q .GE. 0)) THEN
	         Q=ABS(Q)
	         ASP(PIXADD)=ACOS(Q/GRAD(PIXADD))
	         ASP(PIXADD)=180+ASP(PIXADD)*180.0/PI
	      ELSE
	         Q=ABS(Q)
	         ASP(PIXADD)=ACOS(Q/GRAD(PIXADD))
	         ASP(PIXADD)=360-ASP(PIXADD)*180.0/PI
	      ENDIF   
C
	      IF(ASP(PIXADD).EQ.360.0)ASP(PIXADD)=0.0
C
C***********************************************************************
C
350	      IF(GRAPHICS) THEN
C
	         IF(ASP(PIXADD).EQ.-2)THEN	!outside height limits
	            BRIGHT(PIXADD)=127		!white
	            GOTO 360
	         ENDIF
C	     
C Test if inside the value range
C	         IF(ASP(PIXADD).LT.GLOWER.OR.ASP(PIXADD).GT.GUPPER)THEN
C	            BRIGHT(PIXADD)=0	        !Black
C	            GOTO 360		
C	         ENDIF
C
	         IF(ASP(PIXADD).EQ.-1)THEN	!sea
	            IF(GREY_ASPECT)THEN
	               BRIGHT(PIXADD)=0		!black
	            ELSE
	               BRIGHT(PIXADD)=1		!blue
	            ENDIF
	            GOTO 360
	         ENDIF
C
	         COL=INT(ASP(PIXADD)/ASPSTE)	!divide by step interval
C
	         IF(GREY_ASPECT)THEN
	            BRIGHT(PIXADD) =MIN(127,COL*GREYSTEP+1)
	         ELSE
	            BRIGHT(PIXADD)=COL+2
	         ENDIF	     
C
	      ENDIF
C----------------------------------------------------------------------
C
360	      IF(PLOT_DTI)THEN
C
	         IF(ASP(PIXADD).EQ.-1)    ASP(PIXADD)=0.0	!sea
	         IF(ASP(PIXADD).EQ.360.0) ASP(PIXADD)=0.0
C
	      ENDIF
C-----------------------------------------------------------------------
C
400	   CONTINUE
C
C***********************************************************************
C
	   COLMNS=COLMNS+1
	   NUMBER_PIXELS=PIXADD
C
	   IF (GRAPHICS) CALL SHDRAW		!output to SIGMA
C
	   IF (PLOT_DTI) CALL PUTROW(ASP,3)
C
500	CONTINUE
C
	IF(PLOT_DTI) CALL CLOSE_FILEOUT
C
C**********************************************************************
C
999	RETURN
	END
C
