C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-08-30 16:56:22.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION GRADIENT4(MAXIMUM)
C
***	MODULE GRADIENT4
***	IDENT  14MR89
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C	Author: 	D R Catlow
C
C	Modifications:
C	Changed for new DTILIB version of SLOPES	MWSR   09-Mar-89
C	FOr use with PERCENT command			MWSR   27-Feb-89
C	Added argument MAXIMUM to indicate that maximum slope value
C	is required, and for use with NULL_BORDER command 
C							DRC    08-Sep-88
C	To use LSLLIB                                   DRC    22-Jan-87
C	Passes real array of values to ICOL and PUTROW  DRC    15-May-87
C	New argument to putrow				MWSR   Mar-1987
C
C	This routine implements a fourth slope alogirithm for the
C	LSL SLOPES program.
C
C	The algorithm takes a matrix of 9 points and calculates
C	a slope value for the central point, based on the normals
C	of the facets formed by the matrix points:
C	facet 1 = IDB
C	facet 2 = IHF
C	facet 3 = IHB
C	facet 4 = IFD
C	
C
C		C-----D-----E
C		|     |     |
C               |     |     |
C	        B-----I-----F
C               |     |     |
C               |     |     |
C		A_____H_____G
C
C
C	If MAXIMUM is true, the maximum of the four slope values
C	is taken, otherwise mean of the four slope values is 
C	calculated to determine an 'average' slope value for 
C	the matrix point I
C	
C-------------------------------------------------------------------------
C
 	IMPLICIT NONE
C
***	COMMON/LSL$CMNLSL:TXTC/
***	COMMON/LSL$CMNLSL:EXPC/
***	COMMON/LSL$CMNDTI:DTIHDR/
***	COMMON/HERE:SLPCMN/
***	COMMON/HERE:DISCMN/	
C
C	GKS common block etc.
***	COMMON/HERE:GKS/
***	PARAMETER/HERE:GKSPAR/
C
C-----------------------------------------------------------------------
C	Argument
	LOGICAL*4	MAXIMUM		!if .t. calculate maximum
C					!slope value
C
C	Functions:
	INTEGER*4	ICOL		!set SIGMA colour
	REAL*4		DTI_HGT		!retrieve 1 DTI cell height
	LOGICAL		HADCTRLC	!test if we've had CTRLC
	LOGICAL		PREPARE
C
C	Locals:
	REAL		X_NORMAL(4)	!X component of normal
	REAL		Y_NORMAL(4)	!Y component of normal
	REAL		Z_NORMAL	!Z component of normal
C					!east grid * north grid values
	REAL		Z_NORMAL_SQ	!Z component of normal squared
	REAL		MAG_NORMAL(4)	!magnitude of normals for 2 facets
	REAL		ANG_NORMAL(4)	!angle formed by the normals for
C					!the 2 facets
	REAL*4		Z(5)		!Z values for corners of grid cell
	LOGICAL		NULL(5)		!flags to say if above are null

	INTEGER*4	IERR		!function return
	INTEGER*4	COL		!cell colour index
	INTEGER*4	X_COUNT,Y_COUNT	!counters
	INTEGER*4	J,I,N		!counters
C
C	Parameters:
	PARAMETER	PI=3.141592654	!for RAD to degrees conversion
C
C***********************************************************************
	GRADIENT4 = .TRUE.
C
	COLMNS = 0		!column number
C
C-----------------------------------------------------------------------
C Set up Z component of the normals (constant for all cells)
C
	Z_NORMAL    = X_GRID(DTICHAN)*Y_GRID(DTICHAN)
	Z_NORMAL_SQ = Z_NORMAL**2		!squared
C
C-----------------------------------------------------------------------
C set up all the graphic stuff etc.
	GRADIENT4 = PREPARE(1)
	IF (.NOT.GRADIENT4) GOTO 999
C
C-----------------------------------------------------------------------
C
	DO 500 X_COUNT= DTI_WINDOW_SWX(DTICHAN),DTI_WINDOW_NEX(DTICHAN)
C
	   PIXADD=0		!initialise pixel count
C
C Check if CTRL/C been pressed
	   IF (HADCTRLC()) GOTO 999	!yes, so exit
C
	   DO 400 Y_COUNT= DTI_WINDOW_SWY(DTICHAN),
     &                     DTI_WINDOW_NEY(DTICHAN)
C
C	   Retrieve 5 heights rquired
	      Z(1) = DTI_HGT(X_COUNT-1,Y_COUNT  ,NULL(1))
	      Z(2)  =DTI_HGT(X_COUNT  ,Y_COUNT+1,NULL(2))
	      Z(3) = DTI_HGT(X_COUNT+1,Y_COUNT  ,NULL(3))
	      Z(4) = DTI_HGT(X_COUNT  ,Y_COUNT-1,NULL(4))
	      Z(5) = DTI_HGT(X_COUNT,  Y_COUNT  ,NULL(5))
C
 	      PIXADD=PIXADD+1		!update pixel count
C
C-----------------------------------------------------------------------
C Test for special cases.  The 'gradient' values set for these
C cases are interpreted by ICOL so that the correct colour is set
C prior to display.
C
C Check for null heights ie below -32766
C If any of the 5 heights are null, then treat gradient as though
C outside range
C
	      IF (NULL(1).OR.NULL(2).OR.NULL(3).OR.NULL(4).OR.NULL(5))
     &        THEN
	         GRAD(PIXADD)=-3	!set value to -3 for ICOL
	         GOTO 400		!get next height
C
C Sea level?
	      ELSE IF (Z(5).EQ.0)THEN
	         GRAD(PIXADD)=-1	!set value to -1 for ICOL
	         GOTO 400		!get next height
C
C	Test if inside the height range
	      ELSE IF (Z(5).LT.HLOWER.OR.Z(5).GT.HUPPER)THEN
		 GRAD(PIXADD)=-2	!set value to -2 for ICOL
	         GOTO 400		!get next height
C
	      ENDIF
C
C-----------------------------------------------------------------------
C Calculate the normals for the four facets
C Facet 1
 	      X_NORMAL(1)=(Y_GRID(DTICHAN)*(Z(1)-Z(5))*ZSCALE)**2
	      Y_NORMAL(1)=(X_GRID(DTICHAN)*(Z(2)-Z(5))*ZSCALE)**2
C Facet 3
	      X_NORMAL(2)=(Y_GRID(DTICHAN)*(Z(5)-Z(3))*ZSCALE)**2
	      Y_NORMAL(2)=(X_GRID(DTICHAN)*(Z(5)-Z(4))*ZSCALE)**2
C	   
	      MAG_NORMAL(1)=SQRT(X_NORMAL(1)+Y_NORMAL(1)+Z_NORMAL_SQ)
	      MAG_NORMAL(2)=SQRT(X_NORMAL(2)+Y_NORMAL(2)+Z_NORMAL_SQ)
	      MAG_NORMAL(3)=SQRT(X_NORMAL(1)+Y_NORMAL(2)+Z_NORMAL_SQ)
	      MAG_NORMAL(4)=SQRT(X_NORMAL(2)+Y_NORMAL(1)+Z_NORMAL_SQ)
C
	      ANG_NORMAL(1)=ACOS(Z_NORMAL/MAG_NORMAL(1))
	      ANG_NORMAL(2)=ACOS(Z_NORMAL/MAG_NORMAL(2))
	      ANG_NORMAL(3)=ACOS(Z_NORMAL/MAG_NORMAL(3))
	      ANG_NORMAL(4)=ACOS(Z_NORMAL/MAG_NORMAL(4))
C
C-----------------------------------------------------------------------
C Maximum or mean?
C
	      IF(MAXIMUM)THEN
C Determine the maximum of the 4 slope values
	         GRAD(PIXADD)=ANG_NORMAL(1)
	         DO 300 I=2,4
	            IF(GRAD(PIXADD).LT.ANG_NORMAL(I))
     &              GRAD(PIXADD)=ANG_NORMAL(I)
300	         CONTINUE
	      ELSE
C
C Determine the mean of the 4 slope values
	         GRAD(PIXADD)=(ANG_NORMAL(1)+ANG_NORMAL(2)
     &           +ANG_NORMAL(3)+ANG_NORMAL(4))*0.25	!in radians
	      ENDIF
C
	      IF(HAD_PERCENT)THEN
	         GRAD(PIXADD) = TAN(GRAD(PIXADD))
	         GRAD(PIXADD) = MIN((GRAD(PIXADD)*100),100.0) ! percent
	      ELSE
C
	         GRAD(PIXADD)=GRAD(PIXADD)*180.0/PI	! in degrees
	      ENDIF
C
C-----------------------------------------------------------------------
C Test if inside the gradient range
	      IF(GRAD(PIXADD).LT.GLOWER.OR.GRAD(PIXADD).GT.GUPPER)THEN
	         GRAD(PIXADD)=-4	 !set value to -4 for ICOL
	         GOTO 400
	      ENDIF
C
400	   CONTINUE
C
C-----------------------------------------------------------------------
C Ouput this row of gradients
	   DO 450 I=1,PIXADD
	      IF(GRAPHICS) THEN
	         COL=ICOL(GRAD(I))	!set to appropriate colour
                 IF(COL.LE.60)COL=COLTAB(COL)
	         BRIGHT(I)=COL
	      ENDIF
450	   CONTINUE
C
	   COLMNS=COLMNS+1
	   NUMBER_PIXELS=PIXADD
C
	   IF (GRAPHICS) CALL SHDRAW		!output to screen
C
	   IF (PLOT_DTI) CALL PUTROW(GRAD,2,1)
C
C***********************************************************************
C
500	CONTINUE
C
	IF (PLOT_DTI) CALL CLOSE_FILEOUT
C
C***********************************************************************
C
999	RETURN
	END
C
