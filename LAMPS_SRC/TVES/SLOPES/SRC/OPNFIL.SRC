C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-03-10 15:33:28.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION OPNFIL
C
***	IDENT	10MR89
***	MODULE	OPNFIL
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C	Author    : D R Catlow
C	Modified  : April 1988 in advance of conversion to use
C		    DTILIB to handle ALVY type files. This is
C		    just a temporary measure
C	Modified  : August 1988 to handle LSLA type files.  Again
C		    hopefully a temp. measure until modified to
C		    use LSLLIB.
C	Modified  : October 1988 to check for 0 grid intervals
C	
C	To use LSLLIB                                   DRC    22-Jan-87
CMOD	To use DTILIB					MWSR   02-Mar-89
C
	IMPLICIT NONE
C
C parameters
***	PARAMETER/LSL$CMNDTI:DTILIBMSG/
***	PARAMETER/LSL$CMNDTI:DTIPAR/
C
C commons
***	COMMON/LSL$CMNLSL:TXTC/
***	COMMON/LSL$CMNLSL:EXPC/
C
***	COMMON/LSL$CMNDTI:DTIHDR/
***	COMMON/HERE:SLPCMN/
C
C functions
	INTEGER*4	GETFILNAM	! get file name	
	INTEGER*4	DTI_CLOSE	! close DTI file
	INTEGER*4	DTI_OPEN	! open DTI file
	INTEGER*4	DTI_UNITS	! set up default units
	LOGICAL		TRNALL		! translate logical name
	LOGICAL		RDCHS
C
C workspace
	INTEGER*4	IERR
	INTEGER*4	RET
	INTEGER*2	LEN
	LOGICAL		ERR
	CHARACTER*80	FILNAM
	BYTE		CH
	LOGICAL		DEFAULT_WINDOW
	CHARACTER*1	TRANSLATION
C
C
C**********************************************************************
C
C
	OPNFIL=.FALSE.		! Assume unsuccessful
C
C Close current file
	IF(HADDTI)THEN
           RET = DTI_CLOSE(DTICHAN,.FALSE.,.TRUE.,IERR)
	   IF (.NOT. RET) THEN
	      CALL LSL_PUTMSG(RET)
	      IF (RET .EQ. DTI__SYSERR) THEN
	         CALL LSL_PUTMSG(IERR)
	      ENDIF
	      GOTO 999
	   ENDIF
	   HADDTI=.FALSE.
	ENDIF
C
C Parse the filename
C Check for optional quotes
50	IF(RDCHS(CH))THEN
	  CALL WRITEF('%S specifying command FILEIN',EBELL)
	  CALL WRITEF ('Filename is missing')
	  CALL BSLN
	  GOTO 999	  
	ELSE
	  IF (CH.EQ.''''.OR.CH.EQ.'"') THEN
	    RET = GETFILNAM(FILNAM,LEN,'LSL$DTI:DTI.DTI',.TRUE.,CH)
	  ELSE
	    CALL BSCH
	    RET = GETFILNAM(FILNAM,LEN,'LSL$DTI:DTI.DTI',.TRUE.)
	  ENDIF
C
	  IF (.NOT.RET) THEN
	    CALL LSL_PUTMSG(RET)
	    GOTO 999
	  ENDIF
	ENDIF
C
C Open the file
	RET = DTI_OPEN(DTICHAN,FILNAM,LEN,.FALSE.,IERR,.TRUE.)
	IF (.NOT. RET) THEN
	   CALL LSL_PUTMSG(RET)
	   IF (RET .EQ. DTI__SYSERR) THEN
	      CALL LSL_PUTMSG(IERR)
	   ENDIF
	   GOTO 999
	ENDIF
C
C Check file not too small for slope calculations
	IF (X_EXTENT(DTICHAN).LT.3.OR.Y_EXTENT(DTICHAN).LT.3)THEN
	   CALL WRITEF('%S Matrix too small - file abandoned',EBELL)
           RET = DTI_CLOSE(DTICHAN,.FALSE.,.TRUE.,IERR)
	   IF (.NOT. RET) THEN
	      CALL LSL_PUTMSG(RET)
	      IF (RET .EQ. DTI__SYSERR) THEN
	         CALL LSL_PUTMSG(IERR)
	      ENDIF
	      GOTO 999
	   ENDIF
	ENDIF
C	
C Read min/max heights
C branch according to datatype
	GOTO (55,55,60,70) DATA_TYPE(DTICHAN)
C
C byte word
55	HLOWER=MIN_WVALUE(DTICHAN)
	HUPPER=MAX_WVALUE(DTICHAN)
	GOTO 80
C
C longword
60	HLOWER=MIN_LVALUE(DTICHAN)
	HUPPER=MAX_LVALUE(DTICHAN)
	GOTO 80
C
C real
70	HLOWER=NINT(MIN_RVALUE(DTICHAN))
	HUPPER=NINT(MAX_RVALUE(DTICHAN))
	GOTO 80
C
C test logical name to see if we set up default window
80	RET = TRNALL('LSL$MATRIX_DEFAULT_WINDOW',TRANSLATION)
	IF(.NOT.RET.OR.TRANSLATION.NE.'1')THEN
	   DEFAULT_WINDOW=.FALSE.
	ELSE
	   DEFAULT_WINDOW=.TRUE.
	ENDIF
C
C Set up default window for current channel
	DTI_WINDOW_SWX(DTICHAN)=1
	DTI_WINDOW_SWY(DTICHAN)=1
	IF(DEFAULT_WINDOW)THEN
	   DTI_WINDOW_NEX(DTICHAN)=200
	   DTI_WINDOW_NEY(DTICHAN)=200
	ELSE
C
C use whole DTI file
	   DTI_WINDOW_NEX(DTICHAN)=X_EXTENT(DTICHAN)
	   DTI_WINDOW_NEY(DTICHAN)=Y_EXTENT(DTICHAN)
	ENDIF
C
C Force window into range
	DTI_WINDOW_NEX(DTICHAN) = 
     &      MIN(DTI_WINDOW_NEX(DTICHAN),X_EXTENT(DTICHAN))
	DTI_WINDOW_NEY(DTICHAN) = 
     &      MIN(DTI_WINDOW_NEY(DTICHAN),Y_EXTENT(DTICHAN))
C
	MATSIZ(1)=DTI_WINDOW_NEX(DTICHAN)
	MATSIZ(2)=DTI_WINDOW_NEY(DTICHAN)
C
C Set up default units
	UNTYPE = 0
	RET = DTI_UNITS(DTICHAN,UNTYPE)
	IF(.NOT. RET)THEN
	   CALL LSL_PUTMSG(RET)
	   UNTYPE = UNITS_DTI
	ENDIF
C
C print out info
	CALL DTI_PRINT_HEADER(DTICHAN,UNTYPE,HAD_ABSOLUTE)
C 
C got a DTI file
	HADDTI=.TRUE.
C
C check the window size
	CALL CHKWIN
C
C success
	OPNFIL=.TRUE.
C
999	RETURN
C
	END
