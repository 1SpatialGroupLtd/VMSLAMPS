C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-03-08 13:20:40.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE TEXT (INFO)
C
***	MODULE	TEXT
***	IDENT	08MR89
C
C	Copyright : Laser-Scan Laboratories Ltd, Cambridge, England
C	Author    : MWSR
C
C	Modified  : DRC   Jan 1988  - Use with LSLIB and extended
C			              GKSLDLIB
C
C	Routine for SLOPES to anotate display with
C	legend and parameter details
C	INFO=1	 	SLOPE details (gradient and height range)
C	INFO=2		SHADE details (sun position and sun angle)
C	INFO=3		ASPECT details (aspect angular step)
C	INFO=4		HDIFF details (value range, height range)
C
	IMPLICIT NONE
C
C	LSLLIB commons
***	COMMON/LSL$CMNLSL:EXPC/
***	COMMON/LSL$CMNDTI:DTIHDR/
***	COMMON/HERE:SLPCMN/	
***	COMMON/HERE:TAB/		
C
C	Graphics commons
***	COMMON/HERE:GKS/
***	PARAMETER/HERE:GKSPAR/
C
C	Argument
	INTEGER*4		INFO	!controls which text is output
C
C	Locals:
	REAL			X(2),Y(2)
	REAL			SUN
	REAL			SUN_ANGLE
	INTEGER*4		I	!counter
	INTEGER*4		LLDEGS(4)
	INTEGER			DEGR,MINU,SECO
	LOGICAL			NEGA
	REAL*8			X_OUT_SW, Y_OUT_SW
	REAL*8			X_OUT_NE, Y_OUT_NE
C
C********************************************************************
C
	IF(.NOT.TEXTON)GOTO 999
C
C	Select first set of planes
	CALL LSG_PLANE_SELECT(WKID,PLANE_MASK)
	CALL LSG_PLANE_OFFSET(WKID,0)
C
C	Do fill area to overwrite the old text
	IF(.NOT.CLEAR)THEN
	  CALL GSFAIS(GSOLID)	!solid fill
	  CALL GSFACI(0)	!set fill area colour to black
	  X(1)=150.0
	  Y(1)=1.0
	  X(2)=RASTSZ(1)
	  Y(2)=DISPLAY_SWY-2
	  CALL LSG_FILL_RECTANGLE(X,Y)	!To draw black box
	ENDIF
C
C	Set up line and text attributes
	WHITE = 255
	CALL GSTXCI (WHITE)		!text colour
	CALL GSCHH(RASTSZ(2)/96.0)	!text height
C
C	Anotate with window details
	X(1)= 150.0
	Y(1)=DISPLAY_SWY-40
	CALL GTX (X(1),Y(1),'DTM area:')
C
	Y(1)=DISPLAY_SWY-60
C
	GOTO (110,120,130,140,120)UNTYPE
C
C	Output details in matrix units
110	CALL EXPAND('SW: %I5 %I5',
     &       DTI_WINDOW_SWX(DTICHAN),DTI_WINDOW_SWY(DTICHAN))
	CALL GTX( X(1),Y(1),EXPDSC)
C
	CALL EXPAND('NE: %I5 %I5',
     &	     DTI_WINDOW_NEX(DTICHAN),DTI_WINDOW_NEY(DTICHAN))
	Y(1)=Y(1)-20
	CALL GTX( X(1),Y(1),EXPDSC)
	GOTO 150
C
120	CALL DTI_WIN_MATRIX_TO_UNITS(DTICHAN, 
     &  DTI_WINDOW_SWX(DTICHAN),DTI_WINDOW_SWY(DTICHAN),
     &  DTI_WINDOW_NEX(DTICHAN),DTI_WINDOW_NEY(DTICHAN),
     &  UNTYPE, DTI_ORDER_CORNER(DTICHAN), 
     &  HAD_ABSOLUTE, X_OUT_SW, Y_OUT_SW,X_OUT_NE,Y_OUT_NE)
	CALL EXPAND
     &  	   ('SW: %F10.2 %F10.2',
     &  X_OUT_SW,Y_OUT_SW)
	CALL GTX( X(1),Y(1),EXPDSC)
C
	CALL EXPAND('NE: %^D%F10.2 %F10.2',X_OUT_NE,Y_OUT_NE)
	Y(1)=Y(1)-20
	CALL GTX( X(1),Y(1),EXPDSC)
	GOTO 150
C
130	CALL DTI_WIN_MATRIX_TO_UNITS(DTICHAN, 
     &  DTI_WINDOW_SWX(DTICHAN),DTI_WINDOW_SWY(DTICHAN),
     &  DTI_WINDOW_NEX(DTICHAN),DTI_WINDOW_NEY(DTICHAN),
     &  UNTYPE, DTI_ORDER_CORNER(DTICHAN), 
     &  .TRUE., X_OUT_SW, Y_OUT_SW,X_OUT_NE,Y_OUT_NE)
        CALL EXPAND('SW: ')
	CALL CVTANG(NINT(Y_OUT_SW),NEGA,DEGR,MINU,SECO)
	CALL APPEND('%P %I3 %P0%I2 %P0%I2',DEGR,MINU,SECO)
	IF(NEGA)THEN
	  CALL APPEND('S  ')
	ELSE
	  CALL APPEND('N  ')
	ENDIF
C
	CALL CVTANG(NINT(X_OUT_SW),NEGA,DEGR,MINU,SECO)
	CALL APPEND('%P %I3 %P0%I2 %P0%I2',DEGR,MINU,SECO)
	IF(NEGA)THEN
	  CALL APPEND('W  ')
	ELSE
	  CALL APPEND('E  ')
	ENDIF
	CALL GTX( X(1),Y(1),EXPDSC)
C
	CALL CVTANG(NINT(Y_OUT_NE),NEGA,DEGR,MINU,SECO)
	CALL EXPAND('NE: ')
	CALL APPEND('%P %I3 %P0%I2 %P0%I2',DEGR,MINU,SECO)
	IF(NEGA)THEN
	  CALL APPEND('S  ')
	ELSE
	  CALL APPEND('N  ')
	ENDIF
C
	CALL CVTANG(NINT(X_OUT_NE),NEGA,DEGR,MINU,SECO)
	CALL APPEND('%P %I3 %P0%I2 %P0%I2',DEGR,MINU,SECO)
	IF(NEGA)THEN
	  CALL APPEND('W  ')
	ELSE
	  CALL APPEND('E  ')
	ENDIF
	Y(1)=Y(1)-20
	CALL GTX( X(1),Y(1),EXPDSC)
	GOTO 150	
C	  
140	CALL DTI_WIN_MATRIX_TO_UNITS(DTICHAN, 
     &  DTI_WINDOW_SWX(DTICHAN),DTI_WINDOW_SWY(DTICHAN),
     &  DTI_WINDOW_NEX(DTICHAN),DTI_WINDOW_NEY(DTICHAN),
     &  UNTYPE, DTI_ORDER_CORNER(DTICHAN), 
     &  .TRUE., X_OUT_SW, Y_OUT_SW,X_OUT_NE,Y_OUT_NE)
	CALL EXPAND
     &	    ('SW: %^L%I9 %I9',NINT(Y_OUT_SW/10), NINT(X_OUT_SW/10))
	CALL GTX( X(1),Y(1),EXPDSC)
	CALL EXPAND
     &      ('NE: %^L%I9 %I9',NINT(Y_OUT_NE/10), NINT(X_OUT_NE/10))
	Y(1)=Y(1)-20
	CALL GTX( X(1),Y(1),EXPDSC)
	GOTO 150
C----------------------------------------------------------------------
C
C	Then the filename...
150	Y(1)=DISPLAY_SWY-120
	CALL EXPAND('File: %S',
     &  DTI_NAME(DTICHAN)(1:DTI_NAME_LENGTH(DTICHAN)))
	CALL GTX( X(1),Y(1),EXPDSC)
C
C----------------------------------------------------------------------
C
	X(1)=DISPLAY_SWX+(DIS_SIZE(1)*0.5)
	Y(1)=DISPLAY_SWY-40
C
	IF(INFO.EQ.1)THEN
	  CALL EXPAND('Height range: %N to %N',HLOWER,HUPPER)
	  CALL GTX( X(1),Y(1),EXPDSC)
	  CALL EXPAND('Gradient range: %N to %N',GLOWER,GUPPER)
	  Y(1)=Y(1)-20
	  CALL GTX( X(1),Y(1),EXPDSC)
	  IF (HAD_PERCENT) THEN
	     CALL EXPAND('Gradient units: Percentage Slope')
	  ELSE
	     CALL EXPAND('Gradient units: Degrees of Slope')
	  ENDIF
	  Y(1)=Y(1)-20
	  CALL GTX( X(1),Y(1),EXPDSC)
	  CALL EXPAND('Number of steps: %N',NSTEP)
	  Y(1)=Y(1)-20
	  CALL GTX( X(1),Y(1),EXPDSC)
          CALL EXPAND('Slope Algorithm: %N',GRAD_TYPE)
	  Y(1)=Y(1)-20
	  CALL GTX( X(1),Y(1),EXPDSC)
C
	ELSEIF(INFO .EQ. 2)THEN
	  IF(REFMAP.EQ.1)THEN		!Position fixed
	    SUN_ANGLE=45.0
	    SUN=315.0
	  ELSE  
	    IF(SUNPOS.LT.180)THEN
	      SUN=SUNPOS+180.0
	    ELSE
              SUN=SUNPOS-180.0
	    ENDIF
	    SUN_ANGLE=SUNANG
	  ENDIF
	  CALL EXPAND('Sun Position: %F0.3',SUN)
	  CALL GTX( X(1),Y(1),EXPDSC)
	  CALL EXPAND('Sun Angle: %F0.3',90-SUN_ANGLE)
	  Y(1)=Y(1)-20
	  CALL GTX( X(1),Y(1),EXPDSC)
	  CALL EXPAND('Reflectance map: %N',REFMAP)
	  Y(1)=Y(1)-20
	  CALL GTX( X(1),Y(1),EXPDSC)
C
	ELSEIF(INFO .EQ. 3)THEN
	  CALL EXPAND('Height range: %N to %N',HLOWER,HUPPER)
	  CALL GTX( X(1),Y(1),EXPDSC)
	  CALL EXPAND('Angular Step: %N',ASPSTE)
	  Y(1)=Y(1)-20
	  CALL GTX( X(1),Y(1),EXPDSC)
	ELSEIF(INFO.EQ.4)THEN
	  CALL EXPAND('Height range: %N to %N',HLOWER,HUPPER)
	  CALL GTX( X(1),Y(1),EXPDSC)
	  CALL EXPAND('Value range: %N to %N',GLOWER,GUPPER)
	  Y(1)=Y(1)-20
	  CALL GTX( X(1),Y(1),EXPDSC)
	  CALL EXPAND('Number of steps: %N',NSTEP)
	  Y(1)=Y(1)-20
	  CALL GTX( X(1),Y(1),EXPDSC)
	  IF(AVERAGE_HDIFF)THEN
	    CALL EXPAND('Display of Average Height Difference')
	  ELSE
	    CALL EXPAND('Display of Maximum Height Difference')
	  ENDIF
	  Y(1)=Y(1)-20
	  CALL GTX( X(1),Y(1),EXPDSC)
	ENDIF
C
	CALL GUWK (WKID,GSUPP)		!Update workstation
C
999	RETURN
C
	END
