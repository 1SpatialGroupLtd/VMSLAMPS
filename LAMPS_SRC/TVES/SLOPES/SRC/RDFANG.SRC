C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1985-12-23 17:51:58.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION RDFANG( LARGE, TENTH, HEMI, RESULT )
C
***	IDENT	26JL85
***	MODULE	RDFANG
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 22 March 1983
C
CMOD Lower case hemisphere letters added for DMASUM   TJH  26-Jul-1985
C Modified CC Brunt, 10 October 1983 (TENTH arg added)
C Modified CC Brunt, 27 October 1983 (HEMI arg added)
C
C To read a fixed format angle from TXTC the current text buffer
C returning TRUE if an error occurs, FALSE if it all works
C
C The different forms are:
C			[D]DDMMSS[.S][H]	where H is hemisphere
C
C if LARGE then 3 digit degrees, if TENTH then have TENTH seconds
C if HEMI then has a hemisphere letter
C
	IMPLICIT NONE
C
C parameters - hemisphere letters
C
	PARAMETER	POSN = 'N'	! upper case hemisphere letters
	PARAMETER	POSE = 'E'
	PARAMETER	NEGS = 'S'
	PARAMETER	NEGW = 'W'
	PARAMETER	POSNLC = 'n'	! lower case hemisphere letters
	PARAMETER	POSELC = 'e'
	PARAMETER	NEGSLC = 's'
	PARAMETER	NEGWLC = 'w'
C
C we call
C
	LOGICAL		RDCH	! read a char, exact
	LOGICAL		RDINT	! read a number (int*2)
	LOGICAL		RDREAL	! read a real number
C
C we were passed
C
	LOGICAL		LARGE	! true if we have 3 digit degrees
	LOGICAL		TENTH	! true if decimal seconds
	LOGICAL		HEMI	! true if hemisphere letter
C
C and we return
C
	INTEGER*4	RESULT	! in tenths of a second
C
C and workspace is
C
	INTEGER*4	ACCUM	! accumulate angle in here
	INTEGER*2	NUM	! a number
	INTEGER*4	NUMBER	! a bigger number
	REAL		RNUM	! a real number
	BYTE		CHAR	! a character
	INTEGER*2	DCP1,DCP2	! decode pointer saves
	INTEGER*2	LENGTH	! expected no. of chars
C
	EQUIVALENCE	(NUM,NUMBER)
C
C
	RDFANG = .TRUE.		! be pessimistic
	NUMBER = 0		! make sure upper two bytes are zero
	CALL DCPSAV( DCP1 )	! decode pointer on entry
C
C deal with degrees first...
C
C the degrees field occupies the next 2 or 3 characters
C
C we want to concern ourselves with the next few characters alone, so
C we set a window from this position onwards
C
	IF (LARGE) THEN
	   CALL SETWIN( ,3 )		! 3 digits
	   LENGTH = 7
	ELSE
	   CALL SETWIN( , 2 )		! 2 digits
	   LENGTH = 6
	ENDIF
C
C and read the degrees
C
	IF ( RDINT(NUM) ) THEN
	   CALL EXPAND('*** Degrees field of angle blank/missing')
	   CALL WRITAP(' - angle abandoned')
	   RETURN
	ENDIF
C
C and accumulate our result...
C
	ACCUM = NUMBER * 36000		! in tenths of a second
C
C we now want to deal with the next field - the minutes
C
	CALL SETWIN( ,2 )		! 2 digits
C
	IF ( RDINT(NUM) ) THEN
	   CALL EXPAND('*** Minutes field of angle blank/missing')
	   CALL WRITAP(' - angle abandoned')
	   RETURN
	ENDIF
C
C and accumulate...
C
	ACCUM = ACCUM + NUMBER*600	! in tenths of a second
C
C lastly (for numbers) we have the seconds field
C
	IF (TENTH) THEN
	   CALL SETWIN( ,4 )		! 4 characters
	   LENGTH = LENGTH + 2
	ELSE
	   CALL SETWIN( ,2 )		! 2 characters
	ENDIF
C
	IF ( RDREAL(RNUM) ) THEN
	   CALL EXPAND('*** Seconds field of angle blank/missing')
	   CALL WRITAP(' - angle abandoned')
	   RETURN
	ENDIF
C
C otherwise, accumulate this too
C
	ACCUM = ACCUM + (RNUM*10.0)	! again, tenths of a second
C
	CALL SETWIN( , )		! unset our window constraints
C
C Now check the decode pointer
C
	CALL DCPSAV( DCP2 )
	IF ( (DCP2-DCP1).NE.LENGTH ) THEN
	   CALL TTWSTR('*** Error reading angle - angle abandoned')
	   RETURN
	ENDIF
C
	IF (HEMI) THEN
C
C now we must inspect what hemisphere the angle is in, to decide
C whether it should be positive or negative
	   IF ( RDCH(CHAR) ) THEN
	      CALL EXPAND('*** No hemisphere character found in angle')
	      CALL WRITAP(' (found ''%C'') - angle abandoned',CHAR)
	      RETURN
	   ENDIF
C
C is it a negative type hemisphere, then?
C
	   IF ( CHAR.EQ.NEGS .OR. CHAR.EQ.NEGW 
     &			.AND.CHAR.NE.NEGSLC .AND. CHAR.NE.NEGWLC) THEN
	      ACCUM = -ACCUM		! was negative
	   ELSE IF ( CHAR.NE.POSN .AND. CHAR.NE.POSE 
     &			.AND.CHAR.NE.POSNLC .AND. CHAR.NE.POSELC) THEN
	      CALL EXPAND('*** Unrecognised hemisphere letter in angle')
	      CALL WRITAP(' (letter ''%C'') - angle abandoned',CHAR)
	      RETURN
	   ENDIF
C
	ENDIF
C
C so we have a sensible (?) angle - return it to the user
C
	RESULT = ACCUM
	RDFANG = .FALSE.
C
	RETURN
	END

