C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-08-30 18:00:12.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION SHADES
C
***	MODULE SHADES
***	IDENT  30AU91
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C	Author: 	D R Catlow
C
C	Modifications:
C	Changed for new DTILIB version of SLOPES	MWSR   08-Mar-89
C	For use with the NULL_BORDER qualifier          DRC    08-Sep-88
C	To use LSLLIB                                   DRC    22-Jan-87
C	Modified to send a real value to PUTROW		DRC    May-1987
C       Change X1 ,X2, X3 to INTEGER*4 			MWSR   Jul-1986
C	Allow gradient to be calculated to window edge  MWSR   Jul-1986
C	Image scaled, automatic legend + text display	MWSR   Jan-1986	
C
C
C	Subroutine to work out local gradient at point x,y
C	using a 3 by 3 height matrix.	
C	(Local gradient is a product of the gradient in x and y)
C	Gradient value is then applied to one of 3 reflectance
C	maps to determine display grey-scale value.
C
C--------------------------------------------------------------------------
C
 	IMPLICIT NONE
C
C
***	COMMON/LSL$CMNLSL:TXTC/
***	COMMON/LSL$CMNLSL:EXPC/
***	COMMON/LSL$CMNDTI:DTIHDR/
***	COMMON/HERE:SLPCMN/
***	COMMON/HERE:DISCMN/	
C
C	GKS common block etc.
***	COMMON/HERE:GKS/
***	PARAMETER/HERE:GKSPAR/
C
C----------------------------------------------------------------------
C Functions
	REAL*4		DTI_HGT
	LOGICAL		HADCTRLC
	LOGICAL		PREPARE
C
	REAL		RBRIGHT(MAX_COLUMN)!real greyscale values
	REAL		S,L
	REAL		P,Q		!x and y components
	REAL		PO,QO
	REAL		PHI
	REAL		THETA
	REAL		XGRIDV,YGRIDV	!grid * 8
	REAL		VALUE
	REAL		SUN
	INTEGER*2	COL		!
	REAL*4		X1(3)		! 3 by 3
	REAL*4		X2(3)		! height
	REAL*4		X3(3)		! matrix
	LOGICAL		NULL1(3)	! 3 BY 3
	LOGICAL		NULL2(3)	!  to signal
	LOGICAL		NULL3(3)	! if values null
	INTEGER*4	X_COUNT,Y_COUNT	!counters
	INTEGER*4	J,I,N		!counters
	INTEGER*4	IERR
C
	PARAMETER	PI=3.141592654
C
C***********************************************************************
	SHADES = .TRUE.
C
C Forgotten why we need these fudges...
	SUN=360-SUNPOS
C
	IF(SUN.GE.90)THEN
	  SUN=SUN-90.0
	ELSE
	  SUN=360-(90-SUN)
	ENDIF
C
C Convert to radians
	THETA=(SUNANG*PI)/180.0		
	PHI  =(SUN*PI)/180.0
C
C  Calculate PO and QO
	PO=-COS(PHI)*TAN(THETA)
	QO=-SIN(PHI)*TAN(THETA)
	VALUE=SQRT(1+(PO*PO)+(QO*QO))	!required for ref maps 2 and 3
C
	XGRIDV=X_GRID(DTICHAN)*8.0
	YGRIDV=Y_GRID(DTICHAN)*8.0
	COLMNS=0
C
C-----------------------------------------------------------------------
C set up graphics stuff
	SHADES = PREPARE(2)
	IF (.NOT.SHADES) GOTO 999
C
C **********************************************************************
C
	DO 500 X_COUNT= DTI_WINDOW_SWX(DTICHAN),DTI_WINDOW_NEX(DTICHAN)
C
  	   PIXADD=0
C
C Has CTRL/C been pressed
	   IF (HADCTRLC()) GOTO 999
C
	   DO 400 Y_COUNT= DTI_WINDOW_SWY(DTICHAN)-2,
     &                     DTI_WINDOW_NEY(DTICHAN)-2
C
C Retrieve height values
	      IF(PIXADD.EQ.0)THEN
	         DO 100 I=1,3
	            X1(I)=DTI_HGT(X_COUNT-1,Y_COUNT+I,NULL1(I))
	            X2(I)=DTI_HGT(X_COUNT  ,Y_COUNT+I,NULL2(I))
	            X3(I)=DTI_HGT(X_COUNT+1,Y_COUNT+I,NULL3(I))
100	         CONTINUE
	      ELSE
	         DO 200 I=1,2
	            X1(I)=X1(I+1)
	            X2(I)=X2(I+1)
	            X3(I)=X3(I+1)
	            NULL1(I) = NULL1(I+1)
	            NULL2(I) = NULL2(I+1)
	            NULL3(I) = NULL3(I+1)
200	         CONTINUE
	         X1(3)=DTI_HGT(X_COUNT-1,Y_COUNT+3,NULL1(3))
	         X2(3)=DTI_HGT(X_COUNT  ,Y_COUNT+3,NULL2(3))
	         X3(3)=DTI_HGT(X_COUNT+1,Y_COUNT+3,NULL3(3))
	      ENDIF
C
	      PIXADD=PIXADD+1
C
C***********************************************************************
C Check if we have any null heights
	      DO 210 J=1,3
                 IF (NULL1(J) .OR. NULL2(J) .OR. NULL3(J)) THEN
		    BRIGHT(PIXADD) = 0			!special case	
		    GOTO 400
		 ENDIF
210	      CONTINUE
C
C Calculate x and y components of gradient
C
	      P=(((X3(3)+X3(2)+X3(2)+X3(1))-(X1(3)+X1(2)+X1(2)+X1(1)))/
     &        XGRIDV)*ZSCALE
	      Q=(((X3(3)+X2(3)+X2(3)+X1(3))-(X3(1)+X2(1)+X2(1)+X1(1)))/
     &        YGRIDV)*ZSCALE
C
C Apply the selected hill-shading algoritm to these values.
C
	      IF (REFMAP.EQ.1) THEN
C
C Peuker's Piecewise Linear Approximation 
                 S=((0.4285*(P-Q))-(0.0844*ABS(P+Q)))+0.6599
	         S=S+0.282
	         BRIGHT(PIXADD)=
     &           MAX(1,INT((MAX(1.0,MIN(254.0,(S*130.0))))*0.5))
C
C Reflectance from a Lambertian surface
	      ELSEIF (REFMAP.EQ.2) THEN
	         S=(1.0+(PO*P)+(QO*Q)) /(VALUE*(SQRT(1+(P*P)+(Q*Q))))
	         BRIGHT(PIXADD)=(INT(MAX(1.0,MIN(254.0,(S*150.0)))))/2
	         BRIGHT(PIXADD)=BRIGHT(PIXADD)+7	!fudging!!!!
C
C Wiechel's modified brightness method	  
	      ELSEIF (REFMAP.EQ.3) THEN
	         S=(2*(1.0+(PO*P)+(QO*Q)))/(1+(VALUE*(1+(P*P)+(Q*Q))))
	         BRIGHT(PIXADD)=(INT(MAX(1.0,MIN(254.0,(S*150.0)))))/2
	      ENDIF
C
400	   CONTINUE
C
C***********************************************************************
C
	   COLMNS=COLMNS+1
	   NUMBER_PIXELS=PIXADD
C
C Ouput these grey-scale values
	   IF (GRAPHICS) CALL SHDRAW		!output to screen
C
	   IF (PLOT_DTI) THEN
	      DO 450 I=1,PIXADD
	         RBRIGHT(I)=BRIGHT(I)
450	      CONTINUE
	      CALL PUTROW(RBRIGHT,4)
	   ENDIF
C
500	CONTINUE
C
	IF (PLOT_DTI) CALL CLOSE_FILEOUT
C
999	RETURN
	END
C
