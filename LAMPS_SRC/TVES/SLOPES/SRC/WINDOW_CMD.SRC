	SUBROUTINE WINDOW_CMD(MAP)
C
***	MODULE	WINDOW_CMD
**	IDENT	10MR89
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    02-Jun-1986
C
	IMPLICIT NONE
C
C Deals with the window command in program SLOPES
C Stolen from ROVER				MWSR    02-Mar-1989
C
C MAP is true if window defined from a map
C
C Argument
	LOGICAL		MAP
C 
C parameters
***	PARAMETER/LSL$CMNDTI:DTILIBMSG/
***	PARAMETER/LSL$CMNDTI:DTIPAR/
C
C commons
***	COMMON/LSL$CMNLSL:CMDCOM/
***	COMMON/LSL$CMNDTI:DTIHDR/
***	COMMON/HERE:SLPCMN/
C
C Functions
	LOGICAL		READLL			!Reads lat long
	INTEGER*4	RDCHS			
	LOGICAL		GET_DTI_COORDS
C
C Local variables
	INTEGER*4	X1,X2,Y1,Y2		!temps
	REAL		R1,R2,R3,R4		!temps
	INTEGER*4	CMD			!command number
	INTEGER*4	LLDEGS(4)		!Latlong window values
	BYTE		CH			!next character
	LOGICAL		HAD_SW			!had SW coordinates
	INTEGER*4	OLD_DTI(2,2)	!  old DTI file window
	INTEGER*4	NEW_DTI(2,2)	!  new DTI file window
	INTEGER*4	TEMPX,TEMPY	! temps
C
C-----------------------------------------------------------------------
C
	IF(.NOT.HADDTI)THEN	   !No DTI so command not valid
	  CALL WRITEF('%S Specifying command WINDOW',EBELL)
	   CALL WRITEF
     &	  ('DTI file has not yet been opened')
	  GOTO 1000
	END IF
C
	IF(CMDRCT.NE.4.AND.UNTYPE.NE. UNITS_DEG)THEN
	    IF (CMDRCT .EQ. 0 .AND. MAP) GOTO 300 
	    CALL WRITEF('%S Specifying command WINDOW',EBELL)
	    CALL WRITEF
     &	    ('Command requires 4 coordinate
     & values')
	    GOTO 1000
	ENDIF
	GOTO 410
C
C*********************************************************************
C
300	  IF (GET_DTI_COORDS(R1,R2,'SW corner')) THEN
	    X1 = NINT(R1)
	    Y1 = NINT(R2)	
	    GOTO 310
	  ELSE
	    GOTO 1000
	  ENDIF
C
310	  IF ( GET_DTI_COORDS(R3,R4,'NE corner')) THEN
	    X2 = NINT(R3)
	    Y2 = NINT(R4)
	    GOTO 470
	  ELSE
	    GOTO 1000
	  ENDIF
C
410	GOTO (420,425,435,430,425)UNTYPE
C	
C matrix units
420     X1=NINT(REALAR(1))
        Y1=NINT(REALAR(2))
	X2=NINT(REALAR(3))
	Y2=NINT(REALAR(4))
	GOTO 470
C
C metres or projection
425     CALL DTI_WIN_UNITS_TO_MATRIX(DTICHAN,
     &  		DBLE(REALAR(1)),DBLE(REALAR(2)),
     &                  DBLE(REALAR(3)),DBLE(REALAR(4)),
     &  		UNTYPE,
     &  		0,
     &  		HAD_ABSOLUTE,
     &  		X1,Y1,X2,Y2)
	GOTO 470
C
C LATLONG
430     IF(READLL(LLDEGS,4))THEN
	  CALL WRITEF('%S Specifying command WINDOW',EBELL)
	  CALL WRITEF('Unable to use supplied LAT LONG values')
	  GOTO 1000
	ELSE
	  REALAR(1)=REAL(LLDEGS(1)*10)
	  REALAR(2)=REAL(LLDEGS(2)*10)
	  REALAR(3)=REAL(LLDEGS(3)*10)
	  REALAR(4)=REAL(LLDEGS(4)*10)
	ENDIF
C 	
	GOTO 440		! same as seconds now
C
C SECONDS
435     REALAR(1)=REALAR(1)*10
	REALAR(2)=REALAR(2)*10
	REALAR(3)=REALAR(3)*10
	REALAR(4)=REALAR(4)*10
440	CALL DTI_WIN_UNITS_TO_MATRIX(DTICHAN,
     &  			     DBLE(REALAR(2)),DBLE(REALAR(1)),
     &                               DBLE(REALAR(4)),DBLE(REALAR(3)),
     &  			     UNTYPE,
     &  			     0,
     &  			     .TRUE.,
     &  			     X1,Y1,X2,Y2)
	GOTO 470
C
C	Do the values need truncating?
470	IF(X1.GT.X_EXTENT(DTICHAN).OR.X1.LT.1.OR.
     &	   X2.GT.X_EXTENT(DTICHAN).OR.X2.LT.1.OR.
     &	   Y1.GT.Y_EXTENT(DTICHAN).OR.Y1.LT.1.OR.
     &	   Y2.GT.Y_EXTENT(DTICHAN).OR.Y2.LT.1)THEN
	   CALL WRITEF
     &	   ('%S Specified window exceeds matrix limits',WBELL)
	   CALL WRITEF('Window will be truncated to fit')
	   X1=MAX(1,MIN(X1,X_EXTENT(DTICHAN)))
	   X2=MAX(1,MIN(X2,X_EXTENT(DTICHAN)))
	   Y1=MAX(1,MIN(Y1,Y_EXTENT(DTICHAN)))
	   Y2=MAX(1,MIN(Y2,Y_EXTENT(DTICHAN)))
	ENDIF
C
        IF(X2.LE.X1.OR.Y2.LE.Y1)THEN
	  CALL WRITEF('%S Specifying command WINDOW',EBELL)
          CALL WRITEF
     &    ('NE coordinates should exceed SW coordinates')
	  GOTO 1000
	ENDIF
	DTI_WINDOW_SWX(DTICHAN) = X1
	DTI_WINDOW_SWY(DTICHAN) = Y1
	DTI_WINDOW_NEX(DTICHAN) = X2	
	DTI_WINDOW_NEY(DTICHAN) = Y2
C
	MATSIZ(1)=
     &  (DTI_WINDOW_NEX(DTICHAN)-DTI_WINDOW_SWX(DTICHAN))+1
	MATSIZ(2)=
     &  (DTI_WINDOW_NEY(DTICHAN)-DTI_WINDOW_SWY(DTICHAN))+1
C
C check the window size
	CALL CHKWIN
C
1000	RETURN
	END
