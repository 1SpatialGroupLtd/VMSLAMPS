 	SUBROUTINE RADIAL_PROFILES
C
***	MODULE RADIAL_PROFILES
***	IDENT  03MY88
C
	IMPLICIT NONE
C
C 	Copyright Laser Scan Laboratories Ltd., Cambridge, England
C 	Author  : 	D R Catlow.
C 	Created :	April 1988
C	Modified:
C
C	Function:
C	To generate a series of radial profiles around the transmitter
C	position.
C	The profiles are generated with a constant angular separation
C	specified using the PROFILE_INTERVAL command.
C	The arguments to SECTOR determine the length of the profiles
C	and a sector of interest.
C	For each profile the subroutine SINGLE_PROFILE is called to
C	calculate the profile coordinate values.
C
C-----------------------------------------------------------------------
C
***	COMMON/LSL$CMNDTI:DTIHDR/	!DTI header information
C
***	COMMON/HERE:PROFILE/		!PROFILE parameters
***	COMMON/HERE:PROFILE_IFF/	!PROFILE IFF related variables
***	COMMON/HERE:PROQIO/		!contains CRT
C
C	local variables
	REAL		SECTOR_WIDTH	!angular separation between
C					!2 sector radii
	REAL		XPOS		!x coord of end of profile
	REAL		YPOS		!y coord of end of profile
	REAL		DIFFX		!diff. in x between st and end
	REAL		DIFFY           !diff. in y between st and end
	REAL		RADIAL_DISTANCE	!radial distance
	INTEGER*4	NUMBER_PROFILES	!number of profiles to generate
	INTEGER*4	I		!loop counter
	REAL		PCENT		!for percentage complete
	REAL		PCF		!diagnostics messages.
	LOGICAL		CLIPPED		!.T. if the profile has been
C					!clipped against the rect.
C					!area of interest
C
	REAL		PI
	PARAMETER	(PI=3.141592654) !for degrees to radian 
C
C	functions
	LOGICAL		HADCTRLC	!test if we've had CTLR C
C
C-----------------------------------------------------------------------
C
C	Calculate the number of profiles we need to generate, and the
C	bearing of the initial profile.
C
C	If a sector has been defined then use sector distance
C	and bearing values.
	IF(HAD_SECTOR)THEN
	  SECTOR_WIDTH=SECTOR_ANGLE(2)-SECTOR_ANGLE(1)
	  IF(SECTOR_WIDTH.LT.0.0)SECTOR_WIDTH=SECTOR_WIDTH+360.0
	  NUMBER_PROFILES=INT(SECTOR_WIDTH/PROFILE_INTERVAL)+1
	  PROFILE_BEARING=SECTOR_ANGLE(1)-PROFILE_INTERVAL
	  RADIAL_DISTANCE=SECTOR_DISTANCE
C	Otherwise do a 360 degrees sweep aroung the transmitter...
	ELSE
	  NUMBER_PROFILES=INT(360.0/PROFILE_INTERVAL)+1
	  PROFILE_BEARING=0.0-PROFILE_INTERVAL
C	... and set the radial distance to a large value.  
C	The profiles will subsequently be clipped against 
C	the DTM rectangle
	  RADIAL_DISTANCE=9999999.0
	ENDIF
C
C	If diagnostics are enabled, then tell the user what we about
C	to do.
	IF(DIAG)THEN
          CALL FRAMED_MES
	  IF(CRT)THEN
	    PCF = 100.0/NUMBER_PROFILES
	    PCENT = 0
	    WRITE(*,'(1X,F6.2,''%'')')PCENT
	  ENDIF
	ENDIF
C
	DO 500 I=1,NUMBER_PROFILES
C
C 	Test if CTRL/C been pressed
           IF (HADCTRLC()) GOTO 900
C
C	Increment the profile bearing value
	   PROFILE_BEARING=PROFILE_BEARING+PROFILE_INTERVAL
	   IF(PROFILE_BEARING.GE.360)
     &        PROFILE_BEARING=PROFILE_BEARING-360.0
C
C	Convert bearing to radians
	   BEARING_RADIANS=PROFILE_BEARING/180.0*PI

C	Calculate the end point of the profile
	   XPOS = X_POSITION+(RADIAL_DISTANCE*SIN(BEARING_RADIANS))
	   YPOS = Y_POSITION+(RADIAL_DISTANCE*COS(BEARING_RADIANS))
C
C	Intersect the profile with the rectangular area of interest
C	This is done against each edge of the rectangle in turn.
C
	   CLIPPED=.FALSE.		!profile not clipped yet
C
C	Lefthand edge
	   IF(XPOS.LT.SWX_METRES(4))THEN
	     YPOS=(Y_POSITION+(YPOS-Y_POSITION)*
     &       (SWX_METRES(4)-X_POSITION)/(XPOS-X_POSITION))
	     XPOS=SWX_METRES(4)
	     CLIPPED=.TRUE.
	   ENDIF
C
C	Top edge
	   IF(YPOS.GT.NEY_METRES(4))THEN
	     XPOS=(X_POSITION+(XPOS-X_POSITION)* 
     &       (NEY_METRES(4)-Y_POSITION)/(YPOS-Y_POSITION))
	     YPOS=NEY_METRES(4)
	     CLIPPED=.TRUE.
	   ENDIF
C
C	Righthand edge
	   IF(XPOS.GT.NEX_METRES(4))THEN
	     YPOS=(Y_POSITION+(YPOS-Y_POSITION)*
     &       (NEX_METRES(4)-X_POSITION)/(XPOS-X_POSITION))
	     XPOS=NEX_METRES(4)
	     CLIPPED=.TRUE.
	   ENDIF
C
C	Bottom edge
	   IF(YPOS.LT.SWY_METRES(4))THEN
	     XPOS=(X_POSITION+(XPOS-X_POSITION)* 
     &       (SWY_METRES(4)-Y_POSITION)/(YPOS-Y_POSITION))
	     YPOS=SWY_METRES(4)
	     CLIPPED=.TRUE.
	   ENDIF
C
C	Test if the point is exactly on the transmitter.
C	This is done after clipping to the rectangle since the
C	transmitter may be located on a rectangle corner.
	   IF(XPOS.EQ.X_POSITION.AND.YPOS.EQ.Y_POSITION)GOTO 500
C
C	If the profile has been clipped to the rectangle,
C	calculate the new length of the profile.
	   IF(CLIPPED)THEN
	     DIFFX=XPOS-X_POSITION
	     DIFFY=YPOS-Y_POSITION
	     PROFILE_DISTANCE=SQRT((DIFFX*DIFFX)+(DIFFY*DIFFY))
	   ELSE
	     PROFILE_DISTANCE=RADIAL_DISTANCE
	   ENDIF
C	
C	Call routine SINGLE_PROFILE to calculate the profile 
C	coordinate values.
	   CALL SINGLE_PROFILE(XPOS,YPOS)
C
C   	If diagnostics are enabled show progress
	   IF(DIAG.AND.CRT)THEN
	     PCENT = I*PCF
	     WRITE(*,'(1H+,F6.2)')PCENT
	   ENDIF
C
500	CONTINUE
C
C	If diagnostics output 100% complete, and then
C	overwrite the % message
	IF(DIAG.AND.CRT)THEN
	  PCENT = 100
	  WRITE(*,'(1H+,F6.2)')PCENT
	  WRITE(*,'(1H+,''       '')')
	ENDIF
C
C	If diagnostics inform the user how many profiles have been
C	written to the output IFF file
900	IF(DIAG)THEN
	  CALL WRITEF('Total of %N profiles written to IFF file',
     &    TOTAL_FEATURES)
	ENDIF
C
C-----------------------------------------------------------------------
C
	RETURN
C
	END
