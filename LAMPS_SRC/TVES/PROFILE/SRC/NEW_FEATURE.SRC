C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-05-09 16:36:34.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE NEW_FEATURE(WRITE_AC)
C
***	MODULE NEW_FEATURE
***	IDENT  25AP88
C
	IMPLICIT NONE
C
C 	Copyright Laser Scan Laboratories Ltd., Cambridge, England
C 	Author  : 	D R Catlow.
C 	Created :	April 1988
C	Modified:
C
C	Function:
C	To generate a new feature in the IFF file.
C	The FS is written, along with 2 ACs holding the
C	bearing of the profile, and the length of the profile
C
C-----------------------------------------------------------------------
***	COMMON/LSL$CMNIFF:CB.STR/	!required because PROFILE_CB is
C					!included
C
***	COMMON/HERE:PROFILE/
***	COMMON/HERE:PROFILE_IFF/
***	COMMON/HERE:PROFILE_CB/
C
C	Argument
	LOGICAL		WRITE_AC	!if .T. write AC values
C
C-----------------------------------------------------------------------
C	Locals
	INTEGER*2	ISQ		!internal sequence number
	INTEGER*2	ISTAT(4)	!FS values
C
	INTEGER*2	AC_NUMBER	!AC identification number
C
	INTEGER*4	AC_VALUE	!AC value written with IFFAC	
	REAL		AC_REAL		!Real AC value
	EQUIVALENCE	(AC_VALUE,AC_REAL)
C----------------------------------------------------------------------	
C
C	Increment feature counter
	NF_NUMBER=NF_NUMBER+1
C
C	Note FSN is equivalenced on to NF_NUMBER in common.
C	NF_NUMBER is a longword, while FSN is an INTEGER*2 which
C	is treated as unsigned.
C
C	Check that we don't exceed the allowable range, and start
C	from 1 again if necessary.
	IF(NF_NUMBER.GT.65535)NF_NUMBER=1
	ISQ=0
	CALL IFFNF(FSN,ISQ)
C
C-----------------------------------------------------------------------
C	Write the FS entry
	ISTAT(1)=FC_VALUE
	ISTAT(2)=0
	ISTAT(3)=0
	ISTAT(4)=0
	CALL IFFFS(ISTAT)
C
C-----------------------------------------------------------------------
	IF(WRITE_AC)THEN
C	Write an AC holding the length of the profile
	  AC_NUMBER=LENGTH_AC
	  AC_REAL=PROFILE_DISTANCE
	  CALL IFFAC(AC_NUMBER,AC_VALUE)
C
C-----------------------------------------------------------------------
C	Write an AC holding the bearing of the profile in degrees
	  AC_NUMBER=BEARING_AC
	  AC_REAL=PROFILE_BEARING
	  CALL IFFAC(AC_NUMBER,AC_VALUE)
	ENDIF
C
C-----------------------------------------------------------------------
C	Set flag to say that the next CB we write, is the first
C	CB for this feature. (This ensures pen up move to start of
C	feature).
	FIRST_CB=.TRUE.
C
C-----------------------------------------------------------------------
	RETURN
C
	END
