	SUBROUTINE SINGLE_PROFILE(XPOS,YPOS)
C
***	MODULE SINGLE_PROFILE
***	IDENT  07MY92
C
	IMPLICIT NONE
C
C 	Copyright Laser-Scan Ltd., Cambridge, England
C
C 	Author  : 	D R Catlow.
C 	Created :	April 1988
C
CMOD1111Modified: JB	7 May 1992
C			Use POINT_VALUE (not ADD_POINT) at first profile
C			point to get correct profile value there
C
C	Function:
C	To generate a single profile constructed between the 
C	the transmitter and the point XPOS,YPOS.
C	The routine is called from GENERATE_PROFILES,
C	RADIAL_PROFILES and POINT_PROFILE.
C	NB. The bearing and the length of the profile have
C	already been calculated.
C	The coordinates of the sample points on the profile
C	are written to an IFF CB entry along with a height attribute
C	and an attribute indicating the nature of clutter at the
C	sample point using the routines NEW_FEATURE,ADD_POINT and
C	END_FEATURE
C	Interpolation of the height at a sample point is performed
C	by the function SAMPLE.
C	Derivation of a clutter height value and clutter index from
C	secondary grid files, is performed using GET_CLUTTER.
C	Variable sampling rates are taken into account.
C
C-----------------------------------------------------------------------
C
***	COMMON/PROFILE/
***	COMMON/PROFILE_IFF/
C
C	Arguments:
	REAL		XPOS		!x coordinate of end of profile
	REAL		YPOS		!y coordinate of end of profile
C
C	Locals:
	REAL		DISTANCE	!distance to the outer edge of
C					!a band or to end of profile
	REAL		TOTAL_DISTANCE	!total dist. along prof. so far
	REAL		SAMPLE_DIST	!distance between sample points
	REAL		XINC		!x increment to next sample pt
	REAL		YINC		!y increment to next sample pt
	REAL		X_SAMPLE	!x coordinate of sample pt
	REAL		Y_SAMPLE	!y coordinate of sample pt
C
	INTEGER*4	I		!loop counter
C
	INTEGER*4	BAND_NUMBER	!current band number
	INTEGER*4	TOP_BAND	!number of first undefined band
C
C-----------------------------------------------------------------------
C	Generate a new feature in the IFF file
C
	CALL NEW_FEATURE(.TRUE.)
C
C	Set up initial values
C
	TOTAL_DISTANCE=0
	BAND_NUMBER=1
	X_SAMPLE=X_POSITION
	Y_SAMPLE=Y_POSITION
C
C	Transfer transmitter coordinate and attribute values
C
	CALL POINT_VALUE(X_SAMPLE,Y_SAMPLE)
C
C	If we haven't had any bands defined, then treat as
C	though there is just a single band with a width equal to
C	the length of the profile
C
	IF (.NOT.HAD_BAND) THEN
	  BAND_SAMPLE(1) = SAMPLE_INTERVAL
	  BAND_DISTANCE(1) = PROFILE_DISTANCE
	  TOP_BAND=2
	ELSE
	  TOP_BAND = NEXT_UNDEFINED_BAND
	ENDIF
C
C	Test if we have anymore bands.
C
100	IF (BAND_NUMBER.EQ.TOP_BAND) GOTO 300
C
	SAMPLE_DIST = BAND_SAMPLE(BAND_NUMBER)	  	  
	DISTANCE = MIN(BAND_DISTANCE(BAND_NUMBER),PROFILE_DISTANCE)
C	
C	Test total distance against distance
C
	IF (TOTAL_DISTANCE.GE.DISTANCE) GOTO 300
C
	XINC=SAMPLE_DIST*SIN(BEARING_RADIANS)
	YINC=SAMPLE_DIST*COS(BEARING_RADIANS)
C
C	Make the loop counter suitably large, since a exact
C	value cannot be easily determined because of allowance
C	for variable sample intervals.  We fall out of the loop
C	when TOTAL_DISTANCE is greater than the band distance.
C
	DO 200 I=1,99999
C
C	Increment total distance along the profile
	   TOTAL_DISTANCE = TOTAL_DISTANCE+SAMPLE_DIST
C
	   IF (TOTAL_DISTANCE.GE.DISTANCE) THEN
	     X_SAMPLE=X_POSITION+(DISTANCE*SIN(BEARING_RADIANS))
	     Y_SAMPLE=Y_POSITION+(DISTANCE*COS(BEARING_RADIANS))
	     TOTAL_DISTANCE=DISTANCE
	     BAND_NUMBER=BAND_NUMBER+1
	     CALL POINT_VALUE(X_SAMPLE,Y_SAMPLE)
	     GOTO 100
	   ELSE
	     X_SAMPLE=X_SAMPLE+XINC
	     Y_SAMPLE=Y_SAMPLE+YINC
	     CALL POINT_VALUE(X_SAMPLE,Y_SAMPLE)
	   ENDIF
C
200	CONTINUE
C
C	End the feature (and flush the data buffer if necessary)
300	CALL END_FEATURE
C
C----------------------------------------------------------------------	
C
999	RETURN
	END
C
