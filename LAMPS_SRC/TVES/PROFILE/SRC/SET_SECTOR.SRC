	SUBROUTINE SET_SECTOR(FROM_TABLE)
C
***	MODULE SET_SECTOR
***	IDENT  30AP88
C
	IMPLICIT NONE
C
C 	Copyright Laser Scan Laboratories Ltd., Cambridge, England
C 	Author  : 	D R Catlow.
C 	Created :	April 1988
C	Modified:
C
C	Function:
C	To extract details of the sector area of interest either
C	from the command line, and via input from a digitising
C	table.
C
C-----------------------------------------------------------------------
C 	LSLLIB common
***	COMMON/LSL$CMNLSL:CMDCOM/
C
***	COMMON/LSL$CMNDTI:DTIHDR/
C
***	COMMON/HERE:PROFILE/
***	COMMON/HERE:PROQIO/
***	COMMON/HERE:TAB/
C
C	Arguments
	LOGICAL		FROM_TABLE	!command given from table puck
C
C	Local
	REAL		X1,Y1		!table coordinates in DTM space
	REAL		DIFFX		!for calculating sector radius
	REAL		DIFFY		!for calculating sector radius
C
C	Functions
	LOGICAL		RDREAL		!to read a real value
	LOGICAL		WAIT_INPUT	!to wait for input
	LOGICAL		READ_PUCK	!to read a puck button and
C					!table coordinate value
C-----------------------------------------------------------------------
C
	IF(.NOT.FROM_TABLE)THEN
C	Check for 1 or 3 arguments
	  IF(CMDACT.NE.1.AND.CMDACT.NE.3)THEN
	    CALL WRITEF('%S Specifying command SECTOR',ERROR_BELL)
	    CALL WRITEF('Command requires either 1 or 3 real arguments')
	    GOTO 999
 	  ENDIF
C
C-----------------------------------------------------------------------
C	Deal with the first argument which is the distance of the
C	sector arc from the sector origin (ie. sector radius)
	  IF(REALAR(1).LE.0)THEN
	    CALL WRITEF('%S Specifying command SECTOR',ERROR_BELL)
	    CALL WRITEF
     &    ('Sector distance must be specified as a positive real value')
	    GOTO 999
	  ENDIF
C
C	Transfer distance value to common variable
	  SECTOR_DISTANCE=REALAR(1)
C
C-----------------------------------------------------------------------
C	Are the sector angle arguments present?
C	If not, fill angles with 0 and 360 bearing values
	  IF(CMDACT.EQ.1)THEN			
	    SECTOR_ANGLE(1)=0.0
	    SECTOR_ANGLE(2)=360.00
	    HAD_SECTOR=.TRUE.
	    GOTO 999
	  ENDIF
C
C-----------------------------------------------------------------------
C	Read sector angle arguments, and transfer to common variables
C	if valid
	  IF(REALAR(2).LT.0.OR.REALAR(2).GT.360.0.OR.
     &       REALAR(3).LT.0.OR.REALAR(3).GT.360.0)THEN
	    CALL WRITEF('%S Specifying command SECTOR',ERROR_BELL)
	    CALL WRITEF
     &      ('Sector angle values must be in the range 0 to 360')
	    GOTO 999
	  ENDIF
C
	  SECTOR_ANGLE(1)=REALAR(2)
	  SECTOR_ANGLE(2)=REALAR(3)
	  HAD_SECTOR=.TRUE.
C
	  GOTO 999
	ENDIF
C-----------------------------------------------------------------------
C	Sector defined from the table
	IF(FROM_TABLE)THEN
C	First caluclate the distance of the sector radius
C	Convert from table coordinate to a DTM metre offset value
	  X1=TAB_DTI(1,1)*X_TAB+TAB_DTI(1,2)*Y_TAB+TAB_DTI(1,3)
	  Y1=TAB_DTI(2,1)*X_TAB+TAB_DTI(2,2)*Y_TAB+TAB_DTI(2,3)
	  X1=(X1-1)*X_GRID(4)
	  Y1=(Y1-1)*Y_GRID(4)
C
C	Calculate the distance of the point to the base station	  
	  DIFFX=X1-X_POSITION
	  DIFFY=Y1-Y_POSITION
	  SECTOR_DISTANCE=SQRT((DIFFX*DIFFX)+(DIFFY*DIFFY))
C	
	  CALL WRITEF('Sector radius is %F10.2 metres',SECTOR_DISTANCE)
C
C-----------------------------------------------------------------------
C	Prompt for the first bearing value
C	This can be defined via the keyboard or using the puck button	
C	Note that if CTRL/Z is pressed at this stage, then we assume
C	input of sector bearings is not required, set them to
C	their defaults, and return with HAD_SECTOR equals true.
400	  IF(.NOT.WAIT_INPUT('First  sector bearing',.TRUE.,.TRUE.))THEN
	    SECTOR_ANGLE(1)=0
	    SECTOR_ANGLE(2)=360.0
	    HAD_SECTOR=.TRUE.
	    GOTO 999
	  ENDIF
C
C	Input from the terminal
	  IF(HAD_VDU)THEN
C	Read the angle value
	    IF(RDREAL(REALAR(1)))GOTO 400	!reprompt	  
C
C	Check that it's valid
	    IF(REALAR(1).LT.0.OR.REALAR(1).GT.360.0)THEN
	      CALL WRITEF('%S Specifying command SECTOR',ERROR_BELL)
	      CALL WRITEF
     &        ('Sector angle value must be in the range 0 to 360')
	      GOTO 400				!reprompt
	    ENDIF
C	Transfer to common variable
	    SECTOR_ANGLE(1)=REALAR(1)
C
C	Input from the table
	  ELSE
	    IF(READ_PUCK(BUTTON,X_TAB,Y_TAB,ERROR))THEN
	      CALL SHOW_ERROR(ERROR)
	      GOTO 999
	    ENDIF
C	If button 15 is pressed at this stage, then we assume
C	input of sector bearings is not required, set them to
C	their defaults, and return with HAD_SECTOR equals true.
	    IF(BUTTON.EQ.15)THEN
	      SECTOR_ANGLE(1)=0
	      SECTOR_ANGLE(2)=360.0
	      HAD_SECTOR=.TRUE.
	      GOTO 999
	    ENDIF
C
C	Convert from table coordinate to a DTM metre offset value
	    X1=TAB_DTI(1,1)*X_TAB+TAB_DTI(1,2)*Y_TAB+TAB_DTI(1,3)
	    Y1=TAB_DTI(2,1)*X_TAB+TAB_DTI(2,2)*Y_TAB+TAB_DTI(2,3)
	    X1=(X1-1)*X_GRID(4)
	    Y1=(Y1-1)*Y_GRID(4)
C
C	Calculate the angle of the first bearing in degrees
	    DIFFX=X1-X_POSITION
	    DIFFY=Y1-Y_POSITION
	    IF(DIFFX.EQ.0.OR.DIFFY.EQ.0)THEN
	      CALL WRITEF
     &        ('%S Specifying first sector bearing',ERROR_BELL)
	      CALL WRITEF
     &        ('Digitised point must not be at base station position')
	      GOTO 400			!Reprompt
	    ENDIF
C
	    SECTOR_ANGLE(1)=ATAN2D(DIFFX,DIFFY)
	    IF(SECTOR_ANGLE(1).LT.0.0)
     &         SECTOR_ANGLE(1)=SECTOR_ANGLE(1)+360.0
C
	    TTOBEL = .TRUE.
	    CALL WRITEF('%F6.2 degrees',SECTOR_ANGLE(1))
	    TTOBEL =.FALSE.
	  ENDIF
C
C-----------------------------------------------------------------------
C	Prompt for second sector bearing
C	This can be from the terminal or via the table puck.
C	Note that if CTRL/Z is pressed at this stage, sector definition
C	is aborted and we exit with HAD_SECTOR = .FALSE.
C
500	  IF(.NOT.WAIT_INPUT('Second sector bearing',.TRUE.,.TRUE.))THEN
	    HAD_SECTOR=.FALSE.
	    GOTO 999
	  ENDIF
C
C	Input from the terminal
	  IF(HAD_VDU)THEN
C	Read the angle value
	    IF(RDREAL(REALAR(1)))GOTO 500	!reprompt	  
C
C	Check that it's valid
	    IF(REALAR(1).LT.0.OR.REALAR(1).GT.360.0)THEN
	      CALL WRITEF('%S Specifying command SECTOR',ERROR_BELL)
	      CALL WRITEF
     &        ('Sector angle value must be in the range 0 to 360')
	      GOTO 500				!reprompt
	    ENDIF
C
C	Transfer to common variable
	    SECTOR_ANGLE(2)=REALAR(1)
	    HAD_SECTOR=.TRUE.
	    GOTO 999
C
C	Input from the table
	  ELSE
	    IF(READ_PUCK(BUTTON,X_TAB,Y_TAB,ERROR))THEN
	      CALL SHOW_ERROR(ERROR)
	      GOTO 999
	    ENDIF
C	If button 15 is pressed at this stage, then we abandon
C	sector definition, and return with HAD_SECTOR = false.
	    IF(BUTTON.EQ.15)THEN
	      HAD_SECTOR=.FALSE.
	      GOTO 999
	    ENDIF
C	Convert from table coordinate to a DTM metre offset value
	    X1=TAB_DTI(1,1)*X_TAB+TAB_DTI(1,2)*Y_TAB+TAB_DTI(1,3)
	    Y1=TAB_DTI(2,1)*X_TAB+TAB_DTI(2,2)*Y_TAB+TAB_DTI(2,3)
	    X1=(X1-1)*X_GRID(4)
	    Y1=(Y1-1)*Y_GRID(4)
C
C	Calculate the angle of the first bearing in degrees
	    DIFFX=X1-X_POSITION
	    DIFFY=Y1-Y_POSITION
	    IF(DIFFX.EQ.0.OR.DIFFY.EQ.0)THEN
	      CALL WRITEF
     &        ('%S Specifying first sector bearing',ERROR_BELL)
	      CALL WRITEF
     &        ('Digitised point must not be at base station position')
	      GOTO 500			!Reprompt
	    ENDIF
C
	    SECTOR_ANGLE(2)=ATAN2D(DIFFX,DIFFY)
	    IF(SECTOR_ANGLE(2).LT.0.0)
     &         SECTOR_ANGLE(2)=SECTOR_ANGLE(2)+360.0
	    HAD_SECTOR=.TRUE.
	    TTOBEL = .TRUE.
	    CALL WRITEF('%F6.2 degrees',SECTOR_ANGLE(2))
	    TTOBEL =.FALSE.
	  ENDIF
	ENDIF	
C
C-----------------------------------------------------------------------
999	RETURN
C
	END
