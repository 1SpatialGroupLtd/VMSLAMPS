C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-11-29 15:12:08.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE POINT_PROFILE(FROM_TABLE)
C
***	MODULE POINT_PROFILE
***	IDENT  29NO88
C
	IMPLICIT NONE
C
C 	Copyright Laser Scan Laboratories Ltd., Cambridge, England
C 	Author  : 	D R Catlow.
C 	Created :	April 1988
C	Modified:
C	Amend for ABSOLUTE coords. and PROJECTION units.  FJB 29-Nov-1988 
C
C	Function:
C	To determine the end point of a single profile.  The point
C	is defined using the POINT command.  The coordinates of the
C	point are read from the command line in the required units,
C	or may be entered from a digitising table.
C
C-----------------------------------------------------------------------
C
C	Argument
	LOGICAL		FROM_TABLE	!command given from table puck
C
C 	DTILIB common
***	COMMON/LSL$CMNDTI:DTIHDR/
***	COMMON/LSL$CMNDTI:DTIPROJ/
C
C 	LSLLIB common
***	COMMON/LSL$CMNLSL:CMDCOM/
C
C	PROFILE common
***	COMMON/HERE:PROFILE/
***	COMMON/HERE:PROFILE_IFF/
***	COMMON/HERE:PROQIO/
***	COMMON/HERE:TAB/
C
C	Local
	REAL		XPOS,YPOS	! position of point as
C					! metre offsets from origin
C					! of DTM.
	REAL		DIFFX		!diff. in x between st and end
	REAL		DIFFY           !diff. in y between st and end
	INTEGER*4	LLDEGS(2)	! values in seconds
C
	REAL*4		PI		!for rads to degrees conversion
	PARAMETER	(PI=3.141592654)
C	Functions
	LOGICAL		READLL		! reads lat/long
	LOGICAL		CREATE_IFF_FILE	! to open the output IFF file
C	
C-----------------------------------------------------------------------
C
	IF(.NOT.FROM_TABLE)THEN
C	Check for the right number of arguments
	  IF(CMDACT.NE.2.AND.UNITS.NE.4)THEN
	    CALL WRITEF('%S Specifying command POINT',ERROR_BELL)
	    CALL WRITEF('Command requires 2 x y coordinate values')
	    GOTO 999
	  ENDIF
C
C	Branch according to the current units of measuremnt
	  GOTO (100,200,300,400,450)UNITS
C
C-----------------------------------------------------------------------
C	Matrix units
C	Translate into metre offset values
100	  XPOS=(REALAR(1)-1)*X_GRID(4)
	  YPOS=(REALAR(2)-1)*Y_GRID(4)
	  GOTO 500
C
C-----------------------------------------------------------------------
C	Metre units
C	No conversion required, but remember to remove offset
200	  IF(HAD_ABSOLUTE)THEN  
	     XPOS=REALAR(1)-X_OFFSET(4)
	     YPOS=REALAR(2)-Y_OFFSET(4)
	  ELSE 
	     XPOS=REALAR(1)
	     YPOS=REALAR(2)
	  ENDIF
	  GOTO 500
C
C-----------------------------------------------------------------------
C	Seconds units
C	Convert from seconds to .1 seconds
300       XPOS=REALAR(2)*10.0			!longitude
	  YPOS=REALAR(1)*10.0			!latitude
C
C	Convert from .1 seconds to real matrix values
	  XPOS=(XPOS-LONREC(1,4))/LONINT(4)
	  YPOS=(YPOS-LATREC(1,4))/LATINT(4)
C
C	Convert to metre offset values
	  XPOS=(XPOS-1)*X_GRID(4)
	  YPOS=(YPOS-1)*Y_GRID(4)
	  GOTO 500
C
C-----------------------------------------------------------------------
C	Latlong units
400       IF(.NOT.READLL(LLDEGS,2))THEN
	    CALL WRITEF('%S Specifying command POINT',ERROR_BELL)
	    CALL WRITEF
     &      ('Latitude and longitude values supplied in wrong format')
	    GOTO 999
	  ENDIF
C
C	Convert from .1 seconds to real matrix values
	  XPOS=(LLDEGS(2)-LONREC(1,4))/LONINT(4)	!longitude
	  YPOS=(LLDEGS(1)-LATREC(1,4))/LATINT(4)	!latitude
C
C	Convert to metre offset values
	  XPOS=(XPOS-1)*X_GRID(4)
	  YPOS=(YPOS-1)*Y_GRID(4)
	  GOTO 500
C
C-----------------------------------------------------------------------
C	Projection units
C	No conversion required but remember to subtract offset
450	  IF(HAD_ABSOLUTE)THEN  
	     XPOS=REALAR(1)-DTIPROJ_ORIGIN(1,4)
	     YPOS=REALAR(2)-DTIPROJ_ORIGIN(2,4)
	  ELSE 
	     XPOS=REALAR(1)
	     YPOS=REALAR(2)
	  ENDIF
	  GOTO 500
	ENDIF
C
C-----------------------------------------------------------------------
C	Command from table.
	IF(FROM_TABLE)THEN
C	Convert from table coordinate to a DTM metre offset value
	  XPOS=TAB_DTI(1,1)*X_TAB+TAB_DTI(1,2)*Y_TAB+TAB_DTI(1,3)
	  YPOS=TAB_DTI(2,1)*X_TAB+TAB_DTI(2,2)*Y_TAB+TAB_DTI(2,3)
	  XPOS=(XPOS-1)*X_GRID(4)
	  YPOS=(YPOS-1)*Y_GRID(4)
C
C	Echo the coordinates on the terminal
	  TTOBEL=.TRUE.
	  IF(UNITS.EQ.1)THEN
	    CALL WRITEF('%F %F',(XPOS/X_GRID(4))+1,(YPOS/Y_GRID(4))+1)
	  ELSE
            CALL WRITEF('%F %F',XPOS+X_OFFSET(4),YPOS+Y_OFFSET(4))
	  ENDIF
	  TTOBEL=.FALSE.
	ENDIF
C
C-----------------------------------------------------------------------
C	Check that profile origin is within the DTM 
500	IF(XPOS.LT.0.OR.XPOS.GT.(X_EXTENT(4)-1)*X_GRID(4).OR.
     &     YPOS.LT.0.OR.YPOS.GT.(Y_EXTENT(4)-1)*Y_GRID(4))THEN
	  CALL WRITEF('%S Specifying command POINT',ERROR_BELL)
	  CALL WRITEF('Profile end point is outside DTM bounds')
	  GOTO 999
	ENDIF	   
C
C----------------------------------------------------------------------
C	Note that no check is made if we are in the current area of
C	interest. To do so would seem rather petty.
C	Note we don't check against a sector of interest either, 
C	however we do test to see if the point is exactly on the
C	base station position.
	IF(XPOS.EQ.X_POSITION.AND.YPOS.EQ.Y_POSITION)THEN
	  CALL WRITEF('%S Specifying command POINT',ERROR_BELL)
	  CALL WRITEF
     &    ('Profile end point lies exactly on profile origin')
	  GOTO 999
	ENDIF
C
C	Create the output IFF file
C	Error messages etc. are generated by the function
C	If it fails its probably due to an invalid file specification,
C	therefore on error its better to stay in the program,
C	and allow the user to redefine the file name.
	IF(.NOT.OPEN_IFF)THEN
	  IF(.NOT.CREATE_IFF_FILE())GOTO 999
	ENDIF
C
C	If one or more bands have been defined, test if they extend
C	to outer limit of sector or area of interest, and extend if
C	necessary
	IF(HAD_BAND)CALL EXTEND_BAND
C
C	Calculate the distance of the profile from end to end
	DIFFX=XPOS-X_POSITION
	DIFFY=YPOS-Y_POSITION
	PROFILE_DISTANCE=SQRT((DIFFX*DIFFX)+(DIFFY*DIFFY))
C
C	Calculate bearing of profile. ie. position of profile end
C	point with respect to profile start point.
C	Intrinsic function ATAN2 is used to get the bearing in
C	radians.  This is used with the SIN and COS functions in
C	SINGLE_PROFILE.
C	The bearing in degrees is also calculated since this is
C       how it is written to the IFF file.
	BEARING_RADIANS=ATAN2(DIFFX,DIFFY)
	PROFILE_BEARING=BEARING_RADIANS*180.0/PI
	IF(PROFILE_BEARING.LT.0.0)PROFILE_BEARING=PROFILE_BEARING+360.0
C
C	Calculate profile beteen this point and the profile origin
	CALL SINGLE_PROFILE(XPOS,YPOS)
C
C-----------------------------------------------------------------------
999	RETURN
C
	END
