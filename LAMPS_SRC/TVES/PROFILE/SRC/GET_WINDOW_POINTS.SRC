	LOGICAL FUNCTION GET_WINDOW_POINTS (PROMPT)
C
***	IDENT	18JA89
***	MODULE	GET_WINDOW_POINTS
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C	Author    : D R Catlow
C	Created   : April 1988
C	Modified  :
C	Deal with absolute and projection argument units. FJB	29-Nov-1988
C	
C	Function  :
C	To get the SW and NE window coordinate values.  The values
C	are read from the command line, specified in the current
C	units, or are read from the digitising table.
C	If prompt is true, the user is prompted in turn for the
C	SW corner and NE corner values.
C	
C-----------------------------------------------------------------------
C
	IMPLICIT NONE
C	
C 	DTILIB common
***	COMMON/LSL$CMNDTI:DTIHDR/
***	COMMON/LSL$CMNDTI:DTIPROJ/
C
C 	LSLLIB common
***	COMMON/LSL$CMNLSL:CMDCOM/
C
C	PROFILE common
***	COMMON/HERE:PROFILE/
***	COMMON/HERE:PROFILE_IFF/
***	COMMON/HERE:PROQIO/
***	COMMON/HERE:TAB/
C
C	Argument
	LOGICAL		PROMPT		! if true prompt for a SW
C					! and NE corner
C
C	Local
	INTEGER*4	X1,Y1,X2,Y2	! window coordinate values
	INTEGER*4	LLDEGS(4)	! values in seconds
C
C	Functions
	LOGICAL		READLL		! reads lat/long
	LOGICAL		RDREAL		! read real value
	LOGICAL		WAIT_INPUT	! to wait for input
	LOGICAL		READ_PUCK	! read puck data
C
C-----------------------------------------------------------------------
C
	GET_WINDOW_POINTS = .FALSE.
C
C	Deal with WINDOW command from terminal
C	
C	If no arguments are supplied, prompt for values.
	IF(CMDACT.EQ.0)PROMPT=.TRUE.
C	  	
C-----------------------------------------------------------------------
C	Deal with command line values
	IF(.NOT.PROMPT)THEN
	  IF(CMDACT.NE.4.AND.UNITS.NE.4)THEN
	    CALL WRITEF('%S Specifying command WINDOW',ERROR_BELL)
	    CALL WRITEF('Command requires 4 arguments')
	    GOTO 999
	  ENDIF
C
C
C-----------------------------------------------------------------------
C	Matrix units
	  IF     (UNITS.EQ.1)THEN
	    X1=NINT(REALAR(1))
	    Y1=NINT(REALAR(2))
	    X2=NINT(REALAR(3))
	    Y2=NINT(REALAR(4))
C
C-----------------------------------------------------------------------
C	Metre units translated into nearest DTM node
	  ELSE IF(UNITS.EQ.2)THEN
	    IF(HAD_ABSOLUTE)THEN
	      X1=NINT((REALAR(1)-X_OFFSET(4))/X_GRID(4))+1
	      Y1=NINT((REALAR(2)-Y_OFFSET(4))/Y_GRID(4))+1
	      X2=NINT((REALAR(3)-X_OFFSET(4))/X_GRID(4))+1
	      Y2=NINT((REALAR(4)-Y_OFFSET(4))/Y_GRID(4))+1
	    ELSE
	      X1=NINT(REALAR(1)/X_GRID(4))+1
	      Y1=NINT(REALAR(2)/Y_GRID(4))+1
	      X2=NINT(REALAR(3)/X_GRID(4))+1
	      Y2=NINT(REALAR(4)/Y_GRID(4))+1
	    ENDIF
C
C-----------------------------------------------------------------------
C	Latlong units
	  ELSE IF(UNITS.EQ.4)THEN
	    IF(.NOT.READLL(LLDEGS,4))THEN
	      CALL WRITEF('%S Specifying command WINDOW',ERROR_BELL)
	      CALL WRITEF
     &        ('Latitude and longitude values supplied in wrong format')
	      GOTO 999
	    ENDIF
	    REALAR(1)=LLDEGS(1)
	    REALAR(2)=LLDEGS(2)
	    REALAR(3)=LLDEGS(3)
	    REALAR(4)=LLDEGS(4)
C
C-----------------------------------------------------------------------
C	Projection units
	  ELSE IF(UNITS.EQ.5)THEN
	    IF(HAD_ABSOLUTE)THEN
	      X1=NINT((REALAR(1)-DTIPROJ_ORIGIN(1,4))
     &          /DTIPROJ_SAMPLE(1,4))+1
	      Y1=NINT((REALAR(2)-DTIPROJ_ORIGIN(2,4))
     &          /DTIPROJ_SAMPLE(2,4))+1
	      X2=NINT((REALAR(3)-DTIPROJ_ORIGIN(1,4))
     &          /DTIPROJ_SAMPLE(1,4))+1
	      Y2=NINT((REALAR(4)-DTIPROJ_ORIGIN(2,4))
     &          /DTIPROJ_SAMPLE(2,4))+1
	    ELSE
	      X1=NINT(REALAR(1)/DTIPROJ_SAMPLE(1,4))+1
	      Y1=NINT(REALAR(2)/DTIPROJ_SAMPLE(2,4))+1
	      X2=NINT(REALAR(1)/DTIPROJ_SAMPLE(1,4))+1
	      Y2=NINT(REALAR(2)/DTIPROJ_SAMPLE(2,4))+1
	    ENDIF
	  ENDIF	      	      
C
C	Tidy geographical coords.
	  IF(UNITS.EQ.3.OR.UNITS.EQ.4)THEN
	    X1=NINT(REALAR(2)*10)
	    Y1=NINT(REALAR(1)*10)
	    X1=((X1-LONREC(1,4))/LONINT(4))+1
	    Y1=((Y1-LATREC(1,4))/LATINT(4))+1
	    X2=NINT(REALAR(4)*10)
	    Y2=NINT(REALAR(3)*10)
	    X2=((X2-LONREC(1,4))/LONINT(4))+1
	    Y2=((Y2-LATREC(1,4))/LATINT(4))+1
	  ENDIF
C
C	Check that start coordinates are within the DTM
	  IF(X1.LT.1.OR.X1.GT.X_EXTENT(4).OR.
     &       Y1.LT.1.OR.Y1.GT.Y_EXTENT(4).OR.
     &       X2.LT.1.OR.X2.GT.X_EXTENT(4).OR.
     &       Y2.LT.1.OR.Y2.GT.Y_EXTENT(4))THEN
	     CALL WRITEF('%S Specifying command WINDOW',ERROR_BELL)
	     CALL WRITEF('Supplied values outside DTM bounds')
	     GOTO 999
	  ENDIF	   
C	Check that the SW corner value is less than the NE value
	  IF(X2.LE.X1.OR.Y2.LE.Y1)THEN
	    CALL WRITEF('%S Specifying command WINDOW',ERROR_BELL)
	    CALL WRITEF('NE corner values must exceed SW corner values')
	    GOTO 999
	  ENDIF	   
	  GOTO 900
	ENDIF
C
C-----------------------------------------------------------------------
C
C	If the command is issued via the table puck, then we need to
C	prompt for the SW and NE coordinate values
C	This is also done, if the WINDOW command is given from the
C	terminal, without any arguments.
C
	IF(PROMPT)THEN
C
C	First prompt for the SW window x and y coordinate values
100	   IF(.NOT.WAIT_INPUT('Window SW corner',.TRUE.,.TRUE.))
     &     GOTO 999
C
C	If input is from the terminal and expected format is not LATLONG
C	then........
	   IF(HAD_VDU)THEN
             IF(UNITS.NE.4)THEN
	       IF(RDREAL(REALAR(1)))GOTO 100	!reprompt
	       IF(RDREAL(REALAR(2)))GOTO 100	!reprompt
C
C	If input is from the terminal and expected format is LATLONG
C	then........
	     ELSE
C	Convert to seconds of arc 
               IF(.NOT.READLL(LLDEGS,2))THEN
	         CALL WRITEF
     &	   ('Latitude and longitude values supplied in wrong format')
	         GOTO 100				!reprompt
	       ELSE
	         REALAR(1)=LLDEGS(1)		!lat in seconds
	         REALAR(2)=LLDEGS(2)		!long in seconds
	       ENDIF
	     ENDIF
C
C	Convert coordinates to nearest DTI value
C
C-----------------------------------------------------------------------
C	Matrix units
	     IF     (UNITS.EQ.1)THEN
	       X1 = NINT(REALAR(1))
	       Y1 = NINT(REALAR(2))
C
C-----------------------------------------------------------------------
C	Metre units translated into nearest DTM node
	     ELSE IF(UNITS.EQ.2)THEN
	       IF(HAD_ABSOLUTE)THEN
	         X1=NINT((REALAR(1)-X_OFFSET(4))/X_GRID(4))+1
	         Y1=NINT((REALAR(2)-Y_OFFSET(4))/Y_GRID(4))+1
	       ELSE
	         X1=NINT(REALAR(1)/X_GRID(4))+1
	         Y1=NINT(REALAR(2)/Y_GRID(4))+1
	       ENDIF
C
C-----------------------------------------------------------------------
C	Latlong units
	     ELSE IF(UNITS.EQ.3 .OR. UNITS.EQ.4)THEN
	       X1=NINT(REALAR(2)*10)
	       Y1=NINT(REALAR(1)*10)
	       X1=((X1-LONREC(1,4))/LONINT(4))+1
	       Y1=((Y1-LATREC(1,4))/LATINT(4))+1
C
C-----------------------------------------------------------------------
C	Projection units
	     ELSE IF(UNITS.EQ.5)THEN
	       IF(HAD_ABSOLUTE)THEN
	         X1=NINT((REALAR(1)-DTIPROJ_ORIGIN(1,4))
     &            /DTIPROJ_SAMPLE(1,4))+1
	         Y1=NINT((REALAR(2)-DTIPROJ_ORIGIN(2,4))
     &            /DTIPROJ_SAMPLE(2,4))+1
	       ELSE
	         X1=NINT(REALAR(1)/DTIPROJ_SAMPLE(1,4))+1
	         Y1=NINT(REALAR(2)/DTIPROJ_SAMPLE(2,4))+1
	       ENDIF
	     ENDIF	      	      
C
C	If input is from the table puck then......
	   ELSE 
C	First check that a map has been set up on the table
	     IF(.NOT.MAP_SET)THEN
	       CALL WRITEF
     &         ('%S Inputting coordinates from table',ERROR_BELL)
	       CALL WRITEF('No map setup has been performed')
	       GOTO 999				!return
	     ENDIF
C	Read the table coordinates
	     IF(READ_PUCK(BUTTON,X_TAB,Y_TAB,ERROR))THEN
               CALL SHOW_ERROR(ERROR)
	       GOTO 999
	     ENDIF
C	Abort set up if button 15 is pressed
	     IF(BUTTON.EQ.15)GOTO 999
C	Convert from table coordinates to DTI coordinates
	     X1=NINT(TAB_DTI(1,1)*X_TAB+TAB_DTI(1,2)*Y_TAB+TAB_DTI(1,3))
	     Y1=NINT(TAB_DTI(2,1)*X_TAB+TAB_DTI(2,2)*Y_TAB+TAB_DTI(2,3))
C       Output coordinates to follow the prompt
	     TTOBEL = .TRUE.	!signal to VIO$PUT_OUTPUT
	     IF(UNITS.EQ.1)THEN
	       CALL WRITEF('%N %N',X1,Y1)
	     ELSE
               CALL WRITEF('%F %F',
     &                    ((X1-1)*X_GRID(4))+X_OFFSET(4),
     &                    ((Y1-1)*Y_GRID(4))+Y_OFFSET(4))
	     ENDIF
	     TTOBEL = .FALSE.
	  ENDIF
C
C	Check that the SW coordinates are within the DTM
	  IF(X1.LT.1.OR.X1.GT.X_EXTENT(4).OR.
     &       Y1.LT.1.OR.Y1.GT.Y_EXTENT(4))THEN
	     CALL WRITEF
     &    ('%S Specifying WINDOW SW corner',ERROR_BELL)
	     CALL WRITEF('Point is outside DTM bounds')
	     GOTO 100				!reprompt
	  ENDIF	   
C
C-----------------------------------------------------------------------
C	
C	Now prompt for the NE window x and y coordinate values
200	  IF(.NOT.WAIT_INPUT('Window NE corner',.TRUE.,.TRUE.))
     &    GOTO 999
C
C	If input is from the terminal and expected format is not LATLONG
C	then........
	  IF(HAD_VDU)THEN
            IF(UNITS.NE.4)THEN
	      IF(RDREAL(REALAR(3)))GOTO 200	!reprompt
	      IF(RDREAL(REALAR(4)))GOTO 200	!reprompt
C
C	If input is from the terminal and expected format is LATLONG
C	then........
	    ELSE
C	Convert to seconds of arc 
              IF(.NOT.READLL(LLDEGS,2))THEN
	        CALL WRITEF
     &	     ('Latitude and longitude values supplied in wrong format')
	        GOTO 200				!reprompt
	      ELSE
	        REALAR(3)=LLDEGS(1)		!lat in seconds
	        REALAR(4)=LLDEGS(2)		!long in seconds
	      ENDIF
	    ENDIF
C
C	Convert coordinates to nearest DTI value
C
C-----------------------------------------------------------------------
C	Matrix units
	    IF     (UNITS.EQ.1)THEN
	      X2 = NINT(REALAR(3))
	      Y2 = NINT(REALAR(4))
C
C-----------------------------------------------------------------------
C	Metre units translated into nearest DTM node
	    ELSE IF(UNITS.EQ.2)THEN
	      IF(HAD_ABSOLUTE)THEN
	        X2=NINT((REALAR(3)-X_OFFSET(4))/X_GRID(4))+1
	        Y2=NINT((REALAR(4)-Y_OFFSET(4))/Y_GRID(4))+1
	      ELSE
	        X2=NINT(REALAR(3)/X_GRID(4))+1
	        Y2=NINT(REALAR(4)/Y_GRID(4))+1
	      ENDIF
C
C-----------------------------------------------------------------------
C	Latlong units
	    ELSE IF(UNITS.EQ.3 .OR. UNITS.EQ.4)THEN
	      X2=NINT(REALAR(4)*10)
	      Y2=NINT(REALAR(3)*10)
	      X2=((X2-LONREC(1,4))/LONINT(4))+1
	      Y2=((Y2-LATREC(1,4))/LATINT(4))+1
C
C-----------------------------------------------------------------------
C	Projection units
	    ELSE IF(UNITS.EQ.5)THEN
	      IF(HAD_ABSOLUTE)THEN
	        X2=NINT((REALAR(3)-DTIPROJ_ORIGIN(1,4))
     &           /DTIPROJ_SAMPLE(1,4))+1
	        Y2=NINT((REALAR(4)-DTIPROJ_ORIGIN(2,4))
     &           /DTIPROJ_SAMPLE(2,4))+1
	      ELSE
	        X2=NINT(REALAR(1)/DTIPROJ_SAMPLE(1,4))+1
	        Y2=NINT(REALAR(2)/DTIPROJ_SAMPLE(2,4))+1
	      ENDIF
	    ENDIF	      	      
C
C
C-----------------------------------------------------------------------
C	If input is from the table puck then......
	  ELSE 
C	Read the table coordinates
	    IF(READ_PUCK(BUTTON,X_TAB,Y_TAB,ERROR))THEN
               CALL SHOW_ERROR(ERROR)
	       GOTO 999
	    ENDIF
C	Abort set up if button 15 is pressed
	     IF(BUTTON.EQ.15)GOTO 999
C	Convert from table coordinates to DTI coordinates
	     X2=NINT(TAB_DTI(1,1)*X_TAB+TAB_DTI(1,2)*Y_TAB+TAB_DTI(1,3))
	     Y2=NINT(TAB_DTI(2,1)*X_TAB+TAB_DTI(2,2)*Y_TAB+TAB_DTI(2,3))
C       Output coordinates to follow the prompt
	     TTOBEL = .TRUE.	!signal to VIO$PUT_OUTPUT
	     IF(UNITS.EQ.1)THEN
	       CALL WRITEF('%N %N',X2,Y2)
	     ELSE
               CALL WRITEF('%F %F',
     &                    ((X2-1)*X_GRID(4))+X_OFFSET(4),
     &                    ((Y2-1)*Y_GRID(4))+Y_OFFSET(4))
	     ENDIF
	     TTOBEL = .FALSE.
	  ENDIF
C
C	Check that coordinates are within the DTM
	  IF(X2.LT.1.OR.X2.GT.X_EXTENT(4).OR.
     &       Y2.LT.1.OR.Y2.GT.Y_EXTENT(4))THEN
	     CALL WRITEF
     &       ('%S Specifying WINDOW NE corner',ERROR_BELL)
	     CALL WRITEF('Point is outside DTM bounds')
	     GOTO 200				!reprompt
	  ENDIF
	ENDIF	   
C
C---------------------------------------------------------------------
C	Signal success
900	GET_WINDOW_POINTS=.TRUE.
C
C	Transfer to the DTI common block variables
	DTI_WINDOW_SWX(4) = X1
	DTI_WINDOW_SWY(4) = Y1
	DTI_WINDOW_NEX(4) = X2	
	DTI_WINDOW_NEY(4) = Y2
C
C	Set up corner metre offset values
	SWX_METRES(4)=(DTI_WINDOW_SWX(4)-1)*X_GRID(4)
	SWY_METRES(4)=(DTI_WINDOW_SWY(4)-1)*Y_GRID(4)
	NEX_METRES(4)=(DTI_WINDOW_NEX(4)-1)*X_GRID(4)
	NEY_METRES(4)=(DTI_WINDOW_NEY(4)-1)*Y_GRID(4)
C
C-----------------------------------------------------------------------
C	Check if the base station position 
C	lies in the rectangular area, and
C	therefore must be redefined before issuing GO.
	IF(HAD_POSITION)THEN
	  IF(X_POSITION.LT.SWX_METRES(4).OR.
     &      X_POSITION.GT.NEX_METRES(4).OR.
     &      Y_POSITION.LT.SWY_METRES(4).OR.
     &      Y_POSITION.GT.NEY_METRES(4))THEN
	    CALL WRITEF
     &    ('%S Base station is not within the current area of interest',
     &    WARN_BELL)
	    CALL WRITEF
     &    ('Redefine the position, or window before issuing GO')
	  ENDIF
	ENDIF
C
C-----------------------------------------------------------------------
C
999	RETURN
C
	END	  
