C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-04-28 10:24:50.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE SET_BAND
C
***	MODULE SET_BAND
***	IDENT  28AP88
C
	IMPLICIT NONE
C
C 	Copyright Laser Scan Laboratories Ltd., Cambridge, England
C 	Author  : 	D R Catlow.
C 	Created :	April 1988
C	Modified:
C
C	Function:
C	To extract details of the band number, width and sampling
C	interval provided on the command line by the user via the
C	BAND command.
C	The band number is verified to ensure that bands are defined
C	in ascending sequence (ie. with increasing distance from
C	the transmitter).
C
C-----------------------------------------------------------------------
C
***	COMMON/LSL$CMNLSL:CMDCOM/
C
***	COMMON/HERE:PROFILE/
C
	INTEGER*4	THIS_BAND       !number of this band
	INTEGER*4	I		!loop counter
C
C-----------------------------------------------------------------------
C	Check for 3 arguments
	IF(CMDACT.NE.3)THEN
	  CALL WRITEF('%S Specifying command BAND',ERROR_BELL)
	  CALL WRITEF('Command requires 3 arguments')
	  GOTO 999
	ENDIF
C
C-----------------------------------------------------------------------
C	First argument is the band number
	THIS_BAND=INTARG(1)
C	
C	Check that it is valid.
	IF(THIS_BAND.LE.0.OR.THIS_BAND.GT.MAX_BAND)THEN
	  CALL WRITEF('%S Specifying command BAND',ERROR_BELL)
	  CALL WRITEF
     &    ('Band number must be in the range 1 to %N',MAX_BAND)
	  GOTO 999
	ENDIF
C
C	Check that all lower bands have been defined
	IF(THIS_BAND.GT.NEXT_UNDEFINED_BAND)THEN
	  CALL WRITEF('%S Specifying command BAND',ERROR_BELL)
	  CALL WRITEF
     &    ('Parameters for lower band %N must be defined first',
     &    NEXT_UNDEFINED_BAND)
	  GOTO 999
	ENDIF
C
C-----------------------------------------------------------------------
C	Second argument is the width of the band
C	Check the validity of the width value.
	IF(REALAR(1).LE.0)THEN
	  CALL WRITEF('%S Specifying command BAND',ERROR_BELL)
	  CALL WRITEF
     &    ('Band width must be specified as a positive real number')
	  GOTO 999
	ENDIF
C
	BAND_WIDTH(THIS_BAND)=REALAR(1)
C
C	Calculate the distance of the outer limit of this band
C	from the transmitter
	IF(THIS_BAND.EQ.NEXT_UNDEFINED_BAND)THEN
	  IF(THIS_BAND.EQ.1)THEN
	    BAND_DISTANCE(1)=BAND_WIDTH(1)
	  ELSE
	    BAND_DISTANCE(THIS_BAND)=
     &      BAND_DISTANCE(THIS_BAND-1)+BAND_WIDTH(THIS_BAND)
	  ENDIF
	ELSE 
C	Recalculate distances for all bands
	  BAND_DISTANCE(1)=BAND_WIDTH(1)
	  DO 100 I=2,NEXT_UNDEFINED_BAND-1
	     BAND_DISTANCE(I)=BAND_DISTANCE(I-1)+BAND_WIDTH(I)
100	  CONTINUE
	ENDIF
C
C-----------------------------------------------------------------------
C	Third argument is the sampling interval to be applied within
C	this band.
C	Check the validity of the sample value.
	IF(REALAR(2).LE.0)THEN
	  CALL WRITEF('%S Specifying command BAND',ERROR_BELL)
	  CALL WRITEF
     &  ('Sample interval must be specified as a positive real number')
	  GOTO 999
	ENDIF
C	
C	Transfer to common variable
	BAND_SAMPLE(THIS_BAND)=REALAR(2)
C
C-----------------------------------------------------------------------
C	Update the variable holding the number of the next
C	undefined band.
	NEXT_UNDEFINED_BAND=THIS_BAND+1
C	
C	Signal that we've had at least 1 valid BAND command
	HAD_BAND=.TRUE.
C-----------------------------------------------------------------------
C
999	RETURN
C
	END
