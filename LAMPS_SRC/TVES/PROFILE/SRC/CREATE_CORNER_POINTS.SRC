C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-05-09 17:05:46.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE CREATE_CORNER_POINTS
C
***	IDENT	09MY88
***	MODULE	CREATE_CORNER_POINTS
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C	Author    : D R Catlow
C	Created   : May 1988
C	
C	Function  :
C	To create a layer 0 and associated registration features
C	in the IFF file.
C
C----------------------------------------------------------------------
C
	IMPLICIT NONE
C
***	COMMON/LSL$CMNDTI:DTIHDR/
C
C
***	COMMON/LSL$CMNIFF:IFFHAN/
***	COMMON/LSL$CMNIFF:CB.STR/
***	COMMON/LSL$CMNLSL:LSLLIBMSG.PAR/
C
C	PROFILE common block
***	COMMON/HERE:PROFILE/
***	COMMON/HERE:PROFILE_IFF/
C
C-----------------------------------------------------------------------
C	Local
	INTEGER*4	I			!loop counter
C
C-----------------------------------------------------------------------
C
C	Create Layer 0	
C	Save pointer to NO so we can fill out the remainder of the
C	entry later
	LPOSNO = LPOSE		
	CALL IFFNO(0,0,0)
C
	DO 100 I=1,4
C
C	Create a new feature with no ACs
	  CALL NEW_FEATURE(.FALSE.)
C
C	Coordinate points (2-D string)
	  IF(I.EQ.1)THEN		!bottom lefthand corner
	    CALL ADD_POINT(SWX_METRES(4)+X_GRID(4),SWY_METRES(4),
     &                     IFF_ABSENT,IFF_ABSENT)
	    CALL ADD_POINT(SWX_METRES(4),SWY_METRES(4),
     &                     IFF_ABSENT,IFF_ABSENT)
	    CALL ADD_POINT(SWX_METRES(4),SWY_METRES(4)+Y_GRID(4),
     &                     IFF_ABSENT,IFF_ABSENT)
C
	  ELSE IF(I.EQ.2)THEN		!top lefthand corner
	    CALL ADD_POINT(SWX_METRES(4),NEY_METRES(4)-Y_GRID(4),
     &                     IFF_ABSENT,IFF_ABSENT)
	    CALL ADD_POINT(SWX_METRES(4),NEY_METRES(4),
     &                     IFF_ABSENT,IFF_ABSENT)
	    CALL ADD_POINT(SWX_METRES(4)+X_GRID(4),NEY_METRES(4),
     &                     IFF_ABSENT,IFF_ABSENT)
C
	  ELSE IF(I.EQ.3)THEN		!top righthand corner
	    CALL ADD_POINT(NEX_METRES(4)-X_GRID(4),NEY_METRES(4),
     &                     IFF_ABSENT,IFF_ABSENT)
	    CALL ADD_POINT(NEX_METRES(4),NEY_METRES(4),
     &                     IFF_ABSENT,IFF_ABSENT)
	    CALL ADD_POINT(NEX_METRES(4),NEY_METRES(4)-Y_GRID(4),
     &                     IFF_ABSENT,IFF_ABSENT)
C
	  ELSE IF(I.EQ.4)THEN		!bottom righthand corner
	    CALL ADD_POINT(NEX_METRES(4),SWY_METRES(4)+Y_GRID(4),
     &                     IFF_ABSENT,IFF_ABSENT)
	    CALL ADD_POINT(NEX_METRES(4),SWY_METRES(4),
     &                     IFF_ABSENT,IFF_ABSENT)
	    CALL ADD_POINT(NEX_METRES(4)-X_GRID(4),SWY_METRES(4),
     &                     IFF_ABSENT,IFF_ABSENT)
	  ENDIF
C
	  CALL END_FEATURE
C
100	CONTINUE
C
C	Update NO pointer
	CALL IFFUNO(LPOSNO)
C
C	Write an end of overlay
	CALL IFFEO
C	
C	Reset feature counter, so that its a count of number of profile
C	features only
	NF_NUMBER=0
	TOTAL_FEATURES=0
C
C-----------------------------------------------------------------------
C
999	RETURN
C
	END

