C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-11-30 15:17:24.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE SET_POSITION(FROM_TABLE)
C
***	MODULE SET_POSITION
***	IDENT  30NO88
C
	IMPLICIT NONE
C
C 	Copyright Laser Scan Laboratories Ltd., Cambridge, England
C 	Author  : 	D R Catlow.
C 	Created :	April 1988
C	Modified:
C	Amend for ABSOLUTE coords. and PROJECTION units.  FJB 29-Nov-1988 
C
C	Function:
C	To determine the position of the base station,
C	either from coordinates input on the command line, or
C	coordinates entered via a digitising table.
C
C-----------------------------------------------------------------------
C	
C	Argument
	LOGICAL			FROM_TABLE	!command from table puck
C
C-----------------------------------------------------------------------
C 	DTILIB common
***	COMMON/LSL$CMNDTI:DTIHDR/
***	COMMON/LSL$CMNDTI:DTIPROJ/
C
C 	LSLLIB common
***	COMMON/LSL$CMNLSL:CMDCOM/
C
C	PROFILE common
***	COMMON/HERE:PROFILE/
***	COMMON/HERE:PROFILE_IFF/
***	COMMON/HERE:PROQIO/
***	COMMON/HERE:TAB/
C
C
C	Local
	REAL		X1,Y1		! position of point as
C					! metre offsets from origin
C					! of DTM.
	INTEGER*4	LLDEGS(2)	! values in seconds
	INTEGER*2	C_HEIGHT	! clutter height
C
C	Functions
	LOGICAL		READLL		! reads lat/long
	INTEGER*4	GET_CLUTTER	! to get clutter index
	INTEGER*4	SAMPLE		! interpolate terrain height
C					! at transmitter location
C
C----------------------------------------------------------------------
C
	IF(.NOT.FROM_TABLE)THEN
C	Check for the right number of arguments
	  IF(CMDACT.NE.2.AND.UNITS.NE.4)THEN
	    CALL WRITEF('%S Specifying command POSITION',ERROR_BELL)
	    CALL WRITEF('Command requires 2 x y coordinate values')
	    GOTO 999
	  ENDIF
C
C	Branch according to the current units of measuremnt
	  GOTO (100,200,300,400,450)UNITS
C
C-----------------------------------------------------------------------
C	Matrix units
C	Translate into metre offset values
100	  X1=(REALAR(1)-1)*X_GRID(4)
	  Y1=(REALAR(2)-1)*Y_GRID(4)
	  GOTO 500
C
C-----------------------------------------------------------------------
C	Metre units
C	No conversion required but remember to subtract offset
200	  IF(HAD_ABSOLUTE)THEN  
	     X1=REALAR(1)-X_OFFSET(4)
	     Y1=REALAR(2)-Y_OFFSET(4)
	  ELSE 
	     X1=REALAR(1)
	     Y1=REALAR(2)
	  ENDIF
	  GOTO 500
C                            
C-----------------------------------------------------------------------
C	Seconds units
C	Convert from seconds to .1 seconds
300       X1=REALAR(2)*10.0			!longitude
	  Y1=REALAR(1)*10.0			!latitude
C
C	Convert from .1 seconds to real matrix values
	  X1=(X1-LONREC(1,4))/LONINT(4)
	  Y1=(Y1-LATREC(1,4))/LATINT(4)
C
C	Convert to metre offset values
	  X1=(X1-1)*X_GRID(4)
	  Y1=(Y1-1)*Y_GRID(4)
	  GOTO 500
C
C-----------------------------------------------------------------------
C	Latlong units
400       IF(.NOT.READLL(LLDEGS,2))THEN
	    CALL WRITEF('%S Specifying command POSITION',ERROR_BELL)
	    CALL WRITEF
     &      ('Latitude and longitude values supplied in wrong format')
	    GOTO 999
	  ENDIF
C
C	Convert from .1 seconds to real matrix values
	  X1=(LLDEGS(2)-LONREC(1,4))/LONINT(4)		!longitude
	  Y1=(LLDEGS(1)-LATREC(1,4))/LATINT(4)		!latitude
C
C	Convert to metre offset values
	  X1=(X1-1)*X_GRID(4)
	  Y1=(Y1-1)*Y_GRID(4)
	  GOTO 500
C
C-----------------------------------------------------------------------
C	Projection units
C	No conversion required but remember to subtract offset
450	  IF(HAD_ABSOLUTE)THEN  
	     X1=REALAR(1)-DTIPROJ_ORIGIN(1,4)
	     Y1=REALAR(2)-DTIPROJ_ORIGIN(2,4)
	  ELSE 
	     X1=REALAR(1)
	     Y1=REALAR(2)
	  ENDIF
	  GOTO 500
C
	ENDIF
C
C-----------------------------------------------------------------------
C	Command from table, so read table position and translate
C	into DTM coordinate space
	IF(FROM_TABLE)THEN
C	Convert from table coordinate to a DTM metre offset value
	  X1=TAB_DTI(1,1)*X_TAB+TAB_DTI(1,2)*Y_TAB+TAB_DTI(1,3)
	  Y1=TAB_DTI(2,1)*X_TAB+TAB_DTI(2,2)*Y_TAB+TAB_DTI(2,3)
	  X1=(X1-1)*X_GRID(4)
	  Y1=(Y1-1)*Y_GRID(4)
C	Echo the DTM coordinates on the terminal
	  TTOBEL = .TRUE.
	  IF(UNITS.EQ.1)THEN
	    CALL WRITEF('%F %F',
     &                 (X1/X_GRID(4))+1,
     &                 (Y1/Y_GRID(4))+1)
	  ELSE
	    CALL WRITEF('%F9.2 %F9.2',X1+X_OFFSET(4),
     &                                Y1+Y_OFFSET(4))
	  ENDIF
	  TTOBEL=.FALSE.
	ENDIF
C
C-----------------------------------------------------------------------
C	Check that profile origin is within the DTM
500	IF(X1.LT.0.OR.X1.GT.(X_EXTENT(4)-1)*X_GRID(4).OR.
     &     Y1.LT.0.OR.Y1.GT.(Y_EXTENT(4)-1)*Y_GRID(4))THEN
	  CALL WRITEF('%S Specifying command POSITION',ERROR_BELL)
	  CALL WRITEF('Supplied values outside DTM bounds')
	  GOTO 999
	ENDIF	   
C
C-----------------------------------------------------------------------
C	Check that the profile origin is within the current
C	rectangular area of interest and issue warning
	IF(X1.LT.SWX_METRES(4).OR.X1.GT.NEX_METRES(4).OR.
     &     Y1.LT.SWY_METRES(4).OR.Y1.GT.NEY_METRES(4))THEN
          CALL WRITEF
     &  ('%S Base station position is outside current area of interest',
     &  WARN_BELL)
	  CALL WRITEF
     &  ('Redefine the position, or window before issuing GO')
	ENDIF
C
C-----------------------------------------------------------------------
C	Transfer values to PROFILE common variables
	X_POSITION=X1
	Y_POSITION=Y1
C
C	Determine the Z value and clutter index at the
C	transmitter site.  Note we don't add the height of any
C	clutter at this point on to the terrain height.
C	Interpolate the height at the sample point
	RETVAL = SAMPLE(4,2,X_POSITION,Y_POSITION,Z_POSITION)
	IF(.NOT.RETVAL)CALL LSL_PUTMSG(RETVAL)
C	
C	If the height at this point is 0 (although very unlikely),
C	then set the clutter index to indicate water.
	IF(Z_POSITION.LE.0)THEN
	  C_POSITION=3
	ELSE
C	Determine the clutter index from the clutter files
	  RETVAL=GET_CLUTTER(X_POSITION,Y_POSITION,C_HEIGHT,C_POSITION)
	  IF(.NOT.RETVAL)CALL LSL_PUTMSG(RETVAL)
	ENDIF
C
	CALL WRITEF
     &  ('Height of terrain surface at base station is %F8.2',
     &  Z_POSITION)
	CALL WRITEF(' ')
C
	HAD_POSITION=.TRUE.
C-----------------------------------------------------------------------
C
999	RETURN
C
	END
