C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-07-29 12:25:00.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION OPEN_DTI_FILE(DTI_LUN,HAD_PFC,PFC)
C
***	IDENT	29JL92
***	MODULE	OPEN_DTI_FILE
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C	Author    : D R Catlow
C	Created   : April 1988  (from version used by DTIVIEW)
C
CMOD	Amended DTI library functions. 			FJB 29-Nov-1988
CMOD	Add PFC (page fault cluster) arguments		 JB 28-Jul-1992
C
C
C *** SHOULD CHECK FOR SAME PROJ ORIGIN IN DTI AND CLUTTER FILES
C
C	Function  :
C	Function to open an existing DTI file on the requested DTI_LUN.
C	The DTI file contains terrain elevation data if DTI_LUN is 4,
C	and clutter height data in other cases.
C	The routine closes any file currently opened on DTI_LUN.
C	The filename specified on the command line is parsed against 
C	the default LSL$DTI:DTI.DTI
C	The routine calls DTI_OPEN to open and map the file.
C	If present the DTI Projection Record is read.
C	Default units are set, and a default rectangular area of
C	interest is defined.
C
C	The function returns TRUE if a file is successfully opened, and
C	FALSE if an error has occured.
C
C----------------------------------------------------------------------
C
	IMPLICIT NONE
C
C	DTILIB commons and parameter files
***	COMMON/LSL$CMNDTI:DTIHDR/
***	COMMON/LSL$CMNDTI:DTIPROJ/
C                       
***	PARAMETER/LSL$CMNDTI:DTIPAR/
***	PARAMETER/LSL$CMNDTI:DTILIBMSG/
C
C
***	COMMON/HERE:PROFILE/
***	COMMON/HERE:PROFILE_IFF/
C----------------------------------------------------------------------
C argument
	INTEGER*4	DTI_LUN		! channel number
	LOGICAL		HAD_PFC
	INTEGER*4	PFC
C
C workspace
	INTEGER*4	I		! loop counter
	BYTE		CH		! single character
C
C DTILIB functions
	INTEGER*4	DTI_OPEN	! open and map a file
	INTEGER*4	DTI_CLOSE	! to unmap and close a file
	INTEGER*4	DTI_READ_PROJ_REC !read a DTI Proj. Record
	INTEGER*4	DTI_UNITS	! test for valid units/default 
C
C LSLLIB functions
	INTEGER*4	GETFILNAM	! to parse the filename
	LOGICAL		RDCHS		! read character
C
C----------------------------------------------------------------------
C
	OPEN_DTI_FILE=.FALSE.	! Assume function is unsuccessful
C
C----------------------------------------------------------------------
C	Check for a file specification
	IF(RDCHS(CH))THEN
	  IF(DTI_LUN.EQ.4)THEN
	    CALL WRITEF('%S Specifying command FILEIN',ERROR_BELL)
	  ELSE
	    CALL WRITEF('%S Specifying command %S',ERROR_BELL,
     &                  CLUTTER_TYPE(DTI_LUN))
	  ENDIF
	  CALL WRITEF('DTI Filename is missing',ERROR_BELL)
	  CALL BSLN
	  GOTO 999	  
	ENDIF
C
C----------------------------------------------------------------------
C	Close and unmap any file opened on this channel
	IF(DTILUN_INUSE(DTI_LUN))THEN
	  RETVAL = DTI_CLOSE (DTI_LUN, .FALSE., .TRUE., ERROR)	
	  IF(RETVAL.NE.DTI__NORMAL)THEN
	     CALL LSL_PUTMSG(RETVAL)
	     IF(RETVAL.EQ.DTI__SYSERR)CALL LSL_PUTMSG(ERROR)
	     GOTO 999			!return
	  ENDIF	  
	ENDIF
C
C----------------------------------------------------------------------
C	Backspace over the character just read
	CALL BSCH
C
C	Parse the input file name against LSL$DTI:.DTI
	RETVAL=GETFILNAM(DTI_NAME(DTI_LUN),
     &                   DTI_NAME_LENGTH(DTI_LUN),
     &                   'LSL$DTI:.DTI',
     &                   .TRUE.,
     &                   %REF('!'))
C
	IF(.NOT.RETVAL)THEN
	  CALL LSL_PUTMSG(RETVAL)
	  GOTO 999			!return
	ENDIF
C
C-----------------------------------------------------------------------
C	Open and map the file.  
C	Note the file is opened for read only.
C	Output warning of any nonstandard order.
C
	IF (HAD_PFC) THEN
	   RETVAL = DTI_OPEN (  DTI_LUN, 
     &				DTI_NAME(DTI_LUN), 
     &				DTI_NAME_LENGTH(DTI_LUN),
     &				.FALSE.,
     &				ERROR,
     &				.TRUE.,
     &				PFC)
	ELSE
	   RETVAL = DTI_OPEN (  DTI_LUN, 
     &				DTI_NAME(DTI_LUN), 
     &				DTI_NAME_LENGTH(DTI_LUN),
     &				.FALSE.,
     &				ERROR,
     &				.TRUE.)
	ENDIF
C
	IF(RETVAL.NE.DTI__NORMAL)THEN
	  CALL LSL_PUTMSG(RETVAL)
	  IF (RETVAL.EQ.DTI__SYSERR) CALL LSL_ADDMSG(ERROR)
	  GOTO 999					!return
	ENDIF
C
C----------------------------------------------------------------------
C	If the DTI contains the DTM,
C	set the default area of interest, default units of
C	measurement, and read any DTI Projection Record.
C
	IF(DTI_LUN.EQ.4)THEN
C
C	Set the default window to be equal to the total DTM
	  DTI_WINDOW_SWX(DTI_LUN)=1
	  DTI_WINDOW_SWY(DTI_LUN)=1
	  DTI_WINDOW_NEX(DTI_LUN)=X_EXTENT(DTI_LUN)
	  DTI_WINDOW_NEY(DTI_LUN)=Y_EXTENT(DTI_LUN)
C
C	Set up the corner metre offset values
	  SWX_METRES(4)=0.0
	  SWY_METRES(4)=0.0
	  NEX_METRES(4)=(X_EXTENT(DTI_LUN)-1)*X_GRID(DTI_LUN)
	  NEY_METRES(4)=(Y_EXTENT(DTI_LUN)-1)*Y_GRID(DTI_LUN)
C
C	Determine a sensible default units of measurement
	  UNITS = 0
	  RETVAL = DTI_UNITS (DTI_LUN,UNITS)
	  IF(.NOT.RETVAL)THEN
	    CALL LSL_PUTMSG(RETVAL)
	    UNITS = UNITS_DTI
	  ENDIF
C
C	If we had some clutter files, ensure that they are registered
C	to the SW corner of the DTM (if they have no proj. record).
	  DO 100 I=1,3
	     IF(.NOT.DTILUN_INUSE(I))GOTO 100
C
	     IF(HAD_PROJ_RECORD(I))GOTO 100
C
	     X_OFFSET(I)=X_OFFSET(4)
	     Y_OFFSET(I)=Y_OFFSET(4)
100	  CONTINUE
C
C-------------------------------------------------------------------
	ELSE
C
C	Must be a clutter file, 
C	No projection record, so treat the file as having the same
C	offset as the DTM
	  IF(HAD_PROJ_RECORD(DTI_LUN))THEN
	    IF(HAD_PROJ_RECORD(4))THEN
C
C	Check that the projection is the same as the input DTM.
C	Output warning, but carry on regardless.
	      IF(DTIPROJ_PROJECTION(DTI_LUN).NE.
     &           DTIPROJ_PROJECTION(4))THEN
	        CALL WRITEF
     &          ('%S Projection of %S clutter file is different to DTM',
     &          WARN_BELL,CLUTTER_TYPE(DTI_LUN))
	      ENDIF
	    ELSE
 	      HAD_PROJ_RECORD(DTI_LUN)=.FALSE.
	      X_OFFSET(DTI_LUN)=X_OFFSET(4)
	      Y_OFFSET(DTI_LUN)=Y_OFFSET(4)	      
            ENDIF
	  ELSE
C
C	No projection record, so assume SW corner of clutter file
C	registers to the SW corner of the input DTM.
	    HAD_PROJ_RECORD(DTI_LUN)=.FALSE.
	    X_OFFSET(DTI_LUN)=X_OFFSET(4)
	    Y_OFFSET(DTI_LUN)=Y_OFFSET(4)
	  ENDIF
C
	  SWX_METRES(DTI_LUN)=0
	  SWY_METRES(DTI_LUN)=0
	  NEX_METRES(DTI_LUN)=(X_EXTENT(DTI_LUN)-1)*X_GRID(DTI_LUN)
	  NEY_METRES(DTI_LUN)=(Y_EXTENT(DTI_LUN)-1)*Y_GRID(DTI_LUN)
	ENDIF
C
C----------------------------------------------------------------------
C
	OPEN_DTI_FILE=.TRUE.		!signal success
C
999	RETURN
	END
C
