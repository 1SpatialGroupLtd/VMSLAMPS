C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-02-17 17:51:28.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
 	SUBROUTINE GENERATE_PROFILES
C
***	MODULE GENERATE_PROFILES
***	IDENT  17FE89
C
	IMPLICIT NONE
C
C 	Copyright Laser Scan Laboratories Ltd., Cambridge, England
C 	Author  : 	D R Catlow.
C 	Created :	April 1988
C	Modified:
C
C	Function:
C	To generate a series of profiles constructed between the
C	base station position and all DTM nodes in the area of
C	interest.
C	This routine is only called if PROFILE_INTERVAL is 0.
C	The routine RADIAL_PROFILES is used in other situations.
C	If a sector of interest has been defined, the function
C	IN_SECTOR is used to determine whether a DTM
C	node lies in the sector of interest.
C	For each profile the subroutine SINGLE_PROFILE is called to
C	calculate the profile coordinate values.
C
C-----------------------------------------------------------------------
C
***	COMMON/LSL$CMNDTI:DTIHDR/	!DTI header information
C
***	COMMON/HERE:PROFILE/		!PROFILE parameters
***	COMMON/HERE:PROFILE_IFF/	!PROFILE IFF related variables
***	COMMON/HERE:PROQIO/		!contains CRT
C
C	local variables
	INTEGER*4	X		!column index
	INTEGER*4	Y		!row index
	INTEGER*4	COLUMNS_PROCESSED	!no. of cols processed
	REAL		DIFFX		!diff. in x between st and end
	REAL		DIFFY           !diff. in y between st and end
	REAL		PCENT		!for percentage complete
	REAL		PCF		!diagnostics messages.
C
	REAL*4		PI		!for rads to degrees conversion
	PARAMETER	(PI=3.141592654)
C
C	functions
	LOGICAL		IN_SECTOR	!test whether point is in sector
	LOGICAL		HADCTRLC	!test if we've had CTRL C
C
C-----------------------------------------------------------------------
C
C	If diagnostics are enabled, then tell the user what we about
C	to do.
	IF(DIAG)THEN
          CALL FRAMED_MES
	  IF(CRT)THEN
	    PCF = 100.0/((DTI_WINDOW_NEX(4)-DTI_WINDOW_SWX(4))+1)
	    PCF = PCF*SUB_SAMPLE(1)
	    PCENT = 0
	    WRITE(*,'(1X,F6.2,''%'')')PCENT
	  ENDIF
	ENDIF
C
C	Set number of columns processed to 0
	COLUMNS_PROCESSED=0
C
C	Consider only the DTM nodes that lie within the rectangular
C	area of interest
	DO 200 X=DTI_WINDOW_SWX(4),DTI_WINDOW_NEX(4),SUB_SAMPLE(1)
C
C 	Test if CTRL/C been pressed
           IF (HADCTRLC()) GOTO 900
C
70	   DO 100 Y=DTI_WINDOW_SWY(4),DTI_WINDOW_NEY(4),SUB_SAMPLE(2)
C
C	Calculate metre offset of the node
80	      X_POINT=(X-1)*X_GRID(4)
	      Y_POINT=(Y-1)*Y_GRID(4)
C
C	Test if the point is exactly on the profile origin.
	      IF(X_POINT.EQ.X_POSITION.AND.
     &           Y_POINT.EQ.Y_POSITION)GOTO 100
C
C	Calculate the distance of the profile from end to end
	      DIFFX=X_POINT-X_POSITION
	      DIFFY=Y_POINT-Y_POSITION
	      PROFILE_DISTANCE=SQRT((DIFFX*DIFFX)+(DIFFY*DIFFY))
C
C	Calculate bearing of profile. ie. position of profile end
C	point with respect to profile start point.
C	Intrinsic function ATAN2 is used to get the bearing in
C	radians.  This is used with the SIN and COS functions in
C	SINGLE_PROFILE.
C	The bearing in degrees is also calculated since this is
C       how it is written to the IFF file.
	      BEARING_RADIANS=ATAN2(DIFFX,DIFFY)
	      PROFILE_BEARING=BEARING_RADIANS*180.0/PI
	      IF(PROFILE_BEARING.LT.0.0)
     &           PROFILE_BEARING=PROFILE_BEARING+360.0
C
C	If a sector of interest has been defined, test whether node
C	lies in the sector
	      IF(HAD_SECTOR)THEN
	        IF(.NOT.IN_SECTOR(X_POINT,Y_POINT))GOTO 100
	      ENDIF
C
C	Calculate profile beteen this point and the profile origin
C	(ie. base station)
	      CALL SINGLE_PROFILE(X_POINT,Y_POINT)
C
100	   CONTINUE
C
C	Ensure last row is processed if sub_sampling
	   IF(Y-SUB_SAMPLE(2).LT.DTI_WINDOW_NEY(4))THEN
	      Y = DTI_WINDOW_NEY(4)
	      GOTO 80
	   ENDIF
C
C	Update count of columns processed
	   COLUMNS_PROCESSED=COLUMNS_PROCESSED+1
C   	If diagnostics are enabled show progress
	   IF(DIAG.AND.CRT)THEN
	     PCENT = COLUMNS_PROCESSED*PCF
	     WRITE(*,'(1H+,F6.2)')PCENT
	   ENDIF
C
200	CONTINUE
C
C	Ensure last row is processed if sub_sampling
	IF(X-SUB_SAMPLE(1).LT.DTI_WINDOW_NEX(4))THEN
	   X = DTI_WINDOW_NEX(4)
	   GOTO 70
	ENDIF
C
C	If diagnostics output 100% complete, and then
C	overwrite the % message
	IF(DIAG.AND.CRT)THEN
	  PCENT = 100
	  WRITE(*,'(1H+,F6.2)')PCENT
	  WRITE(*,'(1H+,''       '')')
	ENDIF
C
C	If diagnostics inform the user how many profiles have been
C	written to the output IFF file
900	IF(DIAG)THEN
	  CALL WRITEF('Total of %N profiles written to IFF file',
     &    TOTAL_FEATURES)
	  CALL WRITEF(' ')
	ENDIF
C
C-----------------------------------------------------------------------
C
999	RETURN
C
	END
