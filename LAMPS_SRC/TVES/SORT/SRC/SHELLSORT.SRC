	SUBROUTINE SHELL_SORT(TABLE, COUNT, CF, SWAP)
C
***	MODULE SHELL_SORT
***	IDENT 06NO84
C
	IMPLICIT NONE
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England
C
C Author R. Fairbairns		   September 1981
C Added verbosity by TJ Ibbs	 6 November  1984
C
C Shell's sort - diminishing increment sort
C
C To sort table into order defined by routine supplied by caller
C using Shell's sort (for explanation/discussion of Shell's sort,
C see
C	Knuth - The Art of Computer Programming,  vol 3, p84 sqq
C	Wirth - Algorithms + Data Structures = Programs, p68 sqq
C
C Comments: reasonably efficient for moderately large COUNT
C	    (say less than or around 1000)
C	    equal keys will be swapped
C
C Arguments
C
	INTEGER*4	TABLE
	INTEGER*2	COUNT
	INTEGER*4	CF
C	.........	SWAP
C
C TABLE	is the address of the array to be sorted - we don't need to
C	know what sort of array, because we only pass it down to CF
C	and SWAP - it might be CHARACTER*(*), or REAL(200,2), etc
C
C COUNT	is the number of elements in TABLE
C
C CF	is a longword function to compare two elements of TABLE
C
C		CF( TABLE, index1, index2 )
C
C	returns	-1 if  element 'index1' < element 'index2'
C		 0 if			=
C		+1 if			>
C
C SWAP	is a routine to swap two elements of TABLE
C
C		SWAP( TABLE, index1, index2 )
C
C w/s
C
	INTEGER*4	COUNT4		! copy of COUNT
	INTEGER*4	SLICE		! holds current slice of array
	INTEGER*4	I, J		! loop variables
C
C copy COUNT, and initialise
C
	COUNT4 = COUNT
	SLICE  = COUNT4
C
C outer loop: decide our next slice
C
10	SLICE  = (SLICE+2)/3		! not quite an optimal choice
C
C inner loop: compare elements separated by slice
C
20	DO 40 I = SLICE+1,COUNT4
	   DO 30 J = I,SLICE+1,-SLICE
	      IF ( CF(TABLE, J, J-SLICE) .GE. 0 )
     &               GOTO 30		   ! this pair already OK
	      CALL SWAP(TABLE, J, J-SLICE) ! correct order of this pair
30	   CONTINUE
40	CONTINUE
C
C go back for next slice, unless we've already done the 'finest' slice
C we're able to - ie a slice of 1
C
	IF (SLICE .NE. 1) GOTO 10
C
	RETURN				! so it's all sorted
	END
