	SUBROUTINE QUICK_SORT(TABLE, COUNT, CF, SWAP, STACK)
C
***	MODULE QUICK_SORT
***	IDENT 26MR85
C
	IMPLICIT NONE
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England
C
C Produced from various sources (with thanks to Andy Morris)
C
C Coded by TJ Ibbs,	 6 November 1984
C
C Quicksort - partition exchange, Hoare's method
C
C To sort table into order defined by routine supplied by caller
C using CA Hoare's Quicksort (for explanation/discussion of Quicksort,
C see
C	Knuth - The Art of Computer Programming,  vol 3, p114 sqq
C	Wirth - Algorithms + Data Structures = Programs, p76  sqq
C
C Comments: average running time very good - worst case very bad!
C	    needs a stack of size   longword( 2,log2(COUNT) )
C	    equal keys will be swapped
C
C	    NOTE that this version doesn't do a straight insertion
C		 sort for (sufficently) small partitions - instead
C		 it just Quicksorts all the way down
C
C Arguments
C
	INTEGER*4	TABLE
	INTEGER*2	COUNT
	INTEGER*4	CF
C	.........	SWAP
	INTEGER*4	STACK(2,*)
C
C TABLE	is the address of the array to be sorted - we don't need to
C	know what sort of array, because we only pass it down to CF
C	and SWAP - it might be CHARACTER*(*), or REAL(200,2), etc
C
C COUNT	is the number of elements in TABLE
C
C CF	is a longword function to compare two elements of TABLE
C
C		CF( TABLE, index1, index2 )
C
C	returns	-1 if  element 'index1' < element 'index2'
C		 0 if			=
C		+1 if			>
C
C SWAP	is a routine to swap two elements of TABLE
C
C		SWAP( TABLE, index1, index2 )
C
C STACK	is a stack supplied by our calling routine
C	note that the required size of the '*' is log2 of COUNT,
C	in order to prevent overflow
C
C to ease use of STACK, we declare
C
	INTEGER		 L, R		! ie Left and Right
	PARAMETER	(L = 1, R = 2)
C
C workspace
C
	INTEGER*4	STACK_PTR	! pointer into STACK
	INTEGER*4	LEFT, RIGHT	! partition pointers
	INTEGER*4	I, J		! temporary ditto
	INTEGER*4	SPLIT		! where we are comparing
C
C
C so let us set up our initial conditions
C
	STACK_PTR = 1			! start off the stack
	STACK( L, 1 ) = 1		! left end of whole thing
	STACK( R, 1 ) = COUNT		! right end
C
C LOOP 1 - remove a 'request' from the stack
C	 - this requests us to sort the partition defined by LEFT
C	   and RIGHT
C
10	LEFT  = STACK( L, STACK_PTR )
	RIGHT = STACK( R, STACK_PTR )
	STACK_PTR = STACK_PTR-1
C
C LOOP 2 - split the partition into two parts - I for left, J for right
C	 - we will compare TABLE's I and J values with its SPLIT value
C
20	I = LEFT
	J = RIGHT
	SPLIT = INT( (LEFT+RIGHT)/2 )
C
C stage 3 - find a position 'I' such that TABLE(I) ge TABLE(SPLIT)
C	  - work up the partition until we find one
C
30	IF ( CF(TABLE,I,SPLIT) .LT. 0 ) THEN
	   I = I+1			! try the next element
	   GOTO 30			! compare again
	ENDIF
C
C stage 4 - find a position 'J' such that TABLE(SPLIT) ge TABLE(J)
C	  - work down the partition  until we find one
C
40	IF ( CF(TABLE,SPLIT,J) .LT. 0 ) THEN
	   J = J-1			! try the previous element
	   GOTO 40			! compare again
	ENDIF
C
C do we need to swap our two elements?
C we know that
C
C	TABLE(I) ge TABLE(SPLIT) ge TABLE(J),
C
C so if J gt I we have found a pair of elements which we must swap
C
	IF ( I.LE.J ) THEN
	   CALL SWAP( TABLE, I, J )	! swap the elements around
	   I = I+1			! consider next element
	   J = J-1			! and previous one
	ENDIF
C
C decide what to do next - if I is still less than J, we can continue
C the search we were making for elements around SPLIT
C
	IF ( I.LE.J ) GOTO 30		! continue search at stage 3
C
C decide which side of the partition we want to continue sorting on
C
C ie if we wish to continue on the left side, then we must stack
C    the bounds of the right side (ie the values of I and RIGHT),
C    and our new RIGHT value will be the right-most value of the
C    left side, which is J
C
C    we will then continue sorting the left side, and the right side
C    will get sorted when we unstack the 'request' for it later.
C
C    the same (in complement) is done if we decide to sort the
C    right side
C
	IF ( (J-LEFT).LT.(RIGHT-I) ) THEN	! choose which
C
	   IF ( I.LT.RIGHT ) THEN
	      STACK_PTR = STACK_PTR+1		! we must stack the
	      STACK(L,STACK_PTR) = I		! rest of the right
	      STACK(R,STACK_PTR) = RIGHT	! side, do it later
	   ENDIF
	   RIGHT = J			! we're sorting the left side
C
	ELSE
C
	   IF ( LEFT.LT.J ) THEN
	      STACK_PTR = STACK_PTR+1		! we must stack the
	      STACK(L,STACK_PTR) = LEFT		! rest of the left
	      STACK(R,STACK_PTR) = J		! side, do it later
	   ENDIF
	   LEFT = I			! we're sorting the right side
C
	ENDIF
C
C if the new partition we've defined is not empty (ie if the LEFT side
C of it is below the RIGHT!), then we jump back up to sort it
C
	IF ( LEFT.LT.RIGHT ) GOTO 20	! sort this new partition
C
C otherwise, if we have any 'request's on the stack, we jump up to
C unload a partition which has yet to be sorted
C
	IF ( STACK_PTR.NE.0 ) GOTO 10	! still have 'requests' left
C
C and finally, if none of those, then we have finished sorting
C
	RETURN
	END
