C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1984-12-13 11:58:26.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE HEAP_SORT( TABLE, COUNT, CF, COPY, STORE )
C
***	MODULE HEAP_SORT
***	IDENT 13DE84
C
	IMPLICIT NONE
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England
C
C Coded from Knuth (see below)
C
C Coded by TJ Ibbs,	 7 November 1984
C
C Heapsort
C
C To sort table into order defined by routine supplied by caller
C using Heapsort (for explanation/discussion of Heapsort, see
C
C	Knuth - The Art of Computer Programming,  vol 3, p145 sqq
C	Wirth - Algorithms + Data Structures = Programs, p73  sqq
C
C Comments: average and worst cases take about the same time
C	    takes about twice the average time of Quicksort
C	    equal keys will be swapped
C
C This sort works by creating a HEAP - an ordered tree of data,
C for instance
C
C			e1
C		e2		e3
C	   e4	    e5	   e6	    e7
C
C such that e(j/1) >= ej for 1 <= (j/2) < j <= COUNT
C
C ie   e1 >= e2,   e1 >= e3,   e2 >= e4,   etc
C
C This can then be traversed to determine the correct sorting
C
C Thus this algorithm first rearranges the data into a heap, and
C then repeatedly remove the top of the heap and transfer it to its
C proper final position
C
C Arguments
C
	INTEGER*4	TABLE
	INTEGER*2	COUNT
	INTEGER*4	CF
C	.........	COPY
	INTEGER*4	STORE
C
C TABLE	is the address of the array to be sorted - we don't need to
C	know what sort of array, because we only pass it down to CF
C	and SWAP - it might be CHARACTER*(*), or REAL(200,2), etc
C
C COUNT	is the number of elements in TABLE
C
C CF	is a longword function to compare two elements
C
C		CF( TABLE, index1, TABLE, index2 )
C	   or	CF( TABLE, index1, STORE, 1 )
C	   or	CF( STORE, 1,      TABLE, index2 )
C
C	returns	-1 if  element 'index1' < element 'index2'
C		 0 if			=
C		+1 if			>
C
C COPY	is a routine to copy an element of TABLE from somewhere to
C	somewhere else
C
C		COPY( TABLE, index1, TABLE, index2 )
C	  or	COPY( TABLE, index1, STORE, 1 )
C	  or	COPY( STORE, 1       TABLE, index2 )
C
C STORE	is a single element version of TABLE, used to temporarily
C	remember one element from TABLE
C
C
C workspace
C
	INTEGER*4	LEFT, RIGHT	! left and right partitions
	INTEGER*4	I, J		! similar to the above
C
C initialise - start by considering the right hand half of the data
C
	LEFT  = (COUNT/2)+1
	RIGHT = COUNT
C
C LOOP 20 - decrease LEFT or RIGHT
C
C if LEFT has not yet reached the left hand end (ie 1), then we move it
C down by one, and store the LEFTmost value
C
C otherwise, we have scanned leftwards as far as we can go, so we move
C the RIGHT pointer down one, having placed the STOREd value in its
C correct place
C
20	IF ( LEFT.GT.1 ) THEN
	   LEFT = LEFT-1			! move left
	   CALL COPY( TABLE, LEFT, STORE, 1 )	! store LEFT value
	ELSE
	   CALL COPY( TABLE,RIGHT,STORE,1 )	! store RIGHT value
	   CALL COPY( TABLE,1,    TABLE,RIGHT )
	   RIGHT = RIGHT-1
C
	   IF ( RIGHT.EQ.1 ) THEN
	      CALL COPY( STORE,1,TABLE,1 )	! last value in STORE
	      RETURN				! all sorted
	   ENDIF
C
	ENDIF
C
C initialisation for sifting the heap - we sift the partition into a
C heap, starting with the left hand end of it
C
	J = LEFT
C
C LOOP 4 - sifting the heap
C
40	I = J
	J = 2*J
C
	IF ( J.LE.RIGHT ) THEN
C
C	 we're still in the partition
C	 if we're before RIGHT, and TABLE(J) < TABLE(J+!), then
C	 increment our J value
C
	   IF ( J.LT.RIGHT ) THEN
	      IF ( CF(TABLE,J,TABLE,J+1).LT.0 ) J = J+1
	   ENDIF
C
C	 is STORE < TABLE(J)
C
	   IF ( CF(STORE,1,TABLE,J).LT.0 ) THEN
	      CALL COPY( TABLE, J, TABLE, I )	! move it upwards
	      GOTO 40				! advance downwards
	   ENDIF
C
	ENDIF
C
	CALL COPY( STORE, 1, TABLE, I )
	GOTO 20
C
C
	END
