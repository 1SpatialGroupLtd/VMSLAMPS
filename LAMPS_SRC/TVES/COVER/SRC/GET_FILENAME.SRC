C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-07-20 11:42:48.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION GET_FILENAME (NAME,NAME_LENGTH,
     &                   AGAINST_DTI,AGAINST_DTM)
C
***	IDENT	20JL89
***	MODULE	GET_FILENAME
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C	Author    : D R Catlow
C	Created   : 23 May 1987
C	Modified  : 11 Oct 1987
C
CMOD	parse against input DTI file if AGAINST_DTM is true
CMOD	fix bug which caused invalid default file-spec  MWSR 20-Jul-1989
C	
C	Routine for COVER to get the filename, taking
C	into account any quotes, and parse against the appropriate
C	default.  
C	Possible defaults are LSL$DTI:.VIS if AGAINST_DTI is false
C	or LSL$DTI:.DTI if AGAINST_DTI is true.
C	Parsed filename is returned in NAME
C
C	Function returns true in event of failure.
C
	IMPLICIT NONE
C
C	Arguments:
	CHARACTER*80	NAME		!Parsed filename
	INTEGER*2	NAME_LENGTH	!Length of filename (returned)
	LOGICAL		AGAINST_DTI	!extension DTI or VIS?
	LOGICAL		AGAINST_DTM	!extension DTM
C
***	COMMON/LSL$CMNLSL:READSTR.PAR/
***	COMMON/HERE:COVER/
***	COMMON/LSL$CMNDTI:DTIHDR/
C
C
C	Local:
	INTEGER*4	RETVAL		!return value
	INTEGER*4	FAKSTR(2)	!fake string descriptor
	INTEGER*2	FAKLEN		!length of fake string descriptor
	BYTE		FAKBUF(80)	!temp. byte buffer
	BYTE		CH		!single character
	CHARACTER*80	PARSE_NAME	! thing to parse against
	INTEGER*4	PARSE_NAME_LENGTH
	INTEGER*4	POS_DOT		! position of dot
	INTEGER*4	SAV_DOT		! position of last dot
C
	EQUIVALENCE	(FAKLEN,FAKSTR(1))
C
C LSLLIB functions
	INTEGER*4	READSTR		! read string
	LOGICAL		PARFILN		! parse filename
	LOGICAL		RDCHS		! read character
C
C***********************************************************************
C
	GET_FILENAME=.TRUE.	! assume success
C
	FAKSTR(2)=%LOC(FAKBUF)	! set up fake string descriptor
C
C	Check for optional quotes around the filename
	IF(RDCHS(CH))THEN
	  CALL WRITEF('%S DTI filename missing',ERROR_BELL)
	  CALL BSLN
	  GET_FILENAME=.FALSE.
	  GOTO 999	  
	ELSE
	  FAKLEN=128
	  IF(CH.EQ.34.OR.CH.EQ.39)THEN
	    FAKLEN=READSTR(FAKSTR,CH,ON_CHAR2,.FALSE.)
	  ELSE
	    CALL BSCH
	    FAKLEN=READSTR(FAKSTR,' ',ON_CHAR2,.FALSE.)
	  ENDIF
	ENDIF
C
C	Parse filename against input DTM
	IF(AGAINST_DTM)THEN
	  SAV_DOT = 0
10	  POS_DOT = INDEX(DTI_NAME(1)(SAV_DOT+1:),'.')
	  IF (POS_DOT .NE. 0) THEN
	     SAV_DOT = POS_DOT+SAV_DOT
	     GOTO 10
	  ENDIF
	  PARSE_NAME=DTI_NAME(1)(1:SAV_DOT)//'VIS;0'
	  PARSE_NAME_LENGTH=SAV_DOT+5
	ELSE
	   PARSE_NAME = 'LSL$DTI:.VIS'
	   PARSE_NAME_LENGTH = 12
	ENDIF
C
C	Parse filename against appropriate default
	IF(AGAINST_DTI)THEN
	  RETVAL=PARFILN(NAME,
     &                   NAME_LENGTH,
     &	                 FAKSTR,
     &	                 'LSL$DTI:.DTI',
     &	                 .TRUE.)
	  IF(.NOT.RETVAL)THEN
	    CALL LSL_PUTMSG(RETVAL)
	    GET_FILENAME=.FALSE.
	    GOTO 999			!return
	  ENDIF
	ELSE	
	  RETVAL=PARFILN(NAME,
     &                   NAME_LENGTH,
     &	                 FAKSTR,
     &	                 PARSE_NAME(1:PARSE_NAME_LENGTH),
     &	                 .TRUE.)
	  IF(.NOT.RETVAL)THEN
	    CALL LSL_PUTMSG(RETVAL)
	    GET_FILENAME=.FALSE.
	    GOTO 999			!return
	  ENDIF
	ENDIF
C
999	RETURN
C
	END
