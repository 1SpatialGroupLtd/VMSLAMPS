C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-09-06 20:33:32.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION CREATE_FILE(DTILUN,XSIZE,YSIZE,INITIALISE)
C
***	IDENT	06SE91
***	MODULE	CREATE_FILE
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C	Author    : D R Catlow
C	Created   : 08OC87 - based on COVER routine OPNMAT
CMOD	DRC 22NO88  To ensure any projection record is copied from
C	the input matrix to the output matrix, and suitably
C	modified
CMOD	doesn't call GET_FILENAME for dtilun =3	 MWSR  20-Jan-1989
C	
C	Routine for COVER to create an output intervisibility matrix
C	of dimensions XSIZE by YSIZE.
C
C	An ALVY type DTI file is created and the
C	header of the file contains information on matrix extent,
C	matrix grid size, and number of observers (max height).
C
C	If DTILUN = 5 a temporary visibility matrix is created
C	with the name 'VISBLE.TMP'.
C	If DTILUN = 6 the display file is opened, and there is no
C	need to parse the filename, and the data area is not
C	initialised.
C	If DTILUN equals anything else, then the filename is first
C	parsed using routine GET_FILENAME.
C
C	Routine also initialises the matrix by call to DTI_INIT_DATA
C
C--------------------------------------------------------------------------
C
	IMPLICIT NONE
C
C 	DTILIB commons
***	COMMON/LSL$CMNDTI:DTIHDR/
***	COMMON/LSL$CMNDTI:DTIPROJ/
***	PARAMETER/LSL$CMNDTI:DTIPAR/
***	PARAMETER/LSL$CMNDTI:DTILIBMSG/
C
***	COMMON/HERE:COVER /
***	COMMON/HERE:OBSERVER/
***	COMMON/HERE:DRWCMN/
C
C 	arguments:
	INTEGER*4	DTILUN		! LUN for DTI file
	INTEGER*4	XSIZE		! number of columns
	INTEGER*4	YSIZE		! number of rows
	LOGICAL		INITIALISE	! if .T. initialise data area
C					! with value of -1
C
C	locals:
	INTEGER*4	I		! counter
	INTEGER*4	RETVAL		! function return
	INTEGER*4	ERROR		! System error code
C
C 	functions:
	INTEGER*4	DTI_CREATE	! to create and map a DTI file
	INTEGER*4	DTI_INIT_WORD_DATA	!to initialise data area
	INTEGER*4	DTI_WRITE_PROJ_REC	!to write proj record
	LOGICAL		GET_FILENAME
C
C****************************************************************************
C
	CREATE_FILE=.FALSE.	!assume failure
C
C---------------------------------------------------------------------------
C Do we need to parse the filename?
C
	IF(DTILUN.EQ.6)THEN
	   IF(.NOT.GET_FILENAME(DTI_NAME(DTILUN),
     &                       DTI_NAME_LENGTH(DTILUN),
     &                       .TRUE.,.FALSE.))GOTO 999
	   GOTO 100
C
C If DTILUN is 3, then parse against input DTM
C
	ELSEIF(DTILUN.EQ.3)THEN
	   DTI_NAME(DTILUN) = VIS_NAME
	   DTI_NAME_LENGTH(DTILUN) = VIS_NAME_LENGTH 
	   GOTO 100
C
C If DTILUN is 5, then create a temporary visibility file
C
	ELSEIF (DTILUN.EQ.5) THEN
	  DTI_NAME(DTILUN)='LSL$DTI:VISBLE.TMP'
	  DTI_NAME_LENGTH(DTILUN)=18
	  GOTO 100
	ENDIF
C
	IF (.NOT.GET_FILENAME(DTI_NAME(DTILUN),
     &                    DTI_NAME_LENGTH(DTILUN),
     &                    .FALSE.,.FALSE.))GOTO 999
C
C Create and map the file
C Set up header length of output matrix
C
100	IF(HAD_PROJ_RECORD(1))THEN
	  DATA_OFFSET(DTILUN)=DTIPROJ_RECORD_LENGTH+512
	ELSE
	  DATA_OFFSET(DTILUN)=512
	ENDIF
C
	RETVAL=DTI_CREATE(DTILUN,
     &                    DTI_NAME(DTILUN),	  
     &                    DTI_NAME_LENGTH(DTILUN),
     &                    DTI_LSLA,
     &                    DATA_OFFSET(DTILUN),
     &                    DATA_WORD,
     &                    XSIZE,
     &                    YSIZE,
     &                    ERROR)
	IF(RETVAL.NE.DTI__NORMAL)THEN
	   CALL LSL_PUTMSG(RETVAL)
	   IF(RETVAL.EQ.DTI__SYSERR)CALL LSL_PUTMSG(ERROR)
	   GOTO 999
	ENDIF
C
C----------------------------------------------------------------------
C If input file has a proj rec., then
C copy to output matrix, and modify origin as necessary
C
	IF(HAD_PROJ_RECORD(1))THEN
	  DTIPROJ_RECORD_OFFSET(DTILUN)=512
C	  
	  DTIPROJ_ORIGIN(1,DTILUN)=
     &    DTIPROJ_ORIGIN(1,1)+(DTI_WINDOW_SWX(1)-1)*X_GRID(1)
	  DTIPROJ_ORIGIN(2,DTILUN)=
     &    DTIPROJ_ORIGIN(2,1)+(DTI_WINDOW_SWY(1)-1)*Y_GRID(1)
	  DTIPROJ_SAMPLE(1,DTILUN)=DTIPROJ_SAMPLE(1,1)	 
	  DTIPROJ_SAMPLE(2,DTILUN)=DTIPROJ_SAMPLE(2,1)	 
	  DTIPROJ_UNITS(DTILUN)   =DTIPROJ_UNITS(1)
	  DTIPROJ_SPHEROID(DTILUN)=DTIPROJ_SPHEROID(1)
	  DTIPROJ_PROJECTION(DTILUN)=DTIPROJ_PROJECTION(1)
	  DTIPROJ_USER_SPHEROID(1,DTILUN)=
     &    DTIPROJ_USER_SPHEROID(1,1)
	  DTIPROJ_USER_SPHEROID(2,DTILUN)=
     &    DTIPROJ_USER_SPHEROID(2,1)
	  DO 700 I=1,15
	     DTIPROJ_PROJ_PARAMS(I,DTILUN)=
     &       DTIPROJ_PROJ_PARAMS(I,1)
700	  CONTINUE
C
	  RETVAL=DTI_WRITE_PROJ_REC(DTILUN,,ERROR)
	  IF(RETVAL.NE.DTI__NORMAL)THEN
	    CALL LSL_PUTMSG(RETVAL)
	    IF(RETVAL.EQ.DTI__SYSERR)CALL LSL_PUTMSG(ERROR)
	    GOTO 999
	  ENDIF
	ENDIF
C	
C-------------------------------------------------------------------
C Initialise matrix to -1
C
	IF(INITIALISE)THEN
	  RETVAL=DTI_INIT_WORD_DATA(DTILUN,-1,,,,)
	  IF(RETVAL.NE.DTI__NORMAL)THEN
	    CALL LSL_PUTMSG(RETVAL)
	    GOTO 999
	  ENDIF
	ENDIF
C
	CREATE_FILE=.TRUE.
C
C---------------------------------------------------------------------------
999	RETURN
	END
C
