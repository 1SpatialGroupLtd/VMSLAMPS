	SUBROUTINE DISPLAY(OPEN)
C
***	MODULE DISPLAY
***	IDENT  18FE93
C
C	Copyright Laser-Scan Ltd., Cambridge, England
C	Author   : D R Catlow 
C	Created  : August 1985
C	Modified : 08OC87 for use with DTILIB and LSLLIB
C                  09AU90 to fix bug caused by unset NUMBER_PIXELS
C		   when the display matrix was larger than the
C		   screen area, PP
C
C	Routine to draw matrix opened on DTILUN on a graphics
C	device , or write display values to a DTI file.
C	The graphics device is initialised and cleared if necessary
C
	IMPLICIT NONE
C
C	Arguments:
	LOGICAL		OPEN		!display matrix already
C					!mapped?
C
***	COMMON/HERE:GKS/
***	PARAMETER/HERE:GKSPAR/
C
***	COMMON/LSL$CMNDTI:DTIHDR/
***	PARAMETER/LSL$CMNDTI:DTIPAR/
***	PARAMETER/LSL$CMNDTI:DTILIBMSG/
C
***	COMMON/HERE:DRWCMN/		!drawing values
***	COMMON/HERE:OBSERVER/		!contains SELOBS
***	COMMON/HERE:DISPLY/		!observer details for
C					!display image
***	COMMON/HERE:COVER/		!display offsets
C
C	Locals:
	INTEGER*4	YPOS		!Y drawing position
	INTEGER*4	XPOS		!X drawing position
	INTEGER*4	COL_COUNT	!output DTI COLs
	REAL		CONE_LEFT
	REAL		CONE_RIGHT
	INTEGER*4	RETVAL		!function return
	INTEGER*4	ERROR		!system error code
	INTEGER*4	COL		!COL counter
	INTEGER*4	ROW		!row counter
	INTEGER*4	NUMBER		!number of obs selected
	INTEGER*4	DIS_SIZE(2)	!matrix display area size
	INTEGER*4	DTILUN		!which matrix
	INTEGER*4	HEADER_OFFSET	!obs details offset in
C					!matrix header
	INTEGER*4	SHEET_OFFSET
	INTEGER*4	I,N		!counters
	INTEGER*4	SF		!pixel enlargement factor
	INTEGER*4	NUMBER_PIXELS	!number of pixels to write
	INTEGER*2	COL_INDEX	!colour index
	INTEGER*2	COUNT
	INTEGER*2	CELL		
C
	LOGICAL		DRAW		!to annotate or not?
C
C	Functions called:
	LOGICAL		DISPLAY_INIT	!to initialise the display
	INTEGER*4	DTI_CLOSE	!close a DTI file
	INTEGER*4	DTI_READ_WORD_DATA	!read a data value
	INTEGER*4	DTI_READ_WORD_HEADER	!read word from header
	INTEGER*4	DTI_READ_REAL_HEADER	!read REAL*4 from header
	INTEGER*4	DTI_MINMAX_DATA	!determines min/max data value
C
	LOGICAL		DISPLAY_INSIDE		!test if node is inside cone
	LOGICAL		OPEN_FILE	!open a matrix
	LOGICAL		CREATE_FILE	!create a matrix
C
C************************************************************************
C
	IF(.NOT.(PLOT_GRAPHICS.OR.PLOT_DTI))GOTO 999
C
	DTILUN=2
C
	IF(OPEN)GOTO 30
C
C	Close any existing display file
	IF(MAP_DISPLAY)THEN
	  MAP_DISPLAY=.FALSE.
	  RETVAL=DTI_CLOSE(DTILUN,.FALSE.,.FALSE.,ERROR)
	  IF(RETVAL.NE.DTI__NORMAL)THEN
            CALL LSL_PUTMSG(RETVAL)
	    IF(RETVAL.EQ.DTI__SYSERR)CALL LSL_PUTMSG(ERROR)
	    GOTO 999
	  ENDIF
	ENDIF
C
C	Open the display file
	IF(.NOT.OPEN_FILE(DTILUN))GOTO 999
C
C	Read in observer details from header
C	Initialise HAD_D_OBSERVERS array
30	DO 40 I=1,8
	   HAD_D_OBSERVERS(I)=.FALSE.
40	CONTINUE
C
C	If input file is a MIKE type header, then its an old
C	style visibility grid with different offset values.
C	A file with the new style is always created.
	IF(HEADER_TYPE(DTILUN).EQ.DTI_MIKE)THEN
	  HEADER_OFFSET=0
	ELSE
	  HEADER_OFFSET=16
	ENDIF
	DO 70 I=1,8
	   HEADER_OFFSET=HEADER_OFFSET+24
C
	   IF(.NOT.SELOBS(I))GOTO 70
C
	   RETVAL=DTI_READ_REAL_HEADER(DTILUN,
     &            CON_D_OBSERVERS(I),HEADER_OFFSET+8,ERROR)
	   IF(RETVAL.NE.DTI__NORMAL)THEN
	     CALL LSL_PUTMSG(RETVAL)
	     IF(RETVAL.EQ.DTI__SYSERR)CALL LSL_PUTMSG(ERROR)
	     GOTO 999
	   ENDIF
	   IF(CON_D_OBSERVERS(I).EQ.0)GOTO 70	!though selected,
C
C	   this observer was not used in the cover map generation
	   RETVAL=DTI_READ_WORD_HEADER(DTILUN,
     &            DTI_D_OBSERVERS(I,1),HEADER_OFFSET,ERROR)
	   IF(RETVAL.NE.DTI__NORMAL)THEN
	     CALL LSL_PUTMSG(RETVAL)
	     IF(RETVAL.EQ.DTI__SYSERR)CALL LSL_PUTMSG(ERROR)
	     GOTO 999
	   ENDIF
C
	   RETVAL=DTI_READ_WORD_HEADER(DTILUN,
     &            DTI_D_OBSERVERS(I,2),HEADER_OFFSET+2,ERROR)
	   IF(RETVAL.NE.DTI__NORMAL)THEN
	     CALL LSL_PUTMSG(RETVAL)
	     IF(RETVAL.EQ.DTI__SYSERR)CALL LSL_PUTMSG(ERROR)
	     GOTO 999
	   ENDIF
C
	   POS_D_OBSERVERS(I,1)=DTI_D_OBSERVERS(I,1)*X_GRID(DTILUN)
	   POS_D_OBSERVERS(I,2)=DTI_D_OBSERVERS(I,2)*Y_GRID(DTILUN)
C
	   RETVAL=DTI_READ_REAL_HEADER(DTILUN,
     &            POS_D_OBSERVERS(I,3),HEADER_OFFSET+4,ERROR)
	   IF(RETVAL.NE.DTI__NORMAL)THEN
	     CALL LSL_PUTMSG(RETVAL)
	     IF(RETVAL.EQ.DTI__SYSERR)CALL LSL_PUTMSG(ERROR)
	     GOTO 999
	   ENDIF
C
	   RETVAL=DTI_READ_REAL_HEADER(DTILUN,
     &            DIR_D_OBSERVERS(I),HEADER_OFFSET+12,ERROR)
	   IF(RETVAL.NE.DTI__NORMAL)THEN
	     CALL LSL_PUTMSG(RETVAL)
	     IF(RETVAL.EQ.DTI__SYSERR)CALL LSL_PUTMSG(ERROR)
	     GOTO 999
	   ENDIF
C
	   RETVAL=DTI_READ_REAL_HEADER(DTILUN,
     &            DIS_D_OBSERVERS(I,1),HEADER_OFFSET+16,ERROR)
	   IF(RETVAL.NE.DTI__NORMAL)THEN
	     CALL LSL_PUTMSG(RETVAL)
	     IF(RETVAL.EQ.DTI__SYSERR)CALL LSL_PUTMSG(ERROR)
	     GOTO 999
	   ENDIF
C
	   RETVAL=DTI_READ_REAL_HEADER(DTILUN,
     &            DIS_D_OBSERVERS(I,2),HEADER_OFFSET+20,ERROR)
	   IF(RETVAL.NE.DTI__NORMAL)THEN
	     CALL LSL_PUTMSG(RETVAL)
	     IF(RETVAL.EQ.DTI__SYSERR)CALL LSL_PUTMSG(ERROR)
	     GOTO 999
	   ENDIF
C
	   HAD_D_OBSERVERS(I)=.TRUE.
C		   
70	CONTINUE
C
C--------------------------------------------------------------------------
C	and any sheet details
C	These are stored in the header at byte offset 220 onwards
C	in an old style visibility map, and at byte offset 280 
C	in a new style cover map.
	IF(HEADER_TYPE(DTILUN).EQ.DTI_MIKE)THEN
	  SHEET_OFFSET=220
	ELSE
	  SHEET_OFFSET=280
	ENDIF
C
C	Lat origin value in tenths of seconds
        RETVAL=DTI_READ_REAL_HEADER(DTILUN,
     &         LATREC(1,DTILUN),SHEET_OFFSET,ERROR)
	IF(RETVAL.NE.DTI__NORMAL)THEN
	  CALL LSL_PUTMSG(RETVAL)
	  IF(RETVAL.EQ.DTI__SYSERR)CALL LSL_PUTMSG(ERROR)
	  GOTO 999
	ENDIF
C	
C	Lon origin value in tenths of seconds
        RETVAL=DTI_READ_REAL_HEADER(DTILUN,
     &         LONREC(1,DTILUN),SHEET_OFFSET+4,ERROR)
	IF(RETVAL.NE.DTI__NORMAL)THEN
	  CALL LSL_PUTMSG(RETVAL)
	  IF(RETVAL.EQ.DTI__SYSERR)CALL LSL_PUTMSG(ERROR)
	  GOTO 999
	ENDIF
C
C	Lat interval in tenths of seconds
        RETVAL=DTI_READ_REAL_HEADER(DTILUN,
     &         LATINT(DTILUN),SHEET_OFFSET+8,ERROR)
	IF(RETVAL.NE.DTI__NORMAL)THEN
	  CALL LSL_PUTMSG(RETVAL)
	  IF(RETVAL.EQ.DTI__SYSERR)CALL LSL_PUTMSG(ERROR)
	  GOTO 999
	ENDIF
C
C	Lon interval in tenths of seconds
        RETVAL=DTI_READ_REAL_HEADER(DTILUN,
     &         LONINT(DTILUN),SHEET_OFFSET+12,ERROR)
	IF(RETVAL.NE.DTI__NORMAL)THEN
	  CALL LSL_PUTMSG(RETVAL)
	  IF(RETVAL.EQ.DTI__SYSERR)CALL LSL_PUTMSG(ERROR)
	  GOTO 999
	ENDIF
C
C	Matrix offset values
        RETVAL=DTI_READ_WORD_HEADER(DTILUN,
     &         DISPLAY_XOFFSET,SHEET_OFFSET+16,ERROR)
	IF(RETVAL.NE.DTI__NORMAL)THEN
	  CALL LSL_PUTMSG(RETVAL)
	  IF(RETVAL.EQ.DTI__SYSERR)CALL LSL_PUTMSG(ERROR)
	  GOTO 999
	ENDIF
C
        RETVAL=DTI_READ_WORD_HEADER(DTILUN,
     &         DISPLAY_YOFFSET,SHEET_OFFSET+18,ERROR)
	IF(RETVAL.NE.DTI__NORMAL)THEN
	  CALL LSL_PUTMSG(RETVAL)
	  IF(RETVAL.EQ.DTI__SYSERR)CALL LSL_PUTMSG(ERROR)
	  GOTO 999
	ENDIF
C
C--------------------------------------------------------------------------
C
	IF(PLOT_GRAPHICS)THEN
	  IF(.NOT.INIT_GRAPHICS)THEN
	    IF(.NOT.DISPLAY_INIT())THEN
	      INIT_GRAPHICS=.FALSE.
	      GOTO 999
	    ELSE
 	      INIT_GRAPHICS=.TRUE.
	    ENDIF
	  ENDIF
C
C	Clear workstation
80 	  CALL GCLRWK(WKID,GALWAY)
C
C	Work out position of SW corner of image on display device.
C	The image is always positioned about the centre of the screen.
C	The image is scaled by an integer to fill as much of the
C	image area as possible. 
C
	  DIS_SIZE(1)=RASTSZ(1)-100
	  DIS_SIZE(2)=RASTSZ(2)-200
C
C	Check if the display matrix is larger than the screen area
	  IF(X_EXTENT(DTILUN).GT.RASTSZ(1).OR.
     &       Y_EXTENT(DTILUN).GT.RASTSZ(2))THEN
	    CALL WRITEF
     &  ('WARNING Cover Matrix too large for display')
	    CALL WRITEF
     &  ('Image will be truncated, legend and text is disabled')
	    SF=1
	    DRAW=.FALSE.
	    SIGSWX=1
	    SIGSWY=1
	    XPOS=SIGSWX
	    YPOS=SIGSWY
	    GOTO 90
	  ENDIF	  
C
C	Check if the display matrix is larger than the display area
	  IF(X_EXTENT(DTILUN).GT.DIS_SIZE(1).OR.
     &       Y_EXTENT(DTILUN).GT.DIS_SIZE(2))THEN
	     SF=1
	     DRAW=.FALSE.	   	   
	     SIGSWX=((RASTSZ(1)*0.5)-(X_EXTENT(DTILUN)/2))!place in centre
	     SIGSWY=((RASTSZ(2)*0.5)-(Y_EXTENT(DTILUN)/2))!of screen
	     XPOS  =SIGSWX		!initial drawing position
	     YPOS  =SIGSWY
	     CALL WRITEF
     &       ('WARNING Matrix too large to display with legend or text')
	     CALL WRITEF
     &	     ('Legend and text is disabled')
	     GOTO 90
	  ENDIF
C	
C	Calculate magnification factor
	  SF=1				!no enlargement
	  DRAW=.TRUE.
	  DO 50 N=2,100
	     IF((X_EXTENT(DTILUN)*N).GT.DIS_SIZE(1))GOTO 60
	     IF((Y_EXTENT(DTILUN)*N).GT.DIS_SIZE(2))GOTO 60
	     SF=SF+1
50	  CONTINUE

60	  SIGSWX=( ((RASTSZ(1)*0.5)+50)-
     &     	 ((X_EXTENT(DTILUN)*SF)*0.5) )	!place in centre
	  SIGSWY=( ((RASTSZ(2)*0.5)+100)-
     &           ((Y_EXTENT(DTILUN)*SF)*0.5) )	!of screen
	  XPOS  =SIGSWX		!initial drawing position
	  YPOS  =SIGSWY 
C
	  IF(DRAW)CALL LEGEND !to output legend 
	ENDIF
C
	IF(PLOT_DTI)THEN
	  IF(.NOT.CREATE_FILE(6,X_EXTENT(2),Y_EXTENT(2),.FALSE.))THEN
	     CALL WRITEF
     & ('ERROR Creating output DTI file')
	     CALL WRITEF
     & ('Output to DTI file is disabled')
	     PLOT_DTI=.FALSE.
	  ELSE
C	Transfer grid interval values
	     X_GRID(6)=X_GRID(2)
	     Y_GRID(6)=Y_GRID(2)	     
	     COL_COUNT=1	     
	  ENDIF
	ENDIF	   
C
90	CALL LSG_ROTATION_MODE(WKID,.TRUE.)	! S and N are rotated
C
	NUMBER_PIXELS=MIN(1024,Y_EXTENT(DTILUN))	
C	Main loop...				! 90 used to be here,pp
	DO 300 COL=1,MIN(1024,X_EXTENT(DTILUN))	 
C
	   DO 200 ROW=1,NUMBER_PIXELS
C
	      RETVAL=DTI_READ_WORD_DATA(DTILUN,CELL,COL,ROW)
	      IF(.NOT.RETVAL)THEN
                CALL LSL_PUTMSG(RETVAL)
	        GOTO 999
	      ENDIF
C
	      IF(CELL.EQ.-1)THEN	!outside cones of vision
		COLOUR(ROW)=1	
	        GOTO 200
	      ENDIF
C
	      COUNT=0		!count of how many observers the cell
C				!is visible to
	      IF(CELL.EQ.0)GOTO 120
C
	      DO 100 I=1,8
	        IF(.NOT.SELOBS(I))GOTO 100	!observer not selected
		IF(.NOT.HAD_D_OBSERVERS(I))GOTO 100
C	Test if appropriate bit is set
	        IF(BTEST(CELL,I-1))THEN		!yes	
		  COUNT=COUNT+1		
	        ENDIF
100	      CONTINUE
C
	      IF(COUNT.EQ.0)THEN    !not visible to any of the selected
C	!observers. Is this because the cell is outside all their cones
C	!of vision?
120	        DO 150 I=1,8
	          IF(.NOT.SELOBS(I))GOTO 150
C
		  CONE_LEFT=DIR_D_OBSERVERS(I)-(CON_D_OBSERVERS(I)*0.5)
	          IF(CONE_LEFT.LE.0.0)THEN
	             CONE_LEFT=CONE_LEFT+360.0
	          ENDIF
C
		  CONE_RIGHT=DIR_D_OBSERVERS(I)+(CON_D_OBSERVERS(I)*0.5)
	          IF(CONE_RIGHT.GT.360.0)THEN
	             CONE_RIGHT=CONE_RIGHT-360.0
	          ENDIF
C
		  IF(DISPLAY_INSIDE(COL,ROW,I,
     &               CONE_LEFT,CONE_RIGHT,DTILUN))THEN
C	!inside at least 1 cone of vision, so really not visible
	            COLOUR(ROW)=2
	            GOTO 200
	          ENDIF
150	        CONTINUE
C	!outside all cones of vision
	        COLOUR(ROW)=1	
	        GOTO 200
	      ENDIF
C	
C	set colour according to how many observers can see the cell
	      COLOUR(ROW)=COUNT+2
C
200	   CONTINUE
C
	   IF (PLOT_GRAPHICS) THEN
C 	Output a row of pixel values
	      CALL LSG_PIXEL_ARRAY(
     &		FLOAT(XPOS),		!start x position
     &          FLOAT(YPOS),		!start y position
     &		NUMBER_PIXELS,			!determines...
     &          -1,			!...drawing direction
     &          1,			!first element
     &          NUMBER_PIXELS,			!last element
     &          1,
     &          1,
     &		SF,			!scaling factor in x
     &		SF,			!scaling factor in y
     &		COLOUR)			!byte data array
C
	   ENDIF	   
C
	   IF(PLOT_DTI)THEN
	      CALL WRITE_COLUMN(COL_COUNT,COLOUR)
	      COL_COUNT=COL_COUNT+1
	   ENDIF
C
	   XPOS=XPOS+SF
C
300	CONTINUE
C
C 	Output observer text and border
	IF (DRAW .AND. PLOT_GRAPHICS) CALL ANNOTATE(SF,DTILUN)
C
C------------------------------------------------------------------------
C 	Close the output DTI file on channel 6
	IF (PLOT_DTI) THEN
	  RETVAL=DTI_MINMAX_DATA(6,.FALSE.,ERROR)
	  IF(RETVAL.NE.DTI__NORMAL)THEN
	    CALL LSL_PUTMSG(RETVAL)
	    IF(RETVAL.EQ.DTI__SYSERR)CALL LSL_PUTMSG(ERROR)
	  ENDIF
C
	  RETVAL=DTI_CLOSE(6,.TRUE.,.TRUE.,ERROR)
	  IF(RETVAL.NE.DTI__NORMAL)THEN
	    CALL LSL_PUTMSG(RETVAL)
	    IF(RETVAL.EQ.DTI__SYSERR)CALL LSL_PUTMSG(ERROR)
	  ENDIF
C
	  PLOT_DTI=.FALSE.
	ENDIF
C
	MAP_DISPLAY=.TRUE.
C--------------------------------------------------------------------------
C	
999	RETURN
C
	END
