	LOGICAL FUNCTION OPEN_FILE(DTI_LUN)
C
***	IDENT	18FE93
***	MODULE	OPEN_FILE
C
C	Copyright : Laser-Scan, Cambridge, England
C	Author    : D R Catlow
C	Modified  : P Pan
C		    to check whether file number 1 exists before
C		    opening its corresponding .MAT file
CMOD1039	  : J Barber				13-Sep-1991
C		    to give warning bell if culture .MAT file has
C		    different extent or origin to input .DTI file
C
	IMPLICIT NONE
C
C------------------------------------------------------------------------
C	Function to open an existing DTI file on the requested DTI_LUN.
C	The routine closes any file currently opened on DTI_LUN.
C	The filename specified on the command line (optionally contained
C	within quotation marks) is parsed against an appropriate default
C	(dependent on DTI_LUN).
C	The routine calls DTI_OPEN to open and map the file.
C	In the case of the input DTM (opened on DTI_LUN = 1), a check is
C	made for the existance of an auxiliary data file.  This data file
C	has the same name as the input DTM, but with an extension of .MAT
C
C	The function returns TRUE if a file is successfully opened, and
C	FALSE if an error has occured.
C
C	Created 20JL87, and is a modified versin of OPNFIL.
C
C-------------------------------------------------------------------------
C	DTILIB commons and parameter files
***	COMMON/LSL$CMNDTI:DTIHDR/
C
***	PARAMETER/LSL$CMNDTI:DTIPAR/
***	PARAMETER/LSL$CMNDTI:DTILIBMSG/
C
C 	LSLLIB parameter files
***	COMMON/LSL$CMNLSL:READSTR.PAR/
***	COMMON/LSL$CMNLSL:LSLLIBMSG.PAR/
C
C	COVER commons
***	COMMON/HERE:COVER/
C
C arguments
	INTEGER*4	DTI_LUN		! channel number
C
C workspace
C
	INTEGER*4	PSDSTR(2)	! Pseudo string descriptor
	INTEGER*4	ERROR		! function system errir code
	INTEGER*4	RETVAL		! function return code
	INTEGER*4	FAKSTR(2)	! fake string
	INTEGER*2	FAKLEN		! fake string length
	BYTE		FAKBUF(128)
	BYTE		CH		! single character
	LOGICAL		IS_TERM
	INTEGER		IERR
	REAL*8		XDIFF,YDIFF,LIM	! for origin differences
C
	EQUIVALENCE	(FAKLEN,FAKSTR(1))
C
C DTILIB functions
	INTEGER*4	DTI_OPEN	! open and map a file
	INTEGER*4	DTI_CLOSE	! to unmap and close a file
	INTEGER*4	DTI_UNITS	! to set default UNITS
	INTEGER*4	DTI_PRINT_HEADER
C
C LSLLIB functions
	INTEGER*4	READSTR		! read string
	LOGICAL		PARFILN		! parse filename
	LOGICAL		RDCHS		! read character
C
C****************************************************************************
C
	OPEN_FILE = .FALSE.	! Assume function is unsuccessful
	IS_TERM   = .FALSE.
C
C Close and unmap any file opened on this channel
C
	IF(DTILUN_INUSE(DTI_LUN))THEN
	  RETVAL = DTI_CLOSE (DTI_LUN, .FALSE., .TRUE., ERROR)	
	  IF(RETVAL.NE.DTI__NORMAL)THEN
	     CALL LSL_PUTMSG(RETVAL)
	     IF(RETVAL.EQ.DTI__SYSERR)CALL LSL_PUTMSG(ERROR)
	     GOTO 999			!return
	  ENDIF	  
	ENDIF
C
	FAKSTR(2)=%LOC(FAKBUF)	! set up fake string descriptor
C
C Check for optional quotes around the filename
C
	IF(RDCHS(CH))THEN
	  CALL WRITEF('%S DTI Filename missing',ERROR_BELL)
	  CALL BSLN
	  GOTO 999	  
	ELSE
	  FAKLEN=128
	  IF(CH.EQ.34.OR.CH.EQ.39)THEN
	    FAKLEN=READSTR(FAKSTR,CH,ON_CHAR2,.FALSE.)
	  ELSE
	    CALL BSCH
	    FAKLEN=READSTR(FAKSTR,' ',ON_CHAR2,.FALSE.)
	  ENDIF
	ENDIF
C
	IF (DTI_LUN.EQ.1)THEN
C
C Parse the input file name against LSL$DTI:.DTI
C
	  RETVAL=PARFILN(DTI_NAME(DTI_LUN),
     &                   DTI_NAME_LENGTH(DTI_LUN),
     &	  	         FAKSTR,
     &		         'LSL$DTI:.DTI',
     &	                 .TRUE.)
	  IF(RETVAL.NE.LSL__NORMAL)THEN
	    CALL LSL_PUTMSG(RETVAL)
	    GOTO 999			!return
	  ENDIF
C
	ELSEIF(DTI_LUN.EQ.7)THEN
C
C Parse the input file name against LSL$DTI:.MAT
C
	  RETVAL=PARFILN(DTI_NAME(DTI_LUN),
     &                   DTI_NAME_LENGTH(DTI_LUN),
     &	  	         FAKSTR,
     &		         'LSL$DTI:.MAT',
     &	                 .TRUE.)
	  IF(RETVAL.NE.LSL__NORMAL)THEN
	    CALL LSL_PUTMSG(RETVAL)
	    GOTO 999			!return
	  ENDIF
	ELSE
C
C Parse the input file name against LSL$DTI:.VIS
C
	  RETVAL=PARFILN(DTI_NAME(DTI_LUN),
     &                   DTI_NAME_LENGTH(DTI_LUN),
     &	  	         FAKSTR,
     &		         'LSL$DTI:.VIS',
     &	                 .TRUE.)
	  IF(RETVAL.NE.LSL__NORMAL)THEN
	    CALL LSL_PUTMSG(RETVAL)
	    GOTO 999			!return
	  ENDIF
	ENDIF
C
C------------------------------------------------------------------------
C Open and map the file
C
	RETVAL = DTI_OPEN (DTI_LUN, 
     &                     DTI_NAME(DTI_LUN), 
     &                     DTI_NAME_LENGTH(DTI_LUN),
     &                     .FALSE.,
     &	                   ERROR)
C
	IF(RETVAL.NE.DTI__NORMAL)THEN
	  CALL LSL_PUTMSG(RETVAL)
	  IF(RETVAL.EQ.DTI__SYSERR)CALL LSL_PUTMSG(ERROR)
	  GOTO 999			!return
	ENDIF
C
C Check for WORD data type - other types not yet allowed
C
	IF (DATA_TYPE(DTI_LUN).NE.DATA_WORD)THEN
	  CALL WRITEF
     &	   ('%S Specifying command FILEIN',ERROR_BELL)
	  CALL WRITEF
     &     ('COVER currently accepts a DTM containing WORD data')
C
C Unmap file and return
C
	  RETVAL = DTI_CLOSE (DTI_LUN, .FALSE., .TRUE., ERROR)	
	  IF(RETVAL.NE.DTI__NORMAL)THEN
	     CALL LSL_PUTMSG(RETVAL)
	     IF(RETVAL.EQ.DTI__SYSERR)CALL LSL_PUTMSG(ERROR)
	  ENDIF
C
	  GOTO 999
	ENDIF
C
C------------------------------------------------------------------------  
C If input DTM, set the defaults UNITS value,
C and print out header details.
C
	IF (DTI_LUN.EQ.1 .OR. DTI_LUN.EQ.2) THEN
C
	  UNITS = 0
	  RETVAL = DTI_UNITS (DTI_LUN,UNITS)
	  IF(.NOT.RETVAL)THEN
	    CALL LSL_PUTMSG(RETVAL)
	    UNITS = 1
	  ENDIF
C
	  IF (DTI_LUN.EQ.1) THEN
	    IERR = DTI_PRINT_HEADER(1,UNITS,ABSOLUTE)
	    IF (.NOT.IERR) CALL LSL_PUTMSG(IERR)
C
C Check that input DTI has same origin and range as any culture file
C
	    IF (HAD_CULFIL) THEN
	      XDIFF = (X_EXTENT(1)-1) * X_GRID(1)
	      YDIFF = (Y_EXTENT(1)-1) * Y_GRID(1)
	      LIM   = ABS(MAX(YDIFF,XDIFF)) / 1E6
C
	      XDIFF = X_OFFSET(1) - X_OFFSET(7)
	      YDIFF = Y_OFFSET(1) - Y_OFFSET(7)
C
	      IF ( (ABS(XDIFF).GT.LIM) .OR. (ABS(YDIFF).GT.LIM) .OR.
     &		   (X_EXTENT(1) .NE. X_EXTENT(7)) .OR.
     &		   (Y_EXTENT(1) .NE. Y_EXTENT(7)) ) THEN
C
C are we on a terminal
	        CALL TEST_TERM('SYS$OUTPUT:',IS_TERM,IERR) 
	        IF (IS_TERM) THEN
	  	  CALL WRITEF
		  CALL WRITEF('%S Origins or extents '//
     &		   'different in input and culture DTI files',WARN_BELL)
		  CALL WRITEF
	        ENDIF
	      ENDIF
C
	    ENDIF
	  ENDIF
C
C only try to open file number 7 (.MAT) if file number 1 exists
C
	  IF (DTI_NAME_LENGTH(1).GT.0) THEN
C
C Also check for associated file containing heights of
C surface features.  By default this has the same filename, but
C extension .MAT
C This auxiliary file is opened on channel 7 (lucky for some!)
C
	    IF (HAD_CULFIL) GOTO 1000
C
C Close any previously opened file
C
	    IF (DTILUN_INUSE(7)) THEN
	      RETVAL = DTI_CLOSE (7, .FALSE., .TRUE., ERROR)	
	      IF(RETVAL.NE.DTI__NORMAL)THEN
	        CALL LSL_PUTMSG(RETVAL)
	        IF(RETVAL.EQ.DTI__SYSERR)CALL LSL_PUTMSG(ERROR)
	        GOTO 999			!return
	      ENDIF	  
	    ENDIF
C
C Set up auxiliary matrix file name
C
	    DTI_NAME(7)=DTI_NAME(1)(1:INDEX(DTI_NAME(1),'.'))//'MAT'
	    DTI_NAME_LENGTH(7)=DTI_NAME_LENGTH(1)
C
C Open the matrix file
C
	    RETVAL = DTI_OPEN (7, 
     &                         DTI_NAME(7), 
     &                         DTI_NAME_LENGTH(7),
     &                         .FALSE.,
     &	                       ERROR)
C
	    IF (RETVAL.NE.DTI__NORMAL) THEN
	      CULTRE = .FALSE.
	      GOTO 1000			!return success
  	    ENDIF
C
	    MAT_XOFFSET=0
	    MAT_YOFFSET=0
	    CULTRE     = .TRUE.
	    HAD_CULFIL = .TRUE.
C
	    CALL WRITEF
	    CALL WRITEF
     &    ('File %S containing surface feature data also opened. %S',
     &    	 DTI_NAME(7)(1:DTI_NAME_LENGTH(7)),BELL)
	    CALL WRITEF('Height information from this file will be used '//
     &		 'unless the command')
	    CALL WRITEF('DISABLE CULTURE is given.')
	    CALL WRITEF(' ')
C
	    XDIFF = (X_EXTENT(1)-1) * X_GRID(1)
	    YDIFF = (Y_EXTENT(1)-1) * Y_GRID(1)
	    LIM   = ABS(MAX(YDIFF,XDIFF)) / 1E6
C
	    XDIFF = X_OFFSET(1) - X_OFFSET(7)
	    YDIFF = Y_OFFSET(1) - Y_OFFSET(7)
C
	    IF ( (ABS(XDIFF).GT.LIM) .OR. (ABS(YDIFF).GT.LIM) .OR.
     &		 (X_EXTENT(1) .NE. X_EXTENT(7)) .OR.
     &		 (Y_EXTENT(1) .NE. Y_EXTENT(7)) ) THEN
C
	      CALL TEST_TERM('SYS$OUTPUT:',IS_TERM,IERR) !are we on a terminal
	      IF (IS_TERM) THEN
		CALL WRITEF
		CALL WRITEF('%S Origins or extents '//
     &		   'different in input and culture DTI files',WARN_BELL)
		CALL WRITEF
	      ENDIF
	    ENDIF
C
          ENDIF
C
	ELSEIF (DTI_LUN.EQ.7) THEN
C
C Check that any culture file has same origin and range as input DTI
C
	  IF (DTILUN_INUSE(1)) THEN
	    XDIFF = (X_EXTENT(1)-1) * X_GRID(1)
	    YDIFF = (Y_EXTENT(1)-1) * Y_GRID(1)
	    LIM   = ABS(MAX(YDIFF,XDIFF)) / 1E6
C
	    XDIFF = X_OFFSET(1) - X_OFFSET(7)
	    YDIFF = Y_OFFSET(1) - Y_OFFSET(7)
C
	    IF ( (ABS(XDIFF).GT.LIM) .OR. (ABS(YDIFF).GT.LIM) .OR.
     &		 (X_EXTENT(1) .NE. X_EXTENT(7)) .OR.
     &		 (Y_EXTENT(1) .NE. Y_EXTENT(7)) ) THEN
C
	      CALL TEST_TERM('SYS$OUTPUT:',IS_TERM,IERR) !are we on a terminal
	      IF (IS_TERM) THEN
		CALL WRITEF
		CALL WRITEF('%S Origins or extents '//
     &		   'different in input and culture DTI files',WARN_BELL)
		CALL WRITEF
	      ENDIF
	    ENDIF
	  ENDIF
C
	  MAT_XOFFSET=0
	  MAT_YOFFSET=0
	  CULTRE     = .TRUE.
	  HAD_CULFIL = .TRUE.
	ENDIF
C
1000	OPEN_FILE=.TRUE.		!signal success
C
999	RETURN
	END
C
