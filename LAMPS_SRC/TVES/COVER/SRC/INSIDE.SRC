C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-02-22 12:35:36.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION INSIDE(X_TARGET,Y_TARGET,OBSERVER,
     &				X_OBSERVER,Y_OBSERVER,OBSERVER_HEIGHT,
     &                          LEFT_CONE,RIGHT_CONE)
C
***	MODULE	INSIDE
***	IDENT	22FE93
C
C	Copyright : Laser-Scan, Cambridge, England
C	Author    : DRC 
C	Created   : October 1985
C
CMOD1189						JB 18-Feb-1993
C	Use REAL's for observer positions to preserve accuracy
C 	NB. Can only use WORD DTI files
C
C	Routine for COVER to test if DTI cell is inside
C	an observer's cone of vision.
C	The routine also calculates various target parameters
C	which are used by routine ENCDPT - these are placed
C	in common block TARGET
C
C	Function returns true if the target point is inside
C	the cone of vision.
C
	IMPLICIT NONE
C
C commons
***	COMMON/LSL$CMNDTI:DTIHDR/
C
***	COMMON/HERE:TARGET/
***	COMMON/HERE:OBSERVER/
C
C arguments:
	INTEGER*4	X_TARGET		! x and y position
	INTEGER*4	Y_TARGET		! of target point
	INTEGER*4	OBSERVER		! observer number
	REAL		X_OBSERVER		! x and y position
	REAL		Y_OBSERVER		! of observer
	REAL		OBSERVER_HEIGHT		! height at observer point
	REAL		LEFT_CONE		! orientation fron north
C						! of cone of vision lefthand
C						! extremity
	REAL		RIGHT_CONE		! righthand extremity
C
C locals:
	REAL		CONE_DISTANCE		! distance from apex to
C						! base of cone
	REAL		CONE_ANGLE		! angle of cone of vision
	REAL		DIFFX			! x and y components
	REAL		DIFFY			! of observer / target vector
	REAL		TEST_DISTANCE		! distance from apext to
C						! base of cone along line
C						! of bearing between observer
C						! and target
	REAL		DTARGET_ANGLE		! elevation angle of target
C						! to observer in degrees
	REAL		TEST_ANGLE		! 
	REAL		TARGET_ORIENTATION	! orientation of target
C						! point in degrees measured
C						! from north
	INTEGER*4	RETVAL			! function return
	INTEGER*2	HEIGHT			! height at DTM node
C
C	parameter:
	REAL		PI			! for radian to degree
C						! conversion
	PARAMETER	(PI=3.141592654)
C
C DTILIB Functions
	INTEGER*4	DTI_READ_WORD_DATA
C
C---------------------------------------------------------------------
C	Assume initially that the point is outside the observer's
C	cone of vision
	INSIDE=.FALSE.
C
C---------------------------------------------------------------------
	CONE_ANGLE=CON_OBSERVERS(OBSERVER)
	CONE_DISTANCE=DIS_OBSERVERS(OBSERVER,2)
C
C---------------------------------------------------------------------
C	Determine x and y components of vector
	DIFFX = X_TARGET-X_OBSERVER
	DIFFY = Y_TARGET-Y_OBSERVER
C
C	If we are actually at the observer point then return
C	immediately.
	IF (DIFFX.EQ.0 .AND. DIFFY.EQ.0) THEN
	  INSIDE=.TRUE.
	  GOTO 999
	ENDIF
C
C---------------------------------------------------------------------
C	Calculate target information
C	Retrieve height of target point
	RETVAL=DTI_READ_WORD_DATA (1,HEIGHT,X_TARGET,Y_TARGET)
	IF (.NOT.RETVAL)THEN
           CALL LSL_PUTMSG(RETVAL)
	   GOTO 999
	ENDIF
C
	IF (HEIGHT.EQ.-32767) GOTO 999
C
	TARGET_HEIGHT=FLOAT(HEIGHT)	!transfer to common variable
C
	DIFFX = DIFFX*X_GRID(1)
	DIFFY = DIFFY*Y_GRID(1)
C	Calculate distance of target point from observer in metres
	TARGET_DISTANCE = SQRT(DIFFX*DIFFX + DIFFY*DIFFY)
C
C	Calculate the angle of the target point from the
C	observation point
	IF (TARGET_HEIGHT.EQ.OBSERVER_HEIGHT)THEN
	   TARGET_ANGLE=0.0		!in radians
	   DTARGET_ANGLE=0.0		!in degrees
	ELSE
	   TARGET_ANGLE = ATAN(ABS(OBSERVER_HEIGHT-TARGET_HEIGHT)
     &                  /TARGET_DISTANCE)	!in radians
	   DTARGET_ANGLE=TARGET_ANGLE*180.0/PI	!in degrees
	   IF(TARGET_HEIGHT.LT.OBSERVER_HEIGHT)TARGET_ANGLE=-TARGET_ANGLE
	ENDIF
C
C-------------------------------------------------------------------------
C	Test distance of target point from observer against cone
C	distance
C
	IF(CONE_DISTANCE.EQ.0.0)GOTO 100
C	If the cone angle is greater than or equal to 180 degrees
C	test distance of target point against radius of viewing area
C
	IF(TARGET_DISTANCE.GT.CONE_DISTANCE)GOTO 999
C
C------------------------------------------------------------------------
C	Does the angle from north of the target point with respect
C	to the observer, lie between the angles define the planimetric
C	extremities of the cone of vision.
C	This eliminates points that lie behind the observer, or points
C	outside the planimetric extremes of the cone.
C	This test is not carried out if a 360 degree sweep around the
C	observer is required.
C
100	IF (CONE_ANGLE.EQ.360) GOTO 900			!INSIDE
C
C	Calculate angle in degrees
	TARGET_ORIENTATION=ATAN2(DIFFX,DIFFY)*180.0/PI
	IF (TARGET_ORIENTATION.LT.0.0)
     &      TARGET_ORIENTATION = TARGET_ORIENTATION+360.0
C
C	Test the target orientation against the extremities of the cone
	IF (RIGHT_CONE.GT.LEFT_CONE) THEN
	  IF (TARGET_ORIENTATION.GE.LEFT_CONE .AND.
     &        TARGET_ORIENTATION.LE.RIGHT_CONE)GOTO 900		!inside
	  GOTO 999						!outside
C
	ELSE
	  IF (TARGET_ORIENTATION.GE.LEFT_CONE)THEN
	    IF (TARGET_ORIENTATION.GT.RIGHT_CONE)GOTO 900	!inside
	  ELSE
	    IF (TARGET_ORIENTATION.LT.RIGHT_CONE)GOTO 900	!inside
	  ENDIF
	ENDIF
C
	GOTO 999						!outide
C
C-------------------------------------------------------------------------
C
900	INSIDE=.TRUE.
C	
999	RETURN
	END
C
