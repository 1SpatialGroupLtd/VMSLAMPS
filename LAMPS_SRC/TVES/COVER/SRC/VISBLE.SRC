C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-04-07 18:25:08.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE VISBLE
C
***	IDENT	07AP93
***	MODULE	VISBLE
C
C	Copyright : Laser-Scan, Cambridge, England
C	Author    : D R Catlow
C
C	Modified  : DRC  11OC85 so that temporary intervisibility
C		    matrices are created for all secondary
C		    observers.  These are later combined with
C		    the primary intervisibility matrix in a bit-wise
C	            manner.
C	Modified  : DRC  14AP86 to calculate extremeties
C		    of area of vision using a quadrant approach
C	Modified  : DRC  09OC87 for use with LSLLIB and DTILIB
CMOD		  : MWSR 19JL89 Stop crash for 0 distance
C
CMOD1189	  : JB 22FE93 Use REAL DTI_OBSERVER to preserve accuracy
C		    of viewing position and aspect
C
C	Routine for COVER to calculate and create a cover matrix.
C
	IMPLICIT NONE
C
***	COMMON/LSL$CMNDTI:DTIHDR/
***	PARAMETER/LSL$CMNDTI:DTILIBMSG/
C
***	COMMON/HERE:COVER /
***	COMMON/HERE:COVQIO/
***	COMMON/HERE:OBSERVER/
C
C locals:
	REAL		X1,Y1		!observer DTI x,y position
	REAL		HGT		!height of observer
	REAL		RAD_ANGLE
	REAL		CONE_RIGHT
	REAL		CONE_LEFT
	REAL		RDIST		!target distance in metres
	REAL		PCENT,LPCENT,PCF!% process completion
	INTEGER*4	X2,Y2		!target column,row
	INTEGER*4	NUMBER_COL	!number columns processed
	INTEGER*4	RETVAL		!function return
	INTEGER*4	ERROR		!system error code
	INTEGER*4	I		!counter
	INTEGER*4	HALF_CONE	
	INTEGER*4	IDIST		!search radius
	INTEGER*4	XDIST,YDIST
	INTEGER*4	XMIN,XMAX	!bounding sqare 
	INTEGER*4	YMIN,YMAX	!max and min values
	INTEGER*4	COL		!x counter
	INTEGER*4	ROW		!y counter
	INTEGER*4	XPOS(2),YPOS(2)
	INTEGER*4	HEADER_OFFSET	!offset of observer details
C					!in DTI header
	INTEGER*4	SHEET_OFFSET	!offset in header of extra
C					!sheet details
	INTEGER*4	NUMBER		!number of observers so
C					!far considered
	INTEGER*4	DTILUN		!variable matrix channel
	INTEGER*4	OUTLUN,TMPLUN
	PARAMETER	(OUTLUN = 3)
	PARAMETER	(TMPLUN = 5)
C
C functions
	INTEGER*4	DTI_CLOSE		!close a DTI file
	INTEGER*4	DTI_MINMAX_DATA		!determines min/max data values
	INTEGER*4	DTI_WRITE_REAL_HEADER	!write real to header
	INTEGER*4	DTI_WRITE_WORD_HEADER	!write word to header
	INTEGER*4	DTI_WRITE_WORD_DATA	!write word to data area
	LOGICAL		INSIDE			!is this cell inside the
C						!observers area of vision?
	LOGICAL		CREATE_FILE		!open matrix on specified LUN
	LOGICAL		VISIBILITY		!function to determine whether
C						!a point is visible
C parameter:
	PARAMETER	PI=3.141592654
C
C************************************************************************
C Set up area of interest to equal defined window
C
	X_MIN=DTI_WINDOW_SWX(1)
	X_MAX=DTI_WINDOW_NEX(1)
	Y_MIN=DTI_WINDOW_SWY(1)
	Y_MAX=DTI_WINDOW_NEY(1)
C
	NUMBER = 0
	DTILUN = OUTLUN
C
	RETVAL = CREATE_FILE(DTILUN,MATSIZ(1),MATSIZ(2),.TRUE.)
	IF (.NOT.RETVAL) GOTO 999
C
C Transfer grid details from input DTM
C These are written to the mapped Visibility Matrix when the matrix
C is closed.
C
	X_GRID(DTILUN)=X_GRID(1)
	Y_GRID(DTILUN)=Y_GRID(1)
C
C However, write the matrix offset and lat/long sheet details 
C to DTI header now
C
	SHEET_OFFSET=280
C
C Lat origin value in tenths of seconds
	RETVAL=DTI_WRITE_REAL_HEADER(DTILUN,
     &	       LATREC(1,1)+((DTI_WINDOW_SWY(1)-1)*LATINT(1)),
     &         SHEET_OFFSET,
     &         ERROR)
	IF(RETVAL.NE.DTI__NORMAL)THEN
	   CALL LSL_PUTMSG(RETVAL)
	   IF (RETVAL.EQ.DTI__SYSERR) CALL LSL_ADDMSG(ERROR)
	   GOTO 999
	ENDIF
C
C Lon origin value in tenths of seconds
	RETVAL=DTI_WRITE_REAL_HEADER(DTILUN,
     &	       LONREC(1,1)+((DTI_WINDOW_SWX(1)-1)*LONINT(1)),
     &         SHEET_OFFSET+4,
     &         ERROR)
	IF(RETVAL.NE.DTI__NORMAL)THEN
	   CALL LSL_PUTMSG(RETVAL)
	   IF (RETVAL.EQ.DTI__SYSERR) CALL LSL_ADDMSG(ERROR)
	   GOTO 999
	ENDIF
C
C Lat interval in tenths of seconds
	RETVAL=DTI_WRITE_REAL_HEADER(DTILUN,
     &	       LATINT(1),
     &         SHEET_OFFSET+8,
     &         ERROR)
	IF(RETVAL.NE.DTI__NORMAL)THEN
	   CALL LSL_PUTMSG(RETVAL)
	   IF (RETVAL.EQ.DTI__SYSERR) CALL LSL_ADDMSG(ERROR)
	   GOTO 999
	ENDIF
C
C Lon interval in tenths of seconds
	RETVAL=DTI_WRITE_REAL_HEADER(DTILUN,
     &	       LONINT(1),
     &         SHEET_OFFSET+12,
     &         ERROR)
	IF(RETVAL.NE.DTI__NORMAL)THEN
	   CALL LSL_PUTMSG(RETVAL)
	   IF (RETVAL.EQ.DTI__SYSERR) CALL LSL_ADDMSG(ERROR)
	   GOTO 999
	ENDIF
C
C X matrix offset
	RETVAL=DTI_WRITE_WORD_HEADER(DTILUN,
     &	       XOFFSET,
     &         SHEET_OFFSET+16,
     &         ERROR)
	IF(RETVAL.NE.DTI__NORMAL)THEN
	   CALL LSL_PUTMSG(RETVAL)
	   IF (RETVAL.EQ.DTI__SYSERR) CALL LSL_ADDMSG(ERROR)
	   GOTO 999
	ENDIF
C
C Y matrix offset
	RETVAL=DTI_WRITE_WORD_HEADER(DTILUN,
     &	       YOFFSET,
     &         SHEET_OFFSET+18,
     &         ERROR)
	IF(RETVAL.NE.DTI__NORMAL)THEN
	   CALL LSL_PUTMSG(RETVAL)
	   IF (RETVAL.EQ.DTI__SYSERR) CALL LSL_ADDMSG(ERROR)
	   GOTO 999
	ENDIF
C
	HEADER_OFFSET=16
C
C Deal with each observer
C
	DO 600 I=1,8
C
	  HEADER_OFFSET=HEADER_OFFSET+24
C
	  IF (.NOT.SELOBS(I))        GOTO 600	!this observer not selected
	  IF (.NOT.HAD_OBSERVERS(I)) GOTO 600	!observer not defined
C
	  NUMBER=NUMBER+1
C
C Put observer details into file header
C Observer position is relative to the origin of the
C OUTPUT matrix
C
	  RETVAL=DTI_WRITE_WORD_HEADER(OUTLUN,
     &	         NINT(DTI_OBSERVERS(I,1)) - XOFFSET,
     &           HEADER_OFFSET,
     &           ERROR)
C
	  IF (RETVAL.NE.DTI__NORMAL) THEN
	     CALL LSL_PUTMSG(RETVAL)
	     IF (RETVAL.EQ.DTI__SYSERR) CALL LSL_ADDMSG(ERROR)
	     GOTO 999
	  ENDIF
C
	  RETVAL=DTI_WRITE_WORD_HEADER(OUTLUN,
     &	         NINT(DTI_OBSERVERS(I,2)) - YOFFSET,
     &           HEADER_OFFSET+2,
     &           ERROR)
C
	  IF (RETVAL.NE.DTI__NORMAL) THEN
	     CALL LSL_PUTMSG(RETVAL)
	     IF (RETVAL.EQ.DTI__SYSERR) CALL LSL_ADDMSG(ERROR)
	     GOTO 999
	  ENDIF
C
	  RETVAL=DTI_WRITE_REAL_HEADER(OUTLUN,
     &	         POS_OBSERVERS(I,3),
     &           HEADER_OFFSET+4,
     &           ERROR)
	  IF(RETVAL.NE.DTI__NORMAL)THEN
	     CALL LSL_PUTMSG(RETVAL)
	     IF (RETVAL.EQ.DTI__SYSERR) CALL LSL_ADDMSG(ERROR)
	     GOTO 999
	  ENDIF
C
	  RETVAL=DTI_WRITE_REAL_HEADER(OUTLUN,
     &	         CON_OBSERVERS(I),
     &           HEADER_OFFSET+8,
     &           ERROR)
	  IF(RETVAL.NE.DTI__NORMAL)THEN
	     CALL LSL_PUTMSG(RETVAL)
	     IF (RETVAL.EQ.DTI__SYSERR) CALL LSL_ADDMSG(ERROR)
	     GOTO 999
	  ENDIF
C
	  RETVAL=DTI_WRITE_REAL_HEADER(OUTLUN,
     &	         DIR_OBSERVERS(I),
     &           HEADER_OFFSET+12,
     &           ERROR)
	  IF(RETVAL.NE.DTI__NORMAL)THEN
	     CALL LSL_PUTMSG(RETVAL)
	     IF (RETVAL.EQ.DTI__SYSERR) CALL LSL_ADDMSG(ERROR)
	     GOTO 999
	  ENDIF
C
	  RETVAL=DTI_WRITE_REAL_HEADER(OUTLUN,
     &	         DIS_OBSERVERS(I,1),
     &           HEADER_OFFSET+16,
     &           ERROR)
	  IF(RETVAL.NE.DTI__NORMAL)THEN
	     CALL LSL_PUTMSG(RETVAL)
	     IF (RETVAL.EQ.DTI__SYSERR) CALL LSL_ADDMSG(ERROR)
	     GOTO 999
	  ENDIF
C
	  RETVAL=DTI_WRITE_REAL_HEADER(OUTLUN,
     &	         DIS_OBSERVERS(I,2),
     &           HEADER_OFFSET+20,
     &           ERROR)
	  IF(RETVAL.NE.DTI__NORMAL)THEN
	     CALL LSL_PUTMSG(RETVAL)
	     IF (RETVAL.EQ.DTI__SYSERR) CALL LSL_ADDMSG(ERROR)
	     GOTO 999
	  ENDIF
C
C Open temporary visibility matrix on channel 5
	  IF (NUMBER.GT.1) THEN
	    DTILUN = TMPLUN
	    RETVAL = CREATE_FILE(TMPLUN,MATSIZ(1),MATSIZ(2),.TRUE.)
	    IF (.NOT.RETVAL) GOTO 999
	  ENDIF
C
C Define scan area
C
	  IF (DIS_OBSERVERS(I,1).EQ.0.0) THEN
C No distance, so treat as infinity.
	    IDIST = 65535
	    RDIST = 99999999999.0	 	!approx infinity
	    XDIST = 65535
	    YDIST = 65535
	  ELSE
            IDIST = NINT(DIS_OBSERVERS(I,1))	!search radius in DTI units
	    RDIST = DIS_OBSERVERS(I,2)		!and in metres
	    XDIST = RDIST/X_GRID(1) + 1
	    YDIST = RDIST/Y_GRID(1) + 1
	  ENDIF
C
          XMIN = MAX(DTI_WINDOW_SWX(1),
     &		    (NINT(DTI_OBSERVERS(I,1)) - XDIST))
          XMAX = MIN(DTI_WINDOW_NEX(1),
     &		    (NINT(DTI_OBSERVERS(I,1)) + XDIST))
          YMIN = MAX(DTI_WINDOW_SWY(1),
     &		    (NINT(DTI_OBSERVERS(I,2)) - YDIST))
          YMAX = MIN(DTI_WINDOW_NEY(1),
     &		    (NINT(DTI_OBSERVERS(I,2)) + YDIST))
C
	  IF (CON_OBSERVERS(I).EQ.360) GOTO 100
C
	  HALF_CONE = CON_OBSERVERS(I) * 0.5
C
	  CONE_LEFT = DIR_OBSERVERS(I) - HALF_CONE
	  IF (CONE_LEFT.LT.0.0) CONE_LEFT = CONE_LEFT + 360.0
C
	  CONE_RIGHT = DIR_OBSERVERS(I) + HALF_CONE
	  IF (CONE_RIGHT.GT.360.0) CONE_RIGHT = CONE_RIGHT - 360
C
C Test if area of interest lies in a single quadrant
C
	  IF (CON_OBSERVERS(I).LE.90) THEN
C
	     IF (CONE_LEFT .GE.0.0 .AND. CONE_LEFT .LE.90.0 .AND.
     &		 CONE_RIGHT.GE.0.0 .AND. CONE_RIGHT.LE.90.0) THEN
	        XMIN = NINT(DTI_OBSERVERS(I,1))
		IF (BILINEAR) XMIN = MAX(DTI_WINDOW_SWX(1),XMIN-1)
C
	        YMIN = NINT(DTI_OBSERVERS(I,2))
		IF (BILINEAR) YMIN = MAX(DTI_WINDOW_SWY(1),YMIN-1)
	        GOTO 100
	     ENDIF
C
	     IF (CONE_LEFT .GE.90.0 .AND. CONE_LEFT .LE.180.0 .AND.
     &		 CONE_RIGHT.GE.90.0 .AND. CONE_RIGHT.LE.180.0) THEN
	        XMIN = NINT(DTI_OBSERVERS(I,1))
		IF (BILINEAR) XMIN = MAX(DTI_WINDOW_SWX(1),XMIN-1)
C
	        YMAX = NINT(DTI_OBSERVERS(I,2))
		IF (BILINEAR) YMAX = MIN(DTI_WINDOW_NEY(1),YMAX+1)
	        GOTO 100
	     ENDIF
C
	     IF (CONE_LEFT .GE.180.0 .AND. CONE_LEFT .LE.270.0 .AND.
     &		 CONE_RIGHT.GE.180.0 .AND. CONE_RIGHT.LE.270.0) THEN
	        XMAX = NINT(DTI_OBSERVERS(I,1))
		IF (BILINEAR) XMAX = MIN(DTI_WINDOW_NEX(1),XMAX+1)
C
	        YMAX = NINT(DTI_OBSERVERS(I,2))
		IF (BILINEAR) YMAX = MIN(DTI_WINDOW_NEY(1),YMAX+1)
	        GOTO 100
	     ENDIF
C
	     IF (CONE_LEFT .GE.270.0 .AND. CONE_LEFT .LE.360.0 .AND.
     &		 CONE_RIGHT.GE.270.0 .AND. CONE_RIGHT.LE.360.0) THEN
	        XMAX = NINT(DTI_OBSERVERS(I,1))
		IF (BILINEAR) XMAX = MIN(DTI_WINDOW_NEX(1),XMAX+1)
C
	        YMIN = NINT(DTI_OBSERVERS(I,2))
		IF (BILINEAR) YMIN = MAX(DTI_WINDOW_SWY(1),YMIN-1)
	        GOTO 100
	     ENDIF
	  ENDIF
C
C Test for area being in a single hemisphere
C
	  IF (CON_OBSERVERS(I).LE.180) THEN
	    IF (CONE_LEFT .GE.0.0 .AND. CONE_LEFT .LE.180.0 .AND.
     &		CONE_RIGHT.GE.0.0 .AND. CONE_RIGHT.LE.180.0) THEN
	      XMIN = NINT(DTI_OBSERVERS(I,1))
	      IF (BILINEAR) XMIN = MAX(DTI_WINDOW_SWX(1),XMIN-1)
C
	      GOTO 100
	    ENDIF
C
	    IF (CONE_LEFT .GE.180.0 .AND.  CONE_LEFT.LE.360.0 .AND.
     &		CONE_RIGHT.GE.180.0 .AND. CONE_RIGHT.LE.360.0) THEN
	      XMAX = NINT(DTI_OBSERVERS(I,1))
	      IF (BILINEAR) XMAX = MIN(DTI_WINDOW_NEX(1),XMAX+1)
C
	      GOTO 100
	    ENDIF
C
	    IF (CONE_LEFT.GE.270.0 .AND. CONE_LEFT.LE.360.0 .AND.
     &		CONE_RIGHT.GE.0.0  .AND. CONE_RIGHT.LE.90.0) THEN
	      YMIN = NINT(DTI_OBSERVERS(I,2))
	      IF (BILINEAR) YMIN = MAX(DTI_WINDOW_SWY(1),YMIN-1)
C
	      GOTO 100
	    ENDIF
C
	    IF (CONE_LEFT .GE.90.0 .AND.  CONE_LEFT.LE.270.0 .AND.
     &		CONE_RIGHT.GE.90.0 .AND. CONE_RIGHT.LE.270.0) THEN
	      YMAX = NINT(DTI_OBSERVERS(I,2))
	      IF (BILINEAR) YMAX = MIN(DTI_WINDOW_NEY(1),YMAX+1)
C
	      GOTO 100
	    ENDIF
	  ENDIF
C
100	  CONTINUE
C
C	  X1 	= DTI_OBSERVERS(I,1)		! Observer position
C	  Y1	= DTI_OBSERVERS(I,2)		! in DTI units
C
C Revert to nearest integers temporarily
C
	  X1 	= NINT(DTI_OBSERVERS(I,1))	! Observer position
	  Y1	= NINT(DTI_OBSERVERS(I,2))	! in DTI units
	  HGT   = POS_OBSERVERS(I,3)	 	! Observer height
C
	  IF (DIAG) THEN
            CALL FRAMED_MES(1,I)
	    IF(CRT)THEN
	      PCF = 100.0/((XMAX-XMIN)+1)
	      PCENT = 0
	      LPCENT = 0
	      NUMBER_COL=0
	      WRITE(*,'(1X,F6.2,''%'')')PCENT
	    ENDIF
	  ENDIF
C
C********************************************************************
C Now carry out scan column by column
C
	  DO 500 COL = XMIN,XMAX
C
	     NUMBER_COL=NUMBER_COL+1
C
	     DO 400 ROW = YMIN,YMAX
C
		IF (.NOT.INSIDE (COL,ROW,I,X1,Y1,HGT,
     &				CONE_LEFT,CONE_RIGHT)) GOTO 400
C
		X2=COL
		Y2=ROW
C
		IF (VISIBILITY(X1,Y1,X2,Y2,HGT)) THEN
		  X2=X2-XOFFSET
		  Y2=Y2-YOFFSET
		  RETVAL=DTI_WRITE_WORD_DATA(DTILUN,I,X2,Y2)
		  IF (.NOT.RETVAL)THEN
		    CALL LSL_PUTMSG(RETVAL)
		    GOTO 999
		  ENDIF
		ELSE
		  X2=X2-XOFFSET
		  Y2=Y2-YOFFSET
		  RETVAL=DTI_WRITE_WORD_DATA(DTILUN,0,X2,Y2)
		  IF (.NOT.RETVAL)THEN
		    CALL LSL_PUTMSG(RETVAL)
		    GOTO 999
		  ENDIF
		ENDIF
C
400	     CONTINUE
C
C Show progress
	     IF (CRT.AND.DIAG)THEN
		PCENT = NUMBER_COL*PCF
		IF (PCENT-LPCENT.GT.1) THEN
		  WRITE(*,'(1H+,F6.2)')PCENT	! don't WRITE too often
		  LPCENT = PCENT
		ENDIF
	     ENDIF
C
500	  CONTINUE
C
	  IF (CRT.AND.DIAG) THEN
	    PCENT = 100
	    WRITE(*,'(1H+,F6.2)')PCENT
	    WRITE(*,'(1H+,''       '')')
	  ENDIF
C
C  Calculate area statistics for this observer
C
	  IF (TERM.AND.DIAG) CALL OBSTAT(I,DTILUN)
C
	  IF(NUMBER.EQ.1) THEN
	    IF (I.GT.2) THEN
	      CALL COMBINE(OUTLUN,0)
	      GOTO 600
	    ELSE
	      GOTO 600
	    ENDIF
	  ELSE
C
C  Combine temporary matrix with cover matrix
C
	    CALL COMBINE(OUTLUN,TMPLUN)
	  ENDIF	
C
600	CONTINUE
C	
	RETVAL=DTI_MINMAX_DATA(OUTLUN,.FALSE.,ERROR)
	IF(RETVAL.NE.DTI__NORMAL)THEN
	  CALL LSL_PUTMSG(RETVAL)
	  IF (RETVAL.EQ.DTI__SYSERR) CALL LSL_ADDMSG(ERROR)
	ENDIF
C
	RETVAL=DTI_CLOSE(OUTLUN,.TRUE.,.TRUE.,ERROR)
	IF(RETVAL.NE.DTI__NORMAL)THEN
	  CALL LSL_PUTMSG(RETVAL)
	  IF (RETVAL.EQ.DTI__SYSERR) CALL LSL_ADDMSG(ERROR)
	ENDIF
C
C--------------------------------------------------------------------------
C
999     RETURN
	END
C
