C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-12-02 13:13:58.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE COVER_SET_WINDOW (DTI_LUN)
C
***	IDENT	02DE88
***	MODULE	COVER_SET_WINDOW
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C	Author    : D R Catlow
C	
CMOD	For use with ENABLE ABSOLUTE and UNITS PROJECTION
C	DRC 02DE88
C
C	Subroutine to set the area of interest in the input DTM.
C	The routine interpretes the command line according to the
C	current UNITS setting.
C	The routine checks that the window values are senisble,
C	and truncates if they fall outside the DTM bounds.
C
	IMPLICIT NONE
C	
C DTILIB common
***	COMMON/LSL$CMNDTI:DTIHDR/
***	COMMON/LSL$CMNDTI:DTIPROJ/
C LSLLIB common
***	COMMON/LSL$CMNLSL:CMDCOM/
C
***	COMMON/HERE:COVER /		! contains WINDOW and UNITS
C
C	Argument
	INTEGER*4	DTI_LUN		! which DTI file
C
C	Local
	INTEGER*4	X1,Y1,X2,Y2	! window values in matrix units
	INTEGER*4	LLDEGS(4)	! window values in seconds
C
C	Function
	LOGICAL		READLL		! reads lat/long
C************************************************************************
C
	IF(.NOT.DTILUN_INUSE(DTI_LUN))THEN
	  CALL WRITEF('%S Specifying command WINDOW',ERROR_BELL)	  
	  CALL WRITEF('The input DTI file must be specified before WINDOW')
	  GOTO 999
	ENDIF
C
	IF(CMDRCT.NE.4.AND.UNITS.NE.4)THEN
	  CALL WRITEF('%S Specifying command WINDOW',ERROR_BELL)	  
	  CALL WRITEF('Command requires 4 arguments')
	  GOTO 999
	ENDIF
C
	GOTO (100,200,300,400,450)UNITS
C
C------------------------------------------------------------------------
C	Matrix units
100     X1=NINT(REALAR(1))
        Y1=NINT(REALAR(2))
        X2=NINT(REALAR(3))
        Y2=NINT(REALAR(4))
	GOTO 500
C
C------------------------------------------------------------------------
C	Metres
200	IF(ABSOLUTE)THEN
	  X1=NINT((REALAR(1)-X_OFFSET(DTI_LUN))/X_GRID(DTI_LUN))+1
	  Y1=NINT((REALAR(2)-Y_OFFSET(DTI_LUN))/Y_GRID(DTI_LUN))+1
	  X2=NINT((REALAR(3)-X_OFFSET(DTI_LUN))/X_GRID(DTI_LUN))+1
	  Y2=NINT((REALAR(4)-Y_OFFSET(DTI_LUN))/Y_GRID(DTI_LUN))+1
	ELSE
	  X1=NINT(REALAR(1)/X_GRID(DTI_LUN))+1
	  Y1=NINT(REALAR(2)/Y_GRID(DTI_LUN))+1
	  X2=NINT(REALAR(3)/X_GRID(DTI_LUN))+1
	  Y2=NINT(REALAR(4)/Y_GRID(DTI_LUN))+1
	ENDIF
	GOTO 500
C
C------------------------------------------------------------------------
C	Seconds
300     Y1=NINT(REALAR(1)*10)
        X1=NINT(REALAR(2)*10)
        Y2=NINT(REALAR(3)*10)
        X2=NINT(REALAR(4)*10)
        X1=((X1-LONREC(1,DTI_LUN))/LONINT(DTI_LUN))+1
        Y1=((Y1-LATREC(1,DTI_LUN))/LATINT(DTI_LUN))+1
	X2=((X2-LONREC(1,DTI_LUN))/LONINT(DTI_LUN))+1
	Y2=((Y2-LATREC(1,DTI_LUN))/LATINT(DTI_LUN))+1
	GOTO 500
C
C------------------------------------------------------------------------
C	Degrees, Minutes & Seconds
C	Call READLL to convert to .1 seconds
C
400     IF(READLL(LLDEGS,4))THEN
	  CALL WRITEF('%S Specifying command WINDOW',ERROR_BELL)
	  CALL WRITEF('Unable to use supplied LATLONG values')
	  GOTO 999
	ELSE
	  Y1=LLDEGS(1)*10
	  X1=LLDEGS(2)*10
	  Y2=LLDEGS(3)*10
	  X2=LLDEGS(4)*10
	  X1=((X1-LONREC(1,DTI_LUN))/LONINT(DTI_LUN))+1
	  Y1=((Y1-LATREC(1,DTI_LUN))/LATINT(DTI_LUN))+1
	  X2=((X2-LONREC(1,DTI_LUN))/LONINT(DTI_LUN))+1
	  Y2=((Y2-LATREC(1,DTI_LUN))/LATINT(DTI_LUN))+1
	ENDIF
C
C-----------------------------------------------------------------------
C	Projection units
450	IF(ABSOLUTE)THEN
	  X1=NINT((REALAR(1)-DTIPROJ_ORIGIN(1,DTI_LUN))
     &       /DTIPROJ_SAMPLE(1,DTI_LUN))+1
	  Y1=NINT((REALAR(2)-DTIPROJ_ORIGIN(2,DTI_LUN))
     &       /DTIPROJ_SAMPLE(2,DTI_LUN))+1
	  X2=NINT((REALAR(3)-DTIPROJ_ORIGIN(1,DTI_LUN))
     &       /DTIPROJ_SAMPLE(1,DTI_LUN))+1
	  Y2=NINT((REALAR(4)-DTIPROJ_ORIGIN(2,DTI_LUN))
     &       /DTIPROJ_SAMPLE(2,DTI_LUN))+1
	ELSE
	  X1=NINT(REALAR(1)/DTIPROJ_SAMPLE(1,DTI_LUN))+1
	  Y1=NINT(REALAR(2)/DTIPROJ_SAMPLE(2,DTI_LUN))+1
	  X2=NINT(REALAR(1)/DTIPROJ_SAMPLE(1,DTI_LUN))+1
	  Y2=NINT(REALAR(2)/DTIPROJ_SAMPLE(2,DTI_LUN))+1
	ENDIF
	GOTO 500
C
C---------------------------------------------------------------------
C	Are the window values sensible?
C	Does the NE coordinate exceed the SW coordinate
500     IF(X2.LE.X1.OR.Y2.LE.Y1)THEN
	  CALL WRITEF('%S Specifying WINDOW',ERROR_BELL)
     	  CALL WRITEF('NE corner values must exceed SW corner values')
	  GOTO 999
	ENDIF
C
	IF(X1.LT.1.OR.Y1.LT.1.OR.
     &     X2.GT.X_EXTENT(DTI_LUN).OR.Y2.GT.Y_EXTENT(DTI_LUN))THEN
	  CALL WRITEF('%S Specifying command WINDOW',ERROR_BELL)	  
	  CALL WRITEF('Supplied values exceed DTM extents')
	  GOTO 999
	ENDIF
C
C	Transfer to the DTI common block variables
	DTI_WINDOW_SWX(DTI_LUN) = X1
	DTI_WINDOW_SWY(DTI_LUN) = Y1
	DTI_WINDOW_NEX(DTI_LUN) = X2	
	DTI_WINDOW_NEY(DTI_LUN) = Y2

C	Set up data offsets
	XOFFSET    = DTI_WINDOW_SWX(DTI_LUN)-1
	YOFFSET    = DTI_WINDOW_SWY(DTI_LUN)-1
C
C	Determine size of any output matrix
	IF(DTI_WINDOW_SWX(DTI_LUN).EQ.1)THEN
	   MATSIZ(1)=DTI_WINDOW_NEX(DTI_LUN)
	ELSE
	   MATSIZ(1)=(DTI_WINDOW_NEX(DTI_LUN)-DTI_WINDOW_SWX(DTI_LUN))+1
	ENDIF
C
	IF(DTI_WINDOW_SWY(DTI_LUN).EQ.1)THEN
	  MATSIZ(2)=DTI_WINDOW_NEY(DTI_LUN)
	ELSE
	  MATSIZ(2)=(DTI_WINDOW_NEY(DTI_LUN)-DTI_WINDOW_SWY(DTI_LUN))+1
	ENDIF
C
C-----------------------------------------------------------------------
C
999	RETURN
C
	END
