C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-02-24 13:06:48.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE POINT(X_TARGET,Y_TARGET)
C
***	IDENT	24FE93
***	MODULE	POINT
C
C	Copyright : Laser-Scan, Cambridge, England
C	Author    : D R Catlow
C	Created   : 17 November 1987
C
CMOD	DRC 02DE88 For use with ENABLE ABSOLUTE and UNITS PROJECTION
C	
CMOD1189 JB 22FE93 Keep observer position as REAL to preserve accuracy
C
C	Routine for COVER to determine whether the specified
C	point is visible to the selected observers.
C
	IMPLICIT NONE
C
***	COMMON/LSL$CMNDTI:DTIHDR/
***	COMMON/LSL$CMNDTI:DTIPROJ/
***	PARAMETER/LSL$CMNDTI:DTILIBMSG/
C
***	COMMON/HERE:COVER /
***	COMMON/HERE:TARGET/
***	COMMON/HERE:OBSERVER/
C
C	Arguments
	INTEGER*4	X_TARGET		! x and y position
	INTEGER*4	Y_TARGET		! of target point
C
C	Locals:
C	INTEGER*4	X_OBSERVER		! x and y position
C	INTEGER*4	Y_OBSERVER		! of observer
C
	REAL		X_OBSERVER		! x and y position
	REAL		Y_OBSERVER		! of observer
	REAL		OBSERVER_HEIGHT		! height at observer point
	REAL		DIFFX,DIFFY		! vector components
	INTEGER*4	RETVAL			! function return
	INTEGER*4	I			! counter
	INTEGER*4	NUMBER_VISIBLE		! no. of obs who can see pt
	INTEGER*4	NUMBER_HIDDEN		! no. of obs who can see pt
	LOGICAL		WHICH_VISIBLE(MAX_OBSERVERS) ! which obs can see it
	LOGICAL		WHICH_HIDDEN(MAX_OBSERVERS)  ! which obs can't see it
	INTEGER*2	HEIGHT			! DTM height
	INTEGER*4	LLDEGS(2)		! x,y position in seconds
	INTEGER*4	DEGR			!degree part of latlong
	INTEGER*4	MINU			!minute part of latlong
	INTEGER*4	SECO			!seconds part of latlong
	LOGICAL		NEGA			!neg latlong value
C
C	Functions
	INTEGER*4	DTI_READ_WORD_DATA 	!read height from DTM
	LOGICAL		VISIBILITY		!function to determine whether
C						!a point is visible
C************************************************************************
C	Retrieve height of target point
C
	RETVAL=DTI_READ_WORD_DATA (1,HEIGHT,X_TARGET,Y_TARGET)
	IF(.NOT.RETVAL)THEN
           CALL LSL_PUTMSG(RETVAL)
	   GOTO 999
	ENDIF
C
	TARGET_HEIGHT=FLOAT(HEIGHT)	!transfer to common variable
C
C------------------------------------------------------------------------
C	Initialise flags and counters
C
	DO 100 I=1,MAX_OBSERVERS
	   WHICH_VISIBLE(I) = .FALSE.
	   WHICH_HIDDEN(I)  = .FALSE.
100	CONTINUE
C
	NUMBER_VISIBLE = 0
	NUMBER_HIDDEN  = 0
C
C	Set up area of interest to equal whole DTM
	X_MIN=1
	X_MAX=X_EXTENT(1)
	Y_MIN=1
	Y_MAX=Y_EXTENT(1)
C	
C	Determine visibility of point to each defined and
C	selected observer in turn.
C
	DO 500 I=1,MAX_OBSERVERS
C
C	Is the observer selected?
C
	  IF(.NOT.SELOBS(I))GOTO 500
C
C	Has the position of this observer been defined?
C
	  IF(.NOT.HAD_OBSERVERS(I))GOTO 500
C
C	Retrieve observer details
C
	  OBSERVER_HEIGHT = POS_OBSERVERS(I,3)
	  X_OBSERVER	  = DTI_OBSERVERS(I,1)
	  Y_OBSERVER	  = DTI_OBSERVERS(I,2)
C
C	Calculate target distance and angle values
C	Calculate distance of target point from observer in metres
C
	  DIFFX = ABS(X_OBSERVER-X_TARGET)*X_GRID(1)
	  DIFFY = ABS(Y_OBSERVER-Y_TARGET)*Y_GRID(1)
	  TARGET_DISTANCE = SQRT(DIFFX*DIFFX + DIFFY*DIFFY)
C
	  IF (TARGET_DISTANCE.LE.X_GRID(1) .OR.
     &        TARGET_DISTANCE.LE.Y_GRID(1)) THEN
	     NUMBER_VISIBLE = NUMBER_VISIBLE+1
	     WHICH_VISIBLE(I) = .TRUE.
	     GOTO 500
	  ENDIF
C
C	Calculate the angle of the target point from the
C	observation point
C
	  IF (TARGET_HEIGHT.EQ.OBSERVER_HEIGHT) THEN
	     TARGET_ANGLE = 0.0					!in radians
	  ELSE
	     TARGET_ANGLE = ATAN(ABS(OBSERVER_HEIGHT-TARGET_HEIGHT)
     &				/TARGET_DISTANCE)		!in radians
	     IF (TARGET_HEIGHT.LT.OBSERVER_HEIGHT)
     &			TARGET_ANGLE = -TARGET_ANGLE
	  ENDIF
C
C	Determine visibility
C
	  IF (VISIBILITY(X_OBSERVER,Y_OBSERVER,
     &			 X_TARGET,Y_TARGET,OBSERVER_HEIGHT)) THEN
	     NUMBER_VISIBLE   = NUMBER_VISIBLE + 1
	     WHICH_VISIBLE(I) = .TRUE.
	  ELSE
	     NUMBER_HIDDEN   = NUMBER_HIDDEN + 1
	     WHICH_HIDDEN(I) = .TRUE.
	  ENDIF
C
500	CONTINUE
C
C--------------------------------------------------------------------------
C	Print out visibility details
	CALL WRITEF(' ')
C
	CALL EXPAND('Point at position ')
	IF (UNITS.EQ.1) CALL APPEND('%N %N',X_TARGET,Y_TARGET)
C
	IF(UNITS.EQ.2)THEN
          IF(ABSOLUTE)THEN
            CALL APPEND('%F9.2 %F9.2',
     &      ((X_TARGET-1)*X_GRID(1))+X_OFFSET(1),
     &      ((Y_TARGET-1)*Y_GRID(1))+Y_OFFSET(1))
	  ELSE
            CALL APPEND('%F9.2 %F9.2',
     &      X_TARGET-1*X_GRID(1),
     &      Y_TARGET-1*Y_GRID(1))
	  ENDIF
	ENDIF
C
	IF(UNITS.EQ.5)THEN
          IF(ABSOLUTE)THEN
            CALL APPEND('%F9.2 %F9.2',
     &      ((X_TARGET-1)*DTIPROJ_SAMPLE(1,1))+DTIPROJ_ORIGIN(1,1),
     &      ((Y_TARGET-1)*DTIPROJ_SAMPLE(2,1))+DTIPROJ_ORIGIN(2,1))
	  ELSE
            CALL APPEND('%F9.2 %F9.2',
     &      (X_TARGET-1)*DTIPROJ_ORIGIN(1,1),
     &      (Y_TARGET-1)*DTIPROJ_ORIGIN(2,1))
	  ENDIF
	ENDIF
C
	IF(UNITS.EQ.3)THEN
	  LLDEGS(1)=(LONREC(1,1)+((X_TARGET-1)*LONINT(1)))/10
	  LLDEGS(2)=(LATREC(1,1)+((Y_TARGET-1)*LATINT(1)))/10
	  CALL APPEND('%I9 %I9',LLDEGS(2),LLDEGS(1))
	ENDIF
C
	IF(UNITS.EQ.4)THEN
	  LLDEGS(1)=LONREC(1,1)+((X_TARGET-1)*LONINT(1))
	  LLDEGS(2)=LATREC(1,1)+((X_TARGET-1)*LATINT(1))
	  CALL DTI_CVTANG(LLDEGS(2),NEGA,DEGR,MINU,SECO) 
	  CALL APPEND('%P %I3 %P0%I2 %P0%I2',DEGR,MINU,SECO)
	  IF(NEGA)THEN
	    CALL APPEND('S  ')
	  ELSE
	    CALL APPEND('N  ')
	  ENDIF
C
	  CALL DTI_CVTANG(LLDEGS(1),NEGA,DEGR,MINU,SECO) 
	  CALL APPEND('%P %I3 %P0%I2 %P0%I2',DEGR,MINU,SECO)
	  IF(NEGA)THEN
	    CALL APPEND('W')
	  ELSE
	    CALL APPEND('E')
	  ENDIF
	ENDIF
C
	CALL APPEND(' (height %^W%N)',HEIGHT)
	CALL APPEND(' is:')	
	CALL TTWSTR
C
	IF (NUMBER_VISIBLE.GT.0) THEN
	  IF (NUMBER_HIDDEN.EQ.0) THEN
            CALL EXPAND('    Visible to all observers')
	  ELSE
	    CALL EXPAND('Visible to %N observer%m ',NUMBER_VISIBLE)
	    IF(NUMBER_VISIBLE.GT.1)THEN
	      CALL APPEND('(observers:')
	    ELSE
	      CALL APPEND(' (observer:')
	    ENDIF
C
	    DO 600 I=1,MAX_OBSERVERS
	      IF (WHICH_VISIBLE(I)) CALL APPEND('%I2',I)
600	    CONTINUE
C
	    CALL APPEND(')')
	  ENDIF
	  CALL TTWSTR
	ENDIF
C
	IF (NUMBER_HIDDEN.GT.0) THEN
	  IF(NUMBER_VISIBLE.EQ.0) THEN
            CALL EXPAND('NOT Visible to any observers')
	  ELSE
	    CALL EXPAND('NOT Visible to %N observer%m ',NUMBER_HIDDEN)
	    IF(NUMBER_HIDDEN.GT.1)THEN
	      CALL APPEND('(observers:')
	    ELSE
	      CALL APPEND(' (observer:')
	    ENDIF
C
	    DO 700 I=1,MAX_OBSERVERS
	       IF(WHICH_HIDDEN(I))CALL APPEND('%I2',I)
700	    CONTINUE
C
	    CALL APPEND(')')
	  ENDIF
	  CALL TTWSTR
	ENDIF
	CALL WRITEF(' ')
C
C-------------------------------------------------------------------------
C
999     RETURN
	END
C
