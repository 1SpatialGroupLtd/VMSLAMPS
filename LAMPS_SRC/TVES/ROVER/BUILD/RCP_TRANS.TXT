	REAL*4	MAP_TO_PIX(3,3),PIX_TO_MAP(3,3)

	transform map coords p(i) -> p'(i) in pixel coords = MAP_TO_PIX*p(i)
	then record map_coords = PIX_TO_MAP*p'(i)

	get MAP_TO_PIX from GET_LS_LIN_TRANSF (in C or FORTRAN?)

	get PIX_TO_MAP as follows:

	DET = MAP_TO_PIX(1,1).MAP_TO_PIX(2,2)
     &	     -MAP_TO_PIX(2,1).MAP_TO_PIX(1,2))

	A =  MAP_TO_PIX(2,2)/DET
	B = -MAP_TO_PIX(1,2)/DET
	C =  MAP_TO_PIX(1,2).MAP_TO_PIX(2,3)
     &	    -MAP_TO_PIX(2,2).MAP_TO_PIX(1,3))/DET
	D = -MAP_TO_PIX(2,1)/DET
	E =  MAP_TO_PIX(1,1)/DET
	F =  MAP_TO_PIX(2,1).MAP_TO_PIX(1,3)
     &	    -MAP_TO_PIX(1,1).MAP_TO_PIX(2,3))/DET

	PIX_TO_MAP(1,1) = A
	PIX_TO_MAP(1,2) = B
	PIX_TO_MAP(1,3) = C
	PIX_TO_MAP(2,1) = D
	PIX_TO_MAP(2,2) = E
	PIX_TO_MAP(2,3) = F

	all control points are always stored in orig map coords = lat/long

	so all transformations got from GET_LS_LIN_TRANSF are from orig
	coords to new map coords

	so all new IFF files are created from the ORIGINAL, not from
	the later

	there is never any concept of "compound transformation" - only
	that of current transformation and curent inverse
	transformation. 


