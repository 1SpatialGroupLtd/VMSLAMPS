C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-10-06 11:41:12.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE MOVE_CURSOR(X_DTI,Y_DTI,INIT,FINISH)
C
***	MODULE	MOVE_CURSOR
***	IDENT	06OC92
C
C Copyright Laser-Scan Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    10-Dec-1987
C	Moved to work in real DTI coordinates	 DRC    10-Nov-1988
C
C moves the cursor to the supplied DTI position which becomes the old
C cursor position 
C the old cursor position is redrawn in its correct colour
C
	IMPLICIT NONE
C
C arguments
	REAL*4			X_DTI,Y_DTI	! DTI coords to move to
	LOGICAL			INIT		! initial call?
	LOGICAL			FINISH		! final call
C
C Parameters
	INCLUDE	'LSL$CMNDTI:DTIPAR.PAR'
	INCLUDE	'LSL$CMNROVER:GKSPAR.PAR'
C
C Common Blocks
	INCLUDE 'LSL$CMNDTI:DTIHDR.CMN'
	INCLUDE	'LSL$CMNROVER:DTICMN.CMN'
	INCLUDE	'LSL$CMNROVER:ROVCMN.CMN'
	INCLUDE	'LSL$CMNROVER:GKS.CMN'
	INCLUDE	'LSL$CMNROVER:COLCMN.CMN'
	INCLUDE	'LSL$CMNROVER:RASTED.CMN'
C
C Functions
	INTEGER*4	DTI_COPY_WORD_DATA
	INTEGER		ICOL
	LOGICAL		EDITED_ALREADY
	REAL		GET_DTI_VAL
C
C Local Varaiables
	INTEGER*2 	TEMPVAL		! temporary DTI value
	INTEGER*4	XPOS,YPOS	! position of cursor on screen
	INTEGER*4	ERR,RET
	INTEGER*4	XSIGN		! sign for drawing direction
	INTEGER*4	INT_X_DTI,INT_Y_DTI
	INTEGER*4	INT_X_CURDTI,INT_Y_CURDTI
	INTEGER*2	WTHIS_COL
	BYTE		BTHIS_COL
	INTEGER*2	WCURCURCOL
	INTEGER*2	WCURSOR_COL
	BYTE		BCURCURCOL
	BYTE		BCURSOR_COL
C
C not sure about all this stuff, but I think it's necessary
	EQUIVALENCE	(WCURCURCOL,BCURCURCOL)
	EQUIVALENCE	(WCURSOR_COL,BCURSOR_COL)
	EQUIVALENCE	(WTHIS_COL,BTHIS_COL)
C
C-----------------------------------------------------------------------
C check if 
	WCURCURCOL	= CURCURCOL
	WCURSOR_COL	= CURSOR_COL
C
	INT_X_CURDTI = NINT(X_CURDTI)
	INT_Y_CURDTI = NINT(Y_CURDTI)
C
C Don't do anything if DTI position hasn't actually changed
	IF (EDITING)THEN
	   IF(NINT(X_DTI).EQ.INT_X_CURDTI.AND.
     &        NINT(Y_DTI).EQ.INT_Y_CURDTI.AND.
     &        (.NOT.INIT).AND.(.NOT.FINISH))THEN
	     GOTO 999
	   ENDIF
	ELSE
	   IF (X_DTI.EQ.X_CURDTI .AND. Y_DTI.EQ.Y_CURDTI .AND.
     &           (.NOT. INIT) .AND. (.NOT. FINISH)) THEN
	     GOTO 999
	   ENDIF
	ENDIF
C
C Select the raster planes 
	CALL LSG_PLANE_SELECT(WKID,PLANE_MASK)
	CALL LSG_PLANE_OFFSET(WKID,0)
C
C Translate the coordinates depending on rotation mode
	CALL SET_ROTATE(X_DTI,Y_DTI,XPOS,YPOS,XSIGN)
C
C NINT the real DTI coordinates
C
	INT_X_DTI = NINT(X_DTI)
	INT_Y_DTI = NINT(Y_DTI)
C
C fill in colour of old position of cursor
	IF (.NOT. INIT) THEN
	   IF (.NOT. EDITED_ALREADY(INT(X_CURDTI),INT(Y_CURDTI))) THEN
	      IF (.NOT. CROSS_CURSOR) THEN
	         CALL LSG_PIXEL_ARRAY(
     &		   FLOAT(X_CURPOS),FLOAT(Y_CURPOS),
     &		   XSIGN,-XSIGN,1,1,1,1,
     &		   SF(DTICHAN),SF(DTICHAN),BCURCURCOL)
	      ENDIF
	   ENDIF
	ENDIF
C
C now make the current cursor the old cursor
	X_CURPOS = XPOS
	Y_CURPOS = YPOS
	X_CURDTI = X_DTI 
	Y_CURDTI = Y_DTI
C
C read value of current cursor pos 
	IF(REGISTERING)THEN
	  CUR_DTI_VAL= GET_DTI_VAL(
     &                 MIN(X_EXTENT(DTICHAN),NINT(X_CURDTI)),
     &                 MIN(Y_EXTENT(DTICHAN),NINT(Y_CURDTI)))
	ELSE
	  CUR_DTI_VAL= GET_DTI_VAL(INT(X_CURDTI),INT(Y_CURDTI))
	ENDIF
C
	WCURCURCOL= COLTAB(ICOL(DTICHAN,CUR_DTI_VAL),DTICHAN)
C
	WTHIS_COL = CURSOR_COL
C
C change the cursor colour if its the same as the underlying pixel
	IF (WCURCURCOL .EQ. CURSOR_COL) THEN 
	   IF (CURSOR_COL .EQ. 1) THEN
	      WTHIS_COL = 0
	   ELSE
	      WTHIS_COL= 1
	   ENDIF
	ENDIF
C	
C write cursor to this position in current colour
	IF (.NOT.FINISH) THEN
	   IF (CROSS_CURSOR) THEN
	      CALL LSG_SET_CURSOR
     & 	       (WKID,FLOAT(XCROSS),FLOAT(YCROSS),.TRUE.)
	   ELSE
	      CALL LSG_PIXEL_ARRAY(
     &		FLOAT(XPOS),FLOAT(YPOS),
     &		XSIGN,-XSIGN,1,1,1,1,
     &		SF(DTICHAN),SF(DTICHAN),BTHIS_COL)
	   ENDIF
	ELSE
	   IF (CROSS_CURSOR) THEN
	      CALL LSG_SET_CURSOR
     &	      (WKID,FLOAT(XCROSS),FLOAT(YCROSS),.FALSE.)
	   ENDIF
	ENDIF
C
C update status display
	CURCURCOL = WCURCURCOL
	IF ((.NOT.INIT) .AND. (.NOT.FINISH))
     &		 CALL UPDATE_STATUS(CURPOS)
C
999	RETURN
	END
C
