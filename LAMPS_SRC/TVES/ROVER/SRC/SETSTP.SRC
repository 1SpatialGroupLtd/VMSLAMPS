C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-01-06 11:02:50.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE SETSTP(NUMCOL,MODTEN)
C
***	MODULE	SETSTP
**	IDENT	06JA89
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    16-Jun-1986
C
	IMPLICIT NONE
C
C sets a default step interval based on the number of colours available
C also sets COLOUR array
C argument
	INTEGER*4	NUMCOL		!no of colours available
	LOGICAL		MODTEN		! setup for modten
C
C common block
	INCLUDE	'LSL$CMNROVER:ROVCMN.CMN'
	INCLUDE	'LSL$CMNROVER:DTICMN.CMN'
	INCLUDE	'LSL$CMNROVER:COLCMN.CMN'
	INCLUDE	'LSL$CMNROVER:STPCMN.CMN'
	INCLUDE	'LSL$CMNROVER:MAPCMN.CMN'
C
C function
	INTEGER*4	VIOCLR		!set up colour array
C locals
	REAL		INISTP		!un "INTed" step interval
	INTEGER		I,J,K
	BYTE		IB,JB,KB
	EQUIVALENCE	(I,IB),(J,JB)	!for access as bytes
	EQUIVALENCE     (K,KB)
	INTEGER*4	RANGE
	INTEGER*4	NUMBER_COL
C
	NSTEP(DTICHAN) = NUMCOL	
C
	RANGE = HUPPER(DTICHAN)-HLOWER(DTICHAN)
C	HSTEP(DTICHAN,0) = 0
	HSTEP(DTICHAN,0) = HLOWER(DTICHAN)
	IF (RANGE .LT. (NUMCOL)) THEN
C
C range is smaller than the number of colours available
	   NSTEP(DTICHAN) = RANGE+1
	   STEP_ONE(DTICHAN) = .TRUE.
	   DO 21 I = 1,NSTEP(DTICHAN)
	      STEP(DTICHAN,I) = 1
	      HSTEP(DTICHAN,I) = I+HLOWER(DTICHAN)-1
21	   CONTINUE
	ELSE
	   STEP_ONE(DTICHAN) = .FALSE.
	   INISTP= REAL((HUPPER(DTICHAN)-HLOWER(DTICHAN)))/NSTEP(DTICHAN)
	   DO 22 I = 1,NSTEP(DTICHAN)-1
	      HSTEP(DTICHAN,I) = INT(HLOWER(DTICHAN)+INISTP*I)
	      STEP(DTICHAN,I)  = HSTEP(DTICHAN,I) - HSTEP(DTICHAN,(I-1))
22	   CONTINUE
C
C Last step interval may not be the same
	   STEP(DTICHAN,NSTEP(DTICHAN))=HUPPER(DTICHAN)
     &				-HSTEP(DTICHAN,NSTEP(DTICHAN)-1)
	   HSTEP(DTICHAN,NSTEP(DTICHAN))= HUPPER(DTICHAN)
C
	ENDIF
C
	IF (HLOWER(DTICHAN) .LT. 0 ) THEN
C
C negative height range
	   NEGOFF(DTICHAN) = -HLOWER(DTICHAN)
	ELSE
	   NEGOFF(DTICHAN) = 0
	ENDIF
C
C Initialise loop
	HSTEP(DTICHAN,0) = HLOWER(DTICHAN)-1
C
C Set up colour array and colour index array
C
	DO 26 I = 1, NSTEP(DTICHAN)
C
C Here set up array such that each value is assigned a step number(I)
	  DO 27 J = HSTEP(DTICHAN,I-1)+1+NEGOFF(DTICHAN),
     &		    HSTEP(DTICHAN,I)+NEGOFF(DTICHAN)
	      IF (MODTEN) THEN
		 K = MOD(J,10)+1
	         COLOUR(J,DTICHAN) = KB
	      ELSE
	         COLOUR(J,DTICHAN) = IB	! equivalenced onto I
	      ENDIF
27	  CONTINUE
C
C and assign a colour for each step
	  J = I*NOCOL(DTICHAN)/NSTEP(DTICHAN)+BASECOL(DTICHAN)
	  IF (MODTEN) THEN
	    J = I*NOCOL(DTICHAN)/10
	  ENDIF
	  COLTAB(I+2,DTICHAN) = JB	!  equivalenced onto J
26	CONTINUE
C
	RETURN
	END
