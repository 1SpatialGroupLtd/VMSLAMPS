C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-03-31 16:37:32.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE CHKWIN(CHAN)
C
***	MODULE	CHKWIN
**	IDENT	31MR89
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C Extracted from ROVWIN - Clarke Brunt
C
C 	Created					MWSR    02-Jun-1986
C
	IMPLICIT NONE
C
C Check window for DTI CHAN against screen size
C
	INCLUDE	'LSL$CMNROVER:DISCMN.CMN'
	INCLUDE	'LSL$CMNROVER:GKS.CMN'
	INCLUDE	'LSL$CMNROVER:GRABUF.CMN'
	INCLUDE	'LSL$CMNROVER:ROVCMN.CMN'
C
***	COMMON/LSL$CMNDTI:DTIHDR/
C
C argument
	INTEGER	CHAN			! DTI channel number
C
C workspace
	INTEGER	SIZ(2)
	INTEGER	X1,Y1
	INTEGER*4	KNOWN_X_SIZ
	INTEGER*4	KNOWN_Y_SIZ
	INTEGER*4	XSAMP,YSAMP
	LOGICAL		CHANGE
C
	CHANGE  = .FALSE.
	IF (CUR_ROTATE(CHAN).EQ.0.OR.CUR_ROTATE(CHAN).EQ.2) THEN
	   X1 = 1
	   Y1 = 2
	ELSE
	   X1 = 2
	   Y1 = 1
	ENDIF
C
	IF (DIVIDED) THEN
	   IF(EDITING.OR.REGISTERING.OR. HAD_SAMPLE) THEN
	      SIZ(1) = MIN(MAXWIN,NINT((DISPEX(1)-DISPSX(1)+1)))
	      SIZ(2) = MIN(MAXWIN,NINT((DISPEY(1)-DISPSY(1)+1)))
	   ELSE
	      SIZ(1) = MIN(MAXWIN,RASTSZ(1)/2)
	      SIZ(2) = MIN(MAXWIN,RASTSZ(2)/2)
	   ENDIF
	ELSE
	   IF(EDITING.OR.REGISTERING.OR.HAD_SAMPLE) THEN
	      SIZ(1) = MIN(MAXWIN,NINT(DISPEX(0)-DISPSX(0)+1))
	      SIZ(2) = MIN(MAXWIN,NINT(DISPEY(0)-DISPSY(0)+1))
	   ELSE
	      SIZ(1) = MIN(MAXWIN,RASTSZ(1))
	      SIZ(2) = MIN(MAXWIN,RASTSZ(2))
	   ENDIF
	ENDIF
C
	IF (MATSIZ(CHAN,1).GT.SIZ(X1).OR.
     &	    MATSIZ(CHAN,2).GT.SIZ(Y1)) THEN
C
C 
	   IF (HAD_SAMPLE)THEN
C 
C if we're in sub-sampling mode then  if the specified is too big 
C for the display area, then set up sample intervals accordingly
	      XSAMP = X_SAMPLE(CHAN)
	      YSAMP = Y_SAMPLE(CHAN)
	      IF (MATSIZ(CHAN,1)/X_SAMPLE(CHAN).GT. SIZ(X1))THEN
		 XSAMP = MATSIZ(CHAN,1)/SIZ(X1)+1
	         CHANGE = .TRUE.
	      ENDIF
	      IF (MATSIZ(CHAN,2)/Y_SAMPLE(CHAN).GT. SIZ(Y1))THEN
		 YSAMP = MATSIZ(CHAN,2)/SIZ(Y1)+1
	         CHANGE = .TRUE.
	      ENDIF
	      IF(CHANGE) THEN
	         X_SAMPLE(CHAN) = MAX(XSAMP,YSAMP)
	         Y_SAMPLE(CHAN) = X_SAMPLE(CHAN)	     
	         CALL WRITEF
     &  	 ('%SSample intervals in X and Y set to %N',WBELL,XSAMP)
	      ENDIF
	      GOTO 10
	   ENDIF
C
	   IF (DIVIDED) THEN
	      CALL WRITEF(
     &	'%S Window exceeds size limit for a divided screen',WBELL)
	   ELSE
	      CALL WRITEF('%S Window exceeds screen size',WBELL)
	   ENDIF
	   CALL WRITEF(
     &		'DTI %N  Window will be truncated to %Nx%N limit',
     &			CHAN,SIZ(1),SIZ(2))
	   DTI_WINDOW_NEX(CHAN) = MIN(DTI_WINDOW_NEX(CHAN),
     &				  DTI_WINDOW_SWX(CHAN)+SIZ(X1)-1)
	   DTI_WINDOW_NEY(CHAN) = MIN(DTI_WINDOW_NEY(CHAN),
     &				  DTI_WINDOW_SWY(CHAN)+SIZ(Y1)-1)
	   MATSIZ(CHAN,1) = DTI_WINDOW_NEX(CHAN)-
     &                      DTI_WINDOW_SWX(CHAN)+1
	   MATSIZ(CHAN,2) = DTI_WINDOW_NEY(CHAN)-
     &                      DTI_WINDOW_SWY(CHAN)+1
	ENDIF
C
	IF (DIVIDED) THEN	
	   IF (MATSIZ(CHAN,X1)-1.GT.NINT(DISPEX(1)-DISPSX(1)).OR.
     &	       MATSIZ(CHAN,Y1)-1.GT.NINT(DISPEY(1)-DISPSY(1))) THEN 
	      BIGDIV(CHAN)= .TRUE.
	   ELSE
	      BIGDIV(CHAN)= .FALSE.
	   ENDIF
	ELSE
	   IF (MATSIZ(CHAN,X1)-1.GT.NINT(DISPEX(0)-DISPSX(0)).OR.
     &	       MATSIZ(CHAN,Y1)-1.GT.NINT(DISPEY(0)-DISPSY(0))) THEN 
	      BIGMAT(CHAN)= .TRUE.
	   ELSE
	      BIGMAT(CHAN)= .FALSE.
	   ENDIF
	ENDIF
C
C check new window against previous known display extents
10	IF (.NOT. RELOOKUP) THEN
	   KNOWN_X_SIZ = DTI_WINDOW_NEX(CHAN) - COL_EXTENT(1) +1
	   KNOWN_Y_SIZ = DTI_WINDOW_NEY(CHAN) - COL_EXTENT(2) +1
	   IF (DTI_WINDOW_SWX(CHAN) .GT. COL_EXTENT(3) .OR.
     &	       DTI_WINDOW_SWY(CHAN) .GT. COL_EXTENT(4) .OR.
     &	       DTI_WINDOW_SWX(CHAN) .LT. COL_EXTENT(1) .OR.
     &	       DTI_WINDOW_SWY(CHAN) .LT. COL_EXTENT(2) .OR.
     &         KNOWN_X_SIZ  .GT. 1000		 .OR.
     &	       KNOWN_Y_SIZ  .GT. 1000            .OR.
     &	       DTI_WINDOW_NEX(CHAN) .LT. COL_EXTENT(1) .OR.
     &	       DTI_WINDOW_NEY(CHAN) .LT. COL_EXTENT(2) .OR.
     &	       DTI_WINDOW_NEX(CHAN) .GT. COL_EXTENT(3) .OR.
     &         DTI_WINDOW_NEY(CHAN) .GT. COL_EXTENT(4))THEN
C
C need to re work out entire display
	       RELOOKUP = .TRUE.
	   ENDIF
C
	ENDIF	   
C
C check the window against the current sample values
	IF (HAD_SAMPLE) THEN
	   CALL CHECK_SAMPLE(CHAN)
C
C never have big screen in sampling mode
	   BIGMAT(CHAN) = .FALSE.
	   BIGDIV(CHAN) = .FALSE.
	ENDIF
C
	RETURN
	END
