C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-02-17 12:57:24.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE SHOW
C
***	MODULE	SHOW
**	IDENT	17FE89
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    02-Jun-1986
C
	IMPLICIT NONE
C
C Deals with SHOW command in program ROVER 
C
C Common Blocks
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'
C
	INCLUDE	'LSL$CMNLSL:TXTC.CMN'
	INCLUDE	'LSL$CMNLSL:CMDCOM.CMN'
	INCLUDE	'LSL$CMNLSL:EXCEPTION.CMN'
	INCLUDE	'LSL$CMNDTI:DTIHDR.CMN'
	INCLUDE	'LSL$CMNROVER:ROVCMN.CMN'
	INCLUDE	'LSL$CMNROVER:DTICMN.CMN'
	INCLUDE	'LSL$CMNROVER:IFFCMN.CMN'
	INCLUDE	'LSL$CMNROVER:FPPDAT.CMN'
	INCLUDE	'LSL$CMNROVER:DISCMN.CMN'
	INCLUDE	'LSL$CMNROVER:COLCMN.CMN'
	INCLUDE	'LSL$CMNROVER:STPCMN.CMN'
	INCLUDE	'LSL$CMNROVER:DRAWIN.CMN'
	INCLUDE	'LSL$CMNROVER:RASTED.CMN'
C
C Functions 
	INTEGER*4	RDCOMM
	INTEGER*4	RDCHS
	INTEGER*4	SIGCHS
C
	EXTERNAL	SHOW_CMD_TABLE
	INTEGER*4	SHOW_CMD_TABLE
	EXTERNAL	UNIT_CMD_TABLE
	INTEGER*4	UNIT_CMD_TABLE
C
C Local Variables
	INTEGER*4	COMAND,CMD
	INTEGER*4	DEGR,MINU,SECO
	LOGICAL		NEGA			!CVTANG argument
	CHARACTER*1	CH
	REAL		DIFFX,DIFFY		!Delta value
	INTEGER*4	I
	INTEGER*4	DTI_NUM			!DTI channel
	INTEGER*4	LEN
	REAL*8		RANGE_PLUS_OO(4)	! range + origin offset
	REAL*8		WINDOW_PLUS_OO(4)	! window + origin offset
	BYTE		BVAL		
	INTEGER*2	WVAL
	EQUIVALENCE(WVAL,BVAL)
C
C-----------------------------------------------------------------------
C
	COMAND = RDCOMM(SHOW_CMD_TABLE)	
	IF(COMAND.LE.0)THEN
	  CALL WRITEF('%S specifying command SHOW',EBELL)
	  CALL TTWSTR
     &	 ('Command qualifiers are ANNOTATION, DEVICE, ENABLE, FILEIN,')
	  CALL TTWSTR('IFF, PARAMETERS, POSITION, RANGES, RCP_FILE,')
	  CALL TTWSTR('SELECTIONS or SETTINGS')  
	  GOTO 500
	ENDIF
C
C
	GOTO (10,20,30,50,80,90,500,100,110,120,130,200)COMAND
C
C	SHOW information on DTI
C	output what we know about the current DTI
C
10	IF (HADDTI(DTICHAN)) THEN
	   CALL DTI_PRINT_HEADER(DTICHAN,UNTYPE(DTICHAN),
     &     HAD_ABSOLUTE,CUR_ROTATE(DTICHAN))
	   CALL WRITEF('DTI File Number %N',DTICHAN)
	   IF (HAD_SAMPLE)THEN
	      CALL WRITEF('Sample Value in X: %N',X_SAMPLE(DTICHAN))
	      CALL WRITEF('Sample Value in Y: %N',Y_SAMPLE(DTICHAN))
	   ENDIF
	ELSE
	   CALL WRITEF('No DTI file open')
	ENDIF
	GOTO 500
C
C-----------------------------------------------------------------------
C	SHOW label and legend settings (size,and position)
20	CALL TTWSTR('Current label  setting:')
	CALL WRITEF('Position: X  %F  Y %F   Size %N  Colour %N'
     &	,LABX(CURPOS),LABY(CURPOS),LABSIZ(CURPOS),LABECOL)
	CALL TTWSTR('Current legend setting:')
	CALL WRITEF('Position:  X %F   Y %F  ',LEGX(CURPOS),LEGY(CURPOS))
	GOTO 500
C
C-----------------------------------------------------------------------
C	Show device setting - position 
30	IF (DIVIDED) THEN
	   CALL TTWSTR('Current quadrant setting:')
	   DO 40 I = 1,4
	      IF (HADDTI(I)) THEN
	        CALL WRITEF('DTI File %N:     Quadrant %N',I,POS(I))
	      ENDIF
40	   CONTINUE
	ELSE
	  CALL WRITEF('DTI File %N:      Full Display',DTICHAN)
	ENDIF
	GOTO (42,48,46,44), CUR_ROTATE(DTICHAN)+1
42	CALL WRITEF
     &  ('Viewing direction for current file is from the South')
	GOTO 500
44	CALL WRITEF
     &  ('Viewing direction for current file is from the West')
	GOTO 500
46	CALL WRITEF
     &  ('Viewing direction for current file is from the North')
	GOTO 500
48	CALL WRITEF
     &  ('Viewing direction for current file is from the East')
	GOTO 500
C
C-----------------------------------------------------------------------
C 	Show parameters
50	DTI_NUM = DTICHAN		!Default is current channel
C
	IF (.NOT.HADDTI(DTI_NUM)) THEN
	  CALL WRITEF('No DTI file open')
	  GOTO 500
	ENDIF
C
	CALL WRITEF('Range             : %N to %N',
     &	            HLOWER(DTI_NUM),HUPPER(DTI_NUM))
	CALL WRITEF('Number of steps   : %N',NSTEP(DTI_NUM))
	DO 60 I = 1,NSTEP(DTI_NUM)
	  IF(MOD(I-1,10).EQ.0.OR.I.EQ.1)THEN
	    IF(I.GT.1)CALL TTWLIN
	    IF(I.EQ.1)THEN
	      CALL EXPAND('Step upper limits : ')
	    ELSE
	      CALL EXPAND('                  : ')
	    ENDIF
	  ENDIF
	  CALL APPEND('%I4 ',HSTEP(DTI_NUM,I))
60	CONTINUE
	CALL TTWLIN
C
	DO 70 I = 1,NSTEP(DTI_NUM)
	  IF(MOD(I-1,10).EQ.0.OR.I.EQ.1)THEN
	    IF(I.GT.1)CALL TTWLIN
	    IF(I.EQ.1)THEN
	      CALL EXPAND('Colour indices    : ')
	    ELSE
	      CALL EXPAND('                  : ')
	    ENDIF
	  ENDIF
	  BVAL = COLTAB(I+2,DTI_NUM)
	  CALL APPEND('%^W%I2 ',WVAL+1)
70	CONTINUE
	CALL TTWLIN
	CALL WRITEF('Number of Colours : %N',NOCOL(DTI_NUM))
	CALL WRITEF('First Colour      : %N',(BASECOL(DTI_NUM)+1))
	CALL WRITEF('Planes Setting    : %N',NOPLNS)
	CALL WRITEF
	GOTO 500
C
C SHOW IFF - display information about selected IFF file with culture
C
80	CALL WRITEF
	IF(.NOT.HADIFF(IFFCHAN))THEN
	  CALL TTWSTR('No IFF file open')  ! nothing
	  CALL WRITEF
	  GOTO 500
	ENDIF
C
	LEN = SIGCHS(IFFNAM(IFFCHAN))
	CALL WRITEF('IFF file:       %S',IFFNAM(IFFCHAN)(1:LEN))
	CALL TTWSTR('IFF file range:')
C
	IF(HAD_ABSOLUTE)THEN
C
C add origin offset to range and window values
	   RANGE_PLUS_OO(1) = RANGE_VALUES(1,IFFCHAN)+
     &			   ORIGIN_OFFSET(1,IFFCHAN)
	   RANGE_PLUS_OO(2) = RANGE_VALUES(2,IFFCHAN)+
     &			   ORIGIN_OFFSET(1,IFFCHAN)
	   RANGE_PLUS_OO(3) = RANGE_VALUES(3,IFFCHAN)+
     &			   ORIGIN_OFFSET(2,IFFCHAN)
	   RANGE_PLUS_OO(4) = RANGE_VALUES(4,IFFCHAN)+
     &			   ORIGIN_OFFSET(2,IFFCHAN)
	ELSE
	   RANGE_PLUS_OO(1) = RANGE_VALUES(1,IFFCHAN)
	   RANGE_PLUS_OO(2) = RANGE_VALUES(2,IFFCHAN)
	   RANGE_PLUS_OO(3) = RANGE_VALUES(3,IFFCHAN)
	   RANGE_PLUS_OO(4) = RANGE_VALUES(4,IFFCHAN)
	ENDIF
C
	CALL WRITEF('SW: %F9.2 %F9.2 NE: %F9.2 %F9.2',
     &		    RANGE_PLUS_OO(1),RANGE_PLUS_OO(3),
     &		    RANGE_PLUS_OO(2),RANGE_PLUS_OO(4))
	CALL TTWSTR('IFF file window :')
C
	IF(HAD_ABSOLUTE)THEN
	   WINDOW_PLUS_OO(1)=WIND(1,1,IFFCHAN)+ORIGIN_OFFSET(1,IFFCHAN)
	   WINDOW_PLUS_OO(2)=WIND(1,2,IFFCHAN)+ORIGIN_OFFSET(2,IFFCHAN)
	   WINDOW_PLUS_OO(3)=WIND(2,1,IFFCHAN)+ORIGIN_OFFSET(1,IFFCHAN)
	   WINDOW_PLUS_OO(4)=WIND(2,2,IFFCHAN)+ORIGIN_OFFSET(2,IFFCHAN)
	ELSE
	   WINDOW_PLUS_OO(1)=WIND(1,1,IFFCHAN)
	   WINDOW_PLUS_OO(2)=WIND(1,2,IFFCHAN)
	   WINDOW_PLUS_OO(3)=WIND(2,1,IFFCHAN)
	   WINDOW_PLUS_OO(4)=WIND(2,2,IFFCHAN)
	ENDIF
C        
	CALL WRITEF('SW: %F9.2 %F9.2 NE: %F9.2 %F9.2',
     &		    WINDOW_PLUS_OO(1),WINDOW_PLUS_OO(2),
     &		    WINDOW_PLUS_OO(3),WINDOW_PLUS_OO(4))
	CALL WRITEF
	GOTO 500
C
C
C	SELECTIONS
90	CALL SHSELE			! to show selections
	GOTO 500
C
100	  CALL SHOW_ENABLE
	GOTO 500
C
110	CALL SHOW_RANGE(DTICHAN)
	GOTO 500
C
120	CALL SHOW_POSITION
	GOTO 500
C
130	CALL SHOW_SETTINGS
	GOTO 500
C
200	CALL SHOW_RCP_FILE
	GOTO 500
C
500	RETURN
	END
