C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-02-14 13:44:24.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE INIT_EDIT
C
***	MODULE	INIT_EDIT
***	IDENT	09FE89
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    21-Dec-1987
C
C to initialise things for editing
C
	IMPLICIT NONE
C
C Common Blocks
	INCLUDE	'LSL$CMNROVER:DTICMN.CMN'
	INCLUDE	'LSL$CMNROVER:ROVCMN.CMN'
	INCLUDE	'LSL$CMNROVER:RASTED.CMN'
	INCLUDE	'LSL$CMNROVER:TAB.CMN'
C
***	COMMON/LSL$CMNDTI:DTIHDR/
C
C Local Variables
	REAL		X_CENT,Y_CENT
	INTEGER		PX(2),PY(2)	! temps
C
C find central pixel of current window
	X_CENT = DTI_WINDOW_SWX(DTICHAN)+((DTI_WINDOW_NEX(DTICHAN) - 
     &            DTI_WINDOW_SWX(DTICHAN))*0.5)
	Y_CENT = DTI_WINDOW_SWY(DTICHAN)+((DTI_WINDOW_NEY(DTICHAN) - 
     &            DTI_WINDOW_SWY(DTICHAN))*0.5)
C
	IF (EDITING) THEN
	   IF (INT(X_CURDTI).GE. DTI_WINDOW_SWX(DTICHAN) .AND. 
     &	      INT(X_CURDTI) .LE. DTI_WINDOW_NEX(DTICHAN) .AND.
     &	      INT(Y_CURDTI) .GE. DTI_WINDOW_SWY(DTICHAN) .AND.
     &	      INT(Y_CURDTI) .LE. DTI_WINDOW_NEY(DTICHAN)) THEN
	      X_CENT = X_CURDTI
	      Y_CENT = Y_CURDTI
	   ENDIF
	ELSEIF (REGISTERING) THEN
	   IF (NINT(X_CURDTI).GE. DTI_WINDOW_SWX(DTICHAN) .AND. 
     &	      NINT(X_CURDTI) .LE. (DTI_WINDOW_NEX(DTICHAN)+1) .AND.
     &	      NINT(Y_CURDTI) .GE. DTI_WINDOW_SWY(DTICHAN) .AND.
     &	      NINT(Y_CURDTI) .LE. (DTI_WINDOW_NEY(DTICHAN)+1)) THEN
	      X_CENT = X_CURDTI
	      Y_CENT = Y_CURDTI
	   ENDIF
	ENDIF
C
C set mouse pointer invisible inside window
	IF (VIEW_SHOWN(CURPOS)) THEN
c
C move to initial position
	   CALL SET_DTI_POSITION(X_CENT,Y_CENT)   
	   CALL MOVE_CURSOR(X_CENT,Y_CENT,.TRUE.,.FALSE.)	
	   PX(1) = SIGSWX(CURPOS)
	   PX(2) = SIGNEX(CURPOS)
	   PY(1) = SIGSWY(CURPOS)
	   PY(2) = SIGNEY(CURPOS)
	   CALL SET_PTR_VIS(.FALSE.,PX,PY)
	ENDIF
C
C setup status information
	CALL SETUP_STATUS(CURPOS)
C
	N_EDIT_PTS = 0
	N_MASTER = 0
	HAD_EDIT = .FALSE.
C
C clear trackerball timer event flag
	CALL SYS$CLREF(%VAL(EF_TIMER))	! clear event flag
C 
	RETURN
	END
