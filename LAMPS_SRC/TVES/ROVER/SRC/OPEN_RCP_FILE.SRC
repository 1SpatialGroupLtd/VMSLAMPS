C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-11-18 15:02:28.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL	FUNCTION OPEN_RCP_FILE()
C
***	IDENT	18NO88
***	MODULE	OPEN_RCP_FILE
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C	Created   : D R Catlow                   14-November-1988
C
C	Function to open an existing RCP file on the next free
C	RCP LUN.
C	The filename is read from the command line.
C	Up to 4 RCP files may be opened at any one time.
C
	IMPLICIT NONE
C
***	COMMON/LSL$CMNROVER:RCP/
***	COMMON/LSL$CMNROVER:ROVCMN/
C
C	Local
	INTEGER*4		RCP_LUN		! RCP LUN number
	INTEGER*4		RETVAL		! Return code
	INTEGER*4		I		! counter
	CHARACTER*255		RCP_TRANSLATION	! LSL$RCP translated
	BYTE			CH		! single character
C
C	Functions
	INTEGER*4		GETFILNAM	! to parse filename
	INTEGER*4		TRNALL		! translate log name
	LOGICAL			RDCHS		! read a character
	INTEGER*4		FLROPN		! open the file for read
	INTEGER*4		FLRCLO		! close the file
	LOGICAL			READ_RCP_FILE	! read contents of RCP
C
C-----------------------------------------------------------------------
C
C	Check we are in registration mode
	IF(.NOT.REGISTERING)THEN
	  CALL WRITEF('%S Specifying command OPEN RCP_FILE',EBELL)
	  CALL WRITEF('Command only valid in REGISTRATION mode')
	  GOTO 999
	ENDIF
C
C-----------------------------------------------------------------------
c
C	Check for a file specification
	IF(RDCHS(CH))THEN
	  CALL WRITEF('%S Specifying command OPEN RCP_FILE',EBELL)
	  CALL WRITEF('RCP Filename is missing')
	  OPEN_RCP_FILE=.FALSE.
	  GOTO 999	  
	ENDIF
C
	CALL BSCH
C----------------------------------------------------------------------
C
C	Check that we have not exceeded the maximum number of RCP files
	IF(TOTAL_RCP_FILES.EQ.MAX_RCP_FILES)THEN
	  CALL WRITEF('%S Specifying command OPEN RCP_FILE',EBELL)
	  CALL WRITEF('Maximum number of RCP files already open')
	  CALL WRITEF('Use the CLOSE RCP_FILE command to close a file')
	  OPEN_RCP_FILE=.FALSE.
	  GOTO 999
	ENDIF
C
C----------------------------------------------------------------------
C
C	Get the next free RCP slot
	DO 100 I=1,MAX_RCP_FILES
	   IF(.NOT.RCP_LUN_INUSE(I))GOTO 150
100	CONTINUE
C
	CALL WRITEF('%S Specifying command OPEN RCP_FILE',EBELL)
	CALL WRITEF('No free RCP LUN')
	OPEN_RCP_FILE=.FALSE.
	GOTO 999
C
150	RCP_LUN=I
C----------------------------------------------------------------------
C
C	Check that the logical name LSL$RCP can be translated
C	and parse the RCP filename
	RETVAL = TRNALL('LSL$RCP',RCP_TRANSLATION)
C
	IF(.NOT.RETVAL)THEN
	  RETVAL = GETFILNAM(RCP_FILE_NAME(RCP_LUN),
     &                    RCP_FILE_LENGTH(RCP_LUN),
     &                    'RCP.RCP',
     &                    .TRUE.)
	ELSE
	  RETVAL = GETFILNAM(RCP_FILE_NAME(RCP_LUN),
     &                    RCP_FILE_LENGTH(RCP_LUN),
     &                    'LSL$RCP:RCP.RCP',
     &                    .TRUE.)
	ENDIF	  	  
C
C	Has the parsing been successful?
	IF(.NOT.RETVAL)THEN
	  CALL LSL_PUTMSG(RETVAL)
	  OPEN_RCP_FILE=.FALSE.
	  GOTO 999
	ENDIF
C
C----------------------------------------------------------------------
C	Open the sequential RCP file
C	This is opened read only, and this copy of the file
C	will be overwritten on closing.
C
	RETVAL=FLROPN(RCP_LUN,
     &             RCP_FILE_NAME(RCP_LUN)(1:RCP_FILE_LENGTH(RCP_LUN)))
	IF(.NOT.RETVAL)THEN
	  CALL LSL_PUTMSG(RETVAL)
	  OPEN_RCP_FILE=.FALSE.
	  GOTO 999
	ENDIF
C
	RCP_LUN_INUSE(RCP_LUN)=.TRUE.
C----------------------------------------------------------------------
C	Read the contents
	RETVAL=READ_RCP_FILE(RCP_LUN)
	IF(.NOT.RETVAL)THEN
	  CALL LSL_PUTMSG(RETVAL)
	  OPEN_RCP_FILE=.FALSE.
	  RETVAL=FLRCLO(RCP_LUN)
	  RCP_LUN_INUSE(RCP_LUN)=.FALSE.
	  GOTO 999
	ENDIF
C
C----------------------------------------------------------------------
C	Now close the file
	RETVAL=FLRCLO(RCP_LUN)
	IF(.NOT.RETVAL)THEN
	  CALL LSL_PUTMSG(RETVAL)
	  OPEN_RCP_FILE=.FALSE.
	  GOTO 999
	ENDIF
C
C	Indicate that it must next be opened for update
	CREATE(RCP_LUN)=.FALSE.
C
C	Increment count of total number of RCP files
	TOTAL_RCP_FILES=TOTAL_RCP_FILES+1
C
C	Select this RCP file for registration
	CURRENT_RCP_FILE=RCP_LUN
C	
C	Set current RCP pointer to the next RCP entry
	CURRENT_RCP(RCP_LUN)=TOTAL_RCPS(RCP_LUN)+1
C
C	Output confirmation message
	CALL WRITEF
     &  ('File %S opened as RCP File Number %N',
     &    RCP_FILE_NAME(RCP_LUN)(1:RCP_FILE_LENGTH(RCP_LUN)),
     &    RCP_LUN)
C
C----------------------------------------------------------------------
C	Signal success
	OPEN_RCP_FILE=.TRUE.
C
999	RETURN
C
	END
