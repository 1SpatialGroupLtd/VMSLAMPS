	LOGICAL FUNCTION OPNOUT
C
***	MODULE	OPNOUT
**	IDENT	13JA89
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    05-Aug-1986
C
	IMPLICIT NONE
C
C Opens and initialises an IFF file for output. Fills out appropriate 
C dummy values. Corner points are derived either from an opened IFF file
C or from the DTI file corners if an input IFF file has not been 
C specified.
C
C Common Blocks
	INCLUDE	'LSL$CMNLSL:TXTC.CMN'
	INCLUDE	'LSL$CMNLSL:EXPC.CMN'
	INCLUDE	'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE	'LSL$CMNROVER:IFFCMN.CMN'
	INCLUDE	'LSL$CMNROVER:FPPDAT.CMN'
	INCLUDE	'LSL$CMNROVER:DTICMN.CMN'
	INCLUDE	'LSL$CMNROVER:ROVCMN.CMN'
	INCLUDE	'LSL$CMNROVER:DIGCMN.CMN'
	INCLUDE	'LSL$CMNDTI:DTIHDR.CMN'
	INCLUDE	'LSL$CMNDTI:DTIPROJ.CMN'
        INCLUDE 'LSL$CMNIFF:MD2DES.CMN'	! IFF map descriptor information
C
C workspace
	PARAMETER	MHLEN = 350	! map header
	PARAMETER	MDLEN = 31	!     descriptor
C
	REAL		CPARR(4,4)	! corner points
	REAL		CCARR(2,10)	! calib coeffs
	INTEGER*2	IELEN
	INTEGER*2	MAPHED(MHLEN)	! map header
	INTEGER*2	MAPDES(MDLEN)	!     descriptor
	INTEGER*4	PSDSTR(2)	! Pseudo string descriptor
	INTEGER*4	IERR
	INTEGER*4	RET
	INTEGER*2	LEN
	LOGICAL		ERR
	CHARACTER*128	OUT_IFFNAM
	INTEGER*4	FAKSTR(2)
	INTEGER*2	FAKLEN
	BYTE		FAKBUF(128)
	BYTE		CH
	INTEGER*2	OVERNO
	REAL		RANGE(4)
	INTEGER*4	I
C
	EQUIVALENCE	(FAKLEN,FAKSTR(1))
C
C functions
	INTEGER*4	READSTR
	INTEGER*4	PARFILN
	LOGICAL		RDCHS
	INTEGER*4	IFFCREATE
C
	DATA		MAPDES(1)/-1/
	DATA		CCARR/0.0,1.0,8*0.0,
     &			      2*0.0,1.0,7*0.0/
C
C***********************************************************************
C
	OPNOUT =.TRUE.			! initial assumption
	IF (PLOT_IFF) THEN
	   CALL WRITEF('%S Specifying command OPNOUT',EBELL)
	   CALL WRITEF
     &	('Output IFF file already open')
	   GOTO 1000
	ENDIF
C
	FAKSTR(2)=%LOC(FAKBUF)		! set up fake string descriptor
C
C	Check for optional quotes
	IF(RDCHS(CH))THEN
	  CALL WRITEF('%S specifying command OUTPUT',EBELL)
	  CALL WRITEF('Filename is missing')
	  GOTO 1000	  
	ELSE
	  FAKLEN=128
	  IF(CH.EQ.34.OR.CH.EQ.39)THEN
	    FAKLEN=READSTR(FAKSTR,CH)
	  ELSE
	    CALL BSCH
	    FAKLEN=READSTR(FAKSTR,' ')
	  ENDIF
	ENDIF
C
C	Parse the file name:
	RET=PARFILN(OUT_IFFNAM,FAKLEN,FAKSTR,'LSL$IF:.IFF',
     &	.TRUE.)
	IF(.NOT.RET)THEN
	  CALL WRITEF('%S specifying command OUTPUT',EBELL)
	  CALL LSL_PUTMSG(RET)
	  GOTO 1000
	ENDIF
C
C open file
	RET = IFFCREATE(1,OUT_IFFNAM(1:FAKLEN),,,)
	IF (.NOT. RET ) THEN
	  GOTO 1000
	ENDIF
	CALL WRITEF('IFF file %S opened for output',
     &	  OUT_IFFNAM(1:FAKLEN))
C
C put the standard stuff in
	IF (.NOT.HADIFF(IFFCHAN)) THEN
C
C get appropriate  digitising units
	   DIG_UNITS = 0
	   CALL DTI_UNITS(DTICHAN,DIG_UNITS)
C
C transform the corners of the DTI file into plotting units
	   CALL TRANSFORM_DTI(DTICHAN,1.0,1.0,
     &     RUNNING_RANGE(1,IFFCHAN),RUNNING_RANGE(3,IFFCHAN))
	   CALL TRANSFORM_DTI(DTICHAN,X_EXTENT(DTICHAN),
     &     Y_EXTENT(DTICHAN),
     &     RUNNING_RANGE(2,IFFCHAN),RUNNING_RANGE(4,IFFCHAN))
C 
	   DO 30 I = 1,3,2
	      CNRS(I,1,IFFCHAN) = RUNNING_RANGE(1,IFFCHAN)
	      CNRS(I,2,IFFCHAN) = RUNNING_RANGE(1,IFFCHAN)
	      CNRS(I,3,IFFCHAN) = RUNNING_RANGE(2,IFFCHAN)
	      CNRS(I,4,IFFCHAN) = RUNNING_RANGE(2,IFFCHAN)
	      CNRS((I+1),1,IFFCHAN) = RUNNING_RANGE(4,IFFCHAN)
	      CNRS((I+1),2,IFFCHAN) = RUNNING_RANGE(3,IFFCHAN)
	      CNRS((I+1),3,IFFCHAN) = RUNNING_RANGE(3,IFFCHAN)
	      CNRS((I+1),4,IFFCHAN) = RUNNING_RANGE(4,IFFCHAN)
30	   CONTINUE
C
C blank MD
	   DO 125 I = 2,MD2LEN
	      MD2ARR(I) = 0
125	   CONTINUE
C
C fill stuff from DTI DTI projection record
	   IF(HAD_PROJ_RECORD(DTICHAN)) THEN
	      MD2LOC(1) = DTIPROJ_ORIGIN(1,DTICHAN)
	      MD2LOC(2) = DTIPROJ_ORIGIN(2,DTICHAN)
	      MD2PRJ = DTIPROJ_PROJECTION(DTICHAN) 
	      MD2UNT = DTIPROJ_UNITS(DTICHAN)
	      MD2SPH = DTIPROJ_SPHEROID(DTICHAN)
	      MD2USP(1) = DTIPROJ_USER_SPHEROID(1,DTICHAN)
	      MD2USP(2) = DTIPROJ_USER_SPHEROID(2,DTICHAN)
	      DO 127 I = 1,15
		 MD2PAR(I) = DTIPROJ_PROJ_PARAMS(I,DTICHAN)
127	      CONTINUE
	   ELSE
	      IF (DIG_UNITS .EQ. 3 .OR. DIG_UNITS .EQ. 4) THEN
	         MD2LOC(2) = LATREC(1,DTICHAN)
	         MD2LOC(1) = LONREC(1,DTICHAN)
	      ELSE
	         MD2LOC(1) = X_OFFSET(DTICHAN)	      
	         MD2LOC(2) = Y_OFFSET(DTICHAN)	      
	      ENDIF
	   ENDIF
	ELSE
C
C set up start values for range reset as digitising takes place	  
	   RUNNING_RANGE(1,IFFCHAN) = RANGE_VALUES(2,IFFCHAN)
	   RUNNING_RANGE(2,IFFCHAN) = RANGE_VALUES(1,IFFCHAN)
	   RUNNING_RANGE(3,IFFCHAN) = RANGE_VALUES(4,IFFCHAN)
	   RUNNING_RANGE(4,IFFCHAN) = RANGE_VALUES(3,IFFCHAN)
	ENDIF
C
C
	OUTPUT_ORIGIN(1) = MD2LOC(1)
	OUTPUT_ORIGIN(2) = MD2LOC(2)
	CALL IFFRA(RANGE_VALUES(1,IFFCHAN))
	CALL IFFHI
	CALL IFFMH(MAPHED, MHLEN)
	MD2ARR(1) = 2
	CALL IFFMD(MD2ARR,MD2LEN)
	CALL IFFNS('Created by ROVER')
	CALL IFFCC(CCARR)
	CALL IFFCP(CNRS(1,1,IFFCHAN))
	LPOSNO = LPOSE
	CALL IFFNO(CURLAY,0,0)
C
C initialise markers
	INFT = .FALSE.		!not in a feature
	FTNO = 1		!initialise feature counter
	PLOT_IFF = .TRUE.
	CURFC = 0
C
1000	RETURN
	END	
