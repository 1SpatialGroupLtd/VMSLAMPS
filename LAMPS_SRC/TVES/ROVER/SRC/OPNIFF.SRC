C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-03-31 15:35:08.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION OPNIFF(IFF_NUM)
C
***	IDENT	22DE88
***	MODULE	OPNIFF
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C	Created   : 23MY85
C	Author    : D R Catlow
C
C	Modified for ROVER				MWSR	Jul-1986
C
C	Routine for DTVIEW to open an IFF file containing culture/
C	contour data to be overlaid on the terrain model. 
C	Also calculates transformation matrix for IFF 
C	to DTI registration. 
C
	IMPLICIT NONE
C
C data in
	INTEGER*4	IFF_NUM		! IFF channel
C
C commons
	INCLUDE	'LSL$CMNLSL:TXTC.CMN'
	INCLUDE	'LSL$CMNLSL:EXPC.CMN'
	INCLUDE	'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE	'LSL$CMNROVER:IFFCMN.CMN'
	INCLUDE	'LSL$CMNROVER:FPPDAT.CMN'
	INCLUDE	'LSL$CMNROVER:DTICMN.CMN'
	INCLUDE	'LSL$CMNROVER:ROVCMN.CMN'
	INCLUDE 'LSL$CMNIFF:MD2DES.CMN'	! IFF type 2 map descriptor info
C
C
C workspace
	INTEGER*2	IELEN
	INTEGER*4	PSDSTR(2)	! Pseudo string descriptor
	INTEGER*4	IERR
	INTEGER*4	RET
	INTEGER*2	LEN
	LOGICAL		ERR
	INTEGER*4	FAKSTR(2)
	INTEGER*2	FAKLEN
	BYTE		FAKBUF(128)
	BYTE		CH
C
	EQUIVALENCE	(FAKLEN,FAKSTR(1))
C
C functions
	INTEGER*4	READSTR
	INTEGER*4	PARFILN
	LOGICAL		RDCHS
	INTEGER*4	IFFOPEN
C
C***********************************************************************
C
	OPNIFF = .FALSE.		! initial assumption
	FAKSTR(2) = %LOC(FAKBUF)	! set up fake string descriptor
C
C Check for optional quotes
	IF (RDCHS(CH)) THEN
	  CALL WRITEF('%S specifying command IFF',EBELL)
	  CALL WRITEF('Filename is missing')
	  GOTO 999	  
	ELSE
	  FAKLEN = 128
	  IF (CH.EQ.34.OR.CH.EQ.39) THEN
	    FAKLEN = READSTR(FAKSTR,CH)
	  ELSE
	    CALL BSCH
	    FAKLEN = READSTR(FAKSTR,' ')
	  END IF
	END IF
C
	CALL IFFTDY
	CALL IFFERM(.FALSE.)
C Parse the file name:
	RET = PARFILN(IFFNAM(IFF_NUM),FAKLEN,FAKSTR,'LSL$IF:.IFF',
     &	 .TRUE.)
	IF (.NOT.RET) THEN
	  CALL WRITEF('%S specifying command IFF',EBELL)
	  CALL LSL_PUTMSG(RET)
	  GOTO 999
	END IF
C
C Open the input file:
	IF (HADIFF(IFFCHAN))CALL IFFCLO(3)
C
C Open with revision level of 1
	RET = IFFOPEN(3,IFFNAM(IFF_NUM)(1:FAKLEN),,,1)
	IF (RET) THEN
	  CALL WRITEF('IFF file %S selected as input',
     &	    IFFNAM(IFF_NUM)(1:FAKLEN))
	  OPNIFF = .TRUE.
	  HADIFF(IFFCHAN) = .TRUE.
C
C Read in RANGE
	  CALL IFFRWD
	  CALL IFFNXC ('RA',IELEN)
	  CALL EIHRR(RANGE_VALUES(1,IFFCHAN),IELEN/2,1)
C
C get local origin from type 2 MD
	  MATV2  = -1			! initially unset
	  CALL IFFNXC('MD',IELEN)
	  ORIGIN_OFFSET(1,IFFCHAN) = 0
	  ORIGIN_OFFSET(2,IFFCHAN) = 0
	  IF (IELEN .EQ. MD2LEN) THEN		! type 2 MD
	     CALL EIHR(MD2ARR,MD2LEN,1)		! read entry
	     ORIGIN_OFFSET(1,IFFCHAN) = MD2LOC(1)
	     ORIGIN_OFFSET(2,IFFCHAN) = MD2LOC(2)
	  ENDIF
C
C Read in map corners
	  CALL IFFNXC ('CP',IELEN)
	  CALL EIHRR(CNRS,IELEN/2,1)
C
C set up the iff window 
	  CALL SET_IFFWIN
C
C set up IFF coords of DTI extents
	  CALL SET_IFFDTI
C
	  HADWIN = .FALSE.
C	  TRACKING = .FALSE.	!not registered IFF file to map
C
	ELSE
	  HADIFF(IFFCHAN) = .FALSE.
	END IF	  
C
999	CALL IFFERM(.TRUE.)
C
	IFFLEN(IFF_NUM) = FAKLEN
	RETURN
	END
