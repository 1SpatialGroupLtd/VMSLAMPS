C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-11-17 15:46:06.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL	FUNCTION READ_RCP_FILE(RCP_LUN)
C
***	IDENT	17NO88
***	MODULE	READ_RCP_FILE
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C	Created   : D R Catlow                   14-November-1988
C
C	Function to read the contents of a RCP file opened on
C	lun RCP_LUN.
C	The contents are read into the common RCP.
C
C	RCP file has format as follows:
C
C	* '!' denotes a comment line 
C	* Line 2 may have a date of creation
C	* Line 3 may have a data of modification
C	* First uncommented line is source file specification
C	* Remaining uncommented lines each hold data for a single RCP.
C
C	  The format of a RCP is:
C	  FORMAT(A10,2X,A2,4X,F18.8,2X,F18.8,2X,F18.8,5X,F7.3,3X,F7.3)
C	  The order of data is:
C	  ID, TYPE, X, Y, Z, XY_WEIGHT, Z_WEIGHT
C
C---------------------------------------------------------------------------
C
	IMPLICIT NONE
C
C	Argument
	INTEGER*4		RCP_LUN		! which RCP file
C
***	PARAMETER/LSL$CMNLSL:READSTR/
***	PARAMETER/LSL$CMNLSL:LSLLIBMSG/
C
***	COMMON/LSL$CMNROVER:RCP/		! has HAD_FIL_RCP
***	COMMON/LSL$CMNROVER:ROVCMN/
C
C	Local
	INTEGER*4		RETVAL		! function return
	INTEGER*4		IERR		! error code
	INTEGER*4		RCP_NUMBER	! RCP count
	INTEGER*4		LINE_NUMBER	! Line number count
	INTEGER*4		NCHS		! number of chs read
	CHARACTER*8		STRING		! temp. ch. string
	BYTE			CH		! single character
C
C	Functions
	INTEGER*4		FLRREW		! rewind to beg of file
	INTEGER*4		FLRLIN		! read a line
	INTEGER*4		RDCHS		! read a character
	INTEGER*4		READSTR		! read a string
	INTEGER*4		RDDBLE		! read real*8
C
C-----------------------------------------------------------------------
C
C	Check that the RCP LUN is valid
	IF(RCP_LUN.LT.1.OR.RCP_LUN.GT.MAX_RCP_FILES)THEN
	  READ_RCP_FILE=.FALSE.
	  GOTO 999
	ENDIF
C
C	Check a file is opened on this RCP LUN
	IF(.NOT.RCP_LUN_INUSE(RCP_LUN))THEN
	  READ_RCP_FILE=.FALSE.
	  GOTO 999
	ENDIF
C
C----------------------------------------------------------------------
C	Rewind to be sure we are at the beginning of the file
	RETVAL = FLRREW(RCP_LUN)
	IF(RETVAL.NE.LSL__NORMAL)THEN
	  CALL LSL_PUTMSG(RETVAL)
	  READ_RCP_FILE=.FALSE.
	  GOTO 999
	ENDIF
C
	LINE_NUMBER=0
	RCP_NUMBER=0
C
C	Read the lines sequentially until the end of file
C	The lines are read into TXTBUF
	CALL SET_TXTLIM(132)
C
100	RETVAL = FLRLIN(,,132)
	IF(RETVAL.NE.LSL__NORMAL)THEN
	  IF(RETVAL.EQ.LSL__EOF)GOTO 500
	  CALL LSL_PUTMSG(RETVAL)
	  READ_RCP_FILE=.FALSE.
	  GOTO 999
	ENDIF
C
	LINE_NUMBER=LINE_NUMBER+1
C
	IF(LINE_NUMBER.EQ.1)GOTO 100		!skip the first line
C
C	Decode the line
C	Comment lines are indicated by a !
	CALL BSLN
C
	IF(RDCHS(CH))GOTO 100
C
	IF(CH.EQ.'!')THEN
	  IF(LINE_NUMBER.EQ.2.OR.LINE_NUMBER.EQ.3)THEN
C	Possibly a creation or modified date
	    NCHS = READSTR(STRING,'!',ON_SPACE)	    	    
	    IF(NCHS.EQ.0)GOTO 100	!no creation date
	    IF     (STRING.EQ.'Created ')THEN
	      CALL BSLN
	      NCHS = READSTR(RCP_CREATED(RCP_LUN,1))
	    ELSE IF(STRING.EQ.'Modified')THEN
	      CALL BSLN
	      NCHS = READSTR(RCP_MODIFIED(RCP_LUN,1))
	    ENDIF
	  ENDIF
	  GOTO 100
	ENDIF
C
C-----------------------------------------------------------------------
C	Check we haven't got too many RCPs
	IF (RCP_NUMBER+1.GT.MAX_RCPS) THEN
	  CALL WRITEF('%S Reading RCP file %N',EBELL, RCP_LUN)
	  CALL WRITEF('File contains more than %N RCPS',MAX_RCPS)
	  READ_RCP_FILE=.FALSE.
	  GOTO 999			! return failure
	ENDIF
C
C	Read an RCP entry
	CALL BSLN
C
C 	Read ID 
	CALL SETWIN(1,10)
	RCP_ID(RCP_LUN,RCP_NUMBER+1)='         '
	NCHS = READSTR(RCP_ID(RCP_LUN,RCP_NUMBER+1),,ON_SPACE,,IERR)
C
	IF (NCHS.LE.0) THEN
	  CALL WRITEF('%S Reading RCP file %N',EBELL, RCP_LUN)
	  CALL WRITEF('RCP identifier missing for RCP number %N',
     &                 RCP_NUMBER+1)
	  READ_RCP_FILE=.FALSE.
	  GOTO 999
	ENDIF
C
C 	Read TYPE
	CALL SETWIN(13,2)
	RCP_TYPE(RCP_LUN,RCP_NUMBER+1)='  '
	NCHS = READSTR(RCP_TYPE(RCP_LUN,RCP_NUMBER+1),,ON_SPACE,,IERR)
C
	IF (NCHS.LE.0) THEN
	  CALL WRITEF('%S Reading RCP file %N',EBELL, RCP_LUN)
	  CALL WRITEF('RCP Type missing for RCP number %N',
     &                 RCP_NUMBER+1)
	  READ_RCP_FILE=.FALSE.
	  GOTO 999
	ENDIF
C
C 	Read X
	CALL SETWIN(19,18)
	RETVAL = .NOT.RDDBLE(RCP_X(RCP_LUN,RCP_NUMBER+1))
	IF (.NOT.RETVAL) THEN
	  CALL WRITEF('%S Reading RCP file %N',EBELL, RCP_LUN)
	  CALL WRITEF('X value for RCP number %N has invalid format',
     &                 RCP_NUMBER+1)
	  READ_RCP_FILE=.FALSE.
	  GOTO 999
	ENDIF
C
C 	Read Y 
	CALL SETWIN(39,18)
	RETVAL = .NOT.RDDBLE(RCP_Y(RCP_LUN,RCP_NUMBER+1))
	IF (.NOT.RETVAL) THEN
	  CALL WRITEF('%S Reading RCP file %N',EBELL, RCP_LUN)
	  CALL WRITEF('Y value for RCP number %N has invalid format',
     &                 RCP_NUMBER+1)
	  READ_RCP_FILE=.FALSE.
	  GOTO 999
	ENDIF
C
C 	Read Z 
	CALL SETWIN(59,18)
	RETVAL = .NOT.RDDBLE(RCP_Z(RCP_LUN,RCP_NUMBER+1))
	IF (.NOT.RETVAL) THEN
	  CALL WRITEF('%S Reading RCP file %N',EBELL, RCP_LUN)
	  CALL WRITEF('Z value for RCP number %N has invalid format',
     &                 RCP_NUMBER+1)
	  READ_RCP_FILE=.FALSE.
	  GOTO 999
	ENDIF
C
C 	Read XY weight
	CALL SETWIN(82,7)
	RETVAL = .NOT.RDDBLE(RCP_WXY(RCP_LUN,RCP_NUMBER+1))
	IF (.NOT.RETVAL) THEN
	  CALL WRITEF('%S Reading RCP file %N',EBELL, RCP_LUN)
	  CALL WRITEF('XY weight value for RCP number %N has invalid format',
     &                 RCP_NUMBER+1)
	  READ_RCP_FILE=.FALSE.
	  GOTO 999
	ENDIF
C
C 	Read Z weight
	CALL SETWIN(92,7)
	RETVAL = .NOT.RDDBLE(RCP_WZ(RCP_LUN,RCP_NUMBER+1))
	IF (.NOT.RETVAL) THEN
	  CALL WRITEF('%S Reading RCP file %N',EBELL, RCP_LUN)
	  CALL WRITEF('Z weight value for RCP number %N has invalid format',
     &                 RCP_NUMBER+1)
	  READ_RCP_FILE=.FALSE.
	  GOTO 999
	ENDIF
C
	RCP_NUMBER=RCP_NUMBER+1
C
	GOTO 100		!get the next line (RCP)
C
C------------------------------------------------------------------------
C	Signal success
C
500	TOTAL_RCPS(RCP_LUN)=RCP_NUMBER
	READ_RCP_FILE=.TRUE.
C
999	RETURN
C
	END
