C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-02-16 15:01:00.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE ZOOM(FACTOR)
C
***	MODULE	ZOOM
***	IDENT	16FE89
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    11-Jan-1988
C
C resets the window depending on the zoom factor
C
	IMPLICIT NONE
C
C argument
	REAL		FACTOR
C
C Common Blocks
	INCLUDE	'LSL$CMNROVER:GKSPAR.PAR'
C
	INCLUDE	'LSL$CMNROVER:DTICMN.CMN'
	INCLUDE	'LSL$CMNROVER:ROVCMN.CMN'
	INCLUDE	'LSL$CMNROVER:DISCMN.CMN'
	INCLUDE	'LSL$CMNROVER:RASTED.CMN'
	INCLUDE	'LSL$CMNROVER:IFFCMN.CMN'
	INCLUDE	'LSL$CMNDTI:DTIHDR.CMN'
	INCLUDE	'LSL$CMNROVER:COLCMN.CMN'
	INCLUDE	'LSL$CMNROVER:GKS.CMN'
C
C Local Variables
	REAL		X_DTI_CENTRE	! DTI central coords
	REAL		Y_DTI_CENTRE
	REAL		NEWSF		! new scale factor
	INTEGER*4	TEMPX,TEMP2X
	INTEGER*4	TEMP2Y,TEMPY
	INTEGER*4	S_DTI_X,S_DTI_Y
	INTEGER*4	N_DTI_X,N_DTI_Y
	REAL		X_SCALE,Y_SCALE	! scale factors
	INTEGER*4	DTI_TRANSLATION_X	! translations
	INTEGER*4	DTI_TRANSLATION_Y 
	REAL		X(2),Y(2)
	REAL		X_MAX_EXTENT
	REAL		Y_MAX_EXTENT
	INTEGER*4	OLD_DTI(2,2)	!  old DTI file window
	INTEGER*4	NEW_DTI(2,2)	!  new DTI file window
C
C save a copy of current window settings
	S_DTI_X  = DTI_WINDOW_SWX(DTICHAN)
	S_DTI_Y  = DTI_WINDOW_SWY(DTICHAN)
	N_DTI_X  = DTI_WINDOW_NEX(DTICHAN)
	N_DTI_Y  = DTI_WINDOW_NEY(DTICHAN)
C 
C  if we're in edit mode then we zoom about the current DTI cursor
C  position
	NEWSF = SF(DTICHAN) * FACTOR
C
C work out maximum extents of new window
	X_MAX_EXTENT = REAL(MATSIZ(DTICHAN,1))/FACTOR
	Y_MAX_EXTENT = REAL(MATSIZ(DTICHAN,2))/FACTOR
C
	IF (.NOT.(EDITING.OR.REGISTERING))THEN 
	   X_DTI_CENTRE = 
     &     REAL(DTI_WINDOW_NEX(DTICHAN)+DTI_WINDOW_SWX(DTICHAN))/2 
	   Y_DTI_CENTRE = 
     &     REAL(DTI_WINDOW_NEY(DTICHAN)+DTI_WINDOW_SWY(DTICHAN))/2
	ELSE
	   X_DTI_CENTRE = REAL(X_CURDTI)
	   Y_DTI_CENTRE = REAL(Y_CURDTI)
	ENDIF
C
C work out the new windows 
C
C	TEMPX  = INT(X_DTI_CENTRE+0.5) - INT(X_MAX_EXTENT/2)
C	TEMPY  = INT(Y_DTI_CENTRE+0.5) - INT(Y_MAX_EXTENT/2)
C	TEMP2X = INT(X_DTI_CENTRE-0.5) + INT(X_MAX_EXTENT/2)
C	TEMP2Y = INT(Y_DTI_CENTRE-0.5) + INT(Y_MAX_EXTENT/2)
C
	TEMPX  = INT(X_DTI_CENTRE+0.5) - NINT(X_MAX_EXTENT/2)
	TEMPY  = INT(Y_DTI_CENTRE+0.5) - NINT(Y_MAX_EXTENT/2)
	TEMP2X = INT(X_DTI_CENTRE-0.5) + NINT(X_MAX_EXTENT/2)
	TEMP2Y = INT(Y_DTI_CENTRE-0.5) + NINT(Y_MAX_EXTENT/2)
C
	IF (((TEMP2X - TEMPX).LT. 2) .OR. 
     &	    ((TEMP2Y - TEMPY).LT. 2))THEN
	   CALL WRITEF
     &	('%S Specified zoom factor too large',WBELL)
	   GOTO 1000
	ENDIF
C
C ensure that the window does not get unnecessarily smaller
C near the edges of the matrix
	IF (TEMP2X .GT. X_EXTENT(DTICHAN)) THEN
	   IF (TEMPX .GT. 1) THEN
	      TEMPX = X_EXTENT(DTICHAN) - X_MAX_EXTENT +1
	   ENDIF
	ENDIF
	IF (TEMPX .LT. 1) THEN
	   IF (TEMP2X .LT. X_EXTENT(DTICHAN)) THEN
	      TEMP2X = X_MAX_EXTENT
	   ENDIF
	ENDIF
	IF (TEMP2Y .GT. Y_EXTENT(DTICHAN)) THEN
	   IF (TEMPY .GT. 1) THEN
	      TEMPY = Y_EXTENT(DTICHAN) - Y_MAX_EXTENT +1
	   ENDIF
	ENDIF
	IF (TEMPY .LT. 1) THEN
	   IF (TEMP2Y .LT. Y_EXTENT(DTICHAN)) THEN
	      TEMP2Y = Y_MAX_EXTENT
	   ENDIF
	ENDIF
C
C keep a record of current settings
	OLD_DTI(1,1) = DTI_WINDOW_SWX(DTICHAN)
	OLD_DTI(2,1) = DTI_WINDOW_NEX(DTICHAN)
	OLD_DTI(1,2) = DTI_WINDOW_SWY(DTICHAN)
	OLD_DTI(2,2) = DTI_WINDOW_NEY(DTICHAN)
C
C set up the new window
	DTI_WINDOW_SWX(DTICHAN) = MAX(TEMPX,1)
	DTI_WINDOW_NEX(DTICHAN) = MIN(TEMP2X,X_EXTENT(DTICHAN))
	DTI_WINDOW_SWY(DTICHAN) = MAX(TEMPY,1)
	DTI_WINDOW_NEY(DTICHAN) = MIN(TEMP2Y,Y_EXTENT(DTICHAN))
C
	MATSIZ(DTICHAN,1)=
     &  (DTI_WINDOW_NEX(DTICHAN)-DTI_WINDOW_SWX(DTICHAN))+1
	MATSIZ(DTICHAN,2)=
     &  (DTI_WINDOW_NEY(DTICHAN)-DTI_WINDOW_SWY(DTICHAN))+1
C
C Check window size against display
	CALL CHKWIN(DTICHAN)
C
C clear the vectors if they're there
	IF (VEC_SHOWN(CURPOS)) THEN
	   CALL LSG_PLANE_SELECT(WKID,.NOT.(PLANE_MASK))
	   CALL LSG_PLANE_OFFSET(WKID,NOPLNS)
	   CALL GSFACI(0)		! fill area colour 0
	   CALL GSFAIS(GSOLID)		! solid fill
	   X(1) = SX(CURPOS)
	   X(2) = EX(CURPOS)
	   Y(1) = SY(CURPOS)
	   Y(2) = EY(CURPOS)
	   CALL LSG_FILL_RECTANGLE(X,Y)
	   CALL GUWK(WKID,GSUPP)
	ENDIF
C
C redisplay
	CALL DISPLY(CURPOS,DTICHAN)
C  	   
	IF (HADIFF(IFFCHAN)) THEN
C
C work out new IFF window
	   NEW_DTI(1,1) = DTI_WINDOW_SWX(DTICHAN)
	   NEW_DTI(2,1) = DTI_WINDOW_NEX(DTICHAN)
	   NEW_DTI(1,2) = DTI_WINDOW_SWY(DTICHAN)
	   NEW_DTI(2,2) = DTI_WINDOW_NEY(DTICHAN)
	   CALL RESET_IFFWIN
     &     (OLD_DTI,NEW_DTI,WIND(1,1,IFFCHAN),WIND(1,1,IFFCHAN),
     &      CUR_ROTATE(DTICHAN))
C
	   IF (VEC_SHOWN(CURPOS)) THEN
C
C do the vector drawing  if vectors there before
	      CALL PLTIFF
	   ENDIF
C
	ENDIF
C
C
1000	RETURN
	END

