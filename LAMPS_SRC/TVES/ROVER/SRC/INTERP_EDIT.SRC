C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-01-24 12:26:22.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE INTERP_EDIT(PIX1_ARG,NPIX1_ARG,HGT1,NEWHGT1,
     +	                       PIX2_ARG,NPIX2_ARG,HGT2,NEWHGT2)
C
***	IDENT 24JA89
***	MODULE INTERP_EDIT
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C
C	Author	  : ACM - Modified for Rover - MWSR
C
	IMPLICIT NONE
C
C commons
	INCLUDE	'LSL$CMNROVER:GKS.CMN'
	INCLUDE	'LSL$CMNROVER:COLCMN.CMN'
	INCLUDE	'LSL$CMNROVER:RASTED.CMN'
	INCLUDE	'LSL$CMNROVER:DTICMN.CMN'
	INCLUDE	'LSL$CMNROVER:ROVCMN.CMN'
C
C arguments 
	INTEGER		NPIX1_ARG	! no of pixels in first line
	INTEGER		NPIX2_ARG	! no of pixels in second line
	INTEGER		PIX1_ARG(2,MAXEDT)	! DTI coords of line 1
	INTEGER         PIX2_ARG(2,MAXEDT)	! DTI coords of line 2
	REAL		HGT1,HGT2	! new heights
	LOGICAL 	NEWHGT1,NEWHGT2	! change hgts in paths 1 and 2 ?
C
C workspace
	INTEGER		NPIX1	! no of pixels in first line
	INTEGER		NPIX2	! no of pixels in second line
	INTEGER		PIX1(2,MAXEDT)	! DTI coords of line 1
	INTEGER         PIX2(2,MAXEDT)	! DTI coords of line 2
	INTEGER		PIX(2,MAXEDT)	! DTI coords of pixels along
					! interpolation line betw br lns
	INTEGER		I,I1,I2
	INTEGER		NPIX		! No of pixels in PIX
	INTEGER		I_PIX,J_PIX,K_PIX	! pixel counts
	INTEGER		V(2,2)		! interpolation line
	REAL		HGT		! a DTI height
C
	REAL		RX,DX,DY,DH,G	! working reals
	REAL		RATIO		! ratio of NPIX2:NPIX1
C
	LOGICAL		L1		! temp logical value
	INTEGER		IHGT		! integer height
	BYTE		NEWCOL		! col of pixel
	INTEGER*4	XSIGN		! sign for drawing direction
	INTEGER		XPOS,YPOS	! drawing pos on screen
C
C functions
	REAL		GET_DTI_VAL	! returns DTI value as real
	INTEGER		ICOL
C
C:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
C
C	Edits the area between two break-lines, using linear
C	interpolation along a line from each pixel in the line with
C	the greater number of pixels to the corresonding pixel in
C	the other line.
C
C	Heights in the break-lines themselves are not changed to heights
C	given unless NEWHGT is true.
C
C:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
C
C
C copy into local arrays to avoid funny things happening
	NPIX1=NPIX1_ARG
	DO 100 I = 1,NPIX1
	   PIX1(1,I) = PIX1_ARG(1,I)
	   PIX1(2,I) = PIX1_ARG(2,I)
100	CONTINUE
C
	NPIX2 = NPIX2_ARG
	DO 105 I = 1,NPIX2
	   PIX2(1,I) = PIX2_ARG(1,I)
	   PIX2(2,I) = PIX2_ARG(2,I)
105	CONTINUE	      
C
C make sure P1 does not have less pixels than p2
	IF (NPIX1.LT.NPIX2) THEN		! swap P1 and P2
C
C swap breakline pixels
	   DO 110 I_PIX = 1,MAX(NPIX1,NPIX2)
	      I1 = PIX1(1,I_PIX)
	      I2 = PIX1(2,I_PIX)
	      PIX1(1,I_PIX) = PIX2(1,I_PIX)
	      PIX1(2,I_PIX) = PIX2(2,I_PIX)
	      PIX2(1,I_PIX) = I1
	      PIX2(2,I_PIX) = I2
110	   CONTINUE
C
	   I1 = NPIX1
	   NPIX1 = NPIX2
	   NPIX2 = I1
C
	   HGT = HGT1
	   HGT1 = HGT2
	   HGT2 = HGT
C
	   L1 = NEWHGT1
	   NEWHGT1 = NEWHGT2
	   NEWHGT2 = L1
	END IF
C
C interpolate from each pixel in P1 to corresponding pixel in P2
	RATIO = REAL(NPIX2)/REAL(NPIX1)
C
	DO 1000 I_PIX = 1,NPIX1
C
	   J_PIX = NINT(I_PIX*RATIO)
	   J_PIX = MAX(1,MIN(NPIX2,J_PIX))
C
	   V(1,1) = PIX1(1,I_PIX)
	   V(2,1) = PIX1(2,I_PIX)
	   V(1,2) = PIX2(1,J_PIX)
	   V(2,2) = PIX2(2,J_PIX)
C
C find pixels along this path
	   CALL JOIN_PIX(V(1,1),V(2,1),V(1,2),V(2,2),NPIX,PIX)
C
	   IF (.NOT.NEWHGT1) HGT1 = GET_DTI_VAL(V(1,1),V(2,1))
	   IF (.NOT.NEWHGT2) HGT2 = GET_DTI_VAL(V(1,2),V(2,2))
	   DH = HGT2-HGT1
C
C first select the raster planes 
	   CALL LSG_PLANE_SELECT(WKID,PLANE_MASK)
	   CALL LSG_PLANE_OFFSET(WKID,0)
C
	   DO 120 K_PIX = 1,NPIX
	      IF (K_PIX .EQ. 1) THEN
	         HGT = HGT1
	      ELSE
	         HGT = HGT1+DH*REAL(K_PIX-1)/REAL(NPIX-1)
	      ENDIF 
	      IHGT = NINT(HGT)
	      NEWCOL= COLTAB(ICOL(DTICHAN,HGT),DTICHAN)
	      CALL PUT_DTI_VAL(PIX(1,K_PIX),PIX(2,K_PIX),HGT)	      
C
C work out position on screen
	      CALL SET_ROTATE(FLOAT(PIX(1,K_PIX)),
     &                        FLOAT(PIX(2,K_PIX)),
     &                        XPOS,
     &                        YPOS,
     &                        XSIGN)
C
C draw pixel
	      CALL LSG_PIXEL_ARRAY(
     &		 FLOAT(XPOS),FLOAT(YPOS),
     &		 XSIGN,-XSIGN,1,1,1,1,
     &		 SF(DTICHAN),
     &		 SF(DTICHAN),
     &		 NEWCOL)
C
C replace new colour in current display colour file
	      IF (COLOUR_MAP) THEN
	         CALL DTI_WRITE_BYTE_DATA(COL_LUN,NEWCOL,
     &	         (PIX(1,K_PIX)-COL_EXTENT(1)+1),
     &	         (PIX(2,K_PIX)-COL_EXTENT(2)+1))
	      ENDIF
120	   CONTINUE
C
1000	CONTINUE		! loop for next pixel in P1
C
	END
