C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-02-09 15:16:14.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE RCP_MOVE(RCP_NUMBER)
C
***	IDENT	09FE89
***	MODULE	RCP_MOVE
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C	Created   : D R Catlow                   14-November-1988
C
C	Routine to move the screen cursor to the coordinates
C	recorded for the specified RCP.
C	The RCP is identified by means of the RCP identifier
C
C---------------------------------------------------------------------------
C
	IMPLICIT NONE
C
***	PARAMETER/LSL$CMNLSL:READSTR/
C
***	COMMON/LSL$CMNDTI:DTIHDR/
***	COMMON/LSL$CMNDTI:DTIPROJ/
C
***	COMMON/LSL$CMNROVER:RCP/		! has HAD_FIL_RCP
***	COMMON/LSL$CMNROVER:ROVCMN/
***	COMMON/LSL$CMNROVER:RASTED/
***	COMMON/LSL$CMNROVER:DTICMN/
***	COMMON/LSL$CMNROVER:DISCMN/
C
C	Argument
	INTEGER*4	RCP_NUMBER		! RCP number
C						! if 0 then
C						! search for ID match
C	Local
	CHARACTER*10	CURRENT_ID		! RCP identifier
	INTEGER*4	NCHS			! number of chs read
	INTEGER*4	I			! counter
	REAL*8		X_VALUE,Y_VALUE
	REAL*4		X_COORD,Y_COORD
C
C	Functions:
	INTEGER*4	READSTR			! read ID from TXTBUF
C
C-----------------------------------------------------------------------
C	ID already matched?
	IF(RCP_NUMBER.NE.0)THEN
	  I = RCP_NUMBER
	  GOTO 150
	ENDIF
C
C----------------------------------------------------------------------
C
C 	Read the RCP identifier (up to 10 characters long)
C	Skipping any leading spaces.
	CURRENT_ID = '          '
C
	NCHS = READSTR(CURRENT_ID,'!',ON_SPACE,.TRUE.)
	IF(NCHS.LE.0)THEN
	  CALL WRITEF('%S Specifying command RCP MOVE',EBELL)
	  CALL WRITEF('Command requires a RCP Identifier')
	  GOTO 999
	ENDIF
C
C-----------------------------------------------------------------------
C	Find a match for this identifier
	DO 100 I=1,TOTAL_RCPS(CURRENT_RCP_FILE)
	   IF(CURRENT_ID.EQ.RCP_ID(CURRENT_RCP_FILE,I)) GOTO 150
100	CONTINUE
C
C	No match found
	CALL WRITEF('%S Specifying command RCP MOVE',EBELL)
	CALL WRITEF
     &  ('No RCP with identifier %S found in RCP file number %N',
     &  CURRENT_ID,CURRENT_RCP_FILE)
	GOTO 999
C
C----------------------------------------------------------------------
C	Move to the specified coordinates.
C	These are interpreted in the current units of measurement,
C	and are translated to real DTI coordinates as necessary
150	X_VALUE = RCP_X(CURRENT_RCP_FILE,I)
	Y_VALUE = RCP_Y(CURRENT_RCP_FILE,I)
C
   	CALL DTI_UNITS_TO_MATRIX(DTICHAN, DBLE(X_VALUE), DBLE(Y_VALUE),
     &  UNTYPE(DTICHAN), CUR_ROTATE(DTICHAN), 
     &  HAD_ABSOLUTE, X_COORD, Y_COORD)
C
C add 1 if matrix coordinates
	IF (UNTYPE(DTICHAN).EQ. 1) THEN
	   X_COORD  = X_COORD + 1.0
	   Y_COORD  = Y_COORD + 1.0
	ENDIF
C
C----------------------------------------------------------------------
C	Test against the current DTI file extent.
600	IF(X_COORD.LT.1.0.OR.X_COORD.GT.(X_EXTENT(DTICHAN)+1).OR.
     &     Y_COORD.LT.1.0.OR.Y_COORD.GT.(Y_EXTENT(DTICHAN)+1))THEN
	  CALL WRITEF('%S Specifying command RCP MOVE',EBELL)
	  CALL WRITEF
     &    ('RCP ID %S lies outside geographic bounds of DTI file %N',
     &    CURRENT_ID,DTICHAN)
	  CALL WRITEF
     &    ('X Y coordinates of RCP are %^D%F0 %F0',
     &    X_VALUE,Y_VALUE)
	  GOTO 999
	ENDIF
C	
C---------------------------------------------------------------------
C 	a move command to coordinates outside the current window causes
C 	a zoom around the RCP position
	IF(NINT(X_COORD).GT. 1.AND.NINT(Y_COORD).GT.1)THEN
          IF(NINT(X_COORD).LT.DTI_WINDOW_SWX(DTICHAN).OR. 
     &	     NINT(X_COORD).GT.(DTI_WINDOW_NEX(DTICHAN)+1).OR.
     &	     NINT(Y_COORD).LT.DTI_WINDOW_SWY(DTICHAN).OR.
     &	     NINT(Y_COORD).GT.(DTI_WINDOW_NEY(DTICHAN)+1))THEN
C
C 	first blank out previous cursor
	     CALL MOVE_CURSOR(X_CURDTI,Y_CURDTI,.FALSE.,.TRUE.)
C
	     IF(UNTYPE(DTICHAN).EQ.1)THEN
	        X_CURDTI = X_COORD-0.5
	        Y_CURDTI = Y_COORD-0.5
	     ELSE
C
C for non-matrix units the direction to which we add on the 0.5
C fudge depends on the viewing direction
	        CALL MATRIX_POINT_FIVE(X_COORD,Y_COORD,
     &          CUR_ROTATE(DTICHAN),.FALSE.,X_CURDTI,Y_CURDTI)
	     ENDIF
C
C zoom around the new point
	     CALL ZOOM(1.0)
	  ENDIF
	ENDIF
C
C----------------------------------------------------------------------
C	Adjust coordinates to offset from centre of pixel.
	IF(UNTYPE(DTICHAN).EQ.1)THEN
	   X_COORD = X_COORD-0.5
	   Y_COORD = Y_COORD-0.5
        ELSE
C
C for non-matrix units the direction to which we add on the 0.5
C fudge depends on the viewing direction
	   CALL MATRIX_POINT_FIVE(X_COORD,Y_COORD,
     &     CUR_ROTATE(DTICHAN),.FALSE.,X_COORD,Y_COORD)
	ENDIF
C
C	Move the screen cursor to X_COORD, Y_COORD
	CALL MOVE_CURSOR(X_COORD,Y_COORD,.FALSE.,.FALSE.)
C
	CALL SET_TRKB(FLOAT(XCROSS),FLOAT(YCROSS))
C
C----------------------------------------------------------------------
C
999	RETURN
C
	END
