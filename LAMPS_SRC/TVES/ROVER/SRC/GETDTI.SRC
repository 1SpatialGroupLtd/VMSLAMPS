C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-03-14 13:46:40.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION GET_DTI_COORDS(X_DTI,Y_DTI,PROMPT)
C
***	IDENT	14MR88
***	MODULE	GET_DTI_COORDS
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C
C	Author	  : Andrew Morris
C	Created   : Jan 1985
C	Modified for ROVER	Aug 1986
C
	IMPLICIT NONE
C
C parameters in
	CHARACTER*(*)	PROMPT		! prompt string
C
C parameters out
	REAL		X_DTI,Y_DTI	! DTI coords
C
	INCLUDE	'LSL$CMNLSL:TXTC.CMN'	! has TXTBUF
	INCLUDE	'LSL$CMNLSL:EXPC.CMN'	! message output
	INCLUDE	'LSL$CMNROVER:TRANS.CMN'! has TAB_FIL transformations
	INCLUDE	'LSL$CMNROVER:TAB.CMN'	! has BUTTON
	INCLUDE	'LSL$CMNROVER:DTICMN.CMN'	! has DTICHAN
	INCLUDE	'LSL$CMNROVER:ROVCMN.CMN'
	INCLUDE	'LSL$CMNROVER:DTIQIO.CMN'
	INCLUDE	'LSL$CMNDTI:DTIHDR.CMN'
C
C functions
	LOGICAL		READ_PUCK	! read puck data
	LOGICAL		HAD_PUCK	! had puck input?
	INTEGER*4	RDLONG		! read integer?
	LOGICAL		WAIT_INPUT	! wait for input
	LOGICAL	        RDREAL	        ! read real
C
C workspace
	INTEGER		CMD		! menu command number
C
C:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
C Prompts for and obtains a DTI point from the keyboard or table cursor
C
C Function result returns .TRUE. for success, .FALSE. for error
C:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
C
	GET_DTI_COORDS = .FALSE.	! set unsuccessfull
C
10	TTOPRO = .TRUE.
	ERR = (.NOT.WAIT_INPUT(PROMPT))	! input from puck or keyboard
	IF(ERR) GOTO 20			! return
C
	IF (HAD_PUCK(IERR)) THEN	! point input?
	  ERR = READ_PUCK(BUTTON,X_TAB,Y_TAB,IERR)
	  IF (ERR) THEN
	    CALL SHOW_ERROR(IERR)
	    GOTO 20			! failure
	  ELSE IF (.NOT.TRACKING) THEN
	    CALL WRITEF('%S No Map has been registered',EBELL)
	    GOTO 10			! try again
	  ELSE
	    CALL TRANSF(DTICHAN+4,X_TAB,Y_TAB,X_DTI,Y_DTI)
	    CALL EXPAND('%N %N',NINT(X_DTI),NINT(Y_DTI))
C	    TTOBEL = .TRUE.	! signal to VIO$PUT_OUTPUT (OUTPUT.SRC)
C	    CALL LIB$PUT_SCREEN(EXPDSC,24,LEN(PROMPT)+2,0)
	  END IF
C
	ELSE IF (HAD_VDU) THEN	! keyboard input
	  CALL BSLN
	  IF (RDREAL(X_DTI)) GOTO 20	! failure
	  IF (RDREAL(Y_DTI)) GOTO 20	! failure
	END IF
C
C check DTI range
	IF (X_DTI.LT.1.OR.X_DTI.GT.X_EXTENT(DTICHAN).OR.
     +	    Y_DTI.LT.1.OR.Y_DTI.GT.Y_EXTENT(DTICHAN)) THEN
	  CALL WRITEF('%S DTI coords out of range',EBELL)
	  GOTO 10			! try again
	END IF
C
	GET_DTI_COORDS = .TRUE.		! success
C
20	RETURN
C
	END
