C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-01-20 17:55:12.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE JOIN_PIX(X_START,Y_START,X_END,Y_END,NUMPTS,PIXBUF)
C
***	MODULE	JOIN_PIX
***	IDENT	20JA88
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    19-Dec-1987
C
C given pixel coords of two end points - finds coordinates of 
C pixels which join them.
C taken from algorithm in DTELIN in old DTE by ACM
C
	IMPLICIT NONE
C
C
C Common Blocks
	INCLUDE	'LSL$CMNROVER:RASTED.CMN'
C
C
C arguments
	INTEGER*4	X_START		! IN  - start coord in X
	INTEGER*4	Y_START		! IN  - start coord in Y
	INTEGER*4	X_END		! IN  - end coord in X
	INTEGER*4	Y_END		! IN  - end coord ib Y
	INTEGER*4	NUMPTS		! OUT - number of pix affected
	INTEGER*4	PIXBUF(2,MAXEDT)! OUT - holds coords of pixels
C Functions
C
C Local Variables
	INTEGER*4	XMIN,XMAX	! X range
	INTEGER*4	YMIN,YMAX	! Y range
	INTEGER*4	YLINE		! Y for current scan line
	INTEGER*4	XLEFT,XRIGHT	! X "intersection" range
	INTEGER*4	XA,XB		! working integers
	INTEGER*4	I		! counter
	INTEGER*4	LOCDX		! local diff in x coords
	INTEGER*4	XLINE           ! X for current scan line
	LOGICAL		FORWARD		!  false if order of pixels
C					! is reversed
	LOGICAL		REVERSE_FORWARD ! reverse local array if 
C					! not globally reversed
	LOGICAL		REVERSE_BACKWARD !reverse local array ifglobally
C					! reversed	
	LOGICAL		FIRST_LOOP	! first time round loop
	INTEGER*4       LOCNUM
C
	REAL		RX,DX,DY,G	! working reals
C
C 
C get x and y ranges
	XMIN = MIN0(X_START,X_END)
	YMIN = MIN0(Y_START,Y_END)
	XMAX = MAX0(X_START,X_END)
	YMAX = MAX0(Y_START,Y_END)
	DX = X_START - X_END
	DY = Y_START - Y_END
	IF (YMIN .EQ. Y_START) THEN
	   FORWARD = .TRUE.
	ELSE
	   FORWARD = .FALSE.
	ENDIF
	NUMPTS = 0
C
C easy case when 0 changes in X or Y
	IF (DX .EQ. 0) THEN
	   DO 10 I = YMIN, YMAX
	     NUMPTS  = NUMPTS  + 1
	     PIXBUF(1,NUMPTS) = X_START
	     PIXBUF(2,NUMPTS) = I 
10	   CONTINUE
	ELSEIF (DY .EQ. 0) THEN
	   IF (XMIN .EQ. X_START) THEN
	      FORWARD = .TRUE.
	   ELSE
	      FORWARD = .FALSE.
	   ENDIF
	   DO 20 I = XMIN, XMAX
	     NUMPTS  = NUMPTS  + 1
	     PIXBUF(1,NUMPTS) = I
	     PIXBUF(2,NUMPTS) = Y_START 
20	   CONTINUE
	ELSE
C
C "G" is real dist betw X coords of intersections between line with
C scan-row top line (Y = YLINE + 0.5) and bot line (Y = YLINE - 0.5)
	  G = DX/DY
C
C "RX" is real X coord of int betw line and the scan-row bot line
	  RX = X_START + (YMIN-0.5-Y_START)*G
C
C initialise loop logicals
	  REVERSE_FORWARD = .FALSE.
	  REVERSE_BACKWARD =.FALSE.
	  FIRST_LOOP = .TRUE.
C
	  DO 40 YLINE = YMIN,YMAX
C
C "XA" is DTI X coord of DTI element containing real point (RX,YLINE)
C "XB" is DTI X coord of DTI element containing (RX+G,YLINE)
	     IF (G.GT.0) THEN
	        XA = NINT(RX)			! round up
	        XB = NINT(RX+G-0.001)		! round down
	     ELSE
	        XA = NINT(RX-0.001)		! round down
	        XB = NINT(RX+G)			! round up
	     END IF
C
C "XLEFT" and "XRIGHT" are the DTI X coords of the left- and right-most
C DTI elements which are intersected by the line from P1 to P2
	     XLEFT = MAX0(MIN0(XA,XB),XMIN)
	     XRIGHT= MIN0(MAX0(XA,XB),XMAX)
	     IF (FIRST_LOOP) THEN
	        IF (XRIGHT .EQ. X_START) THEN
		   REVERSE_FORWARD = .TRUE.
		ENDIF
		IF (XRIGHT.EQ. X_END) THEN
		   REVERSE_BACKWARD = .TRUE.
		ENDIF
		FIRST_LOOP = .FALSE.
	     ENDIF
	     LOCNUM = 0
	     DO 30 XLINE= XLEFT,XRIGHT
	        NUMPTS = NUMPTS +1
		PIXBUF(1,NUMPTS) = XLINE
	        PIXBUF(2,NUMPTS) = YLINE
	        LOCNUM = LOCNUM +1
30	     CONTINUE
	     IF (FORWARD) THEN
	        IF (REVERSE_FORWARD) THEN
	           CALL REVERSE(PIXBUF(1,(NUMPTS-LOCNUM+1)),LOCNUM)
	        ENDIF
	     ELSE
		IF (REVERSE_BACKWARD) THEN
	           CALL REVERSE(PIXBUF(1,(NUMPTS-LOCNUM+1)),LOCNUM)
	        ENDIF
	     ENDIF
	     RX = RX+G
40	   CONTINUE
	ENDIF
C
	IF (.NOT. FORWARD) THEN
C
C reverse the coords in PIXBUF
	   CALL REVERSE(PIXBUF,NUMPTS)
	ENDIF
	RETURN
	END
