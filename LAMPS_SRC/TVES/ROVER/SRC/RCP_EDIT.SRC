C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-01-30 13:47:38.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE RCP_EDIT
C
***	IDENT	30JA89
***	MODULE	RCP_EDIT
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C	Created   : D R Catlow                   18-November-1988
C
C	Routine to edit a RCP entry in the current RCP_FILE
C
C	The RCP is identified by means of the RCP identifier. 
C
C---------------------------------------------------------------------------
C
	IMPLICIT NONE
C
***	PARAMETER/LSL$CMNLSL:READSTR/
C
***	COMMON/LSL$CMNDTI:DTIHDR/
***	COMMON/LSL$CMNROVER:RCP/		! has HAD_FIL_RCP
***	COMMON/LSL$CMNROVER:ROVCMN/
***	COMMON/LSL$CMNROVER:DTIQIO/
***	COMMON/LSL$CMNROVER:DTICMN/
***	COMMON/LSL$CMNROVER:TAB/
***	COMMON/LSL$CMNROVER:RASTED/
C
C	Local
	CHARACTER*10	CURRENT_ID		! RCP identifier
	CHARACTER*2	CURRENT_TYPE		! RCP type
	REAL*8		CURRENT_X		! RCP x coord
	REAL*8		CURRENT_Y		! RCP y coord
	REAL*4		CURRENT_Z		! RCP z coord
	REAL*4		CURRENT_WZ		! RCP z coord weight
	REAL*4		CURRENT_WXY		! RCP xy coord weight
	REAL*4		X_COORD
	REAL*4		Y_COORD
C
	CHARACTER*80	PROMPT
	INTEGER*4	LEN			! number of chs expanded
	INTEGER*4	NCHS			! number of chs read
	INTEGER*4	I			! counter
	BYTE		CH			! single character
	INTEGER*2	BUTTON_NUMBER		! mouse button number
C
C	Functions:
	INTEGER*4	EXPAND
	INTEGER*4	READSTR			! read ID from TXTBUF
	LOGICAL		RDREAL			! to read a real
	LOGICAL		RDCHS			! read a single ch.
	LOGICAL		WAIT_INPUT
	INTEGER*2	GET_BUTTON		!reads button number
	LOGICAL		RCP_CHECK_ID		! to check ID is unique
C
C-----------------------------------------------------------------------
C
C 	Read the RCP identifier (up to 10 characters long)
C	Skipping any leading spaces.
	CURRENT_ID = '          '
C
	NCHS = READSTR(CURRENT_ID,'!',ON_SPACE,.TRUE.)
	IF(NCHS.LE.0)THEN
	  CALL WRITEF('%S Specifying command RCP EDIT',EBELL)
	  CALL WRITEF('Command requires a RCP Identifier')
	  GOTO 999
	ENDIF
C
C-----------------------------------------------------------------------
C	Find a match for this identifier
	DO 100 I=1,TOTAL_RCPS(CURRENT_RCP_FILE)
	   IF(CURRENT_ID.EQ.RCP_ID(CURRENT_RCP_FILE,I)) GOTO 150
100	CONTINUE
C
C	No match found
	CALL WRITEF('%S Specifying command RCP EDIT',EBELL)
	CALL WRITEF
     &  ('No RCP with identifier %S found in RCP file number %N',
     &  CURRENT_ID,CURRENT_RCP_FILE)
	GOTO 999
C
C----------------------------------------------------------------------
C	Move to the coordinates of the RCP
150	CONTINUE
	CALL RCP_MOVE (I)
C
C----------------------------------------------------------------------
C	RCP ID
C	Supply the current ID as the default
	CURRENT_ID = '          '
C
	LEN = EXPAND('%WSEnter RCP ID (Default = %S)',
     &        PROMPT,RCP_ID(CURRENT_RCP_FILE,I))
C
200	IF (.NOT.WAIT_INPUT(PROMPT(1:LEN))) GOTO 999
	IF (.NOT.HAD_VDU) GOTO 200
	NCHS = READSTR(CURRENT_ID,'!',ON_SPACE,.TRUE.)
	IF(NCHS.LT.0)GOTO 200
	IF(NCHS.EQ.0)THEN
	  CALL EXPAND('%WS%S',CURRENT_ID,
     &         RCP_ID(CURRENT_RCP_FILE,I))
	  GOTO 300		!don't check for uniqueness
	ENDIF	    
C
C	Check that the RCP ID is unique
250	IF(.NOT.RCP_CHECK_ID(CURRENT_ID))THEN
	   CALL WRITEF('%S Specifying RCP ID',EBELL)
	   CALL WRITEF('ID %S is not unique',CURRENT_ID)
	   GOTO 200
	ENDIF
C
C-----------------------------------------------------------------------
C	RCP TYPE
300	CURRENT_TYPE = '  '
C
	LEN = EXPAND('%WSEnter RCP TYPE (Default = %S)',
     &  PROMPT,RCP_TYPE(CURRENT_RCP_FILE,I))
C
320	IF (.NOT.WAIT_INPUT(PROMPT(1:LEN))) GOTO 999
	IF (.NOT.HAD_VDU) GOTO 320
	NCHS = READSTR(CURRENT_TYPE,'!',ON_SPACE,.TRUE.)
	IF(NCHS.LT.0)GOTO 320
	IF(NCHS.EQ.0)THEN
	  CALL EXPAND('%WS%S',CURRENT_TYPE,
     &         RCP_TYPE(CURRENT_RCP_FILE,I))
	ENDIF	    
C
C------------------------------------------------------------------------
C	RCP_X and RCP_Y
C	Note the coordinate position may be entered via the 
C	workstation mouse, so we need to use WAIT_INPUT.
C
C	Expand coordinates into prompt
	LEN = EXPAND
     &  ('%WSEnter X Y Coordinates (Default = %^D%F0 %F0)',
     &  PROMPT,
     &  RCP_X(CURRENT_RCP_FILE,I),
     &  RCP_Y(CURRENT_RCP_FILE,I))
C
400     IF (.NOT.WAIT_INPUT(PROMPT(1:LEN))) GOTO 999
	IF     (HAD_TRKB.OR. HAD_TIMER) THEN
	   CALL ROVMOVE
	   GOTO 400
	ELSE IF(HAD_FB) THEN			
C	Read the mouse button number
	   BUTTON_NUMBER = GET_BUTTON()
	   IF(BUTTON_NUMBER.NE.2)GOTO 400
	   CURRENT_X = X_CURDTI
	   CURRENT_Y = Y_CURDTI
C	Button 2 - so read the coordinates	   
	   CALL RCP_CONVERT_FROM_MOUSE(CURRENT_X,CURRENT_Y)
	   TTOBEL=.TRUE.
	   CALL WRITEF('%^D%F9.3 %F9.3',CURRENT_X,CURRENT_Y)
	   TTOBEL=.FALSE.
	   TTOPRO=.TRUE.
	   GOTO 500
	ELSE IF(HAD_VDU) THEN
C	Read the coordinates from the terminal
 	  IF(RDCHS(CH))THEN
	    CURRENT_X = RCP_X(CURRENT_RCP_FILE,I)
	    CURRENT_Y = RCP_Y(CURRENT_RCP_FILE,I)
	    GOTO 500
	  ELSE
	    CALL BSCH
	    IF (RDREAL(CURRENT_X))GOTO 400
	    IF (RDREAL(CURRENT_Y))GOTO 400
C
C	Check that the coordinates are within the bounds of the DTM
C	This is only required if the coordinates have been
C	entered from the keyboard.
C	
C	First convert from current units of measurement
C	to matrix units
	    X_COORD = CURRENT_X
	    Y_COORD = CURRENT_Y

	    CALL RCP_CONVERT_TO_MOUSE(X_COORD,Y_COORD)
C
            IF(X_COORD.LT.0.0.OR.X_COORD.GT.X_EXTENT(DTICHAN).OR.
     &         Y_COORD.LT.0.0.OR.Y_COORD.GT.Y_EXTENT(DTICHAN))THEN
	      CALL WRITEF('%S Specifying RCP coordinates',EBELL)
	      CALL WRITEF
     &  ('The coordinates are outside geographical bounds of
     & DTI file %N',
     &    DTICHAN)
	      GOTO 400
	    ENDIF
	  ENDIF
	ENDIF
C
C----------------------------------------------------------------------
C	
C	RCP Z coordinate
500	LEN = EXPAND('%WSEnter Z value (Default = %^D%F0)',
     &  PROMPT,RCP_Z(CURRENT_RCP_FILE,I))
C
520	IF (.NOT.WAIT_INPUT(PROMPT(1:LEN))) GOTO 999
	IF (.NOT.HAD_VDU) GOTO 520
 	IF(RDCHS(CH))THEN
	  CURRENT_Z=RCP_Z(CURRENT_RCP_FILE,I)
	ELSE
	  CALL BSCH
	  IF (RDREAL(CURRENT_Z)) GOTO 520
	ENDIF
C
C-------------------------------------------------------------------------	
C	RCP WXY value
C
600	LEN = EXPAND('%WSEnter XY weight (Default = %^D%F0)',
     &  PROMPT,RCP_WXY(CURRENT_RCP_FILE,I))
C
620	IF (.NOT.WAIT_INPUT(PROMPT(1:LEN))) GOTO 999
	IF (.NOT.HAD_VDU) GOTO 620
 	IF(RDCHS(CH))THEN
	  CURRENT_WXY=RCP_WXY(CURRENT_RCP_FILE,I)
	ELSE
	  CALL BSCH
	  IF (RDREAL(CURRENT_WXY)) GOTO 620
	ENDIF
C
C-------------------------------------------------------------------------
C	RCP WZ value
C
700	LEN = EXPAND('%WSEnter Z weight (Default = %^D%F0)',
     &  PROMPT,RCP_WZ(CURRENT_RCP_FILE,I))
C
720	IF (.NOT.WAIT_INPUT(PROMPT(1:LEN))) GOTO 999
	IF (.NOT.HAD_VDU) GOTO 720
 	IF(RDCHS(CH))THEN
	  CURRENT_WZ=RCP_WZ(CURRENT_RCP_FILE,I)
	ELSE
	  CALL BSCH
	  IF (RDREAL(CURRENT_WZ)) GOTO 720
	ENDIF
C
C-------------------------------------------------------------------------
C	Move CURRENT RCP values to RCP variables in common
C
	RCP_ID(CURRENT_RCP_FILE,I)= CURRENT_ID
	RCP_TYPE(CURRENT_RCP_FILE,I)= CURRENT_TYPE
	RCP_X(CURRENT_RCP_FILE,I) = CURRENT_X
	RCP_Y(CURRENT_RCP_FILE,I) = CURRENT_Y
	RCP_Z(CURRENT_RCP_FILE,I) = CURRENT_Z
        RCP_WXY(CURRENT_RCP_FILE,I) = CURRENT_WXY
	RCP_WZ(CURRENT_RCP_FILE,I) = CURRENT_WZ
C
C-------------------------------------------------------------------------
C	Note we don't increment the RCP counter
C
C----------------------------------------------------------------------
C
999	RETURN
C
	END
