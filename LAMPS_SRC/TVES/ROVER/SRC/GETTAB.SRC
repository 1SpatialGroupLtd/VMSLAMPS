C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-03-14 14:26:06.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION GET_TAB_COORDS(X_TABE,Y_TABE,PROMPT)
C
***	IDENT	14MR88
***	MODULE	GET_TAB_COORDS
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C
C	Author	  : Andrew Morris
C	Created   : Jan 1985
C
	IMPLICIT NONE
C
C parameters in
	CHARACTER*(*)	PROMPT		! prompt string
C
C parameters out
	INTEGER		X_TABE,Y_TABE	! table coords
C
	INCLUDE	'LSL$CMNLSL:TXTC.CMN'		! has TXTBUF
	INCLUDE	'LSL$CMNLSL:EXPC.CMN'		! message output
	INCLUDE	'LSL$CMNROVER:TAB.CMN'		! has BUTTON
	INCLUDE	'LSL$CMNROVER:ROVCMN.CMN'
	INCLUDE	'LSL$CMNROVER:DTIQIO.CMN'	! has BUTTON
C
C functions
	LOGICAL		READ_PUCK	! read puck data
	LOGICAL		HAD_PUCK	! had puck input?
	LOGICAL		HAD_ERROR	! had table error?
	LOGICAL		WAIT_INPUT	! wait for input
C
C:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
C Prompts for and obtains a table point from the table cursor
C
C Function result returns .TRUE. for success, .FALSE. for error
C:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
C
	GET_TAB_COORDS = .FALSE.	! set unsuccessfull
C
10	TTOPRO = .TRUE.
	ERR = (.NOT.WAIT_INPUT(PROMPT))	!puck or keyboard
	IF (ERR) GOTO 20
C
	IF (HAD_PUCK(IERR)) THEN	! point input?
	  ERR = READ_PUCK(BUTTON,X_TABE,Y_TABE,IERR)
	  IF (ERR) THEN
	    CALL SHOW_ERROR(IERR)
	    GOTO 20			! failure
	  END IF
C
	ELSE IF (HAD_VDU) THEN	! keyboard input
	  CALL WRITEF('%S Input via table cursor only',EBELL)
	  GOTO 10			! try again
	END IF
C
	GET_TAB_COORDS = .TRUE.		! success
C
20	RETURN
	END

