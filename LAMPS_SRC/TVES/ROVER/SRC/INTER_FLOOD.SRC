C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-10-07 18:57:30.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE INTER_FLOOD
C
***	MODULE	INTER_FLOOD
***	IDENT	07OC92
C
C Copyright Laser-Scan Ltd., Cambridge, England
C
C Author M.W.S. Reid
C Based on FLOOD routine in DTE - ATT
C
C 	Created					MWSR    12-Jan-1988
C
C deals with ROVER interactive flooding
C
	IMPLICIT NONE
C
C argument
C
C Parameters
	INCLUDE	'LSL$CMNROVER:GKSPAR.PAR'
C
C Common Blocks
	INCLUDE	'LSL$CMNROVER:DTICMN.CMN'
	INCLUDE	'LSL$CMNROVER:ROVCMN.CMN'
	INCLUDE	'LSL$CMNROVER:GKS.CMN'
	INCLUDE	'LSL$CMNROVER:COLCMN.CMN'
	INCLUDE	'LSL$CMNROVER:RASTED.CMN'
	INCLUDE	'LSL$CMNROVER:DISCMN.CMN'
	INCLUDE	'LSL$CMNROVER:MOUSE.CMN'
	INCLUDE	'LSL$CMNROVER:STPCMN.CMN'
	INCLUDE	'LSL$CMNROVER:TAB.CMN'
	INCLUDE	'LSL$CMNROVER:MAPCMN.CMN'
C
***	COMMON/LSL$CMNDTI:DTIHDR/
C
C Functions
	INTEGER		ICOL		! to return colour codes
C
C Local Variables
	INTEGER		TOP_COLOUR	! top flood col index
	INTEGER		BOT_COLOUR	! bottom flood col index
	INTEGER		I,J		! loop variables
	REAL		FMAX_HGT,FMIN_HGT ! Max & min heights for loops
	REAL		TOP_HGT,TMP_HGT	! to hold heights of 
C					! flooding levels
C					! colour parameters
	INTEGER		IMVMT		! integer distance moved
C
	REAL		MVMT,X_MVMT,Y_MVMT  	! real distance
C
	REAL		REDTAB(0:255)	! red colour rab vals
	REAL		GREENTAB(0:255)	! green colour table vals
	REAL		BLUETAB(0:255)	! blue colour table vals
	REAL*4		DUM,DUM1	! dummy
	INTEGER		COL		! 
	INTEGER		ERRCOD
	REAL		SAV_MOUSE_X	! saved mouse positions
	REAL		SAV_MOUSE_Y	!
	REAL		REAL_X_DTI	! DTI coords from table
	REAL		REAL_Y_DTI
	INTEGER		EXTRA
	INTEGER		OLD_EXTRA
	REAL		SCREEN_USED		
	REAL		TABLE_USED		
C
C get the minimum and maximimum flooding heights
	FMIN_HGT = HLOWER(DTICHAN)
C
C the maximum height to flood never includes those heights which 
C are shown in white - ie when there are too many steps for the 
C available colours. If it did then the text would appear blue.
	IF (ICOL(DTICHAN,REAL(HUPPER(DTICHAN))).EQ. 1) THEN
	   FMAX_HGT = HSTEP(DTICHAN,(NSTEP(DTICHAN)))
	ELSE
	   FMAX_HGT = HUPPER(DTICHAN)
	ENDIF
C...................................................................
C inquire of current colours if its the first time round
	IF (FIRST_FLOOD ) THEN
C
C set up screen and table extents
	   SCREEN_USED= RASTSZ(2) - RASTSZ(2)/40
	   TABLE_USED = REAL(MATSIZ(DTICHAN,2)) - 
     &			REAL(MATSIZ(DTICHAN,2))/40
C
C find out the top and bottom colour indexes
	   BOT_COLOUR = COLTAB(ICOL(DTICHAN,FMIN_HGT+1),
     &                  DTICHAN).AND.255
	   TOP_COLOUR = COLTAB(ICOL(DTICHAN,FMAX_HGT-1),
     &                  DTICHAN).AND.255
C
C loop for each colour
	   DO 510 I = BOT_COLOUR,TOP_COLOUR
C
C***********************************************************************
C COLTAB is byte - hence .AND. 255
C	   DO 510 I = (COLTAB(ICOL(DTICHAN,REAL(HLOWER(DTICHAN)+1))
C     &	    		,DTICHAN).AND.255),
C     &		      (COLTAB(ICOL(DTICHAN,REAL(HUPPER(DTICHAN)-1))
C     &	     		,DTICHAN).AND.255)
C	   DO 510 I = 1,(NOCOL(DTICHAN)+2)
C	      COL = COLTAB(I,DTICHAN)
C***********************************************************************
C
	      CALL GQCR(WKID,I,DUM,ERRCOD,
     &			REDTAB(I),GREENTAB(I),BLUETAB(I))
510	   CONTINUE
C
C get the current trackerball position
	   CALL READ_TRKB(DUM,DUM1)
C
C set the mouse to the bottom of the screen on first time round
	   IF (FIRST_FLOOD .AND. (.NOT.RELOOKUP)) THEN
	      CALL SET_TRKB(0.0,0.0)
	      PRE_MOUSE_X = MOUSE_X
	      PRE_MOUSE_Y = MOUSE_Y
	   ENDIF
C
	   TOP_HGT = FMIN_HGT+1
	   TMP_HGT = FMIN_HGT+1
	   FIRST_FLOOD = .FALSE.
	ELSE
C
C not the first time
	   IF (HAD_TRKB ) THEN
C
C get the mouse position
	      CALL READ_TRKB(DUM,DUM1)
C
	   ELSEIF (HAD_TABLE) THEN
	      IF (.NOT.TRACKING) GOTO 1000
C
C if we're flooding from the table then use the Y DTI coords as
C the extremities of flooding
	      CALL TRANSF(DTICHAN+4,X_TAB,Y_TAB,REAL_X_DTI,REAL_Y_DTI)
	        REAL_X_DTI=MAX(REAL(DTI_WINDOW_SWX(DTICHAN)),REAL_X_DTI)
	        REAL_Y_DTI=MAX(REAL(DTI_WINDOW_SWY(DTICHAN)),REAL_Y_DTI)
	        REAL_X_DTI=MIN(REAL(DTI_WINDOW_NEX(DTICHAN)),REAL_X_DTI)
	        REAL_Y_DTI=MIN(REAL(DTI_WINDOW_NEY(DTICHAN)),REAL_Y_DTI)
	   ELSE
C
C get here if enable flood command is given but not the first time
	      CALL SET_TRKB(SAV_MOUSE_X,SAV_MOUSE_Y)
	   ENDIF   
C
	ENDIF
C
C work out new flood heights either from table or trackerball
	  IF (HAD_TABLE) THEN 
	    X_MVMT = (X_TAB - PRE_X_TAB)/10
	    Y_MVMT = (Y_TAB - PRE_Y_TAB)/10
	    MVMT  = SQRT((X_MVMT*X_MVMT)+(Y_MVMT*Y_MVMT))
	    IMVMT = NINT(MVMT)
C
	    IF (IMVMT.LE.0) GOTO 1000		! no movement so return
C
	    IF ((REAL_Y_DTI-DTI_WINDOW_SWY(DTICHAN)+1) .GT.
     &						 TABLE_USED) THEN
C
C special case of position greater then DTI window
	       TMP_HGT = FMAX_HGT
	       EXTRA = 1
	    ELSE  
	       TMP_HGT = (REAL_Y_DTI-DTI_WINDOW_SWY(DTICHAN)+1)/
     &			TABLE_USED *(FMAX_HGT -FMIN_HGT) + FMIN_HGT
	       EXTRA = 0
	    ENDIF
C
	  ELSEIF (HAD_TRKB) THEN
	    X_MVMT = MOUSE_X - PRE_MOUSE_X
	    Y_MVMT = MOUSE_Y - PRE_MOUSE_Y
	    MVMT  = SQRT((X_MVMT*X_MVMT) + (Y_MVMT*Y_MVMT))
	    IMVMT = NINT(MVMT)
C
	    IF (IMVMT.LE.0) GOTO 1000		! no movement so return
C
	    IF (MOUSE_Y .GT. SCREEN_USED) THEN
C
C special case of position greater then DTI window
	       TMP_HGT = FMAX_HGT
	       EXTRA = 1
	    ELSE
	       TMP_HGT = MOUSE_Y/SCREEN_USED *
     &				(FMAX_HGT-FMIN_HGT) + FMIN_HGT
	       EXTRA = 0
	    ENDIF
	  ENDIF
C
	  IF (EXTRA .NE. 1) THEN
C
C check to see if same step as before - if it is, then do nothing.
C COLOUR is byte
C
	    IF ((COLOUR(NINT(TMP_HGT+0.5) + NEGOFF(DTICHAN),DTICHAN)
     &		.AND. 255) .EQ.
     &	        (COLOUR(NINT(TOP_HGT+0.5) + NEGOFF(DTICHAN),DTICHAN)
     &		.AND. 255)) GOTO 1000
	  ENDIF
C
C work out flooding height from mouse position
C Are we flooding or "un-flooding" (draining).
	  IF (TMP_HGT .LT. TOP_HGT) THEN	! we are "un-flooding"
C
	    DO 310 I = (COLTAB(ICOL(DTICHAN,TOP_HGT),DTICHAN).AND.255),
     &	       	       (COLTAB(ICOL(DTICHAN,TMP_HGT),DTICHAN).AND.255),-1
	       CALL GSCR(WKID,I,REDTAB(I),GREENTAB(I),BLUETAB(I))
	       CALL GUWK(WKID,GSUPP)
310	    CONTINUE
C
	    TOP_HGT = TMP_HGT	! top flooded height has changed 
C
	  ELSE					! we are re-flooding
C
	    DO 330 I = (COLTAB(ICOL(DTICHAN,TOP_HGT),DTICHAN).AND.255),
     &	       	      ((COLTAB(ICOL(DTICHAN,TMP_HGT),DTICHAN).AND.255)
     &			-1+EXTRA)
	      CALL GSCR(WKID,I,0.5,0.5,1.0)	!write blue
	      CALL GUWK(WKID,GSUPP)
330	    CONTINUE
C
	    TOP_HGT = TMP_HGT	! top flooded height has changed 
C
	  ENDIF
C
C work out the current flood level
	FLOOD_LEVEL = HSTEP(DTICHAN,
     &  	((COLOUR(NINT(TOP_HGT)+NEGOFF(DTICHAN),DTICHAN).AND.255)
     & 		-1+EXTRA))
	IF (FLOOD_LEVEL .LT. 0) FLOOD_LEVEL = 0
	CALL UPDATE_STATUS(CURPOS)
	SAV_MOUSE_X = MOUSE_X
	SAV_MOUSE_Y = MOUSE_Y
C...................................................................
C
1000	RETURN
	END	
C
