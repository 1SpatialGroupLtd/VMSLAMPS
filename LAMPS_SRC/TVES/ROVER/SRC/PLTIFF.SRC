C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-03-14 18:51:52.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE PLTIFF
C
***	MODULE	PLTIFF
**	IDENT	14MR88
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    16-Jul-1986
C
C Plots an IFF file on the SIGMA
	IMPLICIT NONE
C
C Parameters
	INCLUDE	'LSL$CMNROVER:GKSPAR.PAR'
C
C common blocks
	INCLUDE	'LSL$CMNROVER:DRAWIN.CMN'
	INCLUDE	'LSL$CMNROVER:FPPDAT.CMN'
	INCLUDE	'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE	'LSL$CMNROVER:LABEL.CMN'
	INCLUDE	'LSL$CMNROVER:SELECT.CMN'
	INCLUDE	'LSL$CMNROVER:SCLDAT.CMN'
	INCLUDE	'LSL$CMNROVER:ROVCMN.CMN'
	INCLUDE	'LSL$CMNROVER:DTICMN.CMN'
	INCLUDE	'LSL$CMNROVER:IFFCMN.CMN'
	INCLUDE	'LSL$CMNROVER:GKS.CMN'
C
C functions
C
	LOGICAL*1 FRTINI,SRIINI,TRIINI
	INTEGER*4	SIGCHS
C
C local variables
	INTEGER   POSN		! temporary position in string.
	INTEGER   DOTPOS	! position of last '.' in string.
	INTEGER*2 NCHS		! number of chars on command line.
	LOGICAL*1 FINISH	! indicates no more data in IFF file.
	REAL	TAREA(2)	! for call of GESC
C
C
100	IF (.NOT.HADIFF(IFFCHAN)) THEN
	   CALL WRITEF('%S Specifying command OVERLAY',EBELL)
	   CALL WRITEF ('IFF file not yet opened')
	   GOTO 1000
	ENDIF
C
C Open FRT.
C An FRT file must be opened before plotting even though there may
C not have been any command given (default name LSL$FRT:FRT.FRT;0).
C
	IF (.NOT.INIFRT) THEN
	   CALL WRITEF('Reading default FRT file "%S"',
     &	                  'LSL$FRT:FRT.FRT;0')
	   IF (FRTINI('LSL$FRT:FRT.FRT;0')) GOTO 180
	   INIFRT =.TRUE.		! indicate now got an FRT.
	   HADFGT=.FALSE.		! not got FC for labels
	ENDIF
C
C Extract the main part of the FRT filename in case the SRI or TRI
C default to the same name.
	DOTPOS=0
140	POSN=INDEX(FRTTIT(DOTPOS+1:),'.')	! find the last dot in
	IF (POSN.NE.0) THEN			! the FRT filename.
	   DOTPOS = DOTPOS+POSN
	   GOTO 140
	ENDIF
C
C Open SRI.
C If no SRI command has been given then the SRI filename is derived
C from the FRT filename. An SRI file must be opened before plotting.
C If the FRT name changes and the SRI name was derived from it then
C the SRI name must also change.
C
120	IF (.NOT.HADSRI) THEN		! not had explicit command
	   IF (.NOT.(HADFRT.AND.SRIDEP)) THEN	! no need to change
	      IF (INISRI) GOTO 160	! retain SRI
	      GOTO 150
	   ENDIF
C
C Derive the SRI filename from the FRT filename.
	   SRITIT(:DOTPOS)=FRTTIT(:DOTPOS)
	   SRITIT(DOTPOS+1:)='SRI;0'
C
150	   CALL WRITEF('Reading SRI file "%S"',
     &	                     SRITIT(1:SIGCHS(SRITIT)))
	   IF (SRIINI(SRITIT,HWSYM)) GOTO 180
	   INISRI=.TRUE.
	ENDIF
	
C
C Open TRI.
C If no TRI command has been given then the TRI filename is derived
C from the FRT filename. A TRI file must be opened before plotting.
C If the FRT name changes and the TRI name was derived from it then
C the TRI name must also change.
160	IF (.NOT.HADTRI) THEN		! not had explicit command
	   IF (.NOT.(HADFRT.AND.TRIDEP)) THEN	! no need to change
	      IF (INITRI) GOTO 170	! retain TRI
	      GOTO 162
	   ENDIF
C
C Derive the TRI filename from the FRT filename
	   TRITIT(:DOTPOS)=FRTTIT(:DOTPOS)
	   TRITIT(DOTPOS+1:)='TRI;0'
C
162	   CALL WRITEF('Reading TRI file "%S"',
     &	                  TRITIT(1:SIGCHS(TRITIT)))
	   IF (TRIINI(TRITIT)) GOTO 1000
	   INITRI=.TRUE.
	ENDIF
C
C the next bit of code is dreadful but it would be dangerous to 
C change it 
C
C	IF (HADPOS.OR.(.NOT.HADDTI(DTICHAN)).OR.(.NOT.DIVIDED)) THEN
170	   IF(DIVIDED) THEN 
	      IF(.NOT.BIGDIV(DTICHAN))CALL LEGEND(DTICHAN,CURPOS,.TRUE.)
	   ELSE
	      IF(.NOT.BIGMAT(DTICHAN))CALL LEGEND(DTICHAN,CURPOS,.TRUE.)
	   ENDIF
C
C Initialise GKS transformation
	   CALL INIGKS(CURPOS,DTICHAN)
C	ELSE
C	   IF (CURPOS .EQ. 1) THEN
C	      IF (.NOT.BIGDIV(DTICHAN)) THEN
C	         CALL LEGEND(DTICHAN,4,.TRUE.)
C	      ENDIF
C	      CALL INIGKS(4,DTICHAN)
C	   ELSE
C	      IF (.NOT.BIGDIV(DTICHAN)) THEN
C	         CALL LEGEND(DTICHAN,CURPOS-1,.TRUE.)
C	      ENDIF
C	      CALL INIGKS(CURPOS-1,DTICHAN)
C	   ENDIF
C	ENDIF
C
C set default values for hatching line width and separation. 
C This is set for each area feature, but a default is needed for
C FRTLIB, when drawing symbols and texts, where the width and size
C entries in the SCT are both 0.0
C
	TAREA(1) = HATWID*SCAFAC/1000.0
	TAREA(2) = HATSEP*SCAFAC/1000.0
	CALL GESC(3,TAREA)	! and set them up
C
C initialise for interpolation for vector drawing
	CALL INTRPL_INIT(INTCT,1.0/(SCLFRT*SCAFAC),.TRUE.)
C
	CALL IFFSEL(3)
C
C Now proceed with the main part of the program which reads in 
C and plots the IFF file.
C
	CALL IFFBDY(FINISH)
	CALL GUWK(WKID,GSUPP)		! update workstation
	PAUSE=.FALSE.			! need to give PAUSE again
	IF (.NOT.FINISH) GOTO 100	! file not finished.
	CALL IFFRWD
	HADINT=.FALSE.
C
	CALL RESGKS	! restore GKS transformation
C
180	HADFRT = .FALSE.
	HADSRI = .FALSE.
	HADTRI = .FALSE.
C
1000	RETURN
	END
