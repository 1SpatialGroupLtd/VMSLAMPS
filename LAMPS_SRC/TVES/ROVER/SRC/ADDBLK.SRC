C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-01-13 12:22:40.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE ADDBLK(NUMIN,XIN,YIN)
C
***	MODULE	ADDBLK
***	IDENT	26JN87
C
C Copyright Laser Scan Laboratories Ltd, Cambridge, England.
C Author R.Daly.
C
C Created					RD	30-Aug-1983
C
C Routine to buffer coordinates up before passing them on to
C either, the line pattern generator, or directly to the GKS
C output routine (GPL). The routine accepts a block of coords.
C This may be just single points, as in the case of circles/arcs
C passed from STCIRC or interpolated curves passed from POLATE).
C It may, however, be many points, as in the case of line strings
C passed directly from STDRAW.
C This routine must also ensure that the blocks of data it passes
C on are compatable with what GKS requires. GPL simply plots
C straight lines between each point so the current position must
C be passed as the 1st coordinate in each block.
C
C
	IMPLICIT NONE
C
	INTEGER NUMIN		! number of coords in input buffer.
	REAL XIN(NUMIN),YIN(NUMIN)
C
	INCLUDE	'LSL$CMNROVER:GRABUF.CMN'
C
C W/s.
	REAL LASTX,LASTY		! holds pt common to 2
					! consecutive blocks.
	INTEGER INPTR			! pointer to X/YIN.
C
C Fill up the output buffer.
	DO 20 INPTR=1,NUMIN
C Is the output buffer full - if so then output it.
	   IF (OUTPTR.LT.BLOSIZ) GOTO 10
	   LASTX=XOUT(OUTPTR)	! remember current position.
	   LASTY=YOUT(OUTPTR)
C Flush out the output buffer.
	   CALL OUTBLK
C Add current position to the now empty buffer.
	   OUTPTR=1
	   XOUT(OUTPTR)=LASTX
	   YOUT(OUTPTR)=LASTY
C Add another coord to the buffer.
10	   OUTPTR=OUTPTR+1
	   XOUT(OUTPTR)=XIN(INPTR)
	   YOUT(OUTPTR)=YIN(INPTR)
20	CONTINUE
C
	RETURN
C
	END
