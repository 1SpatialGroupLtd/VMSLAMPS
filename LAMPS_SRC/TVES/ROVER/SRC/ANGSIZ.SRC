C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-01-13 12:55:04.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE ANGSIZ
C
***	MODULE	ANGSIZ
***	IDENT	13JA88
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author  R. Daly.
C
C Created.					RD	19-Oct-1983
C Updated to deal with text info from IFF file	RWR	25-Mar-1985
C Modified for ROVER				MWSR	   Aug-1986
C
C Routine to set up the correct angle and size for symbols and text
C features. The resulting angle and size depend on the feature type
C and whether there was an IFF RO (rotation) entry given and/or an
C alignment (2 points).
C
C Unoriented symbols and symbol strings (multiple unoriented symbols)
C do not take any angle.
C Oriented and scaled symbols and text take an angle defined by the
C RO entry. If no RO is given then any alignment is used.
C
C Unoriented and oriented symbols, and symbol strings have
C a size set by the FRT size value.
C Text height is also taken from FRT by default, but if TXSIZE command
C has been given, the height from the TH entry in IFF file is used if 
C possible.
C Scaled symbols have a size defined by the alignment (the 2 points
C define the unity length of the symbol. If no alignment is given then
C the FRT size is used (a message has already been produced).
C
C For all feature types, the default angle is horizontal and the
C default size is defined within the program.
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNROVER:CURFT.CMN'
	INCLUDE	'LSL$CMNROVER:DRAWIN.CMN'
	INCLUDE	'LSL$CMNFRT:FRTCOM.CMN'
	INCLUDE	'LSL$CMNROVER:SCLDAT.CMN'
C
C functions called
	LOGICAL		TRISCN
C
C W/s.
	REAL	  XDIF,YDIF	! components of the alignment.
	REAL	  TWOPI,PIBY2
	INTEGER	  TH
	REAL EXTX,EXTY		! size of text box
	INTEGER	DX,DY		! offsets of half EXT's implied by LOCAT
	INTEGER*4 STRDSC(2)	! text ft character string descriptor.
	INTEGER*2 STRDSW(2)
C
	EQUIVALENCE (STRDSC,STRDSW)
C
C Presets.
	PARAMETER (TWOPI=6.283185307)
C
C
C Check the feature is a symbol or text.
	IF (.NOT.(FRTSYM.OR.FRTTEX)) GOTO 1000
C
C
C***********************************************************************
C
C First work out the angle.
C If we are rotating the plot, then subtract 90 degrees, unless using an
C alignment
C
C Default to horizontal angle.
	ANGLE=0.0
C
C What type of feature is it?
	IF ((FRTGT.EQ.UNOTYP).OR.(FRTGT.EQ.STRTYP)) GOTO 30
C
C Oriented symbol, scaled symbol, text.
C Rotation (RO) entry is used in preference to alignment.
	IF (.NOT.HADRO) GOTO 10
	ANGLE=ROTANG
	IF (FRTGT.EQ.SCATYP) GOTO 10	! use alignment for size.
	INDX=1
	GOTO 70
C If there was an alignment then work out the angle in the range
C 0 to 2*pi (note ATAN2 returns a value in the range -pi to +pi).
10	IF (INDX.LE.1) GOTO 70		! no alignment given.
	INDX=1
	XDIF=BLKBUF(1,2)-BLKBUF(1,1)
	YDIF=BLKBUF(2,2)-BLKBUF(2,1)
	IF ((XDIF.EQ.0.0).AND.(YDIF.EQ.0.0)) GOTO 20
	IF (HADRO) GOTO 50
	ANGLE=ATAN2(YDIF,XDIF)
	GOTO 50
20	CALL WRITEF('Illegal text/symbol alignment (both points same)')
	CALL WRITEF('Layer %^W%I6 - Ft No %^L%I6 - ISQ %I6',
     &	 LAYNUM,FTNUM,ISQ)
	GOTO 70
C
C Unoriented symbols / Symbol strings.
30	IF (.NOT.HADRO) GOTO 70
	CALL WRITEF('Unoriented symbol with unexpected IFF RO entry')
	CALL WRITEF('Layer %^W%I6 - Ft No %^L%I6 - ISQ %I6',
     &	 LAYNUM,FTNUM,ISQ)
	GOTO 70
C
C
C***********************************************************************
C
C Now work out the size.
C
C Use the alignment distance if its a scaled symbol.
50	IF (FRTGT.NE.SCATYP) GOTO 70
	SIZE=SQRT(XDIF**2+YDIF**2)*1/SCLFRT
	GOTO 1000
C
C get size of text from IFF entry if necessary
C
70	CONTINUE
	IF (FRTTEX.AND.TXTOPT) THEN
	   IF (FTTHK.LE.0) THEN
	      CALL WRITEF(
     &	         'Illegal text size in TH entry; using FRT entry')
	   ELSE
	      IF (POIOPT) THEN			! TH entry in points
	         TH=FTTHK			! I*2 -> I*4
	         CALL PSTOSZ(TH,SIZE)
	      ELSE
	         SIZE=FTTHK/(100.0*SCLFRT) ! mm size is in 100mms in TH 
	      ENDIF
	      GOTO 1000		      ! got a text size now
	   ENDIF
	ENDIF
C
C Use the FRT size component.
80	SIZE=FRTSIZ/SCLFRT
	IF (SIZE.GT.0.0) GOTO 1000
	CALL WRITEF('Illegal text/symbol size (FRT size) of')
	CALL WRITEF('%F for feature code %^W%N',SIZE,FTCODE)
	CALL WRITEF('Layer %^W%I6 - Ft No %^L%I6 - ISQ %I6',
     &	 LAYNUM,FTNUM,ISQ)
C
C Use (as a last resort) the fixed size values.
	IF (FRTSYM) SIZE=DFSSIZ/SCLFRT
	IF (FRTTEX) SIZE=DFTSIZ/SCLFRT
C
C***********************************************************************
C
C work out size and position of box around text
1000	CONTINUE
	IF (.NOT.FRTTEX.OR..NOT.POSOPT) GOTO 1100
C
C TRISCN currently takes a character variable so a string descriptor
C has to be set up.
	STRDSW(1)=TXPTR				! length.
	STRDSW(2)=0				! class.
	STRDSC(2)=%LOC(TXBUF(1))		! position.
C
	MINX = 0.0
	MINY = 0.0
	MAXY = SIZE
	IF (TRISCN(STRDSC,FRTSC,MAXX)) THEN
	   CALL WRITEF(
     &	      'Layer %^W%I6 - Ft No %^L%I6 - ISQ %I6',
     &	       LAYNUM,FTNUM,ISQ)
	   GOTO 1100
	ENDIF
C
C subtract 1/3rd of a character width - a bit arbitrary as blank space
C at end of charcater is dependant on TRI
C
	MAXX = MAXX - 0.333333
C
	MAXX = MAXX*SIZE
C
C move text box, if locating point is not pt 0
	IF (LOCAT.NE.0) THEN
	   DX=LOCAT/3			! integer division
	   DY=MOD(LOCAT,3)
	   EXTX=(MAXX-MINX)/2		! half the size in X
	   EXTY=(MAXY-MINY)/2		! half the size in Y
	   MINX=MINX-EXTX*DX		! alter position in X
	   MAXX=MAXX-EXTX*DX
	   MINY=MINY-EXTY*DY		! and in Y
	   MAXY=MAXY-EXTY*DY
	ENDIF

C Finally, adjust the angle if we are rotating, and check it is within
C range
1100	ANGLE=ANGLE + THETA
	IF (ANGLE.LT.0.0) THEN
	   ANGLE = ANGLE + TWOPI
	ELSEIF (ANGLE.GE.TWOPI) THEN
	   ANGLE = ANGLE - TWOPI
	ENDIF
	RETURN
	END
