C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-02-17 14:12:44.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE DISPLY(QUADNO,DTI_NUM)
C
***	MODULE	DISPLY
***	IDENT	17FE89
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C Adapted from GRADIENT in SLOPES
C MOD  Changed so that image may be optionally rotated.   DRC 2-SE-86
C This is done by sampling the matrix in a different direction.
C
C
C 	Created					MWSR    29-May-1986
C
	IMPLICIT NONE
C
C Displays a DTI file(s) on the SIGMA ARGS. If the DIVIDE command has
C been specified then the screen will be quartered and up to four 
C files may be displayed.
C
C Argument
	INTEGER*4	QUADNO		!Quadrant number
	INTEGER*4	DTI_NUM	!DTI channel number
C
	INCLUDE	'LSL$CMNDTI:DTIPAR.PAR'
	INCLUDE	'LSL$CMNROVER:GKSPAR.PAR'
C
	INCLUDE	'LSL$CMNDTI:DTIHDR.CMN'
	INCLUDE	'LSL$CMNROVER:ROVCMN.CMN'
	INCLUDE	'LSL$CMNROVER:DTICMN.CMN'
	INCLUDE	'LSL$CMNROVER:GKS.CMN'
	INCLUDE	'LSL$CMNROVER:COLCMN.CMN'
	INCLUDE	'LSL$CMNROVER:DISCMN.CMN'
	INCLUDE	'LSL$CMNROVER:GRABUF.CMN'
	INCLUDE	'LSL$CMNROVER:RASTED.CMN'
C
C Functions
	INTEGER*4	DTI_COPY_BYTE_DATA
	INTEGER*4	DTI_COPY_WORD_DATA
	LOGICAL		HADCTRLC
	INTEGER		ICOL
C
C Local variables
	REAL		X(2),Y(2)
	INTEGER		I
	INTEGER		XPOS,YPOS,XSIGN,XSTEP,YSTEP
	INTEGER*4	IX
	INTEGER*4	ERR,RET
	INTEGER*2	VALUE
	INTEGER		PIXADD
	LOGICAL		DONT_INITIALISE
	INTEGER*4	XSAMP,YSAMP		! sampling values
	BYTE		BVALUE
	EQUIVALENCE	(VALUE,BVALUE)
	
C
	DONT_INITIALISE  = .TRUE.
C Check to see we've had the specified DTI file
	IF (.NOT.HADDTI(DTI_NUM) )THEN
	  IF (DIRECT) THEN
	     CALL WRITEF('%S Specifying command FAST',EBELL)
	  ELSE
	     CALL WRITEF('%S Specifying command DISPLAY',EBELL)
	  ENDIF
	  CALL WRITEF
     &	('Input DTI file not yet selected')
	  GOTO 1000
	ENDIF	
C
	IF ((EDITING.OR.REGISTERING).AND. 
     &       (FILE_DISP(QUADNO).EQ. DTI_NUM)) THEN
	   DONT_INITIALISE  = .FALSE.
	   CALL MOVE_CURSOR(X_CURDTI,Y_CURDTI,.FALSE.,.TRUE.)
	ENDIF
C
	IF (HAD_MODTEN) THEN
C 
C modten is a one off display
	   CALL RESET_PLANES
	   HAD_MODTEN = .FALSE.
	   CALL SETSTP(NOCOL(DTI_NUM),.FALSE.)
	ENDIF
	CALL LSG_PLANE_OFFSET(WKID,0)
C 
C If a picture has already been drawn in this quadrant then it must
C first be blacked out.   
C
	IF (QUADNO.EQ.0.OR.VIEW_SHOWN(0)) THEN	!Full screen
	   IF (QUADNO.EQ.0.AND.VIEW_SHOWN(0)) THEN
	      CALL LSG_PLANE_SELECT(WKID,PLANE_MASK)
	      CALL GSFACI(0)		! fill area colour 0, background
	      CALL GSFAIS(GSOLID)	! solid fill
	      X(1) = SX(0)
	      X(2) = EX(0)
	      Y(1) = SY(0)
	      Y(2) = EY(0)
	      CALL LSG_FILL_RECTANGLE(X,Y)
	      VIEW_SHOWN(0) = .FALSE.
	   ELSE
	      DO 5 I = 0,4
	         VIEW_SHOWN(I) = .FALSE.
5	      CONTINUE
	      CALL GCLRWK(WKID,GALWAY)
	   ENDIF
	ELSE
	   IF (VIEW_SHOWN(QUADNO)) THEN
C
C Use pixel fill for individual quadrants
	      CALL LSG_PLANE_SELECT(WKID,-1)
	      CALL GSFACI(0)		! fill area colour 0, background
	      CALL GSFAIS(GSOLID)	! solid fill
	      X(1) = SX(QUADNO)
	      X(2) = EX(QUADNO)
	      Y(1) = SY(QUADNO)
	      Y(2) = EY(QUADNO)
	      CALL LSG_FILL_RECTANGLE(X,Y)
	   ENDIF
	ENDIF
	VIEW_SHOWN(QUADNO) = .TRUE.
C
C determine if fast display possible
	IF (DIRECT) THEN
	   IF (DATA_TYPE(DTI_NUM) .GE. DATA_WORD) THEN
	      CALL WRITEF(
     &	'%S FAST command ignored with non-byte data',WBELL)
	      CALL WRITEF('Normal display taking place')
	      DIRECT = .FALSE.
	   ELSEIF (PLANE_MASK .LT. MAX_WVALUE(DTI_NUM))THEN
	      CALL WRITEF(
     &	'%S Too few planes set for fast display',WBELL)
	      CALL WRITEF('Normal display taking place')
	      DIRECT = .FALSE.
	   ENDIF
	ENDIF
C
C only display legend and text if we've got a small enough window
C
	IF (DIVIDED) THEN
	   IF(.NOT.BIGDIV(DTI_NUM))THEN
	      CALL LEGEND(DTI_NUM,QUADNO,.FALSE.)
	      IF (TEXTON) THEN
	         CALL TEXT(DTI_NUM,QUADNO,.FALSE.)
	      ENDIF
	   ENDIF
	ELSE
	   IF(.NOT.BIGMAT(DTI_NUM))THEN
	         CALL LEGEND(DTI_NUM,QUADNO,.FALSE.)
	      IF (TEXTON) THEN
	         CALL TEXT(DTI_NUM,QUADNO,.FALSE.)
	      ENDIF
	   ENDIF
	ENDIF
C
	CALL LSG_PLANE_SELECT(WKID,PLANE_MASK)
	CALL LSG_PLANE_OFFSET(WKID,0)
C
C Set position for this DTI
C
	POS(DTI_NUM) = QUADNO
C
C This DTI file has been displayed
C
	DISP(DTI_NUM) = .TRUE.
C
C this quadrant has been displayed in this quadrant
	FILE_DISP(QUADNO) = DTI_NUM
C
C find display magnification and display position
C
	CALL DISVAL(QUADNO,DTI_NUM,.FALSE.)
C
C are we sub-sampling
	IF ( HAD_SAMPLE) THEN
	   XSAMP = X_SAMPLE(DTI_NUM)
	   YSAMP = Y_SAMPLE(DTI_NUM)
	ELSE
	   XSAMP = 1
	   YSAMP = 1
	ENDIF
C
C Set cursor position to centre of this quadrant
	XCUR(DTI_NUM)
     &   = (SIGSWX(QUADNO)+(MATSIZ(DTI_NUM,1)/2)*SF(DTI_NUM))
	YCUR(DTI_NUM)
     &    = (SIGSWY(QUADNO)+(MATSIZ(DTI_NUM,2)/2)*SF(DTI_NUM))
C
C and zoom out the image
	ZOOMF = 1
	CALL LSG_ZOOM_IMAGE(
     &		WKID,FLOAT(RASTSZ(1)/2),FLOAT(RASTSZ(2)/2),ZOOMF)
C
	ZOOMX = XCUR(DTI_NUM)
	ZOOMY = YCUR(DTI_NUM)
C
C Set up drawing direction
	GOTO (300,360,340,320),CUR_ROTATE(DTI_NUM)+1 
C						!south,west,north,east
C
C No rotation (view from south)
300	XPOS = SIGSWX(QUADNO)
	YPOS = SIGSWY(QUADNO)
	XSIGN = 1
	XSTEP = 1
	YSTEP = 0
	GOTO 350
C
C Rotate by 90 (view from west)
320	XPOS = SIGSWX(QUADNO) + 
     &  SF(DTI_NUM)*MATSIZ(DTI_NUM,2)/YSAMP - 1
	YPOS = SIGSWY(QUADNO)
	XSIGN = -1
	XSTEP = 0
	YSTEP = 1
	GOTO 370
C
C Rotate by 180 (view from north)
340	XPOS = SIGSWX(QUADNO) + 
     &  SF(DTI_NUM)*MATSIZ(DTI_NUM,1)/XSAMP - 1
	YPOS = SIGSWY(QUADNO) + 
     &  SF(DTI_NUM)*MATSIZ(DTI_NUM,2)/YSAMP - 1
	XSIGN = -1
	XSTEP = -1
	YSTEP = 0
350	CALL LSG_ROTATION_MODE(WKID,.TRUE.)	! S and N are rotated
	GOTO 380
C
C Rotate by 270 (view from east)
360	XPOS = SIGSWX(QUADNO)
	YPOS = SIGSWY(QUADNO) + 
     &  SF(DTI_NUM)*MATSIZ(DTI_NUM,1)/XSAMP - 1
	XSIGN = 1
	XSTEP = 0
	YSTEP = -1
370	CALL LSG_ROTATION_MODE(WKID,.FALSE.)	! W and E not rotated
	GOTO 380
C
380	CONTINUE
C
C
	VALUE = 0	! clear out word equivalenced on byte
	CALL HADCTRLC
	CALL RESET_BALL(.FALSE.)
C
C
	PIXADD = MATSIZ(DTI_NUM,2)/YSAMP	! number of pixels
C
	DO 500 IX = DTI_WINDOW_SWX(DTI_NUM),DTI_WINDOW_NEX(DTI_NUM),
     &  XSAMP
C
	   CALL DISPLAY_READ(IX,DTI_NUM,YSAMP)
C
C Output this row of pixel values
	  CALL LSG_PIXEL_ARRAY(
     &		FLOAT(XPOS),FLOAT(YPOS),
     &		XSIGN*PIXADD,-XSIGN,1,PIXADD,1,1,
     &		SF(DTI_NUM),
     &		SF(DTI_NUM),
     &		DTIB)
          XPOS = XPOS + XSTEP*SF(DTI_NUM)
          YPOS = YPOS + YSTEP*SF(DTI_NUM)
C
C has CTRL/C been pressed
	  IF (HADCTRLC()) GOTO 10000
500	CONTINUE
	IF (RELOOKUP) THEN
	    COL_EXTENT(1) = DTI_WINDOW_SWX(DTI_NUM)
	    COL_EXTENT(2) = DTI_WINDOW_SWY(DTI_NUM)
	    COL_EXTENT(3) = DTI_WINDOW_NEX(DTI_NUM)
	    COL_EXTENT(4) = DTI_WINDOW_NEY(DTI_NUM)
	    IF (COLOUR_MAP) THEN
	       RELOOKUP = .FALSE.
	    ENDIF
	ENDIF
C 
10000	IF ((EDITING.OR.REGISTERING).AND.(.NOT.DONT_INITIALISE)) THEN
	   CALL INIT_EDIT
	ENDIF
	CALL RESET_BALL(.TRUE.)
	CALL GUWK(WKID,GSUPP)
C
C A DTI file has been displayed so we've not had a POSITION commmand
C recently
C
	HADPOS = .FALSE.
C
C not had a window command recently	 
	HADWIND = .FALSE.
C
1000	RETURN
C
	END
