C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-10-06 11:56:58.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE WRITE_VALS(CURSX,CURSY,DTIVAL,QUADNO,COL)
C
***	MODULE	WRITE_VALS
***	IDENT	06OC92
C
C Copyright Laser-Scan Ltd., Cambridge, England
C
C Author M.W.S. Reid
CMOD	To output real x,y coordinates in registration mode
C                                                   	 DRC 10-Nov-1988
CMOD	To output x,y coordinates in current units   	 DRC 19-Jan-1988
C
C 	Created						MWSR 08-Jan-1988
C
C writes specified status values to display in specified colour
C 
C
	IMPLICIT NONE
C
C arguments
	REAL		CURSX
	REAL		CURSY
	REAL		DTIVAL
	INTEGER*4	QUADNO
	INTEGER*2	COL
	INTEGER*4	FLOOD_LEV
C
C Common Blocks
	INCLUDE	'LSL$CMNDTI:DTIPAR.PAR'
	INCLUDE	'LSL$CMNDTI:DTIHDR.CMN'
	INCLUDE 'LSL$CMNDTI:DTIPROJ.CMN'
	INCLUDE	'LSL$CMNROVER:DTICMN.CMN'
	INCLUDE	'LSL$CMNROVER:ROVCMN.CMN'
	INCLUDE	'LSL$CMNROVER:DISCMN.CMN'
	INCLUDE	'LSL$CMNROVER:RASTED.CMN'
	INCLUDE	'LSL$CMNROVER:GKSPAR.PAR'
	INCLUDE	'LSL$CMNROVER:GKS.CMN'
	INCLUDE	'LSL$CMNLSL:EXPC.CMN'
C
C Local Variables
	BYTE		BVAL		! byte value
	INTEGER*2	WVAL		! word value
	INTEGER*4	LVAL		! longword value
	INTEGER*4	LLDEGS(2)	! x,y position in seconds
	INTEGER*4	DEGR		!degree part of latlong
	INTEGER*4	MINU		!minute part of latlong
	INTEGER*4	SECO		!seconds part of latlong
	LOGICAL		NEGA		!neg latlong value
	REAL*4		LOC_CURSX	
	REAL*4		LOC_CURSY
	REAL*8		X_OUT
	REAL*8		Y_OUT
	REAL*4		SEP
C
	EQUIVALENCE             (BVAL,WVAL)
C
C------------------------------------------------------------------------
C 	set colour
	CALL GSTXCI(COL)
C
C 	write cursor position
C
C	For the time being if we are not in registration mode, the
C	coordinate position will always be output in integer matrix 
C	(column and row) units
C
	IF (.NOT.REGISTERING) THEN
	  CALL EXPAND('%I5 %I5',NINT(CURSX),NINT(CURSY))
	  GOTO 600
	ENDIF
C
C	In registration mode, the units command controls the
C	format of the coordinates.  We also take into account
C	whether use of ABSOLUTE coordinates is enabled in the
C	case of metres or projection units
C
C	0.5 of a pixel so that coordinates are relative
C	to the bottom lefthand corner of the pixel cell
C
	IF (UNTYPE(DTICHAN).EQ. 1) THEN
	   LOC_CURSX = CURSX+0.5
	   LOC_CURSY = CURSY+0.5
	ELSE
	   CALL MATRIX_POINT_FIVE(CURSX,CURSY,CUR_ROTATE(DTICHAN),
     &    	.TRUE.,LOC_CURSX, LOC_CURSY)
	ENDIF
C
C	LOC_CURSX=CURSX+0.5
C	LOC_CURSY=CURSY+0.5
C
C work out the coordinates
C
	CALL DTI_MATRIX_TO_UNITS(DTICHAN, LOC_CURSX, 
     &		LOC_CURSY, UNTYPE(DTICHAN), CUR_ROTATE(DTICHAN),
     &		HAD_ABSOLUTE, X_OUT, Y_OUT)
C
	GOTO (100,200,300,400,200) UNTYPE(DTICHAN)
C
C	Matrix units - output as real values
100	CALL EXPAND('%F7.2 %F7.2', LOC_CURSX-1.0,LOC_CURSY-1.0)
	GOTO 600
C
C	Metre or projection units 
200	CALL EXPAND('%^D%F9.2 %F9.2',X_OUT,Y_OUT)
	GOTO 600
C
C	Seconds of arc.
300	LLDEGS(1)=X_OUT/10
	LLDEGS(2)=Y_OUT/10
	CALL EXPAND('%I9 %I9', LLDEGS(2),LLDEGS(1))
	GOTO 600
C
C	Degrees, Minutes and Seconds
400	LLDEGS(1)=X_OUT
	LLDEGS(2)=Y_OUT
	CALL DTI_CVTANG(LLDEGS(2),NEGA,DEGR,MINU,SECO) 
	CALL EXPAND('%P %I3 %P0%I2 %P0%I2',DEGR,MINU,SECO)
	IF(NEGA)THEN
	  CALL APPEND('S  ')
	ELSE
	  CALL APPEND('N  ')
	ENDIF
C
	CALL DTI_CVTANG(LLDEGS(1),NEGA,DEGR,MINU,SECO) 
	CALL APPEND('%P %I3 %P0%I2 %P0%I2',DEGR,MINU,SECO)
	IF(NEGA)THEN
	  CALL APPEND('W  ')
	ELSE
	  CALL APPEND('E  ')
	ENDIF
	GOTO 600
C
600	SEP = XSEP*3/4
C
C	Output the expanded text string
	CALL GTX(TXTX(QUADNO)+SEP,TXTY(QUADNO),EXPDSC)
C
C------------------------------------------------------------------------
C output DTI value according to the data type
	IF (DATA_TYPE(DTICHAN) .EQ. DATA_BYTE) THEN
	   WVAL = NINT(DTIVAL)
	   CALL EXPAND
     &	   ('%^W%I5',WVAL)
	ELSEIF (DATA_TYPE(DTICHAN) .EQ. DATA_WORD) THEN
	   WVAL = NINT(DTIVAL)
	   CALL EXPAND
     &	   ('%^W%I5',WVAL)
	ELSEIF (DATA_TYPE(DTICHAN) .EQ. DATA_LONG) THEN
	   LVAL = NINT(DTIVAL)
	   CALL EXPAND
     &	   ('%I6',LVAL)
	ELSEIF (DATA_TYPE(DTICHAN) .EQ. DATA_REAL) THEN
	   CALL EXPAND
     &	   ('%F6',DTIVAL)
	ENDIF
C 
	IF (FLOODING) THEN
	   CALL GTX(TXTX(QUADNO)+SEP,TXTY(QUADNO)-2*YSEP,EXPDSC)
	ELSE
	   CALL GTX(TXTX(QUADNO)+SEP,TXTY(QUADNO)-YSEP,EXPDSC)
	ENDIF
C
C	Update workstation
	CALL GUWK(WKID,GSUPP)		! update workstation
C
	RETURN
	END
C
