C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-02-17 12:47:14.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION ROVFIL(UPDATE)
C
***	MODULE	ROVFIL
**	IDENT	17FE89
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    02-Jun-1986
C	Mod      Made into logical funtion	DRC	08-Sep-1986
C
	IMPLICIT NONE
C
C Deals with FILE command in program ROVER. The actual opening of the 
C file is done in OPNFIL. Also sets up default windows and units.
C 
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE	'LSL$CMNDTI:DTIPAR.PAR'
C
	INCLUDE	'LSL$CMNLSL:TXTC.CMN'
	INCLUDE	'LSL$CMNLSL:CMDCOM.CMN'
	INCLUDE	'LSL$CMNROVER:DISCMN.CMN'
	INCLUDE	'LSL$CMNROVER:RASTED.CMN'
	INCLUDE	'LSL$CMNROVER:ROVCMN.CMN'
	INCLUDE	'LSL$CMNROVER:DTICMN.CMN'
	INCLUDE	'LSL$CMNROVER:COLCMN.CMN'
	INCLUDE	'LSL$CMNROVER:IFFCMN.CMN'
	INCLUDE	'LSL$CMNDTI:DTIHDR.CMN'
C
C argument
	LOGICAL		UPDATE 		! open file for write?
C
C Functions 
	LOGICAL		OPNFIL		!Opens the DTI file
	INTEGER*4	TTRSTR
	INTEGER*4	DTI_UNITS
	INTEGER*4	TRNALL
C
C Local variables
	INTEGER*4	I		!Counting variable
	INTEGER*4	RET		!return code
	INTEGER*4	NCHS		!no characters returned
	INTEGER*4	ERRCOD		!error code
	REAL		RTEMP
	INTEGER*4	SAVCHAN,SAVCHAN2 ! saved DTI nos
	CHARACTER*1	TRANSLATION	! logical name translation
	LOGICAL		DEFAULT_WINDOW  ! set up default window
C
C-----------------------------------------------------------------------
C
	ROVFIL=.TRUE.			!assume unsuccessful
	SAVCHAN = DTICHAN
	IF (SAVCHAN .NE. 0) THEN
	   IF (.NOT. HADDTI(SAVCHAN)) THEN
	      SAVCHAN = 0
	   ENDIF
	ENDIF
C
C First check to see if a free channel is available 
	DO 20 I=1,4
	  IF (.NOT.HADDTI(I))GOTO 21
20	CONTINUE
C
C All the channels are already opened
	IF (UPDATE) THEN
	   CALL WRITEF('%S Specifying command UPDATE_FILEIN',EBELL)
	ELSE
	   CALL WRITEF('%S Specifying command FILEIN',EBELL)
	ENDIF
	CALL WRITEF('Four DTI are currently opened')
	CALL WRITEF('CLOSE command should be used')
	GOTO 1000
C
C Open file on smallest channel number available
21	DTICHAN = I				
	IF (OPNFIL(UPDATE)) THEN
	   IF (SAVCHAN .EQ. 0) THEN
	      DTICHAN = 1
	   ELSE
	      DTICHAN = SAVCHAN
	   ENDIF
           GOTO 1000		!error already output
	ENDIF
	NUM_OPN_DTI = NUM_OPN_DTI+1
C
C test logical name to see if we set up default window
	RET = TRNALL('LSL$MATRIX_DEFAULT_WINDOW',TRANSLATION)
	IF(.NOT.RET.OR.TRANSLATION.NE.'1')THEN
	   DEFAULT_WINDOW=.FALSE.
	ELSE
	   DEFAULT_WINDOW=.TRUE.
	ENDIF
C
C set up the rotation according to rotation flags in the common block
	CUR_ROTATE(DTICHAN) = DTI_ORDER_CORNER(DTICHAN)
C
C Set up default window for current channel
C
	DTI_WINDOW_SWX(DTICHAN)=1
	DTI_WINDOW_SWY(DTICHAN)=1
	IF(DEFAULT_WINDOW)THEN
C
C Maximum window is such that it fits the divided screen at x2 size
C (and hopefully the full screen at x4)
	   DTI_WINDOW_NEX(DTICHAN)=NINT((DISPEX(1)-DISPSX(1)+1)/2)
	   DTI_WINDOW_NEY(DTICHAN)=NINT((DISPEY(1)-DISPSY(1)+1)/2)
C
C If a rotation is set, then swap round x and y in default window
	   IF (CUR_ROTATE(DTICHAN).EQ.1.OR.CUR_ROTATE(DTICHAN).EQ.3) 
     &     THEN
	      RTEMP = DTI_WINDOW_NEX(DTICHAN)
	      DTI_WINDOW_NEX(DTICHAN) = DTI_WINDOW_NEY(DTICHAN)
	      DTI_WINDOW_NEY(DTICHAN) = RTEMP
	   ENDIF
C
	ELSE
C
C use whole DTI file
	   DTI_WINDOW_NEX(DTICHAN)=X_EXTENT(DTICHAN)
	   DTI_WINDOW_NEY(DTICHAN)=Y_EXTENT(DTICHAN)
	ENDIF
C
C	   	   
C
C Force window into range
	DTI_WINDOW_NEX(DTICHAN) = 
     &      MIN(DTI_WINDOW_NEX(DTICHAN),X_EXTENT(DTICHAN))
	DTI_WINDOW_NEY(DTICHAN) = 
     &      MIN(DTI_WINDOW_NEY(DTICHAN),Y_EXTENT(DTICHAN))
C
C	
	MATSIZ(DTICHAN,1)=DTI_WINDOW_NEX(DTICHAN)
	MATSIZ(DTICHAN,2)=DTI_WINDOW_NEY(DTICHAN)
	BIGMAT(DTICHAN) = .FALSE.
	BIGDIV(DTICHAN) = .FALSE.
C
C ensure window can be displayed
	CALL CHKWIN(DTICHAN)
C
C Set up default units
	UNTYPE(DTICHAN) = 0
	RET = DTI_UNITS(DTICHAN,UNTYPE(DTICHAN))
	IF(.NOT. RET)THEN
	   CALL LSL_PUTMSG(RET)
	   UNTYPE(DTICHAN) = UNITS_DTI
	ENDIF
C
C print out info
	CALL DTI_PRINT_HEADER(DTICHAN,UNTYPE(DTICHAN),
     &  HAD_ABSOLUTE,CUR_ROTATE(DTICHAN))
	CALL WRITEF('DTI File Number %N',DTICHAN)
C
C need to display it if in edit mode
	RELOOKUP = .TRUE.
	SAVCHAN2 = DTICHAN
	NEW_WINDOW_RANGE = .TRUE.		! for SHOW RANGE
	IF (EDITING.OR.REGISTERING) THEN
	   DTICHAN = SAVCHAN
C
C finish off editing previous DTI
	   IF (DTICHAN .NE. 0) THEN
C 
C there is a previous DTI
	      CALL FINISH_EDIT
	      FIRST_FLOOD = .TRUE.
	   ENDIF
	ENDIF
	DTICHAN = SAVCHAN2
        IF(EDITING.OR.REGISTERING) THEN
C
C routine to call disply
	   IF (DIVIDED) THEN
	      CURPOS = CURPOS + 1
	      IF (CURPOS .GT. 4) CURPOS = 1
	   ENDIF
	   CALL SETSTP(NOCOL(DTICHAN),.FALSE.)
	   FILE_DISP(CURPOS) = 0
	   CALL START_EDIT
	ENDIF
C
C set up the  IFF window
	IF (HADIFF(IFFCHAN)) THEN
	   CALL SET_IFFWIN
	ENDIF
C
	ROVFIL=.FALSE.		!success
C
1000	RETURN
	END
