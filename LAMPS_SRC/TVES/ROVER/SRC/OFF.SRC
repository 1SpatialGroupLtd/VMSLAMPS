C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-01-13 11:50:56.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE OFF(NO,X,Y)
C
***	IDENT	17JL86
***	MODULE	OFF
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RWR	06-Jun-1986
C
C Description
C
C	To offset a an array of coordinates.  This routine can be used
C	to offset features that are in several buffers, as long as the
C	last point in the previous buffer has been "sorted" with SRTOFF
C
	IMPLICIT NONE
C
C Arguments
C
	INTEGER		NO		! number of points in this buffer
	REAL		X(NO),Y(NO)	! the points
C
C common blocks
C
	INCLUDE	'LSL$CMNROVER:DRAWIN.CMN'
C
C
C Local Variables
C
	INTEGER		I		! loop counter
	REAL		SEG(2,2)	! the current vector
	REAL		PT(2)		! intersection point
	INTEGER		IN1,IN2		! dummy
C
C functions
C
	LOGICAL		INTSCT
C
C initialise
C
	IF (STD) THEN		! this is not the first buffer, so
				! connect with last one
	   LSTOFF(1,1) = LSTPT(1)
	   LSTOFF(2,1) = LSTPT(2)
	   LSTOFF(1,2) = X(1)
	   LSTOFF(2,2) = Y(1)
	   CALL OFSEG(OFFDIST,LSTOFF)
	ELSE			! start at first point
	   LSTPT(1) = X(1)
	   LSTPT(2) = Y(1)
	ENDIF
C
C go through all the vectors, offsetting them, and intersecting this
C offset vector with the last one.
C
C Note that the resulting point is put into the original buffer, so
C its initial value must be remembered (as well as remembering it
C between calls of this routine)
C
	DO 10, I = 1,NO-1
C
C get next vector
C
	   SEG(1,1) = LSTPT(1)
	   SEG(2,1) = LSTPT(2)
	   SEG(1,2) = X(I+1)
	   SEG(2,2) = Y(I+1)
C
C remember this point
C
	   LSTPT(1) = X(I+1)
	   LSTPT(2) = Y(I+1)	 
C
	   CALL OFSEG(OFFDIST,SEG)	! offset this vector
C
C if this is start, then we have the first point (perp to line)
C
	   IF (.NOT.STD) THEN
	      X(I) = SEG(1,1)
	      Y(I) = SEG(2,1)
	      STD = .TRUE.		! started now
	   ELSE
C
C work out intersection (if possible).  This is not possible if
C the two lines are parallel (collinear in this problem) or if one
C is a point!  In either case we take the end of the offset.
C
	      IF (INTSCT(SEG,LSTOFF,PT,IN1,IN2)) THEN	! no intersection
	         X(I) = SEG(1,1)
	         Y(I) = SEG(2,1)
	      ELSE
	         X(I) = PT(1)
	         Y(I) = PT(2)
	      ENDIF
	   ENDIF
C
C this vector is now last vector
C
	   LSTOFF(1,1) = SEG(1,1)
	   LSTOFF(2,1) = SEG(2,1)
	   LSTOFF(1,2) = SEG(1,2)
	   LSTOFF(2,2) = SEG(2,2)
   10	CONTINUE
C
C for the moment, the last point is offset perpendicularly, but it
C may be doctored later by SRTOFF
C
	IF (STD) THEN
	   X(NO) = LSTOFF(1,2)	
	   Y(NO) = LSTOFF(2,2)
	ENDIF
C
	RETURN
	END
