C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-03-16 16:09:50.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE RCP_ADD (ACTION_NUMBER)
C
***	IDENT	16MR89
***	MODULE	RCP_ADD
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C	Created   : D R Catlow                   18-November-1988
C
C	Routine to add a new RCP entry to the current RCP_FILE
C
C	The RCP is identified by means of the RCP identifier. An
C	RCP with the same identifier should not already exist in
C	the file.
C---------------------------------------------------------------------------
C
CMOD 	To prevent a RCP_ID that is a duplicate being supplied as
C	a default.				DRC 16-MAR-1989
C---------------------------------------------------------------------------
C
	IMPLICIT NONE
C
***	PARAMETER/LSL$CMNLSL:READSTR/
C
***	COMMON/LSL$CMNLSL:CMDCOM/
***	COMMON/LSL$CMNDTI:DTIHDR/
***	COMMON/LSL$CMNDTI:DTIPROJ/
***	COMMON/LSL$CMNROVER:DTICMN/
***	COMMON/LSL$CMNROVER:RASTED/
***	COMMON/LSL$CMNROVER:TAB/
***	COMMON/LSL$CMNROVER:DTIQIO/
***	COMMON/LSL$CMNROVER:RCP/
***	COMMON/LSL$CMNROVER:ROVCMN/
***	COMMON/LSL$CMNROVER:DISCMN/
C
C	Argument
	INTEGER*4	ACTION_NUMBER	! 1 - from terminal
C					! 2 - from mouse
C					! 3 - DTI coordinates
C					      from table
C					! 4 - map coordinates
C					      from table
C
C	Local
	CHARACTER*10	CURRENT_ID		! RCP identifier
	CHARACTER*2	CURRENT_TYPE		! RCP type
	REAL*8		CURRENT_X		! RCP x coord
	REAL*8		CURRENT_Y		! RCP y coord
	REAL*4		CURRENT_Z		! RCP z coord
	REAL*4		CURRENT_WZ		! RCP z coord weight
	REAL*4		CURRENT_WXY		! RCP xy coord weight
	INTEGER*4	CURRENT_FILE		! current file
C
	CHARACTER*80	PROMPT
	INTEGER*4	NCHS			! number of chs read
	INTEGER*4	LEN			! number of chs expanded
	INTEGER*4	I			! counter
	BYTE		CH
	INTEGER*4	LLDEGS(2)		! Latlong values 
C						  as .1 secs
	REAL*4		LOC_CURSX
	REAL*4		LOC_CURSY
	REAL*4		X_DTI,Y_DTI
	REAL*4		TEMP
	REAL*8		XVAL,YVAL
C
C	Functions:
	LOGICAL		READLL			! Reads lat long
	INTEGER*4	EXPAND
	INTEGER*4	READSTR			! read ID from TXTBUF
	LOGICAL		RDREAL			! read a real value
	LOGICAL		RDCHS			! read a character
	LOGICAL		WAIT_INPUT
	LOGICAL		RCP_CHECK_ID		! to check ID is unique
C
C work on the current RCP file in all cases except ACTION 4
	CURRENT_FILE  = CURRENT_RCP_FILE
C
C-----------------------------------------------------------------------
C	Get the coordinate values.
C	These may come from the terminal, mouse or table puck.
C
	IF(ACTION_NUMBER.EQ.1)THEN
C	Read the x,y coordinates of the RCP from the terminal
	  IF(CMDRCT.NE.2.AND.UNTYPE(DTICHAN).NE.4)THEN
	    CALL WRITEF('%S Specifying command RCP ADD',EBELL)
	    CALL WRITEF('Command requires 2 real x y coordinates')
	    GOTO 999
	  ENDIF
C
C	Convert from current units of measurement, so that
C	we can test against file geographic extents
C if its lat long - first change into  seconds
	  IF(UNTYPE(DTICHAN).EQ.4) THEN
            IF(READLL(LLDEGS,2))THEN
	      CALL WRITEF('%S Specifying command RCP ADD',EBELL)
	      CALL WRITEF('Unable to use supplied LATLONG values')
	      GOTO 999
	    ELSE
	      REALAR(2)=LLDEGS(1)*10
	      REALAR(1)=LLDEGS(2)*10
	    ENDIF
	  ELSEIF(UNTYPE(DTICHAN).EQ.3) THEN
	    TEMP = REALAR(1)
	    REALAR(2)= REALAR(1)*10
	    REALAR(2) = TEMP*10
	  ENDIF
   	  CALL DTI_UNITS_TO_MATRIX(DTICHAN, DBLE(REALAR(1)), 
     &    DBLE(REALAR(2)),
     &    UNTYPE(DTICHAN), CUR_ROTATE(DTICHAN), 
     &    HAD_ABSOLUTE, CURRENT_X, CURRENT_Y)
C
	ELSE IF (ACTION_NUMBER.EQ.2 .OR. ACTION_NUMBER .EQ. 3)THEN
C
C from the mouse or table
C 
	   IF(ACTION_NUMBER .EQ. 3) THEN
C
C if its from the table then convert table coords to DTI coordinates
	      CALL TRANSF(DTICHAN+4,X_TAB,Y_TAB,X_DTI,Y_DTI)
	   ELSE
C
C current mouse position
	      X_DTI = X_CURDTI
	      Y_DTI = Y_CURDTI
	   ENDIF
C	   
C	Take the x,y coordinates of the RCP from the mouse position
C	and convert into the current units of measurement
	   IF(UNTYPE(DTICHAN).NE. 1) THEN
	      CALL MATRIX_POINT_FIVE(X_DTI,Y_DTI,
     &        CUR_ROTATE(DTICHAN),
     &       .TRUE.,LOC_CURSX, LOC_CURSY)
	      CALL DTI_MATRIX_TO_UNITS(DTICHAN, LOC_CURSX, 
     &        LOC_CURSY, UNTYPE(DTICHAN), CUR_ROTATE(DTICHAN),
     &         HAD_ABSOLUTE, 
     &        XVAL, YVAL)
	      REALAR(1) = XVAL
	      REALAR(2) = YVAL
	      CURRENT_X = LOC_CURSX
	      CURRENT_Y = LOC_CURSY
	   ELSE
C
	      REALAR(1) = X_DTI-0.5
	      REALAR(2) = Y_DTI-0.5
	      CURRENT_X = REALAR(1)
	      CURRENT_Y = REALAR(2)
C
	   ENDIF
C
	ELSE IF (ACTION_NUMBER.EQ.4 ) THEN
C
C map coordinates from the table
	   CALL TRANSF(4,X_TAB,Y_TAB,REALAR(1),REALAR(2))
	   CURRENT_FILE = CURRENT_TABLE_RCP_FILE 
C
	   GOTO 200
	ENDIF
C
C--------------------------------------------------------------------------
C	Check that the coordinates are within the bounds of the DTM
        IF(CURRENT_X.LT.0.0.OR.CURRENT_X.GT.X_EXTENT(DTICHAN).OR.
     &     CURRENT_Y.LT.0.0.OR.CURRENT_Y.GT.Y_EXTENT(DTICHAN))THEN
	  CALL WRITEF('%S Specifying command RCP ADD',EBELL)
	  CALL WRITEF
     &  ('RCP coordinates outside geographical bounds of DTI file %N',
     &    DTICHAN)
	  GOTO 999
	ENDIF
C
C----------------------------------------------------------------------
200	CURRENT_RCP(CURRENT_FILE)=TOTAL_RCPS(CURRENT_FILE)+1
C
C	IF(ACTION_NUMBER.EQ.2)THEN
C	  CALL SYS$CANCEL(%VAL(IN_CHAN))
C	  HADQIO = .FALSE.
C	ENDIF
	TTIDON=.TRUE.
C
C	RCP ID
C	If USE_DEFAULT_ID then automatically set the ID to the current
C	RCP entry number, otherwise prompt
C
	CURRENT_ID = '          '
C
C	Check that CURRENT_RCP which we are to use as the default has
C	not already been used.
	DO 205 I=CURRENT_RCP(CURRENT_FILE),MAX_RCPS
	  CALL EXPAND('%WS%N',CURRENT_ID,I)
	  IF(RCP_CHECK_ID(CURRENT_ID))GOTO 207
205	CONTINUE
C          
207	IF(.NOT.USE_DEFAULT_ID)THEN	
	  LEN = EXPAND('%WSEnter RCP ID (Default = %S)',
     &    PROMPT,CURRENT_ID)
210	  IF (.NOT.WAIT_INPUT(PROMPT(1:LEN))) GOTO 999
	  IF (.NOT.HAD_VDU) GOTO 210
	  NCHS = READSTR(CURRENT_ID,'!',ON_SPACE,.TRUE.)
	  IF(NCHS.LT.0)GOTO 210
	  IF(NCHS.NE.0)THEN
C	Check that the RCP ID is unique
	    IF(.NOT.RCP_CHECK_ID(CURRENT_ID))THEN
	      CALL WRITEF('%S Specifying RCP ID',EBELL)
	      CALL WRITEF('ID %S is not unique',CURRENT_ID)
	      GOTO 210
	    ENDIF
	  ENDIF
	ENDIF
C
C-----------------------------------------------------------------------
C	RCP TYPE
C	If USE_DEFAULT_TYPE then automatically set the type to
C	the current default TYPE, otherwise prompt
C
	CURRENT_TYPE = '  '
C
	IF(USE_DEFAULT_TYPE)THEN	
	  CURRENT_TYPE = DEFAULT_RCP_TYPE
	ELSE
	  LEN = EXPAND('%WSEnter RCP TYPE (Default = %S)',
     &    PROMPT,DEFAULT_RCP_TYPE)
220	  IF (.NOT.WAIT_INPUT(PROMPT(1:LEN))) GOTO 999
	  IF (.NOT.HAD_VDU) GOTO 220
	  NCHS = READSTR(CURRENT_TYPE,'!',ON_SPACE,.TRUE.)
	  IF(NCHS.EQ.0)THEN
	    CALL EXPAND('%WS%S',CURRENT_TYPE,DEFAULT_RCP_TYPE)
	  ENDIF	    
	  IF(NCHS.LT.0)GOTO 220
	ENDIF
C
C------------------------------------------------------------------------
C	RCP Z coordinate
C	If USE_DEFAULT_Z then automatically set the Z to
C	the current default Z, otherwise prompt
C
	IF(USE_DEFAULT_Z)THEN	
	  CURRENT_Z = DEFAULT_RCP_Z
	ELSE
	  LEN = EXPAND('%WSEnter Z value (Default = %^D%F0)',
     &    PROMPT,DEFAULT_RCP_Z)
230	  IF (.NOT.WAIT_INPUT(PROMPT(1:LEN))) GOTO 999
	  IF (.NOT.HAD_VDU) GOTO 230
 	  IF(RDCHS(CH))THEN
	    CURRENT_Z=DEFAULT_RCP_Z
	  ELSE
	    CALL BSCH
	    IF (RDREAL(CURRENT_Z)) GOTO 230
	  ENDIF
	ENDIF
C
C-------------------------------------------------------------------------	
C	RCP WXY value
C	If USE_DEFAULT_WXY then automatically set the value to
C	the current default WXY, otherwise prompt
C
	IF(USE_DEFAULT_WXY)THEN	
	  CURRENT_WXY = DEFAULT_RCP_WXY
	ELSE
	  LEN = EXPAND('%WSEnter XY weight (Default = %^D%F0)',
     &    PROMPT,DEFAULT_RCP_WXY)
240	  IF (.NOT.WAIT_INPUT(PROMPT(1:LEN))) GOTO 999
	  IF (.NOT.HAD_VDU) GOTO 240
 	  IF(RDCHS(CH))THEN
	    CURRENT_WXY=DEFAULT_RCP_WXY
	  ELSE
	    CALL BSCH
	    IF (RDREAL(CURRENT_WXY)) GOTO 240
	  ENDIF
	ENDIF
C
C-------------------------------------------------------------------------
C	RCP WZ value
C	If USE_DEFAULT_WZ then automatically set the value to
C	0.0 or 1.0 depending on the value of the Z coordinate
C
	IF(USE_DEFAULT_Z)THEN	
	  CURRENT_WZ = DEFAULT_RCP_WZ
	ELSE
	  IF(CURRENT_Z.EQ.0.0)THEN
            CURRENT_WZ = 0.0
	  ELSE
 	    CURRENT_WZ = 1.0
	  ENDIF
	  LEN = EXPAND('%WSEnter Z weight (Default = %^D%F0)',
     &    PROMPT,CURRENT_WZ)
250	  IF (.NOT.WAIT_INPUT(PROMPT(1:LEN))) GOTO 999
	  IF (.NOT.HAD_VDU) GOTO 250
 	  IF(.NOT.RDCHS(CH))THEN
	    CALL BSCH
	    IF (RDREAL(CURRENT_WZ)) GOTO 250
	  ENDIF
	ENDIF
C
C-------------------------------------------------------------------------
C	Move CURRENT RCP values to RCP variables in common
C
	RCP_ID(CURRENT_FILE,CURRENT_RCP(CURRENT_FILE))   
     &       = CURRENT_ID
	RCP_TYPE(CURRENT_FILE,CURRENT_RCP(CURRENT_FILE)) 
     &       = CURRENT_TYPE
	RCP_X(CURRENT_FILE,CURRENT_RCP(CURRENT_FILE))     
     &       = REALAR(1)
	RCP_Y(CURRENT_FILE,CURRENT_RCP(CURRENT_FILE)) 
     &       = REALAR(2)
	RCP_Z(CURRENT_FILE,CURRENT_RCP(CURRENT_FILE)) 
     &       = CURRENT_Z
        RCP_WXY(CURRENT_FILE,CURRENT_RCP(CURRENT_FILE))
     &       = CURRENT_WXY
	RCP_WZ(CURRENT_FILE,CURRENT_RCP(CURRENT_FILE)) 
     &       = CURRENT_WZ
C
C-------------------------------------------------------------------------
C	Increment RCP counter
	TOTAL_RCPS(CURRENT_FILE)=TOTAL_RCPS(CURRENT_FILE)+1
C
C	Output confirmation if entered from the mouse button or table
	IF(ACTION_NUMBER.NE.1)THEN
	  CALL WRITEF('RCP with coordinates %^D%F0. %F0.',
     &    RCP_X(CURRENT_FILE,CURRENT_RCP(CURRENT_FILE)),
     &    RCP_Y(CURRENT_FILE,CURRENT_RCP(CURRENT_FILE)))
	  CALL WRITEF('and ID %S added to RCP File Number %N',
     &    RCP_ID(CURRENT_FILE,CURRENT_RCP(CURRENT_FILE)),
     &    CURRENT_FILE)
	ENDIF
C
C-------------------------------------------------------------------------
C
999	RETURN
C
	END


