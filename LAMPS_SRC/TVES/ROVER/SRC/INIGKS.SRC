	SUBROUTINE INIGKS(QUADNO,DTI_NUM)
C
***	MODULE  INIGKS
***	IDENT	03FE89
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    15-Jul-1986
C
C Sets GKS transformation appropriate for overlaying vector
C information on the raster background.
C 
C
	IMPLICIT NONE
C
C Argument
	INTEGER*4	QUADNO		!quadrant numbers
	INTEGER*4	DTI_NUM	!channel number
C
	INCLUDE	'LSL$CMNROVER:GKSPAR.PAR'
C
	INCLUDE	'LSL$CMNROVER:IFFCMN.CMN'
	INCLUDE	'LSL$CMNROVER:DISCMN.CMN'
	INCLUDE	'LSL$CMNROVER:GKS.CMN'
	INCLUDE	'LSL$CMNROVER:SCLDAT.CMN'
	INCLUDE	'LSL$CMNROVER:ROVCMN.CMN'
	INCLUDE	'LSL$CMNROVER:DTICMN.CMN'
	INCLUDE	'LSL$CMNROVER:DRAWIN.CMN'
	INCLUDE	'LSL$CMNROVER:COLCMN.CMN'
	INCLUDE	'LSL$CMNFRT:FRTCOM.CMN'
	INCLUDE	'LSL$CMNROVER:FPPDAT.CMN'
C
C Local Variables
	REAL		NDCSWX,NDCNEX	! NDC coords of window
	REAL		NDCSWY,NDCNEY
	INTEGER		X1,Y1
	REAL		EXTEND_WINDOW(2,2) ! extended IFF window
	REAL		X_RANGE,Y_RANGE
	INTEGER		DIVIDE_BY_X
	INTEGER		DIVIDE_BY_Y
	REAL		SMALL_X_PIECE
	REAL		SMALL_Y_PIECE
	
C
	CALL LSG_PLANE_VISIBLE(WKID,-1)	!all planes visible
	HADPIC(1) = .TRUE.
	HADPIC(2) = .TRUE.
C
	IF (MASK) THEN
	   CALL LSG_PLANE_SELECT(WKID,PLANE_MASK) ! picture 1
	   CALL LSG_PLANE_OFFSET(WKID,0)
	   CURCOL = 0
	ELSE
	   CALL LSG_PLANE_SELECT(WKID,.NOT.PLANE_MASK) ! picture 2
	   CALL LSG_PLANE_OFFSET(WKID,NOPLNS)
	ENDIF
C
C find DTI file limits 
	CALL DISVAL(QUADNO,DTI_NUM,.TRUE.)
C
C increase the size of the effective IFF window by half a DTI pixel 
C all the way round + small piece to ensure all IFF is output- 
	X_RANGE = WIND(2,1,IFFCHAN)- WIND(1,1,IFFCHAN)
	Y_RANGE = WIND(2,2,IFFCHAN)- WIND(1,2,IFFCHAN)
	DIVIDE_BY_X = MAX(1,(MATSIZ(DTICHAN,1)-1))
	DIVIDE_BY_Y = MAX(1,(MATSIZ(DTICHAN,2)-1))
	SMALL_X_PIECE = X_RANGE/(DIVIDE_BY_X*50)
	SMALL_Y_PIECE = Y_RANGE/(DIVIDE_BY_Y*50)
	EXTEND_WINDOW(1,1)=
     &  WIND(1,1,IFFCHAN)-X_RANGE/(DIVIDE_BY_X*2)-SMALL_X_PIECE
	EXTEND_WINDOW(1,2) =
     &  WIND(1,2,IFFCHAN)-Y_RANGE/(DIVIDE_BY_Y*2)-SMALL_Y_PIECE
	EXTEND_WINDOW(2,1) =
     &  WIND(2,1,IFFCHAN)+X_RANGE/(DIVIDE_BY_X*2)+SMALL_X_PIECE
	EXTEND_WINDOW(2,2) =
     &  WIND(2,2,IFFCHAN)+Y_RANGE/(DIVIDE_BY_Y*2)+SMALL_Y_PIECE
C
	CALL GSWN(1,EXTEND_WINDOW(1,1),EXTEND_WINDOW(2,1),
     &	            EXTEND_WINDOW(1,2),EXTEND_WINDOW(2,2)) 
C
C
C set window - same as IFF window
C	CALL GSWN(1,WIND(1,1,IFFCHAN),WIND(2,1,IFFCHAN),
C     &	            WIND(1,2,IFFCHAN),WIND(2,2,IFFCHAN)) 
C
C
C allow for rotation of matrix
	IF (CUR_ROTATE(DTI_NUM).EQ.0.OR.CUR_ROTATE(DTI_NUM).EQ.2) THEN
	   X1 = 1
	   Y1 = 2
	ELSE
	   X1 = 2
	   Y1 = 1
	ENDIF
C
C set up viewport to be the same as the DTI display area
	NDCSWX = SIGSWX(QUADNO)+0.5
	NDCSWY = SIGSWY(QUADNO)+0.5
	NDCNEX = SIGSWX(QUADNO)+MATSIZ(DTI_NUM,X1)*
     &  SF(DTI_NUM)/X_SAMPLE(DTICHAN)
	NDCNEY = SIGSWY(QUADNO)+MATSIZ(DTI_NUM,Y1)*
     &  SF(DTI_NUM)/Y_SAMPLE(DTICHAN)
C
C and now convert to NDC
	NDCSWX = NDCSWX*NDCX/RASTSZ(1)
	NDCNEX = NDCNEX*NDCX/RASTSZ(1)
	NDCSWY = NDCSWY*NDCY/RASTSZ(2)
	NDCNEY = NDCNEY*NDCY/RASTSZ(2)
C
	CALL GSVP(1,NDCSWX,NDCNEX,NDCSWY,NDCNEY)
C
C set workstation window to same thing
	CALL GSWKWN(1,NDCSWX,NDCNEX,NDCSWY,NDCNEY)
C
C and workstation viewport equivalent piece of screen
	NDCSWX = NDCSWX*SCRNSZ(1)/NDCX	! convert NDC to screen metres
	NDCNEX = NDCNEX*SCRNSZ(1)/NDCX
	NDCSWY = NDCSWY*SCRNSZ(2)/NDCY
	NDCNEY = NDCNEY*SCRNSZ(2)/NDCY
	CALL GSWKVP(1,NDCSWX,NDCNEX,NDCSWY,NDCNEY)
C
C work out scale factor for SRIUNI (IFF unit * SCLFRT = sheet mm)
	IF (HADIFF(IFFCHAN)) THEN
	   SCLFRT = MAX( (NDCNEX-NDCSWX)
     &	                /(WIND(2,1,IFFCHAN)-WIND(1,1,IFFCHAN)),
     &                   (NDCNEY-NDCSWY)
     &	                /(WIND(2,2,IFFCHAN)-WIND(1,2,IFFCHAN))
     &	               )*1000.0/SCAFAC
	ENDIF
C
C remember that we've drawn vectors in this quadrant
	VEC_SHOWN(QUADNO) = .TRUE.
C
	RETURN
	END
