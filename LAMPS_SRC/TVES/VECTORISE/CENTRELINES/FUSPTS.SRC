C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-06-23 18:00:04.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE FUSPTS
C
***	IDENT	23JN86
***	MODULE	FUSPTS
C
C	Copyright : Laser-Scan Laboratories Ltd., Cambridge, England
C	Created   : ACM					Mar 1986
C
	IMPLICIT NONE
C
***	COMMON/HERE:VEC/
C
C workspace
	INTEGER		ILINK
	INTEGER*2	INODE,JNODE
	INTEGER		IPTPRV,IPT	! PT index in line ILIN
	INTEGER		JPT		! PT index of nearest pt
	INTEGER		IPTSTA,IPTFIN	! link start/fin PT indices
	REAL		X,Y		! pt coords
	LOGICAL		LOOP		! is link a loop?
	LOGICAL		ON_BOUNDARY	! pt on image boundary?
	LOGICAL		IPT_DELETED	! has pt IPT been deleted?
C
C functions
	INTEGER		NODINDEX
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Passes through each link in turn bridging out all non-paired
C	touching points and fusing paired pts by moving both pts to
C	their average position
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
	DO 30 ILINK = 1,N_LINKS
	  IF (LINK_FC(ILINK).EQ.BORDER_FC) GOTO 30 !ignore bndry links
	  IPTSTA = LINKPOS(1,ILINK)		! get first pt index
	  IF (IPTSTA.EQ.NIL) GOTO 30		! ignore scrubbed links
	  IPTFIN = LINKPOS(2,ILINK)
	  IPT = IPTSTA
	  LOOP = NEXT(IPTFIN).EQ.IPTSTA
	  IF (LOOP) THEN
	    IPTPRV = IPTFIN
	  ELSE
	    IPTPRV = NIL
	  END IF
	  GOTO 20
10	  IF (.NOT.IPT_DELETED) IPTPRV = IPT	! note pt before IPT
	  IPT = NEXT(IPT)			! set next pt index
20	  IPT_DELETED = .FALSE.			! assume pt IPT remains
	  JPT = NEAREST(IPT)
C
C if pt touches other pt then
	  IF (JPT.NE.NIL) THEN			! pt IPT has touched
C
C if pt is paired then both pts are moved to their av position
	    IF (NEAREST(JPT).EQ.IPT) THEN	! pt is paired
C
	      X = (PT(1,IPT)+PT(1,JPT))/2	! so both pts move to
	      Y = (PT(2,IPT)+PT(2,JPT))/2	! average position
	      PT(1,IPT) = X
	      PT(2,IPT) = Y
	      PT(1,JPT) = X
	      PT(2,JPT) = Y
	      SQMINDIST(IPT) = -1		! and get marked
	      SQMINDIST(JPT) = -1		! as fused

C else pt is touching but not paired so it is deleted
	    ELSE
	      IF (IPT.EQ.LINKPOS(1,ILINK)) THEN
C
C if pt to be deleted is first pt in link then care must be taken to
C make sure than the link start-point record is changed accordingly
	        X = PT(1,LINKPOS(1,ILINK))
	        Y = PT(2,LINKPOS(1,ILINK))
	        ON_BOUNDARY = X.EQ.RXMIN.OR.X.EQ.RXMAX
     &	                  .OR.Y.EQ.RYMIN.OR.Y.EQ.RYMAX
	        IF (.NOT.ON_BOUNDARY) THEN
	          LINKPOS(1,ILINK) = NEXT(LINKPOS(1,ILINK))
	          IF (LOOP) NEXT(IPTFIN) = LINKPOS(1,ILINK)
	          IPT_DELETED = .TRUE.
	        END IF
	      ELSE IF (IPT.EQ.IPTFIN) THEN
C
C if pt to be deleted is last pt in link then care must be taken to
C make sure than the link end-point record is changed accordingly
	        X = PT(1,IPTFIN)
	        Y = PT(2,IPTFIN)
	        ON_BOUNDARY = X.EQ.RXMIN.OR.X.EQ.RXMAX
     &	                  .OR.Y.EQ.RYMIN.OR.Y.EQ.RYMAX
	        IF (.NOT.ON_BOUNDARY) THEN
	          LINKPOS(2,ILINK) = IPTPRV
	          IF (LOOP) THEN
	            NEXT(IPTPRV) = LINKPOS(1,ILINK)
	          ELSE
	            NEXT(IPTPRV) = NIL
	          END IF
	        END IF
	      ELSE
	        NEXT(IPTPRV) = NEXT(IPT)
	        IPT_DELETED = .TRUE.
	      END IF
	    END IF
	  END IF
C
	  IF (IPT.NE.IPTFIN) GOTO 10	! loop for next pt
C
30	CONTINUE			! loop for next link
C
C force nodes to have same coords as corresponding end points
	DO 40 ILINK = 1,N_LINKS
	  IF (LINKPOS(1,ILINK).EQ.NIL) GOTO 40	! skip deleted links
C
	  IPTSTA = LINKPOS(1,ILINK)
	  IPTFIN = LINKPOS(2,ILINK)
	  LOOP = NEXT(IPTFIN).EQ.IPTSTA

	  INODE = LINKENDS(1,ILINK)
	  IF (SQMINDIST(IPTSTA).LT.0) THEN
	    X = NPOS(1,INODE)
	    Y = NPOS(2,INODE)
	    ON_BOUNDARY = X.EQ.RXMIN.OR.X.EQ.RXMAX
     &	              .OR.Y.EQ.RYMIN.OR.Y.EQ.RYMAX
	    IF (ON_BOUNDARY) THEN
	      X = PT(1,IPTSTA)
	      Y = PT(2,IPTSTA)
	      ON_BOUNDARY = X.EQ.RXMIN.OR.X.EQ.RXMAX
     &	                .OR.Y.EQ.RYMIN.OR.Y.EQ.RYMAX
	      IF (ON_BOUNDARY) THEN
	        NPOS(1,INODE) = X
	        NPOS(2,INODE) = Y
	      ELSE
	        SQMINDIST(IPTSTA) = 0
	        SQMINDIST(NEAREST(IPTSTA)) = 0
	      END IF
	    ELSE
	      NPOS(1,INODE) = PT(1,IPTSTA)
	      NPOS(2,INODE) = PT(2,IPTSTA)
	    END IF
	  END IF
C
	  IF (LOOP) GOTO 40
	  INODE = LINKENDS(2,ILINK)
	  IF (SQMINDIST(IPTFIN).LT.0) THEN
	    X = NPOS(1,INODE)
	    Y = NPOS(2,INODE)
	    ON_BOUNDARY = X.EQ.RXMIN.OR.X.EQ.RXMAX
     &	              .OR.Y.EQ.RYMIN.OR.Y.EQ.RYMAX
	    IF (ON_BOUNDARY) THEN
	      X = PT(1,IPTFIN)
	      Y = PT(2,IPTFIN)
	      ON_BOUNDARY = X.EQ.RXMIN.OR.X.EQ.RXMAX
     &	                .OR.Y.EQ.RYMIN.OR.Y.EQ.RYMAX
	      IF (ON_BOUNDARY) THEN
	        NPOS(1,INODE) = X
	        NPOS(2,INODE) = Y
	      ELSE
	        SQMINDIST(IPTFIN) = 0
	        SQMINDIST(NEAREST(IPTFIN)) = 0
	      END IF
	    ELSE
	      NPOS(1,INODE) = PT(1,IPTFIN)
	      NPOS(2,INODE) = PT(2,IPTFIN)
	    END IF
	  END IF
40	CONTINUE
C
	END
