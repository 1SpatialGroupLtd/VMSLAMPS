	SUBROUTINE CONDENSE
C
***	IDENT	14MY86
***	MODULE	CONDENSE
C
C	Copyright : Laser-Scan Laboratories Ltd., Cambridge, England
C	Created   : ACM					Mar 1986
C
	IMPLICIT NONE
C
***	COMMON/HERE:VEC/
C
C local parameters
	INTEGER		MAXPOLY
	PARAMETER(	MAXPOLY = 20)
C
C workspace
	INTEGER		I,J,K
	INTEGER		NOD(MAXPOLY)		! list of nodes at jnctn
	INTEGER		LNK(MAXPOLY)		! list of links at jnctn
	INTEGER		NPOLY,IPOLY		! No. of sides at junctn
	INTEGER		ILINK			! link index
	INTEGER		IARM,JARM		! arm index
	INTEGER		INODE,JNODE		! node indices
	INTEGER		IPTSTA,IPTFIN		! link start & end pts
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Condenses multiple nodes at junctions into single nodes.
C
C	A single node is presumed to be required wherever there is a
C	loop of one-vector links.
C
C	Where such a loop is found the links
C	and nodes which it comprises are passed to a further routine
C	which uses the directions of the arms coming into this loop
C	from outside to determine, together with the node positions,
C	the position of the resulting node, since it is not generally
C	satisfactory to take this position simply as the node centre-
C	of-gravity.
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
	DO 1 ILINK = 1,N_LINKS
1	LINKTRAV(1,ILINK) = .FALSE.		! no links yet traversed
C
C for each node do
	DO 70 INODE = 1,N_NODES			! node index
	  IARM = NDAT(AM_NDAT,INODE)		! arm index
	  GOTO 20
10	  IARM = ARM(AM_ARM,IARM)		! next arm index
20	  IF (IARM.EQ.NIL) GOTO 70		! no more arms
	  ILINK = ABS(ARM(LI_ARM,IARM))		! link index
	  IF (LINKTRAV(1,ILINK)) GOTO 10	! already traversed
	  IPTSTA = LINKPOS(1,ILINK)		! first link pt index
	  IF (IPTSTA.EQ.NIL) GOTO 10		! deleted link
	  IPTFIN = LINKPOS(2,ILINK)		! last link pt index
	  IF (NEXT(IPTSTA).NE.IPTFIN) GOTO 10	! not one-vector link
C
C got a valid one-vector link
	  NPOLY = 0
	  JNODE = INODE
	  JARM = IARM
30	  LINKTRAV(1,ILINK) = .TRUE.		! mark as now traversed
	  NPOLY = NPOLY+1
	  IF (NPOLY.GT.MAXPOLY) THEN		! debug
	    NPOLY = MAXPOLY
	    TYPE*,'*** WARNING : NPOLY Overflow in CONDENSE ***'
	    GOTO 65
	  END IF
	  LNK(NPOLY) = ILINK
	  NOD(NPOLY) = JNODE
C
C find node at other end of link
	  ILINK = ARM(LI_ARM,JARM)		! link index
	  IF (ILINK.GT.0) THEN			! link leaves node
	    JNODE = LINKENDS(2,ILINK)
	  ELSE					! link enters node
	    JNODE = LINKENDS(1,-ILINK)
	  END IF
C
C if loop is complete then form into a single node
C	  IF (JNODE.EQ.INODE) GOTO 65		! loop complete
	  DO 35 IPOLY = 1,NPOLY			! debug...
	    IF (JNODE.EQ.NOD(IPOLY)) THEN
	      K = IPOLY-1
	      NPOLY = NPOLY-K
	      DO 34 I = 1,NPOLY
	        NOD(I) = NOD(I+K)
	        LNK(I) = LNK(I+K)
34	      CONTINUE
	      GOTO 65
	    END IF
35	  CONTINUE
C
C find arm arrived on
	  JARM = NDAT(AM_NDAT,JNODE)
	  GOTO 50
40	  JARM = ARM(AM_ARM,JARM)
C	  IF (JARM.EQ.NIL) PAUSE'*** LOST ARM IN CONDENSE ***'!DEBUG
50	  IF (ARM(LI_ARM,JARM).NE.-ILINK) GOTO 40
C
C turn leftish
60	  JARM = ARM(AM_ARM,JARM)		! next arm clockwise
	  IF (JARM.EQ.NIL) THEN
	    JARM = NDAT(AM_NDAT,JNODE)		! cycle list
	    IF (ARM(AM_ARM,JARM).EQ.NIL) GOTO 10! free end
	  END IF
	  ILINK = ABS(ARM(LI_ARM,JARM))		! link index
C
C got a valid link
	  IPTSTA = LINKPOS(1,ILINK)		! first link pt index
	  IF (IPTSTA.EQ.NIL) GOTO 60		! deleted link
	  IPTFIN = LINKPOS(2,ILINK)		! last link pt index
	  IF (NEXT(IPTSTA).NE.IPTFIN) GOTO 10	! not one-vector link
	  GOTO 30				! add link
C
C got a loop of one-vec links
65	  CALL FUSNODS(LNK,NOD,NPOLY)
	  GOTO 10				! loop for next arm
70	CONTINUE				! loop for next node
C
	END
