	SUBROUTINE FUSNDS(ANODE,BNODE)
C
***	IDENT	14MY86
***	MODULE	FUSNDS
C
C	Copyright : Laser-Scan Laboratories Ltd., Cambridge, England
C	Created   : ACM					Mar 1986
C
	IMPLICIT NONE
C
***	COMMON/HERE:VEC/
C
C parameters in
	INTEGER*2	ANODE,BNODE		! node indices
C
C workspace
	INTEGER*2	INODE,CNODE		! node index
	INTEGER		IPTSTA,IPTNXT,IPTFIN	! link start,mid,end pts
	INTEGER		ILINK,JLINK		! link index
	INTEGER		IARM			! arm index
	INTEGER		WA,WB			! node weights
	REAL		WSUM			! weight sum
	REAL		XA,YA,XB,YB		! link end pt coords
	REAL		XI,YI			! INODE pos
	REAL		XNODE,YNODE		! node coords
	REAL		DX,DY			! unit vector
	REAL		ANG			! angle
	REAL		F1,F2			! misc. factors
	REAL		XLINE,YLINE		! border X/Y values
	LOGICAL		ONEVEC			! one vector-link?
	LOGICAL		A_ON_BOUNDARY		! ANODE on boundary?
	LOGICAL		B_ON_BOUNDARY		! BNODE on boundary?
	LOGICAL		C_ON_BOUNDARY		! result on boundary?
	LOGICAL		I_ON_BOUNDARY		! node INODE on boundry?
	LOGICAL		LFT,UP,ILFT,IUP
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Fuses two nodes into one single node
C
C	ie. puts the weighted sum of the two nodes into node ANODE,
C	deletes node BNODE and appends the arm list for BNODE onto the
C	end of the arm list for ANODE, after having deleted all
C	one-vector links between them.
C
C	When a non-boundary node is moved for the first time, every link
C	which joins at this node is made to pass through a pt at the old
C	node position before joining the node at its new position
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
	IF (ANODE.EQ.BNODE) RETURN		! you never know...
C
	XA = NPOS(1,ANODE)			! start node position
	YA = NPOS(2,ANODE)
C
	XB = NPOS(1,BNODE)			! end node position
	YB = NPOS(2,BNODE)
C
	WA = NDAT(WT_NDAT,ANODE)		! start node weight
	WB = NDAT(WT_NDAT,BNODE)		! end node weight
	WSUM = WA+WB
C
	XNODE = (WA*XA+WB*XB)/WSUM
	YNODE = (WA*YA+WB*YB)/WSUM
C
C Special care must be taken if either node is on boundry and resulting
C node would not be
	A_ON_BOUNDARY = XA.EQ.RXMIN.OR.XA.EQ.RXMAX
     &	            .OR.YA.EQ.RYMIN.OR.YA.EQ.RYMAX
	B_ON_BOUNDARY = XB.EQ.RXMIN.OR.XB.EQ.RXMAX
     &	            .OR.YB.EQ.RYMIN.OR.YB.EQ.RYMAX
	IF (.NOT.(A_ON_BOUNDARY.OR.B_ON_BOUNDARY)) GOTO 5
C
	IF (WA.GT.0.AND.WB.GT.0) THEN
	  C_ON_BOUNDARY = XNODE.EQ.RXMIN.OR.XNODE.EQ.RXMAX
     &	              .OR.YNODE.EQ.RYMIN.OR.YNODE.EQ.RYMAX
	  IF (C_ON_BOUNDARY) GOTO 5
	END IF
C
C If both on boundary then if both weights have same sign, do nothing,
C otherwise node position is position of node with negative weight
	IF (A_ON_BOUNDARY.AND.B_ON_BOUNDARY) THEN
	  IF (WA.LT.0.EQV.WB.LT.0) GOTO 150	! return
	  IF (WA.LT.0) THEN
	    XNODE = NPOS(1,ANODE)
	    YNODE = NPOS(2,ANODE)
	  ELSE
	    XNODE = NPOS(1,BNODE)
	    YNODE = NPOS(2,BNODE)
	  END IF
	  GOTO 95
	END IF
C
	IF (A_ON_BOUNDARY) THEN
	  CNODE = BNODE
C
C Find link connected to BNODE the other end of which is not connected
C to ANODE or to any other node which is on the boundary in the same
C corner on the boundary as ANODE
	  IARM = NDAT(AM_NDAT,BNODE)
	  GOTO 7
6	  IARM = ARM(AM_ARM,IARM)
	  IF (IARM.EQ.NIL) GOTO 150		! return
7	  JLINK = ARM(LI_ARM,IARM)
	  IF (JLINK.GT.0) THEN
	    INODE = LINKENDS(2,JLINK)
	  ELSE
	    INODE = LINKENDS(1,-JLINK)
	  END IF
	  IF (INODE.EQ.ANODE) GOTO 6
	  XI = NPOS(1,INODE)
	  YI = NPOS(2,INODE)
	  I_ON_BOUNDARY = XI.EQ.RXMIN.OR.XI.EQ.RXMAX
     &	              .OR.YI.EQ.RYMIN.OR.YI.EQ.RYMAX
	  IF (I_ON_BOUNDARY) THEN
	    LFT =  XA.LT.(RXMIN+RXMAX)/2
	    UP =   YA.LT.(RYMIN+RYMAX)/2
	    ILFT = XI.LT.(RXMIN+RXMAX)/2
	    IUP =  YI.LT.(RYMIN+RYMAX)/2
	    IF ((LFT.EQV.ILFT).AND.(UP.EQV.IUP)) GOTO 6
	  END IF
	ELSE
	  CNODE = ANODE
C
C Find link connected to ANODE the other end of which is not connected
C to BNODE or to any other node which is on the boundary in the same
C corner on the boundary as BNODE
	  IARM = NDAT(AM_NDAT,ANODE)
	  GOTO 9
8	  IARM = ARM(AM_ARM,IARM)
	  IF (IARM.EQ.NIL) GOTO 150		! return
9	  JLINK = ARM(LI_ARM,IARM)
	  IF (JLINK.GT.0) THEN
	    INODE = LINKENDS(2,JLINK)
	  ELSE
	    INODE = LINKENDS(1,-JLINK)
	  END IF
	  IF (INODE.EQ.BNODE) GOTO 8
	  XI = NPOS(1,INODE)
	  YI = NPOS(2,INODE)
	  I_ON_BOUNDARY = XI.EQ.RXMIN.OR.XI.EQ.RXMAX
     &	              .OR.YI.EQ.RYMIN.OR.YI.EQ.RYMAX
	  IF (I_ON_BOUNDARY) THEN
	    LFT =  XB.LT.(RXMIN+RXMAX)/2
	    UP =   YB.LT.(RYMIN+RYMAX)/2
	    ILFT = XI.LT.(RXMIN+RXMAX)/2
	    IUP =  YI.LT.(RYMIN+RYMAX)/2
	    IF ((LFT.EQV.ILFT).AND.(UP.EQV.IUP)) GOTO 8
	  END IF
	END IF
C
C Find tangent vector into INODE for link JLINK
	ANG = ANGLE(IARM)			! known yet ??? (DEBUG)
	DX = -COS(ANG)
	DY = -SIN(ANG)
C
C Find intersection of proj of vec from CNODE with boundary
	IF (DX.EQ.0) THEN
	  IF (DY.GT.0) THEN
	    XNODE = RYMAX
	  ELSE
	    XNODE = RYMIN
	  END IF
	  YNODE = NPOS(2,CNODE)
	ELSE IF (DY.EQ.0) THEN
	  XNODE = NPOS(1,CNODE)
	  IF (DX.GT.0) THEN
	    YNODE = RXMAX
	  ELSE
	    YNODE = RXMIN
	  END IF
	ELSE
	  IF (DX.GT.0) THEN
	    XLINE = RXMAX
	  ELSE
	    XLINE = RXMIN
	  END IF
	  IF (DY.GT.0) THEN
	    YLINE = RYMAX
	  ELSE
	    YLINE = RYMIN
	  END IF
	  F1 = (XLINE-NPOS(1,CNODE))/DX
	  F2 = (YLINE-NPOS(2,CNODE))/DY
	  F1 = MIN(F1,F2)
	  XNODE = NPOS(1,CNODE)+F1*DX
	  YNODE = NPOS(2,CNODE)+F1*DY
	END IF
C
C Delete reference to all single-vector links between these nodes
5	IARM = NDAT(AM_NDAT,ANODE)
	GOTO 20
10	IARM = ARM(AM_ARM,IARM)			! move on to next arm
20	IF (IARM.EQ.NIL) GOTO 30		! no more arms?
	ILINK = ARM(LI_ARM,IARM)
	INODE = NIL
	IPTSTA = LINKPOS(1,ABS(ILINK))
	IF (IPTSTA.EQ.NIL) GOTO 10
	IF (ILINK.GT.0) THEN			! link leaves node
	  INODE = LINKENDS(2,ILINK)		! far end index
	ELSE					! link enters node
	  ILINK = -ILINK
	  INODE = LINKENDS(1,ILINK)		! far end index
	END IF
	IF (INODE.EQ.BNODE) THEN
	  IPTNXT = NEXT(IPTSTA)
	  IPTFIN = LINKPOS(2,ILINK)
	  ONEVEC = IPTNXT.EQ.IPTFIN.AND.NEXT(IPTFIN).NE.IPTSTA
	  ONEVEC = ONEVEC.OR.IPTNXT.EQ.NIL	! debug
	  IF (ONEVEC) LINKPOS(1,ILINK) = NIL	! mark link to be ignord
	END IF
	GOTO 10					! loop for next arm
30	CONTINUE
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C If either node is moved for the first time, every link which joins
C at this node (except one-vector links, which must remain so or else
C they will not be eliminated later) is made to pass through a pt at
C the old node position before joining the node at its new position
C
	IF (A_ON_BOUNDARY) GOTO 60
	IF (NDAT(WT_NDAT,ANODE).GT.1) GOTO 60
C
C Don't introduce extra pt if node pos = final node pos
	IF (NPOS(1,ANODE).EQ.XNODE.AND.NPOS(2,ANODE).EQ.YNODE) GOTO 60
C
	IARM = NDAT(AM_NDAT,ANODE)
	GOTO 50
40	IARM = ARM(AM_ARM,IARM)			! move on to next arm
50	IF (IARM.EQ.NIL) GOTO 60		! no more arms?
	ILINK = ARM(LI_ARM,IARM)
C
C Don't introduce extra pt if link is single-vector link
	IPTSTA = LINKPOS(1,ABS(ILINK))
	IF (IPTSTA.EQ.NIL) GOTO 40
	IPTNXT = NEXT(IPTSTA)
	IPTFIN = LINKPOS(2,ABS(ILINK))
	ONEVEC = IPTNXT.EQ.IPTFIN.AND.NEXT(IPTFIN).NE.IPTSTA
	ONEVEC = ONEVEC.OR.IPTNXT.EQ.NIL	! debug
	IF (ONEVEC) GOTO 40			! on to next arm
C
C Create a new point at node ANODE
	N_PTS = N_PTS+1
	IF (N_PTS.GT.MAXPTS) THEN
	  CALL EXPAND
     &	  ('*** FATAL ERROR : TOO MANY VECTOR END POINTS ***')
	  CALL FLWLIN()
	  CALL TTWLIN()
	  CALL EXIT
	END IF
	PT(1,N_PTS) = XNODE
	PT(2,N_PTS) = YNODE
C
C Place pt into head or tail of link depending on whether it enters or
C leaves the node
	IF (ILINK.GT.0) THEN			! link leaves node
	  PT(1,IPTSTA) = NPOS(1,ANODE)		! ensure end pt is at nd
	  PT(2,IPTSTA) = NPOS(2,ANODE)
	  NEXT(N_PTS) = IPTSTA			! insert pt at lnk head
	  LINKPOS(1,ILINK) = N_PTS
	ELSE					! link enters node
	  ILINK = -ILINK
	  IPTFIN = LINKPOS(2,ILINK)		! insert pt at lnk tail
	  PT(1,IPTFIN) = NPOS(1,ANODE)		! ensure end pt is at nd
	  PT(2,IPTFIN) = NPOS(2,ANODE)
	  NEXT(N_PTS) = NEXT(IPTFIN)
	  NEXT(IPTFIN) = N_PTS
	  LINKPOS(2,ILINK) = N_PTS
	END IF
	GOTO 40					! loop for next arm
60	CONTINUE
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
	IF (B_ON_BOUNDARY) GOTO 90
	IF (NDAT(WT_NDAT,BNODE).GT.1) GOTO 90
C
C Don't introduce extra pt if node pos = final node pos
	IF (NPOS(1,BNODE).EQ.XNODE.AND.NPOS(2,BNODE).EQ.YNODE) GOTO 90
C
	IARM = NDAT(AM_NDAT,BNODE)
	GOTO 80
70	IARM = ARM(AM_ARM,IARM)			! move on to next arm
80	IF (IARM.EQ.NIL) GOTO 90		! no more arms?
	ILINK = ARM(LI_ARM,IARM)
C
C Don't introduce extra pt if link is single-vector link
	IPTSTA = LINKPOS(1,ABS(ILINK))
	IF (IPTSTA.EQ.NIL) GOTO 70
	IPTNXT = NEXT(IPTSTA)
	IPTFIN = LINKPOS(2,ABS(ILINK))
	ONEVEC = IPTNXT.EQ.IPTFIN.AND.NEXT(IPTFIN).NE.IPTSTA
	ONEVEC = ONEVEC.OR.IPTNXT.EQ.NIL	! debug
	IF (ONEVEC) GOTO 70			! on to next arm
C
C Create a new point at node BNODE
	N_PTS = N_PTS+1
	IF (N_PTS.GT.MAXPTS) THEN
	  CALL EXPAND
     &	  ('*** FATAL ERROR : TOO MANY VECTOR END POINTS ***')
	  CALL FLWLIN()
	  CALL TTWLIN()
	  CALL EXIT
	END IF
	PT(1,N_PTS) = XNODE
	PT(2,N_PTS) = YNODE
C
C Place pt into head or tail of link depending on whether it enters or
C leaves the node
	IF (ILINK.GT.0) THEN			! link leaves node
	  PT(1,IPTSTA) = NPOS(1,BNODE)		! ensure end pt is at nd
	  PT(2,IPTSTA) = NPOS(2,BNODE)
	  NEXT(N_PTS) = IPTSTA			! insert pt at lnk head
	  LINKPOS(1,ILINK) = N_PTS
	ELSE					! link enters node
	  ILINK = -ILINK
	  IPTFIN = LINKPOS(2,ILINK)		! insert pt at lnk tail
	  PT(1,IPTFIN) = NPOS(1,BNODE)		! ensure end pt is at nd
	  PT(2,IPTFIN) = NPOS(2,BNODE)
	  NEXT(N_PTS) = NEXT(IPTFIN)
	  NEXT(IPTFIN) = N_PTS
	  LINKPOS(2,ILINK) = N_PTS
	END IF
	GOTO 70					! loop for next arm
90	CONTINUE
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C Append arm list for node BNODE to end of arm list for node ANODE
95	IARM = NDAT(AM_NDAT,ANODE)
	IF (IARM.EQ.NIL) THEN
	  NDAT(AM_NDAT,ANODE) = NDAT(AM_NDAT,BNODE)
	ELSE
100	  IF (ARM(AM_ARM,IARM).EQ.NIL) GOTO 110
	  IARM = ARM(AM_ARM,IARM)
	  GOTO 100
110	  ARM(AM_ARM,IARM) = NDAT(AM_NDAT,BNODE)
	END IF
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C	
C Replace all refs to BNODE with ref to ANODE
	IARM = NDAT(AM_NDAT,BNODE)
	GOTO 130
120	IARM = ARM(AM_ARM,IARM)
130	IF (IARM.EQ.NIL) GOTO 140
	JLINK = ARM(LI_ARM,IARM)
	IF (JLINK.GT.0) THEN
	  LINKENDS(1,JLINK) = ANODE
	ELSE
	  LINKENDS(2,-JLINK) = ANODE
	END IF
	GOTO 120
C
C Put the weighted sum of the two nodes all into node ANODE
140	IF (A_ON_BOUNDARY.OR.B_ON_BOUNDARY) THEN
	  NDAT(WT_NDAT,ANODE) = -999
	ELSE
	  NDAT(WT_NDAT,ANODE) = WSUM
	END IF
	NPOS(1,ANODE) = XNODE
	NPOS(2,ANODE) = YNODE
C
C delete node BNODE
	NDAT(AM_NDAT,BNODE) = NIL		! delete BNODE
150	END
