	SUBROUTINE CHKPTS(LINA,LINB,APT,BPT,PRVAPT,PRVBPT)
C
***	IDENT	12MY86
***	MODULE	CHKPTS
C
C	Copyright : Laser-Scan Laboratories Ltd., Cambridge, England
C	Created   : ACM					Feb 1986
C
	IMPLICIT NONE
C
***	COMMON/HERE:VEC/
C
C parameters in
	INTEGER		LINA,LINB	! pt A and pt B line indices
	INTEGER		APT		! pt A PT index
	INTEGER		BPT		! pt B PT index
	INTEGER		PRVAPT		! pt A previous PT index
	INTEGER		PRVBPT		! pt B previous PT index
C
C workspace
	INTEGER		IMINP,IMAXP,IMINQ,IMAXQ,NEWIPT,NEWJPT,IP
	INTEGER		NAPT,NBPT
	INTEGER		ABX,ABY		! vec from A to B
	INTEGER		SQDIST		! square dist between A and B
	INTEGER		NXTAPT,NXTBPT	! next PT indices for A and B
	INTEGER*2	XNBIN1,YNBIN1	! normal to vec in line of B
	INTEGER*2	XNBIN2,YNBIN2	! facing in direction SOLID
	INTEGER*2	XNAIN1,YNAIN1	! normal to vec in line of A
	INTEGER*2	XNAIN2,YNAIN2	! facing in direction SOLID
	LOGICAL		AOK,BOK
	BYTE		AB1,AB2,BA1,BA2
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Finds which points are nearest to which on opposite sides of
C	a solid area
C
C	Points A and B are said to be on opp sides of a solid area iff :
C
C	1) pt A is on the inside of one of the SOLID halfplanes
C	corresponding to either of the vectors in to or out
C	of pt B, and inside or on the edge of the other, and pt B is
C	similarly related to A, or
C
C	2) they are coincident and not at a node
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C form vector from A to B
	ABX = PT(1,BPT)-PT(1,APT)
	ABY = PT(2,BPT)-PT(2,APT)
C
C find square distance from A to B
	SQDIST = ABX**2+ABY**2
C
C if separation .gt. collapse tolerance then points do not touch
	IF (SQDIST.GT.SQ_CENTRE_TOL) RETURN
C
C if pts together then if they are at a node they must not touch,
C otherwise they must
C
	IF (SQDIST.EQ.0) THEN
	  IF (PRVAPT.NE.NIL.AND.NEXT(APT).NE.NIL) THEN
	    NEAREST(APT) = BPT
	    NEAREST(BPT) = APT
	    SQMINDIST(APT) = 0
	    SQMINDIST(BPT) = 0
	  END IF
	  RETURN
	END IF
C
	AB1 = 0
	AB2 = 0
	BA1 = 0
	BA2 = 0
C
	XNAIN1 = 0
	YNAIN1 = 0
	XNAIN2 = 0
	YNAIN2 = 0
	XNBIN1 = 0
	YNBIN1 = 0
	XNBIN2 = 0
	YNBIN2 = 0
C
C find normal to vec into B facing towards SOLID
	IF (PRVBPT.NE.NIL) THEN
	  IF (LR(LEFT,LINB).EQ.SOLID) THEN
	    XNBIN1 = PT(2,PRVBPT)-PT(2,BPT)
	    YNBIN1 = PT(1,BPT)-PT(1,PRVBPT)
	  ELSE IF (LR(RIGHT,LINB).EQ.SOLID) THEN
	    XNBIN1 = PT(2,BPT)-PT(2,PRVBPT)
	    YNBIN1 = PT(1,PRVBPT)-PT(1,BPT)
	  ELSE
	    RETURN
	  END IF
	END IF
C
C find normal to vec out of B facing towards SOLID
	NXTBPT = NEXT(BPT)
	IF (NXTBPT.NE.NIL) THEN
	  IF (LR(LEFT,LINB).EQ.SOLID) THEN
	    XNBIN2 = PT(2,BPT)-PT(2,NXTBPT)
	    YNBIN2 = PT(1,NXTBPT)-PT(1,BPT)
	  ELSE IF (LR(RIGHT,LINB).EQ.SOLID) THEN
	    XNBIN2 = PT(2,NXTBPT)-PT(2,BPT)
	    YNBIN2 = PT(1,BPT)-PT(1,NXTBPT)
	  ELSE
	    RETURN
	  END IF
	END IF
C
	IF (XNBIN1.EQ.0.AND.YNBIN1.EQ.0) THEN
	  XNBIN1 = XNBIN2
	  YNBIN1 = YNBIN2
	END IF
C
	IF (XNBIN2.EQ.0.AND.YNBIN2.EQ.0) THEN
	  XNBIN2 = XNBIN1
	  YNBIN2 = YNBIN1
	END IF
C
	AB1 = -(ABX*XNBIN1+ABY*YNBIN1)
	AB2 = -(ABX*XNBIN2+ABY*YNBIN2)
C
	AOK = (AB1.GT.0.AND.AB2.GE.0).OR.(AB1.GE.0.AND.AB2.GT.0)
	IF (.NOT.AOK) RETURN		! A is excluded by edges at B
C
C find normal to vec into A facing towards SOLID
	IF (PRVAPT.NE.NIL) THEN
	  IF (LR(LEFT,LINA).EQ.SOLID) THEN
	    XNAIN1 = PT(2,PRVAPT)-PT(2,APT)
	    YNAIN1 = PT(1,APT)-PT(1,PRVAPT)
	  ELSE IF (LR(RIGHT,LINA).EQ.SOLID) THEN
	    XNAIN1 = PT(2,APT)-PT(2,PRVAPT)
	    YNAIN1 = PT(1,PRVAPT)-PT(1,APT)
	  ELSE
	    RETURN
	  END IF
	END IF
C
C find normal to vec out of A facing towards SOLID
	NXTAPT = NEXT(APT)
	IF (NXTAPT.NE.NIL) THEN
	  IF (LR(LEFT,LINA).EQ.SOLID) THEN
	    XNAIN2 = PT(2,APT)-PT(2,NXTAPT)
	    YNAIN2 = PT(1,NXTAPT)-PT(1,APT)
	  ELSE IF (LR(RIGHT,LINA).EQ.SOLID) THEN
	    XNAIN2 = PT(2,NXTAPT)-PT(2,APT)
	    YNAIN2 = PT(1,APT)-PT(1,NXTAPT)
	  ELSE
	    RETURN
	  END IF
	END IF
C
	IF (XNAIN1.EQ.0.AND.YNAIN1.EQ.0) THEN
	  XNAIN1 = XNAIN2
	  YNAIN1 = YNAIN2
	END IF
C
	IF (XNAIN2.EQ.0.AND.YNAIN2.EQ.0) THEN
	  XNAIN2 = XNAIN1
	  YNAIN2 = YNAIN1
	END IF
C
	BA1 = ABX*XNAIN1+ABY*YNAIN1
	BA2 = ABX*XNAIN2+ABY*YNAIN2
C
	BOK = (BA1.GT.0.AND.BA2.GE.0).OR.(BA1.GE.0.AND.BA2.GT.0)
	IF (.NOT.BOK) RETURN		! B is excluded by edges at A
C
C do not join if both A normals are parallel and both B normals are
C parallel and an A normal is perpendicular to a B normal
C
	IF ((XNAIN1.EQ.0).NEQV.(XNAIN2.EQ.0)) GOTO 10 ! A's not parallel
	IF ((XNBIN1.EQ.0).NEQV.(XNBIN2.EQ.0)) GOTO 10 ! B's not parallel
	IF ((XNAIN1.EQ.0).EQV.(XNBIN1.EQ.0)) GOTO 10  ! A's not pl to Bs
	RETURN
10	CONTINUE
C
C pts A and B are within collapse tol and on opposoite sides of a solid
C area, so now see about pointing them to eachother
C
	IF (NEAREST(APT).EQ.NIL) THEN
	  SQMINDIST(APT) = SQDIST
	  NEAREST(APT) = BPT
	ELSE IF (SQDIST.LT.SQMINDIST(APT)) THEN	  
	  SQMINDIST(APT) = SQDIST
	  NEAREST(APT) = BPT
	ELSE IF (SQDIST.EQ.SQMINDIST(APT)) THEN
	  AOK = NEAREST(NEAREST(APT)).NE.APT
C
	  NBPT = NEAREST(BPT)
	  IF (NBPT.EQ.NIL) THEN
	    BOK = .TRUE.
	  ELSE IF (NEAREST(NBPT).EQ.BPT) THEN
	    BOK = SQDIST.LT.SQMINDIST(BPT)
	  ELSE
	    BOK = SQDIST.LE.SQMINDIST(BPT)
	  END IF
C
	  IF (AOK.AND.BOK) THEN
	    NEAREST(APT) = BPT
	    NEAREST(BPT) = APT
	    SQMINDIST(BPT) = SQDIST
	  END IF
	END IF
C
	IF (NEAREST(BPT).EQ.NIL) THEN
	  NEAREST(BPT) = APT
	  SQMINDIST(BPT) = SQDIST
	ELSE IF (SQDIST.LT.SQMINDIST(BPT)) THEN	  
	  NEAREST(BPT) = APT
	  SQMINDIST(BPT) = SQDIST
	END IF
C
	END

