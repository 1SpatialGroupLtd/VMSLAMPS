C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-11-06 16:30:44.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE FINDLINES
C
***	IDENT	06NO86
***	MODULE	FINDLINES
C
C	Copyright : Laser-Scan Laboratories Ltd., Cambridge, England
C	Created   : ACM					Mar 1986
C
	IMPLICIT NONE
C
***	COMMON/HERE:VEC/
C
C workspace
	INTEGER		ILINK,NPTS
	INTEGER		IPTSTA,IPTFIN		! link start & end pts
	INTEGER		NSTA,NFIN
	INTEGER*2	STANOD,FINNOD
C
C externals
	INTEGER		CHKPTS
	EXTERNAL	CHKPTS
C
C preset data
	DATA	CHECK/3*.FALSE.,.TRUE./
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	After LNKNDS has produced the basic link-node structure
C	from the raster input file, this routine can be applied
C	to this structure in order to transform "thin areas" into
C	one-sided "lines".
C
C	The DTI must be divided into two ranges only.
C
C	Links which become lines will still be left-right coded so if
C	the line has a free end then these codes will be equal.
C
C	Like it or not, all corners will be "pinched", depending on the
C	collapse-tolerance given.
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C Use a quadtree scan over all links to find parts of all link vectors
C which will need to be collapsed.
C
	SQ_CENTRE_TOL = CENTRE_TOL**2	! for CHKPTS
C
	CALL QUADSCAN(
     &		CHKPTS,		! point-pair processing routine
     &		.TRUE.,		! treat lines as points, not vectors
     &		.TRUE.,		! treat PT as lnkd lst, not contig array
     &		PT,		! list of all points in image
     &		N_PTS,MAXPTS,	! PT dimension
     &		NEXT,		! linked-list ptrs for PT
     &		LINKPOS,	! list of line start/end PT inds & FCs
     &		LINK_FC,	! link feature code
     &		N_LINKS,MAXLINKS,	! LINKENDS dimension
     &		CHECK,MAXFCS,	! which FC pairs to check?
     &		.TRUE.,		! use FC-pair check
     &		.TRUE.,		! check lines against themselves
     &		CENTRE_TOL,	! collapse tolerance
     &		RXMIN,RXMAX,RYMIN,RYMAX,! point coord ranges
     &		10,		! max No of pts in box to proces
     &		.TRUE.,		! show running % completion
     &		WKS,MAXLINKS)	! workspace
C
C Pass through each link in turn bridging out all non-paired touching
C points and fusing paired pts by moving both pts to their average
C position
	CALL FUSPTS
C
C Form new nodes wherever lines come together or move apart
	CALL NEWLNKNDS
C
C Condense multiple-node junctions into single nodes
	CALL SORTARMS	! needs to be called only for NEWCONDENSE
	CALL CONDENSE	! old CONDENSE would 'sort of' work
C
C Remove colinear pts
	DO 10 ILINK = 1,N_LINKS
	  IPTSTA = LINKPOS(1,ILINK)
	  IF (IPTSTA.EQ.NIL) GOTO 10		! skip deleted links
	  IPTFIN = LINKPOS(2,ILINK)
	  STANOD = LINKENDS(1,ILINK)		! check end pts match
	  FINNOD = LINKENDS(2,ILINK)		! node positions
	  PT(1,IPTSTA) = NPOS(1,STANOD)		! check start pt = node
	  PT(2,IPTSTA) = NPOS(2,STANOD)
	  IF (NEXT(IPTFIN).EQ.IPTSTA) THEN	! loop
	    IPTFIN = IPTSTA
	  ELSE					! not a loop
	    PT(1,IPTFIN) = NPOS(1,FINNOD)	! check fin pt = node
	    PT(2,IPTFIN) = NPOS(2,FINNOD)
	  END IF
	  CALL THNLST(IPTSTA,IPTFIN,NPTS,1E-4)
	  IF (NPTS.EQ.1) LINKPOS(1,ILINK) = 0	! mark link as deleted
10	CONTINUE
C
	END
