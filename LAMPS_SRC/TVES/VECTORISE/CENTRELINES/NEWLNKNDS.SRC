C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-06-23 19:33:08.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE NEWLNKNDS
C
***	IDENT	23JN86
***	MODULE	NEWLNKNDS
C
C	Copyright : Laser-Scan Laboratories Ltd., Cambridge, England
C	Created   : ACM					Mar 1986
C
	IMPLICIT NONE
C
***	COMMON/HERE:VEC/
C
C workspace
	INTEGER		I,J,K
	INTEGER		IPTPRV,IPT,IPTNXT	! point index
	INTEGER		JPTPRV,JPT,JPTNXT
	INTEGER		IPTSTA,IPTFIN		! link start & end pts
	INTEGER		APT,BPT			! pts at link ends
	INTEGER		IPT1,IPT2,IPT3		! 3 consec pts in link
	INTEGER		JPT1,JPT2,JPT3		! nearst pts to IPT1 etc
	INTEGER*2	INODE,ANODE,BNODE	! node index
	INTEGER*2	STANOD,FINNOD		! link sta/fin node inds
	INTEGER		IARM			! arm index
	INTEGER		OLINK			! original link index
	INTEGER		ILINK			! current link index
	INTEGER		N_ORIGINAL_LINKS	! No. of original links
	REAL		X1,Y1,X2,Y2
	REAL		DX,DY			! vector leaving node
	REAL		DX1,DY1,DX2,DY2		! 2 consec link vecs
	REAL		AANG,BANG		! link arm angles
	LOGICAL		LOOP			! loop?
C
C functions
	INTEGER*2	NODINDEX		! finds/creates node
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Creates nodes where collapsed line sections start and stop,
C	and creates new links between them.
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C Remove coincident pts at free-end nodes and mark these pts as NEAREST
C to themselves
	DO 30 OLINK = 1,N_LINKS
	  IPTSTA = LINKPOS(1,OLINK)
	  IF (IPTSTA.EQ.NIL) GOTO 30
	  IPTFIN = LINKPOS(2,OLINK)
	  LOOP = NEXT(IPTFIN).EQ.IPTSTA
	  IF (LOOP) IPTFIN = IPTSTA
	  X2 = PT(1,IPTSTA)
	  Y2 = PT(2,IPTSTA)
	  IPTPRV = IPTSTA
	  K = IPTPRV
	  IPT = IPTSTA
10	  X1 = X2
	  Y1 = Y2
20	  IPT = NEXT(IPT)
	  X2 = PT(1,IPT)
	  Y2 = PT(2,IPT)
C
	  IF (X1.EQ.X2.AND.Y1.EQ.Y2) THEN
	    NEXT(IPTPRV) = NEXT(IPT)	! bridge out  PT(IPT)
	    IF (NEXT(IPTPRV).EQ.IPTSTA) LINKPOS(2,OLINK) = IPTPRV
	    SQMINDIST(IPTPRV) = -2	! mark IPTPRV as a node (?debug)
	    NEAREST(IPTPRV) = IPTPRV
	    IF (IPT.NE.IPTFIN) GOTO 20
	  ELSE
	    K = IPTPRV
	    IPTPRV = IPT
	    IF (IPT.NE.IPTFIN) GOTO 10
	  END IF
C
	  IF (IPTPRV.EQ.IPTSTA) THEN
C
C if no vectors remain in link then fuse its end nodes and delete it
	    ANODE = LINKENDS(1,OLINK)
	    BNODE = LINKENDS(2,OLINK)
	    CALL FUSNDS(ANODE,BNODE)
	  ELSE IF (LOOP) THEN
	    LINKPOS(2,OLINK) = K
	  ELSE
	    LINKPOS(2,OLINK) = IPTPRV
	  END IF
C
30	CONTINUE
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C Mark all pts which are at new junctions by setting SQMINDIST=-2
	DO 60 OLINK = 1,N_LINKS
	  IPTSTA = LINKPOS(1,OLINK)
	  IF (IPTSTA.EQ.NIL) GOTO 60
	  IPTFIN = LINKPOS(2,OLINK)
	  IPT2 = IPTSTA
	  IPT3 = NEXT(IPTSTA)
	  IF (IPT3.EQ.IPTFIN) GOTO 60
	  JPT2 = NEAREST(IPT2)
	  JPT3 = NEAREST(IPT3)
C
40	  IPT1 = IPT2
	  IPT2 = IPT3
	  IPT3 = NEXT(IPT2)
C
	  JPT1 = JPT2
	  JPT2 = JPT3
	  JPT3 = NEAREST(IPT3)
C
C The only pts which should have NEAREST .NE. NIL are fused pts, but
C there are some cases where non-fused pts also have NEAREST .NE. NIL,
C so the following is a double-check, using the fact that only fused
C pts can ever have SQMINDIST.LT.0 here
	  IF (SQMINDIST(IPT1).GE.0) JPT1 = NIL
	  IF (SQMINDIST(IPT2).GE.0) JPT2 = NIL
	  IF (SQMINDIST(IPT3).GE.0) JPT3 = NIL
C
	  IF (JPT2.EQ.NIL) GOTO 50		! IPT2 is not a node
	  IF (JPT1.EQ.NIL.OR.JPT3.EQ.NIL) THEN
	    SQMINDIST(IPT2) = -2		! IPT2 is a node
	    SQMINDIST(JPT2) = -2
	  ELSE					! IPT2 may be a node
	    IF ((NEXT(JPT1).EQ.JPT2).AND.(NEXT(JPT2).EQ.JPT3)) GOTO 50
	    IF ((NEXT(JPT3).EQ.JPT2).AND.(NEXT(JPT2).EQ.JPT1)) GOTO 50
	    SQMINDIST(IPT2) = -2		! IPT2 is a node
	    SQMINDIST(JPT2) = -2
	  END IF
C
50	  IF (IPT3.EQ.IPTSTA) GOTO 60		! end of loop
	  IF (IPT3.NE.IPTFIN) GOTO 40		! loop for next pt
	  IF (NEXT(IPTFIN).EQ.IPTSTA) GOTO 40	! closing vec for loop
C
60	CONTINUE				! loop for next link
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C Remove limbs except where limb vertex is now marked as a node
	DO 31 OLINK = 1,N_LINKS
	  IPTSTA = LINKPOS(1,OLINK)
	  IF (IPTSTA.EQ.NIL) GOTO 31
	  IPTFIN = LINKPOS(2,OLINK)
36	  IPTPRV = IPTSTA		! start from beginning
	  IPT = NEXT(IPTPRV)
	  IF (IPT.EQ.IPTFIN) GOTO 34	! only one vec remaining
	  DX2 = PT(1,IPT)-PT(1,IPTPRV)
	  DY2 = PT(2,IPT)-PT(2,IPTPRV)
	  GOTO 32
33	  IF (IPTNXT.EQ.IPTFIN) GOTO 34	! finnished this link
	  IPTPRV = IPT
	  IPT = IPTNXT
32	  IPTNXT = NEXT(IPT)
	  DX1 = DX2
	  DY1 = DY2
	  DX2 = PT(1,IPTNXT)-PT(1,IPT)
	  DY2 = PT(2,IPTNXT)-PT(2,IPT)
	  IF (DX1*DX2+DY1*DY2.GT.0) GOTO 33  ! ignore if same direction
	  IF (DX1*DY2.EQ.DY1*DX2) THEN	! either fold or coincident pts
	    IF (SQMINDIST(IPT).NE.-2.OR.(DX1.EQ.0.AND.DY1.EQ.0)) THEN
37	      NEXT(IPTPRV) = IPTNXT
	      IF (IPTNXT.EQ.IPTFIN) GOTO 34
	      GOTO 36			! start again!
	    ELSE
	      IF (DX2.EQ.0.AND.DY2.EQ.0) GOTO 37
	    END IF
	  END IF
	  GOTO 33			! loop for next pt in link
C
C if nothing left but end nodes, then fuse these nodes
34	  IF (NEXT(IPTSTA).EQ.IPTFIN) THEN
	    IF (PT(1,IPTSTA).NE.PT(1,IPTFIN)) GOTO 31
	    IF (PT(2,IPTSTA).NE.PT(2,IPTFIN)) GOTO 31
	    ANODE = LINKENDS(1,OLINK)
	    BNODE = LINKENDS(2,OLINK)
	    CALL FUSNDS(ANODE,BNODE)
	  END IF
C
31	CONTINUE
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C Find or else create a node at every pt marked above as a node,
C and create a link between each of these nodes
C
	N_ORIGINAL_LINKS = N_LINKS
	DO 120 OLINK = 1,N_ORIGINAL_LINKS
	  IPTSTA = LINKPOS(1,OLINK)
	  IF (IPTSTA.EQ.NIL) GOTO 120
	  IPTFIN = LINKPOS(2,OLINK)
	  IF (NEXT(IPTFIN).EQ.IPTSTA) IPTFIN = IPTSTA	! loop
	  STANOD = LINKENDS(1,OLINK)
	  FINNOD = LINKENDS(2,OLINK)
	  BNODE = STANOD
	  BPT = IPTSTA
	  IPT = IPTSTA
C
70	  IPTPRV = IPT			! start loop here for each point
	  IPT = NEXT(IPT)
	  IF (IPT.EQ.IPTFIN) GOTO 110
	  IF (SQMINDIST(IPT).NE.-2) GOTO 70	! ignore non-node pts
	  APT = BPT
	  BPT = IPT
	  ANODE = BNODE
	  BNODE = NODINDEX(IPT,.TRUE.)
C
80	  DX = PT(1,NEXT(APT))-PT(1,APT)
	  DY = PT(2,NEXT(APT))-PT(2,APT)
	  AANG = ATAN2(DY,DX)			! arm angle at ANODE
	  IF (AANG.LE.0) AANG = AANG+2*PI
C
	  DX = PT(1,IPTPRV)-PT(1,BPT)
	  DY = PT(2,IPTPRV)-PT(2,BPT)
	  BANG = ATAN2(DY,DX)			! arm angle at BNODE
	  IF (BANG.LE.0) BANG = BANG+2*PI
C
C Define a new link
	  IF (APT.NE.IPTSTA) THEN
	    N_LINKS = N_LINKS+1			! create new link record
	    ILINK = N_LINKS
	  ELSE
	    ILINK = OLINK			! link is original link
	  END IF

	  IF (APT.NE.IPTSTA) THEN
C
C Start new link with a new pt at APT
	    N_PTS = N_PTS+1
	    IF (N_PTS.GT.MAXPTS) THEN
	      CALL EXPAND
     &	      ('*** FATAL ERROR : TOO MANY VECTOR END POINTS ***')
	      CALL FLWLIN()
	      CALL TTWLIN()
	      CALL EXIT
	    END IF
	    PT(1,N_PTS) = PT(1,APT)
	    PT(2,N_PTS) = PT(2,APT)
C
	    LINKPOS(1,ILINK) = N_PTS
	    NEXT(N_PTS) = NEXT(APT)		! insert into linked lst
	    IF (NEAREST(APT).EQ.APT) NEAREST(N_PTS) = N_PTS ! free-node?
	    LINKENDS(1,ILINK) = ANODE
	    LINK_FC(ILINK) = BOUNDARY_FC
C
	    N_ARMS = N_ARMS+1			! create new arm
	    IF (N_ARMS.GT.MAXARMS) THEN
	      CALL EXPAND
     &	           ('*** FATAL ERROR : MAXARMS EXCEEDED ***')
	      CALL FLWLIN()
	      CALL TTWLIN()
	      CALL EXIT
	    END IF
	    ARM(LI_ARM,N_ARMS) = ILINK		! note dirctd link index
	    ANGLE(N_ARMS) = AANG		! note arm angle
C
	    ARM(AM_ARM,N_ARMS) = NDAT(AM_NDAT,ANODE)
	    NDAT(AM_NDAT,ANODE) = N_ARMS	! add arm to arm list
	  END IF
C
	  LINKENDS(2,ILINK) = BNODE
	  LINKPOS(2,ILINK) = BPT
C
	  IF (BPT.NE.IPTFIN) THEN
	    N_ARMS = N_ARMS+1			! create new arm
	    IF (N_ARMS.GT.MAXARMS) THEN
	      CALL EXPAND
     &	           ('*** FATAL ERROR : MAXARMS EXCEEDED ***')
	      CALL FLWLIN()
	      CALL TTWLIN()
	      CALL EXIT
	    END IF
	    ARM(LI_ARM,N_ARMS) = -ILINK		! note dirctd link index
	    ANGLE(N_ARMS) = BANG		! note arm angle
C
	    ARM(AM_ARM,N_ARMS) = NDAT(AM_NDAT,BNODE)
	    NDAT(AM_NDAT,BNODE) = N_ARMS	! add arm to arm list
	  ELSE					! at end of original lnk
C
C Find arm at endnode which refers to original link, because this ref
C must now be replaced by a ref to ILINK
	    IARM = NDAT(AM_NDAT,FINNOD)
	    GOTO 90
85	    IARM = ARM(AM_ARM,IARM)
90	    IF (ARM(LI_ARM,IARM).NE.-OLINK) GOTO 85
	    ARM(LI_ARM,IARM) = -ILINK
	    GOTO 120				! debug???
	  END IF
C
	  GOTO 70				! loop for next point
C
110	  APT = BPT				! here for last section
	  BPT = IPT
	  ANODE = BNODE
	  BNODE = FINNOD
	  GOTO 80
C
120	CONTINUE
C
	END
