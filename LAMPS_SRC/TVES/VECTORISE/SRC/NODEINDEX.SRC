C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-09-28 16:27:14.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION NODEINDEX(XNODE,YNODE)
C
***	IDENT	28SE93
***	MODULE	NODEINDEX
C
C	Copyright : Laser-Scan Ltd., Cambridge, England
C	Created   : ACM					Feb 1985
C
	IMPLICIT NONE
C
***	COMMON/HERE:VEC/
***	PARAMETER/HERE:VECTORISEMSG/
C
C parameters in
	INTEGER		XNODE,YNODE	! node DTI coords
C
C workspace
	INTEGER*4	INODE		! node index
	INTEGER*4	STANOD		! index of first node in sector
	INTEGER*2	TIX_SECTOR,TIY_SECTOR	! local sector indices
C
	INTEGER*4	OK
	INTEGER*4	LSL_PUTMSG
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Returns node index of given node point, adding node to node
C	list if it is not already there
C
C	Exits if a node is "lost" or there are too many nodes
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C try to match node given with existing node
C
C if node is on left or bottom edge of sector, it must be found and
C updated in the left or lower sector, not current sector
C
	TIX_SECTOR = IX_SECTOR
	TIY_SECTOR = IY_SECTOR
	IF (XNODE.EQ.DXPW) THEN
	  TIX_SECTOR = IX_SECTOR-1
	ELSE IF (YNODE.EQ.DYPW) THEN
	  TIY_SECTOR = IY_SECTOR-1
	END IF
C
	STANOD = NODELIST(1,TIX_SECTOR,TIY_SECTOR)
	INODE = STANOD
	GOTO 15
C
10	INODE = NEXTNODE(INODE)
15	IF (INODE.EQ.NIL) GOTO 30
C
	IF (XNODE.EQ.NPOS(1,INODE).AND.YNODE.EQ.NPOS(2,INODE)) THEN
	  NODEINDEX = INODE
	  RETURN
	ENDIF
	GOTO 10
C
C no match found - if new node not in current sector, complain and exit
30	IF (TIX_SECTOR.NE.IX_SECTOR.OR.TIY_SECTOR.NE.IY_SECTOR) THEN
	   CALL LSL_PUTMSG(VEC__LOSTNODE)
	   CALL LSL_EXIT
	END IF
C
C add new node to node list
	N_NODES = N_NODES+1
	IF (N_NODES.GT.MAXNODES) THEN
	  CALL LSL_PUTMSG(VEC__TOOMNYNODES,MAXNODES)
	  CALL LSL_EXIT
	ENDIF
C
	NPOS(1,N_NODES) = XNODE		! set initial node position
	NPOS(2,N_NODES) = YNODE
	NDAT(WT_NDAT,N_NODES) = 1	! set initial node weight
C
C put new node at head of list of nodes for current sector
	NODELIST(1,IX_SECTOR,IY_SECTOR) = N_NODES
	NEXTNODE(N_NODES) = STANOD
C
	NODEINDEX = N_NODES
	END
C
