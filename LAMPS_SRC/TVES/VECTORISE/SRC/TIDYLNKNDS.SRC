C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-09-14 12:14:58.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE TIDYLNKNDS
C
***	IDENT	14SE87
***	MODULE	TIDYLNKNDS
C
C	Copyright : Laser-Scan Laboratories Ltd., Cambridge, England
C	Created   : ACM					Mar 1986
C
	IMPLICIT NONE
C
***	COMMON/HERE:VEC/
C
C workspace
	REAL		XSTA,YSTA,XFIN,YFIN	! link start end end pts
	REAL		XMID,YMID		! an intermed link pt
	INTEGER		I,J,K
	INTEGER		ALINK,BLINK
	INTEGER		IPT,ILINK,INODE
	INTEGER		STANOD,IARMSTA,JARMSTA,KARMSTA
	INTEGER		FINNOD,IARMFIN,JARMFIN,KARMFIN
	INTEGER		IPTSTA,IPTMID,IPTFIN,IPTPRV,NARMS
	LOGICAL		BORDER			! is link on boundary?
	LOGICAL		FIRSTPASS,TWOARMS
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Sets up PT as a linked list, eliminates redundant two-arm nodes
C	and classifies each link as border or non-border.
C
C	Closed loop links are set up as circular linked lists
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C set up PT as a linked list
	DO 557 IPT = 1,N_PTS
557	NEXT(IPT) = IPT+1
C
	DO 1 ILINK = 1,N_LINKS
	  LINKTRAV(1,ILINK) = .FALSE.
	  NEXT(LINKPOS(2,ILINK)) = NIL
1	CONTINUE
C
C pass through list of all links twice, starting only at 3+ arm nodes
C on 1st pass and only at 2 arm nodes on 2nd pass
C
	FIRSTPASS = .TRUE.
	GOTO 20
10	FIRSTPASS = .FALSE.
C
C for each node do
20	DO 60 INODE = 1,N_NODES
	  IARMSTA = NDAT(AM_NDAT,INODE)		! 1st arm index
	  IF (IARMSTA.EQ.NIL) GOTO 60		! skip deleted nodes
	  JARMSTA = ARM(AM_ARM,IARMSTA)		! 2nd arm index
	  KARMSTA = ARM(AM_ARM,JARMSTA)		! 3rd arm index
C
	  TWOARMS = KARMSTA.EQ.NIL		! 2 arm node
	  IF (TWOARMS) THEN
	    IF (FIRSTPASS) GOTO 60
	  ELSE IF (.NOT.FIRSTPASS) THEN
C
C start here for each arm of a 3+ arm node
999	    IF (TWOARMS) GOTO 60
	    IARMSTA = ARM(AM_ARM,IARMSTA)	! next arm index
	    IF (IARMSTA.EQ.NIL) GOTO 60		! move on to next node
	  END IF
C
C find directed link index
	  ILINK = ARM(LI_ARM,IARMSTA)
C
C skip deleted links
	  IF (ILINK.EQ.0) GOTO 999
C
C skip links already traversed
	  IF (LINKTRAV(1,ABS(ILINK))) GOTO 999
C
C reverse link if entering node
	  IF (ILINK.LT.0) THEN
	    ILINK = -ILINK
	    CALL REVERSLINK(ILINK)
	  END IF
C
C note that link has now been traversed
	  LINKTRAV(1,ILINK) = .TRUE.
C
C skip one-link loops
30	  IF (LINKENDS(1,ILINK).EQ.LINKENDS(2,ILINK)) GOTO 999
C
C skip links which do not end in a 2 arm node
	  FINNOD = LINKENDS(2,ILINK)		! end node index
	  IARMFIN = NDAT(AM_NDAT,FINNOD)	! 1st arm index
	  JARMFIN = ARM(AM_ARM,IARMFIN)		! 2nd arm index
	  KARMFIN = ARM(AM_ARM,JARMFIN)		! 3rd arm index
	  IF (KARMFIN.NE.NIL) GOTO 999
C
C find the (directed) link index BLINK of the other link at the end node
	  ALINK = ARM(LI_ARM,IARMFIN)
	  BLINK = ARM(LI_ARM,JARMFIN)
	  IF (ILINK.NE.-ALINK) BLINK = ALINK
C
C take the second link into the first
	  IF (BLINK.GT.0) THEN			! next link leads away
40	    NEXT(LINKPOS(2,ILINK)) = NEXT(LINKPOS(1,BLINK))
	    LINKPOS(2,ILINK) = LINKPOS(2,BLINK)
	    LINKPOS(1,BLINK) = NIL		! mark link as deleted
	    LINKENDS(2,ILINK) = LINKENDS(2,BLINK)
	  ELSE
	    BLINK = -BLINK
	    CALL REVERSLINK(BLINK)
	    GOTO 40
	  END IF
C
	  NDAT(AM_NDAT,FINNOD) = NIL	! mark redundant node as deleted
C
C ref to deleted link from FINNOD must be replaced by ref to ILINK
	  FINNOD = LINKENDS(2,ILINK)
	  IARMFIN = NDAT(AM_NDAT,FINNOD)! 1st arm index
50	  IF (ARM(LI_ARM,IARMFIN).NE.-BLINK) THEN
	    IARMFIN = ARM(AM_ARM,IARMFIN)
	    GOTO 50
	  END IF
	  ARM(LI_ARM,IARMFIN) = -ILINK	! incoming link is now ILINK
C
	  GOTO 30
60	CONTINUE
C
	IF (FIRSTPASS) GOTO 10
C
C classify each link as border or non-border link
	DO 70 ILINK = 1,N_LINKS
	  IPTSTA = LINKPOS(1,ILINK)
	  IF (IPTSTA.EQ.NIL) GOTO 70		! ignore deleted links
	  IPTFIN = LINKPOS(2,ILINK)
C
	  XSTA = PT(1,IPTSTA)			! link start pt
	  YSTA = PT(2,IPTSTA)
	  XFIN = PT(1,IPTFIN)			! link end pt
	  YFIN = PT(2,IPTFIN)

C link is border-link if start of link is on border...
	  BORDER = (XSTA.EQ.RXMIN.OR.XSTA.EQ.RXMAX.OR.
     &	            YSTA.EQ.RYMIN.OR.YSTA.EQ.RYMAX)
C
C and end of link is on border...
	  BORDER = BORDER.AND.
     &	   (XFIN.EQ.RXMIN.OR.XFIN.EQ.RXMAX.OR.
     &	    YFIN.EQ.RYMIN.OR.YFIN.EQ.RYMAX)
C
C and, if > 2 pts in link, if any other pt in link is also on border
	  IPTMID = NEXT(IPTSTA)
	  IF (IPTMID.NE.IPTFIN) THEN
	    XMID = PT(1,IPTMID)
	    YMID = PT(2,IPTMID)
	    BORDER = BORDER.AND.
     &	     (XMID.EQ.RXMIN.OR.XMID.EQ.RXMAX.OR.
     &	      YMID.EQ.RYMIN.OR.YMID.EQ.RYMAX)
	  END IF
C
	  IF (BORDER) THEN
	    LINK_FC(ILINK) = BORDER_FC
	  ELSE
	    LINK_FC(ILINK) = BOUNDARY_FC
	  END IF
C
C loops should now become circular linked lists
	  IF (LINKENDS(1,ILINK).EQ.LINKENDS(2,ILINK)) THEN
	    IPT = IPTSTA
65	    IPTPRV = IPT
	    IPT = NEXT(IPT)
	    IF (IPT.NE.IPTFIN) GOTO 65
	    LINKPOS(2,ILINK) = IPTPRV
	    NEXT(IPTPRV) = IPTSTA
	  END IF
C
70	CONTINUE
C
	END
