C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-11-17 11:13:26.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE OFFSET(PREOFF,NXTSEG,FIRST,LAST,GOTOFF,NEWPT)
C
***	IDENT	02JN86
***	MODULE	OFFSET
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RJH	03-MAY-1985
C	Modified version for GRID		DRC	02-JUN-1986
C
C Description
C
C This subroutine is part of LITES2, and its purpose is to calculate
C the offset to a single vertex or end of a feature.
C Arguments received are the line segment following the current
C point, and flags indicating whether the current point is the first or
C last point of the new feature, together with a flag indicating whether
C or not a segment has yet been successfully offset. The previous offset
C segment is also received, and the routine uses this same argument to 
C return the offset segment corresponding to the line segment it 
C receives for the original feature. The offset flag becomes set once a 
C segment has been successfully offset or the last point of the original
C feature has been reached.
C Note that the first and last points of the feature are treated as
C special cases.
C
	IMPLICIT NONE
C
C Common Block
	INCLUDE 'LSL$CMNI2GRID:CULTRE.CMN'
C
C Arguments
C
	REAL		PREOFF(2,2)	! previous offset segment
	REAL		NXTSEG(2,2)	! next segment
	REAL		NEWPT(2)	! offset x,y coords
	LOGICAL		FIRST		! is this the first point ?
	LOGICAL		LAST		! is this the last point ?
	LOGICAL		GOTOFF		! got an offset segment ?
C
C Functions called
C
	LOGICAL		OFFSEG		! finds offset for a segment
	LOGICAL		INTSCT		! intersects 2 lines
C
C Local Variables
C
	INTEGER*4	INPRE		! intersect on previous offset
	INTEGER*4	INNXT		! intersect on next offset
	REAL		NXTOFF(2,2)	! next offset segment
	LOGICAL		RETOFF		! return new offset segment ?
C
C Initialisation
C
	RETOFF = .TRUE.
C
C For the last point, use the second end of the previous offset. 
C However, if the line consists of only one point, use that and pretend 
C that there is an offset. This is necessary because the new feature has
C already been started and has to be finished.
C
	IF (LAST) THEN
	   IF (FIRST .OR. (.NOT. GOTOFF)) THEN	! one point line
	      NEWPT(1) = NXTSEG(1,1)
	      NEWPT(2) = NXTSEG(2,1)
	      GOTOFF = .TRUE.
	   ELSE					! normal case
	      NEWPT(1) = PREOFF(1,2)
	      NEWPT(2) = PREOFF(2,2)
	   END IF
	   RETOFF = .FALSE.
	ELSE
C
C Calculate the new offset segment; if it fails, use the end of the
C previous offset segment for the new point (except for the first
C point or in the case where an offset segment has not yet been found,
C when the original point is used instead).
C
	   IF (OFFSEG(OFFDIS,NXTSEG,NXTOFF)) THEN
	      IF (FIRST .OR. (.NOT. GOTOFF)) THEN
	         NEWPT(1) = NXTSEG(1,1)
	         NEWPT(2) = NXTSEG(2,1)
	      ELSE				! normal case
	         NEWPT(1) = PREOFF(1,2)
	         NEWPT(2) = PREOFF(2,2)
	      END IF
	      RETOFF = .FALSE.
	   ELSE
C
C For the first point, simply use the start of the new offset segment.
C Otherwise, intersect the previous and new offset segments. If the
C intersection fails, i.e. the two offset lines are parallel, the end
C of the previous offset segment is used.
C
	      IF (FIRST .OR. (.NOT. GOTOFF)) THEN
		 NEWPT(1) = NXTOFF(1,1)
		 NEWPT(2) = NXTOFF(2,1)
		 GOTOFF = .TRUE.
	      ELSE IF (INTSCT(PREOFF,NXTOFF,NEWPT,INPRE,INNXT)) THEN
		 NEWPT(1) = PREOFF(1,2)
		 NEWPT(2) = PREOFF(2,2)
	      END IF
	   END IF
	END IF
C
C New offset segment is returned as the previous one
C
	IF (RETOFF) THEN
	   PREOFF(1,1) = NXTOFF(1,1)
	   PREOFF(2,1) = NXTOFF(2,1)
	   PREOFF(1,2) = NXTOFF(1,2)
	   PREOFF(2,2) = NXTOFF(2,2)
	END IF
C
C Return
C
	RETURN
	END
