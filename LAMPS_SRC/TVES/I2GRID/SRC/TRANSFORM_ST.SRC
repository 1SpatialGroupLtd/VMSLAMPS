C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-07-27 15:45:24.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
      	SUBROUTINE TRANSFORM_ST(ERRCOD)

***	IDENT	27JL93
***	MODULE	TRANSFORM_ST

C	Copyright : Laser-Scan, Cambridge, England
C	Created   : 22MY86
C	Author    : A C Morris (from TRANSFORM_ST by DRC)

CMOD	MAXPTS increased to 32767			  JB 17-Jan-1992
CMOD	Ignore invisible moves for area features	MWSR 17-Jul-1989

C	Routine for GRID to transform IFF ST strings into DTI format.

	IMPLICIT NONE

	INCLUDE		'LSL$CMNI2GRID:BELLS.PAR'

	INCLUDE		'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE		'LSL$CMNI2GRID:CULTRE.CMN'

C Arguments
	INTEGER*2	ERRCOD		! error code

C Locals
	REAL		X_DTI,Y_DTI
	INTEGER*4	INT_X_DTI,INT_Y_DTI
	REAL		IFF_COORDS(2*MAXPTS)	! 3D point POINTS
	REAL		ZVALUE
	INTEGER*4	LAST_POINTS
	INTEGER*4	POINTS		! no. of points in ST
	INTEGER*4	TOTCOORDS	! total no. of coords in feature
	INTEGER*4	POINT,I		! counters
	INTEGER*2	IECODE		! IFF entry code
	INTEGER*2	IELEN		! IFF entry length
        INTEGER*2       IENDS           ! additional string variable
	LOGICAL		HAD_INVIS	! invisible move to next coord.
	LOGICAL		FIRST_ST	! first ST of feature

C***********************************************************************
C Current entry in hand is ST.

	ERRCOD    = 0
	TOTCOORDS = 0
	FIRST_ST  = .TRUE.
	HAD_INVIS = .FALSE.
	NUM_INVIS = 0

100	HAD_INVIS = .FALSE.
	CALL EIHRS(POINTS,IENDS)	! number of points
C
	IF(FIRST_ST)THEN
	  FIRST_ST=.FALSE.
	  GOTO 105
	ENDIF
C
	IF(IENDS.EQ.0)THEN
	  HAD_INVIS =.TRUE.		! invisible line
	  IF(FTYPE .NE. 2)THEN		! not an area
	     LAST_POINTS=POINTS
             GOTO 130			! so plot what we've got
	  ENDIF
	ENDIF  				! and then return to do
C					! this ST.
C Transfer points to local buffer

105	IF (TOTCOORDS+2*POINTS.GT.2*MAXPTS) THEN
	  CALL WRITEF
     &	  ('%S more than %N points in single feature',ERRBELL,MAXPTS)
	END IF

	IF (HAD_INVIS.AND. FTYPE.EQ.2) THEN

C store up record of invisible move if its an area feature
	   IF(NUM_INVIS .EQ. MAXINVIS)THEN
	      CALL WRITEF
     &	      ('%S more than %N invisible moves in single feature',
     &        ERRBELL,MAXINVIS)
	      GOTO 999
	   ENDIF
C
C Get start and end of invisible section
C
	   NUM_INVIS = NUM_INVIS+1
	   INVIS(NUM_INVIS) = TOTCOORDS/2+1
	   END_INVIS(NUM_INVIS) = TOTCOORDS/2 + POINTS
	ENDIF

	CALL EIHRR(IFF_COORDS(TOTCOORDS+1),POINTS*2,1)
	TOTCOORDS = TOTCOORDS+POINTS*2	! increment total coord counter

C Another ST?

110	CALL IFFNXT(IECODE,IELEN)
	IF (IELEN.EQ.-1) GOTO 999	! shouldn't happen
	IF (IECODE.EQ.'ST') GOTO 100	! yes
	IF (TOTCOORDS.EQ.0)GOTO 999

130	POINTS = 0
	DO 150 I = 1,TOTCOORDS,2
	  POINTS = POINTS+1
	  XPTS(POINTS) = IFF_COORDS(I)
	  YPTS(POINTS) = IFF_COORDS(I+1)
150	CONTINUE

C Type 0 - point feature
C
	IF (FTYPE.EQ.0) THEN
	  IF (POINTS.GT.1) THEN
	    CALL WRITEF
     & 	    ('Point feature %N with more than 1 point',FSN) 
	    CALL WRITEF('Item will not be converted')
	    ERRCOD = 1
	    GOTO 999
	  END IF
	  IF ( XPTS(I).LT.WIND(1,1).OR.XPTS(I).GT.WIND(2,1) .OR.  ! in win?
     &         YPTS(I).LT.WIND(1,2).OR.YPTS(I).GT.WIND(2,2)) GOTO 999

	  IF (WIDEN) THEN
            CALL WIDEN_POINT(POINTS)	!turn single pt. into an area
	    CALL PLOT_AREA(POINTS)	!encode boundary and interior
	    IF (POINTS.EQ.0) THEN
	      CALL WRITEF('Item will not be converted fully')
	      ERRCOD = 1
	      GOTO 999
	    ENDIF
C
	  ELSE
	    ZVALUE = VAL		! get VAL from common CULTRE
	    CALL PLOT_POINT(XPTS(1),YPTS(1),ZVALUE)
	  END IF
	  GOTO 999
	END IF

C Type 1 - linear feature

	IF (FTYPE.EQ.1) THEN
C
	  IF(WIDEN.AND.WIDTH.GT.0)THEN
	    CALL WIDEN_LINE(POINTS)
	    CALL PLOT_AREA(POINTS)	!encode boundry and interior pts
	    IF (POINTS.EQ.0) THEN
	      CALL WRITEF('Item will not be converted fully')
	      ERRCOD = 1
	      GOTO 999
	    ENDIF
C
	  ELSE
	     CALL PLOT_LINE(POINTS)	!to transform and encode
	  ENDIF
C
	  IF(HAD_INVIS)THEN
	    TOTCOORDS=0
	    HAD_INVIS=.FALSE.
	    POINTS=LAST_POINTS
	    GOTO 105
	  ELSE
	    GOTO 999
	  ENDIF
	END IF

C Type 2 - areal feature

	IF (FTYPE.EQ.2) THEN
	  CALL PLOT_AREA(POINTS)	!encode boundry and interior pts
	  IF (POINTS.EQ.0) THEN
	    CALL WRITEF('Item will not be converted fully')
	    ERRCOD = 1
	    GOTO 999
	  ENDIF
	ENDIF
C
999	RETURN
	END
C
