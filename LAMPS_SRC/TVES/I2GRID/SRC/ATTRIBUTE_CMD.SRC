C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-12-22 13:54:54.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE ATTRIBUTE_CMD
C
***	IDENT	22DE88
***	MODULE	ATTRIBUTE_CMD
C
C	Copyright : Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					    DRC   05-Dec-1988	
C
C	Subroutine to deal with the I2GRID ATTRIBUTE command.
C
C	Possible formats for this command are:
C	ATTRIBUTE FC		- att is the feature code
C	ATTRIBUTE FSN		- att is the feature serial number
C	ATTRIBUTE Z		- att is a height value fron a ZS
C	ATTRIBYTE AC ac_type [text]  - att is the integer or real
C				value associated with AC ac_type,
C				or if text is present, associated
C				with the text string in the AC text
C				field.
C
	IMPLICIT NONE
C
***	PARAMETER/LSL$CMNLSL:READSTR/
***	PARAMETER/HERE:BELLS/
C
***	COMMON/LSL$CMNLSL:CMDCOM/
***	COMMON/LSL$CMNFRT:FRTACD/
***	COMMON/HERE:CULTRE/
C
C
	EXTERNAL	ATTRIBUTE_CMD_TABLE
C
C	Local
	INTEGER*4	CMD		!command index
	INTEGER*4	ACDLEN		!ACD name length
	INTEGER*4	ERROR		
	CHARACTER*20	ACDSTR		!ACD name
	BYTE		CH		!single character
C
C	Functions
	INTEGER*4	RDCOMM		!to decode sec command
	INTEGER*4	READSTR		!to read AC_NAME from TXTBUF
	LOGICAL		ACDFND		!to find AC integer
	LOGICAL		ACDFND_NAME	!to find AC name
	LOGICAL		RDCHS		!to read a single character
C
C---------------------------------------------------------------------
C	Test for a valid qualifier
	CMD = RDCOMM(ATTRIBUTE_CMD_TABLE)
	IF(CMD.LE.0)THEN
	  CALL WRITEF('%S Specifying command ATTRIBUTE',ERRBELL)
	  CALL WRITEF
     &    ('Valid qualifiers are AC, FC, FSN and Z')
	  GOTO 999
	ENDIF
C
	GOTO (100,200,300,400)CMD	
C---------------------------------------------------------------------
C	ATTRIBUTE FSN
100	PARAM_NUMBER = -1
	CALL WRITEF('Output of Feature Serial Number selected')
	GOTO 999
C
C---------------------------------------------------------------------
C	ATTRIBUTE FC
200	PARAM_NUMBER = -2
	CALL WRITEF('Output of Feature Code selected')
	GOTO 999
C
C---------------------------------------------------------------------
C	ATTRIBUTE Z
300	PARAM_NUMBER = -3
	CALL WRITEF('Output of Z height value selected')
	GOTO 999
C
C---------------------------------------------------------------------
C	ATTRIBUTE AC
C	Check for AC type specified as an integer or as a ACD name
400	IF(CMDICT.EQ.0)THEN
C
	  ACDSTR='                    '
	  ACDLEN = READSTR(ACDSTR,'!',ON_SPACE,.TRUE.)
	  IF(ACDLEN.LE.0)THEN
	    CALL WRITEF('%S Specifying command ATTRIBUTE AC',ERRBELL)
	    CALL WRITEF
     &      ('Command requires an integer AC type number or AC name')
	    GOTO 999
	  ENDIF
C	  
C	Check that it exis
	  IF (ACDFND_NAME(ACDSTR(1:ACDLEN),ERROR))THEN
	    CALL WRITEF('%S Specifying command ATTRIBUTE AC',ERRBELL)
	    CALL WRITEF
     &      ('AC %S not found in ACD table',ACDSTR(1:ACDLEN))
	    GOTO 999
	  ENDIF
C
	  AC_SELECTED = ACD_CODE
C
	ELSE	
C
	  IF(ACDFND(INTARG(1),.FALSE.))THEN
	    CALL WRITEF('%S Specifying command ATTRIBUTE AC',ERRBELL)
	    CALL WRITEF
     &      ('AC %N not found in ACD table',INTARG(1))
	    GOTO 999
	  ENDIF
C
	  AC_SELECTED = INTARG(1)
C
	ENDIF
C
C	Check for any associated text argument
	IF(RDCHS(CH))THEN
C
C	Check that the AC has a valid data type
	  IF(ACD_DATA_TYPE.NE.ACD_DATATYPE_I.AND.
     &       ACD_DATA_TYPE.NE.ACD_DATATYPE_R)THEN
	     CALL WRITEF('%S Specifying command ATTRIBUTE AC',ERRBELL)
	     CALL WRITEF
     &   ('Unable to use ACD %S (%N)',ACD_NAME(1:ACD_NAME_LEN),
     &   AC_SELECTED)
             CALL WRITEF
     &   ('Associated value is not integer or real')
	     AC_SELECTED=0
	     GOTO 999
          ENDIF
C	
	  PARAM_NUMBER = -4
C
	  CALL WRITEF('Output of AC %S (%N) value selected',
     &                ACD_NAME(1:ACD_NAME_LEN),AC_SELECTED)
	ELSE
	  CALL BSCH
	  ACTEXT_LEN = READSTR(ACTEXT,'!',ON_SPACE,.TRUE.)
	  IF(ACTEXT_LEN.LT.0)THEN
	    CALL WRITEF('%S Specifying command ATTRIBUTE AC',ERRBELL)
	    CALL WRITEF('Unable to read the associated text string')
	    GOTO 999
	  ENDIF
C
C	Uppercase the text for comparison
	  CALL STR$UPCASE(ACTEXT(:ACTEXT_LEN),ACTEXT(:ACTEXT_LEN))
C	
	  PARAM_NUMBER = -5		!from text srting
C
	  CALL WRITEF('Output of AC %S (%N) %S value selected',
     &                ACD_NAME(1:ACD_NAME_LEN),AC_SELECTED,
     &		      ACTEXT(1:ACTEXT_LEN))
C
	ENDIF	
C
C----------------------------------------------------------------------
C
999	RETURN
C
	END
