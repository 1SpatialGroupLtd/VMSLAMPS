C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-12-13 13:56:34.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE PLOT_LINE(NVERTS)

***	MODULE	PLOT_LINE
***	IDENT	13DE88

C	Copyright : Laser-Scan Laboratories, Cambridge, England
C	Created   : 22MY86
C	Author    : D R Catlow

C	Routine to transform line coordinate points from IFF to DTM,
C	and pass transformed points to ENCODE_IFF for encoding and
C	plotting.

	IMPLICIT NONE

	INCLUDE 'LSL$CMNI2GRID:CULTRE.CMN'
	INCLUDE 'LSL$CMNDTI:DTIHDR.CMN'

C Arguments
	INTEGER*4	NVERTS		! number of coordinate pts.

C Locals
	INTEGER*4	I		! counter
	REAL*4		X1_DTI,Y1_DTI	! DTM coords
	REAL*4		X2_DTI,Y2_DTI

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

C Transform linear features which are shorter than they are wide into
C features with length = width, centred about c.g.

	IF (WIDEN.AND.WIDTH.GT.0) THEN
	  IF (NVERTS.EQ.1) THEN
	    NVERTS = 2
	    XPTS(1) = XPTS(1)-WIDTH/2
	    XPTS(2) = XPTS(1)+WIDTH
	    YPTS(2) = YPTS(1)
	    ZPTS(2) = ZPTS(1)
C	  ELSE IF (NVERTS.EQ.2) THEN
C	    IF (ABS(XPTS(1)-XPTS(2))+ABS(YPTS(1)-YPTS(2)).LT.1.5*WIDTH)
C     &	    THEN
C	      XPTS(1) = (XPTS(1)+XPTS(2))/2 -WIDTH/2
C	      XPTS(2) = XPTS(1)+WIDTH
C	      YPTS(1) = (YPTS(1)+YPTS(2))/2 -WIDTH/2
C	      YPTS(2) = YPTS(1)+WIDTH
C	      ZPTS(1) = (ZPTS(1)+ZPTS(2))/2
C	      ZPTS(2) = ZPTS(1)
C	    END IF
	  END IF
	END IF

C Deal with a single point feature

	IF (NVERTS.EQ.1) THEN
	  CALL IFF_TO_DTI(XPTS(1),YPTS(1),X1_DTI,Y1_DTI)
	  CALL ENCODE_IFF(X1_DTI,Y1_DTI,ZPTS(1),X1_DTI,Y1_DTI,ZPTS(1),
     &		.TRUE.)
	  GOTO 999
	END IF

C Deal with other features

	CALL IFF_TO_DTI(XPTS(1),YPTS(1),X2_DTI,Y2_DTI)
	DO 100 I = 2,NVERTS
	  X1_DTI = X2_DTI
	  Y1_DTI = Y2_DTI
	  CALL IFF_TO_DTI(XPTS(I),YPTS(I),X2_DTI,Y2_DTI)! transform
	  CALL ENCODE_IFF(X1_DTI,Y1_DTI,ZPTS(I-1),X2_DTI,Y2_DTI,ZPTS(I),
     &		.TRUE.)
100	CONTINUE

999	RETURN
	END
