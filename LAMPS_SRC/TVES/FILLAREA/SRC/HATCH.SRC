	LOGICAL FUNCTION HATCH( ALG, NPTS,   PTS,    SIDES,  SIDPTR,
     &				     MAXSCT, INTSCT, INTPTS,
     &				     NHATCH, COLOUR, SPACES, LINWID,
     &				     DEVICE, FREQ )
C
***	MODULE	HATCH
***	IDENT	11JA85
C
	  IMPLICIT NONE
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C
C Created by TJ Ibbs, 9 January 1984
C
C *********************************************************************
C
C This function manages the GKS environment for area fill - it also
C calls the correct function
C
C It returns the result returned by the lower function, which is
C FALSE if the polygon is filled (see NOTE below), and TRUE
C if something drastic is wrong - this generally means that it was
C given silly arguments
C
C *********************************************************************
C
C parameters
C
	PARAMETER	STL = 1		! our line style - solid
C
C arguments
C
	INTEGER		ALG
	INTEGER*2	NPTS
	REAL		PTS(2,NPTS)
	REAL		SIDES(4,NPTS)
	INTEGER		SIDPTR(NPTS)
	INTEGER*2	MAXSCT
	REAL		INTSCT(4,MAXSCT)
	REAL		INTPTS(MAXSCT)
	INTEGER		NHATCH
	INTEGER		COLOUR
	REAL		SPACES
	REAL		LINWID
	INTEGER		DEVICE
	INTEGER		FREQ
C
C ALG	  is the algorithm to fill with
C
C		1 => FILL_SIDE - the fast-for-large-polygons algorithm
C		2 => FILL_AREA - the otherwise slow algorithm
C
C NPTS	  is the number of points in the polygon
C
C PTS	  is the array of points defining this feature
C
C	  the last and first points are assumed to be equal,
C	  ie the polygon must be explicitly closed
C	  note that FILL_SIDE may use PTS as workspace, in
C	  rotating the polygon
C
C SIDES	  is used to store the (sorted) array of sides of the polygon
C
C	  for each side, the X,Y values of the maximum point are
C	  stored, and also the delta X and Y values which may be used
C	  to obtain the other point
C
C SIDPTR  is used to store an array of pointers into SIDES, for
C	  speeding up access to it
C
C MAXSCT  is the number of intersections which may be stored - it is
C	  used for the INTSCT and INTPTS arrays
C
C INTSCT  is used to store the sides that are intersected by the
C	  current slice
C
C INTPTS  is used to store the actual intersection points
C
C NHATCH  is the style of fill
C
C	  1 => fill with horizontal lines	----
C	  2 => fill with vertical lines		||||
C	  3 => fill with  45 degree lines	////
C	  4 => fill with -45 degree lines	\\\\
C	  5 => crosshatch horizontal/vertical	++++
C	  6 => crosshatch at 45 degrees		xxxx
C
C COLOUR  is the colour to use for our lines
C
C SPACES  is the gap to leave between each line (actually between
C	  the centre of each line)
C
C LINWID  is the line width scale factor to use
C
C DEVICE  which device to update, etc ( by GUWK(DEVICE) )
C
C FREQ	  is how often to do it (after every FREQ lines across)
C
C *********************************************************************
C
C functions:
C
	LOGICAL		FILL_SIDE
	LOGICAL		FILL_AREA
C
C workspace:
C
C remember our GKS environment on entry
C
	REAL		GWIDTH		! line width from GKS
	INTEGER		GLTYPE		! line type  from GKS
	INTEGER		PENCOL		! pen colour from GKS
	INTEGER		ERRIND		! error indicator
C
C
C *********************************************************************
C
C check for silly cases
C
	IF ( NPTS.LT.4		.OR.
     &	     NHATCH.LT.1	.OR.
     &	     NHATCH.GT.6	.OR.
     &	     COLOUR.LT.0	.OR.
     &	     SPACES.LE.0.0	.OR.
     &	     LINWID.LT.0.0	) THEN
	   CALL WRITEF('HATCH - Bad argument')
	   HATCH = .TRUE.
	   GOTO 9999
	ENDIF
C
C find out what characteristics we will have to reinstate when we exit
C - we ignore the error indicators
C
	CALL GQLN(  ERRIND, GLTYPE)	! line type
	CALL GQLWSC(ERRIND, GWIDTH)	! line width scale factor
	CALL GQPLCI(ERRIND, PENCOL)	! pen colour
C
C ensure that we have the correct linetype - solid line is STL = 1
C
	IF ( GLTYPE.NE.STL ) CALL GSLN(STL)
C
C and the correct colour
C
	IF (PENCOL.NE.COLOUR) CALL GSPLCI(COLOUR)
C
C and the right line thickness (or rather linewidth scale factor)
C
	IF (GWIDTH.NE.LINWID) CALL GSLWSC(LINWID)
C
C *********************************************************************
C
C and perform the fill
C
	IF (ALG.EQ.1) THEN
	   HATCH = FILL_SIDE( NPTS, PTS, SIDES, SIDPTR,
     &			      MAXSCT, INTSCT, INTPTS,
     &			      NHATCH, SPACES, DEVICE, FREQ )
	ELSE
	   HATCH = FILL_AREA( NPTS, PTS, MAXSCT, INTSCT, INTPTS,
     &			      NHATCH, SPACES, DEVICE, FREQ )
	ENDIF
C
C
C *********************************************************************
C
C and having finished, reset those polyline flags which we have changed
C
	IF ( COLOUR.NE.PENCOL ) CALL GSPLCI( PENCOL )
	IF ( LINWID.NE.GWIDTH ) CALL GSLWSC( GWIDTH )
	IF ( STL.NE.GLTYPE  ) CALL GSLN( GLTYPE )
C
9999	RETURN			! error return joins us here
	END
