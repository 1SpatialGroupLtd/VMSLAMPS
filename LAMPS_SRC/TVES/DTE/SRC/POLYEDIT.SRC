C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1985-11-14 17:01:32.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE POLY_EDIT (P,NPTS,NEW_HGT,SMOOTH,EDGE,ONN,OFF)
C
***	IDENT 14NO85
***	MODULE POLY_EDIT
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C
C	Author	  : ACM/DRC
C	Created   : Nov 1984
C
CMOD	Bug for X > 1024 fixed				ACM   13-Non-85
CMOD	Changes to allow for smoothing			ACM   04-Apr-85
CMOD	Corrected check for clockwise/anticlockwise	ACM   03-Apr-85
C
	IMPLICIT NONE
C
***	PARAMETER/HERE:DTEPAR/
C
***	COMMON/HERE:TAB/
***	COMMON/HERE:DTECMN/
C
C parameters in
	INTEGER	NPTS		! No. of vertices
	INTEGER	P(2,NPTS+1)	! DTI coords of vertices
	INTEGER	NEW_HGT		! New height
	LOGICAL	SMOOTH		! smooth or direct edit?
C
C workspace
	INTEGER*2	HGT	! new smoother height
	INTEGER	X1,Y1		! DTI coord I-1
	INTEGER	X2,Y2		! DTI coord I
	INTEGER	DX1,DY1,DX2,DY2	! consecutive edge vectors
	INTEGER	I0,I1,I2	! indices of 3 consecutive vertices
	INTEGER	XMIN,XMAX	! intersection X range over along YLINE
	INTEGER	YMIN,YMAX	! Y for bottom/top scan line
	INTEGER	I_YMIN		! index of vertex with lowest Y coord
	INTEGER	YLINE		! Y for current scan line
	LOGICAL	EDGE(XMIN_DTI:XMIN_DTI+NX_PIXELS-1)
C				! scan line intersection X's
	LOGICAL	ONN(XMIN_DTI:XMIN_DTI+NX_PIXELS-1)
C				! pixel part of openning boundary?
	LOGICAL	OFF(XMIN_DTI:XMIN_DTI+NX_PIXELS-1)
C				! pixel part of closing boundary?
	LOGICAL	HADONN,HADOFF	! boundary thickness had open/close?
	LOGICAL	WOZ_EDGE	! previous pixel int. by edge?
	INTEGER	XLEFT,XRIGHT	! single "intersection" X range
	INTEGER	I,X,Y,XA,XB	! working integers
	REAL	RX,DX,DY,G	! working reals
	LOGICAL	IN		! inside polygon?
	LOGICAL	CLW		! polygon clockwise?
C
C functions
	INTEGER*2	NSEWAV	! avg of N,S,E,W neighbour heights
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Changes the height value of all matrix elements within
C	the closed simple polygon defined by the NPTS DTI points
C	in P, to height NEW_HGT if SMOOTH is FALSE, else to
C	NSEW average height.
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
	IF(NPTS.EQ.1)THEN
C	  IF (SMOOTH) THEN
C	    X = P(1,1)
C	    Y = P(2,1)
C	    HGT = NSEWAV(X,Y,%VAL(FIRST_HGT))
C	    CALL EDIT_CELL(X,Y,HGT,%VAL(FIRST_HGT))
C	  ELSE
	    CALL EDIT_CELL(P(1,1),P(2,1),NEW_HGT,%VAL(FIRST_HGT))
C	  END IF
	  GOTO 70		! return
	END IF
C
C get polygon X and Y DTI ranges
	XMIN = P(1,1)
	XMAX = XMIN
	YMIN = P(2,1)
	YMAX = YMIN
	I_YMIN = 1
C
	DO 10 I = 1,NPTS
	IF (P(1,I).LT.XMIN) THEN
	  XMIN = P(1,I)
	ELSE IF (P(1,I).GT.XMAX) THEN
	  XMAX = P(1,I)
	END IF
	IF (P(2,I).LT.YMIN) THEN
	  YMIN = P(2,I)
	  I_YMIN = I
	ELSE IF (P(2,I).GT.YMAX) THEN
	  YMAX = P(2,I)
	END IF
10	CONTINUE
C
C find whether polygon is clockwise or anti-clockwise by finding the
C sign of the vector co-product of two consecutive polygon edges (not
C both horizontal) whose join vertex is known to be a Y-minimum
	I2 = I_YMIN
	Y2 = P(2,I2)
15	I1 = I2
	I2 = I1+1
	IF (I2.GT.NPTS-1) I2 = 1	! modular addition
	Y1 = Y2
	Y2 = P(2,I2)
	DY2 = Y2-Y1
	IF (DY2.EQ.0) THEN		! flat polygon?
	  IF (I2.EQ.I_YMIN) GOTO 16
	  GOTO 15
	END IF
	I0 = I1-1
	IF (I0.LE.0) I0 = NPTS-1	! modular subtraction
	DX1 = P(1,I1)-P(1,I0)
	DY1 = P(2,I1)-P(2,I0)
	DX2 = P(1,I2)-P(1,I1)
	CLW = DX2*DY1.GT.DY2*DX1
16	CONTINUE
C
C initialise EDGE, MULT and INTO arrays
	DO 20 X = XMIN,XMAX
	EDGE(X) = .FALSE.
	ONN(X) = .FALSE.
20	OFF(X) = .FALSE.
C
C find all intersections of scan line with polygon edges for each
C scan line  -there may be > 1 intersecting element per "intersection"
	DO 60 YLINE = YMIN,YMAX
C
C set elements of EDGE .TRUE. for DTI elements intersecting
C the scan line with each of the edges of the polygon
	XMIN = NX_DTI
	XMAX = 1
C
	DO 40 I = 2,NPTS
	Y1 = P(2,I-1)
	Y2 = P(2,I)
	IF(YLINE.LT.Y1.AND.YLINE.LT.Y2)GOTO 40	! above scan line?
	IF(YLINE.GT.Y1.AND.YLINE.GT.Y2)GOTO 40	! below scan line?
C
	X1 = P(1,I-1)
	X2 = P(1,I)
	DX = X2-X1
	DY = Y2-Y1
C
C find left and right-most elements in intersection
	IF (DX.EQ.0) THEN
	  XLEFT = X1
	  XRIGHT = X2
	ELSE IF (DY.EQ.0) THEN
	  XLEFT = MIN0(X1,X2)
	  XRIGHT = MAX0(X1,X2)
	ELSE
C
C "G" is (real) X dist betw ints of line L12 (thro P1 and P2) with
C scan-row top line (Y = YLINE + 0.5) and bot line (Y = YLINE - 0.5)
	  G = DX/DY
C
C "RX" is (real) X coord of int betw L12 and the scan-row bot line
	  RX = X1 + (YLINE-0.5-Y1)*G
C
C "XA" is DTI X coord of DTI element containing real point (RX,YLINE)
C "XB" is DTI X coord of DTI element containing (RX+G,YLINE)
	  IF (G.GT.0) THEN
	    XA = NINT(RX)			! round up
	    XB = NINT(RX+G-0.001)		! round down
	  ELSE
	    XA = NINT(RX-0.001)			! round down
	    XB = NINT(RX+G)			! round up
	  END IF
C
C "XLEFT" and "XRIGHT" are the DTI X coords of the left- and right-most
C DTI elements which are intersected by L12 BETWEEN P1 and P2,not beyond
	  XLEFT = MAX0(MIN0(XA,XB),MIN0(X1,X2))
	  XRIGHT= MIN0(MAX0(XA,XB),MAX0(X1,X2))
	END IF
C
C set all elements from XLEFT to XRIGHT in DTI row array EDGE to .TRUE.,
C and keep note of the minimum and maximum X
	XMIN = MIN0(XMIN,XLEFT)
	XMAX = MAX0(XMAX,XRIGHT)
C
	DO 30 X = XLEFT,XRIGHT
	EDGE(X) = .TRUE.
	IF (CLW) THEN
	  IF (DY.GT.0) ONN(X) = .TRUE.
	  IF (DY.LT.0) OFF(X) = .TRUE.
	ELSE
	  IF (DY.LT.0) ONN(X) = .TRUE.
	  IF (DY.GT.0) OFF(X) = .TRUE.
	END IF
30	CONTINUE
C
40	CONTINUE	  	! loop for next edge
C
C edit this line
	IN = .FALSE.
	WOZ_EDGE = .FALSE.
	HADONN = .FALSE.
	HADOFF = .FALSE.
C
	DO 50 X = XMIN,XMAX
	IF (EDGE(X)) THEN
	  IF (ONN(X)) HADONN = .TRUE.
	  IF (OFF(X)) HADOFF = .TRUE.
	ELSE IF (WOZ_EDGE) THEN
	  IF (.NOT.(HADONN.AND.HADOFF)) IN = HADONN
	  HADONN = .FALSE.
	  HADOFF = .FALSE.
	END IF
	IF (IN.OR.EDGE(X)) THEN
C	  IF (SMOOTH) THEN
C	    HGT = NSEWAV(X,YLINE,%VAL(FIRST_HGT))
C	    CALL EDIT_CELL(X,YLINE,HGT,%VAL(FIRST_HGT))
C	  ELSE
	    CALL EDIT_CELL(X,YLINE,NEW_HGT,%VAL(FIRST_HGT))
C	  END IF
	END IF
	ONN(X) = .FALSE.
	OFF(X) = .FALSE.
	WOZ_EDGE = EDGE(X)
50	EDGE(X) = .FALSE.
C
60	CONTINUE		! loop for next scan row
C
70	CALL VSDEF(2,1,6)	! scrub white polygon outline
	CALL VSPIC(2)
	CALL VSCLR(2)
C
	CALL VSDEF(2,2,6)
	CALL VSSEL(3)		! show both pics
	CALL VSPIC(1)
C	CALL VSGEN
C
C show possibly updated height limits
	CALL WRTINT(MIN_HGT,6,COL1)
	CALL WRTINT(MIN_HGT,6,COL4)
	CALL WRTINT(MAX_HGT,6,COL2)
	CALL WRTINT(MAX_HGT,6,COL5)

	END
