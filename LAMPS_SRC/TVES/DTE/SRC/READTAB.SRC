C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-07-29 13:57:12.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION READ_TAB_COORDS()
C
***	IDENT	29JL86
***	MODULE	READ_TAB_COORDS
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C
C	Author	  : Andrew Morris
C	Created   : Oct 1984
C
CMOD	X_TAB,Y_TAB moved to DTECMN
C
	IMPLICIT NONE
C
C
***	PARAMETER/HERE:DTEPAR/
C
***	COMMON/LSL$CMNVIO:TXTC/		! has TXTBUF for comm line
***	COMMON/LSL$CMNVIO:EXPC/		! message output
***	COMMON/LSL$CMNVIO:CMDCOM/	! command decoding
***	COMMON/HERE:TAB/		! has ERR,IERR etc
***	COMMON/HERE:DTECMN/		! has X_TAB,Y_TAB etc.
C
C functions
	LOGICAL		READ_PUCK	! read puck data
	LOGICAL		HAD_PUCK	! had puck input?
	LOGICAL		RDLONG		! read integer?
	INTEGER		RDCOMM		! read next command
	LOGICAL		RDCHS		! read next non blank character
C
C workspace
	INTEGER		CMD		! command number
	BYTE		CH		! a character
	INTEGER		IER		! an error number
C
C externals
	INTEGER		DTE_CMD_TABLE	! table of keyboard commands
	EXTERNAL	DTE_CMD_TABLE
C
C:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
C Reads point in table coords, input from keyboard or table cursor
C
C Function result returns	-2 for table error,
C				-1 for other error,
C				 0 for success,
C				 1 for abandon
C:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
C
	IF (HAD_PUCK(IERR)) THEN
	  PRE_X_TAB = X_TAB			! Put old TABLE coords
	  PRE_Y_TAB = Y_TAB			! where they belong
	  ERR = READ_PUCK(BUTTON,X_TAB,Y_TAB,IERR)
	  IF (ERR) THEN
	    READ_TAB_COORDS = -2
	    CALL SHOW_ERROR(IERR)
	    GOTO 40				! return
	  END IF
C
C check for button ABANDON or END command
	  CMD = BUTTON+1			! may be button command
	  IF (CMD.EQ.CMD_ABANDON) THEN
	    READ_TAB_COORDS = 1
	  ELSE IF (CMD.EQ.CMD_END) THEN
	    READ_TAB_COORDS = 2
	  ELSE				! interpret as a vertex?
	    READ_TAB_COORDS = 0
	  END IF
C
	ELSE IF (HAD_VDU) THEN
	  IF (TXTBUF(1).EQ.26) THEN		! abandoned?
	    READ_TAB_COORDS = 1
	  ELSE
	    CALL BSLN
	    CMD = RDCOMM(DTE_CMD_TABLE)
	    IF (CMD.EQ.CMD_ABANDON) THEN
	      READ_TAB_COORDS = 1
	    ELSE IF (CMD.EQ.CMD_END) THEN
	      READ_TAB_COORDS = 2
	    ELSE
	      CALL EXPAND('%SUnexpeted ''%A''',BELL,TXTBUF(1))
	      CALL MSG(EXPBUF)
	      READ_TAB_COORDS = -1
	    END IF
	  END IF
	END IF
C
40	END
