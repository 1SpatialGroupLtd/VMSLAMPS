C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-02-19 15:49:34.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE MAGNIFY(ZOOM,PRE_SET)
C
***	IDENT	19FE87
***	MODULE	MAGNIFY
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C
C	Author	  : Andrew Morris
C	Created   : Oct 1984
C
	IMPLICIT NONE
C
***	PARAMETER/HERE:DTEPAR/
C
***	COMMON/HERE:TAB/
***	COMMON/HERE:TRANS/
***	COMMON/HERE:DTECMN/
C
C parameters in
	LOGICAL		ZOOM		! zoom? -or pan?
	LOGICAL		PRE_SET		! is MAG PRE_SET ?
C
C workspace
	INTEGER		X_PIX,Y_PIX	! pixel coords
	REAL		TXLL,TYLL	! TEK window LL TEK coords
	REAL		TXUR,TYUR	! TEK window UR TEK coords
	INTEGER		XMAG,YMAG	! X and Y scale factors
	REAL		R1,R2		! temp reals
C
C functions
	LOGICAL		HAD_PUCK	! had single point?
	LOGICAL		HAD_ERROR	! had table error?
C
C:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
C Zooms in or out of current SIGMA window, depending on value of ZOOM
C:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
C
	IF (PRE_SET) GOTO 99
C
C increase or decrease magnification, if possible
	IF (ZOOM) THEN
	  IF (MAG.GE.16) THEN
	    CALL LIB$UP_SCROLL()
	    CALL LIB$SET_CURSOR(BOT_LIN,1)
	    CALL WRITEF('%SDisplay is at maximum magnification',BELL)
	    GOTO 10	  ! return
	  END IF
	  IF (MAG.EQ.1) THEN
	    MAG = 2
	  ELSE
	    MAG = MAG+2
	  END IF
	ELSE
	  IF (MAG.LE.1) THEN
	    CALL LIB$UP_SCROLL()
	    CALL LIB$SET_CURSOR(BOT_LIN,1)
	    CALL WRITEF('%SDisplay is at minimum magnification',BELL)
	    GOTO 10	  ! return
	  END IF
	  IF (MAG.EQ.2) THEN
	    MAG = 1
	  ELSE
	    MAG = MAG-2
	  END IF
	END IF
C
99	CONTINUE	! start here for PRE_SET zoom
C
C move SIGMA internal cursor position to SIGMA window centre
	X_PIX = X_CENTRE+DTI_TO_PIX(1,3)
	Y_PIX = Y_CENTRE+DTI_TO_PIX(2,3)
	CALL VSCSWP(X_PIX,Y_PIX)
C
C and zoom about this cursor position to required magnification
	XMAG = MAG-1	! don't give VSLIB chance to corrupt MAG
	YMAG = MAG-1
	CALL VSZOOM(8,XMAG,YMAG)
C
C find DTI coords of new window LL and UR DTI corners
	XCUR_MIN = MAX0(X_CENTRE - NX_PIXELS/(2*MAG), XMIN_DTI)
	YCUR_MIN = MAX0(Y_CENTRE - NY_PIXELS/(2*MAG), YMIN_DTI)
	XCUR_MAX = MIN0(X_CENTRE + NX_PIXELS/(2*MAG), XMAX_DTI)
	YCUR_MAX = MIN0(Y_CENTRE + NY_PIXELS/(2*MAG), YMAX_DTI)
C
C and redraw window on T4014
	IF (GOT_TEK) THEN
	  R1 = XCUR_MIN
	  R2 = YCUR_MIN
	  CALL TRANSF(DTI_TO_TEK,R1,R2,TXLL,TYLL)
	  R1 = XCUR_MAX
	  R2 = YCUR_MAX
	  CALL TRANSF(DTI_TO_TEK,R1,R2,TXUR,TYUR)
C
	  CALL DISMOD(1)	  	! clear refresh buffer
	  CALL MOVTO(TXLL,TYLL)
	  CALL LINTO(TXLL,TYUR)
	  CALL LINTO(TXUR,TYUR)
	  CALL LINTO(TXUR,TYLL)
	  CALL LINTO(TXLL,TYLL)
	  CALL REFRSH	  		! draw refresh display
	END IF
C	  
10	END
