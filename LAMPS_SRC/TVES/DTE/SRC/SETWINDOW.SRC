C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-02-18 13:59:18.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE SET_WINDOW(GOT_ARGS)
C
***	IDENT	17FE87
***	MODULE	SET_WINDOW
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C
C	Author	  : Andrew Morris
C	Created   : 7th Jan 1985
C
	IMPLICIT NONE
C
***	PARAMETER/HERE:DTEPAR/
C
C parameters in
	LOGICAL		GOT_ARGS  ! already got valid WINDOW arguments?
C
***	COMMON/LSL$CMNVIO:TXTC/
***	COMMON/LSL$CMNVIO:EXPC/
***	COMMON/HERE:DTECMN/
***	COMMON/HERE:TAB/
***	COMMON/HERE:TRANS/
C
C workspace
	REAL		SF		! a scale factor
	INTEGER		I1,I2,I3,I4	! working integers
	LOGICAL		WAS_SET		! was window set before?
C
C functions
	INTEGER		GET_DTI_COORDS	! do that
C
C:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
C Sets up sub area of DTI file for editing
C:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
C
C if a window is already set then check the height range over this
C window before moving on to the new window, because that way it will
C never be necessary to scan over more than the current window in
C order to find the height range over the whole DTI
	IF (WINDOW_SET) CALL FIND_HGT_RANGE(%VAL(FIRST_HGT),.FALSE.)
C
	WAS_SET = WINDOW_SET
	WINDOW_SET = .FALSE.		! blocks calls to SIGCSWT
C
	IF (GOT_ARGS) GOTO 48
C
C note original DTI window in case command is abandoned
	I1 = XMIN_DTI
	I2 = YMIN_DTI
	I3 = XMAX_DTI
	I4 = YMAX_DTI
C
46	IERR = GET_DTI_COORDS(XMIN_DTI,YMIN_DTI,
     +	  'DTI window lower left',.TRUE.)
	IF (IERR.NE.0) GOTO 99		! abandon
47	IERR = GET_DTI_COORDS(XMAX_DTI,YMAX_DTI,
     +	  'DTI window upper right',.TRUE.)
	IF (IERR.NE.0) GOTO 99		! abandon
C
48	DX_DTI = XMAX_DTI-XMIN_DTI+1	! window dimensions
	DY_DTI = YMAX_DTI-YMIN_DTI+1
C
C check NE corner is not below left of SW corner
	IF (DX_DTI.LT.1.OR.DY_DTI.LT.1) THEN
	  CALL LIB$UP_SCROLL()
	  CALL LIB$SET_CURSOR(BOT_LIN,1)
	  CALL WRITEF('%SUpper right must be above right of lower left',
     +	    BELL)
	  CALL LIB$UP_SCROLL()
	  GOTO 46
	END IF
C
C clip window to fit SIGMA pixel matrix
	XMIN_DTI = MAX0(XMIN_DTI,1)
	XMAX_DTI = MIN0(XMAX_DTI,XMIN_DTI+NX_PIXELS-1)
	YMIN_DTI = MAX0(YMIN_DTI,1)
	YMAX_DTI = MIN0(YMAX_DTI,YMIN_DTI+NY_PIXELS-1)
C
	DX_DTI = XMAX_DTI-XMIN_DTI+1	! final window dimensions
	DY_DTI = YMAX_DTI-YMIN_DTI+1
C
C show window X and Y ranges
	CALL WRTINT(XMIN_DTI,4,COL4)
	CALL WRTINT(XMAX_DTI,4,COL5)
	CALL WRTINT(YMIN_DTI,5,COL4)
	CALL WRTINT(YMAX_DTI,5,COL5)
C
C set up DTI_TO_PIX homogeneous transformation matrix
	DTI_TO_PIX(1,1) = 1
	DTI_TO_PIX(1,2) = 0
	DTI_TO_PIX(1,3) = 1+(NX_PIXELS-DX_DTI)/2-XMIN_DTI
	DTI_TO_PIX(2,1) = 0
	DTI_TO_PIX(2,2) = 1
	DTI_TO_PIX(2,3) = 1+(NY_PIXELS-DY_DTI)/2-YMIN_DTI
	DTI_TO_PIX(3,1) = 0
	DTI_TO_PIX(3,2) = 0
	DTI_TO_PIX(3,3) = 1
C
C set initial value of SIGMA display centre DTI coords
	X_CENTRE = (XMIN_DTI+XMAX_DTI)/2
	Y_CENTRE = (YMIN_DTI+YMAX_DTI)/2
C
C set cursor limits
	XCUR_MIN = XMIN_DTI
	XCUR_MAX = XMAX_DTI
	YCUR_MIN = YMIN_DTI
	YCUR_MAX = YMAX_DTI
C
	GOT_BORDER = .FALSE.	! not yet drawn map boundary on T4014
C 
C set magnification so as to scale up map to fit SIGMA pixel area
	MAG = MIN0(NX_PIXELS/DX_DTI,NY_PIXELS/DY_DTI)
	IF (MAG.GT.16) THEN
	  MAG = 16
	ELSE IF (MAG.GT.1) THEN
	  MAG = 2*(MAG/2)
	ELSE
	  MAG = 1
	END IF
	IF (GOT_TEK) CALL BORDER	! locate DTI window on TEK
C
C (re-)initialise SIGMA
C	CALL VSINIT(7)		! attatch, enable display, clear screen,
C 				! set default scale, origin and offset
C	CALL VSALOF		! turn off alpha cursor
C	CALL VSDEF(1,6,0)	! set up picture 1 with 6 bit planes
C	CALL VSPIC(1)		! draw to pic 1
C	CALL VSSEL(1)		! display pic 1
	CALL VSCLR(1)		! clear sigma
	CALL MAGNIFY(.TRUE.,.TRUE.)	! zoom to this magnification
	CALL SETPIX(%VAL(FIRST_HGT))	! draw DTI map on SIGMA display
C
C DTI matrix is now fully defined
	WINDOW_SET = .TRUE.
C
C move SIGMA cursor to CENTRE
	CALL SIGCSWT(X_CENTRE,Y_CENTRE,.TRUE.)
	GOTO 100
C
C here to abandon command and restore original DTI window
99	WINDOW_SET = WAS_SET
	XMIN_DTI = I1
	YMIN_DTI = I2
	XMAX_DTI = I3
	YMAX_DTI = I4
C
100	END
