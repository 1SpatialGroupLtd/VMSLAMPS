	SUBROUTINE INTERP_EDIT(P1,NPTS1,HGT1,NEWHGT1,
     +	                       P2,NPTS2,HGT2,NEWHGT2)
C
***	IDENT 16AP85
***	MODULE INTERP_EDIT
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C
C	Author	  : ACM
C	Created   : Apr 1895
C
	IMPLICIT NONE
C
***	PARAMETER/HERE:DTEPAR/		! has MAXPTS
C
***	COMMON/HERE:DTECMN/		! has FIRST_HGT
C
C parameters in
	INTEGER		NPTS1,NPTS2	! No of pts in 1st and 2nd paths
	INTEGER		P1(2,MAXPTS),P2(2,MAXPTS)! DTI coords of pts
	INTEGER*2	HGT1,HGT2	! new heights
	LOGICAL 	NEWHGT1,NEWHGT2	! change hgts in paths 1 and 2 ?
C
C workspace
	INTEGER		PIX1(2,MAXPTS)	! DTI coords of pixels along
C					! one break line
	INTEGER		PIX2(2,MAXPTS)	! DTI coords of pixels along
C					! the other break line
	INTEGER		PIX(2,MAXPTS)	! DTI coords of pixels along
					! interpolation line betw br lns
	INTEGER		I_VERTEX,I,I1,I2
	INTEGER		NPIX1,NPIX2,NPIX! No of pixels in PIX1,PIX2,PIX
	INTEGER		I_PIX,J_PIX,K_PIX	! pixel counts
	INTEGER		V(2,2)		! interpolation line
	INTEGER		AREA(2,2*MAXPTS)! edit area boundary
	INTEGER		I_AREA		! area vertex index
	INTEGER*2	HGT		! a DTI height
C
	REAL		RX,DX,DY,DH,G	! working reals
	REAL		RATIO		! ratio of NPIX2:NPIX1
C
	LOGICAL		L1		! temp logical value
C
C functions
	INTEGER*2	DTI_HGT		! hgt of a DTI element
C
C:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
C
C	Edits the area between two break-lines, using linear
C	interpolation along a line from each pixel in the line with
C	the greater number of pixels to the corresonding pixel in
C	the other line.
C
C	Heights in the break-lines themselves are not changed to heights
C	given unless NEWHGT is true.
C
C:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
C
C find pixels in each path, editing heights if necessary
	CALL PATH_EDIT(P1,NPTS1,HGT1,NEWHGT1,PIX1,NPIX1)
	CALL PATH_EDIT(P2,NPTS2,HGT2,NEWHGT2,PIX2,NPIX2)
C
C make sure P1 does not have less pixels than p2
	IF (NPIX1.LT.NPIX2) THEN		! swap P1 and P2
C
C swap breakline pixels
	  DO 110 I_PIX = 1,MAX(NPIX1,NPIX2)
	  I1 = PIX1(1,I_PIX)
	  I2 = PIX1(2,I_PIX)
	  PIX1(1,I_PIX) = PIX2(1,I_PIX)
	  PIX1(2,I_PIX) = PIX2(2,I_PIX)
	  PIX2(1,I_PIX) = I1
110	  PIX2(2,I_PIX) = I2
C
	  I1 = NPIX1
	  NPIX1 = NPIX2
	  NPIX2 = I1
C
	  HGT = HGT1
	  HGT1 = HGT2
	  HGT2 = HGT
C
	  L1 = NEWHGT1
	  NEWHGT1 = NEWHGT2
	  NEWHGT2 = L1
	END IF
C
C interpolate from each pixel in P1 to corresponding pixel in P2
	RATIO = REAL(NPIX2)/REAL(NPIX1)
C
	DO 1000 I_PIX = 1,NPIX1
C
	J_PIX = NINT(I_PIX*RATIO)
	J_PIX = MAX(1,MIN(NPIX2,J_PIX))
C
	V(1,1) = PIX1(1,I_PIX)
	V(2,1) = PIX1(2,I_PIX)
	V(1,2) = PIX2(1,J_PIX)
	V(2,2) = PIX2(2,J_PIX)
C
C find pixels along this path
	CALL PATH_EDIT(V,2,HGT,.FALSE.,PIX,NPIX)
C
	IF (.NOT.NEWHGT1) HGT1 = DTI_HGT(V(1,1),V(2,1),%VAL(FIRST_HGT))
	IF (.NOT.NEWHGT2) HGT2 = DTI_HGT(V(1,2),V(2,2),%VAL(FIRST_HGT))
	DH = HGT2-HGT1
C
	DO 120 K_PIX = 2,NPIX-1
	HGT = HGT1+NINT(DH*REAL(K_PIX)/REAL(NPIX))
120	CALL EDIT_CELL(PIX(1,K_PIX),PIX(2,K_PIX),HGT,%VAL(FIRST_HGT))
C
1000	CONTINUE		! loop for next pixel in P1
C
70	CALL VSGEN
C
C smooth the area edited, because it is likely to be a bit jagged
C	DO 42 I_AREA = 1,NPTS1
C	AREA(1,I_AREA) = P1(1,I_AREA)
C42	AREA(2,I_AREA) = P1(2,I_AREA)
CC
C	I_AREA = NPTS1
CC
C	DO 43 I = NPTS2,1,-1
C	I_AREA = I_AREA+1
C	AREA(1,I_AREA) = P2(1,I)
C43	AREA(2,I_AREA) = P2(2,I)
CC
C	I_AREA = I_AREA+1
CC
C	AREA(1,I_AREA) = AREA(1,1)
C	AREA(2,I_AREA) = AREA(2,1)
CC
C	CALL POLY_EDIT(AREA,I_AREA,HGT,.TRUE.)
C	CALL VSGEN
C
	END
