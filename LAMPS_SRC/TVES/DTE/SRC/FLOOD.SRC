C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-02-17 11:11:40.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE FLOOD(FROM,FLOOD_INI,WAIT_TIM)
C
***	MODULE FLOOD
***	IDENT  17FE87
C
C	Copyright Laser Scan Laboratories Ltd, Cambridge, England.
C
CMOD	Remove bug in flood timing	       MWSR    17-Feb-1987
CMOD	BELLS and whistles removed		ATT	7-Oct-1986
C
C	Author 	: A.T. Timms
C	Created : 28th July 1986 
C
C	Subroutine to "FLOOD" current DTE window from the current lowest
C	limit to the upper limit TOP_FLD by re-writing the colour LUT 
C	(Lookup Table) with blue. The operator then has the option to 
C	"unflood" or drain away the "BLUE" water interactively using the
C	trackerball or digitising table. Movement in the Y axis will
C	influence the flooding or draining. The user is in flood MODE
C	until a new file or window is called or -FLOOD is given.
C
	IMPLICIT NONE
C
C
***	COMMON/LSL$CMNVS:SGCOLT/		! Colour table info
***	COMMON/HERE:DTECMN/			! has TOP_VIZ etc.
C
***	PARAMETER/HERE:DTEPAR/
C
C Workspace
	BYTE		TMPTAB(4,0:255)	! To hold colour table
	BYTE		BTEMP		! To hold BLUE colour
	BYTE		FLD_COL(4)	! Red green blue and blink
C					! colour parameters.
C
	INTEGER		FROM		! command source number
	INTEGER*2	ITEMP		! To hold BLUE colour
	INTEGER		XCUR_SAV,YCUR_SAV ! saved sigma cursor pos
	INTEGER		XTAB_SAV,YTAB_SAV ! saved sigma cursor pos
	INTEGER		I,J		! loop variables
	INTEGER		FMAX_HGT,FMIN_HGT ! Max & min heights for loops
	INTEGER		TOP_HGT,TMP_HGT	! to hold heights of 
C					! flooding levels
	INTEGER*4	IVALUE		! Longword containing new
C					! colour parameters
	INTEGER		IMVMT		! integer distance moved
	INTEGER*2	IWAIT		! integer wait 1000th sec
	INTEGER		NSTEPS
	INTEGER		NCOLS_PER_STEP
C
	REAL		MVMT,X_MVMT,Y_MVMT  	! real distance
	REAL		WAIT_TIM		! real wait time
C
	LOGICAL		FLOOD_INI	! is it the first time 
C					! round for flooding ?
C
C functions
	INTEGER		ICOL		! to return colour codes
C
	EQUIVALENCE	(BTEMP,ITEMP)
	EQUIVALENCE	(FLD_COL,IVALUE)
C
C...................................................................
C
C If it is the first time round we need to save the colours of the 
C colour table before they are over-written, and the cursor X and Y.
	IF (FLOOD_INI) THEN 
	  DO 20 I = 1,4
	    DO 10 J = 1,NCOLS
	      TMPTAB(I,J-1) = SGCTAB(I,J)
10	    CONTINUE
20	  CONTINUE
C
	  XCUR_SAV = XCUR
	  YCUR_SAV = YCUR
	  XTAB_SAV = X_TAB
	  YTAB_SAV = Y_TAB
	ENDIF
C
C Set up the colour to flood in ie. BLUE (CHELSEA colours !!)
	FLD_COL(1)=0
	FLD_COL(2)=0
	ITEMP=255	! blue is the colour ... football is the game
	FLD_COL(3)=BTEMP
	FLD_COL(4)=0
C...................................................................
C get number of steps
	NSTEPS = (TOP_VIZ-MAX0(0,BOT_VIZ))/STEP_HGT
	IF (NSTEPS.LT.1) NSTEPS = 1
C
C and the number of colours per step
	NCOLS_PER_STEP = (NCOLS-1-ICOL_SEA)/NSTEPS	  
	IF (NCOLS_PER_STEP.LT.1) NCOLS_PER_STEP = 1
C
C Find the current max and min heights to flood to ...
	FMAX_HGT = MIN0(TOP_VIZ,MAX_HGT_WIN)
	FMIN_HGT = MAX0(BOT_VIZ,MIN_HGT_WIN)
C
C We are flooding for the first time 
	IF (GOT_FLOOD) THEN
C We want to see something so .....
	  IF (FLOOD_INI) THEN 
C
C a little loop to do the flooding (re-writing !) 
	    IF (WAIT_TIM.GT.0.001) THEN
	      IWAIT = WAIT_TIM*1000.0 + 0.5	! Trans. to 1/1000 sec
	      DO 100 I = ICOL(FMIN_HGT),ICOL(FMAX_HGT)
	        CALL VSSGSC(I,IVALUE)
		IF(MOD(I,NCOLS_PER_STEP) .EQ. 0) THEN
	           CALL WAIT(IWAIT,1)  
		ENDIF
100	      CONTINUE
C
C and another to drain away the water !
	      DO 120 I = ICOL(FMAX_HGT),ICOL(FMIN_HGT),-1
	        DO 110 J = 1,4
	          FLD_COL(J) = TMPTAB(J,I)
110	        CONTINUE
	        CALL VSSGSC(I,IVALUE)	   	! re-write the colour
		IF(MOD(I,NCOLS_PER_STEP) .EQ. 0) THEN
	           CALL WAIT(IWAIT,1)  
		ENDIF
120	      CONTINUE
	    ENDIF
	    TOP_HGT = FMIN_HGT		! init top hgt=bottom hgt
	    GOTO 1000			! and return
	  ENDIF
C
C We have flooded already so we need to work out the movement
C of the cursor or trackerball and re-write the colours accordingly
	  IF (FROM.EQ.CURSOR_BUT) THEN 
	    X_MVMT = (X_TAB - PRE_X_TAB)/10
	    Y_MVMT = (Y_TAB - PRE_Y_TAB)/10
	    MVMT = SQRT((X_MVMT*X_MVMT)+(Y_MVMT*Y_MVMT))
	    IMVMT = INT(MVMT)	
	    IF (IMVMT.LT.0) GOTO 1000		! no movement so return
C
	  ELSE IF (FROM.EQ.TRACKERBALL) THEN
	    X_MVMT = XCUR - PRE_XCUR
	    Y_MVMT = YCUR - PRE_YCUR
	    MVMT = SQRT((X_MVMT*X_MVMT)+(Y_MVMT*Y_MVMT))
	    IMVMT = INT(MVMT)
	    IF (IMVMT.LT.0) GOTO 1000		! no movement so return
	  ENDIF
C
C Are we flooding or "un-flooding" (draining).
	  IF (Y_MVMT.LT.0) THEN			! we are "un-flooding"
	    TMP_HGT = TOP_HGT-IMVMT		! height to drain to
	    IF (TMP_HGT.LT.FMIN_HGT) THEN	! we have reached bottom
	      CALL WRITEF 
     &		('Reached bottom limit of flooding')
	      TMP_HGT = FMIN_HGT
	    ENDIF
C
	    DO 310 I = ICOL(TOP_HGT),ICOL(TMP_HGT),-1
	      DO 300 J = 1,4
	        FLD_COL(J) = TMPTAB(J,I)
300	      CONTINUE
	      CALL VSSGSC(I,IVALUE)	   	! re-write the colour
310	    CONTINUE
C
	    TOP_HGT = TMP_HGT	! top flooded height has changed 
C
C
	  ELSE					! we are re-flooding
	    TMP_HGT = TOP_HGT+IMVMT
	    IF (TMP_HGT.GT.FMAX_HGT) THEN	! we have reached top
	      CALL WRITEF 
     &		('Reached upper limit of flooding')
	      TMP_HGT = FMAX_HGT
	    ENDIF
C
C
C Re-set up the colour to flood in ie. BLUE (CHELSEA colours !!)
	    FLD_COL(1)=0
	    FLD_COL(2)=0
	    ITEMP=255 ! blue is the colour ... football is the game
	    FLD_COL(3)=BTEMP
	    FLD_COL(4)=0
C
	    DO 330 I = ICOL(TOP_HGT),ICOL(TMP_HGT)
	      CALL VSSGSC(I,IVALUE)	   	! re-write the colour
330	    CONTINUE
C
	    TOP_HGT = TMP_HGT	! top flooded height has changed 
C
	  ENDIF
C
C...................................................................
C We are not flooding (-FLOOD) !!! 
C Put cursor back to it's old position leaving the colour table as
C it is.
	ELSE
	  XCUR = XCUR_SAV  
	  YCUR = YCUR_SAV  
	  X_TAB = XTAB_SAV  
	  Y_TAB = YTAB_SAV  
	ENDIF
C
C...................................................................
1000	RETURN
	END	
