C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-02-17 19:07:02.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE FILE
C
***	IDENT	17FE87
***	MODULE	FILE
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C
C	Author	  : Andrew Morris
C	Created   : Oct 1984
C
CMOD	Change col tab logical to LSL$LOOKUP   MWSR 17-Feb-1987
CMOD	Trackerball and function button initialisation added
C						ATT	23-Jul-1986
C
	IMPLICIT NONE
C
***	PARAMETER/DTM$PAR:DTIDEF/
***	PARAMETER/HERE:DTEPAR/
C
***	COMMON/LSL$CMNVIO:TXTC/
***	COMMON/LSL$CMNVIO:EXPC/
***	COMMON/HERE:DTECMN/
***	COMMON/HERE:TAB/
***	COMMON/HERE:TRANS/
C
C workspace
	INTEGER		I		! integer
	INTEGER		PSDSTR(2)	! ???STRing
	INTEGER		NBLOCKS		! number of blocks in DTI file
	INTEGER		HGT		! a DTI height
	INTEGER		NSTEPS		! number of visible hgt steps
	INTEGER		PTR		! a TXTBUF pointer
C
	REAL		X_EW,Y_EW	! east west vector
	REAL		SF		! a scale factor
C
	LOGICAL		EOLN		! end of line?
C
	BYTE		CH		! for RDCHS
C
C functions
	INTEGER		VIO$OPEN_SEC	! map a file to memory
C
	INTEGER*2	DTI_GETNUM	! gets number from DTI file
	INTEGER*2	DTI_HGT		! DTI height
C
	LOGICAL		RDFILT		! read file title
	LOGICAL		RDCHS		! read next non-blank character
	LOGICAL		STREQ		! strings equal?
	LOGICAL		FLROPB		! open file for block reading
	LOGICAL		FLRCLO		! close file openned for reading
	LOGICAL		SET_WINDOW	! set DTI window
C
C:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
C Reads input (and output) DTI filename(s), maps output file onto array
C DTI, and draws the colour coded DTI array to the SIGMA
C
C Default output file is new version of input file
C:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
C
C (this ABANDON mechanism doesn't seem to work)
10	IF (TXTBUF(1).EQ.26) GOTO 60	! abandon FILE command?
C
C ignore blank lines
	EOLN = RDCHS(CH)		! read next non-space character
	IF (EOLN) GOTO 15
	CALL BSCH			! else backspace
C
C ignore single or double quotation marks
	DO 12 I = 1,TXTPTR		! replace any quotes with spaces
12	IF (TXTBUF(I).EQ.''''.OR.TXTBUF(I).EQ.'"') TXTBUF(I) = ' '
C
	CALL DCPSAV(PTR)		! store DCPTR
C
C read filename
20	ERR = RDFILT(
     +	  FILENAME,		! read as input filename
     +    80,			! filename buffer length
     +	 'LSL$DTI:.DTI',	! default filename
     +	 .FALSE.,		! special numerical filenames?
     +	 .TRUE.,		! allow version numbers?
     +	 .FALSE.,		! allow blank filenames?
     +	  IERR)			! error return code
C
	IF (ERR) THEN
	  IF (TXTPTR.LT.80) TXTBUF(TXTPTR+1) = 0
	  CALL LIB$UP_SCROLL()
	  CALL LIB$SET_CURSOR(BOT_LIN,1)
	  CALL WRITEF('%SError in filename : ''%A''',BELL,TXTBUF(PTR))
15	  CALL LIB$UP_SCROLL()
	  CALL LIB$SET_CURSOR(BOT_LIN,1)
	  CALL TTRSTR(,'Filename> ')
	  CALL BSLN		! ground TXTBUF pointer
	  GOTO 10		! try again
	END IF
C
C map file to memory
	IERR  = VIO$OPEN_SEC(	! map file to memory
     +     FILENAME,		! filename
     +	   NBLOCKS,		! No. of blocks required
     +    .TRUE.,		! write access?
     +    .FALSE.,		! create new file?
     +     SEC_ADDR,		! start address of memory mapped to
     +	   SEC_SIZE)		! size of file in bytes
C
	IF (.NOT.IERR) THEN
	  CALL GEN_SYSMSG(IERR)
	  GOTO 15		! try again
	END IF
C
C (re-)initialise SIGMA ARGS 7000 graphic display
	IF (.NOT.FILE_SET) THEN
	   CALL VSINIT(15)
	   CALL VSSIZE(X_DISP,Y_DISP)	! Size of display
C	   CALL VSALOF		! turn off alpha cursor
	   CALL VSDEF(1,6,0)	! set up picture 1 with 6 bit planes
	   CALL VSPIC(1)		! draw to pic 1
	   CALL VSSEL(1)		! display pic 1
	   CALL VSRDSC('LSL$LOOKUP:DTECOL.DAT')	! read in colour table
	ENDIF
C
C set up display of DTI information
	CALL LIB$ERASE_PAGE(1,1)		! clear whole page
	CALL LIB$SET_SCROLL(TOP_LIN,BOT_LIN)	! scroll bot half screen
C
	DO 25 I = 1,TOP_LIN-1	! fill data area in reverse video
25	CALL LIB$PUT_SCREEN
     +  ('                                                             
     +                   ',I,1,2)	! 80 columns wide
C
	CALL LIB$PUT_SCREEN('DTI FILE        :',2,COL0,3)
C
	CALL LIB$PUT_SCREEN('FILE X RANGE    :',4,COL0,3)
	CALL LIB$PUT_SCREEN('-',4,COL2-2,2)
C
	CALL LIB$PUT_SCREEN('FILE Y RANGE    :',5,COL0,3)
	CALL LIB$PUT_SCREEN('-',5,COL2-2,2)
C
	CALL LIB$PUT_SCREEN('FILE H RANGE    :',6,COL0,3)
	CALL LIB$PUT_SCREEN('-',6,COL2-2,2)
C
	CALL LIB$PUT_SCREEN('CURSOR HEIGHT   :',8,COL0,3)
C
	CALL LIB$PUT_SCREEN('CURSOR POSITION :',9,COL0,3)
C
	CALL LIB$PUT_SCREEN('WINDOW X RANGE  :',4,COL3,3)
	CALL LIB$PUT_SCREEN('-',4,COL5-2,2)
C
	CALL LIB$PUT_SCREEN('WINDOW Y RANGE  :',5,COL3,3)
	CALL LIB$PUT_SCREEN('-',5,COL5-2,2)
C
	CALL LIB$PUT_SCREEN('WINDOW H RANGE  :',6,COL3,3)
	CALL LIB$PUT_SCREEN('-',6,COL5-2,2)
C
	CALL LIB$PUT_SCREEN('HEIGHT LIMITS   :',8,COL3,3)
	CALL LIB$PUT_SCREEN('-',8,COL5-2,2)
C
	CALL LIB$PUT_SCREEN('STEP HEIGHT     :',9,COL3,3)
C
	CALL LIB$SET_CURSOR(BOT_LIN,1)	! position cursor for later
C
C set state information
	GOT_FLOOD = .FALSE.	! not yet had flooding
	GOT_BORDER = .FALSE.	! not yet drawn map boundary on T4014
	GOT_CONTORS = .FALSE.	! not yet drawn any contours on T4014
C
C show filename on VDU screen
	CALL LIB$PUT_SCREEN(FILENAME,2,COL1,3)
C
C set up data from the DTI file
	PSDSTR(1) = 4		! length
	PSDSTR(2) = SEC_ADDR	! address
	IF (STREQ(PSDSTR,'UHL1')) THEN
	  DATA_OFFSET = DTI_DMA_DATA
	  EEXT_OFFSET = DTI_DMA_EEXT
	  NEXT_OFFSET = DTI_DMA_NEXT
	  HMIN_OFFSET = DTI_DMA_HMIN
	  HMAX_OFFSET = DTI_DMA_HMAX
	  STEP_OFFSET = DTI_DMA_EINT
	ELSE IF (STREQ(PSDSTR,'TED4')) THEN
	  DATA_OFFSET = DTI_TED_DATA
	  EEXT_OFFSET = DTI_TED_EEXT
	  NEXT_OFFSET = DTI_TED_NEXT
	  HMIN_OFFSET = DTI_TED_HMIN
	  HMAX_OFFSET = DTI_TED_HMAX
	  STEP_OFFSET = DTI_TED_EINT
	ELSE IF (STREQ(PSDSTR,'MIKE')) THEN
	  DATA_OFFSET = DTI_PAN_DATA
	  EEXT_OFFSET = DTI_PAN_EEXT
	  NEXT_OFFSET = DTI_PAN_NEXT
	  HMIN_OFFSET = DTI_PAN_HMIN
	  HMAX_OFFSET = DTI_PAN_HMAX
	  STEP_OFFSET = DTI_PAN_EINT
	ELSE
	  CALL LIB$UP_SCROLL()
	  CALL LIB$SET_CURSOR(BOT_LIN,1)
	  CALL WRITEF('%SUnknown DTI type (%S)',BELL,PSDSTR)
	  GOTO 60	! return
	ENDIF
	FIRST_HGT = SEC_ADDR+DATA_OFFSET
C
	NX_DTI = DTI_GETNUM(%VAL(SEC_ADDR),EEXT_OFFSET)
	NY_DTI = DTI_GETNUM(%VAL(SEC_ADDR),NEXT_OFFSET)
C
C show DTI extents
	CALL WRTINT(1,4,COL1)
	CALL WRTINT(NX_DTI,4,COL2)
	CALL WRTINT(1,5,COL1)
	CALL WRTINT(NY_DTI,5,COL2)
C
	STEP = DTI_GETNUM(%VAL(SEC_ADDR),STEP_OFFSET)
C
	IF (NX_DTI.LE.1.OR.NY_DTI.LE.1) THEN
	  CALL LIB$UP_SCROLL()
	  CALL LIB$SET_CURSOR(BOT_LIN,1)
	  CALL WRITEF
     +    ('%SMatrix size invalid (%N x %N)',BELL,NX_DTI,NY_DTI)
	  GOTO 60	! return
	ENDIF
C
	IF (SEC_SIZE.LT.NX_DTI*NY_DTI*2+DATA_OFFSET) THEN
	  CALL LIB$UP_SCROLL()
	  CALL LIB$SET_CURSOR(BOT_LIN,1)
	  CALL WRITEF('%SDTI data is inconsistent',BELL)
	  CALL WRITEF('Claims size is (%^L%N), but is in fact %^L%N%S',
     +    SEC_SIZE,NX_DTI*NY_DTI*4+DATA_OFFSET)
	  GOTO 60	! return
	ENDIF
C
	MIN_HGT = DTI_GETNUM(%VAL(SEC_ADDR),HMIN_OFFSET)
C
C null height should not be treated as a minumum height
	IF (MIN_HGT.LE.-32767)
     +	  CALL FIND_HGT_RANGE(%VAL(FIRST_HGT),.FALSE.)
C
	MAX_HGT = DTI_GETNUM(%VAL(SEC_ADDR),HMAX_OFFSET)
C
	VALID_MIN_HGT = .TRUE.
	VALID_MAX_HGT = .TRUE.
	VALID_MIN_HGT_WIN = .TRUE.
	VALID_MAX_HGT_WIN = .TRUE.
	NEW_MIN_HGT = .FALSE.
	NEW_MAX_HGT = .FALSE.
	NEW_MIN_HGT_WIN = .FALSE.
	NEW_MAX_HGT_WIN = .FALSE.
C
C set constants for use in deciding height/colour coding
	BOT_VIZ = MIN_HGT	! default visible range is whole range
	TOP_VIZ = MAX_HGT
C
	LAND_BOT = MAX0(0,MIN_HGT)
C
	STEP_HGT = (TOP_VIZ-MAX0(0,BOT_VIZ)-1)/(NCOLS-1-ICOL_SEA)+1
	IF (STEP_HGT.LT.1) STEP_HGT = 1
C
	LAND_BOT = STEP_HGT*(LAND_BOT/STEP_HGT)		! step from 0
	SEA_BOT = -STEP_HGT*(ICOL_SEA-1)
C
	NSTEPS = (TOP_VIZ-MAX0(0,BOT_VIZ))/STEP_HGT
	IF (NSTEPS.LT.1) NSTEPS = 1
	INJ = (NCOLS-1-ICOL_SEA)/NSTEPS	  
	IF (INJ.LT.1) INJ = 1
C
C display height information on VDU
	CALL WRTINT(MIN_HGT,6,COL1)
	CALL WRTINT(MAX_HGT,6,COL2)
	CALL WRTINT(BOT_VIZ,8,COL4)
	CALL WRTINT(TOP_VIZ,8,COL5)
	CALL WRTINT(STEP_HGT,9,COL4)
C
C set up DTI_TO_TEK to map whole DTI file to right square part
C of Tektronix screen
	SF = 2*AMIN1(XRANGE_TEK/NX_DTI,YRANGE_TEK/NY_DTI)
	DTI_TO_TEK(1,1) = SF
	DTI_TO_TEK(1,2) = 0
	DTI_TO_TEK(1,3) = -SF*NX_DTI/2+XRANGE_TEK-YRANGE_TEK
	DTI_TO_TEK(2,1) = 0
	DTI_TO_TEK(2,2) = SF
	DTI_TO_TEK(2,3) = -SF*NY_DTI/2
	DTI_TO_TEK(3,1) = 0
	DTI_TO_TEK(3,2) = 0
	DTI_TO_TEK(3,3) = 1
C
	FILE_SET = .TRUE.	! DTI file is now set
C
60	CALL LIB$SET_CURSOR(BOT_LIN,1)
C
	END
