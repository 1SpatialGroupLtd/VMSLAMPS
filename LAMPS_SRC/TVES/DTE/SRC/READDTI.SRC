	INTEGER FUNCTION READ_DTI_COORDS(X_DTI,Y_DTI,WHOLE_MAP,PLEN)
C
***	IDENT	29JL86
***	MODULE	READ_DTI_COORDS
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C
C	Author	  : Andrew Morris
C	Created   : Oct 1984
C
CMOD	X_TAB,YTAB moved to DTECMN
C
	IMPLICIT NONE
C
C parameters in
	LOGICAL		WHOLE_MAP	! coords valid over whole map?
	INTEGER		PLEN		! prompt length
C
C parameters out
	INTEGER		X_DTI,Y_DTI	! DTI coords
C
C parameters
***	PARAMETER/HERE:DTEPAR/
C
***	COMMON/LSL$CMNVIO:TXTC/		! has TXTBUF for comm line
***	COMMON/LSL$CMNVIO:EXPC/		! message output
***	COMMON/LSL$CMNVIO:CMDCOM/	! command decoding
***	COMMON/HERE:DTECMN/		! has XMIN_DTI, etc.
***	COMMON/HERE:TRANS/		! has TAB_TO_DTI transformation
***	COMMON/HERE:TAB/		! has ERR,IERR etc
C
C functions
	INTEGER		RDCOMM		! read next command
C
	LOGICAL		READ_PUCK	! read puck data
	LOGICAL		HAD_PUCK	! had puck input?
	LOGICAL		RDLONG		! read integer?
	LOGICAL		RDCHS		! read next non blank character
	LOGICAL		IN_MENU		! point in menu box?
C
C workspace
	REAL		R1,R2,R3,R4	! temp reals
	LOGICAL		GOT_COORDS	! got DTI coords?
	INTEGER		CMD		! command number
	BYTE		CH		! a character
	LOGICAL		EOLN		! end of line?
C
C externals
	INTEGER		DTE_CMD_TABLE	! table of keyboard commands
	EXTERNAL	DTE_CMD_TABLE
C
C:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
C Reads point in DTI coords, input from keyboard or table cursor
C
C Function result returns	-2 for table error
C				-1 for other error,
C				 0 for success,
C				 1 for ABANDON command,
C				 2 for END command
C:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
C
	GOT_COORDS = .FALSE.		! no coords yet obtained
	CMD = 0				! no command defined yet
C
C interpret input, according to where it is from
	IF (HAD_VDU) THEN		! keyboard input
	  IF (TXTBUF(1).EQ.26) THEN	! abandon?
	    READ_DTI_COORDS = 1
	    GOTO 30			! return
	  END IF
	  CALL BSLN
	  EOLN = RDCHS(CH)
	  IF (EOLN) THEN		! ignore blank lines
	    READ_DTI_COORDS = -1
	    GOTO 30			! return
	  END IF
	  IF ((CH.GE.'0'.AND.CH.LE.'9').OR.CH.EQ.'-'.OR.CH.EQ.'+') THEN
	    CALL BSCH
	    ERR = RDLONG(X_DTI)
	    IF (.NOT.ERR) ERR = RDLONG(Y_DTI)
	    IF (.NOT.ERR) THEN
	      GOT_COORDS = .TRUE.
	    ELSE
	      CALL EXPAND('%SBad point',BELL)
	      CALL DTEMSG(EXPDSC)
	      READ_DTI_COORDS = -1
	    END IF
	  ELSE			 	! interpret as command line
	    CALL BSLN
	    CMD = RDCOMM(DTE_CMD_TABLE)
	    IF (CMD.EQ.CMD_ABANDON) THEN
	      READ_DTI_COORDS = 1
	    ELSE IF (CMD.EQ.CMD_END) THEN
	      READ_DTI_COORDS = 2
	    ELSE
	      CALL EXPAND('%SUnexpeted ''%A''',BELL,TXTBUF(1))
	      CALL DTEMSG(EXPDSC)
	      READ_DTI_COORDS = -1
	    END IF
	  END IF
C
	ELSE IF (HAD_PUCK()) THEN		! table input?
	  PRE_X_TAB = X_TAB			! Put old TABLE coords
	  PRE_Y_TAB = Y_TAB			! where they belong
	  ERR = READ_PUCK(BUTTON,X_TAB,Y_TAB,IERR)
	  IF (ERR) THEN
	    CALL EXPAND('%SError reading puck data',BELL)
	    CALL DTEMSG(EXPDSC)
	    CALL DTE_EXIT(.TRUE.)		! exit
	  END IF
C
	  IF (IN_MENU(CMD)) THEN
	    IF (CMD.EQ.CMD_ABANDON) THEN
	      READ_DTI_COORDS = 1
	    ELSE IF (CMD.EQ.CMD_END) THEN
	      READ_DTI_COORDS = 2
	    ELSE
	      CALL EXPAND('%SMenu command %N invalid in this context',
     +	        BELL,CMD)
	      CALL DTEMSG(EXPDSC)
	      READ_DTI_COORDS = -1
	    END IF
	  ELSE					! may be button command
	    CMD = BUTTON+1
	    IF (CMD.EQ.CMD_ABANDON) THEN
	      READ_DTI_COORDS = 1
	    ELSE IF (CMD.EQ.CMD_END) THEN
	      READ_DTI_COORDS = 2
	    ELSE IF (.NOT.MAP_SET) THEN
	      CALL EXPAND('%SMap is not located',BELL)
	      CALL DTEMSG(EXPDSC)
	      READ_DTI_COORDS = -1
	    ELSE				! interpret as a DTI pnt
	      R1 = X_TAB
	      R2 = Y_TAB
	      CALL TRANSF(TAB_TO_DTI,R1,R2,R3,R4)
	      X_DTI = R3
	      Y_DTI = R4
	      GOT_COORDS = .TRUE.
	      CALL EXPAND('%N %N',X_DTI,Y_DTI)	! echo coords from table
	      CALL LIB$PUT_SCREEN(EXPDSC,BOT_LIN,PLEN+4,0)
	    END IF
	  END IF
	END IF
C
	IF (GOT_COORDS) THEN	! check range of any DTI coords obtained
	  IF (WHOLE_MAP) THEN
	    IF (X_DTI.GE.1.AND.X_DTI.LE.NX_DTI.AND.
     +          Y_DTI.GE.1.AND.Y_DTI.LE.NY_DTI) THEN
	      READ_DTI_COORDS = 0
	    ELSE
	      CALL EXPAND('%SDTI coord(s) out of range (%N:%N,%N:%N)',
     +	        BELL,1,NX_DTI,1,NY_DTI)
	      CALL DTEMSG(EXPDSC)
	      READ_DTI_COORDS = -1
	    END IF
	  ELSE
	    IF (X_DTI.GE.XMIN_DTI.AND.X_DTI.LE.XMAX_DTI.AND.
     +          Y_DTI.GE.YMIN_DTI.AND.Y_DTI.LE.YMAX_DTI) THEN
	      READ_DTI_COORDS = 0
	    ELSE
	      CALL EXPAND('%SDTI coord(s) out of range (%N:%N,%N:%N)'
     +	        ,BELL,XMIN_DTI,XMAX_DTI,YMIN_DTI,YMAX_DTI)
	      CALL DTEMSG(EXPDSC)
	      READ_DTI_COORDS = -1
	    END IF
	  END IF
	END IF
C
	IF (CMD.NE.CMD_MOVE.AND.CMD.NE.CMD_CENTRE) GOTO 30
	IF (READ_DTI_COORDS.NE.0) GOTO 30
C
	IF (CMD.EQ.CMD_MOVE) THEN
	  CALL EXPAND('MOVE %N %N',X_DTI,Y_DTI)
	  CALL LIB$PUT_SCREEN(EXPDSC,BOT_LIN,PLEN+4,0)
	  CALL SIGCSWT(X_DTI,Y_DTI,.FALSE.)
	ELSE IF (CMD.EQ.CMD_CENTRE) THEN
	  CALL EXPAND('CENTRE %N %N',X_DTI,Y_DTI)
	  CALL LIB$PUT_SCREEN(EXPDSC,BOT_LIN,PLEN+4,0)
	  CALL SIGCSWT(X_DTI,Y_DTI,.TRUE.)
	END IF
	CALL LIB$UP_SCROLL()
C
	READ_DTI_COORDS = -1 !this will make GET_DTI_COORDS prompt again
C
30	END
