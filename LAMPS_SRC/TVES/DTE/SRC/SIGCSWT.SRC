C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-02-19 16:48:02.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
8	SUBROUTINE SIGCSWT(X_DTI,Y_DTI,CENTRE)
C
***	IDENT	15AU86
***	MODULE	SIGCSWT
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C
C	Author	  : Andrew Morris
C	Created   : Oct 1984
C
CMOD	Output on SIGMA made even better !	ATT 14-Aug-1986
CMOD	Tidied and output changed depending on state of VT 
C						ATT  1-Aug-1986
C
	IMPLICIT NONE
C
***	PARAMETER/HERE:DTEPAR/		! has COL4, etc
C
***	COMMON/HERE:DTECMN/		! has FIRST_HGT
***	COMMON/HERE:CURS/		! has CURSAR
***	COMMON/HERE:TRANS/		! has DTI_TO_PIX
***	COMMON/HERE:TAB/
***	COMMON/LSL$CMNVIO:TXTC/
***	COMMON/LSL$CMNVIO:EXPC/
***	COMMON/LSL$CMNVIO:CMDCOM/
C
C parameters in
	INTEGER		X_DTI,Y_DTI	! DTI matrix coords
	LOGICAL		CENTRE		! force centre?
C
C workspace
	INTEGER		X_PIX,Y_PIX	! centre pixel coords
	INTEGER		IX
	INTEGER		XMAG,YMAG	! X and Y scale factors
	INTEGER		HGT		! a DTI height
C
	REAL		LLTX,LLTY	! TEK window LL TEK coords
	REAL		URTX,URTY	! TEK window UR TEK coords
	REAL		RX,RY		! temp reals
C
C functions
	INTEGER*2	DTI_HGT		! DTI height
C
C:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
C Moves purpose built SIGMA cursor to DTI point (X_DTI,Y_DTI).
C
C If point is not within the current SIGMA display window, the window
C moves to a neighbouring window closer to (X_DTI,Y_DTI) untill it is.
C
C Cursor height and position are written to the VDU display
C:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
C
	IF (.NOT.WINDOW_SET) GOTO 99	! return
C
	CALL VSDEF(2,1,7)		! define pic 2 as plane 7
	CALL VSPIC(2)			! draw to pic 2
	CALL VSCLR(2)			! delete existing cursor
C
C set new global cursor position
	XCUR = X_DTI
	YCUR = Y_DTI
C
	X_PIX = XCUR+DTI_TO_PIX(1,3)	! pixel cursor coords
	Y_PIX = YCUR+DTI_TO_PIX(2,3)
C
C draw horizontal part of cursor cross
	CURSAR(1) = 0			! MAG minus 1 (?)
	CURSAR(2) = 3			! constant
	CURSAR(3) = X_PIX-CURSIZ/2	! start in X
	CURSAR(4) = Y_PIX		! start in Y
	CURSAR(5) = CURSIZ		! No. of cols
	CURSAR(6) = 1			! No. of rows
	CURSAR(7) = (CURSIZ+1)/2	! No. of data WORDS following
	CURCOL(CURSIZ+1) = 0		! data terminator
	CALL VSPXWT(CURSAR)
C
C draw vertical part of cross
	CURSAR(1) = 0
	CURSAR(2) = 3
	CURSAR(3) = X_PIX
	CURSAR(4) = Y_PIX-CURSIZ/2
	CURSAR(5) = 1
	CURSAR(6) = CURSIZ
	CURSAR(7) = (CURSIZ+1)/2
	CURCOL(CURSIZ+1)= 0
	CALL VSPXWT(CURSAR)
C
	CALL VSDEF(2,2,6)
	CALL VSSEL(3)		! draw pictures 1 and 2
	CALL VSPIC(1)		! select picture 1 for subsequent output
	CALL VSGEN		! flush SIGMA drawing command buffer
C
C show cursor height and location depending upon status of VT
	HGT = DTI_HGT(XCUR,YCUR,%VAL(FIRST_HGT))
	IF (VT) THEN
	  CALL WRTINT(HGT,8,COL1)
	  CALL WRTINT(XCUR,9,COL1)
	  CALL WRTINT(YCUR,9,COL2)
	ELSE
	  CALL EXPAND('%C%C',27,69)	! Clear alpha plane "<ESC>E"
	  CALL FLWLIN
	  CALL EXPAND('Cursor position %I5 %I4 Height %I',XCUR,YCUR,HGT)
	  CALL FLWLIN
	  CALL EXPAND(' ')
	  CALL FLWLIN
	ENDIF
C
C if CENTRE is .TRUE. then centre about current cursor position,
C else if location is not (well-) within current window, then move up,
C down, left or right to neighbouring window
	IF (XCUR.LT.XCUR_MIN.OR.XCUR.GT.XCUR_MAX.OR.
     +	    YCUR.LT.YCUR_MIN.OR.YCUR.GT.YCUR_MAX.OR.CENTRE) THEN
	  IF (CENTRE) GOTO 105
C
101	  IF (XCUR.GT.XCUR_MAX) THEN
	    X_PIX = MIN0(X_PIX+NX_PIXELS/(2*MAG),NX_PIXELS)
	  ELSE IF (XCUR.LT.XCUR_MIN) THEN
	    X_PIX = MAX0(X_PIX-NX_PIXELS/(2*MAG),1)
	  ELSE IF (YCUR.GT.YCUR_MAX) THEN
	    Y_PIX = MIN0(Y_PIX+NY_PIXELS/(2*MAG),NY_PIXELS)
	  ELSE IF (YCUR.LT.YCUR_MIN) THEN
	    Y_PIX = MAX0(Y_PIX-NY_PIXELS/(2*MAG),1)
	  END IF
C
105	  X_CENTRE = X_PIX-DTI_TO_PIX(1,3)	! new centre DTI coords
	  Y_CENTRE = Y_PIX-DTI_TO_PIX(2,3)
C
C find DTI coords of new visible DTI area LL and UR corners
	  XCUR_MIN = MAX0(X_CENTRE - NX_PIXELS/(2*MAG), XMIN_DTI)
	  YCUR_MIN = MAX0(Y_CENTRE - NY_PIXELS/(2*MAG), YMIN_DTI)
	  XCUR_MAX = MIN0(X_CENTRE + NX_PIXELS/(2*MAG), XMAX_DTI)
	  YCUR_MAX = MIN0(Y_CENTRE + NY_PIXELS/(2*MAG), YMAX_DTI)
	  IF (CENTRE) GOTO 102
C
C check current cursor position IS within NEW window
	  IF (XCUR.LT.XCUR_MIN.OR.XCUR.GT.XCUR_MAX.OR.
     +	      YCUR.LT.YCUR_MIN.OR.YCUR.GT.YCUR_MAX) GOTO 101
C
C effect window translation by writing SIGMA cursor position to this
C point and then zooming about it
102	  CALL VSCSWP(X_PIX,Y_PIX)
	  XMAG = MAG-1
	  YMAG = MAG-1
	  CALL VSZOOM(8,XMAG,YMAG)
C
C redraw window on T4014
	  IF (GOT_TEK) THEN
	    IF (.NOT.GOT_BORDER) CALL BORDER
	    RX = XCUR_MIN
	    RY = YCUR_MIN
	    CALL TRANSF(DTI_TO_TEK,RX,RY,LLTX,LLTY)
	    RX = XCUR_MAX
	    RY = YCUR_MAX
	    CALL TRANSF(DTI_TO_TEK,RX,RY,URTX,URTY)
C
	    CALL DISMOD(1)	  	! clear refresh buffer
	    CALL MOVTO(LLTX,LLTY)
	    CALL LINTO(LLTX,URTY)
	    CALL LINTO(URTX,URTY)
	    CALL LINTO(URTX,LLTY)
	    CALL LINTO(LLTX,LLTY)
	    CALL REFRSH		  	! redraw T4014 refresh display
	  END IF
	END IF
C
99	END
