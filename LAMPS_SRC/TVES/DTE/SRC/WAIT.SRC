C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-08-04 16:10:06.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION WAIT_INPUT(PROMPT)
C
***	IDENT	04AU86
***	MODULE	WAIT_INPUT
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C
C	Author	  : Andrew Morris
C	Created   : Jan 1985
C
CMOD	Modified for trackerball and function button input
C						ATT July-1986
C
	IMPLICIT NONE
C
C parameters in
	CHARACTER*(*)		PROMPT	! prompt
C
C parameters
***	PARAMETER/HERE:DTEPAR/
C
C system parameters
	INCLUDE '($SSDEF)'
	INCLUDE '($IODEF)'
C
C commons
***	COMMON/LSL$CMNVIO:TXTC/
***	COMMON/HERE:DTEQIO/
***	COMMON/HERE:TAB/
***	COMMON/HERE:DTECMN/
C
C functions
	INTEGER		SYS$QIO		! "queue" an input requeuest
	INTEGER		SYS$READEF	! read event flag
C
	INTEGER*2	TTRLIN		! read line from SYS$INPUT
C
	LOGICAL		HAD_ERROR	! had table input error?
	LOGICAL		HAD_PUCK	! had puck input?
	LOGICAL		READ_ERROR	! read error message
C
C workspace
	INTEGER		I		! longword for SYS$READEF
C
	INTEGER*2	IERR2		! ret code from TTRSTR
C
	LOGICAL		HADQIO		! had a QIO?
C
C:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
C Prompts and waits for input from keyboard trackerball puck or 
C function buttons
C
C Function result is	.FALSE. for possibly fatal read error,
C			.TRUE. otherwise.
C:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
C
	WAIT_INPUT = .FALSE.		! assume error
	HADQIO = .FALSE.		! not yet had a QIO
	HAD_VDU = .FALSE.		! not yet had keyboard input
	HAD_TRKB = .FALSE.		! not yet had trackerball input
	HAD_FB = .FALSE.		! no function button input yet
	TXTLIM=80
C
10	CALL LIB$UP_SCROLL()
	CALL LIB$UP_SCROLL()
	CALL LIB$SET_CURSOR(BOT_LIN,1)
C
C write prompt (with bell if not for a command -ie. for an argument)
	WRITE(*,FMT='(1H+,A)')PROMPT//'>'
	CALL LIB$SET_CURSOR(BOT_LIN,LEN(PROMPT//'>  '))
C
15	IF (CMDFIL) THEN		! commands from command file?
	  IERR2 = TTRLIN()		! read next line from SYS$INPUT
	  IF (IERR2.LT.0) THEN
	    CALL LIB$PUT_SCREEN
     +	      ('EXIT at end of command file',BOT_LIN,6,0)
	    CALL WRITEF('%S',BELL)
	    GOTO 20			! return FALSE
	  END IF
C
	  IF (TXTPTR.LT.80) TXTBUF(TXTPTR+1) = 0
	  CALL LIB$SET_CURSOR(BOT_LIN-1,LEN(PROMPT//'>  '))
	  CALL WRITEF('%A',TXTBUF(1))	! echo input line
	  HAD_VDU = .TRUE.
	  GOTO 17			! input is a text command line
	END IF
C
C queue input requeuest
	IF (HADQIO) CALL SYS$CANCEL(%VAL(IN_CHAN))
C
	IERR = SYS$QIO
     +	  	(
     +		%VAL(EF_VDU),		! event flag to be set
     +  	%VAL(IN_CHAN),		! input channel number
     +  	%VAL(IO$_READVBLK),	! I/O function
     +  	ISB,			! I/O status block
     +  	,			! AST address
     +  	,			! AST parameters
     +  	TXTBUF,			! p1 is buffer
     +  	%VAL(TXTLIM-1),		! p2 is max buffer length
     +    	,			! p3 is default timeout period
     +  	,			! p4 is default terminator
     +  	,			! p5 is prompt string
     +  	,			! p6 is prompt length
     +  	)
	HADQIO = .TRUE.			! now had a QIO
C
C QIO successful?
	IF (.NOT.IERR) THEN
	  CALL GEN_SYSMSG(IERR)
	  GOTO 15			! try again
	END IF
C
16	IF (HAD_ERROR()) CALL READ_ERROR(ERRBUF,ERRLEN,ERRNOM,IERR)
C
C wait for keyboard button or trackerball input
	IF (HAD_TABLE) THEN
	  CALL WFLOR(EF_POINT,EF_ERROR,EF_VDU,EF_FB,EF_TRKB)
	ELSE
	  CALL WFLOR(EF_VDU,EF_FB,EF_TRKB)
	ENDIF
C
C which events have been had?
	HAD_VDU = ISB_STATUS.NE.0				! VDU
	HAD_TRKB = SYS$READEF(%VAL(EF_TRKB),I).EQ.SS$_WASSET	! TRKB
	HAD_FB = SYS$READEF(%VAL(EF_FB),I).EQ.SS$_WASSET	! FB's
C
	IF (HAD_VDU) THEN		! had keyboard input?
	  IF (.NOT.ISB_STATUS) THEN
	    CALL GEN_SYSMSG(ISB_STATUS)	! debug
	    GOTO 15			! try again
	  ENDIF
	  TXTPTR = ISB_TOFF
	END IF
C
C Had function button or trackerball?
	IF (HAD_FB.OR.HAD_TRKB) GOTO 18	! success
C
17	IF (HAD_VDU) THEN		! had keyboard input?
	  IF (TXTBUF(1).EQ.26) GOTO 18	! return OK for ^Z
	  IF (TXTPTR.EQ.0) GOTO 10	! try again if blank line
	  CALL BSLN
	ELSE IF (HAD_ERROR(IERR)) THEN
	  GOTO 16			! try again
	END IF
C
18	WAIT_INPUT = .TRUE.		! success
C
C don't leave any QIOs outstanding
20	CALL SYS$CANCEL(%VAL(IN_CHAN))	! cancel QIO
	END
